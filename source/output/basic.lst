
; 64tass Turbo Assembler Macro V1.56.2625 listing file
; 64tass -D AUTORUN=0 -q -b -Wall -Wno-portable -c -L output/basic.lst -l output/basic.lbl -Wall -o basic.rom _basic.asm
; Wed Oct  5 16:59:45 2022

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=0					AUTORUN=0

;******  Processing input file: _basic.asm


;******  Processing file: ./common/aa.system/01common.inc

=$30					ZeroPageMandatory = $30
=$600					ZeroPagePreference = $600
=$700					MemoryStorage = $700
=$2000					BasicStart = $2000
=$8000					CodeStart = $8000
=$1000					VariableSpace = $1000
=$2000					EndVariableSpace = $2000
=8					MathStackSize = 8
=512					BasicStackSize = 512
=3584					BasicStackBase = $1000-BasicStackSize
=80					MaxLineSize = 80

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/04data.inc

.0030					codePtr:
>0030							.fill 	4
.0034					basicStack:
>0034							.fill 	2
.0036					zTemp0:
>0036							.fill 	2
.0038					zTemp1:
>0038							.fill 	2
.003a					zTemp2:
>003a							.fill 	2
.003c					zsTemp:
>003c							.fill 	2
.003e					zaTemp:
>003e							.fill 	2
=$30					safePtr = codePtr 							; minimise direct tinkering
=$80					NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20					NSBIsReference = $20 						; bit 5 : is a reference
=$10					NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18					NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03					NSBRefMask = $03 							; bits 0,1 : Bytes of reference, -1 (e.g. 00 = 1 byte, 11 = 4 bytes)
=$04					NSBIsArray = $04
=$00					NSTInteger = $00 							; base types for bits 3..4
=$08					NSTFloat = $08
=$10					NSTString = $10
=$18					NSTProcedure = $18
.0600					NSStatus:
>0600							.fill 	MathStackSize
.0608					NSMantissa0:
>0608							.fill 	MathStackSize 				; (this is my integer mantissa system)
.0610					NSMantissa1:
>0610							.fill 	MathStackSize
.0618					NSMantissa2:
>0618							.fill 	MathStackSize
.0620					NSMantissa3:
>0620							.fill 	MathStackSize
.0628					NSExponent:
>0628							.fill 	MathStackSize
.0700					identStart:
>0700							.fill 	1
.0701					identTypeStart:
>0701							.fill 	1
.0702					identTypeEnd:
>0702							.fill 	1
.0703					identHash:
>0703							.fill 	1
.0704					identTypeByte:
>0704							.fill 	1	 						; (see tokenising.pdf)
.0705					encodeState:
>0705							.fill 	1
.0706					digitTemp:
>0706							.fill 	1
.0707					decimalCount:
>0707							.fill 	1
.0708					randomSeed:
>0708							.fill 	4
.070c					lowMemPtr:
>070c							.fill 	2
.070e					stringMemory:
>070e							.fill 	2
.0710					stringInitialised:
>0710							.fill 	1
.0711					stringTempPointer:
>0711							.fill 	2
.0713					breakCheck:
>0713							.fill 	1
.0714					decimalPlaces:
>0714							.fill 	1
.0715					dbOffset:
>0715							.fill 	1
.0716					dataPointer:
>0716							.fill 	5
.071b					inDataStatement:
>071b							.fill 	1
.071c					tbOffset:
>071c							.fill 	1
.071d					AssemblerAddress:
>071d							.fill 	2
.071f					AssemblerControl:
>071f							.fill 	1
.0720					ParamStart:
>0720							.fill 	2
.0722					IsGroup1:
>0722							.fill 	1
.0723					BaseOpcode:
>0723							.fill 	1
.0724					ModeMask:
>0724							.fill 	1
.0725					tokenOffset:
>0725							.fill 	1
.0726					tokenLineNumber:
>0726							.fill 	2
.0728					tokenBuffer:
>0728							.fill 	253
.0825					lineBuffer:
>0825							.fill 	MaxLineSize+1
.0876					numberBuffer:
>0876							.fill 	34
.0898					decimalBuffer:
>0898							.fill 	16

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/constants.inc

=$80					AM_ISZP = $80
=$40					AM_ISG1 = $40
=$20					AM_ISG2 = $20
=224					AM_IMMEDIATE = AM_ISZP+AM_ISG1+AM_ISG2+$00
=228					AM_ZEROPAGE = AM_ISZP+AM_ISG1+AM_ISG2+$04
=40					AM_ACC = AM_ISG2+$08
=108					AM_ABS = AM_ISG1+AM_ISG2+$0C
=208					AM_INDY = AM_ISZP+AM_ISG1+$10
=244					AM_ZEROX = AM_ISZP+AM_ISG1+AM_ISG2+$14
=120					AM_ABSY = AM_ISG1+AM_ISG2+$18
=124					AM_ABSX = AM_ISG1+AM_ISG2+$1C
=209					AM_IND = AM_ISZP+AM_ISG1+$11
=$80					AM_ZEROY = AM_ISZP
=$01					AM_INDABS = $01
=$02					AM_INDABSX = $02
=192					AM_INDX = AM_ISZP+AM_ISG1+$00

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/handlers.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.inc

=1					ERRID_BREAK = 1
=2					ERRID_SYNTAX = 2
=3					ERRID_DIVZERO = 3
=4					ERRID_RANGE = 4
=5					ERRID_TYPE = 5
=6					ERRID_MEMORY = 6
=7					ERRID_ARGUMENT = 7
=8					ERRID_STOP = 8
=9					ERRID_STRING = 9
=10					ERRID_ASSERT = 10
=11					ERRID_DATA = 11
=12					ERRID_NOTDONE = 12
=13					ERRID_LINE = 13
=14					ERRID_GOSUB = 14
=15					ERRID_REPEAT = 15
=16					ERRID_WHILE = 16
=17					ERRID_FOR = 17
=18					ERRID_STACK = 18
=19					ERRID_STRUCT = 19
=20					ERRID_PROC = 20
=21					ERRID_REDEFINE = 21
=22					ERRID_ARRAYSIZE = 22
=23					ERRID_ARRAYIDX = 23

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst.inc

=$00					KWD_LESSLESS                         = $00; $00 <<
=$01					KWD_LESSEQUAL                        = $01; $01 <=
=$02					KWD_LESSGREATER                      = $02; $02 <>
=$03					KWD_PLINGPLING3                      = $03; $03 !!3
=$04					KWD_GREATERLESS                      = $04; $04 ><
=$05					KWD_GREATEREQUAL                     = $05; $05 >=
=$06					KWD_GREATERGREATER                   = $06; $06 >>
=$07					KWD_PLINGPLING7                      = $07; $07 !!7
=$08					KWD_PLINGPLING8                      = $08; $08 !!8
=$09					KWD_PLINGPLING9                      = $09; $09 !!9
=$0a					KWD_PLINGPLING10                     = $0a; $0a !!10
=$0b					KWD_PLINGPLING11                     = $0b; $0b !!11
=$0c					KWD_PLINGPLING12                     = $0c; $0c !!12
=$0d					KWD_PLINGPLING13                     = $0d; $0d !!13
=$0e					KWD_PLINGPLING14                     = $0e; $0e !!14
=$0f					KWD_PLINGPLING15                     = $0f; $0f !!15
=$10					KWD_AT                               = $10; $10 @
=$11					KWD_PLINGPLING17                     = $11; $11 !!17
=$12					KWD_PLINGPLING18                     = $12; $12 !!18
=$13					KWD_LSQPAREN                         = $13; $13 [
=$14					KWD_BACKSLASH                        = $14; $14 \
=$15					KWD_RSQPAREN                         = $15; $15 ]
=$16					KWD_HAT                              = $16; $16 ^
=$17					KWD_UNDERSCORE                       = $17; $17 _
=$18					KWD_BQUOTE                           = $18; $18 `
=$19					KWD_PLINGPLING25                     = $19; $19 !!25
=$1a					KWD_PLINGPLING26                     = $1a; $1a !!26
=$1b					KWD_LCURLY                           = $1b; $1b {
=$1c					KWD_BAR                              = $1c; $1c |
=$1d					KWD_RCURLY                           = $1d; $1d }
=$1e					KWD_TILDE                            = $1e; $1e ~
=$21					KWD_PLING                            = $21; $21 !
=$22					KWD_DQUOTE                           = $22; $22 "
=$23					KWD_HASH                             = $23; $23 #
=$24					KWD_DOLLAR                           = $24; $24 $
=$25					KWD_PERCENT                          = $25; $25 %
=$26					KWD_AMPERSAND                        = $26; $26 &
=$27					KWD_QUOTE                            = $27; $27 '
=$28					KWD_LPAREN                           = $28; $28 (
=$29					KWD_RPAREN                           = $29; $29 )
=$2a					KWD_STAR                             = $2a; $2a *
=$2b					KWD_PLUS                             = $2b; $2b +
=$2c					KWD_COMMA                            = $2c; $2c ,
=$2d					KWD_MINUS                            = $2d; $2d -
=$2e					KWD_PERIOD                           = $2e; $2e .
=$2f					KWD_SLASH                            = $2f; $2f /
=$30					KWD_0                                = $30; $30 0
=$31					KWD_1                                = $31; $31 1
=$32					KWD_2                                = $32; $32 2
=$33					KWD_3                                = $33; $33 3
=$34					KWD_4                                = $34; $34 4
=$35					KWD_5                                = $35; $35 5
=$36					KWD_6                                = $36; $36 6
=$37					KWD_7                                = $37; $37 7
=$38					KWD_8                                = $38; $38 8
=$39					KWD_9                                = $39; $39 9
=$3a					KWD_COLON                            = $3a; $3a :
=$3b					KWD_SEMICOLON                        = $3b; $3b ;
=$3c					KWD_LESS                             = $3c; $3c <
=$3d					KWD_EQUAL                            = $3d; $3d =
=$3e					KWD_GREATER                          = $3e; $3e >
=$3f					KWD_QMARK                            = $3f; $3f ?
=$83					KWD_ABSLPAREN                        = $83; $83 ABS(
=$84					KWD_ALLOCLPAREN                      = $84; $84 ALLOC(
=$85					KWD_ASCLPAREN                        = $85; $85 ASC(
=$86					KWD_CHRDOLLARLPAREN                  = $86; $86 CHR$(
=$87					KWD_FALSE                            = $87; $87 FALSE
=$88					KWD_FRACLPAREN                       = $88; $88 FRAC(
=$89					KWD_INTLPAREN                        = $89; $89 INT(
=$8a					KWD_ISVALLPAREN                      = $8a; $8a ISVAL(
=$8b					KWD_LEFTDOLLARLPAREN                 = $8b; $8b LEFT$(
=$8c					KWD_LENLPAREN                        = $8c; $8c LEN(
=$8d					KWD_MIDDOLLARLPAREN                  = $8d; $8d MID$(
=$8e					KWD_NOTLPAREN                        = $8e; $8e NOT(
=$8f					KWD_RIGHTDOLLARLPAREN                = $8f; $8f RIGHT$(
=$90					KWD_RNDLPAREN                        = $90; $90 RND(
=$91					KWD_SGNLPAREN                        = $91; $91 SGN(
=$92					KWD_SPCLPAREN                        = $92; $92 SPC(
=$93					KWD_STRDOLLARLPAREN                  = $93; $93 STR$(
=$94					KWD_TRUE                             = $94; $94 TRUE
=$95					KWD_VALLPAREN                        = $95; $95 VAL(
=$96					KWD_FOR                              = $96; $96 FOR
=$97					KWD_IF                               = $97; $97 IF
=$98					KWD_PROC                             = $98; $98 PROC
=$99					KWD_REPEAT                           = $99; $99 REPEAT
=$9a					KWD_WHILE                            = $9a; $9a WHILE
=$9b					KWD_ENDIF                            = $9b; $9b ENDIF
=$9c					KWD_ENDPROC                          = $9c; $9c ENDPROC
=$9d					KWD_NEXT                             = $9d; $9d NEXT
=$9e					KWD_THEN                             = $9e; $9e THEN
=$9f					KWD_UNTIL                            = $9f; $9f UNTIL
=$a0					KWD_WEND                             = $a0; $a0 WEND
=$a1					KWD_CALL                             = $a1; $a1 CALL
=$a2					KWD_CLS                              = $a2; $a2 CLS
=$a3					KWD_DATA                             = $a3; $a3 DATA
=$a4					KWD_DIM                              = $a4; $a4 DIM
=$a5					KWD_DOWNTO                           = $a5; $a5 DOWNTO
=$a6					KWD_ELSE                             = $a6; $a6 ELSE
=$a7					KWD_GOSUB                            = $a7; $a7 GOSUB
=$a8					KWD_GOTO                             = $a8; $a8 GOTO
=$a9					KWD_LET                              = $a9; $a9 LET
=$aa					KWD_PRINT                            = $aa; $aa PRINT
=$ab					KWD_READ                             = $ab; $ab READ
=$ac					KWD_REM                              = $ac; $ac REM
=$ad					KWD_RETURN                           = $ad; $ad RETURN
=$ae					KWD_TO                               = $ae; $ae TO

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst0.inc

=$80					KWC_EOL = $80
=$ff					KWC_STRING = $FF
=$fe					KWC_HEXCONST = $FE
=$96					KWC_FIRST_STRUCTURE = $96
=$9b					KWC_FIRST_STRUCTURE_DEC = $9b
=$a0					KWC_LAST_STRUCTURE = $a0
=$83					KWC_FIRST_UNARY = $83
=$95					KWC_LAST_UNARY = $95

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/stack.inc

=$e0					STK_GOSUB = $E0
=$d0					STK_FOR = $D0
=$c0					STK_REPEAT = $C0
=$b0					STK_PROC = $B0
=$a0					STK_WHILE = $A0
=$90					STK_LOCAL = $90

;******  Return to file: _basic.asm


;******  Processing file: ./variants/memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/00start.asm

.8000	a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.8002	9a		txs				txs
.8003	a2 80		ldx #$80			ldx 	#(Prompt >> 8) 				; prompt
.8005	a9 13		lda #$13			lda 	#(Prompt & $FF)
.8007	20 a4 8c	jsr $8ca4			jsr 	PrintStringXA
.800a	20 3c 88	jsr $883c			jsr 	NewCommand 					; erase current program
.800d	20 3b 98	jsr $983b			jsr 	BackloadProgram
.8010	4c 67 84	jmp $8467			jmp 	WarmStart
>8013	0d 0d 2a 2a 2a 20 46 32		Prompt:	.text 	13,13,"*** F256 Junior SuperBASIC ***",13,13
>801b	35 36 20 4a 75 6e 69 6f 72 20 53 75 70 65 72 42
>802b	41 53 49 43 20 2a 2a 2a 0d 0d
>8035	57 72 69 74 74 65 6e 20				.text 	"Written by Paul Robson 2022.",13,13
>803d	62 79 20 50 61 75 6c 20 52 6f 62 73 6f 6e 20 32
>804d	30 32 32 2e 0d 0d

;******  Processing file: ./common/aa.system/../generated/timestamp.asm

>8053	42 75 69 6c 74 20 57 65			.text "Built Wednesday 05-Oct-2022. Build 115."
>805b	64 6e 65 73 64 61 79 20 30 35 2d 4f 63 74 2d 32
>806b	30 32 32 2e 20 42 75 69 6c 64 20 31 31 35 2e

;******  Return to file: ./common/aa.system/00start.asm

>807a	0d 0d 00					.byte 	13,13,0
>807d							.align 2

;******  Processing file: ./common/aa.system/../generated/vectors.dat

.807e					VectorSetPunc:
>807e	f5 8d					.word	ShiftLeft                        ; $00 <<
>8080	ef 8c					.word	BinaryCompareLessEqual           ; $01 <=
>8082	e5 8c					.word	BinaryCompareNotEqual            ; $02 <>
>8084	73 a4					.word	SyntaxError                      ; $03 !!3
>8086	73 a4					.word	SyntaxError                      ; $04 ><
>8088	f9 8c					.word	BinaryCompareGreaterEqual        ; $05 >=
>808a	f8 8d					.word	ShiftRight                       ; $06 >>
>808c	73 a4					.word	SyntaxError                      ; $07 !!7
>808e	73 a4					.word	SyntaxError                      ; $08 !!8
>8090	73 a4					.word	SyntaxError                      ; $09 !!9
>8092	73 a4					.word	SyntaxError                      ; $0a !!10
>8094	73 a4					.word	SyntaxError                      ; $0b !!11
>8096	73 a4					.word	SyntaxError                      ; $0c !!12
>8098	73 a4					.word	SyntaxError                      ; $0d !!13
>809a	73 a4					.word	SyntaxError                      ; $0e !!14
>809c	73 a4					.word	SyntaxError                      ; $0f !!15
>809e	73 a4					.word	SyntaxError                      ; $10 @
>80a0	73 a4					.word	SyntaxError                      ; $11 !!17
>80a2	73 a4					.word	SyntaxError                      ; $12 !!18
>80a4	73 a4					.word	SyntaxError                      ; $13 [
>80a6	aa 9e					.word	IntegerDivide                    ; $14 \
>80a8	73 a4					.word	SyntaxError                      ; $15 ]
>80aa	7e 8f					.word	EorInteger                       ; $16 ^
>80ac	73 a4					.word	SyntaxError                      ; $17 _
>80ae	73 a4					.word	SyntaxError                      ; $18 `
>80b0	73 a4					.word	SyntaxError                      ; $19 !!25
>80b2	73 a4					.word	SyntaxError                      ; $1a !!26
>80b4	73 a4					.word	SyntaxError                      ; $1b {
>80b6	38 8f					.word	OraInteger                       ; $1c |
>80b8	73 a4					.word	SyntaxError                      ; $1d }
>80ba	73 a4					.word	SyntaxError                      ; $1e ~
>80bc	73 a4					.word	SyntaxError                      ; $1f [7m<7F>[m
>80be	73 a4					.word	SyntaxError                      ; $20
>80c0	c4 8f					.word	WordIndirect                     ; $21 !
>80c2	73 a4					.word	SyntaxError                      ; $22 "
>80c4	73 a4					.word	SyntaxError                      ; $23 #
>80c6	73 a4					.word	SyntaxError                      ; $24 $
>80c8	f7 9e					.word	IntegerModulus                   ; $25 %
>80ca	f2 8e					.word	AndInteger                       ; $26 &
>80cc	73 a4					.word	SyntaxError                      ; $27 '
>80ce	73 a4					.word	SyntaxError                      ; $28 (
>80d0	73 a4					.word	SyntaxError                      ; $29 )
>80d2	6c 9f					.word	MulInteger                       ; $2a *
>80d4	8c 8e					.word	AddInteger                       ; $2b +
>80d6	73 a4					.word	SyntaxError                      ; $2c ,
>80d8	c7 8e					.word	SubInteger                       ; $2d -
>80da	73 a4					.word	SyntaxError                      ; $2e .
>80dc	03 a1					.word	FDivideCommand                   ; $2f /
>80de	73 a4					.word	SyntaxError                      ; $30 0
>80e0	73 a4					.word	SyntaxError                      ; $31 1
>80e2	73 a4					.word	SyntaxError                      ; $32 2
>80e4	73 a4					.word	SyntaxError                      ; $33 3
>80e6	73 a4					.word	SyntaxError                      ; $34 4
>80e8	73 a4					.word	SyntaxError                      ; $35 5
>80ea	73 a4					.word	SyntaxError                      ; $36 6
>80ec	73 a4					.word	SyntaxError                      ; $37 7
>80ee	73 a4					.word	SyntaxError                      ; $38 8
>80f0	73 a4					.word	SyntaxError                      ; $39 9
>80f2	73 a4					.word	SyntaxError                      ; $3a :
>80f4	73 a4					.word	SyntaxError                      ; $3b ;
>80f6	d1 8c					.word	BinaryCompareLess                ; $3c <
>80f8	c7 8c					.word	BinaryCompareEqual               ; $3d =
>80fa	db 8c					.word	BinaryCompareGreater             ; $3e >
>80fc	eb 8f					.word	ByteIndirect                     ; $3f ?
.80fe					VectorSet0:
>80fe	f4 89					.word	EOLCommand                       ; $80 !0:EOF
>8100	01 8a					.word	Shift1Command                    ; $81 !1:SH1
>8102	09 8a					.word	Shift2Command                    ; $82 !2:SH2
>8104	49 a2					.word	AbsUnary                         ; $83 ABS(
>8106	b5 94					.word	AllocUnary                       ; $84 ALLOC(
>8108	59 a2					.word	AscUnary                         ; $85 ASC(
>810a	70 95					.word	ChrUnary                         ; $86 CHR$(
>810c	c3 8c					.word	UnaryFalse                       ; $87 FALSE
>810e	66 a2					.word	FracUnary                        ; $88 FRAC(
>8110	7c a2					.word	IntUnary                         ; $89 INT(
>8112	d2 a2					.word	IsValUnary                       ; $8a ISVAL(
>8114	4a 96					.word	Unary_Left                       ; $8b LEFT$(
>8116	8e a2					.word	LenUnary                         ; $8c LEN(
>8118	74 96					.word	Unary_Mid                        ; $8d MID$(
>811a	0d 95					.word	Unary_Not                        ; $8e NOT(
>811c	5a 96					.word	Unary_Right                      ; $8f RIGHT$(
>811e	23 95					.word	Unary_Rnd                        ; $90 RND(
>8120	a8 a2					.word	SgnUnary                         ; $91 SGN(
>8122	82 95					.word	SpcUnary                         ; $92 SPC(
>8124	9d 95					.word	Unary_Str                        ; $93 STR$(
>8126	b7 8c					.word	UnaryTrue                        ; $94 TRUE
>8128	c8 a2					.word	ValUnary                         ; $95 VAL(
>812a	f1 85					.word	ForCommand                       ; $96 FOR
>812c	3e 87					.word	IfCommand                        ; $97 IF
>812e	11 8a					.word	Unused1                          ; $98 PROC
>8130	34 89					.word	Command_REPEAT                   ; $99 REPEAT
>8132	1c 8c					.word	Command_WHILE                    ; $9a WHILE
>8134	67 87					.word	EndIf                            ; $9b ENDIF
>8136	83 9e					.word	Command_ENDPROC                  ; $9c ENDPROC
>8138	ab 86					.word	NextCommand                      ; $9d NEXT
>813a	11 8a					.word	Unused4                          ; $9e THEN
>813c	3d 89					.word	Command_UNTIL                    ; $9f UNTIL
>813e	3d 8c					.word	Command_WEND                     ; $a0 WEND
>8140	c6 84					.word	CallCommand                      ; $a1 CALL
>8142	73 a4					.word	SyntaxError                      ; $a2 CLS
>8144	29 85					.word	Command_Data                     ; $a3 DATA
>8146	31 85					.word	DimCommand                       ; $a4 DIM
>8148	11 8a					.word	Unused3                          ; $a5 DOWNTO
>814a	60 87					.word	ElseCode                         ; $a6 ELSE
>814c	04 87					.word	Command_GOSUB                    ; $a7 GOSUB
>814e	22 87					.word	GotoCommand                      ; $a8 GOTO
>8150	68 87					.word	LetCommand                       ; $a9 LET
>8152	46 88					.word	Command_Print                    ; $aa PRINT
>8154	ce 88					.word	Command_Read                     ; $ab READ
>8156	27 89					.word	RemCommand                       ; $ac REM
>8158	14 87					.word	Command_RETURN                   ; $ad RETURN
>815a	11 8a					.word	Unused2                          ; $ae TO
.815c					VectorSet1:
>815c	73 a4					.word	SyntaxError                      ; $80 !0:EOF
>815e	73 a4					.word	SyntaxError                      ; $81 !1:SH1
>8160	73 a4					.word	SyntaxError                      ; $82 !2:SH2
>8162	97 84					.word	AssembleCommand                  ; $83 ASSEMBLE
>8164	b6 84					.word	AssertCommand                    ; $84 ASSERT
>8166	d4 84					.word	ClearCommand                     ; $85 CLEAR
>8168	ee 85					.word	EndCommand                       ; $86 END
>816a	a1 87					.word	Command_List                     ; $87 LIST
>816c	3c 88					.word	NewCommand                       ; $88 NEW
>816e	56 89					.word	Command_Restore                  ; $89 RESTORE
>8170	88 89					.word	CommandRUN                       ; $8a RUN
>8172	14 8a					.word	StopCommand                      ; $8b STOP
.8174					VectorSet2:
>8174	73 a4					.word	SyntaxError                      ; $80 !0:EOF
>8176	73 a4					.word	SyntaxError                      ; $81 !1:SH1
>8178	73 a4					.word	SyntaxError                      ; $82 !2:SH2
>817a	36 a3					.word	Assemble_adc                     ; $83 ADC
>817c	2e a3					.word	Assemble_and                     ; $84 AND
>817e	4a a3					.word	Assemble_asl                     ; $85 ASL
>8180	b4 a3					.word	Assemble_bcc                     ; $86 BCC
>8182	b8 a3					.word	Assemble_bcs                     ; $87 BCS
>8184	c0 a3					.word	Assemble_beq                     ; $88 BEQ
>8186	77 a3					.word	Assemble_bit                     ; $89 BIT
>8188	a8 a3					.word	Assemble_bmi                     ; $8a BMI
>818a	bc a3					.word	Assemble_bne                     ; $8b BNE
>818c	a4 a3					.word	Assemble_bpl                     ; $8c BPL
>818e	c4 a3					.word	Assemble_bra                     ; $8d BRA
>8190	c8 a3					.word	Assemble_brk                     ; $8e BRK
>8192	ac a3					.word	Assemble_bvc                     ; $8f BVC
>8194	b0 a3					.word	Assemble_bvs                     ; $90 BVS
>8196	d0 a3					.word	Assemble_clc                     ; $91 CLC
>8198	24 a4					.word	Assemble_cld                     ; $92 CLD
>819a	e4 a3					.word	Assemble_cli                     ; $93 CLI
>819c	14 a4					.word	Assemble_clv                     ; $94 CLV
>819e	42 a3					.word	Assemble_cmp                     ; $95 CMP
>81a0	8b a3					.word	Assemble_cpx                     ; $96 CPX
>81a2	86 a3					.word	Assemble_cpy                     ; $97 CPY
>81a4	68 a3					.word	Assemble_dec                     ; $98 DEC
>81a6	20 a4					.word	Assemble_dex                     ; $99 DEX
>81a8	fc a3					.word	Assemble_dey                     ; $9a DEY
>81aa	32 a3					.word	Assemble_eor                     ; $9b EOR
>81ac	6d a3					.word	Assemble_inc                     ; $9c INC
>81ae	2c a4					.word	Assemble_inx                     ; $9d INX
>81b0	1c a4					.word	Assemble_iny                     ; $9e INY
>81b2	9f a3					.word	Assemble_jmp                     ; $9f JMP
>81b4	9a a3					.word	Assemble_jsr                     ; $a0 JSR
>81b6	3e a3					.word	Assemble_lda                     ; $a1 LDA
>81b8	63 a3					.word	Assemble_ldx                     ; $a2 LDX
>81ba	81 a3					.word	Assemble_ldy                     ; $a3 LDY
>81bc	54 a3					.word	Assemble_lsr                     ; $a4 LSR
>81be	30 a4					.word	Assemble_nop                     ; $a5 NOP
>81c0	2a a3					.word	Assemble_ora                     ; $a6 ORA
>81c2	e0 a3					.word	Assemble_pha                     ; $a7 PHA
>81c4	cc a3					.word	Assemble_php                     ; $a8 PHP
>81c6	28 a4					.word	Assemble_phx                     ; $a9 PHX
>81c8	e8 a3					.word	Assemble_phy                     ; $aa PHY
>81ca	f0 a3					.word	Assemble_pla                     ; $ab PLA
>81cc	d4 a3					.word	Assemble_plp                     ; $ac PLP
>81ce	38 a4					.word	Assemble_plx                     ; $ad PLX
>81d0	f8 a3					.word	Assemble_ply                     ; $ae PLY
>81d2	4f a3					.word	Assemble_rol                     ; $af ROL
>81d4	59 a3					.word	Assemble_ror                     ; $b0 ROR
>81d6	dc a3					.word	Assemble_rti                     ; $b1 RTI
>81d8	ec a3					.word	Assemble_rts                     ; $b2 RTS
>81da	46 a3					.word	Assemble_sbc                     ; $b3 SBC
>81dc	d8 a3					.word	Assemble_sec                     ; $b4 SEC
>81de	34 a4					.word	Assemble_sed                     ; $b5 SED
>81e0	f4 a3					.word	Assemble_sei                     ; $b6 SEI
>81e2	3a a3					.word	Assemble_sta                     ; $b7 STA
>81e4	5e a3					.word	Assemble_stx                     ; $b8 STX
>81e6	7c a3					.word	Assemble_sty                     ; $b9 STY
>81e8	72 a3					.word	Assemble_stz                     ; $ba STZ
>81ea	10 a4					.word	Assemble_tax                     ; $bb TAX
>81ec	0c a4					.word	Assemble_tay                     ; $bc TAY
>81ee	95 a3					.word	Assemble_trb                     ; $bd TRB
>81f0	90 a3					.word	Assemble_tsb                     ; $be TSB
>81f2	18 a4					.word	Assemble_tsx                     ; $bf TSX
>81f4	00 a4					.word	Assemble_txa                     ; $c0 TXA
>81f6	08 a4					.word	Assemble_txs                     ; $c1 TXS
>81f8	04 a4					.word	Assemble_tya                     ; $c2 TYA

;******  Return to file: ./common/aa.system/00start.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/assembler.asm

.81fa					AssembleGroup1:
.81fa	a9 ff		lda #$ff			lda 	#$FF
.81fc	8d 24 07	sta $0724			sta 	ModeMask 					; initialise the mode mask - all for all
.81ff	80 02		bra $8203			bra 	AsmGroup12
.8201					AssembleGroup2:
.8201	a5 00		lda $00				lda 	$00
.8203					AsmGroup12:
.8203	8d 22 07	sta $0722			sta 	IsGroup1 					; save the 'group 1' flag
.8206	68		pla				pla 								; pop the return address to access the information following.
.8207	fa		plx				plx
.8208	20 91 82	jsr $8291			jsr 	AccessParameters 			; get opcode and save as base
.820b	8d 23 07	sta $0723			sta 	BaseOpcode
.820e	ad 22 07	lda $0722			lda 	IsGroup1 					; skip if group 1 as we don't have a complex mask.
.8211	d0 08		bne $821b			bne 	_AG12HaveMask
.8213	a9 02		lda #$02			lda 	#2 							; if group 2 the second parameter is the mask
.8215	20 99 82	jsr $8299			jsr 	GetParameter		 		; e.g. which modes are supported for this operand
.8218	8d 24 07	sta $0724			sta 	ModeMask
.821b					_AG12HaveMask:
.821b	20 d4 83	jsr $83d4			jsr 	TypeAndCalculateOperand 	; get zero page type
.821e	da		phx				phx 								; save found address mode
.821f	20 fd 82	jsr $82fd			jsr 	AssembleModeX
.8222	fa		plx				plx  								; restore address mode
.8223	b0 0b		bcs $8230			bcs 	_AG12Exit
.8225	20 31 82	jsr $8231			jsr 	PromoteToAbsolute  			; promote ZP to ABS and try that
.8228	20 fd 82	jsr $82fd			jsr 	AssembleModeX
.822b	b0 03		bcs $8230			bcs 	_AG12Exit
.822d	4c 73 a4	jmp $a473			jmp 	SyntaxError 				; can't do either, so must be wrong mode/operand.
.8230					_AG12Exit:
.8230	60		rts				rts
.8231					PromoteToAbsolute:
.8231	a9 6c		lda #$6c			lda 	#AM_ABS 					; lda xx
.8233	e0 e4		cpx #$e4			cpx 	#AM_ZEROPAGE
.8235	f0 19		beq $8250			beq 	_PTADo
.8237	a9 7c		lda #$7c			lda 	#AM_ABSX 					; lda xx,X
.8239	e0 f4		cpx #$f4			cpx 	#AM_ZEROX
.823b	f0 13		beq $8250			beq 	_PTADo
.823d	a9 78		lda #$78			lda 	#AM_ABSY 					; lda xx,Y
.823f	e0 80		cpx #$80			cpx 	#AM_ZEROY
.8241	f0 0d		beq $8250			beq 	_PTADo
.8243	a9 01		lda #$01			lda 	#AM_INDABS 					; lda (xx) (jump)
.8245	e0 d1		cpx #$d1			cpx 	#AM_IND
.8247	f0 07		beq $8250			beq 	_PTADo
.8249	a9 02		lda #$02			lda 	#AM_INDABSX 				; lda (xx,x) (jump)
.824b	e0 c0		cpx #$c0			cpx 	#AM_INDX
.824d	f0 01		beq $8250			beq 	_PTADo
.824f	60		rts				rts
.8250					_PTADo:
.8250	aa		tax				tax
.8251	60		rts				rts
.8252					AssembleGroup3:
.8252	68		pla				pla 								; get parameters, which is just the opcode.
.8253	fa		plx				plx
.8254	20 91 82	jsr $8291			jsr 	AccessParameters 			; get and output opcode
.8257	20 a9 82	jsr $82a9			jsr 	AssemblerWriteByte
.825a	20 38 84	jsr $8438			jsr 	CalculateOperand 			; get a 16 bit operand
.825d	ad 08 06	lda $0608			lda 	NSMantissa0 				; calculate the offset
.8260	38		sec				sec
.8261	ed 1d 07	sbc $071d			sbc 	AssemblerAddress
.8264	48		pha				pha 								; LSB in A
.8265	ad 10 06	lda $0610			lda 	NSMantissa1
.8268	ed 1e 07	sbc $071e			sbc 	AssemblerAddress+1
.826b	aa		tax				tax 								; MSB in X
.826c	68		pla				pla
.826d	18		clc				clc 								; $80 to easy check $80-$7F, plus 1 for offset error
.826e	69 7f		adc #$7f			adc 	#$7F
.8270	90 01		bcc $8273			bcc 	_AG3NoCarry
.8272	e8		inx				inx
.8273					_AG3NoCarry:
.8273	38		sec				sec 								; fix back and write out anyways.
.8274	e9 80		sbc #$80			sbc 	#$80
.8276	20 a9 82	jsr $82a9			jsr 	AssemblerWriteByte
.8279	e0 00		cpx #$00			cpx 	#0 							; was it in range
.827b	f0 0a		beq $8287			beq 	_AG3Exit
.827d	ad 1f 07	lda $071f			lda 	AssemblerControl 			; are we allowing bad values ?
.8280	29 01		and #$01			and 	#1
.8282	f0 03		beq $8287			beq 	_AG3Exit
.8284	4c 78 a4	jmp $a478			jmp 	RangeError 					; no, branch is out of range
.8287					_AG3Exit:
.8287	60		rts				rts
.8288					AssembleGroup4:
.8288	68		pla				pla 								; pop address
.8289	fa		plx				plx
.828a	20 91 82	jsr $8291			jsr 	AccessParameters 			; access and get first
.828d	20 a9 82	jsr $82a9			jsr 	AssemblerWriteByte 			; output it.
.8290	60		rts				rts
.8291					AccessParameters:
.8291	8d 20 07	sta $0720			sta 	ParamStart
.8294	8e 21 07	stx $0721			stx 	ParamStart+1
.8297	a9 01		lda #$01			lda 	#1
.8299					GetParameter:
.8299	5a		phy				phy
.829a	a8		tay				tay
.829b	ad 20 07	lda $0720			lda 	ParamStart
.829e	85 36		sta $36				sta 	zTemp0
.82a0	ad 21 07	lda $0721			lda 	ParamStart+1
.82a3	85 37		sta $37				sta 	zTemp0+1
.82a5	b1 36		lda ($36),y			lda 	(zTemp0),y
.82a7	7a		ply				ply
.82a8	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/aswrite.asm

.82a9					AssemblerWriteByte:
.82a9	48		pha			pha
.82aa	ad 1f 07	lda $071f		lda 	AssemblerControl 				; check printing bytes ?
.82ad	29 02		and #$02		and 	#2
.82af	f0 1b		beq $82cc		beq 	_AWBNoPrint
.82b1	ad 1e 07	lda $071e		lda		AssemblerAddress+1 				; print address
.82b4	20 e7 82	jsr $82e7		jsr 	PrintHex
.82b7	ad 1d 07	lda $071d		lda		AssemblerAddress
.82ba	20 e7 82	jsr $82e7		jsr 	PrintHex
.82bd	a9 20		lda #$20		lda 	#' '
.82bf	20 e1 a6	jsr $a6e1		jsr 	EXTPrintCharacter
.82c2	68		pla			pla 									; print byte
.82c3	48		pha			pha
.82c4	20 e7 82	jsr $82e7		jsr 	PrintHex
.82c7	a9 0d		lda #$0d		lda 	#13
.82c9	20 e1 a6	jsr $a6e1		jsr 	EXTPrintCharacter
.82cc					_AWBNoPrint:
.82cc	ad 1d 07	lda $071d		lda		AssemblerAddress				; copy address to zTemp0
.82cf	85 36		sta $36			sta 	zTemp0
.82d1	ad 1e 07	lda $071e		lda		AssemblerAddress+1
.82d4	f0 0e		beq $82e4		beq 	_AWBRange
.82d6	85 37		sta $37			sta 	zTemp0+1
.82d8	68		pla			pla 									; write byte out
.82d9	92 36		sta ($36)		sta 	(zTemp0)
.82db	ee 1d 07	inc $071d		inc 	AssemblerAddress 				; bump address
.82de	d0 03		bne $82e3		bne 	_AWBNoCarry
.82e0	ee 1e 07	inc $071e		inc 	AssemblerAddress+1
.82e3					_AWBNoCarry:
.82e3	60		rts			rts
.82e4					_AWBRange:
.82e4	4c 78 a4	jmp $a478		jmp 	RangeError
.82e7					PrintHex:
.82e7	48		pha				pha
.82e8	4a		lsr a				lsr 	a
.82e9	4a		lsr a				lsr 	a
.82ea	4a		lsr a				lsr 	a
.82eb	4a		lsr a				lsr 	a
.82ec	20 f0 82	jsr $82f0			jsr 	_PrintNibble
.82ef	68		pla				pla
.82f0					_PrintNibble:
.82f0	29 0f		and #$0f			and 	#15
.82f2	c9 0a		cmp #$0a			cmp 	#10
.82f4	90 02		bcc $82f8			bcc 	_NoShift
.82f6	69 06		adc #$06			adc 	#6
.82f8					_NoShift:
.82f8	69 30		adc #$30			adc 	#48
.82fa	4c e1 a6	jmp $a6e1			jmp 	EXTPrintCharacter

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/instruction.asm

.82fd					AssembleModeX:
.82fd	5a		phy				phy
.82fe	ad 22 07	lda $0722			lda 	IsGroup1
.8301	f0 17		beq $831a			beq 	_AMXGroup2
.8303	8a		txa				txa 							; is it in group # 1
.8304	29 40		and #$40			and 	#AM_ISG1
.8306	f0 50		beq $8358			beq 	_AMXFail 				; no, give up.
.8308	8a		txa				txa 							; get back.
.8309	29 1f		and #$1f			and 	#$1F 					; this is now the offset.
.830b	e0 e0		cpx #$e0			cpx 	#AM_IMMEDIATE 			; if not immediate, we can continue.
.830d	d0 22		bne $8331			bne 	_AMXHaveInfo
.830f	ad 23 07	lda $0723			lda 	BaseOpcode 				; cannot store immediate.
.8312	c9 81		cmp #$81			cmp 	#$81
.8314	f0 42		beq $8358			beq 	_AMXFail
.8316	a9 08		lda #$08			lda 	#8 						; if immediate we use offset 8.
.8318	80 17		bra $8331			bra 	_AMXHaveInfo 			; odd design decision there.
.831a					_AMXGroup2:
.831a	8a		txa				txa 							; is it in group 2 ?
.831b	29 20		and #$20			and 	#AM_ISG2
.831d	f0 39		beq $8358			beq 	_AMXFail 				; no, give up.
.831f	8a		txa				txa 							; get the offset into Y
.8320	29 1f		and #$1f			and 	#$1F
.8322	4a		lsr a				lsr 	a 						; make it 0-7.
.8323	4a		lsr a				lsr  	a
.8324	a8		tay				tay
.8325	ad 24 07	lda $0724			lda 	ModeMask 				; shift the modemask left so you can check it against the requested offset
.8328					_AMXCheckOkay:
.8328	0a		asl a				asl 	a 						; shift modemask left enough times to check legitimate.
.8329	88		dey				dey
.832a	10 fc		bpl $8328			bpl 	_AMXCheckOkay
.832c	90 2a		bcc $8358			bcc 	_AMXFail 				; not allowed.
.832e	8a		txa				txa  							; get mask back
.832f	29 1f		and #$1f			and 	#$1F
.8331					_AMXHaveInfo:
.8331	e0 00		cpx #$00			cpx 	#$00 					; does it *require* an 8 bit operand
.8333	10 05		bpl $833a			bpl 	_AMXAnySize 			; checking bit 7, the zero page opcode flag.
.8335	ac 10 06	ldy $0610			ldy 	NSMantissa1 			; fail if it is outside range, e.g. the MSB is set.
.8338	d0 1e		bne $8358			bne 	_AMXFail
.833a					_AMXAnySize:
.833a	18		clc				clc 							; add offset to the base opcode
.833b	6d 23 07	adc $0723			adc 	BaseOpcode
.833e					_AMXOutputCode:
.833e	20 a9 82	jsr $82a9			jsr 	AssemblerWriteByte 		; write the opcode out.
.8341	e0 28		cpx #$28			cpx 	#AM_ACC 				; A mode (e.g. ASL A)
.8343	f0 10		beq $8355			beq 	_AMXExit
.8345	ad 08 06	lda $0608			lda 	NSMantissa0 				; write LSB operand
.8348	20 a9 82	jsr $82a9			jsr 	AssemblerWriteByte
.834b	e0 00		cpx #$00			cpx 	#$00 					; zeropage ?
.834d	30 06		bmi $8355			bmi 	_AMXExit
.834f	ad 10 06	lda $0610			lda 	NSMantissa1 			; write MSB operand
.8352	20 a9 82	jsr $82a9			jsr 	AssemblerWriteByte
.8355					_AMXExit:
.8355	7a		ply				ply
.8356	38		sec				sec
.8357	60		rts				rts
.8358					_AMXFail:
.8358	a0 00		ldy #$00			ldy 	#0
.835a					_AMXCheckOddities:
.835a	8a		txa				txa
.835b	d9 83 83	cmp $8383,y			cmp 	ExtraOpcode+2,y 		; match address mode
.835e	d0 16		bne $8376			bne 	_AMXCONext
.8360	b9 81 83	lda $8381,y			lda 	ExtraOpcode+0,y 		; do the base opcodes match
.8363	cd 23 07	cmp $0723			cmp 	BaseOpcode
.8366	d0 0e		bne $8376			bne 	_AMXCONext
.8368	e0 00		cpx #$00			cpx 	#$00 					; requires zero page ?
.836a	10 05		bpl $8371			bpl 	_AMXCONotZero
.836c	ad 10 06	lda $0610			lda 	NSMantissa1
.836f	d0 05		bne $8376			bne 	_AMXCONext
.8371					_AMXCONotZero:
.8371	b9 82 83	lda $8382,y			lda 	ExtraOpcode+1,y 		; get new opcode
.8374	80 c8		bra $833e			bra 	_AMXOutputCode 			; and assemble it
.8376					_AMXCONext:
.8376	c8		iny				iny
.8377	c8		iny				iny
.8378	c8		iny				iny
.8379	b9 81 83	lda $8381,y			lda 	ExtraOpcode+0,y 		; end of table
.837c	d0 dc		bne $835a			bne 	_AMXCheckOddities
.837e					_AMXCOFail:
.837e	7a		ply				ply
.837f	18		clc				clc
.8380	60		rts				rts
.8381					ExtraOpcode:
>8381	40 6c 01					.byte $40,$6c,AM_INDABS 	; jmp
>8384	40 7c 02					.byte $40,$7C,AM_INDABSX 	; jmp
>8387	a2 be 78					.byte $a2,$BE,AM_ABSY 		; ldx
>838a	a2 b6 80					.byte $a2,$B6,AM_ZEROY 		; ldx
>838d	82 96 80					.byte $82,$96,AM_ZEROY 		; stx
>8390	e2 1a 28					.byte $e2,$1a,AM_ACC 		; inc
>8393	c2 3a 28					.byte $c2,$3a,AM_ACC 		; dec
>8396	20 89 e0					.byte $20,$89,AM_IMMEDIATE 	; bit
>8399	60 9c 6c					.byte $60,$9c,AM_ABS 		; stz
>839c	60 9e 7c					.byte $60,$9e,AM_ABSX 		; stz
>839f	00						.byte $00

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/label.asm

.83a0					LabelHere:
.83a0	c8		iny				iny 								; skip .
.83a1	a2 00		ldx #$00			ldx 	#0 							; get a term
.83a3	20 25 93	jsr $9325			jsr 	EvaluateTerm 				; get a term
.83a6	ad 00 06	lda $0600			lda 	NSStatus 					; needs to be an integer reference.
.83a9	c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.83ab	d0 24		bne $83d1			bne 	_ALType
.83ad	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy reference address to zTemp0
.83b0	85 36		sta $36				sta 	zTemp0
.83b2	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.83b5	85 37		sta $37				sta 	zTemp0+1
.83b7	5a		phy				phy 								; copy address in.
.83b8	a0 01		ldy #$01			ldy 	#1
.83ba	ad 1d 07	lda $071d			lda	 	AssemblerAddress
.83bd	92 36		sta ($36)			sta 	(zTemp0)
.83bf	ad 1e 07	lda $071e			lda	 	AssemblerAddress+1
.83c2	91 36		sta ($36),y			sta 	(zTemp0),y
.83c4	c8		iny				iny
.83c5	a9 00		lda #$00			lda 	#0
.83c7	91 36		sta ($36),y			sta 	(zTemp0),y
.83c9	c8		iny				iny
.83ca	91 36		sta ($36),y			sta 	(zTemp0),y
.83cc	c8		iny				iny
.83cd	91 36		sta ($36),y			sta 	(zTemp0),y
.83cf	7a		ply				ply
.83d0	60		rts				rts
.83d1					_ALType:
.83d1	4c 7d a4	jmp $a47d			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/operands.asm

.83d4					TypeAndCalculateOperand:
.83d4	b1 30		lda ($30),y			lda 	(codePtr),y
.83d6	a2 28		ldx #$28			ldx 	#AM_ACC 					; ACC if : or EOL
.83d8	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.83da	f0 5b		beq $8437			beq 	_TACOExit
.83dc	c9 80		cmp #$80			cmp 	#KWC_EOL
.83de	f0 57		beq $8437			beq 	_TACOExit
.83e0	c8		iny				iny
.83e1	a2 e0		ldx #$e0			ldx 	#AM_IMMEDIATE
.83e3	c9 23		cmp #$23			cmp 	#KWD_HASH 					; if hash, then immediate - constant.
.83e5	f0 51		beq $8438			beq 	CalculateOperand
.83e7	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; if ( then check for indirection
.83e9	f0 1f		beq $840a			beq 	_TACOIndirect
.83eb	88		dey				dey 								; undo get of first character
.83ec	20 38 84	jsr $8438			jsr 	CalculateOperand 			; get operand
.83ef	b1 30		lda ($30),y			lda 	(codePtr),y
.83f1	a2 e4		ldx #$e4			ldx 	#AM_ZEROPAGE 				; if not, try zero page (then absolute)
.83f3	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.83f5	d0 40		bne $8437			bne 	_TACOExit
.83f7	c8		iny				iny
.83f8	20 53 9e	jsr $9e53			jsr 	TACOCheckXY 				; extract X,Y or 0 (neither) from the variable.
.83fb	a2 f4		ldx #$f4			ldx 	#AM_ZEROX 					; check for X
.83fd	c9 58		cmp #$58			cmp 	#'X'
.83ff	f0 36		beq $8437			beq 	_TACOExit
.8401	a2 80		ldx #$80			ldx 	#AM_ZEROY 					; check for Y
.8403	c9 59		cmp #$59			cmp 	#'Y'
.8405	f0 30		beq $8437			beq 	_TACOExit
.8407					_TACOSyntax:
.8407	4c 73 a4	jmp $a473			jmp 	SyntaxError
.840a					_TACOIndirect:
.840a	20 38 84	jsr $8438			jsr 	CalculateOperand 			; get the operand
.840d	b1 30		lda ($30),y			lda 	(codePtr),y
.840f	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if , then it must be ,X)
.8411	f0 17		beq $842a			beq 	_TACOIndX
.8413	20 91 9e	jsr $9e91			jsr 	CheckRightBracket  			; otherwise must be ) or ),Y
.8416	b1 30		lda ($30),y			lda 	(codePtr),y
.8418	a2 d1		ldx #$d1			ldx 	#AM_IND
.841a	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not comma then exit with (xx)
.841c	d0 19		bne $8437			bne 	_TACOExit
.841e	c8		iny				iny
.841f	20 53 9e	jsr $9e53			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.8422	c9 59		cmp #$59			cmp 	#'Y' 						; check Y
.8424	d0 e1		bne $8407			bne 	_TACOSyntax
.8426	a2 d0		ldx #$d0			ldx 	#AM_INDY
.8428	80 0d		bra $8437			bra 	_TACOExit
.842a					_TACOIndX:
.842a	c8		iny				iny
.842b	20 53 9e	jsr $9e53			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.842e	c9 58		cmp #$58			cmp 	#'X' 						; check X
.8430	d0 d5		bne $8407			bne 	_TACOSyntax
.8432	20 91 9e	jsr $9e91			jsr 	CheckRightBracket			; check )
.8435	a2 c0		ldx #$c0			ldx 	#AM_INDX
.8437					_TACOExit:
.8437	60		rts				rts
.8438					CalculateOperand:
.8438	48		pha				pha
.8439	da		phx				phx
.843a	a2 00		ldx #$00			ldx 	#0 							; get 16 bit integer in Slot 0
.843c	20 2a 97	jsr $972a			jsr 	Evaluate16BitInteger
.843f	fa		plx				plx
.8440	68		pla				pla
.8441	60		rts				rts
.9e53					TACOCheckXY:
.9e53	b1 30		lda ($30),y			lda 	(codePtr),y
.9e55	29 c0		and #$c0			and 	#$C0 						; check it is an identifier reference.
.9e57	c9 40		cmp #$40			cmp 	#$40
.9e59	d0 21		bne $9e7c			bne 	_TCXYFail
.9e5b	b1 30		lda ($30),y			lda 	(codePtr),y
.9e5d	18		clc				clc
.9e5e	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.9e60	85 37		sta $37				sta 	zTemp0+1
.9e62	c8		iny				iny
.9e63	b1 30		lda ($30),y			lda 	(codePtr),y
.9e65	c8		iny				iny
.9e66	85 36		sta $36				sta 	zTemp0
.9e68	5a		phy				phy 								; save position
.9e69	a0 02		ldy #$02			ldy 	#2 							; type is integer ?
.9e6b	b1 36		lda ($36),y			lda 	(zTemp0),y
.9e6d	d0 0c		bne $9e7b			bne 	_TCXYPopFail
.9e6f	a0 08		ldy #$08			ldy 	#8 							; get first character, should have bit 7 set as also last.
.9e71	b1 36		lda ($36),y			lda 	(zTemp0),y
.9e73	c9 d8		cmp #$d8			cmp 	#'X'+$80 					; should be X or Y
.9e75	f0 08		beq $9e7f			beq 	_TCXYFound
.9e77	c9 d9		cmp #$d9			cmp 	#'Y'+$80
.9e79	f0 04		beq $9e7f			beq 	_TCXYFound
.9e7b					_TCXYPopFail:
.9e7b	7a		ply				ply
.9e7c					_TCXYFail:
.9e7c	a9 00		lda #$00			lda 	#0
.9e7e	60		rts				rts
.9e7f					_TCXYFound:
.9e7f	7a		ply				ply 								; restore position
.9e80	29 7f		and #$7f			and 	#$7F 						; throw bit 7
.9e82	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/editor.asm

.8442					EditProgramCode:
.8442	ad 26 07	lda $0726			lda 	TokenLineNumber 			; find the line.
.8445	ae 27 07	ldx $0727			ldx 	TokenLineNumber+1
.8448	20 20 9e	jsr $9e20			jsr 	MemorySearch
.844b	90 05		bcc $8452			bcc 	_EPCNoDelete 				; reached the end don't delete
.844d	d0 03		bne $8452			bne 	_EPCNoDelete 				; found slot but didn't match, no delete
.844f	20 2b a7	jsr $a72b			jsr 	MemoryDeleteLine 			; delete the line
.8452					_EPCNoDelete:
.8452	ad 28 07	lda $0728			lda 	TokenBuffer 				; buffer empty
.8455	c9 80		cmp #$80			cmp 	#KWC_EOL
.8457	f0 0d		beq $8466			beq 	_EPCNoInsert
.8459	ad 26 07	lda $0726			lda 	TokenLineNumber 			; find the line - it cannot exist.
.845c	ae 27 07	ldx $0727			ldx 	TokenLineNumber+1 			; so this can't fail, it returns some point in the code.
.845f	20 20 9e	jsr $9e20			jsr 	MemorySearch
.8462	18		clc				clc 								; insert at this point.
.8463	20 62 a7	jsr $a762			jsr 	MemoryInsertLine 			; insert the line
.8466					_EPCNoInsert:
.8466	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/warmstart.asm

.8467					WarmStart:
.8467	a2 ff		ldx #$ff			ldx 	#$FF
.8469	9a		txs				txs
.846a	20 f7 a6	jsr $a6f7			jsr 	EXTInputLine 				; get line to lineBuffer
.846d	20 7f 9b	jsr $9b7f			jsr 	TokeniseLine 				; tokenise the line
.8470	ad 26 07	lda $0726			lda 	TokenLineNumber 			; line number ?
.8473	0d 27 07	ora $0727			ora 	TokenLineNumber+1
.8476	d0 17		bne $848f			bne 	_WSEditCode 				; if so,edit code.
.8478	9c 25 07	stz $0725			stz 	TokenOffset 				; zero offset, meaning it only runs one line.
.847b	a9 25		lda #$25			lda 	#((TokenOffset) & $FF)
.847d	85 30		sta $30				sta 	codePtr
.847f	a9 07		lda #$07			lda 	#((TokenOffset) >> 8)
.8481	85 31		sta $31				sta 	codePtr+1
.8483	ad 28 07	lda $0728			lda 	TokenBuffer 				; nothing to run
.8486	c9 80		cmp #$80			cmp 	#KWC_EOL
.8488	f0 dd		beq $8467			beq 	WarmStart
.848a	20 9a 89	jsr $899a			jsr 	RUNCodePointerLine 			; execute that line.
.848d	80 d8		bra $8467			bra 	WarmStart
.848f					_WSEditCode:
.848f	20 42 84	jsr $8442			jsr 	EditProgramCode
.8492	20 d4 84	jsr $84d4			jsr 	ClearCommand
.8495	80 d0		bra $8467			bra 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assemble.asm

.8497					AssembleCommand:
.8497	a2 00		ldx #$00			ldx 	#0
.8499	20 2a 97	jsr $972a			jsr 	Evaluate16BitInteger 		; start address
.849c	ad 08 06	lda $0608			lda 	NSMantissa0
.849f	8d 1d 07	sta $071d			sta 	AssemblerAddress
.84a2	ad 10 06	lda $0610			lda 	NSMantissa1
.84a5	8d 1e 07	sta $071e			sta 	AssemblerAddress+1
.84a8	20 99 9e	jsr $9e99			jsr 	CheckComma
.84ab	20 36 97	jsr $9736			jsr 	Evaluate8BitInteger 		; options
.84ae	ad 08 06	lda $0608			lda 	NSMantissa0
.84b1	8d 1f 07	sta $071f			sta 	AssemblerControl
.84b4	60		rts				rts
.84b5	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assert.asm

.84b6					AssertCommand:
.84b6	a2 00		ldx #$00			ldx 	#0
.84b8	20 15 97	jsr $9715			jsr 	EvaluateInteger 			; the assert test
.84bb	20 ce 97	jsr $97ce			jsr 	NSMIsZero 					; exit if result is non zero.
.84be	d0 05		bne $84c5			bne 	_ACExit
.84c0	a9 0a		lda #$0a		lda	#10
.84c2	4c 4b 8c	jmp $8c4b		jmp	ErrorHandler
.84c5					_ACExit:
.84c5	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/call.asm

.84c6					CallCommand:
.84c6	a2 00		ldx #$00			ldx 	#0
.84c8	20 2a 97	jsr $972a			jsr 	Evaluate16BitInteger
.84cb	ad 10 06	lda $0610			lda 	NSMantissa1
.84ce	8d 09 06	sta $0609			sta 	NSMantissa0+1
.84d1	6c 08 06	jmp ($0608)			jmp 	(NSMantissa0)

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/clear.asm

.84d4					ClearCommand:
.84d4	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.84d6	85 36		sta $36				sta 	0+zTemp0
.84d8	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.84da	85 37		sta $37				sta 	1+zTemp0
.84dc					_ClearZeroLoop:
.84dc	b2 36		lda ($36)			lda 	(zTemp0) 					; end of variables
.84de	f0 24		beq $8504			beq 	_ClearZeroEnd
.84e0	a0 03		ldy #$03			ldy 	#3 							; erase the variables
.84e2	a9 00		lda #$00			lda 	#0
.84e4					_ClearOneVariable:
.84e4	91 36		sta ($36),y			sta 	(zTemp0),y
.84e6	c8		iny				iny
.84e7	c0 08		cpy #$08			cpy 	#8
.84e9	d0 f9		bne $84e4			bne 	_ClearOneVariable
.84eb	a0 02		ldy #$02			ldy 	#2 							; has it been marked procedure
.84ed	b1 36		lda ($36),y			lda 	(zTemp0),y
.84ef	c9 18		cmp #$18			cmp 	#NSTProcedure
.84f1	d0 04		bne $84f7			bne 	_ClearNotProcedure
.84f3	a9 04		lda #$04			lda 	#NSTInteger+NSBIsArray 		; set it back to an integer array
.84f5	91 36		sta ($36),y			sta 	(zTemp0),y
.84f7					_ClearNotProcedure:
.84f7	18		clc				clc 								; go to the next variable
.84f8	b2 36		lda ($36)			lda 	(zTemp0)
.84fa	65 36		adc $36				adc 	zTemp0
.84fc	85 36		sta $36				sta 	zTemp0
.84fe	90 dc		bcc $84dc			bcc 	_ClearZeroLoop
.8500	e6 37		inc $37				inc 	zTemp0+1
.8502	80 d8		bra $84dc			bra 	_ClearZeroLoop
.8504					_ClearZeroEnd:
.8504	18		clc				clc
.8505	a5 36		lda $36				lda 	zTemp0
.8507	69 01		adc #$01			adc 	#1
.8509	8d 0c 07	sta $070c			sta 	lowMemPtr
.850c	a5 37		lda $37				lda 	zTemp0+1
.850e	69 00		adc #$00			adc 	#0
.8510	8d 0d 07	sta $070d			sta 	lowMemPtr+1
.8513	20 2e 98	jsr $982e			jsr 	StackReset
.8516	20 73 a6	jsr $a673			jsr 	StringSystemInitialise
.8519	20 6b 8b	jsr $8b6b			jsr 	ProcedureScan
.851c	20 56 89	jsr $8956			jsr 	Command_Restore
.851f	9c 1d 07	stz $071d			stz 	AssemblerAddress
.8522	9c 1e 07	stz $071e			stz 	AssemblerAddress+1
.8525	9c 1f 07	stz $071f			stz 	AssemblerControl
.8528	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/data.asm

.8529					Command_Data:
.8529	a9 3a		lda #$3a			lda 	#KWD_COLON 					; advance to colon/EOL
.852b	a2 80		ldx #$80			ldx 	#KWC_EOL
.852d	20 bd 8b	jsr $8bbd			jsr 	ScanForward
.8530	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/dim.asm

.8531					DimCommand:
.8531	b1 30		lda ($30),y			lda 	(codePtr),y
.8533	29 c0		and #$c0			and 	#$C0
.8535	c9 40		cmp #$40			cmp 	#$40
.8537	d0 7a		bne $85b3			bne 	_DCSyntax
.8539	b1 30		lda ($30),y			lda 	(codePtr),y
.853b	18		clc				clc
.853c	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.853e	85 3f		sta $3f				sta 	zaTemp+1
.8540	c8		iny				iny
.8541	b1 30		lda ($30),y			lda 	(codePtr),y
.8543	c8		iny				iny
.8544	85 3e		sta $3e				sta 	zaTemp
.8546	5a		phy				phy
.8547	a0 02		ldy #$02			ldy 	#2 						; read type byte
.8549	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.854b	29 18		and #$18			and 	#NSBTypeMask 			; check it's not a procedure
.854d	c9 18		cmp #$18			cmp 	#NSTProcedure
.854f	f0 62		beq $85b3			beq 	_DCSyntax
.8551	b1 3e		lda ($3e),y			lda 	(zaTemp),y 				; check it's an array
.8553	29 04		and #$04			and 	#NSBIsArray
.8555	f0 64		beq $85bb			beq 	_DCType
.8557	a0 04		ldy #$04			ldy 	#4 						; check not already defined
.8559	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.855b	d0 59		bne $85b6			bne 	_DCRedefine
.855d	7a		ply				ply
.855e	20 be 85	jsr $85be			jsr 	_DCGetSize 				; get array size, check it.
.8561	5a		phy				phy
.8562	a0 05		ldy #$05			ldy 	#5 						; store in first array size slot
.8564	91 3e		sta ($3e),y			sta 	(zaTemp),y 				; second will be zero.
.8566	7a		ply				ply 							; is there a second (e.g. ,x)
.8567	b1 30		lda ($30),y			lda 	(codePtr),y
.8569	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.856b	d0 0a		bne $8577			bne 	_DCOneDimension
.856d	c8		iny				iny 							; skip comma
.856e	20 be 85	jsr $85be			jsr 	_DCGetSize 				; get 2nd array size
.8571	5a		phy				phy
.8572	a0 06		ldy #$06			ldy 	#6 						; store in 2nd array size
.8574	91 3e		sta ($3e),y			sta 	(zaTemp),y
.8576	7a		ply				ply
.8577					_DCOneDimension:
.8577	5a		phy				phy 							; save position
.8578	a0 05		ldy #$05			ldy 	#5 						; dimensions + 1 in AX (as zero based)
.857a	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.857c	aa		tax				tax
.857d	c8		iny				iny
.857e	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8580	e8		inx				inx 							; bump them.
.8581	1a		inc a				inc 	a
.8582	20 13 a3	jsr $a313			jsr 	Multiply8x8 			; work out the total number of elements -> zTemp0
.8585	a5 37		lda $37				lda 	zTemp0+1 				; don't allow more than 8192 elements whatever
.8587	29 e0		and #$e0			and 	#$E0
.8589	d0 23		bne $85ae			bne 	_DCSize
.858b	a0 02		ldy #$02			ldy 	#2 						; get base type
.858d	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.858f	20 cc 85	jsr $85cc			jsr 	ScaleByBaseType 		; scale by base type
.8592	a5 36		lda $36				lda 	zTemp0
.8594	a6 37		ldx $37				ldx 	zTemp0+1
.8596	20 d4 94	jsr $94d4			jsr 	AllocateXABytes 		; allocate memory
.8599	a0 03		ldy #$03			ldy 	#3 						; copy into the address.
.859b	91 3e		sta ($3e),y			sta 	(zaTemp),y
.859d	c8		iny				iny
.859e	8a		txa				txa
.859f	91 3e		sta ($3e),y			sta 	(zaTemp),y
.85a1	7a		ply				ply 							; get position back
.85a2	20 91 9e	jsr $9e91			jsr 	CheckRightBracket 		; check )
.85a5	b1 30		lda ($30),y			lda 	(codePtr),y
.85a7	c8		iny				iny 							; consume in case
.85a8	c9 2c		cmp #$2c			cmp 	#KWD_COMMA		 		; if so do another DIM.
.85aa	f0 85		beq $8531			beq 	DimCommand
.85ac	88		dey				dey 							; undo consume
.85ad	60		rts				rts
.85ae					_DCSize:
.85ae	a9 16		lda #$16		lda	#22
.85b0	4c 4b 8c	jmp $8c4b		jmp	ErrorHandler
.85b3					_DCSyntax:
.85b3	4c 73 a4	jmp $a473			jmp 	SyntaxError
.85b6					_DCRedefine:
.85b6	a9 15		lda #$15		lda	#21
.85b8	4c 4b 8c	jmp $8c4b		jmp	ErrorHandler
.85bb					_DCType:
.85bb	4c 7d a4	jmp $a47d			jmp 	TypeError
.85be					_DCGetSize:
.85be	a2 00		ldx #$00			ldx 	#0 						; get first index.
.85c0	20 36 97	jsr $9736			jsr 	Evaluate8BitInteger 	; get array dimension
.85c3	c9 00		cmp #$00			cmp 	#0 						; must be 1-254
.85c5	f0 e7		beq $85ae			beq 	_DCSize
.85c7	c9 fe		cmp #$fe			cmp 	#254
.85c9	f0 e3		beq $85ae			beq 	_DCSize
.85cb	60		rts				rts
.85cc					ScaleByBaseType:
.85cc	29 10		and #$10			and 	#NSBIsString 			; is it string
.85ce	d0 19		bne $85e9			bne 	_SBBTString
.85d0	a5 37		lda $37				lda 	zTemp0+1 				; push value on stack
.85d2	48		pha				pha
.85d3	a5 36		lda $36				lda 	zTemp0
.85d5	48		pha				pha
.85d6	06 36		asl $36				asl 	zTemp0 					; x 2
.85d8	26 37		rol $37				rol 	zTemp0+1
.85da	06 36		asl $36				asl 	zTemp0 					; x 4
.85dc	26 37		rol $37				rol 	zTemp0+1
.85de	68		pla				pla 							; add stacked value = x 5
.85df	65 36		adc $36				adc 	zTemp0
.85e1	85 36		sta $36				sta 	zTemp0
.85e3	68		pla				pla
.85e4	65 37		adc $37				adc 	zTemp0+1
.85e6	85 37		sta $37				sta 	zTemp0+1
.85e8	60		rts				rts
.85e9					_SBBTString:
.85e9	06 36		asl $36				asl 	zTemp0
.85eb	26 37		rol $37				rol 	zTemp0+1
.85ed	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/end.asm

.85ee					EndCommand:
.85ee	4c 67 84	jmp $8467			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/for.asm

.85f1					ForCommand:
.85f1	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; allocate 18 bytes on the return stack.
.85f3	20 db 97	jsr $97db			jsr 	StackOpen
.85f6	a2 00		ldx #$00			ldx 	#0
.85f8	20 25 93	jsr $9325			jsr 	EvaluateTerm
.85fb	bd 00 06	lda $0600,x			lda 	NSStatus,x
.85fe	c9 20		cmp #$20			cmp 	#NSBIsReference+NSTInteger 	; do we have an integer 4 byte reference.
.8600	d0 49		bne $864b			bne		_FCError
.8602	a9 3d		lda #$3d			lda 	#KWD_EQUAL 					; =
.8604	20 a1 9e	jsr $9ea1			jsr 	CheckNextA
.8607	e8		inx				inx
.8608	20 15 97	jsr $9715			jsr 	EvaluateInteger 			; <from> in +1
.860b	b1 30		lda ($30),y			lda 	(codePtr),y
.860d	c8		iny				iny 								; consume it
.860e	48		pha				pha 								; save on stack for later
.860f	c9 a5		cmp #$a5			cmp 	#KWD_DOWNTO
.8611	f0 04		beq $8617			beq 	_FCNoSyntax
.8613	c9 ae		cmp #$ae			cmp 	#KWD_TO
.8615	d0 37		bne $864e			bne 	_FCSyntaxError
.8617					_FCNoSyntax:
.8617	e8		inx				inx
.8618	20 15 97	jsr $9715			jsr 	EvaluateInteger
.861b	20 0d 98	jsr $980d			jsr 	STKSaveCodePosition 		; save loop back position
.861e	68		pla				pla 								; restore DOWNTO or TO
.861f	5a		phy				phy 								; save Y on the stack
.8620	49 a5		eor #$a5			eor 	#KWD_DOWNTO 				; 0 if DOWNTO, #0 if TO
.8622	f0 02		beq $8626			beq 	_FCNotDownTo
.8624	a9 02		lda #$02			lda 	#2
.8626					_FCNotDownTo:
.8626	3a		dec a				dec 	a 							; 255 if DOWNTO, 1 if TO
.8627	a0 10		ldy #$10			ldy 	#16
.8629	91 34		sta ($34),y			sta 	(basicStack),y 				; copy that out to the Basic Stack.
.862b	a0 06		ldy #$06			ldy 	#6
.862d	ad 08 06	lda $0608			lda 	NSMantissa0
.8630	91 34		sta ($34),y			sta 	(basicStack),y
.8632	ad 10 06	lda $0610			lda 	NSMantissa1
.8635	c8		iny				iny
.8636	91 34		sta ($34),y			sta 	(basicStack),y
.8638	a0 08		ldy #$08			ldy 	#8 							; set initial index value
.863a	a2 01		ldx #$01			ldx 	#1
.863c	20 51 86	jsr $8651			jsr 	FCIntegerToStack
.863f	a0 0c		ldy #$0c			ldy 	#12 						; set the terminal value
.8641	a2 02		ldx #$02			ldx 	#2
.8643	20 51 86	jsr $8651			jsr 	FCIntegerToStack
.8646	20 71 86	jsr $8671			jsr 	CopyIndexToReference
.8649	7a		ply				ply 								; restore position
.864a	60		rts				rts
.864b					_FCError:
.864b	4c 7d a4	jmp $a47d			jmp 	TypeError
.864e					_FCSyntaxError:
.864e	4c 73 a4	jmp $a473			jmp 	SyntaxError
.8651					FCIntegerToStack:
.8651	3c 00 06	bit $0600,x			bit 	NSStatus,x 					; is the value negative
.8654	10 03		bpl $8659			bpl	 	_FCNotNegative
.8656	20 53 97	jsr $9753			jsr 	NSMNegateMantissa 			; if so 2's complement the mantissa
.8659					_FCNotNegative:
.8659	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy out to the basic stack
.865c	91 34		sta ($34),y			sta 	(basicStack),y
.865e	c8		iny				iny
.865f	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8662	91 34		sta ($34),y			sta 	(basicStack),y
.8664	c8		iny				iny
.8665	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.8668	91 34		sta ($34),y			sta 	(basicStack),y
.866a	c8		iny				iny
.866b	bd 20 06	lda $0620,x			lda 	NSMantissa3,x
.866e	91 34		sta ($34),y			sta 	(basicStack),y
.8670	60		rts				rts
.8671					CopyIndexToReference:
.8671	5a		phy				phy
.8672	a0 06		ldy #$06			ldy 	#6 							; copy address-8 to write to zTemp0
.8674	38		sec				sec 								; (because we copy from offset 8)
.8675	b1 34		lda ($34),y			lda 	(basicStack),y
.8677	e9 08		sbc #$08			sbc 	#8
.8679	85 36		sta $36				sta 	zTemp0
.867b	c8		iny				iny
.867c	b1 34		lda ($34),y			lda 	(basicStack),y
.867e	e9 00		sbc #$00			sbc 	#0
.8680	85 37		sta $37				sta 	zTemp0+1
.8682	a2 04		ldx #$04			ldx 	#4 							; this is the copy counter/
.8684	a0 0b		ldy #$0b			ldy 	#8+3 		 				; the MSB of the mantissa
.8686	b1 34		lda ($34),y			lda 	(basicStack),y
.8688	0a		asl a				asl 	a 							; into carry
.8689	a0 08		ldy #$08			ldy 	#8 							; where to copy from.
.868b	90 14		bcc $86a1			bcc 	_CITRNormal
.868d	38		sec				sec
.868e					_CITRNegative:
.868e	a9 00		lda #$00			lda 	#0
.8690	f1 34		sbc ($34),y			sbc 	(basicStack),y
.8692	91 36		sta ($36),y			sta 	(zTemp0),y
.8694	c8		iny				iny
.8695	ca		dex				dex
.8696	d0 f6		bne $868e			bne 	_CITRNegative
.8698	88		dey				dey 								; look at MSB of mantissa
.8699	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set the MSB as negative packed.
.869b	09 80		ora #$80			ora 	#$80
.869d	91 36		sta ($36),y			sta 	(zTemp0),y
.869f	7a		ply				ply
.86a0	60		rts				rts
.86a1					_CITRNormal:
.86a1	b1 34		lda ($34),y			lda 	(basicStack),y 				; copy without negation.
.86a3	91 36		sta ($36),y			sta 	(zTemp0),y
.86a5	c8		iny				iny
.86a6	ca		dex				dex
.86a7	d0 f8		bne $86a1			bne 	_CITRNormal
.86a9	7a		ply				ply 								; and exit.
.86aa	60		rts				rts
.86ab					NextCommand:
.86ab	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; check FOR is TOS
.86ad	a2 11		ldx #$11			ldx 	#ERRID_FOR 					; this error
.86af	20 02 98	jsr $9802			jsr 	StackCheckFrame
.86b2	5a		phy				phy
.86b3	a0 10		ldy #$10			ldy 	#16 						; get the step count
.86b5	b1 34		lda ($34),y			lda 	(basicStack),y
.86b7	85 36		sta $36				sta 	zTemp0 						; this is the sign extend
.86b9	30 02		bmi $86bd			bmi 	_NCStepNeg
.86bb	64 36		stz $36				stz 	zTemp0 						; which is 0 or 255
.86bd					_NCStepNeg:
.86bd	a0 08		ldy #$08			ldy 	#8 							; offset to bump
.86bf	a2 04		ldx #$04			ldx 	#4 							; count to bump
.86c1	18		clc				clc
.86c2					_NCBump:
.86c2	71 34		adc ($34),y			adc 	(basicStack),y 				; add it
.86c4	91 34		sta ($34),y			sta 	(basicStack),y
.86c6	a5 36		lda $36				lda 	zTemp0 						; get sign extend for next time.
.86c8	c8		iny				iny 								; next byte
.86c9	ca		dex				dex 								; do four times
.86ca	d0 f6		bne $86c2			bne 	_NCBump
.86cc	20 71 86	jsr $8671			jsr		CopyIndexToReference		; copy it to the reference variable.
.86cf	a0 10		ldy #$10			ldy 	#16 						; get step count again
.86d1	b1 34		lda ($34),y			lda 	(basicStack),y
.86d3	0a		asl a				asl 	a 							; sign bit to carry
.86d4	a9 0c		lda #$0c			lda 	#12 						; offset of LHS = terminal offset
.86d6	85 38		sta $38				sta 	zTemp1
.86d8	90 02		bcc $86dc			bcc 	_NCCompRev 					; use if step is +ve
.86da	a9 08		lda #$08			lda 	#8 							; now the LHS = index value
.86dc					_NCCompRev:
.86dc	85 38		sta $38				sta 	zTemp1 						; so zTemp0 is the index for LHS
.86de	49 04		eor #$04			eor 	#(8^12) 					; and zTemp0+1 is the index for RHS
.86e0	85 39		sta $39				sta 	zTemp1+1
.86e2	a2 04		ldx #$04			ldx 	#4 							; bytes to compare
.86e4	38		sec				sec
.86e5					_NCCompare:
.86e5	a4 38		ldy $38				ldy 	zTemp1 						; do compare using the two indices
.86e7	b1 34		lda ($34),y			lda 	(basicStack),y
.86e9	a4 39		ldy $39				ldy 	zTemp1+1
.86eb	f1 34		sbc ($34),y			sbc 	(basicStack),y
.86ed	e6 38		inc $38				inc 	zTemp1 						; bump the indices (inc,dex do not change C or V)
.86ef	e6 39		inc $39				inc 	zTemp1+1
.86f1	ca		dex				dex 								; do it 4 times.
.86f2	d0 f1		bne $86e5			bne 	_NCCompare
.86f4	50 02		bvc $86f8			bvc 	_NCNoOverflow 				; convert to signed comparison
.86f6	49 80		eor #$80			eor 	#$80
.86f8					_NCNoOverflow:
.86f8	7a		ply				ply 								; restore Y position
.86f9	0a		asl a				asl 	a 							; is bit 7 set.
.86fa	90 04		bcc $8700			bcc 	_NCLoopback 				; if no , >= so loop back
.86fc	20 f4 97	jsr $97f4			jsr 	StackClose 					; exit the loop
.86ff	60		rts				rts
.8700					_NCLoopBack:
.8700	20 1e 98	jsr $981e			jsr 	STKLoadCodePosition 		; loop back
.8703	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/gosub.asm

.8704					Command_GOSUB:
.8704	a2 00		ldx #$00			ldx 	#0
.8706	20 2a 97	jsr $972a			jsr 	Evaluate16BitInteger 		; line number in Stack.0
.8709	a9 e3		lda #$e3			lda 	#STK_GOSUB+3
.870b	20 db 97	jsr $97db			jsr 	StackOpen 					; create frame
.870e	20 0d 98	jsr $980d			jsr 	STKSaveCodePosition 		; save current position
.8711	4c 27 87	jmp $8727			jmp 	GotoStackX
.8714					Command_RETURN:
.8714	a9 e0		lda #$e0			lda 	#STK_GOSUB 					; check TOS is this
.8716	a2 0e		ldx #$0e			ldx 	#ERRID_GOSUB 				; this error
.8718	20 02 98	jsr $9802			jsr 	StackCheckFrame
.871b	20 1e 98	jsr $981e			jsr 	STKLoadCodePosition 		; restore code position
.871e	20 f4 97	jsr $97f4			jsr 	StackClose
.8721	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/goto.asm

.8722					GotoCommand:
.8722	a2 00		ldx #$00			ldx 	#0 							; GOTO where
.8724	20 2a 97	jsr $972a			jsr 	Evaluate16BitInteger
.8727					GotoStackX:
.8727	bd 10 06	lda $0610,x			lda  	NSMantissa1,x 				; put line # in XA. I'll keep this even though
.872a	48		pha				pha 								; it is slightly inefficient, just in cases.
.872b	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.872e	fa		plx				plx
.872f	20 20 9e	jsr $9e20			jsr 	MemorySearch 				; transfer to line number AX.
.8732	90 05		bcc $8739			bcc 	_GotoError 					; not found, off end.
.8734	d0 03		bne $8739			bne 	_GotoError 					; not found exactly
.8736	4c 93 89	jmp $8993			jmp 	RunNewLine 					; and go straight to new line code.
.8739					_GotoError:
.8739	a9 0d		lda #$0d		lda	#13
.873b	4c 4b 8c	jmp $8c4b		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/if.asm

.873e					IfCommand:
.873e	a2 00		ldx #$00			ldx 	#0 							; If what.
.8740	20 f2 96	jsr $96f2			jsr 	EvaluateNumber
.8743	b1 30		lda ($30),y			lda 	(codePtr),y
.8745	c9 9e		cmp #$9e			cmp 	#KWD_THEN  					; could be THEN <stuff> or GOTO
.8747	d0 0a		bne $8753			bne 	_IFStructured
.8749	c8		iny				iny 								; consume THEN
.874a	20 ce 97	jsr $97ce			jsr 	NSMIsZero 					; is it zero
.874d	f0 01		beq $8750			beq 	_IfFail 					; if fail, go to next line
.874f	60		rts				rts 								; if THEN just continue
.8750					_IfFail:
.8750	4c f4 89	jmp $89f4			jmp 	EOLCommand
.8753					_IfStructured:
.8753	20 ce 97	jsr $97ce			jsr 	NSMIsZero 					; is it zero
.8756	d0 07		bne $875f			bne 	_IfExit 					; if not, then continue normally.
.8758	a9 a6		lda #$a6			lda 	#KWD_ELSE 					; look for else/endif
.875a	a2 9b		ldx #$9b			ldx 	#KWD_ENDIF
.875c	20 bd 8b	jsr $8bbd			jsr 	ScanForward 				; and run from there/
.875f					_IfExit:
.875f	60		rts				rts
.8760					ElseCode:
.8760	a9 9b		lda #$9b			lda 	#KWD_ENDIF 					; else is only run after the if clause succeeds
.8762	aa		tax				tax 								; so just go to the structure exit
.8763	20 bd 8b	jsr $8bbd			jsr 	ScanForward
.8766	60		rts				rts
.8767					EndIf:
.8767	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/let.asm

.8768					LetCommand:
.8768	a2 00		ldx #$00			ldx 	#0
.876a	ad 3c 90	lda $903c			lda 	PrecedenceLevel+"*"			; precedence > this
.876d	20 56 90	jsr $9056			jsr 	EvaluateExpressionAtPrecedence
.8770	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; is it a reference to an array
.8773	c9 38		cmp #$38			cmp		#NSTProcedure+NSBIsReference
.8775	f0 0e		beq $8785			beq 	_LetGoProc 					; it's a procedure call.
.8777	a9 3d		lda #$3d			lda 	#"=" 						; check =
.8779	20 a1 9e	jsr $9ea1			jsr 	CheckNextA
.877c	e8		inx				inx 								; RHS
.877d	20 e9 96	jsr $96e9			jsr 	EvaluateValue
.8780	ca		dex				dex
.8781	20 88 87	jsr $8788			jsr 	AssignVariable
.8784	60		rts				rts
.8785					_LetGoProc:
.8785	4c 9d 88	jmp $889d			jmp 	CallProcedure
.8788					AssignVariable:
.8788	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check the string/number type bits match
.878b	48		pha				pha 								; save a copy
.878c	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.878f	29 10		and #$10			and 	#NSBIsString
.8791	d0 0b		bne $879e			bne 	_ASError
.8793	68		pla				pla 								; get back
.8794	29 10		and #$10			and 	#NSBIsString 				; check type
.8796	d0 03		bne $879b			bne 	_ASString
.8798	4c 91 90	jmp $9091			jmp 	AssignNumber
.879b					_ASString:
.879b	4c ff 90	jmp $90ff			jmp 	AssignString
.879e					_ASError:
.879e	4c 7d a4	jmp $a47d			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/list.asm

.87a1					Command_List:
.87a1	9c 0c 06	stz $060c			stz		NSMantissa0+4				; set the lower (slot 4) to 0 and upper (slot 7) to $FFFF
.87a4	9c 14 06	stz $0614			stz 	NSMantissa1+4
.87a7	a9 ff		lda #$ff			lda 	#$FF
.87a9	8d 0f 06	sta $060f			sta 	NSMantissa0+7
.87ac	8d 17 06	sta $0617			sta 	NSMantissa1+7
.87af	b1 30		lda ($30),y			lda 	(codePtr),y
.87b1	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.87b3	f0 1e		beq $87d3			beq 	_CLSecond
.87b5	20 31 88	jsr $8831			jsr 	CLIsDigit 					; if not digit, list all
.87b8	b0 24		bcs $87de			bcs 	_CLStart
.87ba	a2 04		ldx #$04			ldx 	#4 							; get 1st range into slot 4
.87bc	20 2a 97	jsr $972a			jsr 	Evaluate16BitInteger
.87bf	b1 30		lda ($30),y			lda 	(codePtr),y
.87c1	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.87c3	f0 0e		beq $87d3			beq 	_CLSecond 					; if so go get it
.87c5	ad 0c 06	lda $060c			lda 	NSMantissa0+4 				; copy 4->7
.87c8	8d 0f 06	sta $060f			sta 	NSMantissa0+7
.87cb	ad 14 06	lda $0614			lda 	NSMantissa1+4
.87ce	8d 17 06	sta $0617			sta 	NSMantissa1+7
.87d1	80 0b		bra $87de			bra 	_CLStart
.87d3					_CLSecond:
.87d3	c8		iny				iny 								; consume comma
.87d4	20 31 88	jsr $8831			jsr 	CLIsDigit 					; digit found
.87d7	b0 05		bcs $87de			bcs 	_CLStart 					; if not, continue listing
.87d9	a2 07		ldx #$07			ldx 	#7 							; load 2nd range into slot 7
.87db	20 2a 97	jsr $972a			jsr 	Evaluate16BitInteger
.87de					_CLStart
.87de	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.87e0	85 30		sta $30				sta 	codePtr
.87e2	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.87e4	85 31		sta $31				sta 	codePtr+1
.87e6					_CLLoop:
.87e6	20 22 a7	jsr $a722			jsr 	EXTBreakCheck 				; break check
.87e9	f0 30		beq $881b			beq 	_CLExit
.87eb	b2 30		lda ($30)			lda 	(codePtr)
.87ed	f0 2c		beq $881b			beq 	_CLExit
.87ef	a2 04		ldx #$04			ldx 	#4 							; check range every time, line numbers aren't in order.
.87f1	20 1e 88	jsr $881e			jsr 	CLCompareLineNo
.87f4	90 18		bcc $880e			bcc 	_CLNext
.87f6	a2 07		ldx #$07			ldx 	#7
.87f8	20 1e 88	jsr $881e			jsr 	CLCompareLineNo
.87fb	f0 02		beq $87ff			beq 	_CLDoThisOne
.87fd	b0 0f		bcs $880e			bcs 	_CLNext
.87ff					_CLDoThisOne:
.87ff	20 19 8a	jsr $8a19			jsr 	ListConvertLine 			; convert line into token Buffer
.8802	a2 07		ldx #$07			ldx 	#(tokenBuffer >> 8) 		; print that line
.8804	a9 28		lda #$28			lda 	#(tokenBuffer & $FF)
.8806	20 a4 8c	jsr $8ca4			jsr 	PrintStringXA
.8809	a9 0d		lda #$0d			lda 	#13 						; new line
.880b	20 e1 a6	jsr $a6e1			jsr 	EXTPrintCharacter
.880e					_CLNext:
.880e	18		clc				clc
.880f	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8811	65 30		adc $30				adc 	codePtr
.8813	85 30		sta $30				sta 	codePtr
.8815	90 02		bcc $8819			bcc 	_CREExit
.8817	e6 31		inc $31				inc 	codePtr+1
.8819					_CREExit:
.8819	80 cb		bra $87e6			bra 	_CLLoop
.881b					_CLExit:
.881b	4c 67 84	jmp $8467			jmp 	WarmStart
.881e					CLCompareLineNo:
.881e	38		sec				sec
.881f	a0 01		ldy #$01			ldy 	#1
.8821	b1 30		lda ($30),y			lda 	(codePtr),y
.8823	fd 08 06	sbc $0608,x			sbc 	NSMantissa0,x
.8826	85 36		sta $36				sta 	zTemp0
.8828	c8		iny				iny
.8829	b1 30		lda ($30),y			lda 	(codePtr),y
.882b	fd 10 06	sbc $0610,x			sbc 	NSMantissa1,x
.882e	05 36		ora $36				ora 	zTemp0
.8830	60		rts				rts
.8831					CLIsDigit:
.8831	b1 30		lda ($30),y			lda 	(codePtr),y
.8833	c9 30		cmp #$30			cmp 	#"0"
.8835	90 03		bcc $883a			bcc	 	_CLIDExitFalse
.8837	c9 3a		cmp #$3a			cmp 	#"9"+1
.8839	60		rts				rts
.883a					_CLIDExitFalse:
.883a	38		sec				sec
.883b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/new.asm

.883c					NewCommand:
.883c	20 fe 9d	jsr $9dfe			jsr 	MemoryNew
.883f	9c 00 10	stz $1000			stz 	VariableSpace 				; erase all variables.
.8842	20 d4 84	jsr $84d4			jsr 	ClearCommand 				; clear everything.
.8845	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/print.asm

.8846					Command_Print:
.8846	18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.8847					_CPLoop:
.8847	08		php				php 								; save last action flag
.8848	b1 30		lda ($30),y			lda 	(codePtr),y
.884a	c9 80		cmp #$80			cmp  	#KWC_EOL 					; end of line or colon, exit now.
.884c	f0 46		beq $8894			beq 	_CPExit
.884e	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.8850	f0 42		beq $8894			beq 	_CPExit
.8852	68		pla				pla 								; throw last action flag
.8853	b1 30		lda ($30),y			lda 	(codePtr),y
.8855	c8		iny				iny
.8856	c9 3b		cmp #$3b			cmp 	#KWD_SEMICOLON				; is it a semicolon
.8858	f0 37		beq $8891			beq 	_CPContinueWithSameLine
.885a	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; comma
.885c	f0 2e		beq $888c			beq 	_CPTab
.885e	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; apostrophe (new line)
.8860	f0 26		beq $8888			beq 	_CPNewLine
.8862	88		dey				dey 								; undo the get.
.8863	a2 00		ldx #$00			ldx 	#0
.8865	20 e9 96	jsr $96e9			jsr 	EvaluateValue 				; get a value into slot 0
.8868	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; is it a number
.886b	29 10		and #$10			and 	#NSBIsString
.886d	f0 0b		beq $887a			beq 	_CPNumber
.886f	ae 10 06	ldx $0610			ldx 	NSMantissa1 				; string, print the text.
.8872	ad 08 06	lda $0608			lda 	NSMantissa0
.8875	20 a4 8c	jsr $8ca4			jsr 	PrintStringXA
.8878	80 cc		bra $8846			bra 	Command_Print 				; loop round clearing carry so NL if end
.887a					_CPNumber:
.887a	a9 05		lda #$05			lda 	#5 							; maximum decimals
.887c	20 bf 95	jsr $95bf			jsr 	ConvertNumberToString 		; convert to string
.887f	a2 08		ldx #$08			ldx 	#DecimalBuffer >> 8
.8881	a9 98		lda #$98			lda 	#DecimalBuffer & $FF
.8883	20 a4 8c	jsr $8ca4			jsr 	PrintStringXA
.8886	80 be		bra $8846			bra 	Command_Print 				; loop round clearing carry so NL if end
.8888					_CPNewLine:
.8888	a9 0d		lda #$0d			lda 	#13
.888a	80 02		bra $888e			bra 	_CPPrintChar
.888c					_CPTab:
.888c	a9 09		lda #$09			lda 	#9 							; print TAB
.888e					_CPPrintChar:
.888e	20 e1 a6	jsr $a6e1			jsr 	EXTPrintCharacter
.8891					_CPContinueWithSameLine:
.8891	38		sec				sec 								; loop round with carry set, which
.8892	80 b3		bra $8847			bra 	_CPLoop 					; will inhibit final CR
.8894					_CPExit:
.8894	28		plp				plp 								; get last action flag
.8895	b0 05		bcs $889c			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.8897	a9 0d		lda #$0d			lda 	#13 						; print new line
.8899	20 e1 a6	jsr $a6e1			jsr 	EXTPrintCharacter
.889c					_CPExit2:
.889c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/procedure.asm

.889d					CallProcedure:
.889d	20 91 9e	jsr $9e91			jsr 	CheckRightBracket
.88a0	a9 b3		lda #$b3			lda 	#STK_PROC+3 				; allocate 6 bytes on the return stack.
.88a2	20 db 97	jsr $97db			jsr 	StackOpen
.88a5	20 0d 98	jsr $980d			jsr 	STKSaveCodePosition 		; save loop position
.88a8	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy variable (e.g. procedure) address to zTemp0
.88ab	85 36		sta $36				sta 	zTemp0 						; this is the DATA not the RECORD
.88ad	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.88b0	85 37		sta $37				sta 	zTemp0+1
.88b2	a0 01		ldy #$01			ldy 	#1 							; copy code address back.
.88b4	b2 36		lda ($36)			lda 	(zTemp0)
.88b6	85 30		sta $30				sta 	safePtr
.88b8	b1 36		lda ($36),y			lda 	(zTemp0),y
.88ba	85 31		sta $31				sta 	safePtr+1
.88bc	c8		iny				iny
.88bd	b1 36		lda ($36),y			lda 	(zTemp0),y
.88bf	85 32		sta $32				sta 	safePtr+2
.88c1	c8		iny				iny
.88c2	b1 36		lda ($36),y			lda 	(zTemp0),y
.88c4	85 33		sta $33				sta 	safePtr+3
.88c6	c8		iny				iny 								; get Y offset -> Y
.88c7	b1 36		lda ($36),y			lda 	(zTemp0),y
.88c9	a8		tay				tay
.88ca	20 91 9e	jsr $9e91			jsr 	CheckRightBracket 			; check )
.88cd	60		rts				rts 								; and continue from here
.9e83					Command_ENDPROC:
.9e83	a9 b0		lda #$b0			lda 	#STK_PROC 					; check TOS is this
.9e85	a2 14		ldx #$14			ldx 	#ERRID_PROC
.9e87	20 02 98	jsr $9802			jsr 	StackCheckFrame
.9e8a	20 1e 98	jsr $981e			jsr 	STKLoadCodePosition 		; restore code position
.9e8d	20 f4 97	jsr $97f4			jsr 	StackClose
.9e90	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/read.asm

.88ce					Command_Read:
.88ce	a2 00		ldx #$00			ldx 	#0 							; evaluate the term which is the var/array element to assign
.88d0	20 25 93	jsr $9325			jsr 	EvaluateTerm
.88d3	bd 00 06	lda $0600,x			lda 	NSStatus,x
.88d6	29 20		and #$20			and 	#NSBIsReference				; get status byte on stack, identifies int, float, string.
.88d8	f0 4a		beq $8924			beq 	_CRSyntax 					; check reference (bit 0)
.88da	20 6d 89	jsr $896d			jsr 	SwapDataCodePtrs 			; swap code and data
.88dd	ad 1b 07	lda $071b			lda 	inDataStatement 			; if in a data statement, we don't need to search
.88e0	d0 20		bne $8902			bne 	_CRContinueData
.88e2					_CRKeepSearching:
.88e2	a9 a3		lda #$a3			lda 	#KWD_DATA 					; scan for instruction
.88e4	aa		tax				tax
.88e5	20 bd 8b	jsr $8bbd			jsr 	ScanForward
.88e8	c9 a3		cmp #$a3			cmp 	#KWD_DATA 					; found data ?
.88ea	f0 16		beq $8902			beq 	_CRHaveData 				; found it
.88ec	18		clc				clc
.88ed	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.88ef	65 30		adc $30				adc 	codePtr
.88f1	85 30		sta $30				sta 	codePtr
.88f3	90 02		bcc $88f7			bcc 	_CREExit
.88f5	e6 31		inc $31				inc 	codePtr+1
.88f7					_CREExit:
.88f7	a0 03		ldy #$03			ldy 	#3 							; start of line.
.88f9	b2 30		lda ($30)			lda 	(codePtr)
.88fb	d0 e5		bne $88e2			bne 	_CRKeepSearching
.88fd	a9 0b		lda #$0b		lda	#11
.88ff	4c 4b 8c	jmp $8c4b		jmp	ErrorHandler
.8902					_CRHaveData:
.8902					_CRContinueData:
.8902	a2 01		ldx #$01			ldx 	#1
.8904	20 e9 96	jsr $96e9			jsr 	EvaluateValue 				; evaluate value into slot # 1
.8907	ca		dex				dex
.8908	20 88 87	jsr $8788			jsr		AssignVariable 				; do the assignment
.890b	9c 1b 07	stz $071b			stz 	inDataStatement 			; clear in data
.890e	b1 30		lda ($30),y			lda 	(codePtr),y
.8910	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not, end of data statement
.8912	d0 04		bne $8918			bne 	_CRSwapBack
.8914	c8		iny				iny 								; consume comma
.8915	ee 1b 07	inc $071b			inc 	inDataStatement 			; set in data statement currently.
.8918					_CRSwapBack:
.8918	20 6d 89	jsr $896d			jsr 	SwapDataCodePtrs			; swap them back.
.891b	b1 30		lda ($30),y			lda 	(codePtr),y
.891d	c8		iny				iny
.891e	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8920	f0 ac		beq $88ce			beq 	Command_Read 				; if so go round again.
.8922	88		dey				dey 								; unpick get.
.8923	60		rts				rts
.8924					_CRSyntax:
.8924	4c 73 a4	jmp $a473			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/rem.asm

.8927					RemCommand:
.8927	b1 30		lda ($30),y			lda 	(codePtr),y
.8929	c9 ff		cmp #$ff			cmp 	#KWC_STRING
.892b	d0 06		bne $8933			bne 	_RMExit
.892d	c8		iny				iny
.892e	98		tya				tya
.892f	38		sec				sec
.8930	71 30		adc ($30),y			adc 	(codePtr),y
.8932	a8		tay				tay
.8933					_RMExit:
.8933	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/repeat.asm

.8934					Command_REPEAT:
.8934	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; allocate 6 bytes on the return stack.
.8936	20 db 97	jsr $97db			jsr 	StackOpen
.8939	20 0d 98	jsr $980d			jsr 	STKSaveCodePosition 		; save loop position
.893c	60		rts				rts
.893d					Command_UNTIL:
.893d	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; check REPEAT is TOS
.893f	a2 0f		ldx #$0f			ldx 	#ERRID_REPEAT 				; this error
.8941	20 02 98	jsr $9802			jsr 	StackCheckFrame
.8944	a2 00		ldx #$00			ldx 	#0
.8946	20 f2 96	jsr $96f2			jsr 	EvaluateNumber 				; work out the number
.8949	20 ce 97	jsr $97ce			jsr 	NSMIsZero 					; check if zero
.894c	f0 04		beq $8952			beq 	_CULoopBack 				; if so keep looping
.894e	20 f4 97	jsr $97f4			jsr 	StackClose		 			; return
.8951	60		rts				rts
.8952					_CULoopBack:
.8952	20 1e 98	jsr $981e			jsr 	STKLoadCodePosition 		; loop back
.8955	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/restore.asm

.8956					Command_Restore:
.8956	20 6d 89	jsr $896d			jsr 	SwapDataCodePtrs 			; swap code and data
.8959	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.895b	85 30		sta $30				sta 	codePtr
.895d	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.895f	85 31		sta $31				sta 	codePtr+1
.8961	20 6d 89	jsr $896d			jsr 	SwapDataCodePtrs 			; put them back
.8964	a9 03		lda #$03			lda 	#3 							; start at offset 3, e.g. first instruction of first line.
.8966	8d 1a 07	sta $071a			sta 	dataPointer+4
.8969	9c 1b 07	stz $071b			stz 	inDataStatement 			; not in data statement
.896c	60		rts				rts
.896d					SwapDataCodePtrs:
.896d	da		phx				phx
.896e	a2 03		ldx #$03			ldx 	#3 							; swap 32 bit code pointer over
.8970					_SDCPLoop:
.8970	b5 30		lda $30,x			lda 	safePtr,x
.8972	48		pha				pha
.8973	bd 16 07	lda $0716,x			lda 	dataPointer,x
.8976	95 30		sta $30,x			sta 	safePtr,x
.8978	68		pla				pla
.8979	9d 16 07	sta $0716,x			sta 	dataPointer,x
.897c	ca		dex				dex
.897d	10 f1		bpl $8970			bpl 	_SDCPLoop
.897f	ad 1a 07	lda $071a			lda 	dataPointer+4 				; swap Y position over.
.8982	8c 1a 07	sty $071a			sty 	dataPointer+4
.8985	a8		tay				tay
.8986	fa		plx				plx
.8987	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/run.asm

.8988					CommandRUN:
.8988	20 d4 84	jsr $84d4			jsr 	ClearCommand 				; clear variable/stacks/etc.
.898b	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.898d	85 30		sta $30				sta 	codePtr
.898f	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8991	85 31		sta $31				sta 	codePtr+1
.8993					RUNNewLine:
.8993	b2 30		lda ($30)			lda 	(codePtr)
.8995	f0 5a		beq $89f1			beq 	CRNoProgram         		; no then END.
.8997	a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack
.8999	9a		txs				txs
.899a					RUNCodePointerLine:
.899a	a0 02		ldy #$02			ldy 	#2 							; start of program
.899c					_CRIncMainLoop:
.899c	0e 13 07	asl $0713			asl 	breakCheck 					; clears 1 time in 8
.899f	d0 05		bne $89a6			bne 	_CRNoBreakCheck
.89a1	20 22 a7	jsr $a722			jsr 	EXTBreakCheck 				; break check
.89a4	f0 46		beq $89ec			beq 	_CRBreak
.89a6					_CRNoBreakCheck:
.89a6	c8		iny				iny
.89a7					_CRMainLoop:
.89a7	9c 10 07	stz $0710			stz 	stringInitialised 			; clear the temporary string initialised flag.
.89aa	b1 30		lda ($30),y			lda 	(codePtr),y
.89ac	10 10		bpl $89be			bpl 	_CRNotKeyword
.89ae	c9 96		cmp #$96			cmp 	#KWC_LAST_UNARY+1 			; if after unary, legitimate command
.89b0	b0 04		bcs $89b6			bcs 	_CRIsKeyword
.89b2	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if unary, syntax error.
.89b4	b0 30		bcs $89e6			bcs		_CRSyntaxError
.89b6					_CRIsKeyword:
.89b6	c8		iny				iny 								; consume command
.89b7	0a		asl a				asl 	a 							; double losing the MSB which is '1' as tokens are $80-$FF
.89b8	aa		tax				tax 								; put in X for vector jump
.89b9	20 e9 89	jsr $89e9			jsr 	_CRCallVector0 				; call the vector - effectively jsr (vectortable,X)
.89bc	80 e9		bra $89a7			bra 	_CRMainLoop 				; and loop round
.89be					_CRNotKeyword:
.89be	c9 3a		cmp #$3a			cmp 	#KWD_COLON 					; if a :, consume it and go round.
.89c0	f0 da		beq $899c			beq 	_CRIncMainLoop
.89c2	c9 40		cmp #$40			cmp 	#$40 						; variable/call reference
.89c4	90 05		bcc $89cb			bcc 	_CRNotVariable
.89c6					_CRGoLet:
.89c6	20 68 87	jsr $8768			jsr 	LetCommand
.89c9	80 dc		bra $89a7			bra 	_CRMainLoop
.89cb					_CRNotVariable:
.89cb	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; handle ? !
.89cd	f0 f7		beq $89c6			beq 	_CRGoLet
.89cf	c9 21		cmp #$21			cmp 	#KWD_PLING
.89d1	f0 f3		beq $89c6			beq 	_CRGoLet
.89d3	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; handle ' (comment)
.89d5	f0 09		beq $89e0			beq 	_CRGoRem
.89d7	c9 2e		cmp #$2e			cmp 	#KWD_PERIOD 				; handle . (assembler label)
.89d9	d0 0b		bne $89e6			bne 	_CRSyntaxError
.89db	20 a0 83	jsr $83a0			jsr 	LabelHere
.89de	80 c7		bra $89a7			bra 	_CRMainLoop
.89e0					_CRGoRem:
.89e0	c8		iny				iny
.89e1	20 27 89	jsr $8927			jsr 	RemCommand
.89e4	80 c1		bra $89a7			bra 	_CRMainLoop
.89e6					_CRSyntaxError:
.89e6	4c 73 a4	jmp $a473			jmp 	SyntaxError
.89e9					_CRCallVector0:
.89e9	7c fe 80	jmp ($80fe,x)			jmp 	(VectorSet0,x)
.89ec					_CRBreak:
.89ec	a9 01		lda #$01		lda	#1
.89ee	4c 4b 8c	jmp $8c4b		jmp	ErrorHandler
.89f1					CRNoProgram:
.89f1	4c ee 85	jmp $85ee			jmp 	EndCommand
.89f4					EOLCommand:
.89f4	18		clc				clc
.89f5	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.89f7	65 30		adc $30				adc 	codePtr
.89f9	85 30		sta $30				sta 	codePtr
.89fb	90 02		bcc $89ff			bcc 	_CREExit
.89fd	e6 31		inc $31				inc 	codePtr+1
.89ff					_CREExit:
.89ff	80 92		bra $8993			bra 	RunNewLine
.8a01					Shift1Command:
.8a01	b1 30		lda ($30),y			lda 	(codePtr),y
.8a03	c8		iny				iny
.8a04	0a		asl a				asl 	a
.8a05	aa		tax				tax
.8a06	7c 5c 81	jmp ($815c,x)			jmp 	(VectorSet1,x)
.8a09					Shift2Command:
.8a09	b1 30		lda ($30),y			lda 	(codePtr),y
.8a0b	c8		iny				iny
.8a0c	0a		asl a				asl 	a
.8a0d	aa		tax				tax
.8a0e	7c 74 81	jmp ($8174,x)			jmp 	(VectorSet2,x)
.8a11					Unused1:
.8a11					Unused2:
.8a11					Unused3:
.8a11					Unused4:
.8a11	4c 73 a4	jmp $a473			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/stop.asm

.8a14					StopCommand:
.8a14	a9 08		lda #$08		lda	#8
.8a16	4c 4b 8c	jmp $8c4b		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/expandline.asm

.8a19					ListConvertLine:
.8a19	9c 1c 07	stz $071c			stz 	tbOffset
.8a1c	9c 28 07	stz $0728			stz 	tokenBuffer
.8a1f	a0 02		ldy #$02			ldy 	#2 							; convert line number to string
.8a21	b1 30		lda ($30),y			lda 	(codePtr),y
.8a23	aa		tax				tax
.8a24	88		dey				dey
.8a25	b1 30		lda ($30),y			lda 	(codePtr),y
.8a27	20 ed 9f	jsr $9fed			jsr 	ConvertInt16
.8a2a	85 36		sta $36				sta 	zTemp0 						; copy number into buffer
.8a2c	86 37		stx $37				stx 	zTemp0+1
.8a2e	a0 00		ldy #$00			ldy 	#0
.8a30					_LCCopyNumber:
.8a30	b1 36		lda ($36),y			lda 	(zTemp0),y
.8a32	20 32 8b	jsr $8b32			jsr 	LCLWrite
.8a35	c8		iny				iny
.8a36	b1 36		lda ($36),y			lda 	(zTemp0),y
.8a38	d0 f6		bne $8a30			bne 	_LCCopyNumber
.8a3a					_LCPadOut:
.8a3a	a9 20		lda #$20			lda 	#' '						; pad out to 6 characters
.8a3c	20 32 8b	jsr $8b32			jsr 	LCLWrite
.8a3f	ad 1c 07	lda $071c			lda 	tbOffset
.8a42	c9 06		cmp #$06			cmp 	#6
.8a44	d0 f4		bne $8a3a			bne 	_LCPadOut
.8a46	a0 03		ldy #$03			ldy 	#3 							; start position.
.8a48					_LCMainLoop:
.8a48	b1 30		lda ($30),y			lda 	(codePtr),y
.8a4a	c9 80		cmp #$80			cmp 	#KWC_EOL 					; end of line ?
.8a4c	f0 17		beq $8a65			beq 	_LCExit
.8a4e	c9 10		cmp #$10			cmp 	#16 						; 0-5 are the double punctuations
.8a50	90 14		bcc $8a66			bcc 	_LCDoubles
.8a52	c9 20		cmp #$20			cmp 	#32 						; 16-31 are shifted punctuation from 64-91
.8a54	90 20		bcc $8a76			bcc 	_LCShiftPunc
.8a56	c9 40		cmp #$40			cmp 	#64 						; 32-64 are as stored, punc and digits
.8a58	90 2b		bcc $8a85			bcc 	_LCPunctuation
.8a5a	c9 80		cmp #$80			cmp 	#128 						; 64-127 are variable identifiers.
.8a5c	90 2d		bcc $8a8b			bcc 	_LCIdentifiers
.8a5e	c9 fe		cmp #$fe			cmp 	#254 						; 128-253 are tokenised words
.8a60	90 49		bcc $8aab			bcc 	_LCTokens
.8a62	4c 06 8b	jmp $8b06			jmp 	_LCData 					; 254-5 are data objects
.8a65					_LCExit:
.8a65	60		rts				rts
.8a66					_LCDoubles:
.8a66	48		pha				pha
.8a67	4a		lsr a				lsr 	a 							; put bit 2 into bit 1
.8a68	29 02		and #$02			and 	#2
.8a6a	09 3c		ora #$3c			ora 	#60 						; make < >
.8a6c	20 32 8b	jsr $8b32			jsr 	LCLWrite
.8a6f	68		pla				pla 								; restore, do lower bit
.8a70	29 03		and #$03			and 	#3
.8a72	09 3c		ora #$3c			ora 	#60
.8a74	80 0f		bra $8a85			bra		_LCPunctuation 				; print, increment, loop
.8a76					_LCShiftPunc:
.8a76	aa		tax				tax 								; save in X
.8a77	29 07		and #$07			and 	#7 							; lower 3 bits
.8a79	f0 02		beq $8a7d			beq 	_LCNoAdd
.8a7b	09 18		ora #$18			ora 	#24 						; adds $18 to it.
.8a7d					_LCNoAdd:
.8a7d	e0 18		cpx #$18			cpx 	#24 						; if >= 24 add $20
.8a7f	90 02		bcc $8a83			bcc 	_LCNoAdd2
.8a81	09 20		ora #$20			ora 	#32 						; adds $20
.8a83					_LCNoAdd2:
.8a83	09 40		ora #$40			ora 	#$40 						; shift into 64-127 range and fall through.
.8a85					_LCPunctuation:
.8a85	c8		iny				iny 								; consume character
.8a86	20 32 8b	jsr $8b32			jsr 	LCLWrite 					; write it out.
.8a89	80 bd		bra $8a48			bra 	_LCMainLoop 				; go round again.
.8a8b					_LCIdentifiers:
.8a8b	18		clc				clc 								; convert to physical address
.8a8c	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8a8e	85 37		sta $37				sta 	zTemp0+1
.8a90	c8		iny				iny
.8a91	b1 30		lda ($30),y			lda 	(codePtr),y
.8a93	85 36		sta $36				sta 	zTemp0
.8a95	c8		iny				iny
.8a96	5a		phy				phy 								; save position
.8a97	a0 07		ldy #$07			ldy 	#7 							; output the identifier.
.8a99					_LCOutIdentifier:
.8a99	c8		iny				iny
.8a9a	b1 36		lda ($36),y			lda 	(zTemp0),y
.8a9c	29 7f		and #$7f			and 	#$7F
.8a9e	20 60 8b	jsr $8b60			jsr 	LCLLowerCase
.8aa1	20 32 8b	jsr $8b32			jsr 	LCLWrite
.8aa4	b1 36		lda ($36),y			lda 	(zTemp0),y				 	; ends when bit 7 set.
.8aa6	10 f1		bpl $8a99			bpl 	_LCOutIdentifier
.8aa8	7a		ply				ply 								; restore position
.8aa9	80 9d		bra $8a48			bra 	_LCMainLoop
.8aab					_LCTokens:
.8aab	aa		tax				tax 								; token in X
.8aac	a9 38		lda #$38			lda 	#((KeywordSet2) & $FF)
.8aae	85 36		sta $36				sta 	0+zTemp0
.8ab0	a9 9a		lda #$9a			lda 	#((KeywordSet2) >> 8)
.8ab2	85 37		sta $37				sta 	1+zTemp0
.8ab4	e0 82		cpx #$82			cpx 	#$82
.8ab6	f0 16		beq $8ace			beq 	_LCUseShift
.8ab8	a9 f4		lda #$f4			lda 	#((KeywordSet1) & $FF)
.8aba	85 36		sta $36				sta 	0+zTemp0
.8abc	a9 99		lda #$99			lda 	#((KeywordSet1) >> 8)
.8abe	85 37		sta $37				sta 	1+zTemp0
.8ac0	e0 81		cpx #$81			cpx 	#$81
.8ac2	f0 0a		beq $8ace			beq 	_LCUseShift
.8ac4	a9 d2		lda #$d2			lda 	#((KeywordSet0) & $FF)
.8ac6	85 36		sta $36				sta 	0+zTemp0
.8ac8	a9 98		lda #$98			lda 	#((KeywordSet0) >> 8)
.8aca	85 37		sta $37				sta 	1+zTemp0
.8acc	80 01		bra $8acf			bra 	_LCNoShift
.8ace					_LCUseShift:
.8ace	c8		iny				iny
.8acf					_LCNoShift:
.8acf	20 41 8b	jsr $8b41			jsr 	LCCheckSpaceRequired 		; do we need a space ?
.8ad2	b1 30		lda ($30),y			lda 	(codePtr),y
.8ad4	aa		tax				tax 								; into X
.8ad5					_LCFindText:
.8ad5	ca		dex				dex
.8ad6	10 0e		bpl $8ae6			bpl 	_LCFoundText 				; found text.
.8ad8	b2 36		lda ($36)			lda 	(zTemp0) 					; length of text
.8ada	1a		inc a				inc 	a 							; one extra for size
.8adb	38		sec				sec 								; one extra for checksum
.8adc	65 36		adc $36				adc 	zTemp0 						; go to next token
.8ade	85 36		sta $36				sta 	zTemp0
.8ae0	90 f3		bcc $8ad5			bcc 	_LCFindText
.8ae2	e6 37		inc $37				inc 	zTemp0+1
.8ae4	80 ef		bra $8ad5			bra 	_LCFindText
.8ae6					_LCFoundText:
.8ae6	5a		phy				phy 								; save List position
.8ae7	b2 36		lda ($36)			lda 	(zTemp0)					; count to print
.8ae9	aa		tax				tax
.8aea	a0 02		ldy #$02			ldy 	#2
.8aec					_LCCopyToken:
.8aec	b1 36		lda ($36),y			lda 	(zTemp0),y
.8aee	20 60 8b	jsr $8b60			jsr 	LCLLowerCase
.8af1	20 32 8b	jsr $8b32			jsr 	LCLWrite
.8af4	c8		iny				iny
.8af5	ca		dex				dex
.8af6	d0 f4		bne $8aec			bne 	_LCCopyToken
.8af8	c9 28		cmp #$28			cmp 	#"(" 						; if last char not ( print a space
.8afa	f0 05		beq $8b01			beq 	_LCNoSpace
.8afc	a9 20		lda #$20			lda 	#' '
.8afe	20 32 8b	jsr $8b32			jsr 	LCLWrite
.8b01					_LCNoSpace:
.8b01	7a		ply				ply 								; restore position.
.8b02	c8		iny				iny 								; consume token
.8b03	4c 48 8a	jmp $8a48			jmp 	_LCMainLoop 				; and go around again.
.8b06					_LCData:
.8b06	48		pha				pha 								; save type $FE/$FF
.8b07	a2 24		ldx #$24			ldx 	#'$' 						; figure out $ or "
.8b09	c9 fe		cmp #$fe			cmp 	#$FE
.8b0b	f0 02		beq $8b0f			beq 	_LCHaveOpener
.8b0d	a2 22		ldx #$22			ldx 	#'"'
.8b0f					_LCHaveOpener:
.8b0f	8a		txa				txa 								; output prefix (# or ")
.8b10	20 32 8b	jsr $8b32			jsr 	LCLWrite
.8b13	c8		iny				iny 								; get count
.8b14	b1 30		lda ($30),y			lda 	(codePtr),y
.8b16	aa		tax				tax
.8b17	c8		iny				iny 								; point at first character
.8b18					_LCOutData:
.8b18	b1 30		lda ($30),y			lda 	(codePtr),y
.8b1a	c9 00		cmp #$00			cmp 	#0
.8b1c	f0 03		beq $8b21			beq 	_LCNoPrint
.8b1e	20 32 8b	jsr $8b32			jsr 	LCLWrite
.8b21					_LCNoPrint:
.8b21	c8		iny				iny
.8b22	ca		dex				dex
.8b23	d0 f3		bne $8b18			bne 	_LCOutData
.8b25	68		pla				pla 								; closing " required ?
.8b26	c9 ff		cmp #$ff			cmp 	#$FF
.8b28	d0 05		bne $8b2f			bne 	_LCNoQuote
.8b2a	a9 22		lda #$22			lda 	#'"'
.8b2c	20 32 8b	jsr $8b32			jsr 	LCLWrite
.8b2f					_LCNoQuote:
.8b2f	4c 48 8a	jmp $8a48			jmp 	_LCMainLoop
.8b32					LCLWrite:
.8b32	da		phx				phx
.8b33	ae 1c 07	ldx $071c			ldx 	tbOffset
.8b36	9d 28 07	sta $0728,x			sta 	tokenBuffer,x
.8b39	9e 29 07	stz $0729,x			stz 	tokenBuffer+1,x
.8b3c	ee 1c 07	inc $071c			inc 	tbOffset
.8b3f	fa		plx				plx
.8b40	60		rts				rts
.8b41					LCCheckSpaceRequired:
.8b41	ae 1c 07	ldx $071c			ldx 	tbOffset
.8b44	bd 27 07	lda $0727,x			lda 	tokenBuffer-1,x 			; previous character
.8b47	20 60 8b	jsr $8b60			jsr 	LCLLowerCase 				; saves a little effort
.8b4a	c9 30		cmp #$30			cmp 	#"0" 						; check if it was 0-9 A-Z a-z if so need space.
.8b4c	90 11		bcc $8b5f			bcc 	_LCCSRExit
.8b4e	c9 3a		cmp #$3a			cmp 	#"9"+1
.8b50	90 08		bcc $8b5a			bcc 	_LCCSRSpace
.8b52	c9 61		cmp #$61			cmp 	#"a"
.8b54	90 09		bcc $8b5f			bcc 	_LCCSRExit
.8b56	c9 7b		cmp #$7b			cmp 	#"z"+1
.8b58	b0 05		bcs $8b5f			bcs 	_LCCSRExit
.8b5a					_LCCSRSpace:
.8b5a	a9 20		lda #$20			lda 	#' '
.8b5c	20 32 8b	jsr $8b32			jsr 	LCLWrite
.8b5f					_LCCSRExit:
.8b5f	60		rts				rts
.8b60					LCLLowerCase:
.8b60	c9 41		cmp #$41			cmp 	#"A"
.8b62	90 06		bcc $8b6a			bcc 	_LCLLCOut
.8b64	c9 5b		cmp #$5b			cmp 	#"Z"+1
.8b66	b0 02		bcs $8b6a			bcs 	_LCLLCOut
.8b68	69 20		adc #$20			adc 	#$20
.8b6a					_LCLLCOut:
.8b6a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/procscan.asm

.8b6b					ProcedureScan:
.8b6b	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8b6d	85 30		sta $30				sta 	codePtr
.8b6f	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8b71	85 31		sta $31				sta 	codePtr+1
.8b73					_PSLoop:
.8b73	b2 30		lda ($30)			lda 	(codePtr)
.8b75	f0 42		beq $8bb9			beq 	_PSExit
.8b77	a0 03		ldy #$03			ldy 	#3 							; is it PROC ?
.8b79	b1 30		lda ($30),y			lda 	(codePtr),y
.8b7b	c9 98		cmp #$98			cmp 	#KWD_PROC
.8b7d	d0 2d		bne $8bac			bne 	_PSNext
.8b7f	c8		iny				iny 								; get the address of the record to zTemp0 and
.8b80	b1 30		lda ($30),y			lda 	(codePtr),y
.8b82	29 c0		and #$c0			and 	#$C0
.8b84	c9 40		cmp #$40			cmp 	#$40
.8b86	d0 32		bne $8bba			bne 	_PSSyntax
.8b88	b1 30		lda ($30),y			lda 	(codePtr),y
.8b8a	18		clc				clc
.8b8b	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8b8d	85 37		sta $37				sta 	zTemp0+1
.8b8f	c8		iny				iny 								; LSB
.8b90	b1 30		lda ($30),y			lda 	(codePtr),y
.8b92	85 36		sta $36				sta 	zTemp0
.8b94	c8		iny				iny 								; character after variable call.
.8b95	98		tya				tya 								; save Y offset at +7
.8b96	a0 07		ldy #$07			ldy 	#7
.8b98	91 36		sta ($36),y			sta 	(zTemp0),y
.8b9a	a9 18		lda #$18			lda 	#NSTProcedure 				; mark it as procedure
.8b9c	a0 02		ldy #$02			ldy 	#2
.8b9e	91 36		sta ($36),y			sta 	(zTemp0),y
.8ba0	a2 00		ldx #$00			ldx 	#0 							; copy code-Ptr in
.8ba2					_PSCopy:
.8ba2	b5 30		lda $30,x			lda 	safePtr,x
.8ba4	c8		iny				iny
.8ba5	91 36		sta ($36),y			sta 	(zTemp0),y
.8ba7	e8		inx				inx
.8ba8	e0 04		cpx #$04			cpx 	#4
.8baa	d0 f6		bne $8ba2			bne 	_PSCopy
.8bac					_PSNext:
.8bac	18		clc				clc
.8bad	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8baf	65 30		adc $30				adc 	codePtr
.8bb1	85 30		sta $30				sta 	codePtr
.8bb3	90 02		bcc $8bb7			bcc 	_CREExit
.8bb5	e6 31		inc $31				inc 	codePtr+1
.8bb7					_CREExit:
.8bb7	80 ba		bra $8b73			bra 	_PSLoop
.8bb9					_PSExit:
.8bb9	60		rts				rts
.8bba					_PSSyntax:
.8bba	4c 73 a4	jmp $a473			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/scanforward.asm

.8bbd					ScanForward:
.8bbd	85 36		sta $36				sta 	zTemp0 						; save XA as the two possible matches.
.8bbf	86 37		stx $37				stx 	zTemp0+1
.8bc1	64 38		stz $38				stz 	zTemp1 						; this is the structure count - goes up with WHILE/FOR
.8bc3					_ScanLoop:
.8bc3	b1 30		lda ($30),y			lda 	(codePtr),y
.8bc5	c8		iny				iny
.8bc6	a6 38		ldx $38				ldx 	zTemp1 						; if the count is > 0 cannot match as in substructure
.8bc8	d0 0e		bne $8bd8			bne 	_ScanGoNext
.8bca	c5 36		cmp $36				cmp 	zTemp0 						; see if either matches
.8bcc	f0 04		beq $8bd2			beq 	_ScanMatch
.8bce	c5 37		cmp $37				cmp 	zTemp0+1
.8bd0	d0 06		bne $8bd8			bne 	_ScanGoNext
.8bd2					_ScanMatch:
.8bd2	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if asked for EOL, backtrack.
.8bd4	d0 01		bne $8bd7			bne 	_ScanNotEndEOL
.8bd6	88		dey				dey
.8bd7					_ScanNotEndEOL:
.8bd7	60		rts				rts
.8bd8					_ScanGoNext:
.8bd8	c9 40		cmp #$40			cmp 	#$40 						; if 00-3F, punctuation characters, loop back
.8bda	90 e7		bcc $8bc3			bcc 	_ScanLoop
.8bdc	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if 40-82, skip one extra.
.8bde	90 18		bcc $8bf8			bcc 	_ScanSkipOne
.8be0	c9 fc		cmp #$fc			cmp 	#$FC 						; FC-FF are data skips
.8be2	b0 2f		bcs $8c13			bcs 	_ScanSkipData
.8be4	c9 96		cmp #$96			cmp 	#KWC_FIRST_STRUCTURE 		; structure keyword ?
.8be6	90 db		bcc $8bc3			bcc 	_ScanLoop 					; if not, ordinary keywords.
.8be8	c9 a1		cmp #$a1			cmp 	#KWC_LAST_STRUCTURE+1
.8bea	b0 d7		bcs $8bc3			bcs 	_ScanLoop
.8bec	c6 38		dec $38				dec 	zTemp1 						; decrement the sructure count
.8bee	c9 9b		cmp #$9b			cmp 	#KWC_FIRST_STRUCTURE_DEC 	; back if it is a dec structure (e.g. WEND/NEXT)
.8bf0	b0 d1		bcs $8bc3			bcs 	_ScanLoop
.8bf2	e6 38		inc $38				inc 	zTemp1 						; so it's an increment structure
.8bf4	e6 38		inc $38				inc 	zTemp1 						; twice to undo the dec
.8bf6	80 cb		bra $8bc3			bra 	_ScanLoop
.8bf8					_ScanSkipOne:
.8bf8	c8		iny				iny 								; consume the extra one.
.8bf9	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if not EOL loop back
.8bfb	d0 c6		bne $8bc3			bne 	_ScanLoop
.8bfd	18		clc				clc
.8bfe	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8c00	65 30		adc $30				adc 	codePtr
.8c02	85 30		sta $30				sta 	codePtr
.8c04	90 02		bcc $8c08			bcc 	_CREExit
.8c06	e6 31		inc $31				inc 	codePtr+1
.8c08					_CREExit:
.8c08	a0 03		ldy #$03			ldy 	#3 							; scan start position.
.8c0a	b2 30		lda ($30)			lda 	(codePtr)
.8c0c	d0 b5		bne $8bc3			bne 	_ScanLoop 					; if not zero, more to scan
.8c0e	a9 13		lda #$13		lda	#19
.8c10	4c 4b 8c	jmp $8c4b		jmp	ErrorHandler
.8c13					_ScanSkipData:
.8c13	88		dey				dey 								; point at data token
.8c14	c8		iny				iny
.8c15	98		tya				tya
.8c16	38		sec				sec
.8c17	71 30		adc ($30),y			adc 	(codePtr),y
.8c19	a8		tay				tay
.8c1a	80 a7		bra $8bc3			bra 	_ScanLoop

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/while.asm

.8c1c					Command_WHILE:
.8c1c	5a		phy				phy 								; save position of the test
.8c1d	a2 00		ldx #$00			ldx 	#0
.8c1f	20 f2 96	jsr $96f2			jsr 	EvaluateNumber 				; work out the number
.8c22	20 ce 97	jsr $97ce			jsr 	NSMIsZero 					; check if zero
.8c25	f0 0e		beq $8c35			beq 	_WHExitLoop 				; if so exit the loop
.8c27	98		tya				tya 								; position *after* test.
.8c28	7a		ply				ply 								; restore position before test, at WHILE
.8c29	88		dey				dey
.8c2a	48		pha				pha 								; push after test on the stack
.8c2b	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; allocate 6 bytes on the return stack.
.8c2d	20 db 97	jsr $97db			jsr 	StackOpen
.8c30	20 0d 98	jsr $980d			jsr 	STKSaveCodePosition 		; save loop position - where the test value is.
.8c33	7a		ply				ply 								; restore the position *after* the test
.8c34	60		rts				rts
.8c35					_WHExitLoop:
.8c35	68		pla				pla 								; throw post loop position
.8c36	a9 a0		lda #$a0			lda 	#KWD_WEND 					; scan forward past WEND
.8c38	aa		tax				tax
.8c39	20 bd 8b	jsr $8bbd			jsr 	ScanForward
.8c3c	60		rts				rts
.8c3d					Command_WEND:
.8c3d	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; check WHILE is TOS
.8c3f	a2 10		ldx #$10			ldx 	#ERRID_WHILE 				; this error
.8c41	20 02 98	jsr $9802			jsr 	StackCheckFrame
.8c44	20 1e 98	jsr $981e			jsr 	STKLoadCodePosition 		; loop back
.8c47	20 f4 97	jsr $97f4			jsr 	StackClose		 			; erase the frame
.8c4a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/charcheck.asm

.9e91					CheckRightBracket:
.9e91	b1 30		lda ($30),y			lda 	(codePtr),y
.9e93	c8		iny				iny
.9e94	c9 29		cmp #$29			cmp 	#KWD_RPAREN 						; exit if matches
.9e96	d0 0f		bne $9ea7			bne 	CNAFail
.9e98	60		rts				rts
.9e99					CheckComma:
.9e99	b1 30		lda ($30),y			lda 	(codePtr),y
.9e9b	c8		iny				iny
.9e9c	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 						; exit if matches
.9e9e	d0 07		bne $9ea7			bne 	CNAFail
.9ea0	60		rts				rts
.9ea1					CheckNextA:
.9ea1	d1 30		cmp ($30),y			cmp 	(codePtr),y
.9ea3	d0 02		bne $9ea7			bne 	CNAFail
.9ea5	c8		iny				iny 								; skip character
.9ea6	60		rts				rts 								; and exit
.9ea7					CNAFail:
.9ea7	4c 73 a4	jmp $a473			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/errors.asm

.8c4b					ErrorHandler:
.8c4b	a8		tay				tay 								; find the error text
.8c4c	f0 49		beq $8c97			beq 	_EHEnd
.8c4e	a2 00		ldx #$00			ldx 	#0
.8c50	a9 8c		lda #$8c			lda 	#((ErrorText) & $FF)
.8c52	85 36		sta $36				sta 	0+zTemp0
.8c54	a9 a4		lda #$a4			lda 	#((ErrorText) >> 8)
.8c56	85 37		sta $37				sta 	1+zTemp0
.8c58					_EHFind:
.8c58	88		dey				dey 								; found the error text ?
.8c59	f0 0e		beq $8c69			beq 	_EHFound
.8c5b					_EHFindZero:
.8c5b	b2 36		lda ($36)			lda 	(zTemp0) 					; find the next error
.8c5d	e6 36		inc $36				inc 	zTemp0
.8c5f	d0 02		bne $8c63			bne 	_EHFNoCarry
.8c61	e6 37		inc $37				inc 	zTemp0+1
.8c63					_EHFNoCarry:
.8c63	c9 00		cmp #$00			cmp 	#0
.8c65	d0 f4		bne $8c5b			bne 	_EHFindZero
.8c67	80 ef		bra $8c58			bra 	_EHFind
.8c69					_EHFound:
.8c69	a5 36		lda $36				lda 	zTemp0 						; print message
.8c6b	a6 37		ldx $37				ldx 	zTemp0+1
.8c6d	20 a4 8c	jsr $8ca4			jsr 	PrintStringXA
.8c70	a0 01		ldy #$01			ldy 	#1 							; if line number zero don't print i
.8c72	b1 30		lda ($30),y			lda 	(codePtr),y
.8c74	d0 05		bne $8c7b			bne 	_EHAtMsg
.8c76	c8		iny				iny
.8c77	b1 30		lda ($30),y			lda 	(codePtr),y
.8c79	f0 17		beq $8c92			beq 	_EHCREnd
.8c7b					_EHAtMsg:
.8c7b	a2 8c		ldx #$8c			ldx 	#_AtMsg >> 8 				; print " at "
.8c7d	a9 9a		lda #$9a			lda 	#_AtMsg & $FF
.8c7f	20 a4 8c	jsr $8ca4			jsr 	PrintStringXA
.8c82	a0 01		ldy #$01			ldy 	#1 							; line number into XA
.8c84	b1 30		lda ($30),y			lda 	(codePtr),y
.8c86	48		pha				pha
.8c87	c8		iny				iny
.8c88	b1 30		lda ($30),y			lda 	(codePtr),y
.8c8a	aa		tax				tax
.8c8b	68		pla				pla
.8c8c	20 ed 9f	jsr $9fed			jsr 	ConvertInt16 				; convert XA to string
.8c8f	20 a4 8c	jsr $8ca4			jsr 	PrintStringXA 				; and print it.
.8c92					_EHCREnd:
.8c92	a9 0d		lda #$0d			lda 	#13 						; new line
.8c94	20 e1 a6	jsr $a6e1			jsr 	EXTPrintCharacter
.8c97					_EHEnd:
.8c97	4c 67 84	jmp $8467			jmp 	WarmStart
>8c9a	20 61 74 20 6c 69 6e 65		_AtMsg:	.text 	" at line ",0
>8ca2	20 00
.8ca4					PrintStringXA:
.8ca4	5a		phy				phy
.8ca5	86 37		stx $37				stx 	zTemp0+1
.8ca7	85 36		sta $36				sta 	zTemp0
.8ca9	a0 00		ldy #$00			ldy 	#0
.8cab					_PSXALoop:
.8cab	b1 36		lda ($36),y			lda 	(zTemp0),y
.8cad	f0 06		beq $8cb5			beq 	_PSXAExit
.8caf	20 e1 a6	jsr $a6e1			jsr 	EXTPrintCharacter
.8cb2	c8		iny				iny
.8cb3	80 f6		bra $8cab			bra 	_PSXALoop
.8cb5					_PSXAExit:
.8cb5	7a		ply				ply
.8cb6	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/compare.asm

.8cb7					UnaryTrue:
.8cb7	fa		plx				plx
.8cb8					ReturnTrue:
.8cb8	a9 01		lda #$01			lda 	#1  						; set to 1
.8cba	20 a0 97	jsr $97a0			jsr 	NSMSetByte
.8cbd	a9 80		lda #$80			lda 	#$80 						; set sign flag, so it is -1
.8cbf	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8cc2	60		rts				rts
.8cc3					UnaryFalse:
.8cc3	fa		plx				plx
.8cc4					ReturnFalse:
.8cc4	4c 9e 97	jmp $979e			jmp 	NSMSetZero 					; set it all to zero
.8cc7					BinaryCompareEqual:
.8cc7	fa		plx				plx
.8cc8	20 03 8d	jsr $8d03			jsr 	CompareBaseCode
.8ccb	c9 00		cmp #$00			cmp 	#0
.8ccd	f0 e9		beq $8cb8			beq 	ReturnTrue
.8ccf	80 f3		bra $8cc4			bra 	ReturnFalse
.8cd1					BinaryCompareLess:
.8cd1	fa		plx				plx
.8cd2	20 03 8d	jsr $8d03			jsr 	CompareBaseCode
.8cd5	c9 ff		cmp #$ff			cmp 	#$FF
.8cd7	f0 df		beq $8cb8			beq 	ReturnTrue
.8cd9	80 e9		bra $8cc4			bra 	ReturnFalse
.8cdb					BinaryCompareGreater:
.8cdb	fa		plx				plx
.8cdc	20 03 8d	jsr $8d03			jsr 	CompareBaseCode
.8cdf	c9 01		cmp #$01			cmp 	#1
.8ce1	f0 d5		beq $8cb8			beq 	ReturnTrue
.8ce3	80 df		bra $8cc4			bra 	ReturnFalse
.8ce5					BinaryCompareNotEqual:
.8ce5	fa		plx				plx
.8ce6	20 03 8d	jsr $8d03			jsr 	CompareBaseCode
.8ce9	c9 00		cmp #$00			cmp 	#0
.8ceb	d0 cb		bne $8cb8			bne 	ReturnTrue
.8ced	80 d5		bra $8cc4			bra 	ReturnFalse
.8cef					BinaryCompareLessEqual:
.8cef	fa		plx				plx
.8cf0	20 03 8d	jsr $8d03			jsr 	CompareBaseCode
.8cf3	c9 01		cmp #$01			cmp 	#1
.8cf5	d0 c1		bne $8cb8			bne 	ReturnTrue
.8cf7	80 cb		bra $8cc4			bra 	ReturnFalse
.8cf9					BinaryCompareGreaterEqual:
.8cf9	fa		plx				plx
.8cfa	20 03 8d	jsr $8d03			jsr 	CompareBaseCode
.8cfd	c9 ff		cmp #$ff			cmp 	#$FF
.8cff	d0 b7		bne $8cb8			bne 	ReturnTrue
.8d01	80 c1		bra $8cc4			bra 	ReturnFalse
.8d03					CompareBaseCode:
.8d03	20 64 91	jsr $9164			jsr 	DereferenceTopTwo 			; make both values if references.
.8d06	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if either is a string.
.8d09	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8d0c	29 10		and #$10			and 	#NSTString
.8d0e	d0 40		bne $8d50			bne 	_CBCString
.8d10	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check both are integers
.8d13	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8d16	d0 3b		bne $8d53			bne 	_CBCFloat
.8d18	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8d1b	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8d1e	29 08		and #$08			and 	#NSTFloat
.8d20	d0 31		bne $8d53			bne 	_CBCFloat
.8d22	20 56 8d	jsr $8d56			jsr 	CompareFixMinusZero
.8d25	e8		inx				inx
.8d26	20 56 8d	jsr $8d56			jsr 	CompareFixMinusZero
.8d29	ca		dex				dex
.8d2a	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; are the signs different ?
.8d2d	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.8d30	10 0b		bpl $8d3d			bpl 	_CDCSameSign
.8d32	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; if first one is -ve
.8d35	30 16		bmi $8d4d			bmi 	_CBCLess 					; return $FF
.8d37					_CBCGreater:
.8d37	a9 01		lda #$01			lda 	#1
.8d39	60		rts				rts
.8d3a					_CBCEqual:
.8d3a	a9 00		lda #$00			lda 	#0
.8d3c	60		rts				rts
.8d3d					_CDCSameSign:
.8d3d	20 66 8e	jsr $8e66			jsr 	SubTopTwoStack 				; unsigned subtract
.8d40	20 ce 97	jsr $97ce			jsr 	NSMIsZero 					; or the mantissa together
.8d43	f0 f5		beq $8d3a			beq 	_CBCEqual 					; -0 == 0
.8d45	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; sign of the result. if +ve return $01 else return $FF
.8d48	5d 01 06	eor $0601,x			eor 	NSStatus+1,x 				; however if both were -ve this is inverted
.8d4b	10 ea		bpl $8d37			bpl 	_CBCGreater
.8d4d					_CBCLess:
.8d4d	a9 ff		lda #$ff			lda 	#$FF
.8d4f	60		rts				rts
.8d50					_CBCString:
.8d50	4c bc 8d	jmp $8dbc			jmp 	CompareStrings
.8d53					_CBCFloat:
.8d53	4c e9 a0	jmp $a0e9			jmp 	CompareFloat
.8d56					CompareFixMinusZero:
.8d56	20 ce 97	jsr $97ce			jsr 	NSMIsZero
.8d59	d0 03		bne $8d5e			bne 	_CFXMZNotZero
.8d5b	9e 00 06	stz $0600,x			stz 	NSStatus,x
.8d5e					_CFXMZNotZero:
.8d5e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/concat.asm

.8d5f					StringConcat:
.8d5f	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check both strings
.8d62	3d 01 06	and $0601,x			and 	NSStatus+1,x
.8d65	29 18		and #$18			and 	#NSBTypeMask
.8d67	c9 10		cmp #$10			cmp 	#NSTString
.8d69	d0 4e		bne $8db9			bne		_SCType
.8d6b	64 38		stz $38				stz 	zTemp1 						; counting total length
.8d6d	e8		inx				inx
.8d6e	20 8c 8d	jsr $8d8c			jsr 	_SCSetupZ0 					; setup for second
.8d71	20 97 8d	jsr $8d97			jsr 	_SCLengthZ0 				; length for second
.8d74	ca		dex				dex
.8d75	20 8c 8d	jsr $8d8c			jsr 	_SCSetupZ0 					; setup for first
.8d78	20 97 8d	jsr $8d97			jsr 	_SCLengthZ0 				; length for first
.8d7b	a5 38		lda $38				lda 	zTemp1 						; allocate memory
.8d7d	20 94 a6	jsr $a694			jsr 	StringTempAllocate
.8d80	20 aa 8d	jsr $8daa			jsr 	_SCCopy 					; copy first out, using zTemp0 from above
.8d83	e8		inx				inx
.8d84	20 8c 8d	jsr $8d8c			jsr 	_SCSetupZ0 					; copy second out
.8d87	20 aa 8d	jsr $8daa			jsr 	_SCCopy
.8d8a	ca		dex				dex
.8d8b	60		rts				rts
.8d8c					_SCSetupZ0:
.8d8c	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.8d8f	85 36		sta $36				sta 	zTemp0
.8d91	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8d94	85 37		sta $37				sta 	zTemp0+1
.8d96	60		rts				rts
.8d97					_SCLengthZ0:
.8d97	5a		phy				phy
.8d98	a0 00		ldy #$00			ldy 	#0
.8d9a					_SCLenLoop:
.8d9a	b1 36		lda ($36),y			lda 	(zTemp0),y
.8d9c	f0 0a		beq $8da8			beq 	_SCLExit
.8d9e	c8		iny				iny
.8d9f	e6 38		inc $38				inc 	zTemp1
.8da1	10 f7		bpl $8d9a			bpl		_SCLenLoop
.8da3	a9 09		lda #$09		lda	#9
.8da5	4c 4b 8c	jmp $8c4b		jmp	ErrorHandler
.8da8					_SCLExit:
.8da8	7a		ply				ply
.8da9	60		rts				rts
.8daa					_SCCopy:
.8daa	5a		phy				phy
.8dab	a0 00		ldy #$00			ldy 	#0
.8dad					_SCCopyLoop:
.8dad	b1 36		lda ($36),y			lda 	(zTemp0),y
.8daf	f0 06		beq $8db7			beq 	_SCCExit
.8db1	20 d2 a6	jsr $a6d2			jsr 	StringTempWrite
.8db4	c8		iny				iny
.8db5	80 f6		bra $8dad			bra 	_SCCopyLoop
.8db7					_SCCExit:
.8db7	7a		ply				ply
.8db8	60		rts				rts
.8db9					_SCType:
.8db9	4c 7d a4	jmp $a47d			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/divide.asm

.9eaa					IntegerDivide:
.9eaa	fa		plx				plx
.9eab	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.9eae	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.9eb1	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9eb2	0a		asl a				asl 	a
.9eb3	10 05		bpl $9eba			bpl 	_NotRef
.9eb5	48		pha				pha
.9eb6	20 64 91	jsr $9164			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9eb9	68		pla				pla
.9eba					_NotRef:
.9eba	0a		asl a				asl 	a
.9ebb	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9ebd	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9ec0	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.9ec3	f0 03		beq $9ec8			beq 	_IntegerCode 				; if clear, then we have two integers
.9ec5	4c 7d a4	jmp $a47d			jmp 	TypeError 					; anything else, type mismatch.
.9ec8					_IntegerCode:
.9ec8	20 ea 9e	jsr $9eea			jsr 	CheckDivideZero 			; do div zero check
.9ecb	20 22 9f	jsr $9f22			jsr 	Int32Divide 				; do the division
.9ece	20 df 9f	jsr $9fdf			jsr 	CalculateSign 				; calculate result sign
.9ed1					NSMCopyPlusTwoToZero:
.9ed1	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.9ed4	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.9ed7	bd 12 06	lda $0612,x			lda 	NSMantissa1+2,x
.9eda	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9edd	bd 1a 06	lda $061a,x			lda 	NSMantissa2+2,x
.9ee0	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.9ee3	bd 22 06	lda $0622,x			lda 	NSMantissa3+2,x
.9ee6	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.9ee9	60		rts				rts
.9eea					CheckDivideZero:
.9eea	e8		inx				inx
.9eeb	20 ce 97	jsr $97ce			jsr 	NSMIsZero
.9eee	f0 02		beq $9ef2			beq 	_CDVError
.9ef0	ca		dex				dex
.9ef1	60		rts				rts
.9ef2					_CDVError:
.9ef2	a9 03		lda #$03		lda	#3
.9ef4	4c 4b 8c	jmp $8c4b		jmp	ErrorHandler
.9ef7					IntegerModulus:
.9ef7	fa		plx				plx
.9ef8	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.9efb	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.9efe	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9eff	0a		asl a				asl 	a
.9f00	10 05		bpl $9f07			bpl 	_NotRef
.9f02	48		pha				pha
.9f03	20 64 91	jsr $9164			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9f06	68		pla				pla
.9f07					_NotRef:
.9f07	0a		asl a				asl 	a
.9f08	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9f0a	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9f0d	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.9f10	f0 03		beq $9f15			beq 	_IntegerCode 				; if clear, then we have two integers
.9f12	4c 7d a4	jmp $a47d			jmp 	TypeError 					; anything else, type mismatch.
.9f15					_IntegerCode:
.9f15	20 ea 9e	jsr $9eea			jsr 	CheckDivideZero 			; do div zero check
.9f18	20 22 9f	jsr $9f22			jsr 	Int32Divide 				; do the division
.9f1b	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; clear the sign bit.
.9f1e	5e 00 06	lsr $0600,x			lsr 	NSStatus,x
.9f21	60		rts				rts
.9f22					Int32Divide:
.9f22	48		pha				pha 								; save AXY
.9f23	5a		phy				phy
.9f24	20 75 97	jsr $9775			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.9f27	20 9a 97	jsr $979a			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.9f2a	a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.9f2c					_I32DivideLoop:
.9f2c	e8		inx				inx
.9f2d	e8		inx				inx
.9f2e	20 b3 97	jsr $97b3			jsr 	NSMShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.9f31	ca		dex				dex
.9f32	ca		dex				dex
.9f33	20 b4 97	jsr $97b4			jsr 	NSMRotateLeft
.9f36	20 62 9f	jsr $9f62			jsr 	DivideCheckSubtract 		; check if subtract possible
.9f39	90 03		bcc $9f3e			bcc 	_I32DivideNoCarryIn
.9f3b	fe 0a 06	inc $060a,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.9f3e					_I32DivideNoCarryIn:
.9f3e	88		dey				dey 								; loop round till division completed.
.9f3f	d0 eb		bne $9f2c			bne 	_I32DivideLoop
.9f41	7a		ply				ply 								; restore AXY and exit
.9f42	68		pla				pla
.9f43	60		rts				rts
.9f44					Int32ShiftDivide:
.9f44	48		pha				pha 								; save AY
.9f45	5a		phy				phy
.9f46	e8		inx				inx 								; clear S[X+2]
.9f47	e8		inx				inx
.9f48	20 9e 97	jsr $979e			jsr 	NSMSetZero
.9f4b	ca		dex				dex
.9f4c	ca		dex				dex
.9f4d	a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.9f4f					_I32SDLoop:
.9f4f	20 62 9f	jsr $9f62			jsr 	DivideCheckSubtract 		; check if subtract possible
.9f52	e8		inx				inx
.9f53	e8		inx				inx
.9f54	20 b4 97	jsr $97b4			jsr 	NSMRotateLeft				; shift 64 bit FPA left, rotating carry in
.9f57	ca		dex				dex
.9f58	ca		dex				dex
.9f59	20 b4 97	jsr $97b4			jsr 	NSMRotateLeft
.9f5c	88		dey				dey 	 							; do 31 times
.9f5d	d0 f0		bne $9f4f			bne 	_I32SDLoop
.9f5f	7a		ply				ply 								; restore AY and exit
.9f60	68		pla				pla
.9f61	60		rts				rts
.9f62					DivideCheckSubtract:
.9f62	20 66 8e	jsr $8e66			jsr 	SubTopTwoStack 				; subtract Stack[X+1] from Stack[X+0]
.9f65	b0 04		bcs $9f6b			bcs 	_DCSExit 					; if carry set, then could do, exit
.9f67	20 40 8e	jsr $8e40			jsr 	AddTopTwoStack 				; add it back in
.9f6a	18		clc				clc 								; and return False
.9f6b					_DCSExit:
.9f6b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/multiply.asm

.9f6c					MulInteger:
.9f6c	fa		plx				plx
.9f6d	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.9f70	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.9f73	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9f74	0a		asl a				asl 	a
.9f75	10 05		bpl $9f7c			bpl 	_NotRef
.9f77	48		pha				pha
.9f78	20 64 91	jsr $9164			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9f7b	68		pla				pla
.9f7c					_NotRef:
.9f7c	0a		asl a				asl 	a 							; put MSB of type into A:7
.9f7d	30 0b		bmi $9f8a			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.9f7f	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9f82	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.9f85	f0 06		beq $9f8d			beq 	_IntegerCode 				; if clear, then we have two integers
.9f87	4c c0 a1	jmp $a1c0			jmp 	FloatingPointMultiply 							; otherwise at least one float.
.9f8a					_StringData:
.9f8a	4c 87 a4	jmp $a487			jmp 	NotDoneError							; at least one string - don't know both are strings.
.9f8d					_IntegerCode:
.9f8d	20 9a 9f	jsr $9f9a			jsr 	MultiplyShort
.9f90	c9 00		cmp #$00			cmp 	#0
.9f92	f0 05		beq $9f99			beq 	_MIExit
.9f94	a9 04		lda #$04		lda	#4
.9f96	4c 4b 8c	jmp $8c4b		jmp	ErrorHandler
.9f99					_MIExit:
.9f99	60		rts				rts
.9f9a					MultiplyShort:
.9f9a	5a		phy				phy 								; save Y
.9f9b	20 75 97	jsr $9775			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.9f9e	20 9a 97	jsr $979a			jsr 	NSMSetZeroMantissaOnly 		; set mantissa S[X] to zero
.9fa1	a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.9fa3					_I32MLoop:
.9fa3	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.9fa6	1d 12 06	ora $0612,x			ora 	NSMantissa1+2,x
.9fa9	1d 1a 06	ora $061a,x			ora 	NSMantissa2+2,x
.9fac	1d 22 06	ora $0622,x			ora 	NSMantissa3+2,x
.9faf	f0 28		beq $9fd9			beq 	_I32MExit 					; exit if zero
.9fb1	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.9fb4	29 01		and #$01			and 	#1
.9fb6	f0 0e		beq $9fc6			beq 	_I32MNoAdd
.9fb8	20 40 8e	jsr $8e40			jsr 	AddTopTwoStack 				; if so add S[X+1] to S[X+0]
.9fbb	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.9fbe	10 06		bpl $9fc6			bpl 	_I32MNoAdd
.9fc0					_I32ShiftRight:
.9fc0	20 c1 97	jsr $97c1			jsr 	NSMShiftRight 				; shift S[X] right
.9fc3	c8		iny				iny 								; increment shift count
.9fc4	80 0a		bra $9fd0			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.9fc6					_I32MNoAdd:
.9fc6	3c 21 06	bit $0621,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.9fc9	70 f5		bvs $9fc0			bvs 	_I32ShiftRight 				; instead.
.9fcb	e8		inx				inx
.9fcc	20 b3 97	jsr $97b3			jsr 	NSMShiftLeft 				; shift additive S[X+1] left
.9fcf	ca		dex				dex
.9fd0					_I32MShiftUpper:
.9fd0	e8		inx				inx 								; shift S[X+2] right
.9fd1	e8		inx				inx
.9fd2	20 c1 97	jsr $97c1			jsr 	NSMShiftRight
.9fd5	ca		dex				dex
.9fd6	ca		dex				dex
.9fd7	80 ca		bra $9fa3			bra 	_I32MLoop 					; try again.
.9fd9					_I32MExit:
.9fd9	20 df 9f	jsr $9fdf			jsr 	CalculateSign
.9fdc	98		tya				tya 								; shift in A
.9fdd	7a		ply				ply 								; restore Y and exit
.9fde	60		rts				rts
.9fdf					CalculateSign:
.9fdf	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.9fe2	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; shift result left
.9fe5	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.9fe8	0a		asl a				asl 	a 							; shift bit 7 into carry
.9fe9	7e 00 06	ror $0600,x			ror 	NSStatus,x 					; shift right into status byte.
.9fec	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/scompare.asm

.8dbc					CompareStrings:
.8dbc	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check both are strings
.8dbf	3d 01 06	and $0601,x			and 	NSStatus+1,x
.8dc2	29 10		and #$10			and 	#NSBIsString
.8dc4	f0 2c		beq $8df2			beq 	_CSTypeError
.8dc6	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy string addresses to zTemp0/1
.8dc9	85 36		sta $36				sta 	zTemp0
.8dcb	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8dce	85 37		sta $37				sta 	zTemp0+1
.8dd0	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.8dd3	85 38		sta $38				sta 	zTemp1
.8dd5	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.8dd8	85 39		sta $39				sta 	zTemp1+1
.8dda	5a		phy				phy 								; save Y so we can access strings
.8ddb	a0 ff		ldy #$ff			ldy 	#$FF 						; -1 for pre increment.
.8ddd					_CSLoop:
.8ddd	c8		iny				iny
.8dde	b1 36		lda ($36),y			lda 	(zTemp0),y 					; check if they are the same
.8de0	d1 38		cmp ($38),y			cmp 	(zTemp1),y
.8de2	d0 06		bne $8dea			bne 	_CSDifferent
.8de4	c9 00		cmp #$00			cmp 	#0 							; reached end ?
.8de6	d0 f5		bne $8ddd			bne 	_CSLoop 					; still comparing
.8de8					_CSExit:
.8de8	7a		ply				ply 								; reached end, return zero in A from EOS
.8de9	60		rts				rts
.8dea					_CSDifferent:
.8dea	a9 ff		lda #$ff			lda 	#255 						; if < return $FF
.8dec	90 fa		bcc $8de8			bcc		_CSExit
.8dee	a9 01		lda #$01			lda 	#1 							; otherwise return 1.
.8df0	80 f6		bra $8de8			bra 	_CSExit
.8df2					_CSTypeError:
.8df2	4c 7d a4	jmp $a47d			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/shifts.asm

.8df5					ShiftLeft:
.8df5	38		sec				sec
.8df6	80 01		bra $8df9			bra 	ShiftMain
.8df8					ShiftRight:
.8df8	18		clc				clc
.8df9					ShiftMain:
.8df9	fa		plx				plx 								; restore X
.8dfa	08		php				php 								; save direction
.8dfb	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8dfe	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8e01	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8e02	0a		asl a				asl 	a
.8e03	10 05		bpl $8e0a			bpl 	_NotRef
.8e05	48		pha				pha
.8e06	20 64 91	jsr $9164			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8e09	68		pla				pla
.8e0a					_NotRef:
.8e0a	0a		asl a				asl 	a
.8e0b	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8e0d	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8e10	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8e13	f0 03		beq $8e18			beq 	_IntegerCode 				; if clear, then we have two integers
.8e15	4c 7d a4	jmp $a47d			jmp 	TypeError 					; anything else, type mismatch.
.8e18					_IntegerCode:
.8e18	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; check number < 32
.8e1b	29 e0		and #$e0			and 	#$E0
.8e1d	1d 11 06	ora $0611,x			ora 	NSMantissa1+1,x
.8e20	1d 19 06	ora $0619,x			ora 	NSMantissa2+1,x
.8e23	1d 21 06	ora $0621,x			ora 	NSMantissa3+1,x
.8e26	d0 13		bne $8e3b			bne 	_SMExit0 					; if >= 32 it will always return zero.
.8e28					_SMLoop:
.8e28	de 09 06	dec $0609,x			dec 	NSMantissa0+1,x 			; predecrement, could do << 0
.8e2b	30 11		bmi $8e3e			bmi 	_SMExit 					; exit if done.
.8e2d	28		plp				plp 								; restore direcition setting
.8e2e	08		php				php
.8e2f	90 05		bcc $8e36			bcc 	_SMRight
.8e31	20 b3 97	jsr $97b3			jsr 	NSMShiftLeft 				; shift left if CS
.8e34	80 f2		bra $8e28			bra 	_SMLoop
.8e36					_SMRight:
.8e36	20 c1 97	jsr $97c1			jsr 	NSMShiftRight 				; shift right if CC
.8e39	80 ed		bra $8e28			bra 	_SMLoop
.8e3b					_SMExit0:
.8e3b	20 9e 97	jsr $979e			jsr 	NSMSetZero 					; return zero.
.8e3e					_SMExit:
.8e3e	28		plp				plp 								; throw direction
.8e3f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/simple.asm

.8e40					AddTopTwoStack:
.8e40	18		clc				clc
.8e41	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8e44	7d 09 06	adc $0609,x			adc 		NSMantissa0+1,x
.8e47	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8e4a	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8e4d	7d 11 06	adc $0611,x			adc 		NSMantissa1+1,x
.8e50	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8e53	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8e56	7d 19 06	adc $0619,x			adc 		NSMantissa2+1,x
.8e59	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8e5c	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8e5f	7d 21 06	adc $0621,x			adc 		NSMantissa3+1,x
.8e62	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8e65	60		rts				rts
.8e66					SubTopTwoStack:
.8e66	38		sec				sec
.8e67	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8e6a	fd 09 06	sbc $0609,x			sbc 		NSMantissa0+1,x
.8e6d	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8e70	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8e73	fd 11 06	sbc $0611,x			sbc 		NSMantissa1+1,x
.8e76	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8e79	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8e7c	fd 19 06	sbc $0619,x			sbc 		NSMantissa2+1,x
.8e7f	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8e82	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8e85	fd 21 06	sbc $0621,x			sbc 		NSMantissa3+1,x
.8e88	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8e8b	60		rts				rts
.8e8c					AddInteger:
.8e8c	fa		plx				plx
.8e8d	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8e90	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8e93	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8e94	0a		asl a				asl 	a
.8e95	10 05		bpl $8e9c			bpl 	_NotRef
.8e97	48		pha				pha
.8e98	20 64 91	jsr $9164			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8e9b	68		pla				pla
.8e9c					_NotRef:
.8e9c	0a		asl a				asl 	a 							; put MSB of type into A:7
.8e9d	30 0b		bmi $8eaa			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.8e9f	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8ea2	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8ea5	f0 06		beq $8ead			beq 	_IntegerCode 				; if clear, then we have two integers
.8ea7	4c 48 a0	jmp $a048			jmp 	FloatingPointAdd 							; otherwise at least one float.
.8eaa					_StringData:
.8eaa	4c 5f 8d	jmp $8d5f			jmp 	StringConcat							; at least one string - don't know both are strings.
.8ead					_IntegerCode:
.8ead					AddCode:
.8ead	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.8eb0	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.8eb3	10 8b		bpl $8e40			bpl 	AddTopTwoStack
.8eb5	20 66 8e	jsr $8e66			jsr 	SubTopTwoStack 				; do a physical subtraction
.8eb8	3c 20 06	bit $0620,x			bit 	NSMantissa3,x 				; result is +ve, okay
.8ebb	10 09		bpl $8ec6			bpl 	_AddExit
.8ebd	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; sign is that of 2nd value
.8ec0	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8ec3	20 53 97	jsr $9753			jsr 	NSMNegateMantissa 			; negate the mantissa and exit
.8ec6					_AddExit:
.8ec6	60		rts				rts
.8ec7					SubInteger:
.8ec7	fa		plx				plx
.8ec8	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8ecb	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8ece	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8ecf	0a		asl a				asl 	a
.8ed0	10 05		bpl $8ed7			bpl 	_NotRef
.8ed2	48		pha				pha
.8ed3	20 64 91	jsr $9164			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8ed6	68		pla				pla
.8ed7					_NotRef:
.8ed7	0a		asl a				asl 	a 							; put MSB of type into A:7
.8ed8	30 0b		bmi $8ee5			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.8eda	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8edd	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8ee0	f0 06		beq $8ee8			beq 	_IntegerCode 				; if clear, then we have two integers
.8ee2	4c 4d a0	jmp $a04d			jmp 	FloatingPointSub 							; otherwise at least one float.
.8ee5					_StringData:
.8ee5	4c 87 a4	jmp $a487			jmp 	NotDoneError							; at least one string - don't know both are strings.
.8ee8					_IntegerCode:
.8ee8	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; negate the second value.
.8eeb	49 80		eor #$80			eor 	#$80
.8eed	9d 01 06	sta $0601,x			sta 	NSStatus+1,x
.8ef0	80 bb		bra $8ead			bra 	AddCode 					; and do the same code as add.
.8ef2					AndInteger:
.8ef2	fa		plx				plx
.8ef3	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8ef6	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8ef9	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8efa	0a		asl a				asl 	a
.8efb	10 05		bpl $8f02			bpl 	_NotRef
.8efd	48		pha				pha
.8efe	20 64 91	jsr $9164			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8f01	68		pla				pla
.8f02					_NotRef:
.8f02	0a		asl a				asl 	a
.8f03	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8f05	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8f08	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8f0b	f0 03		beq $8f10			beq 	_IntegerCode 				; if clear, then we have two integers
.8f0d	4c 7d a4	jmp $a47d			jmp 	TypeError 					; anything else, type mismatch.
.8f10					_IntegerCode:
.8f10	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8f13	3d 09 06	and $0609,x			and 		NSMantissa0+1,x
.8f16	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8f19	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8f1c	3d 11 06	and $0611,x			and 		NSMantissa1+1,x
.8f1f	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8f22	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8f25	3d 19 06	and $0619,x			and 		NSMantissa2+1,x
.8f28	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8f2b	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8f2e	3d 21 06	and $0621,x			and 		NSMantissa3+1,x
.8f31	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8f34	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.8f37	60		rts				rts
.8f38					OraInteger:
.8f38	fa		plx				plx
.8f39	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8f3c	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8f3f	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8f40	0a		asl a				asl 	a
.8f41	10 05		bpl $8f48			bpl 	_NotRef
.8f43	48		pha				pha
.8f44	20 64 91	jsr $9164			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8f47	68		pla				pla
.8f48					_NotRef:
.8f48	0a		asl a				asl 	a
.8f49	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8f4b	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8f4e	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8f51	f0 03		beq $8f56			beq 	_IntegerCode 				; if clear, then we have two integers
.8f53	4c 7d a4	jmp $a47d			jmp 	TypeError 					; anything else, type mismatch.
.8f56					_IntegerCode:
.8f56	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8f59	1d 09 06	ora $0609,x			ora 		NSMantissa0+1,x
.8f5c	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8f5f	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8f62	1d 11 06	ora $0611,x			ora 		NSMantissa1+1,x
.8f65	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8f68	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8f6b	1d 19 06	ora $0619,x			ora 		NSMantissa2+1,x
.8f6e	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8f71	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8f74	1d 21 06	ora $0621,x			ora 		NSMantissa3+1,x
.8f77	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8f7a	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.8f7d	60		rts				rts
.8f7e					EorInteger:
.8f7e	fa		plx				plx
.8f7f	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8f82	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8f85	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8f86	0a		asl a				asl 	a
.8f87	10 05		bpl $8f8e			bpl 	_NotRef
.8f89	48		pha				pha
.8f8a	20 64 91	jsr $9164			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8f8d	68		pla				pla
.8f8e					_NotRef:
.8f8e	0a		asl a				asl 	a
.8f8f	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8f91	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8f94	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8f97	f0 03		beq $8f9c			beq 	_IntegerCode 				; if clear, then we have two integers
.8f99	4c 7d a4	jmp $a47d			jmp 	TypeError 					; anything else, type mismatch.
.8f9c					_IntegerCode:
.8f9c	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8f9f	5d 09 06	eor $0609,x			eor 		NSMantissa0+1,x
.8fa2	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8fa5	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8fa8	5d 11 06	eor $0611,x			eor 		NSMantissa1+1,x
.8fab	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8fae	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8fb1	5d 19 06	eor $0619,x			eor 		NSMantissa2+1,x
.8fb4	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8fb7	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8fba	5d 21 06	eor $0621,x			eor 		NSMantissa3+1,x
.8fbd	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8fc0	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.8fc3	60		rts				rts
.8fc4					WordIndirect:
.8fc4	fa		plx				plx
.8fc5	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8fc8	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8fcb	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8fcc	0a		asl a				asl 	a
.8fcd	10 05		bpl $8fd4			bpl 	_NotRef
.8fcf	48		pha				pha
.8fd0	20 64 91	jsr $9164			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8fd3	68		pla				pla
.8fd4					_NotRef:
.8fd4	0a		asl a				asl 	a
.8fd5	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8fd7	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8fda	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8fdd	f0 03		beq $8fe2			beq 	_IntegerCode 				; if clear, then we have two integers
.8fdf	4c 7d a4	jmp $a47d			jmp 	TypeError 					; anything else, type mismatch.
.8fe2					_IntegerCode:
.8fe2	20 ad 8e	jsr $8ead			jsr 	AddCode 					; add the two values
.8fe5	a9 22		lda #$22			lda 	#NSBIsReference+2 			; make a 2 byte reference
.8fe7	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8fea	60		rts				rts
.8feb					ByteIndirect:
.8feb	fa		plx				plx
.8fec	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8fef	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8ff2	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8ff3	0a		asl a				asl 	a
.8ff4	10 05		bpl $8ffb			bpl 	_NotRef
.8ff6	48		pha				pha
.8ff7	20 64 91	jsr $9164			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8ffa	68		pla				pla
.8ffb					_NotRef:
.8ffb	0a		asl a				asl 	a
.8ffc	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8ffe	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9001	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.9004	f0 03		beq $9009			beq 	_IntegerCode 				; if clear, then we have two integers
.9006	4c 7d a4	jmp $a47d			jmp 	TypeError 					; anything else, type mismatch.
.9009					_IntegerCode:
.9009	20 ad 8e	jsr $8ead			jsr 	AddCode 					; add the two values
.900c	a9 21		lda #$21			lda 	#NSBIsReference+1 			; make a 1 byte reference
.900e	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9011	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/tostring.asm

.9fed					ConvertInt16:
.9fed	8d 08 06	sta $0608			sta 	NSMantissa0 				; set up as 32 bit conversion
.9ff0	8e 10 06	stx $0610			stx 	NSMantissa1
.9ff3	9c 18 06	stz $0618			stz 	NSMantissa2
.9ff6	9c 20 06	stz $0620			stz 	NSMantissa3
.9ff9	9c 00 06	stz $0600			stz 	NSStatus 					; positive integer
.9ffc	a2 00		ldx #$00			ldx 	#0 							; stack level
.9ffe	a9 0a		lda #$0a			lda 	#10 						; base
.a000	80 00		bra $a002			bra 	ConvertInt32
.a002					ConvertInt32:
.a002	5a		phy				phy
.a003	a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.a005	2c 00 06	bit $0600			bit 	NSStatus 					; output a - if not negative.
.a008	10 08		bpl $a012			bpl 	_CI32NotNeg
.a00a	48		pha				pha
.a00b	a9 2d		lda #$2d			lda 	#'-'
.a00d	99 76 08	sta $0876,y			sta 	NumberBuffer,y
.a010	c8		iny				iny
.a011	68		pla				pla
.a012					_CI32NotNeg:
.a012	20 20 a0	jsr $a020			jsr 	_CI32DivideConvert 			; recursive conversion
.a015	a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.a017	99 76 08	sta $0876,y			sta 	NumberBuffer,y
.a01a	7a		ply				ply
.a01b	a2 08		ldx #$08			ldx 	#NumberBuffer >> 8
.a01d	a9 76		lda #$76			lda 	#NumberBuffer & $FF
.a01f	60		rts				rts
.a020					_CI32DivideConvert:
.a020	e8		inx				inx 								; write to next slot up
.a021	20 a0 97	jsr $97a0			jsr 	NSMSetByte
.a024	ca		dex				dex
.a025	20 22 9f	jsr $9f22			jsr 	Int32Divide 				; divide
.a028	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; save remainder
.a02b	48		pha				pha
.a02c	20 d1 9e	jsr $9ed1			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.a02f	20 ce 97	jsr $97ce			jsr 	NSMIsZero 					; is it zero ?
.a032	f0 06		beq $a03a			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.a034	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.a037	20 20 a0	jsr $a020			jsr 	_CI32DivideConvert 			; and recusrively call.
.a03a					_CI32NoRecurse:
.a03a	68		pla				pla 								; remainder
.a03b	c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII
.a03d	90 02		bcc $a041			bcc 	_CI32NotHex
.a03f	69 26		adc #$26			adc 	#6+32
.a041					_CI32NotHex:
.a041	69 30		adc #$30			adc 	#48
.a043	99 76 08	sta $0876,y			sta 	NumberBuffer,y 				; write out and exit
.a046	c8		iny				iny
.a047	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/expression.asm


;******  Processing file: ./common/expressions/../generated/precedence.dat

.9012					PrecedenceLevel:
>9012	04					.byte	 4	; $00 <<
>9013	02					.byte	 2	; $01 <=
>9014	02					.byte	 2	; $02 <>
>9015	00					.byte	 0	; $03 !!3
>9016	00					.byte	 0	; $04 ><
>9017	02					.byte	 2	; $05 >=
>9018	04					.byte	 4	; $06 >>
>9019	00					.byte	 0	; $07 !!7
>901a	00					.byte	 0	; $08 !!8
>901b	00					.byte	 0	; $09 !!9
>901c	00					.byte	 0	; $0a !!10
>901d	00					.byte	 0	; $0b !!11
>901e	00					.byte	 0	; $0c !!12
>901f	00					.byte	 0	; $0d !!13
>9020	00					.byte	 0	; $0e !!14
>9021	00					.byte	 0	; $0f !!15
>9022	00					.byte	 0	; $10 @
>9023	00					.byte	 0	; $11 !!17
>9024	00					.byte	 0	; $12 !!18
>9025	00					.byte	 0	; $13 [
>9026	04					.byte	 4	; $14 \
>9027	00					.byte	 0	; $15 ]
>9028	01					.byte	 1	; $16 ^
>9029	00					.byte	 0	; $17 _
>902a	00					.byte	 0	; $18 `
>902b	00					.byte	 0	; $19 !!25
>902c	00					.byte	 0	; $1a !!26
>902d	00					.byte	 0	; $1b {
>902e	01					.byte	 1	; $1c |
>902f	00					.byte	 0	; $1d }
>9030	00					.byte	 0	; $1e ~
>9031	00					.byte	 0	; $1f [7m<7F>[m
>9032	00					.byte	 0	; $20
>9033	05					.byte	 5	; $21 !
>9034	00					.byte	 0	; $22 "
>9035	00					.byte	 0	; $23 #
>9036	05					.byte	 5	; $24 $
>9037	04					.byte	 4	; $25 %
>9038	01					.byte	 1	; $26 &
>9039	00					.byte	 0	; $27 '
>903a	00					.byte	 0	; $28 (
>903b	00					.byte	 0	; $29 )
>903c	04					.byte	 4	; $2a *
>903d	03					.byte	 3	; $2b +
>903e	00					.byte	 0	; $2c ,
>903f	03					.byte	 3	; $2d -
>9040	00					.byte	 0	; $2e .
>9041	04					.byte	 4	; $2f /
>9042	00					.byte	 0	; $30 0
>9043	00					.byte	 0	; $31 1
>9044	00					.byte	 0	; $32 2
>9045	00					.byte	 0	; $33 3
>9046	00					.byte	 0	; $34 4
>9047	00					.byte	 0	; $35 5
>9048	00					.byte	 0	; $36 6
>9049	00					.byte	 0	; $37 7
>904a	00					.byte	 0	; $38 8
>904b	00					.byte	 0	; $39 9
>904c	00					.byte	 0	; $3a :
>904d	00					.byte	 0	; $3b ;
>904e	02					.byte	 2	; $3c <
>904f	02					.byte	 2	; $3d =
>9050	02					.byte	 2	; $3e >
>9051	05					.byte	 5	; $3f ?

;******  Return to file: ./common/expressions/expression.asm

.9052					EvaluateExpressionAt0:
.9052	a2 00		ldx #$00			ldx 	#0 							; bottom stack level
.9054					EvaluateExpression:
.9054	a9 00		lda #$00			lda 	#0 							; lowest precedence level
.9056					EvaluateExpressionAtPrecedence:
.9056	48		pha				pha 								; save precedence level
.9057	20 25 93	jsr $9325			jsr 	EvaluateTerm 				; evaluate term into level X.
.905a	68		pla				pla 								; restore precedence level.
.905b					_EXPRLoop:
.905b	85 36		sta $36				sta 	zTemp0 						; save current precedence level.
.905d	b1 30		lda ($30),y			lda 	(codePtr),y
.905f	c9 40		cmp #$40			cmp		#$40 						; if >= $40 cannot be an operator
.9061	b0 25		bcs $9088			bcs 	_EXPRExit
.9063	da		phx				phx 								; read the operator precedence
.9064	aa		tax				tax
.9065	bd 12 90	lda $9012,x			lda 	PrecedenceLevel,x
.9068	fa		plx				plx
.9069	c9 00		cmp #$00			cmp 	#0							; if zero exit (not an operator)
.906b	f0 1b		beq $9088			beq 	_EXPRExit
.906d	85 37		sta $37				sta 	zTemp0+1 					; save operator precedence level.
.906f	a5 36		lda $36				lda 	zTemp0 						; compare current precedence vs. operator precedence
.9071	c5 37		cmp $37				cmp 	zTemp0+1
.9073	b0 13		bcs $9088			bcs		_EXPRExit 					; if current >= operator exit
.9075	48		pha				pha 								; save current precedence.
.9076	b1 30		lda ($30),y			lda 	(codePtr),y
.9078	c8		iny				iny
.9079	48		pha				pha
.907a	a5 37		lda $37				lda 	zTemp0+1 					; get operator precedence level
.907c	e8		inx				inx 								; work out the right hand side.
.907d	20 56 90	jsr $9056			jsr 	EvaluateExpressionAtPrecedence
.9080	ca		dex				dex
.9081	68		pla				pla 								; get operator, call the code.
.9082	20 8b 90	jsr $908b			jsr 	_EXPRCaller
.9085	68		pla				pla 								; restore precedence level
.9086	80 d3		bra $905b			bra 	_EXPRLoop 					; and go round.
.9088					_EXPRExit:
.9088	a5 36		lda $36				lda 	zTemp0 						; A = current precedence level.
.908a	60		rts				rts
.908b					_EXPRCaller:
.908b	da		phx				phx 								; save on stack, first thing is to restore it
.908c	0a		asl a				asl 	a 							; double so can use vectors into X
.908d	aa		tax				tax
.908e	7c 7e 80	jmp ($807e,x)			jmp 	(VectorSetPunc,x) 			; and go to the code.

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/addsub.asm

.a048					FloatingPointAdd:
.a048	20 e9 a1	jsr $a1e9			jsr 	FloatPrepare 				; prepare for floats
.a04b	80 0b		bra $a058			bra 	FloatAdd
.a04d					FloatingPointSub:
.a04d	20 e9 a1	jsr $a1e9			jsr 	FloatPrepare 				; prepare for floats
.a050					FloatSubtract:
.a050	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; negate FPB
.a053	49 80		eor #$80			eor 	#$80
.a055	9d 01 06	sta $0601,x			sta 	NSStatus+1,x				; and fall through.
.a058					FloatAdd:
.a058	48		pha				pha
.a059	5a		phy				phy
.a05a	20 fa a1	jsr $a1fa			jsr 	NSNormalise 				; normalise S[X]
.a05d	f0 54		beq $a0b3			beq 	_FAReturn1
.a05f	e8		inx				inx 								; normalise S[X+1]
.a060	20 fa a1	jsr $a1fa			jsr 	NSNormalise
.a063	ca		dex				dex
.a064	c9 00		cmp #$00			cmp 	#0
.a066	f0 6f		beq $a0d7			beq 	_FAExit 					; if so, just return A
.a068	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; are the exponents the same ?
.a06b	dd 29 06	cmp $0629,x			cmp 	NSExponent+1,x
.a06e	f0 1b		beq $a08b			beq 	_FAExponentsEqual
.a070	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; work out the larger exponent
.a073	a8		tay				tay
.a074	38		sec				sec 								; do a signed comparison of the exponents.
.a075	fd 29 06	sbc $0629,x			sbc 	NSExponent+1,x
.a078	50 02		bvc $a07c			bvc 	_FANoSignedChange
.a07a	49 80		eor #$80			eor 	#$80
.a07c					_FANoSignedChange:
.a07c	29 80		and #$80			and 	#$80
.a07e	10 03		bpl $a083			bpl 	_FAHaveMax
.a080	bc 29 06	ldy $0629,x			ldy 	NSExponent+1,x
.a083					_FAHaveMax:
.a083	20 da a0	jsr $a0da			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.a086	e8		inx				inx
.a087	20 da a0	jsr $a0da			jsr 	_FAShiftToExponent
.a08a	ca		dex				dex
.a08b					_FAExponentsEqual:
.a08b	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; are the signs the same
.a08e	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.a091	30 10		bmi $a0a3			bmi 	_FADifferentSigns
.a093	20 40 8e	jsr $8e40			jsr 	AddTopTwoStack 				; do the add of the mantissae
.a096	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.a099	10 3c		bpl $a0d7			bpl 	_FAExit 					; if no, we are done.
.a09b	20 c1 97	jsr $97c1			jsr 	NSMShiftRight 				; shift A right, renormalising it.
.a09e	fe 28 06	inc $0628,x			inc 	NSExponent,x 				; bump the exponent and exit
.a0a1	80 34		bra $a0d7			bra 	_FAExit
.a0a3					_FADifferentSigns:
.a0a3	20 66 8e	jsr $8e66			jsr 	SubTopTwoStack 				; subtract mantissa B from A
.a0a6	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; is the result negative ?
.a0a9	10 2c		bpl $a0d7			bpl 	_FAExit 					; if no, we are done.
.a0ab	20 4a 97	jsr $974a			jsr 	NSMNegate 					; netate result
.a0ae	20 53 97	jsr $9753			jsr 	NSMNegateMantissa 			; negate (2'c) the mantissa
.a0b1	80 24		bra $a0d7			bra 	_FAExit
.a0b3					_FAReturn1:
.a0b3	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.a0b6	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.a0b9	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.a0bc	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.a0bf	bd 19 06	lda $0619,x			lda 	NSMantissa2+1,x
.a0c2	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.a0c5	bd 21 06	lda $0621,x			lda 	NSMantissa3+1,x
.a0c8	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.a0cb	bd 29 06	lda $0629,x			lda 	NSExponent+1,x
.a0ce	9d 28 06	sta $0628,x			sta 	NSExponent,x
.a0d1	bd 01 06	lda $0601,x			lda 	NSStatus+1,x
.a0d4	9d 00 06	sta $0600,x			sta 	NSStatus,x
.a0d7					_FAExit:
.a0d7	7a		ply				ply
.a0d8	68		pla				pla
.a0d9	60		rts				rts
.a0da					_FAShiftToExponent:
.a0da					_FAShiftToExponent2:
.a0da	98		tya				tya 								; compare Y to exponent
.a0db	dd 28 06	cmp $0628,x			cmp 	NSExponent,x 				; reached the exponent required ?
.a0de	f0 08		beq $a0e8			beq 	_FASEExit 					; exit if so.
.a0e0	20 c1 97	jsr $97c1			jsr 	NSMShiftRight	 			; shift the mantissa right
.a0e3	fe 28 06	inc $0628,x			inc 	NSExponent,x 				; increment exponent
.a0e6	80 f2		bra $a0da			bra 	_FAShiftToExponent2
.a0e8					_FASEExit:
.a0e8	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/compare.asm

.a0e9					CompareFloat:
.a0e9	20 50 a0	jsr $a050			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.a0ec	bd 10 06	lda $0610,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.a0ef	29 f8		and #$f8			and 	#$F8
.a0f1	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.a0f4	1d 20 06	ora $0620,x			ora 	NSMantissa3,x
.a0f7	f0 09		beq $a102			beq 	_FCExit 					; zero, so approximately identical
.a0f9	a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.a0fb	3c 00 06	bit $0600,x			bit 	NSStatus,x
.a0fe	10 02		bpl $a102			bpl 	_FCExit
.a100					_FCNegative:
.a100	a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.a102					_FCExit:
.a102	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/divide.asm

.a103					FDivideCommand:
.a103	fa		plx				plx	 								; restore stack position
.a104	20 e9 a1	jsr $a1e9			jsr 	FloatPrepare 				; prepare for floats
.a107					FloatDivide:
.a107	48		pha				pha
.a108	e8		inx				inx
.a109	20 fa a1	jsr $a1fa			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.a10c	ca		dex				dex
.a10d	c9 00		cmp #$00			cmp 	#0
.a10f	f0 20		beq $a131			beq 	_FDZero
.a111	20 fa a1	jsr $a1fa			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.a114	f0 19		beq $a12f			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.a116	20 44 9f	jsr $9f44			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.a119	20 d1 9e	jsr $9ed1			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.a11c	20 fa a1	jsr $a1fa			jsr		NSNormalise 				; renormalise
.a11f	20 df 9f	jsr $9fdf			jsr 	CalculateSign 				; calculate result sign
.a122	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; calculate exponent
.a125	38		sec				sec
.a126	fd 29 06	sbc $0629,x			sbc 	NSExponent+1,x
.a129	38		sec				sec
.a12a	e9 1e		sbc #$1e			sbc 	#30
.a12c	9d 28 06	sta $0628,x			sta 	NSExponent,x
.a12f					_FDExit:
.a12f	68		pla				pla
.a130	60		rts				rts
.a131					_FDZero:
.a131	a9 03		lda #$03		lda	#3
.a133	4c 4b 8c	jmp $8c4b		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/fractional.asm

.a136					FloatFractionalPart:
.a136	5a		phy				phy
.a137	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; take absolute value
.a13a	29 7f		and #$7f			and 	#$7F
.a13c	9d 00 06	sta $0600,x			sta 	NSStatus,x
.a13f	20 fa a1	jsr $a1fa			jsr 	NSNormalise
.a142	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.a145	38		sec				sec
.a146	e9 e0		sbc #$e0			sbc 	#$E0
.a148	90 31		bcc $a17b			bcc 	_FFPExit 					; already fractional
.a14a	c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.a14c	b0 2a		bcs $a178			bcs 	_FFPZero
.a14e	a8		tay				tay 								; put count to do in Y
.a14f	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; do each in turn.
.a152	20 7d a1	jsr $a17d			jsr 	_FFPPartial
.a155	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.a158	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.a15b	20 7d a1	jsr $a17d			jsr 	_FFPPartial
.a15e	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.a161	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.a164	20 7d a1	jsr $a17d			jsr 	_FFPPartial
.a167	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.a16a	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.a16d	20 7d a1	jsr $a17d			jsr 	_FFPPartial
.a170	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.a173	20 ce 97	jsr $97ce			jsr 	NSMIsZero 					; zeroed check.
.a176	d0 03		bne $a17b			bne 	_FFPExit
.a178					_FFPZero:
.a178	20 9e 97	jsr $979e			jsr 	NSMSetZero
.a17b					_FFPExit:
.a17b	7a		ply				ply
.a17c	60		rts				rts
.a17d					_FFPPartial:
.a17d	c0 00		cpy #$00			cpy 	#0 							; no more to do
.a17f	f0 17		beq $a198			beq 	_FFFPPExit
.a181	c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.a183	b0 0c		bcs $a191			bcs 	_FFFPPWholeByte
.a185	5a		phy				phy
.a186					_FFFPPLeft:
.a186	0a		asl a				asl 	a
.a187	88		dey				dey
.a188	d0 fc		bne $a186			bne 	_FFFPPLeft
.a18a	7a		ply				ply
.a18b					_FFFPPRight:
.a18b	4a		lsr a				lsr 	a
.a18c	88		dey				dey
.a18d	d0 fc		bne $a18b			bne 	_FFFPPRight
.a18f	80 07		bra $a198			bra 	_FFFPPExit
.a191					_FFFPPWholeByte:
.a191	98		tya				tya 								; subtract 8 from count
.a192	38		sec				sec
.a193	e9 08		sbc #$08			sbc 	#8
.a195	a8		tay				tay
.a196	a9 00		lda #$00			lda 	#0 							; and clear all
.a198					_FFFPPExit:
.a198	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/integer.asm

.a199					FloatIntegerPart:
.a199	48		pha				pha
.a19a	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; is it integer already ?
.a19d	f0 1f		beq $a1be			beq 	_FIPExit 					; if so do nothing
.a19f	20 ce 97	jsr $97ce			jsr 	NSMIsZero 					; is it zero ?
.a1a2	f0 17		beq $a1bb			beq 	_FIPZero 					; if so return zero.
.a1a4	20 fa a1	jsr $a1fa			jsr 	NSNormalise 				; normalise
.a1a7	f0 12		beq $a1bb			beq 	_FIPZero 					; normalised to zero, exit zero
.a1a9					_FIPShift:
.a1a9	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.a1ac	10 08		bpl $a1b6			bpl 	_FIPCheckZero
.a1ae	20 c1 97	jsr $97c1			jsr 	NSMShiftRight 				; shift mantissa right
.a1b1	fe 28 06	inc $0628,x			inc 	NSExponent,x 				; bump exponent
.a1b4	80 f3		bra $a1a9			bra 	_FIPShift
.a1b6					_FIPCheckZero:
.a1b6	20 ce 97	jsr $97ce			jsr 	NSMIsZero 					; avoid -0 problem
.a1b9	d0 03		bne $a1be			bne 	_FIPExit 					; set to zero if mantissa zero.
.a1bb					_FIPZero:
.a1bb	20 9e 97	jsr $979e			jsr 	NSMSetZero
.a1be					_FIPExit:
.a1be	68		pla				pla
.a1bf	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/multiply.asm

.a1c0					FloatingPointMultiply:
.a1c0	20 e9 a1	jsr $a1e9			jsr 	FloatPrepare 				; prepare for floats
.a1c3					FloatMultiply:
.a1c3	48		pha				pha
.a1c4	20 fa a1	jsr $a1fa			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.a1c7	f0 1b		beq $a1e4			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.a1c9	e8		inx				inx
.a1ca	20 fa a1	jsr $a1fa			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.a1cd	ca		dex				dex
.a1ce	c9 00		cmp #$00			cmp 	#0
.a1d0	f0 0f		beq $a1e1			beq 	_FDSetZero
.a1d2	20 9a 9f	jsr $9f9a			jsr 	MultiplyShort 				; calculate the result.
.a1d5	7d 28 06	adc $0628,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.a1d8	18		clc				clc
.a1d9	7d 29 06	adc $0629,x			adc 	NSExponent+1,x
.a1dc	9d 28 06	sta $0628,x			sta 	NSExponent,x
.a1df	80 03		bra $a1e4			bra 	_FDExit
.a1e1					_FDSetZero:
.a1e1	20 9e 97	jsr $979e			jsr 	NSMSetZero 					; return 0
.a1e4					_FDExit:
.a1e4	20 fa a1	jsr $a1fa			jsr 	NSNormalise 				; normalise the result
.a1e7	68		pla				pla
.a1e8	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/utility.asm

.a1e9					FloatPrepare:
.a1e9	20 64 91	jsr $9164			jsr 	DereferenceTopTwo 			; dereference the top two values
.a1ec	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check ints/floats
.a1ef	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.a1f2	29 10		and #$10			and 	#NSBIsString
.a1f4	d0 01		bne $a1f7			bne 	_FDType
.a1f6	60		rts				rts
.a1f7					_FDType:
.a1f7	4c 7d a4	jmp $a47d			jmp 	TypeError
.a1fa					NSNormalise:
.a1fa	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; make float, keep sign
.a1fd	29 80		and #$80			and 	#$80
.a1ff	09 08		ora #$08			ora 	#NSTFloat
.a201	9d 00 06	sta $0600,x			sta 	NSStatus,x
.a204	20 ce 97	jsr $97ce			jsr 	NSMIsZero 					; if zero exit
.a207	d0 09		bne $a212			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.a209	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; clear the sign bit.
.a20c	7e 00 06	ror $0600,x			ror 	NSStatus,x 					; (no -0)
.a20f	a9 00		lda #$00			lda 	#0 							; set Z flag
.a211	60		rts				rts
.a212					_NSNormaliseOptimise:
.a212	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; upper byte zero ?
.a215	d0 22		bne $a239			bne 	_NSNormaliseLoop
.a217	bd 18 06	lda $0618,x			lda 	NSMantissa2,x 				; byte normalise
.a21a	30 1d		bmi $a239			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.a21c	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.a21f	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.a222	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.a225	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.a228	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.a22b	9e 08 06	stz $0608,x			stz 	NSMantissa0,x
.a22e	bd 28 06	lda $0628,x			lda 	NSExponent,x
.a231	38		sec				sec
.a232	e9 08		sbc #$08			sbc 	#8
.a234	9d 28 06	sta $0628,x			sta 	NSExponent,x
.a237	80 d9		bra $a212			bra 	_NSNormaliseOptimise
.a239					_NSNormaliseLoop:
.a239	3c 20 06	bit $0620,x			bit 	NSMantissa3,x 				; bit 30 set ?
.a23c	70 08		bvs $a246			bvs 	_NSNExit 					; exit if so with Z flag clear
.a23e	20 b3 97	jsr $97b3			jsr 	NSMShiftLeft 				; shift mantissa left
.a241	de 28 06	dec $0628,x			dec 	NSExponent,x 				; adjust exponent
.a244	80 f3		bra $a239			bra 	_NSNormaliseLoop
.a246					_NSNExit:
.a246	a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.a248	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignnumber.asm

.9091					AssignNumber:
.9091	5a		phy				phy
.9092	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy mantissa0/1 to zTemp0
.9095	85 36		sta $36				sta 	zTemp0
.9097	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.909a	85 37		sta $37				sta 	zTemp0+1
.909c	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; clear reference bits
.909f	29 df		and #$df			and 	#(NSBIsReference ^ $FF)
.90a1	9d 00 06	sta $0600,x			sta 	NSStatus,x
.90a4	29 18		and #$18			and 	#NSBTypeMask				; assigning to a float ?
.90a6	c9 08		cmp #$08			cmp 	#NSTFloat
.90a8	f0 2a		beq $90d4			beq 	_ANFloat
.90aa	bd 29 06	lda $0629,x			lda		NSExponent+1,x 				; is it a float
.90ad	f0 05		beq $90b4			beq		_ANNotFloat
.90af	e8		inx				inx
.90b0	20 99 a1	jsr $a199			jsr 	FloatIntegerPart 			; make it an integer
.90b3	ca		dex				dex
.90b4					_ANNotFloat:
.90b4	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if byte/word reference.
.90b7	29 03		and #$03			and 	#3
.90b9	d0 05		bne $90c0			bne 	_ANByteWord
.90bb	20 e0 90	jsr $90e0			jsr 	_ANCopy4PackSign 			; copy all 4 bytes and sign
.90be	80 1e		bra $90de			bra 	_ANExit
.90c0					_ANByteWord:
.90c0	48		pha				pha 								; save count
.90c1	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; do byte
.90c4	92 36		sta ($36)			sta 	(zTemp0)
.90c6	68		pla				pla
.90c7	c9 01		cmp #$01			cmp	 	#1
.90c9	f0 13		beq $90de			beq 	_ANExit
.90cb	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x 			; do word
.90ce	a0 01		ldy #$01			ldy 	#1
.90d0	91 36		sta ($36),y			sta 	(zTemp0),y
.90d2	80 0a		bra $90de			bra 	_ANExit
.90d4					_ANFloat:
.90d4	20 e0 90	jsr $90e0			jsr 	_ANCopy4PackSign 			; write all 4 bytes and packed sign
.90d7	bd 29 06	lda $0629,x			lda 	NSExponent+1,x 				; copy exponent to slot 4
.90da	a0 04		ldy #$04			ldy 	#4
.90dc	91 36		sta ($36),y			sta 	(zTemp0),y
.90de					_ANExit:
.90de	7a		ply				ply
.90df	60		rts				rts
.90e0					_ANCopy4PackSign:
.90e0	a0 03		ldy #$03			ldy 	#3
.90e2	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; sign bit into status
.90e5	29 80		and #$80			and 	#$80 						; put into high bit of mantissa 3
.90e7	1d 21 06	ora $0621,x			ora 	NSMantissa3+1,x
.90ea	91 36		sta ($36),y			sta 	(zTemp0),y
.90ec	88		dey				dey
.90ed	bd 19 06	lda $0619,x			lda 	NSMantissa2+1,x
.90f0	91 36		sta ($36),y			sta 	(zTemp0),y
.90f2	88		dey				dey
.90f3	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.90f6	91 36		sta ($36),y			sta 	(zTemp0),y
.90f8	88		dey				dey
.90f9	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.90fc	91 36		sta ($36),y			sta 	(zTemp0),y
.90fe	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignstring.asm

.90ff					AssignString:
.90ff	5a		phy				phy
.9100	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.9103	85 38		sta $38				sta 	zTemp1
.9105	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.9108	85 39		sta $39				sta 	zTemp1+1
.910a	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.910d	85 36		sta $36				sta 	zTemp0
.910f	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.9112	85 37		sta $37				sta 	zTemp0+1
.9114	a0 01		ldy #$01			ldy 	#1 							; the high byte of the target address
.9116	b1 36		lda ($36),y			lda 	(zTemp0),y
.9118	f0 23		beq $913d			beq 	_ASNewStringRequired 		; if zero, a new string is required.
.911a	38		sec				sec 								; put Address-2 in zsTemp - this is the size/status/string record
.911b	b2 36		lda ($36)			lda 	(zTemp0) 					; of concreted strings
.911d	e9 02		sbc #$02			sbc 	#2
.911f	85 3c		sta $3c				sta 	zsTemp
.9121	a0 01		ldy #$01			ldy 	#1
.9123	b1 36		lda ($36),y			lda 	(zTemp0),y
.9125	e9 00		sbc #$00			sbc 	#0
.9127	85 3d		sta $3d				sta 	zsTemp+1
.9129	a0 ff		ldy #$ff			ldy 	#$FF 						; get length of new string
.912b					_ASGetLength:
.912b	c8		iny				iny
.912c	b1 38		lda ($38),y			lda 	(zTemp1),y
.912e	d0 fb		bne $912b			bne 	_ASGetLength
.9130	98		tya				tya 								; is this length <= current length
.9131	d2 3c		cmp ($3c)			cmp 	(zsTemp)
.9133	90 20		bcc $9155			bcc 	_ASCopyString
.9135	f0 1e		beq $9155			beq 	_ASCopyString
.9137	a9 80		lda #$80			lda 	#$80 						; mark as unused.
.9139	a0 01		ldy #$01			ldy 	#1
.913b	91 3c		sta ($3c),y			sta 	(zsTemp),y
.913d					_ASNewStringRequired:
.913d	e8		inx				inx 								; concrete the new string.
.913e	20 19 a6	jsr $a619			jsr 	StringConcrete				; (breaks zTemp1/2, not zTemp0 and zsTemp)
.9141	ca		dex				dex
.9142	18		clc				clc
.9143	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; copy that new address to the reference.
.9146	69 02		adc #$02			adc 	#2 							; add two to point at the data.
.9148	92 36		sta ($36)			sta 	(zTemp0)
.914a	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.914d	69 00		adc #$00			adc 	#0
.914f	a0 01		ldy #$01			ldy 	#1
.9151	91 36		sta ($36),y			sta 	(zTemp0),y
.9153	80 0d		bra $9162			bra 	_ASExit
.9155					_ASCopyString:
.9155	a0 00		ldy #$00			ldy 	#0
.9157					_ASCopyLoop:
.9157	b1 38		lda ($38),y			lda 	(zTemp1),y
.9159	c8		iny				iny
.915a	c8		iny				iny
.915b	91 3c		sta ($3c),y			sta 	(zsTemp),y
.915d	88		dey				dey
.915e	c9 00		cmp #$00			cmp 	#0
.9160	d0 f5		bne $9157			bne 	_ASCopyLoop
.9162					_ASExit:
.9162	7a		ply				ply
.9163	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/dereference.asm

.9164					DereferenceTopTwo:
.9164	e8		inx				inx
.9165	20 69 91	jsr $9169			jsr 	Dereference 				; deref x+1
.9168	ca		dex				dex  								; falls through to deref x
.9169					Dereference:
.9169	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get the status byte
.916c	29 20		and #$20			and 	#NSBIsReference 			; shift sign bit to carry, reference to bit 7
.916e	f0 57		beq $91c7			beq 	_DRFExit 					; not a reference
.9170	5a		phy				phy
.9171	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy address to dereference into zTemp0
.9174	85 36		sta $36				sta 	zTemp0
.9176	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.9179	85 37		sta $37				sta 	zTemp0+1
.917b	9e 10 06	stz $0610,x			stz 	NSMantissa1,x 				; clear second byte.
.917e	b2 36		lda ($36)			lda 	(zTemp0) 					; do the first byte
.9180	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.9183	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get status byte.
.9186	29 18		and #$18			and 	#NSBTypeMask 				; what type is it ?
.9188	c9 10		cmp #$10			cmp 	#NSTString 					; if string, dereference two
.918a	f0 0f		beq $919b			beq 	_DRFDereferenceTwo
.918c	c9 08		cmp #$08			cmp 	#NSTFloat 					; if float, do full dereference.
.918e	f0 39		beq $91c9			beq 	_DRFFull
.9190	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be integer - how many bytes ?
.9193	29 03		and #$03			and 	#3
.9195	f0 32		beq $91c9			beq 	_DRFFull 					; the whole word
.9197	c9 01		cmp #$01			cmp 	#1 							; is it 10 (e.g. 2 bytes)
.9199	f0 07		beq $91a2			beq		_DRFClear23 				; no, one byte, clear 2 & 3 and exit
.919b					_DRFDereferenceTwo:
.919b	a0 01		ldy #$01			ldy 	#1
.919d	b1 36		lda ($36),y			lda 	(zTemp0),y
.919f	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.91a2					_DRFClear23:
.91a2	9e 18 06	stz $0618,x			stz 	NSMantissa2,x 				; clear upper bytes, only read 1 or 2 bytes
.91a5	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.91a8	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; make it a value of that type.
.91ab	29 18		and #$18			and 	#NSBTypeMask
.91ad	9d 00 06	sta $0600,x			sta 	NSStatus,x
.91b0	c9 10		cmp #$10			cmp 	#NSTString  				; is it a string
.91b2	d0 12		bne $91c6			bne 	_DRFNotString
.91b4	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; check address is zero
.91b7	1d 10 06	ora $0610,x			ora 	NSMantissa1,x
.91ba	d0 0a		bne $91c6			bne 	_DRFNotString
.91bc	a9 c8		lda #$c8			lda 	#_DRFNullString & $FF 		; if so, return reference to ""
.91be	9d 08 06	sta $0608,x			sta 	NSMantissa0,X
.91c1	a9 91		lda #$91			lda 	#_DRFNullString >> 8
.91c3	9d 10 06	sta $0610,x			sta 	NSMantissa1,X
.91c6					_DRFNotString
.91c6	7a		ply				ply 								; restore Y and exit
.91c7					_DRFExit:
.91c7	60		rts				rts
.91c8					_DRFNullString:
>91c8	00						.byte 	0
.91c9					_DRFFull:
.91c9	a0 01		ldy #$01			ldy 	#1 							; get remaining 3 bytes.
.91cb	b1 36		lda ($36),y			lda 	(zTemp0),y
.91cd	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.91d0	c8		iny				iny
.91d1	b1 36		lda ($36),y			lda 	(zTemp0),y
.91d3	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.91d6	c8		iny				iny
.91d7	b1 36		lda ($36),y			lda 	(zTemp0),y
.91d9	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.91dc	9e 28 06	stz $0628,x			stz 	NSExponent,x 				; clear exponent.
.91df	bd 00 06	lda $0600,x			lda		NSStatus,x 					; see if type is integer
.91e2	29 18		and #$18			and 	#NSBTypeMask  				; type information only
.91e4	9d 00 06	sta $0600,x			sta 	NSStatus,x 					; update it back.
.91e7	f0 06		beq $91ef			beq 	_DRFNoExponent
.91e9	c8		iny				iny 								; if not, read the exponent as well.
.91ea	b1 36		lda ($36),y			lda 	(zTemp0),y
.91ec	9d 28 06	sta $0628,x			sta 	NSExponent,x
.91ef					_DRFNoExponent:
.91ef	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; is the most significant bit set ?
.91f2	10 0d		bpl $9201			bpl 	_DRFExit2 					; if not, then exit.
.91f4	29 7f		and #$7f			and 	#$7F 						; clear that bit.
.91f6	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.91f9	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; set the sign flag
.91fc	09 80		ora #$80			ora 	#NSBIsNegative
.91fe	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9201					_DRFExit2:
.9201	7a		ply				ply
.9202	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/number.asm

=1					ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2					ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3					ESTA_Decimal = 3 							; fractional part.
.9203					EncodeNumberStart:
.9203	38		sec				sec
.9204	80 01		bra $9207			bra 	EncodeNumberContinue+1
.9206					EncodeNumberContinue:
.9206	18		clc				clc
.9207					EncodeNumber:
.9207	08		php				php 								; save reset.
.9208	c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.920a	f0 12		beq $921e			beq 	_ENIsOkay
.920c	c9 30		cmp #$30			cmp 	#"0"
.920e	90 04		bcc $9214			bcc 	_ENBadNumber
.9210	c9 3a		cmp #$3a			cmp 	#"9"+1
.9212	90 0a		bcc $921e			bcc 	_ENIsOkay
.9214					_ENBadNumber:
.9214	28		plp				plp 								; throw saved reset
.9215	ad 05 07	lda $0705			lda 	EncodeState 				; decimal mode, construct final number
.9218	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.921a	f0 7e		beq $929a			beq 	_ENConstructFinal
.921c					_ENFail:
.921c	18		clc				clc 								; not allowed
.921d	60		rts				rts
.921e					_ENIsOkay:
.921e	28		plp				plp 								; are we restarting
.921f	90 15		bcc $9236			bcc 	_ENNoRestart
.9221					_ENStartEncode:
.9221	c9 2e		cmp #$2e			cmp 	#'.'						; first is DP
.9223	f0 0c		beq $9231			beq 	_ENFirstDP
.9225	29 0f		and #$0f			and 	#15 						; put digit in mantissa
.9227	20 a0 97	jsr $97a0			jsr 	NSMSetByte
.922a	a9 01		lda #$01			lda 	#ESTA_Low
.922c					_ENExitChange:
.922c	8d 05 07	sta $0705			sta 	EncodeState 				; save new state
.922f	38		sec				sec
.9230	60		rts				rts
.9231					_ENFirstDP:
.9231	20 9e 97	jsr $979e			jsr 	NSMSetZero 					; clear integer part
.9234	80 3f		bra $9275			bra 	_ESTASwitchFloat			; go straight to float and exi
.9236					_ENNoRestart:
.9236	48		pha				pha 								; save on stack.
.9237	ad 05 07	lda $0705			lda 	EncodeState 				; get current state
.923a	c9 01		cmp #$01			cmp 	#ESTA_Low
.923c	f0 09		beq $9247			beq  	_ESTALowState
.923e	c9 02		cmp #$02			cmp 	#ESTA_High
.9240	f0 29		beq $926b			beq 	_ESTAHighState
.9242	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.9244	f0 3b		beq $9281			beq 	_ESTADecimalState
>9246	db						.byte 	$DB 						; causes a break in the emulator
.9247					_ESTALowState:
.9247	68		pla				pla 								; get value back
.9248	c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.924a	f0 29		beq $9275			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.924c	29 0f		and #$0f			and 	#15 						; make digit
.924e	8d 06 07	sta $0706			sta 	DigitTemp 					; save it.
.9251	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.9254	0a		asl a				asl 	a
.9255	0a		asl a				asl 	a
.9256	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.9259	0a		asl a				asl 	a
.925a	6d 06 07	adc $0706			adc 	DigitTemp
.925d	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.9260	c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.9262	90 05		bcc $9269			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.9264	a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.9266	8d 05 07	sta $0705			sta 	EncodeState
.9269					_ESTANoSwitch:
.9269	38		sec				sec
.926a	60		rts				rts
.926b					_ESTAHighState:
.926b	68		pla				pla 								; get value back
.926c	c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.926e	f0 05		beq $9275			beq 	_ESTASwitchFloat
.9270	20 d4 92	jsr $92d4			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.9273	38		sec				sec
.9274	60		rts				rts
.9275					_ESTASwitchFloat:
.9275	9c 07 07	stz $0707			stz 	DecimalCount
.9278	e8		inx				inx 								; zero the decimal additive.
.9279	20 9e 97	jsr $979e			jsr 	NSMSetZero
.927c	ca		dex				dex
.927d	a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.927f	80 ab		bra $922c			bra 	_ENExitChange
.9281					_ESTADecimalState:
.9281	68		pla				pla 								; digit.
.9282	c9 2e		cmp #$2e			cmp 	#"." 						; fail on 2nd decimal point.
.9284	f0 96		beq $921c			beq 	_ENFail
.9286	e8		inx				inx 								; put digit into fractional part of X+1
.9287	20 d4 92	jsr $92d4			jsr 	ESTAShiftDigitIntoMantissa
.928a	ca		dex				dex
.928b	ee 07 07	inc $0707			inc 	DecimalCount 				; bump the count of decimals
.928e	ad 07 07	lda $0707			lda 	DecimalCount
.9291	c9 0b		cmp #$0b			cmp 	#11
.9293	f0 02		beq $9297			beq 	_ESTADSFail
.9295	38		sec				sec
.9296	60		rts				rts
.9297					_ESTADSFail:
.9297	4c 78 a4	jmp $a478			jmp 	RangeError
.929a					_ENConstructFinal:
.929a	ad 07 07	lda $0707			lda 	DecimalCount 				; get decimal count
.929d	f0 33		beq $92d2			beq 	_ENCFExit 					; no decimals
.929f	5a		phy				phy
.92a0	0a		asl a				asl 	a 							; x 4 and CLC
.92a1	0a		asl a				asl 	a
.92a2	6d 07 07	adc $0707			adc 	DecimalCount
.92a5	a8		tay				tay
.92a6	b9 37 a4	lda $a437,y			lda 	DecimalScalarTable-5,y 		; copy decimal scalar to X+2
.92a9	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.92ac	b9 38 a4	lda $a438,y			lda 	DecimalScalarTable-5+1,y
.92af	9d 12 06	sta $0612,x			sta 	NSMantissa1+2,x
.92b2	b9 39 a4	lda $a439,y			lda 	DecimalScalarTable-5+2,y
.92b5	9d 1a 06	sta $061a,x			sta 	NSMantissa2+2,x
.92b8	b9 3a a4	lda $a43a,y			lda 	DecimalScalarTable-5+3,y
.92bb	9d 22 06	sta $0622,x			sta 	NSMantissa3+2,x
.92be	b9 3b a4	lda $a43b,y			lda 	DecimalScalarTable-5+4,y
.92c1	9d 2a 06	sta $062a,x			sta 	NSExponent+2,x
.92c4	a9 08		lda #$08			lda 	#NSTFloat
.92c6	9d 02 06	sta $0602,x			sta 	NSStatus+2,x
.92c9	7a		ply				ply
.92ca	e8		inx				inx 								; multiply decimal const by decimal scalar
.92cb	20 c3 a1	jsr $a1c3			jsr 	FloatMultiply
.92ce	ca		dex				dex
.92cf	20 58 a0	jsr $a058			jsr 	FloatAdd 					; add to integer part.
.92d2					_ENCFExit:
.92d2	18		clc				clc 								; reject the digit.
.92d3	60		rts				rts
.92d4					ESTAShiftDigitIntoMantissa:
.92d4	29 0f		and #$0f			and 	#15 						; save digit
.92d6	48		pha				pha
.92d7	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; push mantissa on stack
.92da	48		pha				pha
.92db	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.92de	48		pha				pha
.92df	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.92e2	48		pha				pha
.92e3	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.92e6	48		pha				pha
.92e7	20 b3 97	jsr $97b3			jsr 	NSMShiftLeft 				; x 2
.92ea	20 b3 97	jsr $97b3			jsr 	NSMShiftLeft 				; x 4
.92ed	18		clc				clc 								; pop mantissa and add
.92ee	68		pla				pla
.92ef	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.92f2	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.92f5	68		pla				pla
.92f6	7d 10 06	adc $0610,x			adc 	NSMantissa1,x
.92f9	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.92fc	68		pla				pla
.92fd	7d 18 06	adc $0618,x			adc 	NSMantissa2,x
.9300	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.9303	68		pla				pla
.9304	7d 20 06	adc $0620,x			adc 	NSMantissa3,x
.9307	9d 20 06	sta $0620,x			sta 	NSMantissa3,x 				; x 5
.930a	20 b3 97	jsr $97b3			jsr 	NSMShiftLeft 				; x 10
.930d	68		pla				pla 								; add digit
.930e	18		clc				clc
.930f	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.9312	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.9315	90 0d		bcc $9324			bcc 	_ESTASDExit
.9317	fe 10 06	inc $0610,x			inc 	NSMantissa1,x
.931a	d0 08		bne $9324			bne 	_ESTASDExit
.931c	fe 18 06	inc $0618,x			inc 	NSMantissa2,x
.931f	d0 03		bne $9324			bne 	_ESTASDExit
.9321	fe 20 06	inc $0620,x			inc 	NSMantissa3,x
.9324					_ESTASDExit:
.9324	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/term.asm

.9325					EvaluateTerm:
.9325	b1 30		lda ($30),y			lda 	(codePtr),y
.9327	30 18		bmi $9341			bmi 	_ETCheckUnary 				; unary function ? (text ones)
.9329	c9 40		cmp #$40			cmp 	#$40 						; 40-7F => identifier reference
.932b	b0 6f		bcs $939c			bcs 	_ETVariable
.932d	c9 30		cmp #$30			cmp 	#'0' 						; is it a number
.932f	90 6e		bcc $939f			bcc 	_ETPuncUnary 				; if not it might be a punctuation unary.
.9331	c9 3a		cmp #$3a			cmp 	#'9'+1
.9333	b0 6a		bcs $939f			bcs 	_ETPuncUnary
.9335	20 03 92	jsr $9203			jsr 	EncodeNumberStart 			; can't fail as it's 0-9 !
.9338					_ETNumber:
.9338	c8		iny				iny 								; keep encoding until we have the numbers
.9339	b1 30		lda ($30),y			lda 	(codePtr),y
.933b	20 06 92	jsr $9206			jsr 	EncodeNumberContinue
.933e	b0 f8		bcs $9338			bcs 	_ETNumber 					; go back if accepted.
.9340	60		rts				rts
.9341					_ETCheckUnary:
.9341	c9 ff		cmp #$ff			cmp 	#KWC_STRING 				; string token
.9343	f0 41		beq $9386			beq 	_ETString
.9345	c9 fe		cmp #$fe			cmp 	#KWC_HEXCONST 				; hex constant.
.9347	f0 12		beq $935b			beq 	_ETHexConstant
.9349	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; check it actually is a unary function
.934b	90 0b		bcc $9358			bcc 	_ETSyntaxError
.934d	c9 96		cmp #$96			cmp 	#KWC_LAST_UNARY+1
.934f	b0 07		bcs $9358			bcs 	_ETSyntaxError
.9351	da		phx				phx 								; push X on the stack
.9352	0a		asl a				asl 	a 							; put vector x 2 into X
.9353	aa		tax				tax
.9354	c8		iny				iny 								; consume unary function token
.9355	7c fe 80	jmp ($80fe,x)			jmp 	(VectorSet0,x) 				; and do it.
.9358					_ETSyntaxError:
.9358	4c 73 a4	jmp $a473			jmp 	SyntaxError
.935b					_ETHexConstant:
.935b	c8		iny				iny 								; skip #
.935c	c8		iny				iny 								; skip count
.935d	20 9e 97	jsr $979e			jsr 	NSMSetZero 					; clear result
.9360					_ETHLoop:
.9360	b1 30		lda ($30),y			lda 	(codePtr),y
.9362	c8		iny				iny 								; and consume
.9363	c9 00		cmp #$00			cmp 	#0 							; exit if zero
.9365	f0 1e		beq $9385			beq 	_ETHExit
.9367	48		pha				pha 								; save on stack.
.9368	20 b3 97	jsr $97b3			jsr 	NSMShiftLeft 				; x 2
.936b	20 b3 97	jsr $97b3			jsr 	NSMShiftLeft 				; x 4
.936e	20 b3 97	jsr $97b3			jsr 	NSMShiftLeft 				; x 8
.9371	20 b3 97	jsr $97b3			jsr 	NSMShiftLeft 				; x 16
.9374	68		pla				pla 								; ASCII
.9375	c9 41		cmp #$41			cmp 	#'A'
.9377	90 02		bcc $937b			bcc 	_ETHNotChar
.9379	e9 07		sbc #$07			sbc 	#7
.937b					_ETHNotChar:
.937b	29 0f		and #$0f			and 	#15 						; digit now
.937d	1d 08 06	ora $0608,x			ora 	NSMantissa0,x 				; put in LS Nibble
.9380	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.9383	80 db		bra $9360			bra 	_ETHLoop 					; go round.
.9385					_ETHExit:
.9385	60		rts				rts
.9386					_ETString:
.9386	c8		iny				iny 								; look at length
.9387	b1 30		lda ($30),y			lda 	(codePtr),y
.9389	48		pha				pha
.938a	c8		iny				iny 								; first character
.938b	20 0b 9e	jsr $9e0b			jsr 	MemoryInline 				; put address of string at (code-Ptr),y on stack
.938e	68		pla				pla 								; restore count and save
.938f	85 36		sta $36				sta 	zTemp0
.9391	98		tya				tya 								; add length to Y to skip it.
.9392	18		clc				clc
.9393	65 36		adc $36				adc 	zTemp0
.9395	a8		tay				tay
.9396	a9 10		lda #$10			lda 	#NSTString 					; mark as string
.9398	9d 00 06	sta $0600,x			sta 	NSStatus,x
.939b	60		rts				rts
.939c					_ETVariable:
.939c	4c f6 93	jmp $93f6			jmp 	VariableHandler
.939f					_ETPuncUnary:
.939f	c8		iny				iny 								; consume the unary character
.93a0	c9 2d		cmp #$2d			cmp 	#KWD_MINUS 					; unary minus
.93a2	f0 2d		beq $93d1			beq 	_ETUnaryNegate
.93a4	c9 10		cmp #$10			cmp 	#KWD_AT 					; @ reference -> constant
.93a6	f0 39		beq $93e1			beq 	_ETDereference
.93a8	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; parenthesis
.93aa	f0 43		beq $93ef			beq 	_ETParenthesis
.93ac	64 36		stz $36				stz 	zTemp0 						; zTemp0 is the indirection level.
.93ae	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; byte indirection (0) ?
.93b0	f0 06		beq $93b8			beq 	_ETIndirection
.93b2	e6 36		inc $36				inc 	zTemp0
.93b4	c9 21		cmp #$21			cmp 	#KWD_PLING					; word indirection (1) \
.93b6	d0 a0		bne $9358			bne 	_ETSyntaxError
.93b8					_ETIndirection:
.93b8	a5 36		lda $36				lda 	zTemp0 						; push indirection amount (0-1) => (1-2) on the stack
.93ba	1a		inc a				inc 	a
.93bb	48		pha				pha
.93bc	20 25 93	jsr $9325			jsr 	EvaluateTerm				; evaluate the term
.93bf	20 69 91	jsr $9169			jsr 	Dereference 				; dereference it.
.93c2	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a +ve integer.
.93c5	d0 07		bne $93ce			bne 	_ETTypeMismatch
.93c7	68		pla				pla 								; indirection 1-2
.93c8	09 20		ora #$20			ora 	#NSBIsReference 			; make it a reference.
.93ca	9d 00 06	sta $0600,x			sta 	NSStatus,x
.93cd	60		rts				rts
.93ce					_ETTypeMismatch:
.93ce	4c 7d a4	jmp $a47d			jmp 	TypeError
.93d1					_ETUnaryNegate:
.93d1	20 25 93	jsr $9325			jsr 	EvaluateTerm				; evaluate the term
.93d4	20 69 91	jsr $9169			jsr 	Dereference 				; dereference it.
.93d7	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a number
.93da	29 10		and #$10			and 	#NSTString
.93dc	d0 f0		bne $93ce			bne 	_ETTypeMismatch
.93de	4c 4a 97	jmp $974a			jmp 	NSMNegate  					; just toggles the sign bit.
.93e1					_ETDereference:
.93e1	20 25 93	jsr $9325			jsr 	EvaluateTerm				; evaluate the term
.93e4	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a reference
.93e7	29 20		and #$20			and 	#NSBIsReference
.93e9	f0 e3		beq $93ce			beq 	_ETTypeMismatch
.93eb	9e 00 06	stz $0600,x			stz 	NSStatus,x 					; make it an integer address
.93ee	60		rts				rts
.93ef					_ETParenthesis:
.93ef	20 54 90	jsr $9054			jsr 	EvaluateExpression 			; evaluate here, from lowest precedence
.93f2	20 91 9e	jsr $9e91			jsr 	CheckRightBracket 			; check for )
.93f5	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/variable.asm

.93f6					VariableHandler:
.93f6	b1 30		lda ($30),y			lda 	(codePtr),y
.93f8	18		clc				clc
.93f9	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.93fb	85 37		sta $37				sta 	zTemp0+1
.93fd	c8		iny				iny
.93fe	b1 30		lda ($30),y			lda 	(codePtr),y
.9400	85 36		sta $36				sta 	zTemp0
.9402	c8		iny				iny
.9403	18		clc				clc									; copy variable address+3 to mantissa
.9404	69 03		adc #$03			adc 	#3
.9406	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.9409	a5 37		lda $37				lda 	zTemp0+1
.940b	69 00		adc #$00			adc 	#0
.940d	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9410	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.9413	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.9416	9e 28 06	stz $0628,x			stz 	NSExponent,x
.9419	5a		phy				phy
.941a	a0 02		ldy #$02			ldy 	#2 							; read type
.941c	b1 36		lda ($36),y			lda 	(zTemp0),y
.941e	7a		ply				ply
.941f	29 1c		and #$1c			and 	#NSBTypeMask+NSBIsArray 	; get type information
.9421	09 20		ora #$20			ora 	#NSBIsReference 			; make a reference.
.9423	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9426	29 04		and #$04			and 	#NSBIsArray
.9428	d0 01		bne $942b			bne 	_VHArray
.942a	60		rts				rts
.942b					_VHArray:
.942b	e8		inx				inx
.942c	20 36 97	jsr $9736			jsr 	Evaluate8BitInteger 		; get the 1st index.
.942f	a9 ff		lda #$ff			lda 	#$FF 						; set Status of X+2 to a duff value so we know if we picked it up.
.9431	9d 01 06	sta $0601,x			sta 	NSStatus+1,x
.9434	b1 30		lda ($30),y			lda 	(codePtr),y
.9436	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.9438	d0 06		bne $9440			bne 	_VHNoSecondIndex
.943a	c8		iny				iny 								; skip the comma
.943b	e8		inx				inx
.943c	20 36 97	jsr $9736			jsr 	Evaluate8BitInteger 		; get the 2nd index.
.943f	ca		dex				dex
.9440					_VHNoSecondIndex:
.9440	ca		dex				dex 								; set X back.
.9441	20 91 9e	jsr $9e91			jsr 	CheckRightBracket 			; and check the right bracket.
.9444	5a		phy				phy 								; save position
.9445	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy record address to zaTemp
.9448	85 3e		sta $3e				sta 	zaTemp
.944a	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.944d	85 3f		sta $3f				sta 	zaTemp+1
.944f	a0 03		ldy #$03			ldy 	#3 							; get the second index - which is 0 if there is one index.
.9451	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9453	f0 02		beq $9457			beq 	_VHHas2Mask
.9455	a9 ff		lda #$ff			lda 	#$FF
.9457					_VHHas2Mask:
.9457	dd 02 06	cmp $0602,x			cmp 	NSStatus+2,x 				; so if they are the same there are the wrong number of indices
.945a	f0 54		beq $94b0			beq 	_VHBadIndex
.945c	0a		asl a				asl 	a 							; carry will be set if a second index
.945d	90 09		bcc $9468			bcc 	_VHCheckFirstIndex
.945f	a0 03		ldy #$03			ldy 	#3 			 				; check the 2nd size >= 2nd index
.9461	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9463	dd 0a 06	cmp $060a,x			cmp 	NSMantissa0+2,x
.9466	90 48		bcc $94b0			bcc 	_VHBadIndex
.9468					_VHCheckFirstIndex:
.9468	a0 02		ldy #$02			ldy 	#2 			 				; check the 2nd size >= 2nd index
.946a	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.946c	dd 09 06	cmp $0609,x			cmp 	NSMantissa0+1,x
.946f	90 3f		bcc $94b0			bcc 	_VHBadIndex
.9471	64 36		stz $36				stz 	zTemp0 						; clear zTemp0 (if 1 index)
.9473	64 37		stz $37				stz 	zTemp0+1
.9475	bd 02 06	lda $0602,x			lda 	NSStatus+2,x 				; if only one index provided, don't need to multiply
.9478	30 0f		bmi $9489			bmi 	_VHNoMultiply
.947a	da		phx				phx
.947b	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; get 2nd index on stack
.947e	48		pha				pha
.947f	a0 02		ldy #$02			ldy 	#2 							; get 1st size in A
.9481	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9483	1a		inc a				inc 	a 							; add 1 for zero base
.9484	fa		plx				plx
.9485	20 13 a3	jsr $a313			jsr 	Multiply8x8 				; calculate -> Z0
.9488	fa		plx				plx
.9489					_VHNoMultiply:
.9489	18		clc				clc
.948a	a5 36		lda $36				lda 	zTemp0
.948c	7d 09 06	adc $0609,x			adc 	NSMantissa0+1,x
.948f	85 36		sta $36				sta 	zTemp0
.9491	a5 37		lda $37				lda 	zTemp0+1
.9493	69 00		adc #$00			adc 	#0
.9495	85 37		sta $37				sta 	zTemp0+1
.9497	bd 00 06	lda $0600,x			lda 	NSStatus,x
.949a	20 cc 85	jsr $85cc			jsr 	ScaleByBaseType
.949d	18		clc				clc
.949e	b2 3e		lda ($3e)			lda 	(zaTemp)
.94a0	65 36		adc $36				adc 	zTemp0
.94a2	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.94a5	a0 01		ldy #$01			ldy 	#1
.94a7	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.94a9	65 37		adc $37				adc 	zTemp0+1
.94ab	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.94ae	7a		ply				ply 								; restore position
.94af	60		rts				rts
.94b0					_VHBadIndex:
.94b0	a9 17		lda #$17		lda	#23
.94b2	4c 4b 8c	jmp $8c4b		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/abs.asm

.a249					AbsUnary:
.a249	fa		plx				plx 								; restore stack pos
.a24a	20 f2 96	jsr $96f2			jsr 	EvaluateNumber 				; get a float or int
.a24d	20 91 9e	jsr $9e91			jsr 	CheckRightBracket
.a250	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; clear the sign bit
.a253	29 7f		and #$7f			and 	#$7F
.a255	9d 00 06	sta $0600,x			sta 	NSStatus,x
.a258	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/alloc.asm

.94b5					AllocUnary:
.94b5	fa		plx				plx 								; restore stack pos
.94b6	20 2a 97	jsr $972a			jsr 	Evaluate16BitInteger		; get bytes required.
.94b9	20 91 9e	jsr $9e91			jsr 	CheckRightBracket
.94bc	da		phx				phx 								; save X/Y
.94bd	5a		phy				phy
.94be	8a		txa				txa 								; copy X into Y
.94bf	a8		tay				tay
.94c0	b9 10 06	lda $0610,y			lda		NSMantissa1,y 				; get size
.94c3	aa		tax				tax
.94c4	b9 08 06	lda $0608,y			lda 	NSMantissa0,y
.94c7	20 d4 94	jsr $94d4			jsr 	AllocateXABytes 			; allocate memory
.94ca	99 08 06	sta $0608,y			sta 	NSMantissa0,y 				; write address out.
.94cd	8a		txa				txa
.94ce	99 10 06	sta $0610,y			sta 	NSMantissa1,y
.94d1	7a		ply				ply
.94d2	fa		plx				plx
.94d3	60		rts				rts
.94d4					AllocateXABytes:
.94d4	5a		phy				phy
.94d5	ac 0c 07	ldy $070c			ldy 	lowMemPtr 					; push current address on stack and to zTemp0
.94d8	84 36		sty $36				sty 	zTemp0
.94da	5a		phy				phy
.94db	ac 0d 07	ldy $070d			ldy 	lowMemPtr+1
.94de	84 37		sty $37				sty 	zTemp0+1
.94e0	5a		phy				phy
.94e1	18		clc				clc 								; add to low memory pointer
.94e2	6d 0c 07	adc $070c			adc 	lowMemPtr
.94e5	8d 0c 07	sta $070c			sta 	lowMemPtr
.94e8	8a		txa				txa
.94e9	6d 0d 07	adc $070d			adc 	lowMemPtr+1
.94ec	8d 0d 07	sta $070d			sta 	lowMemPtr+1
.94ef					_ClearMemory:
.94ef	ad 0c 07	lda $070c			lda 	lowMemPtr 					; cleared all memory allocated
.94f2	c5 36		cmp $36				cmp 	zTemp0
.94f4	d0 07		bne $94fd			bne 	_CMClearNext
.94f6	ad 0d 07	lda $070d			lda 	lowMemPtr+1
.94f9	c5 37		cmp $37				cmp 	zTemp0+1
.94fb	f0 0c		beq $9509			beq 	_CMExit
.94fd					_CMClearNext:
.94fd	a9 00		lda #$00			lda 	#0 							; clear byte, advance to next.
.94ff	92 36		sta ($36)			sta 	(zTemp0)
.9501	e6 36		inc $36				inc 	zTemp0
.9503	d0 ea		bne $94ef			bne 	_ClearMemory
.9505	e6 37		inc $37				inc		zTemp0+1
.9507	80 e6		bra $94ef			bra 	_ClearMemory
.9509					_CMExit:
.9509	fa		plx				plx
.950a	68		pla				pla
.950b	7a		ply				ply
.950c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/asc.asm

.a259					AscUnary:
.a259	fa		plx				plx 								; restore stack pos
.a25a	20 fd 96	jsr $96fd			jsr 	EvaluateString 				; get a string
.a25d	b2 36		lda ($36)			lda 	(zTemp0)					; get/return firs character
.a25f	20 a0 97	jsr $97a0			jsr 	NSMSetByte
.a262	20 91 9e	jsr $9e91			jsr 	CheckRightBracket
.a265	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/frac.asm

.a266					FracUnary:
.a266	fa		plx				plx 								; restore stack pos
.a267	20 f2 96	jsr $96f2			jsr 	EvaluateNumber 				; get a float or int
.a26a	20 91 9e	jsr $9e91			jsr 	CheckRightBracket
.a26d	bd 00 06	lda $0600,x			lda 	NSStatus,x
.a270	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.a272	f0 04		beq $a278			beq 	_IUZero
.a274	20 36 a1	jsr $a136			jsr 	FloatFractionalPart
.a277	60		rts				rts
.a278					_IUZero:
.a278	20 9e 97	jsr $979e			jsr 	NSMSetZero
.a27b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/int.asm

.a27c					IntUnary:
.a27c	fa		plx				plx 								; restore stack pos
.a27d	20 f2 96	jsr $96f2			jsr 	EvaluateNumber 				; get a float or int
.a280	20 91 9e	jsr $9e91			jsr 	CheckRightBracket
.a283	bd 00 06	lda $0600,x			lda 	NSStatus,x
.a286	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.a288	f0 03		beq $a28d			beq 	_IUExit
.a28a	20 99 a1	jsr $a199			jsr 	FloatIntegerPart
.a28d					_IUExit:
.a28d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/len.asm

.a28e					LenUnary:
.a28e	fa		plx				plx 								; restore stack pos
.a28f	20 fd 96	jsr $96fd			jsr 	EvaluateString 				; get a string
.a292	5a		phy				phy
.a293	a0 00		ldy #$00			ldy 	#0 							; find length
.a295					_LenFind:
.a295	b1 36		lda ($36),y			lda 	(zTemp0),y
.a297	f0 06		beq $a29f			beq 	_LenExit
.a299	c8		iny				iny
.a29a	d0 f9		bne $a295			bne 	_LenFind
.a29c	4c 78 a4	jmp $a478			jmp 	RangeError 					; string > 255
.a29f					_LenExit:
.a29f	98		tya				tya
.a2a0	20 a0 97	jsr $97a0			jsr 	NSMSetByte
.a2a3	7a		ply				ply
.a2a4	20 91 9e	jsr $9e91			jsr 	CheckRightBracket
.a2a7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/not.asm

.950d					Unary_Not:
.950d	fa		plx				plx
.950e	20 15 97	jsr $9715			jsr 	EvaluateInteger 			; get integer
.9511	20 91 9e	jsr $9e91			jsr 	CheckRightBracket
.9514	20 ce 97	jsr $97ce			jsr 	NSMIsZero 					; zero mantissa ?
.9517	f0 04		beq $951d			beq 	_NotZero
.9519	20 9e 97	jsr $979e			jsr 	NSMSetZero
.951c	60		rts				rts
.951d					_NotZero:
.951d	4c b8 8c	jmp $8cb8			jmp 	ReturnTrue
.9520					_UNBad:
.9520	4c 82 a4	jmp $a482			jmp 	ArgumentError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/rnd.asm

.9523					Unary_Rnd:
.9523	20 f2 96	jsr $96f2			jsr 	EvaluateNumber 				; number to use.
.9526	20 91 9e	jsr $9e91			jsr 	CheckRightBracket 			; closing bracket
.9529	20 52 95	jsr $9552			jsr 	Random32Bit 				; generate a number.
.952c	ad 08 07	lda $0708			lda 	RandomSeed+0
.952f	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.9532	ad 09 07	lda $0709			lda 	RandomSeed+1
.9535	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9538	ad 0a 07	lda $070a			lda 	RandomSeed+2
.953b	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.953e	ad 0b 07	lda $070b			lda 	RandomSeed+3
.9541	29 7f		and #$7f			and 	#$7F 						; make legal mantissa
.9543	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.9546	a9 e1		lda #$e1			lda 	#-31 						; force into 0-1 range
.9548	8d 28 06	sta $0628			sta 	NSExponent
.954b	a9 08		lda #$08			lda 	#NSTFloat
.954d	8d 00 06	sta $0600			sta 	NSStatus 					; positive.
>9550	db						.byte 	$DB 						; causes a break in the emulator
.9551	60		rts				rts
.9552					Random32Bit:
.9552	5a		phy				phy
.9553	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.9555	ad 08 07	lda $0708			lda 	RandomSeed+0 				; check the seed isn't zero
.9558	d0 03		bne $955d			bne 	_Random1
.955a	a8		tay				tay 								; if so do it 256 times
.955b	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.955d					_Random1:
.955d	0a		asl a				asl 	a 							; LSFR RNG
.955e	2e 09 07	rol $0709			rol 	RandomSeed+1
.9561	2e 0a 07	rol $070a			rol 	RandomSeed+2
.9564	2e 0b 07	rol $070b			rol 	RandomSeed+3
.9567	90 02		bcc $956b			bcc 	_Random2
.9569	49 c5		eor #$c5			eor 	#$C5
.956b					_Random2:
.956b	88		dey				dey
.956c	d0 ef		bne $955d			bne 	_Random1
.956e	7a		ply				ply
.956f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/sgn.asm

.a2a8					SgnUnary:
.a2a8	fa		plx				plx 								; restore stack pos
.a2a9	20 f2 96	jsr $96f2			jsr 	EvaluateNumber 				; get a float or int
.a2ac	20 91 9e	jsr $9e91			jsr 	CheckRightBracket
.a2af	20 ce 97	jsr $97ce			jsr 	NSMIsZero 					; if zero
.a2b2	f0 10		beq $a2c4			beq 	_SGZero  					; return Int Zero
.a2b4	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get status w/sign
.a2b7	48		pha				pha
.a2b8	a9 01		lda #$01			lda 	#1 							; set to 1
.a2ba	20 a0 97	jsr $97a0			jsr 	NSMSetByte
.a2bd	68		pla				pla
.a2be	29 80		and #$80			and		#$80 						; copy the sign byte out
.a2c0	9d 00 06	sta $0600,x			sta 	NSStatus,x
.a2c3	60		rts				rts
.a2c4	20 9e 97	jsr $979e	_SGZero:jsr 	NSMSetZero
.a2c7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/val.asm

.a2c8					ValUnary:
.a2c8	fa		plx				plx 								; restore stack pos
.a2c9	20 de a2	jsr $a2de			jsr 	ValMainCode 				; do the main val() code
.a2cc	b0 01		bcs $a2cf			bcs 	_VUError 					; couldn't convert
.a2ce	60		rts				rts
.a2cf					_VUError:
.a2cf	4c 7d a4	jmp $a47d			jmp 	TypeError
.a2d2					IsValUnary:
.a2d2	fa		plx				plx 								; restore stack pos
.a2d3	20 de a2	jsr $a2de			jsr 	ValMainCode 				; do the main val() code
.a2d6	b0 03		bcs $a2db			bcs 	_VUBad
.a2d8	4c b8 8c	jmp $8cb8			jmp 	ReturnTrue
.a2db					_VUBad:
.a2db	4c c4 8c	jmp $8cc4			jmp 	ReturnFalse
.a2de					ValMainCode:
.a2de	20 fd 96	jsr $96fd			jsr 	EvaluateString 				; get a string
.a2e1	20 91 9e	jsr $9e91			jsr 	CheckRightBracket 			; check right bracket present
.a2e4	5a		phy				phy
.a2e5	b2 36		lda ($36)			lda 	(zTemp0) 					; check not empty string
.a2e7	f0 17		beq $a300			beq 	_VMCFail2
.a2e9	a0 ff		ldy #$ff			ldy 	#$FF 						; start position
.a2eb	48		pha				pha 								; save first character
.a2ec	c9 2d		cmp #$2d			cmp 	#"-"		 				; is it -
.a2ee	d0 01		bne $a2f1			bne 	_VMCStart
.a2f0	c8		iny				iny 								; skip over -
.a2f1					_VMCStart:
.a2f1	38		sec				sec 								; initialise first time round.
.a2f2					_VMCNext:
.a2f2	c8		iny				iny 								; pre-increment
.a2f3	b1 36		lda ($36),y			lda 	(zTemp0),y 					; next character
.a2f5	f0 0c		beq $a303			beq 	_VMCSuccess 				; successful.
.a2f7	20 07 92	jsr $9207			jsr 	EncodeNumber 				; send it to the number-builder
.a2fa	90 03		bcc $a2ff			bcc 	_VMCFail 					; if failed, give up.
.a2fc	18		clc				clc 								; next time round, countinue
.a2fd	80 f3		bra $a2f2			bra 	_VMCNext
.a2ff					_VMCFail:
.a2ff	68		pla				pla
.a300					_VMCFail2:
.a300	7a		ply				ply
.a301	38		sec				sec
.a302	60		rts				rts
.a303					_VMCSuccess:
.a303	a9 00		lda #$00			lda 	#0 							; construct final
.a305	20 07 92	jsr $9207			jsr 	EncodeNumber
.a308	68		pla				pla
.a309	c9 2d		cmp #$2d			cmp 	#"-"
.a30b	d0 03		bne $a310			bne 	_VMCNotNegative
.a30d	20 4a 97	jsr $974a			jsr		NSMNegate
.a310					_VMCNotNegative:
.a310	7a		ply				ply
.a311	18		clc				clc
.a312	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/chr.asm

.9570					ChrUnary:
.9570	fa		plx				plx 								; restore stack pos
.9571	20 36 97	jsr $9736			jsr 	Evaluate8BitInteger			; get value
.9574	48		pha				pha
.9575	20 91 9e	jsr $9e91			jsr 	CheckRightBracket
.9578	a9 01		lda #$01			lda 	#1 							; allocate space for one char
.957a	20 94 a6	jsr $a694			jsr 	StringTempAllocate
.957d	68		pla				pla 								; write number to it
.957e	20 d2 a6	jsr $a6d2			jsr 	StringTempWrite
.9581	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/spc.asm

.9582					SpcUnary:
.9582	fa		plx				plx 								; restore stack pos
.9583	20 36 97	jsr $9736			jsr 	Evaluate8BitInteger			; get value
.9586	5a		phy				phy
.9587	48		pha				pha 								; save count
.9588	20 94 a6	jsr $a694			jsr 	StringTempAllocate
.958b	7a		ply				ply 								; to do count in Y
.958c					_SpcLoop:
.958c	c0 00		cpy #$00			cpy 	#0
.958e	f0 08		beq $9598			beq 	_SpcExit
.9590	a9 20		lda #$20			lda 	#32
.9592	20 d2 a6	jsr $a6d2			jsr 	StringTempWrite
.9595	88		dey				dey
.9596	80 f4		bra $958c			bra 	_SPCLoop
.9598					_SpcExit:
.9598	7a		ply				ply
.9599	20 91 9e	jsr $9e91			jsr 	CheckRightBracket
.959c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/str.asm

.959d					Unary_Str:
.959d	fa		plx				plx
.959e	20 f2 96	jsr $96f2			jsr 	EvaluateNumber  			; get number
.95a1	20 91 9e	jsr $9e91			jsr 	CheckRightBracket 			; closing bracket
.95a4	a9 05		lda #$05			lda 	#5 							; maximum decimals, from Basic816
.95a6	20 bf 95	jsr $95bf			jsr 	ConvertNumberToString 		; do the conversion.
.95a9	a9 21		lda #$21			lda		#33 						; create buffer
.95ab	20 94 a6	jsr $a694			jsr 	StringTempAllocate 			; allocate memory
.95ae	da		phx				phx
.95af	a2 00		ldx #$00			ldx 	#0
.95b1					_USCopy:
.95b1	bd 98 08	lda $0898,x			lda 	DecimalBuffer,x
.95b4	20 d2 a6	jsr $a6d2			jsr 	StringTempWrite
.95b7	e8		inx				inx
.95b8	bd 98 08	lda $0898,x			lda 	DecimalBuffer,x
.95bb	d0 f4		bne $95b1			bne 	_USCopy
.95bd	fa		plx				plx
.95be	60		rts				rts
.95bf					ConvertNumberToString:
.95bf	5a		phy				phy 								; save code position
.95c0	8d 14 07	sta $0714			sta 	DecimalPlaces	 			; save number of DPs.
.95c3	9c 15 07	stz $0715			stz 	dbOffset 					; offset into decimal buffer = start.
.95c6	bd 00 06	lda $0600,x			lda 	NSStatus,x  				; is it -ve.
.95c9	10 0a		bpl $95d5			bpl 	_CNTSNotNegative
.95cb	29 7f		and #$7f			and 	#$7F 						; make +ve
.95cd	9d 00 06	sta $0600,x			sta 	NSStatus,x
.95d0	a9 2d		lda #$2d			lda 	#"-"
.95d2	20 3b 96	jsr $963b			jsr 	WriteDecimalBuffer
.95d5					_CNTSNotNegative:
.95d5	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if decimal
.95d8	f0 15		beq $95ef			beq 	_CNTSNotFloat
.95da	e8		inx				inx 								; round up
.95db	a9 01		lda #$01			lda 	#1
.95dd	20 a0 97	jsr $97a0			jsr 	NSMSetByte
.95e0	ca		dex				dex
.95e1	bd 28 06	lda $0628,x			lda		NSExponent,x
.95e4	9d 29 06	sta $0629,x			sta 	NSExponent+1,x
.95e7	a9 08		lda #$08			lda 	#NSTFloat
.95e9	9d 01 06	sta $0601,x			sta 	NSStatus+1,x
.95ec	20 58 a0	jsr $a058			jsr 	FloatAdd
.95ef					_CNTSNotFloat:
.95ef	20 1d 96	jsr $961d			jsr 	MakePlusTwoString
.95f2	20 36 a1	jsr $a136			jsr 	FloatFractionalPart 		; get the fractional part
.95f5	20 fa a1	jsr $a1fa			jsr 	NSNormalise					; normalise , exit if zero
.95f8	f0 21		beq $961b			beq 	_CNTSExit
.95fa	a9 2e		lda #$2e			lda 	#"."
.95fc	20 3b 96	jsr $963b			jsr 	WriteDecimalBuffer 			; write decimal place
.95ff					_CNTSDecimal:
.95ff	ce 14 07	dec $0714			dec 	DecimalPlaces 				; done all the decimals
.9602	30 17		bmi $961b			bmi 	_CNTSExit
.9604	e8		inx				inx 								; x 10.0
.9605	a9 0a		lda #$0a			lda 	#10
.9607	20 a0 97	jsr $97a0			jsr 	NSMSetByte
.960a	a9 08		lda #$08			lda 	#NSTFloat
.960c	9d 00 06	sta $0600,x			sta 	NSStatus,x
.960f	ca		dex				dex
.9610	20 c3 a1	jsr $a1c3			jsr 	FloatMultiply
.9613	20 1d 96	jsr $961d			jsr 	MakePlusTwoString
.9616	20 36 a1	jsr $a136			jsr 	FloatFractionalPart 		; get the fractional part
.9619	80 e4		bra $95ff			bra 	_CNTSDecimal 				; keep going.
.961b					_CNTSExit:
.961b	7a		ply				ply
.961c	60		rts				rts
.961d					MakePlusTwoString:
.961d	da		phx				phx
.961e	20 75 97	jsr $9775			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.9621	e8		inx				inx 								; access it
.9622	e8		inx				inx
.9623	20 99 a1	jsr $a199			jsr 	FloatIntegerPart 			; make it an integer
.9626	a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.9628	20 02 a0	jsr $a002			jsr 	ConvertInt32
.962b	a2 00		ldx #$00			ldx	 	#0
.962d					_MPTSCopy:
.962d	bd 76 08	lda $0876,x			lda 	NumberBuffer,x
.9630	20 3b 96	jsr $963b			jsr 	WriteDecimalBuffer
.9633	e8		inx				inx
.9634	bd 76 08	lda $0876,x			lda 	NumberBuffer,x
.9637	d0 f4		bne $962d			bne 	_MPTSCopy
.9639	fa		plx				plx
.963a	60		rts				rts
.963b					WriteDecimalBuffer:
.963b	da		phx				phx
.963c	ae 15 07	ldx $0715			ldx 	dbOffset
.963f	9d 98 08	sta $0898,x			sta 	DecimalBuffer,x
.9642	9e 99 08	stz $0899,x			stz 	DecimalBuffer+1,x
.9645	ee 15 07	inc $0715			inc 	dbOffset
.9648	fa		plx				plx
.9649	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/substring.asm

.964a					Unary_Left:
.964a	fa		plx				plx
.964b	18		clc				clc 								; only one parameter
.964c	20 c1 96	jsr $96c1			jsr 	SubstringInitial 			; set up.
.964f	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; Param #1 is the length
.9652	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.9655	9e 09 06	stz $0609,x			stz 	NSMantissa0+1,x 			; Start is zero.
.9658	80 2c		bra $9686			bra 	SubstringMain
.965a					Unary_Right:
.965a	fa		plx				plx
.965b	18		clc				clc 								; only one parameter
.965c	20 c1 96	jsr $96c1			jsr 	SubstringInitial 			; set up.
.965f	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; length => param 2
.9662	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.9665	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; total length
.9668	fd 09 06	sbc $0609,x			sbc 	NSMantissa0+1,x 			; length - required.
.966b	b0 02		bcs $966f			bcs 	_URNotUnderflow
.966d	a9 00		lda #$00			lda 	#0 							; start from the beginning, as something like right$("AB",3)
.966f					_URNotUnderFlow:
.966f	9d 09 06	sta $0609,x			sta 	NSMantissa0+1,x 			; this is the start position
.9672	80 12		bra $9686			bra 	SubStringMain
.9674					Unary_Mid:
.9674	fa		plx				plx
.9675	38		sec				sec 								; two parameters
.9676	20 c1 96	jsr $96c1			jsr 	SubstringInitial 			; set up.
.9679	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; first parameter is zero ?
.967c	f0 05		beq $9683			beq 	_UMError
.967e	de 09 06	dec $0609,x			dec 	NSMantissa0+1,x				; reduce initial offset by 1 as MID$(a$,1..) is actually the first character
.9681	80 03		bra $9686			bra 	SubStringMain
.9683					_UMError:
.9683	4c 82 a4	jmp $a482			jmp 	ArgumentError
.9686					SubStringMain:
.9686	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; is the initial offset >= the length
.9689	dd 28 06	cmp $0628,x			cmp 	NSExponent,x
.968c	b0 2d		bcs $96bb			bcs 	_SSMNull 					; if so, return an empty string.
.968e	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; if copy count is zero
.9691	f0 28		beq $96bb			beq 	_SSMNull 					; return empty string.
.9693	18		clc				clc 								; add the offset +1 to the address and
.9694	bd 08 06	lda $0608,x			lda	 	NSMantissa0,x 				; put in zTemp
.9697	7d 09 06	adc $0609,x			adc 	NSMantissa0+1,x
.969a	85 36		sta $36				sta 	zTemp0
.969c	bd 10 06	lda $0610,x			lda	 	NSMantissa1,x
.969f	69 00		adc #$00			adc 	#0
.96a1	85 37		sta $37				sta 	zTemp0+1
.96a3					_SSMNoCarry:
.96a3	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; characters required.
.96a6	20 94 a6	jsr $a694			jsr 	StringTempAllocate 			; allocate that many characters
.96a9	5a		phy				phy 								; save Y
.96aa	a0 00		ldy #$00			ldy 	#0 							; start copying in.
.96ac					_SSMCopy:
.96ac	b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next character
.96ae	f0 09		beq $96b9			beq 	_SSMEString 				; no more to copy
.96b0	20 d2 a6	jsr $a6d2			jsr 	StringTempWrite 			; and write it out.
.96b3	c8		iny				iny
.96b4	de 0a 06	dec $060a,x			dec 	NSMantissa0+2,x
.96b7	d0 f3		bne $96ac			bne 	_SSMCopy
.96b9					_SSMEString:
.96b9	7a		ply				ply
.96ba					_SSMExit:
.96ba	60		rts				rts
.96bb					_SSMNull:
.96bb	a9 00		lda #$00			lda 	#0
.96bd	20 94 a6	jsr $a694			jsr 	StringTempAllocate
.96c0	60		rts				rts
.96c1					SubstringInitial:
.96c1	da		phx				phx 								; save initial stack position
.96c2	08		php				php 								; save carry on stack indicating 2 parameters
.96c3	20 fd 96	jsr $96fd			jsr 	EvaluateString 				; get a string
.96c6	5a		phy				phy 								; calculate length to exponent.
.96c7	a0 ff		ldy #$ff			ldy 	#$FF
.96c9					_SIFindLength:
.96c9	c8		iny				iny
.96ca	b1 36		lda ($36),y			lda 	(zTemp0),y
.96cc	d0 fb		bne $96c9			bne 	_SIFindLength
.96ce	98		tya				tya
.96cf	9d 28 06	sta $0628,x			sta 	NSExponent,x
.96d2	7a		ply				ply
.96d3	e8		inx				inx
.96d4	20 99 9e	jsr $9e99			jsr 	CheckComma 					; comma next
.96d7	20 36 97	jsr $9736			jsr 	Evaluate8BitInteger 		; get next parameter
.96da	28		plp				plp 								; is it the last parameter ?
.96db	90 07		bcc $96e4			bcc 	_SSIExit 					; if so, exit.
.96dd	e8		inx				inx
.96de	20 99 9e	jsr $9e99			jsr 	CheckComma 					; comma next
.96e1	20 36 97	jsr $9736			jsr 	Evaluate8BitInteger 		; get last parameter
.96e4					_SSIExit:
.96e4	fa		plx				plx
.96e5	20 91 9e	jsr $9e91			jsr 	CheckRightBracket 			; check closing bracket
.96e8	60		rts				rts 								; exit

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/exprhelper.asm

.96e9					EvaluateValue:
.96e9	48		pha				pha
.96ea	20 54 90	jsr $9054			jsr		EvaluateExpression 			; expression
.96ed	20 69 91	jsr $9169			jsr 	Dereference					; derefernce it
.96f0	68		pla				pla
.96f1	60		rts				rts
.96f2					EvaluateNumber:
.96f2	20 e9 96	jsr $96e9			jsr 	EvaluateValue 				; get a value
.96f5	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if string.
.96f8	29 10		and #$10			and 	#NSBIsString
.96fa	d0 16		bne $9712			bne 	HelperTypeError
.96fc	60		rts				rts
.96fd					EvaluateString:
.96fd	20 e9 96	jsr $96e9			jsr 	EvaluateValue 				; get a value
.9700	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if string.
.9703	29 10		and #$10			and 	#NSBIsString
.9705	f0 0b		beq $9712			beq 	HelperTypeError
.9707					CopyAddressToTemp0:
.9707	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy address -> zTemp0
.970a	85 36		sta $36				sta 	zTemp0
.970c	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.970f	85 37		sta $37				sta 	zTemp0+1
.9711	60		rts				rts
.9712					HelperTypeError:
.9712	4c 7d a4	jmp $a47d			jmp 	TypeError
.9715					EvaluateInteger:
.9715	20 f2 96	jsr $96f2			jsr 	EvaluateNumber
.9718	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check exponent is zero
.971b	d0 0a		bne $9727			bne 	HelperValueError 			; if not, it's a float.
.971d	60		rts				rts
.971e					EvaluateUnsignedInteger:
.971e	20 15 97	jsr $9715			jsr 	EvaluateInteger 			; check integer is +ve
.9721	bd 00 06	lda $0600,x			lda 	NSStatus,x
.9724	30 01		bmi $9727			bmi 	HelperValueError
.9726	60		rts				rts
.9727					HelperValueError:
.9727	4c 82 a4	jmp $a482			jmp 	ArgumentError
.972a					Evaluate16BitInteger:
.972a	20 1e 97	jsr $971e			jsr	 	EvaluateUnsignedInteger		; get integer
.972d	bd 20 06	lda $0620,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.9730	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.9733	d0 f2		bne $9727			bne 	HelperValueError
.9735	60		rts				rts
.9736					Evaluate8BitInteger:
.9736	20 1e 97	jsr $971e			jsr	 	EvaluateUnsignedInteger 	; get an integer
.9739	d0 ec		bne $9727			bne 	HelperValueError
.973b	bd 20 06	lda $0620,x			lda 	NSMantissa3,x	 			; bytes 1, 2 & 3 must be zero
.973e	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.9741	1d 10 06	ora $0610,x			ora 	NSMantissa1,x
.9744	d0 e1		bne $9727			bne 	HelperValueError
.9746	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.9749	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/mult8x8.asm

.a313					Multiply8x8:
.a313	4a		lsr a		  		lsr 	a  							; prime the carry bit for the loop
.a314	85 36		sta $36			  	sta 	zTemp0
.a316	86 37		stx $37				stx 	zTemp0+1
.a318	a9 00		lda #$00			lda 	#0
.a31a	a2 08		ldx #$08			ldx 	#8
.a31c					_M88Loop:
.a31c	90 03		bcc $a321			bcc 	_M88NoAdd
.a31e	18		clc				clc
.a31f	65 37		adc $37				adc 	zTemp0+1
.a321					_M88NoAdd:
.a321	6a		ror a				ror 	a
.a322	66 36		ror $36				ror 	zTemp0  					; pull another bit out for the next iteration
.a324	ca		dex				dex         						; inc/dec don't modify carry; only shifts and adds do
.a325	d0 f5		bne $a31c			bne 	_M88Loop
.a327	85 37		sta $37				sta 	zTemp0+1 					; store high 8 bits.
.a329	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/utility.asm

.974a					NSMNegate:
.974a	bd 00 06	lda $0600,x			lda 	NSStatus,x
.974d	49 80		eor #$80			eor 	#NSBIsNegative
.974f	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9752	60		rts				rts
.9753					NSMNegateMantissa:
.9753	38		sec				sec
.9754	a9 00		lda #$00			lda 	#0
.9756	fd 08 06	sbc $0608,x			sbc 	NSMantissa0,x
.9759	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.975c	a9 00		lda #$00			lda 	#0
.975e	fd 10 06	sbc $0610,x			sbc 	NSMantissa1,x
.9761	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9764	a9 00		lda #$00			lda 	#0
.9766	fd 18 06	sbc $0618,x			sbc 	NSMantissa2,x
.9769	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.976c	a9 00		lda #$00			lda 	#0
.976e	fd 20 06	sbc $0620,x			sbc 	NSMantissa3,x
.9771	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.9774	60		rts				rts
.9775					NSMShiftUpTwo:
.9775	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.9778	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.977b	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.977e	9d 12 06	sta $0612,x			sta 	NSMantissa1+2,x
.9781	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.9784	9d 1a 06	sta $061a,x			sta 	NSMantissa2+2,x
.9787	bd 20 06	lda $0620,x			lda 	NSMantissa3,x
.978a	9d 22 06	sta $0622,x			sta 	NSMantissa3+2,x
.978d	bd 28 06	lda $0628,x			lda 	NSExponent,x
.9790	9d 2a 06	sta $062a,x			sta 	NSExponent+2,x
.9793	bd 00 06	lda $0600,x			lda 	NSStatus,x
.9796	9d 02 06	sta $0602,x			sta 	NSStatus+2,x
.9799	60		rts				rts
.979a					NSMSetZeroMantissaOnly:
.979a	a9 00		lda #$00			lda 	#0
.979c	80 08		bra $97a6			bra 	NSMSetMantissa
.979e					NSMSetZero:
.979e	a9 00		lda #$00			lda 	#0
.97a0					NSMSetByte:
.97a0	9e 28 06	stz $0628,x			stz 	NSExponent,x 				; zero exponent, as integer.
.97a3	9e 00 06	stz $0600,x			stz 	NSStatus,x 					; status zero (integer)
.97a6					NSMSetMantissa:
.97a6	9d 08 06	sta $0608,x			sta 	NSMantissa0,x 				; mantissa
.97a9	9e 10 06	stz $0610,x			stz 	NSMantissa1,x
.97ac	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.97af	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.97b2	60		rts				rts
.97b3					NSMShiftLeft:
.97b3	18		clc				clc
.97b4					NSMRotateLeft:
.97b4	3e 08 06	rol $0608,x			rol 	NSMantissa0,x
.97b7	3e 10 06	rol $0610,x			rol		NSMantissa1,x
.97ba	3e 18 06	rol $0618,x			rol		NSMantissa2,x
.97bd	3e 20 06	rol $0620,x			rol		NSMantissa3,x
.97c0	60		rts				rts
.97c1					NSMShiftRight:
.97c1	5e 20 06	lsr $0620,x			lsr 	NSMantissa3,x
.97c4	7e 18 06	ror $0618,x			ror		NSMantissa2,x
.97c7	7e 10 06	ror $0610,x			ror		NSMantissa1,x
.97ca	7e 08 06	ror $0608,x			ror		NSMantissa0,x
.97cd	60		rts				rts
.97ce					NSMIsZero:
.97ce	bd 20 06	lda $0620,x			lda 	NSMantissa3,x
.97d1	1d 18 06	ora $0618,x			ora		NSMantissa2,x
.97d4	1d 10 06	ora $0610,x			ora		NSMantissa1,x
.97d7	1d 08 06	ora $0608,x			ora		NSMantissa0,x
.97da	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/asmcore.asm

.a32a					Assemble_ora:
.a32a	20 fa 81	jsr $81fa		jsr	AssembleGroup1
>a32d	01					.byte $01
.a32e					Assemble_and:
.a32e	20 fa 81	jsr $81fa		jsr	AssembleGroup1
>a331	21					.byte $21
.a332					Assemble_eor:
.a332	20 fa 81	jsr $81fa		jsr	AssembleGroup1
>a335	41					.byte $41
.a336					Assemble_adc:
.a336	20 fa 81	jsr $81fa		jsr	AssembleGroup1
>a339	61					.byte $61
.a33a					Assemble_sta:
.a33a	20 fa 81	jsr $81fa		jsr	AssembleGroup1
>a33d	81					.byte $81
.a33e					Assemble_lda:
.a33e	20 fa 81	jsr $81fa		jsr	AssembleGroup1
>a341	a1					.byte $a1
.a342					Assemble_cmp:
.a342	20 fa 81	jsr $81fa		jsr	AssembleGroup1
>a345	c1					.byte $c1
.a346					Assemble_sbc:
.a346	20 fa 81	jsr $81fa		jsr	AssembleGroup1
>a349	e1					.byte $e1
.a34a					Assemble_asl:
.a34a	20 01 82	jsr $8201		jsr	AssembleGroup2
>a34d	02					.byte $02
>a34e	75					.byte $75
.a34f					Assemble_rol:
.a34f	20 01 82	jsr $8201		jsr	AssembleGroup2
>a352	22					.byte $22
>a353	75					.byte $75
.a354					Assemble_lsr:
.a354	20 01 82	jsr $8201		jsr	AssembleGroup2
>a357	42					.byte $42
>a358	75					.byte $75
.a359					Assemble_ror:
.a359	20 01 82	jsr $8201		jsr	AssembleGroup2
>a35c	62					.byte $62
>a35d	75					.byte $75
.a35e					Assemble_stx:
.a35e	20 01 82	jsr $8201		jsr	AssembleGroup2
>a361	82					.byte $82
>a362	50					.byte $50
.a363					Assemble_ldx:
.a363	20 01 82	jsr $8201		jsr	AssembleGroup2
>a366	a2					.byte $a2
>a367	d0					.byte $d0
.a368					Assemble_dec:
.a368	20 01 82	jsr $8201		jsr	AssembleGroup2
>a36b	c2					.byte $c2
>a36c	55					.byte $55
.a36d					Assemble_inc:
.a36d	20 01 82	jsr $8201		jsr	AssembleGroup2
>a370	e2					.byte $e2
>a371	55					.byte $55
.a372					Assemble_stz:
.a372	20 01 82	jsr $8201		jsr	AssembleGroup2
>a375	60					.byte $60
>a376	44					.byte $44
.a377					Assemble_bit:
.a377	20 01 82	jsr $8201		jsr	AssembleGroup2
>a37a	20					.byte $20
>a37b	55					.byte $55
.a37c					Assemble_sty:
.a37c	20 01 82	jsr $8201		jsr	AssembleGroup2
>a37f	80					.byte $80
>a380	54					.byte $54
.a381					Assemble_ldy:
.a381	20 01 82	jsr $8201		jsr	AssembleGroup2
>a384	a0					.byte $a0
>a385	d5					.byte $d5
.a386					Assemble_cpy:
.a386	20 01 82	jsr $8201		jsr	AssembleGroup2
>a389	c0					.byte $c0
>a38a	d4					.byte $d4
.a38b					Assemble_cpx:
.a38b	20 01 82	jsr $8201		jsr	AssembleGroup2
>a38e	e0					.byte $e0
>a38f	d0					.byte $d0
.a390					Assemble_tsb:
.a390	20 01 82	jsr $8201		jsr	AssembleGroup2
>a393	00					.byte $00
>a394	50					.byte $50
.a395					Assemble_trb:
.a395	20 01 82	jsr $8201		jsr	AssembleGroup2
>a398	10					.byte $10
>a399	50					.byte $50
.a39a					Assemble_jsr:
.a39a	20 01 82	jsr $8201		jsr	AssembleGroup2
>a39d	14					.byte $14
>a39e	10					.byte $10
.a39f					Assemble_jmp:
.a39f	20 01 82	jsr $8201		jsr	AssembleGroup2
>a3a2	40					.byte $40
>a3a3	10					.byte $10
.a3a4					Assemble_bpl:
.a3a4	20 52 82	jsr $8252		jsr	AssembleGroup3
>a3a7	10					.byte $10
.a3a8					Assemble_bmi:
.a3a8	20 52 82	jsr $8252		jsr	AssembleGroup3
>a3ab	30					.byte $30
.a3ac					Assemble_bvc:
.a3ac	20 52 82	jsr $8252		jsr	AssembleGroup3
>a3af	50					.byte $50
.a3b0					Assemble_bvs:
.a3b0	20 52 82	jsr $8252		jsr	AssembleGroup3
>a3b3	70					.byte $70
.a3b4					Assemble_bcc:
.a3b4	20 52 82	jsr $8252		jsr	AssembleGroup3
>a3b7	90					.byte $90
.a3b8					Assemble_bcs:
.a3b8	20 52 82	jsr $8252		jsr	AssembleGroup3
>a3bb	b0					.byte $b0
.a3bc					Assemble_bne:
.a3bc	20 52 82	jsr $8252		jsr	AssembleGroup3
>a3bf	d0					.byte $d0
.a3c0					Assemble_beq:
.a3c0	20 52 82	jsr $8252		jsr	AssembleGroup3
>a3c3	f0					.byte $f0
.a3c4					Assemble_bra:
.a3c4	20 52 82	jsr $8252		jsr	AssembleGroup3
>a3c7	80					.byte $80
.a3c8					Assemble_brk:
.a3c8	20 88 82	jsr $8288		jsr	AssembleGroup4
>a3cb	00					.byte $00
.a3cc					Assemble_php:
.a3cc	20 88 82	jsr $8288		jsr	AssembleGroup4
>a3cf	08					.byte $08
.a3d0					Assemble_clc:
.a3d0	20 88 82	jsr $8288		jsr	AssembleGroup4
>a3d3	18					.byte $18
.a3d4					Assemble_plp:
.a3d4	20 88 82	jsr $8288		jsr	AssembleGroup4
>a3d7	28					.byte $28
.a3d8					Assemble_sec:
.a3d8	20 88 82	jsr $8288		jsr	AssembleGroup4
>a3db	38					.byte $38
.a3dc					Assemble_rti:
.a3dc	20 88 82	jsr $8288		jsr	AssembleGroup4
>a3df	40					.byte $40
.a3e0					Assemble_pha:
.a3e0	20 88 82	jsr $8288		jsr	AssembleGroup4
>a3e3	48					.byte $48
.a3e4					Assemble_cli:
.a3e4	20 88 82	jsr $8288		jsr	AssembleGroup4
>a3e7	58					.byte $58
.a3e8					Assemble_phy:
.a3e8	20 88 82	jsr $8288		jsr	AssembleGroup4
>a3eb	5a					.byte $5a
.a3ec					Assemble_rts:
.a3ec	20 88 82	jsr $8288		jsr	AssembleGroup4
>a3ef	60					.byte $60
.a3f0					Assemble_pla:
.a3f0	20 88 82	jsr $8288		jsr	AssembleGroup4
>a3f3	68					.byte $68
.a3f4					Assemble_sei:
.a3f4	20 88 82	jsr $8288		jsr	AssembleGroup4
>a3f7	78					.byte $78
.a3f8					Assemble_ply:
.a3f8	20 88 82	jsr $8288		jsr	AssembleGroup4
>a3fb	7a					.byte $7a
.a3fc					Assemble_dey:
.a3fc	20 88 82	jsr $8288		jsr	AssembleGroup4
>a3ff	88					.byte $88
.a400					Assemble_txa:
.a400	20 88 82	jsr $8288		jsr	AssembleGroup4
>a403	8a					.byte $8a
.a404					Assemble_tya:
.a404	20 88 82	jsr $8288		jsr	AssembleGroup4
>a407	98					.byte $98
.a408					Assemble_txs:
.a408	20 88 82	jsr $8288		jsr	AssembleGroup4
>a40b	9a					.byte $9a
.a40c					Assemble_tay:
.a40c	20 88 82	jsr $8288		jsr	AssembleGroup4
>a40f	a8					.byte $a8
.a410					Assemble_tax:
.a410	20 88 82	jsr $8288		jsr	AssembleGroup4
>a413	aa					.byte $aa
.a414					Assemble_clv:
.a414	20 88 82	jsr $8288		jsr	AssembleGroup4
>a417	b8					.byte $b8
.a418					Assemble_tsx:
.a418	20 88 82	jsr $8288		jsr	AssembleGroup4
>a41b	ba					.byte $ba
.a41c					Assemble_iny:
.a41c	20 88 82	jsr $8288		jsr	AssembleGroup4
>a41f	c8					.byte $c8
.a420					Assemble_dex:
.a420	20 88 82	jsr $8288		jsr	AssembleGroup4
>a423	ca					.byte $ca
.a424					Assemble_cld:
.a424	20 88 82	jsr $8288		jsr	AssembleGroup4
>a427	d8					.byte $d8
.a428					Assemble_phx:
.a428	20 88 82	jsr $8288		jsr	AssembleGroup4
>a42b	da					.byte $da
.a42c					Assemble_inx:
.a42c	20 88 82	jsr $8288		jsr	AssembleGroup4
>a42f	e8					.byte $e8
.a430					Assemble_nop:
.a430	20 88 82	jsr $8288		jsr	AssembleGroup4
>a433	ea					.byte $ea
.a434					Assemble_sed:
.a434	20 88 82	jsr $8288		jsr	AssembleGroup4
>a437	f8					.byte $f8
.a438					Assemble_plx:
.a438	20 88 82	jsr $8288		jsr	AssembleGroup4
>a43b	fa					.byte $fa

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/constants.asm

.a43c					DecimalScalarTable:
>a43c	66 66 66 66				.dword $66666666 ; 0.1
>a440	de					.byte $de
>a441	1f 85 eb 51				.dword $51eb851f ; 0.01
>a445	db					.byte $db
>a446	4c 37 89 41				.dword $4189374c ; 0.001
>a44a	d8					.byte $d8
>a44b	ac 8b db 68				.dword $68db8bac ; 0.0001
>a44f	d4					.byte $d4
>a450	24 d6 e2 53				.dword $53e2d624 ; 1e-05
>a454	d1					.byte $d1
>a455	83 de 1b 43				.dword $431bde83 ; 1e-06
>a459	ce					.byte $ce
>a45a	6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>a45e	ca					.byte $ca
>a45f	89 3b e6 55				.dword $55e63b89 ; 1e-08
>a463	c7					.byte $c7
>a464	a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>a468	c4					.byte $c4
>a469	67 7f f3 6d				.dword $6df37f67 ; 1e-10
>a46d	c0					.byte $c0
>a46e	86 ff f5 57				.dword $57f5ff86 ; 1e-11
>a472	bd					.byte $bd

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.asm

.a473					SyntaxError:
.a473	a9 02		lda #$02		lda	#2
.a475	4c 4b 8c	jmp $8c4b		jmp	ErrorHandler
.a478					RangeError:
.a478	a9 04		lda #$04		lda	#4
.a47a	4c 4b 8c	jmp $8c4b		jmp	ErrorHandler
.a47d					TypeError:
.a47d	a9 05		lda #$05		lda	#5
.a47f	4c 4b 8c	jmp $8c4b		jmp	ErrorHandler
.a482					ArgumentError:
.a482	a9 07		lda #$07		lda	#7
.a484	4c 4b 8c	jmp $8c4b		jmp	ErrorHandler
.a487					NotDoneError:
.a487	a9 0c		lda #$0c		lda	#12
.a489	4c 4b 8c	jmp $8c4b		jmp	ErrorHandler
.a48c					ErrorText:
>a48c	42 72 65 61 6b 00			.text	"Break",0
>a492	53 79 6e 74 61 78 20 65			.text	"Syntax error",0
>a49a	72 72 6f 72 00
>a49f	44 69 76 69 73 69 6f 6e			.text	"Division by zero",0
>a4a7	20 62 79 20 7a 65 72 6f 00
>a4b0	4f 75 74 20 6f 66 20 52			.text	"Out of Range",0
>a4b8	61 6e 67 65 00
>a4bd	54 79 70 65 20 6d 69 73			.text	"Type mismatch",0
>a4c5	6d 61 74 63 68 00
>a4cb	4f 75 74 20 6f 66 20 6d			.text	"Out of memory",0
>a4d3	65 6d 6f 72 79 00
>a4d9	49 6c 6c 65 67 61 6c 20			.text	"Illegal argument",0
>a4e1	61 72 67 75 6d 65 6e 74 00
>a4ea	53 74 6f 70 00				.text	"Stop",0
>a4ef	53 74 72 69 6e 67 20 74			.text	"String too long",0
>a4f7	6f 6f 20 6c 6f 6e 67 00
>a4ff	41 73 73 65 72 74 69 6f			.text	"Assertion failed",0
>a507	6e 20 66 61 69 6c 65 64 00
>a510	4f 75 74 20 6f 66 20 64			.text	"Out of data",0
>a518	61 74 61 00
>a51c	55 6e 69 6d 70 6c 65 6d			.text	"Unimplemented",0
>a524	65 6e 74 65 64 00
>a52a	4e 6f 20 73 75 63 68 20			.text	"No such line number",0
>a532	6c 69 6e 65 20 6e 75 6d 62 65 72 00
>a53e	52 65 74 75 72 6e 20 77			.text	"Return without Gosub",0
>a546	69 74 68 6f 75 74 20 47 6f 73 75 62 00
>a553	55 6e 74 69 6c 20 77 69			.text	"Until without Repeat",0
>a55b	74 68 6f 75 74 20 52 65 70 65 61 74 00
>a568	57 65 6e 64 20 77 69 74			.text	"Wend without While",0
>a570	68 6f 75 74 20 57 68 69 6c 65 00
>a57b	4e 65 78 74 20 77 69 74			.text	"Next without For",0
>a583	68 6f 75 74 20 46 6f 72 00
>a58c	42 41 53 49 43 20 53 74			.text	"BASIC Stack full",0
>a594	61 63 6b 20 66 75 6c 6c 00
>a59d	4f 70 65 6e 20 53 74 72			.text	"Open Structure",0
>a5a5	75 63 74 75 72 65 00
>a5ac	45 6e 64 50 72 6f 63 20			.text	"EndProc without call",0
>a5b4	77 69 74 68 6f 75 74 20 63 61 6c 6c 00
>a5c1	41 72 72 61 79 20 61 6c			.text	"Array already defined",0
>a5c9	72 65 61 64 79 20 64 65 66 69 6e 65 64 00
>a5d7	41 72 72 61 79 20 73 69			.text	"Array size",0
>a5df	7a 65 00
>a5e2	42 61 64 20 61 72 72 61			.text	"Bad array index",0
>a5ea	79 20 69 6e 64 65 78 00

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/timestamp.asm

>a5f2	42 75 69 6c 74 20 57 65			.text "Built Wednesday 05-Oct-2022. Build 115."
>a5fa	64 6e 65 73 64 61 79 20 30 35 2d 4f 63 74 2d 32
>a60a	30 32 32 2e 20 42 75 69 6c 64 20 31 31 35 2e

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/frames.asm

.97db					StackOpen:
.97db	48		pha				pha 								; save frame byte
.97dc	29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.97de	0a		asl a				asl 	a 							; claim twice this for storage
.97df	49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.97e1	38		sec				sec 								; so basically subtracting from
.97e2	65 34		adc $34				adc 	basicStack 	 				; basicStack
.97e4	85 34		sta $34				sta 	basicStack
.97e6	b0 08		bcs $97f0			bcs 	_SONoBorrow
.97e8	c6 35		dec $35				dec 	basicStack+1
.97ea	a5 35		lda $35				lda 	basicStack+1 				; have we reached stack overflow
.97ec	c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.97ee	90 04		bcc $97f4			bcc 	_SOMemory
.97f0					_SONoBorrow:
.97f0	68		pla				pla 								; get marker back and write at TOS
.97f1	92 34		sta ($34)			sta 	(basicStack)
.97f3	60		rts				rts
.97f4					_SOMemory:
.97f4							ERR_STACK
.97f4					StackClose:
.97f4	b2 34		lda ($34)			lda 	(basicStack) 				; get TOS marker
.97f6	29 0f		and #$0f			and 	#$0F 						; bytes to add back
.97f8	0a		asl a				asl 	a 							; claim twice this.
.97f9	65 34		adc $34				adc 	basicStack 					; add to the stack pointer.
.97fb	85 34		sta $34				sta 	basicStack
.97fd	90 02		bcc $9801			bcc 	_SCExit
.97ff	e6 35		inc $35				inc 	basicStack+1
.9801					_SCExit:
.9801	60		rts				rts
.9802					StackCheckFrame:
.9802	52 34		eor ($34)			eor 	(basicStack) 				; xor with toS marker
.9804	29 f0		and #$f0			and 	#$F0 						; check type bits
.9806	d0 01		bne $9809			bne 	_SCFError 					; different, we have structures mixed up
.9808	60		rts				rts
.9809					_SCFError:
.9809	8a		txa				txa 								; report error X
.980a	4c 4b 8c	jmp $8c4b			jmp 	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/location.asm

.980d					STKSaveCodePosition:
.980d	5a		phy				phy
.980e	98		tya				tya 								; save Y
.980f	a0 05		ldy #$05			ldy 	#5
.9811	91 34		sta ($34),y			sta 	(basicStack),y
.9813	88		dey				dey 								; save Code Pointer
.9814					_STKSaveLoop:
.9814	b9 2f 00	lda $002f,y			lda 	safePtr-1,y 				; allows us to access the pointer w/out issues.
.9817	91 34		sta ($34),y			sta 	(basicStack),y
.9819	88		dey				dey
.981a	d0 f8		bne $9814			bne 	_STKSaveLoop
.981c	7a		ply				ply
.981d	60		rts				rts
.981e					STKLoadCodePosition:
.981e	a0 01		ldy #$01			ldy 	#1 							; load code pointer back
.9820					_STKLoadLoop:
.9820	b1 34		lda ($34),y			lda 	(basicStack),y
.9822	99 2f 00	sta $002f,y			sta 	safePtr-1,y
.9825	c8		iny				iny
.9826	c0 05		cpy #$05			cpy 	#5
.9828	d0 f6		bne $9820			bne 	_STKLoadLoop
.982a	b1 34		lda ($34),y			lda 	(basicStack),y 				; get Y offset
.982c	a8		tay				tay
.982d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/setup.asm

.982e					StackReset:
.982e	a9 ff		lda #$ff			lda 	#((BasicStackBase+BasicStackSize-1) & $FF)
.9830	85 34		sta $34				sta 	0+basicStack
.9832	a9 0f		lda #$0f			lda 	#((BasicStackBase+BasicStackSize-1) >> 8)
.9834	85 35		sta $35				sta 	1+basicStack
.9836	a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.9838	92 34		sta ($34)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.983a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/concrete.asm

.a619					StringConcrete:
.a619	5a		phy				phy 								; save position on stack
.a61a	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy target string to zTemp1
.a61d	85 38		sta $38				sta 	zTemp1
.a61f	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.a622	85 39		sta $39				sta 	zTemp1+1
.a624	a0 ff		ldy #$ff			ldy 	#$FF	 					; calculate string length
.a626					_SALength:
.a626	c8		iny				iny
.a627	b1 38		lda ($38),y			lda 	(zTemp1),y
.a629	d0 fb		bne $a626			bne 	_SALength
.a62b	c0 fd		cpy #$fd			cpy 	#253 						; string too long
.a62d	b0 3f		bcs $a66e			bcs 	_SALengthError
.a62f	98		tya				tya 				 				; length of the new string
.a630	18		clc				clc
.a631	69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.a633	90 02		bcc $a637			bcc 	_SAHaveLength
.a635	a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.a637					_SAHaveLength:
.a637	48		pha				pha 								; save length.
.a638	38		sec				sec
.a639	49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.a63b	6d 0e 07	adc $070e			adc 	StringMemory
.a63e	8d 0e 07	sta $070e			sta 	StringMemory
.a641	85 3a		sta $3a				sta 	zTemp2 						; update storage address
.a643	9d 08 06	sta $0608,x			sta 	NSMantissa0,x 				; update mantissa address
.a646	a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.a648	6d 0f 07	adc $070f			adc 	StringMemory+1
.a64b	8d 0f 07	sta $070f			sta 	StringMemory+1
.a64e	85 3b		sta $3b				sta 	zTemp2+1
.a650	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.a653	68		pla				pla 								; save length-3 (chars allowed) in first byte
.a654	38		sec				sec
.a655	e9 03		sbc #$03			sbc 	#3
.a657	92 3a		sta ($3a)			sta 	(zTemp2)
.a659	a9 00		lda #$00			lda 	#0 							; clear the status byte.
.a65b	a0 01		ldy #$01			ldy 	#1
.a65d	91 3a		sta ($3a),y			sta 	(zTemp2),y
.a65f					_SACopyNewString:
.a65f	a0 00		ldy #$00			ldy 	#0
.a661					_SACopyNSLoop:
.a661	b1 38		lda ($38),y			lda 	(zTemp1),y 					; get character
.a663	c8		iny				iny 								; write two on in string storage
.a664	c8		iny				iny
.a665	91 3a		sta ($3a),y			sta 	(zTemp2),y
.a667	88		dey				dey 								; this makes it one one.
.a668	c9 00		cmp #$00			cmp 	#0 							; until EOS copied
.a66a	d0 f5		bne $a661			bne 	_SACopyNSLoop
.a66c	7a		ply				ply
.a66d	60		rts				rts
.a66e					_SALengthError:
.a66e	a9 09		lda #$09		lda	#9
.a670	4c 4b 8c	jmp $8c4b		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/stringalloc.asm

.a673					StringSystemInitialise:
.a673	a9 ff		lda #$ff			lda 	#((EndVariableSpace-1) & $FF)
.a675	8d 0e 07	sta $070e			sta 	0+StringMemory
.a678	a9 1f		lda #$1f			lda 	#((EndVariableSpace-1) >> 8)
.a67a	8d 0f 07	sta $070f			sta 	1+StringMemory
.a67d	9c ff 1f	stz $1fff			stz 	EndVariableSpace-1 			; put a zero at the end, so know end of string memory.
.a680	60		rts				rts
.a681					StringSpaceInitialise:
.a681	a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.a683	8d 10 07	sta $0710			sta 	StringInitialised
.a686	ad 0e 07	lda $070e			lda 	StringMemory 				; allocate 256 bytes for one concreted string
.a689	8d 11 07	sta $0711			sta 	StringTempPointer
.a68c	ad 0f 07	lda $070f			lda 	StringMemory+1
.a68f	3a		dec a				dec 	a
.a690	8d 12 07	sta $0712			sta 	StringTempPointer+1
.a693	60		rts				rts
.a694					StringTempAllocate:
.a694	c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.a696	b0 35		bcs $a6cd			bcs 	_STALength
.a698	2c 10 07	bit $0710			bit 	StringInitialised 			; already initialised
.a69b	30 05		bmi $a6a2			bmi 	_STAAllocate
.a69d	48		pha				pha 								; save value to subtract.
.a69e	20 81 a6	jsr $a681			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.a6a1	68		pla				pla 								; restore it
.a6a2					_STAAllocate:
.a6a2	49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.a6a4	18		clc				clc  								; deliberate allows one more
.a6a5	6d 11 07	adc $0711			adc 	StringTempPointer 			; subtract from temp pointer
.a6a8	8d 11 07	sta $0711			sta 	StringTempPointer
.a6ab	9d 08 06	sta $0608,x			sta 	NSMantissa0,x 				; address in mantissa
.a6ae	85 3c		sta $3c				sta 	zsTemp 						; and zsTemp
.a6b0	ad 12 07	lda $0712			lda 	StringTempPointer+1
.a6b3	69 ff		adc #$ff			adc 	#$FF
.a6b5	8d 12 07	sta $0712			sta 	StringTempPointer+1
.a6b8	85 3d		sta $3d				sta 	zsTemp+1
.a6ba	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.a6bd	9e 18 06	stz $0618,x			stz 	NSMantissa2,x 				; set the typing data
.a6c0	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.a6c3	a9 10		lda #$10			lda 	#NSTString
.a6c5	9d 00 06	sta $0600,x			sta 	NSStatus,x
.a6c8	a9 00		lda #$00			lda 	#0 							; clear the target string
.a6ca	92 3c		sta ($3c)			sta 	(zsTemp)
.a6cc	60		rts				rts
.a6cd					_STALength:
.a6cd	a9 09		lda #$09		lda	#9
.a6cf	4c 4b 8c	jmp $8c4b		jmp	ErrorHandler
.a6d2					StringTempWrite:
.a6d2	48		pha				pha
.a6d3	92 3c		sta ($3c)			sta 	(zsTemp)
.a6d5	e6 3c		inc $3c				inc 	zsTemp
.a6d7	d0 02		bne $a6db			bne 	_STWNoCarry
.a6d9	e6 3d		inc $3d				inc 	zsTemp+1
.a6db					_STWNoCarry:
.a6db	a9 00		lda #$00			lda 	#0
.a6dd	92 3c		sta ($3c)			sta 	(zsTemp)
.a6df	68		pla				pla
.a6e0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/backload.asm

.983b					BackloadProgram:
.983b	a2 ff		ldx #$ff			ldx 	#$FF
.983d	8e fa ff	stx $fffa			stx 	$FFFA 						; fast mode
.9840	20 6b 98	jsr $986b			jsr 	BLReadByte
.9843	30 1f		bmi $9864			bmi 	_BPExit
.9845					_BPCopy:
.9845	e8		inx				inx  								; copy byte in
.9846	9d 25 08	sta $0825,x			sta 	lineBuffer,x
.9849	9e 26 08	stz $0826,x			stz 	lineBuffer+1,x
.984c	20 6b 98	jsr $986b			jsr 	BLReadByte 					; read next byte
.984f	30 0a		bmi $985b			bmi 	_BPEndLine 					; -ve = EOL
.9851	c9 09		cmp #$09			cmp 	#9 							; handle TAB
.9853	d0 02		bne $9857			bne 	_BPNotTab
.9855	a9 20		lda #$20			lda 	#' '
.9857					_BPNotTab:
.9857	c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.9859	b0 ea		bcs $9845			bcs 	_BPCopy
.985b					_BPEndLine:
.985b	20 7f 9b	jsr $9b7f			jsr 	TokeniseLine 				; tokenise the line.
.985e	38		sec				sec 								; append not insert
.985f	20 62 a7	jsr $a762			jsr 	MemoryInsertLine 			; append to current program
.9862	80 d7		bra $983b			bra 	BackloadProgram
.9864					_BPExit:
.9864	9c fa ff	stz $fffa			stz 	$FFFA 						; clear fast mode
.9867	20 d4 84	jsr $84d4			jsr 	ClearCommand 				; clear variables etc.
.986a	60		rts				rts
.986b					BLReadByte:
.986b					_BLLoad:
.986b	ad 00 30	lda $3000			lda 	$3000 						; hardcoded in the makefile.
.986e	ee 6c 98	inc $986c			inc 	_BLLoad+1
.9871	d0 03		bne $9876			bne 	_BLNoCarry
.9873	ee 6d 98	inc $986d			inc 	_BLLoad+2
.9876					_BLNoCarry:
.9876	c9 00		cmp #$00			cmp 	#0
.9878	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/searchtokens.asm

.9879					TokeniseSearchTable:
.9879	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token.
.987b	85 36		sta $36				sta 	zTemp0
.987d	a0 00		ldy #$00			ldy 	#0
.987f	a9 80		lda #$80			lda 	#$80 						; token #
.9881	85 38		sta $38				sta 	zTemp1
.9883					_TSTLoop:
.9883	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.9885	30 49		bmi $98d0			bmi 	_TSTFail 					; -ve = end of table
.9887	f0 2e		beq $98b7			beq 	_TSTNext 					; zero, check next it's a dummy
.9889	c8		iny				iny 								; get the hash
.988a	b1 36		lda ($36),y			lda 	(zTemp0),y
.988c	88		dey				dey
.988d	cd 03 07	cmp $0703			cmp 	identHash 					; check they match, if not go to next
.9890	d0 25		bne $98b7			bne 	_TSTNext
.9892	ad 02 07	lda $0702			lda 	identTypeEnd 				; length of identifier
.9895	38		sec				sec
.9896	ed 00 07	sbc $0700			sbc 	identStart
.9899	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; no match, then return.
.989b	d0 1a		bne $98b7			bne 	_TSTNext
.989d	5a		phy				phy 								; save Y , we might fail
.989e	c8		iny				iny 								; point to text
.989f	c8		iny				iny
.98a0	ae 00 07	ldx $0700			ldx 	identStart 					; offset in line buffer in X
.98a3					_TSTCompareName:
.98a3	bd 25 08	lda $0825,x			lda 	lineBuffer,x 				; compare text.
.98a6	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.98a8	d0 0c		bne $98b6			bne 	_TSTNextPullY 				; fail, pullY and do next
.98aa	e8		inx				inx
.98ab	c8		iny				iny
.98ac	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; complete match.
.98af	d0 f2		bne $98a3			bne 	_TSTCompareName
.98b1	7a		ply				ply 								; throw Y
.98b2	a5 38		lda $38				lda 	zTemp1 						; get token #
.98b4	38		sec				sec 								; return with CS = passed.
.98b5	60		rts				rts
.98b6					_TSTNextPullY:
.98b6	7a		ply				ply 								; restore current, fall through.
.98b7					_TSTNext:
.98b7	e6 38		inc $38				inc 	zTemp1 						; token counter
.98b9	98		tya				tya
.98ba	18		clc				clc
.98bb	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.98bd	1a		inc a				inc 	a 							; +1
.98be	1a		inc a				inc 	a 							; +2
.98bf	a8		tay				tay
.98c0	10 c1		bpl $9883			bpl 	_TSTLoop 					; if Y < $80 loop back
.98c2	98		tya				tya 								; add Y to zTemp0 and reset Y
.98c3	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.98c5	18		clc				clc  								; but have tables > 255 bytes
.98c6	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.98c8	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.98ca	90 b7		bcc $9883			bcc 	_TSTLoop
.98cc	e6 37		inc $37				inc 	zTemp0+1
.98ce	80 b3		bra $9883			bra 	_TSTLoop
.98d0					_TSTFail:
.98d0	18		clc				clc
.98d1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/tokenise.asm


;******  Processing file: ./common/tokeniser/../generated/kwdtext.dat

.98d2					KeywordSet0:
>98d2	00 65					.text	0,$65,""               ; $80 !0:EOF
>98d4	00 58					.text	0,$58,""               ; $81 !1:SH1
>98d6	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>98d8	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $83 ABS(
>98de	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $84 ALLOC(
>98e6	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $85 ASC(
>98ec	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $86 CHR$(
>98f3	05 6b 46 41 4c 53 45			.text	5,$6b,"FALSE"          ; $87 FALSE
>98fa	05 44 46 52 41 43 28			.text	5,$44,"FRAC("          ; $88 FRAC(
>9901	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $89 INT(
>9907	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $8a ISVAL(
>990f	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $8b LEFT$(
>9917	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $8c LEN(
>991d	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $8d MID$(
>9924	04 19 4e 4f 54 28			.text	4,$19,"NOT("           ; $8e NOT(
>992a	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $8f RIGHT$(
>9932	28
>9933	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $90 RND(
>9939	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $91 SGN(
>993f	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $92 SPC(
>9945	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $93 STR$(
>994c	04 40 54 52 55 45			.text	4,$40,"TRUE"           ; $94 TRUE
>9952	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $95 VAL(
>9958	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $96 FOR
>995d	02 8f 49 46				.text	2,$8f,"IF"             ; $97 IF
>9961	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $98 PROC
>9967	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $99 REPEAT
>996f	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $9a WHILE
>9976	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $9b ENDIF
>997d	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $9c ENDPROC
>9985	43
>9986	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $9d NEXT
>998c	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $9e THEN
>9992	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $9f UNTIL
>9999	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $a0 WEND
>999f	04 1c 43 41 4c 4c			.text	4,$1c,"CALL"           ; $a1 CALL
>99a5	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $a2 CLS
>99aa	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $a3 DATA
>99b0	03 da 44 49 4d				.text	3,$da,"DIM"            ; $a4 DIM
>99b5	06 db 44 4f 57 4e 54 4f			.text	6,$db,"DOWNTO"         ; $a5 DOWNTO
>99bd	04 29 45 4c 53 45			.text	4,$29,"ELSE"           ; $a6 ELSE
>99c3	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $a7 GOSUB
>99ca	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $a8 GOTO
>99d0	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $a9 LET
>99d5	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $aa PRINT
>99dc	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $ab READ
>99e2	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $ac REM
>99e7	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $ad RETURN
>99ef	02 a3 54 4f				.text	2,$a3,"TO"             ; $ae TO
>99f3	ff					.text	$FF
.99f4					KeywordSet1:
>99f4	00 65					.text	0,$65,""               ; $80 !0:EOF
>99f6	00 58					.text	0,$58,""               ; $81 !1:SH1
>99f8	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>99fa	08 4c 41 53 53 45 4d 42			.text	8,$4c,"ASSEMBLE"       ; $83 ASSEMBLE
>9a02	4c 45
>9a04	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $84 ASSERT
>9a0c	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $85 CLEAR
>9a13	03 d7 45 4e 44				.text	3,$d7,"END"            ; $86 END
>9a18	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $87 LIST
>9a1e	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $88 NEW
>9a23	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $89 RESTORE
>9a2b	45
>9a2c	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $8a RUN
>9a31	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $8b STOP
>9a37	ff					.text	$FF
.9a38					KeywordSet2:
>9a38	00 65					.text	0,$65,""               ; $80 !0:EOF
>9a3a	00 58					.text	0,$58,""               ; $81 !1:SH1
>9a3c	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>9a3e	03 c8 41 44 43				.text	3,$c8,"ADC"            ; $83 ADC
>9a43	03 d3 41 4e 44				.text	3,$d3,"AND"            ; $84 AND
>9a48	03 e0 41 53 4c				.text	3,$e0,"ASL"            ; $85 ASL
>9a4d	03 c8 42 43 43				.text	3,$c8,"BCC"            ; $86 BCC
>9a52	03 d8 42 43 53				.text	3,$d8,"BCS"            ; $87 BCS
>9a57	03 d8 42 45 51				.text	3,$d8,"BEQ"            ; $88 BEQ
>9a5c	03 df 42 49 54				.text	3,$df,"BIT"            ; $89 BIT
>9a61	03 d8 42 4d 49				.text	3,$d8,"BMI"            ; $8a BMI
>9a66	03 d5 42 4e 45				.text	3,$d5,"BNE"            ; $8b BNE
>9a6b	03 de 42 50 4c				.text	3,$de,"BPL"            ; $8c BPL
>9a70	03 d5 42 52 41				.text	3,$d5,"BRA"            ; $8d BRA
>9a75	03 df 42 52 4b				.text	3,$df,"BRK"            ; $8e BRK
>9a7a	03 db 42 56 43				.text	3,$db,"BVC"            ; $8f BVC
>9a7f	03 eb 42 56 53				.text	3,$eb,"BVS"            ; $90 BVS
>9a84	03 d2 43 4c 43				.text	3,$d2,"CLC"            ; $91 CLC
>9a89	03 d3 43 4c 44				.text	3,$d3,"CLD"            ; $92 CLD
>9a8e	03 d8 43 4c 49				.text	3,$d8,"CLI"            ; $93 CLI
>9a93	03 e5 43 4c 56				.text	3,$e5,"CLV"            ; $94 CLV
>9a98	03 e0 43 4d 50				.text	3,$e0,"CMP"            ; $95 CMP
>9a9d	03 eb 43 50 58				.text	3,$eb,"CPX"            ; $96 CPX
>9aa2	03 ec 43 50 59				.text	3,$ec,"CPY"            ; $97 CPY
>9aa7	03 cc 44 45 43				.text	3,$cc,"DEC"            ; $98 DEC
>9aac	03 e1 44 45 58				.text	3,$e1,"DEX"            ; $99 DEX
>9ab1	03 e2 44 45 59				.text	3,$e2,"DEY"            ; $9a DEY
>9ab6	03 e6 45 4f 52				.text	3,$e6,"EOR"            ; $9b EOR
>9abb	03 da 49 4e 43				.text	3,$da,"INC"            ; $9c INC
>9ac0	03 ef 49 4e 58				.text	3,$ef,"INX"            ; $9d INX
>9ac5	03 f0 49 4e 59				.text	3,$f0,"INY"            ; $9e INY
>9aca	03 e7 4a 4d 50				.text	3,$e7,"JMP"            ; $9f JMP
>9acf	03 ef 4a 53 52				.text	3,$ef,"JSR"            ; $a0 JSR
>9ad4	03 d1 4c 44 41				.text	3,$d1,"LDA"            ; $a1 LDA
>9ad9	03 e8 4c 44 58				.text	3,$e8,"LDX"            ; $a2 LDX
>9ade	03 e9 4c 44 59				.text	3,$e9,"LDY"            ; $a3 LDY
>9ae3	03 f1 4c 53 52				.text	3,$f1,"LSR"            ; $a4 LSR
>9ae8	03 ed 4e 4f 50				.text	3,$ed,"NOP"            ; $a5 NOP
>9aed	03 e2 4f 52 41				.text	3,$e2,"ORA"            ; $a6 ORA
>9af2	03 d9 50 48 41				.text	3,$d9,"PHA"            ; $a7 PHA
>9af7	03 e8 50 48 50				.text	3,$e8,"PHP"            ; $a8 PHP
>9afc	03 f0 50 48 58				.text	3,$f0,"PHX"            ; $a9 PHX
>9b01	03 f1 50 48 59				.text	3,$f1,"PHY"            ; $aa PHY
>9b06	03 dd 50 4c 41				.text	3,$dd,"PLA"            ; $ab PLA
>9b0b	03 ec 50 4c 50				.text	3,$ec,"PLP"            ; $ac PLP
>9b10	03 f4 50 4c 58				.text	3,$f4,"PLX"            ; $ad PLX
>9b15	03 f5 50 4c 59				.text	3,$f5,"PLY"            ; $ae PLY
>9b1a	03 ed 52 4f 4c				.text	3,$ed,"ROL"            ; $af ROL
>9b1f	03 f3 52 4f 52				.text	3,$f3,"ROR"            ; $b0 ROR
>9b24	03 ef 52 54 49				.text	3,$ef,"RTI"            ; $b1 RTI
>9b29	03 f9 52 54 53				.text	3,$f9,"RTS"            ; $b2 RTS
>9b2e	03 d8 53 42 43				.text	3,$d8,"SBC"            ; $b3 SBC
>9b33	03 db 53 45 43				.text	3,$db,"SEC"            ; $b4 SEC
>9b38	03 dc 53 45 44				.text	3,$dc,"SED"            ; $b5 SED
>9b3d	03 e1 53 45 49				.text	3,$e1,"SEI"            ; $b6 SEI
>9b42	03 e8 53 54 41				.text	3,$e8,"STA"            ; $b7 STA
>9b47	03 ff 53 54 58				.text	3,$ff,"STX"            ; $b8 STX
>9b4c	03 00 53 54 59				.text	3,$00,"STY"            ; $b9 STY
>9b51	03 01 53 54 5a				.text	3,$01,"STZ"            ; $ba STZ
>9b56	03 ed 54 41 58				.text	3,$ed,"TAX"            ; $bb TAX
>9b5b	03 ee 54 41 59				.text	3,$ee,"TAY"            ; $bc TAY
>9b60	03 e8 54 52 42				.text	3,$e8,"TRB"            ; $bd TRB
>9b65	03 e9 54 53 42				.text	3,$e9,"TSB"            ; $be TSB
>9b6a	03 ff 54 53 58				.text	3,$ff,"TSX"            ; $bf TSX
>9b6f	03 ed 54 58 41				.text	3,$ed,"TXA"            ; $c0 TXA
>9b74	03 ff 54 58 53				.text	3,$ff,"TXS"            ; $c1 TXS
>9b79	03 ee 54 59 41				.text	3,$ee,"TYA"            ; $c2 TYA
>9b7e	ff					.text	$FF

;******  Return to file: ./common/tokeniser/tokenise.asm

.9b7f					TokeniseLine:
.9b7f	20 07 9d	jsr $9d07			jsr 	FixLineBufferCase 			; fix line case
.9b82	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.9b84	8d 25 07	sta $0725			sta 	tokenOffset
.9b87	9c 26 07	stz $0726			stz 	tokenLineNumber
.9b8a	9c 27 07	stz $0727			stz 	tokenLineNumber+1
.9b8d	a2 ff		ldx #$ff			ldx 	#$FF
.9b8f					_TKFindFirst:
.9b8f	e8		inx				inx
.9b90	bd 25 08	lda $0825,x			lda 	lineBuffer,x
.9b93	f0 79		beq $9c0e			beq 	_TKExit
.9b95	c9 20		cmp #$20			cmp 	#' '
.9b97	90 f6		bcc $9b8f			bcc 	_TKFindFirst
.9b99	c9 30		cmp #$30			cmp 	#'0'
.9b9b	90 07		bcc $9ba4			bcc 	_TKNoLineNumber
.9b9d	c9 3a		cmp #$3a			cmp 	#'9'+1
.9b9f	b0 03		bcs $9ba4			bcs 	_TKNoLineNumber
.9ba1	20 31 9d	jsr $9d31			jsr 	TokeniseExtractLineNumber
.9ba4					_TKNoLineNumber:
.9ba4					_TKTokeniseLoop:
.9ba4	bd 25 08	lda $0825,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.9ba7	f0 65		beq $9c0e			beq 	_TKExit
.9ba9	e8		inx				inx
.9baa	c9 20		cmp #$20			cmp 	#' '
.9bac	f0 f6		beq $9ba4			beq 	_TKTokeniseLoop 			; keep looping if space found.
.9bae	ca		dex				dex 								; undo last get, A contains character, X is position.
.9baf	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.9bb1	f0 61		beq $9c14			beq 	_TKTokeniseIdentifier
.9bb3	c9 41		cmp #$41			cmp 	#'A'
.9bb5	90 04		bcc $9bbb			bcc 	_TKTokenisePunctuation
.9bb7	c9 5b		cmp #$5b			cmp 	#'Z'+1
.9bb9	90 59		bcc $9c14			bcc 	_TKTokeniseIdentifier
.9bbb					_TKTokenisePunctuation:
.9bbb	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.9bbd	f0 27		beq $9be6			beq 	_TKString
.9bbf	c9 24		cmp #$24			cmp 	#'$'						; hexadecimal constant (# only appears at end of identifiers)
.9bc1	f0 28		beq $9beb			beq 	_TKHexConstant
.9bc3	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers.
.9bc5	f0 29		beq $9bf0			beq 	_TKCheckDouble
.9bc7	c9 3e		cmp #$3e			cmp 	#'>'
.9bc9	f0 25		beq $9bf0			beq 	_TKCheckDouble
.9bcb					_TKStandardPunctuation:
.9bcb	bd 25 08	lda $0825,x			lda 	lineBuffer,x 				; get it back.
.9bce	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.9bd0	90 0e		bcc $9be0			bcc 	_TKNoShift
.9bd2	48		pha				pha 								; save
.9bd3	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.9bd5	85 36		sta $36				sta 	zTemp0
.9bd7	68		pla				pla
.9bd8	29 20		and #$20			and 	#32 						; bit 5
.9bda	4a		lsr a				lsr 	a 							; shift into bit 3
.9bdb	4a		lsr a				lsr 	a
.9bdc	05 36		ora $36				ora 	zTemp0
.9bde	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.9be0					_TKNoShift:
.9be0	20 76 9d	jsr $9d76			jsr 	TokeniseWriteByte 			; write the punctuation character
.9be3	e8		inx				inx 								; consume the character
.9be4	80 be		bra $9ba4			bra 	_TKTokeniseLoop 			; and loop round again.
.9be6					_TKString:
.9be6	20 96 9c	jsr $9c96			jsr 	TokeniseString
.9be9	80 b9		bra $9ba4			bra 	_TKTokeniseLoop
.9beb					_TKHexConstant:
.9beb	20 d1 9c	jsr $9cd1			jsr 	TokeniseHexConstant
.9bee	80 b4		bra $9ba4			bra 	_TKTokeniseLoop
.9bf0					_TKCheckDouble:
.9bf0	bd 26 08	lda $0826,x			lda 	lineBuffer+1,x 				; get next character
.9bf3	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.9bf5	90 d4		bcc $9bcb			bcc 	_TKStandardPunctuation
.9bf7	c9 3f		cmp #$3f			cmp 	#'>'+1
.9bf9	b0 d0		bcs $9bcb			bcs 	_TKStandardPunctuation
.9bfb	bd 25 08	lda $0825,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.9bfe	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.9c00	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.9c01	7d 26 08	adc $0826,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.9c04	38		sec				sec
.9c05	e9 3c		sbc #$3c			sbc 	#'<'
.9c07	20 76 9d	jsr $9d76			jsr 	TokeniseWriteByte 			; this is in the range 0-7
.9c0a	e8		inx				inx 								; consume both
.9c0b	e8		inx				inx
.9c0c	80 96		bra $9ba4			bra 	_TKTokeniseLoop
.9c0e	a9 80		lda #$80	_TKExit:lda 	#KWC_EOL 					; write end of line byte
.9c10	20 76 9d	jsr $9d76			jsr 	TokeniseWriteByte
.9c13	60		rts				rts
.9c14					_TKTokeniseIdentifier:
.9c14	8e 00 07	stx $0700			stx 	identStart 					; save start
.9c17	9c 04 07	stz $0704			stz 	identTypeByte 				; zero the type byte
.9c1a					_TKCheckLoop:
.9c1a	e8		inx				inx 								; look at next, we know first is identifier.
.9c1b	bd 25 08	lda $0825,x			lda  	lineBuffer,x
.9c1e	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.9c20	f0 f8		beq $9c1a			beq 	_TKCheckLoop
.9c22	c9 30		cmp #$30			cmp	 	#"0"
.9c24	90 0c		bcc $9c32			bcc 	_TKEndIdentifier
.9c26	c9 3a		cmp #$3a			cmp 	#"9"+1
.9c28	90 f0		bcc $9c1a			bcc 	_TKCheckLoop
.9c2a	c9 41		cmp #$41			cmp	 	#"A"
.9c2c	90 04		bcc $9c32			bcc 	_TKEndIdentifier
.9c2e	c9 5b		cmp #$5b			cmp 	#"Z"+1
.9c30	90 e8		bcc $9c1a			bcc 	_TKCheckLoop
.9c32					_TKEndIdentifier:
.9c32	8e 01 07	stx $0701			stx 	identTypeStart 				; save start of type text (if any !)
.9c35	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.9c37	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.9c39	f0 06		beq $9c41			beq 	_TKHasTypeCharacter
.9c3b	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.9c3d	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.9c3f	d0 07		bne $9c48			bne 	_TKNoTypeCharacter
.9c41					_TKHasTypeCharacter:
.9c41	8c 04 07	sty $0704			sty 	identTypeByte 				; has # or $, save the type
.9c44	e8		inx				inx 								; read next
.9c45	bd 25 08	lda $0825,x			lda 	lineBuffer,x
.9c48					_TKNoTypeCharacter:
.9c48	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.9c4a	d0 09		bne $9c55			bne 	_TKNoArray
.9c4c	e8		inx				inx 								; skip the (
.9c4d	ad 04 07	lda $0704			lda 	identTypeByte 				; set bit 2 (e.g. array)
.9c50	09 04		ora #$04			ora 	#$04
.9c52	8d 04 07	sta $0704			sta 	identTypeByte
.9c55					_TKNoArray:
.9c55	8e 02 07	stx $0702			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.9c58	20 f2 9c	jsr $9cf2			jsr 	TokeniseCalculateHash 		; calculate the has for those tokens
.9c5b	a0 98		ldy #$98			ldy 	#(KeywordSet0) >> 8
.9c5d	a9 d2		lda #$d2			lda 	#(KeywordSet0) & $FF
.9c5f	20 79 98	jsr $9879			jsr 	TokeniseSearchTable
.9c62	a2 00		ldx #$00			ldx 	#0
.9c64	b0 1f		bcs $9c85			bcs 	_TKFoundToken
.9c66	a0 99		ldy #$99			ldy 	#(KeywordSet1) >> 8
.9c68	a9 f4		lda #$f4			lda 	#(KeywordSet1) & $FF
.9c6a	20 79 98	jsr $9879			jsr 	TokeniseSearchTable
.9c6d	a2 81		ldx #$81			ldx 	#$81
.9c6f	b0 14		bcs $9c85			bcs 	_TKFoundToken
.9c71	a0 9a		ldy #$9a			ldy 	#(KeywordSet2) >> 8
.9c73	a9 38		lda #$38			lda 	#(KeywordSet2) & $FF
.9c75	20 79 98	jsr $9879			jsr 	TokeniseSearchTable
.9c78	a2 82		ldx #$82			ldx 	#$82
.9c7a	b0 09		bcs $9c85			bcs 	_TKFoundToken
.9c7c	20 82 9d	jsr $9d82			jsr 	CheckCreateVariableRecord 	; failed all, it's a variable, create record if does not exist.
.9c7f	ae 02 07	ldx $0702			ldx 	identTypeEnd 				; X points to following byte
.9c82	4c a4 9b	jmp $9ba4			jmp 	_TKTokeniseLoop 			; and go round again.
.9c85					_TKFoundToken:
.9c85	48		pha				pha 								; save token
.9c86	8a		txa				txa 								; shift in X, is there one ?
.9c87	f0 03		beq $9c8c			beq 	_TKNoTShift
.9c89	20 76 9d	jsr $9d76			jsr 	TokeniseWriteByte 			; if so, write it out
.9c8c					_TKNoTShift:
.9c8c	68		pla				pla 								; restore and write token
.9c8d	20 76 9d	jsr $9d76			jsr 	TokeniseWriteByte
.9c90	ae 02 07	ldx $0702			ldx 	identTypeEnd 				; X points to following byte
.9c93	4c a4 9b	jmp $9ba4			jmp 	_TKTokeniseLoop 			; and go round again.
.9c96					TokeniseString:
.9c96	a9 ff		lda #$ff			lda 	#KWC_STRING 				; string token.
.9c98	20 76 9d	jsr $9d76			jsr 	TokeniseWriteByte
.9c9b	e8		inx				inx									; start of quoted string.
.9c9c	da		phx				phx 								; push start of string on top
.9c9d	ca		dex				dex
.9c9e					_TSFindEnd:
.9c9e	e8		inx				inx
.9c9f	bd 25 08	lda $0825,x			lda 	lineBuffer,x 				; next character
.9ca2	f0 04		beq $9ca8			beq 	_TSEndOfString
.9ca4	c9 22		cmp #$22			cmp 	#'"'
.9ca6	d0 f6		bne $9c9e			bne 	_TSFindEnd
.9ca8					_TSEndOfString:
.9ca8	7a		ply				ply  								; so now Y is first character, X is character after end.
.9ca9	48		pha				pha 								; save terminating character
.9caa	20 b2 9c	jsr $9cb2			jsr 	TOWriteBlockXY 				; write X to Y as a data block
.9cad	68		pla				pla 								; terminating character
.9cae	f0 01		beq $9cb1			beq 	_TSNotQuote					; if it wasn't EOS skip it
.9cb0	e8		inx				inx
.9cb1					_TSNotQuote:
.9cb1	60		rts				rts
.9cb2					TOWriteBlockXY:
.9cb2	86 36		stx $36				stx 	zTemp0 						; write end character
.9cb4	98		tya				tya
.9cb5	49 ff		eor #$ff			eor 	#$FF
.9cb7	38		sec				sec
.9cb8	65 36		adc $36				adc 	zTemp0
.9cba	1a		inc a				inc 	a 							; one extra for NULL
.9cbb	20 76 9d	jsr $9d76			jsr 	TokeniseWriteByte
.9cbe					_TOBlockLoop:
.9cbe	c4 36		cpy $36				cpy 	zTemp0
.9cc0	f0 09		beq $9ccb			beq 	_TOBlockExit
.9cc2	b9 25 08	lda $0825,y			lda 	lineBuffer,y
.9cc5	20 76 9d	jsr $9d76			jsr 	TokeniseWriteByte
.9cc8	c8		iny				iny
.9cc9	80 f3		bra $9cbe			bra 	_TOBlockLoop
.9ccb					_TOBlockExit:
.9ccb	a9 00		lda #$00			lda 	#0
.9ccd	20 76 9d	jsr $9d76			jsr 	TokeniseWriteByte
.9cd0	60		rts				rts
.9cd1					TokeniseHexConstant:
.9cd1	a9 fe		lda #$fe			lda 	#KWC_HEXCONST 				; hex constant token.
.9cd3	20 76 9d	jsr $9d76			jsr 	TokeniseWriteByte
.9cd6	e8		inx				inx									; start of quoted string.
.9cd7	da		phx				phx 								; push start of constant on top
.9cd8	ca		dex				dex
.9cd9					_THFindLoop:
.9cd9	e8		inx				inx
.9cda	bd 25 08	lda $0825,x			lda 	lineBuffer,x
.9cdd	c9 30		cmp #$30			cmp 	#"0"
.9cdf	90 0c		bcc $9ced			bcc 	_THFoundEnd
.9ce1	c9 3a		cmp #$3a			cmp 	#"9"+1
.9ce3	90 f4		bcc $9cd9			bcc 	_THFindLoop
.9ce5	c9 41		cmp #$41			cmp 	#"A"
.9ce7	90 04		bcc $9ced			bcc 	_THFoundEnd
.9ce9	c9 47		cmp #$47			cmp 	#"F"+1
.9ceb	90 ec		bcc $9cd9			bcc 	_THFindLoop
.9ced					_THFoundEnd:
.9ced	7a		ply				ply 								; restore start
.9cee	20 b2 9c	jsr $9cb2			jsr 	TOWriteBlockXY 				; output the block
.9cf1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/utility.asm

.9cf2					TokeniseCalculateHash:
.9cf2	da		phx				phx
.9cf3	ae 00 07	ldx $0700			ldx 	identStart 					; needs to be same as in tokens.py - simple sum
.9cf6	a9 00		lda #$00			lda 	#0
.9cf8					_TCHLoop:
.9cf8	18		clc				clc
.9cf9	7d 25 08	adc $0825,x			adc 	lineBuffer,x
.9cfc	e8		inx				inx
.9cfd	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.9d00	d0 f6		bne $9cf8			bne 	_TCHLoop
.9d02	8d 03 07	sta $0703			sta 	identHash 					; save the hash
.9d05	fa		plx				plx
.9d06	60		rts				rts
.9d07					FixLineBufferCase:
.9d07	a2 00		ldx #$00			ldx 	#0
.9d09					_FLBCLoop:
.9d09	bd 25 08	lda $0825,x			lda 	lineBuffer,x 				; get next character
.9d0c	f0 22		beq $9d30			beq 	_FLBCExit 					; end of string.
.9d0e	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.9d10	f0 11		beq $9d23			beq 	_FLBCInQuotes
.9d12	e8		inx				inx
.9d13	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.9d15	90 f2		bcc $9d09			bcc 	_FLBCLoop
.9d17	c9 7b		cmp #$7b			cmp 	#'z'+1
.9d19	b0 ee		bcs $9d09			bcs 	_FLBCLoop
.9d1b	38		sec				sec 								; make U/C
.9d1c	e9 20		sbc #$20			sbc 	#32
.9d1e	9d 24 08	sta $0824,x			sta	 	lineBuffer-1,x 				; write back
.9d21	80 e6		bra $9d09			bra 	_FLBCLoop
.9d23					_FLBCInQuotes:
.9d23	e8		inx				inx 								; advance
.9d24	bd 25 08	lda $0825,x			lda 	lineBuffer,x 				; get next
.9d27	f0 07		beq $9d30			beq 	_FLBCExit 					; exit on EOS
.9d29	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.9d2b	d0 f6		bne $9d23			bne 	_FLBCInQuotes
.9d2d	e8		inx				inx 								; skip over it
.9d2e	80 d9		bra $9d09			bra 	_FLBCLoop
.9d30					_FLBCExit:
.9d30	60		rts				rts
.9d31					TokeniseExtractLineNumber:
.9d31	ad 27 07	lda $0727			lda 	tokenLineNumber+1 			; push current value on stack
.9d34	48		pha				pha
.9d35	ad 26 07	lda $0726			lda 	tokenLineNumber
.9d38	48		pha				pha
.9d39	20 6f 9d	jsr $9d6f			jsr 	_TELNTimes2 				; line # x 4
.9d3c	20 6f 9d	jsr $9d6f			jsr 	_TELNTimes2 				; line # x 2
.9d3f	18		clc				clc 								; add stacked value
.9d40	68		pla				pla
.9d41	6d 26 07	adc $0726			adc 	tokenLineNumber
.9d44	8d 26 07	sta $0726			sta 	tokenLineNumber
.9d47	68		pla				pla
.9d48	6d 27 07	adc $0727			adc 	tokenLineNumber+1
.9d4b	8d 27 07	sta $0727			sta 	tokenLineNumber+1 			; line # x 5
.9d4e	20 6f 9d	jsr $9d6f			jsr 	_TELNTimes2 				; line # x 10
.9d51	bd 25 08	lda $0825,x			lda 	lineBuffer,x 				; get and consume character
.9d54	e8		inx				inx
.9d55	29 0f		and #$0f			and 	#15 						; add to line #
.9d57	18		clc				clc
.9d58	6d 26 07	adc $0726			adc 	tokenLineNumber
.9d5b	8d 26 07	sta $0726			sta 	tokenLineNumber
.9d5e	90 03		bcc $9d63			bcc 	_TLENNoCarry
.9d60	ee 27 07	inc $0727			inc 	tokenLineNumber+1
.9d63					_TLENNoCarry:
.9d63	bd 25 08	lda $0825,x			lda 	lineBuffer,x 				; more digits ?
.9d66	c9 30		cmp #$30			cmp 	#'0'
.9d68	90 04		bcc $9d6e			bcc 	_TLENExit
.9d6a	c9 3a		cmp #$3a			cmp 	#'9'+1
.9d6c	90 c3		bcc $9d31			bcc 	TokeniseExtractLineNumber
.9d6e					_TLENExit:
.9d6e	60		rts				rts
.9d6f					_TELNTimes2:
.9d6f	0e 26 07	asl $0726			asl 	tokenLineNumber
.9d72	2e 27 07	rol $0727			rol 	tokenLineNumber+1
.9d75	60		rts				rts
.9d76					TokeniseWriteByte:
.9d76	da		phx				phx
.9d77	ae 25 07	ldx $0725			ldx 	tokenOffset 				; next slot to write to
.9d7a	9d 25 07	sta $0725,x			sta 	tokenOffset,x 				; write byte out
.9d7d	ee 25 07	inc $0725			inc 	tokenOffset 				; advance slot.
.9d80	fa		plx				plx
.9d81	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/variablerecord.asm

.9d82					CheckCreateVariableRecord:
.9d82	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.9d84	85 36		sta $36				sta 	0+zTemp0
.9d86	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.9d88	85 37		sta $37				sta 	1+zTemp0
.9d8a					_CCVSearch:
.9d8a	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.9d8c	f0 2c		beq $9dba			beq 	_CCVFail
.9d8e	a0 01		ldy #$01			ldy 	#1 							; read the hash
.9d90	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.9d92	cd 03 07	cmp $0703			cmp 	identHash
.9d95	d0 16		bne $9dad			bne 	_CCVNext
.9d97	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.9d99	ae 00 07	ldx $0700			ldx 	identStart
.9d9c					_CCVCompare:
.9d9c	bd 25 08	lda $0825,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.9d9f	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.9da1	e8		inx				inx 								; advance pointers
.9da2	c8		iny				iny
.9da3	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.9da4	d0 07		bne $9dad			bne 	_CCVNext  					; didn't match go to next.
.9da6	90 f4		bcc $9d9c			bcc 	_CCVCompare 				; not finished yet.
.9da8	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; matched whole thing ?
.9dab	f0 41		beq $9dee			beq 	_CCVFound 					; yes, we were successful
.9dad					_CCVNext:
.9dad	18		clc				clc
.9dae	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.9db0	65 36		adc $36				adc 	zTemp0
.9db2	85 36		sta $36				sta 	zTemp0
.9db4	90 d4		bcc $9d8a			bcc 	_CCVSearch
.9db6	e6 37		inc $37				inc 	zTemp0+1
.9db8	80 d0		bra $9d8a			bra 	_CCVSearch
.9dba					_CCVFail:
.9dba	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.9dbc	ad 03 07	lda $0703			lda 	identHash
.9dbf	91 36		sta ($36),y			sta 	(zTemp0),y
.9dc1	c8		iny				iny 								; offset 2 is the type byte
.9dc2	ad 04 07	lda $0704			lda 	identTypeByte
.9dc5	91 36		sta ($36),y			sta 	(zTemp0),y
.9dc7	c8		iny				iny
.9dc8					_CCVData:
.9dc8	a9 00		lda #$00			lda 	#0 							; erase data 3-7
.9dca	91 36		sta ($36),y			sta 	(zTemp0),y
.9dcc	c8		iny				iny
.9dcd	c0 08		cpy #$08			cpy 	#8
.9dcf	90 f7		bcc $9dc8			bcc 	_CCVData
.9dd1	ae 00 07	ldx $0700			ldx 	identStart 					; copy name into 8 on.
.9dd4					_CCVCopyName:
.9dd4	bd 25 08	lda $0825,x			lda 	lineBuffer,x
.9dd7	91 36		sta ($36),y			sta 	(zTemp0),y
.9dd9	e8		inx				inx
.9dda	c8		iny				iny
.9ddb	ec 02 07	cpx $0702			cpx 	identTypeEnd
.9dde	d0 f4		bne $9dd4			bne 	_CCVCopyName
.9de0	98		tya				tya 								; patch offset
.9de1	92 36		sta ($36)			sta 	(zTemp0)
.9de3	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.9de5	91 36		sta ($36),y			sta 	(zTemp0),y
.9de7	88		dey				dey
.9de8	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.9dea	09 80		ora #$80			ora 	#$80
.9dec	91 36		sta ($36),y			sta 	(zTemp0),y
.9dee					_CCVFound:
.9dee	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.9df0	38		sec				sec
.9df1	e9 10		sbc #$10			sbc 	#(VariableSpace >> 8) 		; offset from the start
.9df3	09 40		ora #$40			ora 	#$40 						; make it a writeable token
.9df5	20 76 9d	jsr $9d76			jsr 	TokeniseWriteByte
.9df8	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.9dfa	20 76 9d	jsr $9d76			jsr 	TokeniseWriteByte
.9dfd	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./variants/hardware/junior/extern.asm

.a6e1					EXTPrintCharacter:
.a6e1	48		pha				pha
.a6e2	da		phx				phx
.a6e3	5a		phy				phy
.a6e4	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.a6e7	7a		ply				ply
.a6e8	fa		plx				plx
.a6e9	68		pla				pla
.a6ea	60		rts				rts
.a6eb					EXTInputSingleCharacter:
.a6eb	da		phx				phx
.a6ec	5a		phy				phy
.a6ed					_EISCWait:
.a6ed	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.a6f0	c9 00		cmp #$00			cmp 	#0
.a6f2	f0 f9		beq $a6ed			beq 	_EISCWait
.a6f4	7a		ply				ply
.a6f5	fa		plx				plx
.a6f6	60		rts				rts
.a6f7					EXTInputLine:
.a6f7	a2 00		ldx #$00			ldx 	#0 							; position in line <- start of line
.a6f9					_ILLoop:
.a6f9	da		phx				phx 								; read character in
.a6fa	20 cf ff	jsr $ffcf			jsr 	$FFCF
.a6fd	fa		plx				plx
.a6fe	c9 08		cmp #$08			cmp 	#8 							; backspace, CBM doesn't need this.
.a700	f0 12		beq $a714			beq 	_ILBackspace
.a702	c9 0d		cmp #$0d			cmp 	#13							; exit ?
.a704	f0 15		beq $a71b			beq 	_ILExit
.a706	c9 20		cmp #$20			cmp 	#32 						; ignore other control
.a708	90 ef		bcc $a6f9			bcc 	_ILLoop
.a70a	e0 50		cpx #$50			cpx 	#MaxLineSize 				; already full buffer
.a70c	f0 eb		beq $a6f9			beq 	_ILLoop
.a70e	9d 25 08	sta $0825,x			sta 	lineBuffer,x 				; save it
.a711	e8		inx				inx
.a712	80 e5		bra $a6f9			bra 	_ILLoop
.a714					_ILBackspace:
.a714	e0 00		cpx #$00			cpx 	#0  						; can't backspace, start of line.
.a716	f0 e1		beq $a6f9			beq 	_ILLoop
.a718	ca		dex				dex 								; back one.
.a719	80 de		bra $a6f9			bra 	_ILLoop
.a71b					_ILExit:
.a71b	20 e1 a6	jsr $a6e1			jsr 	EXTPrintCharacter
.a71e	9e 25 08	stz $0825,x			stz 	lineBuffer,x 				; make ASCIIZ and exit with address in XA
.a721	60		rts				rts
.a722					EXTBreakCheck:
.a722	4c e1 ff	jmp $ffe1			jmp		$FFE1

;******  Return to file: _basic.asm


;******  Processing file: ./variants/hardware/junior/memory.asm

.a725					MemoryPeek:
.a725	b2 36		lda ($36)			lda 	(zTemp0)
.a727	60		rts				rts
.a728					MemoryPoke:
.a728	92 36		sta ($36)			sta 	(zTemp0)
.a72a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./variants/memory.flat/delete.asm

.a72b					MemoryDeleteLine:
.a72b	20 4a a7	jsr $a74a			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.a72e	b2 30		lda ($30)			lda 	(codePtr) 					; size to delete => y
.a730	a8		tay				tay
.a731					_MDDLLoop:
.a731	b1 30		lda ($30),y			lda 	(codePtr),y 				; copy down
.a733	92 30		sta ($30)			sta 	(codePtr)
.a735	a5 30		lda $30				lda 	codePtr 					; check done the lot.
.a737	c5 3a		cmp $3a				cmp 	zTemp2
.a739	d0 07		bne $a742			bne 	_MDLDLNext
.a73b	a5 31		lda $31				lda 	codePtr+1
.a73d	c5 3b		cmp $3b				cmp 	zTemp2+1
.a73f	d0 01		bne $a742			bne 	_MDLDLNext
.a741					_MDDLExit:
.a741	60		rts				rts
.a742					_MDLDLNext:
.a742	e6 30		inc $30				inc 	codePtr						; next byte
.a744	d0 eb		bne $a731			bne 	_MDDLLoop
.a746	e6 31		inc $31				inc 	codePtr+1
.a748	80 e7		bra $a731			bra 	_MDDLLoop
.a74a					IMemoryFindEnd:
.a74a	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a74c	85 3a		sta $3a				sta 	0+zTemp2
.a74e	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a750	85 3b		sta $3b				sta 	1+zTemp2
.a752					_MDLFELoop:
.a752	b2 3a		lda ($3a)			lda 	(zTemp2)
.a754	f0 0b		beq $a761			beq 	_MDLFEExit
.a756	18		clc				clc
.a757	65 3a		adc $3a				adc 	zTemp2
.a759	85 3a		sta $3a				sta 	zTemp2
.a75b	90 f5		bcc $a752			bcc 	_MDLFELoop
.a75d	e6 3b		inc $3b				inc 	zTemp2+1
.a75f	80 f1		bra $a752			bra 	_MDLFELoop
.a761					_MDLFEExit:
.a761	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./variants/memory.flat/insert.asm

.a762					MemoryInsertLine:
.a762	08		php				php
.a763	20 4a a7	jsr $a74a			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.a766	28		plp				plp
.a767	90 08		bcc $a771			bcc 	_MDLIFound
.a769	a5 3a		lda $3a				lda 	zTemp2 						; if CS on entry append.
.a76b	85 30		sta $30				sta 	codePtr
.a76d	a5 3b		lda $3b				lda 	zTemp2+1
.a76f	85 31		sta $31				sta 	codePtr+1
.a771					_MDLIFound:
.a771	ad 25 07	lda $0725			lda 	tokenOffset 				; insert gap in Y, the offset, e.g. length of the new line
.a774	a8		tay				tay
.a775					_MDLIInsert:
.a775	b2 3a		lda ($3a)			lda 	(zTemp2) 					; shift one byte up , at least one covers end case.
.a777	91 3a		sta ($3a),y			sta 	(zTemp2),y 					; work from top down.
.a779	a5 30		lda $30				lda 	codePtr 					; done insert point ?
.a77b	c5 3a		cmp $3a				cmp 	zTemp2
.a77d	d0 06		bne $a785			bne 	_MDLINext
.a77f	a5 31		lda $31				lda 	codePtr+1
.a781	c5 3b		cmp $3b				cmp 	zTemp2+1
.a783	f0 0a		beq $a78f			beq 	_MDLIHaveSpace
.a785					_MDLINext:
.a785	a5 3a		lda $3a				lda 	zTemp2 						; if no, keep zTemp2 going backwards
.a787	d0 02		bne $a78b			bne 	_MDLINoBorrow
.a789	c6 3b		dec $3b				dec 	zTemp2+1
.a78b					_MDLINoBorrow:
.a78b	c6 3a		dec $3a				dec 	zTemp2
.a78d	80 e6		bra $a775			bra 	_MDLIInsert
.a78f					_MDLIHaveSpace:
.a78f	ac 25 07	ldy $0725			ldy 	tokenOffset 				; bytes to copy
.a792	88		dey				dey 								; from offset-1 to 0
.a793					_MDLICopy:
.a793	b9 25 07	lda $0725,y			lda 	tokenOffset,y
.a796	91 30		sta ($30),y			sta 	(codePtr),y
.a798	88		dey				dey
.a799	10 f8		bpl $a793			bpl 	_MDLICopy
.a79b	60		rts				rts
.a79c					MDLAppendLine:
.a79c	86 37		stx $37				stx 	zTemp0+1 					; save new line at zTemp0
.a79e	85 36		sta $36				sta 	zTemp0
.a7a0	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a7a2	85 38		sta $38				sta 	0+zTemp1
.a7a4	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a7a6	85 39		sta $39				sta 	1+zTemp1
.a7a8	b2 38		lda ($38)			lda 	(zTemp1)
.a7aa	d0 0a		bne $a7b6			bne 	_MDLANoInitialise
.a7ac	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a7ae	8d a8 08	sta $08a8			sta 	0+AppendPointer
.a7b1	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a7b3	8d a9 08	sta $08a9			sta 	1+AppendPointer
.a7b6					_MDLANoInitialise:
.a7b6	18		clc				clc
.a7b7	ad a8 08	lda $08a8			lda 	AppendPointer 				; copy append pointer to zTemp1 adding the offset as you go
.a7ba	85 38		sta $38				sta 	zTemp1
.a7bc	72 36		adc ($36)			adc 	(zTemp0)
.a7be	8d a8 08	sta $08a8			sta 	AppendPointer
.a7c1	ad a9 08	lda $08a9			lda 	AppendPointer+1
.a7c4	85 39		sta $39				sta 	zTemp1+1
.a7c6	69 00		adc #$00			adc 	#0
.a7c8	8d a9 08	sta $08a9			sta 	AppendPointer+1
.a7cb	a0 00		ldy #$00			ldy 	#0
.a7cd					_MDLACopy:
.a7cd	b1 36		lda ($36),y			lda 	(zTemp0),y 					; copy new line in
.a7cf	91 38		sta ($38),y			sta 	(zTemp1),y
.a7d1	c8		iny				iny
.a7d2	98		tya				tya
.a7d3	d2 36		cmp ($36)			cmp 	(zTemp0) 					; done whole line
.a7d5	d0 f6		bne $a7cd			bne 	_MDLACopy
.a7d7	a9 00		lda #$00			lda 	#0 							; end of program.
.a7d9	91 38		sta ($38),y			sta 	(zTemp1),y
.a7db	60		rts				rts
.08a8					AppendPointer:
>08a8							.fill 	2

;******  Return to file: _basic.asm


;******  Processing file: ./variants/memory.flat/memory.asm

.9dfe					MemoryNew:
.9dfe	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.9e00	85 30		sta $30				sta 	codePtr
.9e02	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.9e04	85 31		sta $31				sta 	codePtr+1
.9e06	a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.9e08	92 30		sta ($30)			sta 	(codePtr)
.9e0a	60		rts				rts
.9e0b					MemoryInline:
.9e0b	98		tya				tya 								; put address into stack,x
.9e0c	18		clc				clc
.9e0d	65 30		adc $30				adc 	codePtr
.9e0f	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.9e12	a5 31		lda $31				lda 	codePtr+1
.9e14	69 00		adc #$00			adc 	#0
.9e16	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9e19	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.9e1c	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.9e1f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./variants/memory.flat/search.asm

.9e20					MemorySearch:
.9e20	85 36		sta $36				sta 	zTemp0 						; save line number zTemp0
.9e22	86 37		stx $37				stx 	zTemp0+1
.9e24	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.9e26	85 30		sta $30				sta 	codePtr
.9e28	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.9e2a	85 31		sta $31				sta 	codePtr+1
.9e2c					_MTAXLoop:
.9e2c	b2 30		lda ($30)			lda 	(codePtr)
.9e2e	18		clc				clc
.9e2f	f0 21		beq $9e52			beq 	_MTAXExit 					; reached end, exit with CC.
.9e31	a0 01		ldy #$01			ldy 	#1 							; calculate current line# - requested line#
.9e33	b1 30		lda ($30),y			lda 	(codePtr),y
.9e35	38		sec				sec
.9e36	e5 36		sbc $36				sbc 	zTemp0
.9e38	85 38		sta $38				sta 	zTemp1 						; save interim to set Z
.9e3a	c8		iny				iny 								; do the MSB
.9e3b	b1 30		lda ($30),y			lda 	(codePtr),y
.9e3d	e5 37		sbc $37				sbc 	zTemp0+1
.9e3f	05 38		ora $38				ora 	zTemp1
.9e41	f0 0f		beq $9e52			beq 	_MTAXExit	 				; found
.9e43	b0 0d		bcs $9e52			bcs 	_MTAXExit 					; current < required exit
.9e45	18		clc				clc
.9e46	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.9e48	65 30		adc $30				adc 	codePtr
.9e4a	85 30		sta $30				sta 	codePtr
.9e4c	90 02		bcc $9e50			bcc 	_CREExit
.9e4e	e6 31		inc $31				inc 	codePtr+1
.9e50					_CREExit:
.9e50	80 da		bra $9e2c			bra 	_MTAXLoop
.9e52					_MTAXExit:
.9e52	60		rts				rts

;******  Return to file: _basic.asm


;******  End of listing
