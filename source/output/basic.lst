
; 64tass Turbo Assembler Macro V1.56.2625 listing file
; 64tass -D AUTORUN=0 -q -b -Wall -c -L output/basic.lst -l output/basic.lbl -Wall -o basic.rom _basic.asm
; Wed Oct 12 13:44:34 2022

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=0					AUTORUN=0

;******  Processing input file: _basic.asm


;******  Processing file: ./common/aa.system/01common.inc

=$30					ZeroPageMandatory = $30
=$400					ZeroPagePreference = $400
=$480					MemoryStorage = $480
=$2000					BasicStart = $2000
=$8000					BasicEnd = $8000
=$8000					CodeStart = $8000
=$1000					VariableSpace = $1000
=$2000					EndVariableSpace = $2000
=8					MathStackSize = 8
=512					BasicStackSize = 512
=3584					BasicStackBase = $1000-BasicStackSize
=80					MaxLineSize = 80

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/04data.inc

.0030					codePtr:
>0030							.fill 	4
.0034					basicStack:
>0034							.fill 	2
.0036					zTemp0:
>0036							.fill 	2
.0038					zTemp1:
>0038							.fill 	2
.003a					zTemp2:
>003a							.fill 	2
.003c					zsTemp:
>003c							.fill 	2
.003e					zaTemp:
>003e							.fill 	2
=$30					safePtr = codePtr 							; minimise direct tinkering
=$80					NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20					NSBIsReference = $20 						; bit 5 : is a reference
=$10					NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18					NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03					NSBRefMask = $03 							; bits 0,1 : Bytes of reference, -1 (e.g. 00 = 1 byte, 11 = 4 bytes)
=$04					NSBIsArray = $04
=$00					NSTInteger = $00 							; base types for bits 3..4
=$08					NSTFloat = $08
=$10					NSTString = $10
=$18					NSTProcedure = $18
.0400					NSStatus:
>0400							.fill 	MathStackSize
.0408					NSMantissa0:
>0408							.fill 	MathStackSize 				; (this is my integer mantissa system)
.0410					NSMantissa1:
>0410							.fill 	MathStackSize
.0418					NSMantissa2:
>0418							.fill 	MathStackSize
.0420					NSMantissa3:
>0420							.fill 	MathStackSize
.0428					NSExponent:
>0428							.fill 	MathStackSize
.0480					identStart:
>0480							.fill 	1
.0481					identTypeStart:
>0481							.fill 	1
.0482					identTypeEnd:
>0482							.fill 	1
.0483					identHash:
>0483							.fill 	1
.0484					identTypeByte:
>0484							.fill 	1	 						; (see tokenising.pdf)
.0485					encodeState:
>0485							.fill 	1
.0486					digitTemp:
>0486							.fill 	1
.0487					decimalCount:
>0487							.fill 	1
.0488					randomSeed:
>0488							.fill 	4
.048c					lowMemPtr:
>048c							.fill 	2
.048e					stringMemory:
>048e							.fill 	2
.0490					stringInitialised:
>0490							.fill 	1
.0491					stringTempPointer:
>0491							.fill 	2
.0493					breakCheck:
>0493							.fill 	1
.0494					decimalPlaces:
>0494							.fill 	1
.0495					dbOffset:
>0495							.fill 	1
.0496					lastParameter:
>0496							.fill 	1
.0497					dataPointer:
>0497							.fill 	5
.049c					inDataStatement:
>049c							.fill 	1
.049d					tbOffset:
>049d							.fill 	1
.049e					AssemblerAddress:
>049e							.fill 	2
.04a0					AssemblerControl:
>04a0							.fill 	1
.04a1					ParamStart:
>04a1							.fill 	2
.04a3					IsGroup1:
>04a3							.fill 	1
.04a4					BaseOpcode:
>04a4							.fill 	1
.04a5					ModeMask:
>04a5							.fill 	1
.04a6					tokenOffset:
>04a6							.fill 	1
.04a7					tokenLineNumber:
>04a7							.fill 	2
.04a9					tokenBuffer:
>04a9							.fill 	253
.05a6					lineBuffer:
>05a6							.fill 	MaxLineSize+1
.05f7					numberBuffer:
>05f7							.fill 	34
.0619					decimalBuffer:
>0619							.fill 	16

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/constants.inc

=$80					AM_ISZP = $80
=$40					AM_ISG1 = $40
=$20					AM_ISG2 = $20
=224					AM_IMMEDIATE = AM_ISZP+AM_ISG1+AM_ISG2+$00
=228					AM_ZEROPAGE = AM_ISZP+AM_ISG1+AM_ISG2+$04
=40					AM_ACC = AM_ISG2+$08
=108					AM_ABS = AM_ISG1+AM_ISG2+$0C
=208					AM_INDY = AM_ISZP+AM_ISG1+$10
=244					AM_ZEROX = AM_ISZP+AM_ISG1+AM_ISG2+$14
=120					AM_ABSY = AM_ISG1+AM_ISG2+$18
=124					AM_ABSX = AM_ISG1+AM_ISG2+$1C
=209					AM_IND = AM_ISZP+AM_ISG1+$11
=$80					AM_ZEROY = AM_ISZP
=$01					AM_INDABS = $01
=$02					AM_INDABSX = $02
=192					AM_INDX = AM_ISZP+AM_ISG1+$00

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/handlers.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.inc

=1					ERRID_BREAK = 1
=2					ERRID_SYNTAX = 2
=3					ERRID_DIVZERO = 3
=4					ERRID_RANGE = 4
=5					ERRID_TYPE = 5
=6					ERRID_MEMORY = 6
=7					ERRID_ARGUMENT = 7
=8					ERRID_STOP = 8
=9					ERRID_STRING = 9
=10					ERRID_ASSERT = 10
=11					ERRID_DATA = 11
=12					ERRID_NOTDONE = 12
=13					ERRID_LINE = 13
=14					ERRID_GOSUB = 14
=15					ERRID_REPEAT = 15
=16					ERRID_WHILE = 16
=17					ERRID_FOR = 17
=18					ERRID_STACK = 18
=19					ERRID_STRUCT = 19
=20					ERRID_PROC = 20
=21					ERRID_REDEFINE = 21
=22					ERRID_ARRAYSIZE = 22
=23					ERRID_ARRAYIDX = 23

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst.inc

=$00					KWD_LESSLESS                         = $00; $00 <<
=$01					KWD_LESSEQUAL                        = $01; $01 <=
=$02					KWD_LESSGREATER                      = $02; $02 <>
=$03					KWD_PLINGPLING3                      = $03; $03 !!3
=$04					KWD_GREATERLESS                      = $04; $04 ><
=$05					KWD_GREATEREQUAL                     = $05; $05 >=
=$06					KWD_GREATERGREATER                   = $06; $06 >>
=$07					KWD_PLINGPLING7                      = $07; $07 !!7
=$08					KWD_PLINGPLING8                      = $08; $08 !!8
=$09					KWD_PLINGPLING9                      = $09; $09 !!9
=$0a					KWD_PLINGPLING10                     = $0a; $0a !!10
=$0b					KWD_PLINGPLING11                     = $0b; $0b !!11
=$0c					KWD_PLINGPLING12                     = $0c; $0c !!12
=$0d					KWD_PLINGPLING13                     = $0d; $0d !!13
=$0e					KWD_PLINGPLING14                     = $0e; $0e !!14
=$0f					KWD_PLINGPLING15                     = $0f; $0f !!15
=$10					KWD_AT                               = $10; $10 @
=$11					KWD_PLINGPLING17                     = $11; $11 !!17
=$12					KWD_PLINGPLING18                     = $12; $12 !!18
=$13					KWD_LSQPAREN                         = $13; $13 [
=$14					KWD_BACKSLASH                        = $14; $14 \
=$15					KWD_RSQPAREN                         = $15; $15 ]
=$16					KWD_HAT                              = $16; $16 ^
=$17					KWD_UNDERSCORE                       = $17; $17 _
=$18					KWD_BQUOTE                           = $18; $18 `
=$19					KWD_PLINGPLING25                     = $19; $19 !!25
=$1a					KWD_PLINGPLING26                     = $1a; $1a !!26
=$1b					KWD_LCURLY                           = $1b; $1b {
=$1c					KWD_BAR                              = $1c; $1c |
=$1d					KWD_RCURLY                           = $1d; $1d }
=$1e					KWD_TILDE                            = $1e; $1e ~
=$21					KWD_PLING                            = $21; $21 !
=$22					KWD_DQUOTE                           = $22; $22 "
=$23					KWD_HASH                             = $23; $23 #
=$24					KWD_DOLLAR                           = $24; $24 $
=$25					KWD_PERCENT                          = $25; $25 %
=$26					KWD_AMPERSAND                        = $26; $26 &
=$27					KWD_QUOTE                            = $27; $27 '
=$28					KWD_LPAREN                           = $28; $28 (
=$29					KWD_RPAREN                           = $29; $29 )
=$2a					KWD_STAR                             = $2a; $2a *
=$2b					KWD_PLUS                             = $2b; $2b +
=$2c					KWD_COMMA                            = $2c; $2c ,
=$2d					KWD_MINUS                            = $2d; $2d -
=$2e					KWD_PERIOD                           = $2e; $2e .
=$2f					KWD_SLASH                            = $2f; $2f /
=$30					KWD_0                                = $30; $30 0
=$31					KWD_1                                = $31; $31 1
=$32					KWD_2                                = $32; $32 2
=$33					KWD_3                                = $33; $33 3
=$34					KWD_4                                = $34; $34 4
=$35					KWD_5                                = $35; $35 5
=$36					KWD_6                                = $36; $36 6
=$37					KWD_7                                = $37; $37 7
=$38					KWD_8                                = $38; $38 8
=$39					KWD_9                                = $39; $39 9
=$3a					KWD_COLON                            = $3a; $3a :
=$3b					KWD_SEMICOLON                        = $3b; $3b ;
=$3c					KWD_LESS                             = $3c; $3c <
=$3d					KWD_EQUAL                            = $3d; $3d =
=$3e					KWD_GREATER                          = $3e; $3e >
=$3f					KWD_QMARK                            = $3f; $3f ?
=$83					KWD_ABSLPAREN                        = $83; $83 ABS(
=$84					KWD_ALLOCLPAREN                      = $84; $84 ALLOC(
=$85					KWD_ASCLPAREN                        = $85; $85 ASC(
=$86					KWD_CHRDOLLARLPAREN                  = $86; $86 CHR$(
=$87					KWD_EVENTLPAREN                      = $87; $87 EVENT(
=$88					KWD_FALSE                            = $88; $88 FALSE
=$89					KWD_FRACLPAREN                       = $89; $89 FRAC(
=$8a					KWD_INTLPAREN                        = $8a; $8a INT(
=$8b					KWD_ISVALLPAREN                      = $8b; $8b ISVAL(
=$8c					KWD_LEFTDOLLARLPAREN                 = $8c; $8c LEFT$(
=$8d					KWD_LENLPAREN                        = $8d; $8d LEN(
=$8e					KWD_MIDDOLLARLPAREN                  = $8e; $8e MID$(
=$8f					KWD_NOTLPAREN                        = $8f; $8f NOT(
=$90					KWD_OFF                              = $90; $90 OFF
=$91					KWD_ON                               = $91; $91 ON
=$92					KWD_RANDOMLPAREN                     = $92; $92 RANDOM(
=$93					KWD_RIGHTDOLLARLPAREN                = $93; $93 RIGHT$(
=$94					KWD_RNDLPAREN                        = $94; $94 RND(
=$95					KWD_SGNLPAREN                        = $95; $95 SGN(
=$96					KWD_SPCLPAREN                        = $96; $96 SPC(
=$97					KWD_STRDOLLARLPAREN                  = $97; $97 STR$(
=$98					KWD_TIMERLPAREN                      = $98; $98 TIMER(
=$99					KWD_TRUE                             = $99; $99 TRUE
=$9a					KWD_VALLPAREN                        = $9a; $9a VAL(
=$9b					KWD_FOR                              = $9b; $9b FOR
=$9c					KWD_IF                               = $9c; $9c IF
=$9d					KWD_PROC                             = $9d; $9d PROC
=$9e					KWD_REPEAT                           = $9e; $9e REPEAT
=$9f					KWD_WHILE                            = $9f; $9f WHILE
=$a0					KWD_ENDIF                            = $a0; $a0 ENDIF
=$a1					KWD_ENDPROC                          = $a1; $a1 ENDPROC
=$a2					KWD_NEXT                             = $a2; $a2 NEXT
=$a3					KWD_THEN                             = $a3; $a3 THEN
=$a4					KWD_UNTIL                            = $a4; $a4 UNTIL
=$a5					KWD_WEND                             = $a5; $a5 WEND
=$a6					KWD_BY                               = $a6; $a6 BY
=$a7					KWD_CALL                             = $a7; $a7 CALL
=$a8					KWD_CIRCLE                           = $a8; $a8 CIRCLE
=$a9					KWD_CLS                              = $a9; $a9 CLS
=$aa					KWD_COLOR                            = $aa; $aa COLOR
=$ab					KWD_COLOUR                           = $ab; $ab COLOUR
=$ac					KWD_DATA                             = $ac; $ac DATA
=$ad					KWD_DIM                              = $ad; $ad DIM
=$ae					KWD_DOWNTO                           = $ae; $ae DOWNTO
=$af					KWD_ELSE                             = $af; $af ELSE
=$b0					KWD_GFX                              = $b0; $b0 GFX
=$b1					KWD_GOSUB                            = $b1; $b1 GOSUB
=$b2					KWD_GOTO                             = $b2; $b2 GOTO
=$b3					KWD_HERE                             = $b3; $b3 HERE
=$b4					KWD_LET                              = $b4; $b4 LET
=$b5					KWD_LINE                             = $b5; $b5 LINE
=$b6					KWD_LOCAL                            = $b6; $b6 LOCAL
=$b7					KWD_OUTLINE                          = $b7; $b7 OUTLINE
=$b8					KWD_PRINT                            = $b8; $b8 PRINT
=$b9					KWD_READ                             = $b9; $b9 READ
=$ba					KWD_RECT                             = $ba; $ba RECT
=$bb					KWD_REM                              = $bb; $bb REM
=$bc					KWD_RETURN                           = $bc; $bc RETURN
=$bd					KWD_SOLID                            = $bd; $bd SOLID
=$be					KWD_SPRITE                           = $be; $be SPRITE
=$bf					KWD_TEXT                             = $bf; $bf TEXT
=$c0					KWD_TO                               = $c0; $c0 TO

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst0.inc

=$80					KWC_EOL = $80
=$ff					KWC_STRING = $FF
=$fe					KWC_HEXCONST = $FE
=$9b					KWC_FIRST_STRUCTURE = $9b
=$a0					KWC_FIRST_STRUCTURE_DEC = $a0
=$a5					KWC_LAST_STRUCTURE = $a5
=$83					KWC_FIRST_UNARY = $83
=$9a					KWC_LAST_UNARY = $9a

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/stack.inc

=$e0					STK_GOSUB = $E0
=$d0					STK_FOR = $D0
=$c0					STK_REPEAT = $C0
=$b0					STK_PROC = $B0
=$a0					STK_WHILE = $A0
=$01					STK_LOCALN = $01
=$02					STK_LOCALS = $02

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/00start.asm

.8000	a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.8002	9a		txs				txs
.8003	20 bd b1	jsr $b1bd			jsr 	EXTInitialise
.8006	a2 80		ldx #$80			ldx 	#(Prompt >> 8) 				; prompt
.8008	a9 16		lda #$16			lda 	#(Prompt & $FF)
.800a	20 d6 96	jsr $96d6			jsr 	PrintStringXA
.800d	20 95 90	jsr $9095			jsr 	NewCommand 					; erase current program
.8010	20 5b a3	jsr $a35b			jsr 	BackloadProgram
.8013	4c bf 8b	jmp $8bbf			jmp 	WarmStart
>8016	0d 0d 2a 2a 2a 20 46 32		Prompt:	.text 	13,13,"*** F256 Junior SuperBASIC ***",13,13
>801e	35 36 20 4a 75 6e 69 6f 72 20 53 75 70 65 72 42
>802e	41 53 49 43 20 2a 2a 2a 0d 0d
>8038	57 72 69 74 74 65 6e 20				.text 	"Written by Paul Robson 2022.",13,13
>8040	62 79 20 50 61 75 6c 20 52 6f 62 73 6f 6e 20 32
>8050	30 32 32 2e 0d 0d

;******  Processing file: ./common/aa.system/../generated/timestamp.asm

>8056	42 75 69 6c 74 20 57 65			.text "Built Wednesday 12-Oct-2022. Build 1666."
>805e	64 6e 65 73 64 61 79 20 31 32 2d 4f 63 74 2d 32
>806e	30 32 32 2e 20 42 75 69 6c 64 20 31 36 36 36 2e

;******  Return to file: ./common/aa.system/00start.asm

>807e	0d 0d 00					.byte 	13,13,0

;******  Processing file: ./common/aa.system/../../../graphics/_graphics.asm

=1					graphicsIntegrated = 1

;******  Processing file: ./common/aa.system/../../../graphics/./aa.main/aa.data.asm

=3					GXMappingPage = 3
=24576					GXMappingAddress = ($2000 * GXMappingPage)
=0					GXMappingLUT = 0
=11					GXEditSlot = 8 + GXMappingPage
=$36					gxzTemp0 = zTemp0
=$38					gxzTemp1 = zTemp1
=$3a					gxzTemp2 = zTemp2
=$3c					gxzScreen = zsTemp
=$5f7					gxPixelBuffer = numberBuffer
.0629					gxCurrentX:
>0629							.fill 	2
.062b					gxCurrentY:
>062b							.fill 	2
.062d					gxLastX:
>062d							.fill 	2
.062f					gxLastY:
>062f							.fill 	2
.0631					gxX0:
>0631							.fill 	2
.0633					gxY0:
>0633							.fill 	2
.0635					gxX1:
>0635							.fill 	2
.0637					gxY1:
>0637							.fill 	2
.0639					gxSpritesOn:
>0639							.fill 	1
.063a					gxBitmapsOn:
>063a							.fill 	1
.063b					gxBasePage:
>063b							.fill 	1
.063c					gxSpritePage:
>063c							.fill 	1
.063d					gxHeight:
>063d							.fill 	1
.063e					gxMode:
>063e							.fill 	1
.063f					gxColour:
>063f							.fill 	1
.0640					gxEORValue:
>0640							.fill 	1
.0641					gxANDValue:
>0641							.fill 	1
.0642					gxOriginalLUTValue:
>0642							.fill 	1
.0643					gxOriginalMMUSetting:
>0643							.fill 	1
.0644					gsOffset:
>0644							.fill 	1
.0645					GSCurrentSprite:
>0645							.fill 	2
.0647					GXSpriteOffsetBase:
>0647							.fill 	2

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./aa.main/main.asm

.8081					GXGraphicDraw:
.8081	c9 20		cmp #$20			cmp 	#$10*2 						; instructions 00-0F don't use
.8083	b0 06		bcs $808b			bcs 	_GDCoordinate
.8085	86 36		stx $36				stx 	gxzTemp0 					; save X/Y
.8087	84 37		sty $37				sty 	gxzTemp0+1
.8089	80 3d		bra $80c8			bra 	_GDExecuteA 				; and execute
.808b					_GDCoordinate:
.808b	48		pha				pha 								; save AXY
.808c	da		phx				phx
.808d	5a		phy				phy
.808e	a2 03		ldx #$03			ldx 	#3 							; copy currentX to lastX
.8090					_GDCopy1:
.8090	bd 29 06	lda $0629,x			lda 	gxCurrentX,x
.8093	9d 2d 06	sta $062d,x			sta 	gxLastX,x
.8096	ca		dex				dex
.8097	10 f7		bpl $8090			bpl 	_GDCopy1
.8099	68		pla				pla 								; update Y
.809a	8d 2b 06	sta $062b			sta 	gxCurrentY
.809d	9c 2c 06	stz $062c			stz 	gxCurrentY+1
.80a0	68		pla				pla
.80a1	8d 29 06	sta $0629			sta 	gxCurrentX
.80a4	68		pla				pla 								; get A (command+X.1) back
.80a5	48		pha				pha
.80a6	29 01		and #$01			and 	#1 							; put LSB as MSB of Current.X
.80a8	8d 2a 06	sta $062a			sta 	gxCurrentX+1
.80ab	f0 07		beq $80b4			beq 	_GDXOkay 					; check X range
.80ad	ad 29 06	lda $0629			lda 	gxCurrentX
.80b0	c9 40		cmp #$40			cmp 	#64 						; >= 320
.80b2	b0 1e		bcs $80d2			bcs 	_GDError
.80b4					_GDXOkay:
.80b4	ad 2b 06	lda $062b			lda 	gxCurrentY
.80b7	cd 3d 06	cmp $063d			cmp 	gxHeight
.80ba	b0 16		bcs $80d2			bcs 	_GDError
.80bc	a2 07		ldx #$07			ldx 	#7 							; copy current and last to gxXY/12 work area
.80be					_GDCopy2:
.80be	bd 29 06	lda $0629,x			lda 	gxCurrentX,x
.80c1	9d 31 06	sta $0631,x			sta 	gxX0,x
.80c4	ca		dex				dex
.80c5	10 f7		bpl $80be			bpl 	_GDCopy2
.80c7	68		pla				pla 								; get command back
.80c8					_GDExecuteA:
.80c8	29 fe		and #$fe			and 	#$FE 						; lose LSB
.80ca	c9 34		cmp #$34			cmp 	#GRFirstFreeCode*2 			; bad ?
.80cc	b0 05		bcs $80d3			bcs 	_GDError2
.80ce	aa		tax				tax
.80cf	7c d8 80	jmp ($80d8,x)			jmp 	(GRVectorTable,x)
.80d2					_GDError:
.80d2	68		pla				pla 								; throw command
.80d3					_GDError2:
.80d3	38		sec				sec
.80d4	60		rts				rts
.80d5					GXMove:
.80d5	18		clc				clc
.80d6	60		rts				rts
.80d7					GRUndefined:
>80d7	db						.byte 	$DB 						; causes a break in the emulator

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./aa.main/vectors.asm

=26					GRFirstFreeCode = 26
.80d8					GRVectorTable:
>80d8	99 82					.word	GXInitialise             ; $00 Initialise
>80da	a8 82					.word	GXControlBitmap          ; $01 BITMAPCTL
>80dc	eb 82					.word	GXControlSprite          ; $02 SPRITECTL
>80de	52 82					.word	GXClearBitmap            ; $03 Clear
>80e0	5d 84					.word	GXSetColourMode          ; $04 Colour
>80e2	13 86					.word	GXFontHandler            ; $05 DrawFont
>80e4	5b 86					.word	GXSpriteHandler          ; $06 DrawSprite
>80e6	c3 86					.word	GXSelect                 ; $07 SPRUSE
>80e8	f3 86					.word	GXSelectImage            ; $08 SPRIMG
>80ea	d7 80					.word	GRUndefined              ; $09
>80ec	d7 80					.word	GRUndefined              ; $0a
>80ee	d7 80					.word	GRUndefined              ; $0b
>80f0	d7 80					.word	GRUndefined              ; $0c
>80f2	d7 80					.word	GRUndefined              ; $0d
>80f4	d7 80					.word	GRUndefined              ; $0e
>80f6	d7 80					.word	GRUndefined              ; $0f
>80f8	d5 80					.word	GXMove                   ; $10 Move
>80fa	32 83					.word	GXLine                   ; $11 Line
>80fc	a6 84					.word	GXFrameRectangle         ; $12 FrameRect
>80fe	a3 84					.word	GXFillRectangle          ; $13 FillRect
>8100	10 81					.word	GXFrameCircle            ; $14 FrameCircle
>8102	0c 81					.word	GXFillCircle             ; $15 FillCircle
>8104	d7 80					.word	GRUndefined              ; $16
>8106	d7 80					.word	GRUndefined              ; $17
>8108	8b 84					.word	GXPlotPoint              ; $18 Plot
>810a	45 87					.word	GXMoveSprite             ; $19 SPRMOVE

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/circle.asm

.810c					GXFillCircle:
.810c	a9 ff		lda #$ff			lda 	#255
.810e	80 02		bra $8112			bra 	GXCircle
.8110					GXFrameCircle:
.8110	a9 00		lda #$00			lda 	#0
.8112					GXCircle:
.8112	8d 4c 06	sta $064c			sta 	gxIsFillMode					; save Fill flag
.8115	20 40 88	jsr $8840			jsr 	GXSortXY 					; topleft/bottomright
.8118	20 75 87	jsr $8775			jsr 	GXOpenBitmap 				; start drawing
.811b	20 0b 82	jsr $820b			jsr 	GXCircleSetup 				; set up for drawing
.811e	9c 4d 06	stz $064d			stz 	gxYChanged
.8121					_GXCircleDraw:
.8121	ad 4a 06	lda $064a			lda 	gXCentre					; while x <= y
.8124	cd 4b 06	cmp $064b			cmp 	gYCentre
.8127	90 0a		bcc $8133			bcc 	_GXCircleContinue
.8129	d0 03		bne $812e			bne 	_GXNoLast
.812b	20 3e 81	jsr $813e			jsr 	GXPlot1
.812e					_GXNoLast:
.812e	20 86 87	jsr $8786			jsr 	GXCloseBitmap 				; close the bitmap
.8131	18		clc				clc
.8132	60		rts				rts
.8133					_GXCircleContinue:
.8133	20 3b 81	jsr $813b			jsr 	GXPlot2 					; draw it
.8136	20 b8 81	jsr $81b8			jsr 	GXCircleMove 				; adjust the coordinates
.8139	80 e6		bra $8121			bra 	_GXCircleDraw
.813b					GXPlot2:
.813b	20 3e 81	jsr $813e			jsr 	GXPlot1 						; plot and swap, fall through does twice
.813e					GXPlot1:
.813e	ad 4b 06	lda $064b			lda 	gYCentre 						; if y = 0, don't do it twice (xor)
.8141	f0 03		beq $8146			beq 	_GXPlot1Only
.8143	20 62 81	jsr $8162			jsr 	GXPlot0 						; plot and negate
.8146					_GXPlot1Only:
.8146	20 62 81	jsr $8162			jsr 	GXPlot0 						; twice, undoing negation
.8149	ad 4a 06	lda $064a			lda 	gXCentre 						; swap X and Y
.814c	ae 4b 06	ldx $064b			ldx	 	gYCentre
.814f	8d 4b 06	sta $064b			sta 	gYCentre
.8152	8e 4a 06	stx $064a			stx 	gXCentre
.8155	ad 4d 06	lda $064d			lda 	gxYChanged 						; toggle Y Changed flag
.8158	a9 ff		lda #$ff			lda 	#$FF
.815a	8d 4d 06	sta $064d			sta 	gxYChanged
.815d	60		rts				rts
.815e	20 62 81	jsr $8162			jsr 	GXPlot0 						; do once
.8161	60		rts				rts
.8162	ad 4c 06	lda $064c	GXPlot0:lda 	gxIsFillMode 					; outline mode, always draw as X or Y will change
.8165	f0 05		beq $816c			beq 	_GXPlot0Always
.8167	ad 4d 06	lda $064d			lda 	gxYChanged						; fill mode, only draw if changed.
.816a	f0 2d		beq $8199			beq 	GXPlot0Exit
.816c					_GXPlot0Always:
.816c	a2 02		ldx #$02			ldx 	#2 								; copy Y1-A => Y0
.816e	ad 4b 06	lda $064b			lda 	gYCentre
.8171	20 9a 81	jsr $819a			jsr 	GXSubCopy
.8174	a2 00		ldx #$00			ldx 	#0 								; copy X1-A => X0,
.8176	ad 4a 06	lda $064a			lda 	gXCentre
.8179	20 9a 81	jsr $819a			jsr 	GXSubCopy
.817c	48		pha				pha 									; save last offset X
.817d	20 93 87	jsr $8793			jsr 	GXPositionCalc 					; calculate position/offset.
.8180	68		pla				pla
.8181	0a		asl a				asl 	a 								; store 2 x last offset in gxzTemp0
.8182	85 36		sta $36				sta 	gxzTemp0
.8184	64 37		stz $37				stz 	gxzTemp0+1
.8186	26 37		rol $37				rol 	gxzTemp0+1
.8188	ad 4c 06	lda $064c			lda 	gxIsFillMode
.818b	69 80		adc #$80			adc 	#128
.818d	20 ef 84	jsr $84ef			jsr 	GXDrawLineTemp0 				; routine from Rectangle.
.8190	38		sec				sec 									; GY = -GY
.8191	a9 00		lda #$00			lda 	#0
.8193	ed 4b 06	sbc $064b			sbc 	gYCentre
.8196	8d 4b 06	sta $064b			sta 	gYCentre
.8199					GXPlot0Exit:
.8199	60		rts				rts
.819a					GXSubCopy:
.819a	85 36		sta $36				sta 	gxzTemp0
.819c	64 37		stz $37				stz 	gxzTemp0+1
.819e	29 80		and #$80			and 	#$80
.81a0	f0 02		beq $81a4			beq 	_GXNoSx
.81a2	c6 37		dec $37				dec 	gxzTemp0+1
.81a4					_GXNoSx:
.81a4	38		sec				sec
.81a5	bd 35 06	lda $0635,x			lda 	gXX1,x
.81a8	e5 36		sbc $36				sbc 	gxzTemp0
.81aa	9d 31 06	sta $0631,x			sta 	gXX0,x
.81ad	bd 36 06	lda $0636,x			lda 	gXX1+1,x
.81b0	e5 37		sbc $37				sbc 	gxzTemp0+1
.81b2	9d 32 06	sta $0632,x			sta 	gXX0+1,x
.81b5	a5 36		lda $36				lda 	gxzTemp0 						; return A
.81b7	60		rts				rts
.81b8					GXCircleMove:
.81b8	9c 4d 06	stz $064d			stz 	gxYChanged 					; clear Y changed flag
.81bb	a5 39		lda $39				lda 	gxzTemp1+1 					; check sign of D
.81bd	10 0d		bpl $81cc			bpl 	_GXEMPositive
.81bf	ee 4a 06	inc $064a			inc 	gXCentre 					; X++
.81c2	ad 4a 06	lda $064a			lda 	gXCentre
.81c5	20 eb 81	jsr $81eb			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.81c8	a9 06		lda #$06			lda 	#6  						; and add 6
.81ca	80 15		bra $81e1			bra 	_GXEMAddD
.81cc					_GXEMPositive:
.81cc	ee 4a 06	inc $064a			inc 	gXCentre					; X++
.81cf	ce 4b 06	dec $064b			dec 	gyCentre 					; Y--
.81d2	38		sec				sec 								; calculate X-Y
.81d3	ad 4a 06	lda $064a			lda 	gXCentre
.81d6	ed 4b 06	sbc $064b			sbc 	gYCentre
.81d9	20 eb 81	jsr $81eb			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.81dc	a9 0a		lda #$0a			lda 	#10  						; and add 10
.81de	ce 4d 06	dec $064d			dec 	gxYChanged
.81e1					_GXEMAddD:
.81e1	18		clc				clc
.81e2	65 38		adc $38				adc 	gxzTemp1
.81e4	85 38		sta $38				sta 	gxzTemp1
.81e6	90 02		bcc $81ea			bcc 	_GXEMNoCarry
.81e8	e6 39		inc $39				inc 	gxzTemp1+1
.81ea					_GXEMNoCarry:
.81ea	60		rts				rts
.81eb					_GXAdd4TimesToD:
.81eb	85 36		sta $36				sta 	gxzTemp0 					; make 16 bit signed.
.81ed	29 80		and #$80			and 	#$80
.81ef	f0 02		beq $81f3			beq 	_GXA4Unsigned
.81f1	a9 ff		lda #$ff			lda 	#$FF
.81f3					_GXA4Unsigned:
.81f3	85 37		sta $37				sta 	gxzTemp0+1
.81f5	06 36		asl $36				asl 	gxzTemp0  					; x 4
.81f7	26 37		rol $37				rol 	gxzTemp0+1
.81f9	06 36		asl $36				asl 	gxzTemp0
.81fb	26 37		rol $37				rol 	gxzTemp0+1
.81fd	18		clc				clc 								; add
.81fe	a5 36		lda $36				lda		gxzTemp0
.8200	65 38		adc $38				adc 	gxzTemp1
.8202	85 38		sta $38				sta 	gxzTemp1
.8204	a5 37		lda $37				lda		gxzTemp0+1
.8206	65 39		adc $39				adc 	gxzTemp1+1
.8208	85 39		sta $39				sta 	gxzTemp1+1
.820a	60		rts				rts
.820b					GXCircleSetup:
.820b	38		sec				sec
.820c	ad 37 06	lda $0637			lda 	gxY1
.820f	ed 33 06	sbc $0633			sbc 	gxY0
.8212	4a		lsr a				lsr 	a
.8213	8d 49 06	sta $0649			sta 	gxRadius
.8216	a2 00		ldx #$00			ldx 	#0
.8218	20 3a 82	jsr $823a			jsr 	_GXCalculateCentre
.821b	a2 02		ldx #$02			ldx 	#2
.821d	20 3a 82	jsr $823a			jsr 	_GXCalculateCentre
.8220	9c 4a 06	stz $064a			stz 	gXCentre
.8223	ad 49 06	lda $0649			lda 	gxRadius
.8226	8d 4b 06	sta $064b			sta 	gYCentre
.8229	0a		asl a				asl 	a 							; R x 2
.822a	85 36		sta $36				sta 	gxzTemp0
.822c	38		sec				sec
.822d	a9 03		lda #$03			lda 	#3
.822f	e5 36		sbc $36				sbc 	gxzTemp0
.8231	85 38		sta $38				sta 	gxzTemp1
.8233	a9 00		lda #$00			lda 	#0
.8235	e9 00		sbc #$00			sbc 	#0
.8237	85 39		sta $39				sta 	gxzTemp1+1
.8239	60		rts				rts
.823a					_GXCalculateCentre:
.823a	38		sec				sec
.823b	bd 35 06	lda $0635,x			lda 	gxX1,x
.823e	7d 31 06	adc $0631,x			adc 	gXX0,x
.8241	9d 35 06	sta $0635,x			sta 	gXX1,x
.8244	bd 36 06	lda $0636,x			lda 	gXX1+1,x
.8247	7d 32 06	adc $0632,x			adc 	gXX0+1,x
.824a	4a		lsr a				lsr 	a
.824b	9d 36 06	sta $0636,x			sta 	gXX1+1,x
.824e	7e 35 06	ror $0635,x			ror 	gXX1,x
.8251	60		rts				rts
.0649					gxRadius:
>0649							.fill 	1
.064a					gXCentre:
>064a							.fill 	1
.064b					gYCentre:
>064b							.fill 	1
.064c					gxIsFillMode:
>064c							.fill 	1
.064d					gxYChanged:
>064d							.fill  	1

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/clear.asm

=64000					ScreenSize200 = 320 * 200
=76800					ScreenSize240 = 320 * 240
.8252					GXClearBitmap:
.8252	20 75 87	jsr $8775			jsr 	GXOpenBitmap 				; start access
.8255	a0 07		ldy #$07			ldy 	#ScreenSize200 / 8192 		; X is pages to clear
.8257	ad 3d 06	lda $063d			lda 	gxHeight
.825a	c9 c8		cmp #$c8			cmp 	#200 						; 200 ?
.825c	a0 09		ldy #$09			ldy 	#ScreenSize240 / 8192
.825e					_GXCalcLastPage:
.825e	98		tya				tya 								; add to base page
.825f	18		clc				clc
.8260	6d 3b 06	adc $063b			adc 	gxBasePage
.8263	85 0b		sta $0b				sta 	GXEditSlot  				; clear from this page back
.8265					_GXClearAll:
.8265	20 76 82	jsr $8276			jsr 	_GXClearBlock 				; clear 8k block
.8268	c6 0b		dec $0b				dec 	GXEditSlot  				; back to previous
.826a	a5 0b		lda $0b				lda 	GXEditSlot
.826c	cd 3b 06	cmp $063b			cmp 	gxBasePage 					; until before base page
.826f	b0 f4		bcs $8265			bcs 	_GXClearAll
.8271	20 86 87	jsr $8786			jsr 	GXCloseBitmap	 			; stop access
.8274	18		clc				clc
.8275	60		rts				rts
.8276					_GXClearBlock:
.8276	a9 00		lda #$00			lda 	#((GXMappingAddress) & $FF)
.8278	85 38		sta $38				sta 	0+gxzTemp1
.827a	a9 60		lda #$60			lda 	#((GXMappingAddress) >> 8)
.827c	85 39		sta $39				sta 	1+gxzTemp1
.827e					_GXCB0:
.827e	a5 36		lda $36				lda 	gxzTemp0
.8280	a0 00		ldy #$00			ldy 	#0
.8282					_GXCB1:
.8282	91 38		sta ($38),y			sta 	(gxzTemp1),y
.8284	c8		iny				iny
.8285	91 38		sta ($38),y			sta 	(gxzTemp1),y
.8287	c8		iny				iny
.8288	91 38		sta ($38),y			sta 	(gxzTemp1),y
.828a	c8		iny				iny
.828b	91 38		sta ($38),y			sta 	(gxzTemp1),y
.828d	c8		iny				iny
.828e	d0 f2		bne $8282			bne 	_GXCB1
.8290	e6 39		inc $39				inc 	gxzTemp1+1
.8292	a5 39		lda $39				lda 	gxzTemp1+1
.8294	c9 80		cmp #$80			cmp	 	#(GXMappingAddress >> 8)+$20
.8296	d0 e6		bne $827e			bne 	_GXCB0
.8298	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/control.asm

.8299					GXInitialise:
.8299	64 01		stz $01				stz 	1
.829b	a9 01		lda #$01			lda 	#1
.829d	8d 00 d0	sta $d000			sta 	$D000
.82a0	18		clc				clc
.82a1	9c 39 06	stz $0639			stz 	GXSpritesOn
.82a4	9c 3a 06	stz $063a			stz 	GXBitmapsOn
.82a7	60		rts				rts
.82a8					GXControlBitmap:
.82a8	64 01		stz $01				stz 	1
.82aa	a5 36		lda $36				lda 	gxzTemp0 					; get control bits
.82ac	4a		lsr a				lsr 	a 							; bit 0 into carry.
.82ad	ad 00 d0	lda $d000			lda 	$D000 						; read Vicky MCR
.82b0	09 07		ora #$07			ora 	#7 							; turn graphics, text, textoverlay on.
.82b2	29 f7		and #$f7			and 	#$F7 						; clear bitmap bit
.82b4	90 02		bcc $82b8			bcc 	_CBNotOn
.82b6	09 08		ora #$08			ora 	#$08 						; bitmap on if 1 on 0 off
.82b8					_CBNotOn:
.82b8	8d 00 d0	sta $d000			sta 	$D000 						; update Vicky MCR
.82bb	a5 36		lda $36				lda 	gxzTemp0 					; get control settings (bits 0-2)
.82bd	29 07		and #$07			and 	#7
.82bf	8d 00 d1	sta $d100			sta 	$D100 						; write in Vicky Bitmap Control Register #0
.82c2	a5 37		lda $37				lda 	gxzTemp0+1 					; get the base page
.82c4	d0 02		bne $82c8			bne 	_CBNotDefault
.82c6	a9 08		lda #$08			lda 	#8  						; if zero, use 8 e.g. bitmap at $10000
.82c8					_CBNotDefault:
.82c8	8d 3b 06	sta $063b			sta 	gxBasePage
.82cb	20 24 83	jsr $8324			jsr 	GXCalculateBaseAddress 	 	; convert page# to address
.82ce	a5 37		lda $37				lda 	gxzTemp0+1 					; copy address into Bitmap address registers
.82d0	8d 03 d1	sta $d103			sta 	$D103
.82d3	a5 36		lda $36				lda 	gxzTemp0
.82d5	8d 02 d1	sta $d102			sta 	$D102
.82d8	9c 01 d1	stz $d101			stz 	$D101
.82db	a2 f0		ldx #$f0			ldx 	#240 						; height is 240
.82dd	ad 01 d0	lda $d001			lda 	$D001 						; read MCR bit 0
.82e0	29 01		and #$01			and 	#1
.82e2	f0 02		beq $82e6			beq 	_CBHaveHeight
.82e4	a2 c8		ldx #$c8			ldx 	#200 						; if bit 0 set 320x200
.82e6					_CBHaveHeight
.82e6	8e 3d 06	stx $063d			stx 	gxHeight
.82e9	18		clc				clc
.82ea	60		rts				rts
.82eb					GXControlSprite:
.82eb	64 01		stz $01				stz 	1
.82ed	a5 36		lda $36				lda 	gxzTemp0 					; get control bits
.82ef	4a		lsr a				lsr 	a 							; bit 0 into carry.
.82f0	ad 00 d0	lda $d000			lda 	$D000 						; read Vicky MCR
.82f3	09 07		ora #$07			ora 	#7 							; turn graphics, text, textoverlay on.
.82f5	29 df		and #$df			and 	#$DF 						; clear sprite bit
.82f7	90 02		bcc $82fb			bcc 	_CSNotOn
.82f9	09 20		ora #$20			ora 	#$20 						; sprite on if 1 on 0 off
.82fb					_CSNotOn:
.82fb	8d 00 d0	sta $d000			sta 	$D000 						; update Vicky MCR
.82fe	a5 37		lda $37				lda 	gxzTemp0+1 					; get the base page
.8300	d0 02		bne $8304			bne 	_CSNotDefault
.8302	a9 18		lda #$18			lda 	#24  						; if zero, use 24 e.g. sprites at $30000
.8304					_CSNotDefault:
.8304	8d 3c 06	sta $063c			sta 	gxSpritePage
.8307	20 24 83	jsr $8324			jsr 	GXCalculateBaseAddress 	 	; convert page# to address
.830a	a5 36		lda $36				lda 	zTemp0
.830c	8d 47 06	sta $0647			sta 	GXSpriteOffsetBase
.830f	a5 37		lda $37				lda 	zTemp0+1
.8311	8d 48 06	sta $0648			sta 	GXSpriteOffsetBase+1
.8314	a2 00		ldx #$00			ldx 	#0 							; disable all sprites, clears all sprite memory.
.8316					_CSClear:
.8316	9e 00 d9	stz $d900,x			stz 	$D900,x
.8319	9e 00 da	stz $da00,x			stz 	$DA00,x
.831c	ca		dex				dex
.831d	d0 f7		bne $8316			bne 	_CSClear
.831f	9c 46 06	stz $0646			stz 	GSCurrentSprite+1 			; no sprite selected.
.8322	18		clc				clc
.8323	60		rts				rts
.8324					GXCalculateBaseAddress:
.8324	85 36		sta $36				sta 	gxzTemp0
.8326	64 37		stz $37				stz 	gxzTemp0+1
.8328	a9 05		lda #$05			lda 	#5
.832a					_GXShift:
.832a	06 36		asl $36				asl 	gxzTemp0
.832c	26 37		rol $37				rol 	gxzTemp0+1
.832e	3a		dec a				dec		a
.832f	d0 f9		bne $832a			bne 	_GXShift
.8331	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/line.asm

.8332					GXLine:
.8332	20 75 87	jsr $8775			jsr 	GXOpenBitmap
.8335	20 5e 88	jsr $885e			jsr 	GXSortY						; sort pairs so Y1 >= Y0 e.g. top to bottom.
.8338	20 fe 83	jsr $83fe			jsr 	GXLineSetup 				; the calculations in the linescanner constructor
.833b	20 93 87	jsr $8793			jsr 	GXPositionCalc 				; calculate position/offset.
.833e					_GXDrawLoop:
.833e	ac 44 06	ldy $0644			ldy 	gsOffset 					; draw the pixel
.8341	b1 3c		lda ($3c),y			lda 	(gxzScreen),y
.8343	2d 41 06	and $0641			and 	gxANDValue
.8346	4d 40 06	eor $0640			eor 	gxEORValue
.8349	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.834b	20 5a 83	jsr $835a			jsr 	GXLineIsComplete 			; is the line complete ?
.834e	f0 05		beq $8355			beq 	_GXLExit
.8350	20 75 83	jsr $8375			jsr 	GXLineAdvance 				; code as per advance method
.8353	80 e9		bra $833e			bra 	_GXDrawLoop
.8355					_GXLExit:
.8355	20 86 87	jsr $8786			jsr 	GXCloseBitmap
.8358	18		clc				clc
.8359	60		rts				rts
.835a					GXLineIsComplete:
.835a	ad 50 06	lda $0650			lda 	GXIsDiffYLarger 			; is dy larger
.835d	d0 0f		bne $836e			bne 	_GXLICCompareY 				; if so compare Y1/Y0
.835f	ad 31 06	lda $0631			lda 	GXX0 						; compare X, LSB and MSB
.8362	4d 35 06	eor $0635			eor 	GXX1
.8365	d0 06		bne $836d			bne 	_GXLICExit
.8367	ad 32 06	lda $0632			lda 	GXX0+1
.836a	4d 36 06	eor $0636			eor 	GXX1+1
.836d					_GXLICExit:
.836d	60		rts				rts
.836e					_GXLICCompareY:
.836e	ad 37 06	lda $0637			lda 	GXY1
.8371	4d 33 06	eor $0633			eor 	GXY0
.8374	60		rts				rts
.8375					GXLineAdvance:
.8375	18		clc				clc 								; add adjust to position
.8376	ad 52 06	lda $0652			lda 	GXPosition
.8379	6d 53 06	adc $0653			adc 	GXAdjust
.837c	8d 52 06	sta $0652			sta 	GXPosition
.837f	9c 55 06	stz $0655			stz 	GXAddSelect 				; clear add select flag
.8382	b0 05		bcs $8389			bcs 	_GXLAOverflow 				; if carry out, overflowed.
.8384	cd 54 06	cmp $0654			cmp 	GXTotal 					; if exceeded total
.8387	90 0a		bcc $8393			bcc 	_GXLANoExtra
.8389					_GXLAOverflow:
.8389	ce 55 06	dec $0655			dec 	GXAddSelect 				; set addselect to $FF
.838c	38		sec				sec 								; subtract total and write back
.838d	ed 54 06	sbc $0654			sbc 	GXTotal
.8390	8d 52 06	sta $0652			sta 	GXPosition
.8393					_GXLANoExtra:
.8393	ad 50 06	lda $0650			lda 	GXIsDiffYLarger
.8396	f0 0d		beq $83a5			beq 	_GXDXLarger
.8398	20 f7 83	jsr $83f7			jsr 	GXIncrementY
.839b	ad 55 06	lda $0655			lda 	GXAddSelect
.839e	f0 10		beq $83b0			beq 	_GXLAExit
.83a0	20 b1 83	jsr $83b1			jsr 	GXAdjustX
.83a3	80 0b		bra $83b0			bra 	_GXLAExit
.83a5					_GXDXLarger:
.83a5	20 b1 83	jsr $83b1			jsr 	GXAdjustX
.83a8	ad 55 06	lda $0655			lda 	GXAddSelect
.83ab	f0 03		beq $83b0			beq 	_GXLAExit
.83ad	20 f7 83	jsr $83f7			jsr 	GXIncrementY
.83b0					_GXLAExit:
.83b0	60		rts				rts
.83b1					GXAdjustX:
.83b1	ad 51 06	lda $0651			lda 	GXDXNegative
.83b4	10 25		bpl $83db			bpl 	_GXAXRight
.83b6	ad 31 06	lda $0631			lda 	GXX0
.83b9	d0 03		bne $83be			bne 	_GXAXNoBorrow
.83bb	ce 32 06	dec $0632			dec 	GXX0+1
.83be					_GXAXNoBorrow:
.83be	ce 31 06	dec $0631			dec 	GXX0
.83c1	ce 44 06	dec $0644			dec 	gsOffset 					; pixel left
.83c4	ad 44 06	lda $0644			lda 	gsOffset
.83c7	c9 ff		cmp #$ff			cmp 	#$FF
.83c9	d0 0f		bne $83da			bne 	_GXAYExit 					; underflow
.83cb	c6 3d		dec $3d				dec 	gxzScreen+1 					; borrow
.83cd	a5 3d		lda $3d				lda 	gxzScreen+1 					; gone off page
.83cf	c9 60		cmp #$60			cmp 	#GXMappingAddress >> 8
.83d1	b0 07		bcs $83da			bcs 	_GXAYExit
.83d3	18		clc				clc
.83d4	69 20		adc #$20			adc 	#$20 						; fix up
.83d6	85 3d		sta $3d				sta 	gxzScreen+1
.83d8	c6 0b		dec $0b				dec 	GXEditSlot 				; back one page
.83da					_GXAYExit:
.83da	60		rts				rts
.83db					_GXAXRight:
.83db	ee 31 06	inc $0631			inc 	GXX0
.83de	d0 03		bne $83e3			bne 	_GXAXNoCarry
.83e0	ee 32 06	inc $0632			inc 	GXX0+1
.83e3					_GXAXNoCarry:
.83e3	ee 44 06	inc $0644			inc 	gsOffset 					; pixel right
.83e6	d0 0e		bne $83f6			bne 	_GXAXExit 					; if not overflowed, exit.
.83e8	e6 3d		inc $3d				inc 	gxzScreen+1 					; next line
.83ea	a5 3d		lda $3d				lda 	gxzScreen+1
.83ec	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page ?
.83ee	90 06		bcc $83f6			bcc 	_GXAXExit
.83f0	e9 20		sbc #$20			sbc 	#$20 						; fix up
.83f2	85 3d		sta $3d				sta 	gxzScreen+1
.83f4	e6 0b		inc $0b				inc 	GXEditSlot 				; next page
.83f6					_GXAXExit:
.83f6	60		rts				rts
.83f7					GXIncrementY:
.83f7	ee 33 06	inc $0633			inc 	GXY0
.83fa	20 e9 87	jsr $87e9			jsr 	GXMovePositionDown
.83fd	60		rts				rts
.83fe					GXLineSetup:
.83fe	ad 37 06	lda $0637			lda 	GXY1
.8401	38		sec				sec
.8402	ed 33 06	sbc $0633			sbc 	GXY0
.8405	4a		lsr a				lsr 	a
.8406	8d 4f 06	sta $064f			sta 	GXDiffY
.8409	9c 51 06	stz $0651			stz 	GXDXNegative 				; clear -ve flag
.840c	38		sec				sec
.840d	ad 35 06	lda $0635			lda 	GXX1
.8410	ed 31 06	sbc $0631			sbc 	GXX0
.8413	8d 4e 06	sta $064e			sta 	GXDiffX
.8416	ad 36 06	lda $0636			lda 	GXX1+1 						; calculate MSB
.8419	ed 32 06	sbc $0632			sbc 	GXX0+1
.841c	6a		ror a				ror 	a 							; rotate bit into DiffX halving it
.841d	6e 4e 06	ror $064e			ror 	GXDiffX
.8420	0a		asl a				asl 	a
.8421	10 0c		bpl $842f			bpl 	_GDXNotNegative
.8423	a9 00		lda #$00			lda 	#0 							; make absolute value of |dx|
.8425	38		sec				sec
.8426	ed 4e 06	sbc $064e			sbc 	GXDiffX
.8429	8d 4e 06	sta $064e			sta 	GXDiffX
.842c	ce 51 06	dec $0651			dec 	GXDXNegative 				; -ve flag = $FF.
.842f					_GDXNotNegative:
.842f	9c 50 06	stz $0650			stz 	GXIsDiffYLarger 			; clear larger flag
.8432	ad 4f 06	lda $064f			lda 	GXDiffY 					; set adjust and total.
.8435	8d 53 06	sta $0653			sta 	GXAdjust
.8438	ad 4e 06	lda $064e			lda 	GXDiffX
.843b	8d 54 06	sta $0654			sta 	GXTotal
.843e	ad 4f 06	lda $064f			lda 	GXDiffY 					; if dy > dx
.8441	cd 4e 06	cmp $064e			cmp 	GXDiffX
.8444	90 0f		bcc $8455			bcc 	_GDXNotLarger
.8446	ce 50 06	dec $0650			dec 	GXIsDiffYLarger 			; set the dy larger flag
.8449	ad 4e 06	lda $064e			lda 	GXDiffX 					; set adjust and total other way round
.844c	8d 53 06	sta $0653			sta 	GXAdjust
.844f	ad 4f 06	lda $064f			lda 	GXDiffY
.8452	8d 54 06	sta $0654			sta 	GXTotal
.8455					_GDXNotLarger:
.8455	ad 54 06	lda $0654			lda 	GXTotal
.8458	4a		lsr a				lsr 	a
.8459	8d 52 06	sta $0652			sta 	GXPosition
.845c	60		rts				rts
.064e					GXDiffX:
>064e							.fill 	1
.064f					GXDiffY:
>064f							.fill 	1
.0650					GXIsDiffYLarger:
>0650							.fill 	1
.0651					GXDXNegative:
>0651							.fill 	1
.0652					GXPosition:
>0652							.fill 	1
.0653					GXAdjust:
>0653							.fill 	1
.0654					GXTotal:
>0654							.fill 	1
.0655					GXAddSelect:
>0655							.fill 	1

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/mode.asm

.845d					GXSetColourMode:
.845d	a6 36		ldx $36				ldx 	gxzTemp0
.845f	8e 3f 06	stx $063f			stx 	gxColour 								; set colour
.8462	a5 37		lda $37				lda 	gxzTemp0+1 								;
.8464	8d 3e 06	sta $063e			sta 	gxMode 									; set mode
.8467	29 03		and #$03			and 	#3 										; only interested in bits 0-3
.8469	9c 41 06	stz $0641			stz 	gxANDValue 								; initially AND with 0, and EOR with Colour
.846c	ae 3f 06	ldx $063f			ldx 	gxColour
.846f	8e 40 06	stx $0640			stx 	gxEORValue
.8472	c9 02		cmp #$02			cmp 	#2 										; if mode 2/3 And with colour
.8474	90 03		bcc $8479			bcc 	_GXSDCNotAndColour
.8476	8e 41 06	stx $0641			stx 	gxANDValue
.8479					_GXSDCNotAndColour:
.8479	d0 03		bne $847e			bne 	_GXSDCNotAnd 							; mode 2, Don't EOR with colour
.847b	9c 40 06	stz $0640			stz 	gxEORValue
.847e					_GXSDCNotAnd:
.847e	4a		lsr a				lsr 	a 										; if bit 0 set, 1's complement AND value
.847f	90 08		bcc $8489			bcc 	_GXSDCNoFlip
.8481	ad 41 06	lda $0641			lda	 	gxANDValue
.8484	49 ff		eor #$ff			eor 	#$FF
.8486	8d 41 06	sta $0641			sta 	gxANDValue
.8489					_GXSDCNoFlip:
.8489	18		clc				clc
.848a	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/plot.asm

.848b					GXPlotPoint:
.848b	20 75 87	jsr $8775			jsr 	GXOpenBitmap 				; start drawing
.848e	20 93 87	jsr $8793			jsr 	GXPositionCalc 				; setup gxzScreen, gsOffset and the position.
.8491	ac 44 06	ldy $0644			ldy 	gsOffset
.8494	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel on the right
.8496	2d 41 06	and $0641			and 	gxANDValue
.8499	4d 40 06	eor $0640			eor 	gxEORValue
.849c	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.849e	20 86 87	jsr $8786			jsr 	GXCloseBitmap 				; stop drawing and exit
.84a1	18		clc				clc
.84a2	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/rect.asm

.84a3					GXFillRectangle:
.84a3	38		sec				sec
.84a4	80 01		bra $84a7			bra 	GXRectangle
.84a6					GXFrameRectangle:
.84a6	18		clc				clc
.84a7					GXRectangle:
.84a7	08		php				php 								; save Fill flag (CS)
.84a8	20 75 87	jsr $8775			jsr 	GXOpenBitmap 				; start drawing
.84ab	20 40 88	jsr $8840			jsr 	GXSortXY 					; sort both X and Y so top left/bottom right
.84ae	20 93 87	jsr $8793			jsr 	GXPositionCalc 				; setup gxzScreen, gsOffset and the position.
.84b1	38		sec				sec 								; sec = Draw line
.84b2	20 dc 84	jsr $84dc			jsr 	GXDrawLineX1X0 				; draw a line length X1-X0
.84b5	ad 33 06	lda $0633			lda 	gxY0 						; reached end of rectangle ?
.84b8	cd 37 06	cmp $0637			cmp 	gxY1
.84bb	f0 19		beq $84d6			beq 	_GXRectangleExit
.84bd					_GXRectLoop:
.84bd	20 e9 87	jsr $87e9			jsr 	GXMovePositionDown 			; down one.
.84c0	ee 33 06	inc $0633			inc 	gxY0 						; change Y pos
.84c3	ad 33 06	lda $0633			lda 	gxY0 						; reached last line
.84c6	cd 37 06	cmp $0637			cmp 	gXY1
.84c9	f0 07		beq $84d2			beq 	_GXLastLine
.84cb	28		plp				plp 								; get flag back
.84cc	08		php				php
.84cd	20 dc 84	jsr $84dc			jsr 	GXDrawLineX1X0 				; draw horizontal line
.84d0	80 eb		bra $84bd			bra 	_GXRectLoop
.84d2					_GXLastLine:
.84d2	38		sec				sec
.84d3	20 dc 84	jsr $84dc			jsr 	GXDrawLineX1X0
.84d6					_GXRectangleExit:
.84d6	68		pla				pla 								; throw fill flag.
.84d7	20 86 87	jsr $8786			jsr 	GXCloseBitmap 				; stop drawing and exit
.84da	18		clc				clc
.84db	60		rts				rts
.84dc					GXDrawLineX1X0:
.84dc	08		php				php 								; save solid/either-end
.84dd	38		sec				sec
.84de	ad 35 06	lda $0635			lda		gXX1
.84e1	ed 31 06	sbc $0631			sbc 	gXX0
.84e4	85 36		sta $36				sta 	gxzTemp0
.84e6	ad 36 06	lda $0636			lda 	gXX1+1
.84e9	ed 32 06	sbc $0632			sbc 	gXX0+1
.84ec	85 37		sta $37				sta 	gxzTemp0+1
.84ee	28		plp				plp
.84ef					GXDrawLineTemp0:
.84ef	a5 3c		lda $3c				lda 	gxzScreen 						; push gxzScreen, gsOffset and GXEditSlot on stack
.84f1	48		pha				pha
.84f2	a5 3d		lda $3d				lda 	gxzScreen+1
.84f4	48		pha				pha
.84f5	ad 44 06	lda $0644			lda 	gsOffset
.84f8	48		pha				pha
.84f9	a5 0b		lda $0b				lda 	GXEditSlot
.84fb	48		pha				pha
.84fc	ac 44 06	ldy $0644			ldy 	gsOffset 					; Y offset
.84ff	90 1e		bcc $851f			bcc 	_GXDLTEndPoints 			; if CC draw end points only.
.8501					_GXDLTLine:
.8501	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel
.8503	2d 41 06	and $0641			and 	gxANDValue
.8506	4d 40 06	eor $0640			eor 	gxEORValue
.8509	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.850b	a5 36		lda $36				lda 	gxzTemp0 					; decrement counter
.850d	d0 04		bne $8513			bne 	_GXDLTNoBorrow
.850f	c6 37		dec $37				dec 	gxzTemp0+1 					; borrow, if goes -ve then exit
.8511	30 2e		bmi $8541			bmi 	_GXDLTExit
.8513					_GXDLTNoBorrow:
.8513	c6 36		dec $36				dec 	gxzTemp0
.8515	c8		iny				iny 								; next slot.
.8516	d0 e9		bne $8501			bne 	_GXDLTLine
.8518	e6 3d		inc $3d				inc 	gxzScreen+1 					; carry to next
.851a	20 4f 85	jsr $854f			jsr 	GXDLTCheckWrap				; check for new page.
.851d	80 e2		bra $8501			bra 	_GXDLTLine
.851f					_GXDLTEndPoints:
.851f	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel
.8521	2d 41 06	and $0641			and 	gxANDValue
.8524	4d 40 06	eor $0640			eor 	gxEORValue
.8527	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.8529	98		tya				tya 								; advance to right side
.852a	18		clc				clc
.852b	65 36		adc $36				adc 	gxzTemp0
.852d	a8		tay				tay
.852e	a5 3d		lda $3d				lda 	gxzScreen+1
.8530	65 37		adc $37				adc 	gxzTemp0+1
.8532	85 3d		sta $3d				sta 	gxzScreen+1
.8534	20 4f 85	jsr $854f			jsr 	GXDLTCheckWrap 			; fix up.
.8537	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel on the right
.8539	2d 41 06	and $0641			and 	gxANDValue
.853c	4d 40 06	eor $0640			eor 	gxEORValue
.853f	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.8541					_GXDLTExit:
.8541	68		pla				pla
.8542	85 0b		sta $0b				sta 	GXEditSlot
.8544	68		pla				pla
.8545	8d 44 06	sta $0644			sta 	gsOffset
.8548	68		pla				pla
.8549	85 3d		sta $3d				sta 	gxzScreen+1
.854b	68		pla				pla
.854c	85 3c		sta $3c				sta 	gxzScreen
.854e	60		rts				rts
.854f					GXDLTCheckWrap:
.854f	a5 3d		lda $3d				lda 	gxzScreen+1 					; check end of page
.8551	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8)
.8553	90 06		bcc $855b			bcc 	_GXDLTCWExit
.8555	e9 20		sbc #$20			sbc 	#$20 						; fix up
.8557	85 3d		sta $3d				sta 	gxzScreen+1
.8559	e6 0b		inc $0b				inc 	GXEditSlot
.855b					_GXDLTCWExit:
.855b	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/render.asm

.855c					GXDrawGraphicElement:
.855c	8d 56 06	sta $0656			sta 	gxSize 						; save size
.855f	3a		dec a				dec 	a
.8560	8d 57 06	sta $0657			sta 	gxMask 						; and mask
.8563	9c 5b 06	stz $065b			stz 	gxVFlip 					; set the flip bytes
.8566	9c 5c 06	stz $065c			stz 	gxHFlip
.8569	2c 5d 06	bit $065d			bit 	gxUseMode
.856c	10 03		bpl $8571			bpl 	_GXNotVertical
.856e	8d 5b 06	sta $065b			sta 	gxVFlip
.8571					_GXNotVertical:
.8571	50 03		bvc $8576			bvc 	_GXNotHorizontal
.8573	8d 5c 06	sta $065c			sta 	gxHFlip
.8576					_GXNotHorizontal:
.8576	ad 33 06	lda $0633			lda 	gxY0 						; push Y on stack
.8579	48		pha				pha
.857a	8c 59 06	sty $0659			sty 	gxAcquireVector+1 			; and acquisition vector
.857d	8e 58 06	stx $0658			stx 	gxAcquireVector
.8580	20 75 87	jsr $8775			jsr 	gxOpenBitmap 				; open the bitmap.
.8583	ad 5d 06	lda $065d			lda 	gxUseMode 					; scale bits
.8586	4a		lsr a				lsr 	a
.8587	4a		lsr a				lsr 	a
.8588	4a		lsr a				lsr 	a
.8589	29 07		and #$07			and		#7
.858b	1a		inc a				inc 	a
.858c	8d 5a 06	sta $065a			sta 	gxScale
.858f	64 38		stz $38				stz 	gxzTemp1						; start first line
.8591					_GXGELoop:
.8591	a5 38		lda $38				lda 	gxzTemp1 					; current line number to read.
.8593	4d 5b 06	eor $065b			eor 	gxVFlip
.8596	aa		tax				tax 								; get the Xth line.
.8597	20 d5 85	jsr $85d5			jsr 	_GXCallAcquire 				; get that data.
.859a	ad 5a 06	lda $065a			lda 	gxScale 					; do scale identical copies of that line.
.859d	85 39		sta $39				sta 	gxzTemp1+1
.859f					_GXGELoop2:
.859f	ad 33 06	lda $0633			lda 	gxY0 						; off screen
.85a2	cd 3d 06	cmp $063d			cmp 	gxHeight
.85a5	b0 10		bcs $85b7			bcs 	_GXDGEExit
.85a7	20 d8 85	jsr $85d8			jsr 	GXRenderOneLine 			; render line
.85aa	c6 39		dec $39				dec 	gxzTemp1+1 					; scale times.
.85ac	d0 f1		bne $859f			bne 	_GXGELoop2
.85ae	e6 38		inc $38				inc 	gxzTemp1 					; done all lines.
.85b0	a5 38		lda $38				lda 	gxzTemp1
.85b2	cd 56 06	cmp $0656			cmp 	gxSize
.85b5	d0 da		bne $8591			bne 	_GXGELoop
.85b7					_GXDGEExit:
.85b7	68		pla				pla 								; restore Y for next time
.85b8	8d 33 06	sta $0633			sta 	gxY0
.85bb	ae 5a 06	ldx $065a			ldx 	gxScale 					; get scale (1-8)
.85be					_GXShiftLeft:
.85be	18		clc				clc
.85bf	ad 56 06	lda $0656			lda 	gxSize
.85c2	6d 31 06	adc $0631			adc 	gxX0
.85c5	8d 31 06	sta $0631			sta 	gxX0
.85c8	90 03		bcc $85cd			bcc 	_GXSLNoCarry
.85ca	ee 32 06	inc $0632			inc 	gxX0+1
.85cd					_GXSLNoCarry:
.85cd	ca		dex				dex
.85ce	d0 ee		bne $85be			bne 	_GXShiftLeft
.85d0	20 86 87	jsr $8786			jsr 	GXCloseBitmap
.85d3	18		clc				clc
.85d4	60		rts				rts
.85d5					_GXCallAcquire:
.85d5	6c 58 06	jmp ($0658)			jmp 	(gxAcquireVector)
.85d8					GXRenderOneLine:
.85d8	20 93 87	jsr $8793			jsr 	GXPositionCalc 				; calculate position/offset.
.85db	ac 44 06	ldy $0644			ldy 	gsOffset 					; Y contains position.
.85de	64 3a		stz $3a				stz 	gxzTemp2 					; do size pixels
.85e0					_GXROLLoop1:
.85e0	ad 5a 06	lda $065a			lda 	gxScale 					; set to do 'scale' times
.85e3	85 3b		sta $3b				sta 	gxzTemp2+1
.85e5					_GXROLLoop2:
.85e5	a5 3a		lda $3a				lda 	gxzTemp2 					; get current pixel
.85e7	4d 5c 06	eor $065c			eor 	gxHFlip
.85ea	aa		tax				tax 								; read from the pixel buffer
.85eb	bd f7 05	lda $05f7,x			lda 	gxPixelBuffer,x
.85ee	f0 0a		beq $85fa			beq 	_GXZeroPixel 				; don't draw if zero.
.85f0	b1 3c		lda ($3c),y			lda 	(gxzScreen),y
.85f2	2d 41 06	and $0641			and 	gxANDValue
.85f5	5d f7 05	eor $05f7,x			eor 	gxPixelBuffer,x
.85f8	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.85fa					_GXZeroPixel:
.85fa	c8		iny				iny 								; advance pointer
.85fb	d0 05		bne $8602			bne 	_GXNoShift
.85fd	e6 3d		inc $3d				inc 	gxzScreen+1 					; carry to next
.85ff	20 4f 85	jsr $854f			jsr 	GXDLTCheckWrap				; check for new page.
.8602					_GXNoShift:
.8602	c6 3b		dec $3b				dec 	gxzTemp2+1 					; do the inner loop gxScale times.
.8604	d0 df		bne $85e5			bne 	_GXROLLoop2
.8606	e6 3a		inc $3a				inc 	gxzTemp2 					; next pixel.
.8608	a5 3a		lda $3a				lda 	gxzTemp2
.860a	cd 56 06	cmp $0656			cmp 	gxSize
.860d	d0 d1		bne $85e0			bne 	_GXROLLoop1
.860f	ee 33 06	inc $0633			inc 	gxY0
.8612	60		rts				rts
.0656					gxSize:
>0656							.fill 	1
.0657					gxMask:
>0657							.fill 	1
.0658					gxAcquireVector:
>0658							.fill 	2
.065a					gxScale:
>065a							.fill 	1
.065b					gxVFlip:
>065b							.fill 	1
.065c					gxHFlip:
>065c							.fill 	1
.065d					gxUseMode:
>065d							.fill 	1

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/sources/font.asm

.8613					GXFontHandler:
.8613	a5 37		lda $37				lda 	gxzTemp0+1 					; eor with mode
.8615	4d 3e 06	eor $063e			eor 	gxMode
.8618	8d 5d 06	sta $065d			sta 	gxUseMode
.861b	64 37		stz $37				stz 	gxzTemp0+1 					; gxzTemp0 is font #
.861d	06 36		asl $36				asl	 	gxzTemp0 					; x 2
.861f	26 37		rol $37				rol	 	gxzTemp0+1
.8621	06 36		asl $36				asl	 	gxzTemp0 					; x 4
.8623	26 37		rol $37				rol	 	gxzTemp0+1
.8625	06 36		asl $36				asl	 	gxzTemp0 					; x 8
.8627	26 37		rol $37				rol	 	gxzTemp0+1
.8629	a5 37		lda $37				lda 	gxzTemp0+1 					; put in page C0
.862b	09 c0		ora #$c0			ora 	#$C0
.862d	85 37		sta $37				sta 	gxzTemp0+1
.862f	a9 08		lda #$08			lda 	#8 							; size 8x8
.8631	a2 39		ldx #$39			ldx 	#GXGetGraphicDataFont & $FF ; XY = Graphic Data retrieval routine
.8633	a0 86		ldy #$86			ldy 	#GXGetGraphicDataFont >> 8
.8635	20 5c 85	jsr $855c			jsr 	GXDrawGraphicElement
.8638	60		rts				rts
.8639					GXGetGraphicDataFont:
.8639	8a		txa				txa 								; X->Y
.863a	a8		tay				tay
.863b	a6 01		ldx $01				ldx 	1 							; preserve old value
.863d	a9 01		lda #$01			lda 	#1 							; access page 1 (font memory)
.863f	85 01		sta $01				sta 	1
.8641	b1 36		lda ($36),y			lda 	(gxzTemp0),y 				; read the font element.
.8643	86 01		stx $01				stx 	1 							; put old value back.
.8645	a2 00		ldx #$00			ldx 	#0 							; do 8 times
.8647					_GXExpand:
.8647	9e f7 05	stz $05f7,x			stz 	gxPixelBuffer,x 			; zero in pixel buffer
.864a	0a		asl a				asl 	a 							; shift bit 7 into C
.864b	90 08		bcc $8655			bcc 	_GXNoPixel
.864d	48		pha				pha 								; if set, set pixel buffer to current colour.
.864e	ad 3f 06	lda $063f			lda 	gxColour
.8651	9d f7 05	sta $05f7,x			sta 	gxPixelBuffer,x
.8654	68		pla				pla
.8655					_GXNoPixel:
.8655	e8		inx				inx 								; do the whole byte.
.8656	e0 08		cpx #$08			cpx 	#8
.8658	d0 ed		bne $8647			bne 	_GXExpand
.865a	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/sources/sprite.asm

.865b					GXSpriteHandler:
.865b	a5 37		lda $37				lda 	gxzTemp0+1 					; eor with mode
.865d	4d 3e 06	eor $063e			eor 	gxMode
.8660	8d 5d 06	sta $065d			sta 	gxUseMode
.8663	a6 36		ldx $36				ldx 	gxzTemp0 					; sprite #
.8665	da		phx				phx
.8666	20 75 87	jsr $8775			jsr 	GXOpenBitmap 				; can access sprite information
.8669	68		pla				pla
.866a	20 04 88	jsr $8804			jsr 	GXFindSprite 				; get the sprite address
.866d	20 86 87	jsr $8786			jsr 	GXCloseBitmap
.8670	ad 5e 06	lda $065e			lda 	GXSizePixels 					; return size
.8673	a2 7b		ldx #$7b			ldx 	#GXSpriteAcquire & $FF
.8675	a0 86		ldy #$86			ldy 	#GXSpriteAcquire >> 8
.8677	20 5c 85	jsr $855c			jsr 	GXDrawGraphicElement
.867a	60		rts				rts
.867b					GXSpriteAcquire:
.867b	ad 3c 06	lda $063c			lda 	GXSpritePage				; point to base page
.867e	85 0b		sta $0b				sta 	GXEditSlot
.8680	86 36		stx $36				stx 	zTemp0 						; row number x 1,2,3,4
.8682	a9 00		lda #$00			lda 	#0
.8684	ae 5f 06	ldx $065f			ldx 	GXSizeBits
.8687					_GXTimesRowNumber:
.8687	18		clc				clc
.8688	65 36		adc $36				adc 	zTemp0
.868a	ca		dex				dex
.868b	10 fa		bpl $8687			bpl 	_GXTimesRowNumber
.868d	64 37		stz $37				stz 	gxzTemp0+1
.868f	0a		asl a				asl 	a 							; row x 2,4,6,8
.8690	26 37		rol $37				rol 	gxzTemp0+1
.8692	0a		asl a				asl 	a 							; row x 4,8,12,16
.8693	26 37		rol $37				rol 	gxzTemp0+1
.8695	0a		asl a				asl 	a 							; row x 8,16,24,32
.8696	26 37		rol $37				rol 	gxzTemp0+1
.8698	85 36		sta $36				sta 	gxzTemp0
.869a	18		clc				clc 								; add base address.
.869b	a5 36		lda $36				lda 	gxzTemp0
.869d	6d 61 06	adc $0661			adc 	GXSpriteOffset
.86a0	85 36		sta $36				sta 	gxzTemp0
.86a2	a5 37		lda $37				lda 	gxzTemp0+1
.86a4	6d 62 06	adc $0662			adc 	GXSpriteOffset+1
.86a7					_GXSAFindPage:
.86a7	c9 20		cmp #$20			cmp 	#$20 						; on this page
.86a9	90 06		bcc $86b1			bcc 	_GXSAFoundPage
.86ab	e9 20		sbc #$20			sbc 	#$20 						; forward one page
.86ad	e6 0b		inc $0b				inc 	GXEditSlot
.86af	80 f6		bra $86a7			bra 	_GXSAFindPage
.86b1					_GXSAFoundPage:
.86b1	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; physical address of page.
.86b3	85 37		sta $37				sta 	gxzTemp0+1 					; gxzTemp0 now points to the page
.86b5	a0 00		ldy #$00			ldy 	#0
.86b7					_GXSACopyLoop:
.86b7	b1 36		lda ($36),y			lda 	(gxzTemp0),y
.86b9	99 f7 05	sta $05f7,y			sta 	gxPixelBuffer,y
.86bc	c8		iny				iny
.86bd	cc 5e 06	cpy $065e			cpy 	GXSizePixels
.86c0	d0 f5		bne $86b7			bne 	_GXSACopyLoop
.86c2	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/sprite.asm

.86c3					GXSelect:
.86c3	a5 36		lda $36				lda 	gxzTemp0 					; illegal sprite #
.86c5	c9 40		cmp #$40			cmp 	#64
.86c7	b0 28		bcs $86f1			bcs 	_GXSFail
.86c9	a4 37		ldy $37				ldy 	gxzTemp0+1 					; control value.
.86cb	a9 00		lda #$00			lda  	#0 							; multiply sprite # x 8 => A
.86cd	06 36		asl $36				asl 	gxzTemp0
.86cf	06 36		asl $36				asl 	gxzTemp0
.86d1	06 36		asl $36				asl 	gxzTemp0
.86d3	2a		rol a				rol 	a
.86d4	69 d9		adc #$d9			adc 	#$D9 						; sprite area
.86d6	8d 46 06	sta $0646			sta 	GSCurrentSprite+1 			; address to GSCurrentSprite and gxzTemp
.86d9	85 37		sta $37				sta 	gxzTemp0+1
.86db	a5 36		lda $36				lda 	gxzTemp0
.86dd	8d 45 06	sta $0645			sta 	GSCurrentSprite
.86e0	98		tya				tya 								; control value
.86e1	29 01		and #$01			and 	#1
.86e3	85 38		sta $38				sta 	gxzTemp1 					; save it handily.
.86e5	64 01		stz $01				stz 	1 							; access sprite control.
.86e7	b2 36		lda ($36)			lda 	(gxzTemp0) 					; update enable bit only.
.86e9	29 fe		and #$fe			and 	#$FE
.86eb	05 38		ora $38				ora 	gxzTemp1
.86ed	92 36		sta ($36)			sta 	(gxzTemp0) 					; write to control register
.86ef	18		clc				clc
.86f0	60		rts				rts
.86f1					_GXSFail:
.86f1	38		sec				sec
.86f2	60		rts				rts
.86f3					GXSelectImage:
.86f3	ad 46 06	lda $0646			lda 	GSCurrentSprite+1 			; check sprite selected
.86f6	f0 4b		beq $8743			beq 	_GXSIFail
.86f8	64 01		stz $01				stz 	1
.86fa	a5 36		lda $36				lda 	gxzTemp0 					; sprite image
.86fc	48		pha				pha
.86fd	20 75 87	jsr $8775			jsr 	GXOpenBitmap
.8700	68		pla				pla
.8701	20 04 88	jsr $8804			jsr 	GXFindSprite
.8704	a0 01		ldy #$01			ldy 	#1
.8706	ad 45 06	lda $0645			lda 	GSCurrentSprite
.8709	85 36		sta $36				sta 	gxzTemp0
.870b	ad 46 06	lda $0646			lda 	GSCurrentSprite+1
.870e	85 37		sta $37				sta 	gxzTemp0+1
.8710	ad 61 06	lda $0661			lda 	GXSpriteOffset
.8713	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.8715	18		clc				clc
.8716	ad 62 06	lda $0662			lda 	GXSpriteOffset+1
.8719	6d 47 06	adc $0647			adc 	GXSpriteOffsetBase
.871c	c8		iny				iny
.871d	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.871f	ad 48 06	lda $0648			lda 	GXSpriteOffsetBase+1
.8722	69 00		adc #$00			adc 	#0
.8724	c8		iny				iny
.8725	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.8727	b2 36		lda ($36)			lda 	(gxzTemp0)					; get LSB into gxzTemp1
.8729	29 01		and #$01			and 	#1
.872b	85 38		sta $38				sta 	gxzTemp1
.872d	ad 5f 06	lda $065f			lda 	GXSizeBits 					; get raw size
.8730	49 03		eor #$03			eor 	#3 							; make it right (00=32 etc.)
.8732	2a		rol a				rol 	a 							; x 2
.8733	0a		asl a				asl 	a 							; x 4
.8734	0a		asl a				asl 	a 							; x 8
.8735	0a		asl a				asl 	a 							; x 16
.8736	0d 60 06	ora $0660			ora 	GXSpriteLUT 						; Or with LUT
.8739	0a		asl a				asl 	a 							; 1 shift
.873a	05 38		ora $38				ora 	gxzTemp1 					; Or in the enable bit
.873c	92 36		sta ($36)			sta 	(gxzTemp0) 					; and write back
.873e	20 86 87	jsr $8786			jsr 	GXCloseBitmap
.8741	18		clc				clc
.8742	60		rts				rts
.8743					_GXSIFail:
.8743	38		sec				sec
.8744	60		rts				rts
.8745					GXMoveSprite:
.8745	ad 46 06	lda $0646			lda 	GSCurrentSprite+1 			; check sprite selected
.8748	f0 29		beq $8773			beq 	_GXSIFail
.874a	85 37		sta $37				sta 	gxzTemp0+1
.874c	a0 04		ldy #$04			ldy 	#4
.874e	ad 45 06	lda $0645			lda 	GSCurrentSprite
.8751	85 36		sta $36				sta 	gxzTemp0
.8753	a9 40		lda #$40			lda 	#64 						; calculate 32-SpriteSize/2 (actually (64-SpriteSize)/2)
.8755	38		sec				sec
.8756	ed 5e 06	sbc $065e			sbc 	GXSizePixels
.8759	4a		lsr a				lsr 	a
.875a	48		pha				pha
.875b	18		clc				clc
.875c	6d 31 06	adc $0631			adc 	gxX0						; copy position.
.875f	91 36		sta ($36),y			sta 	(gxzTemp0),y
.8761	c8		iny				iny
.8762	ad 32 06	lda $0632			lda 	gxX0+1
.8765	69 00		adc #$00			adc 	#0
.8767	91 36		sta ($36),y			sta 	(gxzTemp0),y
.8769	c8		iny				iny
.876a	68		pla				pla
.876b	18		clc				clc
.876c	6d 33 06	adc $0633			adc 	gxY0
.876f	91 36		sta ($36),y			sta 	(gxzTemp0),y
.8771	18		clc				clc
.8772	60		rts				rts
.8773					_GXSIFail:
.8773	38		sec				sec
.8774	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./utility/access.asm

.8775					GXOpenBitmap:
.8775	78		sei				sei 								; no interrupts here
.8776	a5 00		lda $00				lda 	0 							; save original MMU Control register
.8778	8d 43 06	sta $0643			sta 	gxOriginalMMUSetting
.877b	a9 80		lda #$80			lda 	#GXMappingLUT*16+$80+GXMappingLUT
.877d	85 00		sta $00				sta 	0
.877f	a5 0b		lda $0b				lda 	GXEditSlot 				; Save the original LUT slot value
.8781	8d 42 06	sta $0642			sta 	gxOriginalLUTValue
.8784	58		cli				cli
.8785	60		rts				rts
.8786					GXCloseBitmap:
.8786	78		sei				sei
.8787	ad 42 06	lda $0642			lda 	gxOriginalLUTValue 			; restore LUT slot value
.878a	85 0b		sta $0b				sta 	GXEditSlot
.878c	ad 43 06	lda $0643			lda 	gxOriginalMMUSetting 		; restore MMU Control register
.878f	85 00		sta $00				sta 	0
.8791	58		cli				cli
.8792	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./utility/calculate.asm

.8793					GXPositionCalc:
.8793	a5 36		lda $36				lda 	gxzTemp0 					; save temp memory slot
.8795	48		pha				pha
.8796	ad 33 06	lda $0633			lda 	GXY0 						; gxzScreen = Y0
.8799	85 3c		sta $3c				sta 	gxzScreen
.879b	64 3d		stz $3d				stz 	gxzScreen+1
.879d	06 3c		asl $3c				asl 	gxzScreen 						; gxzScreen = Y0 * 4
.879f	26 3d		rol $3d				rol 	gxzScreen+1
.87a1	06 3c		asl $3c				asl 	gxzScreen
.87a3	26 3d		rol $3d				rol 	gxzScreen+1
.87a5	18		clc				clc 								; gxzScreen = Y0 * 5, as it's still in A
.87a6	65 3c		adc $3c				adc 	gxzScreen
.87a8	85 3c		sta $3c				sta 	gxzScreen
.87aa	90 02		bcc $87ae			bcc 	_GXPCNoCarry
.87ac	e6 3d		inc $3d				inc 	gxzScreen+1
.87ae					_GXPCNoCarry:
.87ae	06 3c		asl $3c				asl 	gxzScreen 						; now Y0 * 10. Needs to be multiplied by another
.87b0	26 3d		rol $3d				rol 	gxzScreen+1 					; 32. At this point the MSB contains the offset
.87b2	a5 3d		lda $3d				lda	 	gxzScreen+1 					; so save this in zTemp0 and zero it.
.87b4	85 36		sta $36				sta 	gxzTemp0
.87b6	64 3d		stz $3d				stz 	gxzScreen+1
.87b8	a9 05		lda #$05			lda 	#5 							; now multiply by 32, this puts this in the range 0..8191
.87ba					_GXPCMultiply32:
.87ba	06 3c		asl $3c				asl 	gxzScreen
.87bc	26 3d		rol $3d				rol 	gxzScreen+1
.87be	3a		dec a				dec 	a
.87bf	d0 f9		bne $87ba			bne 	_GXPCMultiply32
.87c1	18		clc				clc
.87c2	ad 31 06	lda $0631			lda 	GXX0 						; add X to this value, put the result in gsOffset, gxzScreen has to be on a page boundary
.87c5	65 3c		adc $3c				adc 	gxzScreen
.87c7	8d 44 06	sta $0644			sta 	gsOffset
.87ca	ad 32 06	lda $0632			lda 	GXX0+1
.87cd	65 3d		adc $3d				adc 	gxzScreen+1
.87cf	c9 20		cmp #$20			cmp 	#$20 						; has it overflowed into the next one ?
.87d1	90 04		bcc $87d7			bcc 	_GXPCNoOverflow
.87d3	29 1f		and #$1f			and 	#$1F 						; fix it up
.87d5	e6 36		inc $36				inc 	gxzTemp0 					; add 1 to the page number
.87d7					_GXPCNoOverflow:
.87d7	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; make it the address mapped in.
.87d9	85 3d		sta $3d				sta 	gxzScreen+1
.87db	64 3c		stz $3c				stz 	gxzScreen
.87dd	18		clc				clc
.87de	a5 36		lda $36				lda 	gxzTemp0 					; get the page number
.87e0	6d 3b 06	adc $063b			adc 	gxBasePage 					; by adding the base page
.87e3	85 0b		sta $0b				sta 	GXEditSlot 				; and map it into memory.
.87e5	68		pla				pla
.87e6	85 36		sta $36				sta 	gxzTemp0
.87e8	60		rts				rts
.87e9					GXMovePositionDown:
.87e9	18		clc				clc 								; add 320 to offset/temp+1
.87ea	ad 44 06	lda $0644			lda 	gsOffset
.87ed	69 40		adc #$40			adc 	#64
.87ef	8d 44 06	sta $0644			sta 	gsOffset
.87f2	a5 3d		lda $3d				lda 	gxzScreen+1
.87f4	69 01		adc #$01			adc 	#1
.87f6	85 3d		sta $3d				sta 	gxzScreen+1
.87f8	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page
.87fa	90 07		bcc $8803			bcc 	_GXMPDExit
.87fc	38		sec				sec  								; next page
.87fd	e9 20		sbc #$20			sbc 	#$20
.87ff	85 3d		sta $3d				sta 	gxzScreen+1
.8801	e6 0b		inc $0b				inc 	GXEditSlot
.8803					_GXMPDExit:
.8803	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./utility/find.asm

.8804					GXFindSprite:
.8804	aa		tax				tax
.8805	ad 3c 06	lda $063c			lda 	GXSpritePage 				; access the base page of the sprite
.8808	85 0b		sta $0b				sta 	GXEditSlot
.880a	bd 00 61	lda $6100,x			lda 	GXMappingAddress+256,x 		; MSB
.880d	8d 62 06	sta $0662			sta 	GXSpriteOffset+1
.8810	bd 00 60	lda $6000,x			lda 	GXMappingAddress,x 			; LSB
.8813	48		pha				pha 								; save twice
.8814	48		pha				pha
.8815	29 03		and #$03			and 	#3 							; get sprite size
.8817	8d 5f 06	sta $065f			sta 	GXSizeBits 					; save raw (0-3)
.881a	aa		tax				tax
.881b	bd 3c 88	lda $883c,x			lda 	_GXFXSSTTable,x 			; read sprite size
.881e	8d 5e 06	sta $065e			sta 	GXSizePixels 					; save (8/16/24/32)
.8821	68		pla				pla 								; get LUT
.8822	4a		lsr a				lsr		a
.8823	4a		lsr a				lsr		a
.8824	29 03		and #$03			and 	#3
.8826	8d 60 06	sta $0660			sta 	GXSpriteLUT
.8829	68		pla				pla 								; address, neeeds to be x 4
.882a	29 f0		and #$f0			and 	#$F0
.882c	8d 61 06	sta $0661			sta 	GXSpriteOffset
.882f	0e 61 06	asl $0661			asl 	GXSpriteOffset
.8832	2e 62 06	rol $0662			rol 	GXSpriteOffset+1
.8835	0e 61 06	asl $0661			asl 	GXSpriteOffset
.8838	2e 62 06	rol $0662			rol 	GXSpriteOffset+1
.883b	60		rts				rts
.883c					_GXFXSSTTable:
>883c	08 10 18 20					.byte 	8,16,24,32
.065e					GXSizePixels:
>065e							.fill 	1
.065f					GXSizeBits:
>065f							.fill 	1
.0660					GXSpriteLUT:
>0660							.fill 	1
.0661					GXSpriteOffset:
>0661							.fill 	2

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./utility/sort.asm

.8840					GXSortXY:
.8840	20 5e 88	jsr $885e			jsr 	GXSortY 					; will be sorted on Y now
.8843	ad 31 06	lda $0631			lda 	gxX0 						; compare X0 v X1
.8846	cd 35 06	cmp $0635			cmp 	gxX1
.8849	ad 32 06	lda $0632			lda 	gXX0+1
.884c	ed 36 06	sbc $0636			sbc 	gXX1+1
.884f	90 0c		bcc $885d			bcc 	_GXSXYExit 					; X0 < X1 exit
.8851	a2 00		ldx #$00			ldx 	#0 							; swap them over
.8853	a0 04		ldy #$04			ldy 	#4
.8855	20 72 88	jsr $8872			jsr 	GXSwapXY
.8858	e8		inx				inx
.8859	c8		iny				iny
.885a	20 72 88	jsr $8872			jsr 	GXSwapXY
.885d					_GXSXYExit:
.885d	60		rts				rts
.885e					GXSortY:
.885e	ad 33 06	lda $0633			lda 	gxY0 						; if Y0 >= Y1
.8861	cd 37 06	cmp $0637			cmp 	gxY1
.8864	90 0b		bcc $8871			bcc 	_GXSYSorted
.8866	a2 03		ldx #$03			ldx 	#3 							; swap 3-0
.8868	a0 07		ldy #$07			ldy 	#7 							; with 4-7
.886a					_GXSwap1:
.886a	20 72 88	jsr $8872			jsr 	GXSwapXY
.886d	88		dey				dey
.886e	ca		dex				dex
.886f	10 f9		bpl $886a			bpl 	_GXSwap1
.8871					_GXSYSorted:
.8871	60		rts				rts
.8872					GXSwapXY:
.8872	bd 31 06	lda $0631,x			lda 	gxX0,x
.8875	48		pha				pha
.8876	b9 31 06	lda $0631,y			lda 	gxX0,y
.8879	9d 31 06	sta $0631,x			sta 	gxX0,x
.887c	68		pla				pla
.887d	99 31 06	sta $0631,y			sta 	gxX0,y
.8880	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Return to file: ./common/aa.system/00start.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/grtest.asm

.8881					RunDemos:
.8881					loop:
.8881	a9 00		lda #$00			lda 	#((0)*2)+(((1) >> 8) & 1)
.8883	a2 01		ldx #$01			ldx 	#((1) & $FF)
.8885	a0 00		ldy #$00			ldy 	#(0)
.8887	20 81 80	jsr $8081			jsr 	GXGraphicDraw
.888a	a9 02		lda #$02			lda 	#((1)*2)+(((1) >> 8) & 1)
.888c	a2 01		ldx #$01			ldx 	#((1) & $FF)
.888e	a0 00		ldy #$00			ldy 	#(0)
.8890	20 81 80	jsr $8081			jsr 	GXGraphicDraw
.8893	a9 04		lda #$04			lda 	#((2)*2)+((($03) >> 8) & 1)
.8895	a2 03		ldx #$03			ldx 	#(($03) & $FF)
.8897	a0 00		ldy #$00			ldy 	#(0)
.8899	20 81 80	jsr $8081			jsr 	GXGraphicDraw
.889c	a9 06		lda #$06			lda 	#((3)*2)+((($FF) >> 8) & 1)
.889e	a2 ff		ldx #$ff			ldx 	#(($FF) & $FF)
.88a0	a0 00		ldy #$00			ldy 	#(0)
.88a2	20 81 80	jsr $8081			jsr 	GXGraphicDraw
.88a5	a9 30		lda #$30			lda 	#((24)*2)+(((130) >> 8) & 1)
.88a7	a2 82		ldx #$82			ldx 	#((130) & $FF)
.88a9	a0 1e		ldy #$1e			ldy 	#(30)
.88ab	20 81 80	jsr $8081			jsr 	GXGraphicDraw
.88ae	a9 08		lda #$08			lda 	#((4)*2)+((('Q') >> 8) & 1)
.88b0	a2 51		ldx #$51			ldx 	#(('Q') & $FF)
.88b2	a0 08		ldy #$08			ldy 	#(1*8)
.88b4	20 81 80	jsr $8081			jsr 	GXGraphicDraw
.88b7	a9 08		lda #$08			lda 	#((4)*2)+((('X') >> 8) & 1)
.88b9	a2 58		ldx #$58			ldx 	#(('X') & $FF)
.88bb	a0 08		ldy #$08			ldy 	#(1*8)
.88bd	20 81 80	jsr $8081			jsr 	GXGraphicDraw
.88c0	a9 0a		lda #$0a			lda 	#((5)*2)+(((0) >> 8) & 1)
.88c2	a2 00		ldx #$00			ldx 	#((0) & $FF)
.88c4	a0 08		ldy #$08			ldy 	#(1*8)
.88c6	20 81 80	jsr $8081			jsr 	GXGraphicDraw
.88c9	a9 0a		lda #$0a			lda 	#((5)*2)+(((1) >> 8) & 1)
.88cb	a2 01		ldx #$01			ldx 	#((1) & $FF)
.88cd	a0 08		ldy #$08			ldy 	#(1*8)
.88cf	20 81 80	jsr $8081			jsr 	GXGraphicDraw
.88d2	a9 0a		lda #$0a			lda 	#((5)*2)+(((2) >> 8) & 1)
.88d4	a2 02		ldx #$02			ldx 	#((2) & $FF)
.88d6	a0 08		ldy #$08			ldy 	#(1*8)
.88d8	20 81 80	jsr $8081			jsr 	GXGraphicDraw
.88db	a9 20		lda #$20			lda 	#((16)*2)+(((10) >> 8) & 1)
.88dd	a2 0a		ldx #$0a			ldx 	#((10) & $FF)
.88df	a0 0a		ldy #$0a			ldy 	#(10)
.88e1	20 81 80	jsr $8081			jsr 	GXGraphicDraw
.88e4	a9 28		lda #$28			lda 	#((20)*2)+(((100) >> 8) & 1)
.88e6	a2 64		ldx #$64			ldx 	#((100) & $FF)
.88e8	a0 64		ldy #$64			ldy 	#(100)
.88ea	20 81 80	jsr $8081			jsr 	GXGraphicDraw
.88ed	a9 0c		lda #$0c			lda 	#((6)*2)+(((3) >> 8) & 1)
.88ef	a2 03		ldx #$03			ldx 	#((3) & $FF)
.88f1	a0 01		ldy #$01			ldy 	#(1)
.88f3	20 81 80	jsr $8081			jsr 	GXGraphicDraw
.88f6	a9 0e		lda #$0e			lda 	#((7)*2)+(((2) >> 8) & 1)
.88f8	a2 02		ldx #$02			ldx 	#((2) & $FF)
.88fa	a0 00		ldy #$00			ldy 	#(0)
.88fc	20 81 80	jsr $8081			jsr 	GXGraphicDraw
.88ff	a9 32		lda #$32			lda 	#((25)*2)+(((200) >> 8) & 1)
.8901	a2 c8		ldx #$c8			ldx 	#((200) & $FF)
.8903	a0 c8		ldy #$c8			ldy 	#(200)
.8905	20 81 80	jsr $8081			jsr 	GXGraphicDraw
.8908	a9 0c		lda #$0c			lda 	#((6)*2)+(((4) >> 8) & 1)
.890a	a2 04		ldx #$04			ldx 	#((4) & $FF)
.890c	a0 01		ldy #$01			ldy 	#(1)
.890e	20 81 80	jsr $8081			jsr 	GXGraphicDraw
.8911	a9 0e		lda #$0e			lda 	#((7)*2)+(((1) >> 8) & 1)
.8913	a2 01		ldx #$01			ldx 	#((1) & $FF)
.8915	a0 00		ldy #$00			ldy 	#(0)
.8917	20 81 80	jsr $8081			jsr 	GXGraphicDraw
.891a	a9 32		lda #$32			lda 	#((25)*2)+(((100) >> 8) & 1)
.891c	a2 64		ldx #$64			ldx 	#((100) & $FF)
.891e	a0 c8		ldy #$c8			ldy 	#(200)
.8920	20 81 80	jsr $8081			jsr 	GXGraphicDraw
.8923	a9 0c		lda #$0c			lda 	#((6)*2)+(((5) >> 8) & 1)
.8925	a2 05		ldx #$05			ldx 	#((5) & $FF)
.8927	a0 01		ldy #$01			ldy 	#(1)
.8929	20 81 80	jsr $8081			jsr 	GXGraphicDraw
.892c	a9 0e		lda #$0e			lda 	#((7)*2)+(((0) >> 8) & 1)
.892e	a2 00		ldx #$00			ldx 	#((0) & $FF)
.8930	a0 00		ldy #$00			ldy 	#(0)
.8932	20 81 80	jsr $8081			jsr 	GXGraphicDraw
.8935	a9 32		lda #$32			lda 	#((25)*2)+(((50) >> 8) & 1)
.8937	a2 32		ldx #$32			ldx 	#((50) & $FF)
.8939	a0 c8		ldy #$c8			ldy 	#(200)
.893b	20 81 80	jsr $8081			jsr 	GXGraphicDraw
.893e	60		rts				rts
.893f	20 e6 9f	jsr $9fe6	demo:	jsr 	Random32Bit
.8942	ee 40 06	inc $0640			inc 	gxEORValue
.8945	a9 30		lda #$30			lda 	#24*2
.8947	ae 88 04	ldx $0488			ldx 	RandomSeed+0
.894a	ac 89 04	ldy $0489			ldy 	RandomSeed+1
.894d	20 81 80	jsr $8081			jsr 	GXGraphicDraw
.8950	80 ed		bra $893f			bra 	demo

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/assembler.asm

.8952					AssembleGroup1:
.8952	a9 ff		lda #$ff			lda 	#$FF
.8954	8d a5 04	sta $04a5			sta 	ModeMask 					; initialise the mode mask - all for all
.8957	80 02		bra $895b			bra 	AsmGroup12
.8959					AssembleGroup2:
.8959	a5 00		lda $00				lda 	$00
.895b					AsmGroup12:
.895b	8d a3 04	sta $04a3			sta 	IsGroup1 					; save the 'group 1' flag
.895e	68		pla				pla 								; pop the return address to access the information following.
.895f	fa		plx				plx
.8960	20 e9 89	jsr $89e9			jsr 	AccessParameters 			; get opcode and save as base
.8963	8d a4 04	sta $04a4			sta 	BaseOpcode
.8966	ad a3 04	lda $04a3			lda 	IsGroup1 					; skip if group 1 as we don't have a complex mask.
.8969	d0 08		bne $8973			bne 	_AG12HaveMask
.896b	a9 02		lda #$02			lda 	#2 							; if group 2 the second parameter is the mask
.896d	20 f1 89	jsr $89f1			jsr 	GetParameter		 		; e.g. which modes are supported for this operand
.8970	8d a5 04	sta $04a5			sta 	ModeMask
.8973					_AG12HaveMask:
.8973	20 2c 8b	jsr $8b2c			jsr 	TypeAndCalculateOperand 	; get zero page type
.8976	da		phx				phx 								; save found address mode
.8977	20 55 8a	jsr $8a55			jsr 	AssembleModeX
.897a	fa		plx				plx  								; restore address mode
.897b	b0 0b		bcs $8988			bcs 	_AG12Exit
.897d	20 89 89	jsr $8989			jsr 	PromoteToAbsolute  			; promote ZP to ABS and try that
.8980	20 55 8a	jsr $8a55			jsr 	AssembleModeX
.8983	b0 03		bcs $8988			bcs 	_AG12Exit
.8985	4c 16 b0	jmp $b016			jmp 	SyntaxError 				; can't do either, so must be wrong mode/operand.
.8988					_AG12Exit:
.8988	60		rts				rts
.8989					PromoteToAbsolute:
.8989	a9 6c		lda #$6c			lda 	#AM_ABS 					; lda xx
.898b	e0 e4		cpx #$e4			cpx 	#AM_ZEROPAGE
.898d	f0 19		beq $89a8			beq 	_PTADo
.898f	a9 7c		lda #$7c			lda 	#AM_ABSX 					; lda xx,X
.8991	e0 f4		cpx #$f4			cpx 	#AM_ZEROX
.8993	f0 13		beq $89a8			beq 	_PTADo
.8995	a9 78		lda #$78			lda 	#AM_ABSY 					; lda xx,Y
.8997	e0 80		cpx #$80			cpx 	#AM_ZEROY
.8999	f0 0d		beq $89a8			beq 	_PTADo
.899b	a9 01		lda #$01			lda 	#AM_INDABS 					; lda (xx) (jump)
.899d	e0 d1		cpx #$d1			cpx 	#AM_IND
.899f	f0 07		beq $89a8			beq 	_PTADo
.89a1	a9 02		lda #$02			lda 	#AM_INDABSX 				; lda (xx,x) (jump)
.89a3	e0 c0		cpx #$c0			cpx 	#AM_INDX
.89a5	f0 01		beq $89a8			beq 	_PTADo
.89a7	60		rts				rts
.89a8					_PTADo:
.89a8	aa		tax				tax
.89a9	60		rts				rts
.89aa					AssembleGroup3:
.89aa	68		pla				pla 								; get parameters, which is just the opcode.
.89ab	fa		plx				plx
.89ac	20 e9 89	jsr $89e9			jsr 	AccessParameters 			; get and output opcode
.89af	20 01 8a	jsr $8a01			jsr 	AssemblerWriteByte
.89b2	20 90 8b	jsr $8b90			jsr 	CalculateOperand 			; get a 16 bit operand
.89b5	ad 08 04	lda $0408			lda 	NSMantissa0 				; calculate the offset
.89b8	38		sec				sec
.89b9	ed 9e 04	sbc $049e			sbc 	AssemblerAddress
.89bc	48		pha				pha 								; LSB in A
.89bd	ad 10 04	lda $0410			lda 	NSMantissa1
.89c0	ed 9f 04	sbc $049f			sbc 	AssemblerAddress+1
.89c3	aa		tax				tax 								; MSB in X
.89c4	68		pla				pla
.89c5	18		clc				clc 								; $80 to easy check $80-$7F, plus 1 for offset error
.89c6	69 7f		adc #$7f			adc 	#$7F
.89c8	90 01		bcc $89cb			bcc 	_AG3NoCarry
.89ca	e8		inx				inx
.89cb					_AG3NoCarry:
.89cb	38		sec				sec 								; fix back and write out anyways.
.89cc	e9 80		sbc #$80			sbc 	#$80
.89ce	20 01 8a	jsr $8a01			jsr 	AssemblerWriteByte
.89d1	e0 00		cpx #$00			cpx 	#0 							; was it in range
.89d3	f0 0a		beq $89df			beq 	_AG3Exit
.89d5	ad a0 04	lda $04a0			lda 	AssemblerControl 			; are we allowing bad values ?
.89d8	29 01		and #$01			and 	#1
.89da	f0 03		beq $89df			beq 	_AG3Exit
.89dc	4c 1b b0	jmp $b01b			jmp 	RangeError 					; no, branch is out of range
.89df					_AG3Exit:
.89df	60		rts				rts
.89e0					AssembleGroup4:
.89e0	68		pla				pla 								; pop address
.89e1	fa		plx				plx
.89e2	20 e9 89	jsr $89e9			jsr 	AccessParameters 			; access and get first
.89e5	20 01 8a	jsr $8a01			jsr 	AssemblerWriteByte 			; output it.
.89e8	60		rts				rts
.89e9					AccessParameters:
.89e9	8d a1 04	sta $04a1			sta 	ParamStart
.89ec	8e a2 04	stx $04a2			stx 	ParamStart+1
.89ef	a9 01		lda #$01			lda 	#1
.89f1					GetParameter:
.89f1	5a		phy				phy
.89f2	a8		tay				tay
.89f3	ad a1 04	lda $04a1			lda 	ParamStart
.89f6	85 36		sta $36				sta 	zTemp0
.89f8	ad a2 04	lda $04a2			lda 	ParamStart+1
.89fb	85 37		sta $37				sta 	zTemp0+1
.89fd	b1 36		lda ($36),y			lda 	(zTemp0),y
.89ff	7a		ply				ply
.8a00	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/aswrite.asm

.8a01					AssemblerWriteByte:
.8a01	48		pha			pha
.8a02	ad a0 04	lda $04a0		lda 	AssemblerControl 				; check printing bytes ?
.8a05	29 02		and #$02		and 	#2
.8a07	f0 1b		beq $8a24		beq 	_AWBNoPrint
.8a09	ad 9f 04	lda $049f		lda		AssemblerAddress+1 				; print address
.8a0c	20 3f 8a	jsr $8a3f		jsr 	PrintHex
.8a0f	ad 9e 04	lda $049e		lda		AssemblerAddress
.8a12	20 3f 8a	jsr $8a3f		jsr 	PrintHex
.8a15	a9 20		lda #$20		lda 	#' '
.8a17	20 c9 b1	jsr $b1c9		jsr 	EXTPrintCharacter
.8a1a	68		pla			pla 									; print byte
.8a1b	48		pha			pha
.8a1c	20 3f 8a	jsr $8a3f		jsr 	PrintHex
.8a1f	a9 0d		lda #$0d		lda 	#13
.8a21	20 c9 b1	jsr $b1c9		jsr 	EXTPrintCharacter
.8a24					_AWBNoPrint:
.8a24	ad 9e 04	lda $049e		lda		AssemblerAddress				; copy address to zTemp0
.8a27	85 36		sta $36			sta 	zTemp0
.8a29	ad 9f 04	lda $049f		lda		AssemblerAddress+1
.8a2c	f0 0e		beq $8a3c		beq 	_AWBRange
.8a2e	85 37		sta $37			sta 	zTemp0+1
.8a30	68		pla			pla 									; write byte out
.8a31	92 36		sta ($36)		sta 	(zTemp0)
.8a33	ee 9e 04	inc $049e		inc 	AssemblerAddress 				; bump address
.8a36	d0 03		bne $8a3b		bne 	_AWBNoCarry
.8a38	ee 9f 04	inc $049f		inc 	AssemblerAddress+1
.8a3b					_AWBNoCarry:
.8a3b	60		rts			rts
.8a3c					_AWBRange:
.8a3c	4c 1b b0	jmp $b01b		jmp 	RangeError
.8a3f					PrintHex:
.8a3f	48		pha				pha
.8a40	4a		lsr a				lsr 	a
.8a41	4a		lsr a				lsr 	a
.8a42	4a		lsr a				lsr 	a
.8a43	4a		lsr a				lsr 	a
.8a44	20 48 8a	jsr $8a48			jsr 	_PrintNibble
.8a47	68		pla				pla
.8a48					_PrintNibble:
.8a48	29 0f		and #$0f			and 	#15
.8a4a	c9 0a		cmp #$0a			cmp 	#10
.8a4c	90 02		bcc $8a50			bcc 	_NoShift
.8a4e	69 06		adc #$06			adc 	#6
.8a50					_NoShift:
.8a50	69 30		adc #$30			adc 	#48
.8a52	4c c9 b1	jmp $b1c9			jmp 	EXTPrintCharacter

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/instruction.asm

.8a55					AssembleModeX:
.8a55	5a		phy				phy
.8a56	ad a3 04	lda $04a3			lda 	IsGroup1
.8a59	f0 17		beq $8a72			beq 	_AMXGroup2
.8a5b	8a		txa				txa 							; is it in group # 1
.8a5c	29 40		and #$40			and 	#AM_ISG1
.8a5e	f0 50		beq $8ab0			beq 	_AMXFail 				; no, give up.
.8a60	8a		txa				txa 							; get back.
.8a61	29 1f		and #$1f			and 	#$1F 					; this is now the offset.
.8a63	e0 e0		cpx #$e0			cpx 	#AM_IMMEDIATE 			; if not immediate, we can continue.
.8a65	d0 22		bne $8a89			bne 	_AMXHaveInfo
.8a67	ad a4 04	lda $04a4			lda 	BaseOpcode 				; cannot store immediate.
.8a6a	c9 81		cmp #$81			cmp 	#$81
.8a6c	f0 42		beq $8ab0			beq 	_AMXFail
.8a6e	a9 08		lda #$08			lda 	#8 						; if immediate we use offset 8.
.8a70	80 17		bra $8a89			bra 	_AMXHaveInfo 			; odd design decision there.
.8a72					_AMXGroup2:
.8a72	8a		txa				txa 							; is it in group 2 ?
.8a73	29 20		and #$20			and 	#AM_ISG2
.8a75	f0 39		beq $8ab0			beq 	_AMXFail 				; no, give up.
.8a77	8a		txa				txa 							; get the offset into Y
.8a78	29 1f		and #$1f			and 	#$1F
.8a7a	4a		lsr a				lsr 	a 						; make it 0-7.
.8a7b	4a		lsr a				lsr  	a
.8a7c	a8		tay				tay
.8a7d	ad a5 04	lda $04a5			lda 	ModeMask 				; shift the modemask left so you can check it against the requested offset
.8a80					_AMXCheckOkay:
.8a80	0a		asl a				asl 	a 						; shift modemask left enough times to check legitimate.
.8a81	88		dey				dey
.8a82	10 fc		bpl $8a80			bpl 	_AMXCheckOkay
.8a84	90 2a		bcc $8ab0			bcc 	_AMXFail 				; not allowed.
.8a86	8a		txa				txa  							; get mask back
.8a87	29 1f		and #$1f			and 	#$1F
.8a89					_AMXHaveInfo:
.8a89	e0 00		cpx #$00			cpx 	#$00 					; does it *require* an 8 bit operand
.8a8b	10 05		bpl $8a92			bpl 	_AMXAnySize 			; checking bit 7, the zero page opcode flag.
.8a8d	ac 10 04	ldy $0410			ldy 	NSMantissa1 			; fail if it is outside range, e.g. the MSB is set.
.8a90	d0 1e		bne $8ab0			bne 	_AMXFail
.8a92					_AMXAnySize:
.8a92	18		clc				clc 							; add offset to the base opcode
.8a93	6d a4 04	adc $04a4			adc 	BaseOpcode
.8a96					_AMXOutputCode:
.8a96	20 01 8a	jsr $8a01			jsr 	AssemblerWriteByte 		; write the opcode out.
.8a99	e0 28		cpx #$28			cpx 	#AM_ACC 				; A mode (e.g. ASL A)
.8a9b	f0 10		beq $8aad			beq 	_AMXExit
.8a9d	ad 08 04	lda $0408			lda 	NSMantissa0 				; write LSB operand
.8aa0	20 01 8a	jsr $8a01			jsr 	AssemblerWriteByte
.8aa3	e0 00		cpx #$00			cpx 	#$00 					; zeropage ?
.8aa5	30 06		bmi $8aad			bmi 	_AMXExit
.8aa7	ad 10 04	lda $0410			lda 	NSMantissa1 			; write MSB operand
.8aaa	20 01 8a	jsr $8a01			jsr 	AssemblerWriteByte
.8aad					_AMXExit:
.8aad	7a		ply				ply
.8aae	38		sec				sec
.8aaf	60		rts				rts
.8ab0					_AMXFail:
.8ab0	a0 00		ldy #$00			ldy 	#0
.8ab2					_AMXCheckOddities:
.8ab2	8a		txa				txa
.8ab3	d9 db 8a	cmp $8adb,y			cmp 	ExtraOpcode+2,y 		; match address mode
.8ab6	d0 16		bne $8ace			bne 	_AMXCONext
.8ab8	b9 d9 8a	lda $8ad9,y			lda 	ExtraOpcode+0,y 		; do the base opcodes match
.8abb	cd a4 04	cmp $04a4			cmp 	BaseOpcode
.8abe	d0 0e		bne $8ace			bne 	_AMXCONext
.8ac0	e0 00		cpx #$00			cpx 	#$00 					; requires zero page ?
.8ac2	10 05		bpl $8ac9			bpl 	_AMXCONotZero
.8ac4	ad 10 04	lda $0410			lda 	NSMantissa1
.8ac7	d0 05		bne $8ace			bne 	_AMXCONext
.8ac9					_AMXCONotZero:
.8ac9	b9 da 8a	lda $8ada,y			lda 	ExtraOpcode+1,y 		; get new opcode
.8acc	80 c8		bra $8a96			bra 	_AMXOutputCode 			; and assemble it
.8ace					_AMXCONext:
.8ace	c8		iny				iny
.8acf	c8		iny				iny
.8ad0	c8		iny				iny
.8ad1	b9 d9 8a	lda $8ad9,y			lda 	ExtraOpcode+0,y 		; end of table
.8ad4	d0 dc		bne $8ab2			bne 	_AMXCheckOddities
.8ad6					_AMXCOFail:
.8ad6	7a		ply				ply
.8ad7	18		clc				clc
.8ad8	60		rts				rts
.8ad9					ExtraOpcode:
>8ad9	40 6c 01					.byte $40,$6c,AM_INDABS 	; jmp
>8adc	40 7c 02					.byte $40,$7C,AM_INDABSX 	; jmp
>8adf	a2 be 78					.byte $a2,$BE,AM_ABSY 		; ldx
>8ae2	a2 b6 80					.byte $a2,$B6,AM_ZEROY 		; ldx
>8ae5	82 96 80					.byte $82,$96,AM_ZEROY 		; stx
>8ae8	e2 1a 28					.byte $e2,$1a,AM_ACC 		; inc
>8aeb	c2 3a 28					.byte $c2,$3a,AM_ACC 		; dec
>8aee	20 89 e0					.byte $20,$89,AM_IMMEDIATE 	; bit
>8af1	60 9c 6c					.byte $60,$9c,AM_ABS 		; stz
>8af4	60 9e 7c					.byte $60,$9e,AM_ABSX 		; stz
>8af7	00						.byte $00

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/label.asm

.8af8					LabelHere:
.8af8	c8		iny				iny 								; skip .
.8af9	a2 00		ldx #$00			ldx 	#0 							; get a term
.8afb	20 57 9d	jsr $9d57			jsr 	EvaluateTerm 				; get a term
.8afe	ad 00 04	lda $0400			lda 	NSStatus 					; needs to be an integer reference.
.8b01	c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.8b03	d0 24		bne $8b29			bne 	_ALType
.8b05	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy reference address to zTemp0
.8b08	85 36		sta $36				sta 	zTemp0
.8b0a	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8b0d	85 37		sta $37				sta 	zTemp0+1
.8b0f	5a		phy				phy 								; copy address in.
.8b10	a0 01		ldy #$01			ldy 	#1
.8b12	ad 9e 04	lda $049e			lda	 	AssemblerAddress
.8b15	92 36		sta ($36)			sta 	(zTemp0)
.8b17	ad 9f 04	lda $049f			lda	 	AssemblerAddress+1
.8b1a	91 36		sta ($36),y			sta 	(zTemp0),y
.8b1c	c8		iny				iny
.8b1d	a9 00		lda #$00			lda 	#0
.8b1f	91 36		sta ($36),y			sta 	(zTemp0),y
.8b21	c8		iny				iny
.8b22	91 36		sta ($36),y			sta 	(zTemp0),y
.8b24	c8		iny				iny
.8b25	91 36		sta ($36),y			sta 	(zTemp0),y
.8b27	7a		ply				ply
.8b28	60		rts				rts
.8b29					_ALType:
.8b29	4c 20 b0	jmp $b020			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/operands.asm

.8b2c					TypeAndCalculateOperand:
.8b2c	b1 30		lda ($30),y			lda 	(codePtr),y
.8b2e	a2 28		ldx #$28			ldx 	#AM_ACC 					; ACC if : or EOL
.8b30	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.8b32	f0 5b		beq $8b8f			beq 	_TACOExit
.8b34	c9 80		cmp #$80			cmp 	#KWC_EOL
.8b36	f0 57		beq $8b8f			beq 	_TACOExit
.8b38	c8		iny				iny
.8b39	a2 e0		ldx #$e0			ldx 	#AM_IMMEDIATE
.8b3b	c9 23		cmp #$23			cmp 	#KWD_HASH 					; if hash, then immediate - constant.
.8b3d	f0 51		beq $8b90			beq 	CalculateOperand
.8b3f	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; if ( then check for indirection
.8b41	f0 1f		beq $8b62			beq 	_TACOIndirect
.8b43	88		dey				dey 								; undo get of first character
.8b44	20 90 8b	jsr $8b90			jsr 	CalculateOperand 			; get operand
.8b47	b1 30		lda ($30),y			lda 	(codePtr),y
.8b49	a2 e4		ldx #$e4			ldx 	#AM_ZEROPAGE 				; if not, try zero page (then absolute)
.8b4b	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8b4d	d0 40		bne $8b8f			bne 	_TACOExit
.8b4f	c8		iny				iny
.8b50	20 a7 a9	jsr $a9a7			jsr 	TACOCheckXY 				; extract X,Y or 0 (neither) from the variable.
.8b53	a2 f4		ldx #$f4			ldx 	#AM_ZEROX 					; check for X
.8b55	c9 58		cmp #$58			cmp 	#'X'
.8b57	f0 36		beq $8b8f			beq 	_TACOExit
.8b59	a2 80		ldx #$80			ldx 	#AM_ZEROY 					; check for Y
.8b5b	c9 59		cmp #$59			cmp 	#'Y'
.8b5d	f0 30		beq $8b8f			beq 	_TACOExit
.8b5f					_TACOSyntax:
.8b5f	4c 16 b0	jmp $b016			jmp 	SyntaxError
.8b62					_TACOIndirect:
.8b62	20 90 8b	jsr $8b90			jsr 	CalculateOperand 			; get the operand
.8b65	b1 30		lda ($30),y			lda 	(codePtr),y
.8b67	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if , then it must be ,X)
.8b69	f0 17		beq $8b82			beq 	_TACOIndX
.8b6b	20 30 aa	jsr $aa30			jsr 	CheckRightBracket  			; otherwise must be ) or ),Y
.8b6e	b1 30		lda ($30),y			lda 	(codePtr),y
.8b70	a2 d1		ldx #$d1			ldx 	#AM_IND
.8b72	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not comma then exit with (xx)
.8b74	d0 19		bne $8b8f			bne 	_TACOExit
.8b76	c8		iny				iny
.8b77	20 a7 a9	jsr $a9a7			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.8b7a	c9 59		cmp #$59			cmp 	#'Y' 						; check Y
.8b7c	d0 e1		bne $8b5f			bne 	_TACOSyntax
.8b7e	a2 d0		ldx #$d0			ldx 	#AM_INDY
.8b80	80 0d		bra $8b8f			bra 	_TACOExit
.8b82					_TACOIndX:
.8b82	c8		iny				iny
.8b83	20 a7 a9	jsr $a9a7			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.8b86	c9 58		cmp #$58			cmp 	#'X' 						; check X
.8b88	d0 d5		bne $8b5f			bne 	_TACOSyntax
.8b8a	20 30 aa	jsr $aa30			jsr 	CheckRightBracket			; check )
.8b8d	a2 c0		ldx #$c0			ldx 	#AM_INDX
.8b8f					_TACOExit:
.8b8f	60		rts				rts
.8b90					CalculateOperand:
.8b90	48		pha				pha
.8b91	da		phx				phx
.8b92	a2 00		ldx #$00			ldx 	#0 							; get 16 bit integer in Slot 0
.8b94	20 c1 a1	jsr $a1c1			jsr 	Evaluate16BitInteger
.8b97	fa		plx				plx
.8b98	68		pla				pla
.8b99	60		rts				rts
.a9a7					TACOCheckXY:
.a9a7	b1 30		lda ($30),y			lda 	(codePtr),y
.a9a9	29 c0		and #$c0			and 	#$C0 						; check it is an identifier reference.
.a9ab	c9 40		cmp #$40			cmp 	#$40
.a9ad	d0 21		bne $a9d0			bne 	_TCXYFail
.a9af	b1 30		lda ($30),y			lda 	(codePtr),y
.a9b1	18		clc				clc
.a9b2	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.a9b4	85 37		sta $37				sta 	zTemp0+1
.a9b6	c8		iny				iny
.a9b7	b1 30		lda ($30),y			lda 	(codePtr),y
.a9b9	c8		iny				iny
.a9ba	85 36		sta $36				sta 	zTemp0
.a9bc	5a		phy				phy 								; save position
.a9bd	a0 02		ldy #$02			ldy 	#2 							; type is integer ?
.a9bf	b1 36		lda ($36),y			lda 	(zTemp0),y
.a9c1	d0 0c		bne $a9cf			bne 	_TCXYPopFail
.a9c3	a0 08		ldy #$08			ldy 	#8 							; get first character, should have bit 7 set as also last.
.a9c5	b1 36		lda ($36),y			lda 	(zTemp0),y
.a9c7	c9 d8		cmp #$d8			cmp 	#'X'+$80 					; should be X or Y
.a9c9	f0 08		beq $a9d3			beq 	_TCXYFound
.a9cb	c9 d9		cmp #$d9			cmp 	#'Y'+$80
.a9cd	f0 04		beq $a9d3			beq 	_TCXYFound
.a9cf					_TCXYPopFail:
.a9cf	7a		ply				ply
.a9d0					_TCXYFail:
.a9d0	a9 00		lda #$00			lda 	#0
.a9d2	60		rts				rts
.a9d3					_TCXYFound:
.a9d3	7a		ply				ply 								; restore position
.a9d4	29 7f		and #$7f			and 	#$7F 						; throw bit 7
.a9d6	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/editor.asm

.8b9a					EditProgramCode:
.8b9a	ad a7 04	lda $04a7			lda 	TokenLineNumber 			; find the line.
.8b9d	ae a8 04	ldx $04a8			ldx 	TokenLineNumber+1
.8ba0	20 94 a2	jsr $a294			jsr 	MemorySearch
.8ba3	90 05		bcc $8baa			bcc 	_EPCNoDelete 				; reached the end don't delete
.8ba5	d0 03		bne $8baa			bne 	_EPCNoDelete 				; found slot but didn't match, no delete
.8ba7	20 0d b2	jsr $b20d			jsr 	MemoryDeleteLine 			; delete the line
.8baa					_EPCNoDelete:
.8baa	ad a9 04	lda $04a9			lda 	TokenBuffer 				; buffer empty
.8bad	c9 80		cmp #$80			cmp 	#KWC_EOL
.8baf	f0 0d		beq $8bbe			beq 	_EPCNoInsert
.8bb1	ad a7 04	lda $04a7			lda 	TokenLineNumber 			; find the line - it cannot exist.
.8bb4	ae a8 04	ldx $04a8			ldx 	TokenLineNumber+1 			; so this can't fail, it returns some point in the code.
.8bb7	20 94 a2	jsr $a294			jsr 	MemorySearch
.8bba	18		clc				clc 								; insert at this point.
.8bbb	20 44 b2	jsr $b244			jsr 	MemoryInsertLine 			; insert the line
.8bbe					_EPCNoInsert:
.8bbe	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/warmstart.asm

.8bbf					WarmStart:
.8bbf	a2 ff		ldx #$ff			ldx 	#$FF
.8bc1	9a		txs				txs
.8bc2	20 df b1	jsr $b1df			jsr 	EXTInputLine 				; get line to lineBuffer
.8bc5	20 28 a7	jsr $a728			jsr 	TokeniseLine 				; tokenise the line
.8bc8	ad a7 04	lda $04a7			lda 	TokenLineNumber 			; line number ?
.8bcb	0d a8 04	ora $04a8			ora 	TokenLineNumber+1
.8bce	d0 17		bne $8be7			bne 	_WSEditCode 				; if so,edit code.
.8bd0	9c a6 04	stz $04a6			stz 	TokenOffset 				; zero offset, meaning it only runs one line.
.8bd3	a9 a6		lda #$a6			lda 	#((TokenOffset) & $FF)
.8bd5	85 30		sta $30				sta 	codePtr
.8bd7	a9 04		lda #$04			lda 	#((TokenOffset) >> 8)
.8bd9	85 31		sta $31				sta 	codePtr+1
.8bdb	ad a9 04	lda $04a9			lda 	TokenBuffer 				; nothing to run
.8bde	c9 80		cmp #$80			cmp 	#KWC_EOL
.8be0	f0 dd		beq $8bbf			beq 	WarmStart
.8be2	20 22 92	jsr $9222			jsr 	RUNCodePointerLine 			; execute that line.
.8be5	80 d8		bra $8bbf			bra 	WarmStart
.8be7					_WSEditCode:
.8be7	20 9a 8b	jsr $8b9a			jsr 	EditProgramCode
.8bea	20 58 8c	jsr $8c58			jsr 	ClearCommand
.8bed	80 d0		bra $8bbf			bra 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assemble.asm

.8bef					AssembleCommand:
.8bef	a2 00		ldx #$00			ldx 	#0
.8bf1	20 c1 a1	jsr $a1c1			jsr 	Evaluate16BitInteger 		; start address
.8bf4	ad 08 04	lda $0408			lda 	NSMantissa0
.8bf7	8d 9e 04	sta $049e			sta 	AssemblerAddress
.8bfa	ad 10 04	lda $0410			lda 	NSMantissa1
.8bfd	8d 9f 04	sta $049f			sta 	AssemblerAddress+1
.8c00	20 38 aa	jsr $aa38			jsr 	CheckComma
.8c03	20 cd a1	jsr $a1cd			jsr 	Evaluate8BitInteger 		; options
.8c06	ad 08 04	lda $0408			lda 	NSMantissa0
.8c09	8d a0 04	sta $04a0			sta 	AssemblerControl
.8c0c	60		rts				rts
.8c0d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assert.asm

.8c0e					AssertCommand:
.8c0e	a2 00		ldx #$00			ldx 	#0
.8c10	20 ac a1	jsr $a1ac			jsr 	EvaluateInteger 			; the assert test
.8c13	20 65 a2	jsr $a265			jsr 	NSMIsZero 					; exit if result is non zero.
.8c16	d0 05		bne $8c1d			bne 	_ACExit
.8c18	a9 0a		lda #$0a		lda	#10
.8c1a	4c 7d 96	jmp $967d		jmp	ErrorHandler
.8c1d					_ACExit:
.8c1d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/call.asm

.8c1e					CallCommand:
.8c1e	a2 00		ldx #$00			ldx 	#0
.8c20	20 c1 a1	jsr $a1c1			jsr 	Evaluate16BitInteger
.8c23					_CCClear
.8c23	e8		inx				inx  								; clear 1,2 and 3 (for A X Y)
.8c24	20 35 a2	jsr $a235			jsr 	NSMSetZero
.8c27	e0 04		cpx #$04			cpx 	#4
.8c29	d0 f8		bne $8c23			bne 	_CCClear
.8c2b	a2 00		ldx #$00			ldx 	#0 							; and keep trying
.8c2d					_CCCParam:
.8c2d	b1 30		lda ($30),y			lda 	(codePtr),y
.8c2f	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8c31	d0 09		bne $8c3c			bne 	_CCCRun6502
.8c33	c8		iny				iny 								; skip comma
.8c34	e8		inx				inx	 								; next level
.8c35	20 cd a1	jsr $a1cd			jsr 	Evaluate8BitInteger 		; get A/X/Y
.8c38	e0 03		cpx #$03			cpx 	#3
.8c3a	90 f1		bcc $8c2d			bcc 	_CCCParam 					; done all 3 ?
.8c3c					_CCCRun6502:
.8c3c	5a		phy				phy 								; save position
.8c3d	ad 10 04	lda $0410			lda 	NSMantissa1 				; put address in zTemp0
.8c40	85 37		sta $37				sta 	zTemp0+1
.8c42	ad 08 04	lda $0408			lda 	NSMantissa0
.8c45	85 36		sta $36				sta 	zTemp0
.8c47	ad 09 04	lda $0409			lda 	NSMantissa0+1 				; get registers
.8c4a	ae 0a 04	ldx $040a			ldx 	NSMantissa0+2
.8c4d	ac 0b 04	ldy $040b			ldy 	NSMantissa0+3
.8c50	20 55 8c	jsr $8c55			jsr 	_CCCZTemp0 					; call zTemp0
.8c53	7a		ply				ply 								; restore position and exit
.8c54	60		rts				rts
.8c55					_CCCZTemp0:
.8c55	6c 36 00	jmp ($0036)			jmp 	(zTemp0)

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/clear.asm

.8c58					ClearCommand:
.8c58	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.8c5a	85 36		sta $36				sta 	0+zTemp0
.8c5c	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.8c5e	85 37		sta $37				sta 	1+zTemp0
.8c60					_ClearZeroLoop:
.8c60	b2 36		lda ($36)			lda 	(zTemp0) 					; end of variables
.8c62	f0 24		beq $8c88			beq 	_ClearZeroEnd
.8c64	a0 03		ldy #$03			ldy 	#3 							; erase the variables
.8c66	a9 00		lda #$00			lda 	#0
.8c68					_ClearOneVariable:
.8c68	91 36		sta ($36),y			sta 	(zTemp0),y
.8c6a	c8		iny				iny
.8c6b	c0 08		cpy #$08			cpy 	#8
.8c6d	d0 f9		bne $8c68			bne 	_ClearOneVariable
.8c6f	a0 02		ldy #$02			ldy 	#2 							; has it been marked procedure
.8c71	b1 36		lda ($36),y			lda 	(zTemp0),y
.8c73	c9 18		cmp #$18			cmp 	#NSTProcedure
.8c75	d0 04		bne $8c7b			bne 	_ClearNotProcedure
.8c77	a9 04		lda #$04			lda 	#NSTInteger+NSBIsArray 		; set it back to an integer array
.8c79	91 36		sta ($36),y			sta 	(zTemp0),y
.8c7b					_ClearNotProcedure:
.8c7b	18		clc				clc 								; go to the next variable
.8c7c	b2 36		lda ($36)			lda 	(zTemp0)
.8c7e	65 36		adc $36				adc 	zTemp0
.8c80	85 36		sta $36				sta 	zTemp0
.8c82	90 dc		bcc $8c60			bcc 	_ClearZeroLoop
.8c84	e6 37		inc $37				inc 	zTemp0+1
.8c86	80 d8		bra $8c60			bra 	_ClearZeroLoop
.8c88					_ClearZeroEnd:
.8c88	18		clc				clc
.8c89	a5 36		lda $36				lda 	zTemp0
.8c8b	69 01		adc #$01			adc 	#1
.8c8d	8d 8c 04	sta $048c			sta 	lowMemPtr
.8c90	a5 37		lda $37				lda 	zTemp0+1
.8c92	69 00		adc #$00			adc 	#0
.8c94	8d 8d 04	sta $048d			sta 	lowMemPtr+1
.8c97	20 4e a3	jsr $a34e			jsr 	StackReset
.8c9a	20 27 b3	jsr $b327			jsr 	StringSystemInitialise
.8c9d	20 9d 95	jsr $959d			jsr 	ProcedureScan
.8ca0	20 de 91	jsr $91de			jsr 	Command_Restore
.8ca3	9c 9e 04	stz $049e			stz 	AssemblerAddress
.8ca6	9c 9f 04	stz $049f			stz 	AssemblerAddress+1
.8ca9	9c a0 04	stz $04a0			stz 	AssemblerControl
.8cac	20 44 9f	jsr $9f44			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.8caf	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/data.asm

.8cb0					Command_Data:
.8cb0	a9 3a		lda #$3a			lda 	#KWD_COLON 					; advance to colon/EOL
.8cb2	a2 80		ldx #$80			ldx 	#KWC_EOL
.8cb4	20 ef 95	jsr $95ef			jsr 	ScanForward
.8cb7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/dim.asm

.8cb8					DimCommand:
.8cb8	b1 30		lda ($30),y			lda 	(codePtr),y
.8cba	29 c0		and #$c0			and 	#$C0
.8cbc	c9 40		cmp #$40			cmp 	#$40
.8cbe	d0 7a		bne $8d3a			bne 	_DCSyntax
.8cc0	b1 30		lda ($30),y			lda 	(codePtr),y
.8cc2	18		clc				clc
.8cc3	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8cc5	85 3f		sta $3f				sta 	zaTemp+1
.8cc7	c8		iny				iny
.8cc8	b1 30		lda ($30),y			lda 	(codePtr),y
.8cca	c8		iny				iny
.8ccb	85 3e		sta $3e				sta 	zaTemp
.8ccd	5a		phy				phy
.8cce	a0 02		ldy #$02			ldy 	#2 						; read type byte
.8cd0	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8cd2	29 18		and #$18			and 	#NSBTypeMask 			; check it's not a procedure
.8cd4	c9 18		cmp #$18			cmp 	#NSTProcedure
.8cd6	f0 62		beq $8d3a			beq 	_DCSyntax
.8cd8	b1 3e		lda ($3e),y			lda 	(zaTemp),y 				; check it's an array
.8cda	29 04		and #$04			and 	#NSBIsArray
.8cdc	f0 64		beq $8d42			beq 	_DCType
.8cde	a0 04		ldy #$04			ldy 	#4 						; check not already defined
.8ce0	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8ce2	d0 59		bne $8d3d			bne 	_DCRedefine
.8ce4	7a		ply				ply
.8ce5	20 45 8d	jsr $8d45			jsr 	_DCGetSize 				; get array size, check it.
.8ce8	5a		phy				phy
.8ce9	a0 05		ldy #$05			ldy 	#5 						; store in first array size slot
.8ceb	91 3e		sta ($3e),y			sta 	(zaTemp),y 				; second will be zero.
.8ced	7a		ply				ply 							; is there a second (e.g. ,x)
.8cee	b1 30		lda ($30),y			lda 	(codePtr),y
.8cf0	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8cf2	d0 0a		bne $8cfe			bne 	_DCOneDimension
.8cf4	c8		iny				iny 							; skip comma
.8cf5	20 45 8d	jsr $8d45			jsr 	_DCGetSize 				; get 2nd array size
.8cf8	5a		phy				phy
.8cf9	a0 06		ldy #$06			ldy 	#6 						; store in 2nd array size
.8cfb	91 3e		sta ($3e),y			sta 	(zaTemp),y
.8cfd	7a		ply				ply
.8cfe					_DCOneDimension:
.8cfe	5a		phy				phy 							; save position
.8cff	a0 05		ldy #$05			ldy 	#5 						; dimensions + 1 in AX (as zero based)
.8d01	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8d03	aa		tax				tax
.8d04	c8		iny				iny
.8d05	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8d07	e8		inx				inx 							; bump them.
.8d08	1a		inc a				inc 	a
.8d09	20 b2 ae	jsr $aeb2			jsr 	Multiply8x8 			; work out the total number of elements -> zTemp0
.8d0c	a5 37		lda $37				lda 	zTemp0+1 				; don't allow more than 8192 elements whatever
.8d0e	29 e0		and #$e0			and 	#$E0
.8d10	d0 23		bne $8d35			bne 	_DCSize
.8d12	a0 02		ldy #$02			ldy 	#2 						; get base type
.8d14	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8d16	20 53 8d	jsr $8d53			jsr 	ScaleByBaseType 		; scale by base type
.8d19	a5 36		lda $36				lda 	zTemp0
.8d1b	a6 37		ldx $37				ldx 	zTemp0+1
.8d1d	20 06 9f	jsr $9f06			jsr 	AllocateXABytes 		; allocate memory
.8d20	a0 03		ldy #$03			ldy 	#3 						; copy into the address.
.8d22	91 3e		sta ($3e),y			sta 	(zaTemp),y
.8d24	c8		iny				iny
.8d25	8a		txa				txa
.8d26	91 3e		sta ($3e),y			sta 	(zaTemp),y
.8d28	7a		ply				ply 							; get position back
.8d29	20 30 aa	jsr $aa30			jsr 	CheckRightBracket 		; check )
.8d2c	b1 30		lda ($30),y			lda 	(codePtr),y
.8d2e	c8		iny				iny 							; consume in case
.8d2f	c9 2c		cmp #$2c			cmp 	#KWD_COMMA		 		; if so do another DIM.
.8d31	f0 85		beq $8cb8			beq 	DimCommand
.8d33	88		dey				dey 							; undo consume
.8d34	60		rts				rts
.8d35					_DCSize:
.8d35	a9 16		lda #$16		lda	#22
.8d37	4c 7d 96	jmp $967d		jmp	ErrorHandler
.8d3a					_DCSyntax:
.8d3a	4c 16 b0	jmp $b016			jmp 	SyntaxError
.8d3d					_DCRedefine:
.8d3d	a9 15		lda #$15		lda	#21
.8d3f	4c 7d 96	jmp $967d		jmp	ErrorHandler
.8d42					_DCType:
.8d42	4c 20 b0	jmp $b020			jmp 	TypeError
.8d45					_DCGetSize:
.8d45	a2 00		ldx #$00			ldx 	#0 						; get first index.
.8d47	20 cd a1	jsr $a1cd			jsr 	Evaluate8BitInteger 	; get array dimension
.8d4a	c9 00		cmp #$00			cmp 	#0 						; must be 1-254
.8d4c	f0 e7		beq $8d35			beq 	_DCSize
.8d4e	c9 fe		cmp #$fe			cmp 	#254
.8d50	f0 e3		beq $8d35			beq 	_DCSize
.8d52	60		rts				rts
.8d53					ScaleByBaseType:
.8d53	29 10		and #$10			and 	#NSBIsString 			; is it string
.8d55	d0 19		bne $8d70			bne 	_SBBTString
.8d57	a5 37		lda $37				lda 	zTemp0+1 				; push value on stack
.8d59	48		pha				pha
.8d5a	a5 36		lda $36				lda 	zTemp0
.8d5c	48		pha				pha
.8d5d	06 36		asl $36				asl 	zTemp0 					; x 2
.8d5f	26 37		rol $37				rol 	zTemp0+1
.8d61	06 36		asl $36				asl 	zTemp0 					; x 4
.8d63	26 37		rol $37				rol 	zTemp0+1
.8d65	68		pla				pla 							; add stacked value = x 5
.8d66	65 36		adc $36				adc 	zTemp0
.8d68	85 36		sta $36				sta 	zTemp0
.8d6a	68		pla				pla
.8d6b	65 37		adc $37				adc 	zTemp0+1
.8d6d	85 37		sta $37				sta 	zTemp0+1
.8d6f	60		rts				rts
.8d70					_SBBTString:
.8d70	06 36		asl $36				asl 	zTemp0
.8d72	26 37		rol $37				rol 	zTemp0+1
.8d74	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/end.asm

.8d75					EndCommand:
.8d75	4c bf 8b	jmp $8bbf			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/for.asm

.8d78					ForCommand:
.8d78	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; allocate 18 bytes on the return stack.
.8d7a	20 e9 a2	jsr $a2e9			jsr 	StackOpen
.8d7d	a2 00		ldx #$00			ldx 	#0
.8d7f	20 57 9d	jsr $9d57			jsr 	EvaluateTerm
.8d82	bd 00 04	lda $0400,x			lda 	NSStatus,x
.8d85	c9 20		cmp #$20			cmp 	#NSBIsReference+NSTInteger 	; do we have an integer 4 byte reference.
.8d87	d0 49		bne $8dd2			bne		_FCError
.8d89	a9 3d		lda #$3d			lda 	#KWD_EQUAL 					; =
.8d8b	20 40 aa	jsr $aa40			jsr 	CheckNextA
.8d8e	e8		inx				inx
.8d8f	20 ac a1	jsr $a1ac			jsr 	EvaluateInteger 			; <from> in +1
.8d92	b1 30		lda ($30),y			lda 	(codePtr),y
.8d94	c8		iny				iny 								; consume it
.8d95	48		pha				pha 								; save on stack for later
.8d96	c9 ae		cmp #$ae			cmp 	#KWD_DOWNTO
.8d98	f0 04		beq $8d9e			beq 	_FCNoSyntax
.8d9a	c9 c0		cmp #$c0			cmp 	#KWD_TO
.8d9c	d0 37		bne $8dd5			bne 	_FCSyntaxError
.8d9e					_FCNoSyntax:
.8d9e	e8		inx				inx
.8d9f	20 ac a1	jsr $a1ac			jsr 	EvaluateInteger
.8da2	20 2d a3	jsr $a32d			jsr 	STKSaveCodePosition 		; save loop back position
.8da5	68		pla				pla 								; restore DOWNTO or TO
.8da6	5a		phy				phy 								; save Y on the stack
.8da7	49 ae		eor #$ae			eor 	#KWD_DOWNTO 				; 0 if DOWNTO, #0 if TO
.8da9	f0 02		beq $8dad			beq 	_FCNotDownTo
.8dab	a9 02		lda #$02			lda 	#2
.8dad					_FCNotDownTo:
.8dad	3a		dec a				dec 	a 							; 255 if DOWNTO, 1 if TO
.8dae	a0 10		ldy #$10			ldy 	#16
.8db0	91 34		sta ($34),y			sta 	(basicStack),y 				; copy that out to the Basic Stack.
.8db2	a0 06		ldy #$06			ldy 	#6
.8db4	ad 08 04	lda $0408			lda 	NSMantissa0
.8db7	91 34		sta ($34),y			sta 	(basicStack),y
.8db9	ad 10 04	lda $0410			lda 	NSMantissa1
.8dbc	c8		iny				iny
.8dbd	91 34		sta ($34),y			sta 	(basicStack),y
.8dbf	a0 08		ldy #$08			ldy 	#8 							; set initial index value
.8dc1	a2 01		ldx #$01			ldx 	#1
.8dc3	20 d8 8d	jsr $8dd8			jsr 	FCIntegerToStack
.8dc6	a0 0c		ldy #$0c			ldy 	#12 						; set the terminal value
.8dc8	a2 02		ldx #$02			ldx 	#2
.8dca	20 d8 8d	jsr $8dd8			jsr 	FCIntegerToStack
.8dcd	20 f8 8d	jsr $8df8			jsr 	CopyIndexToReference
.8dd0	7a		ply				ply 								; restore position
.8dd1	60		rts				rts
.8dd2					_FCError:
.8dd2	4c 20 b0	jmp $b020			jmp 	TypeError
.8dd5					_FCSyntaxError:
.8dd5	4c 16 b0	jmp $b016			jmp 	SyntaxError
.8dd8					FCIntegerToStack:
.8dd8	3c 00 04	bit $0400,x			bit 	NSStatus,x 					; is the value negative
.8ddb	10 03		bpl $8de0			bpl	 	_FCNotNegative
.8ddd	20 ea a1	jsr $a1ea			jsr 	NSMNegateMantissa 			; if so 2's complement the mantissa
.8de0					_FCNotNegative:
.8de0	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy out to the basic stack
.8de3	91 34		sta ($34),y			sta 	(basicStack),y
.8de5	c8		iny				iny
.8de6	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8de9	91 34		sta ($34),y			sta 	(basicStack),y
.8deb	c8		iny				iny
.8dec	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.8def	91 34		sta ($34),y			sta 	(basicStack),y
.8df1	c8		iny				iny
.8df2	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.8df5	91 34		sta ($34),y			sta 	(basicStack),y
.8df7	60		rts				rts
.8df8					CopyIndexToReference:
.8df8	5a		phy				phy
.8df9	a0 06		ldy #$06			ldy 	#6 							; copy address-8 to write to zTemp0
.8dfb	38		sec				sec 								; (because we copy from offset 8)
.8dfc	b1 34		lda ($34),y			lda 	(basicStack),y
.8dfe	e9 08		sbc #$08			sbc 	#8
.8e00	85 36		sta $36				sta 	zTemp0
.8e02	c8		iny				iny
.8e03	b1 34		lda ($34),y			lda 	(basicStack),y
.8e05	e9 00		sbc #$00			sbc 	#0
.8e07	85 37		sta $37				sta 	zTemp0+1
.8e09	a2 04		ldx #$04			ldx 	#4 							; this is the copy counter/
.8e0b	a0 0b		ldy #$0b			ldy 	#8+3 		 				; the MSB of the mantissa
.8e0d	b1 34		lda ($34),y			lda 	(basicStack),y
.8e0f	0a		asl a				asl 	a 							; into carry
.8e10	a0 08		ldy #$08			ldy 	#8 							; where to copy from.
.8e12	90 14		bcc $8e28			bcc 	_CITRNormal
.8e14	38		sec				sec
.8e15					_CITRNegative:
.8e15	a9 00		lda #$00			lda 	#0
.8e17	f1 34		sbc ($34),y			sbc 	(basicStack),y
.8e19	91 36		sta ($36),y			sta 	(zTemp0),y
.8e1b	c8		iny				iny
.8e1c	ca		dex				dex
.8e1d	d0 f6		bne $8e15			bne 	_CITRNegative
.8e1f	88		dey				dey 								; look at MSB of mantissa
.8e20	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set the MSB as negative packed.
.8e22	09 80		ora #$80			ora 	#$80
.8e24	91 36		sta ($36),y			sta 	(zTemp0),y
.8e26	7a		ply				ply
.8e27	60		rts				rts
.8e28					_CITRNormal:
.8e28	b1 34		lda ($34),y			lda 	(basicStack),y 				; copy without negation.
.8e2a	91 36		sta ($36),y			sta 	(zTemp0),y
.8e2c	c8		iny				iny
.8e2d	ca		dex				dex
.8e2e	d0 f8		bne $8e28			bne 	_CITRNormal
.8e30	7a		ply				ply 								; and exit.
.8e31	60		rts				rts
.8e32					NextCommand:
.8e32	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; check FOR is TOS
.8e34	a2 11		ldx #$11			ldx 	#ERRID_FOR 					; this error
.8e36	20 15 a3	jsr $a315			jsr 	StackCheckFrame
.8e39	5a		phy				phy
.8e3a	a0 10		ldy #$10			ldy 	#16 						; get the step count
.8e3c	b1 34		lda ($34),y			lda 	(basicStack),y
.8e3e	85 36		sta $36				sta 	zTemp0 						; this is the sign extend
.8e40	30 02		bmi $8e44			bmi 	_NCStepNeg
.8e42	64 36		stz $36				stz 	zTemp0 						; which is 0 or 255
.8e44					_NCStepNeg:
.8e44	a0 08		ldy #$08			ldy 	#8 							; offset to bump
.8e46	a2 04		ldx #$04			ldx 	#4 							; count to bump
.8e48	18		clc				clc
.8e49					_NCBump:
.8e49	71 34		adc ($34),y			adc 	(basicStack),y 				; add it
.8e4b	91 34		sta ($34),y			sta 	(basicStack),y
.8e4d	a5 36		lda $36				lda 	zTemp0 						; get sign extend for next time.
.8e4f	c8		iny				iny 								; next byte
.8e50	ca		dex				dex 								; do four times
.8e51	d0 f6		bne $8e49			bne 	_NCBump
.8e53	20 f8 8d	jsr $8df8			jsr		CopyIndexToReference		; copy it to the reference variable.
.8e56	a0 10		ldy #$10			ldy 	#16 						; get step count again
.8e58	b1 34		lda ($34),y			lda 	(basicStack),y
.8e5a	0a		asl a				asl 	a 							; sign bit to carry
.8e5b	a9 0c		lda #$0c			lda 	#12 						; offset of LHS = terminal offset
.8e5d	85 38		sta $38				sta 	zTemp1
.8e5f	90 02		bcc $8e63			bcc 	_NCCompRev 					; use if step is +ve
.8e61	a9 08		lda #$08			lda 	#8 							; now the LHS = index value
.8e63					_NCCompRev:
.8e63	85 38		sta $38				sta 	zTemp1 						; so zTemp0 is the index for LHS
.8e65	49 04		eor #$04			eor 	#(8^12) 					; and zTemp0+1 is the index for RHS
.8e67	85 39		sta $39				sta 	zTemp1+1
.8e69	a2 04		ldx #$04			ldx 	#4 							; bytes to compare
.8e6b	38		sec				sec
.8e6c					_NCCompare:
.8e6c	a4 38		ldy $38				ldy 	zTemp1 						; do compare using the two indices
.8e6e	b1 34		lda ($34),y			lda 	(basicStack),y
.8e70	a4 39		ldy $39				ldy 	zTemp1+1
.8e72	f1 34		sbc ($34),y			sbc 	(basicStack),y
.8e74	e6 38		inc $38				inc 	zTemp1 						; bump the indices (inc,dex do not change C or V)
.8e76	e6 39		inc $39				inc 	zTemp1+1
.8e78	ca		dex				dex 								; do it 4 times.
.8e79	d0 f1		bne $8e6c			bne 	_NCCompare
.8e7b	50 02		bvc $8e7f			bvc 	_NCNoOverflow 				; convert to signed comparison
.8e7d	49 80		eor #$80			eor 	#$80
.8e7f					_NCNoOverflow:
.8e7f	7a		ply				ply 								; restore Y position
.8e80	0a		asl a				asl 	a 							; is bit 7 set.
.8e81	90 04		bcc $8e87			bcc 	_NCLoopback 				; if no , >= so loop back
.8e83	20 07 a3	jsr $a307			jsr 	StackClose 					; exit the loop
.8e86	60		rts				rts
.8e87					_NCLoopBack:
.8e87	20 3e a3	jsr $a33e			jsr 	STKLoadCodePosition 		; loop back
.8e8a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/commands/gfx.asm

.8e8b					GfxCommand:
.8e8b	a2 00		ldx #$00			ldx 	#0
.8e8d	20 cd a1	jsr $a1cd			jsr 	Evaluate8BitInteger 		; command
.8e90	20 38 aa	jsr $aa38			jsr 	CheckComma
.8e93	e8		inx				inx
.8e94	20 c1 a1	jsr $a1c1			jsr 	Evaluate16BitInteger 		; X
.8e97	20 38 aa	jsr $aa38			jsr 	CheckComma
.8e9a	e8		inx				inx
.8e9b	20 cd a1	jsr $a1cd			jsr 	Evaluate8BitInteger 		; Y
.8e9e	ad 11 04	lda $0411			lda 	NSMantissa1+1  				; shift bit 0 of X into CS, should now be zero
.8ea1	4a		lsr a				lsr 	a
.8ea2	d0 16		bne $8eba			bne 	_GfxError
.8ea4	2e 08 04	rol $0408			rol 	NSMantissa0 				; rotate into command
.8ea7	b0 11		bcs $8eba			bcs 	_GfxError 					; bit 7 should have been zero
.8ea9	5a		phy				phy 								; save pos
.8eaa	ad 08 04	lda $0408			lda 	NSMantissa0 				; do the command
.8ead	ae 09 04	ldx $0409			ldx 	NSMantissa0+1
.8eb0	ac 0a 04	ldy $040a			ldy 	NSMantissa0+2
.8eb3	20 81 80	jsr $8081			jsr 	GXGraphicDraw
.8eb6	b0 02		bcs $8eba			bcs 	_GfxError
.8eb8	7a		ply				ply 								; restore pos and exit.
.8eb9	60		rts				rts
.8eba					_GfxError:
.8eba	4c 1b b0	jmp $b01b			jmp 	RangeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/gosub.asm

.8ebd					Command_GOSUB:
.8ebd	a2 00		ldx #$00			ldx 	#0
.8ebf	20 c1 a1	jsr $a1c1			jsr 	Evaluate16BitInteger 		; line number in Stack.0
.8ec2	a9 e3		lda #$e3			lda 	#STK_GOSUB+3
.8ec4	20 e9 a2	jsr $a2e9			jsr 	StackOpen 					; create frame
.8ec7	20 2d a3	jsr $a32d			jsr 	STKSaveCodePosition 		; save current position
.8eca	4c e0 8e	jmp $8ee0			jmp 	GotoStackX
.8ecd					Command_RETURN:
.8ecd	a9 e0		lda #$e0			lda 	#STK_GOSUB 					; check TOS is this
.8ecf	a2 0e		ldx #$0e			ldx 	#ERRID_GOSUB 				; this error
.8ed1	20 15 a3	jsr $a315			jsr 	StackCheckFrame
.8ed4	20 3e a3	jsr $a33e			jsr 	STKLoadCodePosition 		; restore code position
.8ed7	20 07 a3	jsr $a307			jsr 	StackClose
.8eda	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/goto.asm

.8edb					GotoCommand:
.8edb	a2 00		ldx #$00			ldx 	#0 							; GOTO where
.8edd	20 c1 a1	jsr $a1c1			jsr 	Evaluate16BitInteger
.8ee0					GotoStackX:
.8ee0	bd 10 04	lda $0410,x			lda  	NSMantissa1,x 				; put line # in XA. I'll keep this even though
.8ee3	48		pha				pha 								; it is slightly inefficient, just in cases.
.8ee4	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.8ee7	fa		plx				plx
.8ee8	20 94 a2	jsr $a294			jsr 	MemorySearch 				; transfer to line number AX.
.8eeb	90 05		bcc $8ef2			bcc 	_GotoError 					; not found, off end.
.8eed	d0 03		bne $8ef2			bne 	_GotoError 					; not found exactly
.8eef	4c 1b 92	jmp $921b			jmp 	RunNewLine 					; and go straight to new line code.
.8ef2					_GotoError:
.8ef2	a9 0d		lda #$0d		lda	#13
.8ef4	4c 7d 96	jmp $967d		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/if.asm

.8ef7					IfCommand:
.8ef7	a2 00		ldx #$00			ldx 	#0 							; If what.
.8ef9	20 89 a1	jsr $a189			jsr 	EvaluateNumber
.8efc	b1 30		lda ($30),y			lda 	(codePtr),y
.8efe	c9 a3		cmp #$a3			cmp 	#KWD_THEN  					; could be THEN <stuff> or GOTO
.8f00	d0 0a		bne $8f0c			bne 	_IFStructured
.8f02	c8		iny				iny 								; consume THEN
.8f03	20 65 a2	jsr $a265			jsr 	NSMIsZero 					; is it zero
.8f06	f0 01		beq $8f09			beq 	_IfFail 					; if fail, go to next line
.8f08	60		rts				rts 								; if THEN just continue
.8f09					_IfFail:
.8f09	4c 80 92	jmp $9280			jmp 	EOLCommand
.8f0c					_IfStructured:
.8f0c	20 65 a2	jsr $a265			jsr 	NSMIsZero 					; is it zero
.8f0f	d0 07		bne $8f18			bne 	_IfExit 					; if not, then continue normally.
.8f11	a9 af		lda #$af			lda 	#KWD_ELSE 					; look for else/endif
.8f13	a2 a0		ldx #$a0			ldx 	#KWD_ENDIF
.8f15	20 ef 95	jsr $95ef			jsr 	ScanForward 				; and run from there/
.8f18					_IfExit:
.8f18	60		rts				rts
.8f19					ElseCode:
.8f19	a9 a0		lda #$a0			lda 	#KWD_ENDIF 					; else is only run after the if clause succeeds
.8f1b	aa		tax				tax 								; so just go to the structure exit
.8f1c	20 ef 95	jsr $95ef			jsr 	ScanForward
.8f1f	60		rts				rts
.8f20					EndIf:
.8f20	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/let.asm

.8f21					LetCommand:
.8f21	a2 00		ldx #$00			ldx 	#0
.8f23	b1 30		lda ($30),y			lda 	(codePtr),y
.8f25	c9 10		cmp #$10			cmp 	#KWD_AT
.8f27	d0 16		bne $8f3f			bne 	_LCStandard
.8f29	c8		iny				iny 								; skip equal
.8f2a	20 57 9d	jsr $9d57			jsr 	EvaluateTerm 				; get a number
.8f2d	20 9b 9b	jsr $9b9b			jsr 	Dereference 				; dereference it
.8f30	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check integer
.8f33	49 20		eor #$20			eor 	#NSBIsReference	 			; toggle reference
.8f35	9d 00 04	sta $0400,x			sta 	NSStatus,x
.8f38	29 20		and #$20			and 	#NSBIsReference 			; if it is now a reference, continue
.8f3a	d0 10		bne $8f4c			bne 	_LCMain
.8f3c	4c 20 b0	jmp $b020			jmp 	TypeError 					; was a reference before.
.8f3f					_LCStandard:
.8f3f	ad 6e 9a	lda $9a6e			lda 	PrecedenceLevel+"*"			; precedence > this
.8f42	20 88 9a	jsr $9a88			jsr 	EvaluateExpressionAtPrecedence
.8f45	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; is it a reference to an array
.8f48	c9 38		cmp #$38			cmp		#NSTProcedure+NSBIsReference
.8f4a	f0 0e		beq $8f5a			beq 	_LetGoProc 					; it's a procedure call.
.8f4c					_LCMain:
.8f4c	a9 3d		lda #$3d			lda 	#"=" 						; check =
.8f4e	20 40 aa	jsr $aa40			jsr 	CheckNextA
.8f51	e8		inx				inx 								; RHS
.8f52	20 80 a1	jsr $a180			jsr 	EvaluateValue
.8f55	ca		dex				dex
.8f56	20 5d 8f	jsr $8f5d			jsr 	AssignVariable
.8f59	60		rts				rts
.8f5a					_LetGoProc:
.8f5a	4c f6 90	jmp $90f6			jmp 	CallProcedure
.8f5d					AssignVariable:
.8f5d	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check the string/number type bits match
.8f60	48		pha				pha 								; save a copy
.8f61	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.8f64	29 10		and #$10			and 	#NSBIsString
.8f66	d0 0b		bne $8f73			bne 	_ASError
.8f68	68		pla				pla 								; get back
.8f69	29 10		and #$10			and 	#NSBIsString 				; check type
.8f6b	d0 03		bne $8f70			bne 	_ASString
.8f6d	4c c3 9a	jmp $9ac3			jmp 	AssignNumber
.8f70					_ASString:
.8f70	4c 31 9b	jmp $9b31			jmp 	AssignString
.8f73					_ASError:
.8f73	4c 20 b0	jmp $b020			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/list.asm

.8f76					Command_List:
.8f76	9c 0c 04	stz $040c			stz		NSMantissa0+4				; set the lower (slot 4) to 0 and upper (slot 7) to $FFFF
.8f79	9c 14 04	stz $0414			stz 	NSMantissa1+4
.8f7c	a9 ff		lda #$ff			lda 	#$FF
.8f7e	8d 0f 04	sta $040f			sta 	NSMantissa0+7
.8f81	8d 17 04	sta $0417			sta 	NSMantissa1+7
.8f84	b1 30		lda ($30),y			lda 	(codePtr),y
.8f86	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8f88	f0 1e		beq $8fa8			beq 	_CLSecond
.8f8a	20 06 90	jsr $9006			jsr 	CLIsDigit 					; if not digit, list all
.8f8d	b0 24		bcs $8fb3			bcs 	_CLStart
.8f8f	a2 04		ldx #$04			ldx 	#4 							; get 1st range into slot 4
.8f91	20 c1 a1	jsr $a1c1			jsr 	Evaluate16BitInteger
.8f94	b1 30		lda ($30),y			lda 	(codePtr),y
.8f96	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8f98	f0 0e		beq $8fa8			beq 	_CLSecond 					; if so go get it
.8f9a	ad 0c 04	lda $040c			lda 	NSMantissa0+4 				; copy 4->7
.8f9d	8d 0f 04	sta $040f			sta 	NSMantissa0+7
.8fa0	ad 14 04	lda $0414			lda 	NSMantissa1+4
.8fa3	8d 17 04	sta $0417			sta 	NSMantissa1+7
.8fa6	80 0b		bra $8fb3			bra 	_CLStart
.8fa8					_CLSecond:
.8fa8	c8		iny				iny 								; consume comma
.8fa9	20 06 90	jsr $9006			jsr 	CLIsDigit 					; digit found
.8fac	b0 05		bcs $8fb3			bcs 	_CLStart 					; if not, continue listing
.8fae	a2 07		ldx #$07			ldx 	#7 							; load 2nd range into slot 7
.8fb0	20 c1 a1	jsr $a1c1			jsr 	Evaluate16BitInteger
.8fb3					_CLStart
.8fb3	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8fb5	85 30		sta $30				sta 	codePtr
.8fb7	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8fb9	85 31		sta $31				sta 	codePtr+1
.8fbb					_CLLoop:
.8fbb	20 0a b2	jsr $b20a			jsr 	EXTBreakCheck 				; break check
.8fbe	f0 30		beq $8ff0			beq 	_CLExit
.8fc0	b2 30		lda ($30)			lda 	(codePtr)
.8fc2	f0 2c		beq $8ff0			beq 	_CLExit
.8fc4	a2 04		ldx #$04			ldx 	#4 							; check range every time, line numbers aren't in order.
.8fc6	20 f3 8f	jsr $8ff3			jsr 	CLCompareLineNo
.8fc9	90 18		bcc $8fe3			bcc 	_CLNext
.8fcb	a2 07		ldx #$07			ldx 	#7
.8fcd	20 f3 8f	jsr $8ff3			jsr 	CLCompareLineNo
.8fd0	f0 02		beq $8fd4			beq 	_CLDoThisOne
.8fd2	b0 0f		bcs $8fe3			bcs 	_CLNext
.8fd4					_CLDoThisOne:
.8fd4	20 4b 94	jsr $944b			jsr 	ListConvertLine 			; convert line into token Buffer
.8fd7	a2 04		ldx #$04			ldx 	#(tokenBuffer >> 8) 		; print that line
.8fd9	a9 a9		lda #$a9			lda 	#(tokenBuffer & $FF)
.8fdb	20 d6 96	jsr $96d6			jsr 	PrintStringXA
.8fde	a9 0d		lda #$0d			lda 	#13 						; new line
.8fe0	20 c9 b1	jsr $b1c9			jsr 	EXTPrintCharacter
.8fe3					_CLNext:
.8fe3	18		clc				clc
.8fe4	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8fe6	65 30		adc $30				adc 	codePtr
.8fe8	85 30		sta $30				sta 	codePtr
.8fea	90 02		bcc $8fee			bcc 	_CREExit
.8fec	e6 31		inc $31				inc 	codePtr+1
.8fee					_CREExit:
.8fee	80 cb		bra $8fbb			bra 	_CLLoop
.8ff0					_CLExit:
.8ff0	4c bf 8b	jmp $8bbf			jmp 	WarmStart
.8ff3					CLCompareLineNo:
.8ff3	38		sec				sec
.8ff4	a0 01		ldy #$01			ldy 	#1
.8ff6	b1 30		lda ($30),y			lda 	(codePtr),y
.8ff8	fd 08 04	sbc $0408,x			sbc 	NSMantissa0,x
.8ffb	85 36		sta $36				sta 	zTemp0
.8ffd	c8		iny				iny
.8ffe	b1 30		lda ($30),y			lda 	(codePtr),y
.9000	fd 10 04	sbc $0410,x			sbc 	NSMantissa1,x
.9003	05 36		ora $36				ora 	zTemp0
.9005	60		rts				rts
.9006					CLIsDigit:
.9006	b1 30		lda ($30),y			lda 	(codePtr),y
.9008	c9 30		cmp #$30			cmp 	#"0"
.900a	90 03		bcc $900f			bcc	 	_CLIDExitFalse
.900c	c9 3a		cmp #$3a			cmp 	#"9"+1
.900e	60		rts				rts
.900f					_CLIDExitFalse:
.900f	38		sec				sec
.9010	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/local.asm

.9011					Command_LOCAL:
.9011	a2 00		ldx #$00			ldx 	#0 							; at level 0
.9013	20 1f 90	jsr $901f			jsr 	LocaliseNextTerm 			; convert term to a local.
.9016	b1 30		lda ($30),y			lda 	(codePtr),y
.9018	c8		iny				iny
.9019	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.901b	f0 f4		beq $9011			beq 	Command_LOCAL
.901d	88		dey				dey 								; unpick pre-get
.901e	60		rts				rts
.901f					LocaliseNextTerm:
.901f	20 57 9d	jsr $9d57			jsr 	EvaluateTerm 				; evaluate the term
.9022	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9025	29 20		and #$20			and 	#NSBIsReference 			; check it is a reference
.9027	f0 69		beq $9092			beq		_LNTError
.9029	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address of variable to zTemp0
.902c	85 36		sta $36				sta 	zTemp0
.902e	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9031	85 37		sta $37				sta  	zTemp0+1
.9033	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9036	29 10		and #$10			and 	#NSBIsString
.9038	d0 22		bne $905c			bne 	_LNTPushString
.903a	5a		phy				phy
.903b	a0 00		ldy #$00			ldy 	#0 							; push 0 to 4 inclusive, the number values, on the stack, and zero them as you go.
.903d					_LNTPushNumLoop:
.903d	b1 36		lda ($36),y			lda		(zTemp0),y
.903f	20 c7 a2	jsr $a2c7			jsr 	StackPushByte
.9042	a9 00		lda #$00			lda 	#0
.9044	91 36		sta ($36),y			sta 	(zTemp0),y
.9046	c8		iny				iny
.9047	c0 05		cpy #$05			cpy 	#5
.9049	d0 f2		bne $903d			bne 	_LNTPushNumLoop
.904b	a5 36		lda $36				lda 	zTemp0 						; push the actual target address to write on the stack
.904d	20 c7 a2	jsr $a2c7			jsr 	StackPushByte
.9050	a5 37		lda $37				lda 	zTemp0+1
.9052	20 c7 a2	jsr $a2c7			jsr 	StackPushByte
.9055	a9 01		lda #$01			lda 	#STK_LOCALN 				; push local-number marker.
.9057	20 c7 a2	jsr $a2c7			jsr 	StackPushByte
.905a	7a		ply				ply
.905b	60		rts				rts
.905c					_LNTPushString:
.905c	5a		phy				phy
.905d	b2 36		lda ($36)			lda 	(zTemp0) 					; put address of string in zTemp1
.905f	85 38		sta $38				sta 	zTemp1
.9061	a0 01		ldy #$01			ldy 	#1
.9063	b1 36		lda ($36),y			lda 	(zTemp0),y
.9065	85 39		sta $39				sta 	zTemp1+1
.9067	a0 00		ldy #$00			ldy 	#0 							; output string
.9069	c9 00		cmp #$00			cmp 	#0 							; if not assigned strin
.906b	f0 0a		beq $9077			beq 	_LNTStringOut
.906d					_LNTPushStrLoop:
.906d	b1 38		lda ($38),y			lda 	(zTemp1),y
.906f	f0 06		beq $9077			beq 	_LNTStringOut
.9071	20 c7 a2	jsr $a2c7			jsr 	StackPushByte
.9074	c8		iny				iny
.9075	80 f6		bra $906d			bra 	_LNTPushStrLoop
.9077					_LNTStringOut:
.9077	98		tya				tya									; output length
.9078	20 c7 a2	jsr $a2c7			jsr 	StackPushByte
.907b	a9 00		lda #$00			lda 	#0 							; clear original string.
.907d	92 38		sta ($38)			sta 	(zTemp1)
.907f	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; output address of the string record *not* the string itself
.9082	20 c7 a2	jsr $a2c7			jsr 	StackPushByte
.9085	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9088	20 c7 a2	jsr $a2c7			jsr 	StackPushByte
.908b	a9 02		lda #$02			lda 	#STK_LOCALS 				; push local-string marker.
.908d	20 c7 a2	jsr $a2c7			jsr 	StackPushByte
.9090	7a		ply				ply
.9091	60		rts				rts
.9092					_LNTError:
.9092	4c 16 b0	jmp $b016			jmp 	SyntaxError
.a9d7					LocalPopValue:
.a9d7	20 e0 a2	jsr $a2e0			jsr 	StackPopByte
.a9da	c9 01		cmp #$01			cmp 	#STK_LOCALN 				; if not local-N
.a9dc	d0 17		bne $a9f5			bne 	_LPVString
.a9de	20 e0 a2	jsr $a2e0			jsr 	StackPopByte 				; address
.a9e1	85 37		sta $37				sta 	zTemp0+1
.a9e3	20 e0 a2	jsr $a2e0			jsr 	StackPopByte
.a9e6	85 36		sta $36				sta 	zTemp0
.a9e8	5a		phy				phy
.a9e9	a0 04		ldy #$04			ldy 	#4 							; copy back
.a9eb					_LPVNumberCopy:
.a9eb	20 e0 a2	jsr $a2e0			jsr 	StackPopByte
.a9ee	91 36		sta ($36),y			sta 	(zTemp0),y
.a9f0	88		dey				dey
.a9f1	10 f8		bpl $a9eb			bpl 	_LPVNumberCopy
.a9f3	7a		ply				ply 								; and complete
.a9f4	60		rts				rts
.a9f5					_LPVString:
.a9f5	20 e0 a2	jsr $a2e0			jsr 	StackPopByte 				; address of record => zTemp0
.a9f8	85 37		sta $37				sta 	zTemp0+1
.a9fa	20 e0 a2	jsr $a2e0			jsr 	StackPopByte
.a9fd	85 36		sta $36				sta 	zTemp0
.a9ff	5a		phy				phy
.aa00	b2 36		lda ($36)			lda 	(zTemp0) 					; address to write string to => zTemp1
.aa02	85 38		sta $38				sta 	zTemp1
.aa04	a0 01		ldy #$01			ldy 	#1
.aa06	b1 36		lda ($36),y			lda 	(zTemp0),y
.aa08	85 39		sta $39				sta 	zTemp1+1
.aa0a	20 e0 a2	jsr $a2e0			jsr 	StackPopByte 				; # to get => y
.aa0d	a8		tay				tay
.aa0e	a5 39		lda $39				lda 	zTemp1+1 					; if no target (e.g. was "" originally) exit
.aa10	f0 0e		beq $aa20			beq 	_LPVStringCopied
.aa12	a9 00		lda #$00			lda 	#0 							; NULL on end
.aa14	91 38		sta ($38),y			sta 	(zTemp1),y
.aa16					_LPVStringCopy:
.aa16	88		dey				dey
.aa17	30 07		bmi $aa20			bmi 	_LPVStringCopied
.aa19	20 e0 a2	jsr $a2e0			jsr 	StackPopByte
.aa1c	91 38		sta ($38),y			sta 	(zTemp1),y
.aa1e	80 f6		bra $aa16			bra 	_LPVStringCopy
.aa20					_LPVStringCopied:
.aa20	fa		plx				plx
.aa21	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/new.asm

.9095					NewCommand:
.9095	20 72 a2	jsr $a272			jsr 	MemoryNew
.9098	9c 00 10	stz $1000			stz 	VariableSpace 				; erase all variables.
.909b	20 58 8c	jsr $8c58			jsr 	ClearCommand 				; clear everything.
.909e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/print.asm

.909f					Command_Print:
.909f	18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.90a0					_CPLoop:
.90a0	08		php				php 								; save last action flag
.90a1	b1 30		lda ($30),y			lda 	(codePtr),y
.90a3	c9 80		cmp #$80			cmp  	#KWC_EOL 					; end of line or colon, exit now.
.90a5	f0 46		beq $90ed			beq 	_CPExit
.90a7	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.90a9	f0 42		beq $90ed			beq 	_CPExit
.90ab	68		pla				pla 								; throw last action flag
.90ac	b1 30		lda ($30),y			lda 	(codePtr),y
.90ae	c8		iny				iny
.90af	c9 3b		cmp #$3b			cmp 	#KWD_SEMICOLON				; is it a semicolon
.90b1	f0 37		beq $90ea			beq 	_CPContinueWithSameLine
.90b3	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; comma
.90b5	f0 2e		beq $90e5			beq 	_CPTab
.90b7	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; apostrophe (new line)
.90b9	f0 26		beq $90e1			beq 	_CPNewLine
.90bb	88		dey				dey 								; undo the get.
.90bc	a2 00		ldx #$00			ldx 	#0
.90be	20 80 a1	jsr $a180			jsr 	EvaluateValue 				; get a value into slot 0
.90c1	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; is it a number
.90c4	29 10		and #$10			and 	#NSBIsString
.90c6	f0 0b		beq $90d3			beq 	_CPNumber
.90c8	ae 10 04	ldx $0410			ldx 	NSMantissa1 				; string, print the text.
.90cb	ad 08 04	lda $0408			lda 	NSMantissa0
.90ce	20 d6 96	jsr $96d6			jsr 	PrintStringXA
.90d1	80 cc		bra $909f			bra 	Command_Print 				; loop round clearing carry so NL if end
.90d3					_CPNumber:
.90d3	a9 05		lda #$05			lda 	#5 							; maximum decimals
.90d5	20 56 a0	jsr $a056			jsr 	ConvertNumberToString 		; convert to string
.90d8	a2 06		ldx #$06			ldx 	#DecimalBuffer >> 8
.90da	a9 19		lda #$19			lda 	#DecimalBuffer & $FF
.90dc	20 d6 96	jsr $96d6			jsr 	PrintStringXA
.90df	80 be		bra $909f			bra 	Command_Print 				; loop round clearing carry so NL if end
.90e1					_CPNewLine:
.90e1	a9 0d		lda #$0d			lda 	#13
.90e3	80 02		bra $90e7			bra 	_CPPrintChar
.90e5					_CPTab:
.90e5	a9 09		lda #$09			lda 	#9 							; print TAB
.90e7					_CPPrintChar:
.90e7	20 c9 b1	jsr $b1c9			jsr 	EXTPrintCharacter
.90ea					_CPContinueWithSameLine:
.90ea	38		sec				sec 								; loop round with carry set, which
.90eb	80 b3		bra $90a0			bra 	_CPLoop 					; will inhibit final CR
.90ed					_CPExit:
.90ed	28		plp				plp 								; get last action flag
.90ee	b0 05		bcs $90f5			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.90f0	a9 0d		lda #$0d			lda 	#13 						; print new line
.90f2	20 c9 b1	jsr $b1c9			jsr 	EXTPrintCharacter
.90f5					_CPExit2:
.90f5	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/procedure.asm

=2					ParameterStackPos = 2
.90f6					CallProcedure:
.90f6	a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start storing parameters at 2.
.90f8	b1 30		lda ($30),y			lda 	(codePtr),y
.90fa	c9 29		cmp #$29			cmp 	#KWD_RPAREN
.90fc	f0 0c		beq $910a			beq 	_CPEndParam
.90fe					_CPParamLoop:
.90fe	20 86 9a	jsr $9a86			jsr 	EvaluateExpression 			; get parameter onto stack
.9101	e8		inx				inx 								; bump next stack
.9102	b1 30		lda ($30),y			lda 	(codePtr),y
.9104	c8		iny				iny
.9105	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if comma, go back and try again.
.9107	f0 f5		beq $90fe			beq 	_CPParamLoop
.9109	88		dey				dey 								; unpick.
.910a					_CPEndParam:
.910a	8e 96 04	stx $0496			stx 	LastParameter 				; save the last parameters index.
.910d	c8		iny				iny									; skip right bracket
.910e	a9 b3		lda #$b3			lda 	#STK_PROC+3 				; allocate 6 bytes on the return stack.
.9110	20 e9 a2	jsr $a2e9			jsr 	StackOpen
.9113	20 2d a3	jsr $a32d			jsr 	STKSaveCodePosition 		; save loop position
.9116	ad 08 04	lda $0408			lda 	NSMantissa0 				; copy variable (e.g. procedure) address to zTemp0
.9119	85 36		sta $36				sta 	zTemp0 						; this is the DATA not the RECORD
.911b	ad 10 04	lda $0410			lda 	NSMantissa1
.911e	85 37		sta $37				sta 	zTemp0+1
.9120	a0 01		ldy #$01			ldy 	#1 							; copy code address back.
.9122	b2 36		lda ($36)			lda 	(zTemp0)
.9124	85 30		sta $30				sta 	safePtr
.9126	b1 36		lda ($36),y			lda 	(zTemp0),y
.9128	85 31		sta $31				sta 	safePtr+1
.912a	c8		iny				iny
.912b	b1 36		lda ($36),y			lda 	(zTemp0),y
.912d	85 32		sta $32				sta 	safePtr+2
.912f	c8		iny				iny
.9130	b1 36		lda ($36),y			lda 	(zTemp0),y
.9132	85 33		sta $33				sta 	safePtr+3
.9134	c8		iny				iny 								; get Y offset -> Y
.9135	b1 36		lda ($36),y			lda 	(zTemp0),y
.9137	a8		tay				tay
.9138	a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start position of parameters
.913a	ec 96 04	cpx $0496			cpx	 	LastParameter 				; check no parameters at the start
.913d	f0 13		beq $9152			beq 	_ParamExit 					; if so, exit.
.913f					_ParamExtract:
.913f	ca		dex				dex 								; put a local term on the level before
.9140	20 1f 90	jsr $901f			jsr 	LocaliseNextTerm			; also pushes original param value to basic stack
.9143	20 5d 8f	jsr $8f5d			jsr 	AssignVariable 				; assign stacked value to the variable.
.9146	e8		inx				inx 								; advance to next parameter to do.
.9147	e8		inx				inx
.9148	ec 96 04	cpx $0496			cpx 	LastParameter 				; are we done ?
.914b	f0 05		beq $9152			beq 	_ParamExit
.914d	20 38 aa	jsr $aa38			jsr 	CheckComma 					; comma seperating parameters
.9150	80 ed		bra $913f			bra 	_ParamExtract
.9152					_ParamExit:
.9152	20 30 aa	jsr $aa30			jsr 	CheckRightBracket 			; check )
.9155	60		rts				rts 								; and continue from here
.aa22					Command_ENDPROC:
.aa22	a9 b0		lda #$b0			lda 	#STK_PROC 					; check TOS is this
.aa24	a2 14		ldx #$14			ldx 	#ERRID_PROC
.aa26	20 15 a3	jsr $a315			jsr 	StackCheckFrame
.aa29	20 3e a3	jsr $a33e			jsr 	STKLoadCodePosition 		; restore code position
.aa2c	20 07 a3	jsr $a307			jsr 	StackClose
.aa2f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/read.asm

.9156					Command_Read:
.9156	a2 00		ldx #$00			ldx 	#0 							; evaluate the term which is the var/array element to assign
.9158	20 57 9d	jsr $9d57			jsr 	EvaluateTerm
.915b	bd 00 04	lda $0400,x			lda 	NSStatus,x
.915e	29 20		and #$20			and 	#NSBIsReference				; get status byte on stack, identifies int, float, string.
.9160	f0 4a		beq $91ac			beq 	_CRSyntax 					; check reference (bit 0)
.9162	20 f5 91	jsr $91f5			jsr 	SwapDataCodePtrs 			; swap code and data
.9165	ad 9c 04	lda $049c			lda 	inDataStatement 			; if in a data statement, we don't need to search
.9168	d0 20		bne $918a			bne 	_CRContinueData
.916a					_CRKeepSearching:
.916a	a9 ac		lda #$ac			lda 	#KWD_DATA 					; scan for instruction
.916c	aa		tax				tax
.916d	20 ef 95	jsr $95ef			jsr 	ScanForward
.9170	c9 ac		cmp #$ac			cmp 	#KWD_DATA 					; found data ?
.9172	f0 16		beq $918a			beq 	_CRHaveData 				; found it
.9174	18		clc				clc
.9175	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.9177	65 30		adc $30				adc 	codePtr
.9179	85 30		sta $30				sta 	codePtr
.917b	90 02		bcc $917f			bcc 	_CREExit
.917d	e6 31		inc $31				inc 	codePtr+1
.917f					_CREExit:
.917f	a0 03		ldy #$03			ldy 	#3 							; start of line.
.9181	b2 30		lda ($30)			lda 	(codePtr)
.9183	d0 e5		bne $916a			bne 	_CRKeepSearching
.9185	a9 0b		lda #$0b		lda	#11
.9187	4c 7d 96	jmp $967d		jmp	ErrorHandler
.918a					_CRHaveData:
.918a					_CRContinueData:
.918a	a2 01		ldx #$01			ldx 	#1
.918c	20 80 a1	jsr $a180			jsr 	EvaluateValue 				; evaluate value into slot # 1
.918f	ca		dex				dex
.9190	20 5d 8f	jsr $8f5d			jsr		AssignVariable 				; do the assignment
.9193	9c 9c 04	stz $049c			stz 	inDataStatement 			; clear in data
.9196	b1 30		lda ($30),y			lda 	(codePtr),y
.9198	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not, end of data statement
.919a	d0 04		bne $91a0			bne 	_CRSwapBack
.919c	c8		iny				iny 								; consume comma
.919d	ee 9c 04	inc $049c			inc 	inDataStatement 			; set in data statement currently.
.91a0					_CRSwapBack:
.91a0	20 f5 91	jsr $91f5			jsr 	SwapDataCodePtrs			; swap them back.
.91a3	b1 30		lda ($30),y			lda 	(codePtr),y
.91a5	c8		iny				iny
.91a6	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.91a8	f0 ac		beq $9156			beq 	Command_Read 				; if so go round again.
.91aa	88		dey				dey 								; unpick get.
.91ab	60		rts				rts
.91ac					_CRSyntax:
.91ac	4c 16 b0	jmp $b016			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/rem.asm

.91af					RemCommand:
.91af	b1 30		lda ($30),y			lda 	(codePtr),y
.91b1	c9 ff		cmp #$ff			cmp 	#KWC_STRING
.91b3	d0 06		bne $91bb			bne 	_RMExit
.91b5	c8		iny				iny
.91b6	98		tya				tya
.91b7	38		sec				sec
.91b8	71 30		adc ($30),y			adc 	(codePtr),y
.91ba	a8		tay				tay
.91bb					_RMExit:
.91bb	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/repeat.asm

.91bc					Command_REPEAT:
.91bc	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; allocate 6 bytes on the return stack.
.91be	20 e9 a2	jsr $a2e9			jsr 	StackOpen
.91c1	20 2d a3	jsr $a32d			jsr 	STKSaveCodePosition 		; save loop position
.91c4	60		rts				rts
.91c5					Command_UNTIL:
.91c5	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; check REPEAT is TOS
.91c7	a2 0f		ldx #$0f			ldx 	#ERRID_REPEAT 				; this error
.91c9	20 15 a3	jsr $a315			jsr 	StackCheckFrame
.91cc	a2 00		ldx #$00			ldx 	#0
.91ce	20 89 a1	jsr $a189			jsr 	EvaluateNumber 				; work out the number
.91d1	20 65 a2	jsr $a265			jsr 	NSMIsZero 					; check if zero
.91d4	f0 04		beq $91da			beq 	_CULoopBack 				; if so keep looping
.91d6	20 07 a3	jsr $a307			jsr 	StackClose		 			; return
.91d9	60		rts				rts
.91da					_CULoopBack:
.91da	20 3e a3	jsr $a33e			jsr 	STKLoadCodePosition 		; loop back
.91dd	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/restore.asm

.91de					Command_Restore:
.91de	20 f5 91	jsr $91f5			jsr 	SwapDataCodePtrs 			; swap code and data
.91e1	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.91e3	85 30		sta $30				sta 	codePtr
.91e5	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.91e7	85 31		sta $31				sta 	codePtr+1
.91e9	20 f5 91	jsr $91f5			jsr 	SwapDataCodePtrs 			; put them back
.91ec	a9 03		lda #$03			lda 	#3 							; start at offset 3, e.g. first instruction of first line.
.91ee	8d 9b 04	sta $049b			sta 	dataPointer+4
.91f1	9c 9c 04	stz $049c			stz 	inDataStatement 			; not in data statement
.91f4	60		rts				rts
.91f5					SwapDataCodePtrs:
.91f5	da		phx				phx
.91f6	a2 03		ldx #$03			ldx 	#3 							; swap 32 bit code pointer over
.91f8					_SDCPLoop:
.91f8	b5 30		lda $30,x			lda 	safePtr,x
.91fa	48		pha				pha
.91fb	bd 97 04	lda $0497,x			lda 	dataPointer,x
.91fe	95 30		sta $30,x			sta 	safePtr,x
.9200	68		pla				pla
.9201	9d 97 04	sta $0497,x			sta 	dataPointer,x
.9204	ca		dex				dex
.9205	10 f1		bpl $91f8			bpl 	_SDCPLoop
.9207	ad 9b 04	lda $049b			lda 	dataPointer+4 				; swap Y position over.
.920a	8c 9b 04	sty $049b			sty 	dataPointer+4
.920d	a8		tay				tay
.920e	fa		plx				plx
.920f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/run.asm

.9210					CommandRUN:
.9210	20 58 8c	jsr $8c58			jsr 	ClearCommand 				; clear variable/stacks/etc.
.9213	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.9215	85 30		sta $30				sta 	codePtr
.9217	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.9219	85 31		sta $31				sta 	codePtr+1
.921b					RUNNewLine:
.921b	b2 30		lda ($30)			lda 	(codePtr)
.921d	f0 5e		beq $927d			beq 	CRNoProgram         		; no then END.
.921f	a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack
.9221	9a		txs				txs
.9222					RUNCodePointerLine:
.9222	a0 02		ldy #$02			ldy 	#2 							; start of program
.9224					_CRIncMainLoop:
.9224	0e 93 04	asl $0493			asl 	breakCheck 					; clears 1 time in 8
.9227	d0 05		bne $922e			bne 	_CRNoBreakCheck
.9229	20 0a b2	jsr $b20a			jsr 	EXTBreakCheck 				; break check
.922c	f0 4a		beq $9278			beq 	_CRBreak
.922e					_CRNoBreakCheck:
.922e	c8		iny				iny
.922f					_CRMainLoop:
.922f	9c 90 04	stz $0490			stz 	stringInitialised 			; clear the temporary string initialised flag.
.9232	b1 30		lda ($30),y			lda 	(codePtr),y
.9234	10 10		bpl $9246			bpl 	_CRNotKeyword
.9236	c9 9b		cmp #$9b			cmp 	#KWC_LAST_UNARY+1 			; if after unary, legitimate command
.9238	b0 04		bcs $923e			bcs 	_CRIsKeyword
.923a	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if unary, syntax error.
.923c	b0 34		bcs $9272			bcs		_CRSyntaxError
.923e					_CRIsKeyword:
.923e	c8		iny				iny 								; consume command
.923f	0a		asl a				asl 	a 							; double losing the MSB which is '1' as tokens are $80-$FF
.9240	aa		tax				tax 								; put in X for vector jump
.9241	20 75 92	jsr $9275			jsr 	_CRCallVector0 				; call the vector - effectively jsr (vectortable,X)
.9244	80 e9		bra $922f			bra 	_CRMainLoop 				; and loop round
.9246					_CRNotKeyword:
.9246	c9 3a		cmp #$3a			cmp 	#KWD_COLON 					; if a :, consume it and go round.
.9248	f0 da		beq $9224			beq 	_CRIncMainLoop
.924a	c9 40		cmp #$40			cmp 	#$40 						; variable/call reference
.924c	90 05		bcc $9253			bcc 	_CRNotVariable
.924e					_CRGoLet:
.924e	20 21 8f	jsr $8f21			jsr 	LetCommand
.9251	80 dc		bra $922f			bra 	_CRMainLoop
.9253					_CRNotVariable:
.9253	c9 10		cmp #$10			cmp 	#KWD_AT 					; handle @
.9255	f0 f7		beq $924e			beq 	_CRGoLet
.9257	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; handle ? !
.9259	f0 f3		beq $924e			beq 	_CRGoLet
.925b	c9 21		cmp #$21			cmp 	#KWD_PLING
.925d	f0 ef		beq $924e			beq 	_CRGoLet
.925f	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; handle ' (comment)
.9261	f0 09		beq $926c			beq 	_CRGoRem
.9263	c9 2e		cmp #$2e			cmp 	#KWD_PERIOD 				; handle . (assembler label)
.9265	d0 0b		bne $9272			bne 	_CRSyntaxError
.9267	20 f8 8a	jsr $8af8			jsr 	LabelHere
.926a	80 c3		bra $922f			bra 	_CRMainLoop
.926c					_CRGoRem:
.926c	c8		iny				iny
.926d	20 af 91	jsr $91af			jsr 	RemCommand
.9270	80 bd		bra $922f			bra 	_CRMainLoop
.9272					_CRSyntaxError:
.9272	4c 16 b0	jmp $b016			jmp 	SyntaxError
.9275					_CRCallVector0:
.9275	7c 20 93	jmp ($9320,x)			jmp 	(VectorSet0,x)
.9278					_CRBreak:
.9278	a9 01		lda #$01		lda	#1
.927a	4c 7d 96	jmp $967d		jmp	ErrorHandler
.927d					CRNoProgram:
.927d	4c 75 8d	jmp $8d75			jmp 	EndCommand
.9280					EOLCommand:
.9280	18		clc				clc
.9281	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.9283	65 30		adc $30				adc 	codePtr
.9285	85 30		sta $30				sta 	codePtr
.9287	90 02		bcc $928b			bcc 	_CREExit
.9289	e6 31		inc $31				inc 	codePtr+1
.928b					_CREExit:
.928b	80 8e		bra $921b			bra 	RunNewLine
.928d					Shift1Command:
.928d	b1 30		lda ($30),y			lda 	(codePtr),y
.928f	c8		iny				iny
.9290	0a		asl a				asl 	a
.9291	aa		tax				tax
.9292	7c a2 93	jmp ($93a2,x)			jmp 	(VectorSet1,x)
.9295					Shift2Command:
.9295	b1 30		lda ($30),y			lda 	(codePtr),y
.9297	c8		iny				iny
.9298	0a		asl a				asl 	a
.9299	aa		tax				tax
.929a	7c be 93	jmp ($93be,x)			jmp 	(VectorSet2,x)
.929d					Unused1:
.929d					Unused2:
.929d					Unused3:
.929d					Unused4:
.929d	4c 16 b0	jmp $b016			jmp 	SyntaxError
>92a0							.align 2

;******  Processing file: ./common/commands/../generated/vectors.dat

.92a0					VectorSetPunc:
>92a0	27 98					.word	ShiftLeft                        ; $00 <<
>92a2	21 97					.word	BinaryCompareLessEqual           ; $01 <=
>92a4	17 97					.word	BinaryCompareNotEqual            ; $02 <>
>92a6	16 b0					.word	SyntaxError                      ; $03 !!3
>92a8	16 b0					.word	SyntaxError                      ; $04 ><
>92aa	2b 97					.word	BinaryCompareGreaterEqual        ; $05 >=
>92ac	2a 98					.word	ShiftRight                       ; $06 >>
>92ae	16 b0					.word	SyntaxError                      ; $07 !!7
>92b0	16 b0					.word	SyntaxError                      ; $08 !!8
>92b2	16 b0					.word	SyntaxError                      ; $09 !!9
>92b4	16 b0					.word	SyntaxError                      ; $0a !!10
>92b6	16 b0					.word	SyntaxError                      ; $0b !!11
>92b8	16 b0					.word	SyntaxError                      ; $0c !!12
>92ba	16 b0					.word	SyntaxError                      ; $0d !!13
>92bc	16 b0					.word	SyntaxError                      ; $0e !!14
>92be	16 b0					.word	SyntaxError                      ; $0f !!15
>92c0	16 b0					.word	SyntaxError                      ; $10 @
>92c2	16 b0					.word	SyntaxError                      ; $11 !!17
>92c4	16 b0					.word	SyntaxError                      ; $12 !!18
>92c6	16 b0					.word	SyntaxError                      ; $13 [
>92c8	49 aa					.word	IntegerDivide                    ; $14 \
>92ca	16 b0					.word	SyntaxError                      ; $15 ]
>92cc	b0 99					.word	EorInteger                       ; $16 ^
>92ce	16 b0					.word	SyntaxError                      ; $17 _
>92d0	16 b0					.word	SyntaxError                      ; $18 `
>92d2	16 b0					.word	SyntaxError                      ; $19 !!25
>92d4	16 b0					.word	SyntaxError                      ; $1a !!26
>92d6	16 b0					.word	SyntaxError                      ; $1b {
>92d8	6a 99					.word	OraInteger                       ; $1c |
>92da	16 b0					.word	SyntaxError                      ; $1d }
>92dc	16 b0					.word	SyntaxError                      ; $1e ~
>92de	16 b0					.word	SyntaxError                      ; $1f [7m<7F>[m
>92e0	16 b0					.word	SyntaxError                      ; $20
>92e2	f6 99					.word	WordIndirect                     ; $21 !
>92e4	16 b0					.word	SyntaxError                      ; $22 "
>92e6	16 b0					.word	SyntaxError                      ; $23 #
>92e8	16 b0					.word	SyntaxError                      ; $24 $
>92ea	96 aa					.word	IntegerModulus                   ; $25 %
>92ec	24 99					.word	AndInteger                       ; $26 &
>92ee	16 b0					.word	SyntaxError                      ; $27 '
>92f0	16 b0					.word	SyntaxError                      ; $28 (
>92f2	16 b0					.word	SyntaxError                      ; $29 )
>92f4	0b ab					.word	MulInteger                       ; $2a *
>92f6	be 98					.word	AddInteger                       ; $2b +
>92f8	16 b0					.word	SyntaxError                      ; $2c ,
>92fa	f9 98					.word	SubInteger                       ; $2d -
>92fc	16 b0					.word	SyntaxError                      ; $2e .
>92fe	a2 ac					.word	FDivideCommand                   ; $2f /
>9300	16 b0					.word	SyntaxError                      ; $30 0
>9302	16 b0					.word	SyntaxError                      ; $31 1
>9304	16 b0					.word	SyntaxError                      ; $32 2
>9306	16 b0					.word	SyntaxError                      ; $33 3
>9308	16 b0					.word	SyntaxError                      ; $34 4
>930a	16 b0					.word	SyntaxError                      ; $35 5
>930c	16 b0					.word	SyntaxError                      ; $36 6
>930e	16 b0					.word	SyntaxError                      ; $37 7
>9310	16 b0					.word	SyntaxError                      ; $38 8
>9312	16 b0					.word	SyntaxError                      ; $39 9
>9314	16 b0					.word	SyntaxError                      ; $3a :
>9316	16 b0					.word	SyntaxError                      ; $3b ;
>9318	03 97					.word	BinaryCompareLess                ; $3c <
>931a	f9 96					.word	BinaryCompareEqual               ; $3d =
>931c	0d 97					.word	BinaryCompareGreater             ; $3e >
>931e	1d 9a					.word	ByteIndirect                     ; $3f ?
.9320					VectorSet0:
>9320	80 92					.word	EOLCommand                       ; $80 !0:EOF
>9322	8d 92					.word	Shift1Command                    ; $81 !1:SH1
>9324	95 92					.word	Shift2Command                    ; $82 !2:SH2
>9326	e8 ad					.word	AbsUnary                         ; $83 ABS(
>9328	e7 9e					.word	AllocUnary                       ; $84 ALLOC(
>932a	f8 ad					.word	AscUnary                         ; $85 ASC(
>932c	07 a0					.word	ChrUnary                         ; $86 CHR$(
>932e	16 b0					.word	SyntaxError                      ; $87 EVENT(
>9330	f5 96					.word	UnaryFalse                       ; $88 FALSE
>9332	05 ae					.word	FracUnary                        ; $89 FRAC(
>9334	1b ae					.word	IntUnary                         ; $8a INT(
>9336	71 ae					.word	IsValUnary                       ; $8b ISVAL(
>9338	e1 a0					.word	Unary_Left                       ; $8c LEFT$(
>933a	2d ae					.word	LenUnary                         ; $8d LEN(
>933c	0b a1					.word	Unary_Mid                        ; $8e MID$(
>933e	57 9f					.word	Unary_Not                        ; $8f NOT(
>9340	16 b0					.word	SyntaxError                      ; $90 OFF
>9342	16 b0					.word	SyntaxError                      ; $91 ON
>9344	6d 9f					.word	Unary_Random                     ; $92 RANDOM(
>9346	f1 a0					.word	Unary_Right                      ; $93 RIGHT$(
>9348	86 9f					.word	Unary_Rnd                        ; $94 RND(
>934a	47 ae					.word	SgnUnary                         ; $95 SGN(
>934c	19 a0					.word	SpcUnary                         ; $96 SPC(
>934e	34 a0					.word	Unary_Str                        ; $97 STR$(
>9350	16 b0					.word	SyntaxError                      ; $98 TIMER(
>9352	e9 96					.word	UnaryTrue                        ; $99 TRUE
>9354	67 ae					.word	ValUnary                         ; $9a VAL(
>9356	78 8d					.word	ForCommand                       ; $9b FOR
>9358	f7 8e					.word	IfCommand                        ; $9c IF
>935a	9d 92					.word	Unused1                          ; $9d PROC
>935c	bc 91					.word	Command_REPEAT                   ; $9e REPEAT
>935e	4e 96					.word	Command_WHILE                    ; $9f WHILE
>9360	20 8f					.word	EndIf                            ; $a0 ENDIF
>9362	22 aa					.word	Command_ENDPROC                  ; $a1 ENDPROC
>9364	32 8e					.word	NextCommand                      ; $a2 NEXT
>9366	9d 92					.word	Unused4                          ; $a3 THEN
>9368	c5 91					.word	Command_UNTIL                    ; $a4 UNTIL
>936a	6f 96					.word	Command_WEND                     ; $a5 WEND
>936c	16 b0					.word	SyntaxError                      ; $a6 BY
>936e	1e 8c					.word	CallCommand                      ; $a7 CALL
>9370	16 b0					.word	SyntaxError                      ; $a8 CIRCLE
>9372	16 b0					.word	SyntaxError                      ; $a9 CLS
>9374	16 b0					.word	SyntaxError                      ; $aa COLOR
>9376	16 b0					.word	SyntaxError                      ; $ab COLOUR
>9378	b0 8c					.word	Command_Data                     ; $ac DATA
>937a	b8 8c					.word	DimCommand                       ; $ad DIM
>937c	9d 92					.word	Unused3                          ; $ae DOWNTO
>937e	19 8f					.word	ElseCode                         ; $af ELSE
>9380	8b 8e					.word	GfxCommand                       ; $b0 GFX
>9382	bd 8e					.word	Command_GOSUB                    ; $b1 GOSUB
>9384	db 8e					.word	GotoCommand                      ; $b2 GOTO
>9386	16 b0					.word	SyntaxError                      ; $b3 HERE
>9388	21 8f					.word	LetCommand                       ; $b4 LET
>938a	16 b0					.word	SyntaxError                      ; $b5 LINE
>938c	11 90					.word	Command_LOCAL                    ; $b6 LOCAL
>938e	16 b0					.word	SyntaxError                      ; $b7 OUTLINE
>9390	9f 90					.word	Command_Print                    ; $b8 PRINT
>9392	56 91					.word	Command_Read                     ; $b9 READ
>9394	16 b0					.word	SyntaxError                      ; $ba RECT
>9396	af 91					.word	RemCommand                       ; $bb REM
>9398	cd 8e					.word	Command_RETURN                   ; $bc RETURN
>939a	16 b0					.word	SyntaxError                      ; $bd SOLID
>939c	16 b0					.word	SyntaxError                      ; $be SPRITE
>939e	16 b0					.word	SyntaxError                      ; $bf TEXT
>93a0	9d 92					.word	Unused2                          ; $c0 TO
.93a2					VectorSet1:
>93a2	16 b0					.word	SyntaxError                      ; $80 !0:EOF
>93a4	16 b0					.word	SyntaxError                      ; $81 !1:SH1
>93a6	16 b0					.word	SyntaxError                      ; $82 !2:SH2
>93a8	ef 8b					.word	AssembleCommand                  ; $83 ASSEMBLE
>93aa	0e 8c					.word	AssertCommand                    ; $84 ASSERT
>93ac	16 b0					.word	SyntaxError                      ; $85 BITMAP
>93ae	58 8c					.word	ClearCommand                     ; $86 CLEAR
>93b0	75 8d					.word	EndCommand                       ; $87 END
>93b2	76 8f					.word	Command_List                     ; $88 LIST
>93b4	95 90					.word	NewCommand                       ; $89 NEW
>93b6	de 91					.word	Command_Restore                  ; $8a RESTORE
>93b8	10 92					.word	CommandRUN                       ; $8b RUN
>93ba	16 b0					.word	SyntaxError                      ; $8c SPRITES
>93bc	46 94					.word	StopCommand                      ; $8d STOP
.93be					VectorSet2:
>93be	16 b0					.word	SyntaxError                      ; $80 !0:EOF
>93c0	16 b0					.word	SyntaxError                      ; $81 !1:SH1
>93c2	16 b0					.word	SyntaxError                      ; $82 !2:SH2
>93c4	d5 ae					.word	Assemble_adc                     ; $83 ADC
>93c6	cd ae					.word	Assemble_and                     ; $84 AND
>93c8	e9 ae					.word	Assemble_asl                     ; $85 ASL
>93ca	53 af					.word	Assemble_bcc                     ; $86 BCC
>93cc	57 af					.word	Assemble_bcs                     ; $87 BCS
>93ce	5f af					.word	Assemble_beq                     ; $88 BEQ
>93d0	16 af					.word	Assemble_bit                     ; $89 BIT
>93d2	47 af					.word	Assemble_bmi                     ; $8a BMI
>93d4	5b af					.word	Assemble_bne                     ; $8b BNE
>93d6	43 af					.word	Assemble_bpl                     ; $8c BPL
>93d8	63 af					.word	Assemble_bra                     ; $8d BRA
>93da	67 af					.word	Assemble_brk                     ; $8e BRK
>93dc	4b af					.word	Assemble_bvc                     ; $8f BVC
>93de	4f af					.word	Assemble_bvs                     ; $90 BVS
>93e0	6f af					.word	Assemble_clc                     ; $91 CLC
>93e2	c3 af					.word	Assemble_cld                     ; $92 CLD
>93e4	83 af					.word	Assemble_cli                     ; $93 CLI
>93e6	b3 af					.word	Assemble_clv                     ; $94 CLV
>93e8	e1 ae					.word	Assemble_cmp                     ; $95 CMP
>93ea	2a af					.word	Assemble_cpx                     ; $96 CPX
>93ec	25 af					.word	Assemble_cpy                     ; $97 CPY
>93ee	07 af					.word	Assemble_dec                     ; $98 DEC
>93f0	bf af					.word	Assemble_dex                     ; $99 DEX
>93f2	9b af					.word	Assemble_dey                     ; $9a DEY
>93f4	d1 ae					.word	Assemble_eor                     ; $9b EOR
>93f6	0c af					.word	Assemble_inc                     ; $9c INC
>93f8	cf af					.word	Assemble_inx                     ; $9d INX
>93fa	bb af					.word	Assemble_iny                     ; $9e INY
>93fc	3e af					.word	Assemble_jmp                     ; $9f JMP
>93fe	39 af					.word	Assemble_jsr                     ; $a0 JSR
>9400	dd ae					.word	Assemble_lda                     ; $a1 LDA
>9402	02 af					.word	Assemble_ldx                     ; $a2 LDX
>9404	20 af					.word	Assemble_ldy                     ; $a3 LDY
>9406	f3 ae					.word	Assemble_lsr                     ; $a4 LSR
>9408	d3 af					.word	Assemble_nop                     ; $a5 NOP
>940a	c9 ae					.word	Assemble_ora                     ; $a6 ORA
>940c	7f af					.word	Assemble_pha                     ; $a7 PHA
>940e	6b af					.word	Assemble_php                     ; $a8 PHP
>9410	c7 af					.word	Assemble_phx                     ; $a9 PHX
>9412	87 af					.word	Assemble_phy                     ; $aa PHY
>9414	8f af					.word	Assemble_pla                     ; $ab PLA
>9416	73 af					.word	Assemble_plp                     ; $ac PLP
>9418	db af					.word	Assemble_plx                     ; $ad PLX
>941a	97 af					.word	Assemble_ply                     ; $ae PLY
>941c	ee ae					.word	Assemble_rol                     ; $af ROL
>941e	f8 ae					.word	Assemble_ror                     ; $b0 ROR
>9420	7b af					.word	Assemble_rti                     ; $b1 RTI
>9422	8b af					.word	Assemble_rts                     ; $b2 RTS
>9424	e5 ae					.word	Assemble_sbc                     ; $b3 SBC
>9426	77 af					.word	Assemble_sec                     ; $b4 SEC
>9428	d7 af					.word	Assemble_sed                     ; $b5 SED
>942a	93 af					.word	Assemble_sei                     ; $b6 SEI
>942c	d9 ae					.word	Assemble_sta                     ; $b7 STA
>942e	cb af					.word	Assemble_stp                     ; $b8 STP
>9430	fd ae					.word	Assemble_stx                     ; $b9 STX
>9432	1b af					.word	Assemble_sty                     ; $ba STY
>9434	11 af					.word	Assemble_stz                     ; $bb STZ
>9436	af af					.word	Assemble_tax                     ; $bc TAX
>9438	ab af					.word	Assemble_tay                     ; $bd TAY
>943a	34 af					.word	Assemble_trb                     ; $be TRB
>943c	2f af					.word	Assemble_tsb                     ; $bf TSB
>943e	b7 af					.word	Assemble_tsx                     ; $c0 TSX
>9440	9f af					.word	Assemble_txa                     ; $c1 TXA
>9442	a7 af					.word	Assemble_txs                     ; $c2 TXS
>9444	a3 af					.word	Assemble_tya                     ; $c3 TYA

;******  Return to file: ./common/commands/run.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/stop.asm

.9446					StopCommand:
.9446	a9 08		lda #$08		lda	#8
.9448	4c 7d 96	jmp $967d		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/expandline.asm

.944b					ListConvertLine:
.944b	9c 9d 04	stz $049d			stz 	tbOffset
.944e	9c a9 04	stz $04a9			stz 	tokenBuffer
.9451	a0 02		ldy #$02			ldy 	#2 							; convert line number to string
.9453	b1 30		lda ($30),y			lda 	(codePtr),y
.9455	aa		tax				tax
.9456	88		dey				dey
.9457	b1 30		lda ($30),y			lda 	(codePtr),y
.9459	20 8c ab	jsr $ab8c			jsr 	ConvertInt16
.945c	85 36		sta $36				sta 	zTemp0 						; copy number into buffer
.945e	86 37		stx $37				stx 	zTemp0+1
.9460	a0 00		ldy #$00			ldy 	#0
.9462					_LCCopyNumber:
.9462	b1 36		lda ($36),y			lda 	(zTemp0),y
.9464	20 64 95	jsr $9564			jsr 	LCLWrite
.9467	c8		iny				iny
.9468	b1 36		lda ($36),y			lda 	(zTemp0),y
.946a	d0 f6		bne $9462			bne 	_LCCopyNumber
.946c					_LCPadOut:
.946c	a9 20		lda #$20			lda 	#' '						; pad out to 6 characters
.946e	20 64 95	jsr $9564			jsr 	LCLWrite
.9471	ad 9d 04	lda $049d			lda 	tbOffset
.9474	c9 06		cmp #$06			cmp 	#6
.9476	d0 f4		bne $946c			bne 	_LCPadOut
.9478	a0 03		ldy #$03			ldy 	#3 							; start position.
.947a					_LCMainLoop:
.947a	b1 30		lda ($30),y			lda 	(codePtr),y
.947c	c9 80		cmp #$80			cmp 	#KWC_EOL 					; end of line ?
.947e	f0 17		beq $9497			beq 	_LCExit
.9480	c9 10		cmp #$10			cmp 	#16 						; 0-5 are the double punctuations
.9482	90 14		bcc $9498			bcc 	_LCDoubles
.9484	c9 20		cmp #$20			cmp 	#32 						; 16-31 are shifted punctuation from 64-91
.9486	90 20		bcc $94a8			bcc 	_LCShiftPunc
.9488	c9 40		cmp #$40			cmp 	#64 						; 32-64 are as stored, punc and digits
.948a	90 2b		bcc $94b7			bcc 	_LCPunctuation
.948c	c9 80		cmp #$80			cmp 	#128 						; 64-127 are variable identifiers.
.948e	90 2d		bcc $94bd			bcc 	_LCIdentifiers
.9490	c9 fe		cmp #$fe			cmp 	#254 						; 128-253 are tokenised words
.9492	90 49		bcc $94dd			bcc 	_LCTokens
.9494	4c 38 95	jmp $9538			jmp 	_LCData 					; 254-5 are data objects
.9497					_LCExit:
.9497	60		rts				rts
.9498					_LCDoubles:
.9498	48		pha				pha
.9499	4a		lsr a				lsr 	a 							; put bit 2 into bit 1
.949a	29 02		and #$02			and 	#2
.949c	09 3c		ora #$3c			ora 	#60 						; make < >
.949e	20 64 95	jsr $9564			jsr 	LCLWrite
.94a1	68		pla				pla 								; restore, do lower bit
.94a2	29 03		and #$03			and 	#3
.94a4	09 3c		ora #$3c			ora 	#60
.94a6	80 0f		bra $94b7			bra		_LCPunctuation 				; print, increment, loop
.94a8					_LCShiftPunc:
.94a8	aa		tax				tax 								; save in X
.94a9	29 07		and #$07			and 	#7 							; lower 3 bits
.94ab	f0 02		beq $94af			beq 	_LCNoAdd
.94ad	09 18		ora #$18			ora 	#24 						; adds $18 to it.
.94af					_LCNoAdd:
.94af	e0 18		cpx #$18			cpx 	#24 						; if >= 24 add $20
.94b1	90 02		bcc $94b5			bcc 	_LCNoAdd2
.94b3	09 20		ora #$20			ora 	#32 						; adds $20
.94b5					_LCNoAdd2:
.94b5	09 40		ora #$40			ora 	#$40 						; shift into 64-127 range and fall through.
.94b7					_LCPunctuation:
.94b7	c8		iny				iny 								; consume character
.94b8	20 64 95	jsr $9564			jsr 	LCLWrite 					; write it out.
.94bb	80 bd		bra $947a			bra 	_LCMainLoop 				; go round again.
.94bd					_LCIdentifiers:
.94bd	18		clc				clc 								; convert to physical address
.94be	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.94c0	85 37		sta $37				sta 	zTemp0+1
.94c2	c8		iny				iny
.94c3	b1 30		lda ($30),y			lda 	(codePtr),y
.94c5	85 36		sta $36				sta 	zTemp0
.94c7	c8		iny				iny
.94c8	5a		phy				phy 								; save position
.94c9	a0 07		ldy #$07			ldy 	#7 							; output the identifier.
.94cb					_LCOutIdentifier:
.94cb	c8		iny				iny
.94cc	b1 36		lda ($36),y			lda 	(zTemp0),y
.94ce	29 7f		and #$7f			and 	#$7F
.94d0	20 92 95	jsr $9592			jsr 	LCLLowerCase
.94d3	20 64 95	jsr $9564			jsr 	LCLWrite
.94d6	b1 36		lda ($36),y			lda 	(zTemp0),y				 	; ends when bit 7 set.
.94d8	10 f1		bpl $94cb			bpl 	_LCOutIdentifier
.94da	7a		ply				ply 								; restore position
.94db	80 9d		bra $947a			bra 	_LCMainLoop
.94dd					_LCTokens:
.94dd	aa		tax				tax 								; token in X
.94de	a9 dc		lda #$dc			lda 	#((KeywordSet2) & $FF)
.94e0	85 36		sta $36				sta 	0+zTemp0
.94e2	a9 a5		lda #$a5			lda 	#((KeywordSet2) >> 8)
.94e4	85 37		sta $37				sta 	1+zTemp0
.94e6	e0 82		cpx #$82			cpx 	#$82
.94e8	f0 16		beq $9500			beq 	_LCUseShift
.94ea	a9 87		lda #$87			lda 	#((KeywordSet1) & $FF)
.94ec	85 36		sta $36				sta 	0+zTemp0
.94ee	a9 a5		lda #$a5			lda 	#((KeywordSet1) >> 8)
.94f0	85 37		sta $37				sta 	1+zTemp0
.94f2	e0 81		cpx #$81			cpx 	#$81
.94f4	f0 0a		beq $9500			beq 	_LCUseShift
.94f6	a9 ec		lda #$ec			lda 	#((KeywordSet0) & $FF)
.94f8	85 36		sta $36				sta 	0+zTemp0
.94fa	a9 a3		lda #$a3			lda 	#((KeywordSet0) >> 8)
.94fc	85 37		sta $37				sta 	1+zTemp0
.94fe	80 01		bra $9501			bra 	_LCNoShift
.9500					_LCUseShift:
.9500	c8		iny				iny
.9501					_LCNoShift:
.9501	20 73 95	jsr $9573			jsr 	LCCheckSpaceRequired 		; do we need a space ?
.9504	b1 30		lda ($30),y			lda 	(codePtr),y
.9506	aa		tax				tax 								; into X
.9507					_LCFindText:
.9507	ca		dex				dex
.9508	10 0e		bpl $9518			bpl 	_LCFoundText 				; found text.
.950a	b2 36		lda ($36)			lda 	(zTemp0) 					; length of text
.950c	1a		inc a				inc 	a 							; one extra for size
.950d	38		sec				sec 								; one extra for checksum
.950e	65 36		adc $36				adc 	zTemp0 						; go to next token
.9510	85 36		sta $36				sta 	zTemp0
.9512	90 f3		bcc $9507			bcc 	_LCFindText
.9514	e6 37		inc $37				inc 	zTemp0+1
.9516	80 ef		bra $9507			bra 	_LCFindText
.9518					_LCFoundText:
.9518	5a		phy				phy 								; save List position
.9519	b2 36		lda ($36)			lda 	(zTemp0)					; count to print
.951b	aa		tax				tax
.951c	a0 02		ldy #$02			ldy 	#2
.951e					_LCCopyToken:
.951e	b1 36		lda ($36),y			lda 	(zTemp0),y
.9520	20 92 95	jsr $9592			jsr 	LCLLowerCase
.9523	20 64 95	jsr $9564			jsr 	LCLWrite
.9526	c8		iny				iny
.9527	ca		dex				dex
.9528	d0 f4		bne $951e			bne 	_LCCopyToken
.952a	c9 28		cmp #$28			cmp 	#"(" 						; if last char not ( print a space
.952c	f0 05		beq $9533			beq 	_LCNoSpace
.952e	a9 20		lda #$20			lda 	#' '
.9530	20 64 95	jsr $9564			jsr 	LCLWrite
.9533					_LCNoSpace:
.9533	7a		ply				ply 								; restore position.
.9534	c8		iny				iny 								; consume token
.9535	4c 7a 94	jmp $947a			jmp 	_LCMainLoop 				; and go around again.
.9538					_LCData:
.9538	48		pha				pha 								; save type $FE/$FF
.9539	a2 24		ldx #$24			ldx 	#'$' 						; figure out $ or "
.953b	c9 fe		cmp #$fe			cmp 	#$FE
.953d	f0 02		beq $9541			beq 	_LCHaveOpener
.953f	a2 22		ldx #$22			ldx 	#'"'
.9541					_LCHaveOpener:
.9541	8a		txa				txa 								; output prefix (# or ")
.9542	20 64 95	jsr $9564			jsr 	LCLWrite
.9545	c8		iny				iny 								; get count
.9546	b1 30		lda ($30),y			lda 	(codePtr),y
.9548	aa		tax				tax
.9549	c8		iny				iny 								; point at first character
.954a					_LCOutData:
.954a	b1 30		lda ($30),y			lda 	(codePtr),y
.954c	c9 00		cmp #$00			cmp 	#0
.954e	f0 03		beq $9553			beq 	_LCNoPrint
.9550	20 64 95	jsr $9564			jsr 	LCLWrite
.9553					_LCNoPrint:
.9553	c8		iny				iny
.9554	ca		dex				dex
.9555	d0 f3		bne $954a			bne 	_LCOutData
.9557	68		pla				pla 								; closing " required ?
.9558	c9 ff		cmp #$ff			cmp 	#$FF
.955a	d0 05		bne $9561			bne 	_LCNoQuote
.955c	a9 22		lda #$22			lda 	#'"'
.955e	20 64 95	jsr $9564			jsr 	LCLWrite
.9561					_LCNoQuote:
.9561	4c 7a 94	jmp $947a			jmp 	_LCMainLoop
.9564					LCLWrite:
.9564	da		phx				phx
.9565	ae 9d 04	ldx $049d			ldx 	tbOffset
.9568	9d a9 04	sta $04a9,x			sta 	tokenBuffer,x
.956b	9e aa 04	stz $04aa,x			stz 	tokenBuffer+1,x
.956e	ee 9d 04	inc $049d			inc 	tbOffset
.9571	fa		plx				plx
.9572	60		rts				rts
.9573					LCCheckSpaceRequired:
.9573	ae 9d 04	ldx $049d			ldx 	tbOffset
.9576	bd a8 04	lda $04a8,x			lda 	tokenBuffer-1,x 			; previous character
.9579	20 92 95	jsr $9592			jsr 	LCLLowerCase 				; saves a little effort
.957c	c9 30		cmp #$30			cmp 	#"0" 						; check if it was 0-9 A-Z a-z if so need space.
.957e	90 11		bcc $9591			bcc 	_LCCSRExit
.9580	c9 3a		cmp #$3a			cmp 	#"9"+1
.9582	90 08		bcc $958c			bcc 	_LCCSRSpace
.9584	c9 61		cmp #$61			cmp 	#"a"
.9586	90 09		bcc $9591			bcc 	_LCCSRExit
.9588	c9 7b		cmp #$7b			cmp 	#"z"+1
.958a	b0 05		bcs $9591			bcs 	_LCCSRExit
.958c					_LCCSRSpace:
.958c	a9 20		lda #$20			lda 	#' '
.958e	20 64 95	jsr $9564			jsr 	LCLWrite
.9591					_LCCSRExit:
.9591	60		rts				rts
.9592					LCLLowerCase:
.9592	c9 41		cmp #$41			cmp 	#"A"
.9594	90 06		bcc $959c			bcc 	_LCLLCOut
.9596	c9 5b		cmp #$5b			cmp 	#"Z"+1
.9598	b0 02		bcs $959c			bcs 	_LCLLCOut
.959a	69 20		adc #$20			adc 	#$20
.959c					_LCLLCOut:
.959c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/procscan.asm

.959d					ProcedureScan:
.959d	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.959f	85 30		sta $30				sta 	codePtr
.95a1	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.95a3	85 31		sta $31				sta 	codePtr+1
.95a5					_PSLoop:
.95a5	b2 30		lda ($30)			lda 	(codePtr)
.95a7	f0 42		beq $95eb			beq 	_PSExit
.95a9	a0 03		ldy #$03			ldy 	#3 							; is it PROC ?
.95ab	b1 30		lda ($30),y			lda 	(codePtr),y
.95ad	c9 9d		cmp #$9d			cmp 	#KWD_PROC
.95af	d0 2d		bne $95de			bne 	_PSNext
.95b1	c8		iny				iny 								; get the address of the record to zTemp0 and
.95b2	b1 30		lda ($30),y			lda 	(codePtr),y
.95b4	29 c0		and #$c0			and 	#$C0
.95b6	c9 40		cmp #$40			cmp 	#$40
.95b8	d0 32		bne $95ec			bne 	_PSSyntax
.95ba	b1 30		lda ($30),y			lda 	(codePtr),y
.95bc	18		clc				clc
.95bd	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.95bf	85 37		sta $37				sta 	zTemp0+1
.95c1	c8		iny				iny 								; LSB
.95c2	b1 30		lda ($30),y			lda 	(codePtr),y
.95c4	85 36		sta $36				sta 	zTemp0
.95c6	c8		iny				iny 								; character after variable call.
.95c7	98		tya				tya 								; save Y offset at +7
.95c8	a0 07		ldy #$07			ldy 	#7
.95ca	91 36		sta ($36),y			sta 	(zTemp0),y
.95cc	a9 18		lda #$18			lda 	#NSTProcedure 				; mark it as procedure
.95ce	a0 02		ldy #$02			ldy 	#2
.95d0	91 36		sta ($36),y			sta 	(zTemp0),y
.95d2	a2 00		ldx #$00			ldx 	#0 							; copy code-Ptr in
.95d4					_PSCopy:
.95d4	b5 30		lda $30,x			lda 	safePtr,x
.95d6	c8		iny				iny
.95d7	91 36		sta ($36),y			sta 	(zTemp0),y
.95d9	e8		inx				inx
.95da	e0 04		cpx #$04			cpx 	#4
.95dc	d0 f6		bne $95d4			bne 	_PSCopy
.95de					_PSNext:
.95de	18		clc				clc
.95df	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.95e1	65 30		adc $30				adc 	codePtr
.95e3	85 30		sta $30				sta 	codePtr
.95e5	90 02		bcc $95e9			bcc 	_CREExit
.95e7	e6 31		inc $31				inc 	codePtr+1
.95e9					_CREExit:
.95e9	80 ba		bra $95a5			bra 	_PSLoop
.95eb					_PSExit:
.95eb	60		rts				rts
.95ec					_PSSyntax:
.95ec	4c 16 b0	jmp $b016			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/scanforward.asm

.95ef					ScanForward:
.95ef	85 36		sta $36				sta 	zTemp0 						; save XA as the two possible matches.
.95f1	86 37		stx $37				stx 	zTemp0+1
.95f3	64 38		stz $38				stz 	zTemp1 						; this is the structure count - goes up with WHILE/FOR
.95f5					_ScanLoop:
.95f5	b1 30		lda ($30),y			lda 	(codePtr),y
.95f7	c8		iny				iny
.95f8	a6 38		ldx $38				ldx 	zTemp1 						; if the count is > 0 cannot match as in substructure
.95fa	d0 0e		bne $960a			bne 	_ScanGoNext
.95fc	c5 36		cmp $36				cmp 	zTemp0 						; see if either matches
.95fe	f0 04		beq $9604			beq 	_ScanMatch
.9600	c5 37		cmp $37				cmp 	zTemp0+1
.9602	d0 06		bne $960a			bne 	_ScanGoNext
.9604					_ScanMatch:
.9604	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if asked for EOL, backtrack.
.9606	d0 01		bne $9609			bne 	_ScanNotEndEOL
.9608	88		dey				dey
.9609					_ScanNotEndEOL:
.9609	60		rts				rts
.960a					_ScanGoNext:
.960a	c9 40		cmp #$40			cmp 	#$40 						; if 00-3F, punctuation characters, loop back
.960c	90 e7		bcc $95f5			bcc 	_ScanLoop
.960e	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if 40-82, skip one extra.
.9610	90 18		bcc $962a			bcc 	_ScanSkipOne
.9612	c9 fc		cmp #$fc			cmp 	#$FC 						; FC-FF are data skips
.9614	b0 2f		bcs $9645			bcs 	_ScanSkipData
.9616	c9 9b		cmp #$9b			cmp 	#KWC_FIRST_STRUCTURE 		; structure keyword ?
.9618	90 db		bcc $95f5			bcc 	_ScanLoop 					; if not, ordinary keywords.
.961a	c9 a6		cmp #$a6			cmp 	#KWC_LAST_STRUCTURE+1
.961c	b0 d7		bcs $95f5			bcs 	_ScanLoop
.961e	c6 38		dec $38				dec 	zTemp1 						; decrement the sructure count
.9620	c9 a0		cmp #$a0			cmp 	#KWC_FIRST_STRUCTURE_DEC 	; back if it is a dec structure (e.g. WEND/NEXT)
.9622	b0 d1		bcs $95f5			bcs 	_ScanLoop
.9624	e6 38		inc $38				inc 	zTemp1 						; so it's an increment structure
.9626	e6 38		inc $38				inc 	zTemp1 						; twice to undo the dec
.9628	80 cb		bra $95f5			bra 	_ScanLoop
.962a					_ScanSkipOne:
.962a	c8		iny				iny 								; consume the extra one.
.962b	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if not EOL loop back
.962d	d0 c6		bne $95f5			bne 	_ScanLoop
.962f	18		clc				clc
.9630	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.9632	65 30		adc $30				adc 	codePtr
.9634	85 30		sta $30				sta 	codePtr
.9636	90 02		bcc $963a			bcc 	_CREExit
.9638	e6 31		inc $31				inc 	codePtr+1
.963a					_CREExit:
.963a	a0 03		ldy #$03			ldy 	#3 							; scan start position.
.963c	b2 30		lda ($30)			lda 	(codePtr)
.963e	d0 b5		bne $95f5			bne 	_ScanLoop 					; if not zero, more to scan
.9640	a9 13		lda #$13		lda	#19
.9642	4c 7d 96	jmp $967d		jmp	ErrorHandler
.9645					_ScanSkipData:
.9645	88		dey				dey 								; point at data token
.9646	c8		iny				iny
.9647	98		tya				tya
.9648	38		sec				sec
.9649	71 30		adc ($30),y			adc 	(codePtr),y
.964b	a8		tay				tay
.964c	80 a7		bra $95f5			bra 	_ScanLoop

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/while.asm

.964e					Command_WHILE:
.964e	5a		phy				phy 								; save position of the test
.964f	a2 00		ldx #$00			ldx 	#0
.9651	20 89 a1	jsr $a189			jsr 	EvaluateNumber 				; work out the number
.9654	20 65 a2	jsr $a265			jsr 	NSMIsZero 					; check if zero
.9657	f0 0e		beq $9667			beq 	_WHExitLoop 				; if so exit the loop
.9659	98		tya				tya 								; position *after* test.
.965a	7a		ply				ply 								; restore position before test, at WHILE
.965b	88		dey				dey
.965c	48		pha				pha 								; push after test on the stack
.965d	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; allocate 6 bytes on the return stack.
.965f	20 e9 a2	jsr $a2e9			jsr 	StackOpen
.9662	20 2d a3	jsr $a32d			jsr 	STKSaveCodePosition 		; save loop position - where the test value is.
.9665	7a		ply				ply 								; restore the position *after* the test
.9666	60		rts				rts
.9667					_WHExitLoop:
.9667	68		pla				pla 								; throw post loop position
.9668	a9 a5		lda #$a5			lda 	#KWD_WEND 					; scan forward past WEND
.966a	aa		tax				tax
.966b	20 ef 95	jsr $95ef			jsr 	ScanForward
.966e	60		rts				rts
.966f					Command_WEND:
.966f	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; check WHILE is TOS
.9671	a2 10		ldx #$10			ldx 	#ERRID_WHILE 				; this error
.9673	20 15 a3	jsr $a315			jsr 	StackCheckFrame
.9676	20 3e a3	jsr $a33e			jsr 	STKLoadCodePosition 		; loop back
.9679	20 07 a3	jsr $a307			jsr 	StackClose		 			; erase the frame
.967c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/charcheck.asm

.aa30					CheckRightBracket:
.aa30	b1 30		lda ($30),y			lda 	(codePtr),y
.aa32	c8		iny				iny
.aa33	c9 29		cmp #$29			cmp 	#KWD_RPAREN 						; exit if matches
.aa35	d0 0f		bne $aa46			bne 	CNAFail
.aa37	60		rts				rts
.aa38					CheckComma:
.aa38	b1 30		lda ($30),y			lda 	(codePtr),y
.aa3a	c8		iny				iny
.aa3b	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 						; exit if matches
.aa3d	d0 07		bne $aa46			bne 	CNAFail
.aa3f	60		rts				rts
.aa40					CheckNextA:
.aa40	d1 30		cmp ($30),y			cmp 	(codePtr),y
.aa42	d0 02		bne $aa46			bne 	CNAFail
.aa44	c8		iny				iny 								; skip character
.aa45	60		rts				rts 								; and exit
.aa46					CNAFail:
.aa46	4c 16 b0	jmp $b016			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/errors.asm

.967d					ErrorHandler:
.967d	a8		tay				tay 								; find the error text
.967e	f0 49		beq $96c9			beq 	_EHEnd
.9680	a2 00		ldx #$00			ldx 	#0
.9682	a9 2f		lda #$2f			lda 	#((ErrorText) & $FF)
.9684	85 36		sta $36				sta 	0+zTemp0
.9686	a9 b0		lda #$b0			lda 	#((ErrorText) >> 8)
.9688	85 37		sta $37				sta 	1+zTemp0
.968a					_EHFind:
.968a	88		dey				dey 								; found the error text ?
.968b	f0 0e		beq $969b			beq 	_EHFound
.968d					_EHFindZero:
.968d	b2 36		lda ($36)			lda 	(zTemp0) 					; find the next error
.968f	e6 36		inc $36				inc 	zTemp0
.9691	d0 02		bne $9695			bne 	_EHFNoCarry
.9693	e6 37		inc $37				inc 	zTemp0+1
.9695					_EHFNoCarry:
.9695	c9 00		cmp #$00			cmp 	#0
.9697	d0 f4		bne $968d			bne 	_EHFindZero
.9699	80 ef		bra $968a			bra 	_EHFind
.969b					_EHFound:
.969b	a5 36		lda $36				lda 	zTemp0 						; print message
.969d	a6 37		ldx $37				ldx 	zTemp0+1
.969f	20 d6 96	jsr $96d6			jsr 	PrintStringXA
.96a2	a0 01		ldy #$01			ldy 	#1 							; if line number zero don't print i
.96a4	b1 30		lda ($30),y			lda 	(codePtr),y
.96a6	d0 05		bne $96ad			bne 	_EHAtMsg
.96a8	c8		iny				iny
.96a9	b1 30		lda ($30),y			lda 	(codePtr),y
.96ab	f0 17		beq $96c4			beq 	_EHCREnd
.96ad					_EHAtMsg:
.96ad	a2 96		ldx #$96			ldx 	#_AtMsg >> 8 				; print " at "
.96af	a9 cc		lda #$cc			lda 	#_AtMsg & $FF
.96b1	20 d6 96	jsr $96d6			jsr 	PrintStringXA
.96b4	a0 01		ldy #$01			ldy 	#1 							; line number into XA
.96b6	b1 30		lda ($30),y			lda 	(codePtr),y
.96b8	48		pha				pha
.96b9	c8		iny				iny
.96ba	b1 30		lda ($30),y			lda 	(codePtr),y
.96bc	aa		tax				tax
.96bd	68		pla				pla
.96be	20 8c ab	jsr $ab8c			jsr 	ConvertInt16 				; convert XA to string
.96c1	20 d6 96	jsr $96d6			jsr 	PrintStringXA 				; and print it.
.96c4					_EHCREnd:
.96c4	a9 0d		lda #$0d			lda 	#13 						; new line
.96c6	20 c9 b1	jsr $b1c9			jsr 	EXTPrintCharacter
.96c9					_EHEnd:
.96c9	4c bf 8b	jmp $8bbf			jmp 	WarmStart
>96cc	20 61 74 20 6c 69 6e 65		_AtMsg:	.text 	" at line ",0
>96d4	20 00
.96d6					PrintStringXA:
.96d6	5a		phy				phy
.96d7	86 37		stx $37				stx 	zTemp0+1
.96d9	85 36		sta $36				sta 	zTemp0
.96db	a0 00		ldy #$00			ldy 	#0
.96dd					_PSXALoop:
.96dd	b1 36		lda ($36),y			lda 	(zTemp0),y
.96df	f0 06		beq $96e7			beq 	_PSXAExit
.96e1	20 c9 b1	jsr $b1c9			jsr 	EXTPrintCharacter
.96e4	c8		iny				iny
.96e5	80 f6		bra $96dd			bra 	_PSXALoop
.96e7					_PSXAExit:
.96e7	7a		ply				ply
.96e8	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/compare.asm

.96e9					UnaryTrue:
.96e9	fa		plx				plx
.96ea					ReturnTrue:
.96ea	a9 01		lda #$01			lda 	#1  						; set to 1
.96ec	20 37 a2	jsr $a237			jsr 	NSMSetByte
.96ef	a9 80		lda #$80			lda 	#$80 						; set sign flag, so it is -1
.96f1	9d 00 04	sta $0400,x			sta 	NSStatus,x
.96f4	60		rts				rts
.96f5					UnaryFalse:
.96f5	fa		plx				plx
.96f6					ReturnFalse:
.96f6	4c 35 a2	jmp $a235			jmp 	NSMSetZero 					; set it all to zero
.96f9					BinaryCompareEqual:
.96f9	fa		plx				plx
.96fa	20 35 97	jsr $9735			jsr 	CompareBaseCode
.96fd	c9 00		cmp #$00			cmp 	#0
.96ff	f0 e9		beq $96ea			beq 	ReturnTrue
.9701	80 f3		bra $96f6			bra 	ReturnFalse
.9703					BinaryCompareLess:
.9703	fa		plx				plx
.9704	20 35 97	jsr $9735			jsr 	CompareBaseCode
.9707	c9 ff		cmp #$ff			cmp 	#$FF
.9709	f0 df		beq $96ea			beq 	ReturnTrue
.970b	80 e9		bra $96f6			bra 	ReturnFalse
.970d					BinaryCompareGreater:
.970d	fa		plx				plx
.970e	20 35 97	jsr $9735			jsr 	CompareBaseCode
.9711	c9 01		cmp #$01			cmp 	#1
.9713	f0 d5		beq $96ea			beq 	ReturnTrue
.9715	80 df		bra $96f6			bra 	ReturnFalse
.9717					BinaryCompareNotEqual:
.9717	fa		plx				plx
.9718	20 35 97	jsr $9735			jsr 	CompareBaseCode
.971b	c9 00		cmp #$00			cmp 	#0
.971d	d0 cb		bne $96ea			bne 	ReturnTrue
.971f	80 d5		bra $96f6			bra 	ReturnFalse
.9721					BinaryCompareLessEqual:
.9721	fa		plx				plx
.9722	20 35 97	jsr $9735			jsr 	CompareBaseCode
.9725	c9 01		cmp #$01			cmp 	#1
.9727	d0 c1		bne $96ea			bne 	ReturnTrue
.9729	80 cb		bra $96f6			bra 	ReturnFalse
.972b					BinaryCompareGreaterEqual:
.972b	fa		plx				plx
.972c	20 35 97	jsr $9735			jsr 	CompareBaseCode
.972f	c9 ff		cmp #$ff			cmp 	#$FF
.9731	d0 b7		bne $96ea			bne 	ReturnTrue
.9733	80 c1		bra $96f6			bra 	ReturnFalse
.9735					CompareBaseCode:
.9735	20 96 9b	jsr $9b96			jsr 	DereferenceTopTwo 			; make both values if references.
.9738	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if either is a string.
.973b	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.973e	29 10		and #$10			and 	#NSTString
.9740	d0 40		bne $9782			bne 	_CBCString
.9742	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check both are integers
.9745	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9748	d0 3b		bne $9785			bne 	_CBCFloat
.974a	bd 00 04	lda $0400,x			lda 	NSStatus,x
.974d	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9750	29 08		and #$08			and 	#NSTFloat
.9752	d0 31		bne $9785			bne 	_CBCFloat
.9754	20 88 97	jsr $9788			jsr 	CompareFixMinusZero
.9757	e8		inx				inx
.9758	20 88 97	jsr $9788			jsr 	CompareFixMinusZero
.975b	ca		dex				dex
.975c	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; are the signs different ?
.975f	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.9762	10 0b		bpl $976f			bpl 	_CDCSameSign
.9764	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; if first one is -ve
.9767	30 16		bmi $977f			bmi 	_CBCLess 					; return $FF
.9769					_CBCGreater:
.9769	a9 01		lda #$01			lda 	#1
.976b	60		rts				rts
.976c					_CBCEqual:
.976c	a9 00		lda #$00			lda 	#0
.976e	60		rts				rts
.976f					_CDCSameSign:
.976f	20 98 98	jsr $9898			jsr 	SubTopTwoStack 				; unsigned subtract
.9772	20 65 a2	jsr $a265			jsr 	NSMIsZero 					; or the mantissa together
.9775	f0 f5		beq $976c			beq 	_CBCEqual 					; -0 == 0
.9777	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; sign of the result. if +ve return $01 else return $FF
.977a	5d 01 04	eor $0401,x			eor 	NSStatus+1,x 				; however if both were -ve this is inverted
.977d	10 ea		bpl $9769			bpl 	_CBCGreater
.977f					_CBCLess:
.977f	a9 ff		lda #$ff			lda 	#$FF
.9781	60		rts				rts
.9782					_CBCString:
.9782	4c ee 97	jmp $97ee			jmp 	CompareStrings
.9785					_CBCFloat:
.9785	4c 88 ac	jmp $ac88			jmp 	CompareFloat
.9788					CompareFixMinusZero:
.9788	20 65 a2	jsr $a265			jsr 	NSMIsZero
.978b	d0 03		bne $9790			bne 	_CFXMZNotZero
.978d	9e 00 04	stz $0400,x			stz 	NSStatus,x
.9790					_CFXMZNotZero:
.9790	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/concat.asm

.9791					StringConcat:
.9791	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check both strings
.9794	3d 01 04	and $0401,x			and 	NSStatus+1,x
.9797	29 18		and #$18			and 	#NSBTypeMask
.9799	c9 10		cmp #$10			cmp 	#NSTString
.979b	d0 4e		bne $97eb			bne		_SCType
.979d	64 38		stz $38				stz 	zTemp1 						; counting total length
.979f	e8		inx				inx
.97a0	20 be 97	jsr $97be			jsr 	_SCSetupZ0 					; setup for second
.97a3	20 c9 97	jsr $97c9			jsr 	_SCLengthZ0 				; length for second
.97a6	ca		dex				dex
.97a7	20 be 97	jsr $97be			jsr 	_SCSetupZ0 					; setup for first
.97aa	20 c9 97	jsr $97c9			jsr 	_SCLengthZ0 				; length for first
.97ad	a5 38		lda $38				lda 	zTemp1 						; allocate memory
.97af	20 4b b3	jsr $b34b			jsr 	StringTempAllocate
.97b2	20 dc 97	jsr $97dc			jsr 	_SCCopy 					; copy first out, using zTemp0 from above
.97b5	e8		inx				inx
.97b6	20 be 97	jsr $97be			jsr 	_SCSetupZ0 					; copy second out
.97b9	20 dc 97	jsr $97dc			jsr 	_SCCopy
.97bc	ca		dex				dex
.97bd	60		rts				rts
.97be					_SCSetupZ0:
.97be	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.97c1	85 36		sta $36				sta 	zTemp0
.97c3	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.97c6	85 37		sta $37				sta 	zTemp0+1
.97c8	60		rts				rts
.97c9					_SCLengthZ0:
.97c9	5a		phy				phy
.97ca	a0 00		ldy #$00			ldy 	#0
.97cc					_SCLenLoop:
.97cc	b1 36		lda ($36),y			lda 	(zTemp0),y
.97ce	f0 0a		beq $97da			beq 	_SCLExit
.97d0	c8		iny				iny
.97d1	e6 38		inc $38				inc 	zTemp1
.97d3	10 f7		bpl $97cc			bpl		_SCLenLoop
.97d5	a9 09		lda #$09		lda	#9
.97d7	4c 7d 96	jmp $967d		jmp	ErrorHandler
.97da					_SCLExit:
.97da	7a		ply				ply
.97db	60		rts				rts
.97dc					_SCCopy:
.97dc	5a		phy				phy
.97dd	a0 00		ldy #$00			ldy 	#0
.97df					_SCCopyLoop:
.97df	b1 36		lda ($36),y			lda 	(zTemp0),y
.97e1	f0 06		beq $97e9			beq 	_SCCExit
.97e3	20 89 b3	jsr $b389			jsr 	StringTempWrite
.97e6	c8		iny				iny
.97e7	80 f6		bra $97df			bra 	_SCCopyLoop
.97e9					_SCCExit:
.97e9	7a		ply				ply
.97ea	60		rts				rts
.97eb					_SCType:
.97eb	4c 20 b0	jmp $b020			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/divide.asm

.aa49					IntegerDivide:
.aa49	fa		plx				plx
.aa4a	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.aa4d	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.aa50	0a		asl a				asl 	a 							; shift reference bit into sign bit
.aa51	0a		asl a				asl 	a
.aa52	10 05		bpl $aa59			bpl 	_NotRef
.aa54	48		pha				pha
.aa55	20 96 9b	jsr $9b96			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.aa58	68		pla				pla
.aa59					_NotRef:
.aa59	0a		asl a				asl 	a
.aa5a	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.aa5c	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.aa5f	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.aa62	f0 03		beq $aa67			beq 	_IntegerCode 				; if clear, then we have two integers
.aa64	4c 20 b0	jmp $b020			jmp 	TypeError 					; anything else, type mismatch.
.aa67					_IntegerCode:
.aa67	20 89 aa	jsr $aa89			jsr 	CheckDivideZero 			; do div zero check
.aa6a	20 c1 aa	jsr $aac1			jsr 	Int32Divide 				; do the division
.aa6d	20 7e ab	jsr $ab7e			jsr 	CalculateSign 				; calculate result sign
.aa70					NSMCopyPlusTwoToZero:
.aa70	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.aa73	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.aa76	bd 12 04	lda $0412,x			lda 	NSMantissa1+2,x
.aa79	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.aa7c	bd 1a 04	lda $041a,x			lda 	NSMantissa2+2,x
.aa7f	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.aa82	bd 22 04	lda $0422,x			lda 	NSMantissa3+2,x
.aa85	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.aa88	60		rts				rts
.aa89					CheckDivideZero:
.aa89	e8		inx				inx
.aa8a	20 65 a2	jsr $a265			jsr 	NSMIsZero
.aa8d	f0 02		beq $aa91			beq 	_CDVError
.aa8f	ca		dex				dex
.aa90	60		rts				rts
.aa91					_CDVError:
.aa91	a9 03		lda #$03		lda	#3
.aa93	4c 7d 96	jmp $967d		jmp	ErrorHandler
.aa96					IntegerModulus:
.aa96	fa		plx				plx
.aa97	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.aa9a	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.aa9d	0a		asl a				asl 	a 							; shift reference bit into sign bit
.aa9e	0a		asl a				asl 	a
.aa9f	10 05		bpl $aaa6			bpl 	_NotRef
.aaa1	48		pha				pha
.aaa2	20 96 9b	jsr $9b96			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.aaa5	68		pla				pla
.aaa6					_NotRef:
.aaa6	0a		asl a				asl 	a
.aaa7	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.aaa9	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.aaac	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.aaaf	f0 03		beq $aab4			beq 	_IntegerCode 				; if clear, then we have two integers
.aab1	4c 20 b0	jmp $b020			jmp 	TypeError 					; anything else, type mismatch.
.aab4					_IntegerCode:
.aab4					IntegerModulusNoCheck:
.aab4	20 89 aa	jsr $aa89			jsr 	CheckDivideZero 			; do div zero check
.aab7	20 c1 aa	jsr $aac1			jsr 	Int32Divide 				; do the division
.aaba	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; clear the sign bit.
.aabd	5e 00 04	lsr $0400,x			lsr 	NSStatus,x
.aac0	60		rts				rts
.aac1					Int32Divide:
.aac1	48		pha				pha 								; save AXY
.aac2	5a		phy				phy
.aac3	20 0c a2	jsr $a20c			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.aac6	20 31 a2	jsr $a231			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.aac9	a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.aacb					_I32DivideLoop:
.aacb	e8		inx				inx
.aacc	e8		inx				inx
.aacd	20 4a a2	jsr $a24a			jsr 	NSMShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.aad0	ca		dex				dex
.aad1	ca		dex				dex
.aad2	20 4b a2	jsr $a24b			jsr 	NSMRotateLeft
.aad5	20 01 ab	jsr $ab01			jsr 	DivideCheckSubtract 		; check if subtract possible
.aad8	90 03		bcc $aadd			bcc 	_I32DivideNoCarryIn
.aada	fe 0a 04	inc $040a,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.aadd					_I32DivideNoCarryIn:
.aadd	88		dey				dey 								; loop round till division completed.
.aade	d0 eb		bne $aacb			bne 	_I32DivideLoop
.aae0	7a		ply				ply 								; restore AXY and exit
.aae1	68		pla				pla
.aae2	60		rts				rts
.aae3					Int32ShiftDivide:
.aae3	48		pha				pha 								; save AY
.aae4	5a		phy				phy
.aae5	e8		inx				inx 								; clear S[X+2]
.aae6	e8		inx				inx
.aae7	20 35 a2	jsr $a235			jsr 	NSMSetZero
.aaea	ca		dex				dex
.aaeb	ca		dex				dex
.aaec	a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.aaee					_I32SDLoop:
.aaee	20 01 ab	jsr $ab01			jsr 	DivideCheckSubtract 		; check if subtract possible
.aaf1	e8		inx				inx
.aaf2	e8		inx				inx
.aaf3	20 4b a2	jsr $a24b			jsr 	NSMRotateLeft				; shift 64 bit FPA left, rotating carry in
.aaf6	ca		dex				dex
.aaf7	ca		dex				dex
.aaf8	20 4b a2	jsr $a24b			jsr 	NSMRotateLeft
.aafb	88		dey				dey 	 							; do 31 times
.aafc	d0 f0		bne $aaee			bne 	_I32SDLoop
.aafe	7a		ply				ply 								; restore AY and exit
.aaff	68		pla				pla
.ab00	60		rts				rts
.ab01					DivideCheckSubtract:
.ab01	20 98 98	jsr $9898			jsr 	SubTopTwoStack 				; subtract Stack[X+1] from Stack[X+0]
.ab04	b0 04		bcs $ab0a			bcs 	_DCSExit 					; if carry set, then could do, exit
.ab06	20 72 98	jsr $9872			jsr 	AddTopTwoStack 				; add it back in
.ab09	18		clc				clc 								; and return False
.ab0a					_DCSExit:
.ab0a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/multiply.asm

.ab0b					MulInteger:
.ab0b	fa		plx				plx
.ab0c	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.ab0f	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.ab12	0a		asl a				asl 	a 							; shift reference bit into sign bit
.ab13	0a		asl a				asl 	a
.ab14	10 05		bpl $ab1b			bpl 	_NotRef
.ab16	48		pha				pha
.ab17	20 96 9b	jsr $9b96			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.ab1a	68		pla				pla
.ab1b					_NotRef:
.ab1b	0a		asl a				asl 	a 							; put MSB of type into A:7
.ab1c	30 0b		bmi $ab29			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.ab1e	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.ab21	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.ab24	f0 06		beq $ab2c			beq 	_IntegerCode 				; if clear, then we have two integers
.ab26	4c 5f ad	jmp $ad5f			jmp 	FloatingPointMultiply 							; otherwise at least one float.
.ab29					_StringData:
.ab29	4c 2a b0	jmp $b02a			jmp 	NotDoneError							; at least one string - don't know both are strings.
.ab2c					_IntegerCode:
.ab2c	20 39 ab	jsr $ab39			jsr 	MultiplyShort
.ab2f	c9 00		cmp #$00			cmp 	#0
.ab31	f0 05		beq $ab38			beq 	_MIExit
.ab33	a9 04		lda #$04		lda	#4
.ab35	4c 7d 96	jmp $967d		jmp	ErrorHandler
.ab38					_MIExit:
.ab38	60		rts				rts
.ab39					MultiplyShort:
.ab39	5a		phy				phy 								; save Y
.ab3a	20 0c a2	jsr $a20c			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.ab3d	20 31 a2	jsr $a231			jsr 	NSMSetZeroMantissaOnly 		; set mantissa S[X] to zero
.ab40	a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.ab42					_I32MLoop:
.ab42	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.ab45	1d 12 04	ora $0412,x			ora 	NSMantissa1+2,x
.ab48	1d 1a 04	ora $041a,x			ora 	NSMantissa2+2,x
.ab4b	1d 22 04	ora $0422,x			ora 	NSMantissa3+2,x
.ab4e	f0 28		beq $ab78			beq 	_I32MExit 					; exit if zero
.ab50	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.ab53	29 01		and #$01			and 	#1
.ab55	f0 0e		beq $ab65			beq 	_I32MNoAdd
.ab57	20 72 98	jsr $9872			jsr 	AddTopTwoStack 				; if so add S[X+1] to S[X+0]
.ab5a	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.ab5d	10 06		bpl $ab65			bpl 	_I32MNoAdd
.ab5f					_I32ShiftRight:
.ab5f	20 58 a2	jsr $a258			jsr 	NSMShiftRight 				; shift S[X] right
.ab62	c8		iny				iny 								; increment shift count
.ab63	80 0a		bra $ab6f			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.ab65					_I32MNoAdd:
.ab65	3c 21 04	bit $0421,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.ab68	70 f5		bvs $ab5f			bvs 	_I32ShiftRight 				; instead.
.ab6a	e8		inx				inx
.ab6b	20 4a a2	jsr $a24a			jsr 	NSMShiftLeft 				; shift additive S[X+1] left
.ab6e	ca		dex				dex
.ab6f					_I32MShiftUpper:
.ab6f	e8		inx				inx 								; shift S[X+2] right
.ab70	e8		inx				inx
.ab71	20 58 a2	jsr $a258			jsr 	NSMShiftRight
.ab74	ca		dex				dex
.ab75	ca		dex				dex
.ab76	80 ca		bra $ab42			bra 	_I32MLoop 					; try again.
.ab78					_I32MExit:
.ab78	20 7e ab	jsr $ab7e			jsr 	CalculateSign
.ab7b	98		tya				tya 								; shift in A
.ab7c	7a		ply				ply 								; restore Y and exit
.ab7d	60		rts				rts
.ab7e					CalculateSign:
.ab7e	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.ab81	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; shift result left
.ab84	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.ab87	0a		asl a				asl 	a 							; shift bit 7 into carry
.ab88	7e 00 04	ror $0400,x			ror 	NSStatus,x 					; shift right into status byte.
.ab8b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/scompare.asm

.97ee					CompareStrings:
.97ee	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check both are strings
.97f1	3d 01 04	and $0401,x			and 	NSStatus+1,x
.97f4	29 10		and #$10			and 	#NSBIsString
.97f6	f0 2c		beq $9824			beq 	_CSTypeError
.97f8	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy string addresses to zTemp0/1
.97fb	85 36		sta $36				sta 	zTemp0
.97fd	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9800	85 37		sta $37				sta 	zTemp0+1
.9802	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.9805	85 38		sta $38				sta 	zTemp1
.9807	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.980a	85 39		sta $39				sta 	zTemp1+1
.980c	5a		phy				phy 								; save Y so we can access strings
.980d	a0 ff		ldy #$ff			ldy 	#$FF 						; -1 for pre increment.
.980f					_CSLoop:
.980f	c8		iny				iny
.9810	b1 36		lda ($36),y			lda 	(zTemp0),y 					; check if they are the same
.9812	d1 38		cmp ($38),y			cmp 	(zTemp1),y
.9814	d0 06		bne $981c			bne 	_CSDifferent
.9816	c9 00		cmp #$00			cmp 	#0 							; reached end ?
.9818	d0 f5		bne $980f			bne 	_CSLoop 					; still comparing
.981a					_CSExit:
.981a	7a		ply				ply 								; reached end, return zero in A from EOS
.981b	60		rts				rts
.981c					_CSDifferent:
.981c	a9 ff		lda #$ff			lda 	#255 						; if < return $FF
.981e	90 fa		bcc $981a			bcc		_CSExit
.9820	a9 01		lda #$01			lda 	#1 							; otherwise return 1.
.9822	80 f6		bra $981a			bra 	_CSExit
.9824					_CSTypeError:
.9824	4c 20 b0	jmp $b020			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/shifts.asm

.9827					ShiftLeft:
.9827	38		sec				sec
.9828	80 01		bra $982b			bra 	ShiftMain
.982a					ShiftRight:
.982a	18		clc				clc
.982b					ShiftMain:
.982b	fa		plx				plx 								; restore X
.982c	08		php				php 								; save direction
.982d	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9830	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9833	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9834	0a		asl a				asl 	a
.9835	10 05		bpl $983c			bpl 	_NotRef
.9837	48		pha				pha
.9838	20 96 9b	jsr $9b96			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.983b	68		pla				pla
.983c					_NotRef:
.983c	0a		asl a				asl 	a
.983d	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.983f	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9842	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9845	f0 03		beq $984a			beq 	_IntegerCode 				; if clear, then we have two integers
.9847	4c 20 b0	jmp $b020			jmp 	TypeError 					; anything else, type mismatch.
.984a					_IntegerCode:
.984a	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; check number < 32
.984d	29 e0		and #$e0			and 	#$E0
.984f	1d 11 04	ora $0411,x			ora 	NSMantissa1+1,x
.9852	1d 19 04	ora $0419,x			ora 	NSMantissa2+1,x
.9855	1d 21 04	ora $0421,x			ora 	NSMantissa3+1,x
.9858	d0 13		bne $986d			bne 	_SMExit0 					; if >= 32 it will always return zero.
.985a					_SMLoop:
.985a	de 09 04	dec $0409,x			dec 	NSMantissa0+1,x 			; predecrement, could do << 0
.985d	30 11		bmi $9870			bmi 	_SMExit 					; exit if done.
.985f	28		plp				plp 								; restore direcition setting
.9860	08		php				php
.9861	90 05		bcc $9868			bcc 	_SMRight
.9863	20 4a a2	jsr $a24a			jsr 	NSMShiftLeft 				; shift left if CS
.9866	80 f2		bra $985a			bra 	_SMLoop
.9868					_SMRight:
.9868	20 58 a2	jsr $a258			jsr 	NSMShiftRight 				; shift right if CC
.986b	80 ed		bra $985a			bra 	_SMLoop
.986d					_SMExit0:
.986d	20 35 a2	jsr $a235			jsr 	NSMSetZero 					; return zero.
.9870					_SMExit:
.9870	28		plp				plp 								; throw direction
.9871	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/simple.asm

.9872					AddTopTwoStack:
.9872	18		clc				clc
.9873	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9876	7d 09 04	adc $0409,x			adc 		NSMantissa0+1,x
.9879	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.987c	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.987f	7d 11 04	adc $0411,x			adc 		NSMantissa1+1,x
.9882	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9885	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9888	7d 19 04	adc $0419,x			adc 		NSMantissa2+1,x
.988b	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.988e	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9891	7d 21 04	adc $0421,x			adc 		NSMantissa3+1,x
.9894	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9897	60		rts				rts
.9898					SubTopTwoStack:
.9898	38		sec				sec
.9899	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.989c	fd 09 04	sbc $0409,x			sbc 		NSMantissa0+1,x
.989f	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.98a2	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.98a5	fd 11 04	sbc $0411,x			sbc 		NSMantissa1+1,x
.98a8	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.98ab	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.98ae	fd 19 04	sbc $0419,x			sbc 		NSMantissa2+1,x
.98b1	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.98b4	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.98b7	fd 21 04	sbc $0421,x			sbc 		NSMantissa3+1,x
.98ba	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.98bd	60		rts				rts
.98be					AddInteger:
.98be	fa		plx				plx
.98bf	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.98c2	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.98c5	0a		asl a				asl 	a 							; shift reference bit into sign bit
.98c6	0a		asl a				asl 	a
.98c7	10 05		bpl $98ce			bpl 	_NotRef
.98c9	48		pha				pha
.98ca	20 96 9b	jsr $9b96			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.98cd	68		pla				pla
.98ce					_NotRef:
.98ce	0a		asl a				asl 	a 							; put MSB of type into A:7
.98cf	30 0b		bmi $98dc			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.98d1	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.98d4	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.98d7	f0 06		beq $98df			beq 	_IntegerCode 				; if clear, then we have two integers
.98d9	4c e7 ab	jmp $abe7			jmp 	FloatingPointAdd 							; otherwise at least one float.
.98dc					_StringData:
.98dc	4c 91 97	jmp $9791			jmp 	StringConcat							; at least one string - don't know both are strings.
.98df					_IntegerCode:
.98df					AddCode:
.98df	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.98e2	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.98e5	10 8b		bpl $9872			bpl 	AddTopTwoStack
.98e7	20 98 98	jsr $9898			jsr 	SubTopTwoStack 				; do a physical subtraction
.98ea	3c 20 04	bit $0420,x			bit 	NSMantissa3,x 				; result is +ve, okay
.98ed	10 09		bpl $98f8			bpl 	_AddExit
.98ef	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; sign is that of 2nd value
.98f2	9d 00 04	sta $0400,x			sta 	NSStatus,x
.98f5	20 ea a1	jsr $a1ea			jsr 	NSMNegateMantissa 			; negate the mantissa and exit
.98f8					_AddExit:
.98f8	60		rts				rts
.98f9					SubInteger:
.98f9	fa		plx				plx
.98fa	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.98fd	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9900	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9901	0a		asl a				asl 	a
.9902	10 05		bpl $9909			bpl 	_NotRef
.9904	48		pha				pha
.9905	20 96 9b	jsr $9b96			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9908	68		pla				pla
.9909					_NotRef:
.9909	0a		asl a				asl 	a 							; put MSB of type into A:7
.990a	30 0b		bmi $9917			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.990c	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.990f	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9912	f0 06		beq $991a			beq 	_IntegerCode 				; if clear, then we have two integers
.9914	4c ec ab	jmp $abec			jmp 	FloatingPointSub 							; otherwise at least one float.
.9917					_StringData:
.9917	4c 2a b0	jmp $b02a			jmp 	NotDoneError							; at least one string - don't know both are strings.
.991a					_IntegerCode:
.991a	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; negate the second value.
.991d	49 80		eor #$80			eor 	#$80
.991f	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.9922	80 bb		bra $98df			bra 	AddCode 					; and do the same code as add.
.9924					AndInteger:
.9924	fa		plx				plx
.9925	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9928	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.992b	0a		asl a				asl 	a 							; shift reference bit into sign bit
.992c	0a		asl a				asl 	a
.992d	10 05		bpl $9934			bpl 	_NotRef
.992f	48		pha				pha
.9930	20 96 9b	jsr $9b96			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9933	68		pla				pla
.9934					_NotRef:
.9934	0a		asl a				asl 	a
.9935	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9937	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.993a	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.993d	f0 03		beq $9942			beq 	_IntegerCode 				; if clear, then we have two integers
.993f	4c 20 b0	jmp $b020			jmp 	TypeError 					; anything else, type mismatch.
.9942					_IntegerCode:
.9942	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9945	3d 09 04	and $0409,x			and 		NSMantissa0+1,x
.9948	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.994b	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.994e	3d 11 04	and $0411,x			and 		NSMantissa1+1,x
.9951	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9954	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9957	3d 19 04	and $0419,x			and 		NSMantissa2+1,x
.995a	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.995d	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9960	3d 21 04	and $0421,x			and 		NSMantissa3+1,x
.9963	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9966	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.9969	60		rts				rts
.996a					OraInteger:
.996a	fa		plx				plx
.996b	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.996e	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9971	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9972	0a		asl a				asl 	a
.9973	10 05		bpl $997a			bpl 	_NotRef
.9975	48		pha				pha
.9976	20 96 9b	jsr $9b96			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9979	68		pla				pla
.997a					_NotRef:
.997a	0a		asl a				asl 	a
.997b	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.997d	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9980	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9983	f0 03		beq $9988			beq 	_IntegerCode 				; if clear, then we have two integers
.9985	4c 20 b0	jmp $b020			jmp 	TypeError 					; anything else, type mismatch.
.9988					_IntegerCode:
.9988	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.998b	1d 09 04	ora $0409,x			ora 		NSMantissa0+1,x
.998e	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9991	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9994	1d 11 04	ora $0411,x			ora 		NSMantissa1+1,x
.9997	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.999a	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.999d	1d 19 04	ora $0419,x			ora 		NSMantissa2+1,x
.99a0	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.99a3	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.99a6	1d 21 04	ora $0421,x			ora 		NSMantissa3+1,x
.99a9	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.99ac	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.99af	60		rts				rts
.99b0					EorInteger:
.99b0	fa		plx				plx
.99b1	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.99b4	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.99b7	0a		asl a				asl 	a 							; shift reference bit into sign bit
.99b8	0a		asl a				asl 	a
.99b9	10 05		bpl $99c0			bpl 	_NotRef
.99bb	48		pha				pha
.99bc	20 96 9b	jsr $9b96			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.99bf	68		pla				pla
.99c0					_NotRef:
.99c0	0a		asl a				asl 	a
.99c1	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.99c3	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.99c6	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.99c9	f0 03		beq $99ce			beq 	_IntegerCode 				; if clear, then we have two integers
.99cb	4c 20 b0	jmp $b020			jmp 	TypeError 					; anything else, type mismatch.
.99ce					_IntegerCode:
.99ce	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.99d1	5d 09 04	eor $0409,x			eor 		NSMantissa0+1,x
.99d4	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.99d7	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.99da	5d 11 04	eor $0411,x			eor 		NSMantissa1+1,x
.99dd	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.99e0	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.99e3	5d 19 04	eor $0419,x			eor 		NSMantissa2+1,x
.99e6	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.99e9	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.99ec	5d 21 04	eor $0421,x			eor 		NSMantissa3+1,x
.99ef	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.99f2	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.99f5	60		rts				rts
.99f6					WordIndirect:
.99f6	fa		plx				plx
.99f7	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.99fa	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.99fd	0a		asl a				asl 	a 							; shift reference bit into sign bit
.99fe	0a		asl a				asl 	a
.99ff	10 05		bpl $9a06			bpl 	_NotRef
.9a01	48		pha				pha
.9a02	20 96 9b	jsr $9b96			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9a05	68		pla				pla
.9a06					_NotRef:
.9a06	0a		asl a				asl 	a
.9a07	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9a09	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9a0c	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9a0f	f0 03		beq $9a14			beq 	_IntegerCode 				; if clear, then we have two integers
.9a11	4c 20 b0	jmp $b020			jmp 	TypeError 					; anything else, type mismatch.
.9a14					_IntegerCode:
.9a14	20 df 98	jsr $98df			jsr 	AddCode 					; add the two values
.9a17	a9 22		lda #$22			lda 	#NSBIsReference+2 			; make a 2 byte reference
.9a19	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9a1c	60		rts				rts
.9a1d					ByteIndirect:
.9a1d	fa		plx				plx
.9a1e	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9a21	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9a24	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9a25	0a		asl a				asl 	a
.9a26	10 05		bpl $9a2d			bpl 	_NotRef
.9a28	48		pha				pha
.9a29	20 96 9b	jsr $9b96			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9a2c	68		pla				pla
.9a2d					_NotRef:
.9a2d	0a		asl a				asl 	a
.9a2e	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9a30	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9a33	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9a36	f0 03		beq $9a3b			beq 	_IntegerCode 				; if clear, then we have two integers
.9a38	4c 20 b0	jmp $b020			jmp 	TypeError 					; anything else, type mismatch.
.9a3b					_IntegerCode:
.9a3b	20 df 98	jsr $98df			jsr 	AddCode 					; add the two values
.9a3e	a9 21		lda #$21			lda 	#NSBIsReference+1 			; make a 1 byte reference
.9a40	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9a43	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/tostring.asm

.ab8c					ConvertInt16:
.ab8c	8d 08 04	sta $0408			sta 	NSMantissa0 				; set up as 32 bit conversion
.ab8f	8e 10 04	stx $0410			stx 	NSMantissa1
.ab92	9c 18 04	stz $0418			stz 	NSMantissa2
.ab95	9c 20 04	stz $0420			stz 	NSMantissa3
.ab98	9c 00 04	stz $0400			stz 	NSStatus 					; positive integer
.ab9b	a2 00		ldx #$00			ldx 	#0 							; stack level
.ab9d	a9 0a		lda #$0a			lda 	#10 						; base
.ab9f	80 00		bra $aba1			bra 	ConvertInt32
.aba1					ConvertInt32:
.aba1	5a		phy				phy
.aba2	a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.aba4	2c 00 04	bit $0400			bit 	NSStatus 					; output a - if not negative.
.aba7	10 08		bpl $abb1			bpl 	_CI32NotNeg
.aba9	48		pha				pha
.abaa	a9 2d		lda #$2d			lda 	#'-'
.abac	99 f7 05	sta $05f7,y			sta 	NumberBuffer,y
.abaf	c8		iny				iny
.abb0	68		pla				pla
.abb1					_CI32NotNeg:
.abb1	20 bf ab	jsr $abbf			jsr 	_CI32DivideConvert 			; recursive conversion
.abb4	a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.abb6	99 f7 05	sta $05f7,y			sta 	NumberBuffer,y
.abb9	7a		ply				ply
.abba	a2 05		ldx #$05			ldx 	#NumberBuffer >> 8
.abbc	a9 f7		lda #$f7			lda 	#NumberBuffer & $FF
.abbe	60		rts				rts
.abbf					_CI32DivideConvert:
.abbf	e8		inx				inx 								; write to next slot up
.abc0	20 37 a2	jsr $a237			jsr 	NSMSetByte
.abc3	ca		dex				dex
.abc4	20 c1 aa	jsr $aac1			jsr 	Int32Divide 				; divide
.abc7	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; save remainder
.abca	48		pha				pha
.abcb	20 70 aa	jsr $aa70			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.abce	20 65 a2	jsr $a265			jsr 	NSMIsZero 					; is it zero ?
.abd1	f0 06		beq $abd9			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.abd3	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.abd6	20 bf ab	jsr $abbf			jsr 	_CI32DivideConvert 			; and recusrively call.
.abd9					_CI32NoRecurse:
.abd9	68		pla				pla 								; remainder
.abda	c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII
.abdc	90 02		bcc $abe0			bcc 	_CI32NotHex
.abde	69 26		adc #$26			adc 	#6+32
.abe0					_CI32NotHex:
.abe0	69 30		adc #$30			adc 	#48
.abe2	99 f7 05	sta $05f7,y			sta 	NumberBuffer,y 				; write out and exit
.abe5	c8		iny				iny
.abe6	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/expression.asm


;******  Processing file: ./common/expressions/../generated/precedence.dat

.9a44					PrecedenceLevel:
>9a44	04					.byte	 4	; $00 <<
>9a45	02					.byte	 2	; $01 <=
>9a46	02					.byte	 2	; $02 <>
>9a47	00					.byte	 0	; $03 !!3
>9a48	00					.byte	 0	; $04 ><
>9a49	02					.byte	 2	; $05 >=
>9a4a	04					.byte	 4	; $06 >>
>9a4b	00					.byte	 0	; $07 !!7
>9a4c	00					.byte	 0	; $08 !!8
>9a4d	00					.byte	 0	; $09 !!9
>9a4e	00					.byte	 0	; $0a !!10
>9a4f	00					.byte	 0	; $0b !!11
>9a50	00					.byte	 0	; $0c !!12
>9a51	00					.byte	 0	; $0d !!13
>9a52	00					.byte	 0	; $0e !!14
>9a53	00					.byte	 0	; $0f !!15
>9a54	00					.byte	 0	; $10 @
>9a55	00					.byte	 0	; $11 !!17
>9a56	00					.byte	 0	; $12 !!18
>9a57	00					.byte	 0	; $13 [
>9a58	04					.byte	 4	; $14 \
>9a59	00					.byte	 0	; $15 ]
>9a5a	01					.byte	 1	; $16 ^
>9a5b	00					.byte	 0	; $17 _
>9a5c	00					.byte	 0	; $18 `
>9a5d	00					.byte	 0	; $19 !!25
>9a5e	00					.byte	 0	; $1a !!26
>9a5f	00					.byte	 0	; $1b {
>9a60	01					.byte	 1	; $1c |
>9a61	00					.byte	 0	; $1d }
>9a62	00					.byte	 0	; $1e ~
>9a63	00					.byte	 0	; $1f [7m<7F>[m
>9a64	00					.byte	 0	; $20
>9a65	05					.byte	 5	; $21 !
>9a66	00					.byte	 0	; $22 "
>9a67	00					.byte	 0	; $23 #
>9a68	05					.byte	 5	; $24 $
>9a69	04					.byte	 4	; $25 %
>9a6a	01					.byte	 1	; $26 &
>9a6b	00					.byte	 0	; $27 '
>9a6c	00					.byte	 0	; $28 (
>9a6d	00					.byte	 0	; $29 )
>9a6e	04					.byte	 4	; $2a *
>9a6f	03					.byte	 3	; $2b +
>9a70	00					.byte	 0	; $2c ,
>9a71	03					.byte	 3	; $2d -
>9a72	00					.byte	 0	; $2e .
>9a73	04					.byte	 4	; $2f /
>9a74	00					.byte	 0	; $30 0
>9a75	00					.byte	 0	; $31 1
>9a76	00					.byte	 0	; $32 2
>9a77	00					.byte	 0	; $33 3
>9a78	00					.byte	 0	; $34 4
>9a79	00					.byte	 0	; $35 5
>9a7a	00					.byte	 0	; $36 6
>9a7b	00					.byte	 0	; $37 7
>9a7c	00					.byte	 0	; $38 8
>9a7d	00					.byte	 0	; $39 9
>9a7e	00					.byte	 0	; $3a :
>9a7f	00					.byte	 0	; $3b ;
>9a80	02					.byte	 2	; $3c <
>9a81	02					.byte	 2	; $3d =
>9a82	02					.byte	 2	; $3e >
>9a83	05					.byte	 5	; $3f ?

;******  Return to file: ./common/expressions/expression.asm

.9a84					EvaluateExpressionAt0:
.9a84	a2 00		ldx #$00			ldx 	#0 							; bottom stack level
.9a86					EvaluateExpression:
.9a86	a9 00		lda #$00			lda 	#0 							; lowest precedence level
.9a88					EvaluateExpressionAtPrecedence:
.9a88	48		pha				pha 								; save precedence level
.9a89	20 57 9d	jsr $9d57			jsr 	EvaluateTerm 				; evaluate term into level X.
.9a8c	68		pla				pla 								; restore precedence level.
.9a8d					_EXPRLoop:
.9a8d	85 36		sta $36				sta 	zTemp0 						; save current precedence level.
.9a8f	b1 30		lda ($30),y			lda 	(codePtr),y
.9a91	c9 40		cmp #$40			cmp		#$40 						; if >= $40 cannot be an operator
.9a93	b0 25		bcs $9aba			bcs 	_EXPRExit
.9a95	da		phx				phx 								; read the operator precedence
.9a96	aa		tax				tax
.9a97	bd 44 9a	lda $9a44,x			lda 	PrecedenceLevel,x
.9a9a	fa		plx				plx
.9a9b	c9 00		cmp #$00			cmp 	#0							; if zero exit (not an operator)
.9a9d	f0 1b		beq $9aba			beq 	_EXPRExit
.9a9f	85 37		sta $37				sta 	zTemp0+1 					; save operator precedence level.
.9aa1	a5 36		lda $36				lda 	zTemp0 						; compare current precedence vs. operator precedence
.9aa3	c5 37		cmp $37				cmp 	zTemp0+1
.9aa5	b0 13		bcs $9aba			bcs		_EXPRExit 					; if current >= operator exit
.9aa7	48		pha				pha 								; save current precedence.
.9aa8	b1 30		lda ($30),y			lda 	(codePtr),y
.9aaa	c8		iny				iny
.9aab	48		pha				pha
.9aac	a5 37		lda $37				lda 	zTemp0+1 					; get operator precedence level
.9aae	e8		inx				inx 								; work out the right hand side.
.9aaf	20 88 9a	jsr $9a88			jsr 	EvaluateExpressionAtPrecedence
.9ab2	ca		dex				dex
.9ab3	68		pla				pla 								; get operator, call the code.
.9ab4	20 bd 9a	jsr $9abd			jsr 	_EXPRCaller
.9ab7	68		pla				pla 								; restore precedence level
.9ab8	80 d3		bra $9a8d			bra 	_EXPRLoop 					; and go round.
.9aba					_EXPRExit:
.9aba	a5 36		lda $36				lda 	zTemp0 						; A = current precedence level.
.9abc	60		rts				rts
.9abd					_EXPRCaller:
.9abd	da		phx				phx 								; save on stack, first thing is to restore it
.9abe	0a		asl a				asl 	a 							; double so can use vectors into X
.9abf	aa		tax				tax
.9ac0	7c a0 92	jmp ($92a0,x)			jmp 	(VectorSetPunc,x) 			; and go to the code.

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/addsub.asm

.abe7					FloatingPointAdd:
.abe7	20 88 ad	jsr $ad88			jsr 	FloatPrepare 				; prepare for floats
.abea	80 0b		bra $abf7			bra 	FloatAdd
.abec					FloatingPointSub:
.abec	20 88 ad	jsr $ad88			jsr 	FloatPrepare 				; prepare for floats
.abef					FloatSubtract:
.abef	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; negate FPB
.abf2	49 80		eor #$80			eor 	#$80
.abf4	9d 01 04	sta $0401,x			sta 	NSStatus+1,x				; and fall through.
.abf7					FloatAdd:
.abf7	48		pha				pha
.abf8	5a		phy				phy
.abf9	20 99 ad	jsr $ad99			jsr 	NSNormalise 				; normalise S[X]
.abfc	f0 54		beq $ac52			beq 	_FAReturn1
.abfe	e8		inx				inx 								; normalise S[X+1]
.abff	20 99 ad	jsr $ad99			jsr 	NSNormalise
.ac02	ca		dex				dex
.ac03	c9 00		cmp #$00			cmp 	#0
.ac05	f0 6f		beq $ac76			beq 	_FAExit 					; if so, just return A
.ac07	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; are the exponents the same ?
.ac0a	dd 29 04	cmp $0429,x			cmp 	NSExponent+1,x
.ac0d	f0 1b		beq $ac2a			beq 	_FAExponentsEqual
.ac0f	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; work out the larger exponent
.ac12	a8		tay				tay
.ac13	38		sec				sec 								; do a signed comparison of the exponents.
.ac14	fd 29 04	sbc $0429,x			sbc 	NSExponent+1,x
.ac17	50 02		bvc $ac1b			bvc 	_FANoSignedChange
.ac19	49 80		eor #$80			eor 	#$80
.ac1b					_FANoSignedChange:
.ac1b	29 80		and #$80			and 	#$80
.ac1d	10 03		bpl $ac22			bpl 	_FAHaveMax
.ac1f	bc 29 04	ldy $0429,x			ldy 	NSExponent+1,x
.ac22					_FAHaveMax:
.ac22	20 79 ac	jsr $ac79			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.ac25	e8		inx				inx
.ac26	20 79 ac	jsr $ac79			jsr 	_FAShiftToExponent
.ac29	ca		dex				dex
.ac2a					_FAExponentsEqual:
.ac2a	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; are the signs the same
.ac2d	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.ac30	30 10		bmi $ac42			bmi 	_FADifferentSigns
.ac32	20 72 98	jsr $9872			jsr 	AddTopTwoStack 				; do the add of the mantissae
.ac35	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.ac38	10 3c		bpl $ac76			bpl 	_FAExit 					; if no, we are done.
.ac3a	20 58 a2	jsr $a258			jsr 	NSMShiftRight 				; shift A right, renormalising it.
.ac3d	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; bump the exponent and exit
.ac40	80 34		bra $ac76			bra 	_FAExit
.ac42					_FADifferentSigns:
.ac42	20 98 98	jsr $9898			jsr 	SubTopTwoStack 				; subtract mantissa B from A
.ac45	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; is the result negative ?
.ac48	10 2c		bpl $ac76			bpl 	_FAExit 					; if no, we are done.
.ac4a	20 e1 a1	jsr $a1e1			jsr 	NSMNegate 					; netate result
.ac4d	20 ea a1	jsr $a1ea			jsr 	NSMNegateMantissa 			; negate (2'c) the mantissa
.ac50	80 24		bra $ac76			bra 	_FAExit
.ac52					_FAReturn1:
.ac52	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.ac55	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.ac58	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.ac5b	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.ac5e	bd 19 04	lda $0419,x			lda 	NSMantissa2+1,x
.ac61	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.ac64	bd 21 04	lda $0421,x			lda 	NSMantissa3+1,x
.ac67	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.ac6a	bd 29 04	lda $0429,x			lda 	NSExponent+1,x
.ac6d	9d 28 04	sta $0428,x			sta 	NSExponent,x
.ac70	bd 01 04	lda $0401,x			lda 	NSStatus+1,x
.ac73	9d 00 04	sta $0400,x			sta 	NSStatus,x
.ac76					_FAExit:
.ac76	7a		ply				ply
.ac77	68		pla				pla
.ac78	60		rts				rts
.ac79					_FAShiftToExponent:
.ac79					_FAShiftToExponent2:
.ac79	98		tya				tya 								; compare Y to exponent
.ac7a	dd 28 04	cmp $0428,x			cmp 	NSExponent,x 				; reached the exponent required ?
.ac7d	f0 08		beq $ac87			beq 	_FASEExit 					; exit if so.
.ac7f	20 58 a2	jsr $a258			jsr 	NSMShiftRight	 			; shift the mantissa right
.ac82	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; increment exponent
.ac85	80 f2		bra $ac79			bra 	_FAShiftToExponent2
.ac87					_FASEExit:
.ac87	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/compare.asm

.ac88					CompareFloat:
.ac88	20 ef ab	jsr $abef			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.ac8b	bd 10 04	lda $0410,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.ac8e	29 f8		and #$f8			and 	#$F8
.ac90	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.ac93	1d 20 04	ora $0420,x			ora 	NSMantissa3,x
.ac96	f0 09		beq $aca1			beq 	_FCExit 					; zero, so approximately identical
.ac98	a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.ac9a	3c 00 04	bit $0400,x			bit 	NSStatus,x
.ac9d	10 02		bpl $aca1			bpl 	_FCExit
.ac9f					_FCNegative:
.ac9f	a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.aca1					_FCExit:
.aca1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/divide.asm

.aca2					FDivideCommand:
.aca2	fa		plx				plx	 								; restore stack position
.aca3	20 88 ad	jsr $ad88			jsr 	FloatPrepare 				; prepare for floats
.aca6					FloatDivide:
.aca6	48		pha				pha
.aca7	e8		inx				inx
.aca8	20 99 ad	jsr $ad99			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.acab	ca		dex				dex
.acac	c9 00		cmp #$00			cmp 	#0
.acae	f0 20		beq $acd0			beq 	_FDZero
.acb0	20 99 ad	jsr $ad99			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.acb3	f0 19		beq $acce			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.acb5	20 e3 aa	jsr $aae3			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.acb8	20 70 aa	jsr $aa70			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.acbb	20 99 ad	jsr $ad99			jsr		NSNormalise 				; renormalise
.acbe	20 7e ab	jsr $ab7e			jsr 	CalculateSign 				; calculate result sign
.acc1	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; calculate exponent
.acc4	38		sec				sec
.acc5	fd 29 04	sbc $0429,x			sbc 	NSExponent+1,x
.acc8	38		sec				sec
.acc9	e9 1e		sbc #$1e			sbc 	#30
.accb	9d 28 04	sta $0428,x			sta 	NSExponent,x
.acce					_FDExit:
.acce	68		pla				pla
.accf	60		rts				rts
.acd0					_FDZero:
.acd0	a9 03		lda #$03		lda	#3
.acd2	4c 7d 96	jmp $967d		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/fractional.asm

.acd5					FloatFractionalPart:
.acd5	5a		phy				phy
.acd6	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; take absolute value
.acd9	29 7f		and #$7f			and 	#$7F
.acdb	9d 00 04	sta $0400,x			sta 	NSStatus,x
.acde	20 99 ad	jsr $ad99			jsr 	NSNormalise
.ace1	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.ace4	38		sec				sec
.ace5	e9 e0		sbc #$e0			sbc 	#$E0
.ace7	90 31		bcc $ad1a			bcc 	_FFPExit 					; already fractional
.ace9	c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.aceb	b0 2a		bcs $ad17			bcs 	_FFPZero
.aced	a8		tay				tay 								; put count to do in Y
.acee	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; do each in turn.
.acf1	20 1c ad	jsr $ad1c			jsr 	_FFPPartial
.acf4	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.acf7	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.acfa	20 1c ad	jsr $ad1c			jsr 	_FFPPartial
.acfd	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.ad00	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.ad03	20 1c ad	jsr $ad1c			jsr 	_FFPPartial
.ad06	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.ad09	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.ad0c	20 1c ad	jsr $ad1c			jsr 	_FFPPartial
.ad0f	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.ad12	20 65 a2	jsr $a265			jsr 	NSMIsZero 					; zeroed check.
.ad15	d0 03		bne $ad1a			bne 	_FFPExit
.ad17					_FFPZero:
.ad17	20 35 a2	jsr $a235			jsr 	NSMSetZero
.ad1a					_FFPExit:
.ad1a	7a		ply				ply
.ad1b	60		rts				rts
.ad1c					_FFPPartial:
.ad1c	c0 00		cpy #$00			cpy 	#0 							; no more to do
.ad1e	f0 17		beq $ad37			beq 	_FFFPPExit
.ad20	c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.ad22	b0 0c		bcs $ad30			bcs 	_FFFPPWholeByte
.ad24	5a		phy				phy
.ad25					_FFFPPLeft:
.ad25	0a		asl a				asl 	a
.ad26	88		dey				dey
.ad27	d0 fc		bne $ad25			bne 	_FFFPPLeft
.ad29	7a		ply				ply
.ad2a					_FFFPPRight:
.ad2a	4a		lsr a				lsr 	a
.ad2b	88		dey				dey
.ad2c	d0 fc		bne $ad2a			bne 	_FFFPPRight
.ad2e	80 07		bra $ad37			bra 	_FFFPPExit
.ad30					_FFFPPWholeByte:
.ad30	98		tya				tya 								; subtract 8 from count
.ad31	38		sec				sec
.ad32	e9 08		sbc #$08			sbc 	#8
.ad34	a8		tay				tay
.ad35	a9 00		lda #$00			lda 	#0 							; and clear all
.ad37					_FFFPPExit:
.ad37	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/integer.asm

.ad38					FloatIntegerPart:
.ad38	48		pha				pha
.ad39	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; is it integer already ?
.ad3c	f0 1f		beq $ad5d			beq 	_FIPExit 					; if so do nothing
.ad3e	20 65 a2	jsr $a265			jsr 	NSMIsZero 					; is it zero ?
.ad41	f0 17		beq $ad5a			beq 	_FIPZero 					; if so return zero.
.ad43	20 99 ad	jsr $ad99			jsr 	NSNormalise 				; normalise
.ad46	f0 12		beq $ad5a			beq 	_FIPZero 					; normalised to zero, exit zero
.ad48					_FIPShift:
.ad48	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.ad4b	10 08		bpl $ad55			bpl 	_FIPCheckZero
.ad4d	20 58 a2	jsr $a258			jsr 	NSMShiftRight 				; shift mantissa right
.ad50	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; bump exponent
.ad53	80 f3		bra $ad48			bra 	_FIPShift
.ad55					_FIPCheckZero:
.ad55	20 65 a2	jsr $a265			jsr 	NSMIsZero 					; avoid -0 problem
.ad58	d0 03		bne $ad5d			bne 	_FIPExit 					; set to zero if mantissa zero.
.ad5a					_FIPZero:
.ad5a	20 35 a2	jsr $a235			jsr 	NSMSetZero
.ad5d					_FIPExit:
.ad5d	68		pla				pla
.ad5e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/multiply.asm

.ad5f					FloatingPointMultiply:
.ad5f	20 88 ad	jsr $ad88			jsr 	FloatPrepare 				; prepare for floats
.ad62					FloatMultiply:
.ad62	48		pha				pha
.ad63	20 99 ad	jsr $ad99			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.ad66	f0 1b		beq $ad83			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.ad68	e8		inx				inx
.ad69	20 99 ad	jsr $ad99			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.ad6c	ca		dex				dex
.ad6d	c9 00		cmp #$00			cmp 	#0
.ad6f	f0 0f		beq $ad80			beq 	_FDSetZero
.ad71	20 39 ab	jsr $ab39			jsr 	MultiplyShort 				; calculate the result.
.ad74	7d 28 04	adc $0428,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.ad77	18		clc				clc
.ad78	7d 29 04	adc $0429,x			adc 	NSExponent+1,x
.ad7b	9d 28 04	sta $0428,x			sta 	NSExponent,x
.ad7e	80 03		bra $ad83			bra 	_FDExit
.ad80					_FDSetZero:
.ad80	20 35 a2	jsr $a235			jsr 	NSMSetZero 					; return 0
.ad83					_FDExit:
.ad83	20 99 ad	jsr $ad99			jsr 	NSNormalise 				; normalise the result
.ad86	68		pla				pla
.ad87	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/utility.asm

.ad88					FloatPrepare:
.ad88	20 96 9b	jsr $9b96			jsr 	DereferenceTopTwo 			; dereference the top two values
.ad8b	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check ints/floats
.ad8e	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.ad91	29 10		and #$10			and 	#NSBIsString
.ad93	d0 01		bne $ad96			bne 	_FDType
.ad95	60		rts				rts
.ad96					_FDType:
.ad96	4c 20 b0	jmp $b020			jmp 	TypeError
.ad99					NSNormalise:
.ad99	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; make float, keep sign
.ad9c	29 80		and #$80			and 	#$80
.ad9e	09 08		ora #$08			ora 	#NSTFloat
.ada0	9d 00 04	sta $0400,x			sta 	NSStatus,x
.ada3	20 65 a2	jsr $a265			jsr 	NSMIsZero 					; if zero exit
.ada6	d0 09		bne $adb1			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.ada8	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; clear the sign bit.
.adab	7e 00 04	ror $0400,x			ror 	NSStatus,x 					; (no -0)
.adae	a9 00		lda #$00			lda 	#0 							; set Z flag
.adb0	60		rts				rts
.adb1					_NSNormaliseOptimise:
.adb1	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; upper byte zero ?
.adb4	d0 22		bne $add8			bne 	_NSNormaliseLoop
.adb6	bd 18 04	lda $0418,x			lda 	NSMantissa2,x 				; byte normalise
.adb9	30 1d		bmi $add8			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.adbb	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.adbe	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.adc1	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.adc4	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.adc7	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.adca	9e 08 04	stz $0408,x			stz 	NSMantissa0,x
.adcd	bd 28 04	lda $0428,x			lda 	NSExponent,x
.add0	38		sec				sec
.add1	e9 08		sbc #$08			sbc 	#8
.add3	9d 28 04	sta $0428,x			sta 	NSExponent,x
.add6	80 d9		bra $adb1			bra 	_NSNormaliseOptimise
.add8					_NSNormaliseLoop:
.add8	3c 20 04	bit $0420,x			bit 	NSMantissa3,x 				; bit 30 set ?
.addb	70 08		bvs $ade5			bvs 	_NSNExit 					; exit if so with Z flag clear
.addd	20 4a a2	jsr $a24a			jsr 	NSMShiftLeft 				; shift mantissa left
.ade0	de 28 04	dec $0428,x			dec 	NSExponent,x 				; adjust exponent
.ade3	80 f3		bra $add8			bra 	_NSNormaliseLoop
.ade5					_NSNExit:
.ade5	a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.ade7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignnumber.asm

.9ac3					AssignNumber:
.9ac3	5a		phy				phy
.9ac4	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy mantissa0/1 to zTemp0
.9ac7	85 36		sta $36				sta 	zTemp0
.9ac9	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9acc	85 37		sta $37				sta 	zTemp0+1
.9ace	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; clear reference bits
.9ad1	29 df		and #$df			and 	#(NSBIsReference ^ $FF)
.9ad3	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9ad6	29 18		and #$18			and 	#NSBTypeMask				; assigning to a float ?
.9ad8	c9 08		cmp #$08			cmp 	#NSTFloat
.9ada	f0 2a		beq $9b06			beq 	_ANFloat
.9adc	bd 29 04	lda $0429,x			lda		NSExponent+1,x 				; is it a float
.9adf	f0 05		beq $9ae6			beq		_ANNotFloat
.9ae1	e8		inx				inx
.9ae2	20 38 ad	jsr $ad38			jsr 	FloatIntegerPart 			; make it an integer
.9ae5	ca		dex				dex
.9ae6					_ANNotFloat:
.9ae6	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if byte/word reference.
.9ae9	29 03		and #$03			and 	#3
.9aeb	d0 05		bne $9af2			bne 	_ANByteWord
.9aed	20 12 9b	jsr $9b12			jsr 	_ANCopy4PackSign 			; copy all 4 bytes and sign
.9af0	80 1e		bra $9b10			bra 	_ANExit
.9af2					_ANByteWord:
.9af2	48		pha				pha 								; save count
.9af3	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; do byte
.9af6	92 36		sta ($36)			sta 	(zTemp0)
.9af8	68		pla				pla
.9af9	c9 01		cmp #$01			cmp	 	#1
.9afb	f0 13		beq $9b10			beq 	_ANExit
.9afd	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x 			; do word
.9b00	a0 01		ldy #$01			ldy 	#1
.9b02	91 36		sta ($36),y			sta 	(zTemp0),y
.9b04	80 0a		bra $9b10			bra 	_ANExit
.9b06					_ANFloat:
.9b06	20 12 9b	jsr $9b12			jsr 	_ANCopy4PackSign 			; write all 4 bytes and packed sign
.9b09	bd 29 04	lda $0429,x			lda 	NSExponent+1,x 				; copy exponent to slot 4
.9b0c	a0 04		ldy #$04			ldy 	#4
.9b0e	91 36		sta ($36),y			sta 	(zTemp0),y
.9b10					_ANExit:
.9b10	7a		ply				ply
.9b11	60		rts				rts
.9b12					_ANCopy4PackSign:
.9b12	a0 03		ldy #$03			ldy 	#3
.9b14	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; sign bit into status
.9b17	29 80		and #$80			and 	#$80 						; put into high bit of mantissa 3
.9b19	1d 21 04	ora $0421,x			ora 	NSMantissa3+1,x
.9b1c	91 36		sta ($36),y			sta 	(zTemp0),y
.9b1e	88		dey				dey
.9b1f	bd 19 04	lda $0419,x			lda 	NSMantissa2+1,x
.9b22	91 36		sta ($36),y			sta 	(zTemp0),y
.9b24	88		dey				dey
.9b25	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9b28	91 36		sta ($36),y			sta 	(zTemp0),y
.9b2a	88		dey				dey
.9b2b	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.9b2e	91 36		sta ($36),y			sta 	(zTemp0),y
.9b30	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignstring.asm

.9b31					AssignString:
.9b31	5a		phy				phy
.9b32	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.9b35	85 38		sta $38				sta 	zTemp1
.9b37	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9b3a	85 39		sta $39				sta 	zTemp1+1
.9b3c	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9b3f	85 36		sta $36				sta 	zTemp0
.9b41	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9b44	85 37		sta $37				sta 	zTemp0+1
.9b46	a0 01		ldy #$01			ldy 	#1 							; the high byte of the target address
.9b48	b1 36		lda ($36),y			lda 	(zTemp0),y
.9b4a	f0 23		beq $9b6f			beq 	_ASNewStringRequired 		; if zero, a new string is required.
.9b4c	38		sec				sec 								; put Address-2 in zsTemp - this is the size/status/string record
.9b4d	b2 36		lda ($36)			lda 	(zTemp0) 					; of concreted strings
.9b4f	e9 02		sbc #$02			sbc 	#2
.9b51	85 3c		sta $3c				sta 	zsTemp
.9b53	a0 01		ldy #$01			ldy 	#1
.9b55	b1 36		lda ($36),y			lda 	(zTemp0),y
.9b57	e9 00		sbc #$00			sbc 	#0
.9b59	85 3d		sta $3d				sta 	zsTemp+1
.9b5b	a0 ff		ldy #$ff			ldy 	#$FF 						; get length of new string
.9b5d					_ASGetLength:
.9b5d	c8		iny				iny
.9b5e	b1 38		lda ($38),y			lda 	(zTemp1),y
.9b60	d0 fb		bne $9b5d			bne 	_ASGetLength
.9b62	98		tya				tya 								; is this length <= current length
.9b63	d2 3c		cmp ($3c)			cmp 	(zsTemp)
.9b65	90 20		bcc $9b87			bcc 	_ASCopyString
.9b67	f0 1e		beq $9b87			beq 	_ASCopyString
.9b69	a9 80		lda #$80			lda 	#$80 						; mark as unused.
.9b6b	a0 01		ldy #$01			ldy 	#1
.9b6d	91 3c		sta ($3c),y			sta 	(zsTemp),y
.9b6f					_ASNewStringRequired:
.9b6f	e8		inx				inx 								; concrete the new string.
.9b70	20 ca b2	jsr $b2ca			jsr 	StringConcrete				; (breaks zTemp1/2, not zTemp0 and zsTemp)
.9b73	ca		dex				dex
.9b74	18		clc				clc
.9b75	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; copy that new address to the reference.
.9b78	69 02		adc #$02			adc 	#2 							; add two to point at the data.
.9b7a	92 36		sta ($36)			sta 	(zTemp0)
.9b7c	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9b7f	69 00		adc #$00			adc 	#0
.9b81	a0 01		ldy #$01			ldy 	#1
.9b83	91 36		sta ($36),y			sta 	(zTemp0),y
.9b85	80 0d		bra $9b94			bra 	_ASExit
.9b87					_ASCopyString:
.9b87	a0 00		ldy #$00			ldy 	#0
.9b89					_ASCopyLoop:
.9b89	b1 38		lda ($38),y			lda 	(zTemp1),y
.9b8b	c8		iny				iny
.9b8c	c8		iny				iny
.9b8d	91 3c		sta ($3c),y			sta 	(zsTemp),y
.9b8f	88		dey				dey
.9b90	c9 00		cmp #$00			cmp 	#0
.9b92	d0 f5		bne $9b89			bne 	_ASCopyLoop
.9b94					_ASExit:
.9b94	7a		ply				ply
.9b95	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/dereference.asm

.9b96					DereferenceTopTwo:
.9b96	e8		inx				inx
.9b97	20 9b 9b	jsr $9b9b			jsr 	Dereference 				; deref x+1
.9b9a	ca		dex				dex  								; falls through to deref x
.9b9b					Dereference:
.9b9b	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get the status byte
.9b9e	29 20		and #$20			and 	#NSBIsReference 			; shift sign bit to carry, reference to bit 7
.9ba0	f0 57		beq $9bf9			beq 	_DRFExit 					; not a reference
.9ba2	5a		phy				phy
.9ba3	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address to dereference into zTemp0
.9ba6	85 36		sta $36				sta 	zTemp0
.9ba8	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9bab	85 37		sta $37				sta 	zTemp0+1
.9bad	9e 10 04	stz $0410,x			stz 	NSMantissa1,x 				; clear second byte.
.9bb0	b2 36		lda ($36)			lda 	(zTemp0) 					; do the first byte
.9bb2	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9bb5	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get status byte.
.9bb8	29 18		and #$18			and 	#NSBTypeMask 				; what type is it ?
.9bba	c9 10		cmp #$10			cmp 	#NSTString 					; if string, dereference two
.9bbc	f0 0f		beq $9bcd			beq 	_DRFDereferenceTwo
.9bbe	c9 08		cmp #$08			cmp 	#NSTFloat 					; if float, do full dereference.
.9bc0	f0 39		beq $9bfb			beq 	_DRFFull
.9bc2	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be integer - how many bytes ?
.9bc5	29 03		and #$03			and 	#3
.9bc7	f0 32		beq $9bfb			beq 	_DRFFull 					; the whole word
.9bc9	c9 01		cmp #$01			cmp 	#1 							; is it 10 (e.g. 2 bytes)
.9bcb	f0 07		beq $9bd4			beq		_DRFClear23 				; no, one byte, clear 2 & 3 and exit
.9bcd					_DRFDereferenceTwo:
.9bcd	a0 01		ldy #$01			ldy 	#1
.9bcf	b1 36		lda ($36),y			lda 	(zTemp0),y
.9bd1	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9bd4					_DRFClear23:
.9bd4	9e 18 04	stz $0418,x			stz 	NSMantissa2,x 				; clear upper bytes, only read 1 or 2 bytes
.9bd7	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.9bda	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; make it a value of that type.
.9bdd	29 18		and #$18			and 	#NSBTypeMask
.9bdf	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9be2	c9 10		cmp #$10			cmp 	#NSTString  				; is it a string
.9be4	d0 12		bne $9bf8			bne 	_DRFNotString
.9be6	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; check address is zero
.9be9	1d 10 04	ora $0410,x			ora 	NSMantissa1,x
.9bec	d0 0a		bne $9bf8			bne 	_DRFNotString
.9bee	a9 fa		lda #$fa			lda 	#_DRFNullString & $FF 		; if so, return reference to ""
.9bf0	9d 08 04	sta $0408,x			sta 	NSMantissa0,X
.9bf3	a9 9b		lda #$9b			lda 	#_DRFNullString >> 8
.9bf5	9d 10 04	sta $0410,x			sta 	NSMantissa1,X
.9bf8					_DRFNotString
.9bf8	7a		ply				ply 								; restore Y and exit
.9bf9					_DRFExit:
.9bf9	60		rts				rts
.9bfa					_DRFNullString:
>9bfa	00						.byte 	0
.9bfb					_DRFFull:
.9bfb	a0 01		ldy #$01			ldy 	#1 							; get remaining 3 bytes.
.9bfd	b1 36		lda ($36),y			lda 	(zTemp0),y
.9bff	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9c02	c8		iny				iny
.9c03	b1 36		lda ($36),y			lda 	(zTemp0),y
.9c05	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9c08	c8		iny				iny
.9c09	b1 36		lda ($36),y			lda 	(zTemp0),y
.9c0b	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9c0e	9e 28 04	stz $0428,x			stz 	NSExponent,x 				; clear exponent.
.9c11	bd 00 04	lda $0400,x			lda		NSStatus,x 					; see if type is integer
.9c14	29 18		and #$18			and 	#NSBTypeMask  				; type information only
.9c16	9d 00 04	sta $0400,x			sta 	NSStatus,x 					; update it back.
.9c19	f0 06		beq $9c21			beq 	_DRFNoExponent
.9c1b	c8		iny				iny 								; if not, read the exponent as well.
.9c1c	b1 36		lda ($36),y			lda 	(zTemp0),y
.9c1e	9d 28 04	sta $0428,x			sta 	NSExponent,x
.9c21					_DRFNoExponent:
.9c21	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; is the most significant bit set ?
.9c24	10 0d		bpl $9c33			bpl 	_DRFExit2 					; if not, then exit.
.9c26	29 7f		and #$7f			and 	#$7F 						; clear that bit.
.9c28	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9c2b	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; set the sign flag
.9c2e	09 80		ora #$80			ora 	#NSBIsNegative
.9c30	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9c33					_DRFExit2:
.9c33	7a		ply				ply
.9c34	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/number.asm

=1					ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2					ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3					ESTA_Decimal = 3 							; fractional part.
.9c35					EncodeNumberStart:
.9c35	38		sec				sec
.9c36	80 01		bra $9c39			bra 	EncodeNumberContinue+1
.9c38					EncodeNumberContinue:
.9c38	18		clc				clc
.9c39					EncodeNumber:
.9c39	08		php				php 								; save reset.
.9c3a	c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.9c3c	f0 12		beq $9c50			beq 	_ENIsOkay
.9c3e	c9 30		cmp #$30			cmp 	#"0"
.9c40	90 04		bcc $9c46			bcc 	_ENBadNumber
.9c42	c9 3a		cmp #$3a			cmp 	#"9"+1
.9c44	90 0a		bcc $9c50			bcc 	_ENIsOkay
.9c46					_ENBadNumber:
.9c46	28		plp				plp 								; throw saved reset
.9c47	ad 85 04	lda $0485			lda 	EncodeState 				; decimal mode, construct final number
.9c4a	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.9c4c	f0 7e		beq $9ccc			beq 	_ENConstructFinal
.9c4e					_ENFail:
.9c4e	18		clc				clc 								; not allowed
.9c4f	60		rts				rts
.9c50					_ENIsOkay:
.9c50	28		plp				plp 								; are we restarting
.9c51	90 15		bcc $9c68			bcc 	_ENNoRestart
.9c53					_ENStartEncode:
.9c53	c9 2e		cmp #$2e			cmp 	#'.'						; first is DP
.9c55	f0 0c		beq $9c63			beq 	_ENFirstDP
.9c57	29 0f		and #$0f			and 	#15 						; put digit in mantissa
.9c59	20 37 a2	jsr $a237			jsr 	NSMSetByte
.9c5c	a9 01		lda #$01			lda 	#ESTA_Low
.9c5e					_ENExitChange:
.9c5e	8d 85 04	sta $0485			sta 	EncodeState 				; save new state
.9c61	38		sec				sec
.9c62	60		rts				rts
.9c63					_ENFirstDP:
.9c63	20 35 a2	jsr $a235			jsr 	NSMSetZero 					; clear integer part
.9c66	80 3f		bra $9ca7			bra 	_ESTASwitchFloat			; go straight to float and exi
.9c68					_ENNoRestart:
.9c68	48		pha				pha 								; save on stack.
.9c69	ad 85 04	lda $0485			lda 	EncodeState 				; get current state
.9c6c	c9 01		cmp #$01			cmp 	#ESTA_Low
.9c6e	f0 09		beq $9c79			beq  	_ESTALowState
.9c70	c9 02		cmp #$02			cmp 	#ESTA_High
.9c72	f0 29		beq $9c9d			beq 	_ESTAHighState
.9c74	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.9c76	f0 3b		beq $9cb3			beq 	_ESTADecimalState
>9c78	db						.byte 	$DB 						; causes a break in the emulator
.9c79					_ESTALowState:
.9c79	68		pla				pla 								; get value back
.9c7a	c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.9c7c	f0 29		beq $9ca7			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.9c7e	29 0f		and #$0f			and 	#15 						; make digit
.9c80	8d 86 04	sta $0486			sta 	DigitTemp 					; save it.
.9c83	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.9c86	0a		asl a				asl 	a
.9c87	0a		asl a				asl 	a
.9c88	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.9c8b	0a		asl a				asl 	a
.9c8c	6d 86 04	adc $0486			adc 	DigitTemp
.9c8f	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9c92	c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.9c94	90 05		bcc $9c9b			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.9c96	a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.9c98	8d 85 04	sta $0485			sta 	EncodeState
.9c9b					_ESTANoSwitch:
.9c9b	38		sec				sec
.9c9c	60		rts				rts
.9c9d					_ESTAHighState:
.9c9d	68		pla				pla 								; get value back
.9c9e	c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.9ca0	f0 05		beq $9ca7			beq 	_ESTASwitchFloat
.9ca2	20 06 9d	jsr $9d06			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.9ca5	38		sec				sec
.9ca6	60		rts				rts
.9ca7					_ESTASwitchFloat:
.9ca7	9c 87 04	stz $0487			stz 	DecimalCount
.9caa	e8		inx				inx 								; zero the decimal additive.
.9cab	20 35 a2	jsr $a235			jsr 	NSMSetZero
.9cae	ca		dex				dex
.9caf	a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.9cb1	80 ab		bra $9c5e			bra 	_ENExitChange
.9cb3					_ESTADecimalState:
.9cb3	68		pla				pla 								; digit.
.9cb4	c9 2e		cmp #$2e			cmp 	#"." 						; fail on 2nd decimal point.
.9cb6	f0 96		beq $9c4e			beq 	_ENFail
.9cb8	e8		inx				inx 								; put digit into fractional part of X+1
.9cb9	20 06 9d	jsr $9d06			jsr 	ESTAShiftDigitIntoMantissa
.9cbc	ca		dex				dex
.9cbd	ee 87 04	inc $0487			inc 	DecimalCount 				; bump the count of decimals
.9cc0	ad 87 04	lda $0487			lda 	DecimalCount
.9cc3	c9 0b		cmp #$0b			cmp 	#11
.9cc5	f0 02		beq $9cc9			beq 	_ESTADSFail
.9cc7	38		sec				sec
.9cc8	60		rts				rts
.9cc9					_ESTADSFail:
.9cc9	4c 1b b0	jmp $b01b			jmp 	RangeError
.9ccc					_ENConstructFinal:
.9ccc	ad 87 04	lda $0487			lda 	DecimalCount 				; get decimal count
.9ccf	f0 33		beq $9d04			beq 	_ENCFExit 					; no decimals
.9cd1	5a		phy				phy
.9cd2	0a		asl a				asl 	a 							; x 4 and CLC
.9cd3	0a		asl a				asl 	a
.9cd4	6d 87 04	adc $0487			adc 	DecimalCount
.9cd7	a8		tay				tay
.9cd8	b9 da af	lda $afda,y			lda 	DecimalScalarTable-5,y 		; copy decimal scalar to X+2
.9cdb	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.9cde	b9 db af	lda $afdb,y			lda 	DecimalScalarTable-5+1,y
.9ce1	9d 12 04	sta $0412,x			sta 	NSMantissa1+2,x
.9ce4	b9 dc af	lda $afdc,y			lda 	DecimalScalarTable-5+2,y
.9ce7	9d 1a 04	sta $041a,x			sta 	NSMantissa2+2,x
.9cea	b9 dd af	lda $afdd,y			lda 	DecimalScalarTable-5+3,y
.9ced	9d 22 04	sta $0422,x			sta 	NSMantissa3+2,x
.9cf0	b9 de af	lda $afde,y			lda 	DecimalScalarTable-5+4,y
.9cf3	9d 2a 04	sta $042a,x			sta 	NSExponent+2,x
.9cf6	a9 08		lda #$08			lda 	#NSTFloat
.9cf8	9d 02 04	sta $0402,x			sta 	NSStatus+2,x
.9cfb	7a		ply				ply
.9cfc	e8		inx				inx 								; multiply decimal const by decimal scalar
.9cfd	20 62 ad	jsr $ad62			jsr 	FloatMultiply
.9d00	ca		dex				dex
.9d01	20 f7 ab	jsr $abf7			jsr 	FloatAdd 					; add to integer part.
.9d04					_ENCFExit:
.9d04	18		clc				clc 								; reject the digit.
.9d05	60		rts				rts
.9d06					ESTAShiftDigitIntoMantissa:
.9d06	29 0f		and #$0f			and 	#15 						; save digit
.9d08	48		pha				pha
.9d09	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; push mantissa on stack
.9d0c	48		pha				pha
.9d0d	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.9d10	48		pha				pha
.9d11	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9d14	48		pha				pha
.9d15	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9d18	48		pha				pha
.9d19	20 4a a2	jsr $a24a			jsr 	NSMShiftLeft 				; x 2
.9d1c	20 4a a2	jsr $a24a			jsr 	NSMShiftLeft 				; x 4
.9d1f	18		clc				clc 								; pop mantissa and add
.9d20	68		pla				pla
.9d21	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.9d24	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9d27	68		pla				pla
.9d28	7d 10 04	adc $0410,x			adc 	NSMantissa1,x
.9d2b	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9d2e	68		pla				pla
.9d2f	7d 18 04	adc $0418,x			adc 	NSMantissa2,x
.9d32	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9d35	68		pla				pla
.9d36	7d 20 04	adc $0420,x			adc 	NSMantissa3,x
.9d39	9d 20 04	sta $0420,x			sta 	NSMantissa3,x 				; x 5
.9d3c	20 4a a2	jsr $a24a			jsr 	NSMShiftLeft 				; x 10
.9d3f	68		pla				pla 								; add digit
.9d40	18		clc				clc
.9d41	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.9d44	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9d47	90 0d		bcc $9d56			bcc 	_ESTASDExit
.9d49	fe 10 04	inc $0410,x			inc 	NSMantissa1,x
.9d4c	d0 08		bne $9d56			bne 	_ESTASDExit
.9d4e	fe 18 04	inc $0418,x			inc 	NSMantissa2,x
.9d51	d0 03		bne $9d56			bne 	_ESTASDExit
.9d53	fe 20 04	inc $0420,x			inc 	NSMantissa3,x
.9d56					_ESTASDExit:
.9d56	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/term.asm

.9d57					EvaluateTerm:
.9d57	b1 30		lda ($30),y			lda 	(codePtr),y
.9d59	30 18		bmi $9d73			bmi 	_ETCheckUnary 				; unary function ? (text ones)
.9d5b	c9 40		cmp #$40			cmp 	#$40 						; 40-7F => identifier reference
.9d5d	b0 6f		bcs $9dce			bcs 	_ETVariable
.9d5f	c9 30		cmp #$30			cmp 	#'0' 						; is it a number
.9d61	90 6e		bcc $9dd1			bcc 	_ETPuncUnary 				; if not it might be a punctuation unary.
.9d63	c9 3a		cmp #$3a			cmp 	#'9'+1
.9d65	b0 6a		bcs $9dd1			bcs 	_ETPuncUnary
.9d67	20 35 9c	jsr $9c35			jsr 	EncodeNumberStart 			; can't fail as it's 0-9 !
.9d6a					_ETNumber:
.9d6a	c8		iny				iny 								; keep encoding until we have the numbers
.9d6b	b1 30		lda ($30),y			lda 	(codePtr),y
.9d6d	20 38 9c	jsr $9c38			jsr 	EncodeNumberContinue
.9d70	b0 f8		bcs $9d6a			bcs 	_ETNumber 					; go back if accepted.
.9d72	60		rts				rts
.9d73					_ETCheckUnary:
.9d73	c9 ff		cmp #$ff			cmp 	#KWC_STRING 				; string token
.9d75	f0 41		beq $9db8			beq 	_ETString
.9d77	c9 fe		cmp #$fe			cmp 	#KWC_HEXCONST 				; hex constant.
.9d79	f0 12		beq $9d8d			beq 	_ETHexConstant
.9d7b	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; check it actually is a unary function
.9d7d	90 0b		bcc $9d8a			bcc 	_ETSyntaxError
.9d7f	c9 9b		cmp #$9b			cmp 	#KWC_LAST_UNARY+1
.9d81	b0 07		bcs $9d8a			bcs 	_ETSyntaxError
.9d83	da		phx				phx 								; push X on the stack
.9d84	0a		asl a				asl 	a 							; put vector x 2 into X
.9d85	aa		tax				tax
.9d86	c8		iny				iny 								; consume unary function token
.9d87	7c 20 93	jmp ($9320,x)			jmp 	(VectorSet0,x) 				; and do it.
.9d8a					_ETSyntaxError:
.9d8a	4c 16 b0	jmp $b016			jmp 	SyntaxError
.9d8d					_ETHexConstant:
.9d8d	c8		iny				iny 								; skip #
.9d8e	c8		iny				iny 								; skip count
.9d8f	20 35 a2	jsr $a235			jsr 	NSMSetZero 					; clear result
.9d92					_ETHLoop:
.9d92	b1 30		lda ($30),y			lda 	(codePtr),y
.9d94	c8		iny				iny 								; and consume
.9d95	c9 00		cmp #$00			cmp 	#0 							; exit if zero
.9d97	f0 1e		beq $9db7			beq 	_ETHExit
.9d99	48		pha				pha 								; save on stack.
.9d9a	20 4a a2	jsr $a24a			jsr 	NSMShiftLeft 				; x 2
.9d9d	20 4a a2	jsr $a24a			jsr 	NSMShiftLeft 				; x 4
.9da0	20 4a a2	jsr $a24a			jsr 	NSMShiftLeft 				; x 8
.9da3	20 4a a2	jsr $a24a			jsr 	NSMShiftLeft 				; x 16
.9da6	68		pla				pla 								; ASCII
.9da7	c9 41		cmp #$41			cmp 	#'A'
.9da9	90 02		bcc $9dad			bcc 	_ETHNotChar
.9dab	e9 07		sbc #$07			sbc 	#7
.9dad					_ETHNotChar:
.9dad	29 0f		and #$0f			and 	#15 						; digit now
.9daf	1d 08 04	ora $0408,x			ora 	NSMantissa0,x 				; put in LS Nibble
.9db2	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9db5	80 db		bra $9d92			bra 	_ETHLoop 					; go round.
.9db7					_ETHExit:
.9db7	60		rts				rts
.9db8					_ETString:
.9db8	c8		iny				iny 								; look at length
.9db9	b1 30		lda ($30),y			lda 	(codePtr),y
.9dbb	48		pha				pha
.9dbc	c8		iny				iny 								; first character
.9dbd	20 7f a2	jsr $a27f			jsr 	MemoryInline 				; put address of string at (code-Ptr),y on stack
.9dc0	68		pla				pla 								; restore count and save
.9dc1	85 36		sta $36				sta 	zTemp0
.9dc3	98		tya				tya 								; add length to Y to skip it.
.9dc4	18		clc				clc
.9dc5	65 36		adc $36				adc 	zTemp0
.9dc7	a8		tay				tay
.9dc8	a9 10		lda #$10			lda 	#NSTString 					; mark as string
.9dca	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9dcd	60		rts				rts
.9dce					_ETVariable:
.9dce	4c 28 9e	jmp $9e28			jmp 	VariableHandler
.9dd1					_ETPuncUnary:
.9dd1	c8		iny				iny 								; consume the unary character
.9dd2	c9 2d		cmp #$2d			cmp 	#KWD_MINUS 					; unary minus
.9dd4	f0 2d		beq $9e03			beq 	_ETUnaryNegate
.9dd6	c9 10		cmp #$10			cmp 	#KWD_AT 					; @ reference -> constant
.9dd8	f0 39		beq $9e13			beq 	_ETDereference
.9dda	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; parenthesis
.9ddc	f0 43		beq $9e21			beq 	_ETParenthesis
.9dde	64 36		stz $36				stz 	zTemp0 						; zTemp0 is the indirection level.
.9de0	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; byte indirection (0) ?
.9de2	f0 06		beq $9dea			beq 	_ETIndirection
.9de4	e6 36		inc $36				inc 	zTemp0
.9de6	c9 21		cmp #$21			cmp 	#KWD_PLING					; word indirection (1) \
.9de8	d0 a0		bne $9d8a			bne 	_ETSyntaxError
.9dea					_ETIndirection:
.9dea	a5 36		lda $36				lda 	zTemp0 						; push indirection amount (0-1) => (1-2) on the stack
.9dec	1a		inc a				inc 	a
.9ded	48		pha				pha
.9dee	20 57 9d	jsr $9d57			jsr 	EvaluateTerm				; evaluate the term
.9df1	20 9b 9b	jsr $9b9b			jsr 	Dereference 				; dereference it.
.9df4	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a +ve integer.
.9df7	d0 07		bne $9e00			bne 	_ETTypeMismatch
.9df9	68		pla				pla 								; indirection 1-2
.9dfa	09 20		ora #$20			ora 	#NSBIsReference 			; make it a reference.
.9dfc	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9dff	60		rts				rts
.9e00					_ETTypeMismatch:
.9e00	4c 20 b0	jmp $b020			jmp 	TypeError
.9e03					_ETUnaryNegate:
.9e03	20 57 9d	jsr $9d57			jsr 	EvaluateTerm				; evaluate the term
.9e06	20 9b 9b	jsr $9b9b			jsr 	Dereference 				; dereference it.
.9e09	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a number
.9e0c	29 10		and #$10			and 	#NSTString
.9e0e	d0 f0		bne $9e00			bne 	_ETTypeMismatch
.9e10	4c e1 a1	jmp $a1e1			jmp 	NSMNegate  					; just toggles the sign bit.
.9e13					_ETDereference:
.9e13	20 57 9d	jsr $9d57			jsr 	EvaluateTerm				; evaluate the term
.9e16	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a reference
.9e19	29 20		and #$20			and 	#NSBIsReference
.9e1b	f0 e3		beq $9e00			beq 	_ETTypeMismatch
.9e1d	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; make it an integer address
.9e20	60		rts				rts
.9e21					_ETParenthesis:
.9e21	20 86 9a	jsr $9a86			jsr 	EvaluateExpression 			; evaluate here, from lowest precedence
.9e24	20 30 aa	jsr $aa30			jsr 	CheckRightBracket 			; check for )
.9e27	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/variable.asm

.9e28					VariableHandler:
.9e28	b1 30		lda ($30),y			lda 	(codePtr),y
.9e2a	18		clc				clc
.9e2b	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.9e2d	85 37		sta $37				sta 	zTemp0+1
.9e2f	c8		iny				iny
.9e30	b1 30		lda ($30),y			lda 	(codePtr),y
.9e32	85 36		sta $36				sta 	zTemp0
.9e34	c8		iny				iny
.9e35	18		clc				clc									; copy variable address+3 to mantissa
.9e36	69 03		adc #$03			adc 	#3
.9e38	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9e3b	a5 37		lda $37				lda 	zTemp0+1
.9e3d	69 00		adc #$00			adc 	#0
.9e3f	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9e42	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.9e45	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.9e48	9e 28 04	stz $0428,x			stz 	NSExponent,x
.9e4b	5a		phy				phy
.9e4c	a0 02		ldy #$02			ldy 	#2 							; read type
.9e4e	b1 36		lda ($36),y			lda 	(zTemp0),y
.9e50	7a		ply				ply
.9e51	29 1c		and #$1c			and 	#NSBTypeMask+NSBIsArray 	; get type information
.9e53	09 20		ora #$20			ora 	#NSBIsReference 			; make a reference.
.9e55	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9e58	29 04		and #$04			and 	#NSBIsArray
.9e5a	d0 01		bne $9e5d			bne 	_VHArray
.9e5c	60		rts				rts
.9e5d					_VHArray:
.9e5d	e8		inx				inx
.9e5e	20 cd a1	jsr $a1cd			jsr 	Evaluate8BitInteger 		; get the 1st index.
.9e61	a9 ff		lda #$ff			lda 	#$FF 						; set Status of X+2 to a duff value so we know if we picked it up.
.9e63	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.9e66	b1 30		lda ($30),y			lda 	(codePtr),y
.9e68	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.9e6a	d0 06		bne $9e72			bne 	_VHNoSecondIndex
.9e6c	c8		iny				iny 								; skip the comma
.9e6d	e8		inx				inx
.9e6e	20 cd a1	jsr $a1cd			jsr 	Evaluate8BitInteger 		; get the 2nd index.
.9e71	ca		dex				dex
.9e72					_VHNoSecondIndex:
.9e72	ca		dex				dex 								; set X back.
.9e73	20 30 aa	jsr $aa30			jsr 	CheckRightBracket 			; and check the right bracket.
.9e76	5a		phy				phy 								; save position
.9e77	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy record address to zaTemp
.9e7a	85 3e		sta $3e				sta 	zaTemp
.9e7c	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9e7f	85 3f		sta $3f				sta 	zaTemp+1
.9e81	a0 03		ldy #$03			ldy 	#3 							; get the second index - which is 0 if there is one index.
.9e83	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9e85	f0 02		beq $9e89			beq 	_VHHas2Mask
.9e87	a9 ff		lda #$ff			lda 	#$FF
.9e89					_VHHas2Mask:
.9e89	dd 02 04	cmp $0402,x			cmp 	NSStatus+2,x 				; so if they are the same there are the wrong number of indices
.9e8c	f0 54		beq $9ee2			beq 	_VHBadIndex
.9e8e	0a		asl a				asl 	a 							; carry will be set if a second index
.9e8f	90 09		bcc $9e9a			bcc 	_VHCheckFirstIndex
.9e91	a0 03		ldy #$03			ldy 	#3 			 				; check the 2nd size >= 2nd index
.9e93	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9e95	dd 0a 04	cmp $040a,x			cmp 	NSMantissa0+2,x
.9e98	90 48		bcc $9ee2			bcc 	_VHBadIndex
.9e9a					_VHCheckFirstIndex:
.9e9a	a0 02		ldy #$02			ldy 	#2 			 				; check the 2nd size >= 2nd index
.9e9c	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9e9e	dd 09 04	cmp $0409,x			cmp 	NSMantissa0+1,x
.9ea1	90 3f		bcc $9ee2			bcc 	_VHBadIndex
.9ea3	64 36		stz $36				stz 	zTemp0 						; clear zTemp0 (if 1 index)
.9ea5	64 37		stz $37				stz 	zTemp0+1
.9ea7	bd 02 04	lda $0402,x			lda 	NSStatus+2,x 				; if only one index provided, don't need to multiply
.9eaa	30 0f		bmi $9ebb			bmi 	_VHNoMultiply
.9eac	da		phx				phx
.9ead	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; get 2nd index on stack
.9eb0	48		pha				pha
.9eb1	a0 02		ldy #$02			ldy 	#2 							; get 1st size in A
.9eb3	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9eb5	1a		inc a				inc 	a 							; add 1 for zero base
.9eb6	fa		plx				plx
.9eb7	20 b2 ae	jsr $aeb2			jsr 	Multiply8x8 				; calculate -> Z0
.9eba	fa		plx				plx
.9ebb					_VHNoMultiply:
.9ebb	18		clc				clc
.9ebc	a5 36		lda $36				lda 	zTemp0
.9ebe	7d 09 04	adc $0409,x			adc 	NSMantissa0+1,x
.9ec1	85 36		sta $36				sta 	zTemp0
.9ec3	a5 37		lda $37				lda 	zTemp0+1
.9ec5	69 00		adc #$00			adc 	#0
.9ec7	85 37		sta $37				sta 	zTemp0+1
.9ec9	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9ecc	20 53 8d	jsr $8d53			jsr 	ScaleByBaseType
.9ecf	18		clc				clc
.9ed0	b2 3e		lda ($3e)			lda 	(zaTemp)
.9ed2	65 36		adc $36				adc 	zTemp0
.9ed4	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9ed7	a0 01		ldy #$01			ldy 	#1
.9ed9	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9edb	65 37		adc $37				adc 	zTemp0+1
.9edd	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9ee0	7a		ply				ply 								; restore position
.9ee1	60		rts				rts
.9ee2					_VHBadIndex:
.9ee2	a9 17		lda #$17		lda	#23
.9ee4	4c 7d 96	jmp $967d		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/abs.asm

.ade8					AbsUnary:
.ade8	fa		plx				plx 								; restore stack pos
.ade9	20 89 a1	jsr $a189			jsr 	EvaluateNumber 				; get a float or int
.adec	20 30 aa	jsr $aa30			jsr 	CheckRightBracket
.adef	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; clear the sign bit
.adf2	29 7f		and #$7f			and 	#$7F
.adf4	9d 00 04	sta $0400,x			sta 	NSStatus,x
.adf7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/alloc.asm

.9ee7					AllocUnary:
.9ee7	fa		plx				plx 								; restore stack pos
.9ee8	20 c1 a1	jsr $a1c1			jsr 	Evaluate16BitInteger		; get bytes required.
.9eeb	20 30 aa	jsr $aa30			jsr 	CheckRightBracket
.9eee	da		phx				phx 								; save X/Y
.9eef	5a		phy				phy
.9ef0	8a		txa				txa 								; copy X into Y
.9ef1	a8		tay				tay
.9ef2	b9 10 04	lda $0410,y			lda		NSMantissa1,y 				; get size
.9ef5	aa		tax				tax
.9ef6	b9 08 04	lda $0408,y			lda 	NSMantissa0,y
.9ef9	20 06 9f	jsr $9f06			jsr 	AllocateXABytes 			; allocate memory
.9efc	99 08 04	sta $0408,y			sta 	NSMantissa0,y 				; write address out.
.9eff	8a		txa				txa
.9f00	99 10 04	sta $0410,y			sta 	NSMantissa1,y
.9f03	7a		ply				ply
.9f04	fa		plx				plx
.9f05	60		rts				rts
.9f06					AllocateXABytes:
.9f06	5a		phy				phy
.9f07	ac 8c 04	ldy $048c			ldy 	lowMemPtr 					; push current address on stack and to zTemp0
.9f0a	84 36		sty $36				sty 	zTemp0
.9f0c	5a		phy				phy
.9f0d	ac 8d 04	ldy $048d			ldy 	lowMemPtr+1
.9f10	84 37		sty $37				sty 	zTemp0+1
.9f12	5a		phy				phy
.9f13	18		clc				clc 								; add to low memory pointer
.9f14	6d 8c 04	adc $048c			adc 	lowMemPtr
.9f17	8d 8c 04	sta $048c			sta 	lowMemPtr
.9f1a	8a		txa				txa
.9f1b	6d 8d 04	adc $048d			adc 	lowMemPtr+1
.9f1e	8d 8d 04	sta $048d			sta 	lowMemPtr+1
.9f21	b0 2f		bcs $9f52			bcs 	CISSMemory
.9f23	20 44 9f	jsr $9f44			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.9f26					_ClearMemory:
.9f26	ad 8c 04	lda $048c			lda 	lowMemPtr 					; cleared all memory allocated
.9f29	c5 36		cmp $36				cmp 	zTemp0
.9f2b	d0 07		bne $9f34			bne 	_CMClearNext
.9f2d	ad 8d 04	lda $048d			lda 	lowMemPtr+1
.9f30	c5 37		cmp $37				cmp 	zTemp0+1
.9f32	f0 0c		beq $9f40			beq 	_CMExit
.9f34					_CMClearNext:
.9f34	a9 00		lda #$00			lda 	#0 							; clear byte, advance to next.
.9f36	92 36		sta ($36)			sta 	(zTemp0)
.9f38	e6 36		inc $36				inc 	zTemp0
.9f3a	d0 ea		bne $9f26			bne 	_ClearMemory
.9f3c	e6 37		inc $37				inc		zTemp0+1
.9f3e	80 e6		bra $9f26			bra 	_ClearMemory
.9f40					_CMExit:
.9f40	fa		plx				plx
.9f41	68		pla				pla
.9f42	7a		ply				ply
.9f43	60		rts				rts
.9f44					CheckIdentifierStringSpace:
.9f44	48		pha				pha
.9f45	ad 8d 04	lda $048d			lda 	lowMemPtr+1 				; get low memory pointer
.9f48	18		clc				clc
.9f49	69 02		adc #$02			adc 	#2 							; need at least 2 256 byte pages
.9f4b	cd 8f 04	cmp $048f			cmp 	StringMemory+1 				; is it >= StringMemory
.9f4e	b0 02		bcs $9f52			bcs 	CISSMemory
.9f50	68		pla				pla
.9f51	60		rts				rts
.9f52					CISSMemory:
.9f52	a9 06		lda #$06		lda	#6
.9f54	4c 7d 96	jmp $967d		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/asc.asm

.adf8					AscUnary:
.adf8	fa		plx				plx 								; restore stack pos
.adf9	20 94 a1	jsr $a194			jsr 	EvaluateString 				; get a string
.adfc	b2 36		lda ($36)			lda 	(zTemp0)					; get/return firs character
.adfe	20 37 a2	jsr $a237			jsr 	NSMSetByte
.ae01	20 30 aa	jsr $aa30			jsr 	CheckRightBracket
.ae04	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/frac.asm

.ae05					FracUnary:
.ae05	fa		plx				plx 								; restore stack pos
.ae06	20 89 a1	jsr $a189			jsr 	EvaluateNumber 				; get a float or int
.ae09	20 30 aa	jsr $aa30			jsr 	CheckRightBracket
.ae0c	bd 00 04	lda $0400,x			lda 	NSStatus,x
.ae0f	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.ae11	f0 04		beq $ae17			beq 	_IUZero
.ae13	20 d5 ac	jsr $acd5			jsr 	FloatFractionalPart
.ae16	60		rts				rts
.ae17					_IUZero:
.ae17	20 35 a2	jsr $a235			jsr 	NSMSetZero
.ae1a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/int.asm

.ae1b					IntUnary:
.ae1b	fa		plx				plx 								; restore stack pos
.ae1c	20 89 a1	jsr $a189			jsr 	EvaluateNumber 				; get a float or int
.ae1f	20 30 aa	jsr $aa30			jsr 	CheckRightBracket
.ae22	bd 00 04	lda $0400,x			lda 	NSStatus,x
.ae25	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.ae27	f0 03		beq $ae2c			beq 	_IUExit
.ae29	20 38 ad	jsr $ad38			jsr 	FloatIntegerPart
.ae2c					_IUExit:
.ae2c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/len.asm

.ae2d					LenUnary:
.ae2d	fa		plx				plx 								; restore stack pos
.ae2e	20 94 a1	jsr $a194			jsr 	EvaluateString 				; get a string
.ae31	5a		phy				phy
.ae32	a0 00		ldy #$00			ldy 	#0 							; find length
.ae34					_LenFind:
.ae34	b1 36		lda ($36),y			lda 	(zTemp0),y
.ae36	f0 06		beq $ae3e			beq 	_LenExit
.ae38	c8		iny				iny
.ae39	d0 f9		bne $ae34			bne 	_LenFind
.ae3b	4c 1b b0	jmp $b01b			jmp 	RangeError 					; string > 255
.ae3e					_LenExit:
.ae3e	98		tya				tya
.ae3f	20 37 a2	jsr $a237			jsr 	NSMSetByte
.ae42	7a		ply				ply
.ae43	20 30 aa	jsr $aa30			jsr 	CheckRightBracket
.ae46	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/not.asm

.9f57					Unary_Not:
.9f57	fa		plx				plx
.9f58	20 ac a1	jsr $a1ac			jsr 	EvaluateInteger 			; get integer
.9f5b	20 30 aa	jsr $aa30			jsr 	CheckRightBracket
.9f5e	20 65 a2	jsr $a265			jsr 	NSMIsZero 					; zero mantissa ?
.9f61	f0 04		beq $9f67			beq 	_NotZero
.9f63	20 35 a2	jsr $a235			jsr 	NSMSetZero
.9f66	60		rts				rts
.9f67					_NotZero:
.9f67	4c ea 96	jmp $96ea			jmp 	ReturnTrue
.9f6a					_UNBad:
.9f6a	4c 25 b0	jmp $b025			jmp 	ArgumentError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/rnd.asm

.9f6d					Unary_Random:
.9f6d	fa		plx				plx
.9f6e	20 e6 9f	jsr $9fe6			jsr 	Random32Bit 				; get a random number
.9f71	20 cb 9f	jsr $9fcb			jsr 	URCopyToMantissa  			; put in mantissa
.9f74	e8		inx				inx
.9f75	20 c1 a1	jsr $a1c1			jsr 	Evaluate16BitInteger 		; put modulus value in +1
.9f78	ca		dex				dex
.9f79	20 b4 aa	jsr $aab4			jsr 	IntegerModulusNoCheck 		; calculate modulus
.9f7c	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; make it an integer positive
.9f7f	9e 28 04	stz $0428,x			stz 	NSExponent,x
.9f82	20 30 aa	jsr $aa30			jsr 	CheckRightBracket
.9f85	60		rts				rts
.9f86					Unary_Rnd:
.9f86	fa		plx				plx
.9f87	20 89 a1	jsr $a189			jsr 	EvaluateNumber 				; number to use.
.9f8a	20 30 aa	jsr $aa30			jsr 	CheckRightBracket 			; closing bracket
.9f8d	20 65 a2	jsr $a265			jsr 	NSMIsZero 					; if zero, then don't generate a new number
.9f90	f0 2b		beq $9fbd			beq 	_URCopySeed
.9f92	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; if -ve, then seed using parameter
.9f95	10 23		bpl $9fba			bpl 	_URDontSeed
.9f97	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy - value to seed butchering it.
.9f9a	49 17		eor #$17			eor 	#$17
.9f9c	8d 88 04	sta $0488			sta 	RandomSeed+0
.9f9f	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9fa2	49 a5		eor #$a5			eor 	#$A5
.9fa4	8d 89 04	sta $0489			sta 	RandomSeed+1
.9fa7	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.9faa	49 c2		eor #$c2			eor 	#$C2
.9fac	8d 8a 04	sta $048a			sta 	RandomSeed+2
.9faf	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.9fb2	49 9d		eor #$9d			eor 	#$9D
.9fb4	8d 8b 04	sta $048b			sta 	RandomSeed+3
.9fb7	20 e6 9f	jsr $9fe6			jsr 	Random32Bit
.9fba					_URDontSeed:
.9fba	20 e6 9f	jsr $9fe6			jsr 	Random32Bit 				; generate a number.
.9fbd					_URCopySeed:
.9fbd	20 cb 9f	jsr $9fcb			jsr 	URCopyToMantissa 			; copy into mantissa
.9fc0	a9 e1		lda #$e1			lda 	#-31 						; force into 0-1 range
.9fc2	8d 28 04	sta $0428			sta 	NSExponent
.9fc5	a9 08		lda #$08			lda 	#NSTFloat
.9fc7	8d 00 04	sta $0400			sta 	NSStatus 					; positive.
.9fca	60		rts				rts
.9fcb					URCopyToMantissa:
.9fcb	ad 88 04	lda $0488			lda 	RandomSeed+0
.9fce	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9fd1	ad 89 04	lda $0489			lda 	RandomSeed+1
.9fd4	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9fd7	ad 8a 04	lda $048a			lda 	RandomSeed+2
.9fda	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9fdd	ad 8b 04	lda $048b			lda 	RandomSeed+3
.9fe0	29 7f		and #$7f			and 	#$7F 						; make legal mantissa
.9fe2	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9fe5	60		rts				rts
.9fe6					Random32Bit:
.9fe6	5a		phy				phy
.9fe7	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.9fe9	ad 88 04	lda $0488			lda 	RandomSeed+0 				; check the seed isn't zero
.9fec	d0 03		bne $9ff1			bne 	_Random1
.9fee	a8		tay				tay 								; if so do it 256 times
.9fef	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.9ff1					_Random1:
.9ff1	0a		asl a				asl 	a 							; LSFR RNG
.9ff2	2e 89 04	rol $0489			rol 	RandomSeed+1
.9ff5	2e 8a 04	rol $048a			rol 	RandomSeed+2
.9ff8	2e 8b 04	rol $048b			rol 	RandomSeed+3
.9ffb	90 02		bcc $9fff			bcc 	_Random2
.9ffd	49 c5		eor #$c5			eor 	#$C5
.9fff					_Random2:
.9fff	88		dey				dey
.a000	d0 ef		bne $9ff1			bne 	_Random1
.a002	8d 88 04	sta $0488			sta 	RandomSeed+0
.a005	7a		ply				ply
.a006	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/sgn.asm

.ae47					SgnUnary:
.ae47	fa		plx				plx 								; restore stack pos
.ae48	20 89 a1	jsr $a189			jsr 	EvaluateNumber 				; get a float or int
.ae4b	20 30 aa	jsr $aa30			jsr 	CheckRightBracket
.ae4e	20 65 a2	jsr $a265			jsr 	NSMIsZero 					; if zero
.ae51	f0 10		beq $ae63			beq 	_SGZero  					; return Int Zero
.ae53	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get status w/sign
.ae56	48		pha				pha
.ae57	a9 01		lda #$01			lda 	#1 							; set to 1
.ae59	20 37 a2	jsr $a237			jsr 	NSMSetByte
.ae5c	68		pla				pla
.ae5d	29 80		and #$80			and		#$80 						; copy the sign byte out
.ae5f	9d 00 04	sta $0400,x			sta 	NSStatus,x
.ae62	60		rts				rts
.ae63	20 35 a2	jsr $a235	_SGZero:jsr 	NSMSetZero
.ae66	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/val.asm

.ae67					ValUnary:
.ae67	fa		plx				plx 								; restore stack pos
.ae68	20 7d ae	jsr $ae7d			jsr 	ValMainCode 				; do the main val() code
.ae6b	b0 01		bcs $ae6e			bcs 	_VUError 					; couldn't convert
.ae6d	60		rts				rts
.ae6e					_VUError:
.ae6e	4c 20 b0	jmp $b020			jmp 	TypeError
.ae71					IsValUnary:
.ae71	fa		plx				plx 								; restore stack pos
.ae72	20 7d ae	jsr $ae7d			jsr 	ValMainCode 				; do the main val() code
.ae75	b0 03		bcs $ae7a			bcs 	_VUBad
.ae77	4c ea 96	jmp $96ea			jmp 	ReturnTrue
.ae7a					_VUBad:
.ae7a	4c f6 96	jmp $96f6			jmp 	ReturnFalse
.ae7d					ValMainCode:
.ae7d	20 94 a1	jsr $a194			jsr 	EvaluateString 				; get a string
.ae80	20 30 aa	jsr $aa30			jsr 	CheckRightBracket 			; check right bracket present
.ae83	5a		phy				phy
.ae84	b2 36		lda ($36)			lda 	(zTemp0) 					; check not empty string
.ae86	f0 17		beq $ae9f			beq 	_VMCFail2
.ae88	a0 ff		ldy #$ff			ldy 	#$FF 						; start position
.ae8a	48		pha				pha 								; save first character
.ae8b	c9 2d		cmp #$2d			cmp 	#"-"		 				; is it -
.ae8d	d0 01		bne $ae90			bne 	_VMCStart
.ae8f	c8		iny				iny 								; skip over -
.ae90					_VMCStart:
.ae90	38		sec				sec 								; initialise first time round.
.ae91					_VMCNext:
.ae91	c8		iny				iny 								; pre-increment
.ae92	b1 36		lda ($36),y			lda 	(zTemp0),y 					; next character
.ae94	f0 0c		beq $aea2			beq 	_VMCSuccess 				; successful.
.ae96	20 39 9c	jsr $9c39			jsr 	EncodeNumber 				; send it to the number-builder
.ae99	90 03		bcc $ae9e			bcc 	_VMCFail 					; if failed, give up.
.ae9b	18		clc				clc 								; next time round, countinue
.ae9c	80 f3		bra $ae91			bra 	_VMCNext
.ae9e					_VMCFail:
.ae9e	68		pla				pla
.ae9f					_VMCFail2:
.ae9f	7a		ply				ply
.aea0	38		sec				sec
.aea1	60		rts				rts
.aea2					_VMCSuccess:
.aea2	a9 00		lda #$00			lda 	#0 							; construct final
.aea4	20 39 9c	jsr $9c39			jsr 	EncodeNumber
.aea7	68		pla				pla
.aea8	c9 2d		cmp #$2d			cmp 	#"-"
.aeaa	d0 03		bne $aeaf			bne 	_VMCNotNegative
.aeac	20 e1 a1	jsr $a1e1			jsr		NSMNegate
.aeaf					_VMCNotNegative:
.aeaf	7a		ply				ply
.aeb0	18		clc				clc
.aeb1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/chr.asm

.a007					ChrUnary:
.a007	fa		plx				plx 								; restore stack pos
.a008	20 cd a1	jsr $a1cd			jsr 	Evaluate8BitInteger			; get value
.a00b	48		pha				pha
.a00c	20 30 aa	jsr $aa30			jsr 	CheckRightBracket
.a00f	a9 01		lda #$01			lda 	#1 							; allocate space for one char
.a011	20 4b b3	jsr $b34b			jsr 	StringTempAllocate
.a014	68		pla				pla 								; write number to it
.a015	20 89 b3	jsr $b389			jsr 	StringTempWrite
.a018	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/spc.asm

.a019					SpcUnary:
.a019	fa		plx				plx 								; restore stack pos
.a01a	20 cd a1	jsr $a1cd			jsr 	Evaluate8BitInteger			; get value
.a01d	5a		phy				phy
.a01e	48		pha				pha 								; save count
.a01f	20 4b b3	jsr $b34b			jsr 	StringTempAllocate
.a022	7a		ply				ply 								; to do count in Y
.a023					_SpcLoop:
.a023	c0 00		cpy #$00			cpy 	#0
.a025	f0 08		beq $a02f			beq 	_SpcExit
.a027	a9 20		lda #$20			lda 	#32
.a029	20 89 b3	jsr $b389			jsr 	StringTempWrite
.a02c	88		dey				dey
.a02d	80 f4		bra $a023			bra 	_SPCLoop
.a02f					_SpcExit:
.a02f	7a		ply				ply
.a030	20 30 aa	jsr $aa30			jsr 	CheckRightBracket
.a033	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/str.asm

.a034					Unary_Str:
.a034	fa		plx				plx
.a035	20 89 a1	jsr $a189			jsr 	EvaluateNumber  			; get number
.a038	20 30 aa	jsr $aa30			jsr 	CheckRightBracket 			; closing bracket
.a03b	a9 05		lda #$05			lda 	#5 							; maximum decimals, from Basic816
.a03d	20 56 a0	jsr $a056			jsr 	ConvertNumberToString 		; do the conversion.
.a040	a9 21		lda #$21			lda		#33 						; create buffer
.a042	20 4b b3	jsr $b34b			jsr 	StringTempAllocate 			; allocate memory
.a045	da		phx				phx
.a046	a2 00		ldx #$00			ldx 	#0
.a048					_USCopy:
.a048	bd 19 06	lda $0619,x			lda 	DecimalBuffer,x
.a04b	20 89 b3	jsr $b389			jsr 	StringTempWrite
.a04e	e8		inx				inx
.a04f	bd 19 06	lda $0619,x			lda 	DecimalBuffer,x
.a052	d0 f4		bne $a048			bne 	_USCopy
.a054	fa		plx				plx
.a055	60		rts				rts
.a056					ConvertNumberToString:
.a056	5a		phy				phy 								; save code position
.a057	8d 94 04	sta $0494			sta 	DecimalPlaces	 			; save number of DPs.
.a05a	9c 95 04	stz $0495			stz 	dbOffset 					; offset into decimal buffer = start.
.a05d	bd 00 04	lda $0400,x			lda 	NSStatus,x  				; is it -ve.
.a060	10 0a		bpl $a06c			bpl 	_CNTSNotNegative
.a062	29 7f		and #$7f			and 	#$7F 						; make +ve
.a064	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a067	a9 2d		lda #$2d			lda 	#"-"
.a069	20 d2 a0	jsr $a0d2			jsr 	WriteDecimalBuffer
.a06c					_CNTSNotNegative:
.a06c	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if decimal
.a06f	f0 15		beq $a086			beq 	_CNTSNotFloat
.a071	e8		inx				inx 								; round up
.a072	a9 01		lda #$01			lda 	#1
.a074	20 37 a2	jsr $a237			jsr 	NSMSetByte
.a077	ca		dex				dex
.a078	bd 28 04	lda $0428,x			lda		NSExponent,x
.a07b	9d 29 04	sta $0429,x			sta 	NSExponent+1,x
.a07e	a9 08		lda #$08			lda 	#NSTFloat
.a080	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.a083	20 f7 ab	jsr $abf7			jsr 	FloatAdd
.a086					_CNTSNotFloat:
.a086	20 b4 a0	jsr $a0b4			jsr 	MakePlusTwoString
.a089	20 d5 ac	jsr $acd5			jsr 	FloatFractionalPart 		; get the fractional part
.a08c	20 99 ad	jsr $ad99			jsr 	NSNormalise					; normalise , exit if zero
.a08f	f0 21		beq $a0b2			beq 	_CNTSExit
.a091	a9 2e		lda #$2e			lda 	#"."
.a093	20 d2 a0	jsr $a0d2			jsr 	WriteDecimalBuffer 			; write decimal place
.a096					_CNTSDecimal:
.a096	ce 94 04	dec $0494			dec 	DecimalPlaces 				; done all the decimals
.a099	30 17		bmi $a0b2			bmi 	_CNTSExit
.a09b	e8		inx				inx 								; x 10.0
.a09c	a9 0a		lda #$0a			lda 	#10
.a09e	20 37 a2	jsr $a237			jsr 	NSMSetByte
.a0a1	a9 08		lda #$08			lda 	#NSTFloat
.a0a3	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a0a6	ca		dex				dex
.a0a7	20 62 ad	jsr $ad62			jsr 	FloatMultiply
.a0aa	20 b4 a0	jsr $a0b4			jsr 	MakePlusTwoString
.a0ad	20 d5 ac	jsr $acd5			jsr 	FloatFractionalPart 		; get the fractional part
.a0b0	80 e4		bra $a096			bra 	_CNTSDecimal 				; keep going.
.a0b2					_CNTSExit:
.a0b2	7a		ply				ply
.a0b3	60		rts				rts
.a0b4					MakePlusTwoString:
.a0b4	da		phx				phx
.a0b5	20 0c a2	jsr $a20c			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.a0b8	e8		inx				inx 								; access it
.a0b9	e8		inx				inx
.a0ba	20 38 ad	jsr $ad38			jsr 	FloatIntegerPart 			; make it an integer
.a0bd	a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.a0bf	20 a1 ab	jsr $aba1			jsr 	ConvertInt32
.a0c2	a2 00		ldx #$00			ldx	 	#0
.a0c4					_MPTSCopy:
.a0c4	bd f7 05	lda $05f7,x			lda 	NumberBuffer,x
.a0c7	20 d2 a0	jsr $a0d2			jsr 	WriteDecimalBuffer
.a0ca	e8		inx				inx
.a0cb	bd f7 05	lda $05f7,x			lda 	NumberBuffer,x
.a0ce	d0 f4		bne $a0c4			bne 	_MPTSCopy
.a0d0	fa		plx				plx
.a0d1	60		rts				rts
.a0d2					WriteDecimalBuffer:
.a0d2	da		phx				phx
.a0d3	ae 95 04	ldx $0495			ldx 	dbOffset
.a0d6	9d 19 06	sta $0619,x			sta 	DecimalBuffer,x
.a0d9	9e 1a 06	stz $061a,x			stz 	DecimalBuffer+1,x
.a0dc	ee 95 04	inc $0495			inc 	dbOffset
.a0df	fa		plx				plx
.a0e0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/substring.asm

.a0e1					Unary_Left:
.a0e1	fa		plx				plx
.a0e2	18		clc				clc 								; only one parameter
.a0e3	20 58 a1	jsr $a158			jsr 	SubstringInitial 			; set up.
.a0e6	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; Param #1 is the length
.a0e9	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.a0ec	9e 09 04	stz $0409,x			stz 	NSMantissa0+1,x 			; Start is zero.
.a0ef	80 2c		bra $a11d			bra 	SubstringMain
.a0f1					Unary_Right:
.a0f1	fa		plx				plx
.a0f2	18		clc				clc 								; only one parameter
.a0f3	20 58 a1	jsr $a158			jsr 	SubstringInitial 			; set up.
.a0f6	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; length => param 2
.a0f9	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.a0fc	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; total length
.a0ff	fd 09 04	sbc $0409,x			sbc 	NSMantissa0+1,x 			; length - required.
.a102	b0 02		bcs $a106			bcs 	_URNotUnderflow
.a104	a9 00		lda #$00			lda 	#0 							; start from the beginning, as something like right$("AB",3)
.a106					_URNotUnderFlow:
.a106	9d 09 04	sta $0409,x			sta 	NSMantissa0+1,x 			; this is the start position
.a109	80 12		bra $a11d			bra 	SubStringMain
.a10b					Unary_Mid:
.a10b	fa		plx				plx
.a10c	38		sec				sec 								; two parameters
.a10d	20 58 a1	jsr $a158			jsr 	SubstringInitial 			; set up.
.a110	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; first parameter is zero ?
.a113	f0 05		beq $a11a			beq 	_UMError
.a115	de 09 04	dec $0409,x			dec 	NSMantissa0+1,x				; reduce initial offset by 1 as MID$(a$,1..) is actually the first character
.a118	80 03		bra $a11d			bra 	SubStringMain
.a11a					_UMError:
.a11a	4c 25 b0	jmp $b025			jmp 	ArgumentError
.a11d					SubStringMain:
.a11d	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; is the initial offset >= the length
.a120	dd 28 04	cmp $0428,x			cmp 	NSExponent,x
.a123	b0 2d		bcs $a152			bcs 	_SSMNull 					; if so, return an empty string.
.a125	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; if copy count is zero
.a128	f0 28		beq $a152			beq 	_SSMNull 					; return empty string.
.a12a	18		clc				clc 								; add the offset +1 to the address and
.a12b	bd 08 04	lda $0408,x			lda	 	NSMantissa0,x 				; put in zTemp
.a12e	7d 09 04	adc $0409,x			adc 	NSMantissa0+1,x
.a131	85 36		sta $36				sta 	zTemp0
.a133	bd 10 04	lda $0410,x			lda	 	NSMantissa1,x
.a136	69 00		adc #$00			adc 	#0
.a138	85 37		sta $37				sta 	zTemp0+1
.a13a					_SSMNoCarry:
.a13a	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; characters required.
.a13d	20 4b b3	jsr $b34b			jsr 	StringTempAllocate 			; allocate that many characters
.a140	5a		phy				phy 								; save Y
.a141	a0 00		ldy #$00			ldy 	#0 							; start copying in.
.a143					_SSMCopy:
.a143	b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next character
.a145	f0 09		beq $a150			beq 	_SSMEString 				; no more to copy
.a147	20 89 b3	jsr $b389			jsr 	StringTempWrite 			; and write it out.
.a14a	c8		iny				iny
.a14b	de 0a 04	dec $040a,x			dec 	NSMantissa0+2,x
.a14e	d0 f3		bne $a143			bne 	_SSMCopy
.a150					_SSMEString:
.a150	7a		ply				ply
.a151					_SSMExit:
.a151	60		rts				rts
.a152					_SSMNull:
.a152	a9 00		lda #$00			lda 	#0
.a154	20 4b b3	jsr $b34b			jsr 	StringTempAllocate
.a157	60		rts				rts
.a158					SubstringInitial:
.a158	da		phx				phx 								; save initial stack position
.a159	08		php				php 								; save carry on stack indicating 2 parameters
.a15a	20 94 a1	jsr $a194			jsr 	EvaluateString 				; get a string
.a15d	5a		phy				phy 								; calculate length to exponent.
.a15e	a0 ff		ldy #$ff			ldy 	#$FF
.a160					_SIFindLength:
.a160	c8		iny				iny
.a161	b1 36		lda ($36),y			lda 	(zTemp0),y
.a163	d0 fb		bne $a160			bne 	_SIFindLength
.a165	98		tya				tya
.a166	9d 28 04	sta $0428,x			sta 	NSExponent,x
.a169	7a		ply				ply
.a16a	e8		inx				inx
.a16b	20 38 aa	jsr $aa38			jsr 	CheckComma 					; comma next
.a16e	20 cd a1	jsr $a1cd			jsr 	Evaluate8BitInteger 		; get next parameter
.a171	28		plp				plp 								; is it the last parameter ?
.a172	90 07		bcc $a17b			bcc 	_SSIExit 					; if so, exit.
.a174	e8		inx				inx
.a175	20 38 aa	jsr $aa38			jsr 	CheckComma 					; comma next
.a178	20 cd a1	jsr $a1cd			jsr 	Evaluate8BitInteger 		; get last parameter
.a17b					_SSIExit:
.a17b	fa		plx				plx
.a17c	20 30 aa	jsr $aa30			jsr 	CheckRightBracket 			; check closing bracket
.a17f	60		rts				rts 								; exit

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/exprhelper.asm

.a180					EvaluateValue:
.a180	48		pha				pha
.a181	20 86 9a	jsr $9a86			jsr		EvaluateExpression 			; expression
.a184	20 9b 9b	jsr $9b9b			jsr 	Dereference					; derefernce it
.a187	68		pla				pla
.a188	60		rts				rts
.a189					EvaluateNumber:
.a189	20 80 a1	jsr $a180			jsr 	EvaluateValue 				; get a value
.a18c	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if string.
.a18f	29 10		and #$10			and 	#NSBIsString
.a191	d0 16		bne $a1a9			bne 	HelperTypeError
.a193	60		rts				rts
.a194					EvaluateString:
.a194	20 80 a1	jsr $a180			jsr 	EvaluateValue 				; get a value
.a197	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if string.
.a19a	29 10		and #$10			and 	#NSBIsString
.a19c	f0 0b		beq $a1a9			beq 	HelperTypeError
.a19e					CopyAddressToTemp0:
.a19e	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address -> zTemp0
.a1a1	85 36		sta $36				sta 	zTemp0
.a1a3	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a1a6	85 37		sta $37				sta 	zTemp0+1
.a1a8	60		rts				rts
.a1a9					HelperTypeError:
.a1a9	4c 20 b0	jmp $b020			jmp 	TypeError
.a1ac					EvaluateInteger:
.a1ac	20 89 a1	jsr $a189			jsr 	EvaluateNumber
.a1af	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check exponent is zero
.a1b2	d0 0a		bne $a1be			bne 	HelperValueError 			; if not, it's a float.
.a1b4	60		rts				rts
.a1b5					EvaluateUnsignedInteger:
.a1b5	20 ac a1	jsr $a1ac			jsr 	EvaluateInteger 			; check integer is +ve
.a1b8	bd 00 04	lda $0400,x			lda 	NSStatus,x
.a1bb	30 01		bmi $a1be			bmi 	HelperValueError
.a1bd	60		rts				rts
.a1be					HelperValueError:
.a1be	4c 25 b0	jmp $b025			jmp 	ArgumentError
.a1c1					Evaluate16BitInteger:
.a1c1	20 b5 a1	jsr $a1b5			jsr	 	EvaluateUnsignedInteger		; get integer
.a1c4	bd 20 04	lda $0420,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.a1c7	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.a1ca	d0 f2		bne $a1be			bne 	HelperValueError
.a1cc	60		rts				rts
.a1cd					Evaluate8BitInteger:
.a1cd	20 b5 a1	jsr $a1b5			jsr	 	EvaluateUnsignedInteger 	; get an integer
.a1d0	d0 ec		bne $a1be			bne 	HelperValueError
.a1d2	bd 20 04	lda $0420,x			lda 	NSMantissa3,x	 			; bytes 1, 2 & 3 must be zero
.a1d5	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.a1d8	1d 10 04	ora $0410,x			ora 	NSMantissa1,x
.a1db	d0 e1		bne $a1be			bne 	HelperValueError
.a1dd	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.a1e0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/mult8x8.asm

.aeb2					Multiply8x8:
.aeb2	4a		lsr a		  		lsr 	a  							; prime the carry bit for the loop
.aeb3	85 36		sta $36			  	sta 	zTemp0
.aeb5	86 37		stx $37				stx 	zTemp0+1
.aeb7	a9 00		lda #$00			lda 	#0
.aeb9	a2 08		ldx #$08			ldx 	#8
.aebb					_M88Loop:
.aebb	90 03		bcc $aec0			bcc 	_M88NoAdd
.aebd	18		clc				clc
.aebe	65 37		adc $37				adc 	zTemp0+1
.aec0					_M88NoAdd:
.aec0	6a		ror a				ror 	a
.aec1	66 36		ror $36				ror 	zTemp0  					; pull another bit out for the next iteration
.aec3	ca		dex				dex         						; inc/dec don't modify carry; only shifts and adds do
.aec4	d0 f5		bne $aebb			bne 	_M88Loop
.aec6	85 37		sta $37				sta 	zTemp0+1 					; store high 8 bits.
.aec8	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/utility.asm

.a1e1					NSMNegate:
.a1e1	bd 00 04	lda $0400,x			lda 	NSStatus,x
.a1e4	49 80		eor #$80			eor 	#NSBIsNegative
.a1e6	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a1e9	60		rts				rts
.a1ea					NSMNegateMantissa:
.a1ea	38		sec				sec
.a1eb	a9 00		lda #$00			lda 	#0
.a1ed	fd 08 04	sbc $0408,x			sbc 	NSMantissa0,x
.a1f0	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a1f3	a9 00		lda #$00			lda 	#0
.a1f5	fd 10 04	sbc $0410,x			sbc 	NSMantissa1,x
.a1f8	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a1fb	a9 00		lda #$00			lda 	#0
.a1fd	fd 18 04	sbc $0418,x			sbc 	NSMantissa2,x
.a200	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.a203	a9 00		lda #$00			lda 	#0
.a205	fd 20 04	sbc $0420,x			sbc 	NSMantissa3,x
.a208	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.a20b	60		rts				rts
.a20c					NSMShiftUpTwo:
.a20c	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.a20f	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.a212	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a215	9d 12 04	sta $0412,x			sta 	NSMantissa1+2,x
.a218	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.a21b	9d 1a 04	sta $041a,x			sta 	NSMantissa2+2,x
.a21e	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.a221	9d 22 04	sta $0422,x			sta 	NSMantissa3+2,x
.a224	bd 28 04	lda $0428,x			lda 	NSExponent,x
.a227	9d 2a 04	sta $042a,x			sta 	NSExponent+2,x
.a22a	bd 00 04	lda $0400,x			lda 	NSStatus,x
.a22d	9d 02 04	sta $0402,x			sta 	NSStatus+2,x
.a230	60		rts				rts
.a231					NSMSetZeroMantissaOnly:
.a231	a9 00		lda #$00			lda 	#0
.a233	80 08		bra $a23d			bra 	NSMSetMantissa
.a235					NSMSetZero:
.a235	a9 00		lda #$00			lda 	#0
.a237					NSMSetByte:
.a237	9e 28 04	stz $0428,x			stz 	NSExponent,x 				; zero exponent, as integer.
.a23a	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; status zero (integer)
.a23d					NSMSetMantissa:
.a23d	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; mantissa
.a240	9e 10 04	stz $0410,x			stz 	NSMantissa1,x
.a243	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.a246	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.a249	60		rts				rts
.a24a					NSMShiftLeft:
.a24a	18		clc				clc
.a24b					NSMRotateLeft:
.a24b	3e 08 04	rol $0408,x			rol 	NSMantissa0,x
.a24e	3e 10 04	rol $0410,x			rol		NSMantissa1,x
.a251	3e 18 04	rol $0418,x			rol		NSMantissa2,x
.a254	3e 20 04	rol $0420,x			rol		NSMantissa3,x
.a257	60		rts				rts
.a258					NSMShiftRight:
.a258	5e 20 04	lsr $0420,x			lsr 	NSMantissa3,x
.a25b	7e 18 04	ror $0418,x			ror		NSMantissa2,x
.a25e	7e 10 04	ror $0410,x			ror		NSMantissa1,x
.a261	7e 08 04	ror $0408,x			ror		NSMantissa0,x
.a264	60		rts				rts
.a265					NSMIsZero:
.a265	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.a268	1d 18 04	ora $0418,x			ora		NSMantissa2,x
.a26b	1d 10 04	ora $0410,x			ora		NSMantissa1,x
.a26e	1d 08 04	ora $0408,x			ora		NSMantissa0,x
.a271	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/asmcore.asm

.aec9					Assemble_ora:
.aec9	20 52 89	jsr $8952		jsr	AssembleGroup1
>aecc	01					.byte $01
.aecd					Assemble_and:
.aecd	20 52 89	jsr $8952		jsr	AssembleGroup1
>aed0	21					.byte $21
.aed1					Assemble_eor:
.aed1	20 52 89	jsr $8952		jsr	AssembleGroup1
>aed4	41					.byte $41
.aed5					Assemble_adc:
.aed5	20 52 89	jsr $8952		jsr	AssembleGroup1
>aed8	61					.byte $61
.aed9					Assemble_sta:
.aed9	20 52 89	jsr $8952		jsr	AssembleGroup1
>aedc	81					.byte $81
.aedd					Assemble_lda:
.aedd	20 52 89	jsr $8952		jsr	AssembleGroup1
>aee0	a1					.byte $a1
.aee1					Assemble_cmp:
.aee1	20 52 89	jsr $8952		jsr	AssembleGroup1
>aee4	c1					.byte $c1
.aee5					Assemble_sbc:
.aee5	20 52 89	jsr $8952		jsr	AssembleGroup1
>aee8	e1					.byte $e1
.aee9					Assemble_asl:
.aee9	20 59 89	jsr $8959		jsr	AssembleGroup2
>aeec	02					.byte $02
>aeed	75					.byte $75
.aeee					Assemble_rol:
.aeee	20 59 89	jsr $8959		jsr	AssembleGroup2
>aef1	22					.byte $22
>aef2	75					.byte $75
.aef3					Assemble_lsr:
.aef3	20 59 89	jsr $8959		jsr	AssembleGroup2
>aef6	42					.byte $42
>aef7	75					.byte $75
.aef8					Assemble_ror:
.aef8	20 59 89	jsr $8959		jsr	AssembleGroup2
>aefb	62					.byte $62
>aefc	75					.byte $75
.aefd					Assemble_stx:
.aefd	20 59 89	jsr $8959		jsr	AssembleGroup2
>af00	82					.byte $82
>af01	50					.byte $50
.af02					Assemble_ldx:
.af02	20 59 89	jsr $8959		jsr	AssembleGroup2
>af05	a2					.byte $a2
>af06	d0					.byte $d0
.af07					Assemble_dec:
.af07	20 59 89	jsr $8959		jsr	AssembleGroup2
>af0a	c2					.byte $c2
>af0b	55					.byte $55
.af0c					Assemble_inc:
.af0c	20 59 89	jsr $8959		jsr	AssembleGroup2
>af0f	e2					.byte $e2
>af10	55					.byte $55
.af11					Assemble_stz:
.af11	20 59 89	jsr $8959		jsr	AssembleGroup2
>af14	60					.byte $60
>af15	44					.byte $44
.af16					Assemble_bit:
.af16	20 59 89	jsr $8959		jsr	AssembleGroup2
>af19	20					.byte $20
>af1a	55					.byte $55
.af1b					Assemble_sty:
.af1b	20 59 89	jsr $8959		jsr	AssembleGroup2
>af1e	80					.byte $80
>af1f	54					.byte $54
.af20					Assemble_ldy:
.af20	20 59 89	jsr $8959		jsr	AssembleGroup2
>af23	a0					.byte $a0
>af24	d5					.byte $d5
.af25					Assemble_cpy:
.af25	20 59 89	jsr $8959		jsr	AssembleGroup2
>af28	c0					.byte $c0
>af29	d4					.byte $d4
.af2a					Assemble_cpx:
.af2a	20 59 89	jsr $8959		jsr	AssembleGroup2
>af2d	e0					.byte $e0
>af2e	d0					.byte $d0
.af2f					Assemble_tsb:
.af2f	20 59 89	jsr $8959		jsr	AssembleGroup2
>af32	00					.byte $00
>af33	50					.byte $50
.af34					Assemble_trb:
.af34	20 59 89	jsr $8959		jsr	AssembleGroup2
>af37	10					.byte $10
>af38	50					.byte $50
.af39					Assemble_jsr:
.af39	20 59 89	jsr $8959		jsr	AssembleGroup2
>af3c	14					.byte $14
>af3d	10					.byte $10
.af3e					Assemble_jmp:
.af3e	20 59 89	jsr $8959		jsr	AssembleGroup2
>af41	40					.byte $40
>af42	10					.byte $10
.af43					Assemble_bpl:
.af43	20 aa 89	jsr $89aa		jsr	AssembleGroup3
>af46	10					.byte $10
.af47					Assemble_bmi:
.af47	20 aa 89	jsr $89aa		jsr	AssembleGroup3
>af4a	30					.byte $30
.af4b					Assemble_bvc:
.af4b	20 aa 89	jsr $89aa		jsr	AssembleGroup3
>af4e	50					.byte $50
.af4f					Assemble_bvs:
.af4f	20 aa 89	jsr $89aa		jsr	AssembleGroup3
>af52	70					.byte $70
.af53					Assemble_bcc:
.af53	20 aa 89	jsr $89aa		jsr	AssembleGroup3
>af56	90					.byte $90
.af57					Assemble_bcs:
.af57	20 aa 89	jsr $89aa		jsr	AssembleGroup3
>af5a	b0					.byte $b0
.af5b					Assemble_bne:
.af5b	20 aa 89	jsr $89aa		jsr	AssembleGroup3
>af5e	d0					.byte $d0
.af5f					Assemble_beq:
.af5f	20 aa 89	jsr $89aa		jsr	AssembleGroup3
>af62	f0					.byte $f0
.af63					Assemble_bra:
.af63	20 aa 89	jsr $89aa		jsr	AssembleGroup3
>af66	80					.byte $80
.af67					Assemble_brk:
.af67	20 e0 89	jsr $89e0		jsr	AssembleGroup4
>af6a	00					.byte $00
.af6b					Assemble_php:
.af6b	20 e0 89	jsr $89e0		jsr	AssembleGroup4
>af6e	08					.byte $08
.af6f					Assemble_clc:
.af6f	20 e0 89	jsr $89e0		jsr	AssembleGroup4
>af72	18					.byte $18
.af73					Assemble_plp:
.af73	20 e0 89	jsr $89e0		jsr	AssembleGroup4
>af76	28					.byte $28
.af77					Assemble_sec:
.af77	20 e0 89	jsr $89e0		jsr	AssembleGroup4
>af7a	38					.byte $38
.af7b					Assemble_rti:
.af7b	20 e0 89	jsr $89e0		jsr	AssembleGroup4
>af7e	40					.byte $40
.af7f					Assemble_pha:
.af7f	20 e0 89	jsr $89e0		jsr	AssembleGroup4
>af82	48					.byte $48
.af83					Assemble_cli:
.af83	20 e0 89	jsr $89e0		jsr	AssembleGroup4
>af86	58					.byte $58
.af87					Assemble_phy:
.af87	20 e0 89	jsr $89e0		jsr	AssembleGroup4
>af8a	5a					.byte $5a
.af8b					Assemble_rts:
.af8b	20 e0 89	jsr $89e0		jsr	AssembleGroup4
>af8e	60					.byte $60
.af8f					Assemble_pla:
.af8f	20 e0 89	jsr $89e0		jsr	AssembleGroup4
>af92	68					.byte $68
.af93					Assemble_sei:
.af93	20 e0 89	jsr $89e0		jsr	AssembleGroup4
>af96	78					.byte $78
.af97					Assemble_ply:
.af97	20 e0 89	jsr $89e0		jsr	AssembleGroup4
>af9a	7a					.byte $7a
.af9b					Assemble_dey:
.af9b	20 e0 89	jsr $89e0		jsr	AssembleGroup4
>af9e	88					.byte $88
.af9f					Assemble_txa:
.af9f	20 e0 89	jsr $89e0		jsr	AssembleGroup4
>afa2	8a					.byte $8a
.afa3					Assemble_tya:
.afa3	20 e0 89	jsr $89e0		jsr	AssembleGroup4
>afa6	98					.byte $98
.afa7					Assemble_txs:
.afa7	20 e0 89	jsr $89e0		jsr	AssembleGroup4
>afaa	9a					.byte $9a
.afab					Assemble_tay:
.afab	20 e0 89	jsr $89e0		jsr	AssembleGroup4
>afae	a8					.byte $a8
.afaf					Assemble_tax:
.afaf	20 e0 89	jsr $89e0		jsr	AssembleGroup4
>afb2	aa					.byte $aa
.afb3					Assemble_clv:
.afb3	20 e0 89	jsr $89e0		jsr	AssembleGroup4
>afb6	b8					.byte $b8
.afb7					Assemble_tsx:
.afb7	20 e0 89	jsr $89e0		jsr	AssembleGroup4
>afba	ba					.byte $ba
.afbb					Assemble_iny:
.afbb	20 e0 89	jsr $89e0		jsr	AssembleGroup4
>afbe	c8					.byte $c8
.afbf					Assemble_dex:
.afbf	20 e0 89	jsr $89e0		jsr	AssembleGroup4
>afc2	ca					.byte $ca
.afc3					Assemble_cld:
.afc3	20 e0 89	jsr $89e0		jsr	AssembleGroup4
>afc6	d8					.byte $d8
.afc7					Assemble_phx:
.afc7	20 e0 89	jsr $89e0		jsr	AssembleGroup4
>afca	da					.byte $da
.afcb					Assemble_stp:
.afcb	20 e0 89	jsr $89e0		jsr	AssembleGroup4
>afce	db					.byte $db
.afcf					Assemble_inx:
.afcf	20 e0 89	jsr $89e0		jsr	AssembleGroup4
>afd2	e8					.byte $e8
.afd3					Assemble_nop:
.afd3	20 e0 89	jsr $89e0		jsr	AssembleGroup4
>afd6	ea					.byte $ea
.afd7					Assemble_sed:
.afd7	20 e0 89	jsr $89e0		jsr	AssembleGroup4
>afda	f8					.byte $f8
.afdb					Assemble_plx:
.afdb	20 e0 89	jsr $89e0		jsr	AssembleGroup4
>afde	fa					.byte $fa

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/constants.asm

.afdf					DecimalScalarTable:
>afdf	66 66 66 66				.dword $66666666 ; 0.1
>afe3	de					.byte $de
>afe4	1f 85 eb 51				.dword $51eb851f ; 0.01
>afe8	db					.byte $db
>afe9	4c 37 89 41				.dword $4189374c ; 0.001
>afed	d8					.byte $d8
>afee	ac 8b db 68				.dword $68db8bac ; 0.0001
>aff2	d4					.byte $d4
>aff3	24 d6 e2 53				.dword $53e2d624 ; 1e-05
>aff7	d1					.byte $d1
>aff8	83 de 1b 43				.dword $431bde83 ; 1e-06
>affc	ce					.byte $ce
>affd	6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>b001	ca					.byte $ca
>b002	89 3b e6 55				.dword $55e63b89 ; 1e-08
>b006	c7					.byte $c7
>b007	a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>b00b	c4					.byte $c4
>b00c	67 7f f3 6d				.dword $6df37f67 ; 1e-10
>b010	c0					.byte $c0
>b011	86 ff f5 57				.dword $57f5ff86 ; 1e-11
>b015	bd					.byte $bd

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.asm

.b016					SyntaxError:
.b016	a9 02		lda #$02		lda	#2
.b018	4c 7d 96	jmp $967d		jmp	ErrorHandler
.b01b					RangeError:
.b01b	a9 04		lda #$04		lda	#4
.b01d	4c 7d 96	jmp $967d		jmp	ErrorHandler
.b020					TypeError:
.b020	a9 05		lda #$05		lda	#5
.b022	4c 7d 96	jmp $967d		jmp	ErrorHandler
.b025					ArgumentError:
.b025	a9 07		lda #$07		lda	#7
.b027	4c 7d 96	jmp $967d		jmp	ErrorHandler
.b02a					NotDoneError:
.b02a	a9 0c		lda #$0c		lda	#12
.b02c	4c 7d 96	jmp $967d		jmp	ErrorHandler
.b02f					ErrorText:
>b02f	42 72 65 61 6b 00			.text	"Break",0
>b035	53 79 6e 74 61 78 20 65			.text	"Syntax error",0
>b03d	72 72 6f 72 00
>b042	44 69 76 69 73 69 6f 6e			.text	"Division by zero",0
>b04a	20 62 79 20 7a 65 72 6f 00
>b053	4f 75 74 20 6f 66 20 52			.text	"Out of Range",0
>b05b	61 6e 67 65 00
>b060	54 79 70 65 20 6d 69 73			.text	"Type mismatch",0
>b068	6d 61 74 63 68 00
>b06e	4f 75 74 20 6f 66 20 6d			.text	"Out of memory",0
>b076	65 6d 6f 72 79 00
>b07c	49 6c 6c 65 67 61 6c 20			.text	"Illegal argument",0
>b084	61 72 67 75 6d 65 6e 74 00
>b08d	53 74 6f 70 00				.text	"Stop",0
>b092	53 74 72 69 6e 67 20 74			.text	"String too long",0
>b09a	6f 6f 20 6c 6f 6e 67 00
>b0a2	41 73 73 65 72 74 69 6f			.text	"Assertion failed",0
>b0aa	6e 20 66 61 69 6c 65 64 00
>b0b3	4f 75 74 20 6f 66 20 64			.text	"Out of data",0
>b0bb	61 74 61 00
>b0bf	55 6e 69 6d 70 6c 65 6d			.text	"Unimplemented",0
>b0c7	65 6e 74 65 64 00
>b0cd	4e 6f 20 73 75 63 68 20			.text	"No such line number",0
>b0d5	6c 69 6e 65 20 6e 75 6d 62 65 72 00
>b0e1	52 65 74 75 72 6e 20 77			.text	"Return without Gosub",0
>b0e9	69 74 68 6f 75 74 20 47 6f 73 75 62 00
>b0f6	55 6e 74 69 6c 20 77 69			.text	"Until without Repeat",0
>b0fe	74 68 6f 75 74 20 52 65 70 65 61 74 00
>b10b	57 65 6e 64 20 77 69 74			.text	"Wend without While",0
>b113	68 6f 75 74 20 57 68 69 6c 65 00
>b11e	4e 65 78 74 20 77 69 74			.text	"Next without For",0
>b126	68 6f 75 74 20 46 6f 72 00
>b12f	42 41 53 49 43 20 53 74			.text	"BASIC Stack full",0
>b137	61 63 6b 20 66 75 6c 6c 00
>b140	4f 70 65 6e 20 53 74 72			.text	"Open Structure",0
>b148	75 63 74 75 72 65 00
>b14f	45 6e 64 50 72 6f 63 20			.text	"EndProc without call",0
>b157	77 69 74 68 6f 75 74 20 63 61 6c 6c 00
>b164	41 72 72 61 79 20 61 6c			.text	"Array already defined",0
>b16c	72 65 61 64 79 20 64 65 66 69 6e 65 64 00
>b17a	41 72 72 61 79 20 73 69			.text	"Array size",0
>b182	7a 65 00
>b185	42 61 64 20 61 72 72 61			.text	"Bad array index",0
>b18d	79 20 69 6e 64 65 78 00

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/timestamp.asm

>b195	42 75 69 6c 74 20 57 65			.text "Built Wednesday 12-Oct-2022. Build 1666."
>b19d	64 6e 65 73 64 61 79 20 31 32 2d 4f 63 74 2d 32
>b1ad	30 32 32 2e 20 42 75 69 6c 64 20 31 36 36 36 2e

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/hardware/junior/extern.asm

.b1bd					EXTInitialise:
.b1bd	64 01		stz $01				stz 	1
.b1bf	9c 04 d0	stz $d004			stz 	$D004
.b1c2	9c 08 d0	stz $d008			stz 	$D008
.b1c5	9c 09 d0	stz $d009			stz 	$D009
.b1c8	60		rts				rts
.b1c9					EXTPrintCharacter:
.b1c9	48		pha				pha
.b1ca	da		phx				phx
.b1cb	5a		phy				phy
.b1cc	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.b1cf	7a		ply				ply
.b1d0	fa		plx				plx
.b1d1	68		pla				pla
.b1d2	60		rts				rts
.b1d3					EXTInputSingleCharacter:
.b1d3	da		phx				phx
.b1d4	5a		phy				phy
.b1d5					_EISCWait:
.b1d5	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.b1d8	c9 00		cmp #$00			cmp 	#0
.b1da	f0 f9		beq $b1d5			beq 	_EISCWait
.b1dc	7a		ply				ply
.b1dd	fa		plx				plx
.b1de	60		rts				rts
.b1df					EXTInputLine:
.b1df	a2 00		ldx #$00			ldx 	#0 							; position in line <- start of line
.b1e1					_ILLoop:
.b1e1	da		phx				phx 								; read character in
.b1e2	20 cf ff	jsr $ffcf			jsr 	$FFCF
.b1e5	fa		plx				plx
.b1e6	c9 08		cmp #$08			cmp 	#8 							; backspace, CBM doesn't need this.
.b1e8	f0 12		beq $b1fc			beq 	_ILBackspace
.b1ea	c9 0d		cmp #$0d			cmp 	#13							; exit ?
.b1ec	f0 15		beq $b203			beq 	_ILExit
.b1ee	c9 20		cmp #$20			cmp 	#32 						; ignore other control
.b1f0	90 ef		bcc $b1e1			bcc 	_ILLoop
.b1f2	e0 50		cpx #$50			cpx 	#MaxLineSize 				; already full buffer
.b1f4	f0 eb		beq $b1e1			beq 	_ILLoop
.b1f6	9d a6 05	sta $05a6,x			sta 	lineBuffer,x 				; save it
.b1f9	e8		inx				inx
.b1fa	80 e5		bra $b1e1			bra 	_ILLoop
.b1fc					_ILBackspace:
.b1fc	e0 00		cpx #$00			cpx 	#0  						; can't backspace, start of line.
.b1fe	f0 e1		beq $b1e1			beq 	_ILLoop
.b200	ca		dex				dex 								; back one.
.b201	80 de		bra $b1e1			bra 	_ILLoop
.b203					_ILExit:
.b203	20 c9 b1	jsr $b1c9			jsr 	EXTPrintCharacter
.b206	9e a6 05	stz $05a6,x			stz 	lineBuffer,x 				; make ASCIIZ and exit with address in XA
.b209	60		rts				rts
.b20a					EXTBreakCheck:
.b20a	4c e1 ff	jmp $ffe1			jmp		$FFE1

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/delete.asm

.b20d					MemoryDeleteLine:
.b20d	20 2c b2	jsr $b22c			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.b210	b2 30		lda ($30)			lda 	(codePtr) 					; size to delete => y
.b212	a8		tay				tay
.b213					_MDDLLoop:
.b213	b1 30		lda ($30),y			lda 	(codePtr),y 				; copy down
.b215	92 30		sta ($30)			sta 	(codePtr)
.b217	a5 30		lda $30				lda 	codePtr 					; check done the lot.
.b219	c5 3a		cmp $3a				cmp 	zTemp2
.b21b	d0 07		bne $b224			bne 	_MDLDLNext
.b21d	a5 31		lda $31				lda 	codePtr+1
.b21f	c5 3b		cmp $3b				cmp 	zTemp2+1
.b221	d0 01		bne $b224			bne 	_MDLDLNext
.b223					_MDDLExit:
.b223	60		rts				rts
.b224					_MDLDLNext:
.b224	e6 30		inc $30				inc 	codePtr						; next byte
.b226	d0 eb		bne $b213			bne 	_MDDLLoop
.b228	e6 31		inc $31				inc 	codePtr+1
.b22a	80 e7		bra $b213			bra 	_MDDLLoop
.b22c					IMemoryFindEnd:
.b22c	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.b22e	85 3a		sta $3a				sta 	0+zTemp2
.b230	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.b232	85 3b		sta $3b				sta 	1+zTemp2
.b234					_MDLFELoop:
.b234	b2 3a		lda ($3a)			lda 	(zTemp2)
.b236	f0 0b		beq $b243			beq 	_MDLFEExit
.b238	18		clc				clc
.b239	65 3a		adc $3a				adc 	zTemp2
.b23b	85 3a		sta $3a				sta 	zTemp2
.b23d	90 f5		bcc $b234			bcc 	_MDLFELoop
.b23f	e6 3b		inc $3b				inc 	zTemp2+1
.b241	80 f1		bra $b234			bra 	_MDLFELoop
.b243					_MDLFEExit:
.b243	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/insert.asm

.b244					MemoryInsertLine:
.b244	08		php				php
.b245	20 2c b2	jsr $b22c			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.b248	a5 3b		lda $3b				lda 	zTemp2+1 					; space ?
.b24a	1a		inc a				inc 	a
.b24b	c9 7f		cmp #$7f			cmp 	#(BasicEnd >> 8)-1
.b24d	b0 36		bcs $b285			bcs 	_MDLIError
.b24f	28		plp				plp
.b250	90 08		bcc $b25a			bcc 	_MDLIFound
.b252	a5 3a		lda $3a				lda 	zTemp2 						; if CS on entry append.
.b254	85 30		sta $30				sta 	codePtr
.b256	a5 3b		lda $3b				lda 	zTemp2+1
.b258	85 31		sta $31				sta 	codePtr+1
.b25a					_MDLIFound:
.b25a	ad a6 04	lda $04a6			lda 	tokenOffset 				; insert gap in Y, the offset, e.g. length of the new line
.b25d	a8		tay				tay
.b25e					_MDLIInsert:
.b25e	b2 3a		lda ($3a)			lda 	(zTemp2) 					; shift one byte up , at least one covers end case.
.b260	91 3a		sta ($3a),y			sta 	(zTemp2),y 					; work from top down.
.b262	a5 30		lda $30				lda 	codePtr 					; done insert point ?
.b264	c5 3a		cmp $3a				cmp 	zTemp2
.b266	d0 06		bne $b26e			bne 	_MDLINext
.b268	a5 31		lda $31				lda 	codePtr+1
.b26a	c5 3b		cmp $3b				cmp 	zTemp2+1
.b26c	f0 0a		beq $b278			beq 	_MDLIHaveSpace
.b26e					_MDLINext:
.b26e	a5 3a		lda $3a				lda 	zTemp2 						; if no, keep zTemp2 going backwards
.b270	d0 02		bne $b274			bne 	_MDLINoBorrow
.b272	c6 3b		dec $3b				dec 	zTemp2+1
.b274					_MDLINoBorrow:
.b274	c6 3a		dec $3a				dec 	zTemp2
.b276	80 e6		bra $b25e			bra 	_MDLIInsert
.b278					_MDLIHaveSpace:
.b278	ac a6 04	ldy $04a6			ldy 	tokenOffset 				; bytes to copy
.b27b	88		dey				dey 								; from offset-1 to 0
.b27c					_MDLICopy:
.b27c	b9 a6 04	lda $04a6,y			lda 	tokenOffset,y
.b27f	91 30		sta ($30),y			sta 	(codePtr),y
.b281	88		dey				dey
.b282	10 f8		bpl $b27c			bpl 	_MDLICopy
.b284	60		rts				rts
.b285					_MDLIError:
.b285	a9 06		lda #$06		lda	#6
.b287	4c 7d 96	jmp $967d		jmp	ErrorHandler
.b28a					MDLAppendLine:
.b28a	86 37		stx $37				stx 	zTemp0+1 					; save new line at zTemp0
.b28c	85 36		sta $36				sta 	zTemp0
.b28e	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.b290	85 38		sta $38				sta 	0+zTemp1
.b292	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.b294	85 39		sta $39				sta 	1+zTemp1
.b296	b2 38		lda ($38)			lda 	(zTemp1)
.b298	d0 0a		bne $b2a4			bne 	_MDLANoInitialise
.b29a	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.b29c	8d 63 06	sta $0663			sta 	0+AppendPointer
.b29f	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.b2a1	8d 64 06	sta $0664			sta 	1+AppendPointer
.b2a4					_MDLANoInitialise:
.b2a4	18		clc				clc
.b2a5	ad 63 06	lda $0663			lda 	AppendPointer 				; copy append pointer to zTemp1 adding the offset as you go
.b2a8	85 38		sta $38				sta 	zTemp1
.b2aa	72 36		adc ($36)			adc 	(zTemp0)
.b2ac	8d 63 06	sta $0663			sta 	AppendPointer
.b2af	ad 64 06	lda $0664			lda 	AppendPointer+1
.b2b2	85 39		sta $39				sta 	zTemp1+1
.b2b4	69 00		adc #$00			adc 	#0
.b2b6	8d 64 06	sta $0664			sta 	AppendPointer+1
.b2b9	a0 00		ldy #$00			ldy 	#0
.b2bb					_MDLACopy:
.b2bb	b1 36		lda ($36),y			lda 	(zTemp0),y 					; copy new line in
.b2bd	91 38		sta ($38),y			sta 	(zTemp1),y
.b2bf	c8		iny				iny
.b2c0	98		tya				tya
.b2c1	d2 36		cmp ($36)			cmp 	(zTemp0) 					; done whole line
.b2c3	d0 f6		bne $b2bb			bne 	_MDLACopy
.b2c5	a9 00		lda #$00			lda 	#0 							; end of program.
.b2c7	91 38		sta ($38),y			sta 	(zTemp1),y
.b2c9	60		rts				rts
.0663					AppendPointer:
>0663							.fill 	2

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/memory.asm

.a272					MemoryNew:
.a272	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a274	85 30		sta $30				sta 	codePtr
.a276	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a278	85 31		sta $31				sta 	codePtr+1
.a27a	a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.a27c	92 30		sta ($30)			sta 	(codePtr)
.a27e	60		rts				rts
.a27f					MemoryInline:
.a27f	98		tya				tya 								; put address into stack,x
.a280	18		clc				clc
.a281	65 30		adc $30				adc 	codePtr
.a283	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a286	a5 31		lda $31				lda 	codePtr+1
.a288	69 00		adc #$00			adc 	#0
.a28a	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a28d	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.a290	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.a293	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/search.asm

.a294					MemorySearch:
.a294	85 36		sta $36				sta 	zTemp0 						; save line number zTemp0
.a296	86 37		stx $37				stx 	zTemp0+1
.a298	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a29a	85 30		sta $30				sta 	codePtr
.a29c	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a29e	85 31		sta $31				sta 	codePtr+1
.a2a0					_MTAXLoop:
.a2a0	b2 30		lda ($30)			lda 	(codePtr)
.a2a2	18		clc				clc
.a2a3	f0 21		beq $a2c6			beq 	_MTAXExit 					; reached end, exit with CC.
.a2a5	a0 01		ldy #$01			ldy 	#1 							; calculate current line# - requested line#
.a2a7	b1 30		lda ($30),y			lda 	(codePtr),y
.a2a9	38		sec				sec
.a2aa	e5 36		sbc $36				sbc 	zTemp0
.a2ac	85 38		sta $38				sta 	zTemp1 						; save interim to set Z
.a2ae	c8		iny				iny 								; do the MSB
.a2af	b1 30		lda ($30),y			lda 	(codePtr),y
.a2b1	e5 37		sbc $37				sbc 	zTemp0+1
.a2b3	05 38		ora $38				ora 	zTemp1
.a2b5	f0 0f		beq $a2c6			beq 	_MTAXExit	 				; found
.a2b7	b0 0d		bcs $a2c6			bcs 	_MTAXExit 					; current < required exit
.a2b9	18		clc				clc
.a2ba	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.a2bc	65 30		adc $30				adc 	codePtr
.a2be	85 30		sta $30				sta 	codePtr
.a2c0	90 02		bcc $a2c4			bcc 	_CREExit
.a2c2	e6 31		inc $31				inc 	codePtr+1
.a2c4					_CREExit:
.a2c4	80 da		bra $a2a0			bra 	_MTAXLoop
.a2c6					_MTAXExit:
.a2c6	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/bytes.asm

.a2c7					StackPushByte:
.a2c7	48		pha				pha 								; save byte
.a2c8	a5 34		lda $34				lda 	BasicStack
.a2ca	d0 09		bne $a2d5			bne 	_SPBNoBorrow
.a2cc	c6 35		dec $35				dec 	BasicStack+1
.a2ce	48		pha				pha
.a2cf	a5 35		lda $35				lda 	BasicStack+1
.a2d1	c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.a2d3	90 06		bcc $a2db			bcc 	_SPBMemory
.a2d5					_SPBNoBorrow:
.a2d5	c6 34		dec $34				dec 	BasicStack
.a2d7	68		pla				pla 								; get back and write
.a2d8	92 34		sta ($34)			sta 	(BasicStack)
.a2da	60		rts				rts
.a2db					_SPBMemory:
.a2db	a9 12		lda #$12		lda	#18
.a2dd	4c 7d 96	jmp $967d		jmp	ErrorHandler
.a2e0					StackPopByte:
.a2e0	b2 34		lda ($34)			lda 	(BasicStack)
.a2e2	e6 34		inc $34				inc 	BasicStack
.a2e4	d0 02		bne $a2e8			bne 	_SPBNoCarry
.a2e6	e6 35		inc $35				inc 	BasicStack+1
.a2e8					_SPBNoCarry:
.a2e8	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/frames.asm

.a2e9					StackOpen:
.a2e9	48		pha				pha 								; save frame byte
.a2ea	29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.a2ec	0a		asl a				asl 	a 							; claim twice this for storage
.a2ed	49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.a2ef	38		sec				sec 								; so basically subtracting from
.a2f0	65 34		adc $34				adc 	basicStack 	 				; basicStack
.a2f2	85 34		sta $34				sta 	basicStack
.a2f4	b0 08		bcs $a2fe			bcs 	_SONoBorrow
.a2f6	c6 35		dec $35				dec 	basicStack+1
.a2f8	a5 35		lda $35				lda 	basicStack+1 				; have we reached stack overflow
.a2fa	c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.a2fc	90 04		bcc $a302			bcc 	_SOMemory
.a2fe					_SONoBorrow:
.a2fe	68		pla				pla 								; get marker back and write at TOS
.a2ff	92 34		sta ($34)			sta 	(basicStack)
.a301	60		rts				rts
.a302					_SOMemory:
.a302	a9 12		lda #$12		lda	#18
.a304	4c 7d 96	jmp $967d		jmp	ErrorHandler
.a307					StackClose:
.a307	b2 34		lda ($34)			lda 	(basicStack) 				; get TOS marker
.a309	29 0f		and #$0f			and 	#$0F 						; bytes to add back
.a30b	0a		asl a				asl 	a 							; claim twice this.
.a30c	65 34		adc $34				adc 	basicStack 					; add to the stack pointer.
.a30e	85 34		sta $34				sta 	basicStack
.a310	90 02		bcc $a314			bcc 	_SCExit
.a312	e6 35		inc $35				inc 	basicStack+1
.a314					_SCExit:
.a314	60		rts				rts
.a315					StackCheckFrame:
.a315	48		pha				pha
.a316					_StackRemoveLocals:
.a316	b2 34		lda ($34)			lda 	(basicStack) 				; check for local, keep popping them
.a318	c9 03		cmp #$03			cmp 	#STK_LOCALS+1
.a31a	b0 05		bcs $a321			bcs 	_SCNoLocal
.a31c	20 d7 a9	jsr $a9d7			jsr 	LocalPopValue
.a31f	80 f5		bra $a316			bra 	_StackRemoveLocals
.a321					_SCNoLocal:
.a321	68		pla				pla
.a322	52 34		eor ($34)			eor 	(basicStack) 				; xor with toS marker
.a324	29 f0		and #$f0			and 	#$F0 						; check type bits
.a326	d0 01		bne $a329			bne 	_SCFError 					; different, we have structures mixed up
.a328	60		rts				rts
.a329					_SCFError:
.a329	8a		txa				txa 								; report error X
.a32a	4c 7d 96	jmp $967d			jmp 	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/location.asm

.a32d					STKSaveCodePosition:
.a32d	5a		phy				phy
.a32e	98		tya				tya 								; save Y
.a32f	a0 05		ldy #$05			ldy 	#5
.a331	91 34		sta ($34),y			sta 	(basicStack),y
.a333	88		dey				dey 								; save Code Pointer
.a334					_STKSaveLoop:
.a334	b9 2f 00	lda $002f,y			lda 	safePtr-1,y 				; allows us to access the pointer w/out issues.
.a337	91 34		sta ($34),y			sta 	(basicStack),y
.a339	88		dey				dey
.a33a	d0 f8		bne $a334			bne 	_STKSaveLoop
.a33c	7a		ply				ply
.a33d	60		rts				rts
.a33e					STKLoadCodePosition:
.a33e	a0 01		ldy #$01			ldy 	#1 							; load code pointer back
.a340					_STKLoadLoop:
.a340	b1 34		lda ($34),y			lda 	(basicStack),y
.a342	99 2f 00	sta $002f,y			sta 	safePtr-1,y
.a345	c8		iny				iny
.a346	c0 05		cpy #$05			cpy 	#5
.a348	d0 f6		bne $a340			bne 	_STKLoadLoop
.a34a	b1 34		lda ($34),y			lda 	(basicStack),y 				; get Y offset
.a34c	a8		tay				tay
.a34d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/setup.asm

.a34e					StackReset:
.a34e	a9 ff		lda #$ff			lda 	#((BasicStackBase+BasicStackSize-1) & $FF)
.a350	85 34		sta $34				sta 	0+basicStack
.a352	a9 0f		lda #$0f			lda 	#((BasicStackBase+BasicStackSize-1) >> 8)
.a354	85 35		sta $35				sta 	1+basicStack
.a356	a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.a358	92 34		sta ($34)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.a35a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/concrete.asm

.b2ca					StringConcrete:
.b2ca	5a		phy				phy 								; save position on stack
.b2cb	20 44 9f	jsr $9f44			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.b2ce	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy target string to zTemp1
.b2d1	85 38		sta $38				sta 	zTemp1
.b2d3	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.b2d6	85 39		sta $39				sta 	zTemp1+1
.b2d8	a0 ff		ldy #$ff			ldy 	#$FF	 					; calculate string length
.b2da					_SALength:
.b2da	c8		iny				iny
.b2db	b1 38		lda ($38),y			lda 	(zTemp1),y
.b2dd	d0 fb		bne $b2da			bne 	_SALength
.b2df	c0 fd		cpy #$fd			cpy 	#253 						; string too long
.b2e1	b0 3f		bcs $b322			bcs 	_SALengthError
.b2e3	98		tya				tya 				 				; length of the new string
.b2e4	18		clc				clc
.b2e5	69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.b2e7	90 02		bcc $b2eb			bcc 	_SAHaveLength
.b2e9	a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.b2eb					_SAHaveLength:
.b2eb	48		pha				pha 								; save length.
.b2ec	38		sec				sec
.b2ed	49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.b2ef	6d 8e 04	adc $048e			adc 	StringMemory
.b2f2	8d 8e 04	sta $048e			sta 	StringMemory
.b2f5	85 3a		sta $3a				sta 	zTemp2 						; update storage address
.b2f7	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; update mantissa address
.b2fa	a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.b2fc	6d 8f 04	adc $048f			adc 	StringMemory+1
.b2ff	8d 8f 04	sta $048f			sta 	StringMemory+1
.b302	85 3b		sta $3b				sta 	zTemp2+1
.b304	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.b307	68		pla				pla 								; save length-3 (chars allowed) in first byte
.b308	38		sec				sec
.b309	e9 03		sbc #$03			sbc 	#3
.b30b	92 3a		sta ($3a)			sta 	(zTemp2)
.b30d	a9 00		lda #$00			lda 	#0 							; clear the status byte.
.b30f	a0 01		ldy #$01			ldy 	#1
.b311	91 3a		sta ($3a),y			sta 	(zTemp2),y
.b313					_SACopyNewString:
.b313	a0 00		ldy #$00			ldy 	#0
.b315					_SACopyNSLoop:
.b315	b1 38		lda ($38),y			lda 	(zTemp1),y 					; get character
.b317	c8		iny				iny 								; write two on in string storage
.b318	c8		iny				iny
.b319	91 3a		sta ($3a),y			sta 	(zTemp2),y
.b31b	88		dey				dey 								; this makes it one one.
.b31c	c9 00		cmp #$00			cmp 	#0 							; until EOS copied
.b31e	d0 f5		bne $b315			bne 	_SACopyNSLoop
.b320	7a		ply				ply
.b321	60		rts				rts
.b322					_SALengthError:
.b322	a9 09		lda #$09		lda	#9
.b324	4c 7d 96	jmp $967d		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/stringalloc.asm

.b327					StringSystemInitialise:
.b327	a9 ff		lda #$ff			lda 	#((EndVariableSpace-1) & $FF)
.b329	8d 8e 04	sta $048e			sta 	0+StringMemory
.b32c	a9 1f		lda #$1f			lda 	#((EndVariableSpace-1) >> 8)
.b32e	8d 8f 04	sta $048f			sta 	1+StringMemory
.b331	9c ff 1f	stz $1fff			stz 	EndVariableSpace-1 			; put a zero at the end, so know end of string memory.
.b334	60		rts				rts
.b335					StringSpaceInitialise:
.b335	20 44 9f	jsr $9f44			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.b338	a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.b33a	8d 90 04	sta $0490			sta 	StringInitialised
.b33d	ad 8e 04	lda $048e			lda 	StringMemory 				; allocate 256 bytes for one concreted string
.b340	8d 91 04	sta $0491			sta 	StringTempPointer
.b343	ad 8f 04	lda $048f			lda 	StringMemory+1
.b346	3a		dec a				dec 	a
.b347	8d 92 04	sta $0492			sta 	StringTempPointer+1
.b34a	60		rts				rts
.b34b					StringTempAllocate:
.b34b	c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.b34d	b0 35		bcs $b384			bcs 	_STALength
.b34f	2c 90 04	bit $0490			bit 	StringInitialised 			; already initialised
.b352	30 05		bmi $b359			bmi 	_STAAllocate
.b354	48		pha				pha 								; save value to subtract.
.b355	20 35 b3	jsr $b335			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.b358	68		pla				pla 								; restore it
.b359					_STAAllocate:
.b359	49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.b35b	18		clc				clc  								; deliberate allows one more
.b35c	6d 91 04	adc $0491			adc 	StringTempPointer 			; subtract from temp pointer
.b35f	8d 91 04	sta $0491			sta 	StringTempPointer
.b362	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; address in mantissa
.b365	85 3c		sta $3c				sta 	zsTemp 						; and zsTemp
.b367	ad 92 04	lda $0492			lda 	StringTempPointer+1
.b36a	69 ff		adc #$ff			adc 	#$FF
.b36c	8d 92 04	sta $0492			sta 	StringTempPointer+1
.b36f	85 3d		sta $3d				sta 	zsTemp+1
.b371	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.b374	9e 18 04	stz $0418,x			stz 	NSMantissa2,x 				; set the typing data
.b377	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.b37a	a9 10		lda #$10			lda 	#NSTString
.b37c	9d 00 04	sta $0400,x			sta 	NSStatus,x
.b37f	a9 00		lda #$00			lda 	#0 							; clear the target string
.b381	92 3c		sta ($3c)			sta 	(zsTemp)
.b383	60		rts				rts
.b384					_STALength:
.b384	a9 09		lda #$09		lda	#9
.b386	4c 7d 96	jmp $967d		jmp	ErrorHandler
.b389					StringTempWrite:
.b389	48		pha				pha
.b38a	92 3c		sta ($3c)			sta 	(zsTemp)
.b38c	e6 3c		inc $3c				inc 	zsTemp
.b38e	d0 02		bne $b392			bne 	_STWNoCarry
.b390	e6 3d		inc $3d				inc 	zsTemp+1
.b392					_STWNoCarry:
.b392	a9 00		lda #$00			lda 	#0
.b394	92 3c		sta ($3c)			sta 	(zsTemp)
.b396	68		pla				pla
.b397	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/backload.asm

.a35b					BackloadProgram:
.a35b	a2 ff		ldx #$ff			ldx 	#$FF
.a35d	20 85 a3	jsr $a385			jsr 	BLReadByte
.a360	30 1f		bmi $a381			bmi 	_BPExit
.a362					_BPCopy:
.a362	e8		inx				inx  								; copy byte in
.a363	9d a6 05	sta $05a6,x			sta 	lineBuffer,x
.a366	9e a7 05	stz $05a7,x			stz 	lineBuffer+1,x
.a369	20 85 a3	jsr $a385			jsr 	BLReadByte 					; read next byte
.a36c	30 0a		bmi $a378			bmi 	_BPEndLine 					; -ve = EOL
.a36e	c9 09		cmp #$09			cmp 	#9 							; handle TAB
.a370	d0 02		bne $a374			bne 	_BPNotTab
.a372	a9 20		lda #$20			lda 	#' '
.a374					_BPNotTab:
.a374	c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.a376	b0 ea		bcs $a362			bcs 	_BPCopy
.a378					_BPEndLine:
.a378	20 28 a7	jsr $a728			jsr 	TokeniseLine 				; tokenise the line.
.a37b	38		sec				sec 								; append not insert
.a37c	20 44 b2	jsr $b244			jsr 	MemoryInsertLine 			; append to current program
.a37f	80 da		bra $a35b			bra 	BackloadProgram
.a381					_BPExit:
.a381	20 58 8c	jsr $8c58			jsr 	ClearCommand 				; clear variables etc.
.a384	60		rts				rts
.a385					BLReadByte:
.a385					_BLLoad:
.a385	ad 00 30	lda $3000			lda 	$3000 						; hardcoded in the makefile.
.a388	ee 86 a3	inc $a386			inc 	_BLLoad+1
.a38b	d0 03		bne $a390			bne 	_BLNoCarry
.a38d	ee 87 a3	inc $a387			inc 	_BLLoad+2
.a390					_BLNoCarry:
.a390	c9 00		cmp #$00			cmp 	#0
.a392	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/searchtokens.asm

.a393					TokeniseSearchTable:
.a393	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token.
.a395	85 36		sta $36				sta 	zTemp0
.a397	a0 00		ldy #$00			ldy 	#0
.a399	a9 80		lda #$80			lda 	#$80 						; token #
.a39b	85 38		sta $38				sta 	zTemp1
.a39d					_TSTLoop:
.a39d	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.a39f	30 49		bmi $a3ea			bmi 	_TSTFail 					; -ve = end of table
.a3a1	f0 2e		beq $a3d1			beq 	_TSTNext 					; zero, check next it's a dummy
.a3a3	c8		iny				iny 								; get the hash
.a3a4	b1 36		lda ($36),y			lda 	(zTemp0),y
.a3a6	88		dey				dey
.a3a7	cd 83 04	cmp $0483			cmp 	identHash 					; check they match, if not go to next
.a3aa	d0 25		bne $a3d1			bne 	_TSTNext
.a3ac	ad 82 04	lda $0482			lda 	identTypeEnd 				; length of identifier
.a3af	38		sec				sec
.a3b0	ed 80 04	sbc $0480			sbc 	identStart
.a3b3	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; no match, then return.
.a3b5	d0 1a		bne $a3d1			bne 	_TSTNext
.a3b7	5a		phy				phy 								; save Y , we might fail
.a3b8	c8		iny				iny 								; point to text
.a3b9	c8		iny				iny
.a3ba	ae 80 04	ldx $0480			ldx 	identStart 					; offset in line buffer in X
.a3bd					_TSTCompareName:
.a3bd	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; compare text.
.a3c0	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.a3c2	d0 0c		bne $a3d0			bne 	_TSTNextPullY 				; fail, pullY and do next
.a3c4	e8		inx				inx
.a3c5	c8		iny				iny
.a3c6	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; complete match.
.a3c9	d0 f2		bne $a3bd			bne 	_TSTCompareName
.a3cb	7a		ply				ply 								; throw Y
.a3cc	a5 38		lda $38				lda 	zTemp1 						; get token #
.a3ce	38		sec				sec 								; return with CS = passed.
.a3cf	60		rts				rts
.a3d0					_TSTNextPullY:
.a3d0	7a		ply				ply 								; restore current, fall through.
.a3d1					_TSTNext:
.a3d1	e6 38		inc $38				inc 	zTemp1 						; token counter
.a3d3	98		tya				tya
.a3d4	18		clc				clc
.a3d5	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.a3d7	1a		inc a				inc 	a 							; +1
.a3d8	1a		inc a				inc 	a 							; +2
.a3d9	a8		tay				tay
.a3da	10 c1		bpl $a39d			bpl 	_TSTLoop 					; if Y < $80 loop back
.a3dc	98		tya				tya 								; add Y to zTemp0 and reset Y
.a3dd	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.a3df	18		clc				clc  								; but have tables > 255 bytes
.a3e0	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.a3e2	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.a3e4	90 b7		bcc $a39d			bcc 	_TSTLoop
.a3e6	e6 37		inc $37				inc 	zTemp0+1
.a3e8	80 b3		bra $a39d			bra 	_TSTLoop
.a3ea					_TSTFail:
.a3ea	18		clc				clc
.a3eb	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/tokenise.asm


;******  Processing file: ./common/tokeniser/../generated/kwdtext.dat

.a3ec					KeywordSet0:
>a3ec	00 65					.text	0,$65,""               ; $80 !0:EOF
>a3ee	00 58					.text	0,$58,""               ; $81 !1:SH1
>a3f0	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>a3f2	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $83 ABS(
>a3f8	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $84 ALLOC(
>a400	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $85 ASC(
>a406	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $86 CHR$(
>a40d	06 aa 45 56 45 4e 54 28			.text	6,$aa,"EVENT("         ; $87 EVENT(
>a415	05 6b 46 41 4c 53 45			.text	5,$6b,"FALSE"          ; $88 FALSE
>a41c	05 44 46 52 41 43 28			.text	5,$44,"FRAC("          ; $89 FRAC(
>a423	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $8a INT(
>a429	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $8b ISVAL(
>a431	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $8c LEFT$(
>a439	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $8d LEN(
>a43f	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $8e MID$(
>a446	04 19 4e 4f 54 28			.text	4,$19,"NOT("           ; $8f NOT(
>a44c	03 db 4f 46 46				.text	3,$db,"OFF"            ; $90 OFF
>a451	02 9d 4f 4e				.text	2,$9d,"ON"             ; $91 ON
>a455	07 e9 52 41 4e 44 4f 4d			.text	7,$e9,"RANDOM("        ; $92 RANDOM(
>a45d	28
>a45e	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $93 RIGHT$(
>a466	28
>a467	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $94 RND(
>a46d	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $95 SGN(
>a473	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $96 SPC(
>a479	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $97 STR$(
>a480	06 a9 54 49 4d 45 52 28			.text	6,$a9,"TIMER("         ; $98 TIMER(
>a488	04 40 54 52 55 45			.text	4,$40,"TRUE"           ; $99 TRUE
>a48e	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $9a VAL(
>a494	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $9b FOR
>a499	02 8f 49 46				.text	2,$8f,"IF"             ; $9c IF
>a49d	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $9d PROC
>a4a3	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $9e REPEAT
>a4ab	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $9f WHILE
>a4b2	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $a0 ENDIF
>a4b9	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $a1 ENDPROC
>a4c1	43
>a4c2	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $a2 NEXT
>a4c8	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $a3 THEN
>a4ce	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $a4 UNTIL
>a4d5	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $a5 WEND
>a4db	02 9b 42 59				.text	2,$9b,"BY"             ; $a6 BY
>a4df	04 1c 43 41 4c 4c			.text	4,$1c,"CALL"           ; $a7 CALL
>a4e5	06 b2 43 49 52 43 4c 45			.text	6,$b2,"CIRCLE"         ; $a8 CIRCLE
>a4ed	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $a9 CLS
>a4f2	05 7f 43 4f 4c 4f 52			.text	5,$7f,"COLOR"          ; $aa COLOR
>a4f9	06 d4 43 4f 4c 4f 55 52			.text	6,$d4,"COLOUR"         ; $ab COLOUR
>a501	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $ac DATA
>a507	03 da 44 49 4d				.text	3,$da,"DIM"            ; $ad DIM
>a50c	06 db 44 4f 57 4e 54 4f			.text	6,$db,"DOWNTO"         ; $ae DOWNTO
>a514	04 29 45 4c 53 45			.text	4,$29,"ELSE"           ; $af ELSE
>a51a	03 e5 47 46 58				.text	3,$e5,"GFX"            ; $b0 GFX
>a51f	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $b1 GOSUB
>a526	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $b2 GOTO
>a52c	04 24 48 45 52 45			.text	4,$24,"HERE"           ; $b3 HERE
>a532	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $b4 LET
>a537	04 28 4c 49 4e 45			.text	4,$28,"LINE"           ; $b5 LINE
>a53d	05 6b 4c 4f 43 41 4c			.text	5,$6b,"LOCAL"          ; $b6 LOCAL
>a544	07 20 4f 55 54 4c 49 4e			.text	7,$20,"OUTLINE"        ; $b7 OUTLINE
>a54c	45
>a54d	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $b8 PRINT
>a554	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $b9 READ
>a55a	04 2e 52 45 43 54			.text	4,$2e,"RECT"           ; $ba RECT
>a560	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $bb REM
>a565	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $bc RETURN
>a56d	05 7b 53 4f 4c 49 44			.text	5,$7b,"SOLID"          ; $bd SOLID
>a574	06 d7 53 50 52 49 54 45			.text	6,$d7,"SPRITE"         ; $be SPRITE
>a57c	04 45 54 45 58 54			.text	4,$45,"TEXT"           ; $bf TEXT
>a582	02 a3 54 4f				.text	2,$a3,"TO"             ; $c0 TO
>a586	ff					.text	$FF
.a587					KeywordSet1:
>a587	00 65					.text	0,$65,""               ; $80 !0:EOF
>a589	00 58					.text	0,$58,""               ; $81 !1:SH1
>a58b	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>a58d	08 4c 41 53 53 45 4d 42			.text	8,$4c,"ASSEMBLE"       ; $83 ASSEMBLE
>a595	4c 45
>a597	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $84 ASSERT
>a59f	06 bd 42 49 54 4d 41 50			.text	6,$bd,"BITMAP"         ; $85 BITMAP
>a5a7	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $86 CLEAR
>a5ae	03 d7 45 4e 44				.text	3,$d7,"END"            ; $87 END
>a5b3	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $88 LIST
>a5b9	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $89 NEW
>a5be	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $8a RESTORE
>a5c6	45
>a5c7	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $8b RUN
>a5cc	07 2a 53 50 52 49 54 45			.text	7,$2a,"SPRITES"        ; $8c SPRITES
>a5d4	53
>a5d5	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $8d STOP
>a5db	ff					.text	$FF
.a5dc					KeywordSet2:
>a5dc	00 65					.text	0,$65,""               ; $80 !0:EOF
>a5de	00 58					.text	0,$58,""               ; $81 !1:SH1
>a5e0	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>a5e2	03 c8 41 44 43				.text	3,$c8,"ADC"            ; $83 ADC
>a5e7	03 d3 41 4e 44				.text	3,$d3,"AND"            ; $84 AND
>a5ec	03 e0 41 53 4c				.text	3,$e0,"ASL"            ; $85 ASL
>a5f1	03 c8 42 43 43				.text	3,$c8,"BCC"            ; $86 BCC
>a5f6	03 d8 42 43 53				.text	3,$d8,"BCS"            ; $87 BCS
>a5fb	03 d8 42 45 51				.text	3,$d8,"BEQ"            ; $88 BEQ
>a600	03 df 42 49 54				.text	3,$df,"BIT"            ; $89 BIT
>a605	03 d8 42 4d 49				.text	3,$d8,"BMI"            ; $8a BMI
>a60a	03 d5 42 4e 45				.text	3,$d5,"BNE"            ; $8b BNE
>a60f	03 de 42 50 4c				.text	3,$de,"BPL"            ; $8c BPL
>a614	03 d5 42 52 41				.text	3,$d5,"BRA"            ; $8d BRA
>a619	03 df 42 52 4b				.text	3,$df,"BRK"            ; $8e BRK
>a61e	03 db 42 56 43				.text	3,$db,"BVC"            ; $8f BVC
>a623	03 eb 42 56 53				.text	3,$eb,"BVS"            ; $90 BVS
>a628	03 d2 43 4c 43				.text	3,$d2,"CLC"            ; $91 CLC
>a62d	03 d3 43 4c 44				.text	3,$d3,"CLD"            ; $92 CLD
>a632	03 d8 43 4c 49				.text	3,$d8,"CLI"            ; $93 CLI
>a637	03 e5 43 4c 56				.text	3,$e5,"CLV"            ; $94 CLV
>a63c	03 e0 43 4d 50				.text	3,$e0,"CMP"            ; $95 CMP
>a641	03 eb 43 50 58				.text	3,$eb,"CPX"            ; $96 CPX
>a646	03 ec 43 50 59				.text	3,$ec,"CPY"            ; $97 CPY
>a64b	03 cc 44 45 43				.text	3,$cc,"DEC"            ; $98 DEC
>a650	03 e1 44 45 58				.text	3,$e1,"DEX"            ; $99 DEX
>a655	03 e2 44 45 59				.text	3,$e2,"DEY"            ; $9a DEY
>a65a	03 e6 45 4f 52				.text	3,$e6,"EOR"            ; $9b EOR
>a65f	03 da 49 4e 43				.text	3,$da,"INC"            ; $9c INC
>a664	03 ef 49 4e 58				.text	3,$ef,"INX"            ; $9d INX
>a669	03 f0 49 4e 59				.text	3,$f0,"INY"            ; $9e INY
>a66e	03 e7 4a 4d 50				.text	3,$e7,"JMP"            ; $9f JMP
>a673	03 ef 4a 53 52				.text	3,$ef,"JSR"            ; $a0 JSR
>a678	03 d1 4c 44 41				.text	3,$d1,"LDA"            ; $a1 LDA
>a67d	03 e8 4c 44 58				.text	3,$e8,"LDX"            ; $a2 LDX
>a682	03 e9 4c 44 59				.text	3,$e9,"LDY"            ; $a3 LDY
>a687	03 f1 4c 53 52				.text	3,$f1,"LSR"            ; $a4 LSR
>a68c	03 ed 4e 4f 50				.text	3,$ed,"NOP"            ; $a5 NOP
>a691	03 e2 4f 52 41				.text	3,$e2,"ORA"            ; $a6 ORA
>a696	03 d9 50 48 41				.text	3,$d9,"PHA"            ; $a7 PHA
>a69b	03 e8 50 48 50				.text	3,$e8,"PHP"            ; $a8 PHP
>a6a0	03 f0 50 48 58				.text	3,$f0,"PHX"            ; $a9 PHX
>a6a5	03 f1 50 48 59				.text	3,$f1,"PHY"            ; $aa PHY
>a6aa	03 dd 50 4c 41				.text	3,$dd,"PLA"            ; $ab PLA
>a6af	03 ec 50 4c 50				.text	3,$ec,"PLP"            ; $ac PLP
>a6b4	03 f4 50 4c 58				.text	3,$f4,"PLX"            ; $ad PLX
>a6b9	03 f5 50 4c 59				.text	3,$f5,"PLY"            ; $ae PLY
>a6be	03 ed 52 4f 4c				.text	3,$ed,"ROL"            ; $af ROL
>a6c3	03 f3 52 4f 52				.text	3,$f3,"ROR"            ; $b0 ROR
>a6c8	03 ef 52 54 49				.text	3,$ef,"RTI"            ; $b1 RTI
>a6cd	03 f9 52 54 53				.text	3,$f9,"RTS"            ; $b2 RTS
>a6d2	03 d8 53 42 43				.text	3,$d8,"SBC"            ; $b3 SBC
>a6d7	03 db 53 45 43				.text	3,$db,"SEC"            ; $b4 SEC
>a6dc	03 dc 53 45 44				.text	3,$dc,"SED"            ; $b5 SED
>a6e1	03 e1 53 45 49				.text	3,$e1,"SEI"            ; $b6 SEI
>a6e6	03 e8 53 54 41				.text	3,$e8,"STA"            ; $b7 STA
>a6eb	03 f7 53 54 50				.text	3,$f7,"STP"            ; $b8 STP
>a6f0	03 ff 53 54 58				.text	3,$ff,"STX"            ; $b9 STX
>a6f5	03 00 53 54 59				.text	3,$00,"STY"            ; $ba STY
>a6fa	03 01 53 54 5a				.text	3,$01,"STZ"            ; $bb STZ
>a6ff	03 ed 54 41 58				.text	3,$ed,"TAX"            ; $bc TAX
>a704	03 ee 54 41 59				.text	3,$ee,"TAY"            ; $bd TAY
>a709	03 e8 54 52 42				.text	3,$e8,"TRB"            ; $be TRB
>a70e	03 e9 54 53 42				.text	3,$e9,"TSB"            ; $bf TSB
>a713	03 ff 54 53 58				.text	3,$ff,"TSX"            ; $c0 TSX
>a718	03 ed 54 58 41				.text	3,$ed,"TXA"            ; $c1 TXA
>a71d	03 ff 54 58 53				.text	3,$ff,"TXS"            ; $c2 TXS
>a722	03 ee 54 59 41				.text	3,$ee,"TYA"            ; $c3 TYA
>a727	ff					.text	$FF

;******  Return to file: ./common/tokeniser/tokenise.asm

.a728					TokeniseLine:
.a728	20 b0 a8	jsr $a8b0			jsr 	FixLineBufferCase 			; fix line case
.a72b	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.a72d	8d a6 04	sta $04a6			sta 	tokenOffset
.a730	9c a7 04	stz $04a7			stz 	tokenLineNumber
.a733	9c a8 04	stz $04a8			stz 	tokenLineNumber+1
.a736	a2 ff		ldx #$ff			ldx 	#$FF
.a738					_TKFindFirst:
.a738	e8		inx				inx
.a739	bd a6 05	lda $05a6,x			lda 	lineBuffer,x
.a73c	f0 79		beq $a7b7			beq 	_TKExit
.a73e	c9 20		cmp #$20			cmp 	#' '
.a740	90 f6		bcc $a738			bcc 	_TKFindFirst
.a742	c9 30		cmp #$30			cmp 	#'0'
.a744	90 07		bcc $a74d			bcc 	_TKNoLineNumber
.a746	c9 3a		cmp #$3a			cmp 	#'9'+1
.a748	b0 03		bcs $a74d			bcs 	_TKNoLineNumber
.a74a	20 da a8	jsr $a8da			jsr 	TokeniseExtractLineNumber
.a74d					_TKNoLineNumber:
.a74d					_TKTokeniseLoop:
.a74d	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.a750	f0 65		beq $a7b7			beq 	_TKExit
.a752	e8		inx				inx
.a753	c9 20		cmp #$20			cmp 	#' '
.a755	f0 f6		beq $a74d			beq 	_TKTokeniseLoop 			; keep looping if space found.
.a757	ca		dex				dex 								; undo last get, A contains character, X is position.
.a758	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.a75a	f0 61		beq $a7bd			beq 	_TKTokeniseIdentifier
.a75c	c9 41		cmp #$41			cmp 	#'A'
.a75e	90 04		bcc $a764			bcc 	_TKTokenisePunctuation
.a760	c9 5b		cmp #$5b			cmp 	#'Z'+1
.a762	90 59		bcc $a7bd			bcc 	_TKTokeniseIdentifier
.a764					_TKTokenisePunctuation:
.a764	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.a766	f0 27		beq $a78f			beq 	_TKString
.a768	c9 24		cmp #$24			cmp 	#'$'						; hexadecimal constant (# only appears at end of identifiers)
.a76a	f0 28		beq $a794			beq 	_TKHexConstant
.a76c	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers.
.a76e	f0 29		beq $a799			beq 	_TKCheckDouble
.a770	c9 3e		cmp #$3e			cmp 	#'>'
.a772	f0 25		beq $a799			beq 	_TKCheckDouble
.a774					_TKStandardPunctuation:
.a774	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; get it back.
.a777	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.a779	90 0e		bcc $a789			bcc 	_TKNoShift
.a77b	48		pha				pha 								; save
.a77c	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.a77e	85 36		sta $36				sta 	zTemp0
.a780	68		pla				pla
.a781	29 20		and #$20			and 	#32 						; bit 5
.a783	4a		lsr a				lsr 	a 							; shift into bit 3
.a784	4a		lsr a				lsr 	a
.a785	05 36		ora $36				ora 	zTemp0
.a787	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.a789					_TKNoShift:
.a789	20 1f a9	jsr $a91f			jsr 	TokeniseWriteByte 			; write the punctuation character
.a78c	e8		inx				inx 								; consume the character
.a78d	80 be		bra $a74d			bra 	_TKTokeniseLoop 			; and loop round again.
.a78f					_TKString:
.a78f	20 3f a8	jsr $a83f			jsr 	TokeniseString
.a792	80 b9		bra $a74d			bra 	_TKTokeniseLoop
.a794					_TKHexConstant:
.a794	20 7a a8	jsr $a87a			jsr 	TokeniseHexConstant
.a797	80 b4		bra $a74d			bra 	_TKTokeniseLoop
.a799					_TKCheckDouble:
.a799	bd a7 05	lda $05a7,x			lda 	lineBuffer+1,x 				; get next character
.a79c	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.a79e	90 d4		bcc $a774			bcc 	_TKStandardPunctuation
.a7a0	c9 3f		cmp #$3f			cmp 	#'>'+1
.a7a2	b0 d0		bcs $a774			bcs 	_TKStandardPunctuation
.a7a4	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.a7a7	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.a7a9	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.a7aa	7d a7 05	adc $05a7,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.a7ad	38		sec				sec
.a7ae	e9 3c		sbc #$3c			sbc 	#'<'
.a7b0	20 1f a9	jsr $a91f			jsr 	TokeniseWriteByte 			; this is in the range 0-7
.a7b3	e8		inx				inx 								; consume both
.a7b4	e8		inx				inx
.a7b5	80 96		bra $a74d			bra 	_TKTokeniseLoop
.a7b7	a9 80		lda #$80	_TKExit:lda 	#KWC_EOL 					; write end of line byte
.a7b9	20 1f a9	jsr $a91f			jsr 	TokeniseWriteByte
.a7bc	60		rts				rts
.a7bd					_TKTokeniseIdentifier:
.a7bd	8e 80 04	stx $0480			stx 	identStart 					; save start
.a7c0	9c 84 04	stz $0484			stz 	identTypeByte 				; zero the type byte
.a7c3					_TKCheckLoop:
.a7c3	e8		inx				inx 								; look at next, we know first is identifier.
.a7c4	bd a6 05	lda $05a6,x			lda  	lineBuffer,x
.a7c7	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.a7c9	f0 f8		beq $a7c3			beq 	_TKCheckLoop
.a7cb	c9 30		cmp #$30			cmp	 	#"0"
.a7cd	90 0c		bcc $a7db			bcc 	_TKEndIdentifier
.a7cf	c9 3a		cmp #$3a			cmp 	#"9"+1
.a7d1	90 f0		bcc $a7c3			bcc 	_TKCheckLoop
.a7d3	c9 41		cmp #$41			cmp	 	#"A"
.a7d5	90 04		bcc $a7db			bcc 	_TKEndIdentifier
.a7d7	c9 5b		cmp #$5b			cmp 	#"Z"+1
.a7d9	90 e8		bcc $a7c3			bcc 	_TKCheckLoop
.a7db					_TKEndIdentifier:
.a7db	8e 81 04	stx $0481			stx 	identTypeStart 				; save start of type text (if any !)
.a7de	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.a7e0	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.a7e2	f0 06		beq $a7ea			beq 	_TKHasTypeCharacter
.a7e4	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.a7e6	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.a7e8	d0 07		bne $a7f1			bne 	_TKNoTypeCharacter
.a7ea					_TKHasTypeCharacter:
.a7ea	8c 84 04	sty $0484			sty 	identTypeByte 				; has # or $, save the type
.a7ed	e8		inx				inx 								; read next
.a7ee	bd a6 05	lda $05a6,x			lda 	lineBuffer,x
.a7f1					_TKNoTypeCharacter:
.a7f1	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.a7f3	d0 09		bne $a7fe			bne 	_TKNoArray
.a7f5	e8		inx				inx 								; skip the (
.a7f6	ad 84 04	lda $0484			lda 	identTypeByte 				; set bit 2 (e.g. array)
.a7f9	09 04		ora #$04			ora 	#$04
.a7fb	8d 84 04	sta $0484			sta 	identTypeByte
.a7fe					_TKNoArray:
.a7fe	8e 82 04	stx $0482			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.a801	20 9b a8	jsr $a89b			jsr 	TokeniseCalculateHash 		; calculate the has for those tokens
.a804	a0 a3		ldy #$a3			ldy 	#(KeywordSet0) >> 8
.a806	a9 ec		lda #$ec			lda 	#(KeywordSet0) & $FF
.a808	20 93 a3	jsr $a393			jsr 	TokeniseSearchTable
.a80b	a2 00		ldx #$00			ldx 	#0
.a80d	b0 1f		bcs $a82e			bcs 	_TKFoundToken
.a80f	a0 a5		ldy #$a5			ldy 	#(KeywordSet1) >> 8
.a811	a9 87		lda #$87			lda 	#(KeywordSet1) & $FF
.a813	20 93 a3	jsr $a393			jsr 	TokeniseSearchTable
.a816	a2 81		ldx #$81			ldx 	#$81
.a818	b0 14		bcs $a82e			bcs 	_TKFoundToken
.a81a	a0 a5		ldy #$a5			ldy 	#(KeywordSet2) >> 8
.a81c	a9 dc		lda #$dc			lda 	#(KeywordSet2) & $FF
.a81e	20 93 a3	jsr $a393			jsr 	TokeniseSearchTable
.a821	a2 82		ldx #$82			ldx 	#$82
.a823	b0 09		bcs $a82e			bcs 	_TKFoundToken
.a825	20 2b a9	jsr $a92b			jsr 	CheckCreateVariableRecord 	; failed all, it's a variable, create record if does not exist.
.a828	ae 82 04	ldx $0482			ldx 	identTypeEnd 				; X points to following byte
.a82b	4c 4d a7	jmp $a74d			jmp 	_TKTokeniseLoop 			; and go round again.
.a82e					_TKFoundToken:
.a82e	48		pha				pha 								; save token
.a82f	8a		txa				txa 								; shift in X, is there one ?
.a830	f0 03		beq $a835			beq 	_TKNoTShift
.a832	20 1f a9	jsr $a91f			jsr 	TokeniseWriteByte 			; if so, write it out
.a835					_TKNoTShift:
.a835	68		pla				pla 								; restore and write token
.a836	20 1f a9	jsr $a91f			jsr 	TokeniseWriteByte
.a839	ae 82 04	ldx $0482			ldx 	identTypeEnd 				; X points to following byte
.a83c	4c 4d a7	jmp $a74d			jmp 	_TKTokeniseLoop 			; and go round again.
.a83f					TokeniseString:
.a83f	a9 ff		lda #$ff			lda 	#KWC_STRING 				; string token.
.a841	20 1f a9	jsr $a91f			jsr 	TokeniseWriteByte
.a844	e8		inx				inx									; start of quoted string.
.a845	da		phx				phx 								; push start of string on top
.a846	ca		dex				dex
.a847					_TSFindEnd:
.a847	e8		inx				inx
.a848	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; next character
.a84b	f0 04		beq $a851			beq 	_TSEndOfString
.a84d	c9 22		cmp #$22			cmp 	#'"'
.a84f	d0 f6		bne $a847			bne 	_TSFindEnd
.a851					_TSEndOfString:
.a851	7a		ply				ply  								; so now Y is first character, X is character after end.
.a852	48		pha				pha 								; save terminating character
.a853	20 5b a8	jsr $a85b			jsr 	TOWriteBlockXY 				; write X to Y as a data block
.a856	68		pla				pla 								; terminating character
.a857	f0 01		beq $a85a			beq 	_TSNotQuote					; if it wasn't EOS skip it
.a859	e8		inx				inx
.a85a					_TSNotQuote:
.a85a	60		rts				rts
.a85b					TOWriteBlockXY:
.a85b	86 36		stx $36				stx 	zTemp0 						; write end character
.a85d	98		tya				tya
.a85e	49 ff		eor #$ff			eor 	#$FF
.a860	38		sec				sec
.a861	65 36		adc $36				adc 	zTemp0
.a863	1a		inc a				inc 	a 							; one extra for NULL
.a864	20 1f a9	jsr $a91f			jsr 	TokeniseWriteByte
.a867					_TOBlockLoop:
.a867	c4 36		cpy $36				cpy 	zTemp0
.a869	f0 09		beq $a874			beq 	_TOBlockExit
.a86b	b9 a6 05	lda $05a6,y			lda 	lineBuffer,y
.a86e	20 1f a9	jsr $a91f			jsr 	TokeniseWriteByte
.a871	c8		iny				iny
.a872	80 f3		bra $a867			bra 	_TOBlockLoop
.a874					_TOBlockExit:
.a874	a9 00		lda #$00			lda 	#0
.a876	20 1f a9	jsr $a91f			jsr 	TokeniseWriteByte
.a879	60		rts				rts
.a87a					TokeniseHexConstant:
.a87a	a9 fe		lda #$fe			lda 	#KWC_HEXCONST 				; hex constant token.
.a87c	20 1f a9	jsr $a91f			jsr 	TokeniseWriteByte
.a87f	e8		inx				inx									; start of quoted string.
.a880	da		phx				phx 								; push start of constant on top
.a881	ca		dex				dex
.a882					_THFindLoop:
.a882	e8		inx				inx
.a883	bd a6 05	lda $05a6,x			lda 	lineBuffer,x
.a886	c9 30		cmp #$30			cmp 	#"0"
.a888	90 0c		bcc $a896			bcc 	_THFoundEnd
.a88a	c9 3a		cmp #$3a			cmp 	#"9"+1
.a88c	90 f4		bcc $a882			bcc 	_THFindLoop
.a88e	c9 41		cmp #$41			cmp 	#"A"
.a890	90 04		bcc $a896			bcc 	_THFoundEnd
.a892	c9 47		cmp #$47			cmp 	#"F"+1
.a894	90 ec		bcc $a882			bcc 	_THFindLoop
.a896					_THFoundEnd:
.a896	7a		ply				ply 								; restore start
.a897	20 5b a8	jsr $a85b			jsr 	TOWriteBlockXY 				; output the block
.a89a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/utility.asm

.a89b					TokeniseCalculateHash:
.a89b	da		phx				phx
.a89c	ae 80 04	ldx $0480			ldx 	identStart 					; needs to be same as in tokens.py - simple sum
.a89f	a9 00		lda #$00			lda 	#0
.a8a1					_TCHLoop:
.a8a1	18		clc				clc
.a8a2	7d a6 05	adc $05a6,x			adc 	lineBuffer,x
.a8a5	e8		inx				inx
.a8a6	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.a8a9	d0 f6		bne $a8a1			bne 	_TCHLoop
.a8ab	8d 83 04	sta $0483			sta 	identHash 					; save the hash
.a8ae	fa		plx				plx
.a8af	60		rts				rts
.a8b0					FixLineBufferCase:
.a8b0	a2 00		ldx #$00			ldx 	#0
.a8b2					_FLBCLoop:
.a8b2	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; get next character
.a8b5	f0 22		beq $a8d9			beq 	_FLBCExit 					; end of string.
.a8b7	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.a8b9	f0 11		beq $a8cc			beq 	_FLBCInQuotes
.a8bb	e8		inx				inx
.a8bc	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.a8be	90 f2		bcc $a8b2			bcc 	_FLBCLoop
.a8c0	c9 7b		cmp #$7b			cmp 	#'z'+1
.a8c2	b0 ee		bcs $a8b2			bcs 	_FLBCLoop
.a8c4	38		sec				sec 								; make U/C
.a8c5	e9 20		sbc #$20			sbc 	#32
.a8c7	9d a5 05	sta $05a5,x			sta	 	lineBuffer-1,x 				; write back
.a8ca	80 e6		bra $a8b2			bra 	_FLBCLoop
.a8cc					_FLBCInQuotes:
.a8cc	e8		inx				inx 								; advance
.a8cd	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; get next
.a8d0	f0 07		beq $a8d9			beq 	_FLBCExit 					; exit on EOS
.a8d2	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.a8d4	d0 f6		bne $a8cc			bne 	_FLBCInQuotes
.a8d6	e8		inx				inx 								; skip over it
.a8d7	80 d9		bra $a8b2			bra 	_FLBCLoop
.a8d9					_FLBCExit:
.a8d9	60		rts				rts
.a8da					TokeniseExtractLineNumber:
.a8da	ad a8 04	lda $04a8			lda 	tokenLineNumber+1 			; push current value on stack
.a8dd	48		pha				pha
.a8de	ad a7 04	lda $04a7			lda 	tokenLineNumber
.a8e1	48		pha				pha
.a8e2	20 18 a9	jsr $a918			jsr 	_TELNTimes2 				; line # x 4
.a8e5	20 18 a9	jsr $a918			jsr 	_TELNTimes2 				; line # x 2
.a8e8	18		clc				clc 								; add stacked value
.a8e9	68		pla				pla
.a8ea	6d a7 04	adc $04a7			adc 	tokenLineNumber
.a8ed	8d a7 04	sta $04a7			sta 	tokenLineNumber
.a8f0	68		pla				pla
.a8f1	6d a8 04	adc $04a8			adc 	tokenLineNumber+1
.a8f4	8d a8 04	sta $04a8			sta 	tokenLineNumber+1 			; line # x 5
.a8f7	20 18 a9	jsr $a918			jsr 	_TELNTimes2 				; line # x 10
.a8fa	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; get and consume character
.a8fd	e8		inx				inx
.a8fe	29 0f		and #$0f			and 	#15 						; add to line #
.a900	18		clc				clc
.a901	6d a7 04	adc $04a7			adc 	tokenLineNumber
.a904	8d a7 04	sta $04a7			sta 	tokenLineNumber
.a907	90 03		bcc $a90c			bcc 	_TLENNoCarry
.a909	ee a8 04	inc $04a8			inc 	tokenLineNumber+1
.a90c					_TLENNoCarry:
.a90c	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; more digits ?
.a90f	c9 30		cmp #$30			cmp 	#'0'
.a911	90 04		bcc $a917			bcc 	_TLENExit
.a913	c9 3a		cmp #$3a			cmp 	#'9'+1
.a915	90 c3		bcc $a8da			bcc 	TokeniseExtractLineNumber
.a917					_TLENExit:
.a917	60		rts				rts
.a918					_TELNTimes2:
.a918	0e a7 04	asl $04a7			asl 	tokenLineNumber
.a91b	2e a8 04	rol $04a8			rol 	tokenLineNumber+1
.a91e	60		rts				rts
.a91f					TokeniseWriteByte:
.a91f	da		phx				phx
.a920	ae a6 04	ldx $04a6			ldx 	tokenOffset 				; next slot to write to
.a923	9d a6 04	sta $04a6,x			sta 	tokenOffset,x 				; write byte out
.a926	ee a6 04	inc $04a6			inc 	tokenOffset 				; advance slot.
.a929	fa		plx				plx
.a92a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/variablerecord.asm

.a92b					CheckCreateVariableRecord:
.a92b	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.a92d	85 36		sta $36				sta 	0+zTemp0
.a92f	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.a931	85 37		sta $37				sta 	1+zTemp0
.a933					_CCVSearch:
.a933	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.a935	f0 2c		beq $a963			beq 	_CCVFail
.a937	a0 01		ldy #$01			ldy 	#1 							; read the hash
.a939	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.a93b	cd 83 04	cmp $0483			cmp 	identHash
.a93e	d0 16		bne $a956			bne 	_CCVNext
.a940	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.a942	ae 80 04	ldx $0480			ldx 	identStart
.a945					_CCVCompare:
.a945	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.a948	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.a94a	e8		inx				inx 								; advance pointers
.a94b	c8		iny				iny
.a94c	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.a94d	d0 07		bne $a956			bne 	_CCVNext  					; didn't match go to next.
.a94f	90 f4		bcc $a945			bcc 	_CCVCompare 				; not finished yet.
.a951	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; matched whole thing ?
.a954	f0 41		beq $a997			beq 	_CCVFound 					; yes, we were successful
.a956					_CCVNext:
.a956	18		clc				clc
.a957	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.a959	65 36		adc $36				adc 	zTemp0
.a95b	85 36		sta $36				sta 	zTemp0
.a95d	90 d4		bcc $a933			bcc 	_CCVSearch
.a95f	e6 37		inc $37				inc 	zTemp0+1
.a961	80 d0		bra $a933			bra 	_CCVSearch
.a963					_CCVFail:
.a963	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.a965	ad 83 04	lda $0483			lda 	identHash
.a968	91 36		sta ($36),y			sta 	(zTemp0),y
.a96a	c8		iny				iny 								; offset 2 is the type byte
.a96b	ad 84 04	lda $0484			lda 	identTypeByte
.a96e	91 36		sta ($36),y			sta 	(zTemp0),y
.a970	c8		iny				iny
.a971					_CCVData:
.a971	a9 00		lda #$00			lda 	#0 							; erase data 3-7
.a973	91 36		sta ($36),y			sta 	(zTemp0),y
.a975	c8		iny				iny
.a976	c0 08		cpy #$08			cpy 	#8
.a978	90 f7		bcc $a971			bcc 	_CCVData
.a97a	ae 80 04	ldx $0480			ldx 	identStart 					; copy name into 8 on.
.a97d					_CCVCopyName:
.a97d	bd a6 05	lda $05a6,x			lda 	lineBuffer,x
.a980	91 36		sta ($36),y			sta 	(zTemp0),y
.a982	e8		inx				inx
.a983	c8		iny				iny
.a984	ec 82 04	cpx $0482			cpx 	identTypeEnd
.a987	d0 f4		bne $a97d			bne 	_CCVCopyName
.a989	98		tya				tya 								; patch offset
.a98a	92 36		sta ($36)			sta 	(zTemp0)
.a98c	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.a98e	91 36		sta ($36),y			sta 	(zTemp0),y
.a990	88		dey				dey
.a991	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.a993	09 80		ora #$80			ora 	#$80
.a995	91 36		sta ($36),y			sta 	(zTemp0),y
.a997					_CCVFound:
.a997	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.a999	38		sec				sec
.a99a	e9 10		sbc #$10			sbc 	#(VariableSpace >> 8) 		; offset from the start
.a99c	09 40		ora #$40			ora 	#$40 						; make it a writeable token
.a99e	20 1f a9	jsr $a91f			jsr 	TokeniseWriteByte
.a9a1	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.a9a3	20 1f a9	jsr $a91f			jsr 	TokeniseWriteByte
.a9a6	60		rts				rts

;******  Return to file: _basic.asm


;******  End of listing
