
; 64tass Turbo Assembler Macro V1.56.2625 listing file
; 64tass -D AUTORUN=1 -q -b -Wall -Wno-portable -c -L output/basic.lst -l output/basic.lbl -Wall -o basic.rom _basic.asm
; Wed Oct  5 17:28:16 2022

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=1					AUTORUN=1

;******  Processing input file: _basic.asm


;******  Processing file: ./common/aa.system/01common.inc

=$30					ZeroPageMandatory = $30
=$600					ZeroPagePreference = $600
=$700					MemoryStorage = $700
=$2000					BasicStart = $2000
=$8000					CodeStart = $8000
=$1000					VariableSpace = $1000
=$2000					EndVariableSpace = $2000
=8					MathStackSize = 8
=512					BasicStackSize = 512
=3584					BasicStackBase = $1000-BasicStackSize
=80					MaxLineSize = 80

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/04data.inc

.0030					codePtr:
>0030							.fill 	4
.0034					basicStack:
>0034							.fill 	2
.0036					zTemp0:
>0036							.fill 	2
.0038					zTemp1:
>0038							.fill 	2
.003a					zTemp2:
>003a							.fill 	2
.003c					zsTemp:
>003c							.fill 	2
.003e					zaTemp:
>003e							.fill 	2
=$30					safePtr = codePtr 							; minimise direct tinkering
=$80					NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20					NSBIsReference = $20 						; bit 5 : is a reference
=$10					NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18					NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03					NSBRefMask = $03 							; bits 0,1 : Bytes of reference, -1 (e.g. 00 = 1 byte, 11 = 4 bytes)
=$04					NSBIsArray = $04
=$00					NSTInteger = $00 							; base types for bits 3..4
=$08					NSTFloat = $08
=$10					NSTString = $10
=$18					NSTProcedure = $18
.0600					NSStatus:
>0600							.fill 	MathStackSize
.0608					NSMantissa0:
>0608							.fill 	MathStackSize 				; (this is my integer mantissa system)
.0610					NSMantissa1:
>0610							.fill 	MathStackSize
.0618					NSMantissa2:
>0618							.fill 	MathStackSize
.0620					NSMantissa3:
>0620							.fill 	MathStackSize
.0628					NSExponent:
>0628							.fill 	MathStackSize
.0700					identStart:
>0700							.fill 	1
.0701					identTypeStart:
>0701							.fill 	1
.0702					identTypeEnd:
>0702							.fill 	1
.0703					identHash:
>0703							.fill 	1
.0704					identTypeByte:
>0704							.fill 	1	 						; (see tokenising.pdf)
.0705					encodeState:
>0705							.fill 	1
.0706					digitTemp:
>0706							.fill 	1
.0707					decimalCount:
>0707							.fill 	1
.0708					randomSeed:
>0708							.fill 	4
.070c					lowMemPtr:
>070c							.fill 	2
.070e					stringMemory:
>070e							.fill 	2
.0710					stringInitialised:
>0710							.fill 	1
.0711					stringTempPointer:
>0711							.fill 	2
.0713					breakCheck:
>0713							.fill 	1
.0714					decimalPlaces:
>0714							.fill 	1
.0715					dbOffset:
>0715							.fill 	1
.0716					dataPointer:
>0716							.fill 	5
.071b					inDataStatement:
>071b							.fill 	1
.071c					tbOffset:
>071c							.fill 	1
.071d					AssemblerAddress:
>071d							.fill 	2
.071f					AssemblerControl:
>071f							.fill 	1
.0720					ParamStart:
>0720							.fill 	2
.0722					IsGroup1:
>0722							.fill 	1
.0723					BaseOpcode:
>0723							.fill 	1
.0724					ModeMask:
>0724							.fill 	1
.0725					tokenOffset:
>0725							.fill 	1
.0726					tokenLineNumber:
>0726							.fill 	2
.0728					tokenBuffer:
>0728							.fill 	253
.0825					lineBuffer:
>0825							.fill 	MaxLineSize+1
.0876					numberBuffer:
>0876							.fill 	34
.0898					decimalBuffer:
>0898							.fill 	16

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/constants.inc

=$80					AM_ISZP = $80
=$40					AM_ISG1 = $40
=$20					AM_ISG2 = $20
=224					AM_IMMEDIATE = AM_ISZP+AM_ISG1+AM_ISG2+$00
=228					AM_ZEROPAGE = AM_ISZP+AM_ISG1+AM_ISG2+$04
=40					AM_ACC = AM_ISG2+$08
=108					AM_ABS = AM_ISG1+AM_ISG2+$0C
=208					AM_INDY = AM_ISZP+AM_ISG1+$10
=244					AM_ZEROX = AM_ISZP+AM_ISG1+AM_ISG2+$14
=120					AM_ABSY = AM_ISG1+AM_ISG2+$18
=124					AM_ABSX = AM_ISG1+AM_ISG2+$1C
=209					AM_IND = AM_ISZP+AM_ISG1+$11
=$80					AM_ZEROY = AM_ISZP
=$01					AM_INDABS = $01
=$02					AM_INDABSX = $02
=192					AM_INDX = AM_ISZP+AM_ISG1+$00

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/handlers.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.inc

=1					ERRID_BREAK = 1
=2					ERRID_SYNTAX = 2
=3					ERRID_DIVZERO = 3
=4					ERRID_RANGE = 4
=5					ERRID_TYPE = 5
=6					ERRID_MEMORY = 6
=7					ERRID_ARGUMENT = 7
=8					ERRID_STOP = 8
=9					ERRID_STRING = 9
=10					ERRID_ASSERT = 10
=11					ERRID_DATA = 11
=12					ERRID_NOTDONE = 12
=13					ERRID_LINE = 13
=14					ERRID_GOSUB = 14
=15					ERRID_REPEAT = 15
=16					ERRID_WHILE = 16
=17					ERRID_FOR = 17
=18					ERRID_STACK = 18
=19					ERRID_STRUCT = 19
=20					ERRID_PROC = 20
=21					ERRID_REDEFINE = 21
=22					ERRID_ARRAYSIZE = 22
=23					ERRID_ARRAYIDX = 23

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst.inc

=$00					KWD_LESSLESS                         = $00; $00 <<
=$01					KWD_LESSEQUAL                        = $01; $01 <=
=$02					KWD_LESSGREATER                      = $02; $02 <>
=$03					KWD_PLINGPLING3                      = $03; $03 !!3
=$04					KWD_GREATERLESS                      = $04; $04 ><
=$05					KWD_GREATEREQUAL                     = $05; $05 >=
=$06					KWD_GREATERGREATER                   = $06; $06 >>
=$07					KWD_PLINGPLING7                      = $07; $07 !!7
=$08					KWD_PLINGPLING8                      = $08; $08 !!8
=$09					KWD_PLINGPLING9                      = $09; $09 !!9
=$0a					KWD_PLINGPLING10                     = $0a; $0a !!10
=$0b					KWD_PLINGPLING11                     = $0b; $0b !!11
=$0c					KWD_PLINGPLING12                     = $0c; $0c !!12
=$0d					KWD_PLINGPLING13                     = $0d; $0d !!13
=$0e					KWD_PLINGPLING14                     = $0e; $0e !!14
=$0f					KWD_PLINGPLING15                     = $0f; $0f !!15
=$10					KWD_AT                               = $10; $10 @
=$11					KWD_PLINGPLING17                     = $11; $11 !!17
=$12					KWD_PLINGPLING18                     = $12; $12 !!18
=$13					KWD_LSQPAREN                         = $13; $13 [
=$14					KWD_BACKSLASH                        = $14; $14 \
=$15					KWD_RSQPAREN                         = $15; $15 ]
=$16					KWD_HAT                              = $16; $16 ^
=$17					KWD_UNDERSCORE                       = $17; $17 _
=$18					KWD_BQUOTE                           = $18; $18 `
=$19					KWD_PLINGPLING25                     = $19; $19 !!25
=$1a					KWD_PLINGPLING26                     = $1a; $1a !!26
=$1b					KWD_LCURLY                           = $1b; $1b {
=$1c					KWD_BAR                              = $1c; $1c |
=$1d					KWD_RCURLY                           = $1d; $1d }
=$1e					KWD_TILDE                            = $1e; $1e ~
=$21					KWD_PLING                            = $21; $21 !
=$22					KWD_DQUOTE                           = $22; $22 "
=$23					KWD_HASH                             = $23; $23 #
=$24					KWD_DOLLAR                           = $24; $24 $
=$25					KWD_PERCENT                          = $25; $25 %
=$26					KWD_AMPERSAND                        = $26; $26 &
=$27					KWD_QUOTE                            = $27; $27 '
=$28					KWD_LPAREN                           = $28; $28 (
=$29					KWD_RPAREN                           = $29; $29 )
=$2a					KWD_STAR                             = $2a; $2a *
=$2b					KWD_PLUS                             = $2b; $2b +
=$2c					KWD_COMMA                            = $2c; $2c ,
=$2d					KWD_MINUS                            = $2d; $2d -
=$2e					KWD_PERIOD                           = $2e; $2e .
=$2f					KWD_SLASH                            = $2f; $2f /
=$30					KWD_0                                = $30; $30 0
=$31					KWD_1                                = $31; $31 1
=$32					KWD_2                                = $32; $32 2
=$33					KWD_3                                = $33; $33 3
=$34					KWD_4                                = $34; $34 4
=$35					KWD_5                                = $35; $35 5
=$36					KWD_6                                = $36; $36 6
=$37					KWD_7                                = $37; $37 7
=$38					KWD_8                                = $38; $38 8
=$39					KWD_9                                = $39; $39 9
=$3a					KWD_COLON                            = $3a; $3a :
=$3b					KWD_SEMICOLON                        = $3b; $3b ;
=$3c					KWD_LESS                             = $3c; $3c <
=$3d					KWD_EQUAL                            = $3d; $3d =
=$3e					KWD_GREATER                          = $3e; $3e >
=$3f					KWD_QMARK                            = $3f; $3f ?
=$83					KWD_ABSLPAREN                        = $83; $83 ABS(
=$84					KWD_ALLOCLPAREN                      = $84; $84 ALLOC(
=$85					KWD_ASCLPAREN                        = $85; $85 ASC(
=$86					KWD_CHRDOLLARLPAREN                  = $86; $86 CHR$(
=$87					KWD_FALSE                            = $87; $87 FALSE
=$88					KWD_FRACLPAREN                       = $88; $88 FRAC(
=$89					KWD_INTLPAREN                        = $89; $89 INT(
=$8a					KWD_ISVALLPAREN                      = $8a; $8a ISVAL(
=$8b					KWD_LEFTDOLLARLPAREN                 = $8b; $8b LEFT$(
=$8c					KWD_LENLPAREN                        = $8c; $8c LEN(
=$8d					KWD_MIDDOLLARLPAREN                  = $8d; $8d MID$(
=$8e					KWD_NOTLPAREN                        = $8e; $8e NOT(
=$8f					KWD_RIGHTDOLLARLPAREN                = $8f; $8f RIGHT$(
=$90					KWD_RNDLPAREN                        = $90; $90 RND(
=$91					KWD_SGNLPAREN                        = $91; $91 SGN(
=$92					KWD_SPCLPAREN                        = $92; $92 SPC(
=$93					KWD_STRDOLLARLPAREN                  = $93; $93 STR$(
=$94					KWD_TRUE                             = $94; $94 TRUE
=$95					KWD_VALLPAREN                        = $95; $95 VAL(
=$96					KWD_FOR                              = $96; $96 FOR
=$97					KWD_IF                               = $97; $97 IF
=$98					KWD_PROC                             = $98; $98 PROC
=$99					KWD_REPEAT                           = $99; $99 REPEAT
=$9a					KWD_WHILE                            = $9a; $9a WHILE
=$9b					KWD_ENDIF                            = $9b; $9b ENDIF
=$9c					KWD_ENDPROC                          = $9c; $9c ENDPROC
=$9d					KWD_NEXT                             = $9d; $9d NEXT
=$9e					KWD_THEN                             = $9e; $9e THEN
=$9f					KWD_UNTIL                            = $9f; $9f UNTIL
=$a0					KWD_WEND                             = $a0; $a0 WEND
=$a1					KWD_CALL                             = $a1; $a1 CALL
=$a2					KWD_CLS                              = $a2; $a2 CLS
=$a3					KWD_DATA                             = $a3; $a3 DATA
=$a4					KWD_DIM                              = $a4; $a4 DIM
=$a5					KWD_DOWNTO                           = $a5; $a5 DOWNTO
=$a6					KWD_ELSE                             = $a6; $a6 ELSE
=$a7					KWD_GOSUB                            = $a7; $a7 GOSUB
=$a8					KWD_GOTO                             = $a8; $a8 GOTO
=$a9					KWD_LET                              = $a9; $a9 LET
=$aa					KWD_LOCAL                            = $aa; $aa LOCAL
=$ab					KWD_PRINT                            = $ab; $ab PRINT
=$ac					KWD_READ                             = $ac; $ac READ
=$ad					KWD_REM                              = $ad; $ad REM
=$ae					KWD_RETURN                           = $ae; $ae RETURN
=$af					KWD_TO                               = $af; $af TO

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst0.inc

=$80					KWC_EOL = $80
=$ff					KWC_STRING = $FF
=$fe					KWC_HEXCONST = $FE
=$96					KWC_FIRST_STRUCTURE = $96
=$9b					KWC_FIRST_STRUCTURE_DEC = $9b
=$a0					KWC_LAST_STRUCTURE = $a0
=$83					KWC_FIRST_UNARY = $83
=$95					KWC_LAST_UNARY = $95

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/stack.inc

=$e0					STK_GOSUB = $E0
=$d0					STK_FOR = $D0
=$c0					STK_REPEAT = $C0
=$b0					STK_PROC = $B0
=$a0					STK_WHILE = $A0
=$90					STK_LOCALN = $90
=$80					STK_LOCALS = $80

;******  Return to file: _basic.asm


;******  Processing file: ./variants/memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/00start.asm

.8000	a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.8002	9a		txs				txs
.8003	a2 80		ldx #$80			ldx 	#(Prompt >> 8) 				; prompt
.8005	a9 13		lda #$13			lda 	#(Prompt & $FF)
.8007	20 c2 8c	jsr $8cc2			jsr 	PrintStringXA
.800a	20 5a 88	jsr $885a			jsr 	NewCommand 					; erase current program
.800d	20 59 98	jsr $9859			jsr 	BackloadProgram
.8010	4c a6 89	jmp $89a6			jmp 	CommandRun
>8013	0d 0d 2a 2a 2a 20 46 32		Prompt:	.text 	13,13,"*** F256 Junior SuperBASIC ***",13,13
>801b	35 36 20 4a 75 6e 69 6f 72 20 53 75 70 65 72 42
>802b	41 53 49 43 20 2a 2a 2a 0d 0d
>8035	57 72 69 74 74 65 6e 20				.text 	"Written by Paul Robson 2022.",13,13
>803d	62 79 20 50 61 75 6c 20 52 6f 62 73 6f 6e 20 32
>804d	30 32 32 2e 0d 0d

;******  Processing file: ./common/aa.system/../generated/timestamp.asm

>8053	42 75 69 6c 74 20 57 65			.text "Built Wednesday 05-Oct-2022. Build 117."
>805b	64 6e 65 73 64 61 79 20 30 35 2d 4f 63 74 2d 32
>806b	30 32 32 2e 20 42 75 69 6c 64 20 31 31 37 2e

;******  Return to file: ./common/aa.system/00start.asm

>807a	0d 0d 00					.byte 	13,13,0
>807d							.align 2

;******  Processing file: ./common/aa.system/../generated/vectors.dat

.807e					VectorSetPunc:
>807e	13 8e					.word	ShiftLeft                        ; $00 <<
>8080	0d 8d					.word	BinaryCompareLessEqual           ; $01 <=
>8082	03 8d					.word	BinaryCompareNotEqual            ; $02 <>
>8084	98 a4					.word	SyntaxError                      ; $03 !!3
>8086	98 a4					.word	SyntaxError                      ; $04 ><
>8088	17 8d					.word	BinaryCompareGreaterEqual        ; $05 >=
>808a	16 8e					.word	ShiftRight                       ; $06 >>
>808c	98 a4					.word	SyntaxError                      ; $07 !!7
>808e	98 a4					.word	SyntaxError                      ; $08 !!8
>8090	98 a4					.word	SyntaxError                      ; $09 !!9
>8092	98 a4					.word	SyntaxError                      ; $0a !!10
>8094	98 a4					.word	SyntaxError                      ; $0b !!11
>8096	98 a4					.word	SyntaxError                      ; $0c !!12
>8098	98 a4					.word	SyntaxError                      ; $0d !!13
>809a	98 a4					.word	SyntaxError                      ; $0e !!14
>809c	98 a4					.word	SyntaxError                      ; $0f !!15
>809e	98 a4					.word	SyntaxError                      ; $10 @
>80a0	98 a4					.word	SyntaxError                      ; $11 !!17
>80a2	98 a4					.word	SyntaxError                      ; $12 !!18
>80a4	98 a4					.word	SyntaxError                      ; $13 [
>80a6	cf 9e					.word	IntegerDivide                    ; $14 \
>80a8	98 a4					.word	SyntaxError                      ; $15 ]
>80aa	9c 8f					.word	EorInteger                       ; $16 ^
>80ac	98 a4					.word	SyntaxError                      ; $17 _
>80ae	98 a4					.word	SyntaxError                      ; $18 `
>80b0	98 a4					.word	SyntaxError                      ; $19 !!25
>80b2	98 a4					.word	SyntaxError                      ; $1a !!26
>80b4	98 a4					.word	SyntaxError                      ; $1b {
>80b6	56 8f					.word	OraInteger                       ; $1c |
>80b8	98 a4					.word	SyntaxError                      ; $1d }
>80ba	98 a4					.word	SyntaxError                      ; $1e ~
>80bc	98 a4					.word	SyntaxError                      ; $1f [7m<7F>[m
>80be	98 a4					.word	SyntaxError                      ; $20
>80c0	e2 8f					.word	WordIndirect                     ; $21 !
>80c2	98 a4					.word	SyntaxError                      ; $22 "
>80c4	98 a4					.word	SyntaxError                      ; $23 #
>80c6	98 a4					.word	SyntaxError                      ; $24 $
>80c8	1c 9f					.word	IntegerModulus                   ; $25 %
>80ca	10 8f					.word	AndInteger                       ; $26 &
>80cc	98 a4					.word	SyntaxError                      ; $27 '
>80ce	98 a4					.word	SyntaxError                      ; $28 (
>80d0	98 a4					.word	SyntaxError                      ; $29 )
>80d2	91 9f					.word	MulInteger                       ; $2a *
>80d4	aa 8e					.word	AddInteger                       ; $2b +
>80d6	98 a4					.word	SyntaxError                      ; $2c ,
>80d8	e5 8e					.word	SubInteger                       ; $2d -
>80da	98 a4					.word	SyntaxError                      ; $2e .
>80dc	28 a1					.word	FDivideCommand                   ; $2f /
>80de	98 a4					.word	SyntaxError                      ; $30 0
>80e0	98 a4					.word	SyntaxError                      ; $31 1
>80e2	98 a4					.word	SyntaxError                      ; $32 2
>80e4	98 a4					.word	SyntaxError                      ; $33 3
>80e6	98 a4					.word	SyntaxError                      ; $34 4
>80e8	98 a4					.word	SyntaxError                      ; $35 5
>80ea	98 a4					.word	SyntaxError                      ; $36 6
>80ec	98 a4					.word	SyntaxError                      ; $37 7
>80ee	98 a4					.word	SyntaxError                      ; $38 8
>80f0	98 a4					.word	SyntaxError                      ; $39 9
>80f2	98 a4					.word	SyntaxError                      ; $3a :
>80f4	98 a4					.word	SyntaxError                      ; $3b ;
>80f6	ef 8c					.word	BinaryCompareLess                ; $3c <
>80f8	e5 8c					.word	BinaryCompareEqual               ; $3d =
>80fa	f9 8c					.word	BinaryCompareGreater             ; $3e >
>80fc	09 90					.word	ByteIndirect                     ; $3f ?
.80fe					VectorSet0:
>80fe	12 8a					.word	EOLCommand                       ; $80 !0:EOF
>8100	1f 8a					.word	Shift1Command                    ; $81 !1:SH1
>8102	27 8a					.word	Shift2Command                    ; $82 !2:SH2
>8104	6e a2					.word	AbsUnary                         ; $83 ABS(
>8106	d3 94					.word	AllocUnary                       ; $84 ALLOC(
>8108	7e a2					.word	AscUnary                         ; $85 ASC(
>810a	8e 95					.word	ChrUnary                         ; $86 CHR$(
>810c	e1 8c					.word	UnaryFalse                       ; $87 FALSE
>810e	8b a2					.word	FracUnary                        ; $88 FRAC(
>8110	a1 a2					.word	IntUnary                         ; $89 INT(
>8112	f7 a2					.word	IsValUnary                       ; $8a ISVAL(
>8114	68 96					.word	Unary_Left                       ; $8b LEFT$(
>8116	b3 a2					.word	LenUnary                         ; $8c LEN(
>8118	92 96					.word	Unary_Mid                        ; $8d MID$(
>811a	2b 95					.word	Unary_Not                        ; $8e NOT(
>811c	78 96					.word	Unary_Right                      ; $8f RIGHT$(
>811e	41 95					.word	Unary_Rnd                        ; $90 RND(
>8120	cd a2					.word	SgnUnary                         ; $91 SGN(
>8122	a0 95					.word	SpcUnary                         ; $92 SPC(
>8124	bb 95					.word	Unary_Str                        ; $93 STR$(
>8126	d5 8c					.word	UnaryTrue                        ; $94 TRUE
>8128	ed a2					.word	ValUnary                         ; $95 VAL(
>812a	f3 85					.word	ForCommand                       ; $96 FOR
>812c	40 87					.word	IfCommand                        ; $97 IF
>812e	2f 8a					.word	Unused1                          ; $98 PROC
>8130	52 89					.word	Command_REPEAT                   ; $99 REPEAT
>8132	3a 8c					.word	Command_WHILE                    ; $9a WHILE
>8134	69 87					.word	EndIf                            ; $9b ENDIF
>8136	a8 9e					.word	Command_ENDPROC                  ; $9c ENDPROC
>8138	ad 86					.word	NextCommand                      ; $9d NEXT
>813a	2f 8a					.word	Unused4                          ; $9e THEN
>813c	5b 89					.word	Command_UNTIL                    ; $9f UNTIL
>813e	5b 8c					.word	Command_WEND                     ; $a0 WEND
>8140	c8 84					.word	CallCommand                      ; $a1 CALL
>8142	98 a4					.word	SyntaxError                      ; $a2 CLS
>8144	2b 85					.word	Command_Data                     ; $a3 DATA
>8146	33 85					.word	DimCommand                       ; $a4 DIM
>8148	2f 8a					.word	Unused3                          ; $a5 DOWNTO
>814a	62 87					.word	ElseCode                         ; $a6 ELSE
>814c	06 87					.word	Command_GOSUB                    ; $a7 GOSUB
>814e	24 87					.word	GotoCommand                      ; $a8 GOTO
>8150	6a 87					.word	LetCommand                       ; $a9 LET
>8152	3e 88					.word	Command_LOCAL                    ; $aa LOCAL
>8154	64 88					.word	Command_Print                    ; $ab PRINT
>8156	ec 88					.word	Command_Read                     ; $ac READ
>8158	45 89					.word	RemCommand                       ; $ad REM
>815a	16 87					.word	Command_RETURN                   ; $ae RETURN
>815c	2f 8a					.word	Unused2                          ; $af TO
.815e					VectorSet1:
>815e	98 a4					.word	SyntaxError                      ; $80 !0:EOF
>8160	98 a4					.word	SyntaxError                      ; $81 !1:SH1
>8162	98 a4					.word	SyntaxError                      ; $82 !2:SH2
>8164	99 84					.word	AssembleCommand                  ; $83 ASSEMBLE
>8166	b8 84					.word	AssertCommand                    ; $84 ASSERT
>8168	d6 84					.word	ClearCommand                     ; $85 CLEAR
>816a	f0 85					.word	EndCommand                       ; $86 END
>816c	a3 87					.word	Command_List                     ; $87 LIST
>816e	5a 88					.word	NewCommand                       ; $88 NEW
>8170	74 89					.word	Command_Restore                  ; $89 RESTORE
>8172	a6 89					.word	CommandRUN                       ; $8a RUN
>8174	32 8a					.word	StopCommand                      ; $8b STOP
.8176					VectorSet2:
>8176	98 a4					.word	SyntaxError                      ; $80 !0:EOF
>8178	98 a4					.word	SyntaxError                      ; $81 !1:SH1
>817a	98 a4					.word	SyntaxError                      ; $82 !2:SH2
>817c	5b a3					.word	Assemble_adc                     ; $83 ADC
>817e	53 a3					.word	Assemble_and                     ; $84 AND
>8180	6f a3					.word	Assemble_asl                     ; $85 ASL
>8182	d9 a3					.word	Assemble_bcc                     ; $86 BCC
>8184	dd a3					.word	Assemble_bcs                     ; $87 BCS
>8186	e5 a3					.word	Assemble_beq                     ; $88 BEQ
>8188	9c a3					.word	Assemble_bit                     ; $89 BIT
>818a	cd a3					.word	Assemble_bmi                     ; $8a BMI
>818c	e1 a3					.word	Assemble_bne                     ; $8b BNE
>818e	c9 a3					.word	Assemble_bpl                     ; $8c BPL
>8190	e9 a3					.word	Assemble_bra                     ; $8d BRA
>8192	ed a3					.word	Assemble_brk                     ; $8e BRK
>8194	d1 a3					.word	Assemble_bvc                     ; $8f BVC
>8196	d5 a3					.word	Assemble_bvs                     ; $90 BVS
>8198	f5 a3					.word	Assemble_clc                     ; $91 CLC
>819a	49 a4					.word	Assemble_cld                     ; $92 CLD
>819c	09 a4					.word	Assemble_cli                     ; $93 CLI
>819e	39 a4					.word	Assemble_clv                     ; $94 CLV
>81a0	67 a3					.word	Assemble_cmp                     ; $95 CMP
>81a2	b0 a3					.word	Assemble_cpx                     ; $96 CPX
>81a4	ab a3					.word	Assemble_cpy                     ; $97 CPY
>81a6	8d a3					.word	Assemble_dec                     ; $98 DEC
>81a8	45 a4					.word	Assemble_dex                     ; $99 DEX
>81aa	21 a4					.word	Assemble_dey                     ; $9a DEY
>81ac	57 a3					.word	Assemble_eor                     ; $9b EOR
>81ae	92 a3					.word	Assemble_inc                     ; $9c INC
>81b0	51 a4					.word	Assemble_inx                     ; $9d INX
>81b2	41 a4					.word	Assemble_iny                     ; $9e INY
>81b4	c4 a3					.word	Assemble_jmp                     ; $9f JMP
>81b6	bf a3					.word	Assemble_jsr                     ; $a0 JSR
>81b8	63 a3					.word	Assemble_lda                     ; $a1 LDA
>81ba	88 a3					.word	Assemble_ldx                     ; $a2 LDX
>81bc	a6 a3					.word	Assemble_ldy                     ; $a3 LDY
>81be	79 a3					.word	Assemble_lsr                     ; $a4 LSR
>81c0	55 a4					.word	Assemble_nop                     ; $a5 NOP
>81c2	4f a3					.word	Assemble_ora                     ; $a6 ORA
>81c4	05 a4					.word	Assemble_pha                     ; $a7 PHA
>81c6	f1 a3					.word	Assemble_php                     ; $a8 PHP
>81c8	4d a4					.word	Assemble_phx                     ; $a9 PHX
>81ca	0d a4					.word	Assemble_phy                     ; $aa PHY
>81cc	15 a4					.word	Assemble_pla                     ; $ab PLA
>81ce	f9 a3					.word	Assemble_plp                     ; $ac PLP
>81d0	5d a4					.word	Assemble_plx                     ; $ad PLX
>81d2	1d a4					.word	Assemble_ply                     ; $ae PLY
>81d4	74 a3					.word	Assemble_rol                     ; $af ROL
>81d6	7e a3					.word	Assemble_ror                     ; $b0 ROR
>81d8	01 a4					.word	Assemble_rti                     ; $b1 RTI
>81da	11 a4					.word	Assemble_rts                     ; $b2 RTS
>81dc	6b a3					.word	Assemble_sbc                     ; $b3 SBC
>81de	fd a3					.word	Assemble_sec                     ; $b4 SEC
>81e0	59 a4					.word	Assemble_sed                     ; $b5 SED
>81e2	19 a4					.word	Assemble_sei                     ; $b6 SEI
>81e4	5f a3					.word	Assemble_sta                     ; $b7 STA
>81e6	83 a3					.word	Assemble_stx                     ; $b8 STX
>81e8	a1 a3					.word	Assemble_sty                     ; $b9 STY
>81ea	97 a3					.word	Assemble_stz                     ; $ba STZ
>81ec	35 a4					.word	Assemble_tax                     ; $bb TAX
>81ee	31 a4					.word	Assemble_tay                     ; $bc TAY
>81f0	ba a3					.word	Assemble_trb                     ; $bd TRB
>81f2	b5 a3					.word	Assemble_tsb                     ; $be TSB
>81f4	3d a4					.word	Assemble_tsx                     ; $bf TSX
>81f6	25 a4					.word	Assemble_txa                     ; $c0 TXA
>81f8	2d a4					.word	Assemble_txs                     ; $c1 TXS
>81fa	29 a4					.word	Assemble_tya                     ; $c2 TYA

;******  Return to file: ./common/aa.system/00start.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/assembler.asm

.81fc					AssembleGroup1:
.81fc	a9 ff		lda #$ff			lda 	#$FF
.81fe	8d 24 07	sta $0724			sta 	ModeMask 					; initialise the mode mask - all for all
.8201	80 02		bra $8205			bra 	AsmGroup12
.8203					AssembleGroup2:
.8203	a5 00		lda $00				lda 	$00
.8205					AsmGroup12:
.8205	8d 22 07	sta $0722			sta 	IsGroup1 					; save the 'group 1' flag
.8208	68		pla				pla 								; pop the return address to access the information following.
.8209	fa		plx				plx
.820a	20 93 82	jsr $8293			jsr 	AccessParameters 			; get opcode and save as base
.820d	8d 23 07	sta $0723			sta 	BaseOpcode
.8210	ad 22 07	lda $0722			lda 	IsGroup1 					; skip if group 1 as we don't have a complex mask.
.8213	d0 08		bne $821d			bne 	_AG12HaveMask
.8215	a9 02		lda #$02			lda 	#2 							; if group 2 the second parameter is the mask
.8217	20 9b 82	jsr $829b			jsr 	GetParameter		 		; e.g. which modes are supported for this operand
.821a	8d 24 07	sta $0724			sta 	ModeMask
.821d					_AG12HaveMask:
.821d	20 d6 83	jsr $83d6			jsr 	TypeAndCalculateOperand 	; get zero page type
.8220	da		phx				phx 								; save found address mode
.8221	20 ff 82	jsr $82ff			jsr 	AssembleModeX
.8224	fa		plx				plx  								; restore address mode
.8225	b0 0b		bcs $8232			bcs 	_AG12Exit
.8227	20 33 82	jsr $8233			jsr 	PromoteToAbsolute  			; promote ZP to ABS and try that
.822a	20 ff 82	jsr $82ff			jsr 	AssembleModeX
.822d	b0 03		bcs $8232			bcs 	_AG12Exit
.822f	4c 98 a4	jmp $a498			jmp 	SyntaxError 				; can't do either, so must be wrong mode/operand.
.8232					_AG12Exit:
.8232	60		rts				rts
.8233					PromoteToAbsolute:
.8233	a9 6c		lda #$6c			lda 	#AM_ABS 					; lda xx
.8235	e0 e4		cpx #$e4			cpx 	#AM_ZEROPAGE
.8237	f0 19		beq $8252			beq 	_PTADo
.8239	a9 7c		lda #$7c			lda 	#AM_ABSX 					; lda xx,X
.823b	e0 f4		cpx #$f4			cpx 	#AM_ZEROX
.823d	f0 13		beq $8252			beq 	_PTADo
.823f	a9 78		lda #$78			lda 	#AM_ABSY 					; lda xx,Y
.8241	e0 80		cpx #$80			cpx 	#AM_ZEROY
.8243	f0 0d		beq $8252			beq 	_PTADo
.8245	a9 01		lda #$01			lda 	#AM_INDABS 					; lda (xx) (jump)
.8247	e0 d1		cpx #$d1			cpx 	#AM_IND
.8249	f0 07		beq $8252			beq 	_PTADo
.824b	a9 02		lda #$02			lda 	#AM_INDABSX 				; lda (xx,x) (jump)
.824d	e0 c0		cpx #$c0			cpx 	#AM_INDX
.824f	f0 01		beq $8252			beq 	_PTADo
.8251	60		rts				rts
.8252					_PTADo:
.8252	aa		tax				tax
.8253	60		rts				rts
.8254					AssembleGroup3:
.8254	68		pla				pla 								; get parameters, which is just the opcode.
.8255	fa		plx				plx
.8256	20 93 82	jsr $8293			jsr 	AccessParameters 			; get and output opcode
.8259	20 ab 82	jsr $82ab			jsr 	AssemblerWriteByte
.825c	20 3a 84	jsr $843a			jsr 	CalculateOperand 			; get a 16 bit operand
.825f	ad 08 06	lda $0608			lda 	NSMantissa0 				; calculate the offset
.8262	38		sec				sec
.8263	ed 1d 07	sbc $071d			sbc 	AssemblerAddress
.8266	48		pha				pha 								; LSB in A
.8267	ad 10 06	lda $0610			lda 	NSMantissa1
.826a	ed 1e 07	sbc $071e			sbc 	AssemblerAddress+1
.826d	aa		tax				tax 								; MSB in X
.826e	68		pla				pla
.826f	18		clc				clc 								; $80 to easy check $80-$7F, plus 1 for offset error
.8270	69 7f		adc #$7f			adc 	#$7F
.8272	90 01		bcc $8275			bcc 	_AG3NoCarry
.8274	e8		inx				inx
.8275					_AG3NoCarry:
.8275	38		sec				sec 								; fix back and write out anyways.
.8276	e9 80		sbc #$80			sbc 	#$80
.8278	20 ab 82	jsr $82ab			jsr 	AssemblerWriteByte
.827b	e0 00		cpx #$00			cpx 	#0 							; was it in range
.827d	f0 0a		beq $8289			beq 	_AG3Exit
.827f	ad 1f 07	lda $071f			lda 	AssemblerControl 			; are we allowing bad values ?
.8282	29 01		and #$01			and 	#1
.8284	f0 03		beq $8289			beq 	_AG3Exit
.8286	4c 9d a4	jmp $a49d			jmp 	RangeError 					; no, branch is out of range
.8289					_AG3Exit:
.8289	60		rts				rts
.828a					AssembleGroup4:
.828a	68		pla				pla 								; pop address
.828b	fa		plx				plx
.828c	20 93 82	jsr $8293			jsr 	AccessParameters 			; access and get first
.828f	20 ab 82	jsr $82ab			jsr 	AssemblerWriteByte 			; output it.
.8292	60		rts				rts
.8293					AccessParameters:
.8293	8d 20 07	sta $0720			sta 	ParamStart
.8296	8e 21 07	stx $0721			stx 	ParamStart+1
.8299	a9 01		lda #$01			lda 	#1
.829b					GetParameter:
.829b	5a		phy				phy
.829c	a8		tay				tay
.829d	ad 20 07	lda $0720			lda 	ParamStart
.82a0	85 36		sta $36				sta 	zTemp0
.82a2	ad 21 07	lda $0721			lda 	ParamStart+1
.82a5	85 37		sta $37				sta 	zTemp0+1
.82a7	b1 36		lda ($36),y			lda 	(zTemp0),y
.82a9	7a		ply				ply
.82aa	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/aswrite.asm

.82ab					AssemblerWriteByte:
.82ab	48		pha			pha
.82ac	ad 1f 07	lda $071f		lda 	AssemblerControl 				; check printing bytes ?
.82af	29 02		and #$02		and 	#2
.82b1	f0 1b		beq $82ce		beq 	_AWBNoPrint
.82b3	ad 1e 07	lda $071e		lda		AssemblerAddress+1 				; print address
.82b6	20 e9 82	jsr $82e9		jsr 	PrintHex
.82b9	ad 1d 07	lda $071d		lda		AssemblerAddress
.82bc	20 e9 82	jsr $82e9		jsr 	PrintHex
.82bf	a9 20		lda #$20		lda 	#' '
.82c1	20 06 a7	jsr $a706		jsr 	EXTPrintCharacter
.82c4	68		pla			pla 									; print byte
.82c5	48		pha			pha
.82c6	20 e9 82	jsr $82e9		jsr 	PrintHex
.82c9	a9 0d		lda #$0d		lda 	#13
.82cb	20 06 a7	jsr $a706		jsr 	EXTPrintCharacter
.82ce					_AWBNoPrint:
.82ce	ad 1d 07	lda $071d		lda		AssemblerAddress				; copy address to zTemp0
.82d1	85 36		sta $36			sta 	zTemp0
.82d3	ad 1e 07	lda $071e		lda		AssemblerAddress+1
.82d6	f0 0e		beq $82e6		beq 	_AWBRange
.82d8	85 37		sta $37			sta 	zTemp0+1
.82da	68		pla			pla 									; write byte out
.82db	92 36		sta ($36)		sta 	(zTemp0)
.82dd	ee 1d 07	inc $071d		inc 	AssemblerAddress 				; bump address
.82e0	d0 03		bne $82e5		bne 	_AWBNoCarry
.82e2	ee 1e 07	inc $071e		inc 	AssemblerAddress+1
.82e5					_AWBNoCarry:
.82e5	60		rts			rts
.82e6					_AWBRange:
.82e6	4c 9d a4	jmp $a49d		jmp 	RangeError
.82e9					PrintHex:
.82e9	48		pha				pha
.82ea	4a		lsr a				lsr 	a
.82eb	4a		lsr a				lsr 	a
.82ec	4a		lsr a				lsr 	a
.82ed	4a		lsr a				lsr 	a
.82ee	20 f2 82	jsr $82f2			jsr 	_PrintNibble
.82f1	68		pla				pla
.82f2					_PrintNibble:
.82f2	29 0f		and #$0f			and 	#15
.82f4	c9 0a		cmp #$0a			cmp 	#10
.82f6	90 02		bcc $82fa			bcc 	_NoShift
.82f8	69 06		adc #$06			adc 	#6
.82fa					_NoShift:
.82fa	69 30		adc #$30			adc 	#48
.82fc	4c 06 a7	jmp $a706			jmp 	EXTPrintCharacter

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/instruction.asm

.82ff					AssembleModeX:
.82ff	5a		phy				phy
.8300	ad 22 07	lda $0722			lda 	IsGroup1
.8303	f0 17		beq $831c			beq 	_AMXGroup2
.8305	8a		txa				txa 							; is it in group # 1
.8306	29 40		and #$40			and 	#AM_ISG1
.8308	f0 50		beq $835a			beq 	_AMXFail 				; no, give up.
.830a	8a		txa				txa 							; get back.
.830b	29 1f		and #$1f			and 	#$1F 					; this is now the offset.
.830d	e0 e0		cpx #$e0			cpx 	#AM_IMMEDIATE 			; if not immediate, we can continue.
.830f	d0 22		bne $8333			bne 	_AMXHaveInfo
.8311	ad 23 07	lda $0723			lda 	BaseOpcode 				; cannot store immediate.
.8314	c9 81		cmp #$81			cmp 	#$81
.8316	f0 42		beq $835a			beq 	_AMXFail
.8318	a9 08		lda #$08			lda 	#8 						; if immediate we use offset 8.
.831a	80 17		bra $8333			bra 	_AMXHaveInfo 			; odd design decision there.
.831c					_AMXGroup2:
.831c	8a		txa				txa 							; is it in group 2 ?
.831d	29 20		and #$20			and 	#AM_ISG2
.831f	f0 39		beq $835a			beq 	_AMXFail 				; no, give up.
.8321	8a		txa				txa 							; get the offset into Y
.8322	29 1f		and #$1f			and 	#$1F
.8324	4a		lsr a				lsr 	a 						; make it 0-7.
.8325	4a		lsr a				lsr  	a
.8326	a8		tay				tay
.8327	ad 24 07	lda $0724			lda 	ModeMask 				; shift the modemask left so you can check it against the requested offset
.832a					_AMXCheckOkay:
.832a	0a		asl a				asl 	a 						; shift modemask left enough times to check legitimate.
.832b	88		dey				dey
.832c	10 fc		bpl $832a			bpl 	_AMXCheckOkay
.832e	90 2a		bcc $835a			bcc 	_AMXFail 				; not allowed.
.8330	8a		txa				txa  							; get mask back
.8331	29 1f		and #$1f			and 	#$1F
.8333					_AMXHaveInfo:
.8333	e0 00		cpx #$00			cpx 	#$00 					; does it *require* an 8 bit operand
.8335	10 05		bpl $833c			bpl 	_AMXAnySize 			; checking bit 7, the zero page opcode flag.
.8337	ac 10 06	ldy $0610			ldy 	NSMantissa1 			; fail if it is outside range, e.g. the MSB is set.
.833a	d0 1e		bne $835a			bne 	_AMXFail
.833c					_AMXAnySize:
.833c	18		clc				clc 							; add offset to the base opcode
.833d	6d 23 07	adc $0723			adc 	BaseOpcode
.8340					_AMXOutputCode:
.8340	20 ab 82	jsr $82ab			jsr 	AssemblerWriteByte 		; write the opcode out.
.8343	e0 28		cpx #$28			cpx 	#AM_ACC 				; A mode (e.g. ASL A)
.8345	f0 10		beq $8357			beq 	_AMXExit
.8347	ad 08 06	lda $0608			lda 	NSMantissa0 				; write LSB operand
.834a	20 ab 82	jsr $82ab			jsr 	AssemblerWriteByte
.834d	e0 00		cpx #$00			cpx 	#$00 					; zeropage ?
.834f	30 06		bmi $8357			bmi 	_AMXExit
.8351	ad 10 06	lda $0610			lda 	NSMantissa1 			; write MSB operand
.8354	20 ab 82	jsr $82ab			jsr 	AssemblerWriteByte
.8357					_AMXExit:
.8357	7a		ply				ply
.8358	38		sec				sec
.8359	60		rts				rts
.835a					_AMXFail:
.835a	a0 00		ldy #$00			ldy 	#0
.835c					_AMXCheckOddities:
.835c	8a		txa				txa
.835d	d9 85 83	cmp $8385,y			cmp 	ExtraOpcode+2,y 		; match address mode
.8360	d0 16		bne $8378			bne 	_AMXCONext
.8362	b9 83 83	lda $8383,y			lda 	ExtraOpcode+0,y 		; do the base opcodes match
.8365	cd 23 07	cmp $0723			cmp 	BaseOpcode
.8368	d0 0e		bne $8378			bne 	_AMXCONext
.836a	e0 00		cpx #$00			cpx 	#$00 					; requires zero page ?
.836c	10 05		bpl $8373			bpl 	_AMXCONotZero
.836e	ad 10 06	lda $0610			lda 	NSMantissa1
.8371	d0 05		bne $8378			bne 	_AMXCONext
.8373					_AMXCONotZero:
.8373	b9 84 83	lda $8384,y			lda 	ExtraOpcode+1,y 		; get new opcode
.8376	80 c8		bra $8340			bra 	_AMXOutputCode 			; and assemble it
.8378					_AMXCONext:
.8378	c8		iny				iny
.8379	c8		iny				iny
.837a	c8		iny				iny
.837b	b9 83 83	lda $8383,y			lda 	ExtraOpcode+0,y 		; end of table
.837e	d0 dc		bne $835c			bne 	_AMXCheckOddities
.8380					_AMXCOFail:
.8380	7a		ply				ply
.8381	18		clc				clc
.8382	60		rts				rts
.8383					ExtraOpcode:
>8383	40 6c 01					.byte $40,$6c,AM_INDABS 	; jmp
>8386	40 7c 02					.byte $40,$7C,AM_INDABSX 	; jmp
>8389	a2 be 78					.byte $a2,$BE,AM_ABSY 		; ldx
>838c	a2 b6 80					.byte $a2,$B6,AM_ZEROY 		; ldx
>838f	82 96 80					.byte $82,$96,AM_ZEROY 		; stx
>8392	e2 1a 28					.byte $e2,$1a,AM_ACC 		; inc
>8395	c2 3a 28					.byte $c2,$3a,AM_ACC 		; dec
>8398	20 89 e0					.byte $20,$89,AM_IMMEDIATE 	; bit
>839b	60 9c 6c					.byte $60,$9c,AM_ABS 		; stz
>839e	60 9e 7c					.byte $60,$9e,AM_ABSX 		; stz
>83a1	00						.byte $00

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/label.asm

.83a2					LabelHere:
.83a2	c8		iny				iny 								; skip .
.83a3	a2 00		ldx #$00			ldx 	#0 							; get a term
.83a5	20 43 93	jsr $9343			jsr 	EvaluateTerm 				; get a term
.83a8	ad 00 06	lda $0600			lda 	NSStatus 					; needs to be an integer reference.
.83ab	c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.83ad	d0 24		bne $83d3			bne 	_ALType
.83af	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy reference address to zTemp0
.83b2	85 36		sta $36				sta 	zTemp0
.83b4	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.83b7	85 37		sta $37				sta 	zTemp0+1
.83b9	5a		phy				phy 								; copy address in.
.83ba	a0 01		ldy #$01			ldy 	#1
.83bc	ad 1d 07	lda $071d			lda	 	AssemblerAddress
.83bf	92 36		sta ($36)			sta 	(zTemp0)
.83c1	ad 1e 07	lda $071e			lda	 	AssemblerAddress+1
.83c4	91 36		sta ($36),y			sta 	(zTemp0),y
.83c6	c8		iny				iny
.83c7	a9 00		lda #$00			lda 	#0
.83c9	91 36		sta ($36),y			sta 	(zTemp0),y
.83cb	c8		iny				iny
.83cc	91 36		sta ($36),y			sta 	(zTemp0),y
.83ce	c8		iny				iny
.83cf	91 36		sta ($36),y			sta 	(zTemp0),y
.83d1	7a		ply				ply
.83d2	60		rts				rts
.83d3					_ALType:
.83d3	4c a2 a4	jmp $a4a2			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/operands.asm

.83d6					TypeAndCalculateOperand:
.83d6	b1 30		lda ($30),y			lda 	(codePtr),y
.83d8	a2 28		ldx #$28			ldx 	#AM_ACC 					; ACC if : or EOL
.83da	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.83dc	f0 5b		beq $8439			beq 	_TACOExit
.83de	c9 80		cmp #$80			cmp 	#KWC_EOL
.83e0	f0 57		beq $8439			beq 	_TACOExit
.83e2	c8		iny				iny
.83e3	a2 e0		ldx #$e0			ldx 	#AM_IMMEDIATE
.83e5	c9 23		cmp #$23			cmp 	#KWD_HASH 					; if hash, then immediate - constant.
.83e7	f0 51		beq $843a			beq 	CalculateOperand
.83e9	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; if ( then check for indirection
.83eb	f0 1f		beq $840c			beq 	_TACOIndirect
.83ed	88		dey				dey 								; undo get of first character
.83ee	20 3a 84	jsr $843a			jsr 	CalculateOperand 			; get operand
.83f1	b1 30		lda ($30),y			lda 	(codePtr),y
.83f3	a2 e4		ldx #$e4			ldx 	#AM_ZEROPAGE 				; if not, try zero page (then absolute)
.83f5	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.83f7	d0 40		bne $8439			bne 	_TACOExit
.83f9	c8		iny				iny
.83fa	20 78 9e	jsr $9e78			jsr 	TACOCheckXY 				; extract X,Y or 0 (neither) from the variable.
.83fd	a2 f4		ldx #$f4			ldx 	#AM_ZEROX 					; check for X
.83ff	c9 58		cmp #$58			cmp 	#'X'
.8401	f0 36		beq $8439			beq 	_TACOExit
.8403	a2 80		ldx #$80			ldx 	#AM_ZEROY 					; check for Y
.8405	c9 59		cmp #$59			cmp 	#'Y'
.8407	f0 30		beq $8439			beq 	_TACOExit
.8409					_TACOSyntax:
.8409	4c 98 a4	jmp $a498			jmp 	SyntaxError
.840c					_TACOIndirect:
.840c	20 3a 84	jsr $843a			jsr 	CalculateOperand 			; get the operand
.840f	b1 30		lda ($30),y			lda 	(codePtr),y
.8411	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if , then it must be ,X)
.8413	f0 17		beq $842c			beq 	_TACOIndX
.8415	20 b6 9e	jsr $9eb6			jsr 	CheckRightBracket  			; otherwise must be ) or ),Y
.8418	b1 30		lda ($30),y			lda 	(codePtr),y
.841a	a2 d1		ldx #$d1			ldx 	#AM_IND
.841c	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not comma then exit with (xx)
.841e	d0 19		bne $8439			bne 	_TACOExit
.8420	c8		iny				iny
.8421	20 78 9e	jsr $9e78			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.8424	c9 59		cmp #$59			cmp 	#'Y' 						; check Y
.8426	d0 e1		bne $8409			bne 	_TACOSyntax
.8428	a2 d0		ldx #$d0			ldx 	#AM_INDY
.842a	80 0d		bra $8439			bra 	_TACOExit
.842c					_TACOIndX:
.842c	c8		iny				iny
.842d	20 78 9e	jsr $9e78			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.8430	c9 58		cmp #$58			cmp 	#'X' 						; check X
.8432	d0 d5		bne $8409			bne 	_TACOSyntax
.8434	20 b6 9e	jsr $9eb6			jsr 	CheckRightBracket			; check )
.8437	a2 c0		ldx #$c0			ldx 	#AM_INDX
.8439					_TACOExit:
.8439	60		rts				rts
.843a					CalculateOperand:
.843a	48		pha				pha
.843b	da		phx				phx
.843c	a2 00		ldx #$00			ldx 	#0 							; get 16 bit integer in Slot 0
.843e	20 48 97	jsr $9748			jsr 	Evaluate16BitInteger
.8441	fa		plx				plx
.8442	68		pla				pla
.8443	60		rts				rts
.9e78					TACOCheckXY:
.9e78	b1 30		lda ($30),y			lda 	(codePtr),y
.9e7a	29 c0		and #$c0			and 	#$C0 						; check it is an identifier reference.
.9e7c	c9 40		cmp #$40			cmp 	#$40
.9e7e	d0 21		bne $9ea1			bne 	_TCXYFail
.9e80	b1 30		lda ($30),y			lda 	(codePtr),y
.9e82	18		clc				clc
.9e83	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.9e85	85 37		sta $37				sta 	zTemp0+1
.9e87	c8		iny				iny
.9e88	b1 30		lda ($30),y			lda 	(codePtr),y
.9e8a	c8		iny				iny
.9e8b	85 36		sta $36				sta 	zTemp0
.9e8d	5a		phy				phy 								; save position
.9e8e	a0 02		ldy #$02			ldy 	#2 							; type is integer ?
.9e90	b1 36		lda ($36),y			lda 	(zTemp0),y
.9e92	d0 0c		bne $9ea0			bne 	_TCXYPopFail
.9e94	a0 08		ldy #$08			ldy 	#8 							; get first character, should have bit 7 set as also last.
.9e96	b1 36		lda ($36),y			lda 	(zTemp0),y
.9e98	c9 d8		cmp #$d8			cmp 	#'X'+$80 					; should be X or Y
.9e9a	f0 08		beq $9ea4			beq 	_TCXYFound
.9e9c	c9 d9		cmp #$d9			cmp 	#'Y'+$80
.9e9e	f0 04		beq $9ea4			beq 	_TCXYFound
.9ea0					_TCXYPopFail:
.9ea0	7a		ply				ply
.9ea1					_TCXYFail:
.9ea1	a9 00		lda #$00			lda 	#0
.9ea3	60		rts				rts
.9ea4					_TCXYFound:
.9ea4	7a		ply				ply 								; restore position
.9ea5	29 7f		and #$7f			and 	#$7F 						; throw bit 7
.9ea7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/editor.asm

.8444					EditProgramCode:
.8444	ad 26 07	lda $0726			lda 	TokenLineNumber 			; find the line.
.8447	ae 27 07	ldx $0727			ldx 	TokenLineNumber+1
.844a	20 45 9e	jsr $9e45			jsr 	MemorySearch
.844d	90 05		bcc $8454			bcc 	_EPCNoDelete 				; reached the end don't delete
.844f	d0 03		bne $8454			bne 	_EPCNoDelete 				; found slot but didn't match, no delete
.8451	20 50 a7	jsr $a750			jsr 	MemoryDeleteLine 			; delete the line
.8454					_EPCNoDelete:
.8454	ad 28 07	lda $0728			lda 	TokenBuffer 				; buffer empty
.8457	c9 80		cmp #$80			cmp 	#KWC_EOL
.8459	f0 0d		beq $8468			beq 	_EPCNoInsert
.845b	ad 26 07	lda $0726			lda 	TokenLineNumber 			; find the line - it cannot exist.
.845e	ae 27 07	ldx $0727			ldx 	TokenLineNumber+1 			; so this can't fail, it returns some point in the code.
.8461	20 45 9e	jsr $9e45			jsr 	MemorySearch
.8464	18		clc				clc 								; insert at this point.
.8465	20 87 a7	jsr $a787			jsr 	MemoryInsertLine 			; insert the line
.8468					_EPCNoInsert:
.8468	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/warmstart.asm

.8469					WarmStart:
.8469	a2 ff		ldx #$ff			ldx 	#$FF
.846b	9a		txs				txs
.846c	20 1c a7	jsr $a71c			jsr 	EXTInputLine 				; get line to lineBuffer
.846f	20 a4 9b	jsr $9ba4			jsr 	TokeniseLine 				; tokenise the line
.8472	ad 26 07	lda $0726			lda 	TokenLineNumber 			; line number ?
.8475	0d 27 07	ora $0727			ora 	TokenLineNumber+1
.8478	d0 17		bne $8491			bne 	_WSEditCode 				; if so,edit code.
.847a	9c 25 07	stz $0725			stz 	TokenOffset 				; zero offset, meaning it only runs one line.
.847d	a9 25		lda #$25			lda 	#((TokenOffset) & $FF)
.847f	85 30		sta $30				sta 	codePtr
.8481	a9 07		lda #$07			lda 	#((TokenOffset) >> 8)
.8483	85 31		sta $31				sta 	codePtr+1
.8485	ad 28 07	lda $0728			lda 	TokenBuffer 				; nothing to run
.8488	c9 80		cmp #$80			cmp 	#KWC_EOL
.848a	f0 dd		beq $8469			beq 	WarmStart
.848c	20 b8 89	jsr $89b8			jsr 	RUNCodePointerLine 			; execute that line.
.848f	80 d8		bra $8469			bra 	WarmStart
.8491					_WSEditCode:
.8491	20 44 84	jsr $8444			jsr 	EditProgramCode
.8494	20 d6 84	jsr $84d6			jsr 	ClearCommand
.8497	80 d0		bra $8469			bra 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assemble.asm

.8499					AssembleCommand:
.8499	a2 00		ldx #$00			ldx 	#0
.849b	20 48 97	jsr $9748			jsr 	Evaluate16BitInteger 		; start address
.849e	ad 08 06	lda $0608			lda 	NSMantissa0
.84a1	8d 1d 07	sta $071d			sta 	AssemblerAddress
.84a4	ad 10 06	lda $0610			lda 	NSMantissa1
.84a7	8d 1e 07	sta $071e			sta 	AssemblerAddress+1
.84aa	20 be 9e	jsr $9ebe			jsr 	CheckComma
.84ad	20 54 97	jsr $9754			jsr 	Evaluate8BitInteger 		; options
.84b0	ad 08 06	lda $0608			lda 	NSMantissa0
.84b3	8d 1f 07	sta $071f			sta 	AssemblerControl
.84b6	60		rts				rts
.84b7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assert.asm

.84b8					AssertCommand:
.84b8	a2 00		ldx #$00			ldx 	#0
.84ba	20 33 97	jsr $9733			jsr 	EvaluateInteger 			; the assert test
.84bd	20 ec 97	jsr $97ec			jsr 	NSMIsZero 					; exit if result is non zero.
.84c0	d0 05		bne $84c7			bne 	_ACExit
.84c2	a9 0a		lda #$0a		lda	#10
.84c4	4c 69 8c	jmp $8c69		jmp	ErrorHandler
.84c7					_ACExit:
.84c7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/call.asm

.84c8					CallCommand:
.84c8	a2 00		ldx #$00			ldx 	#0
.84ca	20 48 97	jsr $9748			jsr 	Evaluate16BitInteger
.84cd	ad 10 06	lda $0610			lda 	NSMantissa1
.84d0	8d 09 06	sta $0609			sta 	NSMantissa0+1
.84d3	6c 08 06	jmp ($0608)			jmp 	(NSMantissa0)

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/clear.asm

.84d6					ClearCommand:
.84d6	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.84d8	85 36		sta $36				sta 	0+zTemp0
.84da	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.84dc	85 37		sta $37				sta 	1+zTemp0
.84de					_ClearZeroLoop:
.84de	b2 36		lda ($36)			lda 	(zTemp0) 					; end of variables
.84e0	f0 24		beq $8506			beq 	_ClearZeroEnd
.84e2	a0 03		ldy #$03			ldy 	#3 							; erase the variables
.84e4	a9 00		lda #$00			lda 	#0
.84e6					_ClearOneVariable:
.84e6	91 36		sta ($36),y			sta 	(zTemp0),y
.84e8	c8		iny				iny
.84e9	c0 08		cpy #$08			cpy 	#8
.84eb	d0 f9		bne $84e6			bne 	_ClearOneVariable
.84ed	a0 02		ldy #$02			ldy 	#2 							; has it been marked procedure
.84ef	b1 36		lda ($36),y			lda 	(zTemp0),y
.84f1	c9 18		cmp #$18			cmp 	#NSTProcedure
.84f3	d0 04		bne $84f9			bne 	_ClearNotProcedure
.84f5	a9 04		lda #$04			lda 	#NSTInteger+NSBIsArray 		; set it back to an integer array
.84f7	91 36		sta ($36),y			sta 	(zTemp0),y
.84f9					_ClearNotProcedure:
.84f9	18		clc				clc 								; go to the next variable
.84fa	b2 36		lda ($36)			lda 	(zTemp0)
.84fc	65 36		adc $36				adc 	zTemp0
.84fe	85 36		sta $36				sta 	zTemp0
.8500	90 dc		bcc $84de			bcc 	_ClearZeroLoop
.8502	e6 37		inc $37				inc 	zTemp0+1
.8504	80 d8		bra $84de			bra 	_ClearZeroLoop
.8506					_ClearZeroEnd:
.8506	18		clc				clc
.8507	a5 36		lda $36				lda 	zTemp0
.8509	69 01		adc #$01			adc 	#1
.850b	8d 0c 07	sta $070c			sta 	lowMemPtr
.850e	a5 37		lda $37				lda 	zTemp0+1
.8510	69 00		adc #$00			adc 	#0
.8512	8d 0d 07	sta $070d			sta 	lowMemPtr+1
.8515	20 4c 98	jsr $984c			jsr 	StackReset
.8518	20 98 a6	jsr $a698			jsr 	StringSystemInitialise
.851b	20 89 8b	jsr $8b89			jsr 	ProcedureScan
.851e	20 74 89	jsr $8974			jsr 	Command_Restore
.8521	9c 1d 07	stz $071d			stz 	AssemblerAddress
.8524	9c 1e 07	stz $071e			stz 	AssemblerAddress+1
.8527	9c 1f 07	stz $071f			stz 	AssemblerControl
.852a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/data.asm

.852b					Command_Data:
.852b	a9 3a		lda #$3a			lda 	#KWD_COLON 					; advance to colon/EOL
.852d	a2 80		ldx #$80			ldx 	#KWC_EOL
.852f	20 db 8b	jsr $8bdb			jsr 	ScanForward
.8532	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/dim.asm

.8533					DimCommand:
.8533	b1 30		lda ($30),y			lda 	(codePtr),y
.8535	29 c0		and #$c0			and 	#$C0
.8537	c9 40		cmp #$40			cmp 	#$40
.8539	d0 7a		bne $85b5			bne 	_DCSyntax
.853b	b1 30		lda ($30),y			lda 	(codePtr),y
.853d	18		clc				clc
.853e	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8540	85 3f		sta $3f				sta 	zaTemp+1
.8542	c8		iny				iny
.8543	b1 30		lda ($30),y			lda 	(codePtr),y
.8545	c8		iny				iny
.8546	85 3e		sta $3e				sta 	zaTemp
.8548	5a		phy				phy
.8549	a0 02		ldy #$02			ldy 	#2 						; read type byte
.854b	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.854d	29 18		and #$18			and 	#NSBTypeMask 			; check it's not a procedure
.854f	c9 18		cmp #$18			cmp 	#NSTProcedure
.8551	f0 62		beq $85b5			beq 	_DCSyntax
.8553	b1 3e		lda ($3e),y			lda 	(zaTemp),y 				; check it's an array
.8555	29 04		and #$04			and 	#NSBIsArray
.8557	f0 64		beq $85bd			beq 	_DCType
.8559	a0 04		ldy #$04			ldy 	#4 						; check not already defined
.855b	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.855d	d0 59		bne $85b8			bne 	_DCRedefine
.855f	7a		ply				ply
.8560	20 c0 85	jsr $85c0			jsr 	_DCGetSize 				; get array size, check it.
.8563	5a		phy				phy
.8564	a0 05		ldy #$05			ldy 	#5 						; store in first array size slot
.8566	91 3e		sta ($3e),y			sta 	(zaTemp),y 				; second will be zero.
.8568	7a		ply				ply 							; is there a second (e.g. ,x)
.8569	b1 30		lda ($30),y			lda 	(codePtr),y
.856b	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.856d	d0 0a		bne $8579			bne 	_DCOneDimension
.856f	c8		iny				iny 							; skip comma
.8570	20 c0 85	jsr $85c0			jsr 	_DCGetSize 				; get 2nd array size
.8573	5a		phy				phy
.8574	a0 06		ldy #$06			ldy 	#6 						; store in 2nd array size
.8576	91 3e		sta ($3e),y			sta 	(zaTemp),y
.8578	7a		ply				ply
.8579					_DCOneDimension:
.8579	5a		phy				phy 							; save position
.857a	a0 05		ldy #$05			ldy 	#5 						; dimensions + 1 in AX (as zero based)
.857c	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.857e	aa		tax				tax
.857f	c8		iny				iny
.8580	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8582	e8		inx				inx 							; bump them.
.8583	1a		inc a				inc 	a
.8584	20 38 a3	jsr $a338			jsr 	Multiply8x8 			; work out the total number of elements -> zTemp0
.8587	a5 37		lda $37				lda 	zTemp0+1 				; don't allow more than 8192 elements whatever
.8589	29 e0		and #$e0			and 	#$E0
.858b	d0 23		bne $85b0			bne 	_DCSize
.858d	a0 02		ldy #$02			ldy 	#2 						; get base type
.858f	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8591	20 ce 85	jsr $85ce			jsr 	ScaleByBaseType 		; scale by base type
.8594	a5 36		lda $36				lda 	zTemp0
.8596	a6 37		ldx $37				ldx 	zTemp0+1
.8598	20 f2 94	jsr $94f2			jsr 	AllocateXABytes 		; allocate memory
.859b	a0 03		ldy #$03			ldy 	#3 						; copy into the address.
.859d	91 3e		sta ($3e),y			sta 	(zaTemp),y
.859f	c8		iny				iny
.85a0	8a		txa				txa
.85a1	91 3e		sta ($3e),y			sta 	(zaTemp),y
.85a3	7a		ply				ply 							; get position back
.85a4	20 b6 9e	jsr $9eb6			jsr 	CheckRightBracket 		; check )
.85a7	b1 30		lda ($30),y			lda 	(codePtr),y
.85a9	c8		iny				iny 							; consume in case
.85aa	c9 2c		cmp #$2c			cmp 	#KWD_COMMA		 		; if so do another DIM.
.85ac	f0 85		beq $8533			beq 	DimCommand
.85ae	88		dey				dey 							; undo consume
.85af	60		rts				rts
.85b0					_DCSize:
.85b0	a9 16		lda #$16		lda	#22
.85b2	4c 69 8c	jmp $8c69		jmp	ErrorHandler
.85b5					_DCSyntax:
.85b5	4c 98 a4	jmp $a498			jmp 	SyntaxError
.85b8					_DCRedefine:
.85b8	a9 15		lda #$15		lda	#21
.85ba	4c 69 8c	jmp $8c69		jmp	ErrorHandler
.85bd					_DCType:
.85bd	4c a2 a4	jmp $a4a2			jmp 	TypeError
.85c0					_DCGetSize:
.85c0	a2 00		ldx #$00			ldx 	#0 						; get first index.
.85c2	20 54 97	jsr $9754			jsr 	Evaluate8BitInteger 	; get array dimension
.85c5	c9 00		cmp #$00			cmp 	#0 						; must be 1-254
.85c7	f0 e7		beq $85b0			beq 	_DCSize
.85c9	c9 fe		cmp #$fe			cmp 	#254
.85cb	f0 e3		beq $85b0			beq 	_DCSize
.85cd	60		rts				rts
.85ce					ScaleByBaseType:
.85ce	29 10		and #$10			and 	#NSBIsString 			; is it string
.85d0	d0 19		bne $85eb			bne 	_SBBTString
.85d2	a5 37		lda $37				lda 	zTemp0+1 				; push value on stack
.85d4	48		pha				pha
.85d5	a5 36		lda $36				lda 	zTemp0
.85d7	48		pha				pha
.85d8	06 36		asl $36				asl 	zTemp0 					; x 2
.85da	26 37		rol $37				rol 	zTemp0+1
.85dc	06 36		asl $36				asl 	zTemp0 					; x 4
.85de	26 37		rol $37				rol 	zTemp0+1
.85e0	68		pla				pla 							; add stacked value = x 5
.85e1	65 36		adc $36				adc 	zTemp0
.85e3	85 36		sta $36				sta 	zTemp0
.85e5	68		pla				pla
.85e6	65 37		adc $37				adc 	zTemp0+1
.85e8	85 37		sta $37				sta 	zTemp0+1
.85ea	60		rts				rts
.85eb					_SBBTString:
.85eb	06 36		asl $36				asl 	zTemp0
.85ed	26 37		rol $37				rol 	zTemp0+1
.85ef	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/end.asm

.85f0					EndCommand:
.85f0	4c 69 84	jmp $8469			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/for.asm

.85f3					ForCommand:
.85f3	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; allocate 18 bytes on the return stack.
.85f5	20 f9 97	jsr $97f9			jsr 	StackOpen
.85f8	a2 00		ldx #$00			ldx 	#0
.85fa	20 43 93	jsr $9343			jsr 	EvaluateTerm
.85fd	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8600	c9 20		cmp #$20			cmp 	#NSBIsReference+NSTInteger 	; do we have an integer 4 byte reference.
.8602	d0 49		bne $864d			bne		_FCError
.8604	a9 3d		lda #$3d			lda 	#KWD_EQUAL 					; =
.8606	20 c6 9e	jsr $9ec6			jsr 	CheckNextA
.8609	e8		inx				inx
.860a	20 33 97	jsr $9733			jsr 	EvaluateInteger 			; <from> in +1
.860d	b1 30		lda ($30),y			lda 	(codePtr),y
.860f	c8		iny				iny 								; consume it
.8610	48		pha				pha 								; save on stack for later
.8611	c9 a5		cmp #$a5			cmp 	#KWD_DOWNTO
.8613	f0 04		beq $8619			beq 	_FCNoSyntax
.8615	c9 af		cmp #$af			cmp 	#KWD_TO
.8617	d0 37		bne $8650			bne 	_FCSyntaxError
.8619					_FCNoSyntax:
.8619	e8		inx				inx
.861a	20 33 97	jsr $9733			jsr 	EvaluateInteger
.861d	20 2b 98	jsr $982b			jsr 	STKSaveCodePosition 		; save loop back position
.8620	68		pla				pla 								; restore DOWNTO or TO
.8621	5a		phy				phy 								; save Y on the stack
.8622	49 a5		eor #$a5			eor 	#KWD_DOWNTO 				; 0 if DOWNTO, #0 if TO
.8624	f0 02		beq $8628			beq 	_FCNotDownTo
.8626	a9 02		lda #$02			lda 	#2
.8628					_FCNotDownTo:
.8628	3a		dec a				dec 	a 							; 255 if DOWNTO, 1 if TO
.8629	a0 10		ldy #$10			ldy 	#16
.862b	91 34		sta ($34),y			sta 	(basicStack),y 				; copy that out to the Basic Stack.
.862d	a0 06		ldy #$06			ldy 	#6
.862f	ad 08 06	lda $0608			lda 	NSMantissa0
.8632	91 34		sta ($34),y			sta 	(basicStack),y
.8634	ad 10 06	lda $0610			lda 	NSMantissa1
.8637	c8		iny				iny
.8638	91 34		sta ($34),y			sta 	(basicStack),y
.863a	a0 08		ldy #$08			ldy 	#8 							; set initial index value
.863c	a2 01		ldx #$01			ldx 	#1
.863e	20 53 86	jsr $8653			jsr 	FCIntegerToStack
.8641	a0 0c		ldy #$0c			ldy 	#12 						; set the terminal value
.8643	a2 02		ldx #$02			ldx 	#2
.8645	20 53 86	jsr $8653			jsr 	FCIntegerToStack
.8648	20 73 86	jsr $8673			jsr 	CopyIndexToReference
.864b	7a		ply				ply 								; restore position
.864c	60		rts				rts
.864d					_FCError:
.864d	4c a2 a4	jmp $a4a2			jmp 	TypeError
.8650					_FCSyntaxError:
.8650	4c 98 a4	jmp $a498			jmp 	SyntaxError
.8653					FCIntegerToStack:
.8653	3c 00 06	bit $0600,x			bit 	NSStatus,x 					; is the value negative
.8656	10 03		bpl $865b			bpl	 	_FCNotNegative
.8658	20 71 97	jsr $9771			jsr 	NSMNegateMantissa 			; if so 2's complement the mantissa
.865b					_FCNotNegative:
.865b	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy out to the basic stack
.865e	91 34		sta ($34),y			sta 	(basicStack),y
.8660	c8		iny				iny
.8661	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8664	91 34		sta ($34),y			sta 	(basicStack),y
.8666	c8		iny				iny
.8667	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.866a	91 34		sta ($34),y			sta 	(basicStack),y
.866c	c8		iny				iny
.866d	bd 20 06	lda $0620,x			lda 	NSMantissa3,x
.8670	91 34		sta ($34),y			sta 	(basicStack),y
.8672	60		rts				rts
.8673					CopyIndexToReference:
.8673	5a		phy				phy
.8674	a0 06		ldy #$06			ldy 	#6 							; copy address-8 to write to zTemp0
.8676	38		sec				sec 								; (because we copy from offset 8)
.8677	b1 34		lda ($34),y			lda 	(basicStack),y
.8679	e9 08		sbc #$08			sbc 	#8
.867b	85 36		sta $36				sta 	zTemp0
.867d	c8		iny				iny
.867e	b1 34		lda ($34),y			lda 	(basicStack),y
.8680	e9 00		sbc #$00			sbc 	#0
.8682	85 37		sta $37				sta 	zTemp0+1
.8684	a2 04		ldx #$04			ldx 	#4 							; this is the copy counter/
.8686	a0 0b		ldy #$0b			ldy 	#8+3 		 				; the MSB of the mantissa
.8688	b1 34		lda ($34),y			lda 	(basicStack),y
.868a	0a		asl a				asl 	a 							; into carry
.868b	a0 08		ldy #$08			ldy 	#8 							; where to copy from.
.868d	90 14		bcc $86a3			bcc 	_CITRNormal
.868f	38		sec				sec
.8690					_CITRNegative:
.8690	a9 00		lda #$00			lda 	#0
.8692	f1 34		sbc ($34),y			sbc 	(basicStack),y
.8694	91 36		sta ($36),y			sta 	(zTemp0),y
.8696	c8		iny				iny
.8697	ca		dex				dex
.8698	d0 f6		bne $8690			bne 	_CITRNegative
.869a	88		dey				dey 								; look at MSB of mantissa
.869b	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set the MSB as negative packed.
.869d	09 80		ora #$80			ora 	#$80
.869f	91 36		sta ($36),y			sta 	(zTemp0),y
.86a1	7a		ply				ply
.86a2	60		rts				rts
.86a3					_CITRNormal:
.86a3	b1 34		lda ($34),y			lda 	(basicStack),y 				; copy without negation.
.86a5	91 36		sta ($36),y			sta 	(zTemp0),y
.86a7	c8		iny				iny
.86a8	ca		dex				dex
.86a9	d0 f8		bne $86a3			bne 	_CITRNormal
.86ab	7a		ply				ply 								; and exit.
.86ac	60		rts				rts
.86ad					NextCommand:
.86ad	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; check FOR is TOS
.86af	a2 11		ldx #$11			ldx 	#ERRID_FOR 					; this error
.86b1	20 20 98	jsr $9820			jsr 	StackCheckFrame
.86b4	5a		phy				phy
.86b5	a0 10		ldy #$10			ldy 	#16 						; get the step count
.86b7	b1 34		lda ($34),y			lda 	(basicStack),y
.86b9	85 36		sta $36				sta 	zTemp0 						; this is the sign extend
.86bb	30 02		bmi $86bf			bmi 	_NCStepNeg
.86bd	64 36		stz $36				stz 	zTemp0 						; which is 0 or 255
.86bf					_NCStepNeg:
.86bf	a0 08		ldy #$08			ldy 	#8 							; offset to bump
.86c1	a2 04		ldx #$04			ldx 	#4 							; count to bump
.86c3	18		clc				clc
.86c4					_NCBump:
.86c4	71 34		adc ($34),y			adc 	(basicStack),y 				; add it
.86c6	91 34		sta ($34),y			sta 	(basicStack),y
.86c8	a5 36		lda $36				lda 	zTemp0 						; get sign extend for next time.
.86ca	c8		iny				iny 								; next byte
.86cb	ca		dex				dex 								; do four times
.86cc	d0 f6		bne $86c4			bne 	_NCBump
.86ce	20 73 86	jsr $8673			jsr		CopyIndexToReference		; copy it to the reference variable.
.86d1	a0 10		ldy #$10			ldy 	#16 						; get step count again
.86d3	b1 34		lda ($34),y			lda 	(basicStack),y
.86d5	0a		asl a				asl 	a 							; sign bit to carry
.86d6	a9 0c		lda #$0c			lda 	#12 						; offset of LHS = terminal offset
.86d8	85 38		sta $38				sta 	zTemp1
.86da	90 02		bcc $86de			bcc 	_NCCompRev 					; use if step is +ve
.86dc	a9 08		lda #$08			lda 	#8 							; now the LHS = index value
.86de					_NCCompRev:
.86de	85 38		sta $38				sta 	zTemp1 						; so zTemp0 is the index for LHS
.86e0	49 04		eor #$04			eor 	#(8^12) 					; and zTemp0+1 is the index for RHS
.86e2	85 39		sta $39				sta 	zTemp1+1
.86e4	a2 04		ldx #$04			ldx 	#4 							; bytes to compare
.86e6	38		sec				sec
.86e7					_NCCompare:
.86e7	a4 38		ldy $38				ldy 	zTemp1 						; do compare using the two indices
.86e9	b1 34		lda ($34),y			lda 	(basicStack),y
.86eb	a4 39		ldy $39				ldy 	zTemp1+1
.86ed	f1 34		sbc ($34),y			sbc 	(basicStack),y
.86ef	e6 38		inc $38				inc 	zTemp1 						; bump the indices (inc,dex do not change C or V)
.86f1	e6 39		inc $39				inc 	zTemp1+1
.86f3	ca		dex				dex 								; do it 4 times.
.86f4	d0 f1		bne $86e7			bne 	_NCCompare
.86f6	50 02		bvc $86fa			bvc 	_NCNoOverflow 				; convert to signed comparison
.86f8	49 80		eor #$80			eor 	#$80
.86fa					_NCNoOverflow:
.86fa	7a		ply				ply 								; restore Y position
.86fb	0a		asl a				asl 	a 							; is bit 7 set.
.86fc	90 04		bcc $8702			bcc 	_NCLoopback 				; if no , >= so loop back
.86fe	20 12 98	jsr $9812			jsr 	StackClose 					; exit the loop
.8701	60		rts				rts
.8702					_NCLoopBack:
.8702	20 3c 98	jsr $983c			jsr 	STKLoadCodePosition 		; loop back
.8705	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/gosub.asm

.8706					Command_GOSUB:
.8706	a2 00		ldx #$00			ldx 	#0
.8708	20 48 97	jsr $9748			jsr 	Evaluate16BitInteger 		; line number in Stack.0
.870b	a9 e3		lda #$e3			lda 	#STK_GOSUB+3
.870d	20 f9 97	jsr $97f9			jsr 	StackOpen 					; create frame
.8710	20 2b 98	jsr $982b			jsr 	STKSaveCodePosition 		; save current position
.8713	4c 29 87	jmp $8729			jmp 	GotoStackX
.8716					Command_RETURN:
.8716	a9 e0		lda #$e0			lda 	#STK_GOSUB 					; check TOS is this
.8718	a2 0e		ldx #$0e			ldx 	#ERRID_GOSUB 				; this error
.871a	20 20 98	jsr $9820			jsr 	StackCheckFrame
.871d	20 3c 98	jsr $983c			jsr 	STKLoadCodePosition 		; restore code position
.8720	20 12 98	jsr $9812			jsr 	StackClose
.8723	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/goto.asm

.8724					GotoCommand:
.8724	a2 00		ldx #$00			ldx 	#0 							; GOTO where
.8726	20 48 97	jsr $9748			jsr 	Evaluate16BitInteger
.8729					GotoStackX:
.8729	bd 10 06	lda $0610,x			lda  	NSMantissa1,x 				; put line # in XA. I'll keep this even though
.872c	48		pha				pha 								; it is slightly inefficient, just in cases.
.872d	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.8730	fa		plx				plx
.8731	20 45 9e	jsr $9e45			jsr 	MemorySearch 				; transfer to line number AX.
.8734	90 05		bcc $873b			bcc 	_GotoError 					; not found, off end.
.8736	d0 03		bne $873b			bne 	_GotoError 					; not found exactly
.8738	4c b1 89	jmp $89b1			jmp 	RunNewLine 					; and go straight to new line code.
.873b					_GotoError:
.873b	a9 0d		lda #$0d		lda	#13
.873d	4c 69 8c	jmp $8c69		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/if.asm

.8740					IfCommand:
.8740	a2 00		ldx #$00			ldx 	#0 							; If what.
.8742	20 10 97	jsr $9710			jsr 	EvaluateNumber
.8745	b1 30		lda ($30),y			lda 	(codePtr),y
.8747	c9 9e		cmp #$9e			cmp 	#KWD_THEN  					; could be THEN <stuff> or GOTO
.8749	d0 0a		bne $8755			bne 	_IFStructured
.874b	c8		iny				iny 								; consume THEN
.874c	20 ec 97	jsr $97ec			jsr 	NSMIsZero 					; is it zero
.874f	f0 01		beq $8752			beq 	_IfFail 					; if fail, go to next line
.8751	60		rts				rts 								; if THEN just continue
.8752					_IfFail:
.8752	4c 12 8a	jmp $8a12			jmp 	EOLCommand
.8755					_IfStructured:
.8755	20 ec 97	jsr $97ec			jsr 	NSMIsZero 					; is it zero
.8758	d0 07		bne $8761			bne 	_IfExit 					; if not, then continue normally.
.875a	a9 a6		lda #$a6			lda 	#KWD_ELSE 					; look for else/endif
.875c	a2 9b		ldx #$9b			ldx 	#KWD_ENDIF
.875e	20 db 8b	jsr $8bdb			jsr 	ScanForward 				; and run from there/
.8761					_IfExit:
.8761	60		rts				rts
.8762					ElseCode:
.8762	a9 9b		lda #$9b			lda 	#KWD_ENDIF 					; else is only run after the if clause succeeds
.8764	aa		tax				tax 								; so just go to the structure exit
.8765	20 db 8b	jsr $8bdb			jsr 	ScanForward
.8768	60		rts				rts
.8769					EndIf:
.8769	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/let.asm

.876a					LetCommand:
.876a	a2 00		ldx #$00			ldx 	#0
.876c	ad 5a 90	lda $905a			lda 	PrecedenceLevel+"*"			; precedence > this
.876f	20 74 90	jsr $9074			jsr 	EvaluateExpressionAtPrecedence
.8772	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; is it a reference to an array
.8775	c9 38		cmp #$38			cmp		#NSTProcedure+NSBIsReference
.8777	f0 0e		beq $8787			beq 	_LetGoProc 					; it's a procedure call.
.8779	a9 3d		lda #$3d			lda 	#"=" 						; check =
.877b	20 c6 9e	jsr $9ec6			jsr 	CheckNextA
.877e	e8		inx				inx 								; RHS
.877f	20 07 97	jsr $9707			jsr 	EvaluateValue
.8782	ca		dex				dex
.8783	20 8a 87	jsr $878a			jsr 	AssignVariable
.8786	60		rts				rts
.8787					_LetGoProc:
.8787	4c bb 88	jmp $88bb			jmp 	CallProcedure
.878a					AssignVariable:
.878a	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check the string/number type bits match
.878d	48		pha				pha 								; save a copy
.878e	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.8791	29 10		and #$10			and 	#NSBIsString
.8793	d0 0b		bne $87a0			bne 	_ASError
.8795	68		pla				pla 								; get back
.8796	29 10		and #$10			and 	#NSBIsString 				; check type
.8798	d0 03		bne $879d			bne 	_ASString
.879a	4c af 90	jmp $90af			jmp 	AssignNumber
.879d					_ASString:
.879d	4c 1d 91	jmp $911d			jmp 	AssignString
.87a0					_ASError:
.87a0	4c a2 a4	jmp $a4a2			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/list.asm

.87a3					Command_List:
.87a3	9c 0c 06	stz $060c			stz		NSMantissa0+4				; set the lower (slot 4) to 0 and upper (slot 7) to $FFFF
.87a6	9c 14 06	stz $0614			stz 	NSMantissa1+4
.87a9	a9 ff		lda #$ff			lda 	#$FF
.87ab	8d 0f 06	sta $060f			sta 	NSMantissa0+7
.87ae	8d 17 06	sta $0617			sta 	NSMantissa1+7
.87b1	b1 30		lda ($30),y			lda 	(codePtr),y
.87b3	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.87b5	f0 1e		beq $87d5			beq 	_CLSecond
.87b7	20 33 88	jsr $8833			jsr 	CLIsDigit 					; if not digit, list all
.87ba	b0 24		bcs $87e0			bcs 	_CLStart
.87bc	a2 04		ldx #$04			ldx 	#4 							; get 1st range into slot 4
.87be	20 48 97	jsr $9748			jsr 	Evaluate16BitInteger
.87c1	b1 30		lda ($30),y			lda 	(codePtr),y
.87c3	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.87c5	f0 0e		beq $87d5			beq 	_CLSecond 					; if so go get it
.87c7	ad 0c 06	lda $060c			lda 	NSMantissa0+4 				; copy 4->7
.87ca	8d 0f 06	sta $060f			sta 	NSMantissa0+7
.87cd	ad 14 06	lda $0614			lda 	NSMantissa1+4
.87d0	8d 17 06	sta $0617			sta 	NSMantissa1+7
.87d3	80 0b		bra $87e0			bra 	_CLStart
.87d5					_CLSecond:
.87d5	c8		iny				iny 								; consume comma
.87d6	20 33 88	jsr $8833			jsr 	CLIsDigit 					; digit found
.87d9	b0 05		bcs $87e0			bcs 	_CLStart 					; if not, continue listing
.87db	a2 07		ldx #$07			ldx 	#7 							; load 2nd range into slot 7
.87dd	20 48 97	jsr $9748			jsr 	Evaluate16BitInteger
.87e0					_CLStart
.87e0	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.87e2	85 30		sta $30				sta 	codePtr
.87e4	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.87e6	85 31		sta $31				sta 	codePtr+1
.87e8					_CLLoop:
.87e8	20 47 a7	jsr $a747			jsr 	EXTBreakCheck 				; break check
.87eb	f0 30		beq $881d			beq 	_CLExit
.87ed	b2 30		lda ($30)			lda 	(codePtr)
.87ef	f0 2c		beq $881d			beq 	_CLExit
.87f1	a2 04		ldx #$04			ldx 	#4 							; check range every time, line numbers aren't in order.
.87f3	20 20 88	jsr $8820			jsr 	CLCompareLineNo
.87f6	90 18		bcc $8810			bcc 	_CLNext
.87f8	a2 07		ldx #$07			ldx 	#7
.87fa	20 20 88	jsr $8820			jsr 	CLCompareLineNo
.87fd	f0 02		beq $8801			beq 	_CLDoThisOne
.87ff	b0 0f		bcs $8810			bcs 	_CLNext
.8801					_CLDoThisOne:
.8801	20 37 8a	jsr $8a37			jsr 	ListConvertLine 			; convert line into token Buffer
.8804	a2 07		ldx #$07			ldx 	#(tokenBuffer >> 8) 		; print that line
.8806	a9 28		lda #$28			lda 	#(tokenBuffer & $FF)
.8808	20 c2 8c	jsr $8cc2			jsr 	PrintStringXA
.880b	a9 0d		lda #$0d			lda 	#13 						; new line
.880d	20 06 a7	jsr $a706			jsr 	EXTPrintCharacter
.8810					_CLNext:
.8810	18		clc				clc
.8811	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8813	65 30		adc $30				adc 	codePtr
.8815	85 30		sta $30				sta 	codePtr
.8817	90 02		bcc $881b			bcc 	_CREExit
.8819	e6 31		inc $31				inc 	codePtr+1
.881b					_CREExit:
.881b	80 cb		bra $87e8			bra 	_CLLoop
.881d					_CLExit:
.881d	4c 69 84	jmp $8469			jmp 	WarmStart
.8820					CLCompareLineNo:
.8820	38		sec				sec
.8821	a0 01		ldy #$01			ldy 	#1
.8823	b1 30		lda ($30),y			lda 	(codePtr),y
.8825	fd 08 06	sbc $0608,x			sbc 	NSMantissa0,x
.8828	85 36		sta $36				sta 	zTemp0
.882a	c8		iny				iny
.882b	b1 30		lda ($30),y			lda 	(codePtr),y
.882d	fd 10 06	sbc $0610,x			sbc 	NSMantissa1,x
.8830	05 36		ora $36				ora 	zTemp0
.8832	60		rts				rts
.8833					CLIsDigit:
.8833	b1 30		lda ($30),y			lda 	(codePtr),y
.8835	c9 30		cmp #$30			cmp 	#"0"
.8837	90 03		bcc $883c			bcc	 	_CLIDExitFalse
.8839	c9 3a		cmp #$3a			cmp 	#"9"+1
.883b	60		rts				rts
.883c					_CLIDExitFalse:
.883c	38		sec				sec
.883d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/local.asm

.883e					Command_LOCAL:
.883e	a2 00		ldx #$00			ldx 	#0 							; at level 0
.8840	20 4c 88	jsr $884c			jsr 	LocaliseNextTerm 			; convert term to a local.
.8843	b1 30		lda ($30),y			lda 	(codePtr),y
.8845	c8		iny				iny
.8846	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8848	f0 f4		beq $883e			beq 	Command_LOCAL
.884a	88		dey				dey 								; unpick pre-get
.884b	60		rts				rts
.884c					LocaliseNextTerm:
>884c	db						.byte 	$DB 						; causes a break in the emulator
.884d	20 43 93	jsr $9343			jsr 	EvaluateTerm 				; evaluate the term
.8850	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8853	29 20		and #$20			and 	#NSBIsReference 			; check it is a reference
.8855	d0 00		bne $8857			bne		_LNTError
.8857					_LNTError:
.8857	4c 98 a4	jmp $a498			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/new.asm

.885a					NewCommand:
.885a	20 23 9e	jsr $9e23			jsr 	MemoryNew
.885d	9c 00 10	stz $1000			stz 	VariableSpace 				; erase all variables.
.8860	20 d6 84	jsr $84d6			jsr 	ClearCommand 				; clear everything.
.8863	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/print.asm

.8864					Command_Print:
.8864	18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.8865					_CPLoop:
.8865	08		php				php 								; save last action flag
.8866	b1 30		lda ($30),y			lda 	(codePtr),y
.8868	c9 80		cmp #$80			cmp  	#KWC_EOL 					; end of line or colon, exit now.
.886a	f0 46		beq $88b2			beq 	_CPExit
.886c	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.886e	f0 42		beq $88b2			beq 	_CPExit
.8870	68		pla				pla 								; throw last action flag
.8871	b1 30		lda ($30),y			lda 	(codePtr),y
.8873	c8		iny				iny
.8874	c9 3b		cmp #$3b			cmp 	#KWD_SEMICOLON				; is it a semicolon
.8876	f0 37		beq $88af			beq 	_CPContinueWithSameLine
.8878	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; comma
.887a	f0 2e		beq $88aa			beq 	_CPTab
.887c	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; apostrophe (new line)
.887e	f0 26		beq $88a6			beq 	_CPNewLine
.8880	88		dey				dey 								; undo the get.
.8881	a2 00		ldx #$00			ldx 	#0
.8883	20 07 97	jsr $9707			jsr 	EvaluateValue 				; get a value into slot 0
.8886	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; is it a number
.8889	29 10		and #$10			and 	#NSBIsString
.888b	f0 0b		beq $8898			beq 	_CPNumber
.888d	ae 10 06	ldx $0610			ldx 	NSMantissa1 				; string, print the text.
.8890	ad 08 06	lda $0608			lda 	NSMantissa0
.8893	20 c2 8c	jsr $8cc2			jsr 	PrintStringXA
.8896	80 cc		bra $8864			bra 	Command_Print 				; loop round clearing carry so NL if end
.8898					_CPNumber:
.8898	a9 05		lda #$05			lda 	#5 							; maximum decimals
.889a	20 dd 95	jsr $95dd			jsr 	ConvertNumberToString 		; convert to string
.889d	a2 08		ldx #$08			ldx 	#DecimalBuffer >> 8
.889f	a9 98		lda #$98			lda 	#DecimalBuffer & $FF
.88a1	20 c2 8c	jsr $8cc2			jsr 	PrintStringXA
.88a4	80 be		bra $8864			bra 	Command_Print 				; loop round clearing carry so NL if end
.88a6					_CPNewLine:
.88a6	a9 0d		lda #$0d			lda 	#13
.88a8	80 02		bra $88ac			bra 	_CPPrintChar
.88aa					_CPTab:
.88aa	a9 09		lda #$09			lda 	#9 							; print TAB
.88ac					_CPPrintChar:
.88ac	20 06 a7	jsr $a706			jsr 	EXTPrintCharacter
.88af					_CPContinueWithSameLine:
.88af	38		sec				sec 								; loop round with carry set, which
.88b0	80 b3		bra $8865			bra 	_CPLoop 					; will inhibit final CR
.88b2					_CPExit:
.88b2	28		plp				plp 								; get last action flag
.88b3	b0 05		bcs $88ba			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.88b5	a9 0d		lda #$0d			lda 	#13 						; print new line
.88b7	20 06 a7	jsr $a706			jsr 	EXTPrintCharacter
.88ba					_CPExit2:
.88ba	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/procedure.asm

.88bb					CallProcedure:
.88bb	20 b6 9e	jsr $9eb6			jsr 	CheckRightBracket
.88be	a9 b3		lda #$b3			lda 	#STK_PROC+3 				; allocate 6 bytes on the return stack.
.88c0	20 f9 97	jsr $97f9			jsr 	StackOpen
.88c3	20 2b 98	jsr $982b			jsr 	STKSaveCodePosition 		; save loop position
.88c6	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy variable (e.g. procedure) address to zTemp0
.88c9	85 36		sta $36				sta 	zTemp0 						; this is the DATA not the RECORD
.88cb	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.88ce	85 37		sta $37				sta 	zTemp0+1
.88d0	a0 01		ldy #$01			ldy 	#1 							; copy code address back.
.88d2	b2 36		lda ($36)			lda 	(zTemp0)
.88d4	85 30		sta $30				sta 	safePtr
.88d6	b1 36		lda ($36),y			lda 	(zTemp0),y
.88d8	85 31		sta $31				sta 	safePtr+1
.88da	c8		iny				iny
.88db	b1 36		lda ($36),y			lda 	(zTemp0),y
.88dd	85 32		sta $32				sta 	safePtr+2
.88df	c8		iny				iny
.88e0	b1 36		lda ($36),y			lda 	(zTemp0),y
.88e2	85 33		sta $33				sta 	safePtr+3
.88e4	c8		iny				iny 								; get Y offset -> Y
.88e5	b1 36		lda ($36),y			lda 	(zTemp0),y
.88e7	a8		tay				tay
.88e8	20 b6 9e	jsr $9eb6			jsr 	CheckRightBracket 			; check )
.88eb	60		rts				rts 								; and continue from here
.9ea8					Command_ENDPROC:
.9ea8	a9 b0		lda #$b0			lda 	#STK_PROC 					; check TOS is this
.9eaa	a2 14		ldx #$14			ldx 	#ERRID_PROC
.9eac	20 20 98	jsr $9820			jsr 	StackCheckFrame
.9eaf	20 3c 98	jsr $983c			jsr 	STKLoadCodePosition 		; restore code position
.9eb2	20 12 98	jsr $9812			jsr 	StackClose
.9eb5	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/read.asm

.88ec					Command_Read:
.88ec	a2 00		ldx #$00			ldx 	#0 							; evaluate the term which is the var/array element to assign
.88ee	20 43 93	jsr $9343			jsr 	EvaluateTerm
.88f1	bd 00 06	lda $0600,x			lda 	NSStatus,x
.88f4	29 20		and #$20			and 	#NSBIsReference				; get status byte on stack, identifies int, float, string.
.88f6	f0 4a		beq $8942			beq 	_CRSyntax 					; check reference (bit 0)
.88f8	20 8b 89	jsr $898b			jsr 	SwapDataCodePtrs 			; swap code and data
.88fb	ad 1b 07	lda $071b			lda 	inDataStatement 			; if in a data statement, we don't need to search
.88fe	d0 20		bne $8920			bne 	_CRContinueData
.8900					_CRKeepSearching:
.8900	a9 a3		lda #$a3			lda 	#KWD_DATA 					; scan for instruction
.8902	aa		tax				tax
.8903	20 db 8b	jsr $8bdb			jsr 	ScanForward
.8906	c9 a3		cmp #$a3			cmp 	#KWD_DATA 					; found data ?
.8908	f0 16		beq $8920			beq 	_CRHaveData 				; found it
.890a	18		clc				clc
.890b	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.890d	65 30		adc $30				adc 	codePtr
.890f	85 30		sta $30				sta 	codePtr
.8911	90 02		bcc $8915			bcc 	_CREExit
.8913	e6 31		inc $31				inc 	codePtr+1
.8915					_CREExit:
.8915	a0 03		ldy #$03			ldy 	#3 							; start of line.
.8917	b2 30		lda ($30)			lda 	(codePtr)
.8919	d0 e5		bne $8900			bne 	_CRKeepSearching
.891b	a9 0b		lda #$0b		lda	#11
.891d	4c 69 8c	jmp $8c69		jmp	ErrorHandler
.8920					_CRHaveData:
.8920					_CRContinueData:
.8920	a2 01		ldx #$01			ldx 	#1
.8922	20 07 97	jsr $9707			jsr 	EvaluateValue 				; evaluate value into slot # 1
.8925	ca		dex				dex
.8926	20 8a 87	jsr $878a			jsr		AssignVariable 				; do the assignment
.8929	9c 1b 07	stz $071b			stz 	inDataStatement 			; clear in data
.892c	b1 30		lda ($30),y			lda 	(codePtr),y
.892e	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not, end of data statement
.8930	d0 04		bne $8936			bne 	_CRSwapBack
.8932	c8		iny				iny 								; consume comma
.8933	ee 1b 07	inc $071b			inc 	inDataStatement 			; set in data statement currently.
.8936					_CRSwapBack:
.8936	20 8b 89	jsr $898b			jsr 	SwapDataCodePtrs			; swap them back.
.8939	b1 30		lda ($30),y			lda 	(codePtr),y
.893b	c8		iny				iny
.893c	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.893e	f0 ac		beq $88ec			beq 	Command_Read 				; if so go round again.
.8940	88		dey				dey 								; unpick get.
.8941	60		rts				rts
.8942					_CRSyntax:
.8942	4c 98 a4	jmp $a498			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/rem.asm

.8945					RemCommand:
.8945	b1 30		lda ($30),y			lda 	(codePtr),y
.8947	c9 ff		cmp #$ff			cmp 	#KWC_STRING
.8949	d0 06		bne $8951			bne 	_RMExit
.894b	c8		iny				iny
.894c	98		tya				tya
.894d	38		sec				sec
.894e	71 30		adc ($30),y			adc 	(codePtr),y
.8950	a8		tay				tay
.8951					_RMExit:
.8951	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/repeat.asm

.8952					Command_REPEAT:
.8952	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; allocate 6 bytes on the return stack.
.8954	20 f9 97	jsr $97f9			jsr 	StackOpen
.8957	20 2b 98	jsr $982b			jsr 	STKSaveCodePosition 		; save loop position
.895a	60		rts				rts
.895b					Command_UNTIL:
.895b	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; check REPEAT is TOS
.895d	a2 0f		ldx #$0f			ldx 	#ERRID_REPEAT 				; this error
.895f	20 20 98	jsr $9820			jsr 	StackCheckFrame
.8962	a2 00		ldx #$00			ldx 	#0
.8964	20 10 97	jsr $9710			jsr 	EvaluateNumber 				; work out the number
.8967	20 ec 97	jsr $97ec			jsr 	NSMIsZero 					; check if zero
.896a	f0 04		beq $8970			beq 	_CULoopBack 				; if so keep looping
.896c	20 12 98	jsr $9812			jsr 	StackClose		 			; return
.896f	60		rts				rts
.8970					_CULoopBack:
.8970	20 3c 98	jsr $983c			jsr 	STKLoadCodePosition 		; loop back
.8973	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/restore.asm

.8974					Command_Restore:
.8974	20 8b 89	jsr $898b			jsr 	SwapDataCodePtrs 			; swap code and data
.8977	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8979	85 30		sta $30				sta 	codePtr
.897b	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.897d	85 31		sta $31				sta 	codePtr+1
.897f	20 8b 89	jsr $898b			jsr 	SwapDataCodePtrs 			; put them back
.8982	a9 03		lda #$03			lda 	#3 							; start at offset 3, e.g. first instruction of first line.
.8984	8d 1a 07	sta $071a			sta 	dataPointer+4
.8987	9c 1b 07	stz $071b			stz 	inDataStatement 			; not in data statement
.898a	60		rts				rts
.898b					SwapDataCodePtrs:
.898b	da		phx				phx
.898c	a2 03		ldx #$03			ldx 	#3 							; swap 32 bit code pointer over
.898e					_SDCPLoop:
.898e	b5 30		lda $30,x			lda 	safePtr,x
.8990	48		pha				pha
.8991	bd 16 07	lda $0716,x			lda 	dataPointer,x
.8994	95 30		sta $30,x			sta 	safePtr,x
.8996	68		pla				pla
.8997	9d 16 07	sta $0716,x			sta 	dataPointer,x
.899a	ca		dex				dex
.899b	10 f1		bpl $898e			bpl 	_SDCPLoop
.899d	ad 1a 07	lda $071a			lda 	dataPointer+4 				; swap Y position over.
.89a0	8c 1a 07	sty $071a			sty 	dataPointer+4
.89a3	a8		tay				tay
.89a4	fa		plx				plx
.89a5	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/run.asm

.89a6					CommandRUN:
.89a6	20 d6 84	jsr $84d6			jsr 	ClearCommand 				; clear variable/stacks/etc.
.89a9	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.89ab	85 30		sta $30				sta 	codePtr
.89ad	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.89af	85 31		sta $31				sta 	codePtr+1
.89b1					RUNNewLine:
.89b1	b2 30		lda ($30)			lda 	(codePtr)
.89b3	f0 5a		beq $8a0f			beq 	CRNoProgram         		; no then END.
.89b5	a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack
.89b7	9a		txs				txs
.89b8					RUNCodePointerLine:
.89b8	a0 02		ldy #$02			ldy 	#2 							; start of program
.89ba					_CRIncMainLoop:
.89ba	0e 13 07	asl $0713			asl 	breakCheck 					; clears 1 time in 8
.89bd	d0 05		bne $89c4			bne 	_CRNoBreakCheck
.89bf	20 47 a7	jsr $a747			jsr 	EXTBreakCheck 				; break check
.89c2	f0 46		beq $8a0a			beq 	_CRBreak
.89c4					_CRNoBreakCheck:
.89c4	c8		iny				iny
.89c5					_CRMainLoop:
.89c5	9c 10 07	stz $0710			stz 	stringInitialised 			; clear the temporary string initialised flag.
.89c8	b1 30		lda ($30),y			lda 	(codePtr),y
.89ca	10 10		bpl $89dc			bpl 	_CRNotKeyword
.89cc	c9 96		cmp #$96			cmp 	#KWC_LAST_UNARY+1 			; if after unary, legitimate command
.89ce	b0 04		bcs $89d4			bcs 	_CRIsKeyword
.89d0	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if unary, syntax error.
.89d2	b0 30		bcs $8a04			bcs		_CRSyntaxError
.89d4					_CRIsKeyword:
.89d4	c8		iny				iny 								; consume command
.89d5	0a		asl a				asl 	a 							; double losing the MSB which is '1' as tokens are $80-$FF
.89d6	aa		tax				tax 								; put in X for vector jump
.89d7	20 07 8a	jsr $8a07			jsr 	_CRCallVector0 				; call the vector - effectively jsr (vectortable,X)
.89da	80 e9		bra $89c5			bra 	_CRMainLoop 				; and loop round
.89dc					_CRNotKeyword:
.89dc	c9 3a		cmp #$3a			cmp 	#KWD_COLON 					; if a :, consume it and go round.
.89de	f0 da		beq $89ba			beq 	_CRIncMainLoop
.89e0	c9 40		cmp #$40			cmp 	#$40 						; variable/call reference
.89e2	90 05		bcc $89e9			bcc 	_CRNotVariable
.89e4					_CRGoLet:
.89e4	20 6a 87	jsr $876a			jsr 	LetCommand
.89e7	80 dc		bra $89c5			bra 	_CRMainLoop
.89e9					_CRNotVariable:
.89e9	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; handle ? !
.89eb	f0 f7		beq $89e4			beq 	_CRGoLet
.89ed	c9 21		cmp #$21			cmp 	#KWD_PLING
.89ef	f0 f3		beq $89e4			beq 	_CRGoLet
.89f1	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; handle ' (comment)
.89f3	f0 09		beq $89fe			beq 	_CRGoRem
.89f5	c9 2e		cmp #$2e			cmp 	#KWD_PERIOD 				; handle . (assembler label)
.89f7	d0 0b		bne $8a04			bne 	_CRSyntaxError
.89f9	20 a2 83	jsr $83a2			jsr 	LabelHere
.89fc	80 c7		bra $89c5			bra 	_CRMainLoop
.89fe					_CRGoRem:
.89fe	c8		iny				iny
.89ff	20 45 89	jsr $8945			jsr 	RemCommand
.8a02	80 c1		bra $89c5			bra 	_CRMainLoop
.8a04					_CRSyntaxError:
.8a04	4c 98 a4	jmp $a498			jmp 	SyntaxError
.8a07					_CRCallVector0:
.8a07	7c fe 80	jmp ($80fe,x)			jmp 	(VectorSet0,x)
.8a0a					_CRBreak:
.8a0a	a9 01		lda #$01		lda	#1
.8a0c	4c 69 8c	jmp $8c69		jmp	ErrorHandler
.8a0f					CRNoProgram:
.8a0f	4c f0 85	jmp $85f0			jmp 	EndCommand
.8a12					EOLCommand:
.8a12	18		clc				clc
.8a13	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8a15	65 30		adc $30				adc 	codePtr
.8a17	85 30		sta $30				sta 	codePtr
.8a19	90 02		bcc $8a1d			bcc 	_CREExit
.8a1b	e6 31		inc $31				inc 	codePtr+1
.8a1d					_CREExit:
.8a1d	80 92		bra $89b1			bra 	RunNewLine
.8a1f					Shift1Command:
.8a1f	b1 30		lda ($30),y			lda 	(codePtr),y
.8a21	c8		iny				iny
.8a22	0a		asl a				asl 	a
.8a23	aa		tax				tax
.8a24	7c 5e 81	jmp ($815e,x)			jmp 	(VectorSet1,x)
.8a27					Shift2Command:
.8a27	b1 30		lda ($30),y			lda 	(codePtr),y
.8a29	c8		iny				iny
.8a2a	0a		asl a				asl 	a
.8a2b	aa		tax				tax
.8a2c	7c 76 81	jmp ($8176,x)			jmp 	(VectorSet2,x)
.8a2f					Unused1:
.8a2f					Unused2:
.8a2f					Unused3:
.8a2f					Unused4:
.8a2f	4c 98 a4	jmp $a498			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/stop.asm

.8a32					StopCommand:
.8a32	a9 08		lda #$08		lda	#8
.8a34	4c 69 8c	jmp $8c69		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/expandline.asm

.8a37					ListConvertLine:
.8a37	9c 1c 07	stz $071c			stz 	tbOffset
.8a3a	9c 28 07	stz $0728			stz 	tokenBuffer
.8a3d	a0 02		ldy #$02			ldy 	#2 							; convert line number to string
.8a3f	b1 30		lda ($30),y			lda 	(codePtr),y
.8a41	aa		tax				tax
.8a42	88		dey				dey
.8a43	b1 30		lda ($30),y			lda 	(codePtr),y
.8a45	20 12 a0	jsr $a012			jsr 	ConvertInt16
.8a48	85 36		sta $36				sta 	zTemp0 						; copy number into buffer
.8a4a	86 37		stx $37				stx 	zTemp0+1
.8a4c	a0 00		ldy #$00			ldy 	#0
.8a4e					_LCCopyNumber:
.8a4e	b1 36		lda ($36),y			lda 	(zTemp0),y
.8a50	20 50 8b	jsr $8b50			jsr 	LCLWrite
.8a53	c8		iny				iny
.8a54	b1 36		lda ($36),y			lda 	(zTemp0),y
.8a56	d0 f6		bne $8a4e			bne 	_LCCopyNumber
.8a58					_LCPadOut:
.8a58	a9 20		lda #$20			lda 	#' '						; pad out to 6 characters
.8a5a	20 50 8b	jsr $8b50			jsr 	LCLWrite
.8a5d	ad 1c 07	lda $071c			lda 	tbOffset
.8a60	c9 06		cmp #$06			cmp 	#6
.8a62	d0 f4		bne $8a58			bne 	_LCPadOut
.8a64	a0 03		ldy #$03			ldy 	#3 							; start position.
.8a66					_LCMainLoop:
.8a66	b1 30		lda ($30),y			lda 	(codePtr),y
.8a68	c9 80		cmp #$80			cmp 	#KWC_EOL 					; end of line ?
.8a6a	f0 17		beq $8a83			beq 	_LCExit
.8a6c	c9 10		cmp #$10			cmp 	#16 						; 0-5 are the double punctuations
.8a6e	90 14		bcc $8a84			bcc 	_LCDoubles
.8a70	c9 20		cmp #$20			cmp 	#32 						; 16-31 are shifted punctuation from 64-91
.8a72	90 20		bcc $8a94			bcc 	_LCShiftPunc
.8a74	c9 40		cmp #$40			cmp 	#64 						; 32-64 are as stored, punc and digits
.8a76	90 2b		bcc $8aa3			bcc 	_LCPunctuation
.8a78	c9 80		cmp #$80			cmp 	#128 						; 64-127 are variable identifiers.
.8a7a	90 2d		bcc $8aa9			bcc 	_LCIdentifiers
.8a7c	c9 fe		cmp #$fe			cmp 	#254 						; 128-253 are tokenised words
.8a7e	90 49		bcc $8ac9			bcc 	_LCTokens
.8a80	4c 24 8b	jmp $8b24			jmp 	_LCData 					; 254-5 are data objects
.8a83					_LCExit:
.8a83	60		rts				rts
.8a84					_LCDoubles:
.8a84	48		pha				pha
.8a85	4a		lsr a				lsr 	a 							; put bit 2 into bit 1
.8a86	29 02		and #$02			and 	#2
.8a88	09 3c		ora #$3c			ora 	#60 						; make < >
.8a8a	20 50 8b	jsr $8b50			jsr 	LCLWrite
.8a8d	68		pla				pla 								; restore, do lower bit
.8a8e	29 03		and #$03			and 	#3
.8a90	09 3c		ora #$3c			ora 	#60
.8a92	80 0f		bra $8aa3			bra		_LCPunctuation 				; print, increment, loop
.8a94					_LCShiftPunc:
.8a94	aa		tax				tax 								; save in X
.8a95	29 07		and #$07			and 	#7 							; lower 3 bits
.8a97	f0 02		beq $8a9b			beq 	_LCNoAdd
.8a99	09 18		ora #$18			ora 	#24 						; adds $18 to it.
.8a9b					_LCNoAdd:
.8a9b	e0 18		cpx #$18			cpx 	#24 						; if >= 24 add $20
.8a9d	90 02		bcc $8aa1			bcc 	_LCNoAdd2
.8a9f	09 20		ora #$20			ora 	#32 						; adds $20
.8aa1					_LCNoAdd2:
.8aa1	09 40		ora #$40			ora 	#$40 						; shift into 64-127 range and fall through.
.8aa3					_LCPunctuation:
.8aa3	c8		iny				iny 								; consume character
.8aa4	20 50 8b	jsr $8b50			jsr 	LCLWrite 					; write it out.
.8aa7	80 bd		bra $8a66			bra 	_LCMainLoop 				; go round again.
.8aa9					_LCIdentifiers:
.8aa9	18		clc				clc 								; convert to physical address
.8aaa	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8aac	85 37		sta $37				sta 	zTemp0+1
.8aae	c8		iny				iny
.8aaf	b1 30		lda ($30),y			lda 	(codePtr),y
.8ab1	85 36		sta $36				sta 	zTemp0
.8ab3	c8		iny				iny
.8ab4	5a		phy				phy 								; save position
.8ab5	a0 07		ldy #$07			ldy 	#7 							; output the identifier.
.8ab7					_LCOutIdentifier:
.8ab7	c8		iny				iny
.8ab8	b1 36		lda ($36),y			lda 	(zTemp0),y
.8aba	29 7f		and #$7f			and 	#$7F
.8abc	20 7e 8b	jsr $8b7e			jsr 	LCLLowerCase
.8abf	20 50 8b	jsr $8b50			jsr 	LCLWrite
.8ac2	b1 36		lda ($36),y			lda 	(zTemp0),y				 	; ends when bit 7 set.
.8ac4	10 f1		bpl $8ab7			bpl 	_LCOutIdentifier
.8ac6	7a		ply				ply 								; restore position
.8ac7	80 9d		bra $8a66			bra 	_LCMainLoop
.8ac9					_LCTokens:
.8ac9	aa		tax				tax 								; token in X
.8aca	a9 5d		lda #$5d			lda 	#((KeywordSet2) & $FF)
.8acc	85 36		sta $36				sta 	0+zTemp0
.8ace	a9 9a		lda #$9a			lda 	#((KeywordSet2) >> 8)
.8ad0	85 37		sta $37				sta 	1+zTemp0
.8ad2	e0 82		cpx #$82			cpx 	#$82
.8ad4	f0 16		beq $8aec			beq 	_LCUseShift
.8ad6	a9 19		lda #$19			lda 	#((KeywordSet1) & $FF)
.8ad8	85 36		sta $36				sta 	0+zTemp0
.8ada	a9 9a		lda #$9a			lda 	#((KeywordSet1) >> 8)
.8adc	85 37		sta $37				sta 	1+zTemp0
.8ade	e0 81		cpx #$81			cpx 	#$81
.8ae0	f0 0a		beq $8aec			beq 	_LCUseShift
.8ae2	a9 f0		lda #$f0			lda 	#((KeywordSet0) & $FF)
.8ae4	85 36		sta $36				sta 	0+zTemp0
.8ae6	a9 98		lda #$98			lda 	#((KeywordSet0) >> 8)
.8ae8	85 37		sta $37				sta 	1+zTemp0
.8aea	80 01		bra $8aed			bra 	_LCNoShift
.8aec					_LCUseShift:
.8aec	c8		iny				iny
.8aed					_LCNoShift:
.8aed	20 5f 8b	jsr $8b5f			jsr 	LCCheckSpaceRequired 		; do we need a space ?
.8af0	b1 30		lda ($30),y			lda 	(codePtr),y
.8af2	aa		tax				tax 								; into X
.8af3					_LCFindText:
.8af3	ca		dex				dex
.8af4	10 0e		bpl $8b04			bpl 	_LCFoundText 				; found text.
.8af6	b2 36		lda ($36)			lda 	(zTemp0) 					; length of text
.8af8	1a		inc a				inc 	a 							; one extra for size
.8af9	38		sec				sec 								; one extra for checksum
.8afa	65 36		adc $36				adc 	zTemp0 						; go to next token
.8afc	85 36		sta $36				sta 	zTemp0
.8afe	90 f3		bcc $8af3			bcc 	_LCFindText
.8b00	e6 37		inc $37				inc 	zTemp0+1
.8b02	80 ef		bra $8af3			bra 	_LCFindText
.8b04					_LCFoundText:
.8b04	5a		phy				phy 								; save List position
.8b05	b2 36		lda ($36)			lda 	(zTemp0)					; count to print
.8b07	aa		tax				tax
.8b08	a0 02		ldy #$02			ldy 	#2
.8b0a					_LCCopyToken:
.8b0a	b1 36		lda ($36),y			lda 	(zTemp0),y
.8b0c	20 7e 8b	jsr $8b7e			jsr 	LCLLowerCase
.8b0f	20 50 8b	jsr $8b50			jsr 	LCLWrite
.8b12	c8		iny				iny
.8b13	ca		dex				dex
.8b14	d0 f4		bne $8b0a			bne 	_LCCopyToken
.8b16	c9 28		cmp #$28			cmp 	#"(" 						; if last char not ( print a space
.8b18	f0 05		beq $8b1f			beq 	_LCNoSpace
.8b1a	a9 20		lda #$20			lda 	#' '
.8b1c	20 50 8b	jsr $8b50			jsr 	LCLWrite
.8b1f					_LCNoSpace:
.8b1f	7a		ply				ply 								; restore position.
.8b20	c8		iny				iny 								; consume token
.8b21	4c 66 8a	jmp $8a66			jmp 	_LCMainLoop 				; and go around again.
.8b24					_LCData:
.8b24	48		pha				pha 								; save type $FE/$FF
.8b25	a2 24		ldx #$24			ldx 	#'$' 						; figure out $ or "
.8b27	c9 fe		cmp #$fe			cmp 	#$FE
.8b29	f0 02		beq $8b2d			beq 	_LCHaveOpener
.8b2b	a2 22		ldx #$22			ldx 	#'"'
.8b2d					_LCHaveOpener:
.8b2d	8a		txa				txa 								; output prefix (# or ")
.8b2e	20 50 8b	jsr $8b50			jsr 	LCLWrite
.8b31	c8		iny				iny 								; get count
.8b32	b1 30		lda ($30),y			lda 	(codePtr),y
.8b34	aa		tax				tax
.8b35	c8		iny				iny 								; point at first character
.8b36					_LCOutData:
.8b36	b1 30		lda ($30),y			lda 	(codePtr),y
.8b38	c9 00		cmp #$00			cmp 	#0
.8b3a	f0 03		beq $8b3f			beq 	_LCNoPrint
.8b3c	20 50 8b	jsr $8b50			jsr 	LCLWrite
.8b3f					_LCNoPrint:
.8b3f	c8		iny				iny
.8b40	ca		dex				dex
.8b41	d0 f3		bne $8b36			bne 	_LCOutData
.8b43	68		pla				pla 								; closing " required ?
.8b44	c9 ff		cmp #$ff			cmp 	#$FF
.8b46	d0 05		bne $8b4d			bne 	_LCNoQuote
.8b48	a9 22		lda #$22			lda 	#'"'
.8b4a	20 50 8b	jsr $8b50			jsr 	LCLWrite
.8b4d					_LCNoQuote:
.8b4d	4c 66 8a	jmp $8a66			jmp 	_LCMainLoop
.8b50					LCLWrite:
.8b50	da		phx				phx
.8b51	ae 1c 07	ldx $071c			ldx 	tbOffset
.8b54	9d 28 07	sta $0728,x			sta 	tokenBuffer,x
.8b57	9e 29 07	stz $0729,x			stz 	tokenBuffer+1,x
.8b5a	ee 1c 07	inc $071c			inc 	tbOffset
.8b5d	fa		plx				plx
.8b5e	60		rts				rts
.8b5f					LCCheckSpaceRequired:
.8b5f	ae 1c 07	ldx $071c			ldx 	tbOffset
.8b62	bd 27 07	lda $0727,x			lda 	tokenBuffer-1,x 			; previous character
.8b65	20 7e 8b	jsr $8b7e			jsr 	LCLLowerCase 				; saves a little effort
.8b68	c9 30		cmp #$30			cmp 	#"0" 						; check if it was 0-9 A-Z a-z if so need space.
.8b6a	90 11		bcc $8b7d			bcc 	_LCCSRExit
.8b6c	c9 3a		cmp #$3a			cmp 	#"9"+1
.8b6e	90 08		bcc $8b78			bcc 	_LCCSRSpace
.8b70	c9 61		cmp #$61			cmp 	#"a"
.8b72	90 09		bcc $8b7d			bcc 	_LCCSRExit
.8b74	c9 7b		cmp #$7b			cmp 	#"z"+1
.8b76	b0 05		bcs $8b7d			bcs 	_LCCSRExit
.8b78					_LCCSRSpace:
.8b78	a9 20		lda #$20			lda 	#' '
.8b7a	20 50 8b	jsr $8b50			jsr 	LCLWrite
.8b7d					_LCCSRExit:
.8b7d	60		rts				rts
.8b7e					LCLLowerCase:
.8b7e	c9 41		cmp #$41			cmp 	#"A"
.8b80	90 06		bcc $8b88			bcc 	_LCLLCOut
.8b82	c9 5b		cmp #$5b			cmp 	#"Z"+1
.8b84	b0 02		bcs $8b88			bcs 	_LCLLCOut
.8b86	69 20		adc #$20			adc 	#$20
.8b88					_LCLLCOut:
.8b88	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/procscan.asm

.8b89					ProcedureScan:
.8b89	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8b8b	85 30		sta $30				sta 	codePtr
.8b8d	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8b8f	85 31		sta $31				sta 	codePtr+1
.8b91					_PSLoop:
.8b91	b2 30		lda ($30)			lda 	(codePtr)
.8b93	f0 42		beq $8bd7			beq 	_PSExit
.8b95	a0 03		ldy #$03			ldy 	#3 							; is it PROC ?
.8b97	b1 30		lda ($30),y			lda 	(codePtr),y
.8b99	c9 98		cmp #$98			cmp 	#KWD_PROC
.8b9b	d0 2d		bne $8bca			bne 	_PSNext
.8b9d	c8		iny				iny 								; get the address of the record to zTemp0 and
.8b9e	b1 30		lda ($30),y			lda 	(codePtr),y
.8ba0	29 c0		and #$c0			and 	#$C0
.8ba2	c9 40		cmp #$40			cmp 	#$40
.8ba4	d0 32		bne $8bd8			bne 	_PSSyntax
.8ba6	b1 30		lda ($30),y			lda 	(codePtr),y
.8ba8	18		clc				clc
.8ba9	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8bab	85 37		sta $37				sta 	zTemp0+1
.8bad	c8		iny				iny 								; LSB
.8bae	b1 30		lda ($30),y			lda 	(codePtr),y
.8bb0	85 36		sta $36				sta 	zTemp0
.8bb2	c8		iny				iny 								; character after variable call.
.8bb3	98		tya				tya 								; save Y offset at +7
.8bb4	a0 07		ldy #$07			ldy 	#7
.8bb6	91 36		sta ($36),y			sta 	(zTemp0),y
.8bb8	a9 18		lda #$18			lda 	#NSTProcedure 				; mark it as procedure
.8bba	a0 02		ldy #$02			ldy 	#2
.8bbc	91 36		sta ($36),y			sta 	(zTemp0),y
.8bbe	a2 00		ldx #$00			ldx 	#0 							; copy code-Ptr in
.8bc0					_PSCopy:
.8bc0	b5 30		lda $30,x			lda 	safePtr,x
.8bc2	c8		iny				iny
.8bc3	91 36		sta ($36),y			sta 	(zTemp0),y
.8bc5	e8		inx				inx
.8bc6	e0 04		cpx #$04			cpx 	#4
.8bc8	d0 f6		bne $8bc0			bne 	_PSCopy
.8bca					_PSNext:
.8bca	18		clc				clc
.8bcb	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8bcd	65 30		adc $30				adc 	codePtr
.8bcf	85 30		sta $30				sta 	codePtr
.8bd1	90 02		bcc $8bd5			bcc 	_CREExit
.8bd3	e6 31		inc $31				inc 	codePtr+1
.8bd5					_CREExit:
.8bd5	80 ba		bra $8b91			bra 	_PSLoop
.8bd7					_PSExit:
.8bd7	60		rts				rts
.8bd8					_PSSyntax:
.8bd8	4c 98 a4	jmp $a498			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/scanforward.asm

.8bdb					ScanForward:
.8bdb	85 36		sta $36				sta 	zTemp0 						; save XA as the two possible matches.
.8bdd	86 37		stx $37				stx 	zTemp0+1
.8bdf	64 38		stz $38				stz 	zTemp1 						; this is the structure count - goes up with WHILE/FOR
.8be1					_ScanLoop:
.8be1	b1 30		lda ($30),y			lda 	(codePtr),y
.8be3	c8		iny				iny
.8be4	a6 38		ldx $38				ldx 	zTemp1 						; if the count is > 0 cannot match as in substructure
.8be6	d0 0e		bne $8bf6			bne 	_ScanGoNext
.8be8	c5 36		cmp $36				cmp 	zTemp0 						; see if either matches
.8bea	f0 04		beq $8bf0			beq 	_ScanMatch
.8bec	c5 37		cmp $37				cmp 	zTemp0+1
.8bee	d0 06		bne $8bf6			bne 	_ScanGoNext
.8bf0					_ScanMatch:
.8bf0	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if asked for EOL, backtrack.
.8bf2	d0 01		bne $8bf5			bne 	_ScanNotEndEOL
.8bf4	88		dey				dey
.8bf5					_ScanNotEndEOL:
.8bf5	60		rts				rts
.8bf6					_ScanGoNext:
.8bf6	c9 40		cmp #$40			cmp 	#$40 						; if 00-3F, punctuation characters, loop back
.8bf8	90 e7		bcc $8be1			bcc 	_ScanLoop
.8bfa	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if 40-82, skip one extra.
.8bfc	90 18		bcc $8c16			bcc 	_ScanSkipOne
.8bfe	c9 fc		cmp #$fc			cmp 	#$FC 						; FC-FF are data skips
.8c00	b0 2f		bcs $8c31			bcs 	_ScanSkipData
.8c02	c9 96		cmp #$96			cmp 	#KWC_FIRST_STRUCTURE 		; structure keyword ?
.8c04	90 db		bcc $8be1			bcc 	_ScanLoop 					; if not, ordinary keywords.
.8c06	c9 a1		cmp #$a1			cmp 	#KWC_LAST_STRUCTURE+1
.8c08	b0 d7		bcs $8be1			bcs 	_ScanLoop
.8c0a	c6 38		dec $38				dec 	zTemp1 						; decrement the sructure count
.8c0c	c9 9b		cmp #$9b			cmp 	#KWC_FIRST_STRUCTURE_DEC 	; back if it is a dec structure (e.g. WEND/NEXT)
.8c0e	b0 d1		bcs $8be1			bcs 	_ScanLoop
.8c10	e6 38		inc $38				inc 	zTemp1 						; so it's an increment structure
.8c12	e6 38		inc $38				inc 	zTemp1 						; twice to undo the dec
.8c14	80 cb		bra $8be1			bra 	_ScanLoop
.8c16					_ScanSkipOne:
.8c16	c8		iny				iny 								; consume the extra one.
.8c17	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if not EOL loop back
.8c19	d0 c6		bne $8be1			bne 	_ScanLoop
.8c1b	18		clc				clc
.8c1c	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8c1e	65 30		adc $30				adc 	codePtr
.8c20	85 30		sta $30				sta 	codePtr
.8c22	90 02		bcc $8c26			bcc 	_CREExit
.8c24	e6 31		inc $31				inc 	codePtr+1
.8c26					_CREExit:
.8c26	a0 03		ldy #$03			ldy 	#3 							; scan start position.
.8c28	b2 30		lda ($30)			lda 	(codePtr)
.8c2a	d0 b5		bne $8be1			bne 	_ScanLoop 					; if not zero, more to scan
.8c2c	a9 13		lda #$13		lda	#19
.8c2e	4c 69 8c	jmp $8c69		jmp	ErrorHandler
.8c31					_ScanSkipData:
.8c31	88		dey				dey 								; point at data token
.8c32	c8		iny				iny
.8c33	98		tya				tya
.8c34	38		sec				sec
.8c35	71 30		adc ($30),y			adc 	(codePtr),y
.8c37	a8		tay				tay
.8c38	80 a7		bra $8be1			bra 	_ScanLoop

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/while.asm

.8c3a					Command_WHILE:
.8c3a	5a		phy				phy 								; save position of the test
.8c3b	a2 00		ldx #$00			ldx 	#0
.8c3d	20 10 97	jsr $9710			jsr 	EvaluateNumber 				; work out the number
.8c40	20 ec 97	jsr $97ec			jsr 	NSMIsZero 					; check if zero
.8c43	f0 0e		beq $8c53			beq 	_WHExitLoop 				; if so exit the loop
.8c45	98		tya				tya 								; position *after* test.
.8c46	7a		ply				ply 								; restore position before test, at WHILE
.8c47	88		dey				dey
.8c48	48		pha				pha 								; push after test on the stack
.8c49	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; allocate 6 bytes on the return stack.
.8c4b	20 f9 97	jsr $97f9			jsr 	StackOpen
.8c4e	20 2b 98	jsr $982b			jsr 	STKSaveCodePosition 		; save loop position - where the test value is.
.8c51	7a		ply				ply 								; restore the position *after* the test
.8c52	60		rts				rts
.8c53					_WHExitLoop:
.8c53	68		pla				pla 								; throw post loop position
.8c54	a9 a0		lda #$a0			lda 	#KWD_WEND 					; scan forward past WEND
.8c56	aa		tax				tax
.8c57	20 db 8b	jsr $8bdb			jsr 	ScanForward
.8c5a	60		rts				rts
.8c5b					Command_WEND:
.8c5b	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; check WHILE is TOS
.8c5d	a2 10		ldx #$10			ldx 	#ERRID_WHILE 				; this error
.8c5f	20 20 98	jsr $9820			jsr 	StackCheckFrame
.8c62	20 3c 98	jsr $983c			jsr 	STKLoadCodePosition 		; loop back
.8c65	20 12 98	jsr $9812			jsr 	StackClose		 			; erase the frame
.8c68	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/charcheck.asm

.9eb6					CheckRightBracket:
.9eb6	b1 30		lda ($30),y			lda 	(codePtr),y
.9eb8	c8		iny				iny
.9eb9	c9 29		cmp #$29			cmp 	#KWD_RPAREN 						; exit if matches
.9ebb	d0 0f		bne $9ecc			bne 	CNAFail
.9ebd	60		rts				rts
.9ebe					CheckComma:
.9ebe	b1 30		lda ($30),y			lda 	(codePtr),y
.9ec0	c8		iny				iny
.9ec1	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 						; exit if matches
.9ec3	d0 07		bne $9ecc			bne 	CNAFail
.9ec5	60		rts				rts
.9ec6					CheckNextA:
.9ec6	d1 30		cmp ($30),y			cmp 	(codePtr),y
.9ec8	d0 02		bne $9ecc			bne 	CNAFail
.9eca	c8		iny				iny 								; skip character
.9ecb	60		rts				rts 								; and exit
.9ecc					CNAFail:
.9ecc	4c 98 a4	jmp $a498			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/errors.asm

.8c69					ErrorHandler:
.8c69	a8		tay				tay 								; find the error text
.8c6a	f0 49		beq $8cb5			beq 	_EHEnd
.8c6c	a2 00		ldx #$00			ldx 	#0
.8c6e	a9 b1		lda #$b1			lda 	#((ErrorText) & $FF)
.8c70	85 36		sta $36				sta 	0+zTemp0
.8c72	a9 a4		lda #$a4			lda 	#((ErrorText) >> 8)
.8c74	85 37		sta $37				sta 	1+zTemp0
.8c76					_EHFind:
.8c76	88		dey				dey 								; found the error text ?
.8c77	f0 0e		beq $8c87			beq 	_EHFound
.8c79					_EHFindZero:
.8c79	b2 36		lda ($36)			lda 	(zTemp0) 					; find the next error
.8c7b	e6 36		inc $36				inc 	zTemp0
.8c7d	d0 02		bne $8c81			bne 	_EHFNoCarry
.8c7f	e6 37		inc $37				inc 	zTemp0+1
.8c81					_EHFNoCarry:
.8c81	c9 00		cmp #$00			cmp 	#0
.8c83	d0 f4		bne $8c79			bne 	_EHFindZero
.8c85	80 ef		bra $8c76			bra 	_EHFind
.8c87					_EHFound:
.8c87	a5 36		lda $36				lda 	zTemp0 						; print message
.8c89	a6 37		ldx $37				ldx 	zTemp0+1
.8c8b	20 c2 8c	jsr $8cc2			jsr 	PrintStringXA
.8c8e	a0 01		ldy #$01			ldy 	#1 							; if line number zero don't print i
.8c90	b1 30		lda ($30),y			lda 	(codePtr),y
.8c92	d0 05		bne $8c99			bne 	_EHAtMsg
.8c94	c8		iny				iny
.8c95	b1 30		lda ($30),y			lda 	(codePtr),y
.8c97	f0 17		beq $8cb0			beq 	_EHCREnd
.8c99					_EHAtMsg:
.8c99	a2 8c		ldx #$8c			ldx 	#_AtMsg >> 8 				; print " at "
.8c9b	a9 b8		lda #$b8			lda 	#_AtMsg & $FF
.8c9d	20 c2 8c	jsr $8cc2			jsr 	PrintStringXA
.8ca0	a0 01		ldy #$01			ldy 	#1 							; line number into XA
.8ca2	b1 30		lda ($30),y			lda 	(codePtr),y
.8ca4	48		pha				pha
.8ca5	c8		iny				iny
.8ca6	b1 30		lda ($30),y			lda 	(codePtr),y
.8ca8	aa		tax				tax
.8ca9	68		pla				pla
.8caa	20 12 a0	jsr $a012			jsr 	ConvertInt16 				; convert XA to string
.8cad	20 c2 8c	jsr $8cc2			jsr 	PrintStringXA 				; and print it.
.8cb0					_EHCREnd:
.8cb0	a9 0d		lda #$0d			lda 	#13 						; new line
.8cb2	20 06 a7	jsr $a706			jsr 	EXTPrintCharacter
.8cb5					_EHEnd:
.8cb5	4c 69 84	jmp $8469			jmp 	WarmStart
>8cb8	20 61 74 20 6c 69 6e 65		_AtMsg:	.text 	" at line ",0
>8cc0	20 00
.8cc2					PrintStringXA:
.8cc2	5a		phy				phy
.8cc3	86 37		stx $37				stx 	zTemp0+1
.8cc5	85 36		sta $36				sta 	zTemp0
.8cc7	a0 00		ldy #$00			ldy 	#0
.8cc9					_PSXALoop:
.8cc9	b1 36		lda ($36),y			lda 	(zTemp0),y
.8ccb	f0 06		beq $8cd3			beq 	_PSXAExit
.8ccd	20 06 a7	jsr $a706			jsr 	EXTPrintCharacter
.8cd0	c8		iny				iny
.8cd1	80 f6		bra $8cc9			bra 	_PSXALoop
.8cd3					_PSXAExit:
.8cd3	7a		ply				ply
.8cd4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/compare.asm

.8cd5					UnaryTrue:
.8cd5	fa		plx				plx
.8cd6					ReturnTrue:
.8cd6	a9 01		lda #$01			lda 	#1  						; set to 1
.8cd8	20 be 97	jsr $97be			jsr 	NSMSetByte
.8cdb	a9 80		lda #$80			lda 	#$80 						; set sign flag, so it is -1
.8cdd	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8ce0	60		rts				rts
.8ce1					UnaryFalse:
.8ce1	fa		plx				plx
.8ce2					ReturnFalse:
.8ce2	4c bc 97	jmp $97bc			jmp 	NSMSetZero 					; set it all to zero
.8ce5					BinaryCompareEqual:
.8ce5	fa		plx				plx
.8ce6	20 21 8d	jsr $8d21			jsr 	CompareBaseCode
.8ce9	c9 00		cmp #$00			cmp 	#0
.8ceb	f0 e9		beq $8cd6			beq 	ReturnTrue
.8ced	80 f3		bra $8ce2			bra 	ReturnFalse
.8cef					BinaryCompareLess:
.8cef	fa		plx				plx
.8cf0	20 21 8d	jsr $8d21			jsr 	CompareBaseCode
.8cf3	c9 ff		cmp #$ff			cmp 	#$FF
.8cf5	f0 df		beq $8cd6			beq 	ReturnTrue
.8cf7	80 e9		bra $8ce2			bra 	ReturnFalse
.8cf9					BinaryCompareGreater:
.8cf9	fa		plx				plx
.8cfa	20 21 8d	jsr $8d21			jsr 	CompareBaseCode
.8cfd	c9 01		cmp #$01			cmp 	#1
.8cff	f0 d5		beq $8cd6			beq 	ReturnTrue
.8d01	80 df		bra $8ce2			bra 	ReturnFalse
.8d03					BinaryCompareNotEqual:
.8d03	fa		plx				plx
.8d04	20 21 8d	jsr $8d21			jsr 	CompareBaseCode
.8d07	c9 00		cmp #$00			cmp 	#0
.8d09	d0 cb		bne $8cd6			bne 	ReturnTrue
.8d0b	80 d5		bra $8ce2			bra 	ReturnFalse
.8d0d					BinaryCompareLessEqual:
.8d0d	fa		plx				plx
.8d0e	20 21 8d	jsr $8d21			jsr 	CompareBaseCode
.8d11	c9 01		cmp #$01			cmp 	#1
.8d13	d0 c1		bne $8cd6			bne 	ReturnTrue
.8d15	80 cb		bra $8ce2			bra 	ReturnFalse
.8d17					BinaryCompareGreaterEqual:
.8d17	fa		plx				plx
.8d18	20 21 8d	jsr $8d21			jsr 	CompareBaseCode
.8d1b	c9 ff		cmp #$ff			cmp 	#$FF
.8d1d	d0 b7		bne $8cd6			bne 	ReturnTrue
.8d1f	80 c1		bra $8ce2			bra 	ReturnFalse
.8d21					CompareBaseCode:
.8d21	20 82 91	jsr $9182			jsr 	DereferenceTopTwo 			; make both values if references.
.8d24	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if either is a string.
.8d27	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8d2a	29 10		and #$10			and 	#NSTString
.8d2c	d0 40		bne $8d6e			bne 	_CBCString
.8d2e	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check both are integers
.8d31	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8d34	d0 3b		bne $8d71			bne 	_CBCFloat
.8d36	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8d39	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8d3c	29 08		and #$08			and 	#NSTFloat
.8d3e	d0 31		bne $8d71			bne 	_CBCFloat
.8d40	20 74 8d	jsr $8d74			jsr 	CompareFixMinusZero
.8d43	e8		inx				inx
.8d44	20 74 8d	jsr $8d74			jsr 	CompareFixMinusZero
.8d47	ca		dex				dex
.8d48	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; are the signs different ?
.8d4b	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.8d4e	10 0b		bpl $8d5b			bpl 	_CDCSameSign
.8d50	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; if first one is -ve
.8d53	30 16		bmi $8d6b			bmi 	_CBCLess 					; return $FF
.8d55					_CBCGreater:
.8d55	a9 01		lda #$01			lda 	#1
.8d57	60		rts				rts
.8d58					_CBCEqual:
.8d58	a9 00		lda #$00			lda 	#0
.8d5a	60		rts				rts
.8d5b					_CDCSameSign:
.8d5b	20 84 8e	jsr $8e84			jsr 	SubTopTwoStack 				; unsigned subtract
.8d5e	20 ec 97	jsr $97ec			jsr 	NSMIsZero 					; or the mantissa together
.8d61	f0 f5		beq $8d58			beq 	_CBCEqual 					; -0 == 0
.8d63	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; sign of the result. if +ve return $01 else return $FF
.8d66	5d 01 06	eor $0601,x			eor 	NSStatus+1,x 				; however if both were -ve this is inverted
.8d69	10 ea		bpl $8d55			bpl 	_CBCGreater
.8d6b					_CBCLess:
.8d6b	a9 ff		lda #$ff			lda 	#$FF
.8d6d	60		rts				rts
.8d6e					_CBCString:
.8d6e	4c da 8d	jmp $8dda			jmp 	CompareStrings
.8d71					_CBCFloat:
.8d71	4c 0e a1	jmp $a10e			jmp 	CompareFloat
.8d74					CompareFixMinusZero:
.8d74	20 ec 97	jsr $97ec			jsr 	NSMIsZero
.8d77	d0 03		bne $8d7c			bne 	_CFXMZNotZero
.8d79	9e 00 06	stz $0600,x			stz 	NSStatus,x
.8d7c					_CFXMZNotZero:
.8d7c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/concat.asm

.8d7d					StringConcat:
.8d7d	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check both strings
.8d80	3d 01 06	and $0601,x			and 	NSStatus+1,x
.8d83	29 18		and #$18			and 	#NSBTypeMask
.8d85	c9 10		cmp #$10			cmp 	#NSTString
.8d87	d0 4e		bne $8dd7			bne		_SCType
.8d89	64 38		stz $38				stz 	zTemp1 						; counting total length
.8d8b	e8		inx				inx
.8d8c	20 aa 8d	jsr $8daa			jsr 	_SCSetupZ0 					; setup for second
.8d8f	20 b5 8d	jsr $8db5			jsr 	_SCLengthZ0 				; length for second
.8d92	ca		dex				dex
.8d93	20 aa 8d	jsr $8daa			jsr 	_SCSetupZ0 					; setup for first
.8d96	20 b5 8d	jsr $8db5			jsr 	_SCLengthZ0 				; length for first
.8d99	a5 38		lda $38				lda 	zTemp1 						; allocate memory
.8d9b	20 b9 a6	jsr $a6b9			jsr 	StringTempAllocate
.8d9e	20 c8 8d	jsr $8dc8			jsr 	_SCCopy 					; copy first out, using zTemp0 from above
.8da1	e8		inx				inx
.8da2	20 aa 8d	jsr $8daa			jsr 	_SCSetupZ0 					; copy second out
.8da5	20 c8 8d	jsr $8dc8			jsr 	_SCCopy
.8da8	ca		dex				dex
.8da9	60		rts				rts
.8daa					_SCSetupZ0:
.8daa	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.8dad	85 36		sta $36				sta 	zTemp0
.8daf	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8db2	85 37		sta $37				sta 	zTemp0+1
.8db4	60		rts				rts
.8db5					_SCLengthZ0:
.8db5	5a		phy				phy
.8db6	a0 00		ldy #$00			ldy 	#0
.8db8					_SCLenLoop:
.8db8	b1 36		lda ($36),y			lda 	(zTemp0),y
.8dba	f0 0a		beq $8dc6			beq 	_SCLExit
.8dbc	c8		iny				iny
.8dbd	e6 38		inc $38				inc 	zTemp1
.8dbf	10 f7		bpl $8db8			bpl		_SCLenLoop
.8dc1	a9 09		lda #$09		lda	#9
.8dc3	4c 69 8c	jmp $8c69		jmp	ErrorHandler
.8dc6					_SCLExit:
.8dc6	7a		ply				ply
.8dc7	60		rts				rts
.8dc8					_SCCopy:
.8dc8	5a		phy				phy
.8dc9	a0 00		ldy #$00			ldy 	#0
.8dcb					_SCCopyLoop:
.8dcb	b1 36		lda ($36),y			lda 	(zTemp0),y
.8dcd	f0 06		beq $8dd5			beq 	_SCCExit
.8dcf	20 f7 a6	jsr $a6f7			jsr 	StringTempWrite
.8dd2	c8		iny				iny
.8dd3	80 f6		bra $8dcb			bra 	_SCCopyLoop
.8dd5					_SCCExit:
.8dd5	7a		ply				ply
.8dd6	60		rts				rts
.8dd7					_SCType:
.8dd7	4c a2 a4	jmp $a4a2			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/divide.asm

.9ecf					IntegerDivide:
.9ecf	fa		plx				plx
.9ed0	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.9ed3	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.9ed6	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9ed7	0a		asl a				asl 	a
.9ed8	10 05		bpl $9edf			bpl 	_NotRef
.9eda	48		pha				pha
.9edb	20 82 91	jsr $9182			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9ede	68		pla				pla
.9edf					_NotRef:
.9edf	0a		asl a				asl 	a
.9ee0	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9ee2	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9ee5	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.9ee8	f0 03		beq $9eed			beq 	_IntegerCode 				; if clear, then we have two integers
.9eea	4c a2 a4	jmp $a4a2			jmp 	TypeError 					; anything else, type mismatch.
.9eed					_IntegerCode:
.9eed	20 0f 9f	jsr $9f0f			jsr 	CheckDivideZero 			; do div zero check
.9ef0	20 47 9f	jsr $9f47			jsr 	Int32Divide 				; do the division
.9ef3	20 04 a0	jsr $a004			jsr 	CalculateSign 				; calculate result sign
.9ef6					NSMCopyPlusTwoToZero:
.9ef6	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.9ef9	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.9efc	bd 12 06	lda $0612,x			lda 	NSMantissa1+2,x
.9eff	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9f02	bd 1a 06	lda $061a,x			lda 	NSMantissa2+2,x
.9f05	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.9f08	bd 22 06	lda $0622,x			lda 	NSMantissa3+2,x
.9f0b	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.9f0e	60		rts				rts
.9f0f					CheckDivideZero:
.9f0f	e8		inx				inx
.9f10	20 ec 97	jsr $97ec			jsr 	NSMIsZero
.9f13	f0 02		beq $9f17			beq 	_CDVError
.9f15	ca		dex				dex
.9f16	60		rts				rts
.9f17					_CDVError:
.9f17	a9 03		lda #$03		lda	#3
.9f19	4c 69 8c	jmp $8c69		jmp	ErrorHandler
.9f1c					IntegerModulus:
.9f1c	fa		plx				plx
.9f1d	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.9f20	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.9f23	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9f24	0a		asl a				asl 	a
.9f25	10 05		bpl $9f2c			bpl 	_NotRef
.9f27	48		pha				pha
.9f28	20 82 91	jsr $9182			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9f2b	68		pla				pla
.9f2c					_NotRef:
.9f2c	0a		asl a				asl 	a
.9f2d	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9f2f	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9f32	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.9f35	f0 03		beq $9f3a			beq 	_IntegerCode 				; if clear, then we have two integers
.9f37	4c a2 a4	jmp $a4a2			jmp 	TypeError 					; anything else, type mismatch.
.9f3a					_IntegerCode:
.9f3a	20 0f 9f	jsr $9f0f			jsr 	CheckDivideZero 			; do div zero check
.9f3d	20 47 9f	jsr $9f47			jsr 	Int32Divide 				; do the division
.9f40	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; clear the sign bit.
.9f43	5e 00 06	lsr $0600,x			lsr 	NSStatus,x
.9f46	60		rts				rts
.9f47					Int32Divide:
.9f47	48		pha				pha 								; save AXY
.9f48	5a		phy				phy
.9f49	20 93 97	jsr $9793			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.9f4c	20 b8 97	jsr $97b8			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.9f4f	a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.9f51					_I32DivideLoop:
.9f51	e8		inx				inx
.9f52	e8		inx				inx
.9f53	20 d1 97	jsr $97d1			jsr 	NSMShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.9f56	ca		dex				dex
.9f57	ca		dex				dex
.9f58	20 d2 97	jsr $97d2			jsr 	NSMRotateLeft
.9f5b	20 87 9f	jsr $9f87			jsr 	DivideCheckSubtract 		; check if subtract possible
.9f5e	90 03		bcc $9f63			bcc 	_I32DivideNoCarryIn
.9f60	fe 0a 06	inc $060a,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.9f63					_I32DivideNoCarryIn:
.9f63	88		dey				dey 								; loop round till division completed.
.9f64	d0 eb		bne $9f51			bne 	_I32DivideLoop
.9f66	7a		ply				ply 								; restore AXY and exit
.9f67	68		pla				pla
.9f68	60		rts				rts
.9f69					Int32ShiftDivide:
.9f69	48		pha				pha 								; save AY
.9f6a	5a		phy				phy
.9f6b	e8		inx				inx 								; clear S[X+2]
.9f6c	e8		inx				inx
.9f6d	20 bc 97	jsr $97bc			jsr 	NSMSetZero
.9f70	ca		dex				dex
.9f71	ca		dex				dex
.9f72	a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.9f74					_I32SDLoop:
.9f74	20 87 9f	jsr $9f87			jsr 	DivideCheckSubtract 		; check if subtract possible
.9f77	e8		inx				inx
.9f78	e8		inx				inx
.9f79	20 d2 97	jsr $97d2			jsr 	NSMRotateLeft				; shift 64 bit FPA left, rotating carry in
.9f7c	ca		dex				dex
.9f7d	ca		dex				dex
.9f7e	20 d2 97	jsr $97d2			jsr 	NSMRotateLeft
.9f81	88		dey				dey 	 							; do 31 times
.9f82	d0 f0		bne $9f74			bne 	_I32SDLoop
.9f84	7a		ply				ply 								; restore AY and exit
.9f85	68		pla				pla
.9f86	60		rts				rts
.9f87					DivideCheckSubtract:
.9f87	20 84 8e	jsr $8e84			jsr 	SubTopTwoStack 				; subtract Stack[X+1] from Stack[X+0]
.9f8a	b0 04		bcs $9f90			bcs 	_DCSExit 					; if carry set, then could do, exit
.9f8c	20 5e 8e	jsr $8e5e			jsr 	AddTopTwoStack 				; add it back in
.9f8f	18		clc				clc 								; and return False
.9f90					_DCSExit:
.9f90	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/multiply.asm

.9f91					MulInteger:
.9f91	fa		plx				plx
.9f92	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.9f95	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.9f98	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9f99	0a		asl a				asl 	a
.9f9a	10 05		bpl $9fa1			bpl 	_NotRef
.9f9c	48		pha				pha
.9f9d	20 82 91	jsr $9182			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9fa0	68		pla				pla
.9fa1					_NotRef:
.9fa1	0a		asl a				asl 	a 							; put MSB of type into A:7
.9fa2	30 0b		bmi $9faf			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.9fa4	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9fa7	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.9faa	f0 06		beq $9fb2			beq 	_IntegerCode 				; if clear, then we have two integers
.9fac	4c e5 a1	jmp $a1e5			jmp 	FloatingPointMultiply 							; otherwise at least one float.
.9faf					_StringData:
.9faf	4c ac a4	jmp $a4ac			jmp 	NotDoneError							; at least one string - don't know both are strings.
.9fb2					_IntegerCode:
.9fb2	20 bf 9f	jsr $9fbf			jsr 	MultiplyShort
.9fb5	c9 00		cmp #$00			cmp 	#0
.9fb7	f0 05		beq $9fbe			beq 	_MIExit
.9fb9	a9 04		lda #$04		lda	#4
.9fbb	4c 69 8c	jmp $8c69		jmp	ErrorHandler
.9fbe					_MIExit:
.9fbe	60		rts				rts
.9fbf					MultiplyShort:
.9fbf	5a		phy				phy 								; save Y
.9fc0	20 93 97	jsr $9793			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.9fc3	20 b8 97	jsr $97b8			jsr 	NSMSetZeroMantissaOnly 		; set mantissa S[X] to zero
.9fc6	a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.9fc8					_I32MLoop:
.9fc8	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.9fcb	1d 12 06	ora $0612,x			ora 	NSMantissa1+2,x
.9fce	1d 1a 06	ora $061a,x			ora 	NSMantissa2+2,x
.9fd1	1d 22 06	ora $0622,x			ora 	NSMantissa3+2,x
.9fd4	f0 28		beq $9ffe			beq 	_I32MExit 					; exit if zero
.9fd6	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.9fd9	29 01		and #$01			and 	#1
.9fdb	f0 0e		beq $9feb			beq 	_I32MNoAdd
.9fdd	20 5e 8e	jsr $8e5e			jsr 	AddTopTwoStack 				; if so add S[X+1] to S[X+0]
.9fe0	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.9fe3	10 06		bpl $9feb			bpl 	_I32MNoAdd
.9fe5					_I32ShiftRight:
.9fe5	20 df 97	jsr $97df			jsr 	NSMShiftRight 				; shift S[X] right
.9fe8	c8		iny				iny 								; increment shift count
.9fe9	80 0a		bra $9ff5			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.9feb					_I32MNoAdd:
.9feb	3c 21 06	bit $0621,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.9fee	70 f5		bvs $9fe5			bvs 	_I32ShiftRight 				; instead.
.9ff0	e8		inx				inx
.9ff1	20 d1 97	jsr $97d1			jsr 	NSMShiftLeft 				; shift additive S[X+1] left
.9ff4	ca		dex				dex
.9ff5					_I32MShiftUpper:
.9ff5	e8		inx				inx 								; shift S[X+2] right
.9ff6	e8		inx				inx
.9ff7	20 df 97	jsr $97df			jsr 	NSMShiftRight
.9ffa	ca		dex				dex
.9ffb	ca		dex				dex
.9ffc	80 ca		bra $9fc8			bra 	_I32MLoop 					; try again.
.9ffe					_I32MExit:
.9ffe	20 04 a0	jsr $a004			jsr 	CalculateSign
.a001	98		tya				tya 								; shift in A
.a002	7a		ply				ply 								; restore Y and exit
.a003	60		rts				rts
.a004					CalculateSign:
.a004	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.a007	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; shift result left
.a00a	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.a00d	0a		asl a				asl 	a 							; shift bit 7 into carry
.a00e	7e 00 06	ror $0600,x			ror 	NSStatus,x 					; shift right into status byte.
.a011	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/scompare.asm

.8dda					CompareStrings:
.8dda	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check both are strings
.8ddd	3d 01 06	and $0601,x			and 	NSStatus+1,x
.8de0	29 10		and #$10			and 	#NSBIsString
.8de2	f0 2c		beq $8e10			beq 	_CSTypeError
.8de4	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy string addresses to zTemp0/1
.8de7	85 36		sta $36				sta 	zTemp0
.8de9	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8dec	85 37		sta $37				sta 	zTemp0+1
.8dee	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.8df1	85 38		sta $38				sta 	zTemp1
.8df3	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.8df6	85 39		sta $39				sta 	zTemp1+1
.8df8	5a		phy				phy 								; save Y so we can access strings
.8df9	a0 ff		ldy #$ff			ldy 	#$FF 						; -1 for pre increment.
.8dfb					_CSLoop:
.8dfb	c8		iny				iny
.8dfc	b1 36		lda ($36),y			lda 	(zTemp0),y 					; check if they are the same
.8dfe	d1 38		cmp ($38),y			cmp 	(zTemp1),y
.8e00	d0 06		bne $8e08			bne 	_CSDifferent
.8e02	c9 00		cmp #$00			cmp 	#0 							; reached end ?
.8e04	d0 f5		bne $8dfb			bne 	_CSLoop 					; still comparing
.8e06					_CSExit:
.8e06	7a		ply				ply 								; reached end, return zero in A from EOS
.8e07	60		rts				rts
.8e08					_CSDifferent:
.8e08	a9 ff		lda #$ff			lda 	#255 						; if < return $FF
.8e0a	90 fa		bcc $8e06			bcc		_CSExit
.8e0c	a9 01		lda #$01			lda 	#1 							; otherwise return 1.
.8e0e	80 f6		bra $8e06			bra 	_CSExit
.8e10					_CSTypeError:
.8e10	4c a2 a4	jmp $a4a2			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/shifts.asm

.8e13					ShiftLeft:
.8e13	38		sec				sec
.8e14	80 01		bra $8e17			bra 	ShiftMain
.8e16					ShiftRight:
.8e16	18		clc				clc
.8e17					ShiftMain:
.8e17	fa		plx				plx 								; restore X
.8e18	08		php				php 								; save direction
.8e19	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8e1c	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8e1f	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8e20	0a		asl a				asl 	a
.8e21	10 05		bpl $8e28			bpl 	_NotRef
.8e23	48		pha				pha
.8e24	20 82 91	jsr $9182			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8e27	68		pla				pla
.8e28					_NotRef:
.8e28	0a		asl a				asl 	a
.8e29	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8e2b	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8e2e	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8e31	f0 03		beq $8e36			beq 	_IntegerCode 				; if clear, then we have two integers
.8e33	4c a2 a4	jmp $a4a2			jmp 	TypeError 					; anything else, type mismatch.
.8e36					_IntegerCode:
.8e36	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; check number < 32
.8e39	29 e0		and #$e0			and 	#$E0
.8e3b	1d 11 06	ora $0611,x			ora 	NSMantissa1+1,x
.8e3e	1d 19 06	ora $0619,x			ora 	NSMantissa2+1,x
.8e41	1d 21 06	ora $0621,x			ora 	NSMantissa3+1,x
.8e44	d0 13		bne $8e59			bne 	_SMExit0 					; if >= 32 it will always return zero.
.8e46					_SMLoop:
.8e46	de 09 06	dec $0609,x			dec 	NSMantissa0+1,x 			; predecrement, could do << 0
.8e49	30 11		bmi $8e5c			bmi 	_SMExit 					; exit if done.
.8e4b	28		plp				plp 								; restore direcition setting
.8e4c	08		php				php
.8e4d	90 05		bcc $8e54			bcc 	_SMRight
.8e4f	20 d1 97	jsr $97d1			jsr 	NSMShiftLeft 				; shift left if CS
.8e52	80 f2		bra $8e46			bra 	_SMLoop
.8e54					_SMRight:
.8e54	20 df 97	jsr $97df			jsr 	NSMShiftRight 				; shift right if CC
.8e57	80 ed		bra $8e46			bra 	_SMLoop
.8e59					_SMExit0:
.8e59	20 bc 97	jsr $97bc			jsr 	NSMSetZero 					; return zero.
.8e5c					_SMExit:
.8e5c	28		plp				plp 								; throw direction
.8e5d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/simple.asm

.8e5e					AddTopTwoStack:
.8e5e	18		clc				clc
.8e5f	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8e62	7d 09 06	adc $0609,x			adc 		NSMantissa0+1,x
.8e65	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8e68	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8e6b	7d 11 06	adc $0611,x			adc 		NSMantissa1+1,x
.8e6e	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8e71	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8e74	7d 19 06	adc $0619,x			adc 		NSMantissa2+1,x
.8e77	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8e7a	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8e7d	7d 21 06	adc $0621,x			adc 		NSMantissa3+1,x
.8e80	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8e83	60		rts				rts
.8e84					SubTopTwoStack:
.8e84	38		sec				sec
.8e85	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8e88	fd 09 06	sbc $0609,x			sbc 		NSMantissa0+1,x
.8e8b	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8e8e	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8e91	fd 11 06	sbc $0611,x			sbc 		NSMantissa1+1,x
.8e94	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8e97	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8e9a	fd 19 06	sbc $0619,x			sbc 		NSMantissa2+1,x
.8e9d	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8ea0	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8ea3	fd 21 06	sbc $0621,x			sbc 		NSMantissa3+1,x
.8ea6	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8ea9	60		rts				rts
.8eaa					AddInteger:
.8eaa	fa		plx				plx
.8eab	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8eae	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8eb1	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8eb2	0a		asl a				asl 	a
.8eb3	10 05		bpl $8eba			bpl 	_NotRef
.8eb5	48		pha				pha
.8eb6	20 82 91	jsr $9182			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8eb9	68		pla				pla
.8eba					_NotRef:
.8eba	0a		asl a				asl 	a 							; put MSB of type into A:7
.8ebb	30 0b		bmi $8ec8			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.8ebd	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8ec0	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8ec3	f0 06		beq $8ecb			beq 	_IntegerCode 				; if clear, then we have two integers
.8ec5	4c 6d a0	jmp $a06d			jmp 	FloatingPointAdd 							; otherwise at least one float.
.8ec8					_StringData:
.8ec8	4c 7d 8d	jmp $8d7d			jmp 	StringConcat							; at least one string - don't know both are strings.
.8ecb					_IntegerCode:
.8ecb					AddCode:
.8ecb	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.8ece	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.8ed1	10 8b		bpl $8e5e			bpl 	AddTopTwoStack
.8ed3	20 84 8e	jsr $8e84			jsr 	SubTopTwoStack 				; do a physical subtraction
.8ed6	3c 20 06	bit $0620,x			bit 	NSMantissa3,x 				; result is +ve, okay
.8ed9	10 09		bpl $8ee4			bpl 	_AddExit
.8edb	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; sign is that of 2nd value
.8ede	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8ee1	20 71 97	jsr $9771			jsr 	NSMNegateMantissa 			; negate the mantissa and exit
.8ee4					_AddExit:
.8ee4	60		rts				rts
.8ee5					SubInteger:
.8ee5	fa		plx				plx
.8ee6	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8ee9	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8eec	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8eed	0a		asl a				asl 	a
.8eee	10 05		bpl $8ef5			bpl 	_NotRef
.8ef0	48		pha				pha
.8ef1	20 82 91	jsr $9182			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8ef4	68		pla				pla
.8ef5					_NotRef:
.8ef5	0a		asl a				asl 	a 							; put MSB of type into A:7
.8ef6	30 0b		bmi $8f03			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.8ef8	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8efb	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8efe	f0 06		beq $8f06			beq 	_IntegerCode 				; if clear, then we have two integers
.8f00	4c 72 a0	jmp $a072			jmp 	FloatingPointSub 							; otherwise at least one float.
.8f03					_StringData:
.8f03	4c ac a4	jmp $a4ac			jmp 	NotDoneError							; at least one string - don't know both are strings.
.8f06					_IntegerCode:
.8f06	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; negate the second value.
.8f09	49 80		eor #$80			eor 	#$80
.8f0b	9d 01 06	sta $0601,x			sta 	NSStatus+1,x
.8f0e	80 bb		bra $8ecb			bra 	AddCode 					; and do the same code as add.
.8f10					AndInteger:
.8f10	fa		plx				plx
.8f11	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8f14	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8f17	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8f18	0a		asl a				asl 	a
.8f19	10 05		bpl $8f20			bpl 	_NotRef
.8f1b	48		pha				pha
.8f1c	20 82 91	jsr $9182			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8f1f	68		pla				pla
.8f20					_NotRef:
.8f20	0a		asl a				asl 	a
.8f21	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8f23	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8f26	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8f29	f0 03		beq $8f2e			beq 	_IntegerCode 				; if clear, then we have two integers
.8f2b	4c a2 a4	jmp $a4a2			jmp 	TypeError 					; anything else, type mismatch.
.8f2e					_IntegerCode:
.8f2e	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8f31	3d 09 06	and $0609,x			and 		NSMantissa0+1,x
.8f34	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8f37	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8f3a	3d 11 06	and $0611,x			and 		NSMantissa1+1,x
.8f3d	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8f40	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8f43	3d 19 06	and $0619,x			and 		NSMantissa2+1,x
.8f46	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8f49	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8f4c	3d 21 06	and $0621,x			and 		NSMantissa3+1,x
.8f4f	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8f52	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.8f55	60		rts				rts
.8f56					OraInteger:
.8f56	fa		plx				plx
.8f57	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8f5a	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8f5d	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8f5e	0a		asl a				asl 	a
.8f5f	10 05		bpl $8f66			bpl 	_NotRef
.8f61	48		pha				pha
.8f62	20 82 91	jsr $9182			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8f65	68		pla				pla
.8f66					_NotRef:
.8f66	0a		asl a				asl 	a
.8f67	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8f69	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8f6c	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8f6f	f0 03		beq $8f74			beq 	_IntegerCode 				; if clear, then we have two integers
.8f71	4c a2 a4	jmp $a4a2			jmp 	TypeError 					; anything else, type mismatch.
.8f74					_IntegerCode:
.8f74	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8f77	1d 09 06	ora $0609,x			ora 		NSMantissa0+1,x
.8f7a	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8f7d	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8f80	1d 11 06	ora $0611,x			ora 		NSMantissa1+1,x
.8f83	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8f86	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8f89	1d 19 06	ora $0619,x			ora 		NSMantissa2+1,x
.8f8c	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8f8f	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8f92	1d 21 06	ora $0621,x			ora 		NSMantissa3+1,x
.8f95	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8f98	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.8f9b	60		rts				rts
.8f9c					EorInteger:
.8f9c	fa		plx				plx
.8f9d	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8fa0	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8fa3	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8fa4	0a		asl a				asl 	a
.8fa5	10 05		bpl $8fac			bpl 	_NotRef
.8fa7	48		pha				pha
.8fa8	20 82 91	jsr $9182			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8fab	68		pla				pla
.8fac					_NotRef:
.8fac	0a		asl a				asl 	a
.8fad	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8faf	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8fb2	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8fb5	f0 03		beq $8fba			beq 	_IntegerCode 				; if clear, then we have two integers
.8fb7	4c a2 a4	jmp $a4a2			jmp 	TypeError 					; anything else, type mismatch.
.8fba					_IntegerCode:
.8fba	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8fbd	5d 09 06	eor $0609,x			eor 		NSMantissa0+1,x
.8fc0	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8fc3	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8fc6	5d 11 06	eor $0611,x			eor 		NSMantissa1+1,x
.8fc9	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8fcc	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8fcf	5d 19 06	eor $0619,x			eor 		NSMantissa2+1,x
.8fd2	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8fd5	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8fd8	5d 21 06	eor $0621,x			eor 		NSMantissa3+1,x
.8fdb	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8fde	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.8fe1	60		rts				rts
.8fe2					WordIndirect:
.8fe2	fa		plx				plx
.8fe3	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8fe6	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8fe9	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8fea	0a		asl a				asl 	a
.8feb	10 05		bpl $8ff2			bpl 	_NotRef
.8fed	48		pha				pha
.8fee	20 82 91	jsr $9182			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8ff1	68		pla				pla
.8ff2					_NotRef:
.8ff2	0a		asl a				asl 	a
.8ff3	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8ff5	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8ff8	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8ffb	f0 03		beq $9000			beq 	_IntegerCode 				; if clear, then we have two integers
.8ffd	4c a2 a4	jmp $a4a2			jmp 	TypeError 					; anything else, type mismatch.
.9000					_IntegerCode:
.9000	20 cb 8e	jsr $8ecb			jsr 	AddCode 					; add the two values
.9003	a9 22		lda #$22			lda 	#NSBIsReference+2 			; make a 2 byte reference
.9005	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9008	60		rts				rts
.9009					ByteIndirect:
.9009	fa		plx				plx
.900a	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.900d	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.9010	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9011	0a		asl a				asl 	a
.9012	10 05		bpl $9019			bpl 	_NotRef
.9014	48		pha				pha
.9015	20 82 91	jsr $9182			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9018	68		pla				pla
.9019					_NotRef:
.9019	0a		asl a				asl 	a
.901a	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.901c	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.901f	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.9022	f0 03		beq $9027			beq 	_IntegerCode 				; if clear, then we have two integers
.9024	4c a2 a4	jmp $a4a2			jmp 	TypeError 					; anything else, type mismatch.
.9027					_IntegerCode:
.9027	20 cb 8e	jsr $8ecb			jsr 	AddCode 					; add the two values
.902a	a9 21		lda #$21			lda 	#NSBIsReference+1 			; make a 1 byte reference
.902c	9d 00 06	sta $0600,x			sta 	NSStatus,x
.902f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/tostring.asm

.a012					ConvertInt16:
.a012	8d 08 06	sta $0608			sta 	NSMantissa0 				; set up as 32 bit conversion
.a015	8e 10 06	stx $0610			stx 	NSMantissa1
.a018	9c 18 06	stz $0618			stz 	NSMantissa2
.a01b	9c 20 06	stz $0620			stz 	NSMantissa3
.a01e	9c 00 06	stz $0600			stz 	NSStatus 					; positive integer
.a021	a2 00		ldx #$00			ldx 	#0 							; stack level
.a023	a9 0a		lda #$0a			lda 	#10 						; base
.a025	80 00		bra $a027			bra 	ConvertInt32
.a027					ConvertInt32:
.a027	5a		phy				phy
.a028	a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.a02a	2c 00 06	bit $0600			bit 	NSStatus 					; output a - if not negative.
.a02d	10 08		bpl $a037			bpl 	_CI32NotNeg
.a02f	48		pha				pha
.a030	a9 2d		lda #$2d			lda 	#'-'
.a032	99 76 08	sta $0876,y			sta 	NumberBuffer,y
.a035	c8		iny				iny
.a036	68		pla				pla
.a037					_CI32NotNeg:
.a037	20 45 a0	jsr $a045			jsr 	_CI32DivideConvert 			; recursive conversion
.a03a	a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.a03c	99 76 08	sta $0876,y			sta 	NumberBuffer,y
.a03f	7a		ply				ply
.a040	a2 08		ldx #$08			ldx 	#NumberBuffer >> 8
.a042	a9 76		lda #$76			lda 	#NumberBuffer & $FF
.a044	60		rts				rts
.a045					_CI32DivideConvert:
.a045	e8		inx				inx 								; write to next slot up
.a046	20 be 97	jsr $97be			jsr 	NSMSetByte
.a049	ca		dex				dex
.a04a	20 47 9f	jsr $9f47			jsr 	Int32Divide 				; divide
.a04d	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; save remainder
.a050	48		pha				pha
.a051	20 f6 9e	jsr $9ef6			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.a054	20 ec 97	jsr $97ec			jsr 	NSMIsZero 					; is it zero ?
.a057	f0 06		beq $a05f			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.a059	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.a05c	20 45 a0	jsr $a045			jsr 	_CI32DivideConvert 			; and recusrively call.
.a05f					_CI32NoRecurse:
.a05f	68		pla				pla 								; remainder
.a060	c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII
.a062	90 02		bcc $a066			bcc 	_CI32NotHex
.a064	69 26		adc #$26			adc 	#6+32
.a066					_CI32NotHex:
.a066	69 30		adc #$30			adc 	#48
.a068	99 76 08	sta $0876,y			sta 	NumberBuffer,y 				; write out and exit
.a06b	c8		iny				iny
.a06c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/expression.asm


;******  Processing file: ./common/expressions/../generated/precedence.dat

.9030					PrecedenceLevel:
>9030	04					.byte	 4	; $00 <<
>9031	02					.byte	 2	; $01 <=
>9032	02					.byte	 2	; $02 <>
>9033	00					.byte	 0	; $03 !!3
>9034	00					.byte	 0	; $04 ><
>9035	02					.byte	 2	; $05 >=
>9036	04					.byte	 4	; $06 >>
>9037	00					.byte	 0	; $07 !!7
>9038	00					.byte	 0	; $08 !!8
>9039	00					.byte	 0	; $09 !!9
>903a	00					.byte	 0	; $0a !!10
>903b	00					.byte	 0	; $0b !!11
>903c	00					.byte	 0	; $0c !!12
>903d	00					.byte	 0	; $0d !!13
>903e	00					.byte	 0	; $0e !!14
>903f	00					.byte	 0	; $0f !!15
>9040	00					.byte	 0	; $10 @
>9041	00					.byte	 0	; $11 !!17
>9042	00					.byte	 0	; $12 !!18
>9043	00					.byte	 0	; $13 [
>9044	04					.byte	 4	; $14 \
>9045	00					.byte	 0	; $15 ]
>9046	01					.byte	 1	; $16 ^
>9047	00					.byte	 0	; $17 _
>9048	00					.byte	 0	; $18 `
>9049	00					.byte	 0	; $19 !!25
>904a	00					.byte	 0	; $1a !!26
>904b	00					.byte	 0	; $1b {
>904c	01					.byte	 1	; $1c |
>904d	00					.byte	 0	; $1d }
>904e	00					.byte	 0	; $1e ~
>904f	00					.byte	 0	; $1f [7m<7F>[m
>9050	00					.byte	 0	; $20
>9051	05					.byte	 5	; $21 !
>9052	00					.byte	 0	; $22 "
>9053	00					.byte	 0	; $23 #
>9054	05					.byte	 5	; $24 $
>9055	04					.byte	 4	; $25 %
>9056	01					.byte	 1	; $26 &
>9057	00					.byte	 0	; $27 '
>9058	00					.byte	 0	; $28 (
>9059	00					.byte	 0	; $29 )
>905a	04					.byte	 4	; $2a *
>905b	03					.byte	 3	; $2b +
>905c	00					.byte	 0	; $2c ,
>905d	03					.byte	 3	; $2d -
>905e	00					.byte	 0	; $2e .
>905f	04					.byte	 4	; $2f /
>9060	00					.byte	 0	; $30 0
>9061	00					.byte	 0	; $31 1
>9062	00					.byte	 0	; $32 2
>9063	00					.byte	 0	; $33 3
>9064	00					.byte	 0	; $34 4
>9065	00					.byte	 0	; $35 5
>9066	00					.byte	 0	; $36 6
>9067	00					.byte	 0	; $37 7
>9068	00					.byte	 0	; $38 8
>9069	00					.byte	 0	; $39 9
>906a	00					.byte	 0	; $3a :
>906b	00					.byte	 0	; $3b ;
>906c	02					.byte	 2	; $3c <
>906d	02					.byte	 2	; $3d =
>906e	02					.byte	 2	; $3e >
>906f	05					.byte	 5	; $3f ?

;******  Return to file: ./common/expressions/expression.asm

.9070					EvaluateExpressionAt0:
.9070	a2 00		ldx #$00			ldx 	#0 							; bottom stack level
.9072					EvaluateExpression:
.9072	a9 00		lda #$00			lda 	#0 							; lowest precedence level
.9074					EvaluateExpressionAtPrecedence:
.9074	48		pha				pha 								; save precedence level
.9075	20 43 93	jsr $9343			jsr 	EvaluateTerm 				; evaluate term into level X.
.9078	68		pla				pla 								; restore precedence level.
.9079					_EXPRLoop:
.9079	85 36		sta $36				sta 	zTemp0 						; save current precedence level.
.907b	b1 30		lda ($30),y			lda 	(codePtr),y
.907d	c9 40		cmp #$40			cmp		#$40 						; if >= $40 cannot be an operator
.907f	b0 25		bcs $90a6			bcs 	_EXPRExit
.9081	da		phx				phx 								; read the operator precedence
.9082	aa		tax				tax
.9083	bd 30 90	lda $9030,x			lda 	PrecedenceLevel,x
.9086	fa		plx				plx
.9087	c9 00		cmp #$00			cmp 	#0							; if zero exit (not an operator)
.9089	f0 1b		beq $90a6			beq 	_EXPRExit
.908b	85 37		sta $37				sta 	zTemp0+1 					; save operator precedence level.
.908d	a5 36		lda $36				lda 	zTemp0 						; compare current precedence vs. operator precedence
.908f	c5 37		cmp $37				cmp 	zTemp0+1
.9091	b0 13		bcs $90a6			bcs		_EXPRExit 					; if current >= operator exit
.9093	48		pha				pha 								; save current precedence.
.9094	b1 30		lda ($30),y			lda 	(codePtr),y
.9096	c8		iny				iny
.9097	48		pha				pha
.9098	a5 37		lda $37				lda 	zTemp0+1 					; get operator precedence level
.909a	e8		inx				inx 								; work out the right hand side.
.909b	20 74 90	jsr $9074			jsr 	EvaluateExpressionAtPrecedence
.909e	ca		dex				dex
.909f	68		pla				pla 								; get operator, call the code.
.90a0	20 a9 90	jsr $90a9			jsr 	_EXPRCaller
.90a3	68		pla				pla 								; restore precedence level
.90a4	80 d3		bra $9079			bra 	_EXPRLoop 					; and go round.
.90a6					_EXPRExit:
.90a6	a5 36		lda $36				lda 	zTemp0 						; A = current precedence level.
.90a8	60		rts				rts
.90a9					_EXPRCaller:
.90a9	da		phx				phx 								; save on stack, first thing is to restore it
.90aa	0a		asl a				asl 	a 							; double so can use vectors into X
.90ab	aa		tax				tax
.90ac	7c 7e 80	jmp ($807e,x)			jmp 	(VectorSetPunc,x) 			; and go to the code.

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/addsub.asm

.a06d					FloatingPointAdd:
.a06d	20 0e a2	jsr $a20e			jsr 	FloatPrepare 				; prepare for floats
.a070	80 0b		bra $a07d			bra 	FloatAdd
.a072					FloatingPointSub:
.a072	20 0e a2	jsr $a20e			jsr 	FloatPrepare 				; prepare for floats
.a075					FloatSubtract:
.a075	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; negate FPB
.a078	49 80		eor #$80			eor 	#$80
.a07a	9d 01 06	sta $0601,x			sta 	NSStatus+1,x				; and fall through.
.a07d					FloatAdd:
.a07d	48		pha				pha
.a07e	5a		phy				phy
.a07f	20 1f a2	jsr $a21f			jsr 	NSNormalise 				; normalise S[X]
.a082	f0 54		beq $a0d8			beq 	_FAReturn1
.a084	e8		inx				inx 								; normalise S[X+1]
.a085	20 1f a2	jsr $a21f			jsr 	NSNormalise
.a088	ca		dex				dex
.a089	c9 00		cmp #$00			cmp 	#0
.a08b	f0 6f		beq $a0fc			beq 	_FAExit 					; if so, just return A
.a08d	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; are the exponents the same ?
.a090	dd 29 06	cmp $0629,x			cmp 	NSExponent+1,x
.a093	f0 1b		beq $a0b0			beq 	_FAExponentsEqual
.a095	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; work out the larger exponent
.a098	a8		tay				tay
.a099	38		sec				sec 								; do a signed comparison of the exponents.
.a09a	fd 29 06	sbc $0629,x			sbc 	NSExponent+1,x
.a09d	50 02		bvc $a0a1			bvc 	_FANoSignedChange
.a09f	49 80		eor #$80			eor 	#$80
.a0a1					_FANoSignedChange:
.a0a1	29 80		and #$80			and 	#$80
.a0a3	10 03		bpl $a0a8			bpl 	_FAHaveMax
.a0a5	bc 29 06	ldy $0629,x			ldy 	NSExponent+1,x
.a0a8					_FAHaveMax:
.a0a8	20 ff a0	jsr $a0ff			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.a0ab	e8		inx				inx
.a0ac	20 ff a0	jsr $a0ff			jsr 	_FAShiftToExponent
.a0af	ca		dex				dex
.a0b0					_FAExponentsEqual:
.a0b0	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; are the signs the same
.a0b3	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.a0b6	30 10		bmi $a0c8			bmi 	_FADifferentSigns
.a0b8	20 5e 8e	jsr $8e5e			jsr 	AddTopTwoStack 				; do the add of the mantissae
.a0bb	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.a0be	10 3c		bpl $a0fc			bpl 	_FAExit 					; if no, we are done.
.a0c0	20 df 97	jsr $97df			jsr 	NSMShiftRight 				; shift A right, renormalising it.
.a0c3	fe 28 06	inc $0628,x			inc 	NSExponent,x 				; bump the exponent and exit
.a0c6	80 34		bra $a0fc			bra 	_FAExit
.a0c8					_FADifferentSigns:
.a0c8	20 84 8e	jsr $8e84			jsr 	SubTopTwoStack 				; subtract mantissa B from A
.a0cb	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; is the result negative ?
.a0ce	10 2c		bpl $a0fc			bpl 	_FAExit 					; if no, we are done.
.a0d0	20 68 97	jsr $9768			jsr 	NSMNegate 					; netate result
.a0d3	20 71 97	jsr $9771			jsr 	NSMNegateMantissa 			; negate (2'c) the mantissa
.a0d6	80 24		bra $a0fc			bra 	_FAExit
.a0d8					_FAReturn1:
.a0d8	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.a0db	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.a0de	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.a0e1	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.a0e4	bd 19 06	lda $0619,x			lda 	NSMantissa2+1,x
.a0e7	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.a0ea	bd 21 06	lda $0621,x			lda 	NSMantissa3+1,x
.a0ed	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.a0f0	bd 29 06	lda $0629,x			lda 	NSExponent+1,x
.a0f3	9d 28 06	sta $0628,x			sta 	NSExponent,x
.a0f6	bd 01 06	lda $0601,x			lda 	NSStatus+1,x
.a0f9	9d 00 06	sta $0600,x			sta 	NSStatus,x
.a0fc					_FAExit:
.a0fc	7a		ply				ply
.a0fd	68		pla				pla
.a0fe	60		rts				rts
.a0ff					_FAShiftToExponent:
.a0ff					_FAShiftToExponent2:
.a0ff	98		tya				tya 								; compare Y to exponent
.a100	dd 28 06	cmp $0628,x			cmp 	NSExponent,x 				; reached the exponent required ?
.a103	f0 08		beq $a10d			beq 	_FASEExit 					; exit if so.
.a105	20 df 97	jsr $97df			jsr 	NSMShiftRight	 			; shift the mantissa right
.a108	fe 28 06	inc $0628,x			inc 	NSExponent,x 				; increment exponent
.a10b	80 f2		bra $a0ff			bra 	_FAShiftToExponent2
.a10d					_FASEExit:
.a10d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/compare.asm

.a10e					CompareFloat:
.a10e	20 75 a0	jsr $a075			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.a111	bd 10 06	lda $0610,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.a114	29 f8		and #$f8			and 	#$F8
.a116	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.a119	1d 20 06	ora $0620,x			ora 	NSMantissa3,x
.a11c	f0 09		beq $a127			beq 	_FCExit 					; zero, so approximately identical
.a11e	a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.a120	3c 00 06	bit $0600,x			bit 	NSStatus,x
.a123	10 02		bpl $a127			bpl 	_FCExit
.a125					_FCNegative:
.a125	a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.a127					_FCExit:
.a127	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/divide.asm

.a128					FDivideCommand:
.a128	fa		plx				plx	 								; restore stack position
.a129	20 0e a2	jsr $a20e			jsr 	FloatPrepare 				; prepare for floats
.a12c					FloatDivide:
.a12c	48		pha				pha
.a12d	e8		inx				inx
.a12e	20 1f a2	jsr $a21f			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.a131	ca		dex				dex
.a132	c9 00		cmp #$00			cmp 	#0
.a134	f0 20		beq $a156			beq 	_FDZero
.a136	20 1f a2	jsr $a21f			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.a139	f0 19		beq $a154			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.a13b	20 69 9f	jsr $9f69			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.a13e	20 f6 9e	jsr $9ef6			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.a141	20 1f a2	jsr $a21f			jsr		NSNormalise 				; renormalise
.a144	20 04 a0	jsr $a004			jsr 	CalculateSign 				; calculate result sign
.a147	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; calculate exponent
.a14a	38		sec				sec
.a14b	fd 29 06	sbc $0629,x			sbc 	NSExponent+1,x
.a14e	38		sec				sec
.a14f	e9 1e		sbc #$1e			sbc 	#30
.a151	9d 28 06	sta $0628,x			sta 	NSExponent,x
.a154					_FDExit:
.a154	68		pla				pla
.a155	60		rts				rts
.a156					_FDZero:
.a156	a9 03		lda #$03		lda	#3
.a158	4c 69 8c	jmp $8c69		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/fractional.asm

.a15b					FloatFractionalPart:
.a15b	5a		phy				phy
.a15c	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; take absolute value
.a15f	29 7f		and #$7f			and 	#$7F
.a161	9d 00 06	sta $0600,x			sta 	NSStatus,x
.a164	20 1f a2	jsr $a21f			jsr 	NSNormalise
.a167	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.a16a	38		sec				sec
.a16b	e9 e0		sbc #$e0			sbc 	#$E0
.a16d	90 31		bcc $a1a0			bcc 	_FFPExit 					; already fractional
.a16f	c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.a171	b0 2a		bcs $a19d			bcs 	_FFPZero
.a173	a8		tay				tay 								; put count to do in Y
.a174	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; do each in turn.
.a177	20 a2 a1	jsr $a1a2			jsr 	_FFPPartial
.a17a	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.a17d	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.a180	20 a2 a1	jsr $a1a2			jsr 	_FFPPartial
.a183	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.a186	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.a189	20 a2 a1	jsr $a1a2			jsr 	_FFPPartial
.a18c	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.a18f	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.a192	20 a2 a1	jsr $a1a2			jsr 	_FFPPartial
.a195	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.a198	20 ec 97	jsr $97ec			jsr 	NSMIsZero 					; zeroed check.
.a19b	d0 03		bne $a1a0			bne 	_FFPExit
.a19d					_FFPZero:
.a19d	20 bc 97	jsr $97bc			jsr 	NSMSetZero
.a1a0					_FFPExit:
.a1a0	7a		ply				ply
.a1a1	60		rts				rts
.a1a2					_FFPPartial:
.a1a2	c0 00		cpy #$00			cpy 	#0 							; no more to do
.a1a4	f0 17		beq $a1bd			beq 	_FFFPPExit
.a1a6	c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.a1a8	b0 0c		bcs $a1b6			bcs 	_FFFPPWholeByte
.a1aa	5a		phy				phy
.a1ab					_FFFPPLeft:
.a1ab	0a		asl a				asl 	a
.a1ac	88		dey				dey
.a1ad	d0 fc		bne $a1ab			bne 	_FFFPPLeft
.a1af	7a		ply				ply
.a1b0					_FFFPPRight:
.a1b0	4a		lsr a				lsr 	a
.a1b1	88		dey				dey
.a1b2	d0 fc		bne $a1b0			bne 	_FFFPPRight
.a1b4	80 07		bra $a1bd			bra 	_FFFPPExit
.a1b6					_FFFPPWholeByte:
.a1b6	98		tya				tya 								; subtract 8 from count
.a1b7	38		sec				sec
.a1b8	e9 08		sbc #$08			sbc 	#8
.a1ba	a8		tay				tay
.a1bb	a9 00		lda #$00			lda 	#0 							; and clear all
.a1bd					_FFFPPExit:
.a1bd	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/integer.asm

.a1be					FloatIntegerPart:
.a1be	48		pha				pha
.a1bf	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; is it integer already ?
.a1c2	f0 1f		beq $a1e3			beq 	_FIPExit 					; if so do nothing
.a1c4	20 ec 97	jsr $97ec			jsr 	NSMIsZero 					; is it zero ?
.a1c7	f0 17		beq $a1e0			beq 	_FIPZero 					; if so return zero.
.a1c9	20 1f a2	jsr $a21f			jsr 	NSNormalise 				; normalise
.a1cc	f0 12		beq $a1e0			beq 	_FIPZero 					; normalised to zero, exit zero
.a1ce					_FIPShift:
.a1ce	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.a1d1	10 08		bpl $a1db			bpl 	_FIPCheckZero
.a1d3	20 df 97	jsr $97df			jsr 	NSMShiftRight 				; shift mantissa right
.a1d6	fe 28 06	inc $0628,x			inc 	NSExponent,x 				; bump exponent
.a1d9	80 f3		bra $a1ce			bra 	_FIPShift
.a1db					_FIPCheckZero:
.a1db	20 ec 97	jsr $97ec			jsr 	NSMIsZero 					; avoid -0 problem
.a1de	d0 03		bne $a1e3			bne 	_FIPExit 					; set to zero if mantissa zero.
.a1e0					_FIPZero:
.a1e0	20 bc 97	jsr $97bc			jsr 	NSMSetZero
.a1e3					_FIPExit:
.a1e3	68		pla				pla
.a1e4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/multiply.asm

.a1e5					FloatingPointMultiply:
.a1e5	20 0e a2	jsr $a20e			jsr 	FloatPrepare 				; prepare for floats
.a1e8					FloatMultiply:
.a1e8	48		pha				pha
.a1e9	20 1f a2	jsr $a21f			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.a1ec	f0 1b		beq $a209			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.a1ee	e8		inx				inx
.a1ef	20 1f a2	jsr $a21f			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.a1f2	ca		dex				dex
.a1f3	c9 00		cmp #$00			cmp 	#0
.a1f5	f0 0f		beq $a206			beq 	_FDSetZero
.a1f7	20 bf 9f	jsr $9fbf			jsr 	MultiplyShort 				; calculate the result.
.a1fa	7d 28 06	adc $0628,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.a1fd	18		clc				clc
.a1fe	7d 29 06	adc $0629,x			adc 	NSExponent+1,x
.a201	9d 28 06	sta $0628,x			sta 	NSExponent,x
.a204	80 03		bra $a209			bra 	_FDExit
.a206					_FDSetZero:
.a206	20 bc 97	jsr $97bc			jsr 	NSMSetZero 					; return 0
.a209					_FDExit:
.a209	20 1f a2	jsr $a21f			jsr 	NSNormalise 				; normalise the result
.a20c	68		pla				pla
.a20d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/utility.asm

.a20e					FloatPrepare:
.a20e	20 82 91	jsr $9182			jsr 	DereferenceTopTwo 			; dereference the top two values
.a211	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check ints/floats
.a214	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.a217	29 10		and #$10			and 	#NSBIsString
.a219	d0 01		bne $a21c			bne 	_FDType
.a21b	60		rts				rts
.a21c					_FDType:
.a21c	4c a2 a4	jmp $a4a2			jmp 	TypeError
.a21f					NSNormalise:
.a21f	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; make float, keep sign
.a222	29 80		and #$80			and 	#$80
.a224	09 08		ora #$08			ora 	#NSTFloat
.a226	9d 00 06	sta $0600,x			sta 	NSStatus,x
.a229	20 ec 97	jsr $97ec			jsr 	NSMIsZero 					; if zero exit
.a22c	d0 09		bne $a237			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.a22e	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; clear the sign bit.
.a231	7e 00 06	ror $0600,x			ror 	NSStatus,x 					; (no -0)
.a234	a9 00		lda #$00			lda 	#0 							; set Z flag
.a236	60		rts				rts
.a237					_NSNormaliseOptimise:
.a237	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; upper byte zero ?
.a23a	d0 22		bne $a25e			bne 	_NSNormaliseLoop
.a23c	bd 18 06	lda $0618,x			lda 	NSMantissa2,x 				; byte normalise
.a23f	30 1d		bmi $a25e			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.a241	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.a244	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.a247	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.a24a	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.a24d	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.a250	9e 08 06	stz $0608,x			stz 	NSMantissa0,x
.a253	bd 28 06	lda $0628,x			lda 	NSExponent,x
.a256	38		sec				sec
.a257	e9 08		sbc #$08			sbc 	#8
.a259	9d 28 06	sta $0628,x			sta 	NSExponent,x
.a25c	80 d9		bra $a237			bra 	_NSNormaliseOptimise
.a25e					_NSNormaliseLoop:
.a25e	3c 20 06	bit $0620,x			bit 	NSMantissa3,x 				; bit 30 set ?
.a261	70 08		bvs $a26b			bvs 	_NSNExit 					; exit if so with Z flag clear
.a263	20 d1 97	jsr $97d1			jsr 	NSMShiftLeft 				; shift mantissa left
.a266	de 28 06	dec $0628,x			dec 	NSExponent,x 				; adjust exponent
.a269	80 f3		bra $a25e			bra 	_NSNormaliseLoop
.a26b					_NSNExit:
.a26b	a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.a26d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignnumber.asm

.90af					AssignNumber:
.90af	5a		phy				phy
.90b0	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy mantissa0/1 to zTemp0
.90b3	85 36		sta $36				sta 	zTemp0
.90b5	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.90b8	85 37		sta $37				sta 	zTemp0+1
.90ba	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; clear reference bits
.90bd	29 df		and #$df			and 	#(NSBIsReference ^ $FF)
.90bf	9d 00 06	sta $0600,x			sta 	NSStatus,x
.90c2	29 18		and #$18			and 	#NSBTypeMask				; assigning to a float ?
.90c4	c9 08		cmp #$08			cmp 	#NSTFloat
.90c6	f0 2a		beq $90f2			beq 	_ANFloat
.90c8	bd 29 06	lda $0629,x			lda		NSExponent+1,x 				; is it a float
.90cb	f0 05		beq $90d2			beq		_ANNotFloat
.90cd	e8		inx				inx
.90ce	20 be a1	jsr $a1be			jsr 	FloatIntegerPart 			; make it an integer
.90d1	ca		dex				dex
.90d2					_ANNotFloat:
.90d2	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if byte/word reference.
.90d5	29 03		and #$03			and 	#3
.90d7	d0 05		bne $90de			bne 	_ANByteWord
.90d9	20 fe 90	jsr $90fe			jsr 	_ANCopy4PackSign 			; copy all 4 bytes and sign
.90dc	80 1e		bra $90fc			bra 	_ANExit
.90de					_ANByteWord:
.90de	48		pha				pha 								; save count
.90df	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; do byte
.90e2	92 36		sta ($36)			sta 	(zTemp0)
.90e4	68		pla				pla
.90e5	c9 01		cmp #$01			cmp	 	#1
.90e7	f0 13		beq $90fc			beq 	_ANExit
.90e9	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x 			; do word
.90ec	a0 01		ldy #$01			ldy 	#1
.90ee	91 36		sta ($36),y			sta 	(zTemp0),y
.90f0	80 0a		bra $90fc			bra 	_ANExit
.90f2					_ANFloat:
.90f2	20 fe 90	jsr $90fe			jsr 	_ANCopy4PackSign 			; write all 4 bytes and packed sign
.90f5	bd 29 06	lda $0629,x			lda 	NSExponent+1,x 				; copy exponent to slot 4
.90f8	a0 04		ldy #$04			ldy 	#4
.90fa	91 36		sta ($36),y			sta 	(zTemp0),y
.90fc					_ANExit:
.90fc	7a		ply				ply
.90fd	60		rts				rts
.90fe					_ANCopy4PackSign:
.90fe	a0 03		ldy #$03			ldy 	#3
.9100	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; sign bit into status
.9103	29 80		and #$80			and 	#$80 						; put into high bit of mantissa 3
.9105	1d 21 06	ora $0621,x			ora 	NSMantissa3+1,x
.9108	91 36		sta ($36),y			sta 	(zTemp0),y
.910a	88		dey				dey
.910b	bd 19 06	lda $0619,x			lda 	NSMantissa2+1,x
.910e	91 36		sta ($36),y			sta 	(zTemp0),y
.9110	88		dey				dey
.9111	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.9114	91 36		sta ($36),y			sta 	(zTemp0),y
.9116	88		dey				dey
.9117	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.911a	91 36		sta ($36),y			sta 	(zTemp0),y
.911c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignstring.asm

.911d					AssignString:
.911d	5a		phy				phy
.911e	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.9121	85 38		sta $38				sta 	zTemp1
.9123	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.9126	85 39		sta $39				sta 	zTemp1+1
.9128	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.912b	85 36		sta $36				sta 	zTemp0
.912d	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.9130	85 37		sta $37				sta 	zTemp0+1
.9132	a0 01		ldy #$01			ldy 	#1 							; the high byte of the target address
.9134	b1 36		lda ($36),y			lda 	(zTemp0),y
.9136	f0 23		beq $915b			beq 	_ASNewStringRequired 		; if zero, a new string is required.
.9138	38		sec				sec 								; put Address-2 in zsTemp - this is the size/status/string record
.9139	b2 36		lda ($36)			lda 	(zTemp0) 					; of concreted strings
.913b	e9 02		sbc #$02			sbc 	#2
.913d	85 3c		sta $3c				sta 	zsTemp
.913f	a0 01		ldy #$01			ldy 	#1
.9141	b1 36		lda ($36),y			lda 	(zTemp0),y
.9143	e9 00		sbc #$00			sbc 	#0
.9145	85 3d		sta $3d				sta 	zsTemp+1
.9147	a0 ff		ldy #$ff			ldy 	#$FF 						; get length of new string
.9149					_ASGetLength:
.9149	c8		iny				iny
.914a	b1 38		lda ($38),y			lda 	(zTemp1),y
.914c	d0 fb		bne $9149			bne 	_ASGetLength
.914e	98		tya				tya 								; is this length <= current length
.914f	d2 3c		cmp ($3c)			cmp 	(zsTemp)
.9151	90 20		bcc $9173			bcc 	_ASCopyString
.9153	f0 1e		beq $9173			beq 	_ASCopyString
.9155	a9 80		lda #$80			lda 	#$80 						; mark as unused.
.9157	a0 01		ldy #$01			ldy 	#1
.9159	91 3c		sta ($3c),y			sta 	(zsTemp),y
.915b					_ASNewStringRequired:
.915b	e8		inx				inx 								; concrete the new string.
.915c	20 3e a6	jsr $a63e			jsr 	StringConcrete				; (breaks zTemp1/2, not zTemp0 and zsTemp)
.915f	ca		dex				dex
.9160	18		clc				clc
.9161	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; copy that new address to the reference.
.9164	69 02		adc #$02			adc 	#2 							; add two to point at the data.
.9166	92 36		sta ($36)			sta 	(zTemp0)
.9168	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.916b	69 00		adc #$00			adc 	#0
.916d	a0 01		ldy #$01			ldy 	#1
.916f	91 36		sta ($36),y			sta 	(zTemp0),y
.9171	80 0d		bra $9180			bra 	_ASExit
.9173					_ASCopyString:
.9173	a0 00		ldy #$00			ldy 	#0
.9175					_ASCopyLoop:
.9175	b1 38		lda ($38),y			lda 	(zTemp1),y
.9177	c8		iny				iny
.9178	c8		iny				iny
.9179	91 3c		sta ($3c),y			sta 	(zsTemp),y
.917b	88		dey				dey
.917c	c9 00		cmp #$00			cmp 	#0
.917e	d0 f5		bne $9175			bne 	_ASCopyLoop
.9180					_ASExit:
.9180	7a		ply				ply
.9181	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/dereference.asm

.9182					DereferenceTopTwo:
.9182	e8		inx				inx
.9183	20 87 91	jsr $9187			jsr 	Dereference 				; deref x+1
.9186	ca		dex				dex  								; falls through to deref x
.9187					Dereference:
.9187	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get the status byte
.918a	29 20		and #$20			and 	#NSBIsReference 			; shift sign bit to carry, reference to bit 7
.918c	f0 57		beq $91e5			beq 	_DRFExit 					; not a reference
.918e	5a		phy				phy
.918f	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy address to dereference into zTemp0
.9192	85 36		sta $36				sta 	zTemp0
.9194	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.9197	85 37		sta $37				sta 	zTemp0+1
.9199	9e 10 06	stz $0610,x			stz 	NSMantissa1,x 				; clear second byte.
.919c	b2 36		lda ($36)			lda 	(zTemp0) 					; do the first byte
.919e	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.91a1	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get status byte.
.91a4	29 18		and #$18			and 	#NSBTypeMask 				; what type is it ?
.91a6	c9 10		cmp #$10			cmp 	#NSTString 					; if string, dereference two
.91a8	f0 0f		beq $91b9			beq 	_DRFDereferenceTwo
.91aa	c9 08		cmp #$08			cmp 	#NSTFloat 					; if float, do full dereference.
.91ac	f0 39		beq $91e7			beq 	_DRFFull
.91ae	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be integer - how many bytes ?
.91b1	29 03		and #$03			and 	#3
.91b3	f0 32		beq $91e7			beq 	_DRFFull 					; the whole word
.91b5	c9 01		cmp #$01			cmp 	#1 							; is it 10 (e.g. 2 bytes)
.91b7	f0 07		beq $91c0			beq		_DRFClear23 				; no, one byte, clear 2 & 3 and exit
.91b9					_DRFDereferenceTwo:
.91b9	a0 01		ldy #$01			ldy 	#1
.91bb	b1 36		lda ($36),y			lda 	(zTemp0),y
.91bd	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.91c0					_DRFClear23:
.91c0	9e 18 06	stz $0618,x			stz 	NSMantissa2,x 				; clear upper bytes, only read 1 or 2 bytes
.91c3	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.91c6	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; make it a value of that type.
.91c9	29 18		and #$18			and 	#NSBTypeMask
.91cb	9d 00 06	sta $0600,x			sta 	NSStatus,x
.91ce	c9 10		cmp #$10			cmp 	#NSTString  				; is it a string
.91d0	d0 12		bne $91e4			bne 	_DRFNotString
.91d2	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; check address is zero
.91d5	1d 10 06	ora $0610,x			ora 	NSMantissa1,x
.91d8	d0 0a		bne $91e4			bne 	_DRFNotString
.91da	a9 e6		lda #$e6			lda 	#_DRFNullString & $FF 		; if so, return reference to ""
.91dc	9d 08 06	sta $0608,x			sta 	NSMantissa0,X
.91df	a9 91		lda #$91			lda 	#_DRFNullString >> 8
.91e1	9d 10 06	sta $0610,x			sta 	NSMantissa1,X
.91e4					_DRFNotString
.91e4	7a		ply				ply 								; restore Y and exit
.91e5					_DRFExit:
.91e5	60		rts				rts
.91e6					_DRFNullString:
>91e6	00						.byte 	0
.91e7					_DRFFull:
.91e7	a0 01		ldy #$01			ldy 	#1 							; get remaining 3 bytes.
.91e9	b1 36		lda ($36),y			lda 	(zTemp0),y
.91eb	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.91ee	c8		iny				iny
.91ef	b1 36		lda ($36),y			lda 	(zTemp0),y
.91f1	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.91f4	c8		iny				iny
.91f5	b1 36		lda ($36),y			lda 	(zTemp0),y
.91f7	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.91fa	9e 28 06	stz $0628,x			stz 	NSExponent,x 				; clear exponent.
.91fd	bd 00 06	lda $0600,x			lda		NSStatus,x 					; see if type is integer
.9200	29 18		and #$18			and 	#NSBTypeMask  				; type information only
.9202	9d 00 06	sta $0600,x			sta 	NSStatus,x 					; update it back.
.9205	f0 06		beq $920d			beq 	_DRFNoExponent
.9207	c8		iny				iny 								; if not, read the exponent as well.
.9208	b1 36		lda ($36),y			lda 	(zTemp0),y
.920a	9d 28 06	sta $0628,x			sta 	NSExponent,x
.920d					_DRFNoExponent:
.920d	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; is the most significant bit set ?
.9210	10 0d		bpl $921f			bpl 	_DRFExit2 					; if not, then exit.
.9212	29 7f		and #$7f			and 	#$7F 						; clear that bit.
.9214	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.9217	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; set the sign flag
.921a	09 80		ora #$80			ora 	#NSBIsNegative
.921c	9d 00 06	sta $0600,x			sta 	NSStatus,x
.921f					_DRFExit2:
.921f	7a		ply				ply
.9220	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/number.asm

=1					ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2					ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3					ESTA_Decimal = 3 							; fractional part.
.9221					EncodeNumberStart:
.9221	38		sec				sec
.9222	80 01		bra $9225			bra 	EncodeNumberContinue+1
.9224					EncodeNumberContinue:
.9224	18		clc				clc
.9225					EncodeNumber:
.9225	08		php				php 								; save reset.
.9226	c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.9228	f0 12		beq $923c			beq 	_ENIsOkay
.922a	c9 30		cmp #$30			cmp 	#"0"
.922c	90 04		bcc $9232			bcc 	_ENBadNumber
.922e	c9 3a		cmp #$3a			cmp 	#"9"+1
.9230	90 0a		bcc $923c			bcc 	_ENIsOkay
.9232					_ENBadNumber:
.9232	28		plp				plp 								; throw saved reset
.9233	ad 05 07	lda $0705			lda 	EncodeState 				; decimal mode, construct final number
.9236	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.9238	f0 7e		beq $92b8			beq 	_ENConstructFinal
.923a					_ENFail:
.923a	18		clc				clc 								; not allowed
.923b	60		rts				rts
.923c					_ENIsOkay:
.923c	28		plp				plp 								; are we restarting
.923d	90 15		bcc $9254			bcc 	_ENNoRestart
.923f					_ENStartEncode:
.923f	c9 2e		cmp #$2e			cmp 	#'.'						; first is DP
.9241	f0 0c		beq $924f			beq 	_ENFirstDP
.9243	29 0f		and #$0f			and 	#15 						; put digit in mantissa
.9245	20 be 97	jsr $97be			jsr 	NSMSetByte
.9248	a9 01		lda #$01			lda 	#ESTA_Low
.924a					_ENExitChange:
.924a	8d 05 07	sta $0705			sta 	EncodeState 				; save new state
.924d	38		sec				sec
.924e	60		rts				rts
.924f					_ENFirstDP:
.924f	20 bc 97	jsr $97bc			jsr 	NSMSetZero 					; clear integer part
.9252	80 3f		bra $9293			bra 	_ESTASwitchFloat			; go straight to float and exi
.9254					_ENNoRestart:
.9254	48		pha				pha 								; save on stack.
.9255	ad 05 07	lda $0705			lda 	EncodeState 				; get current state
.9258	c9 01		cmp #$01			cmp 	#ESTA_Low
.925a	f0 09		beq $9265			beq  	_ESTALowState
.925c	c9 02		cmp #$02			cmp 	#ESTA_High
.925e	f0 29		beq $9289			beq 	_ESTAHighState
.9260	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.9262	f0 3b		beq $929f			beq 	_ESTADecimalState
>9264	db						.byte 	$DB 						; causes a break in the emulator
.9265					_ESTALowState:
.9265	68		pla				pla 								; get value back
.9266	c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.9268	f0 29		beq $9293			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.926a	29 0f		and #$0f			and 	#15 						; make digit
.926c	8d 06 07	sta $0706			sta 	DigitTemp 					; save it.
.926f	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.9272	0a		asl a				asl 	a
.9273	0a		asl a				asl 	a
.9274	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.9277	0a		asl a				asl 	a
.9278	6d 06 07	adc $0706			adc 	DigitTemp
.927b	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.927e	c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.9280	90 05		bcc $9287			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.9282	a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.9284	8d 05 07	sta $0705			sta 	EncodeState
.9287					_ESTANoSwitch:
.9287	38		sec				sec
.9288	60		rts				rts
.9289					_ESTAHighState:
.9289	68		pla				pla 								; get value back
.928a	c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.928c	f0 05		beq $9293			beq 	_ESTASwitchFloat
.928e	20 f2 92	jsr $92f2			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.9291	38		sec				sec
.9292	60		rts				rts
.9293					_ESTASwitchFloat:
.9293	9c 07 07	stz $0707			stz 	DecimalCount
.9296	e8		inx				inx 								; zero the decimal additive.
.9297	20 bc 97	jsr $97bc			jsr 	NSMSetZero
.929a	ca		dex				dex
.929b	a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.929d	80 ab		bra $924a			bra 	_ENExitChange
.929f					_ESTADecimalState:
.929f	68		pla				pla 								; digit.
.92a0	c9 2e		cmp #$2e			cmp 	#"." 						; fail on 2nd decimal point.
.92a2	f0 96		beq $923a			beq 	_ENFail
.92a4	e8		inx				inx 								; put digit into fractional part of X+1
.92a5	20 f2 92	jsr $92f2			jsr 	ESTAShiftDigitIntoMantissa
.92a8	ca		dex				dex
.92a9	ee 07 07	inc $0707			inc 	DecimalCount 				; bump the count of decimals
.92ac	ad 07 07	lda $0707			lda 	DecimalCount
.92af	c9 0b		cmp #$0b			cmp 	#11
.92b1	f0 02		beq $92b5			beq 	_ESTADSFail
.92b3	38		sec				sec
.92b4	60		rts				rts
.92b5					_ESTADSFail:
.92b5	4c 9d a4	jmp $a49d			jmp 	RangeError
.92b8					_ENConstructFinal:
.92b8	ad 07 07	lda $0707			lda 	DecimalCount 				; get decimal count
.92bb	f0 33		beq $92f0			beq 	_ENCFExit 					; no decimals
.92bd	5a		phy				phy
.92be	0a		asl a				asl 	a 							; x 4 and CLC
.92bf	0a		asl a				asl 	a
.92c0	6d 07 07	adc $0707			adc 	DecimalCount
.92c3	a8		tay				tay
.92c4	b9 5c a4	lda $a45c,y			lda 	DecimalScalarTable-5,y 		; copy decimal scalar to X+2
.92c7	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.92ca	b9 5d a4	lda $a45d,y			lda 	DecimalScalarTable-5+1,y
.92cd	9d 12 06	sta $0612,x			sta 	NSMantissa1+2,x
.92d0	b9 5e a4	lda $a45e,y			lda 	DecimalScalarTable-5+2,y
.92d3	9d 1a 06	sta $061a,x			sta 	NSMantissa2+2,x
.92d6	b9 5f a4	lda $a45f,y			lda 	DecimalScalarTable-5+3,y
.92d9	9d 22 06	sta $0622,x			sta 	NSMantissa3+2,x
.92dc	b9 60 a4	lda $a460,y			lda 	DecimalScalarTable-5+4,y
.92df	9d 2a 06	sta $062a,x			sta 	NSExponent+2,x
.92e2	a9 08		lda #$08			lda 	#NSTFloat
.92e4	9d 02 06	sta $0602,x			sta 	NSStatus+2,x
.92e7	7a		ply				ply
.92e8	e8		inx				inx 								; multiply decimal const by decimal scalar
.92e9	20 e8 a1	jsr $a1e8			jsr 	FloatMultiply
.92ec	ca		dex				dex
.92ed	20 7d a0	jsr $a07d			jsr 	FloatAdd 					; add to integer part.
.92f0					_ENCFExit:
.92f0	18		clc				clc 								; reject the digit.
.92f1	60		rts				rts
.92f2					ESTAShiftDigitIntoMantissa:
.92f2	29 0f		and #$0f			and 	#15 						; save digit
.92f4	48		pha				pha
.92f5	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; push mantissa on stack
.92f8	48		pha				pha
.92f9	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.92fc	48		pha				pha
.92fd	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.9300	48		pha				pha
.9301	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.9304	48		pha				pha
.9305	20 d1 97	jsr $97d1			jsr 	NSMShiftLeft 				; x 2
.9308	20 d1 97	jsr $97d1			jsr 	NSMShiftLeft 				; x 4
.930b	18		clc				clc 								; pop mantissa and add
.930c	68		pla				pla
.930d	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.9310	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.9313	68		pla				pla
.9314	7d 10 06	adc $0610,x			adc 	NSMantissa1,x
.9317	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.931a	68		pla				pla
.931b	7d 18 06	adc $0618,x			adc 	NSMantissa2,x
.931e	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.9321	68		pla				pla
.9322	7d 20 06	adc $0620,x			adc 	NSMantissa3,x
.9325	9d 20 06	sta $0620,x			sta 	NSMantissa3,x 				; x 5
.9328	20 d1 97	jsr $97d1			jsr 	NSMShiftLeft 				; x 10
.932b	68		pla				pla 								; add digit
.932c	18		clc				clc
.932d	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.9330	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.9333	90 0d		bcc $9342			bcc 	_ESTASDExit
.9335	fe 10 06	inc $0610,x			inc 	NSMantissa1,x
.9338	d0 08		bne $9342			bne 	_ESTASDExit
.933a	fe 18 06	inc $0618,x			inc 	NSMantissa2,x
.933d	d0 03		bne $9342			bne 	_ESTASDExit
.933f	fe 20 06	inc $0620,x			inc 	NSMantissa3,x
.9342					_ESTASDExit:
.9342	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/term.asm

.9343					EvaluateTerm:
.9343	b1 30		lda ($30),y			lda 	(codePtr),y
.9345	30 18		bmi $935f			bmi 	_ETCheckUnary 				; unary function ? (text ones)
.9347	c9 40		cmp #$40			cmp 	#$40 						; 40-7F => identifier reference
.9349	b0 6f		bcs $93ba			bcs 	_ETVariable
.934b	c9 30		cmp #$30			cmp 	#'0' 						; is it a number
.934d	90 6e		bcc $93bd			bcc 	_ETPuncUnary 				; if not it might be a punctuation unary.
.934f	c9 3a		cmp #$3a			cmp 	#'9'+1
.9351	b0 6a		bcs $93bd			bcs 	_ETPuncUnary
.9353	20 21 92	jsr $9221			jsr 	EncodeNumberStart 			; can't fail as it's 0-9 !
.9356					_ETNumber:
.9356	c8		iny				iny 								; keep encoding until we have the numbers
.9357	b1 30		lda ($30),y			lda 	(codePtr),y
.9359	20 24 92	jsr $9224			jsr 	EncodeNumberContinue
.935c	b0 f8		bcs $9356			bcs 	_ETNumber 					; go back if accepted.
.935e	60		rts				rts
.935f					_ETCheckUnary:
.935f	c9 ff		cmp #$ff			cmp 	#KWC_STRING 				; string token
.9361	f0 41		beq $93a4			beq 	_ETString
.9363	c9 fe		cmp #$fe			cmp 	#KWC_HEXCONST 				; hex constant.
.9365	f0 12		beq $9379			beq 	_ETHexConstant
.9367	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; check it actually is a unary function
.9369	90 0b		bcc $9376			bcc 	_ETSyntaxError
.936b	c9 96		cmp #$96			cmp 	#KWC_LAST_UNARY+1
.936d	b0 07		bcs $9376			bcs 	_ETSyntaxError
.936f	da		phx				phx 								; push X on the stack
.9370	0a		asl a				asl 	a 							; put vector x 2 into X
.9371	aa		tax				tax
.9372	c8		iny				iny 								; consume unary function token
.9373	7c fe 80	jmp ($80fe,x)			jmp 	(VectorSet0,x) 				; and do it.
.9376					_ETSyntaxError:
.9376	4c 98 a4	jmp $a498			jmp 	SyntaxError
.9379					_ETHexConstant:
.9379	c8		iny				iny 								; skip #
.937a	c8		iny				iny 								; skip count
.937b	20 bc 97	jsr $97bc			jsr 	NSMSetZero 					; clear result
.937e					_ETHLoop:
.937e	b1 30		lda ($30),y			lda 	(codePtr),y
.9380	c8		iny				iny 								; and consume
.9381	c9 00		cmp #$00			cmp 	#0 							; exit if zero
.9383	f0 1e		beq $93a3			beq 	_ETHExit
.9385	48		pha				pha 								; save on stack.
.9386	20 d1 97	jsr $97d1			jsr 	NSMShiftLeft 				; x 2
.9389	20 d1 97	jsr $97d1			jsr 	NSMShiftLeft 				; x 4
.938c	20 d1 97	jsr $97d1			jsr 	NSMShiftLeft 				; x 8
.938f	20 d1 97	jsr $97d1			jsr 	NSMShiftLeft 				; x 16
.9392	68		pla				pla 								; ASCII
.9393	c9 41		cmp #$41			cmp 	#'A'
.9395	90 02		bcc $9399			bcc 	_ETHNotChar
.9397	e9 07		sbc #$07			sbc 	#7
.9399					_ETHNotChar:
.9399	29 0f		and #$0f			and 	#15 						; digit now
.939b	1d 08 06	ora $0608,x			ora 	NSMantissa0,x 				; put in LS Nibble
.939e	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.93a1	80 db		bra $937e			bra 	_ETHLoop 					; go round.
.93a3					_ETHExit:
.93a3	60		rts				rts
.93a4					_ETString:
.93a4	c8		iny				iny 								; look at length
.93a5	b1 30		lda ($30),y			lda 	(codePtr),y
.93a7	48		pha				pha
.93a8	c8		iny				iny 								; first character
.93a9	20 30 9e	jsr $9e30			jsr 	MemoryInline 				; put address of string at (code-Ptr),y on stack
.93ac	68		pla				pla 								; restore count and save
.93ad	85 36		sta $36				sta 	zTemp0
.93af	98		tya				tya 								; add length to Y to skip it.
.93b0	18		clc				clc
.93b1	65 36		adc $36				adc 	zTemp0
.93b3	a8		tay				tay
.93b4	a9 10		lda #$10			lda 	#NSTString 					; mark as string
.93b6	9d 00 06	sta $0600,x			sta 	NSStatus,x
.93b9	60		rts				rts
.93ba					_ETVariable:
.93ba	4c 14 94	jmp $9414			jmp 	VariableHandler
.93bd					_ETPuncUnary:
.93bd	c8		iny				iny 								; consume the unary character
.93be	c9 2d		cmp #$2d			cmp 	#KWD_MINUS 					; unary minus
.93c0	f0 2d		beq $93ef			beq 	_ETUnaryNegate
.93c2	c9 10		cmp #$10			cmp 	#KWD_AT 					; @ reference -> constant
.93c4	f0 39		beq $93ff			beq 	_ETDereference
.93c6	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; parenthesis
.93c8	f0 43		beq $940d			beq 	_ETParenthesis
.93ca	64 36		stz $36				stz 	zTemp0 						; zTemp0 is the indirection level.
.93cc	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; byte indirection (0) ?
.93ce	f0 06		beq $93d6			beq 	_ETIndirection
.93d0	e6 36		inc $36				inc 	zTemp0
.93d2	c9 21		cmp #$21			cmp 	#KWD_PLING					; word indirection (1) \
.93d4	d0 a0		bne $9376			bne 	_ETSyntaxError
.93d6					_ETIndirection:
.93d6	a5 36		lda $36				lda 	zTemp0 						; push indirection amount (0-1) => (1-2) on the stack
.93d8	1a		inc a				inc 	a
.93d9	48		pha				pha
.93da	20 43 93	jsr $9343			jsr 	EvaluateTerm				; evaluate the term
.93dd	20 87 91	jsr $9187			jsr 	Dereference 				; dereference it.
.93e0	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a +ve integer.
.93e3	d0 07		bne $93ec			bne 	_ETTypeMismatch
.93e5	68		pla				pla 								; indirection 1-2
.93e6	09 20		ora #$20			ora 	#NSBIsReference 			; make it a reference.
.93e8	9d 00 06	sta $0600,x			sta 	NSStatus,x
.93eb	60		rts				rts
.93ec					_ETTypeMismatch:
.93ec	4c a2 a4	jmp $a4a2			jmp 	TypeError
.93ef					_ETUnaryNegate:
.93ef	20 43 93	jsr $9343			jsr 	EvaluateTerm				; evaluate the term
.93f2	20 87 91	jsr $9187			jsr 	Dereference 				; dereference it.
.93f5	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a number
.93f8	29 10		and #$10			and 	#NSTString
.93fa	d0 f0		bne $93ec			bne 	_ETTypeMismatch
.93fc	4c 68 97	jmp $9768			jmp 	NSMNegate  					; just toggles the sign bit.
.93ff					_ETDereference:
.93ff	20 43 93	jsr $9343			jsr 	EvaluateTerm				; evaluate the term
.9402	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a reference
.9405	29 20		and #$20			and 	#NSBIsReference
.9407	f0 e3		beq $93ec			beq 	_ETTypeMismatch
.9409	9e 00 06	stz $0600,x			stz 	NSStatus,x 					; make it an integer address
.940c	60		rts				rts
.940d					_ETParenthesis:
.940d	20 72 90	jsr $9072			jsr 	EvaluateExpression 			; evaluate here, from lowest precedence
.9410	20 b6 9e	jsr $9eb6			jsr 	CheckRightBracket 			; check for )
.9413	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/variable.asm

.9414					VariableHandler:
.9414	b1 30		lda ($30),y			lda 	(codePtr),y
.9416	18		clc				clc
.9417	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.9419	85 37		sta $37				sta 	zTemp0+1
.941b	c8		iny				iny
.941c	b1 30		lda ($30),y			lda 	(codePtr),y
.941e	85 36		sta $36				sta 	zTemp0
.9420	c8		iny				iny
.9421	18		clc				clc									; copy variable address+3 to mantissa
.9422	69 03		adc #$03			adc 	#3
.9424	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.9427	a5 37		lda $37				lda 	zTemp0+1
.9429	69 00		adc #$00			adc 	#0
.942b	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.942e	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.9431	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.9434	9e 28 06	stz $0628,x			stz 	NSExponent,x
.9437	5a		phy				phy
.9438	a0 02		ldy #$02			ldy 	#2 							; read type
.943a	b1 36		lda ($36),y			lda 	(zTemp0),y
.943c	7a		ply				ply
.943d	29 1c		and #$1c			and 	#NSBTypeMask+NSBIsArray 	; get type information
.943f	09 20		ora #$20			ora 	#NSBIsReference 			; make a reference.
.9441	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9444	29 04		and #$04			and 	#NSBIsArray
.9446	d0 01		bne $9449			bne 	_VHArray
.9448	60		rts				rts
.9449					_VHArray:
.9449	e8		inx				inx
.944a	20 54 97	jsr $9754			jsr 	Evaluate8BitInteger 		; get the 1st index.
.944d	a9 ff		lda #$ff			lda 	#$FF 						; set Status of X+2 to a duff value so we know if we picked it up.
.944f	9d 01 06	sta $0601,x			sta 	NSStatus+1,x
.9452	b1 30		lda ($30),y			lda 	(codePtr),y
.9454	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.9456	d0 06		bne $945e			bne 	_VHNoSecondIndex
.9458	c8		iny				iny 								; skip the comma
.9459	e8		inx				inx
.945a	20 54 97	jsr $9754			jsr 	Evaluate8BitInteger 		; get the 2nd index.
.945d	ca		dex				dex
.945e					_VHNoSecondIndex:
.945e	ca		dex				dex 								; set X back.
.945f	20 b6 9e	jsr $9eb6			jsr 	CheckRightBracket 			; and check the right bracket.
.9462	5a		phy				phy 								; save position
.9463	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy record address to zaTemp
.9466	85 3e		sta $3e				sta 	zaTemp
.9468	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.946b	85 3f		sta $3f				sta 	zaTemp+1
.946d	a0 03		ldy #$03			ldy 	#3 							; get the second index - which is 0 if there is one index.
.946f	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9471	f0 02		beq $9475			beq 	_VHHas2Mask
.9473	a9 ff		lda #$ff			lda 	#$FF
.9475					_VHHas2Mask:
.9475	dd 02 06	cmp $0602,x			cmp 	NSStatus+2,x 				; so if they are the same there are the wrong number of indices
.9478	f0 54		beq $94ce			beq 	_VHBadIndex
.947a	0a		asl a				asl 	a 							; carry will be set if a second index
.947b	90 09		bcc $9486			bcc 	_VHCheckFirstIndex
.947d	a0 03		ldy #$03			ldy 	#3 			 				; check the 2nd size >= 2nd index
.947f	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9481	dd 0a 06	cmp $060a,x			cmp 	NSMantissa0+2,x
.9484	90 48		bcc $94ce			bcc 	_VHBadIndex
.9486					_VHCheckFirstIndex:
.9486	a0 02		ldy #$02			ldy 	#2 			 				; check the 2nd size >= 2nd index
.9488	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.948a	dd 09 06	cmp $0609,x			cmp 	NSMantissa0+1,x
.948d	90 3f		bcc $94ce			bcc 	_VHBadIndex
.948f	64 36		stz $36				stz 	zTemp0 						; clear zTemp0 (if 1 index)
.9491	64 37		stz $37				stz 	zTemp0+1
.9493	bd 02 06	lda $0602,x			lda 	NSStatus+2,x 				; if only one index provided, don't need to multiply
.9496	30 0f		bmi $94a7			bmi 	_VHNoMultiply
.9498	da		phx				phx
.9499	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; get 2nd index on stack
.949c	48		pha				pha
.949d	a0 02		ldy #$02			ldy 	#2 							; get 1st size in A
.949f	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.94a1	1a		inc a				inc 	a 							; add 1 for zero base
.94a2	fa		plx				plx
.94a3	20 38 a3	jsr $a338			jsr 	Multiply8x8 				; calculate -> Z0
.94a6	fa		plx				plx
.94a7					_VHNoMultiply:
.94a7	18		clc				clc
.94a8	a5 36		lda $36				lda 	zTemp0
.94aa	7d 09 06	adc $0609,x			adc 	NSMantissa0+1,x
.94ad	85 36		sta $36				sta 	zTemp0
.94af	a5 37		lda $37				lda 	zTemp0+1
.94b1	69 00		adc #$00			adc 	#0
.94b3	85 37		sta $37				sta 	zTemp0+1
.94b5	bd 00 06	lda $0600,x			lda 	NSStatus,x
.94b8	20 ce 85	jsr $85ce			jsr 	ScaleByBaseType
.94bb	18		clc				clc
.94bc	b2 3e		lda ($3e)			lda 	(zaTemp)
.94be	65 36		adc $36				adc 	zTemp0
.94c0	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.94c3	a0 01		ldy #$01			ldy 	#1
.94c5	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.94c7	65 37		adc $37				adc 	zTemp0+1
.94c9	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.94cc	7a		ply				ply 								; restore position
.94cd	60		rts				rts
.94ce					_VHBadIndex:
.94ce	a9 17		lda #$17		lda	#23
.94d0	4c 69 8c	jmp $8c69		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/abs.asm

.a26e					AbsUnary:
.a26e	fa		plx				plx 								; restore stack pos
.a26f	20 10 97	jsr $9710			jsr 	EvaluateNumber 				; get a float or int
.a272	20 b6 9e	jsr $9eb6			jsr 	CheckRightBracket
.a275	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; clear the sign bit
.a278	29 7f		and #$7f			and 	#$7F
.a27a	9d 00 06	sta $0600,x			sta 	NSStatus,x
.a27d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/alloc.asm

.94d3					AllocUnary:
.94d3	fa		plx				plx 								; restore stack pos
.94d4	20 48 97	jsr $9748			jsr 	Evaluate16BitInteger		; get bytes required.
.94d7	20 b6 9e	jsr $9eb6			jsr 	CheckRightBracket
.94da	da		phx				phx 								; save X/Y
.94db	5a		phy				phy
.94dc	8a		txa				txa 								; copy X into Y
.94dd	a8		tay				tay
.94de	b9 10 06	lda $0610,y			lda		NSMantissa1,y 				; get size
.94e1	aa		tax				tax
.94e2	b9 08 06	lda $0608,y			lda 	NSMantissa0,y
.94e5	20 f2 94	jsr $94f2			jsr 	AllocateXABytes 			; allocate memory
.94e8	99 08 06	sta $0608,y			sta 	NSMantissa0,y 				; write address out.
.94eb	8a		txa				txa
.94ec	99 10 06	sta $0610,y			sta 	NSMantissa1,y
.94ef	7a		ply				ply
.94f0	fa		plx				plx
.94f1	60		rts				rts
.94f2					AllocateXABytes:
.94f2	5a		phy				phy
.94f3	ac 0c 07	ldy $070c			ldy 	lowMemPtr 					; push current address on stack and to zTemp0
.94f6	84 36		sty $36				sty 	zTemp0
.94f8	5a		phy				phy
.94f9	ac 0d 07	ldy $070d			ldy 	lowMemPtr+1
.94fc	84 37		sty $37				sty 	zTemp0+1
.94fe	5a		phy				phy
.94ff	18		clc				clc 								; add to low memory pointer
.9500	6d 0c 07	adc $070c			adc 	lowMemPtr
.9503	8d 0c 07	sta $070c			sta 	lowMemPtr
.9506	8a		txa				txa
.9507	6d 0d 07	adc $070d			adc 	lowMemPtr+1
.950a	8d 0d 07	sta $070d			sta 	lowMemPtr+1
.950d					_ClearMemory:
.950d	ad 0c 07	lda $070c			lda 	lowMemPtr 					; cleared all memory allocated
.9510	c5 36		cmp $36				cmp 	zTemp0
.9512	d0 07		bne $951b			bne 	_CMClearNext
.9514	ad 0d 07	lda $070d			lda 	lowMemPtr+1
.9517	c5 37		cmp $37				cmp 	zTemp0+1
.9519	f0 0c		beq $9527			beq 	_CMExit
.951b					_CMClearNext:
.951b	a9 00		lda #$00			lda 	#0 							; clear byte, advance to next.
.951d	92 36		sta ($36)			sta 	(zTemp0)
.951f	e6 36		inc $36				inc 	zTemp0
.9521	d0 ea		bne $950d			bne 	_ClearMemory
.9523	e6 37		inc $37				inc		zTemp0+1
.9525	80 e6		bra $950d			bra 	_ClearMemory
.9527					_CMExit:
.9527	fa		plx				plx
.9528	68		pla				pla
.9529	7a		ply				ply
.952a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/asc.asm

.a27e					AscUnary:
.a27e	fa		plx				plx 								; restore stack pos
.a27f	20 1b 97	jsr $971b			jsr 	EvaluateString 				; get a string
.a282	b2 36		lda ($36)			lda 	(zTemp0)					; get/return firs character
.a284	20 be 97	jsr $97be			jsr 	NSMSetByte
.a287	20 b6 9e	jsr $9eb6			jsr 	CheckRightBracket
.a28a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/frac.asm

.a28b					FracUnary:
.a28b	fa		plx				plx 								; restore stack pos
.a28c	20 10 97	jsr $9710			jsr 	EvaluateNumber 				; get a float or int
.a28f	20 b6 9e	jsr $9eb6			jsr 	CheckRightBracket
.a292	bd 00 06	lda $0600,x			lda 	NSStatus,x
.a295	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.a297	f0 04		beq $a29d			beq 	_IUZero
.a299	20 5b a1	jsr $a15b			jsr 	FloatFractionalPart
.a29c	60		rts				rts
.a29d					_IUZero:
.a29d	20 bc 97	jsr $97bc			jsr 	NSMSetZero
.a2a0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/int.asm

.a2a1					IntUnary:
.a2a1	fa		plx				plx 								; restore stack pos
.a2a2	20 10 97	jsr $9710			jsr 	EvaluateNumber 				; get a float or int
.a2a5	20 b6 9e	jsr $9eb6			jsr 	CheckRightBracket
.a2a8	bd 00 06	lda $0600,x			lda 	NSStatus,x
.a2ab	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.a2ad	f0 03		beq $a2b2			beq 	_IUExit
.a2af	20 be a1	jsr $a1be			jsr 	FloatIntegerPart
.a2b2					_IUExit:
.a2b2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/len.asm

.a2b3					LenUnary:
.a2b3	fa		plx				plx 								; restore stack pos
.a2b4	20 1b 97	jsr $971b			jsr 	EvaluateString 				; get a string
.a2b7	5a		phy				phy
.a2b8	a0 00		ldy #$00			ldy 	#0 							; find length
.a2ba					_LenFind:
.a2ba	b1 36		lda ($36),y			lda 	(zTemp0),y
.a2bc	f0 06		beq $a2c4			beq 	_LenExit
.a2be	c8		iny				iny
.a2bf	d0 f9		bne $a2ba			bne 	_LenFind
.a2c1	4c 9d a4	jmp $a49d			jmp 	RangeError 					; string > 255
.a2c4					_LenExit:
.a2c4	98		tya				tya
.a2c5	20 be 97	jsr $97be			jsr 	NSMSetByte
.a2c8	7a		ply				ply
.a2c9	20 b6 9e	jsr $9eb6			jsr 	CheckRightBracket
.a2cc	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/not.asm

.952b					Unary_Not:
.952b	fa		plx				plx
.952c	20 33 97	jsr $9733			jsr 	EvaluateInteger 			; get integer
.952f	20 b6 9e	jsr $9eb6			jsr 	CheckRightBracket
.9532	20 ec 97	jsr $97ec			jsr 	NSMIsZero 					; zero mantissa ?
.9535	f0 04		beq $953b			beq 	_NotZero
.9537	20 bc 97	jsr $97bc			jsr 	NSMSetZero
.953a	60		rts				rts
.953b					_NotZero:
.953b	4c d6 8c	jmp $8cd6			jmp 	ReturnTrue
.953e					_UNBad:
.953e	4c a7 a4	jmp $a4a7			jmp 	ArgumentError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/rnd.asm

.9541					Unary_Rnd:
.9541	20 10 97	jsr $9710			jsr 	EvaluateNumber 				; number to use.
.9544	20 b6 9e	jsr $9eb6			jsr 	CheckRightBracket 			; closing bracket
.9547	20 70 95	jsr $9570			jsr 	Random32Bit 				; generate a number.
.954a	ad 08 07	lda $0708			lda 	RandomSeed+0
.954d	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.9550	ad 09 07	lda $0709			lda 	RandomSeed+1
.9553	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9556	ad 0a 07	lda $070a			lda 	RandomSeed+2
.9559	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.955c	ad 0b 07	lda $070b			lda 	RandomSeed+3
.955f	29 7f		and #$7f			and 	#$7F 						; make legal mantissa
.9561	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.9564	a9 e1		lda #$e1			lda 	#-31 						; force into 0-1 range
.9566	8d 28 06	sta $0628			sta 	NSExponent
.9569	a9 08		lda #$08			lda 	#NSTFloat
.956b	8d 00 06	sta $0600			sta 	NSStatus 					; positive.
>956e	db						.byte 	$DB 						; causes a break in the emulator
.956f	60		rts				rts
.9570					Random32Bit:
.9570	5a		phy				phy
.9571	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.9573	ad 08 07	lda $0708			lda 	RandomSeed+0 				; check the seed isn't zero
.9576	d0 03		bne $957b			bne 	_Random1
.9578	a8		tay				tay 								; if so do it 256 times
.9579	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.957b					_Random1:
.957b	0a		asl a				asl 	a 							; LSFR RNG
.957c	2e 09 07	rol $0709			rol 	RandomSeed+1
.957f	2e 0a 07	rol $070a			rol 	RandomSeed+2
.9582	2e 0b 07	rol $070b			rol 	RandomSeed+3
.9585	90 02		bcc $9589			bcc 	_Random2
.9587	49 c5		eor #$c5			eor 	#$C5
.9589					_Random2:
.9589	88		dey				dey
.958a	d0 ef		bne $957b			bne 	_Random1
.958c	7a		ply				ply
.958d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/sgn.asm

.a2cd					SgnUnary:
.a2cd	fa		plx				plx 								; restore stack pos
.a2ce	20 10 97	jsr $9710			jsr 	EvaluateNumber 				; get a float or int
.a2d1	20 b6 9e	jsr $9eb6			jsr 	CheckRightBracket
.a2d4	20 ec 97	jsr $97ec			jsr 	NSMIsZero 					; if zero
.a2d7	f0 10		beq $a2e9			beq 	_SGZero  					; return Int Zero
.a2d9	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get status w/sign
.a2dc	48		pha				pha
.a2dd	a9 01		lda #$01			lda 	#1 							; set to 1
.a2df	20 be 97	jsr $97be			jsr 	NSMSetByte
.a2e2	68		pla				pla
.a2e3	29 80		and #$80			and		#$80 						; copy the sign byte out
.a2e5	9d 00 06	sta $0600,x			sta 	NSStatus,x
.a2e8	60		rts				rts
.a2e9	20 bc 97	jsr $97bc	_SGZero:jsr 	NSMSetZero
.a2ec	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/val.asm

.a2ed					ValUnary:
.a2ed	fa		plx				plx 								; restore stack pos
.a2ee	20 03 a3	jsr $a303			jsr 	ValMainCode 				; do the main val() code
.a2f1	b0 01		bcs $a2f4			bcs 	_VUError 					; couldn't convert
.a2f3	60		rts				rts
.a2f4					_VUError:
.a2f4	4c a2 a4	jmp $a4a2			jmp 	TypeError
.a2f7					IsValUnary:
.a2f7	fa		plx				plx 								; restore stack pos
.a2f8	20 03 a3	jsr $a303			jsr 	ValMainCode 				; do the main val() code
.a2fb	b0 03		bcs $a300			bcs 	_VUBad
.a2fd	4c d6 8c	jmp $8cd6			jmp 	ReturnTrue
.a300					_VUBad:
.a300	4c e2 8c	jmp $8ce2			jmp 	ReturnFalse
.a303					ValMainCode:
.a303	20 1b 97	jsr $971b			jsr 	EvaluateString 				; get a string
.a306	20 b6 9e	jsr $9eb6			jsr 	CheckRightBracket 			; check right bracket present
.a309	5a		phy				phy
.a30a	b2 36		lda ($36)			lda 	(zTemp0) 					; check not empty string
.a30c	f0 17		beq $a325			beq 	_VMCFail2
.a30e	a0 ff		ldy #$ff			ldy 	#$FF 						; start position
.a310	48		pha				pha 								; save first character
.a311	c9 2d		cmp #$2d			cmp 	#"-"		 				; is it -
.a313	d0 01		bne $a316			bne 	_VMCStart
.a315	c8		iny				iny 								; skip over -
.a316					_VMCStart:
.a316	38		sec				sec 								; initialise first time round.
.a317					_VMCNext:
.a317	c8		iny				iny 								; pre-increment
.a318	b1 36		lda ($36),y			lda 	(zTemp0),y 					; next character
.a31a	f0 0c		beq $a328			beq 	_VMCSuccess 				; successful.
.a31c	20 25 92	jsr $9225			jsr 	EncodeNumber 				; send it to the number-builder
.a31f	90 03		bcc $a324			bcc 	_VMCFail 					; if failed, give up.
.a321	18		clc				clc 								; next time round, countinue
.a322	80 f3		bra $a317			bra 	_VMCNext
.a324					_VMCFail:
.a324	68		pla				pla
.a325					_VMCFail2:
.a325	7a		ply				ply
.a326	38		sec				sec
.a327	60		rts				rts
.a328					_VMCSuccess:
.a328	a9 00		lda #$00			lda 	#0 							; construct final
.a32a	20 25 92	jsr $9225			jsr 	EncodeNumber
.a32d	68		pla				pla
.a32e	c9 2d		cmp #$2d			cmp 	#"-"
.a330	d0 03		bne $a335			bne 	_VMCNotNegative
.a332	20 68 97	jsr $9768			jsr		NSMNegate
.a335					_VMCNotNegative:
.a335	7a		ply				ply
.a336	18		clc				clc
.a337	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/chr.asm

.958e					ChrUnary:
.958e	fa		plx				plx 								; restore stack pos
.958f	20 54 97	jsr $9754			jsr 	Evaluate8BitInteger			; get value
.9592	48		pha				pha
.9593	20 b6 9e	jsr $9eb6			jsr 	CheckRightBracket
.9596	a9 01		lda #$01			lda 	#1 							; allocate space for one char
.9598	20 b9 a6	jsr $a6b9			jsr 	StringTempAllocate
.959b	68		pla				pla 								; write number to it
.959c	20 f7 a6	jsr $a6f7			jsr 	StringTempWrite
.959f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/spc.asm

.95a0					SpcUnary:
.95a0	fa		plx				plx 								; restore stack pos
.95a1	20 54 97	jsr $9754			jsr 	Evaluate8BitInteger			; get value
.95a4	5a		phy				phy
.95a5	48		pha				pha 								; save count
.95a6	20 b9 a6	jsr $a6b9			jsr 	StringTempAllocate
.95a9	7a		ply				ply 								; to do count in Y
.95aa					_SpcLoop:
.95aa	c0 00		cpy #$00			cpy 	#0
.95ac	f0 08		beq $95b6			beq 	_SpcExit
.95ae	a9 20		lda #$20			lda 	#32
.95b0	20 f7 a6	jsr $a6f7			jsr 	StringTempWrite
.95b3	88		dey				dey
.95b4	80 f4		bra $95aa			bra 	_SPCLoop
.95b6					_SpcExit:
.95b6	7a		ply				ply
.95b7	20 b6 9e	jsr $9eb6			jsr 	CheckRightBracket
.95ba	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/str.asm

.95bb					Unary_Str:
.95bb	fa		plx				plx
.95bc	20 10 97	jsr $9710			jsr 	EvaluateNumber  			; get number
.95bf	20 b6 9e	jsr $9eb6			jsr 	CheckRightBracket 			; closing bracket
.95c2	a9 05		lda #$05			lda 	#5 							; maximum decimals, from Basic816
.95c4	20 dd 95	jsr $95dd			jsr 	ConvertNumberToString 		; do the conversion.
.95c7	a9 21		lda #$21			lda		#33 						; create buffer
.95c9	20 b9 a6	jsr $a6b9			jsr 	StringTempAllocate 			; allocate memory
.95cc	da		phx				phx
.95cd	a2 00		ldx #$00			ldx 	#0
.95cf					_USCopy:
.95cf	bd 98 08	lda $0898,x			lda 	DecimalBuffer,x
.95d2	20 f7 a6	jsr $a6f7			jsr 	StringTempWrite
.95d5	e8		inx				inx
.95d6	bd 98 08	lda $0898,x			lda 	DecimalBuffer,x
.95d9	d0 f4		bne $95cf			bne 	_USCopy
.95db	fa		plx				plx
.95dc	60		rts				rts
.95dd					ConvertNumberToString:
.95dd	5a		phy				phy 								; save code position
.95de	8d 14 07	sta $0714			sta 	DecimalPlaces	 			; save number of DPs.
.95e1	9c 15 07	stz $0715			stz 	dbOffset 					; offset into decimal buffer = start.
.95e4	bd 00 06	lda $0600,x			lda 	NSStatus,x  				; is it -ve.
.95e7	10 0a		bpl $95f3			bpl 	_CNTSNotNegative
.95e9	29 7f		and #$7f			and 	#$7F 						; make +ve
.95eb	9d 00 06	sta $0600,x			sta 	NSStatus,x
.95ee	a9 2d		lda #$2d			lda 	#"-"
.95f0	20 59 96	jsr $9659			jsr 	WriteDecimalBuffer
.95f3					_CNTSNotNegative:
.95f3	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if decimal
.95f6	f0 15		beq $960d			beq 	_CNTSNotFloat
.95f8	e8		inx				inx 								; round up
.95f9	a9 01		lda #$01			lda 	#1
.95fb	20 be 97	jsr $97be			jsr 	NSMSetByte
.95fe	ca		dex				dex
.95ff	bd 28 06	lda $0628,x			lda		NSExponent,x
.9602	9d 29 06	sta $0629,x			sta 	NSExponent+1,x
.9605	a9 08		lda #$08			lda 	#NSTFloat
.9607	9d 01 06	sta $0601,x			sta 	NSStatus+1,x
.960a	20 7d a0	jsr $a07d			jsr 	FloatAdd
.960d					_CNTSNotFloat:
.960d	20 3b 96	jsr $963b			jsr 	MakePlusTwoString
.9610	20 5b a1	jsr $a15b			jsr 	FloatFractionalPart 		; get the fractional part
.9613	20 1f a2	jsr $a21f			jsr 	NSNormalise					; normalise , exit if zero
.9616	f0 21		beq $9639			beq 	_CNTSExit
.9618	a9 2e		lda #$2e			lda 	#"."
.961a	20 59 96	jsr $9659			jsr 	WriteDecimalBuffer 			; write decimal place
.961d					_CNTSDecimal:
.961d	ce 14 07	dec $0714			dec 	DecimalPlaces 				; done all the decimals
.9620	30 17		bmi $9639			bmi 	_CNTSExit
.9622	e8		inx				inx 								; x 10.0
.9623	a9 0a		lda #$0a			lda 	#10
.9625	20 be 97	jsr $97be			jsr 	NSMSetByte
.9628	a9 08		lda #$08			lda 	#NSTFloat
.962a	9d 00 06	sta $0600,x			sta 	NSStatus,x
.962d	ca		dex				dex
.962e	20 e8 a1	jsr $a1e8			jsr 	FloatMultiply
.9631	20 3b 96	jsr $963b			jsr 	MakePlusTwoString
.9634	20 5b a1	jsr $a15b			jsr 	FloatFractionalPart 		; get the fractional part
.9637	80 e4		bra $961d			bra 	_CNTSDecimal 				; keep going.
.9639					_CNTSExit:
.9639	7a		ply				ply
.963a	60		rts				rts
.963b					MakePlusTwoString:
.963b	da		phx				phx
.963c	20 93 97	jsr $9793			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.963f	e8		inx				inx 								; access it
.9640	e8		inx				inx
.9641	20 be a1	jsr $a1be			jsr 	FloatIntegerPart 			; make it an integer
.9644	a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.9646	20 27 a0	jsr $a027			jsr 	ConvertInt32
.9649	a2 00		ldx #$00			ldx	 	#0
.964b					_MPTSCopy:
.964b	bd 76 08	lda $0876,x			lda 	NumberBuffer,x
.964e	20 59 96	jsr $9659			jsr 	WriteDecimalBuffer
.9651	e8		inx				inx
.9652	bd 76 08	lda $0876,x			lda 	NumberBuffer,x
.9655	d0 f4		bne $964b			bne 	_MPTSCopy
.9657	fa		plx				plx
.9658	60		rts				rts
.9659					WriteDecimalBuffer:
.9659	da		phx				phx
.965a	ae 15 07	ldx $0715			ldx 	dbOffset
.965d	9d 98 08	sta $0898,x			sta 	DecimalBuffer,x
.9660	9e 99 08	stz $0899,x			stz 	DecimalBuffer+1,x
.9663	ee 15 07	inc $0715			inc 	dbOffset
.9666	fa		plx				plx
.9667	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/substring.asm

.9668					Unary_Left:
.9668	fa		plx				plx
.9669	18		clc				clc 								; only one parameter
.966a	20 df 96	jsr $96df			jsr 	SubstringInitial 			; set up.
.966d	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; Param #1 is the length
.9670	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.9673	9e 09 06	stz $0609,x			stz 	NSMantissa0+1,x 			; Start is zero.
.9676	80 2c		bra $96a4			bra 	SubstringMain
.9678					Unary_Right:
.9678	fa		plx				plx
.9679	18		clc				clc 								; only one parameter
.967a	20 df 96	jsr $96df			jsr 	SubstringInitial 			; set up.
.967d	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; length => param 2
.9680	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.9683	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; total length
.9686	fd 09 06	sbc $0609,x			sbc 	NSMantissa0+1,x 			; length - required.
.9689	b0 02		bcs $968d			bcs 	_URNotUnderflow
.968b	a9 00		lda #$00			lda 	#0 							; start from the beginning, as something like right$("AB",3)
.968d					_URNotUnderFlow:
.968d	9d 09 06	sta $0609,x			sta 	NSMantissa0+1,x 			; this is the start position
.9690	80 12		bra $96a4			bra 	SubStringMain
.9692					Unary_Mid:
.9692	fa		plx				plx
.9693	38		sec				sec 								; two parameters
.9694	20 df 96	jsr $96df			jsr 	SubstringInitial 			; set up.
.9697	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; first parameter is zero ?
.969a	f0 05		beq $96a1			beq 	_UMError
.969c	de 09 06	dec $0609,x			dec 	NSMantissa0+1,x				; reduce initial offset by 1 as MID$(a$,1..) is actually the first character
.969f	80 03		bra $96a4			bra 	SubStringMain
.96a1					_UMError:
.96a1	4c a7 a4	jmp $a4a7			jmp 	ArgumentError
.96a4					SubStringMain:
.96a4	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; is the initial offset >= the length
.96a7	dd 28 06	cmp $0628,x			cmp 	NSExponent,x
.96aa	b0 2d		bcs $96d9			bcs 	_SSMNull 					; if so, return an empty string.
.96ac	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; if copy count is zero
.96af	f0 28		beq $96d9			beq 	_SSMNull 					; return empty string.
.96b1	18		clc				clc 								; add the offset +1 to the address and
.96b2	bd 08 06	lda $0608,x			lda	 	NSMantissa0,x 				; put in zTemp
.96b5	7d 09 06	adc $0609,x			adc 	NSMantissa0+1,x
.96b8	85 36		sta $36				sta 	zTemp0
.96ba	bd 10 06	lda $0610,x			lda	 	NSMantissa1,x
.96bd	69 00		adc #$00			adc 	#0
.96bf	85 37		sta $37				sta 	zTemp0+1
.96c1					_SSMNoCarry:
.96c1	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; characters required.
.96c4	20 b9 a6	jsr $a6b9			jsr 	StringTempAllocate 			; allocate that many characters
.96c7	5a		phy				phy 								; save Y
.96c8	a0 00		ldy #$00			ldy 	#0 							; start copying in.
.96ca					_SSMCopy:
.96ca	b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next character
.96cc	f0 09		beq $96d7			beq 	_SSMEString 				; no more to copy
.96ce	20 f7 a6	jsr $a6f7			jsr 	StringTempWrite 			; and write it out.
.96d1	c8		iny				iny
.96d2	de 0a 06	dec $060a,x			dec 	NSMantissa0+2,x
.96d5	d0 f3		bne $96ca			bne 	_SSMCopy
.96d7					_SSMEString:
.96d7	7a		ply				ply
.96d8					_SSMExit:
.96d8	60		rts				rts
.96d9					_SSMNull:
.96d9	a9 00		lda #$00			lda 	#0
.96db	20 b9 a6	jsr $a6b9			jsr 	StringTempAllocate
.96de	60		rts				rts
.96df					SubstringInitial:
.96df	da		phx				phx 								; save initial stack position
.96e0	08		php				php 								; save carry on stack indicating 2 parameters
.96e1	20 1b 97	jsr $971b			jsr 	EvaluateString 				; get a string
.96e4	5a		phy				phy 								; calculate length to exponent.
.96e5	a0 ff		ldy #$ff			ldy 	#$FF
.96e7					_SIFindLength:
.96e7	c8		iny				iny
.96e8	b1 36		lda ($36),y			lda 	(zTemp0),y
.96ea	d0 fb		bne $96e7			bne 	_SIFindLength
.96ec	98		tya				tya
.96ed	9d 28 06	sta $0628,x			sta 	NSExponent,x
.96f0	7a		ply				ply
.96f1	e8		inx				inx
.96f2	20 be 9e	jsr $9ebe			jsr 	CheckComma 					; comma next
.96f5	20 54 97	jsr $9754			jsr 	Evaluate8BitInteger 		; get next parameter
.96f8	28		plp				plp 								; is it the last parameter ?
.96f9	90 07		bcc $9702			bcc 	_SSIExit 					; if so, exit.
.96fb	e8		inx				inx
.96fc	20 be 9e	jsr $9ebe			jsr 	CheckComma 					; comma next
.96ff	20 54 97	jsr $9754			jsr 	Evaluate8BitInteger 		; get last parameter
.9702					_SSIExit:
.9702	fa		plx				plx
.9703	20 b6 9e	jsr $9eb6			jsr 	CheckRightBracket 			; check closing bracket
.9706	60		rts				rts 								; exit

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/exprhelper.asm

.9707					EvaluateValue:
.9707	48		pha				pha
.9708	20 72 90	jsr $9072			jsr		EvaluateExpression 			; expression
.970b	20 87 91	jsr $9187			jsr 	Dereference					; derefernce it
.970e	68		pla				pla
.970f	60		rts				rts
.9710					EvaluateNumber:
.9710	20 07 97	jsr $9707			jsr 	EvaluateValue 				; get a value
.9713	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if string.
.9716	29 10		and #$10			and 	#NSBIsString
.9718	d0 16		bne $9730			bne 	HelperTypeError
.971a	60		rts				rts
.971b					EvaluateString:
.971b	20 07 97	jsr $9707			jsr 	EvaluateValue 				; get a value
.971e	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if string.
.9721	29 10		and #$10			and 	#NSBIsString
.9723	f0 0b		beq $9730			beq 	HelperTypeError
.9725					CopyAddressToTemp0:
.9725	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy address -> zTemp0
.9728	85 36		sta $36				sta 	zTemp0
.972a	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.972d	85 37		sta $37				sta 	zTemp0+1
.972f	60		rts				rts
.9730					HelperTypeError:
.9730	4c a2 a4	jmp $a4a2			jmp 	TypeError
.9733					EvaluateInteger:
.9733	20 10 97	jsr $9710			jsr 	EvaluateNumber
.9736	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check exponent is zero
.9739	d0 0a		bne $9745			bne 	HelperValueError 			; if not, it's a float.
.973b	60		rts				rts
.973c					EvaluateUnsignedInteger:
.973c	20 33 97	jsr $9733			jsr 	EvaluateInteger 			; check integer is +ve
.973f	bd 00 06	lda $0600,x			lda 	NSStatus,x
.9742	30 01		bmi $9745			bmi 	HelperValueError
.9744	60		rts				rts
.9745					HelperValueError:
.9745	4c a7 a4	jmp $a4a7			jmp 	ArgumentError
.9748					Evaluate16BitInteger:
.9748	20 3c 97	jsr $973c			jsr	 	EvaluateUnsignedInteger		; get integer
.974b	bd 20 06	lda $0620,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.974e	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.9751	d0 f2		bne $9745			bne 	HelperValueError
.9753	60		rts				rts
.9754					Evaluate8BitInteger:
.9754	20 3c 97	jsr $973c			jsr	 	EvaluateUnsignedInteger 	; get an integer
.9757	d0 ec		bne $9745			bne 	HelperValueError
.9759	bd 20 06	lda $0620,x			lda 	NSMantissa3,x	 			; bytes 1, 2 & 3 must be zero
.975c	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.975f	1d 10 06	ora $0610,x			ora 	NSMantissa1,x
.9762	d0 e1		bne $9745			bne 	HelperValueError
.9764	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.9767	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/mult8x8.asm

.a338					Multiply8x8:
.a338	4a		lsr a		  		lsr 	a  							; prime the carry bit for the loop
.a339	85 36		sta $36			  	sta 	zTemp0
.a33b	86 37		stx $37				stx 	zTemp0+1
.a33d	a9 00		lda #$00			lda 	#0
.a33f	a2 08		ldx #$08			ldx 	#8
.a341					_M88Loop:
.a341	90 03		bcc $a346			bcc 	_M88NoAdd
.a343	18		clc				clc
.a344	65 37		adc $37				adc 	zTemp0+1
.a346					_M88NoAdd:
.a346	6a		ror a				ror 	a
.a347	66 36		ror $36				ror 	zTemp0  					; pull another bit out for the next iteration
.a349	ca		dex				dex         						; inc/dec don't modify carry; only shifts and adds do
.a34a	d0 f5		bne $a341			bne 	_M88Loop
.a34c	85 37		sta $37				sta 	zTemp0+1 					; store high 8 bits.
.a34e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/utility.asm

.9768					NSMNegate:
.9768	bd 00 06	lda $0600,x			lda 	NSStatus,x
.976b	49 80		eor #$80			eor 	#NSBIsNegative
.976d	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9770	60		rts				rts
.9771					NSMNegateMantissa:
.9771	38		sec				sec
.9772	a9 00		lda #$00			lda 	#0
.9774	fd 08 06	sbc $0608,x			sbc 	NSMantissa0,x
.9777	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.977a	a9 00		lda #$00			lda 	#0
.977c	fd 10 06	sbc $0610,x			sbc 	NSMantissa1,x
.977f	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9782	a9 00		lda #$00			lda 	#0
.9784	fd 18 06	sbc $0618,x			sbc 	NSMantissa2,x
.9787	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.978a	a9 00		lda #$00			lda 	#0
.978c	fd 20 06	sbc $0620,x			sbc 	NSMantissa3,x
.978f	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.9792	60		rts				rts
.9793					NSMShiftUpTwo:
.9793	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.9796	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.9799	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.979c	9d 12 06	sta $0612,x			sta 	NSMantissa1+2,x
.979f	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.97a2	9d 1a 06	sta $061a,x			sta 	NSMantissa2+2,x
.97a5	bd 20 06	lda $0620,x			lda 	NSMantissa3,x
.97a8	9d 22 06	sta $0622,x			sta 	NSMantissa3+2,x
.97ab	bd 28 06	lda $0628,x			lda 	NSExponent,x
.97ae	9d 2a 06	sta $062a,x			sta 	NSExponent+2,x
.97b1	bd 00 06	lda $0600,x			lda 	NSStatus,x
.97b4	9d 02 06	sta $0602,x			sta 	NSStatus+2,x
.97b7	60		rts				rts
.97b8					NSMSetZeroMantissaOnly:
.97b8	a9 00		lda #$00			lda 	#0
.97ba	80 08		bra $97c4			bra 	NSMSetMantissa
.97bc					NSMSetZero:
.97bc	a9 00		lda #$00			lda 	#0
.97be					NSMSetByte:
.97be	9e 28 06	stz $0628,x			stz 	NSExponent,x 				; zero exponent, as integer.
.97c1	9e 00 06	stz $0600,x			stz 	NSStatus,x 					; status zero (integer)
.97c4					NSMSetMantissa:
.97c4	9d 08 06	sta $0608,x			sta 	NSMantissa0,x 				; mantissa
.97c7	9e 10 06	stz $0610,x			stz 	NSMantissa1,x
.97ca	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.97cd	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.97d0	60		rts				rts
.97d1					NSMShiftLeft:
.97d1	18		clc				clc
.97d2					NSMRotateLeft:
.97d2	3e 08 06	rol $0608,x			rol 	NSMantissa0,x
.97d5	3e 10 06	rol $0610,x			rol		NSMantissa1,x
.97d8	3e 18 06	rol $0618,x			rol		NSMantissa2,x
.97db	3e 20 06	rol $0620,x			rol		NSMantissa3,x
.97de	60		rts				rts
.97df					NSMShiftRight:
.97df	5e 20 06	lsr $0620,x			lsr 	NSMantissa3,x
.97e2	7e 18 06	ror $0618,x			ror		NSMantissa2,x
.97e5	7e 10 06	ror $0610,x			ror		NSMantissa1,x
.97e8	7e 08 06	ror $0608,x			ror		NSMantissa0,x
.97eb	60		rts				rts
.97ec					NSMIsZero:
.97ec	bd 20 06	lda $0620,x			lda 	NSMantissa3,x
.97ef	1d 18 06	ora $0618,x			ora		NSMantissa2,x
.97f2	1d 10 06	ora $0610,x			ora		NSMantissa1,x
.97f5	1d 08 06	ora $0608,x			ora		NSMantissa0,x
.97f8	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/asmcore.asm

.a34f					Assemble_ora:
.a34f	20 fc 81	jsr $81fc		jsr	AssembleGroup1
>a352	01					.byte $01
.a353					Assemble_and:
.a353	20 fc 81	jsr $81fc		jsr	AssembleGroup1
>a356	21					.byte $21
.a357					Assemble_eor:
.a357	20 fc 81	jsr $81fc		jsr	AssembleGroup1
>a35a	41					.byte $41
.a35b					Assemble_adc:
.a35b	20 fc 81	jsr $81fc		jsr	AssembleGroup1
>a35e	61					.byte $61
.a35f					Assemble_sta:
.a35f	20 fc 81	jsr $81fc		jsr	AssembleGroup1
>a362	81					.byte $81
.a363					Assemble_lda:
.a363	20 fc 81	jsr $81fc		jsr	AssembleGroup1
>a366	a1					.byte $a1
.a367					Assemble_cmp:
.a367	20 fc 81	jsr $81fc		jsr	AssembleGroup1
>a36a	c1					.byte $c1
.a36b					Assemble_sbc:
.a36b	20 fc 81	jsr $81fc		jsr	AssembleGroup1
>a36e	e1					.byte $e1
.a36f					Assemble_asl:
.a36f	20 03 82	jsr $8203		jsr	AssembleGroup2
>a372	02					.byte $02
>a373	75					.byte $75
.a374					Assemble_rol:
.a374	20 03 82	jsr $8203		jsr	AssembleGroup2
>a377	22					.byte $22
>a378	75					.byte $75
.a379					Assemble_lsr:
.a379	20 03 82	jsr $8203		jsr	AssembleGroup2
>a37c	42					.byte $42
>a37d	75					.byte $75
.a37e					Assemble_ror:
.a37e	20 03 82	jsr $8203		jsr	AssembleGroup2
>a381	62					.byte $62
>a382	75					.byte $75
.a383					Assemble_stx:
.a383	20 03 82	jsr $8203		jsr	AssembleGroup2
>a386	82					.byte $82
>a387	50					.byte $50
.a388					Assemble_ldx:
.a388	20 03 82	jsr $8203		jsr	AssembleGroup2
>a38b	a2					.byte $a2
>a38c	d0					.byte $d0
.a38d					Assemble_dec:
.a38d	20 03 82	jsr $8203		jsr	AssembleGroup2
>a390	c2					.byte $c2
>a391	55					.byte $55
.a392					Assemble_inc:
.a392	20 03 82	jsr $8203		jsr	AssembleGroup2
>a395	e2					.byte $e2
>a396	55					.byte $55
.a397					Assemble_stz:
.a397	20 03 82	jsr $8203		jsr	AssembleGroup2
>a39a	60					.byte $60
>a39b	44					.byte $44
.a39c					Assemble_bit:
.a39c	20 03 82	jsr $8203		jsr	AssembleGroup2
>a39f	20					.byte $20
>a3a0	55					.byte $55
.a3a1					Assemble_sty:
.a3a1	20 03 82	jsr $8203		jsr	AssembleGroup2
>a3a4	80					.byte $80
>a3a5	54					.byte $54
.a3a6					Assemble_ldy:
.a3a6	20 03 82	jsr $8203		jsr	AssembleGroup2
>a3a9	a0					.byte $a0
>a3aa	d5					.byte $d5
.a3ab					Assemble_cpy:
.a3ab	20 03 82	jsr $8203		jsr	AssembleGroup2
>a3ae	c0					.byte $c0
>a3af	d4					.byte $d4
.a3b0					Assemble_cpx:
.a3b0	20 03 82	jsr $8203		jsr	AssembleGroup2
>a3b3	e0					.byte $e0
>a3b4	d0					.byte $d0
.a3b5					Assemble_tsb:
.a3b5	20 03 82	jsr $8203		jsr	AssembleGroup2
>a3b8	00					.byte $00
>a3b9	50					.byte $50
.a3ba					Assemble_trb:
.a3ba	20 03 82	jsr $8203		jsr	AssembleGroup2
>a3bd	10					.byte $10
>a3be	50					.byte $50
.a3bf					Assemble_jsr:
.a3bf	20 03 82	jsr $8203		jsr	AssembleGroup2
>a3c2	14					.byte $14
>a3c3	10					.byte $10
.a3c4					Assemble_jmp:
.a3c4	20 03 82	jsr $8203		jsr	AssembleGroup2
>a3c7	40					.byte $40
>a3c8	10					.byte $10
.a3c9					Assemble_bpl:
.a3c9	20 54 82	jsr $8254		jsr	AssembleGroup3
>a3cc	10					.byte $10
.a3cd					Assemble_bmi:
.a3cd	20 54 82	jsr $8254		jsr	AssembleGroup3
>a3d0	30					.byte $30
.a3d1					Assemble_bvc:
.a3d1	20 54 82	jsr $8254		jsr	AssembleGroup3
>a3d4	50					.byte $50
.a3d5					Assemble_bvs:
.a3d5	20 54 82	jsr $8254		jsr	AssembleGroup3
>a3d8	70					.byte $70
.a3d9					Assemble_bcc:
.a3d9	20 54 82	jsr $8254		jsr	AssembleGroup3
>a3dc	90					.byte $90
.a3dd					Assemble_bcs:
.a3dd	20 54 82	jsr $8254		jsr	AssembleGroup3
>a3e0	b0					.byte $b0
.a3e1					Assemble_bne:
.a3e1	20 54 82	jsr $8254		jsr	AssembleGroup3
>a3e4	d0					.byte $d0
.a3e5					Assemble_beq:
.a3e5	20 54 82	jsr $8254		jsr	AssembleGroup3
>a3e8	f0					.byte $f0
.a3e9					Assemble_bra:
.a3e9	20 54 82	jsr $8254		jsr	AssembleGroup3
>a3ec	80					.byte $80
.a3ed					Assemble_brk:
.a3ed	20 8a 82	jsr $828a		jsr	AssembleGroup4
>a3f0	00					.byte $00
.a3f1					Assemble_php:
.a3f1	20 8a 82	jsr $828a		jsr	AssembleGroup4
>a3f4	08					.byte $08
.a3f5					Assemble_clc:
.a3f5	20 8a 82	jsr $828a		jsr	AssembleGroup4
>a3f8	18					.byte $18
.a3f9					Assemble_plp:
.a3f9	20 8a 82	jsr $828a		jsr	AssembleGroup4
>a3fc	28					.byte $28
.a3fd					Assemble_sec:
.a3fd	20 8a 82	jsr $828a		jsr	AssembleGroup4
>a400	38					.byte $38
.a401					Assemble_rti:
.a401	20 8a 82	jsr $828a		jsr	AssembleGroup4
>a404	40					.byte $40
.a405					Assemble_pha:
.a405	20 8a 82	jsr $828a		jsr	AssembleGroup4
>a408	48					.byte $48
.a409					Assemble_cli:
.a409	20 8a 82	jsr $828a		jsr	AssembleGroup4
>a40c	58					.byte $58
.a40d					Assemble_phy:
.a40d	20 8a 82	jsr $828a		jsr	AssembleGroup4
>a410	5a					.byte $5a
.a411					Assemble_rts:
.a411	20 8a 82	jsr $828a		jsr	AssembleGroup4
>a414	60					.byte $60
.a415					Assemble_pla:
.a415	20 8a 82	jsr $828a		jsr	AssembleGroup4
>a418	68					.byte $68
.a419					Assemble_sei:
.a419	20 8a 82	jsr $828a		jsr	AssembleGroup4
>a41c	78					.byte $78
.a41d					Assemble_ply:
.a41d	20 8a 82	jsr $828a		jsr	AssembleGroup4
>a420	7a					.byte $7a
.a421					Assemble_dey:
.a421	20 8a 82	jsr $828a		jsr	AssembleGroup4
>a424	88					.byte $88
.a425					Assemble_txa:
.a425	20 8a 82	jsr $828a		jsr	AssembleGroup4
>a428	8a					.byte $8a
.a429					Assemble_tya:
.a429	20 8a 82	jsr $828a		jsr	AssembleGroup4
>a42c	98					.byte $98
.a42d					Assemble_txs:
.a42d	20 8a 82	jsr $828a		jsr	AssembleGroup4
>a430	9a					.byte $9a
.a431					Assemble_tay:
.a431	20 8a 82	jsr $828a		jsr	AssembleGroup4
>a434	a8					.byte $a8
.a435					Assemble_tax:
.a435	20 8a 82	jsr $828a		jsr	AssembleGroup4
>a438	aa					.byte $aa
.a439					Assemble_clv:
.a439	20 8a 82	jsr $828a		jsr	AssembleGroup4
>a43c	b8					.byte $b8
.a43d					Assemble_tsx:
.a43d	20 8a 82	jsr $828a		jsr	AssembleGroup4
>a440	ba					.byte $ba
.a441					Assemble_iny:
.a441	20 8a 82	jsr $828a		jsr	AssembleGroup4
>a444	c8					.byte $c8
.a445					Assemble_dex:
.a445	20 8a 82	jsr $828a		jsr	AssembleGroup4
>a448	ca					.byte $ca
.a449					Assemble_cld:
.a449	20 8a 82	jsr $828a		jsr	AssembleGroup4
>a44c	d8					.byte $d8
.a44d					Assemble_phx:
.a44d	20 8a 82	jsr $828a		jsr	AssembleGroup4
>a450	da					.byte $da
.a451					Assemble_inx:
.a451	20 8a 82	jsr $828a		jsr	AssembleGroup4
>a454	e8					.byte $e8
.a455					Assemble_nop:
.a455	20 8a 82	jsr $828a		jsr	AssembleGroup4
>a458	ea					.byte $ea
.a459					Assemble_sed:
.a459	20 8a 82	jsr $828a		jsr	AssembleGroup4
>a45c	f8					.byte $f8
.a45d					Assemble_plx:
.a45d	20 8a 82	jsr $828a		jsr	AssembleGroup4
>a460	fa					.byte $fa

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/constants.asm

.a461					DecimalScalarTable:
>a461	66 66 66 66				.dword $66666666 ; 0.1
>a465	de					.byte $de
>a466	1f 85 eb 51				.dword $51eb851f ; 0.01
>a46a	db					.byte $db
>a46b	4c 37 89 41				.dword $4189374c ; 0.001
>a46f	d8					.byte $d8
>a470	ac 8b db 68				.dword $68db8bac ; 0.0001
>a474	d4					.byte $d4
>a475	24 d6 e2 53				.dword $53e2d624 ; 1e-05
>a479	d1					.byte $d1
>a47a	83 de 1b 43				.dword $431bde83 ; 1e-06
>a47e	ce					.byte $ce
>a47f	6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>a483	ca					.byte $ca
>a484	89 3b e6 55				.dword $55e63b89 ; 1e-08
>a488	c7					.byte $c7
>a489	a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>a48d	c4					.byte $c4
>a48e	67 7f f3 6d				.dword $6df37f67 ; 1e-10
>a492	c0					.byte $c0
>a493	86 ff f5 57				.dword $57f5ff86 ; 1e-11
>a497	bd					.byte $bd

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.asm

.a498					SyntaxError:
.a498	a9 02		lda #$02		lda	#2
.a49a	4c 69 8c	jmp $8c69		jmp	ErrorHandler
.a49d					RangeError:
.a49d	a9 04		lda #$04		lda	#4
.a49f	4c 69 8c	jmp $8c69		jmp	ErrorHandler
.a4a2					TypeError:
.a4a2	a9 05		lda #$05		lda	#5
.a4a4	4c 69 8c	jmp $8c69		jmp	ErrorHandler
.a4a7					ArgumentError:
.a4a7	a9 07		lda #$07		lda	#7
.a4a9	4c 69 8c	jmp $8c69		jmp	ErrorHandler
.a4ac					NotDoneError:
.a4ac	a9 0c		lda #$0c		lda	#12
.a4ae	4c 69 8c	jmp $8c69		jmp	ErrorHandler
.a4b1					ErrorText:
>a4b1	42 72 65 61 6b 00			.text	"Break",0
>a4b7	53 79 6e 74 61 78 20 65			.text	"Syntax error",0
>a4bf	72 72 6f 72 00
>a4c4	44 69 76 69 73 69 6f 6e			.text	"Division by zero",0
>a4cc	20 62 79 20 7a 65 72 6f 00
>a4d5	4f 75 74 20 6f 66 20 52			.text	"Out of Range",0
>a4dd	61 6e 67 65 00
>a4e2	54 79 70 65 20 6d 69 73			.text	"Type mismatch",0
>a4ea	6d 61 74 63 68 00
>a4f0	4f 75 74 20 6f 66 20 6d			.text	"Out of memory",0
>a4f8	65 6d 6f 72 79 00
>a4fe	49 6c 6c 65 67 61 6c 20			.text	"Illegal argument",0
>a506	61 72 67 75 6d 65 6e 74 00
>a50f	53 74 6f 70 00				.text	"Stop",0
>a514	53 74 72 69 6e 67 20 74			.text	"String too long",0
>a51c	6f 6f 20 6c 6f 6e 67 00
>a524	41 73 73 65 72 74 69 6f			.text	"Assertion failed",0
>a52c	6e 20 66 61 69 6c 65 64 00
>a535	4f 75 74 20 6f 66 20 64			.text	"Out of data",0
>a53d	61 74 61 00
>a541	55 6e 69 6d 70 6c 65 6d			.text	"Unimplemented",0
>a549	65 6e 74 65 64 00
>a54f	4e 6f 20 73 75 63 68 20			.text	"No such line number",0
>a557	6c 69 6e 65 20 6e 75 6d 62 65 72 00
>a563	52 65 74 75 72 6e 20 77			.text	"Return without Gosub",0
>a56b	69 74 68 6f 75 74 20 47 6f 73 75 62 00
>a578	55 6e 74 69 6c 20 77 69			.text	"Until without Repeat",0
>a580	74 68 6f 75 74 20 52 65 70 65 61 74 00
>a58d	57 65 6e 64 20 77 69 74			.text	"Wend without While",0
>a595	68 6f 75 74 20 57 68 69 6c 65 00
>a5a0	4e 65 78 74 20 77 69 74			.text	"Next without For",0
>a5a8	68 6f 75 74 20 46 6f 72 00
>a5b1	42 41 53 49 43 20 53 74			.text	"BASIC Stack full",0
>a5b9	61 63 6b 20 66 75 6c 6c 00
>a5c2	4f 70 65 6e 20 53 74 72			.text	"Open Structure",0
>a5ca	75 63 74 75 72 65 00
>a5d1	45 6e 64 50 72 6f 63 20			.text	"EndProc without call",0
>a5d9	77 69 74 68 6f 75 74 20 63 61 6c 6c 00
>a5e6	41 72 72 61 79 20 61 6c			.text	"Array already defined",0
>a5ee	72 65 61 64 79 20 64 65 66 69 6e 65 64 00
>a5fc	41 72 72 61 79 20 73 69			.text	"Array size",0
>a604	7a 65 00
>a607	42 61 64 20 61 72 72 61			.text	"Bad array index",0
>a60f	79 20 69 6e 64 65 78 00

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/timestamp.asm

>a617	42 75 69 6c 74 20 57 65			.text "Built Wednesday 05-Oct-2022. Build 117."
>a61f	64 6e 65 73 64 61 79 20 30 35 2d 4f 63 74 2d 32
>a62f	30 32 32 2e 20 42 75 69 6c 64 20 31 31 37 2e

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/frames.asm

.97f9					StackOpen:
.97f9	48		pha				pha 								; save frame byte
.97fa	29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.97fc	0a		asl a				asl 	a 							; claim twice this for storage
.97fd	49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.97ff	38		sec				sec 								; so basically subtracting from
.9800	65 34		adc $34				adc 	basicStack 	 				; basicStack
.9802	85 34		sta $34				sta 	basicStack
.9804	b0 08		bcs $980e			bcs 	_SONoBorrow
.9806	c6 35		dec $35				dec 	basicStack+1
.9808	a5 35		lda $35				lda 	basicStack+1 				; have we reached stack overflow
.980a	c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.980c	90 04		bcc $9812			bcc 	_SOMemory
.980e					_SONoBorrow:
.980e	68		pla				pla 								; get marker back and write at TOS
.980f	92 34		sta ($34)			sta 	(basicStack)
.9811	60		rts				rts
.9812					_SOMemory:
.9812							ERR_STACK
.9812					StackClose:
.9812	b2 34		lda ($34)			lda 	(basicStack) 				; get TOS marker
.9814	29 0f		and #$0f			and 	#$0F 						; bytes to add back
.9816	0a		asl a				asl 	a 							; claim twice this.
.9817	65 34		adc $34				adc 	basicStack 					; add to the stack pointer.
.9819	85 34		sta $34				sta 	basicStack
.981b	90 02		bcc $981f			bcc 	_SCExit
.981d	e6 35		inc $35				inc 	basicStack+1
.981f					_SCExit:
.981f	60		rts				rts
.9820					StackCheckFrame:
.9820	52 34		eor ($34)			eor 	(basicStack) 				; xor with toS marker
.9822	29 f0		and #$f0			and 	#$F0 						; check type bits
.9824	d0 01		bne $9827			bne 	_SCFError 					; different, we have structures mixed up
.9826	60		rts				rts
.9827					_SCFError:
.9827	8a		txa				txa 								; report error X
.9828	4c 69 8c	jmp $8c69			jmp 	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/location.asm

.982b					STKSaveCodePosition:
.982b	5a		phy				phy
.982c	98		tya				tya 								; save Y
.982d	a0 05		ldy #$05			ldy 	#5
.982f	91 34		sta ($34),y			sta 	(basicStack),y
.9831	88		dey				dey 								; save Code Pointer
.9832					_STKSaveLoop:
.9832	b9 2f 00	lda $002f,y			lda 	safePtr-1,y 				; allows us to access the pointer w/out issues.
.9835	91 34		sta ($34),y			sta 	(basicStack),y
.9837	88		dey				dey
.9838	d0 f8		bne $9832			bne 	_STKSaveLoop
.983a	7a		ply				ply
.983b	60		rts				rts
.983c					STKLoadCodePosition:
.983c	a0 01		ldy #$01			ldy 	#1 							; load code pointer back
.983e					_STKLoadLoop:
.983e	b1 34		lda ($34),y			lda 	(basicStack),y
.9840	99 2f 00	sta $002f,y			sta 	safePtr-1,y
.9843	c8		iny				iny
.9844	c0 05		cpy #$05			cpy 	#5
.9846	d0 f6		bne $983e			bne 	_STKLoadLoop
.9848	b1 34		lda ($34),y			lda 	(basicStack),y 				; get Y offset
.984a	a8		tay				tay
.984b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/setup.asm

.984c					StackReset:
.984c	a9 ff		lda #$ff			lda 	#((BasicStackBase+BasicStackSize-1) & $FF)
.984e	85 34		sta $34				sta 	0+basicStack
.9850	a9 0f		lda #$0f			lda 	#((BasicStackBase+BasicStackSize-1) >> 8)
.9852	85 35		sta $35				sta 	1+basicStack
.9854	a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.9856	92 34		sta ($34)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.9858	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/concrete.asm

.a63e					StringConcrete:
.a63e	5a		phy				phy 								; save position on stack
.a63f	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy target string to zTemp1
.a642	85 38		sta $38				sta 	zTemp1
.a644	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.a647	85 39		sta $39				sta 	zTemp1+1
.a649	a0 ff		ldy #$ff			ldy 	#$FF	 					; calculate string length
.a64b					_SALength:
.a64b	c8		iny				iny
.a64c	b1 38		lda ($38),y			lda 	(zTemp1),y
.a64e	d0 fb		bne $a64b			bne 	_SALength
.a650	c0 fd		cpy #$fd			cpy 	#253 						; string too long
.a652	b0 3f		bcs $a693			bcs 	_SALengthError
.a654	98		tya				tya 				 				; length of the new string
.a655	18		clc				clc
.a656	69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.a658	90 02		bcc $a65c			bcc 	_SAHaveLength
.a65a	a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.a65c					_SAHaveLength:
.a65c	48		pha				pha 								; save length.
.a65d	38		sec				sec
.a65e	49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.a660	6d 0e 07	adc $070e			adc 	StringMemory
.a663	8d 0e 07	sta $070e			sta 	StringMemory
.a666	85 3a		sta $3a				sta 	zTemp2 						; update storage address
.a668	9d 08 06	sta $0608,x			sta 	NSMantissa0,x 				; update mantissa address
.a66b	a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.a66d	6d 0f 07	adc $070f			adc 	StringMemory+1
.a670	8d 0f 07	sta $070f			sta 	StringMemory+1
.a673	85 3b		sta $3b				sta 	zTemp2+1
.a675	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.a678	68		pla				pla 								; save length-3 (chars allowed) in first byte
.a679	38		sec				sec
.a67a	e9 03		sbc #$03			sbc 	#3
.a67c	92 3a		sta ($3a)			sta 	(zTemp2)
.a67e	a9 00		lda #$00			lda 	#0 							; clear the status byte.
.a680	a0 01		ldy #$01			ldy 	#1
.a682	91 3a		sta ($3a),y			sta 	(zTemp2),y
.a684					_SACopyNewString:
.a684	a0 00		ldy #$00			ldy 	#0
.a686					_SACopyNSLoop:
.a686	b1 38		lda ($38),y			lda 	(zTemp1),y 					; get character
.a688	c8		iny				iny 								; write two on in string storage
.a689	c8		iny				iny
.a68a	91 3a		sta ($3a),y			sta 	(zTemp2),y
.a68c	88		dey				dey 								; this makes it one one.
.a68d	c9 00		cmp #$00			cmp 	#0 							; until EOS copied
.a68f	d0 f5		bne $a686			bne 	_SACopyNSLoop
.a691	7a		ply				ply
.a692	60		rts				rts
.a693					_SALengthError:
.a693	a9 09		lda #$09		lda	#9
.a695	4c 69 8c	jmp $8c69		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/stringalloc.asm

.a698					StringSystemInitialise:
.a698	a9 ff		lda #$ff			lda 	#((EndVariableSpace-1) & $FF)
.a69a	8d 0e 07	sta $070e			sta 	0+StringMemory
.a69d	a9 1f		lda #$1f			lda 	#((EndVariableSpace-1) >> 8)
.a69f	8d 0f 07	sta $070f			sta 	1+StringMemory
.a6a2	9c ff 1f	stz $1fff			stz 	EndVariableSpace-1 			; put a zero at the end, so know end of string memory.
.a6a5	60		rts				rts
.a6a6					StringSpaceInitialise:
.a6a6	a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.a6a8	8d 10 07	sta $0710			sta 	StringInitialised
.a6ab	ad 0e 07	lda $070e			lda 	StringMemory 				; allocate 256 bytes for one concreted string
.a6ae	8d 11 07	sta $0711			sta 	StringTempPointer
.a6b1	ad 0f 07	lda $070f			lda 	StringMemory+1
.a6b4	3a		dec a				dec 	a
.a6b5	8d 12 07	sta $0712			sta 	StringTempPointer+1
.a6b8	60		rts				rts
.a6b9					StringTempAllocate:
.a6b9	c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.a6bb	b0 35		bcs $a6f2			bcs 	_STALength
.a6bd	2c 10 07	bit $0710			bit 	StringInitialised 			; already initialised
.a6c0	30 05		bmi $a6c7			bmi 	_STAAllocate
.a6c2	48		pha				pha 								; save value to subtract.
.a6c3	20 a6 a6	jsr $a6a6			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.a6c6	68		pla				pla 								; restore it
.a6c7					_STAAllocate:
.a6c7	49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.a6c9	18		clc				clc  								; deliberate allows one more
.a6ca	6d 11 07	adc $0711			adc 	StringTempPointer 			; subtract from temp pointer
.a6cd	8d 11 07	sta $0711			sta 	StringTempPointer
.a6d0	9d 08 06	sta $0608,x			sta 	NSMantissa0,x 				; address in mantissa
.a6d3	85 3c		sta $3c				sta 	zsTemp 						; and zsTemp
.a6d5	ad 12 07	lda $0712			lda 	StringTempPointer+1
.a6d8	69 ff		adc #$ff			adc 	#$FF
.a6da	8d 12 07	sta $0712			sta 	StringTempPointer+1
.a6dd	85 3d		sta $3d				sta 	zsTemp+1
.a6df	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.a6e2	9e 18 06	stz $0618,x			stz 	NSMantissa2,x 				; set the typing data
.a6e5	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.a6e8	a9 10		lda #$10			lda 	#NSTString
.a6ea	9d 00 06	sta $0600,x			sta 	NSStatus,x
.a6ed	a9 00		lda #$00			lda 	#0 							; clear the target string
.a6ef	92 3c		sta ($3c)			sta 	(zsTemp)
.a6f1	60		rts				rts
.a6f2					_STALength:
.a6f2	a9 09		lda #$09		lda	#9
.a6f4	4c 69 8c	jmp $8c69		jmp	ErrorHandler
.a6f7					StringTempWrite:
.a6f7	48		pha				pha
.a6f8	92 3c		sta ($3c)			sta 	(zsTemp)
.a6fa	e6 3c		inc $3c				inc 	zsTemp
.a6fc	d0 02		bne $a700			bne 	_STWNoCarry
.a6fe	e6 3d		inc $3d				inc 	zsTemp+1
.a700					_STWNoCarry:
.a700	a9 00		lda #$00			lda 	#0
.a702	92 3c		sta ($3c)			sta 	(zsTemp)
.a704	68		pla				pla
.a705	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/backload.asm

.9859					BackloadProgram:
.9859	a2 ff		ldx #$ff			ldx 	#$FF
.985b	8e fa ff	stx $fffa			stx 	$FFFA 						; fast mode
.985e	20 89 98	jsr $9889			jsr 	BLReadByte
.9861	30 1f		bmi $9882			bmi 	_BPExit
.9863					_BPCopy:
.9863	e8		inx				inx  								; copy byte in
.9864	9d 25 08	sta $0825,x			sta 	lineBuffer,x
.9867	9e 26 08	stz $0826,x			stz 	lineBuffer+1,x
.986a	20 89 98	jsr $9889			jsr 	BLReadByte 					; read next byte
.986d	30 0a		bmi $9879			bmi 	_BPEndLine 					; -ve = EOL
.986f	c9 09		cmp #$09			cmp 	#9 							; handle TAB
.9871	d0 02		bne $9875			bne 	_BPNotTab
.9873	a9 20		lda #$20			lda 	#' '
.9875					_BPNotTab:
.9875	c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.9877	b0 ea		bcs $9863			bcs 	_BPCopy
.9879					_BPEndLine:
.9879	20 a4 9b	jsr $9ba4			jsr 	TokeniseLine 				; tokenise the line.
.987c	38		sec				sec 								; append not insert
.987d	20 87 a7	jsr $a787			jsr 	MemoryInsertLine 			; append to current program
.9880	80 d7		bra $9859			bra 	BackloadProgram
.9882					_BPExit:
.9882	9c fa ff	stz $fffa			stz 	$FFFA 						; clear fast mode
.9885	20 d6 84	jsr $84d6			jsr 	ClearCommand 				; clear variables etc.
.9888	60		rts				rts
.9889					BLReadByte:
.9889					_BLLoad:
.9889	ad 00 30	lda $3000			lda 	$3000 						; hardcoded in the makefile.
.988c	ee 8a 98	inc $988a			inc 	_BLLoad+1
.988f	d0 03		bne $9894			bne 	_BLNoCarry
.9891	ee 8b 98	inc $988b			inc 	_BLLoad+2
.9894					_BLNoCarry:
.9894	c9 00		cmp #$00			cmp 	#0
.9896	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/searchtokens.asm

.9897					TokeniseSearchTable:
.9897	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token.
.9899	85 36		sta $36				sta 	zTemp0
.989b	a0 00		ldy #$00			ldy 	#0
.989d	a9 80		lda #$80			lda 	#$80 						; token #
.989f	85 38		sta $38				sta 	zTemp1
.98a1					_TSTLoop:
.98a1	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.98a3	30 49		bmi $98ee			bmi 	_TSTFail 					; -ve = end of table
.98a5	f0 2e		beq $98d5			beq 	_TSTNext 					; zero, check next it's a dummy
.98a7	c8		iny				iny 								; get the hash
.98a8	b1 36		lda ($36),y			lda 	(zTemp0),y
.98aa	88		dey				dey
.98ab	cd 03 07	cmp $0703			cmp 	identHash 					; check they match, if not go to next
.98ae	d0 25		bne $98d5			bne 	_TSTNext
.98b0	ad 02 07	lda $0702			lda 	identTypeEnd 				; length of identifier
.98b3	38		sec				sec
.98b4	ed 00 07	sbc $0700			sbc 	identStart
.98b7	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; no match, then return.
.98b9	d0 1a		bne $98d5			bne 	_TSTNext
.98bb	5a		phy				phy 								; save Y , we might fail
.98bc	c8		iny				iny 								; point to text
.98bd	c8		iny				iny
.98be	ae 00 07	ldx $0700			ldx 	identStart 					; offset in line buffer in X
.98c1					_TSTCompareName:
.98c1	bd 25 08	lda $0825,x			lda 	lineBuffer,x 				; compare text.
.98c4	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.98c6	d0 0c		bne $98d4			bne 	_TSTNextPullY 				; fail, pullY and do next
.98c8	e8		inx				inx
.98c9	c8		iny				iny
.98ca	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; complete match.
.98cd	d0 f2		bne $98c1			bne 	_TSTCompareName
.98cf	7a		ply				ply 								; throw Y
.98d0	a5 38		lda $38				lda 	zTemp1 						; get token #
.98d2	38		sec				sec 								; return with CS = passed.
.98d3	60		rts				rts
.98d4					_TSTNextPullY:
.98d4	7a		ply				ply 								; restore current, fall through.
.98d5					_TSTNext:
.98d5	e6 38		inc $38				inc 	zTemp1 						; token counter
.98d7	98		tya				tya
.98d8	18		clc				clc
.98d9	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.98db	1a		inc a				inc 	a 							; +1
.98dc	1a		inc a				inc 	a 							; +2
.98dd	a8		tay				tay
.98de	10 c1		bpl $98a1			bpl 	_TSTLoop 					; if Y < $80 loop back
.98e0	98		tya				tya 								; add Y to zTemp0 and reset Y
.98e1	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.98e3	18		clc				clc  								; but have tables > 255 bytes
.98e4	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.98e6	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.98e8	90 b7		bcc $98a1			bcc 	_TSTLoop
.98ea	e6 37		inc $37				inc 	zTemp0+1
.98ec	80 b3		bra $98a1			bra 	_TSTLoop
.98ee					_TSTFail:
.98ee	18		clc				clc
.98ef	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/tokenise.asm


;******  Processing file: ./common/tokeniser/../generated/kwdtext.dat

.98f0					KeywordSet0:
>98f0	00 65					.text	0,$65,""               ; $80 !0:EOF
>98f2	00 58					.text	0,$58,""               ; $81 !1:SH1
>98f4	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>98f6	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $83 ABS(
>98fc	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $84 ALLOC(
>9904	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $85 ASC(
>990a	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $86 CHR$(
>9911	05 6b 46 41 4c 53 45			.text	5,$6b,"FALSE"          ; $87 FALSE
>9918	05 44 46 52 41 43 28			.text	5,$44,"FRAC("          ; $88 FRAC(
>991f	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $89 INT(
>9925	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $8a ISVAL(
>992d	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $8b LEFT$(
>9935	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $8c LEN(
>993b	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $8d MID$(
>9942	04 19 4e 4f 54 28			.text	4,$19,"NOT("           ; $8e NOT(
>9948	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $8f RIGHT$(
>9950	28
>9951	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $90 RND(
>9957	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $91 SGN(
>995d	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $92 SPC(
>9963	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $93 STR$(
>996a	04 40 54 52 55 45			.text	4,$40,"TRUE"           ; $94 TRUE
>9970	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $95 VAL(
>9976	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $96 FOR
>997b	02 8f 49 46				.text	2,$8f,"IF"             ; $97 IF
>997f	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $98 PROC
>9985	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $99 REPEAT
>998d	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $9a WHILE
>9994	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $9b ENDIF
>999b	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $9c ENDPROC
>99a3	43
>99a4	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $9d NEXT
>99aa	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $9e THEN
>99b0	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $9f UNTIL
>99b7	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $a0 WEND
>99bd	04 1c 43 41 4c 4c			.text	4,$1c,"CALL"           ; $a1 CALL
>99c3	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $a2 CLS
>99c8	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $a3 DATA
>99ce	03 da 44 49 4d				.text	3,$da,"DIM"            ; $a4 DIM
>99d3	06 db 44 4f 57 4e 54 4f			.text	6,$db,"DOWNTO"         ; $a5 DOWNTO
>99db	04 29 45 4c 53 45			.text	4,$29,"ELSE"           ; $a6 ELSE
>99e1	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $a7 GOSUB
>99e8	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $a8 GOTO
>99ee	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $a9 LET
>99f3	05 6b 4c 4f 43 41 4c			.text	5,$6b,"LOCAL"          ; $aa LOCAL
>99fa	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $ab PRINT
>9a01	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $ac READ
>9a07	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $ad REM
>9a0c	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $ae RETURN
>9a14	02 a3 54 4f				.text	2,$a3,"TO"             ; $af TO
>9a18	ff					.text	$FF
.9a19					KeywordSet1:
>9a19	00 65					.text	0,$65,""               ; $80 !0:EOF
>9a1b	00 58					.text	0,$58,""               ; $81 !1:SH1
>9a1d	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>9a1f	08 4c 41 53 53 45 4d 42			.text	8,$4c,"ASSEMBLE"       ; $83 ASSEMBLE
>9a27	4c 45
>9a29	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $84 ASSERT
>9a31	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $85 CLEAR
>9a38	03 d7 45 4e 44				.text	3,$d7,"END"            ; $86 END
>9a3d	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $87 LIST
>9a43	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $88 NEW
>9a48	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $89 RESTORE
>9a50	45
>9a51	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $8a RUN
>9a56	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $8b STOP
>9a5c	ff					.text	$FF
.9a5d					KeywordSet2:
>9a5d	00 65					.text	0,$65,""               ; $80 !0:EOF
>9a5f	00 58					.text	0,$58,""               ; $81 !1:SH1
>9a61	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>9a63	03 c8 41 44 43				.text	3,$c8,"ADC"            ; $83 ADC
>9a68	03 d3 41 4e 44				.text	3,$d3,"AND"            ; $84 AND
>9a6d	03 e0 41 53 4c				.text	3,$e0,"ASL"            ; $85 ASL
>9a72	03 c8 42 43 43				.text	3,$c8,"BCC"            ; $86 BCC
>9a77	03 d8 42 43 53				.text	3,$d8,"BCS"            ; $87 BCS
>9a7c	03 d8 42 45 51				.text	3,$d8,"BEQ"            ; $88 BEQ
>9a81	03 df 42 49 54				.text	3,$df,"BIT"            ; $89 BIT
>9a86	03 d8 42 4d 49				.text	3,$d8,"BMI"            ; $8a BMI
>9a8b	03 d5 42 4e 45				.text	3,$d5,"BNE"            ; $8b BNE
>9a90	03 de 42 50 4c				.text	3,$de,"BPL"            ; $8c BPL
>9a95	03 d5 42 52 41				.text	3,$d5,"BRA"            ; $8d BRA
>9a9a	03 df 42 52 4b				.text	3,$df,"BRK"            ; $8e BRK
>9a9f	03 db 42 56 43				.text	3,$db,"BVC"            ; $8f BVC
>9aa4	03 eb 42 56 53				.text	3,$eb,"BVS"            ; $90 BVS
>9aa9	03 d2 43 4c 43				.text	3,$d2,"CLC"            ; $91 CLC
>9aae	03 d3 43 4c 44				.text	3,$d3,"CLD"            ; $92 CLD
>9ab3	03 d8 43 4c 49				.text	3,$d8,"CLI"            ; $93 CLI
>9ab8	03 e5 43 4c 56				.text	3,$e5,"CLV"            ; $94 CLV
>9abd	03 e0 43 4d 50				.text	3,$e0,"CMP"            ; $95 CMP
>9ac2	03 eb 43 50 58				.text	3,$eb,"CPX"            ; $96 CPX
>9ac7	03 ec 43 50 59				.text	3,$ec,"CPY"            ; $97 CPY
>9acc	03 cc 44 45 43				.text	3,$cc,"DEC"            ; $98 DEC
>9ad1	03 e1 44 45 58				.text	3,$e1,"DEX"            ; $99 DEX
>9ad6	03 e2 44 45 59				.text	3,$e2,"DEY"            ; $9a DEY
>9adb	03 e6 45 4f 52				.text	3,$e6,"EOR"            ; $9b EOR
>9ae0	03 da 49 4e 43				.text	3,$da,"INC"            ; $9c INC
>9ae5	03 ef 49 4e 58				.text	3,$ef,"INX"            ; $9d INX
>9aea	03 f0 49 4e 59				.text	3,$f0,"INY"            ; $9e INY
>9aef	03 e7 4a 4d 50				.text	3,$e7,"JMP"            ; $9f JMP
>9af4	03 ef 4a 53 52				.text	3,$ef,"JSR"            ; $a0 JSR
>9af9	03 d1 4c 44 41				.text	3,$d1,"LDA"            ; $a1 LDA
>9afe	03 e8 4c 44 58				.text	3,$e8,"LDX"            ; $a2 LDX
>9b03	03 e9 4c 44 59				.text	3,$e9,"LDY"            ; $a3 LDY
>9b08	03 f1 4c 53 52				.text	3,$f1,"LSR"            ; $a4 LSR
>9b0d	03 ed 4e 4f 50				.text	3,$ed,"NOP"            ; $a5 NOP
>9b12	03 e2 4f 52 41				.text	3,$e2,"ORA"            ; $a6 ORA
>9b17	03 d9 50 48 41				.text	3,$d9,"PHA"            ; $a7 PHA
>9b1c	03 e8 50 48 50				.text	3,$e8,"PHP"            ; $a8 PHP
>9b21	03 f0 50 48 58				.text	3,$f0,"PHX"            ; $a9 PHX
>9b26	03 f1 50 48 59				.text	3,$f1,"PHY"            ; $aa PHY
>9b2b	03 dd 50 4c 41				.text	3,$dd,"PLA"            ; $ab PLA
>9b30	03 ec 50 4c 50				.text	3,$ec,"PLP"            ; $ac PLP
>9b35	03 f4 50 4c 58				.text	3,$f4,"PLX"            ; $ad PLX
>9b3a	03 f5 50 4c 59				.text	3,$f5,"PLY"            ; $ae PLY
>9b3f	03 ed 52 4f 4c				.text	3,$ed,"ROL"            ; $af ROL
>9b44	03 f3 52 4f 52				.text	3,$f3,"ROR"            ; $b0 ROR
>9b49	03 ef 52 54 49				.text	3,$ef,"RTI"            ; $b1 RTI
>9b4e	03 f9 52 54 53				.text	3,$f9,"RTS"            ; $b2 RTS
>9b53	03 d8 53 42 43				.text	3,$d8,"SBC"            ; $b3 SBC
>9b58	03 db 53 45 43				.text	3,$db,"SEC"            ; $b4 SEC
>9b5d	03 dc 53 45 44				.text	3,$dc,"SED"            ; $b5 SED
>9b62	03 e1 53 45 49				.text	3,$e1,"SEI"            ; $b6 SEI
>9b67	03 e8 53 54 41				.text	3,$e8,"STA"            ; $b7 STA
>9b6c	03 ff 53 54 58				.text	3,$ff,"STX"            ; $b8 STX
>9b71	03 00 53 54 59				.text	3,$00,"STY"            ; $b9 STY
>9b76	03 01 53 54 5a				.text	3,$01,"STZ"            ; $ba STZ
>9b7b	03 ed 54 41 58				.text	3,$ed,"TAX"            ; $bb TAX
>9b80	03 ee 54 41 59				.text	3,$ee,"TAY"            ; $bc TAY
>9b85	03 e8 54 52 42				.text	3,$e8,"TRB"            ; $bd TRB
>9b8a	03 e9 54 53 42				.text	3,$e9,"TSB"            ; $be TSB
>9b8f	03 ff 54 53 58				.text	3,$ff,"TSX"            ; $bf TSX
>9b94	03 ed 54 58 41				.text	3,$ed,"TXA"            ; $c0 TXA
>9b99	03 ff 54 58 53				.text	3,$ff,"TXS"            ; $c1 TXS
>9b9e	03 ee 54 59 41				.text	3,$ee,"TYA"            ; $c2 TYA
>9ba3	ff					.text	$FF

;******  Return to file: ./common/tokeniser/tokenise.asm

.9ba4					TokeniseLine:
.9ba4	20 2c 9d	jsr $9d2c			jsr 	FixLineBufferCase 			; fix line case
.9ba7	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.9ba9	8d 25 07	sta $0725			sta 	tokenOffset
.9bac	9c 26 07	stz $0726			stz 	tokenLineNumber
.9baf	9c 27 07	stz $0727			stz 	tokenLineNumber+1
.9bb2	a2 ff		ldx #$ff			ldx 	#$FF
.9bb4					_TKFindFirst:
.9bb4	e8		inx				inx
.9bb5	bd 25 08	lda $0825,x			lda 	lineBuffer,x
.9bb8	f0 79		beq $9c33			beq 	_TKExit
.9bba	c9 20		cmp #$20			cmp 	#' '
.9bbc	90 f6		bcc $9bb4			bcc 	_TKFindFirst
.9bbe	c9 30		cmp #$30			cmp 	#'0'
.9bc0	90 07		bcc $9bc9			bcc 	_TKNoLineNumber
.9bc2	c9 3a		cmp #$3a			cmp 	#'9'+1
.9bc4	b0 03		bcs $9bc9			bcs 	_TKNoLineNumber
.9bc6	20 56 9d	jsr $9d56			jsr 	TokeniseExtractLineNumber
.9bc9					_TKNoLineNumber:
.9bc9					_TKTokeniseLoop:
.9bc9	bd 25 08	lda $0825,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.9bcc	f0 65		beq $9c33			beq 	_TKExit
.9bce	e8		inx				inx
.9bcf	c9 20		cmp #$20			cmp 	#' '
.9bd1	f0 f6		beq $9bc9			beq 	_TKTokeniseLoop 			; keep looping if space found.
.9bd3	ca		dex				dex 								; undo last get, A contains character, X is position.
.9bd4	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.9bd6	f0 61		beq $9c39			beq 	_TKTokeniseIdentifier
.9bd8	c9 41		cmp #$41			cmp 	#'A'
.9bda	90 04		bcc $9be0			bcc 	_TKTokenisePunctuation
.9bdc	c9 5b		cmp #$5b			cmp 	#'Z'+1
.9bde	90 59		bcc $9c39			bcc 	_TKTokeniseIdentifier
.9be0					_TKTokenisePunctuation:
.9be0	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.9be2	f0 27		beq $9c0b			beq 	_TKString
.9be4	c9 24		cmp #$24			cmp 	#'$'						; hexadecimal constant (# only appears at end of identifiers)
.9be6	f0 28		beq $9c10			beq 	_TKHexConstant
.9be8	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers.
.9bea	f0 29		beq $9c15			beq 	_TKCheckDouble
.9bec	c9 3e		cmp #$3e			cmp 	#'>'
.9bee	f0 25		beq $9c15			beq 	_TKCheckDouble
.9bf0					_TKStandardPunctuation:
.9bf0	bd 25 08	lda $0825,x			lda 	lineBuffer,x 				; get it back.
.9bf3	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.9bf5	90 0e		bcc $9c05			bcc 	_TKNoShift
.9bf7	48		pha				pha 								; save
.9bf8	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.9bfa	85 36		sta $36				sta 	zTemp0
.9bfc	68		pla				pla
.9bfd	29 20		and #$20			and 	#32 						; bit 5
.9bff	4a		lsr a				lsr 	a 							; shift into bit 3
.9c00	4a		lsr a				lsr 	a
.9c01	05 36		ora $36				ora 	zTemp0
.9c03	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.9c05					_TKNoShift:
.9c05	20 9b 9d	jsr $9d9b			jsr 	TokeniseWriteByte 			; write the punctuation character
.9c08	e8		inx				inx 								; consume the character
.9c09	80 be		bra $9bc9			bra 	_TKTokeniseLoop 			; and loop round again.
.9c0b					_TKString:
.9c0b	20 bb 9c	jsr $9cbb			jsr 	TokeniseString
.9c0e	80 b9		bra $9bc9			bra 	_TKTokeniseLoop
.9c10					_TKHexConstant:
.9c10	20 f6 9c	jsr $9cf6			jsr 	TokeniseHexConstant
.9c13	80 b4		bra $9bc9			bra 	_TKTokeniseLoop
.9c15					_TKCheckDouble:
.9c15	bd 26 08	lda $0826,x			lda 	lineBuffer+1,x 				; get next character
.9c18	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.9c1a	90 d4		bcc $9bf0			bcc 	_TKStandardPunctuation
.9c1c	c9 3f		cmp #$3f			cmp 	#'>'+1
.9c1e	b0 d0		bcs $9bf0			bcs 	_TKStandardPunctuation
.9c20	bd 25 08	lda $0825,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.9c23	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.9c25	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.9c26	7d 26 08	adc $0826,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.9c29	38		sec				sec
.9c2a	e9 3c		sbc #$3c			sbc 	#'<'
.9c2c	20 9b 9d	jsr $9d9b			jsr 	TokeniseWriteByte 			; this is in the range 0-7
.9c2f	e8		inx				inx 								; consume both
.9c30	e8		inx				inx
.9c31	80 96		bra $9bc9			bra 	_TKTokeniseLoop
.9c33	a9 80		lda #$80	_TKExit:lda 	#KWC_EOL 					; write end of line byte
.9c35	20 9b 9d	jsr $9d9b			jsr 	TokeniseWriteByte
.9c38	60		rts				rts
.9c39					_TKTokeniseIdentifier:
.9c39	8e 00 07	stx $0700			stx 	identStart 					; save start
.9c3c	9c 04 07	stz $0704			stz 	identTypeByte 				; zero the type byte
.9c3f					_TKCheckLoop:
.9c3f	e8		inx				inx 								; look at next, we know first is identifier.
.9c40	bd 25 08	lda $0825,x			lda  	lineBuffer,x
.9c43	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.9c45	f0 f8		beq $9c3f			beq 	_TKCheckLoop
.9c47	c9 30		cmp #$30			cmp	 	#"0"
.9c49	90 0c		bcc $9c57			bcc 	_TKEndIdentifier
.9c4b	c9 3a		cmp #$3a			cmp 	#"9"+1
.9c4d	90 f0		bcc $9c3f			bcc 	_TKCheckLoop
.9c4f	c9 41		cmp #$41			cmp	 	#"A"
.9c51	90 04		bcc $9c57			bcc 	_TKEndIdentifier
.9c53	c9 5b		cmp #$5b			cmp 	#"Z"+1
.9c55	90 e8		bcc $9c3f			bcc 	_TKCheckLoop
.9c57					_TKEndIdentifier:
.9c57	8e 01 07	stx $0701			stx 	identTypeStart 				; save start of type text (if any !)
.9c5a	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.9c5c	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.9c5e	f0 06		beq $9c66			beq 	_TKHasTypeCharacter
.9c60	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.9c62	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.9c64	d0 07		bne $9c6d			bne 	_TKNoTypeCharacter
.9c66					_TKHasTypeCharacter:
.9c66	8c 04 07	sty $0704			sty 	identTypeByte 				; has # or $, save the type
.9c69	e8		inx				inx 								; read next
.9c6a	bd 25 08	lda $0825,x			lda 	lineBuffer,x
.9c6d					_TKNoTypeCharacter:
.9c6d	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.9c6f	d0 09		bne $9c7a			bne 	_TKNoArray
.9c71	e8		inx				inx 								; skip the (
.9c72	ad 04 07	lda $0704			lda 	identTypeByte 				; set bit 2 (e.g. array)
.9c75	09 04		ora #$04			ora 	#$04
.9c77	8d 04 07	sta $0704			sta 	identTypeByte
.9c7a					_TKNoArray:
.9c7a	8e 02 07	stx $0702			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.9c7d	20 17 9d	jsr $9d17			jsr 	TokeniseCalculateHash 		; calculate the has for those tokens
.9c80	a0 98		ldy #$98			ldy 	#(KeywordSet0) >> 8
.9c82	a9 f0		lda #$f0			lda 	#(KeywordSet0) & $FF
.9c84	20 97 98	jsr $9897			jsr 	TokeniseSearchTable
.9c87	a2 00		ldx #$00			ldx 	#0
.9c89	b0 1f		bcs $9caa			bcs 	_TKFoundToken
.9c8b	a0 9a		ldy #$9a			ldy 	#(KeywordSet1) >> 8
.9c8d	a9 19		lda #$19			lda 	#(KeywordSet1) & $FF
.9c8f	20 97 98	jsr $9897			jsr 	TokeniseSearchTable
.9c92	a2 81		ldx #$81			ldx 	#$81
.9c94	b0 14		bcs $9caa			bcs 	_TKFoundToken
.9c96	a0 9a		ldy #$9a			ldy 	#(KeywordSet2) >> 8
.9c98	a9 5d		lda #$5d			lda 	#(KeywordSet2) & $FF
.9c9a	20 97 98	jsr $9897			jsr 	TokeniseSearchTable
.9c9d	a2 82		ldx #$82			ldx 	#$82
.9c9f	b0 09		bcs $9caa			bcs 	_TKFoundToken
.9ca1	20 a7 9d	jsr $9da7			jsr 	CheckCreateVariableRecord 	; failed all, it's a variable, create record if does not exist.
.9ca4	ae 02 07	ldx $0702			ldx 	identTypeEnd 				; X points to following byte
.9ca7	4c c9 9b	jmp $9bc9			jmp 	_TKTokeniseLoop 			; and go round again.
.9caa					_TKFoundToken:
.9caa	48		pha				pha 								; save token
.9cab	8a		txa				txa 								; shift in X, is there one ?
.9cac	f0 03		beq $9cb1			beq 	_TKNoTShift
.9cae	20 9b 9d	jsr $9d9b			jsr 	TokeniseWriteByte 			; if so, write it out
.9cb1					_TKNoTShift:
.9cb1	68		pla				pla 								; restore and write token
.9cb2	20 9b 9d	jsr $9d9b			jsr 	TokeniseWriteByte
.9cb5	ae 02 07	ldx $0702			ldx 	identTypeEnd 				; X points to following byte
.9cb8	4c c9 9b	jmp $9bc9			jmp 	_TKTokeniseLoop 			; and go round again.
.9cbb					TokeniseString:
.9cbb	a9 ff		lda #$ff			lda 	#KWC_STRING 				; string token.
.9cbd	20 9b 9d	jsr $9d9b			jsr 	TokeniseWriteByte
.9cc0	e8		inx				inx									; start of quoted string.
.9cc1	da		phx				phx 								; push start of string on top
.9cc2	ca		dex				dex
.9cc3					_TSFindEnd:
.9cc3	e8		inx				inx
.9cc4	bd 25 08	lda $0825,x			lda 	lineBuffer,x 				; next character
.9cc7	f0 04		beq $9ccd			beq 	_TSEndOfString
.9cc9	c9 22		cmp #$22			cmp 	#'"'
.9ccb	d0 f6		bne $9cc3			bne 	_TSFindEnd
.9ccd					_TSEndOfString:
.9ccd	7a		ply				ply  								; so now Y is first character, X is character after end.
.9cce	48		pha				pha 								; save terminating character
.9ccf	20 d7 9c	jsr $9cd7			jsr 	TOWriteBlockXY 				; write X to Y as a data block
.9cd2	68		pla				pla 								; terminating character
.9cd3	f0 01		beq $9cd6			beq 	_TSNotQuote					; if it wasn't EOS skip it
.9cd5	e8		inx				inx
.9cd6					_TSNotQuote:
.9cd6	60		rts				rts
.9cd7					TOWriteBlockXY:
.9cd7	86 36		stx $36				stx 	zTemp0 						; write end character
.9cd9	98		tya				tya
.9cda	49 ff		eor #$ff			eor 	#$FF
.9cdc	38		sec				sec
.9cdd	65 36		adc $36				adc 	zTemp0
.9cdf	1a		inc a				inc 	a 							; one extra for NULL
.9ce0	20 9b 9d	jsr $9d9b			jsr 	TokeniseWriteByte
.9ce3					_TOBlockLoop:
.9ce3	c4 36		cpy $36				cpy 	zTemp0
.9ce5	f0 09		beq $9cf0			beq 	_TOBlockExit
.9ce7	b9 25 08	lda $0825,y			lda 	lineBuffer,y
.9cea	20 9b 9d	jsr $9d9b			jsr 	TokeniseWriteByte
.9ced	c8		iny				iny
.9cee	80 f3		bra $9ce3			bra 	_TOBlockLoop
.9cf0					_TOBlockExit:
.9cf0	a9 00		lda #$00			lda 	#0
.9cf2	20 9b 9d	jsr $9d9b			jsr 	TokeniseWriteByte
.9cf5	60		rts				rts
.9cf6					TokeniseHexConstant:
.9cf6	a9 fe		lda #$fe			lda 	#KWC_HEXCONST 				; hex constant token.
.9cf8	20 9b 9d	jsr $9d9b			jsr 	TokeniseWriteByte
.9cfb	e8		inx				inx									; start of quoted string.
.9cfc	da		phx				phx 								; push start of constant on top
.9cfd	ca		dex				dex
.9cfe					_THFindLoop:
.9cfe	e8		inx				inx
.9cff	bd 25 08	lda $0825,x			lda 	lineBuffer,x
.9d02	c9 30		cmp #$30			cmp 	#"0"
.9d04	90 0c		bcc $9d12			bcc 	_THFoundEnd
.9d06	c9 3a		cmp #$3a			cmp 	#"9"+1
.9d08	90 f4		bcc $9cfe			bcc 	_THFindLoop
.9d0a	c9 41		cmp #$41			cmp 	#"A"
.9d0c	90 04		bcc $9d12			bcc 	_THFoundEnd
.9d0e	c9 47		cmp #$47			cmp 	#"F"+1
.9d10	90 ec		bcc $9cfe			bcc 	_THFindLoop
.9d12					_THFoundEnd:
.9d12	7a		ply				ply 								; restore start
.9d13	20 d7 9c	jsr $9cd7			jsr 	TOWriteBlockXY 				; output the block
.9d16	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/utility.asm

.9d17					TokeniseCalculateHash:
.9d17	da		phx				phx
.9d18	ae 00 07	ldx $0700			ldx 	identStart 					; needs to be same as in tokens.py - simple sum
.9d1b	a9 00		lda #$00			lda 	#0
.9d1d					_TCHLoop:
.9d1d	18		clc				clc
.9d1e	7d 25 08	adc $0825,x			adc 	lineBuffer,x
.9d21	e8		inx				inx
.9d22	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.9d25	d0 f6		bne $9d1d			bne 	_TCHLoop
.9d27	8d 03 07	sta $0703			sta 	identHash 					; save the hash
.9d2a	fa		plx				plx
.9d2b	60		rts				rts
.9d2c					FixLineBufferCase:
.9d2c	a2 00		ldx #$00			ldx 	#0
.9d2e					_FLBCLoop:
.9d2e	bd 25 08	lda $0825,x			lda 	lineBuffer,x 				; get next character
.9d31	f0 22		beq $9d55			beq 	_FLBCExit 					; end of string.
.9d33	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.9d35	f0 11		beq $9d48			beq 	_FLBCInQuotes
.9d37	e8		inx				inx
.9d38	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.9d3a	90 f2		bcc $9d2e			bcc 	_FLBCLoop
.9d3c	c9 7b		cmp #$7b			cmp 	#'z'+1
.9d3e	b0 ee		bcs $9d2e			bcs 	_FLBCLoop
.9d40	38		sec				sec 								; make U/C
.9d41	e9 20		sbc #$20			sbc 	#32
.9d43	9d 24 08	sta $0824,x			sta	 	lineBuffer-1,x 				; write back
.9d46	80 e6		bra $9d2e			bra 	_FLBCLoop
.9d48					_FLBCInQuotes:
.9d48	e8		inx				inx 								; advance
.9d49	bd 25 08	lda $0825,x			lda 	lineBuffer,x 				; get next
.9d4c	f0 07		beq $9d55			beq 	_FLBCExit 					; exit on EOS
.9d4e	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.9d50	d0 f6		bne $9d48			bne 	_FLBCInQuotes
.9d52	e8		inx				inx 								; skip over it
.9d53	80 d9		bra $9d2e			bra 	_FLBCLoop
.9d55					_FLBCExit:
.9d55	60		rts				rts
.9d56					TokeniseExtractLineNumber:
.9d56	ad 27 07	lda $0727			lda 	tokenLineNumber+1 			; push current value on stack
.9d59	48		pha				pha
.9d5a	ad 26 07	lda $0726			lda 	tokenLineNumber
.9d5d	48		pha				pha
.9d5e	20 94 9d	jsr $9d94			jsr 	_TELNTimes2 				; line # x 4
.9d61	20 94 9d	jsr $9d94			jsr 	_TELNTimes2 				; line # x 2
.9d64	18		clc				clc 								; add stacked value
.9d65	68		pla				pla
.9d66	6d 26 07	adc $0726			adc 	tokenLineNumber
.9d69	8d 26 07	sta $0726			sta 	tokenLineNumber
.9d6c	68		pla				pla
.9d6d	6d 27 07	adc $0727			adc 	tokenLineNumber+1
.9d70	8d 27 07	sta $0727			sta 	tokenLineNumber+1 			; line # x 5
.9d73	20 94 9d	jsr $9d94			jsr 	_TELNTimes2 				; line # x 10
.9d76	bd 25 08	lda $0825,x			lda 	lineBuffer,x 				; get and consume character
.9d79	e8		inx				inx
.9d7a	29 0f		and #$0f			and 	#15 						; add to line #
.9d7c	18		clc				clc
.9d7d	6d 26 07	adc $0726			adc 	tokenLineNumber
.9d80	8d 26 07	sta $0726			sta 	tokenLineNumber
.9d83	90 03		bcc $9d88			bcc 	_TLENNoCarry
.9d85	ee 27 07	inc $0727			inc 	tokenLineNumber+1
.9d88					_TLENNoCarry:
.9d88	bd 25 08	lda $0825,x			lda 	lineBuffer,x 				; more digits ?
.9d8b	c9 30		cmp #$30			cmp 	#'0'
.9d8d	90 04		bcc $9d93			bcc 	_TLENExit
.9d8f	c9 3a		cmp #$3a			cmp 	#'9'+1
.9d91	90 c3		bcc $9d56			bcc 	TokeniseExtractLineNumber
.9d93					_TLENExit:
.9d93	60		rts				rts
.9d94					_TELNTimes2:
.9d94	0e 26 07	asl $0726			asl 	tokenLineNumber
.9d97	2e 27 07	rol $0727			rol 	tokenLineNumber+1
.9d9a	60		rts				rts
.9d9b					TokeniseWriteByte:
.9d9b	da		phx				phx
.9d9c	ae 25 07	ldx $0725			ldx 	tokenOffset 				; next slot to write to
.9d9f	9d 25 07	sta $0725,x			sta 	tokenOffset,x 				; write byte out
.9da2	ee 25 07	inc $0725			inc 	tokenOffset 				; advance slot.
.9da5	fa		plx				plx
.9da6	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/variablerecord.asm

.9da7					CheckCreateVariableRecord:
.9da7	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.9da9	85 36		sta $36				sta 	0+zTemp0
.9dab	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.9dad	85 37		sta $37				sta 	1+zTemp0
.9daf					_CCVSearch:
.9daf	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.9db1	f0 2c		beq $9ddf			beq 	_CCVFail
.9db3	a0 01		ldy #$01			ldy 	#1 							; read the hash
.9db5	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.9db7	cd 03 07	cmp $0703			cmp 	identHash
.9dba	d0 16		bne $9dd2			bne 	_CCVNext
.9dbc	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.9dbe	ae 00 07	ldx $0700			ldx 	identStart
.9dc1					_CCVCompare:
.9dc1	bd 25 08	lda $0825,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.9dc4	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.9dc6	e8		inx				inx 								; advance pointers
.9dc7	c8		iny				iny
.9dc8	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.9dc9	d0 07		bne $9dd2			bne 	_CCVNext  					; didn't match go to next.
.9dcb	90 f4		bcc $9dc1			bcc 	_CCVCompare 				; not finished yet.
.9dcd	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; matched whole thing ?
.9dd0	f0 41		beq $9e13			beq 	_CCVFound 					; yes, we were successful
.9dd2					_CCVNext:
.9dd2	18		clc				clc
.9dd3	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.9dd5	65 36		adc $36				adc 	zTemp0
.9dd7	85 36		sta $36				sta 	zTemp0
.9dd9	90 d4		bcc $9daf			bcc 	_CCVSearch
.9ddb	e6 37		inc $37				inc 	zTemp0+1
.9ddd	80 d0		bra $9daf			bra 	_CCVSearch
.9ddf					_CCVFail:
.9ddf	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.9de1	ad 03 07	lda $0703			lda 	identHash
.9de4	91 36		sta ($36),y			sta 	(zTemp0),y
.9de6	c8		iny				iny 								; offset 2 is the type byte
.9de7	ad 04 07	lda $0704			lda 	identTypeByte
.9dea	91 36		sta ($36),y			sta 	(zTemp0),y
.9dec	c8		iny				iny
.9ded					_CCVData:
.9ded	a9 00		lda #$00			lda 	#0 							; erase data 3-7
.9def	91 36		sta ($36),y			sta 	(zTemp0),y
.9df1	c8		iny				iny
.9df2	c0 08		cpy #$08			cpy 	#8
.9df4	90 f7		bcc $9ded			bcc 	_CCVData
.9df6	ae 00 07	ldx $0700			ldx 	identStart 					; copy name into 8 on.
.9df9					_CCVCopyName:
.9df9	bd 25 08	lda $0825,x			lda 	lineBuffer,x
.9dfc	91 36		sta ($36),y			sta 	(zTemp0),y
.9dfe	e8		inx				inx
.9dff	c8		iny				iny
.9e00	ec 02 07	cpx $0702			cpx 	identTypeEnd
.9e03	d0 f4		bne $9df9			bne 	_CCVCopyName
.9e05	98		tya				tya 								; patch offset
.9e06	92 36		sta ($36)			sta 	(zTemp0)
.9e08	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.9e0a	91 36		sta ($36),y			sta 	(zTemp0),y
.9e0c	88		dey				dey
.9e0d	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.9e0f	09 80		ora #$80			ora 	#$80
.9e11	91 36		sta ($36),y			sta 	(zTemp0),y
.9e13					_CCVFound:
.9e13	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.9e15	38		sec				sec
.9e16	e9 10		sbc #$10			sbc 	#(VariableSpace >> 8) 		; offset from the start
.9e18	09 40		ora #$40			ora 	#$40 						; make it a writeable token
.9e1a	20 9b 9d	jsr $9d9b			jsr 	TokeniseWriteByte
.9e1d	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.9e1f	20 9b 9d	jsr $9d9b			jsr 	TokeniseWriteByte
.9e22	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./variants/hardware/junior/extern.asm

.a706					EXTPrintCharacter:
.a706	48		pha				pha
.a707	da		phx				phx
.a708	5a		phy				phy
.a709	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.a70c	7a		ply				ply
.a70d	fa		plx				plx
.a70e	68		pla				pla
.a70f	60		rts				rts
.a710					EXTInputSingleCharacter:
.a710	da		phx				phx
.a711	5a		phy				phy
.a712					_EISCWait:
.a712	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.a715	c9 00		cmp #$00			cmp 	#0
.a717	f0 f9		beq $a712			beq 	_EISCWait
.a719	7a		ply				ply
.a71a	fa		plx				plx
.a71b	60		rts				rts
.a71c					EXTInputLine:
.a71c	a2 00		ldx #$00			ldx 	#0 							; position in line <- start of line
.a71e					_ILLoop:
.a71e	da		phx				phx 								; read character in
.a71f	20 cf ff	jsr $ffcf			jsr 	$FFCF
.a722	fa		plx				plx
.a723	c9 08		cmp #$08			cmp 	#8 							; backspace, CBM doesn't need this.
.a725	f0 12		beq $a739			beq 	_ILBackspace
.a727	c9 0d		cmp #$0d			cmp 	#13							; exit ?
.a729	f0 15		beq $a740			beq 	_ILExit
.a72b	c9 20		cmp #$20			cmp 	#32 						; ignore other control
.a72d	90 ef		bcc $a71e			bcc 	_ILLoop
.a72f	e0 50		cpx #$50			cpx 	#MaxLineSize 				; already full buffer
.a731	f0 eb		beq $a71e			beq 	_ILLoop
.a733	9d 25 08	sta $0825,x			sta 	lineBuffer,x 				; save it
.a736	e8		inx				inx
.a737	80 e5		bra $a71e			bra 	_ILLoop
.a739					_ILBackspace:
.a739	e0 00		cpx #$00			cpx 	#0  						; can't backspace, start of line.
.a73b	f0 e1		beq $a71e			beq 	_ILLoop
.a73d	ca		dex				dex 								; back one.
.a73e	80 de		bra $a71e			bra 	_ILLoop
.a740					_ILExit:
.a740	20 06 a7	jsr $a706			jsr 	EXTPrintCharacter
.a743	9e 25 08	stz $0825,x			stz 	lineBuffer,x 				; make ASCIIZ and exit with address in XA
.a746	60		rts				rts
.a747					EXTBreakCheck:
.a747	4c e1 ff	jmp $ffe1			jmp		$FFE1

;******  Return to file: _basic.asm


;******  Processing file: ./variants/hardware/junior/memory.asm

.a74a					MemoryPeek:
.a74a	b2 36		lda ($36)			lda 	(zTemp0)
.a74c	60		rts				rts
.a74d					MemoryPoke:
.a74d	92 36		sta ($36)			sta 	(zTemp0)
.a74f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./variants/memory.flat/delete.asm

.a750					MemoryDeleteLine:
.a750	20 6f a7	jsr $a76f			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.a753	b2 30		lda ($30)			lda 	(codePtr) 					; size to delete => y
.a755	a8		tay				tay
.a756					_MDDLLoop:
.a756	b1 30		lda ($30),y			lda 	(codePtr),y 				; copy down
.a758	92 30		sta ($30)			sta 	(codePtr)
.a75a	a5 30		lda $30				lda 	codePtr 					; check done the lot.
.a75c	c5 3a		cmp $3a				cmp 	zTemp2
.a75e	d0 07		bne $a767			bne 	_MDLDLNext
.a760	a5 31		lda $31				lda 	codePtr+1
.a762	c5 3b		cmp $3b				cmp 	zTemp2+1
.a764	d0 01		bne $a767			bne 	_MDLDLNext
.a766					_MDDLExit:
.a766	60		rts				rts
.a767					_MDLDLNext:
.a767	e6 30		inc $30				inc 	codePtr						; next byte
.a769	d0 eb		bne $a756			bne 	_MDDLLoop
.a76b	e6 31		inc $31				inc 	codePtr+1
.a76d	80 e7		bra $a756			bra 	_MDDLLoop
.a76f					IMemoryFindEnd:
.a76f	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a771	85 3a		sta $3a				sta 	0+zTemp2
.a773	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a775	85 3b		sta $3b				sta 	1+zTemp2
.a777					_MDLFELoop:
.a777	b2 3a		lda ($3a)			lda 	(zTemp2)
.a779	f0 0b		beq $a786			beq 	_MDLFEExit
.a77b	18		clc				clc
.a77c	65 3a		adc $3a				adc 	zTemp2
.a77e	85 3a		sta $3a				sta 	zTemp2
.a780	90 f5		bcc $a777			bcc 	_MDLFELoop
.a782	e6 3b		inc $3b				inc 	zTemp2+1
.a784	80 f1		bra $a777			bra 	_MDLFELoop
.a786					_MDLFEExit:
.a786	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./variants/memory.flat/insert.asm

.a787					MemoryInsertLine:
.a787	08		php				php
.a788	20 6f a7	jsr $a76f			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.a78b	28		plp				plp
.a78c	90 08		bcc $a796			bcc 	_MDLIFound
.a78e	a5 3a		lda $3a				lda 	zTemp2 						; if CS on entry append.
.a790	85 30		sta $30				sta 	codePtr
.a792	a5 3b		lda $3b				lda 	zTemp2+1
.a794	85 31		sta $31				sta 	codePtr+1
.a796					_MDLIFound:
.a796	ad 25 07	lda $0725			lda 	tokenOffset 				; insert gap in Y, the offset, e.g. length of the new line
.a799	a8		tay				tay
.a79a					_MDLIInsert:
.a79a	b2 3a		lda ($3a)			lda 	(zTemp2) 					; shift one byte up , at least one covers end case.
.a79c	91 3a		sta ($3a),y			sta 	(zTemp2),y 					; work from top down.
.a79e	a5 30		lda $30				lda 	codePtr 					; done insert point ?
.a7a0	c5 3a		cmp $3a				cmp 	zTemp2
.a7a2	d0 06		bne $a7aa			bne 	_MDLINext
.a7a4	a5 31		lda $31				lda 	codePtr+1
.a7a6	c5 3b		cmp $3b				cmp 	zTemp2+1
.a7a8	f0 0a		beq $a7b4			beq 	_MDLIHaveSpace
.a7aa					_MDLINext:
.a7aa	a5 3a		lda $3a				lda 	zTemp2 						; if no, keep zTemp2 going backwards
.a7ac	d0 02		bne $a7b0			bne 	_MDLINoBorrow
.a7ae	c6 3b		dec $3b				dec 	zTemp2+1
.a7b0					_MDLINoBorrow:
.a7b0	c6 3a		dec $3a				dec 	zTemp2
.a7b2	80 e6		bra $a79a			bra 	_MDLIInsert
.a7b4					_MDLIHaveSpace:
.a7b4	ac 25 07	ldy $0725			ldy 	tokenOffset 				; bytes to copy
.a7b7	88		dey				dey 								; from offset-1 to 0
.a7b8					_MDLICopy:
.a7b8	b9 25 07	lda $0725,y			lda 	tokenOffset,y
.a7bb	91 30		sta ($30),y			sta 	(codePtr),y
.a7bd	88		dey				dey
.a7be	10 f8		bpl $a7b8			bpl 	_MDLICopy
.a7c0	60		rts				rts
.a7c1					MDLAppendLine:
.a7c1	86 37		stx $37				stx 	zTemp0+1 					; save new line at zTemp0
.a7c3	85 36		sta $36				sta 	zTemp0
.a7c5	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a7c7	85 38		sta $38				sta 	0+zTemp1
.a7c9	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a7cb	85 39		sta $39				sta 	1+zTemp1
.a7cd	b2 38		lda ($38)			lda 	(zTemp1)
.a7cf	d0 0a		bne $a7db			bne 	_MDLANoInitialise
.a7d1	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a7d3	8d a8 08	sta $08a8			sta 	0+AppendPointer
.a7d6	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a7d8	8d a9 08	sta $08a9			sta 	1+AppendPointer
.a7db					_MDLANoInitialise:
.a7db	18		clc				clc
.a7dc	ad a8 08	lda $08a8			lda 	AppendPointer 				; copy append pointer to zTemp1 adding the offset as you go
.a7df	85 38		sta $38				sta 	zTemp1
.a7e1	72 36		adc ($36)			adc 	(zTemp0)
.a7e3	8d a8 08	sta $08a8			sta 	AppendPointer
.a7e6	ad a9 08	lda $08a9			lda 	AppendPointer+1
.a7e9	85 39		sta $39				sta 	zTemp1+1
.a7eb	69 00		adc #$00			adc 	#0
.a7ed	8d a9 08	sta $08a9			sta 	AppendPointer+1
.a7f0	a0 00		ldy #$00			ldy 	#0
.a7f2					_MDLACopy:
.a7f2	b1 36		lda ($36),y			lda 	(zTemp0),y 					; copy new line in
.a7f4	91 38		sta ($38),y			sta 	(zTemp1),y
.a7f6	c8		iny				iny
.a7f7	98		tya				tya
.a7f8	d2 36		cmp ($36)			cmp 	(zTemp0) 					; done whole line
.a7fa	d0 f6		bne $a7f2			bne 	_MDLACopy
.a7fc	a9 00		lda #$00			lda 	#0 							; end of program.
.a7fe	91 38		sta ($38),y			sta 	(zTemp1),y
.a800	60		rts				rts
.08a8					AppendPointer:
>08a8							.fill 	2

;******  Return to file: _basic.asm


;******  Processing file: ./variants/memory.flat/memory.asm

.9e23					MemoryNew:
.9e23	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.9e25	85 30		sta $30				sta 	codePtr
.9e27	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.9e29	85 31		sta $31				sta 	codePtr+1
.9e2b	a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.9e2d	92 30		sta ($30)			sta 	(codePtr)
.9e2f	60		rts				rts
.9e30					MemoryInline:
.9e30	98		tya				tya 								; put address into stack,x
.9e31	18		clc				clc
.9e32	65 30		adc $30				adc 	codePtr
.9e34	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.9e37	a5 31		lda $31				lda 	codePtr+1
.9e39	69 00		adc #$00			adc 	#0
.9e3b	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9e3e	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.9e41	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.9e44	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./variants/memory.flat/search.asm

.9e45					MemorySearch:
.9e45	85 36		sta $36				sta 	zTemp0 						; save line number zTemp0
.9e47	86 37		stx $37				stx 	zTemp0+1
.9e49	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.9e4b	85 30		sta $30				sta 	codePtr
.9e4d	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.9e4f	85 31		sta $31				sta 	codePtr+1
.9e51					_MTAXLoop:
.9e51	b2 30		lda ($30)			lda 	(codePtr)
.9e53	18		clc				clc
.9e54	f0 21		beq $9e77			beq 	_MTAXExit 					; reached end, exit with CC.
.9e56	a0 01		ldy #$01			ldy 	#1 							; calculate current line# - requested line#
.9e58	b1 30		lda ($30),y			lda 	(codePtr),y
.9e5a	38		sec				sec
.9e5b	e5 36		sbc $36				sbc 	zTemp0
.9e5d	85 38		sta $38				sta 	zTemp1 						; save interim to set Z
.9e5f	c8		iny				iny 								; do the MSB
.9e60	b1 30		lda ($30),y			lda 	(codePtr),y
.9e62	e5 37		sbc $37				sbc 	zTemp0+1
.9e64	05 38		ora $38				ora 	zTemp1
.9e66	f0 0f		beq $9e77			beq 	_MTAXExit	 				; found
.9e68	b0 0d		bcs $9e77			bcs 	_MTAXExit 					; current < required exit
.9e6a	18		clc				clc
.9e6b	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.9e6d	65 30		adc $30				adc 	codePtr
.9e6f	85 30		sta $30				sta 	codePtr
.9e71	90 02		bcc $9e75			bcc 	_CREExit
.9e73	e6 31		inc $31				inc 	codePtr+1
.9e75					_CREExit:
.9e75	80 da		bra $9e51			bra 	_MTAXLoop
.9e77					_MTAXExit:
.9e77	60		rts				rts

;******  Return to file: _basic.asm


;******  End of listing
