
; 64tass Turbo Assembler Macro V1.56.2625 listing file
; 64tass -D AUTORUN=1 -q -b -Wall -Wno-portable -c -L output/basic.lst -l output/basic.lbl -Wall -o basic.rom _basic.asm
; Thu Oct  6 07:39:39 2022

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=1					AUTORUN=1

;******  Processing input file: _basic.asm


;******  Processing file: ./common/aa.system/01common.inc

=$30					ZeroPageMandatory = $30
=$600					ZeroPagePreference = $600
=$700					MemoryStorage = $700
=$2000					BasicStart = $2000
=$8000					CodeStart = $8000
=$1000					VariableSpace = $1000
=$2000					EndVariableSpace = $2000
=8					MathStackSize = 8
=512					BasicStackSize = 512
=3584					BasicStackBase = $1000-BasicStackSize
=80					MaxLineSize = 80

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/04data.inc

.0030					codePtr:
>0030							.fill 	4
.0034					basicStack:
>0034							.fill 	2
.0036					zTemp0:
>0036							.fill 	2
.0038					zTemp1:
>0038							.fill 	2
.003a					zTemp2:
>003a							.fill 	2
.003c					zsTemp:
>003c							.fill 	2
.003e					zaTemp:
>003e							.fill 	2
=$30					safePtr = codePtr 							; minimise direct tinkering
=$80					NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20					NSBIsReference = $20 						; bit 5 : is a reference
=$10					NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18					NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03					NSBRefMask = $03 							; bits 0,1 : Bytes of reference, -1 (e.g. 00 = 1 byte, 11 = 4 bytes)
=$04					NSBIsArray = $04
=$00					NSTInteger = $00 							; base types for bits 3..4
=$08					NSTFloat = $08
=$10					NSTString = $10
=$18					NSTProcedure = $18
.0600					NSStatus:
>0600							.fill 	MathStackSize
.0608					NSMantissa0:
>0608							.fill 	MathStackSize 				; (this is my integer mantissa system)
.0610					NSMantissa1:
>0610							.fill 	MathStackSize
.0618					NSMantissa2:
>0618							.fill 	MathStackSize
.0620					NSMantissa3:
>0620							.fill 	MathStackSize
.0628					NSExponent:
>0628							.fill 	MathStackSize
.0700					identStart:
>0700							.fill 	1
.0701					identTypeStart:
>0701							.fill 	1
.0702					identTypeEnd:
>0702							.fill 	1
.0703					identHash:
>0703							.fill 	1
.0704					identTypeByte:
>0704							.fill 	1	 						; (see tokenising.pdf)
.0705					encodeState:
>0705							.fill 	1
.0706					digitTemp:
>0706							.fill 	1
.0707					decimalCount:
>0707							.fill 	1
.0708					randomSeed:
>0708							.fill 	4
.070c					lowMemPtr:
>070c							.fill 	2
.070e					stringMemory:
>070e							.fill 	2
.0710					stringInitialised:
>0710							.fill 	1
.0711					stringTempPointer:
>0711							.fill 	2
.0713					breakCheck:
>0713							.fill 	1
.0714					decimalPlaces:
>0714							.fill 	1
.0715					dbOffset:
>0715							.fill 	1
.0716					dataPointer:
>0716							.fill 	5
.071b					inDataStatement:
>071b							.fill 	1
.071c					tbOffset:
>071c							.fill 	1
.071d					AssemblerAddress:
>071d							.fill 	2
.071f					AssemblerControl:
>071f							.fill 	1
.0720					ParamStart:
>0720							.fill 	2
.0722					IsGroup1:
>0722							.fill 	1
.0723					BaseOpcode:
>0723							.fill 	1
.0724					ModeMask:
>0724							.fill 	1
.0725					tokenOffset:
>0725							.fill 	1
.0726					tokenLineNumber:
>0726							.fill 	2
.0728					tokenBuffer:
>0728							.fill 	253
.0825					lineBuffer:
>0825							.fill 	MaxLineSize+1
.0876					numberBuffer:
>0876							.fill 	34
.0898					decimalBuffer:
>0898							.fill 	16

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/constants.inc

=$80					AM_ISZP = $80
=$40					AM_ISG1 = $40
=$20					AM_ISG2 = $20
=224					AM_IMMEDIATE = AM_ISZP+AM_ISG1+AM_ISG2+$00
=228					AM_ZEROPAGE = AM_ISZP+AM_ISG1+AM_ISG2+$04
=40					AM_ACC = AM_ISG2+$08
=108					AM_ABS = AM_ISG1+AM_ISG2+$0C
=208					AM_INDY = AM_ISZP+AM_ISG1+$10
=244					AM_ZEROX = AM_ISZP+AM_ISG1+AM_ISG2+$14
=120					AM_ABSY = AM_ISG1+AM_ISG2+$18
=124					AM_ABSX = AM_ISG1+AM_ISG2+$1C
=209					AM_IND = AM_ISZP+AM_ISG1+$11
=$80					AM_ZEROY = AM_ISZP
=$01					AM_INDABS = $01
=$02					AM_INDABSX = $02
=192					AM_INDX = AM_ISZP+AM_ISG1+$00

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/handlers.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.inc

=1					ERRID_BREAK = 1
=2					ERRID_SYNTAX = 2
=3					ERRID_DIVZERO = 3
=4					ERRID_RANGE = 4
=5					ERRID_TYPE = 5
=6					ERRID_MEMORY = 6
=7					ERRID_ARGUMENT = 7
=8					ERRID_STOP = 8
=9					ERRID_STRING = 9
=10					ERRID_ASSERT = 10
=11					ERRID_DATA = 11
=12					ERRID_NOTDONE = 12
=13					ERRID_LINE = 13
=14					ERRID_GOSUB = 14
=15					ERRID_REPEAT = 15
=16					ERRID_WHILE = 16
=17					ERRID_FOR = 17
=18					ERRID_STACK = 18
=19					ERRID_STRUCT = 19
=20					ERRID_PROC = 20
=21					ERRID_REDEFINE = 21
=22					ERRID_ARRAYSIZE = 22
=23					ERRID_ARRAYIDX = 23

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst.inc

=$00					KWD_LESSLESS                         = $00; $00 <<
=$01					KWD_LESSEQUAL                        = $01; $01 <=
=$02					KWD_LESSGREATER                      = $02; $02 <>
=$03					KWD_PLINGPLING3                      = $03; $03 !!3
=$04					KWD_GREATERLESS                      = $04; $04 ><
=$05					KWD_GREATEREQUAL                     = $05; $05 >=
=$06					KWD_GREATERGREATER                   = $06; $06 >>
=$07					KWD_PLINGPLING7                      = $07; $07 !!7
=$08					KWD_PLINGPLING8                      = $08; $08 !!8
=$09					KWD_PLINGPLING9                      = $09; $09 !!9
=$0a					KWD_PLINGPLING10                     = $0a; $0a !!10
=$0b					KWD_PLINGPLING11                     = $0b; $0b !!11
=$0c					KWD_PLINGPLING12                     = $0c; $0c !!12
=$0d					KWD_PLINGPLING13                     = $0d; $0d !!13
=$0e					KWD_PLINGPLING14                     = $0e; $0e !!14
=$0f					KWD_PLINGPLING15                     = $0f; $0f !!15
=$10					KWD_AT                               = $10; $10 @
=$11					KWD_PLINGPLING17                     = $11; $11 !!17
=$12					KWD_PLINGPLING18                     = $12; $12 !!18
=$13					KWD_LSQPAREN                         = $13; $13 [
=$14					KWD_BACKSLASH                        = $14; $14 \
=$15					KWD_RSQPAREN                         = $15; $15 ]
=$16					KWD_HAT                              = $16; $16 ^
=$17					KWD_UNDERSCORE                       = $17; $17 _
=$18					KWD_BQUOTE                           = $18; $18 `
=$19					KWD_PLINGPLING25                     = $19; $19 !!25
=$1a					KWD_PLINGPLING26                     = $1a; $1a !!26
=$1b					KWD_LCURLY                           = $1b; $1b {
=$1c					KWD_BAR                              = $1c; $1c |
=$1d					KWD_RCURLY                           = $1d; $1d }
=$1e					KWD_TILDE                            = $1e; $1e ~
=$21					KWD_PLING                            = $21; $21 !
=$22					KWD_DQUOTE                           = $22; $22 "
=$23					KWD_HASH                             = $23; $23 #
=$24					KWD_DOLLAR                           = $24; $24 $
=$25					KWD_PERCENT                          = $25; $25 %
=$26					KWD_AMPERSAND                        = $26; $26 &
=$27					KWD_QUOTE                            = $27; $27 '
=$28					KWD_LPAREN                           = $28; $28 (
=$29					KWD_RPAREN                           = $29; $29 )
=$2a					KWD_STAR                             = $2a; $2a *
=$2b					KWD_PLUS                             = $2b; $2b +
=$2c					KWD_COMMA                            = $2c; $2c ,
=$2d					KWD_MINUS                            = $2d; $2d -
=$2e					KWD_PERIOD                           = $2e; $2e .
=$2f					KWD_SLASH                            = $2f; $2f /
=$30					KWD_0                                = $30; $30 0
=$31					KWD_1                                = $31; $31 1
=$32					KWD_2                                = $32; $32 2
=$33					KWD_3                                = $33; $33 3
=$34					KWD_4                                = $34; $34 4
=$35					KWD_5                                = $35; $35 5
=$36					KWD_6                                = $36; $36 6
=$37					KWD_7                                = $37; $37 7
=$38					KWD_8                                = $38; $38 8
=$39					KWD_9                                = $39; $39 9
=$3a					KWD_COLON                            = $3a; $3a :
=$3b					KWD_SEMICOLON                        = $3b; $3b ;
=$3c					KWD_LESS                             = $3c; $3c <
=$3d					KWD_EQUAL                            = $3d; $3d =
=$3e					KWD_GREATER                          = $3e; $3e >
=$3f					KWD_QMARK                            = $3f; $3f ?
=$83					KWD_ABSLPAREN                        = $83; $83 ABS(
=$84					KWD_ALLOCLPAREN                      = $84; $84 ALLOC(
=$85					KWD_ASCLPAREN                        = $85; $85 ASC(
=$86					KWD_CHRDOLLARLPAREN                  = $86; $86 CHR$(
=$87					KWD_FALSE                            = $87; $87 FALSE
=$88					KWD_FRACLPAREN                       = $88; $88 FRAC(
=$89					KWD_INTLPAREN                        = $89; $89 INT(
=$8a					KWD_ISVALLPAREN                      = $8a; $8a ISVAL(
=$8b					KWD_LEFTDOLLARLPAREN                 = $8b; $8b LEFT$(
=$8c					KWD_LENLPAREN                        = $8c; $8c LEN(
=$8d					KWD_MIDDOLLARLPAREN                  = $8d; $8d MID$(
=$8e					KWD_NOTLPAREN                        = $8e; $8e NOT(
=$8f					KWD_RIGHTDOLLARLPAREN                = $8f; $8f RIGHT$(
=$90					KWD_RNDLPAREN                        = $90; $90 RND(
=$91					KWD_SGNLPAREN                        = $91; $91 SGN(
=$92					KWD_SPCLPAREN                        = $92; $92 SPC(
=$93					KWD_STRDOLLARLPAREN                  = $93; $93 STR$(
=$94					KWD_TRUE                             = $94; $94 TRUE
=$95					KWD_VALLPAREN                        = $95; $95 VAL(
=$96					KWD_FOR                              = $96; $96 FOR
=$97					KWD_IF                               = $97; $97 IF
=$98					KWD_PROC                             = $98; $98 PROC
=$99					KWD_REPEAT                           = $99; $99 REPEAT
=$9a					KWD_WHILE                            = $9a; $9a WHILE
=$9b					KWD_ENDIF                            = $9b; $9b ENDIF
=$9c					KWD_ENDPROC                          = $9c; $9c ENDPROC
=$9d					KWD_NEXT                             = $9d; $9d NEXT
=$9e					KWD_THEN                             = $9e; $9e THEN
=$9f					KWD_UNTIL                            = $9f; $9f UNTIL
=$a0					KWD_WEND                             = $a0; $a0 WEND
=$a1					KWD_CALL                             = $a1; $a1 CALL
=$a2					KWD_CLS                              = $a2; $a2 CLS
=$a3					KWD_DATA                             = $a3; $a3 DATA
=$a4					KWD_DIM                              = $a4; $a4 DIM
=$a5					KWD_DOWNTO                           = $a5; $a5 DOWNTO
=$a6					KWD_ELSE                             = $a6; $a6 ELSE
=$a7					KWD_GOSUB                            = $a7; $a7 GOSUB
=$a8					KWD_GOTO                             = $a8; $a8 GOTO
=$a9					KWD_LET                              = $a9; $a9 LET
=$aa					KWD_LOCAL                            = $aa; $aa LOCAL
=$ab					KWD_PRINT                            = $ab; $ab PRINT
=$ac					KWD_READ                             = $ac; $ac READ
=$ad					KWD_REM                              = $ad; $ad REM
=$ae					KWD_RETURN                           = $ae; $ae RETURN
=$af					KWD_TO                               = $af; $af TO

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst0.inc

=$80					KWC_EOL = $80
=$ff					KWC_STRING = $FF
=$fe					KWC_HEXCONST = $FE
=$96					KWC_FIRST_STRUCTURE = $96
=$9b					KWC_FIRST_STRUCTURE_DEC = $9b
=$a0					KWC_LAST_STRUCTURE = $a0
=$83					KWC_FIRST_UNARY = $83
=$95					KWC_LAST_UNARY = $95

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/stack.inc

=$e0					STK_GOSUB = $E0
=$d0					STK_FOR = $D0
=$c0					STK_REPEAT = $C0
=$b0					STK_PROC = $B0
=$a0					STK_WHILE = $A0
=$01					STK_LOCALN = $01
=$02					STK_LOCALS = $02

;******  Return to file: _basic.asm


;******  Processing file: ./variants/memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/00start.asm

.8000	a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.8002	9a		txs				txs
.8003	a2 80		ldx #$80			ldx 	#(Prompt >> 8) 				; prompt
.8005	a9 13		lda #$13			lda 	#(Prompt & $FF)
.8007	20 28 8d	jsr $8d28			jsr 	PrintStringXA
.800a	20 c0 88	jsr $88c0			jsr 	NewCommand 					; erase current program
.800d	20 e2 98	jsr $98e2			jsr 	BackloadProgram
.8010	4c 0c 8a	jmp $8a0c			jmp 	CommandRun
>8013	0d 0d 2a 2a 2a 20 46 32		Prompt:	.text 	13,13,"*** F256 Junior SuperBASIC ***",13,13
>801b	35 36 20 4a 75 6e 69 6f 72 20 53 75 70 65 72 42
>802b	41 53 49 43 20 2a 2a 2a 0d 0d
>8035	57 72 69 74 74 65 6e 20				.text 	"Written by Paul Robson 2022.",13,13
>803d	62 79 20 50 61 75 6c 20 52 6f 62 73 6f 6e 20 32
>804d	30 32 32 2e 0d 0d

;******  Processing file: ./common/aa.system/../generated/timestamp.asm

>8053	42 75 69 6c 74 20 54 68			.text "Built Thursday 06-Oct-2022. Build 185."
>805b	75 72 73 64 61 79 20 30 36 2d 4f 63 74 2d 32 30
>806b	32 32 2e 20 42 75 69 6c 64 20 31 38 35 2e

;******  Return to file: ./common/aa.system/00start.asm

>8079	0d 0d 00					.byte 	13,13,0
>807c							.align 2

;******  Processing file: ./common/aa.system/../generated/vectors.dat

.807c					VectorSetPunc:
>807c	79 8e					.word	ShiftLeft                        ; $00 <<
>807e	73 8d					.word	BinaryCompareLessEqual           ; $01 <=
>8080	69 8d					.word	BinaryCompareNotEqual            ; $02 <>
>8082	6b a5					.word	SyntaxError                      ; $03 !!3
>8084	6b a5					.word	SyntaxError                      ; $04 ><
>8086	7d 8d					.word	BinaryCompareGreaterEqual        ; $05 >=
>8088	7c 8e					.word	ShiftRight                       ; $06 >>
>808a	6b a5					.word	SyntaxError                      ; $07 !!7
>808c	6b a5					.word	SyntaxError                      ; $08 !!8
>808e	6b a5					.word	SyntaxError                      ; $09 !!9
>8090	6b a5					.word	SyntaxError                      ; $0a !!10
>8092	6b a5					.word	SyntaxError                      ; $0b !!11
>8094	6b a5					.word	SyntaxError                      ; $0c !!12
>8096	6b a5					.word	SyntaxError                      ; $0d !!13
>8098	6b a5					.word	SyntaxError                      ; $0e !!14
>809a	6b a5					.word	SyntaxError                      ; $0f !!15
>809c	6b a5					.word	SyntaxError                      ; $10 @
>809e	6b a5					.word	SyntaxError                      ; $11 !!17
>80a0	6b a5					.word	SyntaxError                      ; $12 !!18
>80a2	6b a5					.word	SyntaxError                      ; $13 [
>80a4	a2 9f					.word	IntegerDivide                    ; $14 \
>80a6	6b a5					.word	SyntaxError                      ; $15 ]
>80a8	02 90					.word	EorInteger                       ; $16 ^
>80aa	6b a5					.word	SyntaxError                      ; $17 _
>80ac	6b a5					.word	SyntaxError                      ; $18 `
>80ae	6b a5					.word	SyntaxError                      ; $19 !!25
>80b0	6b a5					.word	SyntaxError                      ; $1a !!26
>80b2	6b a5					.word	SyntaxError                      ; $1b {
>80b4	bc 8f					.word	OraInteger                       ; $1c |
>80b6	6b a5					.word	SyntaxError                      ; $1d }
>80b8	6b a5					.word	SyntaxError                      ; $1e ~
>80ba	6b a5					.word	SyntaxError                      ; $1f [7m<7F>[m
>80bc	6b a5					.word	SyntaxError                      ; $20
>80be	48 90					.word	WordIndirect                     ; $21 !
>80c0	6b a5					.word	SyntaxError                      ; $22 "
>80c2	6b a5					.word	SyntaxError                      ; $23 #
>80c4	6b a5					.word	SyntaxError                      ; $24 $
>80c6	ef 9f					.word	IntegerModulus                   ; $25 %
>80c8	76 8f					.word	AndInteger                       ; $26 &
>80ca	6b a5					.word	SyntaxError                      ; $27 '
>80cc	6b a5					.word	SyntaxError                      ; $28 (
>80ce	6b a5					.word	SyntaxError                      ; $29 )
>80d0	64 a0					.word	MulInteger                       ; $2a *
>80d2	10 8f					.word	AddInteger                       ; $2b +
>80d4	6b a5					.word	SyntaxError                      ; $2c ,
>80d6	4b 8f					.word	SubInteger                       ; $2d -
>80d8	6b a5					.word	SyntaxError                      ; $2e .
>80da	fb a1					.word	FDivideCommand                   ; $2f /
>80dc	6b a5					.word	SyntaxError                      ; $30 0
>80de	6b a5					.word	SyntaxError                      ; $31 1
>80e0	6b a5					.word	SyntaxError                      ; $32 2
>80e2	6b a5					.word	SyntaxError                      ; $33 3
>80e4	6b a5					.word	SyntaxError                      ; $34 4
>80e6	6b a5					.word	SyntaxError                      ; $35 5
>80e8	6b a5					.word	SyntaxError                      ; $36 6
>80ea	6b a5					.word	SyntaxError                      ; $37 7
>80ec	6b a5					.word	SyntaxError                      ; $38 8
>80ee	6b a5					.word	SyntaxError                      ; $39 9
>80f0	6b a5					.word	SyntaxError                      ; $3a :
>80f2	6b a5					.word	SyntaxError                      ; $3b ;
>80f4	55 8d					.word	BinaryCompareLess                ; $3c <
>80f6	4b 8d					.word	BinaryCompareEqual               ; $3d =
>80f8	5f 8d					.word	BinaryCompareGreater             ; $3e >
>80fa	6f 90					.word	ByteIndirect                     ; $3f ?
.80fc					VectorSet0:
>80fc	78 8a					.word	EOLCommand                       ; $80 !0:EOF
>80fe	85 8a					.word	Shift1Command                    ; $81 !1:SH1
>8100	8d 8a					.word	Shift2Command                    ; $82 !2:SH2
>8102	41 a3					.word	AbsUnary                         ; $83 ABS(
>8104	39 95					.word	AllocUnary                       ; $84 ALLOC(
>8106	51 a3					.word	AscUnary                         ; $85 ASC(
>8108	f4 95					.word	ChrUnary                         ; $86 CHR$(
>810a	47 8d					.word	UnaryFalse                       ; $87 FALSE
>810c	5e a3					.word	FracUnary                        ; $88 FRAC(
>810e	74 a3					.word	IntUnary                         ; $89 INT(
>8110	ca a3					.word	IsValUnary                       ; $8a ISVAL(
>8112	ce 96					.word	Unary_Left                       ; $8b LEFT$(
>8114	86 a3					.word	LenUnary                         ; $8c LEN(
>8116	f8 96					.word	Unary_Mid                        ; $8d MID$(
>8118	91 95					.word	Unary_Not                        ; $8e NOT(
>811a	de 96					.word	Unary_Right                      ; $8f RIGHT$(
>811c	a7 95					.word	Unary_Rnd                        ; $90 RND(
>811e	a0 a3					.word	SgnUnary                         ; $91 SGN(
>8120	06 96					.word	SpcUnary                         ; $92 SPC(
>8122	21 96					.word	Unary_Str                        ; $93 STR$(
>8124	3b 8d					.word	UnaryTrue                        ; $94 TRUE
>8126	c0 a3					.word	ValUnary                         ; $95 VAL(
>8128	f1 85					.word	ForCommand                       ; $96 FOR
>812a	3e 87					.word	IfCommand                        ; $97 IF
>812c	95 8a					.word	Unused1                          ; $98 PROC
>812e	b8 89					.word	Command_REPEAT                   ; $99 REPEAT
>8130	a0 8c					.word	Command_WHILE                    ; $9a WHILE
>8132	67 87					.word	EndIf                            ; $9b ENDIF
>8134	7b 9f					.word	Command_ENDPROC                  ; $9c ENDPROC
>8136	ab 86					.word	NextCommand                      ; $9d NEXT
>8138	95 8a					.word	Unused4                          ; $9e THEN
>813a	c1 89					.word	Command_UNTIL                    ; $9f UNTIL
>813c	c1 8c					.word	Command_WEND                     ; $a0 WEND
>813e	c6 84					.word	CallCommand                      ; $a1 CALL
>8140	6b a5					.word	SyntaxError                      ; $a2 CLS
>8142	29 85					.word	Command_Data                     ; $a3 DATA
>8144	31 85					.word	DimCommand                       ; $a4 DIM
>8146	95 8a					.word	Unused3                          ; $a5 DOWNTO
>8148	60 87					.word	ElseCode                         ; $a6 ELSE
>814a	04 87					.word	Command_GOSUB                    ; $a7 GOSUB
>814c	22 87					.word	GotoCommand                      ; $a8 GOTO
>814e	68 87					.word	LetCommand                       ; $a9 LET
>8150	3c 88					.word	Command_LOCAL                    ; $aa LOCAL
>8152	ca 88					.word	Command_Print                    ; $ab PRINT
>8154	52 89					.word	Command_Read                     ; $ac READ
>8156	ab 89					.word	RemCommand                       ; $ad REM
>8158	14 87					.word	Command_RETURN                   ; $ae RETURN
>815a	95 8a					.word	Unused2                          ; $af TO
.815c					VectorSet1:
>815c	6b a5					.word	SyntaxError                      ; $80 !0:EOF
>815e	6b a5					.word	SyntaxError                      ; $81 !1:SH1
>8160	6b a5					.word	SyntaxError                      ; $82 !2:SH2
>8162	97 84					.word	AssembleCommand                  ; $83 ASSEMBLE
>8164	b6 84					.word	AssertCommand                    ; $84 ASSERT
>8166	d4 84					.word	ClearCommand                     ; $85 CLEAR
>8168	ee 85					.word	EndCommand                       ; $86 END
>816a	a1 87					.word	Command_List                     ; $87 LIST
>816c	c0 88					.word	NewCommand                       ; $88 NEW
>816e	da 89					.word	Command_Restore                  ; $89 RESTORE
>8170	0c 8a					.word	CommandRUN                       ; $8a RUN
>8172	98 8a					.word	StopCommand                      ; $8b STOP
.8174					VectorSet2:
>8174	6b a5					.word	SyntaxError                      ; $80 !0:EOF
>8176	6b a5					.word	SyntaxError                      ; $81 !1:SH1
>8178	6b a5					.word	SyntaxError                      ; $82 !2:SH2
>817a	2e a4					.word	Assemble_adc                     ; $83 ADC
>817c	26 a4					.word	Assemble_and                     ; $84 AND
>817e	42 a4					.word	Assemble_asl                     ; $85 ASL
>8180	ac a4					.word	Assemble_bcc                     ; $86 BCC
>8182	b0 a4					.word	Assemble_bcs                     ; $87 BCS
>8184	b8 a4					.word	Assemble_beq                     ; $88 BEQ
>8186	6f a4					.word	Assemble_bit                     ; $89 BIT
>8188	a0 a4					.word	Assemble_bmi                     ; $8a BMI
>818a	b4 a4					.word	Assemble_bne                     ; $8b BNE
>818c	9c a4					.word	Assemble_bpl                     ; $8c BPL
>818e	bc a4					.word	Assemble_bra                     ; $8d BRA
>8190	c0 a4					.word	Assemble_brk                     ; $8e BRK
>8192	a4 a4					.word	Assemble_bvc                     ; $8f BVC
>8194	a8 a4					.word	Assemble_bvs                     ; $90 BVS
>8196	c8 a4					.word	Assemble_clc                     ; $91 CLC
>8198	1c a5					.word	Assemble_cld                     ; $92 CLD
>819a	dc a4					.word	Assemble_cli                     ; $93 CLI
>819c	0c a5					.word	Assemble_clv                     ; $94 CLV
>819e	3a a4					.word	Assemble_cmp                     ; $95 CMP
>81a0	83 a4					.word	Assemble_cpx                     ; $96 CPX
>81a2	7e a4					.word	Assemble_cpy                     ; $97 CPY
>81a4	60 a4					.word	Assemble_dec                     ; $98 DEC
>81a6	18 a5					.word	Assemble_dex                     ; $99 DEX
>81a8	f4 a4					.word	Assemble_dey                     ; $9a DEY
>81aa	2a a4					.word	Assemble_eor                     ; $9b EOR
>81ac	65 a4					.word	Assemble_inc                     ; $9c INC
>81ae	24 a5					.word	Assemble_inx                     ; $9d INX
>81b0	14 a5					.word	Assemble_iny                     ; $9e INY
>81b2	97 a4					.word	Assemble_jmp                     ; $9f JMP
>81b4	92 a4					.word	Assemble_jsr                     ; $a0 JSR
>81b6	36 a4					.word	Assemble_lda                     ; $a1 LDA
>81b8	5b a4					.word	Assemble_ldx                     ; $a2 LDX
>81ba	79 a4					.word	Assemble_ldy                     ; $a3 LDY
>81bc	4c a4					.word	Assemble_lsr                     ; $a4 LSR
>81be	28 a5					.word	Assemble_nop                     ; $a5 NOP
>81c0	22 a4					.word	Assemble_ora                     ; $a6 ORA
>81c2	d8 a4					.word	Assemble_pha                     ; $a7 PHA
>81c4	c4 a4					.word	Assemble_php                     ; $a8 PHP
>81c6	20 a5					.word	Assemble_phx                     ; $a9 PHX
>81c8	e0 a4					.word	Assemble_phy                     ; $aa PHY
>81ca	e8 a4					.word	Assemble_pla                     ; $ab PLA
>81cc	cc a4					.word	Assemble_plp                     ; $ac PLP
>81ce	30 a5					.word	Assemble_plx                     ; $ad PLX
>81d0	f0 a4					.word	Assemble_ply                     ; $ae PLY
>81d2	47 a4					.word	Assemble_rol                     ; $af ROL
>81d4	51 a4					.word	Assemble_ror                     ; $b0 ROR
>81d6	d4 a4					.word	Assemble_rti                     ; $b1 RTI
>81d8	e4 a4					.word	Assemble_rts                     ; $b2 RTS
>81da	3e a4					.word	Assemble_sbc                     ; $b3 SBC
>81dc	d0 a4					.word	Assemble_sec                     ; $b4 SEC
>81de	2c a5					.word	Assemble_sed                     ; $b5 SED
>81e0	ec a4					.word	Assemble_sei                     ; $b6 SEI
>81e2	32 a4					.word	Assemble_sta                     ; $b7 STA
>81e4	56 a4					.word	Assemble_stx                     ; $b8 STX
>81e6	74 a4					.word	Assemble_sty                     ; $b9 STY
>81e8	6a a4					.word	Assemble_stz                     ; $ba STZ
>81ea	08 a5					.word	Assemble_tax                     ; $bb TAX
>81ec	04 a5					.word	Assemble_tay                     ; $bc TAY
>81ee	8d a4					.word	Assemble_trb                     ; $bd TRB
>81f0	88 a4					.word	Assemble_tsb                     ; $be TSB
>81f2	10 a5					.word	Assemble_tsx                     ; $bf TSX
>81f4	f8 a4					.word	Assemble_txa                     ; $c0 TXA
>81f6	00 a5					.word	Assemble_txs                     ; $c1 TXS
>81f8	fc a4					.word	Assemble_tya                     ; $c2 TYA

;******  Return to file: ./common/aa.system/00start.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/assembler.asm

.81fa					AssembleGroup1:
.81fa	a9 ff		lda #$ff			lda 	#$FF
.81fc	8d 24 07	sta $0724			sta 	ModeMask 					; initialise the mode mask - all for all
.81ff	80 02		bra $8203			bra 	AsmGroup12
.8201					AssembleGroup2:
.8201	a5 00		lda $00				lda 	$00
.8203					AsmGroup12:
.8203	8d 22 07	sta $0722			sta 	IsGroup1 					; save the 'group 1' flag
.8206	68		pla				pla 								; pop the return address to access the information following.
.8207	fa		plx				plx
.8208	20 91 82	jsr $8291			jsr 	AccessParameters 			; get opcode and save as base
.820b	8d 23 07	sta $0723			sta 	BaseOpcode
.820e	ad 22 07	lda $0722			lda 	IsGroup1 					; skip if group 1 as we don't have a complex mask.
.8211	d0 08		bne $821b			bne 	_AG12HaveMask
.8213	a9 02		lda #$02			lda 	#2 							; if group 2 the second parameter is the mask
.8215	20 99 82	jsr $8299			jsr 	GetParameter		 		; e.g. which modes are supported for this operand
.8218	8d 24 07	sta $0724			sta 	ModeMask
.821b					_AG12HaveMask:
.821b	20 d4 83	jsr $83d4			jsr 	TypeAndCalculateOperand 	; get zero page type
.821e	da		phx				phx 								; save found address mode
.821f	20 fd 82	jsr $82fd			jsr 	AssembleModeX
.8222	fa		plx				plx  								; restore address mode
.8223	b0 0b		bcs $8230			bcs 	_AG12Exit
.8225	20 31 82	jsr $8231			jsr 	PromoteToAbsolute  			; promote ZP to ABS and try that
.8228	20 fd 82	jsr $82fd			jsr 	AssembleModeX
.822b	b0 03		bcs $8230			bcs 	_AG12Exit
.822d	4c 6b a5	jmp $a56b			jmp 	SyntaxError 				; can't do either, so must be wrong mode/operand.
.8230					_AG12Exit:
.8230	60		rts				rts
.8231					PromoteToAbsolute:
.8231	a9 6c		lda #$6c			lda 	#AM_ABS 					; lda xx
.8233	e0 e4		cpx #$e4			cpx 	#AM_ZEROPAGE
.8235	f0 19		beq $8250			beq 	_PTADo
.8237	a9 7c		lda #$7c			lda 	#AM_ABSX 					; lda xx,X
.8239	e0 f4		cpx #$f4			cpx 	#AM_ZEROX
.823b	f0 13		beq $8250			beq 	_PTADo
.823d	a9 78		lda #$78			lda 	#AM_ABSY 					; lda xx,Y
.823f	e0 80		cpx #$80			cpx 	#AM_ZEROY
.8241	f0 0d		beq $8250			beq 	_PTADo
.8243	a9 01		lda #$01			lda 	#AM_INDABS 					; lda (xx) (jump)
.8245	e0 d1		cpx #$d1			cpx 	#AM_IND
.8247	f0 07		beq $8250			beq 	_PTADo
.8249	a9 02		lda #$02			lda 	#AM_INDABSX 				; lda (xx,x) (jump)
.824b	e0 c0		cpx #$c0			cpx 	#AM_INDX
.824d	f0 01		beq $8250			beq 	_PTADo
.824f	60		rts				rts
.8250					_PTADo:
.8250	aa		tax				tax
.8251	60		rts				rts
.8252					AssembleGroup3:
.8252	68		pla				pla 								; get parameters, which is just the opcode.
.8253	fa		plx				plx
.8254	20 91 82	jsr $8291			jsr 	AccessParameters 			; get and output opcode
.8257	20 a9 82	jsr $82a9			jsr 	AssemblerWriteByte
.825a	20 38 84	jsr $8438			jsr 	CalculateOperand 			; get a 16 bit operand
.825d	ad 08 06	lda $0608			lda 	NSMantissa0 				; calculate the offset
.8260	38		sec				sec
.8261	ed 1d 07	sbc $071d			sbc 	AssemblerAddress
.8264	48		pha				pha 								; LSB in A
.8265	ad 10 06	lda $0610			lda 	NSMantissa1
.8268	ed 1e 07	sbc $071e			sbc 	AssemblerAddress+1
.826b	aa		tax				tax 								; MSB in X
.826c	68		pla				pla
.826d	18		clc				clc 								; $80 to easy check $80-$7F, plus 1 for offset error
.826e	69 7f		adc #$7f			adc 	#$7F
.8270	90 01		bcc $8273			bcc 	_AG3NoCarry
.8272	e8		inx				inx
.8273					_AG3NoCarry:
.8273	38		sec				sec 								; fix back and write out anyways.
.8274	e9 80		sbc #$80			sbc 	#$80
.8276	20 a9 82	jsr $82a9			jsr 	AssemblerWriteByte
.8279	e0 00		cpx #$00			cpx 	#0 							; was it in range
.827b	f0 0a		beq $8287			beq 	_AG3Exit
.827d	ad 1f 07	lda $071f			lda 	AssemblerControl 			; are we allowing bad values ?
.8280	29 01		and #$01			and 	#1
.8282	f0 03		beq $8287			beq 	_AG3Exit
.8284	4c 70 a5	jmp $a570			jmp 	RangeError 					; no, branch is out of range
.8287					_AG3Exit:
.8287	60		rts				rts
.8288					AssembleGroup4:
.8288	68		pla				pla 								; pop address
.8289	fa		plx				plx
.828a	20 91 82	jsr $8291			jsr 	AccessParameters 			; access and get first
.828d	20 a9 82	jsr $82a9			jsr 	AssemblerWriteByte 			; output it.
.8290	60		rts				rts
.8291					AccessParameters:
.8291	8d 20 07	sta $0720			sta 	ParamStart
.8294	8e 21 07	stx $0721			stx 	ParamStart+1
.8297	a9 01		lda #$01			lda 	#1
.8299					GetParameter:
.8299	5a		phy				phy
.829a	a8		tay				tay
.829b	ad 20 07	lda $0720			lda 	ParamStart
.829e	85 36		sta $36				sta 	zTemp0
.82a0	ad 21 07	lda $0721			lda 	ParamStart+1
.82a3	85 37		sta $37				sta 	zTemp0+1
.82a5	b1 36		lda ($36),y			lda 	(zTemp0),y
.82a7	7a		ply				ply
.82a8	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/aswrite.asm

.82a9					AssemblerWriteByte:
.82a9	48		pha			pha
.82aa	ad 1f 07	lda $071f		lda 	AssemblerControl 				; check printing bytes ?
.82ad	29 02		and #$02		and 	#2
.82af	f0 1b		beq $82cc		beq 	_AWBNoPrint
.82b1	ad 1e 07	lda $071e		lda		AssemblerAddress+1 				; print address
.82b4	20 e7 82	jsr $82e7		jsr 	PrintHex
.82b7	ad 1d 07	lda $071d		lda		AssemblerAddress
.82ba	20 e7 82	jsr $82e7		jsr 	PrintHex
.82bd	a9 20		lda #$20		lda 	#' '
.82bf	20 d8 a7	jsr $a7d8		jsr 	EXTPrintCharacter
.82c2	68		pla			pla 									; print byte
.82c3	48		pha			pha
.82c4	20 e7 82	jsr $82e7		jsr 	PrintHex
.82c7	a9 0d		lda #$0d		lda 	#13
.82c9	20 d8 a7	jsr $a7d8		jsr 	EXTPrintCharacter
.82cc					_AWBNoPrint:
.82cc	ad 1d 07	lda $071d		lda		AssemblerAddress				; copy address to zTemp0
.82cf	85 36		sta $36			sta 	zTemp0
.82d1	ad 1e 07	lda $071e		lda		AssemblerAddress+1
.82d4	f0 0e		beq $82e4		beq 	_AWBRange
.82d6	85 37		sta $37			sta 	zTemp0+1
.82d8	68		pla			pla 									; write byte out
.82d9	92 36		sta ($36)		sta 	(zTemp0)
.82db	ee 1d 07	inc $071d		inc 	AssemblerAddress 				; bump address
.82de	d0 03		bne $82e3		bne 	_AWBNoCarry
.82e0	ee 1e 07	inc $071e		inc 	AssemblerAddress+1
.82e3					_AWBNoCarry:
.82e3	60		rts			rts
.82e4					_AWBRange:
.82e4	4c 70 a5	jmp $a570		jmp 	RangeError
.82e7					PrintHex:
.82e7	48		pha				pha
.82e8	4a		lsr a				lsr 	a
.82e9	4a		lsr a				lsr 	a
.82ea	4a		lsr a				lsr 	a
.82eb	4a		lsr a				lsr 	a
.82ec	20 f0 82	jsr $82f0			jsr 	_PrintNibble
.82ef	68		pla				pla
.82f0					_PrintNibble:
.82f0	29 0f		and #$0f			and 	#15
.82f2	c9 0a		cmp #$0a			cmp 	#10
.82f4	90 02		bcc $82f8			bcc 	_NoShift
.82f6	69 06		adc #$06			adc 	#6
.82f8					_NoShift:
.82f8	69 30		adc #$30			adc 	#48
.82fa	4c d8 a7	jmp $a7d8			jmp 	EXTPrintCharacter

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/instruction.asm

.82fd					AssembleModeX:
.82fd	5a		phy				phy
.82fe	ad 22 07	lda $0722			lda 	IsGroup1
.8301	f0 17		beq $831a			beq 	_AMXGroup2
.8303	8a		txa				txa 							; is it in group # 1
.8304	29 40		and #$40			and 	#AM_ISG1
.8306	f0 50		beq $8358			beq 	_AMXFail 				; no, give up.
.8308	8a		txa				txa 							; get back.
.8309	29 1f		and #$1f			and 	#$1F 					; this is now the offset.
.830b	e0 e0		cpx #$e0			cpx 	#AM_IMMEDIATE 			; if not immediate, we can continue.
.830d	d0 22		bne $8331			bne 	_AMXHaveInfo
.830f	ad 23 07	lda $0723			lda 	BaseOpcode 				; cannot store immediate.
.8312	c9 81		cmp #$81			cmp 	#$81
.8314	f0 42		beq $8358			beq 	_AMXFail
.8316	a9 08		lda #$08			lda 	#8 						; if immediate we use offset 8.
.8318	80 17		bra $8331			bra 	_AMXHaveInfo 			; odd design decision there.
.831a					_AMXGroup2:
.831a	8a		txa				txa 							; is it in group 2 ?
.831b	29 20		and #$20			and 	#AM_ISG2
.831d	f0 39		beq $8358			beq 	_AMXFail 				; no, give up.
.831f	8a		txa				txa 							; get the offset into Y
.8320	29 1f		and #$1f			and 	#$1F
.8322	4a		lsr a				lsr 	a 						; make it 0-7.
.8323	4a		lsr a				lsr  	a
.8324	a8		tay				tay
.8325	ad 24 07	lda $0724			lda 	ModeMask 				; shift the modemask left so you can check it against the requested offset
.8328					_AMXCheckOkay:
.8328	0a		asl a				asl 	a 						; shift modemask left enough times to check legitimate.
.8329	88		dey				dey
.832a	10 fc		bpl $8328			bpl 	_AMXCheckOkay
.832c	90 2a		bcc $8358			bcc 	_AMXFail 				; not allowed.
.832e	8a		txa				txa  							; get mask back
.832f	29 1f		and #$1f			and 	#$1F
.8331					_AMXHaveInfo:
.8331	e0 00		cpx #$00			cpx 	#$00 					; does it *require* an 8 bit operand
.8333	10 05		bpl $833a			bpl 	_AMXAnySize 			; checking bit 7, the zero page opcode flag.
.8335	ac 10 06	ldy $0610			ldy 	NSMantissa1 			; fail if it is outside range, e.g. the MSB is set.
.8338	d0 1e		bne $8358			bne 	_AMXFail
.833a					_AMXAnySize:
.833a	18		clc				clc 							; add offset to the base opcode
.833b	6d 23 07	adc $0723			adc 	BaseOpcode
.833e					_AMXOutputCode:
.833e	20 a9 82	jsr $82a9			jsr 	AssemblerWriteByte 		; write the opcode out.
.8341	e0 28		cpx #$28			cpx 	#AM_ACC 				; A mode (e.g. ASL A)
.8343	f0 10		beq $8355			beq 	_AMXExit
.8345	ad 08 06	lda $0608			lda 	NSMantissa0 				; write LSB operand
.8348	20 a9 82	jsr $82a9			jsr 	AssemblerWriteByte
.834b	e0 00		cpx #$00			cpx 	#$00 					; zeropage ?
.834d	30 06		bmi $8355			bmi 	_AMXExit
.834f	ad 10 06	lda $0610			lda 	NSMantissa1 			; write MSB operand
.8352	20 a9 82	jsr $82a9			jsr 	AssemblerWriteByte
.8355					_AMXExit:
.8355	7a		ply				ply
.8356	38		sec				sec
.8357	60		rts				rts
.8358					_AMXFail:
.8358	a0 00		ldy #$00			ldy 	#0
.835a					_AMXCheckOddities:
.835a	8a		txa				txa
.835b	d9 83 83	cmp $8383,y			cmp 	ExtraOpcode+2,y 		; match address mode
.835e	d0 16		bne $8376			bne 	_AMXCONext
.8360	b9 81 83	lda $8381,y			lda 	ExtraOpcode+0,y 		; do the base opcodes match
.8363	cd 23 07	cmp $0723			cmp 	BaseOpcode
.8366	d0 0e		bne $8376			bne 	_AMXCONext
.8368	e0 00		cpx #$00			cpx 	#$00 					; requires zero page ?
.836a	10 05		bpl $8371			bpl 	_AMXCONotZero
.836c	ad 10 06	lda $0610			lda 	NSMantissa1
.836f	d0 05		bne $8376			bne 	_AMXCONext
.8371					_AMXCONotZero:
.8371	b9 82 83	lda $8382,y			lda 	ExtraOpcode+1,y 		; get new opcode
.8374	80 c8		bra $833e			bra 	_AMXOutputCode 			; and assemble it
.8376					_AMXCONext:
.8376	c8		iny				iny
.8377	c8		iny				iny
.8378	c8		iny				iny
.8379	b9 81 83	lda $8381,y			lda 	ExtraOpcode+0,y 		; end of table
.837c	d0 dc		bne $835a			bne 	_AMXCheckOddities
.837e					_AMXCOFail:
.837e	7a		ply				ply
.837f	18		clc				clc
.8380	60		rts				rts
.8381					ExtraOpcode:
>8381	40 6c 01					.byte $40,$6c,AM_INDABS 	; jmp
>8384	40 7c 02					.byte $40,$7C,AM_INDABSX 	; jmp
>8387	a2 be 78					.byte $a2,$BE,AM_ABSY 		; ldx
>838a	a2 b6 80					.byte $a2,$B6,AM_ZEROY 		; ldx
>838d	82 96 80					.byte $82,$96,AM_ZEROY 		; stx
>8390	e2 1a 28					.byte $e2,$1a,AM_ACC 		; inc
>8393	c2 3a 28					.byte $c2,$3a,AM_ACC 		; dec
>8396	20 89 e0					.byte $20,$89,AM_IMMEDIATE 	; bit
>8399	60 9c 6c					.byte $60,$9c,AM_ABS 		; stz
>839c	60 9e 7c					.byte $60,$9e,AM_ABSX 		; stz
>839f	00						.byte $00

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/label.asm

.83a0					LabelHere:
.83a0	c8		iny				iny 								; skip .
.83a1	a2 00		ldx #$00			ldx 	#0 							; get a term
.83a3	20 a9 93	jsr $93a9			jsr 	EvaluateTerm 				; get a term
.83a6	ad 00 06	lda $0600			lda 	NSStatus 					; needs to be an integer reference.
.83a9	c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.83ab	d0 24		bne $83d1			bne 	_ALType
.83ad	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy reference address to zTemp0
.83b0	85 36		sta $36				sta 	zTemp0
.83b2	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.83b5	85 37		sta $37				sta 	zTemp0+1
.83b7	5a		phy				phy 								; copy address in.
.83b8	a0 01		ldy #$01			ldy 	#1
.83ba	ad 1d 07	lda $071d			lda	 	AssemblerAddress
.83bd	92 36		sta ($36)			sta 	(zTemp0)
.83bf	ad 1e 07	lda $071e			lda	 	AssemblerAddress+1
.83c2	91 36		sta ($36),y			sta 	(zTemp0),y
.83c4	c8		iny				iny
.83c5	a9 00		lda #$00			lda 	#0
.83c7	91 36		sta ($36),y			sta 	(zTemp0),y
.83c9	c8		iny				iny
.83ca	91 36		sta ($36),y			sta 	(zTemp0),y
.83cc	c8		iny				iny
.83cd	91 36		sta ($36),y			sta 	(zTemp0),y
.83cf	7a		ply				ply
.83d0	60		rts				rts
.83d1					_ALType:
.83d1	4c 75 a5	jmp $a575			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/operands.asm

.83d4					TypeAndCalculateOperand:
.83d4	b1 30		lda ($30),y			lda 	(codePtr),y
.83d6	a2 28		ldx #$28			ldx 	#AM_ACC 					; ACC if : or EOL
.83d8	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.83da	f0 5b		beq $8437			beq 	_TACOExit
.83dc	c9 80		cmp #$80			cmp 	#KWC_EOL
.83de	f0 57		beq $8437			beq 	_TACOExit
.83e0	c8		iny				iny
.83e1	a2 e0		ldx #$e0			ldx 	#AM_IMMEDIATE
.83e3	c9 23		cmp #$23			cmp 	#KWD_HASH 					; if hash, then immediate - constant.
.83e5	f0 51		beq $8438			beq 	CalculateOperand
.83e7	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; if ( then check for indirection
.83e9	f0 1f		beq $840a			beq 	_TACOIndirect
.83eb	88		dey				dey 								; undo get of first character
.83ec	20 38 84	jsr $8438			jsr 	CalculateOperand 			; get operand
.83ef	b1 30		lda ($30),y			lda 	(codePtr),y
.83f1	a2 e4		ldx #$e4			ldx 	#AM_ZEROPAGE 				; if not, try zero page (then absolute)
.83f3	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.83f5	d0 40		bne $8437			bne 	_TACOExit
.83f7	c8		iny				iny
.83f8	20 00 9f	jsr $9f00			jsr 	TACOCheckXY 				; extract X,Y or 0 (neither) from the variable.
.83fb	a2 f4		ldx #$f4			ldx 	#AM_ZEROX 					; check for X
.83fd	c9 58		cmp #$58			cmp 	#'X'
.83ff	f0 36		beq $8437			beq 	_TACOExit
.8401	a2 80		ldx #$80			ldx 	#AM_ZEROY 					; check for Y
.8403	c9 59		cmp #$59			cmp 	#'Y'
.8405	f0 30		beq $8437			beq 	_TACOExit
.8407					_TACOSyntax:
.8407	4c 6b a5	jmp $a56b			jmp 	SyntaxError
.840a					_TACOIndirect:
.840a	20 38 84	jsr $8438			jsr 	CalculateOperand 			; get the operand
.840d	b1 30		lda ($30),y			lda 	(codePtr),y
.840f	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if , then it must be ,X)
.8411	f0 17		beq $842a			beq 	_TACOIndX
.8413	20 89 9f	jsr $9f89			jsr 	CheckRightBracket  			; otherwise must be ) or ),Y
.8416	b1 30		lda ($30),y			lda 	(codePtr),y
.8418	a2 d1		ldx #$d1			ldx 	#AM_IND
.841a	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not comma then exit with (xx)
.841c	d0 19		bne $8437			bne 	_TACOExit
.841e	c8		iny				iny
.841f	20 00 9f	jsr $9f00			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.8422	c9 59		cmp #$59			cmp 	#'Y' 						; check Y
.8424	d0 e1		bne $8407			bne 	_TACOSyntax
.8426	a2 d0		ldx #$d0			ldx 	#AM_INDY
.8428	80 0d		bra $8437			bra 	_TACOExit
.842a					_TACOIndX:
.842a	c8		iny				iny
.842b	20 00 9f	jsr $9f00			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.842e	c9 58		cmp #$58			cmp 	#'X' 						; check X
.8430	d0 d5		bne $8407			bne 	_TACOSyntax
.8432	20 89 9f	jsr $9f89			jsr 	CheckRightBracket			; check )
.8435	a2 c0		ldx #$c0			ldx 	#AM_INDX
.8437					_TACOExit:
.8437	60		rts				rts
.8438					CalculateOperand:
.8438	48		pha				pha
.8439	da		phx				phx
.843a	a2 00		ldx #$00			ldx 	#0 							; get 16 bit integer in Slot 0
.843c	20 ae 97	jsr $97ae			jsr 	Evaluate16BitInteger
.843f	fa		plx				plx
.8440	68		pla				pla
.8441	60		rts				rts
.9f00					TACOCheckXY:
.9f00	b1 30		lda ($30),y			lda 	(codePtr),y
.9f02	29 c0		and #$c0			and 	#$C0 						; check it is an identifier reference.
.9f04	c9 40		cmp #$40			cmp 	#$40
.9f06	d0 21		bne $9f29			bne 	_TCXYFail
.9f08	b1 30		lda ($30),y			lda 	(codePtr),y
.9f0a	18		clc				clc
.9f0b	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.9f0d	85 37		sta $37				sta 	zTemp0+1
.9f0f	c8		iny				iny
.9f10	b1 30		lda ($30),y			lda 	(codePtr),y
.9f12	c8		iny				iny
.9f13	85 36		sta $36				sta 	zTemp0
.9f15	5a		phy				phy 								; save position
.9f16	a0 02		ldy #$02			ldy 	#2 							; type is integer ?
.9f18	b1 36		lda ($36),y			lda 	(zTemp0),y
.9f1a	d0 0c		bne $9f28			bne 	_TCXYPopFail
.9f1c	a0 08		ldy #$08			ldy 	#8 							; get first character, should have bit 7 set as also last.
.9f1e	b1 36		lda ($36),y			lda 	(zTemp0),y
.9f20	c9 d8		cmp #$d8			cmp 	#'X'+$80 					; should be X or Y
.9f22	f0 08		beq $9f2c			beq 	_TCXYFound
.9f24	c9 d9		cmp #$d9			cmp 	#'Y'+$80
.9f26	f0 04		beq $9f2c			beq 	_TCXYFound
.9f28					_TCXYPopFail:
.9f28	7a		ply				ply
.9f29					_TCXYFail:
.9f29	a9 00		lda #$00			lda 	#0
.9f2b	60		rts				rts
.9f2c					_TCXYFound:
.9f2c	7a		ply				ply 								; restore position
.9f2d	29 7f		and #$7f			and 	#$7F 						; throw bit 7
.9f2f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/editor.asm

.8442					EditProgramCode:
.8442	ad 26 07	lda $0726			lda 	TokenLineNumber 			; find the line.
.8445	ae 27 07	ldx $0727			ldx 	TokenLineNumber+1
.8448	20 cd 9e	jsr $9ecd			jsr 	MemorySearch
.844b	90 05		bcc $8452			bcc 	_EPCNoDelete 				; reached the end don't delete
.844d	d0 03		bne $8452			bne 	_EPCNoDelete 				; found slot but didn't match, no delete
.844f	20 22 a8	jsr $a822			jsr 	MemoryDeleteLine 			; delete the line
.8452					_EPCNoDelete:
.8452	ad 28 07	lda $0728			lda 	TokenBuffer 				; buffer empty
.8455	c9 80		cmp #$80			cmp 	#KWC_EOL
.8457	f0 0d		beq $8466			beq 	_EPCNoInsert
.8459	ad 26 07	lda $0726			lda 	TokenLineNumber 			; find the line - it cannot exist.
.845c	ae 27 07	ldx $0727			ldx 	TokenLineNumber+1 			; so this can't fail, it returns some point in the code.
.845f	20 cd 9e	jsr $9ecd			jsr 	MemorySearch
.8462	18		clc				clc 								; insert at this point.
.8463	20 59 a8	jsr $a859			jsr 	MemoryInsertLine 			; insert the line
.8466					_EPCNoInsert:
.8466	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/warmstart.asm

.8467					WarmStart:
.8467	a2 ff		ldx #$ff			ldx 	#$FF
.8469	9a		txs				txs
.846a	20 ee a7	jsr $a7ee			jsr 	EXTInputLine 				; get line to lineBuffer
.846d	20 2c 9c	jsr $9c2c			jsr 	TokeniseLine 				; tokenise the line
.8470	ad 26 07	lda $0726			lda 	TokenLineNumber 			; line number ?
.8473	0d 27 07	ora $0727			ora 	TokenLineNumber+1
.8476	d0 17		bne $848f			bne 	_WSEditCode 				; if so,edit code.
.8478	9c 25 07	stz $0725			stz 	TokenOffset 				; zero offset, meaning it only runs one line.
.847b	a9 25		lda #$25			lda 	#((TokenOffset) & $FF)
.847d	85 30		sta $30				sta 	codePtr
.847f	a9 07		lda #$07			lda 	#((TokenOffset) >> 8)
.8481	85 31		sta $31				sta 	codePtr+1
.8483	ad 28 07	lda $0728			lda 	TokenBuffer 				; nothing to run
.8486	c9 80		cmp #$80			cmp 	#KWC_EOL
.8488	f0 dd		beq $8467			beq 	WarmStart
.848a	20 1e 8a	jsr $8a1e			jsr 	RUNCodePointerLine 			; execute that line.
.848d	80 d8		bra $8467			bra 	WarmStart
.848f					_WSEditCode:
.848f	20 42 84	jsr $8442			jsr 	EditProgramCode
.8492	20 d4 84	jsr $84d4			jsr 	ClearCommand
.8495	80 d0		bra $8467			bra 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assemble.asm

.8497					AssembleCommand:
.8497	a2 00		ldx #$00			ldx 	#0
.8499	20 ae 97	jsr $97ae			jsr 	Evaluate16BitInteger 		; start address
.849c	ad 08 06	lda $0608			lda 	NSMantissa0
.849f	8d 1d 07	sta $071d			sta 	AssemblerAddress
.84a2	ad 10 06	lda $0610			lda 	NSMantissa1
.84a5	8d 1e 07	sta $071e			sta 	AssemblerAddress+1
.84a8	20 91 9f	jsr $9f91			jsr 	CheckComma
.84ab	20 ba 97	jsr $97ba			jsr 	Evaluate8BitInteger 		; options
.84ae	ad 08 06	lda $0608			lda 	NSMantissa0
.84b1	8d 1f 07	sta $071f			sta 	AssemblerControl
.84b4	60		rts				rts
.84b5	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assert.asm

.84b6					AssertCommand:
.84b6	a2 00		ldx #$00			ldx 	#0
.84b8	20 99 97	jsr $9799			jsr 	EvaluateInteger 			; the assert test
.84bb	20 52 98	jsr $9852			jsr 	NSMIsZero 					; exit if result is non zero.
.84be	d0 05		bne $84c5			bne 	_ACExit
.84c0	a9 0a		lda #$0a		lda	#10
.84c2	4c cf 8c	jmp $8ccf		jmp	ErrorHandler
.84c5					_ACExit:
.84c5	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/call.asm

.84c6					CallCommand:
.84c6	a2 00		ldx #$00			ldx 	#0
.84c8	20 ae 97	jsr $97ae			jsr 	Evaluate16BitInteger
.84cb	ad 10 06	lda $0610			lda 	NSMantissa1
.84ce	8d 09 06	sta $0609			sta 	NSMantissa0+1
.84d1	6c 08 06	jmp ($0608)			jmp 	(NSMantissa0)

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/clear.asm

.84d4					ClearCommand:
.84d4	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.84d6	85 36		sta $36				sta 	0+zTemp0
.84d8	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.84da	85 37		sta $37				sta 	1+zTemp0
.84dc					_ClearZeroLoop:
.84dc	b2 36		lda ($36)			lda 	(zTemp0) 					; end of variables
.84de	f0 24		beq $8504			beq 	_ClearZeroEnd
.84e0	a0 03		ldy #$03			ldy 	#3 							; erase the variables
.84e2	a9 00		lda #$00			lda 	#0
.84e4					_ClearOneVariable:
.84e4	91 36		sta ($36),y			sta 	(zTemp0),y
.84e6	c8		iny				iny
.84e7	c0 08		cpy #$08			cpy 	#8
.84e9	d0 f9		bne $84e4			bne 	_ClearOneVariable
.84eb	a0 02		ldy #$02			ldy 	#2 							; has it been marked procedure
.84ed	b1 36		lda ($36),y			lda 	(zTemp0),y
.84ef	c9 18		cmp #$18			cmp 	#NSTProcedure
.84f1	d0 04		bne $84f7			bne 	_ClearNotProcedure
.84f3	a9 04		lda #$04			lda 	#NSTInteger+NSBIsArray 		; set it back to an integer array
.84f5	91 36		sta ($36),y			sta 	(zTemp0),y
.84f7					_ClearNotProcedure:
.84f7	18		clc				clc 								; go to the next variable
.84f8	b2 36		lda ($36)			lda 	(zTemp0)
.84fa	65 36		adc $36				adc 	zTemp0
.84fc	85 36		sta $36				sta 	zTemp0
.84fe	90 dc		bcc $84dc			bcc 	_ClearZeroLoop
.8500	e6 37		inc $37				inc 	zTemp0+1
.8502	80 d8		bra $84dc			bra 	_ClearZeroLoop
.8504					_ClearZeroEnd:
.8504	18		clc				clc
.8505	a5 36		lda $36				lda 	zTemp0
.8507	69 01		adc #$01			adc 	#1
.8509	8d 0c 07	sta $070c			sta 	lowMemPtr
.850c	a5 37		lda $37				lda 	zTemp0+1
.850e	69 00		adc #$00			adc 	#0
.8510	8d 0d 07	sta $070d			sta 	lowMemPtr+1
.8513	20 d5 98	jsr $98d5			jsr 	StackReset
.8516	20 6a a7	jsr $a76a			jsr 	StringSystemInitialise
.8519	20 ef 8b	jsr $8bef			jsr 	ProcedureScan
.851c	20 da 89	jsr $89da			jsr 	Command_Restore
.851f	9c 1d 07	stz $071d			stz 	AssemblerAddress
.8522	9c 1e 07	stz $071e			stz 	AssemblerAddress+1
.8525	9c 1f 07	stz $071f			stz 	AssemblerControl
.8528	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/data.asm

.8529					Command_Data:
.8529	a9 3a		lda #$3a			lda 	#KWD_COLON 					; advance to colon/EOL
.852b	a2 80		ldx #$80			ldx 	#KWC_EOL
.852d	20 41 8c	jsr $8c41			jsr 	ScanForward
.8530	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/dim.asm

.8531					DimCommand:
.8531	b1 30		lda ($30),y			lda 	(codePtr),y
.8533	29 c0		and #$c0			and 	#$C0
.8535	c9 40		cmp #$40			cmp 	#$40
.8537	d0 7a		bne $85b3			bne 	_DCSyntax
.8539	b1 30		lda ($30),y			lda 	(codePtr),y
.853b	18		clc				clc
.853c	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.853e	85 3f		sta $3f				sta 	zaTemp+1
.8540	c8		iny				iny
.8541	b1 30		lda ($30),y			lda 	(codePtr),y
.8543	c8		iny				iny
.8544	85 3e		sta $3e				sta 	zaTemp
.8546	5a		phy				phy
.8547	a0 02		ldy #$02			ldy 	#2 						; read type byte
.8549	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.854b	29 18		and #$18			and 	#NSBTypeMask 			; check it's not a procedure
.854d	c9 18		cmp #$18			cmp 	#NSTProcedure
.854f	f0 62		beq $85b3			beq 	_DCSyntax
.8551	b1 3e		lda ($3e),y			lda 	(zaTemp),y 				; check it's an array
.8553	29 04		and #$04			and 	#NSBIsArray
.8555	f0 64		beq $85bb			beq 	_DCType
.8557	a0 04		ldy #$04			ldy 	#4 						; check not already defined
.8559	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.855b	d0 59		bne $85b6			bne 	_DCRedefine
.855d	7a		ply				ply
.855e	20 be 85	jsr $85be			jsr 	_DCGetSize 				; get array size, check it.
.8561	5a		phy				phy
.8562	a0 05		ldy #$05			ldy 	#5 						; store in first array size slot
.8564	91 3e		sta ($3e),y			sta 	(zaTemp),y 				; second will be zero.
.8566	7a		ply				ply 							; is there a second (e.g. ,x)
.8567	b1 30		lda ($30),y			lda 	(codePtr),y
.8569	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.856b	d0 0a		bne $8577			bne 	_DCOneDimension
.856d	c8		iny				iny 							; skip comma
.856e	20 be 85	jsr $85be			jsr 	_DCGetSize 				; get 2nd array size
.8571	5a		phy				phy
.8572	a0 06		ldy #$06			ldy 	#6 						; store in 2nd array size
.8574	91 3e		sta ($3e),y			sta 	(zaTemp),y
.8576	7a		ply				ply
.8577					_DCOneDimension:
.8577	5a		phy				phy 							; save position
.8578	a0 05		ldy #$05			ldy 	#5 						; dimensions + 1 in AX (as zero based)
.857a	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.857c	aa		tax				tax
.857d	c8		iny				iny
.857e	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8580	e8		inx				inx 							; bump them.
.8581	1a		inc a				inc 	a
.8582	20 0b a4	jsr $a40b			jsr 	Multiply8x8 			; work out the total number of elements -> zTemp0
.8585	a5 37		lda $37				lda 	zTemp0+1 				; don't allow more than 8192 elements whatever
.8587	29 e0		and #$e0			and 	#$E0
.8589	d0 23		bne $85ae			bne 	_DCSize
.858b	a0 02		ldy #$02			ldy 	#2 						; get base type
.858d	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.858f	20 cc 85	jsr $85cc			jsr 	ScaleByBaseType 		; scale by base type
.8592	a5 36		lda $36				lda 	zTemp0
.8594	a6 37		ldx $37				ldx 	zTemp0+1
.8596	20 58 95	jsr $9558			jsr 	AllocateXABytes 		; allocate memory
.8599	a0 03		ldy #$03			ldy 	#3 						; copy into the address.
.859b	91 3e		sta ($3e),y			sta 	(zaTemp),y
.859d	c8		iny				iny
.859e	8a		txa				txa
.859f	91 3e		sta ($3e),y			sta 	(zaTemp),y
.85a1	7a		ply				ply 							; get position back
.85a2	20 89 9f	jsr $9f89			jsr 	CheckRightBracket 		; check )
.85a5	b1 30		lda ($30),y			lda 	(codePtr),y
.85a7	c8		iny				iny 							; consume in case
.85a8	c9 2c		cmp #$2c			cmp 	#KWD_COMMA		 		; if so do another DIM.
.85aa	f0 85		beq $8531			beq 	DimCommand
.85ac	88		dey				dey 							; undo consume
.85ad	60		rts				rts
.85ae					_DCSize:
.85ae	a9 16		lda #$16		lda	#22
.85b0	4c cf 8c	jmp $8ccf		jmp	ErrorHandler
.85b3					_DCSyntax:
.85b3	4c 6b a5	jmp $a56b			jmp 	SyntaxError
.85b6					_DCRedefine:
.85b6	a9 15		lda #$15		lda	#21
.85b8	4c cf 8c	jmp $8ccf		jmp	ErrorHandler
.85bb					_DCType:
.85bb	4c 75 a5	jmp $a575			jmp 	TypeError
.85be					_DCGetSize:
.85be	a2 00		ldx #$00			ldx 	#0 						; get first index.
.85c0	20 ba 97	jsr $97ba			jsr 	Evaluate8BitInteger 	; get array dimension
.85c3	c9 00		cmp #$00			cmp 	#0 						; must be 1-254
.85c5	f0 e7		beq $85ae			beq 	_DCSize
.85c7	c9 fe		cmp #$fe			cmp 	#254
.85c9	f0 e3		beq $85ae			beq 	_DCSize
.85cb	60		rts				rts
.85cc					ScaleByBaseType:
.85cc	29 10		and #$10			and 	#NSBIsString 			; is it string
.85ce	d0 19		bne $85e9			bne 	_SBBTString
.85d0	a5 37		lda $37				lda 	zTemp0+1 				; push value on stack
.85d2	48		pha				pha
.85d3	a5 36		lda $36				lda 	zTemp0
.85d5	48		pha				pha
.85d6	06 36		asl $36				asl 	zTemp0 					; x 2
.85d8	26 37		rol $37				rol 	zTemp0+1
.85da	06 36		asl $36				asl 	zTemp0 					; x 4
.85dc	26 37		rol $37				rol 	zTemp0+1
.85de	68		pla				pla 							; add stacked value = x 5
.85df	65 36		adc $36				adc 	zTemp0
.85e1	85 36		sta $36				sta 	zTemp0
.85e3	68		pla				pla
.85e4	65 37		adc $37				adc 	zTemp0+1
.85e6	85 37		sta $37				sta 	zTemp0+1
.85e8	60		rts				rts
.85e9					_SBBTString:
.85e9	06 36		asl $36				asl 	zTemp0
.85eb	26 37		rol $37				rol 	zTemp0+1
.85ed	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/end.asm

.85ee					EndCommand:
.85ee	4c 67 84	jmp $8467			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/for.asm

.85f1					ForCommand:
.85f1	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; allocate 18 bytes on the return stack.
.85f3	20 75 98	jsr $9875			jsr 	StackOpen
.85f6	a2 00		ldx #$00			ldx 	#0
.85f8	20 a9 93	jsr $93a9			jsr 	EvaluateTerm
.85fb	bd 00 06	lda $0600,x			lda 	NSStatus,x
.85fe	c9 20		cmp #$20			cmp 	#NSBIsReference+NSTInteger 	; do we have an integer 4 byte reference.
.8600	d0 49		bne $864b			bne		_FCError
.8602	a9 3d		lda #$3d			lda 	#KWD_EQUAL 					; =
.8604	20 99 9f	jsr $9f99			jsr 	CheckNextA
.8607	e8		inx				inx
.8608	20 99 97	jsr $9799			jsr 	EvaluateInteger 			; <from> in +1
.860b	b1 30		lda ($30),y			lda 	(codePtr),y
.860d	c8		iny				iny 								; consume it
.860e	48		pha				pha 								; save on stack for later
.860f	c9 a5		cmp #$a5			cmp 	#KWD_DOWNTO
.8611	f0 04		beq $8617			beq 	_FCNoSyntax
.8613	c9 af		cmp #$af			cmp 	#KWD_TO
.8615	d0 37		bne $864e			bne 	_FCSyntaxError
.8617					_FCNoSyntax:
.8617	e8		inx				inx
.8618	20 99 97	jsr $9799			jsr 	EvaluateInteger
.861b	20 b4 98	jsr $98b4			jsr 	STKSaveCodePosition 		; save loop back position
.861e	68		pla				pla 								; restore DOWNTO or TO
.861f	5a		phy				phy 								; save Y on the stack
.8620	49 a5		eor #$a5			eor 	#KWD_DOWNTO 				; 0 if DOWNTO, #0 if TO
.8622	f0 02		beq $8626			beq 	_FCNotDownTo
.8624	a9 02		lda #$02			lda 	#2
.8626					_FCNotDownTo:
.8626	3a		dec a				dec 	a 							; 255 if DOWNTO, 1 if TO
.8627	a0 10		ldy #$10			ldy 	#16
.8629	91 34		sta ($34),y			sta 	(basicStack),y 				; copy that out to the Basic Stack.
.862b	a0 06		ldy #$06			ldy 	#6
.862d	ad 08 06	lda $0608			lda 	NSMantissa0
.8630	91 34		sta ($34),y			sta 	(basicStack),y
.8632	ad 10 06	lda $0610			lda 	NSMantissa1
.8635	c8		iny				iny
.8636	91 34		sta ($34),y			sta 	(basicStack),y
.8638	a0 08		ldy #$08			ldy 	#8 							; set initial index value
.863a	a2 01		ldx #$01			ldx 	#1
.863c	20 51 86	jsr $8651			jsr 	FCIntegerToStack
.863f	a0 0c		ldy #$0c			ldy 	#12 						; set the terminal value
.8641	a2 02		ldx #$02			ldx 	#2
.8643	20 51 86	jsr $8651			jsr 	FCIntegerToStack
.8646	20 71 86	jsr $8671			jsr 	CopyIndexToReference
.8649	7a		ply				ply 								; restore position
.864a	60		rts				rts
.864b					_FCError:
.864b	4c 75 a5	jmp $a575			jmp 	TypeError
.864e					_FCSyntaxError:
.864e	4c 6b a5	jmp $a56b			jmp 	SyntaxError
.8651					FCIntegerToStack:
.8651	3c 00 06	bit $0600,x			bit 	NSStatus,x 					; is the value negative
.8654	10 03		bpl $8659			bpl	 	_FCNotNegative
.8656	20 d7 97	jsr $97d7			jsr 	NSMNegateMantissa 			; if so 2's complement the mantissa
.8659					_FCNotNegative:
.8659	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy out to the basic stack
.865c	91 34		sta ($34),y			sta 	(basicStack),y
.865e	c8		iny				iny
.865f	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8662	91 34		sta ($34),y			sta 	(basicStack),y
.8664	c8		iny				iny
.8665	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.8668	91 34		sta ($34),y			sta 	(basicStack),y
.866a	c8		iny				iny
.866b	bd 20 06	lda $0620,x			lda 	NSMantissa3,x
.866e	91 34		sta ($34),y			sta 	(basicStack),y
.8670	60		rts				rts
.8671					CopyIndexToReference:
.8671	5a		phy				phy
.8672	a0 06		ldy #$06			ldy 	#6 							; copy address-8 to write to zTemp0
.8674	38		sec				sec 								; (because we copy from offset 8)
.8675	b1 34		lda ($34),y			lda 	(basicStack),y
.8677	e9 08		sbc #$08			sbc 	#8
.8679	85 36		sta $36				sta 	zTemp0
.867b	c8		iny				iny
.867c	b1 34		lda ($34),y			lda 	(basicStack),y
.867e	e9 00		sbc #$00			sbc 	#0
.8680	85 37		sta $37				sta 	zTemp0+1
.8682	a2 04		ldx #$04			ldx 	#4 							; this is the copy counter/
.8684	a0 0b		ldy #$0b			ldy 	#8+3 		 				; the MSB of the mantissa
.8686	b1 34		lda ($34),y			lda 	(basicStack),y
.8688	0a		asl a				asl 	a 							; into carry
.8689	a0 08		ldy #$08			ldy 	#8 							; where to copy from.
.868b	90 14		bcc $86a1			bcc 	_CITRNormal
.868d	38		sec				sec
.868e					_CITRNegative:
.868e	a9 00		lda #$00			lda 	#0
.8690	f1 34		sbc ($34),y			sbc 	(basicStack),y
.8692	91 36		sta ($36),y			sta 	(zTemp0),y
.8694	c8		iny				iny
.8695	ca		dex				dex
.8696	d0 f6		bne $868e			bne 	_CITRNegative
.8698	88		dey				dey 								; look at MSB of mantissa
.8699	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set the MSB as negative packed.
.869b	09 80		ora #$80			ora 	#$80
.869d	91 36		sta ($36),y			sta 	(zTemp0),y
.869f	7a		ply				ply
.86a0	60		rts				rts
.86a1					_CITRNormal:
.86a1	b1 34		lda ($34),y			lda 	(basicStack),y 				; copy without negation.
.86a3	91 36		sta ($36),y			sta 	(zTemp0),y
.86a5	c8		iny				iny
.86a6	ca		dex				dex
.86a7	d0 f8		bne $86a1			bne 	_CITRNormal
.86a9	7a		ply				ply 								; and exit.
.86aa	60		rts				rts
.86ab					NextCommand:
.86ab	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; check FOR is TOS
.86ad	a2 11		ldx #$11			ldx 	#ERRID_FOR 					; this error
.86af	20 9c 98	jsr $989c			jsr 	StackCheckFrame
.86b2	5a		phy				phy
.86b3	a0 10		ldy #$10			ldy 	#16 						; get the step count
.86b5	b1 34		lda ($34),y			lda 	(basicStack),y
.86b7	85 36		sta $36				sta 	zTemp0 						; this is the sign extend
.86b9	30 02		bmi $86bd			bmi 	_NCStepNeg
.86bb	64 36		stz $36				stz 	zTemp0 						; which is 0 or 255
.86bd					_NCStepNeg:
.86bd	a0 08		ldy #$08			ldy 	#8 							; offset to bump
.86bf	a2 04		ldx #$04			ldx 	#4 							; count to bump
.86c1	18		clc				clc
.86c2					_NCBump:
.86c2	71 34		adc ($34),y			adc 	(basicStack),y 				; add it
.86c4	91 34		sta ($34),y			sta 	(basicStack),y
.86c6	a5 36		lda $36				lda 	zTemp0 						; get sign extend for next time.
.86c8	c8		iny				iny 								; next byte
.86c9	ca		dex				dex 								; do four times
.86ca	d0 f6		bne $86c2			bne 	_NCBump
.86cc	20 71 86	jsr $8671			jsr		CopyIndexToReference		; copy it to the reference variable.
.86cf	a0 10		ldy #$10			ldy 	#16 						; get step count again
.86d1	b1 34		lda ($34),y			lda 	(basicStack),y
.86d3	0a		asl a				asl 	a 							; sign bit to carry
.86d4	a9 0c		lda #$0c			lda 	#12 						; offset of LHS = terminal offset
.86d6	85 38		sta $38				sta 	zTemp1
.86d8	90 02		bcc $86dc			bcc 	_NCCompRev 					; use if step is +ve
.86da	a9 08		lda #$08			lda 	#8 							; now the LHS = index value
.86dc					_NCCompRev:
.86dc	85 38		sta $38				sta 	zTemp1 						; so zTemp0 is the index for LHS
.86de	49 04		eor #$04			eor 	#(8^12) 					; and zTemp0+1 is the index for RHS
.86e0	85 39		sta $39				sta 	zTemp1+1
.86e2	a2 04		ldx #$04			ldx 	#4 							; bytes to compare
.86e4	38		sec				sec
.86e5					_NCCompare:
.86e5	a4 38		ldy $38				ldy 	zTemp1 						; do compare using the two indices
.86e7	b1 34		lda ($34),y			lda 	(basicStack),y
.86e9	a4 39		ldy $39				ldy 	zTemp1+1
.86eb	f1 34		sbc ($34),y			sbc 	(basicStack),y
.86ed	e6 38		inc $38				inc 	zTemp1 						; bump the indices (inc,dex do not change C or V)
.86ef	e6 39		inc $39				inc 	zTemp1+1
.86f1	ca		dex				dex 								; do it 4 times.
.86f2	d0 f1		bne $86e5			bne 	_NCCompare
.86f4	50 02		bvc $86f8			bvc 	_NCNoOverflow 				; convert to signed comparison
.86f6	49 80		eor #$80			eor 	#$80
.86f8					_NCNoOverflow:
.86f8	7a		ply				ply 								; restore Y position
.86f9	0a		asl a				asl 	a 							; is bit 7 set.
.86fa	90 04		bcc $8700			bcc 	_NCLoopback 				; if no , >= so loop back
.86fc	20 8e 98	jsr $988e			jsr 	StackClose 					; exit the loop
.86ff	60		rts				rts
.8700					_NCLoopBack:
.8700	20 c5 98	jsr $98c5			jsr 	STKLoadCodePosition 		; loop back
.8703	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/gosub.asm

.8704					Command_GOSUB:
.8704	a2 00		ldx #$00			ldx 	#0
.8706	20 ae 97	jsr $97ae			jsr 	Evaluate16BitInteger 		; line number in Stack.0
.8709	a9 e3		lda #$e3			lda 	#STK_GOSUB+3
.870b	20 75 98	jsr $9875			jsr 	StackOpen 					; create frame
.870e	20 b4 98	jsr $98b4			jsr 	STKSaveCodePosition 		; save current position
.8711	4c 27 87	jmp $8727			jmp 	GotoStackX
.8714					Command_RETURN:
.8714	a9 e0		lda #$e0			lda 	#STK_GOSUB 					; check TOS is this
.8716	a2 0e		ldx #$0e			ldx 	#ERRID_GOSUB 				; this error
.8718	20 9c 98	jsr $989c			jsr 	StackCheckFrame
.871b	20 c5 98	jsr $98c5			jsr 	STKLoadCodePosition 		; restore code position
.871e	20 8e 98	jsr $988e			jsr 	StackClose
.8721	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/goto.asm

.8722					GotoCommand:
.8722	a2 00		ldx #$00			ldx 	#0 							; GOTO where
.8724	20 ae 97	jsr $97ae			jsr 	Evaluate16BitInteger
.8727					GotoStackX:
.8727	bd 10 06	lda $0610,x			lda  	NSMantissa1,x 				; put line # in XA. I'll keep this even though
.872a	48		pha				pha 								; it is slightly inefficient, just in cases.
.872b	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.872e	fa		plx				plx
.872f	20 cd 9e	jsr $9ecd			jsr 	MemorySearch 				; transfer to line number AX.
.8732	90 05		bcc $8739			bcc 	_GotoError 					; not found, off end.
.8734	d0 03		bne $8739			bne 	_GotoError 					; not found exactly
.8736	4c 17 8a	jmp $8a17			jmp 	RunNewLine 					; and go straight to new line code.
.8739					_GotoError:
.8739	a9 0d		lda #$0d		lda	#13
.873b	4c cf 8c	jmp $8ccf		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/if.asm

.873e					IfCommand:
.873e	a2 00		ldx #$00			ldx 	#0 							; If what.
.8740	20 76 97	jsr $9776			jsr 	EvaluateNumber
.8743	b1 30		lda ($30),y			lda 	(codePtr),y
.8745	c9 9e		cmp #$9e			cmp 	#KWD_THEN  					; could be THEN <stuff> or GOTO
.8747	d0 0a		bne $8753			bne 	_IFStructured
.8749	c8		iny				iny 								; consume THEN
.874a	20 52 98	jsr $9852			jsr 	NSMIsZero 					; is it zero
.874d	f0 01		beq $8750			beq 	_IfFail 					; if fail, go to next line
.874f	60		rts				rts 								; if THEN just continue
.8750					_IfFail:
.8750	4c 78 8a	jmp $8a78			jmp 	EOLCommand
.8753					_IfStructured:
.8753	20 52 98	jsr $9852			jsr 	NSMIsZero 					; is it zero
.8756	d0 07		bne $875f			bne 	_IfExit 					; if not, then continue normally.
.8758	a9 a6		lda #$a6			lda 	#KWD_ELSE 					; look for else/endif
.875a	a2 9b		ldx #$9b			ldx 	#KWD_ENDIF
.875c	20 41 8c	jsr $8c41			jsr 	ScanForward 				; and run from there/
.875f					_IfExit:
.875f	60		rts				rts
.8760					ElseCode:
.8760	a9 9b		lda #$9b			lda 	#KWD_ENDIF 					; else is only run after the if clause succeeds
.8762	aa		tax				tax 								; so just go to the structure exit
.8763	20 41 8c	jsr $8c41			jsr 	ScanForward
.8766	60		rts				rts
.8767					EndIf:
.8767	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/let.asm

.8768					LetCommand:
.8768	a2 00		ldx #$00			ldx 	#0
.876a	ad c0 90	lda $90c0			lda 	PrecedenceLevel+"*"			; precedence > this
.876d	20 da 90	jsr $90da			jsr 	EvaluateExpressionAtPrecedence
.8770	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; is it a reference to an array
.8773	c9 38		cmp #$38			cmp		#NSTProcedure+NSBIsReference
.8775	f0 0e		beq $8785			beq 	_LetGoProc 					; it's a procedure call.
.8777	a9 3d		lda #$3d			lda 	#"=" 						; check =
.8779	20 99 9f	jsr $9f99			jsr 	CheckNextA
.877c	e8		inx				inx 								; RHS
.877d	20 6d 97	jsr $976d			jsr 	EvaluateValue
.8780	ca		dex				dex
.8781	20 88 87	jsr $8788			jsr 	AssignVariable
.8784	60		rts				rts
.8785					_LetGoProc:
.8785	4c 21 89	jmp $8921			jmp 	CallProcedure
.8788					AssignVariable:
.8788	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check the string/number type bits match
.878b	48		pha				pha 								; save a copy
.878c	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.878f	29 10		and #$10			and 	#NSBIsString
.8791	d0 0b		bne $879e			bne 	_ASError
.8793	68		pla				pla 								; get back
.8794	29 10		and #$10			and 	#NSBIsString 				; check type
.8796	d0 03		bne $879b			bne 	_ASString
.8798	4c 15 91	jmp $9115			jmp 	AssignNumber
.879b					_ASString:
.879b	4c 83 91	jmp $9183			jmp 	AssignString
.879e					_ASError:
.879e	4c 75 a5	jmp $a575			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/list.asm

.87a1					Command_List:
.87a1	9c 0c 06	stz $060c			stz		NSMantissa0+4				; set the lower (slot 4) to 0 and upper (slot 7) to $FFFF
.87a4	9c 14 06	stz $0614			stz 	NSMantissa1+4
.87a7	a9 ff		lda #$ff			lda 	#$FF
.87a9	8d 0f 06	sta $060f			sta 	NSMantissa0+7
.87ac	8d 17 06	sta $0617			sta 	NSMantissa1+7
.87af	b1 30		lda ($30),y			lda 	(codePtr),y
.87b1	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.87b3	f0 1e		beq $87d3			beq 	_CLSecond
.87b5	20 31 88	jsr $8831			jsr 	CLIsDigit 					; if not digit, list all
.87b8	b0 24		bcs $87de			bcs 	_CLStart
.87ba	a2 04		ldx #$04			ldx 	#4 							; get 1st range into slot 4
.87bc	20 ae 97	jsr $97ae			jsr 	Evaluate16BitInteger
.87bf	b1 30		lda ($30),y			lda 	(codePtr),y
.87c1	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.87c3	f0 0e		beq $87d3			beq 	_CLSecond 					; if so go get it
.87c5	ad 0c 06	lda $060c			lda 	NSMantissa0+4 				; copy 4->7
.87c8	8d 0f 06	sta $060f			sta 	NSMantissa0+7
.87cb	ad 14 06	lda $0614			lda 	NSMantissa1+4
.87ce	8d 17 06	sta $0617			sta 	NSMantissa1+7
.87d1	80 0b		bra $87de			bra 	_CLStart
.87d3					_CLSecond:
.87d3	c8		iny				iny 								; consume comma
.87d4	20 31 88	jsr $8831			jsr 	CLIsDigit 					; digit found
.87d7	b0 05		bcs $87de			bcs 	_CLStart 					; if not, continue listing
.87d9	a2 07		ldx #$07			ldx 	#7 							; load 2nd range into slot 7
.87db	20 ae 97	jsr $97ae			jsr 	Evaluate16BitInteger
.87de					_CLStart
.87de	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.87e0	85 30		sta $30				sta 	codePtr
.87e2	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.87e4	85 31		sta $31				sta 	codePtr+1
.87e6					_CLLoop:
.87e6	20 19 a8	jsr $a819			jsr 	EXTBreakCheck 				; break check
.87e9	f0 30		beq $881b			beq 	_CLExit
.87eb	b2 30		lda ($30)			lda 	(codePtr)
.87ed	f0 2c		beq $881b			beq 	_CLExit
.87ef	a2 04		ldx #$04			ldx 	#4 							; check range every time, line numbers aren't in order.
.87f1	20 1e 88	jsr $881e			jsr 	CLCompareLineNo
.87f4	90 18		bcc $880e			bcc 	_CLNext
.87f6	a2 07		ldx #$07			ldx 	#7
.87f8	20 1e 88	jsr $881e			jsr 	CLCompareLineNo
.87fb	f0 02		beq $87ff			beq 	_CLDoThisOne
.87fd	b0 0f		bcs $880e			bcs 	_CLNext
.87ff					_CLDoThisOne:
.87ff	20 9d 8a	jsr $8a9d			jsr 	ListConvertLine 			; convert line into token Buffer
.8802	a2 07		ldx #$07			ldx 	#(tokenBuffer >> 8) 		; print that line
.8804	a9 28		lda #$28			lda 	#(tokenBuffer & $FF)
.8806	20 28 8d	jsr $8d28			jsr 	PrintStringXA
.8809	a9 0d		lda #$0d			lda 	#13 						; new line
.880b	20 d8 a7	jsr $a7d8			jsr 	EXTPrintCharacter
.880e					_CLNext:
.880e	18		clc				clc
.880f	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8811	65 30		adc $30				adc 	codePtr
.8813	85 30		sta $30				sta 	codePtr
.8815	90 02		bcc $8819			bcc 	_CREExit
.8817	e6 31		inc $31				inc 	codePtr+1
.8819					_CREExit:
.8819	80 cb		bra $87e6			bra 	_CLLoop
.881b					_CLExit:
.881b	4c 67 84	jmp $8467			jmp 	WarmStart
.881e					CLCompareLineNo:
.881e	38		sec				sec
.881f	a0 01		ldy #$01			ldy 	#1
.8821	b1 30		lda ($30),y			lda 	(codePtr),y
.8823	fd 08 06	sbc $0608,x			sbc 	NSMantissa0,x
.8826	85 36		sta $36				sta 	zTemp0
.8828	c8		iny				iny
.8829	b1 30		lda ($30),y			lda 	(codePtr),y
.882b	fd 10 06	sbc $0610,x			sbc 	NSMantissa1,x
.882e	05 36		ora $36				ora 	zTemp0
.8830	60		rts				rts
.8831					CLIsDigit:
.8831	b1 30		lda ($30),y			lda 	(codePtr),y
.8833	c9 30		cmp #$30			cmp 	#"0"
.8835	90 03		bcc $883a			bcc	 	_CLIDExitFalse
.8837	c9 3a		cmp #$3a			cmp 	#"9"+1
.8839	60		rts				rts
.883a					_CLIDExitFalse:
.883a	38		sec				sec
.883b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/local.asm

.883c					Command_LOCAL:
.883c	a2 00		ldx #$00			ldx 	#0 							; at level 0
.883e	20 4a 88	jsr $884a			jsr 	LocaliseNextTerm 			; convert term to a local.
.8841	b1 30		lda ($30),y			lda 	(codePtr),y
.8843	c8		iny				iny
.8844	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8846	f0 f4		beq $883c			beq 	Command_LOCAL
.8848	88		dey				dey 								; unpick pre-get
.8849	60		rts				rts
.884a					LocaliseNextTerm:
.884a	20 a9 93	jsr $93a9			jsr 	EvaluateTerm 				; evaluate the term
.884d	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8850	29 20		and #$20			and 	#NSBIsReference 			; check it is a reference
.8852	f0 69		beq $88bd			beq		_LNTError
.8854	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy address of variable to zTemp0
.8857	85 36		sta $36				sta 	zTemp0
.8859	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.885c	85 37		sta $37				sta  	zTemp0+1
.885e	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8861	29 10		and #$10			and 	#NSBIsString
.8863	d0 22		bne $8887			bne 	_LNTPushString
.8865	5a		phy				phy
.8866	a0 00		ldy #$00			ldy 	#0 							; push 0 to 4 inclusive, the number values, on the stack, and zero them as you go.
.8868					_LNTPushNumLoop:
.8868	b1 36		lda ($36),y			lda		(zTemp0),y
.886a	20 5f 98	jsr $985f			jsr 	StackPushByte
.886d	a9 00		lda #$00			lda 	#0
.886f	91 36		sta ($36),y			sta 	(zTemp0),y
.8871	c8		iny				iny
.8872	c0 05		cpy #$05			cpy 	#5
.8874	d0 f2		bne $8868			bne 	_LNTPushNumLoop
.8876	a5 36		lda $36				lda 	zTemp0 						; push the actual target address to write on the stack
.8878	20 5f 98	jsr $985f			jsr 	StackPushByte
.887b	a5 37		lda $37				lda 	zTemp0+1
.887d	20 5f 98	jsr $985f			jsr 	StackPushByte
.8880	a9 01		lda #$01			lda 	#STK_LOCALN 				; push local-number marker.
.8882	20 5f 98	jsr $985f			jsr 	StackPushByte
.8885	7a		ply				ply
.8886	60		rts				rts
.8887					_LNTPushString:
.8887	5a		phy				phy
.8888	b2 36		lda ($36)			lda 	(zTemp0) 					; put address of string in zTemp1
.888a	85 38		sta $38				sta 	zTemp1
.888c	a0 01		ldy #$01			ldy 	#1
.888e	b1 36		lda ($36),y			lda 	(zTemp0),y
.8890	85 39		sta $39				sta 	zTemp1+1
.8892	a0 00		ldy #$00			ldy 	#0 							; output string
.8894	c9 00		cmp #$00			cmp 	#0 							; if not assigned strin
.8896	f0 0a		beq $88a2			beq 	_LNTStringOut
.8898					_LNTPushStrLoop:
.8898	b1 38		lda ($38),y			lda 	(zTemp1),y
.889a	f0 06		beq $88a2			beq 	_LNTStringOut
.889c	20 5f 98	jsr $985f			jsr 	StackPushByte
.889f	c8		iny				iny
.88a0	80 f6		bra $8898			bra 	_LNTPushStrLoop
.88a2					_LNTStringOut:
.88a2	98		tya				tya									; output length
.88a3	20 5f 98	jsr $985f			jsr 	StackPushByte
.88a6	a9 00		lda #$00			lda 	#0 							; clear original string.
.88a8	92 38		sta ($38)			sta 	(zTemp1)
.88aa	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; output address of the string record *not* the string itself
.88ad	20 5f 98	jsr $985f			jsr 	StackPushByte
.88b0	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.88b3	20 5f 98	jsr $985f			jsr 	StackPushByte
.88b6	a9 02		lda #$02			lda 	#STK_LOCALS 				; push local-string marker.
.88b8	20 5f 98	jsr $985f			jsr 	StackPushByte
.88bb	7a		ply				ply
.88bc	60		rts				rts
.88bd					_LNTError:
.88bd	4c 6b a5	jmp $a56b			jmp 	SyntaxError
.9f30					LocalPopValue:
.9f30	20 6c 98	jsr $986c			jsr 	StackPopByte
.9f33	c9 01		cmp #$01			cmp 	#STK_LOCALN 				; if not local-N
.9f35	d0 17		bne $9f4e			bne 	_LPVString
.9f37	20 6c 98	jsr $986c			jsr 	StackPopByte 				; address
.9f3a	85 37		sta $37				sta 	zTemp0+1
.9f3c	20 6c 98	jsr $986c			jsr 	StackPopByte
.9f3f	85 36		sta $36				sta 	zTemp0
.9f41	5a		phy				phy
.9f42	a0 04		ldy #$04			ldy 	#4 							; copy back
.9f44					_LPVNumberCopy:
.9f44	20 6c 98	jsr $986c			jsr 	StackPopByte
.9f47	91 36		sta ($36),y			sta 	(zTemp0),y
.9f49	88		dey				dey
.9f4a	10 f8		bpl $9f44			bpl 	_LPVNumberCopy
.9f4c	7a		ply				ply 								; and complete
.9f4d	60		rts				rts
.9f4e					_LPVString:
.9f4e	20 6c 98	jsr $986c			jsr 	StackPopByte 				; address of record => zTemp0
.9f51	85 37		sta $37				sta 	zTemp0+1
.9f53	20 6c 98	jsr $986c			jsr 	StackPopByte
.9f56	85 36		sta $36				sta 	zTemp0
.9f58	5a		phy				phy
.9f59	b2 36		lda ($36)			lda 	(zTemp0) 					; address to write string to => zTemp1
.9f5b	85 38		sta $38				sta 	zTemp1
.9f5d	a0 01		ldy #$01			ldy 	#1
.9f5f	b1 36		lda ($36),y			lda 	(zTemp0),y
.9f61	85 39		sta $39				sta 	zTemp1+1
.9f63	20 6c 98	jsr $986c			jsr 	StackPopByte 				; # to get => y
.9f66	a8		tay				tay
.9f67	a5 39		lda $39				lda 	zTemp1+1 					; if no target (e.g. was "" originally) exit
.9f69	f0 0e		beq $9f79			beq 	_LPVStringCopied
.9f6b	a9 00		lda #$00			lda 	#0 							; NULL on end
.9f6d	91 38		sta ($38),y			sta 	(zTemp1),y
.9f6f					_LPVStringCopy:
.9f6f	88		dey				dey
.9f70	30 07		bmi $9f79			bmi 	_LPVStringCopied
.9f72	20 6c 98	jsr $986c			jsr 	StackPopByte
.9f75	91 38		sta ($38),y			sta 	(zTemp1),y
.9f77	80 f6		bra $9f6f			bra 	_LPVStringCopy
.9f79					_LPVStringCopied:
.9f79	fa		plx				plx
.9f7a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/new.asm

.88c0					NewCommand:
.88c0	20 ab 9e	jsr $9eab			jsr 	MemoryNew
.88c3	9c 00 10	stz $1000			stz 	VariableSpace 				; erase all variables.
.88c6	20 d4 84	jsr $84d4			jsr 	ClearCommand 				; clear everything.
.88c9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/print.asm

.88ca					Command_Print:
.88ca	18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.88cb					_CPLoop:
.88cb	08		php				php 								; save last action flag
.88cc	b1 30		lda ($30),y			lda 	(codePtr),y
.88ce	c9 80		cmp #$80			cmp  	#KWC_EOL 					; end of line or colon, exit now.
.88d0	f0 46		beq $8918			beq 	_CPExit
.88d2	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.88d4	f0 42		beq $8918			beq 	_CPExit
.88d6	68		pla				pla 								; throw last action flag
.88d7	b1 30		lda ($30),y			lda 	(codePtr),y
.88d9	c8		iny				iny
.88da	c9 3b		cmp #$3b			cmp 	#KWD_SEMICOLON				; is it a semicolon
.88dc	f0 37		beq $8915			beq 	_CPContinueWithSameLine
.88de	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; comma
.88e0	f0 2e		beq $8910			beq 	_CPTab
.88e2	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; apostrophe (new line)
.88e4	f0 26		beq $890c			beq 	_CPNewLine
.88e6	88		dey				dey 								; undo the get.
.88e7	a2 00		ldx #$00			ldx 	#0
.88e9	20 6d 97	jsr $976d			jsr 	EvaluateValue 				; get a value into slot 0
.88ec	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; is it a number
.88ef	29 10		and #$10			and 	#NSBIsString
.88f1	f0 0b		beq $88fe			beq 	_CPNumber
.88f3	ae 10 06	ldx $0610			ldx 	NSMantissa1 				; string, print the text.
.88f6	ad 08 06	lda $0608			lda 	NSMantissa0
.88f9	20 28 8d	jsr $8d28			jsr 	PrintStringXA
.88fc	80 cc		bra $88ca			bra 	Command_Print 				; loop round clearing carry so NL if end
.88fe					_CPNumber:
.88fe	a9 05		lda #$05			lda 	#5 							; maximum decimals
.8900	20 43 96	jsr $9643			jsr 	ConvertNumberToString 		; convert to string
.8903	a2 08		ldx #$08			ldx 	#DecimalBuffer >> 8
.8905	a9 98		lda #$98			lda 	#DecimalBuffer & $FF
.8907	20 28 8d	jsr $8d28			jsr 	PrintStringXA
.890a	80 be		bra $88ca			bra 	Command_Print 				; loop round clearing carry so NL if end
.890c					_CPNewLine:
.890c	a9 0d		lda #$0d			lda 	#13
.890e	80 02		bra $8912			bra 	_CPPrintChar
.8910					_CPTab:
.8910	a9 09		lda #$09			lda 	#9 							; print TAB
.8912					_CPPrintChar:
.8912	20 d8 a7	jsr $a7d8			jsr 	EXTPrintCharacter
.8915					_CPContinueWithSameLine:
.8915	38		sec				sec 								; loop round with carry set, which
.8916	80 b3		bra $88cb			bra 	_CPLoop 					; will inhibit final CR
.8918					_CPExit:
.8918	28		plp				plp 								; get last action flag
.8919	b0 05		bcs $8920			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.891b	a9 0d		lda #$0d			lda 	#13 						; print new line
.891d	20 d8 a7	jsr $a7d8			jsr 	EXTPrintCharacter
.8920					_CPExit2:
.8920	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/procedure.asm

.8921					CallProcedure:
.8921	20 89 9f	jsr $9f89			jsr 	CheckRightBracket
.8924	a9 b3		lda #$b3			lda 	#STK_PROC+3 				; allocate 6 bytes on the return stack.
.8926	20 75 98	jsr $9875			jsr 	StackOpen
.8929	20 b4 98	jsr $98b4			jsr 	STKSaveCodePosition 		; save loop position
.892c	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy variable (e.g. procedure) address to zTemp0
.892f	85 36		sta $36				sta 	zTemp0 						; this is the DATA not the RECORD
.8931	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8934	85 37		sta $37				sta 	zTemp0+1
.8936	a0 01		ldy #$01			ldy 	#1 							; copy code address back.
.8938	b2 36		lda ($36)			lda 	(zTemp0)
.893a	85 30		sta $30				sta 	safePtr
.893c	b1 36		lda ($36),y			lda 	(zTemp0),y
.893e	85 31		sta $31				sta 	safePtr+1
.8940	c8		iny				iny
.8941	b1 36		lda ($36),y			lda 	(zTemp0),y
.8943	85 32		sta $32				sta 	safePtr+2
.8945	c8		iny				iny
.8946	b1 36		lda ($36),y			lda 	(zTemp0),y
.8948	85 33		sta $33				sta 	safePtr+3
.894a	c8		iny				iny 								; get Y offset -> Y
.894b	b1 36		lda ($36),y			lda 	(zTemp0),y
.894d	a8		tay				tay
.894e	20 89 9f	jsr $9f89			jsr 	CheckRightBracket 			; check )
.8951	60		rts				rts 								; and continue from here
.9f7b					Command_ENDPROC:
.9f7b	a9 b0		lda #$b0			lda 	#STK_PROC 					; check TOS is this
.9f7d	a2 14		ldx #$14			ldx 	#ERRID_PROC
.9f7f	20 9c 98	jsr $989c			jsr 	StackCheckFrame
.9f82	20 c5 98	jsr $98c5			jsr 	STKLoadCodePosition 		; restore code position
.9f85	20 8e 98	jsr $988e			jsr 	StackClose
.9f88	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/read.asm

.8952					Command_Read:
.8952	a2 00		ldx #$00			ldx 	#0 							; evaluate the term which is the var/array element to assign
.8954	20 a9 93	jsr $93a9			jsr 	EvaluateTerm
.8957	bd 00 06	lda $0600,x			lda 	NSStatus,x
.895a	29 20		and #$20			and 	#NSBIsReference				; get status byte on stack, identifies int, float, string.
.895c	f0 4a		beq $89a8			beq 	_CRSyntax 					; check reference (bit 0)
.895e	20 f1 89	jsr $89f1			jsr 	SwapDataCodePtrs 			; swap code and data
.8961	ad 1b 07	lda $071b			lda 	inDataStatement 			; if in a data statement, we don't need to search
.8964	d0 20		bne $8986			bne 	_CRContinueData
.8966					_CRKeepSearching:
.8966	a9 a3		lda #$a3			lda 	#KWD_DATA 					; scan for instruction
.8968	aa		tax				tax
.8969	20 41 8c	jsr $8c41			jsr 	ScanForward
.896c	c9 a3		cmp #$a3			cmp 	#KWD_DATA 					; found data ?
.896e	f0 16		beq $8986			beq 	_CRHaveData 				; found it
.8970	18		clc				clc
.8971	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8973	65 30		adc $30				adc 	codePtr
.8975	85 30		sta $30				sta 	codePtr
.8977	90 02		bcc $897b			bcc 	_CREExit
.8979	e6 31		inc $31				inc 	codePtr+1
.897b					_CREExit:
.897b	a0 03		ldy #$03			ldy 	#3 							; start of line.
.897d	b2 30		lda ($30)			lda 	(codePtr)
.897f	d0 e5		bne $8966			bne 	_CRKeepSearching
.8981	a9 0b		lda #$0b		lda	#11
.8983	4c cf 8c	jmp $8ccf		jmp	ErrorHandler
.8986					_CRHaveData:
.8986					_CRContinueData:
.8986	a2 01		ldx #$01			ldx 	#1
.8988	20 6d 97	jsr $976d			jsr 	EvaluateValue 				; evaluate value into slot # 1
.898b	ca		dex				dex
.898c	20 88 87	jsr $8788			jsr		AssignVariable 				; do the assignment
.898f	9c 1b 07	stz $071b			stz 	inDataStatement 			; clear in data
.8992	b1 30		lda ($30),y			lda 	(codePtr),y
.8994	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not, end of data statement
.8996	d0 04		bne $899c			bne 	_CRSwapBack
.8998	c8		iny				iny 								; consume comma
.8999	ee 1b 07	inc $071b			inc 	inDataStatement 			; set in data statement currently.
.899c					_CRSwapBack:
.899c	20 f1 89	jsr $89f1			jsr 	SwapDataCodePtrs			; swap them back.
.899f	b1 30		lda ($30),y			lda 	(codePtr),y
.89a1	c8		iny				iny
.89a2	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.89a4	f0 ac		beq $8952			beq 	Command_Read 				; if so go round again.
.89a6	88		dey				dey 								; unpick get.
.89a7	60		rts				rts
.89a8					_CRSyntax:
.89a8	4c 6b a5	jmp $a56b			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/rem.asm

.89ab					RemCommand:
.89ab	b1 30		lda ($30),y			lda 	(codePtr),y
.89ad	c9 ff		cmp #$ff			cmp 	#KWC_STRING
.89af	d0 06		bne $89b7			bne 	_RMExit
.89b1	c8		iny				iny
.89b2	98		tya				tya
.89b3	38		sec				sec
.89b4	71 30		adc ($30),y			adc 	(codePtr),y
.89b6	a8		tay				tay
.89b7					_RMExit:
.89b7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/repeat.asm

.89b8					Command_REPEAT:
.89b8	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; allocate 6 bytes on the return stack.
.89ba	20 75 98	jsr $9875			jsr 	StackOpen
.89bd	20 b4 98	jsr $98b4			jsr 	STKSaveCodePosition 		; save loop position
.89c0	60		rts				rts
.89c1					Command_UNTIL:
.89c1	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; check REPEAT is TOS
.89c3	a2 0f		ldx #$0f			ldx 	#ERRID_REPEAT 				; this error
.89c5	20 9c 98	jsr $989c			jsr 	StackCheckFrame
.89c8	a2 00		ldx #$00			ldx 	#0
.89ca	20 76 97	jsr $9776			jsr 	EvaluateNumber 				; work out the number
.89cd	20 52 98	jsr $9852			jsr 	NSMIsZero 					; check if zero
.89d0	f0 04		beq $89d6			beq 	_CULoopBack 				; if so keep looping
.89d2	20 8e 98	jsr $988e			jsr 	StackClose		 			; return
.89d5	60		rts				rts
.89d6					_CULoopBack:
.89d6	20 c5 98	jsr $98c5			jsr 	STKLoadCodePosition 		; loop back
.89d9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/restore.asm

.89da					Command_Restore:
.89da	20 f1 89	jsr $89f1			jsr 	SwapDataCodePtrs 			; swap code and data
.89dd	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.89df	85 30		sta $30				sta 	codePtr
.89e1	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.89e3	85 31		sta $31				sta 	codePtr+1
.89e5	20 f1 89	jsr $89f1			jsr 	SwapDataCodePtrs 			; put them back
.89e8	a9 03		lda #$03			lda 	#3 							; start at offset 3, e.g. first instruction of first line.
.89ea	8d 1a 07	sta $071a			sta 	dataPointer+4
.89ed	9c 1b 07	stz $071b			stz 	inDataStatement 			; not in data statement
.89f0	60		rts				rts
.89f1					SwapDataCodePtrs:
.89f1	da		phx				phx
.89f2	a2 03		ldx #$03			ldx 	#3 							; swap 32 bit code pointer over
.89f4					_SDCPLoop:
.89f4	b5 30		lda $30,x			lda 	safePtr,x
.89f6	48		pha				pha
.89f7	bd 16 07	lda $0716,x			lda 	dataPointer,x
.89fa	95 30		sta $30,x			sta 	safePtr,x
.89fc	68		pla				pla
.89fd	9d 16 07	sta $0716,x			sta 	dataPointer,x
.8a00	ca		dex				dex
.8a01	10 f1		bpl $89f4			bpl 	_SDCPLoop
.8a03	ad 1a 07	lda $071a			lda 	dataPointer+4 				; swap Y position over.
.8a06	8c 1a 07	sty $071a			sty 	dataPointer+4
.8a09	a8		tay				tay
.8a0a	fa		plx				plx
.8a0b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/run.asm

.8a0c					CommandRUN:
.8a0c	20 d4 84	jsr $84d4			jsr 	ClearCommand 				; clear variable/stacks/etc.
.8a0f	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8a11	85 30		sta $30				sta 	codePtr
.8a13	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8a15	85 31		sta $31				sta 	codePtr+1
.8a17					RUNNewLine:
.8a17	b2 30		lda ($30)			lda 	(codePtr)
.8a19	f0 5a		beq $8a75			beq 	CRNoProgram         		; no then END.
.8a1b	a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack
.8a1d	9a		txs				txs
.8a1e					RUNCodePointerLine:
.8a1e	a0 02		ldy #$02			ldy 	#2 							; start of program
.8a20					_CRIncMainLoop:
.8a20	0e 13 07	asl $0713			asl 	breakCheck 					; clears 1 time in 8
.8a23	d0 05		bne $8a2a			bne 	_CRNoBreakCheck
.8a25	20 19 a8	jsr $a819			jsr 	EXTBreakCheck 				; break check
.8a28	f0 46		beq $8a70			beq 	_CRBreak
.8a2a					_CRNoBreakCheck:
.8a2a	c8		iny				iny
.8a2b					_CRMainLoop:
.8a2b	9c 10 07	stz $0710			stz 	stringInitialised 			; clear the temporary string initialised flag.
.8a2e	b1 30		lda ($30),y			lda 	(codePtr),y
.8a30	10 10		bpl $8a42			bpl 	_CRNotKeyword
.8a32	c9 96		cmp #$96			cmp 	#KWC_LAST_UNARY+1 			; if after unary, legitimate command
.8a34	b0 04		bcs $8a3a			bcs 	_CRIsKeyword
.8a36	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if unary, syntax error.
.8a38	b0 30		bcs $8a6a			bcs		_CRSyntaxError
.8a3a					_CRIsKeyword:
.8a3a	c8		iny				iny 								; consume command
.8a3b	0a		asl a				asl 	a 							; double losing the MSB which is '1' as tokens are $80-$FF
.8a3c	aa		tax				tax 								; put in X for vector jump
.8a3d	20 6d 8a	jsr $8a6d			jsr 	_CRCallVector0 				; call the vector - effectively jsr (vectortable,X)
.8a40	80 e9		bra $8a2b			bra 	_CRMainLoop 				; and loop round
.8a42					_CRNotKeyword:
.8a42	c9 3a		cmp #$3a			cmp 	#KWD_COLON 					; if a :, consume it and go round.
.8a44	f0 da		beq $8a20			beq 	_CRIncMainLoop
.8a46	c9 40		cmp #$40			cmp 	#$40 						; variable/call reference
.8a48	90 05		bcc $8a4f			bcc 	_CRNotVariable
.8a4a					_CRGoLet:
.8a4a	20 68 87	jsr $8768			jsr 	LetCommand
.8a4d	80 dc		bra $8a2b			bra 	_CRMainLoop
.8a4f					_CRNotVariable:
.8a4f	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; handle ? !
.8a51	f0 f7		beq $8a4a			beq 	_CRGoLet
.8a53	c9 21		cmp #$21			cmp 	#KWD_PLING
.8a55	f0 f3		beq $8a4a			beq 	_CRGoLet
.8a57	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; handle ' (comment)
.8a59	f0 09		beq $8a64			beq 	_CRGoRem
.8a5b	c9 2e		cmp #$2e			cmp 	#KWD_PERIOD 				; handle . (assembler label)
.8a5d	d0 0b		bne $8a6a			bne 	_CRSyntaxError
.8a5f	20 a0 83	jsr $83a0			jsr 	LabelHere
.8a62	80 c7		bra $8a2b			bra 	_CRMainLoop
.8a64					_CRGoRem:
.8a64	c8		iny				iny
.8a65	20 ab 89	jsr $89ab			jsr 	RemCommand
.8a68	80 c1		bra $8a2b			bra 	_CRMainLoop
.8a6a					_CRSyntaxError:
.8a6a	4c 6b a5	jmp $a56b			jmp 	SyntaxError
.8a6d					_CRCallVector0:
.8a6d	7c fc 80	jmp ($80fc,x)			jmp 	(VectorSet0,x)
.8a70					_CRBreak:
.8a70	a9 01		lda #$01		lda	#1
.8a72	4c cf 8c	jmp $8ccf		jmp	ErrorHandler
.8a75					CRNoProgram:
.8a75	4c ee 85	jmp $85ee			jmp 	EndCommand
.8a78					EOLCommand:
.8a78	18		clc				clc
.8a79	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8a7b	65 30		adc $30				adc 	codePtr
.8a7d	85 30		sta $30				sta 	codePtr
.8a7f	90 02		bcc $8a83			bcc 	_CREExit
.8a81	e6 31		inc $31				inc 	codePtr+1
.8a83					_CREExit:
.8a83	80 92		bra $8a17			bra 	RunNewLine
.8a85					Shift1Command:
.8a85	b1 30		lda ($30),y			lda 	(codePtr),y
.8a87	c8		iny				iny
.8a88	0a		asl a				asl 	a
.8a89	aa		tax				tax
.8a8a	7c 5c 81	jmp ($815c,x)			jmp 	(VectorSet1,x)
.8a8d					Shift2Command:
.8a8d	b1 30		lda ($30),y			lda 	(codePtr),y
.8a8f	c8		iny				iny
.8a90	0a		asl a				asl 	a
.8a91	aa		tax				tax
.8a92	7c 74 81	jmp ($8174,x)			jmp 	(VectorSet2,x)
.8a95					Unused1:
.8a95					Unused2:
.8a95					Unused3:
.8a95					Unused4:
.8a95	4c 6b a5	jmp $a56b			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/stop.asm

.8a98					StopCommand:
.8a98	a9 08		lda #$08		lda	#8
.8a9a	4c cf 8c	jmp $8ccf		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/expandline.asm

.8a9d					ListConvertLine:
.8a9d	9c 1c 07	stz $071c			stz 	tbOffset
.8aa0	9c 28 07	stz $0728			stz 	tokenBuffer
.8aa3	a0 02		ldy #$02			ldy 	#2 							; convert line number to string
.8aa5	b1 30		lda ($30),y			lda 	(codePtr),y
.8aa7	aa		tax				tax
.8aa8	88		dey				dey
.8aa9	b1 30		lda ($30),y			lda 	(codePtr),y
.8aab	20 e5 a0	jsr $a0e5			jsr 	ConvertInt16
.8aae	85 36		sta $36				sta 	zTemp0 						; copy number into buffer
.8ab0	86 37		stx $37				stx 	zTemp0+1
.8ab2	a0 00		ldy #$00			ldy 	#0
.8ab4					_LCCopyNumber:
.8ab4	b1 36		lda ($36),y			lda 	(zTemp0),y
.8ab6	20 b6 8b	jsr $8bb6			jsr 	LCLWrite
.8ab9	c8		iny				iny
.8aba	b1 36		lda ($36),y			lda 	(zTemp0),y
.8abc	d0 f6		bne $8ab4			bne 	_LCCopyNumber
.8abe					_LCPadOut:
.8abe	a9 20		lda #$20			lda 	#' '						; pad out to 6 characters
.8ac0	20 b6 8b	jsr $8bb6			jsr 	LCLWrite
.8ac3	ad 1c 07	lda $071c			lda 	tbOffset
.8ac6	c9 06		cmp #$06			cmp 	#6
.8ac8	d0 f4		bne $8abe			bne 	_LCPadOut
.8aca	a0 03		ldy #$03			ldy 	#3 							; start position.
.8acc					_LCMainLoop:
.8acc	b1 30		lda ($30),y			lda 	(codePtr),y
.8ace	c9 80		cmp #$80			cmp 	#KWC_EOL 					; end of line ?
.8ad0	f0 17		beq $8ae9			beq 	_LCExit
.8ad2	c9 10		cmp #$10			cmp 	#16 						; 0-5 are the double punctuations
.8ad4	90 14		bcc $8aea			bcc 	_LCDoubles
.8ad6	c9 20		cmp #$20			cmp 	#32 						; 16-31 are shifted punctuation from 64-91
.8ad8	90 20		bcc $8afa			bcc 	_LCShiftPunc
.8ada	c9 40		cmp #$40			cmp 	#64 						; 32-64 are as stored, punc and digits
.8adc	90 2b		bcc $8b09			bcc 	_LCPunctuation
.8ade	c9 80		cmp #$80			cmp 	#128 						; 64-127 are variable identifiers.
.8ae0	90 2d		bcc $8b0f			bcc 	_LCIdentifiers
.8ae2	c9 fe		cmp #$fe			cmp 	#254 						; 128-253 are tokenised words
.8ae4	90 49		bcc $8b2f			bcc 	_LCTokens
.8ae6	4c 8a 8b	jmp $8b8a			jmp 	_LCData 					; 254-5 are data objects
.8ae9					_LCExit:
.8ae9	60		rts				rts
.8aea					_LCDoubles:
.8aea	48		pha				pha
.8aeb	4a		lsr a				lsr 	a 							; put bit 2 into bit 1
.8aec	29 02		and #$02			and 	#2
.8aee	09 3c		ora #$3c			ora 	#60 						; make < >
.8af0	20 b6 8b	jsr $8bb6			jsr 	LCLWrite
.8af3	68		pla				pla 								; restore, do lower bit
.8af4	29 03		and #$03			and 	#3
.8af6	09 3c		ora #$3c			ora 	#60
.8af8	80 0f		bra $8b09			bra		_LCPunctuation 				; print, increment, loop
.8afa					_LCShiftPunc:
.8afa	aa		tax				tax 								; save in X
.8afb	29 07		and #$07			and 	#7 							; lower 3 bits
.8afd	f0 02		beq $8b01			beq 	_LCNoAdd
.8aff	09 18		ora #$18			ora 	#24 						; adds $18 to it.
.8b01					_LCNoAdd:
.8b01	e0 18		cpx #$18			cpx 	#24 						; if >= 24 add $20
.8b03	90 02		bcc $8b07			bcc 	_LCNoAdd2
.8b05	09 20		ora #$20			ora 	#32 						; adds $20
.8b07					_LCNoAdd2:
.8b07	09 40		ora #$40			ora 	#$40 						; shift into 64-127 range and fall through.
.8b09					_LCPunctuation:
.8b09	c8		iny				iny 								; consume character
.8b0a	20 b6 8b	jsr $8bb6			jsr 	LCLWrite 					; write it out.
.8b0d	80 bd		bra $8acc			bra 	_LCMainLoop 				; go round again.
.8b0f					_LCIdentifiers:
.8b0f	18		clc				clc 								; convert to physical address
.8b10	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8b12	85 37		sta $37				sta 	zTemp0+1
.8b14	c8		iny				iny
.8b15	b1 30		lda ($30),y			lda 	(codePtr),y
.8b17	85 36		sta $36				sta 	zTemp0
.8b19	c8		iny				iny
.8b1a	5a		phy				phy 								; save position
.8b1b	a0 07		ldy #$07			ldy 	#7 							; output the identifier.
.8b1d					_LCOutIdentifier:
.8b1d	c8		iny				iny
.8b1e	b1 36		lda ($36),y			lda 	(zTemp0),y
.8b20	29 7f		and #$7f			and 	#$7F
.8b22	20 e4 8b	jsr $8be4			jsr 	LCLLowerCase
.8b25	20 b6 8b	jsr $8bb6			jsr 	LCLWrite
.8b28	b1 36		lda ($36),y			lda 	(zTemp0),y				 	; ends when bit 7 set.
.8b2a	10 f1		bpl $8b1d			bpl 	_LCOutIdentifier
.8b2c	7a		ply				ply 								; restore position
.8b2d	80 9d		bra $8acc			bra 	_LCMainLoop
.8b2f					_LCTokens:
.8b2f	aa		tax				tax 								; token in X
.8b30	a9 e5		lda #$e5			lda 	#((KeywordSet2) & $FF)
.8b32	85 36		sta $36				sta 	0+zTemp0
.8b34	a9 9a		lda #$9a			lda 	#((KeywordSet2) >> 8)
.8b36	85 37		sta $37				sta 	1+zTemp0
.8b38	e0 82		cpx #$82			cpx 	#$82
.8b3a	f0 16		beq $8b52			beq 	_LCUseShift
.8b3c	a9 a1		lda #$a1			lda 	#((KeywordSet1) & $FF)
.8b3e	85 36		sta $36				sta 	0+zTemp0
.8b40	a9 9a		lda #$9a			lda 	#((KeywordSet1) >> 8)
.8b42	85 37		sta $37				sta 	1+zTemp0
.8b44	e0 81		cpx #$81			cpx 	#$81
.8b46	f0 0a		beq $8b52			beq 	_LCUseShift
.8b48	a9 78		lda #$78			lda 	#((KeywordSet0) & $FF)
.8b4a	85 36		sta $36				sta 	0+zTemp0
.8b4c	a9 99		lda #$99			lda 	#((KeywordSet0) >> 8)
.8b4e	85 37		sta $37				sta 	1+zTemp0
.8b50	80 01		bra $8b53			bra 	_LCNoShift
.8b52					_LCUseShift:
.8b52	c8		iny				iny
.8b53					_LCNoShift:
.8b53	20 c5 8b	jsr $8bc5			jsr 	LCCheckSpaceRequired 		; do we need a space ?
.8b56	b1 30		lda ($30),y			lda 	(codePtr),y
.8b58	aa		tax				tax 								; into X
.8b59					_LCFindText:
.8b59	ca		dex				dex
.8b5a	10 0e		bpl $8b6a			bpl 	_LCFoundText 				; found text.
.8b5c	b2 36		lda ($36)			lda 	(zTemp0) 					; length of text
.8b5e	1a		inc a				inc 	a 							; one extra for size
.8b5f	38		sec				sec 								; one extra for checksum
.8b60	65 36		adc $36				adc 	zTemp0 						; go to next token
.8b62	85 36		sta $36				sta 	zTemp0
.8b64	90 f3		bcc $8b59			bcc 	_LCFindText
.8b66	e6 37		inc $37				inc 	zTemp0+1
.8b68	80 ef		bra $8b59			bra 	_LCFindText
.8b6a					_LCFoundText:
.8b6a	5a		phy				phy 								; save List position
.8b6b	b2 36		lda ($36)			lda 	(zTemp0)					; count to print
.8b6d	aa		tax				tax
.8b6e	a0 02		ldy #$02			ldy 	#2
.8b70					_LCCopyToken:
.8b70	b1 36		lda ($36),y			lda 	(zTemp0),y
.8b72	20 e4 8b	jsr $8be4			jsr 	LCLLowerCase
.8b75	20 b6 8b	jsr $8bb6			jsr 	LCLWrite
.8b78	c8		iny				iny
.8b79	ca		dex				dex
.8b7a	d0 f4		bne $8b70			bne 	_LCCopyToken
.8b7c	c9 28		cmp #$28			cmp 	#"(" 						; if last char not ( print a space
.8b7e	f0 05		beq $8b85			beq 	_LCNoSpace
.8b80	a9 20		lda #$20			lda 	#' '
.8b82	20 b6 8b	jsr $8bb6			jsr 	LCLWrite
.8b85					_LCNoSpace:
.8b85	7a		ply				ply 								; restore position.
.8b86	c8		iny				iny 								; consume token
.8b87	4c cc 8a	jmp $8acc			jmp 	_LCMainLoop 				; and go around again.
.8b8a					_LCData:
.8b8a	48		pha				pha 								; save type $FE/$FF
.8b8b	a2 24		ldx #$24			ldx 	#'$' 						; figure out $ or "
.8b8d	c9 fe		cmp #$fe			cmp 	#$FE
.8b8f	f0 02		beq $8b93			beq 	_LCHaveOpener
.8b91	a2 22		ldx #$22			ldx 	#'"'
.8b93					_LCHaveOpener:
.8b93	8a		txa				txa 								; output prefix (# or ")
.8b94	20 b6 8b	jsr $8bb6			jsr 	LCLWrite
.8b97	c8		iny				iny 								; get count
.8b98	b1 30		lda ($30),y			lda 	(codePtr),y
.8b9a	aa		tax				tax
.8b9b	c8		iny				iny 								; point at first character
.8b9c					_LCOutData:
.8b9c	b1 30		lda ($30),y			lda 	(codePtr),y
.8b9e	c9 00		cmp #$00			cmp 	#0
.8ba0	f0 03		beq $8ba5			beq 	_LCNoPrint
.8ba2	20 b6 8b	jsr $8bb6			jsr 	LCLWrite
.8ba5					_LCNoPrint:
.8ba5	c8		iny				iny
.8ba6	ca		dex				dex
.8ba7	d0 f3		bne $8b9c			bne 	_LCOutData
.8ba9	68		pla				pla 								; closing " required ?
.8baa	c9 ff		cmp #$ff			cmp 	#$FF
.8bac	d0 05		bne $8bb3			bne 	_LCNoQuote
.8bae	a9 22		lda #$22			lda 	#'"'
.8bb0	20 b6 8b	jsr $8bb6			jsr 	LCLWrite
.8bb3					_LCNoQuote:
.8bb3	4c cc 8a	jmp $8acc			jmp 	_LCMainLoop
.8bb6					LCLWrite:
.8bb6	da		phx				phx
.8bb7	ae 1c 07	ldx $071c			ldx 	tbOffset
.8bba	9d 28 07	sta $0728,x			sta 	tokenBuffer,x
.8bbd	9e 29 07	stz $0729,x			stz 	tokenBuffer+1,x
.8bc0	ee 1c 07	inc $071c			inc 	tbOffset
.8bc3	fa		plx				plx
.8bc4	60		rts				rts
.8bc5					LCCheckSpaceRequired:
.8bc5	ae 1c 07	ldx $071c			ldx 	tbOffset
.8bc8	bd 27 07	lda $0727,x			lda 	tokenBuffer-1,x 			; previous character
.8bcb	20 e4 8b	jsr $8be4			jsr 	LCLLowerCase 				; saves a little effort
.8bce	c9 30		cmp #$30			cmp 	#"0" 						; check if it was 0-9 A-Z a-z if so need space.
.8bd0	90 11		bcc $8be3			bcc 	_LCCSRExit
.8bd2	c9 3a		cmp #$3a			cmp 	#"9"+1
.8bd4	90 08		bcc $8bde			bcc 	_LCCSRSpace
.8bd6	c9 61		cmp #$61			cmp 	#"a"
.8bd8	90 09		bcc $8be3			bcc 	_LCCSRExit
.8bda	c9 7b		cmp #$7b			cmp 	#"z"+1
.8bdc	b0 05		bcs $8be3			bcs 	_LCCSRExit
.8bde					_LCCSRSpace:
.8bde	a9 20		lda #$20			lda 	#' '
.8be0	20 b6 8b	jsr $8bb6			jsr 	LCLWrite
.8be3					_LCCSRExit:
.8be3	60		rts				rts
.8be4					LCLLowerCase:
.8be4	c9 41		cmp #$41			cmp 	#"A"
.8be6	90 06		bcc $8bee			bcc 	_LCLLCOut
.8be8	c9 5b		cmp #$5b			cmp 	#"Z"+1
.8bea	b0 02		bcs $8bee			bcs 	_LCLLCOut
.8bec	69 20		adc #$20			adc 	#$20
.8bee					_LCLLCOut:
.8bee	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/procscan.asm

.8bef					ProcedureScan:
.8bef	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8bf1	85 30		sta $30				sta 	codePtr
.8bf3	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8bf5	85 31		sta $31				sta 	codePtr+1
.8bf7					_PSLoop:
.8bf7	b2 30		lda ($30)			lda 	(codePtr)
.8bf9	f0 42		beq $8c3d			beq 	_PSExit
.8bfb	a0 03		ldy #$03			ldy 	#3 							; is it PROC ?
.8bfd	b1 30		lda ($30),y			lda 	(codePtr),y
.8bff	c9 98		cmp #$98			cmp 	#KWD_PROC
.8c01	d0 2d		bne $8c30			bne 	_PSNext
.8c03	c8		iny				iny 								; get the address of the record to zTemp0 and
.8c04	b1 30		lda ($30),y			lda 	(codePtr),y
.8c06	29 c0		and #$c0			and 	#$C0
.8c08	c9 40		cmp #$40			cmp 	#$40
.8c0a	d0 32		bne $8c3e			bne 	_PSSyntax
.8c0c	b1 30		lda ($30),y			lda 	(codePtr),y
.8c0e	18		clc				clc
.8c0f	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8c11	85 37		sta $37				sta 	zTemp0+1
.8c13	c8		iny				iny 								; LSB
.8c14	b1 30		lda ($30),y			lda 	(codePtr),y
.8c16	85 36		sta $36				sta 	zTemp0
.8c18	c8		iny				iny 								; character after variable call.
.8c19	98		tya				tya 								; save Y offset at +7
.8c1a	a0 07		ldy #$07			ldy 	#7
.8c1c	91 36		sta ($36),y			sta 	(zTemp0),y
.8c1e	a9 18		lda #$18			lda 	#NSTProcedure 				; mark it as procedure
.8c20	a0 02		ldy #$02			ldy 	#2
.8c22	91 36		sta ($36),y			sta 	(zTemp0),y
.8c24	a2 00		ldx #$00			ldx 	#0 							; copy code-Ptr in
.8c26					_PSCopy:
.8c26	b5 30		lda $30,x			lda 	safePtr,x
.8c28	c8		iny				iny
.8c29	91 36		sta ($36),y			sta 	(zTemp0),y
.8c2b	e8		inx				inx
.8c2c	e0 04		cpx #$04			cpx 	#4
.8c2e	d0 f6		bne $8c26			bne 	_PSCopy
.8c30					_PSNext:
.8c30	18		clc				clc
.8c31	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8c33	65 30		adc $30				adc 	codePtr
.8c35	85 30		sta $30				sta 	codePtr
.8c37	90 02		bcc $8c3b			bcc 	_CREExit
.8c39	e6 31		inc $31				inc 	codePtr+1
.8c3b					_CREExit:
.8c3b	80 ba		bra $8bf7			bra 	_PSLoop
.8c3d					_PSExit:
.8c3d	60		rts				rts
.8c3e					_PSSyntax:
.8c3e	4c 6b a5	jmp $a56b			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/scanforward.asm

.8c41					ScanForward:
.8c41	85 36		sta $36				sta 	zTemp0 						; save XA as the two possible matches.
.8c43	86 37		stx $37				stx 	zTemp0+1
.8c45	64 38		stz $38				stz 	zTemp1 						; this is the structure count - goes up with WHILE/FOR
.8c47					_ScanLoop:
.8c47	b1 30		lda ($30),y			lda 	(codePtr),y
.8c49	c8		iny				iny
.8c4a	a6 38		ldx $38				ldx 	zTemp1 						; if the count is > 0 cannot match as in substructure
.8c4c	d0 0e		bne $8c5c			bne 	_ScanGoNext
.8c4e	c5 36		cmp $36				cmp 	zTemp0 						; see if either matches
.8c50	f0 04		beq $8c56			beq 	_ScanMatch
.8c52	c5 37		cmp $37				cmp 	zTemp0+1
.8c54	d0 06		bne $8c5c			bne 	_ScanGoNext
.8c56					_ScanMatch:
.8c56	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if asked for EOL, backtrack.
.8c58	d0 01		bne $8c5b			bne 	_ScanNotEndEOL
.8c5a	88		dey				dey
.8c5b					_ScanNotEndEOL:
.8c5b	60		rts				rts
.8c5c					_ScanGoNext:
.8c5c	c9 40		cmp #$40			cmp 	#$40 						; if 00-3F, punctuation characters, loop back
.8c5e	90 e7		bcc $8c47			bcc 	_ScanLoop
.8c60	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if 40-82, skip one extra.
.8c62	90 18		bcc $8c7c			bcc 	_ScanSkipOne
.8c64	c9 fc		cmp #$fc			cmp 	#$FC 						; FC-FF are data skips
.8c66	b0 2f		bcs $8c97			bcs 	_ScanSkipData
.8c68	c9 96		cmp #$96			cmp 	#KWC_FIRST_STRUCTURE 		; structure keyword ?
.8c6a	90 db		bcc $8c47			bcc 	_ScanLoop 					; if not, ordinary keywords.
.8c6c	c9 a1		cmp #$a1			cmp 	#KWC_LAST_STRUCTURE+1
.8c6e	b0 d7		bcs $8c47			bcs 	_ScanLoop
.8c70	c6 38		dec $38				dec 	zTemp1 						; decrement the sructure count
.8c72	c9 9b		cmp #$9b			cmp 	#KWC_FIRST_STRUCTURE_DEC 	; back if it is a dec structure (e.g. WEND/NEXT)
.8c74	b0 d1		bcs $8c47			bcs 	_ScanLoop
.8c76	e6 38		inc $38				inc 	zTemp1 						; so it's an increment structure
.8c78	e6 38		inc $38				inc 	zTemp1 						; twice to undo the dec
.8c7a	80 cb		bra $8c47			bra 	_ScanLoop
.8c7c					_ScanSkipOne:
.8c7c	c8		iny				iny 								; consume the extra one.
.8c7d	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if not EOL loop back
.8c7f	d0 c6		bne $8c47			bne 	_ScanLoop
.8c81	18		clc				clc
.8c82	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8c84	65 30		adc $30				adc 	codePtr
.8c86	85 30		sta $30				sta 	codePtr
.8c88	90 02		bcc $8c8c			bcc 	_CREExit
.8c8a	e6 31		inc $31				inc 	codePtr+1
.8c8c					_CREExit:
.8c8c	a0 03		ldy #$03			ldy 	#3 							; scan start position.
.8c8e	b2 30		lda ($30)			lda 	(codePtr)
.8c90	d0 b5		bne $8c47			bne 	_ScanLoop 					; if not zero, more to scan
.8c92	a9 13		lda #$13		lda	#19
.8c94	4c cf 8c	jmp $8ccf		jmp	ErrorHandler
.8c97					_ScanSkipData:
.8c97	88		dey				dey 								; point at data token
.8c98	c8		iny				iny
.8c99	98		tya				tya
.8c9a	38		sec				sec
.8c9b	71 30		adc ($30),y			adc 	(codePtr),y
.8c9d	a8		tay				tay
.8c9e	80 a7		bra $8c47			bra 	_ScanLoop

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/while.asm

.8ca0					Command_WHILE:
.8ca0	5a		phy				phy 								; save position of the test
.8ca1	a2 00		ldx #$00			ldx 	#0
.8ca3	20 76 97	jsr $9776			jsr 	EvaluateNumber 				; work out the number
.8ca6	20 52 98	jsr $9852			jsr 	NSMIsZero 					; check if zero
.8ca9	f0 0e		beq $8cb9			beq 	_WHExitLoop 				; if so exit the loop
.8cab	98		tya				tya 								; position *after* test.
.8cac	7a		ply				ply 								; restore position before test, at WHILE
.8cad	88		dey				dey
.8cae	48		pha				pha 								; push after test on the stack
.8caf	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; allocate 6 bytes on the return stack.
.8cb1	20 75 98	jsr $9875			jsr 	StackOpen
.8cb4	20 b4 98	jsr $98b4			jsr 	STKSaveCodePosition 		; save loop position - where the test value is.
.8cb7	7a		ply				ply 								; restore the position *after* the test
.8cb8	60		rts				rts
.8cb9					_WHExitLoop:
.8cb9	68		pla				pla 								; throw post loop position
.8cba	a9 a0		lda #$a0			lda 	#KWD_WEND 					; scan forward past WEND
.8cbc	aa		tax				tax
.8cbd	20 41 8c	jsr $8c41			jsr 	ScanForward
.8cc0	60		rts				rts
.8cc1					Command_WEND:
.8cc1	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; check WHILE is TOS
.8cc3	a2 10		ldx #$10			ldx 	#ERRID_WHILE 				; this error
.8cc5	20 9c 98	jsr $989c			jsr 	StackCheckFrame
.8cc8	20 c5 98	jsr $98c5			jsr 	STKLoadCodePosition 		; loop back
.8ccb	20 8e 98	jsr $988e			jsr 	StackClose		 			; erase the frame
.8cce	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/charcheck.asm

.9f89					CheckRightBracket:
.9f89	b1 30		lda ($30),y			lda 	(codePtr),y
.9f8b	c8		iny				iny
.9f8c	c9 29		cmp #$29			cmp 	#KWD_RPAREN 						; exit if matches
.9f8e	d0 0f		bne $9f9f			bne 	CNAFail
.9f90	60		rts				rts
.9f91					CheckComma:
.9f91	b1 30		lda ($30),y			lda 	(codePtr),y
.9f93	c8		iny				iny
.9f94	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 						; exit if matches
.9f96	d0 07		bne $9f9f			bne 	CNAFail
.9f98	60		rts				rts
.9f99					CheckNextA:
.9f99	d1 30		cmp ($30),y			cmp 	(codePtr),y
.9f9b	d0 02		bne $9f9f			bne 	CNAFail
.9f9d	c8		iny				iny 								; skip character
.9f9e	60		rts				rts 								; and exit
.9f9f					CNAFail:
.9f9f	4c 6b a5	jmp $a56b			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/errors.asm

.8ccf					ErrorHandler:
.8ccf	a8		tay				tay 								; find the error text
.8cd0	f0 49		beq $8d1b			beq 	_EHEnd
.8cd2	a2 00		ldx #$00			ldx 	#0
.8cd4	a9 84		lda #$84			lda 	#((ErrorText) & $FF)
.8cd6	85 36		sta $36				sta 	0+zTemp0
.8cd8	a9 a5		lda #$a5			lda 	#((ErrorText) >> 8)
.8cda	85 37		sta $37				sta 	1+zTemp0
.8cdc					_EHFind:
.8cdc	88		dey				dey 								; found the error text ?
.8cdd	f0 0e		beq $8ced			beq 	_EHFound
.8cdf					_EHFindZero:
.8cdf	b2 36		lda ($36)			lda 	(zTemp0) 					; find the next error
.8ce1	e6 36		inc $36				inc 	zTemp0
.8ce3	d0 02		bne $8ce7			bne 	_EHFNoCarry
.8ce5	e6 37		inc $37				inc 	zTemp0+1
.8ce7					_EHFNoCarry:
.8ce7	c9 00		cmp #$00			cmp 	#0
.8ce9	d0 f4		bne $8cdf			bne 	_EHFindZero
.8ceb	80 ef		bra $8cdc			bra 	_EHFind
.8ced					_EHFound:
.8ced	a5 36		lda $36				lda 	zTemp0 						; print message
.8cef	a6 37		ldx $37				ldx 	zTemp0+1
.8cf1	20 28 8d	jsr $8d28			jsr 	PrintStringXA
.8cf4	a0 01		ldy #$01			ldy 	#1 							; if line number zero don't print i
.8cf6	b1 30		lda ($30),y			lda 	(codePtr),y
.8cf8	d0 05		bne $8cff			bne 	_EHAtMsg
.8cfa	c8		iny				iny
.8cfb	b1 30		lda ($30),y			lda 	(codePtr),y
.8cfd	f0 17		beq $8d16			beq 	_EHCREnd
.8cff					_EHAtMsg:
.8cff	a2 8d		ldx #$8d			ldx 	#_AtMsg >> 8 				; print " at "
.8d01	a9 1e		lda #$1e			lda 	#_AtMsg & $FF
.8d03	20 28 8d	jsr $8d28			jsr 	PrintStringXA
.8d06	a0 01		ldy #$01			ldy 	#1 							; line number into XA
.8d08	b1 30		lda ($30),y			lda 	(codePtr),y
.8d0a	48		pha				pha
.8d0b	c8		iny				iny
.8d0c	b1 30		lda ($30),y			lda 	(codePtr),y
.8d0e	aa		tax				tax
.8d0f	68		pla				pla
.8d10	20 e5 a0	jsr $a0e5			jsr 	ConvertInt16 				; convert XA to string
.8d13	20 28 8d	jsr $8d28			jsr 	PrintStringXA 				; and print it.
.8d16					_EHCREnd:
.8d16	a9 0d		lda #$0d			lda 	#13 						; new line
.8d18	20 d8 a7	jsr $a7d8			jsr 	EXTPrintCharacter
.8d1b					_EHEnd:
.8d1b	4c 67 84	jmp $8467			jmp 	WarmStart
>8d1e	20 61 74 20 6c 69 6e 65		_AtMsg:	.text 	" at line ",0
>8d26	20 00
.8d28					PrintStringXA:
.8d28	5a		phy				phy
.8d29	86 37		stx $37				stx 	zTemp0+1
.8d2b	85 36		sta $36				sta 	zTemp0
.8d2d	a0 00		ldy #$00			ldy 	#0
.8d2f					_PSXALoop:
.8d2f	b1 36		lda ($36),y			lda 	(zTemp0),y
.8d31	f0 06		beq $8d39			beq 	_PSXAExit
.8d33	20 d8 a7	jsr $a7d8			jsr 	EXTPrintCharacter
.8d36	c8		iny				iny
.8d37	80 f6		bra $8d2f			bra 	_PSXALoop
.8d39					_PSXAExit:
.8d39	7a		ply				ply
.8d3a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/compare.asm

.8d3b					UnaryTrue:
.8d3b	fa		plx				plx
.8d3c					ReturnTrue:
.8d3c	a9 01		lda #$01			lda 	#1  						; set to 1
.8d3e	20 24 98	jsr $9824			jsr 	NSMSetByte
.8d41	a9 80		lda #$80			lda 	#$80 						; set sign flag, so it is -1
.8d43	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8d46	60		rts				rts
.8d47					UnaryFalse:
.8d47	fa		plx				plx
.8d48					ReturnFalse:
.8d48	4c 22 98	jmp $9822			jmp 	NSMSetZero 					; set it all to zero
.8d4b					BinaryCompareEqual:
.8d4b	fa		plx				plx
.8d4c	20 87 8d	jsr $8d87			jsr 	CompareBaseCode
.8d4f	c9 00		cmp #$00			cmp 	#0
.8d51	f0 e9		beq $8d3c			beq 	ReturnTrue
.8d53	80 f3		bra $8d48			bra 	ReturnFalse
.8d55					BinaryCompareLess:
.8d55	fa		plx				plx
.8d56	20 87 8d	jsr $8d87			jsr 	CompareBaseCode
.8d59	c9 ff		cmp #$ff			cmp 	#$FF
.8d5b	f0 df		beq $8d3c			beq 	ReturnTrue
.8d5d	80 e9		bra $8d48			bra 	ReturnFalse
.8d5f					BinaryCompareGreater:
.8d5f	fa		plx				plx
.8d60	20 87 8d	jsr $8d87			jsr 	CompareBaseCode
.8d63	c9 01		cmp #$01			cmp 	#1
.8d65	f0 d5		beq $8d3c			beq 	ReturnTrue
.8d67	80 df		bra $8d48			bra 	ReturnFalse
.8d69					BinaryCompareNotEqual:
.8d69	fa		plx				plx
.8d6a	20 87 8d	jsr $8d87			jsr 	CompareBaseCode
.8d6d	c9 00		cmp #$00			cmp 	#0
.8d6f	d0 cb		bne $8d3c			bne 	ReturnTrue
.8d71	80 d5		bra $8d48			bra 	ReturnFalse
.8d73					BinaryCompareLessEqual:
.8d73	fa		plx				plx
.8d74	20 87 8d	jsr $8d87			jsr 	CompareBaseCode
.8d77	c9 01		cmp #$01			cmp 	#1
.8d79	d0 c1		bne $8d3c			bne 	ReturnTrue
.8d7b	80 cb		bra $8d48			bra 	ReturnFalse
.8d7d					BinaryCompareGreaterEqual:
.8d7d	fa		plx				plx
.8d7e	20 87 8d	jsr $8d87			jsr 	CompareBaseCode
.8d81	c9 ff		cmp #$ff			cmp 	#$FF
.8d83	d0 b7		bne $8d3c			bne 	ReturnTrue
.8d85	80 c1		bra $8d48			bra 	ReturnFalse
.8d87					CompareBaseCode:
.8d87	20 e8 91	jsr $91e8			jsr 	DereferenceTopTwo 			; make both values if references.
.8d8a	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if either is a string.
.8d8d	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8d90	29 10		and #$10			and 	#NSTString
.8d92	d0 40		bne $8dd4			bne 	_CBCString
.8d94	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check both are integers
.8d97	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8d9a	d0 3b		bne $8dd7			bne 	_CBCFloat
.8d9c	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8d9f	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8da2	29 08		and #$08			and 	#NSTFloat
.8da4	d0 31		bne $8dd7			bne 	_CBCFloat
.8da6	20 da 8d	jsr $8dda			jsr 	CompareFixMinusZero
.8da9	e8		inx				inx
.8daa	20 da 8d	jsr $8dda			jsr 	CompareFixMinusZero
.8dad	ca		dex				dex
.8dae	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; are the signs different ?
.8db1	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.8db4	10 0b		bpl $8dc1			bpl 	_CDCSameSign
.8db6	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; if first one is -ve
.8db9	30 16		bmi $8dd1			bmi 	_CBCLess 					; return $FF
.8dbb					_CBCGreater:
.8dbb	a9 01		lda #$01			lda 	#1
.8dbd	60		rts				rts
.8dbe					_CBCEqual:
.8dbe	a9 00		lda #$00			lda 	#0
.8dc0	60		rts				rts
.8dc1					_CDCSameSign:
.8dc1	20 ea 8e	jsr $8eea			jsr 	SubTopTwoStack 				; unsigned subtract
.8dc4	20 52 98	jsr $9852			jsr 	NSMIsZero 					; or the mantissa together
.8dc7	f0 f5		beq $8dbe			beq 	_CBCEqual 					; -0 == 0
.8dc9	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; sign of the result. if +ve return $01 else return $FF
.8dcc	5d 01 06	eor $0601,x			eor 	NSStatus+1,x 				; however if both were -ve this is inverted
.8dcf	10 ea		bpl $8dbb			bpl 	_CBCGreater
.8dd1					_CBCLess:
.8dd1	a9 ff		lda #$ff			lda 	#$FF
.8dd3	60		rts				rts
.8dd4					_CBCString:
.8dd4	4c 40 8e	jmp $8e40			jmp 	CompareStrings
.8dd7					_CBCFloat:
.8dd7	4c e1 a1	jmp $a1e1			jmp 	CompareFloat
.8dda					CompareFixMinusZero:
.8dda	20 52 98	jsr $9852			jsr 	NSMIsZero
.8ddd	d0 03		bne $8de2			bne 	_CFXMZNotZero
.8ddf	9e 00 06	stz $0600,x			stz 	NSStatus,x
.8de2					_CFXMZNotZero:
.8de2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/concat.asm

.8de3					StringConcat:
.8de3	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check both strings
.8de6	3d 01 06	and $0601,x			and 	NSStatus+1,x
.8de9	29 18		and #$18			and 	#NSBTypeMask
.8deb	c9 10		cmp #$10			cmp 	#NSTString
.8ded	d0 4e		bne $8e3d			bne		_SCType
.8def	64 38		stz $38				stz 	zTemp1 						; counting total length
.8df1	e8		inx				inx
.8df2	20 10 8e	jsr $8e10			jsr 	_SCSetupZ0 					; setup for second
.8df5	20 1b 8e	jsr $8e1b			jsr 	_SCLengthZ0 				; length for second
.8df8	ca		dex				dex
.8df9	20 10 8e	jsr $8e10			jsr 	_SCSetupZ0 					; setup for first
.8dfc	20 1b 8e	jsr $8e1b			jsr 	_SCLengthZ0 				; length for first
.8dff	a5 38		lda $38				lda 	zTemp1 						; allocate memory
.8e01	20 8b a7	jsr $a78b			jsr 	StringTempAllocate
.8e04	20 2e 8e	jsr $8e2e			jsr 	_SCCopy 					; copy first out, using zTemp0 from above
.8e07	e8		inx				inx
.8e08	20 10 8e	jsr $8e10			jsr 	_SCSetupZ0 					; copy second out
.8e0b	20 2e 8e	jsr $8e2e			jsr 	_SCCopy
.8e0e	ca		dex				dex
.8e0f	60		rts				rts
.8e10					_SCSetupZ0:
.8e10	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.8e13	85 36		sta $36				sta 	zTemp0
.8e15	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8e18	85 37		sta $37				sta 	zTemp0+1
.8e1a	60		rts				rts
.8e1b					_SCLengthZ0:
.8e1b	5a		phy				phy
.8e1c	a0 00		ldy #$00			ldy 	#0
.8e1e					_SCLenLoop:
.8e1e	b1 36		lda ($36),y			lda 	(zTemp0),y
.8e20	f0 0a		beq $8e2c			beq 	_SCLExit
.8e22	c8		iny				iny
.8e23	e6 38		inc $38				inc 	zTemp1
.8e25	10 f7		bpl $8e1e			bpl		_SCLenLoop
.8e27	a9 09		lda #$09		lda	#9
.8e29	4c cf 8c	jmp $8ccf		jmp	ErrorHandler
.8e2c					_SCLExit:
.8e2c	7a		ply				ply
.8e2d	60		rts				rts
.8e2e					_SCCopy:
.8e2e	5a		phy				phy
.8e2f	a0 00		ldy #$00			ldy 	#0
.8e31					_SCCopyLoop:
.8e31	b1 36		lda ($36),y			lda 	(zTemp0),y
.8e33	f0 06		beq $8e3b			beq 	_SCCExit
.8e35	20 c9 a7	jsr $a7c9			jsr 	StringTempWrite
.8e38	c8		iny				iny
.8e39	80 f6		bra $8e31			bra 	_SCCopyLoop
.8e3b					_SCCExit:
.8e3b	7a		ply				ply
.8e3c	60		rts				rts
.8e3d					_SCType:
.8e3d	4c 75 a5	jmp $a575			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/divide.asm

.9fa2					IntegerDivide:
.9fa2	fa		plx				plx
.9fa3	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.9fa6	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.9fa9	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9faa	0a		asl a				asl 	a
.9fab	10 05		bpl $9fb2			bpl 	_NotRef
.9fad	48		pha				pha
.9fae	20 e8 91	jsr $91e8			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9fb1	68		pla				pla
.9fb2					_NotRef:
.9fb2	0a		asl a				asl 	a
.9fb3	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9fb5	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9fb8	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.9fbb	f0 03		beq $9fc0			beq 	_IntegerCode 				; if clear, then we have two integers
.9fbd	4c 75 a5	jmp $a575			jmp 	TypeError 					; anything else, type mismatch.
.9fc0					_IntegerCode:
.9fc0	20 e2 9f	jsr $9fe2			jsr 	CheckDivideZero 			; do div zero check
.9fc3	20 1a a0	jsr $a01a			jsr 	Int32Divide 				; do the division
.9fc6	20 d7 a0	jsr $a0d7			jsr 	CalculateSign 				; calculate result sign
.9fc9					NSMCopyPlusTwoToZero:
.9fc9	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.9fcc	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.9fcf	bd 12 06	lda $0612,x			lda 	NSMantissa1+2,x
.9fd2	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9fd5	bd 1a 06	lda $061a,x			lda 	NSMantissa2+2,x
.9fd8	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.9fdb	bd 22 06	lda $0622,x			lda 	NSMantissa3+2,x
.9fde	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.9fe1	60		rts				rts
.9fe2					CheckDivideZero:
.9fe2	e8		inx				inx
.9fe3	20 52 98	jsr $9852			jsr 	NSMIsZero
.9fe6	f0 02		beq $9fea			beq 	_CDVError
.9fe8	ca		dex				dex
.9fe9	60		rts				rts
.9fea					_CDVError:
.9fea	a9 03		lda #$03		lda	#3
.9fec	4c cf 8c	jmp $8ccf		jmp	ErrorHandler
.9fef					IntegerModulus:
.9fef	fa		plx				plx
.9ff0	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.9ff3	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.9ff6	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9ff7	0a		asl a				asl 	a
.9ff8	10 05		bpl $9fff			bpl 	_NotRef
.9ffa	48		pha				pha
.9ffb	20 e8 91	jsr $91e8			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9ffe	68		pla				pla
.9fff					_NotRef:
.9fff	0a		asl a				asl 	a
.a000	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.a002	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.a005	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.a008	f0 03		beq $a00d			beq 	_IntegerCode 				; if clear, then we have two integers
.a00a	4c 75 a5	jmp $a575			jmp 	TypeError 					; anything else, type mismatch.
.a00d					_IntegerCode:
.a00d	20 e2 9f	jsr $9fe2			jsr 	CheckDivideZero 			; do div zero check
.a010	20 1a a0	jsr $a01a			jsr 	Int32Divide 				; do the division
.a013	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; clear the sign bit.
.a016	5e 00 06	lsr $0600,x			lsr 	NSStatus,x
.a019	60		rts				rts
.a01a					Int32Divide:
.a01a	48		pha				pha 								; save AXY
.a01b	5a		phy				phy
.a01c	20 f9 97	jsr $97f9			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.a01f	20 1e 98	jsr $981e			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.a022	a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.a024					_I32DivideLoop:
.a024	e8		inx				inx
.a025	e8		inx				inx
.a026	20 37 98	jsr $9837			jsr 	NSMShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.a029	ca		dex				dex
.a02a	ca		dex				dex
.a02b	20 38 98	jsr $9838			jsr 	NSMRotateLeft
.a02e	20 5a a0	jsr $a05a			jsr 	DivideCheckSubtract 		; check if subtract possible
.a031	90 03		bcc $a036			bcc 	_I32DivideNoCarryIn
.a033	fe 0a 06	inc $060a,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.a036					_I32DivideNoCarryIn:
.a036	88		dey				dey 								; loop round till division completed.
.a037	d0 eb		bne $a024			bne 	_I32DivideLoop
.a039	7a		ply				ply 								; restore AXY and exit
.a03a	68		pla				pla
.a03b	60		rts				rts
.a03c					Int32ShiftDivide:
.a03c	48		pha				pha 								; save AY
.a03d	5a		phy				phy
.a03e	e8		inx				inx 								; clear S[X+2]
.a03f	e8		inx				inx
.a040	20 22 98	jsr $9822			jsr 	NSMSetZero
.a043	ca		dex				dex
.a044	ca		dex				dex
.a045	a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.a047					_I32SDLoop:
.a047	20 5a a0	jsr $a05a			jsr 	DivideCheckSubtract 		; check if subtract possible
.a04a	e8		inx				inx
.a04b	e8		inx				inx
.a04c	20 38 98	jsr $9838			jsr 	NSMRotateLeft				; shift 64 bit FPA left, rotating carry in
.a04f	ca		dex				dex
.a050	ca		dex				dex
.a051	20 38 98	jsr $9838			jsr 	NSMRotateLeft
.a054	88		dey				dey 	 							; do 31 times
.a055	d0 f0		bne $a047			bne 	_I32SDLoop
.a057	7a		ply				ply 								; restore AY and exit
.a058	68		pla				pla
.a059	60		rts				rts
.a05a					DivideCheckSubtract:
.a05a	20 ea 8e	jsr $8eea			jsr 	SubTopTwoStack 				; subtract Stack[X+1] from Stack[X+0]
.a05d	b0 04		bcs $a063			bcs 	_DCSExit 					; if carry set, then could do, exit
.a05f	20 c4 8e	jsr $8ec4			jsr 	AddTopTwoStack 				; add it back in
.a062	18		clc				clc 								; and return False
.a063					_DCSExit:
.a063	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/multiply.asm

.a064					MulInteger:
.a064	fa		plx				plx
.a065	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.a068	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.a06b	0a		asl a				asl 	a 							; shift reference bit into sign bit
.a06c	0a		asl a				asl 	a
.a06d	10 05		bpl $a074			bpl 	_NotRef
.a06f	48		pha				pha
.a070	20 e8 91	jsr $91e8			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.a073	68		pla				pla
.a074					_NotRef:
.a074	0a		asl a				asl 	a 							; put MSB of type into A:7
.a075	30 0b		bmi $a082			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.a077	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.a07a	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.a07d	f0 06		beq $a085			beq 	_IntegerCode 				; if clear, then we have two integers
.a07f	4c b8 a2	jmp $a2b8			jmp 	FloatingPointMultiply 							; otherwise at least one float.
.a082					_StringData:
.a082	4c 7f a5	jmp $a57f			jmp 	NotDoneError							; at least one string - don't know both are strings.
.a085					_IntegerCode:
.a085	20 92 a0	jsr $a092			jsr 	MultiplyShort
.a088	c9 00		cmp #$00			cmp 	#0
.a08a	f0 05		beq $a091			beq 	_MIExit
.a08c	a9 04		lda #$04		lda	#4
.a08e	4c cf 8c	jmp $8ccf		jmp	ErrorHandler
.a091					_MIExit:
.a091	60		rts				rts
.a092					MultiplyShort:
.a092	5a		phy				phy 								; save Y
.a093	20 f9 97	jsr $97f9			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.a096	20 1e 98	jsr $981e			jsr 	NSMSetZeroMantissaOnly 		; set mantissa S[X] to zero
.a099	a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.a09b					_I32MLoop:
.a09b	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.a09e	1d 12 06	ora $0612,x			ora 	NSMantissa1+2,x
.a0a1	1d 1a 06	ora $061a,x			ora 	NSMantissa2+2,x
.a0a4	1d 22 06	ora $0622,x			ora 	NSMantissa3+2,x
.a0a7	f0 28		beq $a0d1			beq 	_I32MExit 					; exit if zero
.a0a9	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.a0ac	29 01		and #$01			and 	#1
.a0ae	f0 0e		beq $a0be			beq 	_I32MNoAdd
.a0b0	20 c4 8e	jsr $8ec4			jsr 	AddTopTwoStack 				; if so add S[X+1] to S[X+0]
.a0b3	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.a0b6	10 06		bpl $a0be			bpl 	_I32MNoAdd
.a0b8					_I32ShiftRight:
.a0b8	20 45 98	jsr $9845			jsr 	NSMShiftRight 				; shift S[X] right
.a0bb	c8		iny				iny 								; increment shift count
.a0bc	80 0a		bra $a0c8			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.a0be					_I32MNoAdd:
.a0be	3c 21 06	bit $0621,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.a0c1	70 f5		bvs $a0b8			bvs 	_I32ShiftRight 				; instead.
.a0c3	e8		inx				inx
.a0c4	20 37 98	jsr $9837			jsr 	NSMShiftLeft 				; shift additive S[X+1] left
.a0c7	ca		dex				dex
.a0c8					_I32MShiftUpper:
.a0c8	e8		inx				inx 								; shift S[X+2] right
.a0c9	e8		inx				inx
.a0ca	20 45 98	jsr $9845			jsr 	NSMShiftRight
.a0cd	ca		dex				dex
.a0ce	ca		dex				dex
.a0cf	80 ca		bra $a09b			bra 	_I32MLoop 					; try again.
.a0d1					_I32MExit:
.a0d1	20 d7 a0	jsr $a0d7			jsr 	CalculateSign
.a0d4	98		tya				tya 								; shift in A
.a0d5	7a		ply				ply 								; restore Y and exit
.a0d6	60		rts				rts
.a0d7					CalculateSign:
.a0d7	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.a0da	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; shift result left
.a0dd	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.a0e0	0a		asl a				asl 	a 							; shift bit 7 into carry
.a0e1	7e 00 06	ror $0600,x			ror 	NSStatus,x 					; shift right into status byte.
.a0e4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/scompare.asm

.8e40					CompareStrings:
.8e40	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check both are strings
.8e43	3d 01 06	and $0601,x			and 	NSStatus+1,x
.8e46	29 10		and #$10			and 	#NSBIsString
.8e48	f0 2c		beq $8e76			beq 	_CSTypeError
.8e4a	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy string addresses to zTemp0/1
.8e4d	85 36		sta $36				sta 	zTemp0
.8e4f	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8e52	85 37		sta $37				sta 	zTemp0+1
.8e54	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.8e57	85 38		sta $38				sta 	zTemp1
.8e59	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.8e5c	85 39		sta $39				sta 	zTemp1+1
.8e5e	5a		phy				phy 								; save Y so we can access strings
.8e5f	a0 ff		ldy #$ff			ldy 	#$FF 						; -1 for pre increment.
.8e61					_CSLoop:
.8e61	c8		iny				iny
.8e62	b1 36		lda ($36),y			lda 	(zTemp0),y 					; check if they are the same
.8e64	d1 38		cmp ($38),y			cmp 	(zTemp1),y
.8e66	d0 06		bne $8e6e			bne 	_CSDifferent
.8e68	c9 00		cmp #$00			cmp 	#0 							; reached end ?
.8e6a	d0 f5		bne $8e61			bne 	_CSLoop 					; still comparing
.8e6c					_CSExit:
.8e6c	7a		ply				ply 								; reached end, return zero in A from EOS
.8e6d	60		rts				rts
.8e6e					_CSDifferent:
.8e6e	a9 ff		lda #$ff			lda 	#255 						; if < return $FF
.8e70	90 fa		bcc $8e6c			bcc		_CSExit
.8e72	a9 01		lda #$01			lda 	#1 							; otherwise return 1.
.8e74	80 f6		bra $8e6c			bra 	_CSExit
.8e76					_CSTypeError:
.8e76	4c 75 a5	jmp $a575			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/shifts.asm

.8e79					ShiftLeft:
.8e79	38		sec				sec
.8e7a	80 01		bra $8e7d			bra 	ShiftMain
.8e7c					ShiftRight:
.8e7c	18		clc				clc
.8e7d					ShiftMain:
.8e7d	fa		plx				plx 								; restore X
.8e7e	08		php				php 								; save direction
.8e7f	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8e82	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8e85	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8e86	0a		asl a				asl 	a
.8e87	10 05		bpl $8e8e			bpl 	_NotRef
.8e89	48		pha				pha
.8e8a	20 e8 91	jsr $91e8			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8e8d	68		pla				pla
.8e8e					_NotRef:
.8e8e	0a		asl a				asl 	a
.8e8f	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8e91	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8e94	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8e97	f0 03		beq $8e9c			beq 	_IntegerCode 				; if clear, then we have two integers
.8e99	4c 75 a5	jmp $a575			jmp 	TypeError 					; anything else, type mismatch.
.8e9c					_IntegerCode:
.8e9c	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; check number < 32
.8e9f	29 e0		and #$e0			and 	#$E0
.8ea1	1d 11 06	ora $0611,x			ora 	NSMantissa1+1,x
.8ea4	1d 19 06	ora $0619,x			ora 	NSMantissa2+1,x
.8ea7	1d 21 06	ora $0621,x			ora 	NSMantissa3+1,x
.8eaa	d0 13		bne $8ebf			bne 	_SMExit0 					; if >= 32 it will always return zero.
.8eac					_SMLoop:
.8eac	de 09 06	dec $0609,x			dec 	NSMantissa0+1,x 			; predecrement, could do << 0
.8eaf	30 11		bmi $8ec2			bmi 	_SMExit 					; exit if done.
.8eb1	28		plp				plp 								; restore direcition setting
.8eb2	08		php				php
.8eb3	90 05		bcc $8eba			bcc 	_SMRight
.8eb5	20 37 98	jsr $9837			jsr 	NSMShiftLeft 				; shift left if CS
.8eb8	80 f2		bra $8eac			bra 	_SMLoop
.8eba					_SMRight:
.8eba	20 45 98	jsr $9845			jsr 	NSMShiftRight 				; shift right if CC
.8ebd	80 ed		bra $8eac			bra 	_SMLoop
.8ebf					_SMExit0:
.8ebf	20 22 98	jsr $9822			jsr 	NSMSetZero 					; return zero.
.8ec2					_SMExit:
.8ec2	28		plp				plp 								; throw direction
.8ec3	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/simple.asm

.8ec4					AddTopTwoStack:
.8ec4	18		clc				clc
.8ec5	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8ec8	7d 09 06	adc $0609,x			adc 		NSMantissa0+1,x
.8ecb	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8ece	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8ed1	7d 11 06	adc $0611,x			adc 		NSMantissa1+1,x
.8ed4	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8ed7	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8eda	7d 19 06	adc $0619,x			adc 		NSMantissa2+1,x
.8edd	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8ee0	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8ee3	7d 21 06	adc $0621,x			adc 		NSMantissa3+1,x
.8ee6	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8ee9	60		rts				rts
.8eea					SubTopTwoStack:
.8eea	38		sec				sec
.8eeb	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8eee	fd 09 06	sbc $0609,x			sbc 		NSMantissa0+1,x
.8ef1	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8ef4	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8ef7	fd 11 06	sbc $0611,x			sbc 		NSMantissa1+1,x
.8efa	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8efd	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8f00	fd 19 06	sbc $0619,x			sbc 		NSMantissa2+1,x
.8f03	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8f06	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8f09	fd 21 06	sbc $0621,x			sbc 		NSMantissa3+1,x
.8f0c	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8f0f	60		rts				rts
.8f10					AddInteger:
.8f10	fa		plx				plx
.8f11	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8f14	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8f17	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8f18	0a		asl a				asl 	a
.8f19	10 05		bpl $8f20			bpl 	_NotRef
.8f1b	48		pha				pha
.8f1c	20 e8 91	jsr $91e8			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8f1f	68		pla				pla
.8f20					_NotRef:
.8f20	0a		asl a				asl 	a 							; put MSB of type into A:7
.8f21	30 0b		bmi $8f2e			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.8f23	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8f26	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8f29	f0 06		beq $8f31			beq 	_IntegerCode 				; if clear, then we have two integers
.8f2b	4c 40 a1	jmp $a140			jmp 	FloatingPointAdd 							; otherwise at least one float.
.8f2e					_StringData:
.8f2e	4c e3 8d	jmp $8de3			jmp 	StringConcat							; at least one string - don't know both are strings.
.8f31					_IntegerCode:
.8f31					AddCode:
.8f31	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.8f34	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.8f37	10 8b		bpl $8ec4			bpl 	AddTopTwoStack
.8f39	20 ea 8e	jsr $8eea			jsr 	SubTopTwoStack 				; do a physical subtraction
.8f3c	3c 20 06	bit $0620,x			bit 	NSMantissa3,x 				; result is +ve, okay
.8f3f	10 09		bpl $8f4a			bpl 	_AddExit
.8f41	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; sign is that of 2nd value
.8f44	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8f47	20 d7 97	jsr $97d7			jsr 	NSMNegateMantissa 			; negate the mantissa and exit
.8f4a					_AddExit:
.8f4a	60		rts				rts
.8f4b					SubInteger:
.8f4b	fa		plx				plx
.8f4c	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8f4f	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8f52	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8f53	0a		asl a				asl 	a
.8f54	10 05		bpl $8f5b			bpl 	_NotRef
.8f56	48		pha				pha
.8f57	20 e8 91	jsr $91e8			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8f5a	68		pla				pla
.8f5b					_NotRef:
.8f5b	0a		asl a				asl 	a 							; put MSB of type into A:7
.8f5c	30 0b		bmi $8f69			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.8f5e	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8f61	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8f64	f0 06		beq $8f6c			beq 	_IntegerCode 				; if clear, then we have two integers
.8f66	4c 45 a1	jmp $a145			jmp 	FloatingPointSub 							; otherwise at least one float.
.8f69					_StringData:
.8f69	4c 7f a5	jmp $a57f			jmp 	NotDoneError							; at least one string - don't know both are strings.
.8f6c					_IntegerCode:
.8f6c	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; negate the second value.
.8f6f	49 80		eor #$80			eor 	#$80
.8f71	9d 01 06	sta $0601,x			sta 	NSStatus+1,x
.8f74	80 bb		bra $8f31			bra 	AddCode 					; and do the same code as add.
.8f76					AndInteger:
.8f76	fa		plx				plx
.8f77	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8f7a	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8f7d	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8f7e	0a		asl a				asl 	a
.8f7f	10 05		bpl $8f86			bpl 	_NotRef
.8f81	48		pha				pha
.8f82	20 e8 91	jsr $91e8			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8f85	68		pla				pla
.8f86					_NotRef:
.8f86	0a		asl a				asl 	a
.8f87	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8f89	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8f8c	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8f8f	f0 03		beq $8f94			beq 	_IntegerCode 				; if clear, then we have two integers
.8f91	4c 75 a5	jmp $a575			jmp 	TypeError 					; anything else, type mismatch.
.8f94					_IntegerCode:
.8f94	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8f97	3d 09 06	and $0609,x			and 		NSMantissa0+1,x
.8f9a	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8f9d	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8fa0	3d 11 06	and $0611,x			and 		NSMantissa1+1,x
.8fa3	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8fa6	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8fa9	3d 19 06	and $0619,x			and 		NSMantissa2+1,x
.8fac	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8faf	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8fb2	3d 21 06	and $0621,x			and 		NSMantissa3+1,x
.8fb5	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8fb8	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.8fbb	60		rts				rts
.8fbc					OraInteger:
.8fbc	fa		plx				plx
.8fbd	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8fc0	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8fc3	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8fc4	0a		asl a				asl 	a
.8fc5	10 05		bpl $8fcc			bpl 	_NotRef
.8fc7	48		pha				pha
.8fc8	20 e8 91	jsr $91e8			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8fcb	68		pla				pla
.8fcc					_NotRef:
.8fcc	0a		asl a				asl 	a
.8fcd	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8fcf	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8fd2	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8fd5	f0 03		beq $8fda			beq 	_IntegerCode 				; if clear, then we have two integers
.8fd7	4c 75 a5	jmp $a575			jmp 	TypeError 					; anything else, type mismatch.
.8fda					_IntegerCode:
.8fda	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8fdd	1d 09 06	ora $0609,x			ora 		NSMantissa0+1,x
.8fe0	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8fe3	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8fe6	1d 11 06	ora $0611,x			ora 		NSMantissa1+1,x
.8fe9	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8fec	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8fef	1d 19 06	ora $0619,x			ora 		NSMantissa2+1,x
.8ff2	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8ff5	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8ff8	1d 21 06	ora $0621,x			ora 		NSMantissa3+1,x
.8ffb	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8ffe	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.9001	60		rts				rts
.9002					EorInteger:
.9002	fa		plx				plx
.9003	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.9006	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.9009	0a		asl a				asl 	a 							; shift reference bit into sign bit
.900a	0a		asl a				asl 	a
.900b	10 05		bpl $9012			bpl 	_NotRef
.900d	48		pha				pha
.900e	20 e8 91	jsr $91e8			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9011	68		pla				pla
.9012					_NotRef:
.9012	0a		asl a				asl 	a
.9013	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9015	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9018	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.901b	f0 03		beq $9020			beq 	_IntegerCode 				; if clear, then we have two integers
.901d	4c 75 a5	jmp $a575			jmp 	TypeError 					; anything else, type mismatch.
.9020					_IntegerCode:
.9020	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.9023	5d 09 06	eor $0609,x			eor 		NSMantissa0+1,x
.9026	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.9029	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.902c	5d 11 06	eor $0611,x			eor 		NSMantissa1+1,x
.902f	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9032	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.9035	5d 19 06	eor $0619,x			eor 		NSMantissa2+1,x
.9038	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.903b	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.903e	5d 21 06	eor $0621,x			eor 		NSMantissa3+1,x
.9041	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.9044	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.9047	60		rts				rts
.9048					WordIndirect:
.9048	fa		plx				plx
.9049	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.904c	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.904f	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9050	0a		asl a				asl 	a
.9051	10 05		bpl $9058			bpl 	_NotRef
.9053	48		pha				pha
.9054	20 e8 91	jsr $91e8			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9057	68		pla				pla
.9058					_NotRef:
.9058	0a		asl a				asl 	a
.9059	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.905b	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.905e	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.9061	f0 03		beq $9066			beq 	_IntegerCode 				; if clear, then we have two integers
.9063	4c 75 a5	jmp $a575			jmp 	TypeError 					; anything else, type mismatch.
.9066					_IntegerCode:
.9066	20 31 8f	jsr $8f31			jsr 	AddCode 					; add the two values
.9069	a9 22		lda #$22			lda 	#NSBIsReference+2 			; make a 2 byte reference
.906b	9d 00 06	sta $0600,x			sta 	NSStatus,x
.906e	60		rts				rts
.906f					ByteIndirect:
.906f	fa		plx				plx
.9070	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.9073	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.9076	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9077	0a		asl a				asl 	a
.9078	10 05		bpl $907f			bpl 	_NotRef
.907a	48		pha				pha
.907b	20 e8 91	jsr $91e8			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.907e	68		pla				pla
.907f					_NotRef:
.907f	0a		asl a				asl 	a
.9080	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9082	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9085	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.9088	f0 03		beq $908d			beq 	_IntegerCode 				; if clear, then we have two integers
.908a	4c 75 a5	jmp $a575			jmp 	TypeError 					; anything else, type mismatch.
.908d					_IntegerCode:
.908d	20 31 8f	jsr $8f31			jsr 	AddCode 					; add the two values
.9090	a9 21		lda #$21			lda 	#NSBIsReference+1 			; make a 1 byte reference
.9092	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9095	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/tostring.asm

.a0e5					ConvertInt16:
.a0e5	8d 08 06	sta $0608			sta 	NSMantissa0 				; set up as 32 bit conversion
.a0e8	8e 10 06	stx $0610			stx 	NSMantissa1
.a0eb	9c 18 06	stz $0618			stz 	NSMantissa2
.a0ee	9c 20 06	stz $0620			stz 	NSMantissa3
.a0f1	9c 00 06	stz $0600			stz 	NSStatus 					; positive integer
.a0f4	a2 00		ldx #$00			ldx 	#0 							; stack level
.a0f6	a9 0a		lda #$0a			lda 	#10 						; base
.a0f8	80 00		bra $a0fa			bra 	ConvertInt32
.a0fa					ConvertInt32:
.a0fa	5a		phy				phy
.a0fb	a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.a0fd	2c 00 06	bit $0600			bit 	NSStatus 					; output a - if not negative.
.a100	10 08		bpl $a10a			bpl 	_CI32NotNeg
.a102	48		pha				pha
.a103	a9 2d		lda #$2d			lda 	#'-'
.a105	99 76 08	sta $0876,y			sta 	NumberBuffer,y
.a108	c8		iny				iny
.a109	68		pla				pla
.a10a					_CI32NotNeg:
.a10a	20 18 a1	jsr $a118			jsr 	_CI32DivideConvert 			; recursive conversion
.a10d	a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.a10f	99 76 08	sta $0876,y			sta 	NumberBuffer,y
.a112	7a		ply				ply
.a113	a2 08		ldx #$08			ldx 	#NumberBuffer >> 8
.a115	a9 76		lda #$76			lda 	#NumberBuffer & $FF
.a117	60		rts				rts
.a118					_CI32DivideConvert:
.a118	e8		inx				inx 								; write to next slot up
.a119	20 24 98	jsr $9824			jsr 	NSMSetByte
.a11c	ca		dex				dex
.a11d	20 1a a0	jsr $a01a			jsr 	Int32Divide 				; divide
.a120	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; save remainder
.a123	48		pha				pha
.a124	20 c9 9f	jsr $9fc9			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.a127	20 52 98	jsr $9852			jsr 	NSMIsZero 					; is it zero ?
.a12a	f0 06		beq $a132			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.a12c	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.a12f	20 18 a1	jsr $a118			jsr 	_CI32DivideConvert 			; and recusrively call.
.a132					_CI32NoRecurse:
.a132	68		pla				pla 								; remainder
.a133	c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII
.a135	90 02		bcc $a139			bcc 	_CI32NotHex
.a137	69 26		adc #$26			adc 	#6+32
.a139					_CI32NotHex:
.a139	69 30		adc #$30			adc 	#48
.a13b	99 76 08	sta $0876,y			sta 	NumberBuffer,y 				; write out and exit
.a13e	c8		iny				iny
.a13f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/expression.asm


;******  Processing file: ./common/expressions/../generated/precedence.dat

.9096					PrecedenceLevel:
>9096	04					.byte	 4	; $00 <<
>9097	02					.byte	 2	; $01 <=
>9098	02					.byte	 2	; $02 <>
>9099	00					.byte	 0	; $03 !!3
>909a	00					.byte	 0	; $04 ><
>909b	02					.byte	 2	; $05 >=
>909c	04					.byte	 4	; $06 >>
>909d	00					.byte	 0	; $07 !!7
>909e	00					.byte	 0	; $08 !!8
>909f	00					.byte	 0	; $09 !!9
>90a0	00					.byte	 0	; $0a !!10
>90a1	00					.byte	 0	; $0b !!11
>90a2	00					.byte	 0	; $0c !!12
>90a3	00					.byte	 0	; $0d !!13
>90a4	00					.byte	 0	; $0e !!14
>90a5	00					.byte	 0	; $0f !!15
>90a6	00					.byte	 0	; $10 @
>90a7	00					.byte	 0	; $11 !!17
>90a8	00					.byte	 0	; $12 !!18
>90a9	00					.byte	 0	; $13 [
>90aa	04					.byte	 4	; $14 \
>90ab	00					.byte	 0	; $15 ]
>90ac	01					.byte	 1	; $16 ^
>90ad	00					.byte	 0	; $17 _
>90ae	00					.byte	 0	; $18 `
>90af	00					.byte	 0	; $19 !!25
>90b0	00					.byte	 0	; $1a !!26
>90b1	00					.byte	 0	; $1b {
>90b2	01					.byte	 1	; $1c |
>90b3	00					.byte	 0	; $1d }
>90b4	00					.byte	 0	; $1e ~
>90b5	00					.byte	 0	; $1f [7m<7F>[m
>90b6	00					.byte	 0	; $20
>90b7	05					.byte	 5	; $21 !
>90b8	00					.byte	 0	; $22 "
>90b9	00					.byte	 0	; $23 #
>90ba	05					.byte	 5	; $24 $
>90bb	04					.byte	 4	; $25 %
>90bc	01					.byte	 1	; $26 &
>90bd	00					.byte	 0	; $27 '
>90be	00					.byte	 0	; $28 (
>90bf	00					.byte	 0	; $29 )
>90c0	04					.byte	 4	; $2a *
>90c1	03					.byte	 3	; $2b +
>90c2	00					.byte	 0	; $2c ,
>90c3	03					.byte	 3	; $2d -
>90c4	00					.byte	 0	; $2e .
>90c5	04					.byte	 4	; $2f /
>90c6	00					.byte	 0	; $30 0
>90c7	00					.byte	 0	; $31 1
>90c8	00					.byte	 0	; $32 2
>90c9	00					.byte	 0	; $33 3
>90ca	00					.byte	 0	; $34 4
>90cb	00					.byte	 0	; $35 5
>90cc	00					.byte	 0	; $36 6
>90cd	00					.byte	 0	; $37 7
>90ce	00					.byte	 0	; $38 8
>90cf	00					.byte	 0	; $39 9
>90d0	00					.byte	 0	; $3a :
>90d1	00					.byte	 0	; $3b ;
>90d2	02					.byte	 2	; $3c <
>90d3	02					.byte	 2	; $3d =
>90d4	02					.byte	 2	; $3e >
>90d5	05					.byte	 5	; $3f ?

;******  Return to file: ./common/expressions/expression.asm

.90d6					EvaluateExpressionAt0:
.90d6	a2 00		ldx #$00			ldx 	#0 							; bottom stack level
.90d8					EvaluateExpression:
.90d8	a9 00		lda #$00			lda 	#0 							; lowest precedence level
.90da					EvaluateExpressionAtPrecedence:
.90da	48		pha				pha 								; save precedence level
.90db	20 a9 93	jsr $93a9			jsr 	EvaluateTerm 				; evaluate term into level X.
.90de	68		pla				pla 								; restore precedence level.
.90df					_EXPRLoop:
.90df	85 36		sta $36				sta 	zTemp0 						; save current precedence level.
.90e1	b1 30		lda ($30),y			lda 	(codePtr),y
.90e3	c9 40		cmp #$40			cmp		#$40 						; if >= $40 cannot be an operator
.90e5	b0 25		bcs $910c			bcs 	_EXPRExit
.90e7	da		phx				phx 								; read the operator precedence
.90e8	aa		tax				tax
.90e9	bd 96 90	lda $9096,x			lda 	PrecedenceLevel,x
.90ec	fa		plx				plx
.90ed	c9 00		cmp #$00			cmp 	#0							; if zero exit (not an operator)
.90ef	f0 1b		beq $910c			beq 	_EXPRExit
.90f1	85 37		sta $37				sta 	zTemp0+1 					; save operator precedence level.
.90f3	a5 36		lda $36				lda 	zTemp0 						; compare current precedence vs. operator precedence
.90f5	c5 37		cmp $37				cmp 	zTemp0+1
.90f7	b0 13		bcs $910c			bcs		_EXPRExit 					; if current >= operator exit
.90f9	48		pha				pha 								; save current precedence.
.90fa	b1 30		lda ($30),y			lda 	(codePtr),y
.90fc	c8		iny				iny
.90fd	48		pha				pha
.90fe	a5 37		lda $37				lda 	zTemp0+1 					; get operator precedence level
.9100	e8		inx				inx 								; work out the right hand side.
.9101	20 da 90	jsr $90da			jsr 	EvaluateExpressionAtPrecedence
.9104	ca		dex				dex
.9105	68		pla				pla 								; get operator, call the code.
.9106	20 0f 91	jsr $910f			jsr 	_EXPRCaller
.9109	68		pla				pla 								; restore precedence level
.910a	80 d3		bra $90df			bra 	_EXPRLoop 					; and go round.
.910c					_EXPRExit:
.910c	a5 36		lda $36				lda 	zTemp0 						; A = current precedence level.
.910e	60		rts				rts
.910f					_EXPRCaller:
.910f	da		phx				phx 								; save on stack, first thing is to restore it
.9110	0a		asl a				asl 	a 							; double so can use vectors into X
.9111	aa		tax				tax
.9112	7c 7c 80	jmp ($807c,x)			jmp 	(VectorSetPunc,x) 			; and go to the code.

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/addsub.asm

.a140					FloatingPointAdd:
.a140	20 e1 a2	jsr $a2e1			jsr 	FloatPrepare 				; prepare for floats
.a143	80 0b		bra $a150			bra 	FloatAdd
.a145					FloatingPointSub:
.a145	20 e1 a2	jsr $a2e1			jsr 	FloatPrepare 				; prepare for floats
.a148					FloatSubtract:
.a148	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; negate FPB
.a14b	49 80		eor #$80			eor 	#$80
.a14d	9d 01 06	sta $0601,x			sta 	NSStatus+1,x				; and fall through.
.a150					FloatAdd:
.a150	48		pha				pha
.a151	5a		phy				phy
.a152	20 f2 a2	jsr $a2f2			jsr 	NSNormalise 				; normalise S[X]
.a155	f0 54		beq $a1ab			beq 	_FAReturn1
.a157	e8		inx				inx 								; normalise S[X+1]
.a158	20 f2 a2	jsr $a2f2			jsr 	NSNormalise
.a15b	ca		dex				dex
.a15c	c9 00		cmp #$00			cmp 	#0
.a15e	f0 6f		beq $a1cf			beq 	_FAExit 					; if so, just return A
.a160	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; are the exponents the same ?
.a163	dd 29 06	cmp $0629,x			cmp 	NSExponent+1,x
.a166	f0 1b		beq $a183			beq 	_FAExponentsEqual
.a168	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; work out the larger exponent
.a16b	a8		tay				tay
.a16c	38		sec				sec 								; do a signed comparison of the exponents.
.a16d	fd 29 06	sbc $0629,x			sbc 	NSExponent+1,x
.a170	50 02		bvc $a174			bvc 	_FANoSignedChange
.a172	49 80		eor #$80			eor 	#$80
.a174					_FANoSignedChange:
.a174	29 80		and #$80			and 	#$80
.a176	10 03		bpl $a17b			bpl 	_FAHaveMax
.a178	bc 29 06	ldy $0629,x			ldy 	NSExponent+1,x
.a17b					_FAHaveMax:
.a17b	20 d2 a1	jsr $a1d2			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.a17e	e8		inx				inx
.a17f	20 d2 a1	jsr $a1d2			jsr 	_FAShiftToExponent
.a182	ca		dex				dex
.a183					_FAExponentsEqual:
.a183	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; are the signs the same
.a186	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.a189	30 10		bmi $a19b			bmi 	_FADifferentSigns
.a18b	20 c4 8e	jsr $8ec4			jsr 	AddTopTwoStack 				; do the add of the mantissae
.a18e	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.a191	10 3c		bpl $a1cf			bpl 	_FAExit 					; if no, we are done.
.a193	20 45 98	jsr $9845			jsr 	NSMShiftRight 				; shift A right, renormalising it.
.a196	fe 28 06	inc $0628,x			inc 	NSExponent,x 				; bump the exponent and exit
.a199	80 34		bra $a1cf			bra 	_FAExit
.a19b					_FADifferentSigns:
.a19b	20 ea 8e	jsr $8eea			jsr 	SubTopTwoStack 				; subtract mantissa B from A
.a19e	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; is the result negative ?
.a1a1	10 2c		bpl $a1cf			bpl 	_FAExit 					; if no, we are done.
.a1a3	20 ce 97	jsr $97ce			jsr 	NSMNegate 					; netate result
.a1a6	20 d7 97	jsr $97d7			jsr 	NSMNegateMantissa 			; negate (2'c) the mantissa
.a1a9	80 24		bra $a1cf			bra 	_FAExit
.a1ab					_FAReturn1:
.a1ab	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.a1ae	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.a1b1	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.a1b4	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.a1b7	bd 19 06	lda $0619,x			lda 	NSMantissa2+1,x
.a1ba	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.a1bd	bd 21 06	lda $0621,x			lda 	NSMantissa3+1,x
.a1c0	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.a1c3	bd 29 06	lda $0629,x			lda 	NSExponent+1,x
.a1c6	9d 28 06	sta $0628,x			sta 	NSExponent,x
.a1c9	bd 01 06	lda $0601,x			lda 	NSStatus+1,x
.a1cc	9d 00 06	sta $0600,x			sta 	NSStatus,x
.a1cf					_FAExit:
.a1cf	7a		ply				ply
.a1d0	68		pla				pla
.a1d1	60		rts				rts
.a1d2					_FAShiftToExponent:
.a1d2					_FAShiftToExponent2:
.a1d2	98		tya				tya 								; compare Y to exponent
.a1d3	dd 28 06	cmp $0628,x			cmp 	NSExponent,x 				; reached the exponent required ?
.a1d6	f0 08		beq $a1e0			beq 	_FASEExit 					; exit if so.
.a1d8	20 45 98	jsr $9845			jsr 	NSMShiftRight	 			; shift the mantissa right
.a1db	fe 28 06	inc $0628,x			inc 	NSExponent,x 				; increment exponent
.a1de	80 f2		bra $a1d2			bra 	_FAShiftToExponent2
.a1e0					_FASEExit:
.a1e0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/compare.asm

.a1e1					CompareFloat:
.a1e1	20 48 a1	jsr $a148			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.a1e4	bd 10 06	lda $0610,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.a1e7	29 f8		and #$f8			and 	#$F8
.a1e9	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.a1ec	1d 20 06	ora $0620,x			ora 	NSMantissa3,x
.a1ef	f0 09		beq $a1fa			beq 	_FCExit 					; zero, so approximately identical
.a1f1	a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.a1f3	3c 00 06	bit $0600,x			bit 	NSStatus,x
.a1f6	10 02		bpl $a1fa			bpl 	_FCExit
.a1f8					_FCNegative:
.a1f8	a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.a1fa					_FCExit:
.a1fa	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/divide.asm

.a1fb					FDivideCommand:
.a1fb	fa		plx				plx	 								; restore stack position
.a1fc	20 e1 a2	jsr $a2e1			jsr 	FloatPrepare 				; prepare for floats
.a1ff					FloatDivide:
.a1ff	48		pha				pha
.a200	e8		inx				inx
.a201	20 f2 a2	jsr $a2f2			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.a204	ca		dex				dex
.a205	c9 00		cmp #$00			cmp 	#0
.a207	f0 20		beq $a229			beq 	_FDZero
.a209	20 f2 a2	jsr $a2f2			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.a20c	f0 19		beq $a227			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.a20e	20 3c a0	jsr $a03c			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.a211	20 c9 9f	jsr $9fc9			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.a214	20 f2 a2	jsr $a2f2			jsr		NSNormalise 				; renormalise
.a217	20 d7 a0	jsr $a0d7			jsr 	CalculateSign 				; calculate result sign
.a21a	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; calculate exponent
.a21d	38		sec				sec
.a21e	fd 29 06	sbc $0629,x			sbc 	NSExponent+1,x
.a221	38		sec				sec
.a222	e9 1e		sbc #$1e			sbc 	#30
.a224	9d 28 06	sta $0628,x			sta 	NSExponent,x
.a227					_FDExit:
.a227	68		pla				pla
.a228	60		rts				rts
.a229					_FDZero:
.a229	a9 03		lda #$03		lda	#3
.a22b	4c cf 8c	jmp $8ccf		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/fractional.asm

.a22e					FloatFractionalPart:
.a22e	5a		phy				phy
.a22f	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; take absolute value
.a232	29 7f		and #$7f			and 	#$7F
.a234	9d 00 06	sta $0600,x			sta 	NSStatus,x
.a237	20 f2 a2	jsr $a2f2			jsr 	NSNormalise
.a23a	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.a23d	38		sec				sec
.a23e	e9 e0		sbc #$e0			sbc 	#$E0
.a240	90 31		bcc $a273			bcc 	_FFPExit 					; already fractional
.a242	c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.a244	b0 2a		bcs $a270			bcs 	_FFPZero
.a246	a8		tay				tay 								; put count to do in Y
.a247	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; do each in turn.
.a24a	20 75 a2	jsr $a275			jsr 	_FFPPartial
.a24d	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.a250	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.a253	20 75 a2	jsr $a275			jsr 	_FFPPartial
.a256	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.a259	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.a25c	20 75 a2	jsr $a275			jsr 	_FFPPartial
.a25f	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.a262	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.a265	20 75 a2	jsr $a275			jsr 	_FFPPartial
.a268	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.a26b	20 52 98	jsr $9852			jsr 	NSMIsZero 					; zeroed check.
.a26e	d0 03		bne $a273			bne 	_FFPExit
.a270					_FFPZero:
.a270	20 22 98	jsr $9822			jsr 	NSMSetZero
.a273					_FFPExit:
.a273	7a		ply				ply
.a274	60		rts				rts
.a275					_FFPPartial:
.a275	c0 00		cpy #$00			cpy 	#0 							; no more to do
.a277	f0 17		beq $a290			beq 	_FFFPPExit
.a279	c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.a27b	b0 0c		bcs $a289			bcs 	_FFFPPWholeByte
.a27d	5a		phy				phy
.a27e					_FFFPPLeft:
.a27e	0a		asl a				asl 	a
.a27f	88		dey				dey
.a280	d0 fc		bne $a27e			bne 	_FFFPPLeft
.a282	7a		ply				ply
.a283					_FFFPPRight:
.a283	4a		lsr a				lsr 	a
.a284	88		dey				dey
.a285	d0 fc		bne $a283			bne 	_FFFPPRight
.a287	80 07		bra $a290			bra 	_FFFPPExit
.a289					_FFFPPWholeByte:
.a289	98		tya				tya 								; subtract 8 from count
.a28a	38		sec				sec
.a28b	e9 08		sbc #$08			sbc 	#8
.a28d	a8		tay				tay
.a28e	a9 00		lda #$00			lda 	#0 							; and clear all
.a290					_FFFPPExit:
.a290	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/integer.asm

.a291					FloatIntegerPart:
.a291	48		pha				pha
.a292	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; is it integer already ?
.a295	f0 1f		beq $a2b6			beq 	_FIPExit 					; if so do nothing
.a297	20 52 98	jsr $9852			jsr 	NSMIsZero 					; is it zero ?
.a29a	f0 17		beq $a2b3			beq 	_FIPZero 					; if so return zero.
.a29c	20 f2 a2	jsr $a2f2			jsr 	NSNormalise 				; normalise
.a29f	f0 12		beq $a2b3			beq 	_FIPZero 					; normalised to zero, exit zero
.a2a1					_FIPShift:
.a2a1	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.a2a4	10 08		bpl $a2ae			bpl 	_FIPCheckZero
.a2a6	20 45 98	jsr $9845			jsr 	NSMShiftRight 				; shift mantissa right
.a2a9	fe 28 06	inc $0628,x			inc 	NSExponent,x 				; bump exponent
.a2ac	80 f3		bra $a2a1			bra 	_FIPShift
.a2ae					_FIPCheckZero:
.a2ae	20 52 98	jsr $9852			jsr 	NSMIsZero 					; avoid -0 problem
.a2b1	d0 03		bne $a2b6			bne 	_FIPExit 					; set to zero if mantissa zero.
.a2b3					_FIPZero:
.a2b3	20 22 98	jsr $9822			jsr 	NSMSetZero
.a2b6					_FIPExit:
.a2b6	68		pla				pla
.a2b7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/multiply.asm

.a2b8					FloatingPointMultiply:
.a2b8	20 e1 a2	jsr $a2e1			jsr 	FloatPrepare 				; prepare for floats
.a2bb					FloatMultiply:
.a2bb	48		pha				pha
.a2bc	20 f2 a2	jsr $a2f2			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.a2bf	f0 1b		beq $a2dc			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.a2c1	e8		inx				inx
.a2c2	20 f2 a2	jsr $a2f2			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.a2c5	ca		dex				dex
.a2c6	c9 00		cmp #$00			cmp 	#0
.a2c8	f0 0f		beq $a2d9			beq 	_FDSetZero
.a2ca	20 92 a0	jsr $a092			jsr 	MultiplyShort 				; calculate the result.
.a2cd	7d 28 06	adc $0628,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.a2d0	18		clc				clc
.a2d1	7d 29 06	adc $0629,x			adc 	NSExponent+1,x
.a2d4	9d 28 06	sta $0628,x			sta 	NSExponent,x
.a2d7	80 03		bra $a2dc			bra 	_FDExit
.a2d9					_FDSetZero:
.a2d9	20 22 98	jsr $9822			jsr 	NSMSetZero 					; return 0
.a2dc					_FDExit:
.a2dc	20 f2 a2	jsr $a2f2			jsr 	NSNormalise 				; normalise the result
.a2df	68		pla				pla
.a2e0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/utility.asm

.a2e1					FloatPrepare:
.a2e1	20 e8 91	jsr $91e8			jsr 	DereferenceTopTwo 			; dereference the top two values
.a2e4	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check ints/floats
.a2e7	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.a2ea	29 10		and #$10			and 	#NSBIsString
.a2ec	d0 01		bne $a2ef			bne 	_FDType
.a2ee	60		rts				rts
.a2ef					_FDType:
.a2ef	4c 75 a5	jmp $a575			jmp 	TypeError
.a2f2					NSNormalise:
.a2f2	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; make float, keep sign
.a2f5	29 80		and #$80			and 	#$80
.a2f7	09 08		ora #$08			ora 	#NSTFloat
.a2f9	9d 00 06	sta $0600,x			sta 	NSStatus,x
.a2fc	20 52 98	jsr $9852			jsr 	NSMIsZero 					; if zero exit
.a2ff	d0 09		bne $a30a			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.a301	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; clear the sign bit.
.a304	7e 00 06	ror $0600,x			ror 	NSStatus,x 					; (no -0)
.a307	a9 00		lda #$00			lda 	#0 							; set Z flag
.a309	60		rts				rts
.a30a					_NSNormaliseOptimise:
.a30a	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; upper byte zero ?
.a30d	d0 22		bne $a331			bne 	_NSNormaliseLoop
.a30f	bd 18 06	lda $0618,x			lda 	NSMantissa2,x 				; byte normalise
.a312	30 1d		bmi $a331			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.a314	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.a317	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.a31a	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.a31d	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.a320	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.a323	9e 08 06	stz $0608,x			stz 	NSMantissa0,x
.a326	bd 28 06	lda $0628,x			lda 	NSExponent,x
.a329	38		sec				sec
.a32a	e9 08		sbc #$08			sbc 	#8
.a32c	9d 28 06	sta $0628,x			sta 	NSExponent,x
.a32f	80 d9		bra $a30a			bra 	_NSNormaliseOptimise
.a331					_NSNormaliseLoop:
.a331	3c 20 06	bit $0620,x			bit 	NSMantissa3,x 				; bit 30 set ?
.a334	70 08		bvs $a33e			bvs 	_NSNExit 					; exit if so with Z flag clear
.a336	20 37 98	jsr $9837			jsr 	NSMShiftLeft 				; shift mantissa left
.a339	de 28 06	dec $0628,x			dec 	NSExponent,x 				; adjust exponent
.a33c	80 f3		bra $a331			bra 	_NSNormaliseLoop
.a33e					_NSNExit:
.a33e	a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.a340	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignnumber.asm

.9115					AssignNumber:
.9115	5a		phy				phy
.9116	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy mantissa0/1 to zTemp0
.9119	85 36		sta $36				sta 	zTemp0
.911b	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.911e	85 37		sta $37				sta 	zTemp0+1
.9120	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; clear reference bits
.9123	29 df		and #$df			and 	#(NSBIsReference ^ $FF)
.9125	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9128	29 18		and #$18			and 	#NSBTypeMask				; assigning to a float ?
.912a	c9 08		cmp #$08			cmp 	#NSTFloat
.912c	f0 2a		beq $9158			beq 	_ANFloat
.912e	bd 29 06	lda $0629,x			lda		NSExponent+1,x 				; is it a float
.9131	f0 05		beq $9138			beq		_ANNotFloat
.9133	e8		inx				inx
.9134	20 91 a2	jsr $a291			jsr 	FloatIntegerPart 			; make it an integer
.9137	ca		dex				dex
.9138					_ANNotFloat:
.9138	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if byte/word reference.
.913b	29 03		and #$03			and 	#3
.913d	d0 05		bne $9144			bne 	_ANByteWord
.913f	20 64 91	jsr $9164			jsr 	_ANCopy4PackSign 			; copy all 4 bytes and sign
.9142	80 1e		bra $9162			bra 	_ANExit
.9144					_ANByteWord:
.9144	48		pha				pha 								; save count
.9145	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; do byte
.9148	92 36		sta ($36)			sta 	(zTemp0)
.914a	68		pla				pla
.914b	c9 01		cmp #$01			cmp	 	#1
.914d	f0 13		beq $9162			beq 	_ANExit
.914f	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x 			; do word
.9152	a0 01		ldy #$01			ldy 	#1
.9154	91 36		sta ($36),y			sta 	(zTemp0),y
.9156	80 0a		bra $9162			bra 	_ANExit
.9158					_ANFloat:
.9158	20 64 91	jsr $9164			jsr 	_ANCopy4PackSign 			; write all 4 bytes and packed sign
.915b	bd 29 06	lda $0629,x			lda 	NSExponent+1,x 				; copy exponent to slot 4
.915e	a0 04		ldy #$04			ldy 	#4
.9160	91 36		sta ($36),y			sta 	(zTemp0),y
.9162					_ANExit:
.9162	7a		ply				ply
.9163	60		rts				rts
.9164					_ANCopy4PackSign:
.9164	a0 03		ldy #$03			ldy 	#3
.9166	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; sign bit into status
.9169	29 80		and #$80			and 	#$80 						; put into high bit of mantissa 3
.916b	1d 21 06	ora $0621,x			ora 	NSMantissa3+1,x
.916e	91 36		sta ($36),y			sta 	(zTemp0),y
.9170	88		dey				dey
.9171	bd 19 06	lda $0619,x			lda 	NSMantissa2+1,x
.9174	91 36		sta ($36),y			sta 	(zTemp0),y
.9176	88		dey				dey
.9177	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.917a	91 36		sta ($36),y			sta 	(zTemp0),y
.917c	88		dey				dey
.917d	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.9180	91 36		sta ($36),y			sta 	(zTemp0),y
.9182	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignstring.asm

.9183					AssignString:
.9183	5a		phy				phy
.9184	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.9187	85 38		sta $38				sta 	zTemp1
.9189	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.918c	85 39		sta $39				sta 	zTemp1+1
.918e	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.9191	85 36		sta $36				sta 	zTemp0
.9193	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.9196	85 37		sta $37				sta 	zTemp0+1
.9198	a0 01		ldy #$01			ldy 	#1 							; the high byte of the target address
.919a	b1 36		lda ($36),y			lda 	(zTemp0),y
.919c	f0 23		beq $91c1			beq 	_ASNewStringRequired 		; if zero, a new string is required.
.919e	38		sec				sec 								; put Address-2 in zsTemp - this is the size/status/string record
.919f	b2 36		lda ($36)			lda 	(zTemp0) 					; of concreted strings
.91a1	e9 02		sbc #$02			sbc 	#2
.91a3	85 3c		sta $3c				sta 	zsTemp
.91a5	a0 01		ldy #$01			ldy 	#1
.91a7	b1 36		lda ($36),y			lda 	(zTemp0),y
.91a9	e9 00		sbc #$00			sbc 	#0
.91ab	85 3d		sta $3d				sta 	zsTemp+1
.91ad	a0 ff		ldy #$ff			ldy 	#$FF 						; get length of new string
.91af					_ASGetLength:
.91af	c8		iny				iny
.91b0	b1 38		lda ($38),y			lda 	(zTemp1),y
.91b2	d0 fb		bne $91af			bne 	_ASGetLength
.91b4	98		tya				tya 								; is this length <= current length
.91b5	d2 3c		cmp ($3c)			cmp 	(zsTemp)
.91b7	90 20		bcc $91d9			bcc 	_ASCopyString
.91b9	f0 1e		beq $91d9			beq 	_ASCopyString
.91bb	a9 80		lda #$80			lda 	#$80 						; mark as unused.
.91bd	a0 01		ldy #$01			ldy 	#1
.91bf	91 3c		sta ($3c),y			sta 	(zsTemp),y
.91c1					_ASNewStringRequired:
.91c1	e8		inx				inx 								; concrete the new string.
.91c2	20 10 a7	jsr $a710			jsr 	StringConcrete				; (breaks zTemp1/2, not zTemp0 and zsTemp)
.91c5	ca		dex				dex
.91c6	18		clc				clc
.91c7	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; copy that new address to the reference.
.91ca	69 02		adc #$02			adc 	#2 							; add two to point at the data.
.91cc	92 36		sta ($36)			sta 	(zTemp0)
.91ce	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.91d1	69 00		adc #$00			adc 	#0
.91d3	a0 01		ldy #$01			ldy 	#1
.91d5	91 36		sta ($36),y			sta 	(zTemp0),y
.91d7	80 0d		bra $91e6			bra 	_ASExit
.91d9					_ASCopyString:
.91d9	a0 00		ldy #$00			ldy 	#0
.91db					_ASCopyLoop:
.91db	b1 38		lda ($38),y			lda 	(zTemp1),y
.91dd	c8		iny				iny
.91de	c8		iny				iny
.91df	91 3c		sta ($3c),y			sta 	(zsTemp),y
.91e1	88		dey				dey
.91e2	c9 00		cmp #$00			cmp 	#0
.91e4	d0 f5		bne $91db			bne 	_ASCopyLoop
.91e6					_ASExit:
.91e6	7a		ply				ply
.91e7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/dereference.asm

.91e8					DereferenceTopTwo:
.91e8	e8		inx				inx
.91e9	20 ed 91	jsr $91ed			jsr 	Dereference 				; deref x+1
.91ec	ca		dex				dex  								; falls through to deref x
.91ed					Dereference:
.91ed	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get the status byte
.91f0	29 20		and #$20			and 	#NSBIsReference 			; shift sign bit to carry, reference to bit 7
.91f2	f0 57		beq $924b			beq 	_DRFExit 					; not a reference
.91f4	5a		phy				phy
.91f5	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy address to dereference into zTemp0
.91f8	85 36		sta $36				sta 	zTemp0
.91fa	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.91fd	85 37		sta $37				sta 	zTemp0+1
.91ff	9e 10 06	stz $0610,x			stz 	NSMantissa1,x 				; clear second byte.
.9202	b2 36		lda ($36)			lda 	(zTemp0) 					; do the first byte
.9204	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.9207	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get status byte.
.920a	29 18		and #$18			and 	#NSBTypeMask 				; what type is it ?
.920c	c9 10		cmp #$10			cmp 	#NSTString 					; if string, dereference two
.920e	f0 0f		beq $921f			beq 	_DRFDereferenceTwo
.9210	c9 08		cmp #$08			cmp 	#NSTFloat 					; if float, do full dereference.
.9212	f0 39		beq $924d			beq 	_DRFFull
.9214	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be integer - how many bytes ?
.9217	29 03		and #$03			and 	#3
.9219	f0 32		beq $924d			beq 	_DRFFull 					; the whole word
.921b	c9 01		cmp #$01			cmp 	#1 							; is it 10 (e.g. 2 bytes)
.921d	f0 07		beq $9226			beq		_DRFClear23 				; no, one byte, clear 2 & 3 and exit
.921f					_DRFDereferenceTwo:
.921f	a0 01		ldy #$01			ldy 	#1
.9221	b1 36		lda ($36),y			lda 	(zTemp0),y
.9223	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9226					_DRFClear23:
.9226	9e 18 06	stz $0618,x			stz 	NSMantissa2,x 				; clear upper bytes, only read 1 or 2 bytes
.9229	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.922c	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; make it a value of that type.
.922f	29 18		and #$18			and 	#NSBTypeMask
.9231	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9234	c9 10		cmp #$10			cmp 	#NSTString  				; is it a string
.9236	d0 12		bne $924a			bne 	_DRFNotString
.9238	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; check address is zero
.923b	1d 10 06	ora $0610,x			ora 	NSMantissa1,x
.923e	d0 0a		bne $924a			bne 	_DRFNotString
.9240	a9 4c		lda #$4c			lda 	#_DRFNullString & $FF 		; if so, return reference to ""
.9242	9d 08 06	sta $0608,x			sta 	NSMantissa0,X
.9245	a9 92		lda #$92			lda 	#_DRFNullString >> 8
.9247	9d 10 06	sta $0610,x			sta 	NSMantissa1,X
.924a					_DRFNotString
.924a	7a		ply				ply 								; restore Y and exit
.924b					_DRFExit:
.924b	60		rts				rts
.924c					_DRFNullString:
>924c	00						.byte 	0
.924d					_DRFFull:
.924d	a0 01		ldy #$01			ldy 	#1 							; get remaining 3 bytes.
.924f	b1 36		lda ($36),y			lda 	(zTemp0),y
.9251	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9254	c8		iny				iny
.9255	b1 36		lda ($36),y			lda 	(zTemp0),y
.9257	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.925a	c8		iny				iny
.925b	b1 36		lda ($36),y			lda 	(zTemp0),y
.925d	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.9260	9e 28 06	stz $0628,x			stz 	NSExponent,x 				; clear exponent.
.9263	bd 00 06	lda $0600,x			lda		NSStatus,x 					; see if type is integer
.9266	29 18		and #$18			and 	#NSBTypeMask  				; type information only
.9268	9d 00 06	sta $0600,x			sta 	NSStatus,x 					; update it back.
.926b	f0 06		beq $9273			beq 	_DRFNoExponent
.926d	c8		iny				iny 								; if not, read the exponent as well.
.926e	b1 36		lda ($36),y			lda 	(zTemp0),y
.9270	9d 28 06	sta $0628,x			sta 	NSExponent,x
.9273					_DRFNoExponent:
.9273	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; is the most significant bit set ?
.9276	10 0d		bpl $9285			bpl 	_DRFExit2 					; if not, then exit.
.9278	29 7f		and #$7f			and 	#$7F 						; clear that bit.
.927a	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.927d	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; set the sign flag
.9280	09 80		ora #$80			ora 	#NSBIsNegative
.9282	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9285					_DRFExit2:
.9285	7a		ply				ply
.9286	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/number.asm

=1					ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2					ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3					ESTA_Decimal = 3 							; fractional part.
.9287					EncodeNumberStart:
.9287	38		sec				sec
.9288	80 01		bra $928b			bra 	EncodeNumberContinue+1
.928a					EncodeNumberContinue:
.928a	18		clc				clc
.928b					EncodeNumber:
.928b	08		php				php 								; save reset.
.928c	c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.928e	f0 12		beq $92a2			beq 	_ENIsOkay
.9290	c9 30		cmp #$30			cmp 	#"0"
.9292	90 04		bcc $9298			bcc 	_ENBadNumber
.9294	c9 3a		cmp #$3a			cmp 	#"9"+1
.9296	90 0a		bcc $92a2			bcc 	_ENIsOkay
.9298					_ENBadNumber:
.9298	28		plp				plp 								; throw saved reset
.9299	ad 05 07	lda $0705			lda 	EncodeState 				; decimal mode, construct final number
.929c	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.929e	f0 7e		beq $931e			beq 	_ENConstructFinal
.92a0					_ENFail:
.92a0	18		clc				clc 								; not allowed
.92a1	60		rts				rts
.92a2					_ENIsOkay:
.92a2	28		plp				plp 								; are we restarting
.92a3	90 15		bcc $92ba			bcc 	_ENNoRestart
.92a5					_ENStartEncode:
.92a5	c9 2e		cmp #$2e			cmp 	#'.'						; first is DP
.92a7	f0 0c		beq $92b5			beq 	_ENFirstDP
.92a9	29 0f		and #$0f			and 	#15 						; put digit in mantissa
.92ab	20 24 98	jsr $9824			jsr 	NSMSetByte
.92ae	a9 01		lda #$01			lda 	#ESTA_Low
.92b0					_ENExitChange:
.92b0	8d 05 07	sta $0705			sta 	EncodeState 				; save new state
.92b3	38		sec				sec
.92b4	60		rts				rts
.92b5					_ENFirstDP:
.92b5	20 22 98	jsr $9822			jsr 	NSMSetZero 					; clear integer part
.92b8	80 3f		bra $92f9			bra 	_ESTASwitchFloat			; go straight to float and exi
.92ba					_ENNoRestart:
.92ba	48		pha				pha 								; save on stack.
.92bb	ad 05 07	lda $0705			lda 	EncodeState 				; get current state
.92be	c9 01		cmp #$01			cmp 	#ESTA_Low
.92c0	f0 09		beq $92cb			beq  	_ESTALowState
.92c2	c9 02		cmp #$02			cmp 	#ESTA_High
.92c4	f0 29		beq $92ef			beq 	_ESTAHighState
.92c6	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.92c8	f0 3b		beq $9305			beq 	_ESTADecimalState
>92ca	db						.byte 	$DB 						; causes a break in the emulator
.92cb					_ESTALowState:
.92cb	68		pla				pla 								; get value back
.92cc	c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.92ce	f0 29		beq $92f9			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.92d0	29 0f		and #$0f			and 	#15 						; make digit
.92d2	8d 06 07	sta $0706			sta 	DigitTemp 					; save it.
.92d5	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.92d8	0a		asl a				asl 	a
.92d9	0a		asl a				asl 	a
.92da	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.92dd	0a		asl a				asl 	a
.92de	6d 06 07	adc $0706			adc 	DigitTemp
.92e1	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.92e4	c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.92e6	90 05		bcc $92ed			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.92e8	a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.92ea	8d 05 07	sta $0705			sta 	EncodeState
.92ed					_ESTANoSwitch:
.92ed	38		sec				sec
.92ee	60		rts				rts
.92ef					_ESTAHighState:
.92ef	68		pla				pla 								; get value back
.92f0	c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.92f2	f0 05		beq $92f9			beq 	_ESTASwitchFloat
.92f4	20 58 93	jsr $9358			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.92f7	38		sec				sec
.92f8	60		rts				rts
.92f9					_ESTASwitchFloat:
.92f9	9c 07 07	stz $0707			stz 	DecimalCount
.92fc	e8		inx				inx 								; zero the decimal additive.
.92fd	20 22 98	jsr $9822			jsr 	NSMSetZero
.9300	ca		dex				dex
.9301	a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.9303	80 ab		bra $92b0			bra 	_ENExitChange
.9305					_ESTADecimalState:
.9305	68		pla				pla 								; digit.
.9306	c9 2e		cmp #$2e			cmp 	#"." 						; fail on 2nd decimal point.
.9308	f0 96		beq $92a0			beq 	_ENFail
.930a	e8		inx				inx 								; put digit into fractional part of X+1
.930b	20 58 93	jsr $9358			jsr 	ESTAShiftDigitIntoMantissa
.930e	ca		dex				dex
.930f	ee 07 07	inc $0707			inc 	DecimalCount 				; bump the count of decimals
.9312	ad 07 07	lda $0707			lda 	DecimalCount
.9315	c9 0b		cmp #$0b			cmp 	#11
.9317	f0 02		beq $931b			beq 	_ESTADSFail
.9319	38		sec				sec
.931a	60		rts				rts
.931b					_ESTADSFail:
.931b	4c 70 a5	jmp $a570			jmp 	RangeError
.931e					_ENConstructFinal:
.931e	ad 07 07	lda $0707			lda 	DecimalCount 				; get decimal count
.9321	f0 33		beq $9356			beq 	_ENCFExit 					; no decimals
.9323	5a		phy				phy
.9324	0a		asl a				asl 	a 							; x 4 and CLC
.9325	0a		asl a				asl 	a
.9326	6d 07 07	adc $0707			adc 	DecimalCount
.9329	a8		tay				tay
.932a	b9 2f a5	lda $a52f,y			lda 	DecimalScalarTable-5,y 		; copy decimal scalar to X+2
.932d	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.9330	b9 30 a5	lda $a530,y			lda 	DecimalScalarTable-5+1,y
.9333	9d 12 06	sta $0612,x			sta 	NSMantissa1+2,x
.9336	b9 31 a5	lda $a531,y			lda 	DecimalScalarTable-5+2,y
.9339	9d 1a 06	sta $061a,x			sta 	NSMantissa2+2,x
.933c	b9 32 a5	lda $a532,y			lda 	DecimalScalarTable-5+3,y
.933f	9d 22 06	sta $0622,x			sta 	NSMantissa3+2,x
.9342	b9 33 a5	lda $a533,y			lda 	DecimalScalarTable-5+4,y
.9345	9d 2a 06	sta $062a,x			sta 	NSExponent+2,x
.9348	a9 08		lda #$08			lda 	#NSTFloat
.934a	9d 02 06	sta $0602,x			sta 	NSStatus+2,x
.934d	7a		ply				ply
.934e	e8		inx				inx 								; multiply decimal const by decimal scalar
.934f	20 bb a2	jsr $a2bb			jsr 	FloatMultiply
.9352	ca		dex				dex
.9353	20 50 a1	jsr $a150			jsr 	FloatAdd 					; add to integer part.
.9356					_ENCFExit:
.9356	18		clc				clc 								; reject the digit.
.9357	60		rts				rts
.9358					ESTAShiftDigitIntoMantissa:
.9358	29 0f		and #$0f			and 	#15 						; save digit
.935a	48		pha				pha
.935b	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; push mantissa on stack
.935e	48		pha				pha
.935f	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.9362	48		pha				pha
.9363	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.9366	48		pha				pha
.9367	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.936a	48		pha				pha
.936b	20 37 98	jsr $9837			jsr 	NSMShiftLeft 				; x 2
.936e	20 37 98	jsr $9837			jsr 	NSMShiftLeft 				; x 4
.9371	18		clc				clc 								; pop mantissa and add
.9372	68		pla				pla
.9373	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.9376	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.9379	68		pla				pla
.937a	7d 10 06	adc $0610,x			adc 	NSMantissa1,x
.937d	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9380	68		pla				pla
.9381	7d 18 06	adc $0618,x			adc 	NSMantissa2,x
.9384	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.9387	68		pla				pla
.9388	7d 20 06	adc $0620,x			adc 	NSMantissa3,x
.938b	9d 20 06	sta $0620,x			sta 	NSMantissa3,x 				; x 5
.938e	20 37 98	jsr $9837			jsr 	NSMShiftLeft 				; x 10
.9391	68		pla				pla 								; add digit
.9392	18		clc				clc
.9393	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.9396	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.9399	90 0d		bcc $93a8			bcc 	_ESTASDExit
.939b	fe 10 06	inc $0610,x			inc 	NSMantissa1,x
.939e	d0 08		bne $93a8			bne 	_ESTASDExit
.93a0	fe 18 06	inc $0618,x			inc 	NSMantissa2,x
.93a3	d0 03		bne $93a8			bne 	_ESTASDExit
.93a5	fe 20 06	inc $0620,x			inc 	NSMantissa3,x
.93a8					_ESTASDExit:
.93a8	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/term.asm

.93a9					EvaluateTerm:
.93a9	b1 30		lda ($30),y			lda 	(codePtr),y
.93ab	30 18		bmi $93c5			bmi 	_ETCheckUnary 				; unary function ? (text ones)
.93ad	c9 40		cmp #$40			cmp 	#$40 						; 40-7F => identifier reference
.93af	b0 6f		bcs $9420			bcs 	_ETVariable
.93b1	c9 30		cmp #$30			cmp 	#'0' 						; is it a number
.93b3	90 6e		bcc $9423			bcc 	_ETPuncUnary 				; if not it might be a punctuation unary.
.93b5	c9 3a		cmp #$3a			cmp 	#'9'+1
.93b7	b0 6a		bcs $9423			bcs 	_ETPuncUnary
.93b9	20 87 92	jsr $9287			jsr 	EncodeNumberStart 			; can't fail as it's 0-9 !
.93bc					_ETNumber:
.93bc	c8		iny				iny 								; keep encoding until we have the numbers
.93bd	b1 30		lda ($30),y			lda 	(codePtr),y
.93bf	20 8a 92	jsr $928a			jsr 	EncodeNumberContinue
.93c2	b0 f8		bcs $93bc			bcs 	_ETNumber 					; go back if accepted.
.93c4	60		rts				rts
.93c5					_ETCheckUnary:
.93c5	c9 ff		cmp #$ff			cmp 	#KWC_STRING 				; string token
.93c7	f0 41		beq $940a			beq 	_ETString
.93c9	c9 fe		cmp #$fe			cmp 	#KWC_HEXCONST 				; hex constant.
.93cb	f0 12		beq $93df			beq 	_ETHexConstant
.93cd	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; check it actually is a unary function
.93cf	90 0b		bcc $93dc			bcc 	_ETSyntaxError
.93d1	c9 96		cmp #$96			cmp 	#KWC_LAST_UNARY+1
.93d3	b0 07		bcs $93dc			bcs 	_ETSyntaxError
.93d5	da		phx				phx 								; push X on the stack
.93d6	0a		asl a				asl 	a 							; put vector x 2 into X
.93d7	aa		tax				tax
.93d8	c8		iny				iny 								; consume unary function token
.93d9	7c fc 80	jmp ($80fc,x)			jmp 	(VectorSet0,x) 				; and do it.
.93dc					_ETSyntaxError:
.93dc	4c 6b a5	jmp $a56b			jmp 	SyntaxError
.93df					_ETHexConstant:
.93df	c8		iny				iny 								; skip #
.93e0	c8		iny				iny 								; skip count
.93e1	20 22 98	jsr $9822			jsr 	NSMSetZero 					; clear result
.93e4					_ETHLoop:
.93e4	b1 30		lda ($30),y			lda 	(codePtr),y
.93e6	c8		iny				iny 								; and consume
.93e7	c9 00		cmp #$00			cmp 	#0 							; exit if zero
.93e9	f0 1e		beq $9409			beq 	_ETHExit
.93eb	48		pha				pha 								; save on stack.
.93ec	20 37 98	jsr $9837			jsr 	NSMShiftLeft 				; x 2
.93ef	20 37 98	jsr $9837			jsr 	NSMShiftLeft 				; x 4
.93f2	20 37 98	jsr $9837			jsr 	NSMShiftLeft 				; x 8
.93f5	20 37 98	jsr $9837			jsr 	NSMShiftLeft 				; x 16
.93f8	68		pla				pla 								; ASCII
.93f9	c9 41		cmp #$41			cmp 	#'A'
.93fb	90 02		bcc $93ff			bcc 	_ETHNotChar
.93fd	e9 07		sbc #$07			sbc 	#7
.93ff					_ETHNotChar:
.93ff	29 0f		and #$0f			and 	#15 						; digit now
.9401	1d 08 06	ora $0608,x			ora 	NSMantissa0,x 				; put in LS Nibble
.9404	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.9407	80 db		bra $93e4			bra 	_ETHLoop 					; go round.
.9409					_ETHExit:
.9409	60		rts				rts
.940a					_ETString:
.940a	c8		iny				iny 								; look at length
.940b	b1 30		lda ($30),y			lda 	(codePtr),y
.940d	48		pha				pha
.940e	c8		iny				iny 								; first character
.940f	20 b8 9e	jsr $9eb8			jsr 	MemoryInline 				; put address of string at (code-Ptr),y on stack
.9412	68		pla				pla 								; restore count and save
.9413	85 36		sta $36				sta 	zTemp0
.9415	98		tya				tya 								; add length to Y to skip it.
.9416	18		clc				clc
.9417	65 36		adc $36				adc 	zTemp0
.9419	a8		tay				tay
.941a	a9 10		lda #$10			lda 	#NSTString 					; mark as string
.941c	9d 00 06	sta $0600,x			sta 	NSStatus,x
.941f	60		rts				rts
.9420					_ETVariable:
.9420	4c 7a 94	jmp $947a			jmp 	VariableHandler
.9423					_ETPuncUnary:
.9423	c8		iny				iny 								; consume the unary character
.9424	c9 2d		cmp #$2d			cmp 	#KWD_MINUS 					; unary minus
.9426	f0 2d		beq $9455			beq 	_ETUnaryNegate
.9428	c9 10		cmp #$10			cmp 	#KWD_AT 					; @ reference -> constant
.942a	f0 39		beq $9465			beq 	_ETDereference
.942c	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; parenthesis
.942e	f0 43		beq $9473			beq 	_ETParenthesis
.9430	64 36		stz $36				stz 	zTemp0 						; zTemp0 is the indirection level.
.9432	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; byte indirection (0) ?
.9434	f0 06		beq $943c			beq 	_ETIndirection
.9436	e6 36		inc $36				inc 	zTemp0
.9438	c9 21		cmp #$21			cmp 	#KWD_PLING					; word indirection (1) \
.943a	d0 a0		bne $93dc			bne 	_ETSyntaxError
.943c					_ETIndirection:
.943c	a5 36		lda $36				lda 	zTemp0 						; push indirection amount (0-1) => (1-2) on the stack
.943e	1a		inc a				inc 	a
.943f	48		pha				pha
.9440	20 a9 93	jsr $93a9			jsr 	EvaluateTerm				; evaluate the term
.9443	20 ed 91	jsr $91ed			jsr 	Dereference 				; dereference it.
.9446	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a +ve integer.
.9449	d0 07		bne $9452			bne 	_ETTypeMismatch
.944b	68		pla				pla 								; indirection 1-2
.944c	09 20		ora #$20			ora 	#NSBIsReference 			; make it a reference.
.944e	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9451	60		rts				rts
.9452					_ETTypeMismatch:
.9452	4c 75 a5	jmp $a575			jmp 	TypeError
.9455					_ETUnaryNegate:
.9455	20 a9 93	jsr $93a9			jsr 	EvaluateTerm				; evaluate the term
.9458	20 ed 91	jsr $91ed			jsr 	Dereference 				; dereference it.
.945b	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a number
.945e	29 10		and #$10			and 	#NSTString
.9460	d0 f0		bne $9452			bne 	_ETTypeMismatch
.9462	4c ce 97	jmp $97ce			jmp 	NSMNegate  					; just toggles the sign bit.
.9465					_ETDereference:
.9465	20 a9 93	jsr $93a9			jsr 	EvaluateTerm				; evaluate the term
.9468	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a reference
.946b	29 20		and #$20			and 	#NSBIsReference
.946d	f0 e3		beq $9452			beq 	_ETTypeMismatch
.946f	9e 00 06	stz $0600,x			stz 	NSStatus,x 					; make it an integer address
.9472	60		rts				rts
.9473					_ETParenthesis:
.9473	20 d8 90	jsr $90d8			jsr 	EvaluateExpression 			; evaluate here, from lowest precedence
.9476	20 89 9f	jsr $9f89			jsr 	CheckRightBracket 			; check for )
.9479	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/variable.asm

.947a					VariableHandler:
.947a	b1 30		lda ($30),y			lda 	(codePtr),y
.947c	18		clc				clc
.947d	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.947f	85 37		sta $37				sta 	zTemp0+1
.9481	c8		iny				iny
.9482	b1 30		lda ($30),y			lda 	(codePtr),y
.9484	85 36		sta $36				sta 	zTemp0
.9486	c8		iny				iny
.9487	18		clc				clc									; copy variable address+3 to mantissa
.9488	69 03		adc #$03			adc 	#3
.948a	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.948d	a5 37		lda $37				lda 	zTemp0+1
.948f	69 00		adc #$00			adc 	#0
.9491	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9494	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.9497	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.949a	9e 28 06	stz $0628,x			stz 	NSExponent,x
.949d	5a		phy				phy
.949e	a0 02		ldy #$02			ldy 	#2 							; read type
.94a0	b1 36		lda ($36),y			lda 	(zTemp0),y
.94a2	7a		ply				ply
.94a3	29 1c		and #$1c			and 	#NSBTypeMask+NSBIsArray 	; get type information
.94a5	09 20		ora #$20			ora 	#NSBIsReference 			; make a reference.
.94a7	9d 00 06	sta $0600,x			sta 	NSStatus,x
.94aa	29 04		and #$04			and 	#NSBIsArray
.94ac	d0 01		bne $94af			bne 	_VHArray
.94ae	60		rts				rts
.94af					_VHArray:
.94af	e8		inx				inx
.94b0	20 ba 97	jsr $97ba			jsr 	Evaluate8BitInteger 		; get the 1st index.
.94b3	a9 ff		lda #$ff			lda 	#$FF 						; set Status of X+2 to a duff value so we know if we picked it up.
.94b5	9d 01 06	sta $0601,x			sta 	NSStatus+1,x
.94b8	b1 30		lda ($30),y			lda 	(codePtr),y
.94ba	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.94bc	d0 06		bne $94c4			bne 	_VHNoSecondIndex
.94be	c8		iny				iny 								; skip the comma
.94bf	e8		inx				inx
.94c0	20 ba 97	jsr $97ba			jsr 	Evaluate8BitInteger 		; get the 2nd index.
.94c3	ca		dex				dex
.94c4					_VHNoSecondIndex:
.94c4	ca		dex				dex 								; set X back.
.94c5	20 89 9f	jsr $9f89			jsr 	CheckRightBracket 			; and check the right bracket.
.94c8	5a		phy				phy 								; save position
.94c9	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy record address to zaTemp
.94cc	85 3e		sta $3e				sta 	zaTemp
.94ce	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.94d1	85 3f		sta $3f				sta 	zaTemp+1
.94d3	a0 03		ldy #$03			ldy 	#3 							; get the second index - which is 0 if there is one index.
.94d5	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.94d7	f0 02		beq $94db			beq 	_VHHas2Mask
.94d9	a9 ff		lda #$ff			lda 	#$FF
.94db					_VHHas2Mask:
.94db	dd 02 06	cmp $0602,x			cmp 	NSStatus+2,x 				; so if they are the same there are the wrong number of indices
.94de	f0 54		beq $9534			beq 	_VHBadIndex
.94e0	0a		asl a				asl 	a 							; carry will be set if a second index
.94e1	90 09		bcc $94ec			bcc 	_VHCheckFirstIndex
.94e3	a0 03		ldy #$03			ldy 	#3 			 				; check the 2nd size >= 2nd index
.94e5	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.94e7	dd 0a 06	cmp $060a,x			cmp 	NSMantissa0+2,x
.94ea	90 48		bcc $9534			bcc 	_VHBadIndex
.94ec					_VHCheckFirstIndex:
.94ec	a0 02		ldy #$02			ldy 	#2 			 				; check the 2nd size >= 2nd index
.94ee	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.94f0	dd 09 06	cmp $0609,x			cmp 	NSMantissa0+1,x
.94f3	90 3f		bcc $9534			bcc 	_VHBadIndex
.94f5	64 36		stz $36				stz 	zTemp0 						; clear zTemp0 (if 1 index)
.94f7	64 37		stz $37				stz 	zTemp0+1
.94f9	bd 02 06	lda $0602,x			lda 	NSStatus+2,x 				; if only one index provided, don't need to multiply
.94fc	30 0f		bmi $950d			bmi 	_VHNoMultiply
.94fe	da		phx				phx
.94ff	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; get 2nd index on stack
.9502	48		pha				pha
.9503	a0 02		ldy #$02			ldy 	#2 							; get 1st size in A
.9505	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9507	1a		inc a				inc 	a 							; add 1 for zero base
.9508	fa		plx				plx
.9509	20 0b a4	jsr $a40b			jsr 	Multiply8x8 				; calculate -> Z0
.950c	fa		plx				plx
.950d					_VHNoMultiply:
.950d	18		clc				clc
.950e	a5 36		lda $36				lda 	zTemp0
.9510	7d 09 06	adc $0609,x			adc 	NSMantissa0+1,x
.9513	85 36		sta $36				sta 	zTemp0
.9515	a5 37		lda $37				lda 	zTemp0+1
.9517	69 00		adc #$00			adc 	#0
.9519	85 37		sta $37				sta 	zTemp0+1
.951b	bd 00 06	lda $0600,x			lda 	NSStatus,x
.951e	20 cc 85	jsr $85cc			jsr 	ScaleByBaseType
.9521	18		clc				clc
.9522	b2 3e		lda ($3e)			lda 	(zaTemp)
.9524	65 36		adc $36				adc 	zTemp0
.9526	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.9529	a0 01		ldy #$01			ldy 	#1
.952b	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.952d	65 37		adc $37				adc 	zTemp0+1
.952f	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9532	7a		ply				ply 								; restore position
.9533	60		rts				rts
.9534					_VHBadIndex:
.9534	a9 17		lda #$17		lda	#23
.9536	4c cf 8c	jmp $8ccf		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/abs.asm

.a341					AbsUnary:
.a341	fa		plx				plx 								; restore stack pos
.a342	20 76 97	jsr $9776			jsr 	EvaluateNumber 				; get a float or int
.a345	20 89 9f	jsr $9f89			jsr 	CheckRightBracket
.a348	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; clear the sign bit
.a34b	29 7f		and #$7f			and 	#$7F
.a34d	9d 00 06	sta $0600,x			sta 	NSStatus,x
.a350	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/alloc.asm

.9539					AllocUnary:
.9539	fa		plx				plx 								; restore stack pos
.953a	20 ae 97	jsr $97ae			jsr 	Evaluate16BitInteger		; get bytes required.
.953d	20 89 9f	jsr $9f89			jsr 	CheckRightBracket
.9540	da		phx				phx 								; save X/Y
.9541	5a		phy				phy
.9542	8a		txa				txa 								; copy X into Y
.9543	a8		tay				tay
.9544	b9 10 06	lda $0610,y			lda		NSMantissa1,y 				; get size
.9547	aa		tax				tax
.9548	b9 08 06	lda $0608,y			lda 	NSMantissa0,y
.954b	20 58 95	jsr $9558			jsr 	AllocateXABytes 			; allocate memory
.954e	99 08 06	sta $0608,y			sta 	NSMantissa0,y 				; write address out.
.9551	8a		txa				txa
.9552	99 10 06	sta $0610,y			sta 	NSMantissa1,y
.9555	7a		ply				ply
.9556	fa		plx				plx
.9557	60		rts				rts
.9558					AllocateXABytes:
.9558	5a		phy				phy
.9559	ac 0c 07	ldy $070c			ldy 	lowMemPtr 					; push current address on stack and to zTemp0
.955c	84 36		sty $36				sty 	zTemp0
.955e	5a		phy				phy
.955f	ac 0d 07	ldy $070d			ldy 	lowMemPtr+1
.9562	84 37		sty $37				sty 	zTemp0+1
.9564	5a		phy				phy
.9565	18		clc				clc 								; add to low memory pointer
.9566	6d 0c 07	adc $070c			adc 	lowMemPtr
.9569	8d 0c 07	sta $070c			sta 	lowMemPtr
.956c	8a		txa				txa
.956d	6d 0d 07	adc $070d			adc 	lowMemPtr+1
.9570	8d 0d 07	sta $070d			sta 	lowMemPtr+1
.9573					_ClearMemory:
.9573	ad 0c 07	lda $070c			lda 	lowMemPtr 					; cleared all memory allocated
.9576	c5 36		cmp $36				cmp 	zTemp0
.9578	d0 07		bne $9581			bne 	_CMClearNext
.957a	ad 0d 07	lda $070d			lda 	lowMemPtr+1
.957d	c5 37		cmp $37				cmp 	zTemp0+1
.957f	f0 0c		beq $958d			beq 	_CMExit
.9581					_CMClearNext:
.9581	a9 00		lda #$00			lda 	#0 							; clear byte, advance to next.
.9583	92 36		sta ($36)			sta 	(zTemp0)
.9585	e6 36		inc $36				inc 	zTemp0
.9587	d0 ea		bne $9573			bne 	_ClearMemory
.9589	e6 37		inc $37				inc		zTemp0+1
.958b	80 e6		bra $9573			bra 	_ClearMemory
.958d					_CMExit:
.958d	fa		plx				plx
.958e	68		pla				pla
.958f	7a		ply				ply
.9590	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/asc.asm

.a351					AscUnary:
.a351	fa		plx				plx 								; restore stack pos
.a352	20 81 97	jsr $9781			jsr 	EvaluateString 				; get a string
.a355	b2 36		lda ($36)			lda 	(zTemp0)					; get/return firs character
.a357	20 24 98	jsr $9824			jsr 	NSMSetByte
.a35a	20 89 9f	jsr $9f89			jsr 	CheckRightBracket
.a35d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/frac.asm

.a35e					FracUnary:
.a35e	fa		plx				plx 								; restore stack pos
.a35f	20 76 97	jsr $9776			jsr 	EvaluateNumber 				; get a float or int
.a362	20 89 9f	jsr $9f89			jsr 	CheckRightBracket
.a365	bd 00 06	lda $0600,x			lda 	NSStatus,x
.a368	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.a36a	f0 04		beq $a370			beq 	_IUZero
.a36c	20 2e a2	jsr $a22e			jsr 	FloatFractionalPart
.a36f	60		rts				rts
.a370					_IUZero:
.a370	20 22 98	jsr $9822			jsr 	NSMSetZero
.a373	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/int.asm

.a374					IntUnary:
.a374	fa		plx				plx 								; restore stack pos
.a375	20 76 97	jsr $9776			jsr 	EvaluateNumber 				; get a float or int
.a378	20 89 9f	jsr $9f89			jsr 	CheckRightBracket
.a37b	bd 00 06	lda $0600,x			lda 	NSStatus,x
.a37e	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.a380	f0 03		beq $a385			beq 	_IUExit
.a382	20 91 a2	jsr $a291			jsr 	FloatIntegerPart
.a385					_IUExit:
.a385	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/len.asm

.a386					LenUnary:
.a386	fa		plx				plx 								; restore stack pos
.a387	20 81 97	jsr $9781			jsr 	EvaluateString 				; get a string
.a38a	5a		phy				phy
.a38b	a0 00		ldy #$00			ldy 	#0 							; find length
.a38d					_LenFind:
.a38d	b1 36		lda ($36),y			lda 	(zTemp0),y
.a38f	f0 06		beq $a397			beq 	_LenExit
.a391	c8		iny				iny
.a392	d0 f9		bne $a38d			bne 	_LenFind
.a394	4c 70 a5	jmp $a570			jmp 	RangeError 					; string > 255
.a397					_LenExit:
.a397	98		tya				tya
.a398	20 24 98	jsr $9824			jsr 	NSMSetByte
.a39b	7a		ply				ply
.a39c	20 89 9f	jsr $9f89			jsr 	CheckRightBracket
.a39f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/not.asm

.9591					Unary_Not:
.9591	fa		plx				plx
.9592	20 99 97	jsr $9799			jsr 	EvaluateInteger 			; get integer
.9595	20 89 9f	jsr $9f89			jsr 	CheckRightBracket
.9598	20 52 98	jsr $9852			jsr 	NSMIsZero 					; zero mantissa ?
.959b	f0 04		beq $95a1			beq 	_NotZero
.959d	20 22 98	jsr $9822			jsr 	NSMSetZero
.95a0	60		rts				rts
.95a1					_NotZero:
.95a1	4c 3c 8d	jmp $8d3c			jmp 	ReturnTrue
.95a4					_UNBad:
.95a4	4c 7a a5	jmp $a57a			jmp 	ArgumentError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/rnd.asm

.95a7					Unary_Rnd:
.95a7	20 76 97	jsr $9776			jsr 	EvaluateNumber 				; number to use.
.95aa	20 89 9f	jsr $9f89			jsr 	CheckRightBracket 			; closing bracket
.95ad	20 d6 95	jsr $95d6			jsr 	Random32Bit 				; generate a number.
.95b0	ad 08 07	lda $0708			lda 	RandomSeed+0
.95b3	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.95b6	ad 09 07	lda $0709			lda 	RandomSeed+1
.95b9	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.95bc	ad 0a 07	lda $070a			lda 	RandomSeed+2
.95bf	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.95c2	ad 0b 07	lda $070b			lda 	RandomSeed+3
.95c5	29 7f		and #$7f			and 	#$7F 						; make legal mantissa
.95c7	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.95ca	a9 e1		lda #$e1			lda 	#-31 						; force into 0-1 range
.95cc	8d 28 06	sta $0628			sta 	NSExponent
.95cf	a9 08		lda #$08			lda 	#NSTFloat
.95d1	8d 00 06	sta $0600			sta 	NSStatus 					; positive.
>95d4	db						.byte 	$DB 						; causes a break in the emulator
.95d5	60		rts				rts
.95d6					Random32Bit:
.95d6	5a		phy				phy
.95d7	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.95d9	ad 08 07	lda $0708			lda 	RandomSeed+0 				; check the seed isn't zero
.95dc	d0 03		bne $95e1			bne 	_Random1
.95de	a8		tay				tay 								; if so do it 256 times
.95df	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.95e1					_Random1:
.95e1	0a		asl a				asl 	a 							; LSFR RNG
.95e2	2e 09 07	rol $0709			rol 	RandomSeed+1
.95e5	2e 0a 07	rol $070a			rol 	RandomSeed+2
.95e8	2e 0b 07	rol $070b			rol 	RandomSeed+3
.95eb	90 02		bcc $95ef			bcc 	_Random2
.95ed	49 c5		eor #$c5			eor 	#$C5
.95ef					_Random2:
.95ef	88		dey				dey
.95f0	d0 ef		bne $95e1			bne 	_Random1
.95f2	7a		ply				ply
.95f3	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/sgn.asm

.a3a0					SgnUnary:
.a3a0	fa		plx				plx 								; restore stack pos
.a3a1	20 76 97	jsr $9776			jsr 	EvaluateNumber 				; get a float or int
.a3a4	20 89 9f	jsr $9f89			jsr 	CheckRightBracket
.a3a7	20 52 98	jsr $9852			jsr 	NSMIsZero 					; if zero
.a3aa	f0 10		beq $a3bc			beq 	_SGZero  					; return Int Zero
.a3ac	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get status w/sign
.a3af	48		pha				pha
.a3b0	a9 01		lda #$01			lda 	#1 							; set to 1
.a3b2	20 24 98	jsr $9824			jsr 	NSMSetByte
.a3b5	68		pla				pla
.a3b6	29 80		and #$80			and		#$80 						; copy the sign byte out
.a3b8	9d 00 06	sta $0600,x			sta 	NSStatus,x
.a3bb	60		rts				rts
.a3bc	20 22 98	jsr $9822	_SGZero:jsr 	NSMSetZero
.a3bf	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/val.asm

.a3c0					ValUnary:
.a3c0	fa		plx				plx 								; restore stack pos
.a3c1	20 d6 a3	jsr $a3d6			jsr 	ValMainCode 				; do the main val() code
.a3c4	b0 01		bcs $a3c7			bcs 	_VUError 					; couldn't convert
.a3c6	60		rts				rts
.a3c7					_VUError:
.a3c7	4c 75 a5	jmp $a575			jmp 	TypeError
.a3ca					IsValUnary:
.a3ca	fa		plx				plx 								; restore stack pos
.a3cb	20 d6 a3	jsr $a3d6			jsr 	ValMainCode 				; do the main val() code
.a3ce	b0 03		bcs $a3d3			bcs 	_VUBad
.a3d0	4c 3c 8d	jmp $8d3c			jmp 	ReturnTrue
.a3d3					_VUBad:
.a3d3	4c 48 8d	jmp $8d48			jmp 	ReturnFalse
.a3d6					ValMainCode:
.a3d6	20 81 97	jsr $9781			jsr 	EvaluateString 				; get a string
.a3d9	20 89 9f	jsr $9f89			jsr 	CheckRightBracket 			; check right bracket present
.a3dc	5a		phy				phy
.a3dd	b2 36		lda ($36)			lda 	(zTemp0) 					; check not empty string
.a3df	f0 17		beq $a3f8			beq 	_VMCFail2
.a3e1	a0 ff		ldy #$ff			ldy 	#$FF 						; start position
.a3e3	48		pha				pha 								; save first character
.a3e4	c9 2d		cmp #$2d			cmp 	#"-"		 				; is it -
.a3e6	d0 01		bne $a3e9			bne 	_VMCStart
.a3e8	c8		iny				iny 								; skip over -
.a3e9					_VMCStart:
.a3e9	38		sec				sec 								; initialise first time round.
.a3ea					_VMCNext:
.a3ea	c8		iny				iny 								; pre-increment
.a3eb	b1 36		lda ($36),y			lda 	(zTemp0),y 					; next character
.a3ed	f0 0c		beq $a3fb			beq 	_VMCSuccess 				; successful.
.a3ef	20 8b 92	jsr $928b			jsr 	EncodeNumber 				; send it to the number-builder
.a3f2	90 03		bcc $a3f7			bcc 	_VMCFail 					; if failed, give up.
.a3f4	18		clc				clc 								; next time round, countinue
.a3f5	80 f3		bra $a3ea			bra 	_VMCNext
.a3f7					_VMCFail:
.a3f7	68		pla				pla
.a3f8					_VMCFail2:
.a3f8	7a		ply				ply
.a3f9	38		sec				sec
.a3fa	60		rts				rts
.a3fb					_VMCSuccess:
.a3fb	a9 00		lda #$00			lda 	#0 							; construct final
.a3fd	20 8b 92	jsr $928b			jsr 	EncodeNumber
.a400	68		pla				pla
.a401	c9 2d		cmp #$2d			cmp 	#"-"
.a403	d0 03		bne $a408			bne 	_VMCNotNegative
.a405	20 ce 97	jsr $97ce			jsr		NSMNegate
.a408					_VMCNotNegative:
.a408	7a		ply				ply
.a409	18		clc				clc
.a40a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/chr.asm

.95f4					ChrUnary:
.95f4	fa		plx				plx 								; restore stack pos
.95f5	20 ba 97	jsr $97ba			jsr 	Evaluate8BitInteger			; get value
.95f8	48		pha				pha
.95f9	20 89 9f	jsr $9f89			jsr 	CheckRightBracket
.95fc	a9 01		lda #$01			lda 	#1 							; allocate space for one char
.95fe	20 8b a7	jsr $a78b			jsr 	StringTempAllocate
.9601	68		pla				pla 								; write number to it
.9602	20 c9 a7	jsr $a7c9			jsr 	StringTempWrite
.9605	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/spc.asm

.9606					SpcUnary:
.9606	fa		plx				plx 								; restore stack pos
.9607	20 ba 97	jsr $97ba			jsr 	Evaluate8BitInteger			; get value
.960a	5a		phy				phy
.960b	48		pha				pha 								; save count
.960c	20 8b a7	jsr $a78b			jsr 	StringTempAllocate
.960f	7a		ply				ply 								; to do count in Y
.9610					_SpcLoop:
.9610	c0 00		cpy #$00			cpy 	#0
.9612	f0 08		beq $961c			beq 	_SpcExit
.9614	a9 20		lda #$20			lda 	#32
.9616	20 c9 a7	jsr $a7c9			jsr 	StringTempWrite
.9619	88		dey				dey
.961a	80 f4		bra $9610			bra 	_SPCLoop
.961c					_SpcExit:
.961c	7a		ply				ply
.961d	20 89 9f	jsr $9f89			jsr 	CheckRightBracket
.9620	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/str.asm

.9621					Unary_Str:
.9621	fa		plx				plx
.9622	20 76 97	jsr $9776			jsr 	EvaluateNumber  			; get number
.9625	20 89 9f	jsr $9f89			jsr 	CheckRightBracket 			; closing bracket
.9628	a9 05		lda #$05			lda 	#5 							; maximum decimals, from Basic816
.962a	20 43 96	jsr $9643			jsr 	ConvertNumberToString 		; do the conversion.
.962d	a9 21		lda #$21			lda		#33 						; create buffer
.962f	20 8b a7	jsr $a78b			jsr 	StringTempAllocate 			; allocate memory
.9632	da		phx				phx
.9633	a2 00		ldx #$00			ldx 	#0
.9635					_USCopy:
.9635	bd 98 08	lda $0898,x			lda 	DecimalBuffer,x
.9638	20 c9 a7	jsr $a7c9			jsr 	StringTempWrite
.963b	e8		inx				inx
.963c	bd 98 08	lda $0898,x			lda 	DecimalBuffer,x
.963f	d0 f4		bne $9635			bne 	_USCopy
.9641	fa		plx				plx
.9642	60		rts				rts
.9643					ConvertNumberToString:
.9643	5a		phy				phy 								; save code position
.9644	8d 14 07	sta $0714			sta 	DecimalPlaces	 			; save number of DPs.
.9647	9c 15 07	stz $0715			stz 	dbOffset 					; offset into decimal buffer = start.
.964a	bd 00 06	lda $0600,x			lda 	NSStatus,x  				; is it -ve.
.964d	10 0a		bpl $9659			bpl 	_CNTSNotNegative
.964f	29 7f		and #$7f			and 	#$7F 						; make +ve
.9651	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9654	a9 2d		lda #$2d			lda 	#"-"
.9656	20 bf 96	jsr $96bf			jsr 	WriteDecimalBuffer
.9659					_CNTSNotNegative:
.9659	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if decimal
.965c	f0 15		beq $9673			beq 	_CNTSNotFloat
.965e	e8		inx				inx 								; round up
.965f	a9 01		lda #$01			lda 	#1
.9661	20 24 98	jsr $9824			jsr 	NSMSetByte
.9664	ca		dex				dex
.9665	bd 28 06	lda $0628,x			lda		NSExponent,x
.9668	9d 29 06	sta $0629,x			sta 	NSExponent+1,x
.966b	a9 08		lda #$08			lda 	#NSTFloat
.966d	9d 01 06	sta $0601,x			sta 	NSStatus+1,x
.9670	20 50 a1	jsr $a150			jsr 	FloatAdd
.9673					_CNTSNotFloat:
.9673	20 a1 96	jsr $96a1			jsr 	MakePlusTwoString
.9676	20 2e a2	jsr $a22e			jsr 	FloatFractionalPart 		; get the fractional part
.9679	20 f2 a2	jsr $a2f2			jsr 	NSNormalise					; normalise , exit if zero
.967c	f0 21		beq $969f			beq 	_CNTSExit
.967e	a9 2e		lda #$2e			lda 	#"."
.9680	20 bf 96	jsr $96bf			jsr 	WriteDecimalBuffer 			; write decimal place
.9683					_CNTSDecimal:
.9683	ce 14 07	dec $0714			dec 	DecimalPlaces 				; done all the decimals
.9686	30 17		bmi $969f			bmi 	_CNTSExit
.9688	e8		inx				inx 								; x 10.0
.9689	a9 0a		lda #$0a			lda 	#10
.968b	20 24 98	jsr $9824			jsr 	NSMSetByte
.968e	a9 08		lda #$08			lda 	#NSTFloat
.9690	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9693	ca		dex				dex
.9694	20 bb a2	jsr $a2bb			jsr 	FloatMultiply
.9697	20 a1 96	jsr $96a1			jsr 	MakePlusTwoString
.969a	20 2e a2	jsr $a22e			jsr 	FloatFractionalPart 		; get the fractional part
.969d	80 e4		bra $9683			bra 	_CNTSDecimal 				; keep going.
.969f					_CNTSExit:
.969f	7a		ply				ply
.96a0	60		rts				rts
.96a1					MakePlusTwoString:
.96a1	da		phx				phx
.96a2	20 f9 97	jsr $97f9			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.96a5	e8		inx				inx 								; access it
.96a6	e8		inx				inx
.96a7	20 91 a2	jsr $a291			jsr 	FloatIntegerPart 			; make it an integer
.96aa	a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.96ac	20 fa a0	jsr $a0fa			jsr 	ConvertInt32
.96af	a2 00		ldx #$00			ldx	 	#0
.96b1					_MPTSCopy:
.96b1	bd 76 08	lda $0876,x			lda 	NumberBuffer,x
.96b4	20 bf 96	jsr $96bf			jsr 	WriteDecimalBuffer
.96b7	e8		inx				inx
.96b8	bd 76 08	lda $0876,x			lda 	NumberBuffer,x
.96bb	d0 f4		bne $96b1			bne 	_MPTSCopy
.96bd	fa		plx				plx
.96be	60		rts				rts
.96bf					WriteDecimalBuffer:
.96bf	da		phx				phx
.96c0	ae 15 07	ldx $0715			ldx 	dbOffset
.96c3	9d 98 08	sta $0898,x			sta 	DecimalBuffer,x
.96c6	9e 99 08	stz $0899,x			stz 	DecimalBuffer+1,x
.96c9	ee 15 07	inc $0715			inc 	dbOffset
.96cc	fa		plx				plx
.96cd	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/substring.asm

.96ce					Unary_Left:
.96ce	fa		plx				plx
.96cf	18		clc				clc 								; only one parameter
.96d0	20 45 97	jsr $9745			jsr 	SubstringInitial 			; set up.
.96d3	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; Param #1 is the length
.96d6	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.96d9	9e 09 06	stz $0609,x			stz 	NSMantissa0+1,x 			; Start is zero.
.96dc	80 2c		bra $970a			bra 	SubstringMain
.96de					Unary_Right:
.96de	fa		plx				plx
.96df	18		clc				clc 								; only one parameter
.96e0	20 45 97	jsr $9745			jsr 	SubstringInitial 			; set up.
.96e3	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; length => param 2
.96e6	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.96e9	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; total length
.96ec	fd 09 06	sbc $0609,x			sbc 	NSMantissa0+1,x 			; length - required.
.96ef	b0 02		bcs $96f3			bcs 	_URNotUnderflow
.96f1	a9 00		lda #$00			lda 	#0 							; start from the beginning, as something like right$("AB",3)
.96f3					_URNotUnderFlow:
.96f3	9d 09 06	sta $0609,x			sta 	NSMantissa0+1,x 			; this is the start position
.96f6	80 12		bra $970a			bra 	SubStringMain
.96f8					Unary_Mid:
.96f8	fa		plx				plx
.96f9	38		sec				sec 								; two parameters
.96fa	20 45 97	jsr $9745			jsr 	SubstringInitial 			; set up.
.96fd	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; first parameter is zero ?
.9700	f0 05		beq $9707			beq 	_UMError
.9702	de 09 06	dec $0609,x			dec 	NSMantissa0+1,x				; reduce initial offset by 1 as MID$(a$,1..) is actually the first character
.9705	80 03		bra $970a			bra 	SubStringMain
.9707					_UMError:
.9707	4c 7a a5	jmp $a57a			jmp 	ArgumentError
.970a					SubStringMain:
.970a	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; is the initial offset >= the length
.970d	dd 28 06	cmp $0628,x			cmp 	NSExponent,x
.9710	b0 2d		bcs $973f			bcs 	_SSMNull 					; if so, return an empty string.
.9712	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; if copy count is zero
.9715	f0 28		beq $973f			beq 	_SSMNull 					; return empty string.
.9717	18		clc				clc 								; add the offset +1 to the address and
.9718	bd 08 06	lda $0608,x			lda	 	NSMantissa0,x 				; put in zTemp
.971b	7d 09 06	adc $0609,x			adc 	NSMantissa0+1,x
.971e	85 36		sta $36				sta 	zTemp0
.9720	bd 10 06	lda $0610,x			lda	 	NSMantissa1,x
.9723	69 00		adc #$00			adc 	#0
.9725	85 37		sta $37				sta 	zTemp0+1
.9727					_SSMNoCarry:
.9727	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; characters required.
.972a	20 8b a7	jsr $a78b			jsr 	StringTempAllocate 			; allocate that many characters
.972d	5a		phy				phy 								; save Y
.972e	a0 00		ldy #$00			ldy 	#0 							; start copying in.
.9730					_SSMCopy:
.9730	b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next character
.9732	f0 09		beq $973d			beq 	_SSMEString 				; no more to copy
.9734	20 c9 a7	jsr $a7c9			jsr 	StringTempWrite 			; and write it out.
.9737	c8		iny				iny
.9738	de 0a 06	dec $060a,x			dec 	NSMantissa0+2,x
.973b	d0 f3		bne $9730			bne 	_SSMCopy
.973d					_SSMEString:
.973d	7a		ply				ply
.973e					_SSMExit:
.973e	60		rts				rts
.973f					_SSMNull:
.973f	a9 00		lda #$00			lda 	#0
.9741	20 8b a7	jsr $a78b			jsr 	StringTempAllocate
.9744	60		rts				rts
.9745					SubstringInitial:
.9745	da		phx				phx 								; save initial stack position
.9746	08		php				php 								; save carry on stack indicating 2 parameters
.9747	20 81 97	jsr $9781			jsr 	EvaluateString 				; get a string
.974a	5a		phy				phy 								; calculate length to exponent.
.974b	a0 ff		ldy #$ff			ldy 	#$FF
.974d					_SIFindLength:
.974d	c8		iny				iny
.974e	b1 36		lda ($36),y			lda 	(zTemp0),y
.9750	d0 fb		bne $974d			bne 	_SIFindLength
.9752	98		tya				tya
.9753	9d 28 06	sta $0628,x			sta 	NSExponent,x
.9756	7a		ply				ply
.9757	e8		inx				inx
.9758	20 91 9f	jsr $9f91			jsr 	CheckComma 					; comma next
.975b	20 ba 97	jsr $97ba			jsr 	Evaluate8BitInteger 		; get next parameter
.975e	28		plp				plp 								; is it the last parameter ?
.975f	90 07		bcc $9768			bcc 	_SSIExit 					; if so, exit.
.9761	e8		inx				inx
.9762	20 91 9f	jsr $9f91			jsr 	CheckComma 					; comma next
.9765	20 ba 97	jsr $97ba			jsr 	Evaluate8BitInteger 		; get last parameter
.9768					_SSIExit:
.9768	fa		plx				plx
.9769	20 89 9f	jsr $9f89			jsr 	CheckRightBracket 			; check closing bracket
.976c	60		rts				rts 								; exit

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/exprhelper.asm

.976d					EvaluateValue:
.976d	48		pha				pha
.976e	20 d8 90	jsr $90d8			jsr		EvaluateExpression 			; expression
.9771	20 ed 91	jsr $91ed			jsr 	Dereference					; derefernce it
.9774	68		pla				pla
.9775	60		rts				rts
.9776					EvaluateNumber:
.9776	20 6d 97	jsr $976d			jsr 	EvaluateValue 				; get a value
.9779	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if string.
.977c	29 10		and #$10			and 	#NSBIsString
.977e	d0 16		bne $9796			bne 	HelperTypeError
.9780	60		rts				rts
.9781					EvaluateString:
.9781	20 6d 97	jsr $976d			jsr 	EvaluateValue 				; get a value
.9784	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if string.
.9787	29 10		and #$10			and 	#NSBIsString
.9789	f0 0b		beq $9796			beq 	HelperTypeError
.978b					CopyAddressToTemp0:
.978b	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy address -> zTemp0
.978e	85 36		sta $36				sta 	zTemp0
.9790	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.9793	85 37		sta $37				sta 	zTemp0+1
.9795	60		rts				rts
.9796					HelperTypeError:
.9796	4c 75 a5	jmp $a575			jmp 	TypeError
.9799					EvaluateInteger:
.9799	20 76 97	jsr $9776			jsr 	EvaluateNumber
.979c	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check exponent is zero
.979f	d0 0a		bne $97ab			bne 	HelperValueError 			; if not, it's a float.
.97a1	60		rts				rts
.97a2					EvaluateUnsignedInteger:
.97a2	20 99 97	jsr $9799			jsr 	EvaluateInteger 			; check integer is +ve
.97a5	bd 00 06	lda $0600,x			lda 	NSStatus,x
.97a8	30 01		bmi $97ab			bmi 	HelperValueError
.97aa	60		rts				rts
.97ab					HelperValueError:
.97ab	4c 7a a5	jmp $a57a			jmp 	ArgumentError
.97ae					Evaluate16BitInteger:
.97ae	20 a2 97	jsr $97a2			jsr	 	EvaluateUnsignedInteger		; get integer
.97b1	bd 20 06	lda $0620,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.97b4	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.97b7	d0 f2		bne $97ab			bne 	HelperValueError
.97b9	60		rts				rts
.97ba					Evaluate8BitInteger:
.97ba	20 a2 97	jsr $97a2			jsr	 	EvaluateUnsignedInteger 	; get an integer
.97bd	d0 ec		bne $97ab			bne 	HelperValueError
.97bf	bd 20 06	lda $0620,x			lda 	NSMantissa3,x	 			; bytes 1, 2 & 3 must be zero
.97c2	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.97c5	1d 10 06	ora $0610,x			ora 	NSMantissa1,x
.97c8	d0 e1		bne $97ab			bne 	HelperValueError
.97ca	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.97cd	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/mult8x8.asm

.a40b					Multiply8x8:
.a40b	4a		lsr a		  		lsr 	a  							; prime the carry bit for the loop
.a40c	85 36		sta $36			  	sta 	zTemp0
.a40e	86 37		stx $37				stx 	zTemp0+1
.a410	a9 00		lda #$00			lda 	#0
.a412	a2 08		ldx #$08			ldx 	#8
.a414					_M88Loop:
.a414	90 03		bcc $a419			bcc 	_M88NoAdd
.a416	18		clc				clc
.a417	65 37		adc $37				adc 	zTemp0+1
.a419					_M88NoAdd:
.a419	6a		ror a				ror 	a
.a41a	66 36		ror $36				ror 	zTemp0  					; pull another bit out for the next iteration
.a41c	ca		dex				dex         						; inc/dec don't modify carry; only shifts and adds do
.a41d	d0 f5		bne $a414			bne 	_M88Loop
.a41f	85 37		sta $37				sta 	zTemp0+1 					; store high 8 bits.
.a421	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/utility.asm

.97ce					NSMNegate:
.97ce	bd 00 06	lda $0600,x			lda 	NSStatus,x
.97d1	49 80		eor #$80			eor 	#NSBIsNegative
.97d3	9d 00 06	sta $0600,x			sta 	NSStatus,x
.97d6	60		rts				rts
.97d7					NSMNegateMantissa:
.97d7	38		sec				sec
.97d8	a9 00		lda #$00			lda 	#0
.97da	fd 08 06	sbc $0608,x			sbc 	NSMantissa0,x
.97dd	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.97e0	a9 00		lda #$00			lda 	#0
.97e2	fd 10 06	sbc $0610,x			sbc 	NSMantissa1,x
.97e5	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.97e8	a9 00		lda #$00			lda 	#0
.97ea	fd 18 06	sbc $0618,x			sbc 	NSMantissa2,x
.97ed	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.97f0	a9 00		lda #$00			lda 	#0
.97f2	fd 20 06	sbc $0620,x			sbc 	NSMantissa3,x
.97f5	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.97f8	60		rts				rts
.97f9					NSMShiftUpTwo:
.97f9	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.97fc	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.97ff	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.9802	9d 12 06	sta $0612,x			sta 	NSMantissa1+2,x
.9805	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.9808	9d 1a 06	sta $061a,x			sta 	NSMantissa2+2,x
.980b	bd 20 06	lda $0620,x			lda 	NSMantissa3,x
.980e	9d 22 06	sta $0622,x			sta 	NSMantissa3+2,x
.9811	bd 28 06	lda $0628,x			lda 	NSExponent,x
.9814	9d 2a 06	sta $062a,x			sta 	NSExponent+2,x
.9817	bd 00 06	lda $0600,x			lda 	NSStatus,x
.981a	9d 02 06	sta $0602,x			sta 	NSStatus+2,x
.981d	60		rts				rts
.981e					NSMSetZeroMantissaOnly:
.981e	a9 00		lda #$00			lda 	#0
.9820	80 08		bra $982a			bra 	NSMSetMantissa
.9822					NSMSetZero:
.9822	a9 00		lda #$00			lda 	#0
.9824					NSMSetByte:
.9824	9e 28 06	stz $0628,x			stz 	NSExponent,x 				; zero exponent, as integer.
.9827	9e 00 06	stz $0600,x			stz 	NSStatus,x 					; status zero (integer)
.982a					NSMSetMantissa:
.982a	9d 08 06	sta $0608,x			sta 	NSMantissa0,x 				; mantissa
.982d	9e 10 06	stz $0610,x			stz 	NSMantissa1,x
.9830	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.9833	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.9836	60		rts				rts
.9837					NSMShiftLeft:
.9837	18		clc				clc
.9838					NSMRotateLeft:
.9838	3e 08 06	rol $0608,x			rol 	NSMantissa0,x
.983b	3e 10 06	rol $0610,x			rol		NSMantissa1,x
.983e	3e 18 06	rol $0618,x			rol		NSMantissa2,x
.9841	3e 20 06	rol $0620,x			rol		NSMantissa3,x
.9844	60		rts				rts
.9845					NSMShiftRight:
.9845	5e 20 06	lsr $0620,x			lsr 	NSMantissa3,x
.9848	7e 18 06	ror $0618,x			ror		NSMantissa2,x
.984b	7e 10 06	ror $0610,x			ror		NSMantissa1,x
.984e	7e 08 06	ror $0608,x			ror		NSMantissa0,x
.9851	60		rts				rts
.9852					NSMIsZero:
.9852	bd 20 06	lda $0620,x			lda 	NSMantissa3,x
.9855	1d 18 06	ora $0618,x			ora		NSMantissa2,x
.9858	1d 10 06	ora $0610,x			ora		NSMantissa1,x
.985b	1d 08 06	ora $0608,x			ora		NSMantissa0,x
.985e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/asmcore.asm

.a422					Assemble_ora:
.a422	20 fa 81	jsr $81fa		jsr	AssembleGroup1
>a425	01					.byte $01
.a426					Assemble_and:
.a426	20 fa 81	jsr $81fa		jsr	AssembleGroup1
>a429	21					.byte $21
.a42a					Assemble_eor:
.a42a	20 fa 81	jsr $81fa		jsr	AssembleGroup1
>a42d	41					.byte $41
.a42e					Assemble_adc:
.a42e	20 fa 81	jsr $81fa		jsr	AssembleGroup1
>a431	61					.byte $61
.a432					Assemble_sta:
.a432	20 fa 81	jsr $81fa		jsr	AssembleGroup1
>a435	81					.byte $81
.a436					Assemble_lda:
.a436	20 fa 81	jsr $81fa		jsr	AssembleGroup1
>a439	a1					.byte $a1
.a43a					Assemble_cmp:
.a43a	20 fa 81	jsr $81fa		jsr	AssembleGroup1
>a43d	c1					.byte $c1
.a43e					Assemble_sbc:
.a43e	20 fa 81	jsr $81fa		jsr	AssembleGroup1
>a441	e1					.byte $e1
.a442					Assemble_asl:
.a442	20 01 82	jsr $8201		jsr	AssembleGroup2
>a445	02					.byte $02
>a446	75					.byte $75
.a447					Assemble_rol:
.a447	20 01 82	jsr $8201		jsr	AssembleGroup2
>a44a	22					.byte $22
>a44b	75					.byte $75
.a44c					Assemble_lsr:
.a44c	20 01 82	jsr $8201		jsr	AssembleGroup2
>a44f	42					.byte $42
>a450	75					.byte $75
.a451					Assemble_ror:
.a451	20 01 82	jsr $8201		jsr	AssembleGroup2
>a454	62					.byte $62
>a455	75					.byte $75
.a456					Assemble_stx:
.a456	20 01 82	jsr $8201		jsr	AssembleGroup2
>a459	82					.byte $82
>a45a	50					.byte $50
.a45b					Assemble_ldx:
.a45b	20 01 82	jsr $8201		jsr	AssembleGroup2
>a45e	a2					.byte $a2
>a45f	d0					.byte $d0
.a460					Assemble_dec:
.a460	20 01 82	jsr $8201		jsr	AssembleGroup2
>a463	c2					.byte $c2
>a464	55					.byte $55
.a465					Assemble_inc:
.a465	20 01 82	jsr $8201		jsr	AssembleGroup2
>a468	e2					.byte $e2
>a469	55					.byte $55
.a46a					Assemble_stz:
.a46a	20 01 82	jsr $8201		jsr	AssembleGroup2
>a46d	60					.byte $60
>a46e	44					.byte $44
.a46f					Assemble_bit:
.a46f	20 01 82	jsr $8201		jsr	AssembleGroup2
>a472	20					.byte $20
>a473	55					.byte $55
.a474					Assemble_sty:
.a474	20 01 82	jsr $8201		jsr	AssembleGroup2
>a477	80					.byte $80
>a478	54					.byte $54
.a479					Assemble_ldy:
.a479	20 01 82	jsr $8201		jsr	AssembleGroup2
>a47c	a0					.byte $a0
>a47d	d5					.byte $d5
.a47e					Assemble_cpy:
.a47e	20 01 82	jsr $8201		jsr	AssembleGroup2
>a481	c0					.byte $c0
>a482	d4					.byte $d4
.a483					Assemble_cpx:
.a483	20 01 82	jsr $8201		jsr	AssembleGroup2
>a486	e0					.byte $e0
>a487	d0					.byte $d0
.a488					Assemble_tsb:
.a488	20 01 82	jsr $8201		jsr	AssembleGroup2
>a48b	00					.byte $00
>a48c	50					.byte $50
.a48d					Assemble_trb:
.a48d	20 01 82	jsr $8201		jsr	AssembleGroup2
>a490	10					.byte $10
>a491	50					.byte $50
.a492					Assemble_jsr:
.a492	20 01 82	jsr $8201		jsr	AssembleGroup2
>a495	14					.byte $14
>a496	10					.byte $10
.a497					Assemble_jmp:
.a497	20 01 82	jsr $8201		jsr	AssembleGroup2
>a49a	40					.byte $40
>a49b	10					.byte $10
.a49c					Assemble_bpl:
.a49c	20 52 82	jsr $8252		jsr	AssembleGroup3
>a49f	10					.byte $10
.a4a0					Assemble_bmi:
.a4a0	20 52 82	jsr $8252		jsr	AssembleGroup3
>a4a3	30					.byte $30
.a4a4					Assemble_bvc:
.a4a4	20 52 82	jsr $8252		jsr	AssembleGroup3
>a4a7	50					.byte $50
.a4a8					Assemble_bvs:
.a4a8	20 52 82	jsr $8252		jsr	AssembleGroup3
>a4ab	70					.byte $70
.a4ac					Assemble_bcc:
.a4ac	20 52 82	jsr $8252		jsr	AssembleGroup3
>a4af	90					.byte $90
.a4b0					Assemble_bcs:
.a4b0	20 52 82	jsr $8252		jsr	AssembleGroup3
>a4b3	b0					.byte $b0
.a4b4					Assemble_bne:
.a4b4	20 52 82	jsr $8252		jsr	AssembleGroup3
>a4b7	d0					.byte $d0
.a4b8					Assemble_beq:
.a4b8	20 52 82	jsr $8252		jsr	AssembleGroup3
>a4bb	f0					.byte $f0
.a4bc					Assemble_bra:
.a4bc	20 52 82	jsr $8252		jsr	AssembleGroup3
>a4bf	80					.byte $80
.a4c0					Assemble_brk:
.a4c0	20 88 82	jsr $8288		jsr	AssembleGroup4
>a4c3	00					.byte $00
.a4c4					Assemble_php:
.a4c4	20 88 82	jsr $8288		jsr	AssembleGroup4
>a4c7	08					.byte $08
.a4c8					Assemble_clc:
.a4c8	20 88 82	jsr $8288		jsr	AssembleGroup4
>a4cb	18					.byte $18
.a4cc					Assemble_plp:
.a4cc	20 88 82	jsr $8288		jsr	AssembleGroup4
>a4cf	28					.byte $28
.a4d0					Assemble_sec:
.a4d0	20 88 82	jsr $8288		jsr	AssembleGroup4
>a4d3	38					.byte $38
.a4d4					Assemble_rti:
.a4d4	20 88 82	jsr $8288		jsr	AssembleGroup4
>a4d7	40					.byte $40
.a4d8					Assemble_pha:
.a4d8	20 88 82	jsr $8288		jsr	AssembleGroup4
>a4db	48					.byte $48
.a4dc					Assemble_cli:
.a4dc	20 88 82	jsr $8288		jsr	AssembleGroup4
>a4df	58					.byte $58
.a4e0					Assemble_phy:
.a4e0	20 88 82	jsr $8288		jsr	AssembleGroup4
>a4e3	5a					.byte $5a
.a4e4					Assemble_rts:
.a4e4	20 88 82	jsr $8288		jsr	AssembleGroup4
>a4e7	60					.byte $60
.a4e8					Assemble_pla:
.a4e8	20 88 82	jsr $8288		jsr	AssembleGroup4
>a4eb	68					.byte $68
.a4ec					Assemble_sei:
.a4ec	20 88 82	jsr $8288		jsr	AssembleGroup4
>a4ef	78					.byte $78
.a4f0					Assemble_ply:
.a4f0	20 88 82	jsr $8288		jsr	AssembleGroup4
>a4f3	7a					.byte $7a
.a4f4					Assemble_dey:
.a4f4	20 88 82	jsr $8288		jsr	AssembleGroup4
>a4f7	88					.byte $88
.a4f8					Assemble_txa:
.a4f8	20 88 82	jsr $8288		jsr	AssembleGroup4
>a4fb	8a					.byte $8a
.a4fc					Assemble_tya:
.a4fc	20 88 82	jsr $8288		jsr	AssembleGroup4
>a4ff	98					.byte $98
.a500					Assemble_txs:
.a500	20 88 82	jsr $8288		jsr	AssembleGroup4
>a503	9a					.byte $9a
.a504					Assemble_tay:
.a504	20 88 82	jsr $8288		jsr	AssembleGroup4
>a507	a8					.byte $a8
.a508					Assemble_tax:
.a508	20 88 82	jsr $8288		jsr	AssembleGroup4
>a50b	aa					.byte $aa
.a50c					Assemble_clv:
.a50c	20 88 82	jsr $8288		jsr	AssembleGroup4
>a50f	b8					.byte $b8
.a510					Assemble_tsx:
.a510	20 88 82	jsr $8288		jsr	AssembleGroup4
>a513	ba					.byte $ba
.a514					Assemble_iny:
.a514	20 88 82	jsr $8288		jsr	AssembleGroup4
>a517	c8					.byte $c8
.a518					Assemble_dex:
.a518	20 88 82	jsr $8288		jsr	AssembleGroup4
>a51b	ca					.byte $ca
.a51c					Assemble_cld:
.a51c	20 88 82	jsr $8288		jsr	AssembleGroup4
>a51f	d8					.byte $d8
.a520					Assemble_phx:
.a520	20 88 82	jsr $8288		jsr	AssembleGroup4
>a523	da					.byte $da
.a524					Assemble_inx:
.a524	20 88 82	jsr $8288		jsr	AssembleGroup4
>a527	e8					.byte $e8
.a528					Assemble_nop:
.a528	20 88 82	jsr $8288		jsr	AssembleGroup4
>a52b	ea					.byte $ea
.a52c					Assemble_sed:
.a52c	20 88 82	jsr $8288		jsr	AssembleGroup4
>a52f	f8					.byte $f8
.a530					Assemble_plx:
.a530	20 88 82	jsr $8288		jsr	AssembleGroup4
>a533	fa					.byte $fa

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/constants.asm

.a534					DecimalScalarTable:
>a534	66 66 66 66				.dword $66666666 ; 0.1
>a538	de					.byte $de
>a539	1f 85 eb 51				.dword $51eb851f ; 0.01
>a53d	db					.byte $db
>a53e	4c 37 89 41				.dword $4189374c ; 0.001
>a542	d8					.byte $d8
>a543	ac 8b db 68				.dword $68db8bac ; 0.0001
>a547	d4					.byte $d4
>a548	24 d6 e2 53				.dword $53e2d624 ; 1e-05
>a54c	d1					.byte $d1
>a54d	83 de 1b 43				.dword $431bde83 ; 1e-06
>a551	ce					.byte $ce
>a552	6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>a556	ca					.byte $ca
>a557	89 3b e6 55				.dword $55e63b89 ; 1e-08
>a55b	c7					.byte $c7
>a55c	a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>a560	c4					.byte $c4
>a561	67 7f f3 6d				.dword $6df37f67 ; 1e-10
>a565	c0					.byte $c0
>a566	86 ff f5 57				.dword $57f5ff86 ; 1e-11
>a56a	bd					.byte $bd

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.asm

.a56b					SyntaxError:
.a56b	a9 02		lda #$02		lda	#2
.a56d	4c cf 8c	jmp $8ccf		jmp	ErrorHandler
.a570					RangeError:
.a570	a9 04		lda #$04		lda	#4
.a572	4c cf 8c	jmp $8ccf		jmp	ErrorHandler
.a575					TypeError:
.a575	a9 05		lda #$05		lda	#5
.a577	4c cf 8c	jmp $8ccf		jmp	ErrorHandler
.a57a					ArgumentError:
.a57a	a9 07		lda #$07		lda	#7
.a57c	4c cf 8c	jmp $8ccf		jmp	ErrorHandler
.a57f					NotDoneError:
.a57f	a9 0c		lda #$0c		lda	#12
.a581	4c cf 8c	jmp $8ccf		jmp	ErrorHandler
.a584					ErrorText:
>a584	42 72 65 61 6b 00			.text	"Break",0
>a58a	53 79 6e 74 61 78 20 65			.text	"Syntax error",0
>a592	72 72 6f 72 00
>a597	44 69 76 69 73 69 6f 6e			.text	"Division by zero",0
>a59f	20 62 79 20 7a 65 72 6f 00
>a5a8	4f 75 74 20 6f 66 20 52			.text	"Out of Range",0
>a5b0	61 6e 67 65 00
>a5b5	54 79 70 65 20 6d 69 73			.text	"Type mismatch",0
>a5bd	6d 61 74 63 68 00
>a5c3	4f 75 74 20 6f 66 20 6d			.text	"Out of memory",0
>a5cb	65 6d 6f 72 79 00
>a5d1	49 6c 6c 65 67 61 6c 20			.text	"Illegal argument",0
>a5d9	61 72 67 75 6d 65 6e 74 00
>a5e2	53 74 6f 70 00				.text	"Stop",0
>a5e7	53 74 72 69 6e 67 20 74			.text	"String too long",0
>a5ef	6f 6f 20 6c 6f 6e 67 00
>a5f7	41 73 73 65 72 74 69 6f			.text	"Assertion failed",0
>a5ff	6e 20 66 61 69 6c 65 64 00
>a608	4f 75 74 20 6f 66 20 64			.text	"Out of data",0
>a610	61 74 61 00
>a614	55 6e 69 6d 70 6c 65 6d			.text	"Unimplemented",0
>a61c	65 6e 74 65 64 00
>a622	4e 6f 20 73 75 63 68 20			.text	"No such line number",0
>a62a	6c 69 6e 65 20 6e 75 6d 62 65 72 00
>a636	52 65 74 75 72 6e 20 77			.text	"Return without Gosub",0
>a63e	69 74 68 6f 75 74 20 47 6f 73 75 62 00
>a64b	55 6e 74 69 6c 20 77 69			.text	"Until without Repeat",0
>a653	74 68 6f 75 74 20 52 65 70 65 61 74 00
>a660	57 65 6e 64 20 77 69 74			.text	"Wend without While",0
>a668	68 6f 75 74 20 57 68 69 6c 65 00
>a673	4e 65 78 74 20 77 69 74			.text	"Next without For",0
>a67b	68 6f 75 74 20 46 6f 72 00
>a684	42 41 53 49 43 20 53 74			.text	"BASIC Stack full",0
>a68c	61 63 6b 20 66 75 6c 6c 00
>a695	4f 70 65 6e 20 53 74 72			.text	"Open Structure",0
>a69d	75 63 74 75 72 65 00
>a6a4	45 6e 64 50 72 6f 63 20			.text	"EndProc without call",0
>a6ac	77 69 74 68 6f 75 74 20 63 61 6c 6c 00
>a6b9	41 72 72 61 79 20 61 6c			.text	"Array already defined",0
>a6c1	72 65 61 64 79 20 64 65 66 69 6e 65 64 00
>a6cf	41 72 72 61 79 20 73 69			.text	"Array size",0
>a6d7	7a 65 00
>a6da	42 61 64 20 61 72 72 61			.text	"Bad array index",0
>a6e2	79 20 69 6e 64 65 78 00

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/timestamp.asm

>a6ea	42 75 69 6c 74 20 54 68			.text "Built Thursday 06-Oct-2022. Build 185."
>a6f2	75 72 73 64 61 79 20 30 36 2d 4f 63 74 2d 32 30
>a702	32 32 2e 20 42 75 69 6c 64 20 31 38 35 2e

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/bytes.asm

.985f					StackPushByte:
.985f	48		pha				pha 								; save byte
.9860	a5 34		lda $34				lda 	BasicStack
.9862	d0 02		bne $9866			bne 	_SPBNoBorrow
.9864	c6 35		dec $35				dec 	BasicStack+1
.9866					_SPBNoBorrow:
.9866	c6 34		dec $34				dec 	BasicStack
.9868	68		pla				pla 								; get back and write
.9869	92 34		sta ($34)			sta 	(BasicStack)
.986b	60		rts				rts
.986c					StackPopByte:
.986c	b2 34		lda ($34)			lda 	(BasicStack)
.986e	e6 34		inc $34				inc 	BasicStack
.9870	d0 02		bne $9874			bne 	_SPBNoCarry
.9872	e6 35		inc $35				inc 	BasicStack+1
.9874					_SPBNoCarry:
.9874	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/frames.asm

.9875					StackOpen:
.9875	48		pha				pha 								; save frame byte
.9876	29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.9878	0a		asl a				asl 	a 							; claim twice this for storage
.9879	49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.987b	38		sec				sec 								; so basically subtracting from
.987c	65 34		adc $34				adc 	basicStack 	 				; basicStack
.987e	85 34		sta $34				sta 	basicStack
.9880	b0 08		bcs $988a			bcs 	_SONoBorrow
.9882	c6 35		dec $35				dec 	basicStack+1
.9884	a5 35		lda $35				lda 	basicStack+1 				; have we reached stack overflow
.9886	c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.9888	90 04		bcc $988e			bcc 	_SOMemory
.988a					_SONoBorrow:
.988a	68		pla				pla 								; get marker back and write at TOS
.988b	92 34		sta ($34)			sta 	(basicStack)
.988d	60		rts				rts
.988e					_SOMemory:
.988e							ERR_STACK
.988e					StackClose:
.988e	b2 34		lda ($34)			lda 	(basicStack) 				; get TOS marker
.9890	29 0f		and #$0f			and 	#$0F 						; bytes to add back
.9892	0a		asl a				asl 	a 							; claim twice this.
.9893	65 34		adc $34				adc 	basicStack 					; add to the stack pointer.
.9895	85 34		sta $34				sta 	basicStack
.9897	90 02		bcc $989b			bcc 	_SCExit
.9899	e6 35		inc $35				inc 	basicStack+1
.989b					_SCExit:
.989b	60		rts				rts
.989c					StackCheckFrame:
.989c	48		pha				pha
.989d					_StackRemoveLocals:
.989d	b2 34		lda ($34)			lda 	(basicStack) 				; check for local, keep popping them
.989f	c9 03		cmp #$03			cmp 	#STK_LOCALS+1
.98a1	b0 05		bcs $98a8			bcs 	_SCNoLocal
.98a3	20 30 9f	jsr $9f30			jsr 	LocalPopValue
.98a6	80 f5		bra $989d			bra 	_StackRemoveLocals
.98a8					_SCNoLocal:
.98a8	68		pla				pla
.98a9	52 34		eor ($34)			eor 	(basicStack) 				; xor with toS marker
.98ab	29 f0		and #$f0			and 	#$F0 						; check type bits
.98ad	d0 01		bne $98b0			bne 	_SCFError 					; different, we have structures mixed up
.98af	60		rts				rts
.98b0					_SCFError:
.98b0	8a		txa				txa 								; report error X
.98b1	4c cf 8c	jmp $8ccf			jmp 	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/location.asm

.98b4					STKSaveCodePosition:
.98b4	5a		phy				phy
.98b5	98		tya				tya 								; save Y
.98b6	a0 05		ldy #$05			ldy 	#5
.98b8	91 34		sta ($34),y			sta 	(basicStack),y
.98ba	88		dey				dey 								; save Code Pointer
.98bb					_STKSaveLoop:
.98bb	b9 2f 00	lda $002f,y			lda 	safePtr-1,y 				; allows us to access the pointer w/out issues.
.98be	91 34		sta ($34),y			sta 	(basicStack),y
.98c0	88		dey				dey
.98c1	d0 f8		bne $98bb			bne 	_STKSaveLoop
.98c3	7a		ply				ply
.98c4	60		rts				rts
.98c5					STKLoadCodePosition:
.98c5	a0 01		ldy #$01			ldy 	#1 							; load code pointer back
.98c7					_STKLoadLoop:
.98c7	b1 34		lda ($34),y			lda 	(basicStack),y
.98c9	99 2f 00	sta $002f,y			sta 	safePtr-1,y
.98cc	c8		iny				iny
.98cd	c0 05		cpy #$05			cpy 	#5
.98cf	d0 f6		bne $98c7			bne 	_STKLoadLoop
.98d1	b1 34		lda ($34),y			lda 	(basicStack),y 				; get Y offset
.98d3	a8		tay				tay
.98d4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/setup.asm

.98d5					StackReset:
.98d5	a9 ff		lda #$ff			lda 	#((BasicStackBase+BasicStackSize-1) & $FF)
.98d7	85 34		sta $34				sta 	0+basicStack
.98d9	a9 0f		lda #$0f			lda 	#((BasicStackBase+BasicStackSize-1) >> 8)
.98db	85 35		sta $35				sta 	1+basicStack
.98dd	a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.98df	92 34		sta ($34)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.98e1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/concrete.asm

.a710					StringConcrete:
.a710	5a		phy				phy 								; save position on stack
.a711	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy target string to zTemp1
.a714	85 38		sta $38				sta 	zTemp1
.a716	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.a719	85 39		sta $39				sta 	zTemp1+1
.a71b	a0 ff		ldy #$ff			ldy 	#$FF	 					; calculate string length
.a71d					_SALength:
.a71d	c8		iny				iny
.a71e	b1 38		lda ($38),y			lda 	(zTemp1),y
.a720	d0 fb		bne $a71d			bne 	_SALength
.a722	c0 fd		cpy #$fd			cpy 	#253 						; string too long
.a724	b0 3f		bcs $a765			bcs 	_SALengthError
.a726	98		tya				tya 				 				; length of the new string
.a727	18		clc				clc
.a728	69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.a72a	90 02		bcc $a72e			bcc 	_SAHaveLength
.a72c	a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.a72e					_SAHaveLength:
.a72e	48		pha				pha 								; save length.
.a72f	38		sec				sec
.a730	49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.a732	6d 0e 07	adc $070e			adc 	StringMemory
.a735	8d 0e 07	sta $070e			sta 	StringMemory
.a738	85 3a		sta $3a				sta 	zTemp2 						; update storage address
.a73a	9d 08 06	sta $0608,x			sta 	NSMantissa0,x 				; update mantissa address
.a73d	a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.a73f	6d 0f 07	adc $070f			adc 	StringMemory+1
.a742	8d 0f 07	sta $070f			sta 	StringMemory+1
.a745	85 3b		sta $3b				sta 	zTemp2+1
.a747	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.a74a	68		pla				pla 								; save length-3 (chars allowed) in first byte
.a74b	38		sec				sec
.a74c	e9 03		sbc #$03			sbc 	#3
.a74e	92 3a		sta ($3a)			sta 	(zTemp2)
.a750	a9 00		lda #$00			lda 	#0 							; clear the status byte.
.a752	a0 01		ldy #$01			ldy 	#1
.a754	91 3a		sta ($3a),y			sta 	(zTemp2),y
.a756					_SACopyNewString:
.a756	a0 00		ldy #$00			ldy 	#0
.a758					_SACopyNSLoop:
.a758	b1 38		lda ($38),y			lda 	(zTemp1),y 					; get character
.a75a	c8		iny				iny 								; write two on in string storage
.a75b	c8		iny				iny
.a75c	91 3a		sta ($3a),y			sta 	(zTemp2),y
.a75e	88		dey				dey 								; this makes it one one.
.a75f	c9 00		cmp #$00			cmp 	#0 							; until EOS copied
.a761	d0 f5		bne $a758			bne 	_SACopyNSLoop
.a763	7a		ply				ply
.a764	60		rts				rts
.a765					_SALengthError:
.a765	a9 09		lda #$09		lda	#9
.a767	4c cf 8c	jmp $8ccf		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/stringalloc.asm

.a76a					StringSystemInitialise:
.a76a	a9 ff		lda #$ff			lda 	#((EndVariableSpace-1) & $FF)
.a76c	8d 0e 07	sta $070e			sta 	0+StringMemory
.a76f	a9 1f		lda #$1f			lda 	#((EndVariableSpace-1) >> 8)
.a771	8d 0f 07	sta $070f			sta 	1+StringMemory
.a774	9c ff 1f	stz $1fff			stz 	EndVariableSpace-1 			; put a zero at the end, so know end of string memory.
.a777	60		rts				rts
.a778					StringSpaceInitialise:
.a778	a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.a77a	8d 10 07	sta $0710			sta 	StringInitialised
.a77d	ad 0e 07	lda $070e			lda 	StringMemory 				; allocate 256 bytes for one concreted string
.a780	8d 11 07	sta $0711			sta 	StringTempPointer
.a783	ad 0f 07	lda $070f			lda 	StringMemory+1
.a786	3a		dec a				dec 	a
.a787	8d 12 07	sta $0712			sta 	StringTempPointer+1
.a78a	60		rts				rts
.a78b					StringTempAllocate:
.a78b	c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.a78d	b0 35		bcs $a7c4			bcs 	_STALength
.a78f	2c 10 07	bit $0710			bit 	StringInitialised 			; already initialised
.a792	30 05		bmi $a799			bmi 	_STAAllocate
.a794	48		pha				pha 								; save value to subtract.
.a795	20 78 a7	jsr $a778			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.a798	68		pla				pla 								; restore it
.a799					_STAAllocate:
.a799	49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.a79b	18		clc				clc  								; deliberate allows one more
.a79c	6d 11 07	adc $0711			adc 	StringTempPointer 			; subtract from temp pointer
.a79f	8d 11 07	sta $0711			sta 	StringTempPointer
.a7a2	9d 08 06	sta $0608,x			sta 	NSMantissa0,x 				; address in mantissa
.a7a5	85 3c		sta $3c				sta 	zsTemp 						; and zsTemp
.a7a7	ad 12 07	lda $0712			lda 	StringTempPointer+1
.a7aa	69 ff		adc #$ff			adc 	#$FF
.a7ac	8d 12 07	sta $0712			sta 	StringTempPointer+1
.a7af	85 3d		sta $3d				sta 	zsTemp+1
.a7b1	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.a7b4	9e 18 06	stz $0618,x			stz 	NSMantissa2,x 				; set the typing data
.a7b7	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.a7ba	a9 10		lda #$10			lda 	#NSTString
.a7bc	9d 00 06	sta $0600,x			sta 	NSStatus,x
.a7bf	a9 00		lda #$00			lda 	#0 							; clear the target string
.a7c1	92 3c		sta ($3c)			sta 	(zsTemp)
.a7c3	60		rts				rts
.a7c4					_STALength:
.a7c4	a9 09		lda #$09		lda	#9
.a7c6	4c cf 8c	jmp $8ccf		jmp	ErrorHandler
.a7c9					StringTempWrite:
.a7c9	48		pha				pha
.a7ca	92 3c		sta ($3c)			sta 	(zsTemp)
.a7cc	e6 3c		inc $3c				inc 	zsTemp
.a7ce	d0 02		bne $a7d2			bne 	_STWNoCarry
.a7d0	e6 3d		inc $3d				inc 	zsTemp+1
.a7d2					_STWNoCarry:
.a7d2	a9 00		lda #$00			lda 	#0
.a7d4	92 3c		sta ($3c)			sta 	(zsTemp)
.a7d6	68		pla				pla
.a7d7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/backload.asm

.98e2					BackloadProgram:
.98e2	a2 ff		ldx #$ff			ldx 	#$FF
.98e4	8e fa ff	stx $fffa			stx 	$FFFA 						; fast mode (autorun only)
.98e7	20 11 99	jsr $9911			jsr 	BLReadByte
.98ea	30 1e		bmi $990a			bmi 	_BPExit
.98ec					_BPCopy:
.98ec	e8		inx				inx  								; copy byte in
.98ed	9d 25 08	sta $0825,x			sta 	lineBuffer,x
.98f0	9e 26 08	stz $0826,x			stz 	lineBuffer+1,x
.98f3	20 11 99	jsr $9911			jsr 	BLReadByte 					; read next byte
.98f6	30 0a		bmi $9902			bmi 	_BPEndLine 					; -ve = EOL
.98f8	c9 09		cmp #$09			cmp 	#9 							; handle TAB
.98fa	d0 02		bne $98fe			bne 	_BPNotTab
.98fc	a9 20		lda #$20			lda 	#' '
.98fe					_BPNotTab:
.98fe	c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.9900	b0 ea		bcs $98ec			bcs 	_BPCopy
.9902					_BPEndLine:
.9902	20 2c 9c	jsr $9c2c			jsr 	TokeniseLine 				; tokenise the line.
.9905	20 42 84	jsr $8442			jsr 	EditProgramCode
.9908	80 d8		bra $98e2			bra 	BackloadProgram
.990a					_BPExit:
.990a	9c fa ff	stz $fffa			stz 	$FFFA 						; clear fast mode (autorun only)
.990d	20 d4 84	jsr $84d4			jsr 	ClearCommand 				; clear variables etc.
.9910	60		rts				rts
.9911					BLReadByte:
.9911					_BLLoad:
.9911	ad 00 30	lda $3000			lda 	$3000 						; hardcoded in the makefile.
.9914	ee 12 99	inc $9912			inc 	_BLLoad+1
.9917	d0 03		bne $991c			bne 	_BLNoCarry
.9919	ee 13 99	inc $9913			inc 	_BLLoad+2
.991c					_BLNoCarry:
.991c	c9 00		cmp #$00			cmp 	#0
.991e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/searchtokens.asm

.991f					TokeniseSearchTable:
.991f	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token.
.9921	85 36		sta $36				sta 	zTemp0
.9923	a0 00		ldy #$00			ldy 	#0
.9925	a9 80		lda #$80			lda 	#$80 						; token #
.9927	85 38		sta $38				sta 	zTemp1
.9929					_TSTLoop:
.9929	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.992b	30 49		bmi $9976			bmi 	_TSTFail 					; -ve = end of table
.992d	f0 2e		beq $995d			beq 	_TSTNext 					; zero, check next it's a dummy
.992f	c8		iny				iny 								; get the hash
.9930	b1 36		lda ($36),y			lda 	(zTemp0),y
.9932	88		dey				dey
.9933	cd 03 07	cmp $0703			cmp 	identHash 					; check they match, if not go to next
.9936	d0 25		bne $995d			bne 	_TSTNext
.9938	ad 02 07	lda $0702			lda 	identTypeEnd 				; length of identifier
.993b	38		sec				sec
.993c	ed 00 07	sbc $0700			sbc 	identStart
.993f	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; no match, then return.
.9941	d0 1a		bne $995d			bne 	_TSTNext
.9943	5a		phy				phy 								; save Y , we might fail
.9944	c8		iny				iny 								; point to text
.9945	c8		iny				iny
.9946	ae 00 07	ldx $0700			ldx 	identStart 					; offset in line buffer in X
.9949					_TSTCompareName:
.9949	bd 25 08	lda $0825,x			lda 	lineBuffer,x 				; compare text.
.994c	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.994e	d0 0c		bne $995c			bne 	_TSTNextPullY 				; fail, pullY and do next
.9950	e8		inx				inx
.9951	c8		iny				iny
.9952	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; complete match.
.9955	d0 f2		bne $9949			bne 	_TSTCompareName
.9957	7a		ply				ply 								; throw Y
.9958	a5 38		lda $38				lda 	zTemp1 						; get token #
.995a	38		sec				sec 								; return with CS = passed.
.995b	60		rts				rts
.995c					_TSTNextPullY:
.995c	7a		ply				ply 								; restore current, fall through.
.995d					_TSTNext:
.995d	e6 38		inc $38				inc 	zTemp1 						; token counter
.995f	98		tya				tya
.9960	18		clc				clc
.9961	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.9963	1a		inc a				inc 	a 							; +1
.9964	1a		inc a				inc 	a 							; +2
.9965	a8		tay				tay
.9966	10 c1		bpl $9929			bpl 	_TSTLoop 					; if Y < $80 loop back
.9968	98		tya				tya 								; add Y to zTemp0 and reset Y
.9969	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.996b	18		clc				clc  								; but have tables > 255 bytes
.996c	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.996e	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.9970	90 b7		bcc $9929			bcc 	_TSTLoop
.9972	e6 37		inc $37				inc 	zTemp0+1
.9974	80 b3		bra $9929			bra 	_TSTLoop
.9976					_TSTFail:
.9976	18		clc				clc
.9977	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/tokenise.asm


;******  Processing file: ./common/tokeniser/../generated/kwdtext.dat

.9978					KeywordSet0:
>9978	00 65					.text	0,$65,""               ; $80 !0:EOF
>997a	00 58					.text	0,$58,""               ; $81 !1:SH1
>997c	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>997e	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $83 ABS(
>9984	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $84 ALLOC(
>998c	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $85 ASC(
>9992	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $86 CHR$(
>9999	05 6b 46 41 4c 53 45			.text	5,$6b,"FALSE"          ; $87 FALSE
>99a0	05 44 46 52 41 43 28			.text	5,$44,"FRAC("          ; $88 FRAC(
>99a7	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $89 INT(
>99ad	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $8a ISVAL(
>99b5	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $8b LEFT$(
>99bd	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $8c LEN(
>99c3	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $8d MID$(
>99ca	04 19 4e 4f 54 28			.text	4,$19,"NOT("           ; $8e NOT(
>99d0	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $8f RIGHT$(
>99d8	28
>99d9	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $90 RND(
>99df	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $91 SGN(
>99e5	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $92 SPC(
>99eb	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $93 STR$(
>99f2	04 40 54 52 55 45			.text	4,$40,"TRUE"           ; $94 TRUE
>99f8	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $95 VAL(
>99fe	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $96 FOR
>9a03	02 8f 49 46				.text	2,$8f,"IF"             ; $97 IF
>9a07	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $98 PROC
>9a0d	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $99 REPEAT
>9a15	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $9a WHILE
>9a1c	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $9b ENDIF
>9a23	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $9c ENDPROC
>9a2b	43
>9a2c	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $9d NEXT
>9a32	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $9e THEN
>9a38	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $9f UNTIL
>9a3f	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $a0 WEND
>9a45	04 1c 43 41 4c 4c			.text	4,$1c,"CALL"           ; $a1 CALL
>9a4b	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $a2 CLS
>9a50	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $a3 DATA
>9a56	03 da 44 49 4d				.text	3,$da,"DIM"            ; $a4 DIM
>9a5b	06 db 44 4f 57 4e 54 4f			.text	6,$db,"DOWNTO"         ; $a5 DOWNTO
>9a63	04 29 45 4c 53 45			.text	4,$29,"ELSE"           ; $a6 ELSE
>9a69	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $a7 GOSUB
>9a70	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $a8 GOTO
>9a76	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $a9 LET
>9a7b	05 6b 4c 4f 43 41 4c			.text	5,$6b,"LOCAL"          ; $aa LOCAL
>9a82	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $ab PRINT
>9a89	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $ac READ
>9a8f	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $ad REM
>9a94	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $ae RETURN
>9a9c	02 a3 54 4f				.text	2,$a3,"TO"             ; $af TO
>9aa0	ff					.text	$FF
.9aa1					KeywordSet1:
>9aa1	00 65					.text	0,$65,""               ; $80 !0:EOF
>9aa3	00 58					.text	0,$58,""               ; $81 !1:SH1
>9aa5	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>9aa7	08 4c 41 53 53 45 4d 42			.text	8,$4c,"ASSEMBLE"       ; $83 ASSEMBLE
>9aaf	4c 45
>9ab1	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $84 ASSERT
>9ab9	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $85 CLEAR
>9ac0	03 d7 45 4e 44				.text	3,$d7,"END"            ; $86 END
>9ac5	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $87 LIST
>9acb	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $88 NEW
>9ad0	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $89 RESTORE
>9ad8	45
>9ad9	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $8a RUN
>9ade	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $8b STOP
>9ae4	ff					.text	$FF
.9ae5					KeywordSet2:
>9ae5	00 65					.text	0,$65,""               ; $80 !0:EOF
>9ae7	00 58					.text	0,$58,""               ; $81 !1:SH1
>9ae9	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>9aeb	03 c8 41 44 43				.text	3,$c8,"ADC"            ; $83 ADC
>9af0	03 d3 41 4e 44				.text	3,$d3,"AND"            ; $84 AND
>9af5	03 e0 41 53 4c				.text	3,$e0,"ASL"            ; $85 ASL
>9afa	03 c8 42 43 43				.text	3,$c8,"BCC"            ; $86 BCC
>9aff	03 d8 42 43 53				.text	3,$d8,"BCS"            ; $87 BCS
>9b04	03 d8 42 45 51				.text	3,$d8,"BEQ"            ; $88 BEQ
>9b09	03 df 42 49 54				.text	3,$df,"BIT"            ; $89 BIT
>9b0e	03 d8 42 4d 49				.text	3,$d8,"BMI"            ; $8a BMI
>9b13	03 d5 42 4e 45				.text	3,$d5,"BNE"            ; $8b BNE
>9b18	03 de 42 50 4c				.text	3,$de,"BPL"            ; $8c BPL
>9b1d	03 d5 42 52 41				.text	3,$d5,"BRA"            ; $8d BRA
>9b22	03 df 42 52 4b				.text	3,$df,"BRK"            ; $8e BRK
>9b27	03 db 42 56 43				.text	3,$db,"BVC"            ; $8f BVC
>9b2c	03 eb 42 56 53				.text	3,$eb,"BVS"            ; $90 BVS
>9b31	03 d2 43 4c 43				.text	3,$d2,"CLC"            ; $91 CLC
>9b36	03 d3 43 4c 44				.text	3,$d3,"CLD"            ; $92 CLD
>9b3b	03 d8 43 4c 49				.text	3,$d8,"CLI"            ; $93 CLI
>9b40	03 e5 43 4c 56				.text	3,$e5,"CLV"            ; $94 CLV
>9b45	03 e0 43 4d 50				.text	3,$e0,"CMP"            ; $95 CMP
>9b4a	03 eb 43 50 58				.text	3,$eb,"CPX"            ; $96 CPX
>9b4f	03 ec 43 50 59				.text	3,$ec,"CPY"            ; $97 CPY
>9b54	03 cc 44 45 43				.text	3,$cc,"DEC"            ; $98 DEC
>9b59	03 e1 44 45 58				.text	3,$e1,"DEX"            ; $99 DEX
>9b5e	03 e2 44 45 59				.text	3,$e2,"DEY"            ; $9a DEY
>9b63	03 e6 45 4f 52				.text	3,$e6,"EOR"            ; $9b EOR
>9b68	03 da 49 4e 43				.text	3,$da,"INC"            ; $9c INC
>9b6d	03 ef 49 4e 58				.text	3,$ef,"INX"            ; $9d INX
>9b72	03 f0 49 4e 59				.text	3,$f0,"INY"            ; $9e INY
>9b77	03 e7 4a 4d 50				.text	3,$e7,"JMP"            ; $9f JMP
>9b7c	03 ef 4a 53 52				.text	3,$ef,"JSR"            ; $a0 JSR
>9b81	03 d1 4c 44 41				.text	3,$d1,"LDA"            ; $a1 LDA
>9b86	03 e8 4c 44 58				.text	3,$e8,"LDX"            ; $a2 LDX
>9b8b	03 e9 4c 44 59				.text	3,$e9,"LDY"            ; $a3 LDY
>9b90	03 f1 4c 53 52				.text	3,$f1,"LSR"            ; $a4 LSR
>9b95	03 ed 4e 4f 50				.text	3,$ed,"NOP"            ; $a5 NOP
>9b9a	03 e2 4f 52 41				.text	3,$e2,"ORA"            ; $a6 ORA
>9b9f	03 d9 50 48 41				.text	3,$d9,"PHA"            ; $a7 PHA
>9ba4	03 e8 50 48 50				.text	3,$e8,"PHP"            ; $a8 PHP
>9ba9	03 f0 50 48 58				.text	3,$f0,"PHX"            ; $a9 PHX
>9bae	03 f1 50 48 59				.text	3,$f1,"PHY"            ; $aa PHY
>9bb3	03 dd 50 4c 41				.text	3,$dd,"PLA"            ; $ab PLA
>9bb8	03 ec 50 4c 50				.text	3,$ec,"PLP"            ; $ac PLP
>9bbd	03 f4 50 4c 58				.text	3,$f4,"PLX"            ; $ad PLX
>9bc2	03 f5 50 4c 59				.text	3,$f5,"PLY"            ; $ae PLY
>9bc7	03 ed 52 4f 4c				.text	3,$ed,"ROL"            ; $af ROL
>9bcc	03 f3 52 4f 52				.text	3,$f3,"ROR"            ; $b0 ROR
>9bd1	03 ef 52 54 49				.text	3,$ef,"RTI"            ; $b1 RTI
>9bd6	03 f9 52 54 53				.text	3,$f9,"RTS"            ; $b2 RTS
>9bdb	03 d8 53 42 43				.text	3,$d8,"SBC"            ; $b3 SBC
>9be0	03 db 53 45 43				.text	3,$db,"SEC"            ; $b4 SEC
>9be5	03 dc 53 45 44				.text	3,$dc,"SED"            ; $b5 SED
>9bea	03 e1 53 45 49				.text	3,$e1,"SEI"            ; $b6 SEI
>9bef	03 e8 53 54 41				.text	3,$e8,"STA"            ; $b7 STA
>9bf4	03 ff 53 54 58				.text	3,$ff,"STX"            ; $b8 STX
>9bf9	03 00 53 54 59				.text	3,$00,"STY"            ; $b9 STY
>9bfe	03 01 53 54 5a				.text	3,$01,"STZ"            ; $ba STZ
>9c03	03 ed 54 41 58				.text	3,$ed,"TAX"            ; $bb TAX
>9c08	03 ee 54 41 59				.text	3,$ee,"TAY"            ; $bc TAY
>9c0d	03 e8 54 52 42				.text	3,$e8,"TRB"            ; $bd TRB
>9c12	03 e9 54 53 42				.text	3,$e9,"TSB"            ; $be TSB
>9c17	03 ff 54 53 58				.text	3,$ff,"TSX"            ; $bf TSX
>9c1c	03 ed 54 58 41				.text	3,$ed,"TXA"            ; $c0 TXA
>9c21	03 ff 54 58 53				.text	3,$ff,"TXS"            ; $c1 TXS
>9c26	03 ee 54 59 41				.text	3,$ee,"TYA"            ; $c2 TYA
>9c2b	ff					.text	$FF

;******  Return to file: ./common/tokeniser/tokenise.asm

.9c2c					TokeniseLine:
.9c2c	20 b4 9d	jsr $9db4			jsr 	FixLineBufferCase 			; fix line case
.9c2f	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.9c31	8d 25 07	sta $0725			sta 	tokenOffset
.9c34	9c 26 07	stz $0726			stz 	tokenLineNumber
.9c37	9c 27 07	stz $0727			stz 	tokenLineNumber+1
.9c3a	a2 ff		ldx #$ff			ldx 	#$FF
.9c3c					_TKFindFirst:
.9c3c	e8		inx				inx
.9c3d	bd 25 08	lda $0825,x			lda 	lineBuffer,x
.9c40	f0 79		beq $9cbb			beq 	_TKExit
.9c42	c9 20		cmp #$20			cmp 	#' '
.9c44	90 f6		bcc $9c3c			bcc 	_TKFindFirst
.9c46	c9 30		cmp #$30			cmp 	#'0'
.9c48	90 07		bcc $9c51			bcc 	_TKNoLineNumber
.9c4a	c9 3a		cmp #$3a			cmp 	#'9'+1
.9c4c	b0 03		bcs $9c51			bcs 	_TKNoLineNumber
.9c4e	20 de 9d	jsr $9dde			jsr 	TokeniseExtractLineNumber
.9c51					_TKNoLineNumber:
.9c51					_TKTokeniseLoop:
.9c51	bd 25 08	lda $0825,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.9c54	f0 65		beq $9cbb			beq 	_TKExit
.9c56	e8		inx				inx
.9c57	c9 20		cmp #$20			cmp 	#' '
.9c59	f0 f6		beq $9c51			beq 	_TKTokeniseLoop 			; keep looping if space found.
.9c5b	ca		dex				dex 								; undo last get, A contains character, X is position.
.9c5c	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.9c5e	f0 61		beq $9cc1			beq 	_TKTokeniseIdentifier
.9c60	c9 41		cmp #$41			cmp 	#'A'
.9c62	90 04		bcc $9c68			bcc 	_TKTokenisePunctuation
.9c64	c9 5b		cmp #$5b			cmp 	#'Z'+1
.9c66	90 59		bcc $9cc1			bcc 	_TKTokeniseIdentifier
.9c68					_TKTokenisePunctuation:
.9c68	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.9c6a	f0 27		beq $9c93			beq 	_TKString
.9c6c	c9 24		cmp #$24			cmp 	#'$'						; hexadecimal constant (# only appears at end of identifiers)
.9c6e	f0 28		beq $9c98			beq 	_TKHexConstant
.9c70	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers.
.9c72	f0 29		beq $9c9d			beq 	_TKCheckDouble
.9c74	c9 3e		cmp #$3e			cmp 	#'>'
.9c76	f0 25		beq $9c9d			beq 	_TKCheckDouble
.9c78					_TKStandardPunctuation:
.9c78	bd 25 08	lda $0825,x			lda 	lineBuffer,x 				; get it back.
.9c7b	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.9c7d	90 0e		bcc $9c8d			bcc 	_TKNoShift
.9c7f	48		pha				pha 								; save
.9c80	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.9c82	85 36		sta $36				sta 	zTemp0
.9c84	68		pla				pla
.9c85	29 20		and #$20			and 	#32 						; bit 5
.9c87	4a		lsr a				lsr 	a 							; shift into bit 3
.9c88	4a		lsr a				lsr 	a
.9c89	05 36		ora $36				ora 	zTemp0
.9c8b	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.9c8d					_TKNoShift:
.9c8d	20 23 9e	jsr $9e23			jsr 	TokeniseWriteByte 			; write the punctuation character
.9c90	e8		inx				inx 								; consume the character
.9c91	80 be		bra $9c51			bra 	_TKTokeniseLoop 			; and loop round again.
.9c93					_TKString:
.9c93	20 43 9d	jsr $9d43			jsr 	TokeniseString
.9c96	80 b9		bra $9c51			bra 	_TKTokeniseLoop
.9c98					_TKHexConstant:
.9c98	20 7e 9d	jsr $9d7e			jsr 	TokeniseHexConstant
.9c9b	80 b4		bra $9c51			bra 	_TKTokeniseLoop
.9c9d					_TKCheckDouble:
.9c9d	bd 26 08	lda $0826,x			lda 	lineBuffer+1,x 				; get next character
.9ca0	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.9ca2	90 d4		bcc $9c78			bcc 	_TKStandardPunctuation
.9ca4	c9 3f		cmp #$3f			cmp 	#'>'+1
.9ca6	b0 d0		bcs $9c78			bcs 	_TKStandardPunctuation
.9ca8	bd 25 08	lda $0825,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.9cab	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.9cad	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.9cae	7d 26 08	adc $0826,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.9cb1	38		sec				sec
.9cb2	e9 3c		sbc #$3c			sbc 	#'<'
.9cb4	20 23 9e	jsr $9e23			jsr 	TokeniseWriteByte 			; this is in the range 0-7
.9cb7	e8		inx				inx 								; consume both
.9cb8	e8		inx				inx
.9cb9	80 96		bra $9c51			bra 	_TKTokeniseLoop
.9cbb	a9 80		lda #$80	_TKExit:lda 	#KWC_EOL 					; write end of line byte
.9cbd	20 23 9e	jsr $9e23			jsr 	TokeniseWriteByte
.9cc0	60		rts				rts
.9cc1					_TKTokeniseIdentifier:
.9cc1	8e 00 07	stx $0700			stx 	identStart 					; save start
.9cc4	9c 04 07	stz $0704			stz 	identTypeByte 				; zero the type byte
.9cc7					_TKCheckLoop:
.9cc7	e8		inx				inx 								; look at next, we know first is identifier.
.9cc8	bd 25 08	lda $0825,x			lda  	lineBuffer,x
.9ccb	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.9ccd	f0 f8		beq $9cc7			beq 	_TKCheckLoop
.9ccf	c9 30		cmp #$30			cmp	 	#"0"
.9cd1	90 0c		bcc $9cdf			bcc 	_TKEndIdentifier
.9cd3	c9 3a		cmp #$3a			cmp 	#"9"+1
.9cd5	90 f0		bcc $9cc7			bcc 	_TKCheckLoop
.9cd7	c9 41		cmp #$41			cmp	 	#"A"
.9cd9	90 04		bcc $9cdf			bcc 	_TKEndIdentifier
.9cdb	c9 5b		cmp #$5b			cmp 	#"Z"+1
.9cdd	90 e8		bcc $9cc7			bcc 	_TKCheckLoop
.9cdf					_TKEndIdentifier:
.9cdf	8e 01 07	stx $0701			stx 	identTypeStart 				; save start of type text (if any !)
.9ce2	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.9ce4	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.9ce6	f0 06		beq $9cee			beq 	_TKHasTypeCharacter
.9ce8	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.9cea	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.9cec	d0 07		bne $9cf5			bne 	_TKNoTypeCharacter
.9cee					_TKHasTypeCharacter:
.9cee	8c 04 07	sty $0704			sty 	identTypeByte 				; has # or $, save the type
.9cf1	e8		inx				inx 								; read next
.9cf2	bd 25 08	lda $0825,x			lda 	lineBuffer,x
.9cf5					_TKNoTypeCharacter:
.9cf5	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.9cf7	d0 09		bne $9d02			bne 	_TKNoArray
.9cf9	e8		inx				inx 								; skip the (
.9cfa	ad 04 07	lda $0704			lda 	identTypeByte 				; set bit 2 (e.g. array)
.9cfd	09 04		ora #$04			ora 	#$04
.9cff	8d 04 07	sta $0704			sta 	identTypeByte
.9d02					_TKNoArray:
.9d02	8e 02 07	stx $0702			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.9d05	20 9f 9d	jsr $9d9f			jsr 	TokeniseCalculateHash 		; calculate the has for those tokens
.9d08	a0 99		ldy #$99			ldy 	#(KeywordSet0) >> 8
.9d0a	a9 78		lda #$78			lda 	#(KeywordSet0) & $FF
.9d0c	20 1f 99	jsr $991f			jsr 	TokeniseSearchTable
.9d0f	a2 00		ldx #$00			ldx 	#0
.9d11	b0 1f		bcs $9d32			bcs 	_TKFoundToken
.9d13	a0 9a		ldy #$9a			ldy 	#(KeywordSet1) >> 8
.9d15	a9 a1		lda #$a1			lda 	#(KeywordSet1) & $FF
.9d17	20 1f 99	jsr $991f			jsr 	TokeniseSearchTable
.9d1a	a2 81		ldx #$81			ldx 	#$81
.9d1c	b0 14		bcs $9d32			bcs 	_TKFoundToken
.9d1e	a0 9a		ldy #$9a			ldy 	#(KeywordSet2) >> 8
.9d20	a9 e5		lda #$e5			lda 	#(KeywordSet2) & $FF
.9d22	20 1f 99	jsr $991f			jsr 	TokeniseSearchTable
.9d25	a2 82		ldx #$82			ldx 	#$82
.9d27	b0 09		bcs $9d32			bcs 	_TKFoundToken
.9d29	20 2f 9e	jsr $9e2f			jsr 	CheckCreateVariableRecord 	; failed all, it's a variable, create record if does not exist.
.9d2c	ae 02 07	ldx $0702			ldx 	identTypeEnd 				; X points to following byte
.9d2f	4c 51 9c	jmp $9c51			jmp 	_TKTokeniseLoop 			; and go round again.
.9d32					_TKFoundToken:
.9d32	48		pha				pha 								; save token
.9d33	8a		txa				txa 								; shift in X, is there one ?
.9d34	f0 03		beq $9d39			beq 	_TKNoTShift
.9d36	20 23 9e	jsr $9e23			jsr 	TokeniseWriteByte 			; if so, write it out
.9d39					_TKNoTShift:
.9d39	68		pla				pla 								; restore and write token
.9d3a	20 23 9e	jsr $9e23			jsr 	TokeniseWriteByte
.9d3d	ae 02 07	ldx $0702			ldx 	identTypeEnd 				; X points to following byte
.9d40	4c 51 9c	jmp $9c51			jmp 	_TKTokeniseLoop 			; and go round again.
.9d43					TokeniseString:
.9d43	a9 ff		lda #$ff			lda 	#KWC_STRING 				; string token.
.9d45	20 23 9e	jsr $9e23			jsr 	TokeniseWriteByte
.9d48	e8		inx				inx									; start of quoted string.
.9d49	da		phx				phx 								; push start of string on top
.9d4a	ca		dex				dex
.9d4b					_TSFindEnd:
.9d4b	e8		inx				inx
.9d4c	bd 25 08	lda $0825,x			lda 	lineBuffer,x 				; next character
.9d4f	f0 04		beq $9d55			beq 	_TSEndOfString
.9d51	c9 22		cmp #$22			cmp 	#'"'
.9d53	d0 f6		bne $9d4b			bne 	_TSFindEnd
.9d55					_TSEndOfString:
.9d55	7a		ply				ply  								; so now Y is first character, X is character after end.
.9d56	48		pha				pha 								; save terminating character
.9d57	20 5f 9d	jsr $9d5f			jsr 	TOWriteBlockXY 				; write X to Y as a data block
.9d5a	68		pla				pla 								; terminating character
.9d5b	f0 01		beq $9d5e			beq 	_TSNotQuote					; if it wasn't EOS skip it
.9d5d	e8		inx				inx
.9d5e					_TSNotQuote:
.9d5e	60		rts				rts
.9d5f					TOWriteBlockXY:
.9d5f	86 36		stx $36				stx 	zTemp0 						; write end character
.9d61	98		tya				tya
.9d62	49 ff		eor #$ff			eor 	#$FF
.9d64	38		sec				sec
.9d65	65 36		adc $36				adc 	zTemp0
.9d67	1a		inc a				inc 	a 							; one extra for NULL
.9d68	20 23 9e	jsr $9e23			jsr 	TokeniseWriteByte
.9d6b					_TOBlockLoop:
.9d6b	c4 36		cpy $36				cpy 	zTemp0
.9d6d	f0 09		beq $9d78			beq 	_TOBlockExit
.9d6f	b9 25 08	lda $0825,y			lda 	lineBuffer,y
.9d72	20 23 9e	jsr $9e23			jsr 	TokeniseWriteByte
.9d75	c8		iny				iny
.9d76	80 f3		bra $9d6b			bra 	_TOBlockLoop
.9d78					_TOBlockExit:
.9d78	a9 00		lda #$00			lda 	#0
.9d7a	20 23 9e	jsr $9e23			jsr 	TokeniseWriteByte
.9d7d	60		rts				rts
.9d7e					TokeniseHexConstant:
.9d7e	a9 fe		lda #$fe			lda 	#KWC_HEXCONST 				; hex constant token.
.9d80	20 23 9e	jsr $9e23			jsr 	TokeniseWriteByte
.9d83	e8		inx				inx									; start of quoted string.
.9d84	da		phx				phx 								; push start of constant on top
.9d85	ca		dex				dex
.9d86					_THFindLoop:
.9d86	e8		inx				inx
.9d87	bd 25 08	lda $0825,x			lda 	lineBuffer,x
.9d8a	c9 30		cmp #$30			cmp 	#"0"
.9d8c	90 0c		bcc $9d9a			bcc 	_THFoundEnd
.9d8e	c9 3a		cmp #$3a			cmp 	#"9"+1
.9d90	90 f4		bcc $9d86			bcc 	_THFindLoop
.9d92	c9 41		cmp #$41			cmp 	#"A"
.9d94	90 04		bcc $9d9a			bcc 	_THFoundEnd
.9d96	c9 47		cmp #$47			cmp 	#"F"+1
.9d98	90 ec		bcc $9d86			bcc 	_THFindLoop
.9d9a					_THFoundEnd:
.9d9a	7a		ply				ply 								; restore start
.9d9b	20 5f 9d	jsr $9d5f			jsr 	TOWriteBlockXY 				; output the block
.9d9e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/utility.asm

.9d9f					TokeniseCalculateHash:
.9d9f	da		phx				phx
.9da0	ae 00 07	ldx $0700			ldx 	identStart 					; needs to be same as in tokens.py - simple sum
.9da3	a9 00		lda #$00			lda 	#0
.9da5					_TCHLoop:
.9da5	18		clc				clc
.9da6	7d 25 08	adc $0825,x			adc 	lineBuffer,x
.9da9	e8		inx				inx
.9daa	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.9dad	d0 f6		bne $9da5			bne 	_TCHLoop
.9daf	8d 03 07	sta $0703			sta 	identHash 					; save the hash
.9db2	fa		plx				plx
.9db3	60		rts				rts
.9db4					FixLineBufferCase:
.9db4	a2 00		ldx #$00			ldx 	#0
.9db6					_FLBCLoop:
.9db6	bd 25 08	lda $0825,x			lda 	lineBuffer,x 				; get next character
.9db9	f0 22		beq $9ddd			beq 	_FLBCExit 					; end of string.
.9dbb	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.9dbd	f0 11		beq $9dd0			beq 	_FLBCInQuotes
.9dbf	e8		inx				inx
.9dc0	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.9dc2	90 f2		bcc $9db6			bcc 	_FLBCLoop
.9dc4	c9 7b		cmp #$7b			cmp 	#'z'+1
.9dc6	b0 ee		bcs $9db6			bcs 	_FLBCLoop
.9dc8	38		sec				sec 								; make U/C
.9dc9	e9 20		sbc #$20			sbc 	#32
.9dcb	9d 24 08	sta $0824,x			sta	 	lineBuffer-1,x 				; write back
.9dce	80 e6		bra $9db6			bra 	_FLBCLoop
.9dd0					_FLBCInQuotes:
.9dd0	e8		inx				inx 								; advance
.9dd1	bd 25 08	lda $0825,x			lda 	lineBuffer,x 				; get next
.9dd4	f0 07		beq $9ddd			beq 	_FLBCExit 					; exit on EOS
.9dd6	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.9dd8	d0 f6		bne $9dd0			bne 	_FLBCInQuotes
.9dda	e8		inx				inx 								; skip over it
.9ddb	80 d9		bra $9db6			bra 	_FLBCLoop
.9ddd					_FLBCExit:
.9ddd	60		rts				rts
.9dde					TokeniseExtractLineNumber:
.9dde	ad 27 07	lda $0727			lda 	tokenLineNumber+1 			; push current value on stack
.9de1	48		pha				pha
.9de2	ad 26 07	lda $0726			lda 	tokenLineNumber
.9de5	48		pha				pha
.9de6	20 1c 9e	jsr $9e1c			jsr 	_TELNTimes2 				; line # x 4
.9de9	20 1c 9e	jsr $9e1c			jsr 	_TELNTimes2 				; line # x 2
.9dec	18		clc				clc 								; add stacked value
.9ded	68		pla				pla
.9dee	6d 26 07	adc $0726			adc 	tokenLineNumber
.9df1	8d 26 07	sta $0726			sta 	tokenLineNumber
.9df4	68		pla				pla
.9df5	6d 27 07	adc $0727			adc 	tokenLineNumber+1
.9df8	8d 27 07	sta $0727			sta 	tokenLineNumber+1 			; line # x 5
.9dfb	20 1c 9e	jsr $9e1c			jsr 	_TELNTimes2 				; line # x 10
.9dfe	bd 25 08	lda $0825,x			lda 	lineBuffer,x 				; get and consume character
.9e01	e8		inx				inx
.9e02	29 0f		and #$0f			and 	#15 						; add to line #
.9e04	18		clc				clc
.9e05	6d 26 07	adc $0726			adc 	tokenLineNumber
.9e08	8d 26 07	sta $0726			sta 	tokenLineNumber
.9e0b	90 03		bcc $9e10			bcc 	_TLENNoCarry
.9e0d	ee 27 07	inc $0727			inc 	tokenLineNumber+1
.9e10					_TLENNoCarry:
.9e10	bd 25 08	lda $0825,x			lda 	lineBuffer,x 				; more digits ?
.9e13	c9 30		cmp #$30			cmp 	#'0'
.9e15	90 04		bcc $9e1b			bcc 	_TLENExit
.9e17	c9 3a		cmp #$3a			cmp 	#'9'+1
.9e19	90 c3		bcc $9dde			bcc 	TokeniseExtractLineNumber
.9e1b					_TLENExit:
.9e1b	60		rts				rts
.9e1c					_TELNTimes2:
.9e1c	0e 26 07	asl $0726			asl 	tokenLineNumber
.9e1f	2e 27 07	rol $0727			rol 	tokenLineNumber+1
.9e22	60		rts				rts
.9e23					TokeniseWriteByte:
.9e23	da		phx				phx
.9e24	ae 25 07	ldx $0725			ldx 	tokenOffset 				; next slot to write to
.9e27	9d 25 07	sta $0725,x			sta 	tokenOffset,x 				; write byte out
.9e2a	ee 25 07	inc $0725			inc 	tokenOffset 				; advance slot.
.9e2d	fa		plx				plx
.9e2e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/variablerecord.asm

.9e2f					CheckCreateVariableRecord:
.9e2f	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.9e31	85 36		sta $36				sta 	0+zTemp0
.9e33	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.9e35	85 37		sta $37				sta 	1+zTemp0
.9e37					_CCVSearch:
.9e37	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.9e39	f0 2c		beq $9e67			beq 	_CCVFail
.9e3b	a0 01		ldy #$01			ldy 	#1 							; read the hash
.9e3d	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.9e3f	cd 03 07	cmp $0703			cmp 	identHash
.9e42	d0 16		bne $9e5a			bne 	_CCVNext
.9e44	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.9e46	ae 00 07	ldx $0700			ldx 	identStart
.9e49					_CCVCompare:
.9e49	bd 25 08	lda $0825,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.9e4c	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.9e4e	e8		inx				inx 								; advance pointers
.9e4f	c8		iny				iny
.9e50	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.9e51	d0 07		bne $9e5a			bne 	_CCVNext  					; didn't match go to next.
.9e53	90 f4		bcc $9e49			bcc 	_CCVCompare 				; not finished yet.
.9e55	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; matched whole thing ?
.9e58	f0 41		beq $9e9b			beq 	_CCVFound 					; yes, we were successful
.9e5a					_CCVNext:
.9e5a	18		clc				clc
.9e5b	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.9e5d	65 36		adc $36				adc 	zTemp0
.9e5f	85 36		sta $36				sta 	zTemp0
.9e61	90 d4		bcc $9e37			bcc 	_CCVSearch
.9e63	e6 37		inc $37				inc 	zTemp0+1
.9e65	80 d0		bra $9e37			bra 	_CCVSearch
.9e67					_CCVFail:
.9e67	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.9e69	ad 03 07	lda $0703			lda 	identHash
.9e6c	91 36		sta ($36),y			sta 	(zTemp0),y
.9e6e	c8		iny				iny 								; offset 2 is the type byte
.9e6f	ad 04 07	lda $0704			lda 	identTypeByte
.9e72	91 36		sta ($36),y			sta 	(zTemp0),y
.9e74	c8		iny				iny
.9e75					_CCVData:
.9e75	a9 00		lda #$00			lda 	#0 							; erase data 3-7
.9e77	91 36		sta ($36),y			sta 	(zTemp0),y
.9e79	c8		iny				iny
.9e7a	c0 08		cpy #$08			cpy 	#8
.9e7c	90 f7		bcc $9e75			bcc 	_CCVData
.9e7e	ae 00 07	ldx $0700			ldx 	identStart 					; copy name into 8 on.
.9e81					_CCVCopyName:
.9e81	bd 25 08	lda $0825,x			lda 	lineBuffer,x
.9e84	91 36		sta ($36),y			sta 	(zTemp0),y
.9e86	e8		inx				inx
.9e87	c8		iny				iny
.9e88	ec 02 07	cpx $0702			cpx 	identTypeEnd
.9e8b	d0 f4		bne $9e81			bne 	_CCVCopyName
.9e8d	98		tya				tya 								; patch offset
.9e8e	92 36		sta ($36)			sta 	(zTemp0)
.9e90	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.9e92	91 36		sta ($36),y			sta 	(zTemp0),y
.9e94	88		dey				dey
.9e95	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.9e97	09 80		ora #$80			ora 	#$80
.9e99	91 36		sta ($36),y			sta 	(zTemp0),y
.9e9b					_CCVFound:
.9e9b	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.9e9d	38		sec				sec
.9e9e	e9 10		sbc #$10			sbc 	#(VariableSpace >> 8) 		; offset from the start
.9ea0	09 40		ora #$40			ora 	#$40 						; make it a writeable token
.9ea2	20 23 9e	jsr $9e23			jsr 	TokeniseWriteByte
.9ea5	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.9ea7	20 23 9e	jsr $9e23			jsr 	TokeniseWriteByte
.9eaa	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./variants/hardware/junior/extern.asm

.a7d8					EXTPrintCharacter:
.a7d8	48		pha				pha
.a7d9	da		phx				phx
.a7da	5a		phy				phy
.a7db	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.a7de	7a		ply				ply
.a7df	fa		plx				plx
.a7e0	68		pla				pla
.a7e1	60		rts				rts
.a7e2					EXTInputSingleCharacter:
.a7e2	da		phx				phx
.a7e3	5a		phy				phy
.a7e4					_EISCWait:
.a7e4	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.a7e7	c9 00		cmp #$00			cmp 	#0
.a7e9	f0 f9		beq $a7e4			beq 	_EISCWait
.a7eb	7a		ply				ply
.a7ec	fa		plx				plx
.a7ed	60		rts				rts
.a7ee					EXTInputLine:
.a7ee	a2 00		ldx #$00			ldx 	#0 							; position in line <- start of line
.a7f0					_ILLoop:
.a7f0	da		phx				phx 								; read character in
.a7f1	20 cf ff	jsr $ffcf			jsr 	$FFCF
.a7f4	fa		plx				plx
.a7f5	c9 08		cmp #$08			cmp 	#8 							; backspace, CBM doesn't need this.
.a7f7	f0 12		beq $a80b			beq 	_ILBackspace
.a7f9	c9 0d		cmp #$0d			cmp 	#13							; exit ?
.a7fb	f0 15		beq $a812			beq 	_ILExit
.a7fd	c9 20		cmp #$20			cmp 	#32 						; ignore other control
.a7ff	90 ef		bcc $a7f0			bcc 	_ILLoop
.a801	e0 50		cpx #$50			cpx 	#MaxLineSize 				; already full buffer
.a803	f0 eb		beq $a7f0			beq 	_ILLoop
.a805	9d 25 08	sta $0825,x			sta 	lineBuffer,x 				; save it
.a808	e8		inx				inx
.a809	80 e5		bra $a7f0			bra 	_ILLoop
.a80b					_ILBackspace:
.a80b	e0 00		cpx #$00			cpx 	#0  						; can't backspace, start of line.
.a80d	f0 e1		beq $a7f0			beq 	_ILLoop
.a80f	ca		dex				dex 								; back one.
.a810	80 de		bra $a7f0			bra 	_ILLoop
.a812					_ILExit:
.a812	20 d8 a7	jsr $a7d8			jsr 	EXTPrintCharacter
.a815	9e 25 08	stz $0825,x			stz 	lineBuffer,x 				; make ASCIIZ and exit with address in XA
.a818	60		rts				rts
.a819					EXTBreakCheck:
.a819	4c e1 ff	jmp $ffe1			jmp		$FFE1

;******  Return to file: _basic.asm


;******  Processing file: ./variants/hardware/junior/memory.asm

.a81c					MemoryPeek:
.a81c	b2 36		lda ($36)			lda 	(zTemp0)
.a81e	60		rts				rts
.a81f					MemoryPoke:
.a81f	92 36		sta ($36)			sta 	(zTemp0)
.a821	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./variants/memory.flat/delete.asm

.a822					MemoryDeleteLine:
.a822	20 41 a8	jsr $a841			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.a825	b2 30		lda ($30)			lda 	(codePtr) 					; size to delete => y
.a827	a8		tay				tay
.a828					_MDDLLoop:
.a828	b1 30		lda ($30),y			lda 	(codePtr),y 				; copy down
.a82a	92 30		sta ($30)			sta 	(codePtr)
.a82c	a5 30		lda $30				lda 	codePtr 					; check done the lot.
.a82e	c5 3a		cmp $3a				cmp 	zTemp2
.a830	d0 07		bne $a839			bne 	_MDLDLNext
.a832	a5 31		lda $31				lda 	codePtr+1
.a834	c5 3b		cmp $3b				cmp 	zTemp2+1
.a836	d0 01		bne $a839			bne 	_MDLDLNext
.a838					_MDDLExit:
.a838	60		rts				rts
.a839					_MDLDLNext:
.a839	e6 30		inc $30				inc 	codePtr						; next byte
.a83b	d0 eb		bne $a828			bne 	_MDDLLoop
.a83d	e6 31		inc $31				inc 	codePtr+1
.a83f	80 e7		bra $a828			bra 	_MDDLLoop
.a841					IMemoryFindEnd:
.a841	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a843	85 3a		sta $3a				sta 	0+zTemp2
.a845	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a847	85 3b		sta $3b				sta 	1+zTemp2
.a849					_MDLFELoop:
.a849	b2 3a		lda ($3a)			lda 	(zTemp2)
.a84b	f0 0b		beq $a858			beq 	_MDLFEExit
.a84d	18		clc				clc
.a84e	65 3a		adc $3a				adc 	zTemp2
.a850	85 3a		sta $3a				sta 	zTemp2
.a852	90 f5		bcc $a849			bcc 	_MDLFELoop
.a854	e6 3b		inc $3b				inc 	zTemp2+1
.a856	80 f1		bra $a849			bra 	_MDLFELoop
.a858					_MDLFEExit:
.a858	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./variants/memory.flat/insert.asm

.a859					MemoryInsertLine:
.a859	08		php				php
.a85a	20 41 a8	jsr $a841			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.a85d	28		plp				plp
.a85e	90 08		bcc $a868			bcc 	_MDLIFound
.a860	a5 3a		lda $3a				lda 	zTemp2 						; if CS on entry append.
.a862	85 30		sta $30				sta 	codePtr
.a864	a5 3b		lda $3b				lda 	zTemp2+1
.a866	85 31		sta $31				sta 	codePtr+1
.a868					_MDLIFound:
.a868	ad 25 07	lda $0725			lda 	tokenOffset 				; insert gap in Y, the offset, e.g. length of the new line
.a86b	a8		tay				tay
.a86c					_MDLIInsert:
.a86c	b2 3a		lda ($3a)			lda 	(zTemp2) 					; shift one byte up , at least one covers end case.
.a86e	91 3a		sta ($3a),y			sta 	(zTemp2),y 					; work from top down.
.a870	a5 30		lda $30				lda 	codePtr 					; done insert point ?
.a872	c5 3a		cmp $3a				cmp 	zTemp2
.a874	d0 06		bne $a87c			bne 	_MDLINext
.a876	a5 31		lda $31				lda 	codePtr+1
.a878	c5 3b		cmp $3b				cmp 	zTemp2+1
.a87a	f0 0a		beq $a886			beq 	_MDLIHaveSpace
.a87c					_MDLINext:
.a87c	a5 3a		lda $3a				lda 	zTemp2 						; if no, keep zTemp2 going backwards
.a87e	d0 02		bne $a882			bne 	_MDLINoBorrow
.a880	c6 3b		dec $3b				dec 	zTemp2+1
.a882					_MDLINoBorrow:
.a882	c6 3a		dec $3a				dec 	zTemp2
.a884	80 e6		bra $a86c			bra 	_MDLIInsert
.a886					_MDLIHaveSpace:
.a886	ac 25 07	ldy $0725			ldy 	tokenOffset 				; bytes to copy
.a889	88		dey				dey 								; from offset-1 to 0
.a88a					_MDLICopy:
.a88a	b9 25 07	lda $0725,y			lda 	tokenOffset,y
.a88d	91 30		sta ($30),y			sta 	(codePtr),y
.a88f	88		dey				dey
.a890	10 f8		bpl $a88a			bpl 	_MDLICopy
.a892	60		rts				rts
.a893					MDLAppendLine:
.a893	86 37		stx $37				stx 	zTemp0+1 					; save new line at zTemp0
.a895	85 36		sta $36				sta 	zTemp0
.a897	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a899	85 38		sta $38				sta 	0+zTemp1
.a89b	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a89d	85 39		sta $39				sta 	1+zTemp1
.a89f	b2 38		lda ($38)			lda 	(zTemp1)
.a8a1	d0 0a		bne $a8ad			bne 	_MDLANoInitialise
.a8a3	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a8a5	8d a8 08	sta $08a8			sta 	0+AppendPointer
.a8a8	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a8aa	8d a9 08	sta $08a9			sta 	1+AppendPointer
.a8ad					_MDLANoInitialise:
.a8ad	18		clc				clc
.a8ae	ad a8 08	lda $08a8			lda 	AppendPointer 				; copy append pointer to zTemp1 adding the offset as you go
.a8b1	85 38		sta $38				sta 	zTemp1
.a8b3	72 36		adc ($36)			adc 	(zTemp0)
.a8b5	8d a8 08	sta $08a8			sta 	AppendPointer
.a8b8	ad a9 08	lda $08a9			lda 	AppendPointer+1
.a8bb	85 39		sta $39				sta 	zTemp1+1
.a8bd	69 00		adc #$00			adc 	#0
.a8bf	8d a9 08	sta $08a9			sta 	AppendPointer+1
.a8c2	a0 00		ldy #$00			ldy 	#0
.a8c4					_MDLACopy:
.a8c4	b1 36		lda ($36),y			lda 	(zTemp0),y 					; copy new line in
.a8c6	91 38		sta ($38),y			sta 	(zTemp1),y
.a8c8	c8		iny				iny
.a8c9	98		tya				tya
.a8ca	d2 36		cmp ($36)			cmp 	(zTemp0) 					; done whole line
.a8cc	d0 f6		bne $a8c4			bne 	_MDLACopy
.a8ce	a9 00		lda #$00			lda 	#0 							; end of program.
.a8d0	91 38		sta ($38),y			sta 	(zTemp1),y
.a8d2	60		rts				rts
.08a8					AppendPointer:
>08a8							.fill 	2

;******  Return to file: _basic.asm


;******  Processing file: ./variants/memory.flat/memory.asm

.9eab					MemoryNew:
.9eab	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.9ead	85 30		sta $30				sta 	codePtr
.9eaf	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.9eb1	85 31		sta $31				sta 	codePtr+1
.9eb3	a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.9eb5	92 30		sta ($30)			sta 	(codePtr)
.9eb7	60		rts				rts
.9eb8					MemoryInline:
.9eb8	98		tya				tya 								; put address into stack,x
.9eb9	18		clc				clc
.9eba	65 30		adc $30				adc 	codePtr
.9ebc	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.9ebf	a5 31		lda $31				lda 	codePtr+1
.9ec1	69 00		adc #$00			adc 	#0
.9ec3	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9ec6	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.9ec9	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.9ecc	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./variants/memory.flat/search.asm

.9ecd					MemorySearch:
.9ecd	85 36		sta $36				sta 	zTemp0 						; save line number zTemp0
.9ecf	86 37		stx $37				stx 	zTemp0+1
.9ed1	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.9ed3	85 30		sta $30				sta 	codePtr
.9ed5	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.9ed7	85 31		sta $31				sta 	codePtr+1
.9ed9					_MTAXLoop:
.9ed9	b2 30		lda ($30)			lda 	(codePtr)
.9edb	18		clc				clc
.9edc	f0 21		beq $9eff			beq 	_MTAXExit 					; reached end, exit with CC.
.9ede	a0 01		ldy #$01			ldy 	#1 							; calculate current line# - requested line#
.9ee0	b1 30		lda ($30),y			lda 	(codePtr),y
.9ee2	38		sec				sec
.9ee3	e5 36		sbc $36				sbc 	zTemp0
.9ee5	85 38		sta $38				sta 	zTemp1 						; save interim to set Z
.9ee7	c8		iny				iny 								; do the MSB
.9ee8	b1 30		lda ($30),y			lda 	(codePtr),y
.9eea	e5 37		sbc $37				sbc 	zTemp0+1
.9eec	05 38		ora $38				ora 	zTemp1
.9eee	f0 0f		beq $9eff			beq 	_MTAXExit	 				; found
.9ef0	b0 0d		bcs $9eff			bcs 	_MTAXExit 					; current < required exit
.9ef2	18		clc				clc
.9ef3	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.9ef5	65 30		adc $30				adc 	codePtr
.9ef7	85 30		sta $30				sta 	codePtr
.9ef9	90 02		bcc $9efd			bcc 	_CREExit
.9efb	e6 31		inc $31				inc 	codePtr+1
.9efd					_CREExit:
.9efd	80 da		bra $9ed9			bra 	_MTAXLoop
.9eff					_MTAXExit:
.9eff	60		rts				rts

;******  Return to file: _basic.asm


;******  End of listing
