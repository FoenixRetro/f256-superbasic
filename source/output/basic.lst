
; 64tass Turbo Assembler Macro V1.58.2974? listing file
; 64tass -D AUTORUN=0 "-D MONITOR_ADDRESS=\$E000" "-D LOCKOUT_ADDRESS=\$F000" "-D BASIC_ADDRESS=\$34000" "-D SOURCE_ADDRESS=\$28000" "-D SPRITE_ADDRESS=\$30000" -q -b -Wall -c -C -D "HARDWARE=0 $'\x9'$'\x9'$'\x9'$'\x9'$'\x9'$'\x9'" -L output/basic.lst -l output/basic.lbl -Wall -o build/basic.rom _basic.asm
; Fri Feb 10 16:48:24 2023

;Offset	;PC	;Hex		;Monitor	;Source

;******  Command line definitions

=0						AUTORUN=0
=$e000						 MONITOR_ADDRESS=$E000
=$f000						 LOCKOUT_ADDRESS=$F000
=$34000						 BASIC_ADDRESS=$34000
=$28000						 SOURCE_ADDRESS=$28000
=$30000						 SPRITE_ADDRESS=$30000
=0						HARDWARE=0

;******  Processing input file: _basic.asm


;******  Processing file: ./common/aa.system/01common.inc

=$30						ZeroPageMandatory = $30
=$50						ZeroPagePreference = $50
=$400						MemoryStorage = $400
=$2000						BasicStart = $2000
=$8000						BasicEnd = $8000
=$8000						CodeStart = $8000
=$1000						VariableSpace = $1000
=$2000						EndVariableSpace = $2000
=8						MathStackSize = 8
=512						BasicStackSize = 512
=3584						BasicStackBase = $1000-BasicStackSize
=80						MaxLineSize = 80

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/04data.inc

.0030						codePtr:
>0030								.fill 	4
.0034						basicStack:
>0034								.fill 	2
.0036						zTemp0:
>0036								.fill 	2
.0038						zTemp1:
>0038								.fill 	2
.003a						zTemp2:
>003a								.fill 	2
.003c						zsTemp:
>003c								.fill 	2
.003e						zaTemp:
>003e								.fill 	2
=$30						safePtr = codePtr 							; minimise direct tinkering
=$80						NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20						NSBIsReference = $20 						; bit 5 : is a reference
=$10						NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18						NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03						NSBRefMask = $03 							; bits 0,1 : Bytes of reference, 00 = 4,01 = 1,10=2
=$04						NSBIsArray = $04
=$00						NSTInteger = $00 							; base types for bits 3..4
=$08						NSTFloat = $08
=$10						NSTString = $10
=$18						NSTProcedure = $18
.0050						NSStatus:
>0050								.fill 	MathStackSize
.0058						NSMantissa0:
>0058								.fill 	MathStackSize 				; (this is my integer mantissa system)
.0060						NSMantissa1:
>0060								.fill 	MathStackSize
.0068						NSMantissa2:
>0068								.fill 	MathStackSize
.0070						NSMantissa3:
>0070								.fill 	MathStackSize
.0078						NSExponent:
>0078								.fill 	MathStackSize
.0400						identStart:
>0400								.fill 	1
.0401						identTypeStart:
>0401								.fill 	1
.0402						identTypeEnd:
>0402								.fill 	1
.0403						identHash:
>0403								.fill 	1
.0404						identTypeByte:
>0404								.fill 	1	 						; (see tokenising.pdf)
.0405						encodeState:
>0405								.fill 	1
.0406						digitTemp:
>0406								.fill 	1
.0407						decimalCount:
>0407								.fill 	1
.0408						lowMemPtr:
>0408								.fill 	2
.040a						stringMemory:
>040a								.fill 	2
.040c						stringInitialised:
>040c								.fill 	1
.040d						stringTempPointer:
>040d								.fill 	2
.040f						breakCheck:
>040f								.fill 	1
.0410						decimalPlaces:
>0410								.fill 	1
.0411						dbOffset:
>0411								.fill 	1
.0412						lastParameter:
>0412								.fill 	1
.0413						dataPointer:
>0413								.fill 	5
.0418						inDataStatement:
>0418								.fill 	1
.0419						tbOffset:
>0419								.fill 	1
.041a						AssemblerAddress:
>041a								.fill 	2
.041c						AssemblerControl:
>041c								.fill 	1
.041d						ParamStart:
>041d								.fill 	2
.041f						IsGroup1:
>041f								.fill 	1
.0420						BaseOpcode:
>0420								.fill 	1
.0421						ModeMask:
>0421								.fill 	1
.0422						listIndent:
>0422								.fill 	1
.0423						lcLastCharacter:
>0423								.fill 	1
.0424						isPrintFlag:
>0424								.fill 	1
.0425						currentListColour:
>0425								.fill 	1
.0426						tokenOffset:
>0426								.fill 	1
.0427						tokenLineNumber:
>0427								.fill 	2
.0429						tokenBuffer:
>0429								.fill 	253
.0526						lineBuffer:
>0526								.fill 	253
.0623						numberBuffer:
>0623								.fill 	34
.0645						decimalBuffer:
>0645								.fill 	16

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/ab.system/macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/ab.system/ticktask.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/constants.inc

=$80						AM_ISZP = $80
=$40						AM_ISG1 = $40
=$20						AM_ISG2 = $20
=224						AM_IMMEDIATE = AM_ISZP+AM_ISG1+AM_ISG2+$00
=228						AM_ZEROPAGE = AM_ISZP+AM_ISG1+AM_ISG2+$04
=40						AM_ACC = AM_ISG2+$08
=108						AM_ABS = AM_ISG1+AM_ISG2+$0C
=208						AM_INDY = AM_ISZP+AM_ISG1+$10
=244						AM_ZEROX = AM_ISZP+AM_ISG1+AM_ISG2+$14
=120						AM_ABSY = AM_ISG1+AM_ISG2+$18
=124						AM_ABSX = AM_ISG1+AM_ISG2+$1C
=209						AM_IND = AM_ISZP+AM_ISG1+$11
=$80						AM_ZEROY = AM_ISZP
=$01						AM_INDABS = $01
=$02						AM_INDABSX = $02
=192						AM_INDX = AM_ISZP+AM_ISG1+$00

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/handlers.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.inc

=1						ERRID_BREAK = 1
=2						ERRID_SYNTAX = 2
=3						ERRID_DIVZERO = 3
=4						ERRID_RANGE = 4
=5						ERRID_TYPE = 5
=6						ERRID_MEMORY = 6
=7						ERRID_ARGUMENT = 7
=8						ERRID_STOP = 8
=9						ERRID_STRING = 9
=10						ERRID_ASSERT = 10
=11						ERRID_DATA = 11
=12						ERRID_NOTDONE = 12
=13						ERRID_LINE = 13
=14						ERRID_GOSUB = 14
=15						ERRID_REPEAT = 15
=16						ERRID_WHILE = 16
=17						ERRID_FOR = 17
=18						ERRID_STACK = 18
=19						ERRID_STRUCT = 19
=20						ERRID_PROC = 20
=21						ERRID_REDEFINE = 21
=22						ERRID_ARRAYSIZE = 22
=23						ERRID_ARRAYIDX = 23
=24						ERRID_ARRAYDEC = 24
=25						ERRID_NOTFOUND = 25
=26						ERRID_DRIVEIO = 26
=27						ERRID_VERIFY = 27

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst.inc

=$00						KWD_LESSLESS                         = $00; $00 <<
=$01						KWD_LESSEQUAL                        = $01; $01 <=
=$02						KWD_LESSGREATER                      = $02; $02 <>
=$03						KWD_PLINGPLING3                      = $03; $03 !!3
=$04						KWD_GREATERLESS                      = $04; $04 ><
=$05						KWD_GREATEREQUAL                     = $05; $05 >=
=$06						KWD_GREATERGREATER                   = $06; $06 >>
=$07						KWD_PLINGPLING7                      = $07; $07 !!7
=$08						KWD_PLINGPLING8                      = $08; $08 !!8
=$09						KWD_PLINGPLING9                      = $09; $09 !!9
=$0a						KWD_PLINGPLING10                     = $0a; $0a !!10
=$0b						KWD_PLINGPLING11                     = $0b; $0b !!11
=$0c						KWD_PLINGPLING12                     = $0c; $0c !!12
=$0d						KWD_PLINGPLING13                     = $0d; $0d !!13
=$0e						KWD_PLINGPLING14                     = $0e; $0e !!14
=$0f						KWD_PLINGPLING15                     = $0f; $0f !!15
=$10						KWD_ATCH                             = $10; $10 @
=$11						KWD_PLINGPLING17                     = $11; $11 !!17
=$12						KWD_PLINGPLING18                     = $12; $12 !!18
=$13						KWD_LSQPAREN                         = $13; $13 [
=$14						KWD_BACKSLASH                        = $14; $14 \
=$15						KWD_RSQPAREN                         = $15; $15 ]
=$16						KWD_HAT                              = $16; $16 ^
=$17						KWD_UNDERSCORE                       = $17; $17 _
=$18						KWD_BQUOTE                           = $18; $18 `
=$19						KWD_PLINGPLING25                     = $19; $19 !!25
=$1a						KWD_PLINGPLING26                     = $1a; $1a !!26
=$1b						KWD_LCURLY                           = $1b; $1b {
=$1c						KWD_BAR                              = $1c; $1c |
=$1d						KWD_RCURLY                           = $1d; $1d }
=$1e						KWD_TILDE                            = $1e; $1e ~
=$21						KWD_PLING                            = $21; $21 !
=$22						KWD_DQUOTE                           = $22; $22 "
=$23						KWD_HASH                             = $23; $23 #
=$24						KWD_DOLLAR                           = $24; $24 $
=$25						KWD_PERCENT                          = $25; $25 %
=$26						KWD_AMPERSAND                        = $26; $26 &
=$27						KWD_QUOTE                            = $27; $27 '
=$28						KWD_LPAREN                           = $28; $28 (
=$29						KWD_RPAREN                           = $29; $29 )
=$2a						KWD_STAR                             = $2a; $2a *
=$2b						KWD_PLUS                             = $2b; $2b +
=$2c						KWD_COMMA                            = $2c; $2c ,
=$2d						KWD_MINUS                            = $2d; $2d -
=$2e						KWD_PERIOD                           = $2e; $2e .
=$2f						KWD_SLASH                            = $2f; $2f /
=$30						KWD_0                                = $30; $30 0
=$31						KWD_1                                = $31; $31 1
=$32						KWD_2                                = $32; $32 2
=$33						KWD_3                                = $33; $33 3
=$34						KWD_4                                = $34; $34 4
=$35						KWD_5                                = $35; $35 5
=$36						KWD_6                                = $36; $36 6
=$37						KWD_7                                = $37; $37 7
=$38						KWD_8                                = $38; $38 8
=$39						KWD_9                                = $39; $39 9
=$3a						KWD_COLON                            = $3a; $3a :
=$3b						KWD_SEMICOLON                        = $3b; $3b ;
=$3c						KWD_LESS                             = $3c; $3c <
=$3d						KWD_EQUAL                            = $3d; $3d =
=$3e						KWD_GREATER                          = $3e; $3e >
=$3f						KWD_QMARK                            = $3f; $3f ?
=$83						KWD_ABSLPAREN                        = $83; $83 ABS(
=$84						KWD_ALLOCLPAREN                      = $84; $84 ALLOC(
=$85						KWD_ASCLPAREN                        = $85; $85 ASC(
=$86						KWD_CHRDOLLARLPAREN                  = $86; $86 CHR$(
=$87						KWD_EVENTLPAREN                      = $87; $87 EVENT(
=$88						KWD_FALSE                            = $88; $88 FALSE
=$89						KWD_FRACLPAREN                       = $89; $89 FRAC(
=$8a						KWD_GETDOLLARLPAREN                  = $8a; $8a GET$(
=$8b						KWD_GETLPAREN                        = $8b; $8b GET(
=$8c						KWD_GETDATEDOLLARLPAREN              = $8c; $8c GETDATE$(
=$8d						KWD_GETTIMEDOLLARLPAREN              = $8d; $8d GETTIME$(
=$8e						KWD_HITLPAREN                        = $8e; $8e HIT(
=$8f						KWD_INKEYDOLLARLPAREN                = $8f; $8f INKEY$(
=$90						KWD_INKEYLPAREN                      = $90; $90 INKEY(
=$91						KWD_INTLPAREN                        = $91; $91 INT(
=$92						KWD_ISVALLPAREN                      = $92; $92 ISVAL(
=$93						KWD_ITEMCOUNTLPAREN                  = $93; $93 ITEMCOUNT(
=$94						KWD_ITEMGETDOLLARLPAREN              = $94; $94 ITEMGET$(
=$95						KWD_JOYBLPAREN                       = $95; $95 JOYB(
=$96						KWD_JOYXLPAREN                       = $96; $96 JOYX(
=$97						KWD_JOYYLPAREN                       = $97; $97 JOYY(
=$98						KWD_KEYDOWNLPAREN                    = $98; $98 KEYDOWN(
=$99						KWD_LEFTDOLLARLPAREN                 = $99; $99 LEFT$(
=$9a						KWD_LENLPAREN                        = $9a; $9a LEN(
=$9b						KWD_MAXLPAREN                        = $9b; $9b MAX(
=$9c						KWD_MIDDOLLARLPAREN                  = $9c; $9c MID$(
=$9d						KWD_MINLPAREN                        = $9d; $9d MIN(
=$9e						KWD_NOTLPAREN                        = $9e; $9e NOT(
=$9f						KWD_PEEKLPAREN                       = $9f; $9f PEEK(
=$a0						KWD_PEEKDLPAREN                      = $a0; $a0 PEEKD(
=$a1						KWD_PEEKLLPAREN                      = $a1; $a1 PEEKL(
=$a2						KWD_PEEKWLPAREN                      = $a2; $a2 PEEKW(
=$a3						KWD_PLAYINGLPAREN                    = $a3; $a3 PLAYING(
=$a4						KWD_RANDOMLPAREN                     = $a4; $a4 RANDOM(
=$a5						KWD_RIGHTDOLLARLPAREN                = $a5; $a5 RIGHT$(
=$a6						KWD_RNDLPAREN                        = $a6; $a6 RND(
=$a7						KWD_SGNLPAREN                        = $a7; $a7 SGN(
=$a8						KWD_SPCLPAREN                        = $a8; $a8 SPC(
=$a9						KWD_STRDOLLARLPAREN                  = $a9; $a9 STR$(
=$aa						KWD_TIMERLPAREN                      = $aa; $aa TIMER(
=$ab						KWD_TRUE                             = $ab; $ab TRUE
=$ac						KWD_VALLPAREN                        = $ac; $ac VAL(
=$ad						KWD_FOR                              = $ad; $ad FOR
=$ae						KWD_IF                               = $ae; $ae IF
=$af						KWD_PROC                             = $af; $af PROC
=$b0						KWD_REPEAT                           = $b0; $b0 REPEAT
=$b1						KWD_WHILE                            = $b1; $b1 WHILE
=$b2						KWD_ENDIF                            = $b2; $b2 ENDIF
=$b3						KWD_ENDPROC                          = $b3; $b3 ENDPROC
=$b4						KWD_NEXT                             = $b4; $b4 NEXT
=$b5						KWD_THEN                             = $b5; $b5 THEN
=$b6						KWD_UNTIL                            = $b6; $b6 UNTIL
=$b7						KWD_WEND                             = $b7; $b7 WEND
=$b8						KWD_AT                               = $b8; $b8 AT
=$b9						KWD_BY                               = $b9; $b9 BY
=$ba						KWD_CALL                             = $ba; $ba CALL
=$bb						KWD_CIRCLE                           = $bb; $bb CIRCLE
=$bc						KWD_CLEAR                            = $bc; $bc CLEAR
=$bd						KWD_COLOR                            = $bd; $bd COLOR
=$be						KWD_COLOUR                           = $be; $be COLOUR
=$bf						KWD_DATA                             = $bf; $bf DATA
=$c0						KWD_DIM                              = $c0; $c0 DIM
=$c1						KWD_DOWNTO                           = $c1; $c1 DOWNTO
=$c2						KWD_ELSE                             = $c2; $c2 ELSE
=$c3						KWD_FROM                             = $c3; $c3 FROM
=$c4						KWD_GFX                              = $c4; $c4 GFX
=$c5						KWD_HERE                             = $c5; $c5 HERE
=$c6						KWD_IMAGE                            = $c6; $c6 IMAGE
=$c7						KWD_LET                              = $c7; $c7 LET
=$c8						KWD_LINE                             = $c8; $c8 LINE
=$c9						KWD_LOCAL                            = $c9; $c9 LOCAL
=$ca						KWD_MEMCOPY                          = $ca; $ca MEMCOPY
=$cb						KWD_OFF                              = $cb; $cb OFF
=$cc						KWD_ON                               = $cc; $cc ON
=$cd						KWD_OUTLINE                          = $cd; $cd OUTLINE
=$ce						KWD_PALETTE                          = $ce; $ce PALETTE
=$cf						KWD_PLOT                             = $cf; $cf PLOT
=$d0						KWD_POKE                             = $d0; $d0 POKE
=$d1						KWD_POKED                            = $d1; $d1 POKED
=$d2						KWD_POKEL                            = $d2; $d2 POKEL
=$d3						KWD_POKEW                            = $d3; $d3 POKEW
=$d4						KWD_READ                             = $d4; $d4 READ
=$d5						KWD_RECT                             = $d5; $d5 RECT
=$d6						KWD_REM                              = $d6; $d6 REM
=$d7						KWD_SOLID                            = $d7; $d7 SOLID
=$d8						KWD_SOUND                            = $d8; $d8 SOUND
=$d9						KWD_SPRITE                           = $d9; $d9 SPRITE
=$da						KWD_TEXT                             = $da; $da TEXT
=$db						KWD_TO                               = $db; $db TO
=$83						KWD1_ASSEMBLE                         = $83; $83 ASSEMBLE
=$84						KWD1_ASSERT                           = $84; $84 ASSERT
=$85						KWD1_BITMAP                           = $85; $85 BITMAP
=$86						KWD1_BLOAD                            = $86; $86 BLOAD
=$87						KWD1_BSAVE                            = $87; $87 BSAVE
=$88						KWD1_CLS                              = $88; $88 CLS
=$89						KWD1_CPRINT                           = $89; $89 CPRINT
=$8a						KWD1_DIR                              = $8a; $8a DIR
=$8b						KWD1_DOS                              = $8b; $8b DOS
=$8c						KWD1_DRIVE                            = $8c; $8c DRIVE
=$8d						KWD1_END                              = $8d; $8d END
=$8e						KWD1_EXPLODE                          = $8e; $8e EXPLODE
=$8f						KWD1_GO                               = $8f; $8f GO
=$90						KWD1_GOSUB                            = $90; $90 GOSUB
=$91						KWD1_GOTO                             = $91; $91 GOTO
=$92						KWD1_HIMEM                            = $92; $92 HIMEM
=$93						KWD1_INPUT                            = $93; $93 INPUT
=$94						KWD1_LIST                             = $94; $94 LIST
=$95						KWD1_LOAD                             = $95; $95 LOAD
=$96						KWD1_MDELTA                           = $96; $96 MDELTA
=$97						KWD1_MOUSE                            = $97; $97 MOUSE
=$98						KWD1_NEW                              = $98; $98 NEW
=$99						KWD1_PING                             = $99; $99 PING
=$9a						KWD1_PRINT                            = $9a; $9a PRINT
=$9b						KWD1_RESTORE                          = $9b; $9b RESTORE
=$9c						KWD1_RETURN                           = $9c; $9c RETURN
=$9d						KWD1_RUN                              = $9d; $9d RUN
=$9e						KWD1_SAVE                             = $9e; $9e SAVE
=$9f						KWD1_SETDATE                          = $9f; $9f SETDATE
=$a0						KWD1_SETTIME                          = $a0; $a0 SETTIME
=$a1						KWD1_SHOOT                            = $a1; $a1 SHOOT
=$a2						KWD1_SPRITES                          = $a2; $a2 SPRITES
=$a3						KWD1_STOP                             = $a3; $a3 STOP
=$a4						KWD1_TRY                              = $a4; $a4 TRY
=$a5						KWD1_VERIFY                           = $a5; $a5 VERIFY
=$a6						KWD1_XGO                              = $a6; $a6 XGO
=$a7						KWD1_XLOAD                            = $a7; $a7 XLOAD
=$a8						KWD1_ZAP                              = $a8; $a8 ZAP

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst0.inc

=$80						KWC_EOL = $80
=$81						KWC_SHIFT1 = $81
=$82						KWC_SHIFT2 = $82
=$ff						KWC_STRING = $FF
=$fe						KWC_HEXCONST = $FE
=$ad						KWC_FIRST_STRUCTURE = $ad
=$b2						KWC_FIRST_STRUCTURE_DEC = $b2
=$b7						KWC_LAST_STRUCTURE = $b7
=$83						KWC_FIRST_UNARY = $83
=$ac						KWC_LAST_UNARY = $ac

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/memory/memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/stack.inc

=$e0						STK_GOSUB = $E0
=$d0						STK_FOR = $D0
=$c0						STK_REPEAT = $C0
=$b0						STK_PROC = $B0
=$a0						STK_WHILE = $A0
=$01						STK_LOCALN = $01
=$02						STK_LOCALS = $02

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/00start.asm

.8000						F256Header:
>8000		f2 56						.text	$f2,$56         			; Signature
>8002		04						.byte   4               			; 4 blocks
>8003		04						.byte   4               			; mount at $8000
>8004		40 80						.word   Boot 	      				; Start here
>8006		00 00						.word   0 			               	; version
>8008		00 00						.word   0               			; kernel
>800a		53 75 70 65 72 42 41 53				.text   "SuperBASIC",0 				; name of program.
>8012		49 43 00
.8040		4c 93 80	jmp $8093	Boot:	jmp 	Start

;******  Processing file: ./common/aa.system/../../../modules/_build/_linker.module

=1						PagingEnabled = 1
.8043						EXTPrintCharacter:
.8043		e6 0d		inc $0d			inc 8+5
.8045		20 0b a0	jsr $a00b		jsr	Export_EXTPrintCharacter
.8048		08		php			php
.8049		c6 0d		dec $0d			dec 8+5
.804b		28		plp			plp
.804c		60		rts			rts
.804d						EXTPrintNoControl:
.804d		e6 0d		inc $0d			inc 8+5
.804f		20 00 a0	jsr $a000		jsr	Export_EXTPrintNoControl
.8052		08		php			php
.8053		c6 0d		dec $0d			dec 8+5
.8055		28		plp			plp
.8056		60		rts			rts
.8057						EXTInitialise:
.8057		e6 0d		inc $0d			inc 8+5
.8059		20 da a1	jsr $a1da		jsr	Export_EXTInitialise
.805c		08		php			php
.805d		c6 0d		dec $0d			dec 8+5
.805f		28		plp			plp
.8060		60		rts			rts
.8061						GXGraphicDraw:
.8061		e6 0d		inc $0d			inc 8+5
.8063		20 3b a3	jsr $a33b		jsr	Export_GXGraphicDraw
.8066		08		php			php
.8067		c6 0d		dec $0d			dec 8+5
.8069		28		plp			plp
.806a		60		rts			rts
.806b						SNDCommand:
.806b		e6 0d		inc $0d			inc 8+5
.806d		20 57 b7	jsr $b757		jsr	Export_SNDCommand
.8070		08		php			php
.8071		c6 0d		dec $0d			dec 8+5
.8073		28		plp			plp
.8074		60		rts			rts
.8075						SNDUpdate:
.8075		e6 0d		inc $0d			inc 8+5
.8077		20 8a b7	jsr $b78a		jsr	Export_SNDUpdate
.807a		08		php			php
.807b		c6 0d		dec $0d			dec 8+5
.807d		28		plp			plp
.807e		60		rts			rts
.807f						TKListConvertLine:
.807f		e6 0d		inc $0d			inc 8+5
.8081		20 08 b1	jsr $b108		jsr	Export_TKListConvertLine
.8084		08		php			php
.8085		c6 0d		dec $0d			dec 8+5
.8087		28		plp			plp
.8088		60		rts			rts
.8089						TKTokeniseLine:
.8089		e6 0d		inc $0d			inc 8+5
.808b		20 9c b3	jsr $b39c		jsr	Export_TKTokeniseLine
.808e		08		php			php
.808f		c6 0d		dec $0d			dec 8+5
.8091		28		plp			plp
.8092		60		rts			rts

;******  Return to file: ./common/aa.system/00start.asm

.8093		a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.8095		9a		txs				txs
.8096		20 57 80	jsr $8057			jsr 	EXTInitialise 				; hardware initialise
.8099		a5 00		lda $00				lda 	0  							; turn on editing of MMU LUT
.809b		09 80		ora #$80			ora 	#$80
.809d		85 00		sta $00				sta 	0
.809f		ad 02 20	lda $2002			lda 	$2002 						; if $2002..5 is BT65 then jump to $2000
.80a2		c9 42		cmp #$42			cmp 	#"B"
.80a4		d0 18		bne $80be			bne 	_NoMachineCode
.80a6		ad 03 20	lda $2003			lda 	$2003
.80a9		c9 54		cmp #$54			cmp 	#"T"
.80ab		d0 11		bne $80be			bne 	_NoMachineCode
.80ad		ad 04 20	lda $2004			lda 	$2004
.80b0		c9 36		cmp #$36			cmp 	#"6"
.80b2		d0 0a		bne $80be			bne 	_NoMachineCode
.80b4		ad 05 20	lda $2005			lda 	$2005
.80b7		c9 35		cmp #$35			cmp 	#"5"
.80b9		d0 03		bne $80be			bne 	_NoMachineCode
.80bb		4c 00 20	jmp $2000			jmp 	$2000
.80be						_NoMachineCode:
.80be		a9 00		lda #$00			lda 	#0 							; zero the default drive.
.80c0		20 9e 83	jsr $839e			jsr 	KNLSetDrive
.80c3		a9 00		lda #$00			lda 	#0 							; graphics system initialise.
.80c5		aa		tax				tax
.80c6		a8		tay				tay
.80c7		20 61 80	jsr $8061			jsr 	GXGraphicDraw
.80ca		a9 0f		lda #$0f			lda 	#$0F 						; initialise sound system
.80cc		20 6b 80	jsr $806b			jsr 	SNDCommand
.80cf		a9 8d		lda #$8d			lda 	#128+13 					; Display FPGA information.
.80d1		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.80d4		a9 09		lda #$09			lda 	#9
.80d6		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.80d9		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.80dc		64 01		stz $01				stz 	1
.80de		ad ad d6	lda $d6ad			lda 	$D6AD
.80e1		20 73 85	jsr $8573			jsr 	PrintHex
.80e4		ad ac d6	lda $d6ac			lda 	$D6AC
.80e7		20 73 85	jsr $8573			jsr 	PrintHex
.80ea		ad ab d6	lda $d6ab			lda 	$D6AB
.80ed		20 73 85	jsr $8573			jsr 	PrintHex
.80f0		ad aa d6	lda $d6aa			lda 	$D6AA
.80f3		20 73 85	jsr $8573			jsr 	PrintHex
.80f6		a9 20		lda #$20			lda 	#32
.80f8		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.80fb		ad a8 d6	lda $d6a8			lda 	$D6A8
.80fe		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.8101		ad a9 d6	lda $d6a9			lda 	$D6A9
.8104		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.8107		a2 81		ldx #$81			ldx 	#Prompt >> 8 				; display prompt
.8109		a9 1a		lda #$1a			lda 	#Prompt & $FF
.810b		20 94 9a	jsr $9a94			jsr 	PrintStringXA
.810e		20 55 82	jsr $8255			jsr 	ResetIOTracking 			; reset the I/O tracking.
.8111		20 fc 93	jsr $93fc			jsr 	NewProgram 					; erase current program
.8114		4c df 87	jmp $87df			jmp 	WarmStart					; make same size.
.8117		4c df 87	jmp $87df			jmp 	WarmStart
>811a		0d 0d				Prompt:	.text 	13,13

;******  Processing file: ./common/aa.system/../generated/timestamp.asm

>811c		09 09 31 30 2f 30 32 2f			.text 9,9,"10/02/23 33"
>8124		32 33 20 33 33

;******  Return to file: ./common/aa.system/00start.asm

>8129		0d 0d 0d 00					.text 	13,13,13,0

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/ab.system/events.asm

.812d						ProcessEvents:
.812d		20 dd 83	jsr $83dd			jsr 	KNLSetEventPointer
.8130		20 5e 82	jsr $825e			jsr     GetNextEvent 				; get next event
.8133		b0 27		bcs $815c			bcs 	_PEExitZ 					; nothing left to process.
.8135		ad 9b 07	lda $079b			lda 	KNLEvent.type 				; go back if event not key.pressed.
.8138		c9 08		cmp #$08			cmp 	#kernel.event.key.PRESSED
.813a		d0 f1		bne $812d			bne 	ProcessEvents
.813c		ad a1 07	lda $07a1			lda	 	KNLEvent.key.flags 			; is KNLEvent.key.flags = 0 ?
.813f		d0 ec		bne $812d			bne 	ProcessEvents
.8141		ad a0 07	lda $07a0			lda 	KNLEvent.key.ascii 			; is it Ctrl+C
.8144		c9 03		cmp #$03			cmp 	#3
.8146		f0 11		beq $8159			beq 	_PEReturnBreak  			; no, keep going.
.8148		da		phx				phx
.8149		ae 5d 06	ldx $065d			ldx 	KeyboardQueueEntries 		; get keyboard queue size into X
.814c		e0 08		cpx #$08			cpx 	#KBDQueueSize 				; if full, then ignore
.814e		f0 06		beq $8156			beq 	_PENoQueue
.8150		9d 55 06	sta $0655,x			sta 	KeyboardQueue,x 			; write into queue
.8153		ee 5d 06	inc $065d			inc 	KeyboardQueueEntries 		; bump count
.8156						_PENoQueue:
.8156		fa		plx				plx
.8157		80 d4		bra $812d			bra 	ProcessEvents
.8159						_PEReturnBreak:
.8159		a9 ff		lda #$ff			lda 	#255 						; return with NZ state
.815b		60		rts				rts
.815c						_PEExitZ:
.815c		a9 00		lda #$00			lda 	#0
.815e		60		rts				rts
.815f						PopKeyboardQueue:
.815f		ad 5d 06	lda $065d			lda 	KeyboardQueueEntries 		; get keyboard queue entries.
.8162		f0 17		beq $817b			beq 	_PKQExit 					; zero, then exit.
.8164		ad 55 06	lda $0655			lda 	KeyboardQueue 				; save head of keyboard queue
.8167		48		pha				pha
.8168		da		phx				phx 								; drop head of queue
.8169		a2 00		ldx #$00			ldx 	#0
.816b						_PKQLoop:
.816b		bd 56 06	lda $0656,x			lda 	KeyboardQueue+1,x 			; shift everything back one.
.816e		9d 55 06	sta $0655,x			sta 	KeyboardQueue,x  			; not efficient but doesn't matter.
.8171		e8		inx				inx
.8172		e0 07		cpx #$07			cpx 	#7
.8174		d0 f5		bne $816b			bne 	_PKQLoop
.8176		fa		plx				plx
.8177		ce 5d 06	dec $065d			dec 	KeyboardQueueEntries 		; one fewer in queue.
.817a		68		pla				pla 								; restore head of queue.
.817b						_PKQExit:
.817b		60		rts				rts
.817c						KNLGetKeyPressed:
.817c		a5 01		lda $01				lda 	1 							; save I/O 0
.817e		48		pha				pha
.817f		64 01		stz $01				stz 	1 							; access I/O Page 0
.8181		38		sec				sec 								; calculate timer - LastTick
.8182		ad 59 d6	lda $d659			lda 	$D659
.8185		cd 5e 06	cmp $065e			cmp 	LastTick
.8188		f0 06		beq $8190			beq 	_NoFireTick 				; if < 3 clocks don't fire.
.818a		8d 5e 06	sta $065e			sta 	LastTick 					; update last timer
.818d		20 4d 82	jsr $824d			jsr 	TickHandler 							; go do the code.
.8190						_NoFireTick:
.8190		68		pla				pla 								; restore I/O 0
.8191		85 01		sta $01				sta 	1
.8193		ad 5d 06	lda $065d			lda 	KeyboardQueueEntries 		; something in the queue
.8196		d0 c7		bne $815f			bne 	PopKeyboardQueue 			; if so, pop and return it
.8198		20 2d 81	jsr $812d			jsr 	ProcessEvents 				; process any outstanding events
.819b		a9 00		lda #$00			lda 	#0
.819d		60		rts				rts
.819e						KNLGetSingleCharacter:
.819e		20 7c 81	jsr $817c			jsr 	KNLGetKeyPressed
.81a1		c9 00		cmp #$00			cmp 	#0
.81a3		f0 f9		beq $819e			beq 	KNLGetSingleCharacter
.81a5		60		rts				rts
=8						KBDQueueSize = 8
.0655						KeyboardQueue:
>0655								.fill 	KBDQueueSize
.065d						KeyboardQueueEntries:
>065d								.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/ab.system/input.asm

.81a6						EXTInputLine:
.81a6		48		pha				pha
.81a7		da		phx				phx
.81a8		5a		phy				phy
.81a9		a5 01		lda $01				lda 	1 							; save I/O page
.81ab		48		pha				pha
.81ac						_EILLoop:
.81ac		20 9e 81	jsr $819e			jsr 	KNLGetSingleCharacter 		; get one single character
.81af		c9 0d		cmp #$0d			cmp 	#13 						; scrape line if exit.
.81b1		f0 44		beq $81f7			beq 	_EILExit
.81b3		c9 04		cmp #$04			cmp 	#4 							; Ctrl+D delete at cursor
.81b5		f0 2a		beq $81e1			beq 	_EILDelete
.81b7		c9 08		cmp #$08			cmp 	#8 							; Ctrl+H backspace
.81b9		f0 1c		beq $81d7			beq 	_EILBackspace
.81bb		c9 20		cmp #$20			cmp 	#' '						; < space, print it
.81bd		90 12		bcc $81d1			bcc 	_EILPrintLoop
.81bf		c9 7f		cmp #$7f			cmp 	#$7F 						; if -ve print it
.81c1		b0 0e		bcs $81d1			bcs 	_EILPrintLoop
.81c3		48		pha				pha 								; save character
.81c4		a9 02		lda #$02			lda 	#2  						; insert a space
.81c6		85 01		sta $01				sta 	1
.81c8		20 3b 82	jsr $823b			jsr 	EXTILInsert 				; insert in text screen
.81cb		e6 01		inc $01				inc 	1
.81cd		20 3b 82	jsr $823b			jsr 	EXTILInsert 				; insert in colour screen
.81d0		68		pla				pla 								; get character back.
.81d1						_EILPrintLoop:
.81d1		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.81d4		80 d6		bra $81ac			bra 	_EILLoop
.81d6		60		rts				rts
.81d7						_EILBackspace:
.81d7		ad c2 07	lda $07c2			lda 	EXTColumn					; can we backspace ?
.81da		f0 d0		beq $81ac			beq 	_EILLoop
.81dc		a9 02		lda #$02			lda 	#2 							; move cursor left
.81de		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.81e1						_EILDelete
.81e1		a9 02		lda #$02			lda 	#2 							; text block
.81e3		85 01		sta $01				sta 	1
.81e5		a9 20		lda #$20			lda 	#' ' 						; backspace text.
.81e7		20 26 82	jsr $8226			jsr 	EXTILDelete
.81ea		e6 01		inc $01				inc 	1 							; colour block
.81ec		ac c2 07	ldy $07c2			ldy 	EXTColumn 					; get attribute of last character
.81ef		88		dey				dey
.81f0		b1 40		lda ($40),y			lda 	(EXTAddress),y
.81f2		20 26 82	jsr $8226			jsr 	EXTILDelete 				; backspace attribute
.81f5		80 b5		bra $81ac			bra 	_EILLoop 					; and go round.
.81f7						_EILExit:
.81f7		a9 02		lda #$02			lda 	#2 							; switch to page 2
.81f9		85 01		sta $01				sta 	1
.81fb		a0 00		ldy #$00			ldy 	#0 							; copy current line into buffer.
.81fd						_EILScrapeLine:
.81fd		b1 40		lda ($40),y			lda 	(EXTAddress),y
.81ff		99 26 05	sta $0526,y			sta 	lineBuffer,y
.8202		c8		iny				iny
.8203		cc c4 07	cpy $07c4			cpy 	EXTScreenWidth
.8206		d0 f5		bne $81fd			bne 	_EILScrapeLine
.8208						_EILTrimSpaces:
.8208		88		dey				dey
.8209		c0 ff		cpy #$ff			cpy 	#$FF 						; back past the start
.820b		f0 07		beq $8214			beq 	_EILEndTrim		 			; zero the input line.
.820d		b9 26 05	lda $0526,y			lda 	lineBuffer,y
.8210		c9 20		cmp #$20			cmp 	#' '
.8212		f0 f4		beq $8208			beq 	_EILTrimSpaces 				; if fail this found non space character
.8214						_EILEndTrim:
.8214		c8		iny				iny 								; trim after non space character.
.8215		a9 00		lda #$00			lda 	#0 							; trim here.
.8217		99 26 05	sta $0526,y			sta 	lineBuffer,y
.821a		a9 0d		lda #$0d			lda 	#13 						; echo the RETURN
.821c		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.821f		68		pla				pla 								; reset I/O page
.8220		85 01		sta $01				sta 	1
.8222		7a		ply				ply
.8223		fa		plx				plx
.8224		68		pla				pla
.8225		60		rts				rts
.8226						EXTILDelete:
.8226		48		pha				pha 								; save the new character
.8227		ac c2 07	ldy $07c2			ldy 	EXTColumn 					; start copying from here.
.822a						_EXTDLoop:
.822a		c8		iny				iny 								; copy one byte down.
.822b		b1 40		lda ($40),y			lda 	(EXTAddress),y
.822d		88		dey				dey
.822e		91 40		sta ($40),y			sta 	(EXTAddress),y
.8230		c8		iny				iny 								; do till end of line.
.8231		cc c4 07	cpy $07c4			cpy 	EXTScreenWidth
.8234		90 f4		bcc $822a			bcc 	_EXTDLoop
.8236		88		dey				dey 	 							; write in last slot.
.8237		68		pla				pla
.8238		91 40		sta ($40),y			sta 	(EXTAddress),y
.823a		60		rts				rts
.823b						EXTILInsert:
.823b		ac c4 07	ldy $07c4			ldy 	EXTScreenWidth 				; end position
.823e						_EXTILoop:
.823e		88		dey				dey 								; back one
.823f		cc c2 07	cpy $07c2			cpy 	EXTColumn 					; exit if reached insert point.
.8242		f0 08		beq $824c			beq 	_EXTIExit
.8244		88		dey				dey 								; copy one byte up.
.8245		b1 40		lda ($40),y			lda 	(EXTAddress),y
.8247		c8		iny				iny
.8248		91 40		sta ($40),y			sta 	(EXTAddress),y
.824a		80 f2		bra $823e			bra 	_EXTILoop
.824c						_EXTIExit:
.824c		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/ab.system/ticktask.asm

.824d						TickHandler:
.824d		da		phx				phx
.824e		5a		phy				phy 								; need to preserve Y
.824f		20 75 80	jsr $8075			jsr 	SNDUpdate 					; update sound
.8252		7a		ply				ply
.8253		fa		plx				plx
.8254		60		rts				rts
.065e						LastTick:
>065e								.fill 		1

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/ab.system/trackio.asm

.8255						ResetIOTracking:
.8255		a2 3a		ldx #$3a			ldx 	#GNEEnd-GNEBegin-1
.8257						_RIOLoop:
.8257		9e 5f 06	stz $065f,x			stz 	GNEBegin,x
.825a		ca		dex				dex
.825b		10 fa		bpl $8257			bpl 	_RIOLoop
.825d		60		rts				rts
.825e						GetNextEvent:
.825e		20 00 ff	jsr $ff00			jsr 	kernel.NextEvent 			; get event
.8261		08		php				php									; save yes/no flag.
.8262		b0 29		bcs $828d			bcs 	_GNEExit
.8264		48		pha				pha 								; save registers
.8265		da		phx				phx
.8266		5a		phy				phy
.8267		ad 9b 07	lda $079b			lda 	KNLEvent.type	 			; check for PRESSED or RELEASED
.826a		c9 08		cmp #$08			cmp 	#kernel.event.key.PRESSED
.826c		f0 04		beq $8272			beq 	_GNEKeyEvent
.826e		c9 0a		cmp #$0a			cmp 	#kernel.event.key.RELEASED
.8270		d0 08		bne $827a			bne 	_GNECheckMouseEvent
.8272						_GNEKeyEvent:
.8272		20 4c 83	jsr $834c			jsr 	ProcessKeyboardEvent 		; process keyboard up/down.
.8275		20 69 83	jsr $8369			jsr 	UpdateKeyboardJoystick 		; update the keyboard-joystick.
.8278		80 10		bra $828a			bra 	_GNEEventExit
.827a						_GNECheckMouseEvent:
.827a		c9 0c		cmp #$0c			cmp 	#kernel.event.mouse.DELTA 	; check for move events
.827c		d0 05		bne $8283			bne 	_GNENotDelta
.827e		20 8f 82	jsr $828f			jsr 	ProcessMouseDeltaEvent 		; process them.
.8281		80 07		bra $828a			bra 	_GNEEventExit
.8283						_GNENotDelta:
.8283		c9 0e		cmp #$0e			cmp 	#kernel.event.mouse.CLICKS 	; check for click events
.8285		d0 03		bne $828a			bne 	_GNEEventExit
.8287		20 be 82	jsr $82be			jsr 	ProcessMouseClickEvent 		; process them.
.828a						_GNEEventExit:
.828a		7a		ply				ply 								; restore registers
.828b		fa		plx				plx
.828c		68		pla				pla
.828d						_GNEExit:
.828d		28		plp				plp
.828e		60		rts				rts
.828f						ProcessMouseDeltaEvent:
.828f		a2 23		ldx #$23			ldx 	#MouseDeltaX-GNEBegin
.8291		ad 9e 07	lda $079e			lda 	KNLEvent.mouse.delta.x
.8294		20 e5 82	jsr $82e5			jsr 	PMKAdjustTotal
.8297		20 28 83	jsr $8328			jsr 	PMKAddSubtract
.829a		ad 9f 07	lda $079f			lda 	KNLEvent.mouse.delta.y
.829d		20 e5 82	jsr $82e5			jsr 	PMKAdjustTotal
.82a0		20 28 83	jsr $8328			jsr 	PMKAddSubtract
.82a3		ad a0 07	lda $07a0			lda 	KNLEvent.mouse.delta.z
.82a6		20 e5 82	jsr $82e5			jsr 	PMKAdjustTotal
.82a9		20 28 83	jsr $8328			jsr 	PMKAddSubtract
.82ac		ad a1 07	lda $07a1			lda 	KNLEvent.mouse.delta.buttons
.82af		a2 35		ldx #$35			ldx 	#MouseStatusX-GNEBegin
.82b1		20 d3 82	jsr $82d3			jsr 	PMKOutputButton
.82b4		20 d3 82	jsr $82d3			jsr 	PMKOutputButton
.82b7		20 d3 82	jsr $82d3			jsr 	PMKOutputButton
.82ba		20 f4 82	jsr $82f4			jsr 	PMKClipMouseCoord
.82bd		60		rts				rts
.82be						ProcessMouseClickEvent:
.82be		a2 29		ldx #$29			ldx 	#MouseCountInner-GNEBegin
.82c0		ad 9e 07	lda $079e			lda 	KNLEvent.mouse.clicks.inner
.82c3		20 2c 83	jsr $832c			jsr 	PMKAdd
.82c6		ad 9f 07	lda $079f			lda 	KNLEvent.mouse.clicks.middle
.82c9		20 2c 83	jsr $832c			jsr 	PMKAdd
.82cc		ad a0 07	lda $07a0			lda 	KNLEvent.mouse.clicks.outer
.82cf		20 2c 83	jsr $832c			jsr 	PMKAdd
.82d2		60		rts				rts
.82d3						PMKOutputButton:
.82d3		9e 5f 06	stz $065f,x			stz 	GNEBegin,x 					; button to zero
.82d6		9e 60 06	stz $0660,x			stz 	GNEBegin+1,x
.82d9		6a		ror a				ror 	a 							; shift LSB into carry
.82da		90 06		bcc $82e2			bcc 	_PMKOBExit
.82dc		de 5f 06	dec $065f,x			dec 	GNEBegin,x 					; if set then set to -1
.82df		de 60 06	dec $0660,x			dec 	GNEBegin+1,x
.82e2						_PMKOBExit:
.82e2		e8		inx				inx  								; next button
.82e3		e8		inx				inx
.82e4		60		rts				rts
.82e5						PMKAdjustTotal:
.82e5		48		pha				pha 								; save offset A index X
.82e6		da		phx				phx
.82e7		48		pha				pha 								; point X to the position
.82e8		8a		txa				txa
.82e9		18		clc				clc
.82ea		69 0c		adc #$0c			adc 	#MousePosX-MouseDeltaX
.82ec		aa		tax				tax
.82ed		68		pla				pla
.82ee		20 28 83	jsr $8328			jsr 	PMKAddSubtract 				; reuse the addition code.
.82f1		fa		plx				plx 								; restore XA
.82f2		68		pla				pla
.82f3		60		rts				rts
.82f4						PMKClipMouseCoord:
.82f4		a2 00		ldx #$00			ldx 	#0
.82f6						_PCMCLoop:
.82f6		bd 8f 06	lda $068f,x			lda 	MousePosX+1,x 				; check if -ve
.82f9		10 06		bpl $8301			bpl 	_PCMCNotNeg
.82fb		9e 8e 06	stz $068e,x			stz 	MousePosX,x 				; if so zero position.
.82fe		9e 8f 06	stz $068f,x			stz 	MousePosX+1,x
.8301						_PCMCNotNeg:
.8301		bd 8e 06	lda $068e,x			lda 	MousePosX,x 				; compare pos vs extent
.8304		dd 22 83	cmp $8322,x			cmp 	_PCMCExtent,x
.8307		bd 8f 06	lda $068f,x			lda 	MousePosX+1,x
.830a		fd 23 83	sbc $8323,x			sbc 	_PCMCExtent+1,x
.830d		90 0c		bcc $831b			bcc 	_PCMCNotOver 				; in range ?
.830f		bd 22 83	lda $8322,x			lda 	_PCMCExtent,x 				; no, set to X limit.
.8312		9d 8e 06	sta $068e,x			sta 	MousePosX,x
.8315		bd 23 83	lda $8323,x			lda 	_PCMCExtent+1,x
.8318		9d 8f 06	sta $068f,x			sta 	MousePosX+1,x
.831b						_PCMCNotOver:
.831b		e8		inx				inx
.831c		e8		inx				inx
.831d		e0 06		cpx #$06			cpx 	#3*2
.831f		d0 d5		bne $82f6			bne 	_PCMCLoop
.8321		60		rts				rts
.8322						_PCMCExtent:
>8322		3f 01 ef 00 ff 00				.word 	319,239,255
.8328						PMKAddSubtract:
.8328		c9 00		cmp #$00			cmp 	#0 							; subtracting ?
.832a		30 0e		bmi $833a			bmi 	PMKSubtract
.832c						PMKAdd:
.832c		18		clc				clc
.832d		7d 5f 06	adc $065f,x			adc 	GNEBegin,x
.8330		9d 5f 06	sta $065f,x			sta 	GNEBegin,x
.8333		90 14		bcc $8349			bcc 	PMKExit
.8335		fe 60 06	inc $0660,x			inc 	GNEBegin+1,x
.8338		80 0f		bra $8349			bra 	PMKExit
.833a						PMKSubtract:
.833a		18		clc				clc
.833b		7d 5f 06	adc $065f,x			adc 	GNEBegin,x
.833e		9d 5f 06	sta $065f,x			sta 	GNEBegin,x
.8341		bd 60 06	lda $0660,x			lda 	GNEBegin+1,x
.8344		69 ff		adc #$ff			adc 	#$FF
.8346		9d 60 06	sta $0660,x			sta 	GNEBegin+1,x
.8349						PMKExit:
.8349		e8		inx				inx 								; next slot ?
.834a		e8		inx				inx
.834b		60		rts				rts
.834c						ProcessKeyboardEvent:
.834c		ad 9f 07	lda $079f			lda 	KNLEvent.key.raw 			; raw key code.
.834f		20 8a 83	jsr $838a			jsr 	KeyboardConvertXA  			; convert to index in X, mask in A
.8352		ac 9b 07	ldy $079b			ldy 	KNLEvent.type
.8355		c0 0a		cpy #$0a			cpy 	#kernel.event.key.RELEASED 	; check if pressed/released
.8357		f0 07		beq $8360			beq 	_PKERelease
.8359		1d 60 06	ora $0660,x			ora 	KeyStatus,x 				; set bit
.835c		9d 60 06	sta $0660,x			sta 	KeyStatus,x
.835f		60		rts				rts
.8360						_PKERelease:
.8360		49 ff		eor #$ff			eor 	#$FF						; clear bit
.8362		3d 60 06	and $0660,x			and 	KeyStatus,x
.8365		9d 60 06	sta $0660,x			sta 	KeyStatus,x
.8368		60		rts				rts
.8369						UpdateKeyboardJoystick:
.8369		9c 81 06	stz $0681			stz 	KeyJoystick
.836c		a2 00		ldx #$00			ldx 	#0
.836e						_UKJLoop:
.836e		bd 85 83	lda $8385,x			lda 	_UKJKeys,x 					; which key
.8371		29 1f		and #$1f			and 	#$1F
.8373		a8		tay				tay
.8374		b9 60 06	lda $0660,y			lda 	KeyStatus,y 				; get status
.8377		29 10		and #$10			and 	#$10 						; letters always bit 4 (actually ASCII of L/C)
.8379		18		clc				clc  								; set C if bit set
.837a		69 ff		adc #$ff			adc 	#$FF
.837c		2e 81 06	rol $0681			rol 	KeyJoystick 				; shift into place
.837f		e8		inx				inx
.8380		e0 05		cpx #$05			cpx 	#5 							; do all 5
.8382		d0 ea		bne $836e			bne 	_UKJLoop
.8384		60		rts				rts
.8385						_UKJKeys:
>8385		4c 58 5a 4d 4b					.byte	'L','X','Z','M','K'
.838a						KeyboardConvertXA:
.838a		a2 01		ldx #$01			ldx 	#1 							; set the mask temp to %00000001
.838c		8e 80 06	stx $0680			stx 	KeyMaskTemp
.838f						_KCCALoop:
.838f		18		clc				clc
.8390		69 20		adc #$20			adc 	#$20 						; upper 3 bits are the mask, if causes CS A will be in the range 00-1F
.8392		b0 05		bcs $8399			bcs 	_KCCADone
.8394		0e 80 06	asl $0680			asl 	KeyMaskTemp 				; shift the mask temp
.8397		80 f6		bra $838f			bra 	_KCCALoop
.8399						_KCCADone:
.8399		aa		tax				tax 								; table entry in X
.839a		ad 80 06	lda $0680			lda 	KeyMaskTemp 				; mask temp in A.
.839d		60		rts				rts
.065f						GNEBegin:
.065f						CMDMouseFlag:
>065f								.fill 	1
.0660						KeyStatus:
>0660								.fill 	32
.0680						KeyMaskTemp:
>0680								.fill 	1
.0681						KeyJoystick:
>0681								.fill 	1
.0682						MouseDeltaX:
>0682								.fill 	2
.0684						MouseDeltaY:
>0684								.fill 	2
.0686						MouseDeltaZ:
>0686								.fill 	2
.0688						MouseCountInner:
>0688								.fill 	2
.068a						MouseCountMiddle:
>068a								.fill 	2
.068c						MouseCountOuter:
>068c								.fill 	2
.068e						MousePosX:
>068e								.fill 	2
.0690						MousePosY:
>0690								.fill 	2
.0692						MousePosZ:
>0692								.fill 	2
.0694						MouseStatusX:
>0694								.fill 	2
.0696						MouseStatusY:
>0696								.fill 	2
.0698						MouseStatusZ:
>0698								.fill 	2
.069a						GNEEnd:

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/ab.system/wrapper.asm

=56						KERR_GENERAL = kernel.event.file.ERROR 		; Event $38
=50						KERR_CLOSED = kernel.event.file.CLOSED 		; Event $32
=40						KERR_NOTFOUND = kernel.event.file.NOT_FOUND ; Event $28
=48						KERR_EOF = kernel.event.file.EOF 			; Event $30
=64						KNLReadBufferLen = 64 								; read buffer size.
.839e						KNLSetDrive:
.839e		8d 9a 07	sta $079a			sta 	KNLDefaultDrive
.83a1		60		rts				rts
.83a2						KNLOpenFileWrite:
.83a2		48		pha				pha
.83a3		a9 01		lda #$01			lda 	#kernel.args.file.open.WRITE
.83a5		80 03		bra $83aa			bra 	KNLOpenStart
.83a7						KNLOpenFileRead:
.83a7		48		pha				pha
.83a8		a9 00		lda #$00			lda     #kernel.args.file.open.READ ; set READ mode.
.83aa						KNLOpenStart:
.83aa		85 f5		sta $f5				sta     kernel.args.file.open.mode
.83ac		68		pla				pla
.83ad		20 e8 83	jsr $83e8			jsr 	KNLSetupFileName
.83b0		20 dd 83	jsr $83dd			jsr 	KNLSetEventPointer
.83b3		ad 9a 07	lda $079a			lda 	KNLDefaultDrive 			; currently drive zero only.
.83b6		85 f3		sta $f3				sta 	kernel.args.file.open.drive
.83b8		20 5c ff	jsr $ff5c			jsr     kernel.File.Open 			; open the file and exit.
.83bb		a9 38		lda #$38			lda     #kernel.event.file.ERROR
.83bd		b0 1d		bcs $83dc			bcs     _out
.83bf						_loop
.83bf		20 0c ff	jsr $ff0c			jsr     kernel.Yield    			; event wait
.83c2		20 5e 82	jsr $825e			jsr     GetNextEvent
.83c5		b0 f8		bcs $83bf			bcs     _loop
.83c7		ad 9b 07	lda $079b			lda 	KNLEvent.type
.83ca		c9 2a		cmp #$2a			cmp     #kernel.event.file.OPENED
.83cc		f0 0a		beq $83d8			beq 	_success
.83ce		c9 28		cmp #$28			cmp     #kernel.event.file.NOT_FOUND
.83d0		f0 0a		beq $83dc			beq 	_out
.83d2		c9 38		cmp #$38			cmp     #kernel.event.file.ERROR
.83d4		f0 06		beq $83dc			beq 	_out
.83d6		80 e7		bra $83bf			bra     _loop
.83d8						_success
.83d8		ad 9e 07	lda $079e			lda     KNLEvent.file.stream
.83db		18		clc				clc
.83dc						_out
.83dc		60		rts				rts
.83dd						KNLSetEventPointer:
.83dd		48		pha				pha
.83de		a9 9b		lda #$9b			lda     #KNLEvent & $FF 			; tell kernel where to store event data
.83e0		85 f0		sta $f0				sta     kernel.args.events+0
.83e2		a9 07		lda #$07			lda     #KNLEvent >> 8
.83e4		85 f1		sta $f1				sta     kernel.args.events+1
.83e6		68		pla				pla
.83e7		60		rts				rts
.83e8						KNLSetupFileName:
.83e8		5a		phy				phy 								; save Y on stack
.83e9		85 36		sta $36				sta 	zTemp0 						; save filename position in temp, and in kenrel slot
.83eb		86 37		stx $37				stx 	zTemp0+1
.83ed		85 fb		sta $fb				sta     kernel.args.file.open.fname+0
.83ef		86 fc		stx $fc				stx     kernel.args.file.open.fname+1
.83f1		a0 ff		ldy #$ff			ldy 	#$FF 						; get the filename length => Kernel slot
.83f3						_KNLGetLength:
.83f3		c8		iny				iny
.83f4		b1 36		lda ($36),y			lda 	(zTemp0),y
.83f6		d0 fb		bne $83f3			bne 	_KNLGetLength
.83f8		84 fd		sty $fd				sty 	kernel.args.file.open.fname_len
.83fa		7a		ply				ply
.83fb		60		rts				rts
.83fc						KNLReadBlock:
.83fc		85 f3		sta $f3				sta     kernel.args.file.read.stream
.83fe		86 f4		stx $f4				stx     kernel.args.file.read.buflen
.8400		20 60 ff	jsr $ff60			jsr     kernel.File.Read 			; read request
.8403		a9 38		lda #$38			lda     #kernel.event.file.ERROR    ; Kernel out of events/buffers; shouldn't happen
.8405		b0 2e		bcs $8435			bcs     _KGNBExitFail               ; report as general error
.8407						_KGRBEventLoop:
.8407		20 0c ff	jsr $ff0c			jsr     kernel.Yield    			; event wait
.840a		20 5e 82	jsr $825e			jsr     GetNextEvent
.840d		b0 f8		bcs $8407			bcs     _KGRBEventLoop
.840f		ad 9b 07	lda $079b			lda 	KNLEvent.type 				; get event
.8412		c9 2c		cmp #$2c			cmp     #kernel.event.file.DATA 	; data, return data
.8414		f0 0a		beq $8420			beq     _KNLRBGetNextByte
.8416		c9 38		cmp #$38			cmp     #kernel.event.file.ERROR  	; errors on file i/o, return as appropriate.
.8418		f0 1b		beq $8435			beq 	_KGNBExitFail
.841a		c9 30		cmp #$30			cmp     #kernel.event.file.EOF
.841c		f0 17		beq $8435			beq 	_KGNBExitFail
.841e		80 e7		bra $8407			bra 	_KGRBEventLoop
.8420						_KNLRBGetNextByte:
.8420		a9 9a		lda #$9a			lda     #<KNLReadBuffer 			; Set the target buffer
.8422		85 fb		sta $fb				sta     kernel.args.recv.buf+0
.8424		a9 06		lda #$06			lda     #>KNLReadBuffer
.8426		85 fc		sta $fc				sta     kernel.args.recv.buf+1
.8428		ad a1 07	lda $07a1			lda     KNLEvent.file.data.read 	; Set the target length
.842b		85 fd		sta $fd				sta     kernel.args.recv.buflen
.842d		20 04 ff	jsr $ff04			jsr     kernel.ReadData		       	; Get the data from the kernel  (Synchronous call, no error)
.8430		ad a1 07	lda $07a1			lda     KNLEvent.file.data.read 	; Return # of bytes read (in A)
.8433		18		clc				clc
.8434		60		rts				rts
.8435						_KGNBExitFail:
.8435		38		sec				sec
.8436		60		rts				rts
.8437						KNLWriteBlock:
.8437		da		phx				phx
.8438		5a		phy				phy
.8439		85 f3		sta $f3				sta     kernel.args.file.write.stream ; save the stream.
.843b		a5 36		lda $36				lda     zTemp0 						; save the data location.
.843d		85 fb		sta $fb				sta     kernel.args.file.write.buf+0
.843f		a5 37		lda $37				lda     zTemp0+1
.8441		85 fc		sta $fc				sta     kernel.args.file.write.buf+1
.8443		86 fd		stx $fd				stx     kernel.args.file.write.buflen ; Set the buffer length
.8445		20 64 ff	jsr $ff64			jsr     kernel.File.Write 			; write it out.
.8448		a9 38		lda #$38			lda 	#kernel.event.file.ERROR 	; in case it fails.
.844a		b0 21		bcs $846d			bcs 	_KWBFailed
.844c						_KNLWLoop:
.844c		20 0c ff	jsr $ff0c			jsr     kernel.Yield
.844f		20 5e 82	jsr $825e			jsr     GetNextEvent
.8452		b0 f8		bcs $844c			bcs     _KNLWLoop
.8454		ad 9b 07	lda $079b			lda     KNLEvent.type 				; various errors.
.8457		c9 32		cmp #$32			cmp     #kernel.event.file.CLOSED
.8459		f0 12		beq $846d			beq 	_KWBFailed
.845b		c9 38		cmp #$38			cmp     #kernel.event.file.ERROR
.845d		f0 0e		beq $846d			beq 	_KWBFailed
.845f		c9 30		cmp #$30			cmp     #kernel.event.file.EOF
.8461		f0 0a		beq $846d			beq 	_KWBFailed
.8463		c9 2e		cmp #$2e			cmp     #kernel.event.file.WROTE 	; wait until block write succeeds
.8465		d0 e5		bne $844c			bne 	_KNLWLoop
.8467		18		clc				clc
.8468		ad a1 07	lda $07a1			lda    KNLEvent.file.wrote.wrote 	; get bytes written.
.846b		80 01		bra $846e			bra 	_KWBExit
.846d						_KWBFailed:
.846d		38		sec				sec
.846e						_KWBExit:
.846e		7a		ply				ply
.846f		fa		plx				plx
.8470		60		rts				rts
.8471						KNLCloseFile:
.8471		85 f3		sta $f3				sta     kernel.args.file.close.stream
.8473		20 68 ff	jsr $ff68			jsr     kernel.File.Close
.8476		60		rts				rts
.8477						KNLReadController:
.8477		da		phx				phx
.8478		a6 01		ldx $01				ldx 	1 							; save current I/O in X
.847a		64 01		stz $01				stz 	1 							; switch to I/O 0
.847c		ad 00 dc	lda $dc00			lda 	$DC00  						; read VIA register
.847f		49 ff		eor #$ff			eor 	#$FF 						; make active '1'
.8481		0d 81 06	ora $0681			ora 	KeyJoystick 				; use key joystick.
.8484		86 01		stx $01				stx 	1 							; repair old I/O and exit
.8486		fa		plx				plx
.8487		60		rts				rts
.069a						KNLReadBuffer:
>069a								.fill   256
.079a						KNLDefaultDrive:
>079a								.byte 	?
.079b						KNLEvent
>079b						type        .byte   ?   ; Enum above
>079c						buf         .byte   ?   ; page id or zero
>079d						ext         .byte   ?   ; page id or zero
.079e						key
>079e						keyboard    .byte   ?   ; Keyboard ID
>079f						raw         .byte   ?   ; Raw key ID
>07a0						ascii       .byte   ?   ; ASCII value
>07a1						flags       .byte   ?   ; Flags (META)
=$80						META        = $80       ; Meta key; no associated ASCII value.
.079e						mouse
.079e						delta
>079e						x           .byte   ?
>079f						y           .byte   ?
>07a0						z           .byte   ?
>07a1						buttons     .byte   ?
.079e						clicks
>079e						inner       .byte   ?
>079f						middle      .byte   ?
>07a0						outer       .byte   ?
.079e						joystick
>079e						joy0        .byte   ?
>079f						joy1        .byte   ?
.079e						udp
>079e						token       .byte   ?   ; TODO: break out into fields
.079e						tcp
>079e						len         .byte   ?   ; Raw packet length.
.079e						file
>079e						stream      .byte   ?
>079f						cookie      .byte   ?
.07a0						data
>07a0						requested   .byte   ?   ; Requested number of bytes to read
>07a1						read        .byte   ?   ; Number of bytes actually read
.07a0						wrote
>07a0						requested   .byte   ?   ; Requested number of bytes to read
>07a1						wrote       .byte   ?   ; Number of bytes actually read
.079e						directory
>079e						stream      .byte   ?
>079f						cookie      .byte   ?
.07a0						volume
>07a0						len         .byte   ?   ; Length of volname (in buf)
>07a1						flags       .byte   ?   ; block size, text encoding
.07a0						file
>07a0						len         .byte   ?
>07a1						flags       .byte   ?   ; block scale, text encoding, approx size
.07a0						free
>07a0						flags       .byte   ?   ; block scale, text encoding, approx size

;******  Return to file: _basic.asm


;******  Processing file: ./common/api/api.asm

>ff00						NextEvent   .fill   4   ; Copy the next event into user-space.
>ff04						ReadData    .fill   4   ; Copy primary bulk event data into user-space
>ff08						ReadExt     .fill   4   ; Copy secondary bolk event data into user-space
>ff0c						Yield       .fill   4   ; Give unused time to the kernel.
>ff10						Putch       .fill   4   ; deprecated
>ff14						RunBlock    .fill   4   ; Chain to resident program by block ID.
>ff18						RunNamed    .fill   4   ; Chain to resident program by name.
>ff1c						            .fill   4   ; reserved
>ff20						List        .fill   4   ; Returns a bit-set of available block-accessible devices.
>ff24						GetName     .fill   4   ; Gets the hardware level name of the given block device or media.
>ff28						GetSize     .fill   4   ; Get the number of raw sectors (48 bits) for the given device
>ff2c						Read        .fill   4   ; Read a raw sector (48 bit LBA)
>ff30						Write       .fill   4   ; Write a raw sector (48 bit LBA)
>ff34						Format      .fill   4   ; Perform a low-level format if the media support it.
>ff38						Export      .fill   4   ; Update the FileSystem table with the partition table (if present).
>ff3c						List        .fill   4   ; Returns a bit-set of available logical devices.
>ff40						GetSize     .fill   4   ; Get the size of the partition or logical device in sectors.
>ff44						MkFS        .fill   4   ; Creates a new file-system on the logical device.
>ff48						CheckFS     .fill   4   ; Checks the file-system for errors and corrects them.
>ff4c						Mount       .fill   4   ; Mark the file-system as available for File and Directory operations.
>ff50						Unmount     .fill   4   ; Mark the file-system as unavailable for File and Directory operations.
>ff54						ReadBlock   .fill   4   ; Read a partition-local raw sector on an unmounted device.
>ff58						WriteBlock  .fill   4   ; Write a partition-local raw sector on an unmounted device.
>ff5c						Open        .fill   4   ; Open the given file for read, create, or append.
>ff60						Read        .fill   4   ; Request bytes from a file opened for reading.
>ff64						Write       .fill   4   ; Write bytes to a file opened for create or append.
>ff68						Close       .fill   4   ; Close an open file.
>ff6c						Rename      .fill   4   ; Rename a closed file.
>ff70						Delete      .fill   4   ; Delete a closed file.
>ff74						Open        .fill   4   ; Open a directory for reading.
>ff78						Read        .fill   4   ; Read a directory entry; may also return VOLUME and FREE events.
>ff7c						Close       .fill   4   ; Close a directory once finished reading.
>ff80						MkDir       .fill   4
>ff84						RmDir       .fill   4
>ff88						            .fill   4   ; call gate
>ff8c						GetIP       .fill   4   ; Get the local IP address.
>ff90						SetIP       .fill   4   ; Set the local IP address.
>ff94						GetDNS      .fill   4   ; Get the configured DNS IP address.
>ff98						SetDNS      .fill   4   ; Set the configured DNS IP address.
>ff9c						SendICMP    .fill   4
>ffa0						Match       .fill   4
>ffa4						Init        .fill   4
>ffa8						Send        .fill   4
>ffac						Recv        .fill   4
>ffb0						Open        .fill   4
>ffb4						Accept      .fill   4
>ffb8						Reject      .fill   4
>ffbc						Send        .fill   4
>ffc0						Recv        .fill   4
>ffc4						Close       .fill   4
>ffc8						Reset       .fill   4   ; Re-init the display
>ffcc						GetSize     .fill   4   ; Returns rows/cols in kernel args.
>ffd0						DrawRow     .fill   4   ; Draw text/color buffers left-to-right
>ffd4						DrawColumn  .fill   4   ; Draw text/color buffers top-to-bottom
>ffd8						GetTime     .fill   4
>ffdc						SetTime     .fill   4
>ffe0						GetSysInfo  .fill   4
>ffe4						SetBPS      .fill   4   ; Set the serial BPS (should match the SLIP router's speed).
.00f0						args
.00f0						events
>00f0						dest        .word       ?   ; GetNextEvent copies event data here
>00f2						pending     .byte       ?   ; Negative count of pending events
.00f3						end
.00f3						run
>00f3						block_id    .byte   ?
.00f3						recv
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.00f3						fs
.00f3						format
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.00f3						mkfs
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.00f3						file
.00f3						open
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>00f5						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.00f3						read
>00f3						stream      .byte       ?
>00f4						buflen      .byte       ?
.00f3						write
>00f3						stream      .byte       ?
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.00f3						close
>00f3						stream      .byte       ?
.00f3						rename
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						old         = args.buf
=$fd						old_len     = args.buflen
=$f8						new         = args.ext
=$fa						new_len     = args.extlen
.00f3						delete
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>00f5						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.00f3						directory
.00f3						open
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						path        = args.buf
=$fd						path_len    = args.buflen
.00f3						read
>00f3						stream      .byte       ?
>00f4						buflen      .byte       ?
.00f3						close
>00f3						stream      .byte       ?
.00f3						display
>00f3						x           .byte       ?   ; coordinate or size
>00f4						y           .byte       ?   ; coordinate or size
=$fb						text        = args.buf      ; text
=$f8						color       = args.ext      ; color
=$fb						buf         = args.buf      ; deprecated
=$f8						buf2        = args.ext      ; deprecated
=$fd						buflen      = args.buflen
.00f3						net
=$fb						socket      = args.buf
>00f3						src_port    .word       ?
>00f5						dest_port   .word       ?
>00f7						dest_ip     .fill       4
>00f3						accepted    .byte       ?
=$f8						buf         = args.ext
=$fa						buflen      = args.extlen
=$f8						ext         = $f8
=$fa						extlen      = $fa
=$fb						buf         = $fb
=$fd						buflen      = $fd
=$fe						ptr         = $fe
.0000						args_t
.0000						events
>0000						dest        .word       ?   ; GetNextEvent copies event data here
>0002						pending     .byte       ?   ; Negative count of pending events
.0003						end
.0003						run
>0003						block_id    .byte   ?
.0003						recv
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0003						fs
.0003						format
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0003						mkfs
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0003						file
.0003						open
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0005						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0003						read
>0003						stream      .byte       ?
>0004						buflen      .byte       ?
.0003						write
>0003						stream      .byte       ?
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0003						close
>0003						stream      .byte       ?
.0003						rename
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						old         = args.buf
=$fd						old_len     = args.buflen
=$f8						new         = args.ext
=$fa						new_len     = args.extlen
.0003						delete
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0005						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0003						directory
.0003						open
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						path        = args.buf
=$fd						path_len    = args.buflen
.0003						read
>0003						stream      .byte       ?
>0004						buflen      .byte       ?
.0003						close
>0003						stream      .byte       ?
.0003						display
>0003						x           .byte       ?   ; coordinate or size
>0004						y           .byte       ?   ; coordinate or size
=$fb						text        = args.buf      ; text
=$f8						color       = args.ext      ; color
=$fb						buf         = args.buf      ; deprecated
=$f8						buf2        = args.ext      ; deprecated
=$fd						buflen      = args.buflen
.0003						net
=$fb						socket      = args.buf
>0003						src_port    .word       ?
>0005						dest_port   .word       ?
>0007						dest_ip     .fill       4
>0003						accepted    .byte       ?
=$f8						buf         = args.ext
=$fa						buflen      = args.extlen
=$f8						ext         = $f8
=$fa						extlen      = $fa
=$fb						buf         = $fb
=$fd						buflen      = $fd
=$fe						ptr         = $fe
.0000						event_t
>0000						dest        .word       ?   ; GetNextEvent copies event data here
>0002						pending     .byte       ?   ; Negative count of pending events
.0003						end
.0000						recv_t
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0000						run_t
>0000						block_id    .byte   ?
.0000						fs_t
.0000						format
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0000						mkfs
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0000						fs_mkfs_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0000						file_t
.0000						open
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0002						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0000						read
>0000						stream      .byte       ?
>0001						buflen      .byte       ?
.0000						write
>0000						stream      .byte       ?
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0000						close
>0000						stream      .byte       ?
.0000						rename
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						old         = args.buf
=$fd						old_len     = args.buflen
=$f8						new         = args.ext
=$fa						new_len     = args.extlen
.0000						delete
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0002						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0000						fs_open_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0002						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0000						fs_read_t
>0000						stream      .byte       ?
>0001						buflen      .byte       ?
.0000						fs_write_t
>0000						stream      .byte       ?
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0000						fs_close_t
>0000						stream      .byte       ?
.0000						fs_rename_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						old         = args.buf
=$fd						old_len     = args.buflen
=$f8						new         = args.ext
=$fa						new_len     = args.extlen
.0000						fs_delete_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fnane       = args.buf
=$fd						fname_len   = args.buflen
.0000						dir_t
.0000						open
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						path        = args.buf
=$fd						path_len    = args.buflen
.0000						read
>0000						stream      .byte       ?
>0001						buflen      .byte       ?
.0000						close
>0000						stream      .byte       ?
.0000						dir_open_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						path        = args.buf
=$fd						path_len    = args.buflen
.0000						dir_read_t
>0000						stream      .byte       ?
>0001						buflen      .byte       ?
.0000						dir_close_t
>0000						stream      .byte       ?
.0000						display_t
>0000						x           .byte       ?   ; coordinate or size
>0001						y           .byte       ?   ; coordinate or size
=$fb						text        = args.buf      ; text
=$f8						color       = args.ext      ; color
=$fb						buf         = args.buf      ; deprecated
=$f8						buf2        = args.ext      ; deprecated
=$fd						buflen      = args.buflen
.0000						net_t
=$fb						socket      = args.buf
>0000						src_port    .word       ?
>0002						dest_port   .word       ?
>0004						dest_ip     .fill       4
>0000						accepted    .byte       ?
=$f8						buf         = args.ext
=$fa						buflen      = args.extlen
>0000						            .word   ?   ; Reserved
>0002						            .word   ?   ; Deprecated
>0004						JOYSTICK    .word   ?   ; Game Controller changes.
>0006						DEVICE      .word   ?   ; Device added/removed.
>0008						PRESSED     .word   ?   ; Key pressed
>000a						RELEASED    .word   ?   ; Key released.
>000c						DELTA       .word   ?   ; Regular mouse move and button state
>000e						CLICKS      .word   ?   ; Click counts
>0010						NAME        .word   ?
>0012						SIZE        .word   ?
>0014						DATA        .word   ?   ; The read request has succeeded.
>0016						WROTE       .word   ?   ; The write request has completed.
>0018						FORMATTED   .word   ?   ; The low-level format has completed.
>001a						ERROR       .word   ?
>001c						SIZE        .word   ?
>001e						CREATED     .word   ?
>0020						CHECKED     .word   ?
>0022						DATA        .word   ?   ; The read request has succeeded.
>0024						WROTE       .word   ?   ; The write request has completed.
>0026						ERROR       .word   ?
>0028						NOT_FOUND   .word   ?   ; The file file was not found.
>002a						OPENED      .word   ?   ; The file was successfully opened.
>002c						DATA        .word   ?   ; The read request has succeeded.
>002e						WROTE       .word   ?   ; The write request has completed.
>0030						EOF         .word   ?   ; All file data has been read.
>0032						CLOSED      .word   ?   ; The close request has completed.
>0034						RENAMED     .word   ?   ; The rename request has completed.
>0036						DELETED     .word   ?   ; The delete request has completed.
>0038						ERROR       .word   ?   ; An error occured; close the file if opened.
>003a						OPENED      .word   ?   ; The directory open request succeeded.
>003c						VOLUME      .word   ?   ; A volume record was found.
>003e						FILE        .word   ?   ; A file record was found.
>0040						FREE        .word   ?   ; A file-system free-space record was found.
>0042						EOF         .word   ?   ; All data has been read.
>0044						CLOSED      .word   ?   ; The directory file has been closed.
>0046						ERROR       .word   ?   ; An error occured; user should close.
>0048						TCP         .word   ?
>004a						UDP         .word   ?
.0000						event_t
>0000						type        .byte   ?   ; Enum above
>0001						buf         .byte   ?   ; page id or zero
>0002						ext         .byte   ?   ; page id or zero
.0003						key
>0003						keyboard    .byte   ?   ; Keyboard ID
>0004						raw         .byte   ?   ; Raw key ID
>0005						ascii       .byte   ?   ; ASCII value
>0006						flags       .byte   ?   ; Flags (META)
=$80						META        = $80       ; Meta key; no associated ASCII value.
.0003						mouse
.0003						delta
>0003						x           .byte   ?
>0004						y           .byte   ?
>0005						z           .byte   ?
>0006						buttons     .byte   ?
.0003						clicks
>0003						inner       .byte   ?
>0004						middle      .byte   ?
>0005						outer       .byte   ?
.0003						joystick
>0003						joy0        .byte   ?
>0004						joy1        .byte   ?
.0003						udp
>0003						token       .byte   ?   ; TODO: break out into fields
.0003						tcp
>0003						len         .byte   ?   ; Raw packet length.
.0003						file
>0003						stream      .byte   ?
>0004						cookie      .byte   ?
.0005						data
>0005						requested   .byte   ?   ; Requested number of bytes to read
>0006						read        .byte   ?   ; Number of bytes actually read
.0005						wrote
>0005						requested   .byte   ?   ; Requested number of bytes to read
>0006						wrote       .byte   ?   ; Number of bytes actually read
.0003						directory
>0003						stream      .byte   ?
>0004						cookie      .byte   ?
.0005						volume
>0005						len         .byte   ?   ; Length of volname (in buf)
>0006						flags       .byte   ?   ; block size, text encoding
.0005						file
>0005						len         .byte   ?
>0006						flags       .byte   ?   ; block scale, text encoding, approx size
.0005						free
>0005						flags       .byte   ?   ; block scale, text encoding, approx size
.0000						key_t
>0000						keyboard    .byte   ?   ; Keyboard ID
>0001						raw         .byte   ?   ; Raw key ID
>0002						ascii       .byte   ?   ; ASCII value
>0003						flags       .byte   ?   ; Flags (META)
=$80						META        = $80       ; Meta key; no associated ASCII value.
.0000						mouse_t
.0000						delta
>0000						x           .byte   ?
>0001						y           .byte   ?
>0002						z           .byte   ?
>0003						buttons     .byte   ?
.0000						clicks
>0000						inner       .byte   ?
>0001						middle      .byte   ?
>0002						outer       .byte   ?
.0000						m_delta_t
>0000						x           .byte   ?
>0001						y           .byte   ?
>0002						z           .byte   ?
>0003						buttons     .byte   ?
.0000						m_clicks_t
>0000						inner       .byte   ?
>0001						middle      .byte   ?
>0002						outer       .byte   ?
.0000						joystick_t
>0000						joy0        .byte   ?
>0001						joy1        .byte   ?
.0000						file_t
>0000						stream      .byte   ?
>0001						cookie      .byte   ?
.0002						data
>0002						requested   .byte   ?   ; Requested number of bytes to read
>0003						read        .byte   ?   ; Number of bytes actually read
.0002						wrote
>0002						requested   .byte   ?   ; Requested number of bytes to read
>0003						wrote       .byte   ?   ; Number of bytes actually read
.0000						fs_data_t
>0000						requested   .byte   ?   ; Requested number of bytes to read
>0001						read        .byte   ?   ; Number of bytes actually read
.0000						fs_wrote_t
>0000						requested   .byte   ?   ; Requested number of bytes to read
>0001						wrote       .byte   ?   ; Number of bytes actually read
.0000						dir_t
>0000						stream      .byte   ?
>0001						cookie      .byte   ?
.0002						volume
>0002						len         .byte   ?   ; Length of volname (in buf)
>0003						flags       .byte   ?   ; block size, text encoding
.0002						file
>0002						len         .byte   ?
>0003						flags       .byte   ?   ; block scale, text encoding, approx size
.0002						free
>0002						flags       .byte   ?   ; block scale, text encoding, approx size
.0000						dir_vol_t
>0000						len         .byte   ?   ; Length of volname (in buf)
>0001						flags       .byte   ?   ; block size, text encoding
.0000						dir_file_t
>0000						len         .byte   ?
>0001						flags       .byte   ?   ; block scale, text encoding, approx size
.0000						dir_free_t
>0000						flags       .byte   ?   ; block scale, text encoding, approx size
.0000						dir_ext_t
>0000						free        .fill   6   ; blocks used/free
.0000						udp_t
>0000						token       .byte   ?   ; TODO: break out into fields
.0000						tcp_t
>0000						len         .byte   ?   ; Raw packet length.

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/assembler.asm

.8488						AssembleGroup1:
.8488		a9 ff		lda #$ff			lda 	#$FF 						; flag for group 1 / mask.
.848a		8d 21 04	sta $0421			sta 	ModeMask 					; initialise the mode mask - all for all
.848d		80 02		bra $8491			bra 	AsmGroup12
.848f						AssembleGroup2:
.848f		a9 00		lda #$00			lda 	#$00 						; flag for group 2
.8491						AsmGroup12:
.8491		8d 1f 04	sta $041f			sta 	IsGroup1 					; save the 'group 1' flag
.8494		68		pla				pla 								; pop the return address to access the information following.
.8495		fa		plx				plx
.8496		20 1d 85	jsr $851d			jsr 	AccessParameters 			; get opcode and save as base
.8499		8d 20 04	sta $0420			sta 	BaseOpcode
.849c		ad 1f 04	lda $041f			lda 	IsGroup1 					; skip if group 1 as we don't have a complex mask.
.849f		d0 08		bne $84a9			bne 	_AG12HaveMask
.84a1		a9 02		lda #$02			lda 	#2 							; if group 2 the second parameter is the mask
.84a3		20 25 85	jsr $8525			jsr 	GetParameter		 		; e.g. which modes are supported for this operand
.84a6		8d 21 04	sta $0421			sta 	ModeMask
.84a9						_AG12HaveMask:
.84a9		20 59 86	jsr $8659			jsr 	TypeAndCalculateOperand 	; get zero page type
.84ac		da		phx				phx 								; save found address mode
.84ad		20 89 85	jsr $8589			jsr 	AssembleModeX
.84b0		fa		plx				plx  								; restore address mode
.84b1		b0 0b		bcs $84be			bcs 	_AG12Exit
.84b3		20 bf 84	jsr $84bf			jsr 	PromoteToAbsolute  			; promote ZP to ABS and try that
.84b6		20 89 85	jsr $8589			jsr 	AssembleModeX
.84b9		b0 03		bcs $84be			bcs 	_AG12Exit
.84bb		4c 31 ac	jmp $ac31			jmp 	SyntaxError 				; can't do either, so must be wrong mode/operand.
.84be						_AG12Exit:
.84be		60		rts				rts
.84bf						PromoteToAbsolute:
.84bf		a9 6c		lda #$6c			lda 	#AM_ABS 					; lda xx
.84c1		e0 e4		cpx #$e4			cpx 	#AM_ZEROPAGE
.84c3		f0 19		beq $84de			beq 	_PTADo
.84c5		a9 7c		lda #$7c			lda 	#AM_ABSX 					; lda xx,X
.84c7		e0 f4		cpx #$f4			cpx 	#AM_ZEROX
.84c9		f0 13		beq $84de			beq 	_PTADo
.84cb		a9 78		lda #$78			lda 	#AM_ABSY 					; lda xx,Y
.84cd		e0 80		cpx #$80			cpx 	#AM_ZEROY
.84cf		f0 0d		beq $84de			beq 	_PTADo
.84d1		a9 01		lda #$01			lda 	#AM_INDABS 					; lda (xx) (jump)
.84d3		e0 d1		cpx #$d1			cpx 	#AM_IND
.84d5		f0 07		beq $84de			beq 	_PTADo
.84d7		a9 02		lda #$02			lda 	#AM_INDABSX 				; lda (xx,x) (jump)
.84d9		e0 c0		cpx #$c0			cpx 	#AM_INDX
.84db		f0 01		beq $84de			beq 	_PTADo
.84dd		60		rts				rts
.84de						_PTADo:
.84de		aa		tax				tax
.84df		60		rts				rts
.84e0						AssembleGroup3:
.84e0		68		pla				pla 								; get parameters, which is just the opcode.
.84e1		fa		plx				plx
.84e2		20 1d 85	jsr $851d			jsr 	AccessParameters 			; get and output opcode
.84e5		20 35 85	jsr $8535			jsr 	AssemblerWriteByte
.84e8		20 bd 86	jsr $86bd			jsr 	CalculateOperand 			; get a 16 bit operand
.84eb		a5 58		lda $58				lda 	NSMantissa0 				; calculate the offset
.84ed		38		sec				sec
.84ee		ed 1a 04	sbc $041a			sbc 	AssemblerAddress
.84f1		48		pha				pha 								; LSB in A
.84f2		a5 60		lda $60				lda 	NSMantissa1
.84f4		ed 1b 04	sbc $041b			sbc 	AssemblerAddress+1
.84f7		aa		tax				tax 								; MSB in X
.84f8		68		pla				pla
.84f9		18		clc				clc 								; $80 to easy check $80-$7F, plus 1 for offset error
.84fa		69 7f		adc #$7f			adc 	#$7F
.84fc		90 01		bcc $84ff			bcc 	_AG3NoCarry
.84fe		e8		inx				inx
.84ff						_AG3NoCarry:
.84ff		38		sec				sec 								; fix back and write out anyways.
.8500		e9 80		sbc #$80			sbc 	#$80
.8502		20 35 85	jsr $8535			jsr 	AssemblerWriteByte
.8505		e0 00		cpx #$00			cpx 	#0 							; was it in range
.8507		f0 0a		beq $8513			beq 	_AG3Exit
.8509		ad 1c 04	lda $041c			lda 	AssemblerControl 			; are we allowing bad values ?
.850c		29 01		and #$01			and 	#1
.850e		f0 03		beq $8513			beq 	_AG3Exit
.8510		4c 36 ac	jmp $ac36			jmp 	RangeError 					; no, branch is out of range
.8513						_AG3Exit:
.8513		60		rts				rts
.8514						AssembleGroup4:
.8514		68		pla				pla 								; pop address
.8515		fa		plx				plx
.8516		20 1d 85	jsr $851d			jsr 	AccessParameters 			; access and get first
.8519		20 35 85	jsr $8535			jsr 	AssemblerWriteByte 			; output it.
.851c		60		rts				rts
.851d						AccessParameters:
.851d		8d 1d 04	sta $041d			sta 	ParamStart
.8520		8e 1e 04	stx $041e			stx 	ParamStart+1
.8523		a9 01		lda #$01			lda 	#1
.8525						GetParameter:
.8525		5a		phy				phy
.8526		a8		tay				tay
.8527		ad 1d 04	lda $041d			lda 	ParamStart
.852a		85 36		sta $36				sta 	zTemp0
.852c		ad 1e 04	lda $041e			lda 	ParamStart+1
.852f		85 37		sta $37				sta 	zTemp0+1
.8531		b1 36		lda ($36),y			lda 	(zTemp0),y
.8533		7a		ply				ply
.8534		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/aswrite.asm

.8535						AssemblerWriteByte:
.8535		48		pha			pha
.8536		ad 1c 04	lda $041c		lda 	AssemblerControl 				; check printing bytes ?
.8539		29 02		and #$02		and 	#2
.853b		f0 1b		beq $8558		beq 	_AWBNoPrint
.853d		ad 1b 04	lda $041b		lda		AssemblerAddress+1 				; print address
.8540		20 73 85	jsr $8573		jsr 	PrintHex
.8543		ad 1a 04	lda $041a		lda		AssemblerAddress
.8546		20 73 85	jsr $8573		jsr 	PrintHex
.8549		a9 20		lda #$20		lda 	#' '
.854b		20 43 80	jsr $8043		jsr 	EXTPrintCharacter
.854e		68		pla			pla 									; print byte
.854f		48		pha			pha
.8550		20 73 85	jsr $8573		jsr 	PrintHex
.8553		a9 0d		lda #$0d		lda 	#13
.8555		20 43 80	jsr $8043		jsr 	EXTPrintCharacter
.8558						_AWBNoPrint:
.8558		ad 1a 04	lda $041a		lda		AssemblerAddress				; copy address to zTemp0
.855b		85 36		sta $36			sta 	zTemp0
.855d		ad 1b 04	lda $041b		lda		AssemblerAddress+1
.8560		f0 0e		beq $8570		beq 	_AWBRange
.8562		85 37		sta $37			sta 	zTemp0+1
.8564		68		pla			pla 									; write byte out
.8565		92 36		sta ($36)		sta 	(zTemp0)
.8567		ee 1a 04	inc $041a		inc 	AssemblerAddress 				; bump address
.856a		d0 03		bne $856f		bne 	_AWBNoCarry
.856c		ee 1b 04	inc $041b		inc 	AssemblerAddress+1
.856f						_AWBNoCarry:
.856f		60		rts			rts
.8570						_AWBRange:
.8570		4c 36 ac	jmp $ac36		jmp 	RangeError
.8573						PrintHex:
.8573		48		pha				pha
.8574		4a		lsr a				lsr 	a
.8575		4a		lsr a				lsr 	a
.8576		4a		lsr a				lsr 	a
.8577		4a		lsr a				lsr 	a
.8578		20 7c 85	jsr $857c			jsr 	_PrintNibble
.857b		68		pla				pla
.857c						_PrintNibble:
.857c		29 0f		and #$0f			and 	#15
.857e		c9 0a		cmp #$0a			cmp 	#10
.8580		90 02		bcc $8584			bcc 	_NoShift
.8582		69 06		adc #$06			adc 	#6
.8584						_NoShift:
.8584		69 30		adc #$30			adc 	#48
.8586		4c 43 80	jmp $8043			jmp 	EXTPrintCharacter

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/instruction.asm

.8589						AssembleModeX:
.8589		5a		phy				phy
.858a		ad 1f 04	lda $041f			lda 	IsGroup1
.858d		f0 17		beq $85a6			beq 	_AMXGroup2
.858f		8a		txa				txa 							; is it in group # 1
.8590		29 40		and #$40			and 	#AM_ISG1
.8592		f0 4d		beq $85e1			beq 	_AMXFail 				; no, give up.
.8594		8a		txa				txa 							; get back.
.8595		29 1f		and #$1f			and 	#$1F 					; this is now the offset.
.8597		e0 e0		cpx #$e0			cpx 	#AM_IMMEDIATE 			; if not immediate, we can continue.
.8599		d0 22		bne $85bd			bne 	_AMXHaveInfo
.859b		ad 20 04	lda $0420			lda 	BaseOpcode 				; cannot store immediate.
.859e		c9 81		cmp #$81			cmp 	#$81
.85a0		f0 3f		beq $85e1			beq 	_AMXFail
.85a2		a9 08		lda #$08			lda 	#8 						; if immediate we use offset 8.
.85a4		80 17		bra $85bd			bra 	_AMXHaveInfo 			; odd design decision there.
.85a6						_AMXGroup2:
.85a6		8a		txa				txa 							; is it in group 2 ?
.85a7		29 20		and #$20			and 	#AM_ISG2
.85a9		f0 36		beq $85e1			beq 	_AMXFail 				; no, give up.
.85ab		8a		txa				txa 							; get the offset into Y
.85ac		29 1f		and #$1f			and 	#$1F
.85ae		4a		lsr a				lsr 	a 						; make it 0-7.
.85af		4a		lsr a				lsr  	a
.85b0		a8		tay				tay
.85b1		ad 21 04	lda $0421			lda 	ModeMask 				; shift the modemask left so you can check it against the requested offset
.85b4						_AMXCheckOkay:
.85b4		0a		asl a				asl 	a 						; shift modemask left enough times to check legitimate.
.85b5		88		dey				dey
.85b6		10 fc		bpl $85b4			bpl 	_AMXCheckOkay
.85b8		90 27		bcc $85e1			bcc 	_AMXFail 				; not allowed.
.85ba		8a		txa				txa  							; get mask back
.85bb		29 1f		and #$1f			and 	#$1F
.85bd						_AMXHaveInfo:
.85bd		e0 00		cpx #$00			cpx 	#$00 					; does it *require* an 8 bit operand
.85bf		10 04		bpl $85c5			bpl 	_AMXAnySize 			; checking bit 7, the zero page opcode flag.
.85c1		a4 60		ldy $60				ldy 	NSMantissa1 			; fail if it is outside range, e.g. the MSB is set.
.85c3		d0 1c		bne $85e1			bne 	_AMXFail
.85c5						_AMXAnySize:
.85c5		18		clc				clc 							; add offset to the base opcode
.85c6		6d 20 04	adc $0420			adc 	BaseOpcode
.85c9						_AMXOutputCode:
.85c9		20 35 85	jsr $8535			jsr 	AssemblerWriteByte 		; write the opcode out.
.85cc		e0 28		cpx #$28			cpx 	#AM_ACC 				; A mode (e.g. ASL)
.85ce		f0 0e		beq $85de			beq 	_AMXExit
.85d0		a5 58		lda $58				lda 	NSMantissa0 			; write LSB operand
.85d2		20 35 85	jsr $8535			jsr 	AssemblerWriteByte
.85d5		e0 00		cpx #$00			cpx 	#$00 					; zeropage ?
.85d7		30 05		bmi $85de			bmi 	_AMXExit
.85d9		a5 60		lda $60				lda 	NSMantissa1 			; write MSB operand
.85db		20 35 85	jsr $8535			jsr 	AssemblerWriteByte
.85de						_AMXExit:
.85de		7a		ply				ply
.85df		38		sec				sec
.85e0		60		rts				rts
.85e1						_AMXFail:
.85e1		a0 00		ldy #$00			ldy 	#0
.85e3						_AMXCheckOddities:
.85e3		8a		txa				txa
.85e4		d9 0b 86	cmp $860b,y			cmp 	ExtraOpcode+2,y 		; match address mode
.85e7		d0 15		bne $85fe			bne 	_AMXCONext
.85e9		b9 09 86	lda $8609,y			lda 	ExtraOpcode+0,y 		; do the base opcodes match
.85ec		cd 20 04	cmp $0420			cmp 	BaseOpcode
.85ef		d0 0d		bne $85fe			bne 	_AMXCONext
.85f1		e0 00		cpx #$00			cpx 	#$00 					; requires zero page ?
.85f3		10 04		bpl $85f9			bpl 	_AMXCONotZero
.85f5		a5 60		lda $60				lda 	NSMantissa1
.85f7		d0 05		bne $85fe			bne 	_AMXCONext
.85f9						_AMXCONotZero:
.85f9		b9 0a 86	lda $860a,y			lda 	ExtraOpcode+1,y 		; get new opcode
.85fc		80 cb		bra $85c9			bra 	_AMXOutputCode 			; and assemble it
.85fe						_AMXCONext:
.85fe		c8		iny				iny
.85ff		c8		iny				iny
.8600		c8		iny				iny
.8601		b9 09 86	lda $8609,y			lda 	ExtraOpcode+0,y 		; end of table
.8604		d0 dd		bne $85e3			bne 	_AMXCheckOddities
.8606						_AMXCOFail:
.8606		7a		ply				ply
.8607		18		clc				clc
.8608		60		rts				rts
.8609						ExtraOpcode:
>8609		40 6c 01					.byte $40,$6c,AM_INDABS 	; jump
>860c		40 7c 02					.byte $40,$7C,AM_INDABSX 	; jump
>860f		a2 be 78					.byte $a2,$BE,AM_ABSY 		; ldx
>8612		a2 b6 80					.byte $a2,$B6,AM_ZEROY 		; ldx
>8615		82 96 80					.byte $82,$96,AM_ZEROY 		; stx
>8618		e2 1a 28					.byte $e2,$1a,AM_ACC 		; inc
>861b		c2 3a 28					.byte $c2,$3a,AM_ACC 		; dec
>861e		20 89 e0					.byte $20,$89,AM_IMMEDIATE 	; bit
>8621		60 9c 6c					.byte $60,$9c,AM_ABS 		; stz
>8624		60 9e 7c					.byte $60,$9e,AM_ABSX 		; stz
>8627		00						.byte $00

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/label.asm

.8628						LabelHere:
.8628		c8		iny				iny 								; skip .
.8629		a2 00		ldx #$00			ldx 	#0 							; get a term
.862b		20 89 a3	jsr $a389			jsr 	EvaluateTerm
.862e		a5 50		lda $50				lda 	NSStatus 					; needs to be an integer reference.
.8630		c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.8632		d0 22		bne $8656			bne 	_ALType 					; otherwise typing error
.8634		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy reference address to zTemp0
.8636		85 36		sta $36				sta 	zTemp0 						; (e.g. where we store the address)
.8638		b5 60		lda $60,x			lda 	NSMantissa1,x
.863a		85 37		sta $37				sta 	zTemp0+1
.863c		5a		phy				phy 								; copy address in (64k)
.863d		a0 01		ldy #$01			ldy 	#1
.863f		ad 1a 04	lda $041a			lda	 	AssemblerAddress
.8642		92 36		sta ($36)			sta 	(zTemp0)
.8644		ad 1b 04	lda $041b			lda	 	AssemblerAddress+1
.8647		91 36		sta ($36),y			sta 	(zTemp0),y
.8649		c8		iny				iny
.864a		a9 00		lda #$00			lda 	#0 							; zero the rest.
.864c		91 36		sta ($36),y			sta 	(zTemp0),y
.864e		c8		iny				iny
.864f		91 36		sta ($36),y			sta 	(zTemp0),y
.8651		c8		iny				iny
.8652		91 36		sta ($36),y			sta 	(zTemp0),y
.8654		7a		ply				ply
.8655		60		rts				rts
.8656						_ALType:
.8656		4c 3b ac	jmp $ac3b			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/operands.asm

.8659						TypeAndCalculateOperand:
.8659		b1 30		lda ($30),y			lda 	(codePtr),y
.865b		a2 28		ldx #$28			ldx 	#AM_ACC 					; ACC if : or EOL
.865d		c9 3a		cmp #$3a			cmp 	#KWD_COLON
.865f		f0 5b		beq $86bc			beq 	_TACOExit
.8661		c9 80		cmp #$80			cmp 	#KWC_EOL
.8663		f0 57		beq $86bc			beq 	_TACOExit
.8665		c8		iny				iny
.8666		a2 e0		ldx #$e0			ldx 	#AM_IMMEDIATE
.8668		c9 23		cmp #$23			cmp 	#KWD_HASH 					; if hash, then immediate - constant.
.866a		f0 51		beq $86bd			beq 	CalculateOperand
.866c		c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; if ( then check for indirection
.866e		f0 1f		beq $868f			beq 	_TACOIndirect
.8670		88		dey				dey 								; undo get of first character
.8671		20 bd 86	jsr $86bd			jsr 	CalculateOperand 			; get operand
.8674		b1 30		lda ($30),y			lda 	(codePtr),y
.8676		a2 e4		ldx #$e4			ldx 	#AM_ZEROPAGE 				; if not, try zero page (then absolute)
.8678		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.867a		d0 40		bne $86bc			bne 	_TACOExit
.867c		c8		iny				iny
.867d		20 c7 86	jsr $86c7			jsr 	TACOCheckXY 				; extract X,Y or 0 (neither) from the variable.
.8680		a2 f4		ldx #$f4			ldx 	#AM_ZEROX 					; check for X
.8682		c9 58		cmp #$58			cmp 	#'X'
.8684		f0 36		beq $86bc			beq 	_TACOExit
.8686		a2 80		ldx #$80			ldx 	#AM_ZEROY 					; check for Y
.8688		c9 59		cmp #$59			cmp 	#'Y'
.868a		f0 30		beq $86bc			beq 	_TACOExit
.868c						_TACOSyntax:
.868c		4c 31 ac	jmp $ac31			jmp 	SyntaxError
.868f						_TACOIndirect:
.868f		20 bd 86	jsr $86bd			jsr 	CalculateOperand 			; get the operand
.8692		b1 30		lda ($30),y			lda 	(codePtr),y
.8694		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if , then it must be ,X)
.8696		f0 17		beq $86af			beq 	_TACOIndX
.8698		20 1c 9a	jsr $9a1c			jsr 	CheckRightBracket  			; otherwise must be ) or ),Y
.869b		b1 30		lda ($30),y			lda 	(codePtr),y
.869d		a2 d1		ldx #$d1			ldx 	#AM_IND
.869f		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not comma then exit with (xx)
.86a1		d0 19		bne $86bc			bne 	_TACOExit
.86a3		c8		iny				iny
.86a4		20 c7 86	jsr $86c7			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.86a7		c9 59		cmp #$59			cmp 	#'Y' 						; check Y
.86a9		d0 e1		bne $868c			bne 	_TACOSyntax
.86ab		a2 d0		ldx #$d0			ldx 	#AM_INDY
.86ad		80 0d		bra $86bc			bra 	_TACOExit
.86af						_TACOIndX:
.86af		c8		iny				iny
.86b0		20 c7 86	jsr $86c7			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.86b3		c9 58		cmp #$58			cmp 	#'X' 						; check X
.86b5		d0 d5		bne $868c			bne 	_TACOSyntax
.86b7		20 1c 9a	jsr $9a1c			jsr 	CheckRightBracket			; check )
.86ba		a2 c0		ldx #$c0			ldx 	#AM_INDX
.86bc						_TACOExit:
.86bc		60		rts				rts
.86bd						CalculateOperand:
.86bd		48		pha				pha
.86be		da		phx				phx
.86bf		a2 00		ldx #$00			ldx 	#0 							; get 16 bit integer in Slot 0
.86c1		20 15 a9	jsr $a915			jsr 	Evaluate16BitInteger
.86c4		fa		plx				plx
.86c5		68		pla				pla
.86c6		60		rts				rts
.86c7						TACOCheckXY:
.86c7		b1 30		lda ($30),y			lda 	(codePtr),y
.86c9		29 c0		and #$c0			and 	#$C0 						; check it is an identifier reference.
.86cb		c9 40		cmp #$40			cmp 	#$40
.86cd		d0 21		bne $86f0			bne 	_TCXYFail
.86cf		b1 30		lda ($30),y			lda 	(codePtr),y
.86d1		18		clc				clc
.86d2		69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.86d4		85 37		sta $37				sta 	zTemp0+1
.86d6		c8		iny				iny
.86d7		b1 30		lda ($30),y			lda 	(codePtr),y
.86d9		c8		iny				iny
.86da		85 36		sta $36				sta 	zTemp0
.86dc		5a		phy				phy 								; save position
.86dd		a0 02		ldy #$02			ldy 	#2 							; type is integer ?
.86df		b1 36		lda ($36),y			lda 	(zTemp0),y
.86e1		d0 0c		bne $86ef			bne 	_TCXYPopFail
.86e3		a0 08		ldy #$08			ldy 	#8 							; get first character, should have bit 7 set as also last.
.86e5		b1 36		lda ($36),y			lda 	(zTemp0),y
.86e7		c9 d8		cmp #$d8			cmp 	#'X'+$80 					; should be X or Y
.86e9		f0 08		beq $86f3			beq 	_TCXYFound
.86eb		c9 d9		cmp #$d9			cmp 	#'Y'+$80
.86ed		f0 04		beq $86f3			beq 	_TCXYFound
.86ef						_TCXYPopFail:
.86ef		7a		ply				ply
.86f0						_TCXYFail:
.86f0		a9 00		lda #$00			lda 	#0
.86f2		60		rts				rts
.86f3						_TCXYFound:
.86f3		7a		ply				ply 								; restore position
.86f4		29 7f		and #$7f			and 	#$7F 						; throw bit 7
.86f6		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/backload.asm

.86f7						BackloadProgram:
.86f7		20 fc 93	jsr $93fc			jsr 	NewProgram 					; does the actual NEW.
.86fa		a2 87		ldx #$87			ldx 	#_BLLoad >> 8
.86fc		a9 57		lda #$57			lda 	#_BLLoad & $FF
.86fe		20 94 9a	jsr $9a94			jsr 	PrintStringXA
.8701		a9 14		lda #$14			lda 	#SOURCE_ADDRESS >> 13 		; start page
.8703		8d a2 07	sta $07a2			sta 	BackLoadPage
.8706		a9 00		lda #$00			lda 	#(($6000) & $FF)
.8708		8d a3 07	sta $07a3			sta 	0+BackLoadPointer
.870b		a9 60		lda #$60			lda 	#(($6000) >> 8)
.870d		8d a4 07	sta $07a4			sta 	1+BackLoadPointer
.8710		9c a5 07	stz $07a5			stz 	BackLoadLast 				; reset backload last.
.8713		9c a6 07	stz $07a6			stz 	BackLoadLast+1
.8716		a9 ff		lda #$ff			lda 	#$FF
.8718		8d fa ff	sta $fffa			sta 	$FFFA
.871b						_BPLoop:
.871b		a2 ff		ldx #$ff			ldx 	#$FF
.871d		20 8c 87	jsr $878c			jsr 	BLReadByte 					; read a byte
.8720		c9 00		cmp #$00			cmp 	#0
.8722		f0 2c		beq $8750			beq 	_BPExit 					; if 0 exit
.8724		30 2a		bmi $8750			bmi 	_BPExit 					; if -ve exit
.8726						_BPCopy:
.8726		e8		inx				inx  								; copy byte into the lineBuffer
.8727		9d 26 05	sta $0526,x			sta 	lineBuffer,x
.872a		9e 27 05	stz $0527,x			stz 	lineBuffer+1,x
.872d		20 8c 87	jsr $878c			jsr 	BLReadByte 					; read next byte
.8730		30 0a		bmi $873c			bmi 	_BPEndLine 					; -ve = EOL
.8732		c9 09		cmp #$09			cmp 	#9 							; handle TAB, make it space.
.8734		d0 02		bne $8738			bne 	_BPNotTab
.8736		a9 20		lda #$20			lda 	#' '
.8738						_BPNotTab:
.8738		c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.873a		b0 ea		bcs $8726			bcs 	_BPCopy 					; until a control character, should be 13 received.
.873c						_BPEndLine:
.873c		20 89 80	jsr $8089			jsr 	TKTokeniseLine 				; tokenise the line.
.873f		ad 27 04	lda $0427			lda 	tokenLineNumber 			; line number = 0
.8742		0d 28 04	ora $0428			ora 	tokenLineNumber+1
.8745		f0 d4		beq $871b			beq 	_BPLoop 					; not legal code, blank line or maybe a comment.
.8747		20 6c 87	jsr $876c			jsr 	BLCheckLast 				; check last backload okay.
.874a		38		sec				sec 								; append not insert
.874b		20 25 ae	jsr $ae25			jsr 	MemoryInsertLine 			; append to current program
.874e		80 cb		bra $871b			bra 	_BPLoop
.8750						_BPExit:
.8750		9c fa ff	stz $fffa			stz 	$FFFA
.8753		20 c4 98	jsr $98c4			jsr 	ClearSystem 				; clear variables etc.
.8756		60		rts				rts
.8757						_BLLoad:
>8757		4c 6f 61 64 69 6e 67 20				.text 	"Loading from Memory",13,0
>875f		66 72 6f 6d 20 4d 65 6d 6f 72 79 0d 00
.876c						BLCheckLast:
.876c		ad a5 07	lda $07a5			lda 	BackLoadLast 				; check last < current
.876f		cd 27 04	cmp $0427			cmp 	tokenLineNumber
.8772		ad a6 07	lda $07a6			lda 	BackLoadLast+1
.8775		ed 28 04	sbc $0428			sbc 	tokenLineNumber+1
.8778		b0 0d		bcs $8787			bcs 	_BLCheckFail
.877a		ad 27 04	lda $0427			lda 	tokenLineNumber 			; update
.877d		8d a5 07	sta $07a5			sta 	BackLoadLast
.8780		ad 28 04	lda $0428			lda 	tokenLineNumber+1
.8783		8d a6 07	sta $07a6			sta 	BackLoadLast+1
.8786		60		rts				rts
.8787						_BLCheckFail:
.8787		a9 02		lda #$02		lda	#2
.8789		4c 35 9a	jmp $9a35		jmp	ErrorHandler
.878c						BLReadByte:
.878c		da		phx				phx
.878d		a6 0b		ldx $0b				ldx 	8+3 						; save current mapping for $6000 in X
.878f		ad a2 07	lda $07a2			lda 	BackLoadPage	 			; set current page
.8792		85 0b		sta $0b				sta 	8+3
.8794		ad a3 07	lda $07a3			lda 	BackLoadPointer 			; copy pointer to zTemp0
.8797		85 36		sta $36				sta 	zTemp0
.8799		ad a4 07	lda $07a4			lda 	BackLoadPointer+1
.879c		85 37		sta $37				sta 	zTemp0+1
.879e		b2 36		lda ($36)			lda 	(zTemp0) 					; read next byte
.87a0		ee a3 07	inc $07a3			inc 	BackLoadPointer 			; bump pointer
.87a3		d0 0f		bne $87b4			bne 	_BLNoCarry
.87a5		ee a4 07	inc $07a4			inc 	BackLoadPointer+1
.87a8		10 0a		bpl $87b4			bpl 	_BLNoCarry 					; need a new page
.87aa		48		pha				pha
.87ab		a9 60		lda #$60			lda 	#$60 						; reset pointer
.87ad		8d a4 07	sta $07a4			sta 	BackLoadPointer+1
.87b0		ee a2 07	inc $07a2			inc 	BackLoadPage 				; next page from source.
.87b3		68		pla				pla
.87b4						_BLNoCarry:
.87b4		86 0b		stx $0b				stx 	8+3 						; restore mapping, then X.
.87b6		fa		plx				plx
.87b7		c9 00		cmp #$00			cmp 	#0
.87b9		60		rts				rts
.07a2						BackLoadPage:
>07a2								.fill  	1
.07a3						BackLoadPointer:
>07a3								.fill 	2
.07a5						BackLoadLast:
>07a5								.fill 	2

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/editor.asm

.87ba						EditProgramCode:
.87ba		ad 27 04	lda $0427			lda 	tokenLineNumber 			; try to find the line.
.87bd		ae 28 04	ldx $0428			ldx 	tokenLineNumber+1
.87c0		20 c9 ae	jsr $aec9			jsr 	MemorySearch
.87c3		90 05		bcc $87ca			bcc 	_EPCNoDelete 				; reached the end : don't delete
.87c5		d0 03		bne $87ca			bne 	_EPCNoDelete 				; found slot but didn't match : no delete
.87c7		20 ee ad	jsr $adee			jsr 	MemoryDeleteLine 			; delete the line
.87ca						_EPCNoDelete:
.87ca		ad 29 04	lda $0429			lda 	tokenBuffer 				; buffer empty - we just want to delete a line.
.87cd		c9 80		cmp #$80			cmp 	#KWC_EOL
.87cf		f0 0d		beq $87de			beq 	_EPCNoInsert
.87d1		ad 27 04	lda $0427			lda 	tokenLineNumber 			; find the line - it cannot exist as we've just deleted it.
.87d4		ae 28 04	ldx $0428			ldx 	tokenLineNumber+1 			; so this can't fail, it returns some point in the code.
.87d7		20 c9 ae	jsr $aec9			jsr 	MemorySearch
.87da		18		clc				clc 								; insert at this point.
.87db		20 25 ae	jsr $ae25			jsr 	MemoryInsertLine 			; insert the line
.87de						_EPCNoInsert:
.87de		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/warmstart.asm

.87df						WarmStart:
.87df		a2 ff		ldx #$ff			ldx 	#$FF
.87e1		9a		txs				txs
.87e2		a9 89		lda #$89			lda 	#CLICommandLine+$80 		; set console colour whatever the current colour is.
.87e4		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.87e7		20 a6 81	jsr $81a6			jsr 	EXTInputLine 				; get line to lineBuffer
.87ea		20 89 80	jsr $8089			jsr 	TKTokeniseLine 				; tokenise the line
.87ed		ad 27 04	lda $0427			lda 	tokenLineNumber 			; line number <> 0
.87f0		0d 28 04	ora $0428			ora 	tokenLineNumber+1
.87f3		d0 17		bne $880c			bne 	_WSEditCode 				; if so,edit code.
.87f5		9c 26 04	stz $0426			stz 	tokenOffset 				; zero the "offset", meaning it only runs one line.
.87f8		a9 26		lda #$26			lda 	#((tokenOffset) & $FF)
.87fa		85 30		sta $30				sta 	codePtr
.87fc		a9 04		lda #$04			lda 	#((tokenOffset) >> 8)
.87fe		85 31		sta $31				sta 	codePtr+1
.8800		ad 29 04	lda $0429			lda 	tokenBuffer 				; nothing to run
.8803		c9 80		cmp #$80			cmp 	#KWC_EOL
.8805		f0 d8		beq $87df			beq 	WarmStart
.8807		20 99 95	jsr $9599			jsr 	RUNCodePointerLine 			; execute that line.
.880a		80 d3		bra $87df			bra 	WarmStart
.880c						_WSEditCode:
.880c		20 ba 87	jsr $87ba			jsr 	EditProgramCode 			; edit the program code
.880f		20 c4 98	jsr $98c4			jsr 	ClearSystem 				; clear all variables etc.
.8812		80 cb		bra $87df			bra 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assemble.asm

.8814						AssembleCommand:
.8814		a2 00		ldx #$00			ldx 	#0
.8816		20 15 a9	jsr $a915			jsr 	Evaluate16BitInteger 		; start address
.8819		a5 58		lda $58				lda 	NSMantissa0
.881b		8d 1a 04	sta $041a			sta 	AssemblerAddress
.881e		a5 60		lda $60				lda 	NSMantissa1
.8820		8d 1b 04	sta $041b			sta 	AssemblerAddress+1
.8823		20 24 9a	jsr $9a24			jsr 	CheckComma
.8826		20 30 a9	jsr $a930			jsr 	Evaluate8BitInteger 		; options 0-3
.8829		a5 58		lda $58				lda 	NSMantissa0
.882b		8d 1c 04	sta $041c			sta 	AssemblerControl
.882e		60		rts				rts
.882f		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assert.asm

.8830						AssertCommand:
.8830		a2 00		ldx #$00			ldx 	#0 							; bottom of stack
.8832		20 02 a9	jsr $a902			jsr 	EvaluateInteger 			; the assert test
.8835		20 b7 a9	jsr $a9b7			jsr 	NSMIsZero 					; exit if result is non zero.
.8838		d0 05		bne $883f			bne 	_ACExit
.883a		a9 0a		lda #$0a		lda	#10
.883c		4c 35 9a	jmp $9a35		jmp	ErrorHandler
.883f						_ACExit:
.883f		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/call.asm

.8840						CallCommand:
.8840		a2 00		ldx #$00			ldx 	#0 							; get the routine address to level 0
.8842		20 15 a9	jsr $a915			jsr 	Evaluate16BitInteger
.8845						_CCClear
.8845		e8		inx				inx  								; clear 1,2 and 3 (for A X Y)
.8846		20 95 a9	jsr $a995			jsr 	NSMSetZero 					; these are optional sequentially.
.8849		e0 04		cpx #$04			cpx 	#4
.884b		d0 f8		bne $8845			bne 	_CCClear
.884d		a2 00		ldx #$00			ldx 	#0 							; and keep trying while there are more values.
.884f						_CCCParam:
.884f		b1 30		lda ($30),y			lda 	(codePtr),y
.8851		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8853		d0 09		bne $885e			bne 	_CCCRun6502
.8855		c8		iny				iny 								; skip comma
.8856		e8		inx				inx	 								; next level
.8857		20 30 a9	jsr $a930			jsr 	Evaluate8BitInteger 		; get A/X/Y
.885a		e0 03		cpx #$03			cpx 	#3
.885c		90 f1		bcc $884f			bcc 	_CCCParam 					; done all 3 ?
.885e						_CCCRun6502:
.885e		5a		phy				phy 								; save position
.885f		a5 60		lda $60				lda 	NSMantissa1 				; put address in zTemp0
.8861		85 37		sta $37				sta 	zTemp0+1
.8863		a5 58		lda $58				lda 	NSMantissa0
.8865		85 36		sta $36				sta 	zTemp0
.8867		a5 59		lda $59				lda 	NSMantissa0+1 				; get registers into A X Y
.8869		a6 5a		ldx $5a				ldx 	NSMantissa0+2
.886b		a4 5b		ldy $5b				ldy 	NSMantissa0+3
.886d		20 72 88	jsr $8872			jsr 	_CCCZTemp0 					; call zTemp0
.8870		7a		ply				ply 								; restore position and exit
.8871		60		rts				rts
.8872						_CCCZTemp0:
.8872		6c 36 00	jmp ($0036)			jmp 	(zTemp0)

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/commands/crossdev.asm

.8875						XLoadCommand:
.8875		20 fc 93	jsr $93fc			jsr 	NewProgram
.8878		20 f7 86	jsr $86f7			jsr 	BackloadProgram
.887b		4c df 87	jmp $87df			jmp 	WarmStart
.887e						XGoCommand:
.887e		20 fc 93	jsr $93fc			jsr 	NewProgram
.8881		20 f7 86	jsr $86f7			jsr 	BackloadProgram
.8884		4c 87 95	jmp $9587			jmp 	RunCurrentProgram

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/data.asm

.8887						Command_Data:
.8887		a9 3a		lda #$3a			lda 	#KWD_COLON 					; advance to colon/EOL, e.g. ignore anything till then.
.8889		a2 80		ldx #$80			ldx 	#KWC_EOL
.888b		20 77 99	jsr $9977			jsr 	ScanForward
.888e		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/dim.asm

.888f						DimCommand:
.888f		b1 30		lda ($30),y			lda 	(codePtr),y
.8891		29 c0		and #$c0			and 	#$C0
.8893		c9 40		cmp #$40			cmp 	#$40
.8895		d0 7a		bne $8911			bne 	_DCSyntax 				; n o, error.
.8897		b1 30		lda ($30),y			lda 	(codePtr),y
.8899		18		clc				clc
.889a		69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.889c		85 3f		sta $3f				sta 	zaTemp+1
.889e		c8		iny				iny
.889f		b1 30		lda ($30),y			lda 	(codePtr),y
.88a1		c8		iny				iny
.88a2		85 3e		sta $3e				sta 	zaTemp
.88a4		5a		phy				phy
.88a5		a0 02		ldy #$02			ldy 	#2 						; read type byte
.88a7		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.88a9		29 18		and #$18			and 	#NSBTypeMask 			; check it's not a procedure
.88ab		c9 18		cmp #$18			cmp 	#NSTProcedure
.88ad		f0 62		beq $8911			beq 	_DCSyntax
.88af		b1 3e		lda ($3e),y			lda 	(zaTemp),y 				; check it's an array
.88b1		29 04		and #$04			and 	#NSBIsArray
.88b3		f0 64		beq $8919			beq 	_DCType
.88b5		a0 04		ldy #$04			ldy 	#4 						; check not already defined
.88b7		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.88b9		d0 59		bne $8914			bne 	_DCRedefine
.88bb		7a		ply				ply
.88bc		20 1c 89	jsr $891c			jsr 	_DCGetSize 				; get array size, check it.
.88bf		5a		phy				phy
.88c0		a0 05		ldy #$05			ldy 	#5 						; store in first array size slot
.88c2		91 3e		sta ($3e),y			sta 	(zaTemp),y 				; second will be zero.
.88c4		7a		ply				ply 							; is there a second (e.g. ,x)
.88c5		b1 30		lda ($30),y			lda 	(codePtr),y
.88c7		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.88c9		d0 0a		bne $88d5			bne 	_DCOneDimension
.88cb		c8		iny				iny 							; skip comma
.88cc		20 1c 89	jsr $891c			jsr 	_DCGetSize 				; get 2nd array size
.88cf		5a		phy				phy
.88d0		a0 06		ldy #$06			ldy 	#6 						; store in 2nd array size
.88d2		91 3e		sta ($3e),y			sta 	(zaTemp),y
.88d4		7a		ply				ply
.88d5						_DCOneDimension:
.88d5		5a		phy				phy 							; save position
.88d6		a0 05		ldy #$05			ldy 	#5 						; dimensions + 1 in AX (as zero based)
.88d8		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.88da		aa		tax				tax
.88db		c8		iny				iny
.88dc		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.88de		e8		inx				inx 							; bump them.
.88df		1a		inc a				inc 	a
.88e0		20 40 a9	jsr $a940			jsr 	Multiply8x8 			; work out the total number of elements -> zTemp0
.88e3		a5 37		lda $37				lda 	zTemp0+1 				; don't allow more than 8192 elements whatever
.88e5		29 e0		and #$e0			and 	#$E0
.88e7		d0 23		bne $890c			bne 	_DCSize
.88e9		a0 02		ldy #$02			ldy 	#2 						; get base type
.88eb		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.88ed		20 2a 89	jsr $892a			jsr 	ScaleByBaseType 		; scale by base type
.88f0		a5 36		lda $36				lda 	zTemp0
.88f2		a6 37		ldx $37				ldx 	zTemp0+1
.88f4		20 37 a5	jsr $a537			jsr 	AllocateXABytes 		; allocate memory
.88f7		a0 03		ldy #$03			ldy 	#3 						; copy into the address.
.88f9		91 3e		sta ($3e),y			sta 	(zaTemp),y
.88fb		c8		iny				iny
.88fc		8a		txa				txa
.88fd		91 3e		sta ($3e),y			sta 	(zaTemp),y
.88ff		7a		ply				ply 							; get position back
.8900		20 1c 9a	jsr $9a1c			jsr 	CheckRightBracket 		; check )
.8903		b1 30		lda ($30),y			lda 	(codePtr),y
.8905		c8		iny				iny 							; consume in case
.8906		c9 2c		cmp #$2c			cmp 	#KWD_COMMA		 		; if so do another DIM.
.8908		f0 85		beq $888f			beq 	DimCommand
.890a		88		dey				dey 							; undo consume
.890b		60		rts				rts
.890c						_DCSize:
.890c		a9 16		lda #$16		lda	#22
.890e		4c 35 9a	jmp $9a35		jmp	ErrorHandler
.8911						_DCSyntax:
.8911		4c 31 ac	jmp $ac31			jmp 	SyntaxError
.8914						_DCRedefine:
.8914		a9 15		lda #$15		lda	#21
.8916		4c 35 9a	jmp $9a35		jmp	ErrorHandler
.8919						_DCType:
.8919		4c 3b ac	jmp $ac3b			jmp 	TypeError
.891c						_DCGetSize:
.891c		a2 00		ldx #$00			ldx 	#0 						; get first index.
.891e		20 30 a9	jsr $a930			jsr 	Evaluate8BitInteger 	; get array dimension
.8921		c9 00		cmp #$00			cmp 	#0 						; must be 1-254
.8923		f0 e7		beq $890c			beq 	_DCSize
.8925		c9 fe		cmp #$fe			cmp 	#254
.8927		f0 e3		beq $890c			beq 	_DCSize
.8929		60		rts				rts
.892a						ScaleByBaseType:
.892a		29 10		and #$10			and 	#NSBIsString 			; is it string
.892c		d0 19		bne $8947			bne 	_SBBTString
.892e		a5 37		lda $37				lda 	zTemp0+1 				; push value on stack
.8930		48		pha				pha
.8931		a5 36		lda $36				lda 	zTemp0
.8933		48		pha				pha
.8934		06 36		asl $36				asl 	zTemp0 					; x 2
.8936		26 37		rol $37				rol 	zTemp0+1
.8938		06 36		asl $36				asl 	zTemp0 					; x 4
.893a		26 37		rol $37				rol 	zTemp0+1
.893c		68		pla				pla 							; add stacked value = x 5
.893d		65 36		adc $36				adc 	zTemp0
.893f		85 36		sta $36				sta 	zTemp0
.8941		68		pla				pla
.8942		65 37		adc $37				adc 	zTemp0+1
.8944		85 37		sta $37				sta 	zTemp0+1
.8946		60		rts				rts
.8947						_SBBTString:
.8947		06 36		asl $36				asl 	zTemp0
.8949		26 37		rol $37				rol 	zTemp0+1
.894b		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/commands/dos.asm

.894c						BootDOS:
.894c		a9 5a		lda #$5a	            lda     #dosName & $FF
.894e		85 fb		sta $fb		            sta     kernel.args.buf+0
.8950		a9 89		lda #$89	            lda     #dosName >> 8
.8952		85 fc		sta $fc		            sta     kernel.args.buf+1
.8954		20 18 ff	jsr $ff18	            jsr     kernel.RunNamed
.8957		4c df 87	jmp $87df	            jmp 	WarmStart
>895a		44 4f 53 00			dosName:	.text 	"DOS",0

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/end.asm

.895e						EndCommand:
.895e		4c df 87	jmp $87df			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/commands/event.asm

.8961						UnaryEvent:
.8961		fa		plx				plx
.8962		20 af 98	jsr $98af			jsr 	TimerToStackX 				; timer in +0
.8965		e8		inx				inx  								; put reference into +1
.8966		20 89 a3	jsr $a389			jsr 	EvaluateTerm
.8969		b5 50		lda $50,x			lda 	NSStatus,x 					; check if is integer reference
.896b		c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.896d		d0 4c		bne $89bb			bne 	_UEType
.896f		e8		inx				inx 								; put the step in +2
.8970		20 24 9a	jsr $9a24			jsr 	CheckComma
.8973		20 15 a9	jsr $a915			jsr 	Evaluate16BitInteger
.8976		20 1c 9a	jsr $9a1c			jsr 	CheckRightBracket
.8979		ca		dex				dex
.897a		ca		dex				dex
.897b		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; copy reference to zTemp0
.897d		85 36		sta $36				sta 	zTemp0
.897f		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.8981		85 37		sta $37				sta 	zTemp0+1
.8983		5a		phy				phy
.8984		a0 03		ldy #$03			ldy 	#3 							; check bit 7 of last bit, the packed sign bit
.8986		b1 36		lda ($36),y			lda 	(zTemp0),y
.8988		30 2d		bmi $89b7			bmi 	_UEFalse 					; exit if signed.
.898a		a0 00		ldy #$00			ldy 	#0 							; has it timed out (24 bit)
.898c		b5 58		lda $58,x			lda 	NSMantissa0,x
.898e		d1 36		cmp ($36),y			cmp 	(zTemp0),y
.8990		c8		iny				iny
.8991		b5 60		lda $60,x			lda 	NSMantissa1,x
.8993		f1 36		sbc ($36),y			sbc		(zTemp0),y
.8995		c8		iny				iny
.8996		b5 68		lda $68,x			lda 	NSMantissa2,x
.8998		f1 36		sbc ($36),y			sbc		(zTemp0),y
.899a		90 1b		bcc $89b7			bcc 	_UEFalse 					; no, return FALSE.
.899c		18		clc				clc
.899d		a0 00		ldy #$00			ldy 	#0 							; work out new value as timer() + step
.899f		b5 58		lda $58,x			lda 	NSMantissa0,x
.89a1		75 5a		adc $5a,x			adc 	NSMantissa0+2,x
.89a3		91 36		sta ($36),y			sta 	(zTemp0),y
.89a5		c8		iny				iny
.89a6		b5 60		lda $60,x			lda 	NSMantissa1,x
.89a8		75 62		adc $62,x			adc 	NSMantissa1+2,x
.89aa		91 36		sta ($36),y			sta 	(zTemp0),y
.89ac		c8		iny				iny
.89ad		b5 68		lda $68,x			lda 	NSMantissa2,x
.89af		75 6a		adc $6a,x			adc 	NSMantissa2+2,x
.89b1		91 36		sta ($36),y			sta 	(zTemp0),y
.89b3		7a		ply				ply
.89b4		4c a8 9a	jmp $9aa8			jmp 	ReturnTrue
.89b7						_UEFalse:
.89b7		7a		ply				ply 								; restore Y
.89b8		4c b3 9a	jmp $9ab3			jmp 	ReturnFalse 				; and return False
.89bb						_UEType:
.89bb		4c 3b ac	jmp $ac3b			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/commands/files/bload.asm

.89be						Command_BLoad:
.89be		20 c9 89	jsr $89c9			jsr 	BLOADHandler
.89c1		c9 00		cmp #$00			cmp 	#0
.89c3		d0 01		bne $89c6			bne 	_BLError
.89c5		60		rts				rts
.89c6						_BLError:
.89c6		4c 18 8c	jmp $8c18			jmp 	CLErrorHandler
.89c9						BLOADHandler:
.89c9		a2 00		ldx #$00			ldx 	#0
.89cb		20 ed a8	jsr $a8ed			jsr 	EvaluateString 				; file name to load
.89ce		20 24 9a	jsr $9a24			jsr 	CheckComma 					; consume comma
.89d1		e8		inx				inx
.89d2		20 02 a9	jsr $a902			jsr 	EvaluateInteger 			; load address (full physical address)
.89d5		5a		phy				phy
.89d6		a5 58		lda $58				lda 	NSMantissa0					; file name -> XA
.89d8		a6 60		ldx $60				ldx 	NSMantissa1
.89da		20 a7 83	jsr $83a7			jsr 	KNLOpenFileRead 			; open file for reading
.89dd		b0 50		bcs $8a2f			bcs 	_BLErrorExit 				; error, so fail.
.89df		8d ab 07	sta $07ab			sta 	BasicFileStream 			; save the reading stream.
.89e2		a2 01		ldx #$01			ldx 	#1 							; address is in slot # 1
.89e4		20 31 8a	jsr $8a31			jsr 	BLOpenPhysicalMemory 		; open for access.
.89e7						_BLReadFile:
.89e7		ad ab 07	lda $07ab			lda 	BasicFileStream
.89ea		a2 40		ldx #$40			ldx     #KNLReadBufferLen 			; set bytes to read.
.89ec		20 fc 83	jsr $83fc			jsr 	KNLReadBlock 				; read next block
.89ef		b0 22		bcs $8a13			bcs 	_BLFileError 				; file error, which might be EOF.
.89f1		c9 00		cmp #$00			cmp 	#0 							; read nothing.
.89f3		f0 f2		beq $89e7			beq 	_BLReadFile
.89f5		8d a9 07	sta $07a9			sta 	BLCopyCounter 				; counter.
.89f8		ac a8 07	ldy $07a8			ldy 	BLYOffset 					; copy the buffer out here
.89fb		a2 00		ldx #$00			ldx 	#0 							; offset in buffer.
.89fd						_BLCopyLoop:
.89fd		bd 9a 06	lda $069a,x			lda 	KNLReadBuffer,x 			; copy byte and advance
.8a00		91 3a		sta ($3a),y			sta 	(zTemp2),y
.8a02		c8		iny				iny
.8a03		d0 03		bne $8a08			bne 	_BLNoAdjust 				; check changed 256 byte or 8k page.
.8a05		20 59 8a	jsr $8a59			jsr 	BLAdvancePhysicalMemory
.8a08						_BLNoAdjust:
.8a08		e8		inx				inx
.8a09		ce a9 07	dec $07a9			dec 	BLCopyCounter
.8a0c		d0 ef		bne $89fd			bne 	_BLCopyLoop
.8a0e		8c a8 07	sty $07a8			sty 	BLYOffset 					; update Y offset
.8a11		80 d4		bra $89e7			bra 	_BLReadFile 				; go ask for more.
.8a13						_BLFileError:
.8a13		c9 30		cmp #$30			cmp 	#KERR_EOF 					; End of file
.8a15		d0 0d		bne $8a24			bne 	_BLErrorHandler				; no, it's an actual error
.8a17		20 53 8a	jsr $8a53			jsr 	BLClosePhysicalMemory 		; close the access.
.8a1a		ad ab 07	lda $07ab			lda 	BasicFileStream 			; close the file
.8a1d		20 71 84	jsr $8471			jsr 	KNLCloseFile
.8a20		a9 00		lda #$00			lda 	#0 							; and return zero.
.8a22		7a		ply				ply
.8a23		60		rts				rts
.8a24						_BLErrorHandler:
.8a24		48		pha				pha 								; save code
.8a25		20 53 8a	jsr $8a53			jsr 	BLClosePhysicalMemory 		; close access
.8a28		ad ab 07	lda $07ab			lda 	BasicFileStream 			; close the open file
.8a2b		20 71 84	jsr $8471			jsr 	KNLCloseFile
.8a2e		68		pla				pla 								; get error code
.8a2f						_BLErrorExit:
.8a2f		7a		ply				ply 								; restore position and exit.
.8a30		60		rts				rts
=3						BLAccessPage = 3 							; page to use for actual memory.
.8a31						BLOpenPhysicalMemory:
.8a31		a5 0b		lda $0b				lda 	BLAccessPage+8 				; save current mapping
.8a33		8d a7 07	sta $07a7			sta 	BLNormalMapping
.8a36		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy address, 13 bit adjusted for page -> (zTemp2),BLYOffset
.8a38		8d a8 07	sta $07a8			sta 	BLYOffset 					; zTemp2 0 is *always* zero.
.8a3b		64 3a		stz $3a				stz 	zTemp2
.8a3d		b5 60		lda $60,x			lda 	NSMantissa1,x
.8a3f		29 1f		and #$1f			and 	#$1F
.8a41		09 60		ora #$60			ora 	#BLAccessPage << 5
.8a43		85 3b		sta $3b				sta 	zTemp2+1
.8a45		b5 68		lda $68,x			lda 	NSMantissa2,x 				; shift M2:M1 right 3 times to give page # required
.8a47		16 60		asl $60,x			asl 	NSMantissa1,x
.8a49		2a		rol a				rol 	a
.8a4a		16 60		asl $60,x			asl 	NSMantissa1,x
.8a4c		2a		rol a				rol 	a
.8a4d		16 60		asl $60,x			asl 	NSMantissa1,x
.8a4f		2a		rol a				rol 	a
.8a50		85 0b		sta $0b				sta 	BLAccessPage+8 				; access that page
.8a52		60		rts				rts
.8a53						BLClosePhysicalMemory:
.8a53		ad a7 07	lda $07a7			lda 	BLNormalMapping
.8a56		85 0b		sta $0b				sta 	BLAccessPage+8
.8a58		60		rts				rts
.8a59						BLAdvancePhysicalMemory:
.8a59		48		pha				pha
.8a5a		e6 3b		inc $3b				inc		zTemp2+1 					; bump MSB
.8a5c		a5 3b		lda $3b				lda 	zTemp2+1
.8a5e		c9 80		cmp #$80			cmp 	#(BLAccessPage+1) << 5 		; reached next page ?
.8a60		d0 06		bne $8a68			bne 	_BLAPMExit 					; (e.g. end of the mapped page.)
.8a62		e6 0b		inc $0b				inc 	BLAccessPage+8 				; next physical page
.8a64		a9 60		lda #$60			lda 	#BLAccessPage << 5 			; page back to start of transfer page
.8a66		85 3b		sta $3b				sta 	zTemp2+1
.8a68						_BLAPMExit:
.8a68		68		pla				pla
.8a69		60		rts				rts
.07a7						BLNormalMapping:
>07a7								.fill 	1
.07a8						BLYOffset:
>07a8								.fill 	1
.07a9						BLCopyCounter:
>07a9								.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/commands/files/bsave.asm

.8a6a						Command_BSave:
.8a6a		20 75 8a	jsr $8a75			jsr 	BSaveHandler
.8a6d		c9 00		cmp #$00			cmp 	#0
.8a6f		d0 01		bne $8a72			bne 	_BSError
.8a71		60		rts				rts
.8a72						_BSError:
.8a72		4c 18 8c	jmp $8c18			jmp 	CLErrorHandler
.8a75						BSaveHandler:
.8a75		a2 00		ldx #$00			ldx 	#0
.8a77		20 ed a8	jsr $a8ed			jsr 	EvaluateString 				; file name to load
.8a7a		20 24 9a	jsr $9a24			jsr 	CheckComma 					; consume comma
.8a7d		e8		inx				inx
.8a7e		20 02 a9	jsr $a902			jsr 	EvaluateInteger 			; load address (full physical address)
.8a81		20 24 9a	jsr $9a24			jsr 	CheckComma 					; consume comma
.8a84		e8		inx				inx
.8a85		20 02 a9	jsr $a902			jsr 	EvaluateInteger 			; data length (3 bytes only)
.8a88		5a		phy				phy
.8a89		a5 58		lda $58				lda 	NSMantissa0					; file name -> XA
.8a8b		a6 60		ldx $60				ldx 	NSMantissa1
.8a8d		20 a2 83	jsr $83a2			jsr 	KNLOpenFileWrite 			; open file for reading
.8a90		b0 47		bcs $8ad9			bcs 	_BSErrorExit 				; error, so fail.
.8a92		8d ab 07	sta $07ab			sta 	BasicFileStream 			; save the reading stream.
.8a95		a2 01		ldx #$01			ldx 	#1 							; address is in slot # 1
.8a97		20 31 8a	jsr $8a31			jsr 	BLOpenPhysicalMemory 		; open for access.
.8a9a		a2 00		ldx #$00			ldx 	#0 							; number of bytes in kernel buffer
.8a9c		ac a8 07	ldy $07a8			ldy 	BLYOffset 					; used for data offset.
.8a9f						_BSWriteToFileLoop:
.8a9f		38		sec				sec 								; pre decrement count.
.8aa0		a5 5a		lda $5a				lda 	NSMantissa0+2
.8aa2		e9 01		sbc #$01			sbc 	#1
.8aa4		85 5a		sta $5a				sta 	NSMantissa0+2
.8aa6		a5 62		lda $62				lda 	NSMantissa1+2
.8aa8		e9 00		sbc #$00			sbc 	#0
.8aaa		85 62		sta $62				sta 	NSMantissa1+2
.8aac		a5 6a		lda $6a				lda 	NSMantissa2+2
.8aae		e9 00		sbc #$00			sbc 	#0
.8ab0		85 6a		sta $6a				sta 	NSMantissa2+2
.8ab2		30 15		bmi $8ac9			bmi 	_BSFileComplete 			; undercounted, so exit.
.8ab4		b1 3a		lda ($3a),y			lda 	(zTemp2),y 					; get byte to save
.8ab6		9d 9a 06	sta $069a,x			sta 	KNLReadBuffer,x 			; save in the buffer and bump buffer index
.8ab9		e8		inx				inx
.8aba		c8		iny				iny 								; next byte
.8abb		d0 03		bne $8ac0			bne 	_BSNoCheck
.8abd		20 59 8a	jsr $8a59			jsr 	BLAdvancePhysicalMemory 	; check not gone to next page.
.8ac0						_BSNoCheck:
.8ac0		e0 40		cpx #$40			cpx 	#KNLReadBufferLen 			; done the whole buffer
.8ac2		d0 db		bne $8a9f			bne 	_BSWriteToFileLoop 			; no , do the next byte.
.8ac4		20 db 8a	jsr $8adb			jsr 	BSFlushBuffer 				; yes, flush the buffer
.8ac7		80 d6		bra $8a9f			bra 	_BSWriteToFileLoop 			; and keep on going
.8ac9						_BSFileComplete:
.8ac9		20 db 8a	jsr $8adb			jsr 	BSFlushBuffer 				; write the buffer remainder.
.8acc		20 53 8a	jsr $8a53			jsr 	BLClosePhysicalMemory 		; close the access.
.8acf		ad ab 07	lda $07ab			lda 	BasicFileStream 			; close the file
.8ad2		20 71 84	jsr $8471			jsr 	KNLCloseFile
.8ad5		a9 00		lda #$00			lda 	#0
.8ad7		7a		ply				ply
.8ad8		60		rts				rts
.8ad9						_BSErrorExit:
.8ad9		7a		ply				ply
.8ada		60		rts				rts
.8adb						BSFlushBuffer:
.8adb		e0 00		cpx #$00			cpx 	#0 							; buffer empty ?
.8add		f0 0d		beq $8aec			beq 	_BSFBExit 					; if so, exit.
.8adf		a9 9a		lda #$9a			lda 	#KNLReadBuffer & $FF 		; where to write from.
.8ae1		85 36		sta $36				sta 	zTemp0
.8ae3		a9 06		lda #$06			lda 	#KNLReadBuffer >> 8
.8ae5		85 37		sta $37				sta 	zTemp0+1 					; # of bytes in X
.8ae7		20 d4 8c	jsr $8cd4			jsr 	CLWriteByteBlock 			; write it.
.8aea		a2 00		ldx #$00			ldx 	#0 							; buffer is empty.
.8aec						_BSFBExit:
.8aec		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/commands/files/dir.asm

.8aed						Command_Dir:
.8aed		ad 9a 07	lda $079a			lda     KNLDefaultDrive				; set drive to list.
.8af0		85 f3		sta $f3				sta     kernel.args.directory.open.drive
.8af2		64 fd		stz $fd				stz     kernel.args.directory.open.path_len
.8af4		20 74 ff	jsr $ff74			jsr     kernel.Directory.Open
.8af7		b0 4f		bcs $8b48			bcs     _CDExit
.8af9						_CDEventLoop:
.8af9		20 0c ff	jsr $ff0c			jsr     kernel.Yield        		; Polite, not actually needed.
.8afc		20 5e 82	jsr $825e			jsr     GetNextEvent
.8aff		b0 f8		bcs $8af9			bcs     _CDEventLoop
.8b01		ad 9b 07	lda $079b			lda     KNLEvent.type
.8b04		c9 44		cmp #$44			cmp     #kernel.event.directory.CLOSED
.8b06		f0 40		beq $8b48			beq    	_CDExit
.8b08		20 0d 8b	jsr $8b0d			jsr     _CDMessages 				; handle various messages
.8b0b		80 ec		bra $8af9			bra     _CDEventLoop
.8b0d						_CDMessages:
.8b0d		c9 3a		cmp #$3a			cmp     #kernel.event.directory.OPENED
.8b0f		f0 15		beq $8b26			beq     _CDEVRead
.8b11		c9 3c		cmp #$3c			cmp     #kernel.event.directory.VOLUME
.8b13		f0 19		beq $8b2e			beq     _CDEVVolume
.8b15		c9 3e		cmp #$3e			cmp     #kernel.event.directory.FILE
.8b17		f0 32		beq $8b4b			beq     _CDEVFile
.8b19		c9 40		cmp #$40			cmp     #kernel.event.directory.FREE
.8b1b		f0 70		beq $8b8d			beq     _CDEVFree
.8b1d		c9 42		cmp #$42			cmp     #kernel.event.directory.EOF
.8b1f		f0 6e		beq $8b8f			beq     _CDEVEOF
.8b21		c9 46		cmp #$46			cmp     #kernel.event.directory.ERROR
.8b23		f0 6a		beq $8b8f			beq     _CDEVEOF
.8b25		60		rts				rts
.8b26						_CDEVRead:
.8b26		ad 9e 07	lda $079e			lda     KNLEvent.directory.stream
.8b29		85 f3		sta $f3				sta     kernel.args.directory.read.stream
.8b2b		4c 78 ff	jmp $ff78			jmp     kernel.Directory.Read
.8b2e						_CDEVVolume:
.8b2e		a9 5b		lda #$5b			lda 	#"["
.8b30		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.8b33		ad a0 07	lda $07a0			lda     KNLEvent.directory.volume.len
.8b36		20 97 8b	jsr $8b97			jsr     _CDReadData
.8b39		20 94 9a	jsr $9a94			jsr 	PrintStringXA
.8b3c		a9 5d		lda #$5d			lda 	#"]"
.8b3e		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.8b41		a9 0d		lda #$0d			lda 	#13
.8b43		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.8b46		80 de		bra $8b26			bra     _CDEVRead
.8b48						_CDExit:
.8b48		4c df 87	jmp $87df			jmp 	WarmStart
.8b4b						_CDEVFile:
.8b4b		a9 20		lda #$20			lda 	#32
.8b4d		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.8b50		ad a0 07	lda $07a0			lda     KNLEvent.directory.file.len
.8b53		48		pha				pha
.8b54		20 97 8b	jsr $8b97			jsr     _CDReadData
.8b57		20 94 9a	jsr $9a94			jsr 	PrintStringXA
.8b5a		68		pla				pla
.8b5b		49 ff		eor #$ff			eor 	#$FF
.8b5d		38		sec				sec
.8b5e		69 10		adc #$10			adc 	#16
.8b60		aa		tax				tax
.8b61						_CDEVTab:
.8b61		a9 20		lda #$20			lda 	#32
.8b63		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.8b66		ca		dex				dex
.8b67		10 f8		bpl $8b61			bpl 	_CDEVTab
.8b69		20 ae 8b	jsr $8bae			jsr 	_CDReadExtended
.8b6c		ad 26 05	lda $0526			lda 	lineBuffer
.8b6f		ae 27 05	ldx $0527			ldx 	lineBuffer+1
.8b72		20 aa 9e	jsr $9eaa			jsr 	ConvertInt16
.8b75		20 94 9a	jsr $9a94			jsr 	PrintStringXA
.8b78		a2 8b		ldx #$8b			ldx 	#_CDEVFMessage >> 8
.8b7a		a9 81		lda #$81			lda 	#_CDEVFMessage & $FF
.8b7c		20 94 9a	jsr $9a94			jsr 	PrintStringXA
.8b7f		80 a5		bra $8b26			bra     _CDEVRead
.8b81						_CDEVFMessage:
>8b81		20 62 6c 6f 63 6b 28 73				.text 	" block(s).",13,0
>8b89		29 2e 0d 00
.8b8d						_CDEVFree:
.8b8d		80 00		bra $8b8f			bra     _CDEVEOF
.8b8f						_CDEVEOF:
.8b8f		ad 9e 07	lda $079e			lda     KNLEvent.directory.stream
.8b92		85 f3		sta $f3				sta     kernel.args.directory.close.stream
.8b94		4c 7c ff	jmp $ff7c			jmp     kernel.Directory.Close
.8b97						_CDReadData:
.8b97		85 fd		sta $fd				sta     kernel.args.recv.buflen
.8b99		a9 26		lda #$26			lda     #lineBuffer & $FF
.8b9b		85 fb		sta $fb				sta     kernel.args.recv.buf+0
.8b9d		a9 05		lda #$05			lda     #lineBuffer >> 8
.8b9f		85 fc		sta $fc				sta     kernel.args.recv.buf+1
.8ba1		20 04 ff	jsr $ff04			jsr     kernel.ReadData
.8ba4		a6 fd		ldx $fd				ldx     kernel.args.recv.buflen
.8ba6		9e 26 05	stz $0526,x			stz     lineBuffer,x
.8ba9		a9 26		lda #$26			lda 	#lineBuffer & $FF
.8bab		a2 05		ldx #$05			ldx 	#lineBuffer >> 8
.8bad		60		rts				rts
.8bae						_CDReadExtended:
.8bae		a9 02		lda #$02			lda     #2
.8bb0		85 fd		sta $fd				sta     kernel.args.recv.buflen
.8bb2		a9 26		lda #$26			lda     #lineBuffer & $FF
.8bb4		85 fb		sta $fb				sta     kernel.args.recv.buf+0
.8bb6		a9 05		lda #$05			lda     #lineBuffer >> 8
.8bb8		85 fc		sta $fc				sta     kernel.args.recv.buf+1
.8bba		4c 08 ff	jmp $ff08			jmp     kernel.ReadExt

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/commands/files/drive.asm

.8bbd						Command_Drive:
.8bbd		20 30 a9	jsr $a930			jsr 	Evaluate8BitInteger
.8bc0		20 9e 83	jsr $839e			jsr 	KNLSetDrive
.8bc3		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/commands/files/load.asm

.8bc4						Command_Load:
.8bc4		20 ca 8b	jsr $8bca			jsr 	LoadFile
.8bc7		4c df 87	jmp $87df			jmp 	WarmStart
.8bca						LoadFile:
.8bca		20 ed a8	jsr $a8ed			jsr 	EvaluateString 				; file name to load
.8bcd		a6 37		ldx $37				ldx 	zTemp0+1					; zTemp0 -> XA
.8bcf		a5 36		lda $36				lda 	zTemp0
.8bd1		20 a7 83	jsr $83a7			jsr 	KNLOpenFileRead 			; open file for reading
.8bd4		b0 42		bcs $8c18			bcs 	CLErrorHandler 				; error, so fail.
.8bd6		8d ab 07	sta $07ab			sta 	BasicFileStream 			; save the reading stream.
.8bd9		20 68 8c	jsr $8c68			jsr     LoadReadByteInit            ; Init reader with the stream
.8bdc		20 fc 93	jsr $93fc			jsr 	NewProgram 					; does the actual NEW.
.8bdf		9c aa 07	stz $07aa			stz 	LoadEOFFlag 				; clear EOF Flag.
.8be2						_CLLoop:
.8be2		20 26 8c	jsr $8c26			jsr 	LoadReadLine 				; get next line.
.8be5		f0 10		beq $8bf7			beq 	_CLExit 					; end, exit.
.8be7		20 89 80	jsr $8089			jsr 	TKTokeniseLine 				; tokenise the line.
.8bea		ad 27 04	lda $0427			lda 	tokenLineNumber 			; line number = 0
.8bed		0d 28 04	ora $0428			ora 	tokenLineNumber+1
.8bf0		f0 f0		beq $8be2			beq 	_CLLoop 					; not legal code, blank line or maybe a comment.
.8bf2		20 ba 87	jsr $87ba			jsr 	EditProgramCode 			; do the editing etc.
.8bf5		80 eb		bra $8be2			bra 	_CLLoop
.8bf7						_CLExit:
.8bf7		ad ab 07	lda $07ab			lda 	BasicFileStream
.8bfa		20 71 84	jsr $8471			jsr 	KNLCloseFile
.8bfd						CLComplete:
.8bfd		a9 05		lda #$05			lda 	#_CLCMsg & $FF
.8bff		a2 8c		ldx #$8c			ldx 	#_CLCMsg >> 8
.8c01		20 94 9a	jsr $9a94			jsr 	PrintStringXA
.8c04		60		rts				rts
.8c05						_CLCMsg:
>8c05		43 6f 6d 70 6c 65 74 65				.text 	"Complete.",13,0
>8c0d		2e 0d 00
.8c10						CLCloseError:
.8c10		48		pha				pha
.8c11		ad ab 07	lda $07ab			lda 	BasicFileStream
.8c14		20 71 84	jsr $8471			jsr 	KNLCloseFile
.8c17		68		pla				pla
.8c18						CLErrorHandler:
.8c18		c9 28		cmp #$28			cmp 	#KERR_NOTFOUND
.8c1a		f0 05		beq $8c21			beq 	_CLEHNotFound
.8c1c		a9 1a		lda #$1a		lda	#26
.8c1e		4c 35 9a	jmp $9a35		jmp	ErrorHandler
.8c21						_CLEHNotFound:
.8c21		a9 19		lda #$19		lda	#25
.8c23		4c 35 9a	jmp $9a35		jmp	ErrorHandler
.8c26						LoadReadLine:
.8c26		a2 00		ldx #$00			ldx 	#0 							; look for first character non space/ctl
.8c28		20 42 8c	jsr $8c42			jsr 	LoadReadCharacter
.8c2b		f0 14		beq $8c41			beq 	_LRLExit 					; eof ?
.8c2d		c9 21		cmp #$21			cmp 	#' '+1 						; space control tab skip
.8c2f		90 f5		bcc $8c26			bcc 	LoadReadLine
.8c31						_LRLLoop:
.8c31		9d 26 05	sta $0526,x			sta 	lineBuffer,x 				; write into line buffer
.8c34		9e 27 05	stz $0527,x			stz 	lineBuffer+1,x 				; make ASCIIZ
.8c37		e8		inx				inx
.8c38		20 42 8c	jsr $8c42			jsr 	LoadReadCharacter 			; next line
.8c3b		c9 20		cmp #$20			cmp 	#32 						; until < space ctrl/eof.
.8c3d		b0 f2		bcs $8c31			bcs 	_LRLLoop
.8c3f		a9 01		lda #$01			lda 	#1 							; return code 1, okay.
.8c41						_LRLExit:
.8c41		60		rts				rts
.8c42						LoadReadCharacter:
.8c42		da		phx				phx
.8c43		5a		phy				phy
.8c44		ad aa 07	lda $07aa			lda 	LoadEOFFlag 				; already done EOF.
.8c47		d0 0c		bne $8c55			bne 	_LRCIsEOF
.8c49		20 72 8c	jsr $8c72			jsr 	LoadReadByte 				; read a byte
.8c4c		90 09		bcc $8c57			bcc		_LRCExit 					; read okay.
.8c4e		c9 30		cmp #$30			cmp 	#KERR_EOF 					; if error not EOF it's an actual error.
.8c50		d0 be		bne $8c10			bne 	CLCloseError
.8c52		ce aa 07	dec $07aa			dec 	LoadEOFFlag
.8c55						_LRCIsEOF:
.8c55		a9 00		lda #$00			lda 	#0
.8c57						_LRCExit:
.8c57		c9 09		cmp #$09			cmp 	#9 							; convert tab to space
.8c59		d0 02		bne $8c5d			bne 	_LRCNotTab
.8c5b		a9 20		lda #$20			lda 	#' '
.8c5d						_LRCNotTab:
.8c5d		c9 0a		cmp #$0a			cmp 	#$0A
.8c5f		d0 02		bne $8c63			bne 	_LRCNotLF
.8c61		a9 0d		lda #$0d			lda 	#$0D
.8c63						_LRCNotLF:
.8c63		7a		ply				ply
.8c64		fa		plx				plx
.8c65		c9 00		cmp #$00			cmp 	#0 							; set Z flag if EOF.
.8c67		60		rts				rts
.8c68						LoadReadByteInit:
.8c68		8d ac 07	sta $07ac			sta     LoadFileStream 				; save stream
.8c6b		9c ad 07	stz $07ad			stz     LoadNextCharacter 			; reset buffer
.8c6e		9c ae 07	stz $07ae			stz     LoadEndCharacter
.8c71		60		rts				rts
.8c72						LoadReadByte:
.8c72		da		phx				phx
.8c73		ae ad 07	ldx $07ad			ldx     LoadNextCharacter 					; all data consumed ?
.8c76		ec ae 07	cpx $07ae			cpx     LoadEndCharacter
.8c79		d0 12		bne $8c8d			bne     _KNLRBGetNextByte
.8c7b		ad ac 07	lda $07ac			lda     LoadFileStream
.8c7e		a2 40		ldx #$40			ldx     #KNLReadBufferLen 			; set bytes to read.
.8c80		20 fc 83	jsr $83fc			jsr     KNLReadBlock 				; read next chunk from the stream
.8c83		b0 0f		bcs $8c94			bcs     _KNLRBError 				; error has occurred on read.
.8c85		8d ae 07	sta $07ae			sta     LoadEndCharacter 						; # read is the number available
.8c88		a2 00		ldx #$00			ldx     #0 							; reset the read pointer.
.8c8a		8e ad 07	stx $07ad			stx     LoadNextCharacter
.8c8d						_KNLRBGetNextByte:
.8c8d		bd 9a 06	lda $069a,x			lda     KNLReadBuffer,x 			; get the next data item
.8c90		ee ad 07	inc $07ad			inc     LoadNextCharacter 					; and advance the index
.8c93		18		clc				clc 								; succeeded
.8c94						_KNLRBError:
.8c94		fa		plx				plx
.8c95		60		rts				rts
.07aa						LoadEOFFlag:
>07aa								.fill 	1
.07ab						BasicFileStream:
>07ab								.fill 	1
.07ac						LoadFileStream:
>07ac								.byte   ?
.07ad						LoadNextCharacter:
>07ad								.byte   ?
.07ae						LoadEndCharacter:
>07ae								.byte   ?

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/commands/files/save.asm

.8c96						Command_Save:
.8c96		20 ed a8	jsr $a8ed			jsr 	EvaluateString 				; file name to load
.8c99		a6 37		ldx $37				ldx 	zTemp0+1					; zTemp0 -> XA
.8c9b		a5 36		lda $36				lda 	zTemp0
.8c9d		20 a2 83	jsr $83a2			jsr 	KNLOpenFileWrite 			; open file for writing
.8ca0		b0 2f		bcs $8cd1			bcs 	CSErrorHandler 				; error, so fail.
.8ca2		8d ab 07	sta $07ab			sta 	BasicFileStream 			; save the reading stream.
.8ca5		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8ca7		85 30		sta $30				sta 	codePtr
.8ca9		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8cab		85 31		sta $31				sta 	codePtr+1
.8cad						_CSLoop:
.8cad		b2 30		lda ($30)			lda 	(codePtr)
.8caf		f0 17		beq $8cc8			beq 	_CSExit
.8cb1		20 f5 8c	jsr $8cf5			jsr 	CSGetCleanLine
.8cb4		84 37		sty $37				sty 	zTemp0+1 					; save write address of data
.8cb6		85 36		sta $36				sta 	zTemp0
.8cb8		20 d4 8c	jsr $8cd4			jsr 	CLWriteByteBlock 			; write the block out.
.8cbb		18		clc				clc
.8cbc		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8cbe		65 30		adc $30				adc 	codePtr
.8cc0		85 30		sta $30				sta 	codePtr
.8cc2		90 02		bcc $8cc6			bcc 	_CREExit
.8cc4		e6 31		inc $31				inc 	codePtr+1 					; carry
.8cc6						_CREExit:
.8cc6		80 e5		bra $8cad			bra 	_CSLoop
.8cc8						_CSExit:
.8cc8		ad ab 07	lda $07ab			lda 	BasicFileStream 			; close file
.8ccb		20 71 84	jsr $8471			jsr 	KNLCloseFile
.8cce		4c fd 8b	jmp $8bfd			jmp 	CLComplete 					; display complete message.
.8cd1						CSErrorHandler:
.8cd1		4c 18 8c	jmp $8c18			jmp 	CLErrorHandler
.8cd4						CLWriteByteBlock:
.8cd4		e0 00		cpx #$00			cpx 	#0 							; written the lot ?
.8cd6		f0 1c		beq $8cf4			beq 	_CLWBBExit					; if so, exit
.8cd8		ad ab 07	lda $07ab			lda 	BasicFileStream 			; stream to write, count in X
.8cdb		20 37 84	jsr $8437			jsr 	KNLWriteBlock 				; call one write attempt
.8cde		b0 f1		bcs $8cd1			bcs 	CSErrorHandler 				; error occurred
.8ce0		85 38		sta $38				sta 	zTemp1 						; save bytes written.
.8ce2		8a		txa				txa 								; subtract bytes written from X, total count.
.8ce3		38		sec				sec
.8ce4		e5 38		sbc $38				sbc 	zTemp1
.8ce6		aa		tax				tax
.8ce7		18		clc				clc 								; advance zTemp0 pointer by bytes written.
.8ce8		a5 36		lda $36				lda 	zTemp0
.8cea		65 38		adc $38				adc 	zTemp1
.8cec		85 36		sta $36				sta 	zTemp0
.8cee		90 e4		bcc $8cd4			bcc 	CLWriteByteBlock
.8cf0		e6 37		inc $37				inc 	zTemp0+1
.8cf2		80 e0		bra $8cd4			bra 	CLWriteByteBlock 			; and retry write out.
.8cf4						_CLWBBExit:
.8cf4		60		rts				rts
.8cf5						CSGetCleanLine:
.8cf5		a9 00		lda #$00			lda 	#0 							; no indent.
.8cf7		20 7f 80	jsr $807f			jsr 	TKListConvertLine 			; convert line into token Buffer
.8cfa		a2 00		ldx #$00			ldx 	#0 							; copy stripping controls.
.8cfc		a0 00		ldy #$00			ldy 	#0
.8cfe						_CSClean:
.8cfe		b9 29 04	lda $0429,y			lda 	tokenBuffer,y
.8d01		f0 09		beq $8d0c			beq 	_CSDoneClean
.8d03		30 04		bmi $8d09			bmi 	_CSIgnoreCharacter
.8d05		9d 26 05	sta $0526,x			sta 	lineBuffer,x
.8d08		e8		inx				inx
.8d09						_CSIgnoreCharacter:
.8d09		c8		iny				iny
.8d0a		80 f2		bra $8cfe			bra 	_CSClean
.8d0c						_CSDoneClean:
.8d0c		a9 0d		lda #$0d			lda 	#13 						; add CR, length now in X and ASCIIZ.
.8d0e		9d 26 05	sta $0526,x			sta 	lineBuffer,x
.8d11		e8		inx				inx
.8d12		9e 26 05	stz $0526,x			stz 	lineBuffer,x
.8d15		a0 05		ldy #$05			ldy 	#(lineBuffer >> 8) 			; line address in YA
.8d17		a9 26		lda #$26			lda 	#(lineBuffer & $FF)
.8d19		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/commands/files/try.asm

.8d1a						Command_Try:
.8d1a		b1 30		lda ($30),y			lda 	(codePtr),y
.8d1c		c9 81		cmp #$81			cmp 	#KWC_SHIFT1					; can only try in SHIFT_1
.8d1e		d0 0c		bne $8d2c			bne 	_TrySyntax
.8d20		c8		iny				iny 								; get second
.8d21		b1 30		lda ($30),y			lda 	(codePtr),y
.8d23		c8		iny				iny 								; and consume it.
.8d24		c9 86		cmp #$86			cmp 	#KWD1_BLOAD
.8d26		f0 09		beq $8d31			beq 	_TryBLoad
.8d28		c9 87		cmp #$87			cmp	 	#KWD1_BSAVE
.8d2a		f0 0a		beq $8d36			beq 	_TryBSave
.8d2c						_TrySyntax:
.8d2c		a9 02		lda #$02		lda	#2
.8d2e		4c 35 9a	jmp $9a35		jmp	ErrorHandler
.8d31						_TryBLoad:
.8d31		20 c9 89	jsr $89c9			jsr 	BLOADHandler
.8d34		80 03		bra $8d39			bra 	_TryExit
.8d36						_TryBSave:
.8d36		20 75 8a	jsr $8a75			jsr 	BSaveHandler
.8d39						_TryExit:
.8d39		48		pha				pha 								; save result
.8d3a		b1 30		lda ($30),y			lda 	(codePtr),y
.8d3c		c8		iny				iny
.8d3d		c9 db		cmp #$db			cmp 	#KWD_TO
.8d3f		d0 eb		bne $8d2c			bne 	_TrySyntax
.8d41		a2 00		ldx #$00			ldx 	#0 							; get an integer reference.
.8d43		20 89 a3	jsr $a389			jsr 	EvaluateTerm
.8d46		b5 50		lda $50,x			lda 	NSStatus,x
.8d48		c9 20		cmp #$20			cmp 	#NSBIsReference+NSTInteger 	; do we have an integer 4 byte reference.
.8d4a		d0 e0		bne $8d2c			bne		_TrySyntax
.8d4c		68		pla				pla 								; error code.
.8d4d		a2 01		ldx #$01			ldx	 	#1 							; address in 0, data in 1
.8d4f		20 97 a9	jsr $a997			jsr 	NSMSetByte
.8d52		ca		dex				dex
.8d53		20 8a 90	jsr $908a			jsr 	AssignVariable 				; do the assign and exit
.8d56		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/commands/files/verify.asm

.e7fa						m
.8d57						Command_VERIFY:
.8d57		20 ed a8	jsr $a8ed			jsr 	EvaluateString 				; file name to verify
.8d5a		a6 37		ldx $37				ldx 	zTemp0+1					; zTemp0 -> XA
.8d5c		a5 36		lda $36				lda 	zTemp0
.8d5e		20 a7 83	jsr $83a7			jsr 	KNLOpenFileRead 			; open file for reading
.8d61		b0 4b		bcs $8dae			bcs 	_CVErrorHandler 			; error, so fail.
.8d63		8d ab 07	sta $07ab			sta 	BasicFileStream 			; save the reading stream.
.8d66		20 68 8c	jsr $8c68			jsr     LoadReadByteInit            ; Init reader with the stream
.8d69		9c aa 07	stz $07aa			stz 	LoadEOFFlag 				; clear EOF Flag.
.8d6c		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8d6e		85 30		sta $30				sta 	codePtr
.8d70		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8d72		85 31		sta $31				sta 	codePtr+1
.8d74						_CVLoop:
.8d74		20 26 8c	jsr $8c26			jsr 	LoadReadLine 				; get next line.
.8d77		f0 27		beq $8da0			beq 	_CVExit 					; end, exit.
.8d79		20 89 80	jsr $8089			jsr 	TKTokeniseLine 				; tokenise the line.
.8d7c		ad 27 04	lda $0427			lda 	tokenLineNumber 			; line number = 0
.8d7f		0d 28 04	ora $0428			ora 	tokenLineNumber+1
.8d82		f0 f0		beq $8d74			beq 	_CVLoop 					; not legal code, blank line or maybe a comment.
.8d84		a0 00		ldy #$00			ldy 	#0 							; start compare
.8d86						_CVCompareLoop:
.8d86		b1 30		lda ($30),y			lda 	(codePtr),y
.8d88		d9 26 04	cmp $0426,y			cmp 	tokenOffset,y 				; compare against actual code.
.8d8b		d0 1c		bne $8da9			bne 	_CVCompareError
.8d8d		c8		iny				iny
.8d8e		cc 26 04	cpy $0426			cpy 	tokenOffset 				; until done whole line of code
.8d91		d0 f3		bne $8d86			bne 	_CVCompareLoop
.8d93		18		clc				clc
.8d94		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8d96		65 30		adc $30				adc 	codePtr
.8d98		85 30		sta $30				sta 	codePtr
.8d9a		90 02		bcc $8d9e			bcc 	_CREExit
.8d9c		e6 31		inc $31				inc 	codePtr+1 					; carry
.8d9e						_CREExit:
.8d9e		80 d4		bra $8d74			bra 	_CVLoop
.8da0						_CVExit:
.8da0		ad ab 07	lda $07ab			lda 	BasicFileStream
.8da3		20 71 84	jsr $8471			jsr 	KNLCloseFile
.8da6		4c fd 8b	jmp $8bfd			jmp 	CLComplete
.8da9						_CVCompareError:
.8da9		a9 1b		lda #$1b		lda	#27
.8dab		4c 35 9a	jmp $9a35		jmp	ErrorHandler
.8dae						_CVErrorHandler:
.8dae		4c 18 8c	jmp $8c18			jmp 	CLErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/for.asm

.8db1						ForCommand:
.8db1		a9 d9		lda #$d9			lda 	#STK_FOR+9 					; allocate 18 bytes on the return stack (see above).
.8db3		20 ab b2	jsr $b2ab			jsr 	StackOpen
.8db6		a2 00		ldx #$00			ldx 	#0
.8db8		20 89 a3	jsr $a389			jsr 	EvaluateTerm
.8dbb		b5 50		lda $50,x			lda 	NSStatus,x
.8dbd		c9 20		cmp #$20			cmp 	#NSBIsReference+NSTInteger 	; do we have an integer 4 byte reference.
.8dbf		d0 47		bne $8e08			bne		_FCError
.8dc1		a9 3d		lda #$3d			lda 	#KWD_EQUAL 					; =
.8dc3		20 2c 9a	jsr $9a2c			jsr 	CheckNextA
.8dc6		e8		inx				inx
.8dc7		20 02 a9	jsr $a902			jsr 	EvaluateInteger 			; <from> in +1
.8dca		b1 30		lda ($30),y			lda 	(codePtr),y
.8dcc		c8		iny				iny 								; consume it
.8dcd		48		pha				pha 								; save on stack for later
.8dce		c9 c1		cmp #$c1			cmp 	#KWD_DOWNTO
.8dd0		f0 04		beq $8dd6			beq 	_FCNoSyntax
.8dd2		c9 db		cmp #$db			cmp 	#KWD_TO
.8dd4		d0 35		bne $8e0b			bne 	_FCSyntaxError
.8dd6						_FCNoSyntax:
.8dd6		e8		inx				inx
.8dd7		20 02 a9	jsr $a902			jsr 	EvaluateInteger
.8dda		20 f0 b2	jsr $b2f0			jsr 	STKSaveCodePosition 		; save loop back position
.8ddd		68		pla				pla 								; restore DOWNTO or TO
.8dde		5a		phy				phy 								; save Y on the stack
.8ddf		49 c1		eor #$c1			eor 	#KWD_DOWNTO 				; 0 if DOWNTO, #0 if TO
.8de1		f0 02		beq $8de5			beq 	_FCNotDownTo
.8de3		a9 02		lda #$02			lda 	#2
.8de5						_FCNotDownTo:
.8de5		3a		dec a				dec 	a 							; 255 if DOWNTO, 1 if TO
.8de6		a0 10		ldy #$10			ldy 	#16
.8de8		91 34		sta ($34),y			sta 	(basicStack),y 				; copy that out to the Basic Stack.
.8dea		a0 06		ldy #$06			ldy 	#6 							; this is the address of the loop variable.
.8dec		a5 58		lda $58				lda 	NSMantissa0
.8dee		91 34		sta ($34),y			sta 	(basicStack),y
.8df0		a5 60		lda $60				lda 	NSMantissa1
.8df2		c8		iny				iny
.8df3		91 34		sta ($34),y			sta 	(basicStack),y
.8df5		a0 08		ldy #$08			ldy 	#8 							; set initial index value
.8df7		a2 01		ldx #$01			ldx 	#1
.8df9		20 0e 8e	jsr $8e0e			jsr 	FCIntegerToStack
.8dfc		a0 0c		ldy #$0c			ldy 	#12 						; set the terminal value
.8dfe		a2 02		ldx #$02			ldx 	#2
.8e00		20 0e 8e	jsr $8e0e			jsr 	FCIntegerToStack
.8e03		20 29 8e	jsr $8e29			jsr 	CopyIndexToReference
.8e06		7a		ply				ply 								; restore position
.8e07		60		rts				rts
.8e08						_FCError:
.8e08		4c 3b ac	jmp $ac3b			jmp 	TypeError
.8e0b						_FCSyntaxError:
.8e0b		4c 31 ac	jmp $ac31			jmp 	SyntaxError
.8e0e						FCIntegerToStack:
.8e0e		34 50		bit $50,x			bit 	NSStatus,x 					; is the value negative
.8e10		10 03		bpl $8e15			bpl	 	_FCNotNegative
.8e12		20 5e a9	jsr $a95e			jsr 	NSMNegateMantissa 			; if so 2's complement the mantissa
.8e15						_FCNotNegative:
.8e15		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy out to the basic stack
.8e17		91 34		sta ($34),y			sta 	(basicStack),y
.8e19		c8		iny				iny
.8e1a		b5 60		lda $60,x			lda 	NSMantissa1,x
.8e1c		91 34		sta ($34),y			sta 	(basicStack),y
.8e1e		c8		iny				iny
.8e1f		b5 68		lda $68,x			lda 	NSMantissa2,x
.8e21		91 34		sta ($34),y			sta 	(basicStack),y
.8e23		c8		iny				iny
.8e24		b5 70		lda $70,x			lda 	NSMantissa3,x
.8e26		91 34		sta ($34),y			sta 	(basicStack),y
.8e28		60		rts				rts
.8e29						CopyIndexToReference:
.8e29		5a		phy				phy
.8e2a		a0 06		ldy #$06			ldy 	#6 							; copy address-8 to write to zTemp0
.8e2c		38		sec				sec 								; (because we copy from offset 8)
.8e2d		b1 34		lda ($34),y			lda 	(basicStack),y
.8e2f		e9 08		sbc #$08			sbc 	#8
.8e31		85 36		sta $36				sta 	zTemp0
.8e33		c8		iny				iny
.8e34		b1 34		lda ($34),y			lda 	(basicStack),y
.8e36		e9 00		sbc #$00			sbc 	#0
.8e38		85 37		sta $37				sta 	zTemp0+1
.8e3a		a2 04		ldx #$04			ldx 	#4 							; this is the copy counter/
.8e3c		a0 0b		ldy #$0b			ldy 	#8+3 		 				; the MSB of the mantissa
.8e3e		b1 34		lda ($34),y			lda 	(basicStack),y
.8e40		0a		asl a				asl 	a 							; into carry
.8e41		a0 08		ldy #$08			ldy 	#8 							; where to copy from.
.8e43		90 14		bcc $8e59			bcc 	_CITRNormal
.8e45		38		sec				sec
.8e46						_CITRNegative:
.8e46		a9 00		lda #$00			lda 	#0
.8e48		f1 34		sbc ($34),y			sbc 	(basicStack),y
.8e4a		91 36		sta ($36),y			sta 	(zTemp0),y
.8e4c		c8		iny				iny
.8e4d		ca		dex				dex
.8e4e		d0 f6		bne $8e46			bne 	_CITRNegative
.8e50		88		dey				dey 								; look at MSB of mantissa
.8e51		b1 36		lda ($36),y			lda 	(zTemp0),y 					; set the MSB as negative packed.
.8e53		09 80		ora #$80			ora 	#$80
.8e55		91 36		sta ($36),y			sta 	(zTemp0),y
.8e57		7a		ply				ply
.8e58		60		rts				rts
.8e59						_CITRNormal:
.8e59		b1 34		lda ($34),y			lda 	(basicStack),y 				; copy without negation.
.8e5b		91 36		sta ($36),y			sta 	(zTemp0),y
.8e5d		c8		iny				iny
.8e5e		ca		dex				dex
.8e5f		d0 f8		bne $8e59			bne 	_CITRNormal
.8e61		7a		ply				ply 								; and exit.
.8e62		60		rts				rts
.8e63						NextCommand:
.8e63		a9 d9		lda #$d9			lda 	#STK_FOR+9 					; check FOR is TOS
.8e65		a2 11		ldx #$11			ldx 	#ERRID_FOR 					; this error
.8e67		20 d8 b2	jsr $b2d8			jsr 	StackCheckFrame
.8e6a		5a		phy				phy
.8e6b		a0 10		ldy #$10			ldy 	#16 						; get the step count
.8e6d		b1 34		lda ($34),y			lda 	(basicStack),y
.8e6f		85 36		sta $36				sta 	zTemp0 						; this is the sign extend
.8e71		30 02		bmi $8e75			bmi 	_NCStepNeg
.8e73		64 36		stz $36				stz 	zTemp0 						; which is 0 or 255
.8e75						_NCStepNeg:
.8e75		a0 08		ldy #$08			ldy 	#8 							; offset to bump
.8e77		a2 04		ldx #$04			ldx 	#4 							; count to bump
.8e79		18		clc				clc
.8e7a						_NCBump:
.8e7a		71 34		adc ($34),y			adc 	(basicStack),y 				; add it
.8e7c		91 34		sta ($34),y			sta 	(basicStack),y
.8e7e		a5 36		lda $36				lda 	zTemp0 						; get sign extend for next time.
.8e80		c8		iny				iny 								; next byte
.8e81		ca		dex				dex 								; do four times
.8e82		d0 f6		bne $8e7a			bne 	_NCBump
.8e84		20 29 8e	jsr $8e29			jsr		CopyIndexToReference		; copy it to the reference variable.
.8e87		a0 10		ldy #$10			ldy 	#16 						; get step count again
.8e89		b1 34		lda ($34),y			lda 	(basicStack),y
.8e8b		0a		asl a				asl 	a 							; sign bit to carry
.8e8c		a9 0c		lda #$0c			lda 	#12 						; offset of LHS = terminal offset
.8e8e		85 38		sta $38				sta 	zTemp1
.8e90		90 02		bcc $8e94			bcc 	_NCCompRev 					; use if step is +ve
.8e92		a9 08		lda #$08			lda 	#8 							; now the LHS = index value
.8e94						_NCCompRev:
.8e94		85 38		sta $38				sta 	zTemp1 						; so zTemp0 is the index for LHS
.8e96		49 04		eor #$04			eor 	#(8^12) 					; and zTemp0+1 is the index for RHS
.8e98		85 39		sta $39				sta 	zTemp1+1
.8e9a		a2 04		ldx #$04			ldx 	#4 							; bytes to compare
.8e9c		38		sec				sec
.8e9d						_NCCompare:
.8e9d		a4 38		ldy $38				ldy 	zTemp1 						; do compare using the two indices
.8e9f		b1 34		lda ($34),y			lda 	(basicStack),y
.8ea1		a4 39		ldy $39				ldy 	zTemp1+1
.8ea3		f1 34		sbc ($34),y			sbc 	(basicStack),y
.8ea5		e6 38		inc $38				inc 	zTemp1 						; bump the indices (inc,dex do not change C or V)
.8ea7		e6 39		inc $39				inc 	zTemp1+1
.8ea9		ca		dex				dex 								; do it 4 times.
.8eaa		d0 f1		bne $8e9d			bne 	_NCCompare
.8eac		50 02		bvc $8eb0			bvc 	_NCNoOverflow 				; convert to signed comparison
.8eae		49 80		eor #$80			eor 	#$80
.8eb0						_NCNoOverflow:
.8eb0		7a		ply				ply 								; restore Y position
.8eb1		0a		asl a				asl 	a 							; is bit 7 set.
.8eb2		90 04		bcc $8eb8			bcc 	_NCLoopBack 				; if no , >= so loop back
.8eb4		20 ca b2	jsr $b2ca			jsr 	StackClose 					; exit the loop
.8eb7		60		rts				rts
.8eb8						_NCLoopBack:
.8eb8		20 01 b3	jsr $b301			jsr 	STKLoadCodePosition 		; loop back
.8ebb		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/gosub.asm

.8ebc						Command_GOSUB:
.8ebc		a2 00		ldx #$00			ldx 	#0
.8ebe		20 15 a9	jsr $a915			jsr 	Evaluate16BitInteger 		; line number in Stack.0
.8ec1		a9 e3		lda #$e3			lda 	#STK_GOSUB+3
.8ec3		20 ab b2	jsr $b2ab			jsr 	StackOpen 					; create frame
.8ec6		20 f0 b2	jsr $b2f0			jsr 	STKSaveCodePosition 		; save current position
.8ec9		4c df 8e	jmp $8edf			jmp 	GotoStackX
.8ecc						Command_RETURN:
.8ecc		a9 e0		lda #$e0			lda 	#STK_GOSUB 					; check TOS is this
.8ece		a2 0e		ldx #$0e			ldx 	#ERRID_GOSUB 				; this error
.8ed0		20 d8 b2	jsr $b2d8			jsr 	StackCheckFrame
.8ed3		20 01 b3	jsr $b301			jsr 	STKLoadCodePosition 		; restore code position
.8ed6		20 ca b2	jsr $b2ca			jsr 	StackClose
.8ed9		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/goto.asm

.8eda						GotoCommand:
.8eda		a2 00		ldx #$00			ldx 	#0 							; GOTO where
.8edc		20 15 a9	jsr $a915			jsr 	Evaluate16BitInteger
.8edf						GotoStackX:
.8edf		b5 60		lda $60,x			lda  	NSMantissa1,x 				; put line # in XA. I'll keep this even though
.8ee1		48		pha				pha 								; it is slightly inefficient, just in cases.
.8ee2		b5 58		lda $58,x			lda 	NSMantissa0,x
.8ee4		fa		plx				plx
.8ee5		20 c9 ae	jsr $aec9			jsr 	MemorySearch 				; transfer to line number AX.
.8ee8		90 05		bcc $8eef			bcc 	_GotoError 					; not found, off end.
.8eea		d0 03		bne $8eef			bne 	_GotoError 					; not found exactly
.8eec		4c 92 95	jmp $9592			jmp 	RunNewLine 					; and go straight to new line code.
.8eef						_GotoError:
.8eef		a9 0d		lda #$0d		lda	#13
.8ef1		4c 35 9a	jmp $9a35		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/if.asm

.8ef4						IfCommand:
.8ef4		a2 00		ldx #$00			ldx 	#0 							; Get the if test.
.8ef6		20 e3 a8	jsr $a8e3			jsr 	EvaluateNumber
.8ef9		b1 30		lda ($30),y			lda 	(codePtr),y
.8efb		c9 b5		cmp #$b5			cmp 	#KWD_THEN  					; could be THEN <stuff>
.8efd		d0 0a		bne $8f09			bne 	_IfStructured 				; we still support it.
.8eff		c8		iny				iny 								; consume THEN
.8f00		20 b7 a9	jsr $a9b7			jsr 	NSMIsZero 					; is it zero
.8f03		f0 01		beq $8f06			beq 	_IfFail 					; if fail, go to next line
.8f05		60		rts				rts 								; if THEN just continue
.8f06						_IfFail:
.8f06		4c 6d 95	jmp $956d			jmp 	EOLCommand
.8f09						_IfStructured:
.8f09		20 b7 a9	jsr $a9b7			jsr 	NSMIsZero 					; is it zero
.8f0c		d0 07		bne $8f15			bne 	_IfExit 					; if not, then continue normally.
.8f0e		a9 c2		lda #$c2			lda 	#KWD_ELSE 					; look for else/endif
.8f10		a2 b2		ldx #$b2			ldx 	#KWD_ENDIF
.8f12		20 77 99	jsr $9977			jsr 	ScanForward 				; and run from there
.8f15						_IfExit:
.8f15		60		rts				rts
.8f16						ElseCode:
.8f16		a9 b2		lda #$b2			lda 	#KWD_ENDIF 					; else is only run after the if clause succeeds
.8f18		aa		tax				tax 								; so just go to the structure exit
.8f19		20 77 99	jsr $9977			jsr 	ScanForward
.8f1c		60		rts				rts
.8f1d						EndIf:
.8f1d		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/inputprint.asm

.8f1e						Command_Input:
.8f1e		9c 24 04	stz $0424			stz 	isPrintFlag
.8f21		80 0c		bra $8f2f			bra 	Command_IP_Main
.8f23						Command_CPrint:
.8f23		a9 7f		lda #$7f			lda 	#$7F 						; set input flag to character mode
.8f25		8d 24 04	sta $0424			sta 	isPrintFlag 				; clear input flag
.8f28		80 05		bra $8f2f			bra 	Command_IP_Main
.8f2a						Command_Print:
.8f2a		a9 ff		lda #$ff			lda 	#$FF 						; set input flag
.8f2c		8d 24 04	sta $0424			sta 	isPrintFlag 				; clear input flag
.8f2f						Command_IP_Main:
.8f2f		18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.8f30						_CPLoop:
.8f30		08		php				php 								; save last action flag
.8f31		b1 30		lda ($30),y			lda 	(codePtr),y
.8f33		c9 80		cmp #$80			cmp  	#KWC_EOL 					; end of line or colon, exit now.
.8f35		f0 54		beq $8f8b			beq 	_CPExit
.8f37		c9 3a		cmp #$3a			cmp 	#KWD_COLON
.8f39		f0 50		beq $8f8b			beq 	_CPExit
.8f3b		68		pla				pla 								; throw last action flag
.8f3c		b1 30		lda ($30),y			lda 	(codePtr),y
.8f3e		c8		iny				iny
.8f3f		c9 3b		cmp #$3b			cmp 	#KWD_SEMICOLON				; is it a semicolon
.8f41		f0 45		beq $8f88			beq 	_CPContinueWithSameLine
.8f43		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; comma
.8f45		f0 3c		beq $8f83			beq 	_CPTab
.8f47		c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; apostrophe (new line)
.8f49		f0 34		beq $8f7f			beq 	_CPNewLine
.8f4b		88		dey				dey 								; undo the get.
.8f4c		20 3d 9f	jsr $9f3d			jsr 	EvaluateExpressionAt0 		; evaluate expression at 0.
.8f4f		b5 50		lda $50,x			lda 	NSStatus,x 					; read the status
.8f51		29 20		and #$20			and 	#NSBIsReference 			; is it a reference
.8f53		f0 0d		beq $8f62			beq 	_CPIsValue 					; no, display it.
.8f55		ad 24 04	lda $0424			lda 	isPrintFlag 				; if print, dereference and print.
.8f58		d0 05		bne $8f5f			bne 	_CPIsPrint 					; otherwise display.
.8f5a		20 94 8f	jsr $8f94			jsr 	CIInputValue 				; input a value to the reference
.8f5d		80 20		bra $8f7f			bra 	_CPNewLine
.8f5f						_CPIsPrint:
.8f5f		20 02 a2	jsr $a202			jsr 	Dereference 				; dereference if required.
.8f62						_CPIsValue:
.8f62		b5 50		lda $50,x			lda 	NSStatus,x 					; is it a number
.8f64		29 10		and #$10			and 	#NSBIsString
.8f66		f0 09		beq $8f71			beq 	_CPNumber
.8f68		a6 60		ldx $60				ldx 	NSMantissa1 				; string, print the text.
.8f6a		a5 58		lda $58				lda 	NSMantissa0
.8f6c		20 f7 8f	jsr $8ff7			jsr 	CPPrintStringXA
.8f6f		80 be		bra $8f2f			bra 	Command_IP_Main 			; loop round clearing carry so NL if end
.8f71						_CPNumber:
.8f71		a9 05		lda #$05			lda 	#5 							; maximum decimals
.8f73		20 ca a7	jsr $a7ca			jsr 	ConvertNumberToString 		; convert to string (in unary str$() function)
.8f76		a2 06		ldx #$06			ldx 	#decimalBuffer >> 8
.8f78		a9 45		lda #$45			lda 	#decimalBuffer & $FF
.8f7a		20 f7 8f	jsr $8ff7			jsr 	CPPrintStringXA 			; print it.
.8f7d		80 b0		bra $8f2f			bra 	Command_IP_Main				; loop round clearing carry so NL if end
.8f7f						_CPNewLine:
.8f7f		a9 0d		lda #$0d			lda 	#13
.8f81		80 02		bra $8f85			bra 	_CPPrintCharDirect
.8f83						_CPTab:
.8f83		a9 09		lda #$09			lda 	#9 							; print TAB
.8f85						_CPPrintCharDirect:
.8f85		20 12 90	jsr $9012			jsr 	CPPVControl 				; print TAB/CR using the non PETSCII
.8f88						_CPContinueWithSameLine:
.8f88		38		sec				sec 								; loop round with carry set, which
.8f89		80 a5		bra $8f30			bra 	_CPLoop 					; will inhibit final CR
.8f8b						_CPExit:
.8f8b		28		plp				plp 								; get last action flag
.8f8c		b0 05		bcs $8f93			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.8f8e		a9 0d		lda #$0d			lda 	#13 						; print new line
.8f90		20 12 90	jsr $9012			jsr 	CPPVControl
.8f93						_CPExit2:
.8f93		60		rts				rts
.8f94						CIInputValue:
.8f94		a2 00		ldx #$00			ldx 	#0 							; input a line.
.8f96						_CIInputLine:
.8f96		20 15 90	jsr $9015			jsr 	CPInputVector 				; get key
.8f99		c9 0d		cmp #$0d			cmp 	#13 						; 13 = End
.8f9b		f0 1f		beq $8fbc			beq 	_CIHaveValue
.8f9d		c9 08		cmp #$08			cmp 	#8 							; 8 = BS
.8f9f		f0 11		beq $8fb2			beq 	_CIBackspace
.8fa1		c9 20		cmp #$20			cmp 	#32 						; ignore other control characters
.8fa3		90 f1		bcc $8f96			bcc 	_CIInputLine
.8fa5		e0 50		cpx #$50			cpx 	#80 						; max length
.8fa7		b0 ed		bcs $8f96			bcs 	_CIInputLine
.8fa9		9d 26 05	sta $0526,x			sta 	lineBuffer,x
.8fac		e8		inx				inx
.8fad		20 43 80	jsr $8043			jsr 	EXTPrintCharacter 			; echo it.
.8fb0		80 e4		bra $8f96			bra 	_CIInputLine
.8fb2						_CIBackspace:
.8fb2		e0 00		cpx #$00			cpx 	#0 							; nothing to delete
.8fb4		f0 e0		beq $8f96			beq 	_CIInputLine
.8fb6		20 43 80	jsr $8043			jsr 	EXTPrintCharacter 			; echo it.
.8fb9		ca		dex				dex
.8fba		80 da		bra $8f96			bra 	_CIInputLine
.8fbc						_CIHaveValue:
.8fbc		9e 26 05	stz $0526,x			stz 	lineBuffer,x 				; ASCIIZ string now in line buffer.
.8fbf		a5 50		lda $50				lda 	NSStatus 					; was it a string assignment
.8fc1		29 10		and #$10			and 	#NSBIsString
.8fc3		f0 17		beq $8fdc			beq 	_CIAssignNumber 			; assign a number
.8fc5		a2 01		ldx #$01			ldx 	#1
.8fc7		a9 26		lda #$26			lda 	#lineBuffer & $FF 			; set up to point to new string
.8fc9		95 58		sta $58,x			sta 	NSMantissa0,x
.8fcb		a9 05		lda #$05			lda 	#lineBuffer >> 8
.8fcd		95 60		sta $60,x			sta 	NSMantissa1,x
.8fcf		74 68		stz $68,x			stz 	NSMantissa2,x
.8fd1		74 70		stz $70,x			stz 	NSMantissa3,x
.8fd3		a9 10		lda #$10			lda 	#NSBIsString 				; so it becomes a string value
.8fd5		95 50		sta $50,x			sta  	NSStatus,x
.8fd7		ca		dex				dex 								; X = 0
.8fd8		20 8a 90	jsr $908a			jsr 	AssignVariable
.8fdb		60		rts				rts
.8fdc						_CIAssignNumber:
.8fdc		a9 26		lda #$26			lda 	#lineBuffer & $FF 			; set up to point to new string
.8fde		85 36		sta $36				sta 	zTemp0
.8fe0		a9 05		lda #$05			lda 	#lineBuffer >> 8
.8fe2		85 37		sta $37				sta 	zTemp0+1
.8fe4		a2 01		ldx #$01			ldx 	#1 							; put in slot 1
.8fe6		20 aa a6	jsr $a6aa			jsr 	ValEvaluateZTemp0 			; use the VAL() code
.8fe9		90 07		bcc $8ff2			bcc 	_CIIsOkay
.8feb		a9 3f		lda #$3f			lda 	#"?" 						; error ?
.8fed		20 0a 90	jsr $900a			jsr 	CPPrintVector
.8ff0		80 a2		bra $8f94			bra 	CIInputValue
.8ff2						_CIIsOkay:
.8ff2		ca		dex				dex 								; X = 0
.8ff3		20 8a 90	jsr $908a			jsr 	AssignVariable
.8ff6		60		rts				rts
.8ff7						CPPrintStringXA:
.8ff7		5a		phy				phy
.8ff8		86 37		stx $37				stx 	zTemp0+1
.8ffa		85 36		sta $36				sta 	zTemp0
.8ffc		a0 00		ldy #$00			ldy 	#0
.8ffe						_PSXALoop:
.8ffe		b1 36		lda ($36),y			lda 	(zTemp0),y
.9000		f0 06		beq $9008			beq 	_PSXAExit
.9002		20 0a 90	jsr $900a			jsr 	CPPrintVector
.9005		c8		iny				iny
.9006		80 f6		bra $8ffe			bra 	_PSXALoop
.9008						_PSXAExit:
.9008		7a		ply				ply
.9009		60		rts				rts
.900a						CPPrintVector:
.900a		2c 24 04	bit $0424			bit 	isPrintFlag 				; check if char only mode and call appropriate handler.
.900d		30 03		bmi $9012			bmi 	CPPVControl
.900f		4c 4d 80	jmp $804d			jmp 	EXTPrintNoControl
.9012						CPPVControl:
.9012		4c 43 80	jmp $8043			jmp 	EXTPrintCharacter
.9015						CPInputVector:
.9015		4c 9e 81	jmp $819e			jmp 	KNLGetSingleCharacter

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/commands/joy.asm

.9018						UnaryJoyX:
.9018		18		clc				clc
.9019		80 01		bra $901c			bra 	JoyMain
.901b						UnaryJoyY:
.901b		38		sec				sec
.901c						JoyMain:
.901c		fa		plx				plx 								; get pos
.901d		08		php				php 								; save carry (set for Y)
.901e		20 30 a9	jsr $a930			jsr 	Evaluate8BitInteger 		; ignore the parameter
.9021		20 1c 9a	jsr $9a1c			jsr 	CheckRightBracket
.9024		20 77 84	jsr $8477			jsr 	KNLReadController 			; read the controller.
.9027		28		plp				plp
.9028		b0 02		bcs $902c			bcs 	_JMNoShift 					; if X then shift bits 3,2 -> 1,0
.902a		4a		lsr a				lsr 	a
.902b		4a		lsr a				lsr 	a
.902c						_JMNoShift:
.902c		4a		lsr a				lsr 	a 							; if bit 0 set then left/up e.g. -1
.902d		b0 07		bcs $9036			bcs 	JMIsLeft
.902f		4a		lsr a				lsr 	a 							; if bit 1 set then right/down e.g. +1
.9030		b0 07		bcs $9039			bcs 	JMIsRight
.9032		20 95 a9	jsr $a995			jsr 	NSMSetZero 					; zero result
.9035		60		rts				rts
.9036						JMIsLeft:
.9036		4c a8 9a	jmp $9aa8			jmp 	ReturnTrue
.9039						JMIsRight:
.9039		a9 01		lda #$01			lda 	#1
.903b		20 97 a9	jsr $a997			jsr 	NSMSetByte
.903e		60		rts				rts
.903f						UnaryJoyB:
.903f		fa		plx				plx 								; get pos
.9040		20 30 a9	jsr $a930			jsr 	Evaluate8BitInteger 		; ignore the parameter
.9043		20 1c 9a	jsr $9a1c			jsr 	CheckRightBracket
.9046		20 77 84	jsr $8477			jsr 	KNLReadController 			; read the controller.
.9049		29 10		and #$10			and 	#$10
.904b		d0 e9		bne $9036			bne 	JMIsLeft
.904d		20 95 a9	jsr $a995			jsr 	NSMSetZero
.9050		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/let.asm

.9051						LetCommand:
.9051		a2 00		ldx #$00			ldx 	#0
.9053		b1 30		lda ($30),y			lda 	(codePtr),y
.9055		c9 b8		cmp #$b8			cmp 	#KWD_AT
.9057		d0 14		bne $906d			bne 	_LCStandard
.9059		c8		iny				iny 								; skip equal
.905a		20 89 a3	jsr $a389			jsr 	EvaluateTerm 				; get a number (the address of the reference)
.905d		20 02 a2	jsr $a202			jsr 	Dereference 				; dereference it to a value
.9060		b5 50		lda $50,x			lda 	NSStatus,x 					; check integer
.9062		49 20		eor #$20			eor 	#NSBIsReference	 			; toggle reference
.9064		95 50		sta $50,x			sta 	NSStatus,x
.9066		29 20		and #$20			and 	#NSBIsReference 			; if it is now a reference, continue
.9068		d0 0f		bne $9079			bne 	_LCMain
.906a		4c 3b ac	jmp $ac3b			jmp 	TypeError 					; was a reference before.
.906d						_LCStandard:
.906d		ad 27 9f	lda $9f27			lda 	PrecedenceLevel+"*"			; precedence > this
.9070		20 41 9f	jsr $9f41			jsr 	EvaluateExpressionAtPrecedence
.9073		b5 50		lda $50,x			lda 	NSStatus,x 					; is it a reference to an array marked as procedure ?
.9075		c9 38		cmp #$38			cmp		#NSTProcedure+NSBIsReference
.9077		f0 0e		beq $9087			beq 	_LetGoProc 					; it's a procedure call.
.9079						_LCMain:
.9079		a9 3d		lda #$3d			lda 	#"=" 						; check =
.907b		20 2c 9a	jsr $9a2c			jsr 	CheckNextA
.907e		e8		inx				inx 								; RHS
.907f		20 da a8	jsr $a8da			jsr 	EvaluateValue
.9082		ca		dex				dex
.9083		20 8a 90	jsr $908a			jsr 	AssignVariable
.9086		60		rts				rts
.9087						_LetGoProc:
.9087		4c 43 94	jmp $9443			jmp 	CallProcedure
.908a						AssignVariable:
.908a		b5 50		lda $50,x			lda 	NSStatus,x 					; check the string/number type bits match
.908c		48		pha				pha 								; save a copy
.908d		55 51		eor $51,x			eor 	NSStatus+1,x
.908f		29 10		and #$10			and 	#NSBIsString
.9091		d0 0b		bne $909e			bne 	_ASError
.9093		68		pla				pla 								; get back
.9094		29 10		and #$10			and 	#NSBIsString 				; check type
.9096		d0 03		bne $909b			bne 	_ASString
.9098		4c 40 a1	jmp $a140			jmp 	AssignNumber
.909b						_ASString:
.909b		4c 9e a1	jmp $a19e			jmp 	AssignString
.909e						_ASError:
.909e		4c 3b ac	jmp $ac3b			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/list.asm

.90a1						Command_List:
.90a1		9c 22 04	stz $0422			stz 	listIndent 					; reset indent.
.90a4		a9 3f		lda #$3f			lda 	#$3F 						; silence at list.
.90a6		20 6b 80	jsr $806b			jsr 	SNDCommand
.90a9		b1 30		lda ($30),y			lda 	(codePtr),y
.90ab		29 c0		and #$c0			and 	#$C0 				 		; if so, we are list procedure() which is a seperate block
.90ad		c9 40		cmp #$40			cmp 	#$40  						; of code.
.90af		f0 72		beq $9123			beq 	_CLListProcedure
.90b1		64 5c		stz $5c				stz		NSMantissa0+4				; set the lower (slot 4) to 0 and upper (slot 7) to $FFFF
.90b3		64 64		stz $64				stz 	NSMantissa1+4 				; these are the default top and bottom.
.90b5		a9 ff		lda #$ff			lda 	#$FF
.90b7		85 5f		sta $5f				sta 	NSMantissa0+7
.90b9		85 67		sta $67				sta 	NSMantissa1+7
.90bb		b1 30		lda ($30),y			lda 	(codePtr),y
.90bd		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.90bf		f0 1a		beq $90db			beq 	_CLSecond
.90c1		20 a0 91	jsr $91a0			jsr 	CLIsDigit 					; if not digit, list all
.90c4		b0 20		bcs $90e6			bcs 	_CLStart
.90c6		a2 04		ldx #$04			ldx 	#4 							; get 1st range into slot 4
.90c8		20 15 a9	jsr $a915			jsr 	Evaluate16BitInteger
.90cb		b1 30		lda ($30),y			lda 	(codePtr),y
.90cd		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.90cf		f0 0a		beq $90db			beq 	_CLSecond 					; if so go get it
.90d1		a5 5c		lda $5c				lda 	NSMantissa0+4 				; copy 4->7
.90d3		85 5f		sta $5f				sta 	NSMantissa0+7
.90d5		a5 64		lda $64				lda 	NSMantissa1+4
.90d7		85 67		sta $67				sta 	NSMantissa1+7
.90d9		80 0b		bra $90e6			bra 	_CLStart
.90db						_CLSecond:
.90db		c8		iny				iny 								; consume comma
.90dc		20 a0 91	jsr $91a0			jsr 	CLIsDigit 					; digit found
.90df		b0 05		bcs $90e6			bcs 	_CLStart 					; if not, continue listing
.90e1		a2 07		ldx #$07			ldx 	#7 							; load 2nd range into slot 7
.90e3		20 15 a9	jsr $a915			jsr 	Evaluate16BitInteger
.90e6						_CLStart
.90e6		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.90e8		85 30		sta $30				sta 	codePtr
.90ea		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.90ec		85 31		sta $31				sta 	codePtr+1
.90ee						_CLLoop:
.90ee		a5 f2		lda $f2				lda 	kernel.args.events.pending 	; load pending event count into accumulator
.90f0		f0 03		beq $90f5			beq 	_NoEvents					; if zero, skip with Z flag set.
.90f2		20 2d 81	jsr $812d			jsr 	ProcessEvents
.90f5						_NoEvents:
.90f5		d0 27		bne $911e			bne 	_CLBreak
.90f7		b2 30		lda ($30)			lda 	(codePtr)
.90f9		f0 20		beq $911b			beq 	_CLExit
.90fb		a2 04		ldx #$04			ldx 	#4 							; check range every time, line numbers aren't in order.
.90fd		20 8f 91	jsr $918f			jsr 	CLCompareLineNo
.9100		90 0c		bcc $910e			bcc 	_CLNext
.9102		a2 07		ldx #$07			ldx 	#7
.9104		20 8f 91	jsr $918f			jsr 	CLCompareLineNo
.9107		f0 02		beq $910b			beq 	_CLDoThisOne
.9109		b0 03		bcs $910e			bcs 	_CLNext
.910b						_CLDoThisOne:
.910b		20 7c 91	jsr $917c			jsr 	CLListOneLine 				; routine to list the current line.
.910e						_CLNext:
.910e		18		clc				clc
.910f		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.9111		65 30		adc $30				adc 	codePtr
.9113		85 30		sta $30				sta 	codePtr
.9115		90 02		bcc $9119			bcc 	_CREExit
.9117		e6 31		inc $31				inc 	codePtr+1 					; carry
.9119						_CREExit:
.9119		80 d3		bra $90ee			bra 	_CLLoop
.911b						_CLExit:
.911b		4c df 87	jmp $87df			jmp 	WarmStart
.911e						_CLBreak:
.911e		a9 01		lda #$01		lda	#1
.9120		4c 35 9a	jmp $9a35		jmp	ErrorHandler
.9123						_CLListProcedure:
.9123		b1 30		lda ($30),y			lda 	(codePtr),y
.9125		85 38		sta $38				sta 	zTemp1
.9127		c8		iny				iny
.9128		b1 30		lda ($30),y			lda 	(codePtr),y
.912a		85 39		sta $39				sta 	zTemp1+1
.912c		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.912e		85 30		sta $30				sta 	codePtr
.9130		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.9132		85 31		sta $31				sta 	codePtr+1
.9134						_CLLPSearch:
.9134		b2 30		lda ($30)			lda 	(codePtr)
.9136		c9 00		cmp #$00			cmp 	#0 							; if zero, end
.9138		f0 e1		beq $911b			beq 	_CLExit
.913a		a0 03		ldy #$03			ldy 	#3 							; check if PROC something
.913c		b1 30		lda ($30),y			lda 	(codePtr),y
.913e		c9 af		cmp #$af			cmp 	#KWD_PROC
.9140		d0 0e		bne $9150			bne 	_CLLPNext
.9142		c8		iny				iny 								; check if PROC this.
.9143		b1 30		lda ($30),y			lda 	(codePtr),y
.9145		c5 38		cmp $38				cmp 	zTemp1 						; does it match ?
.9147		d0 07		bne $9150			bne 	_CLLPNext
.9149		c8		iny				iny
.914a		b1 30		lda ($30),y			lda 	(codePtr),y
.914c		c5 39		cmp $39				cmp 	zTemp1+1
.914e		f0 0d		beq $915d			beq 	_CLLPFound
.9150						_CLLPNext:
.9150		18		clc				clc
.9151		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.9153		65 30		adc $30				adc 	codePtr
.9155		85 30		sta $30				sta 	codePtr
.9157		90 02		bcc $915b			bcc 	_CREExit
.9159		e6 31		inc $31				inc 	codePtr+1 					; carry
.915b						_CREExit:
.915b		80 d7		bra $9134			bra 	_CLLPSearch
.915d						_CLLPFound:
.915d		b2 30		lda ($30)			lda 	(codePtr)
.915f		f0 ba		beq $911b			beq 	_CLExit
.9161		a0 03		ldy #$03			ldy 	#3 							; get first keyword
.9163		b1 30		lda ($30),y			lda 	(codePtr),y
.9165		48		pha				pha
.9166		20 7c 91	jsr $917c			jsr 	CLListOneLine 				; list line and go forward
.9169		18		clc				clc
.916a		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.916c		65 30		adc $30				adc 	codePtr
.916e		85 30		sta $30				sta 	codePtr
.9170		90 02		bcc $9174			bcc 	_CREExit
.9172		e6 31		inc $31				inc 	codePtr+1 					; carry
.9174						_CREExit:
.9174		68		pla				pla 								; reached ENDPROC ?
.9175		c9 b3		cmp #$b3			cmp 	#KWD_ENDPROC
.9177		d0 e4		bne $915d			bne 	_CLLPFound
.9179		4c df 87	jmp $87df			jmp 	WarmStart
.917c						CLListOneLine:
.917c		20 da 99	jsr $99da			jsr 	ScanGetCurrentLineStep 		; get indent adjust.
.917f		20 7f 80	jsr $807f			jsr 	TKListConvertLine 			; convert line into token Buffer
.9182		a2 04		ldx #$04			ldx 	#(tokenBuffer >> 8) 		; print that line
.9184		a9 29		lda #$29			lda 	#(tokenBuffer & $FF)
.9186		20 94 9a	jsr $9a94			jsr 	PrintStringXA
.9189		a9 0d		lda #$0d			lda 	#13 						; new line
.918b		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.918e		60		rts				rts
.918f						CLCompareLineNo:
.918f		38		sec				sec
.9190		a0 01		ldy #$01			ldy 	#1
.9192		b1 30		lda ($30),y			lda 	(codePtr),y
.9194		f5 58		sbc $58,x			sbc 	NSMantissa0,x
.9196		85 36		sta $36				sta 	zTemp0
.9198		c8		iny				iny
.9199		b1 30		lda ($30),y			lda 	(codePtr),y
.919b		f5 60		sbc $60,x			sbc 	NSMantissa1,x
.919d		05 36		ora $36				ora 	zTemp0
.919f		60		rts				rts
.91a0						CLIsDigit:
.91a0		b1 30		lda ($30),y			lda 	(codePtr),y
.91a2		c9 30		cmp #$30			cmp 	#"0"
.91a4		90 03		bcc $91a9			bcc	 	_CLIDExitFalse
.91a6		c9 3a		cmp #$3a			cmp 	#"9"+1
.91a8		60		rts				rts
.91a9						_CLIDExitFalse:
.91a9		38		sec				sec
.91aa		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/local.asm

.91ab						Command_LOCAL:
.91ab		a2 00		ldx #$00			ldx 	#0 							; at level 0
.91ad		20 b9 91	jsr $91b9			jsr 	LocaliseNextTerm 			; convert term to a local.
.91b0		b1 30		lda ($30),y			lda 	(codePtr),y
.91b2		c8		iny				iny
.91b3		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.91b5		f0 f4		beq $91ab			beq 	Command_LOCAL 				; if so, localise another variable.
.91b7		88		dey				dey 								; unpick pre-get
.91b8		60		rts				rts
.91b9						LocaliseNextTerm:
.91b9		20 89 a3	jsr $a389			jsr 	EvaluateTerm 				; evaluate the term
.91bc		b5 50		lda $50,x			lda 	NSStatus,x
.91be		29 20		and #$20			and 	#NSBIsReference 			; check it is a reference, must be a variable.
.91c0		f0 5c		beq $921e			beq		_LNTError
.91c2		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy address of variable to zTemp0
.91c4		85 36		sta $36				sta 	zTemp0
.91c6		b5 60		lda $60,x			lda 	NSMantissa1,x
.91c8		85 37		sta $37				sta  	zTemp0+1
.91ca		b5 50		lda $50,x			lda 	NSStatus,x 					; figure out what it is.
.91cc		29 10		and #$10			and 	#NSBIsString
.91ce		d0 1e		bne $91ee			bne 	_LNTPushString
.91d0		5a		phy				phy
.91d1		a0 00		ldy #$00			ldy 	#0 							; push 0 to 4 inclusive, the number values, on the stack, and zero them as you go.
.91d3						_LNTPushNumLoop:
.91d3		b1 36		lda ($36),y			lda		(zTemp0),y
.91d5		20 8a b2	jsr $b28a			jsr 	StackPushByte
.91d8		c8		iny				iny
.91d9		c0 05		cpy #$05			cpy 	#5
.91db		d0 f6		bne $91d3			bne 	_LNTPushNumLoop
.91dd		a5 36		lda $36				lda 	zTemp0 						; push the actual target address to write on the stack
.91df		20 8a b2	jsr $b28a			jsr 	StackPushByte
.91e2		a5 37		lda $37				lda 	zTemp0+1
.91e4		20 8a b2	jsr $b28a			jsr 	StackPushByte
.91e7		a9 01		lda #$01			lda 	#STK_LOCALN 				; push local-number marker.
.91e9		20 8a b2	jsr $b28a			jsr 	StackPushByte
.91ec		7a		ply				ply
.91ed		60		rts				rts
.91ee						_LNTPushString:
.91ee		5a		phy				phy
.91ef		b2 36		lda ($36)			lda 	(zTemp0) 					; put address of string in zTemp1
.91f1		85 38		sta $38				sta 	zTemp1
.91f3		a0 01		ldy #$01			ldy 	#1
.91f5		b1 36		lda ($36),y			lda 	(zTemp0),y
.91f7		85 39		sta $39				sta 	zTemp1+1
.91f9		a0 00		ldy #$00			ldy 	#0 							; output string
.91fb		c9 00		cmp #$00			cmp 	#0 							; if not assigned string
.91fd		f0 0a		beq $9209			beq 	_LNTStringOut
.91ff						_LNTPushStrLoop:
.91ff		b1 38		lda ($38),y			lda 	(zTemp1),y
.9201		f0 06		beq $9209			beq 	_LNTStringOut
.9203		20 8a b2	jsr $b28a			jsr 	StackPushByte
.9206		c8		iny				iny
.9207		80 f6		bra $91ff			bra 	_LNTPushStrLoop
.9209						_LNTStringOut:
.9209		98		tya				tya									; output length (chars written).
.920a		20 8a b2	jsr $b28a			jsr 	StackPushByte
.920d		b5 58		lda $58,x			lda 	NSMantissa0,x 				; output address of the string record *not* the string itself
.920f		20 8a b2	jsr $b28a			jsr 	StackPushByte
.9212		b5 60		lda $60,x			lda 	NSMantissa1,x
.9214		20 8a b2	jsr $b28a			jsr 	StackPushByte
.9217		a9 02		lda #$02			lda 	#STK_LOCALS 				; push local-string marker.
.9219		20 8a b2	jsr $b28a			jsr 	StackPushByte
.921c		7a		ply				ply
.921d		60		rts				rts
.921e						_LNTError:
.921e		4c 31 ac	jmp $ac31			jmp 	SyntaxError
.9221						LocalPopValue:
.9221		20 a2 b2	jsr $b2a2			jsr 	StackPopByte
.9224		c9 01		cmp #$01			cmp 	#STK_LOCALN 				; if not local-N
.9226		d0 17		bne $923f			bne 	_LPVString
.9228		20 a2 b2	jsr $b2a2			jsr 	StackPopByte 				; address
.922b		85 37		sta $37				sta 	zTemp0+1
.922d		20 a2 b2	jsr $b2a2			jsr 	StackPopByte
.9230		85 36		sta $36				sta 	zTemp0
.9232		5a		phy				phy
.9233		a0 04		ldy #$04			ldy 	#4 							; copy back
.9235						_LPVNumberCopy:
.9235		20 a2 b2	jsr $b2a2			jsr 	StackPopByte
.9238		91 36		sta ($36),y			sta 	(zTemp0),y
.923a		88		dey				dey
.923b		10 f8		bpl $9235			bpl 	_LPVNumberCopy
.923d		7a		ply				ply 								; and complete
.923e		60		rts				rts
.923f						_LPVString:
.923f		20 a2 b2	jsr $b2a2			jsr 	StackPopByte 				; address of record copied to zTemp0
.9242		85 37		sta $37				sta 	zTemp0+1
.9244		20 a2 b2	jsr $b2a2			jsr 	StackPopByte
.9247		85 36		sta $36				sta 	zTemp0
.9249		5a		phy				phy
.924a		b2 36		lda ($36)			lda 	(zTemp0) 					; address to write string to copied to zTemp1
.924c		85 38		sta $38				sta 	zTemp1
.924e		a0 01		ldy #$01			ldy 	#1
.9250		b1 36		lda ($36),y			lda 	(zTemp0),y
.9252		85 39		sta $39				sta 	zTemp1+1
.9254		20 a2 b2	jsr $b2a2			jsr 	StackPopByte 				; # chars to get => y
.9257		a8		tay				tay
.9258		a5 39		lda $39				lda 	zTemp1+1 					; if no target (e.g. was "" originally) exit
.925a		f0 0e		beq $926a			beq 	_LPVStringCopied
.925c		a9 00		lda #$00			lda 	#0 							; NULL on end
.925e		91 38		sta ($38),y			sta 	(zTemp1),y
.9260						_LPVStringCopy:
.9260		88		dey				dey
.9261		30 07		bmi $926a			bmi 	_LPVStringCopied
.9263		20 a2 b2	jsr $b2a2			jsr 	StackPopByte
.9266		91 38		sta ($38),y			sta 	(zTemp1),y
.9268		80 f6		bra $9260			bra 	_LPVStringCopy
.926a						_LPVStringCopied:
.926a		fa		plx				plx
.926b		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/commands/memcopy.asm

.926c						MCCommand:
.926c		a5 01		lda $01				lda 	1 							; save current I/O ; switch to I/O 0
.926e		48		pha				pha
.926f		64 01		stz $01				stz 	1
.9271		9c 00 df	stz $df00			stz 	$DF00 						; zero control byte.
.9274		a9 81		lda #$81			lda 	#$81 						; standard start byte (DMA Enabled, Start set)
.9276		8d af 07	sta $07af			sta 	DMAControlByte
.9279		20 27 93	jsr $9327			jsr 	MCPosition 					; start position
.927c		a2 04		ldx #$04			ldx 	#4 							; write to source AND $DF04 destination address $DF08
.927e		20 f8 92	jsr $92f8			jsr 	MCCopyAddress
.9281		a2 08		ldx #$08			ldx 	#8
.9283		20 f8 92	jsr $92f8			jsr 	MCCopyAddress
.9286		b1 30		lda ($30),y			lda 	(codePtr),y
.9288		c8		iny				iny
.9289		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; , <size>
.928b		f0 09		beq $9296			beq 	_MCSize1D
.928d		c9 d5		cmp #$d5			cmp 	#KWD_RECT 					; RECT <x>,<y>
.928f		f0 11		beq $92a2			beq 	_MCRect2D
.9291						_MCSyntax:
.9291		a9 02		lda #$02		lda	#2
.9293		4c 35 9a	jmp $9a35		jmp	ErrorHandler
.9296						_MCSize1D:
.9296		a2 00		ldx #$00			ldx 	#0 							; get size
.9298		20 02 a9	jsr $a902			jsr 	EvaluateInteger
.929b		a2 0c		ldx #$0c			ldx 	#$C 						; copy to size $DF0C-E
.929d		20 f8 92	jsr $92f8			jsr 	MCCopyAddress
.92a0		80 24		bra $92c6			bra 	_MCDestination
.92a2						_MCRect2D:
.92a2		a2 0c		ldx #$0c			ldx 	#$C 						; width to $DF0C,D
.92a4		20 15 93	jsr $9315			jsr 	MCEvalCopyData16
.92a7		20 24 9a	jsr $9a24			jsr 	CheckComma
.92aa		a2 0e		ldx #$0e			ldx 	#$E 						; height to $DF0E,F
.92ac		20 15 93	jsr $9315			jsr 	MCEvalCopyData16
.92af		a9 b9		lda #$b9			lda 	#KWD_BY 					; BY keyword.
.92b1		20 2c 9a	jsr $9a2c			jsr 	CheckNextA
.92b4		a2 10		ldx #$10			ldx 	#$10 						; store source and destination stride
.92b6		20 15 93	jsr $9315			jsr 	MCEvalCopyData16
.92b9		a2 12		ldx #$12			ldx 	#$12
.92bb		20 1c 93	jsr $931c			jsr 	MCCopyData16
.92be		ad af 07	lda $07af			lda 	DMAControlByte 				; set bit 4 of DMA control indicating 2D.
.92c1		09 02		ora #$02			ora 	#$02
.92c3		8d af 07	sta $07af			sta 	DMAControlByte
.92c6						_MCDestination:
.92c6		b1 30		lda ($30),y			lda 	(codePtr),y
.92c8		c8		iny				iny
.92c9		c9 d0		cmp #$d0			cmp 	#KWD_POKE 					; is it POKE n
.92cb		f0 0e		beq $92db			beq 	_MCDestPoke
.92cd		c9 db		cmp #$db			cmp 	#KWD_TO 					; is it TO n
.92cf		d0 c0		bne $9291			bne 	_MCSyntax
.92d1		20 27 93	jsr $9327			jsr 	MCPosition 					; get target address
.92d4		a2 08		ldx #$08			ldx 	#8							; copy to target address at $DF08-A
.92d6		20 f8 92	jsr $92f8			jsr 	MCCopyAddress
.92d9		80 0e		bra $92e9			bra 	_MCDoDMA 					; and we can go.
.92db						_MCDestPoke:
.92db		20 30 a9	jsr $a930			jsr 	Evaluate8BitInteger 		; POKE what
.92de		8d 01 df	sta $df01			sta 	$DF01 						; set the FILL register
.92e1		ad af 07	lda $07af			lda 	DMAControlByte 				; set bit 2 of control byte indicating FILL.
.92e4		09 04		ora #$04			ora 	#$04
.92e6		8d af 07	sta $07af			sta 	DMAControlByte
.92e9						_MCDoDMA:
.92e9		ad af 07	lda $07af			lda 	DMAControlByte 				; set the DMA Control byte to go !
.92ec		8d 00 df	sta $df00			sta 	$DF00
.92ef						_MCWaitBUSD:
.92ef		ad 01 df	lda $df01			lda 	$DF01
.92f2		30 fb		bmi $92ef			bmi 	_MCWaitBUSD
.92f4		68		pla				pla 								; restore I/O.
.92f5		85 01		sta $01				sta 	1
.92f7		60		rts				rts
.92f8						MCCopyAddress:
.92f8		a5 68		lda $68				lda 	NSMantissa2 				; check valid vlaue
.92fa		29 fc		and #$fc			and 	#$FC
.92fc		05 70		ora $70				ora 	NSMantissa3
.92fe		d0 10		bne $9310			bne 	_MCRange
.9300		a5 58		lda $58				lda 	NSMantissa0
.9302		9d 00 df	sta $df00,x			sta 	$DF00,x
.9305		a5 60		lda $60				lda 	NSMantissa1
.9307		9d 01 df	sta $df01,x			sta 	$DF01,x
.930a		a5 68		lda $68				lda 	NSMantissa2
.930c		9d 02 df	sta $df02,x			sta 	$DF02,x
.930f		60		rts				rts
.9310						_MCRange:
.9310		a9 04		lda #$04		lda	#4
.9312		4c 35 9a	jmp $9a35		jmp	ErrorHandler
.9315						MCEvalCopyData16:
.9315		da		phx				phx
.9316		a2 00		ldx #$00			ldx 	#0
.9318		20 15 a9	jsr $a915			jsr 	Evaluate16BitInteger
.931b		fa		plx				plx
.931c						MCCopyData16:
.931c		a5 58		lda $58				lda 	NSMantissa0
.931e		9d 00 df	sta $df00,x			sta 	$DF00,x
.9321		a5 60		lda $60				lda 	NSMantissa1
.9323		9d 01 df	sta $df01,x			sta 	$DF01,x
.9326		60		rts				rts
.9327						MCPosition:
.9327		a2 00		ldx #$00			ldx 	#0 							; get start address.
.9329		b1 30		lda ($30),y			lda 	(codePtr),y
.932b		c9 b8		cmp #$b8			cmp 	#KWD_AT
.932d		f0 04		beq $9333			beq 	_MCPAt
.932f		20 02 a9	jsr $a902			jsr 	EvaluateInteger
.9332		60		rts				rts
.9333						_MCPAt:
.9333		c8		iny				iny
.9334		20 30 a9	jsr $a930			jsr 	Evaluate8BitInteger 		; X position
.9337		48		pha				pha
.9338		20 24 9a	jsr $9a24			jsr 	CheckComma
.933b		e8		inx				inx
.933c		20 30 a9	jsr $a930			jsr 	Evaluate8BitInteger 		; Y position
.933f		ca		dex				dex
.9340		85 60		sta $60				sta 	NSMantissa1 				; put Y x 64 in Mantissa.0
.9342		64 58		stz $58				stz 	NSMantissa0
.9344		64 68		stz $68				stz 	NSMantissa2
.9346		64 70		stz $70				stz 	NSMantissa3
.9348		46 60		lsr $60				lsr 	NSMantissa1
.934a		66 58		ror $58				ror 	NSMantissa0
.934c		46 60		lsr $60				lsr 	NSMantissa1
.934e		66 58		ror $58				ror 	NSMantissa0
.9350		68		pla				pla
.9351		18		clc				clc
.9352		65 58		adc $58				adc 	NSMantissa0 				; add X, Y * 256 and the
.9354		85 58		sta $58				sta 	NSMantissa0
.9356		a5 60		lda $60				lda 	NSMantissa1
.9358		65 59		adc $59				adc 	NSMantissa0+1
.935a		85 60		sta $60				sta 	NSMantissa1
.935c		90 02		bcc $9360			bcc 	_MCPNoCarry
.935e		e6 68		inc $68				inc 	NSMantissa2
.9360						_MCPNoCarry:
.9360		ad d8 07	lda $07d8			lda 	gxBasePage
.9363		85 69		sta $69				sta 	NSMantissa2+1
.9365		64 59		stz $59				stz 	NSMantissa0+1
.9367		64 61		stz $61				stz 	NSMantissa1+1
.9369		64 71		stz $71				stz 	NSMantissa3+1
.936b		a2 01		ldx #$01			ldx 	#1
.936d		20 ae a9	jsr $a9ae			jsr 	NSMShiftRight
.9370		20 ae a9	jsr $a9ae			jsr 	NSMShiftRight
.9373		20 ae a9	jsr $a9ae			jsr 	NSMShiftRight
.9376		a2 00		ldx #$00			ldx 	#0
.9378		20 35 9d	jsr $9d35			jsr 	AddTopTwoStack
.937b		60		rts				rts
.07af						DMAControlByte:
>07af								.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/commands/mouse.asm

.937c						MouseStatus:
.937c		a9 ff		lda #$ff	        lda     #255
.937e		80 02		bra $9382	        bra     MouseCommand
.9380						MouseDeltaStatus:
.9380		a9 00		lda #$00	        lda     #0
.9382						MouseCommand:
.9382		8d 5f 06	sta $065f	        sta     CMDMouseFlag
.9385		a2 00		ldx #$00	        ldx     #0
.9387						_MouseCommandLoop:
.9387		da		phx		        phx                                 ; save slot.
.9388		20 3d 9f	jsr $9f3d	        jsr     EvaluateExpressionAt0       ; evaluate a reference.
.938b		a5 50		lda $50		        lda     NSStatus                    ; check it's a reference.
.938d		c9 20		cmp #$20	        cmp     #NSBIsReference
.938f		d0 60		bne $93f1	        bne     _MouseNotRef
.9391		b1 30		lda ($30),y			lda 	(codePtr),y
.9393		c9 2c		cmp #$2c	        cmp     #KWD_COMMA
.9395		d0 01		bne $9398	        bne     _MouseNoSkipComma
.9397		c8		iny		        iny
.9398						_MouseNoSkipComma:
.9398		fa		plx		        plx                                 ; restore X
.9399		5a		phy		        phy                                 ; save Y
.939a		a5 58		lda $58		        lda     NSMantissa0                 ; copy address to zTemp0
.939c		85 36		sta $36		        sta     zTemp0
.939e		a5 60		lda $60		        lda     NSMantissa1
.93a0		85 37		sta $37		        sta     zTemp0+1
.93a2		a0 04		ldy #$04	        ldy     #4                          ; set exponent, m3, m2 , m1 , m0
.93a4		a9 00		lda #$00	        lda     #0
.93a6		91 36		sta ($36),y	        sta     (zTemp0),y                  ; exponent
.93a8		88		dey		        dey
.93a9		91 36		sta ($36),y	        sta     (zTemp0),y                  ; m3
.93ab		88		dey		        dey
.93ac		91 36		sta ($36),y	        sta     (zTemp0),y                  ; m2
.93ae		88		dey		        dey
.93af		2c 5f 06	bit $065f	        bit     CMDMouseFlag                ; mouse or mdelta command
.93b2		30 12		bmi $93c6	        bmi     _MouseMouseCommand
.93b4						_MouseMDeltaCommand:
.93b4		bd 82 06	lda $0682,x	        lda     MouseDeltaX,x
.93b7		92 36		sta ($36)	        sta     (zTemp0)                    ; m0
.93b9		bd 83 06	lda $0683,x	        lda     MouseDeltaX+1,x
.93bc		91 36		sta ($36),y	        sta     (zTemp0),y                  ; m1
.93be		9e 82 06	stz $0682,x	        stz     MouseDeltaX,x               ; clear entry in current table
.93c1		9e 83 06	stz $0683,x	        stz     MouseDeltaX+1,x
.93c4		80 0a		bra $93d0	        bra     _MouseProcessData
.93c6						_MouseMouseCommand:
.93c6		bd 8e 06	lda $068e,x	        lda     MousePosX,x
.93c9		92 36		sta ($36)	        sta     (zTemp0)                    ; m0
.93cb		bd 8f 06	lda $068f,x	        lda     MousePosX+1,x
.93ce		91 36		sta ($36),y	        sta     (zTemp0),y                  ; m1
.93d0						_MouseProcessData:
.93d0		b1 36		lda ($36),y	        lda     (zTemp0),y
.93d2		10 15		bpl $93e9	        bpl     _MouseDataPos               ; signed 16 bit value, so fix up if -ve.
.93d4		38		sec		        sec                                 ; negate the mantissa 2 bytes
.93d5		a9 00		lda #$00	        lda     #0
.93d7		f2 36		sbc ($36)	        sbc     (zTemp0)
.93d9		92 36		sta ($36)	        sta     (zTemp0)
.93db		a9 00		lda #$00	        lda     #0
.93dd		f1 36		sbc ($36),y	        sbc     (zTemp0),y
.93df		91 36		sta ($36),y	        sta     (zTemp0),y
.93e1		a0 03		ldy #$03	        ldy     #3
.93e3		b1 36		lda ($36),y	        lda     (zTemp0),y                  ; set upper bit of mantissa
.93e5		09 80		ora #$80	        ora     #$80
.93e7		91 36		sta ($36),y	        sta     (zTemp0),y
.93e9						_MouseDataPos:
.93e9		7a		ply		        ply                                 ; restore Y.
.93ea		e8		inx		        inx                                 ; next entry
.93eb		e8		inx		        inx
.93ec		e0 0c		cpx #$0c	        cpx     #6*2                        ; done 6 reads to variables.
.93ee		d0 97		bne $9387	        bne     _MouseCommandLoop
.93f0		60		rts		        rts
.93f1						_MouseNotRef:
.93f1		a9 07		lda #$07		lda	#7
.93f3		4c 35 9a	jmp $9a35		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/new.asm

.93f6						NewCommand:
.93f6		20 fc 93	jsr $93fc			jsr 	NewProgram 					; does the actual NEW.
.93f9		4c df 87	jmp $87df			jmp 	WarmStart 					; and warm starts straight away.
.93fc						NewProgram:
.93fc		20 ab ae	jsr $aeab			jsr 	MemoryNew
.93ff		9c 00 10	stz $1000			stz 	VariableSpace 				; erase all variables.
.9402		20 c4 98	jsr $98c4			jsr 	ClearSystem					; clear everything.
.9405		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/poke.asm

.9406						PokeBCommand:
.9406		a9 01		lda #$01			lda 	#1
.9408		80 0c		bra $9416			bra 	PokeCommand
.940a						PokeWCommand:
.940a		a9 02		lda #$02			lda 	#2
.940c		80 08		bra $9416			bra 	PokeCommand
.940e						PokeLCommand:
.940e		a9 03		lda #$03			lda 	#3
.9410		80 04		bra $9416			bra 	PokeCommand
.9412						PokeDCommand:
.9412		a9 04		lda #$04			lda 	#4
.9414		80 00		bra $9416			bra 	PokeCommand
.9416						PokeCommand:
.9416		48		pha				pha 								; save count on stack
.9417		a2 00		ldx #$00			ldx 	#0 							; bottom of stack
.9419		20 15 a9	jsr $a915			jsr		Evaluate16BitInteger 		; address
.941c		20 24 9a	jsr $9a24			jsr 	CheckComma
.941f		e8		inx				inx
.9420		20 02 a9	jsr $a902			jsr		EvaluateInteger 			; data
.9423		a5 58		lda $58				lda 	NSMantissa0 				; copy address
.9425		85 36		sta $36				sta 	zTemp0
.9427		a5 60		lda $60				lda 	NSMantissa1
.9429		85 37		sta $37				sta 	zTemp0+1
.942b		68		pla				pla 								; count -> zTemp1
.942c		85 38		sta $38				sta 	zTemp1
.942e		5a		phy				phy 								; save Y position.
.942f		a0 00		ldy #$00			ldy 	#0 							; index to write
.9431		a2 00		ldx #$00			ldx 	#0 							; index to read
.9433						_PCLoop:
.9433		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; read byte from mantissa and copy out
.9435		91 36		sta ($36),y			sta 	(zTemp0),y
.9437		c8		iny				iny 								; next byte to write
.9438		8a		txa				txa 								; next byte to read - stack layout in 04data.inc
.9439		18		clc				clc
.943a		69 08		adc #$08			adc 	#MathStackSize
.943c		aa		tax				tax
.943d		c6 38		dec $38				dec 	zTemp1 						; done them all
.943f		d0 f2		bne $9433			bne 	_PCLoop
.9441		7a		ply				ply 								; restore position.
.9442		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/procedure.asm

=2						ParameterStackPos = 2
.9443						CallProcedure:
.9443		a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start storing parameters at 2.
.9445		b1 30		lda ($30),y			lda 	(codePtr),y
.9447		c9 29		cmp #$29			cmp 	#KWD_RPAREN
.9449		f0 0c		beq $9457			beq 	_CPEndParam
.944b						_CPParamLoop:
.944b		20 da a8	jsr $a8da			jsr 	EvaluateValue 				; get parameter onto stack
.944e		e8		inx				inx 								; bump next stack
.944f		b1 30		lda ($30),y			lda 	(codePtr),y
.9451		c8		iny				iny
.9452		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if comma, go back and try again.
.9454		f0 f5		beq $944b			beq 	_CPParamLoop
.9456		88		dey				dey 								; unpick.
.9457						_CPEndParam:
.9457		8e 12 04	stx $0412			stx 	lastParameter 				; save the last parameters index.
.945a		c8		iny				iny									; skip right bracket
.945b		a9 b3		lda #$b3			lda 	#STK_PROC+3 				; allocate 6 bytes on the return stack.
.945d		20 ab b2	jsr $b2ab			jsr 	StackOpen
.9460		20 f0 b2	jsr $b2f0			jsr 	STKSaveCodePosition 		; save loop position
.9463		a5 58		lda $58				lda 	NSMantissa0 				; copy variable (e.g. procedure) address to zTemp0
.9465		85 36		sta $36				sta 	zTemp0 						; this is the DATA not the RECORD
.9467		a5 60		lda $60				lda 	NSMantissa1
.9469		85 37		sta $37				sta 	zTemp0+1
.946b		a0 01		ldy #$01			ldy 	#1 							; copy code address back.
.946d		b2 36		lda ($36)			lda 	(zTemp0)
.946f		85 30		sta $30				sta 	safePtr
.9471		b1 36		lda ($36),y			lda 	(zTemp0),y
.9473		85 31		sta $31				sta 	safePtr+1
.9475		c8		iny				iny
.9476		b1 36		lda ($36),y			lda 	(zTemp0),y
.9478		85 32		sta $32				sta 	safePtr+2
.947a		c8		iny				iny
.947b		b1 36		lda ($36),y			lda 	(zTemp0),y
.947d		85 33		sta $33				sta 	safePtr+3
.947f		c8		iny				iny 								; get Y offset -> Y
.9480		b1 36		lda ($36),y			lda 	(zTemp0),y
.9482		a8		tay				tay
.9483		a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start position of parameters
.9485		ec 12 04	cpx $0412			cpx	 	lastParameter 				; check zero parameters at the start
.9488		f0 13		beq $949d			beq 	_ParamExit 					; if so, exit.
.948a						_ParamExtract:
.948a		ca		dex				dex 								; put a local term on the level before
.948b		20 b9 91	jsr $91b9			jsr 	LocaliseNextTerm			; also pushes original param value to basic stack
.948e		20 8a 90	jsr $908a			jsr 	AssignVariable 				; assign stacked value to the variable.
.9491		e8		inx				inx 								; advance to next parameter to do.
.9492		e8		inx				inx
.9493		ec 12 04	cpx $0412			cpx 	lastParameter 				; are we done ?
.9496		f0 05		beq $949d			beq 	_ParamExit
.9498		20 24 9a	jsr $9a24			jsr 	CheckComma 					; comma seperating parameters
.949b		80 ed		bra $948a			bra 	_ParamExtract
.949d						_ParamExit:
.949d		20 1c 9a	jsr $9a1c			jsr 	CheckRightBracket 			; check )
.94a0		60		rts				rts 								; and continue from here
.94a1						Command_ENDPROC:
.94a1		a9 b0		lda #$b0			lda 	#STK_PROC 					; check TOS is this
.94a3		a2 14		ldx #$14			ldx 	#ERRID_PROC
.94a5		20 d8 b2	jsr $b2d8			jsr 	StackCheckFrame
.94a8		20 01 b3	jsr $b301			jsr 	STKLoadCodePosition 		; restore code position
.94ab		20 ca b2	jsr $b2ca			jsr 	StackClose
.94ae		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/read.asm

.94af						Command_Read:
.94af		a2 00		ldx #$00			ldx 	#0 							; evaluate the term which is the var/array element to assign
.94b1		20 89 a3	jsr $a389			jsr 	EvaluateTerm
.94b4		b5 50		lda $50,x			lda 	NSStatus,x
.94b6		29 20		and #$20			and 	#NSBIsReference				; get status byte on stack, identifies int, float, string.
.94b8		f0 4f		beq $9509			beq 	_CRSyntax 					; check reference (bit 0) fail if not a reference.
.94ba		20 52 95	jsr $9552			jsr 	SwapDataCodePtrs 			; swap code and data
.94bd		ad 18 04	lda $0418			lda 	inDataStatement 			; if in a data statement, we don't need to search
.94c0		d0 25		bne $94e7			bne 	_CRContinueData  			; forward for the next one.
.94c2		b2 30		lda ($30)			lda 	(codePtr)
.94c4		f0 1c		beq $94e2			beq 	_CRNoData
.94c6						_CRKeepSearching:
.94c6		a9 bf		lda #$bf			lda 	#KWD_DATA 					; scan for instruction
.94c8		a2 80		ldx #$80			ldx 	#KWC_EOL
.94ca		20 77 99	jsr $9977			jsr 	ScanForward
.94cd		c9 bf		cmp #$bf			cmp 	#KWD_DATA 					; found data ?
.94cf		f0 16		beq $94e7			beq 	_CRHaveData 				; found it
.94d1		18		clc				clc
.94d2		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.94d4		65 30		adc $30				adc 	codePtr
.94d6		85 30		sta $30				sta 	codePtr
.94d8		90 02		bcc $94dc			bcc 	_CREExit
.94da		e6 31		inc $31				inc 	codePtr+1 					; carry
.94dc						_CREExit:
.94dc		a0 03		ldy #$03			ldy 	#3 							; start of line.
.94de		b2 30		lda ($30)			lda 	(codePtr)
.94e0		d0 e4		bne $94c6			bne 	_CRKeepSearching
.94e2						_CRNoData:
.94e2		a9 0b		lda #$0b		lda	#11
.94e4		4c 35 9a	jmp $9a35		jmp	ErrorHandler
.94e7						_CRHaveData:
.94e7						_CRContinueData:
.94e7		a2 01		ldx #$01			ldx 	#1
.94e9		20 da a8	jsr $a8da			jsr 	EvaluateValue 				; evaluate value into slot # 1
.94ec		ca		dex				dex
.94ed		20 8a 90	jsr $908a			jsr		AssignVariable 				; do the assignment
.94f0		9c 18 04	stz $0418			stz 	inDataStatement 			; clear in data flag
.94f3		b1 30		lda ($30),y			lda 	(codePtr),y
.94f5		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not, end of data statement and exit
.94f7		d0 04		bne $94fd			bne 	_CRSwapBack
.94f9		c8		iny				iny 								; consume comma
.94fa		ee 18 04	inc $0418			inc 	inDataStatement 			; set in data statement currently.
.94fd						_CRSwapBack:
.94fd		20 52 95	jsr $9552			jsr 	SwapDataCodePtrs			; swap them back.
.9500		b1 30		lda ($30),y			lda 	(codePtr),y
.9502		c8		iny				iny
.9503		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.9505		f0 a8		beq $94af			beq 	Command_Read 				; if so go round again.
.9507		88		dey				dey 								; unpick get.
.9508		60		rts				rts
.9509						_CRSyntax:
.9509		4c 31 ac	jmp $ac31			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/rem.asm

.950c						RemCommand:
.950c		b1 30		lda ($30),y			lda 	(codePtr),y
.950e		c9 ff		cmp #$ff			cmp 	#KWC_STRING
.9510		d0 06		bne $9518			bne 	_RMExit
.9512		c8		iny				iny 								; point to offset
.9513		98		tya				tya 								; A = offset position
.9514		38		sec				sec 								; add size +1 hence SEC
.9515		71 30		adc ($30),y			adc 	(codePtr),y
.9517		a8		tay				tay 								; make current position.
.9518						_RMExit:
.9518		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/repeat.asm

.9519						Command_REPEAT:
.9519		a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; allocate 6 bytes on the return stack.
.951b		20 ab b2	jsr $b2ab			jsr 	StackOpen
.951e		20 f0 b2	jsr $b2f0			jsr 	STKSaveCodePosition 		; save loop position
.9521		60		rts				rts
.9522						Command_UNTIL:
.9522		a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; check REPEAT is TOS
.9524		a2 0f		ldx #$0f			ldx 	#ERRID_REPEAT 				; this error
.9526		20 d8 b2	jsr $b2d8			jsr 	StackCheckFrame
.9529		a2 00		ldx #$00			ldx 	#0
.952b		20 e3 a8	jsr $a8e3			jsr 	EvaluateNumber 				; work out the number
.952e		20 b7 a9	jsr $a9b7			jsr 	NSMIsZero 					; check if zero
.9531		f0 04		beq $9537			beq 	_CULoopBack 				; if so keep looping
.9533		20 ca b2	jsr $b2ca			jsr 	StackClose		 			; return
.9536		60		rts				rts
.9537						_CULoopBack:
.9537		20 01 b3	jsr $b301			jsr 	STKLoadCodePosition 		; loop back
.953a		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/restore.asm

.953b						Command_Restore:
.953b		20 52 95	jsr $9552			jsr 	SwapDataCodePtrs 			; swap code and data
.953e		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.9540		85 30		sta $30				sta 	codePtr
.9542		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.9544		85 31		sta $31				sta 	codePtr+1
.9546		20 52 95	jsr $9552			jsr 	SwapDataCodePtrs 			; put them back
.9549		a9 03		lda #$03			lda 	#3 							; start at offset 3, e.g. first instruction of first line.
.954b		8d 17 04	sta $0417			sta 	dataPointer+4   			; (read checks not EOF)
.954e		9c 18 04	stz $0418			stz 	inDataStatement 			; not in data statement
.9551		60		rts				rts
.9552						SwapDataCodePtrs:
.9552		da		phx				phx
.9553		a2 03		ldx #$03			ldx 	#3 							; swap 32 bit code pointer over
.9555						_SDCPLoop:
.9555		b5 30		lda $30,x			lda 	safePtr,x
.9557		48		pha				pha
.9558		bd 13 04	lda $0413,x			lda 	dataPointer,x
.955b		95 30		sta $30,x			sta 	safePtr,x
.955d		68		pla				pla
.955e		9d 13 04	sta $0413,x			sta 	dataPointer,x
.9561		ca		dex				dex
.9562		10 f1		bpl $9555			bpl 	_SDCPLoop
.9564		ad 17 04	lda $0417			lda 	dataPointer+4 				; swap Y position over.
.9567		8c 17 04	sty $0417			sty 	dataPointer+4
.956a		a8		tay				tay
.956b		fa		plx				plx
.956c		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/run.asm

.956d						EOLCommand:
.956d		18		clc				clc
.956e		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.9570		65 30		adc $30				adc 	codePtr
.9572		85 30		sta $30				sta 	codePtr
.9574		90 02		bcc $9578			bcc 	_CREExit
.9576		e6 31		inc $31				inc 	codePtr+1 					; carry
.9578						_CREExit:
.9578		80 18		bra $9592			bra 	RunNewLine
.957a						CommandRUNOptLoad:
.957a		b1 30		lda ($30),y			lda 	(codePtr),y
.957c		c9 80		cmp #$80			cmp 	#KWC_EOL 					; EOL / : just RUN
.957e		f0 07		beq $9587			beq 	RunCurrentProgram
.9580		c9 3a		cmp #$3a			cmp 	#KWD_COLON
.9582		f0 03		beq $9587			beq 	RunCurrentProgram
.9584		20 ca 8b	jsr $8bca			jsr 	LoadFile 					; load expected name file.
.9587						RunCurrentProgram:
.9587		20 c4 98	jsr $98c4			jsr 	ClearSystem 				; clear variable/stacks/etc.
.958a		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.958c		85 30		sta $30				sta 	codePtr
.958e		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.9590		85 31		sta $31				sta 	codePtr+1
.9592						RunNewLine:
.9592		b2 30		lda ($30)			lda 	(codePtr)
.9594		f0 74		beq $960a			beq 	CRNoProgram         		; no then END.
.9596		a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack
.9598		9a		txs				txs
.9599						RUNCodePointerLine:
.9599		a0 02		ldy #$02			ldy 	#2 							; start of program
.959b						_CRIncMainLoop:
.959b		a5 f2		lda $f2				lda 	kernel.args.events.pending 	; load pending event count into accumulator
.959d		f0 03		beq $95a2			beq 	_NoEvents					; if zero, skip with Z flag set.
.959f		20 2d 81	jsr $812d			jsr 	ProcessEvents
.95a2						_NoEvents:
.95a2		d0 61		bne $9605			bne 	_CRBreak
.95a4		a5 01		lda $01				lda 	1 							; save I/O 0
.95a6		48		pha				pha
.95a7		64 01		stz $01				stz 	1 							; access I/O Page 0
.95a9		38		sec				sec 								; calculate timer - LastTick
.95aa		ad 59 d6	lda $d659			lda 	$D659
.95ad		cd 5e 06	cmp $065e			cmp 	LastTick
.95b0		f0 06		beq $95b8			beq 	_NoFireTick 				; if < 3 clocks don't fire.
.95b2		8d 5e 06	sta $065e			sta 	LastTick 					; update last timer
.95b5		20 4d 82	jsr $824d			jsr 	TickHandler 							; go do the code.
.95b8						_NoFireTick:
.95b8		68		pla				pla 								; restore I/O 0
.95b9		85 01		sta $01				sta 	1
.95bb						_CRNoBreakCheck:
.95bb		c8		iny				iny									; next token
.95bc						_CRMainLoop:
.95bc		9c 0c 04	stz $040c			stz 	stringInitialised 			; clear the temporary string initialised flag.
.95bf		b1 30		lda ($30),y			lda 	(codePtr),y
.95c1		10 10		bpl $95d3			bpl 	_CRNotKeyword				; not a token.
.95c3		c9 ad		cmp #$ad			cmp 	#KWC_LAST_UNARY+1 			; if after unary, legitimate command
.95c5		b0 04		bcs $95cb			bcs 	_CRIsKeyword
.95c7		c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if unary, syntax error.
.95c9		b0 34		bcs $95ff			bcs		_CRSyntaxError
.95cb						_CRIsKeyword:
.95cb		c8		iny				iny 								; consume command
.95cc		0a		asl a				asl 	a 							; double losing the MSB which is '1' as tokens are $80-$FF
.95cd		aa		tax				tax 								; put in X for vector jump
.95ce		20 02 96	jsr $9602			jsr 	_CRCallVector0 				; call the vector - effectively jsr (vectortable,X)
.95d1		80 e9		bra $95bc			bra 	_CRMainLoop 				; and loop round
.95d3						_CRNotKeyword:
.95d3		c9 3a		cmp #$3a			cmp 	#KWD_COLON 					; if a :, consume it and go round.
.95d5		f0 c4		beq $959b			beq 	_CRIncMainLoop
.95d7		c9 40		cmp #$40			cmp 	#$40 						; variable/call reference
.95d9		90 05		bcc $95e0			bcc 	_CRNotVariable
.95db						_CRGoLet:
.95db		20 51 90	jsr $9051			jsr 	LetCommand
.95de		80 dc		bra $95bc			bra 	_CRMainLoop
.95e0						_CRNotVariable:
.95e0		c9 b8		cmp #$b8			cmp 	#KWD_AT 					; handle @
.95e2		f0 f7		beq $95db			beq 	_CRGoLet
.95e4		c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; handle ? !
.95e6		f0 f3		beq $95db			beq 	_CRGoLet
.95e8		c9 21		cmp #$21			cmp 	#KWD_PLING
.95ea		f0 ef		beq $95db			beq 	_CRGoLet
.95ec		c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; handle ' (comment)
.95ee		f0 09		beq $95f9			beq 	_CRGoRem
.95f0		c9 2e		cmp #$2e			cmp 	#KWD_PERIOD 				; handle . (assembler label)
.95f2		d0 0b		bne $95ff			bne 	_CRSyntaxError
.95f4		20 28 86	jsr $8628			jsr 	LabelHere
.95f7		80 c3		bra $95bc			bra 	_CRMainLoop
.95f9						_CRGoRem:
.95f9		c8		iny				iny
.95fa		20 0c 95	jsr $950c			jsr 	RemCommand
.95fd		80 bd		bra $95bc			bra 	_CRMainLoop
.95ff						_CRSyntaxError:
.95ff		4c 31 ac	jmp $ac31			jmp 	SyntaxError
.9602						_CRCallVector0:
.9602		7c a0 96	jmp ($96a0,x)			jmp 	(VectorSet0,x)
.9605						_CRBreak:
.9605		a9 01		lda #$01		lda	#1
.9607		4c 35 9a	jmp $9a35		jmp	ErrorHandler
.960a						CRNoProgram:
.960a		4c 5e 89	jmp $895e			jmp 	EndCommand
.960d						Shift1Command:
.960d		b1 30		lda ($30),y			lda 	(codePtr),y
.960f		c8		iny				iny
.9610		0a		asl a				asl 	a
.9611		aa		tax				tax
.9612		7c 58 97	jmp ($9758,x)			jmp 	(VectorSet1,x)
.9615						Shift2Command:
.9615		b1 30		lda ($30),y			lda 	(codePtr),y
.9617		c8		iny				iny
.9618		0a		asl a				asl 	a
.9619		aa		tax				tax
.961a		7c aa 97	jmp ($97aa,x)			jmp 	(VectorSet2,x)
.961d						Unused1:
.961d						Unused2:
.961d						Unused3:
.961d						Unused4:
.961d		4c 31 ac	jmp $ac31			jmp 	SyntaxError
>9620								.align 2

;******  Processing file: ./common/commands/../generated/vectors.dat

.9620						VectorSetPunc:
>9620		f3 9c					.word	ShiftLeft                        ; $00 <<
>9622		de 9a					.word	BinaryCompareLessEqual           ; $01 <=
>9624		d4 9a					.word	BinaryCompareNotEqual            ; $02 <>
>9626		31 ac					.word	SyntaxError                      ; $03 !!3
>9628		31 ac					.word	SyntaxError                      ; $04 ><
>962a		e8 9a					.word	BinaryCompareGreaterEqual        ; $05 >=
>962c		f6 9c					.word	ShiftRight                       ; $06 >>
>962e		31 ac					.word	SyntaxError                      ; $07 !!7
>9630		31 ac					.word	SyntaxError                      ; $08 !!8
>9632		31 ac					.word	SyntaxError                      ; $09 !!9
>9634		31 ac					.word	SyntaxError                      ; $0a !!10
>9636		31 ac					.word	SyntaxError                      ; $0b !!11
>9638		31 ac					.word	SyntaxError                      ; $0c !!12
>963a		31 ac					.word	SyntaxError                      ; $0d !!13
>963c		31 ac					.word	SyntaxError                      ; $0e !!14
>963e		31 ac					.word	SyntaxError                      ; $0f !!15
>9640		31 ac					.word	SyntaxError                      ; $10 @
>9642		31 ac					.word	SyntaxError                      ; $11 !!17
>9644		31 ac					.word	SyntaxError                      ; $12 !!18
>9646		31 ac					.word	SyntaxError                      ; $13 [
>9648		9f 9b					.word	IntegerDivide                    ; $14 \
>964a		31 ac					.word	SyntaxError                      ; $15 ]
>964c		31 9e					.word	EorInteger                       ; $16 ^
>964e		31 ac					.word	SyntaxError                      ; $17 _
>9650		31 ac					.word	SyntaxError                      ; $18 `
>9652		31 ac					.word	SyntaxError                      ; $19 !!25
>9654		31 ac					.word	SyntaxError                      ; $1a !!26
>9656		31 ac					.word	SyntaxError                      ; $1b {
>9658		fc 9d					.word	OraInteger                       ; $1c |
>965a		31 ac					.word	SyntaxError                      ; $1d }
>965c		31 ac					.word	SyntaxError                      ; $1e ~
>965e		31 ac					.word	SyntaxError                      ; $1f <7F>
>9660		31 ac					.word	SyntaxError                      ; $20
>9662		66 9e					.word	WordIndirect                     ; $21 !
>9664		31 ac					.word	SyntaxError                      ; $22 "
>9666		31 ac					.word	SyntaxError                      ; $23 #
>9668		31 ac					.word	SyntaxError                      ; $24 $
>966a		e0 9b					.word	IntegerModulus                   ; $25 %
>966c		c7 9d					.word	AndInteger                       ; $26 &
>966e		31 ac					.word	SyntaxError                      ; $27 '
>9670		31 ac					.word	SyntaxError                      ; $28 (
>9672		31 ac					.word	SyntaxError                      ; $29 )
>9674		4e 9c					.word	MulInteger                       ; $2a *
>9676		69 9d					.word	AddInteger                       ; $2b +
>9678		31 ac					.word	SyntaxError                      ; $2c ,
>967a		a2 9d					.word	SubInteger                       ; $2d -
>967c		31 ac					.word	SyntaxError                      ; $2e .
>967e		20 a0					.word	FDivideCommand                   ; $2f /
>9680		31 ac					.word	SyntaxError                      ; $30 0
>9682		31 ac					.word	SyntaxError                      ; $31 1
>9684		31 ac					.word	SyntaxError                      ; $32 2
>9686		31 ac					.word	SyntaxError                      ; $33 3
>9688		31 ac					.word	SyntaxError                      ; $34 4
>968a		31 ac					.word	SyntaxError                      ; $35 5
>968c		31 ac					.word	SyntaxError                      ; $36 6
>968e		31 ac					.word	SyntaxError                      ; $37 7
>9690		31 ac					.word	SyntaxError                      ; $38 8
>9692		31 ac					.word	SyntaxError                      ; $39 9
>9694		31 ac					.word	SyntaxError                      ; $3a :
>9696		31 ac					.word	SyntaxError                      ; $3b ;
>9698		c0 9a					.word	BinaryCompareLess                ; $3c <
>969a		b6 9a					.word	BinaryCompareEqual               ; $3d =
>969c		ca 9a					.word	BinaryCompareGreater             ; $3e >
>969e		88 9e					.word	ByteIndirect                     ; $3f ?
.96a0						VectorSet0:
>96a0		6d 95					.word	EOLCommand                       ; $80 !0:EOF
>96a2		0d 96					.word	Shift1Command                    ; $81 !1:SH1
>96a4		15 96					.word	Shift2Command                    ; $82 !2:SH2
>96a6		0a a5					.word	AbsUnary                         ; $83 ABS(
>96a8		18 a5					.word	AllocUnary                       ; $84 ALLOC(
>96aa		88 a5					.word	AscUnary                         ; $85 ASC(
>96ac		d9 a6					.word	ChrUnary                         ; $86 CHR$(
>96ae		61 89					.word	UnaryEvent                       ; $87 EVENT(
>96b0		b2 9a					.word	UnaryFalse                       ; $88 FALSE
>96b2		95 a5					.word	FracUnary                        ; $89 FRAC(
>96b4		35 aa					.word	ChrGet                           ; $8a GET$(
>96b6		1a aa					.word	AscGet                           ; $8b GET(
>96b8		c4 a9					.word	UnaryGetDate                     ; $8c GETDATE$(
>96ba		c0 a9					.word	UnaryGetTime                     ; $8d GETTIME$(
>96bc		4c b1					.word	UnaryHit                         ; $8e HIT(
>96be		3c aa					.word	ChrInkey                         ; $8f INKEY$(
>96c0		2a aa					.word	AscInkey                         ; $90 INKEY(
>96c2		aa a5					.word	IntUnary                         ; $91 INT(
>96c4		98 a6					.word	IsValUnary                       ; $92 ISVAL(
>96c6		eb a6					.word	ItemCountUnary                   ; $93 ITEMCOUNT(
>96c8		0f a7					.word	ItemGetUnary                     ; $94 ITEMGET$(
>96ca		3f 90					.word	UnaryJoyB                        ; $95 JOYB(
>96cc		18 90					.word	UnaryJoyX                        ; $96 JOYX(
>96ce		1b 90					.word	UnaryJoyY                        ; $97 JOYY(
>96d0		55 aa					.word	KeyDown                          ; $98 KEYDOWN(
>96d2		4e a8					.word	Unary_Left                       ; $99 LEFT$(
>96d4		bb a5					.word	LenUnary                         ; $9a LEN(
>96d6		d9 a5					.word	Unary_Max                        ; $9b MAX(
>96d8		70 a8					.word	Unary_Mid                        ; $9c MID$(
>96da		d5 a5					.word	Unary_Min                        ; $9d MIN(
>96dc		24 a6					.word	Unary_Not                        ; $9e NOT(
>96de		37 a6					.word	PeekByteUnary                    ; $9f PEEK(
>96e0		43 a6					.word	PeekDUnary                       ; $a0 PEEKD(
>96e2		3f a6					.word	PeekLUnary                       ; $a1 PEEKL(
>96e4		3b a6					.word	PeekWUnary                       ; $a2 PEEKW(
>96e6		08 b2					.word	UnaryPlaying                     ; $a3 PLAYING(
>96e8		6f aa					.word	Unary_Random                     ; $a4 RANDOM(
>96ea		5b a8					.word	Unary_Right                      ; $a5 RIGHT$(
>96ec		89 aa					.word	Unary_Rnd                        ; $a6 RND(
>96ee		70 a6					.word	SgnUnary                         ; $a7 SGN(
>96f0		8d a7					.word	SpcUnary                         ; $a8 SPC(
>96f2		a8 a7					.word	Unary_Str                        ; $a9 STR$(
>96f4		ab 98					.word	UnaryTimer                       ; $aa TIMER(
>96f6		a7 9a					.word	UnaryTrue                        ; $ab TRUE
>96f8		8e a6					.word	ValUnary                         ; $ac VAL(
>96fa		b1 8d					.word	ForCommand                       ; $ad FOR
>96fc		f4 8e					.word	IfCommand                        ; $ae IF
>96fe		1d 96					.word	Unused1                          ; $af PROC
>9700		19 95					.word	Command_REPEAT                   ; $b0 REPEAT
>9702		ed 99					.word	Command_WHILE                    ; $b1 WHILE
>9704		1d 8f					.word	EndIf                            ; $b2 ENDIF
>9706		a1 94					.word	Command_ENDPROC                  ; $b3 ENDPROC
>9708		63 8e					.word	NextCommand                      ; $b4 NEXT
>970a		1d 96					.word	Unused4                          ; $b5 THEN
>970c		22 95					.word	Command_UNTIL                    ; $b6 UNTIL
>970e		0e 9a					.word	Command_WEND                     ; $b7 WEND
>9710		31 ac					.word	SyntaxError                      ; $b8 AT
>9712		31 ac					.word	SyntaxError                      ; $b9 BY
>9714		40 88					.word	CallCommand                      ; $ba CALL
>9716		00 af					.word	CircleCommand                    ; $bb CIRCLE
>9718		31 ac					.word	SyntaxError                      ; $bc CLEAR
>971a		31 ac					.word	SyntaxError                      ; $bd COLOR
>971c		31 ac					.word	SyntaxError                      ; $be COLOUR
>971e		87 88					.word	Command_Data                     ; $bf DATA
>9720		8f 88					.word	DimCommand                       ; $c0 DIM
>9722		1d 96					.word	Unused3                          ; $c1 DOWNTO
>9724		16 8f					.word	ElseCode                         ; $c2 ELSE
>9726		31 ac					.word	SyntaxError                      ; $c3 FROM
>9728		1f b1					.word	GfxCommand                       ; $c4 GFX
>972a		31 ac					.word	SyntaxError                      ; $c5 HERE
>972c		29 af					.word	ImageCommand                     ; $c6 IMAGE
>972e		51 90					.word	LetCommand                       ; $c7 LET
>9730		7b af					.word	LineCommand                      ; $c8 LINE
>9732		ab 91					.word	Command_LOCAL                    ; $c9 LOCAL
>9734		6c 92					.word	MCCommand                        ; $ca MEMCOPY
>9736		31 ac					.word	SyntaxError                      ; $cb OFF
>9738		31 ac					.word	SyntaxError                      ; $cc ON
>973a		31 ac					.word	SyntaxError                      ; $cd OUTLINE
>973c		70 b1					.word	PaletteCommand                   ; $ce PALETTE
>973e		74 af					.word	PlotCommand                      ; $cf PLOT
>9740		06 94					.word	PokeBCommand                     ; $d0 POKE
>9742		12 94					.word	PokeDCommand                     ; $d1 POKED
>9744		0e 94					.word	PokeLCommand                     ; $d2 POKEL
>9746		0a 94					.word	PokeWCommand                     ; $d3 POKEW
>9748		af 94					.word	Command_Read                     ; $d4 READ
>974a		fc ae					.word	RectangleCommand                 ; $d5 RECT
>974c		0c 95					.word	RemCommand                       ; $d6 REM
>974e		31 ac					.word	SyntaxError                      ; $d7 SOLID
>9750		24 b2					.word	SoundCommand                     ; $d8 SOUND
>9752		0b af					.word	SpriteCommand                    ; $d9 SPRITE
>9754		45 af					.word	TextCommand                      ; $da TEXT
>9756		1d 96					.word	Unused2                          ; $db TO
.9758						VectorSet1:
>9758		31 ac					.word	SyntaxError                      ; $80 !0:EOF
>975a		31 ac					.word	SyntaxError                      ; $81 !1:SH1
>975c		31 ac					.word	SyntaxError                      ; $82 !2:SH2
>975e		14 88					.word	AssembleCommand                  ; $83 ASSEMBLE
>9760		30 88					.word	AssertCommand                    ; $84 ASSERT
>9762		bf b0					.word	BitmapCtrl                       ; $85 BITMAP
>9764		be 89					.word	Command_BLoad                    ; $86 BLOAD
>9766		6a 8a					.word	Command_BSave                    ; $87 BSAVE
>9768		b0 b1					.word	ClearScreen                      ; $88 CLS
>976a		23 8f					.word	Command_CPrint                   ; $89 CPRINT
>976c		ed 8a					.word	Command_Dir                      ; $8a DIR
>976e		4c 89					.word	BootDOS                          ; $8b DOS
>9770		bd 8b					.word	Command_Drive                    ; $8c DRIVE
>9772		5e 89					.word	EndCommand                       ; $8d END
>9774		dc b1					.word	Explode                          ; $8e EXPLODE
>9776		31 ac					.word	SyntaxError                      ; $8f GO
>9778		bc 8e					.word	Command_GOSUB                    ; $90 GOSUB
>977a		da 8e					.word	GotoCommand                      ; $91 GOTO
>977c		31 ac					.word	SyntaxError                      ; $92 HIMEM
>977e		1e 8f					.word	Command_Input                    ; $93 INPUT
>9780		a1 90					.word	Command_List                     ; $94 LIST
>9782		c4 8b					.word	Command_Load                     ; $95 LOAD
>9784		80 93					.word	MouseDeltaStatus                 ; $96 MDELTA
>9786		7c 93					.word	MouseStatus                      ; $97 MOUSE
>9788		f6 93					.word	NewCommand                       ; $98 NEW
>978a		b8 b1					.word	PingCommand                      ; $99 PING
>978c		2a 8f					.word	Command_Print                    ; $9a PRINT
>978e		3b 95					.word	Command_Restore                  ; $9b RESTORE
>9790		cc 8e					.word	Command_RETURN                   ; $9c RETURN
>9792		7a 95					.word	CommandRUNOptLoad                ; $9d RUN
>9794		96 8c					.word	Command_Save                     ; $9e SAVE
>9796		32 98					.word	CommandSetDate                   ; $9f SETDATE
>9798		36 98					.word	CommandSetTime                   ; $a0 SETTIME
>979a		d0 b1					.word	ShootCommand                     ; $a1 SHOOT
>979c		04 b1					.word	SpritesCtrl                      ; $a2 SPRITES
>979e		a6 98					.word	StopCommand                      ; $a3 STOP
>97a0		1a 8d					.word	Command_Try                      ; $a4 TRY
>97a2		57 8d					.word	Command_VERIFY                   ; $a5 VERIFY
>97a4		7e 88					.word	XGoCommand                       ; $a6 XGO
>97a6		75 88					.word	XLoadCommand                     ; $a7 XLOAD
>97a8		c4 b1					.word	ZapCommand                       ; $a8 ZAP
.97aa						VectorSet2:
>97aa		31 ac					.word	SyntaxError                      ; $80 !0:EOF
>97ac		31 ac					.word	SyntaxError                      ; $81 !1:SH1
>97ae		31 ac					.word	SyntaxError                      ; $82 !2:SH2
>97b0		f0 aa					.word	Assemble_adc                     ; $83 ADC
>97b2		e8 aa					.word	Assemble_and                     ; $84 AND
>97b4		04 ab					.word	Assemble_asl                     ; $85 ASL
>97b6		6e ab					.word	Assemble_bcc                     ; $86 BCC
>97b8		72 ab					.word	Assemble_bcs                     ; $87 BCS
>97ba		7a ab					.word	Assemble_beq                     ; $88 BEQ
>97bc		31 ab					.word	Assemble_bit                     ; $89 BIT
>97be		62 ab					.word	Assemble_bmi                     ; $8a BMI
>97c0		76 ab					.word	Assemble_bne                     ; $8b BNE
>97c2		5e ab					.word	Assemble_bpl                     ; $8c BPL
>97c4		7e ab					.word	Assemble_bra                     ; $8d BRA
>97c6		82 ab					.word	Assemble_brk                     ; $8e BRK
>97c8		66 ab					.word	Assemble_bvc                     ; $8f BVC
>97ca		6a ab					.word	Assemble_bvs                     ; $90 BVS
>97cc		8a ab					.word	Assemble_clc                     ; $91 CLC
>97ce		de ab					.word	Assemble_cld                     ; $92 CLD
>97d0		9e ab					.word	Assemble_cli                     ; $93 CLI
>97d2		ce ab					.word	Assemble_clv                     ; $94 CLV
>97d4		fc aa					.word	Assemble_cmp                     ; $95 CMP
>97d6		45 ab					.word	Assemble_cpx                     ; $96 CPX
>97d8		40 ab					.word	Assemble_cpy                     ; $97 CPY
>97da		22 ab					.word	Assemble_dec                     ; $98 DEC
>97dc		da ab					.word	Assemble_dex                     ; $99 DEX
>97de		b6 ab					.word	Assemble_dey                     ; $9a DEY
>97e0		ec aa					.word	Assemble_eor                     ; $9b EOR
>97e2		27 ab					.word	Assemble_inc                     ; $9c INC
>97e4		ea ab					.word	Assemble_inx                     ; $9d INX
>97e6		d6 ab					.word	Assemble_iny                     ; $9e INY
>97e8		59 ab					.word	Assemble_jmp                     ; $9f JMP
>97ea		54 ab					.word	Assemble_jsr                     ; $a0 JSR
>97ec		f8 aa					.word	Assemble_lda                     ; $a1 LDA
>97ee		1d ab					.word	Assemble_ldx                     ; $a2 LDX
>97f0		3b ab					.word	Assemble_ldy                     ; $a3 LDY
>97f2		0e ab					.word	Assemble_lsr                     ; $a4 LSR
>97f4		ee ab					.word	Assemble_nop                     ; $a5 NOP
>97f6		e4 aa					.word	Assemble_ora                     ; $a6 ORA
>97f8		9a ab					.word	Assemble_pha                     ; $a7 PHA
>97fa		86 ab					.word	Assemble_php                     ; $a8 PHP
>97fc		e2 ab					.word	Assemble_phx                     ; $a9 PHX
>97fe		a2 ab					.word	Assemble_phy                     ; $aa PHY
>9800		aa ab					.word	Assemble_pla                     ; $ab PLA
>9802		8e ab					.word	Assemble_plp                     ; $ac PLP
>9804		f6 ab					.word	Assemble_plx                     ; $ad PLX
>9806		b2 ab					.word	Assemble_ply                     ; $ae PLY
>9808		09 ab					.word	Assemble_rol                     ; $af ROL
>980a		13 ab					.word	Assemble_ror                     ; $b0 ROR
>980c		96 ab					.word	Assemble_rti                     ; $b1 RTI
>980e		a6 ab					.word	Assemble_rts                     ; $b2 RTS
>9810		00 ab					.word	Assemble_sbc                     ; $b3 SBC
>9812		92 ab					.word	Assemble_sec                     ; $b4 SEC
>9814		f2 ab					.word	Assemble_sed                     ; $b5 SED
>9816		ae ab					.word	Assemble_sei                     ; $b6 SEI
>9818		f4 aa					.word	Assemble_sta                     ; $b7 STA
>981a		e6 ab					.word	Assemble_stp                     ; $b8 STP
>981c		18 ab					.word	Assemble_stx                     ; $b9 STX
>981e		36 ab					.word	Assemble_sty                     ; $ba STY
>9820		2c ab					.word	Assemble_stz                     ; $bb STZ
>9822		ca ab					.word	Assemble_tax                     ; $bc TAX
>9824		c6 ab					.word	Assemble_tay                     ; $bd TAY
>9826		4f ab					.word	Assemble_trb                     ; $be TRB
>9828		4a ab					.word	Assemble_tsb                     ; $bf TSB
>982a		d2 ab					.word	Assemble_tsx                     ; $c0 TSX
>982c		ba ab					.word	Assemble_txa                     ; $c1 TXA
>982e		c2 ab					.word	Assemble_txs                     ; $c2 TXS
>9830		be ab					.word	Assemble_tya                     ; $c3 TYA

;******  Return to file: ./common/commands/run.asm


;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/commands/setdatetime.asm

.9832						CommandSetDate:
.9832		a9 03		lda #$03			lda 	#3
.9834		80 02		bra $9838			bra 	CSDTMain
.9836						CommandSetTime:
.9836		a9 00		lda #$00			lda 	#0
.9838						CSDTMain:
.9838		48		pha				pha 								; save table offsets 0 or 3
.9839		a2 00		ldx #$00			ldx 	#0 							; input 3 values.
.983b		20 30 a9	jsr $a930			jsr 	Evaluate8BitInteger
.983e		20 24 9a	jsr $9a24			jsr 	CheckComma
.9841		e8		inx				inx
.9842		20 30 a9	jsr $a930			jsr 	Evaluate8BitInteger
.9845		20 24 9a	jsr $9a24			jsr 	CheckComma
.9848		e8		inx				inx
.9849		20 30 a9	jsr $a930			jsr 	Evaluate8BitInteger
.984c		68		pla				pla 								; table offset in Y, saving Y
.984d		5a		phy				phy
.984e		a8		tay				tay
.984f		a2 00		ldx #$00			ldx 	#0 							; first number
.9851		a5 01		lda $01				lda 	1 							; save I/O page, switch to zero
.9853		48		pha				pha
.9854		64 01		stz $01				stz 	1
.9856						_CSDTCopy:
.9856		b5 58		lda $58,x			lda 	NSMantissa0,x 				; get first number
.9858		d9 9a 98	cmp $989a,y			cmp 	RTCWMinValues,y 			; check range
.985b		90 1b		bcc $9878			bcc 	_CSDTRange
.985d		d9 a0 98	cmp $98a0,y			cmp 	RTCWMaxValues,y
.9860		b0 16		bcs $9878			bcs 	_CSDTRange
.9862		20 7d 98	jsr $987d			jsr 	CSDTDecimalToBCD
.9865		da		phx				phx 								; save X
.9866		be 94 98	ldx $9894,y			ldx 	RTCWOffset,y 				; offset in RTC in X
.9869		9d 90 d6	sta $d690,x			sta 	$D690,x 					; write to RTC
.986c		fa		plx				plx 								; restore X
.986d		e8		inx				inx 								; next number
.986e		c8		iny				iny 								; next table entries
.986f		e0 03		cpx #$03			cpx 	#3 							; until done all 3.
.9871		d0 e3		bne $9856			bne 	_CSDTCopy
.9873		68		pla				pla 								; restore I/O space
.9874		85 01		sta $01				sta 	1
.9876		7a		ply				ply 								; restore code pos and exit.
.9877		60		rts				rts
.9878						_CSDTRange:
.9878		a9 04		lda #$04		lda	#4
.987a		4c 35 9a	jmp $9a35		jmp	ErrorHandler
.987d						CSDTDecimalToBCD:
.987d		da		phx				phx 								; 10 count in X
.987e		a2 00		ldx #$00			ldx 	#0
.9880						_CSDTDBLoop:
.9880		c9 0a		cmp #$0a			cmp 	#10 						; < 10 evaluate result.
.9882		90 05		bcc $9889			bcc 	_CSDTDBExit
.9884		e9 0a		sbc #$0a			sbc 	#10 						; 10 from value
.9886		e8		inx				inx 								; one more 10s.
.9887		80 f7		bra $9880			bra 	_CSDTDBLoop
.9889						_CSDTDBExit:
.9889		85 36		sta $36				sta 	zTemp0 						; units
.988b		8a		txa				txa 								; 10s x 16
.988c		0a		asl a				asl 	a
.988d		0a		asl a				asl 	a
.988e		0a		asl a				asl 	a
.988f		0a		asl a				asl 	a
.9890		05 36		ora $36				ora 	zTemp0 						; BCD result and exit
.9892		fa		plx				plx
.9893		60		rts				rts
.9894						RTCWOffset:
>9894		04 02 00 06 09 0a				.byte 	4,2,0,6,9,10
.989a						RTCWMinValues:
>989a		00 00 00 01 01 00				.byte 	0,0,0,1,1,0
.98a0						RTCWMaxValues:
>98a0		18 3c 3c 20 0d 64				.byte 	24,60,60,32,13,100

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/stop.asm

.98a6						StopCommand:
.98a6		a9 08		lda #$08		lda	#8
.98a8		4c 35 9a	jmp $9a35		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/commands/timer.asm

.98ab						UnaryTimer:
.98ab		fa		plx				plx
.98ac		20 1c 9a	jsr $9a1c			jsr 	CheckRightBracket
.98af						TimerToStackX:
.98af		20 95 a9	jsr $a995			jsr 	NSMSetZero 					; zero result
.98b2		64 01		stz $01				stz 	1 							; access I/O
.98b4		ad 59 d6	lda $d659			lda 	$D659 						; copy timer in
.98b7		95 58		sta $58,x			sta 	NSMantissa0,x
.98b9		ad 5a d6	lda $d65a			lda 	$D65A
.98bc		95 60		sta $60,x			sta 	NSMantissa1,x
.98be		ad 5b d6	lda $d65b			lda 	$D65B
.98c1		95 68		sta $68,x			sta 	NSMantissa2,x
.98c3		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/clear.asm

.98c4						ClearSystem:
.98c4		a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.98c6		85 36		sta $36				sta 	0+zTemp0
.98c8		a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.98ca		85 37		sta $37				sta 	1+zTemp0
.98cc						_ClearZeroLoop:
.98cc		b2 36		lda ($36)			lda 	(zTemp0) 					; end of variables if offset is zero.
.98ce		f0 24		beq $98f4			beq 	_ClearZeroEnd
.98d0		a0 03		ldy #$03			ldy 	#3 							; erase the variables
.98d2		a9 00		lda #$00			lda 	#0 							; set all the data to zero.
.98d4						_ClearOneVariable:
.98d4		91 36		sta ($36),y			sta 	(zTemp0),y
.98d6		c8		iny				iny
.98d7		c0 08		cpy #$08			cpy 	#8
.98d9		d0 f9		bne $98d4			bne 	_ClearOneVariable
.98db		a0 02		ldy #$02			ldy 	#2 							; has it been marked procedure
.98dd		b1 36		lda ($36),y			lda 	(zTemp0),y
.98df		c9 18		cmp #$18			cmp 	#NSTProcedure
.98e1		d0 04		bne $98e7			bne 	_ClearNotProcedure
.98e3		a9 04		lda #$04			lda 	#NSTInteger+NSBIsArray 		; if so set it back to an integer array
.98e5		91 36		sta ($36),y			sta 	(zTemp0),y 					; will be fixed on the pre-run scan.
.98e7						_ClearNotProcedure:
.98e7		18		clc				clc 								; go to the next variable
.98e8		b2 36		lda ($36)			lda 	(zTemp0) 					; offset to next, add to zTemp0
.98ea		65 36		adc $36				adc 	zTemp0
.98ec		85 36		sta $36				sta 	zTemp0
.98ee		90 dc		bcc $98cc			bcc 	_ClearZeroLoop
.98f0		e6 37		inc $37				inc 	zTemp0+1
.98f2		80 d8		bra $98cc			bra 	_ClearZeroLoop
.98f4						_ClearZeroEnd:
.98f4		18		clc				clc
.98f5		a5 36		lda $36				lda 	zTemp0
.98f7		69 01		adc #$01			adc 	#1
.98f9		8d 08 04	sta $0408			sta 	lowMemPtr
.98fc		a5 37		lda $37				lda 	zTemp0+1
.98fe		69 00		adc #$00			adc 	#0
.9900		8d 09 04	sta $0409			sta 	lowMemPtr+1
.9903		20 11 b3	jsr $b311			jsr 	StackReset
.9906		20 77 b3	jsr $b377			jsr 	StringSystemInitialise
.9909		20 1f 99	jsr $991f			jsr 	ProcedureScan
.990c		20 3b 95	jsr $953b			jsr 	Command_Restore
.990f		9c 1a 04	stz $041a			stz 	AssemblerAddress
.9912		9c 1b 04	stz $041b			stz 	AssemblerAddress+1
.9915		9c 1c 04	stz $041c			stz 	AssemblerControl
.9918		9c 5d 06	stz $065d			stz 	KeyboardQueueEntries
.991b		20 75 a5	jsr $a575			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.991e		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/procscan.asm

.991f						ProcedureScan:
.991f		20 52 95	jsr $9552			jsr 	SwapDataCodePtrs 			; swap code and data
.9922		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.9924		85 30		sta $30				sta 	codePtr
.9926		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.9928		85 31		sta $31				sta 	codePtr+1
.992a						_PSLoop:
.992a		b2 30		lda ($30)			lda 	(codePtr)
.992c		f0 42		beq $9970			beq 	_PSExit
.992e		a0 03		ldy #$03			ldy 	#3 							; is it PROC at start of line ?
.9930		b1 30		lda ($30),y			lda 	(codePtr),y
.9932		c9 af		cmp #$af			cmp 	#KWD_PROC
.9934		d0 2d		bne $9963			bne 	_PSNext
.9936		c8		iny				iny 								; get the address of the record to zTemp0 and
.9937		b1 30		lda ($30),y			lda 	(codePtr),y
.9939		29 c0		and #$c0			and 	#$C0
.993b		c9 40		cmp #$40			cmp 	#$40
.993d		d0 35		bne $9974			bne 	_PSSyntax
.993f		b1 30		lda ($30),y			lda 	(codePtr),y
.9941		18		clc				clc
.9942		69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.9944		85 37		sta $37				sta 	zTemp0+1
.9946		c8		iny				iny 								; LSB
.9947		b1 30		lda ($30),y			lda 	(codePtr),y
.9949		85 36		sta $36				sta 	zTemp0
.994b		c8		iny				iny 								; character after variable call.
.994c		98		tya				tya 								; save Y offset at +7 (exponent slot)
.994d		a0 07		ldy #$07			ldy 	#7
.994f		91 36		sta ($36),y			sta 	(zTemp0),y
.9951		a9 18		lda #$18			lda 	#NSTProcedure 				; mark it as procedure
.9953		a0 02		ldy #$02			ldy 	#2
.9955		91 36		sta ($36),y			sta 	(zTemp0),y
.9957		a2 00		ldx #$00			ldx 	#0 							; copy code-Ptr into offset 3-6 (mantissa)
.9959						_PSCopy:
.9959		b5 30		lda $30,x			lda 	safePtr,x
.995b		c8		iny				iny
.995c		91 36		sta ($36),y			sta 	(zTemp0),y
.995e		e8		inx				inx
.995f		e0 04		cpx #$04			cpx 	#4
.9961		d0 f6		bne $9959			bne 	_PSCopy
.9963						_PSNext:
.9963		18		clc				clc
.9964		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.9966		65 30		adc $30				adc 	codePtr
.9968		85 30		sta $30				sta 	codePtr
.996a		90 02		bcc $996e			bcc 	_CREExit
.996c		e6 31		inc $31				inc 	codePtr+1 					; carry
.996e						_CREExit:
.996e		80 ba		bra $992a			bra 	_PSLoop
.9970						_PSExit:
.9970		20 52 95	jsr $9552			jsr 	SwapDataCodePtrs 			; swap code and data
.9973		60		rts				rts
.9974						_PSSyntax:
.9974		4c 31 ac	jmp $ac31			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/scanforward.asm

.9977						ScanForward:
.9977		64 38		stz $38				stz 	zTemp1 						; zero the structure count - goes up with WHILE/FOR down with WEND/NEXT etc.
.9979		86 37		stx $37				stx 	zTemp0+1
.997b		85 36		sta $36				sta 	zTemp0 						; save X & A as the two possible matches.
.997d						_ScanLoop:
.997d		b1 30		lda ($30),y			lda 	(codePtr),y
.997f		c8		iny				iny
.9980		a6 38		ldx $38				ldx 	zTemp1 						; if the count is > 0 cannot match as in substructure
.9982		d0 0e		bne $9992			bne 	_ScanGoNext
.9984		c5 36		cmp $36				cmp 	zTemp0 						; see if either matches
.9986		f0 04		beq $998c			beq 	_ScanMatch
.9988		c5 37		cmp $37				cmp 	zTemp0+1
.998a		d0 06		bne $9992			bne 	_ScanGoNext
.998c						_ScanMatch:
.998c		c9 80		cmp #$80			cmp 	#KWC_EOL 					; if asked for EOL, backtrack.
.998e		d0 01		bne $9991			bne 	_ScanNotEndEOL
.9990		88		dey				dey
.9991						_ScanNotEndEOL:
.9991		60		rts				rts
.9992						_ScanGoNext:
.9992		20 97 99	jsr $9997			jsr  	ScanForwardOne 				; allows for shifts and so on.
.9995		80 e6		bra $997d			bra 	_ScanLoop
.9997						ScanForwardOne:
.9997		c9 40		cmp #$40			cmp 	#$40 						; if 00-3F, punctuation characters, already done.
.9999		90 3e		bcc $99d9			bcc 	_SFWExit
.999b		c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if 40-82, skip one extra as these are 2 byte
.999d		90 18		bcc $99b7			bcc 	_ScanSkipOne	 			; offsets into the identifier table or shifts.
.999f		c9 fc		cmp #$fc			cmp 	#$FC 						; FC-FF are data skips (hex consts, strings etc.)
.99a1		b0 2f		bcs $99d2			bcs 	_ScanSkipData
.99a3		c9 ad		cmp #$ad			cmp 	#KWC_FIRST_STRUCTURE 		; structure keyword ?
.99a5		90 32		bcc $99d9			bcc 	_SFWExit 					; if not, ordinary keywords.
.99a7		c9 b8		cmp #$b8			cmp 	#KWC_LAST_STRUCTURE+1
.99a9		b0 2e		bcs $99d9			bcs 	_SFWExit
.99ab		c6 38		dec $38				dec 	zTemp1 						; decrement the sructure count
.99ad		c9 b2		cmp #$b2			cmp 	#KWC_FIRST_STRUCTURE_DEC 	; back if it is a dec structure (e.g. WEND/NEXT)
.99af		b0 28		bcs $99d9			bcs 	_SFWExit
.99b1		e6 38		inc $38				inc 	zTemp1 						; so it's an increment structure
.99b3		e6 38		inc $38				inc 	zTemp1 						; twice to undo the dec
.99b5		80 22		bra $99d9			bra 	_SFWExit
.99b7						_ScanSkipOne:
.99b7		c8		iny				iny 								; consume the extra one.
.99b8		c9 80		cmp #$80			cmp 	#KWC_EOL 					; if not EOL loop back
.99ba		d0 1d		bne $99d9			bne 	_SFWExit
.99bc		18		clc				clc
.99bd		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.99bf		65 30		adc $30				adc 	codePtr
.99c1		85 30		sta $30				sta 	codePtr
.99c3		90 02		bcc $99c7			bcc 	_CREExit
.99c5		e6 31		inc $31				inc 	codePtr+1 					; carry
.99c7						_CREExit:
.99c7		a0 03		ldy #$03			ldy 	#3 							; scan start position.
.99c9		b2 30		lda ($30)			lda 	(codePtr)
.99cb		d0 0c		bne $99d9			bne 	_SFWExit 					; if not zero, more to scan
.99cd		a9 13		lda #$13		lda	#19
.99cf		4c 35 9a	jmp $9a35		jmp	ErrorHandler
.99d2						_ScanSkipData:
.99d2		88		dey				dey 								; point at data token
.99d3		c8		iny				iny 								; point to offset
.99d4		98		tya				tya 								; A = offset position
.99d5		38		sec				sec 								; add size +1 hence SEC
.99d6		71 30		adc ($30),y			adc 	(codePtr),y
.99d8		a8		tay				tay 								; make current position.
.99d9						_SFWExit:
.99d9		60		rts				rts
.99da						ScanGetCurrentLineStep:
.99da		64 38		stz $38				stz 	zTemp1
.99dc		a0 03		ldy #$03			ldy 	#3
.99de						_SGCLSLoop:
.99de		b1 30		lda ($30),y			lda 	(codePtr),y
.99e0		c8		iny				iny
.99e1		c9 80		cmp #$80			cmp 	#KWC_EOL	 				; if EOL exit
.99e3		f0 05		beq $99ea			beq 	_SGCLSExit
.99e5		20 97 99	jsr $9997			jsr 	ScanForwardOne
.99e8		80 f4		bra $99de			bra 	_SGCLSLoop
.99ea						_SGCLSExit:
.99ea		a5 38		lda $38				lda 	zTemp1 						; return the adjustment
.99ec		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/while.asm

.99ed						Command_WHILE:
.99ed		5a		phy				phy 								; save position of the test
.99ee		a2 00		ldx #$00			ldx 	#0 							; work out the while test.
.99f0		20 e3 a8	jsr $a8e3			jsr 	EvaluateNumber
.99f3		20 b7 a9	jsr $a9b7			jsr 	NSMIsZero 					; check if zero
.99f6		f0 0e		beq $9a06			beq 	_WHExitLoop 				; if so exit the loop, while has failed.
.99f8		98		tya				tya 								; position *after* test.
.99f9		7a		ply				ply 								; restore position before test, at WHILE
.99fa		88		dey				dey 								; so we execute the WHILE command again.
.99fb		48		pha				pha 								; push after test on the stack
.99fc		a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; allocate 6 bytes on the return stack.
.99fe		20 ab b2	jsr $b2ab			jsr 	StackOpen
.9a01		20 f0 b2	jsr $b2f0			jsr 	STKSaveCodePosition 		; save loop position - where the test value expr is.
.9a04		7a		ply				ply 								; restore the position *after* the test
.9a05		60		rts				rts
.9a06						_WHExitLoop:
.9a06		68		pla				pla 								; throw post loop position
.9a07		a9 b7		lda #$b7			lda 	#KWD_WEND 					; scan forward past WEND
.9a09		aa		tax				tax
.9a0a		20 77 99	jsr $9977			jsr 	ScanForward
.9a0d		60		rts				rts
.9a0e						Command_WEND:
.9a0e		a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; check WHILE is TOS e.g. in a while loop :)
.9a10		a2 10		ldx #$10			ldx 	#ERRID_WHILE 				; this error if not.
.9a12		20 d8 b2	jsr $b2d8			jsr 	StackCheckFrame
.9a15		20 01 b3	jsr $b301			jsr 	STKLoadCodePosition 		; loop back to the WHILE keyword.
.9a18		20 ca b2	jsr $b2ca			jsr 	StackClose		 			; erase the frame
.9a1b		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/charcheck.asm

.9a1c						CheckRightBracket:
.9a1c		b1 30		lda ($30),y			lda 	(codePtr),y
.9a1e		c8		iny				iny
.9a1f		c9 29		cmp #$29			cmp 	#KWD_RPAREN 						; exit if matches
.9a21		d0 0f		bne $9a32			bne 	CNAFail
.9a23		60		rts				rts
.9a24						CheckComma:
.9a24		b1 30		lda ($30),y			lda 	(codePtr),y
.9a26		c8		iny				iny
.9a27		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 						; exit if matches
.9a29		d0 07		bne $9a32			bne 	CNAFail
.9a2b		60		rts				rts
.9a2c						CheckNextA:
.9a2c		d1 30		cmp ($30),y			cmp 	(codePtr),y
.9a2e		d0 02		bne $9a32			bne 	CNAFail
.9a30		c8		iny				iny 								; skip character
.9a31		60		rts				rts 								; and exit
.9a32						CNAFail:
.9a32		4c 31 ac	jmp $ac31			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/errors.asm

.9a35						ErrorHandler:
.9a35		48		pha				pha 								; save error #
.9a36		a8		tay				tay 								; find the error text
.9a37		f0 4e		beq $9a87			beq 	_EHEnd
.9a39		a2 00		ldx #$00			ldx 	#0
.9a3b		a9 4a		lda #$4a			lda 	#((ErrorText) & $FF)
.9a3d		85 36		sta $36				sta 	0+zTemp0
.9a3f		a9 ac		lda #$ac			lda 	#((ErrorText) >> 8)
.9a41		85 37		sta $37				sta 	1+zTemp0
.9a43						_EHFind:
.9a43		88		dey				dey 								; keep looking through text
.9a44		f0 0e		beq $9a54			beq 	_EHFound
.9a46						_EHFindZero:
.9a46		b2 36		lda ($36)			lda 	(zTemp0) 					; find the next error
.9a48		e6 36		inc $36				inc 	zTemp0
.9a4a		d0 02		bne $9a4e			bne 	_EHFNoCarry
.9a4c		e6 37		inc $37				inc 	zTemp0+1
.9a4e						_EHFNoCarry:
.9a4e		c9 00		cmp #$00			cmp 	#0
.9a50		d0 f4		bne $9a46			bne 	_EHFindZero
.9a52		80 ef		bra $9a43			bra 	_EHFind
.9a54						_EHFound:
.9a54		a5 36		lda $36				lda 	zTemp0 						; print message
.9a56		a6 37		ldx $37				ldx 	zTemp0+1
.9a58		20 94 9a	jsr $9a94			jsr 	PrintStringXA
.9a5b		68		pla				pla  								; check if error is 'open structure'
.9a5c		c9 13		cmp #$13			cmp 	#ERRID_STRUCT
.9a5e		f0 22		beq $9a82			beq 	_EHCREnd
.9a60		a0 01		ldy #$01			ldy 	#1 							; if line number zero don't print it
.9a62		b1 30		lda ($30),y			lda 	(codePtr),y
.9a64		d0 05		bne $9a6b			bne 	_EHAtMsg
.9a66		c8		iny				iny
.9a67		b1 30		lda ($30),y			lda 	(codePtr),y
.9a69		f0 17		beq $9a82			beq 	_EHCREnd
.9a6b						_EHAtMsg:
.9a6b		a2 9a		ldx #$9a			ldx 	#_AtMsg >> 8 				; print " at "
.9a6d		a9 8a		lda #$8a			lda 	#_AtMsg & $FF
.9a6f		20 94 9a	jsr $9a94			jsr 	PrintStringXA
.9a72		a0 01		ldy #$01			ldy 	#1 							; line number into XA
.9a74		b1 30		lda ($30),y			lda 	(codePtr),y
.9a76		48		pha				pha
.9a77		c8		iny				iny
.9a78		b1 30		lda ($30),y			lda 	(codePtr),y
.9a7a		aa		tax				tax
.9a7b		68		pla				pla
.9a7c		20 aa 9e	jsr $9eaa			jsr 	ConvertInt16 				; convert XA to string
.9a7f		20 94 9a	jsr $9a94			jsr 	PrintStringXA 				; and print it.
.9a82						_EHCREnd:
.9a82		a9 0d		lda #$0d			lda 	#13 						; new line
.9a84		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.9a87						_EHEnd:
.9a87		4c df 87	jmp $87df			jmp 	WarmStart
>9a8a		20 61 74 20 6c 69 6e 65		_AtMsg:	.text 	" at line ",0
>9a92		20 00
.9a94						PrintStringXA:
.9a94		5a		phy				phy
.9a95		86 37		stx $37				stx 	zTemp0+1
.9a97		85 36		sta $36				sta 	zTemp0
.9a99		a0 00		ldy #$00			ldy 	#0
.9a9b						_PSXALoop:
.9a9b		b1 36		lda ($36),y			lda 	(zTemp0),y
.9a9d		f0 06		beq $9aa5			beq 	_PSXAExit
.9a9f		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.9aa2		c8		iny				iny
.9aa3		80 f6		bra $9a9b			bra 	_PSXALoop
.9aa5						_PSXAExit:
.9aa5		7a		ply				ply
.9aa6		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/compare.asm

.9aa7						UnaryTrue:
.9aa7		fa		plx				plx
.9aa8						ReturnTrue:
.9aa8		a9 01		lda #$01			lda 	#1  						; set to 1
.9aaa		20 97 a9	jsr $a997			jsr 	NSMSetByte
.9aad		a9 80		lda #$80			lda 	#$80 						; set sign flag, so it is -1
.9aaf		95 50		sta $50,x			sta 	NSStatus,x
.9ab1		60		rts				rts
.9ab2						UnaryFalse:
.9ab2		fa		plx				plx
.9ab3						ReturnFalse:
.9ab3		4c 95 a9	jmp $a995			jmp 	NSMSetZero 					; set it all to zero
.9ab6						BinaryCompareEqual:
.9ab6		fa		plx				plx
.9ab7		20 f2 9a	jsr $9af2			jsr 	CompareBaseCode
.9aba		c9 00		cmp #$00			cmp 	#0
.9abc		f0 ea		beq $9aa8			beq 	ReturnTrue
.9abe		80 f3		bra $9ab3			bra 	ReturnFalse
.9ac0						BinaryCompareLess:
.9ac0		fa		plx				plx
.9ac1		20 f2 9a	jsr $9af2			jsr 	CompareBaseCode
.9ac4		c9 ff		cmp #$ff			cmp 	#$FF
.9ac6		f0 e0		beq $9aa8			beq 	ReturnTrue
.9ac8		80 e9		bra $9ab3			bra 	ReturnFalse
.9aca						BinaryCompareGreater:
.9aca		fa		plx				plx
.9acb		20 f2 9a	jsr $9af2			jsr 	CompareBaseCode
.9ace		c9 01		cmp #$01			cmp 	#1
.9ad0		f0 d6		beq $9aa8			beq 	ReturnTrue
.9ad2		80 df		bra $9ab3			bra 	ReturnFalse
.9ad4						BinaryCompareNotEqual:
.9ad4		fa		plx				plx
.9ad5		20 f2 9a	jsr $9af2			jsr 	CompareBaseCode
.9ad8		c9 00		cmp #$00			cmp 	#0
.9ada		d0 cc		bne $9aa8			bne 	ReturnTrue
.9adc		80 d5		bra $9ab3			bra 	ReturnFalse
.9ade						BinaryCompareLessEqual:
.9ade		fa		plx				plx
.9adf		20 f2 9a	jsr $9af2			jsr 	CompareBaseCode
.9ae2		c9 01		cmp #$01			cmp 	#1
.9ae4		d0 c2		bne $9aa8			bne 	ReturnTrue
.9ae6		80 cb		bra $9ab3			bra 	ReturnFalse
.9ae8						BinaryCompareGreaterEqual:
.9ae8		fa		plx				plx
.9ae9		20 f2 9a	jsr $9af2			jsr 	CompareBaseCode
.9aec		c9 ff		cmp #$ff			cmp 	#$FF
.9aee		d0 b8		bne $9aa8			bne 	ReturnTrue
.9af0		80 c1		bra $9ab3			bra 	ReturnFalse
.9af2						CompareBaseCode:
.9af2		20 fd a1	jsr $a1fd			jsr 	DereferenceTopTwo 			; make both values if references.
.9af5		b5 50		lda $50,x			lda 	NSStatus,x 					; check if either is a string.
.9af7		15 51		ora $51,x			ora 	NSStatus+1,x
.9af9		29 10		and #$10			and 	#NSTString
.9afb		d0 37		bne $9b34			bne 	_CBCString 					; if so do string code, which will check if both.
.9afd		b5 78		lda $78,x			lda 	NSExponent,x 				; check both are integers
.9aff		15 79		ora $79,x			ora 	NSExponent+1,x
.9b01		d0 34		bne $9b37			bne 	_CBCFloat
.9b03		b5 50		lda $50,x			lda 	NSStatus,x
.9b05		15 51		ora $51,x			ora 	NSStatus+1,x
.9b07		29 08		and #$08			and 	#NSTFloat
.9b09		d0 2c		bne $9b37			bne 	_CBCFloat
.9b0b		20 3a 9b	jsr $9b3a			jsr 	CompareFixMinusZero 		; fix up -0 just in cases.
.9b0e		e8		inx				inx
.9b0f		20 3a 9b	jsr $9b3a			jsr 	CompareFixMinusZero
.9b12		ca		dex				dex
.9b13		b5 50		lda $50,x			lda 	NSStatus,x 					; are the signs different ?
.9b15		55 51		eor $51,x			eor 	NSStatus+1,x
.9b17		10 0a		bpl $9b23			bpl 	_CDCSameSign
.9b19		b5 50		lda $50,x			lda 	NSStatus,x 					; if first one is -ve
.9b1b		30 14		bmi $9b31			bmi 	_CBCLess 					; return $FF
.9b1d						_CBCGreater:
.9b1d		a9 01		lda #$01			lda 	#1
.9b1f		60		rts				rts
.9b20						_CBCEqual:
.9b20		a9 00		lda #$00			lda 	#0
.9b22		60		rts				rts
.9b23						_CDCSameSign:
.9b23		20 4f 9d	jsr $9d4f			jsr 	SubTopTwoStack 				; unsigned subtract
.9b26		20 b7 a9	jsr $a9b7			jsr 	NSMIsZero 					; or the mantissa together
.9b29		f0 f5		beq $9b20			beq 	_CBCEqual 					; -0 == 0
.9b2b		b5 70		lda $70,x			lda 	NSMantissa3,x 				; sign of the result. if +ve return $01 else return $FF
.9b2d		55 51		eor $51,x			eor 	NSStatus+1,x 				; however if both were -ve this is inverted
.9b2f		10 ec		bpl $9b1d			bpl 	_CBCGreater
.9b31						_CBCLess:
.9b31		a9 ff		lda #$ff			lda 	#$FF
.9b33		60		rts				rts
.9b34						_CBCString:
.9b34		4c c0 9c	jmp $9cc0			jmp 	CompareStrings
.9b37						_CBCFloat:
.9b37		4c 0a a0	jmp $a00a			jmp 	CompareFloat
.9b3a						CompareFixMinusZero:
.9b3a		20 b7 a9	jsr $a9b7			jsr 	NSMIsZero
.9b3d		d0 02		bne $9b41			bne 	_CFXMZNotZero
.9b3f		74 50		stz $50,x			stz 	NSStatus,x
.9b41						_CFXMZNotZero:
.9b41		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/concat.asm

.9b42						StringConcat:
.9b42		b5 50		lda $50,x			lda 	NSStatus,x 					; check both strings
.9b44		35 51		and $51,x			and 	NSStatus+1,x
.9b46		29 18		and #$18			and 	#NSBTypeMask
.9b48		c9 10		cmp #$10			cmp 	#NSTString
.9b4a		d0 50		bne $9b9c			bne		_SCType
.9b4c		64 38		stz $38				stz 	zTemp1 						; counting total length
.9b4e		e8		inx				inx
.9b4f		20 6d 9b	jsr $9b6d			jsr 	_SCSetupZ0 					; setup for second
.9b52		20 76 9b	jsr $9b76			jsr 	_SCLengthZ0 				; length for second
.9b55		ca		dex				dex
.9b56		20 6d 9b	jsr $9b6d			jsr 	_SCSetupZ0 					; setup for first
.9b59		20 76 9b	jsr $9b76			jsr 	_SCLengthZ0 				; length for first
.9b5c		a5 38		lda $38				lda 	zTemp1 						; allocate memory using total.
.9b5e		20 9b b3	jsr $b39b			jsr 	StringTempAllocate
.9b61		20 8d 9b	jsr $9b8d			jsr 	_SCCopy 					; copy first out, using zTemp0 from above
.9b64		e8		inx				inx
.9b65		20 6d 9b	jsr $9b6d			jsr 	_SCSetupZ0 					; copy second out
.9b68		20 8d 9b	jsr $9b8d			jsr 	_SCCopy
.9b6b		ca		dex				dex
.9b6c		60		rts				rts
.9b6d						_SCSetupZ0:
.9b6d		b5 58		lda $58,x			lda 	NSMantissa0,x
.9b6f		85 36		sta $36				sta 	zTemp0
.9b71		b5 60		lda $60,x			lda 	NSMantissa1,x
.9b73		85 37		sta $37				sta 	zTemp0+1
.9b75		60		rts				rts
.9b76						_SCLengthZ0:
.9b76		5a		phy				phy
.9b77		a0 00		ldy #$00			ldy 	#0
.9b79						_SCLenLoop:
.9b79		b1 36		lda ($36),y			lda 	(zTemp0),y
.9b7b		f0 0e		beq $9b8b			beq 	_SCLExit
.9b7d		c8		iny				iny
.9b7e		e6 38		inc $38				inc 	zTemp1
.9b80		a5 38		lda $38				lda	 	zTemp1 						; check string too long.
.9b82		c9 fd		cmp #$fd			cmp 	#253
.9b84		d0 f3		bne $9b79			bne		_SCLenLoop
.9b86		a9 09		lda #$09		lda	#9
.9b88		4c 35 9a	jmp $9a35		jmp	ErrorHandler
.9b8b						_SCLExit:
.9b8b		7a		ply				ply
.9b8c		60		rts				rts
.9b8d						_SCCopy:
.9b8d		5a		phy				phy
.9b8e		a0 00		ldy #$00			ldy 	#0
.9b90						_SCCopyLoop:
.9b90		b1 36		lda ($36),y			lda 	(zTemp0),y
.9b92		f0 06		beq $9b9a			beq 	_SCCExit
.9b94		20 d4 b3	jsr $b3d4			jsr 	StringTempWrite
.9b97		c8		iny				iny
.9b98		80 f6		bra $9b90			bra 	_SCCopyLoop
.9b9a						_SCCExit:
.9b9a		7a		ply				ply
.9b9b		60		rts				rts
.9b9c						_SCType:
.9b9c		4c 3b ac	jmp $ac3b			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/divide.asm

.9b9f						IntegerDivide:
.9b9f		fa		plx				plx
.9ba0		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9ba2		15 51		ora $51,x			ora 	NSStatus+1,x
.9ba4		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9ba5		0a		asl a				asl 	a
.9ba6		10 05		bpl $9bad			bpl 	_NotRef
.9ba8		48		pha				pha
.9ba9		20 fd a1	jsr $a1fd			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9bac		68		pla				pla
.9bad						_NotRef:
.9bad		0a		asl a				asl 	a
.9bae		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9bb0		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9bb2		15 79		ora $79,x			ora 	NSExponent+1,x
.9bb4		f0 03		beq $9bb9			beq 	_IntegerCode 				; if clear, then we have two integers
.9bb6		4c 3b ac	jmp $ac3b			jmp 	TypeError 					; anything else, type mismatch.
.9bb9						_IntegerCode:
.9bb9		20 d3 9b	jsr $9bd3			jsr 	CheckDivideZero 			; do div zero check
.9bbc		20 05 9c	jsr $9c05			jsr 	Int32Divide 				; do the division
.9bbf		20 b6 9c	jsr $9cb6			jsr 	CalculateSign 				; calculate result sign
.9bc2						NSMCopyPlusTwoToZero:
.9bc2		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.9bc4		95 58		sta $58,x			sta 	NSMantissa0,x
.9bc6		b5 62		lda $62,x			lda 	NSMantissa1+2,x
.9bc8		95 60		sta $60,x			sta 	NSMantissa1,x
.9bca		b5 6a		lda $6a,x			lda 	NSMantissa2+2,x
.9bcc		95 68		sta $68,x			sta 	NSMantissa2,x
.9bce		b5 72		lda $72,x			lda 	NSMantissa3+2,x
.9bd0		95 70		sta $70,x			sta 	NSMantissa3,x
.9bd2		60		rts				rts
.9bd3						CheckDivideZero:
.9bd3		e8		inx				inx
.9bd4		20 b7 a9	jsr $a9b7			jsr 	NSMIsZero
.9bd7		f0 02		beq $9bdb			beq 	_CDVError
.9bd9		ca		dex				dex
.9bda		60		rts				rts
.9bdb						_CDVError:
.9bdb		a9 03		lda #$03		lda	#3
.9bdd		4c 35 9a	jmp $9a35		jmp	ErrorHandler
.9be0						IntegerModulus:
.9be0		fa		plx				plx
.9be1		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9be3		15 51		ora $51,x			ora 	NSStatus+1,x
.9be5		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9be6		0a		asl a				asl 	a
.9be7		10 05		bpl $9bee			bpl 	_NotRef
.9be9		48		pha				pha
.9bea		20 fd a1	jsr $a1fd			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9bed		68		pla				pla
.9bee						_NotRef:
.9bee		0a		asl a				asl 	a
.9bef		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9bf1		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9bf3		15 79		ora $79,x			ora 	NSExponent+1,x
.9bf5		f0 03		beq $9bfa			beq 	_IntegerCode 				; if clear, then we have two integers
.9bf7		4c 3b ac	jmp $ac3b			jmp 	TypeError 					; anything else, type mismatch.
.9bfa						_IntegerCode:
.9bfa						IntegerModulusNoCheck:
.9bfa		20 d3 9b	jsr $9bd3			jsr 	CheckDivideZero 			; do div zero check
.9bfd		20 05 9c	jsr $9c05			jsr 	Int32Divide 				; do the division
.9c00		16 50		asl $50,x			asl 	NSStatus,x 					; clear the sign bit.
.9c02		56 50		lsr $50,x			lsr 	NSStatus,x
.9c04		60		rts				rts
.9c05						Int32Divide:
.9c05		48		pha				pha 								; save AXY
.9c06		5a		phy				phy
.9c07		20 78 a9	jsr $a978			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.9c0a		20 91 a9	jsr $a991			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.9c0d		a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.9c0f						_I32DivideLoop:
.9c0f		e8		inx				inx
.9c10		e8		inx				inx
.9c11		20 a4 a9	jsr $a9a4			jsr 	NSMShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.9c14		ca		dex				dex
.9c15		ca		dex				dex
.9c16		20 a5 a9	jsr $a9a5			jsr 	NSMRotateLeft
.9c19		20 44 9c	jsr $9c44			jsr 	DivideCheckSubtract 		; check if subtract possible
.9c1c		90 02		bcc $9c20			bcc 	_I32DivideNoCarryIn
.9c1e		f6 5a		inc $5a,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.9c20						_I32DivideNoCarryIn:
.9c20		88		dey				dey 								; loop round till division completed.
.9c21		d0 ec		bne $9c0f			bne 	_I32DivideLoop
.9c23		7a		ply				ply 								; restore AXY and exit
.9c24		68		pla				pla
.9c25		60		rts				rts
.9c26						Int32ShiftDivide:
.9c26		48		pha				pha 								; save AY
.9c27		5a		phy				phy
.9c28		e8		inx				inx 								; clear S[X+2]
.9c29		e8		inx				inx
.9c2a		20 95 a9	jsr $a995			jsr 	NSMSetZero
.9c2d		ca		dex				dex
.9c2e		ca		dex				dex
.9c2f		a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.9c31						_I32SDLoop:
.9c31		20 44 9c	jsr $9c44			jsr 	DivideCheckSubtract 		; check if subtract possible
.9c34		e8		inx				inx
.9c35		e8		inx				inx
.9c36		20 a5 a9	jsr $a9a5			jsr 	NSMRotateLeft				; shift 64 bit FPA left, rotating carry in
.9c39		ca		dex				dex
.9c3a		ca		dex				dex
.9c3b		20 a5 a9	jsr $a9a5			jsr 	NSMRotateLeft
.9c3e		88		dey				dey 	 							; do 31 times
.9c3f		d0 f0		bne $9c31			bne 	_I32SDLoop
.9c41		7a		ply				ply 								; restore AY and exit
.9c42		68		pla				pla
.9c43		60		rts				rts
.9c44						DivideCheckSubtract:
.9c44		20 4f 9d	jsr $9d4f			jsr 	SubTopTwoStack 				; subtract Stack[X+1] from Stack[X+0]
.9c47		b0 04		bcs $9c4d			bcs 	_DCSExit 					; if carry set, then could do, exit
.9c49		20 35 9d	jsr $9d35			jsr 	AddTopTwoStack 				; add it back in
.9c4c		18		clc				clc 								; and return False
.9c4d						_DCSExit:
.9c4d		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/multiply.asm

.9c4e						MulInteger:
.9c4e		fa		plx				plx
.9c4f		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9c51		15 51		ora $51,x			ora 	NSStatus+1,x
.9c53		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9c54		0a		asl a				asl 	a
.9c55		10 05		bpl $9c5c			bpl 	_NotRef
.9c57		48		pha				pha
.9c58		20 fd a1	jsr $a1fd			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9c5b		68		pla				pla
.9c5c						_NotRef:
.9c5c		0a		asl a				asl 	a 							; put MSB of type into A:7
.9c5d		30 09		bmi $9c68			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.9c5f		b5 78		lda $78,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9c61		15 79		ora $79,x			ora 	NSExponent+1,x
.9c63		f0 06		beq $9c6b			beq 	_IntegerCode 				; if clear, then we have two integers
.9c65		4c cc a0	jmp $a0cc			jmp 	FloatingPointMultiply 							; otherwise at least one float.
.9c68						_StringData:
.9c68		4c 45 ac	jmp $ac45			jmp 	NotDoneError							; at least one string - don't know both are strings.
.9c6b						_IntegerCode:
.9c6b		20 78 9c	jsr $9c78			jsr 	MultiplyShort
.9c6e		c9 00		cmp #$00			cmp 	#0
.9c70		f0 05		beq $9c77			beq 	_MIExit
.9c72		a9 04		lda #$04		lda	#4
.9c74		4c 35 9a	jmp $9a35		jmp	ErrorHandler
.9c77						_MIExit:
.9c77		60		rts				rts
.9c78						MultiplyShort:
.9c78		5a		phy				phy 								; save Y
.9c79		20 78 a9	jsr $a978			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.9c7c		20 91 a9	jsr $a991			jsr 	NSMSetZeroMantissaOnly 		; set mantissa S[X] to zero
.9c7f		a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.9c81						_I32MLoop:
.9c81		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.9c83		15 62		ora $62,x			ora 	NSMantissa1+2,x
.9c85		15 6a		ora $6a,x			ora 	NSMantissa2+2,x
.9c87		15 72		ora $72,x			ora 	NSMantissa3+2,x
.9c89		f0 25		beq $9cb0			beq 	_I32MExit 					; exit if zero
.9c8b		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.9c8d		29 01		and #$01			and 	#1
.9c8f		f0 0d		beq $9c9e			beq 	_I32MNoAdd
.9c91		20 35 9d	jsr $9d35			jsr 	AddTopTwoStack 				; if so add S[X+1] to S[X+0]
.9c94		b5 70		lda $70,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.9c96		10 06		bpl $9c9e			bpl 	_I32MNoAdd
.9c98						_I32ShiftRight:
.9c98		20 ae a9	jsr $a9ae			jsr 	NSMShiftRight 				; shift S[X] right
.9c9b		c8		iny				iny 								; increment shift count
.9c9c		80 09		bra $9ca7			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.9c9e						_I32MNoAdd:
.9c9e		34 71		bit $71,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.9ca0		70 f6		bvs $9c98			bvs 	_I32ShiftRight 				; instead.
.9ca2		e8		inx				inx
.9ca3		20 a4 a9	jsr $a9a4			jsr 	NSMShiftLeft 				; shift additive S[X+1] left
.9ca6		ca		dex				dex
.9ca7						_I32MShiftUpper:
.9ca7		e8		inx				inx 								; shift S[X+2] right
.9ca8		e8		inx				inx
.9ca9		20 ae a9	jsr $a9ae			jsr 	NSMShiftRight
.9cac		ca		dex				dex
.9cad		ca		dex				dex
.9cae		80 d1		bra $9c81			bra 	_I32MLoop 					; try again.
.9cb0						_I32MExit:
.9cb0		20 b6 9c	jsr $9cb6			jsr 	CalculateSign
.9cb3		98		tya				tya 								; shift in A
.9cb4		7a		ply				ply 								; restore Y and exit
.9cb5		60		rts				rts
.9cb6						CalculateSign:
.9cb6		b5 50		lda $50,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.9cb8		16 50		asl $50,x			asl 	NSStatus,x 					; shift result left
.9cba		55 51		eor $51,x			eor 	NSStatus+1,x
.9cbc		0a		asl a				asl 	a 							; shift bit 7 into carry
.9cbd		76 50		ror $50,x			ror 	NSStatus,x 					; shift right into status byte.
.9cbf		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/scompare.asm

.9cc0						CompareStrings:
.9cc0		b5 50		lda $50,x			lda 	NSStatus,x 					; check both are strings
.9cc2		35 51		and $51,x			and 	NSStatus+1,x
.9cc4		29 10		and #$10			and 	#NSBIsString
.9cc6		f0 28		beq $9cf0			beq 	_CSTypeError
.9cc8		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy string addresses to zTemp0/1
.9cca		85 36		sta $36				sta 	zTemp0
.9ccc		b5 60		lda $60,x			lda 	NSMantissa1,x
.9cce		85 37		sta $37				sta 	zTemp0+1
.9cd0		b5 59		lda $59,x			lda 	NSMantissa0+1,x
.9cd2		85 38		sta $38				sta 	zTemp1
.9cd4		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9cd6		85 39		sta $39				sta 	zTemp1+1
.9cd8		5a		phy				phy 								; save Y so we can access strings
.9cd9		a0 ff		ldy #$ff			ldy 	#$FF 						; -1 for pre increment.
.9cdb						_CSLoop:
.9cdb		c8		iny				iny
.9cdc		b1 36		lda ($36),y			lda 	(zTemp0),y 					; check if they are the same
.9cde		d1 38		cmp ($38),y			cmp 	(zTemp1),y
.9ce0		d0 06		bne $9ce8			bne 	_CSDifferent
.9ce2		c9 00		cmp #$00			cmp 	#0 							; reached end ?
.9ce4		d0 f5		bne $9cdb			bne 	_CSLoop 					; still comparing
.9ce6						_CSExit:
.9ce6		7a		ply				ply 								; reached end, return zero in A from EOS
.9ce7		60		rts				rts
.9ce8						_CSDifferent:
.9ce8		a9 ff		lda #$ff			lda 	#255 						; if < return $FF
.9cea		90 fa		bcc $9ce6			bcc		_CSExit
.9cec		a9 01		lda #$01			lda 	#1 							; otherwise return 1.
.9cee		80 f6		bra $9ce6			bra 	_CSExit
.9cf0						_CSTypeError:
.9cf0		4c 3b ac	jmp $ac3b			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/shifts.asm

.9cf3						ShiftLeft:
.9cf3		38		sec				sec 								; common code, carry determines which way.
.9cf4		80 01		bra $9cf7			bra 	ShiftMain
.9cf6						ShiftRight:
.9cf6		18		clc				clc
.9cf7						ShiftMain:
.9cf7		fa		plx				plx 								; restore X
.9cf8		08		php				php 								; save direction
.9cf9		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9cfb		15 51		ora $51,x			ora 	NSStatus+1,x
.9cfd		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9cfe		0a		asl a				asl 	a
.9cff		10 05		bpl $9d06			bpl 	_NotRef
.9d01		48		pha				pha
.9d02		20 fd a1	jsr $a1fd			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9d05		68		pla				pla
.9d06						_NotRef:
.9d06		0a		asl a				asl 	a
.9d07		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9d09		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9d0b		15 79		ora $79,x			ora 	NSExponent+1,x
.9d0d		f0 03		beq $9d12			beq 	_IntegerCode 				; if clear, then we have two integers
.9d0f		4c 3b ac	jmp $ac3b			jmp 	TypeError 					; anything else, type mismatch.
.9d12						_IntegerCode:
.9d12		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; check number < 32
.9d14		29 e0		and #$e0			and 	#$E0
.9d16		15 61		ora $61,x			ora 	NSMantissa1+1,x
.9d18		15 69		ora $69,x			ora 	NSMantissa2+1,x
.9d1a		15 71		ora $71,x			ora 	NSMantissa3+1,x
.9d1c		d0 12		bne $9d30			bne 	_SMExit0 					; if >= 32 it will always return zero.
.9d1e						_SMLoop:
.9d1e		d6 59		dec $59,x			dec 	NSMantissa0+1,x 			; predecrement, could do << 0
.9d20		30 11		bmi $9d33			bmi 	_SMExit 					; exit if done.
.9d22		28		plp				plp 								; restore direction setting
.9d23		08		php				php
.9d24		90 05		bcc $9d2b			bcc 	_SMRight
.9d26		20 a4 a9	jsr $a9a4			jsr 	NSMShiftLeft 				; shift left if CS
.9d29		80 f3		bra $9d1e			bra 	_SMLoop
.9d2b						_SMRight:
.9d2b		20 ae a9	jsr $a9ae			jsr 	NSMShiftRight 				; shift right if CC
.9d2e		80 ee		bra $9d1e			bra 	_SMLoop
.9d30						_SMExit0:
.9d30		20 95 a9	jsr $a995			jsr 	NSMSetZero 					; return zero.
.9d33						_SMExit:
.9d33		28		plp				plp 								; throw direction
.9d34		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/simple.asm

.9d35						AddTopTwoStack:
.9d35		18		clc				clc
.9d36		b5 58		lda $58,x			lda		NSMantissa0,x
.9d38		75 59		adc $59,x			adc 		NSMantissa0+1,x
.9d3a		95 58		sta $58,x			sta 	NSMantissa0,x
.9d3c		b5 60		lda $60,x			lda		NSMantissa1,x
.9d3e		75 61		adc $61,x			adc 		NSMantissa1+1,x
.9d40		95 60		sta $60,x			sta 	NSMantissa1,x
.9d42		b5 68		lda $68,x			lda		NSMantissa2,x
.9d44		75 69		adc $69,x			adc 		NSMantissa2+1,x
.9d46		95 68		sta $68,x			sta 	NSMantissa2,x
.9d48		b5 70		lda $70,x			lda		NSMantissa3,x
.9d4a		75 71		adc $71,x			adc 		NSMantissa3+1,x
.9d4c		95 70		sta $70,x			sta 	NSMantissa3,x
.9d4e		60		rts				rts
.9d4f						SubTopTwoStack:
.9d4f		38		sec				sec
.9d50		b5 58		lda $58,x			lda		NSMantissa0,x
.9d52		f5 59		sbc $59,x			sbc 		NSMantissa0+1,x
.9d54		95 58		sta $58,x			sta 	NSMantissa0,x
.9d56		b5 60		lda $60,x			lda		NSMantissa1,x
.9d58		f5 61		sbc $61,x			sbc 		NSMantissa1+1,x
.9d5a		95 60		sta $60,x			sta 	NSMantissa1,x
.9d5c		b5 68		lda $68,x			lda		NSMantissa2,x
.9d5e		f5 69		sbc $69,x			sbc 		NSMantissa2+1,x
.9d60		95 68		sta $68,x			sta 	NSMantissa2,x
.9d62		b5 70		lda $70,x			lda		NSMantissa3,x
.9d64		f5 71		sbc $71,x			sbc 		NSMantissa3+1,x
.9d66		95 70		sta $70,x			sta 	NSMantissa3,x
.9d68		60		rts				rts
.9d69						AddInteger:
.9d69		fa		plx				plx
.9d6a		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9d6c		15 51		ora $51,x			ora 	NSStatus+1,x
.9d6e		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9d6f		0a		asl a				asl 	a
.9d70		10 05		bpl $9d77			bpl 	_NotRef
.9d72		48		pha				pha
.9d73		20 fd a1	jsr $a1fd			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9d76		68		pla				pla
.9d77						_NotRef:
.9d77		0a		asl a				asl 	a 							; put MSB of type into A:7
.9d78		30 09		bmi $9d83			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.9d7a		b5 78		lda $78,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9d7c		15 79		ora $79,x			ora 	NSExponent+1,x
.9d7e		f0 06		beq $9d86			beq 	_IntegerCode 				; if clear, then we have two integers
.9d80		4c 7c 9f	jmp $9f7c			jmp 	FloatingPointAdd 							; otherwise at least one float.
.9d83						_StringData:
.9d83		4c 42 9b	jmp $9b42			jmp 	StringConcat							; at least one string - don't know both are strings.
.9d86						_IntegerCode:
.9d86						AddCode:
.9d86		b5 50		lda $50,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.9d88		55 51		eor $51,x			eor 	NSStatus+1,x
.9d8a		10 a9		bpl $9d35			bpl 	AddTopTwoStack
.9d8c		20 4f 9d	jsr $9d4f			jsr 	SubTopTwoStack 				; do a physical subtraction
.9d8f		34 70		bit $70,x			bit 	NSMantissa3,x 				; result is +ve, okay
.9d91		10 07		bpl $9d9a			bpl 	_AddExit
.9d93		b5 51		lda $51,x			lda 	NSStatus+1,x 				; sign is that of 2nd value
.9d95		95 50		sta $50,x			sta 	NSStatus,x
.9d97		20 5e a9	jsr $a95e			jsr 	NSMNegateMantissa 			; negate the mantissa and exit
.9d9a						_AddExit:
.9d9a		20 b7 a9	jsr $a9b7			jsr 	NSMIsZero 					; check for -0
.9d9d		d0 02		bne $9da1			bne 	_AddNonZero
.9d9f		74 50		stz $50,x			stz 	NSStatus,x
.9da1						_AddNonZero:
.9da1		60		rts				rts
.9da2						SubInteger:
.9da2		fa		plx				plx
.9da3		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9da5		15 51		ora $51,x			ora 	NSStatus+1,x
.9da7		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9da8		0a		asl a				asl 	a
.9da9		10 05		bpl $9db0			bpl 	_NotRef
.9dab		48		pha				pha
.9dac		20 fd a1	jsr $a1fd			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9daf		68		pla				pla
.9db0						_NotRef:
.9db0		0a		asl a				asl 	a 							; put MSB of type into A:7
.9db1		30 09		bmi $9dbc			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.9db3		b5 78		lda $78,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9db5		15 79		ora $79,x			ora 	NSExponent+1,x
.9db7		f0 06		beq $9dbf			beq 	_IntegerCode 				; if clear, then we have two integers
.9db9		4c 81 9f	jmp $9f81			jmp 	FloatingPointSub 							; otherwise at least one float.
.9dbc						_StringData:
.9dbc		4c 45 ac	jmp $ac45			jmp 	NotDoneError							; at least one string - don't know both are strings.
.9dbf						_IntegerCode:
.9dbf		b5 51		lda $51,x			lda 	NSStatus+1,x 				; negate the second value.
.9dc1		49 80		eor #$80			eor 	#$80
.9dc3		95 51		sta $51,x			sta 	NSStatus+1,x
.9dc5		80 bf		bra $9d86			bra 	AddCode 					; and do the same code as add.
.9dc7						AndInteger:
.9dc7		fa		plx				plx
.9dc8		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9dca		15 51		ora $51,x			ora 	NSStatus+1,x
.9dcc		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9dcd		0a		asl a				asl 	a
.9dce		10 05		bpl $9dd5			bpl 	_NotRef
.9dd0		48		pha				pha
.9dd1		20 fd a1	jsr $a1fd			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9dd4		68		pla				pla
.9dd5						_NotRef:
.9dd5		0a		asl a				asl 	a
.9dd6		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9dd8		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9dda		15 79		ora $79,x			ora 	NSExponent+1,x
.9ddc		f0 03		beq $9de1			beq 	_IntegerCode 				; if clear, then we have two integers
.9dde		4c 3b ac	jmp $ac3b			jmp 	TypeError 					; anything else, type mismatch.
.9de1						_IntegerCode:
.9de1		b5 58		lda $58,x			lda		NSMantissa0,x
.9de3		35 59		and $59,x			and 		NSMantissa0+1,x
.9de5		95 58		sta $58,x			sta 	NSMantissa0,x
.9de7		b5 60		lda $60,x			lda		NSMantissa1,x
.9de9		35 61		and $61,x			and 		NSMantissa1+1,x
.9deb		95 60		sta $60,x			sta 	NSMantissa1,x
.9ded		b5 68		lda $68,x			lda		NSMantissa2,x
.9def		35 69		and $69,x			and 		NSMantissa2+1,x
.9df1		95 68		sta $68,x			sta 	NSMantissa2,x
.9df3		b5 70		lda $70,x			lda		NSMantissa3,x
.9df5		35 71		and $71,x			and 		NSMantissa3+1,x
.9df7		95 70		sta $70,x			sta 	NSMantissa3,x
.9df9		74 50		stz $50,x			stz	 	NSStatus,x 					; ignore sign.
.9dfb		60		rts				rts
.9dfc						OraInteger:
.9dfc		fa		plx				plx
.9dfd		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9dff		15 51		ora $51,x			ora 	NSStatus+1,x
.9e01		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9e02		0a		asl a				asl 	a
.9e03		10 05		bpl $9e0a			bpl 	_NotRef
.9e05		48		pha				pha
.9e06		20 fd a1	jsr $a1fd			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9e09		68		pla				pla
.9e0a						_NotRef:
.9e0a		0a		asl a				asl 	a
.9e0b		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9e0d		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9e0f		15 79		ora $79,x			ora 	NSExponent+1,x
.9e11		f0 03		beq $9e16			beq 	_IntegerCode 				; if clear, then we have two integers
.9e13		4c 3b ac	jmp $ac3b			jmp 	TypeError 					; anything else, type mismatch.
.9e16						_IntegerCode:
.9e16		b5 58		lda $58,x			lda		NSMantissa0,x
.9e18		15 59		ora $59,x			ora 		NSMantissa0+1,x
.9e1a		95 58		sta $58,x			sta 	NSMantissa0,x
.9e1c		b5 60		lda $60,x			lda		NSMantissa1,x
.9e1e		15 61		ora $61,x			ora 		NSMantissa1+1,x
.9e20		95 60		sta $60,x			sta 	NSMantissa1,x
.9e22		b5 68		lda $68,x			lda		NSMantissa2,x
.9e24		15 69		ora $69,x			ora 		NSMantissa2+1,x
.9e26		95 68		sta $68,x			sta 	NSMantissa2,x
.9e28		b5 70		lda $70,x			lda		NSMantissa3,x
.9e2a		15 71		ora $71,x			ora 		NSMantissa3+1,x
.9e2c		95 70		sta $70,x			sta 	NSMantissa3,x
.9e2e		74 50		stz $50,x			stz	 	NSStatus,x 					; ignore sign.
.9e30		60		rts				rts
.9e31						EorInteger:
.9e31		fa		plx				plx
.9e32		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9e34		15 51		ora $51,x			ora 	NSStatus+1,x
.9e36		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9e37		0a		asl a				asl 	a
.9e38		10 05		bpl $9e3f			bpl 	_NotRef
.9e3a		48		pha				pha
.9e3b		20 fd a1	jsr $a1fd			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9e3e		68		pla				pla
.9e3f						_NotRef:
.9e3f		0a		asl a				asl 	a
.9e40		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9e42		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9e44		15 79		ora $79,x			ora 	NSExponent+1,x
.9e46		f0 03		beq $9e4b			beq 	_IntegerCode 				; if clear, then we have two integers
.9e48		4c 3b ac	jmp $ac3b			jmp 	TypeError 					; anything else, type mismatch.
.9e4b						_IntegerCode:
.9e4b		b5 58		lda $58,x			lda		NSMantissa0,x
.9e4d		55 59		eor $59,x			eor 		NSMantissa0+1,x
.9e4f		95 58		sta $58,x			sta 	NSMantissa0,x
.9e51		b5 60		lda $60,x			lda		NSMantissa1,x
.9e53		55 61		eor $61,x			eor 		NSMantissa1+1,x
.9e55		95 60		sta $60,x			sta 	NSMantissa1,x
.9e57		b5 68		lda $68,x			lda		NSMantissa2,x
.9e59		55 69		eor $69,x			eor 		NSMantissa2+1,x
.9e5b		95 68		sta $68,x			sta 	NSMantissa2,x
.9e5d		b5 70		lda $70,x			lda		NSMantissa3,x
.9e5f		55 71		eor $71,x			eor 		NSMantissa3+1,x
.9e61		95 70		sta $70,x			sta 	NSMantissa3,x
.9e63		74 50		stz $50,x			stz	 	NSStatus,x 					; ignore sign.
.9e65		60		rts				rts
.9e66						WordIndirect:
.9e66		fa		plx				plx
.9e67		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9e69		15 51		ora $51,x			ora 	NSStatus+1,x
.9e6b		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9e6c		0a		asl a				asl 	a
.9e6d		10 05		bpl $9e74			bpl 	_NotRef
.9e6f		48		pha				pha
.9e70		20 fd a1	jsr $a1fd			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9e73		68		pla				pla
.9e74						_NotRef:
.9e74		0a		asl a				asl 	a
.9e75		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9e77		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9e79		15 79		ora $79,x			ora 	NSExponent+1,x
.9e7b		f0 03		beq $9e80			beq 	_IntegerCode 				; if clear, then we have two integers
.9e7d		4c 3b ac	jmp $ac3b			jmp 	TypeError 					; anything else, type mismatch.
.9e80						_IntegerCode:
.9e80		20 86 9d	jsr $9d86			jsr 	AddCode 					; add the two values
.9e83		a9 22		lda #$22			lda 	#NSBIsReference+2 			; make a 2 byte reference
.9e85		95 50		sta $50,x			sta 	NSStatus,x
.9e87		60		rts				rts
.9e88						ByteIndirect:
.9e88		fa		plx				plx
.9e89		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9e8b		15 51		ora $51,x			ora 	NSStatus+1,x
.9e8d		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9e8e		0a		asl a				asl 	a
.9e8f		10 05		bpl $9e96			bpl 	_NotRef
.9e91		48		pha				pha
.9e92		20 fd a1	jsr $a1fd			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9e95		68		pla				pla
.9e96						_NotRef:
.9e96		0a		asl a				asl 	a
.9e97		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9e99		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9e9b		15 79		ora $79,x			ora 	NSExponent+1,x
.9e9d		f0 03		beq $9ea2			beq 	_IntegerCode 				; if clear, then we have two integers
.9e9f		4c 3b ac	jmp $ac3b			jmp 	TypeError 					; anything else, type mismatch.
.9ea2						_IntegerCode:
.9ea2		20 86 9d	jsr $9d86			jsr 	AddCode 					; add the two values
.9ea5		a9 21		lda #$21			lda 	#NSBIsReference+1 			; make a 1 byte reference
.9ea7		95 50		sta $50,x			sta 	NSStatus,x
.9ea9		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/tostring.asm

.9eaa						ConvertInt16:
.9eaa		85 58		sta $58				sta 	NSMantissa0 				; set up as 32 bit conversion
.9eac		86 60		stx $60				stx 	NSMantissa1
.9eae		64 68		stz $68				stz 	NSMantissa2
.9eb0		64 70		stz $70				stz 	NSMantissa3
.9eb2		64 50		stz $50				stz 	NSStatus 					; positive integer
.9eb4		a2 00		ldx #$00			ldx 	#0 							; stack level
.9eb6		a9 0a		lda #$0a			lda 	#10 						; base 10 decimal.
.9eb8		80 00		bra $9eba			bra 	ConvertInt32
.9eba						ConvertInt32:
.9eba		5a		phy				phy
.9ebb		a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.9ebd		24 50		bit $50				bit 	NSStatus 					; output a - if not negative.
.9ebf		10 08		bpl $9ec9			bpl 	_CI32NotNeg
.9ec1		48		pha				pha
.9ec2		a9 2d		lda #$2d			lda 	#'-'
.9ec4		99 23 06	sta $0623,y			sta 	numberBuffer,y
.9ec7		c8		iny				iny
.9ec8		68		pla				pla
.9ec9						_CI32NotNeg:
.9ec9		20 d7 9e	jsr $9ed7			jsr 	_CI32DivideConvert 			; recursive conversion
.9ecc		a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.9ece		99 23 06	sta $0623,y			sta 	numberBuffer,y
.9ed1		7a		ply				ply
.9ed2		a2 06		ldx #$06			ldx 	#numberBuffer >> 8 			; return address in XA
.9ed4		a9 23		lda #$23			lda 	#numberBuffer & $FF
.9ed6		60		rts				rts
.9ed7						_CI32DivideConvert:
.9ed7		e8		inx				inx 								; write to next slot up
.9ed8		20 97 a9	jsr $a997			jsr 	NSMSetByte 		 			; write the base out.
.9edb		ca		dex				dex
.9edc		20 05 9c	jsr $9c05			jsr 	Int32Divide 				; divide
.9edf		b5 58		lda $58,x			lda 	NSMantissa0,x 				; save remainder
.9ee1		48		pha				pha
.9ee2		20 c2 9b	jsr $9bc2			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.9ee5		20 b7 a9	jsr $a9b7			jsr 	NSMIsZero 					; is it zero ?
.9ee8		f0 05		beq $9eef			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.9eea		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.9eec		20 d7 9e	jsr $9ed7			jsr 	_CI32DivideConvert 			; and recusrively call.
.9eef						_CI32NoRecurse:
.9eef		68		pla				pla 								; remainder
.9ef0		c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII, allowing for hexadecimal.
.9ef2		90 02		bcc $9ef6			bcc 	_CI32NotHex
.9ef4		69 26		adc #$26			adc 	#6+32
.9ef6						_CI32NotHex:
.9ef6		69 30		adc #$30			adc 	#48
.9ef8		99 23 06	sta $0623,y			sta 	numberBuffer,y 				; write out and exit
.9efb		c8		iny				iny
.9efc		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/expression.asm


;******  Processing file: ./common/expressions/../generated/precedence.dat

.9efd						PrecedenceLevel:
>9efd		04					.byte	 4	; $00 <<
>9efe		02					.byte	 2	; $01 <=
>9eff		02					.byte	 2	; $02 <>
>9f00		00					.byte	 0	; $03 !!3
>9f01		00					.byte	 0	; $04 ><
>9f02		02					.byte	 2	; $05 >=
>9f03		04					.byte	 4	; $06 >>
>9f04		00					.byte	 0	; $07 !!7
>9f05		00					.byte	 0	; $08 !!8
>9f06		00					.byte	 0	; $09 !!9
>9f07		00					.byte	 0	; $0a !!10
>9f08		00					.byte	 0	; $0b !!11
>9f09		00					.byte	 0	; $0c !!12
>9f0a		00					.byte	 0	; $0d !!13
>9f0b		00					.byte	 0	; $0e !!14
>9f0c		00					.byte	 0	; $0f !!15
>9f0d		00					.byte	 0	; $10 @
>9f0e		00					.byte	 0	; $11 !!17
>9f0f		00					.byte	 0	; $12 !!18
>9f10		00					.byte	 0	; $13 [
>9f11		04					.byte	 4	; $14 \
>9f12		00					.byte	 0	; $15 ]
>9f13		01					.byte	 1	; $16 ^
>9f14		00					.byte	 0	; $17 _
>9f15		00					.byte	 0	; $18 `
>9f16		00					.byte	 0	; $19 !!25
>9f17		00					.byte	 0	; $1a !!26
>9f18		00					.byte	 0	; $1b {
>9f19		01					.byte	 1	; $1c |
>9f1a		00					.byte	 0	; $1d }
>9f1b		00					.byte	 0	; $1e ~
>9f1c		00					.byte	 0	; $1f <7F>
>9f1d		00					.byte	 0	; $20
>9f1e		05					.byte	 5	; $21 !
>9f1f		00					.byte	 0	; $22 "
>9f20		00					.byte	 0	; $23 #
>9f21		05					.byte	 5	; $24 $
>9f22		04					.byte	 4	; $25 %
>9f23		01					.byte	 1	; $26 &
>9f24		00					.byte	 0	; $27 '
>9f25		00					.byte	 0	; $28 (
>9f26		00					.byte	 0	; $29 )
>9f27		04					.byte	 4	; $2a *
>9f28		03					.byte	 3	; $2b +
>9f29		00					.byte	 0	; $2c ,
>9f2a		03					.byte	 3	; $2d -
>9f2b		00					.byte	 0	; $2e .
>9f2c		04					.byte	 4	; $2f /
>9f2d		00					.byte	 0	; $30 0
>9f2e		00					.byte	 0	; $31 1
>9f2f		00					.byte	 0	; $32 2
>9f30		00					.byte	 0	; $33 3
>9f31		00					.byte	 0	; $34 4
>9f32		00					.byte	 0	; $35 5
>9f33		00					.byte	 0	; $36 6
>9f34		00					.byte	 0	; $37 7
>9f35		00					.byte	 0	; $38 8
>9f36		00					.byte	 0	; $39 9
>9f37		00					.byte	 0	; $3a :
>9f38		00					.byte	 0	; $3b ;
>9f39		02					.byte	 2	; $3c <
>9f3a		02					.byte	 2	; $3d =
>9f3b		02					.byte	 2	; $3e >
>9f3c		05					.byte	 5	; $3f ?

;******  Return to file: ./common/expressions/expression.asm

.9f3d						EvaluateExpressionAt0:
.9f3d		a2 00		ldx #$00			ldx 	#0 							; bottom stack level
.9f3f						EvaluateExpression:
.9f3f		a9 00		lda #$00			lda 	#0 							; lowest precedence level
.9f41						EvaluateExpressionAtPrecedence:
.9f41		48		pha				pha 								; save precedence level
.9f42		20 89 a3	jsr $a389			jsr 	EvaluateTerm 				; evaluate term into level X.
.9f45		68		pla				pla 								; restore precedence level.
.9f46						_EXPRLoop:
.9f46		85 36		sta $36				sta 	zTemp0 						; save current precedence level.
.9f48		b1 30		lda ($30),y			lda 	(codePtr),y
.9f4a		c9 40		cmp #$40			cmp		#$40 						; if >= $40 cannot be an operator
.9f4c		b0 25		bcs $9f73			bcs 	_EXPRExit
.9f4e		da		phx				phx 								; read the operator precedence
.9f4f		aa		tax				tax
.9f50		bd fd 9e	lda $9efd,x			lda 	PrecedenceLevel,x
.9f53		fa		plx				plx
.9f54		c9 00		cmp #$00			cmp 	#0							; if zero exit (not an operator)
.9f56		f0 1b		beq $9f73			beq 	_EXPRExit
.9f58		85 37		sta $37				sta 	zTemp0+1 					; save operator precedence level.
.9f5a		a5 36		lda $36				lda 	zTemp0 						; compare current precedence vs. operator precedence
.9f5c		c5 37		cmp $37				cmp 	zTemp0+1
.9f5e		b0 13		bcs $9f73			bcs		_EXPRExit 					; if current >= operator exit
.9f60		48		pha				pha 								; save current precedence.
.9f61		b1 30		lda ($30),y			lda 	(codePtr),y
.9f63		c8		iny				iny
.9f64		48		pha				pha
.9f65		a5 37		lda $37				lda 	zTemp0+1 					; get operator precedence level
.9f67		e8		inx				inx 								; work out the right hand side.
.9f68		20 41 9f	jsr $9f41			jsr 	EvaluateExpressionAtPrecedence
.9f6b		ca		dex				dex
.9f6c		68		pla				pla 								; get operator, call the code.
.9f6d		20 76 9f	jsr $9f76			jsr 	_EXPRCaller
.9f70		68		pla				pla 								; restore precedence level
.9f71		80 d3		bra $9f46			bra 	_EXPRLoop 					; and go round.
.9f73						_EXPRExit:
.9f73		a5 36		lda $36				lda 	zTemp0 						; A = current precedence level.
.9f75		60		rts				rts
.9f76						_EXPRCaller:
.9f76		da		phx				phx 								; save on stack, first thing is to restore it
.9f77		0a		asl a				asl 	a 							; double so can use vectors into X
.9f78		aa		tax				tax
.9f79		7c 20 96	jmp ($9620,x)			jmp 	(VectorSetPunc,x) 			; and go to the code.

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/addsub.asm

.9f7c						FloatingPointAdd:
.9f7c		20 f2 a0	jsr $a0f2			jsr 	FloatPrepare 				; prepare for floats
.9f7f		80 09		bra $9f8a			bra 	FloatAdd
.9f81						FloatingPointSub:
.9f81		20 f2 a0	jsr $a0f2			jsr 	FloatPrepare 				; prepare for floats
.9f84						FloatSubtract:
.9f84		b5 51		lda $51,x			lda 	NSStatus+1,x 				; negate FPB
.9f86		49 80		eor #$80			eor 	#$80
.9f88		95 51		sta $51,x			sta 	NSStatus+1,x				; and fall through.
.9f8a						FloatAdd:
.9f8a		48		pha				pha
.9f8b		5a		phy				phy
.9f8c		20 01 a1	jsr $a101			jsr 	NSNormalise 				; normalise S[X]
.9f8f		f0 51		beq $9fe2			beq 	_FAReturn1
.9f91		e8		inx				inx 								; normalise S[X+1]
.9f92		20 01 a1	jsr $a101			jsr 	NSNormalise
.9f95		ca		dex				dex
.9f96		c9 00		cmp #$00			cmp 	#0
.9f98		f0 60		beq $9ffa			beq 	_FAExit 					; if so, just return A
.9f9a		b5 78		lda $78,x			lda 	NSExponent,x 				; are the exponents the same ?
.9f9c		d5 79		cmp $79,x			cmp 	NSExponent+1,x
.9f9e		f0 18		beq $9fb8			beq 	_FAExponentsEqual
.9fa0		b5 78		lda $78,x			lda 	NSExponent,x 				; work out the larger exponent
.9fa2		a8		tay				tay
.9fa3		38		sec				sec 								; do a signed comparison of the exponents.
.9fa4		f5 79		sbc $79,x			sbc 	NSExponent+1,x
.9fa6		50 02		bvc $9faa			bvc 	_FANoSignedChange
.9fa8		49 80		eor #$80			eor 	#$80
.9faa						_FANoSignedChange:
.9faa		29 80		and #$80			and 	#$80
.9fac		10 02		bpl $9fb0			bpl 	_FAHaveMax
.9fae		b4 79		ldy $79,x			ldy 	NSExponent+1,x
.9fb0						_FAHaveMax:
.9fb0		20 fd 9f	jsr $9ffd			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.9fb3		e8		inx				inx
.9fb4		20 fd 9f	jsr $9ffd			jsr 	_FAShiftToExponent
.9fb7		ca		dex				dex
.9fb8						_FAExponentsEqual:
.9fb8		b5 50		lda $50,x			lda 	NSStatus,x 					; are the signs the same
.9fba		55 51		eor $51,x			eor 	NSStatus+1,x
.9fbc		30 0e		bmi $9fcc			bmi 	_FADifferentSigns
.9fbe		20 35 9d	jsr $9d35			jsr 	AddTopTwoStack 				; do the add of the mantissae
.9fc1		b5 70		lda $70,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.9fc3		10 35		bpl $9ffa			bpl 	_FAExit 					; if no, we are done.
.9fc5		20 ae a9	jsr $a9ae			jsr 	NSMShiftRight 				; shift A right, renormalising it.
.9fc8		f6 78		inc $78,x			inc 	NSExponent,x 				; bump the exponent and exit
.9fca		80 2e		bra $9ffa			bra 	_FAExit
.9fcc						_FADifferentSigns:
.9fcc		20 4f 9d	jsr $9d4f			jsr 	SubTopTwoStack 				; subtract mantissa B from A
.9fcf		b5 70		lda $70,x			lda 	NSMantissa3,x 				; is the result negative ?
.9fd1		10 06		bpl $9fd9			bpl 	_FACheckZero 				; if no, check for -0
.9fd3		20 57 a9	jsr $a957			jsr 	NSMNegate 					; netate result
.9fd6		20 5e a9	jsr $a95e			jsr 	NSMNegateMantissa 			; negate (2'c) the mantissa
.9fd9						_FACheckZero:
.9fd9		20 b7 a9	jsr $a9b7			jsr 	NSMIsZero	 				; check for -0
.9fdc		d0 1c		bne $9ffa			bne 	_FAExit
.9fde		74 50		stz $50,x			stz 	NSStatus,x
.9fe0		80 18		bra $9ffa			bra 	_FAExit
.9fe2						_FAReturn1:
.9fe2		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; called when S(X) is zero.
.9fe4		95 58		sta $58,x			sta 	NSMantissa0,x
.9fe6		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9fe8		95 60		sta $60,x			sta 	NSMantissa1,x
.9fea		b5 69		lda $69,x			lda 	NSMantissa2+1,x
.9fec		95 68		sta $68,x			sta 	NSMantissa2,x
.9fee		b5 71		lda $71,x			lda 	NSMantissa3+1,x
.9ff0		95 70		sta $70,x			sta 	NSMantissa3,x
.9ff2		b5 79		lda $79,x			lda 	NSExponent+1,x
.9ff4		95 78		sta $78,x			sta 	NSExponent,x
.9ff6		b5 51		lda $51,x			lda 	NSStatus+1,x
.9ff8		95 50		sta $50,x			sta 	NSStatus,x
.9ffa						_FAExit:
.9ffa		7a		ply				ply
.9ffb		68		pla				pla
.9ffc		60		rts				rts
.9ffd						_FAShiftToExponent:
.9ffd						_FAShiftToExponent2:
.9ffd		98		tya				tya 								; compare Y to exponent
.9ffe		d5 78		cmp $78,x			cmp 	NSExponent,x 				; reached the exponent required ?
.a000		f0 07		beq $a009			beq 	_FASEExit 					; exit if so.
.a002		20 ae a9	jsr $a9ae			jsr 	NSMShiftRight	 			; shift the mantissa right
.a005		f6 78		inc $78,x			inc 	NSExponent,x 				; increment exponent
.a007		80 f4		bra $9ffd			bra 	_FAShiftToExponent2
.a009						_FASEExit:
.a009		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/compare.asm

.a00a						CompareFloat:
.a00a		20 84 9f	jsr $9f84			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.a00d		b5 60		lda $60,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.a00f		29 f8		and #$f8			and 	#$F8
.a011		15 68		ora $68,x			ora 	NSMantissa2,x
.a013		15 70		ora $70,x			ora 	NSMantissa3,x
.a015		f0 08		beq $a01f			beq 	_FCExit 					; zero, so approximately identical
.a017		a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.a019		34 50		bit $50,x			bit 	NSStatus,x
.a01b		10 02		bpl $a01f			bpl 	_FCExit
.a01d						_FCNegative:
.a01d		a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.a01f						_FCExit:
.a01f		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/divide.asm

.a020						FDivideCommand:
.a020		fa		plx				plx	 								; restore stack position
.a021		20 f2 a0	jsr $a0f2			jsr 	FloatPrepare 				; prepare for floats
.a024						FloatDivide:
.a024		48		pha				pha
.a025		e8		inx				inx
.a026		20 01 a1	jsr $a101			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.a029		ca		dex				dex
.a02a		c9 00		cmp #$00			cmp 	#0
.a02c		f0 1d		beq $a04b			beq 	_FDZero
.a02e		20 01 a1	jsr $a101			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.a031		f0 16		beq $a049			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.a033		20 26 9c	jsr $9c26			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.a036		20 c2 9b	jsr $9bc2			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.a039		20 01 a1	jsr $a101			jsr		NSNormalise 				; renormalise
.a03c		20 b6 9c	jsr $9cb6			jsr 	CalculateSign 				; calculate result sign
.a03f		b5 78		lda $78,x			lda 	NSExponent,x 				; calculate exponent
.a041		38		sec				sec
.a042		f5 79		sbc $79,x			sbc 	NSExponent+1,x
.a044		38		sec				sec
.a045		e9 1e		sbc #$1e			sbc 	#30
.a047		95 78		sta $78,x			sta 	NSExponent,x
.a049						_FDExit:
.a049		68		pla				pla
.a04a		60		rts				rts
.a04b						_FDZero:
.a04b		a9 03		lda #$03		lda	#3
.a04d		4c 35 9a	jmp $9a35		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/fractional.asm

.a050						FloatFractionalPart:
.a050		5a		phy				phy
.a051		b5 50		lda $50,x			lda 	NSStatus,x 					; take absolute value
.a053		29 7f		and #$7f			and 	#$7F
.a055		95 50		sta $50,x			sta 	NSStatus,x
.a057		20 01 a1	jsr $a101			jsr 	NSNormalise
.a05a		b5 78		lda $78,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.a05c		38		sec				sec
.a05d		e9 e0		sbc #$e0			sbc 	#$E0
.a05f		90 29		bcc $a08a			bcc 	_FFPExit 					; already fractional
.a061		c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.a063		b0 22		bcs $a087			bcs 	_FFPZero
.a065		a8		tay				tay 								; put count to do in Y
.a066		b5 70		lda $70,x			lda 	NSMantissa3,x 				; do each in turn.
.a068		20 8c a0	jsr $a08c			jsr 	_FFPPartial
.a06b		95 70		sta $70,x			sta 	NSMantissa3,x
.a06d		b5 68		lda $68,x			lda 	NSMantissa2,x
.a06f		20 8c a0	jsr $a08c			jsr 	_FFPPartial
.a072		95 68		sta $68,x			sta 	NSMantissa2,x
.a074		b5 60		lda $60,x			lda 	NSMantissa1,x
.a076		20 8c a0	jsr $a08c			jsr 	_FFPPartial
.a079		95 60		sta $60,x			sta 	NSMantissa1,x
.a07b		b5 58		lda $58,x			lda 	NSMantissa0,x
.a07d		20 8c a0	jsr $a08c			jsr 	_FFPPartial
.a080		95 58		sta $58,x			sta 	NSMantissa0,x
.a082		20 b7 a9	jsr $a9b7			jsr 	NSMIsZero 					; zeroed check.
.a085		d0 03		bne $a08a			bne 	_FFPExit
.a087						_FFPZero:
.a087		20 95 a9	jsr $a995			jsr 	NSMSetZero
.a08a						_FFPExit:
.a08a		7a		ply				ply
.a08b		60		rts				rts
.a08c						_FFPPartial:
.a08c		c0 00		cpy #$00			cpy 	#0 							; no more to do
.a08e		f0 17		beq $a0a7			beq 	_FFFPPExit
.a090		c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.a092		b0 0c		bcs $a0a0			bcs 	_FFFPPWholeByte
.a094		5a		phy				phy
.a095						_FFFPPLeft:
.a095		0a		asl a				asl 	a
.a096		88		dey				dey
.a097		d0 fc		bne $a095			bne 	_FFFPPLeft
.a099		7a		ply				ply
.a09a						_FFFPPRight:
.a09a		4a		lsr a				lsr 	a
.a09b		88		dey				dey
.a09c		d0 fc		bne $a09a			bne 	_FFFPPRight
.a09e		80 07		bra $a0a7			bra 	_FFFPPExit
.a0a0						_FFFPPWholeByte:
.a0a0		98		tya				tya 								; subtract 8 from count
.a0a1		38		sec				sec
.a0a2		e9 08		sbc #$08			sbc 	#8
.a0a4		a8		tay				tay
.a0a5		a9 00		lda #$00			lda 	#0 							; and clear all
.a0a7						_FFFPPExit:
.a0a7		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/integer.asm

.a0a8						FloatIntegerPart:
.a0a8		48		pha				pha
.a0a9		b5 78		lda $78,x			lda 	NSExponent,x 				; is it integer already ?
.a0ab		f0 1d		beq $a0ca			beq 	_FIPExit 					; if so do nothing
.a0ad		20 b7 a9	jsr $a9b7			jsr 	NSMIsZero 					; is it zero ?
.a0b0		f0 15		beq $a0c7			beq 	_FIPZero 					; if so return zero.
.a0b2		20 01 a1	jsr $a101			jsr 	NSNormalise 				; normalise
.a0b5		f0 10		beq $a0c7			beq 	_FIPZero 					; normalised to zero, exit zero
.a0b7						_FIPShift:
.a0b7		b5 78		lda $78,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.a0b9		10 07		bpl $a0c2			bpl 	_FIPCheckZero
.a0bb		20 ae a9	jsr $a9ae			jsr 	NSMShiftRight 				; shift mantissa right
.a0be		f6 78		inc $78,x			inc 	NSExponent,x 				; bump exponent
.a0c0		80 f5		bra $a0b7			bra 	_FIPShift
.a0c2						_FIPCheckZero:
.a0c2		20 b7 a9	jsr $a9b7			jsr 	NSMIsZero 					; avoid -0 problem
.a0c5		d0 03		bne $a0ca			bne 	_FIPExit 					; set to zero if mantissa zero.
.a0c7						_FIPZero:
.a0c7		20 95 a9	jsr $a995			jsr 	NSMSetZero
.a0ca						_FIPExit:
.a0ca		68		pla				pla
.a0cb		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/multiply.asm

.a0cc						FloatingPointMultiply:
.a0cc		20 f2 a0	jsr $a0f2			jsr 	FloatPrepare 				; prepare for floats
.a0cf						FloatMultiply:
.a0cf		48		pha				pha
.a0d0		20 01 a1	jsr $a101			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.a0d3		f0 18		beq $a0ed			beq 	_FDExit 					; return zero if zero (e.g. zero*something)
.a0d5		e8		inx				inx
.a0d6		20 01 a1	jsr $a101			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.a0d9		ca		dex				dex
.a0da		c9 00		cmp #$00			cmp 	#0
.a0dc		f0 0c		beq $a0ea			beq 	_FDSetZero
.a0de		20 78 9c	jsr $9c78			jsr 	MultiplyShort 				; calculate the result.
.a0e1		75 78		adc $78,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.a0e3		18		clc				clc
.a0e4		75 79		adc $79,x			adc 	NSExponent+1,x
.a0e6		95 78		sta $78,x			sta 	NSExponent,x
.a0e8		80 03		bra $a0ed			bra 	_FDExit
.a0ea						_FDSetZero:
.a0ea		20 95 a9	jsr $a995			jsr 	NSMSetZero 					; return 0
.a0ed						_FDExit:
.a0ed		20 01 a1	jsr $a101			jsr 	NSNormalise 				; normalise the result
.a0f0		68		pla				pla
.a0f1		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/utility.asm

.a0f2						FloatPrepare:
.a0f2		20 fd a1	jsr $a1fd			jsr 	DereferenceTopTwo 			; dereference the top two values
.a0f5		b5 50		lda $50,x			lda 	NSStatus,x 					; check ints/floats, either will do.
.a0f7		15 51		ora $51,x			ora 	NSStatus+1,x
.a0f9		29 10		and #$10			and 	#NSBIsString
.a0fb		d0 01		bne $a0fe			bne 	_FDType
.a0fd		60		rts				rts
.a0fe						_FDType:
.a0fe		4c 3b ac	jmp $ac3b			jmp 	TypeError
.a101						NSNormalise:
.a101		b5 50		lda $50,x			lda 	NSStatus,x 					; make float, keep sign
.a103		29 80		and #$80			and 	#$80
.a105		09 08		ora #$08			ora 	#NSTFloat
.a107		95 50		sta $50,x			sta 	NSStatus,x
.a109		20 b7 a9	jsr $a9b7			jsr 	NSMIsZero 					; if zero exit
.a10c		d0 07		bne $a115			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.a10e		16 50		asl $50,x			asl 	NSStatus,x 					; clear the sign bit.
.a110		76 50		ror $50,x			ror 	NSStatus,x 					; (no -0)
.a112		a9 00		lda #$00			lda 	#0 							; set Z flag
.a114		60		rts				rts
.a115						_NSNormaliseOptimise:
.a115		b5 70		lda $70,x			lda 	NSMantissa3,x 				; upper byte zero ?
.a117		d0 19		bne $a132			bne 	_NSNormaliseLoop
.a119		b5 68		lda $68,x			lda 	NSMantissa2,x 				; byte normalise
.a11b		30 15		bmi $a132			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.a11d		95 70		sta $70,x			sta 	NSMantissa3,x
.a11f		b5 60		lda $60,x			lda 	NSMantissa1,x
.a121		95 68		sta $68,x			sta 	NSMantissa2,x
.a123		b5 58		lda $58,x			lda 	NSMantissa0,x
.a125		95 60		sta $60,x			sta 	NSMantissa1,x
.a127		74 58		stz $58,x			stz 	NSMantissa0,x
.a129		b5 78		lda $78,x			lda 	NSExponent,x
.a12b		38		sec				sec
.a12c		e9 08		sbc #$08			sbc 	#8
.a12e		95 78		sta $78,x			sta 	NSExponent,x
.a130		80 e3		bra $a115			bra 	_NSNormaliseOptimise
.a132						_NSNormaliseLoop:
.a132		34 70		bit $70,x			bit 	NSMantissa3,x 				; bit 30 set ?
.a134		70 07		bvs $a13d			bvs 	_NSNExit 					; exit if so with Z flag clear
.a136		20 a4 a9	jsr $a9a4			jsr 	NSMShiftLeft 				; shift mantissa left
.a139		d6 78		dec $78,x			dec 	NSExponent,x 				; adjust exponent
.a13b		80 f5		bra $a132			bra 	_NSNormaliseLoop
.a13d						_NSNExit:
.a13d		a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.a13f		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignnumber.asm

.a140						AssignNumber:
.a140		5a		phy				phy
.a141		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy mantissa0/1 to zTemp0
.a143		85 36		sta $36				sta 	zTemp0
.a145		b5 60		lda $60,x			lda 	NSMantissa1,x
.a147		85 37		sta $37				sta 	zTemp0+1
.a149		b5 50		lda $50,x			lda 	NSStatus,x 					; clear reference bits
.a14b		29 df		and #$df			and 	#(NSBIsReference ^ $FF)
.a14d		95 50		sta $50,x			sta 	NSStatus,x
.a14f		29 18		and #$18			and 	#NSBTypeMask				; assigning to a float ?
.a151		c9 08		cmp #$08			cmp 	#NSTFloat
.a153		f0 24		beq $a179			beq 	_ANFloat
.a155		b5 79		lda $79,x			lda		NSExponent+1,x 				; is it a float
.a157		f0 03		beq $a15c			beq		_ANNotFloat
.a159		4c 36 ac	jmp $ac36			jmp 	RangeError					; if it is, report an error.
.a15c						_ANNotFloat:
.a15c		b5 50		lda $50,x			lda 	NSStatus,x 					; check if byte/word reference.
.a15e		29 03		and #$03			and 	#3
.a160		d0 05		bne $a167			bne 	_ANByteWord
.a162		20 84 a1	jsr $a184			jsr 	_ANCopy4PackSign 			; copy all 4 bytes and sign
.a165		80 1b		bra $a182			bra 	_ANExit
.a167						_ANByteWord:
.a167		48		pha				pha 								; save count
.a168		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; do byte
.a16a		92 36		sta ($36)			sta 	(zTemp0)
.a16c		68		pla				pla
.a16d		c9 01		cmp #$01			cmp	 	#1
.a16f		f0 11		beq $a182			beq 	_ANExit
.a171		b5 61		lda $61,x			lda 	NSMantissa1+1,x 			; do word
.a173		a0 01		ldy #$01			ldy 	#1
.a175		91 36		sta ($36),y			sta 	(zTemp0),y
.a177		80 09		bra $a182			bra 	_ANExit
.a179						_ANFloat:
.a179		20 84 a1	jsr $a184			jsr 	_ANCopy4PackSign 			; write all 4 bytes and packed sign
.a17c		b5 79		lda $79,x			lda 	NSExponent+1,x 				; copy exponent to slot 4
.a17e		a0 04		ldy #$04			ldy 	#4
.a180		91 36		sta ($36),y			sta 	(zTemp0),y
.a182						_ANExit:
.a182		7a		ply				ply
.a183		60		rts				rts
.a184						_ANCopy4PackSign:
.a184		a0 03		ldy #$03			ldy 	#3
.a186		b5 51		lda $51,x			lda 	NSStatus+1,x 				; sign bit into status
.a188		29 80		and #$80			and 	#$80 						; put into high bit of mantissa 3
.a18a		15 71		ora $71,x			ora 	NSMantissa3+1,x
.a18c		91 36		sta ($36),y			sta 	(zTemp0),y
.a18e		88		dey				dey
.a18f		b5 69		lda $69,x			lda 	NSMantissa2+1,x
.a191		91 36		sta ($36),y			sta 	(zTemp0),y
.a193		88		dey				dey
.a194		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.a196		91 36		sta ($36),y			sta 	(zTemp0),y
.a198		88		dey				dey
.a199		b5 59		lda $59,x			lda 	NSMantissa0+1,x
.a19b		91 36		sta ($36),y			sta 	(zTemp0),y
.a19d		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignstring.asm

.a19e						AssignString:
.a19e		5a		phy				phy
.a19f		b5 59		lda $59,x			lda 	NSMantissa0+1,x
.a1a1		85 38		sta $38				sta 	zTemp1
.a1a3		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.a1a5		85 39		sta $39				sta 	zTemp1+1
.a1a7		b5 58		lda $58,x			lda 	NSMantissa0,x
.a1a9		85 36		sta $36				sta 	zTemp0
.a1ab		b5 60		lda $60,x			lda 	NSMantissa1,x
.a1ad		85 37		sta $37				sta 	zTemp0+1
.a1af		a0 01		ldy #$01			ldy 	#1 							; the high byte of the target address
.a1b1		b1 36		lda ($36),y			lda 	(zTemp0),y
.a1b3		f0 23		beq $a1d8			beq 	_ASNewStringRequired 		; if zero, a new string is required.
.a1b5		38		sec				sec 								; put Address-2 in zsTemp - this is the size/status/string record
.a1b6		b2 36		lda ($36)			lda 	(zTemp0) 					; of concreted strings
.a1b8		e9 02		sbc #$02			sbc 	#2
.a1ba		85 3c		sta $3c				sta 	zsTemp
.a1bc		a0 01		ldy #$01			ldy 	#1
.a1be		b1 36		lda ($36),y			lda 	(zTemp0),y
.a1c0		e9 00		sbc #$00			sbc 	#0
.a1c2		85 3d		sta $3d				sta 	zsTemp+1
.a1c4		a0 ff		ldy #$ff			ldy 	#$FF 						; get length of new string
.a1c6						_ASGetLength:
.a1c6		c8		iny				iny
.a1c7		b1 38		lda ($38),y			lda 	(zTemp1),y
.a1c9		d0 fb		bne $a1c6			bne 	_ASGetLength
.a1cb		98		tya				tya 								; is this length <= current length
.a1cc		d2 3c		cmp ($3c)			cmp 	(zsTemp)
.a1ce		90 1e		bcc $a1ee			bcc 	_ASCopyString
.a1d0		f0 1c		beq $a1ee			beq 	_ASCopyString
.a1d2		a9 80		lda #$80			lda 	#$80 						; mark as unused.
.a1d4		a0 01		ldy #$01			ldy 	#1
.a1d6		91 3c		sta ($3c),y			sta 	(zsTemp),y
.a1d8						_ASNewStringRequired:
.a1d8		e8		inx				inx 								; concrete the new string.
.a1d9		20 1e b3	jsr $b31e			jsr 	StringConcrete				; (breaks zTemp1/2, not zTemp0 and zsTemp)
.a1dc		ca		dex				dex
.a1dd		18		clc				clc
.a1de		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; copy that new address to the reference.
.a1e0		69 02		adc #$02			adc 	#2 							; add two to point at the data.
.a1e2		92 36		sta ($36)			sta 	(zTemp0)
.a1e4		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.a1e6		69 00		adc #$00			adc 	#0
.a1e8		a0 01		ldy #$01			ldy 	#1
.a1ea		91 36		sta ($36),y			sta 	(zTemp0),y
.a1ec		80 0d		bra $a1fb			bra 	_ASExit
.a1ee						_ASCopyString:
.a1ee		a0 00		ldy #$00			ldy 	#0
.a1f0						_ASCopyLoop:
.a1f0		b1 38		lda ($38),y			lda 	(zTemp1),y
.a1f2		c8		iny				iny
.a1f3		c8		iny				iny
.a1f4		91 3c		sta ($3c),y			sta 	(zsTemp),y
.a1f6		88		dey				dey
.a1f7		c9 00		cmp #$00			cmp 	#0
.a1f9		d0 f5		bne $a1f0			bne 	_ASCopyLoop
.a1fb						_ASExit:
.a1fb		7a		ply				ply
.a1fc		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/dereference.asm

.a1fd						DereferenceTopTwo:
.a1fd		e8		inx				inx
.a1fe		20 02 a2	jsr $a202			jsr 	Dereference 				; deref x+1
.a201		ca		dex				dex  								; falls through to deref x
.a202						Dereference:
.a202		b5 50		lda $50,x			lda 	NSStatus,x 					; get the status byte
.a204		29 20		and #$20			and 	#NSBIsReference 			; is it a reference
.a206		f0 48		beq $a250			beq 	_DRFExit 					; not a reference, so exit.
.a208		5a		phy				phy
.a209		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy address to dereference into zTemp0
.a20b		85 36		sta $36				sta 	zTemp0
.a20d		b5 60		lda $60,x			lda 	NSMantissa1,x
.a20f		85 37		sta $37				sta 	zTemp0+1
.a211		74 60		stz $60,x			stz 	NSMantissa1,x 				; clear second byte.
.a213		b2 36		lda ($36)			lda 	(zTemp0) 					; do the first byte
.a215		95 58		sta $58,x			sta 	NSMantissa0,x
.a217		b5 50		lda $50,x			lda 	NSStatus,x 					; get status byte.
.a219		29 18		and #$18			and 	#NSBTypeMask 				; what type is it ?
.a21b		c9 10		cmp #$10			cmp 	#NSTString 					; if string, dereference two
.a21d		f0 0e		beq $a22d			beq 	_DRFDereferenceTwo
.a21f		c9 08		cmp #$08			cmp 	#NSTFloat 					; if float, do full dereference.
.a221		f0 2f		beq $a252			beq 	_DRFFull
.a223		b5 50		lda $50,x			lda 	NSStatus,x 					; must be integer - how many bytes ?
.a225		29 03		and #$03			and 	#3
.a227		f0 29		beq $a252			beq 	_DRFFull 					; the whole word
.a229		c9 01		cmp #$01			cmp 	#1 							; is it 10 (e.g. 2 bytes)
.a22b		f0 06		beq $a233			beq		_DRFClear23 				; no, one byte, clear 2 & 3 and exit
.a22d						_DRFDereferenceTwo:
.a22d		a0 01		ldy #$01			ldy 	#1
.a22f		b1 36		lda ($36),y			lda 	(zTemp0),y
.a231		95 60		sta $60,x			sta 	NSMantissa1,x
.a233						_DRFClear23:
.a233		74 68		stz $68,x			stz 	NSMantissa2,x 				; clear upper bytes, only read 1 or 2 bytes
.a235		74 70		stz $70,x			stz 	NSMantissa3,x
.a237		b5 50		lda $50,x			lda 	NSStatus,x 					; make it a value of that type.
.a239		29 18		and #$18			and 	#NSBTypeMask
.a23b		95 50		sta $50,x			sta 	NSStatus,x 					; and fall through.
.a23d		c9 10		cmp #$10			cmp 	#NSTString  				; is it a string
.a23f		d0 0e		bne $a24f			bne 	_DRFNotString
.a241		b5 58		lda $58,x			lda 	NSMantissa0,x 				; check address is zero
.a243		15 60		ora $60,x			ora 	NSMantissa1,x
.a245		d0 08		bne $a24f			bne 	_DRFNotString
.a247		a9 51		lda #$51			lda 	#_DRFNullString & $FF 		; if so, return reference to ""
.a249		95 58		sta $58,x			sta 	NSMantissa0,x
.a24b		a9 a2		lda #$a2			lda 	#_DRFNullString >> 8
.a24d		95 60		sta $60,x			sta 	NSMantissa1,x
.a24f						_DRFNotString
.a24f		7a		ply				ply 								; restore Y and exit
.a250						_DRFExit:
.a250		60		rts				rts
.a251						_DRFNullString:
>a251		00						.byte 	0
.a252						_DRFFull:
.a252		a0 01		ldy #$01			ldy 	#1 							; get remaining 3 bytes.
.a254		b1 36		lda ($36),y			lda 	(zTemp0),y
.a256		95 60		sta $60,x			sta 	NSMantissa1,x
.a258		c8		iny				iny
.a259		b1 36		lda ($36),y			lda 	(zTemp0),y
.a25b		95 68		sta $68,x			sta 	NSMantissa2,x
.a25d		c8		iny				iny
.a25e		b1 36		lda ($36),y			lda 	(zTemp0),y
.a260		95 70		sta $70,x			sta 	NSMantissa3,x
.a262		74 78		stz $78,x			stz 	NSExponent,x 				; clear exponent.
.a264		b5 50		lda $50,x			lda		NSStatus,x 					; see if type is integer
.a266		29 18		and #$18			and 	#NSBTypeMask  				; type information only
.a268		95 50		sta $50,x			sta 	NSStatus,x 					; update it back.
.a26a		f0 05		beq $a271			beq 	_DRFNoExponent
.a26c		c8		iny				iny 								; if not, read the exponent as well.
.a26d		b1 36		lda ($36),y			lda 	(zTemp0),y
.a26f		95 78		sta $78,x			sta 	NSExponent,x
.a271						_DRFNoExponent:
.a271		b5 70		lda $70,x			lda 	NSMantissa3,x 				; is the most significant bit set ?
.a273		10 0a		bpl $a27f			bpl 	_DRFExit2 					; if not, then exit.
.a275		29 7f		and #$7f			and 	#$7F 						; clear that bit.
.a277		95 70		sta $70,x			sta 	NSMantissa3,x
.a279		b5 50		lda $50,x			lda 	NSStatus,x 					; set the sign flag
.a27b		09 80		ora #$80			ora 	#NSBIsNegative
.a27d		95 50		sta $50,x			sta 	NSStatus,x
.a27f						_DRFExit2:
.a27f		7a		ply				ply
.a280		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/number.asm

=1						ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2						ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3						ESTA_Decimal = 3 							; fractional part.
.a281						EncodeNumberStart:
.a281		38		sec				sec
.a282		80 01		bra $a285			bra 	EncodeNumberContinue+1
.a284						EncodeNumberContinue:
.a284		18		clc				clc
.a285						EncodeNumber:
.a285		08		php				php 								; save reset flag.
.a286		c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.a288		f0 12		beq $a29c			beq 	_ENIsOkay
.a28a		c9 30		cmp #$30			cmp 	#"0"
.a28c		90 04		bcc $a292			bcc 	_ENBadNumber
.a28e		c9 3a		cmp #$3a			cmp 	#"9"+1
.a290		90 0a		bcc $a29c			bcc 	_ENIsOkay
.a292						_ENBadNumber:
.a292		28		plp				plp 								; throw saved reset
.a293		ad 05 04	lda $0405			lda 	encodeState 				; if in decimal mode, construct final number
.a296		c9 03		cmp #$03			cmp 	#ESTA_Decimal
.a298		f0 7b		beq $a315			beq 	_ENConstructFinal
.a29a						_ENFail:
.a29a		18		clc				clc 								; not allowed
.a29b		60		rts				rts
.a29c						_ENIsOkay:
.a29c		28		plp				plp 								; are we restarting
.a29d		90 15		bcc $a2b4			bcc 	_ENNoRestart
.a29f						_ENStartEncode:
.a29f		c9 2e		cmp #$2e			cmp 	#'.'						; first is decimal place, go straight to that.
.a2a1		f0 0c		beq $a2af			beq 	_ENFirstDP
.a2a3		29 0f		and #$0f			and 	#15 						; put digit in mantissa, initially a single digit constant
.a2a5		20 97 a9	jsr $a997			jsr 	NSMSetByte 					; in single byte mode.
.a2a8		a9 01		lda #$01			lda 	#ESTA_Low
.a2aa						_ENExitChange:
.a2aa		8d 05 04	sta $0405			sta 	encodeState 				; save new state
.a2ad		38		sec				sec
.a2ae		60		rts				rts
.a2af						_ENFirstDP:
.a2af		20 95 a9	jsr $a995			jsr 	NSMSetZero 					; clear integer part
.a2b2		80 3c		bra $a2f0			bra 	_ESTASwitchFloat			; go straight to float and exi
.a2b4						_ENNoRestart:
.a2b4		48		pha				pha 								; save digit or DP on stack.
.a2b5		ad 05 04	lda $0405			lda 	encodeState 				; get current state
.a2b8		c9 01		cmp #$01			cmp 	#ESTA_Low
.a2ba		f0 09		beq $a2c5			beq  	_ESTALowState
.a2bc		c9 02		cmp #$02			cmp 	#ESTA_High
.a2be		f0 26		beq $a2e6			beq 	_ESTAHighState
.a2c0		c9 03		cmp #$03			cmp 	#ESTA_Decimal
.a2c2		f0 38		beq $a2fc			beq 	_ESTADecimalState
>a2c4		db						.byte 	$DB 						; causes a break in the emulator
.a2c5						_ESTALowState:
.a2c5		68		pla				pla 								; get value back
.a2c6		c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.a2c8		f0 26		beq $a2f0			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.a2ca		29 0f		and #$0f			and 	#15 						; make digit
.a2cc		8d 06 04	sta $0406			sta 	digitTemp 					; save it.
.a2cf		b5 58		lda $58,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.a2d1		0a		asl a				asl 	a
.a2d2		0a		asl a				asl 	a
.a2d3		75 58		adc $58,x			adc 	NSMantissa0,x
.a2d5		0a		asl a				asl 	a
.a2d6		6d 06 04	adc $0406			adc 	digitTemp
.a2d9		95 58		sta $58,x			sta 	NSMantissa0,x
.a2db		c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.a2dd		90 05		bcc $a2e4			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.a2df		a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.a2e1		8d 05 04	sta $0405			sta 	encodeState
.a2e4						_ESTANoSwitch:
.a2e4		38		sec				sec
.a2e5		60		rts				rts
.a2e6						_ESTAHighState:
.a2e6		68		pla				pla 								; get value back
.a2e7		c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.a2e9		f0 05		beq $a2f0			beq 	_ESTASwitchFloat
.a2eb		20 49 a3	jsr $a349			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.a2ee		38		sec				sec
.a2ef		60		rts				rts
.a2f0						_ESTASwitchFloat:
.a2f0		9c 07 04	stz $0407			stz 	decimalCount 				; reset the count of digits - we divide by 10^n at the end.
.a2f3		e8		inx				inx 								; zero the decimal additive.
.a2f4		20 95 a9	jsr $a995			jsr 	NSMSetZero
.a2f7		ca		dex				dex
.a2f8		a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.a2fa		80 ae		bra $a2aa			bra 	_ENExitChange
.a2fc						_ESTADecimalState:
.a2fc		68		pla				pla 								; digit.
.a2fd		c9 2e		cmp #$2e			cmp 	#"." 						; fail on 2nd decimal point.
.a2ff		f0 99		beq $a29a			beq 	_ENFail
.a301		e8		inx				inx 								; put digit into fractional part of X+1
.a302		20 49 a3	jsr $a349			jsr 	ESTAShiftDigitIntoMantissa
.a305		ca		dex				dex
.a306		ee 07 04	inc $0407			inc 	decimalCount 				; bump the count of decimals
.a309		ad 07 04	lda $0407			lda 	decimalCount 				; too many decimal digits.
.a30c		c9 0b		cmp #$0b			cmp 	#11
.a30e		f0 02		beq $a312			beq 	_ESTADSFail
.a310		38		sec				sec
.a311		60		rts				rts
.a312						_ESTADSFail:
.a312		4c 36 ac	jmp $ac36			jmp 	RangeError
.a315						_ENConstructFinal:
.a315		ad 07 04	lda $0407			lda 	decimalCount 				; get decimal count
.a318		f0 2d		beq $a347			beq 	_ENCFExit 					; no decimals
.a31a		5a		phy				phy
.a31b		0a		asl a				asl 	a 							; x 4 and CLC
.a31c		0a		asl a				asl 	a
.a31d		6d 07 04	adc $0407			adc 	decimalCount
.a320		a8		tay				tay
.a321		b9 f5 ab	lda $abf5,y			lda 	DecimalScalarTable-5,y 		; copy decimal scalar to X+2
.a324		95 5a		sta $5a,x			sta 	NSMantissa0+2,x  			; this is 10^-n
.a326		b9 f6 ab	lda $abf6,y			lda 	DecimalScalarTable-5+1,y
.a329		95 62		sta $62,x			sta 	NSMantissa1+2,x
.a32b		b9 f7 ab	lda $abf7,y			lda 	DecimalScalarTable-5+2,y
.a32e		95 6a		sta $6a,x			sta 	NSMantissa2+2,x
.a330		b9 f8 ab	lda $abf8,y			lda 	DecimalScalarTable-5+3,y
.a333		95 72		sta $72,x			sta 	NSMantissa3+2,x
.a335		b9 f9 ab	lda $abf9,y			lda 	DecimalScalarTable-5+4,y
.a338		95 7a		sta $7a,x			sta 	NSExponent+2,x
.a33a		a9 08		lda #$08			lda 	#NSTFloat
.a33c		95 52		sta $52,x			sta 	NSStatus+2,x
.a33e		7a		ply				ply
.a33f		e8		inx				inx 								; multiply decimal const by decimal scalar
.a340		20 cf a0	jsr $a0cf			jsr 	FloatMultiply
.a343		ca		dex				dex
.a344		20 8a 9f	jsr $9f8a			jsr 	FloatAdd 					; add to integer part.
.a347						_ENCFExit:
.a347		18		clc				clc 								; reject the digit.
.a348		60		rts				rts
.a349						ESTAShiftDigitIntoMantissa:
.a349		29 0f		and #$0f			and 	#15 						; save digit
.a34b		48		pha				pha
.a34c		b5 70		lda $70,x			lda 	NSMantissa3,x 				; push mantissa on stack
.a34e		48		pha				pha
.a34f		b5 68		lda $68,x			lda 	NSMantissa2,x
.a351		48		pha				pha
.a352		b5 60		lda $60,x			lda 	NSMantissa1,x
.a354		48		pha				pha
.a355		b5 58		lda $58,x			lda 	NSMantissa0,x
.a357		48		pha				pha
.a358		20 a4 a9	jsr $a9a4			jsr 	NSMShiftLeft 				; x 2
.a35b		20 a4 a9	jsr $a9a4			jsr 	NSMShiftLeft 				; x 4
.a35e		18		clc				clc 								; pop mantissa and add
.a35f		68		pla				pla
.a360		75 58		adc $58,x			adc 	NSMantissa0,x
.a362		95 58		sta $58,x			sta 	NSMantissa0,x
.a364		68		pla				pla
.a365		75 60		adc $60,x			adc 	NSMantissa1,x
.a367		95 60		sta $60,x			sta 	NSMantissa1,x
.a369		68		pla				pla
.a36a		75 68		adc $68,x			adc 	NSMantissa2,x
.a36c		95 68		sta $68,x			sta 	NSMantissa2,x
.a36e		68		pla				pla
.a36f		75 70		adc $70,x			adc 	NSMantissa3,x
.a371		95 70		sta $70,x			sta 	NSMantissa3,x 				; x 5
.a373		20 a4 a9	jsr $a9a4			jsr 	NSMShiftLeft 				; x 10
.a376		68		pla				pla 								; add digit
.a377		18		clc				clc
.a378		75 58		adc $58,x			adc 	NSMantissa0,x
.a37a		95 58		sta $58,x			sta 	NSMantissa0,x
.a37c		90 0a		bcc $a388			bcc 	_ESTASDExit
.a37e		f6 60		inc $60,x			inc 	NSMantissa1,x
.a380		d0 06		bne $a388			bne 	_ESTASDExit
.a382		f6 68		inc $68,x			inc 	NSMantissa2,x
.a384		d0 02		bne $a388			bne 	_ESTASDExit
.a386		f6 70		inc $70,x			inc 	NSMantissa3,x
.a388						_ESTASDExit:
.a388		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/term.asm

.a389						EvaluateTerm:
.a389		b1 30		lda ($30),y			lda 	(codePtr),y
.a38b		30 18		bmi $a3a5			bmi 	_ETCheckUnary 				; unary function ? (text ones)
.a38d		c9 40		cmp #$40			cmp 	#$40 						; 40-7F => identifier reference
.a38f		b0 6c		bcs $a3fd			bcs 	_ETVariable
.a391		c9 30		cmp #$30			cmp 	#'0' 						; is it a number
.a393		90 6b		bcc $a400			bcc 	_ETPuncUnary 				; if not it might be a punctuation unary.
.a395		c9 3a		cmp #$3a			cmp 	#'9'+1
.a397		b0 67		bcs $a400			bcs 	_ETPuncUnary
.a399		20 81 a2	jsr $a281			jsr 	EncodeNumberStart 			; can't fail as it's 0-9 !
.a39c						_ETNumber:
.a39c		c8		iny				iny 								; keep encoding until we have the numbers
.a39d		b1 30		lda ($30),y			lda 	(codePtr),y
.a39f		20 84 a2	jsr $a284			jsr 	EncodeNumberContinue
.a3a2		b0 f8		bcs $a39c			bcs 	_ETNumber 					; go back if accepted.
.a3a4		60		rts				rts
.a3a5						_ETCheckUnary:
.a3a5		c9 ff		cmp #$ff			cmp 	#KWC_STRING 				; string token
.a3a7		f0 3f		beq $a3e8			beq 	_ETString
.a3a9		c9 fe		cmp #$fe			cmp 	#KWC_HEXCONST 				; hex constant.
.a3ab		f0 12		beq $a3bf			beq 	_ETHexConstant
.a3ad		c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; check it actually is a unary function
.a3af		90 0b		bcc $a3bc			bcc 	_ETSyntaxError
.a3b1		c9 ad		cmp #$ad			cmp 	#KWC_LAST_UNARY+1
.a3b3		b0 07		bcs $a3bc			bcs 	_ETSyntaxError
.a3b5		da		phx				phx 								; push X on the stack
.a3b6		0a		asl a				asl 	a 							; put vector x 2 into X
.a3b7		aa		tax				tax
.a3b8		c8		iny				iny 								; consume unary function token
.a3b9		7c a0 96	jmp ($96a0,x)			jmp 	(VectorSet0,x) 				; and do it.
.a3bc						_ETSyntaxError:
.a3bc		4c 31 ac	jmp $ac31			jmp 	SyntaxError
.a3bf						_ETHexConstant:
.a3bf		c8		iny				iny 								; skip #
.a3c0		c8		iny				iny 								; skip count
.a3c1		20 95 a9	jsr $a995			jsr 	NSMSetZero 					; clear result
.a3c4						_ETHLoop:
.a3c4		b1 30		lda ($30),y			lda 	(codePtr),y
.a3c6		c8		iny				iny 								; and consume
.a3c7		c9 00		cmp #$00			cmp 	#0 							; exit if zero
.a3c9		f0 1c		beq $a3e7			beq 	_ETHExit
.a3cb		48		pha				pha 								; save on stack.
.a3cc		20 a4 a9	jsr $a9a4			jsr 	NSMShiftLeft 				; x 2
.a3cf		20 a4 a9	jsr $a9a4			jsr 	NSMShiftLeft 				; x 4
.a3d2		20 a4 a9	jsr $a9a4			jsr 	NSMShiftLeft 				; x 8
.a3d5		20 a4 a9	jsr $a9a4			jsr 	NSMShiftLeft 				; x 16
.a3d8		68		pla				pla 								; ASCII
.a3d9		c9 41		cmp #$41			cmp 	#'A'
.a3db		90 02		bcc $a3df			bcc 	_ETHNotChar
.a3dd		e9 07		sbc #$07			sbc 	#7
.a3df						_ETHNotChar:
.a3df		29 0f		and #$0f			and 	#15 						; digit now
.a3e1		15 58		ora $58,x			ora 	NSMantissa0,x 				; put in LS Nibble
.a3e3		95 58		sta $58,x			sta 	NSMantissa0,x
.a3e5		80 dd		bra $a3c4			bra 	_ETHLoop 					; go round.
.a3e7						_ETHExit:
.a3e7		60		rts				rts
.a3e8						_ETString:
.a3e8		c8		iny				iny 								; look at length
.a3e9		b1 30		lda ($30),y			lda 	(codePtr),y
.a3eb		48		pha				pha
.a3ec		c8		iny				iny 								; first character
.a3ed		20 b8 ae	jsr $aeb8			jsr 	MemoryInline 				; put address of string at (code-Ptr),y on stack
.a3f0		68		pla				pla 								; restore count and save
.a3f1		85 36		sta $36				sta 	zTemp0
.a3f3		98		tya				tya 								; add length to Y to skip it.
.a3f4		18		clc				clc
.a3f5		65 36		adc $36				adc 	zTemp0
.a3f7		a8		tay				tay
.a3f8		a9 10		lda #$10			lda 	#NSTString 					; mark as string
.a3fa		95 50		sta $50,x			sta 	NSStatus,x
.a3fc		60		rts				rts
.a3fd						_ETVariable:
.a3fd		4c 52 a4	jmp $a452			jmp 	VariableHandler
.a400						_ETPuncUnary:
.a400		c8		iny				iny 								; consume the unary character
.a401		c9 2d		cmp #$2d			cmp 	#KWD_MINUS 					; unary minus
.a403		f0 2b		beq $a430			beq 	_ETUnaryNegate
.a405		c9 b8		cmp #$b8			cmp 	#KWD_AT 					; @ reference -> constant
.a407		f0 36		beq $a43f			beq 	_ETDereference
.a409		c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; parenthesis
.a40b		f0 3e		beq $a44b			beq 	_ETParenthesis
.a40d		64 36		stz $36				stz 	zTemp0 						; zTemp0 is the indirection level.
.a40f		c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; byte indirection (0) ?
.a411		f0 06		beq $a419			beq 	_ETIndirection
.a413		e6 36		inc $36				inc 	zTemp0
.a415		c9 21		cmp #$21			cmp 	#KWD_PLING					; word indirection (1) \
.a417		d0 a3		bne $a3bc			bne 	_ETSyntaxError
.a419						_ETIndirection:
.a419		a5 36		lda $36				lda 	zTemp0 						; push indirection amount (0-1) => (1-2) on the stack
.a41b		1a		inc a				inc 	a
.a41c		48		pha				pha
.a41d		20 89 a3	jsr $a389			jsr 	EvaluateTerm				; evaluate the term
.a420		20 02 a2	jsr $a202			jsr 	Dereference 				; dereference it.
.a423		b5 50		lda $50,x			lda 	NSStatus,x 					; must be a +ve integer.
.a425		d0 06		bne $a42d			bne 	_ETTypeMismatch
.a427		68		pla				pla 								; indirection 1-2
.a428		09 20		ora #$20			ora 	#NSBIsReference 			; make it a reference.
.a42a		95 50		sta $50,x			sta 	NSStatus,x
.a42c		60		rts				rts
.a42d						_ETTypeMismatch:
.a42d		4c 3b ac	jmp $ac3b			jmp 	TypeError
.a430						_ETUnaryNegate:
.a430		20 89 a3	jsr $a389			jsr 	EvaluateTerm				; evaluate the term
.a433		20 02 a2	jsr $a202			jsr 	Dereference 				; dereference it.
.a436		b5 50		lda $50,x			lda 	NSStatus,x 					; must be a number
.a438		29 10		and #$10			and 	#NSTString
.a43a		d0 f1		bne $a42d			bne 	_ETTypeMismatch
.a43c		4c 57 a9	jmp $a957			jmp 	NSMNegate  					; just toggles the sign bit.
.a43f						_ETDereference:
.a43f		20 89 a3	jsr $a389			jsr 	EvaluateTerm				; evaluate the term
.a442		b5 50		lda $50,x			lda 	NSStatus,x 					; must be a reference
.a444		29 20		and #$20			and 	#NSBIsReference
.a446		f0 e5		beq $a42d			beq 	_ETTypeMismatch
.a448		74 50		stz $50,x			stz 	NSStatus,x 					; make it an integer address
.a44a		60		rts				rts
.a44b						_ETParenthesis:
.a44b		20 3f 9f	jsr $9f3f			jsr 	EvaluateExpression 			; evaluate here, from lowest precedence
.a44e		20 1c 9a	jsr $9a1c			jsr 	CheckRightBracket 			; check for )
.a451		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/variable.asm

.a452						VariableHandler:
.a452		b1 30		lda ($30),y			lda 	(codePtr),y
.a454		18		clc				clc
.a455		69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.a457		85 37		sta $37				sta 	zTemp0+1
.a459		c8		iny				iny
.a45a		b1 30		lda ($30),y			lda 	(codePtr),y
.a45c		85 36		sta $36				sta 	zTemp0
.a45e		c8		iny				iny
.a45f		18		clc				clc									; copy variable address+3 to mantissa
.a460		69 03		adc #$03			adc 	#3 							; this is the address of the data.
.a462		95 58		sta $58,x			sta 	NSMantissa0,x
.a464		a5 37		lda $37				lda 	zTemp0+1
.a466		69 00		adc #$00			adc 	#0
.a468		95 60		sta $60,x			sta 	NSMantissa1,x
.a46a		74 68		stz $68,x			stz 	NSMantissa2,x
.a46c		74 70		stz $70,x			stz 	NSMantissa3,x
.a46e		74 78		stz $78,x			stz 	NSExponent,x
.a470		5a		phy				phy
.a471		a0 02		ldy #$02			ldy 	#2 							; read type
.a473		b1 36		lda ($36),y			lda 	(zTemp0),y
.a475		7a		ply				ply
.a476		29 1c		and #$1c			and 	#NSBTypeMask+NSBIsArray 	; get type information
.a478		09 20		ora #$20			ora 	#NSBIsReference 			; make a reference.
.a47a		95 50		sta $50,x			sta 	NSStatus,x
.a47c		29 04		and #$04			and 	#NSBIsArray
.a47e		d0 01		bne $a481			bne 	_VHArray
.a480		60		rts				rts
.a481						_VHArray:
.a481		e8		inx				inx
.a482		20 30 a9	jsr $a930			jsr 	Evaluate8BitInteger 		; get the 1st index.
.a485		a9 ff		lda #$ff			lda 	#$FF 						; set Status of X+2 to a duff value so we know if we picked it up.
.a487		95 51		sta $51,x			sta 	NSStatus+1,x
.a489		b1 30		lda ($30),y			lda 	(codePtr),y
.a48b		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.a48d		d0 06		bne $a495			bne 	_VHNoSecondIndex
.a48f		c8		iny				iny 								; skip the comma
.a490		e8		inx				inx
.a491		20 30 a9	jsr $a930			jsr 	Evaluate8BitInteger 		; get the 2nd index.
.a494		ca		dex				dex
.a495						_VHNoSecondIndex:
.a495		ca		dex				dex 								; set X back.
.a496		20 1c 9a	jsr $9a1c			jsr 	CheckRightBracket 			; and check the right bracket.
.a499		5a		phy				phy 								; save position
.a49a		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy record address to zaTemp (moved 6/12/22)
.a49c		85 3e		sta $3e				sta 	zaTemp
.a49e		b5 60		lda $60,x			lda 	NSMantissa1,x
.a4a0		85 3f		sta $3f				sta 	zaTemp+1
.a4a2		a0 02		ldy #$02			ldy 	#2 							; check first index is not-zero, e.g. array defined
.a4a4		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a4a6		f0 5d		beq $a505			beq 	_VHBadArray
.a4a8		a0 03		ldy #$03			ldy 	#3 							; get the second index - which is 0 if there is one index.
.a4aa		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a4ac		f0 02		beq $a4b0			beq 	_VHHas2Mask
.a4ae		a9 ff		lda #$ff			lda 	#$FF
.a4b0						_VHHas2Mask:
.a4b0		d5 52		cmp $52,x			cmp 	NSStatus+2,x 				; so if they are the same there are the wrong number of indices
.a4b2		f0 4c		beq $a500			beq 	_VHBadIndex
.a4b4		0a		asl a				asl 	a 							; carry will be set if a second index
.a4b5		90 08		bcc $a4bf			bcc 	_VHCheckFirstIndex
.a4b7		a0 03		ldy #$03			ldy 	#3 			 				; check the 2nd size >= 2nd index
.a4b9		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a4bb		d5 5a		cmp $5a,x			cmp 	NSMantissa0+2,x
.a4bd		90 41		bcc $a500			bcc 	_VHBadIndex
.a4bf						_VHCheckFirstIndex:
.a4bf		a0 02		ldy #$02			ldy 	#2 			 				; check the 2nd size >= 2nd index
.a4c1		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a4c3		d5 59		cmp $59,x			cmp 	NSMantissa0+1,x
.a4c5		90 39		bcc $a500			bcc 	_VHBadIndex
.a4c7		64 36		stz $36				stz 	zTemp0 						; clear zTemp0 (if 1 index)
.a4c9		64 37		stz $37				stz 	zTemp0+1
.a4cb		b5 52		lda $52,x			lda 	NSStatus+2,x 				; if only one index provided, don't need to multiply
.a4cd		30 0e		bmi $a4dd			bmi 	_VHNoMultiply
.a4cf		da		phx				phx
.a4d0		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; get 2nd index on stack
.a4d2		48		pha				pha
.a4d3		a0 02		ldy #$02			ldy 	#2 							; get 1st size in A
.a4d5		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a4d7		1a		inc a				inc 	a 							; add 1 for zero base
.a4d8		fa		plx				plx
.a4d9		20 40 a9	jsr $a940			jsr 	Multiply8x8 				; calculate -> Z0
.a4dc		fa		plx				plx
.a4dd						_VHNoMultiply:
.a4dd		18		clc				clc
.a4de		a5 36		lda $36				lda 	zTemp0
.a4e0		75 59		adc $59,x			adc 	NSMantissa0+1,x
.a4e2		85 36		sta $36				sta 	zTemp0
.a4e4		a5 37		lda $37				lda 	zTemp0+1
.a4e6		69 00		adc #$00			adc 	#0
.a4e8		85 37		sta $37				sta 	zTemp0+1
.a4ea		b5 50		lda $50,x			lda 	NSStatus,x
.a4ec		20 2a 89	jsr $892a			jsr 	ScaleByBaseType
.a4ef		18		clc				clc
.a4f0		b2 3e		lda ($3e)			lda 	(zaTemp)
.a4f2		65 36		adc $36				adc 	zTemp0
.a4f4		95 58		sta $58,x			sta 	NSMantissa0,x
.a4f6		a0 01		ldy #$01			ldy 	#1
.a4f8		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a4fa		65 37		adc $37				adc 	zTemp0+1
.a4fc		95 60		sta $60,x			sta 	NSMantissa1,x
.a4fe		7a		ply				ply 								; restore position
.a4ff		60		rts				rts
.a500						_VHBadIndex:
.a500		a9 17		lda #$17		lda	#23
.a502		4c 35 9a	jmp $9a35		jmp	ErrorHandler
.a505						_VHBadArray:
.a505		a9 18		lda #$18		lda	#24
.a507		4c 35 9a	jmp $9a35		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/abs.asm

.a50a						AbsUnary:
.a50a		fa		plx				plx 								; restore stack pos
.a50b		20 e3 a8	jsr $a8e3			jsr 	EvaluateNumber 				; get a float or int
.a50e		20 1c 9a	jsr $9a1c			jsr 	CheckRightBracket
.a511		b5 50		lda $50,x			lda 	NSStatus,x 					; clear the sign bit
.a513		29 7f		and #$7f			and 	#$7F
.a515		95 50		sta $50,x			sta 	NSStatus,x
.a517		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/alloc.asm

.a518						AllocUnary:
.a518		fa		plx				plx 								; restore stack pos
.a519		20 15 a9	jsr $a915			jsr 	Evaluate16BitInteger		; get bytes required.
.a51c		20 1c 9a	jsr $9a1c			jsr 	CheckRightBracket
.a51f		da		phx				phx 								; save X/Y
.a520		5a		phy				phy
.a521		8a		txa				txa 								; copy X into Y
.a522		a8		tay				tay
.a523		b9 60 00	lda $0060,y			lda		NSMantissa1,y 				; get size into XA
.a526		aa		tax				tax
.a527		b9 58 00	lda $0058,y			lda 	NSMantissa0,y
.a52a		20 37 a5	jsr $a537			jsr 	AllocateXABytes 			; allocate memory
.a52d		99 58 00	sta $0058,y			sta 	NSMantissa0,y 				; write address out.
.a530		8a		txa				txa 	 							; typing is 16 bit integer.
.a531		99 60 00	sta $0060,y			sta 	NSMantissa1,y
.a534		7a		ply				ply
.a535		fa		plx				plx
.a536		60		rts				rts
.a537						AllocateXABytes:
.a537		5a		phy				phy
.a538		ac 08 04	ldy $0408			ldy 	lowMemPtr 					; push current address on stack and to zTemp0
.a53b		84 36		sty $36				sty 	zTemp0
.a53d		5a		phy				phy
.a53e		ac 09 04	ldy $0409			ldy 	lowMemPtr+1
.a541		84 37		sty $37				sty 	zTemp0+1
.a543		5a		phy				phy
.a544		18		clc				clc 								; add to low memory pointer
.a545		6d 08 04	adc $0408			adc 	lowMemPtr
.a548		8d 08 04	sta $0408			sta 	lowMemPtr
.a54b		8a		txa				txa
.a54c		6d 09 04	adc $0409			adc 	lowMemPtr+1
.a54f		8d 09 04	sta $0409			sta 	lowMemPtr+1
.a552		b0 2f		bcs $a583			bcs 	CISSMemory
.a554		20 75 a5	jsr $a575			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.a557						_ClearMemory:
.a557		ad 08 04	lda $0408			lda 	lowMemPtr 					; cleared all memory allocated
.a55a		c5 36		cmp $36				cmp 	zTemp0
.a55c		d0 07		bne $a565			bne 	_CMClearNext
.a55e		ad 09 04	lda $0409			lda 	lowMemPtr+1
.a561		c5 37		cmp $37				cmp 	zTemp0+1
.a563		f0 0c		beq $a571			beq 	_CMExit
.a565						_CMClearNext:
.a565		a9 00		lda #$00			lda 	#0 							; clear byte, advance to next.
.a567		92 36		sta ($36)			sta 	(zTemp0)
.a569		e6 36		inc $36				inc 	zTemp0
.a56b		d0 ea		bne $a557			bne 	_ClearMemory
.a56d		e6 37		inc $37				inc		zTemp0+1
.a56f		80 e6		bra $a557			bra 	_ClearMemory
.a571						_CMExit:
.a571		fa		plx				plx
.a572		68		pla				pla
.a573		7a		ply				ply
.a574		60		rts				rts
.a575						CheckIdentifierStringSpace:
.a575		48		pha				pha
.a576		ad 09 04	lda $0409			lda 	lowMemPtr+1 				; get low memory pointer
.a579		18		clc				clc
.a57a		69 02		adc #$02			adc 	#2 							; need at least 2 256 byte pages
.a57c		cd 0b 04	cmp $040b			cmp 	stringMemory+1 				; is it >= StringMemory
.a57f		b0 02		bcs $a583			bcs 	CISSMemory
.a581		68		pla				pla
.a582		60		rts				rts
.a583						CISSMemory:
.a583		a9 06		lda #$06		lda	#6
.a585		4c 35 9a	jmp $9a35		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/asc.asm

.a588						AscUnary:
.a588		fa		plx				plx 								; restore stack pos
.a589		20 ed a8	jsr $a8ed			jsr 	EvaluateString 				; get a string
.a58c		b2 36		lda ($36)			lda 	(zTemp0)					; get/return first character
.a58e		20 97 a9	jsr $a997			jsr 	NSMSetByte 					; ASC("") will return zero.
.a591		20 1c 9a	jsr $9a1c			jsr 	CheckRightBracket
.a594		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/frac.asm

.a595						FracUnary:
.a595		fa		plx				plx 								; restore stack pos
.a596		20 e3 a8	jsr $a8e3			jsr 	EvaluateNumber 				; get a float or int
.a599		20 1c 9a	jsr $9a1c			jsr 	CheckRightBracket
.a59c		b5 50		lda $50,x			lda 	NSStatus,x
.a59e		29 08		and #$08			and 	#NSTFloat 					; check it is a float
.a5a0		f0 04		beq $a5a6			beq 	_IUZero
.a5a2		20 50 a0	jsr $a050			jsr 	FloatFractionalPart 		; if so, get the fractional part.
.a5a5		60		rts				rts
.a5a6						_IUZero:
.a5a6		20 95 a9	jsr $a995			jsr 	NSMSetZero
.a5a9		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/int.asm

.a5aa						IntUnary:
.a5aa		fa		plx				plx 								; restore stack pos
.a5ab		20 e3 a8	jsr $a8e3			jsr 	EvaluateNumber 				; get a float or int
.a5ae		20 1c 9a	jsr $9a1c			jsr 	CheckRightBracket
.a5b1		b5 50		lda $50,x			lda 	NSStatus,x
.a5b3		29 08		and #$08			and 	#NSTFloat 					; check it is a float
.a5b5		f0 03		beq $a5ba			beq 	_IUExit
.a5b7		20 a8 a0	jsr $a0a8			jsr 	FloatIntegerPart 			; if it is get the integer part.
.a5ba						_IUExit:
.a5ba		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/len.asm

.a5bb						LenUnary:
.a5bb		fa		plx				plx 								; restore stack pos
.a5bc		20 ed a8	jsr $a8ed			jsr 	EvaluateString 				; get a string
.a5bf		5a		phy				phy
.a5c0		a0 00		ldy #$00			ldy 	#0 							; find length
.a5c2						_LenFind:
.a5c2		b1 36		lda ($36),y			lda 	(zTemp0),y 					; look for trailing NULL.
.a5c4		f0 06		beq $a5cc			beq 	_LenExit
.a5c6		c8		iny				iny
.a5c7		d0 f9		bne $a5c2			bne 	_LenFind
.a5c9		4c 36 ac	jmp $ac36			jmp 	RangeError 					; string > 255 - no trailing NULL.
.a5cc						_LenExit:
.a5cc		98		tya				tya		 							; return length
.a5cd		20 97 a9	jsr $a997			jsr 	NSMSetByte
.a5d0		7a		ply				ply
.a5d1		20 1c 9a	jsr $9a1c			jsr 	CheckRightBracket
.a5d4		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/minmax.asm

.a5d5						Unary_Min:
.a5d5		a9 01		lda #$01			lda 	#1
.a5d7		80 02		bra $a5db			bra 	UnaryMinMaxMain
.a5d9						Unary_Max:
.a5d9		a9 ff		lda #$ff			lda 	#$FF 						; value from comparator to cause a write
.a5db						UnaryMinMaxMain:
.a5db		fa		plx				plx 								; get index on number stack
.a5dc		48		pha				pha 								; save comparator
.a5dd		20 da a8	jsr $a8da			jsr 	EvaluateValue 				; get the first value.
.a5e0						_UMMMLoop:
.a5e0		b1 30		lda ($30),y			lda 	(codePtr),y
.a5e2		c9 29		cmp #$29			cmp 	#KWD_RPAREN 				; if right bracket then done.
.a5e4		f0 22		beq $a608			beq 	_UMMMDone
.a5e6		20 24 9a	jsr $9a24			jsr 	CheckComma 					; must be a comma
.a5e9		e8		inx				inx
.a5ea		20 da a8	jsr $a8da			jsr 	EvaluateValue
.a5ed		ca		dex				dex
.a5ee		20 78 a9	jsr $a978			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] (Compare is destructive)
.a5f1		e8		inx				inx
.a5f2		20 78 a9	jsr $a978			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2], original
.a5f5		e8		inx				inx
.a5f6		20 f2 9a	jsr $9af2			jsr 	CompareBaseCode 			; part of > = < etc. code, returns 255,0 or 1
.a5f9		ca		dex				dex
.a5fa		ca		dex				dex
.a5fb		85 36		sta $36				sta 	zTemp0 						; save required result
.a5fd		68		pla				pla 								; get and save comparator
.a5fe		48		pha				pha
.a5ff		c5 36		cmp $36				cmp 	zTemp0 						; if the comparator
.a601		d0 dd		bne $a5e0			bne 	_UMMMLoop
.a603		20 0b a6	jsr $a60b			jsr 	ExpCopyAboveDown 			; copy next up slot down
.a606		80 d8		bra $a5e0			bra 	_UMMMLoop
.a608						_UMMMDone:
.a608		68		pla				pla 								; throw the comparator
.a609		c8		iny				iny 								; skip )
.a60a		60		rts				rts
.a60b						ExpCopyAboveDown:
.a60b		b5 51		lda $51,x			lda 	NSStatus+1,x
.a60d		95 50		sta $50,x			sta 	NSStatus,x
.a60f		b5 79		lda $79,x			lda 	NSExponent+1,x
.a611		95 78		sta $78,x			sta 	NSExponent,x
.a613		b5 59		lda $59,x			lda 	NSMantissa0+1,x
.a615		95 58		sta $58,x			sta 	NSMantissa0,x
.a617		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.a619		95 60		sta $60,x			sta 	NSMantissa1,x
.a61b		b5 69		lda $69,x			lda 	NSMantissa2+1,x
.a61d		95 68		sta $68,x			sta 	NSMantissa2,x
.a61f		b5 71		lda $71,x			lda 	NSMantissa3+1,x
.a621		95 70		sta $70,x			sta 	NSMantissa3,x
.a623		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/not.asm

.a624						Unary_Not:
.a624		fa		plx				plx
.a625		20 02 a9	jsr $a902			jsr 	EvaluateInteger 			; get integer
.a628		20 1c 9a	jsr $9a1c			jsr 	CheckRightBracket
.a62b		20 b7 a9	jsr $a9b7			jsr 	NSMIsZero 					; zero mantissa ?
.a62e		f0 04		beq $a634			beq 	_NotZero
.a630		20 95 a9	jsr $a995			jsr 	NSMSetZero
.a633		60		rts				rts
.a634						_NotZero:
.a634		4c a8 9a	jmp $9aa8			jmp 	ReturnTrue

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/peek.asm

.a637						PeekByteUnary:
.a637		a9 01		lda #$01			lda 	#1
.a639		80 0a		bra $a645			bra 	PeekUnary
.a63b						PeekWUnary:
.a63b		a9 02		lda #$02			lda 	#2
.a63d		80 06		bra $a645			bra 	PeekUnary
.a63f						PeekLUnary:
.a63f		a9 03		lda #$03			lda 	#3
.a641		80 02		bra $a645			bra 	PeekUnary
.a643						PeekDUnary:
.a643		a9 04		lda #$04			lda 	#4
.a645						PeekUnary:
.a645		fa		plx				plx 								; restore position.
.a646		48		pha				pha 								; save count to copy on stack
.a647		20 15 a9	jsr $a915			jsr		Evaluate16BitInteger 		; address as constant.
.a64a		20 1c 9a	jsr $9a1c			jsr 	CheckRightBracket
.a64d		b5 58		lda $58,x			lda 	NSMantissa0,x 				; save mantissa in zTemp0 as address
.a64f		85 36		sta $36				sta 	zTemp0
.a651		b5 60		lda $60,x			lda 	NSMantissa1,x
.a653		85 37		sta $37				sta 	zTemp0+1
.a655		20 95 a9	jsr $a995			jsr 	NSMSetZero 					; clear the result to zero.
.a658		68		pla				pla 								; count in zTemp2
.a659		85 3a		sta $3a				sta 	zTemp2
.a65b		da		phx				phx 								; save stack position and offset of read
.a65c		5a		phy				phy
.a65d		a0 00		ldy #$00			ldy 	#0 							; byte read offset.
.a65f						_PULoop:
.a65f		b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next byte, write to mantissa0,x
.a661		95 58		sta $58,x			sta 	NSMantissa0,x 				; we change X not the index before it.
.a663		c8		iny				iny 								; next byte to write
.a664		8a		txa				txa 								; next byte to read - stack layout in 04data.inc
.a665		18		clc				clc
.a666		69 08		adc #$08			adc 	#MathStackSize
.a668		aa		tax				tax
.a669		c6 3a		dec $3a				dec 	zTemp2 						; done them all
.a66b		d0 f2		bne $a65f			bne 	_PULoop
.a66d		7a		ply				ply 								; restore stack/code pos and exit.
.a66e		fa		plx				plx
.a66f		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/sgn.asm

.a670						SgnUnary:
.a670		fa		plx				plx 								; restore stack pos
.a671		20 e3 a8	jsr $a8e3			jsr 	EvaluateNumber 				; get a float or int
.a674		20 1c 9a	jsr $9a1c			jsr 	CheckRightBracket
.a677		20 b7 a9	jsr $a9b7			jsr 	NSMIsZero 					; if zero
.a67a		f0 0e		beq $a68a			beq 	_SGZero  					; return Int Zero
.a67c		b5 50		lda $50,x			lda 	NSStatus,x 					; get status w/sign
.a67e		48		pha				pha
.a67f		a9 01		lda #$01			lda 	#1 							; set to 1
.a681		20 97 a9	jsr $a997			jsr 	NSMSetByte
.a684		68		pla				pla
.a685		29 80		and #$80			and		#$80 						; copy the sign byte out
.a687		95 50		sta $50,x			sta 	NSStatus,x  				; so it will be -1 or 1
.a689		60		rts				rts
.a68a		20 95 a9	jsr $a995	_SGZero:jsr 	NSMSetZero
.a68d		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/val.asm

.a68e						ValUnary:
.a68e		fa		plx				plx 								; restore stack pos
.a68f		20 a4 a6	jsr $a6a4			jsr 	ValMainCode 				; do the main val() code
.a692		b0 01		bcs $a695			bcs 	_VUError 					; couldn't convert
.a694		60		rts				rts
.a695						_VUError:
.a695		4c 3b ac	jmp $ac3b			jmp 	TypeError
.a698						IsValUnary:
.a698		fa		plx				plx 								; restore stack pos
.a699		20 a4 a6	jsr $a6a4			jsr 	ValMainCode 				; do the main val() code
.a69c		b0 03		bcs $a6a1			bcs 	_VUBad
.a69e		4c a8 9a	jmp $9aa8			jmp 	ReturnTrue
.a6a1						_VUBad:
.a6a1		4c b3 9a	jmp $9ab3			jmp 	ReturnFalse
.a6a4						ValMainCode:
.a6a4		20 ed a8	jsr $a8ed			jsr 	EvaluateString 				; get a string
.a6a7		20 1c 9a	jsr $9a1c			jsr 	CheckRightBracket 			; check right bracket present
.a6aa						ValEvaluateZTemp0:
.a6aa		5a		phy				phy
.a6ab		b2 36		lda ($36)			lda 	(zTemp0) 					; check not empty string
.a6ad		f0 17		beq $a6c6			beq 	_VMCFail2
.a6af		a0 ff		ldy #$ff			ldy 	#$FF 						; start position
.a6b1		48		pha				pha 								; save first character
.a6b2		c9 2d		cmp #$2d			cmp 	#"-"		 				; is it - ?
.a6b4		d0 01		bne $a6b7			bne 	_VMCStart
.a6b6		c8		iny				iny 								; skip over -
.a6b7						_VMCStart:
.a6b7		38		sec				sec 								; initialise first time round.
.a6b8						_VMCNext:
.a6b8		c8		iny				iny 								; pre-increment
.a6b9		b1 36		lda ($36),y			lda 	(zTemp0),y 					; next character = EOS ?
.a6bb		f0 0c		beq $a6c9			beq 	_VMCSuccess 				; successful.
.a6bd		20 85 a2	jsr $a285			jsr 	EncodeNumber 				; send it to the number-builder
.a6c0		90 03		bcc $a6c5			bcc 	_VMCFail 					; if failed, give up.
.a6c2		18		clc				clc 								; next time round, countinue
.a6c3		80 f3		bra $a6b8			bra 	_VMCNext
.a6c5						_VMCFail:
.a6c5		68		pla				pla
.a6c6						_VMCFail2:
.a6c6		7a		ply				ply
.a6c7		38		sec				sec
.a6c8		60		rts				rts
.a6c9						_VMCSuccess:
.a6c9		a9 00		lda #$00			lda 	#0 							; construct final
.a6cb		20 85 a2	jsr $a285			jsr 	EncodeNumber 				; by sending a duff value.
.a6ce		68		pla				pla 								; if it was -ve
.a6cf		c9 2d		cmp #$2d			cmp 	#"-"
.a6d1		d0 03		bne $a6d6			bne 	_VMCNotNegative
.a6d3		20 57 a9	jsr $a957			jsr		NSMNegate 					; negate it.
.a6d6						_VMCNotNegative:
.a6d6		7a		ply				ply
.a6d7		18		clc				clc
.a6d8		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/chr.asm

.a6d9						ChrUnary:
.a6d9		fa		plx				plx 								; restore stack pos
.a6da		20 30 a9	jsr $a930			jsr 	Evaluate8BitInteger			; get value (chr$(0) returns an empty string)
.a6dd		48		pha				pha
.a6de		20 1c 9a	jsr $9a1c			jsr 	CheckRightBracket
.a6e1		a9 01		lda #$01			lda 	#1 							; allocate space for one char
.a6e3		20 9b b3	jsr $b39b			jsr 	StringTempAllocate
.a6e6		68		pla				pla 								; write number to it
.a6e7		20 d4 b3	jsr $b3d4			jsr 	StringTempWrite
.a6ea		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/items.asm

.a6eb						ItemCountUnary:
.a6eb		fa		plx				plx
.a6ec		20 ed a8	jsr $a8ed			jsr 	EvaluateString
.a6ef		e8		inx				inx
.a6f0		20 63 a7	jsr $a763			jsr 	ICGetSeperator
.a6f3		ca		dex				dex
.a6f4		20 84 a7	jsr $a784			jsr 	ICSetPointer 				; zTemp0 = (string)
.a6f7		20 95 a9	jsr $a995			jsr 	NSMSetZero 					; zero the result.
.a6fa		5a		phy				phy
.a6fb		a0 ff		ldy #$ff			ldy 	#$FF 						; loop counting seperators in mantissa
.a6fd						_ICULoop:
.a6fd		c8		iny				iny
.a6fe		b1 36		lda ($36),y			lda 	(zTemp0),y
.a700		cd b0 07	cmp $07b0			cmp 	ICSeperator
.a703		d0 02		bne $a707			bne 	_ICUNoMatch
.a705		f6 58		inc $58,x			inc 	NSMantissa0,x
.a707						_ICUNoMatch:
.a707		c9 00		cmp #$00			cmp 	#0
.a709		d0 f2		bne $a6fd			bne 	_ICULoop
.a70b		f6 58		inc $58,x			inc 	NSMantissa0,x 				; +1
.a70d		7a		ply				ply
.a70e		60		rts				rts
.a70f						ItemGetUnary:
.a70f		fa		plx				plx
.a710		20 ed a8	jsr $a8ed			jsr 	EvaluateString 				; search string
.a713		20 24 9a	jsr $9a24			jsr 	CheckComma
.a716		e8		inx				inx 								; get count
.a717		20 30 a9	jsr $a930			jsr 	Evaluate8BitInteger
.a71a		c9 00		cmp #$00			cmp 	#0 							; must be > 0, index starts at 1.
.a71c		f0 61		beq $a77f			beq 	ICGSRange
.a71e		e8		inx				inx 								; get seperator.
.a71f		20 63 a7	jsr $a763			jsr 	ICGetSeperator
.a722		ca		dex				dex
.a723		ca		dex				dex
.a724		5a		phy				phy
.a725		20 84 a7	jsr $a784			jsr 	ICSetPointer 				; zTemp0 points to string.
.a728		a0 00		ldy #$00			ldy 	#0
.a72a		d6 59		dec $59,x			dec 	NSMantissa0+1,x 			; first element.
.a72c		f0 0e		beq $a73c			beq 	_IGUFoundStart
.a72e						_IGUFindNext:
.a72e		b1 36		lda ($36),y			lda 	(zTemp0),y		 			; next
.a730		f0 4d		beq $a77f			beq 	ICGSRange 					; eol, not found.
.a732		c8		iny				iny
.a733		cd b0 07	cmp $07b0			cmp 	ICSeperator 				; until found a seperator (or EOS)
.a736		d0 f6		bne $a72e			bne 	_IGUFindNext
.a738		d6 59		dec $59,x			dec 	NSMantissa0+1,x
.a73a		d0 f2		bne $a72e			bne 	_IGUFindNext
.a73c						_IGUFoundStart:
.a73c		84 38		sty $38				sty 	zTemp1 						; save start
.a73e		88		dey				dey
.a73f						_IGUFindLength:
.a73f		c8		iny				iny 								; forward till seperator/EOS
.a740		b1 36		lda ($36),y			lda 	(zTemp0),y
.a742		f0 05		beq $a749			beq 	_IGUFoundLength
.a744		cd b0 07	cmp $07b0			cmp 	ICSeperator
.a747		d0 f6		bne $a73f			bne 	_IGUFindLength
.a749						_IGUFoundLength:
.a749		84 39		sty $39				sty 	zTemp1+1 					; save end of copy string
.a74b		98		tya				tya 								; calculate length of new string.
.a74c		38		sec				sec
.a74d		e5 38		sbc $38				sbc 	zTemp1
.a74f		20 9b b3	jsr $b39b			jsr 	StringTempAllocate 			; allocate bytes for it.
.a752		a4 38		ldy $38				ldy 	zTemp1
.a754						_IGUCopySub:
.a754		c4 39		cpy $39				cpy 	zTemp1+1
.a756		f0 08		beq $a760			beq 	_IGUCopyOver
.a758		b1 36		lda ($36),y			lda 	(zTemp0),y
.a75a		20 d4 b3	jsr $b3d4			jsr 	StringTempWrite
.a75d		c8		iny				iny
.a75e		80 f4		bra $a754			bra 	_IGUCopySub
.a760						_IGUCopyOver:
.a760		7a		ply				ply
.a761		60		rts				rts
>a762		db						.byte 	$DB 						; causes a break in the emulator
.a763						ICGetSeperator:
.a763		20 24 9a	jsr $9a24			jsr 	CheckComma 					; preceding comma
.a766		20 ed a8	jsr $a8ed			jsr 	EvaluateString 				; seperator string
.a769		20 84 a7	jsr $a784			jsr 	ICSetPointer 				; access it
.a76c		b2 36		lda ($36)			lda 	(zTemp0) 					; get sep char
.a76e		8d b0 07	sta $07b0			sta 	ICSeperator
.a771		f0 0c		beq $a77f			beq 	ICGSRange 					; check LEN(seperator) = 1
.a773		5a		phy				phy
.a774		a0 01		ldy #$01			ldy 	#1
.a776		b1 36		lda ($36),y			lda 	(zTemp0),y
.a778		d0 05		bne $a77f			bne 	ICGSRange
.a77a		7a		ply				ply
.a77b		20 1c 9a	jsr $9a1c			jsr 	CheckRightBracket 			; check following )
.a77e		60		rts				rts
.a77f						ICGSRange:
.a77f		a9 04		lda #$04		lda	#4
.a781		4c 35 9a	jmp $9a35		jmp	ErrorHandler
.a784						ICSetPointer:
.a784		b5 58		lda $58,x			lda 	NSMantissa0,x 				; set zTemp0 to point to it.
.a786		85 36		sta $36				sta 	zTemp0
.a788		b5 60		lda $60,x			lda 	NSMantissa1,x
.a78a		85 37		sta $37				sta 	zTemp0+1
.a78c		60		rts				rts
.07b0						ICSeperator:
>07b0								.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/spc.asm

.a78d						SpcUnary:
.a78d		fa		plx				plx 								; restore stack pos
.a78e		20 30 a9	jsr $a930			jsr 	Evaluate8BitInteger			; get value
.a791		5a		phy				phy
.a792		48		pha				pha 								; save count
.a793		20 9b b3	jsr $b39b			jsr 	StringTempAllocate
.a796		7a		ply				ply 								; to do count in Y
.a797						_SpcLoop:
.a797		c0 00		cpy #$00			cpy 	#0 							; copy Y spaces in.
.a799		f0 08		beq $a7a3			beq 	_SpcExit
.a79b		a9 20		lda #$20			lda 	#32
.a79d		20 d4 b3	jsr $b3d4			jsr 	StringTempWrite
.a7a0		88		dey				dey
.a7a1		80 f4		bra $a797			bra 	_SpcLoop
.a7a3						_SpcExit:
.a7a3		7a		ply				ply
.a7a4		20 1c 9a	jsr $9a1c			jsr 	CheckRightBracket
.a7a7		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/str.asm

.a7a8						Unary_Str:
.a7a8		fa		plx				plx
.a7a9		20 e3 a8	jsr $a8e3			jsr 	EvaluateNumber  			; get number
.a7ac		20 1c 9a	jsr $9a1c			jsr 	CheckRightBracket 			; closing bracket
.a7af		a9 05		lda #$05			lda 	#5 							; maximum decimals, from Basic816
.a7b1		20 ca a7	jsr $a7ca			jsr 	ConvertNumberToString 		; do the conversion.
.a7b4		a9 21		lda #$21			lda		#33 						; create buffer
.a7b6		20 9b b3	jsr $b39b			jsr 	StringTempAllocate 			; allocate memory
.a7b9		da		phx				phx  								; copy the converted string into the buffer.
.a7ba		a2 00		ldx #$00			ldx 	#0
.a7bc						_USCopy:
.a7bc		bd 45 06	lda $0645,x			lda 	decimalBuffer,x
.a7bf		20 d4 b3	jsr $b3d4			jsr 	StringTempWrite
.a7c2		e8		inx				inx
.a7c3		bd 45 06	lda $0645,x			lda 	decimalBuffer,x
.a7c6		d0 f4		bne $a7bc			bne 	_USCopy
.a7c8		fa		plx				plx
.a7c9		60		rts				rts
.a7ca						ConvertNumberToString:
.a7ca		5a		phy				phy 								; save code position
.a7cb		8d 10 04	sta $0410			sta 	decimalPlaces	 			; save number of DPs.
.a7ce		9c 11 04	stz $0411			stz 	dbOffset 					; offset into decimal buffer = start.
.a7d1		b5 50		lda $50,x			lda 	NSStatus,x  				; is it -ve.
.a7d3		10 09		bpl $a7de			bpl 	_CNTSNotNegative
.a7d5		29 7f		and #$7f			and 	#$7F 						; make +ve
.a7d7		95 50		sta $50,x			sta 	NSStatus,x
.a7d9		a9 2d		lda #$2d			lda 	#"-"
.a7db		20 3f a8	jsr $a83f			jsr 	WriteDecimalBuffer
.a7de						_CNTSNotNegative:
.a7de		b5 78		lda $78,x			lda 	NSExponent,x 				; check if decimal
.a7e0		f0 12		beq $a7f4			beq 	_CNTSNotFloat
.a7e2		e8		inx				inx 								; round up so we don't get too many 6.999999
.a7e3		a9 01		lda #$01			lda 	#1
.a7e5		20 97 a9	jsr $a997			jsr 	NSMSetByte
.a7e8		ca		dex				dex
.a7e9		b5 78		lda $78,x			lda		NSExponent,x
.a7eb		95 79		sta $79,x			sta 	NSExponent+1,x
.a7ed		a9 08		lda #$08			lda 	#NSTFloat
.a7ef		95 51		sta $51,x			sta 	NSStatus+1,x
.a7f1		20 8a 9f	jsr $9f8a			jsr 	FloatAdd
.a7f4						_CNTSNotFloat:
.a7f4		20 21 a8	jsr $a821			jsr 	MakePlusTwoString 			; do the integer part.
.a7f7		20 50 a0	jsr $a050			jsr 	FloatFractionalPart 		; get the fractional part
.a7fa		20 01 a1	jsr $a101			jsr 	NSNormalise					; normalise , exit if zero
.a7fd		f0 20		beq $a81f			beq 	_CNTSExit
.a7ff		a9 2e		lda #$2e			lda 	#"."
.a801		20 3f a8	jsr $a83f			jsr 	WriteDecimalBuffer 			; write decimal place
.a804						_CNTSDecimal:
.a804		ce 10 04	dec $0410			dec 	decimalPlaces 				; done all the decimals
.a807		30 16		bmi $a81f			bmi 	_CNTSExit
.a809		e8		inx				inx 								; x 10.0
.a80a		a9 0a		lda #$0a			lda 	#10
.a80c		20 97 a9	jsr $a997			jsr 	NSMSetByte
.a80f		a9 08		lda #$08			lda 	#NSTFloat
.a811		95 50		sta $50,x			sta 	NSStatus,x
.a813		ca		dex				dex
.a814		20 cf a0	jsr $a0cf			jsr 	FloatMultiply
.a817		20 21 a8	jsr $a821			jsr 	MakePlusTwoString 			; put the integer e.g. next digit out.
.a81a		20 50 a0	jsr $a050			jsr 	FloatFractionalPart 		; get the fractional part
.a81d		80 e5		bra $a804			bra 	_CNTSDecimal 				; keep going.
.a81f						_CNTSExit:
.a81f		7a		ply				ply
.a820		60		rts				rts
.a821						MakePlusTwoString:
.a821		da		phx				phx
.a822		20 78 a9	jsr $a978			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.a825		e8		inx				inx 								; access it
.a826		e8		inx				inx
.a827		20 a8 a0	jsr $a0a8			jsr 	FloatIntegerPart 			; make it an integer
.a82a		a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.a82c		20 ba 9e	jsr $9eba			jsr 	ConvertInt32
.a82f		a2 00		ldx #$00			ldx	 	#0 							; write that to the decimal buffer.
.a831						_MPTSCopy:
.a831		bd 23 06	lda $0623,x			lda 	numberBuffer,x
.a834		20 3f a8	jsr $a83f			jsr 	WriteDecimalBuffer
.a837		e8		inx				inx
.a838		bd 23 06	lda $0623,x			lda 	numberBuffer,x
.a83b		d0 f4		bne $a831			bne 	_MPTSCopy
.a83d		fa		plx				plx
.a83e		60		rts				rts
.a83f						WriteDecimalBuffer:
.a83f		da		phx				phx
.a840		ae 11 04	ldx $0411			ldx 	dbOffset
.a843		9d 45 06	sta $0645,x			sta 	decimalBuffer,x
.a846		9e 46 06	stz $0646,x			stz 	decimalBuffer+1,x
.a849		ee 11 04	inc $0411			inc 	dbOffset
.a84c		fa		plx				plx
.a84d		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/substring.asm

.a84e						Unary_Left:
.a84e		fa		plx				plx
.a84f		18		clc				clc 								; only one parameter
.a850		20 b3 a8	jsr $a8b3			jsr 	SubstringInitial 			; set up.
.a853		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; Param #1 is the length
.a855		95 5a		sta $5a,x			sta 	NSMantissa0+2,x
.a857		74 59		stz $59,x			stz 	NSMantissa0+1,x 			; Start is zero.
.a859		80 25		bra $a880			bra 	SubstringMain
.a85b						Unary_Right:
.a85b		fa		plx				plx
.a85c		18		clc				clc 								; only one parameter
.a85d		20 b3 a8	jsr $a8b3			jsr 	SubstringInitial 			; set up.
.a860		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; length => param 2
.a862		95 5a		sta $5a,x			sta 	NSMantissa0+2,x
.a864		b5 78		lda $78,x			lda 	NSExponent,x 				; total length
.a866		f5 59		sbc $59,x			sbc 	NSMantissa0+1,x 			; length - required.
.a868		b0 02		bcs $a86c			bcs 	_URNotUnderflow
.a86a		a9 00		lda #$00			lda 	#0 							; start from the beginning, as something like right$("AB",3)
.a86c						_URNotUnderflow:
.a86c		95 59		sta $59,x			sta 	NSMantissa0+1,x 			; this is the start position
.a86e		80 10		bra $a880			bra 	SubstringMain
.a870						Unary_Mid:
.a870		fa		plx				plx
.a871		38		sec				sec 								; two parameters
.a872		20 b3 a8	jsr $a8b3			jsr 	SubstringInitial 			; set up.
.a875		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; first parameter is zero ?
.a877		f0 04		beq $a87d			beq 	_UMError
.a879		d6 59		dec $59,x			dec 	NSMantissa0+1,x				; reduce initial offset by 1 as MID$(a$,1..) is actually the first character
.a87b		80 03		bra $a880			bra 	SubstringMain
.a87d						_UMError:
.a87d		4c 40 ac	jmp $ac40			jmp 	ArgumentError
.a880						SubstringMain:
.a880		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; is the initial offset >= the length
.a882		d5 78		cmp $78,x			cmp 	NSExponent,x
.a884		b0 27		bcs $a8ad			bcs 	_SSMNull 					; if so, return an empty string.
.a886		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; if copy count is zero
.a888		f0 23		beq $a8ad			beq 	_SSMNull 					; return empty string.
.a88a		18		clc				clc 								; add the offset +1 to the address and
.a88b		b5 58		lda $58,x			lda	 	NSMantissa0,x 				; put in zTemp, this is the start of the substring to copy.
.a88d		75 59		adc $59,x			adc 	NSMantissa0+1,x
.a88f		85 36		sta $36				sta 	zTemp0
.a891		b5 60		lda $60,x			lda	 	NSMantissa1,x
.a893		69 00		adc #$00			adc 	#0
.a895		85 37		sta $37				sta 	zTemp0+1
.a897						_SSMNoCarry:
.a897		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; characters required.
.a899		20 9b b3	jsr $b39b			jsr 	StringTempAllocate 			; allocate that many characters
.a89c		5a		phy				phy 								; save Y
.a89d		a0 00		ldy #$00			ldy 	#0 							; start copying in.
.a89f						_SSMCopy:
.a89f		b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next character
.a8a1		f0 08		beq $a8ab			beq 	_SSMEString 				; no more to copy
.a8a3		20 d4 b3	jsr $b3d4			jsr 	StringTempWrite 			; and write it out.
.a8a6		c8		iny				iny
.a8a7		d6 5a		dec $5a,x			dec 	NSMantissa0+2,x
.a8a9		d0 f4		bne $a89f			bne 	_SSMCopy
.a8ab						_SSMEString:
.a8ab		7a		ply				ply
.a8ac						_SSMExit:
.a8ac		60		rts				rts
.a8ad						_SSMNull:
.a8ad		a9 00		lda #$00			lda 	#0
.a8af		20 9b b3	jsr $b39b			jsr 	StringTempAllocate
.a8b2		60		rts				rts
.a8b3						SubstringInitial:
.a8b3		da		phx				phx 								; save initial stack position
.a8b4		08		php				php 								; save carry on stack indicating 2 parameters
.a8b5		20 ed a8	jsr $a8ed			jsr 	EvaluateString 				; get a string
.a8b8		5a		phy				phy 								; calculate length to exponent.
.a8b9		a0 ff		ldy #$ff			ldy 	#$FF
.a8bb						_SIFindLength:
.a8bb		c8		iny				iny
.a8bc		b1 36		lda ($36),y			lda 	(zTemp0),y
.a8be		d0 fb		bne $a8bb			bne 	_SIFindLength
.a8c0		98		tya				tya
.a8c1		95 78		sta $78,x			sta 	NSExponent,x
.a8c3		7a		ply				ply
.a8c4		e8		inx				inx
.a8c5		20 24 9a	jsr $9a24			jsr 	CheckComma 					; comma next
.a8c8		20 30 a9	jsr $a930			jsr 	Evaluate8BitInteger 		; get next parameter
.a8cb		28		plp				plp 								; is it the last parameter ?
.a8cc		90 07		bcc $a8d5			bcc 	_SSIExit 					; if so, exit.
.a8ce		e8		inx				inx
.a8cf		20 24 9a	jsr $9a24			jsr 	CheckComma 					; comma next
.a8d2		20 30 a9	jsr $a930			jsr 	Evaluate8BitInteger 		; get last parameter
.a8d5						_SSIExit:
.a8d5		fa		plx				plx
.a8d6		20 1c 9a	jsr $9a1c			jsr 	CheckRightBracket 			; check closing bracket
.a8d9		60		rts				rts 								; exit

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/exprhelper.asm

.a8da						EvaluateValue:
.a8da		48		pha				pha
.a8db		20 3f 9f	jsr $9f3f			jsr		EvaluateExpression 			; expression
.a8de		20 02 a2	jsr $a202			jsr 	Dereference					; derefernce it
.a8e1		68		pla				pla
.a8e2		60		rts				rts
.a8e3						EvaluateNumber:
.a8e3		20 da a8	jsr $a8da			jsr 	EvaluateValue 				; get a value
.a8e6		b5 50		lda $50,x			lda 	NSStatus,x 					; check if string.
.a8e8		29 10		and #$10			and 	#NSBIsString
.a8ea		d0 13		bne $a8ff			bne 	HelperTypeError
.a8ec		60		rts				rts
.a8ed						EvaluateString:
.a8ed		20 da a8	jsr $a8da			jsr 	EvaluateValue 				; get a value
.a8f0		b5 50		lda $50,x			lda 	NSStatus,x 					; check if string.
.a8f2		29 10		and #$10			and 	#NSBIsString
.a8f4		f0 09		beq $a8ff			beq 	HelperTypeError
.a8f6						CopyAddressToTemp0:
.a8f6		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy address -> zTemp0
.a8f8		85 36		sta $36				sta 	zTemp0 						; (so we can do something with it)
.a8fa		b5 60		lda $60,x			lda 	NSMantissa1,x
.a8fc		85 37		sta $37				sta 	zTemp0+1
.a8fe		60		rts				rts
.a8ff						HelperTypeError:
.a8ff		4c 3b ac	jmp $ac3b			jmp 	TypeError
.a902						EvaluateInteger:
.a902		20 e3 a8	jsr $a8e3			jsr 	EvaluateNumber
.a905		b5 78		lda $78,x			lda 	NSExponent,x 				; check exponent is zero
.a907		d0 09		bne $a912			bne 	HelperValueError 			; if not, it's a float.
.a909		60		rts				rts
.a90a						EvaluateUnsignedInteger:
.a90a		20 02 a9	jsr $a902			jsr 	EvaluateInteger 			; check integer is +ve
.a90d		b5 50		lda $50,x			lda 	NSStatus,x
.a90f		30 01		bmi $a912			bmi 	HelperValueError
.a911		60		rts				rts
.a912						HelperValueError:
.a912		4c 40 ac	jmp $ac40			jmp 	ArgumentError
.a915						Evaluate16BitInteger:
.a915		20 0a a9	jsr $a90a			jsr	 	EvaluateUnsignedInteger		; get integer
.a918		b5 70		lda $70,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.a91a		15 68		ora $68,x			ora 	NSMantissa2,x
.a91c		d0 f4		bne $a912			bne 	HelperValueError
.a91e		60		rts				rts
.a91f						Evaluate16BitIntegerSigned:
.a91f		20 02 a9	jsr $a902			jsr	 	EvaluateInteger				; get integer
.a922		b5 70		lda $70,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.a924		15 68		ora $68,x			ora 	NSMantissa2,x
.a926		d0 ea		bne $a912			bne 	HelperValueError
.a928		b5 50		lda $50,x			lda 	NSStatus,x 					; signed ?
.a92a		10 03		bpl $a92f			bpl 	_EISNotSigned
.a92c		20 5e a9	jsr $a95e			jsr 	NSMNegateMantissa 			; makes it an actual 2's complement value.
.a92f						_EISNotSigned:
.a92f		60		rts				rts
.a930						Evaluate8BitInteger:
.a930		20 0a a9	jsr $a90a			jsr	 	EvaluateUnsignedInteger 	; get an integer
.a933		d0 dd		bne $a912			bne 	HelperValueError
.a935		b5 70		lda $70,x			lda 	NSMantissa3,x	 			; bytes 1, 2 & 3 must be zero
.a937		15 68		ora $68,x			ora 	NSMantissa2,x
.a939		15 60		ora $60,x			ora 	NSMantissa1,x
.a93b		d0 d5		bne $a912			bne 	HelperValueError
.a93d		b5 58		lda $58,x			lda 	NSMantissa0,x
.a93f		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/mult8x8.asm

.a940						Multiply8x8:
.a940		4a		lsr a		  		lsr 	a  							; prime the carry bit for the loop
.a941		85 36		sta $36			  	sta 	zTemp0
.a943		86 37		stx $37				stx 	zTemp0+1
.a945		a9 00		lda #$00			lda 	#0
.a947		a2 08		ldx #$08			ldx 	#8
.a949						_M88Loop:
.a949		90 03		bcc $a94e			bcc 	_M88NoAdd
.a94b		18		clc				clc
.a94c		65 37		adc $37				adc 	zTemp0+1
.a94e						_M88NoAdd:
.a94e		6a		ror a				ror 	a
.a94f		66 36		ror $36				ror 	zTemp0  					; pull another bit out for the next iteration
.a951		ca		dex				dex         						; inc/dec don't modify carry; only shifts and adds do
.a952		d0 f5		bne $a949			bne 	_M88Loop
.a954		85 37		sta $37				sta 	zTemp0+1 					; store high 8 bits.
.a956		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/utility.asm

.a957						NSMNegate:
.a957		b5 50		lda $50,x			lda 	NSStatus,x 					; everything is sign/magnitude usually so just
.a959		49 80		eor #$80			eor 	#NSBIsNegative  			; toggle the negative flag
.a95b		95 50		sta $50,x			sta 	NSStatus,x
.a95d		60		rts				rts
.a95e						NSMNegateMantissa:
.a95e		38		sec				sec 								; when we want an actual 32 bit 2's complement value.
.a95f		a9 00		lda #$00			lda 	#0
.a961		f5 58		sbc $58,x			sbc 	NSMantissa0,x
.a963		95 58		sta $58,x			sta 	NSMantissa0,x
.a965		a9 00		lda #$00			lda 	#0
.a967		f5 60		sbc $60,x			sbc 	NSMantissa1,x
.a969		95 60		sta $60,x			sta 	NSMantissa1,x
.a96b		a9 00		lda #$00			lda 	#0
.a96d		f5 68		sbc $68,x			sbc 	NSMantissa2,x
.a96f		95 68		sta $68,x			sta 	NSMantissa2,x
.a971		a9 00		lda #$00			lda 	#0
.a973		f5 70		sbc $70,x			sbc 	NSMantissa3,x
.a975		95 70		sta $70,x			sta 	NSMantissa3,x
.a977		60		rts				rts
.a978						NSMShiftUpTwo:
.a978		b5 58		lda $58,x			lda 	NSMantissa0,x
.a97a		95 5a		sta $5a,x			sta 	NSMantissa0+2,x
.a97c		b5 60		lda $60,x			lda 	NSMantissa1,x
.a97e		95 62		sta $62,x			sta 	NSMantissa1+2,x
.a980		b5 68		lda $68,x			lda 	NSMantissa2,x
.a982		95 6a		sta $6a,x			sta 	NSMantissa2+2,x
.a984		b5 70		lda $70,x			lda 	NSMantissa3,x
.a986		95 72		sta $72,x			sta 	NSMantissa3+2,x
.a988		b5 78		lda $78,x			lda 	NSExponent,x
.a98a		95 7a		sta $7a,x			sta 	NSExponent+2,x
.a98c		b5 50		lda $50,x			lda 	NSStatus,x
.a98e		95 52		sta $52,x			sta 	NSStatus+2,x
.a990		60		rts				rts
.a991						NSMSetZeroMantissaOnly:
.a991		a9 00		lda #$00			lda 	#0
.a993		80 06		bra $a99b			bra 	NSMSetMantissa
.a995						NSMSetZero:
.a995		a9 00		lda #$00			lda 	#0
.a997						NSMSetByte:
.a997		74 78		stz $78,x			stz 	NSExponent,x 				; zero exponent, as integer.
.a999		74 50		stz $50,x			stz 	NSStatus,x 					; status zero (integer)
.a99b						NSMSetMantissa:
.a99b		95 58		sta $58,x			sta 	NSMantissa0,x 				; mantissa
.a99d		74 60		stz $60,x			stz 	NSMantissa1,x
.a99f		74 68		stz $68,x			stz 	NSMantissa2,x
.a9a1		74 70		stz $70,x			stz 	NSMantissa3,x
.a9a3		60		rts				rts
.a9a4						NSMShiftLeft:
.a9a4		18		clc				clc
.a9a5						NSMRotateLeft:
.a9a5		36 58		rol $58,x			rol 	NSMantissa0,x
.a9a7		36 60		rol $60,x			rol		NSMantissa1,x
.a9a9		36 68		rol $68,x			rol		NSMantissa2,x
.a9ab		36 70		rol $70,x			rol		NSMantissa3,x
.a9ad		60		rts				rts
.a9ae						NSMShiftRight:
.a9ae		56 70		lsr $70,x			lsr 	NSMantissa3,x
.a9b0		76 68		ror $68,x			ror		NSMantissa2,x
.a9b2		76 60		ror $60,x			ror		NSMantissa1,x
.a9b4		76 58		ror $58,x			ror		NSMantissa0,x
.a9b6		60		rts				rts
.a9b7						NSMIsZero:
.a9b7		b5 70		lda $70,x			lda 	NSMantissa3,x
.a9b9		15 68		ora $68,x			ora		NSMantissa2,x
.a9bb		15 60		ora $60,x			ora		NSMantissa1,x
.a9bd		15 58		ora $58,x			ora		NSMantissa0,x
.a9bf		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/functions/getdatetime.asm

.a9c0						UnaryGetTime:
.a9c0		a9 00		lda #$00			lda 	#0
.a9c2		80 02		bra $a9c6			bra 	UGDTMain
.a9c4						UnaryGetDate:
.a9c4		a9 03		lda #$03			lda 	#3
.a9c6						UGDTMain:
.a9c6		fa		plx				plx 								; get stack position back
.a9c7		48		pha				pha 								; save table offset
.a9c8		20 30 a9	jsr $a930			jsr 	Evaluate8BitInteger			; ignored parameter
.a9cb		20 1c 9a	jsr $9a1c			jsr 	CheckRightBracket 			; closing )
.a9ce		68		pla				pla 								; table offset in A
.a9cf		5a		phy				phy 								; saving Y
.a9d0		a8		tay				tay 								; table offset in Y
.a9d1		a9 08		lda #$08			lda 	#8							; allocate space for 8 chars DD:MM:YY
.a9d3		20 9b b3	jsr $b39b			jsr 	StringTempAllocate
.a9d6		a5 01		lda $01				lda 	1 							; save I/O table and switch to I/O page 0
.a9d8		48		pha				pha
.a9d9		64 01		stz $01				stz 	1
.a9db		20 ee a9	jsr $a9ee			jsr 	UGDTDigit 					; do XX:YY:ZZ
.a9de		20 e9 a9	jsr $a9e9			jsr 	UGDTColonDigit
.a9e1		20 e9 a9	jsr $a9e9			jsr 	UGDTColonDigit
.a9e4		68		pla				pla 								; restore I/O select
.a9e5		85 01		sta $01				sta 	1
.a9e7		7a		ply				ply  								; restore code position
.a9e8		60		rts				rts
.a9e9						UGDTColonDigit:
.a9e9		a9 3a		lda #$3a			lda 	#':'
.a9eb		20 d4 b3	jsr $b3d4			jsr 	StringTempWrite
.a9ee						UGDTDigit:
.a9ee		da		phx				phx 								; save X
.a9ef		b9 0e aa	lda $aa0e,y			lda 	RTCROffset,y 				; get offset in RTC register
.a9f2		aa		tax				tax
.a9f3		bd 90 d6	lda $d690,x			lda 	$D690,x 					; read RTC register
.a9f6		39 14 aa	and $aa14,y			and 	RTCRMask,y 					; and with Mask.
.a9f9		fa		plx				plx
.a9fa		48		pha				pha 								; output in BCD
.a9fb		4a		lsr a				lsr 	a
.a9fc		4a		lsr a				lsr 	a
.a9fd		4a		lsr a				lsr 	a
.a9fe		4a		lsr a				lsr 	a
.a9ff		09 30		ora #$30			ora 	#48
.aa01		20 d4 b3	jsr $b3d4			jsr 	StringTempWrite
.aa04		68		pla				pla
.aa05		29 0f		and #$0f			and 	#15
.aa07		09 30		ora #$30			ora 	#48
.aa09		20 d4 b3	jsr $b3d4			jsr 	StringTempWrite
.aa0c		c8		iny				iny
.aa0d		60		rts				rts
.aa0e						RTCROffset:
>aa0e		04 02 00 06 09 0a				.byte 	4,2,0,6,9,10
.aa14						RTCRMask:
>aa14		3f 7f 7f 3f 1f 7f				.byte 	$3F,$7F,$7F,$3F,$1F,$7F

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/functions/getinkey.asm

.aa1a						AscGet:
.aa1a		fa		plx				plx 								; restore stack pos
.aa1b						AscGet2:
.aa1b		20 1c 9a	jsr $9a1c			jsr 	CheckRightBracket
.aa1e		20 9e 81	jsr $819e			jsr 	KNLGetSingleCharacter
.aa21		20 97 a9	jsr $a997			jsr 	NSMSetByte
.aa24		60		rts				rts
.aa25						_AGBreak:
.aa25		a9 01		lda #$01		lda	#1
.aa27		4c 35 9a	jmp $9a35		jmp	ErrorHandler
.aa2a						AscInkey:
.aa2a		fa		plx				plx 								; restore stack pos
.aa2b						AscInkey2:
.aa2b		20 1c 9a	jsr $9a1c			jsr 	CheckRightBracket
.aa2e		20 7c 81	jsr $817c			jsr 	KNLGetKeyPressed
.aa31		20 97 a9	jsr $a997			jsr 	NSMSetByte
.aa34		60		rts				rts
.aa35						ChrGet:
.aa35		fa		plx				plx
.aa36		20 1b aa	jsr $aa1b			jsr 	AscGet2
.aa39		4c 40 aa	jmp $aa40			jmp 	GetInkeyToString
.aa3c						ChrInkey:
.aa3c		fa		plx				plx
.aa3d		20 2b aa	jsr $aa2b			jsr 	AscInkey2
.aa40						GetInkeyToString:
.aa40		c9 00		cmp #$00			cmp 	#0 							; if zero, return ""
.aa42		f0 0b		beq $aa4f			beq 	_GKISNull
.aa44		48		pha				pha
.aa45		a9 01		lda #$01			lda 	#1 							; allocate space for one char
.aa47		20 9b b3	jsr $b39b			jsr 	StringTempAllocate
.aa4a		68		pla				pla 								; write number to it
.aa4b		20 d4 b3	jsr $b3d4			jsr 	StringTempWrite
.aa4e		60		rts				rts
.aa4f						_GKISNull:
.aa4f		a9 00		lda #$00			lda 	#0
.aa51		20 9b b3	jsr $b39b			jsr 	StringTempAllocate
.aa54		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/functions/keydown.asm

.aa55						KeyDown:
.aa55		20 2d 81	jsr $812d			jsr 	ProcessEvents 				; process outstanding events.
.aa58		fa		plx				plx 								; restore stack pos
.aa59		20 30 a9	jsr $a930			jsr 	Evaluate8BitInteger 		; key to check.
.aa5c		48		pha				pha 								; check right bracket.
.aa5d		20 1c 9a	jsr $9a1c			jsr 	CheckRightBracket
.aa60		68		pla				pla
.aa61		20 8a 83	jsr $838a			jsr 	KeyboardConvertXA 			; get offset and mask.
.aa64		3d 60 06	and $0660,x			and 	KeyStatus,x 				; is it zero ?
.aa67		f0 03		beq $aa6c			beq 	_KeyUp
.aa69		4c a8 9a	jmp $9aa8			jmp 	ReturnTrue
.aa6c		4c b3 9a	jmp $9ab3	_KeyUp:	jmp 	ReturnFalse

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/functions/rnd.asm

.aa6f						Unary_Random:
.aa6f		fa		plx				plx
.aa70		20 c0 aa	jsr $aac0			jsr 	URCopyToMantissa  			; put random # in mantissa
.aa73		b1 30		lda ($30),y			lda 	(codePtr),y
.aa75		c9 29		cmp #$29			cmp 	#KWD_RPAREN
.aa77		f0 08		beq $aa81			beq 	_URNoModulus 				; then we return a random 30 bit number.
.aa79		e8		inx				inx
.aa7a		20 15 a9	jsr $a915			jsr 	Evaluate16BitInteger 		; put modulus value in +1
.aa7d		ca		dex				dex
.aa7e		20 fa 9b	jsr $9bfa			jsr 	IntegerModulusNoCheck 		; calculate modulus, so now 0 .. n-1
.aa81						_URNoModulus:
.aa81		74 50		stz $50,x			stz 	NSStatus,x 					; make it an integer positive
.aa83		74 78		stz $78,x			stz 	NSExponent,x
.aa85		20 1c 9a	jsr $9a1c			jsr 	CheckRightBracket
.aa88		60		rts				rts
.aa89						Unary_Rnd:
.aa89		fa		plx				plx
.aa8a		20 e3 a8	jsr $a8e3			jsr 	EvaluateNumber 				; number to use.
.aa8d		20 1c 9a	jsr $9a1c			jsr 	CheckRightBracket 			; closing bracket
.aa90		b5 50		lda $50,x			lda 	NSStatus,x 					; if -ve, then seed using parameter
.aa92		10 20		bpl $aab4			bpl 	_URDontSeed
.aa94		a5 01		lda $01				lda 	1 							; switch to page 0
.aa96		48		pha				pha
.aa97		64 01		stz $01				stz 	1
.aa99		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy - value to seed butchering it.
.aa9b		49 17		eor #$17			eor 	#$17
.aa9d		8d a4 d6	sta $d6a4			sta 	$D6A4
.aaa0		b5 60		lda $60,x			lda 	NSMantissa1,x
.aaa2		49 a5		eor #$a5			eor 	#$A5
.aaa4		8d a5 d6	sta $d6a5			sta 	$D6A5
.aaa7		a9 03		lda #$03			lda 	#3 							; set bit 1 high/low to set seed.
.aaa9		8d a6 d6	sta $d6a6			sta 	$D6A6
.aaac		a9 01		lda #$01			lda 	#1
.aaae		8d a6 d6	sta $d6a6			sta 	$D6A6
.aab1		68		pla				pla
.aab2		85 01		sta $01				sta 	1
.aab4						_URDontSeed:
.aab4		20 c0 aa	jsr $aac0			jsr 	URCopyToMantissa 			; copy into mantissa
.aab7		a9 e2		lda #$e2			lda 	#-30 						; force into 0-1 range
.aab9		95 78		sta $78,x			sta 	NSExponent,x
.aabb		a9 08		lda #$08			lda 	#NSTFloat
.aabd		95 50		sta $50,x			sta 	NSStatus,x 					; positive float
.aabf		60		rts				rts
.aac0						URCopyToMantissa:
.aac0		a5 01		lda $01				lda 	1 							; switch to I/O page 1
.aac2		48		pha				pha
.aac3		64 01		stz $01				stz 	1
.aac5		a9 01		lda #$01			lda 	#1
.aac7		8d a6 d6	sta $d6a6			sta 	$D6A6 						; enable LFSR
.aaca		ad a4 d6	lda $d6a4			lda 	$D6A4
.aacd		95 58		sta $58,x			sta 	NSMantissa0,x
.aacf		ad a5 d6	lda $d6a5			lda 	$D6A5
.aad2		95 60		sta $60,x			sta 	NSMantissa1,x
.aad4		ad a4 d6	lda $d6a4			lda 	$D6A4
.aad7		95 68		sta $68,x			sta 	NSMantissa2,x
.aad9		ad a5 d6	lda $d6a5			lda 	$D6A5
.aadc		29 3f		and #$3f			and 	#$3F 						; make legal mantissa
.aade		95 70		sta $70,x			sta 	NSMantissa3,x
.aae0		68		pla				pla
.aae1		85 01		sta $01				sta 	1
.aae3		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/asmcore.asm

.aae4						Assemble_ora:
.aae4		20 88 84	jsr $8488		jsr	AssembleGroup1
>aae7		01					.byte $01
.aae8						Assemble_and:
.aae8		20 88 84	jsr $8488		jsr	AssembleGroup1
>aaeb		21					.byte $21
.aaec						Assemble_eor:
.aaec		20 88 84	jsr $8488		jsr	AssembleGroup1
>aaef		41					.byte $41
.aaf0						Assemble_adc:
.aaf0		20 88 84	jsr $8488		jsr	AssembleGroup1
>aaf3		61					.byte $61
.aaf4						Assemble_sta:
.aaf4		20 88 84	jsr $8488		jsr	AssembleGroup1
>aaf7		81					.byte $81
.aaf8						Assemble_lda:
.aaf8		20 88 84	jsr $8488		jsr	AssembleGroup1
>aafb		a1					.byte $a1
.aafc						Assemble_cmp:
.aafc		20 88 84	jsr $8488		jsr	AssembleGroup1
>aaff		c1					.byte $c1
.ab00						Assemble_sbc:
.ab00		20 88 84	jsr $8488		jsr	AssembleGroup1
>ab03		e1					.byte $e1
.ab04						Assemble_asl:
.ab04		20 8f 84	jsr $848f		jsr	AssembleGroup2
>ab07		02					.byte $02
>ab08		75					.byte $75
.ab09						Assemble_rol:
.ab09		20 8f 84	jsr $848f		jsr	AssembleGroup2
>ab0c		22					.byte $22
>ab0d		75					.byte $75
.ab0e						Assemble_lsr:
.ab0e		20 8f 84	jsr $848f		jsr	AssembleGroup2
>ab11		42					.byte $42
>ab12		75					.byte $75
.ab13						Assemble_ror:
.ab13		20 8f 84	jsr $848f		jsr	AssembleGroup2
>ab16		62					.byte $62
>ab17		75					.byte $75
.ab18						Assemble_stx:
.ab18		20 8f 84	jsr $848f		jsr	AssembleGroup2
>ab1b		82					.byte $82
>ab1c		50					.byte $50
.ab1d						Assemble_ldx:
.ab1d		20 8f 84	jsr $848f		jsr	AssembleGroup2
>ab20		a2					.byte $a2
>ab21		d0					.byte $d0
.ab22						Assemble_dec:
.ab22		20 8f 84	jsr $848f		jsr	AssembleGroup2
>ab25		c2					.byte $c2
>ab26		55					.byte $55
.ab27						Assemble_inc:
.ab27		20 8f 84	jsr $848f		jsr	AssembleGroup2
>ab2a		e2					.byte $e2
>ab2b		55					.byte $55
.ab2c						Assemble_stz:
.ab2c		20 8f 84	jsr $848f		jsr	AssembleGroup2
>ab2f		60					.byte $60
>ab30		44					.byte $44
.ab31						Assemble_bit:
.ab31		20 8f 84	jsr $848f		jsr	AssembleGroup2
>ab34		20					.byte $20
>ab35		55					.byte $55
.ab36						Assemble_sty:
.ab36		20 8f 84	jsr $848f		jsr	AssembleGroup2
>ab39		80					.byte $80
>ab3a		54					.byte $54
.ab3b						Assemble_ldy:
.ab3b		20 8f 84	jsr $848f		jsr	AssembleGroup2
>ab3e		a0					.byte $a0
>ab3f		d5					.byte $d5
.ab40						Assemble_cpy:
.ab40		20 8f 84	jsr $848f		jsr	AssembleGroup2
>ab43		c0					.byte $c0
>ab44		d4					.byte $d4
.ab45						Assemble_cpx:
.ab45		20 8f 84	jsr $848f		jsr	AssembleGroup2
>ab48		e0					.byte $e0
>ab49		d0					.byte $d0
.ab4a						Assemble_tsb:
.ab4a		20 8f 84	jsr $848f		jsr	AssembleGroup2
>ab4d		00					.byte $00
>ab4e		50					.byte $50
.ab4f						Assemble_trb:
.ab4f		20 8f 84	jsr $848f		jsr	AssembleGroup2
>ab52		10					.byte $10
>ab53		50					.byte $50
.ab54						Assemble_jsr:
.ab54		20 8f 84	jsr $848f		jsr	AssembleGroup2
>ab57		14					.byte $14
>ab58		10					.byte $10
.ab59						Assemble_jmp:
.ab59		20 8f 84	jsr $848f		jsr	AssembleGroup2
>ab5c		40					.byte $40
>ab5d		10					.byte $10
.ab5e						Assemble_bpl:
.ab5e		20 e0 84	jsr $84e0		jsr	AssembleGroup3
>ab61		10					.byte $10
.ab62						Assemble_bmi:
.ab62		20 e0 84	jsr $84e0		jsr	AssembleGroup3
>ab65		30					.byte $30
.ab66						Assemble_bvc:
.ab66		20 e0 84	jsr $84e0		jsr	AssembleGroup3
>ab69		50					.byte $50
.ab6a						Assemble_bvs:
.ab6a		20 e0 84	jsr $84e0		jsr	AssembleGroup3
>ab6d		70					.byte $70
.ab6e						Assemble_bcc:
.ab6e		20 e0 84	jsr $84e0		jsr	AssembleGroup3
>ab71		90					.byte $90
.ab72						Assemble_bcs:
.ab72		20 e0 84	jsr $84e0		jsr	AssembleGroup3
>ab75		b0					.byte $b0
.ab76						Assemble_bne:
.ab76		20 e0 84	jsr $84e0		jsr	AssembleGroup3
>ab79		d0					.byte $d0
.ab7a						Assemble_beq:
.ab7a		20 e0 84	jsr $84e0		jsr	AssembleGroup3
>ab7d		f0					.byte $f0
.ab7e						Assemble_bra:
.ab7e		20 e0 84	jsr $84e0		jsr	AssembleGroup3
>ab81		80					.byte $80
.ab82						Assemble_brk:
.ab82		20 14 85	jsr $8514		jsr	AssembleGroup4
>ab85		00					.byte $00
.ab86						Assemble_php:
.ab86		20 14 85	jsr $8514		jsr	AssembleGroup4
>ab89		08					.byte $08
.ab8a						Assemble_clc:
.ab8a		20 14 85	jsr $8514		jsr	AssembleGroup4
>ab8d		18					.byte $18
.ab8e						Assemble_plp:
.ab8e		20 14 85	jsr $8514		jsr	AssembleGroup4
>ab91		28					.byte $28
.ab92						Assemble_sec:
.ab92		20 14 85	jsr $8514		jsr	AssembleGroup4
>ab95		38					.byte $38
.ab96						Assemble_rti:
.ab96		20 14 85	jsr $8514		jsr	AssembleGroup4
>ab99		40					.byte $40
.ab9a						Assemble_pha:
.ab9a		20 14 85	jsr $8514		jsr	AssembleGroup4
>ab9d		48					.byte $48
.ab9e						Assemble_cli:
.ab9e		20 14 85	jsr $8514		jsr	AssembleGroup4
>aba1		58					.byte $58
.aba2						Assemble_phy:
.aba2		20 14 85	jsr $8514		jsr	AssembleGroup4
>aba5		5a					.byte $5a
.aba6						Assemble_rts:
.aba6		20 14 85	jsr $8514		jsr	AssembleGroup4
>aba9		60					.byte $60
.abaa						Assemble_pla:
.abaa		20 14 85	jsr $8514		jsr	AssembleGroup4
>abad		68					.byte $68
.abae						Assemble_sei:
.abae		20 14 85	jsr $8514		jsr	AssembleGroup4
>abb1		78					.byte $78
.abb2						Assemble_ply:
.abb2		20 14 85	jsr $8514		jsr	AssembleGroup4
>abb5		7a					.byte $7a
.abb6						Assemble_dey:
.abb6		20 14 85	jsr $8514		jsr	AssembleGroup4
>abb9		88					.byte $88
.abba						Assemble_txa:
.abba		20 14 85	jsr $8514		jsr	AssembleGroup4
>abbd		8a					.byte $8a
.abbe						Assemble_tya:
.abbe		20 14 85	jsr $8514		jsr	AssembleGroup4
>abc1		98					.byte $98
.abc2						Assemble_txs:
.abc2		20 14 85	jsr $8514		jsr	AssembleGroup4
>abc5		9a					.byte $9a
.abc6						Assemble_tay:
.abc6		20 14 85	jsr $8514		jsr	AssembleGroup4
>abc9		a8					.byte $a8
.abca						Assemble_tax:
.abca		20 14 85	jsr $8514		jsr	AssembleGroup4
>abcd		aa					.byte $aa
.abce						Assemble_clv:
.abce		20 14 85	jsr $8514		jsr	AssembleGroup4
>abd1		b8					.byte $b8
.abd2						Assemble_tsx:
.abd2		20 14 85	jsr $8514		jsr	AssembleGroup4
>abd5		ba					.byte $ba
.abd6						Assemble_iny:
.abd6		20 14 85	jsr $8514		jsr	AssembleGroup4
>abd9		c8					.byte $c8
.abda						Assemble_dex:
.abda		20 14 85	jsr $8514		jsr	AssembleGroup4
>abdd		ca					.byte $ca
.abde						Assemble_cld:
.abde		20 14 85	jsr $8514		jsr	AssembleGroup4
>abe1		d8					.byte $d8
.abe2						Assemble_phx:
.abe2		20 14 85	jsr $8514		jsr	AssembleGroup4
>abe5		da					.byte $da
.abe6						Assemble_stp:
.abe6		20 14 85	jsr $8514		jsr	AssembleGroup4
>abe9		db					.byte $db
.abea						Assemble_inx:
.abea		20 14 85	jsr $8514		jsr	AssembleGroup4
>abed		e8					.byte $e8
.abee						Assemble_nop:
.abee		20 14 85	jsr $8514		jsr	AssembleGroup4
>abf1		ea					.byte $ea
.abf2						Assemble_sed:
.abf2		20 14 85	jsr $8514		jsr	AssembleGroup4
>abf5		f8					.byte $f8
.abf6						Assemble_plx:
.abf6		20 14 85	jsr $8514		jsr	AssembleGroup4
>abf9		fa					.byte $fa

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/constants.asm

.abfa						DecimalScalarTable:
>abfa		66 66 66 66				.dword $66666666 ; 0.1
>abfe		de					.byte $de
>abff		1f 85 eb 51				.dword $51eb851f ; 0.01
>ac03		db					.byte $db
>ac04		4c 37 89 41				.dword $4189374c ; 0.001
>ac08		d8					.byte $d8
>ac09		ac 8b db 68				.dword $68db8bac ; 0.0001
>ac0d		d4					.byte $d4
>ac0e		24 d6 e2 53				.dword $53e2d624 ; 1e-05
>ac12		d1					.byte $d1
>ac13		83 de 1b 43				.dword $431bde83 ; 1e-06
>ac17		ce					.byte $ce
>ac18		6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>ac1c		ca					.byte $ca
>ac1d		89 3b e6 55				.dword $55e63b89 ; 1e-08
>ac21		c7					.byte $c7
>ac22		a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>ac26		c4					.byte $c4
>ac27		67 7f f3 6d				.dword $6df37f67 ; 1e-10
>ac2b		c0					.byte $c0
>ac2c		86 ff f5 57				.dword $57f5ff86 ; 1e-11
>ac30		bd					.byte $bd

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.asm

.ac31						SyntaxError:
.ac31		a9 02		lda #$02		lda	#2
.ac33		4c 35 9a	jmp $9a35		jmp	ErrorHandler
.ac36						RangeError:
.ac36		a9 04		lda #$04		lda	#4
.ac38		4c 35 9a	jmp $9a35		jmp	ErrorHandler
.ac3b						TypeError:
.ac3b		a9 05		lda #$05		lda	#5
.ac3d		4c 35 9a	jmp $9a35		jmp	ErrorHandler
.ac40						ArgumentError:
.ac40		a9 07		lda #$07		lda	#7
.ac42		4c 35 9a	jmp $9a35		jmp	ErrorHandler
.ac45						NotDoneError:
.ac45		a9 0c		lda #$0c		lda	#12
.ac47		4c 35 9a	jmp $9a35		jmp	ErrorHandler
.ac4a						ErrorText:
>ac4a		42 72 65 61 6b 00			.text	"Break",0
>ac50		53 79 6e 74 61 78 20 65			.text	"Syntax error",0
>ac58		72 72 6f 72 00
>ac5d		44 69 76 69 73 69 6f 6e			.text	"Division by zero",0
>ac65		20 62 79 20 7a 65 72 6f 00
>ac6e		4f 75 74 20 6f 66 20 52			.text	"Out of Range",0
>ac76		61 6e 67 65 00
>ac7b		54 79 70 65 20 6d 69 73			.text	"Type mismatch",0
>ac83		6d 61 74 63 68 00
>ac89		4f 75 74 20 6f 66 20 6d			.text	"Out of memory",0
>ac91		65 6d 6f 72 79 00
>ac97		49 6c 6c 65 67 61 6c 20			.text	"Illegal argument",0
>ac9f		61 72 67 75 6d 65 6e 74 00
>aca8		53 74 6f 70 00				.text	"Stop",0
>acad		53 74 72 69 6e 67 20 74			.text	"String too long",0
>acb5		6f 6f 20 6c 6f 6e 67 00
>acbd		41 73 73 65 72 74 69 6f			.text	"Assertion failed",0
>acc5		6e 20 66 61 69 6c 65 64 00
>acce		4f 75 74 20 6f 66 20 64			.text	"Out of data",0
>acd6		61 74 61 00
>acda		55 6e 69 6d 70 6c 65 6d			.text	"Unimplemented",0
>ace2		65 6e 74 65 64 00
>ace8		4e 6f 20 73 75 63 68 20			.text	"No such line number",0
>acf0		6c 69 6e 65 20 6e 75 6d 62 65 72 00
>acfc		52 65 74 75 72 6e 20 77			.text	"Return without Gosub",0
>ad04		69 74 68 6f 75 74 20 47 6f 73 75 62 00
>ad11		55 6e 74 69 6c 20 77 69			.text	"Until without Repeat",0
>ad19		74 68 6f 75 74 20 52 65 70 65 61 74 00
>ad26		57 65 6e 64 20 77 69 74			.text	"Wend without While",0
>ad2e		68 6f 75 74 20 57 68 69 6c 65 00
>ad39		4e 65 78 74 20 77 69 74			.text	"Next without For",0
>ad41		68 6f 75 74 20 46 6f 72 00
>ad4a		42 41 53 49 43 20 53 74			.text	"BASIC Stack full",0
>ad52		61 63 6b 20 66 75 6c 6c 00
>ad5b		4f 70 65 6e 20 53 74 72			.text	"Open Structure",0
>ad63		75 63 74 75 72 65 00
>ad6a		45 6e 64 50 72 6f 63 20			.text	"EndProc without call",0
>ad72		77 69 74 68 6f 75 74 20 63 61 6c 6c 00
>ad7f		41 72 72 61 79 20 61 6c			.text	"Array already defined",0
>ad87		72 65 61 64 79 20 64 65 66 69 6e 65 64 00
>ad95		41 72 72 61 79 20 73 69			.text	"Array size",0
>ad9d		7a 65 00
>ada0		42 61 64 20 61 72 72 61			.text	"Bad array index",0
>ada8		79 20 69 6e 64 65 78 00
>adb0		41 72 72 61 79 20 6e 6f			.text	"Array not declared",0
>adb8		74 20 64 65 63 6c 61 72 65 64 00
>adc3		46 69 6c 65 20 6e 6f 74			.text	"File not found",0
>adcb		20 66 6f 75 6e 64 00
>add2		53 74 6f 72 61 67 65 20			.text	"Storage error",0
>adda		65 72 72 6f 72 00
>ade0		56 65 72 69 66 79 20 66			.text	"Verify failed",0
>ade8		61 69 6c 65 64 00

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/timestamp.asm

>e7fa		09 09 31 30 2f 30 32 2f			.text 9,9,"10/02/23 33"
>e802		32 33 20 33 33

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/memory/memory.flat/delete.asm

.adee						MemoryDeleteLine:
.adee		20 0d ae	jsr $ae0d			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.adf1		b2 30		lda ($30)			lda 	(codePtr) 					; size to delete => y
.adf3		a8		tay				tay
.adf4						_MDDLLoop:
.adf4		b1 30		lda ($30),y			lda 	(codePtr),y 				; copy down
.adf6		92 30		sta ($30)			sta 	(codePtr)
.adf8		a5 30		lda $30				lda 	codePtr 					; check done the lot.
.adfa		c5 3a		cmp $3a				cmp 	zTemp2 						; has codePtr (copyFrom) reached the last byte to copy.
.adfc		d0 07		bne $ae05			bne 	_MDLDLNext
.adfe		a5 31		lda $31				lda 	codePtr+1
.ae00		c5 3b		cmp $3b				cmp 	zTemp2+1
.ae02		d0 01		bne $ae05			bne 	_MDLDLNext
.ae04						_MDDLExit:
.ae04		60		rts				rts
.ae05						_MDLDLNext:
.ae05		e6 30		inc $30				inc 	codePtr						; next byte
.ae07		d0 eb		bne $adf4			bne 	_MDDLLoop
.ae09		e6 31		inc $31				inc 	codePtr+1
.ae0b		80 e7		bra $adf4			bra 	_MDDLLoop
.ae0d						IMemoryFindEnd:
.ae0d		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.ae0f		85 3a		sta $3a				sta 	0+zTemp2
.ae11		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.ae13		85 3b		sta $3b				sta 	1+zTemp2
.ae15						_MDLFELoop:
.ae15		b2 3a		lda ($3a)			lda 	(zTemp2) 					; scan forward using offsets.
.ae17		f0 0b		beq $ae24			beq 	_MDLFEExit
.ae19		18		clc				clc
.ae1a		65 3a		adc $3a				adc 	zTemp2
.ae1c		85 3a		sta $3a				sta 	zTemp2
.ae1e		90 f5		bcc $ae15			bcc 	_MDLFELoop
.ae20		e6 3b		inc $3b				inc 	zTemp2+1
.ae22		80 f1		bra $ae15			bra 	_MDLFELoop
.ae24						_MDLFEExit:
.ae24		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/memory/memory.flat/insert.asm

.ae25						MemoryInsertLine:
.ae25		08		php				php
.ae26		20 0d ae	jsr $ae0d			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.ae29		a5 3b		lda $3b				lda 	zTemp2+1 					; is there space for the new line ?
.ae2b		1a		inc a				inc 	a
.ae2c		c9 7f		cmp #$7f			cmp 	#(BasicEnd >> 8)-1
.ae2e		b0 36		bcs $ae66			bcs 	_MDLIError 					; no, fail.
.ae30		28		plp				plp 								; do at a specific point or the end ?
.ae31		90 08		bcc $ae3b			bcc 	_MDLIFound 					; if specific point already set.
.ae33		a5 3a		lda $3a				lda 	zTemp2 						; if CS on entry append, so put on the
.ae35		85 30		sta $30				sta 	codePtr 					; end.
.ae37		a5 3b		lda $3b				lda 	zTemp2+1
.ae39		85 31		sta $31				sta 	codePtr+1
.ae3b						_MDLIFound:
.ae3b		ad 26 04	lda $0426			lda 	tokenOffset 				; insert gap in Y, the offset, e.g. length of the new line
.ae3e		a8		tay				tay
.ae3f						_MDLIInsert:
.ae3f		b2 3a		lda ($3a)			lda 	(zTemp2) 					; shift one byte up , at least one covers end case (copying link 0)
.ae41		91 3a		sta ($3a),y			sta 	(zTemp2),y 					; work from top down.
.ae43		a5 30		lda $30				lda 	codePtr 					; reached insert point ?
.ae45		c5 3a		cmp $3a				cmp 	zTemp2
.ae47		d0 06		bne $ae4f			bne 	_MDLINext
.ae49		a5 31		lda $31				lda 	codePtr+1
.ae4b		c5 3b		cmp $3b				cmp 	zTemp2+1
.ae4d		f0 0a		beq $ae59			beq 	_MDLIHaveSpace
.ae4f						_MDLINext:
.ae4f		a5 3a		lda $3a				lda 	zTemp2 						; if no, keep zTemp2 going backwards opening up space.
.ae51		d0 02		bne $ae55			bne 	_MDLINoBorrow
.ae53		c6 3b		dec $3b				dec 	zTemp2+1
.ae55						_MDLINoBorrow:
.ae55		c6 3a		dec $3a				dec 	zTemp2
.ae57		80 e6		bra $ae3f			bra 	_MDLIInsert
.ae59						_MDLIHaveSpace:
.ae59		ac 26 04	ldy $0426			ldy 	tokenOffset 				; bytes to copy
.ae5c		88		dey				dey 								; from offset-1 (last written) to the end of the buffer.
.ae5d						_MDLICopy:
.ae5d		b9 26 04	lda $0426,y			lda 	tokenOffset,y
.ae60		91 30		sta ($30),y			sta 	(codePtr),y
.ae62		88		dey				dey
.ae63		10 f8		bpl $ae5d			bpl 	_MDLICopy
.ae65		60		rts				rts
.ae66						_MDLIError:
.ae66		a9 06		lda #$06		lda	#6
.ae68		4c 35 9a	jmp $9a35		jmp	ErrorHandler
.ae6b						MDLAppendLine:
.ae6b		86 37		stx $37				stx 	zTemp0+1 					; save new line at zTemp0
.ae6d		85 36		sta $36				sta 	zTemp0
.ae6f		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.ae71		85 38		sta $38				sta 	0+zTemp1
.ae73		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.ae75		85 39		sta $39				sta 	1+zTemp1
.ae77		b2 38		lda ($38)			lda 	(zTemp1)
.ae79		d0 0a		bne $ae85			bne 	_MDLANoInitialise
.ae7b		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.ae7d		8d b1 07	sta $07b1			sta 	0+AppendPointer
.ae80		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.ae82		8d b2 07	sta $07b2			sta 	1+AppendPointer
.ae85						_MDLANoInitialise:
.ae85		18		clc				clc
.ae86		ad b1 07	lda $07b1			lda 	AppendPointer 				; copy append pointer to zTemp1 adding the offset as you go
.ae89		85 38		sta $38				sta 	zTemp1
.ae8b		72 36		adc ($36)			adc 	(zTemp0)
.ae8d		8d b1 07	sta $07b1			sta 	AppendPointer
.ae90		ad b2 07	lda $07b2			lda 	AppendPointer+1
.ae93		85 39		sta $39				sta 	zTemp1+1
.ae95		69 00		adc #$00			adc 	#0
.ae97		8d b2 07	sta $07b2			sta 	AppendPointer+1
.ae9a		a0 00		ldy #$00			ldy 	#0
.ae9c						_MDLACopy:
.ae9c		b1 36		lda ($36),y			lda 	(zTemp0),y 					; copy new line in
.ae9e		91 38		sta ($38),y			sta 	(zTemp1),y
.aea0		c8		iny				iny
.aea1		98		tya				tya
.aea2		d2 36		cmp ($36)			cmp 	(zTemp0) 					; done whole line
.aea4		d0 f6		bne $ae9c			bne 	_MDLACopy
.aea6		a9 00		lda #$00			lda 	#0 							; end of program.
.aea8		91 38		sta ($38),y			sta 	(zTemp1),y
.aeaa		60		rts				rts
.07b1						AppendPointer:
>07b1								.fill 	2

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/memory/memory.flat/memory.asm

.aeab						MemoryNew:
.aeab		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.aead		85 30		sta $30				sta 	codePtr
.aeaf		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.aeb1		85 31		sta $31				sta 	codePtr+1
.aeb3		a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.aeb5		92 30		sta ($30)			sta 	(codePtr)
.aeb7		60		rts				rts
.aeb8						MemoryInline:
.aeb8		98		tya				tya 								; put address into stack,x
.aeb9		18		clc				clc  								; get the offset, add codePtr
.aeba		65 30		adc $30				adc 	codePtr
.aebc		95 58		sta $58,x			sta 	NSMantissa0,x 				; store the result in the mantissa.
.aebe		a5 31		lda $31				lda 	codePtr+1
.aec0		69 00		adc #$00			adc 	#0
.aec2		95 60		sta $60,x			sta 	NSMantissa1,x
.aec4		74 68		stz $68,x			stz 	NSMantissa2,x
.aec6		74 70		stz $70,x			stz 	NSMantissa3,x
.aec8		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/memory/memory.flat/search.asm

.aec9						MemorySearch:
.aec9		85 36		sta $36				sta 	zTemp0 						; save line number in zTemp0
.aecb		86 37		stx $37				stx 	zTemp0+1
.aecd		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.aecf		85 30		sta $30				sta 	codePtr
.aed1		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.aed3		85 31		sta $31				sta 	codePtr+1
.aed5						_MTAXLoop:
.aed5		b2 30		lda ($30)			lda 	(codePtr)
.aed7		18		clc				clc
.aed8		f0 21		beq $aefb			beq 	_MTAXExit 					; reached end, exit with CC.
.aeda		a0 01		ldy #$01			ldy 	#1 							; calculate current line# - requested line#
.aedc		b1 30		lda ($30),y			lda 	(codePtr),y
.aede		38		sec				sec
.aedf		e5 36		sbc $36				sbc 	zTemp0
.aee1		85 38		sta $38				sta 	zTemp1 						; save interim to set Z
.aee3		c8		iny				iny 								; do the MSB
.aee4		b1 30		lda ($30),y			lda 	(codePtr),y
.aee6		e5 37		sbc $37				sbc 	zTemp0+1
.aee8		05 38		ora $38				ora 	zTemp1 						; will set Z if result is zero, doesn't affect carry flag
.aeea		f0 0f		beq $aefb			beq 	_MTAXExit	 				; found so exit (CS will be set)
.aeec		b0 0d		bcs $aefb			bcs 	_MTAXExit 					; current < required exit
.aeee		18		clc				clc
.aeef		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.aef1		65 30		adc $30				adc 	codePtr
.aef3		85 30		sta $30				sta 	codePtr
.aef5		90 02		bcc $aef9			bcc 	_CREExit
.aef7		e6 31		inc $31				inc 	codePtr+1 					; carry
.aef9						_CREExit:
.aef9		80 da		bra $aed5			bra 	_MTAXLoop
.aefb						_MTAXExit:
.aefb		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/graphics/gcommand.asm

.aefc						RectangleCommand:
.aefc		a9 44		lda #$44			lda 	#GCMD_FrameRect				; frame rectangle
.aefe		80 02		bra $af02			bra 	ShapeDrawCmd
.af00						CircleCommand:
.af00		a9 48		lda #$48			lda 	#GCMD_FrameCircle 				; framed circle
.af02						ShapeDrawCmd:
.af02		20 8c af	jsr $af8c			jsr 	RunGraphicsCommand
.af05						ShapeDraw:
.af05		0d b4 07	ora $07b4			ora 	gxFillSolid  				; adjust AXY for solid fill.
.af08		4c 80 af	jmp $af80			jmp 	ExecuteGraphicCommand	 	; and complete
.af0b						SpriteCommand:
.af0b		a2 00		ldx #$00			ldx 	#0
.af0d		20 30 a9	jsr $a930			jsr 	Evaluate8BitInteger 		; get image number.
.af10		5a		phy				phy
.af11		a9 0e		lda #$0e			lda 	#GCMD_SpriteUse 			; use that image.
.af13		a6 58		ldx $58				ldx 	NSMantissa0
.af15		e0 40		cpx #$40			cpx 	#64 						; 0-63 only
.af17		b0 0d		bcs $af26			bcs 	_SCRange
.af19		a0 ff		ldy #$ff			ldy 	#255
.af1b		20 61 80	jsr $8061			jsr 	GXGraphicDraw
.af1e		a9 52		lda #$52			lda 	#GCMD_SpriteMove
.af20		7a		ply				ply
.af21		20 8c af	jsr $af8c			jsr 	RunGraphicsCommand
.af24		80 5a		bra $af80			bra 	ExecuteGraphicCommand
.af26						_SCRange:
.af26		4c 36 ac	jmp $ac36			jmp 	RangeError
.af29						ImageCommand:
.af29		a2 00		ldx #$00			ldx 	#0
.af2b		20 30 a9	jsr $a930			jsr 	Evaluate8BitInteger 		; get image number.
.af2e		20 8c af	jsr $af8c			jsr 	RunGraphicsCommand
.af31						ImageRunDraw:
.af31		09 40		ora #$40			ora 	#GCMD_Move					; move cursor
.af33		20 61 80	jsr $8061			jsr 	GXGraphicDraw
.af36		ad ba 07	lda $07ba			lda 	gxDrawScale
.af39		0a		asl a				asl 	a
.af3a		0a		asl a				asl 	a
.af3b		0a		asl a				asl 	a
.af3c		a8		tay				tay
.af3d		a9 0c		lda #$0c			lda 	#GCMD_DrawSprite 			; image drawing
.af3f		a6 58		ldx $58				ldx 	NSMantissa0
.af41		20 61 80	jsr $8061			jsr 	GXGraphicDraw
.af44		60		rts				rts
.af45						TextCommand:
.af45		a2 00		ldx #$00			ldx 	#0
.af47		20 ed a8	jsr $a8ed			jsr 	EvaluateString 				; get text
.af4a		20 8c af	jsr $af8c			jsr 	RunGraphicsCommand
.af4d						TextRunDraw:
.af4d		09 40		ora #$40			ora 	#GCMD_Move 					; move cursor
.af4f		20 61 80	jsr $8061			jsr 	GXGraphicDraw
.af52		a0 00		ldy #$00			ldy 	#0
.af54						_IRDLoop:
.af54		a5 60		lda $60				lda 	NSMantissa1 				; access character
.af56		85 37		sta $37				sta 	zTemp0+1
.af58		a5 58		lda $58				lda 	NSMantissa0
.af5a		85 36		sta $36				sta 	zTemp0
.af5c		b1 36		lda ($36),y			lda 	(zTemp0),y
.af5e		f0 13		beq $af73			beq 	_IRDExit
.af60		5a		phy				phy									; save string pos
.af61		48		pha				pha 								; save char
.af62		ad ba 07	lda $07ba			lda 	gxDrawScale 				; get scale
.af65		0a		asl a				asl 	a
.af66		0a		asl a				asl 	a
.af67		0a		asl a				asl 	a
.af68		a8		tay				tay
.af69		a9 0a		lda #$0a			lda 	#GCMD_DrawFont 				; char drawing
.af6b		fa		plx				plx 								; char to draw
.af6c		20 61 80	jsr $8061			jsr 	GXGraphicDraw
.af6f		7a		ply				ply 								; restore string pos
.af70		c8		iny				iny
.af71		90 e1		bcc $af54			bcc 	_IRDLoop 					; go back if no error.
.af73						_IRDExit:
.af73		60		rts				rts
.af74						PlotCommand:
.af74		a9 50		lda #$50			lda 	#GCMD_Plot 					; command ID to use
.af76		20 8c af	jsr $af8c			jsr 	RunGraphicsCommand
.af79		80 05		bra $af80			bra 	ExecuteGraphicCommand
.af7b						LineCommand:
.af7b		a9 42		lda #$42			lda 	#GCMD_Line 						; command ID to use
.af7d		20 8c af	jsr $af8c			jsr 	RunGraphicsCommand
.af80						ExecuteGraphicCommand:
.af80		0d b3 07	ora $07b3			ora 	gxCommandID 				; make a full command
.af83		20 61 80	jsr $8061			jsr 	GXGraphicDraw 				; draw it and exit
.af86		b0 01		bcs $af89			bcs 	_EGCError
.af88		60		rts				rts
.af89						_EGCError:
.af89		4c 31 ac	jmp $ac31			jmp 	SyntaxError
.af8c						RunGraphicsCommand:
.af8c		8d b3 07	sta $07b3			sta 	gxCommandID					; save TODO graphics command.
.af8f		68		pla				pla 								; pop handler address
.af90		fa		plx				plx
.af91		1a		inc a				inc 	a
.af92		d0 01		bne $af95			bne 	_RGINoCarry
.af94		e8		inx				inx
.af95						_RGINoCarry:
.af95		8d b8 07	sta $07b8			sta 	gxHandler
.af98		8e b9 07	stx $07b9			stx 	gxHandler+1
.af9b						_RGICommandLoop:
.af9b		b1 30		lda ($30),y			lda 	(codePtr),y
.af9d		c8		iny				iny
.af9e		c9 db		cmp #$db			cmp 	#KWD_TO						; is it TO x,y
.afa0		f0 53		beq $aff5			beq 	_RGI_To
.afa2		c9 c5		cmp #$c5			cmp 	#KWD_HERE 					; do it here.
.afa4		f0 55		beq $affb			beq 	_RGI_Here
.afa6		c9 80		cmp #$80			cmp 	#KWC_EOL 					; EOL or : , exit
.afa8		f0 3d		beq $afe7			beq 	_RGI_Exit
.afaa		c9 3a		cmp #$3a			cmp 	#KWD_COLON
.afac		f0 39		beq $afe7			beq 	_RGI_Exit
.afae		c9 cd		cmp #$cd			cmp 	#KWD_OUTLINE 				; solid or outline
.afb0		f0 3e		beq $aff0			beq 	_RGI_Frame
.afb2		c9 d7		cmp #$d7			cmp 	#KWD_SOLID
.afb4		f0 33		beq $afe9			beq 	_RGI_Solid
.afb6		c9 b9		cmp #$b9			cmp 	#KWD_BY 					; by offset
.afb8		f0 4b		beq $b005			beq 	_RGI_By
.afba		c9 c3		cmp #$c3			cmp 	#KWD_FROM 					; from
.afbc		f0 17		beq $afd5			beq 	_RGI_Move2
.afbe		c9 c0		cmp #$c0			cmp 	#KWD_DIM 					; dim (set scale)
.afc0		f0 62		beq $b024			beq 	_RGI_Dim
.afc2		c9 be		cmp #$be			cmp 	#KWD_COLOUR 				; colour or Color
.afc4		f0 74		beq $b03a			beq 	_RGI_Colour
.afc6		c9 bd		cmp #$bd			cmp 	#KWD_COLOR
.afc8		f0 70		beq $b03a			beq 	_RGI_Colour
.afca		ae b3 07	ldx $07b3			ldx 	gxCommandID
.afcd		e0 52		cpx #$52			cpx 	#GCMD_SpriteMove 			; if not sprite
.afcf		d0 03		bne $afd4			bne 	_RGI_Move 					; move
.afd1		4c 62 b0	jmp $b062			jmp		_RGI_SpriteInstructions
.afd4						_RGI_Move:
.afd4		88		dey				dey 								; unpick get.
.afd5						_RGI_Move2:
.afd5		20 88 b0	jsr $b088			jsr 	GCGetCoordinatePair 		; move to here
.afd8		20 af b0	jsr $b0af			jsr 	GCCopyPairToStore 			; save
.afdb		5a		phy				phy
.afdc		20 a5 b0	jsr $b0a5			jsr 	GCLoadAXY 					; load in
.afdf		09 40		ora #$40			ora 	#GCMD_Move 					; move there
.afe1		20 61 80	jsr $8061			jsr 	GXGraphicDraw
.afe4		7a		ply				ply
.afe5		80 b4		bra $af9b			bra 	_RGICommandLoop 			; and go round
.afe7						_RGI_Exit:
.afe7		88		dey				dey 								; unpick : / EOL
.afe8		60		rts				rts
.afe9						_RGI_Solid:
.afe9		a9 02		lda #$02			lda 	#2
.afeb		8d b4 07	sta $07b4			sta 	gxFillSolid
.afee		80 ab		bra $af9b			bra 	_RGICommandLoop
.aff0						_RGI_Frame:
.aff0		9c b4 07	stz $07b4			stz 	gxFillSolid
.aff3		80 a6		bra $af9b			bra 	_RGICommandLoop
.aff5						_RGI_To:
.aff5		20 88 b0	jsr $b088			jsr 	GCGetCoordinatePair 		; get coordinate pair into slot #1,#2
.aff8		20 af b0	jsr $b0af			jsr 	GCCopyPairToStore
.affb						_RGI_Here:
.affb		5a		phy				phy
.affc		20 a5 b0	jsr $b0a5			jsr 	GCLoadAXY 					; load it into AXY
.afff		20 5f b0	jsr $b05f			jsr 	_RGICallHandler 			; go do whatever it is.
.b002		7a		ply				ply
.b003		80 96		bra $af9b			bra 	_RGICommandLoop 			; and go round
.b005						_RGI_By:
.b005		20 95 b0	jsr $b095			jsr 	GCSignedCoordinatePair 		; get coordinate pair into slot #1,#2
.b008		18		clc				clc
.b009		a5 59		lda $59				lda 	NSMantissa0+1 				; copy it into space.
.b00b		6d b5 07	adc $07b5			adc 	gxXPos
.b00e		8d b5 07	sta $07b5			sta 	gxXPos
.b011		a5 61		lda $61				lda 	NSMantissa1+1
.b013		6d b6 07	adc $07b6			adc 	gxXPos+1
.b016		8d b6 07	sta $07b6			sta 	gxXPos+1
.b019		a5 5a		lda $5a				lda 	NSMantissa0+2
.b01b		18		clc				clc
.b01c		6d b7 07	adc $07b7			adc 	gxYPos
.b01f		8d b7 07	sta $07b7			sta 	gxYPos
.b022		80 d7		bra $affb			bra 	_RGI_Here
.b024						_RGI_Dim:
.b024		a2 01		ldx #$01			ldx	 	#1
.b026		20 30 a9	jsr $a930			jsr 	Evaluate8BitInteger
.b029		a5 59		lda $59				lda 	NSMantissa0+1
.b02b		c9 00		cmp #$00			cmp 	#0
.b02d		f0 2d		beq $b05c			beq 	_RGIRange
.b02f		c9 09		cmp #$09			cmp 	#8+1
.b031		b0 29		bcs $b05c			bcs		_RGIRange
.b033		3a		dec a				dec 	a
.b034		8d ba 07	sta $07ba			sta 	gxDrawScale
.b037		4c 9b af	jmp $af9b			jmp 	_RGICommandLoop
.b03a						_RGI_Colour:
.b03a		a2 01		ldx #$01			ldx 	#1 							; colour
.b03c		20 30 a9	jsr $a930			jsr 	Evaluate8BitInteger
.b03f		a2 02		ldx #$02			ldx 	#2 							; default zero for 2nd parameter
.b041		20 95 a9	jsr $a995			jsr 	NSMSetZero
.b044		b1 30		lda ($30),y			lda 	(codePtr),y
.b046		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; check , => mode.
.b048		d0 04		bne $b04e			bne 	_RGICDefaultMode
.b04a		c8		iny				iny
.b04b		20 30 a9	jsr $a930			jsr 	Evaluate8BitInteger
.b04e						_RGICDefaultMode:
.b04e		5a		phy				phy
.b04f		a9 08		lda #$08			lda 	#GCMD_Colour 				; set colour.
.b051		a6 59		ldx $59				ldx 	NSMantissa0+1
.b053		a4 5a		ldy $5a				ldy 	NSMantissa0+2
.b055		20 61 80	jsr $8061			jsr 	GXGraphicDraw
.b058		7a		ply				ply
.b059		4c 9b af	jmp $af9b			jmp 	_RGICommandLoop 			; and go round
.b05c						_RGIRange:
.b05c		4c 36 ac	jmp $ac36			jmp 	RangeError
.b05f						_RGICallHandler:
.b05f		6c b8 07	jmp ($07b8)			jmp 	(gxHandler)
.b062						_RGI_SpriteInstructions:
.b062		c9 cb		cmp #$cb			cmp 	#KWD_OFF
.b064		f0 07		beq $b06d			beq 	_RGISpriteOff
.b066		c9 c6		cmp #$c6			cmp 	#KWD_IMAGE
.b068		f0 13		beq $b07d			beq 	_RGISetImage
.b06a		4c d4 af	jmp $afd4			jmp 	_RGI_Move
.b06d						_RGISpriteOff:
.b06d		5a		phy				phy
.b06e		a0 01		ldy #$01			ldy 	#1
.b070		a2 00		ldx #$00			ldx 	#0
.b072						_RGIDoCommandLoop:
.b072		a9 10		lda #$10			lda 	#GCMD_SpriteImage
.b074		20 61 80	jsr $8061			jsr 	GXGraphicDraw
.b077		7a		ply				ply
.b078		b0 e2		bcs $b05c			bcs 	_RGIRange
.b07a		4c 9b af	jmp $af9b			jmp 	_RGICommandLoop
.b07d						_RGISetImage:
.b07d		a2 01		ldx #$01			ldx 	#1
.b07f		20 30 a9	jsr $a930			jsr 	Evaluate8BitInteger
.b082		5a		phy				phy
.b083		aa		tax				tax
.b084		a0 00		ldy #$00			ldy 	#0
.b086		80 ea		bra $b072			bra 	_RGIDoCommandLoop
.b088						GCGetCoordinatePair:
.b088		a2 01		ldx #$01			ldx 	#1
.b08a		20 15 a9	jsr $a915			jsr 	Evaluate16BitInteger
.b08d		20 24 9a	jsr $9a24			jsr 	CheckComma
.b090		e8		inx				inx
.b091		20 15 a9	jsr $a915			jsr 	Evaluate16BitInteger
.b094		60		rts				rts
.b095						GCSignedCoordinatePair:
.b095		a2 01		ldx #$01			ldx 	#1
.b097		20 1f a9	jsr $a91f			jsr 	Evaluate16BitIntegerSigned
.b09a		20 24 9a	jsr $9a24			jsr 	CheckComma
.b09d		e8		inx				inx
.b09e		20 1f a9	jsr $a91f			jsr 	Evaluate16BitIntegerSigned
.b0a1		60		rts				rts
.b0a2						_GCCPRange:
.b0a2		4c 36 ac	jmp $ac36			jmp 	RangeError
.b0a5						GCLoadAXY:
.b0a5		ad b6 07	lda $07b6			lda 	gxXPos+1
.b0a8		ae b5 07	ldx $07b5			ldx 	gxXPos
.b0ab		ac b7 07	ldy $07b7			ldy 	gxYPos
.b0ae		60		rts				rts
.b0af						GCCopyPairToStore:
.b0af		a5 59		lda $59				lda 	NSMantissa0+1 				; copy it into space.
.b0b1		8d b5 07	sta $07b5			sta 	gxXPos
.b0b4		a5 61		lda $61				lda 	NSMantissa1+1
.b0b6		8d b6 07	sta $07b6			sta 	gxXPos+1
.b0b9		a5 5a		lda $5a				lda 	NSMantissa0+2
.b0bb		8d b7 07	sta $07b7			sta 	gxYPos
.b0be		60		rts				rts
.07b3						gxCommandID:
>07b3								.fill 	1
.07b4						gxFillSolid:
>07b4								.fill 	1
.07b5						gxXPos:
>07b5								.fill 	2
.07b7						gxYPos:
>07b7								.fill 	1
.07b8						gxHandler:
>07b8								.fill 	2
.07ba						gxDrawScale:
>07ba								.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/graphics/gcontrol.asm

.b0bf						BitmapCtrl:
.b0bf		b1 30		lda ($30),y			lda 	(codePtr),y
.b0c1		c8		iny				iny
.b0c2		a2 01		ldx #$01			ldx 	#1
.b0c4		c9 cc		cmp #$cc			cmp 	#KWD_ON
.b0c6		f0 11		beq $b0d9			beq 	BitmapSwitch
.b0c8		ca		dex				dex
.b0c9		c9 cb		cmp #$cb			cmp 	#KWD_OFF
.b0cb		f0 0c		beq $b0d9			beq 	BitmapSwitch
.b0cd		20 30 a9	jsr $a930			jsr 	Evaluate8BitInteger 		; get the colour
.b0d0		5a		phy				phy
.b0d1		aa		tax				tax
.b0d2		a9 06		lda #$06			lda 	#GCMD_Clear					; clear to that colour
.b0d4		20 61 80	jsr $8061			jsr 	GXGraphicDraw
.b0d7		7a		ply				ply
.b0d8		60		rts				rts
.b0d9						BitmapSwitch:
.b0d9		5a		phy				phy
.b0da		a0 00		ldy #$00			ldy 	#0 							; gfx 1,on/off,0
.b0dc		a9 02		lda #$02			lda 	#GCMD_BitmapCtl
.b0de		20 61 80	jsr $8061			jsr 	GXGraphicDraw
.b0e1		a9 08		lda #$08			lda 	#GCMD_Colour				; set colour to $FF
.b0e3		a0 00		ldy #$00			ldy 	#0
.b0e5		a2 ff		ldx #$ff			ldx 	#$FF
.b0e7		20 61 80	jsr $8061			jsr 	GXGraphicDraw
.b0ea		9c b4 07	stz $07b4			stz 	gxFillSolid
.b0ed		9c b5 07	stz $07b5			stz 	gxXPos
.b0f0		9c b6 07	stz $07b6			stz 	gxXPos+1
.b0f3		9c b7 07	stz $07b7			stz 	gxYPos
.b0f6		9c ba 07	stz $07ba			stz 	gxDrawScale
.b0f9		a9 40		lda #$40			lda 	#GCMD_Move 						; home cursor
.b0fb		a2 00		ldx #$00			ldx 	#0
.b0fd		a0 00		ldy #$00			ldy 	#0
.b0ff		20 61 80	jsr $8061			jsr 	GXGraphicDraw
.b102		7a		ply				ply
.b103		60		rts				rts
.b104						SpritesCtrl:
.b104		b1 30		lda ($30),y			lda 	(codePtr),y
.b106		c8		iny				iny
.b107		a2 01		ldx #$01			ldx 	#1
.b109		c9 cc		cmp #$cc			cmp 	#KWD_ON
.b10b		f0 08		beq $b115			beq 	SpriteSwitch
.b10d		ca		dex				dex
.b10e		c9 cb		cmp #$cb			cmp 	#KWD_OFF
.b110		f0 03		beq $b115			beq 	SpriteSwitch
.b112		4c 31 ac	jmp $ac31			jmp 	SyntaxError
.b115						SpriteSwitch:
.b115		5a		phy				phy
.b116		a0 00		ldy #$00			ldy 	#0 							; gfx 2,on/off,0
.b118		a9 04		lda #$04			lda 	#GCMD_SpriteCtl
.b11a		20 61 80	jsr $8061			jsr 	GXGraphicDraw
.b11d		7a		ply				ply
.b11e		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/graphics/gfx.asm

.b11f						GfxCommand:
.b11f		a2 00		ldx #$00			ldx 	#0
.b121		20 30 a9	jsr $a930			jsr 	Evaluate8BitInteger 		; command
.b124		20 24 9a	jsr $9a24			jsr 	CheckComma
.b127		e8		inx				inx
.b128		20 15 a9	jsr $a915			jsr 	Evaluate16BitInteger 		; X
.b12b		20 24 9a	jsr $9a24			jsr 	CheckComma
.b12e		e8		inx				inx
.b12f		20 30 a9	jsr $a930			jsr 	Evaluate8BitInteger 		; Y
.b132		a5 61		lda $61				lda 	NSMantissa1+1  				; shift bit 0 of X into CS, should now be zero
.b134		4a		lsr a				lsr 	a
.b135		d0 12		bne $b149			bne 	_GfxError
.b137		26 58		rol $58				rol 	NSMantissa0 				; rotate into command
.b139		b0 0e		bcs $b149			bcs 	_GfxError 					; bit 7 should have been zero
.b13b		5a		phy				phy 								; save pos
.b13c		a5 58		lda $58				lda 	NSMantissa0 				; do the command
.b13e		a6 59		ldx $59				ldx 	NSMantissa0+1
.b140		a4 5a		ldy $5a				ldy 	NSMantissa0+2
.b142		20 61 80	jsr $8061			jsr 	GXGraphicDraw
.b145		b0 02		bcs $b149			bcs 	_GfxError
.b147		7a		ply				ply 								; restore pos and exit.
.b148		60		rts				rts
.b149						_GfxError:
.b149		4c 36 ac	jmp $ac36			jmp 	RangeError

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/graphics/hit.asm

.b14c						UnaryHit:
.b14c		fa		plx				plx
.b14d		a9 36		lda #$36			lda 	#zTemp0
.b14f		20 30 a9	jsr $a930			jsr 	Evaluate8BitInteger 		; get sprite number 0
.b152		20 24 9a	jsr $9a24			jsr 	CheckComma
.b155		e8		inx				inx
.b156		20 30 a9	jsr $a930			jsr 	Evaluate8BitInteger 		; get sprite number 1
.b159		20 1c 9a	jsr $9a1c			jsr		CheckRightBracket
.b15c		ca		dex				dex 								; fix back up again.
.b15d		da		phx				phx 								; save X/Y
.b15e		5a		phy				phy
.b15f		b4 59		ldy $59,x			ldy 	NSMantissa0+1,x 			; get the sprite numbers into X/Y
.b161		b5 58		lda $58,x			lda 	NSMantissa0,x
.b163		aa		tax				tax
.b164		a9 12		lda #$12			lda 	#GCMD_SpriteCollide 		; command check collision.
.b166		20 61 80	jsr $8061			jsr 	GXGraphicDraw 				; calculate result
.b169		1a		inc a				inc 	a 							; so 255 (fail) -> 0, otherwise 1,2,3,4 pixels etc.
.b16a		7a		ply				ply 								; restore XY
.b16b		fa		plx				plx
.b16c		20 97 a9	jsr $a997			jsr 	NSMSetByte 					; return the hit result
.b16f		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/graphics/palette.asm

.b170						PaletteCommand:
.b170		a2 00		ldx #$00			ldx 	#0
.b172		20 30 a9	jsr $a930			jsr 	Evaluate8BitInteger 		; colour
.b175		20 24 9a	jsr $9a24			jsr 	CheckComma
.b178		e8		inx				inx
.b179		20 15 a9	jsr $a915			jsr 	Evaluate16BitInteger 		; r
.b17c		20 24 9a	jsr $9a24			jsr 	CheckComma
.b17f		e8		inx				inx
.b180		20 30 a9	jsr $a930			jsr 	Evaluate8BitInteger 		; g
.b183		20 24 9a	jsr $9a24			jsr 	CheckComma
.b186		e8		inx				inx
.b187		20 30 a9	jsr $a930			jsr 	Evaluate8BitInteger 		; b
.b18a		a5 58		lda $58				lda 	NSMantissa0 				; get colour #
.b18c		85 36		sta $36				sta 	zTemp0
.b18e		a9 34		lda #$34			lda 	#$D0 >> 2 					; MSB = D0/4
.b190		85 37		sta $37				sta 	zTemp0+1
.b192		06 36		asl $36				asl 	zTemp0 						; zTemp = $D000+Colour x 4
.b194		26 37		rol $37				rol	 	zTemp0+1
.b196		06 36		asl $36				asl 	zTemp0
.b198		26 37		rol $37				rol	 	zTemp0+1
.b19a		a9 01		lda #$01			lda 	#1 							; I/O Page 2
.b19c		85 01		sta $01				sta 	1
.b19e		5a		phy				phy
.b19f		a5 5b		lda $5b				lda 	NSMantissa0+3 				; fix to r,g,b
.b1a1		92 36		sta ($36)			sta 	(zTemp0)
.b1a3		a0 01		ldy #$01			ldy 	#1
.b1a5		a5 5a		lda $5a				lda 	NSMantissa0+2
.b1a7		91 36		sta ($36),y			sta 	(zTemp0),y
.b1a9		a5 59		lda $59				lda 	NSMantissa0+1
.b1ab		c8		iny				iny
.b1ac		91 36		sta ($36),y			sta 	(zTemp0),y
.b1ae		7a		ply				ply
.b1af		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/hardware/cls.asm

.b1b0						ClearScreen:
.b1b0		5a		phy				phy
.b1b1		a9 0c		lda #$0c			lda 	#12 						; char code 12 clears the screen.
.b1b3		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.b1b6		7a		ply				ply
.b1b7		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/sound/effects.asm

.b1b8						PingCommand:
.b1b8		5a		phy				phy 								; save pos
.b1b9		a9 01		lda #$01			lda 	#1 						; push channel.
.b1bb		48		pha				pha
.b1bc		a9 c8		lda #$c8			lda 	#200 						; pitch LSB
.b1be		a2 06		ldx #$06			ldx 	#6 						; length
.b1c0		a0 00		ldy #$00			ldy 	#0 						; slide LSB
.b1c2		80 24		bra $b1e8			bra 	SoundEffectCommand
.b1c4						ZapCommand:
.b1c4		5a		phy				phy 								; save pos
.b1c5		a9 01		lda #$01			lda 	#1 						; push channel.
.b1c7		48		pha				pha
.b1c8		a9 ff		lda #$ff			lda 	#255 						; pitch LSB
.b1ca		a2 0a		ldx #$0a			ldx 	#10 						; length
.b1cc		a0 0a		ldy #$0a			ldy 	#10 						; slide LSB
.b1ce		80 18		bra $b1e8			bra 	SoundEffectCommand
.b1d0						ShootCommand:
.b1d0		5a		phy				phy 								; save pos
.b1d1		a9 03		lda #$03			lda 	#3 						; push channel.
.b1d3		48		pha				pha
.b1d4		a9 20		lda #$20			lda 	#32 						; pitch LSB
.b1d6		a2 04		ldx #$04			ldx 	#4 						; length
.b1d8		a0 00		ldy #$00			ldy 	#0 						; slide LSB
.b1da		80 0c		bra $b1e8			bra 	SoundEffectCommand
.b1dc						Explode:
.b1dc		5a		phy				phy 								; save pos
.b1dd		a9 03		lda #$03			lda 	#3 						; push channel.
.b1df		48		pha				pha
.b1e0		a9 50		lda #$50			lda 	#80 						; pitch LSB
.b1e2		a2 0a		ldx #$0a			ldx 	#10 						; length
.b1e4		a0 00		ldy #$00			ldy 	#0 						; slide LSB
.b1e6		80 00		bra $b1e8			bra 	SoundEffectCommand
.b1e8						SoundEffectCommand:
.b1e8		8d bb 07	sta $07bb			sta 	SoundCommandBlock 			; set up the command block in sound.asm
.b1eb		9c bc 07	stz $07bc			stz 	SoundCommandBlock+1
.b1ee		a9 0f		lda #$0f			lda 	#15
.b1f0		8d bd 07	sta $07bd			sta 	SoundCommandBlock+2
.b1f3		8e be 07	stx $07be			stx 	SoundCommandBlock+3
.b1f6		8c bf 07	sty $07bf			sty 	SoundCommandBlock+4
.b1f9		9c c0 07	stz $07c0			stz 	SoundCommandBlock+5
.b1fc		68		pla				pla
.b1fd		09 10		ora #$10			ora 	#$10  						; execute command $11
.b1ff		a2 bb		ldx #$bb			ldx 	#(SoundCommandBlock & $FF)
.b201		a0 07		ldy #$07			ldy 	#(SoundCommandBlock >> 8)
.b203		20 6b 80	jsr $806b			jsr 	SNDCommand
.b206		7a		ply				ply
.b207		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/sound/playing.asm

.b208						UnaryPlaying:
.b208		fa		plx				plx
.b209		20 30 a9	jsr $a930			jsr 	Evaluate8BitInteger 		; get channel #
.b20c		48		pha				pha
.b20d		20 1c 9a	jsr $9a1c			jsr		CheckRightBracket
.b210		68		pla				pla
.b211		c9 04		cmp #$04			cmp 	#4
.b213		b0 0c		bcs $b221			bcs 	_UPNotPlaying
.b215		09 20		ora #$20			ora 	#$20 						; query playing ?
.b217		20 6b 80	jsr $806b			jsr 	SNDCommand
.b21a		c9 00		cmp #$00			cmp 	#0
.b21c		f0 03		beq $b221			beq 	_UPNotPlaying
.b21e		4c a8 9a	jmp $9aa8			jmp 	ReturnTrue
.b221						_UPNotPlaying:
.b221		4c b3 9a	jmp $9ab3			jmp 	ReturnFalse

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/sound/sound.asm

.b224						SoundCommand:
.b224		b1 30		lda ($30),y			lda 	(codePtr),y
.b226		c9 cb		cmp #$cb			cmp 	#KWD_OFF 					; SOUND OFF ?
.b228		d0 09		bne $b233			bne 	_SNDMain
.b22a		c8		iny				iny 								; skip OFF
.b22b		a9 3f		lda #$3f			lda 	#$3F 						; call command $3F (silence)
.b22d		5a		phy				phy
.b22e		20 6b 80	jsr $806b			jsr 	SNDCommand
.b231		7a		ply				ply
.b232		60		rts				rts
.b233						_SNDMain:
.b233		a2 00		ldx #$00			ldx 	#0
.b235		20 30 a9	jsr $a930			jsr 	Evaluate8BitInteger 		; channel
.b238		c9 04		cmp #$04			cmp 	#4 							; must be 0-3
.b23a		b0 4b		bcs $b287			bcs 	_SndError
.b23c		e8		inx				inx 								; do the rest in slot 1.
.b23d		20 24 9a	jsr $9a24			jsr 	CheckComma
.b240		20 15 a9	jsr $a915			jsr 	Evaluate16BitInteger 		; Pitch
.b243		b5 60		lda $60,x			lda 	NSMantissa1,x 				; must be 10 bit
.b245		c9 10		cmp #$10			cmp 	#16
.b247		b0 3e		bcs $b287			bcs 	_SndError
.b249		8d bc 07	sta $07bc			sta 	SoundCommandBlock+1 		; Pitch (2 bytes + 0)
.b24c		b5 58		lda $58,x			lda 	NSMantissa0,x
.b24e		8d bb 07	sta $07bb			sta 	SoundCommandBlock
.b251		20 24 9a	jsr $9a24			jsr 	CheckComma
.b254		20 30 a9	jsr $a930			jsr 	Evaluate8BitInteger 		; Length (1 byte + 3)
.b257		8d be 07	sta $07be			sta 	SoundCommandBlock+3
.b25a		a9 0f		lda #$0f			lda 	#15
.b25c		8d bd 07	sta $07bd			sta 	SoundCommandBlock+2 		; Volume (1 byte + 2)
.b25f		9c bf 07	stz $07bf			stz 	SoundCommandBlock+4 		; default slide (2 bytes +4)
.b262		9c c0 07	stz $07c0			stz 	SoundCommandBlock+5
.b265		b1 30		lda ($30),y			lda 	(codePtr),y
.b267		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.b269		d0 0e		bne $b279			bne 	_SNDPlay
.b26b		c8		iny				iny
.b26c		20 1f a9	jsr $a91f			jsr 	Evaluate16BitIntegerSigned 	; Slide
.b26f		b5 58		lda $58,x			lda 	NSMantissa0,x 				; Slide (2 bytes + 4)
.b271		8d bf 07	sta $07bf			sta 	SoundCommandBlock+4
.b274		b5 60		lda $60,x			lda 	NSMantissa1,x
.b276		8d c0 07	sta $07c0			sta 	SoundCommandBlock+5
.b279						_SNDPlay:
.b279		5a		phy				phy
.b27a		a5 58		lda $58				lda 	NSMantissa0 				; channel.
.b27c		09 10		ora #$10			ora 	#$10 						; 1x = Queue sound
.b27e		a2 bb		ldx #$bb			ldx 	#(SoundCommandBlock & $FF)
.b280		a0 07		ldy #$07			ldy 	#(SoundCommandBlock >> 8)
.b282		20 6b 80	jsr $806b			jsr 	SNDCommand
.b285		7a		ply				ply
.b286		60		rts				rts
.b287						_SndError:
.b287		4c 36 ac	jmp $ac36			jmp 	RangeError
.07bb						SoundCommandBlock:
>07bb								.fill 	6

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/bytes.asm

.b28a						StackPushByte:
.b28a		48		pha				pha 								; save byte on stack
.b28b		a5 34		lda $34				lda 	basicStack 					; decrement basic stack pointer
.b28d		d0 08		bne $b297			bne 	_SPBNoBorrow
.b28f		c6 35		dec $35				dec 	basicStack+1 				; borrow
.b291		a5 35		lda $35				lda 	basicStack+1 				; check range.
.b293		c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.b295		90 06		bcc $b29d			bcc 	_SPBMemory
.b297						_SPBNoBorrow:
.b297		c6 34		dec $34				dec 	basicStack
.b299		68		pla				pla 								; get back and write
.b29a		92 34		sta ($34)			sta 	(basicStack)
.b29c		60		rts				rts
.b29d						_SPBMemory:
.b29d		a9 12		lda #$12		lda	#18
.b29f		4c 35 9a	jmp $9a35		jmp	ErrorHandler
.b2a2						StackPopByte:
.b2a2		b2 34		lda ($34)			lda 	(basicStack) 				; bump the stack pointer.
.b2a4		e6 34		inc $34				inc 	basicStack
.b2a6		d0 02		bne $b2aa			bne 	_SPBNoCarry
.b2a8		e6 35		inc $35				inc 	basicStack+1
.b2aa						_SPBNoCarry:
.b2aa		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/frames.asm

.b2ab						StackOpen:
.b2ab		48		pha				pha 								; save frame byte
.b2ac		29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.b2ae		0a		asl a				asl 	a 							; claim twice this for storage
.b2af		49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.b2b1		38		sec				sec 								; so basically subtracting from
.b2b2		65 34		adc $34				adc 	basicStack 	 				; basicStack
.b2b4		85 34		sta $34				sta 	basicStack
.b2b6		b0 09		bcs $b2c1			bcs 	_SONoBorrow
>b2b8		db						.byte 	$DB 						; causes a break in the emulator
.b2b9		c6 35		dec $35				dec 	basicStack+1
.b2bb		a5 35		lda $35				lda 	basicStack+1 				; have we reached stack overflow
.b2bd		c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.b2bf		90 04		bcc $b2c5			bcc 	_SOMemory
.b2c1						_SONoBorrow:
.b2c1		68		pla				pla 								; get marker back and write at TOS
.b2c2		92 34		sta ($34)			sta 	(basicStack)
.b2c4		60		rts				rts
.b2c5						_SOMemory:
.b2c5		a9 12		lda #$12		lda	#18
.b2c7		4c 35 9a	jmp $9a35		jmp	ErrorHandler
.b2ca						StackClose:
.b2ca		b2 34		lda ($34)			lda 	(basicStack) 				; get TOS marker
.b2cc		29 0f		and #$0f			and 	#$0F 						; bytes to add back
.b2ce		0a		asl a				asl 	a 							; claim twice this.
.b2cf		65 34		adc $34				adc 	basicStack 					; add to the stack pointer.
.b2d1		85 34		sta $34				sta 	basicStack
.b2d3		90 02		bcc $b2d7			bcc 	_SCExit
.b2d5		e6 35		inc $35				inc 	basicStack+1
.b2d7						_SCExit:
.b2d7		60		rts				rts
.b2d8						StackCheckFrame:
.b2d8		48		pha				pha
.b2d9						_StackRemoveLocals:
.b2d9		b2 34		lda ($34)			lda 	(basicStack) 				; check for local, keep popping them
.b2db		c9 03		cmp #$03			cmp 	#STK_LOCALS+1 				; is the frame a local ? S or N are 1/0
.b2dd		b0 05		bcs $b2e4			bcs 	_SCNoLocal
.b2df		20 21 92	jsr $9221			jsr 	LocalPopValue 				; restore the local value
.b2e2		80 f5		bra $b2d9			bra 	_StackRemoveLocals 			; gr round again
.b2e4						_SCNoLocal:
.b2e4		68		pla				pla 								; get the frame check.
.b2e5		52 34		eor ($34)			eor 	(basicStack) 				; xor with toS marker
.b2e7		29 f0		and #$f0			and 	#$F0 						; check type bits
.b2e9		d0 01		bne $b2ec			bne 	_SCFError 					; different, we have structures mixed up
.b2eb		60		rts				rts
.b2ec						_SCFError:
.b2ec		8a		txa				txa 								; report error X
.b2ed		4c 35 9a	jmp $9a35			jmp 	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/location.asm

.b2f0						STKSaveCodePosition:
.b2f0		5a		phy				phy
.b2f1		98		tya				tya 								; save Y
.b2f2		a0 05		ldy #$05			ldy 	#5
.b2f4		91 34		sta ($34),y			sta 	(basicStack),y
.b2f6		88		dey				dey 								; save Code Pointer
.b2f7						_STKSaveLoop:
.b2f7		b9 2f 00	lda $002f,y			lda 	safePtr-1,y 				; allows us to access the pointer w/out issues.
.b2fa		91 34		sta ($34),y			sta 	(basicStack),y
.b2fc		88		dey				dey
.b2fd		d0 f8		bne $b2f7			bne 	_STKSaveLoop
.b2ff		7a		ply				ply
.b300		60		rts				rts
.b301						STKLoadCodePosition:
.b301		a0 01		ldy #$01			ldy 	#1 							; load code pointer back
.b303						_STKLoadLoop:
.b303		b1 34		lda ($34),y			lda 	(basicStack),y
.b305		99 2f 00	sta $002f,y			sta 	safePtr-1,y
.b308		c8		iny				iny
.b309		c0 05		cpy #$05			cpy 	#5
.b30b		d0 f6		bne $b303			bne 	_STKLoadLoop
.b30d		b1 34		lda ($34),y			lda 	(basicStack),y 				; get Y offset
.b30f		a8		tay				tay
.b310		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/setup.asm

.b311						StackReset:
.b311		a9 ff		lda #$ff			lda 	#((BasicStackBase+BasicStackSize-1) & $FF)
.b313		85 34		sta $34				sta 	0+basicStack
.b315		a9 0f		lda #$0f			lda 	#((BasicStackBase+BasicStackSize-1) >> 8)
.b317		85 35		sta $35				sta 	1+basicStack
.b319		a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.b31b		92 34		sta ($34)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.b31d		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/concrete.asm

.b31e						StringConcrete:
.b31e		5a		phy				phy 								; save position on stack
.b31f		20 75 a5	jsr $a575			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.b322		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy target string to zTemp1
.b324		85 38		sta $38				sta 	zTemp1
.b326		b5 60		lda $60,x			lda 	NSMantissa1,x
.b328		85 39		sta $39				sta 	zTemp1+1
.b32a		a0 ff		ldy #$ff			ldy 	#$FF	 					; calculate string length
.b32c						_SALength:
.b32c		c8		iny				iny
.b32d		b1 38		lda ($38),y			lda 	(zTemp1),y
.b32f		d0 fb		bne $b32c			bne 	_SALength
.b331		c0 fd		cpy #$fd			cpy 	#253 						; string too long - cannot concrete.
.b333		b0 3d		bcs $b372			bcs 	_SALengthError
.b335		98		tya				tya 				 				; length of the new string
.b336		18		clc				clc
.b337		69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.b339		90 02		bcc $b33d			bcc 	_SAHaveLength
.b33b		a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.b33d						_SAHaveLength:
.b33d		48		pha				pha 								; save length.
.b33e		38		sec				sec
.b33f		49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.b341		6d 0a 04	adc $040a			adc 	stringMemory
.b344		8d 0a 04	sta $040a			sta 	stringMemory
.b347		85 3a		sta $3a				sta 	zTemp2 						; update storage address
.b349		95 58		sta $58,x			sta 	NSMantissa0,x 				; update mantissa address
.b34b		a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.b34d		6d 0b 04	adc $040b			adc 	stringMemory+1
.b350		8d 0b 04	sta $040b			sta 	stringMemory+1
.b353		85 3b		sta $3b				sta 	zTemp2+1
.b355		95 60		sta $60,x			sta 	NSMantissa1,x
.b357		68		pla				pla 								; save length-3 (chars allowed) in first byte
.b358		38		sec				sec
.b359		e9 03		sbc #$03			sbc 	#3
.b35b		92 3a		sta ($3a)			sta 	(zTemp2)
.b35d		a9 00		lda #$00			lda 	#0 							; clear the status byte.
.b35f		a0 01		ldy #$01			ldy 	#1
.b361		91 3a		sta ($3a),y			sta 	(zTemp2),y
.b363						_SACopyNewString:
.b363		a0 00		ldy #$00			ldy 	#0
.b365						_SACopyNSLoop:
.b365		b1 38		lda ($38),y			lda 	(zTemp1),y 					; get character
.b367		c8		iny				iny 								; write two on in string storage
.b368		c8		iny				iny
.b369		91 3a		sta ($3a),y			sta 	(zTemp2),y
.b36b		88		dey				dey 								; this makes it one one.
.b36c		c9 00		cmp #$00			cmp 	#0 							; until EOS copied
.b36e		d0 f5		bne $b365			bne 	_SACopyNSLoop
.b370		7a		ply				ply
.b371		60		rts				rts
.b372						_SALengthError:
.b372		a9 09		lda #$09		lda	#9
.b374		4c 35 9a	jmp $9a35		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/stringalloc.asm

.b377						StringSystemInitialise:
.b377		a9 ff		lda #$ff			lda 	#((EndVariableSpace-1) & $FF)
.b379		8d 0a 04	sta $040a			sta 	0+stringMemory
.b37c		a9 1f		lda #$1f			lda 	#((EndVariableSpace-1) >> 8)
.b37e		8d 0b 04	sta $040b			sta 	1+stringMemory
.b381		9c ff 1f	stz $1fff			stz 	EndVariableSpace-1 			; put a zero at the end, so know end of string memory.
.b384		60		rts				rts
.b385						StringSpaceInitialise:
.b385		20 75 a5	jsr $a575			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.b388		a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.b38a		8d 0c 04	sta $040c			sta 	stringInitialised
.b38d		ad 0a 04	lda $040a			lda 	stringMemory 				; allocate 256 bytes for one concreted string
.b390		8d 0d 04	sta $040d			sta 	stringTempPointer 			; so temporary string space is allocated below that.
.b393		ad 0b 04	lda $040b			lda 	stringMemory+1
.b396		3a		dec a				dec 	a
.b397		8d 0e 04	sta $040e			sta 	stringTempPointer+1
.b39a		60		rts				rts
.b39b						StringTempAllocate:
.b39b		c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.b39d		b0 30		bcs $b3cf			bcs 	_STALength
.b39f		2c 0c 04	bit $040c			bit 	stringInitialised 			; already initialised
.b3a2		30 05		bmi $b3a9			bmi 	_STAAllocate
.b3a4		48		pha				pha 								; save value to subtract.
.b3a5		20 85 b3	jsr $b385			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.b3a8		68		pla				pla 								; restore it
.b3a9						_STAAllocate:
.b3a9		49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.b3ab		18		clc				clc  								; deliberate allows one more
.b3ac		6d 0d 04	adc $040d			adc 	stringTempPointer 			; subtract from temp pointer
.b3af		8d 0d 04	sta $040d			sta 	stringTempPointer
.b3b2		95 58		sta $58,x			sta 	NSMantissa0,x 				; address in mantissa
.b3b4		85 3c		sta $3c				sta 	zsTemp 						; and zsTemp
.b3b6		ad 0e 04	lda $040e			lda 	stringTempPointer+1
.b3b9		69 ff		adc #$ff			adc 	#$FF
.b3bb		8d 0e 04	sta $040e			sta 	stringTempPointer+1
.b3be		85 3d		sta $3d				sta 	zsTemp+1
.b3c0		95 60		sta $60,x			sta 	NSMantissa1,x
.b3c2		74 68		stz $68,x			stz 	NSMantissa2,x 				; set the typing data and the upper address bytes.
.b3c4		74 70		stz $70,x			stz 	NSMantissa3,x
.b3c6		a9 10		lda #$10			lda 	#NSTString
.b3c8		95 50		sta $50,x			sta 	NSStatus,x
.b3ca		a9 00		lda #$00			lda 	#0 							; clear the target string
.b3cc		92 3c		sta ($3c)			sta 	(zsTemp)
.b3ce		60		rts				rts
.b3cf						_STALength:
.b3cf		a9 09		lda #$09		lda	#9
.b3d1		4c 35 9a	jmp $9a35		jmp	ErrorHandler
.b3d4						StringTempWrite:
.b3d4		48		pha				pha
.b3d5		92 3c		sta ($3c)			sta 	(zsTemp) 					; write byte
.b3d7		e6 3c		inc $3c				inc 	zsTemp 						; bump pointer
.b3d9		d0 02		bne $b3dd			bne 	_STWNoCarry
.b3db		e6 3d		inc $3d				inc 	zsTemp+1
.b3dd						_STWNoCarry:
.b3dd		a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.b3df		92 3c		sta ($3c)			sta 	(zsTemp)
.b3e1		68		pla				pla
.b3e2		60		rts				rts

;******  Return to file: _basic.asm

.b3e3						StartModuleCode:

;******  Processing file: ../modules/_build/_hardware.module

=1						hardwareIntegrated=1
=0						CONBlack = 0
=1						CONGrey = 1
=2						CONDarkBlue = 2
=3						CONGreen = 3
=4						CONPurple = 4
=5						CONBrown = 5
=6						CONOrange = 6
=7						CONCyan = 7
=8						CONDarkGrey = 8
=9						CONLightGrey = 9
=10						CONLightBlue = 10
=11						CONLightGreen = 11
=12						CONPink = 12
=13						CONRed = 13
=14						CONYellow = 14
=15						CONWhite = 15
=9						CONForeground = CONLightGrey
=2						CONBackground = CONDarkBlue
=9						CLICommandLine = CONLightGrey
=5						CLIFComment = CONBrown
=14						CLIBComment = CONYellow
=13						CLILineNumber = CONRed
=6						CLIToken = CONOrange
=7						CLIConstant = CONCyan
=14						CLIIdentifier = CONYellow
=12						CLIPunctuation = CONPink
=15						CLIData = CONWhite
.c000	a000					Export_EXTPrintNoControl:
.c000	a000	48		pha				pha
.c001	a001	da		phx				phx
.c002	a002	5a		phy				phy
.c003	a003	a6 01		ldx $01				ldx 	1
.c005	a005	da		phx				phx
.c006	a006	ac c2 07	ldy $07c2			ldy 	EXTColumn 					; Y = Row, e.g. points to character.
.c009	a009	80 11		bra $a01c			bra 	PrintCharacterOnly
.c00b	a00b					Export_EXTPrintCharacter:
.c00b	a00b					PAGEDPrintCharacter:
.c00b	a00b	48		pha				pha
.c00c	a00c	da		phx				phx
.c00d	a00d	5a		phy				phy
.c00e	a00e	a6 01		ldx $01				ldx 	1
.c010	a010	da		phx				phx
.c011	a011	ac c2 07	ldy $07c2			ldy 	EXTColumn 					; Y = Row, e.g. points to character.
.c014	a014	09 00		ora #$00			ora 	#$00 						; check $80-$FF
.c016	a016	30 48		bmi $a060			bmi 	EXPCColour
.c018	a018	c9 20		cmp #$20			cmp 	#$20 						; check $00-$1F
.c01a	a01a	90 4d		bcc $a069			bcc 	EXPCControl
.c01c	a01c					PrintCharacterOnly:
.c01c	a01c	a2 02		ldx #$02			ldx 	#2 							; select char memory
.c01e	a01e	86 01		stx $01				stx 	1
.c020	a020	91 40		sta ($40),y			sta 	(EXTAddress),y
.c022	a022	e6 01		inc $01				inc 	1 							; select colour memory
.c024	a024	ad c3 07	lda $07c3			lda 	EXTTextColour
.c027	a027	91 40		sta ($40),y			sta 	(EXTAddress),y
.c029	a029	c8		iny				iny 								; advance horizontal position
.c02a	a02a	8c c2 07	sty $07c2			sty 	EXTColumn
.c02d	a02d	cc c4 07	cpy $07c4			cpy 	EXTScreenWidth 				; reached RHS ?
.c030	a030	90 63		bcc $a095			bcc 	EXPCExit 					; no, then exit.
.c032	a032					EXPCCRLF:
.c032	a032	ee c1 07	inc $07c1			inc 	EXTRow  					; bump row
.c035	a035	9c c2 07	stz $07c2			stz 	EXTColumn 					; back to column 0
.c038	a038	ad c1 07	lda $07c1			lda 	EXTRow 						; check if reached the bottom ?
.c03b	a03b	cd c5 07	cmp $07c5			cmp 	EXTScreenHeight 			; if so, then scroll.
.c03e	a03e	f0 18		beq $a058			beq 	EXPCScroll
.c040	a040	18		clc				clc 								; add width to address.
.c041	a041	a5 40		lda $40				lda 	EXTAddress
.c043	a043	6d c4 07	adc $07c4			adc 	EXTScreenWidth
.c046	a046	85 40		sta $40				sta 	EXTAddress
.c048	a048	90 4b		bcc $a095			bcc 	EXPCExit
.c04a	a04a	e6 41		inc $41				inc 	EXTAddress+1
.c04c	a04c	80 47		bra $a095			bra 	EXPCExit
.c04e	a04e					EXPCLeft:
.c04e	a04e	ce c2 07	dec $07c2			dec 	EXTColumn
.c051	a051	10 42		bpl $a095			bpl 	EXPCExit
.c053	a053					EXPCBegin:
.c053	a053	9c c2 07	stz $07c2			stz 	EXTColumn
.c056	a056	80 3d		bra $a095			bra 	EXPCExit
.c058	a058					EXPCScroll:
.c058	a058	ce c1 07	dec $07c1			dec 	EXTRow 						; the height-1 th line.
.c05b	a05b	20 46 a1	jsr $a146			jsr 	EXTScreenScroll 			; scroll the screen
.c05e	a05e	80 35		bra $a095			bra 	EXPCExit
.c060	a060					EXPCColour:
.c060	a060	c9 a0		cmp #$a0			cmp 	#$A0						; 80-9F set foreground/background
.c062	a062	b0 31		bcs $a095			bcs 	EXPCExit
.c064	a064	20 26 a1	jsr $a126			jsr 	EXPCHandleColour
.c067	a067	80 2c		bra $a095			bra 	EXPCExit
.c069	a069					EXPCControl:
.c069	a069	c9 11		cmp #$11			cmp 	#$11 						; only handle 00-10.
.c06b	a06b	b0 28		bcs $a095			bcs 	EXPCExit
.c06d	a06d	0a		asl a				asl 	a 							; double into X
.c06e	a06e	aa		tax				tax
.c06f	a06f	7c 04 a1	jmp ($a104,x)			jmp 	(EXPCActionTable,x) 		; and execute code.
.c072	a072					EXPCUp:
.c072	a072	ad c1 07	lda $07c1			lda 	EXTRow 						; already at top ?
.c075	a075	f0 1e		beq $a095			beq 	EXPCExit
.c077	a077	ce c1 07	dec $07c1			dec 	EXTRow 						; up one in position/address
.c07a	a07a	38		sec				sec
.c07b	a07b	a5 40		lda $40				lda 	EXTAddress
.c07d	a07d	ed c4 07	sbc $07c4			sbc 	EXTScreenWidth
.c080	a080	85 40		sta $40				sta 	EXTAddress
.c082	a082	b0 11		bcs $a095			bcs 	EXPCExit
.c084	a084	c6 41		dec $41				dec 	EXTAddress+1
.c086	a086	80 0d		bra $a095			bra 	EXPCExit
.c088	a088					EXPCRight:
.c088	a088	c8		iny				iny
.c089	a089	8c c2 07	sty $07c2			sty 	EXTColumn
.c08c	a08c	cc c4 07	cpy $07c4			cpy 	EXTScreenWidth
.c08f	a08f	d0 04		bne $a095			bne 	EXPCExit
.c091	a091	88		dey				dey
.c092	a092					EXPCSetColumnY:
.c092	a092	8c c2 07	sty $07c2			sty 	EXTColumn
.c095	a095					EXPCExit:
.c095	a095	20 bb a1	jsr $a1bb			jsr 	EXTSetHardwareCursor 		; place the physical cursor.
.c098	a098	68		pla				pla
.c099	a099	85 01		sta $01				sta 	1
.c09b	a09b	7a		ply				ply
.c09c	a09c	fa		plx				plx
.c09d	a09d	68		pla				pla
.c09e	a09e	60		rts				rts
.c09f	a09f					EXPCClearScreen:
.c09f	a09f	20 78 a1	jsr $a178			jsr		EXTClearScreenCode
.c0a2	a0a2	80 f1		bra $a095			bra 	EXPCExit
.c0a4	a0a4					EXPCDown:
.c0a4	a0a4	ad c5 07	lda $07c5			lda 	EXTScreenHeight 			; at the bottom
.c0a7	a0a7	3a		dec a				dec 	a
.c0a8	a0a8	cd c1 07	cmp $07c1			cmp 	EXTRow
.c0ab	a0ab	f0 e8		beq $a095			beq 	EXPCExit
.c0ad	a0ad	ee c1 07	inc $07c1			inc 	EXTRow 						; down one in position/address
.c0b0	a0b0	18		clc				clc
.c0b1	a0b1	a5 40		lda $40				lda 	EXTAddress
.c0b3	a0b3	6d c4 07	adc $07c4			adc 	EXTScreenWidth
.c0b6	a0b6	85 40		sta $40				sta 	EXTAddress
.c0b8	a0b8	90 db		bcc $a095			bcc 	EXPCExit
.c0ba	a0ba	e6 41		inc $41				inc 	EXTAddress+1
.c0bc	a0bc	80 d7		bra $a095			bra 	EXPCExit
.c0be	a0be					EXPCTab:
.c0be	a0be	ad c2 07	lda $07c2			lda 	EXTColumn 					; next tab stop
.c0c1	a0c1	29 f8		and #$f8			and 	#$F8
.c0c3	a0c3	18		clc				clc
.c0c4	a0c4	69 08		adc #$08			adc 	#8
.c0c6	a0c6	8d c2 07	sta $07c2			sta 	EXTColumn
.c0c9	a0c9	cd c4 07	cmp $07c4			cmp 	EXTScreenWidth 				; too far, stick end of line.
.c0cc	a0cc	90 c7		bcc $a095			bcc 	EXPCExit
.c0ce	a0ce	80 10		bra $a0e0			bra 	EXPCEnd
.c0d0	a0d0					EXPCBackSpace:
.c0d0	a0d0	88		dey				dey
.c0d1	a0d1	30 c2		bmi $a095			bmi 	EXPCExit
.c0d3	a0d3	ce c2 07	dec $07c2			dec 	EXTColumn
.c0d6	a0d6	a9 02		lda #$02			lda 	#2
.c0d8	a0d8	85 01		sta $01				sta 	1
.c0da	a0da	a9 20		lda #$20			lda 	#32
.c0dc	a0dc	91 40		sta ($40),y			sta 	(EXTAddress),y
.c0de	a0de	80 b5		bra $a095			bra 	EXPCExit
.c0e0	a0e0					EXPCEnd:
.c0e0	a0e0	a9 02		lda #$02			lda 	#2 							; access text screen
.c0e2	a0e2	85 01		sta $01				sta 	1
.c0e4	a0e4	ac c4 07	ldy $07c4			ldy 	EXTScreenWidth 				; point to last character
.c0e7	a0e7	88		dey				dey
.c0e8	a0e8					EXPCEndSearch:
.c0e8	a0e8	88		dey				dey 								; if past start, move to col 0.
.c0e9	a0e9	30 06		bmi $a0f1			bmi 	EXPCFound
.c0eb	a0eb	b1 40		lda ($40),y			lda 	(EXTAddress),y 				; keep going back till non space found
.c0ed	a0ed	c9 20		cmp #$20			cmp 	#' '
.c0ef	a0ef	f0 f7		beq $a0e8			beq 	EXPCEndSearch
.c0f1	a0f1					EXPCFound:
.c0f1	a0f1	c8		iny				iny 								; move to following cell.
.c0f2	a0f2	80 9e		bra $a092			bra 	EXPCSetColumnY
.c0f4	a0f4					EXPCClearEOL:
.c0f4	a0f4	a9 02		lda #$02			lda 	#2 							; access character RAM
.c0f6	a0f6	85 01		sta $01				sta 	1
.c0f8	a0f8	a9 20		lda #$20			lda 	#' ' 						; write space
.c0fa	a0fa	91 40		sta ($40),y			sta 	(EXTAddress),y
.c0fc	a0fc	c8		iny				iny
.c0fd	a0fd	cc c4 07	cpy $07c4			cpy 	EXTScreenWidth 				; until RHS of screen.
.c100	a100	90 f2		bcc $a0f4			bcc 	EXPCClearEOL
.c102	a102	80 91		bra $a095			bra 	EXPCExit
.c104	a104					EXPCActionTable:
>c104	a104	95 a0						.word 	EXPCExit 					; 00
>c106	a106	53 a0						.word 	EXPCBegin 					; 01 A Start of Line
>c108	a108	4e a0						.word 	EXPCLeft 					; 02 B Left
>c10a	a10a	95 a0						.word 	EXPCExit 					; 03 <Break>
>c10c	a10c	95 a0						.word 	EXPCExit 					; 04
>c10e	a10e	e0 a0						.word 	EXPCEnd 					; 05 E End of Line
>c110	a110	88 a0						.word 	EXPCRight 					; 06 F Right
>c112	a112	95 a0						.word 	EXPCExit 					; 07
>c114	a114	d0 a0						.word 	EXPCBackSpace 				; 08 H Backspace
>c116	a116	be a0						.word 	EXPCTab 					; 09 I Tab
>c118	a118	95 a0						.word 	EXPCExit 					; 0A
>c11a	a11a	f4 a0						.word 	EXPCClearEOL 				; 0B K Clear to EOL
>c11c	a11c	9f a0						.word 	EXPCClearScreen			; 0C L CLS
>c11e	a11e	32 a0						.word 	EXPCCRLF 					; 0D M CR/LF
>c120	a120	a4 a0						.word 	EXPCDown 					; 0E N Down
>c122	a122	95 a0						.word 	EXPCExit 					; 0F
>c124	a124	72 a0						.word 	EXPCUp 					; 10 P Up
.c126	a126					EXPCHandleColour:
.c126	a126	c9 90		cmp #$90			cmp 	#$90 						; 8x foreground 9x background
.c128	a128	b0 16		bcs $a140			bcs 	EXPCBackground
.c12a	a12a	0a		asl a				asl 	a 							; shift it 4 bits to the right.
.c12b	a12b	0a		asl a				asl 	a
.c12c	a12c	0a		asl a				asl 	a
.c12d	a12d	0a		asl a				asl 	a
.c12e	a12e	a2 0f		ldx #$0f			ldx 	#$0F 						; Mask in X
.c130	a130					EXPCUpdate:
.c130	a130	48		pha				pha 								; save new colour
.c131	a131	8a		txa				txa 								; get mask
.c132	a132	2d c3 07	and $07c3			and 	EXTTextColour 				; mask out old.
.c135	a135	8d c3 07	sta $07c3			sta 	EXTTextColour
.c138	a138	68		pla				pla 								; or in new colour
.c139	a139	0d c3 07	ora $07c3			ora 	EXTTextColour
.c13c	a13c	8d c3 07	sta $07c3			sta 	EXTTextColour
.c13f	a13f	60		rts				rts
.c140	a140					EXPCBackground:
.c140	a140	29 0f		and #$0f			and 	#$0F 						; get the colour
.c142	a142	a2 f0		ldx #$f0			ldx 	#$F0 						; mask
.c144	a144	80 ea		bra $a130			bra 	EXPCUpdate
.c146	a146					EXTScreenScroll:
.c146	a146	a9 02		lda #$02			lda 	#2 							; select text page
.c148	a148	85 01		sta $01				sta 	1
.c14a	a14a	a9 20		lda #$20			lda		#32 						; fill with space
.c14c	a14c	20 a2 a2	jsr $a2a2			jsr 	EXTScrollFill
.c14f	a14f	e6 01		inc $01				inc 	1 							; select colour page
.c151	a151	ad c3 07	lda $07c3			lda 	EXTTextColour
.c154	a154	20 a2 a2	jsr $a2a2			jsr 	EXTScrollFill
.c157	a157	60		rts				rts
.c158	a158					PAGEDPrintHex:
.c158	a158	48		pha				pha
.c159	a159	a9 20		lda #$20			lda 	#' '
.c15b	a15b	20 0b a0	jsr $a00b			jsr 	PAGEDPrintCharacter
.c15e	a15e	68		pla				pla
.c15f	a15f	48		pha				pha
.c160	a160	4a		lsr a				lsr 	a
.c161	a161	4a		lsr a				lsr 	a
.c162	a162	4a		lsr a				lsr 	a
.c163	a163	4a		lsr a				lsr 	a
.c164	a164	20 68 a1	jsr $a168			jsr 	_PPHNibble
.c167	a167	68		pla				pla
.c168	a168					_PPHNibble:
.c168	a168	48		pha				pha
.c169	a169	29 0f		and #$0f			and 	#15
.c16b	a16b	c9 0a		cmp #$0a			cmp 	#10
.c16d	a16d	90 02		bcc $a171			bcc 	_PPHOut
.c16f	a16f	69 06		adc #$06			adc 	#6
.c171	a171	69 30		adc #$30	_PPHOut:adc 	#48
.c173	a173	20 0b a0	jsr $a00b			jsr		PAGEDPrintCharacter
.c176	a176	68		pla				pla
.c177	a177	60		rts				rts
.c178	a178					EXTClearScreenCode:
.c178	a178	a9 02		lda #$02			lda 	#2 							; select text page
.c17a	a17a	85 01		sta $01				sta 	1
.c17c	a17c	a9 20		lda #$20			lda		#32 						; fill with space
.c17e	a17e	20 8b a1	jsr $a18b			jsr 	_EXTCSFill
.c181	a181	e6 01		inc $01				inc 	1 							; select colour page
.c183	a183	ad c3 07	lda $07c3			lda 	EXTTextColour
.c186	a186	20 8b a1	jsr $a18b			jsr 	_EXTCSFill
.c189	a189	80 22		bra $a1ad			bra 	EXTHomeCursor
.c18b	a18b					_EXTCSFill:
.c18b	a18b	aa		tax				tax
.c18c	a18c	a9 00		lda #$00			lda 	#EXTMemory & $FF
.c18e	a18e	85 40		sta $40				sta 	EXTAddress
.c190	a190	a9 c0		lda #$c0			lda 	#EXTMemory >> 8
.c192	a192	85 41		sta $41				sta 	EXTAddress+1
.c194	a194					_EXTCSFill1:
.c194	a194	a0 00		ldy #$00			ldy 	#0
.c196	a196	8a		txa				txa
.c197	a197					_EXTCSFill2:
.c197	a197	91 40		sta ($40),y			sta 	(EXTAddress),y
.c199	a199	c8		iny				iny
.c19a	a19a	d0 fb		bne $a197			bne 	_EXTCSFill2
.c19c	a19c	e6 41		inc $41				inc 	EXTAddress+1
.c19e	a19e	a5 41		lda $41				lda 	EXTAddress+1
.c1a0	a1a0	c9 d2		cmp #$d2			cmp 	#$D2
.c1a2	a1a2	d0 f0		bne $a194			bne 	_EXTCSFill1
.c1a4	a1a4	8a		txa				txa
.c1a5	a1a5					_EXTCSFill3:
.c1a5	a1a5	91 40		sta ($40),y			sta 	(EXTAddress),y
.c1a7	a1a7	c8		iny				iny
.c1a8	a1a8	c0 c0		cpy #$c0			cpy 	#$C0
.c1aa	a1aa	d0 f9		bne $a1a5			bne 	_EXTCSFill3
.c1ac	a1ac	60		rts				rts
.c1ad	a1ad					EXTHomeCursor:
.c1ad	a1ad	9c c1 07	stz $07c1			stz 	EXTRow 						; reset row & column
.c1b0	a1b0	9c c2 07	stz $07c2			stz 	EXTColumn
.c1b3	a1b3	a9 00		lda #$00			lda 	#EXTMemory & $FF 			; set address
.c1b5	a1b5	85 40		sta $40				sta 	EXTAddress
.c1b7	a1b7	a9 c0		lda #$c0			lda 	#EXTMemory >> 8
.c1b9	a1b9	85 41		sta $41				sta 	EXTAddress+1
.c1bb	a1bb					EXTSetHardwareCursor:
.c1bb	a1bb	64 01		stz $01				stz 	1 							; I/O Page zero
.c1bd	a1bd	a9 05		lda #$05			lda 	#1+4 						; enable cursor
.c1bf	a1bf	8d 10 d0	sta $d010			sta 	$D010
.c1c2	a1c2	a9 d6		lda #$d6			lda 	#214
.c1c4	a1c4	8d 12 d0	sta $d012			sta 	$D012
.c1c7	a1c7	ad c2 07	lda $07c2			lda 	EXTColumn
.c1ca	a1ca	8d 14 d0	sta $d014			sta 	$D014 						; set cursor position
.c1cd	a1cd	9c 15 d0	stz $d015			stz 	$D015
.c1d0	a1d0	ad c1 07	lda $07c1			lda 	EXTRow
.c1d3	a1d3	8d 16 d0	sta $d016			sta 	$D016
.c1d6	a1d6	9c 17 d0	stz $d017			stz 	$D017
.c1d9	a1d9	60		rts				rts
=$c000						EXTMemory = $C000
=$02						EXTTextPage = $02
=$03						EXTColourPage = $03
=1						EXTDummySpace = 1 							; fake-space for CR character.
=0						EXTCBlack = 0
.07c1						EXTRow:
>07c1								.fill 	1
.07c2						EXTColumn:
>07c2								.fill 	1
.07c3						EXTTextColour:
>07c3								.fill 	1
.07c4						EXTScreenWidth:
>07c4								.fill 	1
.07c5						EXTScreenHeight:
>07c5								.fill 	1
.0040						EXTAddress:
>0040								.fill 	2
.c1da	a1da					Export_EXTInitialise:
.c1da	a1da	64 01		stz $01				stz 	1 							; Access I/O page 0
.c1dc	a1dc	9c 04 d0	stz $d004			stz 	$D004 						; Disable border
.c1df	a1df	9c 08 d0	stz $d008			stz 	$D008
.c1e2	a1e2	9c 09 d0	stz $d009			stz 	$D009
.c1e5	a1e5	a9 09		lda #$09			lda 	#1+8						; Timer On at 70Hz counting up.
.c1e7	a1e7	8d 58 d6	sta $d658			sta 	$D658
.c1ea	a1ea	a9 52		lda #$52			lda 	#$52
.c1ec	a1ec	8d c3 07	sta $07c3			sta 	EXTTextColour
.c1ef	a1ef	a9 50		lda #$50			lda 	#80 						; set screen dimensions.
.c1f1	a1f1	8d c4 07	sta $07c4			sta 	EXTScreenWidth
.c1f4	a1f4	a9 3c		lda #$3c			lda 	#60
.c1f6	a1f6	8d c5 07	sta $07c5			sta 	EXTScreenHeight
.c1f9	a1f9	20 78 a1	jsr $a178			jsr 	EXTClearScreenCode 			; clear the screen
.c1fc	a1fc					_EXMoveDown:
.c1fc	a1fc	a9 0d		lda #$0d			lda 	#13
.c1fe	a1fe	20 0b a0	jsr $a00b			jsr 	PAGEDPrintCharacter
.c201	a201	ad c1 07	lda $07c1			lda 	EXTRow
.c204	a204	c9 0a		cmp #$0a			cmp 	#Header_Height-4
.c206	a206	d0 f4		bne $a1fc			bne 	_EXMoveDown
.c208	a208	20 0e a2	jsr $a20e			jsr 	EXTShowHeader
.c20b	a20b	64 01		stz $01				stz 	1
.c20d	a20d	60		rts				rts
.c20e	a20e					EXTShowHeader:
.c20e	a20e	a5 01		lda $01				lda 	1
.c210	a210	48		pha				pha
.c211	a211	a5 0b		lda $0b				lda 	8+3
.c213	a213	48		pha				pha
.c214	a214	a5 0c		lda $0c				lda 	8+4
.c216	a216	18		clc				clc
.c217	a217	69 03		adc #$03			adc 	#3
.c219	a219	85 0b		sta $0b				sta 	8+3
.c21b	a21b	a2 b2		ldx #$b2			ldx 	#(Header_jchars & $FF)
.c21d	a21d	a0 61		ldy #$61			ldy 	#(Header_jchars >> 8)-$40
.c21f	a21f	64 01		stz $01				stz 	1
.c221	a221	ad a7 d6	lda $d6a7			lda 	$D6A7
.c224	a224	29 10		and #$10			and 	#$10
.c226	a226	f0 04		beq $a22c			beq 	_EXTSHNotK1
.c228	a228	a2 b0		ldx #$b0			ldx 	#(Header_kchars & $FF)
.c22a	a22a	a0 65		ldy #$65			ldy 	#(Header_kchars >> 8)-$40
.c22c	a22c					_EXTSHNotK1:
.c22c	a22c	a9 02		lda #$02			lda 	#2
.c22e	a22e	20 5c a2	jsr $a25c			jsr 	_ESHCopyBlock
.c231	a231	a2 00		ldx #$00			ldx 	#(Header_jattrs & $FF)
.c233	a233	a0 60		ldy #$60			ldy 	#(Header_jattrs >> 8)-$40
.c235	a235	64 01		stz $01				stz 	1
.c237	a237	ad a7 d6	lda $d6a7			lda 	$D6A7
.c23a	a23a	29 10		and #$10			and 	#$10
.c23c	a23c	f0 04		beq $a242			beq 	_EXTSHNotK2
.c23e	a23e	a2 e2		ldx #$e2			ldx 	#(Header_kattrs & $FF)
.c240	a240	a0 63		ldy #$63			ldy 	#(Header_kattrs >> 8)-$40
.c242	a242					_EXTSHNotK2:
.c242	a242	a9 03		lda #$03			lda 	#3
.c244	a244	20 5c a2	jsr $a25c			jsr 	_ESHCopyBlock
.c247	a247	64 01		stz $01				stz 	1
.c249	a249	a2 3f		ldx #$3f			ldx 	#16*4-1
.c24b	a24b					_EXTCopyLUT:
.c24b	a24b	bd b2 67	lda $67b2,x			lda 	Header_Palette-$4000,x
.c24e	a24e	9d 00 d8	sta $d800,x			sta 	$D800,x
.c251	a251	9d 40 d8	sta $d840,x			sta 	$D840,x
.c254	a254	ca		dex				dex
.c255	a255	10 f4		bpl $a24b			bpl 	_EXTCopyLUT
.c257	a257	68		pla				pla
.c258	a258	85 0b		sta $0b				sta 	8+3
.c25a	a25a	68		pla				pla
.c25b	a25b	60		rts				rts
.c25c	a25c					_ESHCopyBlock:
.c25c	a25c	85 01		sta $01				sta 	1
.c25e	a25e	86 36		stx $36				stx 	zTemp0 						; zTemp0 is RLE packed data
.c260	a260	84 37		sty $37				sty 	zTemp0+1
.c262	a262	a9 00		lda #$00			lda 	#(($C000) & $FF)
.c264	a264	85 38		sta $38				sta 	0+zTemp1
.c266	a266	a9 c0		lda #$c0			lda 	#(($C000) >> 8)
.c268	a268	85 39		sta $39				sta 	1+zTemp1
.c26a	a26a					_ESHCopyLoop:
.c26a	a26a	b2 36		lda ($36)			lda 	(zTemp0) 					; get next character
.c26c	a26c	c9 ff		cmp #$ff			cmp 	#Header_RLE 				; packed ?
.c26e	a26e	f0 1b		beq $a28b			beq 	_ESHUnpack
.c270	a270	92 38		sta ($38)			sta 	(zTemp1) 					; copy it out.
.c272	a272	a9 01		lda #$01			lda 	#1 							; source add 1
.c274	a274	a0 01		ldy #$01			ldy 	#1 							; dest add 1
.c276	a276					_ESHNext:
.c276	a276	18		clc				clc 								; zTemp0 + A
.c277	a277	65 36		adc $36				adc 	zTemp0
.c279	a279	85 36		sta $36				sta 	zTemp0
.c27b	a27b	90 02		bcc $a27f			bcc 	_ESHNoCarry
.c27d	a27d	e6 37		inc $37				inc 	zTemp0+1
.c27f	a27f					_ESHNoCarry:
.c27f	a27f	98		tya				tya 								; zTemp1 + Y
.c280	a280	18		clc				clc
.c281	a281	65 38		adc $38				adc 	zTemp1
.c283	a283	85 38		sta $38				sta 	zTemp1
.c285	a285	90 e3		bcc $a26a			bcc 	_ESHCopyLoop
.c287	a287	e6 39		inc $39				inc 	zTemp1+1
.c289	a289	80 df		bra $a26a			bra 	_ESHCopyLoop
.c28b	a28b					_ESHUnpack:
.c28b	a28b	a0 02		ldy #$02			ldy 	#2 							; get count into X
.c28d	a28d	b1 36		lda ($36),y			lda 	(zTemp0),y
.c28f	a28f	aa		tax				tax
.c290	a290	88		dey				dey 								; byte into A
.c291	a291	b1 36		lda ($36),y			lda 	(zTemp0),y
.c293	a293	f0 0c		beq $a2a1			beq 	_ESHExit 					; exit if zero.
.c295	a295	a0 00		ldy #$00			ldy 	#0 							; copy start position
.c297	a297					_ESHCopyOut:
.c297	a297	91 38		sta ($38),y			sta 	(zTemp1),y
.c299	a299	c8		iny				iny
.c29a	a29a	ca		dex				dex
.c29b	a29b	d0 fa		bne $a297			bne 	_ESHCopyOut
.c29d	a29d	a9 03		lda #$03			lda 	#3 							; Y is bytes on screen, 3 bytes from source
.c29f	a29f	80 d5		bra $a276			bra 	_ESHNext
.c2a1	a2a1					_ESHExit:
.c2a1	a2a1	60		rts				rts
.c2a2	a2a2					EXTScrollFill:
.c2a2	a2a2	aa		tax				tax									; save value to fill with
.c2a3	a2a3	a5 36		lda $36				lda 	zTemp0 						; save zTemp0 (dest) zTemp1 (src)
.c2a5	a2a5	48		pha				pha
.c2a6	a2a6	a5 37		lda $37				lda 	zTemp0+1
.c2a8	a2a8	48		pha				pha
.c2a9	a2a9	a5 38		lda $38				lda 	zTemp1
.c2ab	a2ab	48		pha				pha
.c2ac	a2ac	a5 39		lda $39				lda 	zTemp1+1
.c2ae	a2ae	48		pha				pha
.c2af	a2af	a9 c0		lda #$c0			lda 	#$C0 						; copy from C000+length to C000
.c2b1	a2b1	85 37		sta $37				sta 	zTemp0+1
.c2b3	a2b3	85 39		sta $39				sta 	zTemp1+1
.c2b5	a2b5	64 36		stz $36				stz 	zTemp0
.c2b7	a2b7	ad c4 07	lda $07c4			lda 	EXTScreenWidth
.c2ba	a2ba	85 38		sta $38				sta 	zTemp1
.c2bc	a2bc	a0 00		ldy #$00			ldy 	#0
.c2be	a2be					_EXSFCopy1:
.c2be	a2be	b1 38		lda ($38),y			lda 	(zTemp1),y
.c2c0	a2c0	91 36		sta ($36),y			sta 	(zTemp0),y
.c2c2	a2c2	c8		iny				iny
.c2c3	a2c3	d0 f9		bne $a2be			bne 	_EXSFCopy1
.c2c5	a2c5	e6 37		inc $37				inc 	zTemp0+1 					; next page
.c2c7	a2c7	e6 39		inc $39				inc 	zTemp1+1
.c2c9	a2c9	a5 39		lda $39				lda 	zTemp1+1
.c2cb	a2cb	c9 d3		cmp #$d3			cmp 	#$D3
.c2cd	a2cd	d0 ef		bne $a2be			bne 	_EXSFCopy1
.c2cf	a2cf	ac c4 07	ldy $07c4			ldy 	EXTScreenWidth 				; blank the bottom line.
.c2d2	a2d2	8a		txa				txa
.c2d3	a2d3					_EXSFFill1:
.c2d3	a2d3	88		dey				dey
.c2d4	a2d4	91 40		sta ($40),y			sta 	(EXTAddress),y
.c2d6	a2d6	c0 00		cpy #$00			cpy 	#0
.c2d8	a2d8	10 f9		bpl $a2d3			bpl 	_EXSFFill1
.c2da	a2da	68		pla				pla
.c2db	a2db	85 39		sta $39				sta 	zTemp1+1
.c2dd	a2dd	68		pla				pla
.c2de	a2de	85 38		sta $38				sta 	zTemp1
.c2e0	a2e0	68		pla				pla
.c2e1	a2e1	85 37		sta $37				sta 	zTemp0+1
.c2e3	a2e3	68		pla				pla
.c2e4	a2e4	85 36		sta $36				sta 	zTemp0
.c2e6	a2e6	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_graphics.module

=1						graphicsIntegrated=1
=0						GCMD_Initialise = 0*2
=2						GCMD_BitmapCtl = 1*2
=4						GCMD_SpriteCtl = 2*2
=6						GCMD_Clear = 3*2
=8						GCMD_Colour = 4*2
=10						GCMD_DrawFont = 5*2
=12						GCMD_DrawSprite = 6*2
=14						GCMD_SpriteUse = 7*2
=16						GCMD_SpriteImage = 8*2
=18						GCMD_SpriteCollide = 9*2
=64						GCMD_Move = 32*2
=66						GCMD_Line = 33*2
=68						GCMD_FrameRect = 34*2
=70						GCMD_FillRect = 35*2
=72						GCMD_FrameCircle = 36*2
=74						GCMD_FillCircle = 37*2
=80						GCMD_Plot = 40*2
=82						GCMD_SpriteMove = 41*2
=42						GRFirstFreeCode = 42
.c2e7	a2e7					GRVectorTable:
>c2e7	a2e7	38 a5					.word	GXInitialise             ; $00 Initialise
>c2e9	a2e9	52 a5					.word	GXControlBitmap          ; $01 BitmapCtl
>c2eb	a2eb	9a a5					.word	GXControlSprite          ; $02 SpriteCtl
>c2ed	a2ed	e8 a4					.word	GXClearBitmap            ; $03 Clear
>c2ef	a2ef	29 a7					.word	GXSetColourMode          ; $04 Colour
>c2f1	a2f1	f1 a8					.word	GXFontHandler            ; $05 DrawFont
>c2f3	a2f3	39 a9					.word	GXSpriteHandler          ; $06 DrawSprite
>c2f5	a2f5	aa a9					.word	GXSelect                 ; $07 SpriteUse
>c2f7	a2f7	d3 a9					.word	GXSelectImage            ; $08 SpriteImage
>c2f9	a2f9	5a ab					.word	GXCollide                ; $09 SpriteCollide
>c2fb	a2fb	9a a3					.word	GRUndefined              ; $0a
>c2fd	a2fd	9a a3					.word	GRUndefined              ; $0b
>c2ff	a2ff	9a a3					.word	GRUndefined              ; $0c
>c301	a301	9a a3					.word	GRUndefined              ; $0d
>c303	a303	9a a3					.word	GRUndefined              ; $0e
>c305	a305	9a a3					.word	GRUndefined              ; $0f
>c307	a307	9a a3					.word	GRUndefined              ; $10
>c309	a309	9a a3					.word	GRUndefined              ; $11
>c30b	a30b	9a a3					.word	GRUndefined              ; $12
>c30d	a30d	9a a3					.word	GRUndefined              ; $13
>c30f	a30f	9a a3					.word	GRUndefined              ; $14
>c311	a311	9a a3					.word	GRUndefined              ; $15
>c313	a313	9a a3					.word	GRUndefined              ; $16
>c315	a315	9a a3					.word	GRUndefined              ; $17
>c317	a317	9a a3					.word	GRUndefined              ; $18
>c319	a319	9a a3					.word	GRUndefined              ; $19
>c31b	a31b	9a a3					.word	GRUndefined              ; $1a
>c31d	a31d	9a a3					.word	GRUndefined              ; $1b
>c31f	a31f	9a a3					.word	GRUndefined              ; $1c
>c321	a321	9a a3					.word	GRUndefined              ; $1d
>c323	a323	9a a3					.word	GRUndefined              ; $1e
>c325	a325	9a a3					.word	GRUndefined              ; $1f
>c327	a327	98 a3					.word	GXMove                   ; $20 Move
>c329	a329	f7 a5					.word	GXLine                   ; $21 Line
>c32b	a32b	72 a7					.word	GXFrameRectangle         ; $22 FrameRect
>c32d	a32d	6f a7					.word	GXFillRectangle          ; $23 FillRect
>c32f	a32f	9f a3					.word	GXFrameCircle            ; $24 FrameCircle
>c331	a331	9b a3					.word	GXFillCircle             ; $25 FillCircle
>c333	a333	9a a3					.word	GRUndefined              ; $26
>c335	a335	9a a3					.word	GRUndefined              ; $27
>c337	a337	57 a7					.word	GXPlotPoint              ; $28 Plot
>c339	a339	69 aa					.word	GXMoveSprite             ; $29 SpriteMove
=3						GXMappingPage = 3
=24576						GXMappingAddress = ($2000 * GXMappingPage)
=11						GXEditSlot = 8 + GXMappingPage
=$36						gxzTemp0 = zTemp0
=$38						gxzTemp1 = zTemp1
=$3a						gxzTemp2 = zTemp2
=$3c						gxzScreen = zsTemp
=$623						gxPixelBuffer = numberBuffer
.07c6						gxCurrentX:
>07c6								.fill 	2
.07c8						gxCurrentY:
>07c8								.fill 	2
.07ca						gxLastX:
>07ca								.fill 	2
.07cc						gxLastY:
>07cc								.fill 	2
.07ce						gxX0:
>07ce								.fill 	2
.07d0						gxY0:
>07d0								.fill 	2
.07d2						gxX1:
>07d2								.fill 	2
.07d4						gxY1:
>07d4								.fill 	2
.07d6						gxSpritesOn:
>07d6								.fill 	1
.07d7						gxBitmapsOn:
>07d7								.fill 	1
.07d8						gxBasePage:
>07d8								.fill 	1
.07d9						gxSpritePage:
>07d9								.fill 	1
.07da						gxHeight:
>07da								.fill 	1
.07db						gxMode:
>07db								.fill 	1
.07dc						gxColour:
>07dc								.fill 	1
.07dd						gxEORValue:
>07dd								.fill 	1
.07de						gxANDValue:
>07de								.fill 	1
.07df						gxOriginalLUTValue:
>07df								.fill 	1
.07e0						gxOffset:
>07e0								.fill 	1
.07e1						GSCurrentSpriteID:
>07e1								.fill 	1
.07e2						GSCurrentSpriteAddr:
>07e2								.fill 	2
.07e4						gxSpriteOffsetBase:
>07e4								.fill 	2
.07e6						gxSpriteLow:
>07e6								.fill 	64
.0826						gxSpriteHigh:
>0826								.fill 	64
.c33b	a33b					Export_GXGraphicDraw:
.c33b	a33b	c9 40		cmp #$40			cmp 	#GCMD_Move					; low value instructions don't use coordinates
.c33d	a33d	b0 06		bcs $a345			bcs 	_GDCoordinate 				; (see graphics.txt)
.c33f	a33f	86 36		stx $36				stx 	gxzTemp0 					; save X/Y
.c341	a341	84 37		sty $37				sty 	gxzTemp0+1
.c343	a343	80 4b		bra $a390			bra 	_GDExecuteA 				; and execute
.c345	a345					_GDCoordinate:
.c345	a345	48		pha				pha 								; save AXY
.c346	a346	da		phx				phx
.c347	a347	5a		phy				phy
.c348	a348	a2 03		ldx #$03			ldx 	#3 							; copy currentX to lastX
.c34a	a34a					_GDCopy1:
.c34a	a34a	bd c6 07	lda $07c6,x			lda 	gxCurrentX,x
.c34d	a34d	9d ca 07	sta $07ca,x			sta 	gxLastX,x
.c350	a350	ca		dex				dex
.c351	a351	10 f7		bpl $a34a			bpl 	_GDCopy1
.c353	a353	68		pla				pla
.c354	a354	8d c8 07	sta $07c8			sta 	gxCurrentY
.c357	a357	9c c9 07	stz $07c9			stz 	gxCurrentY+1
.c35a	a35a	68		pla				pla
.c35b	a35b	8d c6 07	sta $07c6			sta 	gxCurrentX
.c35e	a35e	68		pla				pla 								; get A (command+X.1) back
.c35f	a35f	48		pha				pha
.c360	a360	29 01		and #$01			and 	#1 							; put LSB as MSB of Current.X
.c362	a362	8d c7 07	sta $07c7			sta 	gxCurrentX+1
.c365	a365	68		pla				pla 								; get command back
.c366	a366	29 fe		and #$fe			and 	#$FE 						; lose LSB, chuck the stray X bit
.c368	a368	48		pha				pha 								; push back.
.c369	a369	c9 52		cmp #$52			cmp 	#GCMD_SpriteMove 			; move sprite does not clip.
.c36b	a36b	f0 17		beq $a384			beq 	_GDCopyToWorkArea
.c36d	a36d	ad c7 07	lda $07c7			lda 	gxCurrentX+1 				; X < 256 X okay
.c370	a370	f0 07		beq $a379			beq 	_GDCheckY
.c372	a372	ad c6 07	lda $07c6			lda 	gxCurrentX 					; otherwise X < 320 = 256 + 64
.c375	a375	c9 40		cmp #$40			cmp 	#64
.c377	a377	b0 08		bcs $a381			bcs 	_GDError1
.c379	a379					_GDCheckY:
.c379	a379	ad c8 07	lda $07c8			lda 	gxCurrentY 					; check Y < Height.
.c37c	a37c	cd da 07	cmp $07da			cmp 	gxHeight
.c37f	a37f	90 03		bcc $a384			bcc 	_GDCopyToWorkArea
.c381	a381					_GDError1:
.c381	a381	68		pla				pla
.c382	a382					_GDError2:
.c382	a382	38		sec				sec
.c383	a383	60		rts				rts
.c384	a384					_GDCopyToWorkArea:
.c384	a384	a2 07		ldx #$07			ldx 	#7 							; copy current and last to gxXY/12 work area
.c386	a386					_GDCopy2:
.c386	a386	bd c6 07	lda $07c6,x			lda 	gxCurrentX,x
.c389	a389	9d ce 07	sta $07ce,x			sta 	gxX0,x
.c38c	a38c	ca		dex				dex
.c38d	a38d	10 f7		bpl $a386			bpl 	_GDCopy2
.c38f	a38f	68		pla				pla 								; get command
.c390	a390					_GDExecuteA:
.c390	a390	c9 54		cmp #$54			cmp 	#GRFirstFreeCode*2 			; bad command ?
.c392	a392	b0 ee		bcs $a382			bcs 	_GDError2
.c394	a394	aa		tax				tax 								; go execute the command.
.c395	a395	7c e7 a2	jmp ($a2e7,x)			jmp 	(GRVectorTable,x)
.c398	a398					GXMove:
.c398	a398	18		clc				clc
.c399	a399	60		rts				rts
.c39a	a39a					GRUndefined:
>c39a	a39a	db						.byte 	$DB 						; causes a break in the emulator
.c39b	a39b					GXFillCircle:
.c39b	a39b	a9 ff		lda #$ff			lda 	#255
.c39d	a39d	80 02		bra $a3a1			bra 	GXCircle
.c39f	a39f					GXFrameCircle:
.c39f	a39f	a9 00		lda #$00			lda 	#0
.c3a1	a3a1					GXCircle:
.c3a1	a3a1	8d 69 08	sta $0869			sta 	gxIsFillMode					; save Fill flag
.c3a4	a3a4	ad d7 07	lda $07d7			lda 	gxBitmapsOn
.c3a7	a3a7	f0 26		beq $a3cf			beq 	_GXCFail
.c3a9	a3a9	20 01 ac	jsr $ac01			jsr 	GXSortXY 					; topleft/bottomright
.c3ac	a3ac	20 d9 aa	jsr $aad9			jsr 	GXOpenBitmap 				; start drawing
.c3af	a3af	20 a1 a4	jsr $a4a1			jsr 	GXCircleSetup 				; set up for drawing
.c3b2	a3b2	9c 6a 08	stz $086a			stz 	gxYChanged
.c3b5	a3b5					_GXCircleDraw:
.c3b5	a3b5	ad 67 08	lda $0867			lda 	gxxCentre					; while x <= y
.c3b8	a3b8	cd 68 08	cmp $0868			cmp 	gxYCentre
.c3bb	a3bb	90 0a		bcc $a3c7			bcc 	_GXCircleContinue
.c3bd	a3bd	d0 03		bne $a3c2			bne 	_GXNoLast
.c3bf	a3bf	20 d4 a3	jsr $a3d4			jsr 	GXPlot1
.c3c2	a3c2					_GXNoLast:
.c3c2	a3c2	20 e1 aa	jsr $aae1			jsr 	GXCloseBitmap 				; close the bitmap
.c3c5	a3c5	18		clc				clc
.c3c6	a3c6	60		rts				rts
.c3c7	a3c7					_GXCircleContinue:
.c3c7	a3c7	20 d1 a3	jsr $a3d1			jsr 	GXPlot2 					; draw it
.c3ca	a3ca	20 4e a4	jsr $a44e			jsr 	GXCircleMove 				; adjust the coordinates
.c3cd	a3cd	80 e6		bra $a3b5			bra 	_GXCircleDraw
.c3cf	a3cf					_GXCFail:
.c3cf	a3cf	38		sec				sec
.c3d0	a3d0	60		rts				rts
.c3d1	a3d1					GXPlot2:
.c3d1	a3d1	20 d4 a3	jsr $a3d4			jsr 	GXPlot1 						; plot and swap, fall through does twice
.c3d4	a3d4					GXPlot1:
.c3d4	a3d4	ad 68 08	lda $0868			lda 	gxYCentre 						; if y = 0, don't do it twice (xor)
.c3d7	a3d7	f0 03		beq $a3dc			beq 	_GXPlot1Only
.c3d9	a3d9	20 f8 a3	jsr $a3f8			jsr 	GXPlot0 						; plot and negate
.c3dc	a3dc					_GXPlot1Only:
.c3dc	a3dc	20 f8 a3	jsr $a3f8			jsr 	GXPlot0 						; twice, undoing negation
.c3df	a3df	ad 67 08	lda $0867			lda 	gxxCentre 						; swap X and Y
.c3e2	a3e2	ae 68 08	ldx $0868			ldx	 	gxYCentre
.c3e5	a3e5	8d 68 08	sta $0868			sta 	gxYCentre
.c3e8	a3e8	8e 67 08	stx $0867			stx 	gxxCentre
.c3eb	a3eb	ad 6a 08	lda $086a			lda 	gxYChanged 						; toggle Y Changed flag
.c3ee	a3ee	a9 ff		lda #$ff			lda 	#$FF
.c3f0	a3f0	8d 6a 08	sta $086a			sta 	gxYChanged
.c3f3	a3f3	60		rts				rts
.c3f4	a3f4	20 f8 a3	jsr $a3f8			jsr 	GXPlot0 						; do once
.c3f7	a3f7	60		rts				rts
.c3f8	a3f8	ad 69 08	lda $0869	GXPlot0:lda 	gxIsFillMode 					; outline mode, always draw as X or Y will change
.c3fb	a3fb	f0 05		beq $a402			beq 	_GXPlot0Always
.c3fd	a3fd	ad 6a 08	lda $086a			lda 	gxYChanged						; fill mode, only draw if changed.
.c400	a400	f0 2d		beq $a42f			beq 	GXPlot0Exit
.c402	a402					_GXPlot0Always:
.c402	a402	a2 02		ldx #$02			ldx 	#2 								; copy Y1-A => Y0
.c404	a404	ad 68 08	lda $0868			lda 	gxYCentre
.c407	a407	20 30 a4	jsr $a430			jsr 	GXSubCopy
.c40a	a40a	a2 00		ldx #$00			ldx 	#0 								; copy X1-A => X0,
.c40c	a40c	ad 67 08	lda $0867			lda 	gxxCentre
.c40f	a40f	20 30 a4	jsr $a430			jsr 	GXSubCopy
.c412	a412	48		pha				pha 									; save last offset X
.c413	a413	20 e9 aa	jsr $aae9			jsr 	gxPositionCalc 					; calculate position/offset.
.c416	a416	68		pla				pla
.c417	a417	0a		asl a				asl 	a 								; store 2 x last offset in gxzTemp0
.c418	a418	85 36		sta $36				sta 	gxzTemp0
.c41a	a41a	64 37		stz $37				stz 	gxzTemp0+1
.c41c	a41c	26 37		rol $37				rol 	gxzTemp0+1
.c41e	a41e	ad 69 08	lda $0869			lda 	gxIsFillMode
.c421	a421	69 80		adc #$80			adc 	#128
.c423	a423	20 c2 a7	jsr $a7c2			jsr 	GXDrawLineTemp0 				; routine from Rectangle.
.c426	a426	38		sec				sec 									; GY = -GY
.c427	a427	a9 00		lda #$00			lda 	#0
.c429	a429	ed 68 08	sbc $0868			sbc 	gxYCentre
.c42c	a42c	8d 68 08	sta $0868			sta 	gxYCentre
.c42f	a42f					GXPlot0Exit:
.c42f	a42f	60		rts				rts
.c430	a430					GXSubCopy:
.c430	a430	85 36		sta $36				sta 	gxzTemp0
.c432	a432	64 37		stz $37				stz 	gxzTemp0+1
.c434	a434	29 80		and #$80			and 	#$80
.c436	a436	f0 02		beq $a43a			beq 	_GXNoSx
.c438	a438	c6 37		dec $37				dec 	gxzTemp0+1
.c43a	a43a					_GXNoSx:
.c43a	a43a	38		sec				sec
.c43b	a43b	bd d2 07	lda $07d2,x			lda 	gxX1,x
.c43e	a43e	e5 36		sbc $36				sbc 	gxzTemp0
.c440	a440	9d ce 07	sta $07ce,x			sta 	gxX0,x
.c443	a443	bd d3 07	lda $07d3,x			lda 	gxX1+1,x
.c446	a446	e5 37		sbc $37				sbc 	gxzTemp0+1
.c448	a448	9d cf 07	sta $07cf,x			sta 	gxX0+1,x
.c44b	a44b	a5 36		lda $36				lda 	gxzTemp0 						; return A
.c44d	a44d	60		rts				rts
.c44e	a44e					GXCircleMove:
.c44e	a44e	9c 6a 08	stz $086a			stz 	gxYChanged 					; clear Y changed flag
.c451	a451	a5 39		lda $39				lda 	gxzTemp1+1 					; check sign of D
.c453	a453	10 0d		bpl $a462			bpl 	_GXEMPositive
.c455	a455	ee 67 08	inc $0867			inc 	gxxCentre 					; X++
.c458	a458	ad 67 08	lda $0867			lda 	gxxCentre
.c45b	a45b	20 81 a4	jsr $a481			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.c45e	a45e	a9 06		lda #$06			lda 	#6  						; and add 6
.c460	a460	80 15		bra $a477			bra 	_GXEMAddD
.c462	a462					_GXEMPositive:
.c462	a462	ee 67 08	inc $0867			inc 	gxxCentre					; X++
.c465	a465	ce 68 08	dec $0868			dec 	gxYCentre 					; Y--
.c468	a468	38		sec				sec 								; calculate X-Y
.c469	a469	ad 67 08	lda $0867			lda 	gxxCentre
.c46c	a46c	ed 68 08	sbc $0868			sbc 	gxYCentre
.c46f	a46f	20 81 a4	jsr $a481			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.c472	a472	a9 0a		lda #$0a			lda 	#10  						; and add 10
.c474	a474	ce 6a 08	dec $086a			dec 	gxYChanged
.c477	a477					_GXEMAddD:
.c477	a477	18		clc				clc
.c478	a478	65 38		adc $38				adc 	gxzTemp1
.c47a	a47a	85 38		sta $38				sta 	gxzTemp1
.c47c	a47c	90 02		bcc $a480			bcc 	_GXEMNoCarry
.c47e	a47e	e6 39		inc $39				inc 	gxzTemp1+1
.c480	a480					_GXEMNoCarry:
.c480	a480	60		rts				rts
.c481	a481					_GXAdd4TimesToD:
.c481	a481	85 36		sta $36				sta 	gxzTemp0 					; make 16 bit signed.
.c483	a483	29 80		and #$80			and 	#$80
.c485	a485	f0 02		beq $a489			beq 	_GXA4Unsigned
.c487	a487	a9 ff		lda #$ff			lda 	#$FF
.c489	a489					_GXA4Unsigned:
.c489	a489	85 37		sta $37				sta 	gxzTemp0+1
.c48b	a48b	06 36		asl $36				asl 	gxzTemp0  					; x 4
.c48d	a48d	26 37		rol $37				rol 	gxzTemp0+1
.c48f	a48f	06 36		asl $36				asl 	gxzTemp0
.c491	a491	26 37		rol $37				rol 	gxzTemp0+1
.c493	a493	18		clc				clc 								; add
.c494	a494	a5 36		lda $36				lda		gxzTemp0
.c496	a496	65 38		adc $38				adc 	gxzTemp1
.c498	a498	85 38		sta $38				sta 	gxzTemp1
.c49a	a49a	a5 37		lda $37				lda		gxzTemp0+1
.c49c	a49c	65 39		adc $39				adc 	gxzTemp1+1
.c49e	a49e	85 39		sta $39				sta 	gxzTemp1+1
.c4a0	a4a0	60		rts				rts
.c4a1	a4a1					GXCircleSetup:
.c4a1	a4a1	38		sec				sec
.c4a2	a4a2	ad d4 07	lda $07d4			lda 	gxY1
.c4a5	a4a5	ed d0 07	sbc $07d0			sbc 	gxY0
.c4a8	a4a8	4a		lsr a				lsr 	a
.c4a9	a4a9	8d 66 08	sta $0866			sta 	gxRadius
.c4ac	a4ac	a2 00		ldx #$00			ldx 	#0
.c4ae	a4ae	20 d0 a4	jsr $a4d0			jsr 	_GXCalculateCentre
.c4b1	a4b1	a2 02		ldx #$02			ldx 	#2
.c4b3	a4b3	20 d0 a4	jsr $a4d0			jsr 	_GXCalculateCentre
.c4b6	a4b6	9c 67 08	stz $0867			stz 	gxxCentre
.c4b9	a4b9	ad 66 08	lda $0866			lda 	gxRadius
.c4bc	a4bc	8d 68 08	sta $0868			sta 	gxYCentre
.c4bf	a4bf	0a		asl a				asl 	a 							; R x 2
.c4c0	a4c0	85 36		sta $36				sta 	gxzTemp0
.c4c2	a4c2	38		sec				sec
.c4c3	a4c3	a9 03		lda #$03			lda 	#3
.c4c5	a4c5	e5 36		sbc $36				sbc 	gxzTemp0
.c4c7	a4c7	85 38		sta $38				sta 	gxzTemp1
.c4c9	a4c9	a9 00		lda #$00			lda 	#0
.c4cb	a4cb	e9 00		sbc #$00			sbc 	#0
.c4cd	a4cd	85 39		sta $39				sta 	gxzTemp1+1
.c4cf	a4cf	60		rts				rts
.c4d0	a4d0					_GXCalculateCentre:
.c4d0	a4d0	38		sec				sec
.c4d1	a4d1	bd d2 07	lda $07d2,x			lda 	gxX1,x
.c4d4	a4d4	7d ce 07	adc $07ce,x			adc 	gxX0,x
.c4d7	a4d7	9d d2 07	sta $07d2,x			sta 	gxX1,x
.c4da	a4da	bd d3 07	lda $07d3,x			lda 	gxX1+1,x
.c4dd	a4dd	7d cf 07	adc $07cf,x			adc 	gxX0+1,x
.c4e0	a4e0	4a		lsr a				lsr 	a
.c4e1	a4e1	9d d3 07	sta $07d3,x			sta 	gxX1+1,x
.c4e4	a4e4	7e d2 07	ror $07d2,x			ror 	gxX1,x
.c4e7	a4e7	60		rts				rts
.0866						gxRadius:
>0866								.fill 	1
.0867						gxxCentre:
>0867								.fill 	1
.0868						gxYCentre:
>0868								.fill 	1
.0869						gxIsFillMode:
>0869								.fill 	1
.086a						gxYChanged:
>086a								.fill  	1
=64000						ScreenSize200 = 320 * 200
=76800						ScreenSize240 = 320 * 240
.c4e8	a4e8					GXClearBitmap:
.c4e8	a4e8	ad d7 07	lda $07d7			lda 	gxBitmapsOn 				; check BMP turned on.
.c4eb	a4eb	f0 26		beq $a513			beq 	_GXCBFail
.c4ed	a4ed	20 d9 aa	jsr $aad9			jsr 	GXOpenBitmap 				; start access
.c4f0	a4f0	a0 07		ldy #$07			ldy 	#ScreenSize200 / 8192 		; X is pages to clear as 2 graphic heights.
.c4f2	a4f2	ad da 07	lda $07da			lda 	gxHeight
.c4f5	a4f5	c9 c8		cmp #$c8			cmp 	#200 						; 200 ?
.c4f7	a4f7	f0 02		beq $a4fb			beq 	_GXCalcLastPage
.c4f9	a4f9	a0 09		ldy #$09			ldy 	#ScreenSize240 / 8192
.c4fb	a4fb					_GXCalcLastPage:
.c4fb	a4fb	98		tya				tya 								; add to base page
.c4fc	a4fc	18		clc				clc
.c4fd	a4fd	6d d8 07	adc $07d8			adc 	gxBasePage
.c500	a500	85 0b		sta $0b				sta 	GXEditSlot  				; clear from this page back
.c502	a502					_GXClearAll:
.c502	a502	20 15 a5	jsr $a515			jsr 	_GXClearBlock 				; clear 8k block
.c505	a505	c6 0b		dec $0b				dec 	GXEditSlot  				; back to previous
.c507	a507	a5 0b		lda $0b				lda 	GXEditSlot
.c509	a509	cd d8 07	cmp $07d8			cmp 	gxBasePage 					; until before base page
.c50c	a50c	b0 f4		bcs $a502			bcs 	_GXClearAll
.c50e	a50e	20 e1 aa	jsr $aae1			jsr 	GXCloseBitmap	 			; stop access
.c511	a511	18		clc				clc
.c512	a512	60		rts				rts
.c513	a513					_GXCBFail:
.c513	a513	38		sec				sec
.c514	a514	60		rts				rts
.c515	a515					_GXClearBlock:
.c515	a515	a9 00		lda #$00			lda 	#((GXMappingAddress) & $FF)
.c517	a517	85 38		sta $38				sta 	0+gxzTemp1
.c519	a519	a9 60		lda #$60			lda 	#((GXMappingAddress) >> 8)
.c51b	a51b	85 39		sta $39				sta 	1+gxzTemp1
.c51d	a51d					_GXCB0:
.c51d	a51d	a5 36		lda $36				lda 	gxzTemp0 					; clear colour
.c51f	a51f	a0 00		ldy #$00			ldy 	#0
.c521	a521					_GXCB1:
.c521	a521	91 38		sta ($38),y			sta 	(gxzTemp1),y
.c523	a523	c8		iny				iny
.c524	a524	91 38		sta ($38),y			sta 	(gxzTemp1),y
.c526	a526	c8		iny				iny
.c527	a527	91 38		sta ($38),y			sta 	(gxzTemp1),y
.c529	a529	c8		iny				iny
.c52a	a52a	91 38		sta ($38),y			sta 	(gxzTemp1),y
.c52c	a52c	c8		iny				iny
.c52d	a52d	d0 f2		bne $a521			bne 	_GXCB1
.c52f	a52f	e6 39		inc $39				inc 	gxzTemp1+1
.c531	a531	a5 39		lda $39				lda 	gxzTemp1+1
.c533	a533	c9 80		cmp #$80			cmp	 	#(GXMappingAddress >> 8)+$20
.c535	a535	d0 e6		bne $a51d			bne 	_GXCB0
.c537	a537	60		rts				rts
.c538	a538					GXInitialise:
.c538	a538	64 01		stz $01				stz 	1
.c53a	a53a	a9 01		lda #$01			lda 	#1
.c53c	a53c	8d 00 d0	sta $d000			sta 	$D000
.c53f	a53f	18		clc				clc
.c540	a540	9c d6 07	stz $07d6			stz 	gxSpritesOn
.c543	a543	9c d7 07	stz $07d7			stz 	gxBitmapsOn
.c546	a546	a2 0f		ldx #$0f			ldx 	#15
.c548	a548					_GXIClear:
.c548	a548	9e c6 07	stz $07c6,x			stz 	gxCurrentX,x
.c54b	a54b	ca		dex				dex
.c54c	a54c	10 fa		bpl $a548			bpl 	_GXIClear
.c54e	a54e	20 e9 a5	jsr $a5e9			jsr 	GXClearSpriteStore
.c551	a551	60		rts				rts
.c552	a552					GXControlBitmap:
.c552	a552	64 01		stz $01				stz 	1
.c554	a554	a5 36		lda $36				lda 	gxzTemp0 					; get control bits
.c556	a556	29 01		and #$01			and 	#1 							; set bitmap flag
.c558	a558	8d d7 07	sta $07d7			sta 	gxBitmapsOn
.c55b	a55b	4a		lsr a				lsr 	a 							; bit 0 into carry.
.c55c	a55c	ad 00 d0	lda $d000			lda 	$D000 						; read Vicky MCR
.c55f	a55f	09 07		ora #$07			ora 	#7 							; turn graphics, text, textoverlay on.
.c561	a561	29 f7		and #$f7			and 	#$F7 						; clear bitmap bit
.c563	a563	90 02		bcc $a567			bcc 	_CBNotOn
.c565	a565	09 08		ora #$08			ora 	#$08 						; bitmap on if 1 on 0 off
.c567	a567					_CBNotOn:
.c567	a567	8d 00 d0	sta $d000			sta 	$D000 						; update Vicky MCR
.c56a	a56a	a5 36		lda $36				lda 	gxzTemp0 					; get control settings (bits 0-2)
.c56c	a56c	29 07		and #$07			and 	#7
.c56e	a56e	8d 00 d1	sta $d100			sta 	$D100 						; write in Vicky Bitmap Control Register #0
.c571	a571	a5 37		lda $37				lda 	gxzTemp0+1 					; get the base page
.c573	a573	d0 02		bne $a577			bne 	_CBNotDefault
.c575	a575	a9 08		lda #$08			lda 	#8  						; if zero, use 8 e.g. bitmap at $10000
.c577	a577					_CBNotDefault:
.c577	a577	8d d8 07	sta $07d8			sta 	gxBasePage
.c57a	a57a	20 db a5	jsr $a5db			jsr 	GXCalculateBaseAddress 	 	; convert page# to address
.c57d	a57d	a5 37		lda $37				lda 	gxzTemp0+1 					; copy address into Bitmap address registers
.c57f	a57f	8d 03 d1	sta $d103			sta 	$D103
.c582	a582	a5 36		lda $36				lda 	gxzTemp0
.c584	a584	8d 02 d1	sta $d102			sta 	$D102
.c587	a587	9c 01 d1	stz $d101			stz 	$D101
.c58a	a58a	a2 f0		ldx #$f0			ldx 	#240 						; height is 240
.c58c	a58c	ad 01 d0	lda $d001			lda 	$D001 						; read MCR bit 0
.c58f	a58f	29 01		and #$01			and 	#1
.c591	a591	f0 02		beq $a595			beq 	_CBHaveHeight
.c593	a593	a2 c8		ldx #$c8			ldx 	#200 						; if bit 0 set 320x200
.c595	a595					_CBHaveHeight
.c595	a595	8e da 07	stx $07da			stx 	gxHeight
.c598	a598	18		clc				clc
.c599	a599	60		rts				rts
.c59a	a59a					GXControlSprite:
.c59a	a59a	64 01		stz $01				stz 	1
.c59c	a59c	a5 36		lda $36				lda 	gxzTemp0 					; get control bits
.c59e	a59e	29 01		and #$01			and 	#1 							; set sprites flag
.c5a0	a5a0	8d d6 07	sta $07d6			sta 	gxSpritesOn
.c5a3	a5a3	4a		lsr a				lsr 	a 							; bit 0 into carry.
.c5a4	a5a4	ad 00 d0	lda $d000			lda 	$D000 						; read Vicky MCR
.c5a7	a5a7	09 07		ora #$07			ora 	#7 							; turn graphics, text, textoverlay on.
.c5a9	a5a9	29 df		and #$df			and 	#$DF 						; clear sprite bit
.c5ab	a5ab	90 02		bcc $a5af			bcc 	_CSNotOn
.c5ad	a5ad	09 20		ora #$20			ora 	#$20 						; sprite on if 1 on 0 off
.c5af	a5af					_CSNotOn:
.c5af	a5af	8d 00 d0	sta $d000			sta 	$D000 						; update Vicky MCR
.c5b2	a5b2	a5 37		lda $37				lda 	gxzTemp0+1 					; get the base page
.c5b4	a5b4	d0 02		bne $a5b8			bne 	_CSNotDefault
.c5b6	a5b6	a9 18		lda #$18			lda 	#24  						; if zero, use 24 e.g. sprites at $30000
.c5b8	a5b8					_CSNotDefault:
.c5b8	a5b8	8d d9 07	sta $07d9			sta 	gxSpritePage
.c5bb	a5bb	20 db a5	jsr $a5db			jsr 	GXCalculateBaseAddress 	 	; convert page# to address
.c5be	a5be	a5 36		lda $36				lda 	gxzTemp0
.c5c0	a5c0	8d e4 07	sta $07e4			sta 	gxSpriteOffsetBase
.c5c3	a5c3	a5 37		lda $37				lda 	gxzTemp0+1
.c5c5	a5c5	8d e5 07	sta $07e5			sta 	gxSpriteOffsetBase+1
.c5c8	a5c8	a2 00		ldx #$00			ldx 	#0 							; disable all sprites, clears all sprite memory.
.c5ca	a5ca					_CSClear:
.c5ca	a5ca	9e 00 d9	stz $d900,x			stz 	$D900,x
.c5cd	a5cd	9e 00 da	stz $da00,x			stz 	$DA00,x
.c5d0	a5d0	ca		dex				dex
.c5d1	a5d1	d0 f7		bne $a5ca			bne 	_CSClear
.c5d3	a5d3	9c e3 07	stz $07e3			stz 	GSCurrentSpriteAddr+1 		; no sprite selected.
.c5d6	a5d6	20 e9 a5	jsr $a5e9			jsr 	GXClearSpriteStore
.c5d9	a5d9	18		clc				clc
.c5da	a5da	60		rts				rts
.c5db	a5db					GXCalculateBaseAddress:
.c5db	a5db	85 36		sta $36				sta 	gxzTemp0
.c5dd	a5dd	64 37		stz $37				stz 	gxzTemp0+1
.c5df	a5df	a9 05		lda #$05			lda 	#5
.c5e1	a5e1					_GXShift:
.c5e1	a5e1	06 36		asl $36				asl 	gxzTemp0
.c5e3	a5e3	26 37		rol $37				rol 	gxzTemp0+1
.c5e5	a5e5	3a		dec a				dec		a
.c5e6	a5e6	d0 f9		bne $a5e1			bne 	_GXShift
.c5e8	a5e8	60		rts				rts
.c5e9	a5e9					GXClearSpriteStore:
.c5e9	a5e9	a2 3f		ldx #$3f			ldx 	#63 						; erase 64 sprite store elements
.c5eb	a5eb					_GXCSSLoop:
.c5eb	a5eb	9e 26 08	stz $0826,x			stz 	gxSpriteHigh,x
.c5ee	a5ee	a9 80		lda #$80			lda 	#$80 						; set the 'hidden' bit.
.c5f0	a5f0	9d e6 07	sta $07e6,x			sta 	gxSpriteLow,x
.c5f3	a5f3	ca		dex				dex
.c5f4	a5f4	10 f5		bpl $a5eb			bpl 	_GXCSSLoop
.c5f6	a5f6	60		rts				rts
.c5f7	a5f7					GXLine:
.c5f7	a5f7	ad d7 07	lda $07d7			lda 	gxBitmapsOn
.c5fa	a5fa	f0 28		beq $a624			beq 	_GXLFail
.c5fc	a5fc	20 d9 aa	jsr $aad9			jsr 	GXOpenBitmap
.c5ff	a5ff	20 1f ac	jsr $ac1f			jsr 	GXSortY						; sort pairs so Y1 >= Y0 e.g. top to bottom.
.c602	a602	20 ca a6	jsr $a6ca			jsr 	GXLineSetup 				; the calculations in the linescanner constructor
.c605	a605	20 e9 aa	jsr $aae9			jsr 	gxPositionCalc 				; calculate position/offset.
.c608	a608					_GXDrawLoop:
.c608	a608	ac e0 07	ldy $07e0			ldy 	gxOffset 					; draw the pixel
.c60b	a60b	b1 3c		lda ($3c),y			lda 	(gxzScreen),y
.c60d	a60d	2d de 07	and $07de			and 	gxANDValue
.c610	a610	4d dd 07	eor $07dd			eor 	gxEORValue
.c613	a613	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.c615	a615	20 26 a6	jsr $a626			jsr 	GXLineIsComplete 			; is the line complete ?
.c618	a618	f0 05		beq $a61f			beq 	_GXLExit
.c61a	a61a	20 41 a6	jsr $a641			jsr 	GXLineAdvance 				; code as per advance method
.c61d	a61d	80 e9		bra $a608			bra 	_GXDrawLoop
.c61f	a61f					_GXLExit:
.c61f	a61f	20 e1 aa	jsr $aae1			jsr 	GXCloseBitmap
.c622	a622	18		clc				clc
.c623	a623	60		rts				rts
.c624	a624					_GXLFail:
.c624	a624	38		sec				sec
.c625	a625	60		rts				rts
.c626	a626					GXLineIsComplete:
.c626	a626	ad 6d 08	lda $086d			lda 	gxIsDiffYLarger 			; is dy larger
.c629	a629	d0 0f		bne $a63a			bne 	_GXLICCompareY 				; if so compare Y1/Y0
.c62b	a62b	ad ce 07	lda $07ce			lda 	gxX0 						; compare X, LSB and MSB
.c62e	a62e	4d d2 07	eor $07d2			eor 	gxX1
.c631	a631	d0 06		bne $a639			bne 	_GXLICExit
.c633	a633	ad cf 07	lda $07cf			lda 	gxX0+1
.c636	a636	4d d3 07	eor $07d3			eor 	gxX1+1
.c639	a639					_GXLICExit:
.c639	a639	60		rts				rts
.c63a	a63a					_GXLICCompareY:
.c63a	a63a	ad d4 07	lda $07d4			lda 	gxY1
.c63d	a63d	4d d0 07	eor $07d0			eor 	gxY0
.c640	a640	60		rts				rts
.c641	a641					GXLineAdvance:
.c641	a641	18		clc				clc 								; add adjust to position
.c642	a642	ad 6f 08	lda $086f			lda 	gxPosition
.c645	a645	6d 70 08	adc $0870			adc 	gxAdjust
.c648	a648	8d 6f 08	sta $086f			sta 	gxPosition
.c64b	a64b	9c 72 08	stz $0872			stz 	gxAddSelect 				; clear add select flag
.c64e	a64e	b0 05		bcs $a655			bcs 	_GXLAOverflow 				; if carry out, overflowed.
.c650	a650	cd 71 08	cmp $0871			cmp 	gxTotal 					; if exceeded total
.c653	a653	90 0a		bcc $a65f			bcc 	_GXLANoExtra
.c655	a655					_GXLAOverflow:
.c655	a655	ce 72 08	dec $0872			dec 	gxAddSelect 				; set addselect to $FF
.c658	a658	38		sec				sec 								; subtract total and write back
.c659	a659	ed 71 08	sbc $0871			sbc 	gxTotal
.c65c	a65c	8d 6f 08	sta $086f			sta 	gxPosition
.c65f	a65f					_GXLANoExtra:
.c65f	a65f	ad 6d 08	lda $086d			lda 	gxIsDiffYLarger
.c662	a662	f0 0d		beq $a671			beq 	_GXDXLarger
.c664	a664	20 c3 a6	jsr $a6c3			jsr 	GXIncrementY
.c667	a667	ad 72 08	lda $0872			lda 	gxAddSelect
.c66a	a66a	f0 10		beq $a67c			beq 	_GXLAExit
.c66c	a66c	20 7d a6	jsr $a67d			jsr 	gxAdjustX
.c66f	a66f	80 0b		bra $a67c			bra 	_GXLAExit
.c671	a671					_GXDXLarger:
.c671	a671	20 7d a6	jsr $a67d			jsr 	gxAdjustX
.c674	a674	ad 72 08	lda $0872			lda 	gxAddSelect
.c677	a677	f0 03		beq $a67c			beq 	_GXLAExit
.c679	a679	20 c3 a6	jsr $a6c3			jsr 	GXIncrementY
.c67c	a67c					_GXLAExit:
.c67c	a67c	60		rts				rts
.c67d	a67d					gxAdjustX:
.c67d	a67d	ad 6e 08	lda $086e			lda 	gxDXNegative
.c680	a680	10 25		bpl $a6a7			bpl 	_GXAXRight
.c682	a682	ad ce 07	lda $07ce			lda 	gxX0
.c685	a685	d0 03		bne $a68a			bne 	_GXAXNoBorrow
.c687	a687	ce cf 07	dec $07cf			dec 	gxX0+1
.c68a	a68a					_GXAXNoBorrow:
.c68a	a68a	ce ce 07	dec $07ce			dec 	gxX0
.c68d	a68d	ce e0 07	dec $07e0			dec 	gxOffset 					; pixel left
.c690	a690	ad e0 07	lda $07e0			lda 	gxOffset
.c693	a693	c9 ff		cmp #$ff			cmp 	#$FF
.c695	a695	d0 0f		bne $a6a6			bne 	_GXAYExit 					; underflow
.c697	a697	c6 3d		dec $3d				dec 	gxzScreen+1 					; borrow
.c699	a699	a5 3d		lda $3d				lda 	gxzScreen+1 					; gone off page
.c69b	a69b	c9 60		cmp #$60			cmp 	#GXMappingAddress >> 8
.c69d	a69d	b0 07		bcs $a6a6			bcs 	_GXAYExit
.c69f	a69f	18		clc				clc
.c6a0	a6a0	69 20		adc #$20			adc 	#$20 						; fix up
.c6a2	a6a2	85 3d		sta $3d				sta 	gxzScreen+1
.c6a4	a6a4	c6 0b		dec $0b				dec 	GXEditSlot 				; back one page
.c6a6	a6a6					_GXAYExit:
.c6a6	a6a6	60		rts				rts
.c6a7	a6a7					_GXAXRight:
.c6a7	a6a7	ee ce 07	inc $07ce			inc 	gxX0
.c6aa	a6aa	d0 03		bne $a6af			bne 	_GXAXNoCarry
.c6ac	a6ac	ee cf 07	inc $07cf			inc 	gxX0+1
.c6af	a6af					_GXAXNoCarry:
.c6af	a6af	ee e0 07	inc $07e0			inc 	gxOffset 					; pixel right
.c6b2	a6b2	d0 0e		bne $a6c2			bne 	_GXAXExit 					; if not overflowed, exit.
.c6b4	a6b4	e6 3d		inc $3d				inc 	gxzScreen+1 					; next line
.c6b6	a6b6	a5 3d		lda $3d				lda 	gxzScreen+1
.c6b8	a6b8	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page ?
.c6ba	a6ba	90 06		bcc $a6c2			bcc 	_GXAXExit
.c6bc	a6bc	e9 20		sbc #$20			sbc 	#$20 						; fix up
.c6be	a6be	85 3d		sta $3d				sta 	gxzScreen+1
.c6c0	a6c0	e6 0b		inc $0b				inc 	GXEditSlot 				; next page
.c6c2	a6c2					_GXAXExit:
.c6c2	a6c2	60		rts				rts
.c6c3	a6c3					GXIncrementY:
.c6c3	a6c3	ee d0 07	inc $07d0			inc 	gxY0
.c6c6	a6c6	20 3f ab	jsr $ab3f			jsr 	GXMovePositionDown
.c6c9	a6c9	60		rts				rts
.c6ca	a6ca					GXLineSetup:
.c6ca	a6ca	ad d4 07	lda $07d4			lda 	gxY1
.c6cd	a6cd	38		sec				sec
.c6ce	a6ce	ed d0 07	sbc $07d0			sbc 	gxY0
.c6d1	a6d1	4a		lsr a				lsr 	a
.c6d2	a6d2	8d 6c 08	sta $086c			sta 	gxDiffY
.c6d5	a6d5	9c 6e 08	stz $086e			stz 	gxDXNegative 				; clear -ve flag
.c6d8	a6d8	38		sec				sec
.c6d9	a6d9	ad d2 07	lda $07d2			lda 	gxX1
.c6dc	a6dc	ed ce 07	sbc $07ce			sbc 	gxX0
.c6df	a6df	8d 6b 08	sta $086b			sta 	gxDiffX
.c6e2	a6e2	ad d3 07	lda $07d3			lda 	gxX1+1 						; calculate MSB
.c6e5	a6e5	ed cf 07	sbc $07cf			sbc 	gxX0+1
.c6e8	a6e8	6a		ror a				ror 	a 							; rotate bit into DiffX halving it
.c6e9	a6e9	6e 6b 08	ror $086b			ror 	gxDiffX
.c6ec	a6ec	0a		asl a				asl 	a
.c6ed	a6ed	10 0c		bpl $a6fb			bpl 	_GDXNotNegative
.c6ef	a6ef	a9 00		lda #$00			lda 	#0 							; make absolute value of |dx|
.c6f1	a6f1	38		sec				sec
.c6f2	a6f2	ed 6b 08	sbc $086b			sbc 	gxDiffX
.c6f5	a6f5	8d 6b 08	sta $086b			sta 	gxDiffX
.c6f8	a6f8	ce 6e 08	dec $086e			dec 	gxDXNegative 				; -ve flag = $FF.
.c6fb	a6fb					_GDXNotNegative:
.c6fb	a6fb	9c 6d 08	stz $086d			stz 	gxIsDiffYLarger 			; clear larger flag
.c6fe	a6fe	ad 6c 08	lda $086c			lda 	gxDiffY 					; set adjust and total.
.c701	a701	8d 70 08	sta $0870			sta 	gxAdjust
.c704	a704	ad 6b 08	lda $086b			lda 	gxDiffX
.c707	a707	8d 71 08	sta $0871			sta 	gxTotal
.c70a	a70a	ad 6c 08	lda $086c			lda 	gxDiffY 					; if dy > dx
.c70d	a70d	cd 6b 08	cmp $086b			cmp 	gxDiffX
.c710	a710	90 0f		bcc $a721			bcc 	_GDXNotLarger
.c712	a712	ce 6d 08	dec $086d			dec 	gxIsDiffYLarger 			; set the dy larger flag
.c715	a715	ad 6b 08	lda $086b			lda 	gxDiffX 					; set adjust and total other way round
.c718	a718	8d 70 08	sta $0870			sta 	gxAdjust
.c71b	a71b	ad 6c 08	lda $086c			lda 	gxDiffY
.c71e	a71e	8d 71 08	sta $0871			sta 	gxTotal
.c721	a721					_GDXNotLarger:
.c721	a721	ad 71 08	lda $0871			lda 	gxTotal
.c724	a724	4a		lsr a				lsr 	a
.c725	a725	8d 6f 08	sta $086f			sta 	gxPosition
.c728	a728	60		rts				rts
.086b						gxDiffX:
>086b								.fill 	1
.086c						gxDiffY:
>086c								.fill 	1
.086d						gxIsDiffYLarger:
>086d								.fill 	1
.086e						gxDXNegative:
>086e								.fill 	1
.086f						gxPosition:
>086f								.fill 	1
.0870						gxAdjust:
>0870								.fill 	1
.0871						gxTotal:
>0871								.fill 	1
.0872						gxAddSelect:
>0872								.fill 	1
.c729	a729					GXSetColourMode:
.c729	a729	a6 36		ldx $36				ldx 	gxzTemp0
.c72b	a72b	8e dc 07	stx $07dc			stx 	gxColour 								; set colour
.c72e	a72e	a5 37		lda $37				lda 	gxzTemp0+1 								;
.c730	a730	8d db 07	sta $07db			sta 	gxMode 									; set mode
.c733	a733	29 03		and #$03			and 	#3 										; only interested in bits 0-3
.c735	a735	9c de 07	stz $07de			stz 	gxANDValue 								; initially AND with 0, and EOR with Colour
.c738	a738	ae dc 07	ldx $07dc			ldx 	gxColour
.c73b	a73b	8e dd 07	stx $07dd			stx 	gxEORValue
.c73e	a73e	c9 02		cmp #$02			cmp 	#2 										; if mode 2/3 And with colour
.c740	a740	90 03		bcc $a745			bcc 	_GXSDCNotAndColour
.c742	a742	8e de 07	stx $07de			stx 	gxANDValue
.c745	a745					_GXSDCNotAndColour:
.c745	a745	d0 03		bne $a74a			bne 	_GXSDCNotAnd 							; mode 2, Don't EOR with colour
.c747	a747	9c dd 07	stz $07dd			stz 	gxEORValue
.c74a	a74a					_GXSDCNotAnd:
.c74a	a74a	4a		lsr a				lsr 	a 										; if bit 0 set, 1's complement AND value
.c74b	a74b	90 08		bcc $a755			bcc 	_GXSDCNoFlip
.c74d	a74d	ad de 07	lda $07de			lda	 	gxANDValue
.c750	a750	49 ff		eor #$ff			eor 	#$FF
.c752	a752	8d de 07	sta $07de			sta 	gxANDValue
.c755	a755					_GXSDCNoFlip:
.c755	a755	18		clc				clc
.c756	a756	60		rts				rts
.c757	a757					GXPlotPoint:
.c757	a757	20 d9 aa	jsr $aad9			jsr 	GXOpenBitmap 				; start drawing
.c75a	a75a	20 e9 aa	jsr $aae9			jsr 	gxPositionCalc 				; setup gxzScreen, gxOffset and the position.
.c75d	a75d	ac e0 07	ldy $07e0			ldy 	gxOffset
.c760	a760	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel on the right
.c762	a762	2d de 07	and $07de			and 	gxANDValue
.c765	a765	4d dd 07	eor $07dd			eor 	gxEORValue
.c768	a768	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.c76a	a76a	20 e1 aa	jsr $aae1			jsr 	GXCloseBitmap 				; stop drawing and exit
.c76d	a76d	18		clc				clc
.c76e	a76e	60		rts				rts
.c76f	a76f					GXFillRectangle:
.c76f	a76f	38		sec				sec
.c770	a770	80 01		bra $a773			bra 	GXRectangle
.c772	a772					GXFrameRectangle:
.c772	a772	18		clc				clc
.c773	a773					GXRectangle:
.c773	a773	ad d7 07	lda $07d7			lda 	gxBitmapsOn
.c776	a776	f0 35		beq $a7ad			beq 	_GXRFail
.c778	a778	08		php				php 								; save Fill flag (CS)
.c779	a779	20 d9 aa	jsr $aad9			jsr 	GXOpenBitmap 				; start drawing
.c77c	a77c	20 01 ac	jsr $ac01			jsr 	GXSortXY 					; sort both X and Y so top left/bottom right
.c77f	a77f	20 e9 aa	jsr $aae9			jsr 	gxPositionCalc 				; setup gxzScreen, gxOffset and the position.
.c782	a782	38		sec				sec 								; sec = Draw line
.c783	a783	20 af a7	jsr $a7af			jsr 	GXDrawLineX1X0 				; draw a line length X1-X0
.c786	a786	ad d0 07	lda $07d0			lda 	gxY0 						; reached end of rectangle ?
.c789	a789	cd d4 07	cmp $07d4			cmp 	gxY1
.c78c	a78c	f0 19		beq $a7a7			beq 	_GXRectangleExit
.c78e	a78e					_GXRectLoop:
.c78e	a78e	20 3f ab	jsr $ab3f			jsr 	GXMovePositionDown 			; down one.
.c791	a791	ee d0 07	inc $07d0			inc 	gxY0 						; change Y pos
.c794	a794	ad d0 07	lda $07d0			lda 	gxY0 						; reached last line
.c797	a797	cd d4 07	cmp $07d4			cmp 	gxY1
.c79a	a79a	f0 07		beq $a7a3			beq 	_GXLastLine
.c79c	a79c	28		plp				plp 								; get flag back
.c79d	a79d	08		php				php
.c79e	a79e	20 af a7	jsr $a7af			jsr 	GXDrawLineX1X0 				; draw horizontal line
.c7a1	a7a1	80 eb		bra $a78e			bra 	_GXRectLoop
.c7a3	a7a3					_GXLastLine:
.c7a3	a7a3	38		sec				sec
.c7a4	a7a4	20 af a7	jsr $a7af			jsr 	GXDrawLineX1X0
.c7a7	a7a7					_GXRectangleExit:
.c7a7	a7a7	68		pla				pla 								; throw fill flag.
.c7a8	a7a8	20 e1 aa	jsr $aae1			jsr 	GXCloseBitmap 				; stop drawing and exit
.c7ab	a7ab	18		clc				clc
.c7ac	a7ac	60		rts				rts
.c7ad	a7ad					_GXRFail:
.c7ad	a7ad	38		sec				sec
.c7ae	a7ae	60		rts				rts
.c7af	a7af					GXDrawLineX1X0:
.c7af	a7af	08		php				php 								; save solid/either-end
.c7b0	a7b0	38		sec				sec
.c7b1	a7b1	ad d2 07	lda $07d2			lda		gxX1
.c7b4	a7b4	ed ce 07	sbc $07ce			sbc 	gxX0
.c7b7	a7b7	85 36		sta $36				sta 	gxzTemp0
.c7b9	a7b9	ad d3 07	lda $07d3			lda 	gxX1+1
.c7bc	a7bc	ed cf 07	sbc $07cf			sbc 	gxX0+1
.c7bf	a7bf	85 37		sta $37				sta 	gxzTemp0+1
.c7c1	a7c1	28		plp				plp
.c7c2	a7c2					GXDrawLineTemp0:
.c7c2	a7c2	a5 3c		lda $3c				lda 	gxzScreen 						; push gxzScreen, gxOffset and GXEditSlot on stack
.c7c4	a7c4	48		pha				pha
.c7c5	a7c5	a5 3d		lda $3d				lda 	gxzScreen+1
.c7c7	a7c7	48		pha				pha
.c7c8	a7c8	ad e0 07	lda $07e0			lda 	gxOffset
.c7cb	a7cb	48		pha				pha
.c7cc	a7cc	a5 0b		lda $0b				lda 	GXEditSlot
.c7ce	a7ce	48		pha				pha
.c7cf	a7cf	ac e0 07	ldy $07e0			ldy 	gxOffset 					; Y offset
.c7d2	a7d2	90 1e		bcc $a7f2			bcc 	_GXDLTEndPoints 			; if CC draw end points only.
.c7d4	a7d4					_GXDLTLine:
.c7d4	a7d4	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel
.c7d6	a7d6	2d de 07	and $07de			and 	gxANDValue
.c7d9	a7d9	4d dd 07	eor $07dd			eor 	gxEORValue
.c7dc	a7dc	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.c7de	a7de	a5 36		lda $36				lda 	gxzTemp0 					; decrement counter
.c7e0	a7e0	d0 04		bne $a7e6			bne 	_GXDLTNoBorrow
.c7e2	a7e2	c6 37		dec $37				dec 	gxzTemp0+1 					; borrow, if goes -ve then exit
.c7e4	a7e4	30 2e		bmi $a814			bmi 	_GXDLTExit
.c7e6	a7e6					_GXDLTNoBorrow:
.c7e6	a7e6	c6 36		dec $36				dec 	gxzTemp0
.c7e8	a7e8	c8		iny				iny 								; next slot.
.c7e9	a7e9	d0 e9		bne $a7d4			bne 	_GXDLTLine
.c7eb	a7eb	e6 3d		inc $3d				inc 	gxzScreen+1 					; carry to next
.c7ed	a7ed	20 22 a8	jsr $a822			jsr 	GXDLTCheckWrap				; check for new page.
.c7f0	a7f0	80 e2		bra $a7d4			bra 	_GXDLTLine
.c7f2	a7f2					_GXDLTEndPoints:
.c7f2	a7f2	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel
.c7f4	a7f4	2d de 07	and $07de			and 	gxANDValue
.c7f7	a7f7	4d dd 07	eor $07dd			eor 	gxEORValue
.c7fa	a7fa	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.c7fc	a7fc	98		tya				tya 								; advance to right side
.c7fd	a7fd	18		clc				clc
.c7fe	a7fe	65 36		adc $36				adc 	gxzTemp0
.c800	a800	a8		tay				tay
.c801	a801	a5 3d		lda $3d				lda 	gxzScreen+1
.c803	a803	65 37		adc $37				adc 	gxzTemp0+1
.c805	a805	85 3d		sta $3d				sta 	gxzScreen+1
.c807	a807	20 22 a8	jsr $a822			jsr 	GXDLTCheckWrap 			; fix up.
.c80a	a80a	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel on the right
.c80c	a80c	2d de 07	and $07de			and 	gxANDValue
.c80f	a80f	4d dd 07	eor $07dd			eor 	gxEORValue
.c812	a812	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.c814	a814					_GXDLTExit:
.c814	a814	68		pla				pla
.c815	a815	85 0b		sta $0b				sta 	GXEditSlot
.c817	a817	68		pla				pla
.c818	a818	8d e0 07	sta $07e0			sta 	gxOffset
.c81b	a81b	68		pla				pla
.c81c	a81c	85 3d		sta $3d				sta 	gxzScreen+1
.c81e	a81e	68		pla				pla
.c81f	a81f	85 3c		sta $3c				sta 	gxzScreen
.c821	a821	60		rts				rts
.c822	a822					GXDLTCheckWrap:
.c822	a822	a5 3d		lda $3d				lda 	gxzScreen+1 					; check end of page
.c824	a824	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8)
.c826	a826	90 06		bcc $a82e			bcc 	_GXDLTCWExit
.c828	a828	e9 20		sbc #$20			sbc 	#$20 						; fix up
.c82a	a82a	85 3d		sta $3d				sta 	gxzScreen+1
.c82c	a82c	e6 0b		inc $0b				inc 	GXEditSlot
.c82e	a82e					_GXDLTCWExit:
.c82e	a82e	60		rts				rts
.c82f	a82f					GXDrawGraphicElement:
.c82f	a82f	8d 73 08	sta $0873			sta 	gxSize 						; save size
.c832	a832	3a		dec a				dec 	a
.c833	a833	8d 74 08	sta $0874			sta 	gxMask 						; and mask
.c836	a836	ad d7 07	lda $07d7			lda 	gxBitmapsOn 				; check BMP on
.c839	a839	f0 67		beq $a8a2			beq 	_GXSLFail
.c83b	a83b	ad d0 07	lda $07d0			lda 	gxY0 						; push Y on stack
.c83e	a83e	48		pha				pha
.c83f	a83f	8c 76 08	sty $0876			sty 	gxAcquireVector+1 			; and acquisition vector
.c842	a842	8e 75 08	stx $0875			stx 	gxAcquireVector
.c845	a845	20 d9 aa	jsr $aad9			jsr 	GXOpenBitmap 				; open the bitmap.
.c848	a848	ad 78 08	lda $0878			lda 	gxUseMode 					; scale bits
.c84b	a84b	4a		lsr a				lsr 	a
.c84c	a84c	4a		lsr a				lsr 	a
.c84d	a84d	4a		lsr a				lsr 	a
.c84e	a84e	29 07		and #$07			and		#7
.c850	a850	1a		inc a				inc 	a
.c851	a851	8d 77 08	sta $0877			sta 	gxScale
.c854	a854	64 38		stz $38				stz 	gxzTemp1					; start first line
.c856	a856					_GXGELoop:
.c856	a856	a5 38		lda $38				lda 	gxzTemp1 					; current line number to read.
.c858	a858	2c 78 08	bit $0878			bit 	gxUseMode 					; check for flip.
.c85b	a85b	10 06		bpl $a863			bpl		_GXNoVFlip
.c85d	a85d	ad 74 08	lda $0874			lda 	gxMask
.c860	a860	38		sec				sec
.c861	a861	e5 38		sbc $38				sbc 	gxzTemp1
.c863	a863					_GXNoVFlip:
.c863	a863	aa		tax				tax 								; get the Xth line.
.c864	a864	20 a4 a8	jsr $a8a4			jsr 	_GXCallAcquire 				; get that data.
.c867	a867	ad 77 08	lda $0877			lda 	gxScale 					; do scale identical copies of that line.
.c86a	a86a	85 39		sta $39				sta 	gxzTemp1+1
.c86c	a86c					_GXGELoop2:
.c86c	a86c	ad d0 07	lda $07d0			lda 	gxY0 						; off screen
.c86f	a86f	cd da 07	cmp $07da			cmp 	gxHeight
.c872	a872	b0 10		bcs $a884			bcs 	_GXDGEExit
.c874	a874	20 a7 a8	jsr $a8a7			jsr 	GXRenderOneLine 			; render line
.c877	a877	c6 39		dec $39				dec 	gxzTemp1+1 					; scale times.
.c879	a879	d0 f1		bne $a86c			bne 	_GXGELoop2
.c87b	a87b	e6 38		inc $38				inc 	gxzTemp1 					; done all lines.
.c87d	a87d	a5 38		lda $38				lda 	gxzTemp1
.c87f	a87f	cd 73 08	cmp $0873			cmp 	gxSize
.c882	a882	d0 d2		bne $a856			bne 	_GXGELoop
.c884	a884					_GXDGEExit:
.c884	a884	68		pla				pla 								; restore Y for next time
.c885	a885	8d d0 07	sta $07d0			sta 	gxY0
.c888	a888	ae 77 08	ldx $0877			ldx 	gxScale 					; get scale (1-8)
.c88b	a88b					_GXShiftLeft:
.c88b	a88b	18		clc				clc
.c88c	a88c	ad 73 08	lda $0873			lda 	gxSize
.c88f	a88f	6d ce 07	adc $07ce			adc 	gxX0
.c892	a892	8d ce 07	sta $07ce			sta 	gxX0
.c895	a895	90 03		bcc $a89a			bcc 	_GXSLNoCarry
.c897	a897	ee cf 07	inc $07cf			inc 	gxX0+1
.c89a	a89a					_GXSLNoCarry:
.c89a	a89a	ca		dex				dex
.c89b	a89b	d0 ee		bne $a88b			bne 	_GXShiftLeft
.c89d	a89d	20 e1 aa	jsr $aae1			jsr 	GXCloseBitmap
.c8a0	a8a0	18		clc				clc
.c8a1	a8a1	60		rts				rts
.c8a2	a8a2					_GXSLFail:
.c8a2	a8a2	38		sec				sec
.c8a3	a8a3	60		rts				rts
.c8a4	a8a4					_GXCallAcquire:
.c8a4	a8a4	6c 75 08	jmp ($0875)			jmp 	(gxAcquireVector)
.c8a7	a8a7					GXRenderOneLine:
.c8a7	a8a7	20 e9 aa	jsr $aae9			jsr 	gxPositionCalc 				; calculate position/offset.
.c8aa	a8aa	ac e0 07	ldy $07e0			ldy 	gxOffset 					; Y contains position.
.c8ad	a8ad	64 3a		stz $3a				stz 	gxzTemp2 					; do size pixels
.c8af	a8af					_GXROLLoop1:
.c8af	a8af	ad 77 08	lda $0877			lda 	gxScale 					; set to do 'scale' times
.c8b2	a8b2	85 3b		sta $3b				sta 	gxzTemp2+1
.c8b4	a8b4					_GXROLLoop2:
.c8b4	a8b4	a5 3a		lda $3a				lda 	gxzTemp2 					; get current pixel
.c8b6	a8b6	2c db 07	bit $07db			bit 	gxMode 						; check H Flip
.c8b9	a8b9	50 06		bvc $a8c1			bvc 	_GXNoHFlip
.c8bb	a8bb	ad 74 08	lda $0874			lda 	gxMask
.c8be	a8be	38		sec				sec
.c8bf	a8bf	e5 3a		sbc $3a				sbc 	gxzTemp2
.c8c1	a8c1					_GXNoHFlip:
.c8c1	a8c1	aa		tax				tax 								; read from the pixel buffer
.c8c2	a8c2	bd 23 06	lda $0623,x			lda 	gxPixelBuffer,x
.c8c5	a8c5	d0 07		bne $a8ce			bne 	_GXDraw 					; draw if non zero
.c8c7	a8c7	ad 78 08	lda $0878			lda 	gxUseMode 					; check to see if solid background
.c8ca	a8ca	29 04		and #$04			and 	#4
.c8cc	a8cc	f0 0a		beq $a8d8			beq 	_GXZeroPixel
.c8ce	a8ce					_GXDraw:
.c8ce	a8ce	b1 3c		lda ($3c),y			lda 	(gxzScreen),y
.c8d0	a8d0	2d de 07	and $07de			and 	gxANDValue
.c8d3	a8d3	5d 23 06	eor $0623,x			eor 	gxPixelBuffer,x
.c8d6	a8d6	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.c8d8	a8d8					_GXZeroPixel:
.c8d8	a8d8	c8		iny				iny 								; advance pointer
.c8d9	a8d9	d0 05		bne $a8e0			bne 	_GXNoShift
.c8db	a8db	e6 3d		inc $3d				inc 	gxzScreen+1 				; carry to next
.c8dd	a8dd	20 22 a8	jsr $a822			jsr 	GXDLTCheckWrap				; check for new page.
.c8e0	a8e0					_GXNoShift:
.c8e0	a8e0	c6 3b		dec $3b				dec 	gxzTemp2+1 					; do the inner loop gxScale times.
.c8e2	a8e2	d0 d0		bne $a8b4			bne 	_GXROLLoop2
.c8e4	a8e4	e6 3a		inc $3a				inc 	gxzTemp2 					; next pixel.
.c8e6	a8e6	a5 3a		lda $3a				lda 	gxzTemp2
.c8e8	a8e8	cd 73 08	cmp $0873			cmp 	gxSize
.c8eb	a8eb	d0 c2		bne $a8af			bne 	_GXROLLoop1
.c8ed	a8ed	ee d0 07	inc $07d0			inc 	gxY0
.c8f0	a8f0	60		rts				rts
.0873						gxSize:
>0873								.fill 	1
.0874						gxMask:
>0874								.fill 	1
.0875						gxAcquireVector:
>0875								.fill 	2
.0877						gxScale:
>0877								.fill 	1
.0878						gxUseMode:
>0878								.fill 	1
.c8f1	a8f1					GXFontHandler:
.c8f1	a8f1	a5 37		lda $37				lda 	gxzTemp0+1 					; eor with mode
.c8f3	a8f3	4d db 07	eor $07db			eor 	gxMode
.c8f6	a8f6	8d 78 08	sta $0878			sta 	gxUseMode
.c8f9	a8f9	64 37		stz $37				stz 	gxzTemp0+1 					; gxzTemp0 is font #
.c8fb	a8fb	06 36		asl $36				asl	 	gxzTemp0 					; x 2
.c8fd	a8fd	26 37		rol $37				rol	 	gxzTemp0+1
.c8ff	a8ff	06 36		asl $36				asl	 	gxzTemp0 					; x 4
.c901	a901	26 37		rol $37				rol	 	gxzTemp0+1
.c903	a903	06 36		asl $36				asl	 	gxzTemp0 					; x 8
.c905	a905	26 37		rol $37				rol	 	gxzTemp0+1
.c907	a907	a5 37		lda $37				lda 	gxzTemp0+1 					; put in page C0
.c909	a909	09 c0		ora #$c0			ora 	#$C0
.c90b	a90b	85 37		sta $37				sta 	gxzTemp0+1
.c90d	a90d	a9 08		lda #$08			lda 	#8 							; size 8x8
.c90f	a90f	a2 17		ldx #$17			ldx 	#GXGetGraphicDataFont & $FF ; XY = Graphic Data retrieval routine
.c911	a911	a0 a9		ldy #$a9			ldy 	#GXGetGraphicDataFont >> 8
.c913	a913	20 2f a8	jsr $a82f			jsr 	GXDrawGraphicElement
.c916	a916	60		rts				rts
.c917	a917					GXGetGraphicDataFont:
.c917	a917	8a		txa				txa 								; X->Y
.c918	a918	a8		tay				tay
.c919	a919	a6 01		ldx $01				ldx 	1 							; preserve old value
.c91b	a91b	a9 01		lda #$01			lda 	#1 							; access page 1 (font memory)
.c91d	a91d	85 01		sta $01				sta 	1
.c91f	a91f	b1 36		lda ($36),y			lda 	(gxzTemp0),y 				; read the font element.
.c921	a921	86 01		stx $01				stx 	1 							; put old value back.
.c923	a923	a2 00		ldx #$00			ldx 	#0 							; do 8 times
.c925	a925					_GXExpand:
.c925	a925	9e 23 06	stz $0623,x			stz 	gxPixelBuffer,x 			; zero in pixel buffer
.c928	a928	0a		asl a				asl 	a 							; shift bit 7 into C
.c929	a929	90 08		bcc $a933			bcc 	_GXNoPixel
.c92b	a92b	48		pha				pha 								; if set, set pixel buffer to current colour.
.c92c	a92c	ad dc 07	lda $07dc			lda 	gxColour
.c92f	a92f	9d 23 06	sta $0623,x			sta 	gxPixelBuffer,x
.c932	a932	68		pla				pla
.c933	a933					_GXNoPixel:
.c933	a933	e8		inx				inx 								; do the whole byte.
.c934	a934	e0 08		cpx #$08			cpx 	#8
.c936	a936	d0 ed		bne $a925			bne 	_GXExpand
.c938	a938	60		rts				rts
.c939	a939					GXSpriteHandler:
.c939	a939	ad d6 07	lda $07d6			lda 	gxSpritesOn 				; sprites on ?
.c93c	a93c	f0 23		beq $a961			beq 	_GXSHExit
.c93e	a93e	a5 37		lda $37				lda 	gxzTemp0+1 					; eor with mode
.c940	a940	4d db 07	eor $07db			eor 	gxMode
.c943	a943	8d 78 08	sta $0878			sta 	gxUseMode
.c946	a946	a6 36		ldx $36				ldx 	gxzTemp0 					; sprite #
.c948	a948	da		phx				phx
.c949	a949	20 d9 aa	jsr $aad9			jsr 	GXOpenBitmap 				; can access sprite information
.c94c	a94c	68		pla				pla
.c94d	a94d	20 ba ab	jsr $abba			jsr 	GXFindSprite 				; get the sprite address
.c950	a950	08		php				php
.c951	a951	20 e1 aa	jsr $aae1			jsr 	GXCloseBitmap
.c954	a954	28		plp				plp
.c955	a955	b0 0a		bcs $a961			bcs		_GXSHExit 					; exit if find failed.
.c957	a957	ad 79 08	lda $0879			lda 	gxSizePixels 				; return size
.c95a	a95a	a2 62		ldx #$62			ldx 	#GXSpriteAcquire & $FF
.c95c	a95c	a0 a9		ldy #$a9			ldy 	#GXSpriteAcquire >> 8
.c95e	a95e	20 2f a8	jsr $a82f			jsr 	GXDrawGraphicElement
.c961	a961					_GXSHExit:
.c961	a961	60		rts				rts
.c962	a962					GXSpriteAcquire:
.c962	a962	ad d9 07	lda $07d9			lda 	gxSpritePage				; point to base page
.c965	a965	85 0b		sta $0b				sta 	GXEditSlot
.c967	a967	86 36		stx $36				stx 	gxzTemp0 					; row number x 1,2,3,4
.c969	a969	a9 00		lda #$00			lda 	#0
.c96b	a96b	ae 7a 08	ldx $087a			ldx 	gxSizeBits
.c96e	a96e					_GXTimesRowNumber:
.c96e	a96e	18		clc				clc
.c96f	a96f	65 36		adc $36				adc 	gxzTemp0
.c971	a971	ca		dex				dex
.c972	a972	10 fa		bpl $a96e			bpl 	_GXTimesRowNumber
.c974	a974	64 37		stz $37				stz 	gxzTemp0+1
.c976	a976	0a		asl a				asl 	a 							; row x 2,4,6,8
.c977	a977	26 37		rol $37				rol 	gxzTemp0+1
.c979	a979	0a		asl a				asl 	a 							; row x 4,8,12,16
.c97a	a97a	26 37		rol $37				rol 	gxzTemp0+1
.c97c	a97c	0a		asl a				asl 	a 							; row x 8,16,24,32
.c97d	a97d	26 37		rol $37				rol 	gxzTemp0+1
.c97f	a97f	85 36		sta $36				sta 	gxzTemp0
.c981	a981	18		clc				clc 								; add base address.
.c982	a982	a5 36		lda $36				lda 	gxzTemp0
.c984	a984	6d 7c 08	adc $087c			adc 	gxSpriteOffset
.c987	a987	85 36		sta $36				sta 	gxzTemp0
.c989	a989	a5 37		lda $37				lda 	gxzTemp0+1
.c98b	a98b	6d 7d 08	adc $087d			adc 	gxSpriteOffset+1
.c98e	a98e					_GXSAFindPage:
.c98e	a98e	c9 20		cmp #$20			cmp 	#$20 						; on this page
.c990	a990	90 06		bcc $a998			bcc 	_GXSAFoundPage
.c992	a992	e9 20		sbc #$20			sbc 	#$20 						; forward one page
.c994	a994	e6 0b		inc $0b				inc 	GXEditSlot
.c996	a996	80 f6		bra $a98e			bra 	_GXSAFindPage
.c998	a998					_GXSAFoundPage:
.c998	a998	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; physical address of page.
.c99a	a99a	85 37		sta $37				sta 	gxzTemp0+1 					; gxzTemp0 now points to the page
.c99c	a99c	a0 00		ldy #$00			ldy 	#0
.c99e	a99e					_GXSACopyLoop:
.c99e	a99e	b1 36		lda ($36),y			lda 	(gxzTemp0),y
.c9a0	a9a0	99 23 06	sta $0623,y			sta 	gxPixelBuffer,y
.c9a3	a9a3	c8		iny				iny
.c9a4	a9a4	cc 79 08	cpy $0879			cpy 	gxSizePixels
.c9a7	a9a7	d0 f5		bne $a99e			bne 	_GXSACopyLoop
.c9a9	a9a9	60		rts				rts
.c9aa	a9aa					GXSelect:
.c9aa	a9aa	ad d6 07	lda $07d6			lda 	gxSpritesOn
.c9ad	a9ad	f0 22		beq $a9d1			beq 	_GXSFail
.c9af	a9af	a5 36		lda $36				lda 	gxzTemp0 					; illegal sprite #
.c9b1	a9b1	c9 40		cmp #$40			cmp 	#64
.c9b3	a9b3	b0 1c		bcs $a9d1			bcs 	_GXSFail
.c9b5	a9b5	8d e1 07	sta $07e1			sta 	GSCurrentSpriteID
.c9b8	a9b8	a4 37		ldy $37				ldy 	gxzTemp0+1 					; control value.
.c9ba	a9ba	a9 00		lda #$00			lda  	#0 							; multiply sprite # x 8 => A
.c9bc	a9bc	06 36		asl $36				asl 	gxzTemp0
.c9be	a9be	06 36		asl $36				asl 	gxzTemp0
.c9c0	a9c0	06 36		asl $36				asl 	gxzTemp0
.c9c2	a9c2	2a		rol a				rol 	a
.c9c3	a9c3	69 d9		adc #$d9			adc 	#$D9 						; sprite area
.c9c5	a9c5	8d e3 07	sta $07e3			sta 	GSCurrentSpriteAddr+1 		; address to GSCurrentSprite and gxzTemp
.c9c8	a9c8	85 37		sta $37				sta 	gxzTemp0+1
.c9ca	a9ca	a5 36		lda $36				lda 	gxzTemp0
.c9cc	a9cc	8d e2 07	sta $07e2			sta 	GSCurrentSpriteAddr
.c9cf	a9cf	18		clc				clc
.c9d0	a9d0	60		rts				rts
.c9d1	a9d1					_GXSFail:
.c9d1	a9d1	38		sec				sec
.c9d2	a9d2	60		rts				rts
.c9d3	a9d3					GXSelectImage:
.c9d3	a9d3	ad d6 07	lda $07d6			lda 	gxSpritesOn
.c9d6	a9d6	f0 74		beq $aa4c			beq 	_GXSIFail
.c9d8	a9d8	ad e3 07	lda $07e3			lda 	GSCurrentSpriteAddr+1 		; check sprite selected
.c9db	a9db	f0 6f		beq $aa4c			beq 	_GXSIFail 					; (checking the MSB)
.c9dd	a9dd	64 01		stz $01				stz 	1
.c9df	a9df	a5 37		lda $37				lda 	gxzTemp0+1 					; push show/hide on the stack.
.c9e1	a9e1	d0 6b		bne $aa4e			bne 	_GXSIHide
.c9e3	a9e3	a5 36		lda $36				lda 	gxzTemp0 					; sprite image
.c9e5	a9e5	48		pha				pha
.c9e6	a9e6	20 d9 aa	jsr $aad9			jsr 	GXOpenBitmap
.c9e9	a9e9	68		pla				pla
.c9ea	a9ea	20 ba ab	jsr $abba			jsr 	GXFindSprite
.c9ed	a9ed	b0 5a		bcs $aa49			bcs 	_GXSICloseFail 				; no image
.c9ef	a9ef	a0 01		ldy #$01			ldy 	#1
.c9f1	a9f1	ad e2 07	lda $07e2			lda 	GSCurrentSpriteAddr
.c9f4	a9f4	85 36		sta $36				sta 	gxzTemp0
.c9f6	a9f6	ad e3 07	lda $07e3			lda 	GSCurrentSpriteAddr+1
.c9f9	a9f9	85 37		sta $37				sta 	gxzTemp0+1
.c9fb	a9fb	ad 7c 08	lda $087c			lda 	gxSpriteOffset
.c9fe	a9fe	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.ca00	aa00	18		clc				clc
.ca01	aa01	ad 7d 08	lda $087d			lda 	gxSpriteOffset+1
.ca04	aa04	6d e4 07	adc $07e4			adc 	gxSpriteOffsetBase
.ca07	aa07	c8		iny				iny
.ca08	aa08	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.ca0a	aa0a	ad e5 07	lda $07e5			lda 	gxSpriteOffsetBase+1
.ca0d	aa0d	69 00		adc #$00			adc 	#0
.ca0f	aa0f	c8		iny				iny
.ca10	aa10	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.ca12	aa12	ad 7a 08	lda $087a			lda 	gxSizeBits 					; get raw size
.ca15	aa15	49 03		eor #$03			eor 	#3 							; make it right (00=32 etc.)
.ca17	aa17	2a		rol a				rol 	a 							; x 2
.ca18	aa18	0a		asl a				asl 	a 							; x 4
.ca19	aa19	0a		asl a				asl 	a 							; x 8
.ca1a	aa1a	0a		asl a				asl 	a 							; x 16
.ca1b	aa1b	0d 7b 08	ora $087b			ora 	gxSpriteLUT 				; Or with LUT
.ca1e	aa1e	0a		asl a				asl 	a 							; 1 shift
.ca1f	aa1f	09 01		ora #$01			ora 	#1 							; enable sprite.
.ca21	aa21	92 36		sta ($36)			sta 	(gxzTemp0) 					; and write back
.ca23	aa23	20 e1 aa	jsr $aae1			jsr 	GXCloseBitmap
.ca26	aa26	ae e1 07	ldx $07e1			ldx 	GSCurrentSpriteID 			; point to sprite entries.
.ca29	aa29	bd 26 08	lda $0826,x			lda 	gxSpriteHigh,x 				; clear upper two bits of size
.ca2c	aa2c	29 3f		and #$3f			and 	#$3F
.ca2e	aa2e	9d 26 08	sta $0826,x			sta 	gxSpriteHigh,x
.ca31	aa31	ad 7a 08	lda $087a			lda 	gxSizeBits 					; get bit size
.ca34	aa34	6a		ror a				ror 	a 							; shift into bits 6/7
.ca35	aa35	6a		ror a				ror 	a
.ca36	aa36	6a		ror a				ror 	a
.ca37	aa37	29 c0		and #$c0			and 	#$C0
.ca39	aa39	1d 26 08	ora $0826,x			ora 	gxSpriteHigh,x 				; put in  upper 2 bits of sprite data
.ca3c	aa3c	9d 26 08	sta $0826,x			sta 	gxSpriteHigh,x
.ca3f	aa3f	bd e6 07	lda $07e6,x			lda 	gxSpriteLow,x 				; clear hidden flag.
.ca42	aa42	29 7f		and #$7f			and 	#$7F
.ca44	aa44	9d e6 07	sta $07e6,x			sta 	gxSpriteLow,x
.ca47	aa47	18		clc				clc
.ca48	aa48	60		rts				rts
.ca49	aa49					_GXSICloseFail:
.ca49	aa49	20 e1 aa	jsr $aae1			jsr 	GXCloseBitmap
.ca4c	aa4c					_GXSIFail:
.ca4c	aa4c	38		sec				sec
.ca4d	aa4d	60		rts				rts
.ca4e	aa4e					_GXSIHide:
.ca4e	aa4e	ad e2 07	lda $07e2			lda 	GSCurrentSpriteAddr  		; get Sprite h/w address and write there
.ca51	aa51	85 36		sta $36				sta 	gxzTemp0
.ca53	aa53	ad e3 07	lda $07e3			lda 	GSCurrentSpriteAddr+1
.ca56	aa56	85 37		sta $37				sta 	gxzTemp0+1
.ca58	aa58	a9 00		lda #$00			lda 	#0
.ca5a	aa5a	92 36		sta ($36)			sta 	(gxzTemp0)
.ca5c	aa5c	ae e1 07	ldx $07e1			ldx 	GSCurrentSpriteID 			; get sprite ID
.ca5f	aa5f	bd e6 07	lda $07e6,x			lda 	gxSpriteLow,x 				; set the hidden bit.
.ca62	aa62	09 80		ora #$80			ora 	#$80
.ca64	aa64	9d e6 07	sta $07e6,x			sta 	gxSpriteLow,x
.ca67	aa67	18		clc				clc
.ca68	aa68	60		rts				rts
.ca69	aa69					GXMoveSprite:
.ca69	aa69	ad d6 07	lda $07d6			lda 	gxSpritesOn
.ca6c	aa6c	f0 65		beq $aad3			beq 	_GXSIFail
.ca6e	aa6e	ad e3 07	lda $07e3			lda 	GSCurrentSpriteAddr+1 		; check sprite selected
.ca71	aa71	f0 60		beq $aad3			beq 	_GXSIFail
.ca73	aa73	85 37		sta $37				sta 	gxzTemp0+1
.ca75	aa75	a0 04		ldy #$04			ldy 	#4
.ca77	aa77	ad e2 07	lda $07e2			lda 	GSCurrentSpriteAddr
.ca7a	aa7a	85 36		sta $36				sta 	gxzTemp0
.ca7c	aa7c	ae e1 07	ldx $07e1			ldx 	GSCurrentSpriteID 			; get the size from the upper two bits
.ca7f	aa7f	bd 26 08	lda $0826,x			lda 	gxSpriteHigh,x
.ca82	aa82	2a		rol a				rol 	a	 						; into bits 0,1.
.ca83	aa83	2a		rol a				rol 	a
.ca84	aa84	2a		rol a				rol 	a
.ca85	aa85	29 03		and #$03			and 	#3
.ca87	aa87	aa		tax				tax
.ca88	aa88	bd d5 aa	lda $aad5,x			lda 	_GXMSOffset,x 				; get 32-SpriteSize/2
.ca8b	aa8b	48		pha				pha
.ca8c	aa8c	18		clc				clc
.ca8d	aa8d	6d ce 07	adc $07ce			adc 	gxX0						; copy position.
.ca90	aa90	91 36		sta ($36),y			sta 	(gxzTemp0),y
.ca92	aa92	c8		iny				iny
.ca93	aa93	ad cf 07	lda $07cf			lda 	gxX0+1
.ca96	aa96	69 00		adc #$00			adc 	#0
.ca98	aa98	91 36		sta ($36),y			sta 	(gxzTemp0),y
.ca9a	aa9a	c8		iny				iny
.ca9b	aa9b	68		pla				pla
.ca9c	aa9c	18		clc				clc
.ca9d	aa9d	6d d0 07	adc $07d0			adc 	gxY0
.caa0	aaa0	91 36		sta ($36),y			sta 	(gxzTemp0),y
.caa2	aaa2	a9 00		lda #$00			lda 	#0
.caa4	aaa4	69 00		adc #$00			adc 	#0
.caa6	aaa6	c8		iny				iny
.caa7	aaa7	91 36		sta ($36),y			sta 	(gxzTemp0),y
.caa9	aaa9	4e cf 07	lsr $07cf			lsr 	gxX0+1 						; divide X by 4
.caac	aaac	6e ce 07	ror $07ce			ror 	gxX0
.caaf	aaaf	4e ce 07	lsr $07ce			lsr 	gxX0
.cab2	aab2	4e d0 07	lsr $07d0			lsr 	gxY0 						; divide Y by 4
.cab5	aab5	4e d0 07	lsr $07d0			lsr 	gxY0
.cab8	aab8	ae e1 07	ldx $07e1			ldx 	GSCurrentSpriteID 			; copy X/4 and Y/4 into the status bytes
.cabb	aabb	bd e6 07	lda $07e6,x			lda 	gxSpriteLow,x
.cabe	aabe	29 80		and #$80			and 	#$80
.cac0	aac0	0d ce 07	ora $07ce			ora 	gxX0
.cac3	aac3	9d e6 07	sta $07e6,x			sta 	gxSpriteLow,x
.cac6	aac6	bd 26 08	lda $0826,x			lda 	gxSpriteHigh,x
.cac9	aac9	29 c0		and #$c0			and 	#$C0
.cacb	aacb	0d d0 07	ora $07d0			ora 	gxY0
.cace	aace	9d 26 08	sta $0826,x			sta 	gxSpriteHigh,x
.cad1	aad1	18		clc				clc
.cad2	aad2	60		rts				rts
.cad3	aad3					_GXSIFail:
.cad3	aad3	38		sec				sec
.cad4	aad4	60		rts				rts
.cad5	aad5					_GXMSOffset:
>cad5	aad5	1c						.byte 	32-8/2
>cad6	aad6	18						.byte 	32-16/2
>cad7	aad7	14						.byte 	32-24/2
>cad8	aad8	10						.byte 	32-32/2
.cad9	aad9					GXOpenBitmap:
.cad9	aad9	78		sei				sei 								; no interrupts here
.cada	aada	a5 0b		lda $0b				lda 	GXEditSlot 					; Save the original LUT slot value
.cadc	aadc	8d df 07	sta $07df			sta 	gxOriginalLUTValue
.cadf	aadf	58		cli				cli
.cae0	aae0	60		rts				rts
.cae1	aae1					GXCloseBitmap:
.cae1	aae1	78		sei				sei
.cae2	aae2	ad df 07	lda $07df			lda 	gxOriginalLUTValue 			; restore LUT slot value
.cae5	aae5	85 0b		sta $0b				sta 	GXEditSlot
.cae7	aae7	58		cli				cli
.cae8	aae8	60		rts				rts
.cae9	aae9					gxPositionCalc:
.cae9	aae9	a5 36		lda $36				lda 	gxzTemp0 						; save temp memory slot
.caeb	aaeb	48		pha				pha
.caec	aaec	ad d0 07	lda $07d0			lda 	gxY0 							; gxzScreen = Y0
.caef	aaef	85 3c		sta $3c				sta 	gxzScreen
.caf1	aaf1	64 3d		stz $3d				stz 	gxzScreen+1
.caf3	aaf3	06 3c		asl $3c				asl 	gxzScreen 						; gxzScreen = Y0 * 4
.caf5	aaf5	26 3d		rol $3d				rol 	gxzScreen+1
.caf7	aaf7	06 3c		asl $3c				asl 	gxzScreen
.caf9	aaf9	26 3d		rol $3d				rol 	gxzScreen+1
.cafb	aafb	18		clc				clc 									; gxzScreen = Y0 * 5, as it's still in A
.cafc	aafc	65 3c		adc $3c				adc 	gxzScreen
.cafe	aafe	85 3c		sta $3c				sta 	gxzScreen
.cb00	ab00	90 02		bcc $ab04			bcc 	_GXPCNoCarry
.cb02	ab02	e6 3d		inc $3d				inc 	gxzScreen+1
.cb04	ab04					_GXPCNoCarry:
.cb04	ab04	06 3c		asl $3c				asl 	gxzScreen 						; now Y0 * 10
.cb06	ab06	26 3d		rol $3d				rol 	gxzScreen+1
.cb08	ab08	a5 3d		lda $3d				lda	 	gxzScreen+1
.cb0a	ab0a	85 36		sta $36				sta 	gxzTemp0 						; the page offset.
.cb0c	ab0c	64 3d		stz $3d				stz 	gxzScreen+1
.cb0e	ab0e	a9 05		lda #$05			lda 	#5 								; now multiply by 32, this puts this in the range 0..8191
.cb10	ab10					_GXPCMultiply32:
.cb10	ab10	06 3c		asl $3c				asl 	gxzScreen
.cb12	ab12	26 3d		rol $3d				rol 	gxzScreen+1
.cb14	ab14	3a		dec a				dec 	a
.cb15	ab15	d0 f9		bne $ab10			bne 	_GXPCMultiply32
.cb17	ab17	18		clc				clc
.cb18	ab18	ad ce 07	lda $07ce			lda 	gxX0 						; add X to this value, put the result in gxOffset, gxzScreen has to be on a page boundary
.cb1b	ab1b	65 3c		adc $3c				adc 	gxzScreen
.cb1d	ab1d	8d e0 07	sta $07e0			sta 	gxOffset
.cb20	ab20	ad cf 07	lda $07cf			lda 	gxX0+1
.cb23	ab23	65 3d		adc $3d				adc 	gxzScreen+1
.cb25	ab25	c9 20		cmp #$20			cmp 	#$20 						; has it overflowed into the next one ?
.cb27	ab27	90 04		bcc $ab2d			bcc 	_GXPCNoOverflow
.cb29	ab29	29 1f		and #$1f			and 	#$1F 						; fix it up
.cb2b	ab2b	e6 36		inc $36				inc 	gxzTemp0 					; add 1 to the page number
.cb2d	ab2d					_GXPCNoOverflow:
.cb2d	ab2d	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; make it the address mapped in.
.cb2f	ab2f	85 3d		sta $3d				sta 	gxzScreen+1
.cb31	ab31	64 3c		stz $3c				stz 	gxzScreen
.cb33	ab33	18		clc				clc
.cb34	ab34	a5 36		lda $36				lda 	gxzTemp0 					; get the page number
.cb36	ab36	6d d8 07	adc $07d8			adc 	gxBasePage 					; by adding the base page
.cb39	ab39	85 0b		sta $0b				sta 	GXEditSlot 					; and map it into memory.
.cb3b	ab3b	68		pla				pla
.cb3c	ab3c	85 36		sta $36				sta 	gxzTemp0
.cb3e	ab3e	60		rts				rts
.cb3f	ab3f					GXMovePositionDown:
.cb3f	ab3f	18		clc				clc 								; add 320 to offset/temp+1
.cb40	ab40	ad e0 07	lda $07e0			lda 	gxOffset
.cb43	ab43	69 40		adc #$40			adc 	#64
.cb45	ab45	8d e0 07	sta $07e0			sta 	gxOffset
.cb48	ab48	a5 3d		lda $3d				lda 	gxzScreen+1
.cb4a	ab4a	69 01		adc #$01			adc 	#1
.cb4c	ab4c	85 3d		sta $3d				sta 	gxzScreen+1
.cb4e	ab4e	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page ?
.cb50	ab50	90 07		bcc $ab59			bcc 	_GXMPDExit
.cb52	ab52	38		sec				sec  								; next page, adjust address
.cb53	ab53	e9 20		sbc #$20			sbc 	#$20
.cb55	ab55	85 3d		sta $3d				sta 	gxzScreen+1
.cb57	ab57	e6 0b		inc $0b				inc 	GXEditSlot 					; bump page
.cb59	ab59					_GXMPDExit:
.cb59	ab59	60		rts				rts
.cb5a	ab5a					GXCollide:
.cb5a	ab5a	a5 36		lda $36				lda 	gxzTemp0 					; check if sprite numbers are legal.
.cb5c	ab5c	aa		tax				tax
.cb5d	ab5d	05 37		ora $37				ora 	gxzTemp0+1
.cb5f	ab5f	29 c0		and #$c0			and 	#$C0
.cb61	ab61	38		sec				sec
.cb62	ab62	d0 53		bne $abb7			bne 	_GXCollideFail 				; if either >= 64, fail.
.cb64	ab64	a4 37		ldy $37				ldy 	gxzTemp0+1 					; at this point X is 1st sprite and Y is 2nd sprite.
.cb66	ab66	b9 e6 07	lda $07e6,y			lda 	gxSpriteLow,y 				; check if either hidden bit is set
.cb69	ab69	1d e6 07	ora $07e6,x			ora 	gxSpriteLow,x
.cb6c	ab6c	30 48		bmi $abb6			bmi 	_GXOkayFail 				; if either hidden, then they cannot collide.
.cb6e	ab6e	18		clc				clc 								; need to calculate sum of sizes.
.cb6f	ab6f	b9 26 08	lda $0826,y			lda 	gxSpriteHigh,y
.cb72	ab72	7d 26 08	adc $0826,x			adc 	gxSpriteHigh,x 				; at this point, CS, Bit 6 and 7 contain that sum.
.cb75	ab75	29 c0		and #$c0			and 	#$C0 					 	; mask off
.cb77	ab77	6a		ror a				ror 	a 							; 5/6/7
.cb78	ab78	4a		lsr a				lsr 	a 							; 4/5/6
.cb79	ab79	4a		lsr a				lsr 	a 							; 3/4/5
.cb7a	ab7a	4a		lsr a				lsr 	a 							; 2/3/4
.cb7b	ab7b	18		clc				clc
.cb7c	ab7c	69 08		adc #$08			adc 	#$08
.cb7e	ab7e	4a		lsr a				lsr 	a 							; adjust because all coordinates are divided by 4 to store.
.cb7f	ab7f	4a		lsr a				lsr 	a
.cb80	ab80	85 38		sta $38				sta 	gxzTemp1 					; so the difference between the centres has to be less than this.
.cb82	ab82	b9 26 08	lda $0826,y			lda 	gxSpriteHigh,y 				; calculate y1-y0
.cb85	ab85	29 3f		and #$3f			and 	#$3F
.cb87	ab87	85 39		sta $39				sta 	gxzTemp1+1
.cb89	ab89	38		sec				sec
.cb8a	ab8a	bd 26 08	lda $0826,x			lda 	gxSpriteHigh,x
.cb8d	ab8d	29 3f		and #$3f			and 	#$3F
.cb8f	ab8f	e5 39		sbc $39				sbc 	gxzTemp1+1
.cb91	ab91	b0 03		bcs $ab96			bcs 	_GXCAbs1 					; calculate |y1-y0|
.cb93	ab93	49 ff		eor #$ff			eor 	#$FF
.cb95	ab95	1a		inc a				inc 	a
.cb96	ab96					_GXCAbs1:
.cb96	ab96	c5 38		cmp $38				cmp 	gxzTemp1 					; if >= difference then no overlap
.cb98	ab98	b0 1c		bcs $abb6			bcs 	_GXOkayFail
.cb9a	ab9a	85 39		sta $39				sta 	gxzTemp1+1 					; save |y1-y0|
.cb9c	ab9c	38		sec				sec 								; calculate |x1-x0|
.cb9d	ab9d	b9 e6 07	lda $07e6,y			lda 	gxSpriteLow,y
.cba0	aba0	fd e6 07	sbc $07e6,x			sbc 	gxSpriteLow,x
.cba3	aba3	b0 03		bcs $aba8			bcs 	_GXCAbs2
.cba5	aba5	49 ff		eor #$ff			eor 	#$FF
.cba7	aba7	1a		inc a				inc 	a
.cba8	aba8					_GXCAbs2:
.cba8	aba8	c5 38		cmp $38				cmp 	gxzTemp1 					; if >= difference then no overlap
.cbaa	abaa	b0 0a		bcs $abb6			bcs 	_GXOkayFail
.cbac	abac	c5 39		cmp $39				cmp 	gxzTemp1+1 					; is it less than the previous one.
.cbae	abae	90 02		bcc $abb2			bcc 	_GXCHaveLowest
.cbb0	abb0	a5 39		lda $39				lda 	gxzTemp1+1 					; if not, that's the smallest difference.
.cbb2	abb2					_GXCHaveLowest:
.cbb2	abb2	0a		asl a				asl 	a 							; scale to allow for >> 2
.cbb3	abb3	0a		asl a				asl 	a
.cbb4	abb4	18		clc				clc
.cbb5	abb5	60		rts				rts
.cbb6	abb6					_GXOkayFail:
.cbb6	abb6	18		clc				clc
.cbb7	abb7					_GXCollideFail:
.cbb7	abb7	a9 ff		lda #$ff			lda 	#$FF
.cbb9	abb9	60		rts				rts
.cbba	abba					GXFindSprite:
.cbba	abba	aa		tax				tax
.cbbb	abbb	ad d9 07	lda $07d9			lda 	gxSpritePage 				; access the base page of the sprite
.cbbe	abbe	85 0b		sta $0b				sta 	GXEditSlot
.cbc0	abc0	bd 00 61	lda $6100,x			lda 	GXMappingAddress+256,x 		; check a valid sprite
.cbc3	abc3	1d 00 60	ora $6000,x			ora 	GXMappingAddress,x
.cbc6	abc6	f0 33		beq $abfb			beq 	_GXFSFail
.cbc8	abc8	bd 00 61	lda $6100,x			lda 	GXMappingAddress+256,x 		; MSB
.cbcb	abcb	8d 7d 08	sta $087d			sta 	gxSpriteOffset+1
.cbce	abce	bd 00 60	lda $6000,x			lda 	GXMappingAddress,x 			; LSB
.cbd1	abd1	48		pha				pha 								; save twice
.cbd2	abd2	48		pha				pha
.cbd3	abd3	29 03		and #$03			and 	#3 							; get sprite size
.cbd5	abd5	8d 7a 08	sta $087a			sta 	gxSizeBits 					; save raw (0-3)
.cbd8	abd8	aa		tax				tax
.cbd9	abd9	bd fd ab	lda $abfd,x			lda 	_GXFXSSTTable,x 			; read sprite size
.cbdc	abdc	8d 79 08	sta $0879			sta 	gxSizePixels 					; save (8/16/24/32)
.cbdf	abdf	68		pla				pla 								; get LUT
.cbe0	abe0	4a		lsr a				lsr		a
.cbe1	abe1	4a		lsr a				lsr		a
.cbe2	abe2	29 03		and #$03			and 	#3
.cbe4	abe4	8d 7b 08	sta $087b			sta 	gxSpriteLUT
.cbe7	abe7	68		pla				pla 								; address, neeeds to be x 4
.cbe8	abe8	29 f0		and #$f0			and 	#$F0
.cbea	abea	8d 7c 08	sta $087c			sta 	gxSpriteOffset
.cbed	abed	0e 7c 08	asl $087c			asl 	gxSpriteOffset
.cbf0	abf0	2e 7d 08	rol $087d			rol 	gxSpriteOffset+1
.cbf3	abf3	0e 7c 08	asl $087c			asl 	gxSpriteOffset
.cbf6	abf6	2e 7d 08	rol $087d			rol 	gxSpriteOffset+1
.cbf9	abf9	18		clc				clc
.cbfa	abfa	60		rts				rts
.cbfb	abfb					_GXFSFail:
.cbfb	abfb	38		sec				sec
.cbfc	abfc	60		rts				rts
.cbfd	abfd					_GXFXSSTTable:
>cbfd	abfd	08 10 18 20					.byte 	8,16,24,32
.0879						gxSizePixels:
>0879								.fill 	1
.087a						gxSizeBits:
>087a								.fill 	1
.087b						gxSpriteLUT:
>087b								.fill 	1
.087c						gxSpriteOffset:
>087c								.fill 	2
.cc01	ac01					GXSortXY:
.cc01	ac01	20 1f ac	jsr $ac1f			jsr 	GXSortY 					; will be sorted on Y now
.cc04	ac04	ad ce 07	lda $07ce			lda 	gxX0 						; compare X0 v X1
.cc07	ac07	cd d2 07	cmp $07d2			cmp 	gxX1
.cc0a	ac0a	ad cf 07	lda $07cf			lda 	gxX0+1
.cc0d	ac0d	ed d3 07	sbc $07d3			sbc 	gxX1+1
.cc10	ac10	90 0c		bcc $ac1e			bcc 	_GXSXYExit 					; X0 < X1 exit
.cc12	ac12	a2 00		ldx #$00			ldx 	#0 							; swap them over
.cc14	ac14	a0 04		ldy #$04			ldy 	#4
.cc16	ac16	20 33 ac	jsr $ac33			jsr 	GXSwapXY
.cc19	ac19	e8		inx				inx
.cc1a	ac1a	c8		iny				iny
.cc1b	ac1b	20 33 ac	jsr $ac33			jsr 	GXSwapXY
.cc1e	ac1e					_GXSXYExit:
.cc1e	ac1e	60		rts				rts
.cc1f	ac1f					GXSortY:
.cc1f	ac1f	ad d0 07	lda $07d0			lda 	gxY0 						; if Y0 >= Y1
.cc22	ac22	cd d4 07	cmp $07d4			cmp 	gxY1
.cc25	ac25	90 0b		bcc $ac32			bcc 	_GXSYSorted
.cc27	ac27	a2 03		ldx #$03			ldx 	#3 							; swap 3-0 - for lines we want to sort but keep lines together
.cc29	ac29	a0 07		ldy #$07			ldy 	#7 							; with 4-7
.cc2b	ac2b					_GXSwap1:
.cc2b	ac2b	20 33 ac	jsr $ac33			jsr 	GXSwapXY
.cc2e	ac2e	88		dey				dey
.cc2f	ac2f	ca		dex				dex
.cc30	ac30	10 f9		bpl $ac2b			bpl 	_GXSwap1
.cc32	ac32					_GXSYSorted:
.cc32	ac32	60		rts				rts
.cc33	ac33					GXSwapXY:
.cc33	ac33	bd ce 07	lda $07ce,x			lda 	gxX0,x
.cc36	ac36	48		pha				pha
.cc37	ac37	b9 ce 07	lda $07ce,y			lda 	gxX0,y
.cc3a	ac3a	9d ce 07	sta $07ce,x			sta 	gxX0,x
.cc3d	ac3d	68		pla				pla
.cc3e	ac3e	99 ce 07	sta $07ce,y			sta 	gxX0,y
.cc41	ac41	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_tokeniser.module

=1						tokeniserIntegrated=1
.cc42	ac42					KeywordSet0:
>cc42	ac42	00 65					.text	0,$65,""               ; $80 !0:EOF
>cc44	ac44	00 58					.text	0,$58,""               ; $81 !1:SH1
>cc46	ac46	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>cc48	ac48	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $83 ABS(
>cc4e	ac4e	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $84 ALLOC(
>cc56	ac56	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $85 ASC(
>cc5c	ac5c	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $86 CHR$(
>cc63	ac63	06 aa 45 56 45 4e 54 28			.text	6,$aa,"EVENT("         ; $87 EVENT(
>cc6b	ac6b	05 6b 46 41 4c 53 45			.text	5,$6b,"FALSE"          ; $88 FALSE
>cc72	ac72	05 44 46 52 41 43 28			.text	5,$44,"FRAC("          ; $89 FRAC(
>cc79	ac79	05 2c 47 45 54 24 28			.text	5,$2c,"GET$("          ; $8a GET$(
>cc80	ac80	04 08 47 45 54 28			.text	4,$08,"GET("           ; $8b GET(
>cc86	ac86	09 4a 47 45 54 44 41 54			.text	9,$4a,"GETDATE$("      ; $8c GETDATE$(
>cc8e	ac8e	45 24 28
>cc91	ac91	09 5b 47 45 54 54 49 4d			.text	9,$5b,"GETTIME$("      ; $8d GETTIME$(
>cc99	ac99	45 24 28
>cc9c	ac9c	04 0d 48 49 54 28			.text	4,$0d,"HIT("           ; $8e HIT(
>cca2	aca2	07 cc 49 4e 4b 45 59 24			.text	7,$cc,"INKEY$("        ; $8f INKEY$(
>ccaa	acaa	28
>ccab	acab	06 a8 49 4e 4b 45 59 28			.text	6,$a8,"INKEY("         ; $90 INKEY(
>ccb3	acb3	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $91 INT(
>ccb9	acb9	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $92 ISVAL(
>ccc1	acc1	0a e0 49 54 45 4d 43 4f			.text	10,$e0,"ITEMCOUNT("     ; $93 ITEMCOUNT(
>ccc9	acc9	55 4e 54 28
>cccd	accd	09 5b 49 54 45 4d 47 45			.text	9,$5b,"ITEMGET$("      ; $94 ITEMGET$(
>ccd5	acd5	54 24 28
>ccd8	acd8	05 5c 4a 4f 59 42 28			.text	5,$5c,"JOYB("          ; $95 JOYB(
>ccdf	acdf	05 72 4a 4f 59 58 28			.text	5,$72,"JOYX("          ; $96 JOYX(
>cce6	ace6	05 73 4a 4f 59 59 28			.text	5,$73,"JOYY("          ; $97 JOYY(
>cced	aced	08 49 4b 45 59 44 4f 57			.text	8,$49,"KEYDOWN("       ; $98 KEYDOWN(
>ccf5	acf5	4e 28
>ccf7	acf7	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $99 LEFT$(
>ccff	acff	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $9a LEN(
>cd05	ad05	04 0e 4d 41 58 28			.text	4,$0e,"MAX("           ; $9b MAX(
>cd0b	ad0b	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $9c MID$(
>cd12	ad12	04 0c 4d 49 4e 28			.text	4,$0c,"MIN("           ; $9d MIN(
>cd18	ad18	04 19 4e 4f 54 28			.text	4,$19,"NOT("           ; $9e NOT(
>cd1e	ad1e	05 4d 50 45 45 4b 28			.text	5,$4d,"PEEK("          ; $9f PEEK(
>cd25	ad25	06 91 50 45 45 4b 44 28			.text	6,$91,"PEEKD("         ; $a0 PEEKD(
>cd2d	ad2d	06 99 50 45 45 4b 4c 28			.text	6,$99,"PEEKL("         ; $a1 PEEKL(
>cd35	ad35	06 a4 50 45 45 4b 57 28			.text	6,$a4,"PEEKW("         ; $a2 PEEKW(
>cd3d	ad3d	08 3c 50 4c 41 59 49 4e			.text	8,$3c,"PLAYING("       ; $a3 PLAYING(
>cd45	ad45	47 28
>cd47	ad47	07 e9 52 41 4e 44 4f 4d			.text	7,$e9,"RANDOM("        ; $a4 RANDOM(
>cd4f	ad4f	28
>cd50	ad50	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $a5 RIGHT$(
>cd58	ad58	28
>cd59	ad59	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $a6 RND(
>cd5f	ad5f	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $a7 SGN(
>cd65	ad65	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $a8 SPC(
>cd6b	ad6b	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $a9 STR$(
>cd72	ad72	06 a9 54 49 4d 45 52 28			.text	6,$a9,"TIMER("         ; $aa TIMER(
>cd7a	ad7a	04 40 54 52 55 45			.text	4,$40,"TRUE"           ; $ab TRUE
>cd80	ad80	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $ac VAL(
>cd86	ad86	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $ad FOR
>cd8b	ad8b	02 8f 49 46				.text	2,$8f,"IF"             ; $ae IF
>cd8f	ad8f	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $af PROC
>cd95	ad95	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $b0 REPEAT
>cd9d	ad9d	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $b1 WHILE
>cda4	ada4	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $b2 ENDIF
>cdab	adab	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $b3 ENDPROC
>cdb3	adb3	43
>cdb4	adb4	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $b4 NEXT
>cdba	adba	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $b5 THEN
>cdc0	adc0	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $b6 UNTIL
>cdc7	adc7	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $b7 WEND
>cdcd	adcd	02 95 41 54				.text	2,$95,"AT"             ; $b8 AT
>cdd1	add1	02 9b 42 59				.text	2,$9b,"BY"             ; $b9 BY
>cdd5	add5	04 1c 43 41 4c 4c			.text	4,$1c,"CALL"           ; $ba CALL
>cddb	addb	06 b2 43 49 52 43 4c 45			.text	6,$b2,"CIRCLE"         ; $bb CIRCLE
>cde3	ade3	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $bc CLEAR
>cdea	adea	05 7f 43 4f 4c 4f 52			.text	5,$7f,"COLOR"          ; $bd COLOR
>cdf1	adf1	06 d4 43 4f 4c 4f 55 52			.text	6,$d4,"COLOUR"         ; $be COLOUR
>cdf9	adf9	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $bf DATA
>cdff	adff	03 da 44 49 4d				.text	3,$da,"DIM"            ; $c0 DIM
>ce04	ae04	06 db 44 4f 57 4e 54 4f			.text	6,$db,"DOWNTO"         ; $c1 DOWNTO
>ce0c	ae0c	04 29 45 4c 53 45			.text	4,$29,"ELSE"           ; $c2 ELSE
>ce12	ae12	04 34 46 52 4f 4d			.text	4,$34,"FROM"           ; $c3 FROM
>ce18	ae18	03 e5 47 46 58				.text	3,$e5,"GFX"            ; $c4 GFX
>ce1d	ae1d	04 24 48 45 52 45			.text	4,$24,"HERE"           ; $c5 HERE
>ce23	ae23	05 63 49 4d 41 47 45			.text	5,$63,"IMAGE"          ; $c6 IMAGE
>ce2a	ae2a	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $c7 LET
>ce2f	ae2f	04 28 4c 49 4e 45			.text	4,$28,"LINE"           ; $c8 LINE
>ce35	ae35	05 6b 4c 4f 43 41 4c			.text	5,$6b,"LOCAL"          ; $c9 LOCAL
>ce3c	ae3c	07 1a 4d 45 4d 43 4f 50			.text	7,$1a,"MEMCOPY"        ; $ca MEMCOPY
>ce44	ae44	59
>ce45	ae45	03 db 4f 46 46				.text	3,$db,"OFF"            ; $cb OFF
>ce4a	ae4a	02 9d 4f 4e				.text	2,$9d,"ON"             ; $cc ON
>ce4e	ae4e	07 20 4f 55 54 4c 49 4e			.text	7,$20,"OUTLINE"        ; $cd OUTLINE
>ce56	ae56	45
>ce57	ae57	07 0f 50 41 4c 45 54 54			.text	7,$0f,"PALETTE"        ; $ce PALETTE
>ce5f	ae5f	45
>ce60	ae60	04 3f 50 4c 4f 54			.text	4,$3f,"PLOT"           ; $cf PLOT
>ce66	ae66	04 2f 50 4f 4b 45			.text	4,$2f,"POKE"           ; $d0 POKE
>ce6c	ae6c	05 73 50 4f 4b 45 44			.text	5,$73,"POKED"          ; $d1 POKED
>ce73	ae73	05 7b 50 4f 4b 45 4c			.text	5,$7b,"POKEL"          ; $d2 POKEL
>ce7a	ae7a	05 86 50 4f 4b 45 57			.text	5,$86,"POKEW"          ; $d3 POKEW
>ce81	ae81	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $d4 READ
>ce87	ae87	04 2e 52 45 43 54			.text	4,$2e,"RECT"           ; $d5 RECT
>ce8d	ae8d	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $d6 REM
>ce92	ae92	05 7b 53 4f 4c 49 44			.text	5,$7b,"SOLID"          ; $d7 SOLID
>ce99	ae99	05 89 53 4f 55 4e 44			.text	5,$89,"SOUND"          ; $d8 SOUND
>cea0	aea0	06 d7 53 50 52 49 54 45			.text	6,$d7,"SPRITE"         ; $d9 SPRITE
>cea8	aea8	04 45 54 45 58 54			.text	4,$45,"TEXT"           ; $da TEXT
>ceae	aeae	02 a3 54 4f				.text	2,$a3,"TO"             ; $db TO
>ceb2	aeb2	ff					.text	$FF
.ceb3	aeb3					KeywordSet1:
>ceb3	aeb3	00 65					.text	0,$65,""               ; $80 !0:EOF
>ceb5	aeb5	00 58					.text	0,$58,""               ; $81 !1:SH1
>ceb7	aeb7	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>ceb9	aeb9	08 4c 41 53 53 45 4d 42			.text	8,$4c,"ASSEMBLE"       ; $83 ASSEMBLE
>cec1	aec1	4c 45
>cec3	aec3	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $84 ASSERT
>cecb	aecb	06 bd 42 49 54 4d 41 50			.text	6,$bd,"BITMAP"         ; $85 BITMAP
>ced3	aed3	05 62 42 4c 4f 41 44			.text	5,$62,"BLOAD"          ; $86 BLOAD
>ceda	aeda	05 71 42 53 41 56 45			.text	5,$71,"BSAVE"          ; $87 BSAVE
>cee1	aee1	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $88 CLS
>cee6	aee6	06 d0 43 50 52 49 4e 54			.text	6,$d0,"CPRINT"         ; $89 CPRINT
>ceee	aeee	03 df 44 49 52				.text	3,$df,"DIR"            ; $8a DIR
>cef3	aef3	03 e6 44 4f 53				.text	3,$e6,"DOS"            ; $8b DOS
>cef8	aef8	05 7a 44 52 49 56 45			.text	5,$7a,"DRIVE"          ; $8c DRIVE
>ceff	aeff	03 d7 45 4e 44				.text	3,$d7,"END"            ; $8d END
>cf04	af04	07 11 45 58 50 4c 4f 44			.text	7,$11,"EXPLODE"        ; $8e EXPLODE
>cf0c	af0c	45
>cf0d	af0d	02 96 47 4f				.text	2,$96,"GO"             ; $8f GO
>cf11	af11	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $90 GOSUB
>cf18	af18	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $91 GOTO
>cf1e	af1e	05 70 48 49 4d 45 4d			.text	5,$70,"HIMEM"          ; $92 HIMEM
>cf25	af25	05 90 49 4e 50 55 54			.text	5,$90,"INPUT"          ; $93 INPUT
>cf2c	af2c	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $94 LIST
>cf32	af32	04 20 4c 4f 41 44			.text	4,$20,"LOAD"           ; $95 LOAD
>cf38	af38	06 b7 4d 44 45 4c 54 41			.text	6,$b7,"MDELTA"         ; $96 MDELTA
>cf40	af40	05 89 4d 4f 55 53 45			.text	5,$89,"MOUSE"          ; $97 MOUSE
>cf47	af47	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $98 NEW
>cf4c	af4c	04 2e 50 49 4e 47			.text	4,$2e,"PING"           ; $99 PING
>cf52	af52	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $9a PRINT
>cf59	af59	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $9b RESTORE
>cf61	af61	45
>cf62	af62	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $9c RETURN
>cf6a	af6a	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $9d RUN
>cf6f	af6f	04 2f 53 41 56 45			.text	4,$2f,"SAVE"           ; $9e SAVE
>cf75	af75	07 0a 53 45 54 44 41 54			.text	7,$0a,"SETDATE"        ; $9f SETDATE
>cf7d	af7d	45
>cf7e	af7e	07 1b 53 45 54 54 49 4d			.text	7,$1b,"SETTIME"        ; $a0 SETTIME
>cf86	af86	45
>cf87	af87	05 8d 53 48 4f 4f 54			.text	5,$8d,"SHOOT"          ; $a1 SHOOT
>cf8e	af8e	07 2a 53 50 52 49 54 45			.text	7,$2a,"SPRITES"        ; $a2 SPRITES
>cf96	af96	53
>cf97	af97	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $a3 STOP
>cf9d	af9d	03 ff 54 52 59				.text	3,$ff,"TRY"            ; $a4 TRY
>cfa2	afa2	06 d5 56 45 52 49 46 59			.text	6,$d5,"VERIFY"         ; $a5 VERIFY
>cfaa	afaa	03 ee 58 47 4f				.text	3,$ee,"XGO"            ; $a6 XGO
>cfaf	afaf	05 78 58 4c 4f 41 44			.text	5,$78,"XLOAD"          ; $a7 XLOAD
>cfb6	afb6	03 eb 5a 41 50				.text	3,$eb,"ZAP"            ; $a8 ZAP
>cfbb	afbb	ff					.text	$FF
.cfbc	afbc					KeywordSet2:
>cfbc	afbc	00 65					.text	0,$65,""               ; $80 !0:EOF
>cfbe	afbe	00 58					.text	0,$58,""               ; $81 !1:SH1
>cfc0	afc0	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>cfc2	afc2	03 c8 41 44 43				.text	3,$c8,"ADC"            ; $83 ADC
>cfc7	afc7	03 d3 41 4e 44				.text	3,$d3,"AND"            ; $84 AND
>cfcc	afcc	03 e0 41 53 4c				.text	3,$e0,"ASL"            ; $85 ASL
>cfd1	afd1	03 c8 42 43 43				.text	3,$c8,"BCC"            ; $86 BCC
>cfd6	afd6	03 d8 42 43 53				.text	3,$d8,"BCS"            ; $87 BCS
>cfdb	afdb	03 d8 42 45 51				.text	3,$d8,"BEQ"            ; $88 BEQ
>cfe0	afe0	03 df 42 49 54				.text	3,$df,"BIT"            ; $89 BIT
>cfe5	afe5	03 d8 42 4d 49				.text	3,$d8,"BMI"            ; $8a BMI
>cfea	afea	03 d5 42 4e 45				.text	3,$d5,"BNE"            ; $8b BNE
>cfef	afef	03 de 42 50 4c				.text	3,$de,"BPL"            ; $8c BPL
>cff4	aff4	03 d5 42 52 41				.text	3,$d5,"BRA"            ; $8d BRA
>cff9	aff9	03 df 42 52 4b				.text	3,$df,"BRK"            ; $8e BRK
>cffe	affe	03 db 42 56 43				.text	3,$db,"BVC"            ; $8f BVC
>d003	b003	03 eb 42 56 53				.text	3,$eb,"BVS"            ; $90 BVS
>d008	b008	03 d2 43 4c 43				.text	3,$d2,"CLC"            ; $91 CLC
>d00d	b00d	03 d3 43 4c 44				.text	3,$d3,"CLD"            ; $92 CLD
>d012	b012	03 d8 43 4c 49				.text	3,$d8,"CLI"            ; $93 CLI
>d017	b017	03 e5 43 4c 56				.text	3,$e5,"CLV"            ; $94 CLV
>d01c	b01c	03 e0 43 4d 50				.text	3,$e0,"CMP"            ; $95 CMP
>d021	b021	03 eb 43 50 58				.text	3,$eb,"CPX"            ; $96 CPX
>d026	b026	03 ec 43 50 59				.text	3,$ec,"CPY"            ; $97 CPY
>d02b	b02b	03 cc 44 45 43				.text	3,$cc,"DEC"            ; $98 DEC
>d030	b030	03 e1 44 45 58				.text	3,$e1,"DEX"            ; $99 DEX
>d035	b035	03 e2 44 45 59				.text	3,$e2,"DEY"            ; $9a DEY
>d03a	b03a	03 e6 45 4f 52				.text	3,$e6,"EOR"            ; $9b EOR
>d03f	b03f	03 da 49 4e 43				.text	3,$da,"INC"            ; $9c INC
>d044	b044	03 ef 49 4e 58				.text	3,$ef,"INX"            ; $9d INX
>d049	b049	03 f0 49 4e 59				.text	3,$f0,"INY"            ; $9e INY
>d04e	b04e	03 e7 4a 4d 50				.text	3,$e7,"JMP"            ; $9f JMP
>d053	b053	03 ef 4a 53 52				.text	3,$ef,"JSR"            ; $a0 JSR
>d058	b058	03 d1 4c 44 41				.text	3,$d1,"LDA"            ; $a1 LDA
>d05d	b05d	03 e8 4c 44 58				.text	3,$e8,"LDX"            ; $a2 LDX
>d062	b062	03 e9 4c 44 59				.text	3,$e9,"LDY"            ; $a3 LDY
>d067	b067	03 f1 4c 53 52				.text	3,$f1,"LSR"            ; $a4 LSR
>d06c	b06c	03 ed 4e 4f 50				.text	3,$ed,"NOP"            ; $a5 NOP
>d071	b071	03 e2 4f 52 41				.text	3,$e2,"ORA"            ; $a6 ORA
>d076	b076	03 d9 50 48 41				.text	3,$d9,"PHA"            ; $a7 PHA
>d07b	b07b	03 e8 50 48 50				.text	3,$e8,"PHP"            ; $a8 PHP
>d080	b080	03 f0 50 48 58				.text	3,$f0,"PHX"            ; $a9 PHX
>d085	b085	03 f1 50 48 59				.text	3,$f1,"PHY"            ; $aa PHY
>d08a	b08a	03 dd 50 4c 41				.text	3,$dd,"PLA"            ; $ab PLA
>d08f	b08f	03 ec 50 4c 50				.text	3,$ec,"PLP"            ; $ac PLP
>d094	b094	03 f4 50 4c 58				.text	3,$f4,"PLX"            ; $ad PLX
>d099	b099	03 f5 50 4c 59				.text	3,$f5,"PLY"            ; $ae PLY
>d09e	b09e	03 ed 52 4f 4c				.text	3,$ed,"ROL"            ; $af ROL
>d0a3	b0a3	03 f3 52 4f 52				.text	3,$f3,"ROR"            ; $b0 ROR
>d0a8	b0a8	03 ef 52 54 49				.text	3,$ef,"RTI"            ; $b1 RTI
>d0ad	b0ad	03 f9 52 54 53				.text	3,$f9,"RTS"            ; $b2 RTS
>d0b2	b0b2	03 d8 53 42 43				.text	3,$d8,"SBC"            ; $b3 SBC
>d0b7	b0b7	03 db 53 45 43				.text	3,$db,"SEC"            ; $b4 SEC
>d0bc	b0bc	03 dc 53 45 44				.text	3,$dc,"SED"            ; $b5 SED
>d0c1	b0c1	03 e1 53 45 49				.text	3,$e1,"SEI"            ; $b6 SEI
>d0c6	b0c6	03 e8 53 54 41				.text	3,$e8,"STA"            ; $b7 STA
>d0cb	b0cb	03 f7 53 54 50				.text	3,$f7,"STP"            ; $b8 STP
>d0d0	b0d0	03 ff 53 54 58				.text	3,$ff,"STX"            ; $b9 STX
>d0d5	b0d5	03 00 53 54 59				.text	3,$00,"STY"            ; $ba STY
>d0da	b0da	03 01 53 54 5a				.text	3,$01,"STZ"            ; $bb STZ
>d0df	b0df	03 ed 54 41 58				.text	3,$ed,"TAX"            ; $bc TAX
>d0e4	b0e4	03 ee 54 41 59				.text	3,$ee,"TAY"            ; $bd TAY
>d0e9	b0e9	03 e8 54 52 42				.text	3,$e8,"TRB"            ; $be TRB
>d0ee	b0ee	03 e9 54 53 42				.text	3,$e9,"TSB"            ; $bf TSB
>d0f3	b0f3	03 ff 54 53 58				.text	3,$ff,"TSX"            ; $c0 TSX
>d0f8	b0f8	03 ed 54 58 41				.text	3,$ed,"TXA"            ; $c1 TXA
>d0fd	b0fd	03 ff 54 58 53				.text	3,$ff,"TXS"            ; $c2 TXS
>d102	b102	03 ee 54 59 41				.text	3,$ee,"TYA"            ; $c3 TYA
>d107	b107	ff					.text	$FF
.d108	b108					Export_TKListConvertLine:
.d108	b108	48		pha				pha 								; save indent on the stack
.d109	b109	9c 19 04	stz $0419			stz 	tbOffset
.d10c	b10c	9c 29 04	stz $0429			stz 	tokenBuffer
.d10f	b10f	9c 25 04	stz $0425			stz 	currentListColour
.d112	b112	a9 8d		lda #$8d			lda 	#CLILineNumber+$80
.d114	b114	20 91 b2	jsr $b291			jsr 	LCLWriteColour
.d117	b117	a0 02		ldy #$02			ldy 	#2 							; convert line number to string
.d119	b119	b1 30		lda ($30),y			lda 	(codePtr),y
.d11b	b11b	aa		tax				tax
.d11c	b11c	88		dey				dey
.d11d	b11d	b1 30		lda ($30),y			lda 	(codePtr),y
.d11f	b11f	20 02 b3	jsr $b302			jsr 	LCLWriteNumberXA
.d122	b122	68		pla				pla 								; adjustment to indent
.d123	b123	48		pha				pha 								; save on stack
.d124	b124	10 0c		bpl $b132			bpl 	_LCNoAdjust 				; don't adjust indent if +ve, do after.
.d126	b126	18		clc				clc 								; add to list indent and make 0 if goes -ve.
.d127	b127	6d 22 04	adc $0422			adc 	listIndent
.d12a	b12a	8d 22 04	sta $0422			sta 	listIndent
.d12d	b12d	10 03		bpl $b132			bpl 	_LCNoAdjust
.d12f	b12f	9c 22 04	stz $0422			stz 	listIndent
.d132	b132					_LCNoAdjust:
.d132	b132	18		clc				clc		 							; work out actual indent.
.d133	b133	ad 22 04	lda $0422			lda 	listIndent
.d136	b136	0a		asl a				asl 	a
.d137	b137	69 07		adc #$07			adc 	#7
.d139	b139	85 36		sta $36				sta 	zTemp0
.d13b	b13b					_LCPadOut:
.d13b	b13b	a9 20		lda #$20			lda 	#' '						; pad out to 6+indent characters
.d13d	b13d	20 9a b2	jsr $b29a			jsr 	LCLWrite
.d140	b140	ad 19 04	lda $0419			lda 	tbOffset
.d143	b143	c5 36		cmp $36				cmp 	zTemp0
.d145	b145	d0 f4		bne $b13b			bne 	_LCPadOut
.d147	b147	a0 03		ldy #$03			ldy 	#3 							; start position.
.d149	b149					_LCMainLoop:
.d149	b149	a9 8c		lda #$8c			lda 	#CLIPunctuation+$80
.d14b	b14b	20 91 b2	jsr $b291			jsr 	LCLWriteColour
.d14e	b14e	b1 30		lda ($30),y			lda 	(codePtr),y
.d150	b150	c9 80		cmp #$80			cmp 	#KWC_EOL 					; end of line ?
.d152	b152	f0 17		beq $b16b			beq 	_LCExit
.d154	b154	c9 10		cmp #$10			cmp 	#16 						; 0-5 are the double punctuations
.d156	b156	90 1e		bcc $b176			bcc 	_LCDoubles
.d158	b158	c9 20		cmp #$20			cmp 	#32 						; 16-31 are shifted punctuation from 64-91
.d15a	b15a	90 2a		bcc $b186			bcc 	_LCShiftPunc
.d15c	b15c	c9 40		cmp #$40			cmp 	#64 						; 32-64 are as stored, punc and digits
.d15e	b15e	90 35		bcc $b195			bcc 	_LCPunctuation
.d160	b160	c9 80		cmp #$80			cmp 	#128 						; 64-127 are variable identifiers.
.d162	b162	90 51		bcc $b1b5			bcc 	_LCIdentifiers
.d164	b164	c9 fe		cmp #$fe			cmp 	#254 						; 128-253 are tokenised words
.d166	b166	90 73		bcc $b1db			bcc 	_LCTokens
.d168	b168	4c 3b b2	jmp $b23b			jmp 	_LCData 					; 254-5 are data objects
.d16b	b16b					_LCExit:
.d16b	b16b	68		pla				pla 								; get old indent adjust
.d16c	b16c	30 07		bmi $b175			bmi 	_LCExit2
.d16e	b16e	18		clc				clc 								; add to indent if +ve
.d16f	b16f	6d 22 04	adc $0422			adc 	listIndent
.d172	b172	8d 22 04	sta $0422			sta 	listIndent
.d175	b175					_LCExit2:
.d175	b175	60		rts				rts
.d176	b176					_LCDoubles:
.d176	b176	48		pha				pha
.d177	b177	4a		lsr a				lsr 	a 							; put bit 2 into bit 1
.d178	b178	29 02		and #$02			and 	#2
.d17a	b17a	09 3c		ora #$3c			ora 	#60 						; make < >
.d17c	b17c	20 9a b2	jsr $b29a			jsr 	LCLWrite
.d17f	b17f	68		pla				pla 								; restore, do lower bit
.d180	b180	29 03		and #$03			and 	#3
.d182	b182	09 3c		ora #$3c			ora 	#60
.d184	b184	80 0f		bra $b195			bra		_LCPunctuation 				; print, increment, loop
.d186	b186					_LCShiftPunc:
.d186	b186	aa		tax				tax 								; save in X
.d187	b187	29 07		and #$07			and 	#7 							; lower 3 bits
.d189	b189	f0 02		beq $b18d			beq 	_LCNoAdd
.d18b	b18b	09 18		ora #$18			ora 	#24 						; adds $18 to it.
.d18d	b18d					_LCNoAdd:
.d18d	b18d	e0 18		cpx #$18			cpx 	#24 						; if >= 24 add $20
.d18f	b18f	90 02		bcc $b193			bcc 	_LCNoAdd2
.d191	b191	09 20		ora #$20			ora 	#32 						; adds $20
.d193	b193					_LCNoAdd2:
.d193	b193	09 40		ora #$40			ora 	#$40 						; shift into 64-127 range and fall through.
.d195	b195					_LCPunctuation:
.d195	b195	c9 3a		cmp #$3a			cmp 	#':' 						; check if :
.d197	b197	d0 03		bne $b19c			bne 	_LCPContinue
.d199	b199	20 b0 b2	jsr $b2b0			jsr 	LCLDeleteLastSpace 			; if so delete any preceding spaces
.d19c	b19c					_LCPContinue:
.d19c	b19c	c9 2e		cmp #$2e			cmp 	#'.'
.d19e	b19e	f0 08		beq $b1a8			beq 	_LCPIsConstant
.d1a0	b1a0	c9 30		cmp #$30			cmp 	#'0'
.d1a2	b1a2	90 0b		bcc $b1af			bcc 	_LCPNotConstant
.d1a4	b1a4	c9 3a		cmp #$3a			cmp 	#'9'+1
.d1a6	b1a6	b0 07		bcs $b1af			bcs 	_LCPNotConstant
.d1a8	b1a8					_LCPIsConstant:
.d1a8	b1a8	48		pha				pha
.d1a9	b1a9	a9 87		lda #$87			lda 	#CLIConstant+$80
.d1ab	b1ab	20 91 b2	jsr $b291			jsr 	LCLWriteColour
.d1ae	b1ae	68		pla				pla
.d1af	b1af					_LCPNotConstant:
.d1af	b1af	c8		iny				iny 								; consume character
.d1b0	b1b0	20 9a b2	jsr $b29a			jsr 	LCLWrite 					; write it out.
.d1b3	b1b3	80 94		bra $b149			bra 	_LCMainLoop 				; go round again.
.d1b5	b1b5					_LCIdentifiers:
.d1b5	b1b5	18		clc				clc 								; convert to physical address
.d1b6	b1b6	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.d1b8	b1b8	85 37		sta $37				sta 	zTemp0+1
.d1ba	b1ba	c8		iny				iny
.d1bb	b1bb	b1 30		lda ($30),y			lda 	(codePtr),y
.d1bd	b1bd	85 36		sta $36				sta 	zTemp0
.d1bf	b1bf	c8		iny				iny
.d1c0	b1c0	5a		phy				phy 								; save position
.d1c1	b1c1	a9 8e		lda #$8e			lda 	#CLIIdentifier+$80
.d1c3	b1c3	20 91 b2	jsr $b291			jsr 	LCLWriteColour
.d1c6	b1c6	a0 07		ldy #$07			ldy 	#7 							; output the identifier at +8
.d1c8	b1c8					_LCOutIdentifier:
.d1c8	b1c8	c8		iny				iny
.d1c9	b1c9	b1 36		lda ($36),y			lda 	(zTemp0),y					; bit 7 set = end.
.d1cb	b1cb	29 7f		and #$7f			and 	#$7F
.d1cd	b1cd	20 ec b2	jsr $b2ec			jsr 	LCLLowerCase
.d1d0	b1d0	20 9a b2	jsr $b29a			jsr 	LCLWrite
.d1d3	b1d3	b1 36		lda ($36),y			lda 	(zTemp0),y				 	; ends when bit 7 set.
.d1d5	b1d5	10 f1		bpl $b1c8			bpl 	_LCOutIdentifier
.d1d7	b1d7	7a		ply				ply 								; restore position
.d1d8	b1d8	4c 49 b1	jmp $b149			jmp 	_LCMainLoop
.d1db	b1db					_LCTokens:
.d1db	b1db	aa		tax				tax 								; token in X
.d1dc	b1dc	a9 bc		lda #$bc			lda 	#((KeywordSet2) & $FF)
.d1de	b1de	85 36		sta $36				sta 	0+zTemp0
.d1e0	b1e0	a9 af		lda #$af			lda 	#((KeywordSet2) >> 8)
.d1e2	b1e2	85 37		sta $37				sta 	1+zTemp0
.d1e4	b1e4	e0 82		cpx #$82			cpx 	#$82
.d1e6	b1e6	f0 16		beq $b1fe			beq 	_LCUseShift
.d1e8	b1e8	a9 b3		lda #$b3			lda 	#((KeywordSet1) & $FF)
.d1ea	b1ea	85 36		sta $36				sta 	0+zTemp0
.d1ec	b1ec	a9 ae		lda #$ae			lda 	#((KeywordSet1) >> 8)
.d1ee	b1ee	85 37		sta $37				sta 	1+zTemp0
.d1f0	b1f0	e0 81		cpx #$81			cpx 	#$81
.d1f2	b1f2	f0 0a		beq $b1fe			beq 	_LCUseShift
.d1f4	b1f4	a9 42		lda #$42			lda 	#((KeywordSet0) & $FF)
.d1f6	b1f6	85 36		sta $36				sta 	0+zTemp0
.d1f8	b1f8	a9 ac		lda #$ac			lda 	#((KeywordSet0) >> 8)
.d1fa	b1fa	85 37		sta $37				sta 	1+zTemp0
.d1fc	b1fc	80 01		bra $b1ff			bra 	_LCNoShift
.d1fe	b1fe					_LCUseShift:
.d1fe	b1fe	c8		iny				iny
.d1ff	b1ff					_LCNoShift:
.d1ff	b1ff	20 c4 b2	jsr $b2c4			jsr 	LCLCheckSpaceRequired 		; do we need a space ?
.d202	b202	b1 30		lda ($30),y			lda 	(codePtr),y
.d204	b204	aa		tax				tax 								; into X
.d205	b205					_LCFindText:
.d205	b205	ca		dex				dex
.d206	b206	10 0e		bpl $b216			bpl 	_LCFoundText 				; found text.
.d208	b208	b2 36		lda ($36)			lda 	(zTemp0) 					; length of text
.d20a	b20a	1a		inc a				inc 	a 							; one extra for size
.d20b	b20b	38		sec				sec 								; one extra for checksum
.d20c	b20c	65 36		adc $36				adc 	zTemp0 						; go to next token
.d20e	b20e	85 36		sta $36				sta 	zTemp0
.d210	b210	90 f3		bcc $b205			bcc 	_LCFindText
.d212	b212	e6 37		inc $37				inc 	zTemp0+1
.d214	b214	80 ef		bra $b205			bra 	_LCFindText
.d216	b216					_LCFoundText:
.d216	b216	5a		phy				phy 								; save List position
.d217	b217	b2 36		lda ($36)			lda 	(zTemp0)					; count to print
.d219	b219	aa		tax				tax
.d21a	b21a	a9 86		lda #$86			lda 	#CLIToken+$80
.d21c	b21c	20 91 b2	jsr $b291			jsr 	LCLWriteColour
.d21f	b21f	a0 02		ldy #$02			ldy 	#2
.d221	b221					_LCCopyToken:
.d221	b221	b1 36		lda ($36),y			lda 	(zTemp0),y
.d223	b223	20 ec b2	jsr $b2ec			jsr 	LCLLowerCase
.d226	b226	20 9a b2	jsr $b29a			jsr 	LCLWrite
.d229	b229	c8		iny				iny
.d22a	b22a	ca		dex				dex
.d22b	b22b	d0 f4		bne $b221			bne 	_LCCopyToken
.d22d	b22d	c9 28		cmp #$28			cmp 	#"(" 						; if last char not ( print a space
.d22f	b22f	f0 05		beq $b236			beq 	_LCNoSpace
.d231	b231	a9 20		lda #$20			lda 	#' '
.d233	b233	20 9a b2	jsr $b29a			jsr 	LCLWrite
.d236	b236					_LCNoSpace:
.d236	b236	7a		ply				ply 								; restore position.
.d237	b237	c8		iny				iny 								; consume token
.d238	b238	4c 49 b1	jmp $b149			jmp 	_LCMainLoop 				; and go around again.
.d23b	b23b					_LCData:
.d23b	b23b	48		pha				pha 								; save type $FE/$FF
.d23c	b23c	a2 24		ldx #$24			ldx 	#'$' 						; figure out $ or "
.d23e	b23e	c9 fe		cmp #$fe			cmp 	#$FE
.d240	b240	f0 22		beq $b264			beq 	_LCHaveOpener
.d242	b242	a2 22		ldx #$22			ldx 	#'"'
.d244	b244	a9 8f		lda #$8f			lda 	#CLIData+$80
.d246	b246	20 91 b2	jsr $b291			jsr 	LCLWriteColour
.d249	b249	c0 04		cpy #$04			cpy 	#4 							; must be 2nd thing on line
.d24b	b24b	d0 17		bne $b264			bne 	_LCHaveOpener
.d24d	b24d	88		dey				dey 								; what precedes it ?
.d24e	b24e	b1 30		lda ($30),y			lda 	(codePtr),y
.d250	b250	c8		iny				iny
.d251	b251	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; if quote
.d253	b253	d0 0f		bne $b264			bne 	_LCHaveOpener
.d255	b255	a9 09		lda #$09			lda 	#9 							; tab
.d257	b257	20 9a b2	jsr $b29a			jsr 	LCLWrite
.d25a	b25a	a9 9e		lda #$9e			lda 	#$90+CLIBComment
.d25c	b25c	20 9a b2	jsr $b29a			jsr 	LCLWrite
.d25f	b25f	a9 85		lda #$85			lda 	#CLIFComment+$80
.d261	b261	20 91 b2	jsr $b291			jsr 	LCLWriteColour
.d264	b264					_LCHaveOpener:
.d264	b264	8a		txa				txa 								; output prefix (# or ")
.d265	b265	20 9a b2	jsr $b29a			jsr 	LCLWrite
.d268	b268	c8		iny				iny 								; get count
.d269	b269	b1 30		lda ($30),y			lda 	(codePtr),y
.d26b	b26b	aa		tax				tax
.d26c	b26c	c8		iny				iny 								; point at first character
.d26d	b26d					_LCOutData:
.d26d	b26d	b1 30		lda ($30),y			lda 	(codePtr),y
.d26f	b26f	c9 00		cmp #$00			cmp 	#0
.d271	b271	f0 03		beq $b276			beq 	_LCNoPrint
.d273	b273	20 9a b2	jsr $b29a			jsr 	LCLWrite
.d276	b276					_LCNoPrint:
.d276	b276	c8		iny				iny
.d277	b277	ca		dex				dex
.d278	b278	d0 f3		bne $b26d			bne 	_LCOutData
.d27a	b27a	68		pla				pla 								; closing " required ?
.d27b	b27b	c9 ff		cmp #$ff			cmp 	#$FF 						; not required for hex constant.
.d27d	b27d	d0 0f		bne $b28e			bne 	_LCNoQuote
.d27f	b27f	a9 22		lda #$22			lda 	#'"'
.d281	b281	20 9a b2	jsr $b29a			jsr 	LCLWrite
.d284	b284	ad c3 07	lda $07c3			lda 	EXTTextColour
.d287	b287	29 0f		and #$0f			and 	#$0F
.d289	b289	09 90		ora #$90			ora 	#$90
.d28b	b28b	20 9a b2	jsr $b29a			jsr 	LCLWrite
.d28e	b28e					_LCNoQuote:
.d28e	b28e	4c 49 b1	jmp $b149			jmp 	_LCMainLoop
.d291	b291					LCLWriteColour:
.d291	b291	cd 25 04	cmp $0425			cmp 	currentListColour 			; has the colour changed
.d294	b294	8d 25 04	sta $0425			sta 	currentListColour 			; (update it anyway)
.d297	b297	d0 01		bne $b29a			bne 	LCLWrite 					; if different, output it
.d299	b299	60		rts				rts
.d29a	b29a					LCLWrite:
.d29a	b29a	da		phx				phx
.d29b	b29b	ae 19 04	ldx $0419			ldx 	tbOffset 					; write out make ASCIIZ
.d29e	b29e	9d 29 04	sta $0429,x			sta 	tokenBuffer,x
.d2a1	b2a1	9e 2a 04	stz $042a,x			stz 	tokenBuffer+1,x
.d2a4	b2a4	ee 19 04	inc $0419			inc 	tbOffset 					; bump the position
.d2a7	b2a7	09 00		ora #$00			ora 	#0 							; don't update last character if colour data
.d2a9	b2a9	30 03		bmi $b2ae			bmi 	_LCLNoColour
.d2ab	b2ab	8d 23 04	sta $0423			sta 	lcLastCharacter
.d2ae	b2ae					_LCLNoColour:
.d2ae	b2ae	fa		plx				plx
.d2af	b2af	60		rts				rts
.d2b0	b2b0					LCLDeleteLastSpace:
.d2b0	b2b0	48		pha				pha
.d2b1	b2b1	da		phx				phx
.d2b2	b2b2	ae 19 04	ldx $0419			ldx 	tbOffset
.d2b5	b2b5	f0 0a		beq $b2c1			beq 	_LCDLSExit
.d2b7	b2b7	bd 28 04	lda $0428,x			lda 	tokenBuffer-1,x
.d2ba	b2ba	c9 20		cmp #$20			cmp 	#' '
.d2bc	b2bc	d0 03		bne $b2c1			bne 	_LCDLSExit
.d2be	b2be	ce 19 04	dec $0419			dec 	tbOffset
.d2c1	b2c1					_LCDLSExit:
.d2c1	b2c1	fa		plx				plx
.d2c2	b2c2	68		pla				pla
.d2c3	b2c3	60		rts				rts
.d2c4	b2c4					LCLCheckSpaceRequired:
.d2c4	b2c4	ad 23 04	lda $0423			lda 	lcLastCharacter 			; check last character
.d2c7	b2c7	c9 24		cmp #$24			cmp 	#'$' 						; $ # and ) require that token space.
.d2c9	b2c9	f0 1b		beq $b2e6			beq 	_LCCSRSpace
.d2cb	b2cb	c9 29		cmp #$29			cmp 	#')'
.d2cd	b2cd	f0 17		beq $b2e6			beq 	_LCCSRSpace
.d2cf	b2cf	c9 23		cmp #$23			cmp 	#'#'
.d2d1	b2d1	f0 13		beq $b2e6			beq 	_LCCSRSpace
.d2d3	b2d3	20 ec b2	jsr $b2ec			jsr 	LCLLowerCase 				; saves a little effort
.d2d6	b2d6	c9 30		cmp #$30			cmp 	#"0" 						; check if it was 0-9 A-Z a-z if so need space.
.d2d8	b2d8	90 11		bcc $b2eb			bcc 	_LCCSRExit
.d2da	b2da	c9 3a		cmp #$3a			cmp 	#"9"+1
.d2dc	b2dc	90 08		bcc $b2e6			bcc 	_LCCSRSpace
.d2de	b2de	c9 61		cmp #$61			cmp 	#"a"
.d2e0	b2e0	90 09		bcc $b2eb			bcc 	_LCCSRExit
.d2e2	b2e2	c9 7b		cmp #$7b			cmp 	#"z"+1
.d2e4	b2e4	b0 05		bcs $b2eb			bcs 	_LCCSRExit
.d2e6	b2e6					_LCCSRSpace:
.d2e6	b2e6	a9 20		lda #$20			lda 	#' '
.d2e8	b2e8	20 9a b2	jsr $b29a			jsr 	LCLWrite
.d2eb	b2eb					_LCCSRExit:
.d2eb	b2eb	60		rts				rts
.d2ec	b2ec					LCLLowerCase:
.d2ec	b2ec	c9 41		cmp #$41			cmp 	#"A"
.d2ee	b2ee	90 06		bcc $b2f6			bcc 	_LCLLCOut
.d2f0	b2f0	c9 5b		cmp #$5b			cmp 	#"Z"+1
.d2f2	b2f2	b0 02		bcs $b2f6			bcs 	_LCLLCOut
.d2f4	b2f4	69 20		adc #$20			adc 	#$20
.d2f6	b2f6					_LCLLCOut:
.d2f6	b2f6	60		rts				rts
.d2f7	b2f7					LCLUpperCase:
.d2f7	b2f7	c9 61		cmp #$61			cmp 	#"a"
.d2f9	b2f9	90 06		bcc $b301			bcc 	_LCLUCOut
.d2fb	b2fb	c9 7b		cmp #$7b			cmp 	#"z"+1
.d2fd	b2fd	b0 02		bcs $b301			bcs 	_LCLUCOut
.d2ff	b2ff	e9 1f		sbc #$1f			sbc 	#$1F
.d301	b301					_LCLUCOut:
.d301	b301	60		rts				rts
.d302	b302					LCLWriteNumberXA:
.d302	b302	64 37		stz $37				stz 	zTemp0+1 					; index into digit table.
.d304	b304					_LCLWNLoop1:
.d304	b304	64 36		stz $36				stz 	zTemp0 						; subtraction count.
.d306	b306					_LCLWNLoop2:
.d306	b306	48		pha				pha 								; save initial LSB
.d307	b307	38		sec				sec
.d308	b308	a4 37		ldy $37				ldy 	zTemp0+1 					; position in table.
.d30a	b30a	f9 3b b3	sbc $b33b,y			sbc 	_LCLWNTable,y
.d30d	b30d	48		pha				pha
.d30e	b30e	8a		txa				txa
.d30f	b30f	f9 3c b3	sbc $b33c,y			sbc 	_LCLWNTable+1,y
.d312	b312	90 07		bcc $b31b			bcc 	_LCLWNUnderflow
.d314	b314	e6 36		inc $36				inc 	zTemp0  					; subtracted one without borrow.
.d316	b316	aa		tax				tax 								; update X
.d317	b317	68		pla				pla 								; restore A
.d318	b318	7a		ply				ply 								; throw original
.d319	b319	80 eb		bra $b306			bra 	_LCLWNLoop2 				; try again.
.d31b	b31b					_LCLWNUnderflow:
.d31b	b31b	a4 36		ldy $36				ldy 	zTemp0 						; count of subtractions.
.d31d	b31d	d0 06		bne $b325			bne 	_LCLWNOut
.d31f	b31f	ad 19 04	lda $0419			lda 	tbOffset 					; suppress leading zeroes
.d322	b322	3a		dec a				dec 	a
.d323	b323	f0 04		beq $b329			beq 	_LCLWNNext
.d325	b325					_LCLWNOut:
.d325	b325	98		tya				tya
.d326	b326	20 35 b3	jsr $b335			jsr 	_LCLWNOutDigit
.d329	b329					_LCLWNNext:
.d329	b329	7a		ply				ply 							 	; restore original value.
.d32a	b32a	68		pla				pla
.d32b	b32b	a4 37		ldy $37				ldy 	zTemp0+1  					; bump the index
.d32d	b32d	c8		iny				iny
.d32e	b32e	c8		iny				iny
.d32f	b32f	84 37		sty $37				sty 	zTemp0+1
.d331	b331	c0 08		cpy #$08			cpy 	#8 							; done all 4
.d333	b333	d0 cf		bne $b304			bne 	_LCLWNLoop1
.d335	b335					_LCLWNOutDigit:
.d335	b335	09 30		ora #$30			ora 	#'0'
.d337	b337	20 9a b2	jsr $b29a			jsr 	LCLWrite
.d33a	b33a	60		rts				rts
.d33b	b33b					_LCLWNTable:
>d33b	b33b	10 27						.word 	10000
>d33d	b33d	e8 03						.word 	1000
>d33f	b33f	64 00						.word 	100
>d341	b341	0a 00						.word 	10
.d343	b343					TOKSearchTable:
.d343	b343	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token being tested.
.d345	b345	85 36		sta $36				sta 	zTemp0
.d347	b347	a0 00		ldy #$00			ldy 	#0
.d349	b349	a9 80		lda #$80			lda 	#$80 						; token # so we know which one we are looking at
.d34b	b34b	85 38		sta $38				sta 	zTemp1
.d34d	b34d					_TSTLoop:
.d34d	b34d	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.d34f	b34f	30 49		bmi $b39a			bmi 	_TSTFail 					; -ve = end of table, so fail.
.d351	b351	f0 2e		beq $b381			beq 	_TSTNext 					; zero, check next as it's a dummy (e.g. EOL, SHIFT)
.d353	b353	c8		iny				iny 								; get the hash
.d354	b354	b1 36		lda ($36),y			lda 	(zTemp0),y
.d356	b356	88		dey				dey
.d357	b357	cd 03 04	cmp $0403			cmp 	identHash 					; check they match with the identifier hash, if not go to next
.d35a	b35a	d0 25		bne $b381			bne 	_TSTNext
.d35c	b35c	ad 02 04	lda $0402			lda 	identTypeEnd 				; get length of identifier from end-start
.d35f	b35f	38		sec				sec
.d360	b360	ed 00 04	sbc $0400			sbc 	identStart
.d363	b363	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; compare against the length in the table, no match, then return.
.d365	b365	d0 1a		bne $b381			bne 	_TSTNext
.d367	b367	5a		phy				phy 								; save Y , we might fail to match.
.d368	b368	c8		iny				iny 								; point to text
.d369	b369	c8		iny				iny
.d36a	b36a	ae 00 04	ldx $0400			ldx 	identStart 					; offset in line buffer in X
.d36d	b36d					_TSTCompareName:
.d36d	b36d	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; compare text.
.d370	b370	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.d372	b372	d0 0c		bne $b380			bne 	_TSTNextPullY 				; fail, pullY and do next
.d374	b374	e8		inx				inx
.d375	b375	c8		iny				iny
.d376	b376	ec 02 04	cpx $0402			cpx 	identTypeEnd 				; complete match.
.d379	b379	d0 f2		bne $b36d			bne 	_TSTCompareName
.d37b	b37b	7a		ply				ply 								; throw Y
.d37c	b37c	a5 38		lda $38				lda 	zTemp1 						; get token #
.d37e	b37e	38		sec				sec 								; return with CS = passed.
.d37f	b37f	60		rts				rts
.d380	b380					_TSTNextPullY:
.d380	b380	7a		ply				ply 								; restore current, fall through.
.d381	b381					_TSTNext:
.d381	b381	e6 38		inc $38				inc 	zTemp1 						; token counter
.d383	b383	98		tya				tya
.d384	b384	18		clc				clc
.d385	b385	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.d387	b387	1a		inc a				inc 	a 							; +1
.d388	b388	1a		inc a				inc 	a 							; +2
.d389	b389	a8		tay				tay
.d38a	b38a	10 c1		bpl $b34d			bpl 	_TSTLoop 					; if Y < $80 loop back
.d38c	b38c	98		tya				tya 								; add Y to zTemp0 and reset Y
.d38d	b38d	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.d38f	b38f	18		clc				clc  								; but have tables > 255 bytes
.d390	b390	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.d392	b392	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.d394	b394	90 b7		bcc $b34d			bcc 	_TSTLoop
.d396	b396	e6 37		inc $37				inc 	zTemp0+1
.d398	b398	80 b3		bra $b34d			bra 	_TSTLoop
.d39a	b39a					_TSTFail:
.d39a	b39a	18		clc				clc
.d39b	b39b	60		rts				rts
.d39c	b39c					Export_TKTokeniseLine:
.d39c	b39c	20 69 b5	jsr $b569			jsr 	LCLFixLineBufferCase 		; fix line case
.d39f	b39f	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.d3a1	b3a1	8d 26 04	sta $0426			sta 	tokenOffset 				; (3 bytes for line number & offset)
.d3a4	b3a4	9c 27 04	stz $0427			stz 	tokenLineNumber
.d3a7	b3a7	9c 28 04	stz $0428			stz 	tokenLineNumber+1
.d3aa	b3aa	a2 ff		ldx #$ff			ldx 	#$FF
.d3ac	b3ac					_TKFindFirst:
.d3ac	b3ac	e8		inx				inx
.d3ad	b3ad	bd 26 05	lda $0526,x			lda 	lineBuffer,x
.d3b0	b3b0	f0 62		beq $b414			beq 	_TKExit
.d3b2	b3b2	c9 20		cmp #$20			cmp 	#' '
.d3b4	b3b4	90 f6		bcc $b3ac			bcc 	_TKFindFirst
.d3b6	b3b6	c9 30		cmp #$30			cmp 	#'0'
.d3b8	b3b8	90 07		bcc $b3c1			bcc 	_TKNoLineNumber
.d3ba	b3ba	c9 3a		cmp #$3a			cmp 	#'9'+1
.d3bc	b3bc	b0 03		bcs $b3c1			bcs 	_TKNoLineNumber
.d3be	b3be	20 93 b5	jsr $b593			jsr 	TOKExtractLineNumber
.d3c1	b3c1					_TKNoLineNumber:
.d3c1	b3c1					_TKTokeniseLoop:
.d3c1	b3c1	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.d3c4	b3c4	f0 4e		beq $b414			beq 	_TKExit
.d3c6	b3c6	e8		inx				inx
.d3c7	b3c7	c9 20		cmp #$20			cmp 	#' '
.d3c9	b3c9	f0 f6		beq $b3c1			beq 	_TKTokeniseLoop 			; keep looping if space found.
.d3cb	b3cb	ca		dex				dex 								; undo last get, A contains character, X is position.
.d3cc	b3cc	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.d3ce	b3ce	f0 68		beq $b438			beq 	_TKTokeniseIdentifier 		; (already case converted outside string constants)
.d3d0	b3d0	c9 41		cmp #$41			cmp 	#'A'
.d3d2	b3d2	90 04		bcc $b3d8			bcc 	_TKTokenisePunctuation
.d3d4	b3d4	c9 5b		cmp #$5b			cmp 	#'Z'+1
.d3d6	b3d6	90 60		bcc $b438			bcc 	_TKTokeniseIdentifier
.d3d8	b3d8					_TKTokenisePunctuation:
.d3d8	b3d8	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.d3da	b3da	f0 2e		beq $b40a			beq 	_TKString
.d3dc	b3dc	c9 24		cmp #$24			cmp 	#'$'						; hexadecimal constant ($ only appears at end of identifiers)
.d3de	b3de	f0 2f		beq $b40f			beq 	_TKHexConstant
.d3e0	b3e0	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers - these are for <> <= >= >> <<
.d3e2	b3e2	f0 36		beq $b41a			beq 	_TKCheckDouble
.d3e4	b3e4	c9 3e		cmp #$3e			cmp 	#'>'
.d3e6	b3e6	f0 32		beq $b41a			beq 	_TKCheckDouble
.d3e8	b3e8					_TKStandardPunctuation:
.d3e8	b3e8	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; get the punctuation token back.
.d3eb	b3eb	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.d3ed	b3ed	90 0e		bcc $b3fd			bcc 	_TKNoShift
.d3ef	b3ef	48		pha				pha 								; save. we are about to convert this punctuation token from
.d3f0	b3f0	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.d3f2	b3f2	85 36		sta $36				sta 	zTemp0
.d3f4	b3f4	68		pla				pla
.d3f5	b3f5	29 20		and #$20			and 	#32 						; bit 5
.d3f7	b3f7	4a		lsr a				lsr 	a 							; shift into bit 3
.d3f8	b3f8	4a		lsr a				lsr 	a
.d3f9	b3f9	05 36		ora $36				ora 	zTemp0
.d3fb	b3fb	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.d3fd	b3fd					_TKNoShift:
.d3fd	b3fd	20 d8 b5	jsr $b5d8			jsr 	TOKWriteByte 				; write the punctuation character
.d400	b400	e8		inx				inx 								; consume the character
.d401	b401	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; quote found ?
.d403	b403	d0 bc		bne $b3c1			bne 	_TKTokeniseLoop 			; and loop round again.
.d405	b405	20 cb b4	jsr $b4cb			jsr 	TOKCheckComment 			; comment checl
.d408	b408	80 b7		bra $b3c1			bra 	_TKTokeniseLoop
.d40a	b40a					_TKString:
.d40a	b40a	20 f8 b4	jsr $b4f8			jsr 	TOKTokenString
.d40d	b40d	80 b2		bra $b3c1			bra 	_TKTokeniseLoop
.d40f	b40f					_TKHexConstant:
.d40f	b40f	20 33 b5	jsr $b533			jsr 	TOKHexConstant
.d412	b412	80 ad		bra $b3c1			bra 	_TKTokeniseLoop
.d414	b414	a9 80		lda #$80	_TKExit:lda 	#KWC_EOL 					; write end of line byte
.d416	b416	20 d8 b5	jsr $b5d8			jsr 	TOKWriteByte
.d419	b419	60		rts				rts
.d41a	b41a					_TKCheckDouble:
.d41a	b41a	bd 27 05	lda $0527,x			lda 	lineBuffer+1,x 				; get next character
.d41d	b41d	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.d41f	b41f	90 c7		bcc $b3e8			bcc 	_TKStandardPunctuation 		; and do the normal punctuation handler.
.d421	b421	c9 3f		cmp #$3f			cmp 	#'>'+1
.d423	b423	b0 c3		bcs $b3e8			bcs 	_TKStandardPunctuation
.d425	b425	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.d428	b428	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.d42a	b42a	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.d42b	b42b	7d 27 05	adc $0527,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.d42e	b42e	38		sec				sec
.d42f	b42f	e9 3c		sbc #$3c			sbc 	#'<'
.d431	b431	20 d8 b5	jsr $b5d8			jsr 	TOKWriteByte 				; this is in the range 0-7
.d434	b434	e8		inx				inx 								; consume both
.d435	b435	e8		inx				inx
.d436	b436	80 89		bra $b3c1			bra 	_TKTokeniseLoop
.d438	b438					_TKTokeniseIdentifier:
.d438	b438	8e 00 04	stx $0400			stx 	identStart 					; save start
.d43b	b43b	9c 04 04	stz $0404			stz 	identTypeByte 				; zero the type byte
.d43e	b43e					_TKCheckLoop:
.d43e	b43e	e8		inx				inx 								; look at next, we know first is identifier already.
.d43f	b43f	bd 26 05	lda $0526,x			lda  	lineBuffer,x
.d442	b442	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.d444	b444	f0 f8		beq $b43e			beq 	_TKCheckLoop
.d446	b446	c9 30		cmp #$30			cmp	 	#"0"
.d448	b448	90 0c		bcc $b456			bcc 	_TKEndIdentifier
.d44a	b44a	c9 3a		cmp #$3a			cmp 	#"9"+1
.d44c	b44c	90 f0		bcc $b43e			bcc 	_TKCheckLoop
.d44e	b44e	c9 41		cmp #$41			cmp	 	#"A"
.d450	b450	90 04		bcc $b456			bcc 	_TKEndIdentifier
.d452	b452	c9 5b		cmp #$5b			cmp 	#"Z"+1
.d454	b454	90 e8		bcc $b43e			bcc 	_TKCheckLoop
.d456	b456					_TKEndIdentifier:
.d456	b456	8e 01 04	stx $0401			stx 	identTypeStart 				; save start of type text (if any !)
.d459	b459	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.d45b	b45b	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.d45d	b45d	f0 06		beq $b465			beq 	_TKHasTypeCharacter
.d45f	b45f	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.d461	b461	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.d463	b463	d0 07		bne $b46c			bne 	_TKNoTypeCharacter
.d465	b465					_TKHasTypeCharacter:
.d465	b465	8c 04 04	sty $0404			sty 	identTypeByte 				; has # or $, save the type
.d468	b468	e8		inx				inx 								; consume the type character
.d469	b469	bd 26 05	lda $0526,x			lda 	lineBuffer,x
.d46c	b46c					_TKNoTypeCharacter:
.d46c	b46c	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.d46e	b46e	d0 09		bne $b479			bne 	_TKNoArray
.d470	b470	e8		inx				inx 								; skip the (
.d471	b471	ad 04 04	lda $0404			lda 	identTypeByte 				; set bit 2 (e.g. array) in type byte
.d474	b474	09 04		ora #$04			ora 	#$04
.d476	b476	8d 04 04	sta $0404			sta 	identTypeByte
.d479	b479					_TKNoArray:
.d479	b479	8e 02 04	stx $0402			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.d47c	b47c	20 54 b5	jsr $b554			jsr 	TOKCalculateHash 			; calculate the has for those tokens
.d47f	b47f	a0 ac		ldy #$ac			ldy 	#(KeywordSet0) >> 8
.d481	b481	a9 42		lda #$42			lda 	#(KeywordSet0) & $FF
.d483	b483	20 43 b3	jsr $b343			jsr 	TOKSearchTable
.d486	b486	a2 00		ldx #$00			ldx 	#0
.d488	b488	b0 1f		bcs $b4a9			bcs 	_TKFoundToken
.d48a	b48a	a0 ae		ldy #$ae			ldy 	#(KeywordSet1) >> 8
.d48c	b48c	a9 b3		lda #$b3			lda 	#(KeywordSet1) & $FF
.d48e	b48e	20 43 b3	jsr $b343			jsr 	TOKSearchTable
.d491	b491	a2 81		ldx #$81			ldx 	#$81
.d493	b493	b0 14		bcs $b4a9			bcs 	_TKFoundToken
.d495	b495	a0 af		ldy #$af			ldy 	#(KeywordSet2) >> 8
.d497	b497	a9 bc		lda #$bc			lda 	#(KeywordSet2) & $FF
.d499	b499	20 43 b3	jsr $b343			jsr 	TOKSearchTable
.d49c	b49c	a2 82		ldx #$82			ldx 	#$82
.d49e	b49e	b0 09		bcs $b4a9			bcs 	_TKFoundToken
.d4a0	b4a0	20 e4 b5	jsr $b5e4			jsr 	TOKCheckCreateVariableRecord ; failed all, it's a variable, create record if does not exist.
.d4a3	b4a3	ae 02 04	ldx $0402			ldx 	identTypeEnd 				; X points to following byte
.d4a6	b4a6	4c c1 b3	jmp $b3c1			jmp 	_TKTokeniseLoop 			; and go round again.
.d4a9	b4a9					_TKFoundToken:
.d4a9	b4a9	48		pha				pha 								; save token
.d4aa	b4aa	8a		txa				txa 								; shift in X, is there one ?
.d4ab	b4ab	f0 03		beq $b4b0			beq 	_TKNoTShift
.d4ad	b4ad	20 d8 b5	jsr $b5d8			jsr 	TOKWriteByte 				; if so, write it out
.d4b0	b4b0					_TKNoTShift:
.d4b0	b4b0	68		pla				pla 								; restore and write token
.d4b1	b4b1	20 d8 b5	jsr $b5d8			jsr 	TOKWriteByte
.d4b4	b4b4	e0 00		cpx #$00			cpx 	#0 							; check for REM and '
.d4b6	b4b6	d0 0d		bne $b4c5			bne 	_TKNotRem 			 		; not shifted ?
.d4b8	b4b8	c9 d6		cmp #$d6			cmp 	#KWD_REM
.d4ba	b4ba	d0 09		bne $b4c5			bne 	_TKNotRem
.d4bc	b4bc	ae 02 04	ldx $0402			ldx 	identTypeEnd 				; check if comment follows.
.d4bf	b4bf	20 cb b4	jsr $b4cb			jsr 	TOKCheckComment
.d4c2	b4c2	4c c1 b3	jmp $b3c1			jmp 	_TKTokeniseLoop
.d4c5	b4c5					_TKNotRem:
.d4c5	b4c5	ae 02 04	ldx $0402			ldx 	identTypeEnd 				; X points to following byte
.d4c8	b4c8	4c c1 b3	jmp $b3c1			jmp 	_TKTokeniseLoop 			; and go round again.
.d4cb	b4cb					TOKCheckComment:
.d4cb	b4cb	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; skip over space
.d4ce	b4ce	e8		inx				inx
.d4cf	b4cf	c9 20		cmp #$20			cmp 	#' '
.d4d1	b4d1	f0 f8		beq $b4cb			beq 	TOKCheckComment
.d4d3	b4d3	ca		dex				dex 								; first non space character
.d4d4	b4d4	c9 22		cmp #$22			cmp 	#'"'						; quote mark
.d4d6	b4d6	f0 1f		beq $b4f7			beq 	_TOKCCExit 					; then we are okay
.d4d8	b4d8	c9 00		cmp #$00			cmp 	#0 							; EOL
.d4da	b4da	f0 1b		beq $b4f7			beq 	_TOKCCExit 					; then we are okay
.d4dc	b4dc	da		phx				phx
.d4dd	b4dd					_TOKCCLowerCase:
.d4dd	b4dd	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; about making it lower case it all, but I thought
.d4e0	b4e0	c9 41		cmp #$41			cmp 	#"A"		 				; that was a bit risky. So it's converted to L/C here.
.d4e2	b4e2	90 09		bcc $b4ed			bcc 	_TOKKCNotUC
.d4e4	b4e4	c9 5b		cmp #$5b			cmp 	#"Z"+1
.d4e6	b4e6	b0 05		bcs $b4ed			bcs 	_TOKKCNotUC
.d4e8	b4e8	49 20		eor #$20			eor 	#$20
.d4ea	b4ea	9d 26 05	sta $0526,x			sta 	lineBuffer,x
.d4ed	b4ed					_TOKKCNotUC:
.d4ed	b4ed	e8		inx				inx
.d4ee	b4ee	c9 00		cmp #$00			cmp 	#0
.d4f0	b4f0	d0 eb		bne $b4dd			bne 	_TOKCCLowerCase
.d4f2	b4f2	fa		plx				plx
.d4f3	b4f3	ca		dex				dex 								; tokenise string expects initial skip.
.d4f4	b4f4	20 f8 b4	jsr $b4f8			jsr 	TOKTokenString 				; tokenise rest of line as a string.
.d4f7	b4f7					_TOKCCExit:
.d4f7	b4f7	60		rts				rts
.d4f8	b4f8					TOKTokenString:
.d4f8	b4f8	a9 ff		lda #$ff			lda 	#KWC_STRING 				; string token.
.d4fa	b4fa	20 d8 b5	jsr $b5d8			jsr 	TOKWriteByte
.d4fd	b4fd	e8		inx				inx									; start of quoted string.
.d4fe	b4fe	da		phx				phx 								; push start of string on top
.d4ff	b4ff	ca		dex				dex 								; because we pre-increment
.d500	b500					_TSFindEnd:
.d500	b500	e8		inx				inx
.d501	b501	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; next character
.d504	b504	f0 04		beq $b50a			beq 	_TSEndOfString 				; no matching quote, we don't mind.
.d506	b506	c9 22		cmp #$22			cmp 	#'"' 						; go back if quote not found
.d508	b508	d0 f6		bne $b500			bne 	_TSFindEnd
.d50a	b50a					_TSEndOfString:
.d50a	b50a	7a		ply				ply  								; so now Y is first character, X is character after end.
.d50b	b50b	48		pha				pha 								; save terminating character
.d50c	b50c	20 14 b5	jsr $b514			jsr 	TOKWriteBlockXY 			; write X to Y as a data block
.d50f	b50f	68		pla				pla 								; terminating character
.d510	b510	f0 01		beq $b513			beq 	_TSNotQuote					; if it wasn't EOS skip it
.d512	b512	e8		inx				inx
.d513	b513					_TSNotQuote:
.d513	b513	60		rts				rts
.d514	b514					TOKWriteBlockXY:
.d514	b514	86 36		stx $36				stx 	zTemp0 						; save end character
.d516	b516	98		tya				tya 								; use 2's complement to work out the byte size
.d517	b517	49 ff		eor #$ff			eor 	#$FF
.d519	b519	38		sec				sec
.d51a	b51a	65 36		adc $36				adc 	zTemp0
.d51c	b51c	1a		inc a				inc 	a 							; one extra for NULL
.d51d	b51d	20 d8 b5	jsr $b5d8			jsr 	TOKWriteByte
.d520	b520					_TOBlockLoop:
.d520	b520	c4 36		cpy $36				cpy 	zTemp0 						; exit if reached the end
.d522	b522	f0 09		beq $b52d			beq 	_TOBlockExit
.d524	b524	b9 26 05	lda $0526,y			lda 	lineBuffer,y 				; write byte out.
.d527	b527	20 d8 b5	jsr $b5d8			jsr 	TOKWriteByte
.d52a	b52a	c8		iny				iny
.d52b	b52b	80 f3		bra $b520			bra 	_TOBlockLoop
.d52d	b52d					_TOBlockExit:
.d52d	b52d	a9 00		lda #$00			lda 	#0 							; add NULL.
.d52f	b52f	20 d8 b5	jsr $b5d8			jsr 	TOKWriteByte
.d532	b532	60		rts				rts
.d533	b533					TOKHexConstant:
.d533	b533	a9 fe		lda #$fe			lda 	#KWC_HEXCONST 				; hex constant token.
.d535	b535	20 d8 b5	jsr $b5d8			jsr 	TOKWriteByte
.d538	b538	e8		inx				inx									; start of quoted string.
.d539	b539	da		phx				phx 								; push start of constant on top
.d53a	b53a	ca		dex				dex
.d53b	b53b					_THFindLoop:
.d53b	b53b	e8		inx				inx 	 							; this is stored in a block, so find out how long
.d53c	b53c	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; the hex constant is.
.d53f	b53f	c9 30		cmp #$30			cmp 	#"0"
.d541	b541	90 0c		bcc $b54f			bcc 	_THFoundEnd
.d543	b543	c9 3a		cmp #$3a			cmp 	#"9"+1
.d545	b545	90 f4		bcc $b53b			bcc 	_THFindLoop
.d547	b547	c9 41		cmp #$41			cmp 	#"A"
.d549	b549	90 04		bcc $b54f			bcc 	_THFoundEnd
.d54b	b54b	c9 47		cmp #$47			cmp 	#"F"+1
.d54d	b54d	90 ec		bcc $b53b			bcc 	_THFindLoop
.d54f	b54f					_THFoundEnd:
.d54f	b54f	7a		ply				ply 								; restore start
.d550	b550	20 14 b5	jsr $b514			jsr 	TOKWriteBlockXY 			; output the block
.d553	b553	60		rts				rts
.d554	b554					TOKCalculateHash:
.d554	b554	da		phx				phx
.d555	b555	ae 00 04	ldx $0400			ldx 	identStart 					; needs to be same as in tokens.py - simple sum at present.
.d558	b558	a9 00		lda #$00			lda 	#0
.d55a	b55a					_TCHLoop:
.d55a	b55a	18		clc				clc
.d55b	b55b	7d 26 05	adc $0526,x			adc 	lineBuffer,x
.d55e	b55e	e8		inx				inx
.d55f	b55f	ec 02 04	cpx $0402			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.d562	b562	d0 f6		bne $b55a			bne 	_TCHLoop
.d564	b564	8d 03 04	sta $0403			sta 	identHash 					; save the hash
.d567	b567	fa		plx				plx
.d568	b568	60		rts				rts
.d569	b569					LCLFixLineBufferCase:
.d569	b569	a2 00		ldx #$00			ldx 	#0
.d56b	b56b					_FLBCLoop:
.d56b	b56b	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; get next character
.d56e	b56e	f0 22		beq $b592			beq 	_FLBCExit 					; end of string.
.d570	b570	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.d572	b572	f0 11		beq $b585			beq 	_FLBCInQuotes
.d574	b574	e8		inx				inx
.d575	b575	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.d577	b577	90 f2		bcc $b56b			bcc 	_FLBCLoop
.d579	b579	c9 7b		cmp #$7b			cmp 	#'z'+1
.d57b	b57b	b0 ee		bcs $b56b			bcs 	_FLBCLoop
.d57d	b57d	38		sec				sec 								; make U/C
.d57e	b57e	e9 20		sbc #$20			sbc 	#32
.d580	b580	9d 25 05	sta $0525,x			sta	 	lineBuffer-1,x 				; write back
.d583	b583	80 e6		bra $b56b			bra 	_FLBCLoop
.d585	b585					_FLBCInQuotes:
.d585	b585	e8		inx				inx 								; advance
.d586	b586	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; get next
.d589	b589	f0 07		beq $b592			beq 	_FLBCExit 					; exit on EOS
.d58b	b58b	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.d58d	b58d	d0 f6		bne $b585			bne 	_FLBCInQuotes
.d58f	b58f	e8		inx				inx 								; skip over it
.d590	b590	80 d9		bra $b56b			bra 	_FLBCLoop
.d592	b592					_FLBCExit:
.d592	b592	60		rts				rts
.d593	b593					TOKExtractLineNumber:
.d593	b593	ad 28 04	lda $0428			lda 	tokenLineNumber+1 			; push current value on stack
.d596	b596	48		pha				pha
.d597	b597	ad 27 04	lda $0427			lda 	tokenLineNumber
.d59a	b59a	48		pha				pha
.d59b	b59b	20 d1 b5	jsr $b5d1			jsr 	_LCLNTimes2 				; line # x 2
.d59e	b59e	20 d1 b5	jsr $b5d1			jsr 	_LCLNTimes2 				; line # x 4
.d5a1	b5a1	18		clc				clc 								; add stacked value
.d5a2	b5a2	68		pla				pla
.d5a3	b5a3	6d 27 04	adc $0427			adc 	tokenLineNumber
.d5a6	b5a6	8d 27 04	sta $0427			sta 	tokenLineNumber
.d5a9	b5a9	68		pla				pla
.d5aa	b5aa	6d 28 04	adc $0428			adc 	tokenLineNumber+1
.d5ad	b5ad	8d 28 04	sta $0428			sta 	tokenLineNumber+1 			; line # x 5
.d5b0	b5b0	20 d1 b5	jsr $b5d1			jsr 	_LCLNTimes2 				; line # x 10
.d5b3	b5b3	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; get and consume character
.d5b6	b5b6	e8		inx				inx
.d5b7	b5b7	29 0f		and #$0f			and 	#15 						; add to line #
.d5b9	b5b9	18		clc				clc
.d5ba	b5ba	6d 27 04	adc $0427			adc 	tokenLineNumber
.d5bd	b5bd	8d 27 04	sta $0427			sta 	tokenLineNumber
.d5c0	b5c0	90 03		bcc $b5c5			bcc 	_TLENNoCarry
.d5c2	b5c2	ee 28 04	inc $0428			inc 	tokenLineNumber+1
.d5c5	b5c5					_TLENNoCarry:
.d5c5	b5c5	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; more digits ?
.d5c8	b5c8	c9 30		cmp #$30			cmp 	#'0'
.d5ca	b5ca	90 04		bcc $b5d0			bcc 	_TLENExit
.d5cc	b5cc	c9 3a		cmp #$3a			cmp 	#'9'+1
.d5ce	b5ce	90 c3		bcc $b593			bcc 	TOKExtractLineNumber
.d5d0	b5d0					_TLENExit:
.d5d0	b5d0	60		rts				rts
.d5d1	b5d1					_LCLNTimes2:
.d5d1	b5d1	0e 27 04	asl $0427			asl 	tokenLineNumber 			; doubles tokenLineNumber.
.d5d4	b5d4	2e 28 04	rol $0428			rol 	tokenLineNumber+1
.d5d7	b5d7	60		rts				rts
.d5d8	b5d8					TOKWriteByte:
.d5d8	b5d8	da		phx				phx
.d5d9	b5d9	ae 26 04	ldx $0426			ldx 	tokenOffset 				; next slot to write to
.d5dc	b5dc	9d 26 04	sta $0426,x			sta 	tokenOffset,x 				; write byte out
.d5df	b5df	ee 26 04	inc $0426			inc 	tokenOffset 				; advance slot.
.d5e2	b5e2	fa		plx				plx
.d5e3	b5e3	60		rts				rts
.d5e4	b5e4					TOKCheckCreateVariableRecord:
.d5e4	b5e4	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.d5e6	b5e6	85 36		sta $36				sta 	0+zTemp0
.d5e8	b5e8	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.d5ea	b5ea	85 37		sta $37				sta 	1+zTemp0
.d5ec	b5ec					_CCVSearch:
.d5ec	b5ec	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.d5ee	b5ee	f0 2c		beq $b61c			beq 	_CCVFail
.d5f0	b5f0	a0 01		ldy #$01			ldy 	#1 							; read the hash
.d5f2	b5f2	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.d5f4	b5f4	cd 03 04	cmp $0403			cmp 	identHash 	  				; if not, try the next.
.d5f7	b5f7	d0 16		bne $b60f			bne 	_CCVNext
.d5f9	b5f9	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.d5fb	b5fb	ae 00 04	ldx $0400			ldx 	identStart
.d5fe	b5fe					_CCVCompare:
.d5fe	b5fe	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.d601	b601	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.d603	b603	e8		inx				inx 								; advance pointers
.d604	b604	c8		iny				iny
.d605	b605	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.d606	b606	d0 07		bne $b60f			bne 	_CCVNext  					; didn't match go to next.
.d608	b608	90 f4		bcc $b5fe			bcc 	_CCVCompare 				; not finished yet.
.d60a	b60a	ec 02 04	cpx $0402			cpx 	identTypeEnd 				; matched whole thing ?
.d60d	b60d	f0 41		beq $b650			beq 	_CCVFound 					; yes, we were successful
.d60f	b60f					_CCVNext:
.d60f	b60f	18		clc				clc 								; go to next record.
.d610	b610	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.d612	b612	65 36		adc $36				adc 	zTemp0
.d614	b614	85 36		sta $36				sta 	zTemp0
.d616	b616	90 d4		bcc $b5ec			bcc 	_CCVSearch
.d618	b618	e6 37		inc $37				inc 	zTemp0+1
.d61a	b61a	80 d0		bra $b5ec			bra 	_CCVSearch
.d61c	b61c					_CCVFail:
.d61c	b61c	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.d61e	b61e	ad 03 04	lda $0403			lda 	identHash
.d621	b621	91 36		sta ($36),y			sta 	(zTemp0),y
.d623	b623	c8		iny				iny 								; offset 2 is the type byte
.d624	b624	ad 04 04	lda $0404			lda 	identTypeByte
.d627	b627	91 36		sta ($36),y			sta 	(zTemp0),y
.d629	b629	c8		iny				iny
.d62a	b62a					_CCVData:
.d62a	b62a	a9 00		lda #$00			lda 	#0 							; erase data 3-7 (the 5 value bytes)
.d62c	b62c	91 36		sta ($36),y			sta 	(zTemp0),y
.d62e	b62e	c8		iny				iny
.d62f	b62f	c0 08		cpy #$08			cpy 	#8
.d631	b631	90 f7		bcc $b62a			bcc 	_CCVData
.d633	b633	ae 00 04	ldx $0400			ldx 	identStart 					; copy name into 8 on.
.d636	b636					_CCVCopyName:
.d636	b636	bd 26 05	lda $0526,x			lda 	lineBuffer,x
.d639	b639	91 36		sta ($36),y			sta 	(zTemp0),y
.d63b	b63b	e8		inx				inx
.d63c	b63c	c8		iny				iny
.d63d	b63d	ec 02 04	cpx $0402			cpx 	identTypeEnd
.d640	b640	d0 f4		bne $b636			bne 	_CCVCopyName
.d642	b642	98		tya				tya 								; patch offset
.d643	b643	92 36		sta ($36)			sta 	(zTemp0)
.d645	b645	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.d647	b647	91 36		sta ($36),y			sta 	(zTemp0),y
.d649	b649	88		dey				dey
.d64a	b64a	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.d64c	b64c	09 80		ora #$80			ora 	#$80
.d64e	b64e	91 36		sta ($36),y			sta 	(zTemp0),y
.d650	b650					_CCVFound:
.d650	b650	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.d652	b652	38		sec				sec
.d653	b653	e9 10		sbc #$10			sbc 	#(VariableSpace >> 8) 		; offset from the start of the variable token
.d655	b655	09 40		ora #$40			ora 	#$40 						; make it a writeable token $4000-$7FFF
.d657	b657	20 d8 b5	jsr $b5d8			jsr 	TOKWriteByte
.d65a	b65a	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.d65c	b65c	20 d8 b5	jsr $b5d8			jsr 	TOKWriteByte
.d65f	b65f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_sound.module

=1						soundIntegrated=1
.d660	b660					SNDCheckChannel:
.d660	b660	aa		tax				tax
.d661	b661	bd 8c 09	lda $098c,x			lda 	SNDTimeLeft,x 				; currently playing a note
.d664	b664	d0 38		bne $b69e			bne 	_SNDCCExit
.d666	b666	da		phx				phx 								; save current channel
.d667	b667	8a		txa				txa 								; put in A
.d668	b668	20 e4 b6	jsr $b6e4			jsr 	SNDFindNextNoteForA 		; is there a note for A in the queue ?
.d66b	b66b	68		pla				pla 								; channel # in A
.d66c	b66c	90 30		bcc $b69e			bcc 	_SNDCCExit  				; nothing in the queue for this channel, exit.
.d66e	b66e	a8		tay				tay 								; Y is the channel #
.d66f	b66f	bd 81 08	lda $0881,x			lda 	SNDQueue+1,x 				; copy data into the slot.
.d672	b672	99 80 09	sta $0980,y			sta 	SNDPitchLow,y
.d675	b675	bd 82 08	lda $0882,x			lda 	SNDQueue+2,x
.d678	b678	99 84 09	sta $0984,y			sta 	SNDPitchHigh,y
.d67b	b67b	bd 83 08	lda $0883,x			lda 	SNDQueue+3,x
.d67e	b67e	99 88 09	sta $0988,y			sta 	SNDVolume,y
.d681	b681	bd 84 08	lda $0884,x			lda 	SNDQueue+4,x
.d684	b684	99 8c 09	sta $098c,y			sta 	SNDTimeLeft,y
.d687	b687	bd 85 08	lda $0885,x			lda 	SNDQueue+5,x
.d68a	b68a	99 90 09	sta $0990,y			sta 	SNDAdjustLow,y
.d68d	b68d	bd 86 08	lda $0886,x			lda 	SNDQueue+6,x
.d690	b690	99 94 09	sta $0994,y			sta 	SNDAdjustHigh,y
.d693	b693	5a		phy				phy 								; save channel #
.d694	b694	20 fe b6	jsr $b6fe			jsr 	SNDDeleteXFromQueue 		; delete record at X from queue
.d697	b697	ce 7f 08	dec $087f			dec 	SNDLength 					; reduce the queue length.
.d69a	b69a	68		pla				pla
.d69b	b69b	20 9f b6	jsr $b69f			jsr 	SNDUpdateNote 				; update channel A
.d69e	b69e					_SNDCCExit:
.d69e	b69e	60		rts				rts
.d69f	b69f					SNDUpdateNote:
.d69f	b69f	aa		tax				tax 								; so we can access records
.d6a0	b6a0	0a		asl a				asl 	a 							; convert it to a channel bit pair in 5,6
.d6a1	b6a1	0a		asl a				asl 	a
.d6a2	b6a2	0a		asl a				asl 	a
.d6a3	b6a3	0a		asl a				asl 	a
.d6a4	b6a4	0a		asl a				asl 	a
.d6a5	b6a5	8d 7e 08	sta $087e			sta 	SNDChannelBits
.d6a8	b6a8	bd 8c 09	lda $098c,x			lda 	SNDTimeLeft,x 				; are we silent
.d6ab	b6ab	f0 2e		beq $b6db			beq 	_SNDUNIsSilent
.d6ad	b6ad	ad 7e 08	lda $087e			lda 	SNDChannelBits 				; push channel bits on stack
.d6b0	b6b0	48		pha				pha
.d6b1	b6b1	bd 80 09	lda $0980,x			lda 	SNDPitchLow,x 				; get 4 lowest bits of pitch.
.d6b4	b6b4	29 0f		and #$0f			and 	#$0F
.d6b6	b6b6	0d 7e 08	ora $087e			ora 	SNDChannelBits 				; set channel bits
.d6b9	b6b9	09 80		ora #$80			ora 	#$80 						; write to pitch register
.d6bb	b6bb	20 48 b7	jsr $b748			jsr 	SNDWritePorts
.d6be	b6be	bd 84 09	lda $0984,x			lda 	SNDPitchHigh,x 				; pitch high => channel temp.
.d6c1	b6c1	8d 7e 08	sta $087e			sta 	SNDChannelBits
.d6c4	b6c4	bd 80 09	lda $0980,x			lda 	SNDPitchLow,x
.d6c7	b6c7	4e 7e 08	lsr $087e			lsr 	SNDChannelBits 				; shift 2 LSBs into MSB of A
.d6ca	b6ca	6a		ror a				ror 	a
.d6cb	b6cb	4e 7e 08	lsr $087e			lsr 	SNDChannelBits
.d6ce	b6ce	6a		ror a				ror 	a
.d6cf	b6cf	4a		lsr a				lsr 	a 							; put in bits 0-5
.d6d0	b6d0	4a		lsr a				lsr 	a
.d6d1	b6d1	20 48 b7	jsr $b748			jsr 	SNDWritePorts 				; write as rest of pitch register
.d6d4	b6d4	68		pla				pla
.d6d5	b6d5	09 90		ora #$90			ora 	#$90 						; set to write minimum attentuation.
.d6d7	b6d7	20 48 b7	jsr $b748			jsr 	SNDWritePorts
.d6da	b6da	60		rts				rts
.d6db	b6db					_SNDUNIsSilent:
.d6db	b6db	ad 7e 08	lda $087e			lda 	SNDChannelBits 				; channel bits
.d6de	b6de	09 9f		ora #$9f			ora 	#$9F 						; maximum attenuation
.d6e0	b6e0	20 48 b7	jsr $b748			jsr 	SNDWritePorts 				; write to the ports
.d6e3	b6e3	60		rts				rts
.d6e4	b6e4					SNDFindNextNoteForA:
.d6e4	b6e4	ac 7f 08	ldy $087f			ldy 	SNDLength 					; queue size into Y
.d6e7	b6e7	f0 13		beq $b6fc			beq 	_SNDFNNFail 				; queue empty.
.d6e9	b6e9	a2 00		ldx #$00			ldx 	#0
.d6eb	b6eb					_SNDFNNSearch:
.d6eb	b6eb	dd 80 08	cmp $0880,x			cmp 	SNDQueue,x 					; does it match the channel
.d6ee	b6ee	38		sec				sec
.d6ef	b6ef	f0 0c		beq $b6fd			beq 	_SNDFNNExit 				; if so exit with CS.
.d6f1	b6f1	e8		inx				inx 								; next queue slot.
.d6f2	b6f2	e8		inx				inx
.d6f3	b6f3	e8		inx				inx
.d6f4	b6f4	e8		inx				inx
.d6f5	b6f5	e8		inx				inx
.d6f6	b6f6	e8		inx				inx
.d6f7	b6f7	e8		inx				inx
.d6f8	b6f8	e8		inx				inx
.d6f9	b6f9	88		dey				dey 								; done the whole queue
.d6fa	b6fa	d0 ef		bne $b6eb			bne 	_SNDFNNSearch 				; no, go back.
.d6fc	b6fc					_SNDFNNFail:
.d6fc	b6fc	18		clc				clc
.d6fd	b6fd					_SNDFNNExit:
.d6fd	b6fd	60		rts				rts
.d6fe	b6fe					SNDDeleteXFromQueue:
.d6fe	b6fe	e0 f8		cpx #$f8			cpx 	#SNDQueueSize*8-8 			; reached the end.
.d700	b700	f0 09		beq $b70b			beq 	_SNDDXExit
.d702	b702	bd 88 08	lda $0888,x			lda 	SNDQueue+8,x
.d705	b705	9d 80 08	sta $0880,x			sta 	SNDQueue,x
.d708	b708	e8		inx				inx
.d709	b709	80 f3		bra $b6fe			bra 	SNDDeleteXFromQueue
.d70b	b70b					_SNDDXExit:
.d70b	b70b	60		rts				rts
.087e						SNDChannelBits:
>087e								.fill 	1
.d70c	b70c					SNDQueueRequest:
.d70c	b70c	86 36		stx $36				stx 	zTemp0						; save queue address
.d70e	b70e	84 37		sty $37				sty 	zTemp0+1
.d710	b710	ae 7f 08	ldx $087f			ldx 	SNDLength 					; queue is full, can't take any more.
.d713	b713	e0 20		cpx #$20			cpx 	#SNDQueueSize
.d715	b715	f0 21		beq $b738			beq 	_SNDQRExit
.d717	b717	29 03		and #$03			and 	#3	 						; channel # and push on stack
.d719	b719	48		pha				pha
.d71a	b71a	8a		txa				txa  								; get offset in queue buffer/
.d71b	b71b	0a		asl a				asl 	a
.d71c	b71c	0a		asl a				asl 	a
.d71d	b71d	0a		asl a				asl 	a
.d71e	b71e	aa		tax				tax
.d71f	b71f	68		pla				pla 								; get back and push again
.d720	b720	48		pha				pha
.d721	b721	9d 80 08	sta $0880,x			sta 	SNDQueue+0,x 				; save the channel #
.d724	b724	a0 00		ldy #$00			ldy 	#0 							; copy the rest in.
.d726	b726					_SNDQCopy:
.d726	b726	b1 36		lda ($36),y			lda 	(zTemp0),y
.d728	b728	e8		inx				inx
.d729	b729	c8		iny				iny
.d72a	b72a	9d 80 08	sta $0880,x			sta 	SNDQueue,x
.d72d	b72d	c0 06		cpy #$06			cpy 	#6
.d72f	b72f	d0 f5		bne $b726			bne 	_SNDQCopy
.d731	b731	ee 7f 08	inc $087f			inc 	SNDLength 					; bump queue length.
.d734	b734	68		pla				pla 								; get channel # back
.d735	b735	20 60 b6	jsr $b660			jsr 	SNDCheckChannel 			; check if channel needs refreshing.
.d738	b738					_SNDQRExit:
.d738	b738	60		rts				rts
.d739	b739					SNDSilenceChannel:
.d739	b739	aa		tax				tax 								; zero time left.
.d73a	b73a	9e 8c 09	stz $098c,x			stz 	SNDTimeLeft,x
.d73d	b73d	0a		asl a				asl 	a 							; shift into position
.d73e	b73e	0a		asl a				asl 	a
.d73f	b73f	0a		asl a				asl 	a
.d740	b740	0a		asl a				asl 	a
.d741	b741	0a		asl a				asl 	a
.d742	b742	09 9f		ora #$9f			ora 	#$9F 						; write register attenuation $F
.d744	b744	20 48 b7	jsr $b748			jsr 	SNDWritePorts
.d747	b747	60		rts				rts
.d748	b748					SNDWritePorts:
.d748	b748	da		phx				phx 								; save X
.d749	b749	a6 01		ldx $01				ldx 	1 							; save I/O status
.d74b	b74b	64 01		stz $01				stz 	1 							; access I/O page 0
.d74d	b74d	8d 00 d6	sta $d600			sta 	$D600 						; write to both
.d750	b750	8d 10 d6	sta $d610			sta 	$D610
.d753	b753	86 01		stx $01				stx 	1 							; restore I/O
.d755	b755	fa		plx				plx 								; restore X
.d756	b756	60		rts				rts
.d757	b757					Export_SNDCommand:
.d757	b757	da		phx				phx 								; save XY
.d758	b758	5a		phy				phy
.d759	b759	c9 0f		cmp #$0f			cmp 	#$0F 						; $0F is initialise
.d75b	b75b	f0 1d		beq $b77a			beq 	_SNDInitialise
.d75d	b75d	90 28		bcc $b787			bcc 	_SNDExit
.d75f	b75f	c9 3f		cmp #$3f			cmp 	#$3F 						; $3F is silence all
.d761	b761	f0 17		beq $b77a			beq 	_SNDSilence
.d763	b763	b0 22		bcs $b787			bcs 	_SNDExit
.d765	b765	c9 20		cmp #$20			cmp 	#$20 						; $2x is check playing => A
.d767	b767	b0 09		bcs $b772			bcs 	_SNDQueryPlay
.d769	b769	c9 14		cmp #$14			cmp 	#$14 						; $10-$13 is queue sound
.d76b	b76b	b0 1a		bcs $b787			bcs 	_SNDExit
.d76d	b76d	20 0c b7	jsr $b70c			jsr 	SNDQueueRequest
.d770	b770	80 15		bra $b787			bra 	_SNDExit
.d772	b772					_SNDQueryPlay:
.d772	b772	29 03		and #$03			and 	#3 							; get channel #
.d774	b774	aa		tax				tax
.d775	b775	bd 8c 09	lda $098c,x			lda 	SNDTimeLeft,x 				; read time left, if zero then silent
.d778	b778	80 0d		bra $b787			bra 	_SNDExit
.d77a	b77a					_SNDInitialise:
.d77a	b77a					_SNDSilence:
.d77a	b77a	9c 7f 08	stz $087f			stz 	SNDLength 					; empty the queue.
.d77d	b77d	a9 03		lda #$03			lda 	#$3 						; silence channel 0-3.
.d77f	b77f					_SNDSilenceLoop:
.d77f	b77f	48		pha				pha
.d780	b780	20 39 b7	jsr $b739			jsr 	SNDSilenceChannel
.d783	b783	68		pla				pla
.d784	b784	3a		dec a				dec 	a
.d785	b785	10 f8		bpl $b77f			bpl 	_SNDSilenceLoop
.d787	b787					_SNDExit:
.d787	b787	7a		ply				ply
.d788	b788	fa		plx				plx
.d789	b789	60		rts				rts
=32						SNDQueueSize = 32 							; number of queue entries
.087f						SNDLength:
>087f								.fill 	1
.0880						SNDQueue:
>0880								.fill 	SNDQueueSize * 8
.0980						SNDPitchLow:
>0980								.fill 	4
.0984						SNDPitchHigh:
>0984								.fill 	4
.0988						SNDVolume:
>0988								.fill 	4
.098c						SNDTimeLeft:
>098c								.fill 	4
.0990						SNDAdjustLow:
>0990								.fill 	4
.0994						SNDAdjustHigh:
>0994								.fill 	4
.d78a	b78a					Export_SNDUpdate:
.d78a	b78a					PagedSNDUpdate:
.d78a	b78a	ad 8c 09	lda $098c			lda 	SNDTimeLeft+0 				; look at time remaining
.d78d	b78d	f0 05		beq $b794			beq 	_SNDUNot0 					; not playing
.d78f	b78f	a2 00		ldx #$00			ldx 	#0 							; so we know which channel to update
.d791	b791	20 b3 b7	jsr $b7b3			jsr 	SNDUpdateChannel 			; update it.
.d794	b794					_SNDUNot0:
.d794	b794	ad 8d 09	lda $098d			lda 	SNDTimeLeft+1
.d797	b797	f0 05		beq $b79e			beq 	_SNDUNot1
.d799	b799	a2 01		ldx #$01			ldx 	#1
.d79b	b79b	20 b3 b7	jsr $b7b3			jsr 	SNDUpdateChannel
.d79e	b79e					_SNDUNot1:
.d79e	b79e	ad 8e 09	lda $098e			lda 	SNDTimeLeft+2
.d7a1	b7a1	f0 05		beq $b7a8			beq 	_SNDUNot2
.d7a3	b7a3	a2 02		ldx #$02			ldx 	#2
.d7a5	b7a5	20 b3 b7	jsr $b7b3			jsr 	SNDUpdateChannel
.d7a8	b7a8					_SNDUNot2:
.d7a8	b7a8	ad 8f 09	lda $098f			lda 	SNDTimeLeft+3
.d7ab	b7ab	f0 05		beq $b7b2			beq 	_SNDUNot3
.d7ad	b7ad	a2 03		ldx #$03			ldx 	#3
.d7af	b7af	20 b3 b7	jsr $b7b3			jsr 	SNDUpdateChannel
.d7b2	b7b2					_SNDUNot3:
.d7b2	b7b2	60		rts				rts
.d7b3	b7b3					SNDUpdateChannel:
.d7b3	b7b3	c9 ff		cmp #$ff			cmp 	#$FF 						; sound $FF play forever until turned off manually
.d7b5	b7b5	f0 2c		beq $b7e3			beq 	_SNDUCExit
.d7b7	b7b7	3a		dec a				dec 	a 							; decrement and update timer
.d7b8	b7b8	9d 8c 09	sta $098c,x			sta 	SNDTimeLeft,x
.d7bb	b7bb	f0 1d		beq $b7da			beq 	_SNDUCUpdate 				; if zero, silence channel
.d7bd	b7bd	bd 90 09	lda $0990,x			lda 	SNDAdjustLow,x 				; adjust ?
.d7c0	b7c0	1d 94 09	ora $0994,x			ora 	SNDAdjustHigh,x
.d7c3	b7c3	f0 1e		beq $b7e3			beq 	_SNDUCExit 					; if zero carry on at current tone.
.d7c5	b7c5	18		clc				clc 								; add adjust, forcing into a 10 bit range
.d7c6	b7c6	bd 80 09	lda $0980,x			lda 	SNDPitchLow,x
.d7c9	b7c9	7d 90 09	adc $0990,x			adc 	SNDAdjustLow,x
.d7cc	b7cc	9d 80 09	sta $0980,x			sta 	SNDPitchLow,x
.d7cf	b7cf	bd 84 09	lda $0984,x			lda 	SNDPitchHigh,x
.d7d2	b7d2	7d 94 09	adc $0994,x			adc 	SNDAdjustHigh,x
.d7d5	b7d5	29 03		and #$03			and 	#3
.d7d7	b7d7	9d 84 09	sta $0984,x			sta 	SNDPitchHigh,x
.d7da	b7da					_SNDUCUpdate:
.d7da	b7da	8a		txa				txa 								; which channel.
.d7db	b7db	48		pha				pha
.d7dc	b7dc	20 9f b6	jsr $b69f			jsr 	SNDUpdateNote 				; update the current note
.d7df	b7df	68		pla				pla
.d7e0	b7e0	20 60 b6	jsr $b660			jsr 	SNDCheckChannel 			; more to do ?
.d7e3	b7e3					_SNDUCExit:
.d7e3	b7e3	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ../modules/hardware/header/headerdata.dat

=14						Header_Height = 14
=255						Header_RLE = 255
.e000	a000					Header_jattrs:
>e000	a000	ff 05 21 05 0d ff 05 16			.byte	255,5,33,5,13,255,5,22,5,14,255,5,29,5,255,13,7,13,255,5,2,5,255,13,6,13,255,5,2,5,255,13,8,13,255,5,2,5,255,13,6,13,255,5,8,5,14,13,13,5,5,255,13,7,13,255,5,17,5,6,6,255,5,7,5,6,6,255,5,4,5,6,6,5,5,6,6,255,5,8,5,6,6,255,5,4,5,6,6,255,5,7,5,14,13,13,5,5,13,13,255,5,4,5,13,13,255,5,16,5,14,14,255,5,14,5,14,14,5,5,14,14,255,5,8,5,14,14,255,5,14,5,14,13,13,5,5,13,13,255,5,4,5,13,13,255,5,16,5,255,3,5,3,255,5,4,5,255,3,6,3,255,5,2,5,255,3,7,3,255,5,2,5,255,3,7,3,255,5,8,5,14,13,13,5,5,255,13,7,13,255,5,17,5,7,7,255,5,7,5,7,7,255,5,15,5,7,7,5,5,7,7,255,5,4,5,7,7,5,5,13,13,255,5,3,5,14,13,13,5,5,13,13,255,5,2,5,13,13,255,5,18,5,10,10,255,5,7,5,10,10,255,5,8,5,10,10,255,5,4,5,10,10,5,5,10,10,255,5,4,5,10,10,5,5,13,13,255,5,3,5,14,13,13,5,5,13,13,255,5,3,5,13,13,255,5,17,5,4,4,255,5,7,5,255,4,8,4,5,4,5,255,4,6,4,255,5,3,5,255,4,6,4,255,5,3,5,255,13,6,13,255,5,2,5,13,13,255,5,4,5,13,13,255,5,41,5,13,255,5,22,5,14,255,5,20,5,255,7,80,7,255,14,7,14,255,9,19,9,7,255,9,4,9,255,7,18,7,255,12,24,12,7,7,255,14,10,14,255,9,16,9,7,255,9,4,9,255,7,18,7,255,12,24,12,7,7,255,14,9,14,255,9,17,9,7,255,9,4,9,255,7,18,7,255,12,24,12,255,7,80,7,255,0
>e008	a008	05 0e ff 05 1d 05 ff 0d 07 0d ff 05 02 05 ff 0d
>e018	a018	06 0d ff 05 02 05 ff 0d 08 0d ff 05 02 05 ff 0d
>e028	a028	06 0d ff 05 08 05 0e 0d 0d 05 05 ff 0d 07 0d ff
>e038	a038	05 11 05 06 06 ff 05 07 05 06 06 ff 05 04 05 06
>e048	a048	06 05 05 06 06 ff 05 08 05 06 06 ff 05 04 05 06
>e058	a058	06 ff 05 07 05 0e 0d 0d 05 05 0d 0d ff 05 04 05
>e068	a068	0d 0d ff 05 10 05 0e 0e ff 05 0e 05 0e 0e 05 05
>e078	a078	0e 0e ff 05 08 05 0e 0e ff 05 0e 05 0e 0d 0d 05
>e088	a088	05 0d 0d ff 05 04 05 0d 0d ff 05 10 05 ff 03 05
>e098	a098	03 ff 05 04 05 ff 03 06 03 ff 05 02 05 ff 03 07
>e0a8	a0a8	03 ff 05 02 05 ff 03 07 03 ff 05 08 05 0e 0d 0d
>e0b8	a0b8	05 05 ff 0d 07 0d ff 05 11 05 07 07 ff 05 07 05
>e0c8	a0c8	07 07 ff 05 0f 05 07 07 05 05 07 07 ff 05 04 05
>e0d8	a0d8	07 07 05 05 0d 0d ff 05 03 05 0e 0d 0d 05 05 0d
>e0e8	a0e8	0d ff 05 02 05 0d 0d ff 05 12 05 0a 0a ff 05 07
>e0f8	a0f8	05 0a 0a ff 05 08 05 0a 0a ff 05 04 05 0a 0a 05
>e108	a108	05 0a 0a ff 05 04 05 0a 0a 05 05 0d 0d ff 05 03
>e118	a118	05 0e 0d 0d 05 05 0d 0d ff 05 03 05 0d 0d ff 05
>e128	a128	11 05 04 04 ff 05 07 05 ff 04 08 04 05 04 05 ff
>e138	a138	04 06 04 ff 05 03 05 ff 04 06 04 ff 05 03 05 ff
>e148	a148	0d 06 0d ff 05 02 05 0d 0d ff 05 04 05 0d 0d ff
>e158	a158	05 29 05 0d ff 05 16 05 0e ff 05 14 05 ff 07 50
>e168	a168	07 ff 0e 07 0e ff 09 13 09 07 ff 09 04 09 ff 07
>e178	a178	12 07 ff 0c 18 0c 07 07 ff 0e 0a 0e ff 09 10 09
>e188	a188	07 ff 09 04 09 ff 07 12 07 ff 0c 18 0c 07 07 ff
>e198	a198	0e 09 0e ff 09 11 09 07 ff 09 04 09 ff 07 12 07
>e1a8	a1a8	ff 0c 18 0c ff 07 50 07 ff 00
.e1b2	a1b2					Header_jchars:
>e1b2	a1b2	ff 20 58 20 ff 08 07 08			.byte	255,32,88,32,255,8,7,8,255,32,2,32,255,8,6,8,255,32,2,32,255,8,8,8,255,32,2,32,255,8,6,8,255,32,9,32,252,252,32,32,255,252,7,252,255,32,17,32,8,8,255,32,7,32,8,8,255,32,4,32,8,8,32,32,8,8,255,32,8,32,8,8,255,32,4,32,8,8,255,32,8,32,252,252,32,32,252,252,255,32,4,32,252,252,255,32,16,32,8,8,255,32,14,32,8,8,32,32,8,8,255,32,8,32,8,8,255,32,15,32,252,252,32,32,252,252,255,32,4,32,252,252,255,32,16,32,255,8,5,8,255,32,4,32,255,8,6,8,255,32,2,32,255,8,7,8,255,32,2,32,255,8,7,8,255,32,9,32,252,252,32,32,255,252,7,252,255,32,17,32,8,8,255,32,7,32,8,8,255,32,15,32,8,8,32,32,8,8,255,32,4,32,8,8,32,32,252,252,255,32,4,32,252,252,32,32,252,252,255,32,2,32,252,252,255,32,18,32,8,8,255,32,7,32,8,8,255,32,8,32,8,8,255,32,4,32,8,8,32,32,8,8,255,32,4,32,8,8,32,32,252,252,255,32,4,32,252,252,32,32,252,252,255,32,3,32,252,252,255,32,17,32,8,8,255,32,7,32,255,8,8,8,255,32,2,32,255,8,6,8,255,32,3,32,255,8,6,8,255,32,3,32,255,252,6,252,255,32,2,32,252,252,255,32,4,32,252,252,255,32,87,32,160,255,150,27,150,155,255,150,22,150,155,255,150,24,150,161,130,72,97,114,100,119,97,114,101,255,32,19,32,130,215,50,48,50,51,32,83,116,101,102,97,110,121,32,65,108,108,97,105,114,101,32,32,130,99,50,53,54,102,111,101,110,105,120,46,99,111,109,47,102,50,53,54,45,106,114,255,32,2,32,130,130,77,105,99,114,111,75,101,114,110,101,108,255,32,16,32,130,215,50,48,50,51,32,74,101,115,115,105,101,32,79,98,101,114,114,101,117,116,101,114,130,71,97,100,103,101,116,64,72,97,99,107,119,114,101,110,99,104,76,97,98,115,46,99,111,109,130,130,83,117,112,101,114,66,65,83,73,67,255,32,17,32,130,215,50,48,50,51,32,80,97,117,108,32,82,111,98,115,111,110,255,32,5,32,130,80,97,117,108,64,82,111,98,115,111,110,115,46,111,114,103,46,117,107,255,32,5,32,130,162,255,150,27,150,157,255,150,22,150,157,255,150,24,150,163,255,0
>e1ba	a1ba	ff 20 02 20 ff 08 06 08 ff 20 02 20 ff 08 08 08
>e1ca	a1ca	ff 20 02 20 ff 08 06 08 ff 20 09 20 fc fc 20 20
>e1da	a1da	ff fc 07 fc ff 20 11 20 08 08 ff 20 07 20 08 08
>e1ea	a1ea	ff 20 04 20 08 08 20 20 08 08 ff 20 08 20 08 08
>e1fa	a1fa	ff 20 04 20 08 08 ff 20 08 20 fc fc 20 20 fc fc
>e20a	a20a	ff 20 04 20 fc fc ff 20 10 20 08 08 ff 20 0e 20
>e21a	a21a	08 08 20 20 08 08 ff 20 08 20 08 08 ff 20 0f 20
>e22a	a22a	fc fc 20 20 fc fc ff 20 04 20 fc fc ff 20 10 20
>e23a	a23a	ff 08 05 08 ff 20 04 20 ff 08 06 08 ff 20 02 20
>e24a	a24a	ff 08 07 08 ff 20 02 20 ff 08 07 08 ff 20 09 20
>e25a	a25a	fc fc 20 20 ff fc 07 fc ff 20 11 20 08 08 ff 20
>e26a	a26a	07 20 08 08 ff 20 0f 20 08 08 20 20 08 08 ff 20
>e27a	a27a	04 20 08 08 20 20 fc fc ff 20 04 20 fc fc 20 20
>e28a	a28a	fc fc ff 20 02 20 fc fc ff 20 12 20 08 08 ff 20
>e29a	a29a	07 20 08 08 ff 20 08 20 08 08 ff 20 04 20 08 08
>e2aa	a2aa	20 20 08 08 ff 20 04 20 08 08 20 20 fc fc ff 20
>e2ba	a2ba	04 20 fc fc 20 20 fc fc ff 20 03 20 fc fc ff 20
>e2ca	a2ca	11 20 08 08 ff 20 07 20 ff 08 08 08 ff 20 02 20
>e2da	a2da	ff 08 06 08 ff 20 03 20 ff 08 06 08 ff 20 03 20
>e2ea	a2ea	ff fc 06 fc ff 20 02 20 fc fc ff 20 04 20 fc fc
>e2fa	a2fa	ff 20 57 20 a0 ff 96 1b 96 9b ff 96 16 96 9b ff
>e30a	a30a	96 18 96 a1 82 48 61 72 64 77 61 72 65 ff 20 13
>e31a	a31a	20 82 d7 32 30 32 33 20 53 74 65 66 61 6e 79 20
>e32a	a32a	41 6c 6c 61 69 72 65 20 20 82 63 32 35 36 66 6f
>e33a	a33a	65 6e 69 78 2e 63 6f 6d 2f 66 32 35 36 2d 6a 72
>e34a	a34a	ff 20 02 20 82 82 4d 69 63 72 6f 4b 65 72 6e 65
>e35a	a35a	6c ff 20 10 20 82 d7 32 30 32 33 20 4a 65 73 73
>e36a	a36a	69 65 20 4f 62 65 72 72 65 75 74 65 72 82 47 61
>e37a	a37a	64 67 65 74 40 48 61 63 6b 77 72 65 6e 63 68 4c
>e38a	a38a	61 62 73 2e 63 6f 6d 82 82 53 75 70 65 72 42 41
>e39a	a39a	53 49 43 ff 20 11 20 82 d7 32 30 32 33 20 50 61
>e3aa	a3aa	75 6c 20 52 6f 62 73 6f 6e ff 20 05 20 82 50 61
>e3ba	a3ba	75 6c 40 52 6f 62 73 6f 6e 73 2e 6f 72 67 2e 75
>e3ca	a3ca	6b ff 20 05 20 82 a2 ff 96 1b 96 9d ff 96 16 96
>e3da	a3da	9d ff 96 18 96 a3 ff 00
.e3e2	a3e2					Header_kattrs:
>e3e2	a3e2	07 ff 06 09 06 ff 07 38			.byte	7,255,6,9,6,255,7,56,7,255,6,8,6,255,7,3,7,255,6,9,6,255,7,3,7,255,13,7,13,255,7,2,7,255,13,6,13,255,7,2,7,255,13,8,13,255,7,2,7,255,13,6,13,255,7,2,7,13,13,255,7,3,7,13,13,7,7,255,6,8,6,255,7,3,7,255,6,9,6,255,7,3,7,6,6,255,7,7,7,6,6,255,7,4,7,6,6,7,7,6,6,255,7,8,7,6,6,255,7,4,7,6,6,7,7,13,13,255,7,2,7,13,13,255,7,2,7,255,6,8,6,255,7,3,7,255,6,9,6,255,7,3,7,14,14,255,7,14,7,14,14,7,7,14,14,255,7,8,7,14,14,255,7,8,7,13,13,7,7,13,13,255,7,3,7,255,6,8,6,255,7,3,7,255,6,9,6,255,7,3,7,255,3,5,3,255,7,4,7,255,3,6,3,255,7,2,7,255,3,7,3,255,7,2,7,255,3,7,3,255,7,2,7,255,13,4,13,255,7,4,7,255,6,8,6,255,7,3,7,255,6,9,6,255,7,46,7,13,13,7,7,13,13,255,7,3,7,255,6,8,6,255,7,3,7,255,6,9,6,255,7,3,7,10,10,255,7,7,7,10,10,255,7,8,7,10,10,255,7,4,7,10,10,7,7,10,10,255,7,4,7,10,10,7,7,13,13,255,7,2,7,13,13,255,7,2,7,255,6,8,6,255,7,3,7,255,6,9,6,255,7,3,7,4,4,255,7,7,7,255,4,8,4,255,7,2,7,255,4,6,4,255,7,3,7,255,4,6,4,255,7,2,7,13,13,255,7,3,7,13,13,7,7,255,6,8,6,255,7,2,7,255,0,79,0,255,7,80,7,255,14,7,14,255,9,19,9,7,255,9,4,9,255,7,18,7,255,12,24,12,7,7,255,14,10,14,255,9,16,9,7,255,9,4,9,255,7,18,7,255,12,24,12,7,7,255,14,9,14,255,9,17,9,7,255,9,4,9,255,7,18,7,255,12,24,12,255,7,80,7,255,0
>e3ea	a3ea	07 ff 06 08 06 ff 07 03 07 ff 06 09 06 ff 07 03
>e3fa	a3fa	07 ff 0d 07 0d ff 07 02 07 ff 0d 06 0d ff 07 02
>e40a	a40a	07 ff 0d 08 0d ff 07 02 07 ff 0d 06 0d ff 07 02
>e41a	a41a	07 0d 0d ff 07 03 07 0d 0d 07 07 ff 06 08 06 ff
>e42a	a42a	07 03 07 ff 06 09 06 ff 07 03 07 06 06 ff 07 07
>e43a	a43a	07 06 06 ff 07 04 07 06 06 07 07 06 06 ff 07 08
>e44a	a44a	07 06 06 ff 07 04 07 06 06 07 07 0d 0d ff 07 02
>e45a	a45a	07 0d 0d ff 07 02 07 ff 06 08 06 ff 07 03 07 ff
>e46a	a46a	06 09 06 ff 07 03 07 0e 0e ff 07 0e 07 0e 0e 07
>e47a	a47a	07 0e 0e ff 07 08 07 0e 0e ff 07 08 07 0d 0d 07
>e48a	a48a	07 0d 0d ff 07 03 07 ff 06 08 06 ff 07 03 07 ff
>e49a	a49a	06 09 06 ff 07 03 07 ff 03 05 03 ff 07 04 07 ff
>e4aa	a4aa	03 06 03 ff 07 02 07 ff 03 07 03 ff 07 02 07 ff
>e4ba	a4ba	03 07 03 ff 07 02 07 ff 0d 04 0d ff 07 04 07 ff
>e4ca	a4ca	06 08 06 ff 07 03 07 ff 06 09 06 ff 07 2e 07 0d
>e4da	a4da	0d 07 07 0d 0d ff 07 03 07 ff 06 08 06 ff 07 03
>e4ea	a4ea	07 ff 06 09 06 ff 07 03 07 0a 0a ff 07 07 07 0a
>e4fa	a4fa	0a ff 07 08 07 0a 0a ff 07 04 07 0a 0a 07 07 0a
>e50a	a50a	0a ff 07 04 07 0a 0a 07 07 0d 0d ff 07 02 07 0d
>e51a	a51a	0d ff 07 02 07 ff 06 08 06 ff 07 03 07 ff 06 09
>e52a	a52a	06 ff 07 03 07 04 04 ff 07 07 07 ff 04 08 04 ff
>e53a	a53a	07 02 07 ff 04 06 04 ff 07 03 07 ff 04 06 04 ff
>e54a	a54a	07 02 07 0d 0d ff 07 03 07 0d 0d 07 07 ff 06 08
>e55a	a55a	06 ff 07 02 07 ff 00 4f 00 ff 07 50 07 ff 0e 07
>e56a	a56a	0e ff 09 13 09 07 ff 09 04 09 ff 07 12 07 ff 0c
>e57a	a57a	18 0c 07 07 ff 0e 0a 0e ff 09 10 09 07 ff 09 04
>e58a	a58a	09 ff 07 12 07 ff 0c 18 0c 07 07 ff 0e 09 0e ff
>e59a	a59a	09 11 09 07 ff 09 04 09 ff 07 12 07 ff 0c 18 0c
>e5aa	a5aa	ff 07 50 07 ff 00
.e5b0	a5b0					Header_kchars:
>e5b0	a5b0	ff 20 5e 20 ff 08 07 08			.byte	255,32,94,32,255,8,7,8,255,32,2,32,255,8,6,8,255,32,2,32,255,8,8,8,255,32,2,32,255,8,6,8,255,32,2,32,180,180,255,32,3,32,180,180,255,32,28,32,8,8,255,32,7,32,8,8,255,32,4,32,8,8,32,32,8,8,255,32,8,32,8,8,255,32,4,32,8,8,32,32,180,180,255,32,2,32,180,180,255,32,29,32,8,8,255,32,14,32,8,8,32,32,8,8,255,32,8,32,8,8,255,32,8,32,180,180,32,32,180,180,255,32,30,32,255,8,5,8,255,32,4,32,255,8,6,8,255,32,2,32,255,8,7,8,255,32,2,32,255,8,7,8,255,32,2,32,255,180,4,180,255,32,31,32,8,8,255,32,7,32,8,8,255,32,15,32,8,8,32,32,8,8,255,32,4,32,8,8,32,32,180,180,32,32,180,180,255,32,30,32,8,8,255,32,7,32,8,8,255,32,8,32,8,8,255,32,4,32,8,8,32,32,8,8,255,32,4,32,8,8,32,32,180,180,255,32,2,32,180,180,255,32,29,32,8,8,255,32,7,32,255,8,8,8,255,32,2,32,255,8,6,8,255,32,3,32,255,8,6,8,255,32,2,32,180,180,255,32,3,32,180,180,255,32,93,32,188,255,150,27,150,155,255,150,22,150,155,255,150,24,150,189,130,72,97,114,100,119,97,114,101,255,32,19,32,130,215,50,48,50,51,32,83,116,101,102,97,110,121,32,65,108,108,97,105,114,101,32,32,130,99,50,53,54,102,111,101,110,105,120,46,99,111,109,47,102,50,53,54,45,106,114,255,32,2,32,130,130,77,105,99,114,111,75,101,114,110,101,108,255,32,16,32,130,215,50,48,50,51,32,74,101,115,115,105,101,32,79,98,101,114,114,101,117,116,101,114,130,71,97,100,103,101,116,64,72,97,99,107,119,114,101,110,99,104,76,97,98,115,46,99,111,109,130,130,83,117,112,101,114,66,65,83,73,67,255,32,17,32,130,215,50,48,50,51,32,80,97,117,108,32,82,111,98,115,111,110,255,32,5,32,130,80,97,117,108,64,82,111,98,115,111,110,115,46,111,114,103,46,117,107,255,32,5,32,130,190,255,150,27,150,157,255,150,22,150,157,255,150,24,150,191,255,0
>e5b8	a5b8	ff 20 02 20 ff 08 06 08 ff 20 02 20 ff 08 08 08
>e5c8	a5c8	ff 20 02 20 ff 08 06 08 ff 20 02 20 b4 b4 ff 20
>e5d8	a5d8	03 20 b4 b4 ff 20 1c 20 08 08 ff 20 07 20 08 08
>e5e8	a5e8	ff 20 04 20 08 08 20 20 08 08 ff 20 08 20 08 08
>e5f8	a5f8	ff 20 04 20 08 08 20 20 b4 b4 ff 20 02 20 b4 b4
>e608	a608	ff 20 1d 20 08 08 ff 20 0e 20 08 08 20 20 08 08
>e618	a618	ff 20 08 20 08 08 ff 20 08 20 b4 b4 20 20 b4 b4
>e628	a628	ff 20 1e 20 ff 08 05 08 ff 20 04 20 ff 08 06 08
>e638	a638	ff 20 02 20 ff 08 07 08 ff 20 02 20 ff 08 07 08
>e648	a648	ff 20 02 20 ff b4 04 b4 ff 20 1f 20 08 08 ff 20
>e658	a658	07 20 08 08 ff 20 0f 20 08 08 20 20 08 08 ff 20
>e668	a668	04 20 08 08 20 20 b4 b4 20 20 b4 b4 ff 20 1e 20
>e678	a678	08 08 ff 20 07 20 08 08 ff 20 08 20 08 08 ff 20
>e688	a688	04 20 08 08 20 20 08 08 ff 20 04 20 08 08 20 20
>e698	a698	b4 b4 ff 20 02 20 b4 b4 ff 20 1d 20 08 08 ff 20
>e6a8	a6a8	07 20 ff 08 08 08 ff 20 02 20 ff 08 06 08 ff 20
>e6b8	a6b8	03 20 ff 08 06 08 ff 20 02 20 b4 b4 ff 20 03 20
>e6c8	a6c8	b4 b4 ff 20 5d 20 bc ff 96 1b 96 9b ff 96 16 96
>e6d8	a6d8	9b ff 96 18 96 bd 82 48 61 72 64 77 61 72 65 ff
>e6e8	a6e8	20 13 20 82 d7 32 30 32 33 20 53 74 65 66 61 6e
>e6f8	a6f8	79 20 41 6c 6c 61 69 72 65 20 20 82 63 32 35 36
>e708	a708	66 6f 65 6e 69 78 2e 63 6f 6d 2f 66 32 35 36 2d
>e718	a718	6a 72 ff 20 02 20 82 82 4d 69 63 72 6f 4b 65 72
>e728	a728	6e 65 6c ff 20 10 20 82 d7 32 30 32 33 20 4a 65
>e738	a738	73 73 69 65 20 4f 62 65 72 72 65 75 74 65 72 82
>e748	a748	47 61 64 67 65 74 40 48 61 63 6b 77 72 65 6e 63
>e758	a758	68 4c 61 62 73 2e 63 6f 6d 82 82 53 75 70 65 72
>e768	a768	42 41 53 49 43 ff 20 11 20 82 d7 32 30 32 33 20
>e778	a778	50 61 75 6c 20 52 6f 62 73 6f 6e ff 20 05 20 82
>e788	a788	50 61 75 6c 40 52 6f 62 73 6f 6e 73 2e 6f 72 67
>e798	a798	2e 75 6b ff 20 05 20 82 be ff 96 1b 96 9d ff 96
>e7a8	a7a8	16 96 9d ff 96 18 96 bf ff 00
.e7b2	a7b2					Header_Palette:
>e7b2	a7b2	00 00 00 00				.dword $000000
>e7b6	a7b6	66 66 66 00				.dword $666666
>e7ba	a7ba	aa 00 00 00				.dword $0000aa
>e7be	a7be	00 aa 00 00				.dword $00aa00
>e7c2	a7c2	ea 41 c0 00				.dword $c041ea
>e7c6	a7c6	00 48 87 00				.dword $874800
>e7ca	a7ca	00 9c ff 00				.dword $ff9c00
>e7ce	a7ce	ff db 57 00				.dword $57dbff
>e7d2	a7d2	28 3f 3f 00				.dword $3f3f28
>e7d6	a7d6	8a aa aa 00				.dword $aaaa8a
>e7da	a7da	ff 55 55 00				.dword $5555ff
>e7de	a7de	55 ff 55 00				.dword $55ff55
>e7e2	a7e2	ed 8d ff 00				.dword $ff8ded
>e7e6	a7e6	00 00 ff 00				.dword $ff0000
>e7ea	a7ea	55 ff ff 00				.dword $ffff55
>e7ee	a7ee	ff ff ff 00				.dword $ffffff
>e7f2	a7f2	ff ff ff 00				.dword $ffffff
>e7f6	a7f6	ff ff ff 00				.dword $ffffff

;******  Return to file: _basic.asm


;******  End of listing
