
; 64tass Turbo Assembler Macro V1.56.2625 listing file
; 64tass -q -b -Wall -Wno-portable -c -L output/basic.lst -l output/basic.lbl -Wall -o basic.rom _basic.asm
; Thu Sep 29 18:40:39 2022

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: _basic.asm


;******  Processing file: ./aa_system/01common.inc

=$30					ZeroPageMandatory = $30
=$600					ZeroPagePreference = $600
=$700					MemoryStorage = $700
=$2000					BasicStart = $2000
=$8000					CodeStart = $8000
=$1000					VariableSpace = $1000
=$2000					EndVariableSpace = $2000
=8					MathStackSize = 8
=512					BasicStackSize = 512
=80					MaxLineSize = 80

;******  Return to file: _basic.asm


;******  Processing file: ./aa_system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./aa_system/04data.inc

.0030					codePtr:
>0030							.fill 	4
.0034					basicStack:
>0034							.fill 	2
.0036					zTemp0:
>0036							.fill 	2
.0038					zTemp1:
>0038							.fill 	2
.003a					zTemp2:
>003a							.fill 	2
.003c					zsTemp:
>003c							.fill 	2
=$80					NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20					NSBIsReference = $20 						; bit 5 : is a reference
=$10					NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18					NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03					NSBRefMask = $03 							; bits 0,1 : Bytes of reference, -1 (e.g. 00 = 1 byte, 11 = 4 bytes)
=$00					NSTInteger = $00 							; base types for bits 3..4
=$08					NSTFloat = $08
=$10					NSTString = $10
=$18					NSTProcedure = $18
.0600					NSStatus:
>0600							.fill 	MathStackSize
.0608					NSMantissa0:
>0608							.fill 	MathStackSize 				; (this is my integer mantissa system)
.0610					NSMantissa1:
>0610							.fill 	MathStackSize
.0618					NSMantissa2:
>0618							.fill 	MathStackSize
.0620					NSMantissa3:
>0620							.fill 	MathStackSize
.0628					NSExponent:
>0628							.fill 	MathStackSize
.0700					identStart:
>0700							.fill 	1
.0701					identTypeStart:
>0701							.fill 	1
.0702					identTypeEnd:
>0702							.fill 	1
.0703					identHash:
>0703							.fill 	1
.0704					identTypeByte:
>0704							.fill 	1	 						; (see tokenising.pdf)
.0705					encodeState:
>0705							.fill 	1
.0706					digitTemp:
>0706							.fill 	1
.0707					decimalCount:
>0707							.fill 	1
.0708					randomSeed:
>0708							.fill 	4
.070c					lowMemPtr:
>070c							.fill 	2
.070e					stringMemory:
>070e							.fill 	2
.0710					stringInitialised:
>0710							.fill 	1
.0711					stringTempPointer:
>0711							.fill 	2
.0713					tokenOffset:
>0713							.fill 	1
.0714					tokenLineNumber:
>0714							.fill 	2
.0716					tokenBuffer:
>0716							.fill 	253
.0813					lineBuffer:
>0813							.fill 	MaxLineSize+1
.0864					numberBuffer:
>0864							.fill 	34

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/binary/handlers.inc


;******  Return to file: _basic.asm


;******  Processing file: ./generated/errors.inc

=1					ERRID_BREAK = 1
=2					ERRID_SYNTAX = 2
=3					ERRID_DIVZERO = 3
=4					ERRID_RANGE = 4
=5					ERRID_TYPE = 5
=6					ERRID_MEMORY = 6
=7					ERRID_ARGUMENT = 7
=8					ERRID_STOP = 8
=9					ERRID_STRING = 9
=10					ERRID_ASSERT = 10
=11					ERRID_DATA = 11
=12					ERRID_NOTDONE = 12

;******  Return to file: _basic.asm


;******  Processing file: ./generated/kwdconst.inc

=$00					KWD_LESSLESS                         = $00; $00 <<
=$01					KWD_LESSEQUAL                        = $01; $01 <=
=$02					KWD_LESSGREATER                      = $02; $02 <>
=$03					KWD_PLINGPLING3                      = $03; $03 !!3
=$04					KWD_GREATERLESS                      = $04; $04 ><
=$05					KWD_GREATEREQUAL                     = $05; $05 >=
=$06					KWD_GREATERGREATER                   = $06; $06 >>
=$07					KWD_PLINGPLING7                      = $07; $07 !!7
=$08					KWD_PLINGPLING8                      = $08; $08 !!8
=$09					KWD_PLINGPLING9                      = $09; $09 !!9
=$0a					KWD_PLINGPLING10                     = $0a; $0a !!10
=$0b					KWD_PLINGPLING11                     = $0b; $0b !!11
=$0c					KWD_PLINGPLING12                     = $0c; $0c !!12
=$0d					KWD_PLINGPLING13                     = $0d; $0d !!13
=$0e					KWD_PLINGPLING14                     = $0e; $0e !!14
=$0f					KWD_PLINGPLING15                     = $0f; $0f !!15
=$10					KWD_AT                               = $10; $10 @
=$11					KWD_PLINGPLING17                     = $11; $11 !!17
=$12					KWD_PLINGPLING18                     = $12; $12 !!18
=$13					KWD_LSQPAREN                         = $13; $13 [
=$14					KWD_BACKSLASH                        = $14; $14 \
=$15					KWD_RSQPAREN                         = $15; $15 ]
=$16					KWD_HAT                              = $16; $16 ^
=$17					KWD_UNDERSCORE                       = $17; $17 _
=$18					KWD_BQUOTE                           = $18; $18 `
=$19					KWD_PLINGPLING25                     = $19; $19 !!25
=$1a					KWD_PLINGPLING26                     = $1a; $1a !!26
=$1b					KWD_LCURLY                           = $1b; $1b {
=$1c					KWD_BAR                              = $1c; $1c |
=$1d					KWD_RCURLY                           = $1d; $1d }
=$1e					KWD_TILDE                            = $1e; $1e ~
=$21					KWD_PLING                            = $21; $21 !
=$22					KWD_DQUOTE                           = $22; $22 "
=$23					KWD_HASH                             = $23; $23 #
=$24					KWD_DOLLAR                           = $24; $24 $
=$25					KWD_PERCENT                          = $25; $25 %
=$26					KWD_AMPERSAND                        = $26; $26 &
=$27					KWD_QUOTE                            = $27; $27 '
=$28					KWD_LPAREN                           = $28; $28 (
=$29					KWD_RPAREN                           = $29; $29 )
=$2a					KWD_STAR                             = $2a; $2a *
=$2b					KWD_PLUS                             = $2b; $2b +
=$2c					KWD_COMMA                            = $2c; $2c ,
=$2d					KWD_MINUS                            = $2d; $2d -
=$2e					KWD_PERIOD                           = $2e; $2e .
=$2f					KWD_SLASH                            = $2f; $2f /
=$30					KWD_0                                = $30; $30 0
=$31					KWD_1                                = $31; $31 1
=$32					KWD_2                                = $32; $32 2
=$33					KWD_3                                = $33; $33 3
=$34					KWD_4                                = $34; $34 4
=$35					KWD_5                                = $35; $35 5
=$36					KWD_6                                = $36; $36 6
=$37					KWD_7                                = $37; $37 7
=$38					KWD_8                                = $38; $38 8
=$39					KWD_9                                = $39; $39 9
=$3a					KWD_COLON                            = $3a; $3a :
=$3b					KWD_SEMICOLON                        = $3b; $3b ;
=$3c					KWD_LESS                             = $3c; $3c <
=$3d					KWD_EQUAL                            = $3d; $3d =
=$3e					KWD_GREATER                          = $3e; $3e >
=$3f					KWD_QMARK                            = $3f; $3f ?
=$83					KWD_ABSLPAREN                        = $83; $83 ABS(
=$84					KWD_ALLOCLPAREN                      = $84; $84 ALLOC(
=$85					KWD_ASCLPAREN                        = $85; $85 ASC(
=$86					KWD_CHRDOLLARLPAREN                  = $86; $86 CHR$(
=$87					KWD_FALSE                            = $87; $87 FALSE
=$88					KWD_FRACLPAREN                       = $88; $88 FRAC(
=$89					KWD_INTLPAREN                        = $89; $89 INT(
=$8a					KWD_ISVALLPAREN                      = $8a; $8a ISVAL(
=$8b					KWD_LEFTDOLLARLPAREN                 = $8b; $8b LEFT$(
=$8c					KWD_LENLPAREN                        = $8c; $8c LEN(
=$8d					KWD_MIDDOLLARLPAREN                  = $8d; $8d MID$(
=$8e					KWD_NOTLPAREN                        = $8e; $8e NOT(
=$8f					KWD_RIGHTDOLLARLPAREN                = $8f; $8f RIGHT$(
=$90					KWD_RNDLPAREN                        = $90; $90 RND(
=$91					KWD_SGNLPAREN                        = $91; $91 SGN(
=$92					KWD_SPCLPAREN                        = $92; $92 SPC(
=$93					KWD_STRDOLLARLPAREN                  = $93; $93 STR$(
=$94					KWD_TRUE                             = $94; $94 TRUE
=$95					KWD_VALLPAREN                        = $95; $95 VAL(
=$96					KWD_FOR                              = $96; $96 FOR
=$97					KWD_IF                               = $97; $97 IF
=$98					KWD_PROC                             = $98; $98 PROC
=$99					KWD_REPEAT                           = $99; $99 REPEAT
=$9a					KWD_WHILE                            = $9a; $9a WHILE
=$9b					KWD_ENDIF                            = $9b; $9b ENDIF
=$9c					KWD_ENDPROC                          = $9c; $9c ENDPROC
=$9d					KWD_NEXT                             = $9d; $9d NEXT
=$9e					KWD_UNTIL                            = $9e; $9e UNTIL
=$9f					KWD_WEND                             = $9f; $9f WEND
=$a0					KWD_CALL                             = $a0; $a0 CALL
=$a1					KWD_CLS                              = $a1; $a1 CLS
=$a2					KWD_DATA                             = $a2; $a2 DATA
=$a3					KWD_DIM                              = $a3; $a3 DIM
=$a4					KWD_GOSUB                            = $a4; $a4 GOSUB
=$a5					KWD_GOTO                             = $a5; $a5 GOTO
=$a6					KWD_LET                              = $a6; $a6 LET
=$a7					KWD_PRINT                            = $a7; $a7 PRINT
=$a8					KWD_READ                             = $a8; $a8 READ
=$a9					KWD_REM                              = $a9; $a9 REM
=$aa					KWD_RETURN                           = $aa; $aa RETURN
=$ab					KWD_THEN                             = $ab; $ab THEN
=$ac					KWD_TO                               = $ac; $ac TO

;******  Return to file: _basic.asm


;******  Processing file: ./generated/kwdconst0.inc

=$80					KWC_EOL = $80
=$ff					KWC_STRING = $FF
=$fe					KWC_HEXCONST = $FE
=$96					KWC_FIRST_STRUCTURE = $96
=$9b					KWC_FIRST_STRUCTURE_DEC = $9b
=$9f					KWC_LAST_STRUCTURE = $9f
=$83					KWC_FIRST_UNARY = $83
=$95					KWC_LAST_UNARY = $95

;******  Return to file: _basic.asm


;******  Processing file: ./memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./aa_system/00start.asm

.8000	a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.8002	9a		txs				txs
.8003	20 5e 81	jsr $815e			jsr 	NewCommand 					; erase current program
.8006	20 61 89	jsr $8961			jsr 	BackloadProgram
.8009	4c 75 81	jmp $8175			jmp 	CommandRun
.800c					WarmStart:
.800c	a9 57		lda #$57			lda 	#"W"
.800e	20 ea 93	jsr $93ea			jsr 	EXTPrintCharacter
.8011	80 fe		bra $8011	halt:	bra 	halt
>8013							.align 2

;******  Processing file: ./aa_system/../generated/vectors.dat

.8014					VectorSetPunc:
>8014	60 82					.word	ShiftLeft                        ; $00 <<
>8016	1f 8e					.word	BinaryCompareLessEqual           ; $01 <=
>8018	15 8e					.word	BinaryCompareNotEqual            ; $02 <>
>801a	2d 93					.word	SyntaxError                      ; $03 !!3
>801c	2d 93					.word	SyntaxError                      ; $04 ><
>801e	29 8e					.word	BinaryCompareGreaterEqual        ; $05 >=
>8020	63 82					.word	ShiftRight                       ; $06 >>
>8022	2d 93					.word	SyntaxError                      ; $07 !!7
>8024	2d 93					.word	SyntaxError                      ; $08 !!8
>8026	2d 93					.word	SyntaxError                      ; $09 !!9
>8028	2d 93					.word	SyntaxError                      ; $0a !!10
>802a	2d 93					.word	SyntaxError                      ; $0b !!11
>802c	2d 93					.word	SyntaxError                      ; $0c !!12
>802e	2d 93					.word	SyntaxError                      ; $0d !!13
>8030	2d 93					.word	SyntaxError                      ; $0e !!14
>8032	2d 93					.word	SyntaxError                      ; $0f !!15
>8034	2d 93					.word	SyntaxError                      ; $10 @
>8036	2d 93					.word	SyntaxError                      ; $11 !!17
>8038	2d 93					.word	SyntaxError                      ; $12 !!18
>803a	2d 93					.word	SyntaxError                      ; $13 [
>803c	8f 8e					.word	IntegerDivide                    ; $14 \
>803e	2d 93					.word	SyntaxError                      ; $15 ]
>8040	e6 83					.word	EorInteger                       ; $16 ^
>8042	2d 93					.word	SyntaxError                      ; $17 _
>8044	2d 93					.word	SyntaxError                      ; $18 `
>8046	2d 93					.word	SyntaxError                      ; $19 !!25
>8048	2d 93					.word	SyntaxError                      ; $1a !!26
>804a	2d 93					.word	SyntaxError                      ; $1b {
>804c	a1 83					.word	OraInteger                       ; $1c |
>804e	2d 93					.word	SyntaxError                      ; $1d }
>8050	2d 93					.word	SyntaxError                      ; $1e ~
>8052	2d 93					.word	SyntaxError                      ; $1f [7m<7F>[m
>8054	2d 93					.word	SyntaxError                      ; $20
>8056	2d 93					.word	SyntaxError                      ; $21 !
>8058	2d 93					.word	SyntaxError                      ; $22 "
>805a	2d 93					.word	SyntaxError                      ; $23 #
>805c	2d 93					.word	SyntaxError                      ; $24 $
>805e	db 8e					.word	IntegerModulus                   ; $25 %
>8060	5c 83					.word	AndInteger                       ; $26 &
>8062	2d 93					.word	SyntaxError                      ; $27 '
>8064	2d 93					.word	SyntaxError                      ; $28 (
>8066	2d 93					.word	SyntaxError                      ; $29 )
>8068	4f 8f					.word	MulInteger                       ; $2a *
>806a	f6 82					.word	AddInteger                       ; $2b +
>806c	2d 93					.word	SyntaxError                      ; $2c ,
>806e	31 83					.word	SubInteger                       ; $2d -
>8070	2d 93					.word	SyntaxError                      ; $2e .
>8072	e6 90					.word	FDivideCommand                   ; $2f /
>8074	2d 93					.word	SyntaxError                      ; $30 0
>8076	2d 93					.word	SyntaxError                      ; $31 1
>8078	2d 93					.word	SyntaxError                      ; $32 2
>807a	2d 93					.word	SyntaxError                      ; $33 3
>807c	2d 93					.word	SyntaxError                      ; $34 4
>807e	2d 93					.word	SyntaxError                      ; $35 5
>8080	2d 93					.word	SyntaxError                      ; $36 6
>8082	2d 93					.word	SyntaxError                      ; $37 7
>8084	2d 93					.word	SyntaxError                      ; $38 8
>8086	2d 93					.word	SyntaxError                      ; $39 9
>8088	2d 93					.word	SyntaxError                      ; $3a :
>808a	2d 93					.word	SyntaxError                      ; $3b ;
>808c	01 8e					.word	BinaryCompareLess                ; $3c <
>808e	f7 8d					.word	BinaryCompareEqual               ; $3d =
>8090	0b 8e					.word	BinaryCompareGreater             ; $3e >
>8092	2d 93					.word	SyntaxError                      ; $3f ?
.8094					VectorSet0:
>8094	af 81					.word	EOLCommand                       ; $80 !0:EOF
>8096	bc 81					.word	Shift1Command                    ; $81 !1:SH1
>8098	2d 93					.word	SyntaxError                      ; $82 !2:SH2
>809a	2c 92					.word	AbsUnary                         ; $83 ABS(
>809c	52 87					.word	AllocUnary                       ; $84 ALLOC(
>809e	3c 92					.word	AscUnary                         ; $85 ASC(
>80a0	ef 87					.word	ChrUnary                         ; $86 CHR$(
>80a2	f3 8d					.word	UnaryFalse                       ; $87 FALSE
>80a4	49 92					.word	FracUnary                        ; $88 FRAC(
>80a6	5f 92					.word	IntUnary                         ; $89 INT(
>80a8	b5 92					.word	IsValUnary                       ; $8a ISVAL(
>80aa	2d 93					.word	SyntaxError                      ; $8b LEFT$(
>80ac	71 92					.word	LenUnary                         ; $8c LEN(
>80ae	2d 93					.word	SyntaxError                      ; $8d MID$(
>80b0	8c 87					.word	Unary_Not                        ; $8e NOT(
>80b2	2d 93					.word	SyntaxError                      ; $8f RIGHT$(
>80b4	a2 87					.word	Unary_Rnd                        ; $90 RND(
>80b6	8b 92					.word	SgnUnary                         ; $91 SGN(
>80b8	01 88					.word	SpcUnary                         ; $92 SPC(
>80ba	2d 93					.word	SyntaxError                      ; $93 STR$(
>80bc	e7 8d					.word	UnaryTrue                        ; $94 TRUE
>80be	ab 92					.word	ValUnary                         ; $95 VAL(
>80c0	2d 93					.word	SyntaxError                      ; $96 FOR
>80c2	2d 93					.word	SyntaxError                      ; $97 IF
>80c4	2d 93					.word	SyntaxError                      ; $98 PROC
>80c6	2d 93					.word	SyntaxError                      ; $99 REPEAT
>80c8	2d 93					.word	SyntaxError                      ; $9a WHILE
>80ca	2d 93					.word	SyntaxError                      ; $9b ENDIF
>80cc	2d 93					.word	SyntaxError                      ; $9c ENDPROC
>80ce	2d 93					.word	SyntaxError                      ; $9d NEXT
>80d0	2d 93					.word	SyntaxError                      ; $9e UNTIL
>80d2	2d 93					.word	SyntaxError                      ; $9f WEND
>80d4	18 81					.word	CallCommand                      ; $a0 CALL
>80d6	2d 93					.word	SyntaxError                      ; $a1 CLS
>80d8	2d 93					.word	SyntaxError                      ; $a2 DATA
>80da	2d 93					.word	SyntaxError                      ; $a3 DIM
>80dc	2d 93					.word	SyntaxError                      ; $a4 GOSUB
>80de	2d 93					.word	SyntaxError                      ; $a5 GOTO
>80e0	2d 93					.word	SyntaxError                      ; $a6 LET
>80e2	2d 93					.word	SyntaxError                      ; $a7 PRINT
>80e4	2d 93					.word	SyntaxError                      ; $a8 READ
>80e6	68 81					.word	RemCommand                       ; $a9 REM
>80e8	2d 93					.word	SyntaxError                      ; $aa RETURN
>80ea	2d 93					.word	SyntaxError                      ; $ab THEN
>80ec	2d 93					.word	SyntaxError                      ; $ac TO
.80ee					VectorSet1:
>80ee	2d 93					.word	SyntaxError                      ; $80 !0:EOF
>80f0	2d 93					.word	SyntaxError                      ; $81 !1:SH1
>80f2	2d 93					.word	SyntaxError                      ; $82 !2:SH2
>80f4	0a 81					.word	AssertCommand                    ; $83 ASSERT
>80f6	24 81					.word	ClearCommand                     ; $84 CLEAR
>80f8	5b 81					.word	EndCommand                       ; $85 END
>80fa	2d 93					.word	SyntaxError                      ; $86 LIST
>80fc	5e 81					.word	NewCommand                       ; $87 NEW
>80fe	2d 93					.word	SyntaxError                      ; $88 RESTORE
>8100	75 81					.word	CommandRUN                       ; $89 RUN
>8102	2d 93					.word	SyntaxError                      ; $8a STOP
.8104					VectorSet2:
>8104	2d 93					.word	SyntaxError                      ; $80 !0:EOF
>8106	2d 93					.word	SyntaxError                      ; $81 !1:SH1
>8108	2d 93					.word	SyntaxError                      ; $82 !2:SH2

;******  Return to file: ./aa_system/00start.asm


;******  Return to file: _basic.asm


;******  Processing file: ./commands/assert.asm

.810a					AssertCommand:
.810a	20 48 88	jsr $8848			jsr 	EvaluateInteger 			; the assert test
.810d	20 01 89	jsr $8901			jsr 	NSMIsZero 					; exit if result is non zero.
.8110	d0 05		bne $8117			bne 	_ACExit
.8112	a9 0a		lda #$0a		lda	#10
.8114	4c c4 81	jmp $81c4		jmp	ErrorHandler
.8117					_ACExit:
.8117	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./commands/call.asm

.8118					CallCommand:
.8118	20 5d 88	jsr $885d			jsr 	Evaluate16BitInteger
.811b	ad 10 06	lda $0610			lda 	NSMantissa1
.811e	8d 09 06	sta $0609			sta 	NSMantissa0+1
.8121	6c 08 06	jmp ($0608)			jmp 	(NSMantissa0)

;******  Return to file: _basic.asm


;******  Processing file: ./commands/clear.asm

.8124					ClearCommand:
.8124	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.8126	85 36		sta $36				sta 	0+zTemp0
.8128	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.812a	85 37		sta $37				sta 	1+zTemp0
.812c					_ClearZeroLoop:
.812c	b2 36		lda ($36)			lda 	(zTemp0) 					; end of variables
.812e	f0 18		beq $8148			beq 	_ClearZeroEnd
.8130	a0 03		ldy #$03			ldy 	#3 							; erase the variables
.8132	a9 00		lda #$00			lda 	#0
.8134					_ClearOneVariable:
.8134	91 36		sta ($36),y			sta 	(zTemp0),y
.8136	c8		iny				iny
.8137	c0 08		cpy #$08			cpy 	#8
.8139	d0 f9		bne $8134			bne 	_ClearOneVariable
.813b	18		clc				clc 								; go to the next variable
.813c	b2 36		lda ($36)			lda 	(zTemp0)
.813e	65 36		adc $36				adc 	zTemp0
.8140	85 36		sta $36				sta 	zTemp0
.8142	90 e8		bcc $812c			bcc 	_ClearZeroLoop
.8144	e6 37		inc $37				inc 	zTemp0+1
.8146	80 e4		bra $812c			bra 	_ClearZeroLoop
.8148					_ClearZeroEnd:
.8148	18		clc				clc
.8149	a5 36		lda $36				lda 	zTemp0
.814b	69 01		adc #$01			adc 	#1
.814d	8d 0c 07	sta $070c			sta 	lowMemPtr
.8150	a5 37		lda $37				lda 	zTemp0+1
.8152	69 00		adc #$00			adc 	#0
.8154	8d 0d 07	sta $070d			sta 	lowMemPtr+1
.8157	20 2e 94	jsr $942e			jsr 	StringSystemInitialise
.815a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./commands/end.asm

.815b					EndCommand:
.815b	4c 0c 80	jmp $800c			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./commands/new.asm

.815e					NewCommand:
.815e	20 0e 89	jsr $890e			jsr 	MemoryNew
.8161	9c 00 10	stz $1000			stz 	VariableSpace 				; erase all variables.
.8164	20 24 81	jsr $8124			jsr 	ClearCommand 				; clear everything.
.8167	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./commands/rem.asm

.8168					RemCommand:
.8168	b1 30		lda ($30),y			lda 	(codePtr),y
.816a	c9 ff		cmp #$ff			cmp 	#KWC_STRING
.816c	d0 06		bne $8174			bne 	_RMExit
.816e	c8		iny				iny
.816f	98		tya				tya
.8170	38		sec				sec
.8171	71 30		adc ($30),y			adc 	(codePtr),y
.8173	a8		tay				tay
.8174					_RMExit:
.8174	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./commands/run.asm

.8175					CommandRUN:
.8175	20 24 81	jsr $8124			jsr 	ClearCommand 				; clear variable/stacks/etc.
.8178	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.817a	85 30		sta $30				sta 	codePtr
.817c	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.817e	85 31		sta $31				sta 	codePtr+1
.8180					RUNNewLine:
.8180	b2 30		lda ($30)			lda 	(codePtr)
.8182	f0 28		beq $81ac			beq 	CRNoProgram         		; no then END.
.8184	a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack
.8186	9a		txs				txs
.8187					RUNCodePointerLine:
.8187	a0 02		ldy #$02			ldy 	#2 							; start of program
.8189					_CRIncMainLoop:
.8189	c8		iny				iny
.818a					_CRMainLoop:
.818a	9c 10 07	stz $0710			stz 	stringInitialised 			; clear the temporary string initialised flag.
.818d	b1 30		lda ($30),y			lda 	(codePtr),y
.818f	10 10		bpl $81a1			bpl 	_CRNotKeyword
.8191	c9 96		cmp #$96			cmp 	#KWC_LAST_UNARY+1 			; if after unary, legitimate command
.8193	b0 04		bcs $8199			bcs 	_CRIsKeyword
.8195	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if unary, syntax error.
.8197	b0 0d		bcs $81a6			bcs		_CRSyntaxError
.8199					_CRIsKeyword:
.8199	c8		iny				iny 								; consume command
.819a	0a		asl a				asl 	a 							; double losing the MSB which is '1' as tokens are $80-$FF
.819b	aa		tax				tax 								; put in X for vector jump
.819c	20 a9 81	jsr $81a9			jsr 	_CRCallVector0 				; call the vector - effectively jsr (vectortable,X)
.819f	80 e9		bra $818a			bra 	_CRMainLoop 				; and loop round
.81a1					_CRNotKeyword:
.81a1	c9 3a		cmp #$3a			cmp 	#KWD_COLON 					; if a :, consume it and go round.
.81a3	f0 e4		beq $8189			beq 	_CRIncMainLoop
>81a5	db						.byte 	$DB 						; causes a break in the emulator
.81a6					_CRSyntaxError:
.81a6	4c 2d 93	jmp $932d			jmp 	SyntaxError
.81a9					_CRCallVector0:
.81a9	7c 94 80	jmp ($8094,x)			jmp 	(VectorSet0,x)
.81ac					CRNoProgram:
.81ac	4c 5b 81	jmp $815b			jmp 	EndCommand
.81af					EOLCommand:
.81af	18		clc				clc
.81b0	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.81b2	65 30		adc $30				adc 	codePtr
.81b4	85 30		sta $30				sta 	codePtr
.81b6	90 02		bcc $81ba			bcc 	_CREExit
.81b8	e6 31		inc $31				inc 	codePtr+1
.81ba					_CREExit:
.81ba	80 c4		bra $8180			bra 	RunNewLine
.81bc					Shift1Command:
.81bc	b1 30		lda ($30),y			lda 	(codePtr),y
.81be	c8		iny				iny
.81bf	0a		asl a				asl 	a
.81c0	aa		tax				tax
.81c1	7c ee 80	jmp ($80ee,x)			jmp 	(VectorSet1,x)

;******  Return to file: _basic.asm


;******  Processing file: ./errors/charcheck.asm

.8dce					CheckRightBracket:
.8dce	b1 30		lda ($30),y			lda 	(codePtr),y
.8dd0	c8		iny				iny
.8dd1	c9 29		cmp #$29			cmp 	#KWD_RPAREN 						; exit if matches
.8dd3	d0 0f		bne $8de4			bne 	CNAFail
.8dd5	60		rts				rts
.8dd6					CheckComma:
.8dd6	b1 30		lda ($30),y			lda 	(codePtr),y
.8dd8	c8		iny				iny
.8dd9	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 						; exit if matches
.8ddb	d0 07		bne $8de4			bne 	CNAFail
.8ddd	60		rts				rts
.8dde					CheckNextA:
.8dde	d1 30		cmp ($30),y			cmp 	(codePtr),y
.8de0	d0 02		bne $8de4			bne 	CNAFail
.8de2	c8		iny				iny 								; skip character
.8de3	60		rts				rts 								; and exit
.8de4					CNAFail:
.8de4	4c 2d 93	jmp $932d			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./errors/errors.asm

.81c4					ErrorHandler:
.81c4	a8		tay				tay 								; find the error text
.81c5	f0 42		beq $8209			beq 	_EHEnd
.81c7	a2 00		ldx #$00			ldx 	#0
.81c9					_EHFind:
.81c9	88		dey				dey 								; found the error text ?
.81ca	f0 0a		beq $81d6			beq 	_EHFound
.81cc					_EHFindZero:
.81cc	bd 46 93	lda $9346,x			lda 	ErrorText,x 				; find the next error
.81cf	e8		inx				inx
.81d0	c9 00		cmp #$00			cmp 	#0
.81d2	d0 f8		bne $81cc			bne 	_EHFindZero
.81d4	80 f3		bra $81c9			bra 	_EHFind
.81d6					_EHFound:
.81d6	bd 46 93	lda $9346,x			lda 	ErrorText,x 				; print the message
.81d9	20 ea 93	jsr $93ea			jsr 	EXTPrintCharacter
.81dc	e8		inx				inx
.81dd	bd 46 93	lda $9346,x			lda 	ErrorText,x
.81e0	d0 f4		bne $81d6			bne 	_EHFound
.81e2	a0 01		ldy #$01			ldy 	#1 							; if line number zero don't print i
.81e4	b1 30		lda ($30),y			lda 	(codePtr),y
.81e6	d0 05		bne $81ed			bne 	_EHAtMsg
.81e8	c8		iny				iny
.81e9	b1 30		lda ($30),y			lda 	(codePtr),y
.81eb	f0 17		beq $8204			beq 	_EHCREnd
.81ed					_EHAtMsg:
.81ed	a2 82		ldx #$82			ldx 	#_AtMsg >> 8 				; print " at "
.81ef	a9 0c		lda #$0c			lda 	#_AtMsg & $FF
.81f1	20 16 82	jsr $8216			jsr 	PrintStringXA
.81f4	a0 01		ldy #$01			ldy 	#1 							; line number into XA
.81f6	b1 30		lda ($30),y			lda 	(codePtr),y
.81f8	48		pha				pha
.81f9	c8		iny				iny
.81fa	b1 30		lda ($30),y			lda 	(codePtr),y
.81fc	aa		tax				tax
.81fd	68		pla				pla
.81fe	20 d0 8f	jsr $8fd0			jsr 	ConvertInt16 				; convert XA to string
.8201	20 16 82	jsr $8216			jsr 	PrintStringXA 				; and print it.
.8204					_EHCREnd:
.8204	a9 0d		lda #$0d			lda 	#13 						; new line
.8206	20 ea 93	jsr $93ea			jsr 	EXTPrintCharacter
.8209					_EHEnd:
.8209	4c 0c 80	jmp $800c			jmp 	WarmStart
>820c	20 61 74 20 6c 69 6e 65		_AtMsg:	.text 	" at line ",0
>8214	20 00
.8216					PrintStringXA:
.8216	86 37		stx $37				stx 	zTemp0+1
.8218	85 36		sta $36				sta 	zTemp0
.821a	a0 00		ldy #$00			ldy 	#0
.821c					_PSXALoop:
.821c	b1 36		lda ($36),y			lda 	(zTemp0),y
.821e	f0 06		beq $8226			beq 	_PSXAExit
.8220	20 ea 93	jsr $93ea			jsr 	EXTPrintCharacter
.8223	c8		iny				iny
.8224	80 f6		bra $821c			bra 	_PSXALoop
.8226					_PSXAExit:
.8226	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/binary/compare.asm

.8de7					UnaryTrue:
.8de7	fa		plx				plx
.8de8					ReturnTrue:
.8de8	a9 01		lda #$01			lda 	#1  						; set to 1
.8dea	20 d3 88	jsr $88d3			jsr 	NSMSetByte
.8ded	a9 80		lda #$80			lda 	#$80 						; set sign flag, so it is -1
.8def	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8df2	60		rts				rts
.8df3					UnaryFalse:
.8df3	fa		plx				plx
.8df4					ReturnFalse:
.8df4	4c d1 88	jmp $88d1			jmp 	NSMSetZero 					; set it all to zero
.8df7					BinaryCompareEqual:
.8df7	fa		plx				plx
.8df8	20 33 8e	jsr $8e33			jsr 	CompareBaseCode
.8dfb	c9 00		cmp #$00			cmp 	#0
.8dfd	f0 e9		beq $8de8			beq 	ReturnTrue
.8dff	80 f3		bra $8df4			bra 	ReturnFalse
.8e01					BinaryCompareLess:
.8e01	fa		plx				plx
.8e02	20 33 8e	jsr $8e33			jsr 	CompareBaseCode
.8e05	c9 ff		cmp #$ff			cmp 	#$FF
.8e07	f0 df		beq $8de8			beq 	ReturnTrue
.8e09	80 e9		bra $8df4			bra 	ReturnFalse
.8e0b					BinaryCompareGreater:
.8e0b	fa		plx				plx
.8e0c	20 33 8e	jsr $8e33			jsr 	CompareBaseCode
.8e0f	c9 01		cmp #$01			cmp 	#1
.8e11	f0 d5		beq $8de8			beq 	ReturnTrue
.8e13	80 df		bra $8df4			bra 	ReturnFalse
.8e15					BinaryCompareNotEqual:
.8e15	fa		plx				plx
.8e16	20 33 8e	jsr $8e33			jsr 	CompareBaseCode
.8e19	c9 00		cmp #$00			cmp 	#0
.8e1b	d0 cb		bne $8de8			bne 	ReturnTrue
.8e1d	80 d5		bra $8df4			bra 	ReturnFalse
.8e1f					BinaryCompareLessEqual:
.8e1f	fa		plx				plx
.8e20	20 33 8e	jsr $8e33			jsr 	CompareBaseCode
.8e23	c9 01		cmp #$01			cmp 	#1
.8e25	d0 c1		bne $8de8			bne 	ReturnTrue
.8e27	80 cb		bra $8df4			bra 	ReturnFalse
.8e29					BinaryCompareGreaterEqual:
.8e29	fa		plx				plx
.8e2a	20 33 8e	jsr $8e33			jsr 	CompareBaseCode
.8e2d	c9 ff		cmp #$ff			cmp 	#$FF
.8e2f	d0 b7		bne $8de8			bne 	ReturnTrue
.8e31	80 c1		bra $8df4			bra 	ReturnFalse
.8e33					CompareBaseCode:
.8e33	20 aa 84	jsr $84aa			jsr 	DereferenceTopTwo 			; make both values if references.
.8e36	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if either is a string.
.8e39	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8e3c	29 10		and #$10			and 	#NSTString
.8e3e	d0 40		bne $8e80			bne 	_CBCString
.8e40	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check both are integers
.8e43	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8e46	d0 3b		bne $8e83			bne 	_CBCFloat
.8e48	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8e4b	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8e4e	29 08		and #$08			and 	#NSTFloat
.8e50	d0 31		bne $8e83			bne 	_CBCFloat
.8e52	20 86 8e	jsr $8e86			jsr 	CompareFixMinusZero
.8e55	e8		inx				inx
.8e56	20 86 8e	jsr $8e86			jsr 	CompareFixMinusZero
.8e59	ca		dex				dex
.8e5a	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; are the signs different ?
.8e5d	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.8e60	10 0b		bpl $8e6d			bpl 	_CDCSameSign
.8e62	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; if first one is -ve
.8e65	30 16		bmi $8e7d			bmi 	_CBCLess 					; return $FF
.8e67					_CBCGreater:
.8e67	a9 01		lda #$01			lda 	#1
.8e69	60		rts				rts
.8e6a					_CBCEqual:
.8e6a	a9 00		lda #$00			lda 	#0
.8e6c	60		rts				rts
.8e6d					_CDCSameSign:
.8e6d	20 d0 82	jsr $82d0			jsr 	SubTopTwoStack 				; unsigned subtract
.8e70	20 01 89	jsr $8901			jsr 	NSMIsZero 					; or the mantissa together
.8e73	f0 f5		beq $8e6a			beq 	_CBCEqual 					; -0 == 0
.8e75	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; sign of the result. if +ve return $01 else return $FF
.8e78	5d 01 06	eor $0601,x			eor 	NSStatus+1,x 				; however if both were -ve this is inverted
.8e7b	10 ea		bpl $8e67			bpl 	_CBCGreater
.8e7d					_CBCLess:
.8e7d	a9 ff		lda #$ff			lda 	#$FF
.8e7f	60		rts				rts
.8e80					_CBCString:
.8e80	4c 27 82	jmp $8227			jmp 	CompareStrings
.8e83					_CBCFloat:
.8e83	4c cc 90	jmp $90cc			jmp 	CompareFloat
.8e86					CompareFixMinusZero:
.8e86	20 01 89	jsr $8901			jsr 	NSMIsZero
.8e89	d0 03		bne $8e8e			bne 	_CFXMZNotZero
.8e8b	9e 00 06	stz $0600,x			stz 	NSStatus,x
.8e8e					_CFXMZNotZero:
.8e8e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/binary/divide.asm

.8e8f					IntegerDivide:
.8e8f	fa		plx				plx
.8e90	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8e93	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8e96	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8e97	0a		asl a				asl 	a
.8e98	10 05		bpl $8e9f			bpl 	_NotRef
.8e9a	48		pha				pha
.8e9b	20 aa 84	jsr $84aa			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8e9e	68		pla				pla
.8e9f					_NotRef:
.8e9f	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8ea1	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8ea4	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8ea7	f0 03		beq $8eac			beq 	_IntegerCode 				; if clear, then we have two integers
.8ea9	4c 37 93	jmp $9337			jmp 	TypeError 					; anything else, type mismatch.
.8eac					_IntegerCode:
.8eac	20 ce 8e	jsr $8ece			jsr 	CheckDivideZero 			; do div zero check
.8eaf	20 05 8f	jsr $8f05			jsr 	Int32Divide 				; do the division
.8eb2	20 c2 8f	jsr $8fc2			jsr 	CalculateSign 				; calculate result sign
.8eb5					NSMCopyPlusTwoToZero:
.8eb5	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.8eb8	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8ebb	bd 12 06	lda $0612,x			lda 	NSMantissa1+2,x
.8ebe	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8ec1	bd 1a 06	lda $061a,x			lda 	NSMantissa2+2,x
.8ec4	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8ec7	bd 22 06	lda $0622,x			lda 	NSMantissa3+2,x
.8eca	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8ecd	60		rts				rts
.8ece					CheckDivideZero:
.8ece	e8		inx				inx
.8ecf	20 01 89	jsr $8901			jsr 	NSMIsZero
.8ed2	f0 02		beq $8ed6			beq 	_CDVError
.8ed4	ca		dex				dex
.8ed5	60		rts				rts
.8ed6					_CDVError:
.8ed6	a9 03		lda #$03		lda	#3
.8ed8	4c c4 81	jmp $81c4		jmp	ErrorHandler
.8edb					IntegerModulus:
.8edb	fa		plx				plx
.8edc	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8edf	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8ee2	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8ee3	0a		asl a				asl 	a
.8ee4	10 05		bpl $8eeb			bpl 	_NotRef
.8ee6	48		pha				pha
.8ee7	20 aa 84	jsr $84aa			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8eea	68		pla				pla
.8eeb					_NotRef:
.8eeb	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8eed	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8ef0	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8ef3	f0 03		beq $8ef8			beq 	_IntegerCode 				; if clear, then we have two integers
.8ef5	4c 37 93	jmp $9337			jmp 	TypeError 					; anything else, type mismatch.
.8ef8					_IntegerCode:
.8ef8	20 ce 8e	jsr $8ece			jsr 	CheckDivideZero 			; do div zero check
.8efb	20 05 8f	jsr $8f05			jsr 	Int32Divide 				; do the division
.8efe	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; clear the sign bit.
.8f01	5e 00 06	lsr $0600,x			lsr 	NSStatus,x
.8f04	60		rts				rts
.8f05					Int32Divide:
.8f05	48		pha				pha 								; save AXY
.8f06	5a		phy				phy
.8f07	20 a8 88	jsr $88a8			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.8f0a	20 cd 88	jsr $88cd			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.8f0d	a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.8f0f					_I32DivideLoop:
.8f0f	e8		inx				inx
.8f10	e8		inx				inx
.8f11	20 e6 88	jsr $88e6			jsr 	NSMShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.8f14	ca		dex				dex
.8f15	ca		dex				dex
.8f16	20 e7 88	jsr $88e7			jsr 	NSMRotateLeft
.8f19	20 45 8f	jsr $8f45			jsr 	DivideCheckSubtract 		; check if subtract possible
.8f1c	90 03		bcc $8f21			bcc 	_I32DivideNoCarryIn
.8f1e	fe 0a 06	inc $060a,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.8f21					_I32DivideNoCarryIn:
.8f21	88		dey				dey 								; loop round till division completed.
.8f22	d0 eb		bne $8f0f			bne 	_I32DivideLoop
.8f24	7a		ply				ply 								; restore AXY and exit
.8f25	68		pla				pla
.8f26	60		rts				rts
.8f27					Int32ShiftDivide:
.8f27	48		pha				pha 								; save AY
.8f28	5a		phy				phy
.8f29	e8		inx				inx 								; clear S[X+2]
.8f2a	e8		inx				inx
.8f2b	20 d1 88	jsr $88d1			jsr 	NSMSetZero
.8f2e	ca		dex				dex
.8f2f	ca		dex				dex
.8f30	a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.8f32					_I32SDLoop:
.8f32	20 45 8f	jsr $8f45			jsr 	DivideCheckSubtract 		; check if subtract possible
.8f35	e8		inx				inx
.8f36	e8		inx				inx
.8f37	20 e7 88	jsr $88e7			jsr 	NSMRotateLeft				; shift 64 bit FPA left, rotating carry in
.8f3a	ca		dex				dex
.8f3b	ca		dex				dex
.8f3c	20 e7 88	jsr $88e7			jsr 	NSMRotateLeft
.8f3f	88		dey				dey 	 							; do 31 times
.8f40	d0 f0		bne $8f32			bne 	_I32SDLoop
.8f42	7a		ply				ply 								; restore AY and exit
.8f43	68		pla				pla
.8f44	60		rts				rts
.8f45					DivideCheckSubtract:
.8f45	20 d0 82	jsr $82d0			jsr 	SubTopTwoStack 				; subtract Stack[X+1] from Stack[X+0]
.8f48	b0 04		bcs $8f4e			bcs 	_DCSExit 					; if carry set, then could do, exit
.8f4a	20 aa 82	jsr $82aa			jsr 	AddTopTwoStack 				; add it back in
.8f4d	18		clc				clc 								; and return False
.8f4e					_DCSExit:
.8f4e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/binary/multiply.asm

.8f4f					MulInteger:
.8f4f	fa		plx				plx
.8f50	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8f53	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8f56	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8f57	0a		asl a				asl 	a
.8f58	10 05		bpl $8f5f			bpl 	_NotRef
.8f5a	48		pha				pha
.8f5b	20 aa 84	jsr $84aa			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8f5e	68		pla				pla
.8f5f					_NotRef:
.8f5f	0a		asl a				asl 	a 							; put MSB of type into A:7
.8f60	30 0b		bmi $8f6d			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.8f62	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8f65	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8f68	f0 06		beq $8f70			beq 	_IntegerCode 				; if clear, then we have two integers
.8f6a	4c a3 91	jmp $91a3			jmp 	FloatingPointMultiply 							; otherwise at least one float.
.8f6d					_StringData:
.8f6d	4c 41 93	jmp $9341			jmp 	NotDoneError							; at least one string - don't know both are strings.
.8f70					_IntegerCode:
.8f70	20 7d 8f	jsr $8f7d			jsr 	MultiplyShort
.8f73	c9 00		cmp #$00			cmp 	#0
.8f75	f0 05		beq $8f7c			beq 	_MIExit
.8f77	a9 04		lda #$04		lda	#4
.8f79	4c c4 81	jmp $81c4		jmp	ErrorHandler
.8f7c					_MIExit:
.8f7c	60		rts				rts
.8f7d					MultiplyShort:
.8f7d	5a		phy				phy 								; save Y
.8f7e	20 a8 88	jsr $88a8			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.8f81	20 cd 88	jsr $88cd			jsr 	NSMSetZeroMantissaOnly 		; set mantissa S[X] to zero
.8f84	a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.8f86					_I32MLoop:
.8f86	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.8f89	1d 12 06	ora $0612,x			ora 	NSMantissa1+2,x
.8f8c	1d 1a 06	ora $061a,x			ora 	NSMantissa2+2,x
.8f8f	1d 22 06	ora $0622,x			ora 	NSMantissa3+2,x
.8f92	f0 28		beq $8fbc			beq 	_I32MExit 					; exit if zero
.8f94	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.8f97	29 01		and #$01			and 	#1
.8f99	f0 0e		beq $8fa9			beq 	_I32MNoAdd
.8f9b	20 aa 82	jsr $82aa			jsr 	AddTopTwoStack 				; if so add S[X+1] to S[X+0]
.8f9e	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.8fa1	10 06		bpl $8fa9			bpl 	_I32MNoAdd
.8fa3					_I32ShiftRight:
.8fa3	20 f4 88	jsr $88f4			jsr 	NSMShiftRight 				; shift S[X] right
.8fa6	c8		iny				iny 								; increment shift count
.8fa7	80 0a		bra $8fb3			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.8fa9					_I32MNoAdd:
.8fa9	3c 21 06	bit $0621,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.8fac	70 f5		bvs $8fa3			bvs 	_I32ShiftRight 				; instead.
.8fae	e8		inx				inx
.8faf	20 e6 88	jsr $88e6			jsr 	NSMShiftLeft 				; shift additive S[X+1] left
.8fb2	ca		dex				dex
.8fb3					_I32MShiftUpper:
.8fb3	e8		inx				inx 								; shift S[X+2] right
.8fb4	e8		inx				inx
.8fb5	20 f4 88	jsr $88f4			jsr 	NSMShiftRight
.8fb8	ca		dex				dex
.8fb9	ca		dex				dex
.8fba	80 ca		bra $8f86			bra 	_I32MLoop 					; try again.
.8fbc					_I32MExit:
.8fbc	20 c2 8f	jsr $8fc2			jsr 	CalculateSign
.8fbf	98		tya				tya 								; shift in A
.8fc0	7a		ply				ply 								; restore Y and exit
.8fc1	60		rts				rts
.8fc2					CalculateSign:
.8fc2	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.8fc5	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; shift result left
.8fc8	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.8fcb	0a		asl a				asl 	a 							; shift bit 7 into carry
.8fcc	7e 00 06	ror $0600,x			ror 	NSStatus,x 					; shift right into status byte.
.8fcf	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/binary/scompare.asm

.8227					CompareStrings:
.8227	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check both are strings
.822a	3d 01 06	and $0601,x			and 	NSStatus+1,x
.822d	29 10		and #$10			and 	#NSBIsString
.822f	f0 2c		beq $825d			beq 	_CSTypeError
.8231	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy string addresses to zTemp0/1
.8234	85 36		sta $36				sta 	zTemp0
.8236	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8239	85 37		sta $37				sta 	zTemp0+1
.823b	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.823e	85 38		sta $38				sta 	zTemp1
.8240	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.8243	85 39		sta $39				sta 	zTemp1+1
.8245	5a		phy				phy 								; save Y so we can access strings
.8246	a0 ff		ldy #$ff			ldy 	#$FF 						; -1 for pre increment.
.8248					_CSLoop:
.8248	c8		iny				iny
.8249	b1 36		lda ($36),y			lda 	(zTemp0),y 					; check if they are the same
.824b	d1 38		cmp ($38),y			cmp 	(zTemp1),y
.824d	d0 06		bne $8255			bne 	_CSDifferent
.824f	c9 00		cmp #$00			cmp 	#0 							; reached end ?
.8251	d0 f5		bne $8248			bne 	_CSLoop 					; still comparing
.8253					_CSExit:
.8253	7a		ply				ply 								; reached end, return zero in A from EOS
.8254	60		rts				rts
.8255					_CSDifferent:
.8255	a9 ff		lda #$ff			lda 	#255 						; if < return $FF
.8257	90 fa		bcc $8253			bcc		_CSExit
.8259	a9 01		lda #$01			lda 	#1 							; otherwise return 1.
.825b	80 f6		bra $8253			bra 	_CSExit
.825d					_CSTypeError:
.825d	4c 37 93	jmp $9337			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/binary/shifts.asm

.8260					ShiftLeft:
.8260	38		sec				sec
.8261	80 01		bra $8264			bra 	ShiftMain
.8263					ShiftRight:
.8263	18		clc				clc
.8264					ShiftMain:
.8264	fa		plx				plx 								; restore X
.8265	08		php				php 								; save direction
.8266	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8269	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.826c	0a		asl a				asl 	a 							; shift reference bit into sign bit
.826d	0a		asl a				asl 	a
.826e	10 05		bpl $8275			bpl 	_NotRef
.8270	48		pha				pha
.8271	20 aa 84	jsr $84aa			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8274	68		pla				pla
.8275					_NotRef:
.8275	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8277	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.827a	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.827d	f0 03		beq $8282			beq 	_IntegerCode 				; if clear, then we have two integers
.827f	4c 37 93	jmp $9337			jmp 	TypeError 					; anything else, type mismatch.
.8282					_IntegerCode:
.8282	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; check number < 32
.8285	29 e0		and #$e0			and 	#$E0
.8287	1d 11 06	ora $0611,x			ora 	NSMantissa1+1,x
.828a	1d 19 06	ora $0619,x			ora 	NSMantissa2+1,x
.828d	1d 21 06	ora $0621,x			ora 	NSMantissa3+1,x
.8290	d0 13		bne $82a5			bne 	_SMExit0 					; if >= 32 it will always return zero.
.8292					_SMLoop:
.8292	de 09 06	dec $0609,x			dec 	NSMantissa0+1,x 			; predecrement, could do << 0
.8295	30 11		bmi $82a8			bmi 	_SMExit 					; exit if done.
.8297	28		plp				plp 								; restore direcition setting
.8298	08		php				php
.8299	90 05		bcc $82a0			bcc 	_SMRight
.829b	20 e6 88	jsr $88e6			jsr 	NSMShiftLeft 				; shift left if CS
.829e	80 f2		bra $8292			bra 	_SMLoop
.82a0					_SMRight:
.82a0	20 f4 88	jsr $88f4			jsr 	NSMShiftRight 				; shift right if CC
.82a3	80 ed		bra $8292			bra 	_SMLoop
.82a5					_SMExit0:
.82a5	20 d1 88	jsr $88d1			jsr 	NSMSetZero 					; return zero.
.82a8					_SMExit:
.82a8	28		plp				plp 								; throw direction
.82a9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/binary/simple.asm

.82aa					AddTopTwoStack:
.82aa	18		clc				clc
.82ab	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.82ae	7d 09 06	adc $0609,x			adc 		NSMantissa0+1,x
.82b1	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.82b4	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.82b7	7d 11 06	adc $0611,x			adc 		NSMantissa1+1,x
.82ba	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.82bd	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.82c0	7d 19 06	adc $0619,x			adc 		NSMantissa2+1,x
.82c3	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.82c6	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.82c9	7d 21 06	adc $0621,x			adc 		NSMantissa3+1,x
.82cc	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.82cf	60		rts				rts
.82d0					SubTopTwoStack:
.82d0	38		sec				sec
.82d1	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.82d4	fd 09 06	sbc $0609,x			sbc 		NSMantissa0+1,x
.82d7	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.82da	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.82dd	fd 11 06	sbc $0611,x			sbc 		NSMantissa1+1,x
.82e0	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.82e3	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.82e6	fd 19 06	sbc $0619,x			sbc 		NSMantissa2+1,x
.82e9	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.82ec	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.82ef	fd 21 06	sbc $0621,x			sbc 		NSMantissa3+1,x
.82f2	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.82f5	60		rts				rts
.82f6					AddInteger:
.82f6	fa		plx				plx
.82f7	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.82fa	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.82fd	0a		asl a				asl 	a 							; shift reference bit into sign bit
.82fe	0a		asl a				asl 	a
.82ff	10 05		bpl $8306			bpl 	_NotRef
.8301	48		pha				pha
.8302	20 aa 84	jsr $84aa			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8305	68		pla				pla
.8306					_NotRef:
.8306	0a		asl a				asl 	a 							; put MSB of type into A:7
.8307	30 0b		bmi $8314			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.8309	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.830c	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.830f	f0 06		beq $8317			beq 	_IntegerCode 				; if clear, then we have two integers
.8311	4c 2b 90	jmp $902b			jmp 	FloatingPointAdd 							; otherwise at least one float.
.8314					_StringData:
.8314	4c 41 93	jmp $9341			jmp 	NotDoneError							; at least one string - don't know both are strings.
.8317					_IntegerCode:
.8317					AddCode:
.8317	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.831a	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.831d	10 8b		bpl $82aa			bpl 	AddTopTwoStack
.831f	20 d0 82	jsr $82d0			jsr 	SubTopTwoStack 				; do a physical subtraction
.8322	3c 20 06	bit $0620,x			bit 	NSMantissa3,x 				; result is +ve, okay
.8325	10 09		bpl $8330			bpl 	_AddExit
.8327	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; sign is that of 2nd value
.832a	9d 00 06	sta $0600,x			sta 	NSStatus,x
.832d	20 86 88	jsr $8886			jsr 	NSMNegateMantissa 			; negate the mantissa and exit
.8330					_AddExit:
.8330	60		rts				rts
.8331					SubInteger:
.8331	fa		plx				plx
.8332	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8335	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8338	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8339	0a		asl a				asl 	a
.833a	10 05		bpl $8341			bpl 	_NotRef
.833c	48		pha				pha
.833d	20 aa 84	jsr $84aa			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8340	68		pla				pla
.8341					_NotRef:
.8341	0a		asl a				asl 	a 							; put MSB of type into A:7
.8342	30 0b		bmi $834f			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.8344	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8347	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.834a	f0 06		beq $8352			beq 	_IntegerCode 				; if clear, then we have two integers
.834c	4c 30 90	jmp $9030			jmp 	FloatingPointSub 							; otherwise at least one float.
.834f					_StringData:
.834f	4c 41 93	jmp $9341			jmp 	NotDoneError							; at least one string - don't know both are strings.
.8352					_IntegerCode:
.8352	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; negate the second value.
.8355	49 80		eor #$80			eor 	#$80
.8357	9d 01 06	sta $0601,x			sta 	NSStatus+1,x
.835a	80 bb		bra $8317			bra 	AddCode 					; and do the same code as add.
.835c					AndInteger:
.835c	fa		plx				plx
.835d	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8360	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8363	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8364	0a		asl a				asl 	a
.8365	10 05		bpl $836c			bpl 	_NotRef
.8367	48		pha				pha
.8368	20 aa 84	jsr $84aa			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.836b	68		pla				pla
.836c					_NotRef:
.836c	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.836e	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8371	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8374	f0 03		beq $8379			beq 	_IntegerCode 				; if clear, then we have two integers
.8376	4c 37 93	jmp $9337			jmp 	TypeError 					; anything else, type mismatch.
.8379					_IntegerCode:
.8379	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.837c	3d 09 06	and $0609,x			and 		NSMantissa0+1,x
.837f	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8382	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8385	3d 11 06	and $0611,x			and 		NSMantissa1+1,x
.8388	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.838b	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.838e	3d 19 06	and $0619,x			and 		NSMantissa2+1,x
.8391	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8394	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8397	3d 21 06	and $0621,x			and 		NSMantissa3+1,x
.839a	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.839d	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.83a0	60		rts				rts
.83a1					OraInteger:
.83a1	fa		plx				plx
.83a2	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.83a5	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.83a8	0a		asl a				asl 	a 							; shift reference bit into sign bit
.83a9	0a		asl a				asl 	a
.83aa	10 05		bpl $83b1			bpl 	_NotRef
.83ac	48		pha				pha
.83ad	20 aa 84	jsr $84aa			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.83b0	68		pla				pla
.83b1					_NotRef:
.83b1	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.83b3	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.83b6	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.83b9	f0 03		beq $83be			beq 	_IntegerCode 				; if clear, then we have two integers
.83bb	4c 37 93	jmp $9337			jmp 	TypeError 					; anything else, type mismatch.
.83be					_IntegerCode:
.83be	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.83c1	1d 09 06	ora $0609,x			ora 		NSMantissa0+1,x
.83c4	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.83c7	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.83ca	1d 11 06	ora $0611,x			ora 		NSMantissa1+1,x
.83cd	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.83d0	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.83d3	1d 19 06	ora $0619,x			ora 		NSMantissa2+1,x
.83d6	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.83d9	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.83dc	1d 21 06	ora $0621,x			ora 		NSMantissa3+1,x
.83df	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.83e2	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.83e5	60		rts				rts
.83e6					EorInteger:
.83e6	fa		plx				plx
.83e7	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.83ea	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.83ed	0a		asl a				asl 	a 							; shift reference bit into sign bit
.83ee	0a		asl a				asl 	a
.83ef	10 05		bpl $83f6			bpl 	_NotRef
.83f1	48		pha				pha
.83f2	20 aa 84	jsr $84aa			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.83f5	68		pla				pla
.83f6					_NotRef:
.83f6	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.83f8	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.83fb	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.83fe	f0 03		beq $8403			beq 	_IntegerCode 				; if clear, then we have two integers
.8400	4c 37 93	jmp $9337			jmp 	TypeError 					; anything else, type mismatch.
.8403					_IntegerCode:
.8403	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8406	5d 09 06	eor $0609,x			eor 		NSMantissa0+1,x
.8409	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.840c	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.840f	5d 11 06	eor $0611,x			eor 		NSMantissa1+1,x
.8412	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8415	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8418	5d 19 06	eor $0619,x			eor 		NSMantissa2+1,x
.841b	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.841e	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8421	5d 21 06	eor $0621,x			eor 		NSMantissa3+1,x
.8424	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8427	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.842a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/binary/tostring.asm

.8fd0					ConvertInt16:
.8fd0	8d 08 06	sta $0608			sta 	NSMantissa0 				; set up as 32 bit conversion
.8fd3	8e 10 06	stx $0610			stx 	NSMantissa1
.8fd6	9c 18 06	stz $0618			stz 	NSMantissa2
.8fd9	9c 20 06	stz $0620			stz 	NSMantissa3
.8fdc	9c 00 06	stz $0600			stz 	NSStatus 					; positive integer
.8fdf	a2 00		ldx #$00			ldx 	#0 							; stack level
.8fe1	a9 0a		lda #$0a			lda 	#10 						; base
.8fe3	80 00		bra $8fe5			bra 	ConvertInt32
.8fe5					ConvertInt32:
.8fe5	5a		phy				phy
.8fe6	a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.8fe8	2c 00 06	bit $0600			bit 	NSStatus 					; output a - if not negative.
.8feb	10 08		bpl $8ff5			bpl 	_CI32NotNeg
.8fed	48		pha				pha
.8fee	a9 2d		lda #$2d			lda 	#'-'
.8ff0	99 64 08	sta $0864,y			sta 	NumberBuffer,y
.8ff3	c8		iny				iny
.8ff4	68		pla				pla
.8ff5					_CI32NotNeg:
.8ff5	20 03 90	jsr $9003			jsr 	_CI32DivideConvert 			; recursive conversion
.8ff8	a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.8ffa	99 64 08	sta $0864,y			sta 	NumberBuffer,y
.8ffd	7a		ply				ply
.8ffe	a2 08		ldx #$08			ldx 	#NumberBuffer >> 8
.9000	a9 64		lda #$64			lda 	#NumberBuffer & $FF
.9002	60		rts				rts
.9003					_CI32DivideConvert:
.9003	e8		inx				inx 								; write to next slot up
.9004	20 d3 88	jsr $88d3			jsr 	NSMSetByte
.9007	ca		dex				dex
.9008	20 05 8f	jsr $8f05			jsr 	Int32Divide 				; divide
.900b	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; save remainder
.900e	48		pha				pha
.900f	20 b5 8e	jsr $8eb5			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.9012	20 01 89	jsr $8901			jsr 	NSMIsZero 					; is it zero ?
.9015	f0 06		beq $901d			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.9017	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.901a	20 03 90	jsr $9003			jsr 	_CI32DivideConvert 			; and recusrively call.
.901d					_CI32NoRecurse:
.901d	68		pla				pla 								; remainder
.901e	c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII
.9020	90 02		bcc $9024			bcc 	_CI32NotHex
.9022	69 26		adc #$26			adc 	#6+32
.9024					_CI32NotHex:
.9024	69 30		adc #$30			adc 	#48
.9026	99 64 08	sta $0864,y			sta 	NumberBuffer,y 				; write out and exit
.9029	c8		iny				iny
.902a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/expression.asm


;******  Processing file: ./expressions/../generated/precedence.dat

.842b					PrecedenceLevel:
>842b	04					.byte	 4	; $00 <<
>842c	02					.byte	 2	; $01 <=
>842d	02					.byte	 2	; $02 <>
>842e	00					.byte	 0	; $03 !!3
>842f	00					.byte	 0	; $04 ><
>8430	02					.byte	 2	; $05 >=
>8431	04					.byte	 4	; $06 >>
>8432	00					.byte	 0	; $07 !!7
>8433	00					.byte	 0	; $08 !!8
>8434	00					.byte	 0	; $09 !!9
>8435	00					.byte	 0	; $0a !!10
>8436	00					.byte	 0	; $0b !!11
>8437	00					.byte	 0	; $0c !!12
>8438	00					.byte	 0	; $0d !!13
>8439	00					.byte	 0	; $0e !!14
>843a	00					.byte	 0	; $0f !!15
>843b	00					.byte	 0	; $10 @
>843c	00					.byte	 0	; $11 !!17
>843d	00					.byte	 0	; $12 !!18
>843e	00					.byte	 0	; $13 [
>843f	04					.byte	 4	; $14 \
>8440	00					.byte	 0	; $15 ]
>8441	01					.byte	 1	; $16 ^
>8442	00					.byte	 0	; $17 _
>8443	00					.byte	 0	; $18 `
>8444	00					.byte	 0	; $19 !!25
>8445	00					.byte	 0	; $1a !!26
>8446	00					.byte	 0	; $1b {
>8447	01					.byte	 1	; $1c |
>8448	00					.byte	 0	; $1d }
>8449	00					.byte	 0	; $1e ~
>844a	00					.byte	 0	; $1f [7m<7F>[m
>844b	00					.byte	 0	; $20
>844c	05					.byte	 5	; $21 !
>844d	00					.byte	 0	; $22 "
>844e	00					.byte	 0	; $23 #
>844f	05					.byte	 5	; $24 $
>8450	04					.byte	 4	; $25 %
>8451	01					.byte	 1	; $26 &
>8452	00					.byte	 0	; $27 '
>8453	00					.byte	 0	; $28 (
>8454	00					.byte	 0	; $29 )
>8455	04					.byte	 4	; $2a *
>8456	03					.byte	 3	; $2b +
>8457	00					.byte	 0	; $2c ,
>8458	03					.byte	 3	; $2d -
>8459	00					.byte	 0	; $2e .
>845a	04					.byte	 4	; $2f /
>845b	00					.byte	 0	; $30 0
>845c	00					.byte	 0	; $31 1
>845d	00					.byte	 0	; $32 2
>845e	00					.byte	 0	; $33 3
>845f	00					.byte	 0	; $34 4
>8460	00					.byte	 0	; $35 5
>8461	00					.byte	 0	; $36 6
>8462	00					.byte	 0	; $37 7
>8463	00					.byte	 0	; $38 8
>8464	00					.byte	 0	; $39 9
>8465	00					.byte	 0	; $3a :
>8466	00					.byte	 0	; $3b ;
>8467	02					.byte	 2	; $3c <
>8468	02					.byte	 2	; $3d =
>8469	02					.byte	 2	; $3e >
>846a	05					.byte	 5	; $3f ?

;******  Return to file: ./expressions/expression.asm

.846b					EvaluateExpressionAt0:
.846b	a2 00		ldx #$00			ldx 	#0 							; bottom stack level
.846d					EvaluateExpression:
.846d	a9 00		lda #$00			lda 	#0 							; lowest precedence level
.846f					EvaluateExpressionAtPrecedence:
.846f	48		pha				pha 								; save precedence level
.8470	20 6b 86	jsr $866b			jsr 	EvaluateTerm 				; evaluate term into level X.
.8473	68		pla				pla 								; restore precedence level.
.8474					_EXPRLoop:
.8474	85 36		sta $36				sta 	zTemp0 						; save current precedence level.
.8476	b1 30		lda ($30),y			lda 	(codePtr),y
.8478	c9 40		cmp #$40			cmp		#$40 						; if >= $40 cannot be an operator
.847a	b0 25		bcs $84a1			bcs 	_EXPRExit
.847c	da		phx				phx 								; read the operator precedence
.847d	aa		tax				tax
.847e	bd 2b 84	lda $842b,x			lda 	PrecedenceLevel,x
.8481	fa		plx				plx
.8482	c9 00		cmp #$00			cmp 	#0							; if zero exit (not an operator)
.8484	f0 1b		beq $84a1			beq 	_EXPRExit
.8486	85 37		sta $37				sta 	zTemp0+1 					; save operator precedence level.
.8488	a5 36		lda $36				lda 	zTemp0 						; compare current precedence vs. operator precedence
.848a	c5 37		cmp $37				cmp 	zTemp0+1
.848c	b0 13		bcs $84a1			bcs		_EXPRExit 					; if current >= operator exit
.848e	48		pha				pha 								; save current precedence.
.848f	b1 30		lda ($30),y			lda 	(codePtr),y
.8491	c8		iny				iny
.8492	48		pha				pha
.8493	a5 37		lda $37				lda 	zTemp0+1 					; get operator precedence level
.8495	e8		inx				inx 								; work out the right hand side.
.8496	20 6f 84	jsr $846f			jsr 	EvaluateExpressionAtPrecedence
.8499	ca		dex				dex
.849a	68		pla				pla 								; get operator, call the code.
.849b	20 a4 84	jsr $84a4			jsr 	_EXPRCaller
.849e	68		pla				pla 								; restore precedence level
.849f	80 d3		bra $8474			bra 	_EXPRLoop 					; and go round.
.84a1					_EXPRExit:
.84a1	a5 36		lda $36				lda 	zTemp0 						; A = current precedence level.
.84a3	60		rts				rts
.84a4					_EXPRCaller:
.84a4	da		phx				phx 								; save on stack, first thing is to restore it
.84a5	0a		asl a				asl 	a 							; double so can use vectors into X
.84a6	aa		tax				tax
.84a7	7c 14 80	jmp ($8014,x)			jmp 	(VectorSetPunc,x) 			; and go to the code.

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/float/addsub.asm

.902b					FloatingPointAdd:
.902b	20 cc 91	jsr $91cc			jsr 	FloatPrepare 				; prepare for floats
.902e	80 0b		bra $903b			bra 	FloatAdd
.9030					FloatingPointSub:
.9030	20 cc 91	jsr $91cc			jsr 	FloatPrepare 				; prepare for floats
.9033					FloatSubtract:
.9033	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; negate FPB
.9036	49 80		eor #$80			eor 	#$80
.9038	9d 01 06	sta $0601,x			sta 	NSStatus+1,x				; and fall through.
.903b					FloatAdd:
.903b	48		pha				pha
.903c	5a		phy				phy
.903d	20 dd 91	jsr $91dd			jsr 	NSNormalise 				; normalise S[X]
.9040	f0 54		beq $9096			beq 	_FAReturn1
.9042	e8		inx				inx 								; normalise S[X+1]
.9043	20 dd 91	jsr $91dd			jsr 	NSNormalise
.9046	ca		dex				dex
.9047	c9 00		cmp #$00			cmp 	#0
.9049	f0 6f		beq $90ba			beq 	_FAExit 					; if so, just return A
.904b	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; are the exponents the same ?
.904e	dd 29 06	cmp $0629,x			cmp 	NSExponent+1,x
.9051	f0 1b		beq $906e			beq 	_FAExponentsEqual
.9053	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; work out the larger exponent
.9056	a8		tay				tay
.9057	38		sec				sec 								; do a signed comparison of the exponents.
.9058	fd 29 06	sbc $0629,x			sbc 	NSExponent+1,x
.905b	50 02		bvc $905f			bvc 	_FANoSignedChange
.905d	49 80		eor #$80			eor 	#$80
.905f					_FANoSignedChange:
.905f	29 80		and #$80			and 	#$80
.9061	10 03		bpl $9066			bpl 	_FAHaveMax
.9063	bc 29 06	ldy $0629,x			ldy 	NSExponent+1,x
.9066					_FAHaveMax:
.9066	20 bd 90	jsr $90bd			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.9069	e8		inx				inx
.906a	20 bd 90	jsr $90bd			jsr 	_FAShiftToExponent
.906d	ca		dex				dex
.906e					_FAExponentsEqual:
.906e	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; are the signs the same
.9071	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.9074	30 10		bmi $9086			bmi 	_FADifferentSigns
.9076	20 aa 82	jsr $82aa			jsr 	AddTopTwoStack 				; do the add of the mantissae
.9079	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.907c	10 3c		bpl $90ba			bpl 	_FAExit 					; if no, we are done.
.907e	20 f4 88	jsr $88f4			jsr 	NSMShiftRight 				; shift A right, renormalising it.
.9081	fe 28 06	inc $0628,x			inc 	NSExponent,x 				; bump the exponent and exit
.9084	80 34		bra $90ba			bra 	_FAExit
.9086					_FADifferentSigns:
.9086	20 d0 82	jsr $82d0			jsr 	SubTopTwoStack 				; subtract mantissa B from A
.9089	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; is the result negative ?
.908c	10 2c		bpl $90ba			bpl 	_FAExit 					; if no, we are done.
.908e	20 7d 88	jsr $887d			jsr 	NSMNegate 					; netate result
.9091	20 86 88	jsr $8886			jsr 	NSMNegateMantissa 			; negate (2'c) the mantissa
.9094	80 24		bra $90ba			bra 	_FAExit
.9096					_FAReturn1:
.9096	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.9099	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.909c	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.909f	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.90a2	bd 19 06	lda $0619,x			lda 	NSMantissa2+1,x
.90a5	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.90a8	bd 21 06	lda $0621,x			lda 	NSMantissa3+1,x
.90ab	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.90ae	bd 29 06	lda $0629,x			lda 	NSExponent+1,x
.90b1	9d 28 06	sta $0628,x			sta 	NSExponent,x
.90b4	bd 01 06	lda $0601,x			lda 	NSStatus+1,x
.90b7	9d 00 06	sta $0600,x			sta 	NSStatus,x
.90ba					_FAExit:
.90ba	7a		ply				ply
.90bb	68		pla				pla
.90bc	60		rts				rts
.90bd					_FAShiftToExponent:
.90bd					_FAShiftToExponent2:
.90bd	98		tya				tya 								; compare Y to exponent
.90be	dd 28 06	cmp $0628,x			cmp 	NSExponent,x 				; reached the exponent required ?
.90c1	f0 08		beq $90cb			beq 	_FASEExit 					; exit if so.
.90c3	20 f4 88	jsr $88f4			jsr 	NSMShiftRight	 			; shift the mantissa right
.90c6	fe 28 06	inc $0628,x			inc 	NSExponent,x 				; increment exponent
.90c9	80 f2		bra $90bd			bra 	_FAShiftToExponent2
.90cb					_FASEExit:
.90cb	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/float/compare.asm

.90cc					CompareFloat:
.90cc	20 33 90	jsr $9033			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.90cf	bd 10 06	lda $0610,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.90d2	29 fc		and #$fc			and 	#$FC
.90d4	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.90d7	1d 20 06	ora $0620,x			ora 	NSMantissa3,x
.90da	f0 09		beq $90e5			beq 	_FCExit 					; zero, so approximately identical
.90dc	a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.90de	3c 00 06	bit $0600,x			bit 	NSStatus,x
.90e1	10 02		bpl $90e5			bpl 	_FCExit
.90e3					_FCNegative:
.90e3	a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.90e5					_FCExit:
.90e5	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/float/divide.asm

.90e6					FDivideCommand:
.90e6	fa		plx				plx	 								; restore stack position
.90e7	20 cc 91	jsr $91cc			jsr 	FloatPrepare 				; prepare for floats
.90ea					FloatDivide:
.90ea	48		pha				pha
.90eb	e8		inx				inx
.90ec	20 dd 91	jsr $91dd			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.90ef	ca		dex				dex
.90f0	c9 00		cmp #$00			cmp 	#0
.90f2	f0 20		beq $9114			beq 	_FDZero
.90f4	20 dd 91	jsr $91dd			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.90f7	f0 19		beq $9112			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.90f9	20 27 8f	jsr $8f27			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.90fc	20 b5 8e	jsr $8eb5			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.90ff	20 dd 91	jsr $91dd			jsr		NSNormalise 				; renormalise
.9102	20 c2 8f	jsr $8fc2			jsr 	CalculateSign 				; calculate result sign
.9105	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; calculate exponent
.9108	38		sec				sec
.9109	fd 29 06	sbc $0629,x			sbc 	NSExponent+1,x
.910c	38		sec				sec
.910d	e9 1e		sbc #$1e			sbc 	#30
.910f	9d 28 06	sta $0628,x			sta 	NSExponent,x
.9112					_FDExit:
.9112	68		pla				pla
.9113	60		rts				rts
.9114					_FDZero:
.9114	a9 03		lda #$03		lda	#3
.9116	4c c4 81	jmp $81c4		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/float/fractional.asm

.9119					FloatFractionalPart:
.9119	5a		phy				phy
.911a	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; take absolute value
.911d	29 7f		and #$7f			and 	#$7F
.911f	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9122	20 dd 91	jsr $91dd			jsr 	NSNormalise
.9125	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.9128	38		sec				sec
.9129	e9 e0		sbc #$e0			sbc 	#$E0
.912b	90 31		bcc $915e			bcc 	_FFPExit 					; already fractional
.912d	c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.912f	b0 2a		bcs $915b			bcs 	_FFPZero
.9131	a8		tay				tay 								; put count to do in Y
.9132	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; do each in turn.
.9135	20 60 91	jsr $9160			jsr 	_FFPPartial
.9138	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.913b	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.913e	20 60 91	jsr $9160			jsr 	_FFPPartial
.9141	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.9144	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.9147	20 60 91	jsr $9160			jsr 	_FFPPartial
.914a	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.914d	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.9150	20 60 91	jsr $9160			jsr 	_FFPPartial
.9153	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.9156	20 01 89	jsr $8901			jsr 	NSMIsZero 					; zeroed check.
.9159	d0 03		bne $915e			bne 	_FFPExit
.915b					_FFPZero:
.915b	20 d1 88	jsr $88d1			jsr 	NSMSetZero
.915e					_FFPExit:
.915e	7a		ply				ply
.915f	60		rts				rts
.9160					_FFPPartial:
.9160	c0 00		cpy #$00			cpy 	#0 							; no more to do
.9162	f0 17		beq $917b			beq 	_FFFPPExit
.9164	c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.9166	b0 0c		bcs $9174			bcs 	_FFFPPWholeByte
.9168	5a		phy				phy
.9169					_FFFPPLeft:
.9169	0a		asl a				asl 	a
.916a	88		dey				dey
.916b	d0 fc		bne $9169			bne 	_FFFPPLeft
.916d	7a		ply				ply
.916e					_FFFPPRight:
.916e	4a		lsr a				lsr 	a
.916f	88		dey				dey
.9170	d0 fc		bne $916e			bne 	_FFFPPRight
.9172	80 07		bra $917b			bra 	_FFFPPExit
.9174					_FFFPPWholeByte:
.9174	98		tya				tya 								; subtract 8 from count
.9175	38		sec				sec
.9176	e9 08		sbc #$08			sbc 	#8
.9178	a8		tay				tay
.9179	a9 00		lda #$00			lda 	#0 							; and clear all
.917b					_FFFPPExit:
.917b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/float/integer.asm

.917c					FloatIntegerPart:
.917c	48		pha				pha
.917d	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; is it integer already ?
.9180	f0 1f		beq $91a1			beq 	_FIPExit 					; if so do nothing
.9182	20 01 89	jsr $8901			jsr 	NSMIsZero 					; is it zero ?
.9185	f0 17		beq $919e			beq 	_FIPZero 					; if so return zero.
.9187	20 dd 91	jsr $91dd			jsr 	NSNormalise 				; normalise
.918a	f0 12		beq $919e			beq 	_FIPZero 					; normalised to zero, exit zero
.918c					_FIPShift:
.918c	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.918f	10 08		bpl $9199			bpl 	_FIPCheckZero
.9191	20 f4 88	jsr $88f4			jsr 	NSMShiftRight 				; shift mantissa right
.9194	fe 28 06	inc $0628,x			inc 	NSExponent,x 				; bump exponent
.9197	80 f3		bra $918c			bra 	_FIPShift
.9199					_FIPCheckZero:
.9199	20 01 89	jsr $8901			jsr 	NSMIsZero 					; avoid -0 problem
.919c	d0 03		bne $91a1			bne 	_FIPExit 					; set to zero if mantissa zero.
.919e					_FIPZero:
.919e	20 d1 88	jsr $88d1			jsr 	NSMSetZero
.91a1					_FIPExit:
.91a1	68		pla				pla
.91a2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/float/multiply.asm

.91a3					FloatingPointMultiply:
.91a3	20 cc 91	jsr $91cc			jsr 	FloatPrepare 				; prepare for floats
.91a6					FloatMultiply:
.91a6	48		pha				pha
.91a7	20 dd 91	jsr $91dd			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.91aa	f0 1b		beq $91c7			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.91ac	e8		inx				inx
.91ad	20 dd 91	jsr $91dd			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.91b0	ca		dex				dex
.91b1	c9 00		cmp #$00			cmp 	#0
.91b3	f0 0f		beq $91c4			beq 	_FDSetZero
.91b5	20 7d 8f	jsr $8f7d			jsr 	MultiplyShort 				; calculate the result.
.91b8	7d 28 06	adc $0628,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.91bb	18		clc				clc
.91bc	7d 29 06	adc $0629,x			adc 	NSExponent+1,x
.91bf	9d 28 06	sta $0628,x			sta 	NSExponent,x
.91c2	80 03		bra $91c7			bra 	_FDExit
.91c4					_FDSetZero:
.91c4	20 d1 88	jsr $88d1			jsr 	NSMSetZero 					; return 0
.91c7					_FDExit:
.91c7	20 dd 91	jsr $91dd			jsr 	NSNormalise 				; normalise the result
.91ca	68		pla				pla
.91cb	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/float/utility.asm

.91cc					FloatPrepare:
.91cc	20 aa 84	jsr $84aa			jsr 	DereferenceTopTwo 			; dereference the top two values
.91cf	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check ints/floats
.91d2	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.91d5	29 10		and #$10			and 	#NSBIsString
.91d7	d0 01		bne $91da			bne 	_FDType
.91d9	60		rts				rts
.91da					_FDType:
.91da	4c 37 93	jmp $9337			jmp 	TypeError
.91dd					NSNormalise:
.91dd	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; make float, keep sign
.91e0	29 80		and #$80			and 	#$80
.91e2	09 08		ora #$08			ora 	#NSTFloat
.91e4	9d 00 06	sta $0600,x			sta 	NSStatus,x
.91e7	20 01 89	jsr $8901			jsr 	NSMIsZero 					; if zero exit
.91ea	d0 09		bne $91f5			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.91ec	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; clear the sign bit.
.91ef	7e 00 06	ror $0600,x			ror 	NSStatus,x 					; (no -0)
.91f2	a9 00		lda #$00			lda 	#0 							; set Z flag
.91f4	60		rts				rts
.91f5					_NSNormaliseOptimise:
.91f5	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; upper byte zero ?
.91f8	d0 22		bne $921c			bne 	_NSNormaliseLoop
.91fa	bd 18 06	lda $0618,x			lda 	NSMantissa2,x 				; byte normalise
.91fd	30 1d		bmi $921c			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.91ff	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.9202	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.9205	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.9208	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.920b	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.920e	9e 08 06	stz $0608,x			stz 	NSMantissa0,x
.9211	bd 28 06	lda $0628,x			lda 	NSExponent,x
.9214	38		sec				sec
.9215	e9 08		sbc #$08			sbc 	#8
.9217	9d 28 06	sta $0628,x			sta 	NSExponent,x
.921a	80 d9		bra $91f5			bra 	_NSNormaliseOptimise
.921c					_NSNormaliseLoop:
.921c	3c 20 06	bit $0620,x			bit 	NSMantissa3,x 				; bit 30 set ?
.921f	70 08		bvs $9229			bvs 	_NSNExit 					; exit if so with Z flag clear
.9221	20 e6 88	jsr $88e6			jsr 	NSMShiftLeft 				; shift mantissa left
.9224	de 28 06	dec $0628,x			dec 	NSExponent,x 				; adjust exponent
.9227	80 f3		bra $921c			bra 	_NSNormaliseLoop
.9229					_NSNExit:
.9229	a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.922b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/term/dereference.asm

.84aa					DereferenceTopTwo:
.84aa	e8		inx				inx
.84ab	20 af 84	jsr $84af			jsr 	Dereference 				; deref x+1
.84ae	ca		dex				dex  								; falls through to deref x
.84af					Dereference:
.84af	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get the status byte
.84b2	29 20		and #$20			and 	#NSBIsReference 			; shift sign bit to carry, reference to bit 7
.84b4	f0 57		beq $850d			beq 	_DRFExit 					; not a reference
.84b6	5a		phy				phy
.84b7	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy address to dereference into zTemp0
.84ba	85 36		sta $36				sta 	zTemp0
.84bc	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.84bf	85 37		sta $37				sta 	zTemp0+1
.84c1	9e 10 06	stz $0610,x			stz 	NSMantissa1,x 				; clear second byte.
.84c4	b2 36		lda ($36)			lda 	(zTemp0) 					; do the first byte
.84c6	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.84c9	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get status byte.
.84cc	29 18		and #$18			and 	#NSBTypeMask 				; what type is it ?
.84ce	c9 10		cmp #$10			cmp 	#NSTString 					; if string, dereference two
.84d0	f0 0f		beq $84e1			beq 	_DRFDereferenceTwo
.84d2	c9 08		cmp #$08			cmp 	#NSTFloat 					; if float, do full dereference.
.84d4	f0 39		beq $850f			beq 	_DRFFull
.84d6	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be integer - how many bytes ?
.84d9	29 03		and #$03			and 	#3
.84db	f0 32		beq $850f			beq 	_DRFFull 					; the whole word
.84dd	c9 01		cmp #$01			cmp 	#1 							; is it 10 (e.g. 2 bytes)
.84df	f0 07		beq $84e8			beq		_DRFClear23 				; no, one byte, clear 2 & 3 and exit
.84e1					_DRFDereferenceTwo:
.84e1	a0 01		ldy #$01			ldy 	#1
.84e3	b1 36		lda ($36),y			lda 	(zTemp0),y
.84e5	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.84e8					_DRFClear23:
.84e8	9e 18 06	stz $0618,x			stz 	NSMantissa2,x 				; clear upper bytes, only read 1 or 2 bytes
.84eb	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.84ee	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; make it a value of that type.
.84f1	29 18		and #$18			and 	#NSBTypeMask
.84f3	9d 00 06	sta $0600,x			sta 	NSStatus,x
.84f6	c9 10		cmp #$10			cmp 	#NSTString  				; is it a string
.84f8	d0 12		bne $850c			bne 	_DRFNotString
.84fa	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; check address is zero
.84fd	1d 10 06	ora $0610,x			ora 	NSMantissa1,x
.8500	d0 0a		bne $850c			bne 	_DRFNotString
.8502	a9 0e		lda #$0e			lda 	#_DRFNullString & $FF 		; if so, return reference to ""
.8504	9d 08 06	sta $0608,x			sta 	NSMantissa0,X
.8507	a9 85		lda #$85			lda 	#_DRFNullString >> 8
.8509	9d 10 06	sta $0610,x			sta 	NSMantissa1,X
.850c					_DRFNotString
.850c	7a		ply				ply 								; restore Y and exit
.850d					_DRFExit:
.850d	60		rts				rts
.850e					_DRFNullString:
>850e	00						.byte 	0
.850f					_DRFFull:
.850f	a0 01		ldy #$01			ldy 	#1 							; get remaining 3 bytes.
.8511	b1 36		lda ($36),y			lda 	(zTemp0),y
.8513	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8516	c8		iny				iny
.8517	b1 36		lda ($36),y			lda 	(zTemp0),y
.8519	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.851c	c8		iny				iny
.851d	b1 36		lda ($36),y			lda 	(zTemp0),y
.851f	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8522	9e 28 06	stz $0628,x			stz 	NSExponent,x 				; clear exponent.
.8525	bd 00 06	lda $0600,x			lda		NSStatus,x 					; see if type is integer
.8528	29 18		and #$18			and 	#NSBTypeMask  				; type information only
.852a	9d 00 06	sta $0600,x			sta 	NSStatus,x 					; update it back.
.852d	f0 06		beq $8535			beq 	_DRFNoExponent
.852f	c8		iny				iny 								; if not, read the exponent as well.
.8530	b1 36		lda ($36),y			lda 	(zTemp0),y
.8532	9d 28 06	sta $0628,x			sta 	NSExponent,x
.8535					_DRFNoExponent:
.8535	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; is the most significant bit set ?
.8538	10 0d		bpl $8547			bpl 	_DRFExit2 					; if not, then exit.
.853a	29 7f		and #$7f			and 	#$7F 						; clear that bit.
.853c	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.853f	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; set the sign flag
.8542	09 80		ora #$80			ora 	#NSBIsNegative
.8544	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8547					_DRFExit2:
.8547	7a		ply				ply
.8548	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/term/number.asm

=1					ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2					ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3					ESTA_Decimal = 3 							; fractional part.
.8549					EncodeNumberStart:
.8549	38		sec				sec
.854a	80 01		bra $854d			bra 	EncodeNumberContinue+1
.854c					EncodeNumberContinue:
.854c	18		clc				clc
.854d					EncodeNumber:
.854d	08		php				php 								; save reset.
.854e	c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.8550	f0 12		beq $8564			beq 	_ENIsOkay
.8552	c9 30		cmp #$30			cmp 	#"0"
.8554	90 04		bcc $855a			bcc 	_ENBadNumber
.8556	c9 3a		cmp #$3a			cmp 	#"9"+1
.8558	90 0a		bcc $8564			bcc 	_ENIsOkay
.855a					_ENBadNumber:
.855a	28		plp				plp 								; throw saved reset
.855b	ad 05 07	lda $0705			lda 	EncodeState 				; decimal mode, construct final number
.855e	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.8560	f0 7e		beq $85e0			beq 	_ENConstructFinal
.8562					_ENFail:
.8562	18		clc				clc 								; not allowed
.8563	60		rts				rts
.8564					_ENIsOkay:
.8564	28		plp				plp 								; are we restarting
.8565	90 15		bcc $857c			bcc 	_ENNoRestart
.8567					_ENStartEncode:
.8567	c9 2e		cmp #$2e			cmp 	#'.'						; first is DP
.8569	f0 0c		beq $8577			beq 	_ENFirstDP
.856b	29 0f		and #$0f			and 	#15 						; put digit in mantissa
.856d	20 d3 88	jsr $88d3			jsr 	NSMSetByte
.8570	a9 01		lda #$01			lda 	#ESTA_Low
.8572					_ENExitChange:
.8572	8d 05 07	sta $0705			sta 	EncodeState 				; save new state
.8575	38		sec				sec
.8576	60		rts				rts
.8577					_ENFirstDP:
.8577	20 d1 88	jsr $88d1			jsr 	NSMSetZero 					; clear integer part
.857a	80 3f		bra $85bb			bra 	_ESTASwitchFloat			; go straight to float and exi
.857c					_ENNoRestart:
.857c	48		pha				pha 								; save on stack.
.857d	ad 05 07	lda $0705			lda 	EncodeState 				; get current state
.8580	c9 01		cmp #$01			cmp 	#ESTA_Low
.8582	f0 09		beq $858d			beq  	_ESTALowState
.8584	c9 02		cmp #$02			cmp 	#ESTA_High
.8586	f0 29		beq $85b1			beq 	_ESTAHighState
.8588	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.858a	f0 3b		beq $85c7			beq 	_ESTADecimalState
>858c	db						.byte 	$DB 						; causes a break in the emulator
.858d					_ESTALowState:
.858d	68		pla				pla 								; get value back
.858e	c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.8590	f0 29		beq $85bb			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.8592	29 0f		and #$0f			and 	#15 						; make digit
.8594	8d 06 07	sta $0706			sta 	DigitTemp 					; save it.
.8597	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.859a	0a		asl a				asl 	a
.859b	0a		asl a				asl 	a
.859c	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.859f	0a		asl a				asl 	a
.85a0	6d 06 07	adc $0706			adc 	DigitTemp
.85a3	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.85a6	c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.85a8	90 05		bcc $85af			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.85aa	a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.85ac	8d 05 07	sta $0705			sta 	EncodeState
.85af					_ESTANoSwitch:
.85af	38		sec				sec
.85b0	60		rts				rts
.85b1					_ESTAHighState:
.85b1	68		pla				pla 								; get value back
.85b2	c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.85b4	f0 05		beq $85bb			beq 	_ESTASwitchFloat
.85b6	20 1a 86	jsr $861a			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.85b9	38		sec				sec
.85ba	60		rts				rts
.85bb					_ESTASwitchFloat:
.85bb	9c 07 07	stz $0707			stz 	DecimalCount
.85be	e8		inx				inx 								; zero the decimal additive.
.85bf	20 d1 88	jsr $88d1			jsr 	NSMSetZero
.85c2	ca		dex				dex
.85c3	a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.85c5	80 ab		bra $8572			bra 	_ENExitChange
.85c7					_ESTADecimalState:
.85c7	68		pla				pla 								; digit.
.85c8	c9 2e		cmp #$2e			cmp 	#"." 						; fail on 2nd decimal point.
.85ca	f0 96		beq $8562			beq 	_ENFail
.85cc	e8		inx				inx 								; put digit into fractional part of X+1
.85cd	20 1a 86	jsr $861a			jsr 	ESTAShiftDigitIntoMantissa
.85d0	ca		dex				dex
.85d1	ee 07 07	inc $0707			inc 	DecimalCount 				; bump the count of decimals
.85d4	ad 07 07	lda $0707			lda 	DecimalCount
.85d7	c9 0b		cmp #$0b			cmp 	#11
.85d9	f0 02		beq $85dd			beq 	_ESTADSFail
.85db	38		sec				sec
.85dc	60		rts				rts
.85dd					_ESTADSFail:
.85dd	4c 32 93	jmp $9332			jmp 	RangeError
.85e0					_ENConstructFinal:
.85e0	ad 07 07	lda $0707			lda 	DecimalCount 				; get decimal count
.85e3	f0 33		beq $8618			beq 	_ENCFExit 					; no decimals
.85e5	5a		phy				phy
.85e6	0a		asl a				asl 	a 							; x 4 and CLC
.85e7	0a		asl a				asl 	a
.85e8	6d 07 07	adc $0707			adc 	DecimalCount
.85eb	a8		tay				tay
.85ec	b9 f1 92	lda $92f1,y			lda 	DecimalScalarTable-5,y 		; copy decimal scalar to X+2
.85ef	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.85f2	b9 f2 92	lda $92f2,y			lda 	DecimalScalarTable-5+1,y
.85f5	9d 12 06	sta $0612,x			sta 	NSMantissa1+2,x
.85f8	b9 f3 92	lda $92f3,y			lda 	DecimalScalarTable-5+2,y
.85fb	9d 1a 06	sta $061a,x			sta 	NSMantissa2+2,x
.85fe	b9 f4 92	lda $92f4,y			lda 	DecimalScalarTable-5+3,y
.8601	9d 22 06	sta $0622,x			sta 	NSMantissa3+2,x
.8604	b9 f5 92	lda $92f5,y			lda 	DecimalScalarTable-5+4,y
.8607	9d 2a 06	sta $062a,x			sta 	NSExponent+2,x
.860a	a9 08		lda #$08			lda 	#NSTFloat
.860c	9d 02 06	sta $0602,x			sta 	NSStatus+2,x
.860f	7a		ply				ply
.8610	e8		inx				inx 								; multiply decimal const by decimal scalar
.8611	20 a6 91	jsr $91a6			jsr 	FloatMultiply
.8614	ca		dex				dex
.8615	20 3b 90	jsr $903b			jsr 	FloatAdd 					; add to integer part.
.8618					_ENCFExit:
.8618	18		clc				clc 								; reject the digit.
.8619	60		rts				rts
.861a					ESTAShiftDigitIntoMantissa:
.861a	29 0f		and #$0f			and 	#15 						; save digit
.861c	48		pha				pha
.861d	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; push mantissa on stack
.8620	48		pha				pha
.8621	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.8624	48		pha				pha
.8625	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8628	48		pha				pha
.8629	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.862c	48		pha				pha
.862d	20 e6 88	jsr $88e6			jsr 	NSMShiftLeft 				; x 2
.8630	20 e6 88	jsr $88e6			jsr 	NSMShiftLeft 				; x 4
.8633	18		clc				clc 								; pop mantissa and add
.8634	68		pla				pla
.8635	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.8638	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.863b	68		pla				pla
.863c	7d 10 06	adc $0610,x			adc 	NSMantissa1,x
.863f	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8642	68		pla				pla
.8643	7d 18 06	adc $0618,x			adc 	NSMantissa2,x
.8646	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8649	68		pla				pla
.864a	7d 20 06	adc $0620,x			adc 	NSMantissa3,x
.864d	9d 20 06	sta $0620,x			sta 	NSMantissa3,x 				; x 5
.8650	20 e6 88	jsr $88e6			jsr 	NSMShiftLeft 				; x 10
.8653	68		pla				pla 								; add digit
.8654	18		clc				clc
.8655	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.8658	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.865b	90 0d		bcc $866a			bcc 	_ESTASDExit
.865d	fe 10 06	inc $0610,x			inc 	NSMantissa1,x
.8660	d0 08		bne $866a			bne 	_ESTASDExit
.8662	fe 18 06	inc $0618,x			inc 	NSMantissa2,x
.8665	d0 03		bne $866a			bne 	_ESTASDExit
.8667	fe 20 06	inc $0620,x			inc 	NSMantissa3,x
.866a					_ESTASDExit:
.866a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/term/term.asm

.866b					EvaluateTerm:
.866b	b1 30		lda ($30),y			lda 	(codePtr),y
.866d	30 18		bmi $8687			bmi 	_ETCheckUnary 				; unary function ? (text ones)
.866f	c9 40		cmp #$40			cmp 	#$40 						; 40-7F => identifier reference
.8671	b0 6f		bcs $86e2			bcs 	_ETVariable
.8673	c9 30		cmp #$30			cmp 	#'0' 						; is it a number
.8675	90 6f		bcc $86e6			bcc 	_ETPuncUnary 				; if not it might be a punctuation unary.
.8677	c9 3a		cmp #$3a			cmp 	#'9'+1
.8679	b0 6b		bcs $86e6			bcs 	_ETPuncUnary
.867b	20 49 85	jsr $8549			jsr 	EncodeNumberStart 			; can't fail as it's 0-9 !
.867e					_ETNumber:
.867e	c8		iny				iny 								; keep encoding until we have the numbers
.867f	b1 30		lda ($30),y			lda 	(codePtr),y
.8681	20 4c 85	jsr $854c			jsr 	EncodeNumberContinue
.8684	b0 f8		bcs $867e			bcs 	_ETNumber 					; go back if accepted.
.8686	60		rts				rts
.8687					_ETCheckUnary:
.8687	c9 ff		cmp #$ff			cmp 	#KWC_STRING 				; string token
.8689	f0 41		beq $86cc			beq 	_ETString
.868b	c9 fe		cmp #$fe			cmp 	#KWC_HEXCONST 				; hex constant.
.868d	f0 12		beq $86a1			beq 	_ETHexConstant
.868f	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; check it actually is a unary function
.8691	90 0b		bcc $869e			bcc 	_ETSyntaxError
.8693	c9 96		cmp #$96			cmp 	#KWC_LAST_UNARY+1
.8695	b0 07		bcs $869e			bcs 	_ETSyntaxError
.8697	da		phx				phx 								; push X on the stack
.8698	0a		asl a				asl 	a 							; put vector x 2 into X
.8699	aa		tax				tax
.869a	c8		iny				iny 								; consume unary function token
.869b	7c 94 80	jmp ($8094,x)			jmp 	(VectorSet0,x) 				; and do it.
.869e					_ETSyntaxError:
.869e	4c 2d 93	jmp $932d			jmp 	SyntaxError
.86a1					_ETHexConstant:
.86a1	c8		iny				iny 								; skip #
.86a2	c8		iny				iny 								; skip count
.86a3	20 d1 88	jsr $88d1			jsr 	NSMSetZero 					; clear result
.86a6					_ETHLoop:
.86a6	b1 30		lda ($30),y			lda 	(codePtr),y
.86a8	c8		iny				iny 								; and consume
.86a9	c9 00		cmp #$00			cmp 	#0 							; exit if zero
.86ab	f0 1e		beq $86cb			beq 	_ETHExit
.86ad	48		pha				pha 								; save on stack.
.86ae	20 e6 88	jsr $88e6			jsr 	NSMShiftLeft 				; x 2
.86b1	20 e6 88	jsr $88e6			jsr 	NSMShiftLeft 				; x 4
.86b4	20 e6 88	jsr $88e6			jsr 	NSMShiftLeft 				; x 8
.86b7	20 e6 88	jsr $88e6			jsr 	NSMShiftLeft 				; x 16
.86ba	68		pla				pla 								; ASCII
.86bb	c9 41		cmp #$41			cmp 	#'A'
.86bd	90 02		bcc $86c1			bcc 	_ETHNotChar
.86bf	e9 07		sbc #$07			sbc 	#7
.86c1					_ETHNotChar:
.86c1	29 0f		and #$0f			and 	#15 						; digit now
.86c3	1d 08 06	ora $0608,x			ora 	NSMantissa0,x 				; put in LS Nibble
.86c6	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.86c9	80 db		bra $86a6			bra 	_ETHLoop 					; go round.
.86cb					_ETHExit:
.86cb	60		rts				rts
.86cc					_ETString:
.86cc	c8		iny				iny 								; look at length
.86cd	b1 30		lda ($30),y			lda 	(codePtr),y
.86cf	48		pha				pha
.86d0	c8		iny				iny 								; first character
.86d1	20 4a 89	jsr $894a			jsr 	MemoryInline 				; put address of string at (codePtr),y on stack
.86d4	68		pla				pla 								; restore count and save
.86d5	85 36		sta $36				sta 	zTemp0
.86d7	98		tya				tya 								; add length to Y to skip it.
.86d8	18		clc				clc
.86d9	65 36		adc $36				adc 	zTemp0
.86db	a8		tay				tay
.86dc	a9 10		lda #$10			lda 	#NSTString 					; mark as string
.86de	9d 00 06	sta $0600,x			sta 	NSStatus,x
.86e1	60		rts				rts
.86e2					_ETVariable:
>86e2	db						.byte 	$DB 						; causes a break in the emulator
.86e3	4c ff ff	jmp $ffff			jmp 	$FFFF
.86e6					_ETPuncUnary:
.86e6	c8		iny				iny 								; consume the unary character
.86e7	c9 2d		cmp #$2d			cmp 	#KWD_MINUS 					; unary minus
.86e9	f0 31		beq $871c			beq 	_ETUnaryNegate
.86eb	c9 10		cmp #$10			cmp 	#KWD_AT 					; @ reference -> constant
.86ed	f0 3d		beq $872c			beq 	_ETDereference
.86ef	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; parenthesis
.86f1	f0 58		beq $874b			beq 	_ETParenthesis
.86f3	c9 24		cmp #$24			cmp 	#KWD_DOLLAR
.86f5	f0 43		beq $873a			beq 	_ETStringReference
.86f7	64 36		stz $36				stz 	zTemp0 						; zTemp0 is the indirection level.
.86f9	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; byte indirection (0) ?
.86fb	f0 06		beq $8703			beq 	_ETIndirection
.86fd	e6 36		inc $36				inc 	zTemp0
.86ff	c9 21		cmp #$21			cmp 	#KWD_PLING					; word indirection (1) \
.8701	d0 9b		bne $869e			bne 	_ETSyntaxError
.8703					_ETIndirection:
.8703	a5 36		lda $36				lda 	zTemp0 						; push indirection amount (0-1) => (1-2) on the stack
.8705	1a		inc a				inc 	a
.8706	48		pha				pha
.8707	20 6b 86	jsr $866b			jsr 	EvaluateTerm				; evaluate the term
.870a	20 af 84	jsr $84af			jsr 	Dereference 				; dereference it.
.870d	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a +ve integer.
.8710	d0 07		bne $8719			bne 	_ETTypeMismatch
.8712	68		pla				pla 								; indirection 1-2
.8713	09 20		ora #$20			ora 	#NSBIsReference 			; make it a reference.
.8715	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8718	60		rts				rts
.8719					_ETTypeMismatch:
.8719	4c 37 93	jmp $9337			jmp 	TypeError
.871c					_ETUnaryNegate:
.871c	20 6b 86	jsr $866b			jsr 	EvaluateTerm				; evaluate the term
.871f	20 af 84	jsr $84af			jsr 	Dereference 				; dereference it.
.8722	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a number
.8725	29 10		and #$10			and 	#NSTString
.8727	d0 f0		bne $8719			bne 	_ETTypeMismatch
.8729	4c 7d 88	jmp $887d			jmp 	NSMNegate  					; just toggles the sign bit.
.872c					_ETDereference:
.872c	20 6b 86	jsr $866b			jsr 	EvaluateTerm				; evaluate the term
.872f	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a reference
.8732	29 20		and #$20			and 	#NSBIsReference
.8734	f0 e3		beq $8719			beq 	_ETTypeMismatch
.8736	9e 00 06	stz $0600,x			stz 	NSStatus,x 					; make it an integer address
.8739	60		rts				rts
.873a					_ETStringReference:
.873a	20 6b 86	jsr $866b			jsr 	EvaluateTerm				; evaluate the term
.873d	20 af 84	jsr $84af			jsr 	Dereference 				; dereference it.
.8740	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a +ve integer.
.8743	d0 d4		bne $8719			bne 	_ETTypeMismatch
.8745	a9 10		lda #$10			lda 	#NSTString 					; make it a string
.8747	9d 00 06	sta $0600,x			sta 	NSStatus,x
.874a	60		rts				rts
.874b					_ETParenthesis:
.874b	20 6d 84	jsr $846d			jsr 	EvaluateExpression 			; evaluate here, from lowest precedence
.874e	20 ce 8d	jsr $8dce			jsr 	CheckRightBracket 			; check for )
.8751	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/unary/number/abs.asm

.922c					AbsUnary:
.922c	fa		plx				plx 								; restore stack pos
.922d	20 25 88	jsr $8825			jsr 	EvaluateNumber 				; get a float or int
.9230	20 ce 8d	jsr $8dce			jsr 	CheckRightBracket
.9233	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; clear the sign bit
.9236	29 7f		and #$7f			and 	#$7F
.9238	9d 00 06	sta $0600,x			sta 	NSStatus,x
.923b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/unary/number/alloc.asm

.8752					AllocUnary:
.8752	fa		plx				plx 								; restore stack pos
.8753	20 5d 88	jsr $885d			jsr 	Evaluate16BitInteger		; get bytes required.
.8756	20 ce 8d	jsr $8dce			jsr 	CheckRightBracket
.8759	da		phx				phx 								; save X/Y
.875a	5a		phy				phy
.875b	8a		txa				txa 								; copy X into Y
.875c	a8		tay				tay
.875d	b9 10 06	lda $0610,y			lda		NSMantissa1,y 				; get size
.8760	aa		tax				tax
.8761	b9 08 06	lda $0608,y			lda 	NSMantissa0,y
.8764	20 71 87	jsr $8771			jsr 	AllocateXABytes 			; allocate memory
.8767	99 08 06	sta $0608,y			sta 	NSMantissa0,y 				; write address out.
.876a	8a		txa				txa
.876b	99 10 06	sta $0610,y			sta 	NSMantissa1,y
.876e	7a		ply				ply
.876f	fa		plx				plx
.8770	60		rts				rts
.8771					AllocateXABytes:
.8771	5a		phy				phy
.8772	ac 0c 07	ldy $070c			ldy 	lowMemPtr 					; push current address on stack
.8775	5a		phy				phy
.8776	ac 0d 07	ldy $070d			ldy 	lowMemPtr+1
.8779	5a		phy				phy
.877a	18		clc				clc
.877b	6d 0c 07	adc $070c			adc 	lowMemPtr
.877e	8d 0c 07	sta $070c			sta 	lowMemPtr
.8781	8a		txa				txa
.8782	6d 0d 07	adc $070d			adc 	lowMemPtr+1
.8785	8d 0d 07	sta $070d			sta 	lowMemPtr+1
.8788	fa		plx				plx
.8789	68		pla				pla
.878a	7a		ply				ply
.878b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/unary/number/asc.asm

.923c					AscUnary:
.923c	fa		plx				plx 								; restore stack pos
.923d	20 30 88	jsr $8830			jsr 	EvaluateString 				; get a string
.9240	b2 36		lda ($36)			lda 	(zTemp0)					; get/return firs character
.9242	20 d3 88	jsr $88d3			jsr 	NSMSetByte
.9245	20 ce 8d	jsr $8dce			jsr 	CheckRightBracket
.9248	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/unary/number/frac.asm

.9249					FracUnary:
.9249	fa		plx				plx 								; restore stack pos
.924a	20 25 88	jsr $8825			jsr 	EvaluateNumber 				; get a float or int
.924d	20 ce 8d	jsr $8dce			jsr 	CheckRightBracket
.9250	bd 00 06	lda $0600,x			lda 	NSStatus,x
.9253	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.9255	f0 04		beq $925b			beq 	_IUZero
.9257	20 19 91	jsr $9119			jsr 	FloatFractionalPart
.925a	60		rts				rts
.925b					_IUZero:
.925b	20 d1 88	jsr $88d1			jsr 	NSMSetZero
.925e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/unary/number/int.asm

.925f					IntUnary:
.925f	fa		plx				plx 								; restore stack pos
.9260	20 25 88	jsr $8825			jsr 	EvaluateNumber 				; get a float or int
.9263	20 ce 8d	jsr $8dce			jsr 	CheckRightBracket
.9266	bd 00 06	lda $0600,x			lda 	NSStatus,x
.9269	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.926b	f0 03		beq $9270			beq 	_IUExit
.926d	20 7c 91	jsr $917c			jsr 	FloatIntegerPart
.9270					_IUExit:
.9270	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/unary/number/len.asm

.9271					LenUnary:
.9271	fa		plx				plx 								; restore stack pos
.9272	20 30 88	jsr $8830			jsr 	EvaluateString 				; get a string
.9275	5a		phy				phy
.9276	a0 00		ldy #$00			ldy 	#0 							; find length
.9278					_LenFind:
.9278	b1 36		lda ($36),y			lda 	(zTemp0),y
.927a	f0 06		beq $9282			beq 	_LenExit
.927c	c8		iny				iny
.927d	d0 f9		bne $9278			bne 	_LenFind
.927f	4c 32 93	jmp $9332			jmp 	RangeError 					; string > 255
.9282					_LenExit:
.9282	98		tya				tya
.9283	20 d3 88	jsr $88d3			jsr 	NSMSetByte
.9286	7a		ply				ply
.9287	20 ce 8d	jsr $8dce			jsr 	CheckRightBracket
.928a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/unary/number/not.asm

.878c					Unary_Not:
.878c	fa		plx				plx
.878d	20 48 88	jsr $8848			jsr 	EvaluateInteger 			; get integer
.8790	20 ce 8d	jsr $8dce			jsr 	CheckRightBracket
.8793	20 01 89	jsr $8901			jsr 	NSMIsZero 					; zero mantissa ?
.8796	f0 04		beq $879c			beq 	_NotZero
.8798	20 d1 88	jsr $88d1			jsr 	NSMSetZero
.879b	60		rts				rts
.879c					_NotZero:
.879c	4c e8 8d	jmp $8de8			jmp 	ReturnTrue
.879f					_UNBad:
.879f	4c 3c 93	jmp $933c			jmp 	ArgumentError

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/unary/number/rnd.asm

.87a2					Unary_Rnd:
.87a2	20 25 88	jsr $8825			jsr 	EvaluateNumber 				; number to use.
.87a5	20 ce 8d	jsr $8dce			jsr 	CheckRightBracket 			; closing bracket
.87a8	20 d1 87	jsr $87d1			jsr 	Random32Bit 				; generate a number.
.87ab	ad 08 07	lda $0708			lda 	RandomSeed+0
.87ae	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.87b1	ad 09 07	lda $0709			lda 	RandomSeed+1
.87b4	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.87b7	ad 0a 07	lda $070a			lda 	RandomSeed+2
.87ba	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.87bd	ad 0b 07	lda $070b			lda 	RandomSeed+3
.87c0	29 7f		and #$7f			and 	#$7F 						; make legal mantissa
.87c2	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.87c5	a9 e1		lda #$e1			lda 	#-31 						; force into 0-1 range
.87c7	8d 28 06	sta $0628			sta 	NSExponent
.87ca	a9 08		lda #$08			lda 	#NSTFloat
.87cc	8d 00 06	sta $0600			sta 	NSStatus 					; positive.
>87cf	db						.byte 	$DB 						; causes a break in the emulator
.87d0	60		rts				rts
.87d1					Random32Bit:
.87d1	5a		phy				phy
.87d2	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.87d4	ad 08 07	lda $0708			lda 	RandomSeed+0 				; check the seed isn't zero
.87d7	d0 03		bne $87dc			bne 	_Random1
.87d9	a8		tay				tay 								; if so do it 256 times
.87da	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.87dc					_Random1:
.87dc	0a		asl a				asl 	a 							; LSFR RNG
.87dd	2e 09 07	rol $0709			rol 	RandomSeed+1
.87e0	2e 0a 07	rol $070a			rol 	RandomSeed+2
.87e3	2e 0b 07	rol $070b			rol 	RandomSeed+3
.87e6	90 02		bcc $87ea			bcc 	_Random2
.87e8	49 c5		eor #$c5			eor 	#$C5
.87ea					_Random2:
.87ea	88		dey				dey
.87eb	d0 ef		bne $87dc			bne 	_Random1
.87ed	7a		ply				ply
.87ee	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/unary/number/sgn.asm

.928b					SgnUnary:
.928b	fa		plx				plx 								; restore stack pos
.928c	20 25 88	jsr $8825			jsr 	EvaluateNumber 				; get a float or int
.928f	20 ce 8d	jsr $8dce			jsr 	CheckRightBracket
.9292	20 01 89	jsr $8901			jsr 	NSMIsZero 					; if zero
.9295	f0 10		beq $92a7			beq 	_SGZero  					; return Int Zero
.9297	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get status w/sign
.929a	48		pha				pha
.929b	a9 01		lda #$01			lda 	#1 							; set to 1
.929d	20 d3 88	jsr $88d3			jsr 	NSMSetByte
.92a0	68		pla				pla
.92a1	29 80		and #$80			and		#$80 						; copy the sign byte out
.92a3	9d 00 06	sta $0600,x			sta 	NSStatus,x
.92a6	60		rts				rts
.92a7	20 d1 88	jsr $88d1	_SGZero:jsr 	NSMSetZero
.92aa	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/unary/number/val.asm

.92ab					ValUnary:
.92ab	fa		plx				plx 								; restore stack pos
.92ac	20 c1 92	jsr $92c1			jsr 	ValMainCode 				; do the main val() code
.92af	b0 01		bcs $92b2			bcs 	_VUError 					; couldn't convert
.92b1	60		rts				rts
.92b2					_VUError:
.92b2	4c 37 93	jmp $9337			jmp 	TypeError
.92b5					IsValUnary:
.92b5	fa		plx				plx 								; restore stack pos
.92b6	20 c1 92	jsr $92c1			jsr 	ValMainCode 				; do the main val() code
.92b9	b0 03		bcs $92be			bcs 	_VUBad
.92bb	4c e8 8d	jmp $8de8			jmp 	ReturnTrue
.92be					_VUBad:
.92be	4c f4 8d	jmp $8df4			jmp 	ReturnFalse
.92c1					ValMainCode:
.92c1	20 30 88	jsr $8830			jsr 	EvaluateString 				; get a string
.92c4	20 ce 8d	jsr $8dce			jsr 	CheckRightBracket 			; check right bracket present
.92c7	5a		phy				phy
.92c8	b2 36		lda ($36)			lda 	(zTemp0) 					; check not empty string
.92ca	f0 17		beq $92e3			beq 	_VMCFail2
.92cc	a0 ff		ldy #$ff			ldy 	#$FF 						; start position
.92ce	48		pha				pha 								; save first character
.92cf	c9 2d		cmp #$2d			cmp 	#"-"		 				; is it -
.92d1	d0 01		bne $92d4			bne 	_VMCStart
.92d3	c8		iny				iny 								; skip over -
.92d4					_VMCStart:
.92d4	38		sec				sec 								; initialise first time round.
.92d5					_VMCNext:
.92d5	c8		iny				iny 								; pre-increment
.92d6	b1 36		lda ($36),y			lda 	(zTemp0),y 					; next character
.92d8	f0 0c		beq $92e6			beq 	_VMCSuccess 				; successful.
.92da	20 4d 85	jsr $854d			jsr 	EncodeNumber 				; send it to the number-builder
.92dd	90 03		bcc $92e2			bcc 	_VMCFail 					; if failed, give up.
.92df	18		clc				clc 								; next time round, countinue
.92e0	80 f3		bra $92d5			bra 	_VMCNext
.92e2					_VMCFail:
.92e2	68		pla				pla
.92e3					_VMCFail2:
.92e3	7a		ply				ply
.92e4	38		sec				sec
.92e5	60		rts				rts
.92e6					_VMCSuccess:
.92e6	a9 00		lda #$00			lda 	#0 							; construct final
.92e8	20 4d 85	jsr $854d			jsr 	EncodeNumber
.92eb	68		pla				pla
.92ec	c9 2d		cmp #$2d			cmp 	#"-"
.92ee	d0 03		bne $92f3			bne 	_VMCNotNegative
.92f0	20 7d 88	jsr $887d			jsr		NSMNegate
.92f3					_VMCNotNegative:
.92f3	7a		ply				ply
.92f4	18		clc				clc
.92f5	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/unary/string/chr.asm

.87ef					ChrUnary:
.87ef	fa		plx				plx 								; restore stack pos
.87f0	20 69 88	jsr $8869			jsr 	Evaluate8BitInteger			; get value
.87f3	48		pha				pha
.87f4	20 ce 8d	jsr $8dce			jsr 	CheckRightBracket
.87f7	a9 01		lda #$01			lda 	#1 							; allocate space for one char
.87f9	20 4c 94	jsr $944c			jsr 	StringTempAllocate
.87fc	68		pla				pla 								; write number to it
.87fd	20 8a 94	jsr $948a			jsr 	StringTempWrite
.8800	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/unary/string/spc.asm

.8801					SpcUnary:
.8801	fa		plx				plx 								; restore stack pos
.8802	20 69 88	jsr $8869			jsr 	Evaluate8BitInteger			; get value
.8805	5a		phy				phy
.8806	48		pha				pha 								; save count
.8807	20 4c 94	jsr $944c			jsr 	StringTempAllocate
.880a	7a		ply				ply 								; to do count in Y
.880b					_SpcLoop:
.880b	c0 00		cpy #$00			cpy 	#0
.880d	f0 08		beq $8817			beq 	_SpcExit
.880f	a9 20		lda #$20			lda 	#32
.8811	20 8a 94	jsr $948a			jsr 	StringTempWrite
.8814	88		dey				dey
.8815	80 f4		bra $880b			bra 	_SPCLoop
.8817					_SpcExit:
.8817	7a		ply				ply
.8818	20 ce 8d	jsr $8dce			jsr 	CheckRightBracket
.881b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/utility/exprhelper.asm

.881c					EvaluateValue:
.881c	48		pha				pha
.881d	20 6b 84	jsr $846b			jsr		EvaluateExpressionAt0 		; expression
.8820	20 af 84	jsr $84af			jsr 	Dereference					; derefernce it
.8823	68		pla				pla
.8824	60		rts				rts
.8825					EvaluateNumber:
.8825	20 1c 88	jsr $881c			jsr 	EvaluateValue 				; get a value
.8828	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if string.
.882b	29 10		and #$10			and 	#NSBIsString
.882d	d0 16		bne $8845			bne 	HelperTypeError
.882f	60		rts				rts
.8830					EvaluateString:
.8830	20 1c 88	jsr $881c			jsr 	EvaluateValue 				; get a value
.8833	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if string.
.8836	29 10		and #$10			and 	#NSBIsString
.8838	f0 0b		beq $8845			beq 	HelperTypeError
.883a					CopyAddressToTemp0:
.883a	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy address -> zTemp0
.883d	85 36		sta $36				sta 	zTemp0
.883f	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8842	85 37		sta $37				sta 	zTemp0+1
.8844	60		rts				rts
.8845					HelperTypeError:
.8845	4c 37 93	jmp $9337			jmp 	TypeError
.8848					EvaluateInteger:
.8848	20 25 88	jsr $8825			jsr 	EvaluateNumber
.884b	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check exponent is zero
.884e	d0 0a		bne $885a			bne 	HelperValueError 			; if not, it's a float.
.8850	60		rts				rts
.8851					EvaluateUnsignedInteger:
.8851	20 48 88	jsr $8848			jsr 	EvaluateInteger 			; check integer is +ve
.8854	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8857	30 01		bmi $885a			bmi 	HelperValueError
.8859	60		rts				rts
.885a					HelperValueError:
.885a	4c 3c 93	jmp $933c			jmp 	ArgumentError
.885d					Evaluate16BitInteger:
.885d	20 51 88	jsr $8851			jsr	 	EvaluateUnsignedInteger		; get integer
.8860	bd 20 06	lda $0620,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.8863	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.8866	d0 f2		bne $885a			bne 	HelperValueError
.8868	60		rts				rts
.8869					Evaluate8BitInteger:
.8869	20 51 88	jsr $8851			jsr	 	EvaluateUnsignedInteger 	; get an integer
.886c	d0 ec		bne $885a			bne 	HelperValueError
.886e	bd 20 06	lda $0620,x			lda 	NSMantissa3,x	 			; bytes 1, 2 & 3 must be zero
.8871	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.8874	1d 10 06	ora $0610,x			ora 	NSMantissa1,x
.8877	d0 e1		bne $885a			bne 	HelperValueError
.8879	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.887c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/utility/utility.asm

.887d					NSMNegate:
.887d	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8880	49 80		eor #$80			eor 	#NSBIsNegative
.8882	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8885	60		rts				rts
.8886					NSMNegateMantissa:
.8886	38		sec				sec
.8887	a9 00		lda #$00			lda 	#0
.8889	fd 08 06	sbc $0608,x			sbc 	NSMantissa0,x
.888c	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.888f	a9 00		lda #$00			lda 	#0
.8891	fd 10 06	sbc $0610,x			sbc 	NSMantissa1,x
.8894	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8897	a9 00		lda #$00			lda 	#0
.8899	fd 18 06	sbc $0618,x			sbc 	NSMantissa2,x
.889c	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.889f	a9 00		lda #$00			lda 	#0
.88a1	fd 20 06	sbc $0620,x			sbc 	NSMantissa3,x
.88a4	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.88a7	60		rts				rts
.88a8					NSMShiftUpTwo:
.88a8	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.88ab	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.88ae	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.88b1	9d 12 06	sta $0612,x			sta 	NSMantissa1+2,x
.88b4	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.88b7	9d 1a 06	sta $061a,x			sta 	NSMantissa2+2,x
.88ba	bd 20 06	lda $0620,x			lda 	NSMantissa3,x
.88bd	9d 22 06	sta $0622,x			sta 	NSMantissa3+2,x
.88c0	bd 28 06	lda $0628,x			lda 	NSExponent,x
.88c3	9d 2a 06	sta $062a,x			sta 	NSExponent+2,x
.88c6	bd 00 06	lda $0600,x			lda 	NSStatus,x
.88c9	9d 02 06	sta $0602,x			sta 	NSStatus+2,x
.88cc	60		rts				rts
.88cd					NSMSetZeroMantissaOnly:
.88cd	a9 00		lda #$00			lda 	#0
.88cf	80 08		bra $88d9			bra 	NSMSetMantissa
.88d1					NSMSetZero:
.88d1	a9 00		lda #$00			lda 	#0
.88d3					NSMSetByte:
.88d3	9e 28 06	stz $0628,x			stz 	NSExponent,x 				; zero exponent, as integer.
.88d6	9e 00 06	stz $0600,x			stz 	NSStatus,x 					; status zero (integer)
.88d9					NSMSetMantissa:
.88d9	9d 08 06	sta $0608,x			sta 	NSMantissa0,x 				; mantissa
.88dc	9e 10 06	stz $0610,x			stz 	NSMantissa1,x
.88df	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.88e2	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.88e5	60		rts				rts
.88e6					NSMShiftLeft:
.88e6	18		clc				clc
.88e7					NSMRotateLeft:
.88e7	3e 08 06	rol $0608,x			rol 	NSMantissa0,x
.88ea	3e 10 06	rol $0610,x			rol		NSMantissa1,x
.88ed	3e 18 06	rol $0618,x			rol		NSMantissa2,x
.88f0	3e 20 06	rol $0620,x			rol		NSMantissa3,x
.88f3	60		rts				rts
.88f4					NSMShiftRight:
.88f4	5e 20 06	lsr $0620,x			lsr 	NSMantissa3,x
.88f7	7e 18 06	ror $0618,x			ror		NSMantissa2,x
.88fa	7e 10 06	ror $0610,x			ror		NSMantissa1,x
.88fd	7e 08 06	ror $0608,x			ror		NSMantissa0,x
.8900	60		rts				rts
.8901					NSMIsZero:
.8901	bd 20 06	lda $0620,x			lda 	NSMantissa3,x
.8904	1d 18 06	ora $0618,x			ora		NSMantissa2,x
.8907	1d 10 06	ora $0610,x			ora		NSMantissa1,x
.890a	1d 08 06	ora $0608,x			ora		NSMantissa0,x
.890d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./generated/constants.asm

.92f6					DecimalScalarTable:
>92f6	66 66 66 66				.dword $66666666 ; 0.1
>92fa	de					.byte $de
>92fb	1f 85 eb 51				.dword $51eb851f ; 0.01
>92ff	db					.byte $db
>9300	4c 37 89 41				.dword $4189374c ; 0.001
>9304	d8					.byte $d8
>9305	ac 8b db 68				.dword $68db8bac ; 0.0001
>9309	d4					.byte $d4
>930a	24 d6 e2 53				.dword $53e2d624 ; 1e-05
>930e	d1					.byte $d1
>930f	83 de 1b 43				.dword $431bde83 ; 1e-06
>9313	ce					.byte $ce
>9314	6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>9318	ca					.byte $ca
>9319	89 3b e6 55				.dword $55e63b89 ; 1e-08
>931d	c7					.byte $c7
>931e	a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>9322	c4					.byte $c4
>9323	67 7f f3 6d				.dword $6df37f67 ; 1e-10
>9327	c0					.byte $c0
>9328	86 ff f5 57				.dword $57f5ff86 ; 1e-11
>932c	bd					.byte $bd

;******  Return to file: _basic.asm


;******  Processing file: ./generated/errors.asm

.932d					SyntaxError:
.932d	a9 02		lda #$02		lda	#2
.932f	4c c4 81	jmp $81c4		jmp	ErrorHandler
.9332					RangeError:
.9332	a9 04		lda #$04		lda	#4
.9334	4c c4 81	jmp $81c4		jmp	ErrorHandler
.9337					TypeError:
.9337	a9 05		lda #$05		lda	#5
.9339	4c c4 81	jmp $81c4		jmp	ErrorHandler
.933c					ArgumentError:
.933c	a9 07		lda #$07		lda	#7
.933e	4c c4 81	jmp $81c4		jmp	ErrorHandler
.9341					NotDoneError:
.9341	a9 0c		lda #$0c		lda	#12
.9343	4c c4 81	jmp $81c4		jmp	ErrorHandler
.9346					ErrorText:
>9346	42 72 65 61 6b 00			.text	"Break",0
>934c	53 79 6e 74 61 78 20 65			.text	"Syntax error",0
>9354	72 72 6f 72 00
>9359	44 69 76 69 73 69 6f 6e			.text	"Division by zero",0
>9361	20 62 79 20 7a 65 72 6f 00
>936a	4f 75 74 20 6f 66 20 52			.text	"Out of Range",0
>9372	61 6e 67 65 00
>9377	54 79 70 65 20 6d 69 73			.text	"Type mismatch",0
>937f	6d 61 74 63 68 00
>9385	4f 75 74 20 6f 66 20 6d			.text	"Out of memory",0
>938d	65 6d 6f 72 79 00
>9393	49 6c 6c 65 67 61 6c 20			.text	"Illegal argument",0
>939b	61 72 67 75 6d 65 6e 74 00
>93a4	53 74 6f 70 00				.text	"Stop",0
>93a9	53 74 72 69 6e 67 20 74			.text	"String too long",0
>93b1	6f 6f 20 6c 6f 6e 67 00
>93b9	41 73 73 65 72 74 69 6f			.text	"Assertion failed",0
>93c1	6e 20 66 61 69 6c 65 64 00
>93ca	4f 75 74 20 6f 66 20 64			.text	"Out of data",0
>93d2	61 74 61 00
>93d6	55 6e 69 6d 70 6c 65 6d			.text	"Unimplemented",0
>93de	65 6e 74 65 64 00

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/junior/memory.asm

.93e4					MemoryPeek:
.93e4	b2 36		lda ($36)			lda 	(zTemp0)
.93e6	60		rts				rts
.93e7					MemoryPoke:
.93e7	92 36		sta ($36)			sta 	(zTemp0)
.93e9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/junior/vectors.asm

.93ea					EXTPrintCharacter:
.93ea	48		pha				pha
.93eb	da		phx				phx
.93ec	5a		phy				phy
.93ed	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.93f0	7a		ply				ply
.93f1	fa		plx				plx
.93f2	68		pla				pla
.93f3	60		rts				rts
.93f4					EXTInputSingleCharacter:
.93f4	da		phx				phx
.93f5	5a		phy				phy
.93f6					_EISCWait:
.93f6	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.93f9	c9 00		cmp #$00			cmp 	#0
.93fb	f0 f9		beq $93f6			beq 	_EISCWait
.93fd	7a		ply				ply
.93fe	fa		plx				plx
.93ff	60		rts				rts
.9400					EXTInputLine:
.9400	a2 00		ldx #$00			ldx 	#0 							; position in line <- start of line
.9402					_ILLoop:
.9402	da		phx				phx 								; read character in
.9403	20 cf ff	jsr $ffcf			jsr 	$FFCF
.9406	fa		plx				plx
.9407	c9 08		cmp #$08			cmp 	#8 							; backspace, CBM doesn't need this.
.9409	f0 12		beq $941d			beq 	_ILBackspace
.940b	c9 0d		cmp #$0d			cmp 	#13							; exit ?
.940d	f0 15		beq $9424			beq 	_ILExit
.940f	c9 20		cmp #$20			cmp 	#32 						; ignore other control
.9411	90 ef		bcc $9402			bcc 	_ILLoop
.9413	e0 50		cpx #$50			cpx 	#MaxLineSize 				; already full buffer
.9415	f0 eb		beq $9402			beq 	_ILLoop
.9417	9d 13 08	sta $0813,x			sta 	lineBuffer,x 				; save it
.941a	e8		inx				inx
.941b	80 e5		bra $9402			bra 	_ILLoop
.941d					_ILBackspace:
.941d	e0 00		cpx #$00			cpx 	#0  						; can't backspace, start of line.
.941f	f0 e1		beq $9402			beq 	_ILLoop
.9421	ca		dex				dex 								; back one.
.9422	80 de		bra $9402			bra 	_ILLoop
.9424					_ILExit:
.9424	20 ea 93	jsr $93ea			jsr 	EXTPrintCharacter
.9427	9e 13 08	stz $0813,x			stz 	lineBuffer,x 				; make ASCIIZ and exit with address in XA
.942a	60		rts				rts
.942b					EXTBreakCheck:
.942b	4c e1 ff	jmp $ffe1			jmp		$FFE1

;******  Return to file: _basic.asm


;******  Processing file: ./memory.flat/memory.asm

.890e					MemoryNew:
.890e	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.8910	85 30		sta $30				sta 	codePtr
.8912	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.8914	85 31		sta $31				sta 	codePtr+1
.8916	a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.8918	92 30		sta ($30)			sta 	(codePtr)
.891a	60		rts				rts
.891b					MemoryAppend:
.891b	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.891d	85 30		sta $30				sta 	codePtr
.891f	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.8921	85 31		sta $31				sta 	codePtr+1
.8923					_MAFindEnd:
.8923	b2 30		lda ($30)			lda 	(codePtr)
.8925	f0 0d		beq $8934			beq 	_MAFoundEnd
.8927	18		clc				clc
.8928	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.892a	65 30		adc $30				adc 	codePtr
.892c	85 30		sta $30				sta 	codePtr
.892e	90 02		bcc $8932			bcc 	_CREExit
.8930	e6 31		inc $31				inc 	codePtr+1
.8932					_CREExit:
.8932	80 ef		bra $8923			bra 	_MAFindEnd
.8934					_MAFoundEnd:
.8934	ac 13 07	ldy $0713			ldy 	tokenOffset 				; bytes to copy
.8937	c0 04		cpy #$04			cpy 	#4 							; blank line
.8939	f0 0e		beq $8949			beq 	_MANoLine
.893b	a9 00		lda #$00			lda 	#0 							; end of program
.893d	91 30		sta ($30),y			sta 	(codePtr),y
.893f					_MACopy:
.893f	88		dey				dey
.8940	b9 13 07	lda $0713,y			lda 	tokenOffset,y
.8943	91 30		sta ($30),y			sta 	(codePtr),y
.8945	c0 00		cpy #$00			cpy 	#0
.8947	d0 f6		bne $893f			bne 	_MACopy
.8949					_MANoLine:
.8949	60		rts				rts
.894a					MemoryInline:
.894a	98		tya				tya 								; put address into stack,x
.894b	18		clc				clc
.894c	65 30		adc $30				adc 	codePtr
.894e	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8951	a5 31		lda $31				lda 	codePtr+1
.8953	69 00		adc #$00			adc 	#0
.8955	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8958	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.895b	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.895e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./memory.flat/variable.asm

.895f					VariableOpen:
.895f	60		rts				rts
.8960					VariableClose:
.8960	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./strings/stringalloc.asm

.942e					StringSystemInitialise:
.942e	a9 00		lda #$00			lda 	#((EndVariableSpace) & $FF)
.9430	8d 0e 07	sta $070e			sta 	0+StringMemory
.9433	a9 20		lda #$20			lda 	#((EndVariableSpace) >> 8)
.9435	8d 0f 07	sta $070f			sta 	1+StringMemory
.9438	60		rts				rts
.9439					StringSpaceInitialise:
.9439	a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.943b	8d 10 07	sta $0710			sta 	StringInitialised
.943e	ad 0e 07	lda $070e			lda 	StringMemory 				; allocate 256 bytes for one concreted string
.9441	8d 11 07	sta $0711			sta 	StringTempPointer
.9444	ad 0f 07	lda $070f			lda 	StringMemory+1
.9447	3a		dec a				dec 	a
.9448	8d 12 07	sta $0712			sta 	StringTempPointer+1
.944b	60		rts				rts
.944c					StringTempAllocate:
.944c	c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.944e	b0 35		bcs $9485			bcs 	_STALength
.9450	2c 10 07	bit $0710			bit 	StringInitialised 			; already initialised
.9453	30 05		bmi $945a			bmi 	_STAAllocate
.9455	48		pha				pha 								; save value to subtract.
.9456	20 39 94	jsr $9439			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.9459	68		pla				pla 								; restore it
.945a					_STAAllocate:
.945a	49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.945c	18		clc				clc  								; deliberate allows one more
.945d	6d 11 07	adc $0711			adc 	StringTempPointer 			; subtract from temp pointer
.9460	8d 11 07	sta $0711			sta 	StringTempPointer
.9463	9d 08 06	sta $0608,x			sta 	NSMantissa0,x 				; address in mantissa
.9466	85 3c		sta $3c				sta 	zsTemp 						; and zsTemp
.9468	ad 12 07	lda $0712			lda 	StringTempPointer+1
.946b	69 ff		adc #$ff			adc 	#$FF
.946d	8d 12 07	sta $0712			sta 	StringTempPointer+1
.9470	85 3d		sta $3d				sta 	zsTemp+1
.9472	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9475	9e 18 06	stz $0618,x			stz 	NSMantissa2,x 				; set the typing data
.9478	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.947b	a9 10		lda #$10			lda 	#NSTString
.947d	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9480	a9 00		lda #$00			lda 	#0 							; clear the target string
.9482	92 3c		sta ($3c)			sta 	(zsTemp)
.9484	60		rts				rts
.9485					_STALength:
.9485	a9 09		lda #$09		lda	#9
.9487	4c c4 81	jmp $81c4		jmp	ErrorHandler
.948a					StringTempWrite:
.948a	48		pha				pha
.948b	92 3c		sta ($3c)			sta 	(zsTemp)
.948d	e6 3c		inc $3c				inc 	zsTemp
.948f	d0 02		bne $9493			bne 	_STWNoCarry
.9491	e6 3d		inc $3d				inc 	zsTemp+1
.9493					_STWNoCarry:
.9493	a9 00		lda #$00			lda 	#0
.9495	92 3c		sta ($3c)			sta 	(zsTemp)
.9497	68		pla				pla
.9498	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./tokeniser/backload.asm

.8961					BackloadProgram:
.8961	a2 ff		ldx #$ff			ldx 	#$FF
.8963	8e fa ff	stx $fffa			stx 	$FFFA 						; fast mode
.8966	20 8d 89	jsr $898d			jsr 	BLReadByte
.8969	30 1e		bmi $8989			bmi 	_BPExit
.896b					_BPCopy:
.896b	e8		inx				inx  								; copy byte in
.896c	9d 13 08	sta $0813,x			sta 	lineBuffer,x
.896f	9e 14 08	stz $0814,x			stz 	lineBuffer+1,x
.8972	20 8d 89	jsr $898d			jsr 	BLReadByte 					; read next byte
.8975	30 0a		bmi $8981			bmi 	_BPEndLine 					; -ve = EOL
.8977	c9 09		cmp #$09			cmp 	#9 							; handle TAB
.8979	d0 02		bne $897d			bne 	_BPNotTab
.897b	a9 20		lda #$20			lda 	#' '
.897d					_BPNotTab:
.897d	c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.897f	b0 ea		bcs $896b			bcs 	_BPCopy
.8981					_BPEndLine:
.8981	20 49 8b	jsr $8b49			jsr 	TokeniseLine 				; tokenise the line.
.8984	20 1b 89	jsr $891b			jsr 	MemoryAppend 				; append to current program
.8987	80 d8		bra $8961			bra 	BackloadProgram
.8989					_BPExit:
.8989	20 24 81	jsr $8124			jsr 	ClearCommand 				; clear variables etc.
.898c	60		rts				rts
.898d					BLReadByte:
.898d					_BLLoad:
.898d	ad 00 30	lda $3000			lda 	$3000 						; hardcoded in the makefile.
.8990	ee 8e 89	inc $898e			inc 	_BLLoad+1
.8993	d0 03		bne $8998			bne 	_BLNoCarry
.8995	ee 8f 89	inc $898f			inc 	_BLLoad+2
.8998					_BLNoCarry:
.8998	c9 00		cmp #$00			cmp 	#0
.899a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./tokeniser/searchtokens.asm

.899b					TokeniseSearchTable:
.899b	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token.
.899d	85 36		sta $36				sta 	zTemp0
.899f	a0 00		ldy #$00			ldy 	#0
.89a1	a9 80		lda #$80			lda 	#$80 						; token #
.89a3	85 38		sta $38				sta 	zTemp1
.89a5					_TSTLoop:
.89a5	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.89a7	30 49		bmi $89f2			bmi 	_TSTFail 					; -ve = end of table
.89a9	f0 2e		beq $89d9			beq 	_TSTNext 					; zero, check next it's a dummy
.89ab	c8		iny				iny 								; get the hash
.89ac	b1 36		lda ($36),y			lda 	(zTemp0),y
.89ae	88		dey				dey
.89af	cd 03 07	cmp $0703			cmp 	identHash 					; check they match, if not go to next
.89b2	d0 25		bne $89d9			bne 	_TSTNext
.89b4	ad 02 07	lda $0702			lda 	identTypeEnd 				; length of identifier
.89b7	38		sec				sec
.89b8	ed 00 07	sbc $0700			sbc 	identStart
.89bb	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; no match, then return.
.89bd	d0 1a		bne $89d9			bne 	_TSTNext
.89bf	5a		phy				phy 								; save Y , we might fail
.89c0	c8		iny				iny 								; point to text
.89c1	c8		iny				iny
.89c2	ae 00 07	ldx $0700			ldx 	identStart 					; offset in line buffer in X
.89c5					_TSTCompareName:
.89c5	bd 13 08	lda $0813,x			lda 	lineBuffer,x 				; compare text.
.89c8	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.89ca	d0 0c		bne $89d8			bne 	_TSTNextPullY 				; fail, pullY and do next
.89cc	e8		inx				inx
.89cd	c8		iny				iny
.89ce	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; complete match.
.89d1	d0 f2		bne $89c5			bne 	_TSTCompareName
.89d3	7a		ply				ply 								; throw Y
.89d4	a5 38		lda $38				lda 	zTemp1 						; get token #
.89d6	38		sec				sec 								; return with CS = passed.
.89d7	60		rts				rts
.89d8					_TSTNextPullY:
.89d8	7a		ply				ply 								; restore current, fall through.
.89d9					_TSTNext:
.89d9	e6 38		inc $38				inc 	zTemp1 						; token counter
.89db	98		tya				tya
.89dc	18		clc				clc
.89dd	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.89df	1a		inc a				inc 	a 							; +1
.89e0	1a		inc a				inc 	a 							; +2
.89e1	a8		tay				tay
.89e2	10 c1		bpl $89a5			bpl 	_TSTLoop 					; if Y < $80 loop back
.89e4	98		tya				tya 								; add Y to zTemp0 and reset Y
.89e5	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.89e7	18		clc				clc  								; but have tables > 255 bytes
.89e8	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.89ea	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.89ec	90 b7		bcc $89a5			bcc 	_TSTLoop
.89ee	e6 37		inc $37				inc 	zTemp0+1
.89f0	80 b3		bra $89a5			bra 	_TSTLoop
.89f2					_TSTFail:
.89f2	18		clc				clc
.89f3	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./tokeniser/tokenise.asm


;******  Processing file: ./tokeniser/../generated/kwdtext.dat

.89f4					KeywordSet0:
>89f4	00 65					.text	0,$65,""               ; $80 !0:EOF
>89f6	00 58					.text	0,$58,""               ; $81 !1:SH1
>89f8	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>89fa	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $83 ABS(
>8a00	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $84 ALLOC(
>8a08	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $85 ASC(
>8a0e	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $86 CHR$(
>8a15	05 6b 46 41 4c 53 45			.text	5,$6b,"FALSE"          ; $87 FALSE
>8a1c	05 44 46 52 41 43 28			.text	5,$44,"FRAC("          ; $88 FRAC(
>8a23	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $89 INT(
>8a29	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $8a ISVAL(
>8a31	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $8b LEFT$(
>8a39	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $8c LEN(
>8a3f	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $8d MID$(
>8a46	04 19 4e 4f 54 28			.text	4,$19,"NOT("           ; $8e NOT(
>8a4c	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $8f RIGHT$(
>8a54	28
>8a55	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $90 RND(
>8a5b	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $91 SGN(
>8a61	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $92 SPC(
>8a67	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $93 STR$(
>8a6e	04 40 54 52 55 45			.text	4,$40,"TRUE"           ; $94 TRUE
>8a74	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $95 VAL(
>8a7a	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $96 FOR
>8a7f	02 8f 49 46				.text	2,$8f,"IF"             ; $97 IF
>8a83	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $98 PROC
>8a89	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $99 REPEAT
>8a91	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $9a WHILE
>8a98	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $9b ENDIF
>8a9f	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $9c ENDPROC
>8aa7	43
>8aa8	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $9d NEXT
>8aae	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $9e UNTIL
>8ab5	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $9f WEND
>8abb	04 1c 43 41 4c 4c			.text	4,$1c,"CALL"           ; $a0 CALL
>8ac1	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $a1 CLS
>8ac6	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $a2 DATA
>8acc	03 da 44 49 4d				.text	3,$da,"DIM"            ; $a3 DIM
>8ad1	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $a4 GOSUB
>8ad8	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $a5 GOTO
>8ade	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $a6 LET
>8ae3	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $a7 PRINT
>8aea	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $a8 READ
>8af0	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $a9 REM
>8af5	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $aa RETURN
>8afd	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $ab THEN
>8b03	02 a3 54 4f				.text	2,$a3,"TO"             ; $ac TO
>8b07	ff					.text	$FF
.8b08					KeywordSet1:
>8b08	00 65					.text	0,$65,""               ; $80 !0:EOF
>8b0a	00 58					.text	0,$58,""               ; $81 !1:SH1
>8b0c	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>8b0e	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $83 ASSERT
>8b16	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $84 CLEAR
>8b1d	03 d7 45 4e 44				.text	3,$d7,"END"            ; $85 END
>8b22	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $86 LIST
>8b28	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $87 NEW
>8b2d	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $88 RESTORE
>8b35	45
>8b36	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $89 RUN
>8b3b	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $8a STOP
>8b41	ff					.text	$FF
.8b42					KeywordSet2:
>8b42	00 65					.text	0,$65,""               ; $80 !0:EOF
>8b44	00 58					.text	0,$58,""               ; $81 !1:SH1
>8b46	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>8b48	ff					.text	$FF

;******  Return to file: ./tokeniser/tokenise.asm

.8b49					TokeniseLine:
.8b49	20 d1 8c	jsr $8cd1			jsr 	FixLineBufferCase 			; fix line case
.8b4c	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.8b4e	8d 13 07	sta $0713			sta 	tokenOffset
.8b51	9c 14 07	stz $0714			stz 	tokenLineNumber
.8b54	9c 15 07	stz $0715			stz 	tokenLineNumber+1
.8b57	a2 ff		ldx #$ff			ldx 	#$FF
.8b59					_TKFindFirst:
.8b59	e8		inx				inx
.8b5a	bd 13 08	lda $0813,x			lda 	lineBuffer,x
.8b5d	f0 79		beq $8bd8			beq 	_TKExit
.8b5f	c9 20		cmp #$20			cmp 	#' '
.8b61	90 f6		bcc $8b59			bcc 	_TKFindFirst
.8b63	c9 30		cmp #$30			cmp 	#'0'
.8b65	90 07		bcc $8b6e			bcc 	_TKNoLineNumber
.8b67	c9 3a		cmp #$3a			cmp 	#'9'+1
.8b69	b0 03		bcs $8b6e			bcs 	_TKNoLineNumber
.8b6b	20 fb 8c	jsr $8cfb			jsr 	TokeniseExtractLineNumber
.8b6e					_TKNoLineNumber:
.8b6e					_TKTokeniseLoop:
.8b6e	bd 13 08	lda $0813,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.8b71	f0 65		beq $8bd8			beq 	_TKExit
.8b73	e8		inx				inx
.8b74	c9 20		cmp #$20			cmp 	#' '
.8b76	f0 f6		beq $8b6e			beq 	_TKTokeniseLoop 			; keep looping if space found.
.8b78	ca		dex				dex 								; undo last get, A contains character, X is position.
.8b79	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.8b7b	f0 61		beq $8bde			beq 	_TKTokeniseIdentifier
.8b7d	c9 41		cmp #$41			cmp 	#'A'
.8b7f	90 04		bcc $8b85			bcc 	_TKTokenisePunctuation
.8b81	c9 5b		cmp #$5b			cmp 	#'Z'+1
.8b83	90 59		bcc $8bde			bcc 	_TKTokeniseIdentifier
.8b85					_TKTokenisePunctuation:
.8b85	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.8b87	f0 27		beq $8bb0			beq 	_TKString
.8b89	c9 23		cmp #$23			cmp 	#'#'						; hexadecimal constant (# only appears at end of identifiers)
.8b8b	f0 28		beq $8bb5			beq 	_TKHexConstant
.8b8d	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers.
.8b8f	f0 29		beq $8bba			beq 	_TKCheckDouble
.8b91	c9 3e		cmp #$3e			cmp 	#'>'
.8b93	f0 25		beq $8bba			beq 	_TKCheckDouble
.8b95					_TKStandardPunctuation:
.8b95	bd 13 08	lda $0813,x			lda 	lineBuffer,x 				; get it back.
.8b98	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.8b9a	90 0e		bcc $8baa			bcc 	_TKNoShift
.8b9c	48		pha				pha 								; save
.8b9d	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.8b9f	85 36		sta $36				sta 	zTemp0
.8ba1	68		pla				pla
.8ba2	29 20		and #$20			and 	#32 						; bit 5
.8ba4	4a		lsr a				lsr 	a 							; shift into bit 3
.8ba5	4a		lsr a				lsr 	a
.8ba6	05 36		ora $36				ora 	zTemp0
.8ba8	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.8baa					_TKNoShift:
.8baa	20 40 8d	jsr $8d40			jsr 	TokeniseWriteByte 			; write the punctuation character
.8bad	e8		inx				inx 								; consume the character
.8bae	80 be		bra $8b6e			bra 	_TKTokeniseLoop 			; and loop round again.
.8bb0					_TKString:
.8bb0	20 60 8c	jsr $8c60			jsr 	TokeniseString
.8bb3	80 b9		bra $8b6e			bra 	_TKTokeniseLoop
.8bb5					_TKHexConstant:
.8bb5	20 9b 8c	jsr $8c9b			jsr 	TokeniseHexConstant
.8bb8	80 b4		bra $8b6e			bra 	_TKTokeniseLoop
.8bba					_TKCheckDouble:
.8bba	bd 14 08	lda $0814,x			lda 	lineBuffer+1,x 				; get next character
.8bbd	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.8bbf	90 d4		bcc $8b95			bcc 	_TKStandardPunctuation
.8bc1	c9 3f		cmp #$3f			cmp 	#'>'+1
.8bc3	b0 d0		bcs $8b95			bcs 	_TKStandardPunctuation
.8bc5	bd 13 08	lda $0813,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.8bc8	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.8bca	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.8bcb	7d 14 08	adc $0814,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.8bce	38		sec				sec
.8bcf	e9 3c		sbc #$3c			sbc 	#'<'
.8bd1	20 40 8d	jsr $8d40			jsr 	TokeniseWriteByte 			; this is in the range 0-7
.8bd4	e8		inx				inx 								; consume both
.8bd5	e8		inx				inx
.8bd6	80 96		bra $8b6e			bra 	_TKTokeniseLoop
.8bd8	a9 80		lda #$80	_TKExit:lda 	#KWC_EOL 					; write end of line byte
.8bda	20 40 8d	jsr $8d40			jsr 	TokeniseWriteByte
.8bdd	60		rts				rts
.8bde					_TKTokeniseIdentifier:
.8bde	8e 00 07	stx $0700			stx 	identStart 					; save start
.8be1	9c 04 07	stz $0704			stz 	identTypeByte 				; zero the type byte
.8be4					_TKCheckLoop:
.8be4	e8		inx				inx 								; look at next, we know first is identifier.
.8be5	bd 13 08	lda $0813,x			lda  	lineBuffer,x
.8be8	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.8bea	f0 f8		beq $8be4			beq 	_TKCheckLoop
.8bec	c9 30		cmp #$30			cmp	 	#"0"
.8bee	90 0c		bcc $8bfc			bcc 	_TKEndIdentifier
.8bf0	c9 3a		cmp #$3a			cmp 	#"9"+1
.8bf2	90 f0		bcc $8be4			bcc 	_TKCheckLoop
.8bf4	c9 41		cmp #$41			cmp	 	#"A"
.8bf6	90 04		bcc $8bfc			bcc 	_TKEndIdentifier
.8bf8	c9 5b		cmp #$5b			cmp 	#"Z"+1
.8bfa	90 e8		bcc $8be4			bcc 	_TKCheckLoop
.8bfc					_TKEndIdentifier:
.8bfc	8e 01 07	stx $0701			stx 	identTypeStart 				; save start of type text (if any !)
.8bff	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.8c01	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.8c03	f0 06		beq $8c0b			beq 	_TKHasTypeCharacter
.8c05	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.8c07	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.8c09	d0 07		bne $8c12			bne 	_TKNoTypeCharacter
.8c0b					_TKHasTypeCharacter:
.8c0b	8c 04 07	sty $0704			sty 	identTypeByte 				; has # or $, save the type
.8c0e	e8		inx				inx 								; read next
.8c0f	bd 13 08	lda $0813,x			lda 	lineBuffer,x
.8c12					_TKNoTypeCharacter:
.8c12	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.8c14	d0 09		bne $8c1f			bne 	_TKNoArray
.8c16	e8		inx				inx 								; skip the (
.8c17	ad 04 07	lda $0704			lda 	identTypeByte 				; set bit 2 (e.g. array)
.8c1a	09 04		ora #$04			ora 	#$04
.8c1c	8d 04 07	sta $0704			sta 	identTypeByte
.8c1f					_TKNoArray:
.8c1f	8e 02 07	stx $0702			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.8c22	20 bc 8c	jsr $8cbc			jsr 	TokeniseCalculateHash 		; calculate the has for those tokens
.8c25	a0 89		ldy #$89			ldy 	#(KeywordSet0) >> 8
.8c27	a9 f4		lda #$f4			lda 	#(KeywordSet0) & $FF
.8c29	20 9b 89	jsr $899b			jsr 	TokeniseSearchTable
.8c2c	a2 00		ldx #$00			ldx 	#0
.8c2e	b0 1f		bcs $8c4f			bcs 	_TKFoundToken
.8c30	a0 8b		ldy #$8b			ldy 	#(KeywordSet1) >> 8
.8c32	a9 08		lda #$08			lda 	#(KeywordSet1) & $FF
.8c34	20 9b 89	jsr $899b			jsr 	TokeniseSearchTable
.8c37	a2 81		ldx #$81			ldx 	#$81
.8c39	b0 14		bcs $8c4f			bcs 	_TKFoundToken
.8c3b	a0 8b		ldy #$8b			ldy 	#(KeywordSet1) >> 8
.8c3d	a9 08		lda #$08			lda 	#(KeywordSet1) & $FF
.8c3f	20 9b 89	jsr $899b			jsr 	TokeniseSearchTable
.8c42	a2 82		ldx #$82			ldx 	#$82
.8c44	b0 09		bcs $8c4f			bcs 	_TKFoundToken
.8c46	20 4c 8d	jsr $8d4c			jsr 	CheckCreateVariableRecord 	; failed all, it's a variable, create record if does not exist.
.8c49	ae 02 07	ldx $0702			ldx 	identTypeEnd 				; X points to following byte
.8c4c	4c 6e 8b	jmp $8b6e			jmp 	_TKTokeniseLoop 			; and go round again.
.8c4f					_TKFoundToken:
.8c4f	48		pha				pha 								; save token
.8c50	8a		txa				txa 								; shift in X, is there one ?
.8c51	f0 03		beq $8c56			beq 	_TKNoTShift
.8c53	20 40 8d	jsr $8d40			jsr 	TokeniseWriteByte 			; if so, write it out
.8c56					_TKNoTShift:
.8c56	68		pla				pla 								; restore and write token
.8c57	20 40 8d	jsr $8d40			jsr 	TokeniseWriteByte
.8c5a	ae 02 07	ldx $0702			ldx 	identTypeEnd 				; X points to following byte
.8c5d	4c 6e 8b	jmp $8b6e			jmp 	_TKTokeniseLoop 			; and go round again.
.8c60					TokeniseString:
.8c60	a9 ff		lda #$ff			lda 	#KWC_STRING 				; string token.
.8c62	20 40 8d	jsr $8d40			jsr 	TokeniseWriteByte
.8c65	e8		inx				inx									; start of quoted string.
.8c66	da		phx				phx 								; push start of string on top
.8c67	ca		dex				dex
.8c68					_TSFindEnd:
.8c68	e8		inx				inx
.8c69	bd 13 08	lda $0813,x			lda 	lineBuffer,x 				; next character
.8c6c	f0 04		beq $8c72			beq 	_TSEndOfString
.8c6e	c9 22		cmp #$22			cmp 	#'"'
.8c70	d0 f6		bne $8c68			bne 	_TSFindEnd
.8c72					_TSEndOfString:
.8c72	7a		ply				ply  								; so now Y is first character, X is character after end.
.8c73	48		pha				pha 								; save terminating character
.8c74	20 7c 8c	jsr $8c7c			jsr 	TOWriteBlockXY 				; write X to Y as a data block
.8c77	68		pla				pla 								; terminating character
.8c78	f0 01		beq $8c7b			beq 	_TSNotQuote					; if it wasn't EOS skip it
.8c7a	e8		inx				inx
.8c7b					_TSNotQuote:
.8c7b	60		rts				rts
.8c7c					TOWriteBlockXY:
.8c7c	86 36		stx $36				stx 	zTemp0 						; write end character
.8c7e	98		tya				tya
.8c7f	49 ff		eor #$ff			eor 	#$FF
.8c81	38		sec				sec
.8c82	65 36		adc $36				adc 	zTemp0
.8c84	1a		inc a				inc 	a 							; one extra for NULL
.8c85	20 40 8d	jsr $8d40			jsr 	TokeniseWriteByte
.8c88					_TOBlockLoop:
.8c88	c4 36		cpy $36				cpy 	zTemp0
.8c8a	f0 09		beq $8c95			beq 	_TOBlockExit
.8c8c	b9 13 08	lda $0813,y			lda 	lineBuffer,y
.8c8f	20 40 8d	jsr $8d40			jsr 	TokeniseWriteByte
.8c92	c8		iny				iny
.8c93	80 f3		bra $8c88			bra 	_TOBlockLoop
.8c95					_TOBlockExit:
.8c95	a9 00		lda #$00			lda 	#0
.8c97	20 40 8d	jsr $8d40			jsr 	TokeniseWriteByte
.8c9a	60		rts				rts
.8c9b					TokeniseHexConstant:
.8c9b	a9 fe		lda #$fe			lda 	#KWC_HEXCONST 				; hex constant token.
.8c9d	20 40 8d	jsr $8d40			jsr 	TokeniseWriteByte
.8ca0	e8		inx				inx									; start of quoted string.
.8ca1	da		phx				phx 								; push start of constant on top
.8ca2	ca		dex				dex
.8ca3					_THFindLoop:
.8ca3	e8		inx				inx
.8ca4	bd 13 08	lda $0813,x			lda 	lineBuffer,x
.8ca7	c9 30		cmp #$30			cmp 	#"0"
.8ca9	90 0c		bcc $8cb7			bcc 	_THFoundEnd
.8cab	c9 3a		cmp #$3a			cmp 	#"9"+1
.8cad	90 f4		bcc $8ca3			bcc 	_THFindLoop
.8caf	c9 41		cmp #$41			cmp 	#"A"
.8cb1	90 04		bcc $8cb7			bcc 	_THFoundEnd
.8cb3	c9 47		cmp #$47			cmp 	#"F"+1
.8cb5	90 ec		bcc $8ca3			bcc 	_THFindLoop
.8cb7					_THFoundEnd:
.8cb7	7a		ply				ply 								; restore start
.8cb8	20 7c 8c	jsr $8c7c			jsr 	TOWriteBlockXY 				; output the block
.8cbb	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./tokeniser/utility.asm

.8cbc					TokeniseCalculateHash:
.8cbc	da		phx				phx
.8cbd	ae 00 07	ldx $0700			ldx 	identStart 					; needs to be same as in tokens.py - simple sum
.8cc0	a9 00		lda #$00			lda 	#0
.8cc2					_TCHLoop:
.8cc2	18		clc				clc
.8cc3	7d 13 08	adc $0813,x			adc 	lineBuffer,x
.8cc6	e8		inx				inx
.8cc7	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.8cca	d0 f6		bne $8cc2			bne 	_TCHLoop
.8ccc	8d 03 07	sta $0703			sta 	identHash 					; save the hash
.8ccf	fa		plx				plx
.8cd0	60		rts				rts
.8cd1					FixLineBufferCase:
.8cd1	a2 00		ldx #$00			ldx 	#0
.8cd3					_FLBCLoop:
.8cd3	bd 13 08	lda $0813,x			lda 	lineBuffer,x 				; get next character
.8cd6	f0 22		beq $8cfa			beq 	_FLBCExit 					; end of string.
.8cd8	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.8cda	f0 11		beq $8ced			beq 	_FLBCInQuotes
.8cdc	e8		inx				inx
.8cdd	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.8cdf	90 f2		bcc $8cd3			bcc 	_FLBCLoop
.8ce1	c9 7b		cmp #$7b			cmp 	#'z'+1
.8ce3	b0 ee		bcs $8cd3			bcs 	_FLBCLoop
.8ce5	38		sec				sec 								; make U/C
.8ce6	e9 20		sbc #$20			sbc 	#32
.8ce8	9d 12 08	sta $0812,x			sta	 	lineBuffer-1,x 				; write back
.8ceb	80 e6		bra $8cd3			bra 	_FLBCLoop
.8ced					_FLBCInQuotes:
.8ced	e8		inx				inx 								; advance
.8cee	bd 13 08	lda $0813,x			lda 	lineBuffer,x 				; get next
.8cf1	f0 07		beq $8cfa			beq 	_FLBCExit 					; exit on EOS
.8cf3	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.8cf5	d0 f6		bne $8ced			bne 	_FLBCInQuotes
.8cf7	e8		inx				inx 								; skip over it
.8cf8	80 d9		bra $8cd3			bra 	_FLBCLoop
.8cfa					_FLBCExit:
.8cfa	60		rts				rts
.8cfb					TokeniseExtractLineNumber:
.8cfb	ad 15 07	lda $0715			lda 	tokenLineNumber+1 			; push current value on stack
.8cfe	48		pha				pha
.8cff	ad 14 07	lda $0714			lda 	tokenLineNumber
.8d02	48		pha				pha
.8d03	20 39 8d	jsr $8d39			jsr 	_TELNTimes2 				; line # x 4
.8d06	20 39 8d	jsr $8d39			jsr 	_TELNTimes2 				; line # x 2
.8d09	18		clc				clc 								; add stacked value
.8d0a	68		pla				pla
.8d0b	6d 14 07	adc $0714			adc 	tokenLineNumber
.8d0e	8d 14 07	sta $0714			sta 	tokenLineNumber
.8d11	68		pla				pla
.8d12	6d 15 07	adc $0715			adc 	tokenLineNumber+1
.8d15	8d 15 07	sta $0715			sta 	tokenLineNumber+1 			; line # x 5
.8d18	20 39 8d	jsr $8d39			jsr 	_TELNTimes2 				; line # x 10
.8d1b	bd 13 08	lda $0813,x			lda 	lineBuffer,x 				; get and consume character
.8d1e	e8		inx				inx
.8d1f	29 0f		and #$0f			and 	#15 						; add to line #
.8d21	18		clc				clc
.8d22	6d 14 07	adc $0714			adc 	tokenLineNumber
.8d25	8d 14 07	sta $0714			sta 	tokenLineNumber
.8d28	90 03		bcc $8d2d			bcc 	_TLENNoCarry
.8d2a	ee 15 07	inc $0715			inc 	tokenLineNumber+1
.8d2d					_TLENNoCarry:
.8d2d	bd 13 08	lda $0813,x			lda 	lineBuffer,x 				; more digits ?
.8d30	c9 30		cmp #$30			cmp 	#'0'
.8d32	90 04		bcc $8d38			bcc 	_TLENExit
.8d34	c9 3a		cmp #$3a			cmp 	#'9'+1
.8d36	90 c3		bcc $8cfb			bcc 	TokeniseExtractLineNumber
.8d38					_TLENExit:
.8d38	60		rts				rts
.8d39					_TELNTimes2:
.8d39	0e 14 07	asl $0714			asl 	tokenLineNumber
.8d3c	2e 15 07	rol $0715			rol 	tokenLineNumber+1
.8d3f	60		rts				rts
.8d40					TokeniseWriteByte:
.8d40	da		phx				phx
.8d41	ae 13 07	ldx $0713			ldx 	tokenOffset 				; next slot to write to
.8d44	9d 13 07	sta $0713,x			sta 	tokenOffset,x 				; write byte out
.8d47	ee 13 07	inc $0713			inc 	tokenOffset 				; advance slot.
.8d4a	fa		plx				plx
.8d4b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./tokeniser/variablerecord.asm

.8d4c					CheckCreateVariableRecord:
.8d4c	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.8d4e	85 36		sta $36				sta 	0+zTemp0
.8d50	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.8d52	85 37		sta $37				sta 	1+zTemp0
.8d54	20 5f 89	jsr $895f			jsr 	VariableOpen 				; make variable space available
.8d57					_CCVSearch:
.8d57	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.8d59	f0 2c		beq $8d87			beq 	_CCVFail
.8d5b	a0 01		ldy #$01			ldy 	#1 							; read the hash
.8d5d	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.8d5f	cd 03 07	cmp $0703			cmp 	identHash
.8d62	d0 16		bne $8d7a			bne 	_CCVNext
.8d64	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.8d66	ae 00 07	ldx $0700			ldx 	identStart
.8d69					_CCVCompare:
.8d69	bd 13 08	lda $0813,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.8d6c	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.8d6e	e8		inx				inx 								; advance pointers
.8d6f	c8		iny				iny
.8d70	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.8d71	d0 07		bne $8d7a			bne 	_CCVNext  					; didn't match go to next.
.8d73	90 f4		bcc $8d69			bcc 	_CCVCompare 				; not finished yet.
.8d75	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; matched whole thing ?
.8d78	f0 41		beq $8dbb			beq 	_CCVFound 					; yes, we were successful
.8d7a					_CCVNext:
.8d7a	18		clc				clc
.8d7b	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.8d7d	65 36		adc $36				adc 	zTemp0
.8d7f	85 36		sta $36				sta 	zTemp0
.8d81	90 d4		bcc $8d57			bcc 	_CCVSearch
.8d83	e6 37		inc $37				inc 	zTemp0+1
.8d85	80 d0		bra $8d57			bra 	_CCVSearch
.8d87					_CCVFail:
.8d87	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.8d89	ad 03 07	lda $0703			lda 	identHash
.8d8c	91 36		sta ($36),y			sta 	(zTemp0),y
.8d8e	c8		iny				iny 								; offset 2 is the type byte
.8d8f	ad 04 07	lda $0704			lda 	identTypeByte
.8d92	91 36		sta ($36),y			sta 	(zTemp0),y
.8d94	c8		iny				iny
.8d95					_CCVData:
.8d95	a9 00		lda #$00			lda 	#0 							; erase data 3-7
.8d97	91 36		sta ($36),y			sta 	(zTemp0),y
.8d99	c8		iny				iny
.8d9a	c0 08		cpy #$08			cpy 	#8
.8d9c	90 f7		bcc $8d95			bcc 	_CCVData
.8d9e	ae 00 07	ldx $0700			ldx 	identStart 					; copy name into 8 on.
.8da1					_CCVCopyName:
.8da1	bd 13 08	lda $0813,x			lda 	lineBuffer,x
.8da4	91 36		sta ($36),y			sta 	(zTemp0),y
.8da6	e8		inx				inx
.8da7	c8		iny				iny
.8da8	ec 02 07	cpx $0702			cpx 	identTypeEnd
.8dab	d0 f4		bne $8da1			bne 	_CCVCopyName
.8dad	98		tya				tya 								; patch offset
.8dae	92 36		sta ($36)			sta 	(zTemp0)
.8db0	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.8db2	91 36		sta ($36),y			sta 	(zTemp0),y
.8db4	88		dey				dey
.8db5	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.8db7	09 80		ora #$80			ora 	#$80
.8db9	91 36		sta ($36),y			sta 	(zTemp0),y
.8dbb					_CCVFound:
.8dbb	20 60 89	jsr $8960			jsr 	VariableClose 				; map out variables, perhaps.
.8dbe	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.8dc0	38		sec				sec
.8dc1	e9 10		sbc #$10			sbc 	#(VariableSpace >> 8) 		; offset from the start
.8dc3	09 40		ora #$40			ora 	#$40 						; make it a writeable token
.8dc5	20 40 8d	jsr $8d40			jsr 	TokeniseWriteByte
.8dc8	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.8dca	20 40 8d	jsr $8d40			jsr 	TokeniseWriteByte
.8dcd	60		rts				rts

;******  Return to file: _basic.asm


;******  End of listing
