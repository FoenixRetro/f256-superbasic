
; 64tass Turbo Assembler Macro V1.56.2625 listing file
; 64tass -D AUTORUN=1 -q -b -Wall -c -L output/basic.lst -l output/basic.lbl -Wall -o basic.rom _basic.asm
; Sun Oct 23 19:00:58 2022

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=1					AUTORUN=1

;******  Processing input file: _basic.asm


;******  Processing file: ./common/aa.system/01common.inc

=$30					ZeroPageMandatory = $30
=$400					ZeroPagePreference = $400
=$480					MemoryStorage = $480
=$2000					BasicStart = $2000
=$8000					BasicEnd = $8000
=$8000					CodeStart = $8000
=$1000					VariableSpace = $1000
=$2000					EndVariableSpace = $2000
=8					MathStackSize = 8
=512					BasicStackSize = 512
=3584					BasicStackBase = $1000-BasicStackSize
=80					MaxLineSize = 80

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/04data.inc

.0030					codePtr:
>0030							.fill 	4
.0034					basicStack:
>0034							.fill 	2
.0036					zTemp0:
>0036							.fill 	2
.0038					zTemp1:
>0038							.fill 	2
.003a					zTemp2:
>003a							.fill 	2
.003c					zsTemp:
>003c							.fill 	2
.003e					zaTemp:
>003e							.fill 	2
=$30					safePtr = codePtr 							; minimise direct tinkering
=$80					NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20					NSBIsReference = $20 						; bit 5 : is a reference
=$10					NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18					NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03					NSBRefMask = $03 							; bits 0,1 : Bytes of reference, -1 (e.g. 00 = 1 byte, 11 = 4 bytes)
=$04					NSBIsArray = $04
=$00					NSTInteger = $00 							; base types for bits 3..4
=$08					NSTFloat = $08
=$10					NSTString = $10
=$18					NSTProcedure = $18
.0400					NSStatus:
>0400							.fill 	MathStackSize
.0408					NSMantissa0:
>0408							.fill 	MathStackSize 				; (this is my integer mantissa system)
.0410					NSMantissa1:
>0410							.fill 	MathStackSize
.0418					NSMantissa2:
>0418							.fill 	MathStackSize
.0420					NSMantissa3:
>0420							.fill 	MathStackSize
.0428					NSExponent:
>0428							.fill 	MathStackSize
.0480					identStart:
>0480							.fill 	1
.0481					identTypeStart:
>0481							.fill 	1
.0482					identTypeEnd:
>0482							.fill 	1
.0483					identHash:
>0483							.fill 	1
.0484					identTypeByte:
>0484							.fill 	1	 						; (see tokenising.pdf)
.0485					encodeState:
>0485							.fill 	1
.0486					digitTemp:
>0486							.fill 	1
.0487					decimalCount:
>0487							.fill 	1
.0488					randomSeed:
>0488							.fill 	4
.048c					lowMemPtr:
>048c							.fill 	2
.048e					stringMemory:
>048e							.fill 	2
.0490					stringInitialised:
>0490							.fill 	1
.0491					stringTempPointer:
>0491							.fill 	2
.0493					breakCheck:
>0493							.fill 	1
.0494					decimalPlaces:
>0494							.fill 	1
.0495					dbOffset:
>0495							.fill 	1
.0496					lastParameter:
>0496							.fill 	1
.0497					dataPointer:
>0497							.fill 	5
.049c					inDataStatement:
>049c							.fill 	1
.049d					tbOffset:
>049d							.fill 	1
.049e					AssemblerAddress:
>049e							.fill 	2
.04a0					AssemblerControl:
>04a0							.fill 	1
.04a1					ParamStart:
>04a1							.fill 	2
.04a3					IsGroup1:
>04a3							.fill 	1
.04a4					BaseOpcode:
>04a4							.fill 	1
.04a5					ModeMask:
>04a5							.fill 	1
.04a6					tokenOffset:
>04a6							.fill 	1
.04a7					tokenLineNumber:
>04a7							.fill 	2
.04a9					tokenBuffer:
>04a9							.fill 	253
.05a6					lineBuffer:
>05a6							.fill 	MaxLineSize+1
.05f7					numberBuffer:
>05f7							.fill 	34
.0619					decimalBuffer:
>0619							.fill 	16

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/constants.inc

=$80					AM_ISZP = $80
=$40					AM_ISG1 = $40
=$20					AM_ISG2 = $20
=224					AM_IMMEDIATE = AM_ISZP+AM_ISG1+AM_ISG2+$00
=228					AM_ZEROPAGE = AM_ISZP+AM_ISG1+AM_ISG2+$04
=40					AM_ACC = AM_ISG2+$08
=108					AM_ABS = AM_ISG1+AM_ISG2+$0C
=208					AM_INDY = AM_ISZP+AM_ISG1+$10
=244					AM_ZEROX = AM_ISZP+AM_ISG1+AM_ISG2+$14
=120					AM_ABSY = AM_ISG1+AM_ISG2+$18
=124					AM_ABSX = AM_ISG1+AM_ISG2+$1C
=209					AM_IND = AM_ISZP+AM_ISG1+$11
=$80					AM_ZEROY = AM_ISZP
=$01					AM_INDABS = $01
=$02					AM_INDABSX = $02
=192					AM_INDX = AM_ISZP+AM_ISG1+$00

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/handlers.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.inc

=1					ERRID_BREAK = 1
=2					ERRID_SYNTAX = 2
=3					ERRID_DIVZERO = 3
=4					ERRID_RANGE = 4
=5					ERRID_TYPE = 5
=6					ERRID_MEMORY = 6
=7					ERRID_ARGUMENT = 7
=8					ERRID_STOP = 8
=9					ERRID_STRING = 9
=10					ERRID_ASSERT = 10
=11					ERRID_DATA = 11
=12					ERRID_NOTDONE = 12
=13					ERRID_LINE = 13
=14					ERRID_GOSUB = 14
=15					ERRID_REPEAT = 15
=16					ERRID_WHILE = 16
=17					ERRID_FOR = 17
=18					ERRID_STACK = 18
=19					ERRID_STRUCT = 19
=20					ERRID_PROC = 20
=21					ERRID_REDEFINE = 21
=22					ERRID_ARRAYSIZE = 22
=23					ERRID_ARRAYIDX = 23

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst.inc

=$00					KWD_LESSLESS                         = $00; $00 <<
=$01					KWD_LESSEQUAL                        = $01; $01 <=
=$02					KWD_LESSGREATER                      = $02; $02 <>
=$03					KWD_PLINGPLING3                      = $03; $03 !!3
=$04					KWD_GREATERLESS                      = $04; $04 ><
=$05					KWD_GREATEREQUAL                     = $05; $05 >=
=$06					KWD_GREATERGREATER                   = $06; $06 >>
=$07					KWD_PLINGPLING7                      = $07; $07 !!7
=$08					KWD_PLINGPLING8                      = $08; $08 !!8
=$09					KWD_PLINGPLING9                      = $09; $09 !!9
=$0a					KWD_PLINGPLING10                     = $0a; $0a !!10
=$0b					KWD_PLINGPLING11                     = $0b; $0b !!11
=$0c					KWD_PLINGPLING12                     = $0c; $0c !!12
=$0d					KWD_PLINGPLING13                     = $0d; $0d !!13
=$0e					KWD_PLINGPLING14                     = $0e; $0e !!14
=$0f					KWD_PLINGPLING15                     = $0f; $0f !!15
=$10					KWD_AT                               = $10; $10 @
=$11					KWD_PLINGPLING17                     = $11; $11 !!17
=$12					KWD_PLINGPLING18                     = $12; $12 !!18
=$13					KWD_LSQPAREN                         = $13; $13 [
=$14					KWD_BACKSLASH                        = $14; $14 \
=$15					KWD_RSQPAREN                         = $15; $15 ]
=$16					KWD_HAT                              = $16; $16 ^
=$17					KWD_UNDERSCORE                       = $17; $17 _
=$18					KWD_BQUOTE                           = $18; $18 `
=$19					KWD_PLINGPLING25                     = $19; $19 !!25
=$1a					KWD_PLINGPLING26                     = $1a; $1a !!26
=$1b					KWD_LCURLY                           = $1b; $1b {
=$1c					KWD_BAR                              = $1c; $1c |
=$1d					KWD_RCURLY                           = $1d; $1d }
=$1e					KWD_TILDE                            = $1e; $1e ~
=$21					KWD_PLING                            = $21; $21 !
=$22					KWD_DQUOTE                           = $22; $22 "
=$23					KWD_HASH                             = $23; $23 #
=$24					KWD_DOLLAR                           = $24; $24 $
=$25					KWD_PERCENT                          = $25; $25 %
=$26					KWD_AMPERSAND                        = $26; $26 &
=$27					KWD_QUOTE                            = $27; $27 '
=$28					KWD_LPAREN                           = $28; $28 (
=$29					KWD_RPAREN                           = $29; $29 )
=$2a					KWD_STAR                             = $2a; $2a *
=$2b					KWD_PLUS                             = $2b; $2b +
=$2c					KWD_COMMA                            = $2c; $2c ,
=$2d					KWD_MINUS                            = $2d; $2d -
=$2e					KWD_PERIOD                           = $2e; $2e .
=$2f					KWD_SLASH                            = $2f; $2f /
=$30					KWD_0                                = $30; $30 0
=$31					KWD_1                                = $31; $31 1
=$32					KWD_2                                = $32; $32 2
=$33					KWD_3                                = $33; $33 3
=$34					KWD_4                                = $34; $34 4
=$35					KWD_5                                = $35; $35 5
=$36					KWD_6                                = $36; $36 6
=$37					KWD_7                                = $37; $37 7
=$38					KWD_8                                = $38; $38 8
=$39					KWD_9                                = $39; $39 9
=$3a					KWD_COLON                            = $3a; $3a :
=$3b					KWD_SEMICOLON                        = $3b; $3b ;
=$3c					KWD_LESS                             = $3c; $3c <
=$3d					KWD_EQUAL                            = $3d; $3d =
=$3e					KWD_GREATER                          = $3e; $3e >
=$3f					KWD_QMARK                            = $3f; $3f ?
=$83					KWD_ABSLPAREN                        = $83; $83 ABS(
=$84					KWD_ALLOCLPAREN                      = $84; $84 ALLOC(
=$85					KWD_ASCLPAREN                        = $85; $85 ASC(
=$86					KWD_CHRDOLLARLPAREN                  = $86; $86 CHR$(
=$87					KWD_EVENTLPAREN                      = $87; $87 EVENT(
=$88					KWD_FALSE                            = $88; $88 FALSE
=$89					KWD_FRACLPAREN                       = $89; $89 FRAC(
=$8a					KWD_HITLPAREN                        = $8a; $8a HIT(
=$8b					KWD_INTLPAREN                        = $8b; $8b INT(
=$8c					KWD_ISVALLPAREN                      = $8c; $8c ISVAL(
=$8d					KWD_JOYBLPAREN                       = $8d; $8d JOYB(
=$8e					KWD_JOYXLPAREN                       = $8e; $8e JOYX(
=$8f					KWD_JOYYLPAREN                       = $8f; $8f JOYY(
=$90					KWD_LEFTDOLLARLPAREN                 = $90; $90 LEFT$(
=$91					KWD_LENLPAREN                        = $91; $91 LEN(
=$92					KWD_MAXLPAREN                        = $92; $92 MAX(
=$93					KWD_MIDDOLLARLPAREN                  = $93; $93 MID$(
=$94					KWD_MINLPAREN                        = $94; $94 MIN(
=$95					KWD_NOTLPAREN                        = $95; $95 NOT(
=$96					KWD_RANDOMLPAREN                     = $96; $96 RANDOM(
=$97					KWD_RIGHTDOLLARLPAREN                = $97; $97 RIGHT$(
=$98					KWD_RNDLPAREN                        = $98; $98 RND(
=$99					KWD_SGNLPAREN                        = $99; $99 SGN(
=$9a					KWD_SPCLPAREN                        = $9a; $9a SPC(
=$9b					KWD_STRDOLLARLPAREN                  = $9b; $9b STR$(
=$9c					KWD_TIMERLPAREN                      = $9c; $9c TIMER(
=$9d					KWD_TRUE                             = $9d; $9d TRUE
=$9e					KWD_VALLPAREN                        = $9e; $9e VAL(
=$9f					KWD_FOR                              = $9f; $9f FOR
=$a0					KWD_IF                               = $a0; $a0 IF
=$a1					KWD_PROC                             = $a1; $a1 PROC
=$a2					KWD_REPEAT                           = $a2; $a2 REPEAT
=$a3					KWD_WHILE                            = $a3; $a3 WHILE
=$a4					KWD_ENDIF                            = $a4; $a4 ENDIF
=$a5					KWD_ENDPROC                          = $a5; $a5 ENDPROC
=$a6					KWD_NEXT                             = $a6; $a6 NEXT
=$a7					KWD_THEN                             = $a7; $a7 THEN
=$a8					KWD_UNTIL                            = $a8; $a8 UNTIL
=$a9					KWD_WEND                             = $a9; $a9 WEND
=$aa					KWD_BY                               = $aa; $aa BY
=$ab					KWD_CALL                             = $ab; $ab CALL
=$ac					KWD_CIRCLE                           = $ac; $ac CIRCLE
=$ad					KWD_CLEAR                            = $ad; $ad CLEAR
=$ae					KWD_CLS                              = $ae; $ae CLS
=$af					KWD_COLOR                            = $af; $af COLOR
=$b0					KWD_COLOUR                           = $b0; $b0 COLOUR
=$b1					KWD_DATA                             = $b1; $b1 DATA
=$b2					KWD_DIM                              = $b2; $b2 DIM
=$b3					KWD_DOWNTO                           = $b3; $b3 DOWNTO
=$b4					KWD_ELSE                             = $b4; $b4 ELSE
=$b5					KWD_FROM                             = $b5; $b5 FROM
=$b6					KWD_GFX                              = $b6; $b6 GFX
=$b7					KWD_GOSUB                            = $b7; $b7 GOSUB
=$b8					KWD_GOTO                             = $b8; $b8 GOTO
=$b9					KWD_HERE                             = $b9; $b9 HERE
=$ba					KWD_IMAGE                            = $ba; $ba IMAGE
=$bb					KWD_LET                              = $bb; $bb LET
=$bc					KWD_LINE                             = $bc; $bc LINE
=$bd					KWD_LOCAL                            = $bd; $bd LOCAL
=$be					KWD_OFF                              = $be; $be OFF
=$bf					KWD_ON                               = $bf; $bf ON
=$c0					KWD_OUTLINE                          = $c0; $c0 OUTLINE
=$c1					KWD_PLOT                             = $c1; $c1 PLOT
=$c2					KWD_PRINT                            = $c2; $c2 PRINT
=$c3					KWD_READ                             = $c3; $c3 READ
=$c4					KWD_RECT                             = $c4; $c4 RECT
=$c5					KWD_REM                              = $c5; $c5 REM
=$c6					KWD_RETURN                           = $c6; $c6 RETURN
=$c7					KWD_SOLID                            = $c7; $c7 SOLID
=$c8					KWD_SPRITE                           = $c8; $c8 SPRITE
=$c9					KWD_TEXT                             = $c9; $c9 TEXT
=$ca					KWD_TO                               = $ca; $ca TO

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst0.inc

=$80					KWC_EOL = $80
=$ff					KWC_STRING = $FF
=$fe					KWC_HEXCONST = $FE
=$9f					KWC_FIRST_STRUCTURE = $9f
=$a4					KWC_FIRST_STRUCTURE_DEC = $a4
=$a9					KWC_LAST_STRUCTURE = $a9
=$83					KWC_FIRST_UNARY = $83
=$9e					KWC_LAST_UNARY = $9e

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/stack.inc

=$e0					STK_GOSUB = $E0
=$d0					STK_FOR = $D0
=$c0					STK_REPEAT = $C0
=$b0					STK_PROC = $B0
=$a0					STK_WHILE = $A0
=$01					STK_LOCALN = $01
=$02					STK_LOCALS = $02

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/00start.asm

.8000	a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.8002	9a		txs				txs
.8003	20 08 b5	jsr $b508			jsr 	EXTInitialise 				; hardware initialise
.8006	a9 00		lda #$00			lda 	#0 							; graphics system initialise.
.8008	8a		txa				txa
.8009	a8		tay				tay
.800a	20 85 80	jsr $8085			jsr 	GXGraphicDraw
.800d	a2 80		ldx #$80			ldx 	#(Prompt >> 8) 				; prompt
.800f	a9 1d		lda #$1d			lda 	#(Prompt & $FF)
.8011	20 6a 99	jsr $996a			jsr 	PrintStringXA
.8014	20 fa 92	jsr $92fa			jsr 	NewCommand 					; erase current program
.8017	20 6a a6	jsr $a66a			jsr 	BackloadProgram
.801a	4c 75 94	jmp $9475			jmp 	CommandRun
>801d	0d 0d 2a 2a 2a 20 46 32		Prompt:	.text 	13,13,"*** F256 Junior SuperBASIC ***",13,13
>8025	35 36 20 4a 75 6e 69 6f 72 20 53 75 70 65 72 42
>8035	41 53 49 43 20 2a 2a 2a 0d 0d
>803f	57 72 69 74 74 65 6e 20				.text 	"Written by Paul Robson 2022.",13,13
>8047	62 79 20 50 61 75 6c 20 52 6f 62 73 6f 6e 20 32
>8057	30 32 32 2e 0d 0d

;******  Processing file: ./common/aa.system/../generated/timestamp.asm

>805d	42 75 69 6c 74 20 53 75			.text "Built Sunday 23-Oct-2022. Build 2232."
>8065	6e 64 61 79 20 32 33 2d 4f 63 74 2d 32 30 32 32
>8075	2e 20 42 75 69 6c 64 20 32 32 33 32 2e

;******  Return to file: ./common/aa.system/00start.asm

>8082	0d 0d 00					.byte 	13,13,0

;******  Processing file: ./common/aa.system/../../../graphics/_graphics.asm

=1					graphicsIntegrated = 1

;******  Processing file: ./common/aa.system/../../../graphics/./aa.main/aa.data.asm

=3					GXMappingPage = 3
=24576					GXMappingAddress = ($2000 * GXMappingPage)
=0					GXMappingLUT = 0
=11					GXEditSlot = 8 + GXMappingPage
=$36					gxzTemp0 = zTemp0
=$38					gxzTemp1 = zTemp1
=$3a					gxzTemp2 = zTemp2
=$3c					gxzScreen = zsTemp
=$5f7					gxPixelBuffer = numberBuffer
.0629					gxCurrentX:
>0629							.fill 	2
.062b					gxCurrentY:
>062b							.fill 	2
.062d					gxLastX:
>062d							.fill 	2
.062f					gxLastY:
>062f							.fill 	2
.0631					gxX0:
>0631							.fill 	2
.0633					gxY0:
>0633							.fill 	2
.0635					gxX1:
>0635							.fill 	2
.0637					gxY1:
>0637							.fill 	2
.0639					gxSpritesOn:
>0639							.fill 	1
.063a					gxBitmapsOn:
>063a							.fill 	1
.063b					gxBasePage:
>063b							.fill 	1
.063c					gxSpritePage:
>063c							.fill 	1
.063d					gxHeight:
>063d							.fill 	1
.063e					gxMode:
>063e							.fill 	1
.063f					gxColour:
>063f							.fill 	1
.0640					gxEORValue:
>0640							.fill 	1
.0641					gxANDValue:
>0641							.fill 	1
.0642					gxOriginalLUTValue:
>0642							.fill 	1
.0643					gxOriginalMMUSetting:
>0643							.fill 	1
.0644					gsOffset:
>0644							.fill 	1
.0645					GSCurrentSprite:
>0645							.fill 	2
.0647					GXSpriteOffsetBase:
>0647							.fill 	2

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./aa.main/main.asm

.8085					GXGraphicDraw:
.8085	c9 20		cmp #$20			cmp 	#$10*2 						; instructions 00-0F don't use
.8087	b0 06		bcs $808f			bcs 	_GDCoordinate
.8089	86 36		stx $36				stx 	gxzTemp0 					; save X/Y
.808b	84 37		sty $37				sty 	gxzTemp0+1
.808d	80 4b		bra $80da			bra 	_GDExecuteA 				; and execute
.808f					_GDCoordinate:
.808f	48		pha				pha 								; save AXY
.8090	da		phx				phx
.8091	5a		phy				phy
.8092	a2 03		ldx #$03			ldx 	#3 							; copy currentX to lastX
.8094					_GDCopy1:
.8094	bd 29 06	lda $0629,x			lda 	gxCurrentX,x
.8097	9d 2d 06	sta $062d,x			sta 	gxLastX,x
.809a	ca		dex				dex
.809b	10 f7		bpl $8094			bpl 	_GDCopy1
.809d	68		pla				pla 								; update Y
.809e	8d 2b 06	sta $062b			sta 	gxCurrentY
.80a1	9c 2c 06	stz $062c			stz 	gxCurrentY+1
.80a4	68		pla				pla
.80a5	8d 29 06	sta $0629			sta 	gxCurrentX
.80a8	68		pla				pla 								; get A (command+X.1) back
.80a9	48		pha				pha
.80aa	29 01		and #$01			and 	#1 							; put LSB as MSB of Current.X
.80ac	8d 2a 06	sta $062a			sta 	gxCurrentX+1
.80af	68		pla				pla 								; get command back
.80b0	29 fe		and #$fe			and 	#$FE 						; lose LSB, chuck the stray X bit
.80b2	48		pha				pha 								; push back.
.80b3	c9 32		cmp #$32			cmp 	#25*2 						; move sprite does not clip.
.80b5	f0 17		beq $80ce			beq 	_GDCopyToWorkArea
.80b7	ad 2a 06	lda $062a			lda 	gxCurrentX+1 				; X < 256 X okay
.80ba	f0 07		beq $80c3			beq 	_GDCheckY
.80bc	ad 29 06	lda $0629			lda 	gxCurrentX 					; otherwise X < 320 = 256 + 64
.80bf	c9 40		cmp #$40			cmp 	#64
.80c1	b0 08		bcs $80cb			bcs 	_GDError1
.80c3					_GDCheckY:
.80c3	ad 2b 06	lda $062b			lda 	gxCurrentY 					; check Y < Height.
.80c6	cd 3d 06	cmp $063d			cmp 	gxHeight
.80c9	90 03		bcc $80ce			bcc 	_GDCopyToWorkArea
.80cb					_GDError1:
.80cb	68		pla				pla
.80cc					_GDError2:
.80cc	38		sec				sec
.80cd	60		rts				rts
.80ce					_GDCopyToWorkArea:
.80ce	a2 07		ldx #$07			ldx 	#7 							; copy current and last to gxXY/12 work area
.80d0					_GDCopy2:
.80d0	bd 29 06	lda $0629,x			lda 	gxCurrentX,x
.80d3	9d 31 06	sta $0631,x			sta 	gxX0,x
.80d6	ca		dex				dex
.80d7	10 f7		bpl $80d0			bpl 	_GDCopy2
.80d9	68		pla				pla 								; get command
.80da					_GDExecuteA:
.80da	c9 34		cmp #$34			cmp 	#GRFirstFreeCode*2 			; bad ?
.80dc	b0 ee		bcs $80cc			bcs 	_GDError2
.80de	aa		tax				tax
.80df	7c e5 80	jmp ($80e5,x)			jmp 	(GRVectorTable,x)
.80e2					GXMove:
.80e2	18		clc				clc
.80e3	60		rts				rts
.80e4					GRUndefined:
>80e4	db						.byte 	$DB 						; causes a break in the emulator

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./aa.main/vectors.asm

=26					GRFirstFreeCode = 26
.80e5					GRVectorTable:
>80e5	b4 82					.word	GXInitialise             ; $00 Initialise
>80e7	cb 82					.word	GXControlBitmap          ; $01 BitmapCtl
>80e9	13 83					.word	GXControlSprite          ; $02 SpriteCtl
>80eb	66 82					.word	GXClearBitmap            ; $03 Clear
>80ed	91 84					.word	GXSetColourMode          ; $04 Colour
>80ef	5c 86					.word	GXFontHandler            ; $05 DrawFont
>80f1	a4 86					.word	GXSpriteHandler          ; $06 DrawSprite
>80f3	0c 87					.word	GXSelect                 ; $07 SPRUSE
>80f5	32 87					.word	GXSelectImage            ; $08 SPRIMG
>80f7	e4 80					.word	GRUndefined              ; $09
>80f9	e4 80					.word	GRUndefined              ; $0a
>80fb	e4 80					.word	GRUndefined              ; $0b
>80fd	e4 80					.word	GRUndefined              ; $0c
>80ff	e4 80					.word	GRUndefined              ; $0d
>8101	e4 80					.word	GRUndefined              ; $0e
>8103	e4 80					.word	GRUndefined              ; $0f
>8105	e2 80					.word	GXMove                   ; $10 Move
>8107	5f 83					.word	GXLine                   ; $11 Line
>8109	da 84					.word	GXFrameRectangle         ; $12 FrameRect
>810b	d7 84					.word	GXFillRectangle          ; $13 FillRect
>810d	1d 81					.word	GXFrameCircle            ; $14 FrameCircle
>810f	19 81					.word	GXFillCircle             ; $15 FillCircle
>8111	e4 80					.word	GRUndefined              ; $16
>8113	e4 80					.word	GRUndefined              ; $17
>8115	bf 84					.word	GXPlotPoint              ; $18 Plot
>8117	97 87					.word	GXMoveSprite             ; $19 SPRMOVE

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/circle.asm

.8119					GXFillCircle:
.8119	a9 ff		lda #$ff			lda 	#255
.811b	80 02		bra $811f			bra 	GXCircle
.811d					GXFrameCircle:
.811d	a9 00		lda #$00			lda 	#0
.811f					GXCircle:
.811f	8d 4c 06	sta $064c			sta 	gxIsFillMode					; save Fill flag
.8122	ad 3a 06	lda $063a			lda 	gxBitmapsOn
.8125	f0 26		beq $814d			beq 	_GXCFail
.8127	20 9e 88	jsr $889e			jsr 	GXSortXY 					; topleft/bottomright
.812a	20 d3 87	jsr $87d3			jsr 	GXOpenBitmap 				; start drawing
.812d	20 1f 82	jsr $821f			jsr 	GXCircleSetup 				; set up for drawing
.8130	9c 4d 06	stz $064d			stz 	gxYChanged
.8133					_GXCircleDraw:
.8133	ad 4a 06	lda $064a			lda 	gXCentre					; while x <= y
.8136	cd 4b 06	cmp $064b			cmp 	gYCentre
.8139	90 0a		bcc $8145			bcc 	_GXCircleContinue
.813b	d0 03		bne $8140			bne 	_GXNoLast
.813d	20 52 81	jsr $8152			jsr 	GXPlot1
.8140					_GXNoLast:
.8140	20 e4 87	jsr $87e4			jsr 	GXCloseBitmap 				; close the bitmap
.8143	18		clc				clc
.8144	60		rts				rts
.8145					_GXCircleContinue:
.8145	20 4f 81	jsr $814f			jsr 	GXPlot2 					; draw it
.8148	20 cc 81	jsr $81cc			jsr 	GXCircleMove 				; adjust the coordinates
.814b	80 e6		bra $8133			bra 	_GXCircleDraw
.814d					_GXCFail:
.814d	38		sec				sec
.814e	60		rts				rts
.814f					GXPlot2:
.814f	20 52 81	jsr $8152			jsr 	GXPlot1 						; plot and swap, fall through does twice
.8152					GXPlot1:
.8152	ad 4b 06	lda $064b			lda 	gYCentre 						; if y = 0, don't do it twice (xor)
.8155	f0 03		beq $815a			beq 	_GXPlot1Only
.8157	20 76 81	jsr $8176			jsr 	GXPlot0 						; plot and negate
.815a					_GXPlot1Only:
.815a	20 76 81	jsr $8176			jsr 	GXPlot0 						; twice, undoing negation
.815d	ad 4a 06	lda $064a			lda 	gXCentre 						; swap X and Y
.8160	ae 4b 06	ldx $064b			ldx	 	gYCentre
.8163	8d 4b 06	sta $064b			sta 	gYCentre
.8166	8e 4a 06	stx $064a			stx 	gXCentre
.8169	ad 4d 06	lda $064d			lda 	gxYChanged 						; toggle Y Changed flag
.816c	a9 ff		lda #$ff			lda 	#$FF
.816e	8d 4d 06	sta $064d			sta 	gxYChanged
.8171	60		rts				rts
.8172	20 76 81	jsr $8176			jsr 	GXPlot0 						; do once
.8175	60		rts				rts
.8176	ad 4c 06	lda $064c	GXPlot0:lda 	gxIsFillMode 					; outline mode, always draw as X or Y will change
.8179	f0 05		beq $8180			beq 	_GXPlot0Always
.817b	ad 4d 06	lda $064d			lda 	gxYChanged						; fill mode, only draw if changed.
.817e	f0 2d		beq $81ad			beq 	GXPlot0Exit
.8180					_GXPlot0Always:
.8180	a2 02		ldx #$02			ldx 	#2 								; copy Y1-A => Y0
.8182	ad 4b 06	lda $064b			lda 	gYCentre
.8185	20 ae 81	jsr $81ae			jsr 	GXSubCopy
.8188	a2 00		ldx #$00			ldx 	#0 								; copy X1-A => X0,
.818a	ad 4a 06	lda $064a			lda 	gXCentre
.818d	20 ae 81	jsr $81ae			jsr 	GXSubCopy
.8190	48		pha				pha 									; save last offset X
.8191	20 f1 87	jsr $87f1			jsr 	GXPositionCalc 					; calculate position/offset.
.8194	68		pla				pla
.8195	0a		asl a				asl 	a 								; store 2 x last offset in gxzTemp0
.8196	85 36		sta $36				sta 	gxzTemp0
.8198	64 37		stz $37				stz 	gxzTemp0+1
.819a	26 37		rol $37				rol 	gxzTemp0+1
.819c	ad 4c 06	lda $064c			lda 	gxIsFillMode
.819f	69 80		adc #$80			adc 	#128
.81a1	20 2a 85	jsr $852a			jsr 	GXDrawLineTemp0 				; routine from Rectangle.
.81a4	38		sec				sec 									; GY = -GY
.81a5	a9 00		lda #$00			lda 	#0
.81a7	ed 4b 06	sbc $064b			sbc 	gYCentre
.81aa	8d 4b 06	sta $064b			sta 	gYCentre
.81ad					GXPlot0Exit:
.81ad	60		rts				rts
.81ae					GXSubCopy:
.81ae	85 36		sta $36				sta 	gxzTemp0
.81b0	64 37		stz $37				stz 	gxzTemp0+1
.81b2	29 80		and #$80			and 	#$80
.81b4	f0 02		beq $81b8			beq 	_GXNoSx
.81b6	c6 37		dec $37				dec 	gxzTemp0+1
.81b8					_GXNoSx:
.81b8	38		sec				sec
.81b9	bd 35 06	lda $0635,x			lda 	gXX1,x
.81bc	e5 36		sbc $36				sbc 	gxzTemp0
.81be	9d 31 06	sta $0631,x			sta 	gXX0,x
.81c1	bd 36 06	lda $0636,x			lda 	gXX1+1,x
.81c4	e5 37		sbc $37				sbc 	gxzTemp0+1
.81c6	9d 32 06	sta $0632,x			sta 	gXX0+1,x
.81c9	a5 36		lda $36				lda 	gxzTemp0 						; return A
.81cb	60		rts				rts
.81cc					GXCircleMove:
.81cc	9c 4d 06	stz $064d			stz 	gxYChanged 					; clear Y changed flag
.81cf	a5 39		lda $39				lda 	gxzTemp1+1 					; check sign of D
.81d1	10 0d		bpl $81e0			bpl 	_GXEMPositive
.81d3	ee 4a 06	inc $064a			inc 	gXCentre 					; X++
.81d6	ad 4a 06	lda $064a			lda 	gXCentre
.81d9	20 ff 81	jsr $81ff			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.81dc	a9 06		lda #$06			lda 	#6  						; and add 6
.81de	80 15		bra $81f5			bra 	_GXEMAddD
.81e0					_GXEMPositive:
.81e0	ee 4a 06	inc $064a			inc 	gXCentre					; X++
.81e3	ce 4b 06	dec $064b			dec 	gyCentre 					; Y--
.81e6	38		sec				sec 								; calculate X-Y
.81e7	ad 4a 06	lda $064a			lda 	gXCentre
.81ea	ed 4b 06	sbc $064b			sbc 	gYCentre
.81ed	20 ff 81	jsr $81ff			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.81f0	a9 0a		lda #$0a			lda 	#10  						; and add 10
.81f2	ce 4d 06	dec $064d			dec 	gxYChanged
.81f5					_GXEMAddD:
.81f5	18		clc				clc
.81f6	65 38		adc $38				adc 	gxzTemp1
.81f8	85 38		sta $38				sta 	gxzTemp1
.81fa	90 02		bcc $81fe			bcc 	_GXEMNoCarry
.81fc	e6 39		inc $39				inc 	gxzTemp1+1
.81fe					_GXEMNoCarry:
.81fe	60		rts				rts
.81ff					_GXAdd4TimesToD:
.81ff	85 36		sta $36				sta 	gxzTemp0 					; make 16 bit signed.
.8201	29 80		and #$80			and 	#$80
.8203	f0 02		beq $8207			beq 	_GXA4Unsigned
.8205	a9 ff		lda #$ff			lda 	#$FF
.8207					_GXA4Unsigned:
.8207	85 37		sta $37				sta 	gxzTemp0+1
.8209	06 36		asl $36				asl 	gxzTemp0  					; x 4
.820b	26 37		rol $37				rol 	gxzTemp0+1
.820d	06 36		asl $36				asl 	gxzTemp0
.820f	26 37		rol $37				rol 	gxzTemp0+1
.8211	18		clc				clc 								; add
.8212	a5 36		lda $36				lda		gxzTemp0
.8214	65 38		adc $38				adc 	gxzTemp1
.8216	85 38		sta $38				sta 	gxzTemp1
.8218	a5 37		lda $37				lda		gxzTemp0+1
.821a	65 39		adc $39				adc 	gxzTemp1+1
.821c	85 39		sta $39				sta 	gxzTemp1+1
.821e	60		rts				rts
.821f					GXCircleSetup:
.821f	38		sec				sec
.8220	ad 37 06	lda $0637			lda 	gxY1
.8223	ed 33 06	sbc $0633			sbc 	gxY0
.8226	4a		lsr a				lsr 	a
.8227	8d 49 06	sta $0649			sta 	gxRadius
.822a	a2 00		ldx #$00			ldx 	#0
.822c	20 4e 82	jsr $824e			jsr 	_GXCalculateCentre
.822f	a2 02		ldx #$02			ldx 	#2
.8231	20 4e 82	jsr $824e			jsr 	_GXCalculateCentre
.8234	9c 4a 06	stz $064a			stz 	gXCentre
.8237	ad 49 06	lda $0649			lda 	gxRadius
.823a	8d 4b 06	sta $064b			sta 	gYCentre
.823d	0a		asl a				asl 	a 							; R x 2
.823e	85 36		sta $36				sta 	gxzTemp0
.8240	38		sec				sec
.8241	a9 03		lda #$03			lda 	#3
.8243	e5 36		sbc $36				sbc 	gxzTemp0
.8245	85 38		sta $38				sta 	gxzTemp1
.8247	a9 00		lda #$00			lda 	#0
.8249	e9 00		sbc #$00			sbc 	#0
.824b	85 39		sta $39				sta 	gxzTemp1+1
.824d	60		rts				rts
.824e					_GXCalculateCentre:
.824e	38		sec				sec
.824f	bd 35 06	lda $0635,x			lda 	gxX1,x
.8252	7d 31 06	adc $0631,x			adc 	gXX0,x
.8255	9d 35 06	sta $0635,x			sta 	gXX1,x
.8258	bd 36 06	lda $0636,x			lda 	gXX1+1,x
.825b	7d 32 06	adc $0632,x			adc 	gXX0+1,x
.825e	4a		lsr a				lsr 	a
.825f	9d 36 06	sta $0636,x			sta 	gXX1+1,x
.8262	7e 35 06	ror $0635,x			ror 	gXX1,x
.8265	60		rts				rts
.0649					gxRadius:
>0649							.fill 	1
.064a					gXCentre:
>064a							.fill 	1
.064b					gYCentre:
>064b							.fill 	1
.064c					gxIsFillMode:
>064c							.fill 	1
.064d					gxYChanged:
>064d							.fill  	1

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/clear.asm

=64000					ScreenSize200 = 320 * 200
=76800					ScreenSize240 = 320 * 240
.8266					GXClearBitmap:
.8266	ad 3a 06	lda $063a			lda 	gxBitmapsOn 				; check BMP running.
.8269	f0 24		beq $828f			beq 	_GXCBFail
.826b	20 d3 87	jsr $87d3			jsr 	GXOpenBitmap 				; start access
.826e	a0 07		ldy #$07			ldy 	#ScreenSize200 / 8192 		; X is pages to clear
.8270	ad 3d 06	lda $063d			lda 	gxHeight
.8273	c9 c8		cmp #$c8			cmp 	#200 						; 200 ?
.8275	a0 09		ldy #$09			ldy 	#ScreenSize240 / 8192
.8277					_GXCalcLastPage:
.8277	98		tya				tya 								; add to base page
.8278	18		clc				clc
.8279	6d 3b 06	adc $063b			adc 	gxBasePage
.827c	85 0b		sta $0b				sta 	GXEditSlot  				; clear from this page back
.827e					_GXClearAll:
.827e	20 91 82	jsr $8291			jsr 	_GXClearBlock 				; clear 8k block
.8281	c6 0b		dec $0b				dec 	GXEditSlot  				; back to previous
.8283	a5 0b		lda $0b				lda 	GXEditSlot
.8285	cd 3b 06	cmp $063b			cmp 	gxBasePage 					; until before base page
.8288	b0 f4		bcs $827e			bcs 	_GXClearAll
.828a	20 e4 87	jsr $87e4			jsr 	GXCloseBitmap	 			; stop access
.828d	18		clc				clc
.828e	60		rts				rts
.828f					_GXCBFail:
.828f	38		sec				sec
.8290	60		rts				rts
.8291					_GXClearBlock:
.8291	a9 00		lda #$00			lda 	#((GXMappingAddress) & $FF)
.8293	85 38		sta $38				sta 	0+gxzTemp1
.8295	a9 60		lda #$60			lda 	#((GXMappingAddress) >> 8)
.8297	85 39		sta $39				sta 	1+gxzTemp1
.8299					_GXCB0:
.8299	a5 36		lda $36				lda 	gxzTemp0
.829b	a0 00		ldy #$00			ldy 	#0
.829d					_GXCB1:
.829d	91 38		sta ($38),y			sta 	(gxzTemp1),y
.829f	c8		iny				iny
.82a0	91 38		sta ($38),y			sta 	(gxzTemp1),y
.82a2	c8		iny				iny
.82a3	91 38		sta ($38),y			sta 	(gxzTemp1),y
.82a5	c8		iny				iny
.82a6	91 38		sta ($38),y			sta 	(gxzTemp1),y
.82a8	c8		iny				iny
.82a9	d0 f2		bne $829d			bne 	_GXCB1
.82ab	e6 39		inc $39				inc 	gxzTemp1+1
.82ad	a5 39		lda $39				lda 	gxzTemp1+1
.82af	c9 80		cmp #$80			cmp	 	#(GXMappingAddress >> 8)+$20
.82b1	d0 e6		bne $8299			bne 	_GXCB0
.82b3	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/control.asm

.82b4					GXInitialise:
.82b4	64 01		stz $01				stz 	1
.82b6	a9 01		lda #$01			lda 	#1
.82b8	8d 00 d0	sta $d000			sta 	$D000
.82bb	18		clc				clc
.82bc	9c 39 06	stz $0639			stz 	GXSpritesOn
.82bf	9c 3a 06	stz $063a			stz 	GXBitmapsOn
.82c2	a2 0f		ldx #$0f			ldx 	#15
.82c4					_GXIClear:
.82c4	9e 29 06	stz $0629,x			stz 	gxCurrentX,x
.82c7	ca		dex				dex
.82c8	10 fa		bpl $82c4			bpl 	_GXIClear
.82ca	60		rts				rts
.82cb					GXControlBitmap:
.82cb	64 01		stz $01				stz 	1
.82cd	a5 36		lda $36				lda 	gxzTemp0 					; get control bits
.82cf	29 01		and #$01			and 	#1 							; set bitmap flag
.82d1	8d 3a 06	sta $063a			sta 	gxBitmapsOn
.82d4	4a		lsr a				lsr 	a 							; bit 0 into carry.
.82d5	ad 00 d0	lda $d000			lda 	$D000 						; read Vicky MCR
.82d8	09 07		ora #$07			ora 	#7 							; turn graphics, text, textoverlay on.
.82da	29 f7		and #$f7			and 	#$F7 						; clear bitmap bit
.82dc	90 02		bcc $82e0			bcc 	_CBNotOn
.82de	09 08		ora #$08			ora 	#$08 						; bitmap on if 1 on 0 off
.82e0					_CBNotOn:
.82e0	8d 00 d0	sta $d000			sta 	$D000 						; update Vicky MCR
.82e3	a5 36		lda $36				lda 	gxzTemp0 					; get control settings (bits 0-2)
.82e5	29 07		and #$07			and 	#7
.82e7	8d 00 d1	sta $d100			sta 	$D100 						; write in Vicky Bitmap Control Register #0
.82ea	a5 37		lda $37				lda 	gxzTemp0+1 					; get the base page
.82ec	d0 02		bne $82f0			bne 	_CBNotDefault
.82ee	a9 08		lda #$08			lda 	#8  						; if zero, use 8 e.g. bitmap at $10000
.82f0					_CBNotDefault:
.82f0	8d 3b 06	sta $063b			sta 	gxBasePage
.82f3	20 51 83	jsr $8351			jsr 	GXCalculateBaseAddress 	 	; convert page# to address
.82f6	a5 37		lda $37				lda 	gxzTemp0+1 					; copy address into Bitmap address registers
.82f8	8d 03 d1	sta $d103			sta 	$D103
.82fb	a5 36		lda $36				lda 	gxzTemp0
.82fd	8d 02 d1	sta $d102			sta 	$D102
.8300	9c 01 d1	stz $d101			stz 	$D101
.8303	a2 f0		ldx #$f0			ldx 	#240 						; height is 240
.8305	ad 01 d0	lda $d001			lda 	$D001 						; read MCR bit 0
.8308	29 01		and #$01			and 	#1
.830a	f0 02		beq $830e			beq 	_CBHaveHeight
.830c	a2 c8		ldx #$c8			ldx 	#200 						; if bit 0 set 320x200
.830e					_CBHaveHeight
.830e	8e 3d 06	stx $063d			stx 	gxHeight
.8311	18		clc				clc
.8312	60		rts				rts
.8313					GXControlSprite:
.8313	64 01		stz $01				stz 	1
.8315	a5 36		lda $36				lda 	gxzTemp0 					; get control bits
.8317	29 01		and #$01			and 	#1 							; set sprites flag
.8319	8d 39 06	sta $0639			sta 	gxSpritesOn
.831c	4a		lsr a				lsr 	a 							; bit 0 into carry.
.831d	ad 00 d0	lda $d000			lda 	$D000 						; read Vicky MCR
.8320	09 07		ora #$07			ora 	#7 							; turn graphics, text, textoverlay on.
.8322	29 df		and #$df			and 	#$DF 						; clear sprite bit
.8324	90 02		bcc $8328			bcc 	_CSNotOn
.8326	09 20		ora #$20			ora 	#$20 						; sprite on if 1 on 0 off
.8328					_CSNotOn:
.8328	8d 00 d0	sta $d000			sta 	$D000 						; update Vicky MCR
.832b	a5 37		lda $37				lda 	gxzTemp0+1 					; get the base page
.832d	d0 02		bne $8331			bne 	_CSNotDefault
.832f	a9 18		lda #$18			lda 	#24  						; if zero, use 24 e.g. sprites at $30000
.8331					_CSNotDefault:
.8331	8d 3c 06	sta $063c			sta 	gxSpritePage
.8334	20 51 83	jsr $8351			jsr 	GXCalculateBaseAddress 	 	; convert page# to address
.8337	a5 36		lda $36				lda 	zTemp0
.8339	8d 47 06	sta $0647			sta 	GXSpriteOffsetBase
.833c	a5 37		lda $37				lda 	zTemp0+1
.833e	8d 48 06	sta $0648			sta 	GXSpriteOffsetBase+1
.8341	a2 00		ldx #$00			ldx 	#0 							; disable all sprites, clears all sprite memory.
.8343					_CSClear:
.8343	9e 00 d9	stz $d900,x			stz 	$D900,x
.8346	9e 00 da	stz $da00,x			stz 	$DA00,x
.8349	ca		dex				dex
.834a	d0 f7		bne $8343			bne 	_CSClear
.834c	9c 46 06	stz $0646			stz 	GSCurrentSprite+1 			; no sprite selected.
.834f	18		clc				clc
.8350	60		rts				rts
.8351					GXCalculateBaseAddress:
.8351	85 36		sta $36				sta 	gxzTemp0
.8353	64 37		stz $37				stz 	gxzTemp0+1
.8355	a9 05		lda #$05			lda 	#5
.8357					_GXShift:
.8357	06 36		asl $36				asl 	gxzTemp0
.8359	26 37		rol $37				rol 	gxzTemp0+1
.835b	3a		dec a				dec		a
.835c	d0 f9		bne $8357			bne 	_GXShift
.835e	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/line.asm

.835f					GXLine:
.835f	ad 3a 06	lda $063a			lda 	GXBitmapsOn
.8362	f0 28		beq $838c			beq 	_GXLFail
.8364	20 d3 87	jsr $87d3			jsr 	GXOpenBitmap
.8367	20 bc 88	jsr $88bc			jsr 	GXSortY						; sort pairs so Y1 >= Y0 e.g. top to bottom.
.836a	20 32 84	jsr $8432			jsr 	GXLineSetup 				; the calculations in the linescanner constructor
.836d	20 f1 87	jsr $87f1			jsr 	GXPositionCalc 				; calculate position/offset.
.8370					_GXDrawLoop:
.8370	ac 44 06	ldy $0644			ldy 	gsOffset 					; draw the pixel
.8373	b1 3c		lda ($3c),y			lda 	(gxzScreen),y
.8375	2d 41 06	and $0641			and 	gxANDValue
.8378	4d 40 06	eor $0640			eor 	gxEORValue
.837b	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.837d	20 8e 83	jsr $838e			jsr 	GXLineIsComplete 			; is the line complete ?
.8380	f0 05		beq $8387			beq 	_GXLExit
.8382	20 a9 83	jsr $83a9			jsr 	GXLineAdvance 				; code as per advance method
.8385	80 e9		bra $8370			bra 	_GXDrawLoop
.8387					_GXLExit:
.8387	20 e4 87	jsr $87e4			jsr 	GXCloseBitmap
.838a	18		clc				clc
.838b	60		rts				rts
.838c					_GXLFail:
.838c	38		sec				sec
.838d	60		rts				rts
.838e					GXLineIsComplete:
.838e	ad 50 06	lda $0650			lda 	GXIsDiffYLarger 			; is dy larger
.8391	d0 0f		bne $83a2			bne 	_GXLICCompareY 				; if so compare Y1/Y0
.8393	ad 31 06	lda $0631			lda 	GXX0 						; compare X, LSB and MSB
.8396	4d 35 06	eor $0635			eor 	GXX1
.8399	d0 06		bne $83a1			bne 	_GXLICExit
.839b	ad 32 06	lda $0632			lda 	GXX0+1
.839e	4d 36 06	eor $0636			eor 	GXX1+1
.83a1					_GXLICExit:
.83a1	60		rts				rts
.83a2					_GXLICCompareY:
.83a2	ad 37 06	lda $0637			lda 	GXY1
.83a5	4d 33 06	eor $0633			eor 	GXY0
.83a8	60		rts				rts
.83a9					GXLineAdvance:
.83a9	18		clc				clc 								; add adjust to position
.83aa	ad 52 06	lda $0652			lda 	GXPosition
.83ad	6d 53 06	adc $0653			adc 	GXAdjust
.83b0	8d 52 06	sta $0652			sta 	GXPosition
.83b3	9c 55 06	stz $0655			stz 	GXAddSelect 				; clear add select flag
.83b6	b0 05		bcs $83bd			bcs 	_GXLAOverflow 				; if carry out, overflowed.
.83b8	cd 54 06	cmp $0654			cmp 	GXTotal 					; if exceeded total
.83bb	90 0a		bcc $83c7			bcc 	_GXLANoExtra
.83bd					_GXLAOverflow:
.83bd	ce 55 06	dec $0655			dec 	GXAddSelect 				; set addselect to $FF
.83c0	38		sec				sec 								; subtract total and write back
.83c1	ed 54 06	sbc $0654			sbc 	GXTotal
.83c4	8d 52 06	sta $0652			sta 	GXPosition
.83c7					_GXLANoExtra:
.83c7	ad 50 06	lda $0650			lda 	GXIsDiffYLarger
.83ca	f0 0d		beq $83d9			beq 	_GXDXLarger
.83cc	20 2b 84	jsr $842b			jsr 	GXIncrementY
.83cf	ad 55 06	lda $0655			lda 	GXAddSelect
.83d2	f0 10		beq $83e4			beq 	_GXLAExit
.83d4	20 e5 83	jsr $83e5			jsr 	GXAdjustX
.83d7	80 0b		bra $83e4			bra 	_GXLAExit
.83d9					_GXDXLarger:
.83d9	20 e5 83	jsr $83e5			jsr 	GXAdjustX
.83dc	ad 55 06	lda $0655			lda 	GXAddSelect
.83df	f0 03		beq $83e4			beq 	_GXLAExit
.83e1	20 2b 84	jsr $842b			jsr 	GXIncrementY
.83e4					_GXLAExit:
.83e4	60		rts				rts
.83e5					GXAdjustX:
.83e5	ad 51 06	lda $0651			lda 	GXDXNegative
.83e8	10 25		bpl $840f			bpl 	_GXAXRight
.83ea	ad 31 06	lda $0631			lda 	GXX0
.83ed	d0 03		bne $83f2			bne 	_GXAXNoBorrow
.83ef	ce 32 06	dec $0632			dec 	GXX0+1
.83f2					_GXAXNoBorrow:
.83f2	ce 31 06	dec $0631			dec 	GXX0
.83f5	ce 44 06	dec $0644			dec 	gsOffset 					; pixel left
.83f8	ad 44 06	lda $0644			lda 	gsOffset
.83fb	c9 ff		cmp #$ff			cmp 	#$FF
.83fd	d0 0f		bne $840e			bne 	_GXAYExit 					; underflow
.83ff	c6 3d		dec $3d				dec 	gxzScreen+1 					; borrow
.8401	a5 3d		lda $3d				lda 	gxzScreen+1 					; gone off page
.8403	c9 60		cmp #$60			cmp 	#GXMappingAddress >> 8
.8405	b0 07		bcs $840e			bcs 	_GXAYExit
.8407	18		clc				clc
.8408	69 20		adc #$20			adc 	#$20 						; fix up
.840a	85 3d		sta $3d				sta 	gxzScreen+1
.840c	c6 0b		dec $0b				dec 	GXEditSlot 				; back one page
.840e					_GXAYExit:
.840e	60		rts				rts
.840f					_GXAXRight:
.840f	ee 31 06	inc $0631			inc 	GXX0
.8412	d0 03		bne $8417			bne 	_GXAXNoCarry
.8414	ee 32 06	inc $0632			inc 	GXX0+1
.8417					_GXAXNoCarry:
.8417	ee 44 06	inc $0644			inc 	gsOffset 					; pixel right
.841a	d0 0e		bne $842a			bne 	_GXAXExit 					; if not overflowed, exit.
.841c	e6 3d		inc $3d				inc 	gxzScreen+1 					; next line
.841e	a5 3d		lda $3d				lda 	gxzScreen+1
.8420	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page ?
.8422	90 06		bcc $842a			bcc 	_GXAXExit
.8424	e9 20		sbc #$20			sbc 	#$20 						; fix up
.8426	85 3d		sta $3d				sta 	gxzScreen+1
.8428	e6 0b		inc $0b				inc 	GXEditSlot 				; next page
.842a					_GXAXExit:
.842a	60		rts				rts
.842b					GXIncrementY:
.842b	ee 33 06	inc $0633			inc 	GXY0
.842e	20 47 88	jsr $8847			jsr 	GXMovePositionDown
.8431	60		rts				rts
.8432					GXLineSetup:
.8432	ad 37 06	lda $0637			lda 	GXY1
.8435	38		sec				sec
.8436	ed 33 06	sbc $0633			sbc 	GXY0
.8439	4a		lsr a				lsr 	a
.843a	8d 4f 06	sta $064f			sta 	GXDiffY
.843d	9c 51 06	stz $0651			stz 	GXDXNegative 				; clear -ve flag
.8440	38		sec				sec
.8441	ad 35 06	lda $0635			lda 	GXX1
.8444	ed 31 06	sbc $0631			sbc 	GXX0
.8447	8d 4e 06	sta $064e			sta 	GXDiffX
.844a	ad 36 06	lda $0636			lda 	GXX1+1 						; calculate MSB
.844d	ed 32 06	sbc $0632			sbc 	GXX0+1
.8450	6a		ror a				ror 	a 							; rotate bit into DiffX halving it
.8451	6e 4e 06	ror $064e			ror 	GXDiffX
.8454	0a		asl a				asl 	a
.8455	10 0c		bpl $8463			bpl 	_GDXNotNegative
.8457	a9 00		lda #$00			lda 	#0 							; make absolute value of |dx|
.8459	38		sec				sec
.845a	ed 4e 06	sbc $064e			sbc 	GXDiffX
.845d	8d 4e 06	sta $064e			sta 	GXDiffX
.8460	ce 51 06	dec $0651			dec 	GXDXNegative 				; -ve flag = $FF.
.8463					_GDXNotNegative:
.8463	9c 50 06	stz $0650			stz 	GXIsDiffYLarger 			; clear larger flag
.8466	ad 4f 06	lda $064f			lda 	GXDiffY 					; set adjust and total.
.8469	8d 53 06	sta $0653			sta 	GXAdjust
.846c	ad 4e 06	lda $064e			lda 	GXDiffX
.846f	8d 54 06	sta $0654			sta 	GXTotal
.8472	ad 4f 06	lda $064f			lda 	GXDiffY 					; if dy > dx
.8475	cd 4e 06	cmp $064e			cmp 	GXDiffX
.8478	90 0f		bcc $8489			bcc 	_GDXNotLarger
.847a	ce 50 06	dec $0650			dec 	GXIsDiffYLarger 			; set the dy larger flag
.847d	ad 4e 06	lda $064e			lda 	GXDiffX 					; set adjust and total other way round
.8480	8d 53 06	sta $0653			sta 	GXAdjust
.8483	ad 4f 06	lda $064f			lda 	GXDiffY
.8486	8d 54 06	sta $0654			sta 	GXTotal
.8489					_GDXNotLarger:
.8489	ad 54 06	lda $0654			lda 	GXTotal
.848c	4a		lsr a				lsr 	a
.848d	8d 52 06	sta $0652			sta 	GXPosition
.8490	60		rts				rts
.064e					GXDiffX:
>064e							.fill 	1
.064f					GXDiffY:
>064f							.fill 	1
.0650					GXIsDiffYLarger:
>0650							.fill 	1
.0651					GXDXNegative:
>0651							.fill 	1
.0652					GXPosition:
>0652							.fill 	1
.0653					GXAdjust:
>0653							.fill 	1
.0654					GXTotal:
>0654							.fill 	1
.0655					GXAddSelect:
>0655							.fill 	1

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/mode.asm

.8491					GXSetColourMode:
.8491	a6 36		ldx $36				ldx 	gxzTemp0
.8493	8e 3f 06	stx $063f			stx 	gxColour 								; set colour
.8496	a5 37		lda $37				lda 	gxzTemp0+1 								;
.8498	8d 3e 06	sta $063e			sta 	gxMode 									; set mode
.849b	29 03		and #$03			and 	#3 										; only interested in bits 0-3
.849d	9c 41 06	stz $0641			stz 	gxANDValue 								; initially AND with 0, and EOR with Colour
.84a0	ae 3f 06	ldx $063f			ldx 	gxColour
.84a3	8e 40 06	stx $0640			stx 	gxEORValue
.84a6	c9 02		cmp #$02			cmp 	#2 										; if mode 2/3 And with colour
.84a8	90 03		bcc $84ad			bcc 	_GXSDCNotAndColour
.84aa	8e 41 06	stx $0641			stx 	gxANDValue
.84ad					_GXSDCNotAndColour:
.84ad	d0 03		bne $84b2			bne 	_GXSDCNotAnd 							; mode 2, Don't EOR with colour
.84af	9c 40 06	stz $0640			stz 	gxEORValue
.84b2					_GXSDCNotAnd:
.84b2	4a		lsr a				lsr 	a 										; if bit 0 set, 1's complement AND value
.84b3	90 08		bcc $84bd			bcc 	_GXSDCNoFlip
.84b5	ad 41 06	lda $0641			lda	 	gxANDValue
.84b8	49 ff		eor #$ff			eor 	#$FF
.84ba	8d 41 06	sta $0641			sta 	gxANDValue
.84bd					_GXSDCNoFlip:
.84bd	18		clc				clc
.84be	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/plot.asm

.84bf					GXPlotPoint:
.84bf	20 d3 87	jsr $87d3			jsr 	GXOpenBitmap 				; start drawing
.84c2	20 f1 87	jsr $87f1			jsr 	GXPositionCalc 				; setup gxzScreen, gsOffset and the position.
.84c5	ac 44 06	ldy $0644			ldy 	gsOffset
.84c8	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel on the right
.84ca	2d 41 06	and $0641			and 	gxANDValue
.84cd	4d 40 06	eor $0640			eor 	gxEORValue
.84d0	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.84d2	20 e4 87	jsr $87e4			jsr 	GXCloseBitmap 				; stop drawing and exit
.84d5	18		clc				clc
.84d6	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/rect.asm

.84d7					GXFillRectangle:
.84d7	38		sec				sec
.84d8	80 01		bra $84db			bra 	GXRectangle
.84da					GXFrameRectangle:
.84da	18		clc				clc
.84db					GXRectangle:
.84db	ad 3a 06	lda $063a			lda 	gxBitmapsOn
.84de	f0 35		beq $8515			beq 	_GXRFail
.84e0	08		php				php 								; save Fill flag (CS)
.84e1	20 d3 87	jsr $87d3			jsr 	GXOpenBitmap 				; start drawing
.84e4	20 9e 88	jsr $889e			jsr 	GXSortXY 					; sort both X and Y so top left/bottom right
.84e7	20 f1 87	jsr $87f1			jsr 	GXPositionCalc 				; setup gxzScreen, gsOffset and the position.
.84ea	38		sec				sec 								; sec = Draw line
.84eb	20 17 85	jsr $8517			jsr 	GXDrawLineX1X0 				; draw a line length X1-X0
.84ee	ad 33 06	lda $0633			lda 	gxY0 						; reached end of rectangle ?
.84f1	cd 37 06	cmp $0637			cmp 	gxY1
.84f4	f0 19		beq $850f			beq 	_GXRectangleExit
.84f6					_GXRectLoop:
.84f6	20 47 88	jsr $8847			jsr 	GXMovePositionDown 			; down one.
.84f9	ee 33 06	inc $0633			inc 	gxY0 						; change Y pos
.84fc	ad 33 06	lda $0633			lda 	gxY0 						; reached last line
.84ff	cd 37 06	cmp $0637			cmp 	gXY1
.8502	f0 07		beq $850b			beq 	_GXLastLine
.8504	28		plp				plp 								; get flag back
.8505	08		php				php
.8506	20 17 85	jsr $8517			jsr 	GXDrawLineX1X0 				; draw horizontal line
.8509	80 eb		bra $84f6			bra 	_GXRectLoop
.850b					_GXLastLine:
.850b	38		sec				sec
.850c	20 17 85	jsr $8517			jsr 	GXDrawLineX1X0
.850f					_GXRectangleExit:
.850f	68		pla				pla 								; throw fill flag.
.8510	20 e4 87	jsr $87e4			jsr 	GXCloseBitmap 				; stop drawing and exit
.8513	18		clc				clc
.8514	60		rts				rts
.8515					_GXRFail:
.8515	38		sec				sec
.8516	60		rts				rts
.8517					GXDrawLineX1X0:
.8517	08		php				php 								; save solid/either-end
.8518	38		sec				sec
.8519	ad 35 06	lda $0635			lda		gXX1
.851c	ed 31 06	sbc $0631			sbc 	gXX0
.851f	85 36		sta $36				sta 	gxzTemp0
.8521	ad 36 06	lda $0636			lda 	gXX1+1
.8524	ed 32 06	sbc $0632			sbc 	gXX0+1
.8527	85 37		sta $37				sta 	gxzTemp0+1
.8529	28		plp				plp
.852a					GXDrawLineTemp0:
.852a	a5 3c		lda $3c				lda 	gxzScreen 						; push gxzScreen, gsOffset and GXEditSlot on stack
.852c	48		pha				pha
.852d	a5 3d		lda $3d				lda 	gxzScreen+1
.852f	48		pha				pha
.8530	ad 44 06	lda $0644			lda 	gsOffset
.8533	48		pha				pha
.8534	a5 0b		lda $0b				lda 	GXEditSlot
.8536	48		pha				pha
.8537	ac 44 06	ldy $0644			ldy 	gsOffset 					; Y offset
.853a	90 1e		bcc $855a			bcc 	_GXDLTEndPoints 			; if CC draw end points only.
.853c					_GXDLTLine:
.853c	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel
.853e	2d 41 06	and $0641			and 	gxANDValue
.8541	4d 40 06	eor $0640			eor 	gxEORValue
.8544	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.8546	a5 36		lda $36				lda 	gxzTemp0 					; decrement counter
.8548	d0 04		bne $854e			bne 	_GXDLTNoBorrow
.854a	c6 37		dec $37				dec 	gxzTemp0+1 					; borrow, if goes -ve then exit
.854c	30 2e		bmi $857c			bmi 	_GXDLTExit
.854e					_GXDLTNoBorrow:
.854e	c6 36		dec $36				dec 	gxzTemp0
.8550	c8		iny				iny 								; next slot.
.8551	d0 e9		bne $853c			bne 	_GXDLTLine
.8553	e6 3d		inc $3d				inc 	gxzScreen+1 					; carry to next
.8555	20 8a 85	jsr $858a			jsr 	GXDLTCheckWrap				; check for new page.
.8558	80 e2		bra $853c			bra 	_GXDLTLine
.855a					_GXDLTEndPoints:
.855a	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel
.855c	2d 41 06	and $0641			and 	gxANDValue
.855f	4d 40 06	eor $0640			eor 	gxEORValue
.8562	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.8564	98		tya				tya 								; advance to right side
.8565	18		clc				clc
.8566	65 36		adc $36				adc 	gxzTemp0
.8568	a8		tay				tay
.8569	a5 3d		lda $3d				lda 	gxzScreen+1
.856b	65 37		adc $37				adc 	gxzTemp0+1
.856d	85 3d		sta $3d				sta 	gxzScreen+1
.856f	20 8a 85	jsr $858a			jsr 	GXDLTCheckWrap 			; fix up.
.8572	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel on the right
.8574	2d 41 06	and $0641			and 	gxANDValue
.8577	4d 40 06	eor $0640			eor 	gxEORValue
.857a	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.857c					_GXDLTExit:
.857c	68		pla				pla
.857d	85 0b		sta $0b				sta 	GXEditSlot
.857f	68		pla				pla
.8580	8d 44 06	sta $0644			sta 	gsOffset
.8583	68		pla				pla
.8584	85 3d		sta $3d				sta 	gxzScreen+1
.8586	68		pla				pla
.8587	85 3c		sta $3c				sta 	gxzScreen
.8589	60		rts				rts
.858a					GXDLTCheckWrap:
.858a	a5 3d		lda $3d				lda 	gxzScreen+1 					; check end of page
.858c	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8)
.858e	90 06		bcc $8596			bcc 	_GXDLTCWExit
.8590	e9 20		sbc #$20			sbc 	#$20 						; fix up
.8592	85 3d		sta $3d				sta 	gxzScreen+1
.8594	e6 0b		inc $0b				inc 	GXEditSlot
.8596					_GXDLTCWExit:
.8596	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/render.asm

.8597					GXDrawGraphicElement:
.8597	8d 56 06	sta $0656			sta 	gxSize 						; save size
.859a	3a		dec a				dec 	a
.859b	8d 57 06	sta $0657			sta 	gxMask 						; and mask
.859e	9c 5b 06	stz $065b			stz 	gxVFlip 					; set the flip bytes
.85a1	9c 5c 06	stz $065c			stz 	gxHFlip
.85a4	2c 5d 06	bit $065d			bit 	gxUseMode
.85a7	10 03		bpl $85ac			bpl 	_GXNotVertical
.85a9	8d 5b 06	sta $065b			sta 	gxVFlip
.85ac					_GXNotVertical:
.85ac	50 03		bvc $85b1			bvc 	_GXNotHorizontal
.85ae	8d 5c 06	sta $065c			sta 	gxHFlip
.85b1					_GXNotHorizontal:
.85b1	ad 3a 06	lda $063a			lda 	gxBitmapsOn 				; check BMP on
.85b4	f0 5f		beq $8615			beq 	_GXSLFail
.85b6	ad 33 06	lda $0633			lda 	gxY0 						; push Y on stack
.85b9	48		pha				pha
.85ba	8c 59 06	sty $0659			sty 	gxAcquireVector+1 			; and acquisition vector
.85bd	8e 58 06	stx $0658			stx 	gxAcquireVector
.85c0	20 d3 87	jsr $87d3			jsr 	gxOpenBitmap 				; open the bitmap.
.85c3	ad 5d 06	lda $065d			lda 	gxUseMode 					; scale bits
.85c6	4a		lsr a				lsr 	a
.85c7	4a		lsr a				lsr 	a
.85c8	4a		lsr a				lsr 	a
.85c9	29 07		and #$07			and		#7
.85cb	1a		inc a				inc 	a
.85cc	8d 5a 06	sta $065a			sta 	gxScale
.85cf	64 38		stz $38				stz 	gxzTemp1					; start first line
.85d1					_GXGELoop:
.85d1	a5 38		lda $38				lda 	gxzTemp1 					; current line number to read.
.85d3	4d 5b 06	eor $065b			eor 	gxVFlip
.85d6	aa		tax				tax 								; get the Xth line.
.85d7	20 17 86	jsr $8617			jsr 	_GXCallAcquire 				; get that data.
.85da	ad 5a 06	lda $065a			lda 	gxScale 					; do scale identical copies of that line.
.85dd	85 39		sta $39				sta 	gxzTemp1+1
.85df					_GXGELoop2:
.85df	ad 33 06	lda $0633			lda 	gxY0 						; off screen
.85e2	cd 3d 06	cmp $063d			cmp 	gxHeight
.85e5	b0 10		bcs $85f7			bcs 	_GXDGEExit
.85e7	20 1a 86	jsr $861a			jsr 	GXRenderOneLine 			; render line
.85ea	c6 39		dec $39				dec 	gxzTemp1+1 					; scale times.
.85ec	d0 f1		bne $85df			bne 	_GXGELoop2
.85ee	e6 38		inc $38				inc 	gxzTemp1 					; done all lines.
.85f0	a5 38		lda $38				lda 	gxzTemp1
.85f2	cd 56 06	cmp $0656			cmp 	gxSize
.85f5	d0 da		bne $85d1			bne 	_GXGELoop
.85f7					_GXDGEExit:
.85f7	68		pla				pla 								; restore Y for next time
.85f8	8d 33 06	sta $0633			sta 	gxY0
.85fb	ae 5a 06	ldx $065a			ldx 	gxScale 					; get scale (1-8)
.85fe					_GXShiftLeft:
.85fe	18		clc				clc
.85ff	ad 56 06	lda $0656			lda 	gxSize
.8602	6d 31 06	adc $0631			adc 	gxX0
.8605	8d 31 06	sta $0631			sta 	gxX0
.8608	90 03		bcc $860d			bcc 	_GXSLNoCarry
.860a	ee 32 06	inc $0632			inc 	gxX0+1
.860d					_GXSLNoCarry:
.860d	ca		dex				dex
.860e	d0 ee		bne $85fe			bne 	_GXShiftLeft
.8610	20 e4 87	jsr $87e4			jsr 	GXCloseBitmap
.8613	18		clc				clc
.8614	60		rts				rts
.8615					_GXSLFail:
.8615	38		sec				sec
.8616	60		rts				rts
.8617					_GXCallAcquire:
.8617	6c 58 06	jmp ($0658)			jmp 	(gxAcquireVector)
.861a					GXRenderOneLine:
.861a	20 f1 87	jsr $87f1			jsr 	GXPositionCalc 				; calculate position/offset.
.861d	ac 44 06	ldy $0644			ldy 	gsOffset 					; Y contains position.
.8620	64 3a		stz $3a				stz 	gxzTemp2 					; do size pixels
.8622					_GXROLLoop1:
.8622	ad 5a 06	lda $065a			lda 	gxScale 					; set to do 'scale' times
.8625	85 3b		sta $3b				sta 	gxzTemp2+1
.8627					_GXROLLoop2:
.8627	a5 3a		lda $3a				lda 	gxzTemp2 					; get current pixel
.8629	4d 5c 06	eor $065c			eor 	gxHFlip
.862c	aa		tax				tax 								; read from the pixel buffer
.862d	bd f7 05	lda $05f7,x			lda 	gxPixelBuffer,x
.8630	d0 07		bne $8639			bne 	_GXDraw 					; draw if non zero
.8632	ad 5d 06	lda $065d			lda 	gxUseMode 					; check to see if solid background
.8635	29 04		and #$04			and 	#4
.8637	f0 0a		beq $8643			beq 	_GXZeroPixel
.8639					_GXDraw:
.8639	b1 3c		lda ($3c),y			lda 	(gxzScreen),y
.863b	2d 41 06	and $0641			and 	gxANDValue
.863e	5d f7 05	eor $05f7,x			eor 	gxPixelBuffer,x
.8641	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.8643					_GXZeroPixel:
.8643	c8		iny				iny 								; advance pointer
.8644	d0 05		bne $864b			bne 	_GXNoShift
.8646	e6 3d		inc $3d				inc 	gxzScreen+1 				; carry to next
.8648	20 8a 85	jsr $858a			jsr 	GXDLTCheckWrap				; check for new page.
.864b					_GXNoShift:
.864b	c6 3b		dec $3b				dec 	gxzTemp2+1 					; do the inner loop gxScale times.
.864d	d0 d8		bne $8627			bne 	_GXROLLoop2
.864f	e6 3a		inc $3a				inc 	gxzTemp2 					; next pixel.
.8651	a5 3a		lda $3a				lda 	gxzTemp2
.8653	cd 56 06	cmp $0656			cmp 	gxSize
.8656	d0 ca		bne $8622			bne 	_GXROLLoop1
.8658	ee 33 06	inc $0633			inc 	gxY0
.865b	60		rts				rts
.0656					gxSize:
>0656							.fill 	1
.0657					gxMask:
>0657							.fill 	1
.0658					gxAcquireVector:
>0658							.fill 	2
.065a					gxScale:
>065a							.fill 	1
.065b					gxVFlip:
>065b							.fill 	1
.065c					gxHFlip:
>065c							.fill 	1
.065d					gxUseMode:
>065d							.fill 	1

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/sources/font.asm

.865c					GXFontHandler:
.865c	a5 37		lda $37				lda 	gxzTemp0+1 					; eor with mode
.865e	4d 3e 06	eor $063e			eor 	gxMode
.8661	8d 5d 06	sta $065d			sta 	gxUseMode
.8664	64 37		stz $37				stz 	gxzTemp0+1 					; gxzTemp0 is font #
.8666	06 36		asl $36				asl	 	gxzTemp0 					; x 2
.8668	26 37		rol $37				rol	 	gxzTemp0+1
.866a	06 36		asl $36				asl	 	gxzTemp0 					; x 4
.866c	26 37		rol $37				rol	 	gxzTemp0+1
.866e	06 36		asl $36				asl	 	gxzTemp0 					; x 8
.8670	26 37		rol $37				rol	 	gxzTemp0+1
.8672	a5 37		lda $37				lda 	gxzTemp0+1 					; put in page C0
.8674	09 c0		ora #$c0			ora 	#$C0
.8676	85 37		sta $37				sta 	gxzTemp0+1
.8678	a9 08		lda #$08			lda 	#8 							; size 8x8
.867a	a2 82		ldx #$82			ldx 	#GXGetGraphicDataFont & $FF ; XY = Graphic Data retrieval routine
.867c	a0 86		ldy #$86			ldy 	#GXGetGraphicDataFont >> 8
.867e	20 97 85	jsr $8597			jsr 	GXDrawGraphicElement
.8681	60		rts				rts
.8682					GXGetGraphicDataFont:
.8682	8a		txa				txa 								; X->Y
.8683	a8		tay				tay
.8684	a6 01		ldx $01				ldx 	1 							; preserve old value
.8686	a9 01		lda #$01			lda 	#1 							; access page 1 (font memory)
.8688	85 01		sta $01				sta 	1
.868a	b1 36		lda ($36),y			lda 	(gxzTemp0),y 				; read the font element.
.868c	86 01		stx $01				stx 	1 							; put old value back.
.868e	a2 00		ldx #$00			ldx 	#0 							; do 8 times
.8690					_GXExpand:
.8690	9e f7 05	stz $05f7,x			stz 	gxPixelBuffer,x 			; zero in pixel buffer
.8693	0a		asl a				asl 	a 							; shift bit 7 into C
.8694	90 08		bcc $869e			bcc 	_GXNoPixel
.8696	48		pha				pha 								; if set, set pixel buffer to current colour.
.8697	ad 3f 06	lda $063f			lda 	gxColour
.869a	9d f7 05	sta $05f7,x			sta 	gxPixelBuffer,x
.869d	68		pla				pla
.869e					_GXNoPixel:
.869e	e8		inx				inx 								; do the whole byte.
.869f	e0 08		cpx #$08			cpx 	#8
.86a1	d0 ed		bne $8690			bne 	_GXExpand
.86a3	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/sources/sprite.asm

.86a4					GXSpriteHandler:
.86a4	a5 37		lda $37				lda 	gxzTemp0+1 					; eor with mode
.86a6	4d 3e 06	eor $063e			eor 	gxMode
.86a9	8d 5d 06	sta $065d			sta 	gxUseMode
.86ac	a6 36		ldx $36				ldx 	gxzTemp0 					; sprite #
.86ae	da		phx				phx
.86af	20 d3 87	jsr $87d3			jsr 	GXOpenBitmap 				; can access sprite information
.86b2	68		pla				pla
.86b3	20 62 88	jsr $8862			jsr 	GXFindSprite 				; get the sprite address
.86b6	20 e4 87	jsr $87e4			jsr 	GXCloseBitmap
.86b9	ad 5e 06	lda $065e			lda 	GXSizePixels 					; return size
.86bc	a2 c4		ldx #$c4			ldx 	#GXSpriteAcquire & $FF
.86be	a0 86		ldy #$86			ldy 	#GXSpriteAcquire >> 8
.86c0	20 97 85	jsr $8597			jsr 	GXDrawGraphicElement
.86c3	60		rts				rts
.86c4					GXSpriteAcquire:
.86c4	ad 3c 06	lda $063c			lda 	GXSpritePage				; point to base page
.86c7	85 0b		sta $0b				sta 	GXEditSlot
.86c9	86 36		stx $36				stx 	zTemp0 						; row number x 1,2,3,4
.86cb	a9 00		lda #$00			lda 	#0
.86cd	ae 5f 06	ldx $065f			ldx 	GXSizeBits
.86d0					_GXTimesRowNumber:
.86d0	18		clc				clc
.86d1	65 36		adc $36				adc 	zTemp0
.86d3	ca		dex				dex
.86d4	10 fa		bpl $86d0			bpl 	_GXTimesRowNumber
.86d6	64 37		stz $37				stz 	gxzTemp0+1
.86d8	0a		asl a				asl 	a 							; row x 2,4,6,8
.86d9	26 37		rol $37				rol 	gxzTemp0+1
.86db	0a		asl a				asl 	a 							; row x 4,8,12,16
.86dc	26 37		rol $37				rol 	gxzTemp0+1
.86de	0a		asl a				asl 	a 							; row x 8,16,24,32
.86df	26 37		rol $37				rol 	gxzTemp0+1
.86e1	85 36		sta $36				sta 	gxzTemp0
.86e3	18		clc				clc 								; add base address.
.86e4	a5 36		lda $36				lda 	gxzTemp0
.86e6	6d 61 06	adc $0661			adc 	GXSpriteOffset
.86e9	85 36		sta $36				sta 	gxzTemp0
.86eb	a5 37		lda $37				lda 	gxzTemp0+1
.86ed	6d 62 06	adc $0662			adc 	GXSpriteOffset+1
.86f0					_GXSAFindPage:
.86f0	c9 20		cmp #$20			cmp 	#$20 						; on this page
.86f2	90 06		bcc $86fa			bcc 	_GXSAFoundPage
.86f4	e9 20		sbc #$20			sbc 	#$20 						; forward one page
.86f6	e6 0b		inc $0b				inc 	GXEditSlot
.86f8	80 f6		bra $86f0			bra 	_GXSAFindPage
.86fa					_GXSAFoundPage:
.86fa	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; physical address of page.
.86fc	85 37		sta $37				sta 	gxzTemp0+1 					; gxzTemp0 now points to the page
.86fe	a0 00		ldy #$00			ldy 	#0
.8700					_GXSACopyLoop:
.8700	b1 36		lda ($36),y			lda 	(gxzTemp0),y
.8702	99 f7 05	sta $05f7,y			sta 	gxPixelBuffer,y
.8705	c8		iny				iny
.8706	cc 5e 06	cpy $065e			cpy 	GXSizePixels
.8709	d0 f5		bne $8700			bne 	_GXSACopyLoop
.870b	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/sprite.asm

.870c					GXSelect:
.870c	ad 39 06	lda $0639			lda 	gxSpritesOn
.870f	f0 1f		beq $8730			beq 	_GXSFail
.8711	a5 36		lda $36				lda 	gxzTemp0 					; illegal sprite #
.8713	c9 40		cmp #$40			cmp 	#64
.8715	b0 19		bcs $8730			bcs 	_GXSFail
.8717	a4 37		ldy $37				ldy 	gxzTemp0+1 					; control value.
.8719	a9 00		lda #$00			lda  	#0 							; multiply sprite # x 8 => A
.871b	06 36		asl $36				asl 	gxzTemp0
.871d	06 36		asl $36				asl 	gxzTemp0
.871f	06 36		asl $36				asl 	gxzTemp0
.8721	2a		rol a				rol 	a
.8722	69 d9		adc #$d9			adc 	#$D9 						; sprite area
.8724	8d 46 06	sta $0646			sta 	GSCurrentSprite+1 			; address to GSCurrentSprite and gxzTemp
.8727	85 37		sta $37				sta 	gxzTemp0+1
.8729	a5 36		lda $36				lda 	gxzTemp0
.872b	8d 45 06	sta $0645			sta 	GSCurrentSprite
.872e	18		clc				clc
.872f	60		rts				rts
.8730					_GXSFail:
.8730	38		sec				sec
.8731	60		rts				rts
.8732					GXSelectImage:
.8732	ad 39 06	lda $0639			lda 	gxSpritesOn
.8735	f0 5e		beq $8795			beq 	_GXSIFail
.8737	ad 46 06	lda $0646			lda 	GSCurrentSprite+1 			; check sprite selected
.873a	f0 59		beq $8795			beq 	_GXSIFail
.873c	64 01		stz $01				stz 	1
.873e	a5 37		lda $37				lda 	gxzTemp0+1 					; push show/hide on the stack.
.8740	d0 43		bne $8785			bne 	_GXSIHide
.8742	a5 36		lda $36				lda 	gxzTemp0 					; sprite image
.8744	48		pha				pha
.8745	20 d3 87	jsr $87d3			jsr 	GXOpenBitmap
.8748	68		pla				pla
.8749	20 62 88	jsr $8862			jsr 	GXFindSprite
.874c	a0 01		ldy #$01			ldy 	#1
.874e	ad 45 06	lda $0645			lda 	GSCurrentSprite
.8751	85 36		sta $36				sta 	gxzTemp0
.8753	ad 46 06	lda $0646			lda 	GSCurrentSprite+1
.8756	85 37		sta $37				sta 	gxzTemp0+1
.8758	ad 61 06	lda $0661			lda 	GXSpriteOffset
.875b	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.875d	18		clc				clc
.875e	ad 62 06	lda $0662			lda 	GXSpriteOffset+1
.8761	6d 47 06	adc $0647			adc 	GXSpriteOffsetBase
.8764	c8		iny				iny
.8765	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.8767	ad 48 06	lda $0648			lda 	GXSpriteOffsetBase+1
.876a	69 00		adc #$00			adc 	#0
.876c	c8		iny				iny
.876d	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.876f	ad 5f 06	lda $065f			lda 	GXSizeBits 					; get raw size
.8772	49 03		eor #$03			eor 	#3 							; make it right (00=32 etc.)
.8774	2a		rol a				rol 	a 							; x 2
.8775	0a		asl a				asl 	a 							; x 4
.8776	0a		asl a				asl 	a 							; x 8
.8777	0a		asl a				asl 	a 							; x 16
.8778	0d 60 06	ora $0660			ora 	GXSpriteLUT 						; Or with LUT
.877b	0a		asl a				asl 	a 							; 1 shift
.877c	09 01		ora #$01			ora 	#1 							; enable sprite.
.877e	92 36		sta ($36)			sta 	(gxzTemp0) 					; and write back
.8780	20 e4 87	jsr $87e4			jsr 	GXCloseBitmap
.8783	18		clc				clc
.8784	60		rts				rts
.8785					_GXSIHide:
.8785	ad 45 06	lda $0645			lda 	GSCurrentSprite
.8788	85 36		sta $36				sta 	gxzTemp0
.878a	ad 46 06	lda $0646			lda 	GSCurrentSprite+1
.878d	85 37		sta $37				sta 	gxzTemp0+1
.878f	a9 00		lda #$00			lda 	#0
.8791	92 36		sta ($36)			sta 	(gxzTemp0)
.8793	18		clc				clc
.8794	60		rts				rts
.8795					_GXSIFail:
.8795	38		sec				sec
.8796	60		rts				rts
.8797					GXMoveSprite:
.8797	ad 39 06	lda $0639			lda 	gxSpritesOn
.879a	f0 35		beq $87d1			beq 	_GXSIFail
.879c	ad 46 06	lda $0646			lda 	GSCurrentSprite+1 			; check sprite selected
.879f	f0 30		beq $87d1			beq 	_GXSIFail
.87a1	85 37		sta $37				sta 	gxzTemp0+1
.87a3	a0 04		ldy #$04			ldy 	#4
.87a5	ad 45 06	lda $0645			lda 	GSCurrentSprite
.87a8	85 36		sta $36				sta 	gxzTemp0
.87aa	a9 40		lda #$40			lda 	#64 						; calculate 32-SpriteSize/2 (actually (64-SpriteSize)/2)
.87ac	38		sec				sec
.87ad	ed 5e 06	sbc $065e			sbc 	GXSizePixels
.87b0	4a		lsr a				lsr 	a
.87b1	48		pha				pha
.87b2	18		clc				clc
.87b3	6d 31 06	adc $0631			adc 	gxX0						; copy position.
.87b6	91 36		sta ($36),y			sta 	(gxzTemp0),y
.87b8	c8		iny				iny
.87b9	ad 32 06	lda $0632			lda 	gxX0+1
.87bc	69 00		adc #$00			adc 	#0
.87be	91 36		sta ($36),y			sta 	(gxzTemp0),y
.87c0	c8		iny				iny
.87c1	68		pla				pla
.87c2	18		clc				clc
.87c3	6d 33 06	adc $0633			adc 	gxY0
.87c6	91 36		sta ($36),y			sta 	(gxzTemp0),y
.87c8	a9 00		lda #$00			lda 	#0
.87ca	69 00		adc #$00			adc 	#0
.87cc	c8		iny				iny
.87cd	91 36		sta ($36),y			sta 	(gxzTemp0),y
.87cf	18		clc				clc
.87d0	60		rts				rts
.87d1					_GXSIFail:
.87d1	38		sec				sec
.87d2	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./utility/access.asm

.87d3					GXOpenBitmap:
.87d3	78		sei				sei 								; no interrupts here
.87d4	a5 00		lda $00				lda 	0 							; save original MMU Control register
.87d6	8d 43 06	sta $0643			sta 	gxOriginalMMUSetting
.87d9	a9 80		lda #$80			lda 	#GXMappingLUT*16+$80+GXMappingLUT
.87db	85 00		sta $00				sta 	0
.87dd	a5 0b		lda $0b				lda 	GXEditSlot 				; Save the original LUT slot value
.87df	8d 42 06	sta $0642			sta 	gxOriginalLUTValue
.87e2	58		cli				cli
.87e3	60		rts				rts
.87e4					GXCloseBitmap:
.87e4	78		sei				sei
.87e5	ad 42 06	lda $0642			lda 	gxOriginalLUTValue 			; restore LUT slot value
.87e8	85 0b		sta $0b				sta 	GXEditSlot
.87ea	ad 43 06	lda $0643			lda 	gxOriginalMMUSetting 		; restore MMU Control register
.87ed	85 00		sta $00				sta 	0
.87ef	58		cli				cli
.87f0	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./utility/calculate.asm

.87f1					GXPositionCalc:
.87f1	a5 36		lda $36				lda 	gxzTemp0 					; save temp memory slot
.87f3	48		pha				pha
.87f4	ad 33 06	lda $0633			lda 	GXY0 						; gxzScreen = Y0
.87f7	85 3c		sta $3c				sta 	gxzScreen
.87f9	64 3d		stz $3d				stz 	gxzScreen+1
.87fb	06 3c		asl $3c				asl 	gxzScreen 						; gxzScreen = Y0 * 4
.87fd	26 3d		rol $3d				rol 	gxzScreen+1
.87ff	06 3c		asl $3c				asl 	gxzScreen
.8801	26 3d		rol $3d				rol 	gxzScreen+1
.8803	18		clc				clc 								; gxzScreen = Y0 * 5, as it's still in A
.8804	65 3c		adc $3c				adc 	gxzScreen
.8806	85 3c		sta $3c				sta 	gxzScreen
.8808	90 02		bcc $880c			bcc 	_GXPCNoCarry
.880a	e6 3d		inc $3d				inc 	gxzScreen+1
.880c					_GXPCNoCarry:
.880c	06 3c		asl $3c				asl 	gxzScreen 						; now Y0 * 10. Needs to be multiplied by another
.880e	26 3d		rol $3d				rol 	gxzScreen+1 					; 32. At this point the MSB contains the offset
.8810	a5 3d		lda $3d				lda	 	gxzScreen+1 					; so save this in zTemp0 and zero it.
.8812	85 36		sta $36				sta 	gxzTemp0
.8814	64 3d		stz $3d				stz 	gxzScreen+1
.8816	a9 05		lda #$05			lda 	#5 							; now multiply by 32, this puts this in the range 0..8191
.8818					_GXPCMultiply32:
.8818	06 3c		asl $3c				asl 	gxzScreen
.881a	26 3d		rol $3d				rol 	gxzScreen+1
.881c	3a		dec a				dec 	a
.881d	d0 f9		bne $8818			bne 	_GXPCMultiply32
.881f	18		clc				clc
.8820	ad 31 06	lda $0631			lda 	GXX0 						; add X to this value, put the result in gsOffset, gxzScreen has to be on a page boundary
.8823	65 3c		adc $3c				adc 	gxzScreen
.8825	8d 44 06	sta $0644			sta 	gsOffset
.8828	ad 32 06	lda $0632			lda 	GXX0+1
.882b	65 3d		adc $3d				adc 	gxzScreen+1
.882d	c9 20		cmp #$20			cmp 	#$20 						; has it overflowed into the next one ?
.882f	90 04		bcc $8835			bcc 	_GXPCNoOverflow
.8831	29 1f		and #$1f			and 	#$1F 						; fix it up
.8833	e6 36		inc $36				inc 	gxzTemp0 					; add 1 to the page number
.8835					_GXPCNoOverflow:
.8835	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; make it the address mapped in.
.8837	85 3d		sta $3d				sta 	gxzScreen+1
.8839	64 3c		stz $3c				stz 	gxzScreen
.883b	18		clc				clc
.883c	a5 36		lda $36				lda 	gxzTemp0 					; get the page number
.883e	6d 3b 06	adc $063b			adc 	gxBasePage 					; by adding the base page
.8841	85 0b		sta $0b				sta 	GXEditSlot 				; and map it into memory.
.8843	68		pla				pla
.8844	85 36		sta $36				sta 	gxzTemp0
.8846	60		rts				rts
.8847					GXMovePositionDown:
.8847	18		clc				clc 								; add 320 to offset/temp+1
.8848	ad 44 06	lda $0644			lda 	gsOffset
.884b	69 40		adc #$40			adc 	#64
.884d	8d 44 06	sta $0644			sta 	gsOffset
.8850	a5 3d		lda $3d				lda 	gxzScreen+1
.8852	69 01		adc #$01			adc 	#1
.8854	85 3d		sta $3d				sta 	gxzScreen+1
.8856	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page
.8858	90 07		bcc $8861			bcc 	_GXMPDExit
.885a	38		sec				sec  								; next page
.885b	e9 20		sbc #$20			sbc 	#$20
.885d	85 3d		sta $3d				sta 	gxzScreen+1
.885f	e6 0b		inc $0b				inc 	GXEditSlot
.8861					_GXMPDExit:
.8861	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./utility/find.asm

.8862					GXFindSprite:
.8862	aa		tax				tax
.8863	ad 3c 06	lda $063c			lda 	GXSpritePage 				; access the base page of the sprite
.8866	85 0b		sta $0b				sta 	GXEditSlot
.8868	bd 00 61	lda $6100,x			lda 	GXMappingAddress+256,x 		; MSB
.886b	8d 62 06	sta $0662			sta 	GXSpriteOffset+1
.886e	bd 00 60	lda $6000,x			lda 	GXMappingAddress,x 			; LSB
.8871	48		pha				pha 								; save twice
.8872	48		pha				pha
.8873	29 03		and #$03			and 	#3 							; get sprite size
.8875	8d 5f 06	sta $065f			sta 	GXSizeBits 					; save raw (0-3)
.8878	aa		tax				tax
.8879	bd 9a 88	lda $889a,x			lda 	_GXFXSSTTable,x 			; read sprite size
.887c	8d 5e 06	sta $065e			sta 	GXSizePixels 					; save (8/16/24/32)
.887f	68		pla				pla 								; get LUT
.8880	4a		lsr a				lsr		a
.8881	4a		lsr a				lsr		a
.8882	29 03		and #$03			and 	#3
.8884	8d 60 06	sta $0660			sta 	GXSpriteLUT
.8887	68		pla				pla 								; address, neeeds to be x 4
.8888	29 f0		and #$f0			and 	#$F0
.888a	8d 61 06	sta $0661			sta 	GXSpriteOffset
.888d	0e 61 06	asl $0661			asl 	GXSpriteOffset
.8890	2e 62 06	rol $0662			rol 	GXSpriteOffset+1
.8893	0e 61 06	asl $0661			asl 	GXSpriteOffset
.8896	2e 62 06	rol $0662			rol 	GXSpriteOffset+1
.8899	60		rts				rts
.889a					_GXFXSSTTable:
>889a	08 10 18 20					.byte 	8,16,24,32
.065e					GXSizePixels:
>065e							.fill 	1
.065f					GXSizeBits:
>065f							.fill 	1
.0660					GXSpriteLUT:
>0660							.fill 	1
.0661					GXSpriteOffset:
>0661							.fill 	2

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./utility/sort.asm

.889e					GXSortXY:
.889e	20 bc 88	jsr $88bc			jsr 	GXSortY 					; will be sorted on Y now
.88a1	ad 31 06	lda $0631			lda 	gxX0 						; compare X0 v X1
.88a4	cd 35 06	cmp $0635			cmp 	gxX1
.88a7	ad 32 06	lda $0632			lda 	gXX0+1
.88aa	ed 36 06	sbc $0636			sbc 	gXX1+1
.88ad	90 0c		bcc $88bb			bcc 	_GXSXYExit 					; X0 < X1 exit
.88af	a2 00		ldx #$00			ldx 	#0 							; swap them over
.88b1	a0 04		ldy #$04			ldy 	#4
.88b3	20 d0 88	jsr $88d0			jsr 	GXSwapXY
.88b6	e8		inx				inx
.88b7	c8		iny				iny
.88b8	20 d0 88	jsr $88d0			jsr 	GXSwapXY
.88bb					_GXSXYExit:
.88bb	60		rts				rts
.88bc					GXSortY:
.88bc	ad 33 06	lda $0633			lda 	gxY0 						; if Y0 >= Y1
.88bf	cd 37 06	cmp $0637			cmp 	gxY1
.88c2	90 0b		bcc $88cf			bcc 	_GXSYSorted
.88c4	a2 03		ldx #$03			ldx 	#3 							; swap 3-0
.88c6	a0 07		ldy #$07			ldy 	#7 							; with 4-7
.88c8					_GXSwap1:
.88c8	20 d0 88	jsr $88d0			jsr 	GXSwapXY
.88cb	88		dey				dey
.88cc	ca		dex				dex
.88cd	10 f9		bpl $88c8			bpl 	_GXSwap1
.88cf					_GXSYSorted:
.88cf	60		rts				rts
.88d0					GXSwapXY:
.88d0	bd 31 06	lda $0631,x			lda 	gxX0,x
.88d3	48		pha				pha
.88d4	b9 31 06	lda $0631,y			lda 	gxX0,y
.88d7	9d 31 06	sta $0631,x			sta 	gxX0,x
.88da	68		pla				pla
.88db	99 31 06	sta $0631,y			sta 	gxX0,y
.88de	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Return to file: ./common/aa.system/00start.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/assembler.asm

.88df					AssembleGroup1:
.88df	a9 ff		lda #$ff			lda 	#$FF
.88e1	8d a5 04	sta $04a5			sta 	ModeMask 					; initialise the mode mask - all for all
.88e4	80 02		bra $88e8			bra 	AsmGroup12
.88e6					AssembleGroup2:
.88e6	a5 00		lda $00				lda 	$00
.88e8					AsmGroup12:
.88e8	8d a3 04	sta $04a3			sta 	IsGroup1 					; save the 'group 1' flag
.88eb	68		pla				pla 								; pop the return address to access the information following.
.88ec	fa		plx				plx
.88ed	20 76 89	jsr $8976			jsr 	AccessParameters 			; get opcode and save as base
.88f0	8d a4 04	sta $04a4			sta 	BaseOpcode
.88f3	ad a3 04	lda $04a3			lda 	IsGroup1 					; skip if group 1 as we don't have a complex mask.
.88f6	d0 08		bne $8900			bne 	_AG12HaveMask
.88f8	a9 02		lda #$02			lda 	#2 							; if group 2 the second parameter is the mask
.88fa	20 7e 89	jsr $897e			jsr 	GetParameter		 		; e.g. which modes are supported for this operand
.88fd	8d a5 04	sta $04a5			sta 	ModeMask
.8900					_AG12HaveMask:
.8900	20 b9 8a	jsr $8ab9			jsr 	TypeAndCalculateOperand 	; get zero page type
.8903	da		phx				phx 								; save found address mode
.8904	20 e2 89	jsr $89e2			jsr 	AssembleModeX
.8907	fa		plx				plx  								; restore address mode
.8908	b0 0b		bcs $8915			bcs 	_AG12Exit
.890a	20 16 89	jsr $8916			jsr 	PromoteToAbsolute  			; promote ZP to ABS and try that
.890d	20 e2 89	jsr $89e2			jsr 	AssembleModeX
.8910	b0 03		bcs $8915			bcs 	_AG12Exit
.8912	4c 64 b3	jmp $b364			jmp 	SyntaxError 				; can't do either, so must be wrong mode/operand.
.8915					_AG12Exit:
.8915	60		rts				rts
.8916					PromoteToAbsolute:
.8916	a9 6c		lda #$6c			lda 	#AM_ABS 					; lda xx
.8918	e0 e4		cpx #$e4			cpx 	#AM_ZEROPAGE
.891a	f0 19		beq $8935			beq 	_PTADo
.891c	a9 7c		lda #$7c			lda 	#AM_ABSX 					; lda xx,X
.891e	e0 f4		cpx #$f4			cpx 	#AM_ZEROX
.8920	f0 13		beq $8935			beq 	_PTADo
.8922	a9 78		lda #$78			lda 	#AM_ABSY 					; lda xx,Y
.8924	e0 80		cpx #$80			cpx 	#AM_ZEROY
.8926	f0 0d		beq $8935			beq 	_PTADo
.8928	a9 01		lda #$01			lda 	#AM_INDABS 					; lda (xx) (jump)
.892a	e0 d1		cpx #$d1			cpx 	#AM_IND
.892c	f0 07		beq $8935			beq 	_PTADo
.892e	a9 02		lda #$02			lda 	#AM_INDABSX 				; lda (xx,x) (jump)
.8930	e0 c0		cpx #$c0			cpx 	#AM_INDX
.8932	f0 01		beq $8935			beq 	_PTADo
.8934	60		rts				rts
.8935					_PTADo:
.8935	aa		tax				tax
.8936	60		rts				rts
.8937					AssembleGroup3:
.8937	68		pla				pla 								; get parameters, which is just the opcode.
.8938	fa		plx				plx
.8939	20 76 89	jsr $8976			jsr 	AccessParameters 			; get and output opcode
.893c	20 8e 89	jsr $898e			jsr 	AssemblerWriteByte
.893f	20 1d 8b	jsr $8b1d			jsr 	CalculateOperand 			; get a 16 bit operand
.8942	ad 08 04	lda $0408			lda 	NSMantissa0 				; calculate the offset
.8945	38		sec				sec
.8946	ed 9e 04	sbc $049e			sbc 	AssemblerAddress
.8949	48		pha				pha 								; LSB in A
.894a	ad 10 04	lda $0410			lda 	NSMantissa1
.894d	ed 9f 04	sbc $049f			sbc 	AssemblerAddress+1
.8950	aa		tax				tax 								; MSB in X
.8951	68		pla				pla
.8952	18		clc				clc 								; $80 to easy check $80-$7F, plus 1 for offset error
.8953	69 7f		adc #$7f			adc 	#$7F
.8955	90 01		bcc $8958			bcc 	_AG3NoCarry
.8957	e8		inx				inx
.8958					_AG3NoCarry:
.8958	38		sec				sec 								; fix back and write out anyways.
.8959	e9 80		sbc #$80			sbc 	#$80
.895b	20 8e 89	jsr $898e			jsr 	AssemblerWriteByte
.895e	e0 00		cpx #$00			cpx 	#0 							; was it in range
.8960	f0 0a		beq $896c			beq 	_AG3Exit
.8962	ad a0 04	lda $04a0			lda 	AssemblerControl 			; are we allowing bad values ?
.8965	29 01		and #$01			and 	#1
.8967	f0 03		beq $896c			beq 	_AG3Exit
.8969	4c 69 b3	jmp $b369			jmp 	RangeError 					; no, branch is out of range
.896c					_AG3Exit:
.896c	60		rts				rts
.896d					AssembleGroup4:
.896d	68		pla				pla 								; pop address
.896e	fa		plx				plx
.896f	20 76 89	jsr $8976			jsr 	AccessParameters 			; access and get first
.8972	20 8e 89	jsr $898e			jsr 	AssemblerWriteByte 			; output it.
.8975	60		rts				rts
.8976					AccessParameters:
.8976	8d a1 04	sta $04a1			sta 	ParamStart
.8979	8e a2 04	stx $04a2			stx 	ParamStart+1
.897c	a9 01		lda #$01			lda 	#1
.897e					GetParameter:
.897e	5a		phy				phy
.897f	a8		tay				tay
.8980	ad a1 04	lda $04a1			lda 	ParamStart
.8983	85 36		sta $36				sta 	zTemp0
.8985	ad a2 04	lda $04a2			lda 	ParamStart+1
.8988	85 37		sta $37				sta 	zTemp0+1
.898a	b1 36		lda ($36),y			lda 	(zTemp0),y
.898c	7a		ply				ply
.898d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/aswrite.asm

.898e					AssemblerWriteByte:
.898e	48		pha			pha
.898f	ad a0 04	lda $04a0		lda 	AssemblerControl 				; check printing bytes ?
.8992	29 02		and #$02		and 	#2
.8994	f0 1b		beq $89b1		beq 	_AWBNoPrint
.8996	ad 9f 04	lda $049f		lda		AssemblerAddress+1 				; print address
.8999	20 cc 89	jsr $89cc		jsr 	PrintHex
.899c	ad 9e 04	lda $049e		lda		AssemblerAddress
.899f	20 cc 89	jsr $89cc		jsr 	PrintHex
.89a2	a9 20		lda #$20		lda 	#' '
.89a4	20 1c b5	jsr $b51c		jsr 	EXTPrintCharacter
.89a7	68		pla			pla 									; print byte
.89a8	48		pha			pha
.89a9	20 cc 89	jsr $89cc		jsr 	PrintHex
.89ac	a9 0d		lda #$0d		lda 	#13
.89ae	20 1c b5	jsr $b51c		jsr 	EXTPrintCharacter
.89b1					_AWBNoPrint:
.89b1	ad 9e 04	lda $049e		lda		AssemblerAddress				; copy address to zTemp0
.89b4	85 36		sta $36			sta 	zTemp0
.89b6	ad 9f 04	lda $049f		lda		AssemblerAddress+1
.89b9	f0 0e		beq $89c9		beq 	_AWBRange
.89bb	85 37		sta $37			sta 	zTemp0+1
.89bd	68		pla			pla 									; write byte out
.89be	92 36		sta ($36)		sta 	(zTemp0)
.89c0	ee 9e 04	inc $049e		inc 	AssemblerAddress 				; bump address
.89c3	d0 03		bne $89c8		bne 	_AWBNoCarry
.89c5	ee 9f 04	inc $049f		inc 	AssemblerAddress+1
.89c8					_AWBNoCarry:
.89c8	60		rts			rts
.89c9					_AWBRange:
.89c9	4c 69 b3	jmp $b369		jmp 	RangeError
.89cc					PrintHex:
.89cc	48		pha				pha
.89cd	4a		lsr a				lsr 	a
.89ce	4a		lsr a				lsr 	a
.89cf	4a		lsr a				lsr 	a
.89d0	4a		lsr a				lsr 	a
.89d1	20 d5 89	jsr $89d5			jsr 	_PrintNibble
.89d4	68		pla				pla
.89d5					_PrintNibble:
.89d5	29 0f		and #$0f			and 	#15
.89d7	c9 0a		cmp #$0a			cmp 	#10
.89d9	90 02		bcc $89dd			bcc 	_NoShift
.89db	69 06		adc #$06			adc 	#6
.89dd					_NoShift:
.89dd	69 30		adc #$30			adc 	#48
.89df	4c 1c b5	jmp $b51c			jmp 	EXTPrintCharacter

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/instruction.asm

.89e2					AssembleModeX:
.89e2	5a		phy				phy
.89e3	ad a3 04	lda $04a3			lda 	IsGroup1
.89e6	f0 17		beq $89ff			beq 	_AMXGroup2
.89e8	8a		txa				txa 							; is it in group # 1
.89e9	29 40		and #$40			and 	#AM_ISG1
.89eb	f0 50		beq $8a3d			beq 	_AMXFail 				; no, give up.
.89ed	8a		txa				txa 							; get back.
.89ee	29 1f		and #$1f			and 	#$1F 					; this is now the offset.
.89f0	e0 e0		cpx #$e0			cpx 	#AM_IMMEDIATE 			; if not immediate, we can continue.
.89f2	d0 22		bne $8a16			bne 	_AMXHaveInfo
.89f4	ad a4 04	lda $04a4			lda 	BaseOpcode 				; cannot store immediate.
.89f7	c9 81		cmp #$81			cmp 	#$81
.89f9	f0 42		beq $8a3d			beq 	_AMXFail
.89fb	a9 08		lda #$08			lda 	#8 						; if immediate we use offset 8.
.89fd	80 17		bra $8a16			bra 	_AMXHaveInfo 			; odd design decision there.
.89ff					_AMXGroup2:
.89ff	8a		txa				txa 							; is it in group 2 ?
.8a00	29 20		and #$20			and 	#AM_ISG2
.8a02	f0 39		beq $8a3d			beq 	_AMXFail 				; no, give up.
.8a04	8a		txa				txa 							; get the offset into Y
.8a05	29 1f		and #$1f			and 	#$1F
.8a07	4a		lsr a				lsr 	a 						; make it 0-7.
.8a08	4a		lsr a				lsr  	a
.8a09	a8		tay				tay
.8a0a	ad a5 04	lda $04a5			lda 	ModeMask 				; shift the modemask left so you can check it against the requested offset
.8a0d					_AMXCheckOkay:
.8a0d	0a		asl a				asl 	a 						; shift modemask left enough times to check legitimate.
.8a0e	88		dey				dey
.8a0f	10 fc		bpl $8a0d			bpl 	_AMXCheckOkay
.8a11	90 2a		bcc $8a3d			bcc 	_AMXFail 				; not allowed.
.8a13	8a		txa				txa  							; get mask back
.8a14	29 1f		and #$1f			and 	#$1F
.8a16					_AMXHaveInfo:
.8a16	e0 00		cpx #$00			cpx 	#$00 					; does it *require* an 8 bit operand
.8a18	10 05		bpl $8a1f			bpl 	_AMXAnySize 			; checking bit 7, the zero page opcode flag.
.8a1a	ac 10 04	ldy $0410			ldy 	NSMantissa1 			; fail if it is outside range, e.g. the MSB is set.
.8a1d	d0 1e		bne $8a3d			bne 	_AMXFail
.8a1f					_AMXAnySize:
.8a1f	18		clc				clc 							; add offset to the base opcode
.8a20	6d a4 04	adc $04a4			adc 	BaseOpcode
.8a23					_AMXOutputCode:
.8a23	20 8e 89	jsr $898e			jsr 	AssemblerWriteByte 		; write the opcode out.
.8a26	e0 28		cpx #$28			cpx 	#AM_ACC 				; A mode (e.g. ASL A)
.8a28	f0 10		beq $8a3a			beq 	_AMXExit
.8a2a	ad 08 04	lda $0408			lda 	NSMantissa0 				; write LSB operand
.8a2d	20 8e 89	jsr $898e			jsr 	AssemblerWriteByte
.8a30	e0 00		cpx #$00			cpx 	#$00 					; zeropage ?
.8a32	30 06		bmi $8a3a			bmi 	_AMXExit
.8a34	ad 10 04	lda $0410			lda 	NSMantissa1 			; write MSB operand
.8a37	20 8e 89	jsr $898e			jsr 	AssemblerWriteByte
.8a3a					_AMXExit:
.8a3a	7a		ply				ply
.8a3b	38		sec				sec
.8a3c	60		rts				rts
.8a3d					_AMXFail:
.8a3d	a0 00		ldy #$00			ldy 	#0
.8a3f					_AMXCheckOddities:
.8a3f	8a		txa				txa
.8a40	d9 68 8a	cmp $8a68,y			cmp 	ExtraOpcode+2,y 		; match address mode
.8a43	d0 16		bne $8a5b			bne 	_AMXCONext
.8a45	b9 66 8a	lda $8a66,y			lda 	ExtraOpcode+0,y 		; do the base opcodes match
.8a48	cd a4 04	cmp $04a4			cmp 	BaseOpcode
.8a4b	d0 0e		bne $8a5b			bne 	_AMXCONext
.8a4d	e0 00		cpx #$00			cpx 	#$00 					; requires zero page ?
.8a4f	10 05		bpl $8a56			bpl 	_AMXCONotZero
.8a51	ad 10 04	lda $0410			lda 	NSMantissa1
.8a54	d0 05		bne $8a5b			bne 	_AMXCONext
.8a56					_AMXCONotZero:
.8a56	b9 67 8a	lda $8a67,y			lda 	ExtraOpcode+1,y 		; get new opcode
.8a59	80 c8		bra $8a23			bra 	_AMXOutputCode 			; and assemble it
.8a5b					_AMXCONext:
.8a5b	c8		iny				iny
.8a5c	c8		iny				iny
.8a5d	c8		iny				iny
.8a5e	b9 66 8a	lda $8a66,y			lda 	ExtraOpcode+0,y 		; end of table
.8a61	d0 dc		bne $8a3f			bne 	_AMXCheckOddities
.8a63					_AMXCOFail:
.8a63	7a		ply				ply
.8a64	18		clc				clc
.8a65	60		rts				rts
.8a66					ExtraOpcode:
>8a66	40 6c 01					.byte $40,$6c,AM_INDABS 	; jmp
>8a69	40 7c 02					.byte $40,$7C,AM_INDABSX 	; jmp
>8a6c	a2 be 78					.byte $a2,$BE,AM_ABSY 		; ldx
>8a6f	a2 b6 80					.byte $a2,$B6,AM_ZEROY 		; ldx
>8a72	82 96 80					.byte $82,$96,AM_ZEROY 		; stx
>8a75	e2 1a 28					.byte $e2,$1a,AM_ACC 		; inc
>8a78	c2 3a 28					.byte $c2,$3a,AM_ACC 		; dec
>8a7b	20 89 e0					.byte $20,$89,AM_IMMEDIATE 	; bit
>8a7e	60 9c 6c					.byte $60,$9c,AM_ABS 		; stz
>8a81	60 9e 7c					.byte $60,$9e,AM_ABSX 		; stz
>8a84	00						.byte $00

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/label.asm

.8a85					LabelHere:
.8a85	c8		iny				iny 								; skip .
.8a86	a2 00		ldx #$00			ldx 	#0 							; get a term
.8a88	20 eb 9f	jsr $9feb			jsr 	EvaluateTerm 				; get a term
.8a8b	ad 00 04	lda $0400			lda 	NSStatus 					; needs to be an integer reference.
.8a8e	c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.8a90	d0 24		bne $8ab6			bne 	_ALType
.8a92	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy reference address to zTemp0
.8a95	85 36		sta $36				sta 	zTemp0
.8a97	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8a9a	85 37		sta $37				sta 	zTemp0+1
.8a9c	5a		phy				phy 								; copy address in.
.8a9d	a0 01		ldy #$01			ldy 	#1
.8a9f	ad 9e 04	lda $049e			lda	 	AssemblerAddress
.8aa2	92 36		sta ($36)			sta 	(zTemp0)
.8aa4	ad 9f 04	lda $049f			lda	 	AssemblerAddress+1
.8aa7	91 36		sta ($36),y			sta 	(zTemp0),y
.8aa9	c8		iny				iny
.8aaa	a9 00		lda #$00			lda 	#0
.8aac	91 36		sta ($36),y			sta 	(zTemp0),y
.8aae	c8		iny				iny
.8aaf	91 36		sta ($36),y			sta 	(zTemp0),y
.8ab1	c8		iny				iny
.8ab2	91 36		sta ($36),y			sta 	(zTemp0),y
.8ab4	7a		ply				ply
.8ab5	60		rts				rts
.8ab6					_ALType:
.8ab6	4c 6e b3	jmp $b36e			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/operands.asm

.8ab9					TypeAndCalculateOperand:
.8ab9	b1 30		lda ($30),y			lda 	(codePtr),y
.8abb	a2 28		ldx #$28			ldx 	#AM_ACC 					; ACC if : or EOL
.8abd	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.8abf	f0 5b		beq $8b1c			beq 	_TACOExit
.8ac1	c9 80		cmp #$80			cmp 	#KWC_EOL
.8ac3	f0 57		beq $8b1c			beq 	_TACOExit
.8ac5	c8		iny				iny
.8ac6	a2 e0		ldx #$e0			ldx 	#AM_IMMEDIATE
.8ac8	c9 23		cmp #$23			cmp 	#KWD_HASH 					; if hash, then immediate - constant.
.8aca	f0 51		beq $8b1d			beq 	CalculateOperand
.8acc	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; if ( then check for indirection
.8ace	f0 1f		beq $8aef			beq 	_TACOIndirect
.8ad0	88		dey				dey 								; undo get of first character
.8ad1	20 1d 8b	jsr $8b1d			jsr 	CalculateOperand 			; get operand
.8ad4	b1 30		lda ($30),y			lda 	(codePtr),y
.8ad6	a2 e4		ldx #$e4			ldx 	#AM_ZEROPAGE 				; if not, try zero page (then absolute)
.8ad8	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8ada	d0 40		bne $8b1c			bne 	_TACOExit
.8adc	c8		iny				iny
.8add	20 f5 ac	jsr $acf5			jsr 	TACOCheckXY 				; extract X,Y or 0 (neither) from the variable.
.8ae0	a2 f4		ldx #$f4			ldx 	#AM_ZEROX 					; check for X
.8ae2	c9 58		cmp #$58			cmp 	#'X'
.8ae4	f0 36		beq $8b1c			beq 	_TACOExit
.8ae6	a2 80		ldx #$80			ldx 	#AM_ZEROY 					; check for Y
.8ae8	c9 59		cmp #$59			cmp 	#'Y'
.8aea	f0 30		beq $8b1c			beq 	_TACOExit
.8aec					_TACOSyntax:
.8aec	4c 64 b3	jmp $b364			jmp 	SyntaxError
.8aef					_TACOIndirect:
.8aef	20 1d 8b	jsr $8b1d			jsr 	CalculateOperand 			; get the operand
.8af2	b1 30		lda ($30),y			lda 	(codePtr),y
.8af4	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if , then it must be ,X)
.8af6	f0 17		beq $8b0f			beq 	_TACOIndX
.8af8	20 7e ad	jsr $ad7e			jsr 	CheckRightBracket  			; otherwise must be ) or ),Y
.8afb	b1 30		lda ($30),y			lda 	(codePtr),y
.8afd	a2 d1		ldx #$d1			ldx 	#AM_IND
.8aff	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not comma then exit with (xx)
.8b01	d0 19		bne $8b1c			bne 	_TACOExit
.8b03	c8		iny				iny
.8b04	20 f5 ac	jsr $acf5			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.8b07	c9 59		cmp #$59			cmp 	#'Y' 						; check Y
.8b09	d0 e1		bne $8aec			bne 	_TACOSyntax
.8b0b	a2 d0		ldx #$d0			ldx 	#AM_INDY
.8b0d	80 0d		bra $8b1c			bra 	_TACOExit
.8b0f					_TACOIndX:
.8b0f	c8		iny				iny
.8b10	20 f5 ac	jsr $acf5			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.8b13	c9 58		cmp #$58			cmp 	#'X' 						; check X
.8b15	d0 d5		bne $8aec			bne 	_TACOSyntax
.8b17	20 7e ad	jsr $ad7e			jsr 	CheckRightBracket			; check )
.8b1a	a2 c0		ldx #$c0			ldx 	#AM_INDX
.8b1c					_TACOExit:
.8b1c	60		rts				rts
.8b1d					CalculateOperand:
.8b1d	48		pha				pha
.8b1e	da		phx				phx
.8b1f	a2 00		ldx #$00			ldx 	#0 							; get 16 bit integer in Slot 0
.8b21	20 bc a4	jsr $a4bc			jsr 	Evaluate16BitInteger
.8b24	fa		plx				plx
.8b25	68		pla				pla
.8b26	60		rts				rts
.acf5					TACOCheckXY:
.acf5	b1 30		lda ($30),y			lda 	(codePtr),y
.acf7	29 c0		and #$c0			and 	#$C0 						; check it is an identifier reference.
.acf9	c9 40		cmp #$40			cmp 	#$40
.acfb	d0 21		bne $ad1e			bne 	_TCXYFail
.acfd	b1 30		lda ($30),y			lda 	(codePtr),y
.acff	18		clc				clc
.ad00	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.ad02	85 37		sta $37				sta 	zTemp0+1
.ad04	c8		iny				iny
.ad05	b1 30		lda ($30),y			lda 	(codePtr),y
.ad07	c8		iny				iny
.ad08	85 36		sta $36				sta 	zTemp0
.ad0a	5a		phy				phy 								; save position
.ad0b	a0 02		ldy #$02			ldy 	#2 							; type is integer ?
.ad0d	b1 36		lda ($36),y			lda 	(zTemp0),y
.ad0f	d0 0c		bne $ad1d			bne 	_TCXYPopFail
.ad11	a0 08		ldy #$08			ldy 	#8 							; get first character, should have bit 7 set as also last.
.ad13	b1 36		lda ($36),y			lda 	(zTemp0),y
.ad15	c9 d8		cmp #$d8			cmp 	#'X'+$80 					; should be X or Y
.ad17	f0 08		beq $ad21			beq 	_TCXYFound
.ad19	c9 d9		cmp #$d9			cmp 	#'Y'+$80
.ad1b	f0 04		beq $ad21			beq 	_TCXYFound
.ad1d					_TCXYPopFail:
.ad1d	7a		ply				ply
.ad1e					_TCXYFail:
.ad1e	a9 00		lda #$00			lda 	#0
.ad20	60		rts				rts
.ad21					_TCXYFound:
.ad21	7a		ply				ply 								; restore position
.ad22	29 7f		and #$7f			and 	#$7F 						; throw bit 7
.ad24	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/editor.asm

.8b27					EditProgramCode:
.8b27	ad a7 04	lda $04a7			lda 	TokenLineNumber 			; find the line.
.8b2a	ae a8 04	ldx $04a8			ldx 	TokenLineNumber+1
.8b2d	20 a3 a5	jsr $a5a3			jsr 	MemorySearch
.8b30	90 05		bcc $8b37			bcc 	_EPCNoDelete 				; reached the end don't delete
.8b32	d0 03		bne $8b37			bne 	_EPCNoDelete 				; found slot but didn't match, no delete
.8b34	20 a7 b5	jsr $b5a7			jsr 	MemoryDeleteLine 			; delete the line
.8b37					_EPCNoDelete:
.8b37	ad a9 04	lda $04a9			lda 	TokenBuffer 				; buffer empty
.8b3a	c9 80		cmp #$80			cmp 	#KWC_EOL
.8b3c	f0 0d		beq $8b4b			beq 	_EPCNoInsert
.8b3e	ad a7 04	lda $04a7			lda 	TokenLineNumber 			; find the line - it cannot exist.
.8b41	ae a8 04	ldx $04a8			ldx 	TokenLineNumber+1 			; so this can't fail, it returns some point in the code.
.8b44	20 a3 a5	jsr $a5a3			jsr 	MemorySearch
.8b47	18		clc				clc 								; insert at this point.
.8b48	20 de b5	jsr $b5de			jsr 	MemoryInsertLine 			; insert the line
.8b4b					_EPCNoInsert:
.8b4b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/warmstart.asm

.8b4c					WarmStart:
.8b4c	a2 ff		ldx #$ff			ldx 	#$FF
.8b4e	9a		txs				txs
.8b4f	20 32 b5	jsr $b532			jsr 	EXTInputLine 				; get line to lineBuffer
.8b52	20 76 aa	jsr $aa76			jsr 	TokeniseLine 				; tokenise the line
.8b55	ad a7 04	lda $04a7			lda 	TokenLineNumber 			; line number ?
.8b58	0d a8 04	ora $04a8			ora 	TokenLineNumber+1
.8b5b	d0 17		bne $8b74			bne 	_WSEditCode 				; if so,edit code.
.8b5d	9c a6 04	stz $04a6			stz 	TokenOffset 				; zero offset, meaning it only runs one line.
.8b60	a9 a6		lda #$a6			lda 	#((TokenOffset) & $FF)
.8b62	85 30		sta $30				sta 	codePtr
.8b64	a9 04		lda #$04			lda 	#((TokenOffset) >> 8)
.8b66	85 31		sta $31				sta 	codePtr+1
.8b68	ad a9 04	lda $04a9			lda 	TokenBuffer 				; nothing to run
.8b6b	c9 80		cmp #$80			cmp 	#KWC_EOL
.8b6d	f0 dd		beq $8b4c			beq 	WarmStart
.8b6f	20 87 94	jsr $9487			jsr 	RUNCodePointerLine 			; execute that line.
.8b72	80 d8		bra $8b4c			bra 	WarmStart
.8b74					_WSEditCode:
.8b74	20 27 8b	jsr $8b27			jsr 	EditProgramCode
.8b77	20 e5 8b	jsr $8be5			jsr 	ClearCommand
.8b7a	80 d0		bra $8b4c			bra 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assemble.asm

.8b7c					AssembleCommand:
.8b7c	a2 00		ldx #$00			ldx 	#0
.8b7e	20 bc a4	jsr $a4bc			jsr 	Evaluate16BitInteger 		; start address
.8b81	ad 08 04	lda $0408			lda 	NSMantissa0
.8b84	8d 9e 04	sta $049e			sta 	AssemblerAddress
.8b87	ad 10 04	lda $0410			lda 	NSMantissa1
.8b8a	8d 9f 04	sta $049f			sta 	AssemblerAddress+1
.8b8d	20 86 ad	jsr $ad86			jsr 	CheckComma
.8b90	20 dc a4	jsr $a4dc			jsr 	Evaluate8BitInteger 		; options
.8b93	ad 08 04	lda $0408			lda 	NSMantissa0
.8b96	8d a0 04	sta $04a0			sta 	AssemblerControl
.8b99	60		rts				rts
.8b9a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assert.asm

.8b9b					AssertCommand:
.8b9b	a2 00		ldx #$00			ldx 	#0
.8b9d	20 a7 a4	jsr $a4a7			jsr 	EvaluateInteger 			; the assert test
.8ba0	20 74 a5	jsr $a574			jsr 	NSMIsZero 					; exit if result is non zero.
.8ba3	d0 05		bne $8baa			bne 	_ACExit
.8ba5	a9 0a		lda #$0a		lda	#10
.8ba7	4c 11 99	jmp $9911		jmp	ErrorHandler
.8baa					_ACExit:
.8baa	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/call.asm

.8bab					CallCommand:
.8bab	a2 00		ldx #$00			ldx 	#0
.8bad	20 bc a4	jsr $a4bc			jsr 	Evaluate16BitInteger
.8bb0					_CCClear
.8bb0	e8		inx				inx  								; clear 1,2 and 3 (for A X Y)
.8bb1	20 44 a5	jsr $a544			jsr 	NSMSetZero
.8bb4	e0 04		cpx #$04			cpx 	#4
.8bb6	d0 f8		bne $8bb0			bne 	_CCClear
.8bb8	a2 00		ldx #$00			ldx 	#0 							; and keep trying
.8bba					_CCCParam:
.8bba	b1 30		lda ($30),y			lda 	(codePtr),y
.8bbc	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8bbe	d0 09		bne $8bc9			bne 	_CCCRun6502
.8bc0	c8		iny				iny 								; skip comma
.8bc1	e8		inx				inx	 								; next level
.8bc2	20 dc a4	jsr $a4dc			jsr 	Evaluate8BitInteger 		; get A/X/Y
.8bc5	e0 03		cpx #$03			cpx 	#3
.8bc7	90 f1		bcc $8bba			bcc 	_CCCParam 					; done all 3 ?
.8bc9					_CCCRun6502:
.8bc9	5a		phy				phy 								; save position
.8bca	ad 10 04	lda $0410			lda 	NSMantissa1 				; put address in zTemp0
.8bcd	85 37		sta $37				sta 	zTemp0+1
.8bcf	ad 08 04	lda $0408			lda 	NSMantissa0
.8bd2	85 36		sta $36				sta 	zTemp0
.8bd4	ad 09 04	lda $0409			lda 	NSMantissa0+1 				; get registers
.8bd7	ae 0a 04	ldx $040a			ldx 	NSMantissa0+2
.8bda	ac 0b 04	ldy $040b			ldy 	NSMantissa0+3
.8bdd	20 e2 8b	jsr $8be2			jsr 	_CCCZTemp0 					; call zTemp0
.8be0	7a		ply				ply 								; restore position and exit
.8be1	60		rts				rts
.8be2					_CCCZTemp0:
.8be2	6c 36 00	jmp ($0036)			jmp 	(zTemp0)

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/clear.asm

.8be5					ClearCommand:
.8be5	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.8be7	85 36		sta $36				sta 	0+zTemp0
.8be9	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.8beb	85 37		sta $37				sta 	1+zTemp0
.8bed					_ClearZeroLoop:
.8bed	b2 36		lda ($36)			lda 	(zTemp0) 					; end of variables
.8bef	f0 24		beq $8c15			beq 	_ClearZeroEnd
.8bf1	a0 03		ldy #$03			ldy 	#3 							; erase the variables
.8bf3	a9 00		lda #$00			lda 	#0
.8bf5					_ClearOneVariable:
.8bf5	91 36		sta ($36),y			sta 	(zTemp0),y
.8bf7	c8		iny				iny
.8bf8	c0 08		cpy #$08			cpy 	#8
.8bfa	d0 f9		bne $8bf5			bne 	_ClearOneVariable
.8bfc	a0 02		ldy #$02			ldy 	#2 							; has it been marked procedure
.8bfe	b1 36		lda ($36),y			lda 	(zTemp0),y
.8c00	c9 18		cmp #$18			cmp 	#NSTProcedure
.8c02	d0 04		bne $8c08			bne 	_ClearNotProcedure
.8c04	a9 04		lda #$04			lda 	#NSTInteger+NSBIsArray 		; set it back to an integer array
.8c06	91 36		sta ($36),y			sta 	(zTemp0),y
.8c08					_ClearNotProcedure:
.8c08	18		clc				clc 								; go to the next variable
.8c09	b2 36		lda ($36)			lda 	(zTemp0)
.8c0b	65 36		adc $36				adc 	zTemp0
.8c0d	85 36		sta $36				sta 	zTemp0
.8c0f	90 dc		bcc $8bed			bcc 	_ClearZeroLoop
.8c11	e6 37		inc $37				inc 	zTemp0+1
.8c13	80 d8		bra $8bed			bra 	_ClearZeroLoop
.8c15					_ClearZeroEnd:
.8c15	18		clc				clc
.8c16	a5 36		lda $36				lda 	zTemp0
.8c18	69 01		adc #$01			adc 	#1
.8c1a	8d 8c 04	sta $048c			sta 	lowMemPtr
.8c1d	a5 37		lda $37				lda 	zTemp0+1
.8c1f	69 00		adc #$00			adc 	#0
.8c21	8d 8d 04	sta $048d			sta 	lowMemPtr+1
.8c24	20 5d a6	jsr $a65d			jsr 	StackReset
.8c27	20 c1 b6	jsr $b6c1			jsr 	StringSystemInitialise
.8c2a	20 31 98	jsr $9831			jsr 	ProcedureScan
.8c2d	20 43 94	jsr $9443			jsr 	Command_Restore
.8c30	9c 9e 04	stz $049e			stz 	AssemblerAddress
.8c33	9c 9f 04	stz $049f			stz 	AssemblerAddress+1
.8c36	9c a0 04	stz $04a0			stz 	AssemblerControl
.8c39	20 de a1	jsr $a1de			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.8c3c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/commands/cls.asm

.8c3d					ClearScreen:
.8c3d	5a		phy				phy
.8c3e	20 19 b5	jsr $b519			jsr 	EXTClearScreen
.8c41	7a		ply				ply
.8c42	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/data.asm

.8c43					Command_Data:
.8c43	a9 3a		lda #$3a			lda 	#KWD_COLON 					; advance to colon/EOL
.8c45	a2 80		ldx #$80			ldx 	#KWC_EOL
.8c47	20 83 98	jsr $9883			jsr 	ScanForward
.8c4a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/dim.asm

.8c4b					DimCommand:
.8c4b	b1 30		lda ($30),y			lda 	(codePtr),y
.8c4d	29 c0		and #$c0			and 	#$C0
.8c4f	c9 40		cmp #$40			cmp 	#$40
.8c51	d0 7a		bne $8ccd			bne 	_DCSyntax
.8c53	b1 30		lda ($30),y			lda 	(codePtr),y
.8c55	18		clc				clc
.8c56	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8c58	85 3f		sta $3f				sta 	zaTemp+1
.8c5a	c8		iny				iny
.8c5b	b1 30		lda ($30),y			lda 	(codePtr),y
.8c5d	c8		iny				iny
.8c5e	85 3e		sta $3e				sta 	zaTemp
.8c60	5a		phy				phy
.8c61	a0 02		ldy #$02			ldy 	#2 						; read type byte
.8c63	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8c65	29 18		and #$18			and 	#NSBTypeMask 			; check it's not a procedure
.8c67	c9 18		cmp #$18			cmp 	#NSTProcedure
.8c69	f0 62		beq $8ccd			beq 	_DCSyntax
.8c6b	b1 3e		lda ($3e),y			lda 	(zaTemp),y 				; check it's an array
.8c6d	29 04		and #$04			and 	#NSBIsArray
.8c6f	f0 64		beq $8cd5			beq 	_DCType
.8c71	a0 04		ldy #$04			ldy 	#4 						; check not already defined
.8c73	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8c75	d0 59		bne $8cd0			bne 	_DCRedefine
.8c77	7a		ply				ply
.8c78	20 d8 8c	jsr $8cd8			jsr 	_DCGetSize 				; get array size, check it.
.8c7b	5a		phy				phy
.8c7c	a0 05		ldy #$05			ldy 	#5 						; store in first array size slot
.8c7e	91 3e		sta ($3e),y			sta 	(zaTemp),y 				; second will be zero.
.8c80	7a		ply				ply 							; is there a second (e.g. ,x)
.8c81	b1 30		lda ($30),y			lda 	(codePtr),y
.8c83	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8c85	d0 0a		bne $8c91			bne 	_DCOneDimension
.8c87	c8		iny				iny 							; skip comma
.8c88	20 d8 8c	jsr $8cd8			jsr 	_DCGetSize 				; get 2nd array size
.8c8b	5a		phy				phy
.8c8c	a0 06		ldy #$06			ldy 	#6 						; store in 2nd array size
.8c8e	91 3e		sta ($3e),y			sta 	(zaTemp),y
.8c90	7a		ply				ply
.8c91					_DCOneDimension:
.8c91	5a		phy				phy 							; save position
.8c92	a0 05		ldy #$05			ldy 	#5 						; dimensions + 1 in AX (as zero based)
.8c94	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8c96	aa		tax				tax
.8c97	c8		iny				iny
.8c98	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8c9a	e8		inx				inx 							; bump them.
.8c9b	1a		inc a				inc 	a
.8c9c	20 00 b2	jsr $b200			jsr 	Multiply8x8 			; work out the total number of elements -> zTemp0
.8c9f	a5 37		lda $37				lda 	zTemp0+1 				; don't allow more than 8192 elements whatever
.8ca1	29 e0		and #$e0			and 	#$E0
.8ca3	d0 23		bne $8cc8			bne 	_DCSize
.8ca5	a0 02		ldy #$02			ldy 	#2 						; get base type
.8ca7	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8ca9	20 e6 8c	jsr $8ce6			jsr 	ScaleByBaseType 		; scale by base type
.8cac	a5 36		lda $36				lda 	zTemp0
.8cae	a6 37		ldx $37				ldx 	zTemp0+1
.8cb0	20 a0 a1	jsr $a1a0			jsr 	AllocateXABytes 		; allocate memory
.8cb3	a0 03		ldy #$03			ldy 	#3 						; copy into the address.
.8cb5	91 3e		sta ($3e),y			sta 	(zaTemp),y
.8cb7	c8		iny				iny
.8cb8	8a		txa				txa
.8cb9	91 3e		sta ($3e),y			sta 	(zaTemp),y
.8cbb	7a		ply				ply 							; get position back
.8cbc	20 7e ad	jsr $ad7e			jsr 	CheckRightBracket 		; check )
.8cbf	b1 30		lda ($30),y			lda 	(codePtr),y
.8cc1	c8		iny				iny 							; consume in case
.8cc2	c9 2c		cmp #$2c			cmp 	#KWD_COMMA		 		; if so do another DIM.
.8cc4	f0 85		beq $8c4b			beq 	DimCommand
.8cc6	88		dey				dey 							; undo consume
.8cc7	60		rts				rts
.8cc8					_DCSize:
.8cc8	a9 16		lda #$16		lda	#22
.8cca	4c 11 99	jmp $9911		jmp	ErrorHandler
.8ccd					_DCSyntax:
.8ccd	4c 64 b3	jmp $b364			jmp 	SyntaxError
.8cd0					_DCRedefine:
.8cd0	a9 15		lda #$15		lda	#21
.8cd2	4c 11 99	jmp $9911		jmp	ErrorHandler
.8cd5					_DCType:
.8cd5	4c 6e b3	jmp $b36e			jmp 	TypeError
.8cd8					_DCGetSize:
.8cd8	a2 00		ldx #$00			ldx 	#0 						; get first index.
.8cda	20 dc a4	jsr $a4dc			jsr 	Evaluate8BitInteger 	; get array dimension
.8cdd	c9 00		cmp #$00			cmp 	#0 						; must be 1-254
.8cdf	f0 e7		beq $8cc8			beq 	_DCSize
.8ce1	c9 fe		cmp #$fe			cmp 	#254
.8ce3	f0 e3		beq $8cc8			beq 	_DCSize
.8ce5	60		rts				rts
.8ce6					ScaleByBaseType:
.8ce6	29 10		and #$10			and 	#NSBIsString 			; is it string
.8ce8	d0 19		bne $8d03			bne 	_SBBTString
.8cea	a5 37		lda $37				lda 	zTemp0+1 				; push value on stack
.8cec	48		pha				pha
.8ced	a5 36		lda $36				lda 	zTemp0
.8cef	48		pha				pha
.8cf0	06 36		asl $36				asl 	zTemp0 					; x 2
.8cf2	26 37		rol $37				rol 	zTemp0+1
.8cf4	06 36		asl $36				asl 	zTemp0 					; x 4
.8cf6	26 37		rol $37				rol 	zTemp0+1
.8cf8	68		pla				pla 							; add stacked value = x 5
.8cf9	65 36		adc $36				adc 	zTemp0
.8cfb	85 36		sta $36				sta 	zTemp0
.8cfd	68		pla				pla
.8cfe	65 37		adc $37				adc 	zTemp0+1
.8d00	85 37		sta $37				sta 	zTemp0+1
.8d02	60		rts				rts
.8d03					_SBBTString:
.8d03	06 36		asl $36				asl 	zTemp0
.8d05	26 37		rol $37				rol 	zTemp0+1
.8d07	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/end.asm

.8d08					EndCommand:
.8d08	4c 4c 8b	jmp $8b4c			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/commands/event.asm

.8d0b					UnaryEvent:
.8d0b	fa		plx				plx
.8d0c	20 c7 96	jsr $96c7			jsr 	TimerToStackX 				; timer in +0
.8d0f	e8		inx				inx  								; put reference into +1
.8d10	20 eb 9f	jsr $9feb			jsr 	EvaluateTerm
.8d13	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if is integer reference
.8d16	c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.8d18	d0 57		bne $8d71			bne 	_UEType
.8d1a	e8		inx				inx 								; put the step in +2
.8d1b	20 86 ad	jsr $ad86			jsr 	CheckComma
.8d1e	20 bc a4	jsr $a4bc			jsr 	Evaluate16BitInteger
.8d21	20 7e ad	jsr $ad7e			jsr 	CheckRightBracket
.8d24	ca		dex				dex
.8d25	ca		dex				dex
.8d26	ad 09 04	lda $0409			lda 	NSMantissa0+1 				; copy reference to zTemp0
.8d29	85 36		sta $36				sta 	zTemp0
.8d2b	ad 11 04	lda $0411			lda 	NSMantissa1+1
.8d2e	85 37		sta $37				sta 	zTemp0+1
.8d30	5a		phy				phy
.8d31	a0 03		ldy #$03			ldy 	#3 							; check bit 7 of last bit, the packed sign bit
.8d33	b1 36		lda ($36),y			lda 	(zTemp0),y
.8d35	30 36		bmi $8d6d			bmi 	_UEFalse
.8d37	a0 00		ldy #$00			ldy 	#0 							; has it timed out (24 bit)
.8d39	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.8d3c	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.8d3e	c8		iny				iny
.8d3f	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8d42	f1 36		sbc ($36),y			sbc		(zTemp0),y
.8d44	c8		iny				iny
.8d45	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.8d48	f1 36		sbc ($36),y			sbc		(zTemp0),y
.8d4a	90 21		bcc $8d6d			bcc 	_UEFalse 					; no, return FALSE.
.8d4c	18		clc				clc
.8d4d	a0 00		ldy #$00			ldy 	#0 							; work out new value as timer() + step
.8d4f	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.8d52	7d 0a 04	adc $040a,x			adc 	NSMantissa0+2,x
.8d55	91 36		sta ($36),y			sta 	(zTemp0),y
.8d57	c8		iny				iny
.8d58	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8d5b	7d 12 04	adc $0412,x			adc 	NSMantissa1+2,x
.8d5e	91 36		sta ($36),y			sta 	(zTemp0),y
.8d60	c8		iny				iny
.8d61	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.8d64	7d 1a 04	adc $041a,x			adc 	NSMantissa2+2,x
.8d67	91 36		sta ($36),y			sta 	(zTemp0),y
.8d69	7a		ply				ply
.8d6a	4c 7e 99	jmp $997e			jmp 	ReturnTrue
.8d6d					_UEFalse:
.8d6d	7a		ply				ply 								; restore Y
.8d6e	4c 8a 99	jmp $998a			jmp 	ReturnFalse 				; and return False
.8d71					_UEType:
.8d71	4c 6e b3	jmp $b36e			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/for.asm

.8d74					ForCommand:
.8d74	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; allocate 18 bytes on the return stack.
.8d76	20 f8 a5	jsr $a5f8			jsr 	StackOpen
.8d79	a2 00		ldx #$00			ldx 	#0
.8d7b	20 eb 9f	jsr $9feb			jsr 	EvaluateTerm
.8d7e	bd 00 04	lda $0400,x			lda 	NSStatus,x
.8d81	c9 20		cmp #$20			cmp 	#NSBIsReference+NSTInteger 	; do we have an integer 4 byte reference.
.8d83	d0 49		bne $8dce			bne		_FCError
.8d85	a9 3d		lda #$3d			lda 	#KWD_EQUAL 					; =
.8d87	20 8e ad	jsr $ad8e			jsr 	CheckNextA
.8d8a	e8		inx				inx
.8d8b	20 a7 a4	jsr $a4a7			jsr 	EvaluateInteger 			; <from> in +1
.8d8e	b1 30		lda ($30),y			lda 	(codePtr),y
.8d90	c8		iny				iny 								; consume it
.8d91	48		pha				pha 								; save on stack for later
.8d92	c9 b3		cmp #$b3			cmp 	#KWD_DOWNTO
.8d94	f0 04		beq $8d9a			beq 	_FCNoSyntax
.8d96	c9 ca		cmp #$ca			cmp 	#KWD_TO
.8d98	d0 37		bne $8dd1			bne 	_FCSyntaxError
.8d9a					_FCNoSyntax:
.8d9a	e8		inx				inx
.8d9b	20 a7 a4	jsr $a4a7			jsr 	EvaluateInteger
.8d9e	20 3c a6	jsr $a63c			jsr 	STKSaveCodePosition 		; save loop back position
.8da1	68		pla				pla 								; restore DOWNTO or TO
.8da2	5a		phy				phy 								; save Y on the stack
.8da3	49 b3		eor #$b3			eor 	#KWD_DOWNTO 				; 0 if DOWNTO, #0 if TO
.8da5	f0 02		beq $8da9			beq 	_FCNotDownTo
.8da7	a9 02		lda #$02			lda 	#2
.8da9					_FCNotDownTo:
.8da9	3a		dec a				dec 	a 							; 255 if DOWNTO, 1 if TO
.8daa	a0 10		ldy #$10			ldy 	#16
.8dac	91 34		sta ($34),y			sta 	(basicStack),y 				; copy that out to the Basic Stack.
.8dae	a0 06		ldy #$06			ldy 	#6
.8db0	ad 08 04	lda $0408			lda 	NSMantissa0
.8db3	91 34		sta ($34),y			sta 	(basicStack),y
.8db5	ad 10 04	lda $0410			lda 	NSMantissa1
.8db8	c8		iny				iny
.8db9	91 34		sta ($34),y			sta 	(basicStack),y
.8dbb	a0 08		ldy #$08			ldy 	#8 							; set initial index value
.8dbd	a2 01		ldx #$01			ldx 	#1
.8dbf	20 d4 8d	jsr $8dd4			jsr 	FCIntegerToStack
.8dc2	a0 0c		ldy #$0c			ldy 	#12 						; set the terminal value
.8dc4	a2 02		ldx #$02			ldx 	#2
.8dc6	20 d4 8d	jsr $8dd4			jsr 	FCIntegerToStack
.8dc9	20 f4 8d	jsr $8df4			jsr 	CopyIndexToReference
.8dcc	7a		ply				ply 								; restore position
.8dcd	60		rts				rts
.8dce					_FCError:
.8dce	4c 6e b3	jmp $b36e			jmp 	TypeError
.8dd1					_FCSyntaxError:
.8dd1	4c 64 b3	jmp $b364			jmp 	SyntaxError
.8dd4					FCIntegerToStack:
.8dd4	3c 00 04	bit $0400,x			bit 	NSStatus,x 					; is the value negative
.8dd7	10 03		bpl $8ddc			bpl	 	_FCNotNegative
.8dd9	20 f9 a4	jsr $a4f9			jsr 	NSMNegateMantissa 			; if so 2's complement the mantissa
.8ddc					_FCNotNegative:
.8ddc	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy out to the basic stack
.8ddf	91 34		sta ($34),y			sta 	(basicStack),y
.8de1	c8		iny				iny
.8de2	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8de5	91 34		sta ($34),y			sta 	(basicStack),y
.8de7	c8		iny				iny
.8de8	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.8deb	91 34		sta ($34),y			sta 	(basicStack),y
.8ded	c8		iny				iny
.8dee	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.8df1	91 34		sta ($34),y			sta 	(basicStack),y
.8df3	60		rts				rts
.8df4					CopyIndexToReference:
.8df4	5a		phy				phy
.8df5	a0 06		ldy #$06			ldy 	#6 							; copy address-8 to write to zTemp0
.8df7	38		sec				sec 								; (because we copy from offset 8)
.8df8	b1 34		lda ($34),y			lda 	(basicStack),y
.8dfa	e9 08		sbc #$08			sbc 	#8
.8dfc	85 36		sta $36				sta 	zTemp0
.8dfe	c8		iny				iny
.8dff	b1 34		lda ($34),y			lda 	(basicStack),y
.8e01	e9 00		sbc #$00			sbc 	#0
.8e03	85 37		sta $37				sta 	zTemp0+1
.8e05	a2 04		ldx #$04			ldx 	#4 							; this is the copy counter/
.8e07	a0 0b		ldy #$0b			ldy 	#8+3 		 				; the MSB of the mantissa
.8e09	b1 34		lda ($34),y			lda 	(basicStack),y
.8e0b	0a		asl a				asl 	a 							; into carry
.8e0c	a0 08		ldy #$08			ldy 	#8 							; where to copy from.
.8e0e	90 14		bcc $8e24			bcc 	_CITRNormal
.8e10	38		sec				sec
.8e11					_CITRNegative:
.8e11	a9 00		lda #$00			lda 	#0
.8e13	f1 34		sbc ($34),y			sbc 	(basicStack),y
.8e15	91 36		sta ($36),y			sta 	(zTemp0),y
.8e17	c8		iny				iny
.8e18	ca		dex				dex
.8e19	d0 f6		bne $8e11			bne 	_CITRNegative
.8e1b	88		dey				dey 								; look at MSB of mantissa
.8e1c	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set the MSB as negative packed.
.8e1e	09 80		ora #$80			ora 	#$80
.8e20	91 36		sta ($36),y			sta 	(zTemp0),y
.8e22	7a		ply				ply
.8e23	60		rts				rts
.8e24					_CITRNormal:
.8e24	b1 34		lda ($34),y			lda 	(basicStack),y 				; copy without negation.
.8e26	91 36		sta ($36),y			sta 	(zTemp0),y
.8e28	c8		iny				iny
.8e29	ca		dex				dex
.8e2a	d0 f8		bne $8e24			bne 	_CITRNormal
.8e2c	7a		ply				ply 								; and exit.
.8e2d	60		rts				rts
.8e2e					NextCommand:
.8e2e	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; check FOR is TOS
.8e30	a2 11		ldx #$11			ldx 	#ERRID_FOR 					; this error
.8e32	20 24 a6	jsr $a624			jsr 	StackCheckFrame
.8e35	5a		phy				phy
.8e36	a0 10		ldy #$10			ldy 	#16 						; get the step count
.8e38	b1 34		lda ($34),y			lda 	(basicStack),y
.8e3a	85 36		sta $36				sta 	zTemp0 						; this is the sign extend
.8e3c	30 02		bmi $8e40			bmi 	_NCStepNeg
.8e3e	64 36		stz $36				stz 	zTemp0 						; which is 0 or 255
.8e40					_NCStepNeg:
.8e40	a0 08		ldy #$08			ldy 	#8 							; offset to bump
.8e42	a2 04		ldx #$04			ldx 	#4 							; count to bump
.8e44	18		clc				clc
.8e45					_NCBump:
.8e45	71 34		adc ($34),y			adc 	(basicStack),y 				; add it
.8e47	91 34		sta ($34),y			sta 	(basicStack),y
.8e49	a5 36		lda $36				lda 	zTemp0 						; get sign extend for next time.
.8e4b	c8		iny				iny 								; next byte
.8e4c	ca		dex				dex 								; do four times
.8e4d	d0 f6		bne $8e45			bne 	_NCBump
.8e4f	20 f4 8d	jsr $8df4			jsr		CopyIndexToReference		; copy it to the reference variable.
.8e52	a0 10		ldy #$10			ldy 	#16 						; get step count again
.8e54	b1 34		lda ($34),y			lda 	(basicStack),y
.8e56	0a		asl a				asl 	a 							; sign bit to carry
.8e57	a9 0c		lda #$0c			lda 	#12 						; offset of LHS = terminal offset
.8e59	85 38		sta $38				sta 	zTemp1
.8e5b	90 02		bcc $8e5f			bcc 	_NCCompRev 					; use if step is +ve
.8e5d	a9 08		lda #$08			lda 	#8 							; now the LHS = index value
.8e5f					_NCCompRev:
.8e5f	85 38		sta $38				sta 	zTemp1 						; so zTemp0 is the index for LHS
.8e61	49 04		eor #$04			eor 	#(8^12) 					; and zTemp0+1 is the index for RHS
.8e63	85 39		sta $39				sta 	zTemp1+1
.8e65	a2 04		ldx #$04			ldx 	#4 							; bytes to compare
.8e67	38		sec				sec
.8e68					_NCCompare:
.8e68	a4 38		ldy $38				ldy 	zTemp1 						; do compare using the two indices
.8e6a	b1 34		lda ($34),y			lda 	(basicStack),y
.8e6c	a4 39		ldy $39				ldy 	zTemp1+1
.8e6e	f1 34		sbc ($34),y			sbc 	(basicStack),y
.8e70	e6 38		inc $38				inc 	zTemp1 						; bump the indices (inc,dex do not change C or V)
.8e72	e6 39		inc $39				inc 	zTemp1+1
.8e74	ca		dex				dex 								; do it 4 times.
.8e75	d0 f1		bne $8e68			bne 	_NCCompare
.8e77	50 02		bvc $8e7b			bvc 	_NCNoOverflow 				; convert to signed comparison
.8e79	49 80		eor #$80			eor 	#$80
.8e7b					_NCNoOverflow:
.8e7b	7a		ply				ply 								; restore Y position
.8e7c	0a		asl a				asl 	a 							; is bit 7 set.
.8e7d	90 04		bcc $8e83			bcc 	_NCLoopback 				; if no , >= so loop back
.8e7f	20 16 a6	jsr $a616			jsr 	StackClose 					; exit the loop
.8e82	60		rts				rts
.8e83					_NCLoopBack:
.8e83	20 4d a6	jsr $a64d			jsr 	STKLoadCodePosition 		; loop back
.8e86	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/commands/gcommand.asm

.8e87					RectangleCommand:
.8e87	a9 24		lda #$24			lda 	#18*2 						; frame rectangle
.8e89	80 02		bra $8e8d			bra 	ShapeDrawCmd
.8e8b					CircleCommand:
.8e8b	a9 28		lda #$28			lda 	#20*2 						; framed circle
.8e8d					ShapeDrawCmd:
.8e8d	20 1b 8f	jsr $8f1b			jsr 	RunGraphicsCommand
.8e90					ShapeDraw:
.8e90	0d 64 06	ora $0664			ora 	gxFillSolid  				; adjust AXY for solid fill.
.8e93	4c 0f 8f	jmp $8f0f			jmp 	ExecuteGraphicCommand	 	; and complete
.8e96					SpriteCommand:
.8e96	a2 00		ldx #$00			ldx 	#0
.8e98	20 dc a4	jsr $a4dc			jsr 	Evaluate8BitInteger 		; get image number.
.8e9b	5a		phy				phy
.8e9c	a9 0e		lda #$0e			lda 	#7*2 						; use that image.
.8e9e	ae 08 04	ldx $0408			ldx 	NSMantissa0
.8ea1	e0 40		cpx #$40			cpx 	#64 						; 0-63 only
.8ea3	b0 0d		bcs $8eb2			bcs 	_SCRange
.8ea5	a0 ff		ldy #$ff			ldy 	#255
.8ea7	20 85 80	jsr $8085			jsr 	GXGraphicDraw
.8eaa	a9 32		lda #$32			lda 	#25*2
.8eac	7a		ply				ply
.8ead	20 1b 8f	jsr $8f1b			jsr 	RunGraphicsCommand
.8eb0	80 5d		bra $8f0f			bra 	ExecuteGraphicCommand
.8eb2					_SCRange:
.8eb2	4c 69 b3	jmp $b369			jmp 	RangeError
.8eb5					ImageCommand:
.8eb5	a2 00		ldx #$00			ldx 	#0
.8eb7	20 dc a4	jsr $a4dc			jsr 	Evaluate8BitInteger 		; get image number.
.8eba	20 1b 8f	jsr $8f1b			jsr 	RunGraphicsCommand
.8ebd					ImageRunDraw:
.8ebd	09 20		ora #$20			ora 	#16*2 						; move cursor
.8ebf	20 85 80	jsr $8085			jsr 	GXGraphicDraw
.8ec2	ad 6a 06	lda $066a			lda 	gxDrawScale
.8ec5	0a		asl a				asl 	a
.8ec6	0a		asl a				asl 	a
.8ec7	0a		asl a				asl 	a
.8ec8	a8		tay				tay
.8ec9	a9 0c		lda #$0c			lda 	#6*2 						; image drawing
.8ecb	ae 08 04	ldx $0408			ldx 	NSMantissa0
.8ece	20 85 80	jsr $8085			jsr 	GXGraphicDraw
.8ed1	60		rts				rts
.8ed2					TextCommand:
.8ed2	a2 00		ldx #$00			ldx 	#0
.8ed4	20 8f a4	jsr $a48f			jsr 	EvaluateString 				; get text
.8ed7	20 1b 8f	jsr $8f1b			jsr 	RunGraphicsCommand
.8eda					TextRunDraw:
.8eda	09 20		ora #$20			ora 	#16*2 						; move cursor
.8edc	20 85 80	jsr $8085			jsr 	GXGraphicDraw
.8edf	a0 00		ldy #$00			ldy 	#0
.8ee1					_IRDLoop:
.8ee1	ad 10 04	lda $0410			lda 	NSMantissa1 				; access character
.8ee4	85 37		sta $37				sta 	zTemp0+1
.8ee6	ad 08 04	lda $0408			lda 	NSMantissa0
.8ee9	85 36		sta $36				sta 	zTemp0
.8eeb	b1 36		lda ($36),y			lda 	(zTemp0),y
.8eed	f0 13		beq $8f02			beq 	_IRDExit
.8eef	5a		phy				phy									; save string pos
.8ef0	48		pha				pha 								; save char
.8ef1	ad 6a 06	lda $066a			lda 	gxDrawScale 				; get scale
.8ef4	0a		asl a				asl 	a
.8ef5	0a		asl a				asl 	a
.8ef6	0a		asl a				asl 	a
.8ef7	a8		tay				tay
.8ef8	a9 0a		lda #$0a			lda 	#5*2 						; char drawing
.8efa	fa		plx				plx 								; char to draw
.8efb	20 85 80	jsr $8085			jsr 	GXGraphicDraw
.8efe	7a		ply				ply 								; restore string pos
.8eff	c8		iny				iny
.8f00	90 df		bcc $8ee1			bcc 	_IRDLoop 					; go back if no error.
.8f02					_IRDExit:
.8f02	60		rts				rts
.8f03					PlotCommand:
.8f03	a9 30		lda #$30			lda 	#24*2 						; command ID to use
.8f05	20 1b 8f	jsr $8f1b			jsr 	RunGraphicsCommand
.8f08	80 05		bra $8f0f			bra 	ExecuteGraphicCommand
.8f0a					LineCommand:
.8f0a	a9 22		lda #$22			lda 	#17*2 						; command ID to use
.8f0c	20 1b 8f	jsr $8f1b			jsr 	RunGraphicsCommand
.8f0f					ExecuteGraphicCommand:
.8f0f	0d 63 06	ora $0663			ora 	gxCommandID 				; make a full command
.8f12	20 85 80	jsr $8085			jsr 	GXGraphicDraw 				; draw it and exit
.8f15	b0 01		bcs $8f18			bcs 	_EGCError
.8f17	60		rts				rts
.8f18					_EGCError:
.8f18	4c 64 b3	jmp $b364			jmp 	SyntaxError
.8f1b					RunGraphicsCommand:
.8f1b	8d 63 06	sta $0663			sta 	gxCommandID					; save TODO graphics command.
.8f1e	68		pla				pla 								; pop handler address
.8f1f	fa		plx				plx
.8f20	1a		inc a				inc 	a
.8f21	d0 01		bne $8f24			bne 	_RGINoCarry
.8f23	e8		inx				inx
.8f24					_RGINoCarry:
.8f24	8d 68 06	sta $0668			sta 	GXHandler
.8f27	8e 69 06	stx $0669			stx 	GXHandler+1
.8f2a					_RGICommandLoop:
.8f2a	b1 30		lda ($30),y			lda 	(codePtr),y
.8f2c	c8		iny				iny
.8f2d	c9 ca		cmp #$ca			cmp 	#KWD_TO						; is it TO x,y
.8f2f	f0 53		beq $8f84			beq 	_RGI_To
.8f31	c9 b9		cmp #$b9			cmp 	#KWD_HERE 					; do it here.
.8f33	f0 55		beq $8f8a			beq 	_RGI_Here
.8f35	c9 80		cmp #$80			cmp 	#KWC_EOL 					; EOL or : , exit
.8f37	f0 3d		beq $8f76			beq 	_RGI_Exit
.8f39	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.8f3b	f0 39		beq $8f76			beq 	_RGI_Exit
.8f3d	c9 c0		cmp #$c0			cmp 	#KWD_OUTLINE 				; solid or outline
.8f3f	f0 3e		beq $8f7f			beq 	_RGI_Frame
.8f41	c9 c7		cmp #$c7			cmp 	#KWD_SOLID
.8f43	f0 33		beq $8f78			beq 	_RGI_Solid
.8f45	c9 aa		cmp #$aa			cmp 	#KWD_BY 					; by offset
.8f47	f0 4b		beq $8f94			beq 	_RGI_By
.8f49	c9 b5		cmp #$b5			cmp 	#KWD_FROM 					; from
.8f4b	f0 17		beq $8f64			beq 	_RGI_Move2
.8f4d	c9 b2		cmp #$b2			cmp 	#KWD_DIM 					; dim (set scale)
.8f4f	f0 65		beq $8fb6			beq 	_RGI_Dim
.8f51	c9 b0		cmp #$b0			cmp 	#KWD_COLOUR 				; colour or Color
.8f53	f0 78		beq $8fcd			beq 	_RGI_Colour
.8f55	c9 af		cmp #$af			cmp 	#KWD_COLOR
.8f57	f0 74		beq $8fcd			beq 	_RGI_Colour
.8f59	ae 63 06	ldx $0663			ldx 	gxCommandID
.8f5c	e0 32		cpx #$32			cpx 	#25*2 						; if not sprite
.8f5e	d0 03		bne $8f63			bne 	_RGI_Move 					; move
.8f60	4c f7 8f	jmp $8ff7			jmp		_RGI_SpriteInstructions
.8f63					_RGI_Move:
.8f63	88		dey				dey 								; unpick get.
.8f64					_RGI_Move2:
.8f64	20 1b 90	jsr $901b			jsr 	GCGetCoordinatePair 		; move to here
.8f67	20 42 90	jsr $9042			jsr 	GCCopyPairToStore 			; save
.8f6a	5a		phy				phy
.8f6b	20 38 90	jsr $9038			jsr 	GCLoadAXY 					; load in
.8f6e	09 20		ora #$20			ora 	#16*2 						; move there
.8f70	20 85 80	jsr $8085			jsr 	GXGraphicDraw
.8f73	7a		ply				ply
.8f74	80 b4		bra $8f2a			bra 	_RGICommandLoop 			; and go round
.8f76					_RGI_Exit:
.8f76	88		dey				dey 								; unpick : / EOL
.8f77	60		rts				rts
.8f78					_RGI_Solid:
.8f78	a9 02		lda #$02			lda 	#2
.8f7a	8d 64 06	sta $0664			sta 	gxFillSolid
.8f7d	80 ab		bra $8f2a			bra 	_RGICommandLoop
.8f7f					_RGI_Frame:
.8f7f	9c 64 06	stz $0664			stz 	gxFillSolid
.8f82	80 a6		bra $8f2a			bra 	_RGICommandLoop
.8f84					_RGI_To:
.8f84	20 1b 90	jsr $901b			jsr 	GCGetCoordinatePair 		; get coordinate pair into slot #1,#2
.8f87	20 42 90	jsr $9042			jsr 	GCCopyPairToStore
.8f8a					_RGI_Here:
.8f8a	5a		phy				phy
.8f8b	20 38 90	jsr $9038			jsr 	GCLoadAXY 					; load it into AXY
.8f8e	20 f4 8f	jsr $8ff4			jsr 	_RGICallHandler 			; go do whatever it is.
.8f91	7a		ply				ply
.8f92	80 96		bra $8f2a			bra 	_RGICommandLoop 			; and go round
.8f94					_RGI_By:
.8f94	20 28 90	jsr $9028			jsr 	GCSignedCoordinatePair 		; get coordinate pair into slot #1,#2
.8f97	18		clc				clc
.8f98	ad 09 04	lda $0409			lda 	NSMantissa0+1 				; copy it into space.
.8f9b	6d 65 06	adc $0665			adc 	gxxPos
.8f9e	8d 65 06	sta $0665			sta 	gxXPos
.8fa1	ad 11 04	lda $0411			lda 	NSMantissa1+1
.8fa4	6d 66 06	adc $0666			adc 	gxxPos+1
.8fa7	8d 66 06	sta $0666			sta 	gxXPos+1
.8faa	ad 0a 04	lda $040a			lda 	NSMantissa0+2
.8fad	18		clc				clc
.8fae	6d 67 06	adc $0667			adc 	gxYPos
.8fb1	8d 67 06	sta $0667			sta 	gxYPos
.8fb4	80 d4		bra $8f8a			bra 	_RGI_Here
.8fb6					_RGI_Dim:
.8fb6	a2 01		ldx #$01			ldx	 	#1
.8fb8	20 dc a4	jsr $a4dc			jsr 	Evaluate8BitInteger
.8fbb	ad 09 04	lda $0409			lda 	NSMantissa0+1
.8fbe	c9 00		cmp #$00			cmp 	#0
.8fc0	f0 2f		beq $8ff1			beq 	_RGIRange
.8fc2	c9 09		cmp #$09			cmp 	#8+1
.8fc4	b0 2b		bcs $8ff1			bcs		_RGIRange
.8fc6	3a		dec a				dec 	a
.8fc7	8d 6a 06	sta $066a			sta 	gxDrawScale
.8fca	4c 2a 8f	jmp $8f2a			jmp 	_RGICommandLoop
.8fcd					_RGI_Colour:
.8fcd	a2 01		ldx #$01			ldx 	#1 							; colour
.8fcf	20 dc a4	jsr $a4dc			jsr 	Evaluate8BitInteger
.8fd2	a2 02		ldx #$02			ldx 	#2 							; default zero for 2nd parameter
.8fd4	20 44 a5	jsr $a544			jsr 	NSMSetZero
.8fd7	b1 30		lda ($30),y			lda 	(codePtr),y
.8fd9	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; check , => mode.
.8fdb	d0 04		bne $8fe1			bne 	_RGICDefaultMode
.8fdd	c8		iny				iny
.8fde	20 dc a4	jsr $a4dc			jsr 	Evaluate8BitInteger
.8fe1					_RGICDefaultMode:
.8fe1	5a		phy				phy
.8fe2	a9 08		lda #$08			lda 	#4*2 						; set colour.
.8fe4	ae 09 04	ldx $0409			ldx 	NSMantissa0+1
.8fe7	ac 0a 04	ldy $040a			ldy 	NSMantissa0+2
.8fea	20 85 80	jsr $8085			jsr 	GXGraphicDraw
.8fed	7a		ply				ply
.8fee	4c 2a 8f	jmp $8f2a			jmp 	_RGICommandLoop 			; and go round
.8ff1					_RGIRange:
.8ff1	4c 69 b3	jmp $b369			jmp 	RangeError
.8ff4					_RGICallHandler:
.8ff4	6c 68 06	jmp ($0668)			jmp 	(GXHandler)
.8ff7					_RGI_SpriteInstructions:
.8ff7	c9 be		cmp #$be			cmp 	#KWD_OFF
.8ff9	f0 07		beq $9002			beq 	_RGISpriteOff
.8ffb	c9 ba		cmp #$ba			cmp 	#KWD_IMAGE
.8ffd	f0 11		beq $9010			beq 	_RGISetImage
.8fff	4c 63 8f	jmp $8f63			jmp 	_RGI_Move
.9002					_RGISpriteOff:
.9002	5a		phy				phy
.9003	a0 01		ldy #$01			ldy 	#1
.9005	a2 00		ldx #$00			ldx 	#0
.9007					_RGIDoCommandLoop:
.9007	a9 10		lda #$10			lda 	#8*2
.9009	20 85 80	jsr $8085			jsr 	GXGraphicDraw
.900c	7a		ply				ply
.900d	4c 2a 8f	jmp $8f2a			jmp 	_RGICommandLoop
.9010					_RGISetImage:
.9010	a2 01		ldx #$01			ldx 	#1
.9012	20 dc a4	jsr $a4dc			jsr 	Evaluate8BitInteger
.9015	5a		phy				phy
.9016	aa		tax				tax
.9017	a0 00		ldy #$00			ldy 	#0
.9019	80 ec		bra $9007			bra 	_RGIDoCommandLoop
.901b					GCGetCoordinatePair:
.901b	a2 01		ldx #$01			ldx 	#1
.901d	20 bc a4	jsr $a4bc			jsr 	Evaluate16BitInteger
.9020	20 86 ad	jsr $ad86			jsr 	CheckComma
.9023	e8		inx				inx
.9024	20 bc a4	jsr $a4bc			jsr 	Evaluate16BitInteger
.9027	60		rts				rts
.9028					GCSignedCoordinatePair:
.9028	a2 01		ldx #$01			ldx 	#1
.902a	20 c8 a4	jsr $a4c8			jsr 	Evaluate16BitIntegerSigned
.902d	20 86 ad	jsr $ad86			jsr 	CheckComma
.9030	e8		inx				inx
.9031	20 c8 a4	jsr $a4c8			jsr 	Evaluate16BitIntegerSigned
.9034	60		rts				rts
.9035					_GCCPRange:
.9035	4c 69 b3	jmp $b369			jmp 	RangeError
.9038					GCLoadAXY:
.9038	ad 66 06	lda $0666			lda 	gxXPos+1
.903b	ae 65 06	ldx $0665			ldx 	gxXPos
.903e	ac 67 06	ldy $0667			ldy 	gxYPos
.9041	60		rts				rts
.9042					GCCopyPairToStore:
.9042	ad 09 04	lda $0409			lda 	NSMantissa0+1 				; copy it into space.
.9045	8d 65 06	sta $0665			sta 	gxXPos
.9048	ad 11 04	lda $0411			lda 	NSMantissa1+1
.904b	8d 66 06	sta $0666			sta 	gxXPos+1
.904e	ad 0a 04	lda $040a			lda 	NSMantissa0+2
.9051	8d 67 06	sta $0667			sta 	gxYPos
.9054	60		rts				rts
.0663					gxCommandID:
>0663							.fill 	1
.0664					gxFillSolid:
>0664							.fill 	1
.0665					gxXPos:
>0665							.fill 	2
.0667					gxYPos:
>0667							.fill 	1
.0668					gxHandler:
>0668							.fill 	2
.066a					gxDrawScale:
>066a							.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/commands/gcontrol.asm

.9055					BitmapCtrl:
.9055	b1 30		lda ($30),y			lda 	(codePtr),y
.9057	c8		iny				iny
.9058	a2 01		ldx #$01			ldx 	#1
.905a	c9 bf		cmp #$bf			cmp 	#KWD_ON
.905c	f0 11		beq $906f			beq 	BitmapSwitch
.905e	ca		dex				dex
.905f	c9 be		cmp #$be			cmp 	#KWD_OFF
.9061	f0 0c		beq $906f			beq 	BitmapSwitch
.9063	20 dc a4	jsr $a4dc			jsr 	Evaluate8BitInteger 		; get the colour
.9066	5a		phy				phy
.9067	aa		tax				tax
.9068	a9 06		lda #$06			lda 	#3*2						; clear to that colour
.906a	20 85 80	jsr $8085			jsr 	GXGraphicDraw
.906d	7a		ply				ply
.906e	60		rts				rts
.906f					BitmapSwitch:
.906f	5a		phy				phy
.9070	a0 00		ldy #$00			ldy 	#0 							; gfx 1,on/off,0
.9072	a9 02		lda #$02			lda 	#1*2
.9074	20 85 80	jsr $8085			jsr 	GXGraphicDraw
.9077	a9 08		lda #$08			lda 	#4*2 						; set colour to $FF
.9079	a0 00		ldy #$00			ldy 	#0
.907b	a2 ff		ldx #$ff			ldx 	#$FF
.907d	20 85 80	jsr $8085			jsr 	GXGraphicDraw
.9080	9c 64 06	stz $0664			stz 	gxFillSolid
.9083	9c 65 06	stz $0665			stz 	gxXPos
.9086	9c 66 06	stz $0666			stz 	gxXPos+1
.9089	9c 67 06	stz $0667			stz 	gxYPos
.908c	9c 6a 06	stz $066a			stz 	gxDrawScale
.908f	a9 20		lda #$20			lda 	#16*2 						; home cursor
.9091	a2 00		ldx #$00			ldx 	#0
.9093	a0 00		ldy #$00			ldy 	#0
.9095	20 85 80	jsr $8085			jsr 	GXGraphicDraw
.9098	7a		ply				ply
.9099	60		rts				rts
.909a					SpritesCtrl:
.909a	b1 30		lda ($30),y			lda 	(codePtr),y
.909c	c8		iny				iny
.909d	a2 01		ldx #$01			ldx 	#1
.909f	c9 bf		cmp #$bf			cmp 	#KWD_ON
.90a1	f0 08		beq $90ab			beq 	SpriteSwitch
.90a3	ca		dex				dex
.90a4	c9 be		cmp #$be			cmp 	#KWD_OFF
.90a6	f0 03		beq $90ab			beq 	SpriteSwitch
.90a8	4c 64 b3	jmp $b364			jmp 	SyntaxError
.90ab					SpriteSwitch:
.90ab	5a		phy				phy
.90ac	a0 00		ldy #$00			ldy 	#0 							; gfx 2,on/off,0
.90ae	a9 04		lda #$04			lda 	#2*2
.90b0	20 85 80	jsr $8085			jsr 	GXGraphicDraw
.90b3	7a		ply				ply
.90b4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/commands/gfx.asm

.90b5					GfxCommand:
.90b5	a2 00		ldx #$00			ldx 	#0
.90b7	20 dc a4	jsr $a4dc			jsr 	Evaluate8BitInteger 		; command
.90ba	20 86 ad	jsr $ad86			jsr 	CheckComma
.90bd	e8		inx				inx
.90be	20 bc a4	jsr $a4bc			jsr 	Evaluate16BitInteger 		; X
.90c1	20 86 ad	jsr $ad86			jsr 	CheckComma
.90c4	e8		inx				inx
.90c5	20 dc a4	jsr $a4dc			jsr 	Evaluate8BitInteger 		; Y
.90c8	ad 11 04	lda $0411			lda 	NSMantissa1+1  				; shift bit 0 of X into CS, should now be zero
.90cb	4a		lsr a				lsr 	a
.90cc	d0 16		bne $90e4			bne 	_GfxError
.90ce	2e 08 04	rol $0408			rol 	NSMantissa0 				; rotate into command
.90d1	b0 11		bcs $90e4			bcs 	_GfxError 					; bit 7 should have been zero
.90d3	5a		phy				phy 								; save pos
.90d4	ad 08 04	lda $0408			lda 	NSMantissa0 				; do the command
.90d7	ae 09 04	ldx $0409			ldx 	NSMantissa0+1
.90da	ac 0a 04	ldy $040a			ldy 	NSMantissa0+2
.90dd	20 85 80	jsr $8085			jsr 	GXGraphicDraw
.90e0	b0 02		bcs $90e4			bcs 	_GfxError
.90e2	7a		ply				ply 								; restore pos and exit.
.90e3	60		rts				rts
.90e4					_GfxError:
.90e4	4c 69 b3	jmp $b369			jmp 	RangeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/gosub.asm

.90e7					Command_GOSUB:
.90e7	a2 00		ldx #$00			ldx 	#0
.90e9	20 bc a4	jsr $a4bc			jsr 	Evaluate16BitInteger 		; line number in Stack.0
.90ec	a9 e3		lda #$e3			lda 	#STK_GOSUB+3
.90ee	20 f8 a5	jsr $a5f8			jsr 	StackOpen 					; create frame
.90f1	20 3c a6	jsr $a63c			jsr 	STKSaveCodePosition 		; save current position
.90f4	4c 0a 91	jmp $910a			jmp 	GotoStackX
.90f7					Command_RETURN:
.90f7	a9 e0		lda #$e0			lda 	#STK_GOSUB 					; check TOS is this
.90f9	a2 0e		ldx #$0e			ldx 	#ERRID_GOSUB 				; this error
.90fb	20 24 a6	jsr $a624			jsr 	StackCheckFrame
.90fe	20 4d a6	jsr $a64d			jsr 	STKLoadCodePosition 		; restore code position
.9101	20 16 a6	jsr $a616			jsr 	StackClose
.9104	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/goto.asm

.9105					GotoCommand:
.9105	a2 00		ldx #$00			ldx 	#0 							; GOTO where
.9107	20 bc a4	jsr $a4bc			jsr 	Evaluate16BitInteger
.910a					GotoStackX:
.910a	bd 10 04	lda $0410,x			lda  	NSMantissa1,x 				; put line # in XA. I'll keep this even though
.910d	48		pha				pha 								; it is slightly inefficient, just in cases.
.910e	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9111	fa		plx				plx
.9112	20 a3 a5	jsr $a5a3			jsr 	MemorySearch 				; transfer to line number AX.
.9115	90 05		bcc $911c			bcc 	_GotoError 					; not found, off end.
.9117	d0 03		bne $911c			bne 	_GotoError 					; not found exactly
.9119	4c 80 94	jmp $9480			jmp 	RunNewLine 					; and go straight to new line code.
.911c					_GotoError:
.911c	a9 0d		lda #$0d		lda	#13
.911e	4c 11 99	jmp $9911		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/if.asm

.9121					IfCommand:
.9121	a2 00		ldx #$00			ldx 	#0 							; If what.
.9123	20 84 a4	jsr $a484			jsr 	EvaluateNumber
.9126	b1 30		lda ($30),y			lda 	(codePtr),y
.9128	c9 a7		cmp #$a7			cmp 	#KWD_THEN  					; could be THEN <stuff> or GOTO
.912a	d0 0a		bne $9136			bne 	_IFStructured
.912c	c8		iny				iny 								; consume THEN
.912d	20 74 a5	jsr $a574			jsr 	NSMIsZero 					; is it zero
.9130	f0 01		beq $9133			beq 	_IfFail 					; if fail, go to next line
.9132	60		rts				rts 								; if THEN just continue
.9133					_IfFail:
.9133	4c e5 94	jmp $94e5			jmp 	EOLCommand
.9136					_IfStructured:
.9136	20 74 a5	jsr $a574			jsr 	NSMIsZero 					; is it zero
.9139	d0 07		bne $9142			bne 	_IfExit 					; if not, then continue normally.
.913b	a9 b4		lda #$b4			lda 	#KWD_ELSE 					; look for else/endif
.913d	a2 a4		ldx #$a4			ldx 	#KWD_ENDIF
.913f	20 83 98	jsr $9883			jsr 	ScanForward 				; and run from there/
.9142					_IfExit:
.9142	60		rts				rts
.9143					ElseCode:
.9143	a9 a4		lda #$a4			lda 	#KWD_ENDIF 					; else is only run after the if clause succeeds
.9145	aa		tax				tax 								; so just go to the structure exit
.9146	20 83 98	jsr $9883			jsr 	ScanForward
.9149	60		rts				rts
.914a					EndIf:
.914a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/commands/joy.asm

.914b					UnaryJoyX:
.914b	18		clc				clc
.914c	80 01		bra $914f			bra 	JoyMain
.914e					UnaryJoyY:
.914e	38		sec				sec
.914f					JoyMain:
.914f	fa		plx				plx 								; get pos
.9150	08		php				php 								; save carry (set for Y)
.9151	20 dc a4	jsr $a4dc			jsr 	Evaluate8BitInteger 		; ignore the parameter
.9154	20 7e ad	jsr $ad7e			jsr 	CheckRightBracket
.9157	20 60 b5	jsr $b560			jsr 	EXTReadController 			; read the controller.
.915a	28		plp				plp
.915b	90 02		bcc $915f			bcc 	_JMNoShift 					; if Y then shift bits 3,2 -> 1,0
.915d	4a		lsr a				lsr 	a
.915e	4a		lsr a				lsr 	a
.915f					_JMNoShift:
.915f	4a		lsr a				lsr 	a 							; if bit 0 set then right/down e.g. +1
.9160	b0 0a		bcs $916c			bcs 	_JMIsRight
.9162	4a		lsr a				lsr 	a 							; if bit 1 set then left/up e.g. -1
.9163	b0 04		bcs $9169			bcs 	_JMIsLeft
.9165	20 44 a5	jsr $a544			jsr 	NSMSetZero 					; zero result
.9168	60		rts				rts
.9169					_JMIsLeft:
.9169	4c 7e 99	jmp $997e			jmp 	ReturnTrue
.916c					_JMIsRight:
.916c	a9 01		lda #$01			lda 	#1
.916e	20 46 a5	jsr $a546			jsr 	NSMSetByte
.9171	60		rts				rts
.9172					UnaryJoyB:
.9172	fa		plx				plx 								; get pos
.9173	20 dc a4	jsr $a4dc			jsr 	Evaluate8BitInteger 		; ignore the parameter
.9176	20 7e ad	jsr $ad7e			jsr 	CheckRightBracket
.9179	20 60 b5	jsr $b560			jsr 	EXTReadController 			; read the controller.
.917c	4a		lsr a				lsr 	a
.917d	4a		lsr a				lsr 	a
.917e	4a		lsr a				lsr 	a
.917f	4a		lsr a				lsr 	a
.9180	29 01		and #$01			and 	#1
.9182	20 46 a5	jsr $a546			jsr 	NSMSetByte
.9185	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/let.asm

.9186					LetCommand:
.9186	a2 00		ldx #$00			ldx 	#0
.9188	b1 30		lda ($30),y			lda 	(codePtr),y
.918a	c9 10		cmp #$10			cmp 	#KWD_AT
.918c	d0 16		bne $91a4			bne 	_LCStandard
.918e	c8		iny				iny 								; skip equal
.918f	20 eb 9f	jsr $9feb			jsr 	EvaluateTerm 				; get a number
.9192	20 2f 9e	jsr $9e2f			jsr 	Dereference 				; dereference it
.9195	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check integer
.9198	49 20		eor #$20			eor 	#NSBIsReference	 			; toggle reference
.919a	9d 00 04	sta $0400,x			sta 	NSStatus,x
.919d	29 20		and #$20			and 	#NSBIsReference 			; if it is now a reference, continue
.919f	d0 10		bne $91b1			bne 	_LCMain
.91a1	4c 6e b3	jmp $b36e			jmp 	TypeError 					; was a reference before.
.91a4					_LCStandard:
.91a4	ad 02 9d	lda $9d02			lda 	PrecedenceLevel+"*"			; precedence > this
.91a7	20 1c 9d	jsr $9d1c			jsr 	EvaluateExpressionAtPrecedence
.91aa	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; is it a reference to an array
.91ad	c9 38		cmp #$38			cmp		#NSTProcedure+NSBIsReference
.91af	f0 0e		beq $91bf			beq 	_LetGoProc 					; it's a procedure call.
.91b1					_LCMain:
.91b1	a9 3d		lda #$3d			lda 	#"=" 						; check =
.91b3	20 8e ad	jsr $ad8e			jsr 	CheckNextA
.91b6	e8		inx				inx 								; RHS
.91b7	20 7b a4	jsr $a47b			jsr 	EvaluateValue
.91ba	ca		dex				dex
.91bb	20 c2 91	jsr $91c2			jsr 	AssignVariable
.91be	60		rts				rts
.91bf					_LetGoProc:
.91bf	4c 5b 93	jmp $935b			jmp 	CallProcedure
.91c2					AssignVariable:
.91c2	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check the string/number type bits match
.91c5	48		pha				pha 								; save a copy
.91c6	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.91c9	29 10		and #$10			and 	#NSBIsString
.91cb	d0 0b		bne $91d8			bne 	_ASError
.91cd	68		pla				pla 								; get back
.91ce	29 10		and #$10			and 	#NSBIsString 				; check type
.91d0	d0 03		bne $91d5			bne 	_ASString
.91d2	4c 57 9d	jmp $9d57			jmp 	AssignNumber
.91d5					_ASString:
.91d5	4c c5 9d	jmp $9dc5			jmp 	AssignString
.91d8					_ASError:
.91d8	4c 6e b3	jmp $b36e			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/list.asm

.91db					Command_List:
.91db	9c 0c 04	stz $040c			stz		NSMantissa0+4				; set the lower (slot 4) to 0 and upper (slot 7) to $FFFF
.91de	9c 14 04	stz $0414			stz 	NSMantissa1+4
.91e1	a9 ff		lda #$ff			lda 	#$FF
.91e3	8d 0f 04	sta $040f			sta 	NSMantissa0+7
.91e6	8d 17 04	sta $0417			sta 	NSMantissa1+7
.91e9	b1 30		lda ($30),y			lda 	(codePtr),y
.91eb	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.91ed	f0 1e		beq $920d			beq 	_CLSecond
.91ef	20 6b 92	jsr $926b			jsr 	CLIsDigit 					; if not digit, list all
.91f2	b0 24		bcs $9218			bcs 	_CLStart
.91f4	a2 04		ldx #$04			ldx 	#4 							; get 1st range into slot 4
.91f6	20 bc a4	jsr $a4bc			jsr 	Evaluate16BitInteger
.91f9	b1 30		lda ($30),y			lda 	(codePtr),y
.91fb	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.91fd	f0 0e		beq $920d			beq 	_CLSecond 					; if so go get it
.91ff	ad 0c 04	lda $040c			lda 	NSMantissa0+4 				; copy 4->7
.9202	8d 0f 04	sta $040f			sta 	NSMantissa0+7
.9205	ad 14 04	lda $0414			lda 	NSMantissa1+4
.9208	8d 17 04	sta $0417			sta 	NSMantissa1+7
.920b	80 0b		bra $9218			bra 	_CLStart
.920d					_CLSecond:
.920d	c8		iny				iny 								; consume comma
.920e	20 6b 92	jsr $926b			jsr 	CLIsDigit 					; digit found
.9211	b0 05		bcs $9218			bcs 	_CLStart 					; if not, continue listing
.9213	a2 07		ldx #$07			ldx 	#7 							; load 2nd range into slot 7
.9215	20 bc a4	jsr $a4bc			jsr 	Evaluate16BitInteger
.9218					_CLStart
.9218	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.921a	85 30		sta $30				sta 	codePtr
.921c	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.921e	85 31		sta $31				sta 	codePtr+1
.9220					_CLLoop:
.9220	20 5d b5	jsr $b55d			jsr 	EXTBreakCheck 				; break check
.9223	f0 30		beq $9255			beq 	_CLExit
.9225	b2 30		lda ($30)			lda 	(codePtr)
.9227	f0 2c		beq $9255			beq 	_CLExit
.9229	a2 04		ldx #$04			ldx 	#4 							; check range every time, line numbers aren't in order.
.922b	20 58 92	jsr $9258			jsr 	CLCompareLineNo
.922e	90 18		bcc $9248			bcc 	_CLNext
.9230	a2 07		ldx #$07			ldx 	#7
.9232	20 58 92	jsr $9258			jsr 	CLCompareLineNo
.9235	f0 02		beq $9239			beq 	_CLDoThisOne
.9237	b0 0f		bcs $9248			bcs 	_CLNext
.9239					_CLDoThisOne:
.9239	20 df 96	jsr $96df			jsr 	ListConvertLine 			; convert line into token Buffer
.923c	a2 04		ldx #$04			ldx 	#(tokenBuffer >> 8) 		; print that line
.923e	a9 a9		lda #$a9			lda 	#(tokenBuffer & $FF)
.9240	20 6a 99	jsr $996a			jsr 	PrintStringXA
.9243	a9 0d		lda #$0d			lda 	#13 						; new line
.9245	20 1c b5	jsr $b51c			jsr 	EXTPrintCharacter
.9248					_CLNext:
.9248	18		clc				clc
.9249	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.924b	65 30		adc $30				adc 	codePtr
.924d	85 30		sta $30				sta 	codePtr
.924f	90 02		bcc $9253			bcc 	_CREExit
.9251	e6 31		inc $31				inc 	codePtr+1
.9253					_CREExit:
.9253	80 cb		bra $9220			bra 	_CLLoop
.9255					_CLExit:
.9255	4c 4c 8b	jmp $8b4c			jmp 	WarmStart
.9258					CLCompareLineNo:
.9258	38		sec				sec
.9259	a0 01		ldy #$01			ldy 	#1
.925b	b1 30		lda ($30),y			lda 	(codePtr),y
.925d	fd 08 04	sbc $0408,x			sbc 	NSMantissa0,x
.9260	85 36		sta $36				sta 	zTemp0
.9262	c8		iny				iny
.9263	b1 30		lda ($30),y			lda 	(codePtr),y
.9265	fd 10 04	sbc $0410,x			sbc 	NSMantissa1,x
.9268	05 36		ora $36				ora 	zTemp0
.926a	60		rts				rts
.926b					CLIsDigit:
.926b	b1 30		lda ($30),y			lda 	(codePtr),y
.926d	c9 30		cmp #$30			cmp 	#"0"
.926f	90 03		bcc $9274			bcc	 	_CLIDExitFalse
.9271	c9 3a		cmp #$3a			cmp 	#"9"+1
.9273	60		rts				rts
.9274					_CLIDExitFalse:
.9274	38		sec				sec
.9275	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/local.asm

.9276					Command_LOCAL:
.9276	a2 00		ldx #$00			ldx 	#0 							; at level 0
.9278	20 84 92	jsr $9284			jsr 	LocaliseNextTerm 			; convert term to a local.
.927b	b1 30		lda ($30),y			lda 	(codePtr),y
.927d	c8		iny				iny
.927e	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.9280	f0 f4		beq $9276			beq 	Command_LOCAL
.9282	88		dey				dey 								; unpick pre-get
.9283	60		rts				rts
.9284					LocaliseNextTerm:
.9284	20 eb 9f	jsr $9feb			jsr 	EvaluateTerm 				; evaluate the term
.9287	bd 00 04	lda $0400,x			lda 	NSStatus,x
.928a	29 20		and #$20			and 	#NSBIsReference 			; check it is a reference
.928c	f0 69		beq $92f7			beq		_LNTError
.928e	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address of variable to zTemp0
.9291	85 36		sta $36				sta 	zTemp0
.9293	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9296	85 37		sta $37				sta  	zTemp0+1
.9298	bd 00 04	lda $0400,x			lda 	NSStatus,x
.929b	29 10		and #$10			and 	#NSBIsString
.929d	d0 22		bne $92c1			bne 	_LNTPushString
.929f	5a		phy				phy
.92a0	a0 00		ldy #$00			ldy 	#0 							; push 0 to 4 inclusive, the number values, on the stack, and zero them as you go.
.92a2					_LNTPushNumLoop:
.92a2	b1 36		lda ($36),y			lda		(zTemp0),y
.92a4	20 d6 a5	jsr $a5d6			jsr 	StackPushByte
.92a7	a9 00		lda #$00			lda 	#0
.92a9	91 36		sta ($36),y			sta 	(zTemp0),y
.92ab	c8		iny				iny
.92ac	c0 05		cpy #$05			cpy 	#5
.92ae	d0 f2		bne $92a2			bne 	_LNTPushNumLoop
.92b0	a5 36		lda $36				lda 	zTemp0 						; push the actual target address to write on the stack
.92b2	20 d6 a5	jsr $a5d6			jsr 	StackPushByte
.92b5	a5 37		lda $37				lda 	zTemp0+1
.92b7	20 d6 a5	jsr $a5d6			jsr 	StackPushByte
.92ba	a9 01		lda #$01			lda 	#STK_LOCALN 				; push local-number marker.
.92bc	20 d6 a5	jsr $a5d6			jsr 	StackPushByte
.92bf	7a		ply				ply
.92c0	60		rts				rts
.92c1					_LNTPushString:
.92c1	5a		phy				phy
.92c2	b2 36		lda ($36)			lda 	(zTemp0) 					; put address of string in zTemp1
.92c4	85 38		sta $38				sta 	zTemp1
.92c6	a0 01		ldy #$01			ldy 	#1
.92c8	b1 36		lda ($36),y			lda 	(zTemp0),y
.92ca	85 39		sta $39				sta 	zTemp1+1
.92cc	a0 00		ldy #$00			ldy 	#0 							; output string
.92ce	c9 00		cmp #$00			cmp 	#0 							; if not assigned strin
.92d0	f0 0a		beq $92dc			beq 	_LNTStringOut
.92d2					_LNTPushStrLoop:
.92d2	b1 38		lda ($38),y			lda 	(zTemp1),y
.92d4	f0 06		beq $92dc			beq 	_LNTStringOut
.92d6	20 d6 a5	jsr $a5d6			jsr 	StackPushByte
.92d9	c8		iny				iny
.92da	80 f6		bra $92d2			bra 	_LNTPushStrLoop
.92dc					_LNTStringOut:
.92dc	98		tya				tya									; output length
.92dd	20 d6 a5	jsr $a5d6			jsr 	StackPushByte
.92e0	a9 00		lda #$00			lda 	#0 							; clear original string.
.92e2	92 38		sta ($38)			sta 	(zTemp1)
.92e4	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; output address of the string record *not* the string itself
.92e7	20 d6 a5	jsr $a5d6			jsr 	StackPushByte
.92ea	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.92ed	20 d6 a5	jsr $a5d6			jsr 	StackPushByte
.92f0	a9 02		lda #$02			lda 	#STK_LOCALS 				; push local-string marker.
.92f2	20 d6 a5	jsr $a5d6			jsr 	StackPushByte
.92f5	7a		ply				ply
.92f6	60		rts				rts
.92f7					_LNTError:
.92f7	4c 64 b3	jmp $b364			jmp 	SyntaxError
.ad25					LocalPopValue:
.ad25	20 ef a5	jsr $a5ef			jsr 	StackPopByte
.ad28	c9 01		cmp #$01			cmp 	#STK_LOCALN 				; if not local-N
.ad2a	d0 17		bne $ad43			bne 	_LPVString
.ad2c	20 ef a5	jsr $a5ef			jsr 	StackPopByte 				; address
.ad2f	85 37		sta $37				sta 	zTemp0+1
.ad31	20 ef a5	jsr $a5ef			jsr 	StackPopByte
.ad34	85 36		sta $36				sta 	zTemp0
.ad36	5a		phy				phy
.ad37	a0 04		ldy #$04			ldy 	#4 							; copy back
.ad39					_LPVNumberCopy:
.ad39	20 ef a5	jsr $a5ef			jsr 	StackPopByte
.ad3c	91 36		sta ($36),y			sta 	(zTemp0),y
.ad3e	88		dey				dey
.ad3f	10 f8		bpl $ad39			bpl 	_LPVNumberCopy
.ad41	7a		ply				ply 								; and complete
.ad42	60		rts				rts
.ad43					_LPVString:
.ad43	20 ef a5	jsr $a5ef			jsr 	StackPopByte 				; address of record => zTemp0
.ad46	85 37		sta $37				sta 	zTemp0+1
.ad48	20 ef a5	jsr $a5ef			jsr 	StackPopByte
.ad4b	85 36		sta $36				sta 	zTemp0
.ad4d	5a		phy				phy
.ad4e	b2 36		lda ($36)			lda 	(zTemp0) 					; address to write string to => zTemp1
.ad50	85 38		sta $38				sta 	zTemp1
.ad52	a0 01		ldy #$01			ldy 	#1
.ad54	b1 36		lda ($36),y			lda 	(zTemp0),y
.ad56	85 39		sta $39				sta 	zTemp1+1
.ad58	20 ef a5	jsr $a5ef			jsr 	StackPopByte 				; # to get => y
.ad5b	a8		tay				tay
.ad5c	a5 39		lda $39				lda 	zTemp1+1 					; if no target (e.g. was "" originally) exit
.ad5e	f0 0e		beq $ad6e			beq 	_LPVStringCopied
.ad60	a9 00		lda #$00			lda 	#0 							; NULL on end
.ad62	91 38		sta ($38),y			sta 	(zTemp1),y
.ad64					_LPVStringCopy:
.ad64	88		dey				dey
.ad65	30 07		bmi $ad6e			bmi 	_LPVStringCopied
.ad67	20 ef a5	jsr $a5ef			jsr 	StackPopByte
.ad6a	91 38		sta ($38),y			sta 	(zTemp1),y
.ad6c	80 f6		bra $ad64			bra 	_LPVStringCopy
.ad6e					_LPVStringCopied:
.ad6e	fa		plx				plx
.ad6f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/new.asm

.92fa					NewCommand:
.92fa	20 81 a5	jsr $a581			jsr 	MemoryNew
.92fd	9c 00 10	stz $1000			stz 	VariableSpace 				; erase all variables.
.9300	20 e5 8b	jsr $8be5			jsr 	ClearCommand 				; clear everything.
.9303	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/print.asm

.9304					Command_Print:
.9304	18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.9305					_CPLoop:
.9305	08		php				php 								; save last action flag
.9306	b1 30		lda ($30),y			lda 	(codePtr),y
.9308	c9 80		cmp #$80			cmp  	#KWC_EOL 					; end of line or colon, exit now.
.930a	f0 46		beq $9352			beq 	_CPExit
.930c	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.930e	f0 42		beq $9352			beq 	_CPExit
.9310	68		pla				pla 								; throw last action flag
.9311	b1 30		lda ($30),y			lda 	(codePtr),y
.9313	c8		iny				iny
.9314	c9 3b		cmp #$3b			cmp 	#KWD_SEMICOLON				; is it a semicolon
.9316	f0 37		beq $934f			beq 	_CPContinueWithSameLine
.9318	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; comma
.931a	f0 2e		beq $934a			beq 	_CPTab
.931c	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; apostrophe (new line)
.931e	f0 26		beq $9346			beq 	_CPNewLine
.9320	88		dey				dey 								; undo the get.
.9321	a2 00		ldx #$00			ldx 	#0
.9323	20 7b a4	jsr $a47b			jsr 	EvaluateValue 				; get a value into slot 0
.9326	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; is it a number
.9329	29 10		and #$10			and 	#NSBIsString
.932b	f0 0b		beq $9338			beq 	_CPNumber
.932d	ae 10 04	ldx $0410			ldx 	NSMantissa1 				; string, print the text.
.9330	ad 08 04	lda $0408			lda 	NSMantissa0
.9333	20 6a 99	jsr $996a			jsr 	PrintStringXA
.9336	80 cc		bra $9304			bra 	Command_Print 				; loop round clearing carry so NL if end
.9338					_CPNumber:
.9338	a9 05		lda #$05			lda 	#5 							; maximum decimals
.933a	20 51 a3	jsr $a351			jsr 	ConvertNumberToString 		; convert to string
.933d	a2 06		ldx #$06			ldx 	#DecimalBuffer >> 8
.933f	a9 19		lda #$19			lda 	#DecimalBuffer & $FF
.9341	20 6a 99	jsr $996a			jsr 	PrintStringXA
.9344	80 be		bra $9304			bra 	Command_Print 				; loop round clearing carry so NL if end
.9346					_CPNewLine:
.9346	a9 0d		lda #$0d			lda 	#13
.9348	80 02		bra $934c			bra 	_CPPrintChar
.934a					_CPTab:
.934a	a9 09		lda #$09			lda 	#9 							; print TAB
.934c					_CPPrintChar:
.934c	20 1c b5	jsr $b51c			jsr 	EXTPrintCharacter
.934f					_CPContinueWithSameLine:
.934f	38		sec				sec 								; loop round with carry set, which
.9350	80 b3		bra $9305			bra 	_CPLoop 					; will inhibit final CR
.9352					_CPExit:
.9352	28		plp				plp 								; get last action flag
.9353	b0 05		bcs $935a			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.9355	a9 0d		lda #$0d			lda 	#13 						; print new line
.9357	20 1c b5	jsr $b51c			jsr 	EXTPrintCharacter
.935a					_CPExit2:
.935a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/procedure.asm

=2					ParameterStackPos = 2
.935b					CallProcedure:
.935b	a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start storing parameters at 2.
.935d	b1 30		lda ($30),y			lda 	(codePtr),y
.935f	c9 29		cmp #$29			cmp 	#KWD_RPAREN
.9361	f0 0c		beq $936f			beq 	_CPEndParam
.9363					_CPParamLoop:
.9363	20 7b a4	jsr $a47b			jsr 	EvaluateValue 				; get parameter onto stack
.9366	e8		inx				inx 								; bump next stack
.9367	b1 30		lda ($30),y			lda 	(codePtr),y
.9369	c8		iny				iny
.936a	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if comma, go back and try again.
.936c	f0 f5		beq $9363			beq 	_CPParamLoop
.936e	88		dey				dey 								; unpick.
.936f					_CPEndParam:
.936f	8e 96 04	stx $0496			stx 	LastParameter 				; save the last parameters index.
.9372	c8		iny				iny									; skip right bracket
.9373	a9 b3		lda #$b3			lda 	#STK_PROC+3 				; allocate 6 bytes on the return stack.
.9375	20 f8 a5	jsr $a5f8			jsr 	StackOpen
.9378	20 3c a6	jsr $a63c			jsr 	STKSaveCodePosition 		; save loop position
.937b	ad 08 04	lda $0408			lda 	NSMantissa0 				; copy variable (e.g. procedure) address to zTemp0
.937e	85 36		sta $36				sta 	zTemp0 						; this is the DATA not the RECORD
.9380	ad 10 04	lda $0410			lda 	NSMantissa1
.9383	85 37		sta $37				sta 	zTemp0+1
.9385	a0 01		ldy #$01			ldy 	#1 							; copy code address back.
.9387	b2 36		lda ($36)			lda 	(zTemp0)
.9389	85 30		sta $30				sta 	safePtr
.938b	b1 36		lda ($36),y			lda 	(zTemp0),y
.938d	85 31		sta $31				sta 	safePtr+1
.938f	c8		iny				iny
.9390	b1 36		lda ($36),y			lda 	(zTemp0),y
.9392	85 32		sta $32				sta 	safePtr+2
.9394	c8		iny				iny
.9395	b1 36		lda ($36),y			lda 	(zTemp0),y
.9397	85 33		sta $33				sta 	safePtr+3
.9399	c8		iny				iny 								; get Y offset -> Y
.939a	b1 36		lda ($36),y			lda 	(zTemp0),y
.939c	a8		tay				tay
.939d	a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start position of parameters
.939f	ec 96 04	cpx $0496			cpx	 	LastParameter 				; check no parameters at the start
.93a2	f0 13		beq $93b7			beq 	_ParamExit 					; if so, exit.
.93a4					_ParamExtract:
.93a4	ca		dex				dex 								; put a local term on the level before
.93a5	20 84 92	jsr $9284			jsr 	LocaliseNextTerm			; also pushes original param value to basic stack
.93a8	20 c2 91	jsr $91c2			jsr 	AssignVariable 				; assign stacked value to the variable.
.93ab	e8		inx				inx 								; advance to next parameter to do.
.93ac	e8		inx				inx
.93ad	ec 96 04	cpx $0496			cpx 	LastParameter 				; are we done ?
.93b0	f0 05		beq $93b7			beq 	_ParamExit
.93b2	20 86 ad	jsr $ad86			jsr 	CheckComma 					; comma seperating parameters
.93b5	80 ed		bra $93a4			bra 	_ParamExtract
.93b7					_ParamExit:
.93b7	20 7e ad	jsr $ad7e			jsr 	CheckRightBracket 			; check )
.93ba	60		rts				rts 								; and continue from here
.ad70					Command_ENDPROC:
.ad70	a9 b0		lda #$b0			lda 	#STK_PROC 					; check TOS is this
.ad72	a2 14		ldx #$14			ldx 	#ERRID_PROC
.ad74	20 24 a6	jsr $a624			jsr 	StackCheckFrame
.ad77	20 4d a6	jsr $a64d			jsr 	STKLoadCodePosition 		; restore code position
.ad7a	20 16 a6	jsr $a616			jsr 	StackClose
.ad7d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/read.asm

.93bb					Command_Read:
.93bb	a2 00		ldx #$00			ldx 	#0 							; evaluate the term which is the var/array element to assign
.93bd	20 eb 9f	jsr $9feb			jsr 	EvaluateTerm
.93c0	bd 00 04	lda $0400,x			lda 	NSStatus,x
.93c3	29 20		and #$20			and 	#NSBIsReference				; get status byte on stack, identifies int, float, string.
.93c5	f0 4a		beq $9411			beq 	_CRSyntax 					; check reference (bit 0)
.93c7	20 5a 94	jsr $945a			jsr 	SwapDataCodePtrs 			; swap code and data
.93ca	ad 9c 04	lda $049c			lda 	inDataStatement 			; if in a data statement, we don't need to search
.93cd	d0 20		bne $93ef			bne 	_CRContinueData
.93cf					_CRKeepSearching:
.93cf	a9 b1		lda #$b1			lda 	#KWD_DATA 					; scan for instruction
.93d1	aa		tax				tax
.93d2	20 83 98	jsr $9883			jsr 	ScanForward
.93d5	c9 b1		cmp #$b1			cmp 	#KWD_DATA 					; found data ?
.93d7	f0 16		beq $93ef			beq 	_CRHaveData 				; found it
.93d9	18		clc				clc
.93da	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.93dc	65 30		adc $30				adc 	codePtr
.93de	85 30		sta $30				sta 	codePtr
.93e0	90 02		bcc $93e4			bcc 	_CREExit
.93e2	e6 31		inc $31				inc 	codePtr+1
.93e4					_CREExit:
.93e4	a0 03		ldy #$03			ldy 	#3 							; start of line.
.93e6	b2 30		lda ($30)			lda 	(codePtr)
.93e8	d0 e5		bne $93cf			bne 	_CRKeepSearching
.93ea	a9 0b		lda #$0b		lda	#11
.93ec	4c 11 99	jmp $9911		jmp	ErrorHandler
.93ef					_CRHaveData:
.93ef					_CRContinueData:
.93ef	a2 01		ldx #$01			ldx 	#1
.93f1	20 7b a4	jsr $a47b			jsr 	EvaluateValue 				; evaluate value into slot # 1
.93f4	ca		dex				dex
.93f5	20 c2 91	jsr $91c2			jsr		AssignVariable 				; do the assignment
.93f8	9c 9c 04	stz $049c			stz 	inDataStatement 			; clear in data
.93fb	b1 30		lda ($30),y			lda 	(codePtr),y
.93fd	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not, end of data statement
.93ff	d0 04		bne $9405			bne 	_CRSwapBack
.9401	c8		iny				iny 								; consume comma
.9402	ee 9c 04	inc $049c			inc 	inDataStatement 			; set in data statement currently.
.9405					_CRSwapBack:
.9405	20 5a 94	jsr $945a			jsr 	SwapDataCodePtrs			; swap them back.
.9408	b1 30		lda ($30),y			lda 	(codePtr),y
.940a	c8		iny				iny
.940b	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.940d	f0 ac		beq $93bb			beq 	Command_Read 				; if so go round again.
.940f	88		dey				dey 								; unpick get.
.9410	60		rts				rts
.9411					_CRSyntax:
.9411	4c 64 b3	jmp $b364			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/rem.asm

.9414					RemCommand:
.9414	b1 30		lda ($30),y			lda 	(codePtr),y
.9416	c9 ff		cmp #$ff			cmp 	#KWC_STRING
.9418	d0 06		bne $9420			bne 	_RMExit
.941a	c8		iny				iny
.941b	98		tya				tya
.941c	38		sec				sec
.941d	71 30		adc ($30),y			adc 	(codePtr),y
.941f	a8		tay				tay
.9420					_RMExit:
.9420	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/repeat.asm

.9421					Command_REPEAT:
.9421	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; allocate 6 bytes on the return stack.
.9423	20 f8 a5	jsr $a5f8			jsr 	StackOpen
.9426	20 3c a6	jsr $a63c			jsr 	STKSaveCodePosition 		; save loop position
.9429	60		rts				rts
.942a					Command_UNTIL:
.942a	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; check REPEAT is TOS
.942c	a2 0f		ldx #$0f			ldx 	#ERRID_REPEAT 				; this error
.942e	20 24 a6	jsr $a624			jsr 	StackCheckFrame
.9431	a2 00		ldx #$00			ldx 	#0
.9433	20 84 a4	jsr $a484			jsr 	EvaluateNumber 				; work out the number
.9436	20 74 a5	jsr $a574			jsr 	NSMIsZero 					; check if zero
.9439	f0 04		beq $943f			beq 	_CULoopBack 				; if so keep looping
.943b	20 16 a6	jsr $a616			jsr 	StackClose		 			; return
.943e	60		rts				rts
.943f					_CULoopBack:
.943f	20 4d a6	jsr $a64d			jsr 	STKLoadCodePosition 		; loop back
.9442	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/restore.asm

.9443					Command_Restore:
.9443	20 5a 94	jsr $945a			jsr 	SwapDataCodePtrs 			; swap code and data
.9446	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.9448	85 30		sta $30				sta 	codePtr
.944a	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.944c	85 31		sta $31				sta 	codePtr+1
.944e	20 5a 94	jsr $945a			jsr 	SwapDataCodePtrs 			; put them back
.9451	a9 03		lda #$03			lda 	#3 							; start at offset 3, e.g. first instruction of first line.
.9453	8d 9b 04	sta $049b			sta 	dataPointer+4
.9456	9c 9c 04	stz $049c			stz 	inDataStatement 			; not in data statement
.9459	60		rts				rts
.945a					SwapDataCodePtrs:
.945a	da		phx				phx
.945b	a2 03		ldx #$03			ldx 	#3 							; swap 32 bit code pointer over
.945d					_SDCPLoop:
.945d	b5 30		lda $30,x			lda 	safePtr,x
.945f	48		pha				pha
.9460	bd 97 04	lda $0497,x			lda 	dataPointer,x
.9463	95 30		sta $30,x			sta 	safePtr,x
.9465	68		pla				pla
.9466	9d 97 04	sta $0497,x			sta 	dataPointer,x
.9469	ca		dex				dex
.946a	10 f1		bpl $945d			bpl 	_SDCPLoop
.946c	ad 9b 04	lda $049b			lda 	dataPointer+4 				; swap Y position over.
.946f	8c 9b 04	sty $049b			sty 	dataPointer+4
.9472	a8		tay				tay
.9473	fa		plx				plx
.9474	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/run.asm

.9475					CommandRUN:
.9475	20 e5 8b	jsr $8be5			jsr 	ClearCommand 				; clear variable/stacks/etc.
.9478	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.947a	85 30		sta $30				sta 	codePtr
.947c	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.947e	85 31		sta $31				sta 	codePtr+1
.9480					RUNNewLine:
.9480	b2 30		lda ($30)			lda 	(codePtr)
.9482	f0 5e		beq $94e2			beq 	CRNoProgram         		; no then END.
.9484	a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack
.9486	9a		txs				txs
.9487					RUNCodePointerLine:
.9487	a0 02		ldy #$02			ldy 	#2 							; start of program
.9489					_CRIncMainLoop:
.9489	0e 93 04	asl $0493			asl 	breakCheck 					; clears 1 time in 8
.948c	d0 05		bne $9493			bne 	_CRNoBreakCheck
.948e	20 5d b5	jsr $b55d			jsr 	EXTBreakCheck 				; break check
.9491	f0 4a		beq $94dd			beq 	_CRBreak
.9493					_CRNoBreakCheck:
.9493	c8		iny				iny
.9494					_CRMainLoop:
.9494	9c 90 04	stz $0490			stz 	stringInitialised 			; clear the temporary string initialised flag.
.9497	b1 30		lda ($30),y			lda 	(codePtr),y
.9499	10 10		bpl $94ab			bpl 	_CRNotKeyword
.949b	c9 9f		cmp #$9f			cmp 	#KWC_LAST_UNARY+1 			; if after unary, legitimate command
.949d	b0 04		bcs $94a3			bcs 	_CRIsKeyword
.949f	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if unary, syntax error.
.94a1	b0 34		bcs $94d7			bcs		_CRSyntaxError
.94a3					_CRIsKeyword:
.94a3	c8		iny				iny 								; consume command
.94a4	0a		asl a				asl 	a 							; double losing the MSB which is '1' as tokens are $80-$FF
.94a5	aa		tax				tax 								; put in X for vector jump
.94a6	20 da 94	jsr $94da			jsr 	_CRCallVector0 				; call the vector - effectively jsr (vectortable,X)
.94a9	80 e9		bra $9494			bra 	_CRMainLoop 				; and loop round
.94ab					_CRNotKeyword:
.94ab	c9 3a		cmp #$3a			cmp 	#KWD_COLON 					; if a :, consume it and go round.
.94ad	f0 da		beq $9489			beq 	_CRIncMainLoop
.94af	c9 40		cmp #$40			cmp 	#$40 						; variable/call reference
.94b1	90 05		bcc $94b8			bcc 	_CRNotVariable
.94b3					_CRGoLet:
.94b3	20 86 91	jsr $9186			jsr 	LetCommand
.94b6	80 dc		bra $9494			bra 	_CRMainLoop
.94b8					_CRNotVariable:
.94b8	c9 10		cmp #$10			cmp 	#KWD_AT 					; handle @
.94ba	f0 f7		beq $94b3			beq 	_CRGoLet
.94bc	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; handle ? !
.94be	f0 f3		beq $94b3			beq 	_CRGoLet
.94c0	c9 21		cmp #$21			cmp 	#KWD_PLING
.94c2	f0 ef		beq $94b3			beq 	_CRGoLet
.94c4	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; handle ' (comment)
.94c6	f0 09		beq $94d1			beq 	_CRGoRem
.94c8	c9 2e		cmp #$2e			cmp 	#KWD_PERIOD 				; handle . (assembler label)
.94ca	d0 0b		bne $94d7			bne 	_CRSyntaxError
.94cc	20 85 8a	jsr $8a85			jsr 	LabelHere
.94cf	80 c3		bra $9494			bra 	_CRMainLoop
.94d1					_CRGoRem:
.94d1	c8		iny				iny
.94d2	20 14 94	jsr $9414			jsr 	RemCommand
.94d5	80 bd		bra $9494			bra 	_CRMainLoop
.94d7					_CRSyntaxError:
.94d7	4c 64 b3	jmp $b364			jmp 	SyntaxError
.94da					_CRCallVector0:
.94da	7c 86 95	jmp ($9586,x)			jmp 	(VectorSet0,x)
.94dd					_CRBreak:
.94dd	a9 01		lda #$01		lda	#1
.94df	4c 11 99	jmp $9911		jmp	ErrorHandler
.94e2					CRNoProgram:
.94e2	4c 08 8d	jmp $8d08			jmp 	EndCommand
.94e5					EOLCommand:
.94e5	18		clc				clc
.94e6	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.94e8	65 30		adc $30				adc 	codePtr
.94ea	85 30		sta $30				sta 	codePtr
.94ec	90 02		bcc $94f0			bcc 	_CREExit
.94ee	e6 31		inc $31				inc 	codePtr+1
.94f0					_CREExit:
.94f0	80 8e		bra $9480			bra 	RunNewLine
.94f2					Shift1Command:
.94f2	b1 30		lda ($30),y			lda 	(codePtr),y
.94f4	c8		iny				iny
.94f5	0a		asl a				asl 	a
.94f6	aa		tax				tax
.94f7	7c 1c 96	jmp ($961c,x)			jmp 	(VectorSet1,x)
.94fa					Shift2Command:
.94fa	b1 30		lda ($30),y			lda 	(codePtr),y
.94fc	c8		iny				iny
.94fd	0a		asl a				asl 	a
.94fe	aa		tax				tax
.94ff	7c 36 96	jmp ($9636,x)			jmp 	(VectorSet2,x)
.9502					Unused1:
.9502					Unused2:
.9502					Unused3:
.9502					Unused4:
.9502	4c 64 b3	jmp $b364			jmp 	SyntaxError
>9505							.align 2

;******  Processing file: ./common/commands/../generated/vectors.dat

.9506					VectorSetPunc:
>9506	bb 9a					.word	ShiftLeft                        ; $00 <<
>9508	b5 99					.word	BinaryCompareLessEqual           ; $01 <=
>950a	ab 99					.word	BinaryCompareNotEqual            ; $02 <>
>950c	64 b3					.word	SyntaxError                      ; $03 !!3
>950e	64 b3					.word	SyntaxError                      ; $04 ><
>9510	bf 99					.word	BinaryCompareGreaterEqual        ; $05 >=
>9512	be 9a					.word	ShiftRight                       ; $06 >>
>9514	64 b3					.word	SyntaxError                      ; $07 !!7
>9516	64 b3					.word	SyntaxError                      ; $08 !!8
>9518	64 b3					.word	SyntaxError                      ; $09 !!9
>951a	64 b3					.word	SyntaxError                      ; $0a !!10
>951c	64 b3					.word	SyntaxError                      ; $0b !!11
>951e	64 b3					.word	SyntaxError                      ; $0c !!12
>9520	64 b3					.word	SyntaxError                      ; $0d !!13
>9522	64 b3					.word	SyntaxError                      ; $0e !!14
>9524	64 b3					.word	SyntaxError                      ; $0f !!15
>9526	64 b3					.word	SyntaxError                      ; $10 @
>9528	64 b3					.word	SyntaxError                      ; $11 !!17
>952a	64 b3					.word	SyntaxError                      ; $12 !!18
>952c	64 b3					.word	SyntaxError                      ; $13 [
>952e	97 ad					.word	IntegerDivide                    ; $14 \
>9530	64 b3					.word	SyntaxError                      ; $15 ]
>9532	44 9c					.word	EorInteger                       ; $16 ^
>9534	64 b3					.word	SyntaxError                      ; $17 _
>9536	64 b3					.word	SyntaxError                      ; $18 `
>9538	64 b3					.word	SyntaxError                      ; $19 !!25
>953a	64 b3					.word	SyntaxError                      ; $1a !!26
>953c	64 b3					.word	SyntaxError                      ; $1b {
>953e	fe 9b					.word	OraInteger                       ; $1c |
>9540	64 b3					.word	SyntaxError                      ; $1d }
>9542	64 b3					.word	SyntaxError                      ; $1e ~
>9544	64 b3					.word	SyntaxError                      ; $1f [7m<7F>[m
>9546	64 b3					.word	SyntaxError                      ; $20
>9548	8a 9c					.word	WordIndirect                     ; $21 !
>954a	64 b3					.word	SyntaxError                      ; $22 "
>954c	64 b3					.word	SyntaxError                      ; $23 #
>954e	64 b3					.word	SyntaxError                      ; $24 $
>9550	e4 ad					.word	IntegerModulus                   ; $25 %
>9552	b8 9b					.word	AndInteger                       ; $26 &
>9554	64 b3					.word	SyntaxError                      ; $27 '
>9556	64 b3					.word	SyntaxError                      ; $28 (
>9558	64 b3					.word	SyntaxError                      ; $29 )
>955a	59 ae					.word	MulInteger                       ; $2a *
>955c	52 9b					.word	AddInteger                       ; $2b +
>955e	64 b3					.word	SyntaxError                      ; $2c ,
>9560	8d 9b					.word	SubInteger                       ; $2d -
>9562	64 b3					.word	SyntaxError                      ; $2e .
>9564	f0 af					.word	FDivideCommand                   ; $2f /
>9566	64 b3					.word	SyntaxError                      ; $30 0
>9568	64 b3					.word	SyntaxError                      ; $31 1
>956a	64 b3					.word	SyntaxError                      ; $32 2
>956c	64 b3					.word	SyntaxError                      ; $33 3
>956e	64 b3					.word	SyntaxError                      ; $34 4
>9570	64 b3					.word	SyntaxError                      ; $35 5
>9572	64 b3					.word	SyntaxError                      ; $36 6
>9574	64 b3					.word	SyntaxError                      ; $37 7
>9576	64 b3					.word	SyntaxError                      ; $38 8
>9578	64 b3					.word	SyntaxError                      ; $39 9
>957a	64 b3					.word	SyntaxError                      ; $3a :
>957c	64 b3					.word	SyntaxError                      ; $3b ;
>957e	97 99					.word	BinaryCompareLess                ; $3c <
>9580	8d 99					.word	BinaryCompareEqual               ; $3d =
>9582	a1 99					.word	BinaryCompareGreater             ; $3e >
>9584	b1 9c					.word	ByteIndirect                     ; $3f ?
.9586					VectorSet0:
>9586	e5 94					.word	EOLCommand                       ; $80 !0:EOF
>9588	f2 94					.word	Shift1Command                    ; $81 !1:SH1
>958a	fa 94					.word	Shift2Command                    ; $82 !2:SH2
>958c	36 b1					.word	AbsUnary                         ; $83 ABS(
>958e	81 a1					.word	AllocUnary                       ; $84 ALLOC(
>9590	46 b1					.word	AscUnary                         ; $85 ASC(
>9592	02 a3					.word	ChrUnary                         ; $86 CHR$(
>9594	0b 8d					.word	UnaryEvent                       ; $87 EVENT(
>9596	89 99					.word	UnaryFalse                       ; $88 FALSE
>9598	53 b1					.word	FracUnary                        ; $89 FRAC(
>959a	64 b3					.word	SyntaxError                      ; $8a HIT(
>959c	69 b1					.word	IntUnary                         ; $8b INT(
>959e	bf b1					.word	IsValUnary                       ; $8c ISVAL(
>95a0	72 91					.word	UnaryJoyB                        ; $8d JOYB(
>95a2	4b 91					.word	UnaryJoyX                        ; $8e JOYX(
>95a4	4e 91					.word	UnaryJoyY                        ; $8f JOYY(
>95a6	dc a3					.word	Unary_Left                       ; $90 LEFT$(
>95a8	7b b1					.word	LenUnary                         ; $91 LEN(
>95aa	f5 a1					.word	Unary_Max                        ; $92 MAX(
>95ac	06 a4					.word	Unary_Mid                        ; $93 MID$(
>95ae	f1 a1					.word	Unary_Min                        ; $94 MIN(
>95b0	4c a2					.word	Unary_Not                        ; $95 NOT(
>95b2	62 a2					.word	Unary_Random                     ; $96 RANDOM(
>95b4	ec a3					.word	Unary_Right                      ; $97 RIGHT$(
>95b6	81 a2					.word	Unary_Rnd                        ; $98 RND(
>95b8	95 b1					.word	SgnUnary                         ; $99 SGN(
>95ba	14 a3					.word	SpcUnary                         ; $9a SPC(
>95bc	2f a3					.word	Unary_Str                        ; $9b STR$(
>95be	c3 96					.word	UnaryTimer                       ; $9c TIMER(
>95c0	7d 99					.word	UnaryTrue                        ; $9d TRUE
>95c2	b5 b1					.word	ValUnary                         ; $9e VAL(
>95c4	74 8d					.word	ForCommand                       ; $9f FOR
>95c6	21 91					.word	IfCommand                        ; $a0 IF
>95c8	02 95					.word	Unused1                          ; $a1 PROC
>95ca	21 94					.word	Command_REPEAT                   ; $a2 REPEAT
>95cc	e2 98					.word	Command_WHILE                    ; $a3 WHILE
>95ce	4a 91					.word	EndIf                            ; $a4 ENDIF
>95d0	70 ad					.word	Command_ENDPROC                  ; $a5 ENDPROC
>95d2	2e 8e					.word	NextCommand                      ; $a6 NEXT
>95d4	02 95					.word	Unused4                          ; $a7 THEN
>95d6	2a 94					.word	Command_UNTIL                    ; $a8 UNTIL
>95d8	03 99					.word	Command_WEND                     ; $a9 WEND
>95da	64 b3					.word	SyntaxError                      ; $aa BY
>95dc	ab 8b					.word	CallCommand                      ; $ab CALL
>95de	8b 8e					.word	CircleCommand                    ; $ac CIRCLE
>95e0	e5 8b					.word	ClearCommand                     ; $ad CLEAR
>95e2	3d 8c					.word	ClearScreen                      ; $ae CLS
>95e4	64 b3					.word	SyntaxError                      ; $af COLOR
>95e6	64 b3					.word	SyntaxError                      ; $b0 COLOUR
>95e8	43 8c					.word	Command_Data                     ; $b1 DATA
>95ea	4b 8c					.word	DimCommand                       ; $b2 DIM
>95ec	02 95					.word	Unused3                          ; $b3 DOWNTO
>95ee	43 91					.word	ElseCode                         ; $b4 ELSE
>95f0	64 b3					.word	SyntaxError                      ; $b5 FROM
>95f2	b5 90					.word	GfxCommand                       ; $b6 GFX
>95f4	e7 90					.word	Command_GOSUB                    ; $b7 GOSUB
>95f6	05 91					.word	GotoCommand                      ; $b8 GOTO
>95f8	64 b3					.word	SyntaxError                      ; $b9 HERE
>95fa	b5 8e					.word	ImageCommand                     ; $ba IMAGE
>95fc	86 91					.word	LetCommand                       ; $bb LET
>95fe	0a 8f					.word	LineCommand                      ; $bc LINE
>9600	76 92					.word	Command_LOCAL                    ; $bd LOCAL
>9602	64 b3					.word	SyntaxError                      ; $be OFF
>9604	64 b3					.word	SyntaxError                      ; $bf ON
>9606	64 b3					.word	SyntaxError                      ; $c0 OUTLINE
>9608	03 8f					.word	PlotCommand                      ; $c1 PLOT
>960a	04 93					.word	Command_Print                    ; $c2 PRINT
>960c	bb 93					.word	Command_Read                     ; $c3 READ
>960e	87 8e					.word	RectangleCommand                 ; $c4 RECT
>9610	14 94					.word	RemCommand                       ; $c5 REM
>9612	f7 90					.word	Command_RETURN                   ; $c6 RETURN
>9614	64 b3					.word	SyntaxError                      ; $c7 SOLID
>9616	96 8e					.word	SpriteCommand                    ; $c8 SPRITE
>9618	d2 8e					.word	TextCommand                      ; $c9 TEXT
>961a	02 95					.word	Unused2                          ; $ca TO
.961c					VectorSet1:
>961c	64 b3					.word	SyntaxError                      ; $80 !0:EOF
>961e	64 b3					.word	SyntaxError                      ; $81 !1:SH1
>9620	64 b3					.word	SyntaxError                      ; $82 !2:SH2
>9622	7c 8b					.word	AssembleCommand                  ; $83 ASSEMBLE
>9624	9b 8b					.word	AssertCommand                    ; $84 ASSERT
>9626	55 90					.word	BitmapCtrl                       ; $85 BITMAP
>9628	08 8d					.word	EndCommand                       ; $86 END
>962a	db 91					.word	Command_List                     ; $87 LIST
>962c	fa 92					.word	NewCommand                       ; $88 NEW
>962e	43 94					.word	Command_Restore                  ; $89 RESTORE
>9630	75 94					.word	CommandRUN                       ; $8a RUN
>9632	9a 90					.word	SpritesCtrl                      ; $8b SPRITES
>9634	be 96					.word	StopCommand                      ; $8c STOP
.9636					VectorSet2:
>9636	64 b3					.word	SyntaxError                      ; $80 !0:EOF
>9638	64 b3					.word	SyntaxError                      ; $81 !1:SH1
>963a	64 b3					.word	SyntaxError                      ; $82 !2:SH2
>963c	23 b2					.word	Assemble_adc                     ; $83 ADC
>963e	1b b2					.word	Assemble_and                     ; $84 AND
>9640	37 b2					.word	Assemble_asl                     ; $85 ASL
>9642	a1 b2					.word	Assemble_bcc                     ; $86 BCC
>9644	a5 b2					.word	Assemble_bcs                     ; $87 BCS
>9646	ad b2					.word	Assemble_beq                     ; $88 BEQ
>9648	64 b2					.word	Assemble_bit                     ; $89 BIT
>964a	95 b2					.word	Assemble_bmi                     ; $8a BMI
>964c	a9 b2					.word	Assemble_bne                     ; $8b BNE
>964e	91 b2					.word	Assemble_bpl                     ; $8c BPL
>9650	b1 b2					.word	Assemble_bra                     ; $8d BRA
>9652	b5 b2					.word	Assemble_brk                     ; $8e BRK
>9654	99 b2					.word	Assemble_bvc                     ; $8f BVC
>9656	9d b2					.word	Assemble_bvs                     ; $90 BVS
>9658	bd b2					.word	Assemble_clc                     ; $91 CLC
>965a	11 b3					.word	Assemble_cld                     ; $92 CLD
>965c	d1 b2					.word	Assemble_cli                     ; $93 CLI
>965e	01 b3					.word	Assemble_clv                     ; $94 CLV
>9660	2f b2					.word	Assemble_cmp                     ; $95 CMP
>9662	78 b2					.word	Assemble_cpx                     ; $96 CPX
>9664	73 b2					.word	Assemble_cpy                     ; $97 CPY
>9666	55 b2					.word	Assemble_dec                     ; $98 DEC
>9668	0d b3					.word	Assemble_dex                     ; $99 DEX
>966a	e9 b2					.word	Assemble_dey                     ; $9a DEY
>966c	1f b2					.word	Assemble_eor                     ; $9b EOR
>966e	5a b2					.word	Assemble_inc                     ; $9c INC
>9670	1d b3					.word	Assemble_inx                     ; $9d INX
>9672	09 b3					.word	Assemble_iny                     ; $9e INY
>9674	8c b2					.word	Assemble_jmp                     ; $9f JMP
>9676	87 b2					.word	Assemble_jsr                     ; $a0 JSR
>9678	2b b2					.word	Assemble_lda                     ; $a1 LDA
>967a	50 b2					.word	Assemble_ldx                     ; $a2 LDX
>967c	6e b2					.word	Assemble_ldy                     ; $a3 LDY
>967e	41 b2					.word	Assemble_lsr                     ; $a4 LSR
>9680	21 b3					.word	Assemble_nop                     ; $a5 NOP
>9682	17 b2					.word	Assemble_ora                     ; $a6 ORA
>9684	cd b2					.word	Assemble_pha                     ; $a7 PHA
>9686	b9 b2					.word	Assemble_php                     ; $a8 PHP
>9688	15 b3					.word	Assemble_phx                     ; $a9 PHX
>968a	d5 b2					.word	Assemble_phy                     ; $aa PHY
>968c	dd b2					.word	Assemble_pla                     ; $ab PLA
>968e	c1 b2					.word	Assemble_plp                     ; $ac PLP
>9690	29 b3					.word	Assemble_plx                     ; $ad PLX
>9692	e5 b2					.word	Assemble_ply                     ; $ae PLY
>9694	3c b2					.word	Assemble_rol                     ; $af ROL
>9696	46 b2					.word	Assemble_ror                     ; $b0 ROR
>9698	c9 b2					.word	Assemble_rti                     ; $b1 RTI
>969a	d9 b2					.word	Assemble_rts                     ; $b2 RTS
>969c	33 b2					.word	Assemble_sbc                     ; $b3 SBC
>969e	c5 b2					.word	Assemble_sec                     ; $b4 SEC
>96a0	25 b3					.word	Assemble_sed                     ; $b5 SED
>96a2	e1 b2					.word	Assemble_sei                     ; $b6 SEI
>96a4	27 b2					.word	Assemble_sta                     ; $b7 STA
>96a6	19 b3					.word	Assemble_stp                     ; $b8 STP
>96a8	4b b2					.word	Assemble_stx                     ; $b9 STX
>96aa	69 b2					.word	Assemble_sty                     ; $ba STY
>96ac	5f b2					.word	Assemble_stz                     ; $bb STZ
>96ae	fd b2					.word	Assemble_tax                     ; $bc TAX
>96b0	f9 b2					.word	Assemble_tay                     ; $bd TAY
>96b2	82 b2					.word	Assemble_trb                     ; $be TRB
>96b4	7d b2					.word	Assemble_tsb                     ; $bf TSB
>96b6	05 b3					.word	Assemble_tsx                     ; $c0 TSX
>96b8	ed b2					.word	Assemble_txa                     ; $c1 TXA
>96ba	f5 b2					.word	Assemble_txs                     ; $c2 TXS
>96bc	f1 b2					.word	Assemble_tya                     ; $c3 TYA

;******  Return to file: ./common/commands/run.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/stop.asm

.96be					StopCommand:
.96be	a9 08		lda #$08		lda	#8
.96c0	4c 11 99	jmp $9911		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/commands/timer.asm

.96c3					UnaryTimer:
.96c3	fa		plx				plx
.96c4	20 7e ad	jsr $ad7e			jsr 	CheckRightBracket
.96c7					TimerToStackX:
.96c7	20 44 a5	jsr $a544			jsr 	NSMSetZero 					; zero result
.96ca	64 01		stz $01				stz 	1 							; access I/O
.96cc	ad 59 d6	lda $d659			lda 	$D659 						; copy timer in
.96cf	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.96d2	ad 5a d6	lda $d65a			lda 	$D65A
.96d5	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.96d8	ad 5b d6	lda $d65b			lda 	$D65B
.96db	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.96de	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/expandline.asm

.96df					ListConvertLine:
.96df	9c 9d 04	stz $049d			stz 	tbOffset
.96e2	9c a9 04	stz $04a9			stz 	tokenBuffer
.96e5	a0 02		ldy #$02			ldy 	#2 							; convert line number to string
.96e7	b1 30		lda ($30),y			lda 	(codePtr),y
.96e9	aa		tax				tax
.96ea	88		dey				dey
.96eb	b1 30		lda ($30),y			lda 	(codePtr),y
.96ed	20 da ae	jsr $aeda			jsr 	ConvertInt16
.96f0	85 36		sta $36				sta 	zTemp0 						; copy number into buffer
.96f2	86 37		stx $37				stx 	zTemp0+1
.96f4	a0 00		ldy #$00			ldy 	#0
.96f6					_LCCopyNumber:
.96f6	b1 36		lda ($36),y			lda 	(zTemp0),y
.96f8	20 f8 97	jsr $97f8			jsr 	LCLWrite
.96fb	c8		iny				iny
.96fc	b1 36		lda ($36),y			lda 	(zTemp0),y
.96fe	d0 f6		bne $96f6			bne 	_LCCopyNumber
.9700					_LCPadOut:
.9700	a9 20		lda #$20			lda 	#' '						; pad out to 6 characters
.9702	20 f8 97	jsr $97f8			jsr 	LCLWrite
.9705	ad 9d 04	lda $049d			lda 	tbOffset
.9708	c9 06		cmp #$06			cmp 	#6
.970a	d0 f4		bne $9700			bne 	_LCPadOut
.970c	a0 03		ldy #$03			ldy 	#3 							; start position.
.970e					_LCMainLoop:
.970e	b1 30		lda ($30),y			lda 	(codePtr),y
.9710	c9 80		cmp #$80			cmp 	#KWC_EOL 					; end of line ?
.9712	f0 17		beq $972b			beq 	_LCExit
.9714	c9 10		cmp #$10			cmp 	#16 						; 0-5 are the double punctuations
.9716	90 14		bcc $972c			bcc 	_LCDoubles
.9718	c9 20		cmp #$20			cmp 	#32 						; 16-31 are shifted punctuation from 64-91
.971a	90 20		bcc $973c			bcc 	_LCShiftPunc
.971c	c9 40		cmp #$40			cmp 	#64 						; 32-64 are as stored, punc and digits
.971e	90 2b		bcc $974b			bcc 	_LCPunctuation
.9720	c9 80		cmp #$80			cmp 	#128 						; 64-127 are variable identifiers.
.9722	90 2d		bcc $9751			bcc 	_LCIdentifiers
.9724	c9 fe		cmp #$fe			cmp 	#254 						; 128-253 are tokenised words
.9726	90 49		bcc $9771			bcc 	_LCTokens
.9728	4c cc 97	jmp $97cc			jmp 	_LCData 					; 254-5 are data objects
.972b					_LCExit:
.972b	60		rts				rts
.972c					_LCDoubles:
.972c	48		pha				pha
.972d	4a		lsr a				lsr 	a 							; put bit 2 into bit 1
.972e	29 02		and #$02			and 	#2
.9730	09 3c		ora #$3c			ora 	#60 						; make < >
.9732	20 f8 97	jsr $97f8			jsr 	LCLWrite
.9735	68		pla				pla 								; restore, do lower bit
.9736	29 03		and #$03			and 	#3
.9738	09 3c		ora #$3c			ora 	#60
.973a	80 0f		bra $974b			bra		_LCPunctuation 				; print, increment, loop
.973c					_LCShiftPunc:
.973c	aa		tax				tax 								; save in X
.973d	29 07		and #$07			and 	#7 							; lower 3 bits
.973f	f0 02		beq $9743			beq 	_LCNoAdd
.9741	09 18		ora #$18			ora 	#24 						; adds $18 to it.
.9743					_LCNoAdd:
.9743	e0 18		cpx #$18			cpx 	#24 						; if >= 24 add $20
.9745	90 02		bcc $9749			bcc 	_LCNoAdd2
.9747	09 20		ora #$20			ora 	#32 						; adds $20
.9749					_LCNoAdd2:
.9749	09 40		ora #$40			ora 	#$40 						; shift into 64-127 range and fall through.
.974b					_LCPunctuation:
.974b	c8		iny				iny 								; consume character
.974c	20 f8 97	jsr $97f8			jsr 	LCLWrite 					; write it out.
.974f	80 bd		bra $970e			bra 	_LCMainLoop 				; go round again.
.9751					_LCIdentifiers:
.9751	18		clc				clc 								; convert to physical address
.9752	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.9754	85 37		sta $37				sta 	zTemp0+1
.9756	c8		iny				iny
.9757	b1 30		lda ($30),y			lda 	(codePtr),y
.9759	85 36		sta $36				sta 	zTemp0
.975b	c8		iny				iny
.975c	5a		phy				phy 								; save position
.975d	a0 07		ldy #$07			ldy 	#7 							; output the identifier.
.975f					_LCOutIdentifier:
.975f	c8		iny				iny
.9760	b1 36		lda ($36),y			lda 	(zTemp0),y
.9762	29 7f		and #$7f			and 	#$7F
.9764	20 26 98	jsr $9826			jsr 	LCLLowerCase
.9767	20 f8 97	jsr $97f8			jsr 	LCLWrite
.976a	b1 36		lda ($36),y			lda 	(zTemp0),y				 	; ends when bit 7 set.
.976c	10 f1		bpl $975f			bpl 	_LCOutIdentifier
.976e	7a		ply				ply 								; restore position
.976f	80 9d		bra $970e			bra 	_LCMainLoop
.9771					_LCTokens:
.9771	aa		tax				tax 								; token in X
.9772	a9 2a		lda #$2a			lda 	#((KeywordSet2) & $FF)
.9774	85 36		sta $36				sta 	0+zTemp0
.9776	a9 a9		lda #$a9			lda 	#((KeywordSet2) >> 8)
.9778	85 37		sta $37				sta 	1+zTemp0
.977a	e0 82		cpx #$82			cpx 	#$82
.977c	f0 16		beq $9794			beq 	_LCUseShift
.977e	a9 dc		lda #$dc			lda 	#((KeywordSet1) & $FF)
.9780	85 36		sta $36				sta 	0+zTemp0
.9782	a9 a8		lda #$a8			lda 	#((KeywordSet1) >> 8)
.9784	85 37		sta $37				sta 	1+zTemp0
.9786	e0 81		cpx #$81			cpx 	#$81
.9788	f0 0a		beq $9794			beq 	_LCUseShift
.978a	a9 00		lda #$00			lda 	#((KeywordSet0) & $FF)
.978c	85 36		sta $36				sta 	0+zTemp0
.978e	a9 a7		lda #$a7			lda 	#((KeywordSet0) >> 8)
.9790	85 37		sta $37				sta 	1+zTemp0
.9792	80 01		bra $9795			bra 	_LCNoShift
.9794					_LCUseShift:
.9794	c8		iny				iny
.9795					_LCNoShift:
.9795	20 07 98	jsr $9807			jsr 	LCCheckSpaceRequired 		; do we need a space ?
.9798	b1 30		lda ($30),y			lda 	(codePtr),y
.979a	aa		tax				tax 								; into X
.979b					_LCFindText:
.979b	ca		dex				dex
.979c	10 0e		bpl $97ac			bpl 	_LCFoundText 				; found text.
.979e	b2 36		lda ($36)			lda 	(zTemp0) 					; length of text
.97a0	1a		inc a				inc 	a 							; one extra for size
.97a1	38		sec				sec 								; one extra for checksum
.97a2	65 36		adc $36				adc 	zTemp0 						; go to next token
.97a4	85 36		sta $36				sta 	zTemp0
.97a6	90 f3		bcc $979b			bcc 	_LCFindText
.97a8	e6 37		inc $37				inc 	zTemp0+1
.97aa	80 ef		bra $979b			bra 	_LCFindText
.97ac					_LCFoundText:
.97ac	5a		phy				phy 								; save List position
.97ad	b2 36		lda ($36)			lda 	(zTemp0)					; count to print
.97af	aa		tax				tax
.97b0	a0 02		ldy #$02			ldy 	#2
.97b2					_LCCopyToken:
.97b2	b1 36		lda ($36),y			lda 	(zTemp0),y
.97b4	20 26 98	jsr $9826			jsr 	LCLLowerCase
.97b7	20 f8 97	jsr $97f8			jsr 	LCLWrite
.97ba	c8		iny				iny
.97bb	ca		dex				dex
.97bc	d0 f4		bne $97b2			bne 	_LCCopyToken
.97be	c9 28		cmp #$28			cmp 	#"(" 						; if last char not ( print a space
.97c0	f0 05		beq $97c7			beq 	_LCNoSpace
.97c2	a9 20		lda #$20			lda 	#' '
.97c4	20 f8 97	jsr $97f8			jsr 	LCLWrite
.97c7					_LCNoSpace:
.97c7	7a		ply				ply 								; restore position.
.97c8	c8		iny				iny 								; consume token
.97c9	4c 0e 97	jmp $970e			jmp 	_LCMainLoop 				; and go around again.
.97cc					_LCData:
.97cc	48		pha				pha 								; save type $FE/$FF
.97cd	a2 24		ldx #$24			ldx 	#'$' 						; figure out $ or "
.97cf	c9 fe		cmp #$fe			cmp 	#$FE
.97d1	f0 02		beq $97d5			beq 	_LCHaveOpener
.97d3	a2 22		ldx #$22			ldx 	#'"'
.97d5					_LCHaveOpener:
.97d5	8a		txa				txa 								; output prefix (# or ")
.97d6	20 f8 97	jsr $97f8			jsr 	LCLWrite
.97d9	c8		iny				iny 								; get count
.97da	b1 30		lda ($30),y			lda 	(codePtr),y
.97dc	aa		tax				tax
.97dd	c8		iny				iny 								; point at first character
.97de					_LCOutData:
.97de	b1 30		lda ($30),y			lda 	(codePtr),y
.97e0	c9 00		cmp #$00			cmp 	#0
.97e2	f0 03		beq $97e7			beq 	_LCNoPrint
.97e4	20 f8 97	jsr $97f8			jsr 	LCLWrite
.97e7					_LCNoPrint:
.97e7	c8		iny				iny
.97e8	ca		dex				dex
.97e9	d0 f3		bne $97de			bne 	_LCOutData
.97eb	68		pla				pla 								; closing " required ?
.97ec	c9 ff		cmp #$ff			cmp 	#$FF
.97ee	d0 05		bne $97f5			bne 	_LCNoQuote
.97f0	a9 22		lda #$22			lda 	#'"'
.97f2	20 f8 97	jsr $97f8			jsr 	LCLWrite
.97f5					_LCNoQuote:
.97f5	4c 0e 97	jmp $970e			jmp 	_LCMainLoop
.97f8					LCLWrite:
.97f8	da		phx				phx
.97f9	ae 9d 04	ldx $049d			ldx 	tbOffset
.97fc	9d a9 04	sta $04a9,x			sta 	tokenBuffer,x
.97ff	9e aa 04	stz $04aa,x			stz 	tokenBuffer+1,x
.9802	ee 9d 04	inc $049d			inc 	tbOffset
.9805	fa		plx				plx
.9806	60		rts				rts
.9807					LCCheckSpaceRequired:
.9807	ae 9d 04	ldx $049d			ldx 	tbOffset
.980a	bd a8 04	lda $04a8,x			lda 	tokenBuffer-1,x 			; previous character
.980d	20 26 98	jsr $9826			jsr 	LCLLowerCase 				; saves a little effort
.9810	c9 30		cmp #$30			cmp 	#"0" 						; check if it was 0-9 A-Z a-z if so need space.
.9812	90 11		bcc $9825			bcc 	_LCCSRExit
.9814	c9 3a		cmp #$3a			cmp 	#"9"+1
.9816	90 08		bcc $9820			bcc 	_LCCSRSpace
.9818	c9 61		cmp #$61			cmp 	#"a"
.981a	90 09		bcc $9825			bcc 	_LCCSRExit
.981c	c9 7b		cmp #$7b			cmp 	#"z"+1
.981e	b0 05		bcs $9825			bcs 	_LCCSRExit
.9820					_LCCSRSpace:
.9820	a9 20		lda #$20			lda 	#' '
.9822	20 f8 97	jsr $97f8			jsr 	LCLWrite
.9825					_LCCSRExit:
.9825	60		rts				rts
.9826					LCLLowerCase:
.9826	c9 41		cmp #$41			cmp 	#"A"
.9828	90 06		bcc $9830			bcc 	_LCLLCOut
.982a	c9 5b		cmp #$5b			cmp 	#"Z"+1
.982c	b0 02		bcs $9830			bcs 	_LCLLCOut
.982e	69 20		adc #$20			adc 	#$20
.9830					_LCLLCOut:
.9830	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/procscan.asm

.9831					ProcedureScan:
.9831	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.9833	85 30		sta $30				sta 	codePtr
.9835	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.9837	85 31		sta $31				sta 	codePtr+1
.9839					_PSLoop:
.9839	b2 30		lda ($30)			lda 	(codePtr)
.983b	f0 42		beq $987f			beq 	_PSExit
.983d	a0 03		ldy #$03			ldy 	#3 							; is it PROC ?
.983f	b1 30		lda ($30),y			lda 	(codePtr),y
.9841	c9 a1		cmp #$a1			cmp 	#KWD_PROC
.9843	d0 2d		bne $9872			bne 	_PSNext
.9845	c8		iny				iny 								; get the address of the record to zTemp0 and
.9846	b1 30		lda ($30),y			lda 	(codePtr),y
.9848	29 c0		and #$c0			and 	#$C0
.984a	c9 40		cmp #$40			cmp 	#$40
.984c	d0 32		bne $9880			bne 	_PSSyntax
.984e	b1 30		lda ($30),y			lda 	(codePtr),y
.9850	18		clc				clc
.9851	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.9853	85 37		sta $37				sta 	zTemp0+1
.9855	c8		iny				iny 								; LSB
.9856	b1 30		lda ($30),y			lda 	(codePtr),y
.9858	85 36		sta $36				sta 	zTemp0
.985a	c8		iny				iny 								; character after variable call.
.985b	98		tya				tya 								; save Y offset at +7
.985c	a0 07		ldy #$07			ldy 	#7
.985e	91 36		sta ($36),y			sta 	(zTemp0),y
.9860	a9 18		lda #$18			lda 	#NSTProcedure 				; mark it as procedure
.9862	a0 02		ldy #$02			ldy 	#2
.9864	91 36		sta ($36),y			sta 	(zTemp0),y
.9866	a2 00		ldx #$00			ldx 	#0 							; copy code-Ptr in
.9868					_PSCopy:
.9868	b5 30		lda $30,x			lda 	safePtr,x
.986a	c8		iny				iny
.986b	91 36		sta ($36),y			sta 	(zTemp0),y
.986d	e8		inx				inx
.986e	e0 04		cpx #$04			cpx 	#4
.9870	d0 f6		bne $9868			bne 	_PSCopy
.9872					_PSNext:
.9872	18		clc				clc
.9873	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.9875	65 30		adc $30				adc 	codePtr
.9877	85 30		sta $30				sta 	codePtr
.9879	90 02		bcc $987d			bcc 	_CREExit
.987b	e6 31		inc $31				inc 	codePtr+1
.987d					_CREExit:
.987d	80 ba		bra $9839			bra 	_PSLoop
.987f					_PSExit:
.987f	60		rts				rts
.9880					_PSSyntax:
.9880	4c 64 b3	jmp $b364			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/scanforward.asm

.9883					ScanForward:
.9883	85 36		sta $36				sta 	zTemp0 						; save XA as the two possible matches.
.9885	86 37		stx $37				stx 	zTemp0+1
.9887	64 38		stz $38				stz 	zTemp1 						; this is the structure count - goes up with WHILE/FOR
.9889					_ScanLoop:
.9889	b1 30		lda ($30),y			lda 	(codePtr),y
.988b	c8		iny				iny
.988c	a6 38		ldx $38				ldx 	zTemp1 						; if the count is > 0 cannot match as in substructure
.988e	d0 0e		bne $989e			bne 	_ScanGoNext
.9890	c5 36		cmp $36				cmp 	zTemp0 						; see if either matches
.9892	f0 04		beq $9898			beq 	_ScanMatch
.9894	c5 37		cmp $37				cmp 	zTemp0+1
.9896	d0 06		bne $989e			bne 	_ScanGoNext
.9898					_ScanMatch:
.9898	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if asked for EOL, backtrack.
.989a	d0 01		bne $989d			bne 	_ScanNotEndEOL
.989c	88		dey				dey
.989d					_ScanNotEndEOL:
.989d	60		rts				rts
.989e					_ScanGoNext:
.989e	c9 40		cmp #$40			cmp 	#$40 						; if 00-3F, punctuation characters, loop back
.98a0	90 e7		bcc $9889			bcc 	_ScanLoop
.98a2	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if 40-82, skip one extra.
.98a4	90 18		bcc $98be			bcc 	_ScanSkipOne
.98a6	c9 fc		cmp #$fc			cmp 	#$FC 						; FC-FF are data skips
.98a8	b0 2f		bcs $98d9			bcs 	_ScanSkipData
.98aa	c9 9f		cmp #$9f			cmp 	#KWC_FIRST_STRUCTURE 		; structure keyword ?
.98ac	90 db		bcc $9889			bcc 	_ScanLoop 					; if not, ordinary keywords.
.98ae	c9 aa		cmp #$aa			cmp 	#KWC_LAST_STRUCTURE+1
.98b0	b0 d7		bcs $9889			bcs 	_ScanLoop
.98b2	c6 38		dec $38				dec 	zTemp1 						; decrement the sructure count
.98b4	c9 a4		cmp #$a4			cmp 	#KWC_FIRST_STRUCTURE_DEC 	; back if it is a dec structure (e.g. WEND/NEXT)
.98b6	b0 d1		bcs $9889			bcs 	_ScanLoop
.98b8	e6 38		inc $38				inc 	zTemp1 						; so it's an increment structure
.98ba	e6 38		inc $38				inc 	zTemp1 						; twice to undo the dec
.98bc	80 cb		bra $9889			bra 	_ScanLoop
.98be					_ScanSkipOne:
.98be	c8		iny				iny 								; consume the extra one.
.98bf	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if not EOL loop back
.98c1	d0 c6		bne $9889			bne 	_ScanLoop
.98c3	18		clc				clc
.98c4	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.98c6	65 30		adc $30				adc 	codePtr
.98c8	85 30		sta $30				sta 	codePtr
.98ca	90 02		bcc $98ce			bcc 	_CREExit
.98cc	e6 31		inc $31				inc 	codePtr+1
.98ce					_CREExit:
.98ce	a0 03		ldy #$03			ldy 	#3 							; scan start position.
.98d0	b2 30		lda ($30)			lda 	(codePtr)
.98d2	d0 b5		bne $9889			bne 	_ScanLoop 					; if not zero, more to scan
.98d4	a9 13		lda #$13		lda	#19
.98d6	4c 11 99	jmp $9911		jmp	ErrorHandler
.98d9					_ScanSkipData:
.98d9	88		dey				dey 								; point at data token
.98da	c8		iny				iny
.98db	98		tya				tya
.98dc	38		sec				sec
.98dd	71 30		adc ($30),y			adc 	(codePtr),y
.98df	a8		tay				tay
.98e0	80 a7		bra $9889			bra 	_ScanLoop

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/while.asm

.98e2					Command_WHILE:
.98e2	5a		phy				phy 								; save position of the test
.98e3	a2 00		ldx #$00			ldx 	#0
.98e5	20 84 a4	jsr $a484			jsr 	EvaluateNumber 				; work out the number
.98e8	20 74 a5	jsr $a574			jsr 	NSMIsZero 					; check if zero
.98eb	f0 0e		beq $98fb			beq 	_WHExitLoop 				; if so exit the loop
.98ed	98		tya				tya 								; position *after* test.
.98ee	7a		ply				ply 								; restore position before test, at WHILE
.98ef	88		dey				dey
.98f0	48		pha				pha 								; push after test on the stack
.98f1	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; allocate 6 bytes on the return stack.
.98f3	20 f8 a5	jsr $a5f8			jsr 	StackOpen
.98f6	20 3c a6	jsr $a63c			jsr 	STKSaveCodePosition 		; save loop position - where the test value is.
.98f9	7a		ply				ply 								; restore the position *after* the test
.98fa	60		rts				rts
.98fb					_WHExitLoop:
.98fb	68		pla				pla 								; throw post loop position
.98fc	a9 a9		lda #$a9			lda 	#KWD_WEND 					; scan forward past WEND
.98fe	aa		tax				tax
.98ff	20 83 98	jsr $9883			jsr 	ScanForward
.9902	60		rts				rts
.9903					Command_WEND:
.9903	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; check WHILE is TOS
.9905	a2 10		ldx #$10			ldx 	#ERRID_WHILE 				; this error
.9907	20 24 a6	jsr $a624			jsr 	StackCheckFrame
.990a	20 4d a6	jsr $a64d			jsr 	STKLoadCodePosition 		; loop back
.990d	20 16 a6	jsr $a616			jsr 	StackClose		 			; erase the frame
.9910	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/charcheck.asm

.ad7e					CheckRightBracket:
.ad7e	b1 30		lda ($30),y			lda 	(codePtr),y
.ad80	c8		iny				iny
.ad81	c9 29		cmp #$29			cmp 	#KWD_RPAREN 						; exit if matches
.ad83	d0 0f		bne $ad94			bne 	CNAFail
.ad85	60		rts				rts
.ad86					CheckComma:
.ad86	b1 30		lda ($30),y			lda 	(codePtr),y
.ad88	c8		iny				iny
.ad89	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 						; exit if matches
.ad8b	d0 07		bne $ad94			bne 	CNAFail
.ad8d	60		rts				rts
.ad8e					CheckNextA:
.ad8e	d1 30		cmp ($30),y			cmp 	(codePtr),y
.ad90	d0 02		bne $ad94			bne 	CNAFail
.ad92	c8		iny				iny 								; skip character
.ad93	60		rts				rts 								; and exit
.ad94					CNAFail:
.ad94	4c 64 b3	jmp $b364			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/errors.asm

.9911					ErrorHandler:
.9911	a8		tay				tay 								; find the error text
.9912	f0 49		beq $995d			beq 	_EHEnd
.9914	a2 00		ldx #$00			ldx 	#0
.9916	a9 7d		lda #$7d			lda 	#((ErrorText) & $FF)
.9918	85 36		sta $36				sta 	0+zTemp0
.991a	a9 b3		lda #$b3			lda 	#((ErrorText) >> 8)
.991c	85 37		sta $37				sta 	1+zTemp0
.991e					_EHFind:
.991e	88		dey				dey 								; found the error text ?
.991f	f0 0e		beq $992f			beq 	_EHFound
.9921					_EHFindZero:
.9921	b2 36		lda ($36)			lda 	(zTemp0) 					; find the next error
.9923	e6 36		inc $36				inc 	zTemp0
.9925	d0 02		bne $9929			bne 	_EHFNoCarry
.9927	e6 37		inc $37				inc 	zTemp0+1
.9929					_EHFNoCarry:
.9929	c9 00		cmp #$00			cmp 	#0
.992b	d0 f4		bne $9921			bne 	_EHFindZero
.992d	80 ef		bra $991e			bra 	_EHFind
.992f					_EHFound:
.992f	a5 36		lda $36				lda 	zTemp0 						; print message
.9931	a6 37		ldx $37				ldx 	zTemp0+1
.9933	20 6a 99	jsr $996a			jsr 	PrintStringXA
.9936	a0 01		ldy #$01			ldy 	#1 							; if line number zero don't print i
.9938	b1 30		lda ($30),y			lda 	(codePtr),y
.993a	d0 05		bne $9941			bne 	_EHAtMsg
.993c	c8		iny				iny
.993d	b1 30		lda ($30),y			lda 	(codePtr),y
.993f	f0 17		beq $9958			beq 	_EHCREnd
.9941					_EHAtMsg:
.9941	a2 99		ldx #$99			ldx 	#_AtMsg >> 8 				; print " at "
.9943	a9 60		lda #$60			lda 	#_AtMsg & $FF
.9945	20 6a 99	jsr $996a			jsr 	PrintStringXA
.9948	a0 01		ldy #$01			ldy 	#1 							; line number into XA
.994a	b1 30		lda ($30),y			lda 	(codePtr),y
.994c	48		pha				pha
.994d	c8		iny				iny
.994e	b1 30		lda ($30),y			lda 	(codePtr),y
.9950	aa		tax				tax
.9951	68		pla				pla
.9952	20 da ae	jsr $aeda			jsr 	ConvertInt16 				; convert XA to string
.9955	20 6a 99	jsr $996a			jsr 	PrintStringXA 				; and print it.
.9958					_EHCREnd:
.9958	a9 0d		lda #$0d			lda 	#13 						; new line
.995a	20 1c b5	jsr $b51c			jsr 	EXTPrintCharacter
.995d					_EHEnd:
.995d	4c 4c 8b	jmp $8b4c			jmp 	WarmStart
>9960	20 61 74 20 6c 69 6e 65		_AtMsg:	.text 	" at line ",0
>9968	20 00
.996a					PrintStringXA:
.996a	5a		phy				phy
.996b	86 37		stx $37				stx 	zTemp0+1
.996d	85 36		sta $36				sta 	zTemp0
.996f	a0 00		ldy #$00			ldy 	#0
.9971					_PSXALoop:
.9971	b1 36		lda ($36),y			lda 	(zTemp0),y
.9973	f0 06		beq $997b			beq 	_PSXAExit
.9975	20 1c b5	jsr $b51c			jsr 	EXTPrintCharacter
.9978	c8		iny				iny
.9979	80 f6		bra $9971			bra 	_PSXALoop
.997b					_PSXAExit:
.997b	7a		ply				ply
.997c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/compare.asm

.997d					UnaryTrue:
.997d	fa		plx				plx
.997e					ReturnTrue:
.997e	a9 01		lda #$01			lda 	#1  						; set to 1
.9980	20 46 a5	jsr $a546			jsr 	NSMSetByte
.9983	a9 80		lda #$80			lda 	#$80 						; set sign flag, so it is -1
.9985	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9988	60		rts				rts
.9989					UnaryFalse:
.9989	fa		plx				plx
.998a					ReturnFalse:
.998a	4c 44 a5	jmp $a544			jmp 	NSMSetZero 					; set it all to zero
.998d					BinaryCompareEqual:
.998d	fa		plx				plx
.998e	20 c9 99	jsr $99c9			jsr 	CompareBaseCode
.9991	c9 00		cmp #$00			cmp 	#0
.9993	f0 e9		beq $997e			beq 	ReturnTrue
.9995	80 f3		bra $998a			bra 	ReturnFalse
.9997					BinaryCompareLess:
.9997	fa		plx				plx
.9998	20 c9 99	jsr $99c9			jsr 	CompareBaseCode
.999b	c9 ff		cmp #$ff			cmp 	#$FF
.999d	f0 df		beq $997e			beq 	ReturnTrue
.999f	80 e9		bra $998a			bra 	ReturnFalse
.99a1					BinaryCompareGreater:
.99a1	fa		plx				plx
.99a2	20 c9 99	jsr $99c9			jsr 	CompareBaseCode
.99a5	c9 01		cmp #$01			cmp 	#1
.99a7	f0 d5		beq $997e			beq 	ReturnTrue
.99a9	80 df		bra $998a			bra 	ReturnFalse
.99ab					BinaryCompareNotEqual:
.99ab	fa		plx				plx
.99ac	20 c9 99	jsr $99c9			jsr 	CompareBaseCode
.99af	c9 00		cmp #$00			cmp 	#0
.99b1	d0 cb		bne $997e			bne 	ReturnTrue
.99b3	80 d5		bra $998a			bra 	ReturnFalse
.99b5					BinaryCompareLessEqual:
.99b5	fa		plx				plx
.99b6	20 c9 99	jsr $99c9			jsr 	CompareBaseCode
.99b9	c9 01		cmp #$01			cmp 	#1
.99bb	d0 c1		bne $997e			bne 	ReturnTrue
.99bd	80 cb		bra $998a			bra 	ReturnFalse
.99bf					BinaryCompareGreaterEqual:
.99bf	fa		plx				plx
.99c0	20 c9 99	jsr $99c9			jsr 	CompareBaseCode
.99c3	c9 ff		cmp #$ff			cmp 	#$FF
.99c5	d0 b7		bne $997e			bne 	ReturnTrue
.99c7	80 c1		bra $998a			bra 	ReturnFalse
.99c9					CompareBaseCode:
.99c9	20 2a 9e	jsr $9e2a			jsr 	DereferenceTopTwo 			; make both values if references.
.99cc	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if either is a string.
.99cf	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.99d2	29 10		and #$10			and 	#NSTString
.99d4	d0 40		bne $9a16			bne 	_CBCString
.99d6	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check both are integers
.99d9	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.99dc	d0 3b		bne $9a19			bne 	_CBCFloat
.99de	bd 00 04	lda $0400,x			lda 	NSStatus,x
.99e1	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.99e4	29 08		and #$08			and 	#NSTFloat
.99e6	d0 31		bne $9a19			bne 	_CBCFloat
.99e8	20 1c 9a	jsr $9a1c			jsr 	CompareFixMinusZero
.99eb	e8		inx				inx
.99ec	20 1c 9a	jsr $9a1c			jsr 	CompareFixMinusZero
.99ef	ca		dex				dex
.99f0	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; are the signs different ?
.99f3	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.99f6	10 0b		bpl $9a03			bpl 	_CDCSameSign
.99f8	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; if first one is -ve
.99fb	30 16		bmi $9a13			bmi 	_CBCLess 					; return $FF
.99fd					_CBCGreater:
.99fd	a9 01		lda #$01			lda 	#1
.99ff	60		rts				rts
.9a00					_CBCEqual:
.9a00	a9 00		lda #$00			lda 	#0
.9a02	60		rts				rts
.9a03					_CDCSameSign:
.9a03	20 2c 9b	jsr $9b2c			jsr 	SubTopTwoStack 				; unsigned subtract
.9a06	20 74 a5	jsr $a574			jsr 	NSMIsZero 					; or the mantissa together
.9a09	f0 f5		beq $9a00			beq 	_CBCEqual 					; -0 == 0
.9a0b	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; sign of the result. if +ve return $01 else return $FF
.9a0e	5d 01 04	eor $0401,x			eor 	NSStatus+1,x 				; however if both were -ve this is inverted
.9a11	10 ea		bpl $99fd			bpl 	_CBCGreater
.9a13					_CBCLess:
.9a13	a9 ff		lda #$ff			lda 	#$FF
.9a15	60		rts				rts
.9a16					_CBCString:
.9a16	4c 82 9a	jmp $9a82			jmp 	CompareStrings
.9a19					_CBCFloat:
.9a19	4c d6 af	jmp $afd6			jmp 	CompareFloat
.9a1c					CompareFixMinusZero:
.9a1c	20 74 a5	jsr $a574			jsr 	NSMIsZero
.9a1f	d0 03		bne $9a24			bne 	_CFXMZNotZero
.9a21	9e 00 04	stz $0400,x			stz 	NSStatus,x
.9a24					_CFXMZNotZero:
.9a24	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/concat.asm

.9a25					StringConcat:
.9a25	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check both strings
.9a28	3d 01 04	and $0401,x			and 	NSStatus+1,x
.9a2b	29 18		and #$18			and 	#NSBTypeMask
.9a2d	c9 10		cmp #$10			cmp 	#NSTString
.9a2f	d0 4e		bne $9a7f			bne		_SCType
.9a31	64 38		stz $38				stz 	zTemp1 						; counting total length
.9a33	e8		inx				inx
.9a34	20 52 9a	jsr $9a52			jsr 	_SCSetupZ0 					; setup for second
.9a37	20 5d 9a	jsr $9a5d			jsr 	_SCLengthZ0 				; length for second
.9a3a	ca		dex				dex
.9a3b	20 52 9a	jsr $9a52			jsr 	_SCSetupZ0 					; setup for first
.9a3e	20 5d 9a	jsr $9a5d			jsr 	_SCLengthZ0 				; length for first
.9a41	a5 38		lda $38				lda 	zTemp1 						; allocate memory
.9a43	20 e5 b6	jsr $b6e5			jsr 	StringTempAllocate
.9a46	20 70 9a	jsr $9a70			jsr 	_SCCopy 					; copy first out, using zTemp0 from above
.9a49	e8		inx				inx
.9a4a	20 52 9a	jsr $9a52			jsr 	_SCSetupZ0 					; copy second out
.9a4d	20 70 9a	jsr $9a70			jsr 	_SCCopy
.9a50	ca		dex				dex
.9a51	60		rts				rts
.9a52					_SCSetupZ0:
.9a52	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9a55	85 36		sta $36				sta 	zTemp0
.9a57	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9a5a	85 37		sta $37				sta 	zTemp0+1
.9a5c	60		rts				rts
.9a5d					_SCLengthZ0:
.9a5d	5a		phy				phy
.9a5e	a0 00		ldy #$00			ldy 	#0
.9a60					_SCLenLoop:
.9a60	b1 36		lda ($36),y			lda 	(zTemp0),y
.9a62	f0 0a		beq $9a6e			beq 	_SCLExit
.9a64	c8		iny				iny
.9a65	e6 38		inc $38				inc 	zTemp1
.9a67	10 f7		bpl $9a60			bpl		_SCLenLoop
.9a69	a9 09		lda #$09		lda	#9
.9a6b	4c 11 99	jmp $9911		jmp	ErrorHandler
.9a6e					_SCLExit:
.9a6e	7a		ply				ply
.9a6f	60		rts				rts
.9a70					_SCCopy:
.9a70	5a		phy				phy
.9a71	a0 00		ldy #$00			ldy 	#0
.9a73					_SCCopyLoop:
.9a73	b1 36		lda ($36),y			lda 	(zTemp0),y
.9a75	f0 06		beq $9a7d			beq 	_SCCExit
.9a77	20 23 b7	jsr $b723			jsr 	StringTempWrite
.9a7a	c8		iny				iny
.9a7b	80 f6		bra $9a73			bra 	_SCCopyLoop
.9a7d					_SCCExit:
.9a7d	7a		ply				ply
.9a7e	60		rts				rts
.9a7f					_SCType:
.9a7f	4c 6e b3	jmp $b36e			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/divide.asm

.ad97					IntegerDivide:
.ad97	fa		plx				plx
.ad98	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.ad9b	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.ad9e	0a		asl a				asl 	a 							; shift reference bit into sign bit
.ad9f	0a		asl a				asl 	a
.ada0	10 05		bpl $ada7			bpl 	_NotRef
.ada2	48		pha				pha
.ada3	20 2a 9e	jsr $9e2a			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.ada6	68		pla				pla
.ada7					_NotRef:
.ada7	0a		asl a				asl 	a
.ada8	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.adaa	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.adad	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.adb0	f0 03		beq $adb5			beq 	_IntegerCode 				; if clear, then we have two integers
.adb2	4c 6e b3	jmp $b36e			jmp 	TypeError 					; anything else, type mismatch.
.adb5					_IntegerCode:
.adb5	20 d7 ad	jsr $add7			jsr 	CheckDivideZero 			; do div zero check
.adb8	20 0f ae	jsr $ae0f			jsr 	Int32Divide 				; do the division
.adbb	20 cc ae	jsr $aecc			jsr 	CalculateSign 				; calculate result sign
.adbe					NSMCopyPlusTwoToZero:
.adbe	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.adc1	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.adc4	bd 12 04	lda $0412,x			lda 	NSMantissa1+2,x
.adc7	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.adca	bd 1a 04	lda $041a,x			lda 	NSMantissa2+2,x
.adcd	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.add0	bd 22 04	lda $0422,x			lda 	NSMantissa3+2,x
.add3	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.add6	60		rts				rts
.add7					CheckDivideZero:
.add7	e8		inx				inx
.add8	20 74 a5	jsr $a574			jsr 	NSMIsZero
.addb	f0 02		beq $addf			beq 	_CDVError
.addd	ca		dex				dex
.adde	60		rts				rts
.addf					_CDVError:
.addf	a9 03		lda #$03		lda	#3
.ade1	4c 11 99	jmp $9911		jmp	ErrorHandler
.ade4					IntegerModulus:
.ade4	fa		plx				plx
.ade5	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.ade8	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.adeb	0a		asl a				asl 	a 							; shift reference bit into sign bit
.adec	0a		asl a				asl 	a
.aded	10 05		bpl $adf4			bpl 	_NotRef
.adef	48		pha				pha
.adf0	20 2a 9e	jsr $9e2a			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.adf3	68		pla				pla
.adf4					_NotRef:
.adf4	0a		asl a				asl 	a
.adf5	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.adf7	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.adfa	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.adfd	f0 03		beq $ae02			beq 	_IntegerCode 				; if clear, then we have two integers
.adff	4c 6e b3	jmp $b36e			jmp 	TypeError 					; anything else, type mismatch.
.ae02					_IntegerCode:
.ae02					IntegerModulusNoCheck:
.ae02	20 d7 ad	jsr $add7			jsr 	CheckDivideZero 			; do div zero check
.ae05	20 0f ae	jsr $ae0f			jsr 	Int32Divide 				; do the division
.ae08	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; clear the sign bit.
.ae0b	5e 00 04	lsr $0400,x			lsr 	NSStatus,x
.ae0e	60		rts				rts
.ae0f					Int32Divide:
.ae0f	48		pha				pha 								; save AXY
.ae10	5a		phy				phy
.ae11	20 1b a5	jsr $a51b			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.ae14	20 40 a5	jsr $a540			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.ae17	a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.ae19					_I32DivideLoop:
.ae19	e8		inx				inx
.ae1a	e8		inx				inx
.ae1b	20 59 a5	jsr $a559			jsr 	NSMShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.ae1e	ca		dex				dex
.ae1f	ca		dex				dex
.ae20	20 5a a5	jsr $a55a			jsr 	NSMRotateLeft
.ae23	20 4f ae	jsr $ae4f			jsr 	DivideCheckSubtract 		; check if subtract possible
.ae26	90 03		bcc $ae2b			bcc 	_I32DivideNoCarryIn
.ae28	fe 0a 04	inc $040a,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.ae2b					_I32DivideNoCarryIn:
.ae2b	88		dey				dey 								; loop round till division completed.
.ae2c	d0 eb		bne $ae19			bne 	_I32DivideLoop
.ae2e	7a		ply				ply 								; restore AXY and exit
.ae2f	68		pla				pla
.ae30	60		rts				rts
.ae31					Int32ShiftDivide:
.ae31	48		pha				pha 								; save AY
.ae32	5a		phy				phy
.ae33	e8		inx				inx 								; clear S[X+2]
.ae34	e8		inx				inx
.ae35	20 44 a5	jsr $a544			jsr 	NSMSetZero
.ae38	ca		dex				dex
.ae39	ca		dex				dex
.ae3a	a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.ae3c					_I32SDLoop:
.ae3c	20 4f ae	jsr $ae4f			jsr 	DivideCheckSubtract 		; check if subtract possible
.ae3f	e8		inx				inx
.ae40	e8		inx				inx
.ae41	20 5a a5	jsr $a55a			jsr 	NSMRotateLeft				; shift 64 bit FPA left, rotating carry in
.ae44	ca		dex				dex
.ae45	ca		dex				dex
.ae46	20 5a a5	jsr $a55a			jsr 	NSMRotateLeft
.ae49	88		dey				dey 	 							; do 31 times
.ae4a	d0 f0		bne $ae3c			bne 	_I32SDLoop
.ae4c	7a		ply				ply 								; restore AY and exit
.ae4d	68		pla				pla
.ae4e	60		rts				rts
.ae4f					DivideCheckSubtract:
.ae4f	20 2c 9b	jsr $9b2c			jsr 	SubTopTwoStack 				; subtract Stack[X+1] from Stack[X+0]
.ae52	b0 04		bcs $ae58			bcs 	_DCSExit 					; if carry set, then could do, exit
.ae54	20 06 9b	jsr $9b06			jsr 	AddTopTwoStack 				; add it back in
.ae57	18		clc				clc 								; and return False
.ae58					_DCSExit:
.ae58	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/multiply.asm

.ae59					MulInteger:
.ae59	fa		plx				plx
.ae5a	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.ae5d	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.ae60	0a		asl a				asl 	a 							; shift reference bit into sign bit
.ae61	0a		asl a				asl 	a
.ae62	10 05		bpl $ae69			bpl 	_NotRef
.ae64	48		pha				pha
.ae65	20 2a 9e	jsr $9e2a			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.ae68	68		pla				pla
.ae69					_NotRef:
.ae69	0a		asl a				asl 	a 							; put MSB of type into A:7
.ae6a	30 0b		bmi $ae77			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.ae6c	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.ae6f	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.ae72	f0 06		beq $ae7a			beq 	_IntegerCode 				; if clear, then we have two integers
.ae74	4c ad b0	jmp $b0ad			jmp 	FloatingPointMultiply 							; otherwise at least one float.
.ae77					_StringData:
.ae77	4c 78 b3	jmp $b378			jmp 	NotDoneError							; at least one string - don't know both are strings.
.ae7a					_IntegerCode:
.ae7a	20 87 ae	jsr $ae87			jsr 	MultiplyShort
.ae7d	c9 00		cmp #$00			cmp 	#0
.ae7f	f0 05		beq $ae86			beq 	_MIExit
.ae81	a9 04		lda #$04		lda	#4
.ae83	4c 11 99	jmp $9911		jmp	ErrorHandler
.ae86					_MIExit:
.ae86	60		rts				rts
.ae87					MultiplyShort:
.ae87	5a		phy				phy 								; save Y
.ae88	20 1b a5	jsr $a51b			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.ae8b	20 40 a5	jsr $a540			jsr 	NSMSetZeroMantissaOnly 		; set mantissa S[X] to zero
.ae8e	a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.ae90					_I32MLoop:
.ae90	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.ae93	1d 12 04	ora $0412,x			ora 	NSMantissa1+2,x
.ae96	1d 1a 04	ora $041a,x			ora 	NSMantissa2+2,x
.ae99	1d 22 04	ora $0422,x			ora 	NSMantissa3+2,x
.ae9c	f0 28		beq $aec6			beq 	_I32MExit 					; exit if zero
.ae9e	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.aea1	29 01		and #$01			and 	#1
.aea3	f0 0e		beq $aeb3			beq 	_I32MNoAdd
.aea5	20 06 9b	jsr $9b06			jsr 	AddTopTwoStack 				; if so add S[X+1] to S[X+0]
.aea8	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.aeab	10 06		bpl $aeb3			bpl 	_I32MNoAdd
.aead					_I32ShiftRight:
.aead	20 67 a5	jsr $a567			jsr 	NSMShiftRight 				; shift S[X] right
.aeb0	c8		iny				iny 								; increment shift count
.aeb1	80 0a		bra $aebd			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.aeb3					_I32MNoAdd:
.aeb3	3c 21 04	bit $0421,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.aeb6	70 f5		bvs $aead			bvs 	_I32ShiftRight 				; instead.
.aeb8	e8		inx				inx
.aeb9	20 59 a5	jsr $a559			jsr 	NSMShiftLeft 				; shift additive S[X+1] left
.aebc	ca		dex				dex
.aebd					_I32MShiftUpper:
.aebd	e8		inx				inx 								; shift S[X+2] right
.aebe	e8		inx				inx
.aebf	20 67 a5	jsr $a567			jsr 	NSMShiftRight
.aec2	ca		dex				dex
.aec3	ca		dex				dex
.aec4	80 ca		bra $ae90			bra 	_I32MLoop 					; try again.
.aec6					_I32MExit:
.aec6	20 cc ae	jsr $aecc			jsr 	CalculateSign
.aec9	98		tya				tya 								; shift in A
.aeca	7a		ply				ply 								; restore Y and exit
.aecb	60		rts				rts
.aecc					CalculateSign:
.aecc	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.aecf	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; shift result left
.aed2	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.aed5	0a		asl a				asl 	a 							; shift bit 7 into carry
.aed6	7e 00 04	ror $0400,x			ror 	NSStatus,x 					; shift right into status byte.
.aed9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/scompare.asm

.9a82					CompareStrings:
.9a82	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check both are strings
.9a85	3d 01 04	and $0401,x			and 	NSStatus+1,x
.9a88	29 10		and #$10			and 	#NSBIsString
.9a8a	f0 2c		beq $9ab8			beq 	_CSTypeError
.9a8c	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy string addresses to zTemp0/1
.9a8f	85 36		sta $36				sta 	zTemp0
.9a91	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9a94	85 37		sta $37				sta 	zTemp0+1
.9a96	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.9a99	85 38		sta $38				sta 	zTemp1
.9a9b	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9a9e	85 39		sta $39				sta 	zTemp1+1
.9aa0	5a		phy				phy 								; save Y so we can access strings
.9aa1	a0 ff		ldy #$ff			ldy 	#$FF 						; -1 for pre increment.
.9aa3					_CSLoop:
.9aa3	c8		iny				iny
.9aa4	b1 36		lda ($36),y			lda 	(zTemp0),y 					; check if they are the same
.9aa6	d1 38		cmp ($38),y			cmp 	(zTemp1),y
.9aa8	d0 06		bne $9ab0			bne 	_CSDifferent
.9aaa	c9 00		cmp #$00			cmp 	#0 							; reached end ?
.9aac	d0 f5		bne $9aa3			bne 	_CSLoop 					; still comparing
.9aae					_CSExit:
.9aae	7a		ply				ply 								; reached end, return zero in A from EOS
.9aaf	60		rts				rts
.9ab0					_CSDifferent:
.9ab0	a9 ff		lda #$ff			lda 	#255 						; if < return $FF
.9ab2	90 fa		bcc $9aae			bcc		_CSExit
.9ab4	a9 01		lda #$01			lda 	#1 							; otherwise return 1.
.9ab6	80 f6		bra $9aae			bra 	_CSExit
.9ab8					_CSTypeError:
.9ab8	4c 6e b3	jmp $b36e			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/shifts.asm

.9abb					ShiftLeft:
.9abb	38		sec				sec
.9abc	80 01		bra $9abf			bra 	ShiftMain
.9abe					ShiftRight:
.9abe	18		clc				clc
.9abf					ShiftMain:
.9abf	fa		plx				plx 								; restore X
.9ac0	08		php				php 								; save direction
.9ac1	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9ac4	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9ac7	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9ac8	0a		asl a				asl 	a
.9ac9	10 05		bpl $9ad0			bpl 	_NotRef
.9acb	48		pha				pha
.9acc	20 2a 9e	jsr $9e2a			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9acf	68		pla				pla
.9ad0					_NotRef:
.9ad0	0a		asl a				asl 	a
.9ad1	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9ad3	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9ad6	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9ad9	f0 03		beq $9ade			beq 	_IntegerCode 				; if clear, then we have two integers
.9adb	4c 6e b3	jmp $b36e			jmp 	TypeError 					; anything else, type mismatch.
.9ade					_IntegerCode:
.9ade	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; check number < 32
.9ae1	29 e0		and #$e0			and 	#$E0
.9ae3	1d 11 04	ora $0411,x			ora 	NSMantissa1+1,x
.9ae6	1d 19 04	ora $0419,x			ora 	NSMantissa2+1,x
.9ae9	1d 21 04	ora $0421,x			ora 	NSMantissa3+1,x
.9aec	d0 13		bne $9b01			bne 	_SMExit0 					; if >= 32 it will always return zero.
.9aee					_SMLoop:
.9aee	de 09 04	dec $0409,x			dec 	NSMantissa0+1,x 			; predecrement, could do << 0
.9af1	30 11		bmi $9b04			bmi 	_SMExit 					; exit if done.
.9af3	28		plp				plp 								; restore direcition setting
.9af4	08		php				php
.9af5	90 05		bcc $9afc			bcc 	_SMRight
.9af7	20 59 a5	jsr $a559			jsr 	NSMShiftLeft 				; shift left if CS
.9afa	80 f2		bra $9aee			bra 	_SMLoop
.9afc					_SMRight:
.9afc	20 67 a5	jsr $a567			jsr 	NSMShiftRight 				; shift right if CC
.9aff	80 ed		bra $9aee			bra 	_SMLoop
.9b01					_SMExit0:
.9b01	20 44 a5	jsr $a544			jsr 	NSMSetZero 					; return zero.
.9b04					_SMExit:
.9b04	28		plp				plp 								; throw direction
.9b05	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/simple.asm

.9b06					AddTopTwoStack:
.9b06	18		clc				clc
.9b07	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9b0a	7d 09 04	adc $0409,x			adc 		NSMantissa0+1,x
.9b0d	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9b10	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9b13	7d 11 04	adc $0411,x			adc 		NSMantissa1+1,x
.9b16	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9b19	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9b1c	7d 19 04	adc $0419,x			adc 		NSMantissa2+1,x
.9b1f	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9b22	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9b25	7d 21 04	adc $0421,x			adc 		NSMantissa3+1,x
.9b28	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9b2b	60		rts				rts
.9b2c					SubTopTwoStack:
.9b2c	38		sec				sec
.9b2d	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9b30	fd 09 04	sbc $0409,x			sbc 		NSMantissa0+1,x
.9b33	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9b36	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9b39	fd 11 04	sbc $0411,x			sbc 		NSMantissa1+1,x
.9b3c	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9b3f	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9b42	fd 19 04	sbc $0419,x			sbc 		NSMantissa2+1,x
.9b45	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9b48	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9b4b	fd 21 04	sbc $0421,x			sbc 		NSMantissa3+1,x
.9b4e	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9b51	60		rts				rts
.9b52					AddInteger:
.9b52	fa		plx				plx
.9b53	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9b56	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9b59	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9b5a	0a		asl a				asl 	a
.9b5b	10 05		bpl $9b62			bpl 	_NotRef
.9b5d	48		pha				pha
.9b5e	20 2a 9e	jsr $9e2a			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9b61	68		pla				pla
.9b62					_NotRef:
.9b62	0a		asl a				asl 	a 							; put MSB of type into A:7
.9b63	30 0b		bmi $9b70			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.9b65	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9b68	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9b6b	f0 06		beq $9b73			beq 	_IntegerCode 				; if clear, then we have two integers
.9b6d	4c 35 af	jmp $af35			jmp 	FloatingPointAdd 							; otherwise at least one float.
.9b70					_StringData:
.9b70	4c 25 9a	jmp $9a25			jmp 	StringConcat							; at least one string - don't know both are strings.
.9b73					_IntegerCode:
.9b73					AddCode:
.9b73	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.9b76	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.9b79	10 8b		bpl $9b06			bpl 	AddTopTwoStack
.9b7b	20 2c 9b	jsr $9b2c			jsr 	SubTopTwoStack 				; do a physical subtraction
.9b7e	3c 20 04	bit $0420,x			bit 	NSMantissa3,x 				; result is +ve, okay
.9b81	10 09		bpl $9b8c			bpl 	_AddExit
.9b83	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; sign is that of 2nd value
.9b86	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9b89	20 f9 a4	jsr $a4f9			jsr 	NSMNegateMantissa 			; negate the mantissa and exit
.9b8c					_AddExit:
.9b8c	60		rts				rts
.9b8d					SubInteger:
.9b8d	fa		plx				plx
.9b8e	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9b91	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9b94	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9b95	0a		asl a				asl 	a
.9b96	10 05		bpl $9b9d			bpl 	_NotRef
.9b98	48		pha				pha
.9b99	20 2a 9e	jsr $9e2a			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9b9c	68		pla				pla
.9b9d					_NotRef:
.9b9d	0a		asl a				asl 	a 							; put MSB of type into A:7
.9b9e	30 0b		bmi $9bab			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.9ba0	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9ba3	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9ba6	f0 06		beq $9bae			beq 	_IntegerCode 				; if clear, then we have two integers
.9ba8	4c 3a af	jmp $af3a			jmp 	FloatingPointSub 							; otherwise at least one float.
.9bab					_StringData:
.9bab	4c 78 b3	jmp $b378			jmp 	NotDoneError							; at least one string - don't know both are strings.
.9bae					_IntegerCode:
.9bae	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; negate the second value.
.9bb1	49 80		eor #$80			eor 	#$80
.9bb3	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.9bb6	80 bb		bra $9b73			bra 	AddCode 					; and do the same code as add.
.9bb8					AndInteger:
.9bb8	fa		plx				plx
.9bb9	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9bbc	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9bbf	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9bc0	0a		asl a				asl 	a
.9bc1	10 05		bpl $9bc8			bpl 	_NotRef
.9bc3	48		pha				pha
.9bc4	20 2a 9e	jsr $9e2a			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9bc7	68		pla				pla
.9bc8					_NotRef:
.9bc8	0a		asl a				asl 	a
.9bc9	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9bcb	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9bce	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9bd1	f0 03		beq $9bd6			beq 	_IntegerCode 				; if clear, then we have two integers
.9bd3	4c 6e b3	jmp $b36e			jmp 	TypeError 					; anything else, type mismatch.
.9bd6					_IntegerCode:
.9bd6	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9bd9	3d 09 04	and $0409,x			and 		NSMantissa0+1,x
.9bdc	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9bdf	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9be2	3d 11 04	and $0411,x			and 		NSMantissa1+1,x
.9be5	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9be8	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9beb	3d 19 04	and $0419,x			and 		NSMantissa2+1,x
.9bee	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9bf1	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9bf4	3d 21 04	and $0421,x			and 		NSMantissa3+1,x
.9bf7	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9bfa	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.9bfd	60		rts				rts
.9bfe					OraInteger:
.9bfe	fa		plx				plx
.9bff	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9c02	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9c05	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9c06	0a		asl a				asl 	a
.9c07	10 05		bpl $9c0e			bpl 	_NotRef
.9c09	48		pha				pha
.9c0a	20 2a 9e	jsr $9e2a			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9c0d	68		pla				pla
.9c0e					_NotRef:
.9c0e	0a		asl a				asl 	a
.9c0f	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9c11	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9c14	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9c17	f0 03		beq $9c1c			beq 	_IntegerCode 				; if clear, then we have two integers
.9c19	4c 6e b3	jmp $b36e			jmp 	TypeError 					; anything else, type mismatch.
.9c1c					_IntegerCode:
.9c1c	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9c1f	1d 09 04	ora $0409,x			ora 		NSMantissa0+1,x
.9c22	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9c25	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9c28	1d 11 04	ora $0411,x			ora 		NSMantissa1+1,x
.9c2b	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9c2e	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9c31	1d 19 04	ora $0419,x			ora 		NSMantissa2+1,x
.9c34	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9c37	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9c3a	1d 21 04	ora $0421,x			ora 		NSMantissa3+1,x
.9c3d	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9c40	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.9c43	60		rts				rts
.9c44					EorInteger:
.9c44	fa		plx				plx
.9c45	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9c48	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9c4b	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9c4c	0a		asl a				asl 	a
.9c4d	10 05		bpl $9c54			bpl 	_NotRef
.9c4f	48		pha				pha
.9c50	20 2a 9e	jsr $9e2a			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9c53	68		pla				pla
.9c54					_NotRef:
.9c54	0a		asl a				asl 	a
.9c55	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9c57	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9c5a	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9c5d	f0 03		beq $9c62			beq 	_IntegerCode 				; if clear, then we have two integers
.9c5f	4c 6e b3	jmp $b36e			jmp 	TypeError 					; anything else, type mismatch.
.9c62					_IntegerCode:
.9c62	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9c65	5d 09 04	eor $0409,x			eor 		NSMantissa0+1,x
.9c68	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9c6b	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9c6e	5d 11 04	eor $0411,x			eor 		NSMantissa1+1,x
.9c71	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9c74	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9c77	5d 19 04	eor $0419,x			eor 		NSMantissa2+1,x
.9c7a	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9c7d	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9c80	5d 21 04	eor $0421,x			eor 		NSMantissa3+1,x
.9c83	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9c86	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.9c89	60		rts				rts
.9c8a					WordIndirect:
.9c8a	fa		plx				plx
.9c8b	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9c8e	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9c91	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9c92	0a		asl a				asl 	a
.9c93	10 05		bpl $9c9a			bpl 	_NotRef
.9c95	48		pha				pha
.9c96	20 2a 9e	jsr $9e2a			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9c99	68		pla				pla
.9c9a					_NotRef:
.9c9a	0a		asl a				asl 	a
.9c9b	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9c9d	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9ca0	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9ca3	f0 03		beq $9ca8			beq 	_IntegerCode 				; if clear, then we have two integers
.9ca5	4c 6e b3	jmp $b36e			jmp 	TypeError 					; anything else, type mismatch.
.9ca8					_IntegerCode:
.9ca8	20 73 9b	jsr $9b73			jsr 	AddCode 					; add the two values
.9cab	a9 22		lda #$22			lda 	#NSBIsReference+2 			; make a 2 byte reference
.9cad	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9cb0	60		rts				rts
.9cb1					ByteIndirect:
.9cb1	fa		plx				plx
.9cb2	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9cb5	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9cb8	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9cb9	0a		asl a				asl 	a
.9cba	10 05		bpl $9cc1			bpl 	_NotRef
.9cbc	48		pha				pha
.9cbd	20 2a 9e	jsr $9e2a			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9cc0	68		pla				pla
.9cc1					_NotRef:
.9cc1	0a		asl a				asl 	a
.9cc2	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9cc4	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9cc7	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9cca	f0 03		beq $9ccf			beq 	_IntegerCode 				; if clear, then we have two integers
.9ccc	4c 6e b3	jmp $b36e			jmp 	TypeError 					; anything else, type mismatch.
.9ccf					_IntegerCode:
.9ccf	20 73 9b	jsr $9b73			jsr 	AddCode 					; add the two values
.9cd2	a9 21		lda #$21			lda 	#NSBIsReference+1 			; make a 1 byte reference
.9cd4	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9cd7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/tostring.asm

.aeda					ConvertInt16:
.aeda	8d 08 04	sta $0408			sta 	NSMantissa0 				; set up as 32 bit conversion
.aedd	8e 10 04	stx $0410			stx 	NSMantissa1
.aee0	9c 18 04	stz $0418			stz 	NSMantissa2
.aee3	9c 20 04	stz $0420			stz 	NSMantissa3
.aee6	9c 00 04	stz $0400			stz 	NSStatus 					; positive integer
.aee9	a2 00		ldx #$00			ldx 	#0 							; stack level
.aeeb	a9 0a		lda #$0a			lda 	#10 						; base
.aeed	80 00		bra $aeef			bra 	ConvertInt32
.aeef					ConvertInt32:
.aeef	5a		phy				phy
.aef0	a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.aef2	2c 00 04	bit $0400			bit 	NSStatus 					; output a - if not negative.
.aef5	10 08		bpl $aeff			bpl 	_CI32NotNeg
.aef7	48		pha				pha
.aef8	a9 2d		lda #$2d			lda 	#'-'
.aefa	99 f7 05	sta $05f7,y			sta 	NumberBuffer,y
.aefd	c8		iny				iny
.aefe	68		pla				pla
.aeff					_CI32NotNeg:
.aeff	20 0d af	jsr $af0d			jsr 	_CI32DivideConvert 			; recursive conversion
.af02	a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.af04	99 f7 05	sta $05f7,y			sta 	NumberBuffer,y
.af07	7a		ply				ply
.af08	a2 05		ldx #$05			ldx 	#NumberBuffer >> 8
.af0a	a9 f7		lda #$f7			lda 	#NumberBuffer & $FF
.af0c	60		rts				rts
.af0d					_CI32DivideConvert:
.af0d	e8		inx				inx 								; write to next slot up
.af0e	20 46 a5	jsr $a546			jsr 	NSMSetByte
.af11	ca		dex				dex
.af12	20 0f ae	jsr $ae0f			jsr 	Int32Divide 				; divide
.af15	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; save remainder
.af18	48		pha				pha
.af19	20 be ad	jsr $adbe			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.af1c	20 74 a5	jsr $a574			jsr 	NSMIsZero 					; is it zero ?
.af1f	f0 06		beq $af27			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.af21	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.af24	20 0d af	jsr $af0d			jsr 	_CI32DivideConvert 			; and recusrively call.
.af27					_CI32NoRecurse:
.af27	68		pla				pla 								; remainder
.af28	c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII
.af2a	90 02		bcc $af2e			bcc 	_CI32NotHex
.af2c	69 26		adc #$26			adc 	#6+32
.af2e					_CI32NotHex:
.af2e	69 30		adc #$30			adc 	#48
.af30	99 f7 05	sta $05f7,y			sta 	NumberBuffer,y 				; write out and exit
.af33	c8		iny				iny
.af34	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/expression.asm


;******  Processing file: ./common/expressions/../generated/precedence.dat

.9cd8					PrecedenceLevel:
>9cd8	04					.byte	 4	; $00 <<
>9cd9	02					.byte	 2	; $01 <=
>9cda	02					.byte	 2	; $02 <>
>9cdb	00					.byte	 0	; $03 !!3
>9cdc	00					.byte	 0	; $04 ><
>9cdd	02					.byte	 2	; $05 >=
>9cde	04					.byte	 4	; $06 >>
>9cdf	00					.byte	 0	; $07 !!7
>9ce0	00					.byte	 0	; $08 !!8
>9ce1	00					.byte	 0	; $09 !!9
>9ce2	00					.byte	 0	; $0a !!10
>9ce3	00					.byte	 0	; $0b !!11
>9ce4	00					.byte	 0	; $0c !!12
>9ce5	00					.byte	 0	; $0d !!13
>9ce6	00					.byte	 0	; $0e !!14
>9ce7	00					.byte	 0	; $0f !!15
>9ce8	00					.byte	 0	; $10 @
>9ce9	00					.byte	 0	; $11 !!17
>9cea	00					.byte	 0	; $12 !!18
>9ceb	00					.byte	 0	; $13 [
>9cec	04					.byte	 4	; $14 \
>9ced	00					.byte	 0	; $15 ]
>9cee	01					.byte	 1	; $16 ^
>9cef	00					.byte	 0	; $17 _
>9cf0	00					.byte	 0	; $18 `
>9cf1	00					.byte	 0	; $19 !!25
>9cf2	00					.byte	 0	; $1a !!26
>9cf3	00					.byte	 0	; $1b {
>9cf4	01					.byte	 1	; $1c |
>9cf5	00					.byte	 0	; $1d }
>9cf6	00					.byte	 0	; $1e ~
>9cf7	00					.byte	 0	; $1f [7m<7F>[m
>9cf8	00					.byte	 0	; $20
>9cf9	05					.byte	 5	; $21 !
>9cfa	00					.byte	 0	; $22 "
>9cfb	00					.byte	 0	; $23 #
>9cfc	05					.byte	 5	; $24 $
>9cfd	04					.byte	 4	; $25 %
>9cfe	01					.byte	 1	; $26 &
>9cff	00					.byte	 0	; $27 '
>9d00	00					.byte	 0	; $28 (
>9d01	00					.byte	 0	; $29 )
>9d02	04					.byte	 4	; $2a *
>9d03	03					.byte	 3	; $2b +
>9d04	00					.byte	 0	; $2c ,
>9d05	03					.byte	 3	; $2d -
>9d06	00					.byte	 0	; $2e .
>9d07	04					.byte	 4	; $2f /
>9d08	00					.byte	 0	; $30 0
>9d09	00					.byte	 0	; $31 1
>9d0a	00					.byte	 0	; $32 2
>9d0b	00					.byte	 0	; $33 3
>9d0c	00					.byte	 0	; $34 4
>9d0d	00					.byte	 0	; $35 5
>9d0e	00					.byte	 0	; $36 6
>9d0f	00					.byte	 0	; $37 7
>9d10	00					.byte	 0	; $38 8
>9d11	00					.byte	 0	; $39 9
>9d12	00					.byte	 0	; $3a :
>9d13	00					.byte	 0	; $3b ;
>9d14	02					.byte	 2	; $3c <
>9d15	02					.byte	 2	; $3d =
>9d16	02					.byte	 2	; $3e >
>9d17	05					.byte	 5	; $3f ?

;******  Return to file: ./common/expressions/expression.asm

.9d18					EvaluateExpressionAt0:
.9d18	a2 00		ldx #$00			ldx 	#0 							; bottom stack level
.9d1a					EvaluateExpression:
.9d1a	a9 00		lda #$00			lda 	#0 							; lowest precedence level
.9d1c					EvaluateExpressionAtPrecedence:
.9d1c	48		pha				pha 								; save precedence level
.9d1d	20 eb 9f	jsr $9feb			jsr 	EvaluateTerm 				; evaluate term into level X.
.9d20	68		pla				pla 								; restore precedence level.
.9d21					_EXPRLoop:
.9d21	85 36		sta $36				sta 	zTemp0 						; save current precedence level.
.9d23	b1 30		lda ($30),y			lda 	(codePtr),y
.9d25	c9 40		cmp #$40			cmp		#$40 						; if >= $40 cannot be an operator
.9d27	b0 25		bcs $9d4e			bcs 	_EXPRExit
.9d29	da		phx				phx 								; read the operator precedence
.9d2a	aa		tax				tax
.9d2b	bd d8 9c	lda $9cd8,x			lda 	PrecedenceLevel,x
.9d2e	fa		plx				plx
.9d2f	c9 00		cmp #$00			cmp 	#0							; if zero exit (not an operator)
.9d31	f0 1b		beq $9d4e			beq 	_EXPRExit
.9d33	85 37		sta $37				sta 	zTemp0+1 					; save operator precedence level.
.9d35	a5 36		lda $36				lda 	zTemp0 						; compare current precedence vs. operator precedence
.9d37	c5 37		cmp $37				cmp 	zTemp0+1
.9d39	b0 13		bcs $9d4e			bcs		_EXPRExit 					; if current >= operator exit
.9d3b	48		pha				pha 								; save current precedence.
.9d3c	b1 30		lda ($30),y			lda 	(codePtr),y
.9d3e	c8		iny				iny
.9d3f	48		pha				pha
.9d40	a5 37		lda $37				lda 	zTemp0+1 					; get operator precedence level
.9d42	e8		inx				inx 								; work out the right hand side.
.9d43	20 1c 9d	jsr $9d1c			jsr 	EvaluateExpressionAtPrecedence
.9d46	ca		dex				dex
.9d47	68		pla				pla 								; get operator, call the code.
.9d48	20 51 9d	jsr $9d51			jsr 	_EXPRCaller
.9d4b	68		pla				pla 								; restore precedence level
.9d4c	80 d3		bra $9d21			bra 	_EXPRLoop 					; and go round.
.9d4e					_EXPRExit:
.9d4e	a5 36		lda $36				lda 	zTemp0 						; A = current precedence level.
.9d50	60		rts				rts
.9d51					_EXPRCaller:
.9d51	da		phx				phx 								; save on stack, first thing is to restore it
.9d52	0a		asl a				asl 	a 							; double so can use vectors into X
.9d53	aa		tax				tax
.9d54	7c 06 95	jmp ($9506,x)			jmp 	(VectorSetPunc,x) 			; and go to the code.

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/addsub.asm

.af35					FloatingPointAdd:
.af35	20 d6 b0	jsr $b0d6			jsr 	FloatPrepare 				; prepare for floats
.af38	80 0b		bra $af45			bra 	FloatAdd
.af3a					FloatingPointSub:
.af3a	20 d6 b0	jsr $b0d6			jsr 	FloatPrepare 				; prepare for floats
.af3d					FloatSubtract:
.af3d	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; negate FPB
.af40	49 80		eor #$80			eor 	#$80
.af42	9d 01 04	sta $0401,x			sta 	NSStatus+1,x				; and fall through.
.af45					FloatAdd:
.af45	48		pha				pha
.af46	5a		phy				phy
.af47	20 e7 b0	jsr $b0e7			jsr 	NSNormalise 				; normalise S[X]
.af4a	f0 54		beq $afa0			beq 	_FAReturn1
.af4c	e8		inx				inx 								; normalise S[X+1]
.af4d	20 e7 b0	jsr $b0e7			jsr 	NSNormalise
.af50	ca		dex				dex
.af51	c9 00		cmp #$00			cmp 	#0
.af53	f0 6f		beq $afc4			beq 	_FAExit 					; if so, just return A
.af55	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; are the exponents the same ?
.af58	dd 29 04	cmp $0429,x			cmp 	NSExponent+1,x
.af5b	f0 1b		beq $af78			beq 	_FAExponentsEqual
.af5d	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; work out the larger exponent
.af60	a8		tay				tay
.af61	38		sec				sec 								; do a signed comparison of the exponents.
.af62	fd 29 04	sbc $0429,x			sbc 	NSExponent+1,x
.af65	50 02		bvc $af69			bvc 	_FANoSignedChange
.af67	49 80		eor #$80			eor 	#$80
.af69					_FANoSignedChange:
.af69	29 80		and #$80			and 	#$80
.af6b	10 03		bpl $af70			bpl 	_FAHaveMax
.af6d	bc 29 04	ldy $0429,x			ldy 	NSExponent+1,x
.af70					_FAHaveMax:
.af70	20 c7 af	jsr $afc7			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.af73	e8		inx				inx
.af74	20 c7 af	jsr $afc7			jsr 	_FAShiftToExponent
.af77	ca		dex				dex
.af78					_FAExponentsEqual:
.af78	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; are the signs the same
.af7b	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.af7e	30 10		bmi $af90			bmi 	_FADifferentSigns
.af80	20 06 9b	jsr $9b06			jsr 	AddTopTwoStack 				; do the add of the mantissae
.af83	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.af86	10 3c		bpl $afc4			bpl 	_FAExit 					; if no, we are done.
.af88	20 67 a5	jsr $a567			jsr 	NSMShiftRight 				; shift A right, renormalising it.
.af8b	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; bump the exponent and exit
.af8e	80 34		bra $afc4			bra 	_FAExit
.af90					_FADifferentSigns:
.af90	20 2c 9b	jsr $9b2c			jsr 	SubTopTwoStack 				; subtract mantissa B from A
.af93	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; is the result negative ?
.af96	10 2c		bpl $afc4			bpl 	_FAExit 					; if no, we are done.
.af98	20 f0 a4	jsr $a4f0			jsr 	NSMNegate 					; netate result
.af9b	20 f9 a4	jsr $a4f9			jsr 	NSMNegateMantissa 			; negate (2'c) the mantissa
.af9e	80 24		bra $afc4			bra 	_FAExit
.afa0					_FAReturn1:
.afa0	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.afa3	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.afa6	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.afa9	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.afac	bd 19 04	lda $0419,x			lda 	NSMantissa2+1,x
.afaf	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.afb2	bd 21 04	lda $0421,x			lda 	NSMantissa3+1,x
.afb5	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.afb8	bd 29 04	lda $0429,x			lda 	NSExponent+1,x
.afbb	9d 28 04	sta $0428,x			sta 	NSExponent,x
.afbe	bd 01 04	lda $0401,x			lda 	NSStatus+1,x
.afc1	9d 00 04	sta $0400,x			sta 	NSStatus,x
.afc4					_FAExit:
.afc4	7a		ply				ply
.afc5	68		pla				pla
.afc6	60		rts				rts
.afc7					_FAShiftToExponent:
.afc7					_FAShiftToExponent2:
.afc7	98		tya				tya 								; compare Y to exponent
.afc8	dd 28 04	cmp $0428,x			cmp 	NSExponent,x 				; reached the exponent required ?
.afcb	f0 08		beq $afd5			beq 	_FASEExit 					; exit if so.
.afcd	20 67 a5	jsr $a567			jsr 	NSMShiftRight	 			; shift the mantissa right
.afd0	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; increment exponent
.afd3	80 f2		bra $afc7			bra 	_FAShiftToExponent2
.afd5					_FASEExit:
.afd5	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/compare.asm

.afd6					CompareFloat:
.afd6	20 3d af	jsr $af3d			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.afd9	bd 10 04	lda $0410,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.afdc	29 f8		and #$f8			and 	#$F8
.afde	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.afe1	1d 20 04	ora $0420,x			ora 	NSMantissa3,x
.afe4	f0 09		beq $afef			beq 	_FCExit 					; zero, so approximately identical
.afe6	a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.afe8	3c 00 04	bit $0400,x			bit 	NSStatus,x
.afeb	10 02		bpl $afef			bpl 	_FCExit
.afed					_FCNegative:
.afed	a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.afef					_FCExit:
.afef	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/divide.asm

.aff0					FDivideCommand:
.aff0	fa		plx				plx	 								; restore stack position
.aff1	20 d6 b0	jsr $b0d6			jsr 	FloatPrepare 				; prepare for floats
.aff4					FloatDivide:
.aff4	48		pha				pha
.aff5	e8		inx				inx
.aff6	20 e7 b0	jsr $b0e7			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.aff9	ca		dex				dex
.affa	c9 00		cmp #$00			cmp 	#0
.affc	f0 20		beq $b01e			beq 	_FDZero
.affe	20 e7 b0	jsr $b0e7			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.b001	f0 19		beq $b01c			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.b003	20 31 ae	jsr $ae31			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.b006	20 be ad	jsr $adbe			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.b009	20 e7 b0	jsr $b0e7			jsr		NSNormalise 				; renormalise
.b00c	20 cc ae	jsr $aecc			jsr 	CalculateSign 				; calculate result sign
.b00f	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; calculate exponent
.b012	38		sec				sec
.b013	fd 29 04	sbc $0429,x			sbc 	NSExponent+1,x
.b016	38		sec				sec
.b017	e9 1e		sbc #$1e			sbc 	#30
.b019	9d 28 04	sta $0428,x			sta 	NSExponent,x
.b01c					_FDExit:
.b01c	68		pla				pla
.b01d	60		rts				rts
.b01e					_FDZero:
.b01e	a9 03		lda #$03		lda	#3
.b020	4c 11 99	jmp $9911		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/fractional.asm

.b023					FloatFractionalPart:
.b023	5a		phy				phy
.b024	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; take absolute value
.b027	29 7f		and #$7f			and 	#$7F
.b029	9d 00 04	sta $0400,x			sta 	NSStatus,x
.b02c	20 e7 b0	jsr $b0e7			jsr 	NSNormalise
.b02f	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.b032	38		sec				sec
.b033	e9 e0		sbc #$e0			sbc 	#$E0
.b035	90 31		bcc $b068			bcc 	_FFPExit 					; already fractional
.b037	c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.b039	b0 2a		bcs $b065			bcs 	_FFPZero
.b03b	a8		tay				tay 								; put count to do in Y
.b03c	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; do each in turn.
.b03f	20 6a b0	jsr $b06a			jsr 	_FFPPartial
.b042	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.b045	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.b048	20 6a b0	jsr $b06a			jsr 	_FFPPartial
.b04b	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.b04e	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.b051	20 6a b0	jsr $b06a			jsr 	_FFPPartial
.b054	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.b057	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.b05a	20 6a b0	jsr $b06a			jsr 	_FFPPartial
.b05d	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.b060	20 74 a5	jsr $a574			jsr 	NSMIsZero 					; zeroed check.
.b063	d0 03		bne $b068			bne 	_FFPExit
.b065					_FFPZero:
.b065	20 44 a5	jsr $a544			jsr 	NSMSetZero
.b068					_FFPExit:
.b068	7a		ply				ply
.b069	60		rts				rts
.b06a					_FFPPartial:
.b06a	c0 00		cpy #$00			cpy 	#0 							; no more to do
.b06c	f0 17		beq $b085			beq 	_FFFPPExit
.b06e	c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.b070	b0 0c		bcs $b07e			bcs 	_FFFPPWholeByte
.b072	5a		phy				phy
.b073					_FFFPPLeft:
.b073	0a		asl a				asl 	a
.b074	88		dey				dey
.b075	d0 fc		bne $b073			bne 	_FFFPPLeft
.b077	7a		ply				ply
.b078					_FFFPPRight:
.b078	4a		lsr a				lsr 	a
.b079	88		dey				dey
.b07a	d0 fc		bne $b078			bne 	_FFFPPRight
.b07c	80 07		bra $b085			bra 	_FFFPPExit
.b07e					_FFFPPWholeByte:
.b07e	98		tya				tya 								; subtract 8 from count
.b07f	38		sec				sec
.b080	e9 08		sbc #$08			sbc 	#8
.b082	a8		tay				tay
.b083	a9 00		lda #$00			lda 	#0 							; and clear all
.b085					_FFFPPExit:
.b085	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/integer.asm

.b086					FloatIntegerPart:
.b086	48		pha				pha
.b087	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; is it integer already ?
.b08a	f0 1f		beq $b0ab			beq 	_FIPExit 					; if so do nothing
.b08c	20 74 a5	jsr $a574			jsr 	NSMIsZero 					; is it zero ?
.b08f	f0 17		beq $b0a8			beq 	_FIPZero 					; if so return zero.
.b091	20 e7 b0	jsr $b0e7			jsr 	NSNormalise 				; normalise
.b094	f0 12		beq $b0a8			beq 	_FIPZero 					; normalised to zero, exit zero
.b096					_FIPShift:
.b096	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.b099	10 08		bpl $b0a3			bpl 	_FIPCheckZero
.b09b	20 67 a5	jsr $a567			jsr 	NSMShiftRight 				; shift mantissa right
.b09e	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; bump exponent
.b0a1	80 f3		bra $b096			bra 	_FIPShift
.b0a3					_FIPCheckZero:
.b0a3	20 74 a5	jsr $a574			jsr 	NSMIsZero 					; avoid -0 problem
.b0a6	d0 03		bne $b0ab			bne 	_FIPExit 					; set to zero if mantissa zero.
.b0a8					_FIPZero:
.b0a8	20 44 a5	jsr $a544			jsr 	NSMSetZero
.b0ab					_FIPExit:
.b0ab	68		pla				pla
.b0ac	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/multiply.asm

.b0ad					FloatingPointMultiply:
.b0ad	20 d6 b0	jsr $b0d6			jsr 	FloatPrepare 				; prepare for floats
.b0b0					FloatMultiply:
.b0b0	48		pha				pha
.b0b1	20 e7 b0	jsr $b0e7			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.b0b4	f0 1b		beq $b0d1			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.b0b6	e8		inx				inx
.b0b7	20 e7 b0	jsr $b0e7			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.b0ba	ca		dex				dex
.b0bb	c9 00		cmp #$00			cmp 	#0
.b0bd	f0 0f		beq $b0ce			beq 	_FDSetZero
.b0bf	20 87 ae	jsr $ae87			jsr 	MultiplyShort 				; calculate the result.
.b0c2	7d 28 04	adc $0428,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.b0c5	18		clc				clc
.b0c6	7d 29 04	adc $0429,x			adc 	NSExponent+1,x
.b0c9	9d 28 04	sta $0428,x			sta 	NSExponent,x
.b0cc	80 03		bra $b0d1			bra 	_FDExit
.b0ce					_FDSetZero:
.b0ce	20 44 a5	jsr $a544			jsr 	NSMSetZero 					; return 0
.b0d1					_FDExit:
.b0d1	20 e7 b0	jsr $b0e7			jsr 	NSNormalise 				; normalise the result
.b0d4	68		pla				pla
.b0d5	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/utility.asm

.b0d6					FloatPrepare:
.b0d6	20 2a 9e	jsr $9e2a			jsr 	DereferenceTopTwo 			; dereference the top two values
.b0d9	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check ints/floats
.b0dc	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.b0df	29 10		and #$10			and 	#NSBIsString
.b0e1	d0 01		bne $b0e4			bne 	_FDType
.b0e3	60		rts				rts
.b0e4					_FDType:
.b0e4	4c 6e b3	jmp $b36e			jmp 	TypeError
.b0e7					NSNormalise:
.b0e7	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; make float, keep sign
.b0ea	29 80		and #$80			and 	#$80
.b0ec	09 08		ora #$08			ora 	#NSTFloat
.b0ee	9d 00 04	sta $0400,x			sta 	NSStatus,x
.b0f1	20 74 a5	jsr $a574			jsr 	NSMIsZero 					; if zero exit
.b0f4	d0 09		bne $b0ff			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.b0f6	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; clear the sign bit.
.b0f9	7e 00 04	ror $0400,x			ror 	NSStatus,x 					; (no -0)
.b0fc	a9 00		lda #$00			lda 	#0 							; set Z flag
.b0fe	60		rts				rts
.b0ff					_NSNormaliseOptimise:
.b0ff	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; upper byte zero ?
.b102	d0 22		bne $b126			bne 	_NSNormaliseLoop
.b104	bd 18 04	lda $0418,x			lda 	NSMantissa2,x 				; byte normalise
.b107	30 1d		bmi $b126			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.b109	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.b10c	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.b10f	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.b112	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.b115	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.b118	9e 08 04	stz $0408,x			stz 	NSMantissa0,x
.b11b	bd 28 04	lda $0428,x			lda 	NSExponent,x
.b11e	38		sec				sec
.b11f	e9 08		sbc #$08			sbc 	#8
.b121	9d 28 04	sta $0428,x			sta 	NSExponent,x
.b124	80 d9		bra $b0ff			bra 	_NSNormaliseOptimise
.b126					_NSNormaliseLoop:
.b126	3c 20 04	bit $0420,x			bit 	NSMantissa3,x 				; bit 30 set ?
.b129	70 08		bvs $b133			bvs 	_NSNExit 					; exit if so with Z flag clear
.b12b	20 59 a5	jsr $a559			jsr 	NSMShiftLeft 				; shift mantissa left
.b12e	de 28 04	dec $0428,x			dec 	NSExponent,x 				; adjust exponent
.b131	80 f3		bra $b126			bra 	_NSNormaliseLoop
.b133					_NSNExit:
.b133	a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.b135	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignnumber.asm

.9d57					AssignNumber:
.9d57	5a		phy				phy
.9d58	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy mantissa0/1 to zTemp0
.9d5b	85 36		sta $36				sta 	zTemp0
.9d5d	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9d60	85 37		sta $37				sta 	zTemp0+1
.9d62	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; clear reference bits
.9d65	29 df		and #$df			and 	#(NSBIsReference ^ $FF)
.9d67	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9d6a	29 18		and #$18			and 	#NSBTypeMask				; assigning to a float ?
.9d6c	c9 08		cmp #$08			cmp 	#NSTFloat
.9d6e	f0 2a		beq $9d9a			beq 	_ANFloat
.9d70	bd 29 04	lda $0429,x			lda		NSExponent+1,x 				; is it a float
.9d73	f0 05		beq $9d7a			beq		_ANNotFloat
.9d75	e8		inx				inx
.9d76	20 86 b0	jsr $b086			jsr 	FloatIntegerPart 			; make it an integer
.9d79	ca		dex				dex
.9d7a					_ANNotFloat:
.9d7a	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if byte/word reference.
.9d7d	29 03		and #$03			and 	#3
.9d7f	d0 05		bne $9d86			bne 	_ANByteWord
.9d81	20 a6 9d	jsr $9da6			jsr 	_ANCopy4PackSign 			; copy all 4 bytes and sign
.9d84	80 1e		bra $9da4			bra 	_ANExit
.9d86					_ANByteWord:
.9d86	48		pha				pha 								; save count
.9d87	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; do byte
.9d8a	92 36		sta ($36)			sta 	(zTemp0)
.9d8c	68		pla				pla
.9d8d	c9 01		cmp #$01			cmp	 	#1
.9d8f	f0 13		beq $9da4			beq 	_ANExit
.9d91	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x 			; do word
.9d94	a0 01		ldy #$01			ldy 	#1
.9d96	91 36		sta ($36),y			sta 	(zTemp0),y
.9d98	80 0a		bra $9da4			bra 	_ANExit
.9d9a					_ANFloat:
.9d9a	20 a6 9d	jsr $9da6			jsr 	_ANCopy4PackSign 			; write all 4 bytes and packed sign
.9d9d	bd 29 04	lda $0429,x			lda 	NSExponent+1,x 				; copy exponent to slot 4
.9da0	a0 04		ldy #$04			ldy 	#4
.9da2	91 36		sta ($36),y			sta 	(zTemp0),y
.9da4					_ANExit:
.9da4	7a		ply				ply
.9da5	60		rts				rts
.9da6					_ANCopy4PackSign:
.9da6	a0 03		ldy #$03			ldy 	#3
.9da8	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; sign bit into status
.9dab	29 80		and #$80			and 	#$80 						; put into high bit of mantissa 3
.9dad	1d 21 04	ora $0421,x			ora 	NSMantissa3+1,x
.9db0	91 36		sta ($36),y			sta 	(zTemp0),y
.9db2	88		dey				dey
.9db3	bd 19 04	lda $0419,x			lda 	NSMantissa2+1,x
.9db6	91 36		sta ($36),y			sta 	(zTemp0),y
.9db8	88		dey				dey
.9db9	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9dbc	91 36		sta ($36),y			sta 	(zTemp0),y
.9dbe	88		dey				dey
.9dbf	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.9dc2	91 36		sta ($36),y			sta 	(zTemp0),y
.9dc4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignstring.asm

.9dc5					AssignString:
.9dc5	5a		phy				phy
.9dc6	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.9dc9	85 38		sta $38				sta 	zTemp1
.9dcb	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9dce	85 39		sta $39				sta 	zTemp1+1
.9dd0	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9dd3	85 36		sta $36				sta 	zTemp0
.9dd5	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9dd8	85 37		sta $37				sta 	zTemp0+1
.9dda	a0 01		ldy #$01			ldy 	#1 							; the high byte of the target address
.9ddc	b1 36		lda ($36),y			lda 	(zTemp0),y
.9dde	f0 23		beq $9e03			beq 	_ASNewStringRequired 		; if zero, a new string is required.
.9de0	38		sec				sec 								; put Address-2 in zsTemp - this is the size/status/string record
.9de1	b2 36		lda ($36)			lda 	(zTemp0) 					; of concreted strings
.9de3	e9 02		sbc #$02			sbc 	#2
.9de5	85 3c		sta $3c				sta 	zsTemp
.9de7	a0 01		ldy #$01			ldy 	#1
.9de9	b1 36		lda ($36),y			lda 	(zTemp0),y
.9deb	e9 00		sbc #$00			sbc 	#0
.9ded	85 3d		sta $3d				sta 	zsTemp+1
.9def	a0 ff		ldy #$ff			ldy 	#$FF 						; get length of new string
.9df1					_ASGetLength:
.9df1	c8		iny				iny
.9df2	b1 38		lda ($38),y			lda 	(zTemp1),y
.9df4	d0 fb		bne $9df1			bne 	_ASGetLength
.9df6	98		tya				tya 								; is this length <= current length
.9df7	d2 3c		cmp ($3c)			cmp 	(zsTemp)
.9df9	90 20		bcc $9e1b			bcc 	_ASCopyString
.9dfb	f0 1e		beq $9e1b			beq 	_ASCopyString
.9dfd	a9 80		lda #$80			lda 	#$80 						; mark as unused.
.9dff	a0 01		ldy #$01			ldy 	#1
.9e01	91 3c		sta ($3c),y			sta 	(zsTemp),y
.9e03					_ASNewStringRequired:
.9e03	e8		inx				inx 								; concrete the new string.
.9e04	20 64 b6	jsr $b664			jsr 	StringConcrete				; (breaks zTemp1/2, not zTemp0 and zsTemp)
.9e07	ca		dex				dex
.9e08	18		clc				clc
.9e09	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; copy that new address to the reference.
.9e0c	69 02		adc #$02			adc 	#2 							; add two to point at the data.
.9e0e	92 36		sta ($36)			sta 	(zTemp0)
.9e10	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9e13	69 00		adc #$00			adc 	#0
.9e15	a0 01		ldy #$01			ldy 	#1
.9e17	91 36		sta ($36),y			sta 	(zTemp0),y
.9e19	80 0d		bra $9e28			bra 	_ASExit
.9e1b					_ASCopyString:
.9e1b	a0 00		ldy #$00			ldy 	#0
.9e1d					_ASCopyLoop:
.9e1d	b1 38		lda ($38),y			lda 	(zTemp1),y
.9e1f	c8		iny				iny
.9e20	c8		iny				iny
.9e21	91 3c		sta ($3c),y			sta 	(zsTemp),y
.9e23	88		dey				dey
.9e24	c9 00		cmp #$00			cmp 	#0
.9e26	d0 f5		bne $9e1d			bne 	_ASCopyLoop
.9e28					_ASExit:
.9e28	7a		ply				ply
.9e29	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/dereference.asm

.9e2a					DereferenceTopTwo:
.9e2a	e8		inx				inx
.9e2b	20 2f 9e	jsr $9e2f			jsr 	Dereference 				; deref x+1
.9e2e	ca		dex				dex  								; falls through to deref x
.9e2f					Dereference:
.9e2f	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get the status byte
.9e32	29 20		and #$20			and 	#NSBIsReference 			; shift sign bit to carry, reference to bit 7
.9e34	f0 57		beq $9e8d			beq 	_DRFExit 					; not a reference
.9e36	5a		phy				phy
.9e37	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address to dereference into zTemp0
.9e3a	85 36		sta $36				sta 	zTemp0
.9e3c	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9e3f	85 37		sta $37				sta 	zTemp0+1
.9e41	9e 10 04	stz $0410,x			stz 	NSMantissa1,x 				; clear second byte.
.9e44	b2 36		lda ($36)			lda 	(zTemp0) 					; do the first byte
.9e46	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9e49	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get status byte.
.9e4c	29 18		and #$18			and 	#NSBTypeMask 				; what type is it ?
.9e4e	c9 10		cmp #$10			cmp 	#NSTString 					; if string, dereference two
.9e50	f0 0f		beq $9e61			beq 	_DRFDereferenceTwo
.9e52	c9 08		cmp #$08			cmp 	#NSTFloat 					; if float, do full dereference.
.9e54	f0 39		beq $9e8f			beq 	_DRFFull
.9e56	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be integer - how many bytes ?
.9e59	29 03		and #$03			and 	#3
.9e5b	f0 32		beq $9e8f			beq 	_DRFFull 					; the whole word
.9e5d	c9 01		cmp #$01			cmp 	#1 							; is it 10 (e.g. 2 bytes)
.9e5f	f0 07		beq $9e68			beq		_DRFClear23 				; no, one byte, clear 2 & 3 and exit
.9e61					_DRFDereferenceTwo:
.9e61	a0 01		ldy #$01			ldy 	#1
.9e63	b1 36		lda ($36),y			lda 	(zTemp0),y
.9e65	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9e68					_DRFClear23:
.9e68	9e 18 04	stz $0418,x			stz 	NSMantissa2,x 				; clear upper bytes, only read 1 or 2 bytes
.9e6b	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.9e6e	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; make it a value of that type.
.9e71	29 18		and #$18			and 	#NSBTypeMask
.9e73	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9e76	c9 10		cmp #$10			cmp 	#NSTString  				; is it a string
.9e78	d0 12		bne $9e8c			bne 	_DRFNotString
.9e7a	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; check address is zero
.9e7d	1d 10 04	ora $0410,x			ora 	NSMantissa1,x
.9e80	d0 0a		bne $9e8c			bne 	_DRFNotString
.9e82	a9 8e		lda #$8e			lda 	#_DRFNullString & $FF 		; if so, return reference to ""
.9e84	9d 08 04	sta $0408,x			sta 	NSMantissa0,X
.9e87	a9 9e		lda #$9e			lda 	#_DRFNullString >> 8
.9e89	9d 10 04	sta $0410,x			sta 	NSMantissa1,X
.9e8c					_DRFNotString
.9e8c	7a		ply				ply 								; restore Y and exit
.9e8d					_DRFExit:
.9e8d	60		rts				rts
.9e8e					_DRFNullString:
>9e8e	00						.byte 	0
.9e8f					_DRFFull:
.9e8f	a0 01		ldy #$01			ldy 	#1 							; get remaining 3 bytes.
.9e91	b1 36		lda ($36),y			lda 	(zTemp0),y
.9e93	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9e96	c8		iny				iny
.9e97	b1 36		lda ($36),y			lda 	(zTemp0),y
.9e99	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9e9c	c8		iny				iny
.9e9d	b1 36		lda ($36),y			lda 	(zTemp0),y
.9e9f	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9ea2	9e 28 04	stz $0428,x			stz 	NSExponent,x 				; clear exponent.
.9ea5	bd 00 04	lda $0400,x			lda		NSStatus,x 					; see if type is integer
.9ea8	29 18		and #$18			and 	#NSBTypeMask  				; type information only
.9eaa	9d 00 04	sta $0400,x			sta 	NSStatus,x 					; update it back.
.9ead	f0 06		beq $9eb5			beq 	_DRFNoExponent
.9eaf	c8		iny				iny 								; if not, read the exponent as well.
.9eb0	b1 36		lda ($36),y			lda 	(zTemp0),y
.9eb2	9d 28 04	sta $0428,x			sta 	NSExponent,x
.9eb5					_DRFNoExponent:
.9eb5	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; is the most significant bit set ?
.9eb8	10 0d		bpl $9ec7			bpl 	_DRFExit2 					; if not, then exit.
.9eba	29 7f		and #$7f			and 	#$7F 						; clear that bit.
.9ebc	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9ebf	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; set the sign flag
.9ec2	09 80		ora #$80			ora 	#NSBIsNegative
.9ec4	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9ec7					_DRFExit2:
.9ec7	7a		ply				ply
.9ec8	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/number.asm

=1					ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2					ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3					ESTA_Decimal = 3 							; fractional part.
.9ec9					EncodeNumberStart:
.9ec9	38		sec				sec
.9eca	80 01		bra $9ecd			bra 	EncodeNumberContinue+1
.9ecc					EncodeNumberContinue:
.9ecc	18		clc				clc
.9ecd					EncodeNumber:
.9ecd	08		php				php 								; save reset.
.9ece	c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.9ed0	f0 12		beq $9ee4			beq 	_ENIsOkay
.9ed2	c9 30		cmp #$30			cmp 	#"0"
.9ed4	90 04		bcc $9eda			bcc 	_ENBadNumber
.9ed6	c9 3a		cmp #$3a			cmp 	#"9"+1
.9ed8	90 0a		bcc $9ee4			bcc 	_ENIsOkay
.9eda					_ENBadNumber:
.9eda	28		plp				plp 								; throw saved reset
.9edb	ad 85 04	lda $0485			lda 	EncodeState 				; decimal mode, construct final number
.9ede	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.9ee0	f0 7e		beq $9f60			beq 	_ENConstructFinal
.9ee2					_ENFail:
.9ee2	18		clc				clc 								; not allowed
.9ee3	60		rts				rts
.9ee4					_ENIsOkay:
.9ee4	28		plp				plp 								; are we restarting
.9ee5	90 15		bcc $9efc			bcc 	_ENNoRestart
.9ee7					_ENStartEncode:
.9ee7	c9 2e		cmp #$2e			cmp 	#'.'						; first is DP
.9ee9	f0 0c		beq $9ef7			beq 	_ENFirstDP
.9eeb	29 0f		and #$0f			and 	#15 						; put digit in mantissa
.9eed	20 46 a5	jsr $a546			jsr 	NSMSetByte
.9ef0	a9 01		lda #$01			lda 	#ESTA_Low
.9ef2					_ENExitChange:
.9ef2	8d 85 04	sta $0485			sta 	EncodeState 				; save new state
.9ef5	38		sec				sec
.9ef6	60		rts				rts
.9ef7					_ENFirstDP:
.9ef7	20 44 a5	jsr $a544			jsr 	NSMSetZero 					; clear integer part
.9efa	80 3f		bra $9f3b			bra 	_ESTASwitchFloat			; go straight to float and exi
.9efc					_ENNoRestart:
.9efc	48		pha				pha 								; save on stack.
.9efd	ad 85 04	lda $0485			lda 	EncodeState 				; get current state
.9f00	c9 01		cmp #$01			cmp 	#ESTA_Low
.9f02	f0 09		beq $9f0d			beq  	_ESTALowState
.9f04	c9 02		cmp #$02			cmp 	#ESTA_High
.9f06	f0 29		beq $9f31			beq 	_ESTAHighState
.9f08	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.9f0a	f0 3b		beq $9f47			beq 	_ESTADecimalState
>9f0c	db						.byte 	$DB 						; causes a break in the emulator
.9f0d					_ESTALowState:
.9f0d	68		pla				pla 								; get value back
.9f0e	c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.9f10	f0 29		beq $9f3b			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.9f12	29 0f		and #$0f			and 	#15 						; make digit
.9f14	8d 86 04	sta $0486			sta 	DigitTemp 					; save it.
.9f17	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.9f1a	0a		asl a				asl 	a
.9f1b	0a		asl a				asl 	a
.9f1c	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.9f1f	0a		asl a				asl 	a
.9f20	6d 86 04	adc $0486			adc 	DigitTemp
.9f23	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9f26	c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.9f28	90 05		bcc $9f2f			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.9f2a	a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.9f2c	8d 85 04	sta $0485			sta 	EncodeState
.9f2f					_ESTANoSwitch:
.9f2f	38		sec				sec
.9f30	60		rts				rts
.9f31					_ESTAHighState:
.9f31	68		pla				pla 								; get value back
.9f32	c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.9f34	f0 05		beq $9f3b			beq 	_ESTASwitchFloat
.9f36	20 9a 9f	jsr $9f9a			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.9f39	38		sec				sec
.9f3a	60		rts				rts
.9f3b					_ESTASwitchFloat:
.9f3b	9c 87 04	stz $0487			stz 	DecimalCount
.9f3e	e8		inx				inx 								; zero the decimal additive.
.9f3f	20 44 a5	jsr $a544			jsr 	NSMSetZero
.9f42	ca		dex				dex
.9f43	a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.9f45	80 ab		bra $9ef2			bra 	_ENExitChange
.9f47					_ESTADecimalState:
.9f47	68		pla				pla 								; digit.
.9f48	c9 2e		cmp #$2e			cmp 	#"." 						; fail on 2nd decimal point.
.9f4a	f0 96		beq $9ee2			beq 	_ENFail
.9f4c	e8		inx				inx 								; put digit into fractional part of X+1
.9f4d	20 9a 9f	jsr $9f9a			jsr 	ESTAShiftDigitIntoMantissa
.9f50	ca		dex				dex
.9f51	ee 87 04	inc $0487			inc 	DecimalCount 				; bump the count of decimals
.9f54	ad 87 04	lda $0487			lda 	DecimalCount
.9f57	c9 0b		cmp #$0b			cmp 	#11
.9f59	f0 02		beq $9f5d			beq 	_ESTADSFail
.9f5b	38		sec				sec
.9f5c	60		rts				rts
.9f5d					_ESTADSFail:
.9f5d	4c 69 b3	jmp $b369			jmp 	RangeError
.9f60					_ENConstructFinal:
.9f60	ad 87 04	lda $0487			lda 	DecimalCount 				; get decimal count
.9f63	f0 33		beq $9f98			beq 	_ENCFExit 					; no decimals
.9f65	5a		phy				phy
.9f66	0a		asl a				asl 	a 							; x 4 and CLC
.9f67	0a		asl a				asl 	a
.9f68	6d 87 04	adc $0487			adc 	DecimalCount
.9f6b	a8		tay				tay
.9f6c	b9 28 b3	lda $b328,y			lda 	DecimalScalarTable-5,y 		; copy decimal scalar to X+2
.9f6f	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.9f72	b9 29 b3	lda $b329,y			lda 	DecimalScalarTable-5+1,y
.9f75	9d 12 04	sta $0412,x			sta 	NSMantissa1+2,x
.9f78	b9 2a b3	lda $b32a,y			lda 	DecimalScalarTable-5+2,y
.9f7b	9d 1a 04	sta $041a,x			sta 	NSMantissa2+2,x
.9f7e	b9 2b b3	lda $b32b,y			lda 	DecimalScalarTable-5+3,y
.9f81	9d 22 04	sta $0422,x			sta 	NSMantissa3+2,x
.9f84	b9 2c b3	lda $b32c,y			lda 	DecimalScalarTable-5+4,y
.9f87	9d 2a 04	sta $042a,x			sta 	NSExponent+2,x
.9f8a	a9 08		lda #$08			lda 	#NSTFloat
.9f8c	9d 02 04	sta $0402,x			sta 	NSStatus+2,x
.9f8f	7a		ply				ply
.9f90	e8		inx				inx 								; multiply decimal const by decimal scalar
.9f91	20 b0 b0	jsr $b0b0			jsr 	FloatMultiply
.9f94	ca		dex				dex
.9f95	20 45 af	jsr $af45			jsr 	FloatAdd 					; add to integer part.
.9f98					_ENCFExit:
.9f98	18		clc				clc 								; reject the digit.
.9f99	60		rts				rts
.9f9a					ESTAShiftDigitIntoMantissa:
.9f9a	29 0f		and #$0f			and 	#15 						; save digit
.9f9c	48		pha				pha
.9f9d	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; push mantissa on stack
.9fa0	48		pha				pha
.9fa1	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.9fa4	48		pha				pha
.9fa5	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9fa8	48		pha				pha
.9fa9	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9fac	48		pha				pha
.9fad	20 59 a5	jsr $a559			jsr 	NSMShiftLeft 				; x 2
.9fb0	20 59 a5	jsr $a559			jsr 	NSMShiftLeft 				; x 4
.9fb3	18		clc				clc 								; pop mantissa and add
.9fb4	68		pla				pla
.9fb5	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.9fb8	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9fbb	68		pla				pla
.9fbc	7d 10 04	adc $0410,x			adc 	NSMantissa1,x
.9fbf	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9fc2	68		pla				pla
.9fc3	7d 18 04	adc $0418,x			adc 	NSMantissa2,x
.9fc6	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9fc9	68		pla				pla
.9fca	7d 20 04	adc $0420,x			adc 	NSMantissa3,x
.9fcd	9d 20 04	sta $0420,x			sta 	NSMantissa3,x 				; x 5
.9fd0	20 59 a5	jsr $a559			jsr 	NSMShiftLeft 				; x 10
.9fd3	68		pla				pla 								; add digit
.9fd4	18		clc				clc
.9fd5	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.9fd8	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9fdb	90 0d		bcc $9fea			bcc 	_ESTASDExit
.9fdd	fe 10 04	inc $0410,x			inc 	NSMantissa1,x
.9fe0	d0 08		bne $9fea			bne 	_ESTASDExit
.9fe2	fe 18 04	inc $0418,x			inc 	NSMantissa2,x
.9fe5	d0 03		bne $9fea			bne 	_ESTASDExit
.9fe7	fe 20 04	inc $0420,x			inc 	NSMantissa3,x
.9fea					_ESTASDExit:
.9fea	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/term.asm

.9feb					EvaluateTerm:
.9feb	b1 30		lda ($30),y			lda 	(codePtr),y
.9fed	30 18		bmi $a007			bmi 	_ETCheckUnary 				; unary function ? (text ones)
.9fef	c9 40		cmp #$40			cmp 	#$40 						; 40-7F => identifier reference
.9ff1	b0 6f		bcs $a062			bcs 	_ETVariable
.9ff3	c9 30		cmp #$30			cmp 	#'0' 						; is it a number
.9ff5	90 6e		bcc $a065			bcc 	_ETPuncUnary 				; if not it might be a punctuation unary.
.9ff7	c9 3a		cmp #$3a			cmp 	#'9'+1
.9ff9	b0 6a		bcs $a065			bcs 	_ETPuncUnary
.9ffb	20 c9 9e	jsr $9ec9			jsr 	EncodeNumberStart 			; can't fail as it's 0-9 !
.9ffe					_ETNumber:
.9ffe	c8		iny				iny 								; keep encoding until we have the numbers
.9fff	b1 30		lda ($30),y			lda 	(codePtr),y
.a001	20 cc 9e	jsr $9ecc			jsr 	EncodeNumberContinue
.a004	b0 f8		bcs $9ffe			bcs 	_ETNumber 					; go back if accepted.
.a006	60		rts				rts
.a007					_ETCheckUnary:
.a007	c9 ff		cmp #$ff			cmp 	#KWC_STRING 				; string token
.a009	f0 41		beq $a04c			beq 	_ETString
.a00b	c9 fe		cmp #$fe			cmp 	#KWC_HEXCONST 				; hex constant.
.a00d	f0 12		beq $a021			beq 	_ETHexConstant
.a00f	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; check it actually is a unary function
.a011	90 0b		bcc $a01e			bcc 	_ETSyntaxError
.a013	c9 9f		cmp #$9f			cmp 	#KWC_LAST_UNARY+1
.a015	b0 07		bcs $a01e			bcs 	_ETSyntaxError
.a017	da		phx				phx 								; push X on the stack
.a018	0a		asl a				asl 	a 							; put vector x 2 into X
.a019	aa		tax				tax
.a01a	c8		iny				iny 								; consume unary function token
.a01b	7c 86 95	jmp ($9586,x)			jmp 	(VectorSet0,x) 				; and do it.
.a01e					_ETSyntaxError:
.a01e	4c 64 b3	jmp $b364			jmp 	SyntaxError
.a021					_ETHexConstant:
.a021	c8		iny				iny 								; skip #
.a022	c8		iny				iny 								; skip count
.a023	20 44 a5	jsr $a544			jsr 	NSMSetZero 					; clear result
.a026					_ETHLoop:
.a026	b1 30		lda ($30),y			lda 	(codePtr),y
.a028	c8		iny				iny 								; and consume
.a029	c9 00		cmp #$00			cmp 	#0 							; exit if zero
.a02b	f0 1e		beq $a04b			beq 	_ETHExit
.a02d	48		pha				pha 								; save on stack.
.a02e	20 59 a5	jsr $a559			jsr 	NSMShiftLeft 				; x 2
.a031	20 59 a5	jsr $a559			jsr 	NSMShiftLeft 				; x 4
.a034	20 59 a5	jsr $a559			jsr 	NSMShiftLeft 				; x 8
.a037	20 59 a5	jsr $a559			jsr 	NSMShiftLeft 				; x 16
.a03a	68		pla				pla 								; ASCII
.a03b	c9 41		cmp #$41			cmp 	#'A'
.a03d	90 02		bcc $a041			bcc 	_ETHNotChar
.a03f	e9 07		sbc #$07			sbc 	#7
.a041					_ETHNotChar:
.a041	29 0f		and #$0f			and 	#15 						; digit now
.a043	1d 08 04	ora $0408,x			ora 	NSMantissa0,x 				; put in LS Nibble
.a046	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a049	80 db		bra $a026			bra 	_ETHLoop 					; go round.
.a04b					_ETHExit:
.a04b	60		rts				rts
.a04c					_ETString:
.a04c	c8		iny				iny 								; look at length
.a04d	b1 30		lda ($30),y			lda 	(codePtr),y
.a04f	48		pha				pha
.a050	c8		iny				iny 								; first character
.a051	20 8e a5	jsr $a58e			jsr 	MemoryInline 				; put address of string at (code-Ptr),y on stack
.a054	68		pla				pla 								; restore count and save
.a055	85 36		sta $36				sta 	zTemp0
.a057	98		tya				tya 								; add length to Y to skip it.
.a058	18		clc				clc
.a059	65 36		adc $36				adc 	zTemp0
.a05b	a8		tay				tay
.a05c	a9 10		lda #$10			lda 	#NSTString 					; mark as string
.a05e	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a061	60		rts				rts
.a062					_ETVariable:
.a062	4c bc a0	jmp $a0bc			jmp 	VariableHandler
.a065					_ETPuncUnary:
.a065	c8		iny				iny 								; consume the unary character
.a066	c9 2d		cmp #$2d			cmp 	#KWD_MINUS 					; unary minus
.a068	f0 2d		beq $a097			beq 	_ETUnaryNegate
.a06a	c9 10		cmp #$10			cmp 	#KWD_AT 					; @ reference -> constant
.a06c	f0 39		beq $a0a7			beq 	_ETDereference
.a06e	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; parenthesis
.a070	f0 43		beq $a0b5			beq 	_ETParenthesis
.a072	64 36		stz $36				stz 	zTemp0 						; zTemp0 is the indirection level.
.a074	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; byte indirection (0) ?
.a076	f0 06		beq $a07e			beq 	_ETIndirection
.a078	e6 36		inc $36				inc 	zTemp0
.a07a	c9 21		cmp #$21			cmp 	#KWD_PLING					; word indirection (1) \
.a07c	d0 a0		bne $a01e			bne 	_ETSyntaxError
.a07e					_ETIndirection:
.a07e	a5 36		lda $36				lda 	zTemp0 						; push indirection amount (0-1) => (1-2) on the stack
.a080	1a		inc a				inc 	a
.a081	48		pha				pha
.a082	20 eb 9f	jsr $9feb			jsr 	EvaluateTerm				; evaluate the term
.a085	20 2f 9e	jsr $9e2f			jsr 	Dereference 				; dereference it.
.a088	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a +ve integer.
.a08b	d0 07		bne $a094			bne 	_ETTypeMismatch
.a08d	68		pla				pla 								; indirection 1-2
.a08e	09 20		ora #$20			ora 	#NSBIsReference 			; make it a reference.
.a090	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a093	60		rts				rts
.a094					_ETTypeMismatch:
.a094	4c 6e b3	jmp $b36e			jmp 	TypeError
.a097					_ETUnaryNegate:
.a097	20 eb 9f	jsr $9feb			jsr 	EvaluateTerm				; evaluate the term
.a09a	20 2f 9e	jsr $9e2f			jsr 	Dereference 				; dereference it.
.a09d	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a number
.a0a0	29 10		and #$10			and 	#NSTString
.a0a2	d0 f0		bne $a094			bne 	_ETTypeMismatch
.a0a4	4c f0 a4	jmp $a4f0			jmp 	NSMNegate  					; just toggles the sign bit.
.a0a7					_ETDereference:
.a0a7	20 eb 9f	jsr $9feb			jsr 	EvaluateTerm				; evaluate the term
.a0aa	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a reference
.a0ad	29 20		and #$20			and 	#NSBIsReference
.a0af	f0 e3		beq $a094			beq 	_ETTypeMismatch
.a0b1	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; make it an integer address
.a0b4	60		rts				rts
.a0b5					_ETParenthesis:
.a0b5	20 1a 9d	jsr $9d1a			jsr 	EvaluateExpression 			; evaluate here, from lowest precedence
.a0b8	20 7e ad	jsr $ad7e			jsr 	CheckRightBracket 			; check for )
.a0bb	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/variable.asm

.a0bc					VariableHandler:
.a0bc	b1 30		lda ($30),y			lda 	(codePtr),y
.a0be	18		clc				clc
.a0bf	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.a0c1	85 37		sta $37				sta 	zTemp0+1
.a0c3	c8		iny				iny
.a0c4	b1 30		lda ($30),y			lda 	(codePtr),y
.a0c6	85 36		sta $36				sta 	zTemp0
.a0c8	c8		iny				iny
.a0c9	18		clc				clc									; copy variable address+3 to mantissa
.a0ca	69 03		adc #$03			adc 	#3
.a0cc	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a0cf	a5 37		lda $37				lda 	zTemp0+1
.a0d1	69 00		adc #$00			adc 	#0
.a0d3	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a0d6	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.a0d9	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.a0dc	9e 28 04	stz $0428,x			stz 	NSExponent,x
.a0df	5a		phy				phy
.a0e0	a0 02		ldy #$02			ldy 	#2 							; read type
.a0e2	b1 36		lda ($36),y			lda 	(zTemp0),y
.a0e4	7a		ply				ply
.a0e5	29 1c		and #$1c			and 	#NSBTypeMask+NSBIsArray 	; get type information
.a0e7	09 20		ora #$20			ora 	#NSBIsReference 			; make a reference.
.a0e9	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a0ec	29 04		and #$04			and 	#NSBIsArray
.a0ee	d0 01		bne $a0f1			bne 	_VHArray
.a0f0	60		rts				rts
.a0f1					_VHArray:
.a0f1	e8		inx				inx
.a0f2	20 dc a4	jsr $a4dc			jsr 	Evaluate8BitInteger 		; get the 1st index.
.a0f5	a9 ff		lda #$ff			lda 	#$FF 						; set Status of X+2 to a duff value so we know if we picked it up.
.a0f7	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.a0fa	b1 30		lda ($30),y			lda 	(codePtr),y
.a0fc	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.a0fe	d0 06		bne $a106			bne 	_VHNoSecondIndex
.a100	c8		iny				iny 								; skip the comma
.a101	e8		inx				inx
.a102	20 dc a4	jsr $a4dc			jsr 	Evaluate8BitInteger 		; get the 2nd index.
.a105	ca		dex				dex
.a106					_VHNoSecondIndex:
.a106	ca		dex				dex 								; set X back.
.a107	20 7e ad	jsr $ad7e			jsr 	CheckRightBracket 			; and check the right bracket.
.a10a	5a		phy				phy 								; save position
.a10b	a0 02		ldy #$02			ldy 	#2 							; check first index is not-zero, e.g. array defined
.a10d	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a10f	f0 6b		beq $a17c			beq 	_VHBadIndex
.a111	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy record address to zaTemp
.a114	85 3e		sta $3e				sta 	zaTemp
.a116	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a119	85 3f		sta $3f				sta 	zaTemp+1
.a11b	a0 03		ldy #$03			ldy 	#3 							; get the second index - which is 0 if there is one index.
.a11d	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a11f	f0 02		beq $a123			beq 	_VHHas2Mask
.a121	a9 ff		lda #$ff			lda 	#$FF
.a123					_VHHas2Mask:
.a123	dd 02 04	cmp $0402,x			cmp 	NSStatus+2,x 				; so if they are the same there are the wrong number of indices
.a126	f0 54		beq $a17c			beq 	_VHBadIndex
.a128	0a		asl a				asl 	a 							; carry will be set if a second index
.a129	90 09		bcc $a134			bcc 	_VHCheckFirstIndex
.a12b	a0 03		ldy #$03			ldy 	#3 			 				; check the 2nd size >= 2nd index
.a12d	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a12f	dd 0a 04	cmp $040a,x			cmp 	NSMantissa0+2,x
.a132	90 48		bcc $a17c			bcc 	_VHBadIndex
.a134					_VHCheckFirstIndex:
.a134	a0 02		ldy #$02			ldy 	#2 			 				; check the 2nd size >= 2nd index
.a136	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a138	dd 09 04	cmp $0409,x			cmp 	NSMantissa0+1,x
.a13b	90 3f		bcc $a17c			bcc 	_VHBadIndex
.a13d	64 36		stz $36				stz 	zTemp0 						; clear zTemp0 (if 1 index)
.a13f	64 37		stz $37				stz 	zTemp0+1
.a141	bd 02 04	lda $0402,x			lda 	NSStatus+2,x 				; if only one index provided, don't need to multiply
.a144	30 0f		bmi $a155			bmi 	_VHNoMultiply
.a146	da		phx				phx
.a147	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; get 2nd index on stack
.a14a	48		pha				pha
.a14b	a0 02		ldy #$02			ldy 	#2 							; get 1st size in A
.a14d	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a14f	1a		inc a				inc 	a 							; add 1 for zero base
.a150	fa		plx				plx
.a151	20 00 b2	jsr $b200			jsr 	Multiply8x8 				; calculate -> Z0
.a154	fa		plx				plx
.a155					_VHNoMultiply:
.a155	18		clc				clc
.a156	a5 36		lda $36				lda 	zTemp0
.a158	7d 09 04	adc $0409,x			adc 	NSMantissa0+1,x
.a15b	85 36		sta $36				sta 	zTemp0
.a15d	a5 37		lda $37				lda 	zTemp0+1
.a15f	69 00		adc #$00			adc 	#0
.a161	85 37		sta $37				sta 	zTemp0+1
.a163	bd 00 04	lda $0400,x			lda 	NSStatus,x
.a166	20 e6 8c	jsr $8ce6			jsr 	ScaleByBaseType
.a169	18		clc				clc
.a16a	b2 3e		lda ($3e)			lda 	(zaTemp)
.a16c	65 36		adc $36				adc 	zTemp0
.a16e	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a171	a0 01		ldy #$01			ldy 	#1
.a173	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a175	65 37		adc $37				adc 	zTemp0+1
.a177	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a17a	7a		ply				ply 								; restore position
.a17b	60		rts				rts
.a17c					_VHBadIndex:
.a17c	a9 17		lda #$17		lda	#23
.a17e	4c 11 99	jmp $9911		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/abs.asm

.b136					AbsUnary:
.b136	fa		plx				plx 								; restore stack pos
.b137	20 84 a4	jsr $a484			jsr 	EvaluateNumber 				; get a float or int
.b13a	20 7e ad	jsr $ad7e			jsr 	CheckRightBracket
.b13d	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; clear the sign bit
.b140	29 7f		and #$7f			and 	#$7F
.b142	9d 00 04	sta $0400,x			sta 	NSStatus,x
.b145	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/alloc.asm

.a181					AllocUnary:
.a181	fa		plx				plx 								; restore stack pos
.a182	20 bc a4	jsr $a4bc			jsr 	Evaluate16BitInteger		; get bytes required.
.a185	20 7e ad	jsr $ad7e			jsr 	CheckRightBracket
.a188	da		phx				phx 								; save X/Y
.a189	5a		phy				phy
.a18a	8a		txa				txa 								; copy X into Y
.a18b	a8		tay				tay
.a18c	b9 10 04	lda $0410,y			lda		NSMantissa1,y 				; get size
.a18f	aa		tax				tax
.a190	b9 08 04	lda $0408,y			lda 	NSMantissa0,y
.a193	20 a0 a1	jsr $a1a0			jsr 	AllocateXABytes 			; allocate memory
.a196	99 08 04	sta $0408,y			sta 	NSMantissa0,y 				; write address out.
.a199	8a		txa				txa
.a19a	99 10 04	sta $0410,y			sta 	NSMantissa1,y
.a19d	7a		ply				ply
.a19e	fa		plx				plx
.a19f	60		rts				rts
.a1a0					AllocateXABytes:
.a1a0	5a		phy				phy
.a1a1	ac 8c 04	ldy $048c			ldy 	lowMemPtr 					; push current address on stack and to zTemp0
.a1a4	84 36		sty $36				sty 	zTemp0
.a1a6	5a		phy				phy
.a1a7	ac 8d 04	ldy $048d			ldy 	lowMemPtr+1
.a1aa	84 37		sty $37				sty 	zTemp0+1
.a1ac	5a		phy				phy
.a1ad	18		clc				clc 								; add to low memory pointer
.a1ae	6d 8c 04	adc $048c			adc 	lowMemPtr
.a1b1	8d 8c 04	sta $048c			sta 	lowMemPtr
.a1b4	8a		txa				txa
.a1b5	6d 8d 04	adc $048d			adc 	lowMemPtr+1
.a1b8	8d 8d 04	sta $048d			sta 	lowMemPtr+1
.a1bb	b0 2f		bcs $a1ec			bcs 	CISSMemory
.a1bd	20 de a1	jsr $a1de			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.a1c0					_ClearMemory:
.a1c0	ad 8c 04	lda $048c			lda 	lowMemPtr 					; cleared all memory allocated
.a1c3	c5 36		cmp $36				cmp 	zTemp0
.a1c5	d0 07		bne $a1ce			bne 	_CMClearNext
.a1c7	ad 8d 04	lda $048d			lda 	lowMemPtr+1
.a1ca	c5 37		cmp $37				cmp 	zTemp0+1
.a1cc	f0 0c		beq $a1da			beq 	_CMExit
.a1ce					_CMClearNext:
.a1ce	a9 00		lda #$00			lda 	#0 							; clear byte, advance to next.
.a1d0	92 36		sta ($36)			sta 	(zTemp0)
.a1d2	e6 36		inc $36				inc 	zTemp0
.a1d4	d0 ea		bne $a1c0			bne 	_ClearMemory
.a1d6	e6 37		inc $37				inc		zTemp0+1
.a1d8	80 e6		bra $a1c0			bra 	_ClearMemory
.a1da					_CMExit:
.a1da	fa		plx				plx
.a1db	68		pla				pla
.a1dc	7a		ply				ply
.a1dd	60		rts				rts
.a1de					CheckIdentifierStringSpace:
.a1de	48		pha				pha
.a1df	ad 8d 04	lda $048d			lda 	lowMemPtr+1 				; get low memory pointer
.a1e2	18		clc				clc
.a1e3	69 02		adc #$02			adc 	#2 							; need at least 2 256 byte pages
.a1e5	cd 8f 04	cmp $048f			cmp 	StringMemory+1 				; is it >= StringMemory
.a1e8	b0 02		bcs $a1ec			bcs 	CISSMemory
.a1ea	68		pla				pla
.a1eb	60		rts				rts
.a1ec					CISSMemory:
.a1ec	a9 06		lda #$06		lda	#6
.a1ee	4c 11 99	jmp $9911		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/asc.asm

.b146					AscUnary:
.b146	fa		plx				plx 								; restore stack pos
.b147	20 8f a4	jsr $a48f			jsr 	EvaluateString 				; get a string
.b14a	b2 36		lda ($36)			lda 	(zTemp0)					; get/return firs character
.b14c	20 46 a5	jsr $a546			jsr 	NSMSetByte
.b14f	20 7e ad	jsr $ad7e			jsr 	CheckRightBracket
.b152	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/frac.asm

.b153					FracUnary:
.b153	fa		plx				plx 								; restore stack pos
.b154	20 84 a4	jsr $a484			jsr 	EvaluateNumber 				; get a float or int
.b157	20 7e ad	jsr $ad7e			jsr 	CheckRightBracket
.b15a	bd 00 04	lda $0400,x			lda 	NSStatus,x
.b15d	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.b15f	f0 04		beq $b165			beq 	_IUZero
.b161	20 23 b0	jsr $b023			jsr 	FloatFractionalPart
.b164	60		rts				rts
.b165					_IUZero:
.b165	20 44 a5	jsr $a544			jsr 	NSMSetZero
.b168	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/int.asm

.b169					IntUnary:
.b169	fa		plx				plx 								; restore stack pos
.b16a	20 84 a4	jsr $a484			jsr 	EvaluateNumber 				; get a float or int
.b16d	20 7e ad	jsr $ad7e			jsr 	CheckRightBracket
.b170	bd 00 04	lda $0400,x			lda 	NSStatus,x
.b173	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.b175	f0 03		beq $b17a			beq 	_IUExit
.b177	20 86 b0	jsr $b086			jsr 	FloatIntegerPart
.b17a					_IUExit:
.b17a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/len.asm

.b17b					LenUnary:
.b17b	fa		plx				plx 								; restore stack pos
.b17c	20 8f a4	jsr $a48f			jsr 	EvaluateString 				; get a string
.b17f	5a		phy				phy
.b180	a0 00		ldy #$00			ldy 	#0 							; find length
.b182					_LenFind:
.b182	b1 36		lda ($36),y			lda 	(zTemp0),y
.b184	f0 06		beq $b18c			beq 	_LenExit
.b186	c8		iny				iny
.b187	d0 f9		bne $b182			bne 	_LenFind
.b189	4c 69 b3	jmp $b369			jmp 	RangeError 					; string > 255
.b18c					_LenExit:
.b18c	98		tya				tya
.b18d	20 46 a5	jsr $a546			jsr 	NSMSetByte
.b190	7a		ply				ply
.b191	20 7e ad	jsr $ad7e			jsr 	CheckRightBracket
.b194	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/minmax.asm

.a1f1					Unary_Min:
.a1f1	a9 01		lda #$01			lda 	#1
.a1f3	80 02		bra $a1f7			bra 	UnaryMinMaxMain
.a1f5					Unary_Max:
.a1f5	a9 ff		lda #$ff			lda 	#$FF 						; value from comparator to cause a write
.a1f7					UnaryMinMaxMain:
.a1f7	fa		plx				plx 								; get index on number stack
.a1f8	48		pha				pha 								; save comparator
.a1f9	20 7b a4	jsr $a47b			jsr 	EvaluateValue 				; get the first value.
.a1fc					_UMMMLoop:
.a1fc	b1 30		lda ($30),y			lda 	(codePtr),y
.a1fe	c9 29		cmp #$29			cmp 	#KWD_RPAREN 				; if right bracket then done.
.a200	f0 22		beq $a224			beq 	_UMMMDone
.a202	20 86 ad	jsr $ad86			jsr 	CheckComma 					; must be a comma
.a205	e8		inx				inx
.a206	20 7b a4	jsr $a47b			jsr 	EvaluateValue
.a209	ca		dex				dex
.a20a	20 1b a5	jsr $a51b			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] (Compare is destructive)
.a20d	e8		inx				inx
.a20e	20 1b a5	jsr $a51b			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2], original
.a211	e8		inx				inx
.a212	20 c9 99	jsr $99c9			jsr 	CompareBaseCode 			; part of > = < etc. code, returns 255,0 or 1
.a215	ca		dex				dex
.a216	ca		dex				dex
.a217	85 36		sta $36				sta 	zTemp0 						; save required result
.a219	68		pla				pla 								; get and save comparator
.a21a	48		pha				pha
.a21b	c5 36		cmp $36				cmp 	zTemp0 						; if the comparator
.a21d	d0 dd		bne $a1fc			bne 	_UMMMLoop
.a21f	20 27 a2	jsr $a227			jsr 	ExpCopyAboveDown 			; copy next up slot down
.a222	80 d8		bra $a1fc			bra 	_UMMMLoop
.a224					_UMMMDone:
.a224	68		pla				pla 								; throw the comparator
.a225	c8		iny				iny 								; skip )
.a226	60		rts				rts
.a227					ExpCopyAboveDown:
.a227	bd 01 04	lda $0401,x			lda 	NSStatus+1,x
.a22a	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a22d	bd 29 04	lda $0429,x			lda 	NSExponent+1,x
.a230	9d 28 04	sta $0428,x			sta 	NSExponent,x
.a233	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.a236	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a239	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.a23c	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a23f	bd 19 04	lda $0419,x			lda 	NSMantissa2+1,x
.a242	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.a245	bd 21 04	lda $0421,x			lda 	NSMantissa3+1,x
.a248	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.a24b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/not.asm

.a24c					Unary_Not:
.a24c	fa		plx				plx
.a24d	20 a7 a4	jsr $a4a7			jsr 	EvaluateInteger 			; get integer
.a250	20 7e ad	jsr $ad7e			jsr 	CheckRightBracket
.a253	20 74 a5	jsr $a574			jsr 	NSMIsZero 					; zero mantissa ?
.a256	f0 04		beq $a25c			beq 	_NotZero
.a258	20 44 a5	jsr $a544			jsr 	NSMSetZero
.a25b	60		rts				rts
.a25c					_NotZero:
.a25c	4c 7e 99	jmp $997e			jmp 	ReturnTrue
.a25f					_UNBad:
.a25f	4c 73 b3	jmp $b373			jmp 	ArgumentError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/rnd.asm

.a262					Unary_Random:
.a262	fa		plx				plx
.a263	20 e1 a2	jsr $a2e1			jsr 	Random32Bit 				; get a random number
.a266	20 c6 a2	jsr $a2c6			jsr 	URCopyToMantissa  			; put in mantissa
.a269	b1 30		lda ($30),y			lda 	(codePtr),y
.a26b	c9 29		cmp #$29			cmp 	#KWD_RPAREN
.a26d	f0 08		beq $a277			beq 	_URNoModulus
.a26f	e8		inx				inx
.a270	20 bc a4	jsr $a4bc			jsr 	Evaluate16BitInteger 		; put modulus value in +1
.a273	ca		dex				dex
.a274	20 02 ae	jsr $ae02			jsr 	IntegerModulusNoCheck 		; calculate modulus
.a277					_URNoModulus:
.a277	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; make it an integer positive
.a27a	9e 28 04	stz $0428,x			stz 	NSExponent,x
.a27d	20 7e ad	jsr $ad7e			jsr 	CheckRightBracket
.a280	60		rts				rts
.a281					Unary_Rnd:
.a281	fa		plx				plx
.a282	20 84 a4	jsr $a484			jsr 	EvaluateNumber 				; number to use.
.a285	20 7e ad	jsr $ad7e			jsr 	CheckRightBracket 			; closing bracket
.a288	20 74 a5	jsr $a574			jsr 	NSMIsZero 					; if zero, then don't generate a new number
.a28b	f0 2b		beq $a2b8			beq 	_URCopySeed
.a28d	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; if -ve, then seed using parameter
.a290	10 23		bpl $a2b5			bpl 	_URDontSeed
.a292	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy - value to seed butchering it.
.a295	49 17		eor #$17			eor 	#$17
.a297	8d 88 04	sta $0488			sta 	RandomSeed+0
.a29a	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a29d	49 a5		eor #$a5			eor 	#$A5
.a29f	8d 89 04	sta $0489			sta 	RandomSeed+1
.a2a2	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.a2a5	49 c2		eor #$c2			eor 	#$C2
.a2a7	8d 8a 04	sta $048a			sta 	RandomSeed+2
.a2aa	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.a2ad	49 9d		eor #$9d			eor 	#$9D
.a2af	8d 8b 04	sta $048b			sta 	RandomSeed+3
.a2b2	20 e1 a2	jsr $a2e1			jsr 	Random32Bit
.a2b5					_URDontSeed:
.a2b5	20 e1 a2	jsr $a2e1			jsr 	Random32Bit 				; generate a number.
.a2b8					_URCopySeed:
.a2b8	20 c6 a2	jsr $a2c6			jsr 	URCopyToMantissa 			; copy into mantissa
.a2bb	a9 e1		lda #$e1			lda 	#-31 						; force into 0-1 range
.a2bd	8d 28 04	sta $0428			sta 	NSExponent
.a2c0	a9 08		lda #$08			lda 	#NSTFloat
.a2c2	8d 00 04	sta $0400			sta 	NSStatus 					; positive.
.a2c5	60		rts				rts
.a2c6					URCopyToMantissa:
.a2c6	ad 88 04	lda $0488			lda 	RandomSeed+0
.a2c9	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a2cc	ad 89 04	lda $0489			lda 	RandomSeed+1
.a2cf	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a2d2	ad 8a 04	lda $048a			lda 	RandomSeed+2
.a2d5	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.a2d8	ad 8b 04	lda $048b			lda 	RandomSeed+3
.a2db	29 3f		and #$3f			and 	#$3F 						; make legal mantissa
.a2dd	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.a2e0	60		rts				rts
.a2e1					Random32Bit:
.a2e1	5a		phy				phy
.a2e2	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.a2e4	ad 88 04	lda $0488			lda 	RandomSeed+0 				; check the seed isn't zero
.a2e7	d0 03		bne $a2ec			bne 	_Random1
.a2e9	a8		tay				tay 								; if so do it 256 times
.a2ea	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.a2ec					_Random1:
.a2ec	0a		asl a				asl 	a 							; LSFR RNG
.a2ed	2e 89 04	rol $0489			rol 	RandomSeed+1
.a2f0	2e 8a 04	rol $048a			rol 	RandomSeed+2
.a2f3	2e 8b 04	rol $048b			rol 	RandomSeed+3
.a2f6	90 02		bcc $a2fa			bcc 	_Random2
.a2f8	49 c5		eor #$c5			eor 	#$C5
.a2fa					_Random2:
.a2fa	88		dey				dey
.a2fb	d0 ef		bne $a2ec			bne 	_Random1
.a2fd	8d 88 04	sta $0488			sta 	RandomSeed+0
.a300	7a		ply				ply
.a301	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/sgn.asm

.b195					SgnUnary:
.b195	fa		plx				plx 								; restore stack pos
.b196	20 84 a4	jsr $a484			jsr 	EvaluateNumber 				; get a float or int
.b199	20 7e ad	jsr $ad7e			jsr 	CheckRightBracket
.b19c	20 74 a5	jsr $a574			jsr 	NSMIsZero 					; if zero
.b19f	f0 10		beq $b1b1			beq 	_SGZero  					; return Int Zero
.b1a1	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get status w/sign
.b1a4	48		pha				pha
.b1a5	a9 01		lda #$01			lda 	#1 							; set to 1
.b1a7	20 46 a5	jsr $a546			jsr 	NSMSetByte
.b1aa	68		pla				pla
.b1ab	29 80		and #$80			and		#$80 						; copy the sign byte out
.b1ad	9d 00 04	sta $0400,x			sta 	NSStatus,x
.b1b0	60		rts				rts
.b1b1	20 44 a5	jsr $a544	_SGZero:jsr 	NSMSetZero
.b1b4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/val.asm

.b1b5					ValUnary:
.b1b5	fa		plx				plx 								; restore stack pos
.b1b6	20 cb b1	jsr $b1cb			jsr 	ValMainCode 				; do the main val() code
.b1b9	b0 01		bcs $b1bc			bcs 	_VUError 					; couldn't convert
.b1bb	60		rts				rts
.b1bc					_VUError:
.b1bc	4c 6e b3	jmp $b36e			jmp 	TypeError
.b1bf					IsValUnary:
.b1bf	fa		plx				plx 								; restore stack pos
.b1c0	20 cb b1	jsr $b1cb			jsr 	ValMainCode 				; do the main val() code
.b1c3	b0 03		bcs $b1c8			bcs 	_VUBad
.b1c5	4c 7e 99	jmp $997e			jmp 	ReturnTrue
.b1c8					_VUBad:
.b1c8	4c 8a 99	jmp $998a			jmp 	ReturnFalse
.b1cb					ValMainCode:
.b1cb	20 8f a4	jsr $a48f			jsr 	EvaluateString 				; get a string
.b1ce	20 7e ad	jsr $ad7e			jsr 	CheckRightBracket 			; check right bracket present
.b1d1	5a		phy				phy
.b1d2	b2 36		lda ($36)			lda 	(zTemp0) 					; check not empty string
.b1d4	f0 17		beq $b1ed			beq 	_VMCFail2
.b1d6	a0 ff		ldy #$ff			ldy 	#$FF 						; start position
.b1d8	48		pha				pha 								; save first character
.b1d9	c9 2d		cmp #$2d			cmp 	#"-"		 				; is it -
.b1db	d0 01		bne $b1de			bne 	_VMCStart
.b1dd	c8		iny				iny 								; skip over -
.b1de					_VMCStart:
.b1de	38		sec				sec 								; initialise first time round.
.b1df					_VMCNext:
.b1df	c8		iny				iny 								; pre-increment
.b1e0	b1 36		lda ($36),y			lda 	(zTemp0),y 					; next character
.b1e2	f0 0c		beq $b1f0			beq 	_VMCSuccess 				; successful.
.b1e4	20 cd 9e	jsr $9ecd			jsr 	EncodeNumber 				; send it to the number-builder
.b1e7	90 03		bcc $b1ec			bcc 	_VMCFail 					; if failed, give up.
.b1e9	18		clc				clc 								; next time round, countinue
.b1ea	80 f3		bra $b1df			bra 	_VMCNext
.b1ec					_VMCFail:
.b1ec	68		pla				pla
.b1ed					_VMCFail2:
.b1ed	7a		ply				ply
.b1ee	38		sec				sec
.b1ef	60		rts				rts
.b1f0					_VMCSuccess:
.b1f0	a9 00		lda #$00			lda 	#0 							; construct final
.b1f2	20 cd 9e	jsr $9ecd			jsr 	EncodeNumber
.b1f5	68		pla				pla
.b1f6	c9 2d		cmp #$2d			cmp 	#"-"
.b1f8	d0 03		bne $b1fd			bne 	_VMCNotNegative
.b1fa	20 f0 a4	jsr $a4f0			jsr		NSMNegate
.b1fd					_VMCNotNegative:
.b1fd	7a		ply				ply
.b1fe	18		clc				clc
.b1ff	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/chr.asm

.a302					ChrUnary:
.a302	fa		plx				plx 								; restore stack pos
.a303	20 dc a4	jsr $a4dc			jsr 	Evaluate8BitInteger			; get value
.a306	48		pha				pha
.a307	20 7e ad	jsr $ad7e			jsr 	CheckRightBracket
.a30a	a9 01		lda #$01			lda 	#1 							; allocate space for one char
.a30c	20 e5 b6	jsr $b6e5			jsr 	StringTempAllocate
.a30f	68		pla				pla 								; write number to it
.a310	20 23 b7	jsr $b723			jsr 	StringTempWrite
.a313	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/spc.asm

.a314					SpcUnary:
.a314	fa		plx				plx 								; restore stack pos
.a315	20 dc a4	jsr $a4dc			jsr 	Evaluate8BitInteger			; get value
.a318	5a		phy				phy
.a319	48		pha				pha 								; save count
.a31a	20 e5 b6	jsr $b6e5			jsr 	StringTempAllocate
.a31d	7a		ply				ply 								; to do count in Y
.a31e					_SpcLoop:
.a31e	c0 00		cpy #$00			cpy 	#0
.a320	f0 08		beq $a32a			beq 	_SpcExit
.a322	a9 20		lda #$20			lda 	#32
.a324	20 23 b7	jsr $b723			jsr 	StringTempWrite
.a327	88		dey				dey
.a328	80 f4		bra $a31e			bra 	_SPCLoop
.a32a					_SpcExit:
.a32a	7a		ply				ply
.a32b	20 7e ad	jsr $ad7e			jsr 	CheckRightBracket
.a32e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/str.asm

.a32f					Unary_Str:
.a32f	fa		plx				plx
.a330	20 84 a4	jsr $a484			jsr 	EvaluateNumber  			; get number
.a333	20 7e ad	jsr $ad7e			jsr 	CheckRightBracket 			; closing bracket
.a336	a9 05		lda #$05			lda 	#5 							; maximum decimals, from Basic816
.a338	20 51 a3	jsr $a351			jsr 	ConvertNumberToString 		; do the conversion.
.a33b	a9 21		lda #$21			lda		#33 						; create buffer
.a33d	20 e5 b6	jsr $b6e5			jsr 	StringTempAllocate 			; allocate memory
.a340	da		phx				phx
.a341	a2 00		ldx #$00			ldx 	#0
.a343					_USCopy:
.a343	bd 19 06	lda $0619,x			lda 	DecimalBuffer,x
.a346	20 23 b7	jsr $b723			jsr 	StringTempWrite
.a349	e8		inx				inx
.a34a	bd 19 06	lda $0619,x			lda 	DecimalBuffer,x
.a34d	d0 f4		bne $a343			bne 	_USCopy
.a34f	fa		plx				plx
.a350	60		rts				rts
.a351					ConvertNumberToString:
.a351	5a		phy				phy 								; save code position
.a352	8d 94 04	sta $0494			sta 	DecimalPlaces	 			; save number of DPs.
.a355	9c 95 04	stz $0495			stz 	dbOffset 					; offset into decimal buffer = start.
.a358	bd 00 04	lda $0400,x			lda 	NSStatus,x  				; is it -ve.
.a35b	10 0a		bpl $a367			bpl 	_CNTSNotNegative
.a35d	29 7f		and #$7f			and 	#$7F 						; make +ve
.a35f	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a362	a9 2d		lda #$2d			lda 	#"-"
.a364	20 cd a3	jsr $a3cd			jsr 	WriteDecimalBuffer
.a367					_CNTSNotNegative:
.a367	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if decimal
.a36a	f0 15		beq $a381			beq 	_CNTSNotFloat
.a36c	e8		inx				inx 								; round up
.a36d	a9 01		lda #$01			lda 	#1
.a36f	20 46 a5	jsr $a546			jsr 	NSMSetByte
.a372	ca		dex				dex
.a373	bd 28 04	lda $0428,x			lda		NSExponent,x
.a376	9d 29 04	sta $0429,x			sta 	NSExponent+1,x
.a379	a9 08		lda #$08			lda 	#NSTFloat
.a37b	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.a37e	20 45 af	jsr $af45			jsr 	FloatAdd
.a381					_CNTSNotFloat:
.a381	20 af a3	jsr $a3af			jsr 	MakePlusTwoString
.a384	20 23 b0	jsr $b023			jsr 	FloatFractionalPart 		; get the fractional part
.a387	20 e7 b0	jsr $b0e7			jsr 	NSNormalise					; normalise , exit if zero
.a38a	f0 21		beq $a3ad			beq 	_CNTSExit
.a38c	a9 2e		lda #$2e			lda 	#"."
.a38e	20 cd a3	jsr $a3cd			jsr 	WriteDecimalBuffer 			; write decimal place
.a391					_CNTSDecimal:
.a391	ce 94 04	dec $0494			dec 	DecimalPlaces 				; done all the decimals
.a394	30 17		bmi $a3ad			bmi 	_CNTSExit
.a396	e8		inx				inx 								; x 10.0
.a397	a9 0a		lda #$0a			lda 	#10
.a399	20 46 a5	jsr $a546			jsr 	NSMSetByte
.a39c	a9 08		lda #$08			lda 	#NSTFloat
.a39e	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a3a1	ca		dex				dex
.a3a2	20 b0 b0	jsr $b0b0			jsr 	FloatMultiply
.a3a5	20 af a3	jsr $a3af			jsr 	MakePlusTwoString
.a3a8	20 23 b0	jsr $b023			jsr 	FloatFractionalPart 		; get the fractional part
.a3ab	80 e4		bra $a391			bra 	_CNTSDecimal 				; keep going.
.a3ad					_CNTSExit:
.a3ad	7a		ply				ply
.a3ae	60		rts				rts
.a3af					MakePlusTwoString:
.a3af	da		phx				phx
.a3b0	20 1b a5	jsr $a51b			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.a3b3	e8		inx				inx 								; access it
.a3b4	e8		inx				inx
.a3b5	20 86 b0	jsr $b086			jsr 	FloatIntegerPart 			; make it an integer
.a3b8	a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.a3ba	20 ef ae	jsr $aeef			jsr 	ConvertInt32
.a3bd	a2 00		ldx #$00			ldx	 	#0
.a3bf					_MPTSCopy:
.a3bf	bd f7 05	lda $05f7,x			lda 	NumberBuffer,x
.a3c2	20 cd a3	jsr $a3cd			jsr 	WriteDecimalBuffer
.a3c5	e8		inx				inx
.a3c6	bd f7 05	lda $05f7,x			lda 	NumberBuffer,x
.a3c9	d0 f4		bne $a3bf			bne 	_MPTSCopy
.a3cb	fa		plx				plx
.a3cc	60		rts				rts
.a3cd					WriteDecimalBuffer:
.a3cd	da		phx				phx
.a3ce	ae 95 04	ldx $0495			ldx 	dbOffset
.a3d1	9d 19 06	sta $0619,x			sta 	DecimalBuffer,x
.a3d4	9e 1a 06	stz $061a,x			stz 	DecimalBuffer+1,x
.a3d7	ee 95 04	inc $0495			inc 	dbOffset
.a3da	fa		plx				plx
.a3db	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/substring.asm

.a3dc					Unary_Left:
.a3dc	fa		plx				plx
.a3dd	18		clc				clc 								; only one parameter
.a3de	20 53 a4	jsr $a453			jsr 	SubstringInitial 			; set up.
.a3e1	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; Param #1 is the length
.a3e4	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.a3e7	9e 09 04	stz $0409,x			stz 	NSMantissa0+1,x 			; Start is zero.
.a3ea	80 2c		bra $a418			bra 	SubstringMain
.a3ec					Unary_Right:
.a3ec	fa		plx				plx
.a3ed	18		clc				clc 								; only one parameter
.a3ee	20 53 a4	jsr $a453			jsr 	SubstringInitial 			; set up.
.a3f1	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; length => param 2
.a3f4	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.a3f7	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; total length
.a3fa	fd 09 04	sbc $0409,x			sbc 	NSMantissa0+1,x 			; length - required.
.a3fd	b0 02		bcs $a401			bcs 	_URNotUnderflow
.a3ff	a9 00		lda #$00			lda 	#0 							; start from the beginning, as something like right$("AB",3)
.a401					_URNotUnderFlow:
.a401	9d 09 04	sta $0409,x			sta 	NSMantissa0+1,x 			; this is the start position
.a404	80 12		bra $a418			bra 	SubStringMain
.a406					Unary_Mid:
.a406	fa		plx				plx
.a407	38		sec				sec 								; two parameters
.a408	20 53 a4	jsr $a453			jsr 	SubstringInitial 			; set up.
.a40b	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; first parameter is zero ?
.a40e	f0 05		beq $a415			beq 	_UMError
.a410	de 09 04	dec $0409,x			dec 	NSMantissa0+1,x				; reduce initial offset by 1 as MID$(a$,1..) is actually the first character
.a413	80 03		bra $a418			bra 	SubStringMain
.a415					_UMError:
.a415	4c 73 b3	jmp $b373			jmp 	ArgumentError
.a418					SubStringMain:
.a418	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; is the initial offset >= the length
.a41b	dd 28 04	cmp $0428,x			cmp 	NSExponent,x
.a41e	b0 2d		bcs $a44d			bcs 	_SSMNull 					; if so, return an empty string.
.a420	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; if copy count is zero
.a423	f0 28		beq $a44d			beq 	_SSMNull 					; return empty string.
.a425	18		clc				clc 								; add the offset +1 to the address and
.a426	bd 08 04	lda $0408,x			lda	 	NSMantissa0,x 				; put in zTemp
.a429	7d 09 04	adc $0409,x			adc 	NSMantissa0+1,x
.a42c	85 36		sta $36				sta 	zTemp0
.a42e	bd 10 04	lda $0410,x			lda	 	NSMantissa1,x
.a431	69 00		adc #$00			adc 	#0
.a433	85 37		sta $37				sta 	zTemp0+1
.a435					_SSMNoCarry:
.a435	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; characters required.
.a438	20 e5 b6	jsr $b6e5			jsr 	StringTempAllocate 			; allocate that many characters
.a43b	5a		phy				phy 								; save Y
.a43c	a0 00		ldy #$00			ldy 	#0 							; start copying in.
.a43e					_SSMCopy:
.a43e	b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next character
.a440	f0 09		beq $a44b			beq 	_SSMEString 				; no more to copy
.a442	20 23 b7	jsr $b723			jsr 	StringTempWrite 			; and write it out.
.a445	c8		iny				iny
.a446	de 0a 04	dec $040a,x			dec 	NSMantissa0+2,x
.a449	d0 f3		bne $a43e			bne 	_SSMCopy
.a44b					_SSMEString:
.a44b	7a		ply				ply
.a44c					_SSMExit:
.a44c	60		rts				rts
.a44d					_SSMNull:
.a44d	a9 00		lda #$00			lda 	#0
.a44f	20 e5 b6	jsr $b6e5			jsr 	StringTempAllocate
.a452	60		rts				rts
.a453					SubstringInitial:
.a453	da		phx				phx 								; save initial stack position
.a454	08		php				php 								; save carry on stack indicating 2 parameters
.a455	20 8f a4	jsr $a48f			jsr 	EvaluateString 				; get a string
.a458	5a		phy				phy 								; calculate length to exponent.
.a459	a0 ff		ldy #$ff			ldy 	#$FF
.a45b					_SIFindLength:
.a45b	c8		iny				iny
.a45c	b1 36		lda ($36),y			lda 	(zTemp0),y
.a45e	d0 fb		bne $a45b			bne 	_SIFindLength
.a460	98		tya				tya
.a461	9d 28 04	sta $0428,x			sta 	NSExponent,x
.a464	7a		ply				ply
.a465	e8		inx				inx
.a466	20 86 ad	jsr $ad86			jsr 	CheckComma 					; comma next
.a469	20 dc a4	jsr $a4dc			jsr 	Evaluate8BitInteger 		; get next parameter
.a46c	28		plp				plp 								; is it the last parameter ?
.a46d	90 07		bcc $a476			bcc 	_SSIExit 					; if so, exit.
.a46f	e8		inx				inx
.a470	20 86 ad	jsr $ad86			jsr 	CheckComma 					; comma next
.a473	20 dc a4	jsr $a4dc			jsr 	Evaluate8BitInteger 		; get last parameter
.a476					_SSIExit:
.a476	fa		plx				plx
.a477	20 7e ad	jsr $ad7e			jsr 	CheckRightBracket 			; check closing bracket
.a47a	60		rts				rts 								; exit

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/exprhelper.asm

.a47b					EvaluateValue:
.a47b	48		pha				pha
.a47c	20 1a 9d	jsr $9d1a			jsr		EvaluateExpression 			; expression
.a47f	20 2f 9e	jsr $9e2f			jsr 	Dereference					; derefernce it
.a482	68		pla				pla
.a483	60		rts				rts
.a484					EvaluateNumber:
.a484	20 7b a4	jsr $a47b			jsr 	EvaluateValue 				; get a value
.a487	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if string.
.a48a	29 10		and #$10			and 	#NSBIsString
.a48c	d0 16		bne $a4a4			bne 	HelperTypeError
.a48e	60		rts				rts
.a48f					EvaluateString:
.a48f	20 7b a4	jsr $a47b			jsr 	EvaluateValue 				; get a value
.a492	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if string.
.a495	29 10		and #$10			and 	#NSBIsString
.a497	f0 0b		beq $a4a4			beq 	HelperTypeError
.a499					CopyAddressToTemp0:
.a499	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address -> zTemp0
.a49c	85 36		sta $36				sta 	zTemp0
.a49e	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a4a1	85 37		sta $37				sta 	zTemp0+1
.a4a3	60		rts				rts
.a4a4					HelperTypeError:
.a4a4	4c 6e b3	jmp $b36e			jmp 	TypeError
.a4a7					EvaluateInteger:
.a4a7	20 84 a4	jsr $a484			jsr 	EvaluateNumber
.a4aa	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check exponent is zero
.a4ad	d0 0a		bne $a4b9			bne 	HelperValueError 			; if not, it's a float.
.a4af	60		rts				rts
.a4b0					EvaluateUnsignedInteger:
.a4b0	20 a7 a4	jsr $a4a7			jsr 	EvaluateInteger 			; check integer is +ve
.a4b3	bd 00 04	lda $0400,x			lda 	NSStatus,x
.a4b6	30 01		bmi $a4b9			bmi 	HelperValueError
.a4b8	60		rts				rts
.a4b9					HelperValueError:
.a4b9	4c 73 b3	jmp $b373			jmp 	ArgumentError
.a4bc					Evaluate16BitInteger:
.a4bc	20 b0 a4	jsr $a4b0			jsr	 	EvaluateUnsignedInteger		; get integer
.a4bf	bd 20 04	lda $0420,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.a4c2	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.a4c5	d0 f2		bne $a4b9			bne 	HelperValueError
.a4c7	60		rts				rts
.a4c8					Evaluate16BitIntegerSigned:
.a4c8	20 a7 a4	jsr $a4a7			jsr	 	EvaluateInteger				; get integer
.a4cb	bd 20 04	lda $0420,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.a4ce	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.a4d1	d0 e6		bne $a4b9			bne 	HelperValueError
.a4d3	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; signed ?
.a4d6	10 03		bpl $a4db			bpl 	_EISNotSigned
.a4d8	20 f9 a4	jsr $a4f9			jsr 	NSMNegateMantissa
.a4db					_EISNotSigned:
.a4db	60		rts				rts
.a4dc					Evaluate8BitInteger:
.a4dc	20 b0 a4	jsr $a4b0			jsr	 	EvaluateUnsignedInteger 	; get an integer
.a4df	d0 d8		bne $a4b9			bne 	HelperValueError
.a4e1	bd 20 04	lda $0420,x			lda 	NSMantissa3,x	 			; bytes 1, 2 & 3 must be zero
.a4e4	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.a4e7	1d 10 04	ora $0410,x			ora 	NSMantissa1,x
.a4ea	d0 cd		bne $a4b9			bne 	HelperValueError
.a4ec	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.a4ef	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/mult8x8.asm

.b200					Multiply8x8:
.b200	4a		lsr a		  		lsr 	a  							; prime the carry bit for the loop
.b201	85 36		sta $36			  	sta 	zTemp0
.b203	86 37		stx $37				stx 	zTemp0+1
.b205	a9 00		lda #$00			lda 	#0
.b207	a2 08		ldx #$08			ldx 	#8
.b209					_M88Loop:
.b209	90 03		bcc $b20e			bcc 	_M88NoAdd
.b20b	18		clc				clc
.b20c	65 37		adc $37				adc 	zTemp0+1
.b20e					_M88NoAdd:
.b20e	6a		ror a				ror 	a
.b20f	66 36		ror $36				ror 	zTemp0  					; pull another bit out for the next iteration
.b211	ca		dex				dex         						; inc/dec don't modify carry; only shifts and adds do
.b212	d0 f5		bne $b209			bne 	_M88Loop
.b214	85 37		sta $37				sta 	zTemp0+1 					; store high 8 bits.
.b216	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/utility.asm

.a4f0					NSMNegate:
.a4f0	bd 00 04	lda $0400,x			lda 	NSStatus,x
.a4f3	49 80		eor #$80			eor 	#NSBIsNegative
.a4f5	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a4f8	60		rts				rts
.a4f9					NSMNegateMantissa:
.a4f9	38		sec				sec
.a4fa	a9 00		lda #$00			lda 	#0
.a4fc	fd 08 04	sbc $0408,x			sbc 	NSMantissa0,x
.a4ff	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a502	a9 00		lda #$00			lda 	#0
.a504	fd 10 04	sbc $0410,x			sbc 	NSMantissa1,x
.a507	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a50a	a9 00		lda #$00			lda 	#0
.a50c	fd 18 04	sbc $0418,x			sbc 	NSMantissa2,x
.a50f	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.a512	a9 00		lda #$00			lda 	#0
.a514	fd 20 04	sbc $0420,x			sbc 	NSMantissa3,x
.a517	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.a51a	60		rts				rts
.a51b					NSMShiftUpTwo:
.a51b	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.a51e	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.a521	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a524	9d 12 04	sta $0412,x			sta 	NSMantissa1+2,x
.a527	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.a52a	9d 1a 04	sta $041a,x			sta 	NSMantissa2+2,x
.a52d	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.a530	9d 22 04	sta $0422,x			sta 	NSMantissa3+2,x
.a533	bd 28 04	lda $0428,x			lda 	NSExponent,x
.a536	9d 2a 04	sta $042a,x			sta 	NSExponent+2,x
.a539	bd 00 04	lda $0400,x			lda 	NSStatus,x
.a53c	9d 02 04	sta $0402,x			sta 	NSStatus+2,x
.a53f	60		rts				rts
.a540					NSMSetZeroMantissaOnly:
.a540	a9 00		lda #$00			lda 	#0
.a542	80 08		bra $a54c			bra 	NSMSetMantissa
.a544					NSMSetZero:
.a544	a9 00		lda #$00			lda 	#0
.a546					NSMSetByte:
.a546	9e 28 04	stz $0428,x			stz 	NSExponent,x 				; zero exponent, as integer.
.a549	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; status zero (integer)
.a54c					NSMSetMantissa:
.a54c	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; mantissa
.a54f	9e 10 04	stz $0410,x			stz 	NSMantissa1,x
.a552	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.a555	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.a558	60		rts				rts
.a559					NSMShiftLeft:
.a559	18		clc				clc
.a55a					NSMRotateLeft:
.a55a	3e 08 04	rol $0408,x			rol 	NSMantissa0,x
.a55d	3e 10 04	rol $0410,x			rol		NSMantissa1,x
.a560	3e 18 04	rol $0418,x			rol		NSMantissa2,x
.a563	3e 20 04	rol $0420,x			rol		NSMantissa3,x
.a566	60		rts				rts
.a567					NSMShiftRight:
.a567	5e 20 04	lsr $0420,x			lsr 	NSMantissa3,x
.a56a	7e 18 04	ror $0418,x			ror		NSMantissa2,x
.a56d	7e 10 04	ror $0410,x			ror		NSMantissa1,x
.a570	7e 08 04	ror $0408,x			ror		NSMantissa0,x
.a573	60		rts				rts
.a574					NSMIsZero:
.a574	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.a577	1d 18 04	ora $0418,x			ora		NSMantissa2,x
.a57a	1d 10 04	ora $0410,x			ora		NSMantissa1,x
.a57d	1d 08 04	ora $0408,x			ora		NSMantissa0,x
.a580	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/asmcore.asm

.b217					Assemble_ora:
.b217	20 df 88	jsr $88df		jsr	AssembleGroup1
>b21a	01					.byte $01
.b21b					Assemble_and:
.b21b	20 df 88	jsr $88df		jsr	AssembleGroup1
>b21e	21					.byte $21
.b21f					Assemble_eor:
.b21f	20 df 88	jsr $88df		jsr	AssembleGroup1
>b222	41					.byte $41
.b223					Assemble_adc:
.b223	20 df 88	jsr $88df		jsr	AssembleGroup1
>b226	61					.byte $61
.b227					Assemble_sta:
.b227	20 df 88	jsr $88df		jsr	AssembleGroup1
>b22a	81					.byte $81
.b22b					Assemble_lda:
.b22b	20 df 88	jsr $88df		jsr	AssembleGroup1
>b22e	a1					.byte $a1
.b22f					Assemble_cmp:
.b22f	20 df 88	jsr $88df		jsr	AssembleGroup1
>b232	c1					.byte $c1
.b233					Assemble_sbc:
.b233	20 df 88	jsr $88df		jsr	AssembleGroup1
>b236	e1					.byte $e1
.b237					Assemble_asl:
.b237	20 e6 88	jsr $88e6		jsr	AssembleGroup2
>b23a	02					.byte $02
>b23b	75					.byte $75
.b23c					Assemble_rol:
.b23c	20 e6 88	jsr $88e6		jsr	AssembleGroup2
>b23f	22					.byte $22
>b240	75					.byte $75
.b241					Assemble_lsr:
.b241	20 e6 88	jsr $88e6		jsr	AssembleGroup2
>b244	42					.byte $42
>b245	75					.byte $75
.b246					Assemble_ror:
.b246	20 e6 88	jsr $88e6		jsr	AssembleGroup2
>b249	62					.byte $62
>b24a	75					.byte $75
.b24b					Assemble_stx:
.b24b	20 e6 88	jsr $88e6		jsr	AssembleGroup2
>b24e	82					.byte $82
>b24f	50					.byte $50
.b250					Assemble_ldx:
.b250	20 e6 88	jsr $88e6		jsr	AssembleGroup2
>b253	a2					.byte $a2
>b254	d0					.byte $d0
.b255					Assemble_dec:
.b255	20 e6 88	jsr $88e6		jsr	AssembleGroup2
>b258	c2					.byte $c2
>b259	55					.byte $55
.b25a					Assemble_inc:
.b25a	20 e6 88	jsr $88e6		jsr	AssembleGroup2
>b25d	e2					.byte $e2
>b25e	55					.byte $55
.b25f					Assemble_stz:
.b25f	20 e6 88	jsr $88e6		jsr	AssembleGroup2
>b262	60					.byte $60
>b263	44					.byte $44
.b264					Assemble_bit:
.b264	20 e6 88	jsr $88e6		jsr	AssembleGroup2
>b267	20					.byte $20
>b268	55					.byte $55
.b269					Assemble_sty:
.b269	20 e6 88	jsr $88e6		jsr	AssembleGroup2
>b26c	80					.byte $80
>b26d	54					.byte $54
.b26e					Assemble_ldy:
.b26e	20 e6 88	jsr $88e6		jsr	AssembleGroup2
>b271	a0					.byte $a0
>b272	d5					.byte $d5
.b273					Assemble_cpy:
.b273	20 e6 88	jsr $88e6		jsr	AssembleGroup2
>b276	c0					.byte $c0
>b277	d4					.byte $d4
.b278					Assemble_cpx:
.b278	20 e6 88	jsr $88e6		jsr	AssembleGroup2
>b27b	e0					.byte $e0
>b27c	d0					.byte $d0
.b27d					Assemble_tsb:
.b27d	20 e6 88	jsr $88e6		jsr	AssembleGroup2
>b280	00					.byte $00
>b281	50					.byte $50
.b282					Assemble_trb:
.b282	20 e6 88	jsr $88e6		jsr	AssembleGroup2
>b285	10					.byte $10
>b286	50					.byte $50
.b287					Assemble_jsr:
.b287	20 e6 88	jsr $88e6		jsr	AssembleGroup2
>b28a	14					.byte $14
>b28b	10					.byte $10
.b28c					Assemble_jmp:
.b28c	20 e6 88	jsr $88e6		jsr	AssembleGroup2
>b28f	40					.byte $40
>b290	10					.byte $10
.b291					Assemble_bpl:
.b291	20 37 89	jsr $8937		jsr	AssembleGroup3
>b294	10					.byte $10
.b295					Assemble_bmi:
.b295	20 37 89	jsr $8937		jsr	AssembleGroup3
>b298	30					.byte $30
.b299					Assemble_bvc:
.b299	20 37 89	jsr $8937		jsr	AssembleGroup3
>b29c	50					.byte $50
.b29d					Assemble_bvs:
.b29d	20 37 89	jsr $8937		jsr	AssembleGroup3
>b2a0	70					.byte $70
.b2a1					Assemble_bcc:
.b2a1	20 37 89	jsr $8937		jsr	AssembleGroup3
>b2a4	90					.byte $90
.b2a5					Assemble_bcs:
.b2a5	20 37 89	jsr $8937		jsr	AssembleGroup3
>b2a8	b0					.byte $b0
.b2a9					Assemble_bne:
.b2a9	20 37 89	jsr $8937		jsr	AssembleGroup3
>b2ac	d0					.byte $d0
.b2ad					Assemble_beq:
.b2ad	20 37 89	jsr $8937		jsr	AssembleGroup3
>b2b0	f0					.byte $f0
.b2b1					Assemble_bra:
.b2b1	20 37 89	jsr $8937		jsr	AssembleGroup3
>b2b4	80					.byte $80
.b2b5					Assemble_brk:
.b2b5	20 6d 89	jsr $896d		jsr	AssembleGroup4
>b2b8	00					.byte $00
.b2b9					Assemble_php:
.b2b9	20 6d 89	jsr $896d		jsr	AssembleGroup4
>b2bc	08					.byte $08
.b2bd					Assemble_clc:
.b2bd	20 6d 89	jsr $896d		jsr	AssembleGroup4
>b2c0	18					.byte $18
.b2c1					Assemble_plp:
.b2c1	20 6d 89	jsr $896d		jsr	AssembleGroup4
>b2c4	28					.byte $28
.b2c5					Assemble_sec:
.b2c5	20 6d 89	jsr $896d		jsr	AssembleGroup4
>b2c8	38					.byte $38
.b2c9					Assemble_rti:
.b2c9	20 6d 89	jsr $896d		jsr	AssembleGroup4
>b2cc	40					.byte $40
.b2cd					Assemble_pha:
.b2cd	20 6d 89	jsr $896d		jsr	AssembleGroup4
>b2d0	48					.byte $48
.b2d1					Assemble_cli:
.b2d1	20 6d 89	jsr $896d		jsr	AssembleGroup4
>b2d4	58					.byte $58
.b2d5					Assemble_phy:
.b2d5	20 6d 89	jsr $896d		jsr	AssembleGroup4
>b2d8	5a					.byte $5a
.b2d9					Assemble_rts:
.b2d9	20 6d 89	jsr $896d		jsr	AssembleGroup4
>b2dc	60					.byte $60
.b2dd					Assemble_pla:
.b2dd	20 6d 89	jsr $896d		jsr	AssembleGroup4
>b2e0	68					.byte $68
.b2e1					Assemble_sei:
.b2e1	20 6d 89	jsr $896d		jsr	AssembleGroup4
>b2e4	78					.byte $78
.b2e5					Assemble_ply:
.b2e5	20 6d 89	jsr $896d		jsr	AssembleGroup4
>b2e8	7a					.byte $7a
.b2e9					Assemble_dey:
.b2e9	20 6d 89	jsr $896d		jsr	AssembleGroup4
>b2ec	88					.byte $88
.b2ed					Assemble_txa:
.b2ed	20 6d 89	jsr $896d		jsr	AssembleGroup4
>b2f0	8a					.byte $8a
.b2f1					Assemble_tya:
.b2f1	20 6d 89	jsr $896d		jsr	AssembleGroup4
>b2f4	98					.byte $98
.b2f5					Assemble_txs:
.b2f5	20 6d 89	jsr $896d		jsr	AssembleGroup4
>b2f8	9a					.byte $9a
.b2f9					Assemble_tay:
.b2f9	20 6d 89	jsr $896d		jsr	AssembleGroup4
>b2fc	a8					.byte $a8
.b2fd					Assemble_tax:
.b2fd	20 6d 89	jsr $896d		jsr	AssembleGroup4
>b300	aa					.byte $aa
.b301					Assemble_clv:
.b301	20 6d 89	jsr $896d		jsr	AssembleGroup4
>b304	b8					.byte $b8
.b305					Assemble_tsx:
.b305	20 6d 89	jsr $896d		jsr	AssembleGroup4
>b308	ba					.byte $ba
.b309					Assemble_iny:
.b309	20 6d 89	jsr $896d		jsr	AssembleGroup4
>b30c	c8					.byte $c8
.b30d					Assemble_dex:
.b30d	20 6d 89	jsr $896d		jsr	AssembleGroup4
>b310	ca					.byte $ca
.b311					Assemble_cld:
.b311	20 6d 89	jsr $896d		jsr	AssembleGroup4
>b314	d8					.byte $d8
.b315					Assemble_phx:
.b315	20 6d 89	jsr $896d		jsr	AssembleGroup4
>b318	da					.byte $da
.b319					Assemble_stp:
.b319	20 6d 89	jsr $896d		jsr	AssembleGroup4
>b31c	db					.byte $db
.b31d					Assemble_inx:
.b31d	20 6d 89	jsr $896d		jsr	AssembleGroup4
>b320	e8					.byte $e8
.b321					Assemble_nop:
.b321	20 6d 89	jsr $896d		jsr	AssembleGroup4
>b324	ea					.byte $ea
.b325					Assemble_sed:
.b325	20 6d 89	jsr $896d		jsr	AssembleGroup4
>b328	f8					.byte $f8
.b329					Assemble_plx:
.b329	20 6d 89	jsr $896d		jsr	AssembleGroup4
>b32c	fa					.byte $fa

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/constants.asm

.b32d					DecimalScalarTable:
>b32d	66 66 66 66				.dword $66666666 ; 0.1
>b331	de					.byte $de
>b332	1f 85 eb 51				.dword $51eb851f ; 0.01
>b336	db					.byte $db
>b337	4c 37 89 41				.dword $4189374c ; 0.001
>b33b	d8					.byte $d8
>b33c	ac 8b db 68				.dword $68db8bac ; 0.0001
>b340	d4					.byte $d4
>b341	24 d6 e2 53				.dword $53e2d624 ; 1e-05
>b345	d1					.byte $d1
>b346	83 de 1b 43				.dword $431bde83 ; 1e-06
>b34a	ce					.byte $ce
>b34b	6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>b34f	ca					.byte $ca
>b350	89 3b e6 55				.dword $55e63b89 ; 1e-08
>b354	c7					.byte $c7
>b355	a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>b359	c4					.byte $c4
>b35a	67 7f f3 6d				.dword $6df37f67 ; 1e-10
>b35e	c0					.byte $c0
>b35f	86 ff f5 57				.dword $57f5ff86 ; 1e-11
>b363	bd					.byte $bd

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.asm

.b364					SyntaxError:
.b364	a9 02		lda #$02		lda	#2
.b366	4c 11 99	jmp $9911		jmp	ErrorHandler
.b369					RangeError:
.b369	a9 04		lda #$04		lda	#4
.b36b	4c 11 99	jmp $9911		jmp	ErrorHandler
.b36e					TypeError:
.b36e	a9 05		lda #$05		lda	#5
.b370	4c 11 99	jmp $9911		jmp	ErrorHandler
.b373					ArgumentError:
.b373	a9 07		lda #$07		lda	#7
.b375	4c 11 99	jmp $9911		jmp	ErrorHandler
.b378					NotDoneError:
.b378	a9 0c		lda #$0c		lda	#12
.b37a	4c 11 99	jmp $9911		jmp	ErrorHandler
.b37d					ErrorText:
>b37d	42 72 65 61 6b 00			.text	"Break",0
>b383	53 79 6e 74 61 78 20 65			.text	"Syntax error",0
>b38b	72 72 6f 72 00
>b390	44 69 76 69 73 69 6f 6e			.text	"Division by zero",0
>b398	20 62 79 20 7a 65 72 6f 00
>b3a1	4f 75 74 20 6f 66 20 52			.text	"Out of Range",0
>b3a9	61 6e 67 65 00
>b3ae	54 79 70 65 20 6d 69 73			.text	"Type mismatch",0
>b3b6	6d 61 74 63 68 00
>b3bc	4f 75 74 20 6f 66 20 6d			.text	"Out of memory",0
>b3c4	65 6d 6f 72 79 00
>b3ca	49 6c 6c 65 67 61 6c 20			.text	"Illegal argument",0
>b3d2	61 72 67 75 6d 65 6e 74 00
>b3db	53 74 6f 70 00				.text	"Stop",0
>b3e0	53 74 72 69 6e 67 20 74			.text	"String too long",0
>b3e8	6f 6f 20 6c 6f 6e 67 00
>b3f0	41 73 73 65 72 74 69 6f			.text	"Assertion failed",0
>b3f8	6e 20 66 61 69 6c 65 64 00
>b401	4f 75 74 20 6f 66 20 64			.text	"Out of data",0
>b409	61 74 61 00
>b40d	55 6e 69 6d 70 6c 65 6d			.text	"Unimplemented",0
>b415	65 6e 74 65 64 00
>b41b	4e 6f 20 73 75 63 68 20			.text	"No such line number",0
>b423	6c 69 6e 65 20 6e 75 6d 62 65 72 00
>b42f	52 65 74 75 72 6e 20 77			.text	"Return without Gosub",0
>b437	69 74 68 6f 75 74 20 47 6f 73 75 62 00
>b444	55 6e 74 69 6c 20 77 69			.text	"Until without Repeat",0
>b44c	74 68 6f 75 74 20 52 65 70 65 61 74 00
>b459	57 65 6e 64 20 77 69 74			.text	"Wend without While",0
>b461	68 6f 75 74 20 57 68 69 6c 65 00
>b46c	4e 65 78 74 20 77 69 74			.text	"Next without For",0
>b474	68 6f 75 74 20 46 6f 72 00
>b47d	42 41 53 49 43 20 53 74			.text	"BASIC Stack full",0
>b485	61 63 6b 20 66 75 6c 6c 00
>b48e	4f 70 65 6e 20 53 74 72			.text	"Open Structure",0
>b496	75 63 74 75 72 65 00
>b49d	45 6e 64 50 72 6f 63 20			.text	"EndProc without call",0
>b4a5	77 69 74 68 6f 75 74 20 63 61 6c 6c 00
>b4b2	41 72 72 61 79 20 61 6c			.text	"Array already defined",0
>b4ba	72 65 61 64 79 20 64 65 66 69 6e 65 64 00
>b4c8	41 72 72 61 79 20 73 69			.text	"Array size",0
>b4d0	7a 65 00
>b4d3	42 61 64 20 61 72 72 61			.text	"Bad array index",0
>b4db	79 20 69 6e 64 65 78 00

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/timestamp.asm

>b4e3	42 75 69 6c 74 20 53 75			.text "Built Sunday 23-Oct-2022. Build 2232."
>b4eb	6e 64 61 79 20 32 33 2d 4f 63 74 2d 32 30 32 32
>b4fb	2e 20 42 75 69 6c 64 20 32 32 33 32 2e

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/hardware/junior/extern.asm

.b508					EXTInitialise:
.b508	64 01		stz $01				stz 	1 							; Access I/O
.b50a	9c 04 d0	stz $d004			stz 	$D004 						; Disable border
.b50d	9c 08 d0	stz $d008			stz 	$D008
.b510	9c 09 d0	stz $d009			stz 	$D009
.b513	a9 09		lda #$09			lda 	#1+8						; Timer On at 70Hz counting up.
.b515	8d 58 d6	sta $d658			sta 	$D658
.b518	60		rts				rts
.b519					EXTClearScreen:
.b519	4c ea ff	jmp $ffea			jmp 	$FFEA
.b51c					EXTPrintCharacter:
.b51c	48		pha				pha
.b51d	da		phx				phx
.b51e	5a		phy				phy
.b51f	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.b522	7a		ply				ply
.b523	fa		plx				plx
.b524	68		pla				pla
.b525	60		rts				rts
.b526					EXTInputSingleCharacter:
.b526	da		phx				phx
.b527	5a		phy				phy
.b528					_EISCWait:
.b528	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.b52b	c9 00		cmp #$00			cmp 	#0
.b52d	f0 f9		beq $b528			beq 	_EISCWait
.b52f	7a		ply				ply
.b530	fa		plx				plx
.b531	60		rts				rts
.b532					EXTInputLine:
.b532	a2 00		ldx #$00			ldx 	#0 							; position in line <- start of line
.b534					_ILLoop:
.b534	da		phx				phx 								; read character in
.b535	20 cf ff	jsr $ffcf			jsr 	$FFCF
.b538	fa		plx				plx
.b539	c9 08		cmp #$08			cmp 	#8 							; backspace, CBM doesn't need this.
.b53b	f0 12		beq $b54f			beq 	_ILBackspace
.b53d	c9 0d		cmp #$0d			cmp 	#13							; exit ?
.b53f	f0 15		beq $b556			beq 	_ILExit
.b541	c9 20		cmp #$20			cmp 	#32 						; ignore other control
.b543	90 ef		bcc $b534			bcc 	_ILLoop
.b545	e0 50		cpx #$50			cpx 	#MaxLineSize 				; already full buffer
.b547	f0 eb		beq $b534			beq 	_ILLoop
.b549	9d a6 05	sta $05a6,x			sta 	lineBuffer,x 				; save it
.b54c	e8		inx				inx
.b54d	80 e5		bra $b534			bra 	_ILLoop
.b54f					_ILBackspace:
.b54f	e0 00		cpx #$00			cpx 	#0  						; can't backspace, start of line.
.b551	f0 e1		beq $b534			beq 	_ILLoop
.b553	ca		dex				dex 								; back one.
.b554	80 de		bra $b534			bra 	_ILLoop
.b556					_ILExit:
.b556	20 1c b5	jsr $b51c			jsr 	EXTPrintCharacter
.b559	9e a6 05	stz $05a6,x			stz 	lineBuffer,x 				; make ASCIIZ and exit with address in XA
.b55c	60		rts				rts
.b55d					EXTBreakCheck:
.b55d	4c e1 ff	jmp $ffe1			jmp		$FFE1
.b560					EXTReadController:
.b560	da		phx				phx
.b561	a2 00		ldx #$00			ldx 	#0
.b563	a9 05		lda #$05			lda 	#(($2D) >> 3)
.b565	20 e7 ff	jsr $ffe7			jsr 	$FFE7
.b568	29 20		and #$20			and 	#($01 << (($2D) & 7))
.b56a	f0 04		beq $b570			beq 	_NoSet1
.b56c	8a		txa				txa
.b56d	09 01		ora #$01			ora 	#1
.b56f	aa		tax				tax
.b570					_NoSet1:
.b570	a9 05		lda #$05			lda 	#(($2C) >> 3)
.b572	20 e7 ff	jsr $ffe7			jsr 	$FFE7
.b575	29 10		and #$10			and 	#($01 << (($2C) & 7))
.b577	f0 04		beq $b57d			beq 	_NoSet1
.b579	8a		txa				txa
.b57a	09 02		ora #$02			ora 	#2
.b57c	aa		tax				tax
.b57d					_NoSet1:
.b57d	a9 06		lda #$06			lda 	#(($32) >> 3)
.b57f	20 e7 ff	jsr $ffe7			jsr 	$FFE7
.b582	29 04		and #$04			and 	#($01 << (($32) & 7))
.b584	f0 04		beq $b58a			beq 	_NoSet1
.b586	8a		txa				txa
.b587	09 04		ora #$04			ora 	#4
.b589	aa		tax				tax
.b58a					_NoSet1:
.b58a	a9 04		lda #$04			lda 	#(($25) >> 3)
.b58c	20 e7 ff	jsr $ffe7			jsr 	$FFE7
.b58f	29 20		and #$20			and 	#($01 << (($25) & 7))
.b591	f0 04		beq $b597			beq 	_NoSet1
.b593	8a		txa				txa
.b594	09 08		ora #$08			ora 	#8
.b596	aa		tax				tax
.b597					_NoSet1:
.b597	a9 04		lda #$04			lda 	#(($26) >> 3)
.b599	20 e7 ff	jsr $ffe7			jsr 	$FFE7
.b59c	29 40		and #$40			and 	#($01 << (($26) & 7))
.b59e	f0 04		beq $b5a4			beq 	_NoSet1
.b5a0	8a		txa				txa
.b5a1	09 10		ora #$10			ora 	#16
.b5a3	aa		tax				tax
.b5a4					_NoSet1:
.b5a4	8a		txa				txa
.b5a5	fa		plx				plx
.b5a6	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/delete.asm

.b5a7					MemoryDeleteLine:
.b5a7	20 c6 b5	jsr $b5c6			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.b5aa	b2 30		lda ($30)			lda 	(codePtr) 					; size to delete => y
.b5ac	a8		tay				tay
.b5ad					_MDDLLoop:
.b5ad	b1 30		lda ($30),y			lda 	(codePtr),y 				; copy down
.b5af	92 30		sta ($30)			sta 	(codePtr)
.b5b1	a5 30		lda $30				lda 	codePtr 					; check done the lot.
.b5b3	c5 3a		cmp $3a				cmp 	zTemp2
.b5b5	d0 07		bne $b5be			bne 	_MDLDLNext
.b5b7	a5 31		lda $31				lda 	codePtr+1
.b5b9	c5 3b		cmp $3b				cmp 	zTemp2+1
.b5bb	d0 01		bne $b5be			bne 	_MDLDLNext
.b5bd					_MDDLExit:
.b5bd	60		rts				rts
.b5be					_MDLDLNext:
.b5be	e6 30		inc $30				inc 	codePtr						; next byte
.b5c0	d0 eb		bne $b5ad			bne 	_MDDLLoop
.b5c2	e6 31		inc $31				inc 	codePtr+1
.b5c4	80 e7		bra $b5ad			bra 	_MDDLLoop
.b5c6					IMemoryFindEnd:
.b5c6	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.b5c8	85 3a		sta $3a				sta 	0+zTemp2
.b5ca	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.b5cc	85 3b		sta $3b				sta 	1+zTemp2
.b5ce					_MDLFELoop:
.b5ce	b2 3a		lda ($3a)			lda 	(zTemp2)
.b5d0	f0 0b		beq $b5dd			beq 	_MDLFEExit
.b5d2	18		clc				clc
.b5d3	65 3a		adc $3a				adc 	zTemp2
.b5d5	85 3a		sta $3a				sta 	zTemp2
.b5d7	90 f5		bcc $b5ce			bcc 	_MDLFELoop
.b5d9	e6 3b		inc $3b				inc 	zTemp2+1
.b5db	80 f1		bra $b5ce			bra 	_MDLFELoop
.b5dd					_MDLFEExit:
.b5dd	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/insert.asm

.b5de					MemoryInsertLine:
.b5de	08		php				php
.b5df	20 c6 b5	jsr $b5c6			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.b5e2	a5 3b		lda $3b				lda 	zTemp2+1 					; space ?
.b5e4	1a		inc a				inc 	a
.b5e5	c9 7f		cmp #$7f			cmp 	#(BasicEnd >> 8)-1
.b5e7	b0 36		bcs $b61f			bcs 	_MDLIError
.b5e9	28		plp				plp
.b5ea	90 08		bcc $b5f4			bcc 	_MDLIFound
.b5ec	a5 3a		lda $3a				lda 	zTemp2 						; if CS on entry append.
.b5ee	85 30		sta $30				sta 	codePtr
.b5f0	a5 3b		lda $3b				lda 	zTemp2+1
.b5f2	85 31		sta $31				sta 	codePtr+1
.b5f4					_MDLIFound:
.b5f4	ad a6 04	lda $04a6			lda 	tokenOffset 				; insert gap in Y, the offset, e.g. length of the new line
.b5f7	a8		tay				tay
.b5f8					_MDLIInsert:
.b5f8	b2 3a		lda ($3a)			lda 	(zTemp2) 					; shift one byte up , at least one covers end case.
.b5fa	91 3a		sta ($3a),y			sta 	(zTemp2),y 					; work from top down.
.b5fc	a5 30		lda $30				lda 	codePtr 					; done insert point ?
.b5fe	c5 3a		cmp $3a				cmp 	zTemp2
.b600	d0 06		bne $b608			bne 	_MDLINext
.b602	a5 31		lda $31				lda 	codePtr+1
.b604	c5 3b		cmp $3b				cmp 	zTemp2+1
.b606	f0 0a		beq $b612			beq 	_MDLIHaveSpace
.b608					_MDLINext:
.b608	a5 3a		lda $3a				lda 	zTemp2 						; if no, keep zTemp2 going backwards
.b60a	d0 02		bne $b60e			bne 	_MDLINoBorrow
.b60c	c6 3b		dec $3b				dec 	zTemp2+1
.b60e					_MDLINoBorrow:
.b60e	c6 3a		dec $3a				dec 	zTemp2
.b610	80 e6		bra $b5f8			bra 	_MDLIInsert
.b612					_MDLIHaveSpace:
.b612	ac a6 04	ldy $04a6			ldy 	tokenOffset 				; bytes to copy
.b615	88		dey				dey 								; from offset-1 to 0
.b616					_MDLICopy:
.b616	b9 a6 04	lda $04a6,y			lda 	tokenOffset,y
.b619	91 30		sta ($30),y			sta 	(codePtr),y
.b61b	88		dey				dey
.b61c	10 f8		bpl $b616			bpl 	_MDLICopy
.b61e	60		rts				rts
.b61f					_MDLIError:
.b61f	a9 06		lda #$06		lda	#6
.b621	4c 11 99	jmp $9911		jmp	ErrorHandler
.b624					MDLAppendLine:
.b624	86 37		stx $37				stx 	zTemp0+1 					; save new line at zTemp0
.b626	85 36		sta $36				sta 	zTemp0
.b628	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.b62a	85 38		sta $38				sta 	0+zTemp1
.b62c	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.b62e	85 39		sta $39				sta 	1+zTemp1
.b630	b2 38		lda ($38)			lda 	(zTemp1)
.b632	d0 0a		bne $b63e			bne 	_MDLANoInitialise
.b634	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.b636	8d 6b 06	sta $066b			sta 	0+AppendPointer
.b639	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.b63b	8d 6c 06	sta $066c			sta 	1+AppendPointer
.b63e					_MDLANoInitialise:
.b63e	18		clc				clc
.b63f	ad 6b 06	lda $066b			lda 	AppendPointer 				; copy append pointer to zTemp1 adding the offset as you go
.b642	85 38		sta $38				sta 	zTemp1
.b644	72 36		adc ($36)			adc 	(zTemp0)
.b646	8d 6b 06	sta $066b			sta 	AppendPointer
.b649	ad 6c 06	lda $066c			lda 	AppendPointer+1
.b64c	85 39		sta $39				sta 	zTemp1+1
.b64e	69 00		adc #$00			adc 	#0
.b650	8d 6c 06	sta $066c			sta 	AppendPointer+1
.b653	a0 00		ldy #$00			ldy 	#0
.b655					_MDLACopy:
.b655	b1 36		lda ($36),y			lda 	(zTemp0),y 					; copy new line in
.b657	91 38		sta ($38),y			sta 	(zTemp1),y
.b659	c8		iny				iny
.b65a	98		tya				tya
.b65b	d2 36		cmp ($36)			cmp 	(zTemp0) 					; done whole line
.b65d	d0 f6		bne $b655			bne 	_MDLACopy
.b65f	a9 00		lda #$00			lda 	#0 							; end of program.
.b661	91 38		sta ($38),y			sta 	(zTemp1),y
.b663	60		rts				rts
.066b					AppendPointer:
>066b							.fill 	2

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/memory.asm

.a581					MemoryNew:
.a581	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a583	85 30		sta $30				sta 	codePtr
.a585	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a587	85 31		sta $31				sta 	codePtr+1
.a589	a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.a58b	92 30		sta ($30)			sta 	(codePtr)
.a58d	60		rts				rts
.a58e					MemoryInline:
.a58e	98		tya				tya 								; put address into stack,x
.a58f	18		clc				clc
.a590	65 30		adc $30				adc 	codePtr
.a592	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a595	a5 31		lda $31				lda 	codePtr+1
.a597	69 00		adc #$00			adc 	#0
.a599	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a59c	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.a59f	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.a5a2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/search.asm

.a5a3					MemorySearch:
.a5a3	85 36		sta $36				sta 	zTemp0 						; save line number zTemp0
.a5a5	86 37		stx $37				stx 	zTemp0+1
.a5a7	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a5a9	85 30		sta $30				sta 	codePtr
.a5ab	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a5ad	85 31		sta $31				sta 	codePtr+1
.a5af					_MTAXLoop:
.a5af	b2 30		lda ($30)			lda 	(codePtr)
.a5b1	18		clc				clc
.a5b2	f0 21		beq $a5d5			beq 	_MTAXExit 					; reached end, exit with CC.
.a5b4	a0 01		ldy #$01			ldy 	#1 							; calculate current line# - requested line#
.a5b6	b1 30		lda ($30),y			lda 	(codePtr),y
.a5b8	38		sec				sec
.a5b9	e5 36		sbc $36				sbc 	zTemp0
.a5bb	85 38		sta $38				sta 	zTemp1 						; save interim to set Z
.a5bd	c8		iny				iny 								; do the MSB
.a5be	b1 30		lda ($30),y			lda 	(codePtr),y
.a5c0	e5 37		sbc $37				sbc 	zTemp0+1
.a5c2	05 38		ora $38				ora 	zTemp1
.a5c4	f0 0f		beq $a5d5			beq 	_MTAXExit	 				; found
.a5c6	b0 0d		bcs $a5d5			bcs 	_MTAXExit 					; current < required exit
.a5c8	18		clc				clc
.a5c9	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.a5cb	65 30		adc $30				adc 	codePtr
.a5cd	85 30		sta $30				sta 	codePtr
.a5cf	90 02		bcc $a5d3			bcc 	_CREExit
.a5d1	e6 31		inc $31				inc 	codePtr+1
.a5d3					_CREExit:
.a5d3	80 da		bra $a5af			bra 	_MTAXLoop
.a5d5					_MTAXExit:
.a5d5	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/bytes.asm

.a5d6					StackPushByte:
.a5d6	48		pha				pha 								; save byte
.a5d7	a5 34		lda $34				lda 	BasicStack
.a5d9	d0 09		bne $a5e4			bne 	_SPBNoBorrow
.a5db	c6 35		dec $35				dec 	BasicStack+1
.a5dd	48		pha				pha
.a5de	a5 35		lda $35				lda 	BasicStack+1
.a5e0	c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.a5e2	90 06		bcc $a5ea			bcc 	_SPBMemory
.a5e4					_SPBNoBorrow:
.a5e4	c6 34		dec $34				dec 	BasicStack
.a5e6	68		pla				pla 								; get back and write
.a5e7	92 34		sta ($34)			sta 	(BasicStack)
.a5e9	60		rts				rts
.a5ea					_SPBMemory:
.a5ea	a9 12		lda #$12		lda	#18
.a5ec	4c 11 99	jmp $9911		jmp	ErrorHandler
.a5ef					StackPopByte:
.a5ef	b2 34		lda ($34)			lda 	(BasicStack)
.a5f1	e6 34		inc $34				inc 	BasicStack
.a5f3	d0 02		bne $a5f7			bne 	_SPBNoCarry
.a5f5	e6 35		inc $35				inc 	BasicStack+1
.a5f7					_SPBNoCarry:
.a5f7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/frames.asm

.a5f8					StackOpen:
.a5f8	48		pha				pha 								; save frame byte
.a5f9	29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.a5fb	0a		asl a				asl 	a 							; claim twice this for storage
.a5fc	49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.a5fe	38		sec				sec 								; so basically subtracting from
.a5ff	65 34		adc $34				adc 	basicStack 	 				; basicStack
.a601	85 34		sta $34				sta 	basicStack
.a603	b0 08		bcs $a60d			bcs 	_SONoBorrow
.a605	c6 35		dec $35				dec 	basicStack+1
.a607	a5 35		lda $35				lda 	basicStack+1 				; have we reached stack overflow
.a609	c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.a60b	90 04		bcc $a611			bcc 	_SOMemory
.a60d					_SONoBorrow:
.a60d	68		pla				pla 								; get marker back and write at TOS
.a60e	92 34		sta ($34)			sta 	(basicStack)
.a610	60		rts				rts
.a611					_SOMemory:
.a611	a9 12		lda #$12		lda	#18
.a613	4c 11 99	jmp $9911		jmp	ErrorHandler
.a616					StackClose:
.a616	b2 34		lda ($34)			lda 	(basicStack) 				; get TOS marker
.a618	29 0f		and #$0f			and 	#$0F 						; bytes to add back
.a61a	0a		asl a				asl 	a 							; claim twice this.
.a61b	65 34		adc $34				adc 	basicStack 					; add to the stack pointer.
.a61d	85 34		sta $34				sta 	basicStack
.a61f	90 02		bcc $a623			bcc 	_SCExit
.a621	e6 35		inc $35				inc 	basicStack+1
.a623					_SCExit:
.a623	60		rts				rts
.a624					StackCheckFrame:
.a624	48		pha				pha
.a625					_StackRemoveLocals:
.a625	b2 34		lda ($34)			lda 	(basicStack) 				; check for local, keep popping them
.a627	c9 03		cmp #$03			cmp 	#STK_LOCALS+1
.a629	b0 05		bcs $a630			bcs 	_SCNoLocal
.a62b	20 25 ad	jsr $ad25			jsr 	LocalPopValue
.a62e	80 f5		bra $a625			bra 	_StackRemoveLocals
.a630					_SCNoLocal:
.a630	68		pla				pla
.a631	52 34		eor ($34)			eor 	(basicStack) 				; xor with toS marker
.a633	29 f0		and #$f0			and 	#$F0 						; check type bits
.a635	d0 01		bne $a638			bne 	_SCFError 					; different, we have structures mixed up
.a637	60		rts				rts
.a638					_SCFError:
.a638	8a		txa				txa 								; report error X
.a639	4c 11 99	jmp $9911			jmp 	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/location.asm

.a63c					STKSaveCodePosition:
.a63c	5a		phy				phy
.a63d	98		tya				tya 								; save Y
.a63e	a0 05		ldy #$05			ldy 	#5
.a640	91 34		sta ($34),y			sta 	(basicStack),y
.a642	88		dey				dey 								; save Code Pointer
.a643					_STKSaveLoop:
.a643	b9 2f 00	lda $002f,y			lda 	safePtr-1,y 				; allows us to access the pointer w/out issues.
.a646	91 34		sta ($34),y			sta 	(basicStack),y
.a648	88		dey				dey
.a649	d0 f8		bne $a643			bne 	_STKSaveLoop
.a64b	7a		ply				ply
.a64c	60		rts				rts
.a64d					STKLoadCodePosition:
.a64d	a0 01		ldy #$01			ldy 	#1 							; load code pointer back
.a64f					_STKLoadLoop:
.a64f	b1 34		lda ($34),y			lda 	(basicStack),y
.a651	99 2f 00	sta $002f,y			sta 	safePtr-1,y
.a654	c8		iny				iny
.a655	c0 05		cpy #$05			cpy 	#5
.a657	d0 f6		bne $a64f			bne 	_STKLoadLoop
.a659	b1 34		lda ($34),y			lda 	(basicStack),y 				; get Y offset
.a65b	a8		tay				tay
.a65c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/setup.asm

.a65d					StackReset:
.a65d	a9 ff		lda #$ff			lda 	#((BasicStackBase+BasicStackSize-1) & $FF)
.a65f	85 34		sta $34				sta 	0+basicStack
.a661	a9 0f		lda #$0f			lda 	#((BasicStackBase+BasicStackSize-1) >> 8)
.a663	85 35		sta $35				sta 	1+basicStack
.a665	a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.a667	92 34		sta ($34)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.a669	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/concrete.asm

.b664					StringConcrete:
.b664	5a		phy				phy 								; save position on stack
.b665	20 de a1	jsr $a1de			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.b668	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy target string to zTemp1
.b66b	85 38		sta $38				sta 	zTemp1
.b66d	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.b670	85 39		sta $39				sta 	zTemp1+1
.b672	a0 ff		ldy #$ff			ldy 	#$FF	 					; calculate string length
.b674					_SALength:
.b674	c8		iny				iny
.b675	b1 38		lda ($38),y			lda 	(zTemp1),y
.b677	d0 fb		bne $b674			bne 	_SALength
.b679	c0 fd		cpy #$fd			cpy 	#253 						; string too long
.b67b	b0 3f		bcs $b6bc			bcs 	_SALengthError
.b67d	98		tya				tya 				 				; length of the new string
.b67e	18		clc				clc
.b67f	69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.b681	90 02		bcc $b685			bcc 	_SAHaveLength
.b683	a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.b685					_SAHaveLength:
.b685	48		pha				pha 								; save length.
.b686	38		sec				sec
.b687	49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.b689	6d 8e 04	adc $048e			adc 	StringMemory
.b68c	8d 8e 04	sta $048e			sta 	StringMemory
.b68f	85 3a		sta $3a				sta 	zTemp2 						; update storage address
.b691	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; update mantissa address
.b694	a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.b696	6d 8f 04	adc $048f			adc 	StringMemory+1
.b699	8d 8f 04	sta $048f			sta 	StringMemory+1
.b69c	85 3b		sta $3b				sta 	zTemp2+1
.b69e	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.b6a1	68		pla				pla 								; save length-3 (chars allowed) in first byte
.b6a2	38		sec				sec
.b6a3	e9 03		sbc #$03			sbc 	#3
.b6a5	92 3a		sta ($3a)			sta 	(zTemp2)
.b6a7	a9 00		lda #$00			lda 	#0 							; clear the status byte.
.b6a9	a0 01		ldy #$01			ldy 	#1
.b6ab	91 3a		sta ($3a),y			sta 	(zTemp2),y
.b6ad					_SACopyNewString:
.b6ad	a0 00		ldy #$00			ldy 	#0
.b6af					_SACopyNSLoop:
.b6af	b1 38		lda ($38),y			lda 	(zTemp1),y 					; get character
.b6b1	c8		iny				iny 								; write two on in string storage
.b6b2	c8		iny				iny
.b6b3	91 3a		sta ($3a),y			sta 	(zTemp2),y
.b6b5	88		dey				dey 								; this makes it one one.
.b6b6	c9 00		cmp #$00			cmp 	#0 							; until EOS copied
.b6b8	d0 f5		bne $b6af			bne 	_SACopyNSLoop
.b6ba	7a		ply				ply
.b6bb	60		rts				rts
.b6bc					_SALengthError:
.b6bc	a9 09		lda #$09		lda	#9
.b6be	4c 11 99	jmp $9911		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/stringalloc.asm

.b6c1					StringSystemInitialise:
.b6c1	a9 ff		lda #$ff			lda 	#((EndVariableSpace-1) & $FF)
.b6c3	8d 8e 04	sta $048e			sta 	0+StringMemory
.b6c6	a9 1f		lda #$1f			lda 	#((EndVariableSpace-1) >> 8)
.b6c8	8d 8f 04	sta $048f			sta 	1+StringMemory
.b6cb	9c ff 1f	stz $1fff			stz 	EndVariableSpace-1 			; put a zero at the end, so know end of string memory.
.b6ce	60		rts				rts
.b6cf					StringSpaceInitialise:
.b6cf	20 de a1	jsr $a1de			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.b6d2	a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.b6d4	8d 90 04	sta $0490			sta 	StringInitialised
.b6d7	ad 8e 04	lda $048e			lda 	StringMemory 				; allocate 256 bytes for one concreted string
.b6da	8d 91 04	sta $0491			sta 	StringTempPointer
.b6dd	ad 8f 04	lda $048f			lda 	StringMemory+1
.b6e0	3a		dec a				dec 	a
.b6e1	8d 92 04	sta $0492			sta 	StringTempPointer+1
.b6e4	60		rts				rts
.b6e5					StringTempAllocate:
.b6e5	c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.b6e7	b0 35		bcs $b71e			bcs 	_STALength
.b6e9	2c 90 04	bit $0490			bit 	StringInitialised 			; already initialised
.b6ec	30 05		bmi $b6f3			bmi 	_STAAllocate
.b6ee	48		pha				pha 								; save value to subtract.
.b6ef	20 cf b6	jsr $b6cf			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.b6f2	68		pla				pla 								; restore it
.b6f3					_STAAllocate:
.b6f3	49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.b6f5	18		clc				clc  								; deliberate allows one more
.b6f6	6d 91 04	adc $0491			adc 	StringTempPointer 			; subtract from temp pointer
.b6f9	8d 91 04	sta $0491			sta 	StringTempPointer
.b6fc	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; address in mantissa
.b6ff	85 3c		sta $3c				sta 	zsTemp 						; and zsTemp
.b701	ad 92 04	lda $0492			lda 	StringTempPointer+1
.b704	69 ff		adc #$ff			adc 	#$FF
.b706	8d 92 04	sta $0492			sta 	StringTempPointer+1
.b709	85 3d		sta $3d				sta 	zsTemp+1
.b70b	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.b70e	9e 18 04	stz $0418,x			stz 	NSMantissa2,x 				; set the typing data
.b711	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.b714	a9 10		lda #$10			lda 	#NSTString
.b716	9d 00 04	sta $0400,x			sta 	NSStatus,x
.b719	a9 00		lda #$00			lda 	#0 							; clear the target string
.b71b	92 3c		sta ($3c)			sta 	(zsTemp)
.b71d	60		rts				rts
.b71e					_STALength:
.b71e	a9 09		lda #$09		lda	#9
.b720	4c 11 99	jmp $9911		jmp	ErrorHandler
.b723					StringTempWrite:
.b723	48		pha				pha
.b724	92 3c		sta ($3c)			sta 	(zsTemp)
.b726	e6 3c		inc $3c				inc 	zsTemp
.b728	d0 02		bne $b72c			bne 	_STWNoCarry
.b72a	e6 3d		inc $3d				inc 	zsTemp+1
.b72c					_STWNoCarry:
.b72c	a9 00		lda #$00			lda 	#0
.b72e	92 3c		sta ($3c)			sta 	(zsTemp)
.b730	68		pla				pla
.b731	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/backload.asm

.a66a					BackloadProgram:
.a66a	a2 ff		ldx #$ff			ldx 	#$FF
.a66c	8e fa ff	stx $fffa			stx 	$FFFA 						; fast mode (autorun only)
.a66f	20 99 a6	jsr $a699			jsr 	BLReadByte
.a672	30 1e		bmi $a692			bmi 	_BPExit
.a674					_BPCopy:
.a674	e8		inx				inx  								; copy byte in
.a675	9d a6 05	sta $05a6,x			sta 	lineBuffer,x
.a678	9e a7 05	stz $05a7,x			stz 	lineBuffer+1,x
.a67b	20 99 a6	jsr $a699			jsr 	BLReadByte 					; read next byte
.a67e	30 0a		bmi $a68a			bmi 	_BPEndLine 					; -ve = EOL
.a680	c9 09		cmp #$09			cmp 	#9 							; handle TAB
.a682	d0 02		bne $a686			bne 	_BPNotTab
.a684	a9 20		lda #$20			lda 	#' '
.a686					_BPNotTab:
.a686	c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.a688	b0 ea		bcs $a674			bcs 	_BPCopy
.a68a					_BPEndLine:
.a68a	20 76 aa	jsr $aa76			jsr 	TokeniseLine 				; tokenise the line.
.a68d	20 27 8b	jsr $8b27			jsr 	EditProgramCode
.a690	80 d8		bra $a66a			bra 	BackloadProgram
.a692					_BPExit:
.a692	9c fa ff	stz $fffa			stz 	$FFFA 						; clear fast mode (autorun only)
.a695	20 e5 8b	jsr $8be5			jsr 	ClearCommand 				; clear variables etc.
.a698	60		rts				rts
.a699					BLReadByte:
.a699					_BLLoad:
.a699	ad 00 30	lda $3000			lda 	$3000 						; hardcoded in the makefile.
.a69c	ee 9a a6	inc $a69a			inc 	_BLLoad+1
.a69f	d0 03		bne $a6a4			bne 	_BLNoCarry
.a6a1	ee 9b a6	inc $a69b			inc 	_BLLoad+2
.a6a4					_BLNoCarry:
.a6a4	c9 00		cmp #$00			cmp 	#0
.a6a6	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/searchtokens.asm

.a6a7					TokeniseSearchTable:
.a6a7	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token.
.a6a9	85 36		sta $36				sta 	zTemp0
.a6ab	a0 00		ldy #$00			ldy 	#0
.a6ad	a9 80		lda #$80			lda 	#$80 						; token #
.a6af	85 38		sta $38				sta 	zTemp1
.a6b1					_TSTLoop:
.a6b1	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.a6b3	30 49		bmi $a6fe			bmi 	_TSTFail 					; -ve = end of table
.a6b5	f0 2e		beq $a6e5			beq 	_TSTNext 					; zero, check next it's a dummy
.a6b7	c8		iny				iny 								; get the hash
.a6b8	b1 36		lda ($36),y			lda 	(zTemp0),y
.a6ba	88		dey				dey
.a6bb	cd 83 04	cmp $0483			cmp 	identHash 					; check they match, if not go to next
.a6be	d0 25		bne $a6e5			bne 	_TSTNext
.a6c0	ad 82 04	lda $0482			lda 	identTypeEnd 				; length of identifier
.a6c3	38		sec				sec
.a6c4	ed 80 04	sbc $0480			sbc 	identStart
.a6c7	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; no match, then return.
.a6c9	d0 1a		bne $a6e5			bne 	_TSTNext
.a6cb	5a		phy				phy 								; save Y , we might fail
.a6cc	c8		iny				iny 								; point to text
.a6cd	c8		iny				iny
.a6ce	ae 80 04	ldx $0480			ldx 	identStart 					; offset in line buffer in X
.a6d1					_TSTCompareName:
.a6d1	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; compare text.
.a6d4	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.a6d6	d0 0c		bne $a6e4			bne 	_TSTNextPullY 				; fail, pullY and do next
.a6d8	e8		inx				inx
.a6d9	c8		iny				iny
.a6da	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; complete match.
.a6dd	d0 f2		bne $a6d1			bne 	_TSTCompareName
.a6df	7a		ply				ply 								; throw Y
.a6e0	a5 38		lda $38				lda 	zTemp1 						; get token #
.a6e2	38		sec				sec 								; return with CS = passed.
.a6e3	60		rts				rts
.a6e4					_TSTNextPullY:
.a6e4	7a		ply				ply 								; restore current, fall through.
.a6e5					_TSTNext:
.a6e5	e6 38		inc $38				inc 	zTemp1 						; token counter
.a6e7	98		tya				tya
.a6e8	18		clc				clc
.a6e9	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.a6eb	1a		inc a				inc 	a 							; +1
.a6ec	1a		inc a				inc 	a 							; +2
.a6ed	a8		tay				tay
.a6ee	10 c1		bpl $a6b1			bpl 	_TSTLoop 					; if Y < $80 loop back
.a6f0	98		tya				tya 								; add Y to zTemp0 and reset Y
.a6f1	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.a6f3	18		clc				clc  								; but have tables > 255 bytes
.a6f4	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.a6f6	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.a6f8	90 b7		bcc $a6b1			bcc 	_TSTLoop
.a6fa	e6 37		inc $37				inc 	zTemp0+1
.a6fc	80 b3		bra $a6b1			bra 	_TSTLoop
.a6fe					_TSTFail:
.a6fe	18		clc				clc
.a6ff	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/tokenise.asm


;******  Processing file: ./common/tokeniser/../generated/kwdtext.dat

.a700					KeywordSet0:
>a700	00 65					.text	0,$65,""               ; $80 !0:EOF
>a702	00 58					.text	0,$58,""               ; $81 !1:SH1
>a704	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>a706	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $83 ABS(
>a70c	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $84 ALLOC(
>a714	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $85 ASC(
>a71a	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $86 CHR$(
>a721	06 aa 45 56 45 4e 54 28			.text	6,$aa,"EVENT("         ; $87 EVENT(
>a729	05 6b 46 41 4c 53 45			.text	5,$6b,"FALSE"          ; $88 FALSE
>a730	05 44 46 52 41 43 28			.text	5,$44,"FRAC("          ; $89 FRAC(
>a737	04 0d 48 49 54 28			.text	4,$0d,"HIT("           ; $8a HIT(
>a73d	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $8b INT(
>a743	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $8c ISVAL(
>a74b	05 5c 4a 4f 59 42 28			.text	5,$5c,"JOYB("          ; $8d JOYB(
>a752	05 72 4a 4f 59 58 28			.text	5,$72,"JOYX("          ; $8e JOYX(
>a759	05 73 4a 4f 59 59 28			.text	5,$73,"JOYY("          ; $8f JOYY(
>a760	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $90 LEFT$(
>a768	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $91 LEN(
>a76e	04 0e 4d 41 58 28			.text	4,$0e,"MAX("           ; $92 MAX(
>a774	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $93 MID$(
>a77b	04 0c 4d 49 4e 28			.text	4,$0c,"MIN("           ; $94 MIN(
>a781	04 19 4e 4f 54 28			.text	4,$19,"NOT("           ; $95 NOT(
>a787	07 e9 52 41 4e 44 4f 4d			.text	7,$e9,"RANDOM("        ; $96 RANDOM(
>a78f	28
>a790	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $97 RIGHT$(
>a798	28
>a799	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $98 RND(
>a79f	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $99 SGN(
>a7a5	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $9a SPC(
>a7ab	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $9b STR$(
>a7b2	06 a9 54 49 4d 45 52 28			.text	6,$a9,"TIMER("         ; $9c TIMER(
>a7ba	04 40 54 52 55 45			.text	4,$40,"TRUE"           ; $9d TRUE
>a7c0	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $9e VAL(
>a7c6	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $9f FOR
>a7cb	02 8f 49 46				.text	2,$8f,"IF"             ; $a0 IF
>a7cf	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $a1 PROC
>a7d5	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $a2 REPEAT
>a7dd	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $a3 WHILE
>a7e4	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $a4 ENDIF
>a7eb	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $a5 ENDPROC
>a7f3	43
>a7f4	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $a6 NEXT
>a7fa	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $a7 THEN
>a800	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $a8 UNTIL
>a807	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $a9 WEND
>a80d	02 9b 42 59				.text	2,$9b,"BY"             ; $aa BY
>a811	04 1c 43 41 4c 4c			.text	4,$1c,"CALL"           ; $ab CALL
>a817	06 b2 43 49 52 43 4c 45			.text	6,$b2,"CIRCLE"         ; $ac CIRCLE
>a81f	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $ad CLEAR
>a826	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $ae CLS
>a82b	05 7f 43 4f 4c 4f 52			.text	5,$7f,"COLOR"          ; $af COLOR
>a832	06 d4 43 4f 4c 4f 55 52			.text	6,$d4,"COLOUR"         ; $b0 COLOUR
>a83a	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $b1 DATA
>a840	03 da 44 49 4d				.text	3,$da,"DIM"            ; $b2 DIM
>a845	06 db 44 4f 57 4e 54 4f			.text	6,$db,"DOWNTO"         ; $b3 DOWNTO
>a84d	04 29 45 4c 53 45			.text	4,$29,"ELSE"           ; $b4 ELSE
>a853	04 34 46 52 4f 4d			.text	4,$34,"FROM"           ; $b5 FROM
>a859	03 e5 47 46 58				.text	3,$e5,"GFX"            ; $b6 GFX
>a85e	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $b7 GOSUB
>a865	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $b8 GOTO
>a86b	04 24 48 45 52 45			.text	4,$24,"HERE"           ; $b9 HERE
>a871	05 63 49 4d 41 47 45			.text	5,$63,"IMAGE"          ; $ba IMAGE
>a878	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $bb LET
>a87d	04 28 4c 49 4e 45			.text	4,$28,"LINE"           ; $bc LINE
>a883	05 6b 4c 4f 43 41 4c			.text	5,$6b,"LOCAL"          ; $bd LOCAL
>a88a	03 db 4f 46 46				.text	3,$db,"OFF"            ; $be OFF
>a88f	02 9d 4f 4e				.text	2,$9d,"ON"             ; $bf ON
>a893	07 20 4f 55 54 4c 49 4e			.text	7,$20,"OUTLINE"        ; $c0 OUTLINE
>a89b	45
>a89c	04 3f 50 4c 4f 54			.text	4,$3f,"PLOT"           ; $c1 PLOT
>a8a2	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $c2 PRINT
>a8a9	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $c3 READ
>a8af	04 2e 52 45 43 54			.text	4,$2e,"RECT"           ; $c4 RECT
>a8b5	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $c5 REM
>a8ba	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $c6 RETURN
>a8c2	05 7b 53 4f 4c 49 44			.text	5,$7b,"SOLID"          ; $c7 SOLID
>a8c9	06 d7 53 50 52 49 54 45			.text	6,$d7,"SPRITE"         ; $c8 SPRITE
>a8d1	04 45 54 45 58 54			.text	4,$45,"TEXT"           ; $c9 TEXT
>a8d7	02 a3 54 4f				.text	2,$a3,"TO"             ; $ca TO
>a8db	ff					.text	$FF
.a8dc					KeywordSet1:
>a8dc	00 65					.text	0,$65,""               ; $80 !0:EOF
>a8de	00 58					.text	0,$58,""               ; $81 !1:SH1
>a8e0	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>a8e2	08 4c 41 53 53 45 4d 42			.text	8,$4c,"ASSEMBLE"       ; $83 ASSEMBLE
>a8ea	4c 45
>a8ec	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $84 ASSERT
>a8f4	06 bd 42 49 54 4d 41 50			.text	6,$bd,"BITMAP"         ; $85 BITMAP
>a8fc	03 d7 45 4e 44				.text	3,$d7,"END"            ; $86 END
>a901	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $87 LIST
>a907	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $88 NEW
>a90c	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $89 RESTORE
>a914	45
>a915	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $8a RUN
>a91a	07 2a 53 50 52 49 54 45			.text	7,$2a,"SPRITES"        ; $8b SPRITES
>a922	53
>a923	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $8c STOP
>a929	ff					.text	$FF
.a92a					KeywordSet2:
>a92a	00 65					.text	0,$65,""               ; $80 !0:EOF
>a92c	00 58					.text	0,$58,""               ; $81 !1:SH1
>a92e	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>a930	03 c8 41 44 43				.text	3,$c8,"ADC"            ; $83 ADC
>a935	03 d3 41 4e 44				.text	3,$d3,"AND"            ; $84 AND
>a93a	03 e0 41 53 4c				.text	3,$e0,"ASL"            ; $85 ASL
>a93f	03 c8 42 43 43				.text	3,$c8,"BCC"            ; $86 BCC
>a944	03 d8 42 43 53				.text	3,$d8,"BCS"            ; $87 BCS
>a949	03 d8 42 45 51				.text	3,$d8,"BEQ"            ; $88 BEQ
>a94e	03 df 42 49 54				.text	3,$df,"BIT"            ; $89 BIT
>a953	03 d8 42 4d 49				.text	3,$d8,"BMI"            ; $8a BMI
>a958	03 d5 42 4e 45				.text	3,$d5,"BNE"            ; $8b BNE
>a95d	03 de 42 50 4c				.text	3,$de,"BPL"            ; $8c BPL
>a962	03 d5 42 52 41				.text	3,$d5,"BRA"            ; $8d BRA
>a967	03 df 42 52 4b				.text	3,$df,"BRK"            ; $8e BRK
>a96c	03 db 42 56 43				.text	3,$db,"BVC"            ; $8f BVC
>a971	03 eb 42 56 53				.text	3,$eb,"BVS"            ; $90 BVS
>a976	03 d2 43 4c 43				.text	3,$d2,"CLC"            ; $91 CLC
>a97b	03 d3 43 4c 44				.text	3,$d3,"CLD"            ; $92 CLD
>a980	03 d8 43 4c 49				.text	3,$d8,"CLI"            ; $93 CLI
>a985	03 e5 43 4c 56				.text	3,$e5,"CLV"            ; $94 CLV
>a98a	03 e0 43 4d 50				.text	3,$e0,"CMP"            ; $95 CMP
>a98f	03 eb 43 50 58				.text	3,$eb,"CPX"            ; $96 CPX
>a994	03 ec 43 50 59				.text	3,$ec,"CPY"            ; $97 CPY
>a999	03 cc 44 45 43				.text	3,$cc,"DEC"            ; $98 DEC
>a99e	03 e1 44 45 58				.text	3,$e1,"DEX"            ; $99 DEX
>a9a3	03 e2 44 45 59				.text	3,$e2,"DEY"            ; $9a DEY
>a9a8	03 e6 45 4f 52				.text	3,$e6,"EOR"            ; $9b EOR
>a9ad	03 da 49 4e 43				.text	3,$da,"INC"            ; $9c INC
>a9b2	03 ef 49 4e 58				.text	3,$ef,"INX"            ; $9d INX
>a9b7	03 f0 49 4e 59				.text	3,$f0,"INY"            ; $9e INY
>a9bc	03 e7 4a 4d 50				.text	3,$e7,"JMP"            ; $9f JMP
>a9c1	03 ef 4a 53 52				.text	3,$ef,"JSR"            ; $a0 JSR
>a9c6	03 d1 4c 44 41				.text	3,$d1,"LDA"            ; $a1 LDA
>a9cb	03 e8 4c 44 58				.text	3,$e8,"LDX"            ; $a2 LDX
>a9d0	03 e9 4c 44 59				.text	3,$e9,"LDY"            ; $a3 LDY
>a9d5	03 f1 4c 53 52				.text	3,$f1,"LSR"            ; $a4 LSR
>a9da	03 ed 4e 4f 50				.text	3,$ed,"NOP"            ; $a5 NOP
>a9df	03 e2 4f 52 41				.text	3,$e2,"ORA"            ; $a6 ORA
>a9e4	03 d9 50 48 41				.text	3,$d9,"PHA"            ; $a7 PHA
>a9e9	03 e8 50 48 50				.text	3,$e8,"PHP"            ; $a8 PHP
>a9ee	03 f0 50 48 58				.text	3,$f0,"PHX"            ; $a9 PHX
>a9f3	03 f1 50 48 59				.text	3,$f1,"PHY"            ; $aa PHY
>a9f8	03 dd 50 4c 41				.text	3,$dd,"PLA"            ; $ab PLA
>a9fd	03 ec 50 4c 50				.text	3,$ec,"PLP"            ; $ac PLP
>aa02	03 f4 50 4c 58				.text	3,$f4,"PLX"            ; $ad PLX
>aa07	03 f5 50 4c 59				.text	3,$f5,"PLY"            ; $ae PLY
>aa0c	03 ed 52 4f 4c				.text	3,$ed,"ROL"            ; $af ROL
>aa11	03 f3 52 4f 52				.text	3,$f3,"ROR"            ; $b0 ROR
>aa16	03 ef 52 54 49				.text	3,$ef,"RTI"            ; $b1 RTI
>aa1b	03 f9 52 54 53				.text	3,$f9,"RTS"            ; $b2 RTS
>aa20	03 d8 53 42 43				.text	3,$d8,"SBC"            ; $b3 SBC
>aa25	03 db 53 45 43				.text	3,$db,"SEC"            ; $b4 SEC
>aa2a	03 dc 53 45 44				.text	3,$dc,"SED"            ; $b5 SED
>aa2f	03 e1 53 45 49				.text	3,$e1,"SEI"            ; $b6 SEI
>aa34	03 e8 53 54 41				.text	3,$e8,"STA"            ; $b7 STA
>aa39	03 f7 53 54 50				.text	3,$f7,"STP"            ; $b8 STP
>aa3e	03 ff 53 54 58				.text	3,$ff,"STX"            ; $b9 STX
>aa43	03 00 53 54 59				.text	3,$00,"STY"            ; $ba STY
>aa48	03 01 53 54 5a				.text	3,$01,"STZ"            ; $bb STZ
>aa4d	03 ed 54 41 58				.text	3,$ed,"TAX"            ; $bc TAX
>aa52	03 ee 54 41 59				.text	3,$ee,"TAY"            ; $bd TAY
>aa57	03 e8 54 52 42				.text	3,$e8,"TRB"            ; $be TRB
>aa5c	03 e9 54 53 42				.text	3,$e9,"TSB"            ; $bf TSB
>aa61	03 ff 54 53 58				.text	3,$ff,"TSX"            ; $c0 TSX
>aa66	03 ed 54 58 41				.text	3,$ed,"TXA"            ; $c1 TXA
>aa6b	03 ff 54 58 53				.text	3,$ff,"TXS"            ; $c2 TXS
>aa70	03 ee 54 59 41				.text	3,$ee,"TYA"            ; $c3 TYA
>aa75	ff					.text	$FF

;******  Return to file: ./common/tokeniser/tokenise.asm

.aa76					TokeniseLine:
.aa76	20 fe ab	jsr $abfe			jsr 	FixLineBufferCase 			; fix line case
.aa79	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.aa7b	8d a6 04	sta $04a6			sta 	tokenOffset
.aa7e	9c a7 04	stz $04a7			stz 	tokenLineNumber
.aa81	9c a8 04	stz $04a8			stz 	tokenLineNumber+1
.aa84	a2 ff		ldx #$ff			ldx 	#$FF
.aa86					_TKFindFirst:
.aa86	e8		inx				inx
.aa87	bd a6 05	lda $05a6,x			lda 	lineBuffer,x
.aa8a	f0 79		beq $ab05			beq 	_TKExit
.aa8c	c9 20		cmp #$20			cmp 	#' '
.aa8e	90 f6		bcc $aa86			bcc 	_TKFindFirst
.aa90	c9 30		cmp #$30			cmp 	#'0'
.aa92	90 07		bcc $aa9b			bcc 	_TKNoLineNumber
.aa94	c9 3a		cmp #$3a			cmp 	#'9'+1
.aa96	b0 03		bcs $aa9b			bcs 	_TKNoLineNumber
.aa98	20 28 ac	jsr $ac28			jsr 	TokeniseExtractLineNumber
.aa9b					_TKNoLineNumber:
.aa9b					_TKTokeniseLoop:
.aa9b	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.aa9e	f0 65		beq $ab05			beq 	_TKExit
.aaa0	e8		inx				inx
.aaa1	c9 20		cmp #$20			cmp 	#' '
.aaa3	f0 f6		beq $aa9b			beq 	_TKTokeniseLoop 			; keep looping if space found.
.aaa5	ca		dex				dex 								; undo last get, A contains character, X is position.
.aaa6	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.aaa8	f0 61		beq $ab0b			beq 	_TKTokeniseIdentifier
.aaaa	c9 41		cmp #$41			cmp 	#'A'
.aaac	90 04		bcc $aab2			bcc 	_TKTokenisePunctuation
.aaae	c9 5b		cmp #$5b			cmp 	#'Z'+1
.aab0	90 59		bcc $ab0b			bcc 	_TKTokeniseIdentifier
.aab2					_TKTokenisePunctuation:
.aab2	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.aab4	f0 27		beq $aadd			beq 	_TKString
.aab6	c9 24		cmp #$24			cmp 	#'$'						; hexadecimal constant (# only appears at end of identifiers)
.aab8	f0 28		beq $aae2			beq 	_TKHexConstant
.aaba	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers.
.aabc	f0 29		beq $aae7			beq 	_TKCheckDouble
.aabe	c9 3e		cmp #$3e			cmp 	#'>'
.aac0	f0 25		beq $aae7			beq 	_TKCheckDouble
.aac2					_TKStandardPunctuation:
.aac2	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; get it back.
.aac5	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.aac7	90 0e		bcc $aad7			bcc 	_TKNoShift
.aac9	48		pha				pha 								; save
.aaca	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.aacc	85 36		sta $36				sta 	zTemp0
.aace	68		pla				pla
.aacf	29 20		and #$20			and 	#32 						; bit 5
.aad1	4a		lsr a				lsr 	a 							; shift into bit 3
.aad2	4a		lsr a				lsr 	a
.aad3	05 36		ora $36				ora 	zTemp0
.aad5	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.aad7					_TKNoShift:
.aad7	20 6d ac	jsr $ac6d			jsr 	TokeniseWriteByte 			; write the punctuation character
.aada	e8		inx				inx 								; consume the character
.aadb	80 be		bra $aa9b			bra 	_TKTokeniseLoop 			; and loop round again.
.aadd					_TKString:
.aadd	20 8d ab	jsr $ab8d			jsr 	TokeniseString
.aae0	80 b9		bra $aa9b			bra 	_TKTokeniseLoop
.aae2					_TKHexConstant:
.aae2	20 c8 ab	jsr $abc8			jsr 	TokeniseHexConstant
.aae5	80 b4		bra $aa9b			bra 	_TKTokeniseLoop
.aae7					_TKCheckDouble:
.aae7	bd a7 05	lda $05a7,x			lda 	lineBuffer+1,x 				; get next character
.aaea	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.aaec	90 d4		bcc $aac2			bcc 	_TKStandardPunctuation
.aaee	c9 3f		cmp #$3f			cmp 	#'>'+1
.aaf0	b0 d0		bcs $aac2			bcs 	_TKStandardPunctuation
.aaf2	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.aaf5	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.aaf7	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.aaf8	7d a7 05	adc $05a7,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.aafb	38		sec				sec
.aafc	e9 3c		sbc #$3c			sbc 	#'<'
.aafe	20 6d ac	jsr $ac6d			jsr 	TokeniseWriteByte 			; this is in the range 0-7
.ab01	e8		inx				inx 								; consume both
.ab02	e8		inx				inx
.ab03	80 96		bra $aa9b			bra 	_TKTokeniseLoop
.ab05	a9 80		lda #$80	_TKExit:lda 	#KWC_EOL 					; write end of line byte
.ab07	20 6d ac	jsr $ac6d			jsr 	TokeniseWriteByte
.ab0a	60		rts				rts
.ab0b					_TKTokeniseIdentifier:
.ab0b	8e 80 04	stx $0480			stx 	identStart 					; save start
.ab0e	9c 84 04	stz $0484			stz 	identTypeByte 				; zero the type byte
.ab11					_TKCheckLoop:
.ab11	e8		inx				inx 								; look at next, we know first is identifier.
.ab12	bd a6 05	lda $05a6,x			lda  	lineBuffer,x
.ab15	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.ab17	f0 f8		beq $ab11			beq 	_TKCheckLoop
.ab19	c9 30		cmp #$30			cmp	 	#"0"
.ab1b	90 0c		bcc $ab29			bcc 	_TKEndIdentifier
.ab1d	c9 3a		cmp #$3a			cmp 	#"9"+1
.ab1f	90 f0		bcc $ab11			bcc 	_TKCheckLoop
.ab21	c9 41		cmp #$41			cmp	 	#"A"
.ab23	90 04		bcc $ab29			bcc 	_TKEndIdentifier
.ab25	c9 5b		cmp #$5b			cmp 	#"Z"+1
.ab27	90 e8		bcc $ab11			bcc 	_TKCheckLoop
.ab29					_TKEndIdentifier:
.ab29	8e 81 04	stx $0481			stx 	identTypeStart 				; save start of type text (if any !)
.ab2c	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.ab2e	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.ab30	f0 06		beq $ab38			beq 	_TKHasTypeCharacter
.ab32	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.ab34	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.ab36	d0 07		bne $ab3f			bne 	_TKNoTypeCharacter
.ab38					_TKHasTypeCharacter:
.ab38	8c 84 04	sty $0484			sty 	identTypeByte 				; has # or $, save the type
.ab3b	e8		inx				inx 								; read next
.ab3c	bd a6 05	lda $05a6,x			lda 	lineBuffer,x
.ab3f					_TKNoTypeCharacter:
.ab3f	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.ab41	d0 09		bne $ab4c			bne 	_TKNoArray
.ab43	e8		inx				inx 								; skip the (
.ab44	ad 84 04	lda $0484			lda 	identTypeByte 				; set bit 2 (e.g. array)
.ab47	09 04		ora #$04			ora 	#$04
.ab49	8d 84 04	sta $0484			sta 	identTypeByte
.ab4c					_TKNoArray:
.ab4c	8e 82 04	stx $0482			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.ab4f	20 e9 ab	jsr $abe9			jsr 	TokeniseCalculateHash 		; calculate the has for those tokens
.ab52	a0 a7		ldy #$a7			ldy 	#(KeywordSet0) >> 8
.ab54	a9 00		lda #$00			lda 	#(KeywordSet0) & $FF
.ab56	20 a7 a6	jsr $a6a7			jsr 	TokeniseSearchTable
.ab59	a2 00		ldx #$00			ldx 	#0
.ab5b	b0 1f		bcs $ab7c			bcs 	_TKFoundToken
.ab5d	a0 a8		ldy #$a8			ldy 	#(KeywordSet1) >> 8
.ab5f	a9 dc		lda #$dc			lda 	#(KeywordSet1) & $FF
.ab61	20 a7 a6	jsr $a6a7			jsr 	TokeniseSearchTable
.ab64	a2 81		ldx #$81			ldx 	#$81
.ab66	b0 14		bcs $ab7c			bcs 	_TKFoundToken
.ab68	a0 a9		ldy #$a9			ldy 	#(KeywordSet2) >> 8
.ab6a	a9 2a		lda #$2a			lda 	#(KeywordSet2) & $FF
.ab6c	20 a7 a6	jsr $a6a7			jsr 	TokeniseSearchTable
.ab6f	a2 82		ldx #$82			ldx 	#$82
.ab71	b0 09		bcs $ab7c			bcs 	_TKFoundToken
.ab73	20 79 ac	jsr $ac79			jsr 	CheckCreateVariableRecord 	; failed all, it's a variable, create record if does not exist.
.ab76	ae 82 04	ldx $0482			ldx 	identTypeEnd 				; X points to following byte
.ab79	4c 9b aa	jmp $aa9b			jmp 	_TKTokeniseLoop 			; and go round again.
.ab7c					_TKFoundToken:
.ab7c	48		pha				pha 								; save token
.ab7d	8a		txa				txa 								; shift in X, is there one ?
.ab7e	f0 03		beq $ab83			beq 	_TKNoTShift
.ab80	20 6d ac	jsr $ac6d			jsr 	TokeniseWriteByte 			; if so, write it out
.ab83					_TKNoTShift:
.ab83	68		pla				pla 								; restore and write token
.ab84	20 6d ac	jsr $ac6d			jsr 	TokeniseWriteByte
.ab87	ae 82 04	ldx $0482			ldx 	identTypeEnd 				; X points to following byte
.ab8a	4c 9b aa	jmp $aa9b			jmp 	_TKTokeniseLoop 			; and go round again.
.ab8d					TokeniseString:
.ab8d	a9 ff		lda #$ff			lda 	#KWC_STRING 				; string token.
.ab8f	20 6d ac	jsr $ac6d			jsr 	TokeniseWriteByte
.ab92	e8		inx				inx									; start of quoted string.
.ab93	da		phx				phx 								; push start of string on top
.ab94	ca		dex				dex
.ab95					_TSFindEnd:
.ab95	e8		inx				inx
.ab96	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; next character
.ab99	f0 04		beq $ab9f			beq 	_TSEndOfString
.ab9b	c9 22		cmp #$22			cmp 	#'"'
.ab9d	d0 f6		bne $ab95			bne 	_TSFindEnd
.ab9f					_TSEndOfString:
.ab9f	7a		ply				ply  								; so now Y is first character, X is character after end.
.aba0	48		pha				pha 								; save terminating character
.aba1	20 a9 ab	jsr $aba9			jsr 	TOWriteBlockXY 				; write X to Y as a data block
.aba4	68		pla				pla 								; terminating character
.aba5	f0 01		beq $aba8			beq 	_TSNotQuote					; if it wasn't EOS skip it
.aba7	e8		inx				inx
.aba8					_TSNotQuote:
.aba8	60		rts				rts
.aba9					TOWriteBlockXY:
.aba9	86 36		stx $36				stx 	zTemp0 						; write end character
.abab	98		tya				tya
.abac	49 ff		eor #$ff			eor 	#$FF
.abae	38		sec				sec
.abaf	65 36		adc $36				adc 	zTemp0
.abb1	1a		inc a				inc 	a 							; one extra for NULL
.abb2	20 6d ac	jsr $ac6d			jsr 	TokeniseWriteByte
.abb5					_TOBlockLoop:
.abb5	c4 36		cpy $36				cpy 	zTemp0
.abb7	f0 09		beq $abc2			beq 	_TOBlockExit
.abb9	b9 a6 05	lda $05a6,y			lda 	lineBuffer,y
.abbc	20 6d ac	jsr $ac6d			jsr 	TokeniseWriteByte
.abbf	c8		iny				iny
.abc0	80 f3		bra $abb5			bra 	_TOBlockLoop
.abc2					_TOBlockExit:
.abc2	a9 00		lda #$00			lda 	#0
.abc4	20 6d ac	jsr $ac6d			jsr 	TokeniseWriteByte
.abc7	60		rts				rts
.abc8					TokeniseHexConstant:
.abc8	a9 fe		lda #$fe			lda 	#KWC_HEXCONST 				; hex constant token.
.abca	20 6d ac	jsr $ac6d			jsr 	TokeniseWriteByte
.abcd	e8		inx				inx									; start of quoted string.
.abce	da		phx				phx 								; push start of constant on top
.abcf	ca		dex				dex
.abd0					_THFindLoop:
.abd0	e8		inx				inx
.abd1	bd a6 05	lda $05a6,x			lda 	lineBuffer,x
.abd4	c9 30		cmp #$30			cmp 	#"0"
.abd6	90 0c		bcc $abe4			bcc 	_THFoundEnd
.abd8	c9 3a		cmp #$3a			cmp 	#"9"+1
.abda	90 f4		bcc $abd0			bcc 	_THFindLoop
.abdc	c9 41		cmp #$41			cmp 	#"A"
.abde	90 04		bcc $abe4			bcc 	_THFoundEnd
.abe0	c9 47		cmp #$47			cmp 	#"F"+1
.abe2	90 ec		bcc $abd0			bcc 	_THFindLoop
.abe4					_THFoundEnd:
.abe4	7a		ply				ply 								; restore start
.abe5	20 a9 ab	jsr $aba9			jsr 	TOWriteBlockXY 				; output the block
.abe8	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/utility.asm

.abe9					TokeniseCalculateHash:
.abe9	da		phx				phx
.abea	ae 80 04	ldx $0480			ldx 	identStart 					; needs to be same as in tokens.py - simple sum
.abed	a9 00		lda #$00			lda 	#0
.abef					_TCHLoop:
.abef	18		clc				clc
.abf0	7d a6 05	adc $05a6,x			adc 	lineBuffer,x
.abf3	e8		inx				inx
.abf4	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.abf7	d0 f6		bne $abef			bne 	_TCHLoop
.abf9	8d 83 04	sta $0483			sta 	identHash 					; save the hash
.abfc	fa		plx				plx
.abfd	60		rts				rts
.abfe					FixLineBufferCase:
.abfe	a2 00		ldx #$00			ldx 	#0
.ac00					_FLBCLoop:
.ac00	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; get next character
.ac03	f0 22		beq $ac27			beq 	_FLBCExit 					; end of string.
.ac05	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.ac07	f0 11		beq $ac1a			beq 	_FLBCInQuotes
.ac09	e8		inx				inx
.ac0a	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.ac0c	90 f2		bcc $ac00			bcc 	_FLBCLoop
.ac0e	c9 7b		cmp #$7b			cmp 	#'z'+1
.ac10	b0 ee		bcs $ac00			bcs 	_FLBCLoop
.ac12	38		sec				sec 								; make U/C
.ac13	e9 20		sbc #$20			sbc 	#32
.ac15	9d a5 05	sta $05a5,x			sta	 	lineBuffer-1,x 				; write back
.ac18	80 e6		bra $ac00			bra 	_FLBCLoop
.ac1a					_FLBCInQuotes:
.ac1a	e8		inx				inx 								; advance
.ac1b	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; get next
.ac1e	f0 07		beq $ac27			beq 	_FLBCExit 					; exit on EOS
.ac20	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.ac22	d0 f6		bne $ac1a			bne 	_FLBCInQuotes
.ac24	e8		inx				inx 								; skip over it
.ac25	80 d9		bra $ac00			bra 	_FLBCLoop
.ac27					_FLBCExit:
.ac27	60		rts				rts
.ac28					TokeniseExtractLineNumber:
.ac28	ad a8 04	lda $04a8			lda 	tokenLineNumber+1 			; push current value on stack
.ac2b	48		pha				pha
.ac2c	ad a7 04	lda $04a7			lda 	tokenLineNumber
.ac2f	48		pha				pha
.ac30	20 66 ac	jsr $ac66			jsr 	_TELNTimes2 				; line # x 4
.ac33	20 66 ac	jsr $ac66			jsr 	_TELNTimes2 				; line # x 2
.ac36	18		clc				clc 								; add stacked value
.ac37	68		pla				pla
.ac38	6d a7 04	adc $04a7			adc 	tokenLineNumber
.ac3b	8d a7 04	sta $04a7			sta 	tokenLineNumber
.ac3e	68		pla				pla
.ac3f	6d a8 04	adc $04a8			adc 	tokenLineNumber+1
.ac42	8d a8 04	sta $04a8			sta 	tokenLineNumber+1 			; line # x 5
.ac45	20 66 ac	jsr $ac66			jsr 	_TELNTimes2 				; line # x 10
.ac48	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; get and consume character
.ac4b	e8		inx				inx
.ac4c	29 0f		and #$0f			and 	#15 						; add to line #
.ac4e	18		clc				clc
.ac4f	6d a7 04	adc $04a7			adc 	tokenLineNumber
.ac52	8d a7 04	sta $04a7			sta 	tokenLineNumber
.ac55	90 03		bcc $ac5a			bcc 	_TLENNoCarry
.ac57	ee a8 04	inc $04a8			inc 	tokenLineNumber+1
.ac5a					_TLENNoCarry:
.ac5a	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; more digits ?
.ac5d	c9 30		cmp #$30			cmp 	#'0'
.ac5f	90 04		bcc $ac65			bcc 	_TLENExit
.ac61	c9 3a		cmp #$3a			cmp 	#'9'+1
.ac63	90 c3		bcc $ac28			bcc 	TokeniseExtractLineNumber
.ac65					_TLENExit:
.ac65	60		rts				rts
.ac66					_TELNTimes2:
.ac66	0e a7 04	asl $04a7			asl 	tokenLineNumber
.ac69	2e a8 04	rol $04a8			rol 	tokenLineNumber+1
.ac6c	60		rts				rts
.ac6d					TokeniseWriteByte:
.ac6d	da		phx				phx
.ac6e	ae a6 04	ldx $04a6			ldx 	tokenOffset 				; next slot to write to
.ac71	9d a6 04	sta $04a6,x			sta 	tokenOffset,x 				; write byte out
.ac74	ee a6 04	inc $04a6			inc 	tokenOffset 				; advance slot.
.ac77	fa		plx				plx
.ac78	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/variablerecord.asm

.ac79					CheckCreateVariableRecord:
.ac79	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.ac7b	85 36		sta $36				sta 	0+zTemp0
.ac7d	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.ac7f	85 37		sta $37				sta 	1+zTemp0
.ac81					_CCVSearch:
.ac81	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.ac83	f0 2c		beq $acb1			beq 	_CCVFail
.ac85	a0 01		ldy #$01			ldy 	#1 							; read the hash
.ac87	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.ac89	cd 83 04	cmp $0483			cmp 	identHash
.ac8c	d0 16		bne $aca4			bne 	_CCVNext
.ac8e	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.ac90	ae 80 04	ldx $0480			ldx 	identStart
.ac93					_CCVCompare:
.ac93	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.ac96	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.ac98	e8		inx				inx 								; advance pointers
.ac99	c8		iny				iny
.ac9a	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.ac9b	d0 07		bne $aca4			bne 	_CCVNext  					; didn't match go to next.
.ac9d	90 f4		bcc $ac93			bcc 	_CCVCompare 				; not finished yet.
.ac9f	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; matched whole thing ?
.aca2	f0 41		beq $ace5			beq 	_CCVFound 					; yes, we were successful
.aca4					_CCVNext:
.aca4	18		clc				clc
.aca5	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.aca7	65 36		adc $36				adc 	zTemp0
.aca9	85 36		sta $36				sta 	zTemp0
.acab	90 d4		bcc $ac81			bcc 	_CCVSearch
.acad	e6 37		inc $37				inc 	zTemp0+1
.acaf	80 d0		bra $ac81			bra 	_CCVSearch
.acb1					_CCVFail:
.acb1	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.acb3	ad 83 04	lda $0483			lda 	identHash
.acb6	91 36		sta ($36),y			sta 	(zTemp0),y
.acb8	c8		iny				iny 								; offset 2 is the type byte
.acb9	ad 84 04	lda $0484			lda 	identTypeByte
.acbc	91 36		sta ($36),y			sta 	(zTemp0),y
.acbe	c8		iny				iny
.acbf					_CCVData:
.acbf	a9 00		lda #$00			lda 	#0 							; erase data 3-7
.acc1	91 36		sta ($36),y			sta 	(zTemp0),y
.acc3	c8		iny				iny
.acc4	c0 08		cpy #$08			cpy 	#8
.acc6	90 f7		bcc $acbf			bcc 	_CCVData
.acc8	ae 80 04	ldx $0480			ldx 	identStart 					; copy name into 8 on.
.accb					_CCVCopyName:
.accb	bd a6 05	lda $05a6,x			lda 	lineBuffer,x
.acce	91 36		sta ($36),y			sta 	(zTemp0),y
.acd0	e8		inx				inx
.acd1	c8		iny				iny
.acd2	ec 82 04	cpx $0482			cpx 	identTypeEnd
.acd5	d0 f4		bne $accb			bne 	_CCVCopyName
.acd7	98		tya				tya 								; patch offset
.acd8	92 36		sta ($36)			sta 	(zTemp0)
.acda	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.acdc	91 36		sta ($36),y			sta 	(zTemp0),y
.acde	88		dey				dey
.acdf	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.ace1	09 80		ora #$80			ora 	#$80
.ace3	91 36		sta ($36),y			sta 	(zTemp0),y
.ace5					_CCVFound:
.ace5	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.ace7	38		sec				sec
.ace8	e9 10		sbc #$10			sbc 	#(VariableSpace >> 8) 		; offset from the start
.acea	09 40		ora #$40			ora 	#$40 						; make it a writeable token
.acec	20 6d ac	jsr $ac6d			jsr 	TokeniseWriteByte
.acef	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.acf1	20 6d ac	jsr $ac6d			jsr 	TokeniseWriteByte
.acf4	60		rts				rts

;******  Return to file: _basic.asm


;******  End of listing
