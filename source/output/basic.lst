
; 64tass Turbo Assembler Macro V1.56.2625 listing file
; 64tass -D AUTORUN=0 -q -b -Wall -c -L output/basic.lst -l output/basic.lbl -Wall -o basic.rom _basic.asm
; Wed Oct 12 11:36:23 2022

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=0					AUTORUN=0

;******  Processing input file: _basic.asm


;******  Processing file: ./common/aa.system/01common.inc

=$30					ZeroPageMandatory = $30
=$400					ZeroPagePreference = $400
=$480					MemoryStorage = $480
=$2000					BasicStart = $2000
=$8000					BasicEnd = $8000
=$8000					CodeStart = $8000
=$1000					VariableSpace = $1000
=$2000					EndVariableSpace = $2000
=8					MathStackSize = 8
=512					BasicStackSize = 512
=3584					BasicStackBase = $1000-BasicStackSize
=80					MaxLineSize = 80

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/04data.inc

.0030					codePtr:
>0030							.fill 	4
.0034					basicStack:
>0034							.fill 	2
.0036					zTemp0:
>0036							.fill 	2
.0038					zTemp1:
>0038							.fill 	2
.003a					zTemp2:
>003a							.fill 	2
.003c					zsTemp:
>003c							.fill 	2
.003e					zaTemp:
>003e							.fill 	2
=$30					safePtr = codePtr 							; minimise direct tinkering
=$80					NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20					NSBIsReference = $20 						; bit 5 : is a reference
=$10					NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18					NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03					NSBRefMask = $03 							; bits 0,1 : Bytes of reference, -1 (e.g. 00 = 1 byte, 11 = 4 bytes)
=$04					NSBIsArray = $04
=$00					NSTInteger = $00 							; base types for bits 3..4
=$08					NSTFloat = $08
=$10					NSTString = $10
=$18					NSTProcedure = $18
.0400					NSStatus:
>0400							.fill 	MathStackSize
.0408					NSMantissa0:
>0408							.fill 	MathStackSize 				; (this is my integer mantissa system)
.0410					NSMantissa1:
>0410							.fill 	MathStackSize
.0418					NSMantissa2:
>0418							.fill 	MathStackSize
.0420					NSMantissa3:
>0420							.fill 	MathStackSize
.0428					NSExponent:
>0428							.fill 	MathStackSize
.0480					identStart:
>0480							.fill 	1
.0481					identTypeStart:
>0481							.fill 	1
.0482					identTypeEnd:
>0482							.fill 	1
.0483					identHash:
>0483							.fill 	1
.0484					identTypeByte:
>0484							.fill 	1	 						; (see tokenising.pdf)
.0485					encodeState:
>0485							.fill 	1
.0486					digitTemp:
>0486							.fill 	1
.0487					decimalCount:
>0487							.fill 	1
.0488					randomSeed:
>0488							.fill 	4
.048c					lowMemPtr:
>048c							.fill 	2
.048e					stringMemory:
>048e							.fill 	2
.0490					stringInitialised:
>0490							.fill 	1
.0491					stringTempPointer:
>0491							.fill 	2
.0493					breakCheck:
>0493							.fill 	1
.0494					decimalPlaces:
>0494							.fill 	1
.0495					dbOffset:
>0495							.fill 	1
.0496					lastParameter:
>0496							.fill 	1
.0497					dataPointer:
>0497							.fill 	5
.049c					inDataStatement:
>049c							.fill 	1
.049d					tbOffset:
>049d							.fill 	1
.049e					AssemblerAddress:
>049e							.fill 	2
.04a0					AssemblerControl:
>04a0							.fill 	1
.04a1					ParamStart:
>04a1							.fill 	2
.04a3					IsGroup1:
>04a3							.fill 	1
.04a4					BaseOpcode:
>04a4							.fill 	1
.04a5					ModeMask:
>04a5							.fill 	1
.04a6					tokenOffset:
>04a6							.fill 	1
.04a7					tokenLineNumber:
>04a7							.fill 	2
.04a9					tokenBuffer:
>04a9							.fill 	253
.05a6					lineBuffer:
>05a6							.fill 	MaxLineSize+1
.05f7					numberBuffer:
>05f7							.fill 	34
.0619					decimalBuffer:
>0619							.fill 	16

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/constants.inc

=$80					AM_ISZP = $80
=$40					AM_ISG1 = $40
=$20					AM_ISG2 = $20
=224					AM_IMMEDIATE = AM_ISZP+AM_ISG1+AM_ISG2+$00
=228					AM_ZEROPAGE = AM_ISZP+AM_ISG1+AM_ISG2+$04
=40					AM_ACC = AM_ISG2+$08
=108					AM_ABS = AM_ISG1+AM_ISG2+$0C
=208					AM_INDY = AM_ISZP+AM_ISG1+$10
=244					AM_ZEROX = AM_ISZP+AM_ISG1+AM_ISG2+$14
=120					AM_ABSY = AM_ISG1+AM_ISG2+$18
=124					AM_ABSX = AM_ISG1+AM_ISG2+$1C
=209					AM_IND = AM_ISZP+AM_ISG1+$11
=$80					AM_ZEROY = AM_ISZP
=$01					AM_INDABS = $01
=$02					AM_INDABSX = $02
=192					AM_INDX = AM_ISZP+AM_ISG1+$00

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/handlers.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.inc

=1					ERRID_BREAK = 1
=2					ERRID_SYNTAX = 2
=3					ERRID_DIVZERO = 3
=4					ERRID_RANGE = 4
=5					ERRID_TYPE = 5
=6					ERRID_MEMORY = 6
=7					ERRID_ARGUMENT = 7
=8					ERRID_STOP = 8
=9					ERRID_STRING = 9
=10					ERRID_ASSERT = 10
=11					ERRID_DATA = 11
=12					ERRID_NOTDONE = 12
=13					ERRID_LINE = 13
=14					ERRID_GOSUB = 14
=15					ERRID_REPEAT = 15
=16					ERRID_WHILE = 16
=17					ERRID_FOR = 17
=18					ERRID_STACK = 18
=19					ERRID_STRUCT = 19
=20					ERRID_PROC = 20
=21					ERRID_REDEFINE = 21
=22					ERRID_ARRAYSIZE = 22
=23					ERRID_ARRAYIDX = 23

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst.inc

=$00					KWD_LESSLESS                         = $00; $00 <<
=$01					KWD_LESSEQUAL                        = $01; $01 <=
=$02					KWD_LESSGREATER                      = $02; $02 <>
=$03					KWD_PLINGPLING3                      = $03; $03 !!3
=$04					KWD_GREATERLESS                      = $04; $04 ><
=$05					KWD_GREATEREQUAL                     = $05; $05 >=
=$06					KWD_GREATERGREATER                   = $06; $06 >>
=$07					KWD_PLINGPLING7                      = $07; $07 !!7
=$08					KWD_PLINGPLING8                      = $08; $08 !!8
=$09					KWD_PLINGPLING9                      = $09; $09 !!9
=$0a					KWD_PLINGPLING10                     = $0a; $0a !!10
=$0b					KWD_PLINGPLING11                     = $0b; $0b !!11
=$0c					KWD_PLINGPLING12                     = $0c; $0c !!12
=$0d					KWD_PLINGPLING13                     = $0d; $0d !!13
=$0e					KWD_PLINGPLING14                     = $0e; $0e !!14
=$0f					KWD_PLINGPLING15                     = $0f; $0f !!15
=$10					KWD_AT                               = $10; $10 @
=$11					KWD_PLINGPLING17                     = $11; $11 !!17
=$12					KWD_PLINGPLING18                     = $12; $12 !!18
=$13					KWD_LSQPAREN                         = $13; $13 [
=$14					KWD_BACKSLASH                        = $14; $14 \
=$15					KWD_RSQPAREN                         = $15; $15 ]
=$16					KWD_HAT                              = $16; $16 ^
=$17					KWD_UNDERSCORE                       = $17; $17 _
=$18					KWD_BQUOTE                           = $18; $18 `
=$19					KWD_PLINGPLING25                     = $19; $19 !!25
=$1a					KWD_PLINGPLING26                     = $1a; $1a !!26
=$1b					KWD_LCURLY                           = $1b; $1b {
=$1c					KWD_BAR                              = $1c; $1c |
=$1d					KWD_RCURLY                           = $1d; $1d }
=$1e					KWD_TILDE                            = $1e; $1e ~
=$21					KWD_PLING                            = $21; $21 !
=$22					KWD_DQUOTE                           = $22; $22 "
=$23					KWD_HASH                             = $23; $23 #
=$24					KWD_DOLLAR                           = $24; $24 $
=$25					KWD_PERCENT                          = $25; $25 %
=$26					KWD_AMPERSAND                        = $26; $26 &
=$27					KWD_QUOTE                            = $27; $27 '
=$28					KWD_LPAREN                           = $28; $28 (
=$29					KWD_RPAREN                           = $29; $29 )
=$2a					KWD_STAR                             = $2a; $2a *
=$2b					KWD_PLUS                             = $2b; $2b +
=$2c					KWD_COMMA                            = $2c; $2c ,
=$2d					KWD_MINUS                            = $2d; $2d -
=$2e					KWD_PERIOD                           = $2e; $2e .
=$2f					KWD_SLASH                            = $2f; $2f /
=$30					KWD_0                                = $30; $30 0
=$31					KWD_1                                = $31; $31 1
=$32					KWD_2                                = $32; $32 2
=$33					KWD_3                                = $33; $33 3
=$34					KWD_4                                = $34; $34 4
=$35					KWD_5                                = $35; $35 5
=$36					KWD_6                                = $36; $36 6
=$37					KWD_7                                = $37; $37 7
=$38					KWD_8                                = $38; $38 8
=$39					KWD_9                                = $39; $39 9
=$3a					KWD_COLON                            = $3a; $3a :
=$3b					KWD_SEMICOLON                        = $3b; $3b ;
=$3c					KWD_LESS                             = $3c; $3c <
=$3d					KWD_EQUAL                            = $3d; $3d =
=$3e					KWD_GREATER                          = $3e; $3e >
=$3f					KWD_QMARK                            = $3f; $3f ?
=$83					KWD_ABSLPAREN                        = $83; $83 ABS(
=$84					KWD_ALLOCLPAREN                      = $84; $84 ALLOC(
=$85					KWD_ASCLPAREN                        = $85; $85 ASC(
=$86					KWD_CHRDOLLARLPAREN                  = $86; $86 CHR$(
=$87					KWD_EVENTLPAREN                      = $87; $87 EVENT(
=$88					KWD_FALSE                            = $88; $88 FALSE
=$89					KWD_FRACLPAREN                       = $89; $89 FRAC(
=$8a					KWD_INTLPAREN                        = $8a; $8a INT(
=$8b					KWD_ISVALLPAREN                      = $8b; $8b ISVAL(
=$8c					KWD_LEFTDOLLARLPAREN                 = $8c; $8c LEFT$(
=$8d					KWD_LENLPAREN                        = $8d; $8d LEN(
=$8e					KWD_MIDDOLLARLPAREN                  = $8e; $8e MID$(
=$8f					KWD_NOTLPAREN                        = $8f; $8f NOT(
=$90					KWD_OFF                              = $90; $90 OFF
=$91					KWD_ON                               = $91; $91 ON
=$92					KWD_RANDOMLPAREN                     = $92; $92 RANDOM(
=$93					KWD_RIGHTDOLLARLPAREN                = $93; $93 RIGHT$(
=$94					KWD_RNDLPAREN                        = $94; $94 RND(
=$95					KWD_SGNLPAREN                        = $95; $95 SGN(
=$96					KWD_SPCLPAREN                        = $96; $96 SPC(
=$97					KWD_STRDOLLARLPAREN                  = $97; $97 STR$(
=$98					KWD_TIMERLPAREN                      = $98; $98 TIMER(
=$99					KWD_TRUE                             = $99; $99 TRUE
=$9a					KWD_VALLPAREN                        = $9a; $9a VAL(
=$9b					KWD_FOR                              = $9b; $9b FOR
=$9c					KWD_IF                               = $9c; $9c IF
=$9d					KWD_PROC                             = $9d; $9d PROC
=$9e					KWD_REPEAT                           = $9e; $9e REPEAT
=$9f					KWD_WHILE                            = $9f; $9f WHILE
=$a0					KWD_ENDIF                            = $a0; $a0 ENDIF
=$a1					KWD_ENDPROC                          = $a1; $a1 ENDPROC
=$a2					KWD_NEXT                             = $a2; $a2 NEXT
=$a3					KWD_THEN                             = $a3; $a3 THEN
=$a4					KWD_UNTIL                            = $a4; $a4 UNTIL
=$a5					KWD_WEND                             = $a5; $a5 WEND
=$a6					KWD_CALL                             = $a6; $a6 CALL
=$a7					KWD_CIRCLE                           = $a7; $a7 CIRCLE
=$a8					KWD_CLS                              = $a8; $a8 CLS
=$a9					KWD_COLOR                            = $a9; $a9 COLOR
=$aa					KWD_COLOUR                           = $aa; $aa COLOUR
=$ab					KWD_DATA                             = $ab; $ab DATA
=$ac					KWD_DIM                              = $ac; $ac DIM
=$ad					KWD_DOWNTO                           = $ad; $ad DOWNTO
=$ae					KWD_ELSE                             = $ae; $ae ELSE
=$af					KWD_GFX                              = $af; $af GFX
=$b0					KWD_GOSUB                            = $b0; $b0 GOSUB
=$b1					KWD_GOTO                             = $b1; $b1 GOTO
=$b2					KWD_HERE                             = $b2; $b2 HERE
=$b3					KWD_HIDE                             = $b3; $b3 HIDE
=$b4					KWD_LET                              = $b4; $b4 LET
=$b5					KWD_LINE                             = $b5; $b5 LINE
=$b6					KWD_LOCAL                            = $b6; $b6 LOCAL
=$b7					KWD_OUTLINE                          = $b7; $b7 OUTLINE
=$b8					KWD_PRINT                            = $b8; $b8 PRINT
=$b9					KWD_READ                             = $b9; $b9 READ
=$ba					KWD_RECT                             = $ba; $ba RECT
=$bb					KWD_REM                              = $bb; $bb REM
=$bc					KWD_RETURN                           = $bc; $bc RETURN
=$bd					KWD_SCALE                            = $bd; $bd SCALE
=$be					KWD_SHOW                             = $be; $be SHOW
=$bf					KWD_SOLID                            = $bf; $bf SOLID
=$c0					KWD_SPRITE                           = $c0; $c0 SPRITE
=$c1					KWD_TEXT                             = $c1; $c1 TEXT
=$c2					KWD_TO                               = $c2; $c2 TO

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst0.inc

=$80					KWC_EOL = $80
=$ff					KWC_STRING = $FF
=$fe					KWC_HEXCONST = $FE
=$9b					KWC_FIRST_STRUCTURE = $9b
=$a0					KWC_FIRST_STRUCTURE_DEC = $a0
=$a5					KWC_LAST_STRUCTURE = $a5
=$83					KWC_FIRST_UNARY = $83
=$9a					KWC_LAST_UNARY = $9a

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/stack.inc

=$e0					STK_GOSUB = $E0
=$d0					STK_FOR = $D0
=$c0					STK_REPEAT = $C0
=$b0					STK_PROC = $B0
=$a0					STK_WHILE = $A0
=$01					STK_LOCALN = $01
=$02					STK_LOCALS = $02

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/00start.asm

.8000	a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.8002	9a		txs				txs
.8003	a2 80		ldx #$80			ldx 	#(Prompt >> 8) 				; prompt
.8005	a9 19		lda #$19			lda 	#(Prompt & $FF)
.8007	20 c0 96	jsr $96c0			jsr 	PrintStringXA
.800a	9c 08 d0	stz $d008			stz 	$D008 						; remove boundary.
.800d	9c 09 d0	stz $d009			stz 	$D009
.8010	20 7a 90	jsr $907a			jsr 	NewCommand 					; erase current program
.8013	20 45 a3	jsr $a345			jsr 	BackloadProgram
.8016	4c a6 8b	jmp $8ba6			jmp 	WarmStart
>8019	0d 0d 2a 2a 2a 20 46 32		Prompt:	.text 	13,13,"*** F256 Junior SuperBASIC ***",13,13
>8021	35 36 20 4a 75 6e 69 6f 72 20 53 75 70 65 72 42
>8031	41 53 49 43 20 2a 2a 2a 0d 0d
>803b	57 72 69 74 74 65 6e 20				.text 	"Written by Paul Robson 2022.",13,13
>8043	62 79 20 50 61 75 6c 20 52 6f 62 73 6f 6e 20 32
>8053	30 32 32 2e 0d 0d

;******  Processing file: ./common/aa.system/../generated/timestamp.asm

>8059	42 75 69 6c 74 20 57 65			.text "Built Wednesday 12-Oct-2022. Build 1580."
>8061	64 6e 65 73 64 61 79 20 31 32 2d 4f 63 74 2d 32
>8071	30 32 32 2e 20 42 75 69 6c 64 20 31 35 38 30 2e

;******  Return to file: ./common/aa.system/00start.asm

>8081	0d 0d 00					.byte 	13,13,0

;******  Processing file: ./common/aa.system/../../../graphics/_graphics.asm

=1					graphicsIntegrated = 1

;******  Processing file: ./common/aa.system/../../../graphics/./aa.main/aa.data.asm

=3					GXMappingPage = 3
=24576					GXMappingAddress = ($2000 * GXMappingPage)
=0					GXMappingLUT = 0
=11					GXEditSlot = 8 + GXMappingPage
=$36					gxzTemp0 = zTemp0
=$38					gxzTemp1 = zTemp1
=$3a					gxzTemp2 = zTemp2
=$3c					gxzScreen = zsTemp
=$5f7					gxPixelBuffer = numberBuffer
.0629					gxCurrentX:
>0629							.fill 	2
.062b					gxCurrentY:
>062b							.fill 	2
.062d					gxLastX:
>062d							.fill 	2
.062f					gxLastY:
>062f							.fill 	2
.0631					gxX0:
>0631							.fill 	2
.0633					gxY0:
>0633							.fill 	2
.0635					gxX1:
>0635							.fill 	2
.0637					gxY1:
>0637							.fill 	2
.0639					gxBasePage:
>0639							.fill 	1
.063a					gxSpritePage:
>063a							.fill 	1
.063b					gxHeight:
>063b							.fill 	1
.063c					gxMode:
>063c							.fill 	1
.063d					gxColour:
>063d							.fill 	1
.063e					gxEORValue:
>063e							.fill 	1
.063f					gxANDValue:
>063f							.fill 	1
.0640					gxOriginalLUTValue:
>0640							.fill 	1
.0641					gxOriginalMMUSetting:
>0641							.fill 	1
.0642					gsOffset:
>0642							.fill 	1
.0643					GSCurrentSprite:
>0643							.fill 	2
.0645					GXSpriteOffsetBase:
>0645							.fill 	2

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./aa.main/main.asm

.8084					GXGraphicDraw:
.8084	c9 20		cmp #$20			cmp 	#$10*2 						; instructions 00-0F don't use
.8086	b0 06		bcs $808e			bcs 	_GDCoordinate
.8088	86 36		stx $36				stx 	gxzTemp0 					; save X/Y
.808a	84 37		sty $37				sty 	gxzTemp0+1
.808c	80 3d		bra $80cb			bra 	_GDExecuteA 				; and execute
.808e					_GDCoordinate:
.808e	48		pha				pha 								; save AXY
.808f	da		phx				phx
.8090	5a		phy				phy
.8091	a2 03		ldx #$03			ldx 	#3 							; copy currentX to lastX
.8093					_GDCopy1:
.8093	bd 29 06	lda $0629,x			lda 	gxCurrentX,x
.8096	9d 2d 06	sta $062d,x			sta 	gxLastX,x
.8099	ca		dex				dex
.809a	10 f7		bpl $8093			bpl 	_GDCopy1
.809c	68		pla				pla 								; update Y
.809d	8d 2b 06	sta $062b			sta 	gxCurrentY
.80a0	9c 2c 06	stz $062c			stz 	gxCurrentY+1
.80a3	68		pla				pla
.80a4	8d 29 06	sta $0629			sta 	gxCurrentX
.80a7	68		pla				pla 								; get A (command+X.1) back
.80a8	48		pha				pha
.80a9	29 01		and #$01			and 	#1 							; put LSB as MSB of Current.X
.80ab	8d 2a 06	sta $062a			sta 	gxCurrentX+1
.80ae	f0 07		beq $80b7			beq 	_GDXOkay 					; check X range
.80b0	ad 29 06	lda $0629			lda 	gxCurrentX
.80b3	c9 40		cmp #$40			cmp 	#64 						; >= 320
.80b5	b0 1e		bcs $80d5			bcs 	_GDError
.80b7					_GDXOkay:
.80b7	ad 2b 06	lda $062b			lda 	gxCurrentY
.80ba	cd 3b 06	cmp $063b			cmp 	gxHeight
.80bd	b0 16		bcs $80d5			bcs 	_GDError
.80bf	a2 07		ldx #$07			ldx 	#7 							; copy current and last to gxXY/12 work area
.80c1					_GDCopy2:
.80c1	bd 29 06	lda $0629,x			lda 	gxCurrentX,x
.80c4	9d 31 06	sta $0631,x			sta 	gxX0,x
.80c7	ca		dex				dex
.80c8	10 f7		bpl $80c1			bpl 	_GDCopy2
.80ca	68		pla				pla 								; get command back
.80cb					_GDExecuteA:
.80cb	29 fe		and #$fe			and 	#$FE 						; lose LSB
.80cd	c9 34		cmp #$34			cmp 	#GRFirstFreeCode*2 			; bad ?
.80cf	b0 05		bcs $80d6			bcs 	_GDError2
.80d1	aa		tax				tax
.80d2	7c db 80	jmp ($80db,x)			jmp 	(GRVectorTable,x)
.80d5					_GDError:
.80d5	68		pla				pla 								; throw command
.80d6					_GDError2:
.80d6	38		sec				sec
.80d7	60		rts				rts
.80d8					GXMove:
.80d8	18		clc				clc
.80d9	60		rts				rts
.80da					GRUndefined:
>80da	db						.byte 	$DB 						; causes a break in the emulator

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./aa.main/vectors.asm

=26					GRFirstFreeCode = 26
.80db					GRVectorTable:
>80db	9c 82					.word	GXControlBitmap          ; $00 BITMAPCTL
>80dd	df 82					.word	GXControlSprite          ; $01 SPRITECTL
>80df	55 82					.word	GXClearBitmap            ; $02 Clear
>80e1	51 84					.word	GXSetColourMode          ; $03 Colour
>80e3	07 86					.word	GXFontHandler            ; $04 DrawFont
>80e5	4f 86					.word	GXSpriteHandler          ; $05 DrawSprite
>80e7	b7 86					.word	GXSelect                 ; $06 SPRUSE
>80e9	e7 86					.word	GXSelectImage            ; $07 SPRIMG
>80eb	da 80					.word	GRUndefined              ; $08
>80ed	da 80					.word	GRUndefined              ; $09
>80ef	da 80					.word	GRUndefined              ; $0a
>80f1	da 80					.word	GRUndefined              ; $0b
>80f3	da 80					.word	GRUndefined              ; $0c
>80f5	da 80					.word	GRUndefined              ; $0d
>80f7	da 80					.word	GRUndefined              ; $0e
>80f9	da 80					.word	GRUndefined              ; $0f
>80fb	d8 80					.word	GXMove                   ; $10 Move
>80fd	26 83					.word	GXLine                   ; $11 Line
>80ff	9a 84					.word	GXFrameRectangle         ; $12 FrameRect
>8101	97 84					.word	GXFillRectangle          ; $13 FillRect
>8103	13 81					.word	GXFrameCircle            ; $14 FrameCircle
>8105	0f 81					.word	GXFillCircle             ; $15 FillCircle
>8107	da 80					.word	GRUndefined              ; $16
>8109	da 80					.word	GRUndefined              ; $17
>810b	7f 84					.word	GXPlotPoint              ; $18 Plot
>810d	39 87					.word	GXMoveSprite             ; $19 SPRMOVE

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/circle.asm

.810f					GXFillCircle:
.810f	a9 ff		lda #$ff			lda 	#255
.8111	80 02		bra $8115			bra 	GXCircle
.8113					GXFrameCircle:
.8113	a9 00		lda #$00			lda 	#0
.8115					GXCircle:
.8115	8d 4a 06	sta $064a			sta 	gxIsFillMode					; save Fill flag
.8118	20 27 88	jsr $8827			jsr 	GXSortXY 					; topleft/bottomright
.811b	20 5c 87	jsr $875c			jsr 	GXOpenBitmap 				; start drawing
.811e	20 0e 82	jsr $820e			jsr 	GXCircleSetup 				; set up for drawing
.8121	9c 4b 06	stz $064b			stz 	gxYChanged
.8124					_GXCircleDraw:
.8124	ad 48 06	lda $0648			lda 	gXCentre					; while x <= y
.8127	cd 49 06	cmp $0649			cmp 	gYCentre
.812a	90 0a		bcc $8136			bcc 	_GXCircleContinue
.812c	d0 03		bne $8131			bne 	_GXNoLast
.812e	20 41 81	jsr $8141			jsr 	GXPlot1
.8131					_GXNoLast:
.8131	20 6d 87	jsr $876d			jsr 	GXCloseBitmap 				; close the bitmap
.8134	18		clc				clc
.8135	60		rts				rts
.8136					_GXCircleContinue:
.8136	20 3e 81	jsr $813e			jsr 	GXPlot2 					; draw it
.8139	20 bb 81	jsr $81bb			jsr 	GXCircleMove 				; adjust the coordinates
.813c	80 e6		bra $8124			bra 	_GXCircleDraw
.813e					GXPlot2:
.813e	20 41 81	jsr $8141			jsr 	GXPlot1 						; plot and swap, fall through does twice
.8141					GXPlot1:
.8141	ad 49 06	lda $0649			lda 	gYCentre 						; if y = 0, don't do it twice (xor)
.8144	f0 03		beq $8149			beq 	_GXPlot1Only
.8146	20 65 81	jsr $8165			jsr 	GXPlot0 						; plot and negate
.8149					_GXPlot1Only:
.8149	20 65 81	jsr $8165			jsr 	GXPlot0 						; twice, undoing negation
.814c	ad 48 06	lda $0648			lda 	gXCentre 						; swap X and Y
.814f	ae 49 06	ldx $0649			ldx	 	gYCentre
.8152	8d 49 06	sta $0649			sta 	gYCentre
.8155	8e 48 06	stx $0648			stx 	gXCentre
.8158	ad 4b 06	lda $064b			lda 	gxYChanged 						; toggle Y Changed flag
.815b	a9 ff		lda #$ff			lda 	#$FF
.815d	8d 4b 06	sta $064b			sta 	gxYChanged
.8160	60		rts				rts
.8161	20 65 81	jsr $8165			jsr 	GXPlot0 						; do once
.8164	60		rts				rts
.8165	ad 4a 06	lda $064a	GXPlot0:lda 	gxIsFillMode 					; outline mode, always draw as X or Y will change
.8168	f0 05		beq $816f			beq 	_GXPlot0Always
.816a	ad 4b 06	lda $064b			lda 	gxYChanged						; fill mode, only draw if changed.
.816d	f0 2d		beq $819c			beq 	GXPlot0Exit
.816f					_GXPlot0Always:
.816f	a2 02		ldx #$02			ldx 	#2 								; copy Y1-A => Y0
.8171	ad 49 06	lda $0649			lda 	gYCentre
.8174	20 9d 81	jsr $819d			jsr 	GXSubCopy
.8177	a2 00		ldx #$00			ldx 	#0 								; copy X1-A => X0,
.8179	ad 48 06	lda $0648			lda 	gXCentre
.817c	20 9d 81	jsr $819d			jsr 	GXSubCopy
.817f	48		pha				pha 									; save last offset X
.8180	20 7a 87	jsr $877a			jsr 	GXPositionCalc 					; calculate position/offset.
.8183	68		pla				pla
.8184	0a		asl a				asl 	a 								; store 2 x last offset in gxzTemp0
.8185	85 36		sta $36				sta 	gxzTemp0
.8187	64 37		stz $37				stz 	gxzTemp0+1
.8189	26 37		rol $37				rol 	gxzTemp0+1
.818b	ad 4a 06	lda $064a			lda 	gxIsFillMode
.818e	69 80		adc #$80			adc 	#128
.8190	20 e3 84	jsr $84e3			jsr 	GXDrawLineTemp0 				; routine from Rectangle.
.8193	38		sec				sec 									; GY = -GY
.8194	a9 00		lda #$00			lda 	#0
.8196	ed 49 06	sbc $0649			sbc 	gYCentre
.8199	8d 49 06	sta $0649			sta 	gYCentre
.819c					GXPlot0Exit:
.819c	60		rts				rts
.819d					GXSubCopy:
.819d	85 36		sta $36				sta 	gxzTemp0
.819f	64 37		stz $37				stz 	gxzTemp0+1
.81a1	29 80		and #$80			and 	#$80
.81a3	f0 02		beq $81a7			beq 	_GXNoSx
.81a5	c6 37		dec $37				dec 	gxzTemp0+1
.81a7					_GXNoSx:
.81a7	38		sec				sec
.81a8	bd 35 06	lda $0635,x			lda 	gXX1,x
.81ab	e5 36		sbc $36				sbc 	gxzTemp0
.81ad	9d 31 06	sta $0631,x			sta 	gXX0,x
.81b0	bd 36 06	lda $0636,x			lda 	gXX1+1,x
.81b3	e5 37		sbc $37				sbc 	gxzTemp0+1
.81b5	9d 32 06	sta $0632,x			sta 	gXX0+1,x
.81b8	a5 36		lda $36				lda 	gxzTemp0 						; return A
.81ba	60		rts				rts
.81bb					GXCircleMove:
.81bb	9c 4b 06	stz $064b			stz 	gxYChanged 					; clear Y changed flag
.81be	a5 39		lda $39				lda 	gxzTemp1+1 					; check sign of D
.81c0	10 0d		bpl $81cf			bpl 	_GXEMPositive
.81c2	ee 48 06	inc $0648			inc 	gXCentre 					; X++
.81c5	ad 48 06	lda $0648			lda 	gXCentre
.81c8	20 ee 81	jsr $81ee			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.81cb	a9 06		lda #$06			lda 	#6  						; and add 6
.81cd	80 15		bra $81e4			bra 	_GXEMAddD
.81cf					_GXEMPositive:
.81cf	ee 48 06	inc $0648			inc 	gXCentre					; X++
.81d2	ce 49 06	dec $0649			dec 	gyCentre 					; Y--
.81d5	38		sec				sec 								; calculate X-Y
.81d6	ad 48 06	lda $0648			lda 	gXCentre
.81d9	ed 49 06	sbc $0649			sbc 	gYCentre
.81dc	20 ee 81	jsr $81ee			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.81df	a9 0a		lda #$0a			lda 	#10  						; and add 10
.81e1	ce 4b 06	dec $064b			dec 	gxYChanged
.81e4					_GXEMAddD:
.81e4	18		clc				clc
.81e5	65 38		adc $38				adc 	gxzTemp1
.81e7	85 38		sta $38				sta 	gxzTemp1
.81e9	90 02		bcc $81ed			bcc 	_GXEMNoCarry
.81eb	e6 39		inc $39				inc 	gxzTemp1+1
.81ed					_GXEMNoCarry:
.81ed	60		rts				rts
.81ee					_GXAdd4TimesToD:
.81ee	85 36		sta $36				sta 	gxzTemp0 					; make 16 bit signed.
.81f0	29 80		and #$80			and 	#$80
.81f2	f0 02		beq $81f6			beq 	_GXA4Unsigned
.81f4	a9 ff		lda #$ff			lda 	#$FF
.81f6					_GXA4Unsigned:
.81f6	85 37		sta $37				sta 	gxzTemp0+1
.81f8	06 36		asl $36				asl 	gxzTemp0  					; x 4
.81fa	26 37		rol $37				rol 	gxzTemp0+1
.81fc	06 36		asl $36				asl 	gxzTemp0
.81fe	26 37		rol $37				rol 	gxzTemp0+1
.8200	18		clc				clc 								; add
.8201	a5 36		lda $36				lda		gxzTemp0
.8203	65 38		adc $38				adc 	gxzTemp1
.8205	85 38		sta $38				sta 	gxzTemp1
.8207	a5 37		lda $37				lda		gxzTemp0+1
.8209	65 39		adc $39				adc 	gxzTemp1+1
.820b	85 39		sta $39				sta 	gxzTemp1+1
.820d	60		rts				rts
.820e					GXCircleSetup:
.820e	38		sec				sec
.820f	ad 37 06	lda $0637			lda 	gxY1
.8212	ed 33 06	sbc $0633			sbc 	gxY0
.8215	4a		lsr a				lsr 	a
.8216	8d 47 06	sta $0647			sta 	gxRadius
.8219	a2 00		ldx #$00			ldx 	#0
.821b	20 3d 82	jsr $823d			jsr 	_GXCalculateCentre
.821e	a2 02		ldx #$02			ldx 	#2
.8220	20 3d 82	jsr $823d			jsr 	_GXCalculateCentre
.8223	9c 48 06	stz $0648			stz 	gXCentre
.8226	ad 47 06	lda $0647			lda 	gxRadius
.8229	8d 49 06	sta $0649			sta 	gYCentre
.822c	0a		asl a				asl 	a 							; R x 2
.822d	85 36		sta $36				sta 	gxzTemp0
.822f	38		sec				sec
.8230	a9 03		lda #$03			lda 	#3
.8232	e5 36		sbc $36				sbc 	gxzTemp0
.8234	85 38		sta $38				sta 	gxzTemp1
.8236	a9 00		lda #$00			lda 	#0
.8238	e9 00		sbc #$00			sbc 	#0
.823a	85 39		sta $39				sta 	gxzTemp1+1
.823c	60		rts				rts
.823d					_GXCalculateCentre:
.823d	38		sec				sec
.823e	bd 35 06	lda $0635,x			lda 	gxX1,x
.8241	7d 31 06	adc $0631,x			adc 	gXX0,x
.8244	9d 35 06	sta $0635,x			sta 	gXX1,x
.8247	bd 36 06	lda $0636,x			lda 	gXX1+1,x
.824a	7d 32 06	adc $0632,x			adc 	gXX0+1,x
.824d	4a		lsr a				lsr 	a
.824e	9d 36 06	sta $0636,x			sta 	gXX1+1,x
.8251	7e 35 06	ror $0635,x			ror 	gXX1,x
.8254	60		rts				rts
.0647					gxRadius:
>0647							.fill 	1
.0648					gXCentre:
>0648							.fill 	1
.0649					gYCentre:
>0649							.fill 	1
.064a					gxIsFillMode:
>064a							.fill 	1
.064b					gxYChanged:
>064b							.fill  	1

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/clear.asm

=64000					ScreenSize200 = 320 * 200
=76800					ScreenSize240 = 320 * 240
.8255					GXClearBitmap:
.8255	20 5c 87	jsr $875c			jsr 	GXOpenBitmap 				; start access
.8258	a0 07		ldy #$07			ldy 	#ScreenSize200 / 8192 		; X is pages to clear
.825a	ad 3b 06	lda $063b			lda 	gxHeight
.825d	c9 c8		cmp #$c8			cmp 	#200 						; 200 ?
.825f	a0 09		ldy #$09			ldy 	#ScreenSize240 / 8192
.8261					_GXCalcLastPage:
.8261	98		tya				tya 								; add to base page
.8262	18		clc				clc
.8263	6d 39 06	adc $0639			adc 	gxBasePage
.8266	85 0b		sta $0b				sta 	GXEditSlot  				; clear from this page back
.8268					_GXClearAll:
.8268	20 79 82	jsr $8279			jsr 	_GXClearBlock 				; clear 8k block
.826b	c6 0b		dec $0b				dec 	GXEditSlot  				; back to previous
.826d	a5 0b		lda $0b				lda 	GXEditSlot
.826f	cd 39 06	cmp $0639			cmp 	gxBasePage 					; until before base page
.8272	b0 f4		bcs $8268			bcs 	_GXClearAll
.8274	20 6d 87	jsr $876d			jsr 	GXCloseBitmap	 			; stop access
.8277	18		clc				clc
.8278	60		rts				rts
.8279					_GXClearBlock:
.8279	a9 00		lda #$00			lda 	#((GXMappingAddress) & $FF)
.827b	85 38		sta $38				sta 	0+gxzTemp1
.827d	a9 60		lda #$60			lda 	#((GXMappingAddress) >> 8)
.827f	85 39		sta $39				sta 	1+gxzTemp1
.8281					_GXCB0:
.8281	a5 36		lda $36				lda 	gxzTemp0
.8283	a0 00		ldy #$00			ldy 	#0
.8285					_GXCB1:
.8285	91 38		sta ($38),y			sta 	(gxzTemp1),y
.8287	c8		iny				iny
.8288	91 38		sta ($38),y			sta 	(gxzTemp1),y
.828a	c8		iny				iny
.828b	91 38		sta ($38),y			sta 	(gxzTemp1),y
.828d	c8		iny				iny
.828e	91 38		sta ($38),y			sta 	(gxzTemp1),y
.8290	c8		iny				iny
.8291	d0 f2		bne $8285			bne 	_GXCB1
.8293	e6 39		inc $39				inc 	gxzTemp1+1
.8295	a5 39		lda $39				lda 	gxzTemp1+1
.8297	c9 80		cmp #$80			cmp	 	#(GXMappingAddress >> 8)+$20
.8299	d0 e6		bne $8281			bne 	_GXCB0
.829b	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/control.asm

.829c					GXControlBitmap:
.829c	64 01		stz $01				stz 	1
.829e	a5 36		lda $36				lda 	gxzTemp0 					; get control bits
.82a0	4a		lsr a				lsr 	a 							; bit 0 into carry.
.82a1	ad 00 d0	lda $d000			lda 	$D000 						; read Vicky MCR
.82a4	09 07		ora #$07			ora 	#7 							; turn graphics, text, textoverlay on.
.82a6	29 f7		and #$f7			and 	#$F7 						; clear bitmap bit
.82a8	90 02		bcc $82ac			bcc 	_CBNotOn
.82aa	09 08		ora #$08			ora 	#$08 						; bitmap on if 1 on 0 off
.82ac					_CBNotOn:
.82ac	8d 00 d0	sta $d000			sta 	$D000 						; update Vicky MCR
.82af	a5 36		lda $36				lda 	gxzTemp0 					; get control settings (bits 0-2)
.82b1	29 07		and #$07			and 	#7
.82b3	8d 00 d1	sta $d100			sta 	$D100 						; write in Vicky Bitmap Control Register #0
.82b6	a5 37		lda $37				lda 	gxzTemp0+1 					; get the base page
.82b8	d0 02		bne $82bc			bne 	_CBNotDefault
.82ba	a9 08		lda #$08			lda 	#8  						; if zero, use 8 e.g. bitmap at $10000
.82bc					_CBNotDefault:
.82bc	8d 39 06	sta $0639			sta 	gxBasePage
.82bf	20 18 83	jsr $8318			jsr 	GXCalculateBaseAddress 	 	; convert page# to address
.82c2	a5 37		lda $37				lda 	gxzTemp0+1 					; copy address into Bitmap address registers
.82c4	8d 03 d1	sta $d103			sta 	$D103
.82c7	a5 36		lda $36				lda 	gxzTemp0
.82c9	8d 02 d1	sta $d102			sta 	$D102
.82cc	9c 01 d1	stz $d101			stz 	$D101
.82cf	a2 f0		ldx #$f0			ldx 	#240 						; height is 240
.82d1	ad 01 d0	lda $d001			lda 	$D001 						; read MCR bit 0
.82d4	29 01		and #$01			and 	#1
.82d6	f0 02		beq $82da			beq 	_CBHaveHeight
.82d8	a2 c8		ldx #$c8			ldx 	#200 						; if bit 0 set 320x200
.82da					_CBHaveHeight
.82da	8e 3b 06	stx $063b			stx 	gxHeight
.82dd	18		clc				clc
.82de	60		rts				rts
.82df					GXControlSprite:
.82df	64 01		stz $01				stz 	1
.82e1	a5 36		lda $36				lda 	gxzTemp0 					; get control bits
.82e3	4a		lsr a				lsr 	a 							; bit 0 into carry.
.82e4	ad 00 d0	lda $d000			lda 	$D000 						; read Vicky MCR
.82e7	09 07		ora #$07			ora 	#7 							; turn graphics, text, textoverlay on.
.82e9	29 df		and #$df			and 	#$DF 						; clear sprite bit
.82eb	90 02		bcc $82ef			bcc 	_CSNotOn
.82ed	09 20		ora #$20			ora 	#$20 						; sprite on if 1 on 0 off
.82ef					_CSNotOn:
.82ef	8d 00 d0	sta $d000			sta 	$D000 						; update Vicky MCR
.82f2	a5 37		lda $37				lda 	gxzTemp0+1 					; get the base page
.82f4	d0 02		bne $82f8			bne 	_CSNotDefault
.82f6	a9 18		lda #$18			lda 	#24  						; if zero, use 24 e.g. sprites at $30000
.82f8					_CSNotDefault:
.82f8	8d 3a 06	sta $063a			sta 	gxSpritePage
.82fb	20 18 83	jsr $8318			jsr 	GXCalculateBaseAddress 	 	; convert page# to address
.82fe	a5 36		lda $36				lda 	zTemp0
.8300	8d 45 06	sta $0645			sta 	GXSpriteOffsetBase
.8303	a5 37		lda $37				lda 	zTemp0+1
.8305	8d 46 06	sta $0646			sta 	GXSpriteOffsetBase+1
.8308	a2 00		ldx #$00			ldx 	#0 							; disable all sprites, clears all sprite memory.
.830a					_CSClear:
.830a	9e 00 d9	stz $d900,x			stz 	$D900,x
.830d	9e 00 da	stz $da00,x			stz 	$DA00,x
.8310	ca		dex				dex
.8311	d0 f7		bne $830a			bne 	_CSClear
.8313	9c 44 06	stz $0644			stz 	GSCurrentSprite+1 			; no sprite selected.
.8316	18		clc				clc
.8317	60		rts				rts
.8318					GXCalculateBaseAddress:
.8318	85 36		sta $36				sta 	gxzTemp0
.831a	64 37		stz $37				stz 	gxzTemp0+1
.831c	a9 05		lda #$05			lda 	#5
.831e					_GXShift:
.831e	06 36		asl $36				asl 	gxzTemp0
.8320	26 37		rol $37				rol 	gxzTemp0+1
.8322	3a		dec a				dec		a
.8323	d0 f9		bne $831e			bne 	_GXShift
.8325	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/line.asm

.8326					GXLine:
.8326	20 5c 87	jsr $875c			jsr 	GXOpenBitmap
.8329	20 45 88	jsr $8845			jsr 	GXSortY						; sort pairs so Y1 >= Y0 e.g. top to bottom.
.832c	20 f2 83	jsr $83f2			jsr 	GXLineSetup 				; the calculations in the linescanner constructor
.832f	20 7a 87	jsr $877a			jsr 	GXPositionCalc 				; calculate position/offset.
.8332					_GXDrawLoop:
.8332	ac 42 06	ldy $0642			ldy 	gsOffset 					; draw the pixel
.8335	b1 3c		lda ($3c),y			lda 	(gxzScreen),y
.8337	2d 3f 06	and $063f			and 	gxANDValue
.833a	4d 3e 06	eor $063e			eor 	gxEORValue
.833d	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.833f	20 4e 83	jsr $834e			jsr 	GXLineIsComplete 			; is the line complete ?
.8342	f0 05		beq $8349			beq 	_GXLExit
.8344	20 69 83	jsr $8369			jsr 	GXLineAdvance 				; code as per advance method
.8347	80 e9		bra $8332			bra 	_GXDrawLoop
.8349					_GXLExit:
.8349	20 6d 87	jsr $876d			jsr 	GXCloseBitmap
.834c	18		clc				clc
.834d	60		rts				rts
.834e					GXLineIsComplete:
.834e	ad 4e 06	lda $064e			lda 	GXIsDiffYLarger 			; is dy larger
.8351	d0 0f		bne $8362			bne 	_GXLICCompareY 				; if so compare Y1/Y0
.8353	ad 31 06	lda $0631			lda 	GXX0 						; compare X, LSB and MSB
.8356	4d 35 06	eor $0635			eor 	GXX1
.8359	d0 06		bne $8361			bne 	_GXLICExit
.835b	ad 32 06	lda $0632			lda 	GXX0+1
.835e	4d 36 06	eor $0636			eor 	GXX1+1
.8361					_GXLICExit:
.8361	60		rts				rts
.8362					_GXLICCompareY:
.8362	ad 37 06	lda $0637			lda 	GXY1
.8365	4d 33 06	eor $0633			eor 	GXY0
.8368	60		rts				rts
.8369					GXLineAdvance:
.8369	18		clc				clc 								; add adjust to position
.836a	ad 50 06	lda $0650			lda 	GXPosition
.836d	6d 51 06	adc $0651			adc 	GXAdjust
.8370	8d 50 06	sta $0650			sta 	GXPosition
.8373	9c 53 06	stz $0653			stz 	GXAddSelect 				; clear add select flag
.8376	b0 05		bcs $837d			bcs 	_GXLAOverflow 				; if carry out, overflowed.
.8378	cd 52 06	cmp $0652			cmp 	GXTotal 					; if exceeded total
.837b	90 0a		bcc $8387			bcc 	_GXLANoExtra
.837d					_GXLAOverflow:
.837d	ce 53 06	dec $0653			dec 	GXAddSelect 				; set addselect to $FF
.8380	38		sec				sec 								; subtract total and write back
.8381	ed 52 06	sbc $0652			sbc 	GXTotal
.8384	8d 50 06	sta $0650			sta 	GXPosition
.8387					_GXLANoExtra:
.8387	ad 4e 06	lda $064e			lda 	GXIsDiffYLarger
.838a	f0 0d		beq $8399			beq 	_GXDXLarger
.838c	20 eb 83	jsr $83eb			jsr 	GXIncrementY
.838f	ad 53 06	lda $0653			lda 	GXAddSelect
.8392	f0 10		beq $83a4			beq 	_GXLAExit
.8394	20 a5 83	jsr $83a5			jsr 	GXAdjustX
.8397	80 0b		bra $83a4			bra 	_GXLAExit
.8399					_GXDXLarger:
.8399	20 a5 83	jsr $83a5			jsr 	GXAdjustX
.839c	ad 53 06	lda $0653			lda 	GXAddSelect
.839f	f0 03		beq $83a4			beq 	_GXLAExit
.83a1	20 eb 83	jsr $83eb			jsr 	GXIncrementY
.83a4					_GXLAExit:
.83a4	60		rts				rts
.83a5					GXAdjustX:
.83a5	ad 4f 06	lda $064f			lda 	GXDXNegative
.83a8	10 25		bpl $83cf			bpl 	_GXAXRight
.83aa	ad 31 06	lda $0631			lda 	GXX0
.83ad	d0 03		bne $83b2			bne 	_GXAXNoBorrow
.83af	ce 32 06	dec $0632			dec 	GXX0+1
.83b2					_GXAXNoBorrow:
.83b2	ce 31 06	dec $0631			dec 	GXX0
.83b5	ce 42 06	dec $0642			dec 	gsOffset 					; pixel left
.83b8	ad 42 06	lda $0642			lda 	gsOffset
.83bb	c9 ff		cmp #$ff			cmp 	#$FF
.83bd	d0 0f		bne $83ce			bne 	_GXAYExit 					; underflow
.83bf	c6 3d		dec $3d				dec 	gxzScreen+1 					; borrow
.83c1	a5 3d		lda $3d				lda 	gxzScreen+1 					; gone off page
.83c3	c9 60		cmp #$60			cmp 	#GXMappingAddress >> 8
.83c5	b0 07		bcs $83ce			bcs 	_GXAYExit
.83c7	18		clc				clc
.83c8	69 20		adc #$20			adc 	#$20 						; fix up
.83ca	85 3d		sta $3d				sta 	gxzScreen+1
.83cc	c6 0b		dec $0b				dec 	GXEditSlot 				; back one page
.83ce					_GXAYExit:
.83ce	60		rts				rts
.83cf					_GXAXRight:
.83cf	ee 31 06	inc $0631			inc 	GXX0
.83d2	d0 03		bne $83d7			bne 	_GXAXNoCarry
.83d4	ee 32 06	inc $0632			inc 	GXX0+1
.83d7					_GXAXNoCarry:
.83d7	ee 42 06	inc $0642			inc 	gsOffset 					; pixel right
.83da	d0 0e		bne $83ea			bne 	_GXAXExit 					; if not overflowed, exit.
.83dc	e6 3d		inc $3d				inc 	gxzScreen+1 					; next line
.83de	a5 3d		lda $3d				lda 	gxzScreen+1
.83e0	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page ?
.83e2	90 06		bcc $83ea			bcc 	_GXAXExit
.83e4	e9 20		sbc #$20			sbc 	#$20 						; fix up
.83e6	85 3d		sta $3d				sta 	gxzScreen+1
.83e8	e6 0b		inc $0b				inc 	GXEditSlot 				; next page
.83ea					_GXAXExit:
.83ea	60		rts				rts
.83eb					GXIncrementY:
.83eb	ee 33 06	inc $0633			inc 	GXY0
.83ee	20 d0 87	jsr $87d0			jsr 	GXMovePositionDown
.83f1	60		rts				rts
.83f2					GXLineSetup:
.83f2	ad 37 06	lda $0637			lda 	GXY1
.83f5	38		sec				sec
.83f6	ed 33 06	sbc $0633			sbc 	GXY0
.83f9	4a		lsr a				lsr 	a
.83fa	8d 4d 06	sta $064d			sta 	GXDiffY
.83fd	9c 4f 06	stz $064f			stz 	GXDXNegative 				; clear -ve flag
.8400	38		sec				sec
.8401	ad 35 06	lda $0635			lda 	GXX1
.8404	ed 31 06	sbc $0631			sbc 	GXX0
.8407	8d 4c 06	sta $064c			sta 	GXDiffX
.840a	ad 36 06	lda $0636			lda 	GXX1+1 						; calculate MSB
.840d	ed 32 06	sbc $0632			sbc 	GXX0+1
.8410	6a		ror a				ror 	a 							; rotate bit into DiffX halving it
.8411	6e 4c 06	ror $064c			ror 	GXDiffX
.8414	0a		asl a				asl 	a
.8415	10 0c		bpl $8423			bpl 	_GDXNotNegative
.8417	a9 00		lda #$00			lda 	#0 							; make absolute value of |dx|
.8419	38		sec				sec
.841a	ed 4c 06	sbc $064c			sbc 	GXDiffX
.841d	8d 4c 06	sta $064c			sta 	GXDiffX
.8420	ce 4f 06	dec $064f			dec 	GXDXNegative 				; -ve flag = $FF.
.8423					_GDXNotNegative:
.8423	9c 4e 06	stz $064e			stz 	GXIsDiffYLarger 			; clear larger flag
.8426	ad 4d 06	lda $064d			lda 	GXDiffY 					; set adjust and total.
.8429	8d 51 06	sta $0651			sta 	GXAdjust
.842c	ad 4c 06	lda $064c			lda 	GXDiffX
.842f	8d 52 06	sta $0652			sta 	GXTotal
.8432	ad 4d 06	lda $064d			lda 	GXDiffY 					; if dy > dx
.8435	cd 4c 06	cmp $064c			cmp 	GXDiffX
.8438	90 0f		bcc $8449			bcc 	_GDXNotLarger
.843a	ce 4e 06	dec $064e			dec 	GXIsDiffYLarger 			; set the dy larger flag
.843d	ad 4c 06	lda $064c			lda 	GXDiffX 					; set adjust and total other way round
.8440	8d 51 06	sta $0651			sta 	GXAdjust
.8443	ad 4d 06	lda $064d			lda 	GXDiffY
.8446	8d 52 06	sta $0652			sta 	GXTotal
.8449					_GDXNotLarger:
.8449	ad 52 06	lda $0652			lda 	GXTotal
.844c	4a		lsr a				lsr 	a
.844d	8d 50 06	sta $0650			sta 	GXPosition
.8450	60		rts				rts
.064c					GXDiffX:
>064c							.fill 	1
.064d					GXDiffY:
>064d							.fill 	1
.064e					GXIsDiffYLarger:
>064e							.fill 	1
.064f					GXDXNegative:
>064f							.fill 	1
.0650					GXPosition:
>0650							.fill 	1
.0651					GXAdjust:
>0651							.fill 	1
.0652					GXTotal:
>0652							.fill 	1
.0653					GXAddSelect:
>0653							.fill 	1

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/mode.asm

.8451					GXSetColourMode:
.8451	a6 36		ldx $36				ldx 	gxzTemp0
.8453	8e 3d 06	stx $063d			stx 	gxColour 								; set colour
.8456	a5 37		lda $37				lda 	gxzTemp0+1 								;
.8458	8d 3c 06	sta $063c			sta 	gxMode 									; set mode
.845b	29 03		and #$03			and 	#3 										; only interested in bits 0-3
.845d	9c 3f 06	stz $063f			stz 	gxANDValue 								; initially AND with 0, and EOR with Colour
.8460	ae 3d 06	ldx $063d			ldx 	gxColour
.8463	8e 3e 06	stx $063e			stx 	gxEORValue
.8466	c9 02		cmp #$02			cmp 	#2 										; if mode 2/3 And with colour
.8468	90 03		bcc $846d			bcc 	_GXSDCNotAndColour
.846a	8e 3f 06	stx $063f			stx 	gxANDValue
.846d					_GXSDCNotAndColour:
.846d	d0 03		bne $8472			bne 	_GXSDCNotAnd 							; mode 2, Don't EOR with colour
.846f	9c 3e 06	stz $063e			stz 	gxEORValue
.8472					_GXSDCNotAnd:
.8472	4a		lsr a				lsr 	a 										; if bit 0 set, 1's complement AND value
.8473	90 08		bcc $847d			bcc 	_GXSDCNoFlip
.8475	ad 3f 06	lda $063f			lda	 	gxANDValue
.8478	49 ff		eor #$ff			eor 	#$FF
.847a	8d 3f 06	sta $063f			sta 	gxANDValue
.847d					_GXSDCNoFlip:
.847d	18		clc				clc
.847e	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/plot.asm

.847f					GXPlotPoint:
.847f	20 5c 87	jsr $875c			jsr 	GXOpenBitmap 				; start drawing
.8482	20 7a 87	jsr $877a			jsr 	GXPositionCalc 				; setup gxzScreen, gsOffset and the position.
.8485	ac 42 06	ldy $0642			ldy 	gsOffset
.8488	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel on the right
.848a	2d 3f 06	and $063f			and 	gxANDValue
.848d	4d 3e 06	eor $063e			eor 	gxEORValue
.8490	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.8492	20 6d 87	jsr $876d			jsr 	GXCloseBitmap 				; stop drawing and exit
.8495	18		clc				clc
.8496	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/rect.asm

.8497					GXFillRectangle:
.8497	38		sec				sec
.8498	80 01		bra $849b			bra 	GXRectangle
.849a					GXFrameRectangle:
.849a	18		clc				clc
.849b					GXRectangle:
.849b	08		php				php 								; save Fill flag (CS)
.849c	20 5c 87	jsr $875c			jsr 	GXOpenBitmap 				; start drawing
.849f	20 27 88	jsr $8827			jsr 	GXSortXY 					; sort both X and Y so top left/bottom right
.84a2	20 7a 87	jsr $877a			jsr 	GXPositionCalc 				; setup gxzScreen, gsOffset and the position.
.84a5	38		sec				sec 								; sec = Draw line
.84a6	20 d0 84	jsr $84d0			jsr 	GXDrawLineX1X0 				; draw a line length X1-X0
.84a9	ad 33 06	lda $0633			lda 	gxY0 						; reached end of rectangle ?
.84ac	cd 37 06	cmp $0637			cmp 	gxY1
.84af	f0 19		beq $84ca			beq 	_GXRectangleExit
.84b1					_GXRectLoop:
.84b1	20 d0 87	jsr $87d0			jsr 	GXMovePositionDown 			; down one.
.84b4	ee 33 06	inc $0633			inc 	gxY0 						; change Y pos
.84b7	ad 33 06	lda $0633			lda 	gxY0 						; reached last line
.84ba	cd 37 06	cmp $0637			cmp 	gXY1
.84bd	f0 07		beq $84c6			beq 	_GXLastLine
.84bf	28		plp				plp 								; get flag back
.84c0	08		php				php
.84c1	20 d0 84	jsr $84d0			jsr 	GXDrawLineX1X0 				; draw horizontal line
.84c4	80 eb		bra $84b1			bra 	_GXRectLoop
.84c6					_GXLastLine:
.84c6	38		sec				sec
.84c7	20 d0 84	jsr $84d0			jsr 	GXDrawLineX1X0
.84ca					_GXRectangleExit:
.84ca	68		pla				pla 								; throw fill flag.
.84cb	20 6d 87	jsr $876d			jsr 	GXCloseBitmap 				; stop drawing and exit
.84ce	18		clc				clc
.84cf	60		rts				rts
.84d0					GXDrawLineX1X0:
.84d0	08		php				php 								; save solid/either-end
.84d1	38		sec				sec
.84d2	ad 35 06	lda $0635			lda		gXX1
.84d5	ed 31 06	sbc $0631			sbc 	gXX0
.84d8	85 36		sta $36				sta 	gxzTemp0
.84da	ad 36 06	lda $0636			lda 	gXX1+1
.84dd	ed 32 06	sbc $0632			sbc 	gXX0+1
.84e0	85 37		sta $37				sta 	gxzTemp0+1
.84e2	28		plp				plp
.84e3					GXDrawLineTemp0:
.84e3	a5 3c		lda $3c				lda 	gxzScreen 						; push gxzScreen, gsOffset and GXEditSlot on stack
.84e5	48		pha				pha
.84e6	a5 3d		lda $3d				lda 	gxzScreen+1
.84e8	48		pha				pha
.84e9	ad 42 06	lda $0642			lda 	gsOffset
.84ec	48		pha				pha
.84ed	a5 0b		lda $0b				lda 	GXEditSlot
.84ef	48		pha				pha
.84f0	ac 42 06	ldy $0642			ldy 	gsOffset 					; Y offset
.84f3	90 1e		bcc $8513			bcc 	_GXDLTEndPoints 			; if CC draw end points only.
.84f5					_GXDLTLine:
.84f5	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel
.84f7	2d 3f 06	and $063f			and 	gxANDValue
.84fa	4d 3e 06	eor $063e			eor 	gxEORValue
.84fd	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.84ff	a5 36		lda $36				lda 	gxzTemp0 					; decrement counter
.8501	d0 04		bne $8507			bne 	_GXDLTNoBorrow
.8503	c6 37		dec $37				dec 	gxzTemp0+1 					; borrow, if goes -ve then exit
.8505	30 2e		bmi $8535			bmi 	_GXDLTExit
.8507					_GXDLTNoBorrow:
.8507	c6 36		dec $36				dec 	gxzTemp0
.8509	c8		iny				iny 								; next slot.
.850a	d0 e9		bne $84f5			bne 	_GXDLTLine
.850c	e6 3d		inc $3d				inc 	gxzScreen+1 					; carry to next
.850e	20 43 85	jsr $8543			jsr 	GXDLTCheckWrap				; check for new page.
.8511	80 e2		bra $84f5			bra 	_GXDLTLine
.8513					_GXDLTEndPoints:
.8513	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel
.8515	2d 3f 06	and $063f			and 	gxANDValue
.8518	4d 3e 06	eor $063e			eor 	gxEORValue
.851b	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.851d	98		tya				tya 								; advance to right side
.851e	18		clc				clc
.851f	65 36		adc $36				adc 	gxzTemp0
.8521	a8		tay				tay
.8522	a5 3d		lda $3d				lda 	gxzScreen+1
.8524	65 37		adc $37				adc 	gxzTemp0+1
.8526	85 3d		sta $3d				sta 	gxzScreen+1
.8528	20 43 85	jsr $8543			jsr 	GXDLTCheckWrap 			; fix up.
.852b	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel on the right
.852d	2d 3f 06	and $063f			and 	gxANDValue
.8530	4d 3e 06	eor $063e			eor 	gxEORValue
.8533	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.8535					_GXDLTExit:
.8535	68		pla				pla
.8536	85 0b		sta $0b				sta 	GXEditSlot
.8538	68		pla				pla
.8539	8d 42 06	sta $0642			sta 	gsOffset
.853c	68		pla				pla
.853d	85 3d		sta $3d				sta 	gxzScreen+1
.853f	68		pla				pla
.8540	85 3c		sta $3c				sta 	gxzScreen
.8542	60		rts				rts
.8543					GXDLTCheckWrap:
.8543	a5 3d		lda $3d				lda 	gxzScreen+1 					; check end of page
.8545	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8)
.8547	90 06		bcc $854f			bcc 	_GXDLTCWExit
.8549	e9 20		sbc #$20			sbc 	#$20 						; fix up
.854b	85 3d		sta $3d				sta 	gxzScreen+1
.854d	e6 0b		inc $0b				inc 	GXEditSlot
.854f					_GXDLTCWExit:
.854f	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/render.asm

.8550					GXDrawGraphicElement:
.8550	8d 54 06	sta $0654			sta 	gxSize 						; save size
.8553	3a		dec a				dec 	a
.8554	8d 55 06	sta $0655			sta 	gxMask 						; and mask
.8557	9c 59 06	stz $0659			stz 	gxVFlip 					; set the flip bytes
.855a	9c 5a 06	stz $065a			stz 	gxHFlip
.855d	2c 5b 06	bit $065b			bit 	gxUseMode
.8560	10 03		bpl $8565			bpl 	_GXNotVertical
.8562	8d 59 06	sta $0659			sta 	gxVFlip
.8565					_GXNotVertical:
.8565	50 03		bvc $856a			bvc 	_GXNotHorizontal
.8567	8d 5a 06	sta $065a			sta 	gxHFlip
.856a					_GXNotHorizontal:
.856a	ad 33 06	lda $0633			lda 	gxY0 						; push Y on stack
.856d	48		pha				pha
.856e	8c 57 06	sty $0657			sty 	gxAcquireVector+1 			; and acquisition vector
.8571	8e 56 06	stx $0656			stx 	gxAcquireVector
.8574	20 5c 87	jsr $875c			jsr 	gxOpenBitmap 				; open the bitmap.
.8577	ad 5b 06	lda $065b			lda 	gxUseMode 					; scale bits
.857a	4a		lsr a				lsr 	a
.857b	4a		lsr a				lsr 	a
.857c	4a		lsr a				lsr 	a
.857d	29 07		and #$07			and		#7
.857f	1a		inc a				inc 	a
.8580	8d 58 06	sta $0658			sta 	gxScale
.8583	64 38		stz $38				stz 	gxzTemp1						; start first line
.8585					_GXGELoop:
.8585	a5 38		lda $38				lda 	gxzTemp1 					; current line number to read.
.8587	4d 59 06	eor $0659			eor 	gxVFlip
.858a	aa		tax				tax 								; get the Xth line.
.858b	20 c9 85	jsr $85c9			jsr 	_GXCallAcquire 				; get that data.
.858e	ad 58 06	lda $0658			lda 	gxScale 					; do scale identical copies of that line.
.8591	85 39		sta $39				sta 	gxzTemp1+1
.8593					_GXGELoop2:
.8593	ad 33 06	lda $0633			lda 	gxY0 						; off screen
.8596	cd 3b 06	cmp $063b			cmp 	gxHeight
.8599	b0 10		bcs $85ab			bcs 	_GXDGEExit
.859b	20 cc 85	jsr $85cc			jsr 	GXRenderOneLine 			; render line
.859e	c6 39		dec $39				dec 	gxzTemp1+1 					; scale times.
.85a0	d0 f1		bne $8593			bne 	_GXGELoop2
.85a2	e6 38		inc $38				inc 	gxzTemp1 					; done all lines.
.85a4	a5 38		lda $38				lda 	gxzTemp1
.85a6	cd 54 06	cmp $0654			cmp 	gxSize
.85a9	d0 da		bne $8585			bne 	_GXGELoop
.85ab					_GXDGEExit:
.85ab	68		pla				pla 								; restore Y for next time
.85ac	8d 33 06	sta $0633			sta 	gxY0
.85af	ae 58 06	ldx $0658			ldx 	gxScale 					; get scale (1-8)
.85b2					_GXShiftLeft:
.85b2	18		clc				clc
.85b3	ad 54 06	lda $0654			lda 	gxSize
.85b6	6d 31 06	adc $0631			adc 	gxX0
.85b9	8d 31 06	sta $0631			sta 	gxX0
.85bc	90 03		bcc $85c1			bcc 	_GXSLNoCarry
.85be	ee 32 06	inc $0632			inc 	gxX0+1
.85c1					_GXSLNoCarry:
.85c1	ca		dex				dex
.85c2	d0 ee		bne $85b2			bne 	_GXShiftLeft
.85c4	20 6d 87	jsr $876d			jsr 	GXCloseBitmap
.85c7	18		clc				clc
.85c8	60		rts				rts
.85c9					_GXCallAcquire:
.85c9	6c 56 06	jmp ($0656)			jmp 	(gxAcquireVector)
.85cc					GXRenderOneLine:
.85cc	20 7a 87	jsr $877a			jsr 	GXPositionCalc 				; calculate position/offset.
.85cf	ac 42 06	ldy $0642			ldy 	gsOffset 					; Y contains position.
.85d2	64 3a		stz $3a				stz 	gxzTemp2 					; do size pixels
.85d4					_GXROLLoop1:
.85d4	ad 58 06	lda $0658			lda 	gxScale 					; set to do 'scale' times
.85d7	85 3b		sta $3b				sta 	gxzTemp2+1
.85d9					_GXROLLoop2:
.85d9	a5 3a		lda $3a				lda 	gxzTemp2 					; get current pixel
.85db	4d 5a 06	eor $065a			eor 	gxHFlip
.85de	aa		tax				tax 								; read from the pixel buffer
.85df	bd f7 05	lda $05f7,x			lda 	gxPixelBuffer,x
.85e2	f0 0a		beq $85ee			beq 	_GXZeroPixel 				; don't draw if zero.
.85e4	b1 3c		lda ($3c),y			lda 	(gxzScreen),y
.85e6	2d 3f 06	and $063f			and 	gxANDValue
.85e9	5d f7 05	eor $05f7,x			eor 	gxPixelBuffer,x
.85ec	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.85ee					_GXZeroPixel:
.85ee	c8		iny				iny 								; advance pointer
.85ef	d0 05		bne $85f6			bne 	_GXNoShift
.85f1	e6 3d		inc $3d				inc 	gxzScreen+1 					; carry to next
.85f3	20 43 85	jsr $8543			jsr 	GXDLTCheckWrap				; check for new page.
.85f6					_GXNoShift:
.85f6	c6 3b		dec $3b				dec 	gxzTemp2+1 					; do the inner loop gxScale times.
.85f8	d0 df		bne $85d9			bne 	_GXROLLoop2
.85fa	e6 3a		inc $3a				inc 	gxzTemp2 					; next pixel.
.85fc	a5 3a		lda $3a				lda 	gxzTemp2
.85fe	cd 54 06	cmp $0654			cmp 	gxSize
.8601	d0 d1		bne $85d4			bne 	_GXROLLoop1
.8603	ee 33 06	inc $0633			inc 	gxY0
.8606	60		rts				rts
.0654					gxSize:
>0654							.fill 	1
.0655					gxMask:
>0655							.fill 	1
.0656					gxAcquireVector:
>0656							.fill 	2
.0658					gxScale:
>0658							.fill 	1
.0659					gxVFlip:
>0659							.fill 	1
.065a					gxHFlip:
>065a							.fill 	1
.065b					gxUseMode:
>065b							.fill 	1

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/sources/font.asm

.8607					GXFontHandler:
.8607	a5 37		lda $37				lda 	gxzTemp0+1 					; eor with mode
.8609	4d 3c 06	eor $063c			eor 	gxMode
.860c	8d 5b 06	sta $065b			sta 	gxUseMode
.860f	64 37		stz $37				stz 	gxzTemp0+1 					; gxzTemp0 is font #
.8611	06 36		asl $36				asl	 	gxzTemp0 					; x 2
.8613	26 37		rol $37				rol	 	gxzTemp0+1
.8615	06 36		asl $36				asl	 	gxzTemp0 					; x 4
.8617	26 37		rol $37				rol	 	gxzTemp0+1
.8619	06 36		asl $36				asl	 	gxzTemp0 					; x 8
.861b	26 37		rol $37				rol	 	gxzTemp0+1
.861d	a5 37		lda $37				lda 	gxzTemp0+1 					; put in page C0
.861f	09 c0		ora #$c0			ora 	#$C0
.8621	85 37		sta $37				sta 	gxzTemp0+1
.8623	a9 08		lda #$08			lda 	#8 							; size 8x8
.8625	a2 2d		ldx #$2d			ldx 	#GXGetGraphicDataFont & $FF ; XY = Graphic Data retrieval routine
.8627	a0 86		ldy #$86			ldy 	#GXGetGraphicDataFont >> 8
.8629	20 50 85	jsr $8550			jsr 	GXDrawGraphicElement
.862c	60		rts				rts
.862d					GXGetGraphicDataFont:
.862d	8a		txa				txa 								; X->Y
.862e	a8		tay				tay
.862f	a6 01		ldx $01				ldx 	1 							; preserve old value
.8631	a9 01		lda #$01			lda 	#1 							; access page 1 (font memory)
.8633	85 01		sta $01				sta 	1
.8635	b1 36		lda ($36),y			lda 	(gxzTemp0),y 				; read the font element.
.8637	86 01		stx $01				stx 	1 							; put old value back.
.8639	a2 00		ldx #$00			ldx 	#0 							; do 8 times
.863b					_GXExpand:
.863b	9e f7 05	stz $05f7,x			stz 	gxPixelBuffer,x 			; zero in pixel buffer
.863e	0a		asl a				asl 	a 							; shift bit 7 into C
.863f	90 08		bcc $8649			bcc 	_GXNoPixel
.8641	48		pha				pha 								; if set, set pixel buffer to current colour.
.8642	ad 3d 06	lda $063d			lda 	gxColour
.8645	9d f7 05	sta $05f7,x			sta 	gxPixelBuffer,x
.8648	68		pla				pla
.8649					_GXNoPixel:
.8649	e8		inx				inx 								; do the whole byte.
.864a	e0 08		cpx #$08			cpx 	#8
.864c	d0 ed		bne $863b			bne 	_GXExpand
.864e	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/sources/sprite.asm

.864f					GXSpriteHandler:
.864f	a5 37		lda $37				lda 	gxzTemp0+1 					; eor with mode
.8651	4d 3c 06	eor $063c			eor 	gxMode
.8654	8d 5b 06	sta $065b			sta 	gxUseMode
.8657	a6 36		ldx $36				ldx 	gxzTemp0 					; sprite #
.8659	da		phx				phx
.865a	20 5c 87	jsr $875c			jsr 	GXOpenBitmap 				; can access sprite information
.865d	68		pla				pla
.865e	20 eb 87	jsr $87eb			jsr 	GXFindSprite 				; get the sprite address
.8661	20 6d 87	jsr $876d			jsr 	GXCloseBitmap
.8664	ad 5c 06	lda $065c			lda 	GXSizePixels 					; return size
.8667	a2 6f		ldx #$6f			ldx 	#GXSpriteAcquire & $FF
.8669	a0 86		ldy #$86			ldy 	#GXSpriteAcquire >> 8
.866b	20 50 85	jsr $8550			jsr 	GXDrawGraphicElement
.866e	60		rts				rts
.866f					GXSpriteAcquire:
.866f	ad 3a 06	lda $063a			lda 	GXSpritePage				; point to base page
.8672	85 0b		sta $0b				sta 	GXEditSlot
.8674	86 36		stx $36				stx 	zTemp0 						; row number x 1,2,3,4
.8676	a9 00		lda #$00			lda 	#0
.8678	ae 5d 06	ldx $065d			ldx 	GXSizeBits
.867b					_GXTimesRowNumber:
.867b	18		clc				clc
.867c	65 36		adc $36				adc 	zTemp0
.867e	ca		dex				dex
.867f	10 fa		bpl $867b			bpl 	_GXTimesRowNumber
.8681	64 37		stz $37				stz 	gxzTemp0+1
.8683	0a		asl a				asl 	a 							; row x 2,4,6,8
.8684	26 37		rol $37				rol 	gxzTemp0+1
.8686	0a		asl a				asl 	a 							; row x 4,8,12,16
.8687	26 37		rol $37				rol 	gxzTemp0+1
.8689	0a		asl a				asl 	a 							; row x 8,16,24,32
.868a	26 37		rol $37				rol 	gxzTemp0+1
.868c	85 36		sta $36				sta 	gxzTemp0
.868e	18		clc				clc 								; add base address.
.868f	a5 36		lda $36				lda 	gxzTemp0
.8691	6d 5f 06	adc $065f			adc 	GXSpriteOffset
.8694	85 36		sta $36				sta 	gxzTemp0
.8696	a5 37		lda $37				lda 	gxzTemp0+1
.8698	6d 60 06	adc $0660			adc 	GXSpriteOffset+1
.869b					_GXSAFindPage:
.869b	c9 20		cmp #$20			cmp 	#$20 						; on this page
.869d	90 06		bcc $86a5			bcc 	_GXSAFoundPage
.869f	e9 20		sbc #$20			sbc 	#$20 						; forward one page
.86a1	e6 0b		inc $0b				inc 	GXEditSlot
.86a3	80 f6		bra $869b			bra 	_GXSAFindPage
.86a5					_GXSAFoundPage:
.86a5	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; physical address of page.
.86a7	85 37		sta $37				sta 	gxzTemp0+1 					; gxzTemp0 now points to the page
.86a9	a0 00		ldy #$00			ldy 	#0
.86ab					_GXSACopyLoop:
.86ab	b1 36		lda ($36),y			lda 	(gxzTemp0),y
.86ad	99 f7 05	sta $05f7,y			sta 	gxPixelBuffer,y
.86b0	c8		iny				iny
.86b1	cc 5c 06	cpy $065c			cpy 	GXSizePixels
.86b4	d0 f5		bne $86ab			bne 	_GXSACopyLoop
.86b6	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/sprite.asm

.86b7					GXSelect:
.86b7	a5 36		lda $36				lda 	gxzTemp0 					; illegal sprite #
.86b9	c9 40		cmp #$40			cmp 	#64
.86bb	b0 28		bcs $86e5			bcs 	_GXSFail
.86bd	a4 37		ldy $37				ldy 	gxzTemp0+1 					; control value.
.86bf	a9 00		lda #$00			lda  	#0 							; multiply sprite # x 8 => A
.86c1	06 36		asl $36				asl 	gxzTemp0
.86c3	06 36		asl $36				asl 	gxzTemp0
.86c5	06 36		asl $36				asl 	gxzTemp0
.86c7	2a		rol a				rol 	a
.86c8	69 d9		adc #$d9			adc 	#$D9 						; sprite area
.86ca	8d 44 06	sta $0644			sta 	GSCurrentSprite+1 			; address to GSCurrentSprite and gxzTemp
.86cd	85 37		sta $37				sta 	gxzTemp0+1
.86cf	a5 36		lda $36				lda 	gxzTemp0
.86d1	8d 43 06	sta $0643			sta 	GSCurrentSprite
.86d4	98		tya				tya 								; control value
.86d5	29 01		and #$01			and 	#1
.86d7	85 38		sta $38				sta 	gxzTemp1 					; save it handily.
.86d9	64 01		stz $01				stz 	1 							; access sprite control.
.86db	b2 36		lda ($36)			lda 	(gxzTemp0) 					; update enable bit only.
.86dd	29 fe		and #$fe			and 	#$FE
.86df	05 38		ora $38				ora 	gxzTemp1
.86e1	92 36		sta ($36)			sta 	(gxzTemp0) 					; write to control register
.86e3	18		clc				clc
.86e4	60		rts				rts
.86e5					_GXSFail:
.86e5	38		sec				sec
.86e6	60		rts				rts
.86e7					GXSelectImage:
.86e7	ad 44 06	lda $0644			lda 	GSCurrentSprite+1 			; check sprite selected
.86ea	f0 4b		beq $8737			beq 	_GXSIFail
.86ec	64 01		stz $01				stz 	1
.86ee	a5 36		lda $36				lda 	gxzTemp0 					; sprite image
.86f0	48		pha				pha
.86f1	20 5c 87	jsr $875c			jsr 	GXOpenBitmap
.86f4	68		pla				pla
.86f5	20 eb 87	jsr $87eb			jsr 	GXFindSprite
.86f8	a0 01		ldy #$01			ldy 	#1
.86fa	ad 43 06	lda $0643			lda 	GSCurrentSprite
.86fd	85 36		sta $36				sta 	gxzTemp0
.86ff	ad 44 06	lda $0644			lda 	GSCurrentSprite+1
.8702	85 37		sta $37				sta 	gxzTemp0+1
.8704	ad 5f 06	lda $065f			lda 	GXSpriteOffset
.8707	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.8709	18		clc				clc
.870a	ad 60 06	lda $0660			lda 	GXSpriteOffset+1
.870d	6d 45 06	adc $0645			adc 	GXSpriteOffsetBase
.8710	c8		iny				iny
.8711	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.8713	ad 46 06	lda $0646			lda 	GXSpriteOffsetBase+1
.8716	69 00		adc #$00			adc 	#0
.8718	c8		iny				iny
.8719	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.871b	b2 36		lda ($36)			lda 	(gxzTemp0)					; get LSB into gxzTemp1
.871d	29 01		and #$01			and 	#1
.871f	85 38		sta $38				sta 	gxzTemp1
.8721	ad 5d 06	lda $065d			lda 	GXSizeBits 					; get raw size
.8724	49 03		eor #$03			eor 	#3 							; make it right (00=32 etc.)
.8726	2a		rol a				rol 	a 							; x 2
.8727	0a		asl a				asl 	a 							; x 4
.8728	0a		asl a				asl 	a 							; x 8
.8729	0a		asl a				asl 	a 							; x 16
.872a	0d 5e 06	ora $065e			ora 	GXSpriteLUT 						; Or with LUT
.872d	0a		asl a				asl 	a 							; 1 shift
.872e	05 38		ora $38				ora 	gxzTemp1 					; Or in the enable bit
.8730	92 36		sta ($36)			sta 	(gxzTemp0) 					; and write back
.8732	20 6d 87	jsr $876d			jsr 	GXCloseBitmap
.8735	18		clc				clc
.8736	60		rts				rts
.8737					_GXSIFail:
.8737	38		sec				sec
.8738	60		rts				rts
.8739					GXMoveSprite:
.8739	ad 44 06	lda $0644			lda 	GSCurrentSprite+1 			; check sprite selected
.873c	f0 1c		beq $875a			beq 	_GXSIFail
.873e	85 37		sta $37				sta 	gxzTemp0+1
.8740	a0 04		ldy #$04			ldy 	#4
.8742	ad 43 06	lda $0643			lda 	GSCurrentSprite
.8745	85 36		sta $36				sta 	gxzTemp0
.8747	ad 31 06	lda $0631			lda 	gxX0						; copy position.
.874a	91 36		sta ($36),y			sta 	(gxzTemp0),y
.874c	c8		iny				iny
.874d	ad 32 06	lda $0632			lda 	gxX0+1
.8750	91 36		sta ($36),y			sta 	(gxzTemp0),y
.8752	c8		iny				iny
.8753	ad 33 06	lda $0633			lda 	gxY0
.8756	91 36		sta ($36),y			sta 	(gxzTemp0),y
.8758	18		clc				clc
.8759	60		rts				rts
.875a					_GXSIFail:
.875a	38		sec				sec
.875b	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./utility/access.asm

.875c					GXOpenBitmap:
.875c	78		sei				sei 								; no interrupts here
.875d	a5 00		lda $00				lda 	0 							; save original MMU Control register
.875f	8d 41 06	sta $0641			sta 	gxOriginalMMUSetting
.8762	a9 80		lda #$80			lda 	#GXMappingLUT*16+$80+GXMappingLUT
.8764	85 00		sta $00				sta 	0
.8766	a5 0b		lda $0b				lda 	GXEditSlot 				; Save the original LUT slot value
.8768	8d 40 06	sta $0640			sta 	gxOriginalLUTValue
.876b	58		cli				cli
.876c	60		rts				rts
.876d					GXCloseBitmap:
.876d	78		sei				sei
.876e	ad 40 06	lda $0640			lda 	gxOriginalLUTValue 			; restore LUT slot value
.8771	85 0b		sta $0b				sta 	GXEditSlot
.8773	ad 41 06	lda $0641			lda 	gxOriginalMMUSetting 		; restore MMU Control register
.8776	85 00		sta $00				sta 	0
.8778	58		cli				cli
.8779	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./utility/calculate.asm

.877a					GXPositionCalc:
.877a	a5 36		lda $36				lda 	gxzTemp0 					; save temp memory slot
.877c	48		pha				pha
.877d	ad 33 06	lda $0633			lda 	GXY0 						; gxzScreen = Y0
.8780	85 3c		sta $3c				sta 	gxzScreen
.8782	64 3d		stz $3d				stz 	gxzScreen+1
.8784	06 3c		asl $3c				asl 	gxzScreen 						; gxzScreen = Y0 * 4
.8786	26 3d		rol $3d				rol 	gxzScreen+1
.8788	06 3c		asl $3c				asl 	gxzScreen
.878a	26 3d		rol $3d				rol 	gxzScreen+1
.878c	18		clc				clc 								; gxzScreen = Y0 * 5, as it's still in A
.878d	65 3c		adc $3c				adc 	gxzScreen
.878f	85 3c		sta $3c				sta 	gxzScreen
.8791	90 02		bcc $8795			bcc 	_GXPCNoCarry
.8793	e6 3d		inc $3d				inc 	gxzScreen+1
.8795					_GXPCNoCarry:
.8795	06 3c		asl $3c				asl 	gxzScreen 						; now Y0 * 10. Needs to be multiplied by another
.8797	26 3d		rol $3d				rol 	gxzScreen+1 					; 32. At this point the MSB contains the offset
.8799	a5 3d		lda $3d				lda	 	gxzScreen+1 					; so save this in zTemp0 and zero it.
.879b	85 36		sta $36				sta 	gxzTemp0
.879d	64 3d		stz $3d				stz 	gxzScreen+1
.879f	a9 05		lda #$05			lda 	#5 							; now multiply by 32, this puts this in the range 0..8191
.87a1					_GXPCMultiply32:
.87a1	06 3c		asl $3c				asl 	gxzScreen
.87a3	26 3d		rol $3d				rol 	gxzScreen+1
.87a5	3a		dec a				dec 	a
.87a6	d0 f9		bne $87a1			bne 	_GXPCMultiply32
.87a8	18		clc				clc
.87a9	ad 31 06	lda $0631			lda 	GXX0 						; add X to this value, put the result in gsOffset, gxzScreen has to be on a page boundary
.87ac	65 3c		adc $3c				adc 	gxzScreen
.87ae	8d 42 06	sta $0642			sta 	gsOffset
.87b1	ad 32 06	lda $0632			lda 	GXX0+1
.87b4	65 3d		adc $3d				adc 	gxzScreen+1
.87b6	c9 20		cmp #$20			cmp 	#$20 						; has it overflowed into the next one ?
.87b8	90 04		bcc $87be			bcc 	_GXPCNoOverflow
.87ba	29 1f		and #$1f			and 	#$1F 						; fix it up
.87bc	e6 36		inc $36				inc 	gxzTemp0 					; add 1 to the page number
.87be					_GXPCNoOverflow:
.87be	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; make it the address mapped in.
.87c0	85 3d		sta $3d				sta 	gxzScreen+1
.87c2	64 3c		stz $3c				stz 	gxzScreen
.87c4	18		clc				clc
.87c5	a5 36		lda $36				lda 	gxzTemp0 					; get the page number
.87c7	6d 39 06	adc $0639			adc 	gxBasePage 					; by adding the base page
.87ca	85 0b		sta $0b				sta 	GXEditSlot 				; and map it into memory.
.87cc	68		pla				pla
.87cd	85 36		sta $36				sta 	gxzTemp0
.87cf	60		rts				rts
.87d0					GXMovePositionDown:
.87d0	18		clc				clc 								; add 320 to offset/temp+1
.87d1	ad 42 06	lda $0642			lda 	gsOffset
.87d4	69 40		adc #$40			adc 	#64
.87d6	8d 42 06	sta $0642			sta 	gsOffset
.87d9	a5 3d		lda $3d				lda 	gxzScreen+1
.87db	69 01		adc #$01			adc 	#1
.87dd	85 3d		sta $3d				sta 	gxzScreen+1
.87df	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page
.87e1	90 07		bcc $87ea			bcc 	_GXMPDExit
.87e3	38		sec				sec  								; next page
.87e4	e9 20		sbc #$20			sbc 	#$20
.87e6	85 3d		sta $3d				sta 	gxzScreen+1
.87e8	e6 0b		inc $0b				inc 	GXEditSlot
.87ea					_GXMPDExit:
.87ea	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./utility/find.asm

.87eb					GXFindSprite:
.87eb	aa		tax				tax
.87ec	ad 3a 06	lda $063a			lda 	GXSpritePage 				; access the base page of the sprite
.87ef	85 0b		sta $0b				sta 	GXEditSlot
.87f1	bd 00 61	lda $6100,x			lda 	GXMappingAddress+256,x 		; MSB
.87f4	8d 60 06	sta $0660			sta 	GXSpriteOffset+1
.87f7	bd 00 60	lda $6000,x			lda 	GXMappingAddress,x 			; LSB
.87fa	48		pha				pha 								; save twice
.87fb	48		pha				pha
.87fc	29 03		and #$03			and 	#3 							; get sprite size
.87fe	8d 5d 06	sta $065d			sta 	GXSizeBits 					; save raw (0-3)
.8801	aa		tax				tax
.8802	bd 23 88	lda $8823,x			lda 	_GXFXSSTTable,x 			; read sprite size
.8805	8d 5c 06	sta $065c			sta 	GXSizePixels 					; save (8/16/24/32)
.8808	68		pla				pla 								; get LUT
.8809	4a		lsr a				lsr		a
.880a	4a		lsr a				lsr		a
.880b	29 03		and #$03			and 	#3
.880d	8d 5e 06	sta $065e			sta 	GXSpriteLUT
.8810	68		pla				pla 								; address, neeeds to be x 4
.8811	29 f0		and #$f0			and 	#$F0
.8813	8d 5f 06	sta $065f			sta 	GXSpriteOffset
.8816	0e 5f 06	asl $065f			asl 	GXSpriteOffset
.8819	2e 60 06	rol $0660			rol 	GXSpriteOffset+1
.881c	0e 5f 06	asl $065f			asl 	GXSpriteOffset
.881f	2e 60 06	rol $0660			rol 	GXSpriteOffset+1
.8822	60		rts				rts
.8823					_GXFXSSTTable:
>8823	08 10 18 20					.byte 	8,16,24,32
.065c					GXSizePixels:
>065c							.fill 	1
.065d					GXSizeBits:
>065d							.fill 	1
.065e					GXSpriteLUT:
>065e							.fill 	1
.065f					GXSpriteOffset:
>065f							.fill 	2

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./utility/sort.asm

.8827					GXSortXY:
.8827	20 45 88	jsr $8845			jsr 	GXSortY 					; will be sorted on Y now
.882a	ad 31 06	lda $0631			lda 	gxX0 						; compare X0 v X1
.882d	cd 35 06	cmp $0635			cmp 	gxX1
.8830	ad 32 06	lda $0632			lda 	gXX0+1
.8833	ed 36 06	sbc $0636			sbc 	gXX1+1
.8836	90 0c		bcc $8844			bcc 	_GXSXYExit 					; X0 < X1 exit
.8838	a2 00		ldx #$00			ldx 	#0 							; swap them over
.883a	a0 04		ldy #$04			ldy 	#4
.883c	20 59 88	jsr $8859			jsr 	GXSwapXY
.883f	e8		inx				inx
.8840	c8		iny				iny
.8841	20 59 88	jsr $8859			jsr 	GXSwapXY
.8844					_GXSXYExit:
.8844	60		rts				rts
.8845					GXSortY:
.8845	ad 33 06	lda $0633			lda 	gxY0 						; if Y0 >= Y1
.8848	cd 37 06	cmp $0637			cmp 	gxY1
.884b	90 0b		bcc $8858			bcc 	_GXSYSorted
.884d	a2 03		ldx #$03			ldx 	#3 							; swap 3-0
.884f	a0 07		ldy #$07			ldy 	#7 							; with 4-7
.8851					_GXSwap1:
.8851	20 59 88	jsr $8859			jsr 	GXSwapXY
.8854	88		dey				dey
.8855	ca		dex				dex
.8856	10 f9		bpl $8851			bpl 	_GXSwap1
.8858					_GXSYSorted:
.8858	60		rts				rts
.8859					GXSwapXY:
.8859	bd 31 06	lda $0631,x			lda 	gxX0,x
.885c	48		pha				pha
.885d	b9 31 06	lda $0631,y			lda 	gxX0,y
.8860	9d 31 06	sta $0631,x			sta 	gxX0,x
.8863	68		pla				pla
.8864	99 31 06	sta $0631,y			sta 	gxX0,y
.8867	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Return to file: ./common/aa.system/00start.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/grtest.asm

.8868					RunDemos:
.8868					loop:
.8868	a9 00		lda #$00			lda 	#((0)*2)+(((1) >> 8) & 1)
.886a	a2 01		ldx #$01			ldx 	#((1) & $FF)
.886c	a0 00		ldy #$00			ldy 	#(0)
.886e	20 84 80	jsr $8084			jsr 	GXGraphicDraw
.8871	a9 02		lda #$02			lda 	#((1)*2)+(((1) >> 8) & 1)
.8873	a2 01		ldx #$01			ldx 	#((1) & $FF)
.8875	a0 00		ldy #$00			ldy 	#(0)
.8877	20 84 80	jsr $8084			jsr 	GXGraphicDraw
.887a	a9 04		lda #$04			lda 	#((2)*2)+((($03) >> 8) & 1)
.887c	a2 03		ldx #$03			ldx 	#(($03) & $FF)
.887e	a0 00		ldy #$00			ldy 	#(0)
.8880	20 84 80	jsr $8084			jsr 	GXGraphicDraw
.8883	a9 06		lda #$06			lda 	#((3)*2)+((($FF) >> 8) & 1)
.8885	a2 ff		ldx #$ff			ldx 	#(($FF) & $FF)
.8887	a0 00		ldy #$00			ldy 	#(0)
.8889	20 84 80	jsr $8084			jsr 	GXGraphicDraw
.888c	a9 30		lda #$30			lda 	#((24)*2)+(((130) >> 8) & 1)
.888e	a2 82		ldx #$82			ldx 	#((130) & $FF)
.8890	a0 1e		ldy #$1e			ldy 	#(30)
.8892	20 84 80	jsr $8084			jsr 	GXGraphicDraw
.8895	a9 08		lda #$08			lda 	#((4)*2)+((('Q') >> 8) & 1)
.8897	a2 51		ldx #$51			ldx 	#(('Q') & $FF)
.8899	a0 08		ldy #$08			ldy 	#(1*8)
.889b	20 84 80	jsr $8084			jsr 	GXGraphicDraw
.889e	a9 08		lda #$08			lda 	#((4)*2)+((('X') >> 8) & 1)
.88a0	a2 58		ldx #$58			ldx 	#(('X') & $FF)
.88a2	a0 08		ldy #$08			ldy 	#(1*8)
.88a4	20 84 80	jsr $8084			jsr 	GXGraphicDraw
.88a7	a9 0a		lda #$0a			lda 	#((5)*2)+(((0) >> 8) & 1)
.88a9	a2 00		ldx #$00			ldx 	#((0) & $FF)
.88ab	a0 08		ldy #$08			ldy 	#(1*8)
.88ad	20 84 80	jsr $8084			jsr 	GXGraphicDraw
.88b0	a9 0a		lda #$0a			lda 	#((5)*2)+(((1) >> 8) & 1)
.88b2	a2 01		ldx #$01			ldx 	#((1) & $FF)
.88b4	a0 08		ldy #$08			ldy 	#(1*8)
.88b6	20 84 80	jsr $8084			jsr 	GXGraphicDraw
.88b9	a9 0a		lda #$0a			lda 	#((5)*2)+(((2) >> 8) & 1)
.88bb	a2 02		ldx #$02			ldx 	#((2) & $FF)
.88bd	a0 08		ldy #$08			ldy 	#(1*8)
.88bf	20 84 80	jsr $8084			jsr 	GXGraphicDraw
.88c2	a9 20		lda #$20			lda 	#((16)*2)+(((10) >> 8) & 1)
.88c4	a2 0a		ldx #$0a			ldx 	#((10) & $FF)
.88c6	a0 0a		ldy #$0a			ldy 	#(10)
.88c8	20 84 80	jsr $8084			jsr 	GXGraphicDraw
.88cb	a9 28		lda #$28			lda 	#((20)*2)+(((100) >> 8) & 1)
.88cd	a2 64		ldx #$64			ldx 	#((100) & $FF)
.88cf	a0 64		ldy #$64			ldy 	#(100)
.88d1	20 84 80	jsr $8084			jsr 	GXGraphicDraw
.88d4	a9 0c		lda #$0c			lda 	#((6)*2)+(((3) >> 8) & 1)
.88d6	a2 03		ldx #$03			ldx 	#((3) & $FF)
.88d8	a0 01		ldy #$01			ldy 	#(1)
.88da	20 84 80	jsr $8084			jsr 	GXGraphicDraw
.88dd	a9 0e		lda #$0e			lda 	#((7)*2)+(((2) >> 8) & 1)
.88df	a2 02		ldx #$02			ldx 	#((2) & $FF)
.88e1	a0 00		ldy #$00			ldy 	#(0)
.88e3	20 84 80	jsr $8084			jsr 	GXGraphicDraw
.88e6	a9 32		lda #$32			lda 	#((25)*2)+(((200) >> 8) & 1)
.88e8	a2 c8		ldx #$c8			ldx 	#((200) & $FF)
.88ea	a0 c8		ldy #$c8			ldy 	#(200)
.88ec	20 84 80	jsr $8084			jsr 	GXGraphicDraw
.88ef	a9 0c		lda #$0c			lda 	#((6)*2)+(((4) >> 8) & 1)
.88f1	a2 04		ldx #$04			ldx 	#((4) & $FF)
.88f3	a0 01		ldy #$01			ldy 	#(1)
.88f5	20 84 80	jsr $8084			jsr 	GXGraphicDraw
.88f8	a9 0e		lda #$0e			lda 	#((7)*2)+(((1) >> 8) & 1)
.88fa	a2 01		ldx #$01			ldx 	#((1) & $FF)
.88fc	a0 00		ldy #$00			ldy 	#(0)
.88fe	20 84 80	jsr $8084			jsr 	GXGraphicDraw
.8901	a9 32		lda #$32			lda 	#((25)*2)+(((100) >> 8) & 1)
.8903	a2 64		ldx #$64			ldx 	#((100) & $FF)
.8905	a0 c8		ldy #$c8			ldy 	#(200)
.8907	20 84 80	jsr $8084			jsr 	GXGraphicDraw
.890a	a9 0c		lda #$0c			lda 	#((6)*2)+(((5) >> 8) & 1)
.890c	a2 05		ldx #$05			ldx 	#((5) & $FF)
.890e	a0 01		ldy #$01			ldy 	#(1)
.8910	20 84 80	jsr $8084			jsr 	GXGraphicDraw
.8913	a9 0e		lda #$0e			lda 	#((7)*2)+(((0) >> 8) & 1)
.8915	a2 00		ldx #$00			ldx 	#((0) & $FF)
.8917	a0 00		ldy #$00			ldy 	#(0)
.8919	20 84 80	jsr $8084			jsr 	GXGraphicDraw
.891c	a9 32		lda #$32			lda 	#((25)*2)+(((50) >> 8) & 1)
.891e	a2 32		ldx #$32			ldx 	#((50) & $FF)
.8920	a0 c8		ldy #$c8			ldy 	#(200)
.8922	20 84 80	jsr $8084			jsr 	GXGraphicDraw
.8925	60		rts				rts
.8926	20 d0 9f	jsr $9fd0	demo:	jsr 	Random32Bit
.8929	ee 3e 06	inc $063e			inc 	gxEORValue
.892c	a9 30		lda #$30			lda 	#24*2
.892e	ae 88 04	ldx $0488			ldx 	RandomSeed+0
.8931	ac 89 04	ldy $0489			ldy 	RandomSeed+1
.8934	20 84 80	jsr $8084			jsr 	GXGraphicDraw
.8937	80 ed		bra $8926			bra 	demo

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/assembler.asm

.8939					AssembleGroup1:
.8939	a9 ff		lda #$ff			lda 	#$FF
.893b	8d a5 04	sta $04a5			sta 	ModeMask 					; initialise the mode mask - all for all
.893e	80 02		bra $8942			bra 	AsmGroup12
.8940					AssembleGroup2:
.8940	a5 00		lda $00				lda 	$00
.8942					AsmGroup12:
.8942	8d a3 04	sta $04a3			sta 	IsGroup1 					; save the 'group 1' flag
.8945	68		pla				pla 								; pop the return address to access the information following.
.8946	fa		plx				plx
.8947	20 d0 89	jsr $89d0			jsr 	AccessParameters 			; get opcode and save as base
.894a	8d a4 04	sta $04a4			sta 	BaseOpcode
.894d	ad a3 04	lda $04a3			lda 	IsGroup1 					; skip if group 1 as we don't have a complex mask.
.8950	d0 08		bne $895a			bne 	_AG12HaveMask
.8952	a9 02		lda #$02			lda 	#2 							; if group 2 the second parameter is the mask
.8954	20 d8 89	jsr $89d8			jsr 	GetParameter		 		; e.g. which modes are supported for this operand
.8957	8d a5 04	sta $04a5			sta 	ModeMask
.895a					_AG12HaveMask:
.895a	20 13 8b	jsr $8b13			jsr 	TypeAndCalculateOperand 	; get zero page type
.895d	da		phx				phx 								; save found address mode
.895e	20 3c 8a	jsr $8a3c			jsr 	AssembleModeX
.8961	fa		plx				plx  								; restore address mode
.8962	b0 0b		bcs $896f			bcs 	_AG12Exit
.8964	20 70 89	jsr $8970			jsr 	PromoteToAbsolute  			; promote ZP to ABS and try that
.8967	20 3c 8a	jsr $8a3c			jsr 	AssembleModeX
.896a	b0 03		bcs $896f			bcs 	_AG12Exit
.896c	4c 0f b0	jmp $b00f			jmp 	SyntaxError 				; can't do either, so must be wrong mode/operand.
.896f					_AG12Exit:
.896f	60		rts				rts
.8970					PromoteToAbsolute:
.8970	a9 6c		lda #$6c			lda 	#AM_ABS 					; lda xx
.8972	e0 e4		cpx #$e4			cpx 	#AM_ZEROPAGE
.8974	f0 19		beq $898f			beq 	_PTADo
.8976	a9 7c		lda #$7c			lda 	#AM_ABSX 					; lda xx,X
.8978	e0 f4		cpx #$f4			cpx 	#AM_ZEROX
.897a	f0 13		beq $898f			beq 	_PTADo
.897c	a9 78		lda #$78			lda 	#AM_ABSY 					; lda xx,Y
.897e	e0 80		cpx #$80			cpx 	#AM_ZEROY
.8980	f0 0d		beq $898f			beq 	_PTADo
.8982	a9 01		lda #$01			lda 	#AM_INDABS 					; lda (xx) (jump)
.8984	e0 d1		cpx #$d1			cpx 	#AM_IND
.8986	f0 07		beq $898f			beq 	_PTADo
.8988	a9 02		lda #$02			lda 	#AM_INDABSX 				; lda (xx,x) (jump)
.898a	e0 c0		cpx #$c0			cpx 	#AM_INDX
.898c	f0 01		beq $898f			beq 	_PTADo
.898e	60		rts				rts
.898f					_PTADo:
.898f	aa		tax				tax
.8990	60		rts				rts
.8991					AssembleGroup3:
.8991	68		pla				pla 								; get parameters, which is just the opcode.
.8992	fa		plx				plx
.8993	20 d0 89	jsr $89d0			jsr 	AccessParameters 			; get and output opcode
.8996	20 e8 89	jsr $89e8			jsr 	AssemblerWriteByte
.8999	20 77 8b	jsr $8b77			jsr 	CalculateOperand 			; get a 16 bit operand
.899c	ad 08 04	lda $0408			lda 	NSMantissa0 				; calculate the offset
.899f	38		sec				sec
.89a0	ed 9e 04	sbc $049e			sbc 	AssemblerAddress
.89a3	48		pha				pha 								; LSB in A
.89a4	ad 10 04	lda $0410			lda 	NSMantissa1
.89a7	ed 9f 04	sbc $049f			sbc 	AssemblerAddress+1
.89aa	aa		tax				tax 								; MSB in X
.89ab	68		pla				pla
.89ac	18		clc				clc 								; $80 to easy check $80-$7F, plus 1 for offset error
.89ad	69 7f		adc #$7f			adc 	#$7F
.89af	90 01		bcc $89b2			bcc 	_AG3NoCarry
.89b1	e8		inx				inx
.89b2					_AG3NoCarry:
.89b2	38		sec				sec 								; fix back and write out anyways.
.89b3	e9 80		sbc #$80			sbc 	#$80
.89b5	20 e8 89	jsr $89e8			jsr 	AssemblerWriteByte
.89b8	e0 00		cpx #$00			cpx 	#0 							; was it in range
.89ba	f0 0a		beq $89c6			beq 	_AG3Exit
.89bc	ad a0 04	lda $04a0			lda 	AssemblerControl 			; are we allowing bad values ?
.89bf	29 01		and #$01			and 	#1
.89c1	f0 03		beq $89c6			beq 	_AG3Exit
.89c3	4c 14 b0	jmp $b014			jmp 	RangeError 					; no, branch is out of range
.89c6					_AG3Exit:
.89c6	60		rts				rts
.89c7					AssembleGroup4:
.89c7	68		pla				pla 								; pop address
.89c8	fa		plx				plx
.89c9	20 d0 89	jsr $89d0			jsr 	AccessParameters 			; access and get first
.89cc	20 e8 89	jsr $89e8			jsr 	AssemblerWriteByte 			; output it.
.89cf	60		rts				rts
.89d0					AccessParameters:
.89d0	8d a1 04	sta $04a1			sta 	ParamStart
.89d3	8e a2 04	stx $04a2			stx 	ParamStart+1
.89d6	a9 01		lda #$01			lda 	#1
.89d8					GetParameter:
.89d8	5a		phy				phy
.89d9	a8		tay				tay
.89da	ad a1 04	lda $04a1			lda 	ParamStart
.89dd	85 36		sta $36				sta 	zTemp0
.89df	ad a2 04	lda $04a2			lda 	ParamStart+1
.89e2	85 37		sta $37				sta 	zTemp0+1
.89e4	b1 36		lda ($36),y			lda 	(zTemp0),y
.89e6	7a		ply				ply
.89e7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/aswrite.asm

.89e8					AssemblerWriteByte:
.89e8	48		pha			pha
.89e9	ad a0 04	lda $04a0		lda 	AssemblerControl 				; check printing bytes ?
.89ec	29 02		and #$02		and 	#2
.89ee	f0 1b		beq $8a0b		beq 	_AWBNoPrint
.89f0	ad 9f 04	lda $049f		lda		AssemblerAddress+1 				; print address
.89f3	20 26 8a	jsr $8a26		jsr 	PrintHex
.89f6	ad 9e 04	lda $049e		lda		AssemblerAddress
.89f9	20 26 8a	jsr $8a26		jsr 	PrintHex
.89fc	a9 20		lda #$20		lda 	#' '
.89fe	20 b6 b1	jsr $b1b6		jsr 	EXTPrintCharacter
.8a01	68		pla			pla 									; print byte
.8a02	48		pha			pha
.8a03	20 26 8a	jsr $8a26		jsr 	PrintHex
.8a06	a9 0d		lda #$0d		lda 	#13
.8a08	20 b6 b1	jsr $b1b6		jsr 	EXTPrintCharacter
.8a0b					_AWBNoPrint:
.8a0b	ad 9e 04	lda $049e		lda		AssemblerAddress				; copy address to zTemp0
.8a0e	85 36		sta $36			sta 	zTemp0
.8a10	ad 9f 04	lda $049f		lda		AssemblerAddress+1
.8a13	f0 0e		beq $8a23		beq 	_AWBRange
.8a15	85 37		sta $37			sta 	zTemp0+1
.8a17	68		pla			pla 									; write byte out
.8a18	92 36		sta ($36)		sta 	(zTemp0)
.8a1a	ee 9e 04	inc $049e		inc 	AssemblerAddress 				; bump address
.8a1d	d0 03		bne $8a22		bne 	_AWBNoCarry
.8a1f	ee 9f 04	inc $049f		inc 	AssemblerAddress+1
.8a22					_AWBNoCarry:
.8a22	60		rts			rts
.8a23					_AWBRange:
.8a23	4c 14 b0	jmp $b014		jmp 	RangeError
.8a26					PrintHex:
.8a26	48		pha				pha
.8a27	4a		lsr a				lsr 	a
.8a28	4a		lsr a				lsr 	a
.8a29	4a		lsr a				lsr 	a
.8a2a	4a		lsr a				lsr 	a
.8a2b	20 2f 8a	jsr $8a2f			jsr 	_PrintNibble
.8a2e	68		pla				pla
.8a2f					_PrintNibble:
.8a2f	29 0f		and #$0f			and 	#15
.8a31	c9 0a		cmp #$0a			cmp 	#10
.8a33	90 02		bcc $8a37			bcc 	_NoShift
.8a35	69 06		adc #$06			adc 	#6
.8a37					_NoShift:
.8a37	69 30		adc #$30			adc 	#48
.8a39	4c b6 b1	jmp $b1b6			jmp 	EXTPrintCharacter

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/instruction.asm

.8a3c					AssembleModeX:
.8a3c	5a		phy				phy
.8a3d	ad a3 04	lda $04a3			lda 	IsGroup1
.8a40	f0 17		beq $8a59			beq 	_AMXGroup2
.8a42	8a		txa				txa 							; is it in group # 1
.8a43	29 40		and #$40			and 	#AM_ISG1
.8a45	f0 50		beq $8a97			beq 	_AMXFail 				; no, give up.
.8a47	8a		txa				txa 							; get back.
.8a48	29 1f		and #$1f			and 	#$1F 					; this is now the offset.
.8a4a	e0 e0		cpx #$e0			cpx 	#AM_IMMEDIATE 			; if not immediate, we can continue.
.8a4c	d0 22		bne $8a70			bne 	_AMXHaveInfo
.8a4e	ad a4 04	lda $04a4			lda 	BaseOpcode 				; cannot store immediate.
.8a51	c9 81		cmp #$81			cmp 	#$81
.8a53	f0 42		beq $8a97			beq 	_AMXFail
.8a55	a9 08		lda #$08			lda 	#8 						; if immediate we use offset 8.
.8a57	80 17		bra $8a70			bra 	_AMXHaveInfo 			; odd design decision there.
.8a59					_AMXGroup2:
.8a59	8a		txa				txa 							; is it in group 2 ?
.8a5a	29 20		and #$20			and 	#AM_ISG2
.8a5c	f0 39		beq $8a97			beq 	_AMXFail 				; no, give up.
.8a5e	8a		txa				txa 							; get the offset into Y
.8a5f	29 1f		and #$1f			and 	#$1F
.8a61	4a		lsr a				lsr 	a 						; make it 0-7.
.8a62	4a		lsr a				lsr  	a
.8a63	a8		tay				tay
.8a64	ad a5 04	lda $04a5			lda 	ModeMask 				; shift the modemask left so you can check it against the requested offset
.8a67					_AMXCheckOkay:
.8a67	0a		asl a				asl 	a 						; shift modemask left enough times to check legitimate.
.8a68	88		dey				dey
.8a69	10 fc		bpl $8a67			bpl 	_AMXCheckOkay
.8a6b	90 2a		bcc $8a97			bcc 	_AMXFail 				; not allowed.
.8a6d	8a		txa				txa  							; get mask back
.8a6e	29 1f		and #$1f			and 	#$1F
.8a70					_AMXHaveInfo:
.8a70	e0 00		cpx #$00			cpx 	#$00 					; does it *require* an 8 bit operand
.8a72	10 05		bpl $8a79			bpl 	_AMXAnySize 			; checking bit 7, the zero page opcode flag.
.8a74	ac 10 04	ldy $0410			ldy 	NSMantissa1 			; fail if it is outside range, e.g. the MSB is set.
.8a77	d0 1e		bne $8a97			bne 	_AMXFail
.8a79					_AMXAnySize:
.8a79	18		clc				clc 							; add offset to the base opcode
.8a7a	6d a4 04	adc $04a4			adc 	BaseOpcode
.8a7d					_AMXOutputCode:
.8a7d	20 e8 89	jsr $89e8			jsr 	AssemblerWriteByte 		; write the opcode out.
.8a80	e0 28		cpx #$28			cpx 	#AM_ACC 				; A mode (e.g. ASL A)
.8a82	f0 10		beq $8a94			beq 	_AMXExit
.8a84	ad 08 04	lda $0408			lda 	NSMantissa0 				; write LSB operand
.8a87	20 e8 89	jsr $89e8			jsr 	AssemblerWriteByte
.8a8a	e0 00		cpx #$00			cpx 	#$00 					; zeropage ?
.8a8c	30 06		bmi $8a94			bmi 	_AMXExit
.8a8e	ad 10 04	lda $0410			lda 	NSMantissa1 			; write MSB operand
.8a91	20 e8 89	jsr $89e8			jsr 	AssemblerWriteByte
.8a94					_AMXExit:
.8a94	7a		ply				ply
.8a95	38		sec				sec
.8a96	60		rts				rts
.8a97					_AMXFail:
.8a97	a0 00		ldy #$00			ldy 	#0
.8a99					_AMXCheckOddities:
.8a99	8a		txa				txa
.8a9a	d9 c2 8a	cmp $8ac2,y			cmp 	ExtraOpcode+2,y 		; match address mode
.8a9d	d0 16		bne $8ab5			bne 	_AMXCONext
.8a9f	b9 c0 8a	lda $8ac0,y			lda 	ExtraOpcode+0,y 		; do the base opcodes match
.8aa2	cd a4 04	cmp $04a4			cmp 	BaseOpcode
.8aa5	d0 0e		bne $8ab5			bne 	_AMXCONext
.8aa7	e0 00		cpx #$00			cpx 	#$00 					; requires zero page ?
.8aa9	10 05		bpl $8ab0			bpl 	_AMXCONotZero
.8aab	ad 10 04	lda $0410			lda 	NSMantissa1
.8aae	d0 05		bne $8ab5			bne 	_AMXCONext
.8ab0					_AMXCONotZero:
.8ab0	b9 c1 8a	lda $8ac1,y			lda 	ExtraOpcode+1,y 		; get new opcode
.8ab3	80 c8		bra $8a7d			bra 	_AMXOutputCode 			; and assemble it
.8ab5					_AMXCONext:
.8ab5	c8		iny				iny
.8ab6	c8		iny				iny
.8ab7	c8		iny				iny
.8ab8	b9 c0 8a	lda $8ac0,y			lda 	ExtraOpcode+0,y 		; end of table
.8abb	d0 dc		bne $8a99			bne 	_AMXCheckOddities
.8abd					_AMXCOFail:
.8abd	7a		ply				ply
.8abe	18		clc				clc
.8abf	60		rts				rts
.8ac0					ExtraOpcode:
>8ac0	40 6c 01					.byte $40,$6c,AM_INDABS 	; jmp
>8ac3	40 7c 02					.byte $40,$7C,AM_INDABSX 	; jmp
>8ac6	a2 be 78					.byte $a2,$BE,AM_ABSY 		; ldx
>8ac9	a2 b6 80					.byte $a2,$B6,AM_ZEROY 		; ldx
>8acc	82 96 80					.byte $82,$96,AM_ZEROY 		; stx
>8acf	e2 1a 28					.byte $e2,$1a,AM_ACC 		; inc
>8ad2	c2 3a 28					.byte $c2,$3a,AM_ACC 		; dec
>8ad5	20 89 e0					.byte $20,$89,AM_IMMEDIATE 	; bit
>8ad8	60 9c 6c					.byte $60,$9c,AM_ABS 		; stz
>8adb	60 9e 7c					.byte $60,$9e,AM_ABSX 		; stz
>8ade	00						.byte $00

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/label.asm

.8adf					LabelHere:
.8adf	c8		iny				iny 								; skip .
.8ae0	a2 00		ldx #$00			ldx 	#0 							; get a term
.8ae2	20 41 9d	jsr $9d41			jsr 	EvaluateTerm 				; get a term
.8ae5	ad 00 04	lda $0400			lda 	NSStatus 					; needs to be an integer reference.
.8ae8	c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.8aea	d0 24		bne $8b10			bne 	_ALType
.8aec	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy reference address to zTemp0
.8aef	85 36		sta $36				sta 	zTemp0
.8af1	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8af4	85 37		sta $37				sta 	zTemp0+1
.8af6	5a		phy				phy 								; copy address in.
.8af7	a0 01		ldy #$01			ldy 	#1
.8af9	ad 9e 04	lda $049e			lda	 	AssemblerAddress
.8afc	92 36		sta ($36)			sta 	(zTemp0)
.8afe	ad 9f 04	lda $049f			lda	 	AssemblerAddress+1
.8b01	91 36		sta ($36),y			sta 	(zTemp0),y
.8b03	c8		iny				iny
.8b04	a9 00		lda #$00			lda 	#0
.8b06	91 36		sta ($36),y			sta 	(zTemp0),y
.8b08	c8		iny				iny
.8b09	91 36		sta ($36),y			sta 	(zTemp0),y
.8b0b	c8		iny				iny
.8b0c	91 36		sta ($36),y			sta 	(zTemp0),y
.8b0e	7a		ply				ply
.8b0f	60		rts				rts
.8b10					_ALType:
.8b10	4c 19 b0	jmp $b019			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/operands.asm

.8b13					TypeAndCalculateOperand:
.8b13	b1 30		lda ($30),y			lda 	(codePtr),y
.8b15	a2 28		ldx #$28			ldx 	#AM_ACC 					; ACC if : or EOL
.8b17	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.8b19	f0 5b		beq $8b76			beq 	_TACOExit
.8b1b	c9 80		cmp #$80			cmp 	#KWC_EOL
.8b1d	f0 57		beq $8b76			beq 	_TACOExit
.8b1f	c8		iny				iny
.8b20	a2 e0		ldx #$e0			ldx 	#AM_IMMEDIATE
.8b22	c9 23		cmp #$23			cmp 	#KWD_HASH 					; if hash, then immediate - constant.
.8b24	f0 51		beq $8b77			beq 	CalculateOperand
.8b26	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; if ( then check for indirection
.8b28	f0 1f		beq $8b49			beq 	_TACOIndirect
.8b2a	88		dey				dey 								; undo get of first character
.8b2b	20 77 8b	jsr $8b77			jsr 	CalculateOperand 			; get operand
.8b2e	b1 30		lda ($30),y			lda 	(codePtr),y
.8b30	a2 e4		ldx #$e4			ldx 	#AM_ZEROPAGE 				; if not, try zero page (then absolute)
.8b32	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8b34	d0 40		bne $8b76			bne 	_TACOExit
.8b36	c8		iny				iny
.8b37	20 a0 a9	jsr $a9a0			jsr 	TACOCheckXY 				; extract X,Y or 0 (neither) from the variable.
.8b3a	a2 f4		ldx #$f4			ldx 	#AM_ZEROX 					; check for X
.8b3c	c9 58		cmp #$58			cmp 	#'X'
.8b3e	f0 36		beq $8b76			beq 	_TACOExit
.8b40	a2 80		ldx #$80			ldx 	#AM_ZEROY 					; check for Y
.8b42	c9 59		cmp #$59			cmp 	#'Y'
.8b44	f0 30		beq $8b76			beq 	_TACOExit
.8b46					_TACOSyntax:
.8b46	4c 0f b0	jmp $b00f			jmp 	SyntaxError
.8b49					_TACOIndirect:
.8b49	20 77 8b	jsr $8b77			jsr 	CalculateOperand 			; get the operand
.8b4c	b1 30		lda ($30),y			lda 	(codePtr),y
.8b4e	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if , then it must be ,X)
.8b50	f0 17		beq $8b69			beq 	_TACOIndX
.8b52	20 29 aa	jsr $aa29			jsr 	CheckRightBracket  			; otherwise must be ) or ),Y
.8b55	b1 30		lda ($30),y			lda 	(codePtr),y
.8b57	a2 d1		ldx #$d1			ldx 	#AM_IND
.8b59	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not comma then exit with (xx)
.8b5b	d0 19		bne $8b76			bne 	_TACOExit
.8b5d	c8		iny				iny
.8b5e	20 a0 a9	jsr $a9a0			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.8b61	c9 59		cmp #$59			cmp 	#'Y' 						; check Y
.8b63	d0 e1		bne $8b46			bne 	_TACOSyntax
.8b65	a2 d0		ldx #$d0			ldx 	#AM_INDY
.8b67	80 0d		bra $8b76			bra 	_TACOExit
.8b69					_TACOIndX:
.8b69	c8		iny				iny
.8b6a	20 a0 a9	jsr $a9a0			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.8b6d	c9 58		cmp #$58			cmp 	#'X' 						; check X
.8b6f	d0 d5		bne $8b46			bne 	_TACOSyntax
.8b71	20 29 aa	jsr $aa29			jsr 	CheckRightBracket			; check )
.8b74	a2 c0		ldx #$c0			ldx 	#AM_INDX
.8b76					_TACOExit:
.8b76	60		rts				rts
.8b77					CalculateOperand:
.8b77	48		pha				pha
.8b78	da		phx				phx
.8b79	a2 00		ldx #$00			ldx 	#0 							; get 16 bit integer in Slot 0
.8b7b	20 ab a1	jsr $a1ab			jsr 	Evaluate16BitInteger
.8b7e	fa		plx				plx
.8b7f	68		pla				pla
.8b80	60		rts				rts
.a9a0					TACOCheckXY:
.a9a0	b1 30		lda ($30),y			lda 	(codePtr),y
.a9a2	29 c0		and #$c0			and 	#$C0 						; check it is an identifier reference.
.a9a4	c9 40		cmp #$40			cmp 	#$40
.a9a6	d0 21		bne $a9c9			bne 	_TCXYFail
.a9a8	b1 30		lda ($30),y			lda 	(codePtr),y
.a9aa	18		clc				clc
.a9ab	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.a9ad	85 37		sta $37				sta 	zTemp0+1
.a9af	c8		iny				iny
.a9b0	b1 30		lda ($30),y			lda 	(codePtr),y
.a9b2	c8		iny				iny
.a9b3	85 36		sta $36				sta 	zTemp0
.a9b5	5a		phy				phy 								; save position
.a9b6	a0 02		ldy #$02			ldy 	#2 							; type is integer ?
.a9b8	b1 36		lda ($36),y			lda 	(zTemp0),y
.a9ba	d0 0c		bne $a9c8			bne 	_TCXYPopFail
.a9bc	a0 08		ldy #$08			ldy 	#8 							; get first character, should have bit 7 set as also last.
.a9be	b1 36		lda ($36),y			lda 	(zTemp0),y
.a9c0	c9 d8		cmp #$d8			cmp 	#'X'+$80 					; should be X or Y
.a9c2	f0 08		beq $a9cc			beq 	_TCXYFound
.a9c4	c9 d9		cmp #$d9			cmp 	#'Y'+$80
.a9c6	f0 04		beq $a9cc			beq 	_TCXYFound
.a9c8					_TCXYPopFail:
.a9c8	7a		ply				ply
.a9c9					_TCXYFail:
.a9c9	a9 00		lda #$00			lda 	#0
.a9cb	60		rts				rts
.a9cc					_TCXYFound:
.a9cc	7a		ply				ply 								; restore position
.a9cd	29 7f		and #$7f			and 	#$7F 						; throw bit 7
.a9cf	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/editor.asm

.8b81					EditProgramCode:
.8b81	ad a7 04	lda $04a7			lda 	TokenLineNumber 			; find the line.
.8b84	ae a8 04	ldx $04a8			ldx 	TokenLineNumber+1
.8b87	20 7e a2	jsr $a27e			jsr 	MemorySearch
.8b8a	90 05		bcc $8b91			bcc 	_EPCNoDelete 				; reached the end don't delete
.8b8c	d0 03		bne $8b91			bne 	_EPCNoDelete 				; found slot but didn't match, no delete
.8b8e	20 fa b1	jsr $b1fa			jsr 	MemoryDeleteLine 			; delete the line
.8b91					_EPCNoDelete:
.8b91	ad a9 04	lda $04a9			lda 	TokenBuffer 				; buffer empty
.8b94	c9 80		cmp #$80			cmp 	#KWC_EOL
.8b96	f0 0d		beq $8ba5			beq 	_EPCNoInsert
.8b98	ad a7 04	lda $04a7			lda 	TokenLineNumber 			; find the line - it cannot exist.
.8b9b	ae a8 04	ldx $04a8			ldx 	TokenLineNumber+1 			; so this can't fail, it returns some point in the code.
.8b9e	20 7e a2	jsr $a27e			jsr 	MemorySearch
.8ba1	18		clc				clc 								; insert at this point.
.8ba2	20 31 b2	jsr $b231			jsr 	MemoryInsertLine 			; insert the line
.8ba5					_EPCNoInsert:
.8ba5	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/warmstart.asm

.8ba6					WarmStart:
.8ba6	a2 ff		ldx #$ff			ldx 	#$FF
.8ba8	9a		txs				txs
.8ba9	20 cc b1	jsr $b1cc			jsr 	EXTInputLine 				; get line to lineBuffer
.8bac	20 21 a7	jsr $a721			jsr 	TokeniseLine 				; tokenise the line
.8baf	ad a7 04	lda $04a7			lda 	TokenLineNumber 			; line number ?
.8bb2	0d a8 04	ora $04a8			ora 	TokenLineNumber+1
.8bb5	d0 17		bne $8bce			bne 	_WSEditCode 				; if so,edit code.
.8bb7	9c a6 04	stz $04a6			stz 	TokenOffset 				; zero offset, meaning it only runs one line.
.8bba	a9 a6		lda #$a6			lda 	#((TokenOffset) & $FF)
.8bbc	85 30		sta $30				sta 	codePtr
.8bbe	a9 04		lda #$04			lda 	#((TokenOffset) >> 8)
.8bc0	85 31		sta $31				sta 	codePtr+1
.8bc2	ad a9 04	lda $04a9			lda 	TokenBuffer 				; nothing to run
.8bc5	c9 80		cmp #$80			cmp 	#KWC_EOL
.8bc7	f0 dd		beq $8ba6			beq 	WarmStart
.8bc9	20 07 92	jsr $9207			jsr 	RUNCodePointerLine 			; execute that line.
.8bcc	80 d8		bra $8ba6			bra 	WarmStart
.8bce					_WSEditCode:
.8bce	20 81 8b	jsr $8b81			jsr 	EditProgramCode
.8bd1	20 3f 8c	jsr $8c3f			jsr 	ClearCommand
.8bd4	80 d0		bra $8ba6			bra 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assemble.asm

.8bd6					AssembleCommand:
.8bd6	a2 00		ldx #$00			ldx 	#0
.8bd8	20 ab a1	jsr $a1ab			jsr 	Evaluate16BitInteger 		; start address
.8bdb	ad 08 04	lda $0408			lda 	NSMantissa0
.8bde	8d 9e 04	sta $049e			sta 	AssemblerAddress
.8be1	ad 10 04	lda $0410			lda 	NSMantissa1
.8be4	8d 9f 04	sta $049f			sta 	AssemblerAddress+1
.8be7	20 31 aa	jsr $aa31			jsr 	CheckComma
.8bea	20 b7 a1	jsr $a1b7			jsr 	Evaluate8BitInteger 		; options
.8bed	ad 08 04	lda $0408			lda 	NSMantissa0
.8bf0	8d a0 04	sta $04a0			sta 	AssemblerControl
.8bf3	60		rts				rts
.8bf4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assert.asm

.8bf5					AssertCommand:
.8bf5	a2 00		ldx #$00			ldx 	#0
.8bf7	20 96 a1	jsr $a196			jsr 	EvaluateInteger 			; the assert test
.8bfa	20 4f a2	jsr $a24f			jsr 	NSMIsZero 					; exit if result is non zero.
.8bfd	d0 05		bne $8c04			bne 	_ACExit
.8bff	a9 0a		lda #$0a		lda	#10
.8c01	4c 67 96	jmp $9667		jmp	ErrorHandler
.8c04					_ACExit:
.8c04	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/call.asm

.8c05					CallCommand:
.8c05	a2 00		ldx #$00			ldx 	#0
.8c07	20 ab a1	jsr $a1ab			jsr 	Evaluate16BitInteger
.8c0a					_CCClear
.8c0a	e8		inx				inx  								; clear 1,2 and 3 (for A X Y)
.8c0b	20 1f a2	jsr $a21f			jsr 	NSMSetZero
.8c0e	e0 04		cpx #$04			cpx 	#4
.8c10	d0 f8		bne $8c0a			bne 	_CCClear
.8c12	a2 00		ldx #$00			ldx 	#0 							; and keep trying
.8c14					_CCCParam:
.8c14	b1 30		lda ($30),y			lda 	(codePtr),y
.8c16	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8c18	d0 09		bne $8c23			bne 	_CCCRun6502
.8c1a	c8		iny				iny 								; skip comma
.8c1b	e8		inx				inx	 								; next level
.8c1c	20 b7 a1	jsr $a1b7			jsr 	Evaluate8BitInteger 		; get A/X/Y
.8c1f	e0 03		cpx #$03			cpx 	#3
.8c21	90 f1		bcc $8c14			bcc 	_CCCParam 					; done all 3 ?
.8c23					_CCCRun6502:
.8c23	5a		phy				phy 								; save position
.8c24	ad 10 04	lda $0410			lda 	NSMantissa1 				; put address in zTemp0
.8c27	85 37		sta $37				sta 	zTemp0+1
.8c29	ad 08 04	lda $0408			lda 	NSMantissa0
.8c2c	85 36		sta $36				sta 	zTemp0
.8c2e	ad 09 04	lda $0409			lda 	NSMantissa0+1 				; get registers
.8c31	ae 0a 04	ldx $040a			ldx 	NSMantissa0+2
.8c34	ac 0b 04	ldy $040b			ldy 	NSMantissa0+3
.8c37	20 3c 8c	jsr $8c3c			jsr 	_CCCZTemp0 					; call zTemp0
.8c3a	7a		ply				ply 								; restore position and exit
.8c3b	60		rts				rts
.8c3c					_CCCZTemp0:
.8c3c	6c 36 00	jmp ($0036)			jmp 	(zTemp0)

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/clear.asm

.8c3f					ClearCommand:
.8c3f	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.8c41	85 36		sta $36				sta 	0+zTemp0
.8c43	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.8c45	85 37		sta $37				sta 	1+zTemp0
.8c47					_ClearZeroLoop:
.8c47	b2 36		lda ($36)			lda 	(zTemp0) 					; end of variables
.8c49	f0 24		beq $8c6f			beq 	_ClearZeroEnd
.8c4b	a0 03		ldy #$03			ldy 	#3 							; erase the variables
.8c4d	a9 00		lda #$00			lda 	#0
.8c4f					_ClearOneVariable:
.8c4f	91 36		sta ($36),y			sta 	(zTemp0),y
.8c51	c8		iny				iny
.8c52	c0 08		cpy #$08			cpy 	#8
.8c54	d0 f9		bne $8c4f			bne 	_ClearOneVariable
.8c56	a0 02		ldy #$02			ldy 	#2 							; has it been marked procedure
.8c58	b1 36		lda ($36),y			lda 	(zTemp0),y
.8c5a	c9 18		cmp #$18			cmp 	#NSTProcedure
.8c5c	d0 04		bne $8c62			bne 	_ClearNotProcedure
.8c5e	a9 04		lda #$04			lda 	#NSTInteger+NSBIsArray 		; set it back to an integer array
.8c60	91 36		sta ($36),y			sta 	(zTemp0),y
.8c62					_ClearNotProcedure:
.8c62	18		clc				clc 								; go to the next variable
.8c63	b2 36		lda ($36)			lda 	(zTemp0)
.8c65	65 36		adc $36				adc 	zTemp0
.8c67	85 36		sta $36				sta 	zTemp0
.8c69	90 dc		bcc $8c47			bcc 	_ClearZeroLoop
.8c6b	e6 37		inc $37				inc 	zTemp0+1
.8c6d	80 d8		bra $8c47			bra 	_ClearZeroLoop
.8c6f					_ClearZeroEnd:
.8c6f	18		clc				clc
.8c70	a5 36		lda $36				lda 	zTemp0
.8c72	69 01		adc #$01			adc 	#1
.8c74	8d 8c 04	sta $048c			sta 	lowMemPtr
.8c77	a5 37		lda $37				lda 	zTemp0+1
.8c79	69 00		adc #$00			adc 	#0
.8c7b	8d 8d 04	sta $048d			sta 	lowMemPtr+1
.8c7e	20 38 a3	jsr $a338			jsr 	StackReset
.8c81	20 14 b3	jsr $b314			jsr 	StringSystemInitialise
.8c84	20 87 95	jsr $9587			jsr 	ProcedureScan
.8c87	20 c3 91	jsr $91c3			jsr 	Command_Restore
.8c8a	9c 9e 04	stz $049e			stz 	AssemblerAddress
.8c8d	9c 9f 04	stz $049f			stz 	AssemblerAddress+1
.8c90	9c a0 04	stz $04a0			stz 	AssemblerControl
.8c93	20 2e 9f	jsr $9f2e			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.8c96	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/data.asm

.8c97					Command_Data:
.8c97	a9 3a		lda #$3a			lda 	#KWD_COLON 					; advance to colon/EOL
.8c99	a2 80		ldx #$80			ldx 	#KWC_EOL
.8c9b	20 d9 95	jsr $95d9			jsr 	ScanForward
.8c9e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/dim.asm

.8c9f					DimCommand:
.8c9f	b1 30		lda ($30),y			lda 	(codePtr),y
.8ca1	29 c0		and #$c0			and 	#$C0
.8ca3	c9 40		cmp #$40			cmp 	#$40
.8ca5	d0 7a		bne $8d21			bne 	_DCSyntax
.8ca7	b1 30		lda ($30),y			lda 	(codePtr),y
.8ca9	18		clc				clc
.8caa	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8cac	85 3f		sta $3f				sta 	zaTemp+1
.8cae	c8		iny				iny
.8caf	b1 30		lda ($30),y			lda 	(codePtr),y
.8cb1	c8		iny				iny
.8cb2	85 3e		sta $3e				sta 	zaTemp
.8cb4	5a		phy				phy
.8cb5	a0 02		ldy #$02			ldy 	#2 						; read type byte
.8cb7	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8cb9	29 18		and #$18			and 	#NSBTypeMask 			; check it's not a procedure
.8cbb	c9 18		cmp #$18			cmp 	#NSTProcedure
.8cbd	f0 62		beq $8d21			beq 	_DCSyntax
.8cbf	b1 3e		lda ($3e),y			lda 	(zaTemp),y 				; check it's an array
.8cc1	29 04		and #$04			and 	#NSBIsArray
.8cc3	f0 64		beq $8d29			beq 	_DCType
.8cc5	a0 04		ldy #$04			ldy 	#4 						; check not already defined
.8cc7	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8cc9	d0 59		bne $8d24			bne 	_DCRedefine
.8ccb	7a		ply				ply
.8ccc	20 2c 8d	jsr $8d2c			jsr 	_DCGetSize 				; get array size, check it.
.8ccf	5a		phy				phy
.8cd0	a0 05		ldy #$05			ldy 	#5 						; store in first array size slot
.8cd2	91 3e		sta ($3e),y			sta 	(zaTemp),y 				; second will be zero.
.8cd4	7a		ply				ply 							; is there a second (e.g. ,x)
.8cd5	b1 30		lda ($30),y			lda 	(codePtr),y
.8cd7	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8cd9	d0 0a		bne $8ce5			bne 	_DCOneDimension
.8cdb	c8		iny				iny 							; skip comma
.8cdc	20 2c 8d	jsr $8d2c			jsr 	_DCGetSize 				; get 2nd array size
.8cdf	5a		phy				phy
.8ce0	a0 06		ldy #$06			ldy 	#6 						; store in 2nd array size
.8ce2	91 3e		sta ($3e),y			sta 	(zaTemp),y
.8ce4	7a		ply				ply
.8ce5					_DCOneDimension:
.8ce5	5a		phy				phy 							; save position
.8ce6	a0 05		ldy #$05			ldy 	#5 						; dimensions + 1 in AX (as zero based)
.8ce8	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8cea	aa		tax				tax
.8ceb	c8		iny				iny
.8cec	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8cee	e8		inx				inx 							; bump them.
.8cef	1a		inc a				inc 	a
.8cf0	20 ab ae	jsr $aeab			jsr 	Multiply8x8 			; work out the total number of elements -> zTemp0
.8cf3	a5 37		lda $37				lda 	zTemp0+1 				; don't allow more than 8192 elements whatever
.8cf5	29 e0		and #$e0			and 	#$E0
.8cf7	d0 23		bne $8d1c			bne 	_DCSize
.8cf9	a0 02		ldy #$02			ldy 	#2 						; get base type
.8cfb	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8cfd	20 3a 8d	jsr $8d3a			jsr 	ScaleByBaseType 		; scale by base type
.8d00	a5 36		lda $36				lda 	zTemp0
.8d02	a6 37		ldx $37				ldx 	zTemp0+1
.8d04	20 f0 9e	jsr $9ef0			jsr 	AllocateXABytes 		; allocate memory
.8d07	a0 03		ldy #$03			ldy 	#3 						; copy into the address.
.8d09	91 3e		sta ($3e),y			sta 	(zaTemp),y
.8d0b	c8		iny				iny
.8d0c	8a		txa				txa
.8d0d	91 3e		sta ($3e),y			sta 	(zaTemp),y
.8d0f	7a		ply				ply 							; get position back
.8d10	20 29 aa	jsr $aa29			jsr 	CheckRightBracket 		; check )
.8d13	b1 30		lda ($30),y			lda 	(codePtr),y
.8d15	c8		iny				iny 							; consume in case
.8d16	c9 2c		cmp #$2c			cmp 	#KWD_COMMA		 		; if so do another DIM.
.8d18	f0 85		beq $8c9f			beq 	DimCommand
.8d1a	88		dey				dey 							; undo consume
.8d1b	60		rts				rts
.8d1c					_DCSize:
.8d1c	a9 16		lda #$16		lda	#22
.8d1e	4c 67 96	jmp $9667		jmp	ErrorHandler
.8d21					_DCSyntax:
.8d21	4c 0f b0	jmp $b00f			jmp 	SyntaxError
.8d24					_DCRedefine:
.8d24	a9 15		lda #$15		lda	#21
.8d26	4c 67 96	jmp $9667		jmp	ErrorHandler
.8d29					_DCType:
.8d29	4c 19 b0	jmp $b019			jmp 	TypeError
.8d2c					_DCGetSize:
.8d2c	a2 00		ldx #$00			ldx 	#0 						; get first index.
.8d2e	20 b7 a1	jsr $a1b7			jsr 	Evaluate8BitInteger 	; get array dimension
.8d31	c9 00		cmp #$00			cmp 	#0 						; must be 1-254
.8d33	f0 e7		beq $8d1c			beq 	_DCSize
.8d35	c9 fe		cmp #$fe			cmp 	#254
.8d37	f0 e3		beq $8d1c			beq 	_DCSize
.8d39	60		rts				rts
.8d3a					ScaleByBaseType:
.8d3a	29 10		and #$10			and 	#NSBIsString 			; is it string
.8d3c	d0 19		bne $8d57			bne 	_SBBTString
.8d3e	a5 37		lda $37				lda 	zTemp0+1 				; push value on stack
.8d40	48		pha				pha
.8d41	a5 36		lda $36				lda 	zTemp0
.8d43	48		pha				pha
.8d44	06 36		asl $36				asl 	zTemp0 					; x 2
.8d46	26 37		rol $37				rol 	zTemp0+1
.8d48	06 36		asl $36				asl 	zTemp0 					; x 4
.8d4a	26 37		rol $37				rol 	zTemp0+1
.8d4c	68		pla				pla 							; add stacked value = x 5
.8d4d	65 36		adc $36				adc 	zTemp0
.8d4f	85 36		sta $36				sta 	zTemp0
.8d51	68		pla				pla
.8d52	65 37		adc $37				adc 	zTemp0+1
.8d54	85 37		sta $37				sta 	zTemp0+1
.8d56	60		rts				rts
.8d57					_SBBTString:
.8d57	06 36		asl $36				asl 	zTemp0
.8d59	26 37		rol $37				rol 	zTemp0+1
.8d5b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/end.asm

.8d5c					EndCommand:
.8d5c	4c a6 8b	jmp $8ba6			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/for.asm

.8d5f					ForCommand:
.8d5f	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; allocate 18 bytes on the return stack.
.8d61	20 d3 a2	jsr $a2d3			jsr 	StackOpen
.8d64	a2 00		ldx #$00			ldx 	#0
.8d66	20 41 9d	jsr $9d41			jsr 	EvaluateTerm
.8d69	bd 00 04	lda $0400,x			lda 	NSStatus,x
.8d6c	c9 20		cmp #$20			cmp 	#NSBIsReference+NSTInteger 	; do we have an integer 4 byte reference.
.8d6e	d0 49		bne $8db9			bne		_FCError
.8d70	a9 3d		lda #$3d			lda 	#KWD_EQUAL 					; =
.8d72	20 39 aa	jsr $aa39			jsr 	CheckNextA
.8d75	e8		inx				inx
.8d76	20 96 a1	jsr $a196			jsr 	EvaluateInteger 			; <from> in +1
.8d79	b1 30		lda ($30),y			lda 	(codePtr),y
.8d7b	c8		iny				iny 								; consume it
.8d7c	48		pha				pha 								; save on stack for later
.8d7d	c9 ad		cmp #$ad			cmp 	#KWD_DOWNTO
.8d7f	f0 04		beq $8d85			beq 	_FCNoSyntax
.8d81	c9 c2		cmp #$c2			cmp 	#KWD_TO
.8d83	d0 37		bne $8dbc			bne 	_FCSyntaxError
.8d85					_FCNoSyntax:
.8d85	e8		inx				inx
.8d86	20 96 a1	jsr $a196			jsr 	EvaluateInteger
.8d89	20 17 a3	jsr $a317			jsr 	STKSaveCodePosition 		; save loop back position
.8d8c	68		pla				pla 								; restore DOWNTO or TO
.8d8d	5a		phy				phy 								; save Y on the stack
.8d8e	49 ad		eor #$ad			eor 	#KWD_DOWNTO 				; 0 if DOWNTO, #0 if TO
.8d90	f0 02		beq $8d94			beq 	_FCNotDownTo
.8d92	a9 02		lda #$02			lda 	#2
.8d94					_FCNotDownTo:
.8d94	3a		dec a				dec 	a 							; 255 if DOWNTO, 1 if TO
.8d95	a0 10		ldy #$10			ldy 	#16
.8d97	91 34		sta ($34),y			sta 	(basicStack),y 				; copy that out to the Basic Stack.
.8d99	a0 06		ldy #$06			ldy 	#6
.8d9b	ad 08 04	lda $0408			lda 	NSMantissa0
.8d9e	91 34		sta ($34),y			sta 	(basicStack),y
.8da0	ad 10 04	lda $0410			lda 	NSMantissa1
.8da3	c8		iny				iny
.8da4	91 34		sta ($34),y			sta 	(basicStack),y
.8da6	a0 08		ldy #$08			ldy 	#8 							; set initial index value
.8da8	a2 01		ldx #$01			ldx 	#1
.8daa	20 bf 8d	jsr $8dbf			jsr 	FCIntegerToStack
.8dad	a0 0c		ldy #$0c			ldy 	#12 						; set the terminal value
.8daf	a2 02		ldx #$02			ldx 	#2
.8db1	20 bf 8d	jsr $8dbf			jsr 	FCIntegerToStack
.8db4	20 df 8d	jsr $8ddf			jsr 	CopyIndexToReference
.8db7	7a		ply				ply 								; restore position
.8db8	60		rts				rts
.8db9					_FCError:
.8db9	4c 19 b0	jmp $b019			jmp 	TypeError
.8dbc					_FCSyntaxError:
.8dbc	4c 0f b0	jmp $b00f			jmp 	SyntaxError
.8dbf					FCIntegerToStack:
.8dbf	3c 00 04	bit $0400,x			bit 	NSStatus,x 					; is the value negative
.8dc2	10 03		bpl $8dc7			bpl	 	_FCNotNegative
.8dc4	20 d4 a1	jsr $a1d4			jsr 	NSMNegateMantissa 			; if so 2's complement the mantissa
.8dc7					_FCNotNegative:
.8dc7	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy out to the basic stack
.8dca	91 34		sta ($34),y			sta 	(basicStack),y
.8dcc	c8		iny				iny
.8dcd	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8dd0	91 34		sta ($34),y			sta 	(basicStack),y
.8dd2	c8		iny				iny
.8dd3	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.8dd6	91 34		sta ($34),y			sta 	(basicStack),y
.8dd8	c8		iny				iny
.8dd9	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.8ddc	91 34		sta ($34),y			sta 	(basicStack),y
.8dde	60		rts				rts
.8ddf					CopyIndexToReference:
.8ddf	5a		phy				phy
.8de0	a0 06		ldy #$06			ldy 	#6 							; copy address-8 to write to zTemp0
.8de2	38		sec				sec 								; (because we copy from offset 8)
.8de3	b1 34		lda ($34),y			lda 	(basicStack),y
.8de5	e9 08		sbc #$08			sbc 	#8
.8de7	85 36		sta $36				sta 	zTemp0
.8de9	c8		iny				iny
.8dea	b1 34		lda ($34),y			lda 	(basicStack),y
.8dec	e9 00		sbc #$00			sbc 	#0
.8dee	85 37		sta $37				sta 	zTemp0+1
.8df0	a2 04		ldx #$04			ldx 	#4 							; this is the copy counter/
.8df2	a0 0b		ldy #$0b			ldy 	#8+3 		 				; the MSB of the mantissa
.8df4	b1 34		lda ($34),y			lda 	(basicStack),y
.8df6	0a		asl a				asl 	a 							; into carry
.8df7	a0 08		ldy #$08			ldy 	#8 							; where to copy from.
.8df9	90 14		bcc $8e0f			bcc 	_CITRNormal
.8dfb	38		sec				sec
.8dfc					_CITRNegative:
.8dfc	a9 00		lda #$00			lda 	#0
.8dfe	f1 34		sbc ($34),y			sbc 	(basicStack),y
.8e00	91 36		sta ($36),y			sta 	(zTemp0),y
.8e02	c8		iny				iny
.8e03	ca		dex				dex
.8e04	d0 f6		bne $8dfc			bne 	_CITRNegative
.8e06	88		dey				dey 								; look at MSB of mantissa
.8e07	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set the MSB as negative packed.
.8e09	09 80		ora #$80			ora 	#$80
.8e0b	91 36		sta ($36),y			sta 	(zTemp0),y
.8e0d	7a		ply				ply
.8e0e	60		rts				rts
.8e0f					_CITRNormal:
.8e0f	b1 34		lda ($34),y			lda 	(basicStack),y 				; copy without negation.
.8e11	91 36		sta ($36),y			sta 	(zTemp0),y
.8e13	c8		iny				iny
.8e14	ca		dex				dex
.8e15	d0 f8		bne $8e0f			bne 	_CITRNormal
.8e17	7a		ply				ply 								; and exit.
.8e18	60		rts				rts
.8e19					NextCommand:
.8e19	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; check FOR is TOS
.8e1b	a2 11		ldx #$11			ldx 	#ERRID_FOR 					; this error
.8e1d	20 ff a2	jsr $a2ff			jsr 	StackCheckFrame
.8e20	5a		phy				phy
.8e21	a0 10		ldy #$10			ldy 	#16 						; get the step count
.8e23	b1 34		lda ($34),y			lda 	(basicStack),y
.8e25	85 36		sta $36				sta 	zTemp0 						; this is the sign extend
.8e27	30 02		bmi $8e2b			bmi 	_NCStepNeg
.8e29	64 36		stz $36				stz 	zTemp0 						; which is 0 or 255
.8e2b					_NCStepNeg:
.8e2b	a0 08		ldy #$08			ldy 	#8 							; offset to bump
.8e2d	a2 04		ldx #$04			ldx 	#4 							; count to bump
.8e2f	18		clc				clc
.8e30					_NCBump:
.8e30	71 34		adc ($34),y			adc 	(basicStack),y 				; add it
.8e32	91 34		sta ($34),y			sta 	(basicStack),y
.8e34	a5 36		lda $36				lda 	zTemp0 						; get sign extend for next time.
.8e36	c8		iny				iny 								; next byte
.8e37	ca		dex				dex 								; do four times
.8e38	d0 f6		bne $8e30			bne 	_NCBump
.8e3a	20 df 8d	jsr $8ddf			jsr		CopyIndexToReference		; copy it to the reference variable.
.8e3d	a0 10		ldy #$10			ldy 	#16 						; get step count again
.8e3f	b1 34		lda ($34),y			lda 	(basicStack),y
.8e41	0a		asl a				asl 	a 							; sign bit to carry
.8e42	a9 0c		lda #$0c			lda 	#12 						; offset of LHS = terminal offset
.8e44	85 38		sta $38				sta 	zTemp1
.8e46	90 02		bcc $8e4a			bcc 	_NCCompRev 					; use if step is +ve
.8e48	a9 08		lda #$08			lda 	#8 							; now the LHS = index value
.8e4a					_NCCompRev:
.8e4a	85 38		sta $38				sta 	zTemp1 						; so zTemp0 is the index for LHS
.8e4c	49 04		eor #$04			eor 	#(8^12) 					; and zTemp0+1 is the index for RHS
.8e4e	85 39		sta $39				sta 	zTemp1+1
.8e50	a2 04		ldx #$04			ldx 	#4 							; bytes to compare
.8e52	38		sec				sec
.8e53					_NCCompare:
.8e53	a4 38		ldy $38				ldy 	zTemp1 						; do compare using the two indices
.8e55	b1 34		lda ($34),y			lda 	(basicStack),y
.8e57	a4 39		ldy $39				ldy 	zTemp1+1
.8e59	f1 34		sbc ($34),y			sbc 	(basicStack),y
.8e5b	e6 38		inc $38				inc 	zTemp1 						; bump the indices (inc,dex do not change C or V)
.8e5d	e6 39		inc $39				inc 	zTemp1+1
.8e5f	ca		dex				dex 								; do it 4 times.
.8e60	d0 f1		bne $8e53			bne 	_NCCompare
.8e62	50 02		bvc $8e66			bvc 	_NCNoOverflow 				; convert to signed comparison
.8e64	49 80		eor #$80			eor 	#$80
.8e66					_NCNoOverflow:
.8e66	7a		ply				ply 								; restore Y position
.8e67	0a		asl a				asl 	a 							; is bit 7 set.
.8e68	90 04		bcc $8e6e			bcc 	_NCLoopback 				; if no , >= so loop back
.8e6a	20 f1 a2	jsr $a2f1			jsr 	StackClose 					; exit the loop
.8e6d	60		rts				rts
.8e6e					_NCLoopBack:
.8e6e	20 28 a3	jsr $a328			jsr 	STKLoadCodePosition 		; loop back
.8e71	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/commands/gfx.asm

.8e72					GfxCommand:
.8e72	a2 00		ldx #$00			ldx 	#0
.8e74	20 b7 a1	jsr $a1b7			jsr 	Evaluate8BitInteger 		; command
.8e77	20 31 aa	jsr $aa31			jsr 	CheckComma
.8e7a	e8		inx				inx
.8e7b	20 ab a1	jsr $a1ab			jsr 	Evaluate16BitInteger 		; X
.8e7e	20 31 aa	jsr $aa31			jsr 	CheckComma
.8e81	e8		inx				inx
.8e82	20 b7 a1	jsr $a1b7			jsr 	Evaluate8BitInteger 		; Y
.8e85	ad 11 04	lda $0411			lda 	NSMantissa1+1  				; shift bit 0 of X into CS, should now be zero
.8e88	4a		lsr a				lsr 	a
.8e89	d0 14		bne $8e9f			bne 	_GfxError
.8e8b	2e 08 04	rol $0408			rol 	NSMantissa0 				; rotate into command
.8e8e	b0 0f		bcs $8e9f			bcs 	_GfxError 					; bit 7 should have been zero
.8e90	5a		phy				phy 								; save pos
.8e91	ad 08 04	lda $0408			lda 	NSMantissa0 				; do the command
.8e94	ae 09 04	ldx $0409			ldx 	NSMantissa0+1
.8e97	ac 0a 04	ldy $040a			ldy 	NSMantissa0+2
.8e9a	20 84 80	jsr $8084			jsr 	GXGraphicDraw
.8e9d	7a		ply				ply 								; restore pos and exit.
.8e9e	60		rts				rts
.8e9f					_GfxError:
.8e9f	4c 14 b0	jmp $b014			jmp 	RangeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/gosub.asm

.8ea2					Command_GOSUB:
.8ea2	a2 00		ldx #$00			ldx 	#0
.8ea4	20 ab a1	jsr $a1ab			jsr 	Evaluate16BitInteger 		; line number in Stack.0
.8ea7	a9 e3		lda #$e3			lda 	#STK_GOSUB+3
.8ea9	20 d3 a2	jsr $a2d3			jsr 	StackOpen 					; create frame
.8eac	20 17 a3	jsr $a317			jsr 	STKSaveCodePosition 		; save current position
.8eaf	4c c5 8e	jmp $8ec5			jmp 	GotoStackX
.8eb2					Command_RETURN:
.8eb2	a9 e0		lda #$e0			lda 	#STK_GOSUB 					; check TOS is this
.8eb4	a2 0e		ldx #$0e			ldx 	#ERRID_GOSUB 				; this error
.8eb6	20 ff a2	jsr $a2ff			jsr 	StackCheckFrame
.8eb9	20 28 a3	jsr $a328			jsr 	STKLoadCodePosition 		; restore code position
.8ebc	20 f1 a2	jsr $a2f1			jsr 	StackClose
.8ebf	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/goto.asm

.8ec0					GotoCommand:
.8ec0	a2 00		ldx #$00			ldx 	#0 							; GOTO where
.8ec2	20 ab a1	jsr $a1ab			jsr 	Evaluate16BitInteger
.8ec5					GotoStackX:
.8ec5	bd 10 04	lda $0410,x			lda  	NSMantissa1,x 				; put line # in XA. I'll keep this even though
.8ec8	48		pha				pha 								; it is slightly inefficient, just in cases.
.8ec9	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.8ecc	fa		plx				plx
.8ecd	20 7e a2	jsr $a27e			jsr 	MemorySearch 				; transfer to line number AX.
.8ed0	90 05		bcc $8ed7			bcc 	_GotoError 					; not found, off end.
.8ed2	d0 03		bne $8ed7			bne 	_GotoError 					; not found exactly
.8ed4	4c 00 92	jmp $9200			jmp 	RunNewLine 					; and go straight to new line code.
.8ed7					_GotoError:
.8ed7	a9 0d		lda #$0d		lda	#13
.8ed9	4c 67 96	jmp $9667		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/if.asm

.8edc					IfCommand:
.8edc	a2 00		ldx #$00			ldx 	#0 							; If what.
.8ede	20 73 a1	jsr $a173			jsr 	EvaluateNumber
.8ee1	b1 30		lda ($30),y			lda 	(codePtr),y
.8ee3	c9 a3		cmp #$a3			cmp 	#KWD_THEN  					; could be THEN <stuff> or GOTO
.8ee5	d0 0a		bne $8ef1			bne 	_IFStructured
.8ee7	c8		iny				iny 								; consume THEN
.8ee8	20 4f a2	jsr $a24f			jsr 	NSMIsZero 					; is it zero
.8eeb	f0 01		beq $8eee			beq 	_IfFail 					; if fail, go to next line
.8eed	60		rts				rts 								; if THEN just continue
.8eee					_IfFail:
.8eee	4c 65 92	jmp $9265			jmp 	EOLCommand
.8ef1					_IfStructured:
.8ef1	20 4f a2	jsr $a24f			jsr 	NSMIsZero 					; is it zero
.8ef4	d0 07		bne $8efd			bne 	_IfExit 					; if not, then continue normally.
.8ef6	a9 ae		lda #$ae			lda 	#KWD_ELSE 					; look for else/endif
.8ef8	a2 a0		ldx #$a0			ldx 	#KWD_ENDIF
.8efa	20 d9 95	jsr $95d9			jsr 	ScanForward 				; and run from there/
.8efd					_IfExit:
.8efd	60		rts				rts
.8efe					ElseCode:
.8efe	a9 a0		lda #$a0			lda 	#KWD_ENDIF 					; else is only run after the if clause succeeds
.8f00	aa		tax				tax 								; so just go to the structure exit
.8f01	20 d9 95	jsr $95d9			jsr 	ScanForward
.8f04	60		rts				rts
.8f05					EndIf:
.8f05	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/let.asm

.8f06					LetCommand:
.8f06	a2 00		ldx #$00			ldx 	#0
.8f08	b1 30		lda ($30),y			lda 	(codePtr),y
.8f0a	c9 10		cmp #$10			cmp 	#KWD_AT
.8f0c	d0 16		bne $8f24			bne 	_LCStandard
.8f0e	c8		iny				iny 								; skip equal
.8f0f	20 41 9d	jsr $9d41			jsr 	EvaluateTerm 				; get a number
.8f12	20 85 9b	jsr $9b85			jsr 	Dereference 				; dereference it
.8f15	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check integer
.8f18	49 20		eor #$20			eor 	#NSBIsReference	 			; toggle reference
.8f1a	9d 00 04	sta $0400,x			sta 	NSStatus,x
.8f1d	29 20		and #$20			and 	#NSBIsReference 			; if it is now a reference, continue
.8f1f	d0 10		bne $8f31			bne 	_LCMain
.8f21	4c 19 b0	jmp $b019			jmp 	TypeError 					; was a reference before.
.8f24					_LCStandard:
.8f24	ad 58 9a	lda $9a58			lda 	PrecedenceLevel+"*"			; precedence > this
.8f27	20 72 9a	jsr $9a72			jsr 	EvaluateExpressionAtPrecedence
.8f2a	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; is it a reference to an array
.8f2d	c9 38		cmp #$38			cmp		#NSTProcedure+NSBIsReference
.8f2f	f0 0e		beq $8f3f			beq 	_LetGoProc 					; it's a procedure call.
.8f31					_LCMain:
.8f31	a9 3d		lda #$3d			lda 	#"=" 						; check =
.8f33	20 39 aa	jsr $aa39			jsr 	CheckNextA
.8f36	e8		inx				inx 								; RHS
.8f37	20 6a a1	jsr $a16a			jsr 	EvaluateValue
.8f3a	ca		dex				dex
.8f3b	20 42 8f	jsr $8f42			jsr 	AssignVariable
.8f3e	60		rts				rts
.8f3f					_LetGoProc:
.8f3f	4c db 90	jmp $90db			jmp 	CallProcedure
.8f42					AssignVariable:
.8f42	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check the string/number type bits match
.8f45	48		pha				pha 								; save a copy
.8f46	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.8f49	29 10		and #$10			and 	#NSBIsString
.8f4b	d0 0b		bne $8f58			bne 	_ASError
.8f4d	68		pla				pla 								; get back
.8f4e	29 10		and #$10			and 	#NSBIsString 				; check type
.8f50	d0 03		bne $8f55			bne 	_ASString
.8f52	4c ad 9a	jmp $9aad			jmp 	AssignNumber
.8f55					_ASString:
.8f55	4c 1b 9b	jmp $9b1b			jmp 	AssignString
.8f58					_ASError:
.8f58	4c 19 b0	jmp $b019			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/list.asm

.8f5b					Command_List:
.8f5b	9c 0c 04	stz $040c			stz		NSMantissa0+4				; set the lower (slot 4) to 0 and upper (slot 7) to $FFFF
.8f5e	9c 14 04	stz $0414			stz 	NSMantissa1+4
.8f61	a9 ff		lda #$ff			lda 	#$FF
.8f63	8d 0f 04	sta $040f			sta 	NSMantissa0+7
.8f66	8d 17 04	sta $0417			sta 	NSMantissa1+7
.8f69	b1 30		lda ($30),y			lda 	(codePtr),y
.8f6b	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8f6d	f0 1e		beq $8f8d			beq 	_CLSecond
.8f6f	20 eb 8f	jsr $8feb			jsr 	CLIsDigit 					; if not digit, list all
.8f72	b0 24		bcs $8f98			bcs 	_CLStart
.8f74	a2 04		ldx #$04			ldx 	#4 							; get 1st range into slot 4
.8f76	20 ab a1	jsr $a1ab			jsr 	Evaluate16BitInteger
.8f79	b1 30		lda ($30),y			lda 	(codePtr),y
.8f7b	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8f7d	f0 0e		beq $8f8d			beq 	_CLSecond 					; if so go get it
.8f7f	ad 0c 04	lda $040c			lda 	NSMantissa0+4 				; copy 4->7
.8f82	8d 0f 04	sta $040f			sta 	NSMantissa0+7
.8f85	ad 14 04	lda $0414			lda 	NSMantissa1+4
.8f88	8d 17 04	sta $0417			sta 	NSMantissa1+7
.8f8b	80 0b		bra $8f98			bra 	_CLStart
.8f8d					_CLSecond:
.8f8d	c8		iny				iny 								; consume comma
.8f8e	20 eb 8f	jsr $8feb			jsr 	CLIsDigit 					; digit found
.8f91	b0 05		bcs $8f98			bcs 	_CLStart 					; if not, continue listing
.8f93	a2 07		ldx #$07			ldx 	#7 							; load 2nd range into slot 7
.8f95	20 ab a1	jsr $a1ab			jsr 	Evaluate16BitInteger
.8f98					_CLStart
.8f98	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8f9a	85 30		sta $30				sta 	codePtr
.8f9c	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8f9e	85 31		sta $31				sta 	codePtr+1
.8fa0					_CLLoop:
.8fa0	20 f7 b1	jsr $b1f7			jsr 	EXTBreakCheck 				; break check
.8fa3	f0 30		beq $8fd5			beq 	_CLExit
.8fa5	b2 30		lda ($30)			lda 	(codePtr)
.8fa7	f0 2c		beq $8fd5			beq 	_CLExit
.8fa9	a2 04		ldx #$04			ldx 	#4 							; check range every time, line numbers aren't in order.
.8fab	20 d8 8f	jsr $8fd8			jsr 	CLCompareLineNo
.8fae	90 18		bcc $8fc8			bcc 	_CLNext
.8fb0	a2 07		ldx #$07			ldx 	#7
.8fb2	20 d8 8f	jsr $8fd8			jsr 	CLCompareLineNo
.8fb5	f0 02		beq $8fb9			beq 	_CLDoThisOne
.8fb7	b0 0f		bcs $8fc8			bcs 	_CLNext
.8fb9					_CLDoThisOne:
.8fb9	20 35 94	jsr $9435			jsr 	ListConvertLine 			; convert line into token Buffer
.8fbc	a2 04		ldx #$04			ldx 	#(tokenBuffer >> 8) 		; print that line
.8fbe	a9 a9		lda #$a9			lda 	#(tokenBuffer & $FF)
.8fc0	20 c0 96	jsr $96c0			jsr 	PrintStringXA
.8fc3	a9 0d		lda #$0d			lda 	#13 						; new line
.8fc5	20 b6 b1	jsr $b1b6			jsr 	EXTPrintCharacter
.8fc8					_CLNext:
.8fc8	18		clc				clc
.8fc9	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8fcb	65 30		adc $30				adc 	codePtr
.8fcd	85 30		sta $30				sta 	codePtr
.8fcf	90 02		bcc $8fd3			bcc 	_CREExit
.8fd1	e6 31		inc $31				inc 	codePtr+1
.8fd3					_CREExit:
.8fd3	80 cb		bra $8fa0			bra 	_CLLoop
.8fd5					_CLExit:
.8fd5	4c a6 8b	jmp $8ba6			jmp 	WarmStart
.8fd8					CLCompareLineNo:
.8fd8	38		sec				sec
.8fd9	a0 01		ldy #$01			ldy 	#1
.8fdb	b1 30		lda ($30),y			lda 	(codePtr),y
.8fdd	fd 08 04	sbc $0408,x			sbc 	NSMantissa0,x
.8fe0	85 36		sta $36				sta 	zTemp0
.8fe2	c8		iny				iny
.8fe3	b1 30		lda ($30),y			lda 	(codePtr),y
.8fe5	fd 10 04	sbc $0410,x			sbc 	NSMantissa1,x
.8fe8	05 36		ora $36				ora 	zTemp0
.8fea	60		rts				rts
.8feb					CLIsDigit:
.8feb	b1 30		lda ($30),y			lda 	(codePtr),y
.8fed	c9 30		cmp #$30			cmp 	#"0"
.8fef	90 03		bcc $8ff4			bcc	 	_CLIDExitFalse
.8ff1	c9 3a		cmp #$3a			cmp 	#"9"+1
.8ff3	60		rts				rts
.8ff4					_CLIDExitFalse:
.8ff4	38		sec				sec
.8ff5	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/local.asm

.8ff6					Command_LOCAL:
.8ff6	a2 00		ldx #$00			ldx 	#0 							; at level 0
.8ff8	20 04 90	jsr $9004			jsr 	LocaliseNextTerm 			; convert term to a local.
.8ffb	b1 30		lda ($30),y			lda 	(codePtr),y
.8ffd	c8		iny				iny
.8ffe	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.9000	f0 f4		beq $8ff6			beq 	Command_LOCAL
.9002	88		dey				dey 								; unpick pre-get
.9003	60		rts				rts
.9004					LocaliseNextTerm:
.9004	20 41 9d	jsr $9d41			jsr 	EvaluateTerm 				; evaluate the term
.9007	bd 00 04	lda $0400,x			lda 	NSStatus,x
.900a	29 20		and #$20			and 	#NSBIsReference 			; check it is a reference
.900c	f0 69		beq $9077			beq		_LNTError
.900e	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address of variable to zTemp0
.9011	85 36		sta $36				sta 	zTemp0
.9013	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9016	85 37		sta $37				sta  	zTemp0+1
.9018	bd 00 04	lda $0400,x			lda 	NSStatus,x
.901b	29 10		and #$10			and 	#NSBIsString
.901d	d0 22		bne $9041			bne 	_LNTPushString
.901f	5a		phy				phy
.9020	a0 00		ldy #$00			ldy 	#0 							; push 0 to 4 inclusive, the number values, on the stack, and zero them as you go.
.9022					_LNTPushNumLoop:
.9022	b1 36		lda ($36),y			lda		(zTemp0),y
.9024	20 b1 a2	jsr $a2b1			jsr 	StackPushByte
.9027	a9 00		lda #$00			lda 	#0
.9029	91 36		sta ($36),y			sta 	(zTemp0),y
.902b	c8		iny				iny
.902c	c0 05		cpy #$05			cpy 	#5
.902e	d0 f2		bne $9022			bne 	_LNTPushNumLoop
.9030	a5 36		lda $36				lda 	zTemp0 						; push the actual target address to write on the stack
.9032	20 b1 a2	jsr $a2b1			jsr 	StackPushByte
.9035	a5 37		lda $37				lda 	zTemp0+1
.9037	20 b1 a2	jsr $a2b1			jsr 	StackPushByte
.903a	a9 01		lda #$01			lda 	#STK_LOCALN 				; push local-number marker.
.903c	20 b1 a2	jsr $a2b1			jsr 	StackPushByte
.903f	7a		ply				ply
.9040	60		rts				rts
.9041					_LNTPushString:
.9041	5a		phy				phy
.9042	b2 36		lda ($36)			lda 	(zTemp0) 					; put address of string in zTemp1
.9044	85 38		sta $38				sta 	zTemp1
.9046	a0 01		ldy #$01			ldy 	#1
.9048	b1 36		lda ($36),y			lda 	(zTemp0),y
.904a	85 39		sta $39				sta 	zTemp1+1
.904c	a0 00		ldy #$00			ldy 	#0 							; output string
.904e	c9 00		cmp #$00			cmp 	#0 							; if not assigned strin
.9050	f0 0a		beq $905c			beq 	_LNTStringOut
.9052					_LNTPushStrLoop:
.9052	b1 38		lda ($38),y			lda 	(zTemp1),y
.9054	f0 06		beq $905c			beq 	_LNTStringOut
.9056	20 b1 a2	jsr $a2b1			jsr 	StackPushByte
.9059	c8		iny				iny
.905a	80 f6		bra $9052			bra 	_LNTPushStrLoop
.905c					_LNTStringOut:
.905c	98		tya				tya									; output length
.905d	20 b1 a2	jsr $a2b1			jsr 	StackPushByte
.9060	a9 00		lda #$00			lda 	#0 							; clear original string.
.9062	92 38		sta ($38)			sta 	(zTemp1)
.9064	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; output address of the string record *not* the string itself
.9067	20 b1 a2	jsr $a2b1			jsr 	StackPushByte
.906a	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.906d	20 b1 a2	jsr $a2b1			jsr 	StackPushByte
.9070	a9 02		lda #$02			lda 	#STK_LOCALS 				; push local-string marker.
.9072	20 b1 a2	jsr $a2b1			jsr 	StackPushByte
.9075	7a		ply				ply
.9076	60		rts				rts
.9077					_LNTError:
.9077	4c 0f b0	jmp $b00f			jmp 	SyntaxError
.a9d0					LocalPopValue:
.a9d0	20 ca a2	jsr $a2ca			jsr 	StackPopByte
.a9d3	c9 01		cmp #$01			cmp 	#STK_LOCALN 				; if not local-N
.a9d5	d0 17		bne $a9ee			bne 	_LPVString
.a9d7	20 ca a2	jsr $a2ca			jsr 	StackPopByte 				; address
.a9da	85 37		sta $37				sta 	zTemp0+1
.a9dc	20 ca a2	jsr $a2ca			jsr 	StackPopByte
.a9df	85 36		sta $36				sta 	zTemp0
.a9e1	5a		phy				phy
.a9e2	a0 04		ldy #$04			ldy 	#4 							; copy back
.a9e4					_LPVNumberCopy:
.a9e4	20 ca a2	jsr $a2ca			jsr 	StackPopByte
.a9e7	91 36		sta ($36),y			sta 	(zTemp0),y
.a9e9	88		dey				dey
.a9ea	10 f8		bpl $a9e4			bpl 	_LPVNumberCopy
.a9ec	7a		ply				ply 								; and complete
.a9ed	60		rts				rts
.a9ee					_LPVString:
.a9ee	20 ca a2	jsr $a2ca			jsr 	StackPopByte 				; address of record => zTemp0
.a9f1	85 37		sta $37				sta 	zTemp0+1
.a9f3	20 ca a2	jsr $a2ca			jsr 	StackPopByte
.a9f6	85 36		sta $36				sta 	zTemp0
.a9f8	5a		phy				phy
.a9f9	b2 36		lda ($36)			lda 	(zTemp0) 					; address to write string to => zTemp1
.a9fb	85 38		sta $38				sta 	zTemp1
.a9fd	a0 01		ldy #$01			ldy 	#1
.a9ff	b1 36		lda ($36),y			lda 	(zTemp0),y
.aa01	85 39		sta $39				sta 	zTemp1+1
.aa03	20 ca a2	jsr $a2ca			jsr 	StackPopByte 				; # to get => y
.aa06	a8		tay				tay
.aa07	a5 39		lda $39				lda 	zTemp1+1 					; if no target (e.g. was "" originally) exit
.aa09	f0 0e		beq $aa19			beq 	_LPVStringCopied
.aa0b	a9 00		lda #$00			lda 	#0 							; NULL on end
.aa0d	91 38		sta ($38),y			sta 	(zTemp1),y
.aa0f					_LPVStringCopy:
.aa0f	88		dey				dey
.aa10	30 07		bmi $aa19			bmi 	_LPVStringCopied
.aa12	20 ca a2	jsr $a2ca			jsr 	StackPopByte
.aa15	91 38		sta ($38),y			sta 	(zTemp1),y
.aa17	80 f6		bra $aa0f			bra 	_LPVStringCopy
.aa19					_LPVStringCopied:
.aa19	fa		plx				plx
.aa1a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/new.asm

.907a					NewCommand:
.907a	20 5c a2	jsr $a25c			jsr 	MemoryNew
.907d	9c 00 10	stz $1000			stz 	VariableSpace 				; erase all variables.
.9080	20 3f 8c	jsr $8c3f			jsr 	ClearCommand 				; clear everything.
.9083	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/print.asm

.9084					Command_Print:
.9084	18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.9085					_CPLoop:
.9085	08		php				php 								; save last action flag
.9086	b1 30		lda ($30),y			lda 	(codePtr),y
.9088	c9 80		cmp #$80			cmp  	#KWC_EOL 					; end of line or colon, exit now.
.908a	f0 46		beq $90d2			beq 	_CPExit
.908c	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.908e	f0 42		beq $90d2			beq 	_CPExit
.9090	68		pla				pla 								; throw last action flag
.9091	b1 30		lda ($30),y			lda 	(codePtr),y
.9093	c8		iny				iny
.9094	c9 3b		cmp #$3b			cmp 	#KWD_SEMICOLON				; is it a semicolon
.9096	f0 37		beq $90cf			beq 	_CPContinueWithSameLine
.9098	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; comma
.909a	f0 2e		beq $90ca			beq 	_CPTab
.909c	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; apostrophe (new line)
.909e	f0 26		beq $90c6			beq 	_CPNewLine
.90a0	88		dey				dey 								; undo the get.
.90a1	a2 00		ldx #$00			ldx 	#0
.90a3	20 6a a1	jsr $a16a			jsr 	EvaluateValue 				; get a value into slot 0
.90a6	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; is it a number
.90a9	29 10		and #$10			and 	#NSBIsString
.90ab	f0 0b		beq $90b8			beq 	_CPNumber
.90ad	ae 10 04	ldx $0410			ldx 	NSMantissa1 				; string, print the text.
.90b0	ad 08 04	lda $0408			lda 	NSMantissa0
.90b3	20 c0 96	jsr $96c0			jsr 	PrintStringXA
.90b6	80 cc		bra $9084			bra 	Command_Print 				; loop round clearing carry so NL if end
.90b8					_CPNumber:
.90b8	a9 05		lda #$05			lda 	#5 							; maximum decimals
.90ba	20 40 a0	jsr $a040			jsr 	ConvertNumberToString 		; convert to string
.90bd	a2 06		ldx #$06			ldx 	#DecimalBuffer >> 8
.90bf	a9 19		lda #$19			lda 	#DecimalBuffer & $FF
.90c1	20 c0 96	jsr $96c0			jsr 	PrintStringXA
.90c4	80 be		bra $9084			bra 	Command_Print 				; loop round clearing carry so NL if end
.90c6					_CPNewLine:
.90c6	a9 0d		lda #$0d			lda 	#13
.90c8	80 02		bra $90cc			bra 	_CPPrintChar
.90ca					_CPTab:
.90ca	a9 09		lda #$09			lda 	#9 							; print TAB
.90cc					_CPPrintChar:
.90cc	20 b6 b1	jsr $b1b6			jsr 	EXTPrintCharacter
.90cf					_CPContinueWithSameLine:
.90cf	38		sec				sec 								; loop round with carry set, which
.90d0	80 b3		bra $9085			bra 	_CPLoop 					; will inhibit final CR
.90d2					_CPExit:
.90d2	28		plp				plp 								; get last action flag
.90d3	b0 05		bcs $90da			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.90d5	a9 0d		lda #$0d			lda 	#13 						; print new line
.90d7	20 b6 b1	jsr $b1b6			jsr 	EXTPrintCharacter
.90da					_CPExit2:
.90da	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/procedure.asm

=2					ParameterStackPos = 2
.90db					CallProcedure:
.90db	a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start storing parameters at 2.
.90dd	b1 30		lda ($30),y			lda 	(codePtr),y
.90df	c9 29		cmp #$29			cmp 	#KWD_RPAREN
.90e1	f0 0c		beq $90ef			beq 	_CPEndParam
.90e3					_CPParamLoop:
.90e3	20 70 9a	jsr $9a70			jsr 	EvaluateExpression 			; get parameter onto stack
.90e6	e8		inx				inx 								; bump next stack
.90e7	b1 30		lda ($30),y			lda 	(codePtr),y
.90e9	c8		iny				iny
.90ea	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if comma, go back and try again.
.90ec	f0 f5		beq $90e3			beq 	_CPParamLoop
.90ee	88		dey				dey 								; unpick.
.90ef					_CPEndParam:
.90ef	8e 96 04	stx $0496			stx 	LastParameter 				; save the last parameters index.
.90f2	c8		iny				iny									; skip right bracket
.90f3	a9 b3		lda #$b3			lda 	#STK_PROC+3 				; allocate 6 bytes on the return stack.
.90f5	20 d3 a2	jsr $a2d3			jsr 	StackOpen
.90f8	20 17 a3	jsr $a317			jsr 	STKSaveCodePosition 		; save loop position
.90fb	ad 08 04	lda $0408			lda 	NSMantissa0 				; copy variable (e.g. procedure) address to zTemp0
.90fe	85 36		sta $36				sta 	zTemp0 						; this is the DATA not the RECORD
.9100	ad 10 04	lda $0410			lda 	NSMantissa1
.9103	85 37		sta $37				sta 	zTemp0+1
.9105	a0 01		ldy #$01			ldy 	#1 							; copy code address back.
.9107	b2 36		lda ($36)			lda 	(zTemp0)
.9109	85 30		sta $30				sta 	safePtr
.910b	b1 36		lda ($36),y			lda 	(zTemp0),y
.910d	85 31		sta $31				sta 	safePtr+1
.910f	c8		iny				iny
.9110	b1 36		lda ($36),y			lda 	(zTemp0),y
.9112	85 32		sta $32				sta 	safePtr+2
.9114	c8		iny				iny
.9115	b1 36		lda ($36),y			lda 	(zTemp0),y
.9117	85 33		sta $33				sta 	safePtr+3
.9119	c8		iny				iny 								; get Y offset -> Y
.911a	b1 36		lda ($36),y			lda 	(zTemp0),y
.911c	a8		tay				tay
.911d	a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start position of parameters
.911f	ec 96 04	cpx $0496			cpx	 	LastParameter 				; check no parameters at the start
.9122	f0 13		beq $9137			beq 	_ParamExit 					; if so, exit.
.9124					_ParamExtract:
.9124	ca		dex				dex 								; put a local term on the level before
.9125	20 04 90	jsr $9004			jsr 	LocaliseNextTerm			; also pushes original param value to basic stack
.9128	20 42 8f	jsr $8f42			jsr 	AssignVariable 				; assign stacked value to the variable.
.912b	e8		inx				inx 								; advance to next parameter to do.
.912c	e8		inx				inx
.912d	ec 96 04	cpx $0496			cpx 	LastParameter 				; are we done ?
.9130	f0 05		beq $9137			beq 	_ParamExit
.9132	20 31 aa	jsr $aa31			jsr 	CheckComma 					; comma seperating parameters
.9135	80 ed		bra $9124			bra 	_ParamExtract
.9137					_ParamExit:
.9137	20 29 aa	jsr $aa29			jsr 	CheckRightBracket 			; check )
.913a	60		rts				rts 								; and continue from here
.aa1b					Command_ENDPROC:
.aa1b	a9 b0		lda #$b0			lda 	#STK_PROC 					; check TOS is this
.aa1d	a2 14		ldx #$14			ldx 	#ERRID_PROC
.aa1f	20 ff a2	jsr $a2ff			jsr 	StackCheckFrame
.aa22	20 28 a3	jsr $a328			jsr 	STKLoadCodePosition 		; restore code position
.aa25	20 f1 a2	jsr $a2f1			jsr 	StackClose
.aa28	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/read.asm

.913b					Command_Read:
.913b	a2 00		ldx #$00			ldx 	#0 							; evaluate the term which is the var/array element to assign
.913d	20 41 9d	jsr $9d41			jsr 	EvaluateTerm
.9140	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9143	29 20		and #$20			and 	#NSBIsReference				; get status byte on stack, identifies int, float, string.
.9145	f0 4a		beq $9191			beq 	_CRSyntax 					; check reference (bit 0)
.9147	20 da 91	jsr $91da			jsr 	SwapDataCodePtrs 			; swap code and data
.914a	ad 9c 04	lda $049c			lda 	inDataStatement 			; if in a data statement, we don't need to search
.914d	d0 20		bne $916f			bne 	_CRContinueData
.914f					_CRKeepSearching:
.914f	a9 ab		lda #$ab			lda 	#KWD_DATA 					; scan for instruction
.9151	aa		tax				tax
.9152	20 d9 95	jsr $95d9			jsr 	ScanForward
.9155	c9 ab		cmp #$ab			cmp 	#KWD_DATA 					; found data ?
.9157	f0 16		beq $916f			beq 	_CRHaveData 				; found it
.9159	18		clc				clc
.915a	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.915c	65 30		adc $30				adc 	codePtr
.915e	85 30		sta $30				sta 	codePtr
.9160	90 02		bcc $9164			bcc 	_CREExit
.9162	e6 31		inc $31				inc 	codePtr+1
.9164					_CREExit:
.9164	a0 03		ldy #$03			ldy 	#3 							; start of line.
.9166	b2 30		lda ($30)			lda 	(codePtr)
.9168	d0 e5		bne $914f			bne 	_CRKeepSearching
.916a	a9 0b		lda #$0b		lda	#11
.916c	4c 67 96	jmp $9667		jmp	ErrorHandler
.916f					_CRHaveData:
.916f					_CRContinueData:
.916f	a2 01		ldx #$01			ldx 	#1
.9171	20 6a a1	jsr $a16a			jsr 	EvaluateValue 				; evaluate value into slot # 1
.9174	ca		dex				dex
.9175	20 42 8f	jsr $8f42			jsr		AssignVariable 				; do the assignment
.9178	9c 9c 04	stz $049c			stz 	inDataStatement 			; clear in data
.917b	b1 30		lda ($30),y			lda 	(codePtr),y
.917d	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not, end of data statement
.917f	d0 04		bne $9185			bne 	_CRSwapBack
.9181	c8		iny				iny 								; consume comma
.9182	ee 9c 04	inc $049c			inc 	inDataStatement 			; set in data statement currently.
.9185					_CRSwapBack:
.9185	20 da 91	jsr $91da			jsr 	SwapDataCodePtrs			; swap them back.
.9188	b1 30		lda ($30),y			lda 	(codePtr),y
.918a	c8		iny				iny
.918b	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.918d	f0 ac		beq $913b			beq 	Command_Read 				; if so go round again.
.918f	88		dey				dey 								; unpick get.
.9190	60		rts				rts
.9191					_CRSyntax:
.9191	4c 0f b0	jmp $b00f			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/rem.asm

.9194					RemCommand:
.9194	b1 30		lda ($30),y			lda 	(codePtr),y
.9196	c9 ff		cmp #$ff			cmp 	#KWC_STRING
.9198	d0 06		bne $91a0			bne 	_RMExit
.919a	c8		iny				iny
.919b	98		tya				tya
.919c	38		sec				sec
.919d	71 30		adc ($30),y			adc 	(codePtr),y
.919f	a8		tay				tay
.91a0					_RMExit:
.91a0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/repeat.asm

.91a1					Command_REPEAT:
.91a1	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; allocate 6 bytes on the return stack.
.91a3	20 d3 a2	jsr $a2d3			jsr 	StackOpen
.91a6	20 17 a3	jsr $a317			jsr 	STKSaveCodePosition 		; save loop position
.91a9	60		rts				rts
.91aa					Command_UNTIL:
.91aa	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; check REPEAT is TOS
.91ac	a2 0f		ldx #$0f			ldx 	#ERRID_REPEAT 				; this error
.91ae	20 ff a2	jsr $a2ff			jsr 	StackCheckFrame
.91b1	a2 00		ldx #$00			ldx 	#0
.91b3	20 73 a1	jsr $a173			jsr 	EvaluateNumber 				; work out the number
.91b6	20 4f a2	jsr $a24f			jsr 	NSMIsZero 					; check if zero
.91b9	f0 04		beq $91bf			beq 	_CULoopBack 				; if so keep looping
.91bb	20 f1 a2	jsr $a2f1			jsr 	StackClose		 			; return
.91be	60		rts				rts
.91bf					_CULoopBack:
.91bf	20 28 a3	jsr $a328			jsr 	STKLoadCodePosition 		; loop back
.91c2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/restore.asm

.91c3					Command_Restore:
.91c3	20 da 91	jsr $91da			jsr 	SwapDataCodePtrs 			; swap code and data
.91c6	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.91c8	85 30		sta $30				sta 	codePtr
.91ca	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.91cc	85 31		sta $31				sta 	codePtr+1
.91ce	20 da 91	jsr $91da			jsr 	SwapDataCodePtrs 			; put them back
.91d1	a9 03		lda #$03			lda 	#3 							; start at offset 3, e.g. first instruction of first line.
.91d3	8d 9b 04	sta $049b			sta 	dataPointer+4
.91d6	9c 9c 04	stz $049c			stz 	inDataStatement 			; not in data statement
.91d9	60		rts				rts
.91da					SwapDataCodePtrs:
.91da	da		phx				phx
.91db	a2 03		ldx #$03			ldx 	#3 							; swap 32 bit code pointer over
.91dd					_SDCPLoop:
.91dd	b5 30		lda $30,x			lda 	safePtr,x
.91df	48		pha				pha
.91e0	bd 97 04	lda $0497,x			lda 	dataPointer,x
.91e3	95 30		sta $30,x			sta 	safePtr,x
.91e5	68		pla				pla
.91e6	9d 97 04	sta $0497,x			sta 	dataPointer,x
.91e9	ca		dex				dex
.91ea	10 f1		bpl $91dd			bpl 	_SDCPLoop
.91ec	ad 9b 04	lda $049b			lda 	dataPointer+4 				; swap Y position over.
.91ef	8c 9b 04	sty $049b			sty 	dataPointer+4
.91f2	a8		tay				tay
.91f3	fa		plx				plx
.91f4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/run.asm

.91f5					CommandRUN:
.91f5	20 3f 8c	jsr $8c3f			jsr 	ClearCommand 				; clear variable/stacks/etc.
.91f8	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.91fa	85 30		sta $30				sta 	codePtr
.91fc	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.91fe	85 31		sta $31				sta 	codePtr+1
.9200					RUNNewLine:
.9200	b2 30		lda ($30)			lda 	(codePtr)
.9202	f0 5e		beq $9262			beq 	CRNoProgram         		; no then END.
.9204	a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack
.9206	9a		txs				txs
.9207					RUNCodePointerLine:
.9207	a0 02		ldy #$02			ldy 	#2 							; start of program
.9209					_CRIncMainLoop:
.9209	0e 93 04	asl $0493			asl 	breakCheck 					; clears 1 time in 8
.920c	d0 05		bne $9213			bne 	_CRNoBreakCheck
.920e	20 f7 b1	jsr $b1f7			jsr 	EXTBreakCheck 				; break check
.9211	f0 4a		beq $925d			beq 	_CRBreak
.9213					_CRNoBreakCheck:
.9213	c8		iny				iny
.9214					_CRMainLoop:
.9214	9c 90 04	stz $0490			stz 	stringInitialised 			; clear the temporary string initialised flag.
.9217	b1 30		lda ($30),y			lda 	(codePtr),y
.9219	10 10		bpl $922b			bpl 	_CRNotKeyword
.921b	c9 9b		cmp #$9b			cmp 	#KWC_LAST_UNARY+1 			; if after unary, legitimate command
.921d	b0 04		bcs $9223			bcs 	_CRIsKeyword
.921f	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if unary, syntax error.
.9221	b0 34		bcs $9257			bcs		_CRSyntaxError
.9223					_CRIsKeyword:
.9223	c8		iny				iny 								; consume command
.9224	0a		asl a				asl 	a 							; double losing the MSB which is '1' as tokens are $80-$FF
.9225	aa		tax				tax 								; put in X for vector jump
.9226	20 5a 92	jsr $925a			jsr 	_CRCallVector0 				; call the vector - effectively jsr (vectortable,X)
.9229	80 e9		bra $9214			bra 	_CRMainLoop 				; and loop round
.922b					_CRNotKeyword:
.922b	c9 3a		cmp #$3a			cmp 	#KWD_COLON 					; if a :, consume it and go round.
.922d	f0 da		beq $9209			beq 	_CRIncMainLoop
.922f	c9 40		cmp #$40			cmp 	#$40 						; variable/call reference
.9231	90 05		bcc $9238			bcc 	_CRNotVariable
.9233					_CRGoLet:
.9233	20 06 8f	jsr $8f06			jsr 	LetCommand
.9236	80 dc		bra $9214			bra 	_CRMainLoop
.9238					_CRNotVariable:
.9238	c9 10		cmp #$10			cmp 	#KWD_AT 					; handle @
.923a	f0 f7		beq $9233			beq 	_CRGoLet
.923c	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; handle ? !
.923e	f0 f3		beq $9233			beq 	_CRGoLet
.9240	c9 21		cmp #$21			cmp 	#KWD_PLING
.9242	f0 ef		beq $9233			beq 	_CRGoLet
.9244	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; handle ' (comment)
.9246	f0 09		beq $9251			beq 	_CRGoRem
.9248	c9 2e		cmp #$2e			cmp 	#KWD_PERIOD 				; handle . (assembler label)
.924a	d0 0b		bne $9257			bne 	_CRSyntaxError
.924c	20 df 8a	jsr $8adf			jsr 	LabelHere
.924f	80 c3		bra $9214			bra 	_CRMainLoop
.9251					_CRGoRem:
.9251	c8		iny				iny
.9252	20 94 91	jsr $9194			jsr 	RemCommand
.9255	80 bd		bra $9214			bra 	_CRMainLoop
.9257					_CRSyntaxError:
.9257	4c 0f b0	jmp $b00f			jmp 	SyntaxError
.925a					_CRCallVector0:
.925a	7c 06 93	jmp ($9306,x)			jmp 	(VectorSet0,x)
.925d					_CRBreak:
.925d	a9 01		lda #$01		lda	#1
.925f	4c 67 96	jmp $9667		jmp	ErrorHandler
.9262					CRNoProgram:
.9262	4c 5c 8d	jmp $8d5c			jmp 	EndCommand
.9265					EOLCommand:
.9265	18		clc				clc
.9266	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.9268	65 30		adc $30				adc 	codePtr
.926a	85 30		sta $30				sta 	codePtr
.926c	90 02		bcc $9270			bcc 	_CREExit
.926e	e6 31		inc $31				inc 	codePtr+1
.9270					_CREExit:
.9270	80 8e		bra $9200			bra 	RunNewLine
.9272					Shift1Command:
.9272	b1 30		lda ($30),y			lda 	(codePtr),y
.9274	c8		iny				iny
.9275	0a		asl a				asl 	a
.9276	aa		tax				tax
.9277	7c 8c 93	jmp ($938c,x)			jmp 	(VectorSet1,x)
.927a					Shift2Command:
.927a	b1 30		lda ($30),y			lda 	(codePtr),y
.927c	c8		iny				iny
.927d	0a		asl a				asl 	a
.927e	aa		tax				tax
.927f	7c a8 93	jmp ($93a8,x)			jmp 	(VectorSet2,x)
.9282					Unused1:
.9282					Unused2:
.9282					Unused3:
.9282					Unused4:
.9282	4c 0f b0	jmp $b00f			jmp 	SyntaxError
>9285							.align 2

;******  Processing file: ./common/commands/../generated/vectors.dat

.9286					VectorSetPunc:
>9286	11 98					.word	ShiftLeft                        ; $00 <<
>9288	0b 97					.word	BinaryCompareLessEqual           ; $01 <=
>928a	01 97					.word	BinaryCompareNotEqual            ; $02 <>
>928c	0f b0					.word	SyntaxError                      ; $03 !!3
>928e	0f b0					.word	SyntaxError                      ; $04 ><
>9290	15 97					.word	BinaryCompareGreaterEqual        ; $05 >=
>9292	14 98					.word	ShiftRight                       ; $06 >>
>9294	0f b0					.word	SyntaxError                      ; $07 !!7
>9296	0f b0					.word	SyntaxError                      ; $08 !!8
>9298	0f b0					.word	SyntaxError                      ; $09 !!9
>929a	0f b0					.word	SyntaxError                      ; $0a !!10
>929c	0f b0					.word	SyntaxError                      ; $0b !!11
>929e	0f b0					.word	SyntaxError                      ; $0c !!12
>92a0	0f b0					.word	SyntaxError                      ; $0d !!13
>92a2	0f b0					.word	SyntaxError                      ; $0e !!14
>92a4	0f b0					.word	SyntaxError                      ; $0f !!15
>92a6	0f b0					.word	SyntaxError                      ; $10 @
>92a8	0f b0					.word	SyntaxError                      ; $11 !!17
>92aa	0f b0					.word	SyntaxError                      ; $12 !!18
>92ac	0f b0					.word	SyntaxError                      ; $13 [
>92ae	42 aa					.word	IntegerDivide                    ; $14 \
>92b0	0f b0					.word	SyntaxError                      ; $15 ]
>92b2	9a 99					.word	EorInteger                       ; $16 ^
>92b4	0f b0					.word	SyntaxError                      ; $17 _
>92b6	0f b0					.word	SyntaxError                      ; $18 `
>92b8	0f b0					.word	SyntaxError                      ; $19 !!25
>92ba	0f b0					.word	SyntaxError                      ; $1a !!26
>92bc	0f b0					.word	SyntaxError                      ; $1b {
>92be	54 99					.word	OraInteger                       ; $1c |
>92c0	0f b0					.word	SyntaxError                      ; $1d }
>92c2	0f b0					.word	SyntaxError                      ; $1e ~
>92c4	0f b0					.word	SyntaxError                      ; $1f [7m<7F>[m
>92c6	0f b0					.word	SyntaxError                      ; $20
>92c8	e0 99					.word	WordIndirect                     ; $21 !
>92ca	0f b0					.word	SyntaxError                      ; $22 "
>92cc	0f b0					.word	SyntaxError                      ; $23 #
>92ce	0f b0					.word	SyntaxError                      ; $24 $
>92d0	8f aa					.word	IntegerModulus                   ; $25 %
>92d2	0e 99					.word	AndInteger                       ; $26 &
>92d4	0f b0					.word	SyntaxError                      ; $27 '
>92d6	0f b0					.word	SyntaxError                      ; $28 (
>92d8	0f b0					.word	SyntaxError                      ; $29 )
>92da	04 ab					.word	MulInteger                       ; $2a *
>92dc	a8 98					.word	AddInteger                       ; $2b +
>92de	0f b0					.word	SyntaxError                      ; $2c ,
>92e0	e3 98					.word	SubInteger                       ; $2d -
>92e2	0f b0					.word	SyntaxError                      ; $2e .
>92e4	9b ac					.word	FDivideCommand                   ; $2f /
>92e6	0f b0					.word	SyntaxError                      ; $30 0
>92e8	0f b0					.word	SyntaxError                      ; $31 1
>92ea	0f b0					.word	SyntaxError                      ; $32 2
>92ec	0f b0					.word	SyntaxError                      ; $33 3
>92ee	0f b0					.word	SyntaxError                      ; $34 4
>92f0	0f b0					.word	SyntaxError                      ; $35 5
>92f2	0f b0					.word	SyntaxError                      ; $36 6
>92f4	0f b0					.word	SyntaxError                      ; $37 7
>92f6	0f b0					.word	SyntaxError                      ; $38 8
>92f8	0f b0					.word	SyntaxError                      ; $39 9
>92fa	0f b0					.word	SyntaxError                      ; $3a :
>92fc	0f b0					.word	SyntaxError                      ; $3b ;
>92fe	ed 96					.word	BinaryCompareLess                ; $3c <
>9300	e3 96					.word	BinaryCompareEqual               ; $3d =
>9302	f7 96					.word	BinaryCompareGreater             ; $3e >
>9304	07 9a					.word	ByteIndirect                     ; $3f ?
.9306					VectorSet0:
>9306	65 92					.word	EOLCommand                       ; $80 !0:EOF
>9308	72 92					.word	Shift1Command                    ; $81 !1:SH1
>930a	7a 92					.word	Shift2Command                    ; $82 !2:SH2
>930c	e1 ad					.word	AbsUnary                         ; $83 ABS(
>930e	d1 9e					.word	AllocUnary                       ; $84 ALLOC(
>9310	f1 ad					.word	AscUnary                         ; $85 ASC(
>9312	f1 9f					.word	ChrUnary                         ; $86 CHR$(
>9314	0f b0					.word	SyntaxError                      ; $87 EVENT(
>9316	df 96					.word	UnaryFalse                       ; $88 FALSE
>9318	fe ad					.word	FracUnary                        ; $89 FRAC(
>931a	14 ae					.word	IntUnary                         ; $8a INT(
>931c	6a ae					.word	IsValUnary                       ; $8b ISVAL(
>931e	cb a0					.word	Unary_Left                       ; $8c LEFT$(
>9320	26 ae					.word	LenUnary                         ; $8d LEN(
>9322	f5 a0					.word	Unary_Mid                        ; $8e MID$(
>9324	41 9f					.word	Unary_Not                        ; $8f NOT(
>9326	0f b0					.word	SyntaxError                      ; $90 OFF
>9328	0f b0					.word	SyntaxError                      ; $91 ON
>932a	57 9f					.word	Unary_Random                     ; $92 RANDOM(
>932c	db a0					.word	Unary_Right                      ; $93 RIGHT$(
>932e	70 9f					.word	Unary_Rnd                        ; $94 RND(
>9330	40 ae					.word	SgnUnary                         ; $95 SGN(
>9332	03 a0					.word	SpcUnary                         ; $96 SPC(
>9334	1e a0					.word	Unary_Str                        ; $97 STR$(
>9336	0f b0					.word	SyntaxError                      ; $98 TIMER(
>9338	d3 96					.word	UnaryTrue                        ; $99 TRUE
>933a	60 ae					.word	ValUnary                         ; $9a VAL(
>933c	5f 8d					.word	ForCommand                       ; $9b FOR
>933e	dc 8e					.word	IfCommand                        ; $9c IF
>9340	82 92					.word	Unused1                          ; $9d PROC
>9342	a1 91					.word	Command_REPEAT                   ; $9e REPEAT
>9344	38 96					.word	Command_WHILE                    ; $9f WHILE
>9346	05 8f					.word	EndIf                            ; $a0 ENDIF
>9348	1b aa					.word	Command_ENDPROC                  ; $a1 ENDPROC
>934a	19 8e					.word	NextCommand                      ; $a2 NEXT
>934c	82 92					.word	Unused4                          ; $a3 THEN
>934e	aa 91					.word	Command_UNTIL                    ; $a4 UNTIL
>9350	59 96					.word	Command_WEND                     ; $a5 WEND
>9352	05 8c					.word	CallCommand                      ; $a6 CALL
>9354	0f b0					.word	SyntaxError                      ; $a7 CIRCLE
>9356	0f b0					.word	SyntaxError                      ; $a8 CLS
>9358	0f b0					.word	SyntaxError                      ; $a9 COLOR
>935a	0f b0					.word	SyntaxError                      ; $aa COLOUR
>935c	97 8c					.word	Command_Data                     ; $ab DATA
>935e	9f 8c					.word	DimCommand                       ; $ac DIM
>9360	82 92					.word	Unused3                          ; $ad DOWNTO
>9362	fe 8e					.word	ElseCode                         ; $ae ELSE
>9364	72 8e					.word	GfxCommand                       ; $af GFX
>9366	a2 8e					.word	Command_GOSUB                    ; $b0 GOSUB
>9368	c0 8e					.word	GotoCommand                      ; $b1 GOTO
>936a	0f b0					.word	SyntaxError                      ; $b2 HERE
>936c	0f b0					.word	SyntaxError                      ; $b3 HIDE
>936e	06 8f					.word	LetCommand                       ; $b4 LET
>9370	0f b0					.word	SyntaxError                      ; $b5 LINE
>9372	f6 8f					.word	Command_LOCAL                    ; $b6 LOCAL
>9374	0f b0					.word	SyntaxError                      ; $b7 OUTLINE
>9376	84 90					.word	Command_Print                    ; $b8 PRINT
>9378	3b 91					.word	Command_Read                     ; $b9 READ
>937a	0f b0					.word	SyntaxError                      ; $ba RECT
>937c	94 91					.word	RemCommand                       ; $bb REM
>937e	b2 8e					.word	Command_RETURN                   ; $bc RETURN
>9380	0f b0					.word	SyntaxError                      ; $bd SCALE
>9382	0f b0					.word	SyntaxError                      ; $be SHOW
>9384	0f b0					.word	SyntaxError                      ; $bf SOLID
>9386	0f b0					.word	SyntaxError                      ; $c0 SPRITE
>9388	0f b0					.word	SyntaxError                      ; $c1 TEXT
>938a	82 92					.word	Unused2                          ; $c2 TO
.938c					VectorSet1:
>938c	0f b0					.word	SyntaxError                      ; $80 !0:EOF
>938e	0f b0					.word	SyntaxError                      ; $81 !1:SH1
>9390	0f b0					.word	SyntaxError                      ; $82 !2:SH2
>9392	d6 8b					.word	AssembleCommand                  ; $83 ASSEMBLE
>9394	f5 8b					.word	AssertCommand                    ; $84 ASSERT
>9396	0f b0					.word	SyntaxError                      ; $85 BITMAP
>9398	3f 8c					.word	ClearCommand                     ; $86 CLEAR
>939a	5c 8d					.word	EndCommand                       ; $87 END
>939c	5b 8f					.word	Command_List                     ; $88 LIST
>939e	7a 90					.word	NewCommand                       ; $89 NEW
>93a0	c3 91					.word	Command_Restore                  ; $8a RESTORE
>93a2	f5 91					.word	CommandRUN                       ; $8b RUN
>93a4	0f b0					.word	SyntaxError                      ; $8c SPRITES
>93a6	30 94					.word	StopCommand                      ; $8d STOP
.93a8					VectorSet2:
>93a8	0f b0					.word	SyntaxError                      ; $80 !0:EOF
>93aa	0f b0					.word	SyntaxError                      ; $81 !1:SH1
>93ac	0f b0					.word	SyntaxError                      ; $82 !2:SH2
>93ae	ce ae					.word	Assemble_adc                     ; $83 ADC
>93b0	c6 ae					.word	Assemble_and                     ; $84 AND
>93b2	e2 ae					.word	Assemble_asl                     ; $85 ASL
>93b4	4c af					.word	Assemble_bcc                     ; $86 BCC
>93b6	50 af					.word	Assemble_bcs                     ; $87 BCS
>93b8	58 af					.word	Assemble_beq                     ; $88 BEQ
>93ba	0f af					.word	Assemble_bit                     ; $89 BIT
>93bc	40 af					.word	Assemble_bmi                     ; $8a BMI
>93be	54 af					.word	Assemble_bne                     ; $8b BNE
>93c0	3c af					.word	Assemble_bpl                     ; $8c BPL
>93c2	5c af					.word	Assemble_bra                     ; $8d BRA
>93c4	60 af					.word	Assemble_brk                     ; $8e BRK
>93c6	44 af					.word	Assemble_bvc                     ; $8f BVC
>93c8	48 af					.word	Assemble_bvs                     ; $90 BVS
>93ca	68 af					.word	Assemble_clc                     ; $91 CLC
>93cc	bc af					.word	Assemble_cld                     ; $92 CLD
>93ce	7c af					.word	Assemble_cli                     ; $93 CLI
>93d0	ac af					.word	Assemble_clv                     ; $94 CLV
>93d2	da ae					.word	Assemble_cmp                     ; $95 CMP
>93d4	23 af					.word	Assemble_cpx                     ; $96 CPX
>93d6	1e af					.word	Assemble_cpy                     ; $97 CPY
>93d8	00 af					.word	Assemble_dec                     ; $98 DEC
>93da	b8 af					.word	Assemble_dex                     ; $99 DEX
>93dc	94 af					.word	Assemble_dey                     ; $9a DEY
>93de	ca ae					.word	Assemble_eor                     ; $9b EOR
>93e0	05 af					.word	Assemble_inc                     ; $9c INC
>93e2	c8 af					.word	Assemble_inx                     ; $9d INX
>93e4	b4 af					.word	Assemble_iny                     ; $9e INY
>93e6	37 af					.word	Assemble_jmp                     ; $9f JMP
>93e8	32 af					.word	Assemble_jsr                     ; $a0 JSR
>93ea	d6 ae					.word	Assemble_lda                     ; $a1 LDA
>93ec	fb ae					.word	Assemble_ldx                     ; $a2 LDX
>93ee	19 af					.word	Assemble_ldy                     ; $a3 LDY
>93f0	ec ae					.word	Assemble_lsr                     ; $a4 LSR
>93f2	cc af					.word	Assemble_nop                     ; $a5 NOP
>93f4	c2 ae					.word	Assemble_ora                     ; $a6 ORA
>93f6	78 af					.word	Assemble_pha                     ; $a7 PHA
>93f8	64 af					.word	Assemble_php                     ; $a8 PHP
>93fa	c0 af					.word	Assemble_phx                     ; $a9 PHX
>93fc	80 af					.word	Assemble_phy                     ; $aa PHY
>93fe	88 af					.word	Assemble_pla                     ; $ab PLA
>9400	6c af					.word	Assemble_plp                     ; $ac PLP
>9402	d4 af					.word	Assemble_plx                     ; $ad PLX
>9404	90 af					.word	Assemble_ply                     ; $ae PLY
>9406	e7 ae					.word	Assemble_rol                     ; $af ROL
>9408	f1 ae					.word	Assemble_ror                     ; $b0 ROR
>940a	74 af					.word	Assemble_rti                     ; $b1 RTI
>940c	84 af					.word	Assemble_rts                     ; $b2 RTS
>940e	de ae					.word	Assemble_sbc                     ; $b3 SBC
>9410	70 af					.word	Assemble_sec                     ; $b4 SEC
>9412	d0 af					.word	Assemble_sed                     ; $b5 SED
>9414	8c af					.word	Assemble_sei                     ; $b6 SEI
>9416	d2 ae					.word	Assemble_sta                     ; $b7 STA
>9418	c4 af					.word	Assemble_stp                     ; $b8 STP
>941a	f6 ae					.word	Assemble_stx                     ; $b9 STX
>941c	14 af					.word	Assemble_sty                     ; $ba STY
>941e	0a af					.word	Assemble_stz                     ; $bb STZ
>9420	a8 af					.word	Assemble_tax                     ; $bc TAX
>9422	a4 af					.word	Assemble_tay                     ; $bd TAY
>9424	2d af					.word	Assemble_trb                     ; $be TRB
>9426	28 af					.word	Assemble_tsb                     ; $bf TSB
>9428	b0 af					.word	Assemble_tsx                     ; $c0 TSX
>942a	98 af					.word	Assemble_txa                     ; $c1 TXA
>942c	a0 af					.word	Assemble_txs                     ; $c2 TXS
>942e	9c af					.word	Assemble_tya                     ; $c3 TYA

;******  Return to file: ./common/commands/run.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/stop.asm

.9430					StopCommand:
.9430	a9 08		lda #$08		lda	#8
.9432	4c 67 96	jmp $9667		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/expandline.asm

.9435					ListConvertLine:
.9435	9c 9d 04	stz $049d			stz 	tbOffset
.9438	9c a9 04	stz $04a9			stz 	tokenBuffer
.943b	a0 02		ldy #$02			ldy 	#2 							; convert line number to string
.943d	b1 30		lda ($30),y			lda 	(codePtr),y
.943f	aa		tax				tax
.9440	88		dey				dey
.9441	b1 30		lda ($30),y			lda 	(codePtr),y
.9443	20 85 ab	jsr $ab85			jsr 	ConvertInt16
.9446	85 36		sta $36				sta 	zTemp0 						; copy number into buffer
.9448	86 37		stx $37				stx 	zTemp0+1
.944a	a0 00		ldy #$00			ldy 	#0
.944c					_LCCopyNumber:
.944c	b1 36		lda ($36),y			lda 	(zTemp0),y
.944e	20 4e 95	jsr $954e			jsr 	LCLWrite
.9451	c8		iny				iny
.9452	b1 36		lda ($36),y			lda 	(zTemp0),y
.9454	d0 f6		bne $944c			bne 	_LCCopyNumber
.9456					_LCPadOut:
.9456	a9 20		lda #$20			lda 	#' '						; pad out to 6 characters
.9458	20 4e 95	jsr $954e			jsr 	LCLWrite
.945b	ad 9d 04	lda $049d			lda 	tbOffset
.945e	c9 06		cmp #$06			cmp 	#6
.9460	d0 f4		bne $9456			bne 	_LCPadOut
.9462	a0 03		ldy #$03			ldy 	#3 							; start position.
.9464					_LCMainLoop:
.9464	b1 30		lda ($30),y			lda 	(codePtr),y
.9466	c9 80		cmp #$80			cmp 	#KWC_EOL 					; end of line ?
.9468	f0 17		beq $9481			beq 	_LCExit
.946a	c9 10		cmp #$10			cmp 	#16 						; 0-5 are the double punctuations
.946c	90 14		bcc $9482			bcc 	_LCDoubles
.946e	c9 20		cmp #$20			cmp 	#32 						; 16-31 are shifted punctuation from 64-91
.9470	90 20		bcc $9492			bcc 	_LCShiftPunc
.9472	c9 40		cmp #$40			cmp 	#64 						; 32-64 are as stored, punc and digits
.9474	90 2b		bcc $94a1			bcc 	_LCPunctuation
.9476	c9 80		cmp #$80			cmp 	#128 						; 64-127 are variable identifiers.
.9478	90 2d		bcc $94a7			bcc 	_LCIdentifiers
.947a	c9 fe		cmp #$fe			cmp 	#254 						; 128-253 are tokenised words
.947c	90 49		bcc $94c7			bcc 	_LCTokens
.947e	4c 22 95	jmp $9522			jmp 	_LCData 					; 254-5 are data objects
.9481					_LCExit:
.9481	60		rts				rts
.9482					_LCDoubles:
.9482	48		pha				pha
.9483	4a		lsr a				lsr 	a 							; put bit 2 into bit 1
.9484	29 02		and #$02			and 	#2
.9486	09 3c		ora #$3c			ora 	#60 						; make < >
.9488	20 4e 95	jsr $954e			jsr 	LCLWrite
.948b	68		pla				pla 								; restore, do lower bit
.948c	29 03		and #$03			and 	#3
.948e	09 3c		ora #$3c			ora 	#60
.9490	80 0f		bra $94a1			bra		_LCPunctuation 				; print, increment, loop
.9492					_LCShiftPunc:
.9492	aa		tax				tax 								; save in X
.9493	29 07		and #$07			and 	#7 							; lower 3 bits
.9495	f0 02		beq $9499			beq 	_LCNoAdd
.9497	09 18		ora #$18			ora 	#24 						; adds $18 to it.
.9499					_LCNoAdd:
.9499	e0 18		cpx #$18			cpx 	#24 						; if >= 24 add $20
.949b	90 02		bcc $949f			bcc 	_LCNoAdd2
.949d	09 20		ora #$20			ora 	#32 						; adds $20
.949f					_LCNoAdd2:
.949f	09 40		ora #$40			ora 	#$40 						; shift into 64-127 range and fall through.
.94a1					_LCPunctuation:
.94a1	c8		iny				iny 								; consume character
.94a2	20 4e 95	jsr $954e			jsr 	LCLWrite 					; write it out.
.94a5	80 bd		bra $9464			bra 	_LCMainLoop 				; go round again.
.94a7					_LCIdentifiers:
.94a7	18		clc				clc 								; convert to physical address
.94a8	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.94aa	85 37		sta $37				sta 	zTemp0+1
.94ac	c8		iny				iny
.94ad	b1 30		lda ($30),y			lda 	(codePtr),y
.94af	85 36		sta $36				sta 	zTemp0
.94b1	c8		iny				iny
.94b2	5a		phy				phy 								; save position
.94b3	a0 07		ldy #$07			ldy 	#7 							; output the identifier.
.94b5					_LCOutIdentifier:
.94b5	c8		iny				iny
.94b6	b1 36		lda ($36),y			lda 	(zTemp0),y
.94b8	29 7f		and #$7f			and 	#$7F
.94ba	20 7c 95	jsr $957c			jsr 	LCLLowerCase
.94bd	20 4e 95	jsr $954e			jsr 	LCLWrite
.94c0	b1 36		lda ($36),y			lda 	(zTemp0),y				 	; ends when bit 7 set.
.94c2	10 f1		bpl $94b5			bpl 	_LCOutIdentifier
.94c4	7a		ply				ply 								; restore position
.94c5	80 9d		bra $9464			bra 	_LCMainLoop
.94c7					_LCTokens:
.94c7	aa		tax				tax 								; token in X
.94c8	a9 d5		lda #$d5			lda 	#((KeywordSet2) & $FF)
.94ca	85 36		sta $36				sta 	0+zTemp0
.94cc	a9 a5		lda #$a5			lda 	#((KeywordSet2) >> 8)
.94ce	85 37		sta $37				sta 	1+zTemp0
.94d0	e0 82		cpx #$82			cpx 	#$82
.94d2	f0 16		beq $94ea			beq 	_LCUseShift
.94d4	a9 80		lda #$80			lda 	#((KeywordSet1) & $FF)
.94d6	85 36		sta $36				sta 	0+zTemp0
.94d8	a9 a5		lda #$a5			lda 	#((KeywordSet1) >> 8)
.94da	85 37		sta $37				sta 	1+zTemp0
.94dc	e0 81		cpx #$81			cpx 	#$81
.94de	f0 0a		beq $94ea			beq 	_LCUseShift
.94e0	a9 d6		lda #$d6			lda 	#((KeywordSet0) & $FF)
.94e2	85 36		sta $36				sta 	0+zTemp0
.94e4	a9 a3		lda #$a3			lda 	#((KeywordSet0) >> 8)
.94e6	85 37		sta $37				sta 	1+zTemp0
.94e8	80 01		bra $94eb			bra 	_LCNoShift
.94ea					_LCUseShift:
.94ea	c8		iny				iny
.94eb					_LCNoShift:
.94eb	20 5d 95	jsr $955d			jsr 	LCCheckSpaceRequired 		; do we need a space ?
.94ee	b1 30		lda ($30),y			lda 	(codePtr),y
.94f0	aa		tax				tax 								; into X
.94f1					_LCFindText:
.94f1	ca		dex				dex
.94f2	10 0e		bpl $9502			bpl 	_LCFoundText 				; found text.
.94f4	b2 36		lda ($36)			lda 	(zTemp0) 					; length of text
.94f6	1a		inc a				inc 	a 							; one extra for size
.94f7	38		sec				sec 								; one extra for checksum
.94f8	65 36		adc $36				adc 	zTemp0 						; go to next token
.94fa	85 36		sta $36				sta 	zTemp0
.94fc	90 f3		bcc $94f1			bcc 	_LCFindText
.94fe	e6 37		inc $37				inc 	zTemp0+1
.9500	80 ef		bra $94f1			bra 	_LCFindText
.9502					_LCFoundText:
.9502	5a		phy				phy 								; save List position
.9503	b2 36		lda ($36)			lda 	(zTemp0)					; count to print
.9505	aa		tax				tax
.9506	a0 02		ldy #$02			ldy 	#2
.9508					_LCCopyToken:
.9508	b1 36		lda ($36),y			lda 	(zTemp0),y
.950a	20 7c 95	jsr $957c			jsr 	LCLLowerCase
.950d	20 4e 95	jsr $954e			jsr 	LCLWrite
.9510	c8		iny				iny
.9511	ca		dex				dex
.9512	d0 f4		bne $9508			bne 	_LCCopyToken
.9514	c9 28		cmp #$28			cmp 	#"(" 						; if last char not ( print a space
.9516	f0 05		beq $951d			beq 	_LCNoSpace
.9518	a9 20		lda #$20			lda 	#' '
.951a	20 4e 95	jsr $954e			jsr 	LCLWrite
.951d					_LCNoSpace:
.951d	7a		ply				ply 								; restore position.
.951e	c8		iny				iny 								; consume token
.951f	4c 64 94	jmp $9464			jmp 	_LCMainLoop 				; and go around again.
.9522					_LCData:
.9522	48		pha				pha 								; save type $FE/$FF
.9523	a2 24		ldx #$24			ldx 	#'$' 						; figure out $ or "
.9525	c9 fe		cmp #$fe			cmp 	#$FE
.9527	f0 02		beq $952b			beq 	_LCHaveOpener
.9529	a2 22		ldx #$22			ldx 	#'"'
.952b					_LCHaveOpener:
.952b	8a		txa				txa 								; output prefix (# or ")
.952c	20 4e 95	jsr $954e			jsr 	LCLWrite
.952f	c8		iny				iny 								; get count
.9530	b1 30		lda ($30),y			lda 	(codePtr),y
.9532	aa		tax				tax
.9533	c8		iny				iny 								; point at first character
.9534					_LCOutData:
.9534	b1 30		lda ($30),y			lda 	(codePtr),y
.9536	c9 00		cmp #$00			cmp 	#0
.9538	f0 03		beq $953d			beq 	_LCNoPrint
.953a	20 4e 95	jsr $954e			jsr 	LCLWrite
.953d					_LCNoPrint:
.953d	c8		iny				iny
.953e	ca		dex				dex
.953f	d0 f3		bne $9534			bne 	_LCOutData
.9541	68		pla				pla 								; closing " required ?
.9542	c9 ff		cmp #$ff			cmp 	#$FF
.9544	d0 05		bne $954b			bne 	_LCNoQuote
.9546	a9 22		lda #$22			lda 	#'"'
.9548	20 4e 95	jsr $954e			jsr 	LCLWrite
.954b					_LCNoQuote:
.954b	4c 64 94	jmp $9464			jmp 	_LCMainLoop
.954e					LCLWrite:
.954e	da		phx				phx
.954f	ae 9d 04	ldx $049d			ldx 	tbOffset
.9552	9d a9 04	sta $04a9,x			sta 	tokenBuffer,x
.9555	9e aa 04	stz $04aa,x			stz 	tokenBuffer+1,x
.9558	ee 9d 04	inc $049d			inc 	tbOffset
.955b	fa		plx				plx
.955c	60		rts				rts
.955d					LCCheckSpaceRequired:
.955d	ae 9d 04	ldx $049d			ldx 	tbOffset
.9560	bd a8 04	lda $04a8,x			lda 	tokenBuffer-1,x 			; previous character
.9563	20 7c 95	jsr $957c			jsr 	LCLLowerCase 				; saves a little effort
.9566	c9 30		cmp #$30			cmp 	#"0" 						; check if it was 0-9 A-Z a-z if so need space.
.9568	90 11		bcc $957b			bcc 	_LCCSRExit
.956a	c9 3a		cmp #$3a			cmp 	#"9"+1
.956c	90 08		bcc $9576			bcc 	_LCCSRSpace
.956e	c9 61		cmp #$61			cmp 	#"a"
.9570	90 09		bcc $957b			bcc 	_LCCSRExit
.9572	c9 7b		cmp #$7b			cmp 	#"z"+1
.9574	b0 05		bcs $957b			bcs 	_LCCSRExit
.9576					_LCCSRSpace:
.9576	a9 20		lda #$20			lda 	#' '
.9578	20 4e 95	jsr $954e			jsr 	LCLWrite
.957b					_LCCSRExit:
.957b	60		rts				rts
.957c					LCLLowerCase:
.957c	c9 41		cmp #$41			cmp 	#"A"
.957e	90 06		bcc $9586			bcc 	_LCLLCOut
.9580	c9 5b		cmp #$5b			cmp 	#"Z"+1
.9582	b0 02		bcs $9586			bcs 	_LCLLCOut
.9584	69 20		adc #$20			adc 	#$20
.9586					_LCLLCOut:
.9586	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/procscan.asm

.9587					ProcedureScan:
.9587	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.9589	85 30		sta $30				sta 	codePtr
.958b	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.958d	85 31		sta $31				sta 	codePtr+1
.958f					_PSLoop:
.958f	b2 30		lda ($30)			lda 	(codePtr)
.9591	f0 42		beq $95d5			beq 	_PSExit
.9593	a0 03		ldy #$03			ldy 	#3 							; is it PROC ?
.9595	b1 30		lda ($30),y			lda 	(codePtr),y
.9597	c9 9d		cmp #$9d			cmp 	#KWD_PROC
.9599	d0 2d		bne $95c8			bne 	_PSNext
.959b	c8		iny				iny 								; get the address of the record to zTemp0 and
.959c	b1 30		lda ($30),y			lda 	(codePtr),y
.959e	29 c0		and #$c0			and 	#$C0
.95a0	c9 40		cmp #$40			cmp 	#$40
.95a2	d0 32		bne $95d6			bne 	_PSSyntax
.95a4	b1 30		lda ($30),y			lda 	(codePtr),y
.95a6	18		clc				clc
.95a7	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.95a9	85 37		sta $37				sta 	zTemp0+1
.95ab	c8		iny				iny 								; LSB
.95ac	b1 30		lda ($30),y			lda 	(codePtr),y
.95ae	85 36		sta $36				sta 	zTemp0
.95b0	c8		iny				iny 								; character after variable call.
.95b1	98		tya				tya 								; save Y offset at +7
.95b2	a0 07		ldy #$07			ldy 	#7
.95b4	91 36		sta ($36),y			sta 	(zTemp0),y
.95b6	a9 18		lda #$18			lda 	#NSTProcedure 				; mark it as procedure
.95b8	a0 02		ldy #$02			ldy 	#2
.95ba	91 36		sta ($36),y			sta 	(zTemp0),y
.95bc	a2 00		ldx #$00			ldx 	#0 							; copy code-Ptr in
.95be					_PSCopy:
.95be	b5 30		lda $30,x			lda 	safePtr,x
.95c0	c8		iny				iny
.95c1	91 36		sta ($36),y			sta 	(zTemp0),y
.95c3	e8		inx				inx
.95c4	e0 04		cpx #$04			cpx 	#4
.95c6	d0 f6		bne $95be			bne 	_PSCopy
.95c8					_PSNext:
.95c8	18		clc				clc
.95c9	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.95cb	65 30		adc $30				adc 	codePtr
.95cd	85 30		sta $30				sta 	codePtr
.95cf	90 02		bcc $95d3			bcc 	_CREExit
.95d1	e6 31		inc $31				inc 	codePtr+1
.95d3					_CREExit:
.95d3	80 ba		bra $958f			bra 	_PSLoop
.95d5					_PSExit:
.95d5	60		rts				rts
.95d6					_PSSyntax:
.95d6	4c 0f b0	jmp $b00f			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/scanforward.asm

.95d9					ScanForward:
.95d9	85 36		sta $36				sta 	zTemp0 						; save XA as the two possible matches.
.95db	86 37		stx $37				stx 	zTemp0+1
.95dd	64 38		stz $38				stz 	zTemp1 						; this is the structure count - goes up with WHILE/FOR
.95df					_ScanLoop:
.95df	b1 30		lda ($30),y			lda 	(codePtr),y
.95e1	c8		iny				iny
.95e2	a6 38		ldx $38				ldx 	zTemp1 						; if the count is > 0 cannot match as in substructure
.95e4	d0 0e		bne $95f4			bne 	_ScanGoNext
.95e6	c5 36		cmp $36				cmp 	zTemp0 						; see if either matches
.95e8	f0 04		beq $95ee			beq 	_ScanMatch
.95ea	c5 37		cmp $37				cmp 	zTemp0+1
.95ec	d0 06		bne $95f4			bne 	_ScanGoNext
.95ee					_ScanMatch:
.95ee	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if asked for EOL, backtrack.
.95f0	d0 01		bne $95f3			bne 	_ScanNotEndEOL
.95f2	88		dey				dey
.95f3					_ScanNotEndEOL:
.95f3	60		rts				rts
.95f4					_ScanGoNext:
.95f4	c9 40		cmp #$40			cmp 	#$40 						; if 00-3F, punctuation characters, loop back
.95f6	90 e7		bcc $95df			bcc 	_ScanLoop
.95f8	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if 40-82, skip one extra.
.95fa	90 18		bcc $9614			bcc 	_ScanSkipOne
.95fc	c9 fc		cmp #$fc			cmp 	#$FC 						; FC-FF are data skips
.95fe	b0 2f		bcs $962f			bcs 	_ScanSkipData
.9600	c9 9b		cmp #$9b			cmp 	#KWC_FIRST_STRUCTURE 		; structure keyword ?
.9602	90 db		bcc $95df			bcc 	_ScanLoop 					; if not, ordinary keywords.
.9604	c9 a6		cmp #$a6			cmp 	#KWC_LAST_STRUCTURE+1
.9606	b0 d7		bcs $95df			bcs 	_ScanLoop
.9608	c6 38		dec $38				dec 	zTemp1 						; decrement the sructure count
.960a	c9 a0		cmp #$a0			cmp 	#KWC_FIRST_STRUCTURE_DEC 	; back if it is a dec structure (e.g. WEND/NEXT)
.960c	b0 d1		bcs $95df			bcs 	_ScanLoop
.960e	e6 38		inc $38				inc 	zTemp1 						; so it's an increment structure
.9610	e6 38		inc $38				inc 	zTemp1 						; twice to undo the dec
.9612	80 cb		bra $95df			bra 	_ScanLoop
.9614					_ScanSkipOne:
.9614	c8		iny				iny 								; consume the extra one.
.9615	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if not EOL loop back
.9617	d0 c6		bne $95df			bne 	_ScanLoop
.9619	18		clc				clc
.961a	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.961c	65 30		adc $30				adc 	codePtr
.961e	85 30		sta $30				sta 	codePtr
.9620	90 02		bcc $9624			bcc 	_CREExit
.9622	e6 31		inc $31				inc 	codePtr+1
.9624					_CREExit:
.9624	a0 03		ldy #$03			ldy 	#3 							; scan start position.
.9626	b2 30		lda ($30)			lda 	(codePtr)
.9628	d0 b5		bne $95df			bne 	_ScanLoop 					; if not zero, more to scan
.962a	a9 13		lda #$13		lda	#19
.962c	4c 67 96	jmp $9667		jmp	ErrorHandler
.962f					_ScanSkipData:
.962f	88		dey				dey 								; point at data token
.9630	c8		iny				iny
.9631	98		tya				tya
.9632	38		sec				sec
.9633	71 30		adc ($30),y			adc 	(codePtr),y
.9635	a8		tay				tay
.9636	80 a7		bra $95df			bra 	_ScanLoop

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/while.asm

.9638					Command_WHILE:
.9638	5a		phy				phy 								; save position of the test
.9639	a2 00		ldx #$00			ldx 	#0
.963b	20 73 a1	jsr $a173			jsr 	EvaluateNumber 				; work out the number
.963e	20 4f a2	jsr $a24f			jsr 	NSMIsZero 					; check if zero
.9641	f0 0e		beq $9651			beq 	_WHExitLoop 				; if so exit the loop
.9643	98		tya				tya 								; position *after* test.
.9644	7a		ply				ply 								; restore position before test, at WHILE
.9645	88		dey				dey
.9646	48		pha				pha 								; push after test on the stack
.9647	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; allocate 6 bytes on the return stack.
.9649	20 d3 a2	jsr $a2d3			jsr 	StackOpen
.964c	20 17 a3	jsr $a317			jsr 	STKSaveCodePosition 		; save loop position - where the test value is.
.964f	7a		ply				ply 								; restore the position *after* the test
.9650	60		rts				rts
.9651					_WHExitLoop:
.9651	68		pla				pla 								; throw post loop position
.9652	a9 a5		lda #$a5			lda 	#KWD_WEND 					; scan forward past WEND
.9654	aa		tax				tax
.9655	20 d9 95	jsr $95d9			jsr 	ScanForward
.9658	60		rts				rts
.9659					Command_WEND:
.9659	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; check WHILE is TOS
.965b	a2 10		ldx #$10			ldx 	#ERRID_WHILE 				; this error
.965d	20 ff a2	jsr $a2ff			jsr 	StackCheckFrame
.9660	20 28 a3	jsr $a328			jsr 	STKLoadCodePosition 		; loop back
.9663	20 f1 a2	jsr $a2f1			jsr 	StackClose		 			; erase the frame
.9666	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/charcheck.asm

.aa29					CheckRightBracket:
.aa29	b1 30		lda ($30),y			lda 	(codePtr),y
.aa2b	c8		iny				iny
.aa2c	c9 29		cmp #$29			cmp 	#KWD_RPAREN 						; exit if matches
.aa2e	d0 0f		bne $aa3f			bne 	CNAFail
.aa30	60		rts				rts
.aa31					CheckComma:
.aa31	b1 30		lda ($30),y			lda 	(codePtr),y
.aa33	c8		iny				iny
.aa34	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 						; exit if matches
.aa36	d0 07		bne $aa3f			bne 	CNAFail
.aa38	60		rts				rts
.aa39					CheckNextA:
.aa39	d1 30		cmp ($30),y			cmp 	(codePtr),y
.aa3b	d0 02		bne $aa3f			bne 	CNAFail
.aa3d	c8		iny				iny 								; skip character
.aa3e	60		rts				rts 								; and exit
.aa3f					CNAFail:
.aa3f	4c 0f b0	jmp $b00f			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/errors.asm

.9667					ErrorHandler:
.9667	a8		tay				tay 								; find the error text
.9668	f0 49		beq $96b3			beq 	_EHEnd
.966a	a2 00		ldx #$00			ldx 	#0
.966c	a9 28		lda #$28			lda 	#((ErrorText) & $FF)
.966e	85 36		sta $36				sta 	0+zTemp0
.9670	a9 b0		lda #$b0			lda 	#((ErrorText) >> 8)
.9672	85 37		sta $37				sta 	1+zTemp0
.9674					_EHFind:
.9674	88		dey				dey 								; found the error text ?
.9675	f0 0e		beq $9685			beq 	_EHFound
.9677					_EHFindZero:
.9677	b2 36		lda ($36)			lda 	(zTemp0) 					; find the next error
.9679	e6 36		inc $36				inc 	zTemp0
.967b	d0 02		bne $967f			bne 	_EHFNoCarry
.967d	e6 37		inc $37				inc 	zTemp0+1
.967f					_EHFNoCarry:
.967f	c9 00		cmp #$00			cmp 	#0
.9681	d0 f4		bne $9677			bne 	_EHFindZero
.9683	80 ef		bra $9674			bra 	_EHFind
.9685					_EHFound:
.9685	a5 36		lda $36				lda 	zTemp0 						; print message
.9687	a6 37		ldx $37				ldx 	zTemp0+1
.9689	20 c0 96	jsr $96c0			jsr 	PrintStringXA
.968c	a0 01		ldy #$01			ldy 	#1 							; if line number zero don't print i
.968e	b1 30		lda ($30),y			lda 	(codePtr),y
.9690	d0 05		bne $9697			bne 	_EHAtMsg
.9692	c8		iny				iny
.9693	b1 30		lda ($30),y			lda 	(codePtr),y
.9695	f0 17		beq $96ae			beq 	_EHCREnd
.9697					_EHAtMsg:
.9697	a2 96		ldx #$96			ldx 	#_AtMsg >> 8 				; print " at "
.9699	a9 b6		lda #$b6			lda 	#_AtMsg & $FF
.969b	20 c0 96	jsr $96c0			jsr 	PrintStringXA
.969e	a0 01		ldy #$01			ldy 	#1 							; line number into XA
.96a0	b1 30		lda ($30),y			lda 	(codePtr),y
.96a2	48		pha				pha
.96a3	c8		iny				iny
.96a4	b1 30		lda ($30),y			lda 	(codePtr),y
.96a6	aa		tax				tax
.96a7	68		pla				pla
.96a8	20 85 ab	jsr $ab85			jsr 	ConvertInt16 				; convert XA to string
.96ab	20 c0 96	jsr $96c0			jsr 	PrintStringXA 				; and print it.
.96ae					_EHCREnd:
.96ae	a9 0d		lda #$0d			lda 	#13 						; new line
.96b0	20 b6 b1	jsr $b1b6			jsr 	EXTPrintCharacter
.96b3					_EHEnd:
.96b3	4c a6 8b	jmp $8ba6			jmp 	WarmStart
>96b6	20 61 74 20 6c 69 6e 65		_AtMsg:	.text 	" at line ",0
>96be	20 00
.96c0					PrintStringXA:
.96c0	5a		phy				phy
.96c1	86 37		stx $37				stx 	zTemp0+1
.96c3	85 36		sta $36				sta 	zTemp0
.96c5	a0 00		ldy #$00			ldy 	#0
.96c7					_PSXALoop:
.96c7	b1 36		lda ($36),y			lda 	(zTemp0),y
.96c9	f0 06		beq $96d1			beq 	_PSXAExit
.96cb	20 b6 b1	jsr $b1b6			jsr 	EXTPrintCharacter
.96ce	c8		iny				iny
.96cf	80 f6		bra $96c7			bra 	_PSXALoop
.96d1					_PSXAExit:
.96d1	7a		ply				ply
.96d2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/compare.asm

.96d3					UnaryTrue:
.96d3	fa		plx				plx
.96d4					ReturnTrue:
.96d4	a9 01		lda #$01			lda 	#1  						; set to 1
.96d6	20 21 a2	jsr $a221			jsr 	NSMSetByte
.96d9	a9 80		lda #$80			lda 	#$80 						; set sign flag, so it is -1
.96db	9d 00 04	sta $0400,x			sta 	NSStatus,x
.96de	60		rts				rts
.96df					UnaryFalse:
.96df	fa		plx				plx
.96e0					ReturnFalse:
.96e0	4c 1f a2	jmp $a21f			jmp 	NSMSetZero 					; set it all to zero
.96e3					BinaryCompareEqual:
.96e3	fa		plx				plx
.96e4	20 1f 97	jsr $971f			jsr 	CompareBaseCode
.96e7	c9 00		cmp #$00			cmp 	#0
.96e9	f0 e9		beq $96d4			beq 	ReturnTrue
.96eb	80 f3		bra $96e0			bra 	ReturnFalse
.96ed					BinaryCompareLess:
.96ed	fa		plx				plx
.96ee	20 1f 97	jsr $971f			jsr 	CompareBaseCode
.96f1	c9 ff		cmp #$ff			cmp 	#$FF
.96f3	f0 df		beq $96d4			beq 	ReturnTrue
.96f5	80 e9		bra $96e0			bra 	ReturnFalse
.96f7					BinaryCompareGreater:
.96f7	fa		plx				plx
.96f8	20 1f 97	jsr $971f			jsr 	CompareBaseCode
.96fb	c9 01		cmp #$01			cmp 	#1
.96fd	f0 d5		beq $96d4			beq 	ReturnTrue
.96ff	80 df		bra $96e0			bra 	ReturnFalse
.9701					BinaryCompareNotEqual:
.9701	fa		plx				plx
.9702	20 1f 97	jsr $971f			jsr 	CompareBaseCode
.9705	c9 00		cmp #$00			cmp 	#0
.9707	d0 cb		bne $96d4			bne 	ReturnTrue
.9709	80 d5		bra $96e0			bra 	ReturnFalse
.970b					BinaryCompareLessEqual:
.970b	fa		plx				plx
.970c	20 1f 97	jsr $971f			jsr 	CompareBaseCode
.970f	c9 01		cmp #$01			cmp 	#1
.9711	d0 c1		bne $96d4			bne 	ReturnTrue
.9713	80 cb		bra $96e0			bra 	ReturnFalse
.9715					BinaryCompareGreaterEqual:
.9715	fa		plx				plx
.9716	20 1f 97	jsr $971f			jsr 	CompareBaseCode
.9719	c9 ff		cmp #$ff			cmp 	#$FF
.971b	d0 b7		bne $96d4			bne 	ReturnTrue
.971d	80 c1		bra $96e0			bra 	ReturnFalse
.971f					CompareBaseCode:
.971f	20 80 9b	jsr $9b80			jsr 	DereferenceTopTwo 			; make both values if references.
.9722	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if either is a string.
.9725	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9728	29 10		and #$10			and 	#NSTString
.972a	d0 40		bne $976c			bne 	_CBCString
.972c	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check both are integers
.972f	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9732	d0 3b		bne $976f			bne 	_CBCFloat
.9734	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9737	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.973a	29 08		and #$08			and 	#NSTFloat
.973c	d0 31		bne $976f			bne 	_CBCFloat
.973e	20 72 97	jsr $9772			jsr 	CompareFixMinusZero
.9741	e8		inx				inx
.9742	20 72 97	jsr $9772			jsr 	CompareFixMinusZero
.9745	ca		dex				dex
.9746	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; are the signs different ?
.9749	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.974c	10 0b		bpl $9759			bpl 	_CDCSameSign
.974e	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; if first one is -ve
.9751	30 16		bmi $9769			bmi 	_CBCLess 					; return $FF
.9753					_CBCGreater:
.9753	a9 01		lda #$01			lda 	#1
.9755	60		rts				rts
.9756					_CBCEqual:
.9756	a9 00		lda #$00			lda 	#0
.9758	60		rts				rts
.9759					_CDCSameSign:
.9759	20 82 98	jsr $9882			jsr 	SubTopTwoStack 				; unsigned subtract
.975c	20 4f a2	jsr $a24f			jsr 	NSMIsZero 					; or the mantissa together
.975f	f0 f5		beq $9756			beq 	_CBCEqual 					; -0 == 0
.9761	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; sign of the result. if +ve return $01 else return $FF
.9764	5d 01 04	eor $0401,x			eor 	NSStatus+1,x 				; however if both were -ve this is inverted
.9767	10 ea		bpl $9753			bpl 	_CBCGreater
.9769					_CBCLess:
.9769	a9 ff		lda #$ff			lda 	#$FF
.976b	60		rts				rts
.976c					_CBCString:
.976c	4c d8 97	jmp $97d8			jmp 	CompareStrings
.976f					_CBCFloat:
.976f	4c 81 ac	jmp $ac81			jmp 	CompareFloat
.9772					CompareFixMinusZero:
.9772	20 4f a2	jsr $a24f			jsr 	NSMIsZero
.9775	d0 03		bne $977a			bne 	_CFXMZNotZero
.9777	9e 00 04	stz $0400,x			stz 	NSStatus,x
.977a					_CFXMZNotZero:
.977a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/concat.asm

.977b					StringConcat:
.977b	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check both strings
.977e	3d 01 04	and $0401,x			and 	NSStatus+1,x
.9781	29 18		and #$18			and 	#NSBTypeMask
.9783	c9 10		cmp #$10			cmp 	#NSTString
.9785	d0 4e		bne $97d5			bne		_SCType
.9787	64 38		stz $38				stz 	zTemp1 						; counting total length
.9789	e8		inx				inx
.978a	20 a8 97	jsr $97a8			jsr 	_SCSetupZ0 					; setup for second
.978d	20 b3 97	jsr $97b3			jsr 	_SCLengthZ0 				; length for second
.9790	ca		dex				dex
.9791	20 a8 97	jsr $97a8			jsr 	_SCSetupZ0 					; setup for first
.9794	20 b3 97	jsr $97b3			jsr 	_SCLengthZ0 				; length for first
.9797	a5 38		lda $38				lda 	zTemp1 						; allocate memory
.9799	20 38 b3	jsr $b338			jsr 	StringTempAllocate
.979c	20 c6 97	jsr $97c6			jsr 	_SCCopy 					; copy first out, using zTemp0 from above
.979f	e8		inx				inx
.97a0	20 a8 97	jsr $97a8			jsr 	_SCSetupZ0 					; copy second out
.97a3	20 c6 97	jsr $97c6			jsr 	_SCCopy
.97a6	ca		dex				dex
.97a7	60		rts				rts
.97a8					_SCSetupZ0:
.97a8	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.97ab	85 36		sta $36				sta 	zTemp0
.97ad	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.97b0	85 37		sta $37				sta 	zTemp0+1
.97b2	60		rts				rts
.97b3					_SCLengthZ0:
.97b3	5a		phy				phy
.97b4	a0 00		ldy #$00			ldy 	#0
.97b6					_SCLenLoop:
.97b6	b1 36		lda ($36),y			lda 	(zTemp0),y
.97b8	f0 0a		beq $97c4			beq 	_SCLExit
.97ba	c8		iny				iny
.97bb	e6 38		inc $38				inc 	zTemp1
.97bd	10 f7		bpl $97b6			bpl		_SCLenLoop
.97bf	a9 09		lda #$09		lda	#9
.97c1	4c 67 96	jmp $9667		jmp	ErrorHandler
.97c4					_SCLExit:
.97c4	7a		ply				ply
.97c5	60		rts				rts
.97c6					_SCCopy:
.97c6	5a		phy				phy
.97c7	a0 00		ldy #$00			ldy 	#0
.97c9					_SCCopyLoop:
.97c9	b1 36		lda ($36),y			lda 	(zTemp0),y
.97cb	f0 06		beq $97d3			beq 	_SCCExit
.97cd	20 76 b3	jsr $b376			jsr 	StringTempWrite
.97d0	c8		iny				iny
.97d1	80 f6		bra $97c9			bra 	_SCCopyLoop
.97d3					_SCCExit:
.97d3	7a		ply				ply
.97d4	60		rts				rts
.97d5					_SCType:
.97d5	4c 19 b0	jmp $b019			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/divide.asm

.aa42					IntegerDivide:
.aa42	fa		plx				plx
.aa43	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.aa46	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.aa49	0a		asl a				asl 	a 							; shift reference bit into sign bit
.aa4a	0a		asl a				asl 	a
.aa4b	10 05		bpl $aa52			bpl 	_NotRef
.aa4d	48		pha				pha
.aa4e	20 80 9b	jsr $9b80			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.aa51	68		pla				pla
.aa52					_NotRef:
.aa52	0a		asl a				asl 	a
.aa53	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.aa55	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.aa58	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.aa5b	f0 03		beq $aa60			beq 	_IntegerCode 				; if clear, then we have two integers
.aa5d	4c 19 b0	jmp $b019			jmp 	TypeError 					; anything else, type mismatch.
.aa60					_IntegerCode:
.aa60	20 82 aa	jsr $aa82			jsr 	CheckDivideZero 			; do div zero check
.aa63	20 ba aa	jsr $aaba			jsr 	Int32Divide 				; do the division
.aa66	20 77 ab	jsr $ab77			jsr 	CalculateSign 				; calculate result sign
.aa69					NSMCopyPlusTwoToZero:
.aa69	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.aa6c	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.aa6f	bd 12 04	lda $0412,x			lda 	NSMantissa1+2,x
.aa72	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.aa75	bd 1a 04	lda $041a,x			lda 	NSMantissa2+2,x
.aa78	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.aa7b	bd 22 04	lda $0422,x			lda 	NSMantissa3+2,x
.aa7e	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.aa81	60		rts				rts
.aa82					CheckDivideZero:
.aa82	e8		inx				inx
.aa83	20 4f a2	jsr $a24f			jsr 	NSMIsZero
.aa86	f0 02		beq $aa8a			beq 	_CDVError
.aa88	ca		dex				dex
.aa89	60		rts				rts
.aa8a					_CDVError:
.aa8a	a9 03		lda #$03		lda	#3
.aa8c	4c 67 96	jmp $9667		jmp	ErrorHandler
.aa8f					IntegerModulus:
.aa8f	fa		plx				plx
.aa90	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.aa93	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.aa96	0a		asl a				asl 	a 							; shift reference bit into sign bit
.aa97	0a		asl a				asl 	a
.aa98	10 05		bpl $aa9f			bpl 	_NotRef
.aa9a	48		pha				pha
.aa9b	20 80 9b	jsr $9b80			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.aa9e	68		pla				pla
.aa9f					_NotRef:
.aa9f	0a		asl a				asl 	a
.aaa0	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.aaa2	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.aaa5	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.aaa8	f0 03		beq $aaad			beq 	_IntegerCode 				; if clear, then we have two integers
.aaaa	4c 19 b0	jmp $b019			jmp 	TypeError 					; anything else, type mismatch.
.aaad					_IntegerCode:
.aaad					IntegerModulusNoCheck:
.aaad	20 82 aa	jsr $aa82			jsr 	CheckDivideZero 			; do div zero check
.aab0	20 ba aa	jsr $aaba			jsr 	Int32Divide 				; do the division
.aab3	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; clear the sign bit.
.aab6	5e 00 04	lsr $0400,x			lsr 	NSStatus,x
.aab9	60		rts				rts
.aaba					Int32Divide:
.aaba	48		pha				pha 								; save AXY
.aabb	5a		phy				phy
.aabc	20 f6 a1	jsr $a1f6			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.aabf	20 1b a2	jsr $a21b			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.aac2	a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.aac4					_I32DivideLoop:
.aac4	e8		inx				inx
.aac5	e8		inx				inx
.aac6	20 34 a2	jsr $a234			jsr 	NSMShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.aac9	ca		dex				dex
.aaca	ca		dex				dex
.aacb	20 35 a2	jsr $a235			jsr 	NSMRotateLeft
.aace	20 fa aa	jsr $aafa			jsr 	DivideCheckSubtract 		; check if subtract possible
.aad1	90 03		bcc $aad6			bcc 	_I32DivideNoCarryIn
.aad3	fe 0a 04	inc $040a,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.aad6					_I32DivideNoCarryIn:
.aad6	88		dey				dey 								; loop round till division completed.
.aad7	d0 eb		bne $aac4			bne 	_I32DivideLoop
.aad9	7a		ply				ply 								; restore AXY and exit
.aada	68		pla				pla
.aadb	60		rts				rts
.aadc					Int32ShiftDivide:
.aadc	48		pha				pha 								; save AY
.aadd	5a		phy				phy
.aade	e8		inx				inx 								; clear S[X+2]
.aadf	e8		inx				inx
.aae0	20 1f a2	jsr $a21f			jsr 	NSMSetZero
.aae3	ca		dex				dex
.aae4	ca		dex				dex
.aae5	a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.aae7					_I32SDLoop:
.aae7	20 fa aa	jsr $aafa			jsr 	DivideCheckSubtract 		; check if subtract possible
.aaea	e8		inx				inx
.aaeb	e8		inx				inx
.aaec	20 35 a2	jsr $a235			jsr 	NSMRotateLeft				; shift 64 bit FPA left, rotating carry in
.aaef	ca		dex				dex
.aaf0	ca		dex				dex
.aaf1	20 35 a2	jsr $a235			jsr 	NSMRotateLeft
.aaf4	88		dey				dey 	 							; do 31 times
.aaf5	d0 f0		bne $aae7			bne 	_I32SDLoop
.aaf7	7a		ply				ply 								; restore AY and exit
.aaf8	68		pla				pla
.aaf9	60		rts				rts
.aafa					DivideCheckSubtract:
.aafa	20 82 98	jsr $9882			jsr 	SubTopTwoStack 				; subtract Stack[X+1] from Stack[X+0]
.aafd	b0 04		bcs $ab03			bcs 	_DCSExit 					; if carry set, then could do, exit
.aaff	20 5c 98	jsr $985c			jsr 	AddTopTwoStack 				; add it back in
.ab02	18		clc				clc 								; and return False
.ab03					_DCSExit:
.ab03	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/multiply.asm

.ab04					MulInteger:
.ab04	fa		plx				plx
.ab05	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.ab08	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.ab0b	0a		asl a				asl 	a 							; shift reference bit into sign bit
.ab0c	0a		asl a				asl 	a
.ab0d	10 05		bpl $ab14			bpl 	_NotRef
.ab0f	48		pha				pha
.ab10	20 80 9b	jsr $9b80			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.ab13	68		pla				pla
.ab14					_NotRef:
.ab14	0a		asl a				asl 	a 							; put MSB of type into A:7
.ab15	30 0b		bmi $ab22			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.ab17	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.ab1a	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.ab1d	f0 06		beq $ab25			beq 	_IntegerCode 				; if clear, then we have two integers
.ab1f	4c 58 ad	jmp $ad58			jmp 	FloatingPointMultiply 							; otherwise at least one float.
.ab22					_StringData:
.ab22	4c 23 b0	jmp $b023			jmp 	NotDoneError							; at least one string - don't know both are strings.
.ab25					_IntegerCode:
.ab25	20 32 ab	jsr $ab32			jsr 	MultiplyShort
.ab28	c9 00		cmp #$00			cmp 	#0
.ab2a	f0 05		beq $ab31			beq 	_MIExit
.ab2c	a9 04		lda #$04		lda	#4
.ab2e	4c 67 96	jmp $9667		jmp	ErrorHandler
.ab31					_MIExit:
.ab31	60		rts				rts
.ab32					MultiplyShort:
.ab32	5a		phy				phy 								; save Y
.ab33	20 f6 a1	jsr $a1f6			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.ab36	20 1b a2	jsr $a21b			jsr 	NSMSetZeroMantissaOnly 		; set mantissa S[X] to zero
.ab39	a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.ab3b					_I32MLoop:
.ab3b	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.ab3e	1d 12 04	ora $0412,x			ora 	NSMantissa1+2,x
.ab41	1d 1a 04	ora $041a,x			ora 	NSMantissa2+2,x
.ab44	1d 22 04	ora $0422,x			ora 	NSMantissa3+2,x
.ab47	f0 28		beq $ab71			beq 	_I32MExit 					; exit if zero
.ab49	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.ab4c	29 01		and #$01			and 	#1
.ab4e	f0 0e		beq $ab5e			beq 	_I32MNoAdd
.ab50	20 5c 98	jsr $985c			jsr 	AddTopTwoStack 				; if so add S[X+1] to S[X+0]
.ab53	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.ab56	10 06		bpl $ab5e			bpl 	_I32MNoAdd
.ab58					_I32ShiftRight:
.ab58	20 42 a2	jsr $a242			jsr 	NSMShiftRight 				; shift S[X] right
.ab5b	c8		iny				iny 								; increment shift count
.ab5c	80 0a		bra $ab68			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.ab5e					_I32MNoAdd:
.ab5e	3c 21 04	bit $0421,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.ab61	70 f5		bvs $ab58			bvs 	_I32ShiftRight 				; instead.
.ab63	e8		inx				inx
.ab64	20 34 a2	jsr $a234			jsr 	NSMShiftLeft 				; shift additive S[X+1] left
.ab67	ca		dex				dex
.ab68					_I32MShiftUpper:
.ab68	e8		inx				inx 								; shift S[X+2] right
.ab69	e8		inx				inx
.ab6a	20 42 a2	jsr $a242			jsr 	NSMShiftRight
.ab6d	ca		dex				dex
.ab6e	ca		dex				dex
.ab6f	80 ca		bra $ab3b			bra 	_I32MLoop 					; try again.
.ab71					_I32MExit:
.ab71	20 77 ab	jsr $ab77			jsr 	CalculateSign
.ab74	98		tya				tya 								; shift in A
.ab75	7a		ply				ply 								; restore Y and exit
.ab76	60		rts				rts
.ab77					CalculateSign:
.ab77	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.ab7a	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; shift result left
.ab7d	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.ab80	0a		asl a				asl 	a 							; shift bit 7 into carry
.ab81	7e 00 04	ror $0400,x			ror 	NSStatus,x 					; shift right into status byte.
.ab84	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/scompare.asm

.97d8					CompareStrings:
.97d8	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check both are strings
.97db	3d 01 04	and $0401,x			and 	NSStatus+1,x
.97de	29 10		and #$10			and 	#NSBIsString
.97e0	f0 2c		beq $980e			beq 	_CSTypeError
.97e2	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy string addresses to zTemp0/1
.97e5	85 36		sta $36				sta 	zTemp0
.97e7	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.97ea	85 37		sta $37				sta 	zTemp0+1
.97ec	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.97ef	85 38		sta $38				sta 	zTemp1
.97f1	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.97f4	85 39		sta $39				sta 	zTemp1+1
.97f6	5a		phy				phy 								; save Y so we can access strings
.97f7	a0 ff		ldy #$ff			ldy 	#$FF 						; -1 for pre increment.
.97f9					_CSLoop:
.97f9	c8		iny				iny
.97fa	b1 36		lda ($36),y			lda 	(zTemp0),y 					; check if they are the same
.97fc	d1 38		cmp ($38),y			cmp 	(zTemp1),y
.97fe	d0 06		bne $9806			bne 	_CSDifferent
.9800	c9 00		cmp #$00			cmp 	#0 							; reached end ?
.9802	d0 f5		bne $97f9			bne 	_CSLoop 					; still comparing
.9804					_CSExit:
.9804	7a		ply				ply 								; reached end, return zero in A from EOS
.9805	60		rts				rts
.9806					_CSDifferent:
.9806	a9 ff		lda #$ff			lda 	#255 						; if < return $FF
.9808	90 fa		bcc $9804			bcc		_CSExit
.980a	a9 01		lda #$01			lda 	#1 							; otherwise return 1.
.980c	80 f6		bra $9804			bra 	_CSExit
.980e					_CSTypeError:
.980e	4c 19 b0	jmp $b019			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/shifts.asm

.9811					ShiftLeft:
.9811	38		sec				sec
.9812	80 01		bra $9815			bra 	ShiftMain
.9814					ShiftRight:
.9814	18		clc				clc
.9815					ShiftMain:
.9815	fa		plx				plx 								; restore X
.9816	08		php				php 								; save direction
.9817	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.981a	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.981d	0a		asl a				asl 	a 							; shift reference bit into sign bit
.981e	0a		asl a				asl 	a
.981f	10 05		bpl $9826			bpl 	_NotRef
.9821	48		pha				pha
.9822	20 80 9b	jsr $9b80			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9825	68		pla				pla
.9826					_NotRef:
.9826	0a		asl a				asl 	a
.9827	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9829	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.982c	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.982f	f0 03		beq $9834			beq 	_IntegerCode 				; if clear, then we have two integers
.9831	4c 19 b0	jmp $b019			jmp 	TypeError 					; anything else, type mismatch.
.9834					_IntegerCode:
.9834	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; check number < 32
.9837	29 e0		and #$e0			and 	#$E0
.9839	1d 11 04	ora $0411,x			ora 	NSMantissa1+1,x
.983c	1d 19 04	ora $0419,x			ora 	NSMantissa2+1,x
.983f	1d 21 04	ora $0421,x			ora 	NSMantissa3+1,x
.9842	d0 13		bne $9857			bne 	_SMExit0 					; if >= 32 it will always return zero.
.9844					_SMLoop:
.9844	de 09 04	dec $0409,x			dec 	NSMantissa0+1,x 			; predecrement, could do << 0
.9847	30 11		bmi $985a			bmi 	_SMExit 					; exit if done.
.9849	28		plp				plp 								; restore direcition setting
.984a	08		php				php
.984b	90 05		bcc $9852			bcc 	_SMRight
.984d	20 34 a2	jsr $a234			jsr 	NSMShiftLeft 				; shift left if CS
.9850	80 f2		bra $9844			bra 	_SMLoop
.9852					_SMRight:
.9852	20 42 a2	jsr $a242			jsr 	NSMShiftRight 				; shift right if CC
.9855	80 ed		bra $9844			bra 	_SMLoop
.9857					_SMExit0:
.9857	20 1f a2	jsr $a21f			jsr 	NSMSetZero 					; return zero.
.985a					_SMExit:
.985a	28		plp				plp 								; throw direction
.985b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/simple.asm

.985c					AddTopTwoStack:
.985c	18		clc				clc
.985d	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9860	7d 09 04	adc $0409,x			adc 		NSMantissa0+1,x
.9863	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9866	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9869	7d 11 04	adc $0411,x			adc 		NSMantissa1+1,x
.986c	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.986f	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9872	7d 19 04	adc $0419,x			adc 		NSMantissa2+1,x
.9875	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9878	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.987b	7d 21 04	adc $0421,x			adc 		NSMantissa3+1,x
.987e	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9881	60		rts				rts
.9882					SubTopTwoStack:
.9882	38		sec				sec
.9883	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9886	fd 09 04	sbc $0409,x			sbc 		NSMantissa0+1,x
.9889	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.988c	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.988f	fd 11 04	sbc $0411,x			sbc 		NSMantissa1+1,x
.9892	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9895	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9898	fd 19 04	sbc $0419,x			sbc 		NSMantissa2+1,x
.989b	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.989e	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.98a1	fd 21 04	sbc $0421,x			sbc 		NSMantissa3+1,x
.98a4	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.98a7	60		rts				rts
.98a8					AddInteger:
.98a8	fa		plx				plx
.98a9	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.98ac	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.98af	0a		asl a				asl 	a 							; shift reference bit into sign bit
.98b0	0a		asl a				asl 	a
.98b1	10 05		bpl $98b8			bpl 	_NotRef
.98b3	48		pha				pha
.98b4	20 80 9b	jsr $9b80			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.98b7	68		pla				pla
.98b8					_NotRef:
.98b8	0a		asl a				asl 	a 							; put MSB of type into A:7
.98b9	30 0b		bmi $98c6			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.98bb	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.98be	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.98c1	f0 06		beq $98c9			beq 	_IntegerCode 				; if clear, then we have two integers
.98c3	4c e0 ab	jmp $abe0			jmp 	FloatingPointAdd 							; otherwise at least one float.
.98c6					_StringData:
.98c6	4c 7b 97	jmp $977b			jmp 	StringConcat							; at least one string - don't know both are strings.
.98c9					_IntegerCode:
.98c9					AddCode:
.98c9	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.98cc	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.98cf	10 8b		bpl $985c			bpl 	AddTopTwoStack
.98d1	20 82 98	jsr $9882			jsr 	SubTopTwoStack 				; do a physical subtraction
.98d4	3c 20 04	bit $0420,x			bit 	NSMantissa3,x 				; result is +ve, okay
.98d7	10 09		bpl $98e2			bpl 	_AddExit
.98d9	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; sign is that of 2nd value
.98dc	9d 00 04	sta $0400,x			sta 	NSStatus,x
.98df	20 d4 a1	jsr $a1d4			jsr 	NSMNegateMantissa 			; negate the mantissa and exit
.98e2					_AddExit:
.98e2	60		rts				rts
.98e3					SubInteger:
.98e3	fa		plx				plx
.98e4	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.98e7	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.98ea	0a		asl a				asl 	a 							; shift reference bit into sign bit
.98eb	0a		asl a				asl 	a
.98ec	10 05		bpl $98f3			bpl 	_NotRef
.98ee	48		pha				pha
.98ef	20 80 9b	jsr $9b80			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.98f2	68		pla				pla
.98f3					_NotRef:
.98f3	0a		asl a				asl 	a 							; put MSB of type into A:7
.98f4	30 0b		bmi $9901			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.98f6	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.98f9	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.98fc	f0 06		beq $9904			beq 	_IntegerCode 				; if clear, then we have two integers
.98fe	4c e5 ab	jmp $abe5			jmp 	FloatingPointSub 							; otherwise at least one float.
.9901					_StringData:
.9901	4c 23 b0	jmp $b023			jmp 	NotDoneError							; at least one string - don't know both are strings.
.9904					_IntegerCode:
.9904	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; negate the second value.
.9907	49 80		eor #$80			eor 	#$80
.9909	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.990c	80 bb		bra $98c9			bra 	AddCode 					; and do the same code as add.
.990e					AndInteger:
.990e	fa		plx				plx
.990f	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9912	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9915	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9916	0a		asl a				asl 	a
.9917	10 05		bpl $991e			bpl 	_NotRef
.9919	48		pha				pha
.991a	20 80 9b	jsr $9b80			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.991d	68		pla				pla
.991e					_NotRef:
.991e	0a		asl a				asl 	a
.991f	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9921	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9924	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9927	f0 03		beq $992c			beq 	_IntegerCode 				; if clear, then we have two integers
.9929	4c 19 b0	jmp $b019			jmp 	TypeError 					; anything else, type mismatch.
.992c					_IntegerCode:
.992c	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.992f	3d 09 04	and $0409,x			and 		NSMantissa0+1,x
.9932	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9935	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9938	3d 11 04	and $0411,x			and 		NSMantissa1+1,x
.993b	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.993e	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9941	3d 19 04	and $0419,x			and 		NSMantissa2+1,x
.9944	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9947	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.994a	3d 21 04	and $0421,x			and 		NSMantissa3+1,x
.994d	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9950	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.9953	60		rts				rts
.9954					OraInteger:
.9954	fa		plx				plx
.9955	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9958	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.995b	0a		asl a				asl 	a 							; shift reference bit into sign bit
.995c	0a		asl a				asl 	a
.995d	10 05		bpl $9964			bpl 	_NotRef
.995f	48		pha				pha
.9960	20 80 9b	jsr $9b80			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9963	68		pla				pla
.9964					_NotRef:
.9964	0a		asl a				asl 	a
.9965	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9967	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.996a	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.996d	f0 03		beq $9972			beq 	_IntegerCode 				; if clear, then we have two integers
.996f	4c 19 b0	jmp $b019			jmp 	TypeError 					; anything else, type mismatch.
.9972					_IntegerCode:
.9972	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9975	1d 09 04	ora $0409,x			ora 		NSMantissa0+1,x
.9978	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.997b	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.997e	1d 11 04	ora $0411,x			ora 		NSMantissa1+1,x
.9981	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9984	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9987	1d 19 04	ora $0419,x			ora 		NSMantissa2+1,x
.998a	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.998d	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9990	1d 21 04	ora $0421,x			ora 		NSMantissa3+1,x
.9993	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9996	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.9999	60		rts				rts
.999a					EorInteger:
.999a	fa		plx				plx
.999b	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.999e	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.99a1	0a		asl a				asl 	a 							; shift reference bit into sign bit
.99a2	0a		asl a				asl 	a
.99a3	10 05		bpl $99aa			bpl 	_NotRef
.99a5	48		pha				pha
.99a6	20 80 9b	jsr $9b80			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.99a9	68		pla				pla
.99aa					_NotRef:
.99aa	0a		asl a				asl 	a
.99ab	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.99ad	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.99b0	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.99b3	f0 03		beq $99b8			beq 	_IntegerCode 				; if clear, then we have two integers
.99b5	4c 19 b0	jmp $b019			jmp 	TypeError 					; anything else, type mismatch.
.99b8					_IntegerCode:
.99b8	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.99bb	5d 09 04	eor $0409,x			eor 		NSMantissa0+1,x
.99be	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.99c1	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.99c4	5d 11 04	eor $0411,x			eor 		NSMantissa1+1,x
.99c7	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.99ca	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.99cd	5d 19 04	eor $0419,x			eor 		NSMantissa2+1,x
.99d0	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.99d3	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.99d6	5d 21 04	eor $0421,x			eor 		NSMantissa3+1,x
.99d9	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.99dc	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.99df	60		rts				rts
.99e0					WordIndirect:
.99e0	fa		plx				plx
.99e1	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.99e4	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.99e7	0a		asl a				asl 	a 							; shift reference bit into sign bit
.99e8	0a		asl a				asl 	a
.99e9	10 05		bpl $99f0			bpl 	_NotRef
.99eb	48		pha				pha
.99ec	20 80 9b	jsr $9b80			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.99ef	68		pla				pla
.99f0					_NotRef:
.99f0	0a		asl a				asl 	a
.99f1	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.99f3	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.99f6	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.99f9	f0 03		beq $99fe			beq 	_IntegerCode 				; if clear, then we have two integers
.99fb	4c 19 b0	jmp $b019			jmp 	TypeError 					; anything else, type mismatch.
.99fe					_IntegerCode:
.99fe	20 c9 98	jsr $98c9			jsr 	AddCode 					; add the two values
.9a01	a9 22		lda #$22			lda 	#NSBIsReference+2 			; make a 2 byte reference
.9a03	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9a06	60		rts				rts
.9a07					ByteIndirect:
.9a07	fa		plx				plx
.9a08	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9a0b	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9a0e	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9a0f	0a		asl a				asl 	a
.9a10	10 05		bpl $9a17			bpl 	_NotRef
.9a12	48		pha				pha
.9a13	20 80 9b	jsr $9b80			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9a16	68		pla				pla
.9a17					_NotRef:
.9a17	0a		asl a				asl 	a
.9a18	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9a1a	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9a1d	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9a20	f0 03		beq $9a25			beq 	_IntegerCode 				; if clear, then we have two integers
.9a22	4c 19 b0	jmp $b019			jmp 	TypeError 					; anything else, type mismatch.
.9a25					_IntegerCode:
.9a25	20 c9 98	jsr $98c9			jsr 	AddCode 					; add the two values
.9a28	a9 21		lda #$21			lda 	#NSBIsReference+1 			; make a 1 byte reference
.9a2a	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9a2d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/tostring.asm

.ab85					ConvertInt16:
.ab85	8d 08 04	sta $0408			sta 	NSMantissa0 				; set up as 32 bit conversion
.ab88	8e 10 04	stx $0410			stx 	NSMantissa1
.ab8b	9c 18 04	stz $0418			stz 	NSMantissa2
.ab8e	9c 20 04	stz $0420			stz 	NSMantissa3
.ab91	9c 00 04	stz $0400			stz 	NSStatus 					; positive integer
.ab94	a2 00		ldx #$00			ldx 	#0 							; stack level
.ab96	a9 0a		lda #$0a			lda 	#10 						; base
.ab98	80 00		bra $ab9a			bra 	ConvertInt32
.ab9a					ConvertInt32:
.ab9a	5a		phy				phy
.ab9b	a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.ab9d	2c 00 04	bit $0400			bit 	NSStatus 					; output a - if not negative.
.aba0	10 08		bpl $abaa			bpl 	_CI32NotNeg
.aba2	48		pha				pha
.aba3	a9 2d		lda #$2d			lda 	#'-'
.aba5	99 f7 05	sta $05f7,y			sta 	NumberBuffer,y
.aba8	c8		iny				iny
.aba9	68		pla				pla
.abaa					_CI32NotNeg:
.abaa	20 b8 ab	jsr $abb8			jsr 	_CI32DivideConvert 			; recursive conversion
.abad	a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.abaf	99 f7 05	sta $05f7,y			sta 	NumberBuffer,y
.abb2	7a		ply				ply
.abb3	a2 05		ldx #$05			ldx 	#NumberBuffer >> 8
.abb5	a9 f7		lda #$f7			lda 	#NumberBuffer & $FF
.abb7	60		rts				rts
.abb8					_CI32DivideConvert:
.abb8	e8		inx				inx 								; write to next slot up
.abb9	20 21 a2	jsr $a221			jsr 	NSMSetByte
.abbc	ca		dex				dex
.abbd	20 ba aa	jsr $aaba			jsr 	Int32Divide 				; divide
.abc0	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; save remainder
.abc3	48		pha				pha
.abc4	20 69 aa	jsr $aa69			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.abc7	20 4f a2	jsr $a24f			jsr 	NSMIsZero 					; is it zero ?
.abca	f0 06		beq $abd2			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.abcc	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.abcf	20 b8 ab	jsr $abb8			jsr 	_CI32DivideConvert 			; and recusrively call.
.abd2					_CI32NoRecurse:
.abd2	68		pla				pla 								; remainder
.abd3	c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII
.abd5	90 02		bcc $abd9			bcc 	_CI32NotHex
.abd7	69 26		adc #$26			adc 	#6+32
.abd9					_CI32NotHex:
.abd9	69 30		adc #$30			adc 	#48
.abdb	99 f7 05	sta $05f7,y			sta 	NumberBuffer,y 				; write out and exit
.abde	c8		iny				iny
.abdf	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/expression.asm


;******  Processing file: ./common/expressions/../generated/precedence.dat

.9a2e					PrecedenceLevel:
>9a2e	04					.byte	 4	; $00 <<
>9a2f	02					.byte	 2	; $01 <=
>9a30	02					.byte	 2	; $02 <>
>9a31	00					.byte	 0	; $03 !!3
>9a32	00					.byte	 0	; $04 ><
>9a33	02					.byte	 2	; $05 >=
>9a34	04					.byte	 4	; $06 >>
>9a35	00					.byte	 0	; $07 !!7
>9a36	00					.byte	 0	; $08 !!8
>9a37	00					.byte	 0	; $09 !!9
>9a38	00					.byte	 0	; $0a !!10
>9a39	00					.byte	 0	; $0b !!11
>9a3a	00					.byte	 0	; $0c !!12
>9a3b	00					.byte	 0	; $0d !!13
>9a3c	00					.byte	 0	; $0e !!14
>9a3d	00					.byte	 0	; $0f !!15
>9a3e	00					.byte	 0	; $10 @
>9a3f	00					.byte	 0	; $11 !!17
>9a40	00					.byte	 0	; $12 !!18
>9a41	00					.byte	 0	; $13 [
>9a42	04					.byte	 4	; $14 \
>9a43	00					.byte	 0	; $15 ]
>9a44	01					.byte	 1	; $16 ^
>9a45	00					.byte	 0	; $17 _
>9a46	00					.byte	 0	; $18 `
>9a47	00					.byte	 0	; $19 !!25
>9a48	00					.byte	 0	; $1a !!26
>9a49	00					.byte	 0	; $1b {
>9a4a	01					.byte	 1	; $1c |
>9a4b	00					.byte	 0	; $1d }
>9a4c	00					.byte	 0	; $1e ~
>9a4d	00					.byte	 0	; $1f [7m<7F>[m
>9a4e	00					.byte	 0	; $20
>9a4f	05					.byte	 5	; $21 !
>9a50	00					.byte	 0	; $22 "
>9a51	00					.byte	 0	; $23 #
>9a52	05					.byte	 5	; $24 $
>9a53	04					.byte	 4	; $25 %
>9a54	01					.byte	 1	; $26 &
>9a55	00					.byte	 0	; $27 '
>9a56	00					.byte	 0	; $28 (
>9a57	00					.byte	 0	; $29 )
>9a58	04					.byte	 4	; $2a *
>9a59	03					.byte	 3	; $2b +
>9a5a	00					.byte	 0	; $2c ,
>9a5b	03					.byte	 3	; $2d -
>9a5c	00					.byte	 0	; $2e .
>9a5d	04					.byte	 4	; $2f /
>9a5e	00					.byte	 0	; $30 0
>9a5f	00					.byte	 0	; $31 1
>9a60	00					.byte	 0	; $32 2
>9a61	00					.byte	 0	; $33 3
>9a62	00					.byte	 0	; $34 4
>9a63	00					.byte	 0	; $35 5
>9a64	00					.byte	 0	; $36 6
>9a65	00					.byte	 0	; $37 7
>9a66	00					.byte	 0	; $38 8
>9a67	00					.byte	 0	; $39 9
>9a68	00					.byte	 0	; $3a :
>9a69	00					.byte	 0	; $3b ;
>9a6a	02					.byte	 2	; $3c <
>9a6b	02					.byte	 2	; $3d =
>9a6c	02					.byte	 2	; $3e >
>9a6d	05					.byte	 5	; $3f ?

;******  Return to file: ./common/expressions/expression.asm

.9a6e					EvaluateExpressionAt0:
.9a6e	a2 00		ldx #$00			ldx 	#0 							; bottom stack level
.9a70					EvaluateExpression:
.9a70	a9 00		lda #$00			lda 	#0 							; lowest precedence level
.9a72					EvaluateExpressionAtPrecedence:
.9a72	48		pha				pha 								; save precedence level
.9a73	20 41 9d	jsr $9d41			jsr 	EvaluateTerm 				; evaluate term into level X.
.9a76	68		pla				pla 								; restore precedence level.
.9a77					_EXPRLoop:
.9a77	85 36		sta $36				sta 	zTemp0 						; save current precedence level.
.9a79	b1 30		lda ($30),y			lda 	(codePtr),y
.9a7b	c9 40		cmp #$40			cmp		#$40 						; if >= $40 cannot be an operator
.9a7d	b0 25		bcs $9aa4			bcs 	_EXPRExit
.9a7f	da		phx				phx 								; read the operator precedence
.9a80	aa		tax				tax
.9a81	bd 2e 9a	lda $9a2e,x			lda 	PrecedenceLevel,x
.9a84	fa		plx				plx
.9a85	c9 00		cmp #$00			cmp 	#0							; if zero exit (not an operator)
.9a87	f0 1b		beq $9aa4			beq 	_EXPRExit
.9a89	85 37		sta $37				sta 	zTemp0+1 					; save operator precedence level.
.9a8b	a5 36		lda $36				lda 	zTemp0 						; compare current precedence vs. operator precedence
.9a8d	c5 37		cmp $37				cmp 	zTemp0+1
.9a8f	b0 13		bcs $9aa4			bcs		_EXPRExit 					; if current >= operator exit
.9a91	48		pha				pha 								; save current precedence.
.9a92	b1 30		lda ($30),y			lda 	(codePtr),y
.9a94	c8		iny				iny
.9a95	48		pha				pha
.9a96	a5 37		lda $37				lda 	zTemp0+1 					; get operator precedence level
.9a98	e8		inx				inx 								; work out the right hand side.
.9a99	20 72 9a	jsr $9a72			jsr 	EvaluateExpressionAtPrecedence
.9a9c	ca		dex				dex
.9a9d	68		pla				pla 								; get operator, call the code.
.9a9e	20 a7 9a	jsr $9aa7			jsr 	_EXPRCaller
.9aa1	68		pla				pla 								; restore precedence level
.9aa2	80 d3		bra $9a77			bra 	_EXPRLoop 					; and go round.
.9aa4					_EXPRExit:
.9aa4	a5 36		lda $36				lda 	zTemp0 						; A = current precedence level.
.9aa6	60		rts				rts
.9aa7					_EXPRCaller:
.9aa7	da		phx				phx 								; save on stack, first thing is to restore it
.9aa8	0a		asl a				asl 	a 							; double so can use vectors into X
.9aa9	aa		tax				tax
.9aaa	7c 86 92	jmp ($9286,x)			jmp 	(VectorSetPunc,x) 			; and go to the code.

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/addsub.asm

.abe0					FloatingPointAdd:
.abe0	20 81 ad	jsr $ad81			jsr 	FloatPrepare 				; prepare for floats
.abe3	80 0b		bra $abf0			bra 	FloatAdd
.abe5					FloatingPointSub:
.abe5	20 81 ad	jsr $ad81			jsr 	FloatPrepare 				; prepare for floats
.abe8					FloatSubtract:
.abe8	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; negate FPB
.abeb	49 80		eor #$80			eor 	#$80
.abed	9d 01 04	sta $0401,x			sta 	NSStatus+1,x				; and fall through.
.abf0					FloatAdd:
.abf0	48		pha				pha
.abf1	5a		phy				phy
.abf2	20 92 ad	jsr $ad92			jsr 	NSNormalise 				; normalise S[X]
.abf5	f0 54		beq $ac4b			beq 	_FAReturn1
.abf7	e8		inx				inx 								; normalise S[X+1]
.abf8	20 92 ad	jsr $ad92			jsr 	NSNormalise
.abfb	ca		dex				dex
.abfc	c9 00		cmp #$00			cmp 	#0
.abfe	f0 6f		beq $ac6f			beq 	_FAExit 					; if so, just return A
.ac00	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; are the exponents the same ?
.ac03	dd 29 04	cmp $0429,x			cmp 	NSExponent+1,x
.ac06	f0 1b		beq $ac23			beq 	_FAExponentsEqual
.ac08	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; work out the larger exponent
.ac0b	a8		tay				tay
.ac0c	38		sec				sec 								; do a signed comparison of the exponents.
.ac0d	fd 29 04	sbc $0429,x			sbc 	NSExponent+1,x
.ac10	50 02		bvc $ac14			bvc 	_FANoSignedChange
.ac12	49 80		eor #$80			eor 	#$80
.ac14					_FANoSignedChange:
.ac14	29 80		and #$80			and 	#$80
.ac16	10 03		bpl $ac1b			bpl 	_FAHaveMax
.ac18	bc 29 04	ldy $0429,x			ldy 	NSExponent+1,x
.ac1b					_FAHaveMax:
.ac1b	20 72 ac	jsr $ac72			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.ac1e	e8		inx				inx
.ac1f	20 72 ac	jsr $ac72			jsr 	_FAShiftToExponent
.ac22	ca		dex				dex
.ac23					_FAExponentsEqual:
.ac23	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; are the signs the same
.ac26	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.ac29	30 10		bmi $ac3b			bmi 	_FADifferentSigns
.ac2b	20 5c 98	jsr $985c			jsr 	AddTopTwoStack 				; do the add of the mantissae
.ac2e	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.ac31	10 3c		bpl $ac6f			bpl 	_FAExit 					; if no, we are done.
.ac33	20 42 a2	jsr $a242			jsr 	NSMShiftRight 				; shift A right, renormalising it.
.ac36	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; bump the exponent and exit
.ac39	80 34		bra $ac6f			bra 	_FAExit
.ac3b					_FADifferentSigns:
.ac3b	20 82 98	jsr $9882			jsr 	SubTopTwoStack 				; subtract mantissa B from A
.ac3e	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; is the result negative ?
.ac41	10 2c		bpl $ac6f			bpl 	_FAExit 					; if no, we are done.
.ac43	20 cb a1	jsr $a1cb			jsr 	NSMNegate 					; netate result
.ac46	20 d4 a1	jsr $a1d4			jsr 	NSMNegateMantissa 			; negate (2'c) the mantissa
.ac49	80 24		bra $ac6f			bra 	_FAExit
.ac4b					_FAReturn1:
.ac4b	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.ac4e	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.ac51	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.ac54	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.ac57	bd 19 04	lda $0419,x			lda 	NSMantissa2+1,x
.ac5a	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.ac5d	bd 21 04	lda $0421,x			lda 	NSMantissa3+1,x
.ac60	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.ac63	bd 29 04	lda $0429,x			lda 	NSExponent+1,x
.ac66	9d 28 04	sta $0428,x			sta 	NSExponent,x
.ac69	bd 01 04	lda $0401,x			lda 	NSStatus+1,x
.ac6c	9d 00 04	sta $0400,x			sta 	NSStatus,x
.ac6f					_FAExit:
.ac6f	7a		ply				ply
.ac70	68		pla				pla
.ac71	60		rts				rts
.ac72					_FAShiftToExponent:
.ac72					_FAShiftToExponent2:
.ac72	98		tya				tya 								; compare Y to exponent
.ac73	dd 28 04	cmp $0428,x			cmp 	NSExponent,x 				; reached the exponent required ?
.ac76	f0 08		beq $ac80			beq 	_FASEExit 					; exit if so.
.ac78	20 42 a2	jsr $a242			jsr 	NSMShiftRight	 			; shift the mantissa right
.ac7b	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; increment exponent
.ac7e	80 f2		bra $ac72			bra 	_FAShiftToExponent2
.ac80					_FASEExit:
.ac80	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/compare.asm

.ac81					CompareFloat:
.ac81	20 e8 ab	jsr $abe8			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.ac84	bd 10 04	lda $0410,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.ac87	29 f8		and #$f8			and 	#$F8
.ac89	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.ac8c	1d 20 04	ora $0420,x			ora 	NSMantissa3,x
.ac8f	f0 09		beq $ac9a			beq 	_FCExit 					; zero, so approximately identical
.ac91	a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.ac93	3c 00 04	bit $0400,x			bit 	NSStatus,x
.ac96	10 02		bpl $ac9a			bpl 	_FCExit
.ac98					_FCNegative:
.ac98	a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.ac9a					_FCExit:
.ac9a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/divide.asm

.ac9b					FDivideCommand:
.ac9b	fa		plx				plx	 								; restore stack position
.ac9c	20 81 ad	jsr $ad81			jsr 	FloatPrepare 				; prepare for floats
.ac9f					FloatDivide:
.ac9f	48		pha				pha
.aca0	e8		inx				inx
.aca1	20 92 ad	jsr $ad92			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.aca4	ca		dex				dex
.aca5	c9 00		cmp #$00			cmp 	#0
.aca7	f0 20		beq $acc9			beq 	_FDZero
.aca9	20 92 ad	jsr $ad92			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.acac	f0 19		beq $acc7			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.acae	20 dc aa	jsr $aadc			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.acb1	20 69 aa	jsr $aa69			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.acb4	20 92 ad	jsr $ad92			jsr		NSNormalise 				; renormalise
.acb7	20 77 ab	jsr $ab77			jsr 	CalculateSign 				; calculate result sign
.acba	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; calculate exponent
.acbd	38		sec				sec
.acbe	fd 29 04	sbc $0429,x			sbc 	NSExponent+1,x
.acc1	38		sec				sec
.acc2	e9 1e		sbc #$1e			sbc 	#30
.acc4	9d 28 04	sta $0428,x			sta 	NSExponent,x
.acc7					_FDExit:
.acc7	68		pla				pla
.acc8	60		rts				rts
.acc9					_FDZero:
.acc9	a9 03		lda #$03		lda	#3
.accb	4c 67 96	jmp $9667		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/fractional.asm

.acce					FloatFractionalPart:
.acce	5a		phy				phy
.accf	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; take absolute value
.acd2	29 7f		and #$7f			and 	#$7F
.acd4	9d 00 04	sta $0400,x			sta 	NSStatus,x
.acd7	20 92 ad	jsr $ad92			jsr 	NSNormalise
.acda	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.acdd	38		sec				sec
.acde	e9 e0		sbc #$e0			sbc 	#$E0
.ace0	90 31		bcc $ad13			bcc 	_FFPExit 					; already fractional
.ace2	c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.ace4	b0 2a		bcs $ad10			bcs 	_FFPZero
.ace6	a8		tay				tay 								; put count to do in Y
.ace7	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; do each in turn.
.acea	20 15 ad	jsr $ad15			jsr 	_FFPPartial
.aced	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.acf0	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.acf3	20 15 ad	jsr $ad15			jsr 	_FFPPartial
.acf6	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.acf9	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.acfc	20 15 ad	jsr $ad15			jsr 	_FFPPartial
.acff	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.ad02	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.ad05	20 15 ad	jsr $ad15			jsr 	_FFPPartial
.ad08	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.ad0b	20 4f a2	jsr $a24f			jsr 	NSMIsZero 					; zeroed check.
.ad0e	d0 03		bne $ad13			bne 	_FFPExit
.ad10					_FFPZero:
.ad10	20 1f a2	jsr $a21f			jsr 	NSMSetZero
.ad13					_FFPExit:
.ad13	7a		ply				ply
.ad14	60		rts				rts
.ad15					_FFPPartial:
.ad15	c0 00		cpy #$00			cpy 	#0 							; no more to do
.ad17	f0 17		beq $ad30			beq 	_FFFPPExit
.ad19	c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.ad1b	b0 0c		bcs $ad29			bcs 	_FFFPPWholeByte
.ad1d	5a		phy				phy
.ad1e					_FFFPPLeft:
.ad1e	0a		asl a				asl 	a
.ad1f	88		dey				dey
.ad20	d0 fc		bne $ad1e			bne 	_FFFPPLeft
.ad22	7a		ply				ply
.ad23					_FFFPPRight:
.ad23	4a		lsr a				lsr 	a
.ad24	88		dey				dey
.ad25	d0 fc		bne $ad23			bne 	_FFFPPRight
.ad27	80 07		bra $ad30			bra 	_FFFPPExit
.ad29					_FFFPPWholeByte:
.ad29	98		tya				tya 								; subtract 8 from count
.ad2a	38		sec				sec
.ad2b	e9 08		sbc #$08			sbc 	#8
.ad2d	a8		tay				tay
.ad2e	a9 00		lda #$00			lda 	#0 							; and clear all
.ad30					_FFFPPExit:
.ad30	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/integer.asm

.ad31					FloatIntegerPart:
.ad31	48		pha				pha
.ad32	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; is it integer already ?
.ad35	f0 1f		beq $ad56			beq 	_FIPExit 					; if so do nothing
.ad37	20 4f a2	jsr $a24f			jsr 	NSMIsZero 					; is it zero ?
.ad3a	f0 17		beq $ad53			beq 	_FIPZero 					; if so return zero.
.ad3c	20 92 ad	jsr $ad92			jsr 	NSNormalise 				; normalise
.ad3f	f0 12		beq $ad53			beq 	_FIPZero 					; normalised to zero, exit zero
.ad41					_FIPShift:
.ad41	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.ad44	10 08		bpl $ad4e			bpl 	_FIPCheckZero
.ad46	20 42 a2	jsr $a242			jsr 	NSMShiftRight 				; shift mantissa right
.ad49	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; bump exponent
.ad4c	80 f3		bra $ad41			bra 	_FIPShift
.ad4e					_FIPCheckZero:
.ad4e	20 4f a2	jsr $a24f			jsr 	NSMIsZero 					; avoid -0 problem
.ad51	d0 03		bne $ad56			bne 	_FIPExit 					; set to zero if mantissa zero.
.ad53					_FIPZero:
.ad53	20 1f a2	jsr $a21f			jsr 	NSMSetZero
.ad56					_FIPExit:
.ad56	68		pla				pla
.ad57	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/multiply.asm

.ad58					FloatingPointMultiply:
.ad58	20 81 ad	jsr $ad81			jsr 	FloatPrepare 				; prepare for floats
.ad5b					FloatMultiply:
.ad5b	48		pha				pha
.ad5c	20 92 ad	jsr $ad92			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.ad5f	f0 1b		beq $ad7c			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.ad61	e8		inx				inx
.ad62	20 92 ad	jsr $ad92			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.ad65	ca		dex				dex
.ad66	c9 00		cmp #$00			cmp 	#0
.ad68	f0 0f		beq $ad79			beq 	_FDSetZero
.ad6a	20 32 ab	jsr $ab32			jsr 	MultiplyShort 				; calculate the result.
.ad6d	7d 28 04	adc $0428,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.ad70	18		clc				clc
.ad71	7d 29 04	adc $0429,x			adc 	NSExponent+1,x
.ad74	9d 28 04	sta $0428,x			sta 	NSExponent,x
.ad77	80 03		bra $ad7c			bra 	_FDExit
.ad79					_FDSetZero:
.ad79	20 1f a2	jsr $a21f			jsr 	NSMSetZero 					; return 0
.ad7c					_FDExit:
.ad7c	20 92 ad	jsr $ad92			jsr 	NSNormalise 				; normalise the result
.ad7f	68		pla				pla
.ad80	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/utility.asm

.ad81					FloatPrepare:
.ad81	20 80 9b	jsr $9b80			jsr 	DereferenceTopTwo 			; dereference the top two values
.ad84	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check ints/floats
.ad87	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.ad8a	29 10		and #$10			and 	#NSBIsString
.ad8c	d0 01		bne $ad8f			bne 	_FDType
.ad8e	60		rts				rts
.ad8f					_FDType:
.ad8f	4c 19 b0	jmp $b019			jmp 	TypeError
.ad92					NSNormalise:
.ad92	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; make float, keep sign
.ad95	29 80		and #$80			and 	#$80
.ad97	09 08		ora #$08			ora 	#NSTFloat
.ad99	9d 00 04	sta $0400,x			sta 	NSStatus,x
.ad9c	20 4f a2	jsr $a24f			jsr 	NSMIsZero 					; if zero exit
.ad9f	d0 09		bne $adaa			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.ada1	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; clear the sign bit.
.ada4	7e 00 04	ror $0400,x			ror 	NSStatus,x 					; (no -0)
.ada7	a9 00		lda #$00			lda 	#0 							; set Z flag
.ada9	60		rts				rts
.adaa					_NSNormaliseOptimise:
.adaa	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; upper byte zero ?
.adad	d0 22		bne $add1			bne 	_NSNormaliseLoop
.adaf	bd 18 04	lda $0418,x			lda 	NSMantissa2,x 				; byte normalise
.adb2	30 1d		bmi $add1			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.adb4	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.adb7	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.adba	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.adbd	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.adc0	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.adc3	9e 08 04	stz $0408,x			stz 	NSMantissa0,x
.adc6	bd 28 04	lda $0428,x			lda 	NSExponent,x
.adc9	38		sec				sec
.adca	e9 08		sbc #$08			sbc 	#8
.adcc	9d 28 04	sta $0428,x			sta 	NSExponent,x
.adcf	80 d9		bra $adaa			bra 	_NSNormaliseOptimise
.add1					_NSNormaliseLoop:
.add1	3c 20 04	bit $0420,x			bit 	NSMantissa3,x 				; bit 30 set ?
.add4	70 08		bvs $adde			bvs 	_NSNExit 					; exit if so with Z flag clear
.add6	20 34 a2	jsr $a234			jsr 	NSMShiftLeft 				; shift mantissa left
.add9	de 28 04	dec $0428,x			dec 	NSExponent,x 				; adjust exponent
.addc	80 f3		bra $add1			bra 	_NSNormaliseLoop
.adde					_NSNExit:
.adde	a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.ade0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignnumber.asm

.9aad					AssignNumber:
.9aad	5a		phy				phy
.9aae	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy mantissa0/1 to zTemp0
.9ab1	85 36		sta $36				sta 	zTemp0
.9ab3	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9ab6	85 37		sta $37				sta 	zTemp0+1
.9ab8	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; clear reference bits
.9abb	29 df		and #$df			and 	#(NSBIsReference ^ $FF)
.9abd	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9ac0	29 18		and #$18			and 	#NSBTypeMask				; assigning to a float ?
.9ac2	c9 08		cmp #$08			cmp 	#NSTFloat
.9ac4	f0 2a		beq $9af0			beq 	_ANFloat
.9ac6	bd 29 04	lda $0429,x			lda		NSExponent+1,x 				; is it a float
.9ac9	f0 05		beq $9ad0			beq		_ANNotFloat
.9acb	e8		inx				inx
.9acc	20 31 ad	jsr $ad31			jsr 	FloatIntegerPart 			; make it an integer
.9acf	ca		dex				dex
.9ad0					_ANNotFloat:
.9ad0	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if byte/word reference.
.9ad3	29 03		and #$03			and 	#3
.9ad5	d0 05		bne $9adc			bne 	_ANByteWord
.9ad7	20 fc 9a	jsr $9afc			jsr 	_ANCopy4PackSign 			; copy all 4 bytes and sign
.9ada	80 1e		bra $9afa			bra 	_ANExit
.9adc					_ANByteWord:
.9adc	48		pha				pha 								; save count
.9add	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; do byte
.9ae0	92 36		sta ($36)			sta 	(zTemp0)
.9ae2	68		pla				pla
.9ae3	c9 01		cmp #$01			cmp	 	#1
.9ae5	f0 13		beq $9afa			beq 	_ANExit
.9ae7	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x 			; do word
.9aea	a0 01		ldy #$01			ldy 	#1
.9aec	91 36		sta ($36),y			sta 	(zTemp0),y
.9aee	80 0a		bra $9afa			bra 	_ANExit
.9af0					_ANFloat:
.9af0	20 fc 9a	jsr $9afc			jsr 	_ANCopy4PackSign 			; write all 4 bytes and packed sign
.9af3	bd 29 04	lda $0429,x			lda 	NSExponent+1,x 				; copy exponent to slot 4
.9af6	a0 04		ldy #$04			ldy 	#4
.9af8	91 36		sta ($36),y			sta 	(zTemp0),y
.9afa					_ANExit:
.9afa	7a		ply				ply
.9afb	60		rts				rts
.9afc					_ANCopy4PackSign:
.9afc	a0 03		ldy #$03			ldy 	#3
.9afe	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; sign bit into status
.9b01	29 80		and #$80			and 	#$80 						; put into high bit of mantissa 3
.9b03	1d 21 04	ora $0421,x			ora 	NSMantissa3+1,x
.9b06	91 36		sta ($36),y			sta 	(zTemp0),y
.9b08	88		dey				dey
.9b09	bd 19 04	lda $0419,x			lda 	NSMantissa2+1,x
.9b0c	91 36		sta ($36),y			sta 	(zTemp0),y
.9b0e	88		dey				dey
.9b0f	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9b12	91 36		sta ($36),y			sta 	(zTemp0),y
.9b14	88		dey				dey
.9b15	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.9b18	91 36		sta ($36),y			sta 	(zTemp0),y
.9b1a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignstring.asm

.9b1b					AssignString:
.9b1b	5a		phy				phy
.9b1c	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.9b1f	85 38		sta $38				sta 	zTemp1
.9b21	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9b24	85 39		sta $39				sta 	zTemp1+1
.9b26	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9b29	85 36		sta $36				sta 	zTemp0
.9b2b	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9b2e	85 37		sta $37				sta 	zTemp0+1
.9b30	a0 01		ldy #$01			ldy 	#1 							; the high byte of the target address
.9b32	b1 36		lda ($36),y			lda 	(zTemp0),y
.9b34	f0 23		beq $9b59			beq 	_ASNewStringRequired 		; if zero, a new string is required.
.9b36	38		sec				sec 								; put Address-2 in zsTemp - this is the size/status/string record
.9b37	b2 36		lda ($36)			lda 	(zTemp0) 					; of concreted strings
.9b39	e9 02		sbc #$02			sbc 	#2
.9b3b	85 3c		sta $3c				sta 	zsTemp
.9b3d	a0 01		ldy #$01			ldy 	#1
.9b3f	b1 36		lda ($36),y			lda 	(zTemp0),y
.9b41	e9 00		sbc #$00			sbc 	#0
.9b43	85 3d		sta $3d				sta 	zsTemp+1
.9b45	a0 ff		ldy #$ff			ldy 	#$FF 						; get length of new string
.9b47					_ASGetLength:
.9b47	c8		iny				iny
.9b48	b1 38		lda ($38),y			lda 	(zTemp1),y
.9b4a	d0 fb		bne $9b47			bne 	_ASGetLength
.9b4c	98		tya				tya 								; is this length <= current length
.9b4d	d2 3c		cmp ($3c)			cmp 	(zsTemp)
.9b4f	90 20		bcc $9b71			bcc 	_ASCopyString
.9b51	f0 1e		beq $9b71			beq 	_ASCopyString
.9b53	a9 80		lda #$80			lda 	#$80 						; mark as unused.
.9b55	a0 01		ldy #$01			ldy 	#1
.9b57	91 3c		sta ($3c),y			sta 	(zsTemp),y
.9b59					_ASNewStringRequired:
.9b59	e8		inx				inx 								; concrete the new string.
.9b5a	20 b7 b2	jsr $b2b7			jsr 	StringConcrete				; (breaks zTemp1/2, not zTemp0 and zsTemp)
.9b5d	ca		dex				dex
.9b5e	18		clc				clc
.9b5f	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; copy that new address to the reference.
.9b62	69 02		adc #$02			adc 	#2 							; add two to point at the data.
.9b64	92 36		sta ($36)			sta 	(zTemp0)
.9b66	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9b69	69 00		adc #$00			adc 	#0
.9b6b	a0 01		ldy #$01			ldy 	#1
.9b6d	91 36		sta ($36),y			sta 	(zTemp0),y
.9b6f	80 0d		bra $9b7e			bra 	_ASExit
.9b71					_ASCopyString:
.9b71	a0 00		ldy #$00			ldy 	#0
.9b73					_ASCopyLoop:
.9b73	b1 38		lda ($38),y			lda 	(zTemp1),y
.9b75	c8		iny				iny
.9b76	c8		iny				iny
.9b77	91 3c		sta ($3c),y			sta 	(zsTemp),y
.9b79	88		dey				dey
.9b7a	c9 00		cmp #$00			cmp 	#0
.9b7c	d0 f5		bne $9b73			bne 	_ASCopyLoop
.9b7e					_ASExit:
.9b7e	7a		ply				ply
.9b7f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/dereference.asm

.9b80					DereferenceTopTwo:
.9b80	e8		inx				inx
.9b81	20 85 9b	jsr $9b85			jsr 	Dereference 				; deref x+1
.9b84	ca		dex				dex  								; falls through to deref x
.9b85					Dereference:
.9b85	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get the status byte
.9b88	29 20		and #$20			and 	#NSBIsReference 			; shift sign bit to carry, reference to bit 7
.9b8a	f0 57		beq $9be3			beq 	_DRFExit 					; not a reference
.9b8c	5a		phy				phy
.9b8d	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address to dereference into zTemp0
.9b90	85 36		sta $36				sta 	zTemp0
.9b92	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9b95	85 37		sta $37				sta 	zTemp0+1
.9b97	9e 10 04	stz $0410,x			stz 	NSMantissa1,x 				; clear second byte.
.9b9a	b2 36		lda ($36)			lda 	(zTemp0) 					; do the first byte
.9b9c	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9b9f	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get status byte.
.9ba2	29 18		and #$18			and 	#NSBTypeMask 				; what type is it ?
.9ba4	c9 10		cmp #$10			cmp 	#NSTString 					; if string, dereference two
.9ba6	f0 0f		beq $9bb7			beq 	_DRFDereferenceTwo
.9ba8	c9 08		cmp #$08			cmp 	#NSTFloat 					; if float, do full dereference.
.9baa	f0 39		beq $9be5			beq 	_DRFFull
.9bac	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be integer - how many bytes ?
.9baf	29 03		and #$03			and 	#3
.9bb1	f0 32		beq $9be5			beq 	_DRFFull 					; the whole word
.9bb3	c9 01		cmp #$01			cmp 	#1 							; is it 10 (e.g. 2 bytes)
.9bb5	f0 07		beq $9bbe			beq		_DRFClear23 				; no, one byte, clear 2 & 3 and exit
.9bb7					_DRFDereferenceTwo:
.9bb7	a0 01		ldy #$01			ldy 	#1
.9bb9	b1 36		lda ($36),y			lda 	(zTemp0),y
.9bbb	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9bbe					_DRFClear23:
.9bbe	9e 18 04	stz $0418,x			stz 	NSMantissa2,x 				; clear upper bytes, only read 1 or 2 bytes
.9bc1	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.9bc4	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; make it a value of that type.
.9bc7	29 18		and #$18			and 	#NSBTypeMask
.9bc9	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9bcc	c9 10		cmp #$10			cmp 	#NSTString  				; is it a string
.9bce	d0 12		bne $9be2			bne 	_DRFNotString
.9bd0	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; check address is zero
.9bd3	1d 10 04	ora $0410,x			ora 	NSMantissa1,x
.9bd6	d0 0a		bne $9be2			bne 	_DRFNotString
.9bd8	a9 e4		lda #$e4			lda 	#_DRFNullString & $FF 		; if so, return reference to ""
.9bda	9d 08 04	sta $0408,x			sta 	NSMantissa0,X
.9bdd	a9 9b		lda #$9b			lda 	#_DRFNullString >> 8
.9bdf	9d 10 04	sta $0410,x			sta 	NSMantissa1,X
.9be2					_DRFNotString
.9be2	7a		ply				ply 								; restore Y and exit
.9be3					_DRFExit:
.9be3	60		rts				rts
.9be4					_DRFNullString:
>9be4	00						.byte 	0
.9be5					_DRFFull:
.9be5	a0 01		ldy #$01			ldy 	#1 							; get remaining 3 bytes.
.9be7	b1 36		lda ($36),y			lda 	(zTemp0),y
.9be9	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9bec	c8		iny				iny
.9bed	b1 36		lda ($36),y			lda 	(zTemp0),y
.9bef	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9bf2	c8		iny				iny
.9bf3	b1 36		lda ($36),y			lda 	(zTemp0),y
.9bf5	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9bf8	9e 28 04	stz $0428,x			stz 	NSExponent,x 				; clear exponent.
.9bfb	bd 00 04	lda $0400,x			lda		NSStatus,x 					; see if type is integer
.9bfe	29 18		and #$18			and 	#NSBTypeMask  				; type information only
.9c00	9d 00 04	sta $0400,x			sta 	NSStatus,x 					; update it back.
.9c03	f0 06		beq $9c0b			beq 	_DRFNoExponent
.9c05	c8		iny				iny 								; if not, read the exponent as well.
.9c06	b1 36		lda ($36),y			lda 	(zTemp0),y
.9c08	9d 28 04	sta $0428,x			sta 	NSExponent,x
.9c0b					_DRFNoExponent:
.9c0b	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; is the most significant bit set ?
.9c0e	10 0d		bpl $9c1d			bpl 	_DRFExit2 					; if not, then exit.
.9c10	29 7f		and #$7f			and 	#$7F 						; clear that bit.
.9c12	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9c15	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; set the sign flag
.9c18	09 80		ora #$80			ora 	#NSBIsNegative
.9c1a	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9c1d					_DRFExit2:
.9c1d	7a		ply				ply
.9c1e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/number.asm

=1					ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2					ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3					ESTA_Decimal = 3 							; fractional part.
.9c1f					EncodeNumberStart:
.9c1f	38		sec				sec
.9c20	80 01		bra $9c23			bra 	EncodeNumberContinue+1
.9c22					EncodeNumberContinue:
.9c22	18		clc				clc
.9c23					EncodeNumber:
.9c23	08		php				php 								; save reset.
.9c24	c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.9c26	f0 12		beq $9c3a			beq 	_ENIsOkay
.9c28	c9 30		cmp #$30			cmp 	#"0"
.9c2a	90 04		bcc $9c30			bcc 	_ENBadNumber
.9c2c	c9 3a		cmp #$3a			cmp 	#"9"+1
.9c2e	90 0a		bcc $9c3a			bcc 	_ENIsOkay
.9c30					_ENBadNumber:
.9c30	28		plp				plp 								; throw saved reset
.9c31	ad 85 04	lda $0485			lda 	EncodeState 				; decimal mode, construct final number
.9c34	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.9c36	f0 7e		beq $9cb6			beq 	_ENConstructFinal
.9c38					_ENFail:
.9c38	18		clc				clc 								; not allowed
.9c39	60		rts				rts
.9c3a					_ENIsOkay:
.9c3a	28		plp				plp 								; are we restarting
.9c3b	90 15		bcc $9c52			bcc 	_ENNoRestart
.9c3d					_ENStartEncode:
.9c3d	c9 2e		cmp #$2e			cmp 	#'.'						; first is DP
.9c3f	f0 0c		beq $9c4d			beq 	_ENFirstDP
.9c41	29 0f		and #$0f			and 	#15 						; put digit in mantissa
.9c43	20 21 a2	jsr $a221			jsr 	NSMSetByte
.9c46	a9 01		lda #$01			lda 	#ESTA_Low
.9c48					_ENExitChange:
.9c48	8d 85 04	sta $0485			sta 	EncodeState 				; save new state
.9c4b	38		sec				sec
.9c4c	60		rts				rts
.9c4d					_ENFirstDP:
.9c4d	20 1f a2	jsr $a21f			jsr 	NSMSetZero 					; clear integer part
.9c50	80 3f		bra $9c91			bra 	_ESTASwitchFloat			; go straight to float and exi
.9c52					_ENNoRestart:
.9c52	48		pha				pha 								; save on stack.
.9c53	ad 85 04	lda $0485			lda 	EncodeState 				; get current state
.9c56	c9 01		cmp #$01			cmp 	#ESTA_Low
.9c58	f0 09		beq $9c63			beq  	_ESTALowState
.9c5a	c9 02		cmp #$02			cmp 	#ESTA_High
.9c5c	f0 29		beq $9c87			beq 	_ESTAHighState
.9c5e	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.9c60	f0 3b		beq $9c9d			beq 	_ESTADecimalState
>9c62	db						.byte 	$DB 						; causes a break in the emulator
.9c63					_ESTALowState:
.9c63	68		pla				pla 								; get value back
.9c64	c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.9c66	f0 29		beq $9c91			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.9c68	29 0f		and #$0f			and 	#15 						; make digit
.9c6a	8d 86 04	sta $0486			sta 	DigitTemp 					; save it.
.9c6d	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.9c70	0a		asl a				asl 	a
.9c71	0a		asl a				asl 	a
.9c72	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.9c75	0a		asl a				asl 	a
.9c76	6d 86 04	adc $0486			adc 	DigitTemp
.9c79	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9c7c	c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.9c7e	90 05		bcc $9c85			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.9c80	a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.9c82	8d 85 04	sta $0485			sta 	EncodeState
.9c85					_ESTANoSwitch:
.9c85	38		sec				sec
.9c86	60		rts				rts
.9c87					_ESTAHighState:
.9c87	68		pla				pla 								; get value back
.9c88	c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.9c8a	f0 05		beq $9c91			beq 	_ESTASwitchFloat
.9c8c	20 f0 9c	jsr $9cf0			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.9c8f	38		sec				sec
.9c90	60		rts				rts
.9c91					_ESTASwitchFloat:
.9c91	9c 87 04	stz $0487			stz 	DecimalCount
.9c94	e8		inx				inx 								; zero the decimal additive.
.9c95	20 1f a2	jsr $a21f			jsr 	NSMSetZero
.9c98	ca		dex				dex
.9c99	a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.9c9b	80 ab		bra $9c48			bra 	_ENExitChange
.9c9d					_ESTADecimalState:
.9c9d	68		pla				pla 								; digit.
.9c9e	c9 2e		cmp #$2e			cmp 	#"." 						; fail on 2nd decimal point.
.9ca0	f0 96		beq $9c38			beq 	_ENFail
.9ca2	e8		inx				inx 								; put digit into fractional part of X+1
.9ca3	20 f0 9c	jsr $9cf0			jsr 	ESTAShiftDigitIntoMantissa
.9ca6	ca		dex				dex
.9ca7	ee 87 04	inc $0487			inc 	DecimalCount 				; bump the count of decimals
.9caa	ad 87 04	lda $0487			lda 	DecimalCount
.9cad	c9 0b		cmp #$0b			cmp 	#11
.9caf	f0 02		beq $9cb3			beq 	_ESTADSFail
.9cb1	38		sec				sec
.9cb2	60		rts				rts
.9cb3					_ESTADSFail:
.9cb3	4c 14 b0	jmp $b014			jmp 	RangeError
.9cb6					_ENConstructFinal:
.9cb6	ad 87 04	lda $0487			lda 	DecimalCount 				; get decimal count
.9cb9	f0 33		beq $9cee			beq 	_ENCFExit 					; no decimals
.9cbb	5a		phy				phy
.9cbc	0a		asl a				asl 	a 							; x 4 and CLC
.9cbd	0a		asl a				asl 	a
.9cbe	6d 87 04	adc $0487			adc 	DecimalCount
.9cc1	a8		tay				tay
.9cc2	b9 d3 af	lda $afd3,y			lda 	DecimalScalarTable-5,y 		; copy decimal scalar to X+2
.9cc5	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.9cc8	b9 d4 af	lda $afd4,y			lda 	DecimalScalarTable-5+1,y
.9ccb	9d 12 04	sta $0412,x			sta 	NSMantissa1+2,x
.9cce	b9 d5 af	lda $afd5,y			lda 	DecimalScalarTable-5+2,y
.9cd1	9d 1a 04	sta $041a,x			sta 	NSMantissa2+2,x
.9cd4	b9 d6 af	lda $afd6,y			lda 	DecimalScalarTable-5+3,y
.9cd7	9d 22 04	sta $0422,x			sta 	NSMantissa3+2,x
.9cda	b9 d7 af	lda $afd7,y			lda 	DecimalScalarTable-5+4,y
.9cdd	9d 2a 04	sta $042a,x			sta 	NSExponent+2,x
.9ce0	a9 08		lda #$08			lda 	#NSTFloat
.9ce2	9d 02 04	sta $0402,x			sta 	NSStatus+2,x
.9ce5	7a		ply				ply
.9ce6	e8		inx				inx 								; multiply decimal const by decimal scalar
.9ce7	20 5b ad	jsr $ad5b			jsr 	FloatMultiply
.9cea	ca		dex				dex
.9ceb	20 f0 ab	jsr $abf0			jsr 	FloatAdd 					; add to integer part.
.9cee					_ENCFExit:
.9cee	18		clc				clc 								; reject the digit.
.9cef	60		rts				rts
.9cf0					ESTAShiftDigitIntoMantissa:
.9cf0	29 0f		and #$0f			and 	#15 						; save digit
.9cf2	48		pha				pha
.9cf3	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; push mantissa on stack
.9cf6	48		pha				pha
.9cf7	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.9cfa	48		pha				pha
.9cfb	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9cfe	48		pha				pha
.9cff	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9d02	48		pha				pha
.9d03	20 34 a2	jsr $a234			jsr 	NSMShiftLeft 				; x 2
.9d06	20 34 a2	jsr $a234			jsr 	NSMShiftLeft 				; x 4
.9d09	18		clc				clc 								; pop mantissa and add
.9d0a	68		pla				pla
.9d0b	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.9d0e	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9d11	68		pla				pla
.9d12	7d 10 04	adc $0410,x			adc 	NSMantissa1,x
.9d15	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9d18	68		pla				pla
.9d19	7d 18 04	adc $0418,x			adc 	NSMantissa2,x
.9d1c	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9d1f	68		pla				pla
.9d20	7d 20 04	adc $0420,x			adc 	NSMantissa3,x
.9d23	9d 20 04	sta $0420,x			sta 	NSMantissa3,x 				; x 5
.9d26	20 34 a2	jsr $a234			jsr 	NSMShiftLeft 				; x 10
.9d29	68		pla				pla 								; add digit
.9d2a	18		clc				clc
.9d2b	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.9d2e	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9d31	90 0d		bcc $9d40			bcc 	_ESTASDExit
.9d33	fe 10 04	inc $0410,x			inc 	NSMantissa1,x
.9d36	d0 08		bne $9d40			bne 	_ESTASDExit
.9d38	fe 18 04	inc $0418,x			inc 	NSMantissa2,x
.9d3b	d0 03		bne $9d40			bne 	_ESTASDExit
.9d3d	fe 20 04	inc $0420,x			inc 	NSMantissa3,x
.9d40					_ESTASDExit:
.9d40	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/term.asm

.9d41					EvaluateTerm:
.9d41	b1 30		lda ($30),y			lda 	(codePtr),y
.9d43	30 18		bmi $9d5d			bmi 	_ETCheckUnary 				; unary function ? (text ones)
.9d45	c9 40		cmp #$40			cmp 	#$40 						; 40-7F => identifier reference
.9d47	b0 6f		bcs $9db8			bcs 	_ETVariable
.9d49	c9 30		cmp #$30			cmp 	#'0' 						; is it a number
.9d4b	90 6e		bcc $9dbb			bcc 	_ETPuncUnary 				; if not it might be a punctuation unary.
.9d4d	c9 3a		cmp #$3a			cmp 	#'9'+1
.9d4f	b0 6a		bcs $9dbb			bcs 	_ETPuncUnary
.9d51	20 1f 9c	jsr $9c1f			jsr 	EncodeNumberStart 			; can't fail as it's 0-9 !
.9d54					_ETNumber:
.9d54	c8		iny				iny 								; keep encoding until we have the numbers
.9d55	b1 30		lda ($30),y			lda 	(codePtr),y
.9d57	20 22 9c	jsr $9c22			jsr 	EncodeNumberContinue
.9d5a	b0 f8		bcs $9d54			bcs 	_ETNumber 					; go back if accepted.
.9d5c	60		rts				rts
.9d5d					_ETCheckUnary:
.9d5d	c9 ff		cmp #$ff			cmp 	#KWC_STRING 				; string token
.9d5f	f0 41		beq $9da2			beq 	_ETString
.9d61	c9 fe		cmp #$fe			cmp 	#KWC_HEXCONST 				; hex constant.
.9d63	f0 12		beq $9d77			beq 	_ETHexConstant
.9d65	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; check it actually is a unary function
.9d67	90 0b		bcc $9d74			bcc 	_ETSyntaxError
.9d69	c9 9b		cmp #$9b			cmp 	#KWC_LAST_UNARY+1
.9d6b	b0 07		bcs $9d74			bcs 	_ETSyntaxError
.9d6d	da		phx				phx 								; push X on the stack
.9d6e	0a		asl a				asl 	a 							; put vector x 2 into X
.9d6f	aa		tax				tax
.9d70	c8		iny				iny 								; consume unary function token
.9d71	7c 06 93	jmp ($9306,x)			jmp 	(VectorSet0,x) 				; and do it.
.9d74					_ETSyntaxError:
.9d74	4c 0f b0	jmp $b00f			jmp 	SyntaxError
.9d77					_ETHexConstant:
.9d77	c8		iny				iny 								; skip #
.9d78	c8		iny				iny 								; skip count
.9d79	20 1f a2	jsr $a21f			jsr 	NSMSetZero 					; clear result
.9d7c					_ETHLoop:
.9d7c	b1 30		lda ($30),y			lda 	(codePtr),y
.9d7e	c8		iny				iny 								; and consume
.9d7f	c9 00		cmp #$00			cmp 	#0 							; exit if zero
.9d81	f0 1e		beq $9da1			beq 	_ETHExit
.9d83	48		pha				pha 								; save on stack.
.9d84	20 34 a2	jsr $a234			jsr 	NSMShiftLeft 				; x 2
.9d87	20 34 a2	jsr $a234			jsr 	NSMShiftLeft 				; x 4
.9d8a	20 34 a2	jsr $a234			jsr 	NSMShiftLeft 				; x 8
.9d8d	20 34 a2	jsr $a234			jsr 	NSMShiftLeft 				; x 16
.9d90	68		pla				pla 								; ASCII
.9d91	c9 41		cmp #$41			cmp 	#'A'
.9d93	90 02		bcc $9d97			bcc 	_ETHNotChar
.9d95	e9 07		sbc #$07			sbc 	#7
.9d97					_ETHNotChar:
.9d97	29 0f		and #$0f			and 	#15 						; digit now
.9d99	1d 08 04	ora $0408,x			ora 	NSMantissa0,x 				; put in LS Nibble
.9d9c	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9d9f	80 db		bra $9d7c			bra 	_ETHLoop 					; go round.
.9da1					_ETHExit:
.9da1	60		rts				rts
.9da2					_ETString:
.9da2	c8		iny				iny 								; look at length
.9da3	b1 30		lda ($30),y			lda 	(codePtr),y
.9da5	48		pha				pha
.9da6	c8		iny				iny 								; first character
.9da7	20 69 a2	jsr $a269			jsr 	MemoryInline 				; put address of string at (code-Ptr),y on stack
.9daa	68		pla				pla 								; restore count and save
.9dab	85 36		sta $36				sta 	zTemp0
.9dad	98		tya				tya 								; add length to Y to skip it.
.9dae	18		clc				clc
.9daf	65 36		adc $36				adc 	zTemp0
.9db1	a8		tay				tay
.9db2	a9 10		lda #$10			lda 	#NSTString 					; mark as string
.9db4	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9db7	60		rts				rts
.9db8					_ETVariable:
.9db8	4c 12 9e	jmp $9e12			jmp 	VariableHandler
.9dbb					_ETPuncUnary:
.9dbb	c8		iny				iny 								; consume the unary character
.9dbc	c9 2d		cmp #$2d			cmp 	#KWD_MINUS 					; unary minus
.9dbe	f0 2d		beq $9ded			beq 	_ETUnaryNegate
.9dc0	c9 10		cmp #$10			cmp 	#KWD_AT 					; @ reference -> constant
.9dc2	f0 39		beq $9dfd			beq 	_ETDereference
.9dc4	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; parenthesis
.9dc6	f0 43		beq $9e0b			beq 	_ETParenthesis
.9dc8	64 36		stz $36				stz 	zTemp0 						; zTemp0 is the indirection level.
.9dca	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; byte indirection (0) ?
.9dcc	f0 06		beq $9dd4			beq 	_ETIndirection
.9dce	e6 36		inc $36				inc 	zTemp0
.9dd0	c9 21		cmp #$21			cmp 	#KWD_PLING					; word indirection (1) \
.9dd2	d0 a0		bne $9d74			bne 	_ETSyntaxError
.9dd4					_ETIndirection:
.9dd4	a5 36		lda $36				lda 	zTemp0 						; push indirection amount (0-1) => (1-2) on the stack
.9dd6	1a		inc a				inc 	a
.9dd7	48		pha				pha
.9dd8	20 41 9d	jsr $9d41			jsr 	EvaluateTerm				; evaluate the term
.9ddb	20 85 9b	jsr $9b85			jsr 	Dereference 				; dereference it.
.9dde	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a +ve integer.
.9de1	d0 07		bne $9dea			bne 	_ETTypeMismatch
.9de3	68		pla				pla 								; indirection 1-2
.9de4	09 20		ora #$20			ora 	#NSBIsReference 			; make it a reference.
.9de6	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9de9	60		rts				rts
.9dea					_ETTypeMismatch:
.9dea	4c 19 b0	jmp $b019			jmp 	TypeError
.9ded					_ETUnaryNegate:
.9ded	20 41 9d	jsr $9d41			jsr 	EvaluateTerm				; evaluate the term
.9df0	20 85 9b	jsr $9b85			jsr 	Dereference 				; dereference it.
.9df3	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a number
.9df6	29 10		and #$10			and 	#NSTString
.9df8	d0 f0		bne $9dea			bne 	_ETTypeMismatch
.9dfa	4c cb a1	jmp $a1cb			jmp 	NSMNegate  					; just toggles the sign bit.
.9dfd					_ETDereference:
.9dfd	20 41 9d	jsr $9d41			jsr 	EvaluateTerm				; evaluate the term
.9e00	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a reference
.9e03	29 20		and #$20			and 	#NSBIsReference
.9e05	f0 e3		beq $9dea			beq 	_ETTypeMismatch
.9e07	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; make it an integer address
.9e0a	60		rts				rts
.9e0b					_ETParenthesis:
.9e0b	20 70 9a	jsr $9a70			jsr 	EvaluateExpression 			; evaluate here, from lowest precedence
.9e0e	20 29 aa	jsr $aa29			jsr 	CheckRightBracket 			; check for )
.9e11	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/variable.asm

.9e12					VariableHandler:
.9e12	b1 30		lda ($30),y			lda 	(codePtr),y
.9e14	18		clc				clc
.9e15	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.9e17	85 37		sta $37				sta 	zTemp0+1
.9e19	c8		iny				iny
.9e1a	b1 30		lda ($30),y			lda 	(codePtr),y
.9e1c	85 36		sta $36				sta 	zTemp0
.9e1e	c8		iny				iny
.9e1f	18		clc				clc									; copy variable address+3 to mantissa
.9e20	69 03		adc #$03			adc 	#3
.9e22	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9e25	a5 37		lda $37				lda 	zTemp0+1
.9e27	69 00		adc #$00			adc 	#0
.9e29	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9e2c	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.9e2f	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.9e32	9e 28 04	stz $0428,x			stz 	NSExponent,x
.9e35	5a		phy				phy
.9e36	a0 02		ldy #$02			ldy 	#2 							; read type
.9e38	b1 36		lda ($36),y			lda 	(zTemp0),y
.9e3a	7a		ply				ply
.9e3b	29 1c		and #$1c			and 	#NSBTypeMask+NSBIsArray 	; get type information
.9e3d	09 20		ora #$20			ora 	#NSBIsReference 			; make a reference.
.9e3f	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9e42	29 04		and #$04			and 	#NSBIsArray
.9e44	d0 01		bne $9e47			bne 	_VHArray
.9e46	60		rts				rts
.9e47					_VHArray:
.9e47	e8		inx				inx
.9e48	20 b7 a1	jsr $a1b7			jsr 	Evaluate8BitInteger 		; get the 1st index.
.9e4b	a9 ff		lda #$ff			lda 	#$FF 						; set Status of X+2 to a duff value so we know if we picked it up.
.9e4d	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.9e50	b1 30		lda ($30),y			lda 	(codePtr),y
.9e52	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.9e54	d0 06		bne $9e5c			bne 	_VHNoSecondIndex
.9e56	c8		iny				iny 								; skip the comma
.9e57	e8		inx				inx
.9e58	20 b7 a1	jsr $a1b7			jsr 	Evaluate8BitInteger 		; get the 2nd index.
.9e5b	ca		dex				dex
.9e5c					_VHNoSecondIndex:
.9e5c	ca		dex				dex 								; set X back.
.9e5d	20 29 aa	jsr $aa29			jsr 	CheckRightBracket 			; and check the right bracket.
.9e60	5a		phy				phy 								; save position
.9e61	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy record address to zaTemp
.9e64	85 3e		sta $3e				sta 	zaTemp
.9e66	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9e69	85 3f		sta $3f				sta 	zaTemp+1
.9e6b	a0 03		ldy #$03			ldy 	#3 							; get the second index - which is 0 if there is one index.
.9e6d	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9e6f	f0 02		beq $9e73			beq 	_VHHas2Mask
.9e71	a9 ff		lda #$ff			lda 	#$FF
.9e73					_VHHas2Mask:
.9e73	dd 02 04	cmp $0402,x			cmp 	NSStatus+2,x 				; so if they are the same there are the wrong number of indices
.9e76	f0 54		beq $9ecc			beq 	_VHBadIndex
.9e78	0a		asl a				asl 	a 							; carry will be set if a second index
.9e79	90 09		bcc $9e84			bcc 	_VHCheckFirstIndex
.9e7b	a0 03		ldy #$03			ldy 	#3 			 				; check the 2nd size >= 2nd index
.9e7d	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9e7f	dd 0a 04	cmp $040a,x			cmp 	NSMantissa0+2,x
.9e82	90 48		bcc $9ecc			bcc 	_VHBadIndex
.9e84					_VHCheckFirstIndex:
.9e84	a0 02		ldy #$02			ldy 	#2 			 				; check the 2nd size >= 2nd index
.9e86	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9e88	dd 09 04	cmp $0409,x			cmp 	NSMantissa0+1,x
.9e8b	90 3f		bcc $9ecc			bcc 	_VHBadIndex
.9e8d	64 36		stz $36				stz 	zTemp0 						; clear zTemp0 (if 1 index)
.9e8f	64 37		stz $37				stz 	zTemp0+1
.9e91	bd 02 04	lda $0402,x			lda 	NSStatus+2,x 				; if only one index provided, don't need to multiply
.9e94	30 0f		bmi $9ea5			bmi 	_VHNoMultiply
.9e96	da		phx				phx
.9e97	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; get 2nd index on stack
.9e9a	48		pha				pha
.9e9b	a0 02		ldy #$02			ldy 	#2 							; get 1st size in A
.9e9d	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9e9f	1a		inc a				inc 	a 							; add 1 for zero base
.9ea0	fa		plx				plx
.9ea1	20 ab ae	jsr $aeab			jsr 	Multiply8x8 				; calculate -> Z0
.9ea4	fa		plx				plx
.9ea5					_VHNoMultiply:
.9ea5	18		clc				clc
.9ea6	a5 36		lda $36				lda 	zTemp0
.9ea8	7d 09 04	adc $0409,x			adc 	NSMantissa0+1,x
.9eab	85 36		sta $36				sta 	zTemp0
.9ead	a5 37		lda $37				lda 	zTemp0+1
.9eaf	69 00		adc #$00			adc 	#0
.9eb1	85 37		sta $37				sta 	zTemp0+1
.9eb3	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9eb6	20 3a 8d	jsr $8d3a			jsr 	ScaleByBaseType
.9eb9	18		clc				clc
.9eba	b2 3e		lda ($3e)			lda 	(zaTemp)
.9ebc	65 36		adc $36				adc 	zTemp0
.9ebe	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9ec1	a0 01		ldy #$01			ldy 	#1
.9ec3	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9ec5	65 37		adc $37				adc 	zTemp0+1
.9ec7	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9eca	7a		ply				ply 								; restore position
.9ecb	60		rts				rts
.9ecc					_VHBadIndex:
.9ecc	a9 17		lda #$17		lda	#23
.9ece	4c 67 96	jmp $9667		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/abs.asm

.ade1					AbsUnary:
.ade1	fa		plx				plx 								; restore stack pos
.ade2	20 73 a1	jsr $a173			jsr 	EvaluateNumber 				; get a float or int
.ade5	20 29 aa	jsr $aa29			jsr 	CheckRightBracket
.ade8	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; clear the sign bit
.adeb	29 7f		and #$7f			and 	#$7F
.aded	9d 00 04	sta $0400,x			sta 	NSStatus,x
.adf0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/alloc.asm

.9ed1					AllocUnary:
.9ed1	fa		plx				plx 								; restore stack pos
.9ed2	20 ab a1	jsr $a1ab			jsr 	Evaluate16BitInteger		; get bytes required.
.9ed5	20 29 aa	jsr $aa29			jsr 	CheckRightBracket
.9ed8	da		phx				phx 								; save X/Y
.9ed9	5a		phy				phy
.9eda	8a		txa				txa 								; copy X into Y
.9edb	a8		tay				tay
.9edc	b9 10 04	lda $0410,y			lda		NSMantissa1,y 				; get size
.9edf	aa		tax				tax
.9ee0	b9 08 04	lda $0408,y			lda 	NSMantissa0,y
.9ee3	20 f0 9e	jsr $9ef0			jsr 	AllocateXABytes 			; allocate memory
.9ee6	99 08 04	sta $0408,y			sta 	NSMantissa0,y 				; write address out.
.9ee9	8a		txa				txa
.9eea	99 10 04	sta $0410,y			sta 	NSMantissa1,y
.9eed	7a		ply				ply
.9eee	fa		plx				plx
.9eef	60		rts				rts
.9ef0					AllocateXABytes:
.9ef0	5a		phy				phy
.9ef1	ac 8c 04	ldy $048c			ldy 	lowMemPtr 					; push current address on stack and to zTemp0
.9ef4	84 36		sty $36				sty 	zTemp0
.9ef6	5a		phy				phy
.9ef7	ac 8d 04	ldy $048d			ldy 	lowMemPtr+1
.9efa	84 37		sty $37				sty 	zTemp0+1
.9efc	5a		phy				phy
.9efd	18		clc				clc 								; add to low memory pointer
.9efe	6d 8c 04	adc $048c			adc 	lowMemPtr
.9f01	8d 8c 04	sta $048c			sta 	lowMemPtr
.9f04	8a		txa				txa
.9f05	6d 8d 04	adc $048d			adc 	lowMemPtr+1
.9f08	8d 8d 04	sta $048d			sta 	lowMemPtr+1
.9f0b	b0 2f		bcs $9f3c			bcs 	CISSMemory
.9f0d	20 2e 9f	jsr $9f2e			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.9f10					_ClearMemory:
.9f10	ad 8c 04	lda $048c			lda 	lowMemPtr 					; cleared all memory allocated
.9f13	c5 36		cmp $36				cmp 	zTemp0
.9f15	d0 07		bne $9f1e			bne 	_CMClearNext
.9f17	ad 8d 04	lda $048d			lda 	lowMemPtr+1
.9f1a	c5 37		cmp $37				cmp 	zTemp0+1
.9f1c	f0 0c		beq $9f2a			beq 	_CMExit
.9f1e					_CMClearNext:
.9f1e	a9 00		lda #$00			lda 	#0 							; clear byte, advance to next.
.9f20	92 36		sta ($36)			sta 	(zTemp0)
.9f22	e6 36		inc $36				inc 	zTemp0
.9f24	d0 ea		bne $9f10			bne 	_ClearMemory
.9f26	e6 37		inc $37				inc		zTemp0+1
.9f28	80 e6		bra $9f10			bra 	_ClearMemory
.9f2a					_CMExit:
.9f2a	fa		plx				plx
.9f2b	68		pla				pla
.9f2c	7a		ply				ply
.9f2d	60		rts				rts
.9f2e					CheckIdentifierStringSpace:
.9f2e	48		pha				pha
.9f2f	ad 8d 04	lda $048d			lda 	lowMemPtr+1 				; get low memory pointer
.9f32	18		clc				clc
.9f33	69 02		adc #$02			adc 	#2 							; need at least 2 256 byte pages
.9f35	cd 8f 04	cmp $048f			cmp 	StringMemory+1 				; is it >= StringMemory
.9f38	b0 02		bcs $9f3c			bcs 	CISSMemory
.9f3a	68		pla				pla
.9f3b	60		rts				rts
.9f3c					CISSMemory:
.9f3c	a9 06		lda #$06		lda	#6
.9f3e	4c 67 96	jmp $9667		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/asc.asm

.adf1					AscUnary:
.adf1	fa		plx				plx 								; restore stack pos
.adf2	20 7e a1	jsr $a17e			jsr 	EvaluateString 				; get a string
.adf5	b2 36		lda ($36)			lda 	(zTemp0)					; get/return firs character
.adf7	20 21 a2	jsr $a221			jsr 	NSMSetByte
.adfa	20 29 aa	jsr $aa29			jsr 	CheckRightBracket
.adfd	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/frac.asm

.adfe					FracUnary:
.adfe	fa		plx				plx 								; restore stack pos
.adff	20 73 a1	jsr $a173			jsr 	EvaluateNumber 				; get a float or int
.ae02	20 29 aa	jsr $aa29			jsr 	CheckRightBracket
.ae05	bd 00 04	lda $0400,x			lda 	NSStatus,x
.ae08	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.ae0a	f0 04		beq $ae10			beq 	_IUZero
.ae0c	20 ce ac	jsr $acce			jsr 	FloatFractionalPart
.ae0f	60		rts				rts
.ae10					_IUZero:
.ae10	20 1f a2	jsr $a21f			jsr 	NSMSetZero
.ae13	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/int.asm

.ae14					IntUnary:
.ae14	fa		plx				plx 								; restore stack pos
.ae15	20 73 a1	jsr $a173			jsr 	EvaluateNumber 				; get a float or int
.ae18	20 29 aa	jsr $aa29			jsr 	CheckRightBracket
.ae1b	bd 00 04	lda $0400,x			lda 	NSStatus,x
.ae1e	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.ae20	f0 03		beq $ae25			beq 	_IUExit
.ae22	20 31 ad	jsr $ad31			jsr 	FloatIntegerPart
.ae25					_IUExit:
.ae25	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/len.asm

.ae26					LenUnary:
.ae26	fa		plx				plx 								; restore stack pos
.ae27	20 7e a1	jsr $a17e			jsr 	EvaluateString 				; get a string
.ae2a	5a		phy				phy
.ae2b	a0 00		ldy #$00			ldy 	#0 							; find length
.ae2d					_LenFind:
.ae2d	b1 36		lda ($36),y			lda 	(zTemp0),y
.ae2f	f0 06		beq $ae37			beq 	_LenExit
.ae31	c8		iny				iny
.ae32	d0 f9		bne $ae2d			bne 	_LenFind
.ae34	4c 14 b0	jmp $b014			jmp 	RangeError 					; string > 255
.ae37					_LenExit:
.ae37	98		tya				tya
.ae38	20 21 a2	jsr $a221			jsr 	NSMSetByte
.ae3b	7a		ply				ply
.ae3c	20 29 aa	jsr $aa29			jsr 	CheckRightBracket
.ae3f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/not.asm

.9f41					Unary_Not:
.9f41	fa		plx				plx
.9f42	20 96 a1	jsr $a196			jsr 	EvaluateInteger 			; get integer
.9f45	20 29 aa	jsr $aa29			jsr 	CheckRightBracket
.9f48	20 4f a2	jsr $a24f			jsr 	NSMIsZero 					; zero mantissa ?
.9f4b	f0 04		beq $9f51			beq 	_NotZero
.9f4d	20 1f a2	jsr $a21f			jsr 	NSMSetZero
.9f50	60		rts				rts
.9f51					_NotZero:
.9f51	4c d4 96	jmp $96d4			jmp 	ReturnTrue
.9f54					_UNBad:
.9f54	4c 1e b0	jmp $b01e			jmp 	ArgumentError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/rnd.asm

.9f57					Unary_Random:
.9f57	fa		plx				plx
.9f58	20 d0 9f	jsr $9fd0			jsr 	Random32Bit 				; get a random number
.9f5b	20 b5 9f	jsr $9fb5			jsr 	URCopyToMantissa  			; put in mantissa
.9f5e	e8		inx				inx
.9f5f	20 ab a1	jsr $a1ab			jsr 	Evaluate16BitInteger 		; put modulus value in +1
.9f62	ca		dex				dex
.9f63	20 ad aa	jsr $aaad			jsr 	IntegerModulusNoCheck 		; calculate modulus
.9f66	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; make it an integer positive
.9f69	9e 28 04	stz $0428,x			stz 	NSExponent,x
.9f6c	20 29 aa	jsr $aa29			jsr 	CheckRightBracket
.9f6f	60		rts				rts
.9f70					Unary_Rnd:
.9f70	fa		plx				plx
.9f71	20 73 a1	jsr $a173			jsr 	EvaluateNumber 				; number to use.
.9f74	20 29 aa	jsr $aa29			jsr 	CheckRightBracket 			; closing bracket
.9f77	20 4f a2	jsr $a24f			jsr 	NSMIsZero 					; if zero, then don't generate a new number
.9f7a	f0 2b		beq $9fa7			beq 	_URCopySeed
.9f7c	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; if -ve, then seed using parameter
.9f7f	10 23		bpl $9fa4			bpl 	_URDontSeed
.9f81	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy - value to seed butchering it.
.9f84	49 17		eor #$17			eor 	#$17
.9f86	8d 88 04	sta $0488			sta 	RandomSeed+0
.9f89	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9f8c	49 a5		eor #$a5			eor 	#$A5
.9f8e	8d 89 04	sta $0489			sta 	RandomSeed+1
.9f91	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.9f94	49 c2		eor #$c2			eor 	#$C2
.9f96	8d 8a 04	sta $048a			sta 	RandomSeed+2
.9f99	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.9f9c	49 9d		eor #$9d			eor 	#$9D
.9f9e	8d 8b 04	sta $048b			sta 	RandomSeed+3
.9fa1	20 d0 9f	jsr $9fd0			jsr 	Random32Bit
.9fa4					_URDontSeed:
.9fa4	20 d0 9f	jsr $9fd0			jsr 	Random32Bit 				; generate a number.
.9fa7					_URCopySeed:
.9fa7	20 b5 9f	jsr $9fb5			jsr 	URCopyToMantissa 			; copy into mantissa
.9faa	a9 e1		lda #$e1			lda 	#-31 						; force into 0-1 range
.9fac	8d 28 04	sta $0428			sta 	NSExponent
.9faf	a9 08		lda #$08			lda 	#NSTFloat
.9fb1	8d 00 04	sta $0400			sta 	NSStatus 					; positive.
.9fb4	60		rts				rts
.9fb5					URCopyToMantissa:
.9fb5	ad 88 04	lda $0488			lda 	RandomSeed+0
.9fb8	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9fbb	ad 89 04	lda $0489			lda 	RandomSeed+1
.9fbe	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9fc1	ad 8a 04	lda $048a			lda 	RandomSeed+2
.9fc4	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9fc7	ad 8b 04	lda $048b			lda 	RandomSeed+3
.9fca	29 7f		and #$7f			and 	#$7F 						; make legal mantissa
.9fcc	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9fcf	60		rts				rts
.9fd0					Random32Bit:
.9fd0	5a		phy				phy
.9fd1	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.9fd3	ad 88 04	lda $0488			lda 	RandomSeed+0 				; check the seed isn't zero
.9fd6	d0 03		bne $9fdb			bne 	_Random1
.9fd8	a8		tay				tay 								; if so do it 256 times
.9fd9	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.9fdb					_Random1:
.9fdb	0a		asl a				asl 	a 							; LSFR RNG
.9fdc	2e 89 04	rol $0489			rol 	RandomSeed+1
.9fdf	2e 8a 04	rol $048a			rol 	RandomSeed+2
.9fe2	2e 8b 04	rol $048b			rol 	RandomSeed+3
.9fe5	90 02		bcc $9fe9			bcc 	_Random2
.9fe7	49 c5		eor #$c5			eor 	#$C5
.9fe9					_Random2:
.9fe9	88		dey				dey
.9fea	d0 ef		bne $9fdb			bne 	_Random1
.9fec	8d 88 04	sta $0488			sta 	RandomSeed+0
.9fef	7a		ply				ply
.9ff0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/sgn.asm

.ae40					SgnUnary:
.ae40	fa		plx				plx 								; restore stack pos
.ae41	20 73 a1	jsr $a173			jsr 	EvaluateNumber 				; get a float or int
.ae44	20 29 aa	jsr $aa29			jsr 	CheckRightBracket
.ae47	20 4f a2	jsr $a24f			jsr 	NSMIsZero 					; if zero
.ae4a	f0 10		beq $ae5c			beq 	_SGZero  					; return Int Zero
.ae4c	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get status w/sign
.ae4f	48		pha				pha
.ae50	a9 01		lda #$01			lda 	#1 							; set to 1
.ae52	20 21 a2	jsr $a221			jsr 	NSMSetByte
.ae55	68		pla				pla
.ae56	29 80		and #$80			and		#$80 						; copy the sign byte out
.ae58	9d 00 04	sta $0400,x			sta 	NSStatus,x
.ae5b	60		rts				rts
.ae5c	20 1f a2	jsr $a21f	_SGZero:jsr 	NSMSetZero
.ae5f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/val.asm

.ae60					ValUnary:
.ae60	fa		plx				plx 								; restore stack pos
.ae61	20 76 ae	jsr $ae76			jsr 	ValMainCode 				; do the main val() code
.ae64	b0 01		bcs $ae67			bcs 	_VUError 					; couldn't convert
.ae66	60		rts				rts
.ae67					_VUError:
.ae67	4c 19 b0	jmp $b019			jmp 	TypeError
.ae6a					IsValUnary:
.ae6a	fa		plx				plx 								; restore stack pos
.ae6b	20 76 ae	jsr $ae76			jsr 	ValMainCode 				; do the main val() code
.ae6e	b0 03		bcs $ae73			bcs 	_VUBad
.ae70	4c d4 96	jmp $96d4			jmp 	ReturnTrue
.ae73					_VUBad:
.ae73	4c e0 96	jmp $96e0			jmp 	ReturnFalse
.ae76					ValMainCode:
.ae76	20 7e a1	jsr $a17e			jsr 	EvaluateString 				; get a string
.ae79	20 29 aa	jsr $aa29			jsr 	CheckRightBracket 			; check right bracket present
.ae7c	5a		phy				phy
.ae7d	b2 36		lda ($36)			lda 	(zTemp0) 					; check not empty string
.ae7f	f0 17		beq $ae98			beq 	_VMCFail2
.ae81	a0 ff		ldy #$ff			ldy 	#$FF 						; start position
.ae83	48		pha				pha 								; save first character
.ae84	c9 2d		cmp #$2d			cmp 	#"-"		 				; is it -
.ae86	d0 01		bne $ae89			bne 	_VMCStart
.ae88	c8		iny				iny 								; skip over -
.ae89					_VMCStart:
.ae89	38		sec				sec 								; initialise first time round.
.ae8a					_VMCNext:
.ae8a	c8		iny				iny 								; pre-increment
.ae8b	b1 36		lda ($36),y			lda 	(zTemp0),y 					; next character
.ae8d	f0 0c		beq $ae9b			beq 	_VMCSuccess 				; successful.
.ae8f	20 23 9c	jsr $9c23			jsr 	EncodeNumber 				; send it to the number-builder
.ae92	90 03		bcc $ae97			bcc 	_VMCFail 					; if failed, give up.
.ae94	18		clc				clc 								; next time round, countinue
.ae95	80 f3		bra $ae8a			bra 	_VMCNext
.ae97					_VMCFail:
.ae97	68		pla				pla
.ae98					_VMCFail2:
.ae98	7a		ply				ply
.ae99	38		sec				sec
.ae9a	60		rts				rts
.ae9b					_VMCSuccess:
.ae9b	a9 00		lda #$00			lda 	#0 							; construct final
.ae9d	20 23 9c	jsr $9c23			jsr 	EncodeNumber
.aea0	68		pla				pla
.aea1	c9 2d		cmp #$2d			cmp 	#"-"
.aea3	d0 03		bne $aea8			bne 	_VMCNotNegative
.aea5	20 cb a1	jsr $a1cb			jsr		NSMNegate
.aea8					_VMCNotNegative:
.aea8	7a		ply				ply
.aea9	18		clc				clc
.aeaa	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/chr.asm

.9ff1					ChrUnary:
.9ff1	fa		plx				plx 								; restore stack pos
.9ff2	20 b7 a1	jsr $a1b7			jsr 	Evaluate8BitInteger			; get value
.9ff5	48		pha				pha
.9ff6	20 29 aa	jsr $aa29			jsr 	CheckRightBracket
.9ff9	a9 01		lda #$01			lda 	#1 							; allocate space for one char
.9ffb	20 38 b3	jsr $b338			jsr 	StringTempAllocate
.9ffe	68		pla				pla 								; write number to it
.9fff	20 76 b3	jsr $b376			jsr 	StringTempWrite
.a002	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/spc.asm

.a003					SpcUnary:
.a003	fa		plx				plx 								; restore stack pos
.a004	20 b7 a1	jsr $a1b7			jsr 	Evaluate8BitInteger			; get value
.a007	5a		phy				phy
.a008	48		pha				pha 								; save count
.a009	20 38 b3	jsr $b338			jsr 	StringTempAllocate
.a00c	7a		ply				ply 								; to do count in Y
.a00d					_SpcLoop:
.a00d	c0 00		cpy #$00			cpy 	#0
.a00f	f0 08		beq $a019			beq 	_SpcExit
.a011	a9 20		lda #$20			lda 	#32
.a013	20 76 b3	jsr $b376			jsr 	StringTempWrite
.a016	88		dey				dey
.a017	80 f4		bra $a00d			bra 	_SPCLoop
.a019					_SpcExit:
.a019	7a		ply				ply
.a01a	20 29 aa	jsr $aa29			jsr 	CheckRightBracket
.a01d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/str.asm

.a01e					Unary_Str:
.a01e	fa		plx				plx
.a01f	20 73 a1	jsr $a173			jsr 	EvaluateNumber  			; get number
.a022	20 29 aa	jsr $aa29			jsr 	CheckRightBracket 			; closing bracket
.a025	a9 05		lda #$05			lda 	#5 							; maximum decimals, from Basic816
.a027	20 40 a0	jsr $a040			jsr 	ConvertNumberToString 		; do the conversion.
.a02a	a9 21		lda #$21			lda		#33 						; create buffer
.a02c	20 38 b3	jsr $b338			jsr 	StringTempAllocate 			; allocate memory
.a02f	da		phx				phx
.a030	a2 00		ldx #$00			ldx 	#0
.a032					_USCopy:
.a032	bd 19 06	lda $0619,x			lda 	DecimalBuffer,x
.a035	20 76 b3	jsr $b376			jsr 	StringTempWrite
.a038	e8		inx				inx
.a039	bd 19 06	lda $0619,x			lda 	DecimalBuffer,x
.a03c	d0 f4		bne $a032			bne 	_USCopy
.a03e	fa		plx				plx
.a03f	60		rts				rts
.a040					ConvertNumberToString:
.a040	5a		phy				phy 								; save code position
.a041	8d 94 04	sta $0494			sta 	DecimalPlaces	 			; save number of DPs.
.a044	9c 95 04	stz $0495			stz 	dbOffset 					; offset into decimal buffer = start.
.a047	bd 00 04	lda $0400,x			lda 	NSStatus,x  				; is it -ve.
.a04a	10 0a		bpl $a056			bpl 	_CNTSNotNegative
.a04c	29 7f		and #$7f			and 	#$7F 						; make +ve
.a04e	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a051	a9 2d		lda #$2d			lda 	#"-"
.a053	20 bc a0	jsr $a0bc			jsr 	WriteDecimalBuffer
.a056					_CNTSNotNegative:
.a056	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if decimal
.a059	f0 15		beq $a070			beq 	_CNTSNotFloat
.a05b	e8		inx				inx 								; round up
.a05c	a9 01		lda #$01			lda 	#1
.a05e	20 21 a2	jsr $a221			jsr 	NSMSetByte
.a061	ca		dex				dex
.a062	bd 28 04	lda $0428,x			lda		NSExponent,x
.a065	9d 29 04	sta $0429,x			sta 	NSExponent+1,x
.a068	a9 08		lda #$08			lda 	#NSTFloat
.a06a	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.a06d	20 f0 ab	jsr $abf0			jsr 	FloatAdd
.a070					_CNTSNotFloat:
.a070	20 9e a0	jsr $a09e			jsr 	MakePlusTwoString
.a073	20 ce ac	jsr $acce			jsr 	FloatFractionalPart 		; get the fractional part
.a076	20 92 ad	jsr $ad92			jsr 	NSNormalise					; normalise , exit if zero
.a079	f0 21		beq $a09c			beq 	_CNTSExit
.a07b	a9 2e		lda #$2e			lda 	#"."
.a07d	20 bc a0	jsr $a0bc			jsr 	WriteDecimalBuffer 			; write decimal place
.a080					_CNTSDecimal:
.a080	ce 94 04	dec $0494			dec 	DecimalPlaces 				; done all the decimals
.a083	30 17		bmi $a09c			bmi 	_CNTSExit
.a085	e8		inx				inx 								; x 10.0
.a086	a9 0a		lda #$0a			lda 	#10
.a088	20 21 a2	jsr $a221			jsr 	NSMSetByte
.a08b	a9 08		lda #$08			lda 	#NSTFloat
.a08d	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a090	ca		dex				dex
.a091	20 5b ad	jsr $ad5b			jsr 	FloatMultiply
.a094	20 9e a0	jsr $a09e			jsr 	MakePlusTwoString
.a097	20 ce ac	jsr $acce			jsr 	FloatFractionalPart 		; get the fractional part
.a09a	80 e4		bra $a080			bra 	_CNTSDecimal 				; keep going.
.a09c					_CNTSExit:
.a09c	7a		ply				ply
.a09d	60		rts				rts
.a09e					MakePlusTwoString:
.a09e	da		phx				phx
.a09f	20 f6 a1	jsr $a1f6			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.a0a2	e8		inx				inx 								; access it
.a0a3	e8		inx				inx
.a0a4	20 31 ad	jsr $ad31			jsr 	FloatIntegerPart 			; make it an integer
.a0a7	a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.a0a9	20 9a ab	jsr $ab9a			jsr 	ConvertInt32
.a0ac	a2 00		ldx #$00			ldx	 	#0
.a0ae					_MPTSCopy:
.a0ae	bd f7 05	lda $05f7,x			lda 	NumberBuffer,x
.a0b1	20 bc a0	jsr $a0bc			jsr 	WriteDecimalBuffer
.a0b4	e8		inx				inx
.a0b5	bd f7 05	lda $05f7,x			lda 	NumberBuffer,x
.a0b8	d0 f4		bne $a0ae			bne 	_MPTSCopy
.a0ba	fa		plx				plx
.a0bb	60		rts				rts
.a0bc					WriteDecimalBuffer:
.a0bc	da		phx				phx
.a0bd	ae 95 04	ldx $0495			ldx 	dbOffset
.a0c0	9d 19 06	sta $0619,x			sta 	DecimalBuffer,x
.a0c3	9e 1a 06	stz $061a,x			stz 	DecimalBuffer+1,x
.a0c6	ee 95 04	inc $0495			inc 	dbOffset
.a0c9	fa		plx				plx
.a0ca	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/substring.asm

.a0cb					Unary_Left:
.a0cb	fa		plx				plx
.a0cc	18		clc				clc 								; only one parameter
.a0cd	20 42 a1	jsr $a142			jsr 	SubstringInitial 			; set up.
.a0d0	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; Param #1 is the length
.a0d3	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.a0d6	9e 09 04	stz $0409,x			stz 	NSMantissa0+1,x 			; Start is zero.
.a0d9	80 2c		bra $a107			bra 	SubstringMain
.a0db					Unary_Right:
.a0db	fa		plx				plx
.a0dc	18		clc				clc 								; only one parameter
.a0dd	20 42 a1	jsr $a142			jsr 	SubstringInitial 			; set up.
.a0e0	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; length => param 2
.a0e3	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.a0e6	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; total length
.a0e9	fd 09 04	sbc $0409,x			sbc 	NSMantissa0+1,x 			; length - required.
.a0ec	b0 02		bcs $a0f0			bcs 	_URNotUnderflow
.a0ee	a9 00		lda #$00			lda 	#0 							; start from the beginning, as something like right$("AB",3)
.a0f0					_URNotUnderFlow:
.a0f0	9d 09 04	sta $0409,x			sta 	NSMantissa0+1,x 			; this is the start position
.a0f3	80 12		bra $a107			bra 	SubStringMain
.a0f5					Unary_Mid:
.a0f5	fa		plx				plx
.a0f6	38		sec				sec 								; two parameters
.a0f7	20 42 a1	jsr $a142			jsr 	SubstringInitial 			; set up.
.a0fa	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; first parameter is zero ?
.a0fd	f0 05		beq $a104			beq 	_UMError
.a0ff	de 09 04	dec $0409,x			dec 	NSMantissa0+1,x				; reduce initial offset by 1 as MID$(a$,1..) is actually the first character
.a102	80 03		bra $a107			bra 	SubStringMain
.a104					_UMError:
.a104	4c 1e b0	jmp $b01e			jmp 	ArgumentError
.a107					SubStringMain:
.a107	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; is the initial offset >= the length
.a10a	dd 28 04	cmp $0428,x			cmp 	NSExponent,x
.a10d	b0 2d		bcs $a13c			bcs 	_SSMNull 					; if so, return an empty string.
.a10f	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; if copy count is zero
.a112	f0 28		beq $a13c			beq 	_SSMNull 					; return empty string.
.a114	18		clc				clc 								; add the offset +1 to the address and
.a115	bd 08 04	lda $0408,x			lda	 	NSMantissa0,x 				; put in zTemp
.a118	7d 09 04	adc $0409,x			adc 	NSMantissa0+1,x
.a11b	85 36		sta $36				sta 	zTemp0
.a11d	bd 10 04	lda $0410,x			lda	 	NSMantissa1,x
.a120	69 00		adc #$00			adc 	#0
.a122	85 37		sta $37				sta 	zTemp0+1
.a124					_SSMNoCarry:
.a124	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; characters required.
.a127	20 38 b3	jsr $b338			jsr 	StringTempAllocate 			; allocate that many characters
.a12a	5a		phy				phy 								; save Y
.a12b	a0 00		ldy #$00			ldy 	#0 							; start copying in.
.a12d					_SSMCopy:
.a12d	b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next character
.a12f	f0 09		beq $a13a			beq 	_SSMEString 				; no more to copy
.a131	20 76 b3	jsr $b376			jsr 	StringTempWrite 			; and write it out.
.a134	c8		iny				iny
.a135	de 0a 04	dec $040a,x			dec 	NSMantissa0+2,x
.a138	d0 f3		bne $a12d			bne 	_SSMCopy
.a13a					_SSMEString:
.a13a	7a		ply				ply
.a13b					_SSMExit:
.a13b	60		rts				rts
.a13c					_SSMNull:
.a13c	a9 00		lda #$00			lda 	#0
.a13e	20 38 b3	jsr $b338			jsr 	StringTempAllocate
.a141	60		rts				rts
.a142					SubstringInitial:
.a142	da		phx				phx 								; save initial stack position
.a143	08		php				php 								; save carry on stack indicating 2 parameters
.a144	20 7e a1	jsr $a17e			jsr 	EvaluateString 				; get a string
.a147	5a		phy				phy 								; calculate length to exponent.
.a148	a0 ff		ldy #$ff			ldy 	#$FF
.a14a					_SIFindLength:
.a14a	c8		iny				iny
.a14b	b1 36		lda ($36),y			lda 	(zTemp0),y
.a14d	d0 fb		bne $a14a			bne 	_SIFindLength
.a14f	98		tya				tya
.a150	9d 28 04	sta $0428,x			sta 	NSExponent,x
.a153	7a		ply				ply
.a154	e8		inx				inx
.a155	20 31 aa	jsr $aa31			jsr 	CheckComma 					; comma next
.a158	20 b7 a1	jsr $a1b7			jsr 	Evaluate8BitInteger 		; get next parameter
.a15b	28		plp				plp 								; is it the last parameter ?
.a15c	90 07		bcc $a165			bcc 	_SSIExit 					; if so, exit.
.a15e	e8		inx				inx
.a15f	20 31 aa	jsr $aa31			jsr 	CheckComma 					; comma next
.a162	20 b7 a1	jsr $a1b7			jsr 	Evaluate8BitInteger 		; get last parameter
.a165					_SSIExit:
.a165	fa		plx				plx
.a166	20 29 aa	jsr $aa29			jsr 	CheckRightBracket 			; check closing bracket
.a169	60		rts				rts 								; exit

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/exprhelper.asm

.a16a					EvaluateValue:
.a16a	48		pha				pha
.a16b	20 70 9a	jsr $9a70			jsr		EvaluateExpression 			; expression
.a16e	20 85 9b	jsr $9b85			jsr 	Dereference					; derefernce it
.a171	68		pla				pla
.a172	60		rts				rts
.a173					EvaluateNumber:
.a173	20 6a a1	jsr $a16a			jsr 	EvaluateValue 				; get a value
.a176	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if string.
.a179	29 10		and #$10			and 	#NSBIsString
.a17b	d0 16		bne $a193			bne 	HelperTypeError
.a17d	60		rts				rts
.a17e					EvaluateString:
.a17e	20 6a a1	jsr $a16a			jsr 	EvaluateValue 				; get a value
.a181	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if string.
.a184	29 10		and #$10			and 	#NSBIsString
.a186	f0 0b		beq $a193			beq 	HelperTypeError
.a188					CopyAddressToTemp0:
.a188	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address -> zTemp0
.a18b	85 36		sta $36				sta 	zTemp0
.a18d	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a190	85 37		sta $37				sta 	zTemp0+1
.a192	60		rts				rts
.a193					HelperTypeError:
.a193	4c 19 b0	jmp $b019			jmp 	TypeError
.a196					EvaluateInteger:
.a196	20 73 a1	jsr $a173			jsr 	EvaluateNumber
.a199	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check exponent is zero
.a19c	d0 0a		bne $a1a8			bne 	HelperValueError 			; if not, it's a float.
.a19e	60		rts				rts
.a19f					EvaluateUnsignedInteger:
.a19f	20 96 a1	jsr $a196			jsr 	EvaluateInteger 			; check integer is +ve
.a1a2	bd 00 04	lda $0400,x			lda 	NSStatus,x
.a1a5	30 01		bmi $a1a8			bmi 	HelperValueError
.a1a7	60		rts				rts
.a1a8					HelperValueError:
.a1a8	4c 1e b0	jmp $b01e			jmp 	ArgumentError
.a1ab					Evaluate16BitInteger:
.a1ab	20 9f a1	jsr $a19f			jsr	 	EvaluateUnsignedInteger		; get integer
.a1ae	bd 20 04	lda $0420,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.a1b1	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.a1b4	d0 f2		bne $a1a8			bne 	HelperValueError
.a1b6	60		rts				rts
.a1b7					Evaluate8BitInteger:
.a1b7	20 9f a1	jsr $a19f			jsr	 	EvaluateUnsignedInteger 	; get an integer
.a1ba	d0 ec		bne $a1a8			bne 	HelperValueError
.a1bc	bd 20 04	lda $0420,x			lda 	NSMantissa3,x	 			; bytes 1, 2 & 3 must be zero
.a1bf	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.a1c2	1d 10 04	ora $0410,x			ora 	NSMantissa1,x
.a1c5	d0 e1		bne $a1a8			bne 	HelperValueError
.a1c7	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.a1ca	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/mult8x8.asm

.aeab					Multiply8x8:
.aeab	4a		lsr a		  		lsr 	a  							; prime the carry bit for the loop
.aeac	85 36		sta $36			  	sta 	zTemp0
.aeae	86 37		stx $37				stx 	zTemp0+1
.aeb0	a9 00		lda #$00			lda 	#0
.aeb2	a2 08		ldx #$08			ldx 	#8
.aeb4					_M88Loop:
.aeb4	90 03		bcc $aeb9			bcc 	_M88NoAdd
.aeb6	18		clc				clc
.aeb7	65 37		adc $37				adc 	zTemp0+1
.aeb9					_M88NoAdd:
.aeb9	6a		ror a				ror 	a
.aeba	66 36		ror $36				ror 	zTemp0  					; pull another bit out for the next iteration
.aebc	ca		dex				dex         						; inc/dec don't modify carry; only shifts and adds do
.aebd	d0 f5		bne $aeb4			bne 	_M88Loop
.aebf	85 37		sta $37				sta 	zTemp0+1 					; store high 8 bits.
.aec1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/utility.asm

.a1cb					NSMNegate:
.a1cb	bd 00 04	lda $0400,x			lda 	NSStatus,x
.a1ce	49 80		eor #$80			eor 	#NSBIsNegative
.a1d0	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a1d3	60		rts				rts
.a1d4					NSMNegateMantissa:
.a1d4	38		sec				sec
.a1d5	a9 00		lda #$00			lda 	#0
.a1d7	fd 08 04	sbc $0408,x			sbc 	NSMantissa0,x
.a1da	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a1dd	a9 00		lda #$00			lda 	#0
.a1df	fd 10 04	sbc $0410,x			sbc 	NSMantissa1,x
.a1e2	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a1e5	a9 00		lda #$00			lda 	#0
.a1e7	fd 18 04	sbc $0418,x			sbc 	NSMantissa2,x
.a1ea	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.a1ed	a9 00		lda #$00			lda 	#0
.a1ef	fd 20 04	sbc $0420,x			sbc 	NSMantissa3,x
.a1f2	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.a1f5	60		rts				rts
.a1f6					NSMShiftUpTwo:
.a1f6	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.a1f9	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.a1fc	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a1ff	9d 12 04	sta $0412,x			sta 	NSMantissa1+2,x
.a202	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.a205	9d 1a 04	sta $041a,x			sta 	NSMantissa2+2,x
.a208	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.a20b	9d 22 04	sta $0422,x			sta 	NSMantissa3+2,x
.a20e	bd 28 04	lda $0428,x			lda 	NSExponent,x
.a211	9d 2a 04	sta $042a,x			sta 	NSExponent+2,x
.a214	bd 00 04	lda $0400,x			lda 	NSStatus,x
.a217	9d 02 04	sta $0402,x			sta 	NSStatus+2,x
.a21a	60		rts				rts
.a21b					NSMSetZeroMantissaOnly:
.a21b	a9 00		lda #$00			lda 	#0
.a21d	80 08		bra $a227			bra 	NSMSetMantissa
.a21f					NSMSetZero:
.a21f	a9 00		lda #$00			lda 	#0
.a221					NSMSetByte:
.a221	9e 28 04	stz $0428,x			stz 	NSExponent,x 				; zero exponent, as integer.
.a224	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; status zero (integer)
.a227					NSMSetMantissa:
.a227	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; mantissa
.a22a	9e 10 04	stz $0410,x			stz 	NSMantissa1,x
.a22d	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.a230	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.a233	60		rts				rts
.a234					NSMShiftLeft:
.a234	18		clc				clc
.a235					NSMRotateLeft:
.a235	3e 08 04	rol $0408,x			rol 	NSMantissa0,x
.a238	3e 10 04	rol $0410,x			rol		NSMantissa1,x
.a23b	3e 18 04	rol $0418,x			rol		NSMantissa2,x
.a23e	3e 20 04	rol $0420,x			rol		NSMantissa3,x
.a241	60		rts				rts
.a242					NSMShiftRight:
.a242	5e 20 04	lsr $0420,x			lsr 	NSMantissa3,x
.a245	7e 18 04	ror $0418,x			ror		NSMantissa2,x
.a248	7e 10 04	ror $0410,x			ror		NSMantissa1,x
.a24b	7e 08 04	ror $0408,x			ror		NSMantissa0,x
.a24e	60		rts				rts
.a24f					NSMIsZero:
.a24f	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.a252	1d 18 04	ora $0418,x			ora		NSMantissa2,x
.a255	1d 10 04	ora $0410,x			ora		NSMantissa1,x
.a258	1d 08 04	ora $0408,x			ora		NSMantissa0,x
.a25b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/asmcore.asm

.aec2					Assemble_ora:
.aec2	20 39 89	jsr $8939		jsr	AssembleGroup1
>aec5	01					.byte $01
.aec6					Assemble_and:
.aec6	20 39 89	jsr $8939		jsr	AssembleGroup1
>aec9	21					.byte $21
.aeca					Assemble_eor:
.aeca	20 39 89	jsr $8939		jsr	AssembleGroup1
>aecd	41					.byte $41
.aece					Assemble_adc:
.aece	20 39 89	jsr $8939		jsr	AssembleGroup1
>aed1	61					.byte $61
.aed2					Assemble_sta:
.aed2	20 39 89	jsr $8939		jsr	AssembleGroup1
>aed5	81					.byte $81
.aed6					Assemble_lda:
.aed6	20 39 89	jsr $8939		jsr	AssembleGroup1
>aed9	a1					.byte $a1
.aeda					Assemble_cmp:
.aeda	20 39 89	jsr $8939		jsr	AssembleGroup1
>aedd	c1					.byte $c1
.aede					Assemble_sbc:
.aede	20 39 89	jsr $8939		jsr	AssembleGroup1
>aee1	e1					.byte $e1
.aee2					Assemble_asl:
.aee2	20 40 89	jsr $8940		jsr	AssembleGroup2
>aee5	02					.byte $02
>aee6	75					.byte $75
.aee7					Assemble_rol:
.aee7	20 40 89	jsr $8940		jsr	AssembleGroup2
>aeea	22					.byte $22
>aeeb	75					.byte $75
.aeec					Assemble_lsr:
.aeec	20 40 89	jsr $8940		jsr	AssembleGroup2
>aeef	42					.byte $42
>aef0	75					.byte $75
.aef1					Assemble_ror:
.aef1	20 40 89	jsr $8940		jsr	AssembleGroup2
>aef4	62					.byte $62
>aef5	75					.byte $75
.aef6					Assemble_stx:
.aef6	20 40 89	jsr $8940		jsr	AssembleGroup2
>aef9	82					.byte $82
>aefa	50					.byte $50
.aefb					Assemble_ldx:
.aefb	20 40 89	jsr $8940		jsr	AssembleGroup2
>aefe	a2					.byte $a2
>aeff	d0					.byte $d0
.af00					Assemble_dec:
.af00	20 40 89	jsr $8940		jsr	AssembleGroup2
>af03	c2					.byte $c2
>af04	55					.byte $55
.af05					Assemble_inc:
.af05	20 40 89	jsr $8940		jsr	AssembleGroup2
>af08	e2					.byte $e2
>af09	55					.byte $55
.af0a					Assemble_stz:
.af0a	20 40 89	jsr $8940		jsr	AssembleGroup2
>af0d	60					.byte $60
>af0e	44					.byte $44
.af0f					Assemble_bit:
.af0f	20 40 89	jsr $8940		jsr	AssembleGroup2
>af12	20					.byte $20
>af13	55					.byte $55
.af14					Assemble_sty:
.af14	20 40 89	jsr $8940		jsr	AssembleGroup2
>af17	80					.byte $80
>af18	54					.byte $54
.af19					Assemble_ldy:
.af19	20 40 89	jsr $8940		jsr	AssembleGroup2
>af1c	a0					.byte $a0
>af1d	d5					.byte $d5
.af1e					Assemble_cpy:
.af1e	20 40 89	jsr $8940		jsr	AssembleGroup2
>af21	c0					.byte $c0
>af22	d4					.byte $d4
.af23					Assemble_cpx:
.af23	20 40 89	jsr $8940		jsr	AssembleGroup2
>af26	e0					.byte $e0
>af27	d0					.byte $d0
.af28					Assemble_tsb:
.af28	20 40 89	jsr $8940		jsr	AssembleGroup2
>af2b	00					.byte $00
>af2c	50					.byte $50
.af2d					Assemble_trb:
.af2d	20 40 89	jsr $8940		jsr	AssembleGroup2
>af30	10					.byte $10
>af31	50					.byte $50
.af32					Assemble_jsr:
.af32	20 40 89	jsr $8940		jsr	AssembleGroup2
>af35	14					.byte $14
>af36	10					.byte $10
.af37					Assemble_jmp:
.af37	20 40 89	jsr $8940		jsr	AssembleGroup2
>af3a	40					.byte $40
>af3b	10					.byte $10
.af3c					Assemble_bpl:
.af3c	20 91 89	jsr $8991		jsr	AssembleGroup3
>af3f	10					.byte $10
.af40					Assemble_bmi:
.af40	20 91 89	jsr $8991		jsr	AssembleGroup3
>af43	30					.byte $30
.af44					Assemble_bvc:
.af44	20 91 89	jsr $8991		jsr	AssembleGroup3
>af47	50					.byte $50
.af48					Assemble_bvs:
.af48	20 91 89	jsr $8991		jsr	AssembleGroup3
>af4b	70					.byte $70
.af4c					Assemble_bcc:
.af4c	20 91 89	jsr $8991		jsr	AssembleGroup3
>af4f	90					.byte $90
.af50					Assemble_bcs:
.af50	20 91 89	jsr $8991		jsr	AssembleGroup3
>af53	b0					.byte $b0
.af54					Assemble_bne:
.af54	20 91 89	jsr $8991		jsr	AssembleGroup3
>af57	d0					.byte $d0
.af58					Assemble_beq:
.af58	20 91 89	jsr $8991		jsr	AssembleGroup3
>af5b	f0					.byte $f0
.af5c					Assemble_bra:
.af5c	20 91 89	jsr $8991		jsr	AssembleGroup3
>af5f	80					.byte $80
.af60					Assemble_brk:
.af60	20 c7 89	jsr $89c7		jsr	AssembleGroup4
>af63	00					.byte $00
.af64					Assemble_php:
.af64	20 c7 89	jsr $89c7		jsr	AssembleGroup4
>af67	08					.byte $08
.af68					Assemble_clc:
.af68	20 c7 89	jsr $89c7		jsr	AssembleGroup4
>af6b	18					.byte $18
.af6c					Assemble_plp:
.af6c	20 c7 89	jsr $89c7		jsr	AssembleGroup4
>af6f	28					.byte $28
.af70					Assemble_sec:
.af70	20 c7 89	jsr $89c7		jsr	AssembleGroup4
>af73	38					.byte $38
.af74					Assemble_rti:
.af74	20 c7 89	jsr $89c7		jsr	AssembleGroup4
>af77	40					.byte $40
.af78					Assemble_pha:
.af78	20 c7 89	jsr $89c7		jsr	AssembleGroup4
>af7b	48					.byte $48
.af7c					Assemble_cli:
.af7c	20 c7 89	jsr $89c7		jsr	AssembleGroup4
>af7f	58					.byte $58
.af80					Assemble_phy:
.af80	20 c7 89	jsr $89c7		jsr	AssembleGroup4
>af83	5a					.byte $5a
.af84					Assemble_rts:
.af84	20 c7 89	jsr $89c7		jsr	AssembleGroup4
>af87	60					.byte $60
.af88					Assemble_pla:
.af88	20 c7 89	jsr $89c7		jsr	AssembleGroup4
>af8b	68					.byte $68
.af8c					Assemble_sei:
.af8c	20 c7 89	jsr $89c7		jsr	AssembleGroup4
>af8f	78					.byte $78
.af90					Assemble_ply:
.af90	20 c7 89	jsr $89c7		jsr	AssembleGroup4
>af93	7a					.byte $7a
.af94					Assemble_dey:
.af94	20 c7 89	jsr $89c7		jsr	AssembleGroup4
>af97	88					.byte $88
.af98					Assemble_txa:
.af98	20 c7 89	jsr $89c7		jsr	AssembleGroup4
>af9b	8a					.byte $8a
.af9c					Assemble_tya:
.af9c	20 c7 89	jsr $89c7		jsr	AssembleGroup4
>af9f	98					.byte $98
.afa0					Assemble_txs:
.afa0	20 c7 89	jsr $89c7		jsr	AssembleGroup4
>afa3	9a					.byte $9a
.afa4					Assemble_tay:
.afa4	20 c7 89	jsr $89c7		jsr	AssembleGroup4
>afa7	a8					.byte $a8
.afa8					Assemble_tax:
.afa8	20 c7 89	jsr $89c7		jsr	AssembleGroup4
>afab	aa					.byte $aa
.afac					Assemble_clv:
.afac	20 c7 89	jsr $89c7		jsr	AssembleGroup4
>afaf	b8					.byte $b8
.afb0					Assemble_tsx:
.afb0	20 c7 89	jsr $89c7		jsr	AssembleGroup4
>afb3	ba					.byte $ba
.afb4					Assemble_iny:
.afb4	20 c7 89	jsr $89c7		jsr	AssembleGroup4
>afb7	c8					.byte $c8
.afb8					Assemble_dex:
.afb8	20 c7 89	jsr $89c7		jsr	AssembleGroup4
>afbb	ca					.byte $ca
.afbc					Assemble_cld:
.afbc	20 c7 89	jsr $89c7		jsr	AssembleGroup4
>afbf	d8					.byte $d8
.afc0					Assemble_phx:
.afc0	20 c7 89	jsr $89c7		jsr	AssembleGroup4
>afc3	da					.byte $da
.afc4					Assemble_stp:
.afc4	20 c7 89	jsr $89c7		jsr	AssembleGroup4
>afc7	db					.byte $db
.afc8					Assemble_inx:
.afc8	20 c7 89	jsr $89c7		jsr	AssembleGroup4
>afcb	e8					.byte $e8
.afcc					Assemble_nop:
.afcc	20 c7 89	jsr $89c7		jsr	AssembleGroup4
>afcf	ea					.byte $ea
.afd0					Assemble_sed:
.afd0	20 c7 89	jsr $89c7		jsr	AssembleGroup4
>afd3	f8					.byte $f8
.afd4					Assemble_plx:
.afd4	20 c7 89	jsr $89c7		jsr	AssembleGroup4
>afd7	fa					.byte $fa

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/constants.asm

.afd8					DecimalScalarTable:
>afd8	66 66 66 66				.dword $66666666 ; 0.1
>afdc	de					.byte $de
>afdd	1f 85 eb 51				.dword $51eb851f ; 0.01
>afe1	db					.byte $db
>afe2	4c 37 89 41				.dword $4189374c ; 0.001
>afe6	d8					.byte $d8
>afe7	ac 8b db 68				.dword $68db8bac ; 0.0001
>afeb	d4					.byte $d4
>afec	24 d6 e2 53				.dword $53e2d624 ; 1e-05
>aff0	d1					.byte $d1
>aff1	83 de 1b 43				.dword $431bde83 ; 1e-06
>aff5	ce					.byte $ce
>aff6	6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>affa	ca					.byte $ca
>affb	89 3b e6 55				.dword $55e63b89 ; 1e-08
>afff	c7					.byte $c7
>b000	a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>b004	c4					.byte $c4
>b005	67 7f f3 6d				.dword $6df37f67 ; 1e-10
>b009	c0					.byte $c0
>b00a	86 ff f5 57				.dword $57f5ff86 ; 1e-11
>b00e	bd					.byte $bd

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.asm

.b00f					SyntaxError:
.b00f	a9 02		lda #$02		lda	#2
.b011	4c 67 96	jmp $9667		jmp	ErrorHandler
.b014					RangeError:
.b014	a9 04		lda #$04		lda	#4
.b016	4c 67 96	jmp $9667		jmp	ErrorHandler
.b019					TypeError:
.b019	a9 05		lda #$05		lda	#5
.b01b	4c 67 96	jmp $9667		jmp	ErrorHandler
.b01e					ArgumentError:
.b01e	a9 07		lda #$07		lda	#7
.b020	4c 67 96	jmp $9667		jmp	ErrorHandler
.b023					NotDoneError:
.b023	a9 0c		lda #$0c		lda	#12
.b025	4c 67 96	jmp $9667		jmp	ErrorHandler
.b028					ErrorText:
>b028	42 72 65 61 6b 00			.text	"Break",0
>b02e	53 79 6e 74 61 78 20 65			.text	"Syntax error",0
>b036	72 72 6f 72 00
>b03b	44 69 76 69 73 69 6f 6e			.text	"Division by zero",0
>b043	20 62 79 20 7a 65 72 6f 00
>b04c	4f 75 74 20 6f 66 20 52			.text	"Out of Range",0
>b054	61 6e 67 65 00
>b059	54 79 70 65 20 6d 69 73			.text	"Type mismatch",0
>b061	6d 61 74 63 68 00
>b067	4f 75 74 20 6f 66 20 6d			.text	"Out of memory",0
>b06f	65 6d 6f 72 79 00
>b075	49 6c 6c 65 67 61 6c 20			.text	"Illegal argument",0
>b07d	61 72 67 75 6d 65 6e 74 00
>b086	53 74 6f 70 00				.text	"Stop",0
>b08b	53 74 72 69 6e 67 20 74			.text	"String too long",0
>b093	6f 6f 20 6c 6f 6e 67 00
>b09b	41 73 73 65 72 74 69 6f			.text	"Assertion failed",0
>b0a3	6e 20 66 61 69 6c 65 64 00
>b0ac	4f 75 74 20 6f 66 20 64			.text	"Out of data",0
>b0b4	61 74 61 00
>b0b8	55 6e 69 6d 70 6c 65 6d			.text	"Unimplemented",0
>b0c0	65 6e 74 65 64 00
>b0c6	4e 6f 20 73 75 63 68 20			.text	"No such line number",0
>b0ce	6c 69 6e 65 20 6e 75 6d 62 65 72 00
>b0da	52 65 74 75 72 6e 20 77			.text	"Return without Gosub",0
>b0e2	69 74 68 6f 75 74 20 47 6f 73 75 62 00
>b0ef	55 6e 74 69 6c 20 77 69			.text	"Until without Repeat",0
>b0f7	74 68 6f 75 74 20 52 65 70 65 61 74 00
>b104	57 65 6e 64 20 77 69 74			.text	"Wend without While",0
>b10c	68 6f 75 74 20 57 68 69 6c 65 00
>b117	4e 65 78 74 20 77 69 74			.text	"Next without For",0
>b11f	68 6f 75 74 20 46 6f 72 00
>b128	42 41 53 49 43 20 53 74			.text	"BASIC Stack full",0
>b130	61 63 6b 20 66 75 6c 6c 00
>b139	4f 70 65 6e 20 53 74 72			.text	"Open Structure",0
>b141	75 63 74 75 72 65 00
>b148	45 6e 64 50 72 6f 63 20			.text	"EndProc without call",0
>b150	77 69 74 68 6f 75 74 20 63 61 6c 6c 00
>b15d	41 72 72 61 79 20 61 6c			.text	"Array already defined",0
>b165	72 65 61 64 79 20 64 65 66 69 6e 65 64 00
>b173	41 72 72 61 79 20 73 69			.text	"Array size",0
>b17b	7a 65 00
>b17e	42 61 64 20 61 72 72 61			.text	"Bad array index",0
>b186	79 20 69 6e 64 65 78 00

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/timestamp.asm

>b18e	42 75 69 6c 74 20 57 65			.text "Built Wednesday 12-Oct-2022. Build 1580."
>b196	64 6e 65 73 64 61 79 20 31 32 2d 4f 63 74 2d 32
>b1a6	30 32 32 2e 20 42 75 69 6c 64 20 31 35 38 30 2e

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/hardware/junior/extern.asm

.b1b6					EXTPrintCharacter:
.b1b6	48		pha				pha
.b1b7	da		phx				phx
.b1b8	5a		phy				phy
.b1b9	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.b1bc	7a		ply				ply
.b1bd	fa		plx				plx
.b1be	68		pla				pla
.b1bf	60		rts				rts
.b1c0					EXTInputSingleCharacter:
.b1c0	da		phx				phx
.b1c1	5a		phy				phy
.b1c2					_EISCWait:
.b1c2	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.b1c5	c9 00		cmp #$00			cmp 	#0
.b1c7	f0 f9		beq $b1c2			beq 	_EISCWait
.b1c9	7a		ply				ply
.b1ca	fa		plx				plx
.b1cb	60		rts				rts
.b1cc					EXTInputLine:
.b1cc	a2 00		ldx #$00			ldx 	#0 							; position in line <- start of line
.b1ce					_ILLoop:
.b1ce	da		phx				phx 								; read character in
.b1cf	20 cf ff	jsr $ffcf			jsr 	$FFCF
.b1d2	fa		plx				plx
.b1d3	c9 08		cmp #$08			cmp 	#8 							; backspace, CBM doesn't need this.
.b1d5	f0 12		beq $b1e9			beq 	_ILBackspace
.b1d7	c9 0d		cmp #$0d			cmp 	#13							; exit ?
.b1d9	f0 15		beq $b1f0			beq 	_ILExit
.b1db	c9 20		cmp #$20			cmp 	#32 						; ignore other control
.b1dd	90 ef		bcc $b1ce			bcc 	_ILLoop
.b1df	e0 50		cpx #$50			cpx 	#MaxLineSize 				; already full buffer
.b1e1	f0 eb		beq $b1ce			beq 	_ILLoop
.b1e3	9d a6 05	sta $05a6,x			sta 	lineBuffer,x 				; save it
.b1e6	e8		inx				inx
.b1e7	80 e5		bra $b1ce			bra 	_ILLoop
.b1e9					_ILBackspace:
.b1e9	e0 00		cpx #$00			cpx 	#0  						; can't backspace, start of line.
.b1eb	f0 e1		beq $b1ce			beq 	_ILLoop
.b1ed	ca		dex				dex 								; back one.
.b1ee	80 de		bra $b1ce			bra 	_ILLoop
.b1f0					_ILExit:
.b1f0	20 b6 b1	jsr $b1b6			jsr 	EXTPrintCharacter
.b1f3	9e a6 05	stz $05a6,x			stz 	lineBuffer,x 				; make ASCIIZ and exit with address in XA
.b1f6	60		rts				rts
.b1f7					EXTBreakCheck:
.b1f7	4c e1 ff	jmp $ffe1			jmp		$FFE1

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/delete.asm

.b1fa					MemoryDeleteLine:
.b1fa	20 19 b2	jsr $b219			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.b1fd	b2 30		lda ($30)			lda 	(codePtr) 					; size to delete => y
.b1ff	a8		tay				tay
.b200					_MDDLLoop:
.b200	b1 30		lda ($30),y			lda 	(codePtr),y 				; copy down
.b202	92 30		sta ($30)			sta 	(codePtr)
.b204	a5 30		lda $30				lda 	codePtr 					; check done the lot.
.b206	c5 3a		cmp $3a				cmp 	zTemp2
.b208	d0 07		bne $b211			bne 	_MDLDLNext
.b20a	a5 31		lda $31				lda 	codePtr+1
.b20c	c5 3b		cmp $3b				cmp 	zTemp2+1
.b20e	d0 01		bne $b211			bne 	_MDLDLNext
.b210					_MDDLExit:
.b210	60		rts				rts
.b211					_MDLDLNext:
.b211	e6 30		inc $30				inc 	codePtr						; next byte
.b213	d0 eb		bne $b200			bne 	_MDDLLoop
.b215	e6 31		inc $31				inc 	codePtr+1
.b217	80 e7		bra $b200			bra 	_MDDLLoop
.b219					IMemoryFindEnd:
.b219	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.b21b	85 3a		sta $3a				sta 	0+zTemp2
.b21d	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.b21f	85 3b		sta $3b				sta 	1+zTemp2
.b221					_MDLFELoop:
.b221	b2 3a		lda ($3a)			lda 	(zTemp2)
.b223	f0 0b		beq $b230			beq 	_MDLFEExit
.b225	18		clc				clc
.b226	65 3a		adc $3a				adc 	zTemp2
.b228	85 3a		sta $3a				sta 	zTemp2
.b22a	90 f5		bcc $b221			bcc 	_MDLFELoop
.b22c	e6 3b		inc $3b				inc 	zTemp2+1
.b22e	80 f1		bra $b221			bra 	_MDLFELoop
.b230					_MDLFEExit:
.b230	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/insert.asm

.b231					MemoryInsertLine:
.b231	08		php				php
.b232	20 19 b2	jsr $b219			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.b235	a5 3b		lda $3b				lda 	zTemp2+1 					; space ?
.b237	1a		inc a				inc 	a
.b238	c9 7f		cmp #$7f			cmp 	#(BasicEnd >> 8)-1
.b23a	b0 36		bcs $b272			bcs 	_MDLIError
.b23c	28		plp				plp
.b23d	90 08		bcc $b247			bcc 	_MDLIFound
.b23f	a5 3a		lda $3a				lda 	zTemp2 						; if CS on entry append.
.b241	85 30		sta $30				sta 	codePtr
.b243	a5 3b		lda $3b				lda 	zTemp2+1
.b245	85 31		sta $31				sta 	codePtr+1
.b247					_MDLIFound:
.b247	ad a6 04	lda $04a6			lda 	tokenOffset 				; insert gap in Y, the offset, e.g. length of the new line
.b24a	a8		tay				tay
.b24b					_MDLIInsert:
.b24b	b2 3a		lda ($3a)			lda 	(zTemp2) 					; shift one byte up , at least one covers end case.
.b24d	91 3a		sta ($3a),y			sta 	(zTemp2),y 					; work from top down.
.b24f	a5 30		lda $30				lda 	codePtr 					; done insert point ?
.b251	c5 3a		cmp $3a				cmp 	zTemp2
.b253	d0 06		bne $b25b			bne 	_MDLINext
.b255	a5 31		lda $31				lda 	codePtr+1
.b257	c5 3b		cmp $3b				cmp 	zTemp2+1
.b259	f0 0a		beq $b265			beq 	_MDLIHaveSpace
.b25b					_MDLINext:
.b25b	a5 3a		lda $3a				lda 	zTemp2 						; if no, keep zTemp2 going backwards
.b25d	d0 02		bne $b261			bne 	_MDLINoBorrow
.b25f	c6 3b		dec $3b				dec 	zTemp2+1
.b261					_MDLINoBorrow:
.b261	c6 3a		dec $3a				dec 	zTemp2
.b263	80 e6		bra $b24b			bra 	_MDLIInsert
.b265					_MDLIHaveSpace:
.b265	ac a6 04	ldy $04a6			ldy 	tokenOffset 				; bytes to copy
.b268	88		dey				dey 								; from offset-1 to 0
.b269					_MDLICopy:
.b269	b9 a6 04	lda $04a6,y			lda 	tokenOffset,y
.b26c	91 30		sta ($30),y			sta 	(codePtr),y
.b26e	88		dey				dey
.b26f	10 f8		bpl $b269			bpl 	_MDLICopy
.b271	60		rts				rts
.b272					_MDLIError:
.b272	a9 06		lda #$06		lda	#6
.b274	4c 67 96	jmp $9667		jmp	ErrorHandler
.b277					MDLAppendLine:
.b277	86 37		stx $37				stx 	zTemp0+1 					; save new line at zTemp0
.b279	85 36		sta $36				sta 	zTemp0
.b27b	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.b27d	85 38		sta $38				sta 	0+zTemp1
.b27f	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.b281	85 39		sta $39				sta 	1+zTemp1
.b283	b2 38		lda ($38)			lda 	(zTemp1)
.b285	d0 0a		bne $b291			bne 	_MDLANoInitialise
.b287	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.b289	8d 61 06	sta $0661			sta 	0+AppendPointer
.b28c	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.b28e	8d 62 06	sta $0662			sta 	1+AppendPointer
.b291					_MDLANoInitialise:
.b291	18		clc				clc
.b292	ad 61 06	lda $0661			lda 	AppendPointer 				; copy append pointer to zTemp1 adding the offset as you go
.b295	85 38		sta $38				sta 	zTemp1
.b297	72 36		adc ($36)			adc 	(zTemp0)
.b299	8d 61 06	sta $0661			sta 	AppendPointer
.b29c	ad 62 06	lda $0662			lda 	AppendPointer+1
.b29f	85 39		sta $39				sta 	zTemp1+1
.b2a1	69 00		adc #$00			adc 	#0
.b2a3	8d 62 06	sta $0662			sta 	AppendPointer+1
.b2a6	a0 00		ldy #$00			ldy 	#0
.b2a8					_MDLACopy:
.b2a8	b1 36		lda ($36),y			lda 	(zTemp0),y 					; copy new line in
.b2aa	91 38		sta ($38),y			sta 	(zTemp1),y
.b2ac	c8		iny				iny
.b2ad	98		tya				tya
.b2ae	d2 36		cmp ($36)			cmp 	(zTemp0) 					; done whole line
.b2b0	d0 f6		bne $b2a8			bne 	_MDLACopy
.b2b2	a9 00		lda #$00			lda 	#0 							; end of program.
.b2b4	91 38		sta ($38),y			sta 	(zTemp1),y
.b2b6	60		rts				rts
.0661					AppendPointer:
>0661							.fill 	2

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/memory.asm

.a25c					MemoryNew:
.a25c	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a25e	85 30		sta $30				sta 	codePtr
.a260	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a262	85 31		sta $31				sta 	codePtr+1
.a264	a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.a266	92 30		sta ($30)			sta 	(codePtr)
.a268	60		rts				rts
.a269					MemoryInline:
.a269	98		tya				tya 								; put address into stack,x
.a26a	18		clc				clc
.a26b	65 30		adc $30				adc 	codePtr
.a26d	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a270	a5 31		lda $31				lda 	codePtr+1
.a272	69 00		adc #$00			adc 	#0
.a274	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a277	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.a27a	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.a27d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/search.asm

.a27e					MemorySearch:
.a27e	85 36		sta $36				sta 	zTemp0 						; save line number zTemp0
.a280	86 37		stx $37				stx 	zTemp0+1
.a282	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a284	85 30		sta $30				sta 	codePtr
.a286	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a288	85 31		sta $31				sta 	codePtr+1
.a28a					_MTAXLoop:
.a28a	b2 30		lda ($30)			lda 	(codePtr)
.a28c	18		clc				clc
.a28d	f0 21		beq $a2b0			beq 	_MTAXExit 					; reached end, exit with CC.
.a28f	a0 01		ldy #$01			ldy 	#1 							; calculate current line# - requested line#
.a291	b1 30		lda ($30),y			lda 	(codePtr),y
.a293	38		sec				sec
.a294	e5 36		sbc $36				sbc 	zTemp0
.a296	85 38		sta $38				sta 	zTemp1 						; save interim to set Z
.a298	c8		iny				iny 								; do the MSB
.a299	b1 30		lda ($30),y			lda 	(codePtr),y
.a29b	e5 37		sbc $37				sbc 	zTemp0+1
.a29d	05 38		ora $38				ora 	zTemp1
.a29f	f0 0f		beq $a2b0			beq 	_MTAXExit	 				; found
.a2a1	b0 0d		bcs $a2b0			bcs 	_MTAXExit 					; current < required exit
.a2a3	18		clc				clc
.a2a4	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.a2a6	65 30		adc $30				adc 	codePtr
.a2a8	85 30		sta $30				sta 	codePtr
.a2aa	90 02		bcc $a2ae			bcc 	_CREExit
.a2ac	e6 31		inc $31				inc 	codePtr+1
.a2ae					_CREExit:
.a2ae	80 da		bra $a28a			bra 	_MTAXLoop
.a2b0					_MTAXExit:
.a2b0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/bytes.asm

.a2b1					StackPushByte:
.a2b1	48		pha				pha 								; save byte
.a2b2	a5 34		lda $34				lda 	BasicStack
.a2b4	d0 09		bne $a2bf			bne 	_SPBNoBorrow
.a2b6	c6 35		dec $35				dec 	BasicStack+1
.a2b8	48		pha				pha
.a2b9	a5 35		lda $35				lda 	BasicStack+1
.a2bb	c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.a2bd	90 06		bcc $a2c5			bcc 	_SPBMemory
.a2bf					_SPBNoBorrow:
.a2bf	c6 34		dec $34				dec 	BasicStack
.a2c1	68		pla				pla 								; get back and write
.a2c2	92 34		sta ($34)			sta 	(BasicStack)
.a2c4	60		rts				rts
.a2c5					_SPBMemory:
.a2c5	a9 12		lda #$12		lda	#18
.a2c7	4c 67 96	jmp $9667		jmp	ErrorHandler
.a2ca					StackPopByte:
.a2ca	b2 34		lda ($34)			lda 	(BasicStack)
.a2cc	e6 34		inc $34				inc 	BasicStack
.a2ce	d0 02		bne $a2d2			bne 	_SPBNoCarry
.a2d0	e6 35		inc $35				inc 	BasicStack+1
.a2d2					_SPBNoCarry:
.a2d2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/frames.asm

.a2d3					StackOpen:
.a2d3	48		pha				pha 								; save frame byte
.a2d4	29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.a2d6	0a		asl a				asl 	a 							; claim twice this for storage
.a2d7	49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.a2d9	38		sec				sec 								; so basically subtracting from
.a2da	65 34		adc $34				adc 	basicStack 	 				; basicStack
.a2dc	85 34		sta $34				sta 	basicStack
.a2de	b0 08		bcs $a2e8			bcs 	_SONoBorrow
.a2e0	c6 35		dec $35				dec 	basicStack+1
.a2e2	a5 35		lda $35				lda 	basicStack+1 				; have we reached stack overflow
.a2e4	c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.a2e6	90 04		bcc $a2ec			bcc 	_SOMemory
.a2e8					_SONoBorrow:
.a2e8	68		pla				pla 								; get marker back and write at TOS
.a2e9	92 34		sta ($34)			sta 	(basicStack)
.a2eb	60		rts				rts
.a2ec					_SOMemory:
.a2ec	a9 12		lda #$12		lda	#18
.a2ee	4c 67 96	jmp $9667		jmp	ErrorHandler
.a2f1					StackClose:
.a2f1	b2 34		lda ($34)			lda 	(basicStack) 				; get TOS marker
.a2f3	29 0f		and #$0f			and 	#$0F 						; bytes to add back
.a2f5	0a		asl a				asl 	a 							; claim twice this.
.a2f6	65 34		adc $34				adc 	basicStack 					; add to the stack pointer.
.a2f8	85 34		sta $34				sta 	basicStack
.a2fa	90 02		bcc $a2fe			bcc 	_SCExit
.a2fc	e6 35		inc $35				inc 	basicStack+1
.a2fe					_SCExit:
.a2fe	60		rts				rts
.a2ff					StackCheckFrame:
.a2ff	48		pha				pha
.a300					_StackRemoveLocals:
.a300	b2 34		lda ($34)			lda 	(basicStack) 				; check for local, keep popping them
.a302	c9 03		cmp #$03			cmp 	#STK_LOCALS+1
.a304	b0 05		bcs $a30b			bcs 	_SCNoLocal
.a306	20 d0 a9	jsr $a9d0			jsr 	LocalPopValue
.a309	80 f5		bra $a300			bra 	_StackRemoveLocals
.a30b					_SCNoLocal:
.a30b	68		pla				pla
.a30c	52 34		eor ($34)			eor 	(basicStack) 				; xor with toS marker
.a30e	29 f0		and #$f0			and 	#$F0 						; check type bits
.a310	d0 01		bne $a313			bne 	_SCFError 					; different, we have structures mixed up
.a312	60		rts				rts
.a313					_SCFError:
.a313	8a		txa				txa 								; report error X
.a314	4c 67 96	jmp $9667			jmp 	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/location.asm

.a317					STKSaveCodePosition:
.a317	5a		phy				phy
.a318	98		tya				tya 								; save Y
.a319	a0 05		ldy #$05			ldy 	#5
.a31b	91 34		sta ($34),y			sta 	(basicStack),y
.a31d	88		dey				dey 								; save Code Pointer
.a31e					_STKSaveLoop:
.a31e	b9 2f 00	lda $002f,y			lda 	safePtr-1,y 				; allows us to access the pointer w/out issues.
.a321	91 34		sta ($34),y			sta 	(basicStack),y
.a323	88		dey				dey
.a324	d0 f8		bne $a31e			bne 	_STKSaveLoop
.a326	7a		ply				ply
.a327	60		rts				rts
.a328					STKLoadCodePosition:
.a328	a0 01		ldy #$01			ldy 	#1 							; load code pointer back
.a32a					_STKLoadLoop:
.a32a	b1 34		lda ($34),y			lda 	(basicStack),y
.a32c	99 2f 00	sta $002f,y			sta 	safePtr-1,y
.a32f	c8		iny				iny
.a330	c0 05		cpy #$05			cpy 	#5
.a332	d0 f6		bne $a32a			bne 	_STKLoadLoop
.a334	b1 34		lda ($34),y			lda 	(basicStack),y 				; get Y offset
.a336	a8		tay				tay
.a337	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/setup.asm

.a338					StackReset:
.a338	a9 ff		lda #$ff			lda 	#((BasicStackBase+BasicStackSize-1) & $FF)
.a33a	85 34		sta $34				sta 	0+basicStack
.a33c	a9 0f		lda #$0f			lda 	#((BasicStackBase+BasicStackSize-1) >> 8)
.a33e	85 35		sta $35				sta 	1+basicStack
.a340	a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.a342	92 34		sta ($34)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.a344	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/concrete.asm

.b2b7					StringConcrete:
.b2b7	5a		phy				phy 								; save position on stack
.b2b8	20 2e 9f	jsr $9f2e			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.b2bb	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy target string to zTemp1
.b2be	85 38		sta $38				sta 	zTemp1
.b2c0	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.b2c3	85 39		sta $39				sta 	zTemp1+1
.b2c5	a0 ff		ldy #$ff			ldy 	#$FF	 					; calculate string length
.b2c7					_SALength:
.b2c7	c8		iny				iny
.b2c8	b1 38		lda ($38),y			lda 	(zTemp1),y
.b2ca	d0 fb		bne $b2c7			bne 	_SALength
.b2cc	c0 fd		cpy #$fd			cpy 	#253 						; string too long
.b2ce	b0 3f		bcs $b30f			bcs 	_SALengthError
.b2d0	98		tya				tya 				 				; length of the new string
.b2d1	18		clc				clc
.b2d2	69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.b2d4	90 02		bcc $b2d8			bcc 	_SAHaveLength
.b2d6	a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.b2d8					_SAHaveLength:
.b2d8	48		pha				pha 								; save length.
.b2d9	38		sec				sec
.b2da	49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.b2dc	6d 8e 04	adc $048e			adc 	StringMemory
.b2df	8d 8e 04	sta $048e			sta 	StringMemory
.b2e2	85 3a		sta $3a				sta 	zTemp2 						; update storage address
.b2e4	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; update mantissa address
.b2e7	a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.b2e9	6d 8f 04	adc $048f			adc 	StringMemory+1
.b2ec	8d 8f 04	sta $048f			sta 	StringMemory+1
.b2ef	85 3b		sta $3b				sta 	zTemp2+1
.b2f1	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.b2f4	68		pla				pla 								; save length-3 (chars allowed) in first byte
.b2f5	38		sec				sec
.b2f6	e9 03		sbc #$03			sbc 	#3
.b2f8	92 3a		sta ($3a)			sta 	(zTemp2)
.b2fa	a9 00		lda #$00			lda 	#0 							; clear the status byte.
.b2fc	a0 01		ldy #$01			ldy 	#1
.b2fe	91 3a		sta ($3a),y			sta 	(zTemp2),y
.b300					_SACopyNewString:
.b300	a0 00		ldy #$00			ldy 	#0
.b302					_SACopyNSLoop:
.b302	b1 38		lda ($38),y			lda 	(zTemp1),y 					; get character
.b304	c8		iny				iny 								; write two on in string storage
.b305	c8		iny				iny
.b306	91 3a		sta ($3a),y			sta 	(zTemp2),y
.b308	88		dey				dey 								; this makes it one one.
.b309	c9 00		cmp #$00			cmp 	#0 							; until EOS copied
.b30b	d0 f5		bne $b302			bne 	_SACopyNSLoop
.b30d	7a		ply				ply
.b30e	60		rts				rts
.b30f					_SALengthError:
.b30f	a9 09		lda #$09		lda	#9
.b311	4c 67 96	jmp $9667		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/stringalloc.asm

.b314					StringSystemInitialise:
.b314	a9 ff		lda #$ff			lda 	#((EndVariableSpace-1) & $FF)
.b316	8d 8e 04	sta $048e			sta 	0+StringMemory
.b319	a9 1f		lda #$1f			lda 	#((EndVariableSpace-1) >> 8)
.b31b	8d 8f 04	sta $048f			sta 	1+StringMemory
.b31e	9c ff 1f	stz $1fff			stz 	EndVariableSpace-1 			; put a zero at the end, so know end of string memory.
.b321	60		rts				rts
.b322					StringSpaceInitialise:
.b322	20 2e 9f	jsr $9f2e			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.b325	a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.b327	8d 90 04	sta $0490			sta 	StringInitialised
.b32a	ad 8e 04	lda $048e			lda 	StringMemory 				; allocate 256 bytes for one concreted string
.b32d	8d 91 04	sta $0491			sta 	StringTempPointer
.b330	ad 8f 04	lda $048f			lda 	StringMemory+1
.b333	3a		dec a				dec 	a
.b334	8d 92 04	sta $0492			sta 	StringTempPointer+1
.b337	60		rts				rts
.b338					StringTempAllocate:
.b338	c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.b33a	b0 35		bcs $b371			bcs 	_STALength
.b33c	2c 90 04	bit $0490			bit 	StringInitialised 			; already initialised
.b33f	30 05		bmi $b346			bmi 	_STAAllocate
.b341	48		pha				pha 								; save value to subtract.
.b342	20 22 b3	jsr $b322			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.b345	68		pla				pla 								; restore it
.b346					_STAAllocate:
.b346	49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.b348	18		clc				clc  								; deliberate allows one more
.b349	6d 91 04	adc $0491			adc 	StringTempPointer 			; subtract from temp pointer
.b34c	8d 91 04	sta $0491			sta 	StringTempPointer
.b34f	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; address in mantissa
.b352	85 3c		sta $3c				sta 	zsTemp 						; and zsTemp
.b354	ad 92 04	lda $0492			lda 	StringTempPointer+1
.b357	69 ff		adc #$ff			adc 	#$FF
.b359	8d 92 04	sta $0492			sta 	StringTempPointer+1
.b35c	85 3d		sta $3d				sta 	zsTemp+1
.b35e	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.b361	9e 18 04	stz $0418,x			stz 	NSMantissa2,x 				; set the typing data
.b364	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.b367	a9 10		lda #$10			lda 	#NSTString
.b369	9d 00 04	sta $0400,x			sta 	NSStatus,x
.b36c	a9 00		lda #$00			lda 	#0 							; clear the target string
.b36e	92 3c		sta ($3c)			sta 	(zsTemp)
.b370	60		rts				rts
.b371					_STALength:
.b371	a9 09		lda #$09		lda	#9
.b373	4c 67 96	jmp $9667		jmp	ErrorHandler
.b376					StringTempWrite:
.b376	48		pha				pha
.b377	92 3c		sta ($3c)			sta 	(zsTemp)
.b379	e6 3c		inc $3c				inc 	zsTemp
.b37b	d0 02		bne $b37f			bne 	_STWNoCarry
.b37d	e6 3d		inc $3d				inc 	zsTemp+1
.b37f					_STWNoCarry:
.b37f	a9 00		lda #$00			lda 	#0
.b381	92 3c		sta ($3c)			sta 	(zsTemp)
.b383	68		pla				pla
.b384	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/backload.asm

.a345					BackloadProgram:
.a345	a2 ff		ldx #$ff			ldx 	#$FF
.a347	20 6f a3	jsr $a36f			jsr 	BLReadByte
.a34a	30 1f		bmi $a36b			bmi 	_BPExit
.a34c					_BPCopy:
.a34c	e8		inx				inx  								; copy byte in
.a34d	9d a6 05	sta $05a6,x			sta 	lineBuffer,x
.a350	9e a7 05	stz $05a7,x			stz 	lineBuffer+1,x
.a353	20 6f a3	jsr $a36f			jsr 	BLReadByte 					; read next byte
.a356	30 0a		bmi $a362			bmi 	_BPEndLine 					; -ve = EOL
.a358	c9 09		cmp #$09			cmp 	#9 							; handle TAB
.a35a	d0 02		bne $a35e			bne 	_BPNotTab
.a35c	a9 20		lda #$20			lda 	#' '
.a35e					_BPNotTab:
.a35e	c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.a360	b0 ea		bcs $a34c			bcs 	_BPCopy
.a362					_BPEndLine:
.a362	20 21 a7	jsr $a721			jsr 	TokeniseLine 				; tokenise the line.
.a365	38		sec				sec 								; append not insert
.a366	20 31 b2	jsr $b231			jsr 	MemoryInsertLine 			; append to current program
.a369	80 da		bra $a345			bra 	BackloadProgram
.a36b					_BPExit:
.a36b	20 3f 8c	jsr $8c3f			jsr 	ClearCommand 				; clear variables etc.
.a36e	60		rts				rts
.a36f					BLReadByte:
.a36f					_BLLoad:
.a36f	ad 00 30	lda $3000			lda 	$3000 						; hardcoded in the makefile.
.a372	ee 70 a3	inc $a370			inc 	_BLLoad+1
.a375	d0 03		bne $a37a			bne 	_BLNoCarry
.a377	ee 71 a3	inc $a371			inc 	_BLLoad+2
.a37a					_BLNoCarry:
.a37a	c9 00		cmp #$00			cmp 	#0
.a37c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/searchtokens.asm

.a37d					TokeniseSearchTable:
.a37d	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token.
.a37f	85 36		sta $36				sta 	zTemp0
.a381	a0 00		ldy #$00			ldy 	#0
.a383	a9 80		lda #$80			lda 	#$80 						; token #
.a385	85 38		sta $38				sta 	zTemp1
.a387					_TSTLoop:
.a387	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.a389	30 49		bmi $a3d4			bmi 	_TSTFail 					; -ve = end of table
.a38b	f0 2e		beq $a3bb			beq 	_TSTNext 					; zero, check next it's a dummy
.a38d	c8		iny				iny 								; get the hash
.a38e	b1 36		lda ($36),y			lda 	(zTemp0),y
.a390	88		dey				dey
.a391	cd 83 04	cmp $0483			cmp 	identHash 					; check they match, if not go to next
.a394	d0 25		bne $a3bb			bne 	_TSTNext
.a396	ad 82 04	lda $0482			lda 	identTypeEnd 				; length of identifier
.a399	38		sec				sec
.a39a	ed 80 04	sbc $0480			sbc 	identStart
.a39d	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; no match, then return.
.a39f	d0 1a		bne $a3bb			bne 	_TSTNext
.a3a1	5a		phy				phy 								; save Y , we might fail
.a3a2	c8		iny				iny 								; point to text
.a3a3	c8		iny				iny
.a3a4	ae 80 04	ldx $0480			ldx 	identStart 					; offset in line buffer in X
.a3a7					_TSTCompareName:
.a3a7	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; compare text.
.a3aa	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.a3ac	d0 0c		bne $a3ba			bne 	_TSTNextPullY 				; fail, pullY and do next
.a3ae	e8		inx				inx
.a3af	c8		iny				iny
.a3b0	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; complete match.
.a3b3	d0 f2		bne $a3a7			bne 	_TSTCompareName
.a3b5	7a		ply				ply 								; throw Y
.a3b6	a5 38		lda $38				lda 	zTemp1 						; get token #
.a3b8	38		sec				sec 								; return with CS = passed.
.a3b9	60		rts				rts
.a3ba					_TSTNextPullY:
.a3ba	7a		ply				ply 								; restore current, fall through.
.a3bb					_TSTNext:
.a3bb	e6 38		inc $38				inc 	zTemp1 						; token counter
.a3bd	98		tya				tya
.a3be	18		clc				clc
.a3bf	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.a3c1	1a		inc a				inc 	a 							; +1
.a3c2	1a		inc a				inc 	a 							; +2
.a3c3	a8		tay				tay
.a3c4	10 c1		bpl $a387			bpl 	_TSTLoop 					; if Y < $80 loop back
.a3c6	98		tya				tya 								; add Y to zTemp0 and reset Y
.a3c7	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.a3c9	18		clc				clc  								; but have tables > 255 bytes
.a3ca	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.a3cc	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.a3ce	90 b7		bcc $a387			bcc 	_TSTLoop
.a3d0	e6 37		inc $37				inc 	zTemp0+1
.a3d2	80 b3		bra $a387			bra 	_TSTLoop
.a3d4					_TSTFail:
.a3d4	18		clc				clc
.a3d5	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/tokenise.asm


;******  Processing file: ./common/tokeniser/../generated/kwdtext.dat

.a3d6					KeywordSet0:
>a3d6	00 65					.text	0,$65,""               ; $80 !0:EOF
>a3d8	00 58					.text	0,$58,""               ; $81 !1:SH1
>a3da	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>a3dc	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $83 ABS(
>a3e2	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $84 ALLOC(
>a3ea	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $85 ASC(
>a3f0	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $86 CHR$(
>a3f7	06 aa 45 56 45 4e 54 28			.text	6,$aa,"EVENT("         ; $87 EVENT(
>a3ff	05 6b 46 41 4c 53 45			.text	5,$6b,"FALSE"          ; $88 FALSE
>a406	05 44 46 52 41 43 28			.text	5,$44,"FRAC("          ; $89 FRAC(
>a40d	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $8a INT(
>a413	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $8b ISVAL(
>a41b	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $8c LEFT$(
>a423	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $8d LEN(
>a429	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $8e MID$(
>a430	04 19 4e 4f 54 28			.text	4,$19,"NOT("           ; $8f NOT(
>a436	03 db 4f 46 46				.text	3,$db,"OFF"            ; $90 OFF
>a43b	02 9d 4f 4e				.text	2,$9d,"ON"             ; $91 ON
>a43f	07 e9 52 41 4e 44 4f 4d			.text	7,$e9,"RANDOM("        ; $92 RANDOM(
>a447	28
>a448	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $93 RIGHT$(
>a450	28
>a451	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $94 RND(
>a457	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $95 SGN(
>a45d	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $96 SPC(
>a463	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $97 STR$(
>a46a	06 a9 54 49 4d 45 52 28			.text	6,$a9,"TIMER("         ; $98 TIMER(
>a472	04 40 54 52 55 45			.text	4,$40,"TRUE"           ; $99 TRUE
>a478	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $9a VAL(
>a47e	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $9b FOR
>a483	02 8f 49 46				.text	2,$8f,"IF"             ; $9c IF
>a487	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $9d PROC
>a48d	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $9e REPEAT
>a495	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $9f WHILE
>a49c	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $a0 ENDIF
>a4a3	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $a1 ENDPROC
>a4ab	43
>a4ac	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $a2 NEXT
>a4b2	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $a3 THEN
>a4b8	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $a4 UNTIL
>a4bf	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $a5 WEND
>a4c5	04 1c 43 41 4c 4c			.text	4,$1c,"CALL"           ; $a6 CALL
>a4cb	06 b2 43 49 52 43 4c 45			.text	6,$b2,"CIRCLE"         ; $a7 CIRCLE
>a4d3	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $a8 CLS
>a4d8	05 7f 43 4f 4c 4f 52			.text	5,$7f,"COLOR"          ; $a9 COLOR
>a4df	06 d4 43 4f 4c 4f 55 52			.text	6,$d4,"COLOUR"         ; $aa COLOUR
>a4e7	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $ab DATA
>a4ed	03 da 44 49 4d				.text	3,$da,"DIM"            ; $ac DIM
>a4f2	06 db 44 4f 57 4e 54 4f			.text	6,$db,"DOWNTO"         ; $ad DOWNTO
>a4fa	04 29 45 4c 53 45			.text	4,$29,"ELSE"           ; $ae ELSE
>a500	03 e5 47 46 58				.text	3,$e5,"GFX"            ; $af GFX
>a505	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $b0 GOSUB
>a50c	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $b1 GOTO
>a512	04 24 48 45 52 45			.text	4,$24,"HERE"           ; $b2 HERE
>a518	04 1a 48 49 44 45			.text	4,$1a,"HIDE"           ; $b3 HIDE
>a51e	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $b4 LET
>a523	04 28 4c 49 4e 45			.text	4,$28,"LINE"           ; $b5 LINE
>a529	05 6b 4c 4f 43 41 4c			.text	5,$6b,"LOCAL"          ; $b6 LOCAL
>a530	07 20 4f 55 54 4c 49 4e			.text	7,$20,"OUTLINE"        ; $b7 OUTLINE
>a538	45
>a539	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $b8 PRINT
>a540	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $b9 READ
>a546	04 2e 52 45 43 54			.text	4,$2e,"RECT"           ; $ba RECT
>a54c	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $bb REM
>a551	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $bc RETURN
>a559	05 68 53 43 41 4c 45			.text	5,$68,"SCALE"          ; $bd SCALE
>a560	04 41 53 48 4f 57			.text	4,$41,"SHOW"           ; $be SHOW
>a566	05 7b 53 4f 4c 49 44			.text	5,$7b,"SOLID"          ; $bf SOLID
>a56d	06 d7 53 50 52 49 54 45			.text	6,$d7,"SPRITE"         ; $c0 SPRITE
>a575	04 45 54 45 58 54			.text	4,$45,"TEXT"           ; $c1 TEXT
>a57b	02 a3 54 4f				.text	2,$a3,"TO"             ; $c2 TO
>a57f	ff					.text	$FF
.a580					KeywordSet1:
>a580	00 65					.text	0,$65,""               ; $80 !0:EOF
>a582	00 58					.text	0,$58,""               ; $81 !1:SH1
>a584	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>a586	08 4c 41 53 53 45 4d 42			.text	8,$4c,"ASSEMBLE"       ; $83 ASSEMBLE
>a58e	4c 45
>a590	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $84 ASSERT
>a598	06 bd 42 49 54 4d 41 50			.text	6,$bd,"BITMAP"         ; $85 BITMAP
>a5a0	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $86 CLEAR
>a5a7	03 d7 45 4e 44				.text	3,$d7,"END"            ; $87 END
>a5ac	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $88 LIST
>a5b2	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $89 NEW
>a5b7	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $8a RESTORE
>a5bf	45
>a5c0	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $8b RUN
>a5c5	07 2a 53 50 52 49 54 45			.text	7,$2a,"SPRITES"        ; $8c SPRITES
>a5cd	53
>a5ce	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $8d STOP
>a5d4	ff					.text	$FF
.a5d5					KeywordSet2:
>a5d5	00 65					.text	0,$65,""               ; $80 !0:EOF
>a5d7	00 58					.text	0,$58,""               ; $81 !1:SH1
>a5d9	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>a5db	03 c8 41 44 43				.text	3,$c8,"ADC"            ; $83 ADC
>a5e0	03 d3 41 4e 44				.text	3,$d3,"AND"            ; $84 AND
>a5e5	03 e0 41 53 4c				.text	3,$e0,"ASL"            ; $85 ASL
>a5ea	03 c8 42 43 43				.text	3,$c8,"BCC"            ; $86 BCC
>a5ef	03 d8 42 43 53				.text	3,$d8,"BCS"            ; $87 BCS
>a5f4	03 d8 42 45 51				.text	3,$d8,"BEQ"            ; $88 BEQ
>a5f9	03 df 42 49 54				.text	3,$df,"BIT"            ; $89 BIT
>a5fe	03 d8 42 4d 49				.text	3,$d8,"BMI"            ; $8a BMI
>a603	03 d5 42 4e 45				.text	3,$d5,"BNE"            ; $8b BNE
>a608	03 de 42 50 4c				.text	3,$de,"BPL"            ; $8c BPL
>a60d	03 d5 42 52 41				.text	3,$d5,"BRA"            ; $8d BRA
>a612	03 df 42 52 4b				.text	3,$df,"BRK"            ; $8e BRK
>a617	03 db 42 56 43				.text	3,$db,"BVC"            ; $8f BVC
>a61c	03 eb 42 56 53				.text	3,$eb,"BVS"            ; $90 BVS
>a621	03 d2 43 4c 43				.text	3,$d2,"CLC"            ; $91 CLC
>a626	03 d3 43 4c 44				.text	3,$d3,"CLD"            ; $92 CLD
>a62b	03 d8 43 4c 49				.text	3,$d8,"CLI"            ; $93 CLI
>a630	03 e5 43 4c 56				.text	3,$e5,"CLV"            ; $94 CLV
>a635	03 e0 43 4d 50				.text	3,$e0,"CMP"            ; $95 CMP
>a63a	03 eb 43 50 58				.text	3,$eb,"CPX"            ; $96 CPX
>a63f	03 ec 43 50 59				.text	3,$ec,"CPY"            ; $97 CPY
>a644	03 cc 44 45 43				.text	3,$cc,"DEC"            ; $98 DEC
>a649	03 e1 44 45 58				.text	3,$e1,"DEX"            ; $99 DEX
>a64e	03 e2 44 45 59				.text	3,$e2,"DEY"            ; $9a DEY
>a653	03 e6 45 4f 52				.text	3,$e6,"EOR"            ; $9b EOR
>a658	03 da 49 4e 43				.text	3,$da,"INC"            ; $9c INC
>a65d	03 ef 49 4e 58				.text	3,$ef,"INX"            ; $9d INX
>a662	03 f0 49 4e 59				.text	3,$f0,"INY"            ; $9e INY
>a667	03 e7 4a 4d 50				.text	3,$e7,"JMP"            ; $9f JMP
>a66c	03 ef 4a 53 52				.text	3,$ef,"JSR"            ; $a0 JSR
>a671	03 d1 4c 44 41				.text	3,$d1,"LDA"            ; $a1 LDA
>a676	03 e8 4c 44 58				.text	3,$e8,"LDX"            ; $a2 LDX
>a67b	03 e9 4c 44 59				.text	3,$e9,"LDY"            ; $a3 LDY
>a680	03 f1 4c 53 52				.text	3,$f1,"LSR"            ; $a4 LSR
>a685	03 ed 4e 4f 50				.text	3,$ed,"NOP"            ; $a5 NOP
>a68a	03 e2 4f 52 41				.text	3,$e2,"ORA"            ; $a6 ORA
>a68f	03 d9 50 48 41				.text	3,$d9,"PHA"            ; $a7 PHA
>a694	03 e8 50 48 50				.text	3,$e8,"PHP"            ; $a8 PHP
>a699	03 f0 50 48 58				.text	3,$f0,"PHX"            ; $a9 PHX
>a69e	03 f1 50 48 59				.text	3,$f1,"PHY"            ; $aa PHY
>a6a3	03 dd 50 4c 41				.text	3,$dd,"PLA"            ; $ab PLA
>a6a8	03 ec 50 4c 50				.text	3,$ec,"PLP"            ; $ac PLP
>a6ad	03 f4 50 4c 58				.text	3,$f4,"PLX"            ; $ad PLX
>a6b2	03 f5 50 4c 59				.text	3,$f5,"PLY"            ; $ae PLY
>a6b7	03 ed 52 4f 4c				.text	3,$ed,"ROL"            ; $af ROL
>a6bc	03 f3 52 4f 52				.text	3,$f3,"ROR"            ; $b0 ROR
>a6c1	03 ef 52 54 49				.text	3,$ef,"RTI"            ; $b1 RTI
>a6c6	03 f9 52 54 53				.text	3,$f9,"RTS"            ; $b2 RTS
>a6cb	03 d8 53 42 43				.text	3,$d8,"SBC"            ; $b3 SBC
>a6d0	03 db 53 45 43				.text	3,$db,"SEC"            ; $b4 SEC
>a6d5	03 dc 53 45 44				.text	3,$dc,"SED"            ; $b5 SED
>a6da	03 e1 53 45 49				.text	3,$e1,"SEI"            ; $b6 SEI
>a6df	03 e8 53 54 41				.text	3,$e8,"STA"            ; $b7 STA
>a6e4	03 f7 53 54 50				.text	3,$f7,"STP"            ; $b8 STP
>a6e9	03 ff 53 54 58				.text	3,$ff,"STX"            ; $b9 STX
>a6ee	03 00 53 54 59				.text	3,$00,"STY"            ; $ba STY
>a6f3	03 01 53 54 5a				.text	3,$01,"STZ"            ; $bb STZ
>a6f8	03 ed 54 41 58				.text	3,$ed,"TAX"            ; $bc TAX
>a6fd	03 ee 54 41 59				.text	3,$ee,"TAY"            ; $bd TAY
>a702	03 e8 54 52 42				.text	3,$e8,"TRB"            ; $be TRB
>a707	03 e9 54 53 42				.text	3,$e9,"TSB"            ; $bf TSB
>a70c	03 ff 54 53 58				.text	3,$ff,"TSX"            ; $c0 TSX
>a711	03 ed 54 58 41				.text	3,$ed,"TXA"            ; $c1 TXA
>a716	03 ff 54 58 53				.text	3,$ff,"TXS"            ; $c2 TXS
>a71b	03 ee 54 59 41				.text	3,$ee,"TYA"            ; $c3 TYA
>a720	ff					.text	$FF

;******  Return to file: ./common/tokeniser/tokenise.asm

.a721					TokeniseLine:
.a721	20 a9 a8	jsr $a8a9			jsr 	FixLineBufferCase 			; fix line case
.a724	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.a726	8d a6 04	sta $04a6			sta 	tokenOffset
.a729	9c a7 04	stz $04a7			stz 	tokenLineNumber
.a72c	9c a8 04	stz $04a8			stz 	tokenLineNumber+1
.a72f	a2 ff		ldx #$ff			ldx 	#$FF
.a731					_TKFindFirst:
.a731	e8		inx				inx
.a732	bd a6 05	lda $05a6,x			lda 	lineBuffer,x
.a735	f0 79		beq $a7b0			beq 	_TKExit
.a737	c9 20		cmp #$20			cmp 	#' '
.a739	90 f6		bcc $a731			bcc 	_TKFindFirst
.a73b	c9 30		cmp #$30			cmp 	#'0'
.a73d	90 07		bcc $a746			bcc 	_TKNoLineNumber
.a73f	c9 3a		cmp #$3a			cmp 	#'9'+1
.a741	b0 03		bcs $a746			bcs 	_TKNoLineNumber
.a743	20 d3 a8	jsr $a8d3			jsr 	TokeniseExtractLineNumber
.a746					_TKNoLineNumber:
.a746					_TKTokeniseLoop:
.a746	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.a749	f0 65		beq $a7b0			beq 	_TKExit
.a74b	e8		inx				inx
.a74c	c9 20		cmp #$20			cmp 	#' '
.a74e	f0 f6		beq $a746			beq 	_TKTokeniseLoop 			; keep looping if space found.
.a750	ca		dex				dex 								; undo last get, A contains character, X is position.
.a751	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.a753	f0 61		beq $a7b6			beq 	_TKTokeniseIdentifier
.a755	c9 41		cmp #$41			cmp 	#'A'
.a757	90 04		bcc $a75d			bcc 	_TKTokenisePunctuation
.a759	c9 5b		cmp #$5b			cmp 	#'Z'+1
.a75b	90 59		bcc $a7b6			bcc 	_TKTokeniseIdentifier
.a75d					_TKTokenisePunctuation:
.a75d	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.a75f	f0 27		beq $a788			beq 	_TKString
.a761	c9 24		cmp #$24			cmp 	#'$'						; hexadecimal constant (# only appears at end of identifiers)
.a763	f0 28		beq $a78d			beq 	_TKHexConstant
.a765	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers.
.a767	f0 29		beq $a792			beq 	_TKCheckDouble
.a769	c9 3e		cmp #$3e			cmp 	#'>'
.a76b	f0 25		beq $a792			beq 	_TKCheckDouble
.a76d					_TKStandardPunctuation:
.a76d	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; get it back.
.a770	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.a772	90 0e		bcc $a782			bcc 	_TKNoShift
.a774	48		pha				pha 								; save
.a775	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.a777	85 36		sta $36				sta 	zTemp0
.a779	68		pla				pla
.a77a	29 20		and #$20			and 	#32 						; bit 5
.a77c	4a		lsr a				lsr 	a 							; shift into bit 3
.a77d	4a		lsr a				lsr 	a
.a77e	05 36		ora $36				ora 	zTemp0
.a780	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.a782					_TKNoShift:
.a782	20 18 a9	jsr $a918			jsr 	TokeniseWriteByte 			; write the punctuation character
.a785	e8		inx				inx 								; consume the character
.a786	80 be		bra $a746			bra 	_TKTokeniseLoop 			; and loop round again.
.a788					_TKString:
.a788	20 38 a8	jsr $a838			jsr 	TokeniseString
.a78b	80 b9		bra $a746			bra 	_TKTokeniseLoop
.a78d					_TKHexConstant:
.a78d	20 73 a8	jsr $a873			jsr 	TokeniseHexConstant
.a790	80 b4		bra $a746			bra 	_TKTokeniseLoop
.a792					_TKCheckDouble:
.a792	bd a7 05	lda $05a7,x			lda 	lineBuffer+1,x 				; get next character
.a795	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.a797	90 d4		bcc $a76d			bcc 	_TKStandardPunctuation
.a799	c9 3f		cmp #$3f			cmp 	#'>'+1
.a79b	b0 d0		bcs $a76d			bcs 	_TKStandardPunctuation
.a79d	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.a7a0	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.a7a2	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.a7a3	7d a7 05	adc $05a7,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.a7a6	38		sec				sec
.a7a7	e9 3c		sbc #$3c			sbc 	#'<'
.a7a9	20 18 a9	jsr $a918			jsr 	TokeniseWriteByte 			; this is in the range 0-7
.a7ac	e8		inx				inx 								; consume both
.a7ad	e8		inx				inx
.a7ae	80 96		bra $a746			bra 	_TKTokeniseLoop
.a7b0	a9 80		lda #$80	_TKExit:lda 	#KWC_EOL 					; write end of line byte
.a7b2	20 18 a9	jsr $a918			jsr 	TokeniseWriteByte
.a7b5	60		rts				rts
.a7b6					_TKTokeniseIdentifier:
.a7b6	8e 80 04	stx $0480			stx 	identStart 					; save start
.a7b9	9c 84 04	stz $0484			stz 	identTypeByte 				; zero the type byte
.a7bc					_TKCheckLoop:
.a7bc	e8		inx				inx 								; look at next, we know first is identifier.
.a7bd	bd a6 05	lda $05a6,x			lda  	lineBuffer,x
.a7c0	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.a7c2	f0 f8		beq $a7bc			beq 	_TKCheckLoop
.a7c4	c9 30		cmp #$30			cmp	 	#"0"
.a7c6	90 0c		bcc $a7d4			bcc 	_TKEndIdentifier
.a7c8	c9 3a		cmp #$3a			cmp 	#"9"+1
.a7ca	90 f0		bcc $a7bc			bcc 	_TKCheckLoop
.a7cc	c9 41		cmp #$41			cmp	 	#"A"
.a7ce	90 04		bcc $a7d4			bcc 	_TKEndIdentifier
.a7d0	c9 5b		cmp #$5b			cmp 	#"Z"+1
.a7d2	90 e8		bcc $a7bc			bcc 	_TKCheckLoop
.a7d4					_TKEndIdentifier:
.a7d4	8e 81 04	stx $0481			stx 	identTypeStart 				; save start of type text (if any !)
.a7d7	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.a7d9	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.a7db	f0 06		beq $a7e3			beq 	_TKHasTypeCharacter
.a7dd	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.a7df	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.a7e1	d0 07		bne $a7ea			bne 	_TKNoTypeCharacter
.a7e3					_TKHasTypeCharacter:
.a7e3	8c 84 04	sty $0484			sty 	identTypeByte 				; has # or $, save the type
.a7e6	e8		inx				inx 								; read next
.a7e7	bd a6 05	lda $05a6,x			lda 	lineBuffer,x
.a7ea					_TKNoTypeCharacter:
.a7ea	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.a7ec	d0 09		bne $a7f7			bne 	_TKNoArray
.a7ee	e8		inx				inx 								; skip the (
.a7ef	ad 84 04	lda $0484			lda 	identTypeByte 				; set bit 2 (e.g. array)
.a7f2	09 04		ora #$04			ora 	#$04
.a7f4	8d 84 04	sta $0484			sta 	identTypeByte
.a7f7					_TKNoArray:
.a7f7	8e 82 04	stx $0482			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.a7fa	20 94 a8	jsr $a894			jsr 	TokeniseCalculateHash 		; calculate the has for those tokens
.a7fd	a0 a3		ldy #$a3			ldy 	#(KeywordSet0) >> 8
.a7ff	a9 d6		lda #$d6			lda 	#(KeywordSet0) & $FF
.a801	20 7d a3	jsr $a37d			jsr 	TokeniseSearchTable
.a804	a2 00		ldx #$00			ldx 	#0
.a806	b0 1f		bcs $a827			bcs 	_TKFoundToken
.a808	a0 a5		ldy #$a5			ldy 	#(KeywordSet1) >> 8
.a80a	a9 80		lda #$80			lda 	#(KeywordSet1) & $FF
.a80c	20 7d a3	jsr $a37d			jsr 	TokeniseSearchTable
.a80f	a2 81		ldx #$81			ldx 	#$81
.a811	b0 14		bcs $a827			bcs 	_TKFoundToken
.a813	a0 a5		ldy #$a5			ldy 	#(KeywordSet2) >> 8
.a815	a9 d5		lda #$d5			lda 	#(KeywordSet2) & $FF
.a817	20 7d a3	jsr $a37d			jsr 	TokeniseSearchTable
.a81a	a2 82		ldx #$82			ldx 	#$82
.a81c	b0 09		bcs $a827			bcs 	_TKFoundToken
.a81e	20 24 a9	jsr $a924			jsr 	CheckCreateVariableRecord 	; failed all, it's a variable, create record if does not exist.
.a821	ae 82 04	ldx $0482			ldx 	identTypeEnd 				; X points to following byte
.a824	4c 46 a7	jmp $a746			jmp 	_TKTokeniseLoop 			; and go round again.
.a827					_TKFoundToken:
.a827	48		pha				pha 								; save token
.a828	8a		txa				txa 								; shift in X, is there one ?
.a829	f0 03		beq $a82e			beq 	_TKNoTShift
.a82b	20 18 a9	jsr $a918			jsr 	TokeniseWriteByte 			; if so, write it out
.a82e					_TKNoTShift:
.a82e	68		pla				pla 								; restore and write token
.a82f	20 18 a9	jsr $a918			jsr 	TokeniseWriteByte
.a832	ae 82 04	ldx $0482			ldx 	identTypeEnd 				; X points to following byte
.a835	4c 46 a7	jmp $a746			jmp 	_TKTokeniseLoop 			; and go round again.
.a838					TokeniseString:
.a838	a9 ff		lda #$ff			lda 	#KWC_STRING 				; string token.
.a83a	20 18 a9	jsr $a918			jsr 	TokeniseWriteByte
.a83d	e8		inx				inx									; start of quoted string.
.a83e	da		phx				phx 								; push start of string on top
.a83f	ca		dex				dex
.a840					_TSFindEnd:
.a840	e8		inx				inx
.a841	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; next character
.a844	f0 04		beq $a84a			beq 	_TSEndOfString
.a846	c9 22		cmp #$22			cmp 	#'"'
.a848	d0 f6		bne $a840			bne 	_TSFindEnd
.a84a					_TSEndOfString:
.a84a	7a		ply				ply  								; so now Y is first character, X is character after end.
.a84b	48		pha				pha 								; save terminating character
.a84c	20 54 a8	jsr $a854			jsr 	TOWriteBlockXY 				; write X to Y as a data block
.a84f	68		pla				pla 								; terminating character
.a850	f0 01		beq $a853			beq 	_TSNotQuote					; if it wasn't EOS skip it
.a852	e8		inx				inx
.a853					_TSNotQuote:
.a853	60		rts				rts
.a854					TOWriteBlockXY:
.a854	86 36		stx $36				stx 	zTemp0 						; write end character
.a856	98		tya				tya
.a857	49 ff		eor #$ff			eor 	#$FF
.a859	38		sec				sec
.a85a	65 36		adc $36				adc 	zTemp0
.a85c	1a		inc a				inc 	a 							; one extra for NULL
.a85d	20 18 a9	jsr $a918			jsr 	TokeniseWriteByte
.a860					_TOBlockLoop:
.a860	c4 36		cpy $36				cpy 	zTemp0
.a862	f0 09		beq $a86d			beq 	_TOBlockExit
.a864	b9 a6 05	lda $05a6,y			lda 	lineBuffer,y
.a867	20 18 a9	jsr $a918			jsr 	TokeniseWriteByte
.a86a	c8		iny				iny
.a86b	80 f3		bra $a860			bra 	_TOBlockLoop
.a86d					_TOBlockExit:
.a86d	a9 00		lda #$00			lda 	#0
.a86f	20 18 a9	jsr $a918			jsr 	TokeniseWriteByte
.a872	60		rts				rts
.a873					TokeniseHexConstant:
.a873	a9 fe		lda #$fe			lda 	#KWC_HEXCONST 				; hex constant token.
.a875	20 18 a9	jsr $a918			jsr 	TokeniseWriteByte
.a878	e8		inx				inx									; start of quoted string.
.a879	da		phx				phx 								; push start of constant on top
.a87a	ca		dex				dex
.a87b					_THFindLoop:
.a87b	e8		inx				inx
.a87c	bd a6 05	lda $05a6,x			lda 	lineBuffer,x
.a87f	c9 30		cmp #$30			cmp 	#"0"
.a881	90 0c		bcc $a88f			bcc 	_THFoundEnd
.a883	c9 3a		cmp #$3a			cmp 	#"9"+1
.a885	90 f4		bcc $a87b			bcc 	_THFindLoop
.a887	c9 41		cmp #$41			cmp 	#"A"
.a889	90 04		bcc $a88f			bcc 	_THFoundEnd
.a88b	c9 47		cmp #$47			cmp 	#"F"+1
.a88d	90 ec		bcc $a87b			bcc 	_THFindLoop
.a88f					_THFoundEnd:
.a88f	7a		ply				ply 								; restore start
.a890	20 54 a8	jsr $a854			jsr 	TOWriteBlockXY 				; output the block
.a893	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/utility.asm

.a894					TokeniseCalculateHash:
.a894	da		phx				phx
.a895	ae 80 04	ldx $0480			ldx 	identStart 					; needs to be same as in tokens.py - simple sum
.a898	a9 00		lda #$00			lda 	#0
.a89a					_TCHLoop:
.a89a	18		clc				clc
.a89b	7d a6 05	adc $05a6,x			adc 	lineBuffer,x
.a89e	e8		inx				inx
.a89f	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.a8a2	d0 f6		bne $a89a			bne 	_TCHLoop
.a8a4	8d 83 04	sta $0483			sta 	identHash 					; save the hash
.a8a7	fa		plx				plx
.a8a8	60		rts				rts
.a8a9					FixLineBufferCase:
.a8a9	a2 00		ldx #$00			ldx 	#0
.a8ab					_FLBCLoop:
.a8ab	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; get next character
.a8ae	f0 22		beq $a8d2			beq 	_FLBCExit 					; end of string.
.a8b0	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.a8b2	f0 11		beq $a8c5			beq 	_FLBCInQuotes
.a8b4	e8		inx				inx
.a8b5	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.a8b7	90 f2		bcc $a8ab			bcc 	_FLBCLoop
.a8b9	c9 7b		cmp #$7b			cmp 	#'z'+1
.a8bb	b0 ee		bcs $a8ab			bcs 	_FLBCLoop
.a8bd	38		sec				sec 								; make U/C
.a8be	e9 20		sbc #$20			sbc 	#32
.a8c0	9d a5 05	sta $05a5,x			sta	 	lineBuffer-1,x 				; write back
.a8c3	80 e6		bra $a8ab			bra 	_FLBCLoop
.a8c5					_FLBCInQuotes:
.a8c5	e8		inx				inx 								; advance
.a8c6	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; get next
.a8c9	f0 07		beq $a8d2			beq 	_FLBCExit 					; exit on EOS
.a8cb	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.a8cd	d0 f6		bne $a8c5			bne 	_FLBCInQuotes
.a8cf	e8		inx				inx 								; skip over it
.a8d0	80 d9		bra $a8ab			bra 	_FLBCLoop
.a8d2					_FLBCExit:
.a8d2	60		rts				rts
.a8d3					TokeniseExtractLineNumber:
.a8d3	ad a8 04	lda $04a8			lda 	tokenLineNumber+1 			; push current value on stack
.a8d6	48		pha				pha
.a8d7	ad a7 04	lda $04a7			lda 	tokenLineNumber
.a8da	48		pha				pha
.a8db	20 11 a9	jsr $a911			jsr 	_TELNTimes2 				; line # x 4
.a8de	20 11 a9	jsr $a911			jsr 	_TELNTimes2 				; line # x 2
.a8e1	18		clc				clc 								; add stacked value
.a8e2	68		pla				pla
.a8e3	6d a7 04	adc $04a7			adc 	tokenLineNumber
.a8e6	8d a7 04	sta $04a7			sta 	tokenLineNumber
.a8e9	68		pla				pla
.a8ea	6d a8 04	adc $04a8			adc 	tokenLineNumber+1
.a8ed	8d a8 04	sta $04a8			sta 	tokenLineNumber+1 			; line # x 5
.a8f0	20 11 a9	jsr $a911			jsr 	_TELNTimes2 				; line # x 10
.a8f3	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; get and consume character
.a8f6	e8		inx				inx
.a8f7	29 0f		and #$0f			and 	#15 						; add to line #
.a8f9	18		clc				clc
.a8fa	6d a7 04	adc $04a7			adc 	tokenLineNumber
.a8fd	8d a7 04	sta $04a7			sta 	tokenLineNumber
.a900	90 03		bcc $a905			bcc 	_TLENNoCarry
.a902	ee a8 04	inc $04a8			inc 	tokenLineNumber+1
.a905					_TLENNoCarry:
.a905	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; more digits ?
.a908	c9 30		cmp #$30			cmp 	#'0'
.a90a	90 04		bcc $a910			bcc 	_TLENExit
.a90c	c9 3a		cmp #$3a			cmp 	#'9'+1
.a90e	90 c3		bcc $a8d3			bcc 	TokeniseExtractLineNumber
.a910					_TLENExit:
.a910	60		rts				rts
.a911					_TELNTimes2:
.a911	0e a7 04	asl $04a7			asl 	tokenLineNumber
.a914	2e a8 04	rol $04a8			rol 	tokenLineNumber+1
.a917	60		rts				rts
.a918					TokeniseWriteByte:
.a918	da		phx				phx
.a919	ae a6 04	ldx $04a6			ldx 	tokenOffset 				; next slot to write to
.a91c	9d a6 04	sta $04a6,x			sta 	tokenOffset,x 				; write byte out
.a91f	ee a6 04	inc $04a6			inc 	tokenOffset 				; advance slot.
.a922	fa		plx				plx
.a923	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/variablerecord.asm

.a924					CheckCreateVariableRecord:
.a924	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.a926	85 36		sta $36				sta 	0+zTemp0
.a928	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.a92a	85 37		sta $37				sta 	1+zTemp0
.a92c					_CCVSearch:
.a92c	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.a92e	f0 2c		beq $a95c			beq 	_CCVFail
.a930	a0 01		ldy #$01			ldy 	#1 							; read the hash
.a932	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.a934	cd 83 04	cmp $0483			cmp 	identHash
.a937	d0 16		bne $a94f			bne 	_CCVNext
.a939	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.a93b	ae 80 04	ldx $0480			ldx 	identStart
.a93e					_CCVCompare:
.a93e	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.a941	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.a943	e8		inx				inx 								; advance pointers
.a944	c8		iny				iny
.a945	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.a946	d0 07		bne $a94f			bne 	_CCVNext  					; didn't match go to next.
.a948	90 f4		bcc $a93e			bcc 	_CCVCompare 				; not finished yet.
.a94a	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; matched whole thing ?
.a94d	f0 41		beq $a990			beq 	_CCVFound 					; yes, we were successful
.a94f					_CCVNext:
.a94f	18		clc				clc
.a950	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.a952	65 36		adc $36				adc 	zTemp0
.a954	85 36		sta $36				sta 	zTemp0
.a956	90 d4		bcc $a92c			bcc 	_CCVSearch
.a958	e6 37		inc $37				inc 	zTemp0+1
.a95a	80 d0		bra $a92c			bra 	_CCVSearch
.a95c					_CCVFail:
.a95c	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.a95e	ad 83 04	lda $0483			lda 	identHash
.a961	91 36		sta ($36),y			sta 	(zTemp0),y
.a963	c8		iny				iny 								; offset 2 is the type byte
.a964	ad 84 04	lda $0484			lda 	identTypeByte
.a967	91 36		sta ($36),y			sta 	(zTemp0),y
.a969	c8		iny				iny
.a96a					_CCVData:
.a96a	a9 00		lda #$00			lda 	#0 							; erase data 3-7
.a96c	91 36		sta ($36),y			sta 	(zTemp0),y
.a96e	c8		iny				iny
.a96f	c0 08		cpy #$08			cpy 	#8
.a971	90 f7		bcc $a96a			bcc 	_CCVData
.a973	ae 80 04	ldx $0480			ldx 	identStart 					; copy name into 8 on.
.a976					_CCVCopyName:
.a976	bd a6 05	lda $05a6,x			lda 	lineBuffer,x
.a979	91 36		sta ($36),y			sta 	(zTemp0),y
.a97b	e8		inx				inx
.a97c	c8		iny				iny
.a97d	ec 82 04	cpx $0482			cpx 	identTypeEnd
.a980	d0 f4		bne $a976			bne 	_CCVCopyName
.a982	98		tya				tya 								; patch offset
.a983	92 36		sta ($36)			sta 	(zTemp0)
.a985	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.a987	91 36		sta ($36),y			sta 	(zTemp0),y
.a989	88		dey				dey
.a98a	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.a98c	09 80		ora #$80			ora 	#$80
.a98e	91 36		sta ($36),y			sta 	(zTemp0),y
.a990					_CCVFound:
.a990	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.a992	38		sec				sec
.a993	e9 10		sbc #$10			sbc 	#(VariableSpace >> 8) 		; offset from the start
.a995	09 40		ora #$40			ora 	#$40 						; make it a writeable token
.a997	20 18 a9	jsr $a918			jsr 	TokeniseWriteByte
.a99a	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.a99c	20 18 a9	jsr $a918			jsr 	TokeniseWriteByte
.a99f	60		rts				rts

;******  Return to file: _basic.asm


;******  End of listing
