
; 64tass Turbo Assembler Macro V1.56.2625 listing file
; 64tass -q -b -Wall -Wno-portable -c -L output/basic.lst -l output/basic.lbl -Wall -o basic.rom _basic.asm
; Sat Oct  1 09:03:27 2022

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: _basic.asm


;******  Processing file: ./common/aa_system/01common.inc

=$30					ZeroPageMandatory = $30
=$600					ZeroPagePreference = $600
=$700					MemoryStorage = $700
=$2000					BasicStart = $2000
=$8000					CodeStart = $8000
=$1000					VariableSpace = $1000
=$2000					EndVariableSpace = $2000
=8					MathStackSize = 8
=512					BasicStackSize = 512
=80					MaxLineSize = 80

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa_system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa_system/04data.inc

.0030					codePtr:
>0030							.fill 	4
.0034					basicStack:
>0034							.fill 	2
.0036					zTemp0:
>0036							.fill 	2
.0038					zTemp1:
>0038							.fill 	2
.003a					zTemp2:
>003a							.fill 	2
.003c					zsTemp:
>003c							.fill 	2
=$80					NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20					NSBIsReference = $20 						; bit 5 : is a reference
=$10					NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18					NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03					NSBRefMask = $03 							; bits 0,1 : Bytes of reference, -1 (e.g. 00 = 1 byte, 11 = 4 bytes)
=$04					NSBIsArray = $04
=$00					NSTInteger = $00 							; base types for bits 3..4
=$08					NSTFloat = $08
=$10					NSTString = $10
=$18					NSTProcedure = $18
.0600					NSStatus:
>0600							.fill 	MathStackSize
.0608					NSMantissa0:
>0608							.fill 	MathStackSize 				; (this is my integer mantissa system)
.0610					NSMantissa1:
>0610							.fill 	MathStackSize
.0618					NSMantissa2:
>0618							.fill 	MathStackSize
.0620					NSMantissa3:
>0620							.fill 	MathStackSize
.0628					NSExponent:
>0628							.fill 	MathStackSize
.0700					identStart:
>0700							.fill 	1
.0701					identTypeStart:
>0701							.fill 	1
.0702					identTypeEnd:
>0702							.fill 	1
.0703					identHash:
>0703							.fill 	1
.0704					identTypeByte:
>0704							.fill 	1	 						; (see tokenising.pdf)
.0705					encodeState:
>0705							.fill 	1
.0706					digitTemp:
>0706							.fill 	1
.0707					decimalCount:
>0707							.fill 	1
.0708					randomSeed:
>0708							.fill 	4
.070c					lowMemPtr:
>070c							.fill 	2
.070e					stringMemory:
>070e							.fill 	2
.0710					stringInitialised:
>0710							.fill 	1
.0711					stringTempPointer:
>0711							.fill 	2
.0713					decimalPlaces:
>0713							.fill 	1
.0714					dbOffset:
>0714							.fill 	1
.0715					tokenOffset:
>0715							.fill 	1
.0716					tokenLineNumber:
>0716							.fill 	2
.0718					tokenBuffer:
>0718							.fill 	253
.0815					lineBuffer:
>0815							.fill 	MaxLineSize+1
.0866					numberBuffer:
>0866							.fill 	34
.0888					decimalBuffer:
>0888							.fill 	16

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/handlers.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.inc

=1					ERRID_BREAK = 1
=2					ERRID_SYNTAX = 2
=3					ERRID_DIVZERO = 3
=4					ERRID_RANGE = 4
=5					ERRID_TYPE = 5
=6					ERRID_MEMORY = 6
=7					ERRID_ARGUMENT = 7
=8					ERRID_STOP = 8
=9					ERRID_STRING = 9
=10					ERRID_ASSERT = 10
=11					ERRID_DATA = 11
=12					ERRID_NOTDONE = 12

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst.inc

=$00					KWD_LESSLESS                         = $00; $00 <<
=$01					KWD_LESSEQUAL                        = $01; $01 <=
=$02					KWD_LESSGREATER                      = $02; $02 <>
=$03					KWD_PLINGPLING3                      = $03; $03 !!3
=$04					KWD_GREATERLESS                      = $04; $04 ><
=$05					KWD_GREATEREQUAL                     = $05; $05 >=
=$06					KWD_GREATERGREATER                   = $06; $06 >>
=$07					KWD_PLINGPLING7                      = $07; $07 !!7
=$08					KWD_PLINGPLING8                      = $08; $08 !!8
=$09					KWD_PLINGPLING9                      = $09; $09 !!9
=$0a					KWD_PLINGPLING10                     = $0a; $0a !!10
=$0b					KWD_PLINGPLING11                     = $0b; $0b !!11
=$0c					KWD_PLINGPLING12                     = $0c; $0c !!12
=$0d					KWD_PLINGPLING13                     = $0d; $0d !!13
=$0e					KWD_PLINGPLING14                     = $0e; $0e !!14
=$0f					KWD_PLINGPLING15                     = $0f; $0f !!15
=$10					KWD_AT                               = $10; $10 @
=$11					KWD_PLINGPLING17                     = $11; $11 !!17
=$12					KWD_PLINGPLING18                     = $12; $12 !!18
=$13					KWD_LSQPAREN                         = $13; $13 [
=$14					KWD_BACKSLASH                        = $14; $14 \
=$15					KWD_RSQPAREN                         = $15; $15 ]
=$16					KWD_HAT                              = $16; $16 ^
=$17					KWD_UNDERSCORE                       = $17; $17 _
=$18					KWD_BQUOTE                           = $18; $18 `
=$19					KWD_PLINGPLING25                     = $19; $19 !!25
=$1a					KWD_PLINGPLING26                     = $1a; $1a !!26
=$1b					KWD_LCURLY                           = $1b; $1b {
=$1c					KWD_BAR                              = $1c; $1c |
=$1d					KWD_RCURLY                           = $1d; $1d }
=$1e					KWD_TILDE                            = $1e; $1e ~
=$21					KWD_PLING                            = $21; $21 !
=$22					KWD_DQUOTE                           = $22; $22 "
=$23					KWD_HASH                             = $23; $23 #
=$24					KWD_DOLLAR                           = $24; $24 $
=$25					KWD_PERCENT                          = $25; $25 %
=$26					KWD_AMPERSAND                        = $26; $26 &
=$27					KWD_QUOTE                            = $27; $27 '
=$28					KWD_LPAREN                           = $28; $28 (
=$29					KWD_RPAREN                           = $29; $29 )
=$2a					KWD_STAR                             = $2a; $2a *
=$2b					KWD_PLUS                             = $2b; $2b +
=$2c					KWD_COMMA                            = $2c; $2c ,
=$2d					KWD_MINUS                            = $2d; $2d -
=$2e					KWD_PERIOD                           = $2e; $2e .
=$2f					KWD_SLASH                            = $2f; $2f /
=$30					KWD_0                                = $30; $30 0
=$31					KWD_1                                = $31; $31 1
=$32					KWD_2                                = $32; $32 2
=$33					KWD_3                                = $33; $33 3
=$34					KWD_4                                = $34; $34 4
=$35					KWD_5                                = $35; $35 5
=$36					KWD_6                                = $36; $36 6
=$37					KWD_7                                = $37; $37 7
=$38					KWD_8                                = $38; $38 8
=$39					KWD_9                                = $39; $39 9
=$3a					KWD_COLON                            = $3a; $3a :
=$3b					KWD_SEMICOLON                        = $3b; $3b ;
=$3c					KWD_LESS                             = $3c; $3c <
=$3d					KWD_EQUAL                            = $3d; $3d =
=$3e					KWD_GREATER                          = $3e; $3e >
=$3f					KWD_QMARK                            = $3f; $3f ?
=$83					KWD_ABSLPAREN                        = $83; $83 ABS(
=$84					KWD_ALLOCLPAREN                      = $84; $84 ALLOC(
=$85					KWD_ASCLPAREN                        = $85; $85 ASC(
=$86					KWD_CHRDOLLARLPAREN                  = $86; $86 CHR$(
=$87					KWD_FALSE                            = $87; $87 FALSE
=$88					KWD_FRACLPAREN                       = $88; $88 FRAC(
=$89					KWD_INTLPAREN                        = $89; $89 INT(
=$8a					KWD_ISVALLPAREN                      = $8a; $8a ISVAL(
=$8b					KWD_LEFTDOLLARLPAREN                 = $8b; $8b LEFT$(
=$8c					KWD_LENLPAREN                        = $8c; $8c LEN(
=$8d					KWD_MIDDOLLARLPAREN                  = $8d; $8d MID$(
=$8e					KWD_NOTLPAREN                        = $8e; $8e NOT(
=$8f					KWD_RIGHTDOLLARLPAREN                = $8f; $8f RIGHT$(
=$90					KWD_RNDLPAREN                        = $90; $90 RND(
=$91					KWD_SGNLPAREN                        = $91; $91 SGN(
=$92					KWD_SPCLPAREN                        = $92; $92 SPC(
=$93					KWD_STRDOLLARLPAREN                  = $93; $93 STR$(
=$94					KWD_TRUE                             = $94; $94 TRUE
=$95					KWD_VALLPAREN                        = $95; $95 VAL(
=$96					KWD_FOR                              = $96; $96 FOR
=$97					KWD_IF                               = $97; $97 IF
=$98					KWD_PROC                             = $98; $98 PROC
=$99					KWD_REPEAT                           = $99; $99 REPEAT
=$9a					KWD_WHILE                            = $9a; $9a WHILE
=$9b					KWD_ENDIF                            = $9b; $9b ENDIF
=$9c					KWD_ENDPROC                          = $9c; $9c ENDPROC
=$9d					KWD_NEXT                             = $9d; $9d NEXT
=$9e					KWD_UNTIL                            = $9e; $9e UNTIL
=$9f					KWD_WEND                             = $9f; $9f WEND
=$a0					KWD_CALL                             = $a0; $a0 CALL
=$a1					KWD_CLS                              = $a1; $a1 CLS
=$a2					KWD_DATA                             = $a2; $a2 DATA
=$a3					KWD_DIM                              = $a3; $a3 DIM
=$a4					KWD_GOSUB                            = $a4; $a4 GOSUB
=$a5					KWD_GOTO                             = $a5; $a5 GOTO
=$a6					KWD_LET                              = $a6; $a6 LET
=$a7					KWD_PRINT                            = $a7; $a7 PRINT
=$a8					KWD_READ                             = $a8; $a8 READ
=$a9					KWD_REM                              = $a9; $a9 REM
=$aa					KWD_RETURN                           = $aa; $aa RETURN
=$ab					KWD_THEN                             = $ab; $ab THEN
=$ac					KWD_TO                               = $ac; $ac TO

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst0.inc

=$80					KWC_EOL = $80
=$ff					KWC_STRING = $FF
=$fe					KWC_HEXCONST = $FE
=$96					KWC_FIRST_STRUCTURE = $96
=$9b					KWC_FIRST_STRUCTURE_DEC = $9b
=$9f					KWC_LAST_STRUCTURE = $9f
=$83					KWC_FIRST_UNARY = $83
=$95					KWC_LAST_UNARY = $95

;******  Return to file: _basic.asm


;******  Processing file: ./variants/memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa_system/00start.asm

.8000	a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.8002	9a		txs				txs
.8003	20 91 81	jsr $8191			jsr 	NewCommand 					; erase current program
.8006	20 44 8d	jsr $8d44			jsr 	BackloadProgram
.8009	4c ff 81	jmp $81ff			jmp 	CommandRun
.800c					WarmStart:
.800c	a9 57		lda #$57			lda 	#"W"
.800e	20 3f 98	jsr $983f			jsr 	EXTPrintCharacter
.8011	80 fe		bra $8011	halt:	bra 	halt
>8013							.align 2

;******  Processing file: ./common/aa_system/../generated/vectors.dat

.8014					VectorSetPunc:
>8014	02 84					.word	ShiftLeft                        ; $00 <<
>8016	fc 82					.word	BinaryCompareLessEqual           ; $01 <=
>8018	f2 82					.word	BinaryCompareNotEqual            ; $02 <>
>801a	bd 96					.word	SyntaxError                      ; $03 !!3
>801c	bd 96					.word	SyntaxError                      ; $04 ><
>801e	06 83					.word	BinaryCompareGreaterEqual        ; $05 >=
>8020	05 84					.word	ShiftRight                       ; $06 >>
>8022	bd 96					.word	SyntaxError                      ; $07 !!7
>8024	bd 96					.word	SyntaxError                      ; $08 !!8
>8026	bd 96					.word	SyntaxError                      ; $09 !!9
>8028	bd 96					.word	SyntaxError                      ; $0a !!10
>802a	bd 96					.word	SyntaxError                      ; $0b !!11
>802c	bd 96					.word	SyntaxError                      ; $0c !!12
>802e	bd 96					.word	SyntaxError                      ; $0d !!13
>8030	bd 96					.word	SyntaxError                      ; $0e !!14
>8032	bd 96					.word	SyntaxError                      ; $0f !!15
>8034	bd 96					.word	SyntaxError                      ; $10 @
>8036	bd 96					.word	SyntaxError                      ; $11 !!17
>8038	bd 96					.word	SyntaxError                      ; $12 !!18
>803a	bd 96					.word	SyntaxError                      ; $13 [
>803c	1d 92					.word	IntegerDivide                    ; $14 \
>803e	bd 96					.word	SyntaxError                      ; $15 ]
>8040	8b 85					.word	EorInteger                       ; $16 ^
>8042	bd 96					.word	SyntaxError                      ; $17 _
>8044	bd 96					.word	SyntaxError                      ; $18 `
>8046	bd 96					.word	SyntaxError                      ; $19 !!25
>8048	bd 96					.word	SyntaxError                      ; $1a !!26
>804a	bd 96					.word	SyntaxError                      ; $1b {
>804c	45 85					.word	OraInteger                       ; $1c |
>804e	bd 96					.word	SyntaxError                      ; $1d }
>8050	bd 96					.word	SyntaxError                      ; $1e ~
>8052	bd 96					.word	SyntaxError                      ; $1f [7m<7F>[m
>8054	bd 96					.word	SyntaxError                      ; $20
>8056	d1 85					.word	WordIndirect                     ; $21 !
>8058	bd 96					.word	SyntaxError                      ; $22 "
>805a	bd 96					.word	SyntaxError                      ; $23 #
>805c	bd 96					.word	SyntaxError                      ; $24 $
>805e	6a 92					.word	IntegerModulus                   ; $25 %
>8060	ff 84					.word	AndInteger                       ; $26 &
>8062	bd 96					.word	SyntaxError                      ; $27 '
>8064	bd 96					.word	SyntaxError                      ; $28 (
>8066	bd 96					.word	SyntaxError                      ; $29 )
>8068	df 92					.word	MulInteger                       ; $2a *
>806a	99 84					.word	AddInteger                       ; $2b +
>806c	bd 96					.word	SyntaxError                      ; $2c ,
>806e	d4 84					.word	SubInteger                       ; $2d -
>8070	bd 96					.word	SyntaxError                      ; $2e .
>8072	76 94					.word	FDivideCommand                   ; $2f /
>8074	bd 96					.word	SyntaxError                      ; $30 0
>8076	bd 96					.word	SyntaxError                      ; $31 1
>8078	bd 96					.word	SyntaxError                      ; $32 2
>807a	bd 96					.word	SyntaxError                      ; $33 3
>807c	bd 96					.word	SyntaxError                      ; $34 4
>807e	bd 96					.word	SyntaxError                      ; $35 5
>8080	bd 96					.word	SyntaxError                      ; $36 6
>8082	bd 96					.word	SyntaxError                      ; $37 7
>8084	bd 96					.word	SyntaxError                      ; $38 8
>8086	bd 96					.word	SyntaxError                      ; $39 9
>8088	bd 96					.word	SyntaxError                      ; $3a :
>808a	bd 96					.word	SyntaxError                      ; $3b ;
>808c	de 82					.word	BinaryCompareLess                ; $3c <
>808e	d4 82					.word	BinaryCompareEqual               ; $3d =
>8090	e8 82					.word	BinaryCompareGreater             ; $3e >
>8092	f8 85					.word	ByteIndirect                     ; $3f ?
.8094					VectorSet0:
>8094	4a 82					.word	EOLCommand                       ; $80 !0:EOF
>8096	57 82					.word	Shift1Command                    ; $81 !1:SH1
>8098	bd 96					.word	SyntaxError                      ; $82 !2:SH2
>809a	bc 95					.word	AbsUnary                         ; $83 ABS(
>809c	3c 8a					.word	AllocUnary                       ; $84 ALLOC(
>809e	cc 95					.word	AscUnary                         ; $85 ASC(
>80a0	d9 8a					.word	ChrUnary                         ; $86 CHR$(
>80a2	d0 82					.word	UnaryFalse                       ; $87 FALSE
>80a4	d9 95					.word	FracUnary                        ; $88 FRAC(
>80a6	ef 95					.word	IntUnary                         ; $89 INT(
>80a8	45 96					.word	IsValUnary                       ; $8a ISVAL(
>80aa	b3 8b					.word	Unary_Left                       ; $8b LEFT$(
>80ac	01 96					.word	LenUnary                         ; $8c LEN(
>80ae	dd 8b					.word	Unary_Mid                        ; $8d MID$(
>80b0	76 8a					.word	Unary_Not                        ; $8e NOT(
>80b2	c3 8b					.word	Unary_Right                      ; $8f RIGHT$(
>80b4	8c 8a					.word	Unary_Rnd                        ; $90 RND(
>80b6	1b 96					.word	SgnUnary                         ; $91 SGN(
>80b8	eb 8a					.word	SpcUnary                         ; $92 SPC(
>80ba	06 8b					.word	Unary_Str                        ; $93 STR$(
>80bc	c4 82					.word	UnaryTrue                        ; $94 TRUE
>80be	3b 96					.word	ValUnary                         ; $95 VAL(
>80c0	bd 96					.word	SyntaxError                      ; $96 FOR
>80c2	bd 96					.word	SyntaxError                      ; $97 IF
>80c4	bd 96					.word	SyntaxError                      ; $98 PROC
>80c6	bd 96					.word	SyntaxError                      ; $99 REPEAT
>80c8	bd 96					.word	SyntaxError                      ; $9a WHILE
>80ca	bd 96					.word	SyntaxError                      ; $9b ENDIF
>80cc	bd 96					.word	SyntaxError                      ; $9c ENDPROC
>80ce	bd 96					.word	SyntaxError                      ; $9d NEXT
>80d0	bd 96					.word	SyntaxError                      ; $9e UNTIL
>80d2	bd 96					.word	SyntaxError                      ; $9f WEND
>80d4	1a 81					.word	CallCommand                      ; $a0 CALL
>80d6	bd 96					.word	SyntaxError                      ; $a1 CLS
>80d8	bd 96					.word	SyntaxError                      ; $a2 DATA
>80da	bd 96					.word	SyntaxError                      ; $a3 DIM
>80dc	bd 96					.word	SyntaxError                      ; $a4 GOSUB
>80de	bd 96					.word	SyntaxError                      ; $a5 GOTO
>80e0	62 81					.word	LetCommand                       ; $a6 LET
>80e2	9b 81					.word	Command_Print                    ; $a7 PRINT
>80e4	bd 96					.word	SyntaxError                      ; $a8 READ
>80e6	f2 81					.word	RemCommand                       ; $a9 REM
>80e8	bd 96					.word	SyntaxError                      ; $aa RETURN
>80ea	bd 96					.word	SyntaxError                      ; $ab THEN
>80ec	bd 96					.word	SyntaxError                      ; $ac TO
.80ee					VectorSet1:
>80ee	bd 96					.word	SyntaxError                      ; $80 !0:EOF
>80f0	bd 96					.word	SyntaxError                      ; $81 !1:SH1
>80f2	bd 96					.word	SyntaxError                      ; $82 !2:SH2
>80f4	0a 81					.word	AssertCommand                    ; $83 ASSERT
>80f6	28 81					.word	ClearCommand                     ; $84 CLEAR
>80f8	5f 81					.word	EndCommand                       ; $85 END
>80fa	bd 96					.word	SyntaxError                      ; $86 LIST
>80fc	91 81					.word	NewCommand                       ; $87 NEW
>80fe	bd 96					.word	SyntaxError                      ; $88 RESTORE
>8100	ff 81					.word	CommandRUN                       ; $89 RUN
>8102	bd 96					.word	SyntaxError                      ; $8a STOP
.8104					VectorSet2:
>8104	bd 96					.word	SyntaxError                      ; $80 !0:EOF
>8106	bd 96					.word	SyntaxError                      ; $81 !1:SH1
>8108	bd 96					.word	SyntaxError                      ; $82 !2:SH2

;******  Return to file: ./common/aa_system/00start.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assert.asm

.810a					AssertCommand:
.810a	a2 00		ldx #$00			ldx 	#0
.810c	20 7e 8c	jsr $8c7e			jsr 	EvaluateInteger 			; the assert test
.810f	20 37 8d	jsr $8d37			jsr 	NSMIsZero 					; exit if result is non zero.
.8112	d0 05		bne $8119			bne 	_ACExit
.8114	a9 0a		lda #$0a		lda	#10
.8116	4c 5f 82	jmp $825f		jmp	ErrorHandler
.8119					_ACExit:
.8119	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/call.asm

.811a					CallCommand:
.811a	a2 00		ldx #$00			ldx 	#0
.811c	20 93 8c	jsr $8c93			jsr 	Evaluate16BitInteger
.811f	ad 10 06	lda $0610			lda 	NSMantissa1
.8122	8d 09 06	sta $0609			sta 	NSMantissa0+1
.8125	6c 08 06	jmp ($0608)			jmp 	(NSMantissa0)

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/clear.asm

.8128					ClearCommand:
.8128	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.812a	85 36		sta $36				sta 	0+zTemp0
.812c	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.812e	85 37		sta $37				sta 	1+zTemp0
.8130					_ClearZeroLoop:
.8130	b2 36		lda ($36)			lda 	(zTemp0) 					; end of variables
.8132	f0 18		beq $814c			beq 	_ClearZeroEnd
.8134	a0 03		ldy #$03			ldy 	#3 							; erase the variables
.8136	a9 00		lda #$00			lda 	#0
.8138					_ClearOneVariable:
.8138	91 36		sta ($36),y			sta 	(zTemp0),y
.813a	c8		iny				iny
.813b	c0 08		cpy #$08			cpy 	#8
.813d	d0 f9		bne $8138			bne 	_ClearOneVariable
.813f	18		clc				clc 								; go to the next variable
.8140	b2 36		lda ($36)			lda 	(zTemp0)
.8142	65 36		adc $36				adc 	zTemp0
.8144	85 36		sta $36				sta 	zTemp0
.8146	90 e8		bcc $8130			bcc 	_ClearZeroLoop
.8148	e6 37		inc $37				inc 	zTemp0+1
.814a	80 e4		bra $8130			bra 	_ClearZeroLoop
.814c					_ClearZeroEnd:
.814c	18		clc				clc
.814d	a5 36		lda $36				lda 	zTemp0
.814f	69 01		adc #$01			adc 	#1
.8151	8d 0c 07	sta $070c			sta 	lowMemPtr
.8154	a5 37		lda $37				lda 	zTemp0+1
.8156	69 00		adc #$00			adc 	#0
.8158	8d 0d 07	sta $070d			sta 	lowMemPtr+1
.815b	20 cb 97	jsr $97cb			jsr 	StringSystemInitialise
.815e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/end.asm

.815f					EndCommand:
.815f	4c 0c 80	jmp $800c			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/let.asm

.8162					LetCommand:
.8162	a2 00		ldx #$00			ldx 	#0
.8164	ad 49 86	lda $8649			lda 	PrecedenceLevel+"*"			; precedence > this
.8167	20 63 86	jsr $8663			jsr 	EvaluateExpressionAtPrecedence
.816a	a9 3d		lda #$3d			lda 	#"=" 						; check =
.816c	20 14 92	jsr $9214			jsr 	CheckNextA
.816f	e8		inx				inx 								; RHS
.8170	20 61 86	jsr $8661			jsr 	EvaluateExpression
.8173	ca		dex				dex
.8174	20 78 81	jsr $8178			jsr 	AssignVariable
.8177	60		rts				rts
.8178					AssignVariable:
.8178	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check the string/number type bits match
.817b	48		pha				pha 								; save a copy
.817c	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.817f	29 10		and #$10			and 	#NSBIsString
.8181	d0 0b		bne $818e			bne 	_ASError
.8183	68		pla				pla 								; get back
.8184	29 10		and #$10			and 	#NSBIsString 				; check type
.8186	d0 03		bne $818b			bne 	_ASString
.8188	4c 9e 86	jmp $869e			jmp 	AssignNumber
.818b					_ASString:
.818b	4c 0c 87	jmp $870c			jmp 	AssignString
.818e					_ASError:
.818e	4c c7 96	jmp $96c7			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/new.asm

.8191					NewCommand:
.8191	20 b1 91	jsr $91b1			jsr 	MemoryNew
.8194	9c 00 10	stz $1000			stz 	VariableSpace 				; erase all variables.
.8197	20 28 81	jsr $8128			jsr 	ClearCommand 				; clear everything.
.819a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/print.asm

.819b					Command_Print:
.819b	18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.819c					_CPLoop:
.819c	08		php				php 								; save last action flag
.819d	b1 30		lda ($30),y			lda 	(codePtr),y
.819f	c9 80		cmp #$80			cmp  	#KWC_EOL 					; end of line or colon, exit now.
.81a1	f0 46		beq $81e9			beq 	_CPExit
.81a3	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.81a5	f0 42		beq $81e9			beq 	_CPExit
.81a7	68		pla				pla 								; throw last action flag
.81a8	b1 30		lda ($30),y			lda 	(codePtr),y
.81aa	c8		iny				iny
.81ab	c9 3b		cmp #$3b			cmp 	#KWD_SEMICOLON				; is it a semicolon
.81ad	f0 37		beq $81e6			beq 	_CPContinueWithSameLine
.81af	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; comma
.81b1	f0 2e		beq $81e1			beq 	_CPTab
.81b3	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; apostrophe (new line)
.81b5	f0 26		beq $81dd			beq 	_CPNewLine
.81b7	88		dey				dey 								; undo the get.
.81b8	a2 00		ldx #$00			ldx 	#0
.81ba	20 52 8c	jsr $8c52			jsr 	EvaluateValue 				; get a value into slot 0
.81bd	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; is it a number
.81c0	29 10		and #$10			and 	#NSBIsString
.81c2	f0 0b		beq $81cf			beq 	_CPNumber
.81c4	ae 10 06	ldx $0610			ldx 	NSMantissa1 				; string, print the text.
.81c7	ad 08 06	lda $0608			lda 	NSMantissa0
.81ca	20 b1 82	jsr $82b1			jsr 	PrintStringXA
.81cd	80 cc		bra $819b			bra 	Command_Print 				; loop round clearing carry so NL if end
.81cf					_CPNumber:
.81cf	a9 05		lda #$05			lda 	#5 							; maximum decimals
.81d1	20 28 8b	jsr $8b28			jsr 	ConvertNumberToString 		; convert to string
.81d4	a2 08		ldx #$08			ldx 	#DecimalBuffer >> 8
.81d6	a9 88		lda #$88			lda 	#DecimalBuffer & $FF
.81d8	20 b1 82	jsr $82b1			jsr 	PrintStringXA
.81db	80 be		bra $819b			bra 	Command_Print 				; loop round clearing carry so NL if end
.81dd					_CPNewLine:
.81dd	a9 0d		lda #$0d			lda 	#13
.81df	80 02		bra $81e3			bra 	_CPPrintChar
.81e1					_CPTab:
.81e1	a9 09		lda #$09			lda 	#9 							; print TAB
.81e3					_CPPrintChar:
.81e3	20 3f 98	jsr $983f			jsr 	EXTPrintCharacter
.81e6					_CPContinueWithSameLine:
.81e6	38		sec				sec 								; loop round with carry set, which
.81e7	80 b3		bra $819c			bra 	_CPLoop 					; will inhibit final CR
.81e9					_CPExit:
.81e9	28		plp				plp 								; get last action flag
.81ea	b0 05		bcs $81f1			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.81ec	a9 0d		lda #$0d			lda 	#13 						; print new line
.81ee	20 3f 98	jsr $983f			jsr 	EXTPrintCharacter
.81f1					_CPExit2:
.81f1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/rem.asm

.81f2					RemCommand:
.81f2	b1 30		lda ($30),y			lda 	(codePtr),y
.81f4	c9 ff		cmp #$ff			cmp 	#KWC_STRING
.81f6	d0 06		bne $81fe			bne 	_RMExit
.81f8	c8		iny				iny
.81f9	98		tya				tya
.81fa	38		sec				sec
.81fb	71 30		adc ($30),y			adc 	(codePtr),y
.81fd	a8		tay				tay
.81fe					_RMExit:
.81fe	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/run.asm

.81ff					CommandRUN:
.81ff	20 28 81	jsr $8128			jsr 	ClearCommand 				; clear variable/stacks/etc.
.8202	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.8204	85 30		sta $30				sta 	codePtr
.8206	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.8208	85 31		sta $31				sta 	codePtr+1
.820a					RUNNewLine:
.820a	b2 30		lda ($30)			lda 	(codePtr)
.820c	f0 39		beq $8247			beq 	CRNoProgram         		; no then END.
.820e	a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack
.8210	9a		txs				txs
.8211					RUNCodePointerLine:
.8211	a0 02		ldy #$02			ldy 	#2 							; start of program
.8213					_CRIncMainLoop:
.8213	c8		iny				iny
.8214					_CRMainLoop:
.8214	9c 10 07	stz $0710			stz 	stringInitialised 			; clear the temporary string initialised flag.
.8217	b1 30		lda ($30),y			lda 	(codePtr),y
.8219	10 10		bpl $822b			bpl 	_CRNotKeyword
.821b	c9 96		cmp #$96			cmp 	#KWC_LAST_UNARY+1 			; if after unary, legitimate command
.821d	b0 04		bcs $8223			bcs 	_CRIsKeyword
.821f	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if unary, syntax error.
.8221	b0 1e		bcs $8241			bcs		_CRSyntaxError
.8223					_CRIsKeyword:
.8223	c8		iny				iny 								; consume command
.8224	0a		asl a				asl 	a 							; double losing the MSB which is '1' as tokens are $80-$FF
.8225	aa		tax				tax 								; put in X for vector jump
.8226	20 44 82	jsr $8244			jsr 	_CRCallVector0 				; call the vector - effectively jsr (vectortable,X)
.8229	80 e9		bra $8214			bra 	_CRMainLoop 				; and loop round
.822b					_CRNotKeyword:
.822b	c9 3a		cmp #$3a			cmp 	#KWD_COLON 					; if a :, consume it and go round.
.822d	f0 e4		beq $8213			beq 	_CRIncMainLoop
.822f	c9 40		cmp #$40			cmp 	#$40 						; variable/call reference
.8231	90 05		bcc $8238			bcc 	_CRNotVariable
.8233					_CRGoLet:
.8233	20 62 81	jsr $8162			jsr 	LetCommand
.8236	80 dc		bra $8214			bra 	_CRMainLoop
.8238					_CRNotVariable:
.8238	c9 3f		cmp #$3f			cmp 	#KWD_QMARK
.823a	f0 f7		beq $8233			beq 	_CRGoLet
.823c	c9 21		cmp #$21			cmp 	#KWD_PLING
.823e	f0 f3		beq $8233			beq 	_CRGoLet
>8240	db						.byte 	$DB 						; causes a break in the emulator
.8241					_CRSyntaxError:
.8241	4c bd 96	jmp $96bd			jmp 	SyntaxError
.8244					_CRCallVector0:
.8244	7c 94 80	jmp ($8094,x)			jmp 	(VectorSet0,x)
.8247					CRNoProgram:
.8247	4c 5f 81	jmp $815f			jmp 	EndCommand
.824a					EOLCommand:
.824a	18		clc				clc
.824b	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.824d	65 30		adc $30				adc 	codePtr
.824f	85 30		sta $30				sta 	codePtr
.8251	90 02		bcc $8255			bcc 	_CREExit
.8253	e6 31		inc $31				inc 	codePtr+1
.8255					_CREExit:
.8255	80 b3		bra $820a			bra 	RunNewLine
.8257					Shift1Command:
.8257	b1 30		lda ($30),y			lda 	(codePtr),y
.8259	c8		iny				iny
.825a	0a		asl a				asl 	a
.825b	aa		tax				tax
.825c	7c ee 80	jmp ($80ee,x)			jmp 	(VectorSet1,x)

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/charcheck.asm

.9204					CheckRightBracket:
.9204	b1 30		lda ($30),y			lda 	(codePtr),y
.9206	c8		iny				iny
.9207	c9 29		cmp #$29			cmp 	#KWD_RPAREN 						; exit if matches
.9209	d0 0f		bne $921a			bne 	CNAFail
.920b	60		rts				rts
.920c					CheckComma:
.920c	b1 30		lda ($30),y			lda 	(codePtr),y
.920e	c8		iny				iny
.920f	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 						; exit if matches
.9211	d0 07		bne $921a			bne 	CNAFail
.9213	60		rts				rts
.9214					CheckNextA:
.9214	d1 30		cmp ($30),y			cmp 	(codePtr),y
.9216	d0 02		bne $921a			bne 	CNAFail
.9218	c8		iny				iny 								; skip character
.9219	60		rts				rts 								; and exit
.921a					CNAFail:
.921a	4c bd 96	jmp $96bd			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/errors.asm

.825f					ErrorHandler:
.825f	a8		tay				tay 								; find the error text
.8260	f0 42		beq $82a4			beq 	_EHEnd
.8262	a2 00		ldx #$00			ldx 	#0
.8264					_EHFind:
.8264	88		dey				dey 								; found the error text ?
.8265	f0 0a		beq $8271			beq 	_EHFound
.8267					_EHFindZero:
.8267	bd d6 96	lda $96d6,x			lda 	ErrorText,x 				; find the next error
.826a	e8		inx				inx
.826b	c9 00		cmp #$00			cmp 	#0
.826d	d0 f8		bne $8267			bne 	_EHFindZero
.826f	80 f3		bra $8264			bra 	_EHFind
.8271					_EHFound:
.8271	bd d6 96	lda $96d6,x			lda 	ErrorText,x 				; print the message
.8274	20 3f 98	jsr $983f			jsr 	EXTPrintCharacter
.8277	e8		inx				inx
.8278	bd d6 96	lda $96d6,x			lda 	ErrorText,x
.827b	d0 f4		bne $8271			bne 	_EHFound
.827d	a0 01		ldy #$01			ldy 	#1 							; if line number zero don't print i
.827f	b1 30		lda ($30),y			lda 	(codePtr),y
.8281	d0 05		bne $8288			bne 	_EHAtMsg
.8283	c8		iny				iny
.8284	b1 30		lda ($30),y			lda 	(codePtr),y
.8286	f0 17		beq $829f			beq 	_EHCREnd
.8288					_EHAtMsg:
.8288	a2 82		ldx #$82			ldx 	#_AtMsg >> 8 				; print " at "
.828a	a9 a7		lda #$a7			lda 	#_AtMsg & $FF
.828c	20 b1 82	jsr $82b1			jsr 	PrintStringXA
.828f	a0 01		ldy #$01			ldy 	#1 							; line number into XA
.8291	b1 30		lda ($30),y			lda 	(codePtr),y
.8293	48		pha				pha
.8294	c8		iny				iny
.8295	b1 30		lda ($30),y			lda 	(codePtr),y
.8297	aa		tax				tax
.8298	68		pla				pla
.8299	20 60 93	jsr $9360			jsr 	ConvertInt16 				; convert XA to string
.829c	20 b1 82	jsr $82b1			jsr 	PrintStringXA 				; and print it.
.829f					_EHCREnd:
.829f	a9 0d		lda #$0d			lda 	#13 						; new line
.82a1	20 3f 98	jsr $983f			jsr 	EXTPrintCharacter
.82a4					_EHEnd:
.82a4	4c 0c 80	jmp $800c			jmp 	WarmStart
>82a7	20 61 74 20 6c 69 6e 65		_AtMsg:	.text 	" at line ",0
>82af	20 00
.82b1					PrintStringXA:
.82b1	5a		phy				phy
.82b2	86 37		stx $37				stx 	zTemp0+1
.82b4	85 36		sta $36				sta 	zTemp0
.82b6	a0 00		ldy #$00			ldy 	#0
.82b8					_PSXALoop:
.82b8	b1 36		lda ($36),y			lda 	(zTemp0),y
.82ba	f0 06		beq $82c2			beq 	_PSXAExit
.82bc	20 3f 98	jsr $983f			jsr 	EXTPrintCharacter
.82bf	c8		iny				iny
.82c0	80 f6		bra $82b8			bra 	_PSXALoop
.82c2					_PSXAExit:
.82c2	7a		ply				ply
.82c3	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/compare.asm

.82c4					UnaryTrue:
.82c4	fa		plx				plx
.82c5					ReturnTrue:
.82c5	a9 01		lda #$01			lda 	#1  						; set to 1
.82c7	20 09 8d	jsr $8d09			jsr 	NSMSetByte
.82ca	a9 80		lda #$80			lda 	#$80 						; set sign flag, so it is -1
.82cc	9d 00 06	sta $0600,x			sta 	NSStatus,x
.82cf	60		rts				rts
.82d0					UnaryFalse:
.82d0	fa		plx				plx
.82d1					ReturnFalse:
.82d1	4c 07 8d	jmp $8d07			jmp 	NSMSetZero 					; set it all to zero
.82d4					BinaryCompareEqual:
.82d4	fa		plx				plx
.82d5	20 10 83	jsr $8310			jsr 	CompareBaseCode
.82d8	c9 00		cmp #$00			cmp 	#0
.82da	f0 e9		beq $82c5			beq 	ReturnTrue
.82dc	80 f3		bra $82d1			bra 	ReturnFalse
.82de					BinaryCompareLess:
.82de	fa		plx				plx
.82df	20 10 83	jsr $8310			jsr 	CompareBaseCode
.82e2	c9 ff		cmp #$ff			cmp 	#$FF
.82e4	f0 df		beq $82c5			beq 	ReturnTrue
.82e6	80 e9		bra $82d1			bra 	ReturnFalse
.82e8					BinaryCompareGreater:
.82e8	fa		plx				plx
.82e9	20 10 83	jsr $8310			jsr 	CompareBaseCode
.82ec	c9 01		cmp #$01			cmp 	#1
.82ee	f0 d5		beq $82c5			beq 	ReturnTrue
.82f0	80 df		bra $82d1			bra 	ReturnFalse
.82f2					BinaryCompareNotEqual:
.82f2	fa		plx				plx
.82f3	20 10 83	jsr $8310			jsr 	CompareBaseCode
.82f6	c9 00		cmp #$00			cmp 	#0
.82f8	d0 cb		bne $82c5			bne 	ReturnTrue
.82fa	80 d5		bra $82d1			bra 	ReturnFalse
.82fc					BinaryCompareLessEqual:
.82fc	fa		plx				plx
.82fd	20 10 83	jsr $8310			jsr 	CompareBaseCode
.8300	c9 01		cmp #$01			cmp 	#1
.8302	d0 c1		bne $82c5			bne 	ReturnTrue
.8304	80 cb		bra $82d1			bra 	ReturnFalse
.8306					BinaryCompareGreaterEqual:
.8306	fa		plx				plx
.8307	20 10 83	jsr $8310			jsr 	CompareBaseCode
.830a	c9 ff		cmp #$ff			cmp 	#$FF
.830c	d0 b7		bne $82c5			bne 	ReturnTrue
.830e	80 c1		bra $82d1			bra 	ReturnFalse
.8310					CompareBaseCode:
.8310	20 72 87	jsr $8772			jsr 	DereferenceTopTwo 			; make both values if references.
.8313	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if either is a string.
.8316	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8319	29 10		and #$10			and 	#NSTString
.831b	d0 40		bne $835d			bne 	_CBCString
.831d	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check both are integers
.8320	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8323	d0 3b		bne $8360			bne 	_CBCFloat
.8325	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8328	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.832b	29 08		and #$08			and 	#NSTFloat
.832d	d0 31		bne $8360			bne 	_CBCFloat
.832f	20 63 83	jsr $8363			jsr 	CompareFixMinusZero
.8332	e8		inx				inx
.8333	20 63 83	jsr $8363			jsr 	CompareFixMinusZero
.8336	ca		dex				dex
.8337	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; are the signs different ?
.833a	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.833d	10 0b		bpl $834a			bpl 	_CDCSameSign
.833f	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; if first one is -ve
.8342	30 16		bmi $835a			bmi 	_CBCLess 					; return $FF
.8344					_CBCGreater:
.8344	a9 01		lda #$01			lda 	#1
.8346	60		rts				rts
.8347					_CBCEqual:
.8347	a9 00		lda #$00			lda 	#0
.8349	60		rts				rts
.834a					_CDCSameSign:
.834a	20 73 84	jsr $8473			jsr 	SubTopTwoStack 				; unsigned subtract
.834d	20 37 8d	jsr $8d37			jsr 	NSMIsZero 					; or the mantissa together
.8350	f0 f5		beq $8347			beq 	_CBCEqual 					; -0 == 0
.8352	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; sign of the result. if +ve return $01 else return $FF
.8355	5d 01 06	eor $0601,x			eor 	NSStatus+1,x 				; however if both were -ve this is inverted
.8358	10 ea		bpl $8344			bpl 	_CBCGreater
.835a					_CBCLess:
.835a	a9 ff		lda #$ff			lda 	#$FF
.835c	60		rts				rts
.835d					_CBCString:
.835d	4c c9 83	jmp $83c9			jmp 	CompareStrings
.8360					_CBCFloat:
.8360	4c 5c 94	jmp $945c			jmp 	CompareFloat
.8363					CompareFixMinusZero:
.8363	20 37 8d	jsr $8d37			jsr 	NSMIsZero
.8366	d0 03		bne $836b			bne 	_CFXMZNotZero
.8368	9e 00 06	stz $0600,x			stz 	NSStatus,x
.836b					_CFXMZNotZero:
.836b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/concat.asm

.836c					StringConcat:
.836c	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check both strings
.836f	3d 01 06	and $0601,x			and 	NSStatus+1,x
.8372	29 18		and #$18			and 	#NSBTypeMask
.8374	c9 10		cmp #$10			cmp 	#NSTString
.8376	d0 4e		bne $83c6			bne		_SCType
.8378	64 38		stz $38				stz 	zTemp1 						; counting total length
.837a	e8		inx				inx
.837b	20 99 83	jsr $8399			jsr 	_SCSetupZ0 					; setup for second
.837e	20 a4 83	jsr $83a4			jsr 	_SCLengthZ0 				; length for second
.8381	ca		dex				dex
.8382	20 99 83	jsr $8399			jsr 	_SCSetupZ0 					; setup for first
.8385	20 a4 83	jsr $83a4			jsr 	_SCLengthZ0 				; length for first
.8388	a5 38		lda $38				lda 	zTemp1 						; allocate memory
.838a	20 ec 97	jsr $97ec			jsr 	StringTempAllocate
.838d	20 b7 83	jsr $83b7			jsr 	_SCCopy 					; copy first out, using zTemp0 from above
.8390	e8		inx				inx
.8391	20 99 83	jsr $8399			jsr 	_SCSetupZ0 					; copy second out
.8394	20 b7 83	jsr $83b7			jsr 	_SCCopy
.8397	ca		dex				dex
.8398	60		rts				rts
.8399					_SCSetupZ0:
.8399	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.839c	85 36		sta $36				sta 	zTemp0
.839e	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.83a1	85 37		sta $37				sta 	zTemp0+1
.83a3	60		rts				rts
.83a4					_SCLengthZ0:
.83a4	5a		phy				phy
.83a5	a0 00		ldy #$00			ldy 	#0
.83a7					_SCLenLoop:
.83a7	b1 36		lda ($36),y			lda 	(zTemp0),y
.83a9	f0 0a		beq $83b5			beq 	_SCLExit
.83ab	c8		iny				iny
.83ac	e6 38		inc $38				inc 	zTemp1
.83ae	10 f7		bpl $83a7			bpl		_SCLenLoop
.83b0	a9 09		lda #$09		lda	#9
.83b2	4c 5f 82	jmp $825f		jmp	ErrorHandler
.83b5					_SCLExit:
.83b5	7a		ply				ply
.83b6	60		rts				rts
.83b7					_SCCopy:
.83b7	5a		phy				phy
.83b8	a0 00		ldy #$00			ldy 	#0
.83ba					_SCCopyLoop:
.83ba	b1 36		lda ($36),y			lda 	(zTemp0),y
.83bc	f0 06		beq $83c4			beq 	_SCCExit
.83be	20 2a 98	jsr $982a			jsr 	StringTempWrite
.83c1	c8		iny				iny
.83c2	80 f6		bra $83ba			bra 	_SCCopyLoop
.83c4					_SCCExit:
.83c4	7a		ply				ply
.83c5	60		rts				rts
.83c6					_SCType:
.83c6	4c c7 96	jmp $96c7			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/divide.asm

.921d					IntegerDivide:
.921d	fa		plx				plx
.921e	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.9221	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.9224	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9225	0a		asl a				asl 	a
.9226	10 05		bpl $922d			bpl 	_NotRef
.9228	48		pha				pha
.9229	20 72 87	jsr $8772			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.922c	68		pla				pla
.922d					_NotRef:
.922d	0a		asl a				asl 	a
.922e	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9230	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9233	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.9236	f0 03		beq $923b			beq 	_IntegerCode 				; if clear, then we have two integers
.9238	4c c7 96	jmp $96c7			jmp 	TypeError 					; anything else, type mismatch.
.923b					_IntegerCode:
.923b	20 5d 92	jsr $925d			jsr 	CheckDivideZero 			; do div zero check
.923e	20 95 92	jsr $9295			jsr 	Int32Divide 				; do the division
.9241	20 52 93	jsr $9352			jsr 	CalculateSign 				; calculate result sign
.9244					NSMCopyPlusTwoToZero:
.9244	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.9247	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.924a	bd 12 06	lda $0612,x			lda 	NSMantissa1+2,x
.924d	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9250	bd 1a 06	lda $061a,x			lda 	NSMantissa2+2,x
.9253	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.9256	bd 22 06	lda $0622,x			lda 	NSMantissa3+2,x
.9259	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.925c	60		rts				rts
.925d					CheckDivideZero:
.925d	e8		inx				inx
.925e	20 37 8d	jsr $8d37			jsr 	NSMIsZero
.9261	f0 02		beq $9265			beq 	_CDVError
.9263	ca		dex				dex
.9264	60		rts				rts
.9265					_CDVError:
.9265	a9 03		lda #$03		lda	#3
.9267	4c 5f 82	jmp $825f		jmp	ErrorHandler
.926a					IntegerModulus:
.926a	fa		plx				plx
.926b	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.926e	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.9271	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9272	0a		asl a				asl 	a
.9273	10 05		bpl $927a			bpl 	_NotRef
.9275	48		pha				pha
.9276	20 72 87	jsr $8772			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9279	68		pla				pla
.927a					_NotRef:
.927a	0a		asl a				asl 	a
.927b	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.927d	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9280	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.9283	f0 03		beq $9288			beq 	_IntegerCode 				; if clear, then we have two integers
.9285	4c c7 96	jmp $96c7			jmp 	TypeError 					; anything else, type mismatch.
.9288					_IntegerCode:
.9288	20 5d 92	jsr $925d			jsr 	CheckDivideZero 			; do div zero check
.928b	20 95 92	jsr $9295			jsr 	Int32Divide 				; do the division
.928e	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; clear the sign bit.
.9291	5e 00 06	lsr $0600,x			lsr 	NSStatus,x
.9294	60		rts				rts
.9295					Int32Divide:
.9295	48		pha				pha 								; save AXY
.9296	5a		phy				phy
.9297	20 de 8c	jsr $8cde			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.929a	20 03 8d	jsr $8d03			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.929d	a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.929f					_I32DivideLoop:
.929f	e8		inx				inx
.92a0	e8		inx				inx
.92a1	20 1c 8d	jsr $8d1c			jsr 	NSMShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.92a4	ca		dex				dex
.92a5	ca		dex				dex
.92a6	20 1d 8d	jsr $8d1d			jsr 	NSMRotateLeft
.92a9	20 d5 92	jsr $92d5			jsr 	DivideCheckSubtract 		; check if subtract possible
.92ac	90 03		bcc $92b1			bcc 	_I32DivideNoCarryIn
.92ae	fe 0a 06	inc $060a,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.92b1					_I32DivideNoCarryIn:
.92b1	88		dey				dey 								; loop round till division completed.
.92b2	d0 eb		bne $929f			bne 	_I32DivideLoop
.92b4	7a		ply				ply 								; restore AXY and exit
.92b5	68		pla				pla
.92b6	60		rts				rts
.92b7					Int32ShiftDivide:
.92b7	48		pha				pha 								; save AY
.92b8	5a		phy				phy
.92b9	e8		inx				inx 								; clear S[X+2]
.92ba	e8		inx				inx
.92bb	20 07 8d	jsr $8d07			jsr 	NSMSetZero
.92be	ca		dex				dex
.92bf	ca		dex				dex
.92c0	a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.92c2					_I32SDLoop:
.92c2	20 d5 92	jsr $92d5			jsr 	DivideCheckSubtract 		; check if subtract possible
.92c5	e8		inx				inx
.92c6	e8		inx				inx
.92c7	20 1d 8d	jsr $8d1d			jsr 	NSMRotateLeft				; shift 64 bit FPA left, rotating carry in
.92ca	ca		dex				dex
.92cb	ca		dex				dex
.92cc	20 1d 8d	jsr $8d1d			jsr 	NSMRotateLeft
.92cf	88		dey				dey 	 							; do 31 times
.92d0	d0 f0		bne $92c2			bne 	_I32SDLoop
.92d2	7a		ply				ply 								; restore AY and exit
.92d3	68		pla				pla
.92d4	60		rts				rts
.92d5					DivideCheckSubtract:
.92d5	20 73 84	jsr $8473			jsr 	SubTopTwoStack 				; subtract Stack[X+1] from Stack[X+0]
.92d8	b0 04		bcs $92de			bcs 	_DCSExit 					; if carry set, then could do, exit
.92da	20 4d 84	jsr $844d			jsr 	AddTopTwoStack 				; add it back in
.92dd	18		clc				clc 								; and return False
.92de					_DCSExit:
.92de	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/multiply.asm

.92df					MulInteger:
.92df	fa		plx				plx
.92e0	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.92e3	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.92e6	0a		asl a				asl 	a 							; shift reference bit into sign bit
.92e7	0a		asl a				asl 	a
.92e8	10 05		bpl $92ef			bpl 	_NotRef
.92ea	48		pha				pha
.92eb	20 72 87	jsr $8772			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.92ee	68		pla				pla
.92ef					_NotRef:
.92ef	0a		asl a				asl 	a 							; put MSB of type into A:7
.92f0	30 0b		bmi $92fd			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.92f2	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.92f5	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.92f8	f0 06		beq $9300			beq 	_IntegerCode 				; if clear, then we have two integers
.92fa	4c 33 95	jmp $9533			jmp 	FloatingPointMultiply 							; otherwise at least one float.
.92fd					_StringData:
.92fd	4c d1 96	jmp $96d1			jmp 	NotDoneError							; at least one string - don't know both are strings.
.9300					_IntegerCode:
.9300	20 0d 93	jsr $930d			jsr 	MultiplyShort
.9303	c9 00		cmp #$00			cmp 	#0
.9305	f0 05		beq $930c			beq 	_MIExit
.9307	a9 04		lda #$04		lda	#4
.9309	4c 5f 82	jmp $825f		jmp	ErrorHandler
.930c					_MIExit:
.930c	60		rts				rts
.930d					MultiplyShort:
.930d	5a		phy				phy 								; save Y
.930e	20 de 8c	jsr $8cde			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.9311	20 03 8d	jsr $8d03			jsr 	NSMSetZeroMantissaOnly 		; set mantissa S[X] to zero
.9314	a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.9316					_I32MLoop:
.9316	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.9319	1d 12 06	ora $0612,x			ora 	NSMantissa1+2,x
.931c	1d 1a 06	ora $061a,x			ora 	NSMantissa2+2,x
.931f	1d 22 06	ora $0622,x			ora 	NSMantissa3+2,x
.9322	f0 28		beq $934c			beq 	_I32MExit 					; exit if zero
.9324	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.9327	29 01		and #$01			and 	#1
.9329	f0 0e		beq $9339			beq 	_I32MNoAdd
.932b	20 4d 84	jsr $844d			jsr 	AddTopTwoStack 				; if so add S[X+1] to S[X+0]
.932e	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.9331	10 06		bpl $9339			bpl 	_I32MNoAdd
.9333					_I32ShiftRight:
.9333	20 2a 8d	jsr $8d2a			jsr 	NSMShiftRight 				; shift S[X] right
.9336	c8		iny				iny 								; increment shift count
.9337	80 0a		bra $9343			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.9339					_I32MNoAdd:
.9339	3c 21 06	bit $0621,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.933c	70 f5		bvs $9333			bvs 	_I32ShiftRight 				; instead.
.933e	e8		inx				inx
.933f	20 1c 8d	jsr $8d1c			jsr 	NSMShiftLeft 				; shift additive S[X+1] left
.9342	ca		dex				dex
.9343					_I32MShiftUpper:
.9343	e8		inx				inx 								; shift S[X+2] right
.9344	e8		inx				inx
.9345	20 2a 8d	jsr $8d2a			jsr 	NSMShiftRight
.9348	ca		dex				dex
.9349	ca		dex				dex
.934a	80 ca		bra $9316			bra 	_I32MLoop 					; try again.
.934c					_I32MExit:
.934c	20 52 93	jsr $9352			jsr 	CalculateSign
.934f	98		tya				tya 								; shift in A
.9350	7a		ply				ply 								; restore Y and exit
.9351	60		rts				rts
.9352					CalculateSign:
.9352	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.9355	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; shift result left
.9358	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.935b	0a		asl a				asl 	a 							; shift bit 7 into carry
.935c	7e 00 06	ror $0600,x			ror 	NSStatus,x 					; shift right into status byte.
.935f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/scompare.asm

.83c9					CompareStrings:
.83c9	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check both are strings
.83cc	3d 01 06	and $0601,x			and 	NSStatus+1,x
.83cf	29 10		and #$10			and 	#NSBIsString
.83d1	f0 2c		beq $83ff			beq 	_CSTypeError
.83d3	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy string addresses to zTemp0/1
.83d6	85 36		sta $36				sta 	zTemp0
.83d8	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.83db	85 37		sta $37				sta 	zTemp0+1
.83dd	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.83e0	85 38		sta $38				sta 	zTemp1
.83e2	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.83e5	85 39		sta $39				sta 	zTemp1+1
.83e7	5a		phy				phy 								; save Y so we can access strings
.83e8	a0 ff		ldy #$ff			ldy 	#$FF 						; -1 for pre increment.
.83ea					_CSLoop:
.83ea	c8		iny				iny
.83eb	b1 36		lda ($36),y			lda 	(zTemp0),y 					; check if they are the same
.83ed	d1 38		cmp ($38),y			cmp 	(zTemp1),y
.83ef	d0 06		bne $83f7			bne 	_CSDifferent
.83f1	c9 00		cmp #$00			cmp 	#0 							; reached end ?
.83f3	d0 f5		bne $83ea			bne 	_CSLoop 					; still comparing
.83f5					_CSExit:
.83f5	7a		ply				ply 								; reached end, return zero in A from EOS
.83f6	60		rts				rts
.83f7					_CSDifferent:
.83f7	a9 ff		lda #$ff			lda 	#255 						; if < return $FF
.83f9	90 fa		bcc $83f5			bcc		_CSExit
.83fb	a9 01		lda #$01			lda 	#1 							; otherwise return 1.
.83fd	80 f6		bra $83f5			bra 	_CSExit
.83ff					_CSTypeError:
.83ff	4c c7 96	jmp $96c7			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/shifts.asm

.8402					ShiftLeft:
.8402	38		sec				sec
.8403	80 01		bra $8406			bra 	ShiftMain
.8405					ShiftRight:
.8405	18		clc				clc
.8406					ShiftMain:
.8406	fa		plx				plx 								; restore X
.8407	08		php				php 								; save direction
.8408	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.840b	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.840e	0a		asl a				asl 	a 							; shift reference bit into sign bit
.840f	0a		asl a				asl 	a
.8410	10 05		bpl $8417			bpl 	_NotRef
.8412	48		pha				pha
.8413	20 72 87	jsr $8772			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8416	68		pla				pla
.8417					_NotRef:
.8417	0a		asl a				asl 	a
.8418	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.841a	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.841d	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8420	f0 03		beq $8425			beq 	_IntegerCode 				; if clear, then we have two integers
.8422	4c c7 96	jmp $96c7			jmp 	TypeError 					; anything else, type mismatch.
.8425					_IntegerCode:
.8425	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; check number < 32
.8428	29 e0		and #$e0			and 	#$E0
.842a	1d 11 06	ora $0611,x			ora 	NSMantissa1+1,x
.842d	1d 19 06	ora $0619,x			ora 	NSMantissa2+1,x
.8430	1d 21 06	ora $0621,x			ora 	NSMantissa3+1,x
.8433	d0 13		bne $8448			bne 	_SMExit0 					; if >= 32 it will always return zero.
.8435					_SMLoop:
.8435	de 09 06	dec $0609,x			dec 	NSMantissa0+1,x 			; predecrement, could do << 0
.8438	30 11		bmi $844b			bmi 	_SMExit 					; exit if done.
.843a	28		plp				plp 								; restore direcition setting
.843b	08		php				php
.843c	90 05		bcc $8443			bcc 	_SMRight
.843e	20 1c 8d	jsr $8d1c			jsr 	NSMShiftLeft 				; shift left if CS
.8441	80 f2		bra $8435			bra 	_SMLoop
.8443					_SMRight:
.8443	20 2a 8d	jsr $8d2a			jsr 	NSMShiftRight 				; shift right if CC
.8446	80 ed		bra $8435			bra 	_SMLoop
.8448					_SMExit0:
.8448	20 07 8d	jsr $8d07			jsr 	NSMSetZero 					; return zero.
.844b					_SMExit:
.844b	28		plp				plp 								; throw direction
.844c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/simple.asm

.844d					AddTopTwoStack:
.844d	18		clc				clc
.844e	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8451	7d 09 06	adc $0609,x			adc 		NSMantissa0+1,x
.8454	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8457	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.845a	7d 11 06	adc $0611,x			adc 		NSMantissa1+1,x
.845d	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8460	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8463	7d 19 06	adc $0619,x			adc 		NSMantissa2+1,x
.8466	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8469	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.846c	7d 21 06	adc $0621,x			adc 		NSMantissa3+1,x
.846f	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8472	60		rts				rts
.8473					SubTopTwoStack:
.8473	38		sec				sec
.8474	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8477	fd 09 06	sbc $0609,x			sbc 		NSMantissa0+1,x
.847a	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.847d	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8480	fd 11 06	sbc $0611,x			sbc 		NSMantissa1+1,x
.8483	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8486	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8489	fd 19 06	sbc $0619,x			sbc 		NSMantissa2+1,x
.848c	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.848f	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8492	fd 21 06	sbc $0621,x			sbc 		NSMantissa3+1,x
.8495	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8498	60		rts				rts
.8499					AddInteger:
.8499	fa		plx				plx
.849a	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.849d	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.84a0	0a		asl a				asl 	a 							; shift reference bit into sign bit
.84a1	0a		asl a				asl 	a
.84a2	10 05		bpl $84a9			bpl 	_NotRef
.84a4	48		pha				pha
.84a5	20 72 87	jsr $8772			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.84a8	68		pla				pla
.84a9					_NotRef:
.84a9	0a		asl a				asl 	a 							; put MSB of type into A:7
.84aa	30 0b		bmi $84b7			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.84ac	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.84af	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.84b2	f0 06		beq $84ba			beq 	_IntegerCode 				; if clear, then we have two integers
.84b4	4c bb 93	jmp $93bb			jmp 	FloatingPointAdd 							; otherwise at least one float.
.84b7					_StringData:
.84b7	4c 6c 83	jmp $836c			jmp 	StringConcat							; at least one string - don't know both are strings.
.84ba					_IntegerCode:
.84ba					AddCode:
.84ba	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.84bd	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.84c0	10 8b		bpl $844d			bpl 	AddTopTwoStack
.84c2	20 73 84	jsr $8473			jsr 	SubTopTwoStack 				; do a physical subtraction
.84c5	3c 20 06	bit $0620,x			bit 	NSMantissa3,x 				; result is +ve, okay
.84c8	10 09		bpl $84d3			bpl 	_AddExit
.84ca	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; sign is that of 2nd value
.84cd	9d 00 06	sta $0600,x			sta 	NSStatus,x
.84d0	20 bc 8c	jsr $8cbc			jsr 	NSMNegateMantissa 			; negate the mantissa and exit
.84d3					_AddExit:
.84d3	60		rts				rts
.84d4					SubInteger:
.84d4	fa		plx				plx
.84d5	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.84d8	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.84db	0a		asl a				asl 	a 							; shift reference bit into sign bit
.84dc	0a		asl a				asl 	a
.84dd	10 05		bpl $84e4			bpl 	_NotRef
.84df	48		pha				pha
.84e0	20 72 87	jsr $8772			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.84e3	68		pla				pla
.84e4					_NotRef:
.84e4	0a		asl a				asl 	a 							; put MSB of type into A:7
.84e5	30 0b		bmi $84f2			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.84e7	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.84ea	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.84ed	f0 06		beq $84f5			beq 	_IntegerCode 				; if clear, then we have two integers
.84ef	4c c0 93	jmp $93c0			jmp 	FloatingPointSub 							; otherwise at least one float.
.84f2					_StringData:
.84f2	4c d1 96	jmp $96d1			jmp 	NotDoneError							; at least one string - don't know both are strings.
.84f5					_IntegerCode:
.84f5	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; negate the second value.
.84f8	49 80		eor #$80			eor 	#$80
.84fa	9d 01 06	sta $0601,x			sta 	NSStatus+1,x
.84fd	80 bb		bra $84ba			bra 	AddCode 					; and do the same code as add.
.84ff					AndInteger:
.84ff	fa		plx				plx
.8500	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8503	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8506	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8507	0a		asl a				asl 	a
.8508	10 05		bpl $850f			bpl 	_NotRef
.850a	48		pha				pha
.850b	20 72 87	jsr $8772			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.850e	68		pla				pla
.850f					_NotRef:
.850f	0a		asl a				asl 	a
.8510	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8512	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8515	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8518	f0 03		beq $851d			beq 	_IntegerCode 				; if clear, then we have two integers
.851a	4c c7 96	jmp $96c7			jmp 	TypeError 					; anything else, type mismatch.
.851d					_IntegerCode:
.851d	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8520	3d 09 06	and $0609,x			and 		NSMantissa0+1,x
.8523	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8526	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8529	3d 11 06	and $0611,x			and 		NSMantissa1+1,x
.852c	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.852f	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8532	3d 19 06	and $0619,x			and 		NSMantissa2+1,x
.8535	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8538	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.853b	3d 21 06	and $0621,x			and 		NSMantissa3+1,x
.853e	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8541	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.8544	60		rts				rts
.8545					OraInteger:
.8545	fa		plx				plx
.8546	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8549	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.854c	0a		asl a				asl 	a 							; shift reference bit into sign bit
.854d	0a		asl a				asl 	a
.854e	10 05		bpl $8555			bpl 	_NotRef
.8550	48		pha				pha
.8551	20 72 87	jsr $8772			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8554	68		pla				pla
.8555					_NotRef:
.8555	0a		asl a				asl 	a
.8556	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8558	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.855b	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.855e	f0 03		beq $8563			beq 	_IntegerCode 				; if clear, then we have two integers
.8560	4c c7 96	jmp $96c7			jmp 	TypeError 					; anything else, type mismatch.
.8563					_IntegerCode:
.8563	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8566	1d 09 06	ora $0609,x			ora 		NSMantissa0+1,x
.8569	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.856c	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.856f	1d 11 06	ora $0611,x			ora 		NSMantissa1+1,x
.8572	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8575	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8578	1d 19 06	ora $0619,x			ora 		NSMantissa2+1,x
.857b	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.857e	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8581	1d 21 06	ora $0621,x			ora 		NSMantissa3+1,x
.8584	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8587	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.858a	60		rts				rts
.858b					EorInteger:
.858b	fa		plx				plx
.858c	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.858f	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8592	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8593	0a		asl a				asl 	a
.8594	10 05		bpl $859b			bpl 	_NotRef
.8596	48		pha				pha
.8597	20 72 87	jsr $8772			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.859a	68		pla				pla
.859b					_NotRef:
.859b	0a		asl a				asl 	a
.859c	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.859e	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.85a1	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.85a4	f0 03		beq $85a9			beq 	_IntegerCode 				; if clear, then we have two integers
.85a6	4c c7 96	jmp $96c7			jmp 	TypeError 					; anything else, type mismatch.
.85a9					_IntegerCode:
.85a9	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.85ac	5d 09 06	eor $0609,x			eor 		NSMantissa0+1,x
.85af	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.85b2	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.85b5	5d 11 06	eor $0611,x			eor 		NSMantissa1+1,x
.85b8	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.85bb	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.85be	5d 19 06	eor $0619,x			eor 		NSMantissa2+1,x
.85c1	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.85c4	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.85c7	5d 21 06	eor $0621,x			eor 		NSMantissa3+1,x
.85ca	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.85cd	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.85d0	60		rts				rts
.85d1					WordIndirect:
.85d1	fa		plx				plx
.85d2	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.85d5	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.85d8	0a		asl a				asl 	a 							; shift reference bit into sign bit
.85d9	0a		asl a				asl 	a
.85da	10 05		bpl $85e1			bpl 	_NotRef
.85dc	48		pha				pha
.85dd	20 72 87	jsr $8772			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.85e0	68		pla				pla
.85e1					_NotRef:
.85e1	0a		asl a				asl 	a
.85e2	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.85e4	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.85e7	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.85ea	f0 03		beq $85ef			beq 	_IntegerCode 				; if clear, then we have two integers
.85ec	4c c7 96	jmp $96c7			jmp 	TypeError 					; anything else, type mismatch.
.85ef					_IntegerCode:
.85ef	20 ba 84	jsr $84ba			jsr 	AddCode 					; add the two values
.85f2	a9 22		lda #$22			lda 	#NSBIsReference+2 			; make a 2 byte reference
.85f4	9d 00 06	sta $0600,x			sta 	NSStatus,x
.85f7	60		rts				rts
.85f8					ByteIndirect:
.85f8	fa		plx				plx
.85f9	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.85fc	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.85ff	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8600	0a		asl a				asl 	a
.8601	10 05		bpl $8608			bpl 	_NotRef
.8603	48		pha				pha
.8604	20 72 87	jsr $8772			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8607	68		pla				pla
.8608					_NotRef:
.8608	0a		asl a				asl 	a
.8609	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.860b	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.860e	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8611	f0 03		beq $8616			beq 	_IntegerCode 				; if clear, then we have two integers
.8613	4c c7 96	jmp $96c7			jmp 	TypeError 					; anything else, type mismatch.
.8616					_IntegerCode:
.8616	20 ba 84	jsr $84ba			jsr 	AddCode 					; add the two values
.8619	a9 21		lda #$21			lda 	#NSBIsReference+1 			; make a 1 byte reference
.861b	9d 00 06	sta $0600,x			sta 	NSStatus,x
.861e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/tostring.asm

.9360					ConvertInt16:
.9360	8d 08 06	sta $0608			sta 	NSMantissa0 				; set up as 32 bit conversion
.9363	8e 10 06	stx $0610			stx 	NSMantissa1
.9366	9c 18 06	stz $0618			stz 	NSMantissa2
.9369	9c 20 06	stz $0620			stz 	NSMantissa3
.936c	9c 00 06	stz $0600			stz 	NSStatus 					; positive integer
.936f	a2 00		ldx #$00			ldx 	#0 							; stack level
.9371	a9 0a		lda #$0a			lda 	#10 						; base
.9373	80 00		bra $9375			bra 	ConvertInt32
.9375					ConvertInt32:
.9375	5a		phy				phy
.9376	a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.9378	2c 00 06	bit $0600			bit 	NSStatus 					; output a - if not negative.
.937b	10 08		bpl $9385			bpl 	_CI32NotNeg
.937d	48		pha				pha
.937e	a9 2d		lda #$2d			lda 	#'-'
.9380	99 66 08	sta $0866,y			sta 	NumberBuffer,y
.9383	c8		iny				iny
.9384	68		pla				pla
.9385					_CI32NotNeg:
.9385	20 93 93	jsr $9393			jsr 	_CI32DivideConvert 			; recursive conversion
.9388	a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.938a	99 66 08	sta $0866,y			sta 	NumberBuffer,y
.938d	7a		ply				ply
.938e	a2 08		ldx #$08			ldx 	#NumberBuffer >> 8
.9390	a9 66		lda #$66			lda 	#NumberBuffer & $FF
.9392	60		rts				rts
.9393					_CI32DivideConvert:
.9393	e8		inx				inx 								; write to next slot up
.9394	20 09 8d	jsr $8d09			jsr 	NSMSetByte
.9397	ca		dex				dex
.9398	20 95 92	jsr $9295			jsr 	Int32Divide 				; divide
.939b	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; save remainder
.939e	48		pha				pha
.939f	20 44 92	jsr $9244			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.93a2	20 37 8d	jsr $8d37			jsr 	NSMIsZero 					; is it zero ?
.93a5	f0 06		beq $93ad			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.93a7	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.93aa	20 93 93	jsr $9393			jsr 	_CI32DivideConvert 			; and recusrively call.
.93ad					_CI32NoRecurse:
.93ad	68		pla				pla 								; remainder
.93ae	c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII
.93b0	90 02		bcc $93b4			bcc 	_CI32NotHex
.93b2	69 26		adc #$26			adc 	#6+32
.93b4					_CI32NotHex:
.93b4	69 30		adc #$30			adc 	#48
.93b6	99 66 08	sta $0866,y			sta 	NumberBuffer,y 				; write out and exit
.93b9	c8		iny				iny
.93ba	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/expression.asm


;******  Processing file: ./common/expressions/../generated/precedence.dat

.861f					PrecedenceLevel:
>861f	04					.byte	 4	; $00 <<
>8620	02					.byte	 2	; $01 <=
>8621	02					.byte	 2	; $02 <>
>8622	00					.byte	 0	; $03 !!3
>8623	00					.byte	 0	; $04 ><
>8624	02					.byte	 2	; $05 >=
>8625	04					.byte	 4	; $06 >>
>8626	00					.byte	 0	; $07 !!7
>8627	00					.byte	 0	; $08 !!8
>8628	00					.byte	 0	; $09 !!9
>8629	00					.byte	 0	; $0a !!10
>862a	00					.byte	 0	; $0b !!11
>862b	00					.byte	 0	; $0c !!12
>862c	00					.byte	 0	; $0d !!13
>862d	00					.byte	 0	; $0e !!14
>862e	00					.byte	 0	; $0f !!15
>862f	00					.byte	 0	; $10 @
>8630	00					.byte	 0	; $11 !!17
>8631	00					.byte	 0	; $12 !!18
>8632	00					.byte	 0	; $13 [
>8633	04					.byte	 4	; $14 \
>8634	00					.byte	 0	; $15 ]
>8635	01					.byte	 1	; $16 ^
>8636	00					.byte	 0	; $17 _
>8637	00					.byte	 0	; $18 `
>8638	00					.byte	 0	; $19 !!25
>8639	00					.byte	 0	; $1a !!26
>863a	00					.byte	 0	; $1b {
>863b	01					.byte	 1	; $1c |
>863c	00					.byte	 0	; $1d }
>863d	00					.byte	 0	; $1e ~
>863e	00					.byte	 0	; $1f [7m<7F>[m
>863f	00					.byte	 0	; $20
>8640	05					.byte	 5	; $21 !
>8641	00					.byte	 0	; $22 "
>8642	00					.byte	 0	; $23 #
>8643	05					.byte	 5	; $24 $
>8644	04					.byte	 4	; $25 %
>8645	01					.byte	 1	; $26 &
>8646	00					.byte	 0	; $27 '
>8647	00					.byte	 0	; $28 (
>8648	00					.byte	 0	; $29 )
>8649	04					.byte	 4	; $2a *
>864a	03					.byte	 3	; $2b +
>864b	00					.byte	 0	; $2c ,
>864c	03					.byte	 3	; $2d -
>864d	00					.byte	 0	; $2e .
>864e	04					.byte	 4	; $2f /
>864f	00					.byte	 0	; $30 0
>8650	00					.byte	 0	; $31 1
>8651	00					.byte	 0	; $32 2
>8652	00					.byte	 0	; $33 3
>8653	00					.byte	 0	; $34 4
>8654	00					.byte	 0	; $35 5
>8655	00					.byte	 0	; $36 6
>8656	00					.byte	 0	; $37 7
>8657	00					.byte	 0	; $38 8
>8658	00					.byte	 0	; $39 9
>8659	00					.byte	 0	; $3a :
>865a	00					.byte	 0	; $3b ;
>865b	02					.byte	 2	; $3c <
>865c	02					.byte	 2	; $3d =
>865d	02					.byte	 2	; $3e >
>865e	05					.byte	 5	; $3f ?

;******  Return to file: ./common/expressions/expression.asm

.865f					EvaluateExpressionAt0:
.865f	a2 00		ldx #$00			ldx 	#0 							; bottom stack level
.8661					EvaluateExpression:
.8661	a9 00		lda #$00			lda 	#0 							; lowest precedence level
.8663					EvaluateExpressionAtPrecedence:
.8663	48		pha				pha 								; save precedence level
.8664	20 33 89	jsr $8933			jsr 	EvaluateTerm 				; evaluate term into level X.
.8667	68		pla				pla 								; restore precedence level.
.8668					_EXPRLoop:
.8668	85 36		sta $36				sta 	zTemp0 						; save current precedence level.
.866a	b1 30		lda ($30),y			lda 	(codePtr),y
.866c	c9 40		cmp #$40			cmp		#$40 						; if >= $40 cannot be an operator
.866e	b0 25		bcs $8695			bcs 	_EXPRExit
.8670	da		phx				phx 								; read the operator precedence
.8671	aa		tax				tax
.8672	bd 1f 86	lda $861f,x			lda 	PrecedenceLevel,x
.8675	fa		plx				plx
.8676	c9 00		cmp #$00			cmp 	#0							; if zero exit (not an operator)
.8678	f0 1b		beq $8695			beq 	_EXPRExit
.867a	85 37		sta $37				sta 	zTemp0+1 					; save operator precedence level.
.867c	a5 36		lda $36				lda 	zTemp0 						; compare current precedence vs. operator precedence
.867e	c5 37		cmp $37				cmp 	zTemp0+1
.8680	b0 13		bcs $8695			bcs		_EXPRExit 					; if current >= operator exit
.8682	48		pha				pha 								; save current precedence.
.8683	b1 30		lda ($30),y			lda 	(codePtr),y
.8685	c8		iny				iny
.8686	48		pha				pha
.8687	a5 37		lda $37				lda 	zTemp0+1 					; get operator precedence level
.8689	e8		inx				inx 								; work out the right hand side.
.868a	20 63 86	jsr $8663			jsr 	EvaluateExpressionAtPrecedence
.868d	ca		dex				dex
.868e	68		pla				pla 								; get operator, call the code.
.868f	20 98 86	jsr $8698			jsr 	_EXPRCaller
.8692	68		pla				pla 								; restore precedence level
.8693	80 d3		bra $8668			bra 	_EXPRLoop 					; and go round.
.8695					_EXPRExit:
.8695	a5 36		lda $36				lda 	zTemp0 						; A = current precedence level.
.8697	60		rts				rts
.8698					_EXPRCaller:
.8698	da		phx				phx 								; save on stack, first thing is to restore it
.8699	0a		asl a				asl 	a 							; double so can use vectors into X
.869a	aa		tax				tax
.869b	7c 14 80	jmp ($8014,x)			jmp 	(VectorSetPunc,x) 			; and go to the code.

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/addsub.asm

.93bb					FloatingPointAdd:
.93bb	20 5c 95	jsr $955c			jsr 	FloatPrepare 				; prepare for floats
.93be	80 0b		bra $93cb			bra 	FloatAdd
.93c0					FloatingPointSub:
.93c0	20 5c 95	jsr $955c			jsr 	FloatPrepare 				; prepare for floats
.93c3					FloatSubtract:
.93c3	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; negate FPB
.93c6	49 80		eor #$80			eor 	#$80
.93c8	9d 01 06	sta $0601,x			sta 	NSStatus+1,x				; and fall through.
.93cb					FloatAdd:
.93cb	48		pha				pha
.93cc	5a		phy				phy
.93cd	20 6d 95	jsr $956d			jsr 	NSNormalise 				; normalise S[X]
.93d0	f0 54		beq $9426			beq 	_FAReturn1
.93d2	e8		inx				inx 								; normalise S[X+1]
.93d3	20 6d 95	jsr $956d			jsr 	NSNormalise
.93d6	ca		dex				dex
.93d7	c9 00		cmp #$00			cmp 	#0
.93d9	f0 6f		beq $944a			beq 	_FAExit 					; if so, just return A
.93db	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; are the exponents the same ?
.93de	dd 29 06	cmp $0629,x			cmp 	NSExponent+1,x
.93e1	f0 1b		beq $93fe			beq 	_FAExponentsEqual
.93e3	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; work out the larger exponent
.93e6	a8		tay				tay
.93e7	38		sec				sec 								; do a signed comparison of the exponents.
.93e8	fd 29 06	sbc $0629,x			sbc 	NSExponent+1,x
.93eb	50 02		bvc $93ef			bvc 	_FANoSignedChange
.93ed	49 80		eor #$80			eor 	#$80
.93ef					_FANoSignedChange:
.93ef	29 80		and #$80			and 	#$80
.93f1	10 03		bpl $93f6			bpl 	_FAHaveMax
.93f3	bc 29 06	ldy $0629,x			ldy 	NSExponent+1,x
.93f6					_FAHaveMax:
.93f6	20 4d 94	jsr $944d			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.93f9	e8		inx				inx
.93fa	20 4d 94	jsr $944d			jsr 	_FAShiftToExponent
.93fd	ca		dex				dex
.93fe					_FAExponentsEqual:
.93fe	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; are the signs the same
.9401	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.9404	30 10		bmi $9416			bmi 	_FADifferentSigns
.9406	20 4d 84	jsr $844d			jsr 	AddTopTwoStack 				; do the add of the mantissae
.9409	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.940c	10 3c		bpl $944a			bpl 	_FAExit 					; if no, we are done.
.940e	20 2a 8d	jsr $8d2a			jsr 	NSMShiftRight 				; shift A right, renormalising it.
.9411	fe 28 06	inc $0628,x			inc 	NSExponent,x 				; bump the exponent and exit
.9414	80 34		bra $944a			bra 	_FAExit
.9416					_FADifferentSigns:
.9416	20 73 84	jsr $8473			jsr 	SubTopTwoStack 				; subtract mantissa B from A
.9419	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; is the result negative ?
.941c	10 2c		bpl $944a			bpl 	_FAExit 					; if no, we are done.
.941e	20 b3 8c	jsr $8cb3			jsr 	NSMNegate 					; netate result
.9421	20 bc 8c	jsr $8cbc			jsr 	NSMNegateMantissa 			; negate (2'c) the mantissa
.9424	80 24		bra $944a			bra 	_FAExit
.9426					_FAReturn1:
.9426	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.9429	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.942c	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.942f	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9432	bd 19 06	lda $0619,x			lda 	NSMantissa2+1,x
.9435	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.9438	bd 21 06	lda $0621,x			lda 	NSMantissa3+1,x
.943b	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.943e	bd 29 06	lda $0629,x			lda 	NSExponent+1,x
.9441	9d 28 06	sta $0628,x			sta 	NSExponent,x
.9444	bd 01 06	lda $0601,x			lda 	NSStatus+1,x
.9447	9d 00 06	sta $0600,x			sta 	NSStatus,x
.944a					_FAExit:
.944a	7a		ply				ply
.944b	68		pla				pla
.944c	60		rts				rts
.944d					_FAShiftToExponent:
.944d					_FAShiftToExponent2:
.944d	98		tya				tya 								; compare Y to exponent
.944e	dd 28 06	cmp $0628,x			cmp 	NSExponent,x 				; reached the exponent required ?
.9451	f0 08		beq $945b			beq 	_FASEExit 					; exit if so.
.9453	20 2a 8d	jsr $8d2a			jsr 	NSMShiftRight	 			; shift the mantissa right
.9456	fe 28 06	inc $0628,x			inc 	NSExponent,x 				; increment exponent
.9459	80 f2		bra $944d			bra 	_FAShiftToExponent2
.945b					_FASEExit:
.945b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/compare.asm

.945c					CompareFloat:
.945c	20 c3 93	jsr $93c3			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.945f	bd 10 06	lda $0610,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.9462	29 f8		and #$f8			and 	#$F8
.9464	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.9467	1d 20 06	ora $0620,x			ora 	NSMantissa3,x
.946a	f0 09		beq $9475			beq 	_FCExit 					; zero, so approximately identical
.946c	a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.946e	3c 00 06	bit $0600,x			bit 	NSStatus,x
.9471	10 02		bpl $9475			bpl 	_FCExit
.9473					_FCNegative:
.9473	a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.9475					_FCExit:
.9475	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/divide.asm

.9476					FDivideCommand:
.9476	fa		plx				plx	 								; restore stack position
.9477	20 5c 95	jsr $955c			jsr 	FloatPrepare 				; prepare for floats
.947a					FloatDivide:
.947a	48		pha				pha
.947b	e8		inx				inx
.947c	20 6d 95	jsr $956d			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.947f	ca		dex				dex
.9480	c9 00		cmp #$00			cmp 	#0
.9482	f0 20		beq $94a4			beq 	_FDZero
.9484	20 6d 95	jsr $956d			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.9487	f0 19		beq $94a2			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.9489	20 b7 92	jsr $92b7			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.948c	20 44 92	jsr $9244			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.948f	20 6d 95	jsr $956d			jsr		NSNormalise 				; renormalise
.9492	20 52 93	jsr $9352			jsr 	CalculateSign 				; calculate result sign
.9495	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; calculate exponent
.9498	38		sec				sec
.9499	fd 29 06	sbc $0629,x			sbc 	NSExponent+1,x
.949c	38		sec				sec
.949d	e9 1e		sbc #$1e			sbc 	#30
.949f	9d 28 06	sta $0628,x			sta 	NSExponent,x
.94a2					_FDExit:
.94a2	68		pla				pla
.94a3	60		rts				rts
.94a4					_FDZero:
.94a4	a9 03		lda #$03		lda	#3
.94a6	4c 5f 82	jmp $825f		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/fractional.asm

.94a9					FloatFractionalPart:
.94a9	5a		phy				phy
.94aa	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; take absolute value
.94ad	29 7f		and #$7f			and 	#$7F
.94af	9d 00 06	sta $0600,x			sta 	NSStatus,x
.94b2	20 6d 95	jsr $956d			jsr 	NSNormalise
.94b5	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.94b8	38		sec				sec
.94b9	e9 e0		sbc #$e0			sbc 	#$E0
.94bb	90 31		bcc $94ee			bcc 	_FFPExit 					; already fractional
.94bd	c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.94bf	b0 2a		bcs $94eb			bcs 	_FFPZero
.94c1	a8		tay				tay 								; put count to do in Y
.94c2	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; do each in turn.
.94c5	20 f0 94	jsr $94f0			jsr 	_FFPPartial
.94c8	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.94cb	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.94ce	20 f0 94	jsr $94f0			jsr 	_FFPPartial
.94d1	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.94d4	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.94d7	20 f0 94	jsr $94f0			jsr 	_FFPPartial
.94da	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.94dd	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.94e0	20 f0 94	jsr $94f0			jsr 	_FFPPartial
.94e3	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.94e6	20 37 8d	jsr $8d37			jsr 	NSMIsZero 					; zeroed check.
.94e9	d0 03		bne $94ee			bne 	_FFPExit
.94eb					_FFPZero:
.94eb	20 07 8d	jsr $8d07			jsr 	NSMSetZero
.94ee					_FFPExit:
.94ee	7a		ply				ply
.94ef	60		rts				rts
.94f0					_FFPPartial:
.94f0	c0 00		cpy #$00			cpy 	#0 							; no more to do
.94f2	f0 17		beq $950b			beq 	_FFFPPExit
.94f4	c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.94f6	b0 0c		bcs $9504			bcs 	_FFFPPWholeByte
.94f8	5a		phy				phy
.94f9					_FFFPPLeft:
.94f9	0a		asl a				asl 	a
.94fa	88		dey				dey
.94fb	d0 fc		bne $94f9			bne 	_FFFPPLeft
.94fd	7a		ply				ply
.94fe					_FFFPPRight:
.94fe	4a		lsr a				lsr 	a
.94ff	88		dey				dey
.9500	d0 fc		bne $94fe			bne 	_FFFPPRight
.9502	80 07		bra $950b			bra 	_FFFPPExit
.9504					_FFFPPWholeByte:
.9504	98		tya				tya 								; subtract 8 from count
.9505	38		sec				sec
.9506	e9 08		sbc #$08			sbc 	#8
.9508	a8		tay				tay
.9509	a9 00		lda #$00			lda 	#0 							; and clear all
.950b					_FFFPPExit:
.950b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/integer.asm

.950c					FloatIntegerPart:
.950c	48		pha				pha
.950d	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; is it integer already ?
.9510	f0 1f		beq $9531			beq 	_FIPExit 					; if so do nothing
.9512	20 37 8d	jsr $8d37			jsr 	NSMIsZero 					; is it zero ?
.9515	f0 17		beq $952e			beq 	_FIPZero 					; if so return zero.
.9517	20 6d 95	jsr $956d			jsr 	NSNormalise 				; normalise
.951a	f0 12		beq $952e			beq 	_FIPZero 					; normalised to zero, exit zero
.951c					_FIPShift:
.951c	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.951f	10 08		bpl $9529			bpl 	_FIPCheckZero
.9521	20 2a 8d	jsr $8d2a			jsr 	NSMShiftRight 				; shift mantissa right
.9524	fe 28 06	inc $0628,x			inc 	NSExponent,x 				; bump exponent
.9527	80 f3		bra $951c			bra 	_FIPShift
.9529					_FIPCheckZero:
.9529	20 37 8d	jsr $8d37			jsr 	NSMIsZero 					; avoid -0 problem
.952c	d0 03		bne $9531			bne 	_FIPExit 					; set to zero if mantissa zero.
.952e					_FIPZero:
.952e	20 07 8d	jsr $8d07			jsr 	NSMSetZero
.9531					_FIPExit:
.9531	68		pla				pla
.9532	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/multiply.asm

.9533					FloatingPointMultiply:
.9533	20 5c 95	jsr $955c			jsr 	FloatPrepare 				; prepare for floats
.9536					FloatMultiply:
.9536	48		pha				pha
.9537	20 6d 95	jsr $956d			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.953a	f0 1b		beq $9557			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.953c	e8		inx				inx
.953d	20 6d 95	jsr $956d			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.9540	ca		dex				dex
.9541	c9 00		cmp #$00			cmp 	#0
.9543	f0 0f		beq $9554			beq 	_FDSetZero
.9545	20 0d 93	jsr $930d			jsr 	MultiplyShort 				; calculate the result.
.9548	7d 28 06	adc $0628,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.954b	18		clc				clc
.954c	7d 29 06	adc $0629,x			adc 	NSExponent+1,x
.954f	9d 28 06	sta $0628,x			sta 	NSExponent,x
.9552	80 03		bra $9557			bra 	_FDExit
.9554					_FDSetZero:
.9554	20 07 8d	jsr $8d07			jsr 	NSMSetZero 					; return 0
.9557					_FDExit:
.9557	20 6d 95	jsr $956d			jsr 	NSNormalise 				; normalise the result
.955a	68		pla				pla
.955b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/utility.asm

.955c					FloatPrepare:
.955c	20 72 87	jsr $8772			jsr 	DereferenceTopTwo 			; dereference the top two values
.955f	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check ints/floats
.9562	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.9565	29 10		and #$10			and 	#NSBIsString
.9567	d0 01		bne $956a			bne 	_FDType
.9569	60		rts				rts
.956a					_FDType:
.956a	4c c7 96	jmp $96c7			jmp 	TypeError
.956d					NSNormalise:
.956d	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; make float, keep sign
.9570	29 80		and #$80			and 	#$80
.9572	09 08		ora #$08			ora 	#NSTFloat
.9574	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9577	20 37 8d	jsr $8d37			jsr 	NSMIsZero 					; if zero exit
.957a	d0 09		bne $9585			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.957c	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; clear the sign bit.
.957f	7e 00 06	ror $0600,x			ror 	NSStatus,x 					; (no -0)
.9582	a9 00		lda #$00			lda 	#0 							; set Z flag
.9584	60		rts				rts
.9585					_NSNormaliseOptimise:
.9585	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; upper byte zero ?
.9588	d0 22		bne $95ac			bne 	_NSNormaliseLoop
.958a	bd 18 06	lda $0618,x			lda 	NSMantissa2,x 				; byte normalise
.958d	30 1d		bmi $95ac			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.958f	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.9592	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.9595	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.9598	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.959b	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.959e	9e 08 06	stz $0608,x			stz 	NSMantissa0,x
.95a1	bd 28 06	lda $0628,x			lda 	NSExponent,x
.95a4	38		sec				sec
.95a5	e9 08		sbc #$08			sbc 	#8
.95a7	9d 28 06	sta $0628,x			sta 	NSExponent,x
.95aa	80 d9		bra $9585			bra 	_NSNormaliseOptimise
.95ac					_NSNormaliseLoop:
.95ac	3c 20 06	bit $0620,x			bit 	NSMantissa3,x 				; bit 30 set ?
.95af	70 08		bvs $95b9			bvs 	_NSNExit 					; exit if so with Z flag clear
.95b1	20 1c 8d	jsr $8d1c			jsr 	NSMShiftLeft 				; shift mantissa left
.95b4	de 28 06	dec $0628,x			dec 	NSExponent,x 				; adjust exponent
.95b7	80 f3		bra $95ac			bra 	_NSNormaliseLoop
.95b9					_NSNExit:
.95b9	a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.95bb	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignnumber.asm

.869e					AssignNumber:
.869e	5a		phy				phy
.869f	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy mantissa0/1 to zTemp0
.86a2	85 36		sta $36				sta 	zTemp0
.86a4	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.86a7	85 37		sta $37				sta 	zTemp0+1
.86a9	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; clear reference bits
.86ac	29 df		and #$df			and 	#(NSBIsReference ^ $FF)
.86ae	9d 00 06	sta $0600,x			sta 	NSStatus,x
.86b1	29 18		and #$18			and 	#NSBTypeMask				; assigning to a float ?
.86b3	c9 08		cmp #$08			cmp 	#NSTFloat
.86b5	f0 2a		beq $86e1			beq 	_ANFloat
.86b7	bd 29 06	lda $0629,x			lda		NSExponent+1,x 				; is it a float
.86ba	f0 05		beq $86c1			beq		_ANNotFloat
.86bc	e8		inx				inx
.86bd	20 0c 95	jsr $950c			jsr 	FloatIntegerPart 			; make it an integer
.86c0	ca		dex				dex
.86c1					_ANNotFloat:
.86c1	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if byte/word reference.
.86c4	29 03		and #$03			and 	#3
.86c6	d0 05		bne $86cd			bne 	_ANByteWord
.86c8	20 ed 86	jsr $86ed			jsr 	_ANCopy4PackSign 			; copy all 4 bytes and sign
.86cb	80 1e		bra $86eb			bra 	_ANExit
.86cd					_ANByteWord:
.86cd	48		pha				pha 								; save count
.86ce	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; do byte
.86d1	92 36		sta ($36)			sta 	(zTemp0)
.86d3	68		pla				pla
.86d4	c9 01		cmp #$01			cmp	 	#1
.86d6	f0 13		beq $86eb			beq 	_ANExit
.86d8	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x 			; do word
.86db	a0 01		ldy #$01			ldy 	#1
.86dd	91 36		sta ($36),y			sta 	(zTemp0),y
.86df	80 0a		bra $86eb			bra 	_ANExit
.86e1					_ANFloat:
.86e1	20 ed 86	jsr $86ed			jsr 	_ANCopy4PackSign 			; write all 4 bytes and packed sign
.86e4	bd 29 06	lda $0629,x			lda 	NSExponent+1,x 				; copy exponent to slot 4
.86e7	a0 04		ldy #$04			ldy 	#4
.86e9	91 36		sta ($36),y			sta 	(zTemp0),y
.86eb					_ANExit:
.86eb	7a		ply				ply
.86ec	60		rts				rts
.86ed					_ANCopy4PackSign:
.86ed	a0 03		ldy #$03			ldy 	#3
.86ef	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; sign bit into status
.86f2	29 80		and #$80			and 	#$80 						; put into high bit of mantissa 3
.86f4	1d 21 06	ora $0621,x			ora 	NSMantissa3+1,x
.86f7	91 36		sta ($36),y			sta 	(zTemp0),y
.86f9	88		dey				dey
.86fa	bd 19 06	lda $0619,x			lda 	NSMantissa2+1,x
.86fd	91 36		sta ($36),y			sta 	(zTemp0),y
.86ff	88		dey				dey
.8700	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.8703	91 36		sta ($36),y			sta 	(zTemp0),y
.8705	88		dey				dey
.8706	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.8709	91 36		sta ($36),y			sta 	(zTemp0),y
.870b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignstring.asm

.870c					AssignString:
.870c	5a		phy				phy
.870d	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.8710	85 38		sta $38				sta 	zTemp1
.8712	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.8715	85 39		sta $39				sta 	zTemp1+1
.8717	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.871a	85 36		sta $36				sta 	zTemp0
.871c	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.871f	85 37		sta $37				sta 	zTemp0+1
.8721	a0 01		ldy #$01			ldy 	#1 							; the high byte of the target address
.8723	b1 36		lda ($36),y			lda 	(zTemp0),y
.8725	f0 24		beq $874b			beq 	_ASNewStringRequired 		; if zero, a new string is required.
.8727	38		sec				sec 								; put Address-2 in zsTemp - this is the size/status/string record
.8728	b2 36		lda ($36)			lda 	(zTemp0) 					; of concreted strings
.872a	e9 02		sbc #$02			sbc 	#2
.872c	85 3c		sta $3c				sta 	zsTemp
.872e	a0 01		ldy #$01			ldy 	#1
.8730	b1 36		lda ($36),y			lda 	(zTemp0),y
.8732	e9 00		sbc #$00			sbc 	#0
.8734	85 3d		sta $3d				sta 	zsTemp+1
.8736	a0 ff		ldy #$ff			ldy 	#$FF 						; get length of new string
.8738					_ASGetLength:
.8738	c8		iny				iny
.8739	b1 38		lda ($38),y			lda 	(zTemp1),y
.873b	d0 fb		bne $8738			bne 	_ASGetLength
.873d	98		tya				tya 								; is this length <= current length
.873e	d2 3c		cmp ($3c)			cmp 	(zsTemp)
.8740	90 21		bcc $8763			bcc 	_ASCopyString
.8742	f0 1f		beq $8763			beq 	_ASCopyString
>8744	db						.byte 	$DB 						; causes a break in the emulator
.8745	a9 80		lda #$80			lda 	#$80 						; mark as unused.
.8747	a0 01		ldy #$01			ldy 	#1
.8749	91 3c		sta ($3c),y			sta 	(zsTemp),y
.874b					_ASNewStringRequired:
.874b	e8		inx				inx 								; concrete the new string.
.874c	20 74 97	jsr $9774			jsr 	StringConcrete				; (breaks zTemp1/2, not zTemp0 and zsTemp)
.874f	ca		dex				dex
.8750	18		clc				clc
.8751	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; copy that new address to the reference.
.8754	69 02		adc #$02			adc 	#2 							; add two to point at the data.
.8756	92 36		sta ($36)			sta 	(zTemp0)
.8758	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.875b	69 00		adc #$00			adc 	#0
.875d	a0 01		ldy #$01			ldy 	#1
.875f	91 36		sta ($36),y			sta 	(zTemp0),y
.8761	80 0d		bra $8770			bra 	_ASExit
.8763					_ASCopyString:
.8763	a0 00		ldy #$00			ldy 	#0
.8765					_ASCopyLoop:
.8765	b1 38		lda ($38),y			lda 	(zTemp1),y
.8767	c8		iny				iny
.8768	c8		iny				iny
.8769	91 3c		sta ($3c),y			sta 	(zsTemp),y
.876b	88		dey				dey
.876c	c9 00		cmp #$00			cmp 	#0
.876e	d0 f5		bne $8765			bne 	_ASCopyLoop
.8770					_ASExit:
.8770	7a		ply				ply
.8771	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/dereference.asm

.8772					DereferenceTopTwo:
.8772	e8		inx				inx
.8773	20 77 87	jsr $8777			jsr 	Dereference 				; deref x+1
.8776	ca		dex				dex  								; falls through to deref x
.8777					Dereference:
.8777	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get the status byte
.877a	29 20		and #$20			and 	#NSBIsReference 			; shift sign bit to carry, reference to bit 7
.877c	f0 57		beq $87d5			beq 	_DRFExit 					; not a reference
.877e	5a		phy				phy
.877f	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy address to dereference into zTemp0
.8782	85 36		sta $36				sta 	zTemp0
.8784	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8787	85 37		sta $37				sta 	zTemp0+1
.8789	9e 10 06	stz $0610,x			stz 	NSMantissa1,x 				; clear second byte.
.878c	b2 36		lda ($36)			lda 	(zTemp0) 					; do the first byte
.878e	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8791	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get status byte.
.8794	29 18		and #$18			and 	#NSBTypeMask 				; what type is it ?
.8796	c9 10		cmp #$10			cmp 	#NSTString 					; if string, dereference two
.8798	f0 0f		beq $87a9			beq 	_DRFDereferenceTwo
.879a	c9 08		cmp #$08			cmp 	#NSTFloat 					; if float, do full dereference.
.879c	f0 39		beq $87d7			beq 	_DRFFull
.879e	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be integer - how many bytes ?
.87a1	29 03		and #$03			and 	#3
.87a3	f0 32		beq $87d7			beq 	_DRFFull 					; the whole word
.87a5	c9 01		cmp #$01			cmp 	#1 							; is it 10 (e.g. 2 bytes)
.87a7	f0 07		beq $87b0			beq		_DRFClear23 				; no, one byte, clear 2 & 3 and exit
.87a9					_DRFDereferenceTwo:
.87a9	a0 01		ldy #$01			ldy 	#1
.87ab	b1 36		lda ($36),y			lda 	(zTemp0),y
.87ad	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.87b0					_DRFClear23:
.87b0	9e 18 06	stz $0618,x			stz 	NSMantissa2,x 				; clear upper bytes, only read 1 or 2 bytes
.87b3	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.87b6	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; make it a value of that type.
.87b9	29 18		and #$18			and 	#NSBTypeMask
.87bb	9d 00 06	sta $0600,x			sta 	NSStatus,x
.87be	c9 10		cmp #$10			cmp 	#NSTString  				; is it a string
.87c0	d0 12		bne $87d4			bne 	_DRFNotString
.87c2	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; check address is zero
.87c5	1d 10 06	ora $0610,x			ora 	NSMantissa1,x
.87c8	d0 0a		bne $87d4			bne 	_DRFNotString
.87ca	a9 d6		lda #$d6			lda 	#_DRFNullString & $FF 		; if so, return reference to ""
.87cc	9d 08 06	sta $0608,x			sta 	NSMantissa0,X
.87cf	a9 87		lda #$87			lda 	#_DRFNullString >> 8
.87d1	9d 10 06	sta $0610,x			sta 	NSMantissa1,X
.87d4					_DRFNotString
.87d4	7a		ply				ply 								; restore Y and exit
.87d5					_DRFExit:
.87d5	60		rts				rts
.87d6					_DRFNullString:
>87d6	00						.byte 	0
.87d7					_DRFFull:
.87d7	a0 01		ldy #$01			ldy 	#1 							; get remaining 3 bytes.
.87d9	b1 36		lda ($36),y			lda 	(zTemp0),y
.87db	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.87de	c8		iny				iny
.87df	b1 36		lda ($36),y			lda 	(zTemp0),y
.87e1	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.87e4	c8		iny				iny
.87e5	b1 36		lda ($36),y			lda 	(zTemp0),y
.87e7	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.87ea	9e 28 06	stz $0628,x			stz 	NSExponent,x 				; clear exponent.
.87ed	bd 00 06	lda $0600,x			lda		NSStatus,x 					; see if type is integer
.87f0	29 18		and #$18			and 	#NSBTypeMask  				; type information only
.87f2	9d 00 06	sta $0600,x			sta 	NSStatus,x 					; update it back.
.87f5	f0 06		beq $87fd			beq 	_DRFNoExponent
.87f7	c8		iny				iny 								; if not, read the exponent as well.
.87f8	b1 36		lda ($36),y			lda 	(zTemp0),y
.87fa	9d 28 06	sta $0628,x			sta 	NSExponent,x
.87fd					_DRFNoExponent:
.87fd	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; is the most significant bit set ?
.8800	10 0d		bpl $880f			bpl 	_DRFExit2 					; if not, then exit.
.8802	29 7f		and #$7f			and 	#$7F 						; clear that bit.
.8804	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8807	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; set the sign flag
.880a	09 80		ora #$80			ora 	#NSBIsNegative
.880c	9d 00 06	sta $0600,x			sta 	NSStatus,x
.880f					_DRFExit2:
.880f	7a		ply				ply
.8810	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/number.asm

=1					ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2					ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3					ESTA_Decimal = 3 							; fractional part.
.8811					EncodeNumberStart:
.8811	38		sec				sec
.8812	80 01		bra $8815			bra 	EncodeNumberContinue+1
.8814					EncodeNumberContinue:
.8814	18		clc				clc
.8815					EncodeNumber:
.8815	08		php				php 								; save reset.
.8816	c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.8818	f0 12		beq $882c			beq 	_ENIsOkay
.881a	c9 30		cmp #$30			cmp 	#"0"
.881c	90 04		bcc $8822			bcc 	_ENBadNumber
.881e	c9 3a		cmp #$3a			cmp 	#"9"+1
.8820	90 0a		bcc $882c			bcc 	_ENIsOkay
.8822					_ENBadNumber:
.8822	28		plp				plp 								; throw saved reset
.8823	ad 05 07	lda $0705			lda 	EncodeState 				; decimal mode, construct final number
.8826	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.8828	f0 7e		beq $88a8			beq 	_ENConstructFinal
.882a					_ENFail:
.882a	18		clc				clc 								; not allowed
.882b	60		rts				rts
.882c					_ENIsOkay:
.882c	28		plp				plp 								; are we restarting
.882d	90 15		bcc $8844			bcc 	_ENNoRestart
.882f					_ENStartEncode:
.882f	c9 2e		cmp #$2e			cmp 	#'.'						; first is DP
.8831	f0 0c		beq $883f			beq 	_ENFirstDP
.8833	29 0f		and #$0f			and 	#15 						; put digit in mantissa
.8835	20 09 8d	jsr $8d09			jsr 	NSMSetByte
.8838	a9 01		lda #$01			lda 	#ESTA_Low
.883a					_ENExitChange:
.883a	8d 05 07	sta $0705			sta 	EncodeState 				; save new state
.883d	38		sec				sec
.883e	60		rts				rts
.883f					_ENFirstDP:
.883f	20 07 8d	jsr $8d07			jsr 	NSMSetZero 					; clear integer part
.8842	80 3f		bra $8883			bra 	_ESTASwitchFloat			; go straight to float and exi
.8844					_ENNoRestart:
.8844	48		pha				pha 								; save on stack.
.8845	ad 05 07	lda $0705			lda 	EncodeState 				; get current state
.8848	c9 01		cmp #$01			cmp 	#ESTA_Low
.884a	f0 09		beq $8855			beq  	_ESTALowState
.884c	c9 02		cmp #$02			cmp 	#ESTA_High
.884e	f0 29		beq $8879			beq 	_ESTAHighState
.8850	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.8852	f0 3b		beq $888f			beq 	_ESTADecimalState
>8854	db						.byte 	$DB 						; causes a break in the emulator
.8855					_ESTALowState:
.8855	68		pla				pla 								; get value back
.8856	c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.8858	f0 29		beq $8883			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.885a	29 0f		and #$0f			and 	#15 						; make digit
.885c	8d 06 07	sta $0706			sta 	DigitTemp 					; save it.
.885f	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.8862	0a		asl a				asl 	a
.8863	0a		asl a				asl 	a
.8864	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.8867	0a		asl a				asl 	a
.8868	6d 06 07	adc $0706			adc 	DigitTemp
.886b	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.886e	c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.8870	90 05		bcc $8877			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.8872	a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.8874	8d 05 07	sta $0705			sta 	EncodeState
.8877					_ESTANoSwitch:
.8877	38		sec				sec
.8878	60		rts				rts
.8879					_ESTAHighState:
.8879	68		pla				pla 								; get value back
.887a	c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.887c	f0 05		beq $8883			beq 	_ESTASwitchFloat
.887e	20 e2 88	jsr $88e2			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.8881	38		sec				sec
.8882	60		rts				rts
.8883					_ESTASwitchFloat:
.8883	9c 07 07	stz $0707			stz 	DecimalCount
.8886	e8		inx				inx 								; zero the decimal additive.
.8887	20 07 8d	jsr $8d07			jsr 	NSMSetZero
.888a	ca		dex				dex
.888b	a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.888d	80 ab		bra $883a			bra 	_ENExitChange
.888f					_ESTADecimalState:
.888f	68		pla				pla 								; digit.
.8890	c9 2e		cmp #$2e			cmp 	#"." 						; fail on 2nd decimal point.
.8892	f0 96		beq $882a			beq 	_ENFail
.8894	e8		inx				inx 								; put digit into fractional part of X+1
.8895	20 e2 88	jsr $88e2			jsr 	ESTAShiftDigitIntoMantissa
.8898	ca		dex				dex
.8899	ee 07 07	inc $0707			inc 	DecimalCount 				; bump the count of decimals
.889c	ad 07 07	lda $0707			lda 	DecimalCount
.889f	c9 0b		cmp #$0b			cmp 	#11
.88a1	f0 02		beq $88a5			beq 	_ESTADSFail
.88a3	38		sec				sec
.88a4	60		rts				rts
.88a5					_ESTADSFail:
.88a5	4c c2 96	jmp $96c2			jmp 	RangeError
.88a8					_ENConstructFinal:
.88a8	ad 07 07	lda $0707			lda 	DecimalCount 				; get decimal count
.88ab	f0 33		beq $88e0			beq 	_ENCFExit 					; no decimals
.88ad	5a		phy				phy
.88ae	0a		asl a				asl 	a 							; x 4 and CLC
.88af	0a		asl a				asl 	a
.88b0	6d 07 07	adc $0707			adc 	DecimalCount
.88b3	a8		tay				tay
.88b4	b9 81 96	lda $9681,y			lda 	DecimalScalarTable-5,y 		; copy decimal scalar to X+2
.88b7	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.88ba	b9 82 96	lda $9682,y			lda 	DecimalScalarTable-5+1,y
.88bd	9d 12 06	sta $0612,x			sta 	NSMantissa1+2,x
.88c0	b9 83 96	lda $9683,y			lda 	DecimalScalarTable-5+2,y
.88c3	9d 1a 06	sta $061a,x			sta 	NSMantissa2+2,x
.88c6	b9 84 96	lda $9684,y			lda 	DecimalScalarTable-5+3,y
.88c9	9d 22 06	sta $0622,x			sta 	NSMantissa3+2,x
.88cc	b9 85 96	lda $9685,y			lda 	DecimalScalarTable-5+4,y
.88cf	9d 2a 06	sta $062a,x			sta 	NSExponent+2,x
.88d2	a9 08		lda #$08			lda 	#NSTFloat
.88d4	9d 02 06	sta $0602,x			sta 	NSStatus+2,x
.88d7	7a		ply				ply
.88d8	e8		inx				inx 								; multiply decimal const by decimal scalar
.88d9	20 36 95	jsr $9536			jsr 	FloatMultiply
.88dc	ca		dex				dex
.88dd	20 cb 93	jsr $93cb			jsr 	FloatAdd 					; add to integer part.
.88e0					_ENCFExit:
.88e0	18		clc				clc 								; reject the digit.
.88e1	60		rts				rts
.88e2					ESTAShiftDigitIntoMantissa:
.88e2	29 0f		and #$0f			and 	#15 						; save digit
.88e4	48		pha				pha
.88e5	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; push mantissa on stack
.88e8	48		pha				pha
.88e9	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.88ec	48		pha				pha
.88ed	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.88f0	48		pha				pha
.88f1	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.88f4	48		pha				pha
.88f5	20 1c 8d	jsr $8d1c			jsr 	NSMShiftLeft 				; x 2
.88f8	20 1c 8d	jsr $8d1c			jsr 	NSMShiftLeft 				; x 4
.88fb	18		clc				clc 								; pop mantissa and add
.88fc	68		pla				pla
.88fd	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.8900	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8903	68		pla				pla
.8904	7d 10 06	adc $0610,x			adc 	NSMantissa1,x
.8907	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.890a	68		pla				pla
.890b	7d 18 06	adc $0618,x			adc 	NSMantissa2,x
.890e	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8911	68		pla				pla
.8912	7d 20 06	adc $0620,x			adc 	NSMantissa3,x
.8915	9d 20 06	sta $0620,x			sta 	NSMantissa3,x 				; x 5
.8918	20 1c 8d	jsr $8d1c			jsr 	NSMShiftLeft 				; x 10
.891b	68		pla				pla 								; add digit
.891c	18		clc				clc
.891d	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.8920	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8923	90 0d		bcc $8932			bcc 	_ESTASDExit
.8925	fe 10 06	inc $0610,x			inc 	NSMantissa1,x
.8928	d0 08		bne $8932			bne 	_ESTASDExit
.892a	fe 18 06	inc $0618,x			inc 	NSMantissa2,x
.892d	d0 03		bne $8932			bne 	_ESTASDExit
.892f	fe 20 06	inc $0620,x			inc 	NSMantissa3,x
.8932					_ESTASDExit:
.8932	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/term.asm

.8933					EvaluateTerm:
.8933	b1 30		lda ($30),y			lda 	(codePtr),y
.8935	30 18		bmi $894f			bmi 	_ETCheckUnary 				; unary function ? (text ones)
.8937	c9 40		cmp #$40			cmp 	#$40 						; 40-7F => identifier reference
.8939	b0 6f		bcs $89aa			bcs 	_ETVariable
.893b	c9 30		cmp #$30			cmp 	#'0' 						; is it a number
.893d	90 6e		bcc $89ad			bcc 	_ETPuncUnary 				; if not it might be a punctuation unary.
.893f	c9 3a		cmp #$3a			cmp 	#'9'+1
.8941	b0 6a		bcs $89ad			bcs 	_ETPuncUnary
.8943	20 11 88	jsr $8811			jsr 	EncodeNumberStart 			; can't fail as it's 0-9 !
.8946					_ETNumber:
.8946	c8		iny				iny 								; keep encoding until we have the numbers
.8947	b1 30		lda ($30),y			lda 	(codePtr),y
.8949	20 14 88	jsr $8814			jsr 	EncodeNumberContinue
.894c	b0 f8		bcs $8946			bcs 	_ETNumber 					; go back if accepted.
.894e	60		rts				rts
.894f					_ETCheckUnary:
.894f	c9 ff		cmp #$ff			cmp 	#KWC_STRING 				; string token
.8951	f0 41		beq $8994			beq 	_ETString
.8953	c9 fe		cmp #$fe			cmp 	#KWC_HEXCONST 				; hex constant.
.8955	f0 12		beq $8969			beq 	_ETHexConstant
.8957	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; check it actually is a unary function
.8959	90 0b		bcc $8966			bcc 	_ETSyntaxError
.895b	c9 96		cmp #$96			cmp 	#KWC_LAST_UNARY+1
.895d	b0 07		bcs $8966			bcs 	_ETSyntaxError
.895f	da		phx				phx 								; push X on the stack
.8960	0a		asl a				asl 	a 							; put vector x 2 into X
.8961	aa		tax				tax
.8962	c8		iny				iny 								; consume unary function token
.8963	7c 94 80	jmp ($8094,x)			jmp 	(VectorSet0,x) 				; and do it.
.8966					_ETSyntaxError:
.8966	4c bd 96	jmp $96bd			jmp 	SyntaxError
.8969					_ETHexConstant:
.8969	c8		iny				iny 								; skip #
.896a	c8		iny				iny 								; skip count
.896b	20 07 8d	jsr $8d07			jsr 	NSMSetZero 					; clear result
.896e					_ETHLoop:
.896e	b1 30		lda ($30),y			lda 	(codePtr),y
.8970	c8		iny				iny 								; and consume
.8971	c9 00		cmp #$00			cmp 	#0 							; exit if zero
.8973	f0 1e		beq $8993			beq 	_ETHExit
.8975	48		pha				pha 								; save on stack.
.8976	20 1c 8d	jsr $8d1c			jsr 	NSMShiftLeft 				; x 2
.8979	20 1c 8d	jsr $8d1c			jsr 	NSMShiftLeft 				; x 4
.897c	20 1c 8d	jsr $8d1c			jsr 	NSMShiftLeft 				; x 8
.897f	20 1c 8d	jsr $8d1c			jsr 	NSMShiftLeft 				; x 16
.8982	68		pla				pla 								; ASCII
.8983	c9 41		cmp #$41			cmp 	#'A'
.8985	90 02		bcc $8989			bcc 	_ETHNotChar
.8987	e9 07		sbc #$07			sbc 	#7
.8989					_ETHNotChar:
.8989	29 0f		and #$0f			and 	#15 						; digit now
.898b	1d 08 06	ora $0608,x			ora 	NSMantissa0,x 				; put in LS Nibble
.898e	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8991	80 db		bra $896e			bra 	_ETHLoop 					; go round.
.8993					_ETHExit:
.8993	60		rts				rts
.8994					_ETString:
.8994	c8		iny				iny 								; look at length
.8995	b1 30		lda ($30),y			lda 	(codePtr),y
.8997	48		pha				pha
.8998	c8		iny				iny 								; first character
.8999	20 ed 91	jsr $91ed			jsr 	MemoryInline 				; put address of string at (codePtr),y on stack
.899c	68		pla				pla 								; restore count and save
.899d	85 36		sta $36				sta 	zTemp0
.899f	98		tya				tya 								; add length to Y to skip it.
.89a0	18		clc				clc
.89a1	65 36		adc $36				adc 	zTemp0
.89a3	a8		tay				tay
.89a4	a9 10		lda #$10			lda 	#NSTString 					; mark as string
.89a6	9d 00 06	sta $0600,x			sta 	NSStatus,x
.89a9	60		rts				rts
.89aa					_ETVariable:
.89aa	4c 04 8a	jmp $8a04			jmp 	VariableHandler
.89ad					_ETPuncUnary:
.89ad	c8		iny				iny 								; consume the unary character
.89ae	c9 2d		cmp #$2d			cmp 	#KWD_MINUS 					; unary minus
.89b0	f0 2d		beq $89df			beq 	_ETUnaryNegate
.89b2	c9 10		cmp #$10			cmp 	#KWD_AT 					; @ reference -> constant
.89b4	f0 39		beq $89ef			beq 	_ETDereference
.89b6	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; parenthesis
.89b8	f0 43		beq $89fd			beq 	_ETParenthesis
.89ba	64 36		stz $36				stz 	zTemp0 						; zTemp0 is the indirection level.
.89bc	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; byte indirection (0) ?
.89be	f0 06		beq $89c6			beq 	_ETIndirection
.89c0	e6 36		inc $36				inc 	zTemp0
.89c2	c9 21		cmp #$21			cmp 	#KWD_PLING					; word indirection (1) \
.89c4	d0 a0		bne $8966			bne 	_ETSyntaxError
.89c6					_ETIndirection:
.89c6	a5 36		lda $36				lda 	zTemp0 						; push indirection amount (0-1) => (1-2) on the stack
.89c8	1a		inc a				inc 	a
.89c9	48		pha				pha
.89ca	20 33 89	jsr $8933			jsr 	EvaluateTerm				; evaluate the term
.89cd	20 77 87	jsr $8777			jsr 	Dereference 				; dereference it.
.89d0	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a +ve integer.
.89d3	d0 07		bne $89dc			bne 	_ETTypeMismatch
.89d5	68		pla				pla 								; indirection 1-2
.89d6	09 20		ora #$20			ora 	#NSBIsReference 			; make it a reference.
.89d8	9d 00 06	sta $0600,x			sta 	NSStatus,x
.89db	60		rts				rts
.89dc					_ETTypeMismatch:
.89dc	4c c7 96	jmp $96c7			jmp 	TypeError
.89df					_ETUnaryNegate:
.89df	20 33 89	jsr $8933			jsr 	EvaluateTerm				; evaluate the term
.89e2	20 77 87	jsr $8777			jsr 	Dereference 				; dereference it.
.89e5	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a number
.89e8	29 10		and #$10			and 	#NSTString
.89ea	d0 f0		bne $89dc			bne 	_ETTypeMismatch
.89ec	4c b3 8c	jmp $8cb3			jmp 	NSMNegate  					; just toggles the sign bit.
.89ef					_ETDereference:
.89ef	20 33 89	jsr $8933			jsr 	EvaluateTerm				; evaluate the term
.89f2	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a reference
.89f5	29 20		and #$20			and 	#NSBIsReference
.89f7	f0 e3		beq $89dc			beq 	_ETTypeMismatch
.89f9	9e 00 06	stz $0600,x			stz 	NSStatus,x 					; make it an integer address
.89fc	60		rts				rts
.89fd					_ETParenthesis:
.89fd	20 61 86	jsr $8661			jsr 	EvaluateExpression 			; evaluate here, from lowest precedence
.8a00	20 04 92	jsr $9204			jsr 	CheckRightBracket 			; check for )
.8a03	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/variable.asm

.8a04					VariableHandler:
.8a04	b1 30		lda ($30),y			lda 	(codePtr),y
.8a06	18		clc				clc
.8a07	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8a09	85 37		sta $37				sta 	zTemp0+1
.8a0b	c8		iny				iny
.8a0c	b1 30		lda ($30),y			lda 	(codePtr),y
.8a0e	85 36		sta $36				sta 	zTemp0
.8a10	c8		iny				iny
.8a11	18		clc				clc									; copy variable address+3 to mantissa
.8a12	69 03		adc #$03			adc 	#3
.8a14	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8a17	a5 37		lda $37				lda 	zTemp0+1
.8a19	69 00		adc #$00			adc 	#0
.8a1b	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8a1e	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.8a21	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.8a24	9e 28 06	stz $0628,x			stz 	NSExponent,x
.8a27	5a		phy				phy
.8a28	a0 02		ldy #$02			ldy 	#2 							; read type
.8a2a	b1 36		lda ($36),y			lda 	(zTemp0),y
.8a2c	7a		ply				ply
.8a2d	29 1c		and #$1c			and 	#NSBTypeMask+NSBIsArray 	; get type information
.8a2f	09 20		ora #$20			ora 	#NSBIsReference 			; make a reference.
.8a31	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8a34	29 04		and #$04			and 	#NSBIsArray
.8a36	d0 01		bne $8a39			bne 	_VHArray
.8a38	60		rts				rts
.8a39					_VHArray:
>8a39	db						.byte 	$DB 						; causes a break in the emulator
.8a3a	80 fd		bra $8a39			bra 	_VHArray

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/abs.asm

.95bc					AbsUnary:
.95bc	fa		plx				plx 								; restore stack pos
.95bd	20 5b 8c	jsr $8c5b			jsr 	EvaluateNumber 				; get a float or int
.95c0	20 04 92	jsr $9204			jsr 	CheckRightBracket
.95c3	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; clear the sign bit
.95c6	29 7f		and #$7f			and 	#$7F
.95c8	9d 00 06	sta $0600,x			sta 	NSStatus,x
.95cb	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/alloc.asm

.8a3c					AllocUnary:
.8a3c	fa		plx				plx 								; restore stack pos
.8a3d	20 93 8c	jsr $8c93			jsr 	Evaluate16BitInteger		; get bytes required.
.8a40	20 04 92	jsr $9204			jsr 	CheckRightBracket
.8a43	da		phx				phx 								; save X/Y
.8a44	5a		phy				phy
.8a45	8a		txa				txa 								; copy X into Y
.8a46	a8		tay				tay
.8a47	b9 10 06	lda $0610,y			lda		NSMantissa1,y 				; get size
.8a4a	aa		tax				tax
.8a4b	b9 08 06	lda $0608,y			lda 	NSMantissa0,y
.8a4e	20 5b 8a	jsr $8a5b			jsr 	AllocateXABytes 			; allocate memory
.8a51	99 08 06	sta $0608,y			sta 	NSMantissa0,y 				; write address out.
.8a54	8a		txa				txa
.8a55	99 10 06	sta $0610,y			sta 	NSMantissa1,y
.8a58	7a		ply				ply
.8a59	fa		plx				plx
.8a5a	60		rts				rts
.8a5b					AllocateXABytes:
.8a5b	5a		phy				phy
.8a5c	ac 0c 07	ldy $070c			ldy 	lowMemPtr 					; push current address on stack
.8a5f	5a		phy				phy
.8a60	ac 0d 07	ldy $070d			ldy 	lowMemPtr+1
.8a63	5a		phy				phy
.8a64	18		clc				clc
.8a65	6d 0c 07	adc $070c			adc 	lowMemPtr
.8a68	8d 0c 07	sta $070c			sta 	lowMemPtr
.8a6b	8a		txa				txa
.8a6c	6d 0d 07	adc $070d			adc 	lowMemPtr+1
.8a6f	8d 0d 07	sta $070d			sta 	lowMemPtr+1
.8a72	fa		plx				plx
.8a73	68		pla				pla
.8a74	7a		ply				ply
.8a75	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/asc.asm

.95cc					AscUnary:
.95cc	fa		plx				plx 								; restore stack pos
.95cd	20 66 8c	jsr $8c66			jsr 	EvaluateString 				; get a string
.95d0	b2 36		lda ($36)			lda 	(zTemp0)					; get/return firs character
.95d2	20 09 8d	jsr $8d09			jsr 	NSMSetByte
.95d5	20 04 92	jsr $9204			jsr 	CheckRightBracket
.95d8	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/frac.asm

.95d9					FracUnary:
.95d9	fa		plx				plx 								; restore stack pos
.95da	20 5b 8c	jsr $8c5b			jsr 	EvaluateNumber 				; get a float or int
.95dd	20 04 92	jsr $9204			jsr 	CheckRightBracket
.95e0	bd 00 06	lda $0600,x			lda 	NSStatus,x
.95e3	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.95e5	f0 04		beq $95eb			beq 	_IUZero
.95e7	20 a9 94	jsr $94a9			jsr 	FloatFractionalPart
.95ea	60		rts				rts
.95eb					_IUZero:
.95eb	20 07 8d	jsr $8d07			jsr 	NSMSetZero
.95ee	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/int.asm

.95ef					IntUnary:
.95ef	fa		plx				plx 								; restore stack pos
.95f0	20 5b 8c	jsr $8c5b			jsr 	EvaluateNumber 				; get a float or int
.95f3	20 04 92	jsr $9204			jsr 	CheckRightBracket
.95f6	bd 00 06	lda $0600,x			lda 	NSStatus,x
.95f9	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.95fb	f0 03		beq $9600			beq 	_IUExit
.95fd	20 0c 95	jsr $950c			jsr 	FloatIntegerPart
.9600					_IUExit:
.9600	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/len.asm

.9601					LenUnary:
.9601	fa		plx				plx 								; restore stack pos
.9602	20 66 8c	jsr $8c66			jsr 	EvaluateString 				; get a string
.9605	5a		phy				phy
.9606	a0 00		ldy #$00			ldy 	#0 							; find length
.9608					_LenFind:
.9608	b1 36		lda ($36),y			lda 	(zTemp0),y
.960a	f0 06		beq $9612			beq 	_LenExit
.960c	c8		iny				iny
.960d	d0 f9		bne $9608			bne 	_LenFind
.960f	4c c2 96	jmp $96c2			jmp 	RangeError 					; string > 255
.9612					_LenExit:
.9612	98		tya				tya
.9613	20 09 8d	jsr $8d09			jsr 	NSMSetByte
.9616	7a		ply				ply
.9617	20 04 92	jsr $9204			jsr 	CheckRightBracket
.961a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/not.asm

.8a76					Unary_Not:
.8a76	fa		plx				plx
.8a77	20 7e 8c	jsr $8c7e			jsr 	EvaluateInteger 			; get integer
.8a7a	20 04 92	jsr $9204			jsr 	CheckRightBracket
.8a7d	20 37 8d	jsr $8d37			jsr 	NSMIsZero 					; zero mantissa ?
.8a80	f0 04		beq $8a86			beq 	_NotZero
.8a82	20 07 8d	jsr $8d07			jsr 	NSMSetZero
.8a85	60		rts				rts
.8a86					_NotZero:
.8a86	4c c5 82	jmp $82c5			jmp 	ReturnTrue
.8a89					_UNBad:
.8a89	4c cc 96	jmp $96cc			jmp 	ArgumentError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/rnd.asm

.8a8c					Unary_Rnd:
.8a8c	20 5b 8c	jsr $8c5b			jsr 	EvaluateNumber 				; number to use.
.8a8f	20 04 92	jsr $9204			jsr 	CheckRightBracket 			; closing bracket
.8a92	20 bb 8a	jsr $8abb			jsr 	Random32Bit 				; generate a number.
.8a95	ad 08 07	lda $0708			lda 	RandomSeed+0
.8a98	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8a9b	ad 09 07	lda $0709			lda 	RandomSeed+1
.8a9e	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8aa1	ad 0a 07	lda $070a			lda 	RandomSeed+2
.8aa4	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8aa7	ad 0b 07	lda $070b			lda 	RandomSeed+3
.8aaa	29 7f		and #$7f			and 	#$7F 						; make legal mantissa
.8aac	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8aaf	a9 e1		lda #$e1			lda 	#-31 						; force into 0-1 range
.8ab1	8d 28 06	sta $0628			sta 	NSExponent
.8ab4	a9 08		lda #$08			lda 	#NSTFloat
.8ab6	8d 00 06	sta $0600			sta 	NSStatus 					; positive.
>8ab9	db						.byte 	$DB 						; causes a break in the emulator
.8aba	60		rts				rts
.8abb					Random32Bit:
.8abb	5a		phy				phy
.8abc	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.8abe	ad 08 07	lda $0708			lda 	RandomSeed+0 				; check the seed isn't zero
.8ac1	d0 03		bne $8ac6			bne 	_Random1
.8ac3	a8		tay				tay 								; if so do it 256 times
.8ac4	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.8ac6					_Random1:
.8ac6	0a		asl a				asl 	a 							; LSFR RNG
.8ac7	2e 09 07	rol $0709			rol 	RandomSeed+1
.8aca	2e 0a 07	rol $070a			rol 	RandomSeed+2
.8acd	2e 0b 07	rol $070b			rol 	RandomSeed+3
.8ad0	90 02		bcc $8ad4			bcc 	_Random2
.8ad2	49 c5		eor #$c5			eor 	#$C5
.8ad4					_Random2:
.8ad4	88		dey				dey
.8ad5	d0 ef		bne $8ac6			bne 	_Random1
.8ad7	7a		ply				ply
.8ad8	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/sgn.asm

.961b					SgnUnary:
.961b	fa		plx				plx 								; restore stack pos
.961c	20 5b 8c	jsr $8c5b			jsr 	EvaluateNumber 				; get a float or int
.961f	20 04 92	jsr $9204			jsr 	CheckRightBracket
.9622	20 37 8d	jsr $8d37			jsr 	NSMIsZero 					; if zero
.9625	f0 10		beq $9637			beq 	_SGZero  					; return Int Zero
.9627	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get status w/sign
.962a	48		pha				pha
.962b	a9 01		lda #$01			lda 	#1 							; set to 1
.962d	20 09 8d	jsr $8d09			jsr 	NSMSetByte
.9630	68		pla				pla
.9631	29 80		and #$80			and		#$80 						; copy the sign byte out
.9633	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9636	60		rts				rts
.9637	20 07 8d	jsr $8d07	_SGZero:jsr 	NSMSetZero
.963a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/val.asm

.963b					ValUnary:
.963b	fa		plx				plx 								; restore stack pos
.963c	20 51 96	jsr $9651			jsr 	ValMainCode 				; do the main val() code
.963f	b0 01		bcs $9642			bcs 	_VUError 					; couldn't convert
.9641	60		rts				rts
.9642					_VUError:
.9642	4c c7 96	jmp $96c7			jmp 	TypeError
.9645					IsValUnary:
.9645	fa		plx				plx 								; restore stack pos
.9646	20 51 96	jsr $9651			jsr 	ValMainCode 				; do the main val() code
.9649	b0 03		bcs $964e			bcs 	_VUBad
.964b	4c c5 82	jmp $82c5			jmp 	ReturnTrue
.964e					_VUBad:
.964e	4c d1 82	jmp $82d1			jmp 	ReturnFalse
.9651					ValMainCode:
.9651	20 66 8c	jsr $8c66			jsr 	EvaluateString 				; get a string
.9654	20 04 92	jsr $9204			jsr 	CheckRightBracket 			; check right bracket present
.9657	5a		phy				phy
.9658	b2 36		lda ($36)			lda 	(zTemp0) 					; check not empty string
.965a	f0 17		beq $9673			beq 	_VMCFail2
.965c	a0 ff		ldy #$ff			ldy 	#$FF 						; start position
.965e	48		pha				pha 								; save first character
.965f	c9 2d		cmp #$2d			cmp 	#"-"		 				; is it -
.9661	d0 01		bne $9664			bne 	_VMCStart
.9663	c8		iny				iny 								; skip over -
.9664					_VMCStart:
.9664	38		sec				sec 								; initialise first time round.
.9665					_VMCNext:
.9665	c8		iny				iny 								; pre-increment
.9666	b1 36		lda ($36),y			lda 	(zTemp0),y 					; next character
.9668	f0 0c		beq $9676			beq 	_VMCSuccess 				; successful.
.966a	20 15 88	jsr $8815			jsr 	EncodeNumber 				; send it to the number-builder
.966d	90 03		bcc $9672			bcc 	_VMCFail 					; if failed, give up.
.966f	18		clc				clc 								; next time round, countinue
.9670	80 f3		bra $9665			bra 	_VMCNext
.9672					_VMCFail:
.9672	68		pla				pla
.9673					_VMCFail2:
.9673	7a		ply				ply
.9674	38		sec				sec
.9675	60		rts				rts
.9676					_VMCSuccess:
.9676	a9 00		lda #$00			lda 	#0 							; construct final
.9678	20 15 88	jsr $8815			jsr 	EncodeNumber
.967b	68		pla				pla
.967c	c9 2d		cmp #$2d			cmp 	#"-"
.967e	d0 03		bne $9683			bne 	_VMCNotNegative
.9680	20 b3 8c	jsr $8cb3			jsr		NSMNegate
.9683					_VMCNotNegative:
.9683	7a		ply				ply
.9684	18		clc				clc
.9685	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/chr.asm

.8ad9					ChrUnary:
.8ad9	fa		plx				plx 								; restore stack pos
.8ada	20 9f 8c	jsr $8c9f			jsr 	Evaluate8BitInteger			; get value
.8add	48		pha				pha
.8ade	20 04 92	jsr $9204			jsr 	CheckRightBracket
.8ae1	a9 01		lda #$01			lda 	#1 							; allocate space for one char
.8ae3	20 ec 97	jsr $97ec			jsr 	StringTempAllocate
.8ae6	68		pla				pla 								; write number to it
.8ae7	20 2a 98	jsr $982a			jsr 	StringTempWrite
.8aea	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/spc.asm

.8aeb					SpcUnary:
.8aeb	fa		plx				plx 								; restore stack pos
.8aec	20 9f 8c	jsr $8c9f			jsr 	Evaluate8BitInteger			; get value
.8aef	5a		phy				phy
.8af0	48		pha				pha 								; save count
.8af1	20 ec 97	jsr $97ec			jsr 	StringTempAllocate
.8af4	7a		ply				ply 								; to do count in Y
.8af5					_SpcLoop:
.8af5	c0 00		cpy #$00			cpy 	#0
.8af7	f0 08		beq $8b01			beq 	_SpcExit
.8af9	a9 20		lda #$20			lda 	#32
.8afb	20 2a 98	jsr $982a			jsr 	StringTempWrite
.8afe	88		dey				dey
.8aff	80 f4		bra $8af5			bra 	_SPCLoop
.8b01					_SpcExit:
.8b01	7a		ply				ply
.8b02	20 04 92	jsr $9204			jsr 	CheckRightBracket
.8b05	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/str.asm

.8b06					Unary_Str:
.8b06	fa		plx				plx
.8b07	20 5b 8c	jsr $8c5b			jsr 	EvaluateNumber  			; get number
.8b0a	20 04 92	jsr $9204			jsr 	CheckRightBracket 			; closing bracket
.8b0d	a9 05		lda #$05			lda 	#5 							; maximum decimals, from Basic816
.8b0f	20 28 8b	jsr $8b28			jsr 	ConvertNumberToString 		; do the conversion.
.8b12	a9 21		lda #$21			lda		#33 						; create buffer
.8b14	20 ec 97	jsr $97ec			jsr 	StringTempAllocate 			; allocate memory
.8b17	da		phx				phx
.8b18	a2 00		ldx #$00			ldx 	#0
.8b1a					_USCopy:
.8b1a	bd 88 08	lda $0888,x			lda 	DecimalBuffer,x
.8b1d	20 2a 98	jsr $982a			jsr 	StringTempWrite
.8b20	e8		inx				inx
.8b21	bd 88 08	lda $0888,x			lda 	DecimalBuffer,x
.8b24	d0 f4		bne $8b1a			bne 	_USCopy
.8b26	fa		plx				plx
.8b27	60		rts				rts
.8b28					ConvertNumberToString:
.8b28	5a		phy				phy 								; save code position
.8b29	8d 13 07	sta $0713			sta 	DecimalPlaces	 			; save number of DPs.
.8b2c	9c 14 07	stz $0714			stz 	dbOffset 					; offset into decimal buffer = start.
.8b2f	bd 00 06	lda $0600,x			lda 	NSStatus,x  				; is it -ve.
.8b32	10 0a		bpl $8b3e			bpl 	_CNTSNotNegative
.8b34	29 7f		and #$7f			and 	#$7F 						; make +ve
.8b36	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8b39	a9 2d		lda #$2d			lda 	#"-"
.8b3b	20 a4 8b	jsr $8ba4			jsr 	WriteDecimalBuffer
.8b3e					_CNTSNotNegative:
.8b3e	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if decimal
.8b41	f0 15		beq $8b58			beq 	_CNTSNotFloat
.8b43	e8		inx				inx 								; round up
.8b44	a9 01		lda #$01			lda 	#1
.8b46	20 09 8d	jsr $8d09			jsr 	NSMSetByte
.8b49	ca		dex				dex
.8b4a	bd 28 06	lda $0628,x			lda		NSExponent,x
.8b4d	9d 29 06	sta $0629,x			sta 	NSExponent+1,x
.8b50	a9 08		lda #$08			lda 	#NSTFloat
.8b52	9d 01 06	sta $0601,x			sta 	NSStatus+1,x
.8b55	20 cb 93	jsr $93cb			jsr 	FloatAdd
.8b58					_CNTSNotFloat:
.8b58	20 86 8b	jsr $8b86			jsr 	MakePlusTwoString
.8b5b	20 a9 94	jsr $94a9			jsr 	FloatFractionalPart 		; get the fractional part
.8b5e	20 6d 95	jsr $956d			jsr 	NSNormalise					; normalise , exit if zero
.8b61	f0 21		beq $8b84			beq 	_CNTSExit
.8b63	a9 2e		lda #$2e			lda 	#"."
.8b65	20 a4 8b	jsr $8ba4			jsr 	WriteDecimalBuffer 			; write decimal place
.8b68					_CNTSDecimal:
.8b68	ce 13 07	dec $0713			dec 	DecimalPlaces 				; done all the decimals
.8b6b	30 17		bmi $8b84			bmi 	_CNTSExit
.8b6d	e8		inx				inx 								; x 10.0
.8b6e	a9 0a		lda #$0a			lda 	#10
.8b70	20 09 8d	jsr $8d09			jsr 	NSMSetByte
.8b73	a9 08		lda #$08			lda 	#NSTFloat
.8b75	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8b78	ca		dex				dex
.8b79	20 36 95	jsr $9536			jsr 	FloatMultiply
.8b7c	20 86 8b	jsr $8b86			jsr 	MakePlusTwoString
.8b7f	20 a9 94	jsr $94a9			jsr 	FloatFractionalPart 		; get the fractional part
.8b82	80 e4		bra $8b68			bra 	_CNTSDecimal 				; keep going.
.8b84					_CNTSExit:
.8b84	7a		ply				ply
.8b85	60		rts				rts
.8b86					MakePlusTwoString:
.8b86	da		phx				phx
.8b87	20 de 8c	jsr $8cde			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.8b8a	e8		inx				inx 								; access it
.8b8b	e8		inx				inx
.8b8c	20 0c 95	jsr $950c			jsr 	FloatIntegerPart 			; make it an integer
.8b8f	a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.8b91	20 75 93	jsr $9375			jsr 	ConvertInt32
.8b94	a2 00		ldx #$00			ldx	 	#0
.8b96					_MPTSCopy:
.8b96	bd 66 08	lda $0866,x			lda 	NumberBuffer,x
.8b99	20 a4 8b	jsr $8ba4			jsr 	WriteDecimalBuffer
.8b9c	e8		inx				inx
.8b9d	bd 66 08	lda $0866,x			lda 	NumberBuffer,x
.8ba0	d0 f4		bne $8b96			bne 	_MPTSCopy
.8ba2	fa		plx				plx
.8ba3	60		rts				rts
.8ba4					WriteDecimalBuffer:
.8ba4	da		phx				phx
.8ba5	ae 14 07	ldx $0714			ldx 	dbOffset
.8ba8	9d 88 08	sta $0888,x			sta 	DecimalBuffer,x
.8bab	9e 89 08	stz $0889,x			stz 	DecimalBuffer+1,x
.8bae	ee 14 07	inc $0714			inc 	dbOffset
.8bb1	fa		plx				plx
.8bb2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/substring.asm

.8bb3					Unary_Left:
.8bb3	fa		plx				plx
.8bb4	18		clc				clc 								; only one parameter
.8bb5	20 2a 8c	jsr $8c2a			jsr 	SubstringInitial 			; set up.
.8bb8	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; Param #1 is the length
.8bbb	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.8bbe	9e 09 06	stz $0609,x			stz 	NSMantissa0+1,x 			; Start is zero.
.8bc1	80 2c		bra $8bef			bra 	SubstringMain
.8bc3					Unary_Right:
.8bc3	fa		plx				plx
.8bc4	18		clc				clc 								; only one parameter
.8bc5	20 2a 8c	jsr $8c2a			jsr 	SubstringInitial 			; set up.
.8bc8	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; length => param 2
.8bcb	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.8bce	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; total length
.8bd1	fd 09 06	sbc $0609,x			sbc 	NSMantissa0+1,x 			; length - required.
.8bd4	b0 02		bcs $8bd8			bcs 	_URNotUnderflow
.8bd6	a9 00		lda #$00			lda 	#0 							; start from the beginning, as something like right$("AB",3)
.8bd8					_URNotUnderFlow:
.8bd8	9d 09 06	sta $0609,x			sta 	NSMantissa0+1,x 			; this is the start position
.8bdb	80 12		bra $8bef			bra 	SubStringMain
.8bdd					Unary_Mid:
.8bdd	fa		plx				plx
.8bde	38		sec				sec 								; two parameters
.8bdf	20 2a 8c	jsr $8c2a			jsr 	SubstringInitial 			; set up.
.8be2	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; first parameter is zero ?
.8be5	f0 05		beq $8bec			beq 	_UMError
.8be7	de 09 06	dec $0609,x			dec 	NSMantissa0+1,x				; reduce initial offset by 1 as MID$(a$,1..) is actually the first character
.8bea	80 03		bra $8bef			bra 	SubStringMain
.8bec					_UMError:
.8bec	4c cc 96	jmp $96cc			jmp 	ArgumentError
.8bef					SubStringMain:
.8bef	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; is the initial offset >= the length
.8bf2	dd 28 06	cmp $0628,x			cmp 	NSExponent,x
.8bf5	b0 2d		bcs $8c24			bcs 	_SSMNull 					; if so, return an empty string.
.8bf7	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; if copy count is zero
.8bfa	f0 28		beq $8c24			beq 	_SSMNull 					; return empty string.
.8bfc	18		clc				clc 								; add the offset +1 to the address and
.8bfd	bd 08 06	lda $0608,x			lda	 	NSMantissa0,x 				; put in zTemp
.8c00	7d 09 06	adc $0609,x			adc 	NSMantissa0+1,x
.8c03	85 36		sta $36				sta 	zTemp0
.8c05	bd 10 06	lda $0610,x			lda	 	NSMantissa1,x
.8c08	69 00		adc #$00			adc 	#0
.8c0a	85 37		sta $37				sta 	zTemp0+1
.8c0c					_SSMNoCarry:
.8c0c	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; characters required.
.8c0f	20 ec 97	jsr $97ec			jsr 	StringTempAllocate 			; allocate that many characters
.8c12	5a		phy				phy 								; save Y
.8c13	a0 00		ldy #$00			ldy 	#0 							; start copying in.
.8c15					_SSMCopy:
.8c15	b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next character
.8c17	f0 09		beq $8c22			beq 	_SSMEString 				; no more to copy
.8c19	20 2a 98	jsr $982a			jsr 	StringTempWrite 			; and write it out.
.8c1c	c8		iny				iny
.8c1d	de 0a 06	dec $060a,x			dec 	NSMantissa0+2,x
.8c20	d0 f3		bne $8c15			bne 	_SSMCopy
.8c22					_SSMEString:
.8c22	7a		ply				ply
.8c23					_SSMExit:
.8c23	60		rts				rts
.8c24					_SSMNull:
.8c24	a9 00		lda #$00			lda 	#0
.8c26	20 ec 97	jsr $97ec			jsr 	StringTempAllocate
.8c29	60		rts				rts
.8c2a					SubstringInitial:
.8c2a	da		phx				phx 								; save initial stack position
.8c2b	08		php				php 								; save carry on stack indicating 2 parameters
.8c2c	20 66 8c	jsr $8c66			jsr 	EvaluateString 				; get a string
.8c2f	5a		phy				phy 								; calculate length to exponent.
.8c30	a0 ff		ldy #$ff			ldy 	#$FF
.8c32					_SIFindLength:
.8c32	c8		iny				iny
.8c33	b1 36		lda ($36),y			lda 	(zTemp0),y
.8c35	d0 fb		bne $8c32			bne 	_SIFindLength
.8c37	98		tya				tya
.8c38	9d 28 06	sta $0628,x			sta 	NSExponent,x
.8c3b	7a		ply				ply
.8c3c	e8		inx				inx
.8c3d	20 0c 92	jsr $920c			jsr 	CheckComma 					; comma next
.8c40	20 9f 8c	jsr $8c9f			jsr 	Evaluate8BitInteger 		; get next parameter
.8c43	28		plp				plp 								; is it the last parameter ?
.8c44	90 07		bcc $8c4d			bcc 	_SSIExit 					; if so, exit.
.8c46	e8		inx				inx
.8c47	20 0c 92	jsr $920c			jsr 	CheckComma 					; comma next
.8c4a	20 9f 8c	jsr $8c9f			jsr 	Evaluate8BitInteger 		; get last parameter
.8c4d					_SSIExit:
.8c4d	fa		plx				plx
.8c4e	20 04 92	jsr $9204			jsr 	CheckRightBracket 			; check closing bracket
.8c51	60		rts				rts 								; exit

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/exprhelper.asm

.8c52					EvaluateValue:
.8c52	48		pha				pha
.8c53	20 61 86	jsr $8661			jsr		EvaluateExpression 			; expression
.8c56	20 77 87	jsr $8777			jsr 	Dereference					; derefernce it
.8c59	68		pla				pla
.8c5a	60		rts				rts
.8c5b					EvaluateNumber:
.8c5b	20 52 8c	jsr $8c52			jsr 	EvaluateValue 				; get a value
.8c5e	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if string.
.8c61	29 10		and #$10			and 	#NSBIsString
.8c63	d0 16		bne $8c7b			bne 	HelperTypeError
.8c65	60		rts				rts
.8c66					EvaluateString:
.8c66	20 52 8c	jsr $8c52			jsr 	EvaluateValue 				; get a value
.8c69	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if string.
.8c6c	29 10		and #$10			and 	#NSBIsString
.8c6e	f0 0b		beq $8c7b			beq 	HelperTypeError
.8c70					CopyAddressToTemp0:
.8c70	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy address -> zTemp0
.8c73	85 36		sta $36				sta 	zTemp0
.8c75	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8c78	85 37		sta $37				sta 	zTemp0+1
.8c7a	60		rts				rts
.8c7b					HelperTypeError:
.8c7b	4c c7 96	jmp $96c7			jmp 	TypeError
.8c7e					EvaluateInteger:
.8c7e	20 5b 8c	jsr $8c5b			jsr 	EvaluateNumber
.8c81	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check exponent is zero
.8c84	d0 0a		bne $8c90			bne 	HelperValueError 			; if not, it's a float.
.8c86	60		rts				rts
.8c87					EvaluateUnsignedInteger:
.8c87	20 7e 8c	jsr $8c7e			jsr 	EvaluateInteger 			; check integer is +ve
.8c8a	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8c8d	30 01		bmi $8c90			bmi 	HelperValueError
.8c8f	60		rts				rts
.8c90					HelperValueError:
.8c90	4c cc 96	jmp $96cc			jmp 	ArgumentError
.8c93					Evaluate16BitInteger:
.8c93	20 87 8c	jsr $8c87			jsr	 	EvaluateUnsignedInteger		; get integer
.8c96	bd 20 06	lda $0620,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.8c99	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.8c9c	d0 f2		bne $8c90			bne 	HelperValueError
.8c9e	60		rts				rts
.8c9f					Evaluate8BitInteger:
.8c9f	20 87 8c	jsr $8c87			jsr	 	EvaluateUnsignedInteger 	; get an integer
.8ca2	d0 ec		bne $8c90			bne 	HelperValueError
.8ca4	bd 20 06	lda $0620,x			lda 	NSMantissa3,x	 			; bytes 1, 2 & 3 must be zero
.8ca7	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.8caa	1d 10 06	ora $0610,x			ora 	NSMantissa1,x
.8cad	d0 e1		bne $8c90			bne 	HelperValueError
.8caf	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.8cb2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/utility.asm

.8cb3					NSMNegate:
.8cb3	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8cb6	49 80		eor #$80			eor 	#NSBIsNegative
.8cb8	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8cbb	60		rts				rts
.8cbc					NSMNegateMantissa:
.8cbc	38		sec				sec
.8cbd	a9 00		lda #$00			lda 	#0
.8cbf	fd 08 06	sbc $0608,x			sbc 	NSMantissa0,x
.8cc2	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8cc5	a9 00		lda #$00			lda 	#0
.8cc7	fd 10 06	sbc $0610,x			sbc 	NSMantissa1,x
.8cca	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8ccd	a9 00		lda #$00			lda 	#0
.8ccf	fd 18 06	sbc $0618,x			sbc 	NSMantissa2,x
.8cd2	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8cd5	a9 00		lda #$00			lda 	#0
.8cd7	fd 20 06	sbc $0620,x			sbc 	NSMantissa3,x
.8cda	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8cdd	60		rts				rts
.8cde					NSMShiftUpTwo:
.8cde	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.8ce1	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.8ce4	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8ce7	9d 12 06	sta $0612,x			sta 	NSMantissa1+2,x
.8cea	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.8ced	9d 1a 06	sta $061a,x			sta 	NSMantissa2+2,x
.8cf0	bd 20 06	lda $0620,x			lda 	NSMantissa3,x
.8cf3	9d 22 06	sta $0622,x			sta 	NSMantissa3+2,x
.8cf6	bd 28 06	lda $0628,x			lda 	NSExponent,x
.8cf9	9d 2a 06	sta $062a,x			sta 	NSExponent+2,x
.8cfc	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8cff	9d 02 06	sta $0602,x			sta 	NSStatus+2,x
.8d02	60		rts				rts
.8d03					NSMSetZeroMantissaOnly:
.8d03	a9 00		lda #$00			lda 	#0
.8d05	80 08		bra $8d0f			bra 	NSMSetMantissa
.8d07					NSMSetZero:
.8d07	a9 00		lda #$00			lda 	#0
.8d09					NSMSetByte:
.8d09	9e 28 06	stz $0628,x			stz 	NSExponent,x 				; zero exponent, as integer.
.8d0c	9e 00 06	stz $0600,x			stz 	NSStatus,x 					; status zero (integer)
.8d0f					NSMSetMantissa:
.8d0f	9d 08 06	sta $0608,x			sta 	NSMantissa0,x 				; mantissa
.8d12	9e 10 06	stz $0610,x			stz 	NSMantissa1,x
.8d15	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.8d18	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.8d1b	60		rts				rts
.8d1c					NSMShiftLeft:
.8d1c	18		clc				clc
.8d1d					NSMRotateLeft:
.8d1d	3e 08 06	rol $0608,x			rol 	NSMantissa0,x
.8d20	3e 10 06	rol $0610,x			rol		NSMantissa1,x
.8d23	3e 18 06	rol $0618,x			rol		NSMantissa2,x
.8d26	3e 20 06	rol $0620,x			rol		NSMantissa3,x
.8d29	60		rts				rts
.8d2a					NSMShiftRight:
.8d2a	5e 20 06	lsr $0620,x			lsr 	NSMantissa3,x
.8d2d	7e 18 06	ror $0618,x			ror		NSMantissa2,x
.8d30	7e 10 06	ror $0610,x			ror		NSMantissa1,x
.8d33	7e 08 06	ror $0608,x			ror		NSMantissa0,x
.8d36	60		rts				rts
.8d37					NSMIsZero:
.8d37	bd 20 06	lda $0620,x			lda 	NSMantissa3,x
.8d3a	1d 18 06	ora $0618,x			ora		NSMantissa2,x
.8d3d	1d 10 06	ora $0610,x			ora		NSMantissa1,x
.8d40	1d 08 06	ora $0608,x			ora		NSMantissa0,x
.8d43	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/constants.asm

.9686					DecimalScalarTable:
>9686	66 66 66 66				.dword $66666666 ; 0.1
>968a	de					.byte $de
>968b	1f 85 eb 51				.dword $51eb851f ; 0.01
>968f	db					.byte $db
>9690	4c 37 89 41				.dword $4189374c ; 0.001
>9694	d8					.byte $d8
>9695	ac 8b db 68				.dword $68db8bac ; 0.0001
>9699	d4					.byte $d4
>969a	24 d6 e2 53				.dword $53e2d624 ; 1e-05
>969e	d1					.byte $d1
>969f	83 de 1b 43				.dword $431bde83 ; 1e-06
>96a3	ce					.byte $ce
>96a4	6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>96a8	ca					.byte $ca
>96a9	89 3b e6 55				.dword $55e63b89 ; 1e-08
>96ad	c7					.byte $c7
>96ae	a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>96b2	c4					.byte $c4
>96b3	67 7f f3 6d				.dword $6df37f67 ; 1e-10
>96b7	c0					.byte $c0
>96b8	86 ff f5 57				.dword $57f5ff86 ; 1e-11
>96bc	bd					.byte $bd

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.asm

.96bd					SyntaxError:
.96bd	a9 02		lda #$02		lda	#2
.96bf	4c 5f 82	jmp $825f		jmp	ErrorHandler
.96c2					RangeError:
.96c2	a9 04		lda #$04		lda	#4
.96c4	4c 5f 82	jmp $825f		jmp	ErrorHandler
.96c7					TypeError:
.96c7	a9 05		lda #$05		lda	#5
.96c9	4c 5f 82	jmp $825f		jmp	ErrorHandler
.96cc					ArgumentError:
.96cc	a9 07		lda #$07		lda	#7
.96ce	4c 5f 82	jmp $825f		jmp	ErrorHandler
.96d1					NotDoneError:
.96d1	a9 0c		lda #$0c		lda	#12
.96d3	4c 5f 82	jmp $825f		jmp	ErrorHandler
.96d6					ErrorText:
>96d6	42 72 65 61 6b 00			.text	"Break",0
>96dc	53 79 6e 74 61 78 20 65			.text	"Syntax error",0
>96e4	72 72 6f 72 00
>96e9	44 69 76 69 73 69 6f 6e			.text	"Division by zero",0
>96f1	20 62 79 20 7a 65 72 6f 00
>96fa	4f 75 74 20 6f 66 20 52			.text	"Out of Range",0
>9702	61 6e 67 65 00
>9707	54 79 70 65 20 6d 69 73			.text	"Type mismatch",0
>970f	6d 61 74 63 68 00
>9715	4f 75 74 20 6f 66 20 6d			.text	"Out of memory",0
>971d	65 6d 6f 72 79 00
>9723	49 6c 6c 65 67 61 6c 20			.text	"Illegal argument",0
>972b	61 72 67 75 6d 65 6e 74 00
>9734	53 74 6f 70 00				.text	"Stop",0
>9739	53 74 72 69 6e 67 20 74			.text	"String too long",0
>9741	6f 6f 20 6c 6f 6e 67 00
>9749	41 73 73 65 72 74 69 6f			.text	"Assertion failed",0
>9751	6e 20 66 61 69 6c 65 64 00
>975a	4f 75 74 20 6f 66 20 64			.text	"Out of data",0
>9762	61 74 61 00
>9766	55 6e 69 6d 70 6c 65 6d			.text	"Unimplemented",0
>976e	65 6e 74 65 64 00

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/concrete.asm

.9774					StringConcrete:
.9774	5a		phy				phy 								; save position on stack
.9775	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy target string to zTemp1
.9778	85 38		sta $38				sta 	zTemp1
.977a	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.977d	85 39		sta $39				sta 	zTemp1+1
.977f	a0 ff		ldy #$ff			ldy 	#$FF	 					; calculate string length
.9781					_SALength:
.9781	c8		iny				iny
.9782	b1 38		lda ($38),y			lda 	(zTemp1),y
.9784	d0 fb		bne $9781			bne 	_SALength
.9786	c0 fd		cpy #$fd			cpy 	#253 						; string too long
.9788	b0 3c		bcs $97c6			bcs 	_SALengthError
.978a	98		tya				tya 				 				; length of the new string
.978b	18		clc				clc
.978c	69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.978e	90 02		bcc $9792			bcc 	_SAHaveLength
.9790	a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.9792					_SAHaveLength:
.9792	48		pha				pha 								; save length.
.9793	38		sec				sec
.9794	49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.9796	6d 0e 07	adc $070e			adc 	StringMemory
.9799	8d 0e 07	sta $070e			sta 	StringMemory
.979c	85 3a		sta $3a				sta 	zTemp2 						; update storage address
.979e	9d 08 06	sta $0608,x			sta 	NSMantissa0,x 				; update mantissa address
.97a1	a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.97a3	6d 0f 07	adc $070f			adc 	StringMemory+1
.97a6	8d 0f 07	sta $070f			sta 	StringMemory+1
.97a9	85 3b		sta $3b				sta 	zTemp2+1
.97ab	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.97ae	68		pla				pla 								; save length in first byte
.97af	92 3a		sta ($3a)			sta 	(zTemp2)
.97b1	a9 00		lda #$00			lda 	#0 							; clear the status byte.
.97b3	a0 01		ldy #$01			ldy 	#1
.97b5	91 3a		sta ($3a),y			sta 	(zTemp2),y
.97b7					_SACopyNewString:
.97b7	a0 00		ldy #$00			ldy 	#0
.97b9					_SACopyNSLoop:
.97b9	b1 38		lda ($38),y			lda 	(zTemp1),y 					; get character
.97bb	c8		iny				iny 								; write two on in string storage
.97bc	c8		iny				iny
.97bd	91 3a		sta ($3a),y			sta 	(zTemp2),y
.97bf	88		dey				dey 								; this makes it one one.
.97c0	c9 00		cmp #$00			cmp 	#0 							; until EOS copied
.97c2	d0 f5		bne $97b9			bne 	_SACopyNSLoop
.97c4	7a		ply				ply
.97c5	60		rts				rts
.97c6					_SALengthError:
.97c6	a9 09		lda #$09		lda	#9
.97c8	4c 5f 82	jmp $825f		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/stringalloc.asm

.97cb					StringSystemInitialise:
.97cb	a9 ff		lda #$ff			lda 	#((EndVariableSpace-1) & $FF)
.97cd	8d 0e 07	sta $070e			sta 	0+StringMemory
.97d0	a9 1f		lda #$1f			lda 	#((EndVariableSpace-1) >> 8)
.97d2	8d 0f 07	sta $070f			sta 	1+StringMemory
.97d5	9c ff 1f	stz $1fff			stz 	EndVariableSpace-1 			; put a zero at the end, so know end of string memory.
.97d8	60		rts				rts
.97d9					StringSpaceInitialise:
.97d9	a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.97db	8d 10 07	sta $0710			sta 	StringInitialised
.97de	ad 0e 07	lda $070e			lda 	StringMemory 				; allocate 256 bytes for one concreted string
.97e1	8d 11 07	sta $0711			sta 	StringTempPointer
.97e4	ad 0f 07	lda $070f			lda 	StringMemory+1
.97e7	3a		dec a				dec 	a
.97e8	8d 12 07	sta $0712			sta 	StringTempPointer+1
.97eb	60		rts				rts
.97ec					StringTempAllocate:
.97ec	c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.97ee	b0 35		bcs $9825			bcs 	_STALength
.97f0	2c 10 07	bit $0710			bit 	StringInitialised 			; already initialised
.97f3	30 05		bmi $97fa			bmi 	_STAAllocate
.97f5	48		pha				pha 								; save value to subtract.
.97f6	20 d9 97	jsr $97d9			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.97f9	68		pla				pla 								; restore it
.97fa					_STAAllocate:
.97fa	49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.97fc	18		clc				clc  								; deliberate allows one more
.97fd	6d 11 07	adc $0711			adc 	StringTempPointer 			; subtract from temp pointer
.9800	8d 11 07	sta $0711			sta 	StringTempPointer
.9803	9d 08 06	sta $0608,x			sta 	NSMantissa0,x 				; address in mantissa
.9806	85 3c		sta $3c				sta 	zsTemp 						; and zsTemp
.9808	ad 12 07	lda $0712			lda 	StringTempPointer+1
.980b	69 ff		adc #$ff			adc 	#$FF
.980d	8d 12 07	sta $0712			sta 	StringTempPointer+1
.9810	85 3d		sta $3d				sta 	zsTemp+1
.9812	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9815	9e 18 06	stz $0618,x			stz 	NSMantissa2,x 				; set the typing data
.9818	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.981b	a9 10		lda #$10			lda 	#NSTString
.981d	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9820	a9 00		lda #$00			lda 	#0 							; clear the target string
.9822	92 3c		sta ($3c)			sta 	(zsTemp)
.9824	60		rts				rts
.9825					_STALength:
.9825	a9 09		lda #$09		lda	#9
.9827	4c 5f 82	jmp $825f		jmp	ErrorHandler
.982a					StringTempWrite:
.982a	48		pha				pha
.982b	92 3c		sta ($3c)			sta 	(zsTemp)
.982d	e6 3c		inc $3c				inc 	zsTemp
.982f	d0 02		bne $9833			bne 	_STWNoCarry
.9831	e6 3d		inc $3d				inc 	zsTemp+1
.9833					_STWNoCarry:
.9833	a9 00		lda #$00			lda 	#0
.9835	92 3c		sta ($3c)			sta 	(zsTemp)
.9837	68		pla				pla
.9838	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/backload.asm

.8d44					BackloadProgram:
.8d44	a2 ff		ldx #$ff			ldx 	#$FF
.8d46	8e fa ff	stx $fffa			stx 	$FFFA 						; fast mode
.8d49	20 70 8d	jsr $8d70			jsr 	BLReadByte
.8d4c	30 1e		bmi $8d6c			bmi 	_BPExit
.8d4e					_BPCopy:
.8d4e	e8		inx				inx  								; copy byte in
.8d4f	9d 15 08	sta $0815,x			sta 	lineBuffer,x
.8d52	9e 16 08	stz $0816,x			stz 	lineBuffer+1,x
.8d55	20 70 8d	jsr $8d70			jsr 	BLReadByte 					; read next byte
.8d58	30 0a		bmi $8d64			bmi 	_BPEndLine 					; -ve = EOL
.8d5a	c9 09		cmp #$09			cmp 	#9 							; handle TAB
.8d5c	d0 02		bne $8d60			bne 	_BPNotTab
.8d5e	a9 20		lda #$20			lda 	#' '
.8d60					_BPNotTab:
.8d60	c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.8d62	b0 ea		bcs $8d4e			bcs 	_BPCopy
.8d64					_BPEndLine:
.8d64	20 2c 8f	jsr $8f2c			jsr 	TokeniseLine 				; tokenise the line.
.8d67	20 be 91	jsr $91be			jsr 	MemoryAppend 				; append to current program
.8d6a	80 d8		bra $8d44			bra 	BackloadProgram
.8d6c					_BPExit:
.8d6c	20 28 81	jsr $8128			jsr 	ClearCommand 				; clear variables etc.
.8d6f	60		rts				rts
.8d70					BLReadByte:
.8d70					_BLLoad:
.8d70	ad 00 30	lda $3000			lda 	$3000 						; hardcoded in the makefile.
.8d73	ee 71 8d	inc $8d71			inc 	_BLLoad+1
.8d76	d0 03		bne $8d7b			bne 	_BLNoCarry
.8d78	ee 72 8d	inc $8d72			inc 	_BLLoad+2
.8d7b					_BLNoCarry:
.8d7b	c9 00		cmp #$00			cmp 	#0
.8d7d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/searchtokens.asm

.8d7e					TokeniseSearchTable:
.8d7e	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token.
.8d80	85 36		sta $36				sta 	zTemp0
.8d82	a0 00		ldy #$00			ldy 	#0
.8d84	a9 80		lda #$80			lda 	#$80 						; token #
.8d86	85 38		sta $38				sta 	zTemp1
.8d88					_TSTLoop:
.8d88	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.8d8a	30 49		bmi $8dd5			bmi 	_TSTFail 					; -ve = end of table
.8d8c	f0 2e		beq $8dbc			beq 	_TSTNext 					; zero, check next it's a dummy
.8d8e	c8		iny				iny 								; get the hash
.8d8f	b1 36		lda ($36),y			lda 	(zTemp0),y
.8d91	88		dey				dey
.8d92	cd 03 07	cmp $0703			cmp 	identHash 					; check they match, if not go to next
.8d95	d0 25		bne $8dbc			bne 	_TSTNext
.8d97	ad 02 07	lda $0702			lda 	identTypeEnd 				; length of identifier
.8d9a	38		sec				sec
.8d9b	ed 00 07	sbc $0700			sbc 	identStart
.8d9e	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; no match, then return.
.8da0	d0 1a		bne $8dbc			bne 	_TSTNext
.8da2	5a		phy				phy 								; save Y , we might fail
.8da3	c8		iny				iny 								; point to text
.8da4	c8		iny				iny
.8da5	ae 00 07	ldx $0700			ldx 	identStart 					; offset in line buffer in X
.8da8					_TSTCompareName:
.8da8	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; compare text.
.8dab	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.8dad	d0 0c		bne $8dbb			bne 	_TSTNextPullY 				; fail, pullY and do next
.8daf	e8		inx				inx
.8db0	c8		iny				iny
.8db1	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; complete match.
.8db4	d0 f2		bne $8da8			bne 	_TSTCompareName
.8db6	7a		ply				ply 								; throw Y
.8db7	a5 38		lda $38				lda 	zTemp1 						; get token #
.8db9	38		sec				sec 								; return with CS = passed.
.8dba	60		rts				rts
.8dbb					_TSTNextPullY:
.8dbb	7a		ply				ply 								; restore current, fall through.
.8dbc					_TSTNext:
.8dbc	e6 38		inc $38				inc 	zTemp1 						; token counter
.8dbe	98		tya				tya
.8dbf	18		clc				clc
.8dc0	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.8dc2	1a		inc a				inc 	a 							; +1
.8dc3	1a		inc a				inc 	a 							; +2
.8dc4	a8		tay				tay
.8dc5	10 c1		bpl $8d88			bpl 	_TSTLoop 					; if Y < $80 loop back
.8dc7	98		tya				tya 								; add Y to zTemp0 and reset Y
.8dc8	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.8dca	18		clc				clc  								; but have tables > 255 bytes
.8dcb	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.8dcd	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.8dcf	90 b7		bcc $8d88			bcc 	_TSTLoop
.8dd1	e6 37		inc $37				inc 	zTemp0+1
.8dd3	80 b3		bra $8d88			bra 	_TSTLoop
.8dd5					_TSTFail:
.8dd5	18		clc				clc
.8dd6	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/tokenise.asm


;******  Processing file: ./common/tokeniser/../generated/kwdtext.dat

.8dd7					KeywordSet0:
>8dd7	00 65					.text	0,$65,""               ; $80 !0:EOF
>8dd9	00 58					.text	0,$58,""               ; $81 !1:SH1
>8ddb	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>8ddd	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $83 ABS(
>8de3	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $84 ALLOC(
>8deb	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $85 ASC(
>8df1	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $86 CHR$(
>8df8	05 6b 46 41 4c 53 45			.text	5,$6b,"FALSE"          ; $87 FALSE
>8dff	05 44 46 52 41 43 28			.text	5,$44,"FRAC("          ; $88 FRAC(
>8e06	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $89 INT(
>8e0c	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $8a ISVAL(
>8e14	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $8b LEFT$(
>8e1c	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $8c LEN(
>8e22	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $8d MID$(
>8e29	04 19 4e 4f 54 28			.text	4,$19,"NOT("           ; $8e NOT(
>8e2f	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $8f RIGHT$(
>8e37	28
>8e38	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $90 RND(
>8e3e	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $91 SGN(
>8e44	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $92 SPC(
>8e4a	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $93 STR$(
>8e51	04 40 54 52 55 45			.text	4,$40,"TRUE"           ; $94 TRUE
>8e57	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $95 VAL(
>8e5d	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $96 FOR
>8e62	02 8f 49 46				.text	2,$8f,"IF"             ; $97 IF
>8e66	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $98 PROC
>8e6c	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $99 REPEAT
>8e74	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $9a WHILE
>8e7b	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $9b ENDIF
>8e82	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $9c ENDPROC
>8e8a	43
>8e8b	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $9d NEXT
>8e91	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $9e UNTIL
>8e98	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $9f WEND
>8e9e	04 1c 43 41 4c 4c			.text	4,$1c,"CALL"           ; $a0 CALL
>8ea4	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $a1 CLS
>8ea9	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $a2 DATA
>8eaf	03 da 44 49 4d				.text	3,$da,"DIM"            ; $a3 DIM
>8eb4	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $a4 GOSUB
>8ebb	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $a5 GOTO
>8ec1	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $a6 LET
>8ec6	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $a7 PRINT
>8ecd	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $a8 READ
>8ed3	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $a9 REM
>8ed8	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $aa RETURN
>8ee0	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $ab THEN
>8ee6	02 a3 54 4f				.text	2,$a3,"TO"             ; $ac TO
>8eea	ff					.text	$FF
.8eeb					KeywordSet1:
>8eeb	00 65					.text	0,$65,""               ; $80 !0:EOF
>8eed	00 58					.text	0,$58,""               ; $81 !1:SH1
>8eef	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>8ef1	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $83 ASSERT
>8ef9	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $84 CLEAR
>8f00	03 d7 45 4e 44				.text	3,$d7,"END"            ; $85 END
>8f05	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $86 LIST
>8f0b	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $87 NEW
>8f10	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $88 RESTORE
>8f18	45
>8f19	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $89 RUN
>8f1e	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $8a STOP
>8f24	ff					.text	$FF
.8f25					KeywordSet2:
>8f25	00 65					.text	0,$65,""               ; $80 !0:EOF
>8f27	00 58					.text	0,$58,""               ; $81 !1:SH1
>8f29	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>8f2b	ff					.text	$FF

;******  Return to file: ./common/tokeniser/tokenise.asm

.8f2c					TokeniseLine:
.8f2c	20 b4 90	jsr $90b4			jsr 	FixLineBufferCase 			; fix line case
.8f2f	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.8f31	8d 15 07	sta $0715			sta 	tokenOffset
.8f34	9c 16 07	stz $0716			stz 	tokenLineNumber
.8f37	9c 17 07	stz $0717			stz 	tokenLineNumber+1
.8f3a	a2 ff		ldx #$ff			ldx 	#$FF
.8f3c					_TKFindFirst:
.8f3c	e8		inx				inx
.8f3d	bd 15 08	lda $0815,x			lda 	lineBuffer,x
.8f40	f0 79		beq $8fbb			beq 	_TKExit
.8f42	c9 20		cmp #$20			cmp 	#' '
.8f44	90 f6		bcc $8f3c			bcc 	_TKFindFirst
.8f46	c9 30		cmp #$30			cmp 	#'0'
.8f48	90 07		bcc $8f51			bcc 	_TKNoLineNumber
.8f4a	c9 3a		cmp #$3a			cmp 	#'9'+1
.8f4c	b0 03		bcs $8f51			bcs 	_TKNoLineNumber
.8f4e	20 de 90	jsr $90de			jsr 	TokeniseExtractLineNumber
.8f51					_TKNoLineNumber:
.8f51					_TKTokeniseLoop:
.8f51	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.8f54	f0 65		beq $8fbb			beq 	_TKExit
.8f56	e8		inx				inx
.8f57	c9 20		cmp #$20			cmp 	#' '
.8f59	f0 f6		beq $8f51			beq 	_TKTokeniseLoop 			; keep looping if space found.
.8f5b	ca		dex				dex 								; undo last get, A contains character, X is position.
.8f5c	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.8f5e	f0 61		beq $8fc1			beq 	_TKTokeniseIdentifier
.8f60	c9 41		cmp #$41			cmp 	#'A'
.8f62	90 04		bcc $8f68			bcc 	_TKTokenisePunctuation
.8f64	c9 5b		cmp #$5b			cmp 	#'Z'+1
.8f66	90 59		bcc $8fc1			bcc 	_TKTokeniseIdentifier
.8f68					_TKTokenisePunctuation:
.8f68	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.8f6a	f0 27		beq $8f93			beq 	_TKString
.8f6c	c9 23		cmp #$23			cmp 	#'#'						; hexadecimal constant (# only appears at end of identifiers)
.8f6e	f0 28		beq $8f98			beq 	_TKHexConstant
.8f70	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers.
.8f72	f0 29		beq $8f9d			beq 	_TKCheckDouble
.8f74	c9 3e		cmp #$3e			cmp 	#'>'
.8f76	f0 25		beq $8f9d			beq 	_TKCheckDouble
.8f78					_TKStandardPunctuation:
.8f78	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; get it back.
.8f7b	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.8f7d	90 0e		bcc $8f8d			bcc 	_TKNoShift
.8f7f	48		pha				pha 								; save
.8f80	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.8f82	85 36		sta $36				sta 	zTemp0
.8f84	68		pla				pla
.8f85	29 20		and #$20			and 	#32 						; bit 5
.8f87	4a		lsr a				lsr 	a 							; shift into bit 3
.8f88	4a		lsr a				lsr 	a
.8f89	05 36		ora $36				ora 	zTemp0
.8f8b	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.8f8d					_TKNoShift:
.8f8d	20 23 91	jsr $9123			jsr 	TokeniseWriteByte 			; write the punctuation character
.8f90	e8		inx				inx 								; consume the character
.8f91	80 be		bra $8f51			bra 	_TKTokeniseLoop 			; and loop round again.
.8f93					_TKString:
.8f93	20 43 90	jsr $9043			jsr 	TokeniseString
.8f96	80 b9		bra $8f51			bra 	_TKTokeniseLoop
.8f98					_TKHexConstant:
.8f98	20 7e 90	jsr $907e			jsr 	TokeniseHexConstant
.8f9b	80 b4		bra $8f51			bra 	_TKTokeniseLoop
.8f9d					_TKCheckDouble:
.8f9d	bd 16 08	lda $0816,x			lda 	lineBuffer+1,x 				; get next character
.8fa0	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.8fa2	90 d4		bcc $8f78			bcc 	_TKStandardPunctuation
.8fa4	c9 3f		cmp #$3f			cmp 	#'>'+1
.8fa6	b0 d0		bcs $8f78			bcs 	_TKStandardPunctuation
.8fa8	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.8fab	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.8fad	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.8fae	7d 16 08	adc $0816,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.8fb1	38		sec				sec
.8fb2	e9 3c		sbc #$3c			sbc 	#'<'
.8fb4	20 23 91	jsr $9123			jsr 	TokeniseWriteByte 			; this is in the range 0-7
.8fb7	e8		inx				inx 								; consume both
.8fb8	e8		inx				inx
.8fb9	80 96		bra $8f51			bra 	_TKTokeniseLoop
.8fbb	a9 80		lda #$80	_TKExit:lda 	#KWC_EOL 					; write end of line byte
.8fbd	20 23 91	jsr $9123			jsr 	TokeniseWriteByte
.8fc0	60		rts				rts
.8fc1					_TKTokeniseIdentifier:
.8fc1	8e 00 07	stx $0700			stx 	identStart 					; save start
.8fc4	9c 04 07	stz $0704			stz 	identTypeByte 				; zero the type byte
.8fc7					_TKCheckLoop:
.8fc7	e8		inx				inx 								; look at next, we know first is identifier.
.8fc8	bd 15 08	lda $0815,x			lda  	lineBuffer,x
.8fcb	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.8fcd	f0 f8		beq $8fc7			beq 	_TKCheckLoop
.8fcf	c9 30		cmp #$30			cmp	 	#"0"
.8fd1	90 0c		bcc $8fdf			bcc 	_TKEndIdentifier
.8fd3	c9 3a		cmp #$3a			cmp 	#"9"+1
.8fd5	90 f0		bcc $8fc7			bcc 	_TKCheckLoop
.8fd7	c9 41		cmp #$41			cmp	 	#"A"
.8fd9	90 04		bcc $8fdf			bcc 	_TKEndIdentifier
.8fdb	c9 5b		cmp #$5b			cmp 	#"Z"+1
.8fdd	90 e8		bcc $8fc7			bcc 	_TKCheckLoop
.8fdf					_TKEndIdentifier:
.8fdf	8e 01 07	stx $0701			stx 	identTypeStart 				; save start of type text (if any !)
.8fe2	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.8fe4	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.8fe6	f0 06		beq $8fee			beq 	_TKHasTypeCharacter
.8fe8	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.8fea	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.8fec	d0 07		bne $8ff5			bne 	_TKNoTypeCharacter
.8fee					_TKHasTypeCharacter:
.8fee	8c 04 07	sty $0704			sty 	identTypeByte 				; has # or $, save the type
.8ff1	e8		inx				inx 								; read next
.8ff2	bd 15 08	lda $0815,x			lda 	lineBuffer,x
.8ff5					_TKNoTypeCharacter:
.8ff5	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.8ff7	d0 09		bne $9002			bne 	_TKNoArray
.8ff9	e8		inx				inx 								; skip the (
.8ffa	ad 04 07	lda $0704			lda 	identTypeByte 				; set bit 2 (e.g. array)
.8ffd	09 04		ora #$04			ora 	#$04
.8fff	8d 04 07	sta $0704			sta 	identTypeByte
.9002					_TKNoArray:
.9002	8e 02 07	stx $0702			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.9005	20 9f 90	jsr $909f			jsr 	TokeniseCalculateHash 		; calculate the has for those tokens
.9008	a0 8d		ldy #$8d			ldy 	#(KeywordSet0) >> 8
.900a	a9 d7		lda #$d7			lda 	#(KeywordSet0) & $FF
.900c	20 7e 8d	jsr $8d7e			jsr 	TokeniseSearchTable
.900f	a2 00		ldx #$00			ldx 	#0
.9011	b0 1f		bcs $9032			bcs 	_TKFoundToken
.9013	a0 8e		ldy #$8e			ldy 	#(KeywordSet1) >> 8
.9015	a9 eb		lda #$eb			lda 	#(KeywordSet1) & $FF
.9017	20 7e 8d	jsr $8d7e			jsr 	TokeniseSearchTable
.901a	a2 81		ldx #$81			ldx 	#$81
.901c	b0 14		bcs $9032			bcs 	_TKFoundToken
.901e	a0 8e		ldy #$8e			ldy 	#(KeywordSet1) >> 8
.9020	a9 eb		lda #$eb			lda 	#(KeywordSet1) & $FF
.9022	20 7e 8d	jsr $8d7e			jsr 	TokeniseSearchTable
.9025	a2 82		ldx #$82			ldx 	#$82
.9027	b0 09		bcs $9032			bcs 	_TKFoundToken
.9029	20 2f 91	jsr $912f			jsr 	CheckCreateVariableRecord 	; failed all, it's a variable, create record if does not exist.
.902c	ae 02 07	ldx $0702			ldx 	identTypeEnd 				; X points to following byte
.902f	4c 51 8f	jmp $8f51			jmp 	_TKTokeniseLoop 			; and go round again.
.9032					_TKFoundToken:
.9032	48		pha				pha 								; save token
.9033	8a		txa				txa 								; shift in X, is there one ?
.9034	f0 03		beq $9039			beq 	_TKNoTShift
.9036	20 23 91	jsr $9123			jsr 	TokeniseWriteByte 			; if so, write it out
.9039					_TKNoTShift:
.9039	68		pla				pla 								; restore and write token
.903a	20 23 91	jsr $9123			jsr 	TokeniseWriteByte
.903d	ae 02 07	ldx $0702			ldx 	identTypeEnd 				; X points to following byte
.9040	4c 51 8f	jmp $8f51			jmp 	_TKTokeniseLoop 			; and go round again.
.9043					TokeniseString:
.9043	a9 ff		lda #$ff			lda 	#KWC_STRING 				; string token.
.9045	20 23 91	jsr $9123			jsr 	TokeniseWriteByte
.9048	e8		inx				inx									; start of quoted string.
.9049	da		phx				phx 								; push start of string on top
.904a	ca		dex				dex
.904b					_TSFindEnd:
.904b	e8		inx				inx
.904c	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; next character
.904f	f0 04		beq $9055			beq 	_TSEndOfString
.9051	c9 22		cmp #$22			cmp 	#'"'
.9053	d0 f6		bne $904b			bne 	_TSFindEnd
.9055					_TSEndOfString:
.9055	7a		ply				ply  								; so now Y is first character, X is character after end.
.9056	48		pha				pha 								; save terminating character
.9057	20 5f 90	jsr $905f			jsr 	TOWriteBlockXY 				; write X to Y as a data block
.905a	68		pla				pla 								; terminating character
.905b	f0 01		beq $905e			beq 	_TSNotQuote					; if it wasn't EOS skip it
.905d	e8		inx				inx
.905e					_TSNotQuote:
.905e	60		rts				rts
.905f					TOWriteBlockXY:
.905f	86 36		stx $36				stx 	zTemp0 						; write end character
.9061	98		tya				tya
.9062	49 ff		eor #$ff			eor 	#$FF
.9064	38		sec				sec
.9065	65 36		adc $36				adc 	zTemp0
.9067	1a		inc a				inc 	a 							; one extra for NULL
.9068	20 23 91	jsr $9123			jsr 	TokeniseWriteByte
.906b					_TOBlockLoop:
.906b	c4 36		cpy $36				cpy 	zTemp0
.906d	f0 09		beq $9078			beq 	_TOBlockExit
.906f	b9 15 08	lda $0815,y			lda 	lineBuffer,y
.9072	20 23 91	jsr $9123			jsr 	TokeniseWriteByte
.9075	c8		iny				iny
.9076	80 f3		bra $906b			bra 	_TOBlockLoop
.9078					_TOBlockExit:
.9078	a9 00		lda #$00			lda 	#0
.907a	20 23 91	jsr $9123			jsr 	TokeniseWriteByte
.907d	60		rts				rts
.907e					TokeniseHexConstant:
.907e	a9 fe		lda #$fe			lda 	#KWC_HEXCONST 				; hex constant token.
.9080	20 23 91	jsr $9123			jsr 	TokeniseWriteByte
.9083	e8		inx				inx									; start of quoted string.
.9084	da		phx				phx 								; push start of constant on top
.9085	ca		dex				dex
.9086					_THFindLoop:
.9086	e8		inx				inx
.9087	bd 15 08	lda $0815,x			lda 	lineBuffer,x
.908a	c9 30		cmp #$30			cmp 	#"0"
.908c	90 0c		bcc $909a			bcc 	_THFoundEnd
.908e	c9 3a		cmp #$3a			cmp 	#"9"+1
.9090	90 f4		bcc $9086			bcc 	_THFindLoop
.9092	c9 41		cmp #$41			cmp 	#"A"
.9094	90 04		bcc $909a			bcc 	_THFoundEnd
.9096	c9 47		cmp #$47			cmp 	#"F"+1
.9098	90 ec		bcc $9086			bcc 	_THFindLoop
.909a					_THFoundEnd:
.909a	7a		ply				ply 								; restore start
.909b	20 5f 90	jsr $905f			jsr 	TOWriteBlockXY 				; output the block
.909e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/utility.asm

.909f					TokeniseCalculateHash:
.909f	da		phx				phx
.90a0	ae 00 07	ldx $0700			ldx 	identStart 					; needs to be same as in tokens.py - simple sum
.90a3	a9 00		lda #$00			lda 	#0
.90a5					_TCHLoop:
.90a5	18		clc				clc
.90a6	7d 15 08	adc $0815,x			adc 	lineBuffer,x
.90a9	e8		inx				inx
.90aa	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.90ad	d0 f6		bne $90a5			bne 	_TCHLoop
.90af	8d 03 07	sta $0703			sta 	identHash 					; save the hash
.90b2	fa		plx				plx
.90b3	60		rts				rts
.90b4					FixLineBufferCase:
.90b4	a2 00		ldx #$00			ldx 	#0
.90b6					_FLBCLoop:
.90b6	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; get next character
.90b9	f0 22		beq $90dd			beq 	_FLBCExit 					; end of string.
.90bb	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.90bd	f0 11		beq $90d0			beq 	_FLBCInQuotes
.90bf	e8		inx				inx
.90c0	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.90c2	90 f2		bcc $90b6			bcc 	_FLBCLoop
.90c4	c9 7b		cmp #$7b			cmp 	#'z'+1
.90c6	b0 ee		bcs $90b6			bcs 	_FLBCLoop
.90c8	38		sec				sec 								; make U/C
.90c9	e9 20		sbc #$20			sbc 	#32
.90cb	9d 14 08	sta $0814,x			sta	 	lineBuffer-1,x 				; write back
.90ce	80 e6		bra $90b6			bra 	_FLBCLoop
.90d0					_FLBCInQuotes:
.90d0	e8		inx				inx 								; advance
.90d1	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; get next
.90d4	f0 07		beq $90dd			beq 	_FLBCExit 					; exit on EOS
.90d6	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.90d8	d0 f6		bne $90d0			bne 	_FLBCInQuotes
.90da	e8		inx				inx 								; skip over it
.90db	80 d9		bra $90b6			bra 	_FLBCLoop
.90dd					_FLBCExit:
.90dd	60		rts				rts
.90de					TokeniseExtractLineNumber:
.90de	ad 17 07	lda $0717			lda 	tokenLineNumber+1 			; push current value on stack
.90e1	48		pha				pha
.90e2	ad 16 07	lda $0716			lda 	tokenLineNumber
.90e5	48		pha				pha
.90e6	20 1c 91	jsr $911c			jsr 	_TELNTimes2 				; line # x 4
.90e9	20 1c 91	jsr $911c			jsr 	_TELNTimes2 				; line # x 2
.90ec	18		clc				clc 								; add stacked value
.90ed	68		pla				pla
.90ee	6d 16 07	adc $0716			adc 	tokenLineNumber
.90f1	8d 16 07	sta $0716			sta 	tokenLineNumber
.90f4	68		pla				pla
.90f5	6d 17 07	adc $0717			adc 	tokenLineNumber+1
.90f8	8d 17 07	sta $0717			sta 	tokenLineNumber+1 			; line # x 5
.90fb	20 1c 91	jsr $911c			jsr 	_TELNTimes2 				; line # x 10
.90fe	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; get and consume character
.9101	e8		inx				inx
.9102	29 0f		and #$0f			and 	#15 						; add to line #
.9104	18		clc				clc
.9105	6d 16 07	adc $0716			adc 	tokenLineNumber
.9108	8d 16 07	sta $0716			sta 	tokenLineNumber
.910b	90 03		bcc $9110			bcc 	_TLENNoCarry
.910d	ee 17 07	inc $0717			inc 	tokenLineNumber+1
.9110					_TLENNoCarry:
.9110	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; more digits ?
.9113	c9 30		cmp #$30			cmp 	#'0'
.9115	90 04		bcc $911b			bcc 	_TLENExit
.9117	c9 3a		cmp #$3a			cmp 	#'9'+1
.9119	90 c3		bcc $90de			bcc 	TokeniseExtractLineNumber
.911b					_TLENExit:
.911b	60		rts				rts
.911c					_TELNTimes2:
.911c	0e 16 07	asl $0716			asl 	tokenLineNumber
.911f	2e 17 07	rol $0717			rol 	tokenLineNumber+1
.9122	60		rts				rts
.9123					TokeniseWriteByte:
.9123	da		phx				phx
.9124	ae 15 07	ldx $0715			ldx 	tokenOffset 				; next slot to write to
.9127	9d 15 07	sta $0715,x			sta 	tokenOffset,x 				; write byte out
.912a	ee 15 07	inc $0715			inc 	tokenOffset 				; advance slot.
.912d	fa		plx				plx
.912e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/variablerecord.asm

.912f					CheckCreateVariableRecord:
.912f	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.9131	85 36		sta $36				sta 	0+zTemp0
.9133	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.9135	85 37		sta $37				sta 	1+zTemp0
.9137	20 02 92	jsr $9202			jsr 	VariableOpen 				; make variable space available
.913a					_CCVSearch:
.913a	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.913c	f0 2c		beq $916a			beq 	_CCVFail
.913e	a0 01		ldy #$01			ldy 	#1 							; read the hash
.9140	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.9142	cd 03 07	cmp $0703			cmp 	identHash
.9145	d0 16		bne $915d			bne 	_CCVNext
.9147	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.9149	ae 00 07	ldx $0700			ldx 	identStart
.914c					_CCVCompare:
.914c	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.914f	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.9151	e8		inx				inx 								; advance pointers
.9152	c8		iny				iny
.9153	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.9154	d0 07		bne $915d			bne 	_CCVNext  					; didn't match go to next.
.9156	90 f4		bcc $914c			bcc 	_CCVCompare 				; not finished yet.
.9158	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; matched whole thing ?
.915b	f0 41		beq $919e			beq 	_CCVFound 					; yes, we were successful
.915d					_CCVNext:
.915d	18		clc				clc
.915e	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.9160	65 36		adc $36				adc 	zTemp0
.9162	85 36		sta $36				sta 	zTemp0
.9164	90 d4		bcc $913a			bcc 	_CCVSearch
.9166	e6 37		inc $37				inc 	zTemp0+1
.9168	80 d0		bra $913a			bra 	_CCVSearch
.916a					_CCVFail:
.916a	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.916c	ad 03 07	lda $0703			lda 	identHash
.916f	91 36		sta ($36),y			sta 	(zTemp0),y
.9171	c8		iny				iny 								; offset 2 is the type byte
.9172	ad 04 07	lda $0704			lda 	identTypeByte
.9175	91 36		sta ($36),y			sta 	(zTemp0),y
.9177	c8		iny				iny
.9178					_CCVData:
.9178	a9 00		lda #$00			lda 	#0 							; erase data 3-7
.917a	91 36		sta ($36),y			sta 	(zTemp0),y
.917c	c8		iny				iny
.917d	c0 08		cpy #$08			cpy 	#8
.917f	90 f7		bcc $9178			bcc 	_CCVData
.9181	ae 00 07	ldx $0700			ldx 	identStart 					; copy name into 8 on.
.9184					_CCVCopyName:
.9184	bd 15 08	lda $0815,x			lda 	lineBuffer,x
.9187	91 36		sta ($36),y			sta 	(zTemp0),y
.9189	e8		inx				inx
.918a	c8		iny				iny
.918b	ec 02 07	cpx $0702			cpx 	identTypeEnd
.918e	d0 f4		bne $9184			bne 	_CCVCopyName
.9190	98		tya				tya 								; patch offset
.9191	92 36		sta ($36)			sta 	(zTemp0)
.9193	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.9195	91 36		sta ($36),y			sta 	(zTemp0),y
.9197	88		dey				dey
.9198	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.919a	09 80		ora #$80			ora 	#$80
.919c	91 36		sta ($36),y			sta 	(zTemp0),y
.919e					_CCVFound:
.919e	20 03 92	jsr $9203			jsr 	VariableClose 				; map out variables, perhaps.
.91a1	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.91a3	38		sec				sec
.91a4	e9 10		sbc #$10			sbc 	#(VariableSpace >> 8) 		; offset from the start
.91a6	09 40		ora #$40			ora 	#$40 						; make it a writeable token
.91a8	20 23 91	jsr $9123			jsr 	TokeniseWriteByte
.91ab	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.91ad	20 23 91	jsr $9123			jsr 	TokeniseWriteByte
.91b0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./variants/hardware/junior/memory.asm

.9839					MemoryPeek:
.9839	b2 36		lda ($36)			lda 	(zTemp0)
.983b	60		rts				rts
.983c					MemoryPoke:
.983c	92 36		sta ($36)			sta 	(zTemp0)
.983e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./variants/hardware/junior/vectors.asm

.983f					EXTPrintCharacter:
.983f	48		pha				pha
.9840	da		phx				phx
.9841	5a		phy				phy
.9842	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.9845	7a		ply				ply
.9846	fa		plx				plx
.9847	68		pla				pla
.9848	60		rts				rts
.9849					EXTInputSingleCharacter:
.9849	da		phx				phx
.984a	5a		phy				phy
.984b					_EISCWait:
.984b	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.984e	c9 00		cmp #$00			cmp 	#0
.9850	f0 f9		beq $984b			beq 	_EISCWait
.9852	7a		ply				ply
.9853	fa		plx				plx
.9854	60		rts				rts
.9855					EXTInputLine:
.9855	a2 00		ldx #$00			ldx 	#0 							; position in line <- start of line
.9857					_ILLoop:
.9857	da		phx				phx 								; read character in
.9858	20 cf ff	jsr $ffcf			jsr 	$FFCF
.985b	fa		plx				plx
.985c	c9 08		cmp #$08			cmp 	#8 							; backspace, CBM doesn't need this.
.985e	f0 12		beq $9872			beq 	_ILBackspace
.9860	c9 0d		cmp #$0d			cmp 	#13							; exit ?
.9862	f0 15		beq $9879			beq 	_ILExit
.9864	c9 20		cmp #$20			cmp 	#32 						; ignore other control
.9866	90 ef		bcc $9857			bcc 	_ILLoop
.9868	e0 50		cpx #$50			cpx 	#MaxLineSize 				; already full buffer
.986a	f0 eb		beq $9857			beq 	_ILLoop
.986c	9d 15 08	sta $0815,x			sta 	lineBuffer,x 				; save it
.986f	e8		inx				inx
.9870	80 e5		bra $9857			bra 	_ILLoop
.9872					_ILBackspace:
.9872	e0 00		cpx #$00			cpx 	#0  						; can't backspace, start of line.
.9874	f0 e1		beq $9857			beq 	_ILLoop
.9876	ca		dex				dex 								; back one.
.9877	80 de		bra $9857			bra 	_ILLoop
.9879					_ILExit:
.9879	20 3f 98	jsr $983f			jsr 	EXTPrintCharacter
.987c	9e 15 08	stz $0815,x			stz 	lineBuffer,x 				; make ASCIIZ and exit with address in XA
.987f	60		rts				rts
.9880					EXTBreakCheck:
.9880	4c e1 ff	jmp $ffe1			jmp		$FFE1

;******  Return to file: _basic.asm


;******  Processing file: ./variants/memory.flat/memory.asm

.91b1					MemoryNew:
.91b1	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.91b3	85 30		sta $30				sta 	codePtr
.91b5	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.91b7	85 31		sta $31				sta 	codePtr+1
.91b9	a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.91bb	92 30		sta ($30)			sta 	(codePtr)
.91bd	60		rts				rts
.91be					MemoryAppend:
.91be	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.91c0	85 30		sta $30				sta 	codePtr
.91c2	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.91c4	85 31		sta $31				sta 	codePtr+1
.91c6					_MAFindEnd:
.91c6	b2 30		lda ($30)			lda 	(codePtr)
.91c8	f0 0d		beq $91d7			beq 	_MAFoundEnd
.91ca	18		clc				clc
.91cb	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.91cd	65 30		adc $30				adc 	codePtr
.91cf	85 30		sta $30				sta 	codePtr
.91d1	90 02		bcc $91d5			bcc 	_CREExit
.91d3	e6 31		inc $31				inc 	codePtr+1
.91d5					_CREExit:
.91d5	80 ef		bra $91c6			bra 	_MAFindEnd
.91d7					_MAFoundEnd:
.91d7	ac 15 07	ldy $0715			ldy 	tokenOffset 				; bytes to copy
.91da	c0 04		cpy #$04			cpy 	#4 							; blank line
.91dc	f0 0e		beq $91ec			beq 	_MANoLine
.91de	a9 00		lda #$00			lda 	#0 							; end of program
.91e0	91 30		sta ($30),y			sta 	(codePtr),y
.91e2					_MACopy:
.91e2	88		dey				dey
.91e3	b9 15 07	lda $0715,y			lda 	tokenOffset,y
.91e6	91 30		sta ($30),y			sta 	(codePtr),y
.91e8	c0 00		cpy #$00			cpy 	#0
.91ea	d0 f6		bne $91e2			bne 	_MACopy
.91ec					_MANoLine:
.91ec	60		rts				rts
.91ed					MemoryInline:
.91ed	98		tya				tya 								; put address into stack,x
.91ee	18		clc				clc
.91ef	65 30		adc $30				adc 	codePtr
.91f1	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.91f4	a5 31		lda $31				lda 	codePtr+1
.91f6	69 00		adc #$00			adc 	#0
.91f8	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.91fb	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.91fe	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.9201	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./variants/memory.flat/variable.asm

.9202					VariableOpen:
.9202	60		rts				rts
.9203					VariableClose:
.9203	60		rts				rts

;******  Return to file: _basic.asm


;******  End of listing
