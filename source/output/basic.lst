
; 64tass Turbo Assembler Macro V1.57.2900 listing file
; 64tass -D AUTORUN=0 -q -b -Wall -c -L output/basic.lst -l output/basic.lbl -Wall -o basic.rom _basic.asm
; Thu Nov 17 15:07:06 2022

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=0					AUTORUN=0

;******  Processing input file: _basic.asm


;******  Processing file: ./common/aa.system/01common.inc

=$30					ZeroPageMandatory = $30
=$400					ZeroPagePreference = $400
=$480					MemoryStorage = $480
=$2000					BasicStart = $2000
=$8000					BasicEnd = $8000
=$8000					CodeStart = $8000
=$1000					VariableSpace = $1000
=$2000					EndVariableSpace = $2000
=8					MathStackSize = 8
=512					BasicStackSize = 512
=3584					BasicStackBase = $1000-BasicStackSize
=80					MaxLineSize = 80

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/04data.inc

.0030					codePtr:
>0030							.fill 	4
.0034					basicStack:
>0034							.fill 	2
.0036					zTemp0:
>0036							.fill 	2
.0038					zTemp1:
>0038							.fill 	2
.003a					zTemp2:
>003a							.fill 	2
.003c					zsTemp:
>003c							.fill 	2
.003e					zaTemp:
>003e							.fill 	2
=$30					safePtr = codePtr 							; minimise direct tinkering
=$80					NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20					NSBIsReference = $20 						; bit 5 : is a reference
=$10					NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18					NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03					NSBRefMask = $03 							; bits 0,1 : Bytes of reference, -1 (e.g. 00 = 1 byte, 11 = 4 bytes)
=$04					NSBIsArray = $04
=$00					NSTInteger = $00 							; base types for bits 3..4
=$08					NSTFloat = $08
=$10					NSTString = $10
=$18					NSTProcedure = $18
.0400					NSStatus:
>0400							.fill 	MathStackSize
.0408					NSMantissa0:
>0408							.fill 	MathStackSize 				; (this is my integer mantissa system)
.0410					NSMantissa1:
>0410							.fill 	MathStackSize
.0418					NSMantissa2:
>0418							.fill 	MathStackSize
.0420					NSMantissa3:
>0420							.fill 	MathStackSize
.0428					NSExponent:
>0428							.fill 	MathStackSize
.0480					identStart:
>0480							.fill 	1
.0481					identTypeStart:
>0481							.fill 	1
.0482					identTypeEnd:
>0482							.fill 	1
.0483					identHash:
>0483							.fill 	1
.0484					identTypeByte:
>0484							.fill 	1	 						; (see tokenising.pdf)
.0485					encodeState:
>0485							.fill 	1
.0486					digitTemp:
>0486							.fill 	1
.0487					decimalCount:
>0487							.fill 	1
.0488					randomSeed:
>0488							.fill 	4
.048c					lowMemPtr:
>048c							.fill 	2
.048e					stringMemory:
>048e							.fill 	2
.0490					stringInitialised:
>0490							.fill 	1
.0491					stringTempPointer:
>0491							.fill 	2
.0493					breakCheck:
>0493							.fill 	1
.0494					decimalPlaces:
>0494							.fill 	1
.0495					dbOffset:
>0495							.fill 	1
.0496					lastParameter:
>0496							.fill 	1
.0497					dataPointer:
>0497							.fill 	5
.049c					inDataStatement:
>049c							.fill 	1
.049d					tbOffset:
>049d							.fill 	1
.049e					AssemblerAddress:
>049e							.fill 	2
.04a0					AssemblerControl:
>04a0							.fill 	1
.04a1					ParamStart:
>04a1							.fill 	2
.04a3					IsGroup1:
>04a3							.fill 	1
.04a4					BaseOpcode:
>04a4							.fill 	1
.04a5					ModeMask:
>04a5							.fill 	1
.04a6					listIndent:
>04a6							.fill 	1
.04a7					tokenOffset:
>04a7							.fill 	1
.04a8					tokenLineNumber:
>04a8							.fill 	2
.04aa					tokenBuffer:
>04aa							.fill 	253
.05a7					lineBuffer:
>05a7							.fill 	MaxLineSize+1
.05f8					numberBuffer:
>05f8							.fill 	34
.061a					decimalBuffer:
>061a							.fill 	16

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/constants.inc

=$80					AM_ISZP = $80
=$40					AM_ISG1 = $40
=$20					AM_ISG2 = $20
=224					AM_IMMEDIATE = AM_ISZP+AM_ISG1+AM_ISG2+$00
=228					AM_ZEROPAGE = AM_ISZP+AM_ISG1+AM_ISG2+$04
=40					AM_ACC = AM_ISG2+$08
=108					AM_ABS = AM_ISG1+AM_ISG2+$0C
=208					AM_INDY = AM_ISZP+AM_ISG1+$10
=244					AM_ZEROX = AM_ISZP+AM_ISG1+AM_ISG2+$14
=120					AM_ABSY = AM_ISG1+AM_ISG2+$18
=124					AM_ABSX = AM_ISG1+AM_ISG2+$1C
=209					AM_IND = AM_ISZP+AM_ISG1+$11
=$80					AM_ZEROY = AM_ISZP
=$01					AM_INDABS = $01
=$02					AM_INDABSX = $02
=192					AM_INDX = AM_ISZP+AM_ISG1+$00

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/handlers.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.inc

=1					ERRID_BREAK = 1
=2					ERRID_SYNTAX = 2
=3					ERRID_DIVZERO = 3
=4					ERRID_RANGE = 4
=5					ERRID_TYPE = 5
=6					ERRID_MEMORY = 6
=7					ERRID_ARGUMENT = 7
=8					ERRID_STOP = 8
=9					ERRID_STRING = 9
=10					ERRID_ASSERT = 10
=11					ERRID_DATA = 11
=12					ERRID_NOTDONE = 12
=13					ERRID_LINE = 13
=14					ERRID_GOSUB = 14
=15					ERRID_REPEAT = 15
=16					ERRID_WHILE = 16
=17					ERRID_FOR = 17
=18					ERRID_STACK = 18
=19					ERRID_STRUCT = 19
=20					ERRID_PROC = 20
=21					ERRID_REDEFINE = 21
=22					ERRID_ARRAYSIZE = 22
=23					ERRID_ARRAYIDX = 23

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst.inc

=$00					KWD_LESSLESS                         = $00; $00 <<
=$01					KWD_LESSEQUAL                        = $01; $01 <=
=$02					KWD_LESSGREATER                      = $02; $02 <>
=$03					KWD_PLINGPLING3                      = $03; $03 !!3
=$04					KWD_GREATERLESS                      = $04; $04 ><
=$05					KWD_GREATEREQUAL                     = $05; $05 >=
=$06					KWD_GREATERGREATER                   = $06; $06 >>
=$07					KWD_PLINGPLING7                      = $07; $07 !!7
=$08					KWD_PLINGPLING8                      = $08; $08 !!8
=$09					KWD_PLINGPLING9                      = $09; $09 !!9
=$0a					KWD_PLINGPLING10                     = $0a; $0a !!10
=$0b					KWD_PLINGPLING11                     = $0b; $0b !!11
=$0c					KWD_PLINGPLING12                     = $0c; $0c !!12
=$0d					KWD_PLINGPLING13                     = $0d; $0d !!13
=$0e					KWD_PLINGPLING14                     = $0e; $0e !!14
=$0f					KWD_PLINGPLING15                     = $0f; $0f !!15
=$10					KWD_AT                               = $10; $10 @
=$11					KWD_PLINGPLING17                     = $11; $11 !!17
=$12					KWD_PLINGPLING18                     = $12; $12 !!18
=$13					KWD_LSQPAREN                         = $13; $13 [
=$14					KWD_BACKSLASH                        = $14; $14 \
=$15					KWD_RSQPAREN                         = $15; $15 ]
=$16					KWD_HAT                              = $16; $16 ^
=$17					KWD_UNDERSCORE                       = $17; $17 _
=$18					KWD_BQUOTE                           = $18; $18 `
=$19					KWD_PLINGPLING25                     = $19; $19 !!25
=$1a					KWD_PLINGPLING26                     = $1a; $1a !!26
=$1b					KWD_LCURLY                           = $1b; $1b {
=$1c					KWD_BAR                              = $1c; $1c |
=$1d					KWD_RCURLY                           = $1d; $1d }
=$1e					KWD_TILDE                            = $1e; $1e ~
=$21					KWD_PLING                            = $21; $21 !
=$22					KWD_DQUOTE                           = $22; $22 "
=$23					KWD_HASH                             = $23; $23 #
=$24					KWD_DOLLAR                           = $24; $24 $
=$25					KWD_PERCENT                          = $25; $25 %
=$26					KWD_AMPERSAND                        = $26; $26 &
=$27					KWD_QUOTE                            = $27; $27 '
=$28					KWD_LPAREN                           = $28; $28 (
=$29					KWD_RPAREN                           = $29; $29 )
=$2a					KWD_STAR                             = $2a; $2a *
=$2b					KWD_PLUS                             = $2b; $2b +
=$2c					KWD_COMMA                            = $2c; $2c ,
=$2d					KWD_MINUS                            = $2d; $2d -
=$2e					KWD_PERIOD                           = $2e; $2e .
=$2f					KWD_SLASH                            = $2f; $2f /
=$30					KWD_0                                = $30; $30 0
=$31					KWD_1                                = $31; $31 1
=$32					KWD_2                                = $32; $32 2
=$33					KWD_3                                = $33; $33 3
=$34					KWD_4                                = $34; $34 4
=$35					KWD_5                                = $35; $35 5
=$36					KWD_6                                = $36; $36 6
=$37					KWD_7                                = $37; $37 7
=$38					KWD_8                                = $38; $38 8
=$39					KWD_9                                = $39; $39 9
=$3a					KWD_COLON                            = $3a; $3a :
=$3b					KWD_SEMICOLON                        = $3b; $3b ;
=$3c					KWD_LESS                             = $3c; $3c <
=$3d					KWD_EQUAL                            = $3d; $3d =
=$3e					KWD_GREATER                          = $3e; $3e >
=$3f					KWD_QMARK                            = $3f; $3f ?
=$83					KWD_ABSLPAREN                        = $83; $83 ABS(
=$84					KWD_ALLOCLPAREN                      = $84; $84 ALLOC(
=$85					KWD_ASCLPAREN                        = $85; $85 ASC(
=$86					KWD_CHRDOLLARLPAREN                  = $86; $86 CHR$(
=$87					KWD_EVENTLPAREN                      = $87; $87 EVENT(
=$88					KWD_FALSE                            = $88; $88 FALSE
=$89					KWD_FRACLPAREN                       = $89; $89 FRAC(
=$8a					KWD_HITLPAREN                        = $8a; $8a HIT(
=$8b					KWD_INTLPAREN                        = $8b; $8b INT(
=$8c					KWD_ISVALLPAREN                      = $8c; $8c ISVAL(
=$8d					KWD_JOYBLPAREN                       = $8d; $8d JOYB(
=$8e					KWD_JOYXLPAREN                       = $8e; $8e JOYX(
=$8f					KWD_JOYYLPAREN                       = $8f; $8f JOYY(
=$90					KWD_LEFTDOLLARLPAREN                 = $90; $90 LEFT$(
=$91					KWD_LENLPAREN                        = $91; $91 LEN(
=$92					KWD_MAXLPAREN                        = $92; $92 MAX(
=$93					KWD_MIDDOLLARLPAREN                  = $93; $93 MID$(
=$94					KWD_MINLPAREN                        = $94; $94 MIN(
=$95					KWD_NOTLPAREN                        = $95; $95 NOT(
=$96					KWD_RANDOMLPAREN                     = $96; $96 RANDOM(
=$97					KWD_RIGHTDOLLARLPAREN                = $97; $97 RIGHT$(
=$98					KWD_RNDLPAREN                        = $98; $98 RND(
=$99					KWD_SGNLPAREN                        = $99; $99 SGN(
=$9a					KWD_SPCLPAREN                        = $9a; $9a SPC(
=$9b					KWD_STRDOLLARLPAREN                  = $9b; $9b STR$(
=$9c					KWD_TIMERLPAREN                      = $9c; $9c TIMER(
=$9d					KWD_TRUE                             = $9d; $9d TRUE
=$9e					KWD_VALLPAREN                        = $9e; $9e VAL(
=$9f					KWD_FOR                              = $9f; $9f FOR
=$a0					KWD_IF                               = $a0; $a0 IF
=$a1					KWD_PROC                             = $a1; $a1 PROC
=$a2					KWD_REPEAT                           = $a2; $a2 REPEAT
=$a3					KWD_WHILE                            = $a3; $a3 WHILE
=$a4					KWD_ENDIF                            = $a4; $a4 ENDIF
=$a5					KWD_ENDPROC                          = $a5; $a5 ENDPROC
=$a6					KWD_NEXT                             = $a6; $a6 NEXT
=$a7					KWD_THEN                             = $a7; $a7 THEN
=$a8					KWD_UNTIL                            = $a8; $a8 UNTIL
=$a9					KWD_WEND                             = $a9; $a9 WEND
=$aa					KWD_BY                               = $aa; $aa BY
=$ab					KWD_CALL                             = $ab; $ab CALL
=$ac					KWD_CIRCLE                           = $ac; $ac CIRCLE
=$ad					KWD_CLEAR                            = $ad; $ad CLEAR
=$ae					KWD_CLS                              = $ae; $ae CLS
=$af					KWD_COLOR                            = $af; $af COLOR
=$b0					KWD_COLOUR                           = $b0; $b0 COLOUR
=$b1					KWD_DATA                             = $b1; $b1 DATA
=$b2					KWD_DIM                              = $b2; $b2 DIM
=$b3					KWD_DOWNTO                           = $b3; $b3 DOWNTO
=$b4					KWD_ELSE                             = $b4; $b4 ELSE
=$b5					KWD_FROM                             = $b5; $b5 FROM
=$b6					KWD_GFX                              = $b6; $b6 GFX
=$b7					KWD_GOSUB                            = $b7; $b7 GOSUB
=$b8					KWD_GOTO                             = $b8; $b8 GOTO
=$b9					KWD_HERE                             = $b9; $b9 HERE
=$ba					KWD_IMAGE                            = $ba; $ba IMAGE
=$bb					KWD_LET                              = $bb; $bb LET
=$bc					KWD_LINE                             = $bc; $bc LINE
=$bd					KWD_LOCAL                            = $bd; $bd LOCAL
=$be					KWD_OFF                              = $be; $be OFF
=$bf					KWD_ON                               = $bf; $bf ON
=$c0					KWD_OUTLINE                          = $c0; $c0 OUTLINE
=$c1					KWD_PALETTE                          = $c1; $c1 PALETTE
=$c2					KWD_PLOT                             = $c2; $c2 PLOT
=$c3					KWD_PRINT                            = $c3; $c3 PRINT
=$c4					KWD_READ                             = $c4; $c4 READ
=$c5					KWD_RECT                             = $c5; $c5 RECT
=$c6					KWD_REM                              = $c6; $c6 REM
=$c7					KWD_RETURN                           = $c7; $c7 RETURN
=$c8					KWD_SOLID                            = $c8; $c8 SOLID
=$c9					KWD_SPRITE                           = $c9; $c9 SPRITE
=$ca					KWD_TEXT                             = $ca; $ca TEXT
=$cb					KWD_TO                               = $cb; $cb TO

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst0.inc

=$80					KWC_EOL = $80
=$ff					KWC_STRING = $FF
=$fe					KWC_HEXCONST = $FE
=$9f					KWC_FIRST_STRUCTURE = $9f
=$a4					KWC_FIRST_STRUCTURE_DEC = $a4
=$a9					KWC_LAST_STRUCTURE = $a9
=$83					KWC_FIRST_UNARY = $83
=$9e					KWC_LAST_UNARY = $9e

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/stack.inc

=$e0					STK_GOSUB = $E0
=$d0					STK_FOR = $D0
=$c0					STK_REPEAT = $C0
=$b0					STK_PROC = $B0
=$a0					STK_WHILE = $A0
=$01					STK_LOCALN = $01
=$02					STK_LOCALS = $02

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/00start.asm

.8000	a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.8002	9a		txs				txs
.8003	20 8d a8	jsr $a88d			jsr 	EXTInitialise 				; hardware initialise
.8006	a9 00		lda #$00			lda 	#0 							; graphics system initialise.
.8008	aa		tax				tax
.8009	a8		tay				tay
.800a	20 e5 a9	jsr $a9e5			jsr 	GXGraphicDraw
.800d	a2 80		ldx #$80			ldx 	#(Prompt >> 8) 				; prompt
.800f	a9 1d		lda #$1d			lda 	#(Prompt & $FF)
.8011	20 8e 8d	jsr $8d8e			jsr 	PrintStringXA
.8014	20 4d 88	jsr $884d			jsr 	NewCommand 					; erase current program
.8017	20 fe 82	jsr $82fe			jsr 	BackloadProgram
.801a	4c 5b 83	jmp $835b			jmp 	WarmStart
>801d	0c 2a 2a 2a 20 46 32 35		Prompt:	.text 	12,"*** F256 Junior SuperBASIC ***",13,13
>8025	36 20 4a 75 6e 69 6f 72 20 53 75 70 65 72 42 41
>8035	53 49 43 20 2a 2a 2a 0d 0d
>803e	57 72 69 74 74 65 6e 20				.text 	"Written by Paul Robson 2022.",13,13
>8046	62 79 20 50 61 75 6c 20 52 6f 62 73 6f 6e 20 32
>8056	30 32 32 2e 0d 0d

;******  Processing file: ./common/aa.system/../generated/timestamp.asm

>805c	42 75 69 6c 74 20 54 68			.text "Built Thursday 17-Nov-2022. Build 3074."
>8064	75 72 73 64 61 79 20 31 37 2d 4e 6f 76 2d 32 30
>8074	32 32 2e 20 42 75 69 6c 64 20 33 30 37 34 2e

;******  Return to file: ./common/aa.system/00start.asm

>8083	0d 0d 00					.byte 	13,13,0

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/assembler.asm

.8086					AssembleGroup1:
.8086	a9 ff		lda #$ff			lda 	#$FF
.8088	8d a5 04	sta $04a5			sta 	ModeMask 					; initialise the mode mask - all for all
.808b	80 02		bra $808f			bra 	AsmGroup12
.808d					AssembleGroup2:
.808d	a9 00		lda #$00			lda 	#$00
.808f					AsmGroup12:
.808f	8d a3 04	sta $04a3			sta 	IsGroup1 					; save the 'group 1' flag
.8092	68		pla				pla 								; pop the return address to access the information following.
.8093	fa		plx				plx
.8094	20 1d 81	jsr $811d			jsr 	AccessParameters 			; get opcode and save as base
.8097	8d a4 04	sta $04a4			sta 	BaseOpcode
.809a	ad a3 04	lda $04a3			lda 	IsGroup1 					; skip if group 1 as we don't have a complex mask.
.809d	d0 08		bne $80a7			bne 	_AG12HaveMask
.809f	a9 02		lda #$02			lda 	#2 							; if group 2 the second parameter is the mask
.80a1	20 25 81	jsr $8125			jsr 	GetParameter		 		; e.g. which modes are supported for this operand
.80a4	8d a5 04	sta $04a5			sta 	ModeMask
.80a7					_AG12HaveMask:
.80a7	20 60 82	jsr $8260			jsr 	TypeAndCalculateOperand 	; get zero page type
.80aa	da		phx				phx 								; save found address mode
.80ab	20 89 81	jsr $8189			jsr 	AssembleModeX
.80ae	fa		plx				plx  								; restore address mode
.80af	b0 0b		bcs $80bc			bcs 	_AG12Exit
.80b1	20 bd 80	jsr $80bd			jsr 	PromoteToAbsolute  			; promote ZP to ABS and try that
.80b4	20 89 81	jsr $8189			jsr 	AssembleModeX
.80b7	b0 03		bcs $80bc			bcs 	_AG12Exit
.80b9	4c 82 9f	jmp $9f82			jmp 	SyntaxError 				; can't do either, so must be wrong mode/operand.
.80bc					_AG12Exit:
.80bc	60		rts				rts
.80bd					PromoteToAbsolute:
.80bd	a9 6c		lda #$6c			lda 	#AM_ABS 					; lda xx
.80bf	e0 e4		cpx #$e4			cpx 	#AM_ZEROPAGE
.80c1	f0 19		beq $80dc			beq 	_PTADo
.80c3	a9 7c		lda #$7c			lda 	#AM_ABSX 					; lda xx,X
.80c5	e0 f4		cpx #$f4			cpx 	#AM_ZEROX
.80c7	f0 13		beq $80dc			beq 	_PTADo
.80c9	a9 78		lda #$78			lda 	#AM_ABSY 					; lda xx,Y
.80cb	e0 80		cpx #$80			cpx 	#AM_ZEROY
.80cd	f0 0d		beq $80dc			beq 	_PTADo
.80cf	a9 01		lda #$01			lda 	#AM_INDABS 					; lda (xx) (jump)
.80d1	e0 d1		cpx #$d1			cpx 	#AM_IND
.80d3	f0 07		beq $80dc			beq 	_PTADo
.80d5	a9 02		lda #$02			lda 	#AM_INDABSX 				; lda (xx,x) (jump)
.80d7	e0 c0		cpx #$c0			cpx 	#AM_INDX
.80d9	f0 01		beq $80dc			beq 	_PTADo
.80db	60		rts				rts
.80dc					_PTADo:
.80dc	aa		tax				tax
.80dd	60		rts				rts
.80de					AssembleGroup3:
.80de	68		pla				pla 								; get parameters, which is just the opcode.
.80df	fa		plx				plx
.80e0	20 1d 81	jsr $811d			jsr 	AccessParameters 			; get and output opcode
.80e3	20 35 81	jsr $8135			jsr 	AssemblerWriteByte
.80e6	20 c4 82	jsr $82c4			jsr 	CalculateOperand 			; get a 16 bit operand
.80e9	ad 08 04	lda $0408			lda 	NSMantissa0 				; calculate the offset
.80ec	38		sec				sec
.80ed	ed 9e 04	sbc $049e			sbc 	AssemblerAddress
.80f0	48		pha				pha 								; LSB in A
.80f1	ad 10 04	lda $0410			lda 	NSMantissa1
.80f4	ed 9f 04	sbc $049f			sbc 	AssemblerAddress+1
.80f7	aa		tax				tax 								; MSB in X
.80f8	68		pla				pla
.80f9	18		clc				clc 								; $80 to easy check $80-$7F, plus 1 for offset error
.80fa	69 7f		adc #$7f			adc 	#$7F
.80fc	90 01		bcc $80ff			bcc 	_AG3NoCarry
.80fe	e8		inx				inx
.80ff					_AG3NoCarry:
.80ff	38		sec				sec 								; fix back and write out anyways.
.8100	e9 80		sbc #$80			sbc 	#$80
.8102	20 35 81	jsr $8135			jsr 	AssemblerWriteByte
.8105	e0 00		cpx #$00			cpx 	#0 							; was it in range
.8107	f0 0a		beq $8113			beq 	_AG3Exit
.8109	ad a0 04	lda $04a0			lda 	AssemblerControl 			; are we allowing bad values ?
.810c	29 01		and #$01			and 	#1
.810e	f0 03		beq $8113			beq 	_AG3Exit
.8110	4c 87 9f	jmp $9f87			jmp 	RangeError 					; no, branch is out of range
.8113					_AG3Exit:
.8113	60		rts				rts
.8114					AssembleGroup4:
.8114	68		pla				pla 								; pop address
.8115	fa		plx				plx
.8116	20 1d 81	jsr $811d			jsr 	AccessParameters 			; access and get first
.8119	20 35 81	jsr $8135			jsr 	AssemblerWriteByte 			; output it.
.811c	60		rts				rts
.811d					AccessParameters:
.811d	8d a1 04	sta $04a1			sta 	ParamStart
.8120	8e a2 04	stx $04a2			stx 	ParamStart+1
.8123	a9 01		lda #$01			lda 	#1
.8125					GetParameter:
.8125	5a		phy				phy
.8126	a8		tay				tay
.8127	ad a1 04	lda $04a1			lda 	ParamStart
.812a	85 36		sta $36				sta 	zTemp0
.812c	ad a2 04	lda $04a2			lda 	ParamStart+1
.812f	85 37		sta $37				sta 	zTemp0+1
.8131	b1 36		lda ($36),y			lda 	(zTemp0),y
.8133	7a		ply				ply
.8134	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/aswrite.asm

.8135					AssemblerWriteByte:
.8135	48		pha			pha
.8136	ad a0 04	lda $04a0		lda 	AssemblerControl 				; check printing bytes ?
.8139	29 02		and #$02		and 	#2
.813b	f0 1b		beq $8158		beq 	_AWBNoPrint
.813d	ad 9f 04	lda $049f		lda		AssemblerAddress+1 				; print address
.8140	20 73 81	jsr $8173		jsr 	PrintHex
.8143	ad 9e 04	lda $049e		lda		AssemblerAddress
.8146	20 73 81	jsr $8173		jsr 	PrintHex
.8149	a9 20		lda #$20		lda 	#' '
.814b	20 28 a7	jsr $a728		jsr 	EXTPrintCharacter
.814e	68		pla			pla 									; print byte
.814f	48		pha			pha
.8150	20 73 81	jsr $8173		jsr 	PrintHex
.8153	a9 0d		lda #$0d		lda 	#13
.8155	20 28 a7	jsr $a728		jsr 	EXTPrintCharacter
.8158					_AWBNoPrint:
.8158	ad 9e 04	lda $049e		lda		AssemblerAddress				; copy address to zTemp0
.815b	85 36		sta $36			sta 	zTemp0
.815d	ad 9f 04	lda $049f		lda		AssemblerAddress+1
.8160	f0 0e		beq $8170		beq 	_AWBRange
.8162	85 37		sta $37			sta 	zTemp0+1
.8164	68		pla			pla 									; write byte out
.8165	92 36		sta ($36)		sta 	(zTemp0)
.8167	ee 9e 04	inc $049e		inc 	AssemblerAddress 				; bump address
.816a	d0 03		bne $816f		bne 	_AWBNoCarry
.816c	ee 9f 04	inc $049f		inc 	AssemblerAddress+1
.816f					_AWBNoCarry:
.816f	60		rts			rts
.8170					_AWBRange:
.8170	4c 87 9f	jmp $9f87		jmp 	RangeError
.8173					PrintHex:
.8173	48		pha				pha
.8174	4a		lsr a				lsr 	a
.8175	4a		lsr a				lsr 	a
.8176	4a		lsr a				lsr 	a
.8177	4a		lsr a				lsr 	a
.8178	20 7c 81	jsr $817c			jsr 	_PrintNibble
.817b	68		pla				pla
.817c					_PrintNibble:
.817c	29 0f		and #$0f			and 	#15
.817e	c9 0a		cmp #$0a			cmp 	#10
.8180	90 02		bcc $8184			bcc 	_NoShift
.8182	69 06		adc #$06			adc 	#6
.8184					_NoShift:
.8184	69 30		adc #$30			adc 	#48
.8186	4c 28 a7	jmp $a728			jmp 	EXTPrintCharacter

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/instruction.asm

.8189					AssembleModeX:
.8189	5a		phy				phy
.818a	ad a3 04	lda $04a3			lda 	IsGroup1
.818d	f0 17		beq $81a6			beq 	_AMXGroup2
.818f	8a		txa				txa 							; is it in group # 1
.8190	29 40		and #$40			and 	#AM_ISG1
.8192	f0 50		beq $81e4			beq 	_AMXFail 				; no, give up.
.8194	8a		txa				txa 							; get back.
.8195	29 1f		and #$1f			and 	#$1F 					; this is now the offset.
.8197	e0 e0		cpx #$e0			cpx 	#AM_IMMEDIATE 			; if not immediate, we can continue.
.8199	d0 22		bne $81bd			bne 	_AMXHaveInfo
.819b	ad a4 04	lda $04a4			lda 	BaseOpcode 				; cannot store immediate.
.819e	c9 81		cmp #$81			cmp 	#$81
.81a0	f0 42		beq $81e4			beq 	_AMXFail
.81a2	a9 08		lda #$08			lda 	#8 						; if immediate we use offset 8.
.81a4	80 17		bra $81bd			bra 	_AMXHaveInfo 			; odd design decision there.
.81a6					_AMXGroup2:
.81a6	8a		txa				txa 							; is it in group 2 ?
.81a7	29 20		and #$20			and 	#AM_ISG2
.81a9	f0 39		beq $81e4			beq 	_AMXFail 				; no, give up.
.81ab	8a		txa				txa 							; get the offset into Y
.81ac	29 1f		and #$1f			and 	#$1F
.81ae	4a		lsr a				lsr 	a 						; make it 0-7.
.81af	4a		lsr a				lsr  	a
.81b0	a8		tay				tay
.81b1	ad a5 04	lda $04a5			lda 	ModeMask 				; shift the modemask left so you can check it against the requested offset
.81b4					_AMXCheckOkay:
.81b4	0a		asl a				asl 	a 						; shift modemask left enough times to check legitimate.
.81b5	88		dey				dey
.81b6	10 fc		bpl $81b4			bpl 	_AMXCheckOkay
.81b8	90 2a		bcc $81e4			bcc 	_AMXFail 				; not allowed.
.81ba	8a		txa				txa  							; get mask back
.81bb	29 1f		and #$1f			and 	#$1F
.81bd					_AMXHaveInfo:
.81bd	e0 00		cpx #$00			cpx 	#$00 					; does it *require* an 8 bit operand
.81bf	10 05		bpl $81c6			bpl 	_AMXAnySize 			; checking bit 7, the zero page opcode flag.
.81c1	ac 10 04	ldy $0410			ldy 	NSMantissa1 			; fail if it is outside range, e.g. the MSB is set.
.81c4	d0 1e		bne $81e4			bne 	_AMXFail
.81c6					_AMXAnySize:
.81c6	18		clc				clc 							; add offset to the base opcode
.81c7	6d a4 04	adc $04a4			adc 	BaseOpcode
.81ca					_AMXOutputCode:
.81ca	20 35 81	jsr $8135			jsr 	AssemblerWriteByte 		; write the opcode out.
.81cd	e0 28		cpx #$28			cpx 	#AM_ACC 				; A mode (e.g. ASL A)
.81cf	f0 10		beq $81e1			beq 	_AMXExit
.81d1	ad 08 04	lda $0408			lda 	NSMantissa0 				; write LSB operand
.81d4	20 35 81	jsr $8135			jsr 	AssemblerWriteByte
.81d7	e0 00		cpx #$00			cpx 	#$00 					; zeropage ?
.81d9	30 06		bmi $81e1			bmi 	_AMXExit
.81db	ad 10 04	lda $0410			lda 	NSMantissa1 			; write MSB operand
.81de	20 35 81	jsr $8135			jsr 	AssemblerWriteByte
.81e1					_AMXExit:
.81e1	7a		ply				ply
.81e2	38		sec				sec
.81e3	60		rts				rts
.81e4					_AMXFail:
.81e4	a0 00		ldy #$00			ldy 	#0
.81e6					_AMXCheckOddities:
.81e6	8a		txa				txa
.81e7	d9 0f 82	cmp $820f,y			cmp 	ExtraOpcode+2,y 		; match address mode
.81ea	d0 16		bne $8202			bne 	_AMXCONext
.81ec	b9 0d 82	lda $820d,y			lda 	ExtraOpcode+0,y 		; do the base opcodes match
.81ef	cd a4 04	cmp $04a4			cmp 	BaseOpcode
.81f2	d0 0e		bne $8202			bne 	_AMXCONext
.81f4	e0 00		cpx #$00			cpx 	#$00 					; requires zero page ?
.81f6	10 05		bpl $81fd			bpl 	_AMXCONotZero
.81f8	ad 10 04	lda $0410			lda 	NSMantissa1
.81fb	d0 05		bne $8202			bne 	_AMXCONext
.81fd					_AMXCONotZero:
.81fd	b9 0e 82	lda $820e,y			lda 	ExtraOpcode+1,y 		; get new opcode
.8200	80 c8		bra $81ca			bra 	_AMXOutputCode 			; and assemble it
.8202					_AMXCONext:
.8202	c8		iny				iny
.8203	c8		iny				iny
.8204	c8		iny				iny
.8205	b9 0d 82	lda $820d,y			lda 	ExtraOpcode+0,y 		; end of table
.8208	d0 dc		bne $81e6			bne 	_AMXCheckOddities
.820a					_AMXCOFail:
.820a	7a		ply				ply
.820b	18		clc				clc
.820c	60		rts				rts
.820d					ExtraOpcode:
>820d	40 6c 01					.byte $40,$6c,AM_INDABS 	; jmp
>8210	40 7c 02					.byte $40,$7C,AM_INDABSX 	; jmp
>8213	a2 be 78					.byte $a2,$BE,AM_ABSY 		; ldx
>8216	a2 b6 80					.byte $a2,$B6,AM_ZEROY 		; ldx
>8219	82 96 80					.byte $82,$96,AM_ZEROY 		; stx
>821c	e2 1a 28					.byte $e2,$1a,AM_ACC 		; inc
>821f	c2 3a 28					.byte $c2,$3a,AM_ACC 		; dec
>8222	20 89 e0					.byte $20,$89,AM_IMMEDIATE 	; bit
>8225	60 9c 6c					.byte $60,$9c,AM_ABS 		; stz
>8228	60 9e 7c					.byte $60,$9e,AM_ABSX 		; stz
>822b	00						.byte $00

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/label.asm

.822c					LabelHere:
.822c	c8		iny				iny 								; skip .
.822d	a2 00		ldx #$00			ldx 	#0 							; get a term
.822f	20 be 97	jsr $97be			jsr 	EvaluateTerm 				; get a term
.8232	ad 00 04	lda $0400			lda 	NSStatus 					; needs to be an integer reference.
.8235	c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.8237	d0 24		bne $825d			bne 	_ALType
.8239	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy reference address to zTemp0
.823c	85 36		sta $36				sta 	zTemp0
.823e	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8241	85 37		sta $37				sta 	zTemp0+1
.8243	5a		phy				phy 								; copy address in.
.8244	a0 01		ldy #$01			ldy 	#1
.8246	ad 9e 04	lda $049e			lda	 	AssemblerAddress
.8249	92 36		sta ($36)			sta 	(zTemp0)
.824b	ad 9f 04	lda $049f			lda	 	AssemblerAddress+1
.824e	91 36		sta ($36),y			sta 	(zTemp0),y
.8250	c8		iny				iny
.8251	a9 00		lda #$00			lda 	#0
.8253	91 36		sta ($36),y			sta 	(zTemp0),y
.8255	c8		iny				iny
.8256	91 36		sta ($36),y			sta 	(zTemp0),y
.8258	c8		iny				iny
.8259	91 36		sta ($36),y			sta 	(zTemp0),y
.825b	7a		ply				ply
.825c	60		rts				rts
.825d					_ALType:
.825d	4c 8c 9f	jmp $9f8c			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/operands.asm

.8260					TypeAndCalculateOperand:
.8260	b1 30		lda ($30),y			lda 	(codePtr),y
.8262	a2 28		ldx #$28			ldx 	#AM_ACC 					; ACC if : or EOL
.8264	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.8266	f0 5b		beq $82c3			beq 	_TACOExit
.8268	c9 80		cmp #$80			cmp 	#KWC_EOL
.826a	f0 57		beq $82c3			beq 	_TACOExit
.826c	c8		iny				iny
.826d	a2 e0		ldx #$e0			ldx 	#AM_IMMEDIATE
.826f	c9 23		cmp #$23			cmp 	#KWD_HASH 					; if hash, then immediate - constant.
.8271	f0 51		beq $82c4			beq 	CalculateOperand
.8273	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; if ( then check for indirection
.8275	f0 1f		beq $8296			beq 	_TACOIndirect
.8277	88		dey				dey 								; undo get of first character
.8278	20 c4 82	jsr $82c4			jsr 	CalculateOperand 			; get operand
.827b	b1 30		lda ($30),y			lda 	(codePtr),y
.827d	a2 e4		ldx #$e4			ldx 	#AM_ZEROPAGE 				; if not, try zero page (then absolute)
.827f	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8281	d0 40		bne $82c3			bne 	_TACOExit
.8283	c8		iny				iny
.8284	20 ce 82	jsr $82ce			jsr 	TACOCheckXY 				; extract X,Y or 0 (neither) from the variable.
.8287	a2 f4		ldx #$f4			ldx 	#AM_ZEROX 					; check for X
.8289	c9 58		cmp #$58			cmp 	#'X'
.828b	f0 36		beq $82c3			beq 	_TACOExit
.828d	a2 80		ldx #$80			ldx 	#AM_ZEROY 					; check for Y
.828f	c9 59		cmp #$59			cmp 	#'Y'
.8291	f0 30		beq $82c3			beq 	_TACOExit
.8293					_TACOSyntax:
.8293	4c 82 9f	jmp $9f82			jmp 	SyntaxError
.8296					_TACOIndirect:
.8296	20 c4 82	jsr $82c4			jsr 	CalculateOperand 			; get the operand
.8299	b1 30		lda ($30),y			lda 	(codePtr),y
.829b	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if , then it must be ,X)
.829d	f0 17		beq $82b6			beq 	_TACOIndX
.829f	20 1c 8d	jsr $8d1c			jsr 	CheckRightBracket  			; otherwise must be ) or ),Y
.82a2	b1 30		lda ($30),y			lda 	(codePtr),y
.82a4	a2 d1		ldx #$d1			ldx 	#AM_IND
.82a6	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not comma then exit with (xx)
.82a8	d0 19		bne $82c3			bne 	_TACOExit
.82aa	c8		iny				iny
.82ab	20 ce 82	jsr $82ce			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.82ae	c9 59		cmp #$59			cmp 	#'Y' 						; check Y
.82b0	d0 e1		bne $8293			bne 	_TACOSyntax
.82b2	a2 d0		ldx #$d0			ldx 	#AM_INDY
.82b4	80 0d		bra $82c3			bra 	_TACOExit
.82b6					_TACOIndX:
.82b6	c8		iny				iny
.82b7	20 ce 82	jsr $82ce			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.82ba	c9 58		cmp #$58			cmp 	#'X' 						; check X
.82bc	d0 d5		bne $8293			bne 	_TACOSyntax
.82be	20 1c 8d	jsr $8d1c			jsr 	CheckRightBracket			; check )
.82c1	a2 c0		ldx #$c0			ldx 	#AM_INDX
.82c3					_TACOExit:
.82c3	60		rts				rts
.82c4					CalculateOperand:
.82c4	48		pha				pha
.82c5	da		phx				phx
.82c6	a2 00		ldx #$00			ldx 	#0 							; get 16 bit integer in Slot 0
.82c8	20 59 9d	jsr $9d59			jsr 	Evaluate16BitInteger
.82cb	fa		plx				plx
.82cc	68		pla				pla
.82cd	60		rts				rts
.82ce					TACOCheckXY:
.82ce	b1 30		lda ($30),y			lda 	(codePtr),y
.82d0	29 c0		and #$c0			and 	#$C0 						; check it is an identifier reference.
.82d2	c9 40		cmp #$40			cmp 	#$40
.82d4	d0 21		bne $82f7			bne 	_TCXYFail
.82d6	b1 30		lda ($30),y			lda 	(codePtr),y
.82d8	18		clc				clc
.82d9	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.82db	85 37		sta $37				sta 	zTemp0+1
.82dd	c8		iny				iny
.82de	b1 30		lda ($30),y			lda 	(codePtr),y
.82e0	c8		iny				iny
.82e1	85 36		sta $36				sta 	zTemp0
.82e3	5a		phy				phy 								; save position
.82e4	a0 02		ldy #$02			ldy 	#2 							; type is integer ?
.82e6	b1 36		lda ($36),y			lda 	(zTemp0),y
.82e8	d0 0c		bne $82f6			bne 	_TCXYPopFail
.82ea	a0 08		ldy #$08			ldy 	#8 							; get first character, should have bit 7 set as also last.
.82ec	b1 36		lda ($36),y			lda 	(zTemp0),y
.82ee	c9 d8		cmp #$d8			cmp 	#'X'+$80 					; should be X or Y
.82f0	f0 08		beq $82fa			beq 	_TCXYFound
.82f2	c9 d9		cmp #$d9			cmp 	#'Y'+$80
.82f4	f0 04		beq $82fa			beq 	_TCXYFound
.82f6					_TCXYPopFail:
.82f6	7a		ply				ply
.82f7					_TCXYFail:
.82f7	a9 00		lda #$00			lda 	#0
.82f9	60		rts				rts
.82fa					_TCXYFound:
.82fa	7a		ply				ply 								; restore position
.82fb	29 7f		and #$7f			and 	#$7F 						; throw bit 7
.82fd	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/backload.asm

.82fe					BackloadProgram:
.82fe	a2 ff		ldx #$ff			ldx 	#$FF
.8300	20 28 83	jsr $8328			jsr 	BLReadByte
.8303	30 1f		bmi $8324			bmi 	_BPExit
.8305					_BPCopy:
.8305	e8		inx				inx  								; copy byte in
.8306	9d a7 05	sta $05a7,x			sta 	lineBuffer,x
.8309	9e a8 05	stz $05a8,x			stz 	lineBuffer+1,x
.830c	20 28 83	jsr $8328			jsr 	BLReadByte 					; read next byte
.830f	30 0a		bmi $831b			bmi 	_BPEndLine 					; -ve = EOL
.8311	c9 09		cmp #$09			cmp 	#9 							; handle TAB
.8313	d0 02		bne $8317			bne 	_BPNotTab
.8315	a9 20		lda #$20			lda 	#' '
.8317					_BPNotTab:
.8317	c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.8319	b0 ea		bcs $8305			bcs 	_BPCopy
.831b					_BPEndLine:
.831b	20 e7 b4	jsr $b4e7			jsr 	TokeniseLine 				; tokenise the line.
.831e	38		sec				sec 								; append not insert
.831f	20 5f a1	jsr $a15f			jsr 	MemoryInsertLine 			; append to current program
.8322	80 da		bra $82fe			bra 	BackloadProgram
.8324					_BPExit:
.8324	20 f4 83	jsr $83f4			jsr 	ClearCommand 				; clear variables etc.
.8327	60		rts				rts
.8328					BLReadByte:
.8328					_BLLoad:
.8328	ad 00 30	lda $3000			lda 	$3000 						; hardcoded in the makefile.
.832b	ee 29 83	inc $8329			inc 	_BLLoad+1
.832e	d0 03		bne $8333			bne 	_BLNoCarry
.8330	ee 2a 83	inc $832a			inc 	_BLLoad+2
.8333					_BLNoCarry:
.8333	c9 00		cmp #$00			cmp 	#0
.8335	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/editor.asm

.8336					EditProgramCode:
.8336	ad a8 04	lda $04a8			lda 	TokenLineNumber 			; find the line.
.8339	ae a9 04	ldx $04a9			ldx 	TokenLineNumber+1
.833c	20 07 a2	jsr $a207			jsr 	MemorySearch
.833f	90 05		bcc $8346			bcc 	_EPCNoDelete 				; reached the end don't delete
.8341	d0 03		bne $8346			bne 	_EPCNoDelete 				; found slot but didn't match, no delete
.8343	20 28 a1	jsr $a128			jsr 	MemoryDeleteLine 			; delete the line
.8346					_EPCNoDelete:
.8346	ad aa 04	lda $04aa			lda 	TokenBuffer 				; buffer empty
.8349	c9 80		cmp #$80			cmp 	#KWC_EOL
.834b	f0 0d		beq $835a			beq 	_EPCNoInsert
.834d	ad a8 04	lda $04a8			lda 	TokenLineNumber 			; find the line - it cannot exist.
.8350	ae a9 04	ldx $04a9			ldx 	TokenLineNumber+1 			; so this can't fail, it returns some point in the code.
.8353	20 07 a2	jsr $a207			jsr 	MemorySearch
.8356	18		clc				clc 								; insert at this point.
.8357	20 5f a1	jsr $a15f			jsr 	MemoryInsertLine 			; insert the line
.835a					_EPCNoInsert:
.835a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/warmstart.asm

.835b					WarmStart:
.835b	a2 ff		ldx #$ff			ldx 	#$FF
.835d	9a		txs				txs
.835e	20 05 a9	jsr $a905			jsr 	EXTInputLine 				; get line to lineBuffer
.8361	20 e7 b4	jsr $b4e7			jsr 	TokeniseLine 				; tokenise the line
.8364	ad a8 04	lda $04a8			lda 	TokenLineNumber 			; line number ?
.8367	0d a9 04	ora $04a9			ora 	TokenLineNumber+1
.836a	d0 17		bne $8383			bne 	_WSEditCode 				; if so,edit code.
.836c	9c a7 04	stz $04a7			stz 	TokenOffset 				; zero offset, meaning it only runs one line.
.836f	a9 a7		lda #$a7			lda 	#((TokenOffset) & $FF)
.8371	85 30		sta $30				sta 	codePtr
.8373	a9 04		lda #$04			lda 	#((TokenOffset) >> 8)
.8375	85 31		sta $31				sta 	codePtr+1
.8377	ad aa 04	lda $04aa			lda 	TokenBuffer 				; nothing to run
.837a	c9 80		cmp #$80			cmp 	#KWC_EOL
.837c	f0 dd		beq $835b			beq 	WarmStart
.837e	20 e8 89	jsr $89e8			jsr 	RUNCodePointerLine 			; execute that line.
.8381	80 d8		bra $835b			bra 	WarmStart
.8383					_WSEditCode:
.8383	20 36 83	jsr $8336			jsr 	EditProgramCode
.8386	20 f4 83	jsr $83f4			jsr 	ClearCommand
.8389	80 d0		bra $835b			bra 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assemble.asm

.838b					AssembleCommand:
.838b	a2 00		ldx #$00			ldx 	#0
.838d	20 59 9d	jsr $9d59			jsr 	Evaluate16BitInteger 		; start address
.8390	ad 08 04	lda $0408			lda 	NSMantissa0
.8393	8d 9e 04	sta $049e			sta 	AssemblerAddress
.8396	ad 10 04	lda $0410			lda 	NSMantissa1
.8399	8d 9f 04	sta $049f			sta 	AssemblerAddress+1
.839c	20 24 8d	jsr $8d24			jsr 	CheckComma
.839f	20 79 9d	jsr $9d79			jsr 	Evaluate8BitInteger 		; options
.83a2	ad 08 04	lda $0408			lda 	NSMantissa0
.83a5	8d a0 04	sta $04a0			sta 	AssemblerControl
.83a8	60		rts				rts
.83a9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assert.asm

.83aa					AssertCommand:
.83aa	a2 00		ldx #$00			ldx 	#0
.83ac	20 44 9d	jsr $9d44			jsr 	EvaluateInteger 			; the assert test
.83af	20 28 9e	jsr $9e28			jsr 	NSMIsZero 					; exit if result is non zero.
.83b2	d0 05		bne $83b9			bne 	_ACExit
.83b4	a9 0a		lda #$0a		lda	#10
.83b6	4c 35 8d	jmp $8d35		jmp	ErrorHandler
.83b9					_ACExit:
.83b9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/call.asm

.83ba					CallCommand:
.83ba	a2 00		ldx #$00			ldx 	#0
.83bc	20 59 9d	jsr $9d59			jsr 	Evaluate16BitInteger
.83bf					_CCClear
.83bf	e8		inx				inx  								; clear 1,2 and 3 (for A X Y)
.83c0	20 f8 9d	jsr $9df8			jsr 	NSMSetZero
.83c3	e0 04		cpx #$04			cpx 	#4
.83c5	d0 f8		bne $83bf			bne 	_CCClear
.83c7	a2 00		ldx #$00			ldx 	#0 							; and keep trying
.83c9					_CCCParam:
.83c9	b1 30		lda ($30),y			lda 	(codePtr),y
.83cb	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.83cd	d0 09		bne $83d8			bne 	_CCCRun6502
.83cf	c8		iny				iny 								; skip comma
.83d0	e8		inx				inx	 								; next level
.83d1	20 79 9d	jsr $9d79			jsr 	Evaluate8BitInteger 		; get A/X/Y
.83d4	e0 03		cpx #$03			cpx 	#3
.83d6	90 f1		bcc $83c9			bcc 	_CCCParam 					; done all 3 ?
.83d8					_CCCRun6502:
.83d8	5a		phy				phy 								; save position
.83d9	ad 10 04	lda $0410			lda 	NSMantissa1 				; put address in zTemp0
.83dc	85 37		sta $37				sta 	zTemp0+1
.83de	ad 08 04	lda $0408			lda 	NSMantissa0
.83e1	85 36		sta $36				sta 	zTemp0
.83e3	ad 09 04	lda $0409			lda 	NSMantissa0+1 				; get registers
.83e6	ae 0a 04	ldx $040a			ldx 	NSMantissa0+2
.83e9	ac 0b 04	ldy $040b			ldy 	NSMantissa0+3
.83ec	20 f1 83	jsr $83f1			jsr 	_CCCZTemp0 					; call zTemp0
.83ef	7a		ply				ply 								; restore position and exit
.83f0	60		rts				rts
.83f1					_CCCZTemp0:
.83f1	6c 36 00	jmp ($0036)			jmp 	(zTemp0)

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/clear.asm

.83f4					ClearCommand:
.83f4	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.83f6	85 36		sta $36				sta 	0+zTemp0
.83f8	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.83fa	85 37		sta $37				sta 	1+zTemp0
.83fc					_ClearZeroLoop:
.83fc	b2 36		lda ($36)			lda 	(zTemp0) 					; end of variables
.83fe	f0 24		beq $8424			beq 	_ClearZeroEnd
.8400	a0 03		ldy #$03			ldy 	#3 							; erase the variables
.8402	a9 00		lda #$00			lda 	#0
.8404					_ClearOneVariable:
.8404	91 36		sta ($36),y			sta 	(zTemp0),y
.8406	c8		iny				iny
.8407	c0 08		cpy #$08			cpy 	#8
.8409	d0 f9		bne $8404			bne 	_ClearOneVariable
.840b	a0 02		ldy #$02			ldy 	#2 							; has it been marked procedure
.840d	b1 36		lda ($36),y			lda 	(zTemp0),y
.840f	c9 18		cmp #$18			cmp 	#NSTProcedure
.8411	d0 04		bne $8417			bne 	_ClearNotProcedure
.8413	a9 04		lda #$04			lda 	#NSTInteger+NSBIsArray 		; set it back to an integer array
.8415	91 36		sta ($36),y			sta 	(zTemp0),y
.8417					_ClearNotProcedure:
.8417	18		clc				clc 								; go to the next variable
.8418	b2 36		lda ($36)			lda 	(zTemp0)
.841a	65 36		adc $36				adc 	zTemp0
.841c	85 36		sta $36				sta 	zTemp0
.841e	90 dc		bcc $83fc			bcc 	_ClearZeroLoop
.8420	e6 37		inc $37				inc 	zTemp0+1
.8422	80 d8		bra $83fc			bra 	_ClearZeroLoop
.8424					_ClearZeroEnd:
.8424	18		clc				clc
.8425	a5 36		lda $36				lda 	zTemp0
.8427	69 01		adc #$01			adc 	#1
.8429	8d 8c 04	sta $048c			sta 	lowMemPtr
.842c	a5 37		lda $37				lda 	zTemp0+1
.842e	69 00		adc #$00			adc 	#0
.8430	8d 8d 04	sta $048d			sta 	lowMemPtr+1
.8433	20 c1 a2	jsr $a2c1			jsr 	StackReset
.8436	20 2b a3	jsr $a32b			jsr 	StringSystemInitialise
.8439	20 25 8c	jsr $8c25			jsr 	ProcedureScan
.843c	20 a4 89	jsr $89a4			jsr 	Command_Restore
.843f	9c 9e 04	stz $049e			stz 	AssemblerAddress
.8442	9c 9f 04	stz $049f			stz 	AssemblerAddress+1
.8445	9c a0 04	stz $04a0			stz 	AssemblerControl
.8448	20 c1 99	jsr $99c1			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.844b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/cls.asm

.844c					ClearScreen:
.844c	5a		phy				phy
.844d	a9 0c		lda #$0c			lda 	#12
.844f	20 28 a7	jsr $a728			jsr 	EXTPrintCharacter
.8452	7a		ply				ply
.8453	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/data.asm

.8454					Command_Data:
.8454	a9 3a		lda #$3a			lda 	#KWD_COLON 					; advance to colon/EOL
.8456	a2 80		ldx #$80			ldx 	#KWC_EOL
.8458	20 77 8c	jsr $8c77			jsr 	ScanForward
.845b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/dim.asm

.845c					DimCommand:
.845c	b1 30		lda ($30),y			lda 	(codePtr),y
.845e	29 c0		and #$c0			and 	#$C0
.8460	c9 40		cmp #$40			cmp 	#$40
.8462	d0 7a		bne $84de			bne 	_DCSyntax
.8464	b1 30		lda ($30),y			lda 	(codePtr),y
.8466	18		clc				clc
.8467	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8469	85 3f		sta $3f				sta 	zaTemp+1
.846b	c8		iny				iny
.846c	b1 30		lda ($30),y			lda 	(codePtr),y
.846e	c8		iny				iny
.846f	85 3e		sta $3e				sta 	zaTemp
.8471	5a		phy				phy
.8472	a0 02		ldy #$02			ldy 	#2 						; read type byte
.8474	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8476	29 18		and #$18			and 	#NSBTypeMask 			; check it's not a procedure
.8478	c9 18		cmp #$18			cmp 	#NSTProcedure
.847a	f0 62		beq $84de			beq 	_DCSyntax
.847c	b1 3e		lda ($3e),y			lda 	(zaTemp),y 				; check it's an array
.847e	29 04		and #$04			and 	#NSBIsArray
.8480	f0 64		beq $84e6			beq 	_DCType
.8482	a0 04		ldy #$04			ldy 	#4 						; check not already defined
.8484	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8486	d0 59		bne $84e1			bne 	_DCRedefine
.8488	7a		ply				ply
.8489	20 e9 84	jsr $84e9			jsr 	_DCGetSize 				; get array size, check it.
.848c	5a		phy				phy
.848d	a0 05		ldy #$05			ldy 	#5 						; store in first array size slot
.848f	91 3e		sta ($3e),y			sta 	(zaTemp),y 				; second will be zero.
.8491	7a		ply				ply 							; is there a second (e.g. ,x)
.8492	b1 30		lda ($30),y			lda 	(codePtr),y
.8494	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8496	d0 0a		bne $84a2			bne 	_DCOneDimension
.8498	c8		iny				iny 							; skip comma
.8499	20 e9 84	jsr $84e9			jsr 	_DCGetSize 				; get 2nd array size
.849c	5a		phy				phy
.849d	a0 06		ldy #$06			ldy 	#6 						; store in 2nd array size
.849f	91 3e		sta ($3e),y			sta 	(zaTemp),y
.84a1	7a		ply				ply
.84a2					_DCOneDimension:
.84a2	5a		phy				phy 							; save position
.84a3	a0 05		ldy #$05			ldy 	#5 						; dimensions + 1 in AX (as zero based)
.84a5	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.84a7	aa		tax				tax
.84a8	c8		iny				iny
.84a9	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.84ab	e8		inx				inx 							; bump them.
.84ac	1a		inc a				inc 	a
.84ad	20 8d 9d	jsr $9d8d			jsr 	Multiply8x8 			; work out the total number of elements -> zTemp0
.84b0	a5 37		lda $37				lda 	zTemp0+1 				; don't allow more than 8192 elements whatever
.84b2	29 e0		and #$e0			and 	#$E0
.84b4	d0 23		bne $84d9			bne 	_DCSize
.84b6	a0 02		ldy #$02			ldy 	#2 						; get base type
.84b8	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.84ba	20 f7 84	jsr $84f7			jsr 	ScaleByBaseType 		; scale by base type
.84bd	a5 36		lda $36				lda 	zTemp0
.84bf	a6 37		ldx $37				ldx 	zTemp0+1
.84c1	20 83 99	jsr $9983			jsr 	AllocateXABytes 		; allocate memory
.84c4	a0 03		ldy #$03			ldy 	#3 						; copy into the address.
.84c6	91 3e		sta ($3e),y			sta 	(zaTemp),y
.84c8	c8		iny				iny
.84c9	8a		txa				txa
.84ca	91 3e		sta ($3e),y			sta 	(zaTemp),y
.84cc	7a		ply				ply 							; get position back
.84cd	20 1c 8d	jsr $8d1c			jsr 	CheckRightBracket 		; check )
.84d0	b1 30		lda ($30),y			lda 	(codePtr),y
.84d2	c8		iny				iny 							; consume in case
.84d3	c9 2c		cmp #$2c			cmp 	#KWD_COMMA		 		; if so do another DIM.
.84d5	f0 85		beq $845c			beq 	DimCommand
.84d7	88		dey				dey 							; undo consume
.84d8	60		rts				rts
.84d9					_DCSize:
.84d9	a9 16		lda #$16		lda	#22
.84db	4c 35 8d	jmp $8d35		jmp	ErrorHandler
.84de					_DCSyntax:
.84de	4c 82 9f	jmp $9f82			jmp 	SyntaxError
.84e1					_DCRedefine:
.84e1	a9 15		lda #$15		lda	#21
.84e3	4c 35 8d	jmp $8d35		jmp	ErrorHandler
.84e6					_DCType:
.84e6	4c 8c 9f	jmp $9f8c			jmp 	TypeError
.84e9					_DCGetSize:
.84e9	a2 00		ldx #$00			ldx 	#0 						; get first index.
.84eb	20 79 9d	jsr $9d79			jsr 	Evaluate8BitInteger 	; get array dimension
.84ee	c9 00		cmp #$00			cmp 	#0 						; must be 1-254
.84f0	f0 e7		beq $84d9			beq 	_DCSize
.84f2	c9 fe		cmp #$fe			cmp 	#254
.84f4	f0 e3		beq $84d9			beq 	_DCSize
.84f6	60		rts				rts
.84f7					ScaleByBaseType:
.84f7	29 10		and #$10			and 	#NSBIsString 			; is it string
.84f9	d0 19		bne $8514			bne 	_SBBTString
.84fb	a5 37		lda $37				lda 	zTemp0+1 				; push value on stack
.84fd	48		pha				pha
.84fe	a5 36		lda $36				lda 	zTemp0
.8500	48		pha				pha
.8501	06 36		asl $36				asl 	zTemp0 					; x 2
.8503	26 37		rol $37				rol 	zTemp0+1
.8505	06 36		asl $36				asl 	zTemp0 					; x 4
.8507	26 37		rol $37				rol 	zTemp0+1
.8509	68		pla				pla 							; add stacked value = x 5
.850a	65 36		adc $36				adc 	zTemp0
.850c	85 36		sta $36				sta 	zTemp0
.850e	68		pla				pla
.850f	65 37		adc $37				adc 	zTemp0+1
.8511	85 37		sta $37				sta 	zTemp0+1
.8513	60		rts				rts
.8514					_SBBTString:
.8514	06 36		asl $36				asl 	zTemp0
.8516	26 37		rol $37				rol 	zTemp0+1
.8518	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/end.asm

.8519					EndCommand:
.8519	4c 5b 83	jmp $835b			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/for.asm

.851c					ForCommand:
.851c	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; allocate 18 bytes on the return stack.
.851e	20 5c a2	jsr $a25c			jsr 	StackOpen
.8521	a2 00		ldx #$00			ldx 	#0
.8523	20 be 97	jsr $97be			jsr 	EvaluateTerm
.8526	bd 00 04	lda $0400,x			lda 	NSStatus,x
.8529	c9 20		cmp #$20			cmp 	#NSBIsReference+NSTInteger 	; do we have an integer 4 byte reference.
.852b	d0 49		bne $8576			bne		_FCError
.852d	a9 3d		lda #$3d			lda 	#KWD_EQUAL 					; =
.852f	20 2c 8d	jsr $8d2c			jsr 	CheckNextA
.8532	e8		inx				inx
.8533	20 44 9d	jsr $9d44			jsr 	EvaluateInteger 			; <from> in +1
.8536	b1 30		lda ($30),y			lda 	(codePtr),y
.8538	c8		iny				iny 								; consume it
.8539	48		pha				pha 								; save on stack for later
.853a	c9 b3		cmp #$b3			cmp 	#KWD_DOWNTO
.853c	f0 04		beq $8542			beq 	_FCNoSyntax
.853e	c9 cb		cmp #$cb			cmp 	#KWD_TO
.8540	d0 37		bne $8579			bne 	_FCSyntaxError
.8542					_FCNoSyntax:
.8542	e8		inx				inx
.8543	20 44 9d	jsr $9d44			jsr 	EvaluateInteger
.8546	20 a0 a2	jsr $a2a0			jsr 	STKSaveCodePosition 		; save loop back position
.8549	68		pla				pla 								; restore DOWNTO or TO
.854a	5a		phy				phy 								; save Y on the stack
.854b	49 b3		eor #$b3			eor 	#KWD_DOWNTO 				; 0 if DOWNTO, #0 if TO
.854d	f0 02		beq $8551			beq 	_FCNotDownTo
.854f	a9 02		lda #$02			lda 	#2
.8551					_FCNotDownTo:
.8551	3a		dec a				dec 	a 							; 255 if DOWNTO, 1 if TO
.8552	a0 10		ldy #$10			ldy 	#16
.8554	91 34		sta ($34),y			sta 	(basicStack),y 				; copy that out to the Basic Stack.
.8556	a0 06		ldy #$06			ldy 	#6
.8558	ad 08 04	lda $0408			lda 	NSMantissa0
.855b	91 34		sta ($34),y			sta 	(basicStack),y
.855d	ad 10 04	lda $0410			lda 	NSMantissa1
.8560	c8		iny				iny
.8561	91 34		sta ($34),y			sta 	(basicStack),y
.8563	a0 08		ldy #$08			ldy 	#8 							; set initial index value
.8565	a2 01		ldx #$01			ldx 	#1
.8567	20 7c 85	jsr $857c			jsr 	FCIntegerToStack
.856a	a0 0c		ldy #$0c			ldy 	#12 						; set the terminal value
.856c	a2 02		ldx #$02			ldx 	#2
.856e	20 7c 85	jsr $857c			jsr 	FCIntegerToStack
.8571	20 9c 85	jsr $859c			jsr 	CopyIndexToReference
.8574	7a		ply				ply 								; restore position
.8575	60		rts				rts
.8576					_FCError:
.8576	4c 8c 9f	jmp $9f8c			jmp 	TypeError
.8579					_FCSyntaxError:
.8579	4c 82 9f	jmp $9f82			jmp 	SyntaxError
.857c					FCIntegerToStack:
.857c	3c 00 04	bit $0400,x			bit 	NSStatus,x 					; is the value negative
.857f	10 03		bpl $8584			bpl	 	_FCNotNegative
.8581	20 ad 9d	jsr $9dad			jsr 	NSMNegateMantissa 			; if so 2's complement the mantissa
.8584					_FCNotNegative:
.8584	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy out to the basic stack
.8587	91 34		sta ($34),y			sta 	(basicStack),y
.8589	c8		iny				iny
.858a	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.858d	91 34		sta ($34),y			sta 	(basicStack),y
.858f	c8		iny				iny
.8590	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.8593	91 34		sta ($34),y			sta 	(basicStack),y
.8595	c8		iny				iny
.8596	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.8599	91 34		sta ($34),y			sta 	(basicStack),y
.859b	60		rts				rts
.859c					CopyIndexToReference:
.859c	5a		phy				phy
.859d	a0 06		ldy #$06			ldy 	#6 							; copy address-8 to write to zTemp0
.859f	38		sec				sec 								; (because we copy from offset 8)
.85a0	b1 34		lda ($34),y			lda 	(basicStack),y
.85a2	e9 08		sbc #$08			sbc 	#8
.85a4	85 36		sta $36				sta 	zTemp0
.85a6	c8		iny				iny
.85a7	b1 34		lda ($34),y			lda 	(basicStack),y
.85a9	e9 00		sbc #$00			sbc 	#0
.85ab	85 37		sta $37				sta 	zTemp0+1
.85ad	a2 04		ldx #$04			ldx 	#4 							; this is the copy counter/
.85af	a0 0b		ldy #$0b			ldy 	#8+3 		 				; the MSB of the mantissa
.85b1	b1 34		lda ($34),y			lda 	(basicStack),y
.85b3	0a		asl a				asl 	a 							; into carry
.85b4	a0 08		ldy #$08			ldy 	#8 							; where to copy from.
.85b6	90 14		bcc $85cc			bcc 	_CITRNormal
.85b8	38		sec				sec
.85b9					_CITRNegative:
.85b9	a9 00		lda #$00			lda 	#0
.85bb	f1 34		sbc ($34),y			sbc 	(basicStack),y
.85bd	91 36		sta ($36),y			sta 	(zTemp0),y
.85bf	c8		iny				iny
.85c0	ca		dex				dex
.85c1	d0 f6		bne $85b9			bne 	_CITRNegative
.85c3	88		dey				dey 								; look at MSB of mantissa
.85c4	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set the MSB as negative packed.
.85c6	09 80		ora #$80			ora 	#$80
.85c8	91 36		sta ($36),y			sta 	(zTemp0),y
.85ca	7a		ply				ply
.85cb	60		rts				rts
.85cc					_CITRNormal:
.85cc	b1 34		lda ($34),y			lda 	(basicStack),y 				; copy without negation.
.85ce	91 36		sta ($36),y			sta 	(zTemp0),y
.85d0	c8		iny				iny
.85d1	ca		dex				dex
.85d2	d0 f8		bne $85cc			bne 	_CITRNormal
.85d4	7a		ply				ply 								; and exit.
.85d5	60		rts				rts
.85d6					NextCommand:
.85d6	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; check FOR is TOS
.85d8	a2 11		ldx #$11			ldx 	#ERRID_FOR 					; this error
.85da	20 88 a2	jsr $a288			jsr 	StackCheckFrame
.85dd	5a		phy				phy
.85de	a0 10		ldy #$10			ldy 	#16 						; get the step count
.85e0	b1 34		lda ($34),y			lda 	(basicStack),y
.85e2	85 36		sta $36				sta 	zTemp0 						; this is the sign extend
.85e4	30 02		bmi $85e8			bmi 	_NCStepNeg
.85e6	64 36		stz $36				stz 	zTemp0 						; which is 0 or 255
.85e8					_NCStepNeg:
.85e8	a0 08		ldy #$08			ldy 	#8 							; offset to bump
.85ea	a2 04		ldx #$04			ldx 	#4 							; count to bump
.85ec	18		clc				clc
.85ed					_NCBump:
.85ed	71 34		adc ($34),y			adc 	(basicStack),y 				; add it
.85ef	91 34		sta ($34),y			sta 	(basicStack),y
.85f1	a5 36		lda $36				lda 	zTemp0 						; get sign extend for next time.
.85f3	c8		iny				iny 								; next byte
.85f4	ca		dex				dex 								; do four times
.85f5	d0 f6		bne $85ed			bne 	_NCBump
.85f7	20 9c 85	jsr $859c			jsr		CopyIndexToReference		; copy it to the reference variable.
.85fa	a0 10		ldy #$10			ldy 	#16 						; get step count again
.85fc	b1 34		lda ($34),y			lda 	(basicStack),y
.85fe	0a		asl a				asl 	a 							; sign bit to carry
.85ff	a9 0c		lda #$0c			lda 	#12 						; offset of LHS = terminal offset
.8601	85 38		sta $38				sta 	zTemp1
.8603	90 02		bcc $8607			bcc 	_NCCompRev 					; use if step is +ve
.8605	a9 08		lda #$08			lda 	#8 							; now the LHS = index value
.8607					_NCCompRev:
.8607	85 38		sta $38				sta 	zTemp1 						; so zTemp0 is the index for LHS
.8609	49 04		eor #$04			eor 	#(8^12) 					; and zTemp0+1 is the index for RHS
.860b	85 39		sta $39				sta 	zTemp1+1
.860d	a2 04		ldx #$04			ldx 	#4 							; bytes to compare
.860f	38		sec				sec
.8610					_NCCompare:
.8610	a4 38		ldy $38				ldy 	zTemp1 						; do compare using the two indices
.8612	b1 34		lda ($34),y			lda 	(basicStack),y
.8614	a4 39		ldy $39				ldy 	zTemp1+1
.8616	f1 34		sbc ($34),y			sbc 	(basicStack),y
.8618	e6 38		inc $38				inc 	zTemp1 						; bump the indices (inc,dex do not change C or V)
.861a	e6 39		inc $39				inc 	zTemp1+1
.861c	ca		dex				dex 								; do it 4 times.
.861d	d0 f1		bne $8610			bne 	_NCCompare
.861f	50 02		bvc $8623			bvc 	_NCNoOverflow 				; convert to signed comparison
.8621	49 80		eor #$80			eor 	#$80
.8623					_NCNoOverflow:
.8623	7a		ply				ply 								; restore Y position
.8624	0a		asl a				asl 	a 							; is bit 7 set.
.8625	90 04		bcc $862b			bcc 	_NCLoopback 				; if no , >= so loop back
.8627	20 7a a2	jsr $a27a			jsr 	StackClose 					; exit the loop
.862a	60		rts				rts
.862b					_NCLoopBack:
.862b	20 b1 a2	jsr $a2b1			jsr 	STKLoadCodePosition 		; loop back
.862e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/gosub.asm

.862f					Command_GOSUB:
.862f	a2 00		ldx #$00			ldx 	#0
.8631	20 59 9d	jsr $9d59			jsr 	Evaluate16BitInteger 		; line number in Stack.0
.8634	a9 e3		lda #$e3			lda 	#STK_GOSUB+3
.8636	20 5c a2	jsr $a25c			jsr 	StackOpen 					; create frame
.8639	20 a0 a2	jsr $a2a0			jsr 	STKSaveCodePosition 		; save current position
.863c	4c 52 86	jmp $8652			jmp 	GotoStackX
.863f					Command_RETURN:
.863f	a9 e0		lda #$e0			lda 	#STK_GOSUB 					; check TOS is this
.8641	a2 0e		ldx #$0e			ldx 	#ERRID_GOSUB 				; this error
.8643	20 88 a2	jsr $a288			jsr 	StackCheckFrame
.8646	20 b1 a2	jsr $a2b1			jsr 	STKLoadCodePosition 		; restore code position
.8649	20 7a a2	jsr $a27a			jsr 	StackClose
.864c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/goto.asm

.864d					GotoCommand:
.864d	a2 00		ldx #$00			ldx 	#0 							; GOTO where
.864f	20 59 9d	jsr $9d59			jsr 	Evaluate16BitInteger
.8652					GotoStackX:
.8652	bd 10 04	lda $0410,x			lda  	NSMantissa1,x 				; put line # in XA. I'll keep this even though
.8655	48		pha				pha 								; it is slightly inefficient, just in cases.
.8656	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.8659	fa		plx				plx
.865a	20 07 a2	jsr $a207			jsr 	MemorySearch 				; transfer to line number AX.
.865d	90 05		bcc $8664			bcc 	_GotoError 					; not found, off end.
.865f	d0 03		bne $8664			bne 	_GotoError 					; not found exactly
.8661	4c e1 89	jmp $89e1			jmp 	RunNewLine 					; and go straight to new line code.
.8664					_GotoError:
.8664	a9 0d		lda #$0d		lda	#13
.8666	4c 35 8d	jmp $8d35		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/if.asm

.8669					IfCommand:
.8669	a2 00		ldx #$00			ldx 	#0 							; If what.
.866b	20 21 9d	jsr $9d21			jsr 	EvaluateNumber
.866e	b1 30		lda ($30),y			lda 	(codePtr),y
.8670	c9 a7		cmp #$a7			cmp 	#KWD_THEN  					; could be THEN <stuff> or GOTO
.8672	d0 0a		bne $867e			bne 	_IFStructured
.8674	c8		iny				iny 								; consume THEN
.8675	20 28 9e	jsr $9e28			jsr 	NSMIsZero 					; is it zero
.8678	f0 01		beq $867b			beq 	_IfFail 					; if fail, go to next line
.867a	60		rts				rts 								; if THEN just continue
.867b					_IfFail:
.867b	4c 46 8a	jmp $8a46			jmp 	EOLCommand
.867e					_IfStructured:
.867e	20 28 9e	jsr $9e28			jsr 	NSMIsZero 					; is it zero
.8681	d0 07		bne $868a			bne 	_IfExit 					; if not, then continue normally.
.8683	a9 b4		lda #$b4			lda 	#KWD_ELSE 					; look for else/endif
.8685	a2 a4		ldx #$a4			ldx 	#KWD_ENDIF
.8687	20 77 8c	jsr $8c77			jsr 	ScanForward 				; and run from there/
.868a					_IfExit:
.868a	60		rts				rts
.868b					ElseCode:
.868b	a9 a4		lda #$a4			lda 	#KWD_ENDIF 					; else is only run after the if clause succeeds
.868d	aa		tax				tax 								; so just go to the structure exit
.868e	20 77 8c	jsr $8c77			jsr 	ScanForward
.8691	60		rts				rts
.8692					EndIf:
.8692	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/let.asm

.8693					LetCommand:
.8693	a2 00		ldx #$00			ldx 	#0
.8695	b1 30		lda ($30),y			lda 	(codePtr),y
.8697	c9 10		cmp #$10			cmp 	#KWD_AT
.8699	d0 16		bne $86b1			bne 	_LCStandard
.869b	c8		iny				iny 								; skip equal
.869c	20 be 97	jsr $97be			jsr 	EvaluateTerm 				; get a number
.869f	20 02 96	jsr $9602			jsr 	Dereference 				; dereference it
.86a2	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check integer
.86a5	49 20		eor #$20			eor 	#NSBIsReference	 			; toggle reference
.86a7	9d 00 04	sta $0400,x			sta 	NSStatus,x
.86aa	29 20		and #$20			and 	#NSBIsReference 			; if it is now a reference, continue
.86ac	d0 10		bne $86be			bne 	_LCMain
.86ae	4c 8c 9f	jmp $9f8c			jmp 	TypeError 					; was a reference before.
.86b1					_LCStandard:
.86b1	ad cc 92	lda $92cc			lda 	PrecedenceLevel+"*"			; precedence > this
.86b4	20 e6 92	jsr $92e6			jsr 	EvaluateExpressionAtPrecedence
.86b7	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; is it a reference to an array
.86ba	c9 38		cmp #$38			cmp		#NSTProcedure+NSBIsReference
.86bc	f0 0e		beq $86cc			beq 	_LetGoProc 					; it's a procedure call.
.86be					_LCMain:
.86be	a9 3d		lda #$3d			lda 	#"=" 						; check =
.86c0	20 2c 8d	jsr $8d2c			jsr 	CheckNextA
.86c3	e8		inx				inx 								; RHS
.86c4	20 18 9d	jsr $9d18			jsr 	EvaluateValue
.86c7	ca		dex				dex
.86c8	20 cf 86	jsr $86cf			jsr 	AssignVariable
.86cb	60		rts				rts
.86cc					_LetGoProc:
.86cc	4c ae 88	jmp $88ae			jmp 	CallProcedure
.86cf					AssignVariable:
.86cf	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check the string/number type bits match
.86d2	48		pha				pha 								; save a copy
.86d3	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.86d6	29 10		and #$10			and 	#NSBIsString
.86d8	d0 0b		bne $86e5			bne 	_ASError
.86da	68		pla				pla 								; get back
.86db	29 10		and #$10			and 	#NSBIsString 				; check type
.86dd	d0 03		bne $86e2			bne 	_ASString
.86df	4c 2a 95	jmp $952a			jmp 	AssignNumber
.86e2					_ASString:
.86e2	4c 98 95	jmp $9598			jmp 	AssignString
.86e5					_ASError:
.86e5	4c 8c 9f	jmp $9f8c			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/list.asm

.86e8					Command_List:
.86e8	9c a6 04	stz $04a6			stz 	listIndent 					; reset indent.
.86eb	9c 0c 04	stz $040c			stz		NSMantissa0+4				; set the lower (slot 4) to 0 and upper (slot 7) to $FFFF
.86ee	9c 14 04	stz $0414			stz 	NSMantissa1+4
.86f1	a9 ff		lda #$ff			lda 	#$FF
.86f3	8d 0f 04	sta $040f			sta 	NSMantissa0+7
.86f6	8d 17 04	sta $0417			sta 	NSMantissa1+7
.86f9	b1 30		lda ($30),y			lda 	(codePtr),y
.86fb	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.86fd	f0 1e		beq $871d			beq 	_CLSecond
.86ff	20 7b 87	jsr $877b			jsr 	CLIsDigit 					; if not digit, list all
.8702	b0 24		bcs $8728			bcs 	_CLStart
.8704	a2 04		ldx #$04			ldx 	#4 							; get 1st range into slot 4
.8706	20 59 9d	jsr $9d59			jsr 	Evaluate16BitInteger
.8709	b1 30		lda ($30),y			lda 	(codePtr),y
.870b	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.870d	f0 0e		beq $871d			beq 	_CLSecond 					; if so go get it
.870f	ad 0c 04	lda $040c			lda 	NSMantissa0+4 				; copy 4->7
.8712	8d 0f 04	sta $040f			sta 	NSMantissa0+7
.8715	ad 14 04	lda $0414			lda 	NSMantissa1+4
.8718	8d 17 04	sta $0417			sta 	NSMantissa1+7
.871b	80 0b		bra $8728			bra 	_CLStart
.871d					_CLSecond:
.871d	c8		iny				iny 								; consume comma
.871e	20 7b 87	jsr $877b			jsr 	CLIsDigit 					; digit found
.8721	b0 05		bcs $8728			bcs 	_CLStart 					; if not, continue listing
.8723	a2 07		ldx #$07			ldx 	#7 							; load 2nd range into slot 7
.8725	20 59 9d	jsr $9d59			jsr 	Evaluate16BitInteger
.8728					_CLStart
.8728	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.872a	85 30		sta $30				sta 	codePtr
.872c	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.872e	85 31		sta $31				sta 	codePtr+1
.8730					_CLLoop:
.8730	20 bb a8	jsr $a8bb			jsr 	EXTBreakCheck 				; break check
.8733	f0 30		beq $8765			beq 	_CLExit
.8735	b2 30		lda ($30)			lda 	(codePtr)
.8737	f0 2c		beq $8765			beq 	_CLExit
.8739	a2 04		ldx #$04			ldx 	#4 							; check range every time, line numbers aren't in order.
.873b	20 68 87	jsr $8768			jsr 	CLCompareLineNo
.873e	90 18		bcc $8758			bcc 	_CLNext
.8740	a2 07		ldx #$07			ldx 	#7
.8742	20 68 87	jsr $8768			jsr 	CLCompareLineNo
.8745	f0 02		beq $8749			beq 	_CLDoThisOne
.8747	b0 0f		bcs $8758			bcs 	_CLNext
.8749					_CLDoThisOne:
.8749	20 e5 b2	jsr $b2e5			jsr 	ListConvertLine 			; convert line into token Buffer
.874c	a2 04		ldx #$04			ldx 	#(tokenBuffer >> 8) 		; print that line
.874e	a9 aa		lda #$aa			lda 	#(tokenBuffer & $FF)
.8750	20 8e 8d	jsr $8d8e			jsr 	PrintStringXA
.8753	a9 0d		lda #$0d			lda 	#13 						; new line
.8755	20 28 a7	jsr $a728			jsr 	EXTPrintCharacter
.8758					_CLNext:
.8758	18		clc				clc
.8759	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.875b	65 30		adc $30				adc 	codePtr
.875d	85 30		sta $30				sta 	codePtr
.875f	90 02		bcc $8763			bcc 	_CREExit
.8761	e6 31		inc $31				inc 	codePtr+1
.8763					_CREExit:
.8763	80 cb		bra $8730			bra 	_CLLoop
.8765					_CLExit:
.8765	4c 5b 83	jmp $835b			jmp 	WarmStart
.8768					CLCompareLineNo:
.8768	38		sec				sec
.8769	a0 01		ldy #$01			ldy 	#1
.876b	b1 30		lda ($30),y			lda 	(codePtr),y
.876d	fd 08 04	sbc $0408,x			sbc 	NSMantissa0,x
.8770	85 36		sta $36				sta 	zTemp0
.8772	c8		iny				iny
.8773	b1 30		lda ($30),y			lda 	(codePtr),y
.8775	fd 10 04	sbc $0410,x			sbc 	NSMantissa1,x
.8778	05 36		ora $36				ora 	zTemp0
.877a	60		rts				rts
.877b					CLIsDigit:
.877b	b1 30		lda ($30),y			lda 	(codePtr),y
.877d	c9 30		cmp #$30			cmp 	#"0"
.877f	90 03		bcc $8784			bcc	 	_CLIDExitFalse
.8781	c9 3a		cmp #$3a			cmp 	#"9"+1
.8783	60		rts				rts
.8784					_CLIDExitFalse:
.8784	38		sec				sec
.8785	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/local.asm

.8786					Command_LOCAL:
.8786	a2 00		ldx #$00			ldx 	#0 							; at level 0
.8788	20 94 87	jsr $8794			jsr 	LocaliseNextTerm 			; convert term to a local.
.878b	b1 30		lda ($30),y			lda 	(codePtr),y
.878d	c8		iny				iny
.878e	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8790	f0 f4		beq $8786			beq 	Command_LOCAL
.8792	88		dey				dey 								; unpick pre-get
.8793	60		rts				rts
.8794					LocaliseNextTerm:
.8794	20 be 97	jsr $97be			jsr 	EvaluateTerm 				; evaluate the term
.8797	bd 00 04	lda $0400,x			lda 	NSStatus,x
.879a	29 20		and #$20			and 	#NSBIsReference 			; check it is a reference
.879c	f0 61		beq $87ff			beq		_LNTError
.879e	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address of variable to zTemp0
.87a1	85 36		sta $36				sta 	zTemp0
.87a3	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.87a6	85 37		sta $37				sta  	zTemp0+1
.87a8	bd 00 04	lda $0400,x			lda 	NSStatus,x
.87ab	29 10		and #$10			and 	#NSBIsString
.87ad	d0 1e		bne $87cd			bne 	_LNTPushString
.87af	5a		phy				phy
.87b0	a0 00		ldy #$00			ldy 	#0 							; push 0 to 4 inclusive, the number values, on the stack, and zero them as you go.
.87b2					_LNTPushNumLoop:
.87b2	b1 36		lda ($36),y			lda		(zTemp0),y
.87b4	20 3a a2	jsr $a23a			jsr 	StackPushByte
.87b7	c8		iny				iny
.87b8	c0 05		cpy #$05			cpy 	#5
.87ba	d0 f6		bne $87b2			bne 	_LNTPushNumLoop
.87bc	a5 36		lda $36				lda 	zTemp0 						; push the actual target address to write on the stack
.87be	20 3a a2	jsr $a23a			jsr 	StackPushByte
.87c1	a5 37		lda $37				lda 	zTemp0+1
.87c3	20 3a a2	jsr $a23a			jsr 	StackPushByte
.87c6	a9 01		lda #$01			lda 	#STK_LOCALN 				; push local-number marker.
.87c8	20 3a a2	jsr $a23a			jsr 	StackPushByte
.87cb	7a		ply				ply
.87cc	60		rts				rts
.87cd					_LNTPushString:
.87cd	5a		phy				phy
.87ce	b2 36		lda ($36)			lda 	(zTemp0) 					; put address of string in zTemp1
.87d0	85 38		sta $38				sta 	zTemp1
.87d2	a0 01		ldy #$01			ldy 	#1
.87d4	b1 36		lda ($36),y			lda 	(zTemp0),y
.87d6	85 39		sta $39				sta 	zTemp1+1
.87d8	a0 00		ldy #$00			ldy 	#0 							; output string
.87da	c9 00		cmp #$00			cmp 	#0 							; if not assigned strin
.87dc	f0 0a		beq $87e8			beq 	_LNTStringOut
.87de					_LNTPushStrLoop:
.87de	b1 38		lda ($38),y			lda 	(zTemp1),y
.87e0	f0 06		beq $87e8			beq 	_LNTStringOut
.87e2	20 3a a2	jsr $a23a			jsr 	StackPushByte
.87e5	c8		iny				iny
.87e6	80 f6		bra $87de			bra 	_LNTPushStrLoop
.87e8					_LNTStringOut:
.87e8	98		tya				tya									; output length
.87e9	20 3a a2	jsr $a23a			jsr 	StackPushByte
.87ec	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; output address of the string record *not* the string itself
.87ef	20 3a a2	jsr $a23a			jsr 	StackPushByte
.87f2	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.87f5	20 3a a2	jsr $a23a			jsr 	StackPushByte
.87f8	a9 02		lda #$02			lda 	#STK_LOCALS 				; push local-string marker.
.87fa	20 3a a2	jsr $a23a			jsr 	StackPushByte
.87fd	7a		ply				ply
.87fe	60		rts				rts
.87ff					_LNTError:
.87ff	4c 82 9f	jmp $9f82			jmp 	SyntaxError
.8802					LocalPopValue:
.8802	20 53 a2	jsr $a253			jsr 	StackPopByte
.8805	c9 01		cmp #$01			cmp 	#STK_LOCALN 				; if not local-N
.8807	d0 17		bne $8820			bne 	_LPVString
.8809	20 53 a2	jsr $a253			jsr 	StackPopByte 				; address
.880c	85 37		sta $37				sta 	zTemp0+1
.880e	20 53 a2	jsr $a253			jsr 	StackPopByte
.8811	85 36		sta $36				sta 	zTemp0
.8813	5a		phy				phy
.8814	a0 04		ldy #$04			ldy 	#4 							; copy back
.8816					_LPVNumberCopy:
.8816	20 53 a2	jsr $a253			jsr 	StackPopByte
.8819	91 36		sta ($36),y			sta 	(zTemp0),y
.881b	88		dey				dey
.881c	10 f8		bpl $8816			bpl 	_LPVNumberCopy
.881e	7a		ply				ply 								; and complete
.881f	60		rts				rts
.8820					_LPVString:
.8820	20 53 a2	jsr $a253			jsr 	StackPopByte 				; address of record => zTemp0
.8823	85 37		sta $37				sta 	zTemp0+1
.8825	20 53 a2	jsr $a253			jsr 	StackPopByte
.8828	85 36		sta $36				sta 	zTemp0
.882a	5a		phy				phy
.882b	b2 36		lda ($36)			lda 	(zTemp0) 					; address to write string to => zTemp1
.882d	85 38		sta $38				sta 	zTemp1
.882f	a0 01		ldy #$01			ldy 	#1
.8831	b1 36		lda ($36),y			lda 	(zTemp0),y
.8833	85 39		sta $39				sta 	zTemp1+1
.8835	20 53 a2	jsr $a253			jsr 	StackPopByte 				; # to get => y
.8838	a8		tay				tay
.8839	a5 39		lda $39				lda 	zTemp1+1 					; if no target (e.g. was "" originally) exit
.883b	f0 0e		beq $884b			beq 	_LPVStringCopied
.883d	a9 00		lda #$00			lda 	#0 							; NULL on end
.883f	91 38		sta ($38),y			sta 	(zTemp1),y
.8841					_LPVStringCopy:
.8841	88		dey				dey
.8842	30 07		bmi $884b			bmi 	_LPVStringCopied
.8844	20 53 a2	jsr $a253			jsr 	StackPopByte
.8847	91 38		sta ($38),y			sta 	(zTemp1),y
.8849	80 f6		bra $8841			bra 	_LPVStringCopy
.884b					_LPVStringCopied:
.884b	fa		plx				plx
.884c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/new.asm

.884d					NewCommand:
.884d	20 e5 a1	jsr $a1e5			jsr 	MemoryNew
.8850	9c 00 10	stz $1000			stz 	VariableSpace 				; erase all variables.
.8853	20 f4 83	jsr $83f4			jsr 	ClearCommand 				; clear everything.
.8856	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/print.asm

.8857					Command_Print:
.8857	18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.8858					_CPLoop:
.8858	08		php				php 								; save last action flag
.8859	b1 30		lda ($30),y			lda 	(codePtr),y
.885b	c9 80		cmp #$80			cmp  	#KWC_EOL 					; end of line or colon, exit now.
.885d	f0 46		beq $88a5			beq 	_CPExit
.885f	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.8861	f0 42		beq $88a5			beq 	_CPExit
.8863	68		pla				pla 								; throw last action flag
.8864	b1 30		lda ($30),y			lda 	(codePtr),y
.8866	c8		iny				iny
.8867	c9 3b		cmp #$3b			cmp 	#KWD_SEMICOLON				; is it a semicolon
.8869	f0 37		beq $88a2			beq 	_CPContinueWithSameLine
.886b	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; comma
.886d	f0 2e		beq $889d			beq 	_CPTab
.886f	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; apostrophe (new line)
.8871	f0 26		beq $8899			beq 	_CPNewLine
.8873	88		dey				dey 								; undo the get.
.8874	a2 00		ldx #$00			ldx 	#0
.8876	20 18 9d	jsr $9d18			jsr 	EvaluateValue 				; get a value into slot 0
.8879	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; is it a number
.887c	29 10		and #$10			and 	#NSBIsString
.887e	f0 0b		beq $888b			beq 	_CPNumber
.8880	ae 10 04	ldx $0410			ldx 	NSMantissa1 				; string, print the text.
.8883	ad 08 04	lda $0408			lda 	NSMantissa0
.8886	20 8e 8d	jsr $8d8e			jsr 	PrintStringXA
.8889	80 cc		bra $8857			bra 	Command_Print 				; loop round clearing carry so NL if end
.888b					_CPNumber:
.888b	a9 05		lda #$05			lda 	#5 							; maximum decimals
.888d	20 ee 9b	jsr $9bee			jsr 	ConvertNumberToString 		; convert to string
.8890	a2 06		ldx #$06			ldx 	#DecimalBuffer >> 8
.8892	a9 1a		lda #$1a			lda 	#DecimalBuffer & $FF
.8894	20 8e 8d	jsr $8d8e			jsr 	PrintStringXA
.8897	80 be		bra $8857			bra 	Command_Print 				; loop round clearing carry so NL if end
.8899					_CPNewLine:
.8899	a9 0d		lda #$0d			lda 	#13
.889b	80 02		bra $889f			bra 	_CPPrintChar
.889d					_CPTab:
.889d	a9 09		lda #$09			lda 	#9 							; print TAB
.889f					_CPPrintChar:
.889f	20 28 a7	jsr $a728			jsr 	EXTPrintCharacter
.88a2					_CPContinueWithSameLine:
.88a2	38		sec				sec 								; loop round with carry set, which
.88a3	80 b3		bra $8858			bra 	_CPLoop 					; will inhibit final CR
.88a5					_CPExit:
.88a5	28		plp				plp 								; get last action flag
.88a6	b0 05		bcs $88ad			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.88a8	a9 0d		lda #$0d			lda 	#13 						; print new line
.88aa	20 28 a7	jsr $a728			jsr 	EXTPrintCharacter
.88ad					_CPExit2:
.88ad	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/procedure.asm

=2					ParameterStackPos = 2
.88ae					CallProcedure:
.88ae	a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start storing parameters at 2.
.88b0	b1 30		lda ($30),y			lda 	(codePtr),y
.88b2	c9 29		cmp #$29			cmp 	#KWD_RPAREN
.88b4	f0 0c		beq $88c2			beq 	_CPEndParam
.88b6					_CPParamLoop:
.88b6	20 18 9d	jsr $9d18			jsr 	EvaluateValue 				; get parameter onto stack
.88b9	e8		inx				inx 								; bump next stack
.88ba	b1 30		lda ($30),y			lda 	(codePtr),y
.88bc	c8		iny				iny
.88bd	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if comma, go back and try again.
.88bf	f0 f5		beq $88b6			beq 	_CPParamLoop
.88c1	88		dey				dey 								; unpick.
.88c2					_CPEndParam:
.88c2	8e 96 04	stx $0496			stx 	LastParameter 				; save the last parameters index.
.88c5	c8		iny				iny									; skip right bracket
.88c6	a9 b3		lda #$b3			lda 	#STK_PROC+3 				; allocate 6 bytes on the return stack.
.88c8	20 5c a2	jsr $a25c			jsr 	StackOpen
.88cb	20 a0 a2	jsr $a2a0			jsr 	STKSaveCodePosition 		; save loop position
.88ce	ad 08 04	lda $0408			lda 	NSMantissa0 				; copy variable (e.g. procedure) address to zTemp0
.88d1	85 36		sta $36				sta 	zTemp0 						; this is the DATA not the RECORD
.88d3	ad 10 04	lda $0410			lda 	NSMantissa1
.88d6	85 37		sta $37				sta 	zTemp0+1
.88d8	a0 01		ldy #$01			ldy 	#1 							; copy code address back.
.88da	b2 36		lda ($36)			lda 	(zTemp0)
.88dc	85 30		sta $30				sta 	safePtr
.88de	b1 36		lda ($36),y			lda 	(zTemp0),y
.88e0	85 31		sta $31				sta 	safePtr+1
.88e2	c8		iny				iny
.88e3	b1 36		lda ($36),y			lda 	(zTemp0),y
.88e5	85 32		sta $32				sta 	safePtr+2
.88e7	c8		iny				iny
.88e8	b1 36		lda ($36),y			lda 	(zTemp0),y
.88ea	85 33		sta $33				sta 	safePtr+3
.88ec	c8		iny				iny 								; get Y offset -> Y
.88ed	b1 36		lda ($36),y			lda 	(zTemp0),y
.88ef	a8		tay				tay
.88f0	a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start position of parameters
.88f2	ec 96 04	cpx $0496			cpx	 	LastParameter 				; check no parameters at the start
.88f5	f0 13		beq $890a			beq 	_ParamExit 					; if so, exit.
.88f7					_ParamExtract:
.88f7	ca		dex				dex 								; put a local term on the level before
.88f8	20 94 87	jsr $8794			jsr 	LocaliseNextTerm			; also pushes original param value to basic stack
.88fb	20 cf 86	jsr $86cf			jsr 	AssignVariable 				; assign stacked value to the variable.
.88fe	e8		inx				inx 								; advance to next parameter to do.
.88ff	e8		inx				inx
.8900	ec 96 04	cpx $0496			cpx 	LastParameter 				; are we done ?
.8903	f0 05		beq $890a			beq 	_ParamExit
.8905	20 24 8d	jsr $8d24			jsr 	CheckComma 					; comma seperating parameters
.8908	80 ed		bra $88f7			bra 	_ParamExtract
.890a					_ParamExit:
.890a	20 1c 8d	jsr $8d1c			jsr 	CheckRightBracket 			; check )
.890d	60		rts				rts 								; and continue from here
.890e					Command_ENDPROC:
.890e	a9 b0		lda #$b0			lda 	#STK_PROC 					; check TOS is this
.8910	a2 14		ldx #$14			ldx 	#ERRID_PROC
.8912	20 88 a2	jsr $a288			jsr 	StackCheckFrame
.8915	20 b1 a2	jsr $a2b1			jsr 	STKLoadCodePosition 		; restore code position
.8918	20 7a a2	jsr $a27a			jsr 	StackClose
.891b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/read.asm

.891c					Command_Read:
.891c	a2 00		ldx #$00			ldx 	#0 							; evaluate the term which is the var/array element to assign
.891e	20 be 97	jsr $97be			jsr 	EvaluateTerm
.8921	bd 00 04	lda $0400,x			lda 	NSStatus,x
.8924	29 20		and #$20			and 	#NSBIsReference				; get status byte on stack, identifies int, float, string.
.8926	f0 4a		beq $8972			beq 	_CRSyntax 					; check reference (bit 0)
.8928	20 bb 89	jsr $89bb			jsr 	SwapDataCodePtrs 			; swap code and data
.892b	ad 9c 04	lda $049c			lda 	inDataStatement 			; if in a data statement, we don't need to search
.892e	d0 20		bne $8950			bne 	_CRContinueData
.8930					_CRKeepSearching:
.8930	a9 b1		lda #$b1			lda 	#KWD_DATA 					; scan for instruction
.8932	aa		tax				tax
.8933	20 77 8c	jsr $8c77			jsr 	ScanForward
.8936	c9 b1		cmp #$b1			cmp 	#KWD_DATA 					; found data ?
.8938	f0 16		beq $8950			beq 	_CRHaveData 				; found it
.893a	18		clc				clc
.893b	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.893d	65 30		adc $30				adc 	codePtr
.893f	85 30		sta $30				sta 	codePtr
.8941	90 02		bcc $8945			bcc 	_CREExit
.8943	e6 31		inc $31				inc 	codePtr+1
.8945					_CREExit:
.8945	a0 03		ldy #$03			ldy 	#3 							; start of line.
.8947	b2 30		lda ($30)			lda 	(codePtr)
.8949	d0 e5		bne $8930			bne 	_CRKeepSearching
.894b	a9 0b		lda #$0b		lda	#11
.894d	4c 35 8d	jmp $8d35		jmp	ErrorHandler
.8950					_CRHaveData:
.8950					_CRContinueData:
.8950	a2 01		ldx #$01			ldx 	#1
.8952	20 18 9d	jsr $9d18			jsr 	EvaluateValue 				; evaluate value into slot # 1
.8955	ca		dex				dex
.8956	20 cf 86	jsr $86cf			jsr		AssignVariable 				; do the assignment
.8959	9c 9c 04	stz $049c			stz 	inDataStatement 			; clear in data
.895c	b1 30		lda ($30),y			lda 	(codePtr),y
.895e	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not, end of data statement
.8960	d0 04		bne $8966			bne 	_CRSwapBack
.8962	c8		iny				iny 								; consume comma
.8963	ee 9c 04	inc $049c			inc 	inDataStatement 			; set in data statement currently.
.8966					_CRSwapBack:
.8966	20 bb 89	jsr $89bb			jsr 	SwapDataCodePtrs			; swap them back.
.8969	b1 30		lda ($30),y			lda 	(codePtr),y
.896b	c8		iny				iny
.896c	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.896e	f0 ac		beq $891c			beq 	Command_Read 				; if so go round again.
.8970	88		dey				dey 								; unpick get.
.8971	60		rts				rts
.8972					_CRSyntax:
.8972	4c 82 9f	jmp $9f82			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/rem.asm

.8975					RemCommand:
.8975	b1 30		lda ($30),y			lda 	(codePtr),y
.8977	c9 ff		cmp #$ff			cmp 	#KWC_STRING
.8979	d0 06		bne $8981			bne 	_RMExit
.897b	c8		iny				iny
.897c	98		tya				tya
.897d	38		sec				sec
.897e	71 30		adc ($30),y			adc 	(codePtr),y
.8980	a8		tay				tay
.8981					_RMExit:
.8981	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/repeat.asm

.8982					Command_REPEAT:
.8982	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; allocate 6 bytes on the return stack.
.8984	20 5c a2	jsr $a25c			jsr 	StackOpen
.8987	20 a0 a2	jsr $a2a0			jsr 	STKSaveCodePosition 		; save loop position
.898a	60		rts				rts
.898b					Command_UNTIL:
.898b	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; check REPEAT is TOS
.898d	a2 0f		ldx #$0f			ldx 	#ERRID_REPEAT 				; this error
.898f	20 88 a2	jsr $a288			jsr 	StackCheckFrame
.8992	a2 00		ldx #$00			ldx 	#0
.8994	20 21 9d	jsr $9d21			jsr 	EvaluateNumber 				; work out the number
.8997	20 28 9e	jsr $9e28			jsr 	NSMIsZero 					; check if zero
.899a	f0 04		beq $89a0			beq 	_CULoopBack 				; if so keep looping
.899c	20 7a a2	jsr $a27a			jsr 	StackClose		 			; return
.899f	60		rts				rts
.89a0					_CULoopBack:
.89a0	20 b1 a2	jsr $a2b1			jsr 	STKLoadCodePosition 		; loop back
.89a3	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/restore.asm

.89a4					Command_Restore:
.89a4	20 bb 89	jsr $89bb			jsr 	SwapDataCodePtrs 			; swap code and data
.89a7	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.89a9	85 30		sta $30				sta 	codePtr
.89ab	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.89ad	85 31		sta $31				sta 	codePtr+1
.89af	20 bb 89	jsr $89bb			jsr 	SwapDataCodePtrs 			; put them back
.89b2	a9 03		lda #$03			lda 	#3 							; start at offset 3, e.g. first instruction of first line.
.89b4	8d 9b 04	sta $049b			sta 	dataPointer+4
.89b7	9c 9c 04	stz $049c			stz 	inDataStatement 			; not in data statement
.89ba	60		rts				rts
.89bb					SwapDataCodePtrs:
.89bb	da		phx				phx
.89bc	a2 03		ldx #$03			ldx 	#3 							; swap 32 bit code pointer over
.89be					_SDCPLoop:
.89be	b5 30		lda $30,x			lda 	safePtr,x
.89c0	48		pha				pha
.89c1	bd 97 04	lda $0497,x			lda 	dataPointer,x
.89c4	95 30		sta $30,x			sta 	safePtr,x
.89c6	68		pla				pla
.89c7	9d 97 04	sta $0497,x			sta 	dataPointer,x
.89ca	ca		dex				dex
.89cb	10 f1		bpl $89be			bpl 	_SDCPLoop
.89cd	ad 9b 04	lda $049b			lda 	dataPointer+4 				; swap Y position over.
.89d0	8c 9b 04	sty $049b			sty 	dataPointer+4
.89d3	a8		tay				tay
.89d4	fa		plx				plx
.89d5	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/run.asm

.89d6					CommandRUN:
.89d6	20 f4 83	jsr $83f4			jsr 	ClearCommand 				; clear variable/stacks/etc.
.89d9	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.89db	85 30		sta $30				sta 	codePtr
.89dd	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.89df	85 31		sta $31				sta 	codePtr+1
.89e1					RUNNewLine:
.89e1	b2 30		lda ($30)			lda 	(codePtr)
.89e3	f0 5e		beq $8a43			beq 	CRNoProgram         		; no then END.
.89e5	a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack
.89e7	9a		txs				txs
.89e8					RUNCodePointerLine:
.89e8	a0 02		ldy #$02			ldy 	#2 							; start of program
.89ea					_CRIncMainLoop:
.89ea	0e 93 04	asl $0493			asl 	breakCheck 					; clears 1 time in 8
.89ed	d0 05		bne $89f4			bne 	_CRNoBreakCheck
.89ef	20 bb a8	jsr $a8bb			jsr 	EXTBreakCheck 				; break check
.89f2	f0 4a		beq $8a3e			beq 	_CRBreak
.89f4					_CRNoBreakCheck:
.89f4	c8		iny				iny
.89f5					_CRMainLoop:
.89f5	9c 90 04	stz $0490			stz 	stringInitialised 			; clear the temporary string initialised flag.
.89f8	b1 30		lda ($30),y			lda 	(codePtr),y
.89fa	10 10		bpl $8a0c			bpl 	_CRNotKeyword
.89fc	c9 9f		cmp #$9f			cmp 	#KWC_LAST_UNARY+1 			; if after unary, legitimate command
.89fe	b0 04		bcs $8a04			bcs 	_CRIsKeyword
.8a00	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if unary, syntax error.
.8a02	b0 34		bcs $8a38			bcs		_CRSyntaxError
.8a04					_CRIsKeyword:
.8a04	c8		iny				iny 								; consume command
.8a05	0a		asl a				asl 	a 							; double losing the MSB which is '1' as tokens are $80-$FF
.8a06	aa		tax				tax 								; put in X for vector jump
.8a07	20 3b 8a	jsr $8a3b			jsr 	_CRCallVector0 				; call the vector - effectively jsr (vectortable,X)
.8a0a	80 e9		bra $89f5			bra 	_CRMainLoop 				; and loop round
.8a0c					_CRNotKeyword:
.8a0c	c9 3a		cmp #$3a			cmp 	#KWD_COLON 					; if a :, consume it and go round.
.8a0e	f0 da		beq $89ea			beq 	_CRIncMainLoop
.8a10	c9 40		cmp #$40			cmp 	#$40 						; variable/call reference
.8a12	90 05		bcc $8a19			bcc 	_CRNotVariable
.8a14					_CRGoLet:
.8a14	20 93 86	jsr $8693			jsr 	LetCommand
.8a17	80 dc		bra $89f5			bra 	_CRMainLoop
.8a19					_CRNotVariable:
.8a19	c9 10		cmp #$10			cmp 	#KWD_AT 					; handle @
.8a1b	f0 f7		beq $8a14			beq 	_CRGoLet
.8a1d	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; handle ? !
.8a1f	f0 f3		beq $8a14			beq 	_CRGoLet
.8a21	c9 21		cmp #$21			cmp 	#KWD_PLING
.8a23	f0 ef		beq $8a14			beq 	_CRGoLet
.8a25	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; handle ' (comment)
.8a27	f0 09		beq $8a32			beq 	_CRGoRem
.8a29	c9 2e		cmp #$2e			cmp 	#KWD_PERIOD 				; handle . (assembler label)
.8a2b	d0 0b		bne $8a38			bne 	_CRSyntaxError
.8a2d	20 2c 82	jsr $822c			jsr 	LabelHere
.8a30	80 c3		bra $89f5			bra 	_CRMainLoop
.8a32					_CRGoRem:
.8a32	c8		iny				iny
.8a33	20 75 89	jsr $8975			jsr 	RemCommand
.8a36	80 bd		bra $89f5			bra 	_CRMainLoop
.8a38					_CRSyntaxError:
.8a38	4c 82 9f	jmp $9f82			jmp 	SyntaxError
.8a3b					_CRCallVector0:
.8a3b	7c e6 8a	jmp ($8ae6,x)			jmp 	(VectorSet0,x)
.8a3e					_CRBreak:
.8a3e	a9 01		lda #$01		lda	#1
.8a40	4c 35 8d	jmp $8d35		jmp	ErrorHandler
.8a43					CRNoProgram:
.8a43	4c 19 85	jmp $8519			jmp 	EndCommand
.8a46					EOLCommand:
.8a46	18		clc				clc
.8a47	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8a49	65 30		adc $30				adc 	codePtr
.8a4b	85 30		sta $30				sta 	codePtr
.8a4d	90 02		bcc $8a51			bcc 	_CREExit
.8a4f	e6 31		inc $31				inc 	codePtr+1
.8a51					_CREExit:
.8a51	80 8e		bra $89e1			bra 	RunNewLine
.8a53					Shift1Command:
.8a53	b1 30		lda ($30),y			lda 	(codePtr),y
.8a55	c8		iny				iny
.8a56	0a		asl a				asl 	a
.8a57	aa		tax				tax
.8a58	7c 7e 8b	jmp ($8b7e,x)			jmp 	(VectorSet1,x)
.8a5b					Shift2Command:
.8a5b	b1 30		lda ($30),y			lda 	(codePtr),y
.8a5d	c8		iny				iny
.8a5e	0a		asl a				asl 	a
.8a5f	aa		tax				tax
.8a60	7c 98 8b	jmp ($8b98,x)			jmp 	(VectorSet2,x)
.8a63					Unused1:
.8a63					Unused2:
.8a63					Unused3:
.8a63					Unused4:
.8a63	4c 82 9f	jmp $9f82			jmp 	SyntaxError
>8a66							.align 2

;******  Processing file: ./common/commands/../generated/vectors.dat

.8a66					VectorSetPunc:
>8a66	22 90					.word	ShiftLeft                        ; $00 <<
>8a68	d9 8d					.word	BinaryCompareLessEqual           ; $01 <=
>8a6a	cf 8d					.word	BinaryCompareNotEqual            ; $02 <>
>8a6c	82 9f					.word	SyntaxError                      ; $03 !!3
>8a6e	82 9f					.word	SyntaxError                      ; $04 ><
>8a70	e3 8d					.word	BinaryCompareGreaterEqual        ; $05 >=
>8a72	25 90					.word	ShiftRight                       ; $06 >>
>8a74	82 9f					.word	SyntaxError                      ; $07 !!7
>8a76	82 9f					.word	SyntaxError                      ; $08 !!8
>8a78	82 9f					.word	SyntaxError                      ; $09 !!9
>8a7a	82 9f					.word	SyntaxError                      ; $0a !!10
>8a7c	82 9f					.word	SyntaxError                      ; $0b !!11
>8a7e	82 9f					.word	SyntaxError                      ; $0c !!12
>8a80	82 9f					.word	SyntaxError                      ; $0d !!13
>8a82	82 9f					.word	SyntaxError                      ; $0e !!14
>8a84	82 9f					.word	SyntaxError                      ; $0f !!15
>8a86	82 9f					.word	SyntaxError                      ; $10 @
>8a88	82 9f					.word	SyntaxError                      ; $11 !!17
>8a8a	82 9f					.word	SyntaxError                      ; $12 !!18
>8a8c	82 9f					.word	SyntaxError                      ; $13 [
>8a8e	a6 8e					.word	IntegerDivide                    ; $14 \
>8a90	82 9f					.word	SyntaxError                      ; $15 ]
>8a92	b3 91					.word	EorInteger                       ; $16 ^
>8a94	82 9f					.word	SyntaxError                      ; $17 _
>8a96	82 9f					.word	SyntaxError                      ; $18 `
>8a98	82 9f					.word	SyntaxError                      ; $19 !!25
>8a9a	82 9f					.word	SyntaxError                      ; $1a !!26
>8a9c	82 9f					.word	SyntaxError                      ; $1b {
>8a9e	6d 91					.word	OraInteger                       ; $1c |
>8aa0	82 9f					.word	SyntaxError                      ; $1d }
>8aa2	82 9f					.word	SyntaxError                      ; $1e ~
>8aa4	82 9f					.word	SyntaxError                      ; $1f [7m<7F>[m
>8aa6	82 9f					.word	SyntaxError                      ; $20
>8aa8	f9 91					.word	WordIndirect                     ; $21 !
>8aaa	82 9f					.word	SyntaxError                      ; $22 "
>8aac	82 9f					.word	SyntaxError                      ; $23 #
>8aae	82 9f					.word	SyntaxError                      ; $24 $
>8ab0	f3 8e					.word	IntegerModulus                   ; $25 %
>8ab2	27 91					.word	AndInteger                       ; $26 &
>8ab4	82 9f					.word	SyntaxError                      ; $27 '
>8ab6	82 9f					.word	SyntaxError                      ; $28 (
>8ab8	82 9f					.word	SyntaxError                      ; $29 )
>8aba	68 8f					.word	MulInteger                       ; $2a *
>8abc	b9 90					.word	AddInteger                       ; $2b +
>8abe	82 9f					.word	SyntaxError                      ; $2c ,
>8ac0	fc 90					.word	SubInteger                       ; $2d -
>8ac2	82 9f					.word	SyntaxError                      ; $2e .
>8ac4	e4 93					.word	FDivideCommand                   ; $2f /
>8ac6	82 9f					.word	SyntaxError                      ; $30 0
>8ac8	82 9f					.word	SyntaxError                      ; $31 1
>8aca	82 9f					.word	SyntaxError                      ; $32 2
>8acc	82 9f					.word	SyntaxError                      ; $33 3
>8ace	82 9f					.word	SyntaxError                      ; $34 4
>8ad0	82 9f					.word	SyntaxError                      ; $35 5
>8ad2	82 9f					.word	SyntaxError                      ; $36 6
>8ad4	82 9f					.word	SyntaxError                      ; $37 7
>8ad6	82 9f					.word	SyntaxError                      ; $38 8
>8ad8	82 9f					.word	SyntaxError                      ; $39 9
>8ada	82 9f					.word	SyntaxError                      ; $3a :
>8adc	82 9f					.word	SyntaxError                      ; $3b ;
>8ade	bb 8d					.word	BinaryCompareLess                ; $3c <
>8ae0	b1 8d					.word	BinaryCompareEqual               ; $3d =
>8ae2	c5 8d					.word	BinaryCompareGreater             ; $3e >
>8ae4	20 92					.word	ByteIndirect                     ; $3f ?
.8ae6					VectorSet0:
>8ae6	46 8a					.word	EOLCommand                       ; $80 !0:EOF
>8ae8	53 8a					.word	Shift1Command                    ; $81 !1:SH1
>8aea	5b 8a					.word	Shift2Command                    ; $82 !2:SH2
>8aec	54 99					.word	AbsUnary                         ; $83 ABS(
>8aee	64 99					.word	AllocUnary                       ; $84 ALLOC(
>8af0	d4 99					.word	AscUnary                         ; $85 ASC(
>8af2	9f 9b					.word	ChrUnary                         ; $86 CHR$(
>8af4	9c a3					.word	UnaryEvent                       ; $87 EVENT(
>8af6	ad 8d					.word	UnaryFalse                       ; $88 FALSE
>8af8	e1 99					.word	FracUnary                        ; $89 FRAC(
>8afa	67 a6					.word	UnaryHit                         ; $8a HIT(
>8afc	f7 99					.word	IntUnary                         ; $8b INT(
>8afe	5e 9b					.word	IsValUnary                       ; $8c ISVAL(
>8b00	b4 a6					.word	UnaryJoyB                        ; $8d JOYB(
>8b02	8d a6					.word	UnaryJoyX                        ; $8e JOYX(
>8b04	90 a6					.word	UnaryJoyY                        ; $8f JOYY(
>8b06	79 9c					.word	Unary_Left                       ; $90 LEFT$(
>8b08	09 9a					.word	LenUnary                         ; $91 LEN(
>8b0a	27 9a					.word	Unary_Max                        ; $92 MAX(
>8b0c	a3 9c					.word	Unary_Mid                        ; $93 MID$(
>8b0e	23 9a					.word	Unary_Min                        ; $94 MIN(
>8b10	7e 9a					.word	Unary_Not                        ; $95 NOT(
>8b12	94 9a					.word	Unary_Random                     ; $96 RANDOM(
>8b14	89 9c					.word	Unary_Right                      ; $97 RIGHT$(
>8b16	b3 9a					.word	Unary_Rnd                        ; $98 RND(
>8b18	34 9b					.word	SgnUnary                         ; $99 SGN(
>8b1a	b1 9b					.word	SpcUnary                         ; $9a SPC(
>8b1c	cc 9b					.word	Unary_Str                        ; $9b STR$(
>8b1e	0c a7					.word	UnaryTimer                       ; $9c TIMER(
>8b20	a1 8d					.word	UnaryTrue                        ; $9d TRUE
>8b22	54 9b					.word	ValUnary                         ; $9e VAL(
>8b24	1c 85					.word	ForCommand                       ; $9f FOR
>8b26	69 86					.word	IfCommand                        ; $a0 IF
>8b28	63 8a					.word	Unused1                          ; $a1 PROC
>8b2a	82 89					.word	Command_REPEAT                   ; $a2 REPEAT
>8b2c	ed 8c					.word	Command_WHILE                    ; $a3 WHILE
>8b2e	92 86					.word	EndIf                            ; $a4 ENDIF
>8b30	0e 89					.word	Command_ENDPROC                  ; $a5 ENDPROC
>8b32	d6 85					.word	NextCommand                      ; $a6 NEXT
>8b34	63 8a					.word	Unused4                          ; $a7 THEN
>8b36	8b 89					.word	Command_UNTIL                    ; $a8 UNTIL
>8b38	0e 8d					.word	Command_WEND                     ; $a9 WEND
>8b3a	82 9f					.word	SyntaxError                      ; $aa BY
>8b3c	ba 83					.word	CallCommand                      ; $ab CALL
>8b3e	09 a4					.word	CircleCommand                    ; $ac CIRCLE
>8b40	f4 83					.word	ClearCommand                     ; $ad CLEAR
>8b42	4c 84					.word	ClearScreen                      ; $ae CLS
>8b44	82 9f					.word	SyntaxError                      ; $af COLOR
>8b46	82 9f					.word	SyntaxError                      ; $b0 COLOUR
>8b48	54 84					.word	Command_Data                     ; $b1 DATA
>8b4a	5c 84					.word	DimCommand                       ; $b2 DIM
>8b4c	63 8a					.word	Unused3                          ; $b3 DOWNTO
>8b4e	8b 86					.word	ElseCode                         ; $b4 ELSE
>8b50	82 9f					.word	SyntaxError                      ; $b5 FROM
>8b52	35 a6					.word	GfxCommand                       ; $b6 GFX
>8b54	2f 86					.word	Command_GOSUB                    ; $b7 GOSUB
>8b56	4d 86					.word	GotoCommand                      ; $b8 GOTO
>8b58	82 9f					.word	SyntaxError                      ; $b9 HERE
>8b5a	33 a4					.word	ImageCommand                     ; $ba IMAGE
>8b5c	93 86					.word	LetCommand                       ; $bb LET
>8b5e	88 a4					.word	LineCommand                      ; $bc LINE
>8b60	86 87					.word	Command_LOCAL                    ; $bd LOCAL
>8b62	82 9f					.word	SyntaxError                      ; $be OFF
>8b64	82 9f					.word	SyntaxError                      ; $bf ON
>8b66	82 9f					.word	SyntaxError                      ; $c0 OUTLINE
>8b68	c8 a6					.word	PaletteCommand                   ; $c1 PALETTE
>8b6a	81 a4					.word	PlotCommand                      ; $c2 PLOT
>8b6c	57 88					.word	Command_Print                    ; $c3 PRINT
>8b6e	1c 89					.word	Command_Read                     ; $c4 READ
>8b70	05 a4					.word	RectangleCommand                 ; $c5 RECT
>8b72	75 89					.word	RemCommand                       ; $c6 REM
>8b74	3f 86					.word	Command_RETURN                   ; $c7 RETURN
>8b76	82 9f					.word	SyntaxError                      ; $c8 SOLID
>8b78	14 a4					.word	SpriteCommand                    ; $c9 SPRITE
>8b7a	50 a4					.word	TextCommand                      ; $ca TEXT
>8b7c	63 8a					.word	Unused2                          ; $cb TO
.8b7e					VectorSet1:
>8b7e	82 9f					.word	SyntaxError                      ; $80 !0:EOF
>8b80	82 9f					.word	SyntaxError                      ; $81 !1:SH1
>8b82	82 9f					.word	SyntaxError                      ; $82 !2:SH2
>8b84	8b 83					.word	AssembleCommand                  ; $83 ASSEMBLE
>8b86	aa 83					.word	AssertCommand                    ; $84 ASSERT
>8b88	d5 a5					.word	BitmapCtrl                       ; $85 BITMAP
>8b8a	19 85					.word	EndCommand                       ; $86 END
>8b8c	e8 86					.word	Command_List                     ; $87 LIST
>8b8e	4d 88					.word	NewCommand                       ; $88 NEW
>8b90	a4 89					.word	Command_Restore                  ; $89 RESTORE
>8b92	d6 89					.word	CommandRUN                       ; $8a RUN
>8b94	1a a6					.word	SpritesCtrl                      ; $8b SPRITES
>8b96	20 8c					.word	StopCommand                      ; $8c STOP
.8b98					VectorSet2:
>8b98	82 9f					.word	SyntaxError                      ; $80 !0:EOF
>8b9a	82 9f					.word	SyntaxError                      ; $81 !1:SH1
>8b9c	82 9f					.word	SyntaxError                      ; $82 !2:SH2
>8b9e	41 9e					.word	Assemble_adc                     ; $83 ADC
>8ba0	39 9e					.word	Assemble_and                     ; $84 AND
>8ba2	55 9e					.word	Assemble_asl                     ; $85 ASL
>8ba4	bf 9e					.word	Assemble_bcc                     ; $86 BCC
>8ba6	c3 9e					.word	Assemble_bcs                     ; $87 BCS
>8ba8	cb 9e					.word	Assemble_beq                     ; $88 BEQ
>8baa	82 9e					.word	Assemble_bit                     ; $89 BIT
>8bac	b3 9e					.word	Assemble_bmi                     ; $8a BMI
>8bae	c7 9e					.word	Assemble_bne                     ; $8b BNE
>8bb0	af 9e					.word	Assemble_bpl                     ; $8c BPL
>8bb2	cf 9e					.word	Assemble_bra                     ; $8d BRA
>8bb4	d3 9e					.word	Assemble_brk                     ; $8e BRK
>8bb6	b7 9e					.word	Assemble_bvc                     ; $8f BVC
>8bb8	bb 9e					.word	Assemble_bvs                     ; $90 BVS
>8bba	db 9e					.word	Assemble_clc                     ; $91 CLC
>8bbc	2f 9f					.word	Assemble_cld                     ; $92 CLD
>8bbe	ef 9e					.word	Assemble_cli                     ; $93 CLI
>8bc0	1f 9f					.word	Assemble_clv                     ; $94 CLV
>8bc2	4d 9e					.word	Assemble_cmp                     ; $95 CMP
>8bc4	96 9e					.word	Assemble_cpx                     ; $96 CPX
>8bc6	91 9e					.word	Assemble_cpy                     ; $97 CPY
>8bc8	73 9e					.word	Assemble_dec                     ; $98 DEC
>8bca	2b 9f					.word	Assemble_dex                     ; $99 DEX
>8bcc	07 9f					.word	Assemble_dey                     ; $9a DEY
>8bce	3d 9e					.word	Assemble_eor                     ; $9b EOR
>8bd0	78 9e					.word	Assemble_inc                     ; $9c INC
>8bd2	3b 9f					.word	Assemble_inx                     ; $9d INX
>8bd4	27 9f					.word	Assemble_iny                     ; $9e INY
>8bd6	aa 9e					.word	Assemble_jmp                     ; $9f JMP
>8bd8	a5 9e					.word	Assemble_jsr                     ; $a0 JSR
>8bda	49 9e					.word	Assemble_lda                     ; $a1 LDA
>8bdc	6e 9e					.word	Assemble_ldx                     ; $a2 LDX
>8bde	8c 9e					.word	Assemble_ldy                     ; $a3 LDY
>8be0	5f 9e					.word	Assemble_lsr                     ; $a4 LSR
>8be2	3f 9f					.word	Assemble_nop                     ; $a5 NOP
>8be4	35 9e					.word	Assemble_ora                     ; $a6 ORA
>8be6	eb 9e					.word	Assemble_pha                     ; $a7 PHA
>8be8	d7 9e					.word	Assemble_php                     ; $a8 PHP
>8bea	33 9f					.word	Assemble_phx                     ; $a9 PHX
>8bec	f3 9e					.word	Assemble_phy                     ; $aa PHY
>8bee	fb 9e					.word	Assemble_pla                     ; $ab PLA
>8bf0	df 9e					.word	Assemble_plp                     ; $ac PLP
>8bf2	47 9f					.word	Assemble_plx                     ; $ad PLX
>8bf4	03 9f					.word	Assemble_ply                     ; $ae PLY
>8bf6	5a 9e					.word	Assemble_rol                     ; $af ROL
>8bf8	64 9e					.word	Assemble_ror                     ; $b0 ROR
>8bfa	e7 9e					.word	Assemble_rti                     ; $b1 RTI
>8bfc	f7 9e					.word	Assemble_rts                     ; $b2 RTS
>8bfe	51 9e					.word	Assemble_sbc                     ; $b3 SBC
>8c00	e3 9e					.word	Assemble_sec                     ; $b4 SEC
>8c02	43 9f					.word	Assemble_sed                     ; $b5 SED
>8c04	ff 9e					.word	Assemble_sei                     ; $b6 SEI
>8c06	45 9e					.word	Assemble_sta                     ; $b7 STA
>8c08	37 9f					.word	Assemble_stp                     ; $b8 STP
>8c0a	69 9e					.word	Assemble_stx                     ; $b9 STX
>8c0c	87 9e					.word	Assemble_sty                     ; $ba STY
>8c0e	7d 9e					.word	Assemble_stz                     ; $bb STZ
>8c10	1b 9f					.word	Assemble_tax                     ; $bc TAX
>8c12	17 9f					.word	Assemble_tay                     ; $bd TAY
>8c14	a0 9e					.word	Assemble_trb                     ; $be TRB
>8c16	9b 9e					.word	Assemble_tsb                     ; $bf TSB
>8c18	23 9f					.word	Assemble_tsx                     ; $c0 TSX
>8c1a	0b 9f					.word	Assemble_txa                     ; $c1 TXA
>8c1c	13 9f					.word	Assemble_txs                     ; $c2 TXS
>8c1e	0f 9f					.word	Assemble_tya                     ; $c3 TYA

;******  Return to file: ./common/commands/run.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/stop.asm

.8c20					StopCommand:
.8c20	a9 08		lda #$08		lda	#8
.8c22	4c 35 8d	jmp $8d35		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/procscan.asm

.8c25					ProcedureScan:
.8c25	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8c27	85 30		sta $30				sta 	codePtr
.8c29	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8c2b	85 31		sta $31				sta 	codePtr+1
.8c2d					_PSLoop:
.8c2d	b2 30		lda ($30)			lda 	(codePtr)
.8c2f	f0 42		beq $8c73			beq 	_PSExit
.8c31	a0 03		ldy #$03			ldy 	#3 							; is it PROC ?
.8c33	b1 30		lda ($30),y			lda 	(codePtr),y
.8c35	c9 a1		cmp #$a1			cmp 	#KWD_PROC
.8c37	d0 2d		bne $8c66			bne 	_PSNext
.8c39	c8		iny				iny 								; get the address of the record to zTemp0 and
.8c3a	b1 30		lda ($30),y			lda 	(codePtr),y
.8c3c	29 c0		and #$c0			and 	#$C0
.8c3e	c9 40		cmp #$40			cmp 	#$40
.8c40	d0 32		bne $8c74			bne 	_PSSyntax
.8c42	b1 30		lda ($30),y			lda 	(codePtr),y
.8c44	18		clc				clc
.8c45	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8c47	85 37		sta $37				sta 	zTemp0+1
.8c49	c8		iny				iny 								; LSB
.8c4a	b1 30		lda ($30),y			lda 	(codePtr),y
.8c4c	85 36		sta $36				sta 	zTemp0
.8c4e	c8		iny				iny 								; character after variable call.
.8c4f	98		tya				tya 								; save Y offset at +7
.8c50	a0 07		ldy #$07			ldy 	#7
.8c52	91 36		sta ($36),y			sta 	(zTemp0),y
.8c54	a9 18		lda #$18			lda 	#NSTProcedure 				; mark it as procedure
.8c56	a0 02		ldy #$02			ldy 	#2
.8c58	91 36		sta ($36),y			sta 	(zTemp0),y
.8c5a	a2 00		ldx #$00			ldx 	#0 							; copy code-Ptr in
.8c5c					_PSCopy:
.8c5c	b5 30		lda $30,x			lda 	safePtr,x
.8c5e	c8		iny				iny
.8c5f	91 36		sta ($36),y			sta 	(zTemp0),y
.8c61	e8		inx				inx
.8c62	e0 04		cpx #$04			cpx 	#4
.8c64	d0 f6		bne $8c5c			bne 	_PSCopy
.8c66					_PSNext:
.8c66	18		clc				clc
.8c67	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8c69	65 30		adc $30				adc 	codePtr
.8c6b	85 30		sta $30				sta 	codePtr
.8c6d	90 02		bcc $8c71			bcc 	_CREExit
.8c6f	e6 31		inc $31				inc 	codePtr+1
.8c71					_CREExit:
.8c71	80 ba		bra $8c2d			bra 	_PSLoop
.8c73					_PSExit:
.8c73	60		rts				rts
.8c74					_PSSyntax:
.8c74	4c 82 9f	jmp $9f82			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/scanforward.asm

.8c77					ScanForward:
.8c77	64 38		stz $38				stz 	zTemp1 						; this is the structure count - goes up with WHILE/FOR
.8c79	86 37		stx $37				stx 	zTemp0+1
.8c7b	85 36		sta $36				sta 	zTemp0 						; save XA as the two possible matches.
.8c7d					_ScanLoop:
.8c7d	b1 30		lda ($30),y			lda 	(codePtr),y
.8c7f	c8		iny				iny
.8c80	a6 38		ldx $38				ldx 	zTemp1 						; if the count is > 0 cannot match as in substructure
.8c82	d0 0e		bne $8c92			bne 	_ScanGoNext
.8c84	c5 36		cmp $36				cmp 	zTemp0 						; see if either matches
.8c86	f0 04		beq $8c8c			beq 	_ScanMatch
.8c88	c5 37		cmp $37				cmp 	zTemp0+1
.8c8a	d0 06		bne $8c92			bne 	_ScanGoNext
.8c8c					_ScanMatch:
.8c8c	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if asked for EOL, backtrack.
.8c8e	d0 01		bne $8c91			bne 	_ScanNotEndEOL
.8c90	88		dey				dey
.8c91					_ScanNotEndEOL:
.8c91	60		rts				rts
.8c92					_ScanGoNext:
.8c92	20 97 8c	jsr $8c97			jsr  	ScanForwardOne
.8c95	80 e6		bra $8c7d			bra 	_ScanLoop
.8c97					ScanForwardOne:
.8c97	c9 40		cmp #$40			cmp 	#$40 						; if 00-3F, punctuation characters, loop back
.8c99	90 3e		bcc $8cd9			bcc 	_SFWExit
.8c9b	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if 40-82, skip one extra.
.8c9d	90 18		bcc $8cb7			bcc 	_ScanSkipOne
.8c9f	c9 fc		cmp #$fc			cmp 	#$FC 						; FC-FF are data skips
.8ca1	b0 2f		bcs $8cd2			bcs 	_ScanSkipData
.8ca3	c9 9f		cmp #$9f			cmp 	#KWC_FIRST_STRUCTURE 		; structure keyword ?
.8ca5	90 32		bcc $8cd9			bcc 	_SFWExit 					; if not, ordinary keywords.
.8ca7	c9 aa		cmp #$aa			cmp 	#KWC_LAST_STRUCTURE+1
.8ca9	b0 2e		bcs $8cd9			bcs 	_SFWExit
.8cab	c6 38		dec $38				dec 	zTemp1 						; decrement the sructure count
.8cad	c9 a4		cmp #$a4			cmp 	#KWC_FIRST_STRUCTURE_DEC 	; back if it is a dec structure (e.g. WEND/NEXT)
.8caf	b0 28		bcs $8cd9			bcs 	_SFWExit
.8cb1	e6 38		inc $38				inc 	zTemp1 						; so it's an increment structure
.8cb3	e6 38		inc $38				inc 	zTemp1 						; twice to undo the dec
.8cb5	80 22		bra $8cd9			bra 	_SFWExit
.8cb7					_ScanSkipOne:
.8cb7	c8		iny				iny 								; consume the extra one.
.8cb8	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if not EOL loop back
.8cba	d0 1d		bne $8cd9			bne 	_SFWExit
.8cbc	18		clc				clc
.8cbd	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8cbf	65 30		adc $30				adc 	codePtr
.8cc1	85 30		sta $30				sta 	codePtr
.8cc3	90 02		bcc $8cc7			bcc 	_CREExit
.8cc5	e6 31		inc $31				inc 	codePtr+1
.8cc7					_CREExit:
.8cc7	a0 03		ldy #$03			ldy 	#3 							; scan start position.
.8cc9	b2 30		lda ($30)			lda 	(codePtr)
.8ccb	d0 0c		bne $8cd9			bne 	_SFWExit 					; if not zero, more to scan
.8ccd	a9 13		lda #$13		lda	#19
.8ccf	4c 35 8d	jmp $8d35		jmp	ErrorHandler
.8cd2					_ScanSkipData:
.8cd2	88		dey				dey 								; point at data token
.8cd3	c8		iny				iny
.8cd4	98		tya				tya
.8cd5	38		sec				sec
.8cd6	71 30		adc ($30),y			adc 	(codePtr),y
.8cd8	a8		tay				tay
.8cd9					_SFWExit:
.8cd9	60		rts				rts
.8cda					ScanGetCurrentLineStep:
.8cda	64 38		stz $38				stz 	zTemp1
.8cdc	a0 03		ldy #$03			ldy 	#3
.8cde					_SGCLSLoop:
.8cde	b1 30		lda ($30),y			lda 	(codePtr),y
.8ce0	c8		iny				iny
.8ce1	c9 80		cmp #$80			cmp 	#KWC_EOL	 				; if EOL exit
.8ce3	f0 05		beq $8cea			beq 	_SGCLSExit
.8ce5	20 97 8c	jsr $8c97			jsr 	ScanForwardOne
.8ce8	80 f4		bra $8cde			bra 	_SGCLSLoop
.8cea					_SGCLSExit:
.8cea	a5 38		lda $38				lda 	zTemp1
.8cec	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/while.asm

.8ced					Command_WHILE:
.8ced	5a		phy				phy 								; save position of the test
.8cee	a2 00		ldx #$00			ldx 	#0
.8cf0	20 21 9d	jsr $9d21			jsr 	EvaluateNumber 				; work out the number
.8cf3	20 28 9e	jsr $9e28			jsr 	NSMIsZero 					; check if zero
.8cf6	f0 0e		beq $8d06			beq 	_WHExitLoop 				; if so exit the loop
.8cf8	98		tya				tya 								; position *after* test.
.8cf9	7a		ply				ply 								; restore position before test, at WHILE
.8cfa	88		dey				dey
.8cfb	48		pha				pha 								; push after test on the stack
.8cfc	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; allocate 6 bytes on the return stack.
.8cfe	20 5c a2	jsr $a25c			jsr 	StackOpen
.8d01	20 a0 a2	jsr $a2a0			jsr 	STKSaveCodePosition 		; save loop position - where the test value is.
.8d04	7a		ply				ply 								; restore the position *after* the test
.8d05	60		rts				rts
.8d06					_WHExitLoop:
.8d06	68		pla				pla 								; throw post loop position
.8d07	a9 a9		lda #$a9			lda 	#KWD_WEND 					; scan forward past WEND
.8d09	aa		tax				tax
.8d0a	20 77 8c	jsr $8c77			jsr 	ScanForward
.8d0d	60		rts				rts
.8d0e					Command_WEND:
.8d0e	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; check WHILE is TOS
.8d10	a2 10		ldx #$10			ldx 	#ERRID_WHILE 				; this error
.8d12	20 88 a2	jsr $a288			jsr 	StackCheckFrame
.8d15	20 b1 a2	jsr $a2b1			jsr 	STKLoadCodePosition 		; loop back
.8d18	20 7a a2	jsr $a27a			jsr 	StackClose		 			; erase the frame
.8d1b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/charcheck.asm

.8d1c					CheckRightBracket:
.8d1c	b1 30		lda ($30),y			lda 	(codePtr),y
.8d1e	c8		iny				iny
.8d1f	c9 29		cmp #$29			cmp 	#KWD_RPAREN 						; exit if matches
.8d21	d0 0f		bne $8d32			bne 	CNAFail
.8d23	60		rts				rts
.8d24					CheckComma:
.8d24	b1 30		lda ($30),y			lda 	(codePtr),y
.8d26	c8		iny				iny
.8d27	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 						; exit if matches
.8d29	d0 07		bne $8d32			bne 	CNAFail
.8d2b	60		rts				rts
.8d2c					CheckNextA:
.8d2c	d1 30		cmp ($30),y			cmp 	(codePtr),y
.8d2e	d0 02		bne $8d32			bne 	CNAFail
.8d30	c8		iny				iny 								; skip character
.8d31	60		rts				rts 								; and exit
.8d32					CNAFail:
.8d32	4c 82 9f	jmp $9f82			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/errors.asm

.8d35					ErrorHandler:
.8d35	a8		tay				tay 								; find the error text
.8d36	f0 49		beq $8d81			beq 	_EHEnd
.8d38	a2 00		ldx #$00			ldx 	#0
.8d3a	a9 9b		lda #$9b			lda 	#((ErrorText) & $FF)
.8d3c	85 36		sta $36				sta 	0+zTemp0
.8d3e	a9 9f		lda #$9f			lda 	#((ErrorText) >> 8)
.8d40	85 37		sta $37				sta 	1+zTemp0
.8d42					_EHFind:
.8d42	88		dey				dey 								; found the error text ?
.8d43	f0 0e		beq $8d53			beq 	_EHFound
.8d45					_EHFindZero:
.8d45	b2 36		lda ($36)			lda 	(zTemp0) 					; find the next error
.8d47	e6 36		inc $36				inc 	zTemp0
.8d49	d0 02		bne $8d4d			bne 	_EHFNoCarry
.8d4b	e6 37		inc $37				inc 	zTemp0+1
.8d4d					_EHFNoCarry:
.8d4d	c9 00		cmp #$00			cmp 	#0
.8d4f	d0 f4		bne $8d45			bne 	_EHFindZero
.8d51	80 ef		bra $8d42			bra 	_EHFind
.8d53					_EHFound:
.8d53	a5 36		lda $36				lda 	zTemp0 						; print message
.8d55	a6 37		ldx $37				ldx 	zTemp0+1
.8d57	20 8e 8d	jsr $8d8e			jsr 	PrintStringXA
.8d5a	a0 01		ldy #$01			ldy 	#1 							; if line number zero don't print i
.8d5c	b1 30		lda ($30),y			lda 	(codePtr),y
.8d5e	d0 05		bne $8d65			bne 	_EHAtMsg
.8d60	c8		iny				iny
.8d61	b1 30		lda ($30),y			lda 	(codePtr),y
.8d63	f0 17		beq $8d7c			beq 	_EHCREnd
.8d65					_EHAtMsg:
.8d65	a2 8d		ldx #$8d			ldx 	#_AtMsg >> 8 				; print " at "
.8d67	a9 84		lda #$84			lda 	#_AtMsg & $FF
.8d69	20 8e 8d	jsr $8d8e			jsr 	PrintStringXA
.8d6c	a0 01		ldy #$01			ldy 	#1 							; line number into XA
.8d6e	b1 30		lda ($30),y			lda 	(codePtr),y
.8d70	48		pha				pha
.8d71	c8		iny				iny
.8d72	b1 30		lda ($30),y			lda 	(codePtr),y
.8d74	aa		tax				tax
.8d75	68		pla				pla
.8d76	20 47 92	jsr $9247			jsr 	ConvertInt16 				; convert XA to string
.8d79	20 8e 8d	jsr $8d8e			jsr 	PrintStringXA 				; and print it.
.8d7c					_EHCREnd:
.8d7c	a9 0d		lda #$0d			lda 	#13 						; new line
.8d7e	20 28 a7	jsr $a728			jsr 	EXTPrintCharacter
.8d81					_EHEnd:
.8d81	4c 5b 83	jmp $835b			jmp 	WarmStart
>8d84	20 61 74 20 6c 69 6e 65		_AtMsg:	.text 	" at line ",0
>8d8c	20 00
.8d8e					PrintStringXA:
.8d8e	5a		phy				phy
.8d8f	86 37		stx $37				stx 	zTemp0+1
.8d91	85 36		sta $36				sta 	zTemp0
.8d93	a0 00		ldy #$00			ldy 	#0
.8d95					_PSXALoop:
.8d95	b1 36		lda ($36),y			lda 	(zTemp0),y
.8d97	f0 06		beq $8d9f			beq 	_PSXAExit
.8d99	20 28 a7	jsr $a728			jsr 	EXTPrintCharacter
.8d9c	c8		iny				iny
.8d9d	80 f6		bra $8d95			bra 	_PSXALoop
.8d9f					_PSXAExit:
.8d9f	7a		ply				ply
.8da0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/compare.asm

.8da1					UnaryTrue:
.8da1	fa		plx				plx
.8da2					ReturnTrue:
.8da2	a9 01		lda #$01			lda 	#1  						; set to 1
.8da4	20 fa 9d	jsr $9dfa			jsr 	NSMSetByte
.8da7	a9 80		lda #$80			lda 	#$80 						; set sign flag, so it is -1
.8da9	9d 00 04	sta $0400,x			sta 	NSStatus,x
.8dac	60		rts				rts
.8dad					UnaryFalse:
.8dad	fa		plx				plx
.8dae					ReturnFalse:
.8dae	4c f8 9d	jmp $9df8			jmp 	NSMSetZero 					; set it all to zero
.8db1					BinaryCompareEqual:
.8db1	fa		plx				plx
.8db2	20 ed 8d	jsr $8ded			jsr 	CompareBaseCode
.8db5	c9 00		cmp #$00			cmp 	#0
.8db7	f0 e9		beq $8da2			beq 	ReturnTrue
.8db9	80 f3		bra $8dae			bra 	ReturnFalse
.8dbb					BinaryCompareLess:
.8dbb	fa		plx				plx
.8dbc	20 ed 8d	jsr $8ded			jsr 	CompareBaseCode
.8dbf	c9 ff		cmp #$ff			cmp 	#$FF
.8dc1	f0 df		beq $8da2			beq 	ReturnTrue
.8dc3	80 e9		bra $8dae			bra 	ReturnFalse
.8dc5					BinaryCompareGreater:
.8dc5	fa		plx				plx
.8dc6	20 ed 8d	jsr $8ded			jsr 	CompareBaseCode
.8dc9	c9 01		cmp #$01			cmp 	#1
.8dcb	f0 d5		beq $8da2			beq 	ReturnTrue
.8dcd	80 df		bra $8dae			bra 	ReturnFalse
.8dcf					BinaryCompareNotEqual:
.8dcf	fa		plx				plx
.8dd0	20 ed 8d	jsr $8ded			jsr 	CompareBaseCode
.8dd3	c9 00		cmp #$00			cmp 	#0
.8dd5	d0 cb		bne $8da2			bne 	ReturnTrue
.8dd7	80 d5		bra $8dae			bra 	ReturnFalse
.8dd9					BinaryCompareLessEqual:
.8dd9	fa		plx				plx
.8dda	20 ed 8d	jsr $8ded			jsr 	CompareBaseCode
.8ddd	c9 01		cmp #$01			cmp 	#1
.8ddf	d0 c1		bne $8da2			bne 	ReturnTrue
.8de1	80 cb		bra $8dae			bra 	ReturnFalse
.8de3					BinaryCompareGreaterEqual:
.8de3	fa		plx				plx
.8de4	20 ed 8d	jsr $8ded			jsr 	CompareBaseCode
.8de7	c9 ff		cmp #$ff			cmp 	#$FF
.8de9	d0 b7		bne $8da2			bne 	ReturnTrue
.8deb	80 c1		bra $8dae			bra 	ReturnFalse
.8ded					CompareBaseCode:
.8ded	20 fd 95	jsr $95fd			jsr 	DereferenceTopTwo 			; make both values if references.
.8df0	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if either is a string.
.8df3	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.8df6	29 10		and #$10			and 	#NSTString
.8df8	d0 40		bne $8e3a			bne 	_CBCString
.8dfa	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check both are integers
.8dfd	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.8e00	d0 3b		bne $8e3d			bne 	_CBCFloat
.8e02	bd 00 04	lda $0400,x			lda 	NSStatus,x
.8e05	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.8e08	29 08		and #$08			and 	#NSTFloat
.8e0a	d0 31		bne $8e3d			bne 	_CBCFloat
.8e0c	20 40 8e	jsr $8e40			jsr 	CompareFixMinusZero
.8e0f	e8		inx				inx
.8e10	20 40 8e	jsr $8e40			jsr 	CompareFixMinusZero
.8e13	ca		dex				dex
.8e14	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; are the signs different ?
.8e17	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.8e1a	10 0b		bpl $8e27			bpl 	_CDCSameSign
.8e1c	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; if first one is -ve
.8e1f	30 16		bmi $8e37			bmi 	_CBCLess 					; return $FF
.8e21					_CBCGreater:
.8e21	a9 01		lda #$01			lda 	#1
.8e23	60		rts				rts
.8e24					_CBCEqual:
.8e24	a9 00		lda #$00			lda 	#0
.8e26	60		rts				rts
.8e27					_CDCSameSign:
.8e27	20 93 90	jsr $9093			jsr 	SubTopTwoStack 				; unsigned subtract
.8e2a	20 28 9e	jsr $9e28			jsr 	NSMIsZero 					; or the mantissa together
.8e2d	f0 f5		beq $8e24			beq 	_CBCEqual 					; -0 == 0
.8e2f	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; sign of the result. if +ve return $01 else return $FF
.8e32	5d 01 04	eor $0401,x			eor 	NSStatus+1,x 				; however if both were -ve this is inverted
.8e35	10 ea		bpl $8e21			bpl 	_CBCGreater
.8e37					_CBCLess:
.8e37	a9 ff		lda #$ff			lda 	#$FF
.8e39	60		rts				rts
.8e3a					_CBCString:
.8e3a	4c e9 8f	jmp $8fe9			jmp 	CompareStrings
.8e3d					_CBCFloat:
.8e3d	4c ca 93	jmp $93ca			jmp 	CompareFloat
.8e40					CompareFixMinusZero:
.8e40	20 28 9e	jsr $9e28			jsr 	NSMIsZero
.8e43	d0 03		bne $8e48			bne 	_CFXMZNotZero
.8e45	9e 00 04	stz $0400,x			stz 	NSStatus,x
.8e48					_CFXMZNotZero:
.8e48	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/concat.asm

.8e49					StringConcat:
.8e49	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check both strings
.8e4c	3d 01 04	and $0401,x			and 	NSStatus+1,x
.8e4f	29 18		and #$18			and 	#NSBTypeMask
.8e51	c9 10		cmp #$10			cmp 	#NSTString
.8e53	d0 4e		bne $8ea3			bne		_SCType
.8e55	64 38		stz $38				stz 	zTemp1 						; counting total length
.8e57	e8		inx				inx
.8e58	20 76 8e	jsr $8e76			jsr 	_SCSetupZ0 					; setup for second
.8e5b	20 81 8e	jsr $8e81			jsr 	_SCLengthZ0 				; length for second
.8e5e	ca		dex				dex
.8e5f	20 76 8e	jsr $8e76			jsr 	_SCSetupZ0 					; setup for first
.8e62	20 81 8e	jsr $8e81			jsr 	_SCLengthZ0 				; length for first
.8e65	a5 38		lda $38				lda 	zTemp1 						; allocate memory
.8e67	20 4f a3	jsr $a34f			jsr 	StringTempAllocate
.8e6a	20 94 8e	jsr $8e94			jsr 	_SCCopy 					; copy first out, using zTemp0 from above
.8e6d	e8		inx				inx
.8e6e	20 76 8e	jsr $8e76			jsr 	_SCSetupZ0 					; copy second out
.8e71	20 94 8e	jsr $8e94			jsr 	_SCCopy
.8e74	ca		dex				dex
.8e75	60		rts				rts
.8e76					_SCSetupZ0:
.8e76	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.8e79	85 36		sta $36				sta 	zTemp0
.8e7b	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8e7e	85 37		sta $37				sta 	zTemp0+1
.8e80	60		rts				rts
.8e81					_SCLengthZ0:
.8e81	5a		phy				phy
.8e82	a0 00		ldy #$00			ldy 	#0
.8e84					_SCLenLoop:
.8e84	b1 36		lda ($36),y			lda 	(zTemp0),y
.8e86	f0 0a		beq $8e92			beq 	_SCLExit
.8e88	c8		iny				iny
.8e89	e6 38		inc $38				inc 	zTemp1
.8e8b	10 f7		bpl $8e84			bpl		_SCLenLoop
.8e8d	a9 09		lda #$09		lda	#9
.8e8f	4c 35 8d	jmp $8d35		jmp	ErrorHandler
.8e92					_SCLExit:
.8e92	7a		ply				ply
.8e93	60		rts				rts
.8e94					_SCCopy:
.8e94	5a		phy				phy
.8e95	a0 00		ldy #$00			ldy 	#0
.8e97					_SCCopyLoop:
.8e97	b1 36		lda ($36),y			lda 	(zTemp0),y
.8e99	f0 06		beq $8ea1			beq 	_SCCExit
.8e9b	20 8d a3	jsr $a38d			jsr 	StringTempWrite
.8e9e	c8		iny				iny
.8e9f	80 f6		bra $8e97			bra 	_SCCopyLoop
.8ea1					_SCCExit:
.8ea1	7a		ply				ply
.8ea2	60		rts				rts
.8ea3					_SCType:
.8ea3	4c 8c 9f	jmp $9f8c			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/divide.asm

.8ea6					IntegerDivide:
.8ea6	fa		plx				plx
.8ea7	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.8eaa	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.8ead	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8eae	0a		asl a				asl 	a
.8eaf	10 05		bpl $8eb6			bpl 	_NotRef
.8eb1	48		pha				pha
.8eb2	20 fd 95	jsr $95fd			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8eb5	68		pla				pla
.8eb6					_NotRef:
.8eb6	0a		asl a				asl 	a
.8eb7	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8eb9	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8ebc	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.8ebf	f0 03		beq $8ec4			beq 	_IntegerCode 				; if clear, then we have two integers
.8ec1	4c 8c 9f	jmp $9f8c			jmp 	TypeError 					; anything else, type mismatch.
.8ec4					_IntegerCode:
.8ec4	20 e6 8e	jsr $8ee6			jsr 	CheckDivideZero 			; do div zero check
.8ec7	20 1e 8f	jsr $8f1e			jsr 	Int32Divide 				; do the division
.8eca	20 db 8f	jsr $8fdb			jsr 	CalculateSign 				; calculate result sign
.8ecd					NSMCopyPlusTwoToZero:
.8ecd	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.8ed0	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.8ed3	bd 12 04	lda $0412,x			lda 	NSMantissa1+2,x
.8ed6	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.8ed9	bd 1a 04	lda $041a,x			lda 	NSMantissa2+2,x
.8edc	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.8edf	bd 22 04	lda $0422,x			lda 	NSMantissa3+2,x
.8ee2	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.8ee5	60		rts				rts
.8ee6					CheckDivideZero:
.8ee6	e8		inx				inx
.8ee7	20 28 9e	jsr $9e28			jsr 	NSMIsZero
.8eea	f0 02		beq $8eee			beq 	_CDVError
.8eec	ca		dex				dex
.8eed	60		rts				rts
.8eee					_CDVError:
.8eee	a9 03		lda #$03		lda	#3
.8ef0	4c 35 8d	jmp $8d35		jmp	ErrorHandler
.8ef3					IntegerModulus:
.8ef3	fa		plx				plx
.8ef4	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.8ef7	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.8efa	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8efb	0a		asl a				asl 	a
.8efc	10 05		bpl $8f03			bpl 	_NotRef
.8efe	48		pha				pha
.8eff	20 fd 95	jsr $95fd			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8f02	68		pla				pla
.8f03					_NotRef:
.8f03	0a		asl a				asl 	a
.8f04	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8f06	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8f09	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.8f0c	f0 03		beq $8f11			beq 	_IntegerCode 				; if clear, then we have two integers
.8f0e	4c 8c 9f	jmp $9f8c			jmp 	TypeError 					; anything else, type mismatch.
.8f11					_IntegerCode:
.8f11					IntegerModulusNoCheck:
.8f11	20 e6 8e	jsr $8ee6			jsr 	CheckDivideZero 			; do div zero check
.8f14	20 1e 8f	jsr $8f1e			jsr 	Int32Divide 				; do the division
.8f17	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; clear the sign bit.
.8f1a	5e 00 04	lsr $0400,x			lsr 	NSStatus,x
.8f1d	60		rts				rts
.8f1e					Int32Divide:
.8f1e	48		pha				pha 								; save AXY
.8f1f	5a		phy				phy
.8f20	20 cf 9d	jsr $9dcf			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.8f23	20 f4 9d	jsr $9df4			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.8f26	a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.8f28					_I32DivideLoop:
.8f28	e8		inx				inx
.8f29	e8		inx				inx
.8f2a	20 0d 9e	jsr $9e0d			jsr 	NSMShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.8f2d	ca		dex				dex
.8f2e	ca		dex				dex
.8f2f	20 0e 9e	jsr $9e0e			jsr 	NSMRotateLeft
.8f32	20 5e 8f	jsr $8f5e			jsr 	DivideCheckSubtract 		; check if subtract possible
.8f35	90 03		bcc $8f3a			bcc 	_I32DivideNoCarryIn
.8f37	fe 0a 04	inc $040a,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.8f3a					_I32DivideNoCarryIn:
.8f3a	88		dey				dey 								; loop round till division completed.
.8f3b	d0 eb		bne $8f28			bne 	_I32DivideLoop
.8f3d	7a		ply				ply 								; restore AXY and exit
.8f3e	68		pla				pla
.8f3f	60		rts				rts
.8f40					Int32ShiftDivide:
.8f40	48		pha				pha 								; save AY
.8f41	5a		phy				phy
.8f42	e8		inx				inx 								; clear S[X+2]
.8f43	e8		inx				inx
.8f44	20 f8 9d	jsr $9df8			jsr 	NSMSetZero
.8f47	ca		dex				dex
.8f48	ca		dex				dex
.8f49	a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.8f4b					_I32SDLoop:
.8f4b	20 5e 8f	jsr $8f5e			jsr 	DivideCheckSubtract 		; check if subtract possible
.8f4e	e8		inx				inx
.8f4f	e8		inx				inx
.8f50	20 0e 9e	jsr $9e0e			jsr 	NSMRotateLeft				; shift 64 bit FPA left, rotating carry in
.8f53	ca		dex				dex
.8f54	ca		dex				dex
.8f55	20 0e 9e	jsr $9e0e			jsr 	NSMRotateLeft
.8f58	88		dey				dey 	 							; do 31 times
.8f59	d0 f0		bne $8f4b			bne 	_I32SDLoop
.8f5b	7a		ply				ply 								; restore AY and exit
.8f5c	68		pla				pla
.8f5d	60		rts				rts
.8f5e					DivideCheckSubtract:
.8f5e	20 93 90	jsr $9093			jsr 	SubTopTwoStack 				; subtract Stack[X+1] from Stack[X+0]
.8f61	b0 04		bcs $8f67			bcs 	_DCSExit 					; if carry set, then could do, exit
.8f63	20 6d 90	jsr $906d			jsr 	AddTopTwoStack 				; add it back in
.8f66	18		clc				clc 								; and return False
.8f67					_DCSExit:
.8f67	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/multiply.asm

.8f68					MulInteger:
.8f68	fa		plx				plx
.8f69	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.8f6c	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.8f6f	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8f70	0a		asl a				asl 	a
.8f71	10 05		bpl $8f78			bpl 	_NotRef
.8f73	48		pha				pha
.8f74	20 fd 95	jsr $95fd			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8f77	68		pla				pla
.8f78					_NotRef:
.8f78	0a		asl a				asl 	a 							; put MSB of type into A:7
.8f79	30 0b		bmi $8f86			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.8f7b	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8f7e	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.8f81	f0 06		beq $8f89			beq 	_IntegerCode 				; if clear, then we have two integers
.8f83	4c a1 94	jmp $94a1			jmp 	FloatingPointMultiply 							; otherwise at least one float.
.8f86					_StringData:
.8f86	4c 96 9f	jmp $9f96			jmp 	NotDoneError							; at least one string - don't know both are strings.
.8f89					_IntegerCode:
.8f89	20 96 8f	jsr $8f96			jsr 	MultiplyShort
.8f8c	c9 00		cmp #$00			cmp 	#0
.8f8e	f0 05		beq $8f95			beq 	_MIExit
.8f90	a9 04		lda #$04		lda	#4
.8f92	4c 35 8d	jmp $8d35		jmp	ErrorHandler
.8f95					_MIExit:
.8f95	60		rts				rts
.8f96					MultiplyShort:
.8f96	5a		phy				phy 								; save Y
.8f97	20 cf 9d	jsr $9dcf			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.8f9a	20 f4 9d	jsr $9df4			jsr 	NSMSetZeroMantissaOnly 		; set mantissa S[X] to zero
.8f9d	a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.8f9f					_I32MLoop:
.8f9f	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.8fa2	1d 12 04	ora $0412,x			ora 	NSMantissa1+2,x
.8fa5	1d 1a 04	ora $041a,x			ora 	NSMantissa2+2,x
.8fa8	1d 22 04	ora $0422,x			ora 	NSMantissa3+2,x
.8fab	f0 28		beq $8fd5			beq 	_I32MExit 					; exit if zero
.8fad	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.8fb0	29 01		and #$01			and 	#1
.8fb2	f0 0e		beq $8fc2			beq 	_I32MNoAdd
.8fb4	20 6d 90	jsr $906d			jsr 	AddTopTwoStack 				; if so add S[X+1] to S[X+0]
.8fb7	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.8fba	10 06		bpl $8fc2			bpl 	_I32MNoAdd
.8fbc					_I32ShiftRight:
.8fbc	20 1b 9e	jsr $9e1b			jsr 	NSMShiftRight 				; shift S[X] right
.8fbf	c8		iny				iny 								; increment shift count
.8fc0	80 0a		bra $8fcc			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.8fc2					_I32MNoAdd:
.8fc2	3c 21 04	bit $0421,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.8fc5	70 f5		bvs $8fbc			bvs 	_I32ShiftRight 				; instead.
.8fc7	e8		inx				inx
.8fc8	20 0d 9e	jsr $9e0d			jsr 	NSMShiftLeft 				; shift additive S[X+1] left
.8fcb	ca		dex				dex
.8fcc					_I32MShiftUpper:
.8fcc	e8		inx				inx 								; shift S[X+2] right
.8fcd	e8		inx				inx
.8fce	20 1b 9e	jsr $9e1b			jsr 	NSMShiftRight
.8fd1	ca		dex				dex
.8fd2	ca		dex				dex
.8fd3	80 ca		bra $8f9f			bra 	_I32MLoop 					; try again.
.8fd5					_I32MExit:
.8fd5	20 db 8f	jsr $8fdb			jsr 	CalculateSign
.8fd8	98		tya				tya 								; shift in A
.8fd9	7a		ply				ply 								; restore Y and exit
.8fda	60		rts				rts
.8fdb					CalculateSign:
.8fdb	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.8fde	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; shift result left
.8fe1	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.8fe4	0a		asl a				asl 	a 							; shift bit 7 into carry
.8fe5	7e 00 04	ror $0400,x			ror 	NSStatus,x 					; shift right into status byte.
.8fe8	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/scompare.asm

.8fe9					CompareStrings:
.8fe9	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check both are strings
.8fec	3d 01 04	and $0401,x			and 	NSStatus+1,x
.8fef	29 10		and #$10			and 	#NSBIsString
.8ff1	f0 2c		beq $901f			beq 	_CSTypeError
.8ff3	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy string addresses to zTemp0/1
.8ff6	85 36		sta $36				sta 	zTemp0
.8ff8	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8ffb	85 37		sta $37				sta 	zTemp0+1
.8ffd	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.9000	85 38		sta $38				sta 	zTemp1
.9002	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9005	85 39		sta $39				sta 	zTemp1+1
.9007	5a		phy				phy 								; save Y so we can access strings
.9008	a0 ff		ldy #$ff			ldy 	#$FF 						; -1 for pre increment.
.900a					_CSLoop:
.900a	c8		iny				iny
.900b	b1 36		lda ($36),y			lda 	(zTemp0),y 					; check if they are the same
.900d	d1 38		cmp ($38),y			cmp 	(zTemp1),y
.900f	d0 06		bne $9017			bne 	_CSDifferent
.9011	c9 00		cmp #$00			cmp 	#0 							; reached end ?
.9013	d0 f5		bne $900a			bne 	_CSLoop 					; still comparing
.9015					_CSExit:
.9015	7a		ply				ply 								; reached end, return zero in A from EOS
.9016	60		rts				rts
.9017					_CSDifferent:
.9017	a9 ff		lda #$ff			lda 	#255 						; if < return $FF
.9019	90 fa		bcc $9015			bcc		_CSExit
.901b	a9 01		lda #$01			lda 	#1 							; otherwise return 1.
.901d	80 f6		bra $9015			bra 	_CSExit
.901f					_CSTypeError:
.901f	4c 8c 9f	jmp $9f8c			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/shifts.asm

.9022					ShiftLeft:
.9022	38		sec				sec
.9023	80 01		bra $9026			bra 	ShiftMain
.9025					ShiftRight:
.9025	18		clc				clc
.9026					ShiftMain:
.9026	fa		plx				plx 								; restore X
.9027	08		php				php 								; save direction
.9028	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.902b	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.902e	0a		asl a				asl 	a 							; shift reference bit into sign bit
.902f	0a		asl a				asl 	a
.9030	10 05		bpl $9037			bpl 	_NotRef
.9032	48		pha				pha
.9033	20 fd 95	jsr $95fd			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9036	68		pla				pla
.9037					_NotRef:
.9037	0a		asl a				asl 	a
.9038	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.903a	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.903d	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9040	f0 03		beq $9045			beq 	_IntegerCode 				; if clear, then we have two integers
.9042	4c 8c 9f	jmp $9f8c			jmp 	TypeError 					; anything else, type mismatch.
.9045					_IntegerCode:
.9045	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; check number < 32
.9048	29 e0		and #$e0			and 	#$E0
.904a	1d 11 04	ora $0411,x			ora 	NSMantissa1+1,x
.904d	1d 19 04	ora $0419,x			ora 	NSMantissa2+1,x
.9050	1d 21 04	ora $0421,x			ora 	NSMantissa3+1,x
.9053	d0 13		bne $9068			bne 	_SMExit0 					; if >= 32 it will always return zero.
.9055					_SMLoop:
.9055	de 09 04	dec $0409,x			dec 	NSMantissa0+1,x 			; predecrement, could do << 0
.9058	30 11		bmi $906b			bmi 	_SMExit 					; exit if done.
.905a	28		plp				plp 								; restore direcition setting
.905b	08		php				php
.905c	90 05		bcc $9063			bcc 	_SMRight
.905e	20 0d 9e	jsr $9e0d			jsr 	NSMShiftLeft 				; shift left if CS
.9061	80 f2		bra $9055			bra 	_SMLoop
.9063					_SMRight:
.9063	20 1b 9e	jsr $9e1b			jsr 	NSMShiftRight 				; shift right if CC
.9066	80 ed		bra $9055			bra 	_SMLoop
.9068					_SMExit0:
.9068	20 f8 9d	jsr $9df8			jsr 	NSMSetZero 					; return zero.
.906b					_SMExit:
.906b	28		plp				plp 								; throw direction
.906c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/simple.asm

.906d					AddTopTwoStack:
.906d	18		clc				clc
.906e	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9071	7d 09 04	adc $0409,x			adc 		NSMantissa0+1,x
.9074	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9077	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.907a	7d 11 04	adc $0411,x			adc 		NSMantissa1+1,x
.907d	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9080	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9083	7d 19 04	adc $0419,x			adc 		NSMantissa2+1,x
.9086	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9089	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.908c	7d 21 04	adc $0421,x			adc 		NSMantissa3+1,x
.908f	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9092	60		rts				rts
.9093					SubTopTwoStack:
.9093	38		sec				sec
.9094	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9097	fd 09 04	sbc $0409,x			sbc 		NSMantissa0+1,x
.909a	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.909d	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.90a0	fd 11 04	sbc $0411,x			sbc 		NSMantissa1+1,x
.90a3	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.90a6	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.90a9	fd 19 04	sbc $0419,x			sbc 		NSMantissa2+1,x
.90ac	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.90af	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.90b2	fd 21 04	sbc $0421,x			sbc 		NSMantissa3+1,x
.90b5	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.90b8	60		rts				rts
.90b9					AddInteger:
.90b9	fa		plx				plx
.90ba	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.90bd	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.90c0	0a		asl a				asl 	a 							; shift reference bit into sign bit
.90c1	0a		asl a				asl 	a
.90c2	10 05		bpl $90c9			bpl 	_NotRef
.90c4	48		pha				pha
.90c5	20 fd 95	jsr $95fd			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.90c8	68		pla				pla
.90c9					_NotRef:
.90c9	0a		asl a				asl 	a 							; put MSB of type into A:7
.90ca	30 0b		bmi $90d7			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.90cc	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.90cf	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.90d2	f0 06		beq $90da			beq 	_IntegerCode 				; if clear, then we have two integers
.90d4	4c 21 93	jmp $9321			jmp 	FloatingPointAdd 							; otherwise at least one float.
.90d7					_StringData:
.90d7	4c 49 8e	jmp $8e49			jmp 	StringConcat							; at least one string - don't know both are strings.
.90da					_IntegerCode:
.90da					AddCode:
.90da	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.90dd	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.90e0	10 8b		bpl $906d			bpl 	AddTopTwoStack
.90e2	20 93 90	jsr $9093			jsr 	SubTopTwoStack 				; do a physical subtraction
.90e5	3c 20 04	bit $0420,x			bit 	NSMantissa3,x 				; result is +ve, okay
.90e8	10 09		bpl $90f3			bpl 	_AddExit
.90ea	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; sign is that of 2nd value
.90ed	9d 00 04	sta $0400,x			sta 	NSStatus,x
.90f0	20 ad 9d	jsr $9dad			jsr 	NSMNegateMantissa 			; negate the mantissa and exit
.90f3					_AddExit:
.90f3	20 28 9e	jsr $9e28			jsr 	NSMIsZero 					; check for -0
.90f6	d0 03		bne $90fb			bne 	_AddNonZero
.90f8	9e 00 04	stz $0400,x			stz 	NSStatus,x
.90fb					_AddNonZero:
.90fb	60		rts				rts
.90fc					SubInteger:
.90fc	fa		plx				plx
.90fd	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9100	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9103	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9104	0a		asl a				asl 	a
.9105	10 05		bpl $910c			bpl 	_NotRef
.9107	48		pha				pha
.9108	20 fd 95	jsr $95fd			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.910b	68		pla				pla
.910c					_NotRef:
.910c	0a		asl a				asl 	a 							; put MSB of type into A:7
.910d	30 0b		bmi $911a			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.910f	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9112	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9115	f0 06		beq $911d			beq 	_IntegerCode 				; if clear, then we have two integers
.9117	4c 26 93	jmp $9326			jmp 	FloatingPointSub 							; otherwise at least one float.
.911a					_StringData:
.911a	4c 96 9f	jmp $9f96			jmp 	NotDoneError							; at least one string - don't know both are strings.
.911d					_IntegerCode:
.911d	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; negate the second value.
.9120	49 80		eor #$80			eor 	#$80
.9122	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.9125	80 b3		bra $90da			bra 	AddCode 					; and do the same code as add.
.9127					AndInteger:
.9127	fa		plx				plx
.9128	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.912b	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.912e	0a		asl a				asl 	a 							; shift reference bit into sign bit
.912f	0a		asl a				asl 	a
.9130	10 05		bpl $9137			bpl 	_NotRef
.9132	48		pha				pha
.9133	20 fd 95	jsr $95fd			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9136	68		pla				pla
.9137					_NotRef:
.9137	0a		asl a				asl 	a
.9138	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.913a	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.913d	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9140	f0 03		beq $9145			beq 	_IntegerCode 				; if clear, then we have two integers
.9142	4c 8c 9f	jmp $9f8c			jmp 	TypeError 					; anything else, type mismatch.
.9145					_IntegerCode:
.9145	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9148	3d 09 04	and $0409,x			and 		NSMantissa0+1,x
.914b	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.914e	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9151	3d 11 04	and $0411,x			and 		NSMantissa1+1,x
.9154	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9157	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.915a	3d 19 04	and $0419,x			and 		NSMantissa2+1,x
.915d	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9160	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9163	3d 21 04	and $0421,x			and 		NSMantissa3+1,x
.9166	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9169	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.916c	60		rts				rts
.916d					OraInteger:
.916d	fa		plx				plx
.916e	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9171	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9174	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9175	0a		asl a				asl 	a
.9176	10 05		bpl $917d			bpl 	_NotRef
.9178	48		pha				pha
.9179	20 fd 95	jsr $95fd			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.917c	68		pla				pla
.917d					_NotRef:
.917d	0a		asl a				asl 	a
.917e	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9180	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9183	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9186	f0 03		beq $918b			beq 	_IntegerCode 				; if clear, then we have two integers
.9188	4c 8c 9f	jmp $9f8c			jmp 	TypeError 					; anything else, type mismatch.
.918b					_IntegerCode:
.918b	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.918e	1d 09 04	ora $0409,x			ora 		NSMantissa0+1,x
.9191	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9194	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9197	1d 11 04	ora $0411,x			ora 		NSMantissa1+1,x
.919a	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.919d	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.91a0	1d 19 04	ora $0419,x			ora 		NSMantissa2+1,x
.91a3	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.91a6	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.91a9	1d 21 04	ora $0421,x			ora 		NSMantissa3+1,x
.91ac	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.91af	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.91b2	60		rts				rts
.91b3					EorInteger:
.91b3	fa		plx				plx
.91b4	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.91b7	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.91ba	0a		asl a				asl 	a 							; shift reference bit into sign bit
.91bb	0a		asl a				asl 	a
.91bc	10 05		bpl $91c3			bpl 	_NotRef
.91be	48		pha				pha
.91bf	20 fd 95	jsr $95fd			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.91c2	68		pla				pla
.91c3					_NotRef:
.91c3	0a		asl a				asl 	a
.91c4	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.91c6	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.91c9	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.91cc	f0 03		beq $91d1			beq 	_IntegerCode 				; if clear, then we have two integers
.91ce	4c 8c 9f	jmp $9f8c			jmp 	TypeError 					; anything else, type mismatch.
.91d1					_IntegerCode:
.91d1	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.91d4	5d 09 04	eor $0409,x			eor 		NSMantissa0+1,x
.91d7	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.91da	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.91dd	5d 11 04	eor $0411,x			eor 		NSMantissa1+1,x
.91e0	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.91e3	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.91e6	5d 19 04	eor $0419,x			eor 		NSMantissa2+1,x
.91e9	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.91ec	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.91ef	5d 21 04	eor $0421,x			eor 		NSMantissa3+1,x
.91f2	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.91f5	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.91f8	60		rts				rts
.91f9					WordIndirect:
.91f9	fa		plx				plx
.91fa	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.91fd	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9200	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9201	0a		asl a				asl 	a
.9202	10 05		bpl $9209			bpl 	_NotRef
.9204	48		pha				pha
.9205	20 fd 95	jsr $95fd			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9208	68		pla				pla
.9209					_NotRef:
.9209	0a		asl a				asl 	a
.920a	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.920c	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.920f	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9212	f0 03		beq $9217			beq 	_IntegerCode 				; if clear, then we have two integers
.9214	4c 8c 9f	jmp $9f8c			jmp 	TypeError 					; anything else, type mismatch.
.9217					_IntegerCode:
.9217	20 da 90	jsr $90da			jsr 	AddCode 					; add the two values
.921a	a9 22		lda #$22			lda 	#NSBIsReference+2 			; make a 2 byte reference
.921c	9d 00 04	sta $0400,x			sta 	NSStatus,x
.921f	60		rts				rts
.9220					ByteIndirect:
.9220	fa		plx				plx
.9221	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9224	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9227	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9228	0a		asl a				asl 	a
.9229	10 05		bpl $9230			bpl 	_NotRef
.922b	48		pha				pha
.922c	20 fd 95	jsr $95fd			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.922f	68		pla				pla
.9230					_NotRef:
.9230	0a		asl a				asl 	a
.9231	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9233	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9236	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9239	f0 03		beq $923e			beq 	_IntegerCode 				; if clear, then we have two integers
.923b	4c 8c 9f	jmp $9f8c			jmp 	TypeError 					; anything else, type mismatch.
.923e					_IntegerCode:
.923e	20 da 90	jsr $90da			jsr 	AddCode 					; add the two values
.9241	a9 21		lda #$21			lda 	#NSBIsReference+1 			; make a 1 byte reference
.9243	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9246	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/tostring.asm

.9247					ConvertInt16:
.9247	8d 08 04	sta $0408			sta 	NSMantissa0 				; set up as 32 bit conversion
.924a	8e 10 04	stx $0410			stx 	NSMantissa1
.924d	9c 18 04	stz $0418			stz 	NSMantissa2
.9250	9c 20 04	stz $0420			stz 	NSMantissa3
.9253	9c 00 04	stz $0400			stz 	NSStatus 					; positive integer
.9256	a2 00		ldx #$00			ldx 	#0 							; stack level
.9258	a9 0a		lda #$0a			lda 	#10 						; base
.925a	80 00		bra $925c			bra 	ConvertInt32
.925c					ConvertInt32:
.925c	5a		phy				phy
.925d	a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.925f	2c 00 04	bit $0400			bit 	NSStatus 					; output a - if not negative.
.9262	10 08		bpl $926c			bpl 	_CI32NotNeg
.9264	48		pha				pha
.9265	a9 2d		lda #$2d			lda 	#'-'
.9267	99 f8 05	sta $05f8,y			sta 	NumberBuffer,y
.926a	c8		iny				iny
.926b	68		pla				pla
.926c					_CI32NotNeg:
.926c	20 7a 92	jsr $927a			jsr 	_CI32DivideConvert 			; recursive conversion
.926f	a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.9271	99 f8 05	sta $05f8,y			sta 	NumberBuffer,y
.9274	7a		ply				ply
.9275	a2 05		ldx #$05			ldx 	#NumberBuffer >> 8
.9277	a9 f8		lda #$f8			lda 	#NumberBuffer & $FF
.9279	60		rts				rts
.927a					_CI32DivideConvert:
.927a	e8		inx				inx 								; write to next slot up
.927b	20 fa 9d	jsr $9dfa			jsr 	NSMSetByte
.927e	ca		dex				dex
.927f	20 1e 8f	jsr $8f1e			jsr 	Int32Divide 				; divide
.9282	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; save remainder
.9285	48		pha				pha
.9286	20 cd 8e	jsr $8ecd			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.9289	20 28 9e	jsr $9e28			jsr 	NSMIsZero 					; is it zero ?
.928c	f0 06		beq $9294			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.928e	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.9291	20 7a 92	jsr $927a			jsr 	_CI32DivideConvert 			; and recusrively call.
.9294					_CI32NoRecurse:
.9294	68		pla				pla 								; remainder
.9295	c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII
.9297	90 02		bcc $929b			bcc 	_CI32NotHex
.9299	69 26		adc #$26			adc 	#6+32
.929b					_CI32NotHex:
.929b	69 30		adc #$30			adc 	#48
.929d	99 f8 05	sta $05f8,y			sta 	NumberBuffer,y 				; write out and exit
.92a0	c8		iny				iny
.92a1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/expression.asm


;******  Processing file: ./common/expressions/../generated/precedence.dat

.92a2					PrecedenceLevel:
>92a2	04					.byte	 4	; $00 <<
>92a3	02					.byte	 2	; $01 <=
>92a4	02					.byte	 2	; $02 <>
>92a5	00					.byte	 0	; $03 !!3
>92a6	00					.byte	 0	; $04 ><
>92a7	02					.byte	 2	; $05 >=
>92a8	04					.byte	 4	; $06 >>
>92a9	00					.byte	 0	; $07 !!7
>92aa	00					.byte	 0	; $08 !!8
>92ab	00					.byte	 0	; $09 !!9
>92ac	00					.byte	 0	; $0a !!10
>92ad	00					.byte	 0	; $0b !!11
>92ae	00					.byte	 0	; $0c !!12
>92af	00					.byte	 0	; $0d !!13
>92b0	00					.byte	 0	; $0e !!14
>92b1	00					.byte	 0	; $0f !!15
>92b2	00					.byte	 0	; $10 @
>92b3	00					.byte	 0	; $11 !!17
>92b4	00					.byte	 0	; $12 !!18
>92b5	00					.byte	 0	; $13 [
>92b6	04					.byte	 4	; $14 \
>92b7	00					.byte	 0	; $15 ]
>92b8	01					.byte	 1	; $16 ^
>92b9	00					.byte	 0	; $17 _
>92ba	00					.byte	 0	; $18 `
>92bb	00					.byte	 0	; $19 !!25
>92bc	00					.byte	 0	; $1a !!26
>92bd	00					.byte	 0	; $1b {
>92be	01					.byte	 1	; $1c |
>92bf	00					.byte	 0	; $1d }
>92c0	00					.byte	 0	; $1e ~
>92c1	00					.byte	 0	; $1f [7m<7F>[m
>92c2	00					.byte	 0	; $20
>92c3	05					.byte	 5	; $21 !
>92c4	00					.byte	 0	; $22 "
>92c5	00					.byte	 0	; $23 #
>92c6	05					.byte	 5	; $24 $
>92c7	04					.byte	 4	; $25 %
>92c8	01					.byte	 1	; $26 &
>92c9	00					.byte	 0	; $27 '
>92ca	00					.byte	 0	; $28 (
>92cb	00					.byte	 0	; $29 )
>92cc	04					.byte	 4	; $2a *
>92cd	03					.byte	 3	; $2b +
>92ce	00					.byte	 0	; $2c ,
>92cf	03					.byte	 3	; $2d -
>92d0	00					.byte	 0	; $2e .
>92d1	04					.byte	 4	; $2f /
>92d2	00					.byte	 0	; $30 0
>92d3	00					.byte	 0	; $31 1
>92d4	00					.byte	 0	; $32 2
>92d5	00					.byte	 0	; $33 3
>92d6	00					.byte	 0	; $34 4
>92d7	00					.byte	 0	; $35 5
>92d8	00					.byte	 0	; $36 6
>92d9	00					.byte	 0	; $37 7
>92da	00					.byte	 0	; $38 8
>92db	00					.byte	 0	; $39 9
>92dc	00					.byte	 0	; $3a :
>92dd	00					.byte	 0	; $3b ;
>92de	02					.byte	 2	; $3c <
>92df	02					.byte	 2	; $3d =
>92e0	02					.byte	 2	; $3e >
>92e1	05					.byte	 5	; $3f ?

;******  Return to file: ./common/expressions/expression.asm

.92e2					EvaluateExpressionAt0:
.92e2	a2 00		ldx #$00			ldx 	#0 							; bottom stack level
.92e4					EvaluateExpression:
.92e4	a9 00		lda #$00			lda 	#0 							; lowest precedence level
.92e6					EvaluateExpressionAtPrecedence:
.92e6	48		pha				pha 								; save precedence level
.92e7	20 be 97	jsr $97be			jsr 	EvaluateTerm 				; evaluate term into level X.
.92ea	68		pla				pla 								; restore precedence level.
.92eb					_EXPRLoop:
.92eb	85 36		sta $36				sta 	zTemp0 						; save current precedence level.
.92ed	b1 30		lda ($30),y			lda 	(codePtr),y
.92ef	c9 40		cmp #$40			cmp		#$40 						; if >= $40 cannot be an operator
.92f1	b0 25		bcs $9318			bcs 	_EXPRExit
.92f3	da		phx				phx 								; read the operator precedence
.92f4	aa		tax				tax
.92f5	bd a2 92	lda $92a2,x			lda 	PrecedenceLevel,x
.92f8	fa		plx				plx
.92f9	c9 00		cmp #$00			cmp 	#0							; if zero exit (not an operator)
.92fb	f0 1b		beq $9318			beq 	_EXPRExit
.92fd	85 37		sta $37				sta 	zTemp0+1 					; save operator precedence level.
.92ff	a5 36		lda $36				lda 	zTemp0 						; compare current precedence vs. operator precedence
.9301	c5 37		cmp $37				cmp 	zTemp0+1
.9303	b0 13		bcs $9318			bcs		_EXPRExit 					; if current >= operator exit
.9305	48		pha				pha 								; save current precedence.
.9306	b1 30		lda ($30),y			lda 	(codePtr),y
.9308	c8		iny				iny
.9309	48		pha				pha
.930a	a5 37		lda $37				lda 	zTemp0+1 					; get operator precedence level
.930c	e8		inx				inx 								; work out the right hand side.
.930d	20 e6 92	jsr $92e6			jsr 	EvaluateExpressionAtPrecedence
.9310	ca		dex				dex
.9311	68		pla				pla 								; get operator, call the code.
.9312	20 1b 93	jsr $931b			jsr 	_EXPRCaller
.9315	68		pla				pla 								; restore precedence level
.9316	80 d3		bra $92eb			bra 	_EXPRLoop 					; and go round.
.9318					_EXPRExit:
.9318	a5 36		lda $36				lda 	zTemp0 						; A = current precedence level.
.931a	60		rts				rts
.931b					_EXPRCaller:
.931b	da		phx				phx 								; save on stack, first thing is to restore it
.931c	0a		asl a				asl 	a 							; double so can use vectors into X
.931d	aa		tax				tax
.931e	7c 66 8a	jmp ($8a66,x)			jmp 	(VectorSetPunc,x) 			; and go to the code.

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/addsub.asm

.9321					FloatingPointAdd:
.9321	20 ca 94	jsr $94ca			jsr 	FloatPrepare 				; prepare for floats
.9324	80 0b		bra $9331			bra 	FloatAdd
.9326					FloatingPointSub:
.9326	20 ca 94	jsr $94ca			jsr 	FloatPrepare 				; prepare for floats
.9329					FloatSubtract:
.9329	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; negate FPB
.932c	49 80		eor #$80			eor 	#$80
.932e	9d 01 04	sta $0401,x			sta 	NSStatus+1,x				; and fall through.
.9331					FloatAdd:
.9331	48		pha				pha
.9332	5a		phy				phy
.9333	20 db 94	jsr $94db			jsr 	NSNormalise 				; normalise S[X]
.9336	f0 5c		beq $9394			beq 	_FAReturn1
.9338	e8		inx				inx 								; normalise S[X+1]
.9339	20 db 94	jsr $94db			jsr 	NSNormalise
.933c	ca		dex				dex
.933d	c9 00		cmp #$00			cmp 	#0
.933f	f0 77		beq $93b8			beq 	_FAExit 					; if so, just return A
.9341	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; are the exponents the same ?
.9344	dd 29 04	cmp $0429,x			cmp 	NSExponent+1,x
.9347	f0 1b		beq $9364			beq 	_FAExponentsEqual
.9349	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; work out the larger exponent
.934c	a8		tay				tay
.934d	38		sec				sec 								; do a signed comparison of the exponents.
.934e	fd 29 04	sbc $0429,x			sbc 	NSExponent+1,x
.9351	50 02		bvc $9355			bvc 	_FANoSignedChange
.9353	49 80		eor #$80			eor 	#$80
.9355					_FANoSignedChange:
.9355	29 80		and #$80			and 	#$80
.9357	10 03		bpl $935c			bpl 	_FAHaveMax
.9359	bc 29 04	ldy $0429,x			ldy 	NSExponent+1,x
.935c					_FAHaveMax:
.935c	20 bb 93	jsr $93bb			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.935f	e8		inx				inx
.9360	20 bb 93	jsr $93bb			jsr 	_FAShiftToExponent
.9363	ca		dex				dex
.9364					_FAExponentsEqual:
.9364	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; are the signs the same
.9367	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.936a	30 10		bmi $937c			bmi 	_FADifferentSigns
.936c	20 6d 90	jsr $906d			jsr 	AddTopTwoStack 				; do the add of the mantissae
.936f	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.9372	10 44		bpl $93b8			bpl 	_FAExit 					; if no, we are done.
.9374	20 1b 9e	jsr $9e1b			jsr 	NSMShiftRight 				; shift A right, renormalising it.
.9377	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; bump the exponent and exit
.937a	80 3c		bra $93b8			bra 	_FAExit
.937c					_FADifferentSigns:
.937c	20 93 90	jsr $9093			jsr 	SubTopTwoStack 				; subtract mantissa B from A
.937f	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; is the result negative ?
.9382	10 06		bpl $938a			bpl 	_FACheckZero 				; if no, check for -0
.9384	20 a4 9d	jsr $9da4			jsr 	NSMNegate 					; netate result
.9387	20 ad 9d	jsr $9dad			jsr 	NSMNegateMantissa 			; negate (2'c) the mantissa
.938a					_FACheckZero:
.938a	20 28 9e	jsr $9e28			jsr 	NSMIsZero	 				; check for -0
.938d	d0 29		bne $93b8			bne 	_FAExit
.938f	9e 00 04	stz $0400,x			stz 	NSStatus,x
.9392	80 24		bra $93b8			bra 	_FAExit
.9394					_FAReturn1:
.9394	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.9397	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.939a	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.939d	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.93a0	bd 19 04	lda $0419,x			lda 	NSMantissa2+1,x
.93a3	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.93a6	bd 21 04	lda $0421,x			lda 	NSMantissa3+1,x
.93a9	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.93ac	bd 29 04	lda $0429,x			lda 	NSExponent+1,x
.93af	9d 28 04	sta $0428,x			sta 	NSExponent,x
.93b2	bd 01 04	lda $0401,x			lda 	NSStatus+1,x
.93b5	9d 00 04	sta $0400,x			sta 	NSStatus,x
.93b8					_FAExit:
.93b8	7a		ply				ply
.93b9	68		pla				pla
.93ba	60		rts				rts
.93bb					_FAShiftToExponent:
.93bb					_FAShiftToExponent2:
.93bb	98		tya				tya 								; compare Y to exponent
.93bc	dd 28 04	cmp $0428,x			cmp 	NSExponent,x 				; reached the exponent required ?
.93bf	f0 08		beq $93c9			beq 	_FASEExit 					; exit if so.
.93c1	20 1b 9e	jsr $9e1b			jsr 	NSMShiftRight	 			; shift the mantissa right
.93c4	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; increment exponent
.93c7	80 f2		bra $93bb			bra 	_FAShiftToExponent2
.93c9					_FASEExit:
.93c9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/compare.asm

.93ca					CompareFloat:
.93ca	20 29 93	jsr $9329			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.93cd	bd 10 04	lda $0410,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.93d0	29 f8		and #$f8			and 	#$F8
.93d2	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.93d5	1d 20 04	ora $0420,x			ora 	NSMantissa3,x
.93d8	f0 09		beq $93e3			beq 	_FCExit 					; zero, so approximately identical
.93da	a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.93dc	3c 00 04	bit $0400,x			bit 	NSStatus,x
.93df	10 02		bpl $93e3			bpl 	_FCExit
.93e1					_FCNegative:
.93e1	a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.93e3					_FCExit:
.93e3	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/divide.asm

.93e4					FDivideCommand:
.93e4	fa		plx				plx	 								; restore stack position
.93e5	20 ca 94	jsr $94ca			jsr 	FloatPrepare 				; prepare for floats
.93e8					FloatDivide:
.93e8	48		pha				pha
.93e9	e8		inx				inx
.93ea	20 db 94	jsr $94db			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.93ed	ca		dex				dex
.93ee	c9 00		cmp #$00			cmp 	#0
.93f0	f0 20		beq $9412			beq 	_FDZero
.93f2	20 db 94	jsr $94db			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.93f5	f0 19		beq $9410			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.93f7	20 40 8f	jsr $8f40			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.93fa	20 cd 8e	jsr $8ecd			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.93fd	20 db 94	jsr $94db			jsr		NSNormalise 				; renormalise
.9400	20 db 8f	jsr $8fdb			jsr 	CalculateSign 				; calculate result sign
.9403	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; calculate exponent
.9406	38		sec				sec
.9407	fd 29 04	sbc $0429,x			sbc 	NSExponent+1,x
.940a	38		sec				sec
.940b	e9 1e		sbc #$1e			sbc 	#30
.940d	9d 28 04	sta $0428,x			sta 	NSExponent,x
.9410					_FDExit:
.9410	68		pla				pla
.9411	60		rts				rts
.9412					_FDZero:
.9412	a9 03		lda #$03		lda	#3
.9414	4c 35 8d	jmp $8d35		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/fractional.asm

.9417					FloatFractionalPart:
.9417	5a		phy				phy
.9418	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; take absolute value
.941b	29 7f		and #$7f			and 	#$7F
.941d	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9420	20 db 94	jsr $94db			jsr 	NSNormalise
.9423	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.9426	38		sec				sec
.9427	e9 e0		sbc #$e0			sbc 	#$E0
.9429	90 31		bcc $945c			bcc 	_FFPExit 					; already fractional
.942b	c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.942d	b0 2a		bcs $9459			bcs 	_FFPZero
.942f	a8		tay				tay 								; put count to do in Y
.9430	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; do each in turn.
.9433	20 5e 94	jsr $945e			jsr 	_FFPPartial
.9436	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9439	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.943c	20 5e 94	jsr $945e			jsr 	_FFPPartial
.943f	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9442	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9445	20 5e 94	jsr $945e			jsr 	_FFPPartial
.9448	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.944b	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.944e	20 5e 94	jsr $945e			jsr 	_FFPPartial
.9451	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9454	20 28 9e	jsr $9e28			jsr 	NSMIsZero 					; zeroed check.
.9457	d0 03		bne $945c			bne 	_FFPExit
.9459					_FFPZero:
.9459	20 f8 9d	jsr $9df8			jsr 	NSMSetZero
.945c					_FFPExit:
.945c	7a		ply				ply
.945d	60		rts				rts
.945e					_FFPPartial:
.945e	c0 00		cpy #$00			cpy 	#0 							; no more to do
.9460	f0 17		beq $9479			beq 	_FFFPPExit
.9462	c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.9464	b0 0c		bcs $9472			bcs 	_FFFPPWholeByte
.9466	5a		phy				phy
.9467					_FFFPPLeft:
.9467	0a		asl a				asl 	a
.9468	88		dey				dey
.9469	d0 fc		bne $9467			bne 	_FFFPPLeft
.946b	7a		ply				ply
.946c					_FFFPPRight:
.946c	4a		lsr a				lsr 	a
.946d	88		dey				dey
.946e	d0 fc		bne $946c			bne 	_FFFPPRight
.9470	80 07		bra $9479			bra 	_FFFPPExit
.9472					_FFFPPWholeByte:
.9472	98		tya				tya 								; subtract 8 from count
.9473	38		sec				sec
.9474	e9 08		sbc #$08			sbc 	#8
.9476	a8		tay				tay
.9477	a9 00		lda #$00			lda 	#0 							; and clear all
.9479					_FFFPPExit:
.9479	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/integer.asm

.947a					FloatIntegerPart:
.947a	48		pha				pha
.947b	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; is it integer already ?
.947e	f0 1f		beq $949f			beq 	_FIPExit 					; if so do nothing
.9480	20 28 9e	jsr $9e28			jsr 	NSMIsZero 					; is it zero ?
.9483	f0 17		beq $949c			beq 	_FIPZero 					; if so return zero.
.9485	20 db 94	jsr $94db			jsr 	NSNormalise 				; normalise
.9488	f0 12		beq $949c			beq 	_FIPZero 					; normalised to zero, exit zero
.948a					_FIPShift:
.948a	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.948d	10 08		bpl $9497			bpl 	_FIPCheckZero
.948f	20 1b 9e	jsr $9e1b			jsr 	NSMShiftRight 				; shift mantissa right
.9492	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; bump exponent
.9495	80 f3		bra $948a			bra 	_FIPShift
.9497					_FIPCheckZero:
.9497	20 28 9e	jsr $9e28			jsr 	NSMIsZero 					; avoid -0 problem
.949a	d0 03		bne $949f			bne 	_FIPExit 					; set to zero if mantissa zero.
.949c					_FIPZero:
.949c	20 f8 9d	jsr $9df8			jsr 	NSMSetZero
.949f					_FIPExit:
.949f	68		pla				pla
.94a0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/multiply.asm

.94a1					FloatingPointMultiply:
.94a1	20 ca 94	jsr $94ca			jsr 	FloatPrepare 				; prepare for floats
.94a4					FloatMultiply:
.94a4	48		pha				pha
.94a5	20 db 94	jsr $94db			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.94a8	f0 1b		beq $94c5			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.94aa	e8		inx				inx
.94ab	20 db 94	jsr $94db			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.94ae	ca		dex				dex
.94af	c9 00		cmp #$00			cmp 	#0
.94b1	f0 0f		beq $94c2			beq 	_FDSetZero
.94b3	20 96 8f	jsr $8f96			jsr 	MultiplyShort 				; calculate the result.
.94b6	7d 28 04	adc $0428,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.94b9	18		clc				clc
.94ba	7d 29 04	adc $0429,x			adc 	NSExponent+1,x
.94bd	9d 28 04	sta $0428,x			sta 	NSExponent,x
.94c0	80 03		bra $94c5			bra 	_FDExit
.94c2					_FDSetZero:
.94c2	20 f8 9d	jsr $9df8			jsr 	NSMSetZero 					; return 0
.94c5					_FDExit:
.94c5	20 db 94	jsr $94db			jsr 	NSNormalise 				; normalise the result
.94c8	68		pla				pla
.94c9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/utility.asm

.94ca					FloatPrepare:
.94ca	20 fd 95	jsr $95fd			jsr 	DereferenceTopTwo 			; dereference the top two values
.94cd	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check ints/floats
.94d0	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.94d3	29 10		and #$10			and 	#NSBIsString
.94d5	d0 01		bne $94d8			bne 	_FDType
.94d7	60		rts				rts
.94d8					_FDType:
.94d8	4c 8c 9f	jmp $9f8c			jmp 	TypeError
.94db					NSNormalise:
.94db	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; make float, keep sign
.94de	29 80		and #$80			and 	#$80
.94e0	09 08		ora #$08			ora 	#NSTFloat
.94e2	9d 00 04	sta $0400,x			sta 	NSStatus,x
.94e5	20 28 9e	jsr $9e28			jsr 	NSMIsZero 					; if zero exit
.94e8	d0 09		bne $94f3			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.94ea	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; clear the sign bit.
.94ed	7e 00 04	ror $0400,x			ror 	NSStatus,x 					; (no -0)
.94f0	a9 00		lda #$00			lda 	#0 							; set Z flag
.94f2	60		rts				rts
.94f3					_NSNormaliseOptimise:
.94f3	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; upper byte zero ?
.94f6	d0 22		bne $951a			bne 	_NSNormaliseLoop
.94f8	bd 18 04	lda $0418,x			lda 	NSMantissa2,x 				; byte normalise
.94fb	30 1d		bmi $951a			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.94fd	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9500	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9503	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9506	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9509	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.950c	9e 08 04	stz $0408,x			stz 	NSMantissa0,x
.950f	bd 28 04	lda $0428,x			lda 	NSExponent,x
.9512	38		sec				sec
.9513	e9 08		sbc #$08			sbc 	#8
.9515	9d 28 04	sta $0428,x			sta 	NSExponent,x
.9518	80 d9		bra $94f3			bra 	_NSNormaliseOptimise
.951a					_NSNormaliseLoop:
.951a	3c 20 04	bit $0420,x			bit 	NSMantissa3,x 				; bit 30 set ?
.951d	70 08		bvs $9527			bvs 	_NSNExit 					; exit if so with Z flag clear
.951f	20 0d 9e	jsr $9e0d			jsr 	NSMShiftLeft 				; shift mantissa left
.9522	de 28 04	dec $0428,x			dec 	NSExponent,x 				; adjust exponent
.9525	80 f3		bra $951a			bra 	_NSNormaliseLoop
.9527					_NSNExit:
.9527	a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.9529	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignnumber.asm

.952a					AssignNumber:
.952a	5a		phy				phy
.952b	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy mantissa0/1 to zTemp0
.952e	85 36		sta $36				sta 	zTemp0
.9530	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9533	85 37		sta $37				sta 	zTemp0+1
.9535	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; clear reference bits
.9538	29 df		and #$df			and 	#(NSBIsReference ^ $FF)
.953a	9d 00 04	sta $0400,x			sta 	NSStatus,x
.953d	29 18		and #$18			and 	#NSBTypeMask				; assigning to a float ?
.953f	c9 08		cmp #$08			cmp 	#NSTFloat
.9541	f0 2a		beq $956d			beq 	_ANFloat
.9543	bd 29 04	lda $0429,x			lda		NSExponent+1,x 				; is it a float
.9546	f0 05		beq $954d			beq		_ANNotFloat
.9548	e8		inx				inx
.9549	20 7a 94	jsr $947a			jsr 	FloatIntegerPart 			; make it an integer
.954c	ca		dex				dex
.954d					_ANNotFloat:
.954d	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if byte/word reference.
.9550	29 03		and #$03			and 	#3
.9552	d0 05		bne $9559			bne 	_ANByteWord
.9554	20 79 95	jsr $9579			jsr 	_ANCopy4PackSign 			; copy all 4 bytes and sign
.9557	80 1e		bra $9577			bra 	_ANExit
.9559					_ANByteWord:
.9559	48		pha				pha 								; save count
.955a	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; do byte
.955d	92 36		sta ($36)			sta 	(zTemp0)
.955f	68		pla				pla
.9560	c9 01		cmp #$01			cmp	 	#1
.9562	f0 13		beq $9577			beq 	_ANExit
.9564	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x 			; do word
.9567	a0 01		ldy #$01			ldy 	#1
.9569	91 36		sta ($36),y			sta 	(zTemp0),y
.956b	80 0a		bra $9577			bra 	_ANExit
.956d					_ANFloat:
.956d	20 79 95	jsr $9579			jsr 	_ANCopy4PackSign 			; write all 4 bytes and packed sign
.9570	bd 29 04	lda $0429,x			lda 	NSExponent+1,x 				; copy exponent to slot 4
.9573	a0 04		ldy #$04			ldy 	#4
.9575	91 36		sta ($36),y			sta 	(zTemp0),y
.9577					_ANExit:
.9577	7a		ply				ply
.9578	60		rts				rts
.9579					_ANCopy4PackSign:
.9579	a0 03		ldy #$03			ldy 	#3
.957b	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; sign bit into status
.957e	29 80		and #$80			and 	#$80 						; put into high bit of mantissa 3
.9580	1d 21 04	ora $0421,x			ora 	NSMantissa3+1,x
.9583	91 36		sta ($36),y			sta 	(zTemp0),y
.9585	88		dey				dey
.9586	bd 19 04	lda $0419,x			lda 	NSMantissa2+1,x
.9589	91 36		sta ($36),y			sta 	(zTemp0),y
.958b	88		dey				dey
.958c	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.958f	91 36		sta ($36),y			sta 	(zTemp0),y
.9591	88		dey				dey
.9592	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.9595	91 36		sta ($36),y			sta 	(zTemp0),y
.9597	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignstring.asm

.9598					AssignString:
.9598	5a		phy				phy
.9599	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.959c	85 38		sta $38				sta 	zTemp1
.959e	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.95a1	85 39		sta $39				sta 	zTemp1+1
.95a3	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.95a6	85 36		sta $36				sta 	zTemp0
.95a8	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.95ab	85 37		sta $37				sta 	zTemp0+1
.95ad	a0 01		ldy #$01			ldy 	#1 							; the high byte of the target address
.95af	b1 36		lda ($36),y			lda 	(zTemp0),y
.95b1	f0 23		beq $95d6			beq 	_ASNewStringRequired 		; if zero, a new string is required.
.95b3	38		sec				sec 								; put Address-2 in zsTemp - this is the size/status/string record
.95b4	b2 36		lda ($36)			lda 	(zTemp0) 					; of concreted strings
.95b6	e9 02		sbc #$02			sbc 	#2
.95b8	85 3c		sta $3c				sta 	zsTemp
.95ba	a0 01		ldy #$01			ldy 	#1
.95bc	b1 36		lda ($36),y			lda 	(zTemp0),y
.95be	e9 00		sbc #$00			sbc 	#0
.95c0	85 3d		sta $3d				sta 	zsTemp+1
.95c2	a0 ff		ldy #$ff			ldy 	#$FF 						; get length of new string
.95c4					_ASGetLength:
.95c4	c8		iny				iny
.95c5	b1 38		lda ($38),y			lda 	(zTemp1),y
.95c7	d0 fb		bne $95c4			bne 	_ASGetLength
.95c9	98		tya				tya 								; is this length <= current length
.95ca	d2 3c		cmp ($3c)			cmp 	(zsTemp)
.95cc	90 20		bcc $95ee			bcc 	_ASCopyString
.95ce	f0 1e		beq $95ee			beq 	_ASCopyString
.95d0	a9 80		lda #$80			lda 	#$80 						; mark as unused.
.95d2	a0 01		ldy #$01			ldy 	#1
.95d4	91 3c		sta ($3c),y			sta 	(zsTemp),y
.95d6					_ASNewStringRequired:
.95d6	e8		inx				inx 								; concrete the new string.
.95d7	20 ce a2	jsr $a2ce			jsr 	StringConcrete				; (breaks zTemp1/2, not zTemp0 and zsTemp)
.95da	ca		dex				dex
.95db	18		clc				clc
.95dc	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; copy that new address to the reference.
.95df	69 02		adc #$02			adc 	#2 							; add two to point at the data.
.95e1	92 36		sta ($36)			sta 	(zTemp0)
.95e3	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.95e6	69 00		adc #$00			adc 	#0
.95e8	a0 01		ldy #$01			ldy 	#1
.95ea	91 36		sta ($36),y			sta 	(zTemp0),y
.95ec	80 0d		bra $95fb			bra 	_ASExit
.95ee					_ASCopyString:
.95ee	a0 00		ldy #$00			ldy 	#0
.95f0					_ASCopyLoop:
.95f0	b1 38		lda ($38),y			lda 	(zTemp1),y
.95f2	c8		iny				iny
.95f3	c8		iny				iny
.95f4	91 3c		sta ($3c),y			sta 	(zsTemp),y
.95f6	88		dey				dey
.95f7	c9 00		cmp #$00			cmp 	#0
.95f9	d0 f5		bne $95f0			bne 	_ASCopyLoop
.95fb					_ASExit:
.95fb	7a		ply				ply
.95fc	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/dereference.asm

.95fd					DereferenceTopTwo:
.95fd	e8		inx				inx
.95fe	20 02 96	jsr $9602			jsr 	Dereference 				; deref x+1
.9601	ca		dex				dex  								; falls through to deref x
.9602					Dereference:
.9602	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get the status byte
.9605	29 20		and #$20			and 	#NSBIsReference 			; shift sign bit to carry, reference to bit 7
.9607	f0 57		beq $9660			beq 	_DRFExit 					; not a reference
.9609	5a		phy				phy
.960a	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address to dereference into zTemp0
.960d	85 36		sta $36				sta 	zTemp0
.960f	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9612	85 37		sta $37				sta 	zTemp0+1
.9614	9e 10 04	stz $0410,x			stz 	NSMantissa1,x 				; clear second byte.
.9617	b2 36		lda ($36)			lda 	(zTemp0) 					; do the first byte
.9619	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.961c	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get status byte.
.961f	29 18		and #$18			and 	#NSBTypeMask 				; what type is it ?
.9621	c9 10		cmp #$10			cmp 	#NSTString 					; if string, dereference two
.9623	f0 0f		beq $9634			beq 	_DRFDereferenceTwo
.9625	c9 08		cmp #$08			cmp 	#NSTFloat 					; if float, do full dereference.
.9627	f0 39		beq $9662			beq 	_DRFFull
.9629	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be integer - how many bytes ?
.962c	29 03		and #$03			and 	#3
.962e	f0 32		beq $9662			beq 	_DRFFull 					; the whole word
.9630	c9 01		cmp #$01			cmp 	#1 							; is it 10 (e.g. 2 bytes)
.9632	f0 07		beq $963b			beq		_DRFClear23 				; no, one byte, clear 2 & 3 and exit
.9634					_DRFDereferenceTwo:
.9634	a0 01		ldy #$01			ldy 	#1
.9636	b1 36		lda ($36),y			lda 	(zTemp0),y
.9638	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.963b					_DRFClear23:
.963b	9e 18 04	stz $0418,x			stz 	NSMantissa2,x 				; clear upper bytes, only read 1 or 2 bytes
.963e	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.9641	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; make it a value of that type.
.9644	29 18		and #$18			and 	#NSBTypeMask
.9646	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9649	c9 10		cmp #$10			cmp 	#NSTString  				; is it a string
.964b	d0 12		bne $965f			bne 	_DRFNotString
.964d	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; check address is zero
.9650	1d 10 04	ora $0410,x			ora 	NSMantissa1,x
.9653	d0 0a		bne $965f			bne 	_DRFNotString
.9655	a9 61		lda #$61			lda 	#_DRFNullString & $FF 		; if so, return reference to ""
.9657	9d 08 04	sta $0408,x			sta 	NSMantissa0,X
.965a	a9 96		lda #$96			lda 	#_DRFNullString >> 8
.965c	9d 10 04	sta $0410,x			sta 	NSMantissa1,X
.965f					_DRFNotString
.965f	7a		ply				ply 								; restore Y and exit
.9660					_DRFExit:
.9660	60		rts				rts
.9661					_DRFNullString:
>9661	00						.byte 	0
.9662					_DRFFull:
.9662	a0 01		ldy #$01			ldy 	#1 							; get remaining 3 bytes.
.9664	b1 36		lda ($36),y			lda 	(zTemp0),y
.9666	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9669	c8		iny				iny
.966a	b1 36		lda ($36),y			lda 	(zTemp0),y
.966c	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.966f	c8		iny				iny
.9670	b1 36		lda ($36),y			lda 	(zTemp0),y
.9672	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9675	9e 28 04	stz $0428,x			stz 	NSExponent,x 				; clear exponent.
.9678	bd 00 04	lda $0400,x			lda		NSStatus,x 					; see if type is integer
.967b	29 18		and #$18			and 	#NSBTypeMask  				; type information only
.967d	9d 00 04	sta $0400,x			sta 	NSStatus,x 					; update it back.
.9680	f0 06		beq $9688			beq 	_DRFNoExponent
.9682	c8		iny				iny 								; if not, read the exponent as well.
.9683	b1 36		lda ($36),y			lda 	(zTemp0),y
.9685	9d 28 04	sta $0428,x			sta 	NSExponent,x
.9688					_DRFNoExponent:
.9688	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; is the most significant bit set ?
.968b	10 0d		bpl $969a			bpl 	_DRFExit2 					; if not, then exit.
.968d	29 7f		and #$7f			and 	#$7F 						; clear that bit.
.968f	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9692	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; set the sign flag
.9695	09 80		ora #$80			ora 	#NSBIsNegative
.9697	9d 00 04	sta $0400,x			sta 	NSStatus,x
.969a					_DRFExit2:
.969a	7a		ply				ply
.969b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/number.asm

=1					ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2					ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3					ESTA_Decimal = 3 							; fractional part.
.969c					EncodeNumberStart:
.969c	38		sec				sec
.969d	80 01		bra $96a0			bra 	EncodeNumberContinue+1
.969f					EncodeNumberContinue:
.969f	18		clc				clc
.96a0					EncodeNumber:
.96a0	08		php				php 								; save reset.
.96a1	c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.96a3	f0 12		beq $96b7			beq 	_ENIsOkay
.96a5	c9 30		cmp #$30			cmp 	#"0"
.96a7	90 04		bcc $96ad			bcc 	_ENBadNumber
.96a9	c9 3a		cmp #$3a			cmp 	#"9"+1
.96ab	90 0a		bcc $96b7			bcc 	_ENIsOkay
.96ad					_ENBadNumber:
.96ad	28		plp				plp 								; throw saved reset
.96ae	ad 85 04	lda $0485			lda 	EncodeState 				; decimal mode, construct final number
.96b1	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.96b3	f0 7e		beq $9733			beq 	_ENConstructFinal
.96b5					_ENFail:
.96b5	18		clc				clc 								; not allowed
.96b6	60		rts				rts
.96b7					_ENIsOkay:
.96b7	28		plp				plp 								; are we restarting
.96b8	90 15		bcc $96cf			bcc 	_ENNoRestart
.96ba					_ENStartEncode:
.96ba	c9 2e		cmp #$2e			cmp 	#'.'						; first is DP
.96bc	f0 0c		beq $96ca			beq 	_ENFirstDP
.96be	29 0f		and #$0f			and 	#15 						; put digit in mantissa
.96c0	20 fa 9d	jsr $9dfa			jsr 	NSMSetByte
.96c3	a9 01		lda #$01			lda 	#ESTA_Low
.96c5					_ENExitChange:
.96c5	8d 85 04	sta $0485			sta 	EncodeState 				; save new state
.96c8	38		sec				sec
.96c9	60		rts				rts
.96ca					_ENFirstDP:
.96ca	20 f8 9d	jsr $9df8			jsr 	NSMSetZero 					; clear integer part
.96cd	80 3f		bra $970e			bra 	_ESTASwitchFloat			; go straight to float and exi
.96cf					_ENNoRestart:
.96cf	48		pha				pha 								; save on stack.
.96d0	ad 85 04	lda $0485			lda 	EncodeState 				; get current state
.96d3	c9 01		cmp #$01			cmp 	#ESTA_Low
.96d5	f0 09		beq $96e0			beq  	_ESTALowState
.96d7	c9 02		cmp #$02			cmp 	#ESTA_High
.96d9	f0 29		beq $9704			beq 	_ESTAHighState
.96db	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.96dd	f0 3b		beq $971a			beq 	_ESTADecimalState
>96df	db						.byte 	$DB 						; causes a break in the emulator
.96e0					_ESTALowState:
.96e0	68		pla				pla 								; get value back
.96e1	c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.96e3	f0 29		beq $970e			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.96e5	29 0f		and #$0f			and 	#15 						; make digit
.96e7	8d 86 04	sta $0486			sta 	DigitTemp 					; save it.
.96ea	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.96ed	0a		asl a				asl 	a
.96ee	0a		asl a				asl 	a
.96ef	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.96f2	0a		asl a				asl 	a
.96f3	6d 86 04	adc $0486			adc 	DigitTemp
.96f6	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.96f9	c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.96fb	90 05		bcc $9702			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.96fd	a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.96ff	8d 85 04	sta $0485			sta 	EncodeState
.9702					_ESTANoSwitch:
.9702	38		sec				sec
.9703	60		rts				rts
.9704					_ESTAHighState:
.9704	68		pla				pla 								; get value back
.9705	c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.9707	f0 05		beq $970e			beq 	_ESTASwitchFloat
.9709	20 6d 97	jsr $976d			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.970c	38		sec				sec
.970d	60		rts				rts
.970e					_ESTASwitchFloat:
.970e	9c 87 04	stz $0487			stz 	DecimalCount
.9711	e8		inx				inx 								; zero the decimal additive.
.9712	20 f8 9d	jsr $9df8			jsr 	NSMSetZero
.9715	ca		dex				dex
.9716	a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.9718	80 ab		bra $96c5			bra 	_ENExitChange
.971a					_ESTADecimalState:
.971a	68		pla				pla 								; digit.
.971b	c9 2e		cmp #$2e			cmp 	#"." 						; fail on 2nd decimal point.
.971d	f0 96		beq $96b5			beq 	_ENFail
.971f	e8		inx				inx 								; put digit into fractional part of X+1
.9720	20 6d 97	jsr $976d			jsr 	ESTAShiftDigitIntoMantissa
.9723	ca		dex				dex
.9724	ee 87 04	inc $0487			inc 	DecimalCount 				; bump the count of decimals
.9727	ad 87 04	lda $0487			lda 	DecimalCount
.972a	c9 0b		cmp #$0b			cmp 	#11
.972c	f0 02		beq $9730			beq 	_ESTADSFail
.972e	38		sec				sec
.972f	60		rts				rts
.9730					_ESTADSFail:
.9730	4c 87 9f	jmp $9f87			jmp 	RangeError
.9733					_ENConstructFinal:
.9733	ad 87 04	lda $0487			lda 	DecimalCount 				; get decimal count
.9736	f0 33		beq $976b			beq 	_ENCFExit 					; no decimals
.9738	5a		phy				phy
.9739	0a		asl a				asl 	a 							; x 4 and CLC
.973a	0a		asl a				asl 	a
.973b	6d 87 04	adc $0487			adc 	DecimalCount
.973e	a8		tay				tay
.973f	b9 46 9f	lda $9f46,y			lda 	DecimalScalarTable-5,y 		; copy decimal scalar to X+2
.9742	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.9745	b9 47 9f	lda $9f47,y			lda 	DecimalScalarTable-5+1,y
.9748	9d 12 04	sta $0412,x			sta 	NSMantissa1+2,x
.974b	b9 48 9f	lda $9f48,y			lda 	DecimalScalarTable-5+2,y
.974e	9d 1a 04	sta $041a,x			sta 	NSMantissa2+2,x
.9751	b9 49 9f	lda $9f49,y			lda 	DecimalScalarTable-5+3,y
.9754	9d 22 04	sta $0422,x			sta 	NSMantissa3+2,x
.9757	b9 4a 9f	lda $9f4a,y			lda 	DecimalScalarTable-5+4,y
.975a	9d 2a 04	sta $042a,x			sta 	NSExponent+2,x
.975d	a9 08		lda #$08			lda 	#NSTFloat
.975f	9d 02 04	sta $0402,x			sta 	NSStatus+2,x
.9762	7a		ply				ply
.9763	e8		inx				inx 								; multiply decimal const by decimal scalar
.9764	20 a4 94	jsr $94a4			jsr 	FloatMultiply
.9767	ca		dex				dex
.9768	20 31 93	jsr $9331			jsr 	FloatAdd 					; add to integer part.
.976b					_ENCFExit:
.976b	18		clc				clc 								; reject the digit.
.976c	60		rts				rts
.976d					ESTAShiftDigitIntoMantissa:
.976d	29 0f		and #$0f			and 	#15 						; save digit
.976f	48		pha				pha
.9770	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; push mantissa on stack
.9773	48		pha				pha
.9774	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.9777	48		pha				pha
.9778	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.977b	48		pha				pha
.977c	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.977f	48		pha				pha
.9780	20 0d 9e	jsr $9e0d			jsr 	NSMShiftLeft 				; x 2
.9783	20 0d 9e	jsr $9e0d			jsr 	NSMShiftLeft 				; x 4
.9786	18		clc				clc 								; pop mantissa and add
.9787	68		pla				pla
.9788	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.978b	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.978e	68		pla				pla
.978f	7d 10 04	adc $0410,x			adc 	NSMantissa1,x
.9792	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9795	68		pla				pla
.9796	7d 18 04	adc $0418,x			adc 	NSMantissa2,x
.9799	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.979c	68		pla				pla
.979d	7d 20 04	adc $0420,x			adc 	NSMantissa3,x
.97a0	9d 20 04	sta $0420,x			sta 	NSMantissa3,x 				; x 5
.97a3	20 0d 9e	jsr $9e0d			jsr 	NSMShiftLeft 				; x 10
.97a6	68		pla				pla 								; add digit
.97a7	18		clc				clc
.97a8	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.97ab	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.97ae	90 0d		bcc $97bd			bcc 	_ESTASDExit
.97b0	fe 10 04	inc $0410,x			inc 	NSMantissa1,x
.97b3	d0 08		bne $97bd			bne 	_ESTASDExit
.97b5	fe 18 04	inc $0418,x			inc 	NSMantissa2,x
.97b8	d0 03		bne $97bd			bne 	_ESTASDExit
.97ba	fe 20 04	inc $0420,x			inc 	NSMantissa3,x
.97bd					_ESTASDExit:
.97bd	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/term.asm

.97be					EvaluateTerm:
.97be	b1 30		lda ($30),y			lda 	(codePtr),y
.97c0	30 18		bmi $97da			bmi 	_ETCheckUnary 				; unary function ? (text ones)
.97c2	c9 40		cmp #$40			cmp 	#$40 						; 40-7F => identifier reference
.97c4	b0 6f		bcs $9835			bcs 	_ETVariable
.97c6	c9 30		cmp #$30			cmp 	#'0' 						; is it a number
.97c8	90 6e		bcc $9838			bcc 	_ETPuncUnary 				; if not it might be a punctuation unary.
.97ca	c9 3a		cmp #$3a			cmp 	#'9'+1
.97cc	b0 6a		bcs $9838			bcs 	_ETPuncUnary
.97ce	20 9c 96	jsr $969c			jsr 	EncodeNumberStart 			; can't fail as it's 0-9 !
.97d1					_ETNumber:
.97d1	c8		iny				iny 								; keep encoding until we have the numbers
.97d2	b1 30		lda ($30),y			lda 	(codePtr),y
.97d4	20 9f 96	jsr $969f			jsr 	EncodeNumberContinue
.97d7	b0 f8		bcs $97d1			bcs 	_ETNumber 					; go back if accepted.
.97d9	60		rts				rts
.97da					_ETCheckUnary:
.97da	c9 ff		cmp #$ff			cmp 	#KWC_STRING 				; string token
.97dc	f0 41		beq $981f			beq 	_ETString
.97de	c9 fe		cmp #$fe			cmp 	#KWC_HEXCONST 				; hex constant.
.97e0	f0 12		beq $97f4			beq 	_ETHexConstant
.97e2	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; check it actually is a unary function
.97e4	90 0b		bcc $97f1			bcc 	_ETSyntaxError
.97e6	c9 9f		cmp #$9f			cmp 	#KWC_LAST_UNARY+1
.97e8	b0 07		bcs $97f1			bcs 	_ETSyntaxError
.97ea	da		phx				phx 								; push X on the stack
.97eb	0a		asl a				asl 	a 							; put vector x 2 into X
.97ec	aa		tax				tax
.97ed	c8		iny				iny 								; consume unary function token
.97ee	7c e6 8a	jmp ($8ae6,x)			jmp 	(VectorSet0,x) 				; and do it.
.97f1					_ETSyntaxError:
.97f1	4c 82 9f	jmp $9f82			jmp 	SyntaxError
.97f4					_ETHexConstant:
.97f4	c8		iny				iny 								; skip #
.97f5	c8		iny				iny 								; skip count
.97f6	20 f8 9d	jsr $9df8			jsr 	NSMSetZero 					; clear result
.97f9					_ETHLoop:
.97f9	b1 30		lda ($30),y			lda 	(codePtr),y
.97fb	c8		iny				iny 								; and consume
.97fc	c9 00		cmp #$00			cmp 	#0 							; exit if zero
.97fe	f0 1e		beq $981e			beq 	_ETHExit
.9800	48		pha				pha 								; save on stack.
.9801	20 0d 9e	jsr $9e0d			jsr 	NSMShiftLeft 				; x 2
.9804	20 0d 9e	jsr $9e0d			jsr 	NSMShiftLeft 				; x 4
.9807	20 0d 9e	jsr $9e0d			jsr 	NSMShiftLeft 				; x 8
.980a	20 0d 9e	jsr $9e0d			jsr 	NSMShiftLeft 				; x 16
.980d	68		pla				pla 								; ASCII
.980e	c9 41		cmp #$41			cmp 	#'A'
.9810	90 02		bcc $9814			bcc 	_ETHNotChar
.9812	e9 07		sbc #$07			sbc 	#7
.9814					_ETHNotChar:
.9814	29 0f		and #$0f			and 	#15 						; digit now
.9816	1d 08 04	ora $0408,x			ora 	NSMantissa0,x 				; put in LS Nibble
.9819	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.981c	80 db		bra $97f9			bra 	_ETHLoop 					; go round.
.981e					_ETHExit:
.981e	60		rts				rts
.981f					_ETString:
.981f	c8		iny				iny 								; look at length
.9820	b1 30		lda ($30),y			lda 	(codePtr),y
.9822	48		pha				pha
.9823	c8		iny				iny 								; first character
.9824	20 f2 a1	jsr $a1f2			jsr 	MemoryInline 				; put address of string at (code-Ptr),y on stack
.9827	68		pla				pla 								; restore count and save
.9828	85 36		sta $36				sta 	zTemp0
.982a	98		tya				tya 								; add length to Y to skip it.
.982b	18		clc				clc
.982c	65 36		adc $36				adc 	zTemp0
.982e	a8		tay				tay
.982f	a9 10		lda #$10			lda 	#NSTString 					; mark as string
.9831	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9834	60		rts				rts
.9835					_ETVariable:
.9835	4c 8f 98	jmp $988f			jmp 	VariableHandler
.9838					_ETPuncUnary:
.9838	c8		iny				iny 								; consume the unary character
.9839	c9 2d		cmp #$2d			cmp 	#KWD_MINUS 					; unary minus
.983b	f0 2d		beq $986a			beq 	_ETUnaryNegate
.983d	c9 10		cmp #$10			cmp 	#KWD_AT 					; @ reference -> constant
.983f	f0 39		beq $987a			beq 	_ETDereference
.9841	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; parenthesis
.9843	f0 43		beq $9888			beq 	_ETParenthesis
.9845	64 36		stz $36				stz 	zTemp0 						; zTemp0 is the indirection level.
.9847	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; byte indirection (0) ?
.9849	f0 06		beq $9851			beq 	_ETIndirection
.984b	e6 36		inc $36				inc 	zTemp0
.984d	c9 21		cmp #$21			cmp 	#KWD_PLING					; word indirection (1) \
.984f	d0 a0		bne $97f1			bne 	_ETSyntaxError
.9851					_ETIndirection:
.9851	a5 36		lda $36				lda 	zTemp0 						; push indirection amount (0-1) => (1-2) on the stack
.9853	1a		inc a				inc 	a
.9854	48		pha				pha
.9855	20 be 97	jsr $97be			jsr 	EvaluateTerm				; evaluate the term
.9858	20 02 96	jsr $9602			jsr 	Dereference 				; dereference it.
.985b	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a +ve integer.
.985e	d0 07		bne $9867			bne 	_ETTypeMismatch
.9860	68		pla				pla 								; indirection 1-2
.9861	09 20		ora #$20			ora 	#NSBIsReference 			; make it a reference.
.9863	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9866	60		rts				rts
.9867					_ETTypeMismatch:
.9867	4c 8c 9f	jmp $9f8c			jmp 	TypeError
.986a					_ETUnaryNegate:
.986a	20 be 97	jsr $97be			jsr 	EvaluateTerm				; evaluate the term
.986d	20 02 96	jsr $9602			jsr 	Dereference 				; dereference it.
.9870	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a number
.9873	29 10		and #$10			and 	#NSTString
.9875	d0 f0		bne $9867			bne 	_ETTypeMismatch
.9877	4c a4 9d	jmp $9da4			jmp 	NSMNegate  					; just toggles the sign bit.
.987a					_ETDereference:
.987a	20 be 97	jsr $97be			jsr 	EvaluateTerm				; evaluate the term
.987d	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a reference
.9880	29 20		and #$20			and 	#NSBIsReference
.9882	f0 e3		beq $9867			beq 	_ETTypeMismatch
.9884	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; make it an integer address
.9887	60		rts				rts
.9888					_ETParenthesis:
.9888	20 e4 92	jsr $92e4			jsr 	EvaluateExpression 			; evaluate here, from lowest precedence
.988b	20 1c 8d	jsr $8d1c			jsr 	CheckRightBracket 			; check for )
.988e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/variable.asm

.988f					VariableHandler:
.988f	b1 30		lda ($30),y			lda 	(codePtr),y
.9891	18		clc				clc
.9892	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.9894	85 37		sta $37				sta 	zTemp0+1
.9896	c8		iny				iny
.9897	b1 30		lda ($30),y			lda 	(codePtr),y
.9899	85 36		sta $36				sta 	zTemp0
.989b	c8		iny				iny
.989c	18		clc				clc									; copy variable address+3 to mantissa
.989d	69 03		adc #$03			adc 	#3
.989f	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.98a2	a5 37		lda $37				lda 	zTemp0+1
.98a4	69 00		adc #$00			adc 	#0
.98a6	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.98a9	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.98ac	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.98af	9e 28 04	stz $0428,x			stz 	NSExponent,x
.98b2	5a		phy				phy
.98b3	a0 02		ldy #$02			ldy 	#2 							; read type
.98b5	b1 36		lda ($36),y			lda 	(zTemp0),y
.98b7	7a		ply				ply
.98b8	29 1c		and #$1c			and 	#NSBTypeMask+NSBIsArray 	; get type information
.98ba	09 20		ora #$20			ora 	#NSBIsReference 			; make a reference.
.98bc	9d 00 04	sta $0400,x			sta 	NSStatus,x
.98bf	29 04		and #$04			and 	#NSBIsArray
.98c1	d0 01		bne $98c4			bne 	_VHArray
.98c3	60		rts				rts
.98c4					_VHArray:
.98c4	e8		inx				inx
.98c5	20 79 9d	jsr $9d79			jsr 	Evaluate8BitInteger 		; get the 1st index.
.98c8	a9 ff		lda #$ff			lda 	#$FF 						; set Status of X+2 to a duff value so we know if we picked it up.
.98ca	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.98cd	b1 30		lda ($30),y			lda 	(codePtr),y
.98cf	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.98d1	d0 06		bne $98d9			bne 	_VHNoSecondIndex
.98d3	c8		iny				iny 								; skip the comma
.98d4	e8		inx				inx
.98d5	20 79 9d	jsr $9d79			jsr 	Evaluate8BitInteger 		; get the 2nd index.
.98d8	ca		dex				dex
.98d9					_VHNoSecondIndex:
.98d9	ca		dex				dex 								; set X back.
.98da	20 1c 8d	jsr $8d1c			jsr 	CheckRightBracket 			; and check the right bracket.
.98dd	5a		phy				phy 								; save position
.98de	a0 02		ldy #$02			ldy 	#2 							; check first index is not-zero, e.g. array defined
.98e0	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.98e2	f0 6b		beq $994f			beq 	_VHBadIndex
.98e4	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy record address to zaTemp
.98e7	85 3e		sta $3e				sta 	zaTemp
.98e9	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.98ec	85 3f		sta $3f				sta 	zaTemp+1
.98ee	a0 03		ldy #$03			ldy 	#3 							; get the second index - which is 0 if there is one index.
.98f0	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.98f2	f0 02		beq $98f6			beq 	_VHHas2Mask
.98f4	a9 ff		lda #$ff			lda 	#$FF
.98f6					_VHHas2Mask:
.98f6	dd 02 04	cmp $0402,x			cmp 	NSStatus+2,x 				; so if they are the same there are the wrong number of indices
.98f9	f0 54		beq $994f			beq 	_VHBadIndex
.98fb	0a		asl a				asl 	a 							; carry will be set if a second index
.98fc	90 09		bcc $9907			bcc 	_VHCheckFirstIndex
.98fe	a0 03		ldy #$03			ldy 	#3 			 				; check the 2nd size >= 2nd index
.9900	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9902	dd 0a 04	cmp $040a,x			cmp 	NSMantissa0+2,x
.9905	90 48		bcc $994f			bcc 	_VHBadIndex
.9907					_VHCheckFirstIndex:
.9907	a0 02		ldy #$02			ldy 	#2 			 				; check the 2nd size >= 2nd index
.9909	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.990b	dd 09 04	cmp $0409,x			cmp 	NSMantissa0+1,x
.990e	90 3f		bcc $994f			bcc 	_VHBadIndex
.9910	64 36		stz $36				stz 	zTemp0 						; clear zTemp0 (if 1 index)
.9912	64 37		stz $37				stz 	zTemp0+1
.9914	bd 02 04	lda $0402,x			lda 	NSStatus+2,x 				; if only one index provided, don't need to multiply
.9917	30 0f		bmi $9928			bmi 	_VHNoMultiply
.9919	da		phx				phx
.991a	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; get 2nd index on stack
.991d	48		pha				pha
.991e	a0 02		ldy #$02			ldy 	#2 							; get 1st size in A
.9920	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9922	1a		inc a				inc 	a 							; add 1 for zero base
.9923	fa		plx				plx
.9924	20 8d 9d	jsr $9d8d			jsr 	Multiply8x8 				; calculate -> Z0
.9927	fa		plx				plx
.9928					_VHNoMultiply:
.9928	18		clc				clc
.9929	a5 36		lda $36				lda 	zTemp0
.992b	7d 09 04	adc $0409,x			adc 	NSMantissa0+1,x
.992e	85 36		sta $36				sta 	zTemp0
.9930	a5 37		lda $37				lda 	zTemp0+1
.9932	69 00		adc #$00			adc 	#0
.9934	85 37		sta $37				sta 	zTemp0+1
.9936	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9939	20 f7 84	jsr $84f7			jsr 	ScaleByBaseType
.993c	18		clc				clc
.993d	b2 3e		lda ($3e)			lda 	(zaTemp)
.993f	65 36		adc $36				adc 	zTemp0
.9941	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9944	a0 01		ldy #$01			ldy 	#1
.9946	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9948	65 37		adc $37				adc 	zTemp0+1
.994a	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.994d	7a		ply				ply 								; restore position
.994e	60		rts				rts
.994f					_VHBadIndex:
.994f	a9 17		lda #$17		lda	#23
.9951	4c 35 8d	jmp $8d35		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/abs.asm

.9954					AbsUnary:
.9954	fa		plx				plx 								; restore stack pos
.9955	20 21 9d	jsr $9d21			jsr 	EvaluateNumber 				; get a float or int
.9958	20 1c 8d	jsr $8d1c			jsr 	CheckRightBracket
.995b	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; clear the sign bit
.995e	29 7f		and #$7f			and 	#$7F
.9960	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9963	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/alloc.asm

.9964					AllocUnary:
.9964	fa		plx				plx 								; restore stack pos
.9965	20 59 9d	jsr $9d59			jsr 	Evaluate16BitInteger		; get bytes required.
.9968	20 1c 8d	jsr $8d1c			jsr 	CheckRightBracket
.996b	da		phx				phx 								; save X/Y
.996c	5a		phy				phy
.996d	8a		txa				txa 								; copy X into Y
.996e	a8		tay				tay
.996f	b9 10 04	lda $0410,y			lda		NSMantissa1,y 				; get size
.9972	aa		tax				tax
.9973	b9 08 04	lda $0408,y			lda 	NSMantissa0,y
.9976	20 83 99	jsr $9983			jsr 	AllocateXABytes 			; allocate memory
.9979	99 08 04	sta $0408,y			sta 	NSMantissa0,y 				; write address out.
.997c	8a		txa				txa
.997d	99 10 04	sta $0410,y			sta 	NSMantissa1,y
.9980	7a		ply				ply
.9981	fa		plx				plx
.9982	60		rts				rts
.9983					AllocateXABytes:
.9983	5a		phy				phy
.9984	ac 8c 04	ldy $048c			ldy 	lowMemPtr 					; push current address on stack and to zTemp0
.9987	84 36		sty $36				sty 	zTemp0
.9989	5a		phy				phy
.998a	ac 8d 04	ldy $048d			ldy 	lowMemPtr+1
.998d	84 37		sty $37				sty 	zTemp0+1
.998f	5a		phy				phy
.9990	18		clc				clc 								; add to low memory pointer
.9991	6d 8c 04	adc $048c			adc 	lowMemPtr
.9994	8d 8c 04	sta $048c			sta 	lowMemPtr
.9997	8a		txa				txa
.9998	6d 8d 04	adc $048d			adc 	lowMemPtr+1
.999b	8d 8d 04	sta $048d			sta 	lowMemPtr+1
.999e	b0 2f		bcs $99cf			bcs 	CISSMemory
.99a0	20 c1 99	jsr $99c1			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.99a3					_ClearMemory:
.99a3	ad 8c 04	lda $048c			lda 	lowMemPtr 					; cleared all memory allocated
.99a6	c5 36		cmp $36				cmp 	zTemp0
.99a8	d0 07		bne $99b1			bne 	_CMClearNext
.99aa	ad 8d 04	lda $048d			lda 	lowMemPtr+1
.99ad	c5 37		cmp $37				cmp 	zTemp0+1
.99af	f0 0c		beq $99bd			beq 	_CMExit
.99b1					_CMClearNext:
.99b1	a9 00		lda #$00			lda 	#0 							; clear byte, advance to next.
.99b3	92 36		sta ($36)			sta 	(zTemp0)
.99b5	e6 36		inc $36				inc 	zTemp0
.99b7	d0 ea		bne $99a3			bne 	_ClearMemory
.99b9	e6 37		inc $37				inc		zTemp0+1
.99bb	80 e6		bra $99a3			bra 	_ClearMemory
.99bd					_CMExit:
.99bd	fa		plx				plx
.99be	68		pla				pla
.99bf	7a		ply				ply
.99c0	60		rts				rts
.99c1					CheckIdentifierStringSpace:
.99c1	48		pha				pha
.99c2	ad 8d 04	lda $048d			lda 	lowMemPtr+1 				; get low memory pointer
.99c5	18		clc				clc
.99c6	69 02		adc #$02			adc 	#2 							; need at least 2 256 byte pages
.99c8	cd 8f 04	cmp $048f			cmp 	StringMemory+1 				; is it >= StringMemory
.99cb	b0 02		bcs $99cf			bcs 	CISSMemory
.99cd	68		pla				pla
.99ce	60		rts				rts
.99cf					CISSMemory:
.99cf	a9 06		lda #$06		lda	#6
.99d1	4c 35 8d	jmp $8d35		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/asc.asm

.99d4					AscUnary:
.99d4	fa		plx				plx 								; restore stack pos
.99d5	20 2c 9d	jsr $9d2c			jsr 	EvaluateString 				; get a string
.99d8	b2 36		lda ($36)			lda 	(zTemp0)					; get/return firs character
.99da	20 fa 9d	jsr $9dfa			jsr 	NSMSetByte
.99dd	20 1c 8d	jsr $8d1c			jsr 	CheckRightBracket
.99e0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/frac.asm

.99e1					FracUnary:
.99e1	fa		plx				plx 								; restore stack pos
.99e2	20 21 9d	jsr $9d21			jsr 	EvaluateNumber 				; get a float or int
.99e5	20 1c 8d	jsr $8d1c			jsr 	CheckRightBracket
.99e8	bd 00 04	lda $0400,x			lda 	NSStatus,x
.99eb	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.99ed	f0 04		beq $99f3			beq 	_IUZero
.99ef	20 17 94	jsr $9417			jsr 	FloatFractionalPart
.99f2	60		rts				rts
.99f3					_IUZero:
.99f3	20 f8 9d	jsr $9df8			jsr 	NSMSetZero
.99f6	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/int.asm

.99f7					IntUnary:
.99f7	fa		plx				plx 								; restore stack pos
.99f8	20 21 9d	jsr $9d21			jsr 	EvaluateNumber 				; get a float or int
.99fb	20 1c 8d	jsr $8d1c			jsr 	CheckRightBracket
.99fe	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9a01	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.9a03	f0 03		beq $9a08			beq 	_IUExit
.9a05	20 7a 94	jsr $947a			jsr 	FloatIntegerPart
.9a08					_IUExit:
.9a08	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/len.asm

.9a09					LenUnary:
.9a09	fa		plx				plx 								; restore stack pos
.9a0a	20 2c 9d	jsr $9d2c			jsr 	EvaluateString 				; get a string
.9a0d	5a		phy				phy
.9a0e	a0 00		ldy #$00			ldy 	#0 							; find length
.9a10					_LenFind:
.9a10	b1 36		lda ($36),y			lda 	(zTemp0),y
.9a12	f0 06		beq $9a1a			beq 	_LenExit
.9a14	c8		iny				iny
.9a15	d0 f9		bne $9a10			bne 	_LenFind
.9a17	4c 87 9f	jmp $9f87			jmp 	RangeError 					; string > 255
.9a1a					_LenExit:
.9a1a	98		tya				tya
.9a1b	20 fa 9d	jsr $9dfa			jsr 	NSMSetByte
.9a1e	7a		ply				ply
.9a1f	20 1c 8d	jsr $8d1c			jsr 	CheckRightBracket
.9a22	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/minmax.asm

.9a23					Unary_Min:
.9a23	a9 01		lda #$01			lda 	#1
.9a25	80 02		bra $9a29			bra 	UnaryMinMaxMain
.9a27					Unary_Max:
.9a27	a9 ff		lda #$ff			lda 	#$FF 						; value from comparator to cause a write
.9a29					UnaryMinMaxMain:
.9a29	fa		plx				plx 								; get index on number stack
.9a2a	48		pha				pha 								; save comparator
.9a2b	20 18 9d	jsr $9d18			jsr 	EvaluateValue 				; get the first value.
.9a2e					_UMMMLoop:
.9a2e	b1 30		lda ($30),y			lda 	(codePtr),y
.9a30	c9 29		cmp #$29			cmp 	#KWD_RPAREN 				; if right bracket then done.
.9a32	f0 22		beq $9a56			beq 	_UMMMDone
.9a34	20 24 8d	jsr $8d24			jsr 	CheckComma 					; must be a comma
.9a37	e8		inx				inx
.9a38	20 18 9d	jsr $9d18			jsr 	EvaluateValue
.9a3b	ca		dex				dex
.9a3c	20 cf 9d	jsr $9dcf			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] (Compare is destructive)
.9a3f	e8		inx				inx
.9a40	20 cf 9d	jsr $9dcf			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2], original
.9a43	e8		inx				inx
.9a44	20 ed 8d	jsr $8ded			jsr 	CompareBaseCode 			; part of > = < etc. code, returns 255,0 or 1
.9a47	ca		dex				dex
.9a48	ca		dex				dex
.9a49	85 36		sta $36				sta 	zTemp0 						; save required result
.9a4b	68		pla				pla 								; get and save comparator
.9a4c	48		pha				pha
.9a4d	c5 36		cmp $36				cmp 	zTemp0 						; if the comparator
.9a4f	d0 dd		bne $9a2e			bne 	_UMMMLoop
.9a51	20 59 9a	jsr $9a59			jsr 	ExpCopyAboveDown 			; copy next up slot down
.9a54	80 d8		bra $9a2e			bra 	_UMMMLoop
.9a56					_UMMMDone:
.9a56	68		pla				pla 								; throw the comparator
.9a57	c8		iny				iny 								; skip )
.9a58	60		rts				rts
.9a59					ExpCopyAboveDown:
.9a59	bd 01 04	lda $0401,x			lda 	NSStatus+1,x
.9a5c	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9a5f	bd 29 04	lda $0429,x			lda 	NSExponent+1,x
.9a62	9d 28 04	sta $0428,x			sta 	NSExponent,x
.9a65	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.9a68	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9a6b	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9a6e	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9a71	bd 19 04	lda $0419,x			lda 	NSMantissa2+1,x
.9a74	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9a77	bd 21 04	lda $0421,x			lda 	NSMantissa3+1,x
.9a7a	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9a7d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/not.asm

.9a7e					Unary_Not:
.9a7e	fa		plx				plx
.9a7f	20 44 9d	jsr $9d44			jsr 	EvaluateInteger 			; get integer
.9a82	20 1c 8d	jsr $8d1c			jsr 	CheckRightBracket
.9a85	20 28 9e	jsr $9e28			jsr 	NSMIsZero 					; zero mantissa ?
.9a88	f0 04		beq $9a8e			beq 	_NotZero
.9a8a	20 f8 9d	jsr $9df8			jsr 	NSMSetZero
.9a8d	60		rts				rts
.9a8e					_NotZero:
.9a8e	4c a2 8d	jmp $8da2			jmp 	ReturnTrue
.9a91					_UNBad:
.9a91	4c 91 9f	jmp $9f91			jmp 	ArgumentError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/rnd.asm

.9a94					Unary_Random:
.9a94	fa		plx				plx
.9a95	20 13 9b	jsr $9b13			jsr 	Random32Bit 				; get a random number
.9a98	20 f8 9a	jsr $9af8			jsr 	URCopyToMantissa  			; put in mantissa
.9a9b	b1 30		lda ($30),y			lda 	(codePtr),y
.9a9d	c9 29		cmp #$29			cmp 	#KWD_RPAREN
.9a9f	f0 08		beq $9aa9			beq 	_URNoModulus
.9aa1	e8		inx				inx
.9aa2	20 59 9d	jsr $9d59			jsr 	Evaluate16BitInteger 		; put modulus value in +1
.9aa5	ca		dex				dex
.9aa6	20 11 8f	jsr $8f11			jsr 	IntegerModulusNoCheck 		; calculate modulus
.9aa9					_URNoModulus:
.9aa9	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; make it an integer positive
.9aac	9e 28 04	stz $0428,x			stz 	NSExponent,x
.9aaf	20 1c 8d	jsr $8d1c			jsr 	CheckRightBracket
.9ab2	60		rts				rts
.9ab3					Unary_Rnd:
.9ab3	fa		plx				plx
.9ab4	20 21 9d	jsr $9d21			jsr 	EvaluateNumber 				; number to use.
.9ab7	20 1c 8d	jsr $8d1c			jsr 	CheckRightBracket 			; closing bracket
.9aba	20 28 9e	jsr $9e28			jsr 	NSMIsZero 					; if zero, then don't generate a new number
.9abd	f0 2b		beq $9aea			beq 	_URCopySeed
.9abf	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; if -ve, then seed using parameter
.9ac2	10 23		bpl $9ae7			bpl 	_URDontSeed
.9ac4	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy - value to seed butchering it.
.9ac7	49 17		eor #$17			eor 	#$17
.9ac9	8d 88 04	sta $0488			sta 	RandomSeed+0
.9acc	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9acf	49 a5		eor #$a5			eor 	#$A5
.9ad1	8d 89 04	sta $0489			sta 	RandomSeed+1
.9ad4	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.9ad7	49 c2		eor #$c2			eor 	#$C2
.9ad9	8d 8a 04	sta $048a			sta 	RandomSeed+2
.9adc	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.9adf	49 9d		eor #$9d			eor 	#$9D
.9ae1	8d 8b 04	sta $048b			sta 	RandomSeed+3
.9ae4	20 13 9b	jsr $9b13			jsr 	Random32Bit
.9ae7					_URDontSeed:
.9ae7	20 13 9b	jsr $9b13			jsr 	Random32Bit 				; generate a number.
.9aea					_URCopySeed:
.9aea	20 f8 9a	jsr $9af8			jsr 	URCopyToMantissa 			; copy into mantissa
.9aed	a9 e1		lda #$e1			lda 	#-31 						; force into 0-1 range
.9aef	8d 28 04	sta $0428			sta 	NSExponent
.9af2	a9 08		lda #$08			lda 	#NSTFloat
.9af4	8d 00 04	sta $0400			sta 	NSStatus 					; positive.
.9af7	60		rts				rts
.9af8					URCopyToMantissa:
.9af8	ad 88 04	lda $0488			lda 	RandomSeed+0
.9afb	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9afe	ad 89 04	lda $0489			lda 	RandomSeed+1
.9b01	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9b04	ad 8a 04	lda $048a			lda 	RandomSeed+2
.9b07	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9b0a	ad 8b 04	lda $048b			lda 	RandomSeed+3
.9b0d	29 3f		and #$3f			and 	#$3F 						; make legal mantissa
.9b0f	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9b12	60		rts				rts
.9b13					Random32Bit:
.9b13	5a		phy				phy
.9b14	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.9b16	ad 88 04	lda $0488			lda 	RandomSeed+0 				; check the seed isn't zero
.9b19	d0 03		bne $9b1e			bne 	_Random1
.9b1b	a8		tay				tay 								; if so do it 256 times
.9b1c	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.9b1e					_Random1:
.9b1e	0a		asl a				asl 	a 							; LSFR RNG
.9b1f	2e 89 04	rol $0489			rol 	RandomSeed+1
.9b22	2e 8a 04	rol $048a			rol 	RandomSeed+2
.9b25	2e 8b 04	rol $048b			rol 	RandomSeed+3
.9b28	90 02		bcc $9b2c			bcc 	_Random2
.9b2a	49 c5		eor #$c5			eor 	#$C5
.9b2c					_Random2:
.9b2c	88		dey				dey
.9b2d	d0 ef		bne $9b1e			bne 	_Random1
.9b2f	8d 88 04	sta $0488			sta 	RandomSeed+0
.9b32	7a		ply				ply
.9b33	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/sgn.asm

.9b34					SgnUnary:
.9b34	fa		plx				plx 								; restore stack pos
.9b35	20 21 9d	jsr $9d21			jsr 	EvaluateNumber 				; get a float or int
.9b38	20 1c 8d	jsr $8d1c			jsr 	CheckRightBracket
.9b3b	20 28 9e	jsr $9e28			jsr 	NSMIsZero 					; if zero
.9b3e	f0 10		beq $9b50			beq 	_SGZero  					; return Int Zero
.9b40	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get status w/sign
.9b43	48		pha				pha
.9b44	a9 01		lda #$01			lda 	#1 							; set to 1
.9b46	20 fa 9d	jsr $9dfa			jsr 	NSMSetByte
.9b49	68		pla				pla
.9b4a	29 80		and #$80			and		#$80 						; copy the sign byte out
.9b4c	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9b4f	60		rts				rts
.9b50	20 f8 9d	jsr $9df8	_SGZero:jsr 	NSMSetZero
.9b53	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/val.asm

.9b54					ValUnary:
.9b54	fa		plx				plx 								; restore stack pos
.9b55	20 6a 9b	jsr $9b6a			jsr 	ValMainCode 				; do the main val() code
.9b58	b0 01		bcs $9b5b			bcs 	_VUError 					; couldn't convert
.9b5a	60		rts				rts
.9b5b					_VUError:
.9b5b	4c 8c 9f	jmp $9f8c			jmp 	TypeError
.9b5e					IsValUnary:
.9b5e	fa		plx				plx 								; restore stack pos
.9b5f	20 6a 9b	jsr $9b6a			jsr 	ValMainCode 				; do the main val() code
.9b62	b0 03		bcs $9b67			bcs 	_VUBad
.9b64	4c a2 8d	jmp $8da2			jmp 	ReturnTrue
.9b67					_VUBad:
.9b67	4c ae 8d	jmp $8dae			jmp 	ReturnFalse
.9b6a					ValMainCode:
.9b6a	20 2c 9d	jsr $9d2c			jsr 	EvaluateString 				; get a string
.9b6d	20 1c 8d	jsr $8d1c			jsr 	CheckRightBracket 			; check right bracket present
.9b70	5a		phy				phy
.9b71	b2 36		lda ($36)			lda 	(zTemp0) 					; check not empty string
.9b73	f0 17		beq $9b8c			beq 	_VMCFail2
.9b75	a0 ff		ldy #$ff			ldy 	#$FF 						; start position
.9b77	48		pha				pha 								; save first character
.9b78	c9 2d		cmp #$2d			cmp 	#"-"		 				; is it -
.9b7a	d0 01		bne $9b7d			bne 	_VMCStart
.9b7c	c8		iny				iny 								; skip over -
.9b7d					_VMCStart:
.9b7d	38		sec				sec 								; initialise first time round.
.9b7e					_VMCNext:
.9b7e	c8		iny				iny 								; pre-increment
.9b7f	b1 36		lda ($36),y			lda 	(zTemp0),y 					; next character
.9b81	f0 0c		beq $9b8f			beq 	_VMCSuccess 				; successful.
.9b83	20 a0 96	jsr $96a0			jsr 	EncodeNumber 				; send it to the number-builder
.9b86	90 03		bcc $9b8b			bcc 	_VMCFail 					; if failed, give up.
.9b88	18		clc				clc 								; next time round, countinue
.9b89	80 f3		bra $9b7e			bra 	_VMCNext
.9b8b					_VMCFail:
.9b8b	68		pla				pla
.9b8c					_VMCFail2:
.9b8c	7a		ply				ply
.9b8d	38		sec				sec
.9b8e	60		rts				rts
.9b8f					_VMCSuccess:
.9b8f	a9 00		lda #$00			lda 	#0 							; construct final
.9b91	20 a0 96	jsr $96a0			jsr 	EncodeNumber
.9b94	68		pla				pla
.9b95	c9 2d		cmp #$2d			cmp 	#"-"
.9b97	d0 03		bne $9b9c			bne 	_VMCNotNegative
.9b99	20 a4 9d	jsr $9da4			jsr		NSMNegate
.9b9c					_VMCNotNegative:
.9b9c	7a		ply				ply
.9b9d	18		clc				clc
.9b9e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/chr.asm

.9b9f					ChrUnary:
.9b9f	fa		plx				plx 								; restore stack pos
.9ba0	20 79 9d	jsr $9d79			jsr 	Evaluate8BitInteger			; get value
.9ba3	48		pha				pha
.9ba4	20 1c 8d	jsr $8d1c			jsr 	CheckRightBracket
.9ba7	a9 01		lda #$01			lda 	#1 							; allocate space for one char
.9ba9	20 4f a3	jsr $a34f			jsr 	StringTempAllocate
.9bac	68		pla				pla 								; write number to it
.9bad	20 8d a3	jsr $a38d			jsr 	StringTempWrite
.9bb0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/spc.asm

.9bb1					SpcUnary:
.9bb1	fa		plx				plx 								; restore stack pos
.9bb2	20 79 9d	jsr $9d79			jsr 	Evaluate8BitInteger			; get value
.9bb5	5a		phy				phy
.9bb6	48		pha				pha 								; save count
.9bb7	20 4f a3	jsr $a34f			jsr 	StringTempAllocate
.9bba	7a		ply				ply 								; to do count in Y
.9bbb					_SpcLoop:
.9bbb	c0 00		cpy #$00			cpy 	#0
.9bbd	f0 08		beq $9bc7			beq 	_SpcExit
.9bbf	a9 20		lda #$20			lda 	#32
.9bc1	20 8d a3	jsr $a38d			jsr 	StringTempWrite
.9bc4	88		dey				dey
.9bc5	80 f4		bra $9bbb			bra 	_SPCLoop
.9bc7					_SpcExit:
.9bc7	7a		ply				ply
.9bc8	20 1c 8d	jsr $8d1c			jsr 	CheckRightBracket
.9bcb	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/str.asm

.9bcc					Unary_Str:
.9bcc	fa		plx				plx
.9bcd	20 21 9d	jsr $9d21			jsr 	EvaluateNumber  			; get number
.9bd0	20 1c 8d	jsr $8d1c			jsr 	CheckRightBracket 			; closing bracket
.9bd3	a9 05		lda #$05			lda 	#5 							; maximum decimals, from Basic816
.9bd5	20 ee 9b	jsr $9bee			jsr 	ConvertNumberToString 		; do the conversion.
.9bd8	a9 21		lda #$21			lda		#33 						; create buffer
.9bda	20 4f a3	jsr $a34f			jsr 	StringTempAllocate 			; allocate memory
.9bdd	da		phx				phx
.9bde	a2 00		ldx #$00			ldx 	#0
.9be0					_USCopy:
.9be0	bd 1a 06	lda $061a,x			lda 	DecimalBuffer,x
.9be3	20 8d a3	jsr $a38d			jsr 	StringTempWrite
.9be6	e8		inx				inx
.9be7	bd 1a 06	lda $061a,x			lda 	DecimalBuffer,x
.9bea	d0 f4		bne $9be0			bne 	_USCopy
.9bec	fa		plx				plx
.9bed	60		rts				rts
.9bee					ConvertNumberToString:
.9bee	5a		phy				phy 								; save code position
.9bef	8d 94 04	sta $0494			sta 	DecimalPlaces	 			; save number of DPs.
.9bf2	9c 95 04	stz $0495			stz 	dbOffset 					; offset into decimal buffer = start.
.9bf5	bd 00 04	lda $0400,x			lda 	NSStatus,x  				; is it -ve.
.9bf8	10 0a		bpl $9c04			bpl 	_CNTSNotNegative
.9bfa	29 7f		and #$7f			and 	#$7F 						; make +ve
.9bfc	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9bff	a9 2d		lda #$2d			lda 	#"-"
.9c01	20 6a 9c	jsr $9c6a			jsr 	WriteDecimalBuffer
.9c04					_CNTSNotNegative:
.9c04	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if decimal
.9c07	f0 15		beq $9c1e			beq 	_CNTSNotFloat
.9c09	e8		inx				inx 								; round up
.9c0a	a9 01		lda #$01			lda 	#1
.9c0c	20 fa 9d	jsr $9dfa			jsr 	NSMSetByte
.9c0f	ca		dex				dex
.9c10	bd 28 04	lda $0428,x			lda		NSExponent,x
.9c13	9d 29 04	sta $0429,x			sta 	NSExponent+1,x
.9c16	a9 08		lda #$08			lda 	#NSTFloat
.9c18	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.9c1b	20 31 93	jsr $9331			jsr 	FloatAdd
.9c1e					_CNTSNotFloat:
.9c1e	20 4c 9c	jsr $9c4c			jsr 	MakePlusTwoString
.9c21	20 17 94	jsr $9417			jsr 	FloatFractionalPart 		; get the fractional part
.9c24	20 db 94	jsr $94db			jsr 	NSNormalise					; normalise , exit if zero
.9c27	f0 21		beq $9c4a			beq 	_CNTSExit
.9c29	a9 2e		lda #$2e			lda 	#"."
.9c2b	20 6a 9c	jsr $9c6a			jsr 	WriteDecimalBuffer 			; write decimal place
.9c2e					_CNTSDecimal:
.9c2e	ce 94 04	dec $0494			dec 	DecimalPlaces 				; done all the decimals
.9c31	30 17		bmi $9c4a			bmi 	_CNTSExit
.9c33	e8		inx				inx 								; x 10.0
.9c34	a9 0a		lda #$0a			lda 	#10
.9c36	20 fa 9d	jsr $9dfa			jsr 	NSMSetByte
.9c39	a9 08		lda #$08			lda 	#NSTFloat
.9c3b	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9c3e	ca		dex				dex
.9c3f	20 a4 94	jsr $94a4			jsr 	FloatMultiply
.9c42	20 4c 9c	jsr $9c4c			jsr 	MakePlusTwoString
.9c45	20 17 94	jsr $9417			jsr 	FloatFractionalPart 		; get the fractional part
.9c48	80 e4		bra $9c2e			bra 	_CNTSDecimal 				; keep going.
.9c4a					_CNTSExit:
.9c4a	7a		ply				ply
.9c4b	60		rts				rts
.9c4c					MakePlusTwoString:
.9c4c	da		phx				phx
.9c4d	20 cf 9d	jsr $9dcf			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.9c50	e8		inx				inx 								; access it
.9c51	e8		inx				inx
.9c52	20 7a 94	jsr $947a			jsr 	FloatIntegerPart 			; make it an integer
.9c55	a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.9c57	20 5c 92	jsr $925c			jsr 	ConvertInt32
.9c5a	a2 00		ldx #$00			ldx	 	#0
.9c5c					_MPTSCopy:
.9c5c	bd f8 05	lda $05f8,x			lda 	NumberBuffer,x
.9c5f	20 6a 9c	jsr $9c6a			jsr 	WriteDecimalBuffer
.9c62	e8		inx				inx
.9c63	bd f8 05	lda $05f8,x			lda 	NumberBuffer,x
.9c66	d0 f4		bne $9c5c			bne 	_MPTSCopy
.9c68	fa		plx				plx
.9c69	60		rts				rts
.9c6a					WriteDecimalBuffer:
.9c6a	da		phx				phx
.9c6b	ae 95 04	ldx $0495			ldx 	dbOffset
.9c6e	9d 1a 06	sta $061a,x			sta 	DecimalBuffer,x
.9c71	9e 1b 06	stz $061b,x			stz 	DecimalBuffer+1,x
.9c74	ee 95 04	inc $0495			inc 	dbOffset
.9c77	fa		plx				plx
.9c78	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/substring.asm

.9c79					Unary_Left:
.9c79	fa		plx				plx
.9c7a	18		clc				clc 								; only one parameter
.9c7b	20 f0 9c	jsr $9cf0			jsr 	SubstringInitial 			; set up.
.9c7e	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; Param #1 is the length
.9c81	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.9c84	9e 09 04	stz $0409,x			stz 	NSMantissa0+1,x 			; Start is zero.
.9c87	80 2c		bra $9cb5			bra 	SubstringMain
.9c89					Unary_Right:
.9c89	fa		plx				plx
.9c8a	18		clc				clc 								; only one parameter
.9c8b	20 f0 9c	jsr $9cf0			jsr 	SubstringInitial 			; set up.
.9c8e	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; length => param 2
.9c91	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.9c94	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; total length
.9c97	fd 09 04	sbc $0409,x			sbc 	NSMantissa0+1,x 			; length - required.
.9c9a	b0 02		bcs $9c9e			bcs 	_URNotUnderflow
.9c9c	a9 00		lda #$00			lda 	#0 							; start from the beginning, as something like right$("AB",3)
.9c9e					_URNotUnderFlow:
.9c9e	9d 09 04	sta $0409,x			sta 	NSMantissa0+1,x 			; this is the start position
.9ca1	80 12		bra $9cb5			bra 	SubStringMain
.9ca3					Unary_Mid:
.9ca3	fa		plx				plx
.9ca4	38		sec				sec 								; two parameters
.9ca5	20 f0 9c	jsr $9cf0			jsr 	SubstringInitial 			; set up.
.9ca8	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; first parameter is zero ?
.9cab	f0 05		beq $9cb2			beq 	_UMError
.9cad	de 09 04	dec $0409,x			dec 	NSMantissa0+1,x				; reduce initial offset by 1 as MID$(a$,1..) is actually the first character
.9cb0	80 03		bra $9cb5			bra 	SubStringMain
.9cb2					_UMError:
.9cb2	4c 91 9f	jmp $9f91			jmp 	ArgumentError
.9cb5					SubStringMain:
.9cb5	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; is the initial offset >= the length
.9cb8	dd 28 04	cmp $0428,x			cmp 	NSExponent,x
.9cbb	b0 2d		bcs $9cea			bcs 	_SSMNull 					; if so, return an empty string.
.9cbd	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; if copy count is zero
.9cc0	f0 28		beq $9cea			beq 	_SSMNull 					; return empty string.
.9cc2	18		clc				clc 								; add the offset +1 to the address and
.9cc3	bd 08 04	lda $0408,x			lda	 	NSMantissa0,x 				; put in zTemp
.9cc6	7d 09 04	adc $0409,x			adc 	NSMantissa0+1,x
.9cc9	85 36		sta $36				sta 	zTemp0
.9ccb	bd 10 04	lda $0410,x			lda	 	NSMantissa1,x
.9cce	69 00		adc #$00			adc 	#0
.9cd0	85 37		sta $37				sta 	zTemp0+1
.9cd2					_SSMNoCarry:
.9cd2	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; characters required.
.9cd5	20 4f a3	jsr $a34f			jsr 	StringTempAllocate 			; allocate that many characters
.9cd8	5a		phy				phy 								; save Y
.9cd9	a0 00		ldy #$00			ldy 	#0 							; start copying in.
.9cdb					_SSMCopy:
.9cdb	b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next character
.9cdd	f0 09		beq $9ce8			beq 	_SSMEString 				; no more to copy
.9cdf	20 8d a3	jsr $a38d			jsr 	StringTempWrite 			; and write it out.
.9ce2	c8		iny				iny
.9ce3	de 0a 04	dec $040a,x			dec 	NSMantissa0+2,x
.9ce6	d0 f3		bne $9cdb			bne 	_SSMCopy
.9ce8					_SSMEString:
.9ce8	7a		ply				ply
.9ce9					_SSMExit:
.9ce9	60		rts				rts
.9cea					_SSMNull:
.9cea	a9 00		lda #$00			lda 	#0
.9cec	20 4f a3	jsr $a34f			jsr 	StringTempAllocate
.9cef	60		rts				rts
.9cf0					SubstringInitial:
.9cf0	da		phx				phx 								; save initial stack position
.9cf1	08		php				php 								; save carry on stack indicating 2 parameters
.9cf2	20 2c 9d	jsr $9d2c			jsr 	EvaluateString 				; get a string
.9cf5	5a		phy				phy 								; calculate length to exponent.
.9cf6	a0 ff		ldy #$ff			ldy 	#$FF
.9cf8					_SIFindLength:
.9cf8	c8		iny				iny
.9cf9	b1 36		lda ($36),y			lda 	(zTemp0),y
.9cfb	d0 fb		bne $9cf8			bne 	_SIFindLength
.9cfd	98		tya				tya
.9cfe	9d 28 04	sta $0428,x			sta 	NSExponent,x
.9d01	7a		ply				ply
.9d02	e8		inx				inx
.9d03	20 24 8d	jsr $8d24			jsr 	CheckComma 					; comma next
.9d06	20 79 9d	jsr $9d79			jsr 	Evaluate8BitInteger 		; get next parameter
.9d09	28		plp				plp 								; is it the last parameter ?
.9d0a	90 07		bcc $9d13			bcc 	_SSIExit 					; if so, exit.
.9d0c	e8		inx				inx
.9d0d	20 24 8d	jsr $8d24			jsr 	CheckComma 					; comma next
.9d10	20 79 9d	jsr $9d79			jsr 	Evaluate8BitInteger 		; get last parameter
.9d13					_SSIExit:
.9d13	fa		plx				plx
.9d14	20 1c 8d	jsr $8d1c			jsr 	CheckRightBracket 			; check closing bracket
.9d17	60		rts				rts 								; exit

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/exprhelper.asm

.9d18					EvaluateValue:
.9d18	48		pha				pha
.9d19	20 e4 92	jsr $92e4			jsr		EvaluateExpression 			; expression
.9d1c	20 02 96	jsr $9602			jsr 	Dereference					; derefernce it
.9d1f	68		pla				pla
.9d20	60		rts				rts
.9d21					EvaluateNumber:
.9d21	20 18 9d	jsr $9d18			jsr 	EvaluateValue 				; get a value
.9d24	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if string.
.9d27	29 10		and #$10			and 	#NSBIsString
.9d29	d0 16		bne $9d41			bne 	HelperTypeError
.9d2b	60		rts				rts
.9d2c					EvaluateString:
.9d2c	20 18 9d	jsr $9d18			jsr 	EvaluateValue 				; get a value
.9d2f	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if string.
.9d32	29 10		and #$10			and 	#NSBIsString
.9d34	f0 0b		beq $9d41			beq 	HelperTypeError
.9d36					CopyAddressToTemp0:
.9d36	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address -> zTemp0
.9d39	85 36		sta $36				sta 	zTemp0
.9d3b	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9d3e	85 37		sta $37				sta 	zTemp0+1
.9d40	60		rts				rts
.9d41					HelperTypeError:
.9d41	4c 8c 9f	jmp $9f8c			jmp 	TypeError
.9d44					EvaluateInteger:
.9d44	20 21 9d	jsr $9d21			jsr 	EvaluateNumber
.9d47	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check exponent is zero
.9d4a	d0 0a		bne $9d56			bne 	HelperValueError 			; if not, it's a float.
.9d4c	60		rts				rts
.9d4d					EvaluateUnsignedInteger:
.9d4d	20 44 9d	jsr $9d44			jsr 	EvaluateInteger 			; check integer is +ve
.9d50	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9d53	30 01		bmi $9d56			bmi 	HelperValueError
.9d55	60		rts				rts
.9d56					HelperValueError:
.9d56	4c 91 9f	jmp $9f91			jmp 	ArgumentError
.9d59					Evaluate16BitInteger:
.9d59	20 4d 9d	jsr $9d4d			jsr	 	EvaluateUnsignedInteger		; get integer
.9d5c	bd 20 04	lda $0420,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.9d5f	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.9d62	d0 f2		bne $9d56			bne 	HelperValueError
.9d64	60		rts				rts
.9d65					Evaluate16BitIntegerSigned:
.9d65	20 44 9d	jsr $9d44			jsr	 	EvaluateInteger				; get integer
.9d68	bd 20 04	lda $0420,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.9d6b	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.9d6e	d0 e6		bne $9d56			bne 	HelperValueError
.9d70	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; signed ?
.9d73	10 03		bpl $9d78			bpl 	_EISNotSigned
.9d75	20 ad 9d	jsr $9dad			jsr 	NSMNegateMantissa
.9d78					_EISNotSigned:
.9d78	60		rts				rts
.9d79					Evaluate8BitInteger:
.9d79	20 4d 9d	jsr $9d4d			jsr	 	EvaluateUnsignedInteger 	; get an integer
.9d7c	d0 d8		bne $9d56			bne 	HelperValueError
.9d7e	bd 20 04	lda $0420,x			lda 	NSMantissa3,x	 			; bytes 1, 2 & 3 must be zero
.9d81	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.9d84	1d 10 04	ora $0410,x			ora 	NSMantissa1,x
.9d87	d0 cd		bne $9d56			bne 	HelperValueError
.9d89	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9d8c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/mult8x8.asm

.9d8d					Multiply8x8:
.9d8d	4a		lsr a		  		lsr 	a  							; prime the carry bit for the loop
.9d8e	85 36		sta $36			  	sta 	zTemp0
.9d90	86 37		stx $37				stx 	zTemp0+1
.9d92	a9 00		lda #$00			lda 	#0
.9d94	a2 08		ldx #$08			ldx 	#8
.9d96					_M88Loop:
.9d96	90 03		bcc $9d9b			bcc 	_M88NoAdd
.9d98	18		clc				clc
.9d99	65 37		adc $37				adc 	zTemp0+1
.9d9b					_M88NoAdd:
.9d9b	6a		ror a				ror 	a
.9d9c	66 36		ror $36				ror 	zTemp0  					; pull another bit out for the next iteration
.9d9e	ca		dex				dex         						; inc/dec don't modify carry; only shifts and adds do
.9d9f	d0 f5		bne $9d96			bne 	_M88Loop
.9da1	85 37		sta $37				sta 	zTemp0+1 					; store high 8 bits.
.9da3	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/utility.asm

.9da4					NSMNegate:
.9da4	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9da7	49 80		eor #$80			eor 	#NSBIsNegative
.9da9	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9dac	60		rts				rts
.9dad					NSMNegateMantissa:
.9dad	38		sec				sec
.9dae	a9 00		lda #$00			lda 	#0
.9db0	fd 08 04	sbc $0408,x			sbc 	NSMantissa0,x
.9db3	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9db6	a9 00		lda #$00			lda 	#0
.9db8	fd 10 04	sbc $0410,x			sbc 	NSMantissa1,x
.9dbb	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9dbe	a9 00		lda #$00			lda 	#0
.9dc0	fd 18 04	sbc $0418,x			sbc 	NSMantissa2,x
.9dc3	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9dc6	a9 00		lda #$00			lda 	#0
.9dc8	fd 20 04	sbc $0420,x			sbc 	NSMantissa3,x
.9dcb	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9dce	60		rts				rts
.9dcf					NSMShiftUpTwo:
.9dcf	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9dd2	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.9dd5	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9dd8	9d 12 04	sta $0412,x			sta 	NSMantissa1+2,x
.9ddb	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.9dde	9d 1a 04	sta $041a,x			sta 	NSMantissa2+2,x
.9de1	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.9de4	9d 22 04	sta $0422,x			sta 	NSMantissa3+2,x
.9de7	bd 28 04	lda $0428,x			lda 	NSExponent,x
.9dea	9d 2a 04	sta $042a,x			sta 	NSExponent+2,x
.9ded	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9df0	9d 02 04	sta $0402,x			sta 	NSStatus+2,x
.9df3	60		rts				rts
.9df4					NSMSetZeroMantissaOnly:
.9df4	a9 00		lda #$00			lda 	#0
.9df6	80 08		bra $9e00			bra 	NSMSetMantissa
.9df8					NSMSetZero:
.9df8	a9 00		lda #$00			lda 	#0
.9dfa					NSMSetByte:
.9dfa	9e 28 04	stz $0428,x			stz 	NSExponent,x 				; zero exponent, as integer.
.9dfd	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; status zero (integer)
.9e00					NSMSetMantissa:
.9e00	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; mantissa
.9e03	9e 10 04	stz $0410,x			stz 	NSMantissa1,x
.9e06	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.9e09	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.9e0c	60		rts				rts
.9e0d					NSMShiftLeft:
.9e0d	18		clc				clc
.9e0e					NSMRotateLeft:
.9e0e	3e 08 04	rol $0408,x			rol 	NSMantissa0,x
.9e11	3e 10 04	rol $0410,x			rol		NSMantissa1,x
.9e14	3e 18 04	rol $0418,x			rol		NSMantissa2,x
.9e17	3e 20 04	rol $0420,x			rol		NSMantissa3,x
.9e1a	60		rts				rts
.9e1b					NSMShiftRight:
.9e1b	5e 20 04	lsr $0420,x			lsr 	NSMantissa3,x
.9e1e	7e 18 04	ror $0418,x			ror		NSMantissa2,x
.9e21	7e 10 04	ror $0410,x			ror		NSMantissa1,x
.9e24	7e 08 04	ror $0408,x			ror		NSMantissa0,x
.9e27	60		rts				rts
.9e28					NSMIsZero:
.9e28	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.9e2b	1d 18 04	ora $0418,x			ora		NSMantissa2,x
.9e2e	1d 10 04	ora $0410,x			ora		NSMantissa1,x
.9e31	1d 08 04	ora $0408,x			ora		NSMantissa0,x
.9e34	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/asmcore.asm

.9e35					Assemble_ora:
.9e35	20 86 80	jsr $8086		jsr	AssembleGroup1
>9e38	01					.byte $01
.9e39					Assemble_and:
.9e39	20 86 80	jsr $8086		jsr	AssembleGroup1
>9e3c	21					.byte $21
.9e3d					Assemble_eor:
.9e3d	20 86 80	jsr $8086		jsr	AssembleGroup1
>9e40	41					.byte $41
.9e41					Assemble_adc:
.9e41	20 86 80	jsr $8086		jsr	AssembleGroup1
>9e44	61					.byte $61
.9e45					Assemble_sta:
.9e45	20 86 80	jsr $8086		jsr	AssembleGroup1
>9e48	81					.byte $81
.9e49					Assemble_lda:
.9e49	20 86 80	jsr $8086		jsr	AssembleGroup1
>9e4c	a1					.byte $a1
.9e4d					Assemble_cmp:
.9e4d	20 86 80	jsr $8086		jsr	AssembleGroup1
>9e50	c1					.byte $c1
.9e51					Assemble_sbc:
.9e51	20 86 80	jsr $8086		jsr	AssembleGroup1
>9e54	e1					.byte $e1
.9e55					Assemble_asl:
.9e55	20 8d 80	jsr $808d		jsr	AssembleGroup2
>9e58	02					.byte $02
>9e59	75					.byte $75
.9e5a					Assemble_rol:
.9e5a	20 8d 80	jsr $808d		jsr	AssembleGroup2
>9e5d	22					.byte $22
>9e5e	75					.byte $75
.9e5f					Assemble_lsr:
.9e5f	20 8d 80	jsr $808d		jsr	AssembleGroup2
>9e62	42					.byte $42
>9e63	75					.byte $75
.9e64					Assemble_ror:
.9e64	20 8d 80	jsr $808d		jsr	AssembleGroup2
>9e67	62					.byte $62
>9e68	75					.byte $75
.9e69					Assemble_stx:
.9e69	20 8d 80	jsr $808d		jsr	AssembleGroup2
>9e6c	82					.byte $82
>9e6d	50					.byte $50
.9e6e					Assemble_ldx:
.9e6e	20 8d 80	jsr $808d		jsr	AssembleGroup2
>9e71	a2					.byte $a2
>9e72	d0					.byte $d0
.9e73					Assemble_dec:
.9e73	20 8d 80	jsr $808d		jsr	AssembleGroup2
>9e76	c2					.byte $c2
>9e77	55					.byte $55
.9e78					Assemble_inc:
.9e78	20 8d 80	jsr $808d		jsr	AssembleGroup2
>9e7b	e2					.byte $e2
>9e7c	55					.byte $55
.9e7d					Assemble_stz:
.9e7d	20 8d 80	jsr $808d		jsr	AssembleGroup2
>9e80	60					.byte $60
>9e81	44					.byte $44
.9e82					Assemble_bit:
.9e82	20 8d 80	jsr $808d		jsr	AssembleGroup2
>9e85	20					.byte $20
>9e86	55					.byte $55
.9e87					Assemble_sty:
.9e87	20 8d 80	jsr $808d		jsr	AssembleGroup2
>9e8a	80					.byte $80
>9e8b	54					.byte $54
.9e8c					Assemble_ldy:
.9e8c	20 8d 80	jsr $808d		jsr	AssembleGroup2
>9e8f	a0					.byte $a0
>9e90	d5					.byte $d5
.9e91					Assemble_cpy:
.9e91	20 8d 80	jsr $808d		jsr	AssembleGroup2
>9e94	c0					.byte $c0
>9e95	d4					.byte $d4
.9e96					Assemble_cpx:
.9e96	20 8d 80	jsr $808d		jsr	AssembleGroup2
>9e99	e0					.byte $e0
>9e9a	d0					.byte $d0
.9e9b					Assemble_tsb:
.9e9b	20 8d 80	jsr $808d		jsr	AssembleGroup2
>9e9e	00					.byte $00
>9e9f	50					.byte $50
.9ea0					Assemble_trb:
.9ea0	20 8d 80	jsr $808d		jsr	AssembleGroup2
>9ea3	10					.byte $10
>9ea4	50					.byte $50
.9ea5					Assemble_jsr:
.9ea5	20 8d 80	jsr $808d		jsr	AssembleGroup2
>9ea8	14					.byte $14
>9ea9	10					.byte $10
.9eaa					Assemble_jmp:
.9eaa	20 8d 80	jsr $808d		jsr	AssembleGroup2
>9ead	40					.byte $40
>9eae	10					.byte $10
.9eaf					Assemble_bpl:
.9eaf	20 de 80	jsr $80de		jsr	AssembleGroup3
>9eb2	10					.byte $10
.9eb3					Assemble_bmi:
.9eb3	20 de 80	jsr $80de		jsr	AssembleGroup3
>9eb6	30					.byte $30
.9eb7					Assemble_bvc:
.9eb7	20 de 80	jsr $80de		jsr	AssembleGroup3
>9eba	50					.byte $50
.9ebb					Assemble_bvs:
.9ebb	20 de 80	jsr $80de		jsr	AssembleGroup3
>9ebe	70					.byte $70
.9ebf					Assemble_bcc:
.9ebf	20 de 80	jsr $80de		jsr	AssembleGroup3
>9ec2	90					.byte $90
.9ec3					Assemble_bcs:
.9ec3	20 de 80	jsr $80de		jsr	AssembleGroup3
>9ec6	b0					.byte $b0
.9ec7					Assemble_bne:
.9ec7	20 de 80	jsr $80de		jsr	AssembleGroup3
>9eca	d0					.byte $d0
.9ecb					Assemble_beq:
.9ecb	20 de 80	jsr $80de		jsr	AssembleGroup3
>9ece	f0					.byte $f0
.9ecf					Assemble_bra:
.9ecf	20 de 80	jsr $80de		jsr	AssembleGroup3
>9ed2	80					.byte $80
.9ed3					Assemble_brk:
.9ed3	20 14 81	jsr $8114		jsr	AssembleGroup4
>9ed6	00					.byte $00
.9ed7					Assemble_php:
.9ed7	20 14 81	jsr $8114		jsr	AssembleGroup4
>9eda	08					.byte $08
.9edb					Assemble_clc:
.9edb	20 14 81	jsr $8114		jsr	AssembleGroup4
>9ede	18					.byte $18
.9edf					Assemble_plp:
.9edf	20 14 81	jsr $8114		jsr	AssembleGroup4
>9ee2	28					.byte $28
.9ee3					Assemble_sec:
.9ee3	20 14 81	jsr $8114		jsr	AssembleGroup4
>9ee6	38					.byte $38
.9ee7					Assemble_rti:
.9ee7	20 14 81	jsr $8114		jsr	AssembleGroup4
>9eea	40					.byte $40
.9eeb					Assemble_pha:
.9eeb	20 14 81	jsr $8114		jsr	AssembleGroup4
>9eee	48					.byte $48
.9eef					Assemble_cli:
.9eef	20 14 81	jsr $8114		jsr	AssembleGroup4
>9ef2	58					.byte $58
.9ef3					Assemble_phy:
.9ef3	20 14 81	jsr $8114		jsr	AssembleGroup4
>9ef6	5a					.byte $5a
.9ef7					Assemble_rts:
.9ef7	20 14 81	jsr $8114		jsr	AssembleGroup4
>9efa	60					.byte $60
.9efb					Assemble_pla:
.9efb	20 14 81	jsr $8114		jsr	AssembleGroup4
>9efe	68					.byte $68
.9eff					Assemble_sei:
.9eff	20 14 81	jsr $8114		jsr	AssembleGroup4
>9f02	78					.byte $78
.9f03					Assemble_ply:
.9f03	20 14 81	jsr $8114		jsr	AssembleGroup4
>9f06	7a					.byte $7a
.9f07					Assemble_dey:
.9f07	20 14 81	jsr $8114		jsr	AssembleGroup4
>9f0a	88					.byte $88
.9f0b					Assemble_txa:
.9f0b	20 14 81	jsr $8114		jsr	AssembleGroup4
>9f0e	8a					.byte $8a
.9f0f					Assemble_tya:
.9f0f	20 14 81	jsr $8114		jsr	AssembleGroup4
>9f12	98					.byte $98
.9f13					Assemble_txs:
.9f13	20 14 81	jsr $8114		jsr	AssembleGroup4
>9f16	9a					.byte $9a
.9f17					Assemble_tay:
.9f17	20 14 81	jsr $8114		jsr	AssembleGroup4
>9f1a	a8					.byte $a8
.9f1b					Assemble_tax:
.9f1b	20 14 81	jsr $8114		jsr	AssembleGroup4
>9f1e	aa					.byte $aa
.9f1f					Assemble_clv:
.9f1f	20 14 81	jsr $8114		jsr	AssembleGroup4
>9f22	b8					.byte $b8
.9f23					Assemble_tsx:
.9f23	20 14 81	jsr $8114		jsr	AssembleGroup4
>9f26	ba					.byte $ba
.9f27					Assemble_iny:
.9f27	20 14 81	jsr $8114		jsr	AssembleGroup4
>9f2a	c8					.byte $c8
.9f2b					Assemble_dex:
.9f2b	20 14 81	jsr $8114		jsr	AssembleGroup4
>9f2e	ca					.byte $ca
.9f2f					Assemble_cld:
.9f2f	20 14 81	jsr $8114		jsr	AssembleGroup4
>9f32	d8					.byte $d8
.9f33					Assemble_phx:
.9f33	20 14 81	jsr $8114		jsr	AssembleGroup4
>9f36	da					.byte $da
.9f37					Assemble_stp:
.9f37	20 14 81	jsr $8114		jsr	AssembleGroup4
>9f3a	db					.byte $db
.9f3b					Assemble_inx:
.9f3b	20 14 81	jsr $8114		jsr	AssembleGroup4
>9f3e	e8					.byte $e8
.9f3f					Assemble_nop:
.9f3f	20 14 81	jsr $8114		jsr	AssembleGroup4
>9f42	ea					.byte $ea
.9f43					Assemble_sed:
.9f43	20 14 81	jsr $8114		jsr	AssembleGroup4
>9f46	f8					.byte $f8
.9f47					Assemble_plx:
.9f47	20 14 81	jsr $8114		jsr	AssembleGroup4
>9f4a	fa					.byte $fa

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/constants.asm

.9f4b					DecimalScalarTable:
>9f4b	66 66 66 66				.dword $66666666 ; 0.1
>9f4f	de					.byte $de
>9f50	1f 85 eb 51				.dword $51eb851f ; 0.01
>9f54	db					.byte $db
>9f55	4c 37 89 41				.dword $4189374c ; 0.001
>9f59	d8					.byte $d8
>9f5a	ac 8b db 68				.dword $68db8bac ; 0.0001
>9f5e	d4					.byte $d4
>9f5f	24 d6 e2 53				.dword $53e2d624 ; 1e-05
>9f63	d1					.byte $d1
>9f64	83 de 1b 43				.dword $431bde83 ; 1e-06
>9f68	ce					.byte $ce
>9f69	6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>9f6d	ca					.byte $ca
>9f6e	89 3b e6 55				.dword $55e63b89 ; 1e-08
>9f72	c7					.byte $c7
>9f73	a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>9f77	c4					.byte $c4
>9f78	67 7f f3 6d				.dword $6df37f67 ; 1e-10
>9f7c	c0					.byte $c0
>9f7d	86 ff f5 57				.dword $57f5ff86 ; 1e-11
>9f81	bd					.byte $bd

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.asm

.9f82					SyntaxError:
.9f82	a9 02		lda #$02		lda	#2
.9f84	4c 35 8d	jmp $8d35		jmp	ErrorHandler
.9f87					RangeError:
.9f87	a9 04		lda #$04		lda	#4
.9f89	4c 35 8d	jmp $8d35		jmp	ErrorHandler
.9f8c					TypeError:
.9f8c	a9 05		lda #$05		lda	#5
.9f8e	4c 35 8d	jmp $8d35		jmp	ErrorHandler
.9f91					ArgumentError:
.9f91	a9 07		lda #$07		lda	#7
.9f93	4c 35 8d	jmp $8d35		jmp	ErrorHandler
.9f96					NotDoneError:
.9f96	a9 0c		lda #$0c		lda	#12
.9f98	4c 35 8d	jmp $8d35		jmp	ErrorHandler
.9f9b					ErrorText:
>9f9b	42 72 65 61 6b 00			.text	"Break",0
>9fa1	53 79 6e 74 61 78 20 65			.text	"Syntax error",0
>9fa9	72 72 6f 72 00
>9fae	44 69 76 69 73 69 6f 6e			.text	"Division by zero",0
>9fb6	20 62 79 20 7a 65 72 6f 00
>9fbf	4f 75 74 20 6f 66 20 52			.text	"Out of Range",0
>9fc7	61 6e 67 65 00
>9fcc	54 79 70 65 20 6d 69 73			.text	"Type mismatch",0
>9fd4	6d 61 74 63 68 00
>9fda	4f 75 74 20 6f 66 20 6d			.text	"Out of memory",0
>9fe2	65 6d 6f 72 79 00
>9fe8	49 6c 6c 65 67 61 6c 20			.text	"Illegal argument",0
>9ff0	61 72 67 75 6d 65 6e 74 00
>9ff9	53 74 6f 70 00				.text	"Stop",0
>9ffe	53 74 72 69 6e 67 20 74			.text	"String too long",0
>a006	6f 6f 20 6c 6f 6e 67 00
>a00e	41 73 73 65 72 74 69 6f			.text	"Assertion failed",0
>a016	6e 20 66 61 69 6c 65 64 00
>a01f	4f 75 74 20 6f 66 20 64			.text	"Out of data",0
>a027	61 74 61 00
>a02b	55 6e 69 6d 70 6c 65 6d			.text	"Unimplemented",0
>a033	65 6e 74 65 64 00
>a039	4e 6f 20 73 75 63 68 20			.text	"No such line number",0
>a041	6c 69 6e 65 20 6e 75 6d 62 65 72 00
>a04d	52 65 74 75 72 6e 20 77			.text	"Return without Gosub",0
>a055	69 74 68 6f 75 74 20 47 6f 73 75 62 00
>a062	55 6e 74 69 6c 20 77 69			.text	"Until without Repeat",0
>a06a	74 68 6f 75 74 20 52 65 70 65 61 74 00
>a077	57 65 6e 64 20 77 69 74			.text	"Wend without While",0
>a07f	68 6f 75 74 20 57 68 69 6c 65 00
>a08a	4e 65 78 74 20 77 69 74			.text	"Next without For",0
>a092	68 6f 75 74 20 46 6f 72 00
>a09b	42 41 53 49 43 20 53 74			.text	"BASIC Stack full",0
>a0a3	61 63 6b 20 66 75 6c 6c 00
>a0ac	4f 70 65 6e 20 53 74 72			.text	"Open Structure",0
>a0b4	75 63 74 75 72 65 00
>a0bb	45 6e 64 50 72 6f 63 20			.text	"EndProc without call",0
>a0c3	77 69 74 68 6f 75 74 20 63 61 6c 6c 00
>a0d0	41 72 72 61 79 20 61 6c			.text	"Array already defined",0
>a0d8	72 65 61 64 79 20 64 65 66 69 6e 65 64 00
>a0e6	41 72 72 61 79 20 73 69			.text	"Array size",0
>a0ee	7a 65 00
>a0f1	42 61 64 20 61 72 72 61			.text	"Bad array index",0
>a0f9	79 20 69 6e 64 65 78 00

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/timestamp.asm

>a101	42 75 69 6c 74 20 54 68			.text "Built Thursday 17-Nov-2022. Build 3074."
>a109	75 72 73 64 61 79 20 31 37 2d 4e 6f 76 2d 32 30
>a119	32 32 2e 20 42 75 69 6c 64 20 33 30 37 34 2e

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/delete.asm

.a128					MemoryDeleteLine:
.a128	20 47 a1	jsr $a147			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.a12b	b2 30		lda ($30)			lda 	(codePtr) 					; size to delete => y
.a12d	a8		tay				tay
.a12e					_MDDLLoop:
.a12e	b1 30		lda ($30),y			lda 	(codePtr),y 				; copy down
.a130	92 30		sta ($30)			sta 	(codePtr)
.a132	a5 30		lda $30				lda 	codePtr 					; check done the lot.
.a134	c5 3a		cmp $3a				cmp 	zTemp2
.a136	d0 07		bne $a13f			bne 	_MDLDLNext
.a138	a5 31		lda $31				lda 	codePtr+1
.a13a	c5 3b		cmp $3b				cmp 	zTemp2+1
.a13c	d0 01		bne $a13f			bne 	_MDLDLNext
.a13e					_MDDLExit:
.a13e	60		rts				rts
.a13f					_MDLDLNext:
.a13f	e6 30		inc $30				inc 	codePtr						; next byte
.a141	d0 eb		bne $a12e			bne 	_MDDLLoop
.a143	e6 31		inc $31				inc 	codePtr+1
.a145	80 e7		bra $a12e			bra 	_MDDLLoop
.a147					IMemoryFindEnd:
.a147	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a149	85 3a		sta $3a				sta 	0+zTemp2
.a14b	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a14d	85 3b		sta $3b				sta 	1+zTemp2
.a14f					_MDLFELoop:
.a14f	b2 3a		lda ($3a)			lda 	(zTemp2)
.a151	f0 0b		beq $a15e			beq 	_MDLFEExit
.a153	18		clc				clc
.a154	65 3a		adc $3a				adc 	zTemp2
.a156	85 3a		sta $3a				sta 	zTemp2
.a158	90 f5		bcc $a14f			bcc 	_MDLFELoop
.a15a	e6 3b		inc $3b				inc 	zTemp2+1
.a15c	80 f1		bra $a14f			bra 	_MDLFELoop
.a15e					_MDLFEExit:
.a15e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/insert.asm

.a15f					MemoryInsertLine:
.a15f	08		php				php
.a160	20 47 a1	jsr $a147			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.a163	a5 3b		lda $3b				lda 	zTemp2+1 					; space ?
.a165	1a		inc a				inc 	a
.a166	c9 7f		cmp #$7f			cmp 	#(BasicEnd >> 8)-1
.a168	b0 36		bcs $a1a0			bcs 	_MDLIError
.a16a	28		plp				plp
.a16b	90 08		bcc $a175			bcc 	_MDLIFound
.a16d	a5 3a		lda $3a				lda 	zTemp2 						; if CS on entry append.
.a16f	85 30		sta $30				sta 	codePtr
.a171	a5 3b		lda $3b				lda 	zTemp2+1
.a173	85 31		sta $31				sta 	codePtr+1
.a175					_MDLIFound:
.a175	ad a7 04	lda $04a7			lda 	tokenOffset 				; insert gap in Y, the offset, e.g. length of the new line
.a178	a8		tay				tay
.a179					_MDLIInsert:
.a179	b2 3a		lda ($3a)			lda 	(zTemp2) 					; shift one byte up , at least one covers end case.
.a17b	91 3a		sta ($3a),y			sta 	(zTemp2),y 					; work from top down.
.a17d	a5 30		lda $30				lda 	codePtr 					; done insert point ?
.a17f	c5 3a		cmp $3a				cmp 	zTemp2
.a181	d0 06		bne $a189			bne 	_MDLINext
.a183	a5 31		lda $31				lda 	codePtr+1
.a185	c5 3b		cmp $3b				cmp 	zTemp2+1
.a187	f0 0a		beq $a193			beq 	_MDLIHaveSpace
.a189					_MDLINext:
.a189	a5 3a		lda $3a				lda 	zTemp2 						; if no, keep zTemp2 going backwards
.a18b	d0 02		bne $a18f			bne 	_MDLINoBorrow
.a18d	c6 3b		dec $3b				dec 	zTemp2+1
.a18f					_MDLINoBorrow:
.a18f	c6 3a		dec $3a				dec 	zTemp2
.a191	80 e6		bra $a179			bra 	_MDLIInsert
.a193					_MDLIHaveSpace:
.a193	ac a7 04	ldy $04a7			ldy 	tokenOffset 				; bytes to copy
.a196	88		dey				dey 								; from offset-1 to 0
.a197					_MDLICopy:
.a197	b9 a7 04	lda $04a7,y			lda 	tokenOffset,y
.a19a	91 30		sta ($30),y			sta 	(codePtr),y
.a19c	88		dey				dey
.a19d	10 f8		bpl $a197			bpl 	_MDLICopy
.a19f	60		rts				rts
.a1a0					_MDLIError:
.a1a0	a9 06		lda #$06		lda	#6
.a1a2	4c 35 8d	jmp $8d35		jmp	ErrorHandler
.a1a5					MDLAppendLine:
.a1a5	86 37		stx $37				stx 	zTemp0+1 					; save new line at zTemp0
.a1a7	85 36		sta $36				sta 	zTemp0
.a1a9	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a1ab	85 38		sta $38				sta 	0+zTemp1
.a1ad	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a1af	85 39		sta $39				sta 	1+zTemp1
.a1b1	b2 38		lda ($38)			lda 	(zTemp1)
.a1b3	d0 0a		bne $a1bf			bne 	_MDLANoInitialise
.a1b5	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a1b7	8d 2a 06	sta $062a			sta 	0+AppendPointer
.a1ba	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a1bc	8d 2b 06	sta $062b			sta 	1+AppendPointer
.a1bf					_MDLANoInitialise:
.a1bf	18		clc				clc
.a1c0	ad 2a 06	lda $062a			lda 	AppendPointer 				; copy append pointer to zTemp1 adding the offset as you go
.a1c3	85 38		sta $38				sta 	zTemp1
.a1c5	72 36		adc ($36)			adc 	(zTemp0)
.a1c7	8d 2a 06	sta $062a			sta 	AppendPointer
.a1ca	ad 2b 06	lda $062b			lda 	AppendPointer+1
.a1cd	85 39		sta $39				sta 	zTemp1+1
.a1cf	69 00		adc #$00			adc 	#0
.a1d1	8d 2b 06	sta $062b			sta 	AppendPointer+1
.a1d4	a0 00		ldy #$00			ldy 	#0
.a1d6					_MDLACopy:
.a1d6	b1 36		lda ($36),y			lda 	(zTemp0),y 					; copy new line in
.a1d8	91 38		sta ($38),y			sta 	(zTemp1),y
.a1da	c8		iny				iny
.a1db	98		tya				tya
.a1dc	d2 36		cmp ($36)			cmp 	(zTemp0) 					; done whole line
.a1de	d0 f6		bne $a1d6			bne 	_MDLACopy
.a1e0	a9 00		lda #$00			lda 	#0 							; end of program.
.a1e2	91 38		sta ($38),y			sta 	(zTemp1),y
.a1e4	60		rts				rts
.062a					AppendPointer:
>062a							.fill 	2

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/memory.asm

.a1e5					MemoryNew:
.a1e5	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a1e7	85 30		sta $30				sta 	codePtr
.a1e9	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a1eb	85 31		sta $31				sta 	codePtr+1
.a1ed	a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.a1ef	92 30		sta ($30)			sta 	(codePtr)
.a1f1	60		rts				rts
.a1f2					MemoryInline:
.a1f2	98		tya				tya 								; put address into stack,x
.a1f3	18		clc				clc
.a1f4	65 30		adc $30				adc 	codePtr
.a1f6	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a1f9	a5 31		lda $31				lda 	codePtr+1
.a1fb	69 00		adc #$00			adc 	#0
.a1fd	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a200	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.a203	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.a206	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/search.asm

.a207					MemorySearch:
.a207	85 36		sta $36				sta 	zTemp0 						; save line number zTemp0
.a209	86 37		stx $37				stx 	zTemp0+1
.a20b	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a20d	85 30		sta $30				sta 	codePtr
.a20f	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a211	85 31		sta $31				sta 	codePtr+1
.a213					_MTAXLoop:
.a213	b2 30		lda ($30)			lda 	(codePtr)
.a215	18		clc				clc
.a216	f0 21		beq $a239			beq 	_MTAXExit 					; reached end, exit with CC.
.a218	a0 01		ldy #$01			ldy 	#1 							; calculate current line# - requested line#
.a21a	b1 30		lda ($30),y			lda 	(codePtr),y
.a21c	38		sec				sec
.a21d	e5 36		sbc $36				sbc 	zTemp0
.a21f	85 38		sta $38				sta 	zTemp1 						; save interim to set Z
.a221	c8		iny				iny 								; do the MSB
.a222	b1 30		lda ($30),y			lda 	(codePtr),y
.a224	e5 37		sbc $37				sbc 	zTemp0+1
.a226	05 38		ora $38				ora 	zTemp1
.a228	f0 0f		beq $a239			beq 	_MTAXExit	 				; found
.a22a	b0 0d		bcs $a239			bcs 	_MTAXExit 					; current < required exit
.a22c	18		clc				clc
.a22d	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.a22f	65 30		adc $30				adc 	codePtr
.a231	85 30		sta $30				sta 	codePtr
.a233	90 02		bcc $a237			bcc 	_CREExit
.a235	e6 31		inc $31				inc 	codePtr+1
.a237					_CREExit:
.a237	80 da		bra $a213			bra 	_MTAXLoop
.a239					_MTAXExit:
.a239	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/bytes.asm

.a23a					StackPushByte:
.a23a	48		pha				pha 								; save byte
.a23b	a5 34		lda $34				lda 	BasicStack
.a23d	d0 09		bne $a248			bne 	_SPBNoBorrow
.a23f	c6 35		dec $35				dec 	BasicStack+1
.a241	48		pha				pha
.a242	a5 35		lda $35				lda 	BasicStack+1
.a244	c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.a246	90 06		bcc $a24e			bcc 	_SPBMemory
.a248					_SPBNoBorrow:
.a248	c6 34		dec $34				dec 	BasicStack
.a24a	68		pla				pla 								; get back and write
.a24b	92 34		sta ($34)			sta 	(BasicStack)
.a24d	60		rts				rts
.a24e					_SPBMemory:
.a24e	a9 12		lda #$12		lda	#18
.a250	4c 35 8d	jmp $8d35		jmp	ErrorHandler
.a253					StackPopByte:
.a253	b2 34		lda ($34)			lda 	(BasicStack)
.a255	e6 34		inc $34				inc 	BasicStack
.a257	d0 02		bne $a25b			bne 	_SPBNoCarry
.a259	e6 35		inc $35				inc 	BasicStack+1
.a25b					_SPBNoCarry:
.a25b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/frames.asm

.a25c					StackOpen:
.a25c	48		pha				pha 								; save frame byte
.a25d	29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.a25f	0a		asl a				asl 	a 							; claim twice this for storage
.a260	49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.a262	38		sec				sec 								; so basically subtracting from
.a263	65 34		adc $34				adc 	basicStack 	 				; basicStack
.a265	85 34		sta $34				sta 	basicStack
.a267	b0 08		bcs $a271			bcs 	_SONoBorrow
.a269	c6 35		dec $35				dec 	basicStack+1
.a26b	a5 35		lda $35				lda 	basicStack+1 				; have we reached stack overflow
.a26d	c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.a26f	90 04		bcc $a275			bcc 	_SOMemory
.a271					_SONoBorrow:
.a271	68		pla				pla 								; get marker back and write at TOS
.a272	92 34		sta ($34)			sta 	(basicStack)
.a274	60		rts				rts
.a275					_SOMemory:
.a275	a9 12		lda #$12		lda	#18
.a277	4c 35 8d	jmp $8d35		jmp	ErrorHandler
.a27a					StackClose:
.a27a	b2 34		lda ($34)			lda 	(basicStack) 				; get TOS marker
.a27c	29 0f		and #$0f			and 	#$0F 						; bytes to add back
.a27e	0a		asl a				asl 	a 							; claim twice this.
.a27f	65 34		adc $34				adc 	basicStack 					; add to the stack pointer.
.a281	85 34		sta $34				sta 	basicStack
.a283	90 02		bcc $a287			bcc 	_SCExit
.a285	e6 35		inc $35				inc 	basicStack+1
.a287					_SCExit:
.a287	60		rts				rts
.a288					StackCheckFrame:
.a288	48		pha				pha
.a289					_StackRemoveLocals:
.a289	b2 34		lda ($34)			lda 	(basicStack) 				; check for local, keep popping them
.a28b	c9 03		cmp #$03			cmp 	#STK_LOCALS+1
.a28d	b0 05		bcs $a294			bcs 	_SCNoLocal
.a28f	20 02 88	jsr $8802			jsr 	LocalPopValue
.a292	80 f5		bra $a289			bra 	_StackRemoveLocals
.a294					_SCNoLocal:
.a294	68		pla				pla
.a295	52 34		eor ($34)			eor 	(basicStack) 				; xor with toS marker
.a297	29 f0		and #$f0			and 	#$F0 						; check type bits
.a299	d0 01		bne $a29c			bne 	_SCFError 					; different, we have structures mixed up
.a29b	60		rts				rts
.a29c					_SCFError:
.a29c	8a		txa				txa 								; report error X
.a29d	4c 35 8d	jmp $8d35			jmp 	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/location.asm

.a2a0					STKSaveCodePosition:
.a2a0	5a		phy				phy
.a2a1	98		tya				tya 								; save Y
.a2a2	a0 05		ldy #$05			ldy 	#5
.a2a4	91 34		sta ($34),y			sta 	(basicStack),y
.a2a6	88		dey				dey 								; save Code Pointer
.a2a7					_STKSaveLoop:
.a2a7	b9 2f 00	lda $002f,y			lda 	safePtr-1,y 				; allows us to access the pointer w/out issues.
.a2aa	91 34		sta ($34),y			sta 	(basicStack),y
.a2ac	88		dey				dey
.a2ad	d0 f8		bne $a2a7			bne 	_STKSaveLoop
.a2af	7a		ply				ply
.a2b0	60		rts				rts
.a2b1					STKLoadCodePosition:
.a2b1	a0 01		ldy #$01			ldy 	#1 							; load code pointer back
.a2b3					_STKLoadLoop:
.a2b3	b1 34		lda ($34),y			lda 	(basicStack),y
.a2b5	99 2f 00	sta $002f,y			sta 	safePtr-1,y
.a2b8	c8		iny				iny
.a2b9	c0 05		cpy #$05			cpy 	#5
.a2bb	d0 f6		bne $a2b3			bne 	_STKLoadLoop
.a2bd	b1 34		lda ($34),y			lda 	(basicStack),y 				; get Y offset
.a2bf	a8		tay				tay
.a2c0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/setup.asm

.a2c1					StackReset:
.a2c1	a9 ff		lda #$ff			lda 	#((BasicStackBase+BasicStackSize-1) & $FF)
.a2c3	85 34		sta $34				sta 	0+basicStack
.a2c5	a9 0f		lda #$0f			lda 	#((BasicStackBase+BasicStackSize-1) >> 8)
.a2c7	85 35		sta $35				sta 	1+basicStack
.a2c9	a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.a2cb	92 34		sta ($34)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.a2cd	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/concrete.asm

.a2ce					StringConcrete:
.a2ce	5a		phy				phy 								; save position on stack
.a2cf	20 c1 99	jsr $99c1			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.a2d2	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy target string to zTemp1
.a2d5	85 38		sta $38				sta 	zTemp1
.a2d7	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a2da	85 39		sta $39				sta 	zTemp1+1
.a2dc	a0 ff		ldy #$ff			ldy 	#$FF	 					; calculate string length
.a2de					_SALength:
.a2de	c8		iny				iny
.a2df	b1 38		lda ($38),y			lda 	(zTemp1),y
.a2e1	d0 fb		bne $a2de			bne 	_SALength
.a2e3	c0 fd		cpy #$fd			cpy 	#253 						; string too long
.a2e5	b0 3f		bcs $a326			bcs 	_SALengthError
.a2e7	98		tya				tya 				 				; length of the new string
.a2e8	18		clc				clc
.a2e9	69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.a2eb	90 02		bcc $a2ef			bcc 	_SAHaveLength
.a2ed	a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.a2ef					_SAHaveLength:
.a2ef	48		pha				pha 								; save length.
.a2f0	38		sec				sec
.a2f1	49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.a2f3	6d 8e 04	adc $048e			adc 	StringMemory
.a2f6	8d 8e 04	sta $048e			sta 	StringMemory
.a2f9	85 3a		sta $3a				sta 	zTemp2 						; update storage address
.a2fb	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; update mantissa address
.a2fe	a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.a300	6d 8f 04	adc $048f			adc 	StringMemory+1
.a303	8d 8f 04	sta $048f			sta 	StringMemory+1
.a306	85 3b		sta $3b				sta 	zTemp2+1
.a308	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a30b	68		pla				pla 								; save length-3 (chars allowed) in first byte
.a30c	38		sec				sec
.a30d	e9 03		sbc #$03			sbc 	#3
.a30f	92 3a		sta ($3a)			sta 	(zTemp2)
.a311	a9 00		lda #$00			lda 	#0 							; clear the status byte.
.a313	a0 01		ldy #$01			ldy 	#1
.a315	91 3a		sta ($3a),y			sta 	(zTemp2),y
.a317					_SACopyNewString:
.a317	a0 00		ldy #$00			ldy 	#0
.a319					_SACopyNSLoop:
.a319	b1 38		lda ($38),y			lda 	(zTemp1),y 					; get character
.a31b	c8		iny				iny 								; write two on in string storage
.a31c	c8		iny				iny
.a31d	91 3a		sta ($3a),y			sta 	(zTemp2),y
.a31f	88		dey				dey 								; this makes it one one.
.a320	c9 00		cmp #$00			cmp 	#0 							; until EOS copied
.a322	d0 f5		bne $a319			bne 	_SACopyNSLoop
.a324	7a		ply				ply
.a325	60		rts				rts
.a326					_SALengthError:
.a326	a9 09		lda #$09		lda	#9
.a328	4c 35 8d	jmp $8d35		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/stringalloc.asm

.a32b					StringSystemInitialise:
.a32b	a9 ff		lda #$ff			lda 	#((EndVariableSpace-1) & $FF)
.a32d	8d 8e 04	sta $048e			sta 	0+StringMemory
.a330	a9 1f		lda #$1f			lda 	#((EndVariableSpace-1) >> 8)
.a332	8d 8f 04	sta $048f			sta 	1+StringMemory
.a335	9c ff 1f	stz $1fff			stz 	EndVariableSpace-1 			; put a zero at the end, so know end of string memory.
.a338	60		rts				rts
.a339					StringSpaceInitialise:
.a339	20 c1 99	jsr $99c1			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.a33c	a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.a33e	8d 90 04	sta $0490			sta 	StringInitialised
.a341	ad 8e 04	lda $048e			lda 	StringMemory 				; allocate 256 bytes for one concreted string
.a344	8d 91 04	sta $0491			sta 	StringTempPointer
.a347	ad 8f 04	lda $048f			lda 	StringMemory+1
.a34a	3a		dec a				dec 	a
.a34b	8d 92 04	sta $0492			sta 	StringTempPointer+1
.a34e	60		rts				rts
.a34f					StringTempAllocate:
.a34f	c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.a351	b0 35		bcs $a388			bcs 	_STALength
.a353	2c 90 04	bit $0490			bit 	StringInitialised 			; already initialised
.a356	30 05		bmi $a35d			bmi 	_STAAllocate
.a358	48		pha				pha 								; save value to subtract.
.a359	20 39 a3	jsr $a339			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.a35c	68		pla				pla 								; restore it
.a35d					_STAAllocate:
.a35d	49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.a35f	18		clc				clc  								; deliberate allows one more
.a360	6d 91 04	adc $0491			adc 	StringTempPointer 			; subtract from temp pointer
.a363	8d 91 04	sta $0491			sta 	StringTempPointer
.a366	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; address in mantissa
.a369	85 3c		sta $3c				sta 	zsTemp 						; and zsTemp
.a36b	ad 92 04	lda $0492			lda 	StringTempPointer+1
.a36e	69 ff		adc #$ff			adc 	#$FF
.a370	8d 92 04	sta $0492			sta 	StringTempPointer+1
.a373	85 3d		sta $3d				sta 	zsTemp+1
.a375	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a378	9e 18 04	stz $0418,x			stz 	NSMantissa2,x 				; set the typing data
.a37b	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.a37e	a9 10		lda #$10			lda 	#NSTString
.a380	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a383	a9 00		lda #$00			lda 	#0 							; clear the target string
.a385	92 3c		sta ($3c)			sta 	(zsTemp)
.a387	60		rts				rts
.a388					_STALength:
.a388	a9 09		lda #$09		lda	#9
.a38a	4c 35 8d	jmp $8d35		jmp	ErrorHandler
.a38d					StringTempWrite:
.a38d	48		pha				pha
.a38e	92 3c		sta ($3c)			sta 	(zsTemp)
.a390	e6 3c		inc $3c				inc 	zsTemp
.a392	d0 02		bne $a396			bne 	_STWNoCarry
.a394	e6 3d		inc $3d				inc 	zsTemp+1
.a396					_STWNoCarry:
.a396	a9 00		lda #$00			lda 	#0
.a398	92 3c		sta ($3c)			sta 	(zsTemp)
.a39a	68		pla				pla
.a39b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_hardware.module

=1					hardwareIntegrated=1
.a39c					UnaryEvent:
.a39c	fa		plx				plx
.a39d	20 10 a7	jsr $a710			jsr 	TimerToStackX 				; timer in +0
.a3a0	e8		inx				inx  								; put reference into +1
.a3a1	20 be 97	jsr $97be			jsr 	EvaluateTerm
.a3a4	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if is integer reference
.a3a7	c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.a3a9	d0 57		bne $a402			bne 	_UEType
.a3ab	e8		inx				inx 								; put the step in +2
.a3ac	20 24 8d	jsr $8d24			jsr 	CheckComma
.a3af	20 59 9d	jsr $9d59			jsr 	Evaluate16BitInteger
.a3b2	20 1c 8d	jsr $8d1c			jsr 	CheckRightBracket
.a3b5	ca		dex				dex
.a3b6	ca		dex				dex
.a3b7	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; copy reference to zTemp0
.a3ba	85 36		sta $36				sta 	zTemp0
.a3bc	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.a3bf	85 37		sta $37				sta 	zTemp0+1
.a3c1	5a		phy				phy
.a3c2	a0 03		ldy #$03			ldy 	#3 							; check bit 7 of last bit, the packed sign bit
.a3c4	b1 36		lda ($36),y			lda 	(zTemp0),y
.a3c6	30 36		bmi $a3fe			bmi 	_UEFalse 					; exit if signed.
.a3c8	a0 00		ldy #$00			ldy 	#0 							; has it timed out (24 bit)
.a3ca	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.a3cd	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.a3cf	c8		iny				iny
.a3d0	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a3d3	f1 36		sbc ($36),y			sbc		(zTemp0),y
.a3d5	c8		iny				iny
.a3d6	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.a3d9	f1 36		sbc ($36),y			sbc		(zTemp0),y
.a3db	90 21		bcc $a3fe			bcc 	_UEFalse 					; no, return FALSE.
.a3dd	18		clc				clc
.a3de	a0 00		ldy #$00			ldy 	#0 							; work out new value as timer() + step
.a3e0	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.a3e3	7d 0a 04	adc $040a,x			adc 	NSMantissa0+2,x
.a3e6	91 36		sta ($36),y			sta 	(zTemp0),y
.a3e8	c8		iny				iny
.a3e9	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a3ec	7d 12 04	adc $0412,x			adc 	NSMantissa1+2,x
.a3ef	91 36		sta ($36),y			sta 	(zTemp0),y
.a3f1	c8		iny				iny
.a3f2	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.a3f5	7d 1a 04	adc $041a,x			adc 	NSMantissa2+2,x
.a3f8	91 36		sta ($36),y			sta 	(zTemp0),y
.a3fa	7a		ply				ply
.a3fb	4c a2 8d	jmp $8da2			jmp 	ReturnTrue
.a3fe					_UEFalse:
.a3fe	7a		ply				ply 								; restore Y
.a3ff	4c ae 8d	jmp $8dae			jmp 	ReturnFalse 				; and return False
.a402					_UEType:
.a402	4c 8c 9f	jmp $9f8c			jmp 	TypeError
.a405					RectangleCommand:
.a405	a9 44		lda #$44			lda 	#GCMD_FrameRect				; frame rectangle
.a407	80 02		bra $a40b			bra 	ShapeDrawCmd
.a409					CircleCommand:
.a409	a9 48		lda #$48			lda 	#GCMD_FrameCircle 				; framed circle
.a40b					ShapeDrawCmd:
.a40b	20 99 a4	jsr $a499			jsr 	RunGraphicsCommand
.a40e					ShapeDraw:
.a40e	0d 2d 06	ora $062d			ora 	gxFillSolid  				; adjust AXY for solid fill.
.a411	4c 8d a4	jmp $a48d			jmp 	ExecuteGraphicCommand	 	; and complete
.a414					SpriteCommand:
.a414	a2 00		ldx #$00			ldx 	#0
.a416	20 79 9d	jsr $9d79			jsr 	Evaluate8BitInteger 		; get image number.
.a419	5a		phy				phy
.a41a	a9 0e		lda #$0e			lda 	#GCMD_SpriteUse 			; use that image.
.a41c	ae 08 04	ldx $0408			ldx 	NSMantissa0
.a41f	e0 40		cpx #$40			cpx 	#64 						; 0-63 only
.a421	b0 0d		bcs $a430			bcs 	_SCRange
.a423	a0 ff		ldy #$ff			ldy 	#255
.a425	20 e5 a9	jsr $a9e5			jsr 	GXGraphicDraw
.a428	a9 52		lda #$52			lda 	#GCMD_SpriteMove
.a42a	7a		ply				ply
.a42b	20 99 a4	jsr $a499			jsr 	RunGraphicsCommand
.a42e	80 5d		bra $a48d			bra 	ExecuteGraphicCommand
.a430					_SCRange:
.a430	4c 87 9f	jmp $9f87			jmp 	RangeError
.a433					ImageCommand:
.a433	a2 00		ldx #$00			ldx 	#0
.a435	20 79 9d	jsr $9d79			jsr 	Evaluate8BitInteger 		; get image number.
.a438	20 99 a4	jsr $a499			jsr 	RunGraphicsCommand
.a43b					ImageRunDraw:
.a43b	09 40		ora #$40			ora 	#GCMD_Move					; move cursor
.a43d	20 e5 a9	jsr $a9e5			jsr 	GXGraphicDraw
.a440	ad 33 06	lda $0633			lda 	gxDrawScale
.a443	0a		asl a				asl 	a
.a444	0a		asl a				asl 	a
.a445	0a		asl a				asl 	a
.a446	a8		tay				tay
.a447	a9 0c		lda #$0c			lda 	#GCMD_DrawSprite 			; image drawing
.a449	ae 08 04	ldx $0408			ldx 	NSMantissa0
.a44c	20 e5 a9	jsr $a9e5			jsr 	GXGraphicDraw
.a44f	60		rts				rts
.a450					TextCommand:
.a450	a2 00		ldx #$00			ldx 	#0
.a452	20 2c 9d	jsr $9d2c			jsr 	EvaluateString 				; get text
.a455	20 99 a4	jsr $a499			jsr 	RunGraphicsCommand
.a458					TextRunDraw:
.a458	09 40		ora #$40			ora 	#GCMD_Move 					; move cursor
.a45a	20 e5 a9	jsr $a9e5			jsr 	GXGraphicDraw
.a45d	a0 00		ldy #$00			ldy 	#0
.a45f					_IRDLoop:
.a45f	ad 10 04	lda $0410			lda 	NSMantissa1 				; access character
.a462	85 37		sta $37				sta 	zTemp0+1
.a464	ad 08 04	lda $0408			lda 	NSMantissa0
.a467	85 36		sta $36				sta 	zTemp0
.a469	b1 36		lda ($36),y			lda 	(zTemp0),y
.a46b	f0 13		beq $a480			beq 	_IRDExit
.a46d	5a		phy				phy									; save string pos
.a46e	48		pha				pha 								; save char
.a46f	ad 33 06	lda $0633			lda 	gxDrawScale 				; get scale
.a472	0a		asl a				asl 	a
.a473	0a		asl a				asl 	a
.a474	0a		asl a				asl 	a
.a475	a8		tay				tay
.a476	a9 0a		lda #$0a			lda 	#GCMD_DrawFont 				; char drawing
.a478	fa		plx				plx 								; char to draw
.a479	20 e5 a9	jsr $a9e5			jsr 	GXGraphicDraw
.a47c	7a		ply				ply 								; restore string pos
.a47d	c8		iny				iny
.a47e	90 df		bcc $a45f			bcc 	_IRDLoop 					; go back if no error.
.a480					_IRDExit:
.a480	60		rts				rts
.a481					PlotCommand:
.a481	a9 50		lda #$50			lda 	#GCMD_Plot 					; command ID to use
.a483	20 99 a4	jsr $a499			jsr 	RunGraphicsCommand
.a486	80 05		bra $a48d			bra 	ExecuteGraphicCommand
.a488					LineCommand:
.a488	a9 42		lda #$42			lda 	#GCMD_Line 						; command ID to use
.a48a	20 99 a4	jsr $a499			jsr 	RunGraphicsCommand
.a48d					ExecuteGraphicCommand:
.a48d	0d 2c 06	ora $062c			ora 	gxCommandID 				; make a full command
.a490	20 e5 a9	jsr $a9e5			jsr 	GXGraphicDraw 				; draw it and exit
.a493	b0 01		bcs $a496			bcs 	_EGCError
.a495	60		rts				rts
.a496					_EGCError:
.a496	4c 82 9f	jmp $9f82			jmp 	SyntaxError
.a499					RunGraphicsCommand:
.a499	8d 2c 06	sta $062c			sta 	gxCommandID					; save TODO graphics command.
.a49c	68		pla				pla 								; pop handler address
.a49d	fa		plx				plx
.a49e	1a		inc a				inc 	a
.a49f	d0 01		bne $a4a2			bne 	_RGINoCarry
.a4a1	e8		inx				inx
.a4a2					_RGINoCarry:
.a4a2	8d 31 06	sta $0631			sta 	GXHandler
.a4a5	8e 32 06	stx $0632			stx 	GXHandler+1
.a4a8					_RGICommandLoop:
.a4a8	b1 30		lda ($30),y			lda 	(codePtr),y
.a4aa	c8		iny				iny
.a4ab	c9 cb		cmp #$cb			cmp 	#KWD_TO						; is it TO x,y
.a4ad	f0 53		beq $a502			beq 	_RGI_To
.a4af	c9 b9		cmp #$b9			cmp 	#KWD_HERE 					; do it here.
.a4b1	f0 55		beq $a508			beq 	_RGI_Here
.a4b3	c9 80		cmp #$80			cmp 	#KWC_EOL 					; EOL or : , exit
.a4b5	f0 3d		beq $a4f4			beq 	_RGI_Exit
.a4b7	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.a4b9	f0 39		beq $a4f4			beq 	_RGI_Exit
.a4bb	c9 c0		cmp #$c0			cmp 	#KWD_OUTLINE 				; solid or outline
.a4bd	f0 3e		beq $a4fd			beq 	_RGI_Frame
.a4bf	c9 c8		cmp #$c8			cmp 	#KWD_SOLID
.a4c1	f0 33		beq $a4f6			beq 	_RGI_Solid
.a4c3	c9 aa		cmp #$aa			cmp 	#KWD_BY 					; by offset
.a4c5	f0 4b		beq $a512			beq 	_RGI_By
.a4c7	c9 b5		cmp #$b5			cmp 	#KWD_FROM 					; from
.a4c9	f0 17		beq $a4e2			beq 	_RGI_Move2
.a4cb	c9 b2		cmp #$b2			cmp 	#KWD_DIM 					; dim (set scale)
.a4cd	f0 65		beq $a534			beq 	_RGI_Dim
.a4cf	c9 b0		cmp #$b0			cmp 	#KWD_COLOUR 				; colour or Color
.a4d1	f0 78		beq $a54b			beq 	_RGI_Colour
.a4d3	c9 af		cmp #$af			cmp 	#KWD_COLOR
.a4d5	f0 74		beq $a54b			beq 	_RGI_Colour
.a4d7	ae 2c 06	ldx $062c			ldx 	gxCommandID
.a4da	e0 52		cpx #$52			cpx 	#GCMD_SpriteMove 			; if not sprite
.a4dc	d0 03		bne $a4e1			bne 	_RGI_Move 					; move
.a4de	4c 75 a5	jmp $a575			jmp		_RGI_SpriteInstructions
.a4e1					_RGI_Move:
.a4e1	88		dey				dey 								; unpick get.
.a4e2					_RGI_Move2:
.a4e2	20 9b a5	jsr $a59b			jsr 	GCGetCoordinatePair 		; move to here
.a4e5	20 c2 a5	jsr $a5c2			jsr 	GCCopyPairToStore 			; save
.a4e8	5a		phy				phy
.a4e9	20 b8 a5	jsr $a5b8			jsr 	GCLoadAXY 					; load in
.a4ec	09 40		ora #$40			ora 	#GCMD_Move 					; move there
.a4ee	20 e5 a9	jsr $a9e5			jsr 	GXGraphicDraw
.a4f1	7a		ply				ply
.a4f2	80 b4		bra $a4a8			bra 	_RGICommandLoop 			; and go round
.a4f4					_RGI_Exit:
.a4f4	88		dey				dey 								; unpick : / EOL
.a4f5	60		rts				rts
.a4f6					_RGI_Solid:
.a4f6	a9 02		lda #$02			lda 	#2
.a4f8	8d 2d 06	sta $062d			sta 	gxFillSolid
.a4fb	80 ab		bra $a4a8			bra 	_RGICommandLoop
.a4fd					_RGI_Frame:
.a4fd	9c 2d 06	stz $062d			stz 	gxFillSolid
.a500	80 a6		bra $a4a8			bra 	_RGICommandLoop
.a502					_RGI_To:
.a502	20 9b a5	jsr $a59b			jsr 	GCGetCoordinatePair 		; get coordinate pair into slot #1,#2
.a505	20 c2 a5	jsr $a5c2			jsr 	GCCopyPairToStore
.a508					_RGI_Here:
.a508	5a		phy				phy
.a509	20 b8 a5	jsr $a5b8			jsr 	GCLoadAXY 					; load it into AXY
.a50c	20 72 a5	jsr $a572			jsr 	_RGICallHandler 			; go do whatever it is.
.a50f	7a		ply				ply
.a510	80 96		bra $a4a8			bra 	_RGICommandLoop 			; and go round
.a512					_RGI_By:
.a512	20 a8 a5	jsr $a5a8			jsr 	GCSignedCoordinatePair 		; get coordinate pair into slot #1,#2
.a515	18		clc				clc
.a516	ad 09 04	lda $0409			lda 	NSMantissa0+1 				; copy it into space.
.a519	6d 2e 06	adc $062e			adc 	gxxPos
.a51c	8d 2e 06	sta $062e			sta 	gxXPos
.a51f	ad 11 04	lda $0411			lda 	NSMantissa1+1
.a522	6d 2f 06	adc $062f			adc 	gxxPos+1
.a525	8d 2f 06	sta $062f			sta 	gxXPos+1
.a528	ad 0a 04	lda $040a			lda 	NSMantissa0+2
.a52b	18		clc				clc
.a52c	6d 30 06	adc $0630			adc 	gxYPos
.a52f	8d 30 06	sta $0630			sta 	gxYPos
.a532	80 d4		bra $a508			bra 	_RGI_Here
.a534					_RGI_Dim:
.a534	a2 01		ldx #$01			ldx	 	#1
.a536	20 79 9d	jsr $9d79			jsr 	Evaluate8BitInteger
.a539	ad 09 04	lda $0409			lda 	NSMantissa0+1
.a53c	c9 00		cmp #$00			cmp 	#0
.a53e	f0 2f		beq $a56f			beq 	_RGIRange
.a540	c9 09		cmp #$09			cmp 	#8+1
.a542	b0 2b		bcs $a56f			bcs		_RGIRange
.a544	3a		dec a				dec 	a
.a545	8d 33 06	sta $0633			sta 	gxDrawScale
.a548	4c a8 a4	jmp $a4a8			jmp 	_RGICommandLoop
.a54b					_RGI_Colour:
.a54b	a2 01		ldx #$01			ldx 	#1 							; colour
.a54d	20 79 9d	jsr $9d79			jsr 	Evaluate8BitInteger
.a550	a2 02		ldx #$02			ldx 	#2 							; default zero for 2nd parameter
.a552	20 f8 9d	jsr $9df8			jsr 	NSMSetZero
.a555	b1 30		lda ($30),y			lda 	(codePtr),y
.a557	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; check , => mode.
.a559	d0 04		bne $a55f			bne 	_RGICDefaultMode
.a55b	c8		iny				iny
.a55c	20 79 9d	jsr $9d79			jsr 	Evaluate8BitInteger
.a55f					_RGICDefaultMode:
.a55f	5a		phy				phy
.a560	a9 08		lda #$08			lda 	#GCMD_Colour 				; set colour.
.a562	ae 09 04	ldx $0409			ldx 	NSMantissa0+1
.a565	ac 0a 04	ldy $040a			ldy 	NSMantissa0+2
.a568	20 e5 a9	jsr $a9e5			jsr 	GXGraphicDraw
.a56b	7a		ply				ply
.a56c	4c a8 a4	jmp $a4a8			jmp 	_RGICommandLoop 			; and go round
.a56f					_RGIRange:
.a56f	4c 87 9f	jmp $9f87			jmp 	RangeError
.a572					_RGICallHandler:
.a572	6c 31 06	jmp ($0631)			jmp 	(GXHandler)
.a575					_RGI_SpriteInstructions:
.a575	c9 be		cmp #$be			cmp 	#KWD_OFF
.a577	f0 07		beq $a580			beq 	_RGISpriteOff
.a579	c9 ba		cmp #$ba			cmp 	#KWD_IMAGE
.a57b	f0 13		beq $a590			beq 	_RGISetImage
.a57d	4c e1 a4	jmp $a4e1			jmp 	_RGI_Move
.a580					_RGISpriteOff:
.a580	5a		phy				phy
.a581	a0 01		ldy #$01			ldy 	#1
.a583	a2 00		ldx #$00			ldx 	#0
.a585					_RGIDoCommandLoop:
.a585	a9 10		lda #$10			lda 	#GCMD_SpriteImage
.a587	20 e5 a9	jsr $a9e5			jsr 	GXGraphicDraw
.a58a	7a		ply				ply
.a58b	b0 e2		bcs $a56f			bcs 	_RGIRange
.a58d	4c a8 a4	jmp $a4a8			jmp 	_RGICommandLoop
.a590					_RGISetImage:
.a590	a2 01		ldx #$01			ldx 	#1
.a592	20 79 9d	jsr $9d79			jsr 	Evaluate8BitInteger
.a595	5a		phy				phy
.a596	aa		tax				tax
.a597	a0 00		ldy #$00			ldy 	#0
.a599	80 ea		bra $a585			bra 	_RGIDoCommandLoop
.a59b					GCGetCoordinatePair:
.a59b	a2 01		ldx #$01			ldx 	#1
.a59d	20 59 9d	jsr $9d59			jsr 	Evaluate16BitInteger
.a5a0	20 24 8d	jsr $8d24			jsr 	CheckComma
.a5a3	e8		inx				inx
.a5a4	20 59 9d	jsr $9d59			jsr 	Evaluate16BitInteger
.a5a7	60		rts				rts
.a5a8					GCSignedCoordinatePair:
.a5a8	a2 01		ldx #$01			ldx 	#1
.a5aa	20 65 9d	jsr $9d65			jsr 	Evaluate16BitIntegerSigned
.a5ad	20 24 8d	jsr $8d24			jsr 	CheckComma
.a5b0	e8		inx				inx
.a5b1	20 65 9d	jsr $9d65			jsr 	Evaluate16BitIntegerSigned
.a5b4	60		rts				rts
.a5b5					_GCCPRange:
.a5b5	4c 87 9f	jmp $9f87			jmp 	RangeError
.a5b8					GCLoadAXY:
.a5b8	ad 2f 06	lda $062f			lda 	gxXPos+1
.a5bb	ae 2e 06	ldx $062e			ldx 	gxXPos
.a5be	ac 30 06	ldy $0630			ldy 	gxYPos
.a5c1	60		rts				rts
.a5c2					GCCopyPairToStore:
.a5c2	ad 09 04	lda $0409			lda 	NSMantissa0+1 				; copy it into space.
.a5c5	8d 2e 06	sta $062e			sta 	gxXPos
.a5c8	ad 11 04	lda $0411			lda 	NSMantissa1+1
.a5cb	8d 2f 06	sta $062f			sta 	gxXPos+1
.a5ce	ad 0a 04	lda $040a			lda 	NSMantissa0+2
.a5d1	8d 30 06	sta $0630			sta 	gxYPos
.a5d4	60		rts				rts
.062c					gxCommandID:
>062c							.fill 	1
.062d					gxFillSolid:
>062d							.fill 	1
.062e					gxXPos:
>062e							.fill 	2
.0630					gxYPos:
>0630							.fill 	1
.0631					gxHandler:
>0631							.fill 	2
.0633					gxDrawScale:
>0633							.fill 	1
.a5d5					BitmapCtrl:
.a5d5	b1 30		lda ($30),y			lda 	(codePtr),y
.a5d7	c8		iny				iny
.a5d8	a2 01		ldx #$01			ldx 	#1
.a5da	c9 bf		cmp #$bf			cmp 	#KWD_ON
.a5dc	f0 11		beq $a5ef			beq 	BitmapSwitch
.a5de	ca		dex				dex
.a5df	c9 be		cmp #$be			cmp 	#KWD_OFF
.a5e1	f0 0c		beq $a5ef			beq 	BitmapSwitch
.a5e3	20 79 9d	jsr $9d79			jsr 	Evaluate8BitInteger 		; get the colour
.a5e6	5a		phy				phy
.a5e7	aa		tax				tax
.a5e8	a9 06		lda #$06			lda 	#GCMD_Clear					; clear to that colour
.a5ea	20 e5 a9	jsr $a9e5			jsr 	GXGraphicDraw
.a5ed	7a		ply				ply
.a5ee	60		rts				rts
.a5ef					BitmapSwitch:
.a5ef	5a		phy				phy
.a5f0	a0 00		ldy #$00			ldy 	#0 							; gfx 1,on/off,0
.a5f2	a9 02		lda #$02			lda 	#GCMD_BitmapCtl
.a5f4	20 e5 a9	jsr $a9e5			jsr 	GXGraphicDraw
.a5f7	a9 08		lda #$08			lda 	#GCMD_Colour				; set colour to $FF
.a5f9	a0 00		ldy #$00			ldy 	#0
.a5fb	a2 ff		ldx #$ff			ldx 	#$FF
.a5fd	20 e5 a9	jsr $a9e5			jsr 	GXGraphicDraw
.a600	9c 2d 06	stz $062d			stz 	gxFillSolid
.a603	9c 2e 06	stz $062e			stz 	gxXPos
.a606	9c 2f 06	stz $062f			stz 	gxXPos+1
.a609	9c 30 06	stz $0630			stz 	gxYPos
.a60c	9c 33 06	stz $0633			stz 	gxDrawScale
.a60f	a9 40		lda #$40			lda 	#GCMD_Move 						; home cursor
.a611	a2 00		ldx #$00			ldx 	#0
.a613	a0 00		ldy #$00			ldy 	#0
.a615	20 e5 a9	jsr $a9e5			jsr 	GXGraphicDraw
.a618	7a		ply				ply
.a619	60		rts				rts
.a61a					SpritesCtrl:
.a61a	b1 30		lda ($30),y			lda 	(codePtr),y
.a61c	c8		iny				iny
.a61d	a2 01		ldx #$01			ldx 	#1
.a61f	c9 bf		cmp #$bf			cmp 	#KWD_ON
.a621	f0 08		beq $a62b			beq 	SpriteSwitch
.a623	ca		dex				dex
.a624	c9 be		cmp #$be			cmp 	#KWD_OFF
.a626	f0 03		beq $a62b			beq 	SpriteSwitch
.a628	4c 82 9f	jmp $9f82			jmp 	SyntaxError
.a62b					SpriteSwitch:
.a62b	5a		phy				phy
.a62c	a0 00		ldy #$00			ldy 	#0 							; gfx 2,on/off,0
.a62e	a9 04		lda #$04			lda 	#GCMD_SpriteCtl
.a630	20 e5 a9	jsr $a9e5			jsr 	GXGraphicDraw
.a633	7a		ply				ply
.a634	60		rts				rts
.a635					GfxCommand:
.a635	a2 00		ldx #$00			ldx 	#0
.a637	20 79 9d	jsr $9d79			jsr 	Evaluate8BitInteger 		; command
.a63a	20 24 8d	jsr $8d24			jsr 	CheckComma
.a63d	e8		inx				inx
.a63e	20 59 9d	jsr $9d59			jsr 	Evaluate16BitInteger 		; X
.a641	20 24 8d	jsr $8d24			jsr 	CheckComma
.a644	e8		inx				inx
.a645	20 79 9d	jsr $9d79			jsr 	Evaluate8BitInteger 		; Y
.a648	ad 11 04	lda $0411			lda 	NSMantissa1+1  				; shift bit 0 of X into CS, should now be zero
.a64b	4a		lsr a				lsr 	a
.a64c	d0 16		bne $a664			bne 	_GfxError
.a64e	2e 08 04	rol $0408			rol 	NSMantissa0 				; rotate into command
.a651	b0 11		bcs $a664			bcs 	_GfxError 					; bit 7 should have been zero
.a653	5a		phy				phy 								; save pos
.a654	ad 08 04	lda $0408			lda 	NSMantissa0 				; do the command
.a657	ae 09 04	ldx $0409			ldx 	NSMantissa0+1
.a65a	ac 0a 04	ldy $040a			ldy 	NSMantissa0+2
.a65d	20 e5 a9	jsr $a9e5			jsr 	GXGraphicDraw
.a660	b0 02		bcs $a664			bcs 	_GfxError
.a662	7a		ply				ply 								; restore pos and exit.
.a663	60		rts				rts
.a664					_GfxError:
.a664	4c 87 9f	jmp $9f87			jmp 	RangeError
.a667					UnaryHit:
.a667	fa		plx				plx
.a668	a9 36		lda #$36			lda 	#zTemp0
.a66a	20 79 9d	jsr $9d79			jsr 	Evaluate8BitInteger 		; get sprite number 0
.a66d	20 24 8d	jsr $8d24			jsr 	CheckComma
.a670	e8		inx				inx
.a671	20 79 9d	jsr $9d79			jsr 	Evaluate8BitInteger 		; get sprite number 1
.a674	20 1c 8d	jsr $8d1c			jsr		CheckRightBracket
.a677	ca		dex				dex 								; fix back up again.
.a678	da		phx				phx 								; save X/Y
.a679	5a		phy				phy
.a67a	bc 09 04	ldy $0409,x			ldy 	NSMantissa0+1,x 			; get the sprite numbers into X/Y
.a67d	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.a680	aa		tax				tax
.a681	a9 12		lda #$12			lda 	#GCMD_SpriteCollide 		; command check collision.
.a683	20 e5 a9	jsr $a9e5			jsr 	GXGraphicDraw 				; calculate result
.a686	1a		inc a				inc 	a 							; so 255 (fail) -> 0, otherwise 1,2,3,4 pixels etc.
.a687	7a		ply				ply 								; restore XY
.a688	fa		plx				plx
.a689	20 fa 9d	jsr $9dfa			jsr 	NSMSetByte 					; return the hit result
.a68c	60		rts				rts
.a68d					UnaryJoyX:
.a68d	18		clc				clc
.a68e	80 01		bra $a691			bra 	JoyMain
.a690					UnaryJoyY:
.a690	38		sec				sec
.a691					JoyMain:
.a691	fa		plx				plx 								; get pos
.a692	08		php				php 								; save carry (set for Y)
.a693	20 79 9d	jsr $9d79			jsr 	Evaluate8BitInteger 		; ignore the parameter
.a696	20 1c 8d	jsr $8d1c			jsr 	CheckRightBracket
.a699	20 be a8	jsr $a8be			jsr 	EXTReadController 			; read the controller.
.a69c	28		plp				plp
.a69d	90 02		bcc $a6a1			bcc 	_JMNoShift 					; if Y then shift bits 3,2 -> 1,0
.a69f	4a		lsr a				lsr 	a
.a6a0	4a		lsr a				lsr 	a
.a6a1					_JMNoShift:
.a6a1	4a		lsr a				lsr 	a 							; if bit 0 set then right/down e.g. +1
.a6a2	b0 0a		bcs $a6ae			bcs 	_JMIsRight
.a6a4	4a		lsr a				lsr 	a 							; if bit 1 set then left/up e.g. -1
.a6a5	b0 04		bcs $a6ab			bcs 	_JMIsLeft
.a6a7	20 f8 9d	jsr $9df8			jsr 	NSMSetZero 					; zero result
.a6aa	60		rts				rts
.a6ab					_JMIsLeft:
.a6ab	4c a2 8d	jmp $8da2			jmp 	ReturnTrue
.a6ae					_JMIsRight:
.a6ae	a9 01		lda #$01			lda 	#1
.a6b0	20 fa 9d	jsr $9dfa			jsr 	NSMSetByte
.a6b3	60		rts				rts
.a6b4					UnaryJoyB:
.a6b4	fa		plx				plx 								; get pos
.a6b5	20 79 9d	jsr $9d79			jsr 	Evaluate8BitInteger 		; ignore the parameter
.a6b8	20 1c 8d	jsr $8d1c			jsr 	CheckRightBracket
.a6bb	20 be a8	jsr $a8be			jsr 	EXTReadController 			; read the controller.
.a6be	4a		lsr a				lsr 	a
.a6bf	4a		lsr a				lsr 	a
.a6c0	4a		lsr a				lsr 	a
.a6c1	4a		lsr a				lsr 	a
.a6c2	29 01		and #$01			and 	#1
.a6c4	20 fa 9d	jsr $9dfa			jsr 	NSMSetByte
.a6c7	60		rts				rts
.a6c8					PaletteCommand:
.a6c8	a2 00		ldx #$00			ldx 	#0
.a6ca	20 79 9d	jsr $9d79			jsr 	Evaluate8BitInteger 		; colour
.a6cd	20 24 8d	jsr $8d24			jsr 	CheckComma
.a6d0	e8		inx				inx
.a6d1	20 59 9d	jsr $9d59			jsr 	Evaluate16BitInteger 		; r
.a6d4	20 24 8d	jsr $8d24			jsr 	CheckComma
.a6d7	e8		inx				inx
.a6d8	20 79 9d	jsr $9d79			jsr 	Evaluate8BitInteger 		; g
.a6db	20 24 8d	jsr $8d24			jsr 	CheckComma
.a6de	e8		inx				inx
.a6df	20 79 9d	jsr $9d79			jsr 	Evaluate8BitInteger 		; b
.a6e2	ad 08 04	lda $0408			lda 	NSMantissa0 				; get colour #
.a6e5	85 36		sta $36				sta 	zTemp0
.a6e7	a9 34		lda #$34			lda 	#$D0 >> 2 					; MSB = D0/4
.a6e9	85 37		sta $37				sta 	zTemp0+1
.a6eb	06 36		asl $36				asl 	zTemp0 						; zTemp = $D000+Colour x 4
.a6ed	26 37		rol $37				rol	 	zTemp0+1
.a6ef	06 36		asl $36				asl 	zTemp0
.a6f1	26 37		rol $37				rol	 	zTemp0+1
.a6f3	a9 01		lda #$01			lda 	#1 							; I/O Page 2
.a6f5	85 01		sta $01				sta 	1
.a6f7	5a		phy				phy
.a6f8	ad 0b 04	lda $040b			lda 	NSMantissa0+3 				; fix to r,g,b
.a6fb	92 36		sta ($36)			sta 	(zTemp0)
.a6fd	a0 01		ldy #$01			ldy 	#1
.a6ff	ad 0a 04	lda $040a			lda 	NSMantissa0+2
.a702	91 36		sta ($36),y			sta 	(zTemp0),y
.a704	ad 09 04	lda $0409			lda 	NSMantissa0+1
.a707	c8		iny				iny
.a708	91 36		sta ($36),y			sta 	(zTemp0),y
.a70a	7a		ply				ply
.a70b	60		rts				rts
.a70c					UnaryTimer:
.a70c	fa		plx				plx
.a70d	20 1c 8d	jsr $8d1c			jsr 	CheckRightBracket
.a710					TimerToStackX:
.a710	20 f8 9d	jsr $9df8			jsr 	NSMSetZero 					; zero result
.a713	64 01		stz $01				stz 	1 							; access I/O
.a715	ad 59 d6	lda $d659			lda 	$D659 						; copy timer in
.a718	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a71b	ad 5a d6	lda $d65a			lda 	$D65A
.a71e	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a721	ad 5b d6	lda $d65b			lda 	$D65B
.a724	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.a727	60		rts				rts
.a728					EXTPrintCharacter:
.a728	48		pha				pha
.a729	da		phx				phx
.a72a	5a		phy				phy
.a72b	a6 01		ldx $01				ldx 	1
.a72d	da		phx				phx
.a72e	ac 35 06	ldy $0635			ldy 	EXTColumn 					; Y = Row, e.g. points to character.
.a731	09 00		ora #$00			ora 	#$00 						; check $80-$FF
.a733	30 48		bmi $a77d			bmi 	_EXPCColour
.a735	c9 20		cmp #$20			cmp 	#$20 						; check $00-$1F
.a737	90 44		bcc $a77d			bcc 	_EXPCControl
.a739	a2 02		ldx #$02			ldx 	#2 							; select char memory
.a73b	86 01		stx $01				stx 	1
.a73d	91 40		sta ($40),y			sta 	(EXTAddress),y
.a73f	e6 01		inc $01				inc 	1 							; select colour memory
.a741	ad 36 06	lda $0636			lda 	EXTTextColour
.a744	91 40		sta ($40),y			sta 	(EXTAddress),y
.a746	c8		iny				iny 								; advance horizontal position
.a747	8c 35 06	sty $0635			sty 	EXTColumn
.a74a	cc 37 06	cpy $0637			cpy 	EXTScreenWidth 				; reached RHS ?
.a74d	90 5d		bcc $a7ac			bcc 	_EXPCExit 					; no, then exit.
.a74f					_EXPCCRLF:
.a74f	ee 34 06	inc $0634			inc 	EXTRow  					; bump row
.a752	9c 35 06	stz $0635			stz 	EXTColumn 					; back to column 0
.a755	ad 34 06	lda $0634			lda 	EXTRow 						; check if reached the bottom ?
.a758	cd 38 06	cmp $0638			cmp 	EXTScreenHeight 			; if so, then scroll.
.a75b	f0 18		beq $a775			beq 	_EXPCScroll
.a75d	18		clc				clc 								; add width to address.
.a75e	a5 40		lda $40				lda 	EXTAddress
.a760	6d 37 06	adc $0637			adc 	EXTScreenWidth
.a763	85 40		sta $40				sta 	EXTAddress
.a765	90 45		bcc $a7ac			bcc 	_EXPCExit
.a767	e6 41		inc $41				inc 	EXTAddress+1
.a769	80 41		bra $a7ac			bra 	_EXPCExit
.a76b					_EXPCLeft:
.a76b	ce 35 06	dec $0635			dec 	EXTColumn
.a76e	10 3c		bpl $a7ac			bpl 	_EXPCExit
.a770					_EXPCBegin:
.a770	9c 35 06	stz $0635			stz 	EXTColumn
.a773	80 37		bra $a7ac			bra 	_EXPCExit
.a775					_EXPCScroll:
.a775	ce 34 06	dec $0634			dec 	EXTRow 						; the height-1 th line.
.a778	20 19 a8	jsr $a819			jsr 	EXTScreenScroll 			; scroll the screen
.a77b	80 2f		bra $a7ac			bra 	_EXPCExit
.a77d					_EXPCColour:
.a77d					_EXPCControl:
.a77d	c9 11		cmp #$11			cmp 	#$11 						; only handle 00-10.
.a77f	b0 2b		bcs $a7ac			bcs 	_EXPCExit
.a781	0a		asl a				asl 	a 							; double into X
.a782	aa		tax				tax
.a783	7c f7 a7	jmp ($a7f7,x)			jmp 	(_EXPCActionTable,x) 		; and execute code.
.a786					_EXPCUp:
.a786	ad 34 06	lda $0634			lda 	EXTRow 						; already at top ?
.a789	f0 21		beq $a7ac			beq 	_EXPCExit
.a78b	ce 34 06	dec $0634			dec 	EXTRow 						; up one in position/address
.a78e	38		sec				sec
.a78f	a5 40		lda $40				lda 	EXTAddress
.a791	ed 37 06	sbc $0637			sbc 	EXTScreenWidth
.a794	85 40		sta $40				sta 	EXTAddress
.a796	b0 14		bcs $a7ac			bcs 	_EXPCExit
.a798	c6 41		dec $41				dec 	EXTAddress+1
.a79a	80 10		bra $a7ac			bra 	_EXPCExit
.a79c					_EXPCRight:
.a79c	c8		iny				iny
.a79d	8c 35 06	sty $0635			sty 	EXTColumn
.a7a0	cc 37 06	cpy $0637			cpy 	EXTScreenWidth
.a7a3	d0 07		bne $a7ac			bne 	_EXPCExit
.a7a5					_EXPCEnd:
.a7a5	ad 37 06	lda $0637			lda 	EXTScreenWidth
.a7a8	3a		dec a				dec 	a
.a7a9	8d 35 06	sta $0635			sta 	EXTColumn
.a7ac					_EXPCExit:
.a7ac	20 6e a8	jsr $a86e			jsr 	EXTSetHardwareCursor 		; place the physical cursor.
.a7af	68		pla				pla
.a7b0	85 01		sta $01				sta 	1
.a7b2	7a		ply				ply
.a7b3	fa		plx				plx
.a7b4	68		pla				pla
.a7b5	60		rts				rts
.a7b6					_EXPCClearScreen:
.a7b6	20 2b a8	jsr $a82b			jsr		EXTClearScreenCode
.a7b9	80 f1		bra $a7ac			bra 	_EXPCExit
.a7bb					_EXPCDown:
.a7bb	ad 38 06	lda $0638			lda 	EXTScreenHeight 			; at the bottom
.a7be	3a		dec a				dec 	a
.a7bf	cd 34 06	cmp $0634			cmp 	EXTRow
.a7c2	f0 e8		beq $a7ac			beq 	_EXPCExit
.a7c4	ee 34 06	inc $0634			inc 	EXTRow 						; down one in position/address
.a7c7	18		clc				clc
.a7c8	a5 40		lda $40				lda 	EXTAddress
.a7ca	6d 37 06	adc $0637			adc 	EXTScreenWidth
.a7cd	85 40		sta $40				sta 	EXTAddress
.a7cf	90 db		bcc $a7ac			bcc 	_EXPCExit
.a7d1	e6 41		inc $41				inc 	EXTAddress+1
.a7d3	80 d7		bra $a7ac			bra 	_EXPCExit
.a7d5					_EXPCTab:
.a7d5	ad 35 06	lda $0635			lda 	EXTColumn 					; next tab stop
.a7d8	29 f8		and #$f8			and 	#$F8
.a7da	18		clc				clc
.a7db	69 08		adc #$08			adc 	#8
.a7dd	8d 35 06	sta $0635			sta 	EXTColumn
.a7e0	cd 37 06	cmp $0637			cmp 	EXTScreenWidth 				; too far, stick end of line.
.a7e3	90 c7		bcc $a7ac			bcc 	_EXPCExit
.a7e5	80 be		bra $a7a5			bra 	_EXPCEnd
.a7e7					_EXPCBackSpace:
.a7e7	88		dey				dey
.a7e8	30 c2		bmi $a7ac			bmi 	_EXPCExit
.a7ea	ce 35 06	dec $0635			dec 	EXTColumn
.a7ed	a9 02		lda #$02			lda 	#2
.a7ef	85 01		sta $01				sta 	1
.a7f1	a9 20		lda #$20			lda 	#32
.a7f3	91 40		sta ($40),y			sta 	(EXTAddress),y
.a7f5	80 b5		bra $a7ac			bra 	_EXPCExit
.a7f7					_EXPCActionTable:
>a7f7	ac a7						.word 	_EXPCExit 					; 00
>a7f9	70 a7						.word 	_EXPCBegin 					; 01 A Start of Line
>a7fb	6b a7						.word 	_EXPCLeft 					; 02 B Left
>a7fd	ac a7						.word 	_EXPCExit 					; 03 <Break>
>a7ff	ac a7						.word 	_EXPCExit 					; 04
>a801	a5 a7						.word 	_EXPCEnd 					; 05 E End of Line
>a803	9c a7						.word 	_EXPCRight 					; 06 F Right
>a805	ac a7						.word 	_EXPCExit 					; 07
>a807	e7 a7						.word 	_EXPCBackspace 				; 08 H Backspace
>a809	d5 a7						.word 	_EXPCTab 					; 09 I Tab
>a80b	ac a7						.word 	_EXPCExit 					; 0A
>a80d	ac a7						.word 	_EXPCExit 					; 0B
>a80f	b6 a7						.word 	_EXPCClearScreen			; 0C L CLS
>a811	4f a7						.word 	_EXPCCRLF 					; 0D M CR/LF
>a813	bb a7						.word 	_EXPCDown 					; 0E N Down
>a815	ac a7						.word 	_EXPCExit 					; 0F
>a817	86 a7						.word 	_EXPCUp 					; 10 P Up
.a819					EXTScreenScroll:
.a819	a9 02		lda #$02			lda 	#2 							; select text page
.a81b	85 01		sta $01				sta 	1
.a81d	a9 20		lda #$20			lda		#32 						; fill with space
.a81f	20 a0 a9	jsr $a9a0			jsr 	EXTScrollFill
.a822	e6 01		inc $01				inc 	1 							; select colour page
.a824	ad 36 06	lda $0636			lda 	EXTTextColour
.a827	20 a0 a9	jsr $a9a0			jsr 	EXTScrollFill
.a82a	60		rts				rts
.a82b					EXTClearScreenCode:
.a82b	a9 02		lda #$02			lda 	#2 							; select text page
.a82d	85 01		sta $01				sta 	1
.a82f	a9 20		lda #$20			lda		#32 						; fill with space
.a831	20 3e a8	jsr $a83e			jsr 	_EXTCSFill
.a834	e6 01		inc $01				inc 	1 							; select colour page
.a836	ad 36 06	lda $0636			lda 	EXTTextColour
.a839	20 3e a8	jsr $a83e			jsr 	_EXTCSFill
.a83c	80 22		bra $a860			bra 	EXTHomeCursor
.a83e					_EXTCSFill:
.a83e	aa		tax				tax
.a83f	a9 00		lda #$00			lda 	#EXTMemory & $FF
.a841	85 40		sta $40				sta 	EXTAddress
.a843	a9 c0		lda #$c0			lda 	#EXTMemory >> 8
.a845	85 41		sta $41				sta 	EXTAddress+1
.a847					_EXTCSFill1:
.a847	a0 00		ldy #$00			ldy 	#0
.a849	8a		txa				txa
.a84a					_EXTCSFill2:
.a84a	91 40		sta ($40),y			sta 	(EXTAddress),y
.a84c	c8		iny				iny
.a84d	d0 fb		bne $a84a			bne 	_EXTCSFill2
.a84f	e6 41		inc $41				inc 	EXTAddress+1
.a851	a5 41		lda $41				lda 	EXTAddress+1
.a853	c9 d2		cmp #$d2			cmp 	#$D2
.a855	d0 f0		bne $a847			bne 	_EXTCSFill1
.a857	8a		txa				txa
.a858					_EXTCSFill3:
.a858	91 40		sta ($40),y			sta 	(EXTAddress),y
.a85a	c8		iny				iny
.a85b	c0 c0		cpy #$c0			cpy 	#$C0
.a85d	d0 f9		bne $a858			bne 	_EXTCSFill3
.a85f	60		rts				rts
.a860					EXTHomeCursor:
.a860	9c 34 06	stz $0634			stz 	EXTRow 						; reset row & column
.a863	9c 35 06	stz $0635			stz 	EXTColumn
.a866	a9 00		lda #$00			lda 	#EXTMemory & $FF 			; set address
.a868	85 40		sta $40				sta 	EXTAddress
.a86a	a9 c0		lda #$c0			lda 	#EXTMemory >> 8
.a86c	85 41		sta $41				sta 	EXTAddress+1
.a86e					EXTSetHardwareCursor:
.a86e	64 01		stz $01				stz 	1 							; I/O Page zero
.a870	a9 05		lda #$05			lda 	#1+4 						; enable cursor
.a872	8d 10 d0	sta $d010			sta 	$D010
.a875	a9 b1		lda #$b1			lda 	#$B1
.a877	8d 12 d0	sta $d012			sta 	$D012
.a87a	ad 35 06	lda $0635			lda 	EXTColumn
.a87d	8d 14 d0	sta $d014			sta 	$D014 						; set cursor position
.a880	9c 15 d0	stz $d015			stz 	$D015
.a883	ad 34 06	lda $0634			lda 	EXTRow
.a886	8d 16 d0	sta $d016			sta 	$D016
.a889	9c 17 d0	stz $d017			stz 	$D017
.a88c	60		rts				rts
=$c000					EXTMemory = $C000
=$02					EXTTextPage = $02
=$03					EXTColourPage = $03
=1					EXTDummySpace = 1 							; fake-space for CR character.
=0					EXTCBlack = 0
.0634					EXTRow:
>0634							.fill 	1
.0635					EXTColumn:
>0635							.fill 	1
.0636					EXTTextColour:
>0636							.fill 	1
.0637					EXTScreenWidth:
>0637							.fill 	1
.0638					EXTScreenHeight:
>0638							.fill 	1
.0040					EXTAddress:
>0040							.fill 	2
.a88d					EXTInitialise:
.a88d	64 01		stz $01				stz 	1 							; Access I/O
.a88f	9c 04 d0	stz $d004			stz 	$D004 						; Disable border
.a892	9c 08 d0	stz $d008			stz 	$D008
.a895	9c 09 d0	stz $d009			stz 	$D009
.a898	a9 09		lda #$09			lda 	#1+8						; Timer On at 70Hz counting up.
.a89a	8d 58 d6	sta $d658			sta 	$D658
.a89d	a9 76		lda #$76			lda 	#$76
.a89f	8d 36 06	sta $0636			sta 	EXTTextColour
.a8a2	a9 50		lda #$50			lda 	#80 						; set screen dimensions.
.a8a4	8d 37 06	sta $0637			sta 	EXTScreenWidth
.a8a7	a9 3c		lda #$3c			lda 	#60
.a8a9	8d 38 06	sta $0638			sta 	EXTScreenHeight
.a8ac	64 01		stz $01				stz 	1
.a8ae	60		rts				rts
.a8af					EXTInputSingleCharacter:
.a8af	da		phx				phx
.a8b0	5a		phy				phy
.a8b1					_EISCWait:
.a8b1	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.a8b4	c9 00		cmp #$00			cmp 	#0
.a8b6	f0 f9		beq $a8b1			beq 	_EISCWait
.a8b8	7a		ply				ply
.a8b9	fa		plx				plx
.a8ba	60		rts				rts
.a8bb					EXTBreakCheck:
.a8bb	4c e1 ff	jmp $ffe1			jmp		$FFE1
.a8be					EXTReadController:
.a8be	da		phx				phx
.a8bf	a2 00		ldx #$00			ldx 	#0
.a8c1	a9 05		lda #$05			lda 	#(($2D) >> 3)
.a8c3	20 e7 ff	jsr $ffe7			jsr 	$FFE7
.a8c6	29 20		and #$20			and 	#($01 << (($2D) & 7))
.a8c8	f0 04		beq $a8ce			beq 	_NoSet1
.a8ca	8a		txa				txa
.a8cb	09 01		ora #$01			ora 	#1
.a8cd	aa		tax				tax
.a8ce					_NoSet1:
.a8ce	a9 05		lda #$05			lda 	#(($2C) >> 3)
.a8d0	20 e7 ff	jsr $ffe7			jsr 	$FFE7
.a8d3	29 10		and #$10			and 	#($01 << (($2C) & 7))
.a8d5	f0 04		beq $a8db			beq 	_NoSet1
.a8d7	8a		txa				txa
.a8d8	09 02		ora #$02			ora 	#2
.a8da	aa		tax				tax
.a8db					_NoSet1:
.a8db	a9 06		lda #$06			lda 	#(($32) >> 3)
.a8dd	20 e7 ff	jsr $ffe7			jsr 	$FFE7
.a8e0	29 04		and #$04			and 	#($01 << (($32) & 7))
.a8e2	f0 04		beq $a8e8			beq 	_NoSet1
.a8e4	8a		txa				txa
.a8e5	09 04		ora #$04			ora 	#4
.a8e7	aa		tax				tax
.a8e8					_NoSet1:
.a8e8	a9 04		lda #$04			lda 	#(($25) >> 3)
.a8ea	20 e7 ff	jsr $ffe7			jsr 	$FFE7
.a8ed	29 20		and #$20			and 	#($01 << (($25) & 7))
.a8ef	f0 04		beq $a8f5			beq 	_NoSet1
.a8f1	8a		txa				txa
.a8f2	09 08		ora #$08			ora 	#8
.a8f4	aa		tax				tax
.a8f5					_NoSet1:
.a8f5	a9 04		lda #$04			lda 	#(($26) >> 3)
.a8f7	20 e7 ff	jsr $ffe7			jsr 	$FFE7
.a8fa	29 40		and #$40			and 	#($01 << (($26) & 7))
.a8fc	f0 04		beq $a902			beq 	_NoSet1
.a8fe	8a		txa				txa
.a8ff	09 10		ora #$10			ora 	#16
.a901	aa		tax				tax
.a902					_NoSet1:
.a902	8a		txa				txa
.a903	fa		plx				plx
.a904	60		rts				rts
.a905					EXTInputLine:
.a905	a5 01		lda $01				lda 	1 							; save I/O page
.a907	48		pha				pha
.a908					_EILLoop:
.a908	20 af a8	jsr $a8af			jsr 	ExtInputSingleCharacter
.a90b	c9 0d		cmp #$0d			cmp 	#13 						; scrape line if exit.
.a90d	f0 40		beq $a94f			beq 	_EILExit
.a90f	c9 08		cmp #$08			cmp 	#8 							; handle backspace
.a911	f0 1c		beq $a92f			beq 	_EILBackspace
.a913	c9 20		cmp #$20			cmp 	#' '						; < space, print it
.a915	90 12		bcc $a929			bcc 	_EILPrintLoop
.a917	c9 7f		cmp #$7f			cmp 	#$7F 						; if -ve print it
.a919	b0 0e		bcs $a929			bcs 	_EILPrintLoop
.a91b	48		pha				pha 								; save character
.a91c	a9 02		lda #$02			lda 	#2  						; insert a space
.a91e	85 01		sta $01				sta 	1
.a920	20 8e a9	jsr $a98e			jsr 	EXTILInsert 				; insert in text screen
.a923	e6 01		inc $01				inc 	1
.a925	20 8e a9	jsr $a98e			jsr 	EXTILInsert 				; insert in colour screen
.a928	68		pla				pla 								; get character back.
.a929					_EILPrintLoop:
.a929	20 28 a7	jsr $a728			jsr 	ExtPrintCharacter
.a92c	80 da		bra $a908			bra 	_EILLoop
.a92e	60		rts				rts
.a92f					_EILBackspace:
.a92f	ad 35 06	lda $0635			lda 	EXTColumn					; can we backspace ?
.a932	f0 d4		beq $a908			beq 	_EILLoop
.a934	a9 02		lda #$02			lda 	#2 							; move cursor left
.a936	20 28 a7	jsr $a728			jsr 	EXTPrintCharacter
.a939	a9 02		lda #$02			lda 	#2 							; text block
.a93b	85 01		sta $01				sta 	1
.a93d	a9 20		lda #$20			lda 	#' ' 						; backspace text.
.a93f	20 79 a9	jsr $a979			jsr 	EXTILDelete
.a942	e6 01		inc $01				inc 	1 							; colour block
.a944	ac 35 06	ldy $0635			ldy 	EXTColumn 					; get attribute of last character
.a947	88		dey				dey
.a948	b1 40		lda ($40),y			lda 	(EXTAddress),y
.a94a	20 79 a9	jsr $a979			jsr 	EXTILDelete 				; backspace attribute
.a94d	80 b9		bra $a908			bra 	_EILLoop 					; and go round.
.a94f					_EILExit:
.a94f	a9 02		lda #$02			lda 	#2 							; switch to page 2
.a951	85 01		sta $01				sta 	1
.a953	a0 00		ldy #$00			ldy 	#0 							; copy current line into buffer.
.a955					_EILScrapeLine:
.a955	b1 40		lda ($40),y			lda 	(EXTAddress),y
.a957	99 a7 05	sta $05a7,y			sta 	lineBuffer,y
.a95a	c8		iny				iny
.a95b	cc 37 06	cpy $0637			cpy 	EXTScreenWidth
.a95e	d0 f5		bne $a955			bne 	_EILScrapeLine
.a960					_EILTrimSpaces:
.a960	88		dey				dey
.a961	f0 08		beq $a96b			beq 	_EILEndTrim
.a963	b9 a7 05	lda $05a7,y			lda 	lineBuffer,y
.a966	c9 20		cmp #$20			cmp 	#' '
.a968	f0 f6		beq $a960			beq 	_EILTrimSpaces
.a96a	c8		iny				iny 								; trim after non space character.
.a96b					_EILEndTrim:
.a96b	a9 00		lda #$00			lda 	#0 							; trim here.
.a96d	99 a7 05	sta $05a7,y			sta 	lineBuffer,y
.a970	a9 0d		lda #$0d			lda 	#13 						; echo the RETURN
.a972	20 28 a7	jsr $a728			jsr 	ExtPrintCharacter
.a975	68		pla				pla 								; reset I/O page
.a976	85 01		sta $01				sta 	1
.a978	60		rts				rts
.a979					EXTILDelete:
.a979	48		pha				pha 								; save the new character
.a97a	ac 35 06	ldy $0635			ldy 	EXTColumn 					; start copying from here.
.a97d					_EXTDLoop:
.a97d	c8		iny				iny 								; copy one byte down.
.a97e	b1 40		lda ($40),y			lda 	(EXTAddress),y
.a980	88		dey				dey
.a981	91 40		sta ($40),y			sta 	(EXTAddress),y
.a983	c8		iny				iny 								; do till end of line.
.a984	cc 37 06	cpy $0637			cpy 	EXTScreenWidth
.a987	90 f4		bcc $a97d			bcc 	_EXTDLoop
.a989	88		dey				dey 	 							; write in last slot.
.a98a	68		pla				pla
.a98b	91 40		sta ($40),y			sta 	(EXTAddress),y
.a98d	60		rts				rts
.a98e					EXTILInsert:
.a98e	ac 37 06	ldy $0637			ldy 	EXTScreenWidth 				; end position
.a991					_EXTILoop:
.a991	88		dey				dey 								; back one
.a992	cc 35 06	cpy $0635			cpy 	EXTColumn 					; exit if reached insert point.
.a995	f0 08		beq $a99f			beq 	_EXTIExit
.a997	88		dey				dey 								; copy one byte up.
.a998	b1 40		lda ($40),y			lda 	(EXTAddress),y
.a99a	c8		iny				iny
.a99b	91 40		sta ($40),y			sta 	(EXTAddress),y
.a99d	80 f2		bra $a991			bra 	_EXTILoop
.a99f					_EXTIExit:
.a99f	60		rts				rts
.a9a0					EXTScrollFill:
.a9a0	aa		tax				tax									; save value to fill with
.a9a1	a5 36		lda $36				lda 	zTemp0 						; save zTemp0 (dest) zTemp1 (src)
.a9a3	48		pha				pha
.a9a4	a5 37		lda $37				lda 	zTemp0+1
.a9a6	48		pha				pha
.a9a7	a5 38		lda $38				lda 	zTemp1
.a9a9	48		pha				pha
.a9aa	a5 39		lda $39				lda 	zTemp1+1
.a9ac	48		pha				pha
.a9ad	a9 c0		lda #$c0			lda 	#$C0 						; copy from C000+length to C000
.a9af	85 37		sta $37				sta 	zTemp0+1
.a9b1	85 39		sta $39				sta 	zTemp1+1
.a9b3	64 36		stz $36				stz 	zTemp0
.a9b5	ad 37 06	lda $0637			lda 	EXTScreenWidth
.a9b8	85 38		sta $38				sta 	zTemp1
.a9ba	a0 00		ldy #$00			ldy 	#0
.a9bc					_EXSFCopy1:
.a9bc	b1 38		lda ($38),y			lda 	(zTemp1),y
.a9be	91 36		sta ($36),y			sta 	(zTemp0),y
.a9c0	c8		iny				iny
.a9c1	d0 f9		bne $a9bc			bne 	_EXSFCopy1
.a9c3	e6 37		inc $37				inc 	zTemp0+1 					; next page
.a9c5	e6 39		inc $39				inc 	zTemp1+1
.a9c7	a5 39		lda $39				lda 	zTemp1+1
.a9c9	c9 d3		cmp #$d3			cmp 	#$D3
.a9cb	d0 ef		bne $a9bc			bne 	_EXSFCopy1
.a9cd	ac 37 06	ldy $0637			ldy 	EXTScreenWidth 				; blank the bottom line.
.a9d0	8a		txa				txa
.a9d1					_EXSFFill1:
.a9d1	88		dey				dey
.a9d2	91 40		sta ($40),y			sta 	(EXTAddress),y
.a9d4	c0 00		cpy #$00			cpy 	#0
.a9d6	10 f9		bpl $a9d1			bpl 	_EXSFFill1
.a9d8	68		pla				pla
.a9d9	85 39		sta $39				sta 	zTemp1+1
.a9db	68		pla				pla
.a9dc	85 38		sta $38				sta 	zTemp1
.a9de	68		pla				pla
.a9df	85 37		sta $37				sta 	zTemp0+1
.a9e1	68		pla				pla
.a9e2	85 36		sta $36				sta 	zTemp0
.a9e4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_graphics.module

=1					graphicsIntegrated=1
=0					GCMD_Initialise = 0*2
=2					GCMD_BitmapCtl = 1*2
=4					GCMD_SpriteCtl = 2*2
=6					GCMD_Clear = 3*2
=8					GCMD_Colour = 4*2
=10					GCMD_DrawFont = 5*2
=12					GCMD_DrawSprite = 6*2
=14					GCMD_SpriteUse = 7*2
=16					GCMD_SpriteImage = 8*2
=18					GCMD_SpriteCollide = 9*2
=64					GCMD_Move = 32*2
=66					GCMD_Line = 33*2
=68					GCMD_FrameRect = 34*2
=70					GCMD_FillRect = 35*2
=72					GCMD_FrameCircle = 36*2
=74					GCMD_FillCircle = 37*2
=80					GCMD_Plot = 40*2
=82					GCMD_SpriteMove = 41*2
=42					GRFirstFreeCode = 42
.b766					GRVectorTable:
>b766	e0 ab					.word	GXInitialise             ; $00 Initialise
>b768	fa ab					.word	GXControlBitmap          ; $01 BitmapCtl
>b76a	42 ac					.word	GXControlSprite          ; $02 SpriteCtl
>b76c	92 ab					.word	GXClearBitmap            ; $03 Clear
>b76e	d1 ad					.word	GXSetColourMode          ; $04 Colour
>b770	99 af					.word	GXFontHandler            ; $05 DrawFont
>b772	e1 af					.word	GXSpriteHandler          ; $06 DrawSprite
>b774	4d b0					.word	GXSelect                 ; $07 SpriteUse
>b776	76 b0					.word	GXSelectImage            ; $08 SpriteImage
>b778	fd b1					.word	GXCollide                ; $09 SpriteCollide
>b77a	44 aa					.word	GRUndefined              ; $0a
>b77c	44 aa					.word	GRUndefined              ; $0b
>b77e	44 aa					.word	GRUndefined              ; $0c
>b780	44 aa					.word	GRUndefined              ; $0d
>b782	44 aa					.word	GRUndefined              ; $0e
>b784	44 aa					.word	GRUndefined              ; $0f
>b786	44 aa					.word	GRUndefined              ; $10
>b788	44 aa					.word	GRUndefined              ; $11
>b78a	44 aa					.word	GRUndefined              ; $12
>b78c	44 aa					.word	GRUndefined              ; $13
>b78e	44 aa					.word	GRUndefined              ; $14
>b790	44 aa					.word	GRUndefined              ; $15
>b792	44 aa					.word	GRUndefined              ; $16
>b794	44 aa					.word	GRUndefined              ; $17
>b796	44 aa					.word	GRUndefined              ; $18
>b798	44 aa					.word	GRUndefined              ; $19
>b79a	44 aa					.word	GRUndefined              ; $1a
>b79c	44 aa					.word	GRUndefined              ; $1b
>b79e	44 aa					.word	GRUndefined              ; $1c
>b7a0	44 aa					.word	GRUndefined              ; $1d
>b7a2	44 aa					.word	GRUndefined              ; $1e
>b7a4	44 aa					.word	GRUndefined              ; $1f
>b7a6	42 aa					.word	GXMove                   ; $20 Move
>b7a8	9f ac					.word	GXLine                   ; $21 Line
>b7aa	1a ae					.word	GXFrameRectangle         ; $22 FrameRect
>b7ac	17 ae					.word	GXFillRectangle          ; $23 FillRect
>b7ae	49 aa					.word	GXFrameCircle            ; $24 FrameCircle
>b7b0	45 aa					.word	GXFillCircle             ; $25 FillCircle
>b7b2	44 aa					.word	GRUndefined              ; $26
>b7b4	44 aa					.word	GRUndefined              ; $27
>b7b6	ff ad					.word	GXPlotPoint              ; $28 Plot
>b7b8	0c b1					.word	GXMoveSprite             ; $29 SpriteMove
=3					GXMappingPage = 3
=24576					GXMappingAddress = ($2000 * GXMappingPage)
=11					GXEditSlot = 8 + GXMappingPage
=$36					gxzTemp0 = zTemp0
=$38					gxzTemp1 = zTemp1
=$3a					gxzTemp2 = zTemp2
=$3c					gxzScreen = zsTemp
=$5f8					gxPixelBuffer = numberBuffer
.0639					gxCurrentX:
>0639							.fill 	2
.063b					gxCurrentY:
>063b							.fill 	2
.063d					gxLastX:
>063d							.fill 	2
.063f					gxLastY:
>063f							.fill 	2
.0641					gxX0:
>0641							.fill 	2
.0643					gxY0:
>0643							.fill 	2
.0645					gxX1:
>0645							.fill 	2
.0647					gxY1:
>0647							.fill 	2
.0649					gxSpritesOn:
>0649							.fill 	1
.064a					gxBitmapsOn:
>064a							.fill 	1
.064b					gxBasePage:
>064b							.fill 	1
.064c					gxSpritePage:
>064c							.fill 	1
.064d					gxHeight:
>064d							.fill 	1
.064e					gxMode:
>064e							.fill 	1
.064f					gxColour:
>064f							.fill 	1
.0650					gxEORValue:
>0650							.fill 	1
.0651					gxANDValue:
>0651							.fill 	1
.0652					gxOriginalLUTValue:
>0652							.fill 	1
.0653					gsOffset:
>0653							.fill 	1
.0654					GSCurrentSpriteID:
>0654							.fill 	1
.0655					GSCurrentSpriteAddr:
>0655							.fill 	2
.0657					GXSpriteOffsetBase:
>0657							.fill 	2
.0659					GXSpriteLow:
>0659							.fill 	64
.0699					GXSpriteHigh:
>0699							.fill 	64
.a9e5					GXGraphicDraw:
.a9e5	c9 40		cmp #$40			cmp 	#GCMD_Move					; low instructions don't use coordinates
.a9e7	b0 06		bcs $a9ef			bcs 	_GDCoordinate
.a9e9	86 36		stx $36				stx 	gxzTemp0 					; save X/Y
.a9eb	84 37		sty $37				sty 	gxzTemp0+1
.a9ed	80 4b		bra $aa3a			bra 	_GDExecuteA 				; and execute
.a9ef					_GDCoordinate:
.a9ef	48		pha				pha 								; save AXY
.a9f0	da		phx				phx
.a9f1	5a		phy				phy
.a9f2	a2 03		ldx #$03			ldx 	#3 							; copy currentX to lastX
.a9f4					_GDCopy1:
.a9f4	bd 39 06	lda $0639,x			lda 	gxCurrentX,x
.a9f7	9d 3d 06	sta $063d,x			sta 	gxLastX,x
.a9fa	ca		dex				dex
.a9fb	10 f7		bpl $a9f4			bpl 	_GDCopy1
.a9fd	68		pla				pla 								; update Y
.a9fe	8d 3b 06	sta $063b			sta 	gxCurrentY
.aa01	9c 3c 06	stz $063c			stz 	gxCurrentY+1
.aa04	68		pla				pla
.aa05	8d 39 06	sta $0639			sta 	gxCurrentX
.aa08	68		pla				pla 								; get A (command+X.1) back
.aa09	48		pha				pha
.aa0a	29 01		and #$01			and 	#1 							; put LSB as MSB of Current.X
.aa0c	8d 3a 06	sta $063a			sta 	gxCurrentX+1
.aa0f	68		pla				pla 								; get command back
.aa10	29 fe		and #$fe			and 	#$FE 						; lose LSB, chuck the stray X bit
.aa12	48		pha				pha 								; push back.
.aa13	c9 52		cmp #$52			cmp 	#GCMD_SpriteMove 			; move sprite does not clip.
.aa15	f0 17		beq $aa2e			beq 	_GDCopyToWorkArea
.aa17	ad 3a 06	lda $063a			lda 	gxCurrentX+1 				; X < 256 X okay
.aa1a	f0 07		beq $aa23			beq 	_GDCheckY
.aa1c	ad 39 06	lda $0639			lda 	gxCurrentX 					; otherwise X < 320 = 256 + 64
.aa1f	c9 40		cmp #$40			cmp 	#64
.aa21	b0 08		bcs $aa2b			bcs 	_GDError1
.aa23					_GDCheckY:
.aa23	ad 3b 06	lda $063b			lda 	gxCurrentY 					; check Y < Height.
.aa26	cd 4d 06	cmp $064d			cmp 	gxHeight
.aa29	90 03		bcc $aa2e			bcc 	_GDCopyToWorkArea
.aa2b					_GDError1:
.aa2b	68		pla				pla
.aa2c					_GDError2:
.aa2c	38		sec				sec
.aa2d	60		rts				rts
.aa2e					_GDCopyToWorkArea:
.aa2e	a2 07		ldx #$07			ldx 	#7 							; copy current and last to gxXY/12 work area
.aa30					_GDCopy2:
.aa30	bd 39 06	lda $0639,x			lda 	gxCurrentX,x
.aa33	9d 41 06	sta $0641,x			sta 	gxX0,x
.aa36	ca		dex				dex
.aa37	10 f7		bpl $aa30			bpl 	_GDCopy2
.aa39	68		pla				pla 								; get command
.aa3a					_GDExecuteA:
.aa3a	c9 54		cmp #$54			cmp 	#GRFirstFreeCode*2 			; bad ?
.aa3c	b0 ee		bcs $aa2c			bcs 	_GDError2
.aa3e	aa		tax				tax
.aa3f	7c 66 b7	jmp ($b766,x)			jmp 	(GRVectorTable,x)
.aa42					GXMove:
.aa42	18		clc				clc
.aa43	60		rts				rts
.aa44					GRUndefined:
>aa44	db						.byte 	$DB 						; causes a break in the emulator
.aa45					GXFillCircle:
.aa45	a9 ff		lda #$ff			lda 	#255
.aa47	80 02		bra $aa4b			bra 	GXCircle
.aa49					GXFrameCircle:
.aa49	a9 00		lda #$00			lda 	#0
.aa4b					GXCircle:
.aa4b	8d dc 06	sta $06dc			sta 	gxIsFillMode					; save Fill flag
.aa4e	ad 4a 06	lda $064a			lda 	gxBitmapsOn
.aa51	f0 26		beq $aa79			beq 	_GXCFail
.aa53	20 a4 b2	jsr $b2a4			jsr 	GXSortXY 					; topleft/bottomright
.aa56	20 7c b1	jsr $b17c			jsr 	GXOpenBitmap 				; start drawing
.aa59	20 4b ab	jsr $ab4b			jsr 	GXCircleSetup 				; set up for drawing
.aa5c	9c dd 06	stz $06dd			stz 	gxYChanged
.aa5f					_GXCircleDraw:
.aa5f	ad da 06	lda $06da			lda 	gXCentre					; while x <= y
.aa62	cd db 06	cmp $06db			cmp 	gYCentre
.aa65	90 0a		bcc $aa71			bcc 	_GXCircleContinue
.aa67	d0 03		bne $aa6c			bne 	_GXNoLast
.aa69	20 7e aa	jsr $aa7e			jsr 	GXPlot1
.aa6c					_GXNoLast:
.aa6c	20 84 b1	jsr $b184			jsr 	GXCloseBitmap 				; close the bitmap
.aa6f	18		clc				clc
.aa70	60		rts				rts
.aa71					_GXCircleContinue:
.aa71	20 7b aa	jsr $aa7b			jsr 	GXPlot2 					; draw it
.aa74	20 f8 aa	jsr $aaf8			jsr 	GXCircleMove 				; adjust the coordinates
.aa77	80 e6		bra $aa5f			bra 	_GXCircleDraw
.aa79					_GXCFail:
.aa79	38		sec				sec
.aa7a	60		rts				rts
.aa7b					GXPlot2:
.aa7b	20 7e aa	jsr $aa7e			jsr 	GXPlot1 						; plot and swap, fall through does twice
.aa7e					GXPlot1:
.aa7e	ad db 06	lda $06db			lda 	gYCentre 						; if y = 0, don't do it twice (xor)
.aa81	f0 03		beq $aa86			beq 	_GXPlot1Only
.aa83	20 a2 aa	jsr $aaa2			jsr 	GXPlot0 						; plot and negate
.aa86					_GXPlot1Only:
.aa86	20 a2 aa	jsr $aaa2			jsr 	GXPlot0 						; twice, undoing negation
.aa89	ad da 06	lda $06da			lda 	gXCentre 						; swap X and Y
.aa8c	ae db 06	ldx $06db			ldx	 	gYCentre
.aa8f	8d db 06	sta $06db			sta 	gYCentre
.aa92	8e da 06	stx $06da			stx 	gXCentre
.aa95	ad dd 06	lda $06dd			lda 	gxYChanged 						; toggle Y Changed flag
.aa98	a9 ff		lda #$ff			lda 	#$FF
.aa9a	8d dd 06	sta $06dd			sta 	gxYChanged
.aa9d	60		rts				rts
.aa9e	20 a2 aa	jsr $aaa2			jsr 	GXPlot0 						; do once
.aaa1	60		rts				rts
.aaa2	ad dc 06	lda $06dc	GXPlot0:lda 	gxIsFillMode 					; outline mode, always draw as X or Y will change
.aaa5	f0 05		beq $aaac			beq 	_GXPlot0Always
.aaa7	ad dd 06	lda $06dd			lda 	gxYChanged						; fill mode, only draw if changed.
.aaaa	f0 2d		beq $aad9			beq 	GXPlot0Exit
.aaac					_GXPlot0Always:
.aaac	a2 02		ldx #$02			ldx 	#2 								; copy Y1-A => Y0
.aaae	ad db 06	lda $06db			lda 	gYCentre
.aab1	20 da aa	jsr $aada			jsr 	GXSubCopy
.aab4	a2 00		ldx #$00			ldx 	#0 								; copy X1-A => X0,
.aab6	ad da 06	lda $06da			lda 	gXCentre
.aab9	20 da aa	jsr $aada			jsr 	GXSubCopy
.aabc	48		pha				pha 									; save last offset X
.aabd	20 8c b1	jsr $b18c			jsr 	GXPositionCalc 					; calculate position/offset.
.aac0	68		pla				pla
.aac1	0a		asl a				asl 	a 								; store 2 x last offset in gxzTemp0
.aac2	85 36		sta $36				sta 	gxzTemp0
.aac4	64 37		stz $37				stz 	gxzTemp0+1
.aac6	26 37		rol $37				rol 	gxzTemp0+1
.aac8	ad dc 06	lda $06dc			lda 	gxIsFillMode
.aacb	69 80		adc #$80			adc 	#128
.aacd	20 6a ae	jsr $ae6a			jsr 	GXDrawLineTemp0 				; routine from Rectangle.
.aad0	38		sec				sec 									; GY = -GY
.aad1	a9 00		lda #$00			lda 	#0
.aad3	ed db 06	sbc $06db			sbc 	gYCentre
.aad6	8d db 06	sta $06db			sta 	gYCentre
.aad9					GXPlot0Exit:
.aad9	60		rts				rts
.aada					GXSubCopy:
.aada	85 36		sta $36				sta 	gxzTemp0
.aadc	64 37		stz $37				stz 	gxzTemp0+1
.aade	29 80		and #$80			and 	#$80
.aae0	f0 02		beq $aae4			beq 	_GXNoSx
.aae2	c6 37		dec $37				dec 	gxzTemp0+1
.aae4					_GXNoSx:
.aae4	38		sec				sec
.aae5	bd 45 06	lda $0645,x			lda 	gXX1,x
.aae8	e5 36		sbc $36				sbc 	gxzTemp0
.aaea	9d 41 06	sta $0641,x			sta 	gXX0,x
.aaed	bd 46 06	lda $0646,x			lda 	gXX1+1,x
.aaf0	e5 37		sbc $37				sbc 	gxzTemp0+1
.aaf2	9d 42 06	sta $0642,x			sta 	gXX0+1,x
.aaf5	a5 36		lda $36				lda 	gxzTemp0 						; return A
.aaf7	60		rts				rts
.aaf8					GXCircleMove:
.aaf8	9c dd 06	stz $06dd			stz 	gxYChanged 					; clear Y changed flag
.aafb	a5 39		lda $39				lda 	gxzTemp1+1 					; check sign of D
.aafd	10 0d		bpl $ab0c			bpl 	_GXEMPositive
.aaff	ee da 06	inc $06da			inc 	gXCentre 					; X++
.ab02	ad da 06	lda $06da			lda 	gXCentre
.ab05	20 2b ab	jsr $ab2b			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.ab08	a9 06		lda #$06			lda 	#6  						; and add 6
.ab0a	80 15		bra $ab21			bra 	_GXEMAddD
.ab0c					_GXEMPositive:
.ab0c	ee da 06	inc $06da			inc 	gXCentre					; X++
.ab0f	ce db 06	dec $06db			dec 	gyCentre 					; Y--
.ab12	38		sec				sec 								; calculate X-Y
.ab13	ad da 06	lda $06da			lda 	gXCentre
.ab16	ed db 06	sbc $06db			sbc 	gYCentre
.ab19	20 2b ab	jsr $ab2b			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.ab1c	a9 0a		lda #$0a			lda 	#10  						; and add 10
.ab1e	ce dd 06	dec $06dd			dec 	gxYChanged
.ab21					_GXEMAddD:
.ab21	18		clc				clc
.ab22	65 38		adc $38				adc 	gxzTemp1
.ab24	85 38		sta $38				sta 	gxzTemp1
.ab26	90 02		bcc $ab2a			bcc 	_GXEMNoCarry
.ab28	e6 39		inc $39				inc 	gxzTemp1+1
.ab2a					_GXEMNoCarry:
.ab2a	60		rts				rts
.ab2b					_GXAdd4TimesToD:
.ab2b	85 36		sta $36				sta 	gxzTemp0 					; make 16 bit signed.
.ab2d	29 80		and #$80			and 	#$80
.ab2f	f0 02		beq $ab33			beq 	_GXA4Unsigned
.ab31	a9 ff		lda #$ff			lda 	#$FF
.ab33					_GXA4Unsigned:
.ab33	85 37		sta $37				sta 	gxzTemp0+1
.ab35	06 36		asl $36				asl 	gxzTemp0  					; x 4
.ab37	26 37		rol $37				rol 	gxzTemp0+1
.ab39	06 36		asl $36				asl 	gxzTemp0
.ab3b	26 37		rol $37				rol 	gxzTemp0+1
.ab3d	18		clc				clc 								; add
.ab3e	a5 36		lda $36				lda		gxzTemp0
.ab40	65 38		adc $38				adc 	gxzTemp1
.ab42	85 38		sta $38				sta 	gxzTemp1
.ab44	a5 37		lda $37				lda		gxzTemp0+1
.ab46	65 39		adc $39				adc 	gxzTemp1+1
.ab48	85 39		sta $39				sta 	gxzTemp1+1
.ab4a	60		rts				rts
.ab4b					GXCircleSetup:
.ab4b	38		sec				sec
.ab4c	ad 47 06	lda $0647			lda 	gxY1
.ab4f	ed 43 06	sbc $0643			sbc 	gxY0
.ab52	4a		lsr a				lsr 	a
.ab53	8d d9 06	sta $06d9			sta 	gxRadius
.ab56	a2 00		ldx #$00			ldx 	#0
.ab58	20 7a ab	jsr $ab7a			jsr 	_GXCalculateCentre
.ab5b	a2 02		ldx #$02			ldx 	#2
.ab5d	20 7a ab	jsr $ab7a			jsr 	_GXCalculateCentre
.ab60	9c da 06	stz $06da			stz 	gXCentre
.ab63	ad d9 06	lda $06d9			lda 	gxRadius
.ab66	8d db 06	sta $06db			sta 	gYCentre
.ab69	0a		asl a				asl 	a 							; R x 2
.ab6a	85 36		sta $36				sta 	gxzTemp0
.ab6c	38		sec				sec
.ab6d	a9 03		lda #$03			lda 	#3
.ab6f	e5 36		sbc $36				sbc 	gxzTemp0
.ab71	85 38		sta $38				sta 	gxzTemp1
.ab73	a9 00		lda #$00			lda 	#0
.ab75	e9 00		sbc #$00			sbc 	#0
.ab77	85 39		sta $39				sta 	gxzTemp1+1
.ab79	60		rts				rts
.ab7a					_GXCalculateCentre:
.ab7a	38		sec				sec
.ab7b	bd 45 06	lda $0645,x			lda 	gxX1,x
.ab7e	7d 41 06	adc $0641,x			adc 	gXX0,x
.ab81	9d 45 06	sta $0645,x			sta 	gXX1,x
.ab84	bd 46 06	lda $0646,x			lda 	gXX1+1,x
.ab87	7d 42 06	adc $0642,x			adc 	gXX0+1,x
.ab8a	4a		lsr a				lsr 	a
.ab8b	9d 46 06	sta $0646,x			sta 	gXX1+1,x
.ab8e	7e 45 06	ror $0645,x			ror 	gXX1,x
.ab91	60		rts				rts
.06d9					gxRadius:
>06d9							.fill 	1
.06da					gXCentre:
>06da							.fill 	1
.06db					gYCentre:
>06db							.fill 	1
.06dc					gxIsFillMode:
>06dc							.fill 	1
.06dd					gxYChanged:
>06dd							.fill  	1
=64000					ScreenSize200 = 320 * 200
=76800					ScreenSize240 = 320 * 240
.ab92					GXClearBitmap:
.ab92	ad 4a 06	lda $064a			lda 	gxBitmapsOn 				; check BMP running.
.ab95	f0 24		beq $abbb			beq 	_GXCBFail
.ab97	20 7c b1	jsr $b17c			jsr 	GXOpenBitmap 				; start access
.ab9a	a0 07		ldy #$07			ldy 	#ScreenSize200 / 8192 		; X is pages to clear
.ab9c	ad 4d 06	lda $064d			lda 	gxHeight
.ab9f	c9 c8		cmp #$c8			cmp 	#200 						; 200 ?
.aba1	a0 09		ldy #$09			ldy 	#ScreenSize240 / 8192
.aba3					_GXCalcLastPage:
.aba3	98		tya				tya 								; add to base page
.aba4	18		clc				clc
.aba5	6d 4b 06	adc $064b			adc 	gxBasePage
.aba8	85 0b		sta $0b				sta 	GXEditSlot  				; clear from this page back
.abaa					_GXClearAll:
.abaa	20 bd ab	jsr $abbd			jsr 	_GXClearBlock 				; clear 8k block
.abad	c6 0b		dec $0b				dec 	GXEditSlot  				; back to previous
.abaf	a5 0b		lda $0b				lda 	GXEditSlot
.abb1	cd 4b 06	cmp $064b			cmp 	gxBasePage 					; until before base page
.abb4	b0 f4		bcs $abaa			bcs 	_GXClearAll
.abb6	20 84 b1	jsr $b184			jsr 	GXCloseBitmap	 			; stop access
.abb9	18		clc				clc
.abba	60		rts				rts
.abbb					_GXCBFail:
.abbb	38		sec				sec
.abbc	60		rts				rts
.abbd					_GXClearBlock:
.abbd	a9 00		lda #$00			lda 	#((GXMappingAddress) & $FF)
.abbf	85 38		sta $38				sta 	0+gxzTemp1
.abc1	a9 60		lda #$60			lda 	#((GXMappingAddress) >> 8)
.abc3	85 39		sta $39				sta 	1+gxzTemp1
.abc5					_GXCB0:
.abc5	a5 36		lda $36				lda 	gxzTemp0
.abc7	a0 00		ldy #$00			ldy 	#0
.abc9					_GXCB1:
.abc9	91 38		sta ($38),y			sta 	(gxzTemp1),y
.abcb	c8		iny				iny
.abcc	91 38		sta ($38),y			sta 	(gxzTemp1),y
.abce	c8		iny				iny
.abcf	91 38		sta ($38),y			sta 	(gxzTemp1),y
.abd1	c8		iny				iny
.abd2	91 38		sta ($38),y			sta 	(gxzTemp1),y
.abd4	c8		iny				iny
.abd5	d0 f2		bne $abc9			bne 	_GXCB1
.abd7	e6 39		inc $39				inc 	gxzTemp1+1
.abd9	a5 39		lda $39				lda 	gxzTemp1+1
.abdb	c9 80		cmp #$80			cmp	 	#(GXMappingAddress >> 8)+$20
.abdd	d0 e6		bne $abc5			bne 	_GXCB0
.abdf	60		rts				rts
.abe0					GXInitialise:
.abe0	64 01		stz $01				stz 	1
.abe2	a9 01		lda #$01			lda 	#1
.abe4	8d 00 d0	sta $d000			sta 	$D000
.abe7	18		clc				clc
.abe8	9c 49 06	stz $0649			stz 	GXSpritesOn
.abeb	9c 4a 06	stz $064a			stz 	GXBitmapsOn
.abee	a2 0f		ldx #$0f			ldx 	#15
.abf0					_GXIClear:
.abf0	9e 39 06	stz $0639,x			stz 	gxCurrentX,x
.abf3	ca		dex				dex
.abf4	10 fa		bpl $abf0			bpl 	_GXIClear
.abf6	20 91 ac	jsr $ac91			jsr 	GXClearSpriteStore
.abf9	60		rts				rts
.abfa					GXControlBitmap:
.abfa	64 01		stz $01				stz 	1
.abfc	a5 36		lda $36				lda 	gxzTemp0 					; get control bits
.abfe	29 01		and #$01			and 	#1 							; set bitmap flag
.ac00	8d 4a 06	sta $064a			sta 	gxBitmapsOn
.ac03	4a		lsr a				lsr 	a 							; bit 0 into carry.
.ac04	ad 00 d0	lda $d000			lda 	$D000 						; read Vicky MCR
.ac07	09 07		ora #$07			ora 	#7 							; turn graphics, text, textoverlay on.
.ac09	29 f7		and #$f7			and 	#$F7 						; clear bitmap bit
.ac0b	90 02		bcc $ac0f			bcc 	_CBNotOn
.ac0d	09 08		ora #$08			ora 	#$08 						; bitmap on if 1 on 0 off
.ac0f					_CBNotOn:
.ac0f	8d 00 d0	sta $d000			sta 	$D000 						; update Vicky MCR
.ac12	a5 36		lda $36				lda 	gxzTemp0 					; get control settings (bits 0-2)
.ac14	29 07		and #$07			and 	#7
.ac16	8d 00 d1	sta $d100			sta 	$D100 						; write in Vicky Bitmap Control Register #0
.ac19	a5 37		lda $37				lda 	gxzTemp0+1 					; get the base page
.ac1b	d0 02		bne $ac1f			bne 	_CBNotDefault
.ac1d	a9 08		lda #$08			lda 	#8  						; if zero, use 8 e.g. bitmap at $10000
.ac1f					_CBNotDefault:
.ac1f	8d 4b 06	sta $064b			sta 	gxBasePage
.ac22	20 83 ac	jsr $ac83			jsr 	GXCalculateBaseAddress 	 	; convert page# to address
.ac25	a5 37		lda $37				lda 	gxzTemp0+1 					; copy address into Bitmap address registers
.ac27	8d 03 d1	sta $d103			sta 	$D103
.ac2a	a5 36		lda $36				lda 	gxzTemp0
.ac2c	8d 02 d1	sta $d102			sta 	$D102
.ac2f	9c 01 d1	stz $d101			stz 	$D101
.ac32	a2 f0		ldx #$f0			ldx 	#240 						; height is 240
.ac34	ad 01 d0	lda $d001			lda 	$D001 						; read MCR bit 0
.ac37	29 01		and #$01			and 	#1
.ac39	f0 02		beq $ac3d			beq 	_CBHaveHeight
.ac3b	a2 c8		ldx #$c8			ldx 	#200 						; if bit 0 set 320x200
.ac3d					_CBHaveHeight
.ac3d	8e 4d 06	stx $064d			stx 	gxHeight
.ac40	18		clc				clc
.ac41	60		rts				rts
.ac42					GXControlSprite:
.ac42	64 01		stz $01				stz 	1
.ac44	a5 36		lda $36				lda 	gxzTemp0 					; get control bits
.ac46	29 01		and #$01			and 	#1 							; set sprites flag
.ac48	8d 49 06	sta $0649			sta 	gxSpritesOn
.ac4b	4a		lsr a				lsr 	a 							; bit 0 into carry.
.ac4c	ad 00 d0	lda $d000			lda 	$D000 						; read Vicky MCR
.ac4f	09 07		ora #$07			ora 	#7 							; turn graphics, text, textoverlay on.
.ac51	29 df		and #$df			and 	#$DF 						; clear sprite bit
.ac53	90 02		bcc $ac57			bcc 	_CSNotOn
.ac55	09 20		ora #$20			ora 	#$20 						; sprite on if 1 on 0 off
.ac57					_CSNotOn:
.ac57	8d 00 d0	sta $d000			sta 	$D000 						; update Vicky MCR
.ac5a	a5 37		lda $37				lda 	gxzTemp0+1 					; get the base page
.ac5c	d0 02		bne $ac60			bne 	_CSNotDefault
.ac5e	a9 18		lda #$18			lda 	#24  						; if zero, use 24 e.g. sprites at $30000
.ac60					_CSNotDefault:
.ac60	8d 4c 06	sta $064c			sta 	gxSpritePage
.ac63	20 83 ac	jsr $ac83			jsr 	GXCalculateBaseAddress 	 	; convert page# to address
.ac66	a5 36		lda $36				lda 	zTemp0
.ac68	8d 57 06	sta $0657			sta 	GXSpriteOffsetBase
.ac6b	a5 37		lda $37				lda 	zTemp0+1
.ac6d	8d 58 06	sta $0658			sta 	GXSpriteOffsetBase+1
.ac70	a2 00		ldx #$00			ldx 	#0 							; disable all sprites, clears all sprite memory.
.ac72					_CSClear:
.ac72	9e 00 d9	stz $d900,x			stz 	$D900,x
.ac75	9e 00 da	stz $da00,x			stz 	$DA00,x
.ac78	ca		dex				dex
.ac79	d0 f7		bne $ac72			bne 	_CSClear
.ac7b	9c 56 06	stz $0656			stz 	GSCurrentSpriteAddr+1 		; no sprite selected.
.ac7e	20 91 ac	jsr $ac91			jsr 	GXClearSpriteStore
.ac81	18		clc				clc
.ac82	60		rts				rts
.ac83					GXCalculateBaseAddress:
.ac83	85 36		sta $36				sta 	gxzTemp0
.ac85	64 37		stz $37				stz 	gxzTemp0+1
.ac87	a9 05		lda #$05			lda 	#5
.ac89					_GXShift:
.ac89	06 36		asl $36				asl 	gxzTemp0
.ac8b	26 37		rol $37				rol 	gxzTemp0+1
.ac8d	3a		dec a				dec		a
.ac8e	d0 f9		bne $ac89			bne 	_GXShift
.ac90	60		rts				rts
.ac91					GXClearSpriteStore:
.ac91	a2 3f		ldx #$3f			ldx 	#63 						; erase 64 sprite store elements
.ac93					_GXCSSLoop:
.ac93	9e 99 06	stz $0699,x			stz 	GXSpriteHigh,x
.ac96	a9 80		lda #$80			lda 	#$80 						; set the 'hidden' bit.
.ac98	9d 59 06	sta $0659,x			sta 	GXSpriteLow,x
.ac9b	ca		dex				dex
.ac9c	10 f5		bpl $ac93			bpl 	_GXCSSLoop
.ac9e	60		rts				rts
.ac9f					GXLine:
.ac9f	ad 4a 06	lda $064a			lda 	GXBitmapsOn
.aca2	f0 28		beq $accc			beq 	_GXLFail
.aca4	20 7c b1	jsr $b17c			jsr 	GXOpenBitmap
.aca7	20 c2 b2	jsr $b2c2			jsr 	GXSortY						; sort pairs so Y1 >= Y0 e.g. top to bottom.
.acaa	20 72 ad	jsr $ad72			jsr 	GXLineSetup 				; the calculations in the linescanner constructor
.acad	20 8c b1	jsr $b18c			jsr 	GXPositionCalc 				; calculate position/offset.
.acb0					_GXDrawLoop:
.acb0	ac 53 06	ldy $0653			ldy 	gsOffset 					; draw the pixel
.acb3	b1 3c		lda ($3c),y			lda 	(gxzScreen),y
.acb5	2d 51 06	and $0651			and 	gxANDValue
.acb8	4d 50 06	eor $0650			eor 	gxEORValue
.acbb	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.acbd	20 ce ac	jsr $acce			jsr 	GXLineIsComplete 			; is the line complete ?
.acc0	f0 05		beq $acc7			beq 	_GXLExit
.acc2	20 e9 ac	jsr $ace9			jsr 	GXLineAdvance 				; code as per advance method
.acc5	80 e9		bra $acb0			bra 	_GXDrawLoop
.acc7					_GXLExit:
.acc7	20 84 b1	jsr $b184			jsr 	GXCloseBitmap
.acca	18		clc				clc
.accb	60		rts				rts
.accc					_GXLFail:
.accc	38		sec				sec
.accd	60		rts				rts
.acce					GXLineIsComplete:
.acce	ad e0 06	lda $06e0			lda 	GXIsDiffYLarger 			; is dy larger
.acd1	d0 0f		bne $ace2			bne 	_GXLICCompareY 				; if so compare Y1/Y0
.acd3	ad 41 06	lda $0641			lda 	GXX0 						; compare X, LSB and MSB
.acd6	4d 45 06	eor $0645			eor 	GXX1
.acd9	d0 06		bne $ace1			bne 	_GXLICExit
.acdb	ad 42 06	lda $0642			lda 	GXX0+1
.acde	4d 46 06	eor $0646			eor 	GXX1+1
.ace1					_GXLICExit:
.ace1	60		rts				rts
.ace2					_GXLICCompareY:
.ace2	ad 47 06	lda $0647			lda 	GXY1
.ace5	4d 43 06	eor $0643			eor 	GXY0
.ace8	60		rts				rts
.ace9					GXLineAdvance:
.ace9	18		clc				clc 								; add adjust to position
.acea	ad e2 06	lda $06e2			lda 	GXPosition
.aced	6d e3 06	adc $06e3			adc 	GXAdjust
.acf0	8d e2 06	sta $06e2			sta 	GXPosition
.acf3	9c e5 06	stz $06e5			stz 	GXAddSelect 				; clear add select flag
.acf6	b0 05		bcs $acfd			bcs 	_GXLAOverflow 				; if carry out, overflowed.
.acf8	cd e4 06	cmp $06e4			cmp 	GXTotal 					; if exceeded total
.acfb	90 0a		bcc $ad07			bcc 	_GXLANoExtra
.acfd					_GXLAOverflow:
.acfd	ce e5 06	dec $06e5			dec 	GXAddSelect 				; set addselect to $FF
.ad00	38		sec				sec 								; subtract total and write back
.ad01	ed e4 06	sbc $06e4			sbc 	GXTotal
.ad04	8d e2 06	sta $06e2			sta 	GXPosition
.ad07					_GXLANoExtra:
.ad07	ad e0 06	lda $06e0			lda 	GXIsDiffYLarger
.ad0a	f0 0d		beq $ad19			beq 	_GXDXLarger
.ad0c	20 6b ad	jsr $ad6b			jsr 	GXIncrementY
.ad0f	ad e5 06	lda $06e5			lda 	GXAddSelect
.ad12	f0 10		beq $ad24			beq 	_GXLAExit
.ad14	20 25 ad	jsr $ad25			jsr 	GXAdjustX
.ad17	80 0b		bra $ad24			bra 	_GXLAExit
.ad19					_GXDXLarger:
.ad19	20 25 ad	jsr $ad25			jsr 	GXAdjustX
.ad1c	ad e5 06	lda $06e5			lda 	GXAddSelect
.ad1f	f0 03		beq $ad24			beq 	_GXLAExit
.ad21	20 6b ad	jsr $ad6b			jsr 	GXIncrementY
.ad24					_GXLAExit:
.ad24	60		rts				rts
.ad25					GXAdjustX:
.ad25	ad e1 06	lda $06e1			lda 	GXDXNegative
.ad28	10 25		bpl $ad4f			bpl 	_GXAXRight
.ad2a	ad 41 06	lda $0641			lda 	GXX0
.ad2d	d0 03		bne $ad32			bne 	_GXAXNoBorrow
.ad2f	ce 42 06	dec $0642			dec 	GXX0+1
.ad32					_GXAXNoBorrow:
.ad32	ce 41 06	dec $0641			dec 	GXX0
.ad35	ce 53 06	dec $0653			dec 	gsOffset 					; pixel left
.ad38	ad 53 06	lda $0653			lda 	gsOffset
.ad3b	c9 ff		cmp #$ff			cmp 	#$FF
.ad3d	d0 0f		bne $ad4e			bne 	_GXAYExit 					; underflow
.ad3f	c6 3d		dec $3d				dec 	gxzScreen+1 					; borrow
.ad41	a5 3d		lda $3d				lda 	gxzScreen+1 					; gone off page
.ad43	c9 60		cmp #$60			cmp 	#GXMappingAddress >> 8
.ad45	b0 07		bcs $ad4e			bcs 	_GXAYExit
.ad47	18		clc				clc
.ad48	69 20		adc #$20			adc 	#$20 						; fix up
.ad4a	85 3d		sta $3d				sta 	gxzScreen+1
.ad4c	c6 0b		dec $0b				dec 	GXEditSlot 				; back one page
.ad4e					_GXAYExit:
.ad4e	60		rts				rts
.ad4f					_GXAXRight:
.ad4f	ee 41 06	inc $0641			inc 	GXX0
.ad52	d0 03		bne $ad57			bne 	_GXAXNoCarry
.ad54	ee 42 06	inc $0642			inc 	GXX0+1
.ad57					_GXAXNoCarry:
.ad57	ee 53 06	inc $0653			inc 	gsOffset 					; pixel right
.ad5a	d0 0e		bne $ad6a			bne 	_GXAXExit 					; if not overflowed, exit.
.ad5c	e6 3d		inc $3d				inc 	gxzScreen+1 					; next line
.ad5e	a5 3d		lda $3d				lda 	gxzScreen+1
.ad60	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page ?
.ad62	90 06		bcc $ad6a			bcc 	_GXAXExit
.ad64	e9 20		sbc #$20			sbc 	#$20 						; fix up
.ad66	85 3d		sta $3d				sta 	gxzScreen+1
.ad68	e6 0b		inc $0b				inc 	GXEditSlot 				; next page
.ad6a					_GXAXExit:
.ad6a	60		rts				rts
.ad6b					GXIncrementY:
.ad6b	ee 43 06	inc $0643			inc 	GXY0
.ad6e	20 e2 b1	jsr $b1e2			jsr 	GXMovePositionDown
.ad71	60		rts				rts
.ad72					GXLineSetup:
.ad72	ad 47 06	lda $0647			lda 	GXY1
.ad75	38		sec				sec
.ad76	ed 43 06	sbc $0643			sbc 	GXY0
.ad79	4a		lsr a				lsr 	a
.ad7a	8d df 06	sta $06df			sta 	GXDiffY
.ad7d	9c e1 06	stz $06e1			stz 	GXDXNegative 				; clear -ve flag
.ad80	38		sec				sec
.ad81	ad 45 06	lda $0645			lda 	GXX1
.ad84	ed 41 06	sbc $0641			sbc 	GXX0
.ad87	8d de 06	sta $06de			sta 	GXDiffX
.ad8a	ad 46 06	lda $0646			lda 	GXX1+1 						; calculate MSB
.ad8d	ed 42 06	sbc $0642			sbc 	GXX0+1
.ad90	6a		ror a				ror 	a 							; rotate bit into DiffX halving it
.ad91	6e de 06	ror $06de			ror 	GXDiffX
.ad94	0a		asl a				asl 	a
.ad95	10 0c		bpl $ada3			bpl 	_GDXNotNegative
.ad97	a9 00		lda #$00			lda 	#0 							; make absolute value of |dx|
.ad99	38		sec				sec
.ad9a	ed de 06	sbc $06de			sbc 	GXDiffX
.ad9d	8d de 06	sta $06de			sta 	GXDiffX
.ada0	ce e1 06	dec $06e1			dec 	GXDXNegative 				; -ve flag = $FF.
.ada3					_GDXNotNegative:
.ada3	9c e0 06	stz $06e0			stz 	GXIsDiffYLarger 			; clear larger flag
.ada6	ad df 06	lda $06df			lda 	GXDiffY 					; set adjust and total.
.ada9	8d e3 06	sta $06e3			sta 	GXAdjust
.adac	ad de 06	lda $06de			lda 	GXDiffX
.adaf	8d e4 06	sta $06e4			sta 	GXTotal
.adb2	ad df 06	lda $06df			lda 	GXDiffY 					; if dy > dx
.adb5	cd de 06	cmp $06de			cmp 	GXDiffX
.adb8	90 0f		bcc $adc9			bcc 	_GDXNotLarger
.adba	ce e0 06	dec $06e0			dec 	GXIsDiffYLarger 			; set the dy larger flag
.adbd	ad de 06	lda $06de			lda 	GXDiffX 					; set adjust and total other way round
.adc0	8d e3 06	sta $06e3			sta 	GXAdjust
.adc3	ad df 06	lda $06df			lda 	GXDiffY
.adc6	8d e4 06	sta $06e4			sta 	GXTotal
.adc9					_GDXNotLarger:
.adc9	ad e4 06	lda $06e4			lda 	GXTotal
.adcc	4a		lsr a				lsr 	a
.adcd	8d e2 06	sta $06e2			sta 	GXPosition
.add0	60		rts				rts
.06de					GXDiffX:
>06de							.fill 	1
.06df					GXDiffY:
>06df							.fill 	1
.06e0					GXIsDiffYLarger:
>06e0							.fill 	1
.06e1					GXDXNegative:
>06e1							.fill 	1
.06e2					GXPosition:
>06e2							.fill 	1
.06e3					GXAdjust:
>06e3							.fill 	1
.06e4					GXTotal:
>06e4							.fill 	1
.06e5					GXAddSelect:
>06e5							.fill 	1
.add1					GXSetColourMode:
.add1	a6 36		ldx $36				ldx 	gxzTemp0
.add3	8e 4f 06	stx $064f			stx 	gxColour 								; set colour
.add6	a5 37		lda $37				lda 	gxzTemp0+1 								;
.add8	8d 4e 06	sta $064e			sta 	gxMode 									; set mode
.addb	29 03		and #$03			and 	#3 										; only interested in bits 0-3
.addd	9c 51 06	stz $0651			stz 	gxANDValue 								; initially AND with 0, and EOR with Colour
.ade0	ae 4f 06	ldx $064f			ldx 	gxColour
.ade3	8e 50 06	stx $0650			stx 	gxEORValue
.ade6	c9 02		cmp #$02			cmp 	#2 										; if mode 2/3 And with colour
.ade8	90 03		bcc $aded			bcc 	_GXSDCNotAndColour
.adea	8e 51 06	stx $0651			stx 	gxANDValue
.aded					_GXSDCNotAndColour:
.aded	d0 03		bne $adf2			bne 	_GXSDCNotAnd 							; mode 2, Don't EOR with colour
.adef	9c 50 06	stz $0650			stz 	gxEORValue
.adf2					_GXSDCNotAnd:
.adf2	4a		lsr a				lsr 	a 										; if bit 0 set, 1's complement AND value
.adf3	90 08		bcc $adfd			bcc 	_GXSDCNoFlip
.adf5	ad 51 06	lda $0651			lda	 	gxANDValue
.adf8	49 ff		eor #$ff			eor 	#$FF
.adfa	8d 51 06	sta $0651			sta 	gxANDValue
.adfd					_GXSDCNoFlip:
.adfd	18		clc				clc
.adfe	60		rts				rts
.adff					GXPlotPoint:
.adff	20 7c b1	jsr $b17c			jsr 	GXOpenBitmap 				; start drawing
.ae02	20 8c b1	jsr $b18c			jsr 	GXPositionCalc 				; setup gxzScreen, gsOffset and the position.
.ae05	ac 53 06	ldy $0653			ldy 	gsOffset
.ae08	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel on the right
.ae0a	2d 51 06	and $0651			and 	gxANDValue
.ae0d	4d 50 06	eor $0650			eor 	gxEORValue
.ae10	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.ae12	20 84 b1	jsr $b184			jsr 	GXCloseBitmap 				; stop drawing and exit
.ae15	18		clc				clc
.ae16	60		rts				rts
.ae17					GXFillRectangle:
.ae17	38		sec				sec
.ae18	80 01		bra $ae1b			bra 	GXRectangle
.ae1a					GXFrameRectangle:
.ae1a	18		clc				clc
.ae1b					GXRectangle:
.ae1b	ad 4a 06	lda $064a			lda 	gxBitmapsOn
.ae1e	f0 35		beq $ae55			beq 	_GXRFail
.ae20	08		php				php 								; save Fill flag (CS)
.ae21	20 7c b1	jsr $b17c			jsr 	GXOpenBitmap 				; start drawing
.ae24	20 a4 b2	jsr $b2a4			jsr 	GXSortXY 					; sort both X and Y so top left/bottom right
.ae27	20 8c b1	jsr $b18c			jsr 	GXPositionCalc 				; setup gxzScreen, gsOffset and the position.
.ae2a	38		sec				sec 								; sec = Draw line
.ae2b	20 57 ae	jsr $ae57			jsr 	GXDrawLineX1X0 				; draw a line length X1-X0
.ae2e	ad 43 06	lda $0643			lda 	gxY0 						; reached end of rectangle ?
.ae31	cd 47 06	cmp $0647			cmp 	gxY1
.ae34	f0 19		beq $ae4f			beq 	_GXRectangleExit
.ae36					_GXRectLoop:
.ae36	20 e2 b1	jsr $b1e2			jsr 	GXMovePositionDown 			; down one.
.ae39	ee 43 06	inc $0643			inc 	gxY0 						; change Y pos
.ae3c	ad 43 06	lda $0643			lda 	gxY0 						; reached last line
.ae3f	cd 47 06	cmp $0647			cmp 	gXY1
.ae42	f0 07		beq $ae4b			beq 	_GXLastLine
.ae44	28		plp				plp 								; get flag back
.ae45	08		php				php
.ae46	20 57 ae	jsr $ae57			jsr 	GXDrawLineX1X0 				; draw horizontal line
.ae49	80 eb		bra $ae36			bra 	_GXRectLoop
.ae4b					_GXLastLine:
.ae4b	38		sec				sec
.ae4c	20 57 ae	jsr $ae57			jsr 	GXDrawLineX1X0
.ae4f					_GXRectangleExit:
.ae4f	68		pla				pla 								; throw fill flag.
.ae50	20 84 b1	jsr $b184			jsr 	GXCloseBitmap 				; stop drawing and exit
.ae53	18		clc				clc
.ae54	60		rts				rts
.ae55					_GXRFail:
.ae55	38		sec				sec
.ae56	60		rts				rts
.ae57					GXDrawLineX1X0:
.ae57	08		php				php 								; save solid/either-end
.ae58	38		sec				sec
.ae59	ad 45 06	lda $0645			lda		gXX1
.ae5c	ed 41 06	sbc $0641			sbc 	gXX0
.ae5f	85 36		sta $36				sta 	gxzTemp0
.ae61	ad 46 06	lda $0646			lda 	gXX1+1
.ae64	ed 42 06	sbc $0642			sbc 	gXX0+1
.ae67	85 37		sta $37				sta 	gxzTemp0+1
.ae69	28		plp				plp
.ae6a					GXDrawLineTemp0:
.ae6a	a5 3c		lda $3c				lda 	gxzScreen 						; push gxzScreen, gsOffset and GXEditSlot on stack
.ae6c	48		pha				pha
.ae6d	a5 3d		lda $3d				lda 	gxzScreen+1
.ae6f	48		pha				pha
.ae70	ad 53 06	lda $0653			lda 	gsOffset
.ae73	48		pha				pha
.ae74	a5 0b		lda $0b				lda 	GXEditSlot
.ae76	48		pha				pha
.ae77	ac 53 06	ldy $0653			ldy 	gsOffset 					; Y offset
.ae7a	90 1e		bcc $ae9a			bcc 	_GXDLTEndPoints 			; if CC draw end points only.
.ae7c					_GXDLTLine:
.ae7c	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel
.ae7e	2d 51 06	and $0651			and 	gxANDValue
.ae81	4d 50 06	eor $0650			eor 	gxEORValue
.ae84	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.ae86	a5 36		lda $36				lda 	gxzTemp0 					; decrement counter
.ae88	d0 04		bne $ae8e			bne 	_GXDLTNoBorrow
.ae8a	c6 37		dec $37				dec 	gxzTemp0+1 					; borrow, if goes -ve then exit
.ae8c	30 2e		bmi $aebc			bmi 	_GXDLTExit
.ae8e					_GXDLTNoBorrow:
.ae8e	c6 36		dec $36				dec 	gxzTemp0
.ae90	c8		iny				iny 								; next slot.
.ae91	d0 e9		bne $ae7c			bne 	_GXDLTLine
.ae93	e6 3d		inc $3d				inc 	gxzScreen+1 					; carry to next
.ae95	20 ca ae	jsr $aeca			jsr 	GXDLTCheckWrap				; check for new page.
.ae98	80 e2		bra $ae7c			bra 	_GXDLTLine
.ae9a					_GXDLTEndPoints:
.ae9a	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel
.ae9c	2d 51 06	and $0651			and 	gxANDValue
.ae9f	4d 50 06	eor $0650			eor 	gxEORValue
.aea2	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.aea4	98		tya				tya 								; advance to right side
.aea5	18		clc				clc
.aea6	65 36		adc $36				adc 	gxzTemp0
.aea8	a8		tay				tay
.aea9	a5 3d		lda $3d				lda 	gxzScreen+1
.aeab	65 37		adc $37				adc 	gxzTemp0+1
.aead	85 3d		sta $3d				sta 	gxzScreen+1
.aeaf	20 ca ae	jsr $aeca			jsr 	GXDLTCheckWrap 			; fix up.
.aeb2	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel on the right
.aeb4	2d 51 06	and $0651			and 	gxANDValue
.aeb7	4d 50 06	eor $0650			eor 	gxEORValue
.aeba	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.aebc					_GXDLTExit:
.aebc	68		pla				pla
.aebd	85 0b		sta $0b				sta 	GXEditSlot
.aebf	68		pla				pla
.aec0	8d 53 06	sta $0653			sta 	gsOffset
.aec3	68		pla				pla
.aec4	85 3d		sta $3d				sta 	gxzScreen+1
.aec6	68		pla				pla
.aec7	85 3c		sta $3c				sta 	gxzScreen
.aec9	60		rts				rts
.aeca					GXDLTCheckWrap:
.aeca	a5 3d		lda $3d				lda 	gxzScreen+1 					; check end of page
.aecc	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8)
.aece	90 06		bcc $aed6			bcc 	_GXDLTCWExit
.aed0	e9 20		sbc #$20			sbc 	#$20 						; fix up
.aed2	85 3d		sta $3d				sta 	gxzScreen+1
.aed4	e6 0b		inc $0b				inc 	GXEditSlot
.aed6					_GXDLTCWExit:
.aed6	60		rts				rts
.aed7					GXDrawGraphicElement:
.aed7	8d e6 06	sta $06e6			sta 	gxSize 						; save size
.aeda	3a		dec a				dec 	a
.aedb	8d e7 06	sta $06e7			sta 	gxMask 						; and mask
.aede	ad 4a 06	lda $064a			lda 	gxBitmapsOn 				; check BMP on
.aee1	f0 67		beq $af4a			beq 	_GXSLFail
.aee3	ad 43 06	lda $0643			lda 	gxY0 						; push Y on stack
.aee6	48		pha				pha
.aee7	8c e9 06	sty $06e9			sty 	gxAcquireVector+1 			; and acquisition vector
.aeea	8e e8 06	stx $06e8			stx 	gxAcquireVector
.aeed	20 7c b1	jsr $b17c			jsr 	gxOpenBitmap 				; open the bitmap.
.aef0	ad eb 06	lda $06eb			lda 	gxUseMode 					; scale bits
.aef3	4a		lsr a				lsr 	a
.aef4	4a		lsr a				lsr 	a
.aef5	4a		lsr a				lsr 	a
.aef6	29 07		and #$07			and		#7
.aef8	1a		inc a				inc 	a
.aef9	8d ea 06	sta $06ea			sta 	gxScale
.aefc	64 38		stz $38				stz 	gxzTemp1					; start first line
.aefe					_GXGELoop:
.aefe	a5 38		lda $38				lda 	gxzTemp1 					; current line number to read.
.af00	2c eb 06	bit $06eb			bit 	gxUseMode 					; check for flip.
.af03	10 06		bpl $af0b			bpl		_GXNoVFlip
.af05	ad e7 06	lda $06e7			lda 	gxMask
.af08	38		sec				sec
.af09	e5 38		sbc $38				sbc 	gxzTemp1
.af0b					_GXNoVFlip:
.af0b	aa		tax				tax 								; get the Xth line.
.af0c	20 4c af	jsr $af4c			jsr 	_GXCallAcquire 				; get that data.
.af0f	ad ea 06	lda $06ea			lda 	gxScale 					; do scale identical copies of that line.
.af12	85 39		sta $39				sta 	gxzTemp1+1
.af14					_GXGELoop2:
.af14	ad 43 06	lda $0643			lda 	gxY0 						; off screen
.af17	cd 4d 06	cmp $064d			cmp 	gxHeight
.af1a	b0 10		bcs $af2c			bcs 	_GXDGEExit
.af1c	20 4f af	jsr $af4f			jsr 	GXRenderOneLine 			; render line
.af1f	c6 39		dec $39				dec 	gxzTemp1+1 					; scale times.
.af21	d0 f1		bne $af14			bne 	_GXGELoop2
.af23	e6 38		inc $38				inc 	gxzTemp1 					; done all lines.
.af25	a5 38		lda $38				lda 	gxzTemp1
.af27	cd e6 06	cmp $06e6			cmp 	gxSize
.af2a	d0 d2		bne $aefe			bne 	_GXGELoop
.af2c					_GXDGEExit:
.af2c	68		pla				pla 								; restore Y for next time
.af2d	8d 43 06	sta $0643			sta 	gxY0
.af30	ae ea 06	ldx $06ea			ldx 	gxScale 					; get scale (1-8)
.af33					_GXShiftLeft:
.af33	18		clc				clc
.af34	ad e6 06	lda $06e6			lda 	gxSize
.af37	6d 41 06	adc $0641			adc 	gxX0
.af3a	8d 41 06	sta $0641			sta 	gxX0
.af3d	90 03		bcc $af42			bcc 	_GXSLNoCarry
.af3f	ee 42 06	inc $0642			inc 	gxX0+1
.af42					_GXSLNoCarry:
.af42	ca		dex				dex
.af43	d0 ee		bne $af33			bne 	_GXShiftLeft
.af45	20 84 b1	jsr $b184			jsr 	GXCloseBitmap
.af48	18		clc				clc
.af49	60		rts				rts
.af4a					_GXSLFail:
.af4a	38		sec				sec
.af4b	60		rts				rts
.af4c					_GXCallAcquire:
.af4c	6c e8 06	jmp ($06e8)			jmp 	(gxAcquireVector)
.af4f					GXRenderOneLine:
.af4f	20 8c b1	jsr $b18c			jsr 	GXPositionCalc 				; calculate position/offset.
.af52	ac 53 06	ldy $0653			ldy 	gsOffset 					; Y contains position.
.af55	64 3a		stz $3a				stz 	gxzTemp2 					; do size pixels
.af57					_GXROLLoop1:
.af57	ad ea 06	lda $06ea			lda 	gxScale 					; set to do 'scale' times
.af5a	85 3b		sta $3b				sta 	gxzTemp2+1
.af5c					_GXROLLoop2:
.af5c	a5 3a		lda $3a				lda 	gxzTemp2 					; get current pixel
.af5e	2c 4e 06	bit $064e			bit 	gxMode 						; check H Flip
.af61	50 06		bvc $af69			bvc 	_GXNoHFlip
.af63	ad e7 06	lda $06e7			lda 	gxMask
.af66	38		sec				sec
.af67	e5 3a		sbc $3a				sbc 	gxzTemp2
.af69					_GXNoHFlip:
.af69	aa		tax				tax 								; read from the pixel buffer
.af6a	bd f8 05	lda $05f8,x			lda 	gxPixelBuffer,x
.af6d	d0 07		bne $af76			bne 	_GXDraw 					; draw if non zero
.af6f	ad eb 06	lda $06eb			lda 	gxUseMode 					; check to see if solid background
.af72	29 04		and #$04			and 	#4
.af74	f0 0a		beq $af80			beq 	_GXZeroPixel
.af76					_GXDraw:
.af76	b1 3c		lda ($3c),y			lda 	(gxzScreen),y
.af78	2d 51 06	and $0651			and 	gxANDValue
.af7b	5d f8 05	eor $05f8,x			eor 	gxPixelBuffer,x
.af7e	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.af80					_GXZeroPixel:
.af80	c8		iny				iny 								; advance pointer
.af81	d0 05		bne $af88			bne 	_GXNoShift
.af83	e6 3d		inc $3d				inc 	gxzScreen+1 				; carry to next
.af85	20 ca ae	jsr $aeca			jsr 	GXDLTCheckWrap				; check for new page.
.af88					_GXNoShift:
.af88	c6 3b		dec $3b				dec 	gxzTemp2+1 					; do the inner loop gxScale times.
.af8a	d0 d0		bne $af5c			bne 	_GXROLLoop2
.af8c	e6 3a		inc $3a				inc 	gxzTemp2 					; next pixel.
.af8e	a5 3a		lda $3a				lda 	gxzTemp2
.af90	cd e6 06	cmp $06e6			cmp 	gxSize
.af93	d0 c2		bne $af57			bne 	_GXROLLoop1
.af95	ee 43 06	inc $0643			inc 	gxY0
.af98	60		rts				rts
.06e6					gxSize:
>06e6							.fill 	1
.06e7					gxMask:
>06e7							.fill 	1
.06e8					gxAcquireVector:
>06e8							.fill 	2
.06ea					gxScale:
>06ea							.fill 	1
.06eb					gxUseMode:
>06eb							.fill 	1
.af99					GXFontHandler:
.af99	a5 37		lda $37				lda 	gxzTemp0+1 					; eor with mode
.af9b	4d 4e 06	eor $064e			eor 	gxMode
.af9e	8d eb 06	sta $06eb			sta 	gxUseMode
.afa1	64 37		stz $37				stz 	gxzTemp0+1 					; gxzTemp0 is font #
.afa3	06 36		asl $36				asl	 	gxzTemp0 					; x 2
.afa5	26 37		rol $37				rol	 	gxzTemp0+1
.afa7	06 36		asl $36				asl	 	gxzTemp0 					; x 4
.afa9	26 37		rol $37				rol	 	gxzTemp0+1
.afab	06 36		asl $36				asl	 	gxzTemp0 					; x 8
.afad	26 37		rol $37				rol	 	gxzTemp0+1
.afaf	a5 37		lda $37				lda 	gxzTemp0+1 					; put in page C0
.afb1	09 c0		ora #$c0			ora 	#$C0
.afb3	85 37		sta $37				sta 	gxzTemp0+1
.afb5	a9 08		lda #$08			lda 	#8 							; size 8x8
.afb7	a2 bf		ldx #$bf			ldx 	#GXGetGraphicDataFont & $FF ; XY = Graphic Data retrieval routine
.afb9	a0 af		ldy #$af			ldy 	#GXGetGraphicDataFont >> 8
.afbb	20 d7 ae	jsr $aed7			jsr 	GXDrawGraphicElement
.afbe	60		rts				rts
.afbf					GXGetGraphicDataFont:
.afbf	8a		txa				txa 								; X->Y
.afc0	a8		tay				tay
.afc1	a6 01		ldx $01				ldx 	1 							; preserve old value
.afc3	a9 01		lda #$01			lda 	#1 							; access page 1 (font memory)
.afc5	85 01		sta $01				sta 	1
.afc7	b1 36		lda ($36),y			lda 	(gxzTemp0),y 				; read the font element.
.afc9	86 01		stx $01				stx 	1 							; put old value back.
.afcb	a2 00		ldx #$00			ldx 	#0 							; do 8 times
.afcd					_GXExpand:
.afcd	9e f8 05	stz $05f8,x			stz 	gxPixelBuffer,x 			; zero in pixel buffer
.afd0	0a		asl a				asl 	a 							; shift bit 7 into C
.afd1	90 08		bcc $afdb			bcc 	_GXNoPixel
.afd3	48		pha				pha 								; if set, set pixel buffer to current colour.
.afd4	ad 4f 06	lda $064f			lda 	gxColour
.afd7	9d f8 05	sta $05f8,x			sta 	gxPixelBuffer,x
.afda	68		pla				pla
.afdb					_GXNoPixel:
.afdb	e8		inx				inx 								; do the whole byte.
.afdc	e0 08		cpx #$08			cpx 	#8
.afde	d0 ed		bne $afcd			bne 	_GXExpand
.afe0	60		rts				rts
.afe1					GXSpriteHandler:
.afe1	a5 37		lda $37				lda 	gxzTemp0+1 					; eor with mode
.afe3	4d 4e 06	eor $064e			eor 	gxMode
.afe6	8d eb 06	sta $06eb			sta 	gxUseMode
.afe9	a6 36		ldx $36				ldx 	gxzTemp0 					; sprite #
.afeb	da		phx				phx
.afec	20 7c b1	jsr $b17c			jsr 	GXOpenBitmap 				; can access sprite information
.afef	68		pla				pla
.aff0	20 5d b2	jsr $b25d			jsr 	GXFindSprite 				; get the sprite address
.aff3	08		php				php
.aff4	20 84 b1	jsr $b184			jsr 	GXCloseBitmap
.aff7	28		plp				plp
.aff8	b0 0a		bcs $b004			bcs		_GXSHExit 					; exit if find failed.
.affa	ad ec 06	lda $06ec			lda 	GXSizePixels 				; return size
.affd	a2 05		ldx #$05			ldx 	#GXSpriteAcquire & $FF
.afff	a0 b0		ldy #$b0			ldy 	#GXSpriteAcquire >> 8
.b001	20 d7 ae	jsr $aed7			jsr 	GXDrawGraphicElement
.b004					_GXSHExit:
.b004	60		rts				rts
.b005					GXSpriteAcquire:
.b005	ad 4c 06	lda $064c			lda 	GXSpritePage				; point to base page
.b008	85 0b		sta $0b				sta 	GXEditSlot
.b00a	86 36		stx $36				stx 	zTemp0 						; row number x 1,2,3,4
.b00c	a9 00		lda #$00			lda 	#0
.b00e	ae ed 06	ldx $06ed			ldx 	GXSizeBits
.b011					_GXTimesRowNumber:
.b011	18		clc				clc
.b012	65 36		adc $36				adc 	zTemp0
.b014	ca		dex				dex
.b015	10 fa		bpl $b011			bpl 	_GXTimesRowNumber
.b017	64 37		stz $37				stz 	gxzTemp0+1
.b019	0a		asl a				asl 	a 							; row x 2,4,6,8
.b01a	26 37		rol $37				rol 	gxzTemp0+1
.b01c	0a		asl a				asl 	a 							; row x 4,8,12,16
.b01d	26 37		rol $37				rol 	gxzTemp0+1
.b01f	0a		asl a				asl 	a 							; row x 8,16,24,32
.b020	26 37		rol $37				rol 	gxzTemp0+1
.b022	85 36		sta $36				sta 	gxzTemp0
.b024	18		clc				clc 								; add base address.
.b025	a5 36		lda $36				lda 	gxzTemp0
.b027	6d ef 06	adc $06ef			adc 	GXSpriteOffset
.b02a	85 36		sta $36				sta 	gxzTemp0
.b02c	a5 37		lda $37				lda 	gxzTemp0+1
.b02e	6d f0 06	adc $06f0			adc 	GXSpriteOffset+1
.b031					_GXSAFindPage:
.b031	c9 20		cmp #$20			cmp 	#$20 						; on this page
.b033	90 06		bcc $b03b			bcc 	_GXSAFoundPage
.b035	e9 20		sbc #$20			sbc 	#$20 						; forward one page
.b037	e6 0b		inc $0b				inc 	GXEditSlot
.b039	80 f6		bra $b031			bra 	_GXSAFindPage
.b03b					_GXSAFoundPage:
.b03b	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; physical address of page.
.b03d	85 37		sta $37				sta 	gxzTemp0+1 					; gxzTemp0 now points to the page
.b03f	a0 00		ldy #$00			ldy 	#0
.b041					_GXSACopyLoop:
.b041	b1 36		lda ($36),y			lda 	(gxzTemp0),y
.b043	99 f8 05	sta $05f8,y			sta 	gxPixelBuffer,y
.b046	c8		iny				iny
.b047	cc ec 06	cpy $06ec			cpy 	GXSizePixels
.b04a	d0 f5		bne $b041			bne 	_GXSACopyLoop
.b04c	60		rts				rts
.b04d					GXSelect:
.b04d	ad 49 06	lda $0649			lda 	gxSpritesOn
.b050	f0 22		beq $b074			beq 	_GXSFail
.b052	a5 36		lda $36				lda 	gxzTemp0 					; illegal sprite #
.b054	c9 40		cmp #$40			cmp 	#64
.b056	b0 1c		bcs $b074			bcs 	_GXSFail
.b058	8d 54 06	sta $0654			sta 	GSCurrentSpriteID
.b05b	a4 37		ldy $37				ldy 	gxzTemp0+1 					; control value.
.b05d	a9 00		lda #$00			lda  	#0 							; multiply sprite # x 8 => A
.b05f	06 36		asl $36				asl 	gxzTemp0
.b061	06 36		asl $36				asl 	gxzTemp0
.b063	06 36		asl $36				asl 	gxzTemp0
.b065	2a		rol a				rol 	a
.b066	69 d9		adc #$d9			adc 	#$D9 						; sprite area
.b068	8d 56 06	sta $0656			sta 	GSCurrentSpriteAddr+1 		; address to GSCurrentSprite and gxzTemp
.b06b	85 37		sta $37				sta 	gxzTemp0+1
.b06d	a5 36		lda $36				lda 	gxzTemp0
.b06f	8d 55 06	sta $0655			sta 	GSCurrentSpriteAddr
.b072	18		clc				clc
.b073	60		rts				rts
.b074					_GXSFail:
.b074	38		sec				sec
.b075	60		rts				rts
.b076					GXSelectImage:
.b076	ad 49 06	lda $0649			lda 	gxSpritesOn
.b079	f0 74		beq $b0ef			beq 	_GXSIFail
.b07b	ad 56 06	lda $0656			lda 	GSCurrentSpriteAddr+1 		; check sprite selected
.b07e	f0 6f		beq $b0ef			beq 	_GXSIFail 					; (checking the MSB)
.b080	64 01		stz $01				stz 	1
.b082	a5 37		lda $37				lda 	gxzTemp0+1 					; push show/hide on the stack.
.b084	d0 6b		bne $b0f1			bne 	_GXSIHide
.b086	a5 36		lda $36				lda 	gxzTemp0 					; sprite image
.b088	48		pha				pha
.b089	20 7c b1	jsr $b17c			jsr 	GXOpenBitmap
.b08c	68		pla				pla
.b08d	20 5d b2	jsr $b25d			jsr 	GXFindSprite
.b090	b0 5a		bcs $b0ec			bcs 	_GXSICloseFail 				; no image
.b092	a0 01		ldy #$01			ldy 	#1
.b094	ad 55 06	lda $0655			lda 	GSCurrentSpriteAddr
.b097	85 36		sta $36				sta 	gxzTemp0
.b099	ad 56 06	lda $0656			lda 	GSCurrentSpriteAddr+1
.b09c	85 37		sta $37				sta 	gxzTemp0+1
.b09e	ad ef 06	lda $06ef			lda 	GXSpriteOffset
.b0a1	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.b0a3	18		clc				clc
.b0a4	ad f0 06	lda $06f0			lda 	GXSpriteOffset+1
.b0a7	6d 57 06	adc $0657			adc 	GXSpriteOffsetBase
.b0aa	c8		iny				iny
.b0ab	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.b0ad	ad 58 06	lda $0658			lda 	GXSpriteOffsetBase+1
.b0b0	69 00		adc #$00			adc 	#0
.b0b2	c8		iny				iny
.b0b3	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.b0b5	ad ed 06	lda $06ed			lda 	GXSizeBits 					; get raw size
.b0b8	49 03		eor #$03			eor 	#3 							; make it right (00=32 etc.)
.b0ba	2a		rol a				rol 	a 							; x 2
.b0bb	0a		asl a				asl 	a 							; x 4
.b0bc	0a		asl a				asl 	a 							; x 8
.b0bd	0a		asl a				asl 	a 							; x 16
.b0be	0d ee 06	ora $06ee			ora 	GXSpriteLUT 				; Or with LUT
.b0c1	0a		asl a				asl 	a 							; 1 shift
.b0c2	09 01		ora #$01			ora 	#1 							; enable sprite.
.b0c4	92 36		sta ($36)			sta 	(gxzTemp0) 					; and write back
.b0c6	20 84 b1	jsr $b184			jsr 	GXCloseBitmap
.b0c9	ae 54 06	ldx $0654			ldx 	GSCurrentSpriteID 			; point to sprite entries.
.b0cc	bd 99 06	lda $0699,x			lda 	GXSpriteHigh,x 				; clear upper two bits of size
.b0cf	29 3f		and #$3f			and 	#$3F
.b0d1	9d 99 06	sta $0699,x			sta 	GXSpriteHigh,x
.b0d4	ad ed 06	lda $06ed			lda 	GXSizeBits 					; get bit size
.b0d7	6a		ror a				ror 	a 							; shift into bits 6/7
.b0d8	6a		ror a				ror 	a
.b0d9	6a		ror a				ror 	a
.b0da	29 c0		and #$c0			and 	#$C0
.b0dc	1d 99 06	ora $0699,x			ora 	GXSpriteHigh,x 				; put in  upper 2 bits of sprite data
.b0df	9d 99 06	sta $0699,x			sta 	GXSpriteHigh,x
.b0e2	bd 59 06	lda $0659,x			lda 	GXSpriteLow,x 				; clear hidden flag.
.b0e5	29 7f		and #$7f			and 	#$7F
.b0e7	9d 59 06	sta $0659,x			sta 	GXSpriteLow,x
.b0ea	18		clc				clc
.b0eb	60		rts				rts
.b0ec					_GXSICloseFail:
.b0ec	20 84 b1	jsr $b184			jsr 	GXCloseBitmap
.b0ef					_GXSIFail:
.b0ef	38		sec				sec
.b0f0	60		rts				rts
.b0f1					_GXSIHide:
.b0f1	ad 55 06	lda $0655			lda 	GSCurrentSpriteAddr  		; get Sprite h/w address and write there
.b0f4	85 36		sta $36				sta 	gxzTemp0
.b0f6	ad 56 06	lda $0656			lda 	GSCurrentSpriteAddr+1
.b0f9	85 37		sta $37				sta 	gxzTemp0+1
.b0fb	a9 00		lda #$00			lda 	#0
.b0fd	92 36		sta ($36)			sta 	(gxzTemp0)
.b0ff	ae 54 06	ldx $0654			ldx 	GSCurrentSpriteID 			; get sprite ID
.b102	bd 59 06	lda $0659,x			lda 	GXSpriteLow,x 				; set the hidden bit.
.b105	09 80		ora #$80			ora 	#$80
.b107	9d 59 06	sta $0659,x			sta 	GXSpriteLow,x
.b10a	18		clc				clc
.b10b	60		rts				rts
.b10c					GXMoveSprite:
.b10c	ad 49 06	lda $0649			lda 	gxSpritesOn
.b10f	f0 65		beq $b176			beq 	_GXSIFail
.b111	ad 56 06	lda $0656			lda 	GSCurrentSpriteAddr+1 		; check sprite selected
.b114	f0 60		beq $b176			beq 	_GXSIFail
.b116	85 37		sta $37				sta 	gxzTemp0+1
.b118	a0 04		ldy #$04			ldy 	#4
.b11a	ad 55 06	lda $0655			lda 	GSCurrentSpriteAddr
.b11d	85 36		sta $36				sta 	gxzTemp0
.b11f	ae 54 06	ldx $0654			ldx 	GSCurrentSpriteID 			; get the size from the upper two bits
.b122	bd 99 06	lda $0699,x			lda 	GXSpriteHigh,x
.b125	2a		rol a				rol 	a	 						; into bits 0,1.
.b126	2a		rol a				rol 	a
.b127	2a		rol a				rol 	a
.b128	29 03		and #$03			and 	#3
.b12a	aa		tax				tax
.b12b	bd 78 b1	lda $b178,x			lda 	_GXMSOffset,x 				; get 32-SpriteSize/2
.b12e	48		pha				pha
.b12f	18		clc				clc
.b130	6d 41 06	adc $0641			adc 	gxX0						; copy position.
.b133	91 36		sta ($36),y			sta 	(gxzTemp0),y
.b135	c8		iny				iny
.b136	ad 42 06	lda $0642			lda 	gxX0+1
.b139	69 00		adc #$00			adc 	#0
.b13b	91 36		sta ($36),y			sta 	(gxzTemp0),y
.b13d	c8		iny				iny
.b13e	68		pla				pla
.b13f	18		clc				clc
.b140	6d 43 06	adc $0643			adc 	gxY0
.b143	91 36		sta ($36),y			sta 	(gxzTemp0),y
.b145	a9 00		lda #$00			lda 	#0
.b147	69 00		adc #$00			adc 	#0
.b149	c8		iny				iny
.b14a	91 36		sta ($36),y			sta 	(gxzTemp0),y
.b14c	4e 42 06	lsr $0642			lsr 	gxX0+1 						; divide X by 4
.b14f	6e 41 06	ror $0641			ror 	gxX0
.b152	4e 41 06	lsr $0641			lsr 	gxX0
.b155	4e 43 06	lsr $0643			lsr 	gxY0 						; divide Y by 4
.b158	4e 43 06	lsr $0643			lsr 	gxY0
.b15b	ae 54 06	ldx $0654			ldx 	GSCurrentSpriteID 			; copy X/4 and Y/4 into the status bytes
.b15e	bd 59 06	lda $0659,x			lda 	GXSpriteLow,x
.b161	29 80		and #$80			and 	#$80
.b163	0d 41 06	ora $0641			ora 	gxX0
.b166	9d 59 06	sta $0659,x			sta 	GXSpriteLow,x
.b169	bd 99 06	lda $0699,x			lda 	GXSpriteHigh,x
.b16c	29 c0		and #$c0			and 	#$C0
.b16e	0d 43 06	ora $0643			ora 	gxY0
.b171	9d 99 06	sta $0699,x			sta 	GXSpriteHigh,x
.b174	18		clc				clc
.b175	60		rts				rts
.b176					_GXSIFail:
.b176	38		sec				sec
.b177	60		rts				rts
.b178					_GXMSOffset:
>b178	1c						.byte 	32-8/2
>b179	18						.byte 	32-16/2
>b17a	14						.byte 	32-24/2
>b17b	10						.byte 	32-32/2
.b17c					GXOpenBitmap:
.b17c	78		sei				sei 								; no interrupts here
.b17d	a5 0b		lda $0b				lda 	GXEditSlot 					; Save the original LUT slot value
.b17f	8d 52 06	sta $0652			sta 	gxOriginalLUTValue
.b182	58		cli				cli
.b183	60		rts				rts
.b184					GXCloseBitmap:
.b184	78		sei				sei
.b185	ad 52 06	lda $0652			lda 	gxOriginalLUTValue 			; restore LUT slot value
.b188	85 0b		sta $0b				sta 	GXEditSlot
.b18a	58		cli				cli
.b18b	60		rts				rts
.b18c					GXPositionCalc:
.b18c	a5 36		lda $36				lda 	gxzTemp0 					; save temp memory slot
.b18e	48		pha				pha
.b18f	ad 43 06	lda $0643			lda 	GXY0 						; gxzScreen = Y0
.b192	85 3c		sta $3c				sta 	gxzScreen
.b194	64 3d		stz $3d				stz 	gxzScreen+1
.b196	06 3c		asl $3c				asl 	gxzScreen 						; gxzScreen = Y0 * 4
.b198	26 3d		rol $3d				rol 	gxzScreen+1
.b19a	06 3c		asl $3c				asl 	gxzScreen
.b19c	26 3d		rol $3d				rol 	gxzScreen+1
.b19e	18		clc				clc 								; gxzScreen = Y0 * 5, as it's still in A
.b19f	65 3c		adc $3c				adc 	gxzScreen
.b1a1	85 3c		sta $3c				sta 	gxzScreen
.b1a3	90 02		bcc $b1a7			bcc 	_GXPCNoCarry
.b1a5	e6 3d		inc $3d				inc 	gxzScreen+1
.b1a7					_GXPCNoCarry:
.b1a7	06 3c		asl $3c				asl 	gxzScreen 						; now Y0 * 10. Needs to be multiplied by another
.b1a9	26 3d		rol $3d				rol 	gxzScreen+1 					; 32. At this point the MSB contains the offset
.b1ab	a5 3d		lda $3d				lda	 	gxzScreen+1 					; so save this in zTemp0 and zero it.
.b1ad	85 36		sta $36				sta 	gxzTemp0
.b1af	64 3d		stz $3d				stz 	gxzScreen+1
.b1b1	a9 05		lda #$05			lda 	#5 							; now multiply by 32, this puts this in the range 0..8191
.b1b3					_GXPCMultiply32:
.b1b3	06 3c		asl $3c				asl 	gxzScreen
.b1b5	26 3d		rol $3d				rol 	gxzScreen+1
.b1b7	3a		dec a				dec 	a
.b1b8	d0 f9		bne $b1b3			bne 	_GXPCMultiply32
.b1ba	18		clc				clc
.b1bb	ad 41 06	lda $0641			lda 	GXX0 						; add X to this value, put the result in gsOffset, gxzScreen has to be on a page boundary
.b1be	65 3c		adc $3c				adc 	gxzScreen
.b1c0	8d 53 06	sta $0653			sta 	gsOffset
.b1c3	ad 42 06	lda $0642			lda 	GXX0+1
.b1c6	65 3d		adc $3d				adc 	gxzScreen+1
.b1c8	c9 20		cmp #$20			cmp 	#$20 						; has it overflowed into the next one ?
.b1ca	90 04		bcc $b1d0			bcc 	_GXPCNoOverflow
.b1cc	29 1f		and #$1f			and 	#$1F 						; fix it up
.b1ce	e6 36		inc $36				inc 	gxzTemp0 					; add 1 to the page number
.b1d0					_GXPCNoOverflow:
.b1d0	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; make it the address mapped in.
.b1d2	85 3d		sta $3d				sta 	gxzScreen+1
.b1d4	64 3c		stz $3c				stz 	gxzScreen
.b1d6	18		clc				clc
.b1d7	a5 36		lda $36				lda 	gxzTemp0 					; get the page number
.b1d9	6d 4b 06	adc $064b			adc 	gxBasePage 					; by adding the base page
.b1dc	85 0b		sta $0b				sta 	GXEditSlot 				; and map it into memory.
.b1de	68		pla				pla
.b1df	85 36		sta $36				sta 	gxzTemp0
.b1e1	60		rts				rts
.b1e2					GXMovePositionDown:
.b1e2	18		clc				clc 								; add 320 to offset/temp+1
.b1e3	ad 53 06	lda $0653			lda 	gsOffset
.b1e6	69 40		adc #$40			adc 	#64
.b1e8	8d 53 06	sta $0653			sta 	gsOffset
.b1eb	a5 3d		lda $3d				lda 	gxzScreen+1
.b1ed	69 01		adc #$01			adc 	#1
.b1ef	85 3d		sta $3d				sta 	gxzScreen+1
.b1f1	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page
.b1f3	90 07		bcc $b1fc			bcc 	_GXMPDExit
.b1f5	38		sec				sec  								; next page
.b1f6	e9 20		sbc #$20			sbc 	#$20
.b1f8	85 3d		sta $3d				sta 	gxzScreen+1
.b1fa	e6 0b		inc $0b				inc 	GXEditSlot
.b1fc					_GXMPDExit:
.b1fc	60		rts				rts
.b1fd					GXCollide:
.b1fd	a5 36		lda $36				lda 	gxzTemp0 					; check if sprite numbers are legal.
.b1ff	aa		tax				tax
.b200	05 37		ora $37				ora 	gxzTemp0+1
.b202	29 c0		and #$c0			and 	#$C0
.b204	38		sec				sec
.b205	d0 53		bne $b25a			bne 	_GXCollideFail 				; if either >= 64, fail.
.b207	a4 37		ldy $37				ldy 	gxzTemp0+1 					; at this point X is 1st sprite and Y is 2nd sprite.
.b209	b9 59 06	lda $0659,y			lda 	GXSpriteLow,y 				; check if either hidden bit is set
.b20c	1d 59 06	ora $0659,x			ora 	GXSpriteLow,x
.b20f	30 48		bmi $b259			bmi 	_GXOkayFail 				; if either hidden, then they cannot collide.
.b211	18		clc				clc 								; need to calculate sum of sizes.
.b212	b9 99 06	lda $0699,y			lda 	GXSpriteHigh,y
.b215	7d 99 06	adc $0699,x			adc 	GXSpriteHigh,x 				; at this point, CS, Bit 6 and 7 contain that sum.
.b218	29 c0		and #$c0			and 	#$C0 					 	; mask off
.b21a	6a		ror a				ror 	a 							; 5/6/7
.b21b	4a		lsr a				lsr 	a 							; 4/5/6
.b21c	4a		lsr a				lsr 	a 							; 3/4/5
.b21d	4a		lsr a				lsr 	a 							; 2/3/4
.b21e	18		clc				clc
.b21f	69 08		adc #$08			adc 	#$08
.b221	4a		lsr a				lsr 	a 							; adjust because all coordinates are divided by 4 to store.
.b222	4a		lsr a				lsr 	a
.b223	85 38		sta $38				sta 	gxzTemp1 					; so the difference between the centres has to be less than this.
.b225	b9 99 06	lda $0699,y			lda 	GXSpriteHigh,y 				; calculate y1-y0
.b228	29 3f		and #$3f			and 	#$3F
.b22a	85 39		sta $39				sta 	gxzTemp1+1
.b22c	38		sec				sec
.b22d	bd 99 06	lda $0699,x			lda 	GXSpriteHigh,x
.b230	29 3f		and #$3f			and 	#$3F
.b232	e5 39		sbc $39				sbc 	gxzTemp1+1
.b234	b0 03		bcs $b239			bcs 	_GXCAbs1 					; calculate |y1-y0|
.b236	49 ff		eor #$ff			eor 	#$FF
.b238	1a		inc a				inc 	a
.b239					_GXCAbs1:
.b239	c5 38		cmp $38				cmp 	gxzTemp1 					; if >= difference then no overlap
.b23b	b0 1c		bcs $b259			bcs 	_GXOkayFail
.b23d	85 39		sta $39				sta 	gxzTemp1+1 					; save |y1-y0|
.b23f	38		sec				sec 								; calculate |x1-x0|
.b240	b9 59 06	lda $0659,y			lda 	GXSpriteLow,y
.b243	fd 59 06	sbc $0659,x			sbc 	GXSpriteLow,x
.b246	b0 03		bcs $b24b			bcs 	_GXCAbs2
.b248	49 ff		eor #$ff			eor 	#$FF
.b24a	1a		inc a				inc 	a
.b24b					_GXCAbs2:
.b24b	c5 38		cmp $38				cmp 	gxzTemp1 					; if >= difference then no overlap
.b24d	b0 0a		bcs $b259			bcs 	_GXOkayFail
.b24f	c5 39		cmp $39				cmp 	gxzTemp1+1 					; is it less than the previous one.
.b251	90 02		bcc $b255			bcc 	_GXCHaveLowest
.b253	a5 39		lda $39				lda 	gxzTemp1+1 					; if not, that's the smallest difference.
.b255					_GXCHaveLowest:
.b255	0a		asl a				asl 	a 							; scale to allow for >> 2
.b256	0a		asl a				asl 	a
.b257	18		clc				clc
.b258	60		rts				rts
.b259					_GXOkayFail:
.b259	18		clc				clc
.b25a					_GXCollideFail:
.b25a	a9 ff		lda #$ff			lda 	#$FF
.b25c	60		rts				rts
.b25d					GXFindSprite:
.b25d	aa		tax				tax
.b25e	ad 4c 06	lda $064c			lda 	GXSpritePage 				; access the base page of the sprite
.b261	85 0b		sta $0b				sta 	GXEditSlot
.b263	bd 00 61	lda $6100,x			lda 	GXMappingAddress+256,x 		; check a valid sprite
.b266	1d 00 60	ora $6000,x			ora 	GXMappingAddress,x
.b269	f0 33		beq $b29e			beq 	_GXFSFail
.b26b	bd 00 61	lda $6100,x			lda 	GXMappingAddress+256,x 		; MSB
.b26e	8d f0 06	sta $06f0			sta 	GXSpriteOffset+1
.b271	bd 00 60	lda $6000,x			lda 	GXMappingAddress,x 			; LSB
.b274	48		pha				pha 								; save twice
.b275	48		pha				pha
.b276	29 03		and #$03			and 	#3 							; get sprite size
.b278	8d ed 06	sta $06ed			sta 	GXSizeBits 					; save raw (0-3)
.b27b	aa		tax				tax
.b27c	bd a0 b2	lda $b2a0,x			lda 	_GXFXSSTTable,x 			; read sprite size
.b27f	8d ec 06	sta $06ec			sta 	GXSizePixels 					; save (8/16/24/32)
.b282	68		pla				pla 								; get LUT
.b283	4a		lsr a				lsr		a
.b284	4a		lsr a				lsr		a
.b285	29 03		and #$03			and 	#3
.b287	8d ee 06	sta $06ee			sta 	GXSpriteLUT
.b28a	68		pla				pla 								; address, neeeds to be x 4
.b28b	29 f0		and #$f0			and 	#$F0
.b28d	8d ef 06	sta $06ef			sta 	GXSpriteOffset
.b290	0e ef 06	asl $06ef			asl 	GXSpriteOffset
.b293	2e f0 06	rol $06f0			rol 	GXSpriteOffset+1
.b296	0e ef 06	asl $06ef			asl 	GXSpriteOffset
.b299	2e f0 06	rol $06f0			rol 	GXSpriteOffset+1
.b29c	18		clc				clc
.b29d	60		rts				rts
.b29e					_GXFSFail:
.b29e	38		sec				sec
.b29f	60		rts				rts
.b2a0					_GXFXSSTTable:
>b2a0	08 10 18 20					.byte 	8,16,24,32
.06ec					GXSizePixels:
>06ec							.fill 	1
.06ed					GXSizeBits:
>06ed							.fill 	1
.06ee					GXSpriteLUT:
>06ee							.fill 	1
.06ef					GXSpriteOffset:
>06ef							.fill 	2
.b2a4					GXSortXY:
.b2a4	20 c2 b2	jsr $b2c2			jsr 	GXSortY 					; will be sorted on Y now
.b2a7	ad 41 06	lda $0641			lda 	gxX0 						; compare X0 v X1
.b2aa	cd 45 06	cmp $0645			cmp 	gxX1
.b2ad	ad 42 06	lda $0642			lda 	gXX0+1
.b2b0	ed 46 06	sbc $0646			sbc 	gXX1+1
.b2b3	90 0c		bcc $b2c1			bcc 	_GXSXYExit 					; X0 < X1 exit
.b2b5	a2 00		ldx #$00			ldx 	#0 							; swap them over
.b2b7	a0 04		ldy #$04			ldy 	#4
.b2b9	20 d6 b2	jsr $b2d6			jsr 	GXSwapXY
.b2bc	e8		inx				inx
.b2bd	c8		iny				iny
.b2be	20 d6 b2	jsr $b2d6			jsr 	GXSwapXY
.b2c1					_GXSXYExit:
.b2c1	60		rts				rts
.b2c2					GXSortY:
.b2c2	ad 43 06	lda $0643			lda 	gxY0 						; if Y0 >= Y1
.b2c5	cd 47 06	cmp $0647			cmp 	gxY1
.b2c8	90 0b		bcc $b2d5			bcc 	_GXSYSorted
.b2ca	a2 03		ldx #$03			ldx 	#3 							; swap 3-0
.b2cc	a0 07		ldy #$07			ldy 	#7 							; with 4-7
.b2ce					_GXSwap1:
.b2ce	20 d6 b2	jsr $b2d6			jsr 	GXSwapXY
.b2d1	88		dey				dey
.b2d2	ca		dex				dex
.b2d3	10 f9		bpl $b2ce			bpl 	_GXSwap1
.b2d5					_GXSYSorted:
.b2d5	60		rts				rts
.b2d6					GXSwapXY:
.b2d6	bd 41 06	lda $0641,x			lda 	gxX0,x
.b2d9	48		pha				pha
.b2da	b9 41 06	lda $0641,y			lda 	gxX0,y
.b2dd	9d 41 06	sta $0641,x			sta 	gxX0,x
.b2e0	68		pla				pla
.b2e1	99 41 06	sta $0641,y			sta 	gxX0,y
.b2e4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_tokeniser.module

=1					tokeniserIntegrated=1
.b7ba					KeywordSet0:
>b7ba	00 65					.text	0,$65,""               ; $80 !0:EOF
>b7bc	00 58					.text	0,$58,""               ; $81 !1:SH1
>b7be	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>b7c0	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $83 ABS(
>b7c6	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $84 ALLOC(
>b7ce	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $85 ASC(
>b7d4	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $86 CHR$(
>b7db	06 aa 45 56 45 4e 54 28			.text	6,$aa,"EVENT("         ; $87 EVENT(
>b7e3	05 6b 46 41 4c 53 45			.text	5,$6b,"FALSE"          ; $88 FALSE
>b7ea	05 44 46 52 41 43 28			.text	5,$44,"FRAC("          ; $89 FRAC(
>b7f1	04 0d 48 49 54 28			.text	4,$0d,"HIT("           ; $8a HIT(
>b7f7	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $8b INT(
>b7fd	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $8c ISVAL(
>b805	05 5c 4a 4f 59 42 28			.text	5,$5c,"JOYB("          ; $8d JOYB(
>b80c	05 72 4a 4f 59 58 28			.text	5,$72,"JOYX("          ; $8e JOYX(
>b813	05 73 4a 4f 59 59 28			.text	5,$73,"JOYY("          ; $8f JOYY(
>b81a	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $90 LEFT$(
>b822	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $91 LEN(
>b828	04 0e 4d 41 58 28			.text	4,$0e,"MAX("           ; $92 MAX(
>b82e	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $93 MID$(
>b835	04 0c 4d 49 4e 28			.text	4,$0c,"MIN("           ; $94 MIN(
>b83b	04 19 4e 4f 54 28			.text	4,$19,"NOT("           ; $95 NOT(
>b841	07 e9 52 41 4e 44 4f 4d			.text	7,$e9,"RANDOM("        ; $96 RANDOM(
>b849	28
>b84a	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $97 RIGHT$(
>b852	28
>b853	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $98 RND(
>b859	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $99 SGN(
>b85f	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $9a SPC(
>b865	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $9b STR$(
>b86c	06 a9 54 49 4d 45 52 28			.text	6,$a9,"TIMER("         ; $9c TIMER(
>b874	04 40 54 52 55 45			.text	4,$40,"TRUE"           ; $9d TRUE
>b87a	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $9e VAL(
>b880	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $9f FOR
>b885	02 8f 49 46				.text	2,$8f,"IF"             ; $a0 IF
>b889	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $a1 PROC
>b88f	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $a2 REPEAT
>b897	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $a3 WHILE
>b89e	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $a4 ENDIF
>b8a5	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $a5 ENDPROC
>b8ad	43
>b8ae	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $a6 NEXT
>b8b4	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $a7 THEN
>b8ba	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $a8 UNTIL
>b8c1	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $a9 WEND
>b8c7	02 9b 42 59				.text	2,$9b,"BY"             ; $aa BY
>b8cb	04 1c 43 41 4c 4c			.text	4,$1c,"CALL"           ; $ab CALL
>b8d1	06 b2 43 49 52 43 4c 45			.text	6,$b2,"CIRCLE"         ; $ac CIRCLE
>b8d9	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $ad CLEAR
>b8e0	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $ae CLS
>b8e5	05 7f 43 4f 4c 4f 52			.text	5,$7f,"COLOR"          ; $af COLOR
>b8ec	06 d4 43 4f 4c 4f 55 52			.text	6,$d4,"COLOUR"         ; $b0 COLOUR
>b8f4	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $b1 DATA
>b8fa	03 da 44 49 4d				.text	3,$da,"DIM"            ; $b2 DIM
>b8ff	06 db 44 4f 57 4e 54 4f			.text	6,$db,"DOWNTO"         ; $b3 DOWNTO
>b907	04 29 45 4c 53 45			.text	4,$29,"ELSE"           ; $b4 ELSE
>b90d	04 34 46 52 4f 4d			.text	4,$34,"FROM"           ; $b5 FROM
>b913	03 e5 47 46 58				.text	3,$e5,"GFX"            ; $b6 GFX
>b918	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $b7 GOSUB
>b91f	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $b8 GOTO
>b925	04 24 48 45 52 45			.text	4,$24,"HERE"           ; $b9 HERE
>b92b	05 63 49 4d 41 47 45			.text	5,$63,"IMAGE"          ; $ba IMAGE
>b932	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $bb LET
>b937	04 28 4c 49 4e 45			.text	4,$28,"LINE"           ; $bc LINE
>b93d	05 6b 4c 4f 43 41 4c			.text	5,$6b,"LOCAL"          ; $bd LOCAL
>b944	03 db 4f 46 46				.text	3,$db,"OFF"            ; $be OFF
>b949	02 9d 4f 4e				.text	2,$9d,"ON"             ; $bf ON
>b94d	07 20 4f 55 54 4c 49 4e			.text	7,$20,"OUTLINE"        ; $c0 OUTLINE
>b955	45
>b956	07 0f 50 41 4c 45 54 54			.text	7,$0f,"PALETTE"        ; $c1 PALETTE
>b95e	45
>b95f	04 3f 50 4c 4f 54			.text	4,$3f,"PLOT"           ; $c2 PLOT
>b965	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $c3 PRINT
>b96c	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $c4 READ
>b972	04 2e 52 45 43 54			.text	4,$2e,"RECT"           ; $c5 RECT
>b978	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $c6 REM
>b97d	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $c7 RETURN
>b985	05 7b 53 4f 4c 49 44			.text	5,$7b,"SOLID"          ; $c8 SOLID
>b98c	06 d7 53 50 52 49 54 45			.text	6,$d7,"SPRITE"         ; $c9 SPRITE
>b994	04 45 54 45 58 54			.text	4,$45,"TEXT"           ; $ca TEXT
>b99a	02 a3 54 4f				.text	2,$a3,"TO"             ; $cb TO
>b99e	ff					.text	$FF
.b99f					KeywordSet1:
>b99f	00 65					.text	0,$65,""               ; $80 !0:EOF
>b9a1	00 58					.text	0,$58,""               ; $81 !1:SH1
>b9a3	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>b9a5	08 4c 41 53 53 45 4d 42			.text	8,$4c,"ASSEMBLE"       ; $83 ASSEMBLE
>b9ad	4c 45
>b9af	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $84 ASSERT
>b9b7	06 bd 42 49 54 4d 41 50			.text	6,$bd,"BITMAP"         ; $85 BITMAP
>b9bf	03 d7 45 4e 44				.text	3,$d7,"END"            ; $86 END
>b9c4	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $87 LIST
>b9ca	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $88 NEW
>b9cf	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $89 RESTORE
>b9d7	45
>b9d8	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $8a RUN
>b9dd	07 2a 53 50 52 49 54 45			.text	7,$2a,"SPRITES"        ; $8b SPRITES
>b9e5	53
>b9e6	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $8c STOP
>b9ec	ff					.text	$FF
.b9ed					KeywordSet2:
>b9ed	00 65					.text	0,$65,""               ; $80 !0:EOF
>b9ef	00 58					.text	0,$58,""               ; $81 !1:SH1
>b9f1	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>b9f3	03 c8 41 44 43				.text	3,$c8,"ADC"            ; $83 ADC
>b9f8	03 d3 41 4e 44				.text	3,$d3,"AND"            ; $84 AND
>b9fd	03 e0 41 53 4c				.text	3,$e0,"ASL"            ; $85 ASL
>ba02	03 c8 42 43 43				.text	3,$c8,"BCC"            ; $86 BCC
>ba07	03 d8 42 43 53				.text	3,$d8,"BCS"            ; $87 BCS
>ba0c	03 d8 42 45 51				.text	3,$d8,"BEQ"            ; $88 BEQ
>ba11	03 df 42 49 54				.text	3,$df,"BIT"            ; $89 BIT
>ba16	03 d8 42 4d 49				.text	3,$d8,"BMI"            ; $8a BMI
>ba1b	03 d5 42 4e 45				.text	3,$d5,"BNE"            ; $8b BNE
>ba20	03 de 42 50 4c				.text	3,$de,"BPL"            ; $8c BPL
>ba25	03 d5 42 52 41				.text	3,$d5,"BRA"            ; $8d BRA
>ba2a	03 df 42 52 4b				.text	3,$df,"BRK"            ; $8e BRK
>ba2f	03 db 42 56 43				.text	3,$db,"BVC"            ; $8f BVC
>ba34	03 eb 42 56 53				.text	3,$eb,"BVS"            ; $90 BVS
>ba39	03 d2 43 4c 43				.text	3,$d2,"CLC"            ; $91 CLC
>ba3e	03 d3 43 4c 44				.text	3,$d3,"CLD"            ; $92 CLD
>ba43	03 d8 43 4c 49				.text	3,$d8,"CLI"            ; $93 CLI
>ba48	03 e5 43 4c 56				.text	3,$e5,"CLV"            ; $94 CLV
>ba4d	03 e0 43 4d 50				.text	3,$e0,"CMP"            ; $95 CMP
>ba52	03 eb 43 50 58				.text	3,$eb,"CPX"            ; $96 CPX
>ba57	03 ec 43 50 59				.text	3,$ec,"CPY"            ; $97 CPY
>ba5c	03 cc 44 45 43				.text	3,$cc,"DEC"            ; $98 DEC
>ba61	03 e1 44 45 58				.text	3,$e1,"DEX"            ; $99 DEX
>ba66	03 e2 44 45 59				.text	3,$e2,"DEY"            ; $9a DEY
>ba6b	03 e6 45 4f 52				.text	3,$e6,"EOR"            ; $9b EOR
>ba70	03 da 49 4e 43				.text	3,$da,"INC"            ; $9c INC
>ba75	03 ef 49 4e 58				.text	3,$ef,"INX"            ; $9d INX
>ba7a	03 f0 49 4e 59				.text	3,$f0,"INY"            ; $9e INY
>ba7f	03 e7 4a 4d 50				.text	3,$e7,"JMP"            ; $9f JMP
>ba84	03 ef 4a 53 52				.text	3,$ef,"JSR"            ; $a0 JSR
>ba89	03 d1 4c 44 41				.text	3,$d1,"LDA"            ; $a1 LDA
>ba8e	03 e8 4c 44 58				.text	3,$e8,"LDX"            ; $a2 LDX
>ba93	03 e9 4c 44 59				.text	3,$e9,"LDY"            ; $a3 LDY
>ba98	03 f1 4c 53 52				.text	3,$f1,"LSR"            ; $a4 LSR
>ba9d	03 ed 4e 4f 50				.text	3,$ed,"NOP"            ; $a5 NOP
>baa2	03 e2 4f 52 41				.text	3,$e2,"ORA"            ; $a6 ORA
>baa7	03 d9 50 48 41				.text	3,$d9,"PHA"            ; $a7 PHA
>baac	03 e8 50 48 50				.text	3,$e8,"PHP"            ; $a8 PHP
>bab1	03 f0 50 48 58				.text	3,$f0,"PHX"            ; $a9 PHX
>bab6	03 f1 50 48 59				.text	3,$f1,"PHY"            ; $aa PHY
>babb	03 dd 50 4c 41				.text	3,$dd,"PLA"            ; $ab PLA
>bac0	03 ec 50 4c 50				.text	3,$ec,"PLP"            ; $ac PLP
>bac5	03 f4 50 4c 58				.text	3,$f4,"PLX"            ; $ad PLX
>baca	03 f5 50 4c 59				.text	3,$f5,"PLY"            ; $ae PLY
>bacf	03 ed 52 4f 4c				.text	3,$ed,"ROL"            ; $af ROL
>bad4	03 f3 52 4f 52				.text	3,$f3,"ROR"            ; $b0 ROR
>bad9	03 ef 52 54 49				.text	3,$ef,"RTI"            ; $b1 RTI
>bade	03 f9 52 54 53				.text	3,$f9,"RTS"            ; $b2 RTS
>bae3	03 d8 53 42 43				.text	3,$d8,"SBC"            ; $b3 SBC
>bae8	03 db 53 45 43				.text	3,$db,"SEC"            ; $b4 SEC
>baed	03 dc 53 45 44				.text	3,$dc,"SED"            ; $b5 SED
>baf2	03 e1 53 45 49				.text	3,$e1,"SEI"            ; $b6 SEI
>baf7	03 e8 53 54 41				.text	3,$e8,"STA"            ; $b7 STA
>bafc	03 f7 53 54 50				.text	3,$f7,"STP"            ; $b8 STP
>bb01	03 ff 53 54 58				.text	3,$ff,"STX"            ; $b9 STX
>bb06	03 00 53 54 59				.text	3,$00,"STY"            ; $ba STY
>bb0b	03 01 53 54 5a				.text	3,$01,"STZ"            ; $bb STZ
>bb10	03 ed 54 41 58				.text	3,$ed,"TAX"            ; $bc TAX
>bb15	03 ee 54 41 59				.text	3,$ee,"TAY"            ; $bd TAY
>bb1a	03 e8 54 52 42				.text	3,$e8,"TRB"            ; $be TRB
>bb1f	03 e9 54 53 42				.text	3,$e9,"TSB"            ; $bf TSB
>bb24	03 ff 54 53 58				.text	3,$ff,"TSX"            ; $c0 TSX
>bb29	03 ed 54 58 41				.text	3,$ed,"TXA"            ; $c1 TXA
>bb2e	03 ff 54 58 53				.text	3,$ff,"TXS"            ; $c2 TXS
>bb33	03 ee 54 59 41				.text	3,$ee,"TYA"            ; $c3 TYA
>bb38	ff					.text	$FF
.b2e5					ListConvertLine:
.b2e5	9c 9d 04	stz $049d			stz 	tbOffset
.b2e8	9c aa 04	stz $04aa			stz 	tokenBuffer
.b2eb	a0 02		ldy #$02			ldy 	#2 							; convert line number to string
.b2ed	b1 30		lda ($30),y			lda 	(codePtr),y
.b2ef	aa		tax				tax
.b2f0	88		dey				dey
.b2f1	b1 30		lda ($30),y			lda 	(codePtr),y
.b2f3	20 47 92	jsr $9247			jsr 	ConvertInt16
.b2f6	85 36		sta $36				sta 	zTemp0 						; copy number into buffer
.b2f8	86 37		stx $37				stx 	zTemp0+1
.b2fa	a0 00		ldy #$00			ldy 	#0
.b2fc					_LCCopyNumber:
.b2fc	b1 36		lda ($36),y			lda 	(zTemp0),y
.b2fe	20 2a b4	jsr $b42a			jsr 	LCLWrite
.b301	c8		iny				iny
.b302	b1 36		lda ($36),y			lda 	(zTemp0),y
.b304	d0 f6		bne $b2fc			bne 	_LCCopyNumber
.b306	20 da 8c	jsr $8cda			jsr 	ScanGetCurrentLineStep 		; adjustment to indent
.b309	48		pha				pha 								; save on stack
.b30a	10 0c		bpl $b318			bpl 	_LCNoAdjust 				; don't adjust indent if +ve, do after.
.b30c	18		clc				clc 								; add to list indent and make 0 if goes -ve.
.b30d	6d a6 04	adc $04a6			adc 	listIndent
.b310	8d a6 04	sta $04a6			sta 	listIndent
.b313	10 03		bpl $b318			bpl 	_LCNoAdjust
.b315	9c a6 04	stz $04a6			stz 	listIndent
.b318					_LCNoAdjust:
.b318	18		clc				clc		 							; work out actual indent.
.b319	ad a6 04	lda $04a6			lda 	listIndent
.b31c	0a		asl a				asl 	a
.b31d	69 06		adc #$06			adc 	#6
.b31f	85 36		sta $36				sta 	zTemp0
.b321					_LCPadOut:
.b321	a9 20		lda #$20			lda 	#' '						; pad out to 6 characters
.b323	20 2a b4	jsr $b42a			jsr 	LCLWrite
.b326	ad 9d 04	lda $049d			lda 	tbOffset
.b329	c5 36		cmp $36				cmp 	zTemp0
.b32b	d0 f4		bne $b321			bne 	_LCPadOut
.b32d	a0 03		ldy #$03			ldy 	#3 							; start position.
.b32f					_LCMainLoop:
.b32f	b1 30		lda ($30),y			lda 	(codePtr),y
.b331	c9 80		cmp #$80			cmp 	#KWC_EOL 					; end of line ?
.b333	f0 17		beq $b34c			beq 	_LCExit
.b335	c9 10		cmp #$10			cmp 	#16 						; 0-5 are the double punctuations
.b337	90 1e		bcc $b357			bcc 	_LCDoubles
.b339	c9 20		cmp #$20			cmp 	#32 						; 16-31 are shifted punctuation from 64-91
.b33b	90 2a		bcc $b367			bcc 	_LCShiftPunc
.b33d	c9 40		cmp #$40			cmp 	#64 						; 32-64 are as stored, punc and digits
.b33f	90 35		bcc $b376			bcc 	_LCPunctuation
.b341	c9 80		cmp #$80			cmp 	#128 						; 64-127 are variable identifiers.
.b343	90 3e		bcc $b383			bcc 	_LCIdentifiers
.b345	c9 fe		cmp #$fe			cmp 	#254 						; 128-253 are tokenised words
.b347	90 5a		bcc $b3a3			bcc 	_LCTokens
.b349	4c fe b3	jmp $b3fe			jmp 	_LCData 					; 254-5 are data objects
.b34c					_LCExit:
.b34c	68		pla				pla 								; get old indent adjust
.b34d	30 07		bmi $b356			bmi 	_LCExit2
.b34f	18		clc				clc 								; add to indent if +ve
.b350	6d a6 04	adc $04a6			adc 	listIndent
.b353	8d a6 04	sta $04a6			sta 	listIndent
.b356					_LCExit2:
.b356	60		rts				rts
.b357					_LCDoubles:
.b357	48		pha				pha
.b358	4a		lsr a				lsr 	a 							; put bit 2 into bit 1
.b359	29 02		and #$02			and 	#2
.b35b	09 3c		ora #$3c			ora 	#60 						; make < >
.b35d	20 2a b4	jsr $b42a			jsr 	LCLWrite
.b360	68		pla				pla 								; restore, do lower bit
.b361	29 03		and #$03			and 	#3
.b363	09 3c		ora #$3c			ora 	#60
.b365	80 0f		bra $b376			bra		_LCPunctuation 				; print, increment, loop
.b367					_LCShiftPunc:
.b367	aa		tax				tax 								; save in X
.b368	29 07		and #$07			and 	#7 							; lower 3 bits
.b36a	f0 02		beq $b36e			beq 	_LCNoAdd
.b36c	09 18		ora #$18			ora 	#24 						; adds $18 to it.
.b36e					_LCNoAdd:
.b36e	e0 18		cpx #$18			cpx 	#24 						; if >= 24 add $20
.b370	90 02		bcc $b374			bcc 	_LCNoAdd2
.b372	09 20		ora #$20			ora 	#32 						; adds $20
.b374					_LCNoAdd2:
.b374	09 40		ora #$40			ora 	#$40 						; shift into 64-127 range and fall through.
.b376					_LCPunctuation:
.b376	c9 3a		cmp #$3a			cmp 	#':' 						; check if :
.b378	d0 03		bne $b37d			bne 	_LCPContinue
.b37a	20 39 b4	jsr $b439			jsr 	LCDeleteLastSpace
.b37d					_LCPContinue:
.b37d	c8		iny				iny 								; consume character
.b37e	20 2a b4	jsr $b42a			jsr 	LCLWrite 					; write it out.
.b381	80 ac		bra $b32f			bra 	_LCMainLoop 				; go round again.
.b383					_LCIdentifiers:
.b383	18		clc				clc 								; convert to physical address
.b384	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.b386	85 37		sta $37				sta 	zTemp0+1
.b388	c8		iny				iny
.b389	b1 30		lda ($30),y			lda 	(codePtr),y
.b38b	85 36		sta $36				sta 	zTemp0
.b38d	c8		iny				iny
.b38e	5a		phy				phy 								; save position
.b38f	a0 07		ldy #$07			ldy 	#7 							; output the identifier.
.b391					_LCOutIdentifier:
.b391	c8		iny				iny
.b392	b1 36		lda ($36),y			lda 	(zTemp0),y
.b394	29 7f		and #$7f			and 	#$7F
.b396	20 78 b4	jsr $b478			jsr 	LCLLowerCase
.b399	20 2a b4	jsr $b42a			jsr 	LCLWrite
.b39c	b1 36		lda ($36),y			lda 	(zTemp0),y				 	; ends when bit 7 set.
.b39e	10 f1		bpl $b391			bpl 	_LCOutIdentifier
.b3a0	7a		ply				ply 								; restore position
.b3a1	80 8c		bra $b32f			bra 	_LCMainLoop
.b3a3					_LCTokens:
.b3a3	aa		tax				tax 								; token in X
.b3a4	a9 ed		lda #$ed			lda 	#((KeywordSet2) & $FF)
.b3a6	85 36		sta $36				sta 	0+zTemp0
.b3a8	a9 b9		lda #$b9			lda 	#((KeywordSet2) >> 8)
.b3aa	85 37		sta $37				sta 	1+zTemp0
.b3ac	e0 82		cpx #$82			cpx 	#$82
.b3ae	f0 16		beq $b3c6			beq 	_LCUseShift
.b3b0	a9 9f		lda #$9f			lda 	#((KeywordSet1) & $FF)
.b3b2	85 36		sta $36				sta 	0+zTemp0
.b3b4	a9 b9		lda #$b9			lda 	#((KeywordSet1) >> 8)
.b3b6	85 37		sta $37				sta 	1+zTemp0
.b3b8	e0 81		cpx #$81			cpx 	#$81
.b3ba	f0 0a		beq $b3c6			beq 	_LCUseShift
.b3bc	a9 ba		lda #$ba			lda 	#((KeywordSet0) & $FF)
.b3be	85 36		sta $36				sta 	0+zTemp0
.b3c0	a9 b7		lda #$b7			lda 	#((KeywordSet0) >> 8)
.b3c2	85 37		sta $37				sta 	1+zTemp0
.b3c4	80 01		bra $b3c7			bra 	_LCNoShift
.b3c6					_LCUseShift:
.b3c6	c8		iny				iny
.b3c7					_LCNoShift:
.b3c7	20 4d b4	jsr $b44d			jsr 	LCCheckSpaceRequired 		; do we need a space ?
.b3ca	b1 30		lda ($30),y			lda 	(codePtr),y
.b3cc	aa		tax				tax 								; into X
.b3cd					_LCFindText:
.b3cd	ca		dex				dex
.b3ce	10 0e		bpl $b3de			bpl 	_LCFoundText 				; found text.
.b3d0	b2 36		lda ($36)			lda 	(zTemp0) 					; length of text
.b3d2	1a		inc a				inc 	a 							; one extra for size
.b3d3	38		sec				sec 								; one extra for checksum
.b3d4	65 36		adc $36				adc 	zTemp0 						; go to next token
.b3d6	85 36		sta $36				sta 	zTemp0
.b3d8	90 f3		bcc $b3cd			bcc 	_LCFindText
.b3da	e6 37		inc $37				inc 	zTemp0+1
.b3dc	80 ef		bra $b3cd			bra 	_LCFindText
.b3de					_LCFoundText:
.b3de	5a		phy				phy 								; save List position
.b3df	b2 36		lda ($36)			lda 	(zTemp0)					; count to print
.b3e1	aa		tax				tax
.b3e2	a0 02		ldy #$02			ldy 	#2
.b3e4					_LCCopyToken:
.b3e4	b1 36		lda ($36),y			lda 	(zTemp0),y
.b3e6	20 78 b4	jsr $b478			jsr 	LCLLowerCase
.b3e9	20 2a b4	jsr $b42a			jsr 	LCLWrite
.b3ec	c8		iny				iny
.b3ed	ca		dex				dex
.b3ee	d0 f4		bne $b3e4			bne 	_LCCopyToken
.b3f0	c9 28		cmp #$28			cmp 	#"(" 						; if last char not ( print a space
.b3f2	f0 05		beq $b3f9			beq 	_LCNoSpace
.b3f4	a9 20		lda #$20			lda 	#' '
.b3f6	20 2a b4	jsr $b42a			jsr 	LCLWrite
.b3f9					_LCNoSpace:
.b3f9	7a		ply				ply 								; restore position.
.b3fa	c8		iny				iny 								; consume token
.b3fb	4c 2f b3	jmp $b32f			jmp 	_LCMainLoop 				; and go around again.
.b3fe					_LCData:
.b3fe	48		pha				pha 								; save type $FE/$FF
.b3ff	a2 24		ldx #$24			ldx 	#'$' 						; figure out $ or "
.b401	c9 fe		cmp #$fe			cmp 	#$FE
.b403	f0 02		beq $b407			beq 	_LCHaveOpener
.b405	a2 22		ldx #$22			ldx 	#'"'
.b407					_LCHaveOpener:
.b407	8a		txa				txa 								; output prefix (# or ")
.b408	20 2a b4	jsr $b42a			jsr 	LCLWrite
.b40b	c8		iny				iny 								; get count
.b40c	b1 30		lda ($30),y			lda 	(codePtr),y
.b40e	aa		tax				tax
.b40f	c8		iny				iny 								; point at first character
.b410					_LCOutData:
.b410	b1 30		lda ($30),y			lda 	(codePtr),y
.b412	c9 00		cmp #$00			cmp 	#0
.b414	f0 03		beq $b419			beq 	_LCNoPrint
.b416	20 2a b4	jsr $b42a			jsr 	LCLWrite
.b419					_LCNoPrint:
.b419	c8		iny				iny
.b41a	ca		dex				dex
.b41b	d0 f3		bne $b410			bne 	_LCOutData
.b41d	68		pla				pla 								; closing " required ?
.b41e	c9 ff		cmp #$ff			cmp 	#$FF
.b420	d0 05		bne $b427			bne 	_LCNoQuote
.b422	a9 22		lda #$22			lda 	#'"'
.b424	20 2a b4	jsr $b42a			jsr 	LCLWrite
.b427					_LCNoQuote:
.b427	4c 2f b3	jmp $b32f			jmp 	_LCMainLoop
.b42a					LCLWrite:
.b42a	da		phx				phx
.b42b	ae 9d 04	ldx $049d			ldx 	tbOffset
.b42e	9d aa 04	sta $04aa,x			sta 	tokenBuffer,x
.b431	9e ab 04	stz $04ab,x			stz 	tokenBuffer+1,x
.b434	ee 9d 04	inc $049d			inc 	tbOffset
.b437	fa		plx				plx
.b438	60		rts				rts
.b439					LCDeleteLastSpace:
.b439	48		pha				pha
.b43a	da		phx				phx
.b43b	ae 9d 04	ldx $049d			ldx 	tbOffset
.b43e	f0 0a		beq $b44a			beq 	_LCDLSExit
.b440	bd a9 04	lda $04a9,x			lda 	tokenBuffer-1,x
.b443	c9 20		cmp #$20			cmp 	#' '
.b445	d0 03		bne $b44a			bne 	_LCDLSExit
.b447	ce 9d 04	dec $049d			dec 	tbOffset
.b44a					_LCDLSExit:
.b44a	fa		plx				plx
.b44b	68		pla				pla
.b44c	60		rts				rts
.b44d					LCCheckSpaceRequired:
.b44d	ae 9d 04	ldx $049d			ldx 	tbOffset
.b450	bd a9 04	lda $04a9,x			lda 	tokenBuffer-1,x 			; previous character
.b453	c9 24		cmp #$24			cmp 	#'$' 						; $ # and ) require that token space.
.b455	f0 1b		beq $b472			beq 	_LCCSRSpace
.b457	c9 29		cmp #$29			cmp 	#')'
.b459	f0 17		beq $b472			beq 	_LCCSRSpace
.b45b	c9 23		cmp #$23			cmp 	#'#'
.b45d	f0 13		beq $b472			beq 	_LCCSRSpace
.b45f	20 78 b4	jsr $b478			jsr 	LCLLowerCase 				; saves a little effort
.b462	c9 30		cmp #$30			cmp 	#"0" 						; check if it was 0-9 A-Z a-z if so need space.
.b464	90 11		bcc $b477			bcc 	_LCCSRExit
.b466	c9 3a		cmp #$3a			cmp 	#"9"+1
.b468	90 08		bcc $b472			bcc 	_LCCSRSpace
.b46a	c9 61		cmp #$61			cmp 	#"a"
.b46c	90 09		bcc $b477			bcc 	_LCCSRExit
.b46e	c9 7b		cmp #$7b			cmp 	#"z"+1
.b470	b0 05		bcs $b477			bcs 	_LCCSRExit
.b472					_LCCSRSpace:
.b472	a9 20		lda #$20			lda 	#' '
.b474	20 2a b4	jsr $b42a			jsr 	LCLWrite
.b477					_LCCSRExit:
.b477	60		rts				rts
.b478					LCLLowerCase:
.b478	c9 41		cmp #$41			cmp 	#"A"
.b47a	90 06		bcc $b482			bcc 	_LCLLCOut
.b47c	c9 5b		cmp #$5b			cmp 	#"Z"+1
.b47e	b0 02		bcs $b482			bcs 	_LCLLCOut
.b480	69 20		adc #$20			adc 	#$20
.b482					_LCLLCOut:
.b482	60		rts				rts
.b483					LCLUpperCase:
.b483	c9 61		cmp #$61			cmp 	#"a"
.b485	90 06		bcc $b48d			bcc 	_LCLUCOut
.b487	c9 7b		cmp #$7b			cmp 	#"z"+1
.b489	b0 02		bcs $b48d			bcs 	_LCLUCOut
.b48b	e9 1f		sbc #$1f			sbc 	#$1F
.b48d					_LCLUCOut:
.b48d	60		rts				rts
.b48e					TokeniseSearchTable:
.b48e	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token.
.b490	85 36		sta $36				sta 	zTemp0
.b492	a0 00		ldy #$00			ldy 	#0
.b494	a9 80		lda #$80			lda 	#$80 						; token #
.b496	85 38		sta $38				sta 	zTemp1
.b498					_TSTLoop:
.b498	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.b49a	30 49		bmi $b4e5			bmi 	_TSTFail 					; -ve = end of table
.b49c	f0 2e		beq $b4cc			beq 	_TSTNext 					; zero, check next it's a dummy
.b49e	c8		iny				iny 								; get the hash
.b49f	b1 36		lda ($36),y			lda 	(zTemp0),y
.b4a1	88		dey				dey
.b4a2	cd 83 04	cmp $0483			cmp 	identHash 					; check they match, if not go to next
.b4a5	d0 25		bne $b4cc			bne 	_TSTNext
.b4a7	ad 82 04	lda $0482			lda 	identTypeEnd 				; length of identifier
.b4aa	38		sec				sec
.b4ab	ed 80 04	sbc $0480			sbc 	identStart
.b4ae	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; no match, then return.
.b4b0	d0 1a		bne $b4cc			bne 	_TSTNext
.b4b2	5a		phy				phy 								; save Y , we might fail
.b4b3	c8		iny				iny 								; point to text
.b4b4	c8		iny				iny
.b4b5	ae 80 04	ldx $0480			ldx 	identStart 					; offset in line buffer in X
.b4b8					_TSTCompareName:
.b4b8	bd a7 05	lda $05a7,x			lda 	lineBuffer,x 				; compare text.
.b4bb	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.b4bd	d0 0c		bne $b4cb			bne 	_TSTNextPullY 				; fail, pullY and do next
.b4bf	e8		inx				inx
.b4c0	c8		iny				iny
.b4c1	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; complete match.
.b4c4	d0 f2		bne $b4b8			bne 	_TSTCompareName
.b4c6	7a		ply				ply 								; throw Y
.b4c7	a5 38		lda $38				lda 	zTemp1 						; get token #
.b4c9	38		sec				sec 								; return with CS = passed.
.b4ca	60		rts				rts
.b4cb					_TSTNextPullY:
.b4cb	7a		ply				ply 								; restore current, fall through.
.b4cc					_TSTNext:
.b4cc	e6 38		inc $38				inc 	zTemp1 						; token counter
.b4ce	98		tya				tya
.b4cf	18		clc				clc
.b4d0	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.b4d2	1a		inc a				inc 	a 							; +1
.b4d3	1a		inc a				inc 	a 							; +2
.b4d4	a8		tay				tay
.b4d5	10 c1		bpl $b498			bpl 	_TSTLoop 					; if Y < $80 loop back
.b4d7	98		tya				tya 								; add Y to zTemp0 and reset Y
.b4d8	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.b4da	18		clc				clc  								; but have tables > 255 bytes
.b4db	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.b4dd	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.b4df	90 b7		bcc $b498			bcc 	_TSTLoop
.b4e1	e6 37		inc $37				inc 	zTemp0+1
.b4e3	80 b3		bra $b498			bra 	_TSTLoop
.b4e5					_TSTFail:
.b4e5	18		clc				clc
.b4e6	60		rts				rts
.b4e7					TokeniseLine:
.b4e7	20 6f b6	jsr $b66f			jsr 	FixLineBufferCase 			; fix line case
.b4ea	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.b4ec	8d a7 04	sta $04a7			sta 	tokenOffset
.b4ef	9c a8 04	stz $04a8			stz 	tokenLineNumber
.b4f2	9c a9 04	stz $04a9			stz 	tokenLineNumber+1
.b4f5	a2 ff		ldx #$ff			ldx 	#$FF
.b4f7					_TKFindFirst:
.b4f7	e8		inx				inx
.b4f8	bd a7 05	lda $05a7,x			lda 	lineBuffer,x
.b4fb	f0 79		beq $b576			beq 	_TKExit
.b4fd	c9 20		cmp #$20			cmp 	#' '
.b4ff	90 f6		bcc $b4f7			bcc 	_TKFindFirst
.b501	c9 30		cmp #$30			cmp 	#'0'
.b503	90 07		bcc $b50c			bcc 	_TKNoLineNumber
.b505	c9 3a		cmp #$3a			cmp 	#'9'+1
.b507	b0 03		bcs $b50c			bcs 	_TKNoLineNumber
.b509	20 99 b6	jsr $b699			jsr 	TokeniseExtractLineNumber
.b50c					_TKNoLineNumber:
.b50c					_TKTokeniseLoop:
.b50c	bd a7 05	lda $05a7,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.b50f	f0 65		beq $b576			beq 	_TKExit
.b511	e8		inx				inx
.b512	c9 20		cmp #$20			cmp 	#' '
.b514	f0 f6		beq $b50c			beq 	_TKTokeniseLoop 			; keep looping if space found.
.b516	ca		dex				dex 								; undo last get, A contains character, X is position.
.b517	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.b519	f0 61		beq $b57c			beq 	_TKTokeniseIdentifier
.b51b	c9 41		cmp #$41			cmp 	#'A'
.b51d	90 04		bcc $b523			bcc 	_TKTokenisePunctuation
.b51f	c9 5b		cmp #$5b			cmp 	#'Z'+1
.b521	90 59		bcc $b57c			bcc 	_TKTokeniseIdentifier
.b523					_TKTokenisePunctuation:
.b523	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.b525	f0 27		beq $b54e			beq 	_TKString
.b527	c9 24		cmp #$24			cmp 	#'$'						; hexadecimal constant (# only appears at end of identifiers)
.b529	f0 28		beq $b553			beq 	_TKHexConstant
.b52b	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers.
.b52d	f0 29		beq $b558			beq 	_TKCheckDouble
.b52f	c9 3e		cmp #$3e			cmp 	#'>'
.b531	f0 25		beq $b558			beq 	_TKCheckDouble
.b533					_TKStandardPunctuation:
.b533	bd a7 05	lda $05a7,x			lda 	lineBuffer,x 				; get it back.
.b536	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.b538	90 0e		bcc $b548			bcc 	_TKNoShift
.b53a	48		pha				pha 								; save
.b53b	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.b53d	85 36		sta $36				sta 	zTemp0
.b53f	68		pla				pla
.b540	29 20		and #$20			and 	#32 						; bit 5
.b542	4a		lsr a				lsr 	a 							; shift into bit 3
.b543	4a		lsr a				lsr 	a
.b544	05 36		ora $36				ora 	zTemp0
.b546	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.b548					_TKNoShift:
.b548	20 de b6	jsr $b6de			jsr 	TokeniseWriteByte 			; write the punctuation character
.b54b	e8		inx				inx 								; consume the character
.b54c	80 be		bra $b50c			bra 	_TKTokeniseLoop 			; and loop round again.
.b54e					_TKString:
.b54e	20 fe b5	jsr $b5fe			jsr 	TokeniseString
.b551	80 b9		bra $b50c			bra 	_TKTokeniseLoop
.b553					_TKHexConstant:
.b553	20 39 b6	jsr $b639			jsr 	TokeniseHexConstant
.b556	80 b4		bra $b50c			bra 	_TKTokeniseLoop
.b558					_TKCheckDouble:
.b558	bd a8 05	lda $05a8,x			lda 	lineBuffer+1,x 				; get next character
.b55b	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.b55d	90 d4		bcc $b533			bcc 	_TKStandardPunctuation
.b55f	c9 3f		cmp #$3f			cmp 	#'>'+1
.b561	b0 d0		bcs $b533			bcs 	_TKStandardPunctuation
.b563	bd a7 05	lda $05a7,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.b566	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.b568	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.b569	7d a8 05	adc $05a8,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.b56c	38		sec				sec
.b56d	e9 3c		sbc #$3c			sbc 	#'<'
.b56f	20 de b6	jsr $b6de			jsr 	TokeniseWriteByte 			; this is in the range 0-7
.b572	e8		inx				inx 								; consume both
.b573	e8		inx				inx
.b574	80 96		bra $b50c			bra 	_TKTokeniseLoop
.b576	a9 80		lda #$80	_TKExit:lda 	#KWC_EOL 					; write end of line byte
.b578	20 de b6	jsr $b6de			jsr 	TokeniseWriteByte
.b57b	60		rts				rts
.b57c					_TKTokeniseIdentifier:
.b57c	8e 80 04	stx $0480			stx 	identStart 					; save start
.b57f	9c 84 04	stz $0484			stz 	identTypeByte 				; zero the type byte
.b582					_TKCheckLoop:
.b582	e8		inx				inx 								; look at next, we know first is identifier.
.b583	bd a7 05	lda $05a7,x			lda  	lineBuffer,x
.b586	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.b588	f0 f8		beq $b582			beq 	_TKCheckLoop
.b58a	c9 30		cmp #$30			cmp	 	#"0"
.b58c	90 0c		bcc $b59a			bcc 	_TKEndIdentifier
.b58e	c9 3a		cmp #$3a			cmp 	#"9"+1
.b590	90 f0		bcc $b582			bcc 	_TKCheckLoop
.b592	c9 41		cmp #$41			cmp	 	#"A"
.b594	90 04		bcc $b59a			bcc 	_TKEndIdentifier
.b596	c9 5b		cmp #$5b			cmp 	#"Z"+1
.b598	90 e8		bcc $b582			bcc 	_TKCheckLoop
.b59a					_TKEndIdentifier:
.b59a	8e 81 04	stx $0481			stx 	identTypeStart 				; save start of type text (if any !)
.b59d	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.b59f	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.b5a1	f0 06		beq $b5a9			beq 	_TKHasTypeCharacter
.b5a3	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.b5a5	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.b5a7	d0 07		bne $b5b0			bne 	_TKNoTypeCharacter
.b5a9					_TKHasTypeCharacter:
.b5a9	8c 84 04	sty $0484			sty 	identTypeByte 				; has # or $, save the type
.b5ac	e8		inx				inx 								; read next
.b5ad	bd a7 05	lda $05a7,x			lda 	lineBuffer,x
.b5b0					_TKNoTypeCharacter:
.b5b0	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.b5b2	d0 09		bne $b5bd			bne 	_TKNoArray
.b5b4	e8		inx				inx 								; skip the (
.b5b5	ad 84 04	lda $0484			lda 	identTypeByte 				; set bit 2 (e.g. array)
.b5b8	09 04		ora #$04			ora 	#$04
.b5ba	8d 84 04	sta $0484			sta 	identTypeByte
.b5bd					_TKNoArray:
.b5bd	8e 82 04	stx $0482			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.b5c0	20 5a b6	jsr $b65a			jsr 	TokeniseCalculateHash 		; calculate the has for those tokens
.b5c3	a0 b7		ldy #$b7			ldy 	#(KeywordSet0) >> 8
.b5c5	a9 ba		lda #$ba			lda 	#(KeywordSet0) & $FF
.b5c7	20 8e b4	jsr $b48e			jsr 	TokeniseSearchTable
.b5ca	a2 00		ldx #$00			ldx 	#0
.b5cc	b0 1f		bcs $b5ed			bcs 	_TKFoundToken
.b5ce	a0 b9		ldy #$b9			ldy 	#(KeywordSet1) >> 8
.b5d0	a9 9f		lda #$9f			lda 	#(KeywordSet1) & $FF
.b5d2	20 8e b4	jsr $b48e			jsr 	TokeniseSearchTable
.b5d5	a2 81		ldx #$81			ldx 	#$81
.b5d7	b0 14		bcs $b5ed			bcs 	_TKFoundToken
.b5d9	a0 b9		ldy #$b9			ldy 	#(KeywordSet2) >> 8
.b5db	a9 ed		lda #$ed			lda 	#(KeywordSet2) & $FF
.b5dd	20 8e b4	jsr $b48e			jsr 	TokeniseSearchTable
.b5e0	a2 82		ldx #$82			ldx 	#$82
.b5e2	b0 09		bcs $b5ed			bcs 	_TKFoundToken
.b5e4	20 ea b6	jsr $b6ea			jsr 	CheckCreateVariableRecord 	; failed all, it's a variable, create record if does not exist.
.b5e7	ae 82 04	ldx $0482			ldx 	identTypeEnd 				; X points to following byte
.b5ea	4c 0c b5	jmp $b50c			jmp 	_TKTokeniseLoop 			; and go round again.
.b5ed					_TKFoundToken:
.b5ed	48		pha				pha 								; save token
.b5ee	8a		txa				txa 								; shift in X, is there one ?
.b5ef	f0 03		beq $b5f4			beq 	_TKNoTShift
.b5f1	20 de b6	jsr $b6de			jsr 	TokeniseWriteByte 			; if so, write it out
.b5f4					_TKNoTShift:
.b5f4	68		pla				pla 								; restore and write token
.b5f5	20 de b6	jsr $b6de			jsr 	TokeniseWriteByte
.b5f8	ae 82 04	ldx $0482			ldx 	identTypeEnd 				; X points to following byte
.b5fb	4c 0c b5	jmp $b50c			jmp 	_TKTokeniseLoop 			; and go round again.
.b5fe					TokeniseString:
.b5fe	a9 ff		lda #$ff			lda 	#KWC_STRING 				; string token.
.b600	20 de b6	jsr $b6de			jsr 	TokeniseWriteByte
.b603	e8		inx				inx									; start of quoted string.
.b604	da		phx				phx 								; push start of string on top
.b605	ca		dex				dex
.b606					_TSFindEnd:
.b606	e8		inx				inx
.b607	bd a7 05	lda $05a7,x			lda 	lineBuffer,x 				; next character
.b60a	f0 04		beq $b610			beq 	_TSEndOfString
.b60c	c9 22		cmp #$22			cmp 	#'"'
.b60e	d0 f6		bne $b606			bne 	_TSFindEnd
.b610					_TSEndOfString:
.b610	7a		ply				ply  								; so now Y is first character, X is character after end.
.b611	48		pha				pha 								; save terminating character
.b612	20 1a b6	jsr $b61a			jsr 	TOWriteBlockXY 				; write X to Y as a data block
.b615	68		pla				pla 								; terminating character
.b616	f0 01		beq $b619			beq 	_TSNotQuote					; if it wasn't EOS skip it
.b618	e8		inx				inx
.b619					_TSNotQuote:
.b619	60		rts				rts
.b61a					TOWriteBlockXY:
.b61a	86 36		stx $36				stx 	zTemp0 						; write end character
.b61c	98		tya				tya
.b61d	49 ff		eor #$ff			eor 	#$FF
.b61f	38		sec				sec
.b620	65 36		adc $36				adc 	zTemp0
.b622	1a		inc a				inc 	a 							; one extra for NULL
.b623	20 de b6	jsr $b6de			jsr 	TokeniseWriteByte
.b626					_TOBlockLoop:
.b626	c4 36		cpy $36				cpy 	zTemp0
.b628	f0 09		beq $b633			beq 	_TOBlockExit
.b62a	b9 a7 05	lda $05a7,y			lda 	lineBuffer,y
.b62d	20 de b6	jsr $b6de			jsr 	TokeniseWriteByte
.b630	c8		iny				iny
.b631	80 f3		bra $b626			bra 	_TOBlockLoop
.b633					_TOBlockExit:
.b633	a9 00		lda #$00			lda 	#0
.b635	20 de b6	jsr $b6de			jsr 	TokeniseWriteByte
.b638	60		rts				rts
.b639					TokeniseHexConstant:
.b639	a9 fe		lda #$fe			lda 	#KWC_HEXCONST 				; hex constant token.
.b63b	20 de b6	jsr $b6de			jsr 	TokeniseWriteByte
.b63e	e8		inx				inx									; start of quoted string.
.b63f	da		phx				phx 								; push start of constant on top
.b640	ca		dex				dex
.b641					_THFindLoop:
.b641	e8		inx				inx
.b642	bd a7 05	lda $05a7,x			lda 	lineBuffer,x
.b645	c9 30		cmp #$30			cmp 	#"0"
.b647	90 0c		bcc $b655			bcc 	_THFoundEnd
.b649	c9 3a		cmp #$3a			cmp 	#"9"+1
.b64b	90 f4		bcc $b641			bcc 	_THFindLoop
.b64d	c9 41		cmp #$41			cmp 	#"A"
.b64f	90 04		bcc $b655			bcc 	_THFoundEnd
.b651	c9 47		cmp #$47			cmp 	#"F"+1
.b653	90 ec		bcc $b641			bcc 	_THFindLoop
.b655					_THFoundEnd:
.b655	7a		ply				ply 								; restore start
.b656	20 1a b6	jsr $b61a			jsr 	TOWriteBlockXY 				; output the block
.b659	60		rts				rts
.b65a					TokeniseCalculateHash:
.b65a	da		phx				phx
.b65b	ae 80 04	ldx $0480			ldx 	identStart 					; needs to be same as in tokens.py - simple sum
.b65e	a9 00		lda #$00			lda 	#0
.b660					_TCHLoop:
.b660	18		clc				clc
.b661	7d a7 05	adc $05a7,x			adc 	lineBuffer,x
.b664	e8		inx				inx
.b665	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.b668	d0 f6		bne $b660			bne 	_TCHLoop
.b66a	8d 83 04	sta $0483			sta 	identHash 					; save the hash
.b66d	fa		plx				plx
.b66e	60		rts				rts
.b66f					FixLineBufferCase:
.b66f	a2 00		ldx #$00			ldx 	#0
.b671					_FLBCLoop:
.b671	bd a7 05	lda $05a7,x			lda 	lineBuffer,x 				; get next character
.b674	f0 22		beq $b698			beq 	_FLBCExit 					; end of string.
.b676	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.b678	f0 11		beq $b68b			beq 	_FLBCInQuotes
.b67a	e8		inx				inx
.b67b	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.b67d	90 f2		bcc $b671			bcc 	_FLBCLoop
.b67f	c9 7b		cmp #$7b			cmp 	#'z'+1
.b681	b0 ee		bcs $b671			bcs 	_FLBCLoop
.b683	38		sec				sec 								; make U/C
.b684	e9 20		sbc #$20			sbc 	#32
.b686	9d a6 05	sta $05a6,x			sta	 	lineBuffer-1,x 				; write back
.b689	80 e6		bra $b671			bra 	_FLBCLoop
.b68b					_FLBCInQuotes:
.b68b	e8		inx				inx 								; advance
.b68c	bd a7 05	lda $05a7,x			lda 	lineBuffer,x 				; get next
.b68f	f0 07		beq $b698			beq 	_FLBCExit 					; exit on EOS
.b691	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.b693	d0 f6		bne $b68b			bne 	_FLBCInQuotes
.b695	e8		inx				inx 								; skip over it
.b696	80 d9		bra $b671			bra 	_FLBCLoop
.b698					_FLBCExit:
.b698	60		rts				rts
.b699					TokeniseExtractLineNumber:
.b699	ad a9 04	lda $04a9			lda 	tokenLineNumber+1 			; push current value on stack
.b69c	48		pha				pha
.b69d	ad a8 04	lda $04a8			lda 	tokenLineNumber
.b6a0	48		pha				pha
.b6a1	20 d7 b6	jsr $b6d7			jsr 	_TELNTimes2 				; line # x 4
.b6a4	20 d7 b6	jsr $b6d7			jsr 	_TELNTimes2 				; line # x 2
.b6a7	18		clc				clc 								; add stacked value
.b6a8	68		pla				pla
.b6a9	6d a8 04	adc $04a8			adc 	tokenLineNumber
.b6ac	8d a8 04	sta $04a8			sta 	tokenLineNumber
.b6af	68		pla				pla
.b6b0	6d a9 04	adc $04a9			adc 	tokenLineNumber+1
.b6b3	8d a9 04	sta $04a9			sta 	tokenLineNumber+1 			; line # x 5
.b6b6	20 d7 b6	jsr $b6d7			jsr 	_TELNTimes2 				; line # x 10
.b6b9	bd a7 05	lda $05a7,x			lda 	lineBuffer,x 				; get and consume character
.b6bc	e8		inx				inx
.b6bd	29 0f		and #$0f			and 	#15 						; add to line #
.b6bf	18		clc				clc
.b6c0	6d a8 04	adc $04a8			adc 	tokenLineNumber
.b6c3	8d a8 04	sta $04a8			sta 	tokenLineNumber
.b6c6	90 03		bcc $b6cb			bcc 	_TLENNoCarry
.b6c8	ee a9 04	inc $04a9			inc 	tokenLineNumber+1
.b6cb					_TLENNoCarry:
.b6cb	bd a7 05	lda $05a7,x			lda 	lineBuffer,x 				; more digits ?
.b6ce	c9 30		cmp #$30			cmp 	#'0'
.b6d0	90 04		bcc $b6d6			bcc 	_TLENExit
.b6d2	c9 3a		cmp #$3a			cmp 	#'9'+1
.b6d4	90 c3		bcc $b699			bcc 	TokeniseExtractLineNumber
.b6d6					_TLENExit:
.b6d6	60		rts				rts
.b6d7					_TELNTimes2:
.b6d7	0e a8 04	asl $04a8			asl 	tokenLineNumber
.b6da	2e a9 04	rol $04a9			rol 	tokenLineNumber+1
.b6dd	60		rts				rts
.b6de					TokeniseWriteByte:
.b6de	da		phx				phx
.b6df	ae a7 04	ldx $04a7			ldx 	tokenOffset 				; next slot to write to
.b6e2	9d a7 04	sta $04a7,x			sta 	tokenOffset,x 				; write byte out
.b6e5	ee a7 04	inc $04a7			inc 	tokenOffset 				; advance slot.
.b6e8	fa		plx				plx
.b6e9	60		rts				rts
.b6ea					CheckCreateVariableRecord:
.b6ea	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.b6ec	85 36		sta $36				sta 	0+zTemp0
.b6ee	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.b6f0	85 37		sta $37				sta 	1+zTemp0
.b6f2					_CCVSearch:
.b6f2	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.b6f4	f0 2c		beq $b722			beq 	_CCVFail
.b6f6	a0 01		ldy #$01			ldy 	#1 							; read the hash
.b6f8	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.b6fa	cd 83 04	cmp $0483			cmp 	identHash
.b6fd	d0 16		bne $b715			bne 	_CCVNext
.b6ff	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.b701	ae 80 04	ldx $0480			ldx 	identStart
.b704					_CCVCompare:
.b704	bd a7 05	lda $05a7,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.b707	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.b709	e8		inx				inx 								; advance pointers
.b70a	c8		iny				iny
.b70b	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.b70c	d0 07		bne $b715			bne 	_CCVNext  					; didn't match go to next.
.b70e	90 f4		bcc $b704			bcc 	_CCVCompare 				; not finished yet.
.b710	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; matched whole thing ?
.b713	f0 41		beq $b756			beq 	_CCVFound 					; yes, we were successful
.b715					_CCVNext:
.b715	18		clc				clc
.b716	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.b718	65 36		adc $36				adc 	zTemp0
.b71a	85 36		sta $36				sta 	zTemp0
.b71c	90 d4		bcc $b6f2			bcc 	_CCVSearch
.b71e	e6 37		inc $37				inc 	zTemp0+1
.b720	80 d0		bra $b6f2			bra 	_CCVSearch
.b722					_CCVFail:
.b722	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.b724	ad 83 04	lda $0483			lda 	identHash
.b727	91 36		sta ($36),y			sta 	(zTemp0),y
.b729	c8		iny				iny 								; offset 2 is the type byte
.b72a	ad 84 04	lda $0484			lda 	identTypeByte
.b72d	91 36		sta ($36),y			sta 	(zTemp0),y
.b72f	c8		iny				iny
.b730					_CCVData:
.b730	a9 00		lda #$00			lda 	#0 							; erase data 3-7
.b732	91 36		sta ($36),y			sta 	(zTemp0),y
.b734	c8		iny				iny
.b735	c0 08		cpy #$08			cpy 	#8
.b737	90 f7		bcc $b730			bcc 	_CCVData
.b739	ae 80 04	ldx $0480			ldx 	identStart 					; copy name into 8 on.
.b73c					_CCVCopyName:
.b73c	bd a7 05	lda $05a7,x			lda 	lineBuffer,x
.b73f	91 36		sta ($36),y			sta 	(zTemp0),y
.b741	e8		inx				inx
.b742	c8		iny				iny
.b743	ec 82 04	cpx $0482			cpx 	identTypeEnd
.b746	d0 f4		bne $b73c			bne 	_CCVCopyName
.b748	98		tya				tya 								; patch offset
.b749	92 36		sta ($36)			sta 	(zTemp0)
.b74b	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.b74d	91 36		sta ($36),y			sta 	(zTemp0),y
.b74f	88		dey				dey
.b750	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.b752	09 80		ora #$80			ora 	#$80
.b754	91 36		sta ($36),y			sta 	(zTemp0),y
.b756					_CCVFound:
.b756	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.b758	38		sec				sec
.b759	e9 10		sbc #$10			sbc 	#(VariableSpace >> 8) 		; offset from the start
.b75b	09 40		ora #$40			ora 	#$40 						; make it a writeable token
.b75d	20 de b6	jsr $b6de			jsr 	TokeniseWriteByte
.b760	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.b762	20 de b6	jsr $b6de			jsr 	TokeniseWriteByte
.b765	60		rts				rts

;******  Return to file: _basic.asm


;******  End of listing
