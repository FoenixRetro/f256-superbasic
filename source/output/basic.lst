
; 64tass Turbo Assembler Macro V1.57.2900 listing file
; 64tass -D AUTORUN=1 "-D MONITOR_ADDRESS=\$E000" "-D LOCKOUT_ADDRESS=\$F000" "-D BASIC_ADDRESS=\$38000" "-D SOURCE_ADDRESS=\$28000" "-D SPRITE_ADDRESS=\$30000" -q -b -Wall -c -C -D "HARDWARE=0 $'\x9'$'\x9'$'\x9'$'\x9'$'\x9'$'\x9'" -L output/basic.lst -l output/basic.lbl -Wall -o build/basic.rom _basic.asm
; Tue Jan  3 09:52:41 2023

;Offset	;PC	;Hex		;Monitor	;Source

;******  Command line definitions

=1						AUTORUN=1
=$e000						 MONITOR_ADDRESS=$E000
=$f000						 LOCKOUT_ADDRESS=$F000
=$38000						 BASIC_ADDRESS=$38000
=$28000						 SOURCE_ADDRESS=$28000
=$30000						 SPRITE_ADDRESS=$30000
=0						HARDWARE=0

;******  Processing input file: _basic.asm


;******  Processing file: ./common/aa.system/01common.inc

=$30						ZeroPageMandatory = $30
=$50						ZeroPagePreference = $50
=$400						MemoryStorage = $400
=$2000						BasicStart = $2000
=$8000						BasicEnd = $8000
=$8000						CodeStart = $8000
=$1000						VariableSpace = $1000
=$2000						EndVariableSpace = $2000
=8						MathStackSize = 8
=512						BasicStackSize = 512
=3584						BasicStackBase = $1000-BasicStackSize
=80						MaxLineSize = 80

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/04data.inc

.0030						codePtr:
>0030								.fill 	4
.0034						basicStack:
>0034								.fill 	2
.0036						zTemp0:
>0036								.fill 	2
.0038						zTemp1:
>0038								.fill 	2
.003a						zTemp2:
>003a								.fill 	2
.003c						zsTemp:
>003c								.fill 	2
.003e						zaTemp:
>003e								.fill 	2
=$30						safePtr = codePtr 							; minimise direct tinkering
=$80						NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20						NSBIsReference = $20 						; bit 5 : is a reference
=$10						NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18						NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03						NSBRefMask = $03 							; bits 0,1 : Bytes of reference, 00 = 4,01 = 1,10=2
=$04						NSBIsArray = $04
=$00						NSTInteger = $00 							; base types for bits 3..4
=$08						NSTFloat = $08
=$10						NSTString = $10
=$18						NSTProcedure = $18
.0050						NSStatus:
>0050								.fill 	MathStackSize
.0058						NSMantissa0:
>0058								.fill 	MathStackSize 				; (this is my integer mantissa system)
.0060						NSMantissa1:
>0060								.fill 	MathStackSize
.0068						NSMantissa2:
>0068								.fill 	MathStackSize
.0070						NSMantissa3:
>0070								.fill 	MathStackSize
.0078						NSExponent:
>0078								.fill 	MathStackSize
.0400						identStart:
>0400								.fill 	1
.0401						identTypeStart:
>0401								.fill 	1
.0402						identTypeEnd:
>0402								.fill 	1
.0403						identHash:
>0403								.fill 	1
.0404						identTypeByte:
>0404								.fill 	1	 						; (see tokenising.pdf)
.0405						encodeState:
>0405								.fill 	1
.0406						digitTemp:
>0406								.fill 	1
.0407						decimalCount:
>0407								.fill 	1
.0408						randomSeed:
>0408								.fill 	4
.040c						lowMemPtr:
>040c								.fill 	2
.040e						stringMemory:
>040e								.fill 	2
.0410						stringInitialised:
>0410								.fill 	1
.0411						stringTempPointer:
>0411								.fill 	2
.0413						breakCheck:
>0413								.fill 	1
.0414						decimalPlaces:
>0414								.fill 	1
.0415						dbOffset:
>0415								.fill 	1
.0416						lastParameter:
>0416								.fill 	1
.0417						dataPointer:
>0417								.fill 	5
.041c						inDataStatement:
>041c								.fill 	1
.041d						tbOffset:
>041d								.fill 	1
.041e						AssemblerAddress:
>041e								.fill 	2
.0420						AssemblerControl:
>0420								.fill 	1
.0421						ParamStart:
>0421								.fill 	2
.0423						IsGroup1:
>0423								.fill 	1
.0424						BaseOpcode:
>0424								.fill 	1
.0425						ModeMask:
>0425								.fill 	1
.0426						listIndent:
>0426								.fill 	1
.0427						lcLastCharacter:
>0427								.fill 	1
.0428						isPrintFlag:
>0428								.fill 	1
.0429						currentListColour:
>0429								.fill 	1
.042a						tokenOffset:
>042a								.fill 	1
.042b						tokenLineNumber:
>042b								.fill 	2
.042d						tokenBuffer:
>042d								.fill 	253
.052a						lineBuffer:
>052a								.fill 	253
.0627						numberBuffer:
>0627								.fill 	34
.0649						decimalBuffer:
>0649								.fill 	16

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/constants.inc

=$80						AM_ISZP = $80
=$40						AM_ISG1 = $40
=$20						AM_ISG2 = $20
=224						AM_IMMEDIATE = AM_ISZP+AM_ISG1+AM_ISG2+$00
=228						AM_ZEROPAGE = AM_ISZP+AM_ISG1+AM_ISG2+$04
=40						AM_ACC = AM_ISG2+$08
=108						AM_ABS = AM_ISG1+AM_ISG2+$0C
=208						AM_INDY = AM_ISZP+AM_ISG1+$10
=244						AM_ZEROX = AM_ISZP+AM_ISG1+AM_ISG2+$14
=120						AM_ABSY = AM_ISG1+AM_ISG2+$18
=124						AM_ABSX = AM_ISG1+AM_ISG2+$1C
=209						AM_IND = AM_ISZP+AM_ISG1+$11
=$80						AM_ZEROY = AM_ISZP
=$01						AM_INDABS = $01
=$02						AM_INDABSX = $02
=192						AM_INDX = AM_ISZP+AM_ISG1+$00

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/handlers.inc


;******  Return to file: _basic.asm


;******  Processing file: ./tick.task/f256/ticktask.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.inc

=1						ERRID_BREAK = 1
=2						ERRID_SYNTAX = 2
=3						ERRID_DIVZERO = 3
=4						ERRID_RANGE = 4
=5						ERRID_TYPE = 5
=6						ERRID_MEMORY = 6
=7						ERRID_ARGUMENT = 7
=8						ERRID_STOP = 8
=9						ERRID_STRING = 9
=10						ERRID_ASSERT = 10
=11						ERRID_DATA = 11
=12						ERRID_NOTDONE = 12
=13						ERRID_LINE = 13
=14						ERRID_GOSUB = 14
=15						ERRID_REPEAT = 15
=16						ERRID_WHILE = 16
=17						ERRID_FOR = 17
=18						ERRID_STACK = 18
=19						ERRID_STRUCT = 19
=20						ERRID_PROC = 20
=21						ERRID_REDEFINE = 21
=22						ERRID_ARRAYSIZE = 22
=23						ERRID_ARRAYIDX = 23
=24						ERRID_ARRAYDEC = 24
=25						ERRID_NOTFOUND = 25
=26						ERRID_DRIVEIO = 26
=27						ERRID_VERIFY = 27

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst.inc

=$00						KWD_LESSLESS                         = $00; $00 <<
=$01						KWD_LESSEQUAL                        = $01; $01 <=
=$02						KWD_LESSGREATER                      = $02; $02 <>
=$03						KWD_PLINGPLING3                      = $03; $03 !!3
=$04						KWD_GREATERLESS                      = $04; $04 ><
=$05						KWD_GREATEREQUAL                     = $05; $05 >=
=$06						KWD_GREATERGREATER                   = $06; $06 >>
=$07						KWD_PLINGPLING7                      = $07; $07 !!7
=$08						KWD_PLINGPLING8                      = $08; $08 !!8
=$09						KWD_PLINGPLING9                      = $09; $09 !!9
=$0a						KWD_PLINGPLING10                     = $0a; $0a !!10
=$0b						KWD_PLINGPLING11                     = $0b; $0b !!11
=$0c						KWD_PLINGPLING12                     = $0c; $0c !!12
=$0d						KWD_PLINGPLING13                     = $0d; $0d !!13
=$0e						KWD_PLINGPLING14                     = $0e; $0e !!14
=$0f						KWD_PLINGPLING15                     = $0f; $0f !!15
=$10						KWD_AT                               = $10; $10 @
=$11						KWD_PLINGPLING17                     = $11; $11 !!17
=$12						KWD_PLINGPLING18                     = $12; $12 !!18
=$13						KWD_LSQPAREN                         = $13; $13 [
=$14						KWD_BACKSLASH                        = $14; $14 \
=$15						KWD_RSQPAREN                         = $15; $15 ]
=$16						KWD_HAT                              = $16; $16 ^
=$17						KWD_UNDERSCORE                       = $17; $17 _
=$18						KWD_BQUOTE                           = $18; $18 `
=$19						KWD_PLINGPLING25                     = $19; $19 !!25
=$1a						KWD_PLINGPLING26                     = $1a; $1a !!26
=$1b						KWD_LCURLY                           = $1b; $1b {
=$1c						KWD_BAR                              = $1c; $1c |
=$1d						KWD_RCURLY                           = $1d; $1d }
=$1e						KWD_TILDE                            = $1e; $1e ~
=$21						KWD_PLING                            = $21; $21 !
=$22						KWD_DQUOTE                           = $22; $22 "
=$23						KWD_HASH                             = $23; $23 #
=$24						KWD_DOLLAR                           = $24; $24 $
=$25						KWD_PERCENT                          = $25; $25 %
=$26						KWD_AMPERSAND                        = $26; $26 &
=$27						KWD_QUOTE                            = $27; $27 '
=$28						KWD_LPAREN                           = $28; $28 (
=$29						KWD_RPAREN                           = $29; $29 )
=$2a						KWD_STAR                             = $2a; $2a *
=$2b						KWD_PLUS                             = $2b; $2b +
=$2c						KWD_COMMA                            = $2c; $2c ,
=$2d						KWD_MINUS                            = $2d; $2d -
=$2e						KWD_PERIOD                           = $2e; $2e .
=$2f						KWD_SLASH                            = $2f; $2f /
=$30						KWD_0                                = $30; $30 0
=$31						KWD_1                                = $31; $31 1
=$32						KWD_2                                = $32; $32 2
=$33						KWD_3                                = $33; $33 3
=$34						KWD_4                                = $34; $34 4
=$35						KWD_5                                = $35; $35 5
=$36						KWD_6                                = $36; $36 6
=$37						KWD_7                                = $37; $37 7
=$38						KWD_8                                = $38; $38 8
=$39						KWD_9                                = $39; $39 9
=$3a						KWD_COLON                            = $3a; $3a :
=$3b						KWD_SEMICOLON                        = $3b; $3b ;
=$3c						KWD_LESS                             = $3c; $3c <
=$3d						KWD_EQUAL                            = $3d; $3d =
=$3e						KWD_GREATER                          = $3e; $3e >
=$3f						KWD_QMARK                            = $3f; $3f ?
=$83						KWD_ABSLPAREN                        = $83; $83 ABS(
=$84						KWD_ALLOCLPAREN                      = $84; $84 ALLOC(
=$85						KWD_ASCLPAREN                        = $85; $85 ASC(
=$86						KWD_CHRDOLLARLPAREN                  = $86; $86 CHR$(
=$87						KWD_EVENTLPAREN                      = $87; $87 EVENT(
=$88						KWD_FALSE                            = $88; $88 FALSE
=$89						KWD_FRACLPAREN                       = $89; $89 FRAC(
=$8a						KWD_GETDATEDOLLARLPAREN              = $8a; $8a GETDATE$(
=$8b						KWD_GETTIMEDOLLARLPAREN              = $8b; $8b GETTIME$(
=$8c						KWD_HITLPAREN                        = $8c; $8c HIT(
=$8d						KWD_INTLPAREN                        = $8d; $8d INT(
=$8e						KWD_ISVALLPAREN                      = $8e; $8e ISVAL(
=$8f						KWD_JOYBLPAREN                       = $8f; $8f JOYB(
=$90						KWD_JOYXLPAREN                       = $90; $90 JOYX(
=$91						KWD_JOYYLPAREN                       = $91; $91 JOYY(
=$92						KWD_LEFTDOLLARLPAREN                 = $92; $92 LEFT$(
=$93						KWD_LENLPAREN                        = $93; $93 LEN(
=$94						KWD_MAXLPAREN                        = $94; $94 MAX(
=$95						KWD_MIDDOLLARLPAREN                  = $95; $95 MID$(
=$96						KWD_MINLPAREN                        = $96; $96 MIN(
=$97						KWD_NOTLPAREN                        = $97; $97 NOT(
=$98						KWD_PEEKLPAREN                       = $98; $98 PEEK(
=$99						KWD_PEEKDLPAREN                      = $99; $99 PEEKD(
=$9a						KWD_PEEKLLPAREN                      = $9a; $9a PEEKL(
=$9b						KWD_PEEKWLPAREN                      = $9b; $9b PEEKW(
=$9c						KWD_PLAYINGLPAREN                    = $9c; $9c PLAYING(
=$9d						KWD_RANDOMLPAREN                     = $9d; $9d RANDOM(
=$9e						KWD_RIGHTDOLLARLPAREN                = $9e; $9e RIGHT$(
=$9f						KWD_RNDLPAREN                        = $9f; $9f RND(
=$a0						KWD_SGNLPAREN                        = $a0; $a0 SGN(
=$a1						KWD_SPCLPAREN                        = $a1; $a1 SPC(
=$a2						KWD_STRDOLLARLPAREN                  = $a2; $a2 STR$(
=$a3						KWD_TIMERLPAREN                      = $a3; $a3 TIMER(
=$a4						KWD_TRUE                             = $a4; $a4 TRUE
=$a5						KWD_VALLPAREN                        = $a5; $a5 VAL(
=$a6						KWD_FOR                              = $a6; $a6 FOR
=$a7						KWD_IF                               = $a7; $a7 IF
=$a8						KWD_PROC                             = $a8; $a8 PROC
=$a9						KWD_REPEAT                           = $a9; $a9 REPEAT
=$aa						KWD_WHILE                            = $aa; $aa WHILE
=$ab						KWD_ENDIF                            = $ab; $ab ENDIF
=$ac						KWD_ENDPROC                          = $ac; $ac ENDPROC
=$ad						KWD_NEXT                             = $ad; $ad NEXT
=$ae						KWD_THEN                             = $ae; $ae THEN
=$af						KWD_UNTIL                            = $af; $af UNTIL
=$b0						KWD_WEND                             = $b0; $b0 WEND
=$b1						KWD_BY                               = $b1; $b1 BY
=$b2						KWD_CALL                             = $b2; $b2 CALL
=$b3						KWD_CIRCLE                           = $b3; $b3 CIRCLE
=$b4						KWD_CLEAR                            = $b4; $b4 CLEAR
=$b5						KWD_CLS                              = $b5; $b5 CLS
=$b6						KWD_COLOR                            = $b6; $b6 COLOR
=$b7						KWD_COLOUR                           = $b7; $b7 COLOUR
=$b8						KWD_CPRINT                           = $b8; $b8 CPRINT
=$b9						KWD_DATA                             = $b9; $b9 DATA
=$ba						KWD_DIM                              = $ba; $ba DIM
=$bb						KWD_DOWNTO                           = $bb; $bb DOWNTO
=$bc						KWD_ELSE                             = $bc; $bc ELSE
=$bd						KWD_FROM                             = $bd; $bd FROM
=$be						KWD_GFX                              = $be; $be GFX
=$bf						KWD_GOSUB                            = $bf; $bf GOSUB
=$c0						KWD_GOTO                             = $c0; $c0 GOTO
=$c1						KWD_HERE                             = $c1; $c1 HERE
=$c2						KWD_IMAGE                            = $c2; $c2 IMAGE
=$c3						KWD_INPUT                            = $c3; $c3 INPUT
=$c4						KWD_LET                              = $c4; $c4 LET
=$c5						KWD_LINE                             = $c5; $c5 LINE
=$c6						KWD_LOCAL                            = $c6; $c6 LOCAL
=$c7						KWD_OFF                              = $c7; $c7 OFF
=$c8						KWD_ON                               = $c8; $c8 ON
=$c9						KWD_OUTLINE                          = $c9; $c9 OUTLINE
=$ca						KWD_PALETTE                          = $ca; $ca PALETTE
=$cb						KWD_PLOT                             = $cb; $cb PLOT
=$cc						KWD_POKE                             = $cc; $cc POKE
=$cd						KWD_POKED                            = $cd; $cd POKED
=$ce						KWD_POKEL                            = $ce; $ce POKEL
=$cf						KWD_POKEW                            = $cf; $cf POKEW
=$d0						KWD_PRINT                            = $d0; $d0 PRINT
=$d1						KWD_READ                             = $d1; $d1 READ
=$d2						KWD_RECT                             = $d2; $d2 RECT
=$d3						KWD_REM                              = $d3; $d3 REM
=$d4						KWD_RETURN                           = $d4; $d4 RETURN
=$d5						KWD_SOLID                            = $d5; $d5 SOLID
=$d6						KWD_SOUND                            = $d6; $d6 SOUND
=$d7						KWD_SPRITE                           = $d7; $d7 SPRITE
=$d8						KWD_TEXT                             = $d8; $d8 TEXT
=$d9						KWD_TO                               = $d9; $d9 TO

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst0.inc

=$80						KWC_EOL = $80
=$ff						KWC_STRING = $FF
=$fe						KWC_HEXCONST = $FE
=$a6						KWC_FIRST_STRUCTURE = $a6
=$ab						KWC_FIRST_STRUCTURE_DEC = $ab
=$b0						KWC_LAST_STRUCTURE = $b0
=$83						KWC_FIRST_UNARY = $83
=$a5						KWC_LAST_UNARY = $a5

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/stack.inc

=$e0						STK_GOSUB = $E0
=$d0						STK_FOR = $D0
=$c0						STK_REPEAT = $C0
=$b0						STK_PROC = $B0
=$a0						STK_WHILE = $A0
=$01						STK_LOCALN = $01
=$02						STK_LOCALS = $02

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/00start.asm

.8000		4c b7 80	jmp $80b7	Boot:	jmp 	Start

;******  Processing file: ./common/aa.system/../../../modules/_build/_linker.module

=1						PagingEnabled = 1
.8003						EXTPrintCharacter:
.8003		e6 0d		inc $0d			inc 8+5
.8005		20 0b a0	jsr $a00b		jsr	Export_EXTPrintCharacter
.8008		08		php			php
.8009		c6 0d		dec $0d			dec 8+5
.800b		28		plp			plp
.800c		60		rts			rts
.800d						EXTPrintNoControl:
.800d		e6 0d		inc $0d			inc 8+5
.800f		20 00 a0	jsr $a000		jsr	Export_EXTPrintNoControl
.8012		08		php			php
.8013		c6 0d		dec $0d			dec 8+5
.8015		28		plp			plp
.8016		60		rts			rts
.8017						EXTInitialise:
.8017		e6 0d		inc $0d			inc 8+5
.8019		20 c6 a2	jsr $a2c6		jsr	Export_EXTInitialise
.801c		08		php			php
.801d		c6 0d		dec $0d			dec 8+5
.801f		28		plp			plp
.8020		60		rts			rts
.8021						EXTReadController:
.8021		e6 0d		inc $0d			inc 8+5
.8023		20 4b bc	jsr $bc4b		jsr	Export_EXTReadController
.8026		08		php			php
.8027		c6 0d		dec $0d			dec 8+5
.8029		28		plp			plp
.802a		60		rts			rts
.802b						EXTInputLine:
.802b		e6 0d		inc $0d			inc 8+5
.802d		20 da a1	jsr $a1da		jsr	Export_EXTInputLine
.8030		08		php			php
.8031		c6 0d		dec $0d			dec 8+5
.8033		28		plp			plp
.8034		60		rts			rts
.8035						KNLInputSingleCharacter:
.8035		e6 0d		inc $0d			inc 8+5
.8037		20 0d bc	jsr $bc0d		jsr	Export_KNLInputSingleCharacter
.803a		08		php			php
.803b		c6 0d		dec $0d			dec 8+5
.803d		28		plp			plp
.803e		60		rts			rts
.803f						KNLOpenFileRead:
.803f		e6 0d		inc $0d			inc 8+5
.8041		20 5c bc	jsr $bc5c		jsr	Export_KNLOpenFileRead
.8044		08		php			php
.8045		c6 0d		dec $0d			dec 8+5
.8047		28		plp			plp
.8048		60		rts			rts
.8049						KNLOpenFileWrite:
.8049		e6 0d		inc $0d			inc 8+5
.804b		20 57 bc	jsr $bc57		jsr	Export_KNLOpenFileWrite
.804e		08		php			php
.804f		c6 0d		dec $0d			dec 8+5
.8051		28		plp			plp
.8052		60		rts			rts
.8053						KNLReadByteInit:
.8053		e6 0d		inc $0d			inc 8+5
.8055		20 b1 bc	jsr $bcb1		jsr	Export_KNLReadByteInit
.8058		08		php			php
.8059		c6 0d		dec $0d			dec 8+5
.805b		28		plp			plp
.805c		60		rts			rts
.805d						KNLReadByte:
.805d		e6 0d		inc $0d			inc 8+5
.805f		20 bb bc	jsr $bcbb		jsr	Export_KNLReadByte
.8062		08		php			php
.8063		c6 0d		dec $0d			dec 8+5
.8065		28		plp			plp
.8066		60		rts			rts
.8067						KNLReadBlock:
.8067		e6 0d		inc $0d			inc 8+5
.8069		20 da bc	jsr $bcda		jsr	Export_KNLReadBlock
.806c		08		php			php
.806d		c6 0d		dec $0d			dec 8+5
.806f		28		plp			plp
.8070		60		rts			rts
.8071						KNLWriteBlock:
.8071		e6 0d		inc $0d			inc 8+5
.8073		20 1a bd	jsr $bd1a		jsr	Export_KNLWriteBlock
.8076		08		php			php
.8077		c6 0d		dec $0d			dec 8+5
.8079		28		plp			plp
.807a		60		rts			rts
.807b						KNLCloseFile:
.807b		e6 0d		inc $0d			inc 8+5
.807d		20 97 bc	jsr $bc97		jsr	Export_KNLCloseFile
.8080		08		php			php
.8081		c6 0d		dec $0d			dec 8+5
.8083		28		plp			plp
.8084		60		rts			rts
.8085						GXGraphicDraw:
.8085		e6 0d		inc $0d			inc 8+5
.8087		20 cb a7	jsr $a7cb		jsr	Export_GXGraphicDraw
.808a		08		php			php
.808b		c6 0d		dec $0d			dec 8+5
.808d		28		plp			plp
.808e		60		rts			rts
.808f						SNDCommand:
.808f		e6 0d		inc $0d			inc 8+5
.8091		20 80 bb	jsr $bb80		jsr	Export_SNDCommand
.8094		08		php			php
.8095		c6 0d		dec $0d			dec 8+5
.8097		28		plp			plp
.8098		60		rts			rts
.8099						SNDUpdate:
.8099		e6 0d		inc $0d			inc 8+5
.809b		20 b3 bb	jsr $bbb3		jsr	Export_SNDUpdate
.809e		08		php			php
.809f		c6 0d		dec $0d			dec 8+5
.80a1		28		plp			plp
.80a2		60		rts			rts
.80a3						TKListConvertLine:
.80a3		e6 0d		inc $0d			inc 8+5
.80a5		20 31 b5	jsr $b531		jsr	Export_TKListConvertLine
.80a8		08		php			php
.80a9		c6 0d		dec $0d			dec 8+5
.80ab		28		plp			plp
.80ac		60		rts			rts
.80ad						TKTokeniseLine:
.80ad		e6 0d		inc $0d			inc 8+5
.80af		20 c5 b7	jsr $b7c5		jsr	Export_TKTokeniseLine
.80b2		08		php			php
.80b3		c6 0d		dec $0d			dec 8+5
.80b5		28		plp			plp
.80b6		60		rts			rts

;******  Return to file: ./common/aa.system/00start.asm

.80b7		a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.80b9		9a		txs				txs
.80ba		a5 00		lda $00				lda 	0  							; turn on editing of MMU LUT
.80bc		09 80		ora #$80			ora 	#$80
.80be		85 00		sta $00				sta 	0
.80c0		20 c0 a8	jsr $a8c0			jsr		UpdateFont 					; update font if between FPGA updates.
.80c3		20 17 80	jsr $8017			jsr 	EXTInitialise 				; hardware initialise
.80c6		9c 5e 06	stz $065e			stz 	DefaultDrive 				; zero the default drive.
.80c9		a9 00		lda #$00			lda 	#0 							; graphics system initialise.
.80cb		aa		tax				tax
.80cc		a8		tay				tay
.80cd		20 85 80	jsr $8085			jsr 	GXGraphicDraw
.80d0		a9 0f		lda #$0f			lda 	#$0F 						; initialise sound system
.80d2		20 8f 80	jsr $808f			jsr 	SNDCommand
.80d5		a2 80		ldx #$80			ldx 	#Prompt >> 8 				; display prompt
.80d7		a9 e5		lda #$e5			lda 	#Prompt & $FF
.80d9		20 10 92	jsr $9210			jsr 	PrintStringXA
.80dc		20 0b 8c	jsr $8c0b			jsr 	NewProgram 					; erase current program
.80df		20 69 83	jsr $8369			jsr 	BackloadProgram
.80e2		4c 89 8d	jmp $8d89			jmp 	CommandRUN
>80e5		8d				Prompt:	.text 	128+13
>80e6		0d 0d						.text 	13,13

;******  Processing file: ./common/aa.system/../generated/timestamp.asm

>80e8		09 09 30 33 2f 30 31 2f			.text 9,9,"03/01/23  23"
>80f0		32 33 20 20 32 33

;******  Return to file: ./common/aa.system/00start.asm

>80f6		0d 0d 0d 00					.text 	13,13,13,0

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/assembler.asm

.80fa						AssembleGroup1:
.80fa		a9 ff		lda #$ff			lda 	#$FF 						; flag for group 1 / mask.
.80fc		8d 25 04	sta $0425			sta 	ModeMask 					; initialise the mode mask - all for all
.80ff		80 02		bra $8103			bra 	AsmGroup12
.8101						AssembleGroup2:
.8101		a9 00		lda #$00			lda 	#$00 						; flag for group 2
.8103						AsmGroup12:
.8103		8d 23 04	sta $0423			sta 	IsGroup1 					; save the 'group 1' flag
.8106		68		pla				pla 								; pop the return address to access the information following.
.8107		fa		plx				plx
.8108		20 8f 81	jsr $818f			jsr 	AccessParameters 			; get opcode and save as base
.810b		8d 24 04	sta $0424			sta 	BaseOpcode
.810e		ad 23 04	lda $0423			lda 	IsGroup1 					; skip if group 1 as we don't have a complex mask.
.8111		d0 08		bne $811b			bne 	_AG12HaveMask
.8113		a9 02		lda #$02			lda 	#2 							; if group 2 the second parameter is the mask
.8115		20 97 81	jsr $8197			jsr 	GetParameter		 		; e.g. which modes are supported for this operand
.8118		8d 25 04	sta $0425			sta 	ModeMask
.811b						_AG12HaveMask:
.811b		20 cb 82	jsr $82cb			jsr 	TypeAndCalculateOperand 	; get zero page type
.811e		da		phx				phx 								; save found address mode
.811f		20 fb 81	jsr $81fb			jsr 	AssembleModeX
.8122		fa		plx				plx  								; restore address mode
.8123		b0 0b		bcs $8130			bcs 	_AG12Exit
.8125		20 31 81	jsr $8131			jsr 	PromoteToAbsolute  			; promote ZP to ABS and try that
.8128		20 fb 81	jsr $81fb			jsr 	AssembleModeX
.812b		b0 03		bcs $8130			bcs 	_AG12Exit
.812d		4c 80 a2	jmp $a280			jmp 	SyntaxError 				; can't do either, so must be wrong mode/operand.
.8130						_AG12Exit:
.8130		60		rts				rts
.8131						PromoteToAbsolute:
.8131		a9 6c		lda #$6c			lda 	#AM_ABS 					; lda xx
.8133		e0 e4		cpx #$e4			cpx 	#AM_ZEROPAGE
.8135		f0 19		beq $8150			beq 	_PTADo
.8137		a9 7c		lda #$7c			lda 	#AM_ABSX 					; lda xx,X
.8139		e0 f4		cpx #$f4			cpx 	#AM_ZEROX
.813b		f0 13		beq $8150			beq 	_PTADo
.813d		a9 78		lda #$78			lda 	#AM_ABSY 					; lda xx,Y
.813f		e0 80		cpx #$80			cpx 	#AM_ZEROY
.8141		f0 0d		beq $8150			beq 	_PTADo
.8143		a9 01		lda #$01			lda 	#AM_INDABS 					; lda (xx) (jump)
.8145		e0 d1		cpx #$d1			cpx 	#AM_IND
.8147		f0 07		beq $8150			beq 	_PTADo
.8149		a9 02		lda #$02			lda 	#AM_INDABSX 				; lda (xx,x) (jump)
.814b		e0 c0		cpx #$c0			cpx 	#AM_INDX
.814d		f0 01		beq $8150			beq 	_PTADo
.814f		60		rts				rts
.8150						_PTADo:
.8150		aa		tax				tax
.8151		60		rts				rts
.8152						AssembleGroup3:
.8152		68		pla				pla 								; get parameters, which is just the opcode.
.8153		fa		plx				plx
.8154		20 8f 81	jsr $818f			jsr 	AccessParameters 			; get and output opcode
.8157		20 a7 81	jsr $81a7			jsr 	AssemblerWriteByte
.815a		20 2f 83	jsr $832f			jsr 	CalculateOperand 			; get a 16 bit operand
.815d		a5 58		lda $58				lda 	NSMantissa0 				; calculate the offset
.815f		38		sec				sec
.8160		ed 1e 04	sbc $041e			sbc 	AssemblerAddress
.8163		48		pha				pha 								; LSB in A
.8164		a5 60		lda $60				lda 	NSMantissa1
.8166		ed 1f 04	sbc $041f			sbc 	AssemblerAddress+1
.8169		aa		tax				tax 								; MSB in X
.816a		68		pla				pla
.816b		18		clc				clc 								; $80 to easy check $80-$7F, plus 1 for offset error
.816c		69 7f		adc #$7f			adc 	#$7F
.816e		90 01		bcc $8171			bcc 	_AG3NoCarry
.8170		e8		inx				inx
.8171						_AG3NoCarry:
.8171		38		sec				sec 								; fix back and write out anyways.
.8172		e9 80		sbc #$80			sbc 	#$80
.8174		20 a7 81	jsr $81a7			jsr 	AssemblerWriteByte
.8177		e0 00		cpx #$00			cpx 	#0 							; was it in range
.8179		f0 0a		beq $8185			beq 	_AG3Exit
.817b		ad 20 04	lda $0420			lda 	AssemblerControl 			; are we allowing bad values ?
.817e		29 01		and #$01			and 	#1
.8180		f0 03		beq $8185			beq 	_AG3Exit
.8182		4c 85 a2	jmp $a285			jmp 	RangeError 					; no, branch is out of range
.8185						_AG3Exit:
.8185		60		rts				rts
.8186						AssembleGroup4:
.8186		68		pla				pla 								; pop address
.8187		fa		plx				plx
.8188		20 8f 81	jsr $818f			jsr 	AccessParameters 			; access and get first
.818b		20 a7 81	jsr $81a7			jsr 	AssemblerWriteByte 			; output it.
.818e		60		rts				rts
.818f						AccessParameters:
.818f		8d 21 04	sta $0421			sta 	ParamStart
.8192		8e 22 04	stx $0422			stx 	ParamStart+1
.8195		a9 01		lda #$01			lda 	#1
.8197						GetParameter:
.8197		5a		phy				phy
.8198		a8		tay				tay
.8199		ad 21 04	lda $0421			lda 	ParamStart
.819c		85 36		sta $36				sta 	zTemp0
.819e		ad 22 04	lda $0422			lda 	ParamStart+1
.81a1		85 37		sta $37				sta 	zTemp0+1
.81a3		b1 36		lda ($36),y			lda 	(zTemp0),y
.81a5		7a		ply				ply
.81a6		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/aswrite.asm

.81a7						AssemblerWriteByte:
.81a7		48		pha			pha
.81a8		ad 20 04	lda $0420		lda 	AssemblerControl 				; check printing bytes ?
.81ab		29 02		and #$02		and 	#2
.81ad		f0 1b		beq $81ca		beq 	_AWBNoPrint
.81af		ad 1f 04	lda $041f		lda		AssemblerAddress+1 				; print address
.81b2		20 e5 81	jsr $81e5		jsr 	PrintHex
.81b5		ad 1e 04	lda $041e		lda		AssemblerAddress
.81b8		20 e5 81	jsr $81e5		jsr 	PrintHex
.81bb		a9 20		lda #$20		lda 	#' '
.81bd		20 03 80	jsr $8003		jsr 	EXTPrintCharacter
.81c0		68		pla			pla 									; print byte
.81c1		48		pha			pha
.81c2		20 e5 81	jsr $81e5		jsr 	PrintHex
.81c5		a9 0d		lda #$0d		lda 	#13
.81c7		20 03 80	jsr $8003		jsr 	EXTPrintCharacter
.81ca						_AWBNoPrint:
.81ca		ad 1e 04	lda $041e		lda		AssemblerAddress				; copy address to zTemp0
.81cd		85 36		sta $36			sta 	zTemp0
.81cf		ad 1f 04	lda $041f		lda		AssemblerAddress+1
.81d2		f0 0e		beq $81e2		beq 	_AWBRange
.81d4		85 37		sta $37			sta 	zTemp0+1
.81d6		68		pla			pla 									; write byte out
.81d7		92 36		sta ($36)		sta 	(zTemp0)
.81d9		ee 1e 04	inc $041e		inc 	AssemblerAddress 				; bump address
.81dc		d0 03		bne $81e1		bne 	_AWBNoCarry
.81de		ee 1f 04	inc $041f		inc 	AssemblerAddress+1
.81e1						_AWBNoCarry:
.81e1		60		rts			rts
.81e2						_AWBRange:
.81e2		4c 85 a2	jmp $a285		jmp 	RangeError
.81e5						PrintHex:
.81e5		48		pha				pha
.81e6		4a		lsr a				lsr 	a
.81e7		4a		lsr a				lsr 	a
.81e8		4a		lsr a				lsr 	a
.81e9		4a		lsr a				lsr 	a
.81ea		20 ee 81	jsr $81ee			jsr 	_PrintNibble
.81ed		68		pla				pla
.81ee						_PrintNibble:
.81ee		29 0f		and #$0f			and 	#15
.81f0		c9 0a		cmp #$0a			cmp 	#10
.81f2		90 02		bcc $81f6			bcc 	_NoShift
.81f4		69 06		adc #$06			adc 	#6
.81f6						_NoShift:
.81f6		69 30		adc #$30			adc 	#48
.81f8		4c 03 80	jmp $8003			jmp 	EXTPrintCharacter

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/instruction.asm

.81fb						AssembleModeX:
.81fb		5a		phy				phy
.81fc		ad 23 04	lda $0423			lda 	IsGroup1
.81ff		f0 17		beq $8218			beq 	_AMXGroup2
.8201		8a		txa				txa 							; is it in group # 1
.8202		29 40		and #$40			and 	#AM_ISG1
.8204		f0 4d		beq $8253			beq 	_AMXFail 				; no, give up.
.8206		8a		txa				txa 							; get back.
.8207		29 1f		and #$1f			and 	#$1F 					; this is now the offset.
.8209		e0 e0		cpx #$e0			cpx 	#AM_IMMEDIATE 			; if not immediate, we can continue.
.820b		d0 22		bne $822f			bne 	_AMXHaveInfo
.820d		ad 24 04	lda $0424			lda 	BaseOpcode 				; cannot store immediate.
.8210		c9 81		cmp #$81			cmp 	#$81
.8212		f0 3f		beq $8253			beq 	_AMXFail
.8214		a9 08		lda #$08			lda 	#8 						; if immediate we use offset 8.
.8216		80 17		bra $822f			bra 	_AMXHaveInfo 			; odd design decision there.
.8218						_AMXGroup2:
.8218		8a		txa				txa 							; is it in group 2 ?
.8219		29 20		and #$20			and 	#AM_ISG2
.821b		f0 36		beq $8253			beq 	_AMXFail 				; no, give up.
.821d		8a		txa				txa 							; get the offset into Y
.821e		29 1f		and #$1f			and 	#$1F
.8220		4a		lsr a				lsr 	a 						; make it 0-7.
.8221		4a		lsr a				lsr  	a
.8222		a8		tay				tay
.8223		ad 25 04	lda $0425			lda 	ModeMask 				; shift the modemask left so you can check it against the requested offset
.8226						_AMXCheckOkay:
.8226		0a		asl a				asl 	a 						; shift modemask left enough times to check legitimate.
.8227		88		dey				dey
.8228		10 fc		bpl $8226			bpl 	_AMXCheckOkay
.822a		90 27		bcc $8253			bcc 	_AMXFail 				; not allowed.
.822c		8a		txa				txa  							; get mask back
.822d		29 1f		and #$1f			and 	#$1F
.822f						_AMXHaveInfo:
.822f		e0 00		cpx #$00			cpx 	#$00 					; does it *require* an 8 bit operand
.8231		10 04		bpl $8237			bpl 	_AMXAnySize 			; checking bit 7, the zero page opcode flag.
.8233		a4 60		ldy $60				ldy 	NSMantissa1 			; fail if it is outside range, e.g. the MSB is set.
.8235		d0 1c		bne $8253			bne 	_AMXFail
.8237						_AMXAnySize:
.8237		18		clc				clc 							; add offset to the base opcode
.8238		6d 24 04	adc $0424			adc 	BaseOpcode
.823b						_AMXOutputCode:
.823b		20 a7 81	jsr $81a7			jsr 	AssemblerWriteByte 		; write the opcode out.
.823e		e0 28		cpx #$28			cpx 	#AM_ACC 				; A mode (e.g. ASL)
.8240		f0 0e		beq $8250			beq 	_AMXExit
.8242		a5 58		lda $58				lda 	NSMantissa0 			; write LSB operand
.8244		20 a7 81	jsr $81a7			jsr 	AssemblerWriteByte
.8247		e0 00		cpx #$00			cpx 	#$00 					; zeropage ?
.8249		30 05		bmi $8250			bmi 	_AMXExit
.824b		a5 60		lda $60				lda 	NSMantissa1 			; write MSB operand
.824d		20 a7 81	jsr $81a7			jsr 	AssemblerWriteByte
.8250						_AMXExit:
.8250		7a		ply				ply
.8251		38		sec				sec
.8252		60		rts				rts
.8253						_AMXFail:
.8253		a0 00		ldy #$00			ldy 	#0
.8255						_AMXCheckOddities:
.8255		8a		txa				txa
.8256		d9 7d 82	cmp $827d,y			cmp 	ExtraOpcode+2,y 		; match address mode
.8259		d0 15		bne $8270			bne 	_AMXCONext
.825b		b9 7b 82	lda $827b,y			lda 	ExtraOpcode+0,y 		; do the base opcodes match
.825e		cd 24 04	cmp $0424			cmp 	BaseOpcode
.8261		d0 0d		bne $8270			bne 	_AMXCONext
.8263		e0 00		cpx #$00			cpx 	#$00 					; requires zero page ?
.8265		10 04		bpl $826b			bpl 	_AMXCONotZero
.8267		a5 60		lda $60				lda 	NSMantissa1
.8269		d0 05		bne $8270			bne 	_AMXCONext
.826b						_AMXCONotZero:
.826b		b9 7c 82	lda $827c,y			lda 	ExtraOpcode+1,y 		; get new opcode
.826e		80 cb		bra $823b			bra 	_AMXOutputCode 			; and assemble it
.8270						_AMXCONext:
.8270		c8		iny				iny
.8271		c8		iny				iny
.8272		c8		iny				iny
.8273		b9 7b 82	lda $827b,y			lda 	ExtraOpcode+0,y 		; end of table
.8276		d0 dd		bne $8255			bne 	_AMXCheckOddities
.8278						_AMXCOFail:
.8278		7a		ply				ply
.8279		18		clc				clc
.827a		60		rts				rts
.827b						ExtraOpcode:
>827b		40 6c 01					.byte $40,$6c,AM_INDABS 	; jump
>827e		40 7c 02					.byte $40,$7C,AM_INDABSX 	; jump
>8281		a2 be 78					.byte $a2,$BE,AM_ABSY 		; ldx
>8284		a2 b6 80					.byte $a2,$B6,AM_ZEROY 		; ldx
>8287		82 96 80					.byte $82,$96,AM_ZEROY 		; stx
>828a		e2 1a 28					.byte $e2,$1a,AM_ACC 		; inc
>828d		c2 3a 28					.byte $c2,$3a,AM_ACC 		; dec
>8290		20 89 e0					.byte $20,$89,AM_IMMEDIATE 	; bit
>8293		60 9c 6c					.byte $60,$9c,AM_ABS 		; stz
>8296		60 9e 7c					.byte $60,$9e,AM_ABSX 		; stz
>8299		00						.byte $00

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/label.asm

.829a						LabelHere:
.829a		c8		iny				iny 								; skip .
.829b		a2 00		ldx #$00			ldx 	#0 							; get a term
.829d		20 05 9b	jsr $9b05			jsr 	EvaluateTerm
.82a0		a5 50		lda $50				lda 	NSStatus 					; needs to be an integer reference.
.82a2		c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.82a4		d0 22		bne $82c8			bne 	_ALType 					; otherwise typing error
.82a6		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy reference address to zTemp0
.82a8		85 36		sta $36				sta 	zTemp0 						; (e.g. where we store the address)
.82aa		b5 60		lda $60,x			lda 	NSMantissa1,x
.82ac		85 37		sta $37				sta 	zTemp0+1
.82ae		5a		phy				phy 								; copy address in (64k)
.82af		a0 01		ldy #$01			ldy 	#1
.82b1		ad 1e 04	lda $041e			lda	 	AssemblerAddress
.82b4		92 36		sta ($36)			sta 	(zTemp0)
.82b6		ad 1f 04	lda $041f			lda	 	AssemblerAddress+1
.82b9		91 36		sta ($36),y			sta 	(zTemp0),y
.82bb		c8		iny				iny
.82bc		a9 00		lda #$00			lda 	#0 							; zero the rest.
.82be		91 36		sta ($36),y			sta 	(zTemp0),y
.82c0		c8		iny				iny
.82c1		91 36		sta ($36),y			sta 	(zTemp0),y
.82c3		c8		iny				iny
.82c4		91 36		sta ($36),y			sta 	(zTemp0),y
.82c6		7a		ply				ply
.82c7		60		rts				rts
.82c8						_ALType:
.82c8		4c 8a a2	jmp $a28a			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/operands.asm

.82cb						TypeAndCalculateOperand:
.82cb		b1 30		lda ($30),y			lda 	(codePtr),y
.82cd		a2 28		ldx #$28			ldx 	#AM_ACC 					; ACC if : or EOL
.82cf		c9 3a		cmp #$3a			cmp 	#KWD_COLON
.82d1		f0 5b		beq $832e			beq 	_TACOExit
.82d3		c9 80		cmp #$80			cmp 	#KWC_EOL
.82d5		f0 57		beq $832e			beq 	_TACOExit
.82d7		c8		iny				iny
.82d8		a2 e0		ldx #$e0			ldx 	#AM_IMMEDIATE
.82da		c9 23		cmp #$23			cmp 	#KWD_HASH 					; if hash, then immediate - constant.
.82dc		f0 51		beq $832f			beq 	CalculateOperand
.82de		c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; if ( then check for indirection
.82e0		f0 1f		beq $8301			beq 	_TACOIndirect
.82e2		88		dey				dey 								; undo get of first character
.82e3		20 2f 83	jsr $832f			jsr 	CalculateOperand 			; get operand
.82e6		b1 30		lda ($30),y			lda 	(codePtr),y
.82e8		a2 e4		ldx #$e4			ldx 	#AM_ZEROPAGE 				; if not, try zero page (then absolute)
.82ea		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.82ec		d0 40		bne $832e			bne 	_TACOExit
.82ee		c8		iny				iny
.82ef		20 39 83	jsr $8339			jsr 	TACOCheckXY 				; extract X,Y or 0 (neither) from the variable.
.82f2		a2 f4		ldx #$f4			ldx 	#AM_ZEROX 					; check for X
.82f4		c9 58		cmp #$58			cmp 	#'X'
.82f6		f0 36		beq $832e			beq 	_TACOExit
.82f8		a2 80		ldx #$80			ldx 	#AM_ZEROY 					; check for Y
.82fa		c9 59		cmp #$59			cmp 	#'Y'
.82fc		f0 30		beq $832e			beq 	_TACOExit
.82fe						_TACOSyntax:
.82fe		4c 80 a2	jmp $a280			jmp 	SyntaxError
.8301						_TACOIndirect:
.8301		20 2f 83	jsr $832f			jsr 	CalculateOperand 			; get the operand
.8304		b1 30		lda ($30),y			lda 	(codePtr),y
.8306		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if , then it must be ,X)
.8308		f0 17		beq $8321			beq 	_TACOIndX
.830a		20 9e 91	jsr $919e			jsr 	CheckRightBracket  			; otherwise must be ) or ),Y
.830d		b1 30		lda ($30),y			lda 	(codePtr),y
.830f		a2 d1		ldx #$d1			ldx 	#AM_IND
.8311		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not comma then exit with (xx)
.8313		d0 19		bne $832e			bne 	_TACOExit
.8315		c8		iny				iny
.8316		20 39 83	jsr $8339			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.8319		c9 59		cmp #$59			cmp 	#'Y' 						; check Y
.831b		d0 e1		bne $82fe			bne 	_TACOSyntax
.831d		a2 d0		ldx #$d0			ldx 	#AM_INDY
.831f		80 0d		bra $832e			bra 	_TACOExit
.8321						_TACOIndX:
.8321		c8		iny				iny
.8322		20 39 83	jsr $8339			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.8325		c9 58		cmp #$58			cmp 	#'X' 						; check X
.8327		d0 d5		bne $82fe			bne 	_TACOSyntax
.8329		20 9e 91	jsr $919e			jsr 	CheckRightBracket			; check )
.832c		a2 c0		ldx #$c0			ldx 	#AM_INDX
.832e						_TACOExit:
.832e		60		rts				rts
.832f						CalculateOperand:
.832f		48		pha				pha
.8330		da		phx				phx
.8331		a2 00		ldx #$00			ldx 	#0 							; get 16 bit integer in Slot 0
.8333		20 82 a0	jsr $a082			jsr 	Evaluate16BitInteger
.8336		fa		plx				plx
.8337		68		pla				pla
.8338		60		rts				rts
.8339						TACOCheckXY:
.8339		b1 30		lda ($30),y			lda 	(codePtr),y
.833b		29 c0		and #$c0			and 	#$C0 						; check it is an identifier reference.
.833d		c9 40		cmp #$40			cmp 	#$40
.833f		d0 21		bne $8362			bne 	_TCXYFail
.8341		b1 30		lda ($30),y			lda 	(codePtr),y
.8343		18		clc				clc
.8344		69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8346		85 37		sta $37				sta 	zTemp0+1
.8348		c8		iny				iny
.8349		b1 30		lda ($30),y			lda 	(codePtr),y
.834b		c8		iny				iny
.834c		85 36		sta $36				sta 	zTemp0
.834e		5a		phy				phy 								; save position
.834f		a0 02		ldy #$02			ldy 	#2 							; type is integer ?
.8351		b1 36		lda ($36),y			lda 	(zTemp0),y
.8353		d0 0c		bne $8361			bne 	_TCXYPopFail
.8355		a0 08		ldy #$08			ldy 	#8 							; get first character, should have bit 7 set as also last.
.8357		b1 36		lda ($36),y			lda 	(zTemp0),y
.8359		c9 d8		cmp #$d8			cmp 	#'X'+$80 					; should be X or Y
.835b		f0 08		beq $8365			beq 	_TCXYFound
.835d		c9 d9		cmp #$d9			cmp 	#'Y'+$80
.835f		f0 04		beq $8365			beq 	_TCXYFound
.8361						_TCXYPopFail:
.8361		7a		ply				ply
.8362						_TCXYFail:
.8362		a9 00		lda #$00			lda 	#0
.8364		60		rts				rts
.8365						_TCXYFound:
.8365		7a		ply				ply 								; restore position
.8366		29 7f		and #$7f			and 	#$7F 						; throw bit 7
.8368		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/backload.asm

.8369						BackloadProgram:
.8369		20 0b 8c	jsr $8c0b			jsr 	NewProgram 					; does the actual NEW.
.836c		a2 83		ldx #$83			ldx 	#_BLLoad >> 8
.836e		a9 c0		lda #$c0			lda 	#_BLLoad & $FF
.8370		20 10 92	jsr $9210			jsr 	PrintStringXA
.8373		a9 14		lda #$14			lda 	#SOURCE_ADDRESS >> 13 		; start page
.8375		8d 59 06	sta $0659			sta 	BackLoadPage
.8378		a9 00		lda #$00			lda 	#(($6000) & $FF)
.837a		8d 5a 06	sta $065a			sta 	0+BackLoadPointer
.837d		a9 60		lda #$60			lda 	#(($6000) >> 8)
.837f		8d 5b 06	sta $065b			sta 	1+BackLoadPointer
.8382		a9 ff		lda #$ff			lda 	#$FF
.8384		8d fa ff	sta $fffa			sta 	$FFFA
.8387						_BPLoop:
.8387		a2 ff		ldx #$ff			ldx 	#$FF
.8389		20 d5 83	jsr $83d5			jsr 	BLReadByte 					; read a byte
.838c		c9 00		cmp #$00			cmp 	#0
.838e		f0 29		beq $83b9			beq 	_BPExit 					; if 0 exit
.8390		30 27		bmi $83b9			bmi 	_BPExit 					; if -ve exit
.8392						_BPCopy:
.8392		e8		inx				inx  								; copy byte into the lineBuffer
.8393		9d 2a 05	sta $052a,x			sta 	lineBuffer,x
.8396		9e 2b 05	stz $052b,x			stz 	lineBuffer+1,x
.8399		20 d5 83	jsr $83d5			jsr 	BLReadByte 					; read next byte
.839c		30 0a		bmi $83a8			bmi 	_BPEndLine 					; -ve = EOL
.839e		c9 09		cmp #$09			cmp 	#9 							; handle TAB, make it space.
.83a0		d0 02		bne $83a4			bne 	_BPNotTab
.83a2		a9 20		lda #$20			lda 	#' '
.83a4						_BPNotTab:
.83a4		c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.83a6		b0 ea		bcs $8392			bcs 	_BPCopy 					; until a control character, should be 13 received.
.83a8						_BPEndLine:
.83a8		20 ad 80	jsr $80ad			jsr 	TKTokeniseLine 				; tokenise the line.
.83ab		ad 2b 04	lda $042b			lda 	tokenLineNumber 			; line number = 0
.83ae		0d 2c 04	ora $042c			ora 	tokenLineNumber+1
.83b1		f0 d4		beq $8387			beq 	_BPLoop 					; not legal code, blank line or maybe a comment.
.83b3		ea		nop				nop
.83b4		20 03 84	jsr $8403			jsr 	EditProgramCode
.83b7		80 ce		bra $8387			bra 	_BPLoop
.83b9						_BPExit:
.83b9		9c fa ff	stz $fffa			stz 	$FFFA
.83bc		20 3c 85	jsr $853c			jsr 	ClearCommand 				; clear variables etc.
.83bf		60		rts				rts
.83c0						_BLLoad:
>83c0		4c 6f 61 64 69 6e 67 20				.text 	"Loading from Memory",13,0
>83c8		66 72 6f 6d 20 4d 65 6d 6f 72 79 0d 00
.83d5						BLReadByte:
.83d5		da		phx				phx
.83d6		a6 0b		ldx $0b				ldx 	8+3 						; save current mapping for $6000 in X
.83d8		ad 59 06	lda $0659			lda 	BackLoadPage	 			; set current page
.83db		85 0b		sta $0b				sta 	8+3
.83dd		ad 5a 06	lda $065a			lda 	BackLoadPointer 			; copy pointer to zTemp0
.83e0		85 36		sta $36				sta 	zTemp0
.83e2		ad 5b 06	lda $065b			lda 	BackLoadPointer+1
.83e5		85 37		sta $37				sta 	zTemp0+1
.83e7		b2 36		lda ($36)			lda 	(zTemp0) 					; read next byte
.83e9		ee 5a 06	inc $065a			inc 	BackLoadPointer 			; bump pointer
.83ec		d0 0f		bne $83fd			bne 	_BLNoCarry
.83ee		ee 5b 06	inc $065b			inc 	BackLoadPointer+1
.83f1		10 0a		bpl $83fd			bpl 	_BLNoCarry 					; need a new page
.83f3		48		pha				pha
.83f4		a9 60		lda #$60			lda 	#$60 						; reset pointer
.83f6		8d 5b 06	sta $065b			sta 	BackLoadPointer+1
.83f9		ee 59 06	inc $0659			inc 	BackLoadPage 				; next page from source.
.83fc		68		pla				pla
.83fd						_BLNoCarry:
.83fd		86 0b		stx $0b				stx 	8+3 						; restore mapping, then X.
.83ff		fa		plx				plx
.8400		c9 00		cmp #$00			cmp 	#0
.8402		60		rts				rts
.0659						BackLoadPage:
>0659								.fill  	1
.065a						BackLoadPointer:
>065a								.fill 	2

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/editor.asm

.8403						EditProgramCode:
.8403		ad 2b 04	lda $042b			lda 	tokenLineNumber 			; try to find the line.
.8406		ae 2c 04	ldx $042c			ldx 	tokenLineNumber+1
.8409		20 8d a8	jsr $a88d			jsr 	MemorySearch
.840c		90 05		bcc $8413			bcc 	_EPCNoDelete 				; reached the end : don't delete
.840e		d0 03		bne $8413			bne 	_EPCNoDelete 				; found slot but didn't match : no delete
.8410		20 b2 a7	jsr $a7b2			jsr 	MemoryDeleteLine 			; delete the line
.8413						_EPCNoDelete:
.8413		ad 2d 04	lda $042d			lda 	tokenBuffer 				; buffer empty - we just want to delete a line.
.8416		c9 80		cmp #$80			cmp 	#KWC_EOL
.8418		f0 0d		beq $8427			beq 	_EPCNoInsert
.841a		ad 2b 04	lda $042b			lda 	tokenLineNumber 			; find the line - it cannot exist as we've just deleted it.
.841d		ae 2c 04	ldx $042c			ldx 	tokenLineNumber+1 			; so this can't fail, it returns some point in the code.
.8420		20 8d a8	jsr $a88d			jsr 	MemorySearch
.8423		18		clc				clc 								; insert at this point.
.8424		20 e9 a7	jsr $a7e9			jsr 	MemoryInsertLine 			; insert the line
.8427						_EPCNoInsert:
.8427		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/warmstart.asm

.8428						WarmStart:
.8428		a2 ff		ldx #$ff			ldx 	#$FF
.842a		9a		txs				txs
.842b		a9 89		lda #$89			lda 	#CLICommandLine+$80 		; set console colour whatever the current colour is.
.842d		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.8430		20 2b 80	jsr $802b			jsr 	EXTInputLine 				; get line to lineBuffer
.8433		20 ad 80	jsr $80ad			jsr 	TKTokeniseLine 				; tokenise the line
.8436		ad 2b 04	lda $042b			lda 	tokenLineNumber 			; line number <> 0
.8439		0d 2c 04	ora $042c			ora 	tokenLineNumber+1
.843c		d0 17		bne $8455			bne 	_WSEditCode 				; if so,edit code.
.843e		9c 2a 04	stz $042a			stz 	tokenOffset 				; zero the "offset", meaning it only runs one line.
.8441		a9 2a		lda #$2a			lda 	#((tokenOffset) & $FF)
.8443		85 30		sta $30				sta 	codePtr
.8445		a9 04		lda #$04			lda 	#((tokenOffset) >> 8)
.8447		85 31		sta $31				sta 	codePtr+1
.8449		ad 2d 04	lda $042d			lda 	tokenBuffer 				; nothing to run
.844c		c9 80		cmp #$80			cmp 	#KWC_EOL
.844e		f0 d8		beq $8428			beq 	WarmStart
.8450		20 9b 8d	jsr $8d9b			jsr 	RUNCodePointerLine 			; execute that line.
.8453		80 d3		bra $8428			bra 	WarmStart
.8455						_WSEditCode:
.8455		20 03 84	jsr $8403			jsr 	EditProgramCode 			; edit the program code
.8458		20 3c 85	jsr $853c			jsr 	ClearCommand 				; clear all variables etc.
.845b		80 cb		bra $8428			bra 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assemble.asm

.845d						AssembleCommand:
.845d		a2 00		ldx #$00			ldx 	#0
.845f		20 82 a0	jsr $a082			jsr 	Evaluate16BitInteger 		; start address
.8462		a5 58		lda $58				lda 	NSMantissa0
.8464		8d 1e 04	sta $041e			sta 	AssemblerAddress
.8467		a5 60		lda $60				lda 	NSMantissa1
.8469		8d 1f 04	sta $041f			sta 	AssemblerAddress+1
.846c		20 a6 91	jsr $91a6			jsr 	CheckComma
.846f		20 9d a0	jsr $a09d			jsr 	Evaluate8BitInteger 		; options 0-3
.8472		a5 58		lda $58				lda 	NSMantissa0
.8474		8d 20 04	sta $0420			sta 	AssemblerControl
.8477		60		rts				rts
.8478		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assert.asm

.8479						AssertCommand:
.8479		a2 00		ldx #$00			ldx 	#0 							; bottom of stack
.847b		20 6f a0	jsr $a06f			jsr 	EvaluateInteger 			; the assert test
.847e		20 24 a1	jsr $a124			jsr 	NSMIsZero 					; exit if result is non zero.
.8481		d0 05		bne $8488			bne 	_ACExit
.8483		a9 0a		lda #$0a		lda	#10
.8485		4c b7 91	jmp $91b7		jmp	ErrorHandler
.8488						_ACExit:
.8488		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/bload.asm

.8489						Command_BLoad:
.8489		a2 00		ldx #$00			ldx 	#0
.848b		20 5a a0	jsr $a05a			jsr 	EvaluateString 				; file name to load
.848e		20 a6 91	jsr $91a6			jsr 	CheckComma 					; consume comma
.8491		e8		inx				inx
.8492		20 6f a0	jsr $a06f			jsr 	EvaluateInteger 			; load address (full physical address)
>8495		db						.byte 	$DB 						; causes a break in the emulator
.8496		5a		phy				phy
.8497		a5 58		lda $58				lda 	NSMantissa0					; file name -> XA
.8499		a6 60		ldx $60				ldx 	NSMantissa1
.849b		a2 01		ldx #$01			ldx 	#1 							; address is in slot # 1
.849d		20 ce 84	jsr $84ce			jsr 	BLOpenPhysicalMemory 		; open for access.
.84a0		ac 5d 06	ldy $065d			ldy 	BLYOffset
.84a3		a2 00		ldx #$00			ldx 	#0 							; write 0 to 16 out
.84a5						_BLTest:
.84a5		8a		txa				txa
.84a6		09 80		ora #$80			ora 	#$80
.84a8		91 3a		sta ($3a),y			sta 	(zTemp2),y
.84aa		c8		iny				iny
.84ab		d0 03		bne $84b0			bne 	_BLNoAdjust
.84ad		20 f6 84	jsr $84f6			jsr 	BLAdvancePhysicalMemory
.84b0						_BLNoAdjust:
.84b0		e8		inx				inx
.84b1		e0 10		cpx #$10			cpx 	#16
.84b3		d0 f0		bne $84a5			bne 	_BLTest
.84b5		20 f0 84	jsr $84f0			jsr 	BLClosePhysicalMemory 		; close the access.
.84b8		ad 60 06	lda $0660			lda 	CurrentFileStream 			; close the file
.84bb		20 7b 80	jsr $807b			jsr 	KNLCloseFile
.84be		7a		ply				ply
.84bf		60		rts				rts
.84c0						CBLCloseError:
.84c0		48		pha				pha
.84c1		20 f0 84	jsr $84f0			jsr 	BLClosePhysicalMemory
.84c4		ad 60 06	lda $0660			lda 	CurrentFileStream
.84c7		20 7b 80	jsr $807b			jsr 	KNLCloseFile
.84ca		68		pla				pla
.84cb						CBLErrorHandler:
.84cb		4c f4 8a	jmp $8af4			jmp 	CLErrorHandler
=3						BLAccessPage = 3 							; page to use for actual memory.
.84ce						BLOpenPhysicalMemory:
.84ce		a5 0b		lda $0b				lda 	BLAccessPage+8 				; save current mapping
.84d0		8d 5c 06	sta $065c			sta 	BLNormalMapping
.84d3		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy address, 13 bit adjusted for page -> (zTemp2),BLYOffset
.84d5		8d 5d 06	sta $065d			sta 	BLYOffset 					; zTemp2 0 is *always* zero.
.84d8		64 3a		stz $3a				stz 	zTemp2
.84da		b5 60		lda $60,x			lda 	NSMantissa1,x
.84dc		29 1f		and #$1f			and 	#$1F
.84de		09 60		ora #$60			ora 	#BLAccessPage << 5
.84e0		85 3b		sta $3b				sta 	zTemp2+1
.84e2		b5 68		lda $68,x			lda 	NSMantissa2,x 				; shift M2:M1 right 3 times to give page # required
.84e4		16 60		asl $60,x			asl 	NSMantissa1,x
.84e6		2a		rol a				rol 	a
.84e7		16 60		asl $60,x			asl 	NSMantissa1,x
.84e9		2a		rol a				rol 	a
.84ea		16 60		asl $60,x			asl 	NSMantissa1,x
.84ec		2a		rol a				rol 	a
.84ed		85 0b		sta $0b				sta 	BLAccessPage+8 				; access that page
.84ef		60		rts				rts
.84f0						BLClosePhysicalMemory:
.84f0		ad 5c 06	lda $065c			lda 	BLNormalMapping
.84f3		85 0b		sta $0b				sta 	BLAccessPage+8
.84f5		60		rts				rts
.84f6						BLAdvancePhysicalMemory:
.84f6		48		pha				pha
.84f7		e6 3b		inc $3b				inc		zTemp2+1 					; bump MSB
.84f9		a5 3b		lda $3b				lda 	zTemp2+1
.84fb		c9 80		cmp #$80			cmp 	#(BLAccessPage+1) << 5 		; reached next page ?
.84fd		d0 06		bne $8505			bne 	_BLAPMExit 					; (e.g. end of the mapped page.)
.84ff		e6 0b		inc $0b				inc 	BLAccessPage+8 				; next physical page
.8501		a9 60		lda #$60			lda 	#BLAccessPage << 5 			; page back to start of transfer page
.8503		85 3b		sta $3b				sta 	zTemp2+1
.8505						_BLAPMExit:
.8505		68		pla				pla
.8506		60		rts				rts
.065c						BLNormalMapping:
>065c								.fill 	1
.065d						BLYOffset:
>065d								.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/call.asm

.8507						CallCommand:
.8507		a2 00		ldx #$00			ldx 	#0 							; get the routine address to level 0
.8509		20 82 a0	jsr $a082			jsr 	Evaluate16BitInteger
.850c						_CCClear
.850c		e8		inx				inx  								; clear 1,2 and 3 (for A X Y)
.850d		20 02 a1	jsr $a102			jsr 	NSMSetZero 					; these are optional sequentially.
.8510		e0 04		cpx #$04			cpx 	#4
.8512		d0 f8		bne $850c			bne 	_CCClear
.8514		a2 00		ldx #$00			ldx 	#0 							; and keep trying while there are more values.
.8516						_CCCParam:
.8516		b1 30		lda ($30),y			lda 	(codePtr),y
.8518		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.851a		d0 09		bne $8525			bne 	_CCCRun6502
.851c		c8		iny				iny 								; skip comma
.851d		e8		inx				inx	 								; next level
.851e		20 9d a0	jsr $a09d			jsr 	Evaluate8BitInteger 		; get A/X/Y
.8521		e0 03		cpx #$03			cpx 	#3
.8523		90 f1		bcc $8516			bcc 	_CCCParam 					; done all 3 ?
.8525						_CCCRun6502:
.8525		5a		phy				phy 								; save position
.8526		a5 60		lda $60				lda 	NSMantissa1 				; put address in zTemp0
.8528		85 37		sta $37				sta 	zTemp0+1
.852a		a5 58		lda $58				lda 	NSMantissa0
.852c		85 36		sta $36				sta 	zTemp0
.852e		a5 59		lda $59				lda 	NSMantissa0+1 				; get registers into A X Y
.8530		a6 5a		ldx $5a				ldx 	NSMantissa0+2
.8532		a4 5b		ldy $5b				ldy 	NSMantissa0+3
.8534		20 39 85	jsr $8539			jsr 	_CCCZTemp0 					; call zTemp0
.8537		7a		ply				ply 								; restore position and exit
.8538		60		rts				rts
.8539						_CCCZTemp0:
.8539		6c 36 00	jmp ($0036)			jmp 	(zTemp0)

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/clear.asm

.853c						ClearCommand:
.853c		a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.853e		85 36		sta $36				sta 	0+zTemp0
.8540		a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.8542		85 37		sta $37				sta 	1+zTemp0
.8544						_ClearZeroLoop:
.8544		b2 36		lda ($36)			lda 	(zTemp0) 					; end of variables if offset is zero.
.8546		f0 24		beq $856c			beq 	_ClearZeroEnd
.8548		a0 03		ldy #$03			ldy 	#3 							; erase the variables
.854a		a9 00		lda #$00			lda 	#0 							; set all the data to zero.
.854c						_ClearOneVariable:
.854c		91 36		sta ($36),y			sta 	(zTemp0),y
.854e		c8		iny				iny
.854f		c0 08		cpy #$08			cpy 	#8
.8551		d0 f9		bne $854c			bne 	_ClearOneVariable
.8553		a0 02		ldy #$02			ldy 	#2 							; has it been marked procedure
.8555		b1 36		lda ($36),y			lda 	(zTemp0),y
.8557		c9 18		cmp #$18			cmp 	#NSTProcedure
.8559		d0 04		bne $855f			bne 	_ClearNotProcedure
.855b		a9 04		lda #$04			lda 	#NSTInteger+NSBIsArray 		; if so set it back to an integer array
.855d		91 36		sta ($36),y			sta 	(zTemp0),y 					; will be fixed on the pre-run scan.
.855f						_ClearNotProcedure:
.855f		18		clc				clc 								; go to the next variable
.8560		b2 36		lda ($36)			lda 	(zTemp0) 					; offset to next, add to zTemp0
.8562		65 36		adc $36				adc 	zTemp0
.8564		85 36		sta $36				sta 	zTemp0
.8566		90 dc		bcc $8544			bcc 	_ClearZeroLoop
.8568		e6 37		inc $37				inc 	zTemp0+1
.856a		80 d8		bra $8544			bra 	_ClearZeroLoop
.856c						_ClearZeroEnd:
.856c		18		clc				clc
.856d		a5 36		lda $36				lda 	zTemp0
.856f		69 01		adc #$01			adc 	#1
.8571		8d 0c 04	sta $040c			sta 	lowMemPtr
.8574		a5 37		lda $37				lda 	zTemp0+1
.8576		69 00		adc #$00			adc 	#0
.8578		8d 0d 04	sta $040d			sta 	lowMemPtr+1
.857b		20 47 b2	jsr $b247			jsr 	StackReset
.857e		20 ad b2	jsr $b2ad			jsr 	StringSystemInitialise
.8581		20 a7 90	jsr $90a7			jsr 	ProcedureScan
.8584		20 4a 8d	jsr $8d4a			jsr 	Command_Restore
.8587		9c 1e 04	stz $041e			stz 	AssemblerAddress
.858a		9c 1f 04	stz $041f			stz 	AssemblerAddress+1
.858d		9c 20 04	stz $0420			stz 	AssemblerControl
.8590		20 f1 9c	jsr $9cf1			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.8593		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/cls.asm

.8594						ClearScreen:
.8594		5a		phy				phy
.8595		a9 0c		lda #$0c			lda 	#12 						; char code 12 clears the screen.
.8597		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.859a		7a		ply				ply
.859b		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/data.asm

.859c						Command_Data:
.859c		a9 3a		lda #$3a			lda 	#KWD_COLON 					; advance to colon/EOL, e.g. ignore anything till then.
.859e		a2 80		ldx #$80			ldx 	#KWC_EOL
.85a0		20 f9 90	jsr $90f9			jsr 	ScanForward
.85a3		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/dim.asm

.85a4						DimCommand:
.85a4		b1 30		lda ($30),y			lda 	(codePtr),y
.85a6		29 c0		and #$c0			and 	#$C0
.85a8		c9 40		cmp #$40			cmp 	#$40
.85aa		d0 7a		bne $8626			bne 	_DCSyntax 				; n o, error.
.85ac		b1 30		lda ($30),y			lda 	(codePtr),y
.85ae		18		clc				clc
.85af		69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.85b1		85 3f		sta $3f				sta 	zaTemp+1
.85b3		c8		iny				iny
.85b4		b1 30		lda ($30),y			lda 	(codePtr),y
.85b6		c8		iny				iny
.85b7		85 3e		sta $3e				sta 	zaTemp
.85b9		5a		phy				phy
.85ba		a0 02		ldy #$02			ldy 	#2 						; read type byte
.85bc		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.85be		29 18		and #$18			and 	#NSBTypeMask 			; check it's not a procedure
.85c0		c9 18		cmp #$18			cmp 	#NSTProcedure
.85c2		f0 62		beq $8626			beq 	_DCSyntax
.85c4		b1 3e		lda ($3e),y			lda 	(zaTemp),y 				; check it's an array
.85c6		29 04		and #$04			and 	#NSBIsArray
.85c8		f0 64		beq $862e			beq 	_DCType
.85ca		a0 04		ldy #$04			ldy 	#4 						; check not already defined
.85cc		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.85ce		d0 59		bne $8629			bne 	_DCRedefine
.85d0		7a		ply				ply
.85d1		20 31 86	jsr $8631			jsr 	_DCGetSize 				; get array size, check it.
.85d4		5a		phy				phy
.85d5		a0 05		ldy #$05			ldy 	#5 						; store in first array size slot
.85d7		91 3e		sta ($3e),y			sta 	(zaTemp),y 				; second will be zero.
.85d9		7a		ply				ply 							; is there a second (e.g. ,x)
.85da		b1 30		lda ($30),y			lda 	(codePtr),y
.85dc		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.85de		d0 0a		bne $85ea			bne 	_DCOneDimension
.85e0		c8		iny				iny 							; skip comma
.85e1		20 31 86	jsr $8631			jsr 	_DCGetSize 				; get 2nd array size
.85e4		5a		phy				phy
.85e5		a0 06		ldy #$06			ldy 	#6 						; store in 2nd array size
.85e7		91 3e		sta ($3e),y			sta 	(zaTemp),y
.85e9		7a		ply				ply
.85ea						_DCOneDimension:
.85ea		5a		phy				phy 							; save position
.85eb		a0 05		ldy #$05			ldy 	#5 						; dimensions + 1 in AX (as zero based)
.85ed		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.85ef		aa		tax				tax
.85f0		c8		iny				iny
.85f1		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.85f3		e8		inx				inx 							; bump them.
.85f4		1a		inc a				inc 	a
.85f5		20 ad a0	jsr $a0ad			jsr 	Multiply8x8 			; work out the total number of elements -> zTemp0
.85f8		a5 37		lda $37				lda 	zTemp0+1 				; don't allow more than 8192 elements whatever
.85fa		29 e0		and #$e0			and 	#$E0
.85fc		d0 23		bne $8621			bne 	_DCSize
.85fe		a0 02		ldy #$02			ldy 	#2 						; get base type
.8600		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8602		20 3f 86	jsr $863f			jsr 	ScaleByBaseType 		; scale by base type
.8605		a5 36		lda $36				lda 	zTemp0
.8607		a6 37		ldx $37				ldx 	zTemp0+1
.8609		20 b3 9c	jsr $9cb3			jsr 	AllocateXABytes 		; allocate memory
.860c		a0 03		ldy #$03			ldy 	#3 						; copy into the address.
.860e		91 3e		sta ($3e),y			sta 	(zaTemp),y
.8610		c8		iny				iny
.8611		8a		txa				txa
.8612		91 3e		sta ($3e),y			sta 	(zaTemp),y
.8614		7a		ply				ply 							; get position back
.8615		20 9e 91	jsr $919e			jsr 	CheckRightBracket 		; check )
.8618		b1 30		lda ($30),y			lda 	(codePtr),y
.861a		c8		iny				iny 							; consume in case
.861b		c9 2c		cmp #$2c			cmp 	#KWD_COMMA		 		; if so do another DIM.
.861d		f0 85		beq $85a4			beq 	DimCommand
.861f		88		dey				dey 							; undo consume
.8620		60		rts				rts
.8621						_DCSize:
.8621		a9 16		lda #$16		lda	#22
.8623		4c b7 91	jmp $91b7		jmp	ErrorHandler
.8626						_DCSyntax:
.8626		4c 80 a2	jmp $a280			jmp 	SyntaxError
.8629						_DCRedefine:
.8629		a9 15		lda #$15		lda	#21
.862b		4c b7 91	jmp $91b7		jmp	ErrorHandler
.862e						_DCType:
.862e		4c 8a a2	jmp $a28a			jmp 	TypeError
.8631						_DCGetSize:
.8631		a2 00		ldx #$00			ldx 	#0 						; get first index.
.8633		20 9d a0	jsr $a09d			jsr 	Evaluate8BitInteger 	; get array dimension
.8636		c9 00		cmp #$00			cmp 	#0 						; must be 1-254
.8638		f0 e7		beq $8621			beq 	_DCSize
.863a		c9 fe		cmp #$fe			cmp 	#254
.863c		f0 e3		beq $8621			beq 	_DCSize
.863e		60		rts				rts
.863f						ScaleByBaseType:
.863f		29 10		and #$10			and 	#NSBIsString 			; is it string
.8641		d0 19		bne $865c			bne 	_SBBTString
.8643		a5 37		lda $37				lda 	zTemp0+1 				; push value on stack
.8645		48		pha				pha
.8646		a5 36		lda $36				lda 	zTemp0
.8648		48		pha				pha
.8649		06 36		asl $36				asl 	zTemp0 					; x 2
.864b		26 37		rol $37				rol 	zTemp0+1
.864d		06 36		asl $36				asl 	zTemp0 					; x 4
.864f		26 37		rol $37				rol 	zTemp0+1
.8651		68		pla				pla 							; add stacked value = x 5
.8652		65 36		adc $36				adc 	zTemp0
.8654		85 36		sta $36				sta 	zTemp0
.8656		68		pla				pla
.8657		65 37		adc $37				adc 	zTemp0+1
.8659		85 37		sta $37				sta 	zTemp0+1
.865b		60		rts				rts
.865c						_SBBTString:
.865c		06 36		asl $36				asl 	zTemp0
.865e		26 37		rol $37				rol 	zTemp0+1
.8660		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/dir.asm

.8661						Command_Dir:
.8661		ad 5e 06	lda $065e			lda     DefaultDrive				; set drive to list.
.8664		85 f3		sta $f3				sta     kernel.args.directory.open.drive
.8666		64 fd		stz $fd				stz     kernel.args.directory.open.fname_len
.8668		20 74 ff	jsr $ff74			jsr     kernel.Directory.Open
.866b		b0 56		bcs $86c3			bcs     _CDExit
.866d						_CDEventLoop:
.866d		20 0c ff	jsr $ff0c			jsr     kernel.Yield        		; Polite, not actually needed.
.8670		20 00 ff	jsr $ff00			jsr     kernel.NextEvent
.8673		b0 f8		bcs $866d			bcs     _CDEventLoop
.8675		ad 49 08	lda $0849			lda     event.type
.8678		c9 44		cmp #$44			cmp     #kernel.event.directory.CLOSED
.867a		f0 47		beq $86c3			beq    	_CDExit
.867c		20 81 86	jsr $8681			jsr     _CDMessages 				; handle various messages
.867f		80 ec		bra $866d			bra     _CDEventLoop
.8681						_CDMessages:
.8681		c9 3a		cmp #$3a			cmp     #kernel.event.directory.OPENED
.8683		f0 15		beq $869a			beq     _CDEVRead
.8685		c9 3c		cmp #$3c			cmp     #kernel.event.directory.VOLUME
.8687		f0 19		beq $86a2			beq     _CDEVVolume
.8689		c9 3e		cmp #$3e			cmp     #kernel.event.directory.FILE
.868b		f0 17		beq $86a4			beq     _CDEVFile
.868d		c9 40		cmp #$40			cmp     #kernel.event.directory.FREE
.868f		f0 28		beq $86b9			beq     _CDEVFree
.8691		c9 42		cmp #$42			cmp     #kernel.event.directory.EOF
.8693		f0 26		beq $86bb			beq     _CDEVEOF
.8695		c9 46		cmp #$46			cmp     #kernel.event.directory.ERROR
.8697		f0 22		beq $86bb			beq     _CDEVEOF
.8699		60		rts				rts
.869a						_CDEVRead:
.869a		ad 4c 08	lda $084c			lda     event.directory.stream
.869d		85 f3		sta $f3				sta     kernel.args.directory.read.stream
.869f		4c 78 ff	jmp $ff78			jmp     kernel.Directory.Read
.86a2						_CDEVVolume:
.86a2		80 f6		bra $869a			bra     _CDEVRead
.86a4						_CDEVFile:
.86a4		a9 20		lda #$20			lda 	#32
.86a6		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.86a9		ad 4e 08	lda $084e			lda     event.directory.file.len
.86ac		20 c6 86	jsr $86c6			jsr     _CDReadData
.86af		20 10 92	jsr $9210			jsr 	PrintStringXA
.86b2		a9 0d		lda #$0d			lda 	#13
.86b4		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.86b7		80 e1		bra $869a			bra     _CDEVRead
.86b9						_CDEVFree:
.86b9		80 00		bra $86bb			bra     _CDEVEOF
.86bb						_CDEVEOF:
.86bb		ad 4c 08	lda $084c			lda     event.directory.stream
.86be		85 f3		sta $f3				sta     kernel.args.directory.close.stream
.86c0		4c 7c ff	jmp $ff7c			jmp     kernel.Directory.Close
.86c3						_CDExit:
.86c3		4c 28 84	jmp $8428			jmp 	WarmStart
.86c6						_CDReadData:
.86c6		85 fd		sta $fd				sta     kernel.args.recv.buflen
.86c8		a9 2a		lda #$2a			lda     #lineBuffer & $FF
.86ca		85 fb		sta $fb				sta     kernel.args.recv.buf+0
.86cc		a9 05		lda #$05			lda     #lineBuffer >> 8
.86ce		85 fc		sta $fc				sta     kernel.args.recv.buf+1
.86d0		20 04 ff	jsr $ff04			jsr     kernel.ReadData
.86d3		a6 fd		ldx $fd				ldx     kernel.args.recv.buflen
.86d5		9e 2a 05	stz $052a,x			stz     lineBuffer,x
.86d8		a9 2a		lda #$2a			lda 	#lineBuffer & $FF
.86da		a2 05		ldx #$05			ldx 	#lineBuffer >> 8
.86dc		60		rts				rts
.86dd						print_ext

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/drive.asm

.86dd						Command_Drive:
.86dd		20 9d a0	jsr $a09d			jsr 	Evaluate8BitInteger
.86e0		8d 5e 06	sta $065e			sta 	DefaultDrive
.86e3		60		rts				rts
.065e						DefaultDrive:
>065e								.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/end.asm

.86e4						EndCommand:
.86e4		4c 28 84	jmp $8428			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/for.asm

.86e7						ForCommand:
.86e7		a9 d9		lda #$d9			lda 	#STK_FOR+9 					; allocate 18 bytes on the return stack (see above).
.86e9		20 e1 b1	jsr $b1e1			jsr 	StackOpen
.86ec		a2 00		ldx #$00			ldx 	#0
.86ee		20 05 9b	jsr $9b05			jsr 	EvaluateTerm
.86f1		b5 50		lda $50,x			lda 	NSStatus,x
.86f3		c9 20		cmp #$20			cmp 	#NSBIsReference+NSTInteger 	; do we have an integer 4 byte reference.
.86f5		d0 47		bne $873e			bne		_FCError
.86f7		a9 3d		lda #$3d			lda 	#KWD_EQUAL 					; =
.86f9		20 ae 91	jsr $91ae			jsr 	CheckNextA
.86fc		e8		inx				inx
.86fd		20 6f a0	jsr $a06f			jsr 	EvaluateInteger 			; <from> in +1
.8700		b1 30		lda ($30),y			lda 	(codePtr),y
.8702		c8		iny				iny 								; consume it
.8703		48		pha				pha 								; save on stack for later
.8704		c9 bb		cmp #$bb			cmp 	#KWD_DOWNTO
.8706		f0 04		beq $870c			beq 	_FCNoSyntax
.8708		c9 d9		cmp #$d9			cmp 	#KWD_TO
.870a		d0 35		bne $8741			bne 	_FCSyntaxError
.870c						_FCNoSyntax:
.870c		e8		inx				inx
.870d		20 6f a0	jsr $a06f			jsr 	EvaluateInteger
.8710		20 26 b2	jsr $b226			jsr 	STKSaveCodePosition 		; save loop back position
.8713		68		pla				pla 								; restore DOWNTO or TO
.8714		5a		phy				phy 								; save Y on the stack
.8715		49 bb		eor #$bb			eor 	#KWD_DOWNTO 				; 0 if DOWNTO, #0 if TO
.8717		f0 02		beq $871b			beq 	_FCNotDownTo
.8719		a9 02		lda #$02			lda 	#2
.871b						_FCNotDownTo:
.871b		3a		dec a				dec 	a 							; 255 if DOWNTO, 1 if TO
.871c		a0 10		ldy #$10			ldy 	#16
.871e		91 34		sta ($34),y			sta 	(basicStack),y 				; copy that out to the Basic Stack.
.8720		a0 06		ldy #$06			ldy 	#6 							; this is the address of the loop variable.
.8722		a5 58		lda $58				lda 	NSMantissa0
.8724		91 34		sta ($34),y			sta 	(basicStack),y
.8726		a5 60		lda $60				lda 	NSMantissa1
.8728		c8		iny				iny
.8729		91 34		sta ($34),y			sta 	(basicStack),y
.872b		a0 08		ldy #$08			ldy 	#8 							; set initial index value
.872d		a2 01		ldx #$01			ldx 	#1
.872f		20 44 87	jsr $8744			jsr 	FCIntegerToStack
.8732		a0 0c		ldy #$0c			ldy 	#12 						; set the terminal value
.8734		a2 02		ldx #$02			ldx 	#2
.8736		20 44 87	jsr $8744			jsr 	FCIntegerToStack
.8739		20 5f 87	jsr $875f			jsr 	CopyIndexToReference
.873c		7a		ply				ply 								; restore position
.873d		60		rts				rts
.873e						_FCError:
.873e		4c 8a a2	jmp $a28a			jmp 	TypeError
.8741						_FCSyntaxError:
.8741		4c 80 a2	jmp $a280			jmp 	SyntaxError
.8744						FCIntegerToStack:
.8744		34 50		bit $50,x			bit 	NSStatus,x 					; is the value negative
.8746		10 03		bpl $874b			bpl	 	_FCNotNegative
.8748		20 cb a0	jsr $a0cb			jsr 	NSMNegateMantissa 			; if so 2's complement the mantissa
.874b						_FCNotNegative:
.874b		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy out to the basic stack
.874d		91 34		sta ($34),y			sta 	(basicStack),y
.874f		c8		iny				iny
.8750		b5 60		lda $60,x			lda 	NSMantissa1,x
.8752		91 34		sta ($34),y			sta 	(basicStack),y
.8754		c8		iny				iny
.8755		b5 68		lda $68,x			lda 	NSMantissa2,x
.8757		91 34		sta ($34),y			sta 	(basicStack),y
.8759		c8		iny				iny
.875a		b5 70		lda $70,x			lda 	NSMantissa3,x
.875c		91 34		sta ($34),y			sta 	(basicStack),y
.875e		60		rts				rts
.875f						CopyIndexToReference:
.875f		5a		phy				phy
.8760		a0 06		ldy #$06			ldy 	#6 							; copy address-8 to write to zTemp0
.8762		38		sec				sec 								; (because we copy from offset 8)
.8763		b1 34		lda ($34),y			lda 	(basicStack),y
.8765		e9 08		sbc #$08			sbc 	#8
.8767		85 36		sta $36				sta 	zTemp0
.8769		c8		iny				iny
.876a		b1 34		lda ($34),y			lda 	(basicStack),y
.876c		e9 00		sbc #$00			sbc 	#0
.876e		85 37		sta $37				sta 	zTemp0+1
.8770		a2 04		ldx #$04			ldx 	#4 							; this is the copy counter/
.8772		a0 0b		ldy #$0b			ldy 	#8+3 		 				; the MSB of the mantissa
.8774		b1 34		lda ($34),y			lda 	(basicStack),y
.8776		0a		asl a				asl 	a 							; into carry
.8777		a0 08		ldy #$08			ldy 	#8 							; where to copy from.
.8779		90 14		bcc $878f			bcc 	_CITRNormal
.877b		38		sec				sec
.877c						_CITRNegative:
.877c		a9 00		lda #$00			lda 	#0
.877e		f1 34		sbc ($34),y			sbc 	(basicStack),y
.8780		91 36		sta ($36),y			sta 	(zTemp0),y
.8782		c8		iny				iny
.8783		ca		dex				dex
.8784		d0 f6		bne $877c			bne 	_CITRNegative
.8786		88		dey				dey 								; look at MSB of mantissa
.8787		b1 36		lda ($36),y			lda 	(zTemp0),y 					; set the MSB as negative packed.
.8789		09 80		ora #$80			ora 	#$80
.878b		91 36		sta ($36),y			sta 	(zTemp0),y
.878d		7a		ply				ply
.878e		60		rts				rts
.878f						_CITRNormal:
.878f		b1 34		lda ($34),y			lda 	(basicStack),y 				; copy without negation.
.8791		91 36		sta ($36),y			sta 	(zTemp0),y
.8793		c8		iny				iny
.8794		ca		dex				dex
.8795		d0 f8		bne $878f			bne 	_CITRNormal
.8797		7a		ply				ply 								; and exit.
.8798		60		rts				rts
.8799						NextCommand:
.8799		a9 d9		lda #$d9			lda 	#STK_FOR+9 					; check FOR is TOS
.879b		a2 11		ldx #$11			ldx 	#ERRID_FOR 					; this error
.879d		20 0e b2	jsr $b20e			jsr 	StackCheckFrame
.87a0		5a		phy				phy
.87a1		a0 10		ldy #$10			ldy 	#16 						; get the step count
.87a3		b1 34		lda ($34),y			lda 	(basicStack),y
.87a5		85 36		sta $36				sta 	zTemp0 						; this is the sign extend
.87a7		30 02		bmi $87ab			bmi 	_NCStepNeg
.87a9		64 36		stz $36				stz 	zTemp0 						; which is 0 or 255
.87ab						_NCStepNeg:
.87ab		a0 08		ldy #$08			ldy 	#8 							; offset to bump
.87ad		a2 04		ldx #$04			ldx 	#4 							; count to bump
.87af		18		clc				clc
.87b0						_NCBump:
.87b0		71 34		adc ($34),y			adc 	(basicStack),y 				; add it
.87b2		91 34		sta ($34),y			sta 	(basicStack),y
.87b4		a5 36		lda $36				lda 	zTemp0 						; get sign extend for next time.
.87b6		c8		iny				iny 								; next byte
.87b7		ca		dex				dex 								; do four times
.87b8		d0 f6		bne $87b0			bne 	_NCBump
.87ba		20 5f 87	jsr $875f			jsr		CopyIndexToReference		; copy it to the reference variable.
.87bd		a0 10		ldy #$10			ldy 	#16 						; get step count again
.87bf		b1 34		lda ($34),y			lda 	(basicStack),y
.87c1		0a		asl a				asl 	a 							; sign bit to carry
.87c2		a9 0c		lda #$0c			lda 	#12 						; offset of LHS = terminal offset
.87c4		85 38		sta $38				sta 	zTemp1
.87c6		90 02		bcc $87ca			bcc 	_NCCompRev 					; use if step is +ve
.87c8		a9 08		lda #$08			lda 	#8 							; now the LHS = index value
.87ca						_NCCompRev:
.87ca		85 38		sta $38				sta 	zTemp1 						; so zTemp0 is the index for LHS
.87cc		49 04		eor #$04			eor 	#(8^12) 					; and zTemp0+1 is the index for RHS
.87ce		85 39		sta $39				sta 	zTemp1+1
.87d0		a2 04		ldx #$04			ldx 	#4 							; bytes to compare
.87d2		38		sec				sec
.87d3						_NCCompare:
.87d3		a4 38		ldy $38				ldy 	zTemp1 						; do compare using the two indices
.87d5		b1 34		lda ($34),y			lda 	(basicStack),y
.87d7		a4 39		ldy $39				ldy 	zTemp1+1
.87d9		f1 34		sbc ($34),y			sbc 	(basicStack),y
.87db		e6 38		inc $38				inc 	zTemp1 						; bump the indices (inc,dex do not change C or V)
.87dd		e6 39		inc $39				inc 	zTemp1+1
.87df		ca		dex				dex 								; do it 4 times.
.87e0		d0 f1		bne $87d3			bne 	_NCCompare
.87e2		50 02		bvc $87e6			bvc 	_NCNoOverflow 				; convert to signed comparison
.87e4		49 80		eor #$80			eor 	#$80
.87e6						_NCNoOverflow:
.87e6		7a		ply				ply 								; restore Y position
.87e7		0a		asl a				asl 	a 							; is bit 7 set.
.87e8		90 04		bcc $87ee			bcc 	_NCLoopBack 				; if no , >= so loop back
.87ea		20 00 b2	jsr $b200			jsr 	StackClose 					; exit the loop
.87ed		60		rts				rts
.87ee						_NCLoopBack:
.87ee		20 37 b2	jsr $b237			jsr 	STKLoadCodePosition 		; loop back
.87f1		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/gosub.asm

.87f2						Command_GOSUB:
.87f2		a2 00		ldx #$00			ldx 	#0
.87f4		20 82 a0	jsr $a082			jsr 	Evaluate16BitInteger 		; line number in Stack.0
.87f7		a9 e3		lda #$e3			lda 	#STK_GOSUB+3
.87f9		20 e1 b1	jsr $b1e1			jsr 	StackOpen 					; create frame
.87fc		20 26 b2	jsr $b226			jsr 	STKSaveCodePosition 		; save current position
.87ff		4c 15 88	jmp $8815			jmp 	GotoStackX
.8802						Command_RETURN:
.8802		a9 e0		lda #$e0			lda 	#STK_GOSUB 					; check TOS is this
.8804		a2 0e		ldx #$0e			ldx 	#ERRID_GOSUB 				; this error
.8806		20 0e b2	jsr $b20e			jsr 	StackCheckFrame
.8809		20 37 b2	jsr $b237			jsr 	STKLoadCodePosition 		; restore code position
.880c		20 00 b2	jsr $b200			jsr 	StackClose
.880f		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/goto.asm

.8810						GotoCommand:
.8810		a2 00		ldx #$00			ldx 	#0 							; GOTO where
.8812		20 82 a0	jsr $a082			jsr 	Evaluate16BitInteger
.8815						GotoStackX:
.8815		b5 60		lda $60,x			lda  	NSMantissa1,x 				; put line # in XA. I'll keep this even though
.8817		48		pha				pha 								; it is slightly inefficient, just in cases.
.8818		b5 58		lda $58,x			lda 	NSMantissa0,x
.881a		fa		plx				plx
.881b		20 8d a8	jsr $a88d			jsr 	MemorySearch 				; transfer to line number AX.
.881e		90 05		bcc $8825			bcc 	_GotoError 					; not found, off end.
.8820		d0 03		bne $8825			bne 	_GotoError 					; not found exactly
.8822		4c 94 8d	jmp $8d94			jmp 	RunNewLine 					; and go straight to new line code.
.8825						_GotoError:
.8825		a9 0d		lda #$0d		lda	#13
.8827		4c b7 91	jmp $91b7		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/if.asm

.882a						IfCommand:
.882a		a2 00		ldx #$00			ldx 	#0 							; Get the if test.
.882c		20 50 a0	jsr $a050			jsr 	EvaluateNumber
.882f		b1 30		lda ($30),y			lda 	(codePtr),y
.8831		c9 ae		cmp #$ae			cmp 	#KWD_THEN  					; could be THEN <stuff>
.8833		d0 0a		bne $883f			bne 	_IfStructured 				; we still support it.
.8835		c8		iny				iny 								; consume THEN
.8836		20 24 a1	jsr $a124			jsr 	NSMIsZero 					; is it zero
.8839		f0 01		beq $883c			beq 	_IfFail 					; if fail, go to next line
.883b		60		rts				rts 								; if THEN just continue
.883c						_IfFail:
.883c		4c 7c 8d	jmp $8d7c			jmp 	EOLCommand
.883f						_IfStructured:
.883f		20 24 a1	jsr $a124			jsr 	NSMIsZero 					; is it zero
.8842		d0 07		bne $884b			bne 	_IfExit 					; if not, then continue normally.
.8844		a9 bc		lda #$bc			lda 	#KWD_ELSE 					; look for else/endif
.8846		a2 ab		ldx #$ab			ldx 	#KWD_ENDIF
.8848		20 f9 90	jsr $90f9			jsr 	ScanForward 				; and run from there
.884b						_IfExit:
.884b		60		rts				rts
.884c						ElseCode:
.884c		a9 ab		lda #$ab			lda 	#KWD_ENDIF 					; else is only run after the if clause succeeds
.884e		aa		tax				tax 								; so just go to the structure exit
.884f		20 f9 90	jsr $90f9			jsr 	ScanForward
.8852		60		rts				rts
.8853						EndIf:
.8853		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/inputprint.asm

.8854						Command_Input:
.8854		9c 28 04	stz $0428			stz 	isPrintFlag
.8857		80 0c		bra $8865			bra 	Command_IP_Main
.8859						Command_CPrint:
.8859		a9 7f		lda #$7f			lda 	#$7F 						; set input flag to character mode
.885b		8d 28 04	sta $0428			sta 	isPrintFlag 				; clear input flag
.885e		80 05		bra $8865			bra 	Command_IP_Main
.8860						Command_Print:
.8860		a9 ff		lda #$ff			lda 	#$FF 						; set input flag
.8862		8d 28 04	sta $0428			sta 	isPrintFlag 				; clear input flag
.8865						Command_IP_Main:
.8865		18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.8866						_CPLoop:
.8866		08		php				php 								; save last action flag
.8867		b1 30		lda ($30),y			lda 	(codePtr),y
.8869		c9 80		cmp #$80			cmp  	#KWC_EOL 					; end of line or colon, exit now.
.886b		f0 54		beq $88c1			beq 	_CPExit
.886d		c9 3a		cmp #$3a			cmp 	#KWD_COLON
.886f		f0 50		beq $88c1			beq 	_CPExit
.8871		68		pla				pla 								; throw last action flag
.8872		b1 30		lda ($30),y			lda 	(codePtr),y
.8874		c8		iny				iny
.8875		c9 3b		cmp #$3b			cmp 	#KWD_SEMICOLON				; is it a semicolon
.8877		f0 45		beq $88be			beq 	_CPContinueWithSameLine
.8879		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; comma
.887b		f0 3c		beq $88b9			beq 	_CPTab
.887d		c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; apostrophe (new line)
.887f		f0 34		beq $88b5			beq 	_CPNewLine
.8881		88		dey				dey 								; undo the get.
.8882		20 b9 96	jsr $96b9			jsr 	EvaluateExpressionAt0 		; evaluate expression at 0.
.8885		b5 50		lda $50,x			lda 	NSStatus,x 					; read the status
.8887		29 20		and #$20			and 	#NSBIsReference 			; is it a reference
.8889		f0 0d		beq $8898			beq 	_CPIsValue 					; no, display it.
.888b		ad 28 04	lda $0428			lda 	isPrintFlag 				; if print, dereference and print.
.888e		d0 05		bne $8895			bne 	_CPIsPrint 					; otherwise display.
.8890		20 ca 88	jsr $88ca			jsr 	CIInputValue 				; input a value to the reference
.8893		80 20		bra $88b5			bra 	_CPNewLine
.8895						_CPIsPrint:
.8895		20 7e 99	jsr $997e			jsr 	Dereference 				; dereference if required.
.8898						_CPIsValue:
.8898		b5 50		lda $50,x			lda 	NSStatus,x 					; is it a number
.889a		29 10		and #$10			and 	#NSBIsString
.889c		f0 09		beq $88a7			beq 	_CPNumber
.889e		a6 60		ldx $60				ldx 	NSMantissa1 				; string, print the text.
.88a0		a5 58		lda $58				lda 	NSMantissa0
.88a2		20 2d 89	jsr $892d			jsr 	CPPrintStringXA
.88a5		80 be		bra $8865			bra 	Command_IP_Main 			; loop round clearing carry so NL if end
.88a7						_CPNumber:
.88a7		a9 05		lda #$05			lda 	#5 							; maximum decimals
.88a9		20 37 9f	jsr $9f37			jsr 	ConvertNumberToString 		; convert to string (in unary str$() function)
.88ac		a2 06		ldx #$06			ldx 	#decimalBuffer >> 8
.88ae		a9 49		lda #$49			lda 	#decimalBuffer & $FF
.88b0		20 2d 89	jsr $892d			jsr 	CPPrintStringXA 			; print it.
.88b3		80 b0		bra $8865			bra 	Command_IP_Main				; loop round clearing carry so NL if end
.88b5						_CPNewLine:
.88b5		a9 0d		lda #$0d			lda 	#13
.88b7		80 02		bra $88bb			bra 	_CPPrintCharDirect
.88b9						_CPTab:
.88b9		a9 09		lda #$09			lda 	#9 							; print TAB
.88bb						_CPPrintCharDirect:
.88bb		20 48 89	jsr $8948			jsr 	CPPVControl 				; print TAB/CR using the non PETSCII
.88be						_CPContinueWithSameLine:
.88be		38		sec				sec 								; loop round with carry set, which
.88bf		80 a5		bra $8866			bra 	_CPLoop 					; will inhibit final CR
.88c1						_CPExit:
.88c1		28		plp				plp 								; get last action flag
.88c2		b0 05		bcs $88c9			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.88c4		a9 0d		lda #$0d			lda 	#13 						; print new line
.88c6		20 48 89	jsr $8948			jsr 	CPPVControl
.88c9						_CPExit2:
.88c9		60		rts				rts
.88ca						CIInputValue:
.88ca		a2 00		ldx #$00			ldx 	#0 							; input a line.
.88cc						_CIInputLine:
.88cc		20 4b 89	jsr $894b			jsr 	CPInputVector 				; get key
.88cf		c9 0d		cmp #$0d			cmp 	#13 						; 13 = End
.88d1		f0 1f		beq $88f2			beq 	_CIHaveValue
.88d3		c9 08		cmp #$08			cmp 	#8 							; 8 = BS
.88d5		f0 11		beq $88e8			beq 	_CIBackspace
.88d7		c9 20		cmp #$20			cmp 	#32 						; ignore other control characters
.88d9		90 f1		bcc $88cc			bcc 	_CIInputLine
.88db		e0 50		cpx #$50			cpx 	#80 						; max length
.88dd		b0 ed		bcs $88cc			bcs 	_CIInputLine
.88df		9d 2a 05	sta $052a,x			sta 	lineBuffer,x
.88e2		e8		inx				inx
.88e3		20 40 89	jsr $8940			jsr 	CPPrintVector 				; echo it.
.88e6		80 e4		bra $88cc			bra 	_CIInputLine
.88e8						_CIBackspace:
.88e8		e0 00		cpx #$00			cpx 	#0 							; nothing to delete
.88ea		f0 e0		beq $88cc			beq 	_CIInputLine
.88ec		20 40 89	jsr $8940			jsr 	CPPrintVector 				; echo it.
.88ef		ca		dex				dex
.88f0		80 da		bra $88cc			bra 	_CIInputLine
.88f2						_CIHaveValue:
.88f2		9e 2a 05	stz $052a,x			stz 	lineBuffer,x 				; ASCIIZ string now in line buffer.
.88f5		a5 50		lda $50				lda 	NSStatus 					; was it a string assignment
.88f7		29 10		and #$10			and 	#NSBIsString
.88f9		f0 17		beq $8912			beq 	_CIAssignNumber 			; assign a number
.88fb		a2 01		ldx #$01			ldx 	#1
.88fd		a9 2a		lda #$2a			lda 	#lineBuffer & $FF 			; set up to point to new string
.88ff		95 58		sta $58,x			sta 	NSMantissa0,x
.8901		a9 05		lda #$05			lda 	#lineBuffer >> 8
.8903		95 60		sta $60,x			sta 	NSMantissa1,x
.8905		74 68		stz $68,x			stz 	NSMantissa2,x
.8907		74 70		stz $70,x			stz 	NSMantissa3,x
.8909		a9 10		lda #$10			lda 	#NSBIsString 				; so it becomes a string value
.890b		95 50		sta $50,x			sta  	NSStatus,x
.890d		ca		dex				dex 								; X = 0
.890e		20 87 89	jsr $8987			jsr 	AssignVariable
.8911		60		rts				rts
.8912						_CIAssignNumber:
.8912		a9 2a		lda #$2a			lda 	#lineBuffer & $FF 			; set up to point to new string
.8914		85 36		sta $36				sta 	zTemp0
.8916		a9 05		lda #$05			lda 	#lineBuffer >> 8
.8918		85 37		sta $37				sta 	zTemp0+1
.891a		a2 01		ldx #$01			ldx 	#1 							; put in slot 1
.891c		20 b9 9e	jsr $9eb9			jsr 	ValEvaluateZTemp0 			; use the VAL() code
.891f		90 07		bcc $8928			bcc 	_CIIsOkay
.8921		a9 3f		lda #$3f			lda 	#"?" 						; error ?
.8923		20 40 89	jsr $8940			jsr 	CPPrintVector
.8926		80 a2		bra $88ca			bra 	CIInputValue
.8928						_CIIsOkay:
.8928		ca		dex				dex 								; X = 0
.8929		20 87 89	jsr $8987			jsr 	AssignVariable
.892c		60		rts				rts
.892d						CPPrintStringXA:
.892d		5a		phy				phy
.892e		86 37		stx $37				stx 	zTemp0+1
.8930		85 36		sta $36				sta 	zTemp0
.8932		a0 00		ldy #$00			ldy 	#0
.8934						_PSXALoop:
.8934		b1 36		lda ($36),y			lda 	(zTemp0),y
.8936		f0 06		beq $893e			beq 	_PSXAExit
.8938		20 40 89	jsr $8940			jsr 	CPPrintVector
.893b		c8		iny				iny
.893c		80 f6		bra $8934			bra 	_PSXALoop
.893e						_PSXAExit:
.893e		7a		ply				ply
.893f		60		rts				rts
.8940						CPPrintVector:
.8940		2c 28 04	bit $0428			bit 	isPrintFlag 				; check if char only mode and call appropriate handler.
.8943		30 03		bmi $8948			bmi 	CPPVControl
.8945		4c 0d 80	jmp $800d			jmp 	EXTPrintNoControl
.8948						CPPVControl:
.8948		4c 03 80	jmp $8003			jmp 	EXTPrintCharacter
.894b						CPInputVector:
.894b		4c 35 80	jmp $8035			jmp 	KNLInputSingleCharacter

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/let.asm

.894e						LetCommand:
.894e		a2 00		ldx #$00			ldx 	#0
.8950		b1 30		lda ($30),y			lda 	(codePtr),y
.8952		c9 10		cmp #$10			cmp 	#KWD_AT
.8954		d0 14		bne $896a			bne 	_LCStandard
.8956		c8		iny				iny 								; skip equal
.8957		20 05 9b	jsr $9b05			jsr 	EvaluateTerm 				; get a number (the address of the reference)
.895a		20 7e 99	jsr $997e			jsr 	Dereference 				; dereference it to a value
.895d		b5 50		lda $50,x			lda 	NSStatus,x 					; check integer
.895f		49 20		eor #$20			eor 	#NSBIsReference	 			; toggle reference
.8961		95 50		sta $50,x			sta 	NSStatus,x
.8963		29 20		and #$20			and 	#NSBIsReference 			; if it is now a reference, continue
.8965		d0 0f		bne $8976			bne 	_LCMain
.8967		4c 8a a2	jmp $a28a			jmp 	TypeError 					; was a reference before.
.896a						_LCStandard:
.896a		ad a3 96	lda $96a3			lda 	PrecedenceLevel+"*"			; precedence > this
.896d		20 bd 96	jsr $96bd			jsr 	EvaluateExpressionAtPrecedence
.8970		b5 50		lda $50,x			lda 	NSStatus,x 					; is it a reference to an array marked as procedure ?
.8972		c9 38		cmp #$38			cmp		#NSTProcedure+NSBIsReference
.8974		f0 0e		beq $8984			beq 	_LetGoProc 					; it's a procedure call.
.8976						_LCMain:
.8976		a9 3d		lda #$3d			lda 	#"=" 						; check =
.8978		20 ae 91	jsr $91ae			jsr 	CheckNextA
.897b		e8		inx				inx 								; RHS
.897c		20 47 a0	jsr $a047			jsr 	EvaluateValue
.897f		ca		dex				dex
.8980		20 87 89	jsr $8987			jsr 	AssignVariable
.8983		60		rts				rts
.8984						_LetGoProc:
.8984		4c 52 8c	jmp $8c52			jmp 	CallProcedure
.8987						AssignVariable:
.8987		b5 50		lda $50,x			lda 	NSStatus,x 					; check the string/number type bits match
.8989		48		pha				pha 								; save a copy
.898a		55 51		eor $51,x			eor 	NSStatus+1,x
.898c		29 10		and #$10			and 	#NSBIsString
.898e		d0 0b		bne $899b			bne 	_ASError
.8990		68		pla				pla 								; get back
.8991		29 10		and #$10			and 	#NSBIsString 				; check type
.8993		d0 03		bne $8998			bne 	_ASString
.8995		4c bc 98	jmp $98bc			jmp 	AssignNumber
.8998						_ASString:
.8998		4c 1a 99	jmp $991a			jmp 	AssignString
.899b						_ASError:
.899b		4c 8a a2	jmp $a28a			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/list.asm

.899e						Command_List:
.899e		9c 26 04	stz $0426			stz 	listIndent 					; reset indent.
.89a1		a9 3f		lda #$3f			lda 	#$3F 						; silence at list.
.89a3		20 8f 80	jsr $808f			jsr 	SNDCommand
.89a6		b1 30		lda ($30),y			lda 	(codePtr),y
.89a8		29 c0		and #$c0			and 	#$C0 				 		; if so, we are list procedure() which is a seperate block
.89aa		c9 40		cmp #$40			cmp 	#$40  						; of code.
.89ac		f0 6e		beq $8a1c			beq 	_CLListProcedure
.89ae		64 5c		stz $5c				stz		NSMantissa0+4				; set the lower (slot 4) to 0 and upper (slot 7) to $FFFF
.89b0		64 64		stz $64				stz 	NSMantissa1+4 				; these are the default top and bottom.
.89b2		a9 ff		lda #$ff			lda 	#$FF
.89b4		85 5f		sta $5f				sta 	NSMantissa0+7
.89b6		85 67		sta $67				sta 	NSMantissa1+7
.89b8		b1 30		lda ($30),y			lda 	(codePtr),y
.89ba		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.89bc		f0 1a		beq $89d8			beq 	_CLSecond
.89be		20 99 8a	jsr $8a99			jsr 	CLIsDigit 					; if not digit, list all
.89c1		b0 20		bcs $89e3			bcs 	_CLStart
.89c3		a2 04		ldx #$04			ldx 	#4 							; get 1st range into slot 4
.89c5		20 82 a0	jsr $a082			jsr 	Evaluate16BitInteger
.89c8		b1 30		lda ($30),y			lda 	(codePtr),y
.89ca		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.89cc		f0 0a		beq $89d8			beq 	_CLSecond 					; if so go get it
.89ce		a5 5c		lda $5c				lda 	NSMantissa0+4 				; copy 4->7
.89d0		85 5f		sta $5f				sta 	NSMantissa0+7
.89d2		a5 64		lda $64				lda 	NSMantissa1+4
.89d4		85 67		sta $67				sta 	NSMantissa1+7
.89d6		80 0b		bra $89e3			bra 	_CLStart
.89d8						_CLSecond:
.89d8		c8		iny				iny 								; consume comma
.89d9		20 99 8a	jsr $8a99			jsr 	CLIsDigit 					; digit found
.89dc		b0 05		bcs $89e3			bcs 	_CLStart 					; if not, continue listing
.89de		a2 07		ldx #$07			ldx 	#7 							; load 2nd range into slot 7
.89e0		20 82 a0	jsr $a082			jsr 	Evaluate16BitInteger
.89e3						_CLStart
.89e3		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.89e5		85 30		sta $30				sta 	codePtr
.89e7		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.89e9		85 31		sta $31				sta 	codePtr+1
.89eb						_CLLoop:
.89eb		20 e1 ff	jsr $ffe1			jsr 	$FFE1
.89ee		f0 27		beq $8a17			beq 	_CLBreak
.89f0		b2 30		lda ($30)			lda 	(codePtr)
.89f2		f0 20		beq $8a14			beq 	_CLExit
.89f4		a2 04		ldx #$04			ldx 	#4 							; check range every time, line numbers aren't in order.
.89f6		20 88 8a	jsr $8a88			jsr 	CLCompareLineNo
.89f9		90 0c		bcc $8a07			bcc 	_CLNext
.89fb		a2 07		ldx #$07			ldx 	#7
.89fd		20 88 8a	jsr $8a88			jsr 	CLCompareLineNo
.8a00		f0 02		beq $8a04			beq 	_CLDoThisOne
.8a02		b0 03		bcs $8a07			bcs 	_CLNext
.8a04						_CLDoThisOne:
.8a04		20 75 8a	jsr $8a75			jsr 	CLListOneLine 				; routine to list the current line.
.8a07						_CLNext:
.8a07		18		clc				clc
.8a08		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8a0a		65 30		adc $30				adc 	codePtr
.8a0c		85 30		sta $30				sta 	codePtr
.8a0e		90 02		bcc $8a12			bcc 	_CREExit
.8a10		e6 31		inc $31				inc 	codePtr+1 					; carry
.8a12						_CREExit:
.8a12		80 d7		bra $89eb			bra 	_CLLoop
.8a14						_CLExit:
.8a14		4c 28 84	jmp $8428			jmp 	WarmStart
.8a17						_CLBreak:
.8a17		a9 01		lda #$01		lda	#1
.8a19		4c b7 91	jmp $91b7		jmp	ErrorHandler
.8a1c						_CLListProcedure:
.8a1c		b1 30		lda ($30),y			lda 	(codePtr),y
.8a1e		85 38		sta $38				sta 	zTemp1
.8a20		c8		iny				iny
.8a21		b1 30		lda ($30),y			lda 	(codePtr),y
.8a23		85 39		sta $39				sta 	zTemp1+1
.8a25		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8a27		85 30		sta $30				sta 	codePtr
.8a29		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8a2b		85 31		sta $31				sta 	codePtr+1
.8a2d						_CLLPSearch:
.8a2d		b2 30		lda ($30)			lda 	(codePtr)
.8a2f		c9 00		cmp #$00			cmp 	#0 							; if zero, end
.8a31		f0 e1		beq $8a14			beq 	_CLExit
.8a33		a0 03		ldy #$03			ldy 	#3 							; check if PROC something
.8a35		b1 30		lda ($30),y			lda 	(codePtr),y
.8a37		c9 a8		cmp #$a8			cmp 	#KWD_PROC
.8a39		d0 0e		bne $8a49			bne 	_CLLPNext
.8a3b		c8		iny				iny 								; check if PROC this.
.8a3c		b1 30		lda ($30),y			lda 	(codePtr),y
.8a3e		c5 38		cmp $38				cmp 	zTemp1 						; does it match ?
.8a40		d0 07		bne $8a49			bne 	_CLLPNext
.8a42		c8		iny				iny
.8a43		b1 30		lda ($30),y			lda 	(codePtr),y
.8a45		c5 39		cmp $39				cmp 	zTemp1+1
.8a47		f0 0d		beq $8a56			beq 	_CLLPFound
.8a49						_CLLPNext:
.8a49		18		clc				clc
.8a4a		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8a4c		65 30		adc $30				adc 	codePtr
.8a4e		85 30		sta $30				sta 	codePtr
.8a50		90 02		bcc $8a54			bcc 	_CREExit
.8a52		e6 31		inc $31				inc 	codePtr+1 					; carry
.8a54						_CREExit:
.8a54		80 d7		bra $8a2d			bra 	_CLLPSearch
.8a56						_CLLPFound:
.8a56		b2 30		lda ($30)			lda 	(codePtr)
.8a58		f0 ba		beq $8a14			beq 	_CLExit
.8a5a		a0 03		ldy #$03			ldy 	#3 							; get first keyword
.8a5c		b1 30		lda ($30),y			lda 	(codePtr),y
.8a5e		48		pha				pha
.8a5f		20 75 8a	jsr $8a75			jsr 	CLListOneLine 				; list line and go forward
.8a62		18		clc				clc
.8a63		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8a65		65 30		adc $30				adc 	codePtr
.8a67		85 30		sta $30				sta 	codePtr
.8a69		90 02		bcc $8a6d			bcc 	_CREExit
.8a6b		e6 31		inc $31				inc 	codePtr+1 					; carry
.8a6d						_CREExit:
.8a6d		68		pla				pla 								; reached ENDPROC ?
.8a6e		c9 ac		cmp #$ac			cmp 	#KWD_ENDPROC
.8a70		d0 e4		bne $8a56			bne 	_CLLPFound
.8a72		4c 28 84	jmp $8428			jmp 	WarmStart
.8a75						CLListOneLine:
.8a75		20 5c 91	jsr $915c			jsr 	ScanGetCurrentLineStep 		; get indent adjust.
.8a78		20 a3 80	jsr $80a3			jsr 	TKListConvertLine 			; convert line into token Buffer
.8a7b		a2 04		ldx #$04			ldx 	#(tokenBuffer >> 8) 		; print that line
.8a7d		a9 2d		lda #$2d			lda 	#(tokenBuffer & $FF)
.8a7f		20 10 92	jsr $9210			jsr 	PrintStringXA
.8a82		a9 0d		lda #$0d			lda 	#13 						; new line
.8a84		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.8a87		60		rts				rts
.8a88						CLCompareLineNo:
.8a88		38		sec				sec
.8a89		a0 01		ldy #$01			ldy 	#1
.8a8b		b1 30		lda ($30),y			lda 	(codePtr),y
.8a8d		f5 58		sbc $58,x			sbc 	NSMantissa0,x
.8a8f		85 36		sta $36				sta 	zTemp0
.8a91		c8		iny				iny
.8a92		b1 30		lda ($30),y			lda 	(codePtr),y
.8a94		f5 60		sbc $60,x			sbc 	NSMantissa1,x
.8a96		05 36		ora $36				ora 	zTemp0
.8a98		60		rts				rts
.8a99						CLIsDigit:
.8a99		b1 30		lda ($30),y			lda 	(codePtr),y
.8a9b		c9 30		cmp #$30			cmp 	#"0"
.8a9d		90 03		bcc $8aa2			bcc	 	_CLIDExitFalse
.8a9f		c9 3a		cmp #$3a			cmp 	#"9"+1
.8aa1		60		rts				rts
.8aa2						_CLIDExitFalse:
.8aa2		38		sec				sec
.8aa3		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/load.asm

.8aa4						Command_Load:
.8aa4		20 5a a0	jsr $a05a			jsr 	EvaluateString 				; file name to load
.8aa7		a6 37		ldx $37				ldx 	zTemp0+1					; zTemp0 -> XA
.8aa9		a5 36		lda $36				lda 	zTemp0
.8aab		20 3f 80	jsr $803f			jsr 	KNLOpenFileRead 			; open file for reading
.8aae		b0 44		bcs $8af4			bcs 	CLErrorHandler 				; error, so fail.
.8ab0		8d 60 06	sta $0660			sta 	CurrentFileStream 			; save the reading stream.
.8ab3		20 53 80	jsr $8053			jsr     KNLReadByteInit             ; Init reader with the stream
.8ab6		20 0b 8c	jsr $8c0b			jsr 	NewProgram 					; does the actual NEW.
.8ab9		9c 5f 06	stz $065f			stz 	LoadEOFFlag 				; clear EOF Flag.
.8abc						_CLLoop:
.8abc		20 02 8b	jsr $8b02			jsr 	LoadReadLine 				; get next line.
.8abf		f0 10		beq $8ad1			beq 	_CLExit 					; end, exit.
.8ac1		20 ad 80	jsr $80ad			jsr 	TKTokeniseLine 				; tokenise the line.
.8ac4		ad 2b 04	lda $042b			lda 	tokenLineNumber 			; line number = 0
.8ac7		0d 2c 04	ora $042c			ora 	tokenLineNumber+1
.8aca		f0 f0		beq $8abc			beq 	_CLLoop 					; not legal code, blank line or maybe a comment.
.8acc		20 03 84	jsr $8403			jsr 	EditProgramCode 			; do the editing etc.
.8acf		80 eb		bra $8abc			bra 	_CLLoop
.8ad1						_CLExit:
.8ad1		ad 60 06	lda $0660			lda 	CurrentFileStream
.8ad4		20 7b 80	jsr $807b			jsr 	KNLCloseFile
.8ad7						CLComplete:
.8ad7		a9 e1		lda #$e1			lda 	#_CLCMsg & $FF
.8ad9		a2 8a		ldx #$8a			ldx 	#_CLCMsg >> 8
.8adb		20 10 92	jsr $9210			jsr 	PrintStringXA
.8ade		4c 28 84	jmp $8428			jmp 	WarmStart
.8ae1						_CLCMsg:
>8ae1		43 6f 6d 70 6c 65 74 65				.text 	"Complete.",13,0
>8ae9		2e 0d 00
.8aec						CLCloseError:
.8aec		48		pha				pha
.8aed		ad 60 06	lda $0660			lda 	CurrentFileStream
.8af0		20 7b 80	jsr $807b			jsr 	KNLCloseFile
.8af3		68		pla				pla
.8af4						CLErrorHandler:
.8af4		c9 28		cmp #$28			cmp 	#KERR_NOTFOUND
.8af6		f0 05		beq $8afd			beq 	_CLEHNotFound
.8af8		a9 1a		lda #$1a		lda	#26
.8afa		4c b7 91	jmp $91b7		jmp	ErrorHandler
.8afd						_CLEHNotFound:
.8afd		a9 19		lda #$19		lda	#25
.8aff		4c b7 91	jmp $91b7		jmp	ErrorHandler
.8b02						LoadReadLine:
.8b02		a2 00		ldx #$00			ldx 	#0 							; look for first character non space/ctl
.8b04		20 1e 8b	jsr $8b1e			jsr 	LoadReadCharacter
.8b07		f0 14		beq $8b1d			beq 	_LRLExit 					; eof ?
.8b09		c9 21		cmp #$21			cmp 	#' '+1 						; space control tab skip
.8b0b		90 f5		bcc $8b02			bcc 	LoadReadLine
.8b0d						_LRLLoop:
.8b0d		9d 2a 05	sta $052a,x			sta 	lineBuffer,x 				; write into line buffer
.8b10		9e 2b 05	stz $052b,x			stz 	lineBuffer+1,x 				; make ASCIIZ
.8b13		e8		inx				inx
.8b14		20 1e 8b	jsr $8b1e			jsr 	LoadReadCharacter 			; next line
.8b17		c9 20		cmp #$20			cmp 	#32 						; until < space ctrl/eof.
.8b19		b0 f2		bcs $8b0d			bcs 	_LRLLoop
.8b1b		a9 01		lda #$01			lda 	#1 							; return code 1, okay.
.8b1d						_LRLExit:
.8b1d		60		rts				rts
.8b1e						LoadReadCharacter:
.8b1e		da		phx				phx
.8b1f		5a		phy				phy
.8b20		ad 5f 06	lda $065f			lda 	LoadEOFFlag 				; already done EOF.
.8b23		d0 0c		bne $8b31			bne 	_LRCIsEOF
.8b25		20 5d 80	jsr $805d			jsr 	KNLReadByte 				; read a byte
.8b28		90 09		bcc $8b33			bcc		_LRCExit 					; read okay.
.8b2a		c9 30		cmp #$30			cmp 	#KERR_EOF 					; if error not EOF it's an actual error.
.8b2c		d0 be		bne $8aec			bne 	CLCloseError
.8b2e		ce 5f 06	dec $065f			dec 	LoadEOFFlag
.8b31						_LRCIsEOF:
.8b31		a9 00		lda #$00			lda 	#0
.8b33						_LRCExit:
.8b33		c9 09		cmp #$09			cmp 	#9 							; convert tab to space
.8b35		d0 02		bne $8b39			bne 	_LRCNotTab
.8b37		a9 20		lda #$20			lda 	#' '
.8b39						_LRCNotTab:
.8b39		c9 0a		cmp #$0a			cmp 	#$0A
.8b3b		d0 02		bne $8b3f			bne 	_LRCNotLF
.8b3d		a9 0d		lda #$0d			lda 	#$0D
.8b3f						_LRCNotLF:
.8b3f		7a		ply				ply
.8b40		fa		plx				plx
.8b41		c9 00		cmp #$00			cmp 	#0 							; set Z flag if EOF.
.8b43		60		rts				rts
.065f						LoadEOFFlag:
>065f								.fill 	1
.0660						CurrentFileStream:
>0660								.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/local.asm

.8b44						Command_LOCAL:
.8b44		a2 00		ldx #$00			ldx 	#0 							; at level 0
.8b46		20 52 8b	jsr $8b52			jsr 	LocaliseNextTerm 			; convert term to a local.
.8b49		b1 30		lda ($30),y			lda 	(codePtr),y
.8b4b		c8		iny				iny
.8b4c		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8b4e		f0 f4		beq $8b44			beq 	Command_LOCAL 				; if so, localise another variable.
.8b50		88		dey				dey 								; unpick pre-get
.8b51		60		rts				rts
.8b52						LocaliseNextTerm:
.8b52		20 05 9b	jsr $9b05			jsr 	EvaluateTerm 				; evaluate the term
.8b55		b5 50		lda $50,x			lda 	NSStatus,x
.8b57		29 20		and #$20			and 	#NSBIsReference 			; check it is a reference, must be a variable.
.8b59		f0 5c		beq $8bb7			beq		_LNTError
.8b5b		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy address of variable to zTemp0
.8b5d		85 36		sta $36				sta 	zTemp0
.8b5f		b5 60		lda $60,x			lda 	NSMantissa1,x
.8b61		85 37		sta $37				sta  	zTemp0+1
.8b63		b5 50		lda $50,x			lda 	NSStatus,x 					; figure out what it is.
.8b65		29 10		and #$10			and 	#NSBIsString
.8b67		d0 1e		bne $8b87			bne 	_LNTPushString
.8b69		5a		phy				phy
.8b6a		a0 00		ldy #$00			ldy 	#0 							; push 0 to 4 inclusive, the number values, on the stack, and zero them as you go.
.8b6c						_LNTPushNumLoop:
.8b6c		b1 36		lda ($36),y			lda		(zTemp0),y
.8b6e		20 c0 b1	jsr $b1c0			jsr 	StackPushByte
.8b71		c8		iny				iny
.8b72		c0 05		cpy #$05			cpy 	#5
.8b74		d0 f6		bne $8b6c			bne 	_LNTPushNumLoop
.8b76		a5 36		lda $36				lda 	zTemp0 						; push the actual target address to write on the stack
.8b78		20 c0 b1	jsr $b1c0			jsr 	StackPushByte
.8b7b		a5 37		lda $37				lda 	zTemp0+1
.8b7d		20 c0 b1	jsr $b1c0			jsr 	StackPushByte
.8b80		a9 01		lda #$01			lda 	#STK_LOCALN 				; push local-number marker.
.8b82		20 c0 b1	jsr $b1c0			jsr 	StackPushByte
.8b85		7a		ply				ply
.8b86		60		rts				rts
.8b87						_LNTPushString:
.8b87		5a		phy				phy
.8b88		b2 36		lda ($36)			lda 	(zTemp0) 					; put address of string in zTemp1
.8b8a		85 38		sta $38				sta 	zTemp1
.8b8c		a0 01		ldy #$01			ldy 	#1
.8b8e		b1 36		lda ($36),y			lda 	(zTemp0),y
.8b90		85 39		sta $39				sta 	zTemp1+1
.8b92		a0 00		ldy #$00			ldy 	#0 							; output string
.8b94		c9 00		cmp #$00			cmp 	#0 							; if not assigned string
.8b96		f0 0a		beq $8ba2			beq 	_LNTStringOut
.8b98						_LNTPushStrLoop:
.8b98		b1 38		lda ($38),y			lda 	(zTemp1),y
.8b9a		f0 06		beq $8ba2			beq 	_LNTStringOut
.8b9c		20 c0 b1	jsr $b1c0			jsr 	StackPushByte
.8b9f		c8		iny				iny
.8ba0		80 f6		bra $8b98			bra 	_LNTPushStrLoop
.8ba2						_LNTStringOut:
.8ba2		98		tya				tya									; output length (chars written).
.8ba3		20 c0 b1	jsr $b1c0			jsr 	StackPushByte
.8ba6		b5 58		lda $58,x			lda 	NSMantissa0,x 				; output address of the string record *not* the string itself
.8ba8		20 c0 b1	jsr $b1c0			jsr 	StackPushByte
.8bab		b5 60		lda $60,x			lda 	NSMantissa1,x
.8bad		20 c0 b1	jsr $b1c0			jsr 	StackPushByte
.8bb0		a9 02		lda #$02			lda 	#STK_LOCALS 				; push local-string marker.
.8bb2		20 c0 b1	jsr $b1c0			jsr 	StackPushByte
.8bb5		7a		ply				ply
.8bb6		60		rts				rts
.8bb7						_LNTError:
.8bb7		4c 80 a2	jmp $a280			jmp 	SyntaxError
.8bba						LocalPopValue:
.8bba		20 d8 b1	jsr $b1d8			jsr 	StackPopByte
.8bbd		c9 01		cmp #$01			cmp 	#STK_LOCALN 				; if not local-N
.8bbf		d0 17		bne $8bd8			bne 	_LPVString
.8bc1		20 d8 b1	jsr $b1d8			jsr 	StackPopByte 				; address
.8bc4		85 37		sta $37				sta 	zTemp0+1
.8bc6		20 d8 b1	jsr $b1d8			jsr 	StackPopByte
.8bc9		85 36		sta $36				sta 	zTemp0
.8bcb		5a		phy				phy
.8bcc		a0 04		ldy #$04			ldy 	#4 							; copy back
.8bce						_LPVNumberCopy:
.8bce		20 d8 b1	jsr $b1d8			jsr 	StackPopByte
.8bd1		91 36		sta ($36),y			sta 	(zTemp0),y
.8bd3		88		dey				dey
.8bd4		10 f8		bpl $8bce			bpl 	_LPVNumberCopy
.8bd6		7a		ply				ply 								; and complete
.8bd7		60		rts				rts
.8bd8						_LPVString:
.8bd8		20 d8 b1	jsr $b1d8			jsr 	StackPopByte 				; address of record copied to zTemp0
.8bdb		85 37		sta $37				sta 	zTemp0+1
.8bdd		20 d8 b1	jsr $b1d8			jsr 	StackPopByte
.8be0		85 36		sta $36				sta 	zTemp0
.8be2		5a		phy				phy
.8be3		b2 36		lda ($36)			lda 	(zTemp0) 					; address to write string to copied to zTemp1
.8be5		85 38		sta $38				sta 	zTemp1
.8be7		a0 01		ldy #$01			ldy 	#1
.8be9		b1 36		lda ($36),y			lda 	(zTemp0),y
.8beb		85 39		sta $39				sta 	zTemp1+1
.8bed		20 d8 b1	jsr $b1d8			jsr 	StackPopByte 				; # chars to get => y
.8bf0		a8		tay				tay
.8bf1		a5 39		lda $39				lda 	zTemp1+1 					; if no target (e.g. was "" originally) exit
.8bf3		f0 0e		beq $8c03			beq 	_LPVStringCopied
.8bf5		a9 00		lda #$00			lda 	#0 							; NULL on end
.8bf7		91 38		sta ($38),y			sta 	(zTemp1),y
.8bf9						_LPVStringCopy:
.8bf9		88		dey				dey
.8bfa		30 07		bmi $8c03			bmi 	_LPVStringCopied
.8bfc		20 d8 b1	jsr $b1d8			jsr 	StackPopByte
.8bff		91 38		sta ($38),y			sta 	(zTemp1),y
.8c01		80 f6		bra $8bf9			bra 	_LPVStringCopy
.8c03						_LPVStringCopied:
.8c03		fa		plx				plx
.8c04		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/new.asm

.8c05						NewCommand:
.8c05		20 0b 8c	jsr $8c0b			jsr 	NewProgram 					; does the actual NEW.
.8c08		4c 28 84	jmp $8428			jmp 	WarmStart 					; and warm starts straight away.
.8c0b						NewProgram:
.8c0b		20 6f a8	jsr $a86f			jsr 	MemoryNew
.8c0e		9c 00 10	stz $1000			stz 	VariableSpace 				; erase all variables.
.8c11		20 3c 85	jsr $853c			jsr 	ClearCommand 				; clear everything.
.8c14		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/poke.asm

.8c15						PokeBCommand:
.8c15		a9 01		lda #$01			lda 	#1
.8c17		80 0c		bra $8c25			bra 	PokeCommand
.8c19						PokeWCommand:
.8c19		a9 02		lda #$02			lda 	#2
.8c1b		80 08		bra $8c25			bra 	PokeCommand
.8c1d						PokeLCommand:
.8c1d		a9 03		lda #$03			lda 	#3
.8c1f		80 04		bra $8c25			bra 	PokeCommand
.8c21						PokeDCommand:
.8c21		a9 04		lda #$04			lda 	#4
.8c23		80 00		bra $8c25			bra 	PokeCommand
.8c25						PokeCommand:
.8c25		48		pha				pha 								; save count on stack
.8c26		a2 00		ldx #$00			ldx 	#0 							; bottom of stack
.8c28		20 82 a0	jsr $a082			jsr		Evaluate16BitInteger 		; address
.8c2b		20 a6 91	jsr $91a6			jsr 	CheckComma
.8c2e		e8		inx				inx
.8c2f		20 6f a0	jsr $a06f			jsr		EvaluateInteger 			; data
.8c32		a5 58		lda $58				lda 	NSMantissa0 				; copy address
.8c34		85 36		sta $36				sta 	zTemp0
.8c36		a5 60		lda $60				lda 	NSMantissa1
.8c38		85 37		sta $37				sta 	zTemp0+1
.8c3a		68		pla				pla 								; count -> zTemp1
.8c3b		85 38		sta $38				sta 	zTemp1
.8c3d		5a		phy				phy 								; save Y position.
.8c3e		a0 00		ldy #$00			ldy 	#0 							; index to write
.8c40		a2 00		ldx #$00			ldx 	#0 							; index to read
.8c42						_PCLoop:
.8c42		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; read byte from mantissa and copy out
.8c44		91 36		sta ($36),y			sta 	(zTemp0),y
.8c46		c8		iny				iny 								; next byte to write
.8c47		8a		txa				txa 								; next byte to read - stack layout in 04data.inc
.8c48		18		clc				clc
.8c49		69 08		adc #$08			adc 	#MathStackSize
.8c4b		aa		tax				tax
.8c4c		c6 38		dec $38				dec 	zTemp1 						; done them all
.8c4e		d0 f2		bne $8c42			bne 	_PCLoop
.8c50		7a		ply				ply 								; restore position.
.8c51		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/procedure.asm

=2						ParameterStackPos = 2
.8c52						CallProcedure:
.8c52		a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start storing parameters at 2.
.8c54		b1 30		lda ($30),y			lda 	(codePtr),y
.8c56		c9 29		cmp #$29			cmp 	#KWD_RPAREN
.8c58		f0 0c		beq $8c66			beq 	_CPEndParam
.8c5a						_CPParamLoop:
.8c5a		20 47 a0	jsr $a047			jsr 	EvaluateValue 				; get parameter onto stack
.8c5d		e8		inx				inx 								; bump next stack
.8c5e		b1 30		lda ($30),y			lda 	(codePtr),y
.8c60		c8		iny				iny
.8c61		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if comma, go back and try again.
.8c63		f0 f5		beq $8c5a			beq 	_CPParamLoop
.8c65		88		dey				dey 								; unpick.
.8c66						_CPEndParam:
.8c66		8e 16 04	stx $0416			stx 	lastParameter 				; save the last parameters index.
.8c69		c8		iny				iny									; skip right bracket
.8c6a		a9 b3		lda #$b3			lda 	#STK_PROC+3 				; allocate 6 bytes on the return stack.
.8c6c		20 e1 b1	jsr $b1e1			jsr 	StackOpen
.8c6f		20 26 b2	jsr $b226			jsr 	STKSaveCodePosition 		; save loop position
.8c72		a5 58		lda $58				lda 	NSMantissa0 				; copy variable (e.g. procedure) address to zTemp0
.8c74		85 36		sta $36				sta 	zTemp0 						; this is the DATA not the RECORD
.8c76		a5 60		lda $60				lda 	NSMantissa1
.8c78		85 37		sta $37				sta 	zTemp0+1
.8c7a		a0 01		ldy #$01			ldy 	#1 							; copy code address back.
.8c7c		b2 36		lda ($36)			lda 	(zTemp0)
.8c7e		85 30		sta $30				sta 	safePtr
.8c80		b1 36		lda ($36),y			lda 	(zTemp0),y
.8c82		85 31		sta $31				sta 	safePtr+1
.8c84		c8		iny				iny
.8c85		b1 36		lda ($36),y			lda 	(zTemp0),y
.8c87		85 32		sta $32				sta 	safePtr+2
.8c89		c8		iny				iny
.8c8a		b1 36		lda ($36),y			lda 	(zTemp0),y
.8c8c		85 33		sta $33				sta 	safePtr+3
.8c8e		c8		iny				iny 								; get Y offset -> Y
.8c8f		b1 36		lda ($36),y			lda 	(zTemp0),y
.8c91		a8		tay				tay
.8c92		a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start position of parameters
.8c94		ec 16 04	cpx $0416			cpx	 	lastParameter 				; check zero parameters at the start
.8c97		f0 13		beq $8cac			beq 	_ParamExit 					; if so, exit.
.8c99						_ParamExtract:
.8c99		ca		dex				dex 								; put a local term on the level before
.8c9a		20 52 8b	jsr $8b52			jsr 	LocaliseNextTerm			; also pushes original param value to basic stack
.8c9d		20 87 89	jsr $8987			jsr 	AssignVariable 				; assign stacked value to the variable.
.8ca0		e8		inx				inx 								; advance to next parameter to do.
.8ca1		e8		inx				inx
.8ca2		ec 16 04	cpx $0416			cpx 	lastParameter 				; are we done ?
.8ca5		f0 05		beq $8cac			beq 	_ParamExit
.8ca7		20 a6 91	jsr $91a6			jsr 	CheckComma 					; comma seperating parameters
.8caa		80 ed		bra $8c99			bra 	_ParamExtract
.8cac						_ParamExit:
.8cac		20 9e 91	jsr $919e			jsr 	CheckRightBracket 			; check )
.8caf		60		rts				rts 								; and continue from here
.8cb0						Command_ENDPROC:
.8cb0		a9 b0		lda #$b0			lda 	#STK_PROC 					; check TOS is this
.8cb2		a2 14		ldx #$14			ldx 	#ERRID_PROC
.8cb4		20 0e b2	jsr $b20e			jsr 	StackCheckFrame
.8cb7		20 37 b2	jsr $b237			jsr 	STKLoadCodePosition 		; restore code position
.8cba		20 00 b2	jsr $b200			jsr 	StackClose
.8cbd		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/read.asm

.8cbe						Command_Read:
.8cbe		a2 00		ldx #$00			ldx 	#0 							; evaluate the term which is the var/array element to assign
.8cc0		20 05 9b	jsr $9b05			jsr 	EvaluateTerm
.8cc3		b5 50		lda $50,x			lda 	NSStatus,x
.8cc5		29 20		and #$20			and 	#NSBIsReference				; get status byte on stack, identifies int, float, string.
.8cc7		f0 4f		beq $8d18			beq 	_CRSyntax 					; check reference (bit 0) fail if not a reference.
.8cc9		20 61 8d	jsr $8d61			jsr 	SwapDataCodePtrs 			; swap code and data
.8ccc		ad 1c 04	lda $041c			lda 	inDataStatement 			; if in a data statement, we don't need to search
.8ccf		d0 25		bne $8cf6			bne 	_CRContinueData  			; forward for the next one.
.8cd1		b2 30		lda ($30)			lda 	(codePtr)
.8cd3		f0 1c		beq $8cf1			beq 	_CRNoData
.8cd5						_CRKeepSearching:
.8cd5		a9 b9		lda #$b9			lda 	#KWD_DATA 					; scan for instruction
.8cd7		a2 80		ldx #$80			ldx 	#KWC_EOL
.8cd9		20 f9 90	jsr $90f9			jsr 	ScanForward
.8cdc		c9 b9		cmp #$b9			cmp 	#KWD_DATA 					; found data ?
.8cde		f0 16		beq $8cf6			beq 	_CRHaveData 				; found it
.8ce0		18		clc				clc
.8ce1		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8ce3		65 30		adc $30				adc 	codePtr
.8ce5		85 30		sta $30				sta 	codePtr
.8ce7		90 02		bcc $8ceb			bcc 	_CREExit
.8ce9		e6 31		inc $31				inc 	codePtr+1 					; carry
.8ceb						_CREExit:
.8ceb		a0 03		ldy #$03			ldy 	#3 							; start of line.
.8ced		b2 30		lda ($30)			lda 	(codePtr)
.8cef		d0 e4		bne $8cd5			bne 	_CRKeepSearching
.8cf1						_CRNoData:
.8cf1		a9 0b		lda #$0b		lda	#11
.8cf3		4c b7 91	jmp $91b7		jmp	ErrorHandler
.8cf6						_CRHaveData:
.8cf6						_CRContinueData:
.8cf6		a2 01		ldx #$01			ldx 	#1
.8cf8		20 47 a0	jsr $a047			jsr 	EvaluateValue 				; evaluate value into slot # 1
.8cfb		ca		dex				dex
.8cfc		20 87 89	jsr $8987			jsr		AssignVariable 				; do the assignment
.8cff		9c 1c 04	stz $041c			stz 	inDataStatement 			; clear in data flag
.8d02		b1 30		lda ($30),y			lda 	(codePtr),y
.8d04		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not, end of data statement and exit
.8d06		d0 04		bne $8d0c			bne 	_CRSwapBack
.8d08		c8		iny				iny 								; consume comma
.8d09		ee 1c 04	inc $041c			inc 	inDataStatement 			; set in data statement currently.
.8d0c						_CRSwapBack:
.8d0c		20 61 8d	jsr $8d61			jsr 	SwapDataCodePtrs			; swap them back.
.8d0f		b1 30		lda ($30),y			lda 	(codePtr),y
.8d11		c8		iny				iny
.8d12		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8d14		f0 a8		beq $8cbe			beq 	Command_Read 				; if so go round again.
.8d16		88		dey				dey 								; unpick get.
.8d17		60		rts				rts
.8d18						_CRSyntax:
.8d18		4c 80 a2	jmp $a280			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/rem.asm

.8d1b						RemCommand:
.8d1b		b1 30		lda ($30),y			lda 	(codePtr),y
.8d1d		c9 ff		cmp #$ff			cmp 	#KWC_STRING
.8d1f		d0 06		bne $8d27			bne 	_RMExit
.8d21		c8		iny				iny 								; point to offset
.8d22		98		tya				tya 								; A = offset position
.8d23		38		sec				sec 								; add size +1 hence SEC
.8d24		71 30		adc ($30),y			adc 	(codePtr),y
.8d26		a8		tay				tay 								; make current position.
.8d27						_RMExit:
.8d27		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/repeat.asm

.8d28						Command_REPEAT:
.8d28		a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; allocate 6 bytes on the return stack.
.8d2a		20 e1 b1	jsr $b1e1			jsr 	StackOpen
.8d2d		20 26 b2	jsr $b226			jsr 	STKSaveCodePosition 		; save loop position
.8d30		60		rts				rts
.8d31						Command_UNTIL:
.8d31		a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; check REPEAT is TOS
.8d33		a2 0f		ldx #$0f			ldx 	#ERRID_REPEAT 				; this error
.8d35		20 0e b2	jsr $b20e			jsr 	StackCheckFrame
.8d38		a2 00		ldx #$00			ldx 	#0
.8d3a		20 50 a0	jsr $a050			jsr 	EvaluateNumber 				; work out the number
.8d3d		20 24 a1	jsr $a124			jsr 	NSMIsZero 					; check if zero
.8d40		f0 04		beq $8d46			beq 	_CULoopBack 				; if so keep looping
.8d42		20 00 b2	jsr $b200			jsr 	StackClose		 			; return
.8d45		60		rts				rts
.8d46						_CULoopBack:
.8d46		20 37 b2	jsr $b237			jsr 	STKLoadCodePosition 		; loop back
.8d49		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/restore.asm

.8d4a						Command_Restore:
.8d4a		20 61 8d	jsr $8d61			jsr 	SwapDataCodePtrs 			; swap code and data
.8d4d		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8d4f		85 30		sta $30				sta 	codePtr
.8d51		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8d53		85 31		sta $31				sta 	codePtr+1
.8d55		20 61 8d	jsr $8d61			jsr 	SwapDataCodePtrs 			; put them back
.8d58		a9 03		lda #$03			lda 	#3 							; start at offset 3, e.g. first instruction of first line.
.8d5a		8d 1b 04	sta $041b			sta 	dataPointer+4   			; (read checks not EOF)
.8d5d		9c 1c 04	stz $041c			stz 	inDataStatement 			; not in data statement
.8d60		60		rts				rts
.8d61						SwapDataCodePtrs:
.8d61		da		phx				phx
.8d62		a2 03		ldx #$03			ldx 	#3 							; swap 32 bit code pointer over
.8d64						_SDCPLoop:
.8d64		b5 30		lda $30,x			lda 	safePtr,x
.8d66		48		pha				pha
.8d67		bd 17 04	lda $0417,x			lda 	dataPointer,x
.8d6a		95 30		sta $30,x			sta 	safePtr,x
.8d6c		68		pla				pla
.8d6d		9d 17 04	sta $0417,x			sta 	dataPointer,x
.8d70		ca		dex				dex
.8d71		10 f1		bpl $8d64			bpl 	_SDCPLoop
.8d73		ad 1b 04	lda $041b			lda 	dataPointer+4 				; swap Y position over.
.8d76		8c 1b 04	sty $041b			sty 	dataPointer+4
.8d79		a8		tay				tay
.8d7a		fa		plx				plx
.8d7b		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/run.asm

.8d7c						EOLCommand:
.8d7c		18		clc				clc
.8d7d		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8d7f		65 30		adc $30				adc 	codePtr
.8d81		85 30		sta $30				sta 	codePtr
.8d83		90 02		bcc $8d87			bcc 	_CREExit
.8d85		e6 31		inc $31				inc 	codePtr+1 					; carry
.8d87						_CREExit:
.8d87		80 0b		bra $8d94			bra 	RunNewLine
.8d89						CommandRUN:
.8d89		20 3c 85	jsr $853c			jsr 	ClearCommand 				; clear variable/stacks/etc.
.8d8c		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8d8e		85 30		sta $30				sta 	codePtr
.8d90		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8d92		85 31		sta $31				sta 	codePtr+1
.8d94						RunNewLine:
.8d94		b2 30		lda ($30)			lda 	(codePtr)
.8d96		f0 78		beq $8e10			beq 	CRNoProgram         		; no then END.
.8d98		a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack
.8d9a		9a		txs				txs
.8d9b						RUNCodePointerLine:
.8d9b		a0 02		ldy #$02			ldy 	#2 							; start of program
.8d9d						_CRIncMainLoop:
.8d9d		0e 13 04	asl $0413			asl 	breakCheck 					; clears 1 time in 8
.8da0		d0 1f		bne $8dc1			bne 	_CRNoBreakCheck
.8da2		ce 13 04	dec $0413			dec	 	breakCheck 					; set it back to $FF
.8da5		20 e1 ff	jsr $ffe1			jsr 	$FFE1
.8da8		f0 61		beq $8e0b			beq 	_CRBreak
.8daa		a5 01		lda $01				lda 	1 							; save I/O 0
.8dac		48		pha				pha
.8dad		64 01		stz $01				stz 	1 							; access I/O Page 0
.8daf		38		sec				sec 								; calculate timer - LastTick
.8db0		ad 59 d6	lda $d659			lda 	$D659
.8db3		cd 61 06	cmp $0661			cmp 	LastTick
.8db6		f0 06		beq $8dbe			beq 	_NoFireTick 				; if < 3 clocks don't fire.
.8db8		8d 61 06	sta $0661			sta 	LastTick 					; update last timer
.8dbb		20 2d a1	jsr $a12d			jsr 	TickHandler 							; go do the code.
.8dbe						_NoFireTick:
.8dbe		68		pla				pla 								; restore I/O 0
.8dbf		85 01		sta $01				sta 	1
.8dc1						_CRNoBreakCheck:
.8dc1		c8		iny				iny									; next token
.8dc2						_CRMainLoop:
.8dc2		9c 10 04	stz $0410			stz 	stringInitialised 			; clear the temporary string initialised flag.
.8dc5		b1 30		lda ($30),y			lda 	(codePtr),y
.8dc7		10 10		bpl $8dd9			bpl 	_CRNotKeyword				; not a token.
.8dc9		c9 a6		cmp #$a6			cmp 	#KWC_LAST_UNARY+1 			; if after unary, legitimate command
.8dcb		b0 04		bcs $8dd1			bcs 	_CRIsKeyword
.8dcd		c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if unary, syntax error.
.8dcf		b0 34		bcs $8e05			bcs		_CRSyntaxError
.8dd1						_CRIsKeyword:
.8dd1		c8		iny				iny 								; consume command
.8dd2		0a		asl a				asl 	a 							; double losing the MSB which is '1' as tokens are $80-$FF
.8dd3		aa		tax				tax 								; put in X for vector jump
.8dd4		20 08 8e	jsr $8e08			jsr 	_CRCallVector0 				; call the vector - effectively jsr (vectortable,X)
.8dd7		80 e9		bra $8dc2			bra 	_CRMainLoop 				; and loop round
.8dd9						_CRNotKeyword:
.8dd9		c9 3a		cmp #$3a			cmp 	#KWD_COLON 					; if a :, consume it and go round.
.8ddb		f0 c0		beq $8d9d			beq 	_CRIncMainLoop
.8ddd		c9 40		cmp #$40			cmp 	#$40 						; variable/call reference
.8ddf		90 05		bcc $8de6			bcc 	_CRNotVariable
.8de1						_CRGoLet:
.8de1		20 4e 89	jsr $894e			jsr 	LetCommand
.8de4		80 dc		bra $8dc2			bra 	_CRMainLoop
.8de6						_CRNotVariable:
.8de6		c9 10		cmp #$10			cmp 	#KWD_AT 					; handle @
.8de8		f0 f7		beq $8de1			beq 	_CRGoLet
.8dea		c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; handle ? !
.8dec		f0 f3		beq $8de1			beq 	_CRGoLet
.8dee		c9 21		cmp #$21			cmp 	#KWD_PLING
.8df0		f0 ef		beq $8de1			beq 	_CRGoLet
.8df2		c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; handle ' (comment)
.8df4		f0 09		beq $8dff			beq 	_CRGoRem
.8df6		c9 2e		cmp #$2e			cmp 	#KWD_PERIOD 				; handle . (assembler label)
.8df8		d0 0b		bne $8e05			bne 	_CRSyntaxError
.8dfa		20 9a 82	jsr $829a			jsr 	LabelHere
.8dfd		80 c3		bra $8dc2			bra 	_CRMainLoop
.8dff						_CRGoRem:
.8dff		c8		iny				iny
.8e00		20 1b 8d	jsr $8d1b			jsr 	RemCommand
.8e03		80 bd		bra $8dc2			bra 	_CRMainLoop
.8e05						_CRSyntaxError:
.8e05		4c 80 a2	jmp $a280			jmp 	SyntaxError
.8e08						_CRCallVector0:
.8e08		7c a6 8e	jmp ($8ea6,x)			jmp 	(VectorSet0,x)
.8e0b						_CRBreak:
.8e0b		a9 01		lda #$01		lda	#1
.8e0d		4c b7 91	jmp $91b7		jmp	ErrorHandler
.8e10						CRNoProgram:
.8e10		4c e4 86	jmp $86e4			jmp 	EndCommand
.8e13						Shift1Command:
.8e13		b1 30		lda ($30),y			lda 	(codePtr),y
.8e15		c8		iny				iny
.8e16		0a		asl a				asl 	a
.8e17		aa		tax				tax
.8e18		7c 5a 8f	jmp ($8f5a,x)			jmp 	(VectorSet1,x)
.8e1b						Shift2Command:
.8e1b		b1 30		lda ($30),y			lda 	(codePtr),y
.8e1d		c8		iny				iny
.8e1e		0a		asl a				asl 	a
.8e1f		aa		tax				tax
.8e20		7c 96 8f	jmp ($8f96,x)			jmp 	(VectorSet2,x)
.8e23						Unused1:
.8e23						Unused2:
.8e23						Unused3:
.8e23						Unused4:
.8e23		4c 80 a2	jmp $a280			jmp 	SyntaxError
>8e26								.align 2

;******  Processing file: ./common/commands/../generated/vectors.dat

.8e26						VectorSetPunc:
>8e26		6f 94					.word	ShiftLeft                        ; $00 <<
>8e28		5a 92					.word	BinaryCompareLessEqual           ; $01 <=
>8e2a		50 92					.word	BinaryCompareNotEqual            ; $02 <>
>8e2c		80 a2					.word	SyntaxError                      ; $03 !!3
>8e2e		80 a2					.word	SyntaxError                      ; $04 ><
>8e30		64 92					.word	BinaryCompareGreaterEqual        ; $05 >=
>8e32		72 94					.word	ShiftRight                       ; $06 >>
>8e34		80 a2					.word	SyntaxError                      ; $07 !!7
>8e36		80 a2					.word	SyntaxError                      ; $08 !!8
>8e38		80 a2					.word	SyntaxError                      ; $09 !!9
>8e3a		80 a2					.word	SyntaxError                      ; $0a !!10
>8e3c		80 a2					.word	SyntaxError                      ; $0b !!11
>8e3e		80 a2					.word	SyntaxError                      ; $0c !!12
>8e40		80 a2					.word	SyntaxError                      ; $0d !!13
>8e42		80 a2					.word	SyntaxError                      ; $0e !!14
>8e44		80 a2					.word	SyntaxError                      ; $0f !!15
>8e46		80 a2					.word	SyntaxError                      ; $10 @
>8e48		80 a2					.word	SyntaxError                      ; $11 !!17
>8e4a		80 a2					.word	SyntaxError                      ; $12 !!18
>8e4c		80 a2					.word	SyntaxError                      ; $13 [
>8e4e		1b 93					.word	IntegerDivide                    ; $14 \
>8e50		80 a2					.word	SyntaxError                      ; $15 ]
>8e52		ad 95					.word	EorInteger                       ; $16 ^
>8e54		80 a2					.word	SyntaxError                      ; $17 _
>8e56		80 a2					.word	SyntaxError                      ; $18 `
>8e58		80 a2					.word	SyntaxError                      ; $19 !!25
>8e5a		80 a2					.word	SyntaxError                      ; $1a !!26
>8e5c		80 a2					.word	SyntaxError                      ; $1b {
>8e5e		78 95					.word	OraInteger                       ; $1c |
>8e60		80 a2					.word	SyntaxError                      ; $1d }
>8e62		80 a2					.word	SyntaxError                      ; $1e ~
>8e64		80 a2					.word	SyntaxError                      ; $1f [7m<7F>[m
>8e66		80 a2					.word	SyntaxError                      ; $20
>8e68		e2 95					.word	WordIndirect                     ; $21 !
>8e6a		80 a2					.word	SyntaxError                      ; $22 "
>8e6c		80 a2					.word	SyntaxError                      ; $23 #
>8e6e		80 a2					.word	SyntaxError                      ; $24 $
>8e70		5c 93					.word	IntegerModulus                   ; $25 %
>8e72		43 95					.word	AndInteger                       ; $26 &
>8e74		80 a2					.word	SyntaxError                      ; $27 '
>8e76		80 a2					.word	SyntaxError                      ; $28 (
>8e78		80 a2					.word	SyntaxError                      ; $29 )
>8e7a		ca 93					.word	MulInteger                       ; $2a *
>8e7c		e5 94					.word	AddInteger                       ; $2b +
>8e7e		80 a2					.word	SyntaxError                      ; $2c ,
>8e80		1e 95					.word	SubInteger                       ; $2d -
>8e82		80 a2					.word	SyntaxError                      ; $2e .
>8e84		9c 97					.word	FDivideCommand                   ; $2f /
>8e86		80 a2					.word	SyntaxError                      ; $30 0
>8e88		80 a2					.word	SyntaxError                      ; $31 1
>8e8a		80 a2					.word	SyntaxError                      ; $32 2
>8e8c		80 a2					.word	SyntaxError                      ; $33 3
>8e8e		80 a2					.word	SyntaxError                      ; $34 4
>8e90		80 a2					.word	SyntaxError                      ; $35 5
>8e92		80 a2					.word	SyntaxError                      ; $36 6
>8e94		80 a2					.word	SyntaxError                      ; $37 7
>8e96		80 a2					.word	SyntaxError                      ; $38 8
>8e98		80 a2					.word	SyntaxError                      ; $39 9
>8e9a		80 a2					.word	SyntaxError                      ; $3a :
>8e9c		80 a2					.word	SyntaxError                      ; $3b ;
>8e9e		3c 92					.word	BinaryCompareLess                ; $3c <
>8ea0		32 92					.word	BinaryCompareEqual               ; $3d =
>8ea2		46 92					.word	BinaryCompareGreater             ; $3e >
>8ea4		04 96					.word	ByteIndirect                     ; $3f ?
.8ea6						VectorSet0:
>8ea6		7c 8d					.word	EOLCommand                       ; $80 !0:EOF
>8ea8		13 8e					.word	Shift1Command                    ; $81 !1:SH1
>8eaa		1b 8e					.word	Shift2Command                    ; $82 !2:SH2
>8eac		86 9c					.word	AbsUnary                         ; $83 ABS(
>8eae		94 9c					.word	AllocUnary                       ; $84 ALLOC(
>8eb0		04 9d					.word	AscUnary                         ; $85 ASC(
>8eb2		e8 9e					.word	ChrUnary                         ; $86 CHR$(
>8eb4		03 a7					.word	UnaryEvent                       ; $87 EVENT(
>8eb6		2e 92					.word	UnaryFalse                       ; $88 FALSE
>8eb8		11 9d					.word	FracUnary                        ; $89 FRAC(
>8eba		80 a2					.word	SyntaxError                      ; $8a GETDATE$(
>8ebc		80 a2					.word	SyntaxError                      ; $8b GETTIME$(
>8ebe		8d a6					.word	UnaryHit                         ; $8c HIT(
>8ec0		26 9d					.word	IntUnary                         ; $8d INT(
>8ec2		a7 9e					.word	IsValUnary                       ; $8e ISVAL(
>8ec4		87 a7					.word	UnaryJoyB                        ; $8f JOYB(
>8ec6		60 a7					.word	UnaryJoyX                        ; $90 JOYX(
>8ec8		63 a7					.word	UnaryJoyY                        ; $91 JOYY(
>8eca		bb 9f					.word	Unary_Left                       ; $92 LEFT$(
>8ecc		37 9d					.word	LenUnary                         ; $93 LEN(
>8ece		55 9d					.word	Unary_Max                        ; $94 MAX(
>8ed0		dd 9f					.word	Unary_Mid                        ; $95 MID$(
>8ed2		51 9d					.word	Unary_Min                        ; $96 MIN(
>8ed4		a0 9d					.word	Unary_Not                        ; $97 NOT(
>8ed6		b3 9d					.word	PeekByteUnary                    ; $98 PEEK(
>8ed8		bf 9d					.word	PeekDUnary                       ; $99 PEEKD(
>8eda		bb 9d					.word	PeekLUnary                       ; $9a PEEKL(
>8edc		b7 9d					.word	PeekWUnary                       ; $9b PEEKW(
>8ede		3e b1					.word	UnaryPlaying                     ; $9c PLAYING(
>8ee0		ec 9d					.word	Unary_Random                     ; $9d RANDOM(
>8ee2		c8 9f					.word	Unary_Right                      ; $9e RIGHT$(
>8ee4		09 9e					.word	Unary_Rnd                        ; $9f RND(
>8ee6		7f 9e					.word	SgnUnary                         ; $a0 SGN(
>8ee8		fa 9e					.word	SpcUnary                         ; $a1 SPC(
>8eea		15 9f					.word	Unary_Str                        ; $a2 STR$(
>8eec		99 a7					.word	UnaryTimer                       ; $a3 TIMER(
>8eee		23 92					.word	UnaryTrue                        ; $a4 TRUE
>8ef0		9d 9e					.word	ValUnary                         ; $a5 VAL(
>8ef2		e7 86					.word	ForCommand                       ; $a6 FOR
>8ef4		2a 88					.word	IfCommand                        ; $a7 IF
>8ef6		23 8e					.word	Unused1                          ; $a8 PROC
>8ef8		28 8d					.word	Command_REPEAT                   ; $a9 REPEAT
>8efa		6f 91					.word	Command_WHILE                    ; $aa WHILE
>8efc		53 88					.word	EndIf                            ; $ab ENDIF
>8efe		b0 8c					.word	Command_ENDPROC                  ; $ac ENDPROC
>8f00		99 87					.word	NextCommand                      ; $ad NEXT
>8f02		23 8e					.word	Unused4                          ; $ae THEN
>8f04		31 8d					.word	Command_UNTIL                    ; $af UNTIL
>8f06		90 91					.word	Command_WEND                     ; $b0 WEND
>8f08		80 a2					.word	SyntaxError                      ; $b1 BY
>8f0a		07 85					.word	CallCommand                      ; $b2 CALL
>8f0c		41 a4					.word	CircleCommand                    ; $b3 CIRCLE
>8f0e		3c 85					.word	ClearCommand                     ; $b4 CLEAR
>8f10		94 85					.word	ClearScreen                      ; $b5 CLS
>8f12		80 a2					.word	SyntaxError                      ; $b6 COLOR
>8f14		80 a2					.word	SyntaxError                      ; $b7 COLOUR
>8f16		59 88					.word	Command_CPrint                   ; $b8 CPRINT
>8f18		9c 85					.word	Command_Data                     ; $b9 DATA
>8f1a		a4 85					.word	DimCommand                       ; $ba DIM
>8f1c		23 8e					.word	Unused3                          ; $bb DOWNTO
>8f1e		4c 88					.word	ElseCode                         ; $bc ELSE
>8f20		80 a2					.word	SyntaxError                      ; $bd FROM
>8f22		60 a6					.word	GfxCommand                       ; $be GFX
>8f24		f2 87					.word	Command_GOSUB                    ; $bf GOSUB
>8f26		10 88					.word	GotoCommand                      ; $c0 GOTO
>8f28		80 a2					.word	SyntaxError                      ; $c1 HERE
>8f2a		6a a4					.word	ImageCommand                     ; $c2 IMAGE
>8f2c		54 88					.word	Command_Input                    ; $c3 INPUT
>8f2e		4e 89					.word	LetCommand                       ; $c4 LET
>8f30		bc a4					.word	LineCommand                      ; $c5 LINE
>8f32		44 8b					.word	Command_LOCAL                    ; $c6 LOCAL
>8f34		80 a2					.word	SyntaxError                      ; $c7 OFF
>8f36		80 a2					.word	SyntaxError                      ; $c8 ON
>8f38		80 a2					.word	SyntaxError                      ; $c9 OUTLINE
>8f3a		b1 a6					.word	PaletteCommand                   ; $ca PALETTE
>8f3c		b5 a4					.word	PlotCommand                      ; $cb PLOT
>8f3e		15 8c					.word	PokeBCommand                     ; $cc POKE
>8f40		21 8c					.word	PokeDCommand                     ; $cd POKED
>8f42		1d 8c					.word	PokeLCommand                     ; $ce POKEL
>8f44		19 8c					.word	PokeWCommand                     ; $cf POKEW
>8f46		60 88					.word	Command_Print                    ; $d0 PRINT
>8f48		be 8c					.word	Command_Read                     ; $d1 READ
>8f4a		3d a4					.word	RectangleCommand                 ; $d2 RECT
>8f4c		1b 8d					.word	RemCommand                       ; $d3 REM
>8f4e		02 88					.word	Command_RETURN                   ; $d4 RETURN
>8f50		80 a2					.word	SyntaxError                      ; $d5 SOLID
>8f52		5a b1					.word	SoundCommand                     ; $d6 SOUND
>8f54		4c a4					.word	SpriteCommand                    ; $d7 SPRITE
>8f56		86 a4					.word	TextCommand                      ; $d8 TEXT
>8f58		23 8e					.word	Unused2                          ; $d9 TO
.8f5a						VectorSet1:
>8f5a		80 a2					.word	SyntaxError                      ; $80 !0:EOF
>8f5c		80 a2					.word	SyntaxError                      ; $81 !1:SH1
>8f5e		80 a2					.word	SyntaxError                      ; $82 !2:SH2
>8f60		5d 84					.word	AssembleCommand                  ; $83 ASSEMBLE
>8f62		79 84					.word	AssertCommand                    ; $84 ASSERT
>8f64		00 a6					.word	BitmapCtrl                       ; $85 BITMAP
>8f66		89 84					.word	Command_BLoad                    ; $86 BLOAD
>8f68		80 a2					.word	SyntaxError                      ; $87 BSAVE
>8f6a		61 86					.word	Command_Dir                      ; $88 DIR
>8f6c		dd 86					.word	Command_Drive                    ; $89 DRIVE
>8f6e		e4 86					.word	EndCommand                       ; $8a END
>8f70		12 b1					.word	Explode                          ; $8b EXPLODE
>8f72		80 a2					.word	SyntaxError                      ; $8c GO
>8f74		80 a2					.word	SyntaxError                      ; $8d HIMEM
>8f76		9e 89					.word	Command_List                     ; $8e LIST
>8f78		a4 8a					.word	Command_Load                     ; $8f LOAD
>8f7a		05 8c					.word	NewCommand                       ; $90 NEW
>8f7c		ee b0					.word	PingCommand                      ; $91 PING
>8f7e		4a 8d					.word	Command_Restore                  ; $92 RESTORE
>8f80		89 8d					.word	CommandRUN                       ; $93 RUN
>8f82		1e 90					.word	Command_Save                     ; $94 SAVE
>8f84		80 a2					.word	SyntaxError                      ; $95 SETDATE
>8f86		80 a2					.word	SyntaxError                      ; $96 SETTIME
>8f88		06 b1					.word	ShootCommand                     ; $97 SHOOT
>8f8a		45 a6					.word	SpritesCtrl                      ; $98 SPRITES
>8f8c		a2 90					.word	StopCommand                      ; $99 STOP
>8f8e		19 b3					.word	Command_VERIFY                   ; $9a VERIFY
>8f90		fa a6					.word	XGoCommand                       ; $9b XGO
>8f92		f1 a6					.word	XLoadCommand                     ; $9c XLOAD
>8f94		fa b0					.word	ZapCommand                       ; $9d ZAP
.8f96						VectorSet2:
>8f96		80 a2					.word	SyntaxError                      ; $80 !0:EOF
>8f98		80 a2					.word	SyntaxError                      ; $81 !1:SH1
>8f9a		80 a2					.word	SyntaxError                      ; $82 !2:SH2
>8f9c		3f a1					.word	Assemble_adc                     ; $83 ADC
>8f9e		37 a1					.word	Assemble_and                     ; $84 AND
>8fa0		53 a1					.word	Assemble_asl                     ; $85 ASL
>8fa2		bd a1					.word	Assemble_bcc                     ; $86 BCC
>8fa4		c1 a1					.word	Assemble_bcs                     ; $87 BCS
>8fa6		c9 a1					.word	Assemble_beq                     ; $88 BEQ
>8fa8		80 a1					.word	Assemble_bit                     ; $89 BIT
>8faa		b1 a1					.word	Assemble_bmi                     ; $8a BMI
>8fac		c5 a1					.word	Assemble_bne                     ; $8b BNE
>8fae		ad a1					.word	Assemble_bpl                     ; $8c BPL
>8fb0		cd a1					.word	Assemble_bra                     ; $8d BRA
>8fb2		d1 a1					.word	Assemble_brk                     ; $8e BRK
>8fb4		b5 a1					.word	Assemble_bvc                     ; $8f BVC
>8fb6		b9 a1					.word	Assemble_bvs                     ; $90 BVS
>8fb8		d9 a1					.word	Assemble_clc                     ; $91 CLC
>8fba		2d a2					.word	Assemble_cld                     ; $92 CLD
>8fbc		ed a1					.word	Assemble_cli                     ; $93 CLI
>8fbe		1d a2					.word	Assemble_clv                     ; $94 CLV
>8fc0		4b a1					.word	Assemble_cmp                     ; $95 CMP
>8fc2		94 a1					.word	Assemble_cpx                     ; $96 CPX
>8fc4		8f a1					.word	Assemble_cpy                     ; $97 CPY
>8fc6		71 a1					.word	Assemble_dec                     ; $98 DEC
>8fc8		29 a2					.word	Assemble_dex                     ; $99 DEX
>8fca		05 a2					.word	Assemble_dey                     ; $9a DEY
>8fcc		3b a1					.word	Assemble_eor                     ; $9b EOR
>8fce		76 a1					.word	Assemble_inc                     ; $9c INC
>8fd0		39 a2					.word	Assemble_inx                     ; $9d INX
>8fd2		25 a2					.word	Assemble_iny                     ; $9e INY
>8fd4		a8 a1					.word	Assemble_jmp                     ; $9f JMP
>8fd6		a3 a1					.word	Assemble_jsr                     ; $a0 JSR
>8fd8		47 a1					.word	Assemble_lda                     ; $a1 LDA
>8fda		6c a1					.word	Assemble_ldx                     ; $a2 LDX
>8fdc		8a a1					.word	Assemble_ldy                     ; $a3 LDY
>8fde		5d a1					.word	Assemble_lsr                     ; $a4 LSR
>8fe0		3d a2					.word	Assemble_nop                     ; $a5 NOP
>8fe2		33 a1					.word	Assemble_ora                     ; $a6 ORA
>8fe4		e9 a1					.word	Assemble_pha                     ; $a7 PHA
>8fe6		d5 a1					.word	Assemble_php                     ; $a8 PHP
>8fe8		31 a2					.word	Assemble_phx                     ; $a9 PHX
>8fea		f1 a1					.word	Assemble_phy                     ; $aa PHY
>8fec		f9 a1					.word	Assemble_pla                     ; $ab PLA
>8fee		dd a1					.word	Assemble_plp                     ; $ac PLP
>8ff0		45 a2					.word	Assemble_plx                     ; $ad PLX
>8ff2		01 a2					.word	Assemble_ply                     ; $ae PLY
>8ff4		58 a1					.word	Assemble_rol                     ; $af ROL
>8ff6		62 a1					.word	Assemble_ror                     ; $b0 ROR
>8ff8		e5 a1					.word	Assemble_rti                     ; $b1 RTI
>8ffa		f5 a1					.word	Assemble_rts                     ; $b2 RTS
>8ffc		4f a1					.word	Assemble_sbc                     ; $b3 SBC
>8ffe		e1 a1					.word	Assemble_sec                     ; $b4 SEC
>9000		41 a2					.word	Assemble_sed                     ; $b5 SED
>9002		fd a1					.word	Assemble_sei                     ; $b6 SEI
>9004		43 a1					.word	Assemble_sta                     ; $b7 STA
>9006		35 a2					.word	Assemble_stp                     ; $b8 STP
>9008		67 a1					.word	Assemble_stx                     ; $b9 STX
>900a		85 a1					.word	Assemble_sty                     ; $ba STY
>900c		7b a1					.word	Assemble_stz                     ; $bb STZ
>900e		19 a2					.word	Assemble_tax                     ; $bc TAX
>9010		15 a2					.word	Assemble_tay                     ; $bd TAY
>9012		9e a1					.word	Assemble_trb                     ; $be TRB
>9014		99 a1					.word	Assemble_tsb                     ; $bf TSB
>9016		21 a2					.word	Assemble_tsx                     ; $c0 TSX
>9018		09 a2					.word	Assemble_txa                     ; $c1 TXA
>901a		11 a2					.word	Assemble_txs                     ; $c2 TXS
>901c		0d a2					.word	Assemble_tya                     ; $c3 TYA

;******  Return to file: ./common/commands/run.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/save.asm

.901e						Command_Save:
.901e		20 5a a0	jsr $a05a			jsr 	EvaluateString 				; file name to load
.9021		a6 37		ldx $37				ldx 	zTemp0+1					; zTemp0 -> XA
.9023		a5 36		lda $36				lda 	zTemp0
.9025		20 49 80	jsr $8049			jsr 	KNLOpenFileWrite 			; open file for writing
.9028		b0 2f		bcs $9059			bcs 	CSErrorHandler 				; error, so fail.
.902a		8d 60 06	sta $0660			sta 	CurrentFileStream 			; save the reading stream.
.902d		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.902f		85 30		sta $30				sta 	codePtr
.9031		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.9033		85 31		sta $31				sta 	codePtr+1
.9035						_CSLoop:
.9035		b2 30		lda ($30)			lda 	(codePtr)
.9037		f0 17		beq $9050			beq 	_CSExit
.9039		20 7d 90	jsr $907d			jsr 	CSGetCleanLine
.903c		84 37		sty $37				sty 	zTemp0+1 					; save write address of data
.903e		85 36		sta $36				sta 	zTemp0
.9040		20 5c 90	jsr $905c			jsr 	CLWriteByteBlock 			; write the block out.
.9043		18		clc				clc
.9044		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.9046		65 30		adc $30				adc 	codePtr
.9048		85 30		sta $30				sta 	codePtr
.904a		90 02		bcc $904e			bcc 	_CREExit
.904c		e6 31		inc $31				inc 	codePtr+1 					; carry
.904e						_CREExit:
.904e		80 e5		bra $9035			bra 	_CSLoop
.9050						_CSExit:
.9050		ad 60 06	lda $0660			lda 	CurrentFileStream 			; close file
.9053		20 7b 80	jsr $807b			jsr 	KNLCloseFile
.9056		4c d7 8a	jmp $8ad7			jmp 	CLComplete 					; display complete message.
.9059						CSErrorHandler:
.9059		4c f4 8a	jmp $8af4			jmp 	CLErrorHandler
.905c						CLWriteByteBlock:
.905c		e0 00		cpx #$00			cpx 	#0 							; written the lot ?
.905e		f0 1c		beq $907c			beq 	_CLWBBExit					; if so, exit
.9060		ad 60 06	lda $0660			lda 	CurrentFileStream 			; stream to write, count in X
.9063		20 71 80	jsr $8071			jsr 	KNLWriteBlock 				; call one write attempt
.9066		b0 f1		bcs $9059			bcs 	CSErrorHandler 				; error occurred
.9068		85 38		sta $38				sta 	zTemp1 						; save bytes written.
.906a		8a		txa				txa 								; subtract bytes written from X, total count.
.906b		38		sec				sec
.906c		e5 38		sbc $38				sbc 	zTemp1
.906e		aa		tax				tax
.906f		18		clc				clc 								; advance zTemp0 pointer by bytes written.
.9070		a5 36		lda $36				lda 	zTemp0
.9072		65 38		adc $38				adc 	zTemp1
.9074		85 36		sta $36				sta 	zTemp0
.9076		90 e4		bcc $905c			bcc 	CLWriteByteBlock
.9078		e6 37		inc $37				inc 	zTemp0+1
.907a		80 e0		bra $905c			bra 	CLWriteByteBlock 			; and retry write out.
.907c						_CLWBBExit:
.907c		60		rts				rts
.907d						CSGetCleanLine:
.907d		a9 00		lda #$00			lda 	#0 							; no indent.
.907f		20 a3 80	jsr $80a3			jsr 	TKListConvertLine 			; convert line into token Buffer
.9082		a2 00		ldx #$00			ldx 	#0 							; copy stripping controls.
.9084		a0 00		ldy #$00			ldy 	#0
.9086						_CSClean:
.9086		b9 2d 04	lda $042d,y			lda 	tokenBuffer,y
.9089		f0 09		beq $9094			beq 	_CSDoneClean
.908b		30 04		bmi $9091			bmi 	_CSIgnoreCharacter
.908d		9d 2a 05	sta $052a,x			sta 	lineBuffer,x
.9090		e8		inx				inx
.9091						_CSIgnoreCharacter:
.9091		c8		iny				iny
.9092		80 f2		bra $9086			bra 	_CSClean
.9094						_CSDoneClean:
.9094		a9 0d		lda #$0d			lda 	#13 						; add CR, length now in X and ASCIIZ.
.9096		9d 2a 05	sta $052a,x			sta 	lineBuffer,x
.9099		e8		inx				inx
.909a		9e 2a 05	stz $052a,x			stz 	lineBuffer,x
.909d		a0 05		ldy #$05			ldy 	#(lineBuffer >> 8) 			; line address in YA
.909f		a9 2a		lda #$2a			lda 	#(lineBuffer & $FF)
.90a1		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/stop.asm

.90a2						StopCommand:
.90a2		a9 08		lda #$08		lda	#8
.90a4		4c b7 91	jmp $91b7		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/procscan.asm

.90a7						ProcedureScan:
.90a7		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.90a9		85 30		sta $30				sta 	codePtr
.90ab		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.90ad		85 31		sta $31				sta 	codePtr+1
.90af						_PSLoop:
.90af		b2 30		lda ($30)			lda 	(codePtr)
.90b1		f0 42		beq $90f5			beq 	_PSExit
.90b3		a0 03		ldy #$03			ldy 	#3 							; is it PROC at start of line ?
.90b5		b1 30		lda ($30),y			lda 	(codePtr),y
.90b7		c9 a8		cmp #$a8			cmp 	#KWD_PROC
.90b9		d0 2d		bne $90e8			bne 	_PSNext
.90bb		c8		iny				iny 								; get the address of the record to zTemp0 and
.90bc		b1 30		lda ($30),y			lda 	(codePtr),y
.90be		29 c0		and #$c0			and 	#$C0
.90c0		c9 40		cmp #$40			cmp 	#$40
.90c2		d0 32		bne $90f6			bne 	_PSSyntax
.90c4		b1 30		lda ($30),y			lda 	(codePtr),y
.90c6		18		clc				clc
.90c7		69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.90c9		85 37		sta $37				sta 	zTemp0+1
.90cb		c8		iny				iny 								; LSB
.90cc		b1 30		lda ($30),y			lda 	(codePtr),y
.90ce		85 36		sta $36				sta 	zTemp0
.90d0		c8		iny				iny 								; character after variable call.
.90d1		98		tya				tya 								; save Y offset at +7 (exponent slot)
.90d2		a0 07		ldy #$07			ldy 	#7
.90d4		91 36		sta ($36),y			sta 	(zTemp0),y
.90d6		a9 18		lda #$18			lda 	#NSTProcedure 				; mark it as procedure
.90d8		a0 02		ldy #$02			ldy 	#2
.90da		91 36		sta ($36),y			sta 	(zTemp0),y
.90dc		a2 00		ldx #$00			ldx 	#0 							; copy code-Ptr into offset 3-6 (mantissa)
.90de						_PSCopy:
.90de		b5 30		lda $30,x			lda 	safePtr,x
.90e0		c8		iny				iny
.90e1		91 36		sta ($36),y			sta 	(zTemp0),y
.90e3		e8		inx				inx
.90e4		e0 04		cpx #$04			cpx 	#4
.90e6		d0 f6		bne $90de			bne 	_PSCopy
.90e8						_PSNext:
.90e8		18		clc				clc
.90e9		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.90eb		65 30		adc $30				adc 	codePtr
.90ed		85 30		sta $30				sta 	codePtr
.90ef		90 02		bcc $90f3			bcc 	_CREExit
.90f1		e6 31		inc $31				inc 	codePtr+1 					; carry
.90f3						_CREExit:
.90f3		80 ba		bra $90af			bra 	_PSLoop
.90f5						_PSExit:
.90f5		60		rts				rts
.90f6						_PSSyntax:
.90f6		4c 80 a2	jmp $a280			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/scanforward.asm

.90f9						ScanForward:
.90f9		64 38		stz $38				stz 	zTemp1 						; zero the structure count - goes up with WHILE/FOR down with WEND/NEXT etc.
.90fb		86 37		stx $37				stx 	zTemp0+1
.90fd		85 36		sta $36				sta 	zTemp0 						; save X & A as the two possible matches.
.90ff						_ScanLoop:
.90ff		b1 30		lda ($30),y			lda 	(codePtr),y
.9101		c8		iny				iny
.9102		a6 38		ldx $38				ldx 	zTemp1 						; if the count is > 0 cannot match as in substructure
.9104		d0 0e		bne $9114			bne 	_ScanGoNext
.9106		c5 36		cmp $36				cmp 	zTemp0 						; see if either matches
.9108		f0 04		beq $910e			beq 	_ScanMatch
.910a		c5 37		cmp $37				cmp 	zTemp0+1
.910c		d0 06		bne $9114			bne 	_ScanGoNext
.910e						_ScanMatch:
.910e		c9 80		cmp #$80			cmp 	#KWC_EOL 					; if asked for EOL, backtrack.
.9110		d0 01		bne $9113			bne 	_ScanNotEndEOL
.9112		88		dey				dey
.9113						_ScanNotEndEOL:
.9113		60		rts				rts
.9114						_ScanGoNext:
.9114		20 19 91	jsr $9119			jsr  	ScanForwardOne 				; allows for shifts and so on.
.9117		80 e6		bra $90ff			bra 	_ScanLoop
.9119						ScanForwardOne:
.9119		c9 40		cmp #$40			cmp 	#$40 						; if 00-3F, punctuation characters, already done.
.911b		90 3e		bcc $915b			bcc 	_SFWExit
.911d		c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if 40-82, skip one extra as these are 2 byte
.911f		90 18		bcc $9139			bcc 	_ScanSkipOne	 			; offsets into the identifier table or shifts.
.9121		c9 fc		cmp #$fc			cmp 	#$FC 						; FC-FF are data skips (hex consts, strings etc.)
.9123		b0 2f		bcs $9154			bcs 	_ScanSkipData
.9125		c9 a6		cmp #$a6			cmp 	#KWC_FIRST_STRUCTURE 		; structure keyword ?
.9127		90 32		bcc $915b			bcc 	_SFWExit 					; if not, ordinary keywords.
.9129		c9 b1		cmp #$b1			cmp 	#KWC_LAST_STRUCTURE+1
.912b		b0 2e		bcs $915b			bcs 	_SFWExit
.912d		c6 38		dec $38				dec 	zTemp1 						; decrement the sructure count
.912f		c9 ab		cmp #$ab			cmp 	#KWC_FIRST_STRUCTURE_DEC 	; back if it is a dec structure (e.g. WEND/NEXT)
.9131		b0 28		bcs $915b			bcs 	_SFWExit
.9133		e6 38		inc $38				inc 	zTemp1 						; so it's an increment structure
.9135		e6 38		inc $38				inc 	zTemp1 						; twice to undo the dec
.9137		80 22		bra $915b			bra 	_SFWExit
.9139						_ScanSkipOne:
.9139		c8		iny				iny 								; consume the extra one.
.913a		c9 80		cmp #$80			cmp 	#KWC_EOL 					; if not EOL loop back
.913c		d0 1d		bne $915b			bne 	_SFWExit
.913e		18		clc				clc
.913f		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.9141		65 30		adc $30				adc 	codePtr
.9143		85 30		sta $30				sta 	codePtr
.9145		90 02		bcc $9149			bcc 	_CREExit
.9147		e6 31		inc $31				inc 	codePtr+1 					; carry
.9149						_CREExit:
.9149		a0 03		ldy #$03			ldy 	#3 							; scan start position.
.914b		b2 30		lda ($30)			lda 	(codePtr)
.914d		d0 0c		bne $915b			bne 	_SFWExit 					; if not zero, more to scan
.914f		a9 13		lda #$13		lda	#19
.9151		4c b7 91	jmp $91b7		jmp	ErrorHandler
.9154						_ScanSkipData:
.9154		88		dey				dey 								; point at data token
.9155		c8		iny				iny 								; point to offset
.9156		98		tya				tya 								; A = offset position
.9157		38		sec				sec 								; add size +1 hence SEC
.9158		71 30		adc ($30),y			adc 	(codePtr),y
.915a		a8		tay				tay 								; make current position.
.915b						_SFWExit:
.915b		60		rts				rts
.915c						ScanGetCurrentLineStep:
.915c		64 38		stz $38				stz 	zTemp1
.915e		a0 03		ldy #$03			ldy 	#3
.9160						_SGCLSLoop:
.9160		b1 30		lda ($30),y			lda 	(codePtr),y
.9162		c8		iny				iny
.9163		c9 80		cmp #$80			cmp 	#KWC_EOL	 				; if EOL exit
.9165		f0 05		beq $916c			beq 	_SGCLSExit
.9167		20 19 91	jsr $9119			jsr 	ScanForwardOne
.916a		80 f4		bra $9160			bra 	_SGCLSLoop
.916c						_SGCLSExit:
.916c		a5 38		lda $38				lda 	zTemp1 						; return the adjustment
.916e		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/while.asm

.916f						Command_WHILE:
.916f		5a		phy				phy 								; save position of the test
.9170		a2 00		ldx #$00			ldx 	#0 							; work out the while test.
.9172		20 50 a0	jsr $a050			jsr 	EvaluateNumber
.9175		20 24 a1	jsr $a124			jsr 	NSMIsZero 					; check if zero
.9178		f0 0e		beq $9188			beq 	_WHExitLoop 				; if so exit the loop, while has failed.
.917a		98		tya				tya 								; position *after* test.
.917b		7a		ply				ply 								; restore position before test, at WHILE
.917c		88		dey				dey 								; so we execute the WHILE command again.
.917d		48		pha				pha 								; push after test on the stack
.917e		a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; allocate 6 bytes on the return stack.
.9180		20 e1 b1	jsr $b1e1			jsr 	StackOpen
.9183		20 26 b2	jsr $b226			jsr 	STKSaveCodePosition 		; save loop position - where the test value expr is.
.9186		7a		ply				ply 								; restore the position *after* the test
.9187		60		rts				rts
.9188						_WHExitLoop:
.9188		68		pla				pla 								; throw post loop position
.9189		a9 b0		lda #$b0			lda 	#KWD_WEND 					; scan forward past WEND
.918b		aa		tax				tax
.918c		20 f9 90	jsr $90f9			jsr 	ScanForward
.918f		60		rts				rts
.9190						Command_WEND:
.9190		a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; check WHILE is TOS e.g. in a while loop :)
.9192		a2 10		ldx #$10			ldx 	#ERRID_WHILE 				; this error if not.
.9194		20 0e b2	jsr $b20e			jsr 	StackCheckFrame
.9197		20 37 b2	jsr $b237			jsr 	STKLoadCodePosition 		; loop back to the WHILE keyword.
.919a		20 00 b2	jsr $b200			jsr 	StackClose		 			; erase the frame
.919d		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/charcheck.asm

.919e						CheckRightBracket:
.919e		b1 30		lda ($30),y			lda 	(codePtr),y
.91a0		c8		iny				iny
.91a1		c9 29		cmp #$29			cmp 	#KWD_RPAREN 						; exit if matches
.91a3		d0 0f		bne $91b4			bne 	CNAFail
.91a5		60		rts				rts
.91a6						CheckComma:
.91a6		b1 30		lda ($30),y			lda 	(codePtr),y
.91a8		c8		iny				iny
.91a9		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 						; exit if matches
.91ab		d0 07		bne $91b4			bne 	CNAFail
.91ad		60		rts				rts
.91ae						CheckNextA:
.91ae		d1 30		cmp ($30),y			cmp 	(codePtr),y
.91b0		d0 02		bne $91b4			bne 	CNAFail
.91b2		c8		iny				iny 								; skip character
.91b3		60		rts				rts 								; and exit
.91b4						CNAFail:
.91b4		4c 80 a2	jmp $a280			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/errors.asm

.91b7						ErrorHandler:
.91b7		a8		tay				tay 								; find the error text
.91b8		f0 49		beq $9203			beq 	_EHEnd
.91ba		a2 00		ldx #$00			ldx 	#0
.91bc		a9 99		lda #$99			lda 	#((ErrorText) & $FF)
.91be		85 36		sta $36				sta 	0+zTemp0
.91c0		a9 a2		lda #$a2			lda 	#((ErrorText) >> 8)
.91c2		85 37		sta $37				sta 	1+zTemp0
.91c4						_EHFind:
.91c4		88		dey				dey 								; keep looking through text
.91c5		f0 0e		beq $91d5			beq 	_EHFound
.91c7						_EHFindZero:
.91c7		b2 36		lda ($36)			lda 	(zTemp0) 					; find the next error
.91c9		e6 36		inc $36				inc 	zTemp0
.91cb		d0 02		bne $91cf			bne 	_EHFNoCarry
.91cd		e6 37		inc $37				inc 	zTemp0+1
.91cf						_EHFNoCarry:
.91cf		c9 00		cmp #$00			cmp 	#0
.91d1		d0 f4		bne $91c7			bne 	_EHFindZero
.91d3		80 ef		bra $91c4			bra 	_EHFind
.91d5						_EHFound:
.91d5		a5 36		lda $36				lda 	zTemp0 						; print message
.91d7		a6 37		ldx $37				ldx 	zTemp0+1
.91d9		20 10 92	jsr $9210			jsr 	PrintStringXA
.91dc		a0 01		ldy #$01			ldy 	#1 							; if line number zero don't print it
.91de		b1 30		lda ($30),y			lda 	(codePtr),y
.91e0		d0 05		bne $91e7			bne 	_EHAtMsg
.91e2		c8		iny				iny
.91e3		b1 30		lda ($30),y			lda 	(codePtr),y
.91e5		f0 17		beq $91fe			beq 	_EHCREnd
.91e7						_EHAtMsg:
.91e7		a2 92		ldx #$92			ldx 	#_AtMsg >> 8 				; print " at "
.91e9		a9 06		lda #$06			lda 	#_AtMsg & $FF
.91eb		20 10 92	jsr $9210			jsr 	PrintStringXA
.91ee		a0 01		ldy #$01			ldy 	#1 							; line number into XA
.91f0		b1 30		lda ($30),y			lda 	(codePtr),y
.91f2		48		pha				pha
.91f3		c8		iny				iny
.91f4		b1 30		lda ($30),y			lda 	(codePtr),y
.91f6		aa		tax				tax
.91f7		68		pla				pla
.91f8		20 26 96	jsr $9626			jsr 	ConvertInt16 				; convert XA to string
.91fb		20 10 92	jsr $9210			jsr 	PrintStringXA 				; and print it.
.91fe						_EHCREnd:
.91fe		a9 0d		lda #$0d			lda 	#13 						; new line
.9200		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.9203						_EHEnd:
.9203		4c 28 84	jmp $8428			jmp 	WarmStart
>9206		20 61 74 20 6c 69 6e 65		_AtMsg:	.text 	" at line ",0
>920e		20 00
.9210						PrintStringXA:
.9210		5a		phy				phy
.9211		86 37		stx $37				stx 	zTemp0+1
.9213		85 36		sta $36				sta 	zTemp0
.9215		a0 00		ldy #$00			ldy 	#0
.9217						_PSXALoop:
.9217		b1 36		lda ($36),y			lda 	(zTemp0),y
.9219		f0 06		beq $9221			beq 	_PSXAExit
.921b		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.921e		c8		iny				iny
.921f		80 f6		bra $9217			bra 	_PSXALoop
.9221						_PSXAExit:
.9221		7a		ply				ply
.9222		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/compare.asm

.9223						UnaryTrue:
.9223		fa		plx				plx
.9224						ReturnTrue:
.9224		a9 01		lda #$01			lda 	#1  						; set to 1
.9226		20 04 a1	jsr $a104			jsr 	NSMSetByte
.9229		a9 80		lda #$80			lda 	#$80 						; set sign flag, so it is -1
.922b		95 50		sta $50,x			sta 	NSStatus,x
.922d		60		rts				rts
.922e						UnaryFalse:
.922e		fa		plx				plx
.922f						ReturnFalse:
.922f		4c 02 a1	jmp $a102			jmp 	NSMSetZero 					; set it all to zero
.9232						BinaryCompareEqual:
.9232		fa		plx				plx
.9233		20 6e 92	jsr $926e			jsr 	CompareBaseCode
.9236		c9 00		cmp #$00			cmp 	#0
.9238		f0 ea		beq $9224			beq 	ReturnTrue
.923a		80 f3		bra $922f			bra 	ReturnFalse
.923c						BinaryCompareLess:
.923c		fa		plx				plx
.923d		20 6e 92	jsr $926e			jsr 	CompareBaseCode
.9240		c9 ff		cmp #$ff			cmp 	#$FF
.9242		f0 e0		beq $9224			beq 	ReturnTrue
.9244		80 e9		bra $922f			bra 	ReturnFalse
.9246						BinaryCompareGreater:
.9246		fa		plx				plx
.9247		20 6e 92	jsr $926e			jsr 	CompareBaseCode
.924a		c9 01		cmp #$01			cmp 	#1
.924c		f0 d6		beq $9224			beq 	ReturnTrue
.924e		80 df		bra $922f			bra 	ReturnFalse
.9250						BinaryCompareNotEqual:
.9250		fa		plx				plx
.9251		20 6e 92	jsr $926e			jsr 	CompareBaseCode
.9254		c9 00		cmp #$00			cmp 	#0
.9256		d0 cc		bne $9224			bne 	ReturnTrue
.9258		80 d5		bra $922f			bra 	ReturnFalse
.925a						BinaryCompareLessEqual:
.925a		fa		plx				plx
.925b		20 6e 92	jsr $926e			jsr 	CompareBaseCode
.925e		c9 01		cmp #$01			cmp 	#1
.9260		d0 c2		bne $9224			bne 	ReturnTrue
.9262		80 cb		bra $922f			bra 	ReturnFalse
.9264						BinaryCompareGreaterEqual:
.9264		fa		plx				plx
.9265		20 6e 92	jsr $926e			jsr 	CompareBaseCode
.9268		c9 ff		cmp #$ff			cmp 	#$FF
.926a		d0 b8		bne $9224			bne 	ReturnTrue
.926c		80 c1		bra $922f			bra 	ReturnFalse
.926e						CompareBaseCode:
.926e		20 79 99	jsr $9979			jsr 	DereferenceTopTwo 			; make both values if references.
.9271		b5 50		lda $50,x			lda 	NSStatus,x 					; check if either is a string.
.9273		15 51		ora $51,x			ora 	NSStatus+1,x
.9275		29 10		and #$10			and 	#NSTString
.9277		d0 37		bne $92b0			bne 	_CBCString 					; if so do string code, which will check if both.
.9279		b5 78		lda $78,x			lda 	NSExponent,x 				; check both are integers
.927b		15 79		ora $79,x			ora 	NSExponent+1,x
.927d		d0 34		bne $92b3			bne 	_CBCFloat
.927f		b5 50		lda $50,x			lda 	NSStatus,x
.9281		15 51		ora $51,x			ora 	NSStatus+1,x
.9283		29 08		and #$08			and 	#NSTFloat
.9285		d0 2c		bne $92b3			bne 	_CBCFloat
.9287		20 b6 92	jsr $92b6			jsr 	CompareFixMinusZero 		; fix up -0 just in cases.
.928a		e8		inx				inx
.928b		20 b6 92	jsr $92b6			jsr 	CompareFixMinusZero
.928e		ca		dex				dex
.928f		b5 50		lda $50,x			lda 	NSStatus,x 					; are the signs different ?
.9291		55 51		eor $51,x			eor 	NSStatus+1,x
.9293		10 0a		bpl $929f			bpl 	_CDCSameSign
.9295		b5 50		lda $50,x			lda 	NSStatus,x 					; if first one is -ve
.9297		30 14		bmi $92ad			bmi 	_CBCLess 					; return $FF
.9299						_CBCGreater:
.9299		a9 01		lda #$01			lda 	#1
.929b		60		rts				rts
.929c						_CBCEqual:
.929c		a9 00		lda #$00			lda 	#0
.929e		60		rts				rts
.929f						_CDCSameSign:
.929f		20 cb 94	jsr $94cb			jsr 	SubTopTwoStack 				; unsigned subtract
.92a2		20 24 a1	jsr $a124			jsr 	NSMIsZero 					; or the mantissa together
.92a5		f0 f5		beq $929c			beq 	_CBCEqual 					; -0 == 0
.92a7		b5 70		lda $70,x			lda 	NSMantissa3,x 				; sign of the result. if +ve return $01 else return $FF
.92a9		55 51		eor $51,x			eor 	NSStatus+1,x 				; however if both were -ve this is inverted
.92ab		10 ec		bpl $9299			bpl 	_CBCGreater
.92ad						_CBCLess:
.92ad		a9 ff		lda #$ff			lda 	#$FF
.92af		60		rts				rts
.92b0						_CBCString:
.92b0		4c 3c 94	jmp $943c			jmp 	CompareStrings
.92b3						_CBCFloat:
.92b3		4c 86 97	jmp $9786			jmp 	CompareFloat
.92b6						CompareFixMinusZero:
.92b6		20 24 a1	jsr $a124			jsr 	NSMIsZero
.92b9		d0 02		bne $92bd			bne 	_CFXMZNotZero
.92bb		74 50		stz $50,x			stz 	NSStatus,x
.92bd						_CFXMZNotZero:
.92bd		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/concat.asm

.92be						StringConcat:
.92be		b5 50		lda $50,x			lda 	NSStatus,x 					; check both strings
.92c0		35 51		and $51,x			and 	NSStatus+1,x
.92c2		29 18		and #$18			and 	#NSBTypeMask
.92c4		c9 10		cmp #$10			cmp 	#NSTString
.92c6		d0 50		bne $9318			bne		_SCType
.92c8		64 38		stz $38				stz 	zTemp1 						; counting total length
.92ca		e8		inx				inx
.92cb		20 e9 92	jsr $92e9			jsr 	_SCSetupZ0 					; setup for second
.92ce		20 f2 92	jsr $92f2			jsr 	_SCLengthZ0 				; length for second
.92d1		ca		dex				dex
.92d2		20 e9 92	jsr $92e9			jsr 	_SCSetupZ0 					; setup for first
.92d5		20 f2 92	jsr $92f2			jsr 	_SCLengthZ0 				; length for first
.92d8		a5 38		lda $38				lda 	zTemp1 						; allocate memory using total.
.92da		20 d1 b2	jsr $b2d1			jsr 	StringTempAllocate
.92dd		20 09 93	jsr $9309			jsr 	_SCCopy 					; copy first out, using zTemp0 from above
.92e0		e8		inx				inx
.92e1		20 e9 92	jsr $92e9			jsr 	_SCSetupZ0 					; copy second out
.92e4		20 09 93	jsr $9309			jsr 	_SCCopy
.92e7		ca		dex				dex
.92e8		60		rts				rts
.92e9						_SCSetupZ0:
.92e9		b5 58		lda $58,x			lda 	NSMantissa0,x
.92eb		85 36		sta $36				sta 	zTemp0
.92ed		b5 60		lda $60,x			lda 	NSMantissa1,x
.92ef		85 37		sta $37				sta 	zTemp0+1
.92f1		60		rts				rts
.92f2						_SCLengthZ0:
.92f2		5a		phy				phy
.92f3		a0 00		ldy #$00			ldy 	#0
.92f5						_SCLenLoop:
.92f5		b1 36		lda ($36),y			lda 	(zTemp0),y
.92f7		f0 0e		beq $9307			beq 	_SCLExit
.92f9		c8		iny				iny
.92fa		e6 38		inc $38				inc 	zTemp1
.92fc		a5 38		lda $38				lda	 	zTemp1 						; check string too long.
.92fe		c9 fd		cmp #$fd			cmp 	#253
.9300		d0 f3		bne $92f5			bne		_SCLenLoop
.9302		a9 09		lda #$09		lda	#9
.9304		4c b7 91	jmp $91b7		jmp	ErrorHandler
.9307						_SCLExit:
.9307		7a		ply				ply
.9308		60		rts				rts
.9309						_SCCopy:
.9309		5a		phy				phy
.930a		a0 00		ldy #$00			ldy 	#0
.930c						_SCCopyLoop:
.930c		b1 36		lda ($36),y			lda 	(zTemp0),y
.930e		f0 06		beq $9316			beq 	_SCCExit
.9310		20 0a b3	jsr $b30a			jsr 	StringTempWrite
.9313		c8		iny				iny
.9314		80 f6		bra $930c			bra 	_SCCopyLoop
.9316						_SCCExit:
.9316		7a		ply				ply
.9317		60		rts				rts
.9318						_SCType:
.9318		4c 8a a2	jmp $a28a			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/divide.asm

.931b						IntegerDivide:
.931b		fa		plx				plx
.931c		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.931e		15 51		ora $51,x			ora 	NSStatus+1,x
.9320		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9321		0a		asl a				asl 	a
.9322		10 05		bpl $9329			bpl 	_NotRef
.9324		48		pha				pha
.9325		20 79 99	jsr $9979			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9328		68		pla				pla
.9329						_NotRef:
.9329		0a		asl a				asl 	a
.932a		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.932c		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.932e		15 79		ora $79,x			ora 	NSExponent+1,x
.9330		f0 03		beq $9335			beq 	_IntegerCode 				; if clear, then we have two integers
.9332		4c 8a a2	jmp $a28a			jmp 	TypeError 					; anything else, type mismatch.
.9335						_IntegerCode:
.9335		20 4f 93	jsr $934f			jsr 	CheckDivideZero 			; do div zero check
.9338		20 81 93	jsr $9381			jsr 	Int32Divide 				; do the division
.933b		20 32 94	jsr $9432			jsr 	CalculateSign 				; calculate result sign
.933e						NSMCopyPlusTwoToZero:
.933e		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.9340		95 58		sta $58,x			sta 	NSMantissa0,x
.9342		b5 62		lda $62,x			lda 	NSMantissa1+2,x
.9344		95 60		sta $60,x			sta 	NSMantissa1,x
.9346		b5 6a		lda $6a,x			lda 	NSMantissa2+2,x
.9348		95 68		sta $68,x			sta 	NSMantissa2,x
.934a		b5 72		lda $72,x			lda 	NSMantissa3+2,x
.934c		95 70		sta $70,x			sta 	NSMantissa3,x
.934e		60		rts				rts
.934f						CheckDivideZero:
.934f		e8		inx				inx
.9350		20 24 a1	jsr $a124			jsr 	NSMIsZero
.9353		f0 02		beq $9357			beq 	_CDVError
.9355		ca		dex				dex
.9356		60		rts				rts
.9357						_CDVError:
.9357		a9 03		lda #$03		lda	#3
.9359		4c b7 91	jmp $91b7		jmp	ErrorHandler
.935c						IntegerModulus:
.935c		fa		plx				plx
.935d		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.935f		15 51		ora $51,x			ora 	NSStatus+1,x
.9361		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9362		0a		asl a				asl 	a
.9363		10 05		bpl $936a			bpl 	_NotRef
.9365		48		pha				pha
.9366		20 79 99	jsr $9979			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9369		68		pla				pla
.936a						_NotRef:
.936a		0a		asl a				asl 	a
.936b		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.936d		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.936f		15 79		ora $79,x			ora 	NSExponent+1,x
.9371		f0 03		beq $9376			beq 	_IntegerCode 				; if clear, then we have two integers
.9373		4c 8a a2	jmp $a28a			jmp 	TypeError 					; anything else, type mismatch.
.9376						_IntegerCode:
.9376						IntegerModulusNoCheck:
.9376		20 4f 93	jsr $934f			jsr 	CheckDivideZero 			; do div zero check
.9379		20 81 93	jsr $9381			jsr 	Int32Divide 				; do the division
.937c		16 50		asl $50,x			asl 	NSStatus,x 					; clear the sign bit.
.937e		56 50		lsr $50,x			lsr 	NSStatus,x
.9380		60		rts				rts
.9381						Int32Divide:
.9381		48		pha				pha 								; save AXY
.9382		5a		phy				phy
.9383		20 e5 a0	jsr $a0e5			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.9386		20 fe a0	jsr $a0fe			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.9389		a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.938b						_I32DivideLoop:
.938b		e8		inx				inx
.938c		e8		inx				inx
.938d		20 11 a1	jsr $a111			jsr 	NSMShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.9390		ca		dex				dex
.9391		ca		dex				dex
.9392		20 12 a1	jsr $a112			jsr 	NSMRotateLeft
.9395		20 c0 93	jsr $93c0			jsr 	DivideCheckSubtract 		; check if subtract possible
.9398		90 02		bcc $939c			bcc 	_I32DivideNoCarryIn
.939a		f6 5a		inc $5a,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.939c						_I32DivideNoCarryIn:
.939c		88		dey				dey 								; loop round till division completed.
.939d		d0 ec		bne $938b			bne 	_I32DivideLoop
.939f		7a		ply				ply 								; restore AXY and exit
.93a0		68		pla				pla
.93a1		60		rts				rts
.93a2						Int32ShiftDivide:
.93a2		48		pha				pha 								; save AY
.93a3		5a		phy				phy
.93a4		e8		inx				inx 								; clear S[X+2]
.93a5		e8		inx				inx
.93a6		20 02 a1	jsr $a102			jsr 	NSMSetZero
.93a9		ca		dex				dex
.93aa		ca		dex				dex
.93ab		a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.93ad						_I32SDLoop:
.93ad		20 c0 93	jsr $93c0			jsr 	DivideCheckSubtract 		; check if subtract possible
.93b0		e8		inx				inx
.93b1		e8		inx				inx
.93b2		20 12 a1	jsr $a112			jsr 	NSMRotateLeft				; shift 64 bit FPA left, rotating carry in
.93b5		ca		dex				dex
.93b6		ca		dex				dex
.93b7		20 12 a1	jsr $a112			jsr 	NSMRotateLeft
.93ba		88		dey				dey 	 							; do 31 times
.93bb		d0 f0		bne $93ad			bne 	_I32SDLoop
.93bd		7a		ply				ply 								; restore AY and exit
.93be		68		pla				pla
.93bf		60		rts				rts
.93c0						DivideCheckSubtract:
.93c0		20 cb 94	jsr $94cb			jsr 	SubTopTwoStack 				; subtract Stack[X+1] from Stack[X+0]
.93c3		b0 04		bcs $93c9			bcs 	_DCSExit 					; if carry set, then could do, exit
.93c5		20 b1 94	jsr $94b1			jsr 	AddTopTwoStack 				; add it back in
.93c8		18		clc				clc 								; and return False
.93c9						_DCSExit:
.93c9		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/multiply.asm

.93ca						MulInteger:
.93ca		fa		plx				plx
.93cb		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.93cd		15 51		ora $51,x			ora 	NSStatus+1,x
.93cf		0a		asl a				asl 	a 							; shift reference bit into sign bit
.93d0		0a		asl a				asl 	a
.93d1		10 05		bpl $93d8			bpl 	_NotRef
.93d3		48		pha				pha
.93d4		20 79 99	jsr $9979			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.93d7		68		pla				pla
.93d8						_NotRef:
.93d8		0a		asl a				asl 	a 							; put MSB of type into A:7
.93d9		30 09		bmi $93e4			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.93db		b5 78		lda $78,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.93dd		15 79		ora $79,x			ora 	NSExponent+1,x
.93df		f0 06		beq $93e7			beq 	_IntegerCode 				; if clear, then we have two integers
.93e1		4c 48 98	jmp $9848			jmp 	FloatingPointMultiply 							; otherwise at least one float.
.93e4						_StringData:
.93e4		4c 94 a2	jmp $a294			jmp 	NotDoneError							; at least one string - don't know both are strings.
.93e7						_IntegerCode:
.93e7		20 f4 93	jsr $93f4			jsr 	MultiplyShort
.93ea		c9 00		cmp #$00			cmp 	#0
.93ec		f0 05		beq $93f3			beq 	_MIExit
.93ee		a9 04		lda #$04		lda	#4
.93f0		4c b7 91	jmp $91b7		jmp	ErrorHandler
.93f3						_MIExit:
.93f3		60		rts				rts
.93f4						MultiplyShort:
.93f4		5a		phy				phy 								; save Y
.93f5		20 e5 a0	jsr $a0e5			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.93f8		20 fe a0	jsr $a0fe			jsr 	NSMSetZeroMantissaOnly 		; set mantissa S[X] to zero
.93fb		a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.93fd						_I32MLoop:
.93fd		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.93ff		15 62		ora $62,x			ora 	NSMantissa1+2,x
.9401		15 6a		ora $6a,x			ora 	NSMantissa2+2,x
.9403		15 72		ora $72,x			ora 	NSMantissa3+2,x
.9405		f0 25		beq $942c			beq 	_I32MExit 					; exit if zero
.9407		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.9409		29 01		and #$01			and 	#1
.940b		f0 0d		beq $941a			beq 	_I32MNoAdd
.940d		20 b1 94	jsr $94b1			jsr 	AddTopTwoStack 				; if so add S[X+1] to S[X+0]
.9410		b5 70		lda $70,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.9412		10 06		bpl $941a			bpl 	_I32MNoAdd
.9414						_I32ShiftRight:
.9414		20 1b a1	jsr $a11b			jsr 	NSMShiftRight 				; shift S[X] right
.9417		c8		iny				iny 								; increment shift count
.9418		80 09		bra $9423			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.941a						_I32MNoAdd:
.941a		34 71		bit $71,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.941c		70 f6		bvs $9414			bvs 	_I32ShiftRight 				; instead.
.941e		e8		inx				inx
.941f		20 11 a1	jsr $a111			jsr 	NSMShiftLeft 				; shift additive S[X+1] left
.9422		ca		dex				dex
.9423						_I32MShiftUpper:
.9423		e8		inx				inx 								; shift S[X+2] right
.9424		e8		inx				inx
.9425		20 1b a1	jsr $a11b			jsr 	NSMShiftRight
.9428		ca		dex				dex
.9429		ca		dex				dex
.942a		80 d1		bra $93fd			bra 	_I32MLoop 					; try again.
.942c						_I32MExit:
.942c		20 32 94	jsr $9432			jsr 	CalculateSign
.942f		98		tya				tya 								; shift in A
.9430		7a		ply				ply 								; restore Y and exit
.9431		60		rts				rts
.9432						CalculateSign:
.9432		b5 50		lda $50,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.9434		16 50		asl $50,x			asl 	NSStatus,x 					; shift result left
.9436		55 51		eor $51,x			eor 	NSStatus+1,x
.9438		0a		asl a				asl 	a 							; shift bit 7 into carry
.9439		76 50		ror $50,x			ror 	NSStatus,x 					; shift right into status byte.
.943b		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/scompare.asm

.943c						CompareStrings:
.943c		b5 50		lda $50,x			lda 	NSStatus,x 					; check both are strings
.943e		35 51		and $51,x			and 	NSStatus+1,x
.9440		29 10		and #$10			and 	#NSBIsString
.9442		f0 28		beq $946c			beq 	_CSTypeError
.9444		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy string addresses to zTemp0/1
.9446		85 36		sta $36				sta 	zTemp0
.9448		b5 60		lda $60,x			lda 	NSMantissa1,x
.944a		85 37		sta $37				sta 	zTemp0+1
.944c		b5 59		lda $59,x			lda 	NSMantissa0+1,x
.944e		85 38		sta $38				sta 	zTemp1
.9450		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9452		85 39		sta $39				sta 	zTemp1+1
.9454		5a		phy				phy 								; save Y so we can access strings
.9455		a0 ff		ldy #$ff			ldy 	#$FF 						; -1 for pre increment.
.9457						_CSLoop:
.9457		c8		iny				iny
.9458		b1 36		lda ($36),y			lda 	(zTemp0),y 					; check if they are the same
.945a		d1 38		cmp ($38),y			cmp 	(zTemp1),y
.945c		d0 06		bne $9464			bne 	_CSDifferent
.945e		c9 00		cmp #$00			cmp 	#0 							; reached end ?
.9460		d0 f5		bne $9457			bne 	_CSLoop 					; still comparing
.9462						_CSExit:
.9462		7a		ply				ply 								; reached end, return zero in A from EOS
.9463		60		rts				rts
.9464						_CSDifferent:
.9464		a9 ff		lda #$ff			lda 	#255 						; if < return $FF
.9466		90 fa		bcc $9462			bcc		_CSExit
.9468		a9 01		lda #$01			lda 	#1 							; otherwise return 1.
.946a		80 f6		bra $9462			bra 	_CSExit
.946c						_CSTypeError:
.946c		4c 8a a2	jmp $a28a			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/shifts.asm

.946f						ShiftLeft:
.946f		38		sec				sec 								; common code, carry determines which way.
.9470		80 01		bra $9473			bra 	ShiftMain
.9472						ShiftRight:
.9472		18		clc				clc
.9473						ShiftMain:
.9473		fa		plx				plx 								; restore X
.9474		08		php				php 								; save direction
.9475		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9477		15 51		ora $51,x			ora 	NSStatus+1,x
.9479		0a		asl a				asl 	a 							; shift reference bit into sign bit
.947a		0a		asl a				asl 	a
.947b		10 05		bpl $9482			bpl 	_NotRef
.947d		48		pha				pha
.947e		20 79 99	jsr $9979			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9481		68		pla				pla
.9482						_NotRef:
.9482		0a		asl a				asl 	a
.9483		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9485		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9487		15 79		ora $79,x			ora 	NSExponent+1,x
.9489		f0 03		beq $948e			beq 	_IntegerCode 				; if clear, then we have two integers
.948b		4c 8a a2	jmp $a28a			jmp 	TypeError 					; anything else, type mismatch.
.948e						_IntegerCode:
.948e		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; check number < 32
.9490		29 e0		and #$e0			and 	#$E0
.9492		15 61		ora $61,x			ora 	NSMantissa1+1,x
.9494		15 69		ora $69,x			ora 	NSMantissa2+1,x
.9496		15 71		ora $71,x			ora 	NSMantissa3+1,x
.9498		d0 12		bne $94ac			bne 	_SMExit0 					; if >= 32 it will always return zero.
.949a						_SMLoop:
.949a		d6 59		dec $59,x			dec 	NSMantissa0+1,x 			; predecrement, could do << 0
.949c		30 11		bmi $94af			bmi 	_SMExit 					; exit if done.
.949e		28		plp				plp 								; restore direction setting
.949f		08		php				php
.94a0		90 05		bcc $94a7			bcc 	_SMRight
.94a2		20 11 a1	jsr $a111			jsr 	NSMShiftLeft 				; shift left if CS
.94a5		80 f3		bra $949a			bra 	_SMLoop
.94a7						_SMRight:
.94a7		20 1b a1	jsr $a11b			jsr 	NSMShiftRight 				; shift right if CC
.94aa		80 ee		bra $949a			bra 	_SMLoop
.94ac						_SMExit0:
.94ac		20 02 a1	jsr $a102			jsr 	NSMSetZero 					; return zero.
.94af						_SMExit:
.94af		28		plp				plp 								; throw direction
.94b0		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/simple.asm

.94b1						AddTopTwoStack:
.94b1		18		clc				clc
.94b2		b5 58		lda $58,x			lda		NSMantissa0,x
.94b4		75 59		adc $59,x			adc 		NSMantissa0+1,x
.94b6		95 58		sta $58,x			sta 	NSMantissa0,x
.94b8		b5 60		lda $60,x			lda		NSMantissa1,x
.94ba		75 61		adc $61,x			adc 		NSMantissa1+1,x
.94bc		95 60		sta $60,x			sta 	NSMantissa1,x
.94be		b5 68		lda $68,x			lda		NSMantissa2,x
.94c0		75 69		adc $69,x			adc 		NSMantissa2+1,x
.94c2		95 68		sta $68,x			sta 	NSMantissa2,x
.94c4		b5 70		lda $70,x			lda		NSMantissa3,x
.94c6		75 71		adc $71,x			adc 		NSMantissa3+1,x
.94c8		95 70		sta $70,x			sta 	NSMantissa3,x
.94ca		60		rts				rts
.94cb						SubTopTwoStack:
.94cb		38		sec				sec
.94cc		b5 58		lda $58,x			lda		NSMantissa0,x
.94ce		f5 59		sbc $59,x			sbc 		NSMantissa0+1,x
.94d0		95 58		sta $58,x			sta 	NSMantissa0,x
.94d2		b5 60		lda $60,x			lda		NSMantissa1,x
.94d4		f5 61		sbc $61,x			sbc 		NSMantissa1+1,x
.94d6		95 60		sta $60,x			sta 	NSMantissa1,x
.94d8		b5 68		lda $68,x			lda		NSMantissa2,x
.94da		f5 69		sbc $69,x			sbc 		NSMantissa2+1,x
.94dc		95 68		sta $68,x			sta 	NSMantissa2,x
.94de		b5 70		lda $70,x			lda		NSMantissa3,x
.94e0		f5 71		sbc $71,x			sbc 		NSMantissa3+1,x
.94e2		95 70		sta $70,x			sta 	NSMantissa3,x
.94e4		60		rts				rts
.94e5						AddInteger:
.94e5		fa		plx				plx
.94e6		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.94e8		15 51		ora $51,x			ora 	NSStatus+1,x
.94ea		0a		asl a				asl 	a 							; shift reference bit into sign bit
.94eb		0a		asl a				asl 	a
.94ec		10 05		bpl $94f3			bpl 	_NotRef
.94ee		48		pha				pha
.94ef		20 79 99	jsr $9979			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.94f2		68		pla				pla
.94f3						_NotRef:
.94f3		0a		asl a				asl 	a 							; put MSB of type into A:7
.94f4		30 09		bmi $94ff			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.94f6		b5 78		lda $78,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.94f8		15 79		ora $79,x			ora 	NSExponent+1,x
.94fa		f0 06		beq $9502			beq 	_IntegerCode 				; if clear, then we have two integers
.94fc		4c f8 96	jmp $96f8			jmp 	FloatingPointAdd 							; otherwise at least one float.
.94ff						_StringData:
.94ff		4c be 92	jmp $92be			jmp 	StringConcat							; at least one string - don't know both are strings.
.9502						_IntegerCode:
.9502						AddCode:
.9502		b5 50		lda $50,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.9504		55 51		eor $51,x			eor 	NSStatus+1,x
.9506		10 a9		bpl $94b1			bpl 	AddTopTwoStack
.9508		20 cb 94	jsr $94cb			jsr 	SubTopTwoStack 				; do a physical subtraction
.950b		34 70		bit $70,x			bit 	NSMantissa3,x 				; result is +ve, okay
.950d		10 07		bpl $9516			bpl 	_AddExit
.950f		b5 51		lda $51,x			lda 	NSStatus+1,x 				; sign is that of 2nd value
.9511		95 50		sta $50,x			sta 	NSStatus,x
.9513		20 cb a0	jsr $a0cb			jsr 	NSMNegateMantissa 			; negate the mantissa and exit
.9516						_AddExit:
.9516		20 24 a1	jsr $a124			jsr 	NSMIsZero 					; check for -0
.9519		d0 02		bne $951d			bne 	_AddNonZero
.951b		74 50		stz $50,x			stz 	NSStatus,x
.951d						_AddNonZero:
.951d		60		rts				rts
.951e						SubInteger:
.951e		fa		plx				plx
.951f		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9521		15 51		ora $51,x			ora 	NSStatus+1,x
.9523		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9524		0a		asl a				asl 	a
.9525		10 05		bpl $952c			bpl 	_NotRef
.9527		48		pha				pha
.9528		20 79 99	jsr $9979			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.952b		68		pla				pla
.952c						_NotRef:
.952c		0a		asl a				asl 	a 							; put MSB of type into A:7
.952d		30 09		bmi $9538			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.952f		b5 78		lda $78,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9531		15 79		ora $79,x			ora 	NSExponent+1,x
.9533		f0 06		beq $953b			beq 	_IntegerCode 				; if clear, then we have two integers
.9535		4c fd 96	jmp $96fd			jmp 	FloatingPointSub 							; otherwise at least one float.
.9538						_StringData:
.9538		4c 94 a2	jmp $a294			jmp 	NotDoneError							; at least one string - don't know both are strings.
.953b						_IntegerCode:
.953b		b5 51		lda $51,x			lda 	NSStatus+1,x 				; negate the second value.
.953d		49 80		eor #$80			eor 	#$80
.953f		95 51		sta $51,x			sta 	NSStatus+1,x
.9541		80 bf		bra $9502			bra 	AddCode 					; and do the same code as add.
.9543						AndInteger:
.9543		fa		plx				plx
.9544		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9546		15 51		ora $51,x			ora 	NSStatus+1,x
.9548		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9549		0a		asl a				asl 	a
.954a		10 05		bpl $9551			bpl 	_NotRef
.954c		48		pha				pha
.954d		20 79 99	jsr $9979			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9550		68		pla				pla
.9551						_NotRef:
.9551		0a		asl a				asl 	a
.9552		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9554		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9556		15 79		ora $79,x			ora 	NSExponent+1,x
.9558		f0 03		beq $955d			beq 	_IntegerCode 				; if clear, then we have two integers
.955a		4c 8a a2	jmp $a28a			jmp 	TypeError 					; anything else, type mismatch.
.955d						_IntegerCode:
.955d		b5 58		lda $58,x			lda		NSMantissa0,x
.955f		35 59		and $59,x			and 		NSMantissa0+1,x
.9561		95 58		sta $58,x			sta 	NSMantissa0,x
.9563		b5 60		lda $60,x			lda		NSMantissa1,x
.9565		35 61		and $61,x			and 		NSMantissa1+1,x
.9567		95 60		sta $60,x			sta 	NSMantissa1,x
.9569		b5 68		lda $68,x			lda		NSMantissa2,x
.956b		35 69		and $69,x			and 		NSMantissa2+1,x
.956d		95 68		sta $68,x			sta 	NSMantissa2,x
.956f		b5 70		lda $70,x			lda		NSMantissa3,x
.9571		35 71		and $71,x			and 		NSMantissa3+1,x
.9573		95 70		sta $70,x			sta 	NSMantissa3,x
.9575		74 50		stz $50,x			stz	 	NSStatus,x 					; ignore sign.
.9577		60		rts				rts
.9578						OraInteger:
.9578		fa		plx				plx
.9579		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.957b		15 51		ora $51,x			ora 	NSStatus+1,x
.957d		0a		asl a				asl 	a 							; shift reference bit into sign bit
.957e		0a		asl a				asl 	a
.957f		10 05		bpl $9586			bpl 	_NotRef
.9581		48		pha				pha
.9582		20 79 99	jsr $9979			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9585		68		pla				pla
.9586						_NotRef:
.9586		0a		asl a				asl 	a
.9587		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9589		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.958b		15 79		ora $79,x			ora 	NSExponent+1,x
.958d		f0 03		beq $9592			beq 	_IntegerCode 				; if clear, then we have two integers
.958f		4c 8a a2	jmp $a28a			jmp 	TypeError 					; anything else, type mismatch.
.9592						_IntegerCode:
.9592		b5 58		lda $58,x			lda		NSMantissa0,x
.9594		15 59		ora $59,x			ora 		NSMantissa0+1,x
.9596		95 58		sta $58,x			sta 	NSMantissa0,x
.9598		b5 60		lda $60,x			lda		NSMantissa1,x
.959a		15 61		ora $61,x			ora 		NSMantissa1+1,x
.959c		95 60		sta $60,x			sta 	NSMantissa1,x
.959e		b5 68		lda $68,x			lda		NSMantissa2,x
.95a0		15 69		ora $69,x			ora 		NSMantissa2+1,x
.95a2		95 68		sta $68,x			sta 	NSMantissa2,x
.95a4		b5 70		lda $70,x			lda		NSMantissa3,x
.95a6		15 71		ora $71,x			ora 		NSMantissa3+1,x
.95a8		95 70		sta $70,x			sta 	NSMantissa3,x
.95aa		74 50		stz $50,x			stz	 	NSStatus,x 					; ignore sign.
.95ac		60		rts				rts
.95ad						EorInteger:
.95ad		fa		plx				plx
.95ae		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.95b0		15 51		ora $51,x			ora 	NSStatus+1,x
.95b2		0a		asl a				asl 	a 							; shift reference bit into sign bit
.95b3		0a		asl a				asl 	a
.95b4		10 05		bpl $95bb			bpl 	_NotRef
.95b6		48		pha				pha
.95b7		20 79 99	jsr $9979			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.95ba		68		pla				pla
.95bb						_NotRef:
.95bb		0a		asl a				asl 	a
.95bc		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.95be		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.95c0		15 79		ora $79,x			ora 	NSExponent+1,x
.95c2		f0 03		beq $95c7			beq 	_IntegerCode 				; if clear, then we have two integers
.95c4		4c 8a a2	jmp $a28a			jmp 	TypeError 					; anything else, type mismatch.
.95c7						_IntegerCode:
.95c7		b5 58		lda $58,x			lda		NSMantissa0,x
.95c9		55 59		eor $59,x			eor 		NSMantissa0+1,x
.95cb		95 58		sta $58,x			sta 	NSMantissa0,x
.95cd		b5 60		lda $60,x			lda		NSMantissa1,x
.95cf		55 61		eor $61,x			eor 		NSMantissa1+1,x
.95d1		95 60		sta $60,x			sta 	NSMantissa1,x
.95d3		b5 68		lda $68,x			lda		NSMantissa2,x
.95d5		55 69		eor $69,x			eor 		NSMantissa2+1,x
.95d7		95 68		sta $68,x			sta 	NSMantissa2,x
.95d9		b5 70		lda $70,x			lda		NSMantissa3,x
.95db		55 71		eor $71,x			eor 		NSMantissa3+1,x
.95dd		95 70		sta $70,x			sta 	NSMantissa3,x
.95df		74 50		stz $50,x			stz	 	NSStatus,x 					; ignore sign.
.95e1		60		rts				rts
.95e2						WordIndirect:
.95e2		fa		plx				plx
.95e3		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.95e5		15 51		ora $51,x			ora 	NSStatus+1,x
.95e7		0a		asl a				asl 	a 							; shift reference bit into sign bit
.95e8		0a		asl a				asl 	a
.95e9		10 05		bpl $95f0			bpl 	_NotRef
.95eb		48		pha				pha
.95ec		20 79 99	jsr $9979			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.95ef		68		pla				pla
.95f0						_NotRef:
.95f0		0a		asl a				asl 	a
.95f1		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.95f3		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.95f5		15 79		ora $79,x			ora 	NSExponent+1,x
.95f7		f0 03		beq $95fc			beq 	_IntegerCode 				; if clear, then we have two integers
.95f9		4c 8a a2	jmp $a28a			jmp 	TypeError 					; anything else, type mismatch.
.95fc						_IntegerCode:
.95fc		20 02 95	jsr $9502			jsr 	AddCode 					; add the two values
.95ff		a9 22		lda #$22			lda 	#NSBIsReference+2 			; make a 2 byte reference
.9601		95 50		sta $50,x			sta 	NSStatus,x
.9603		60		rts				rts
.9604						ByteIndirect:
.9604		fa		plx				plx
.9605		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9607		15 51		ora $51,x			ora 	NSStatus+1,x
.9609		0a		asl a				asl 	a 							; shift reference bit into sign bit
.960a		0a		asl a				asl 	a
.960b		10 05		bpl $9612			bpl 	_NotRef
.960d		48		pha				pha
.960e		20 79 99	jsr $9979			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9611		68		pla				pla
.9612						_NotRef:
.9612		0a		asl a				asl 	a
.9613		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9615		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9617		15 79		ora $79,x			ora 	NSExponent+1,x
.9619		f0 03		beq $961e			beq 	_IntegerCode 				; if clear, then we have two integers
.961b		4c 8a a2	jmp $a28a			jmp 	TypeError 					; anything else, type mismatch.
.961e						_IntegerCode:
.961e		20 02 95	jsr $9502			jsr 	AddCode 					; add the two values
.9621		a9 21		lda #$21			lda 	#NSBIsReference+1 			; make a 1 byte reference
.9623		95 50		sta $50,x			sta 	NSStatus,x
.9625		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/tostring.asm

.9626						ConvertInt16:
.9626		85 58		sta $58				sta 	NSMantissa0 				; set up as 32 bit conversion
.9628		86 60		stx $60				stx 	NSMantissa1
.962a		64 68		stz $68				stz 	NSMantissa2
.962c		64 70		stz $70				stz 	NSMantissa3
.962e		64 50		stz $50				stz 	NSStatus 					; positive integer
.9630		a2 00		ldx #$00			ldx 	#0 							; stack level
.9632		a9 0a		lda #$0a			lda 	#10 						; base 10 decimal.
.9634		80 00		bra $9636			bra 	ConvertInt32
.9636						ConvertInt32:
.9636		5a		phy				phy
.9637		a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.9639		24 50		bit $50				bit 	NSStatus 					; output a - if not negative.
.963b		10 08		bpl $9645			bpl 	_CI32NotNeg
.963d		48		pha				pha
.963e		a9 2d		lda #$2d			lda 	#'-'
.9640		99 27 06	sta $0627,y			sta 	numberBuffer,y
.9643		c8		iny				iny
.9644		68		pla				pla
.9645						_CI32NotNeg:
.9645		20 53 96	jsr $9653			jsr 	_CI32DivideConvert 			; recursive conversion
.9648		a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.964a		99 27 06	sta $0627,y			sta 	numberBuffer,y
.964d		7a		ply				ply
.964e		a2 06		ldx #$06			ldx 	#numberBuffer >> 8 			; return address in XA
.9650		a9 27		lda #$27			lda 	#numberBuffer & $FF
.9652		60		rts				rts
.9653						_CI32DivideConvert:
.9653		e8		inx				inx 								; write to next slot up
.9654		20 04 a1	jsr $a104			jsr 	NSMSetByte 		 			; write the base out.
.9657		ca		dex				dex
.9658		20 81 93	jsr $9381			jsr 	Int32Divide 				; divide
.965b		b5 58		lda $58,x			lda 	NSMantissa0,x 				; save remainder
.965d		48		pha				pha
.965e		20 3e 93	jsr $933e			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.9661		20 24 a1	jsr $a124			jsr 	NSMIsZero 					; is it zero ?
.9664		f0 05		beq $966b			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.9666		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.9668		20 53 96	jsr $9653			jsr 	_CI32DivideConvert 			; and recusrively call.
.966b						_CI32NoRecurse:
.966b		68		pla				pla 								; remainder
.966c		c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII, allowing for hexadecimal.
.966e		90 02		bcc $9672			bcc 	_CI32NotHex
.9670		69 26		adc #$26			adc 	#6+32
.9672						_CI32NotHex:
.9672		69 30		adc #$30			adc 	#48
.9674		99 27 06	sta $0627,y			sta 	numberBuffer,y 				; write out and exit
.9677		c8		iny				iny
.9678		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/expression.asm


;******  Processing file: ./common/expressions/../generated/precedence.dat

.9679						PrecedenceLevel:
>9679		04					.byte	 4	; $00 <<
>967a		02					.byte	 2	; $01 <=
>967b		02					.byte	 2	; $02 <>
>967c		00					.byte	 0	; $03 !!3
>967d		00					.byte	 0	; $04 ><
>967e		02					.byte	 2	; $05 >=
>967f		04					.byte	 4	; $06 >>
>9680		00					.byte	 0	; $07 !!7
>9681		00					.byte	 0	; $08 !!8
>9682		00					.byte	 0	; $09 !!9
>9683		00					.byte	 0	; $0a !!10
>9684		00					.byte	 0	; $0b !!11
>9685		00					.byte	 0	; $0c !!12
>9686		00					.byte	 0	; $0d !!13
>9687		00					.byte	 0	; $0e !!14
>9688		00					.byte	 0	; $0f !!15
>9689		00					.byte	 0	; $10 @
>968a		00					.byte	 0	; $11 !!17
>968b		00					.byte	 0	; $12 !!18
>968c		00					.byte	 0	; $13 [
>968d		04					.byte	 4	; $14 \
>968e		00					.byte	 0	; $15 ]
>968f		01					.byte	 1	; $16 ^
>9690		00					.byte	 0	; $17 _
>9691		00					.byte	 0	; $18 `
>9692		00					.byte	 0	; $19 !!25
>9693		00					.byte	 0	; $1a !!26
>9694		00					.byte	 0	; $1b {
>9695		01					.byte	 1	; $1c |
>9696		00					.byte	 0	; $1d }
>9697		00					.byte	 0	; $1e ~
>9698		00					.byte	 0	; $1f [7m<7F>[m
>9699		00					.byte	 0	; $20
>969a		05					.byte	 5	; $21 !
>969b		00					.byte	 0	; $22 "
>969c		00					.byte	 0	; $23 #
>969d		05					.byte	 5	; $24 $
>969e		04					.byte	 4	; $25 %
>969f		01					.byte	 1	; $26 &
>96a0		00					.byte	 0	; $27 '
>96a1		00					.byte	 0	; $28 (
>96a2		00					.byte	 0	; $29 )
>96a3		04					.byte	 4	; $2a *
>96a4		03					.byte	 3	; $2b +
>96a5		00					.byte	 0	; $2c ,
>96a6		03					.byte	 3	; $2d -
>96a7		00					.byte	 0	; $2e .
>96a8		04					.byte	 4	; $2f /
>96a9		00					.byte	 0	; $30 0
>96aa		00					.byte	 0	; $31 1
>96ab		00					.byte	 0	; $32 2
>96ac		00					.byte	 0	; $33 3
>96ad		00					.byte	 0	; $34 4
>96ae		00					.byte	 0	; $35 5
>96af		00					.byte	 0	; $36 6
>96b0		00					.byte	 0	; $37 7
>96b1		00					.byte	 0	; $38 8
>96b2		00					.byte	 0	; $39 9
>96b3		00					.byte	 0	; $3a :
>96b4		00					.byte	 0	; $3b ;
>96b5		02					.byte	 2	; $3c <
>96b6		02					.byte	 2	; $3d =
>96b7		02					.byte	 2	; $3e >
>96b8		05					.byte	 5	; $3f ?

;******  Return to file: ./common/expressions/expression.asm

.96b9						EvaluateExpressionAt0:
.96b9		a2 00		ldx #$00			ldx 	#0 							; bottom stack level
.96bb						EvaluateExpression:
.96bb		a9 00		lda #$00			lda 	#0 							; lowest precedence level
.96bd						EvaluateExpressionAtPrecedence:
.96bd		48		pha				pha 								; save precedence level
.96be		20 05 9b	jsr $9b05			jsr 	EvaluateTerm 				; evaluate term into level X.
.96c1		68		pla				pla 								; restore precedence level.
.96c2						_EXPRLoop:
.96c2		85 36		sta $36				sta 	zTemp0 						; save current precedence level.
.96c4		b1 30		lda ($30),y			lda 	(codePtr),y
.96c6		c9 40		cmp #$40			cmp		#$40 						; if >= $40 cannot be an operator
.96c8		b0 25		bcs $96ef			bcs 	_EXPRExit
.96ca		da		phx				phx 								; read the operator precedence
.96cb		aa		tax				tax
.96cc		bd 79 96	lda $9679,x			lda 	PrecedenceLevel,x
.96cf		fa		plx				plx
.96d0		c9 00		cmp #$00			cmp 	#0							; if zero exit (not an operator)
.96d2		f0 1b		beq $96ef			beq 	_EXPRExit
.96d4		85 37		sta $37				sta 	zTemp0+1 					; save operator precedence level.
.96d6		a5 36		lda $36				lda 	zTemp0 						; compare current precedence vs. operator precedence
.96d8		c5 37		cmp $37				cmp 	zTemp0+1
.96da		b0 13		bcs $96ef			bcs		_EXPRExit 					; if current >= operator exit
.96dc		48		pha				pha 								; save current precedence.
.96dd		b1 30		lda ($30),y			lda 	(codePtr),y
.96df		c8		iny				iny
.96e0		48		pha				pha
.96e1		a5 37		lda $37				lda 	zTemp0+1 					; get operator precedence level
.96e3		e8		inx				inx 								; work out the right hand side.
.96e4		20 bd 96	jsr $96bd			jsr 	EvaluateExpressionAtPrecedence
.96e7		ca		dex				dex
.96e8		68		pla				pla 								; get operator, call the code.
.96e9		20 f2 96	jsr $96f2			jsr 	_EXPRCaller
.96ec		68		pla				pla 								; restore precedence level
.96ed		80 d3		bra $96c2			bra 	_EXPRLoop 					; and go round.
.96ef						_EXPRExit:
.96ef		a5 36		lda $36				lda 	zTemp0 						; A = current precedence level.
.96f1		60		rts				rts
.96f2						_EXPRCaller:
.96f2		da		phx				phx 								; save on stack, first thing is to restore it
.96f3		0a		asl a				asl 	a 							; double so can use vectors into X
.96f4		aa		tax				tax
.96f5		7c 26 8e	jmp ($8e26,x)			jmp 	(VectorSetPunc,x) 			; and go to the code.

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/addsub.asm

.96f8						FloatingPointAdd:
.96f8		20 6e 98	jsr $986e			jsr 	FloatPrepare 				; prepare for floats
.96fb		80 09		bra $9706			bra 	FloatAdd
.96fd						FloatingPointSub:
.96fd		20 6e 98	jsr $986e			jsr 	FloatPrepare 				; prepare for floats
.9700						FloatSubtract:
.9700		b5 51		lda $51,x			lda 	NSStatus+1,x 				; negate FPB
.9702		49 80		eor #$80			eor 	#$80
.9704		95 51		sta $51,x			sta 	NSStatus+1,x				; and fall through.
.9706						FloatAdd:
.9706		48		pha				pha
.9707		5a		phy				phy
.9708		20 7d 98	jsr $987d			jsr 	NSNormalise 				; normalise S[X]
.970b		f0 51		beq $975e			beq 	_FAReturn1
.970d		e8		inx				inx 								; normalise S[X+1]
.970e		20 7d 98	jsr $987d			jsr 	NSNormalise
.9711		ca		dex				dex
.9712		c9 00		cmp #$00			cmp 	#0
.9714		f0 60		beq $9776			beq 	_FAExit 					; if so, just return A
.9716		b5 78		lda $78,x			lda 	NSExponent,x 				; are the exponents the same ?
.9718		d5 79		cmp $79,x			cmp 	NSExponent+1,x
.971a		f0 18		beq $9734			beq 	_FAExponentsEqual
.971c		b5 78		lda $78,x			lda 	NSExponent,x 				; work out the larger exponent
.971e		a8		tay				tay
.971f		38		sec				sec 								; do a signed comparison of the exponents.
.9720		f5 79		sbc $79,x			sbc 	NSExponent+1,x
.9722		50 02		bvc $9726			bvc 	_FANoSignedChange
.9724		49 80		eor #$80			eor 	#$80
.9726						_FANoSignedChange:
.9726		29 80		and #$80			and 	#$80
.9728		10 02		bpl $972c			bpl 	_FAHaveMax
.972a		b4 79		ldy $79,x			ldy 	NSExponent+1,x
.972c						_FAHaveMax:
.972c		20 79 97	jsr $9779			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.972f		e8		inx				inx
.9730		20 79 97	jsr $9779			jsr 	_FAShiftToExponent
.9733		ca		dex				dex
.9734						_FAExponentsEqual:
.9734		b5 50		lda $50,x			lda 	NSStatus,x 					; are the signs the same
.9736		55 51		eor $51,x			eor 	NSStatus+1,x
.9738		30 0e		bmi $9748			bmi 	_FADifferentSigns
.973a		20 b1 94	jsr $94b1			jsr 	AddTopTwoStack 				; do the add of the mantissae
.973d		b5 70		lda $70,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.973f		10 35		bpl $9776			bpl 	_FAExit 					; if no, we are done.
.9741		20 1b a1	jsr $a11b			jsr 	NSMShiftRight 				; shift A right, renormalising it.
.9744		f6 78		inc $78,x			inc 	NSExponent,x 				; bump the exponent and exit
.9746		80 2e		bra $9776			bra 	_FAExit
.9748						_FADifferentSigns:
.9748		20 cb 94	jsr $94cb			jsr 	SubTopTwoStack 				; subtract mantissa B from A
.974b		b5 70		lda $70,x			lda 	NSMantissa3,x 				; is the result negative ?
.974d		10 06		bpl $9755			bpl 	_FACheckZero 				; if no, check for -0
.974f		20 c4 a0	jsr $a0c4			jsr 	NSMNegate 					; netate result
.9752		20 cb a0	jsr $a0cb			jsr 	NSMNegateMantissa 			; negate (2'c) the mantissa
.9755						_FACheckZero:
.9755		20 24 a1	jsr $a124			jsr 	NSMIsZero	 				; check for -0
.9758		d0 1c		bne $9776			bne 	_FAExit
.975a		74 50		stz $50,x			stz 	NSStatus,x
.975c		80 18		bra $9776			bra 	_FAExit
.975e						_FAReturn1:
.975e		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; called when S(X) is zero.
.9760		95 58		sta $58,x			sta 	NSMantissa0,x
.9762		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9764		95 60		sta $60,x			sta 	NSMantissa1,x
.9766		b5 69		lda $69,x			lda 	NSMantissa2+1,x
.9768		95 68		sta $68,x			sta 	NSMantissa2,x
.976a		b5 71		lda $71,x			lda 	NSMantissa3+1,x
.976c		95 70		sta $70,x			sta 	NSMantissa3,x
.976e		b5 79		lda $79,x			lda 	NSExponent+1,x
.9770		95 78		sta $78,x			sta 	NSExponent,x
.9772		b5 51		lda $51,x			lda 	NSStatus+1,x
.9774		95 50		sta $50,x			sta 	NSStatus,x
.9776						_FAExit:
.9776		7a		ply				ply
.9777		68		pla				pla
.9778		60		rts				rts
.9779						_FAShiftToExponent:
.9779						_FAShiftToExponent2:
.9779		98		tya				tya 								; compare Y to exponent
.977a		d5 78		cmp $78,x			cmp 	NSExponent,x 				; reached the exponent required ?
.977c		f0 07		beq $9785			beq 	_FASEExit 					; exit if so.
.977e		20 1b a1	jsr $a11b			jsr 	NSMShiftRight	 			; shift the mantissa right
.9781		f6 78		inc $78,x			inc 	NSExponent,x 				; increment exponent
.9783		80 f4		bra $9779			bra 	_FAShiftToExponent2
.9785						_FASEExit:
.9785		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/compare.asm

.9786						CompareFloat:
.9786		20 00 97	jsr $9700			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.9789		b5 60		lda $60,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.978b		29 f8		and #$f8			and 	#$F8
.978d		15 68		ora $68,x			ora 	NSMantissa2,x
.978f		15 70		ora $70,x			ora 	NSMantissa3,x
.9791		f0 08		beq $979b			beq 	_FCExit 					; zero, so approximately identical
.9793		a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.9795		34 50		bit $50,x			bit 	NSStatus,x
.9797		10 02		bpl $979b			bpl 	_FCExit
.9799						_FCNegative:
.9799		a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.979b						_FCExit:
.979b		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/divide.asm

.979c						FDivideCommand:
.979c		fa		plx				plx	 								; restore stack position
.979d		20 6e 98	jsr $986e			jsr 	FloatPrepare 				; prepare for floats
.97a0						FloatDivide:
.97a0		48		pha				pha
.97a1		e8		inx				inx
.97a2		20 7d 98	jsr $987d			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.97a5		ca		dex				dex
.97a6		c9 00		cmp #$00			cmp 	#0
.97a8		f0 1d		beq $97c7			beq 	_FDZero
.97aa		20 7d 98	jsr $987d			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.97ad		f0 16		beq $97c5			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.97af		20 a2 93	jsr $93a2			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.97b2		20 3e 93	jsr $933e			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.97b5		20 7d 98	jsr $987d			jsr		NSNormalise 				; renormalise
.97b8		20 32 94	jsr $9432			jsr 	CalculateSign 				; calculate result sign
.97bb		b5 78		lda $78,x			lda 	NSExponent,x 				; calculate exponent
.97bd		38		sec				sec
.97be		f5 79		sbc $79,x			sbc 	NSExponent+1,x
.97c0		38		sec				sec
.97c1		e9 1e		sbc #$1e			sbc 	#30
.97c3		95 78		sta $78,x			sta 	NSExponent,x
.97c5						_FDExit:
.97c5		68		pla				pla
.97c6		60		rts				rts
.97c7						_FDZero:
.97c7		a9 03		lda #$03		lda	#3
.97c9		4c b7 91	jmp $91b7		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/fractional.asm

.97cc						FloatFractionalPart:
.97cc		5a		phy				phy
.97cd		b5 50		lda $50,x			lda 	NSStatus,x 					; take absolute value
.97cf		29 7f		and #$7f			and 	#$7F
.97d1		95 50		sta $50,x			sta 	NSStatus,x
.97d3		20 7d 98	jsr $987d			jsr 	NSNormalise
.97d6		b5 78		lda $78,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.97d8		38		sec				sec
.97d9		e9 e0		sbc #$e0			sbc 	#$E0
.97db		90 29		bcc $9806			bcc 	_FFPExit 					; already fractional
.97dd		c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.97df		b0 22		bcs $9803			bcs 	_FFPZero
.97e1		a8		tay				tay 								; put count to do in Y
.97e2		b5 70		lda $70,x			lda 	NSMantissa3,x 				; do each in turn.
.97e4		20 08 98	jsr $9808			jsr 	_FFPPartial
.97e7		95 70		sta $70,x			sta 	NSMantissa3,x
.97e9		b5 68		lda $68,x			lda 	NSMantissa2,x
.97eb		20 08 98	jsr $9808			jsr 	_FFPPartial
.97ee		95 68		sta $68,x			sta 	NSMantissa2,x
.97f0		b5 60		lda $60,x			lda 	NSMantissa1,x
.97f2		20 08 98	jsr $9808			jsr 	_FFPPartial
.97f5		95 60		sta $60,x			sta 	NSMantissa1,x
.97f7		b5 58		lda $58,x			lda 	NSMantissa0,x
.97f9		20 08 98	jsr $9808			jsr 	_FFPPartial
.97fc		95 58		sta $58,x			sta 	NSMantissa0,x
.97fe		20 24 a1	jsr $a124			jsr 	NSMIsZero 					; zeroed check.
.9801		d0 03		bne $9806			bne 	_FFPExit
.9803						_FFPZero:
.9803		20 02 a1	jsr $a102			jsr 	NSMSetZero
.9806						_FFPExit:
.9806		7a		ply				ply
.9807		60		rts				rts
.9808						_FFPPartial:
.9808		c0 00		cpy #$00			cpy 	#0 							; no more to do
.980a		f0 17		beq $9823			beq 	_FFFPPExit
.980c		c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.980e		b0 0c		bcs $981c			bcs 	_FFFPPWholeByte
.9810		5a		phy				phy
.9811						_FFFPPLeft:
.9811		0a		asl a				asl 	a
.9812		88		dey				dey
.9813		d0 fc		bne $9811			bne 	_FFFPPLeft
.9815		7a		ply				ply
.9816						_FFFPPRight:
.9816		4a		lsr a				lsr 	a
.9817		88		dey				dey
.9818		d0 fc		bne $9816			bne 	_FFFPPRight
.981a		80 07		bra $9823			bra 	_FFFPPExit
.981c						_FFFPPWholeByte:
.981c		98		tya				tya 								; subtract 8 from count
.981d		38		sec				sec
.981e		e9 08		sbc #$08			sbc 	#8
.9820		a8		tay				tay
.9821		a9 00		lda #$00			lda 	#0 							; and clear all
.9823						_FFFPPExit:
.9823		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/integer.asm

.9824						FloatIntegerPart:
.9824		48		pha				pha
.9825		b5 78		lda $78,x			lda 	NSExponent,x 				; is it integer already ?
.9827		f0 1d		beq $9846			beq 	_FIPExit 					; if so do nothing
.9829		20 24 a1	jsr $a124			jsr 	NSMIsZero 					; is it zero ?
.982c		f0 15		beq $9843			beq 	_FIPZero 					; if so return zero.
.982e		20 7d 98	jsr $987d			jsr 	NSNormalise 				; normalise
.9831		f0 10		beq $9843			beq 	_FIPZero 					; normalised to zero, exit zero
.9833						_FIPShift:
.9833		b5 78		lda $78,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.9835		10 07		bpl $983e			bpl 	_FIPCheckZero
.9837		20 1b a1	jsr $a11b			jsr 	NSMShiftRight 				; shift mantissa right
.983a		f6 78		inc $78,x			inc 	NSExponent,x 				; bump exponent
.983c		80 f5		bra $9833			bra 	_FIPShift
.983e						_FIPCheckZero:
.983e		20 24 a1	jsr $a124			jsr 	NSMIsZero 					; avoid -0 problem
.9841		d0 03		bne $9846			bne 	_FIPExit 					; set to zero if mantissa zero.
.9843						_FIPZero:
.9843		20 02 a1	jsr $a102			jsr 	NSMSetZero
.9846						_FIPExit:
.9846		68		pla				pla
.9847		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/multiply.asm

.9848						FloatingPointMultiply:
.9848		20 6e 98	jsr $986e			jsr 	FloatPrepare 				; prepare for floats
.984b						FloatMultiply:
.984b		48		pha				pha
.984c		20 7d 98	jsr $987d			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.984f		f0 18		beq $9869			beq 	_FDExit 					; return zero if zero (e.g. zero*something)
.9851		e8		inx				inx
.9852		20 7d 98	jsr $987d			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.9855		ca		dex				dex
.9856		c9 00		cmp #$00			cmp 	#0
.9858		f0 0c		beq $9866			beq 	_FDSetZero
.985a		20 f4 93	jsr $93f4			jsr 	MultiplyShort 				; calculate the result.
.985d		75 78		adc $78,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.985f		18		clc				clc
.9860		75 79		adc $79,x			adc 	NSExponent+1,x
.9862		95 78		sta $78,x			sta 	NSExponent,x
.9864		80 03		bra $9869			bra 	_FDExit
.9866						_FDSetZero:
.9866		20 02 a1	jsr $a102			jsr 	NSMSetZero 					; return 0
.9869						_FDExit:
.9869		20 7d 98	jsr $987d			jsr 	NSNormalise 				; normalise the result
.986c		68		pla				pla
.986d		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/utility.asm

.986e						FloatPrepare:
.986e		20 79 99	jsr $9979			jsr 	DereferenceTopTwo 			; dereference the top two values
.9871		b5 50		lda $50,x			lda 	NSStatus,x 					; check ints/floats, either will do.
.9873		15 51		ora $51,x			ora 	NSStatus+1,x
.9875		29 10		and #$10			and 	#NSBIsString
.9877		d0 01		bne $987a			bne 	_FDType
.9879		60		rts				rts
.987a						_FDType:
.987a		4c 8a a2	jmp $a28a			jmp 	TypeError
.987d						NSNormalise:
.987d		b5 50		lda $50,x			lda 	NSStatus,x 					; make float, keep sign
.987f		29 80		and #$80			and 	#$80
.9881		09 08		ora #$08			ora 	#NSTFloat
.9883		95 50		sta $50,x			sta 	NSStatus,x
.9885		20 24 a1	jsr $a124			jsr 	NSMIsZero 					; if zero exit
.9888		d0 07		bne $9891			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.988a		16 50		asl $50,x			asl 	NSStatus,x 					; clear the sign bit.
.988c		76 50		ror $50,x			ror 	NSStatus,x 					; (no -0)
.988e		a9 00		lda #$00			lda 	#0 							; set Z flag
.9890		60		rts				rts
.9891						_NSNormaliseOptimise:
.9891		b5 70		lda $70,x			lda 	NSMantissa3,x 				; upper byte zero ?
.9893		d0 19		bne $98ae			bne 	_NSNormaliseLoop
.9895		b5 68		lda $68,x			lda 	NSMantissa2,x 				; byte normalise
.9897		30 15		bmi $98ae			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.9899		95 70		sta $70,x			sta 	NSMantissa3,x
.989b		b5 60		lda $60,x			lda 	NSMantissa1,x
.989d		95 68		sta $68,x			sta 	NSMantissa2,x
.989f		b5 58		lda $58,x			lda 	NSMantissa0,x
.98a1		95 60		sta $60,x			sta 	NSMantissa1,x
.98a3		74 58		stz $58,x			stz 	NSMantissa0,x
.98a5		b5 78		lda $78,x			lda 	NSExponent,x
.98a7		38		sec				sec
.98a8		e9 08		sbc #$08			sbc 	#8
.98aa		95 78		sta $78,x			sta 	NSExponent,x
.98ac		80 e3		bra $9891			bra 	_NSNormaliseOptimise
.98ae						_NSNormaliseLoop:
.98ae		34 70		bit $70,x			bit 	NSMantissa3,x 				; bit 30 set ?
.98b0		70 07		bvs $98b9			bvs 	_NSNExit 					; exit if so with Z flag clear
.98b2		20 11 a1	jsr $a111			jsr 	NSMShiftLeft 				; shift mantissa left
.98b5		d6 78		dec $78,x			dec 	NSExponent,x 				; adjust exponent
.98b7		80 f5		bra $98ae			bra 	_NSNormaliseLoop
.98b9						_NSNExit:
.98b9		a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.98bb		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignnumber.asm

.98bc						AssignNumber:
.98bc		5a		phy				phy
.98bd		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy mantissa0/1 to zTemp0
.98bf		85 36		sta $36				sta 	zTemp0
.98c1		b5 60		lda $60,x			lda 	NSMantissa1,x
.98c3		85 37		sta $37				sta 	zTemp0+1
.98c5		b5 50		lda $50,x			lda 	NSStatus,x 					; clear reference bits
.98c7		29 df		and #$df			and 	#(NSBIsReference ^ $FF)
.98c9		95 50		sta $50,x			sta 	NSStatus,x
.98cb		29 18		and #$18			and 	#NSBTypeMask				; assigning to a float ?
.98cd		c9 08		cmp #$08			cmp 	#NSTFloat
.98cf		f0 24		beq $98f5			beq 	_ANFloat
.98d1		b5 79		lda $79,x			lda		NSExponent+1,x 				; is it a float
.98d3		f0 03		beq $98d8			beq		_ANNotFloat
.98d5		4c 85 a2	jmp $a285			jmp 	RangeError					; if it is, report an error.
.98d8						_ANNotFloat:
.98d8		b5 50		lda $50,x			lda 	NSStatus,x 					; check if byte/word reference.
.98da		29 03		and #$03			and 	#3
.98dc		d0 05		bne $98e3			bne 	_ANByteWord
.98de		20 00 99	jsr $9900			jsr 	_ANCopy4PackSign 			; copy all 4 bytes and sign
.98e1		80 1b		bra $98fe			bra 	_ANExit
.98e3						_ANByteWord:
.98e3		48		pha				pha 								; save count
.98e4		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; do byte
.98e6		92 36		sta ($36)			sta 	(zTemp0)
.98e8		68		pla				pla
.98e9		c9 01		cmp #$01			cmp	 	#1
.98eb		f0 11		beq $98fe			beq 	_ANExit
.98ed		b5 61		lda $61,x			lda 	NSMantissa1+1,x 			; do word
.98ef		a0 01		ldy #$01			ldy 	#1
.98f1		91 36		sta ($36),y			sta 	(zTemp0),y
.98f3		80 09		bra $98fe			bra 	_ANExit
.98f5						_ANFloat:
.98f5		20 00 99	jsr $9900			jsr 	_ANCopy4PackSign 			; write all 4 bytes and packed sign
.98f8		b5 79		lda $79,x			lda 	NSExponent+1,x 				; copy exponent to slot 4
.98fa		a0 04		ldy #$04			ldy 	#4
.98fc		91 36		sta ($36),y			sta 	(zTemp0),y
.98fe						_ANExit:
.98fe		7a		ply				ply
.98ff		60		rts				rts
.9900						_ANCopy4PackSign:
.9900		a0 03		ldy #$03			ldy 	#3
.9902		b5 51		lda $51,x			lda 	NSStatus+1,x 				; sign bit into status
.9904		29 80		and #$80			and 	#$80 						; put into high bit of mantissa 3
.9906		15 71		ora $71,x			ora 	NSMantissa3+1,x
.9908		91 36		sta ($36),y			sta 	(zTemp0),y
.990a		88		dey				dey
.990b		b5 69		lda $69,x			lda 	NSMantissa2+1,x
.990d		91 36		sta ($36),y			sta 	(zTemp0),y
.990f		88		dey				dey
.9910		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9912		91 36		sta ($36),y			sta 	(zTemp0),y
.9914		88		dey				dey
.9915		b5 59		lda $59,x			lda 	NSMantissa0+1,x
.9917		91 36		sta ($36),y			sta 	(zTemp0),y
.9919		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignstring.asm

.991a						AssignString:
.991a		5a		phy				phy
.991b		b5 59		lda $59,x			lda 	NSMantissa0+1,x
.991d		85 38		sta $38				sta 	zTemp1
.991f		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9921		85 39		sta $39				sta 	zTemp1+1
.9923		b5 58		lda $58,x			lda 	NSMantissa0,x
.9925		85 36		sta $36				sta 	zTemp0
.9927		b5 60		lda $60,x			lda 	NSMantissa1,x
.9929		85 37		sta $37				sta 	zTemp0+1
.992b		a0 01		ldy #$01			ldy 	#1 							; the high byte of the target address
.992d		b1 36		lda ($36),y			lda 	(zTemp0),y
.992f		f0 23		beq $9954			beq 	_ASNewStringRequired 		; if zero, a new string is required.
.9931		38		sec				sec 								; put Address-2 in zsTemp - this is the size/status/string record
.9932		b2 36		lda ($36)			lda 	(zTemp0) 					; of concreted strings
.9934		e9 02		sbc #$02			sbc 	#2
.9936		85 3c		sta $3c				sta 	zsTemp
.9938		a0 01		ldy #$01			ldy 	#1
.993a		b1 36		lda ($36),y			lda 	(zTemp0),y
.993c		e9 00		sbc #$00			sbc 	#0
.993e		85 3d		sta $3d				sta 	zsTemp+1
.9940		a0 ff		ldy #$ff			ldy 	#$FF 						; get length of new string
.9942						_ASGetLength:
.9942		c8		iny				iny
.9943		b1 38		lda ($38),y			lda 	(zTemp1),y
.9945		d0 fb		bne $9942			bne 	_ASGetLength
.9947		98		tya				tya 								; is this length <= current length
.9948		d2 3c		cmp ($3c)			cmp 	(zsTemp)
.994a		90 1e		bcc $996a			bcc 	_ASCopyString
.994c		f0 1c		beq $996a			beq 	_ASCopyString
.994e		a9 80		lda #$80			lda 	#$80 						; mark as unused.
.9950		a0 01		ldy #$01			ldy 	#1
.9952		91 3c		sta ($3c),y			sta 	(zsTemp),y
.9954						_ASNewStringRequired:
.9954		e8		inx				inx 								; concrete the new string.
.9955		20 54 b2	jsr $b254			jsr 	StringConcrete				; (breaks zTemp1/2, not zTemp0 and zsTemp)
.9958		ca		dex				dex
.9959		18		clc				clc
.995a		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; copy that new address to the reference.
.995c		69 02		adc #$02			adc 	#2 							; add two to point at the data.
.995e		92 36		sta ($36)			sta 	(zTemp0)
.9960		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9962		69 00		adc #$00			adc 	#0
.9964		a0 01		ldy #$01			ldy 	#1
.9966		91 36		sta ($36),y			sta 	(zTemp0),y
.9968		80 0d		bra $9977			bra 	_ASExit
.996a						_ASCopyString:
.996a		a0 00		ldy #$00			ldy 	#0
.996c						_ASCopyLoop:
.996c		b1 38		lda ($38),y			lda 	(zTemp1),y
.996e		c8		iny				iny
.996f		c8		iny				iny
.9970		91 3c		sta ($3c),y			sta 	(zsTemp),y
.9972		88		dey				dey
.9973		c9 00		cmp #$00			cmp 	#0
.9975		d0 f5		bne $996c			bne 	_ASCopyLoop
.9977						_ASExit:
.9977		7a		ply				ply
.9978		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/dereference.asm

.9979						DereferenceTopTwo:
.9979		e8		inx				inx
.997a		20 7e 99	jsr $997e			jsr 	Dereference 				; deref x+1
.997d		ca		dex				dex  								; falls through to deref x
.997e						Dereference:
.997e		b5 50		lda $50,x			lda 	NSStatus,x 					; get the status byte
.9980		29 20		and #$20			and 	#NSBIsReference 			; is it a reference
.9982		f0 48		beq $99cc			beq 	_DRFExit 					; not a reference, so exit.
.9984		5a		phy				phy
.9985		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy address to dereference into zTemp0
.9987		85 36		sta $36				sta 	zTemp0
.9989		b5 60		lda $60,x			lda 	NSMantissa1,x
.998b		85 37		sta $37				sta 	zTemp0+1
.998d		74 60		stz $60,x			stz 	NSMantissa1,x 				; clear second byte.
.998f		b2 36		lda ($36)			lda 	(zTemp0) 					; do the first byte
.9991		95 58		sta $58,x			sta 	NSMantissa0,x
.9993		b5 50		lda $50,x			lda 	NSStatus,x 					; get status byte.
.9995		29 18		and #$18			and 	#NSBTypeMask 				; what type is it ?
.9997		c9 10		cmp #$10			cmp 	#NSTString 					; if string, dereference two
.9999		f0 0e		beq $99a9			beq 	_DRFDereferenceTwo
.999b		c9 08		cmp #$08			cmp 	#NSTFloat 					; if float, do full dereference.
.999d		f0 2f		beq $99ce			beq 	_DRFFull
.999f		b5 50		lda $50,x			lda 	NSStatus,x 					; must be integer - how many bytes ?
.99a1		29 03		and #$03			and 	#3
.99a3		f0 29		beq $99ce			beq 	_DRFFull 					; the whole word
.99a5		c9 01		cmp #$01			cmp 	#1 							; is it 10 (e.g. 2 bytes)
.99a7		f0 06		beq $99af			beq		_DRFClear23 				; no, one byte, clear 2 & 3 and exit
.99a9						_DRFDereferenceTwo:
.99a9		a0 01		ldy #$01			ldy 	#1
.99ab		b1 36		lda ($36),y			lda 	(zTemp0),y
.99ad		95 60		sta $60,x			sta 	NSMantissa1,x
.99af						_DRFClear23:
.99af		74 68		stz $68,x			stz 	NSMantissa2,x 				; clear upper bytes, only read 1 or 2 bytes
.99b1		74 70		stz $70,x			stz 	NSMantissa3,x
.99b3		b5 50		lda $50,x			lda 	NSStatus,x 					; make it a value of that type.
.99b5		29 18		and #$18			and 	#NSBTypeMask
.99b7		95 50		sta $50,x			sta 	NSStatus,x 					; and fall through.
.99b9		c9 10		cmp #$10			cmp 	#NSTString  				; is it a string
.99bb		d0 0e		bne $99cb			bne 	_DRFNotString
.99bd		b5 58		lda $58,x			lda 	NSMantissa0,x 				; check address is zero
.99bf		15 60		ora $60,x			ora 	NSMantissa1,x
.99c1		d0 08		bne $99cb			bne 	_DRFNotString
.99c3		a9 cd		lda #$cd			lda 	#_DRFNullString & $FF 		; if so, return reference to ""
.99c5		95 58		sta $58,x			sta 	NSMantissa0,x
.99c7		a9 99		lda #$99			lda 	#_DRFNullString >> 8
.99c9		95 60		sta $60,x			sta 	NSMantissa1,x
.99cb						_DRFNotString
.99cb		7a		ply				ply 								; restore Y and exit
.99cc						_DRFExit:
.99cc		60		rts				rts
.99cd						_DRFNullString:
>99cd		00						.byte 	0
.99ce						_DRFFull:
.99ce		a0 01		ldy #$01			ldy 	#1 							; get remaining 3 bytes.
.99d0		b1 36		lda ($36),y			lda 	(zTemp0),y
.99d2		95 60		sta $60,x			sta 	NSMantissa1,x
.99d4		c8		iny				iny
.99d5		b1 36		lda ($36),y			lda 	(zTemp0),y
.99d7		95 68		sta $68,x			sta 	NSMantissa2,x
.99d9		c8		iny				iny
.99da		b1 36		lda ($36),y			lda 	(zTemp0),y
.99dc		95 70		sta $70,x			sta 	NSMantissa3,x
.99de		74 78		stz $78,x			stz 	NSExponent,x 				; clear exponent.
.99e0		b5 50		lda $50,x			lda		NSStatus,x 					; see if type is integer
.99e2		29 18		and #$18			and 	#NSBTypeMask  				; type information only
.99e4		95 50		sta $50,x			sta 	NSStatus,x 					; update it back.
.99e6		f0 05		beq $99ed			beq 	_DRFNoExponent
.99e8		c8		iny				iny 								; if not, read the exponent as well.
.99e9		b1 36		lda ($36),y			lda 	(zTemp0),y
.99eb		95 78		sta $78,x			sta 	NSExponent,x
.99ed						_DRFNoExponent:
.99ed		b5 70		lda $70,x			lda 	NSMantissa3,x 				; is the most significant bit set ?
.99ef		10 0a		bpl $99fb			bpl 	_DRFExit2 					; if not, then exit.
.99f1		29 7f		and #$7f			and 	#$7F 						; clear that bit.
.99f3		95 70		sta $70,x			sta 	NSMantissa3,x
.99f5		b5 50		lda $50,x			lda 	NSStatus,x 					; set the sign flag
.99f7		09 80		ora #$80			ora 	#NSBIsNegative
.99f9		95 50		sta $50,x			sta 	NSStatus,x
.99fb						_DRFExit2:
.99fb		7a		ply				ply
.99fc		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/number.asm

=1						ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2						ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3						ESTA_Decimal = 3 							; fractional part.
.99fd						EncodeNumberStart:
.99fd		38		sec				sec
.99fe		80 01		bra $9a01			bra 	EncodeNumberContinue+1
.9a00						EncodeNumberContinue:
.9a00		18		clc				clc
.9a01						EncodeNumber:
.9a01		08		php				php 								; save reset flag.
.9a02		c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.9a04		f0 12		beq $9a18			beq 	_ENIsOkay
.9a06		c9 30		cmp #$30			cmp 	#"0"
.9a08		90 04		bcc $9a0e			bcc 	_ENBadNumber
.9a0a		c9 3a		cmp #$3a			cmp 	#"9"+1
.9a0c		90 0a		bcc $9a18			bcc 	_ENIsOkay
.9a0e						_ENBadNumber:
.9a0e		28		plp				plp 								; throw saved reset
.9a0f		ad 05 04	lda $0405			lda 	encodeState 				; if in decimal mode, construct final number
.9a12		c9 03		cmp #$03			cmp 	#ESTA_Decimal
.9a14		f0 7b		beq $9a91			beq 	_ENConstructFinal
.9a16						_ENFail:
.9a16		18		clc				clc 								; not allowed
.9a17		60		rts				rts
.9a18						_ENIsOkay:
.9a18		28		plp				plp 								; are we restarting
.9a19		90 15		bcc $9a30			bcc 	_ENNoRestart
.9a1b						_ENStartEncode:
.9a1b		c9 2e		cmp #$2e			cmp 	#'.'						; first is decimal place, go straight to that.
.9a1d		f0 0c		beq $9a2b			beq 	_ENFirstDP
.9a1f		29 0f		and #$0f			and 	#15 						; put digit in mantissa, initially a single digit constant
.9a21		20 04 a1	jsr $a104			jsr 	NSMSetByte 					; in single byte mode.
.9a24		a9 01		lda #$01			lda 	#ESTA_Low
.9a26						_ENExitChange:
.9a26		8d 05 04	sta $0405			sta 	encodeState 				; save new state
.9a29		38		sec				sec
.9a2a		60		rts				rts
.9a2b						_ENFirstDP:
.9a2b		20 02 a1	jsr $a102			jsr 	NSMSetZero 					; clear integer part
.9a2e		80 3c		bra $9a6c			bra 	_ESTASwitchFloat			; go straight to float and exi
.9a30						_ENNoRestart:
.9a30		48		pha				pha 								; save digit or DP on stack.
.9a31		ad 05 04	lda $0405			lda 	encodeState 				; get current state
.9a34		c9 01		cmp #$01			cmp 	#ESTA_Low
.9a36		f0 09		beq $9a41			beq  	_ESTALowState
.9a38		c9 02		cmp #$02			cmp 	#ESTA_High
.9a3a		f0 26		beq $9a62			beq 	_ESTAHighState
.9a3c		c9 03		cmp #$03			cmp 	#ESTA_Decimal
.9a3e		f0 38		beq $9a78			beq 	_ESTADecimalState
>9a40		db						.byte 	$DB 						; causes a break in the emulator
.9a41						_ESTALowState:
.9a41		68		pla				pla 								; get value back
.9a42		c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.9a44		f0 26		beq $9a6c			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.9a46		29 0f		and #$0f			and 	#15 						; make digit
.9a48		8d 06 04	sta $0406			sta 	digitTemp 					; save it.
.9a4b		b5 58		lda $58,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.9a4d		0a		asl a				asl 	a
.9a4e		0a		asl a				asl 	a
.9a4f		75 58		adc $58,x			adc 	NSMantissa0,x
.9a51		0a		asl a				asl 	a
.9a52		6d 06 04	adc $0406			adc 	digitTemp
.9a55		95 58		sta $58,x			sta 	NSMantissa0,x
.9a57		c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.9a59		90 05		bcc $9a60			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.9a5b		a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.9a5d		8d 05 04	sta $0405			sta 	encodeState
.9a60						_ESTANoSwitch:
.9a60		38		sec				sec
.9a61		60		rts				rts
.9a62						_ESTAHighState:
.9a62		68		pla				pla 								; get value back
.9a63		c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.9a65		f0 05		beq $9a6c			beq 	_ESTASwitchFloat
.9a67		20 c5 9a	jsr $9ac5			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.9a6a		38		sec				sec
.9a6b		60		rts				rts
.9a6c						_ESTASwitchFloat:
.9a6c		9c 07 04	stz $0407			stz 	decimalCount 				; reset the count of digits - we divide by 10^n at the end.
.9a6f		e8		inx				inx 								; zero the decimal additive.
.9a70		20 02 a1	jsr $a102			jsr 	NSMSetZero
.9a73		ca		dex				dex
.9a74		a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.9a76		80 ae		bra $9a26			bra 	_ENExitChange
.9a78						_ESTADecimalState:
.9a78		68		pla				pla 								; digit.
.9a79		c9 2e		cmp #$2e			cmp 	#"." 						; fail on 2nd decimal point.
.9a7b		f0 99		beq $9a16			beq 	_ENFail
.9a7d		e8		inx				inx 								; put digit into fractional part of X+1
.9a7e		20 c5 9a	jsr $9ac5			jsr 	ESTAShiftDigitIntoMantissa
.9a81		ca		dex				dex
.9a82		ee 07 04	inc $0407			inc 	decimalCount 				; bump the count of decimals
.9a85		ad 07 04	lda $0407			lda 	decimalCount 				; too many decimal digits.
.9a88		c9 0b		cmp #$0b			cmp 	#11
.9a8a		f0 02		beq $9a8e			beq 	_ESTADSFail
.9a8c		38		sec				sec
.9a8d		60		rts				rts
.9a8e						_ESTADSFail:
.9a8e		4c 85 a2	jmp $a285			jmp 	RangeError
.9a91						_ENConstructFinal:
.9a91		ad 07 04	lda $0407			lda 	decimalCount 				; get decimal count
.9a94		f0 2d		beq $9ac3			beq 	_ENCFExit 					; no decimals
.9a96		5a		phy				phy
.9a97		0a		asl a				asl 	a 							; x 4 and CLC
.9a98		0a		asl a				asl 	a
.9a99		6d 07 04	adc $0407			adc 	decimalCount
.9a9c		a8		tay				tay
.9a9d		b9 44 a2	lda $a244,y			lda 	DecimalScalarTable-5,y 		; copy decimal scalar to X+2
.9aa0		95 5a		sta $5a,x			sta 	NSMantissa0+2,x  			; this is 10^-n
.9aa2		b9 45 a2	lda $a245,y			lda 	DecimalScalarTable-5+1,y
.9aa5		95 62		sta $62,x			sta 	NSMantissa1+2,x
.9aa7		b9 46 a2	lda $a246,y			lda 	DecimalScalarTable-5+2,y
.9aaa		95 6a		sta $6a,x			sta 	NSMantissa2+2,x
.9aac		b9 47 a2	lda $a247,y			lda 	DecimalScalarTable-5+3,y
.9aaf		95 72		sta $72,x			sta 	NSMantissa3+2,x
.9ab1		b9 48 a2	lda $a248,y			lda 	DecimalScalarTable-5+4,y
.9ab4		95 7a		sta $7a,x			sta 	NSExponent+2,x
.9ab6		a9 08		lda #$08			lda 	#NSTFloat
.9ab8		95 52		sta $52,x			sta 	NSStatus+2,x
.9aba		7a		ply				ply
.9abb		e8		inx				inx 								; multiply decimal const by decimal scalar
.9abc		20 4b 98	jsr $984b			jsr 	FloatMultiply
.9abf		ca		dex				dex
.9ac0		20 06 97	jsr $9706			jsr 	FloatAdd 					; add to integer part.
.9ac3						_ENCFExit:
.9ac3		18		clc				clc 								; reject the digit.
.9ac4		60		rts				rts
.9ac5						ESTAShiftDigitIntoMantissa:
.9ac5		29 0f		and #$0f			and 	#15 						; save digit
.9ac7		48		pha				pha
.9ac8		b5 70		lda $70,x			lda 	NSMantissa3,x 				; push mantissa on stack
.9aca		48		pha				pha
.9acb		b5 68		lda $68,x			lda 	NSMantissa2,x
.9acd		48		pha				pha
.9ace		b5 60		lda $60,x			lda 	NSMantissa1,x
.9ad0		48		pha				pha
.9ad1		b5 58		lda $58,x			lda 	NSMantissa0,x
.9ad3		48		pha				pha
.9ad4		20 11 a1	jsr $a111			jsr 	NSMShiftLeft 				; x 2
.9ad7		20 11 a1	jsr $a111			jsr 	NSMShiftLeft 				; x 4
.9ada		18		clc				clc 								; pop mantissa and add
.9adb		68		pla				pla
.9adc		75 58		adc $58,x			adc 	NSMantissa0,x
.9ade		95 58		sta $58,x			sta 	NSMantissa0,x
.9ae0		68		pla				pla
.9ae1		75 60		adc $60,x			adc 	NSMantissa1,x
.9ae3		95 60		sta $60,x			sta 	NSMantissa1,x
.9ae5		68		pla				pla
.9ae6		75 68		adc $68,x			adc 	NSMantissa2,x
.9ae8		95 68		sta $68,x			sta 	NSMantissa2,x
.9aea		68		pla				pla
.9aeb		75 70		adc $70,x			adc 	NSMantissa3,x
.9aed		95 70		sta $70,x			sta 	NSMantissa3,x 				; x 5
.9aef		20 11 a1	jsr $a111			jsr 	NSMShiftLeft 				; x 10
.9af2		68		pla				pla 								; add digit
.9af3		18		clc				clc
.9af4		75 58		adc $58,x			adc 	NSMantissa0,x
.9af6		95 58		sta $58,x			sta 	NSMantissa0,x
.9af8		90 0a		bcc $9b04			bcc 	_ESTASDExit
.9afa		f6 60		inc $60,x			inc 	NSMantissa1,x
.9afc		d0 06		bne $9b04			bne 	_ESTASDExit
.9afe		f6 68		inc $68,x			inc 	NSMantissa2,x
.9b00		d0 02		bne $9b04			bne 	_ESTASDExit
.9b02		f6 70		inc $70,x			inc 	NSMantissa3,x
.9b04						_ESTASDExit:
.9b04		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/term.asm

.9b05						EvaluateTerm:
.9b05		b1 30		lda ($30),y			lda 	(codePtr),y
.9b07		30 18		bmi $9b21			bmi 	_ETCheckUnary 				; unary function ? (text ones)
.9b09		c9 40		cmp #$40			cmp 	#$40 						; 40-7F => identifier reference
.9b0b		b0 6c		bcs $9b79			bcs 	_ETVariable
.9b0d		c9 30		cmp #$30			cmp 	#'0' 						; is it a number
.9b0f		90 6b		bcc $9b7c			bcc 	_ETPuncUnary 				; if not it might be a punctuation unary.
.9b11		c9 3a		cmp #$3a			cmp 	#'9'+1
.9b13		b0 67		bcs $9b7c			bcs 	_ETPuncUnary
.9b15		20 fd 99	jsr $99fd			jsr 	EncodeNumberStart 			; can't fail as it's 0-9 !
.9b18						_ETNumber:
.9b18		c8		iny				iny 								; keep encoding until we have the numbers
.9b19		b1 30		lda ($30),y			lda 	(codePtr),y
.9b1b		20 00 9a	jsr $9a00			jsr 	EncodeNumberContinue
.9b1e		b0 f8		bcs $9b18			bcs 	_ETNumber 					; go back if accepted.
.9b20		60		rts				rts
.9b21						_ETCheckUnary:
.9b21		c9 ff		cmp #$ff			cmp 	#KWC_STRING 				; string token
.9b23		f0 3f		beq $9b64			beq 	_ETString
.9b25		c9 fe		cmp #$fe			cmp 	#KWC_HEXCONST 				; hex constant.
.9b27		f0 12		beq $9b3b			beq 	_ETHexConstant
.9b29		c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; check it actually is a unary function
.9b2b		90 0b		bcc $9b38			bcc 	_ETSyntaxError
.9b2d		c9 a6		cmp #$a6			cmp 	#KWC_LAST_UNARY+1
.9b2f		b0 07		bcs $9b38			bcs 	_ETSyntaxError
.9b31		da		phx				phx 								; push X on the stack
.9b32		0a		asl a				asl 	a 							; put vector x 2 into X
.9b33		aa		tax				tax
.9b34		c8		iny				iny 								; consume unary function token
.9b35		7c a6 8e	jmp ($8ea6,x)			jmp 	(VectorSet0,x) 				; and do it.
.9b38						_ETSyntaxError:
.9b38		4c 80 a2	jmp $a280			jmp 	SyntaxError
.9b3b						_ETHexConstant:
.9b3b		c8		iny				iny 								; skip #
.9b3c		c8		iny				iny 								; skip count
.9b3d		20 02 a1	jsr $a102			jsr 	NSMSetZero 					; clear result
.9b40						_ETHLoop:
.9b40		b1 30		lda ($30),y			lda 	(codePtr),y
.9b42		c8		iny				iny 								; and consume
.9b43		c9 00		cmp #$00			cmp 	#0 							; exit if zero
.9b45		f0 1c		beq $9b63			beq 	_ETHExit
.9b47		48		pha				pha 								; save on stack.
.9b48		20 11 a1	jsr $a111			jsr 	NSMShiftLeft 				; x 2
.9b4b		20 11 a1	jsr $a111			jsr 	NSMShiftLeft 				; x 4
.9b4e		20 11 a1	jsr $a111			jsr 	NSMShiftLeft 				; x 8
.9b51		20 11 a1	jsr $a111			jsr 	NSMShiftLeft 				; x 16
.9b54		68		pla				pla 								; ASCII
.9b55		c9 41		cmp #$41			cmp 	#'A'
.9b57		90 02		bcc $9b5b			bcc 	_ETHNotChar
.9b59		e9 07		sbc #$07			sbc 	#7
.9b5b						_ETHNotChar:
.9b5b		29 0f		and #$0f			and 	#15 						; digit now
.9b5d		15 58		ora $58,x			ora 	NSMantissa0,x 				; put in LS Nibble
.9b5f		95 58		sta $58,x			sta 	NSMantissa0,x
.9b61		80 dd		bra $9b40			bra 	_ETHLoop 					; go round.
.9b63						_ETHExit:
.9b63		60		rts				rts
.9b64						_ETString:
.9b64		c8		iny				iny 								; look at length
.9b65		b1 30		lda ($30),y			lda 	(codePtr),y
.9b67		48		pha				pha
.9b68		c8		iny				iny 								; first character
.9b69		20 7c a8	jsr $a87c			jsr 	MemoryInline 				; put address of string at (code-Ptr),y on stack
.9b6c		68		pla				pla 								; restore count and save
.9b6d		85 36		sta $36				sta 	zTemp0
.9b6f		98		tya				tya 								; add length to Y to skip it.
.9b70		18		clc				clc
.9b71		65 36		adc $36				adc 	zTemp0
.9b73		a8		tay				tay
.9b74		a9 10		lda #$10			lda 	#NSTString 					; mark as string
.9b76		95 50		sta $50,x			sta 	NSStatus,x
.9b78		60		rts				rts
.9b79						_ETVariable:
.9b79		4c ce 9b	jmp $9bce			jmp 	VariableHandler
.9b7c						_ETPuncUnary:
.9b7c		c8		iny				iny 								; consume the unary character
.9b7d		c9 2d		cmp #$2d			cmp 	#KWD_MINUS 					; unary minus
.9b7f		f0 2b		beq $9bac			beq 	_ETUnaryNegate
.9b81		c9 10		cmp #$10			cmp 	#KWD_AT 					; @ reference -> constant
.9b83		f0 36		beq $9bbb			beq 	_ETDereference
.9b85		c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; parenthesis
.9b87		f0 3e		beq $9bc7			beq 	_ETParenthesis
.9b89		64 36		stz $36				stz 	zTemp0 						; zTemp0 is the indirection level.
.9b8b		c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; byte indirection (0) ?
.9b8d		f0 06		beq $9b95			beq 	_ETIndirection
.9b8f		e6 36		inc $36				inc 	zTemp0
.9b91		c9 21		cmp #$21			cmp 	#KWD_PLING					; word indirection (1) \
.9b93		d0 a3		bne $9b38			bne 	_ETSyntaxError
.9b95						_ETIndirection:
.9b95		a5 36		lda $36				lda 	zTemp0 						; push indirection amount (0-1) => (1-2) on the stack
.9b97		1a		inc a				inc 	a
.9b98		48		pha				pha
.9b99		20 05 9b	jsr $9b05			jsr 	EvaluateTerm				; evaluate the term
.9b9c		20 7e 99	jsr $997e			jsr 	Dereference 				; dereference it.
.9b9f		b5 50		lda $50,x			lda 	NSStatus,x 					; must be a +ve integer.
.9ba1		d0 06		bne $9ba9			bne 	_ETTypeMismatch
.9ba3		68		pla				pla 								; indirection 1-2
.9ba4		09 20		ora #$20			ora 	#NSBIsReference 			; make it a reference.
.9ba6		95 50		sta $50,x			sta 	NSStatus,x
.9ba8		60		rts				rts
.9ba9						_ETTypeMismatch:
.9ba9		4c 8a a2	jmp $a28a			jmp 	TypeError
.9bac						_ETUnaryNegate:
.9bac		20 05 9b	jsr $9b05			jsr 	EvaluateTerm				; evaluate the term
.9baf		20 7e 99	jsr $997e			jsr 	Dereference 				; dereference it.
.9bb2		b5 50		lda $50,x			lda 	NSStatus,x 					; must be a number
.9bb4		29 10		and #$10			and 	#NSTString
.9bb6		d0 f1		bne $9ba9			bne 	_ETTypeMismatch
.9bb8		4c c4 a0	jmp $a0c4			jmp 	NSMNegate  					; just toggles the sign bit.
.9bbb						_ETDereference:
.9bbb		20 05 9b	jsr $9b05			jsr 	EvaluateTerm				; evaluate the term
.9bbe		b5 50		lda $50,x			lda 	NSStatus,x 					; must be a reference
.9bc0		29 20		and #$20			and 	#NSBIsReference
.9bc2		f0 e5		beq $9ba9			beq 	_ETTypeMismatch
.9bc4		74 50		stz $50,x			stz 	NSStatus,x 					; make it an integer address
.9bc6		60		rts				rts
.9bc7						_ETParenthesis:
.9bc7		20 bb 96	jsr $96bb			jsr 	EvaluateExpression 			; evaluate here, from lowest precedence
.9bca		20 9e 91	jsr $919e			jsr 	CheckRightBracket 			; check for )
.9bcd		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/variable.asm

.9bce						VariableHandler:
.9bce		b1 30		lda ($30),y			lda 	(codePtr),y
.9bd0		18		clc				clc
.9bd1		69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.9bd3		85 37		sta $37				sta 	zTemp0+1
.9bd5		c8		iny				iny
.9bd6		b1 30		lda ($30),y			lda 	(codePtr),y
.9bd8		85 36		sta $36				sta 	zTemp0
.9bda		c8		iny				iny
.9bdb		18		clc				clc									; copy variable address+3 to mantissa
.9bdc		69 03		adc #$03			adc 	#3 							; this is the address of the data.
.9bde		95 58		sta $58,x			sta 	NSMantissa0,x
.9be0		a5 37		lda $37				lda 	zTemp0+1
.9be2		69 00		adc #$00			adc 	#0
.9be4		95 60		sta $60,x			sta 	NSMantissa1,x
.9be6		74 68		stz $68,x			stz 	NSMantissa2,x
.9be8		74 70		stz $70,x			stz 	NSMantissa3,x
.9bea		74 78		stz $78,x			stz 	NSExponent,x
.9bec		5a		phy				phy
.9bed		a0 02		ldy #$02			ldy 	#2 							; read type
.9bef		b1 36		lda ($36),y			lda 	(zTemp0),y
.9bf1		7a		ply				ply
.9bf2		29 1c		and #$1c			and 	#NSBTypeMask+NSBIsArray 	; get type information
.9bf4		09 20		ora #$20			ora 	#NSBIsReference 			; make a reference.
.9bf6		95 50		sta $50,x			sta 	NSStatus,x
.9bf8		29 04		and #$04			and 	#NSBIsArray
.9bfa		d0 01		bne $9bfd			bne 	_VHArray
.9bfc		60		rts				rts
.9bfd						_VHArray:
.9bfd		e8		inx				inx
.9bfe		20 9d a0	jsr $a09d			jsr 	Evaluate8BitInteger 		; get the 1st index.
.9c01		a9 ff		lda #$ff			lda 	#$FF 						; set Status of X+2 to a duff value so we know if we picked it up.
.9c03		95 51		sta $51,x			sta 	NSStatus+1,x
.9c05		b1 30		lda ($30),y			lda 	(codePtr),y
.9c07		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.9c09		d0 06		bne $9c11			bne 	_VHNoSecondIndex
.9c0b		c8		iny				iny 								; skip the comma
.9c0c		e8		inx				inx
.9c0d		20 9d a0	jsr $a09d			jsr 	Evaluate8BitInteger 		; get the 2nd index.
.9c10		ca		dex				dex
.9c11						_VHNoSecondIndex:
.9c11		ca		dex				dex 								; set X back.
.9c12		20 9e 91	jsr $919e			jsr 	CheckRightBracket 			; and check the right bracket.
.9c15		5a		phy				phy 								; save position
.9c16		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy record address to zaTemp (moved 6/12/22)
.9c18		85 3e		sta $3e				sta 	zaTemp
.9c1a		b5 60		lda $60,x			lda 	NSMantissa1,x
.9c1c		85 3f		sta $3f				sta 	zaTemp+1
.9c1e		a0 02		ldy #$02			ldy 	#2 							; check first index is not-zero, e.g. array defined
.9c20		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9c22		f0 5d		beq $9c81			beq 	_VHBadArray
.9c24		a0 03		ldy #$03			ldy 	#3 							; get the second index - which is 0 if there is one index.
.9c26		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9c28		f0 02		beq $9c2c			beq 	_VHHas2Mask
.9c2a		a9 ff		lda #$ff			lda 	#$FF
.9c2c						_VHHas2Mask:
.9c2c		d5 52		cmp $52,x			cmp 	NSStatus+2,x 				; so if they are the same there are the wrong number of indices
.9c2e		f0 4c		beq $9c7c			beq 	_VHBadIndex
.9c30		0a		asl a				asl 	a 							; carry will be set if a second index
.9c31		90 08		bcc $9c3b			bcc 	_VHCheckFirstIndex
.9c33		a0 03		ldy #$03			ldy 	#3 			 				; check the 2nd size >= 2nd index
.9c35		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9c37		d5 5a		cmp $5a,x			cmp 	NSMantissa0+2,x
.9c39		90 41		bcc $9c7c			bcc 	_VHBadIndex
.9c3b						_VHCheckFirstIndex:
.9c3b		a0 02		ldy #$02			ldy 	#2 			 				; check the 2nd size >= 2nd index
.9c3d		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9c3f		d5 59		cmp $59,x			cmp 	NSMantissa0+1,x
.9c41		90 39		bcc $9c7c			bcc 	_VHBadIndex
.9c43		64 36		stz $36				stz 	zTemp0 						; clear zTemp0 (if 1 index)
.9c45		64 37		stz $37				stz 	zTemp0+1
.9c47		b5 52		lda $52,x			lda 	NSStatus+2,x 				; if only one index provided, don't need to multiply
.9c49		30 0e		bmi $9c59			bmi 	_VHNoMultiply
.9c4b		da		phx				phx
.9c4c		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; get 2nd index on stack
.9c4e		48		pha				pha
.9c4f		a0 02		ldy #$02			ldy 	#2 							; get 1st size in A
.9c51		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9c53		1a		inc a				inc 	a 							; add 1 for zero base
.9c54		fa		plx				plx
.9c55		20 ad a0	jsr $a0ad			jsr 	Multiply8x8 				; calculate -> Z0
.9c58		fa		plx				plx
.9c59						_VHNoMultiply:
.9c59		18		clc				clc
.9c5a		a5 36		lda $36				lda 	zTemp0
.9c5c		75 59		adc $59,x			adc 	NSMantissa0+1,x
.9c5e		85 36		sta $36				sta 	zTemp0
.9c60		a5 37		lda $37				lda 	zTemp0+1
.9c62		69 00		adc #$00			adc 	#0
.9c64		85 37		sta $37				sta 	zTemp0+1
.9c66		b5 50		lda $50,x			lda 	NSStatus,x
.9c68		20 3f 86	jsr $863f			jsr 	ScaleByBaseType
.9c6b		18		clc				clc
.9c6c		b2 3e		lda ($3e)			lda 	(zaTemp)
.9c6e		65 36		adc $36				adc 	zTemp0
.9c70		95 58		sta $58,x			sta 	NSMantissa0,x
.9c72		a0 01		ldy #$01			ldy 	#1
.9c74		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9c76		65 37		adc $37				adc 	zTemp0+1
.9c78		95 60		sta $60,x			sta 	NSMantissa1,x
.9c7a		7a		ply				ply 								; restore position
.9c7b		60		rts				rts
.9c7c						_VHBadIndex:
.9c7c		a9 17		lda #$17		lda	#23
.9c7e		4c b7 91	jmp $91b7		jmp	ErrorHandler
.9c81						_VHBadArray:
.9c81		a9 18		lda #$18		lda	#24
.9c83		4c b7 91	jmp $91b7		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/abs.asm

.9c86						AbsUnary:
.9c86		fa		plx				plx 								; restore stack pos
.9c87		20 50 a0	jsr $a050			jsr 	EvaluateNumber 				; get a float or int
.9c8a		20 9e 91	jsr $919e			jsr 	CheckRightBracket
.9c8d		b5 50		lda $50,x			lda 	NSStatus,x 					; clear the sign bit
.9c8f		29 7f		and #$7f			and 	#$7F
.9c91		95 50		sta $50,x			sta 	NSStatus,x
.9c93		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/alloc.asm

.9c94						AllocUnary:
.9c94		fa		plx				plx 								; restore stack pos
.9c95		20 82 a0	jsr $a082			jsr 	Evaluate16BitInteger		; get bytes required.
.9c98		20 9e 91	jsr $919e			jsr 	CheckRightBracket
.9c9b		da		phx				phx 								; save X/Y
.9c9c		5a		phy				phy
.9c9d		8a		txa				txa 								; copy X into Y
.9c9e		a8		tay				tay
.9c9f		b9 60 00	lda $0060,y			lda		NSMantissa1,y 				; get size into XA
.9ca2		aa		tax				tax
.9ca3		b9 58 00	lda $0058,y			lda 	NSMantissa0,y
.9ca6		20 b3 9c	jsr $9cb3			jsr 	AllocateXABytes 			; allocate memory
.9ca9		99 58 00	sta $0058,y			sta 	NSMantissa0,y 				; write address out.
.9cac		8a		txa				txa 	 							; typing is 16 bit integer.
.9cad		99 60 00	sta $0060,y			sta 	NSMantissa1,y
.9cb0		7a		ply				ply
.9cb1		fa		plx				plx
.9cb2		60		rts				rts
.9cb3						AllocateXABytes:
.9cb3		5a		phy				phy
.9cb4		ac 0c 04	ldy $040c			ldy 	lowMemPtr 					; push current address on stack and to zTemp0
.9cb7		84 36		sty $36				sty 	zTemp0
.9cb9		5a		phy				phy
.9cba		ac 0d 04	ldy $040d			ldy 	lowMemPtr+1
.9cbd		84 37		sty $37				sty 	zTemp0+1
.9cbf		5a		phy				phy
.9cc0		18		clc				clc 								; add to low memory pointer
.9cc1		6d 0c 04	adc $040c			adc 	lowMemPtr
.9cc4		8d 0c 04	sta $040c			sta 	lowMemPtr
.9cc7		8a		txa				txa
.9cc8		6d 0d 04	adc $040d			adc 	lowMemPtr+1
.9ccb		8d 0d 04	sta $040d			sta 	lowMemPtr+1
.9cce		b0 2f		bcs $9cff			bcs 	CISSMemory
.9cd0		20 f1 9c	jsr $9cf1			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.9cd3						_ClearMemory:
.9cd3		ad 0c 04	lda $040c			lda 	lowMemPtr 					; cleared all memory allocated
.9cd6		c5 36		cmp $36				cmp 	zTemp0
.9cd8		d0 07		bne $9ce1			bne 	_CMClearNext
.9cda		ad 0d 04	lda $040d			lda 	lowMemPtr+1
.9cdd		c5 37		cmp $37				cmp 	zTemp0+1
.9cdf		f0 0c		beq $9ced			beq 	_CMExit
.9ce1						_CMClearNext:
.9ce1		a9 00		lda #$00			lda 	#0 							; clear byte, advance to next.
.9ce3		92 36		sta ($36)			sta 	(zTemp0)
.9ce5		e6 36		inc $36				inc 	zTemp0
.9ce7		d0 ea		bne $9cd3			bne 	_ClearMemory
.9ce9		e6 37		inc $37				inc		zTemp0+1
.9ceb		80 e6		bra $9cd3			bra 	_ClearMemory
.9ced						_CMExit:
.9ced		fa		plx				plx
.9cee		68		pla				pla
.9cef		7a		ply				ply
.9cf0		60		rts				rts
.9cf1						CheckIdentifierStringSpace:
.9cf1		48		pha				pha
.9cf2		ad 0d 04	lda $040d			lda 	lowMemPtr+1 				; get low memory pointer
.9cf5		18		clc				clc
.9cf6		69 02		adc #$02			adc 	#2 							; need at least 2 256 byte pages
.9cf8		cd 0f 04	cmp $040f			cmp 	stringMemory+1 				; is it >= StringMemory
.9cfb		b0 02		bcs $9cff			bcs 	CISSMemory
.9cfd		68		pla				pla
.9cfe		60		rts				rts
.9cff						CISSMemory:
.9cff		a9 06		lda #$06		lda	#6
.9d01		4c b7 91	jmp $91b7		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/asc.asm

.9d04						AscUnary:
.9d04		fa		plx				plx 								; restore stack pos
.9d05		20 5a a0	jsr $a05a			jsr 	EvaluateString 				; get a string
.9d08		b2 36		lda ($36)			lda 	(zTemp0)					; get/return first character
.9d0a		20 04 a1	jsr $a104			jsr 	NSMSetByte 					; ASC("") will return zero.
.9d0d		20 9e 91	jsr $919e			jsr 	CheckRightBracket
.9d10		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/frac.asm

.9d11						FracUnary:
.9d11		fa		plx				plx 								; restore stack pos
.9d12		20 50 a0	jsr $a050			jsr 	EvaluateNumber 				; get a float or int
.9d15		20 9e 91	jsr $919e			jsr 	CheckRightBracket
.9d18		b5 50		lda $50,x			lda 	NSStatus,x
.9d1a		29 08		and #$08			and 	#NSTFloat 					; check it is a float
.9d1c		f0 04		beq $9d22			beq 	_IUZero
.9d1e		20 cc 97	jsr $97cc			jsr 	FloatFractionalPart 		; if so, get the fractional part.
.9d21		60		rts				rts
.9d22						_IUZero:
.9d22		20 02 a1	jsr $a102			jsr 	NSMSetZero
.9d25		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/int.asm

.9d26						IntUnary:
.9d26		fa		plx				plx 								; restore stack pos
.9d27		20 50 a0	jsr $a050			jsr 	EvaluateNumber 				; get a float or int
.9d2a		20 9e 91	jsr $919e			jsr 	CheckRightBracket
.9d2d		b5 50		lda $50,x			lda 	NSStatus,x
.9d2f		29 08		and #$08			and 	#NSTFloat 					; check it is a float
.9d31		f0 03		beq $9d36			beq 	_IUExit
.9d33		20 24 98	jsr $9824			jsr 	FloatIntegerPart 			; if it is get the integer part.
.9d36						_IUExit:
.9d36		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/len.asm

.9d37						LenUnary:
.9d37		fa		plx				plx 								; restore stack pos
.9d38		20 5a a0	jsr $a05a			jsr 	EvaluateString 				; get a string
.9d3b		5a		phy				phy
.9d3c		a0 00		ldy #$00			ldy 	#0 							; find length
.9d3e						_LenFind:
.9d3e		b1 36		lda ($36),y			lda 	(zTemp0),y 					; look for trailing NULL.
.9d40		f0 06		beq $9d48			beq 	_LenExit
.9d42		c8		iny				iny
.9d43		d0 f9		bne $9d3e			bne 	_LenFind
.9d45		4c 85 a2	jmp $a285			jmp 	RangeError 					; string > 255 - no trailing NULL.
.9d48						_LenExit:
.9d48		98		tya				tya		 							; return length
.9d49		20 04 a1	jsr $a104			jsr 	NSMSetByte
.9d4c		7a		ply				ply
.9d4d		20 9e 91	jsr $919e			jsr 	CheckRightBracket
.9d50		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/minmax.asm

.9d51						Unary_Min:
.9d51		a9 01		lda #$01			lda 	#1
.9d53		80 02		bra $9d57			bra 	UnaryMinMaxMain
.9d55						Unary_Max:
.9d55		a9 ff		lda #$ff			lda 	#$FF 						; value from comparator to cause a write
.9d57						UnaryMinMaxMain:
.9d57		fa		plx				plx 								; get index on number stack
.9d58		48		pha				pha 								; save comparator
.9d59		20 47 a0	jsr $a047			jsr 	EvaluateValue 				; get the first value.
.9d5c						_UMMMLoop:
.9d5c		b1 30		lda ($30),y			lda 	(codePtr),y
.9d5e		c9 29		cmp #$29			cmp 	#KWD_RPAREN 				; if right bracket then done.
.9d60		f0 22		beq $9d84			beq 	_UMMMDone
.9d62		20 a6 91	jsr $91a6			jsr 	CheckComma 					; must be a comma
.9d65		e8		inx				inx
.9d66		20 47 a0	jsr $a047			jsr 	EvaluateValue
.9d69		ca		dex				dex
.9d6a		20 e5 a0	jsr $a0e5			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] (Compare is destructive)
.9d6d		e8		inx				inx
.9d6e		20 e5 a0	jsr $a0e5			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2], original
.9d71		e8		inx				inx
.9d72		20 6e 92	jsr $926e			jsr 	CompareBaseCode 			; part of > = < etc. code, returns 255,0 or 1
.9d75		ca		dex				dex
.9d76		ca		dex				dex
.9d77		85 36		sta $36				sta 	zTemp0 						; save required result
.9d79		68		pla				pla 								; get and save comparator
.9d7a		48		pha				pha
.9d7b		c5 36		cmp $36				cmp 	zTemp0 						; if the comparator
.9d7d		d0 dd		bne $9d5c			bne 	_UMMMLoop
.9d7f		20 87 9d	jsr $9d87			jsr 	ExpCopyAboveDown 			; copy next up slot down
.9d82		80 d8		bra $9d5c			bra 	_UMMMLoop
.9d84						_UMMMDone:
.9d84		68		pla				pla 								; throw the comparator
.9d85		c8		iny				iny 								; skip )
.9d86		60		rts				rts
.9d87						ExpCopyAboveDown:
.9d87		b5 51		lda $51,x			lda 	NSStatus+1,x
.9d89		95 50		sta $50,x			sta 	NSStatus,x
.9d8b		b5 79		lda $79,x			lda 	NSExponent+1,x
.9d8d		95 78		sta $78,x			sta 	NSExponent,x
.9d8f		b5 59		lda $59,x			lda 	NSMantissa0+1,x
.9d91		95 58		sta $58,x			sta 	NSMantissa0,x
.9d93		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9d95		95 60		sta $60,x			sta 	NSMantissa1,x
.9d97		b5 69		lda $69,x			lda 	NSMantissa2+1,x
.9d99		95 68		sta $68,x			sta 	NSMantissa2,x
.9d9b		b5 71		lda $71,x			lda 	NSMantissa3+1,x
.9d9d		95 70		sta $70,x			sta 	NSMantissa3,x
.9d9f		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/not.asm

.9da0						Unary_Not:
.9da0		fa		plx				plx
.9da1		20 6f a0	jsr $a06f			jsr 	EvaluateInteger 			; get integer
.9da4		20 9e 91	jsr $919e			jsr 	CheckRightBracket
.9da7		20 24 a1	jsr $a124			jsr 	NSMIsZero 					; zero mantissa ?
.9daa		f0 04		beq $9db0			beq 	_NotZero
.9dac		20 02 a1	jsr $a102			jsr 	NSMSetZero
.9daf		60		rts				rts
.9db0						_NotZero:
.9db0		4c 24 92	jmp $9224			jmp 	ReturnTrue

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/peek.asm

.9db3						PeekByteUnary:
.9db3		a9 01		lda #$01			lda 	#1
.9db5		80 0a		bra $9dc1			bra 	PeekUnary
.9db7						PeekWUnary:
.9db7		a9 02		lda #$02			lda 	#2
.9db9		80 06		bra $9dc1			bra 	PeekUnary
.9dbb						PeekLUnary:
.9dbb		a9 03		lda #$03			lda 	#3
.9dbd		80 02		bra $9dc1			bra 	PeekUnary
.9dbf						PeekDUnary:
.9dbf		a9 04		lda #$04			lda 	#4
.9dc1						PeekUnary:
.9dc1		fa		plx				plx 								; restore position.
.9dc2		48		pha				pha 								; save count to copy on stack
.9dc3		20 82 a0	jsr $a082			jsr		Evaluate16BitInteger 		; address as constant.
.9dc6		20 9e 91	jsr $919e			jsr 	CheckRightBracket
.9dc9		b5 58		lda $58,x			lda 	NSMantissa0,x 				; save mantissa in zTemp0 as address
.9dcb		85 36		sta $36				sta 	zTemp0
.9dcd		b5 60		lda $60,x			lda 	NSMantissa1,x
.9dcf		85 37		sta $37				sta 	zTemp0+1
.9dd1		20 02 a1	jsr $a102			jsr 	NSMSetZero 					; clear the result to zero.
.9dd4		68		pla				pla 								; count in zTemp2
.9dd5		85 3a		sta $3a				sta 	zTemp2
.9dd7		da		phx				phx 								; save stack position and offset of read
.9dd8		5a		phy				phy
.9dd9		a0 00		ldy #$00			ldy 	#0 							; byte read offset.
.9ddb						_PULoop:
.9ddb		b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next byte, write to mantissa0,x
.9ddd		95 58		sta $58,x			sta 	NSMantissa0,x 				; we change X not the index before it.
.9ddf		c8		iny				iny 								; next byte to write
.9de0		8a		txa				txa 								; next byte to read - stack layout in 04data.inc
.9de1		18		clc				clc
.9de2		69 08		adc #$08			adc 	#MathStackSize
.9de4		aa		tax				tax
.9de5		c6 3a		dec $3a				dec 	zTemp2 						; done them all
.9de7		d0 f2		bne $9ddb			bne 	_PULoop
.9de9		7a		ply				ply 								; restore stack/code pos and exit.
.9dea		fa		plx				plx
.9deb		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/rnd.asm

.9dec						Unary_Random:
.9dec		fa		plx				plx
.9ded		20 5e 9e	jsr $9e5e			jsr 	Random32Bit 				; get a random number
.9df0		20 47 9e	jsr $9e47			jsr 	URCopyToMantissa  			; put in mantissa
.9df3		b1 30		lda ($30),y			lda 	(codePtr),y
.9df5		c9 29		cmp #$29			cmp 	#KWD_RPAREN
.9df7		f0 08		beq $9e01			beq 	_URNoModulus 				; then we return a random 30 bit number.
.9df9		e8		inx				inx
.9dfa		20 82 a0	jsr $a082			jsr 	Evaluate16BitInteger 		; put modulus value in +1
.9dfd		ca		dex				dex
.9dfe		20 76 93	jsr $9376			jsr 	IntegerModulusNoCheck 		; calculate modulus, so now 0 .. n-1
.9e01						_URNoModulus:
.9e01		74 50		stz $50,x			stz 	NSStatus,x 					; make it an integer positive
.9e03		74 78		stz $78,x			stz 	NSExponent,x
.9e05		20 9e 91	jsr $919e			jsr 	CheckRightBracket
.9e08		60		rts				rts
.9e09						Unary_Rnd:
.9e09		fa		plx				plx
.9e0a		20 50 a0	jsr $a050			jsr 	EvaluateNumber 				; number to use.
.9e0d		20 9e 91	jsr $919e			jsr 	CheckRightBracket 			; closing bracket
.9e10		20 24 a1	jsr $a124			jsr 	NSMIsZero 					; if zero, then don't generate a new number
.9e13		f0 26		beq $9e3b			beq 	_URCopySeed
.9e15		b5 50		lda $50,x			lda 	NSStatus,x 					; if -ve, then seed using parameter
.9e17		10 1f		bpl $9e38			bpl 	_URDontSeed
.9e19		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy - value to seed butchering it.
.9e1b		49 17		eor #$17			eor 	#$17
.9e1d		8d 08 04	sta $0408			sta 	randomSeed+0
.9e20		b5 60		lda $60,x			lda 	NSMantissa1,x
.9e22		49 a5		eor #$a5			eor 	#$A5
.9e24		8d 09 04	sta $0409			sta 	randomSeed+1
.9e27		b5 68		lda $68,x			lda 	NSMantissa2,x
.9e29		49 c2		eor #$c2			eor 	#$C2
.9e2b		8d 0a 04	sta $040a			sta 	randomSeed+2
.9e2e		b5 70		lda $70,x			lda 	NSMantissa3,x
.9e30		49 9d		eor #$9d			eor 	#$9D
.9e32		8d 0b 04	sta $040b			sta 	randomSeed+3
.9e35		20 5e 9e	jsr $9e5e			jsr 	Random32Bit
.9e38						_URDontSeed:
.9e38		20 5e 9e	jsr $9e5e			jsr 	Random32Bit 				; generate a number
.9e3b						_URCopySeed:
.9e3b		20 47 9e	jsr $9e47			jsr 	URCopyToMantissa 			; copy into mantissa
.9e3e		a9 e2		lda #$e2			lda 	#-30 						; force into 0-1 range
.9e40		95 78		sta $78,x			sta 	NSExponent,x
.9e42		a9 08		lda #$08			lda 	#NSTFloat
.9e44		95 50		sta $50,x			sta 	NSStatus,x 					; positive float
.9e46		60		rts				rts
.9e47						URCopyToMantissa:
.9e47		ad 08 04	lda $0408			lda 	randomSeed+0
.9e4a		95 58		sta $58,x			sta 	NSMantissa0,x
.9e4c		ad 09 04	lda $0409			lda 	randomSeed+1
.9e4f		95 60		sta $60,x			sta 	NSMantissa1,x
.9e51		ad 0a 04	lda $040a			lda 	randomSeed+2
.9e54		95 68		sta $68,x			sta 	NSMantissa2,x
.9e56		ad 0b 04	lda $040b			lda 	randomSeed+3
.9e59		29 3f		and #$3f			and 	#$3F 						; make legal mantissa
.9e5b		95 70		sta $70,x			sta 	NSMantissa3,x
.9e5d		60		rts				rts
.9e5e						Random32Bit:
.9e5e		5a		phy				phy
.9e5f		a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.9e61		ad 08 04	lda $0408			lda 	randomSeed+0 				; check the seed isn't zero
.9e64		d0 03		bne $9e69			bne 	_Random1
.9e66		a8		tay				tay 								; if so do it 256 times
.9e67		a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.9e69						_Random1:
.9e69		0a		asl a				asl 	a 							; LSFR RNG
.9e6a		2e 09 04	rol $0409			rol 	randomSeed+1
.9e6d		2e 0a 04	rol $040a			rol 	randomSeed+2
.9e70		2e 0b 04	rol $040b			rol 	randomSeed+3
.9e73		90 02		bcc $9e77			bcc 	_Random2
.9e75		49 c5		eor #$c5			eor 	#$C5
.9e77						_Random2:
.9e77		88		dey				dey
.9e78		d0 ef		bne $9e69			bne 	_Random1
.9e7a		8d 08 04	sta $0408			sta 	randomSeed+0
.9e7d		7a		ply				ply
.9e7e		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/sgn.asm

.9e7f						SgnUnary:
.9e7f		fa		plx				plx 								; restore stack pos
.9e80		20 50 a0	jsr $a050			jsr 	EvaluateNumber 				; get a float or int
.9e83		20 9e 91	jsr $919e			jsr 	CheckRightBracket
.9e86		20 24 a1	jsr $a124			jsr 	NSMIsZero 					; if zero
.9e89		f0 0e		beq $9e99			beq 	_SGZero  					; return Int Zero
.9e8b		b5 50		lda $50,x			lda 	NSStatus,x 					; get status w/sign
.9e8d		48		pha				pha
.9e8e		a9 01		lda #$01			lda 	#1 							; set to 1
.9e90		20 04 a1	jsr $a104			jsr 	NSMSetByte
.9e93		68		pla				pla
.9e94		29 80		and #$80			and		#$80 						; copy the sign byte out
.9e96		95 50		sta $50,x			sta 	NSStatus,x  				; so it will be -1 or 1
.9e98		60		rts				rts
.9e99		20 02 a1	jsr $a102	_SGZero:jsr 	NSMSetZero
.9e9c		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/val.asm

.9e9d						ValUnary:
.9e9d		fa		plx				plx 								; restore stack pos
.9e9e		20 b3 9e	jsr $9eb3			jsr 	ValMainCode 				; do the main val() code
.9ea1		b0 01		bcs $9ea4			bcs 	_VUError 					; couldn't convert
.9ea3		60		rts				rts
.9ea4						_VUError:
.9ea4		4c 8a a2	jmp $a28a			jmp 	TypeError
.9ea7						IsValUnary:
.9ea7		fa		plx				plx 								; restore stack pos
.9ea8		20 b3 9e	jsr $9eb3			jsr 	ValMainCode 				; do the main val() code
.9eab		b0 03		bcs $9eb0			bcs 	_VUBad
.9ead		4c 24 92	jmp $9224			jmp 	ReturnTrue
.9eb0						_VUBad:
.9eb0		4c 2f 92	jmp $922f			jmp 	ReturnFalse
.9eb3						ValMainCode:
.9eb3		20 5a a0	jsr $a05a			jsr 	EvaluateString 				; get a string
.9eb6		20 9e 91	jsr $919e			jsr 	CheckRightBracket 			; check right bracket present
.9eb9						ValEvaluateZTemp0:
.9eb9		5a		phy				phy
.9eba		b2 36		lda ($36)			lda 	(zTemp0) 					; check not empty string
.9ebc		f0 17		beq $9ed5			beq 	_VMCFail2
.9ebe		a0 ff		ldy #$ff			ldy 	#$FF 						; start position
.9ec0		48		pha				pha 								; save first character
.9ec1		c9 2d		cmp #$2d			cmp 	#"-"		 				; is it - ?
.9ec3		d0 01		bne $9ec6			bne 	_VMCStart
.9ec5		c8		iny				iny 								; skip over -
.9ec6						_VMCStart:
.9ec6		38		sec				sec 								; initialise first time round.
.9ec7						_VMCNext:
.9ec7		c8		iny				iny 								; pre-increment
.9ec8		b1 36		lda ($36),y			lda 	(zTemp0),y 					; next character = EOS ?
.9eca		f0 0c		beq $9ed8			beq 	_VMCSuccess 				; successful.
.9ecc		20 01 9a	jsr $9a01			jsr 	EncodeNumber 				; send it to the number-builder
.9ecf		90 03		bcc $9ed4			bcc 	_VMCFail 					; if failed, give up.
.9ed1		18		clc				clc 								; next time round, countinue
.9ed2		80 f3		bra $9ec7			bra 	_VMCNext
.9ed4						_VMCFail:
.9ed4		68		pla				pla
.9ed5						_VMCFail2:
.9ed5		7a		ply				ply
.9ed6		38		sec				sec
.9ed7		60		rts				rts
.9ed8						_VMCSuccess:
.9ed8		a9 00		lda #$00			lda 	#0 							; construct final
.9eda		20 01 9a	jsr $9a01			jsr 	EncodeNumber 				; by sending a duff value.
.9edd		68		pla				pla 								; if it was -ve
.9ede		c9 2d		cmp #$2d			cmp 	#"-"
.9ee0		d0 03		bne $9ee5			bne 	_VMCNotNegative
.9ee2		20 c4 a0	jsr $a0c4			jsr		NSMNegate 					; negate it.
.9ee5						_VMCNotNegative:
.9ee5		7a		ply				ply
.9ee6		18		clc				clc
.9ee7		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/chr.asm

.9ee8						ChrUnary:
.9ee8		fa		plx				plx 								; restore stack pos
.9ee9		20 9d a0	jsr $a09d			jsr 	Evaluate8BitInteger			; get value (chr$(0) returns an empty string)
.9eec		48		pha				pha
.9eed		20 9e 91	jsr $919e			jsr 	CheckRightBracket
.9ef0		a9 01		lda #$01			lda 	#1 							; allocate space for one char
.9ef2		20 d1 b2	jsr $b2d1			jsr 	StringTempAllocate
.9ef5		68		pla				pla 								; write number to it
.9ef6		20 0a b3	jsr $b30a			jsr 	StringTempWrite
.9ef9		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/spc.asm

.9efa						SpcUnary:
.9efa		fa		plx				plx 								; restore stack pos
.9efb		20 9d a0	jsr $a09d			jsr 	Evaluate8BitInteger			; get value
.9efe		5a		phy				phy
.9eff		48		pha				pha 								; save count
.9f00		20 d1 b2	jsr $b2d1			jsr 	StringTempAllocate
.9f03		7a		ply				ply 								; to do count in Y
.9f04						_SpcLoop:
.9f04		c0 00		cpy #$00			cpy 	#0 							; copy Y spaces in.
.9f06		f0 08		beq $9f10			beq 	_SpcExit
.9f08		a9 20		lda #$20			lda 	#32
.9f0a		20 0a b3	jsr $b30a			jsr 	StringTempWrite
.9f0d		88		dey				dey
.9f0e		80 f4		bra $9f04			bra 	_SpcLoop
.9f10						_SpcExit:
.9f10		7a		ply				ply
.9f11		20 9e 91	jsr $919e			jsr 	CheckRightBracket
.9f14		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/str.asm

.9f15						Unary_Str:
.9f15		fa		plx				plx
.9f16		20 50 a0	jsr $a050			jsr 	EvaluateNumber  			; get number
.9f19		20 9e 91	jsr $919e			jsr 	CheckRightBracket 			; closing bracket
.9f1c		a9 05		lda #$05			lda 	#5 							; maximum decimals, from Basic816
.9f1e		20 37 9f	jsr $9f37			jsr 	ConvertNumberToString 		; do the conversion.
.9f21		a9 21		lda #$21			lda		#33 						; create buffer
.9f23		20 d1 b2	jsr $b2d1			jsr 	StringTempAllocate 			; allocate memory
.9f26		da		phx				phx  								; copy the converted string into the buffer.
.9f27		a2 00		ldx #$00			ldx 	#0
.9f29						_USCopy:
.9f29		bd 49 06	lda $0649,x			lda 	decimalBuffer,x
.9f2c		20 0a b3	jsr $b30a			jsr 	StringTempWrite
.9f2f		e8		inx				inx
.9f30		bd 49 06	lda $0649,x			lda 	decimalBuffer,x
.9f33		d0 f4		bne $9f29			bne 	_USCopy
.9f35		fa		plx				plx
.9f36		60		rts				rts
.9f37						ConvertNumberToString:
.9f37		5a		phy				phy 								; save code position
.9f38		8d 14 04	sta $0414			sta 	decimalPlaces	 			; save number of DPs.
.9f3b		9c 15 04	stz $0415			stz 	dbOffset 					; offset into decimal buffer = start.
.9f3e		b5 50		lda $50,x			lda 	NSStatus,x  				; is it -ve.
.9f40		10 09		bpl $9f4b			bpl 	_CNTSNotNegative
.9f42		29 7f		and #$7f			and 	#$7F 						; make +ve
.9f44		95 50		sta $50,x			sta 	NSStatus,x
.9f46		a9 2d		lda #$2d			lda 	#"-"
.9f48		20 ac 9f	jsr $9fac			jsr 	WriteDecimalBuffer
.9f4b						_CNTSNotNegative:
.9f4b		b5 78		lda $78,x			lda 	NSExponent,x 				; check if decimal
.9f4d		f0 12		beq $9f61			beq 	_CNTSNotFloat
.9f4f		e8		inx				inx 								; round up so we don't get too many 6.999999
.9f50		a9 01		lda #$01			lda 	#1
.9f52		20 04 a1	jsr $a104			jsr 	NSMSetByte
.9f55		ca		dex				dex
.9f56		b5 78		lda $78,x			lda		NSExponent,x
.9f58		95 79		sta $79,x			sta 	NSExponent+1,x
.9f5a		a9 08		lda #$08			lda 	#NSTFloat
.9f5c		95 51		sta $51,x			sta 	NSStatus+1,x
.9f5e		20 06 97	jsr $9706			jsr 	FloatAdd
.9f61						_CNTSNotFloat:
.9f61		20 8e 9f	jsr $9f8e			jsr 	MakePlusTwoString 			; do the integer part.
.9f64		20 cc 97	jsr $97cc			jsr 	FloatFractionalPart 		; get the fractional part
.9f67		20 7d 98	jsr $987d			jsr 	NSNormalise					; normalise , exit if zero
.9f6a		f0 20		beq $9f8c			beq 	_CNTSExit
.9f6c		a9 2e		lda #$2e			lda 	#"."
.9f6e		20 ac 9f	jsr $9fac			jsr 	WriteDecimalBuffer 			; write decimal place
.9f71						_CNTSDecimal:
.9f71		ce 14 04	dec $0414			dec 	decimalPlaces 				; done all the decimals
.9f74		30 16		bmi $9f8c			bmi 	_CNTSExit
.9f76		e8		inx				inx 								; x 10.0
.9f77		a9 0a		lda #$0a			lda 	#10
.9f79		20 04 a1	jsr $a104			jsr 	NSMSetByte
.9f7c		a9 08		lda #$08			lda 	#NSTFloat
.9f7e		95 50		sta $50,x			sta 	NSStatus,x
.9f80		ca		dex				dex
.9f81		20 4b 98	jsr $984b			jsr 	FloatMultiply
.9f84		20 8e 9f	jsr $9f8e			jsr 	MakePlusTwoString 			; put the integer e.g. next digit out.
.9f87		20 cc 97	jsr $97cc			jsr 	FloatFractionalPart 		; get the fractional part
.9f8a		80 e5		bra $9f71			bra 	_CNTSDecimal 				; keep going.
.9f8c						_CNTSExit:
.9f8c		7a		ply				ply
.9f8d		60		rts				rts
.9f8e						MakePlusTwoString:
.9f8e		da		phx				phx
.9f8f		20 e5 a0	jsr $a0e5			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.9f92		e8		inx				inx 								; access it
.9f93		e8		inx				inx
.9f94		20 24 98	jsr $9824			jsr 	FloatIntegerPart 			; make it an integer
.9f97		a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.9f99		20 36 96	jsr $9636			jsr 	ConvertInt32
.9f9c		a2 00		ldx #$00			ldx	 	#0 							; write that to the decimal buffer.
.9f9e						_MPTSCopy:
.9f9e		bd 27 06	lda $0627,x			lda 	numberBuffer,x
.9fa1		20 ac 9f	jsr $9fac			jsr 	WriteDecimalBuffer
.9fa4		e8		inx				inx
.9fa5		bd 27 06	lda $0627,x			lda 	numberBuffer,x
.9fa8		d0 f4		bne $9f9e			bne 	_MPTSCopy
.9faa		fa		plx				plx
.9fab		60		rts				rts
.9fac						WriteDecimalBuffer:
.9fac		da		phx				phx
.9fad		ae 15 04	ldx $0415			ldx 	dbOffset
.9fb0		9d 49 06	sta $0649,x			sta 	decimalBuffer,x
.9fb3		9e 4a 06	stz $064a,x			stz 	decimalBuffer+1,x
.9fb6		ee 15 04	inc $0415			inc 	dbOffset
.9fb9		fa		plx				plx
.9fba		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/substring.asm

.9fbb						Unary_Left:
.9fbb		fa		plx				plx
.9fbc		18		clc				clc 								; only one parameter
.9fbd		20 20 a0	jsr $a020			jsr 	SubstringInitial 			; set up.
.9fc0		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; Param #1 is the length
.9fc2		95 5a		sta $5a,x			sta 	NSMantissa0+2,x
.9fc4		74 59		stz $59,x			stz 	NSMantissa0+1,x 			; Start is zero.
.9fc6		80 25		bra $9fed			bra 	SubstringMain
.9fc8						Unary_Right:
.9fc8		fa		plx				plx
.9fc9		18		clc				clc 								; only one parameter
.9fca		20 20 a0	jsr $a020			jsr 	SubstringInitial 			; set up.
.9fcd		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; length => param 2
.9fcf		95 5a		sta $5a,x			sta 	NSMantissa0+2,x
.9fd1		b5 78		lda $78,x			lda 	NSExponent,x 				; total length
.9fd3		f5 59		sbc $59,x			sbc 	NSMantissa0+1,x 			; length - required.
.9fd5		b0 02		bcs $9fd9			bcs 	_URNotUnderflow
.9fd7		a9 00		lda #$00			lda 	#0 							; start from the beginning, as something like right$("AB",3)
.9fd9						_URNotUnderflow:
.9fd9		95 59		sta $59,x			sta 	NSMantissa0+1,x 			; this is the start position
.9fdb		80 10		bra $9fed			bra 	SubstringMain
.9fdd						Unary_Mid:
.9fdd		fa		plx				plx
.9fde		38		sec				sec 								; two parameters
.9fdf		20 20 a0	jsr $a020			jsr 	SubstringInitial 			; set up.
.9fe2		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; first parameter is zero ?
.9fe4		f0 04		beq $9fea			beq 	_UMError
.9fe6		d6 59		dec $59,x			dec 	NSMantissa0+1,x				; reduce initial offset by 1 as MID$(a$,1..) is actually the first character
.9fe8		80 03		bra $9fed			bra 	SubstringMain
.9fea						_UMError:
.9fea		4c 8f a2	jmp $a28f			jmp 	ArgumentError
.9fed						SubstringMain:
.9fed		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; is the initial offset >= the length
.9fef		d5 78		cmp $78,x			cmp 	NSExponent,x
.9ff1		b0 27		bcs $a01a			bcs 	_SSMNull 					; if so, return an empty string.
.9ff3		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; if copy count is zero
.9ff5		f0 23		beq $a01a			beq 	_SSMNull 					; return empty string.
.9ff7		18		clc				clc 								; add the offset +1 to the address and
.9ff8		b5 58		lda $58,x			lda	 	NSMantissa0,x 				; put in zTemp, this is the start of the substring to copy.
.9ffa		75 59		adc $59,x			adc 	NSMantissa0+1,x
.9ffc		85 36		sta $36				sta 	zTemp0
.9ffe		b5 60		lda $60,x			lda	 	NSMantissa1,x
.a000		69 00		adc #$00			adc 	#0
.a002		85 37		sta $37				sta 	zTemp0+1
.a004						_SSMNoCarry:
.a004		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; characters required.
.a006		20 d1 b2	jsr $b2d1			jsr 	StringTempAllocate 			; allocate that many characters
.a009		5a		phy				phy 								; save Y
.a00a		a0 00		ldy #$00			ldy 	#0 							; start copying in.
.a00c						_SSMCopy:
.a00c		b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next character
.a00e		f0 08		beq $a018			beq 	_SSMEString 				; no more to copy
.a010		20 0a b3	jsr $b30a			jsr 	StringTempWrite 			; and write it out.
.a013		c8		iny				iny
.a014		d6 5a		dec $5a,x			dec 	NSMantissa0+2,x
.a016		d0 f4		bne $a00c			bne 	_SSMCopy
.a018						_SSMEString:
.a018		7a		ply				ply
.a019						_SSMExit:
.a019		60		rts				rts
.a01a						_SSMNull:
.a01a		a9 00		lda #$00			lda 	#0
.a01c		20 d1 b2	jsr $b2d1			jsr 	StringTempAllocate
.a01f		60		rts				rts
.a020						SubstringInitial:
.a020		da		phx				phx 								; save initial stack position
.a021		08		php				php 								; save carry on stack indicating 2 parameters
.a022		20 5a a0	jsr $a05a			jsr 	EvaluateString 				; get a string
.a025		5a		phy				phy 								; calculate length to exponent.
.a026		a0 ff		ldy #$ff			ldy 	#$FF
.a028						_SIFindLength:
.a028		c8		iny				iny
.a029		b1 36		lda ($36),y			lda 	(zTemp0),y
.a02b		d0 fb		bne $a028			bne 	_SIFindLength
.a02d		98		tya				tya
.a02e		95 78		sta $78,x			sta 	NSExponent,x
.a030		7a		ply				ply
.a031		e8		inx				inx
.a032		20 a6 91	jsr $91a6			jsr 	CheckComma 					; comma next
.a035		20 9d a0	jsr $a09d			jsr 	Evaluate8BitInteger 		; get next parameter
.a038		28		plp				plp 								; is it the last parameter ?
.a039		90 07		bcc $a042			bcc 	_SSIExit 					; if so, exit.
.a03b		e8		inx				inx
.a03c		20 a6 91	jsr $91a6			jsr 	CheckComma 					; comma next
.a03f		20 9d a0	jsr $a09d			jsr 	Evaluate8BitInteger 		; get last parameter
.a042						_SSIExit:
.a042		fa		plx				plx
.a043		20 9e 91	jsr $919e			jsr 	CheckRightBracket 			; check closing bracket
.a046		60		rts				rts 								; exit

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/exprhelper.asm

.a047						EvaluateValue:
.a047		48		pha				pha
.a048		20 bb 96	jsr $96bb			jsr		EvaluateExpression 			; expression
.a04b		20 7e 99	jsr $997e			jsr 	Dereference					; derefernce it
.a04e		68		pla				pla
.a04f		60		rts				rts
.a050						EvaluateNumber:
.a050		20 47 a0	jsr $a047			jsr 	EvaluateValue 				; get a value
.a053		b5 50		lda $50,x			lda 	NSStatus,x 					; check if string.
.a055		29 10		and #$10			and 	#NSBIsString
.a057		d0 13		bne $a06c			bne 	HelperTypeError
.a059		60		rts				rts
.a05a						EvaluateString:
.a05a		20 47 a0	jsr $a047			jsr 	EvaluateValue 				; get a value
.a05d		b5 50		lda $50,x			lda 	NSStatus,x 					; check if string.
.a05f		29 10		and #$10			and 	#NSBIsString
.a061		f0 09		beq $a06c			beq 	HelperTypeError
.a063						CopyAddressToTemp0:
.a063		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy address -> zTemp0
.a065		85 36		sta $36				sta 	zTemp0 						; (so we can do something with it)
.a067		b5 60		lda $60,x			lda 	NSMantissa1,x
.a069		85 37		sta $37				sta 	zTemp0+1
.a06b		60		rts				rts
.a06c						HelperTypeError:
.a06c		4c 8a a2	jmp $a28a			jmp 	TypeError
.a06f						EvaluateInteger:
.a06f		20 50 a0	jsr $a050			jsr 	EvaluateNumber
.a072		b5 78		lda $78,x			lda 	NSExponent,x 				; check exponent is zero
.a074		d0 09		bne $a07f			bne 	HelperValueError 			; if not, it's a float.
.a076		60		rts				rts
.a077						EvaluateUnsignedInteger:
.a077		20 6f a0	jsr $a06f			jsr 	EvaluateInteger 			; check integer is +ve
.a07a		b5 50		lda $50,x			lda 	NSStatus,x
.a07c		30 01		bmi $a07f			bmi 	HelperValueError
.a07e		60		rts				rts
.a07f						HelperValueError:
.a07f		4c 8f a2	jmp $a28f			jmp 	ArgumentError
.a082						Evaluate16BitInteger:
.a082		20 77 a0	jsr $a077			jsr	 	EvaluateUnsignedInteger		; get integer
.a085		b5 70		lda $70,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.a087		15 68		ora $68,x			ora 	NSMantissa2,x
.a089		d0 f4		bne $a07f			bne 	HelperValueError
.a08b		60		rts				rts
.a08c						Evaluate16BitIntegerSigned:
.a08c		20 6f a0	jsr $a06f			jsr	 	EvaluateInteger				; get integer
.a08f		b5 70		lda $70,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.a091		15 68		ora $68,x			ora 	NSMantissa2,x
.a093		d0 ea		bne $a07f			bne 	HelperValueError
.a095		b5 50		lda $50,x			lda 	NSStatus,x 					; signed ?
.a097		10 03		bpl $a09c			bpl 	_EISNotSigned
.a099		20 cb a0	jsr $a0cb			jsr 	NSMNegateMantissa 			; makes it an actual 2's complement value.
.a09c						_EISNotSigned:
.a09c		60		rts				rts
.a09d						Evaluate8BitInteger:
.a09d		20 77 a0	jsr $a077			jsr	 	EvaluateUnsignedInteger 	; get an integer
.a0a0		d0 dd		bne $a07f			bne 	HelperValueError
.a0a2		b5 70		lda $70,x			lda 	NSMantissa3,x	 			; bytes 1, 2 & 3 must be zero
.a0a4		15 68		ora $68,x			ora 	NSMantissa2,x
.a0a6		15 60		ora $60,x			ora 	NSMantissa1,x
.a0a8		d0 d5		bne $a07f			bne 	HelperValueError
.a0aa		b5 58		lda $58,x			lda 	NSMantissa0,x
.a0ac		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/mult8x8.asm

.a0ad						Multiply8x8:
.a0ad		4a		lsr a		  		lsr 	a  							; prime the carry bit for the loop
.a0ae		85 36		sta $36			  	sta 	zTemp0
.a0b0		86 37		stx $37				stx 	zTemp0+1
.a0b2		a9 00		lda #$00			lda 	#0
.a0b4		a2 08		ldx #$08			ldx 	#8
.a0b6						_M88Loop:
.a0b6		90 03		bcc $a0bb			bcc 	_M88NoAdd
.a0b8		18		clc				clc
.a0b9		65 37		adc $37				adc 	zTemp0+1
.a0bb						_M88NoAdd:
.a0bb		6a		ror a				ror 	a
.a0bc		66 36		ror $36				ror 	zTemp0  					; pull another bit out for the next iteration
.a0be		ca		dex				dex         						; inc/dec don't modify carry; only shifts and adds do
.a0bf		d0 f5		bne $a0b6			bne 	_M88Loop
.a0c1		85 37		sta $37				sta 	zTemp0+1 					; store high 8 bits.
.a0c3		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/utility.asm

.a0c4						NSMNegate:
.a0c4		b5 50		lda $50,x			lda 	NSStatus,x 					; everything is sign/magnitude usually so just
.a0c6		49 80		eor #$80			eor 	#NSBIsNegative  			; toggle the negative flag
.a0c8		95 50		sta $50,x			sta 	NSStatus,x
.a0ca		60		rts				rts
.a0cb						NSMNegateMantissa:
.a0cb		38		sec				sec 								; when we want an actual 32 bit 2's complement value.
.a0cc		a9 00		lda #$00			lda 	#0
.a0ce		f5 58		sbc $58,x			sbc 	NSMantissa0,x
.a0d0		95 58		sta $58,x			sta 	NSMantissa0,x
.a0d2		a9 00		lda #$00			lda 	#0
.a0d4		f5 60		sbc $60,x			sbc 	NSMantissa1,x
.a0d6		95 60		sta $60,x			sta 	NSMantissa1,x
.a0d8		a9 00		lda #$00			lda 	#0
.a0da		f5 68		sbc $68,x			sbc 	NSMantissa2,x
.a0dc		95 68		sta $68,x			sta 	NSMantissa2,x
.a0de		a9 00		lda #$00			lda 	#0
.a0e0		f5 70		sbc $70,x			sbc 	NSMantissa3,x
.a0e2		95 70		sta $70,x			sta 	NSMantissa3,x
.a0e4		60		rts				rts
.a0e5						NSMShiftUpTwo:
.a0e5		b5 58		lda $58,x			lda 	NSMantissa0,x
.a0e7		95 5a		sta $5a,x			sta 	NSMantissa0+2,x
.a0e9		b5 60		lda $60,x			lda 	NSMantissa1,x
.a0eb		95 62		sta $62,x			sta 	NSMantissa1+2,x
.a0ed		b5 68		lda $68,x			lda 	NSMantissa2,x
.a0ef		95 6a		sta $6a,x			sta 	NSMantissa2+2,x
.a0f1		b5 70		lda $70,x			lda 	NSMantissa3,x
.a0f3		95 72		sta $72,x			sta 	NSMantissa3+2,x
.a0f5		b5 78		lda $78,x			lda 	NSExponent,x
.a0f7		95 7a		sta $7a,x			sta 	NSExponent+2,x
.a0f9		b5 50		lda $50,x			lda 	NSStatus,x
.a0fb		95 52		sta $52,x			sta 	NSStatus+2,x
.a0fd		60		rts				rts
.a0fe						NSMSetZeroMantissaOnly:
.a0fe		a9 00		lda #$00			lda 	#0
.a100		80 06		bra $a108			bra 	NSMSetMantissa
.a102						NSMSetZero:
.a102		a9 00		lda #$00			lda 	#0
.a104						NSMSetByte:
.a104		74 78		stz $78,x			stz 	NSExponent,x 				; zero exponent, as integer.
.a106		74 50		stz $50,x			stz 	NSStatus,x 					; status zero (integer)
.a108						NSMSetMantissa:
.a108		95 58		sta $58,x			sta 	NSMantissa0,x 				; mantissa
.a10a		74 60		stz $60,x			stz 	NSMantissa1,x
.a10c		74 68		stz $68,x			stz 	NSMantissa2,x
.a10e		74 70		stz $70,x			stz 	NSMantissa3,x
.a110		60		rts				rts
.a111						NSMShiftLeft:
.a111		18		clc				clc
.a112						NSMRotateLeft:
.a112		36 58		rol $58,x			rol 	NSMantissa0,x
.a114		36 60		rol $60,x			rol		NSMantissa1,x
.a116		36 68		rol $68,x			rol		NSMantissa2,x
.a118		36 70		rol $70,x			rol		NSMantissa3,x
.a11a		60		rts				rts
.a11b						NSMShiftRight:
.a11b		56 70		lsr $70,x			lsr 	NSMantissa3,x
.a11d		76 68		ror $68,x			ror		NSMantissa2,x
.a11f		76 60		ror $60,x			ror		NSMantissa1,x
.a121		76 58		ror $58,x			ror		NSMantissa0,x
.a123		60		rts				rts
.a124						NSMIsZero:
.a124		b5 70		lda $70,x			lda 	NSMantissa3,x
.a126		15 68		ora $68,x			ora		NSMantissa2,x
.a128		15 60		ora $60,x			ora		NSMantissa1,x
.a12a		15 58		ora $58,x			ora		NSMantissa0,x
.a12c		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./tick.task/f256/ticktask.asm

.a12d						TickHandler:
.a12d		5a		phy				phy 								; need to preserve Y
.a12e		20 99 80	jsr $8099			jsr 	SNDUpdate 					; update sound
.a131		7a		ply				ply
.a132		60		rts				rts
.0661						LastTick:
>0661								.fill 		1

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/asmcore.asm

.a133						Assemble_ora:
.a133		20 fa 80	jsr $80fa		jsr	AssembleGroup1
>a136		01					.byte $01
.a137						Assemble_and:
.a137		20 fa 80	jsr $80fa		jsr	AssembleGroup1
>a13a		21					.byte $21
.a13b						Assemble_eor:
.a13b		20 fa 80	jsr $80fa		jsr	AssembleGroup1
>a13e		41					.byte $41
.a13f						Assemble_adc:
.a13f		20 fa 80	jsr $80fa		jsr	AssembleGroup1
>a142		61					.byte $61
.a143						Assemble_sta:
.a143		20 fa 80	jsr $80fa		jsr	AssembleGroup1
>a146		81					.byte $81
.a147						Assemble_lda:
.a147		20 fa 80	jsr $80fa		jsr	AssembleGroup1
>a14a		a1					.byte $a1
.a14b						Assemble_cmp:
.a14b		20 fa 80	jsr $80fa		jsr	AssembleGroup1
>a14e		c1					.byte $c1
.a14f						Assemble_sbc:
.a14f		20 fa 80	jsr $80fa		jsr	AssembleGroup1
>a152		e1					.byte $e1
.a153						Assemble_asl:
.a153		20 01 81	jsr $8101		jsr	AssembleGroup2
>a156		02					.byte $02
>a157		75					.byte $75
.a158						Assemble_rol:
.a158		20 01 81	jsr $8101		jsr	AssembleGroup2
>a15b		22					.byte $22
>a15c		75					.byte $75
.a15d						Assemble_lsr:
.a15d		20 01 81	jsr $8101		jsr	AssembleGroup2
>a160		42					.byte $42
>a161		75					.byte $75
.a162						Assemble_ror:
.a162		20 01 81	jsr $8101		jsr	AssembleGroup2
>a165		62					.byte $62
>a166		75					.byte $75
.a167						Assemble_stx:
.a167		20 01 81	jsr $8101		jsr	AssembleGroup2
>a16a		82					.byte $82
>a16b		50					.byte $50
.a16c						Assemble_ldx:
.a16c		20 01 81	jsr $8101		jsr	AssembleGroup2
>a16f		a2					.byte $a2
>a170		d0					.byte $d0
.a171						Assemble_dec:
.a171		20 01 81	jsr $8101		jsr	AssembleGroup2
>a174		c2					.byte $c2
>a175		55					.byte $55
.a176						Assemble_inc:
.a176		20 01 81	jsr $8101		jsr	AssembleGroup2
>a179		e2					.byte $e2
>a17a		55					.byte $55
.a17b						Assemble_stz:
.a17b		20 01 81	jsr $8101		jsr	AssembleGroup2
>a17e		60					.byte $60
>a17f		44					.byte $44
.a180						Assemble_bit:
.a180		20 01 81	jsr $8101		jsr	AssembleGroup2
>a183		20					.byte $20
>a184		55					.byte $55
.a185						Assemble_sty:
.a185		20 01 81	jsr $8101		jsr	AssembleGroup2
>a188		80					.byte $80
>a189		54					.byte $54
.a18a						Assemble_ldy:
.a18a		20 01 81	jsr $8101		jsr	AssembleGroup2
>a18d		a0					.byte $a0
>a18e		d5					.byte $d5
.a18f						Assemble_cpy:
.a18f		20 01 81	jsr $8101		jsr	AssembleGroup2
>a192		c0					.byte $c0
>a193		d4					.byte $d4
.a194						Assemble_cpx:
.a194		20 01 81	jsr $8101		jsr	AssembleGroup2
>a197		e0					.byte $e0
>a198		d0					.byte $d0
.a199						Assemble_tsb:
.a199		20 01 81	jsr $8101		jsr	AssembleGroup2
>a19c		00					.byte $00
>a19d		50					.byte $50
.a19e						Assemble_trb:
.a19e		20 01 81	jsr $8101		jsr	AssembleGroup2
>a1a1		10					.byte $10
>a1a2		50					.byte $50
.a1a3						Assemble_jsr:
.a1a3		20 01 81	jsr $8101		jsr	AssembleGroup2
>a1a6		14					.byte $14
>a1a7		10					.byte $10
.a1a8						Assemble_jmp:
.a1a8		20 01 81	jsr $8101		jsr	AssembleGroup2
>a1ab		40					.byte $40
>a1ac		10					.byte $10
.a1ad						Assemble_bpl:
.a1ad		20 52 81	jsr $8152		jsr	AssembleGroup3
>a1b0		10					.byte $10
.a1b1						Assemble_bmi:
.a1b1		20 52 81	jsr $8152		jsr	AssembleGroup3
>a1b4		30					.byte $30
.a1b5						Assemble_bvc:
.a1b5		20 52 81	jsr $8152		jsr	AssembleGroup3
>a1b8		50					.byte $50
.a1b9						Assemble_bvs:
.a1b9		20 52 81	jsr $8152		jsr	AssembleGroup3
>a1bc		70					.byte $70
.a1bd						Assemble_bcc:
.a1bd		20 52 81	jsr $8152		jsr	AssembleGroup3
>a1c0		90					.byte $90
.a1c1						Assemble_bcs:
.a1c1		20 52 81	jsr $8152		jsr	AssembleGroup3
>a1c4		b0					.byte $b0
.a1c5						Assemble_bne:
.a1c5		20 52 81	jsr $8152		jsr	AssembleGroup3
>a1c8		d0					.byte $d0
.a1c9						Assemble_beq:
.a1c9		20 52 81	jsr $8152		jsr	AssembleGroup3
>a1cc		f0					.byte $f0
.a1cd						Assemble_bra:
.a1cd		20 52 81	jsr $8152		jsr	AssembleGroup3
>a1d0		80					.byte $80
.a1d1						Assemble_brk:
.a1d1		20 86 81	jsr $8186		jsr	AssembleGroup4
>a1d4		00					.byte $00
.a1d5						Assemble_php:
.a1d5		20 86 81	jsr $8186		jsr	AssembleGroup4
>a1d8		08					.byte $08
.a1d9						Assemble_clc:
.a1d9		20 86 81	jsr $8186		jsr	AssembleGroup4
>a1dc		18					.byte $18
.a1dd						Assemble_plp:
.a1dd		20 86 81	jsr $8186		jsr	AssembleGroup4
>a1e0		28					.byte $28
.a1e1						Assemble_sec:
.a1e1		20 86 81	jsr $8186		jsr	AssembleGroup4
>a1e4		38					.byte $38
.a1e5						Assemble_rti:
.a1e5		20 86 81	jsr $8186		jsr	AssembleGroup4
>a1e8		40					.byte $40
.a1e9						Assemble_pha:
.a1e9		20 86 81	jsr $8186		jsr	AssembleGroup4
>a1ec		48					.byte $48
.a1ed						Assemble_cli:
.a1ed		20 86 81	jsr $8186		jsr	AssembleGroup4
>a1f0		58					.byte $58
.a1f1						Assemble_phy:
.a1f1		20 86 81	jsr $8186		jsr	AssembleGroup4
>a1f4		5a					.byte $5a
.a1f5						Assemble_rts:
.a1f5		20 86 81	jsr $8186		jsr	AssembleGroup4
>a1f8		60					.byte $60
.a1f9						Assemble_pla:
.a1f9		20 86 81	jsr $8186		jsr	AssembleGroup4
>a1fc		68					.byte $68
.a1fd						Assemble_sei:
.a1fd		20 86 81	jsr $8186		jsr	AssembleGroup4
>a200		78					.byte $78
.a201						Assemble_ply:
.a201		20 86 81	jsr $8186		jsr	AssembleGroup4
>a204		7a					.byte $7a
.a205						Assemble_dey:
.a205		20 86 81	jsr $8186		jsr	AssembleGroup4
>a208		88					.byte $88
.a209						Assemble_txa:
.a209		20 86 81	jsr $8186		jsr	AssembleGroup4
>a20c		8a					.byte $8a
.a20d						Assemble_tya:
.a20d		20 86 81	jsr $8186		jsr	AssembleGroup4
>a210		98					.byte $98
.a211						Assemble_txs:
.a211		20 86 81	jsr $8186		jsr	AssembleGroup4
>a214		9a					.byte $9a
.a215						Assemble_tay:
.a215		20 86 81	jsr $8186		jsr	AssembleGroup4
>a218		a8					.byte $a8
.a219						Assemble_tax:
.a219		20 86 81	jsr $8186		jsr	AssembleGroup4
>a21c		aa					.byte $aa
.a21d						Assemble_clv:
.a21d		20 86 81	jsr $8186		jsr	AssembleGroup4
>a220		b8					.byte $b8
.a221						Assemble_tsx:
.a221		20 86 81	jsr $8186		jsr	AssembleGroup4
>a224		ba					.byte $ba
.a225						Assemble_iny:
.a225		20 86 81	jsr $8186		jsr	AssembleGroup4
>a228		c8					.byte $c8
.a229						Assemble_dex:
.a229		20 86 81	jsr $8186		jsr	AssembleGroup4
>a22c		ca					.byte $ca
.a22d						Assemble_cld:
.a22d		20 86 81	jsr $8186		jsr	AssembleGroup4
>a230		d8					.byte $d8
.a231						Assemble_phx:
.a231		20 86 81	jsr $8186		jsr	AssembleGroup4
>a234		da					.byte $da
.a235						Assemble_stp:
.a235		20 86 81	jsr $8186		jsr	AssembleGroup4
>a238		db					.byte $db
.a239						Assemble_inx:
.a239		20 86 81	jsr $8186		jsr	AssembleGroup4
>a23c		e8					.byte $e8
.a23d						Assemble_nop:
.a23d		20 86 81	jsr $8186		jsr	AssembleGroup4
>a240		ea					.byte $ea
.a241						Assemble_sed:
.a241		20 86 81	jsr $8186		jsr	AssembleGroup4
>a244		f8					.byte $f8
.a245						Assemble_plx:
.a245		20 86 81	jsr $8186		jsr	AssembleGroup4
>a248		fa					.byte $fa

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/constants.asm

.a249						DecimalScalarTable:
>a249		66 66 66 66				.dword $66666666 ; 0.1
>a24d		de					.byte $de
>a24e		1f 85 eb 51				.dword $51eb851f ; 0.01
>a252		db					.byte $db
>a253		4c 37 89 41				.dword $4189374c ; 0.001
>a257		d8					.byte $d8
>a258		ac 8b db 68				.dword $68db8bac ; 0.0001
>a25c		d4					.byte $d4
>a25d		24 d6 e2 53				.dword $53e2d624 ; 1e-05
>a261		d1					.byte $d1
>a262		83 de 1b 43				.dword $431bde83 ; 1e-06
>a266		ce					.byte $ce
>a267		6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>a26b		ca					.byte $ca
>a26c		89 3b e6 55				.dword $55e63b89 ; 1e-08
>a270		c7					.byte $c7
>a271		a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>a275		c4					.byte $c4
>a276		67 7f f3 6d				.dword $6df37f67 ; 1e-10
>a27a		c0					.byte $c0
>a27b		86 ff f5 57				.dword $57f5ff86 ; 1e-11
>a27f		bd					.byte $bd

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.asm

.a280						SyntaxError:
.a280		a9 02		lda #$02		lda	#2
.a282		4c b7 91	jmp $91b7		jmp	ErrorHandler
.a285						RangeError:
.a285		a9 04		lda #$04		lda	#4
.a287		4c b7 91	jmp $91b7		jmp	ErrorHandler
.a28a						TypeError:
.a28a		a9 05		lda #$05		lda	#5
.a28c		4c b7 91	jmp $91b7		jmp	ErrorHandler
.a28f						ArgumentError:
.a28f		a9 07		lda #$07		lda	#7
.a291		4c b7 91	jmp $91b7		jmp	ErrorHandler
.a294						NotDoneError:
.a294		a9 0c		lda #$0c		lda	#12
.a296		4c b7 91	jmp $91b7		jmp	ErrorHandler
.a299						ErrorText:
>a299		42 72 65 61 6b 00			.text	"Break",0
>a29f		53 79 6e 74 61 78 20 65			.text	"Syntax error",0
>a2a7		72 72 6f 72 00
>a2ac		44 69 76 69 73 69 6f 6e			.text	"Division by zero",0
>a2b4		20 62 79 20 7a 65 72 6f 00
>a2bd		4f 75 74 20 6f 66 20 52			.text	"Out of Range",0
>a2c5		61 6e 67 65 00
>a2ca		54 79 70 65 20 6d 69 73			.text	"Type mismatch",0
>a2d2		6d 61 74 63 68 00
>a2d8		4f 75 74 20 6f 66 20 6d			.text	"Out of memory",0
>a2e0		65 6d 6f 72 79 00
>a2e6		49 6c 6c 65 67 61 6c 20			.text	"Illegal argument",0
>a2ee		61 72 67 75 6d 65 6e 74 00
>a2f7		53 74 6f 70 00				.text	"Stop",0
>a2fc		53 74 72 69 6e 67 20 74			.text	"String too long",0
>a304		6f 6f 20 6c 6f 6e 67 00
>a30c		41 73 73 65 72 74 69 6f			.text	"Assertion failed",0
>a314		6e 20 66 61 69 6c 65 64 00
>a31d		4f 75 74 20 6f 66 20 64			.text	"Out of data",0
>a325		61 74 61 00
>a329		55 6e 69 6d 70 6c 65 6d			.text	"Unimplemented",0
>a331		65 6e 74 65 64 00
>a337		4e 6f 20 73 75 63 68 20			.text	"No such line number",0
>a33f		6c 69 6e 65 20 6e 75 6d 62 65 72 00
>a34b		52 65 74 75 72 6e 20 77			.text	"Return without Gosub",0
>a353		69 74 68 6f 75 74 20 47 6f 73 75 62 00
>a360		55 6e 74 69 6c 20 77 69			.text	"Until without Repeat",0
>a368		74 68 6f 75 74 20 52 65 70 65 61 74 00
>a375		57 65 6e 64 20 77 69 74			.text	"Wend without While",0
>a37d		68 6f 75 74 20 57 68 69 6c 65 00
>a388		4e 65 78 74 20 77 69 74			.text	"Next without For",0
>a390		68 6f 75 74 20 46 6f 72 00
>a399		42 41 53 49 43 20 53 74			.text	"BASIC Stack full",0
>a3a1		61 63 6b 20 66 75 6c 6c 00
>a3aa		4f 70 65 6e 20 53 74 72			.text	"Open Structure",0
>a3b2		75 63 74 75 72 65 00
>a3b9		45 6e 64 50 72 6f 63 20			.text	"EndProc without call",0
>a3c1		77 69 74 68 6f 75 74 20 63 61 6c 6c 00
>a3ce		41 72 72 61 79 20 61 6c			.text	"Array already defined",0
>a3d6		72 65 61 64 79 20 64 65 66 69 6e 65 64 00
>a3e4		41 72 72 61 79 20 73 69			.text	"Array size",0
>a3ec		7a 65 00
>a3ef		42 61 64 20 61 72 72 61			.text	"Bad array index",0
>a3f7		79 20 69 6e 64 65 78 00
>a3ff		41 72 72 61 79 20 6e 6f			.text	"Array not declared",0
>a407		74 20 64 65 63 6c 61 72 65 64 00
>a412		46 69 6c 65 20 6e 6f 74			.text	"File not found",0
>a41a		20 66 6f 75 6e 64 00
>a421		53 74 6f 72 61 67 65 20			.text	"Storage error",0
>a429		65 72 72 6f 72 00
>a42f		56 65 72 69 66 79 20 66			.text	"Verify failed",0
>a437		61 69 6c 65 64 00

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/timestamp.asm

>dd54		09 09 30 33 2f 30 31 2f			.text 9,9,"03/01/23  23"
>dd5c		32 33 20 20 32 33

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/graphics/gcommand.asm

.a43d						RectangleCommand:
.a43d		a9 44		lda #$44			lda 	#GCMD_FrameRect				; frame rectangle
.a43f		80 02		bra $a443			bra 	ShapeDrawCmd
.a441						CircleCommand:
.a441		a9 48		lda #$48			lda 	#GCMD_FrameCircle 				; framed circle
.a443						ShapeDrawCmd:
.a443		20 cd a4	jsr $a4cd			jsr 	RunGraphicsCommand
.a446						ShapeDraw:
.a446		0d 63 06	ora $0663			ora 	gxFillSolid  				; adjust AXY for solid fill.
.a449		4c c1 a4	jmp $a4c1			jmp 	ExecuteGraphicCommand	 	; and complete
.a44c						SpriteCommand:
.a44c		a2 00		ldx #$00			ldx 	#0
.a44e		20 9d a0	jsr $a09d			jsr 	Evaluate8BitInteger 		; get image number.
.a451		5a		phy				phy
.a452		a9 0e		lda #$0e			lda 	#GCMD_SpriteUse 			; use that image.
.a454		a6 58		ldx $58				ldx 	NSMantissa0
.a456		e0 40		cpx #$40			cpx 	#64 						; 0-63 only
.a458		b0 0d		bcs $a467			bcs 	_SCRange
.a45a		a0 ff		ldy #$ff			ldy 	#255
.a45c		20 85 80	jsr $8085			jsr 	GXGraphicDraw
.a45f		a9 52		lda #$52			lda 	#GCMD_SpriteMove
.a461		7a		ply				ply
.a462		20 cd a4	jsr $a4cd			jsr 	RunGraphicsCommand
.a465		80 5a		bra $a4c1			bra 	ExecuteGraphicCommand
.a467						_SCRange:
.a467		4c 85 a2	jmp $a285			jmp 	RangeError
.a46a						ImageCommand:
.a46a		a2 00		ldx #$00			ldx 	#0
.a46c		20 9d a0	jsr $a09d			jsr 	Evaluate8BitInteger 		; get image number.
.a46f		20 cd a4	jsr $a4cd			jsr 	RunGraphicsCommand
.a472						ImageRunDraw:
.a472		09 40		ora #$40			ora 	#GCMD_Move					; move cursor
.a474		20 85 80	jsr $8085			jsr 	GXGraphicDraw
.a477		ad 69 06	lda $0669			lda 	gxDrawScale
.a47a		0a		asl a				asl 	a
.a47b		0a		asl a				asl 	a
.a47c		0a		asl a				asl 	a
.a47d		a8		tay				tay
.a47e		a9 0c		lda #$0c			lda 	#GCMD_DrawSprite 			; image drawing
.a480		a6 58		ldx $58				ldx 	NSMantissa0
.a482		20 85 80	jsr $8085			jsr 	GXGraphicDraw
.a485		60		rts				rts
.a486						TextCommand:
.a486		a2 00		ldx #$00			ldx 	#0
.a488		20 5a a0	jsr $a05a			jsr 	EvaluateString 				; get text
.a48b		20 cd a4	jsr $a4cd			jsr 	RunGraphicsCommand
.a48e						TextRunDraw:
.a48e		09 40		ora #$40			ora 	#GCMD_Move 					; move cursor
.a490		20 85 80	jsr $8085			jsr 	GXGraphicDraw
.a493		a0 00		ldy #$00			ldy 	#0
.a495						_IRDLoop:
.a495		a5 60		lda $60				lda 	NSMantissa1 				; access character
.a497		85 37		sta $37				sta 	zTemp0+1
.a499		a5 58		lda $58				lda 	NSMantissa0
.a49b		85 36		sta $36				sta 	zTemp0
.a49d		b1 36		lda ($36),y			lda 	(zTemp0),y
.a49f		f0 13		beq $a4b4			beq 	_IRDExit
.a4a1		5a		phy				phy									; save string pos
.a4a2		48		pha				pha 								; save char
.a4a3		ad 69 06	lda $0669			lda 	gxDrawScale 				; get scale
.a4a6		0a		asl a				asl 	a
.a4a7		0a		asl a				asl 	a
.a4a8		0a		asl a				asl 	a
.a4a9		a8		tay				tay
.a4aa		a9 0a		lda #$0a			lda 	#GCMD_DrawFont 				; char drawing
.a4ac		fa		plx				plx 								; char to draw
.a4ad		20 85 80	jsr $8085			jsr 	GXGraphicDraw
.a4b0		7a		ply				ply 								; restore string pos
.a4b1		c8		iny				iny
.a4b2		90 e1		bcc $a495			bcc 	_IRDLoop 					; go back if no error.
.a4b4						_IRDExit:
.a4b4		60		rts				rts
.a4b5						PlotCommand:
.a4b5		a9 50		lda #$50			lda 	#GCMD_Plot 					; command ID to use
.a4b7		20 cd a4	jsr $a4cd			jsr 	RunGraphicsCommand
.a4ba		80 05		bra $a4c1			bra 	ExecuteGraphicCommand
.a4bc						LineCommand:
.a4bc		a9 42		lda #$42			lda 	#GCMD_Line 						; command ID to use
.a4be		20 cd a4	jsr $a4cd			jsr 	RunGraphicsCommand
.a4c1						ExecuteGraphicCommand:
.a4c1		0d 62 06	ora $0662			ora 	gxCommandID 				; make a full command
.a4c4		20 85 80	jsr $8085			jsr 	GXGraphicDraw 				; draw it and exit
.a4c7		b0 01		bcs $a4ca			bcs 	_EGCError
.a4c9		60		rts				rts
.a4ca						_EGCError:
.a4ca		4c 80 a2	jmp $a280			jmp 	SyntaxError
.a4cd						RunGraphicsCommand:
.a4cd		8d 62 06	sta $0662			sta 	gxCommandID					; save TODO graphics command.
.a4d0		68		pla				pla 								; pop handler address
.a4d1		fa		plx				plx
.a4d2		1a		inc a				inc 	a
.a4d3		d0 01		bne $a4d6			bne 	_RGINoCarry
.a4d5		e8		inx				inx
.a4d6						_RGINoCarry:
.a4d6		8d 67 06	sta $0667			sta 	gxHandler
.a4d9		8e 68 06	stx $0668			stx 	gxHandler+1
.a4dc						_RGICommandLoop:
.a4dc		b1 30		lda ($30),y			lda 	(codePtr),y
.a4de		c8		iny				iny
.a4df		c9 d9		cmp #$d9			cmp 	#KWD_TO						; is it TO x,y
.a4e1		f0 53		beq $a536			beq 	_RGI_To
.a4e3		c9 c1		cmp #$c1			cmp 	#KWD_HERE 					; do it here.
.a4e5		f0 55		beq $a53c			beq 	_RGI_Here
.a4e7		c9 80		cmp #$80			cmp 	#KWC_EOL 					; EOL or : , exit
.a4e9		f0 3d		beq $a528			beq 	_RGI_Exit
.a4eb		c9 3a		cmp #$3a			cmp 	#KWD_COLON
.a4ed		f0 39		beq $a528			beq 	_RGI_Exit
.a4ef		c9 c9		cmp #$c9			cmp 	#KWD_OUTLINE 				; solid or outline
.a4f1		f0 3e		beq $a531			beq 	_RGI_Frame
.a4f3		c9 d5		cmp #$d5			cmp 	#KWD_SOLID
.a4f5		f0 33		beq $a52a			beq 	_RGI_Solid
.a4f7		c9 b1		cmp #$b1			cmp 	#KWD_BY 					; by offset
.a4f9		f0 4b		beq $a546			beq 	_RGI_By
.a4fb		c9 bd		cmp #$bd			cmp 	#KWD_FROM 					; from
.a4fd		f0 17		beq $a516			beq 	_RGI_Move2
.a4ff		c9 ba		cmp #$ba			cmp 	#KWD_DIM 					; dim (set scale)
.a501		f0 62		beq $a565			beq 	_RGI_Dim
.a503		c9 b7		cmp #$b7			cmp 	#KWD_COLOUR 				; colour or Color
.a505		f0 74		beq $a57b			beq 	_RGI_Colour
.a507		c9 b6		cmp #$b6			cmp 	#KWD_COLOR
.a509		f0 70		beq $a57b			beq 	_RGI_Colour
.a50b		ae 62 06	ldx $0662			ldx 	gxCommandID
.a50e		e0 52		cpx #$52			cpx 	#GCMD_SpriteMove 			; if not sprite
.a510		d0 03		bne $a515			bne 	_RGI_Move 					; move
.a512		4c a3 a5	jmp $a5a3			jmp		_RGI_SpriteInstructions
.a515						_RGI_Move:
.a515		88		dey				dey 								; unpick get.
.a516						_RGI_Move2:
.a516		20 c9 a5	jsr $a5c9			jsr 	GCGetCoordinatePair 		; move to here
.a519		20 f0 a5	jsr $a5f0			jsr 	GCCopyPairToStore 			; save
.a51c		5a		phy				phy
.a51d		20 e6 a5	jsr $a5e6			jsr 	GCLoadAXY 					; load in
.a520		09 40		ora #$40			ora 	#GCMD_Move 					; move there
.a522		20 85 80	jsr $8085			jsr 	GXGraphicDraw
.a525		7a		ply				ply
.a526		80 b4		bra $a4dc			bra 	_RGICommandLoop 			; and go round
.a528						_RGI_Exit:
.a528		88		dey				dey 								; unpick : / EOL
.a529		60		rts				rts
.a52a						_RGI_Solid:
.a52a		a9 02		lda #$02			lda 	#2
.a52c		8d 63 06	sta $0663			sta 	gxFillSolid
.a52f		80 ab		bra $a4dc			bra 	_RGICommandLoop
.a531						_RGI_Frame:
.a531		9c 63 06	stz $0663			stz 	gxFillSolid
.a534		80 a6		bra $a4dc			bra 	_RGICommandLoop
.a536						_RGI_To:
.a536		20 c9 a5	jsr $a5c9			jsr 	GCGetCoordinatePair 		; get coordinate pair into slot #1,#2
.a539		20 f0 a5	jsr $a5f0			jsr 	GCCopyPairToStore
.a53c						_RGI_Here:
.a53c		5a		phy				phy
.a53d		20 e6 a5	jsr $a5e6			jsr 	GCLoadAXY 					; load it into AXY
.a540		20 a0 a5	jsr $a5a0			jsr 	_RGICallHandler 			; go do whatever it is.
.a543		7a		ply				ply
.a544		80 96		bra $a4dc			bra 	_RGICommandLoop 			; and go round
.a546						_RGI_By:
.a546		20 d6 a5	jsr $a5d6			jsr 	GCSignedCoordinatePair 		; get coordinate pair into slot #1,#2
.a549		18		clc				clc
.a54a		a5 59		lda $59				lda 	NSMantissa0+1 				; copy it into space.
.a54c		6d 64 06	adc $0664			adc 	gxXPos
.a54f		8d 64 06	sta $0664			sta 	gxXPos
.a552		a5 61		lda $61				lda 	NSMantissa1+1
.a554		6d 65 06	adc $0665			adc 	gxXPos+1
.a557		8d 65 06	sta $0665			sta 	gxXPos+1
.a55a		a5 5a		lda $5a				lda 	NSMantissa0+2
.a55c		18		clc				clc
.a55d		6d 66 06	adc $0666			adc 	gxYPos
.a560		8d 66 06	sta $0666			sta 	gxYPos
.a563		80 d7		bra $a53c			bra 	_RGI_Here
.a565						_RGI_Dim:
.a565		a2 01		ldx #$01			ldx	 	#1
.a567		20 9d a0	jsr $a09d			jsr 	Evaluate8BitInteger
.a56a		a5 59		lda $59				lda 	NSMantissa0+1
.a56c		c9 00		cmp #$00			cmp 	#0
.a56e		f0 2d		beq $a59d			beq 	_RGIRange
.a570		c9 09		cmp #$09			cmp 	#8+1
.a572		b0 29		bcs $a59d			bcs		_RGIRange
.a574		3a		dec a				dec 	a
.a575		8d 69 06	sta $0669			sta 	gxDrawScale
.a578		4c dc a4	jmp $a4dc			jmp 	_RGICommandLoop
.a57b						_RGI_Colour:
.a57b		a2 01		ldx #$01			ldx 	#1 							; colour
.a57d		20 9d a0	jsr $a09d			jsr 	Evaluate8BitInteger
.a580		a2 02		ldx #$02			ldx 	#2 							; default zero for 2nd parameter
.a582		20 02 a1	jsr $a102			jsr 	NSMSetZero
.a585		b1 30		lda ($30),y			lda 	(codePtr),y
.a587		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; check , => mode.
.a589		d0 04		bne $a58f			bne 	_RGICDefaultMode
.a58b		c8		iny				iny
.a58c		20 9d a0	jsr $a09d			jsr 	Evaluate8BitInteger
.a58f						_RGICDefaultMode:
.a58f		5a		phy				phy
.a590		a9 08		lda #$08			lda 	#GCMD_Colour 				; set colour.
.a592		a6 59		ldx $59				ldx 	NSMantissa0+1
.a594		a4 5a		ldy $5a				ldy 	NSMantissa0+2
.a596		20 85 80	jsr $8085			jsr 	GXGraphicDraw
.a599		7a		ply				ply
.a59a		4c dc a4	jmp $a4dc			jmp 	_RGICommandLoop 			; and go round
.a59d						_RGIRange:
.a59d		4c 85 a2	jmp $a285			jmp 	RangeError
.a5a0						_RGICallHandler:
.a5a0		6c 67 06	jmp ($0667)			jmp 	(gxHandler)
.a5a3						_RGI_SpriteInstructions:
.a5a3		c9 c7		cmp #$c7			cmp 	#KWD_OFF
.a5a5		f0 07		beq $a5ae			beq 	_RGISpriteOff
.a5a7		c9 c2		cmp #$c2			cmp 	#KWD_IMAGE
.a5a9		f0 13		beq $a5be			beq 	_RGISetImage
.a5ab		4c 15 a5	jmp $a515			jmp 	_RGI_Move
.a5ae						_RGISpriteOff:
.a5ae		5a		phy				phy
.a5af		a0 01		ldy #$01			ldy 	#1
.a5b1		a2 00		ldx #$00			ldx 	#0
.a5b3						_RGIDoCommandLoop:
.a5b3		a9 10		lda #$10			lda 	#GCMD_SpriteImage
.a5b5		20 85 80	jsr $8085			jsr 	GXGraphicDraw
.a5b8		7a		ply				ply
.a5b9		b0 e2		bcs $a59d			bcs 	_RGIRange
.a5bb		4c dc a4	jmp $a4dc			jmp 	_RGICommandLoop
.a5be						_RGISetImage:
.a5be		a2 01		ldx #$01			ldx 	#1
.a5c0		20 9d a0	jsr $a09d			jsr 	Evaluate8BitInteger
.a5c3		5a		phy				phy
.a5c4		aa		tax				tax
.a5c5		a0 00		ldy #$00			ldy 	#0
.a5c7		80 ea		bra $a5b3			bra 	_RGIDoCommandLoop
.a5c9						GCGetCoordinatePair:
.a5c9		a2 01		ldx #$01			ldx 	#1
.a5cb		20 82 a0	jsr $a082			jsr 	Evaluate16BitInteger
.a5ce		20 a6 91	jsr $91a6			jsr 	CheckComma
.a5d1		e8		inx				inx
.a5d2		20 82 a0	jsr $a082			jsr 	Evaluate16BitInteger
.a5d5		60		rts				rts
.a5d6						GCSignedCoordinatePair:
.a5d6		a2 01		ldx #$01			ldx 	#1
.a5d8		20 8c a0	jsr $a08c			jsr 	Evaluate16BitIntegerSigned
.a5db		20 a6 91	jsr $91a6			jsr 	CheckComma
.a5de		e8		inx				inx
.a5df		20 8c a0	jsr $a08c			jsr 	Evaluate16BitIntegerSigned
.a5e2		60		rts				rts
.a5e3						_GCCPRange:
.a5e3		4c 85 a2	jmp $a285			jmp 	RangeError
.a5e6						GCLoadAXY:
.a5e6		ad 65 06	lda $0665			lda 	gxXPos+1
.a5e9		ae 64 06	ldx $0664			ldx 	gxXPos
.a5ec		ac 66 06	ldy $0666			ldy 	gxYPos
.a5ef		60		rts				rts
.a5f0						GCCopyPairToStore:
.a5f0		a5 59		lda $59				lda 	NSMantissa0+1 				; copy it into space.
.a5f2		8d 64 06	sta $0664			sta 	gxXPos
.a5f5		a5 61		lda $61				lda 	NSMantissa1+1
.a5f7		8d 65 06	sta $0665			sta 	gxXPos+1
.a5fa		a5 5a		lda $5a				lda 	NSMantissa0+2
.a5fc		8d 66 06	sta $0666			sta 	gxYPos
.a5ff		60		rts				rts
.0662						gxCommandID:
>0662								.fill 	1
.0663						gxFillSolid:
>0663								.fill 	1
.0664						gxXPos:
>0664								.fill 	2
.0666						gxYPos:
>0666								.fill 	1
.0667						gxHandler:
>0667								.fill 	2
.0669						gxDrawScale:
>0669								.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/graphics/gcontrol.asm

.a600						BitmapCtrl:
.a600		b1 30		lda ($30),y			lda 	(codePtr),y
.a602		c8		iny				iny
.a603		a2 01		ldx #$01			ldx 	#1
.a605		c9 c8		cmp #$c8			cmp 	#KWD_ON
.a607		f0 11		beq $a61a			beq 	BitmapSwitch
.a609		ca		dex				dex
.a60a		c9 c7		cmp #$c7			cmp 	#KWD_OFF
.a60c		f0 0c		beq $a61a			beq 	BitmapSwitch
.a60e		20 9d a0	jsr $a09d			jsr 	Evaluate8BitInteger 		; get the colour
.a611		5a		phy				phy
.a612		aa		tax				tax
.a613		a9 06		lda #$06			lda 	#GCMD_Clear					; clear to that colour
.a615		20 85 80	jsr $8085			jsr 	GXGraphicDraw
.a618		7a		ply				ply
.a619		60		rts				rts
.a61a						BitmapSwitch:
.a61a		5a		phy				phy
.a61b		a0 00		ldy #$00			ldy 	#0 							; gfx 1,on/off,0
.a61d		a9 02		lda #$02			lda 	#GCMD_BitmapCtl
.a61f		20 85 80	jsr $8085			jsr 	GXGraphicDraw
.a622		a9 08		lda #$08			lda 	#GCMD_Colour				; set colour to $FF
.a624		a0 00		ldy #$00			ldy 	#0
.a626		a2 ff		ldx #$ff			ldx 	#$FF
.a628		20 85 80	jsr $8085			jsr 	GXGraphicDraw
.a62b		9c 63 06	stz $0663			stz 	gxFillSolid
.a62e		9c 64 06	stz $0664			stz 	gxXPos
.a631		9c 65 06	stz $0665			stz 	gxXPos+1
.a634		9c 66 06	stz $0666			stz 	gxYPos
.a637		9c 69 06	stz $0669			stz 	gxDrawScale
.a63a		a9 40		lda #$40			lda 	#GCMD_Move 						; home cursor
.a63c		a2 00		ldx #$00			ldx 	#0
.a63e		a0 00		ldy #$00			ldy 	#0
.a640		20 85 80	jsr $8085			jsr 	GXGraphicDraw
.a643		7a		ply				ply
.a644		60		rts				rts
.a645						SpritesCtrl:
.a645		b1 30		lda ($30),y			lda 	(codePtr),y
.a647		c8		iny				iny
.a648		a2 01		ldx #$01			ldx 	#1
.a64a		c9 c8		cmp #$c8			cmp 	#KWD_ON
.a64c		f0 08		beq $a656			beq 	SpriteSwitch
.a64e		ca		dex				dex
.a64f		c9 c7		cmp #$c7			cmp 	#KWD_OFF
.a651		f0 03		beq $a656			beq 	SpriteSwitch
.a653		4c 80 a2	jmp $a280			jmp 	SyntaxError
.a656						SpriteSwitch:
.a656		5a		phy				phy
.a657		a0 00		ldy #$00			ldy 	#0 							; gfx 2,on/off,0
.a659		a9 04		lda #$04			lda 	#GCMD_SpriteCtl
.a65b		20 85 80	jsr $8085			jsr 	GXGraphicDraw
.a65e		7a		ply				ply
.a65f		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/graphics/gfx.asm

.a660						GfxCommand:
.a660		a2 00		ldx #$00			ldx 	#0
.a662		20 9d a0	jsr $a09d			jsr 	Evaluate8BitInteger 		; command
.a665		20 a6 91	jsr $91a6			jsr 	CheckComma
.a668		e8		inx				inx
.a669		20 82 a0	jsr $a082			jsr 	Evaluate16BitInteger 		; X
.a66c		20 a6 91	jsr $91a6			jsr 	CheckComma
.a66f		e8		inx				inx
.a670		20 9d a0	jsr $a09d			jsr 	Evaluate8BitInteger 		; Y
.a673		a5 61		lda $61				lda 	NSMantissa1+1  				; shift bit 0 of X into CS, should now be zero
.a675		4a		lsr a				lsr 	a
.a676		d0 12		bne $a68a			bne 	_GfxError
.a678		26 58		rol $58				rol 	NSMantissa0 				; rotate into command
.a67a		b0 0e		bcs $a68a			bcs 	_GfxError 					; bit 7 should have been zero
.a67c		5a		phy				phy 								; save pos
.a67d		a5 58		lda $58				lda 	NSMantissa0 				; do the command
.a67f		a6 59		ldx $59				ldx 	NSMantissa0+1
.a681		a4 5a		ldy $5a				ldy 	NSMantissa0+2
.a683		20 85 80	jsr $8085			jsr 	GXGraphicDraw
.a686		b0 02		bcs $a68a			bcs 	_GfxError
.a688		7a		ply				ply 								; restore pos and exit.
.a689		60		rts				rts
.a68a						_GfxError:
.a68a		4c 85 a2	jmp $a285			jmp 	RangeError

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/graphics/hit.asm

.a68d						UnaryHit:
.a68d		fa		plx				plx
.a68e		a9 36		lda #$36			lda 	#zTemp0
.a690		20 9d a0	jsr $a09d			jsr 	Evaluate8BitInteger 		; get sprite number 0
.a693		20 a6 91	jsr $91a6			jsr 	CheckComma
.a696		e8		inx				inx
.a697		20 9d a0	jsr $a09d			jsr 	Evaluate8BitInteger 		; get sprite number 1
.a69a		20 9e 91	jsr $919e			jsr		CheckRightBracket
.a69d		ca		dex				dex 								; fix back up again.
.a69e		da		phx				phx 								; save X/Y
.a69f		5a		phy				phy
.a6a0		b4 59		ldy $59,x			ldy 	NSMantissa0+1,x 			; get the sprite numbers into X/Y
.a6a2		b5 58		lda $58,x			lda 	NSMantissa0,x
.a6a4		aa		tax				tax
.a6a5		a9 12		lda #$12			lda 	#GCMD_SpriteCollide 		; command check collision.
.a6a7		20 85 80	jsr $8085			jsr 	GXGraphicDraw 				; calculate result
.a6aa		1a		inc a				inc 	a 							; so 255 (fail) -> 0, otherwise 1,2,3,4 pixels etc.
.a6ab		7a		ply				ply 								; restore XY
.a6ac		fa		plx				plx
.a6ad		20 04 a1	jsr $a104			jsr 	NSMSetByte 					; return the hit result
.a6b0		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/graphics/palette.asm

.a6b1						PaletteCommand:
.a6b1		a2 00		ldx #$00			ldx 	#0
.a6b3		20 9d a0	jsr $a09d			jsr 	Evaluate8BitInteger 		; colour
.a6b6		20 a6 91	jsr $91a6			jsr 	CheckComma
.a6b9		e8		inx				inx
.a6ba		20 82 a0	jsr $a082			jsr 	Evaluate16BitInteger 		; r
.a6bd		20 a6 91	jsr $91a6			jsr 	CheckComma
.a6c0		e8		inx				inx
.a6c1		20 9d a0	jsr $a09d			jsr 	Evaluate8BitInteger 		; g
.a6c4		20 a6 91	jsr $91a6			jsr 	CheckComma
.a6c7		e8		inx				inx
.a6c8		20 9d a0	jsr $a09d			jsr 	Evaluate8BitInteger 		; b
.a6cb		a5 58		lda $58				lda 	NSMantissa0 				; get colour #
.a6cd		85 36		sta $36				sta 	zTemp0
.a6cf		a9 34		lda #$34			lda 	#$D0 >> 2 					; MSB = D0/4
.a6d1		85 37		sta $37				sta 	zTemp0+1
.a6d3		06 36		asl $36				asl 	zTemp0 						; zTemp = $D000+Colour x 4
.a6d5		26 37		rol $37				rol	 	zTemp0+1
.a6d7		06 36		asl $36				asl 	zTemp0
.a6d9		26 37		rol $37				rol	 	zTemp0+1
.a6db		a9 01		lda #$01			lda 	#1 							; I/O Page 2
.a6dd		85 01		sta $01				sta 	1
.a6df		5a		phy				phy
.a6e0		a5 5b		lda $5b				lda 	NSMantissa0+3 				; fix to r,g,b
.a6e2		92 36		sta ($36)			sta 	(zTemp0)
.a6e4		a0 01		ldy #$01			ldy 	#1
.a6e6		a5 5a		lda $5a				lda 	NSMantissa0+2
.a6e8		91 36		sta ($36),y			sta 	(zTemp0),y
.a6ea		a5 59		lda $59				lda 	NSMantissa0+1
.a6ec		c8		iny				iny
.a6ed		91 36		sta ($36),y			sta 	(zTemp0),y
.a6ef		7a		ply				ply
.a6f0		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/hardware/crossdev.asm

.a6f1						XLoadCommand:
.a6f1		20 0b 8c	jsr $8c0b			jsr 	NewProgram
.a6f4		20 69 83	jsr $8369			jsr 	BackloadProgram
.a6f7		4c 28 84	jmp $8428			jmp 	WarmStart
.a6fa						XGoCommand:
.a6fa		20 0b 8c	jsr $8c0b			jsr 	NewProgram
.a6fd		20 69 83	jsr $8369			jsr 	BackloadProgram
.a700		4c 89 8d	jmp $8d89			jmp 	CommandRUN

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/hardware/event.asm

.a703						UnaryEvent:
.a703		fa		plx				plx
.a704		20 9d a7	jsr $a79d			jsr 	TimerToStackX 				; timer in +0
.a707		e8		inx				inx  								; put reference into +1
.a708		20 05 9b	jsr $9b05			jsr 	EvaluateTerm
.a70b		b5 50		lda $50,x			lda 	NSStatus,x 					; check if is integer reference
.a70d		c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.a70f		d0 4c		bne $a75d			bne 	_UEType
.a711		e8		inx				inx 								; put the step in +2
.a712		20 a6 91	jsr $91a6			jsr 	CheckComma
.a715		20 82 a0	jsr $a082			jsr 	Evaluate16BitInteger
.a718		20 9e 91	jsr $919e			jsr 	CheckRightBracket
.a71b		ca		dex				dex
.a71c		ca		dex				dex
.a71d		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; copy reference to zTemp0
.a71f		85 36		sta $36				sta 	zTemp0
.a721		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.a723		85 37		sta $37				sta 	zTemp0+1
.a725		5a		phy				phy
.a726		a0 03		ldy #$03			ldy 	#3 							; check bit 7 of last bit, the packed sign bit
.a728		b1 36		lda ($36),y			lda 	(zTemp0),y
.a72a		30 2d		bmi $a759			bmi 	_UEFalse 					; exit if signed.
.a72c		a0 00		ldy #$00			ldy 	#0 							; has it timed out (24 bit)
.a72e		b5 58		lda $58,x			lda 	NSMantissa0,x
.a730		d1 36		cmp ($36),y			cmp 	(zTemp0),y
.a732		c8		iny				iny
.a733		b5 60		lda $60,x			lda 	NSMantissa1,x
.a735		f1 36		sbc ($36),y			sbc		(zTemp0),y
.a737		c8		iny				iny
.a738		b5 68		lda $68,x			lda 	NSMantissa2,x
.a73a		f1 36		sbc ($36),y			sbc		(zTemp0),y
.a73c		90 1b		bcc $a759			bcc 	_UEFalse 					; no, return FALSE.
.a73e		18		clc				clc
.a73f		a0 00		ldy #$00			ldy 	#0 							; work out new value as timer() + step
.a741		b5 58		lda $58,x			lda 	NSMantissa0,x
.a743		75 5a		adc $5a,x			adc 	NSMantissa0+2,x
.a745		91 36		sta ($36),y			sta 	(zTemp0),y
.a747		c8		iny				iny
.a748		b5 60		lda $60,x			lda 	NSMantissa1,x
.a74a		75 62		adc $62,x			adc 	NSMantissa1+2,x
.a74c		91 36		sta ($36),y			sta 	(zTemp0),y
.a74e		c8		iny				iny
.a74f		b5 68		lda $68,x			lda 	NSMantissa2,x
.a751		75 6a		adc $6a,x			adc 	NSMantissa2+2,x
.a753		91 36		sta ($36),y			sta 	(zTemp0),y
.a755		7a		ply				ply
.a756		4c 24 92	jmp $9224			jmp 	ReturnTrue
.a759						_UEFalse:
.a759		7a		ply				ply 								; restore Y
.a75a		4c 2f 92	jmp $922f			jmp 	ReturnFalse 				; and return False
.a75d						_UEType:
.a75d		4c 8a a2	jmp $a28a			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/hardware/joy.asm

.a760						UnaryJoyX:
.a760		18		clc				clc
.a761		80 01		bra $a764			bra 	JoyMain
.a763						UnaryJoyY:
.a763		38		sec				sec
.a764						JoyMain:
.a764		fa		plx				plx 								; get pos
.a765		08		php				php 								; save carry (set for Y)
.a766		20 9d a0	jsr $a09d			jsr 	Evaluate8BitInteger 		; ignore the parameter
.a769		20 9e 91	jsr $919e			jsr 	CheckRightBracket
.a76c		20 21 80	jsr $8021			jsr 	EXTReadController 			; read the controller.
.a76f		28		plp				plp
.a770		b0 02		bcs $a774			bcs 	_JMNoShift 					; if X then shift bits 3,2 -> 1,0
.a772		4a		lsr a				lsr 	a
.a773		4a		lsr a				lsr 	a
.a774						_JMNoShift:
.a774		4a		lsr a				lsr 	a 							; if bit 0 set then left/up e.g. -1
.a775		b0 07		bcs $a77e			bcs 	JMIsLeft
.a777		4a		lsr a				lsr 	a 							; if bit 1 set then right/down e.g. +1
.a778		b0 07		bcs $a781			bcs 	JMIsRight
.a77a		20 02 a1	jsr $a102			jsr 	NSMSetZero 					; zero result
.a77d		60		rts				rts
.a77e						JMIsLeft:
.a77e		4c 24 92	jmp $9224			jmp 	ReturnTrue
.a781						JMIsRight:
.a781		a9 01		lda #$01			lda 	#1
.a783		20 04 a1	jsr $a104			jsr 	NSMSetByte
.a786		60		rts				rts
.a787						UnaryJoyB:
.a787		fa		plx				plx 								; get pos
.a788		20 9d a0	jsr $a09d			jsr 	Evaluate8BitInteger 		; ignore the parameter
.a78b		20 9e 91	jsr $919e			jsr 	CheckRightBracket
.a78e		20 21 80	jsr $8021			jsr 	EXTReadController 			; read the controller.
.a791		29 10		and #$10			and 	#$10
.a793		d0 e9		bne $a77e			bne 	JMIsLeft
.a795		20 02 a1	jsr $a102			jsr 	NSMSetZero
.a798		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/hardware/timer.asm

.a799						UnaryTimer:
.a799		fa		plx				plx
.a79a		20 9e 91	jsr $919e			jsr 	CheckRightBracket
.a79d						TimerToStackX:
.a79d		20 02 a1	jsr $a102			jsr 	NSMSetZero 					; zero result
.a7a0		64 01		stz $01				stz 	1 							; access I/O
.a7a2		ad 59 d6	lda $d659			lda 	$D659 						; copy timer in
.a7a5		95 58		sta $58,x			sta 	NSMantissa0,x
.a7a7		ad 5a d6	lda $d65a			lda 	$D65A
.a7aa		95 60		sta $60,x			sta 	NSMantissa1,x
.a7ac		ad 5b d6	lda $d65b			lda 	$D65B
.a7af		95 68		sta $68,x			sta 	NSMantissa2,x
.a7b1		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/kernel/api.asm

>ff00						NextEvent   .fill   4   ; Copy the next event into user-space.
>ff04						ReadData    .fill   4   ; Copy primary bulk event data into user-space
>ff08						ReadExt     .fill   4   ; Copy secondary bolk event data into user-space
>ff0c						Yield       .fill   4   ; Give unused time to the kernel.
>ff10						Putch       .fill   4   ; deprecated
>ff14						Basic       .fill   4   ; deprecated
>ff18						            .fill   4   ; reserved
>ff1c						            .fill   4   ; reserved
>ff20						List        .fill   4   ; Returns a bit-set of available block-accessible devices.
>ff24						GetName     .fill   4   ; Gets the hardware level name of the given block device or media.
>ff28						GetSize     .fill   4   ; Get the number of raw sectors (48 bits) for the given device
>ff2c						Read        .fill   4   ; Read a raw sector (48 bit LBA)
>ff30						Write       .fill   4   ; Write a raw sector (48 bit LBA)
>ff34						Format      .fill   4   ; Perform a low-level format if the media support it.
>ff38						Export      .fill   4   ; Update the FileSystem table with the partition table (if present).
>ff3c						List        .fill   4   ; Returns a bit-set of available logical devices.
>ff40						GetSize     .fill   4   ; Get the size of the partition or logical device in sectors.
>ff44						MkFS        .fill   4   ; Creates a new file-system on the logical device.
>ff48						CheckFS     .fill   4   ; Checks the file-system for errors and corrects them.
>ff4c						Mount       .fill   4   ; Mark the file-system as available for File and Directory operations.
>ff50						Unmount     .fill   4   ; Mark the file-system as unavailable for File and Directory operations.
>ff54						ReadBlock   .fill   4   ; Read a partition-local raw sector on an unmounted device.
>ff58						WriteBlock  .fill   4   ; Write a partition-local raw sector on an unmounted device.
>ff5c						Open        .fill   4   ; Open the given file for read, create, or append.
>ff60						Read        .fill   4   ; Request bytes from a file opened for reading.
>ff64						Write       .fill   4   ; Write bytes to a file opened for create or append.
>ff68						Close       .fill   4   ; Close an open file.
>ff6c						Rename      .fill   4   ; Rename a closed file.
>ff70						Delete      .fill   4   ; Delete a closed file.
>ff74						Open        .fill   4   ; Open a directory for reading.
>ff78						Read        .fill   4   ; Read a directory entry; may also return VOLUME and FREE events.
>ff7c						Close       .fill   4   ; Close a directory once finished reading.
>ff80						            .fill   4   ; call gate
>ff84						GetSize     .fill   4   ; Returns rows/cols in kernel args.
>ff88						DrawRow     .fill   4   ; Draw text/color buffers left-to-right
>ff8c						DrawColumn  .fill   4   ; Draw text/color buffers top-to-bottom
>ff90						GetIP       .fill   4   ; Get the local IP address.
>ff94						SetIP       .fill   4   ; Set the local IP address.
>ff98						GetDNS      .fill   4   ; Get the configured DNS IP address.
>ff9c						SetDNS      .fill   4   ; Set the configured DNS IP address.
>ffa0						GetTime     .fill   4
>ffa4						SetTime     .fill   4
>ffa8						GetSysInfo  .fill   4
>ffac						SetBPS      .fill   4   ; Set the serial BPS (should match the SLIP router's speed).
>ffb0						InitUDP     .fill   4
>ffb4						SendUDP     .fill   4
>ffb8						RecvUDP     .fill   4
>ffbc						InitTCP     .fill   4
>ffc0						SendTCP     .fill   4
>ffc4						RecvTCP     .fill   4
>ffc8						SendICMP    .fill   4
>ffcc						RecvICMP    .fill   4
.00f0						args
.00f0						events
>00f0						dest        .word       ?   ; GetNextEvent copies event data here
>00f2						pending     .byte       ?   ; Negative count of pending events
.00f3						end
.00f3						recv
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.00f3						fs
.00f3						format
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.00f3						mkfs
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.00f3						file
.00f3						open
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>00f5						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.00f3						read
>00f3						stream      .byte       ?
>00f4						buflen      .byte       ?
.00f3						write
>00f3						stream      .byte       ?
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.00f3						close
>00f3						stream      .byte       ?
.00f3						rename
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						old         = args.buf
=$fd						old_len     = args.buflen
=$f8						new         = args.ext
=$fa						new_len     = args.extlen
.00f3						delete
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>00f5						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.00f3						directory
.00f3						open
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
.00f3						read
>00f3						stream      .byte       ?
>00f4						buflen      .byte       ?
.00f3						close
>00f3						stream      .byte       ?
.00f3						display
>00f3						x           .byte       ?   ; coordinate or size
>00f4						y           .byte       ?   ; coordinate or size
=$fb						text        = args.buf      ; text
=$f8						color       = args.ext      ; color
=$fb						buf         = args.buf      ; deprecated
=$f8						buf2        = args.ext      ; deprecated
=$fd						buflen      = args.buflen
.00f3						net
>00f3						socket      .word       ?
>00f5						src_port    .word       ?
>00f7						dest_port   .word       ?
>00f9						dest_ip     .fill       4
>00f5						buf         .word       ?
>00f7						buflen      .byte       ?
>00f8						ext         .word       ?
>00fa						extlen      .byte       ?
=$f8						ext         = $f8
=$fa						extlen      = $fa
=$fb						buf         = $fb
=$fd						buflen      = $fd
=$fe						ptr         = $fe
.0000						args_t
.0000						events
>0000						dest        .word       ?   ; GetNextEvent copies event data here
>0002						pending     .byte       ?   ; Negative count of pending events
.0003						end
.0003						recv
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0003						fs
.0003						format
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0003						mkfs
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0003						file
.0003						open
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0005						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0003						read
>0003						stream      .byte       ?
>0004						buflen      .byte       ?
.0003						write
>0003						stream      .byte       ?
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0003						close
>0003						stream      .byte       ?
.0003						rename
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						old         = args.buf
=$fd						old_len     = args.buflen
=$f8						new         = args.ext
=$fa						new_len     = args.extlen
.0003						delete
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0005						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0003						directory
.0003						open
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
.0003						read
>0003						stream      .byte       ?
>0004						buflen      .byte       ?
.0003						close
>0003						stream      .byte       ?
.0003						display
>0003						x           .byte       ?   ; coordinate or size
>0004						y           .byte       ?   ; coordinate or size
=$fb						text        = args.buf      ; text
=$f8						color       = args.ext      ; color
=$fb						buf         = args.buf      ; deprecated
=$f8						buf2        = args.ext      ; deprecated
=$fd						buflen      = args.buflen
.0003						net
>0003						socket      .word       ?
>0005						src_port    .word       ?
>0007						dest_port   .word       ?
>0009						dest_ip     .fill       4
>0005						buf         .word       ?
>0007						buflen      .byte       ?
>0008						ext         .word       ?
>000a						extlen      .byte       ?
=$f8						ext         = $f8
=$fa						extlen      = $fa
=$fb						buf         = $fb
=$fd						buflen      = $fd
=$fe						ptr         = $fe
.0000						event_t
>0000						dest        .word       ?   ; GetNextEvent copies event data here
>0002						pending     .byte       ?   ; Negative count of pending events
.0003						end
.0000						recv_t
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0000						fs_t
.0000						format
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0000						mkfs
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0000						fs_mkfs_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0000						file_t
.0000						open
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0002						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0000						read
>0000						stream      .byte       ?
>0001						buflen      .byte       ?
.0000						write
>0000						stream      .byte       ?
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0000						close
>0000						stream      .byte       ?
.0000						rename
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						old         = args.buf
=$fd						old_len     = args.buflen
=$f8						new         = args.ext
=$fa						new_len     = args.extlen
.0000						delete
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0002						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0000						fs_open_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0002						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0000						fs_read_t
>0000						stream      .byte       ?
>0001						buflen      .byte       ?
.0000						fs_write_t
>0000						stream      .byte       ?
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0000						fs_close_t
>0000						stream      .byte       ?
.0000						fs_rename_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						old         = args.buf
=$fd						old_len     = args.buflen
=$f8						new         = args.ext
=$fa						new_len     = args.extlen
.0000						fs_delete_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fnane       = args.buf
=$fd						fname_len   = args.buflen
.0000						dir_t
.0000						open
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
.0000						read
>0000						stream      .byte       ?
>0001						buflen      .byte       ?
.0000						close
>0000						stream      .byte       ?
.0000						dir_open_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
.0000						dir_read_t
>0000						stream      .byte       ?
>0001						buflen      .byte       ?
.0000						dir_close_t
>0000						stream      .byte       ?
.0000						display_t
>0000						x           .byte       ?   ; coordinate or size
>0001						y           .byte       ?   ; coordinate or size
=$fb						text        = args.buf      ; text
=$f8						color       = args.ext      ; color
=$fb						buf         = args.buf      ; deprecated
=$f8						buf2        = args.ext      ; deprecated
=$fd						buflen      = args.buflen
.0000						net_t
>0000						socket      .word       ?
>0002						src_port    .word       ?
>0004						dest_port   .word       ?
>0006						dest_ip     .fill       4
>0002						buf         .word       ?
>0004						buflen      .byte       ?
>0005						ext         .word       ?
>0007						extlen      .byte       ?
>0000						            .word   ?   ; Reserved
>0002						            .word   ?   ; Deprecated
>0004						GAME        .word   ?   ; Game Controller changes.
>0006						DEVICE      .word   ?   ; Device added/removed.
>0008						PRESSED     .word   ?   ; Key pressed
>000a						RELEASED    .word   ?   ; Key released.
>000c						DELTA       .word   ?   ; Regular mouse move and button state
>000e						CLICKS      .word   ?   ; Click counts
>0010						NAME        .word   ?
>0012						SIZE        .word   ?
>0014						DATA        .word   ?   ; The read request has succeeded.
>0016						WROTE       .word   ?   ; The write request has completed.
>0018						FORMATTED   .word   ?   ; The low-level format has completed.
>001a						ERROR       .word   ?
>001c						SIZE        .word   ?
>001e						CREATED     .word   ?
>0020						CHECKED     .word   ?
>0022						DATA        .word   ?   ; The read request has succeeded.
>0024						WROTE       .word   ?   ; The write request has completed.
>0026						ERROR       .word   ?
>0028						NOT_FOUND   .word   ?   ; The file file was not found.
>002a						OPENED      .word   ?   ; The file was successfully opened.
>002c						DATA        .word   ?   ; The read request has succeeded.
>002e						WROTE       .word   ?   ; The write request has completed.
>0030						EOF         .word   ?   ; All file data has been read.
>0032						CLOSED      .word   ?   ; The close request has completed.
>0034						RENAMED     .word   ?   ; The rename request has completed.
>0036						DELETED     .word   ?   ; The delete request has completed.
>0038						ERROR       .word   ?   ; An error occured; close the file if opened.
>003a						OPENED      .word   ?   ; The directory open request succeeded.
>003c						VOLUME      .word   ?   ; A volume record was found.
>003e						FILE        .word   ?   ; A file record was found.
>0040						FREE        .word   ?   ; A file-system free-space record was found.
>0042						EOF         .word   ?   ; All data has been read.
>0044						CLOSED      .word   ?   ; The directory file has been closed.
>0046						ERROR       .word   ?   ; An error occured; user should close.
>0048						TCP         .word   ?
>004a						UDP         .word   ?
.0000						event_t
>0000						type        .byte   ?   ; Enum above
>0001						buf         .byte   ?   ; page id or zero
>0002						ext         .byte   ?   ; page id or zero
.0003						key
>0003						keyboard    .byte   ?   ; Keyboard ID
>0004						raw         .byte   ?   ; Raw key ID
>0005						ascii       .byte   ?   ; ASCII value
>0006						flags       .byte   ?   ; Flags (META)
=$80						META        = $80       ; Meta key; no associated ASCII value.
.0003						mouse
.0003						delta
>0003						x           .byte   ?
>0004						y           .byte   ?
>0005						z           .byte   ?
>0006						buttons     .byte   ?
.0003						clicks
>0003						inner       .byte   ?
>0004						middle      .byte   ?
>0005						outer       .byte   ?
.0003						udp
>0003						token       .byte   ?   ; TODO: break out into fields
.0003						file
>0003						stream      .byte   ?
>0004						cookie      .byte   ?
.0005						data
>0005						requested   .byte   ?   ; Requested number of bytes to read
>0006						read        .byte   ?   ; Number of bytes actually read
.0005						wrote
>0005						requested   .byte   ?   ; Requested number of bytes to read
>0006						wrote       .byte   ?   ; Number of bytes actually read
.0003						directory
>0003						stream      .byte   ?
>0004						cookie      .byte   ?
.0005						volume
>0005						len         .byte   ?   ; Length of volname (in buf)
>0006						flags       .byte   ?   ; block size, text encoding
.0005						file
>0005						len         .byte   ?
>0006						flags       .byte   ?   ; block scale, text encoding, approx size
.0005						free
>0005						flags       .byte   ?   ; block scale, text encoding, approx size
.0000						key_t
>0000						keyboard    .byte   ?   ; Keyboard ID
>0001						raw         .byte   ?   ; Raw key ID
>0002						ascii       .byte   ?   ; ASCII value
>0003						flags       .byte   ?   ; Flags (META)
=$80						META        = $80       ; Meta key; no associated ASCII value.
.0000						mouse_t
.0000						delta
>0000						x           .byte   ?
>0001						y           .byte   ?
>0002						z           .byte   ?
>0003						buttons     .byte   ?
.0000						clicks
>0000						inner       .byte   ?
>0001						middle      .byte   ?
>0002						outer       .byte   ?
.0000						m_delta_t
>0000						x           .byte   ?
>0001						y           .byte   ?
>0002						z           .byte   ?
>0003						buttons     .byte   ?
.0000						m_clicks_t
>0000						inner       .byte   ?
>0001						middle      .byte   ?
>0002						outer       .byte   ?
.0000						file_t
>0000						stream      .byte   ?
>0001						cookie      .byte   ?
.0002						data
>0002						requested   .byte   ?   ; Requested number of bytes to read
>0003						read        .byte   ?   ; Number of bytes actually read
.0002						wrote
>0002						requested   .byte   ?   ; Requested number of bytes to read
>0003						wrote       .byte   ?   ; Number of bytes actually read
.0000						fs_data_t
>0000						requested   .byte   ?   ; Requested number of bytes to read
>0001						read        .byte   ?   ; Number of bytes actually read
.0000						fs_wrote_t
>0000						requested   .byte   ?   ; Requested number of bytes to read
>0001						wrote       .byte   ?   ; Number of bytes actually read
.0000						dir_t
>0000						stream      .byte   ?
>0001						cookie      .byte   ?
.0002						volume
>0002						len         .byte   ?   ; Length of volname (in buf)
>0003						flags       .byte   ?   ; block size, text encoding
.0002						file
>0002						len         .byte   ?
>0003						flags       .byte   ?   ; block scale, text encoding, approx size
.0002						free
>0002						flags       .byte   ?   ; block scale, text encoding, approx size
.0000						dir_vol_t
>0000						len         .byte   ?   ; Length of volname (in buf)
>0001						flags       .byte   ?   ; block size, text encoding
.0000						dir_file_t
>0000						len         .byte   ?
>0001						flags       .byte   ?   ; block scale, text encoding, approx size
.0000						dir_free_t
>0000						flags       .byte   ?   ; block scale, text encoding, approx size
.0000						dir_ext_t
>0000						free        .fill   6   ; blocks used/free
.0000						udp_t
>0000						token       .byte   ?   ; TODO: break out into fields

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/delete.asm

.a7b2						MemoryDeleteLine:
.a7b2		20 d1 a7	jsr $a7d1			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.a7b5		b2 30		lda ($30)			lda 	(codePtr) 					; size to delete => y
.a7b7		a8		tay				tay
.a7b8						_MDDLLoop:
.a7b8		b1 30		lda ($30),y			lda 	(codePtr),y 				; copy down
.a7ba		92 30		sta ($30)			sta 	(codePtr)
.a7bc		a5 30		lda $30				lda 	codePtr 					; check done the lot.
.a7be		c5 3a		cmp $3a				cmp 	zTemp2 						; has codePtr (copyFrom) reached the last byte to copy.
.a7c0		d0 07		bne $a7c9			bne 	_MDLDLNext
.a7c2		a5 31		lda $31				lda 	codePtr+1
.a7c4		c5 3b		cmp $3b				cmp 	zTemp2+1
.a7c6		d0 01		bne $a7c9			bne 	_MDLDLNext
.a7c8						_MDDLExit:
.a7c8		60		rts				rts
.a7c9						_MDLDLNext:
.a7c9		e6 30		inc $30				inc 	codePtr						; next byte
.a7cb		d0 eb		bne $a7b8			bne 	_MDDLLoop
.a7cd		e6 31		inc $31				inc 	codePtr+1
.a7cf		80 e7		bra $a7b8			bra 	_MDDLLoop
.a7d1						IMemoryFindEnd:
.a7d1		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a7d3		85 3a		sta $3a				sta 	0+zTemp2
.a7d5		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a7d7		85 3b		sta $3b				sta 	1+zTemp2
.a7d9						_MDLFELoop:
.a7d9		b2 3a		lda ($3a)			lda 	(zTemp2) 					; scan forward using offsets.
.a7db		f0 0b		beq $a7e8			beq 	_MDLFEExit
.a7dd		18		clc				clc
.a7de		65 3a		adc $3a				adc 	zTemp2
.a7e0		85 3a		sta $3a				sta 	zTemp2
.a7e2		90 f5		bcc $a7d9			bcc 	_MDLFELoop
.a7e4		e6 3b		inc $3b				inc 	zTemp2+1
.a7e6		80 f1		bra $a7d9			bra 	_MDLFELoop
.a7e8						_MDLFEExit:
.a7e8		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/insert.asm

.a7e9						MemoryInsertLine:
.a7e9		08		php				php
.a7ea		20 d1 a7	jsr $a7d1			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.a7ed		a5 3b		lda $3b				lda 	zTemp2+1 					; is there space for the new line ?
.a7ef		1a		inc a				inc 	a
.a7f0		c9 7f		cmp #$7f			cmp 	#(BasicEnd >> 8)-1
.a7f2		b0 36		bcs $a82a			bcs 	_MDLIError 					; no, fail.
.a7f4		28		plp				plp 								; do at a specific point or the end ?
.a7f5		90 08		bcc $a7ff			bcc 	_MDLIFound 					; if specific point already set.
.a7f7		a5 3a		lda $3a				lda 	zTemp2 						; if CS on entry append, so put on the
.a7f9		85 30		sta $30				sta 	codePtr 					; end.
.a7fb		a5 3b		lda $3b				lda 	zTemp2+1
.a7fd		85 31		sta $31				sta 	codePtr+1
.a7ff						_MDLIFound:
.a7ff		ad 2a 04	lda $042a			lda 	tokenOffset 				; insert gap in Y, the offset, e.g. length of the new line
.a802		a8		tay				tay
.a803						_MDLIInsert:
.a803		b2 3a		lda ($3a)			lda 	(zTemp2) 					; shift one byte up , at least one covers end case (copying link 0)
.a805		91 3a		sta ($3a),y			sta 	(zTemp2),y 					; work from top down.
.a807		a5 30		lda $30				lda 	codePtr 					; reached insert point ?
.a809		c5 3a		cmp $3a				cmp 	zTemp2
.a80b		d0 06		bne $a813			bne 	_MDLINext
.a80d		a5 31		lda $31				lda 	codePtr+1
.a80f		c5 3b		cmp $3b				cmp 	zTemp2+1
.a811		f0 0a		beq $a81d			beq 	_MDLIHaveSpace
.a813						_MDLINext:
.a813		a5 3a		lda $3a				lda 	zTemp2 						; if no, keep zTemp2 going backwards opening up space.
.a815		d0 02		bne $a819			bne 	_MDLINoBorrow
.a817		c6 3b		dec $3b				dec 	zTemp2+1
.a819						_MDLINoBorrow:
.a819		c6 3a		dec $3a				dec 	zTemp2
.a81b		80 e6		bra $a803			bra 	_MDLIInsert
.a81d						_MDLIHaveSpace:
.a81d		ac 2a 04	ldy $042a			ldy 	tokenOffset 				; bytes to copy
.a820		88		dey				dey 								; from offset-1 (last written) to the end of the buffer.
.a821						_MDLICopy:
.a821		b9 2a 04	lda $042a,y			lda 	tokenOffset,y
.a824		91 30		sta ($30),y			sta 	(codePtr),y
.a826		88		dey				dey
.a827		10 f8		bpl $a821			bpl 	_MDLICopy
.a829		60		rts				rts
.a82a						_MDLIError:
.a82a		a9 06		lda #$06		lda	#6
.a82c		4c b7 91	jmp $91b7		jmp	ErrorHandler
.a82f						MDLAppendLine:
.a82f		86 37		stx $37				stx 	zTemp0+1 					; save new line at zTemp0
.a831		85 36		sta $36				sta 	zTemp0
.a833		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a835		85 38		sta $38				sta 	0+zTemp1
.a837		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a839		85 39		sta $39				sta 	1+zTemp1
.a83b		b2 38		lda ($38)			lda 	(zTemp1)
.a83d		d0 0a		bne $a849			bne 	_MDLANoInitialise
.a83f		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a841		8d 6a 06	sta $066a			sta 	0+AppendPointer
.a844		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a846		8d 6b 06	sta $066b			sta 	1+AppendPointer
.a849						_MDLANoInitialise:
.a849		18		clc				clc
.a84a		ad 6a 06	lda $066a			lda 	AppendPointer 				; copy append pointer to zTemp1 adding the offset as you go
.a84d		85 38		sta $38				sta 	zTemp1
.a84f		72 36		adc ($36)			adc 	(zTemp0)
.a851		8d 6a 06	sta $066a			sta 	AppendPointer
.a854		ad 6b 06	lda $066b			lda 	AppendPointer+1
.a857		85 39		sta $39				sta 	zTemp1+1
.a859		69 00		adc #$00			adc 	#0
.a85b		8d 6b 06	sta $066b			sta 	AppendPointer+1
.a85e		a0 00		ldy #$00			ldy 	#0
.a860						_MDLACopy:
.a860		b1 36		lda ($36),y			lda 	(zTemp0),y 					; copy new line in
.a862		91 38		sta ($38),y			sta 	(zTemp1),y
.a864		c8		iny				iny
.a865		98		tya				tya
.a866		d2 36		cmp ($36)			cmp 	(zTemp0) 					; done whole line
.a868		d0 f6		bne $a860			bne 	_MDLACopy
.a86a		a9 00		lda #$00			lda 	#0 							; end of program.
.a86c		91 38		sta ($38),y			sta 	(zTemp1),y
.a86e		60		rts				rts
.066a						AppendPointer:
>066a								.fill 	2

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/memory.asm

.a86f						MemoryNew:
.a86f		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a871		85 30		sta $30				sta 	codePtr
.a873		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a875		85 31		sta $31				sta 	codePtr+1
.a877		a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.a879		92 30		sta ($30)			sta 	(codePtr)
.a87b		60		rts				rts
.a87c						MemoryInline:
.a87c		98		tya				tya 								; put address into stack,x
.a87d		18		clc				clc  								; get the offset, add codePtr
.a87e		65 30		adc $30				adc 	codePtr
.a880		95 58		sta $58,x			sta 	NSMantissa0,x 				; store the result in the mantissa.
.a882		a5 31		lda $31				lda 	codePtr+1
.a884		69 00		adc #$00			adc 	#0
.a886		95 60		sta $60,x			sta 	NSMantissa1,x
.a888		74 68		stz $68,x			stz 	NSMantissa2,x
.a88a		74 70		stz $70,x			stz 	NSMantissa3,x
.a88c		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/search.asm

.a88d						MemorySearch:
.a88d		85 36		sta $36				sta 	zTemp0 						; save line number in zTemp0
.a88f		86 37		stx $37				stx 	zTemp0+1
.a891		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a893		85 30		sta $30				sta 	codePtr
.a895		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a897		85 31		sta $31				sta 	codePtr+1
.a899						_MTAXLoop:
.a899		b2 30		lda ($30)			lda 	(codePtr)
.a89b		18		clc				clc
.a89c		f0 21		beq $a8bf			beq 	_MTAXExit 					; reached end, exit with CC.
.a89e		a0 01		ldy #$01			ldy 	#1 							; calculate current line# - requested line#
.a8a0		b1 30		lda ($30),y			lda 	(codePtr),y
.a8a2		38		sec				sec
.a8a3		e5 36		sbc $36				sbc 	zTemp0
.a8a5		85 38		sta $38				sta 	zTemp1 						; save interim to set Z
.a8a7		c8		iny				iny 								; do the MSB
.a8a8		b1 30		lda ($30),y			lda 	(codePtr),y
.a8aa		e5 37		sbc $37				sbc 	zTemp0+1
.a8ac		05 38		ora $38				ora 	zTemp1 						; will set Z if result is zero, doesn't affect carry flag
.a8ae		f0 0f		beq $a8bf			beq 	_MTAXExit	 				; found so exit (CS will be set)
.a8b0		b0 0d		bcs $a8bf			bcs 	_MTAXExit 					; current < required exit
.a8b2		18		clc				clc
.a8b3		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.a8b5		65 30		adc $30				adc 	codePtr
.a8b7		85 30		sta $30				sta 	codePtr
.a8b9		90 02		bcc $a8bd			bcc 	_CREExit
.a8bb		e6 31		inc $31				inc 	codePtr+1 					; carry
.a8bd						_CREExit:
.a8bd		80 da		bra $a899			bra 	_MTAXLoop
.a8bf						_MTAXExit:
.a8bf		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./font_update/newfont.asm

.a8c0						UpdateFont:
.a8c0		a5 01		lda $01				lda 	1 							; save position
.a8c2		48		pha				pha
.a8c3		a9 01		lda #$01			lda 	#1 							; switch to I/O block 1
.a8c5		85 01		sta $01				sta 	1
.a8c7		a9 ee		lda #$ee			lda 	#((FontBinary) & $FF)
.a8c9		85 36		sta $36				sta 	0+zTemp0
.a8cb		a9 a8		lda #$a8			lda 	#((FontBinary) >> 8)
.a8cd		85 37		sta $37				sta 	1+zTemp0
.a8cf		a9 00		lda #$00			lda 	#(($C000) & $FF)
.a8d1		85 38		sta $38				sta 	0+zTemp1
.a8d3		a9 c0		lda #$c0			lda 	#(($C000) >> 8)
.a8d5		85 39		sta $39				sta 	1+zTemp1
.a8d7						_UFCopy1:
.a8d7		a0 00		ldy #$00			ldy 	#0
.a8d9						_UFCopy2:
.a8d9		b1 36		lda ($36),y			lda 	(zTemp0),y
.a8db		91 38		sta ($38),y			sta 	(zTemp1),y
.a8dd		c8		iny				iny
.a8de		d0 f9		bne $a8d9			bne 	_UFCopy2
.a8e0		e6 37		inc $37				inc 	zTemp0+1
.a8e2		e6 39		inc $39				inc 	zTemp1+1
.a8e4		a5 39		lda $39				lda 	zTemp1+1
.a8e6		c9 c8		cmp #$c8			cmp 	#$C8
.a8e8		d0 ed		bne $a8d7			bne 	_UFCopy1
.a8ea		68		pla				pla 								; restore.
.a8eb		85 01		sta $01				sta 	1
.a8ed		60		rts				rts

;******  Processing file: ./font_update/../common/generated/font.dat

.a8ee						FontBinary:
>a8ee		06 09 10 3c 10 21 7e 00			.byte	$06,$09,$10,$3c,$10,$21,$7e,$00,$00,$00,$00,$00,$00,$00,$ff,$ff,$00,$00,$00,$00,$00,$ff,$ff,$ff,$00,$00,$00,$00,$ff,$ff,$ff,$ff,$00,$00,$00,$ff,$ff,$ff,$ff,$ff,$00,$00,$ff,$ff,$ff,$ff,$ff,$ff,$00,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$00,$ff,$ff,$ff,$ff,$ff,$ff,$00,$00,$ff,$ff,$ff,$ff,$ff,$00,$00,$00,$ff,$ff,$ff,$ff,$00,$00,$00,$00,$ff,$ff,$ff,$00,$00,$00,$00,$00,$ff,$ff,$00,$00,$00,$00,$00,$00,$ff,$00,$00,$00,$00,$00,$00,$00,$08,$00,$22,$00,$08,$00,$02,$00,$88,$00,$22,$00,$88,$00,$22,$00,$8a,$00,$2a,$00,$8a,$00,$2a,$00,$aa,$00,$aa,$00,$aa,$00,$aa,$00,$aa,$05,$aa,$11,$aa,$05,$aa,$11,$aa,$5f,$aa,$77,$aa,$5f,$aa,$77,$aa,$ff,$aa,$ff,$aa,$ff,$aa,$ff,$af,$ff,$bb,$ff,$af,$ff,$bb,$ff,$77,$ff,$dd,$ff,$77,$ff,$dd,$ff,$7f,$ff,$df,$ff,$77,$ff,$df,$ff,$ff,$ff,$df,$ff,$77,$ff,$dd,$ff,$bb,$ff,$ee,$ff,$aa,$ff,$aa,$ff,$aa,$ff,$aa,$77,$aa,$dd,$aa,$55,$aa,$55,$22,$55,$88,$55,$00,$55,$aa,$00,$aa,$00,$88,$00,$22,$00,$33,$99,$cc,$66,$33,$99,$cc,$66,$cc,$99,$33,$66,$cc,$99,$33,$66,$00,$00,$00,$00,$00,$00,$00,$00,$08,$08,$08,$08,$00,$00,$08,$00,$24,$24,$24,$00,$00,$00,$00,$00,$24,$24,$7e,$24,$7e,$24,$24,$00,$08,$1e,$28,$1c,$0a,$3c,$08,$00,$00,$62,$64,$08,$10,$26,$46,$00,$30,$48,$48,$30,$4a,$44,$3a,$00,$08,$08,$08,$00,$00,$00,$00,$00,$04,$08,$10,$10,$10,$08,$04,$00,$20,$10,$08,$08,$08,$10,$20,$00,$00,$2a,$1c,$3e,$1c,$2a,$00,$00,$00,$08,$08,$3e,$08,$08,$00,$00,$00,$00,$00,$00,$00,$08,$08,$10,$00,$00,$00,$7e,$00,$00,$00,$00,$00,$00,$00,$00,$00,$18,$18,$00,$00,$02,$04,$08,$10,$20,$40,$00,$3c,$42,$46,$5a,$62,$42,$3c,$00,$08,$18,$08,$08,$08,$08,$1c,$00,$3c,$42,$02,$3c,$40,$40,$7e,$00,$3c,$42,$02,$1c,$02,$42,$3c,$00,$04,$44,$44,$44,$7e,$04,$04,$00,$7e,$40,$40,$7c,$02,$02,$7c,$00,$3c,$40,$40,$7c,$42,$42,$3c,$00,$7e,$42,$04,$08,$10,$10,$10,$00,$3c,$42,$42,$3c,$42,$42,$3c,$00,$3c,$42,$42,$3e,$02,$02,$3c,$00,$00,$00,$08,$00,$00,$08,$00,$00,$00,$00,$08,$00,$00,$08,$08,$10,$08,$10,$20,$40,$20,$10,$08,$00,$00,$00,$7e,$00,$7e,$00,$00,$00,$10,$08,$04,$02,$04,$08,$10,$00,$3c,$42,$02,$0c,$10,$00,$10,$00,$3c,$42,$4e,$52,$4e,$40,$3c,$00,$3c,$42,$42,$7e,$42,$42,$42,$00,$7c,$42,$42,$7c,$42,$42,$7c,$00,$3c,$42,$40,$40,$40,$42,$3c,$00,$78,$44,$42,$42,$42,$44,$78,$00,$7e,$40,$40,$78,$40,$40,$7e,$00,$7e,$40,$40,$78,$40,$40,$40,$00,$3c,$42,$40,$4e,$42,$42,$3c,$00,$42,$42,$42,$7e,$42,$42,$42,$00,$1c,$08,$08,$08,$08,$08,$1c,$00,$0e,$04,$04,$04,$04,$44,$38,$00,$42,$44,$48,$70,$48,$44,$42,$00,$40,$40,$40,$40,$40,$40,$7e,$00,$41,$63,$55,$49,$41,$41,$41,$00,$42,$62,$52,$4a,$46,$42,$42,$00,$3c,$42,$42,$42,$42,$42,$3c,$00,$7c,$42,$42,$7c,$40,$40,$40,$00,$3c,$42,$42,$42,$4a,$44,$3a,$00,$7c,$42,$42,$7c,$48,$44,$42,$00,$3c,$42,$40,$3c,$02,$42,$3c,$00,$3e,$08,$08,$08,$08,$08,$08,$00,$42,$42,$42,$42,$42,$42,$3c,$00,$41,$41,$41,$22,$22,$14,$08,$00,$41,$41,$41,$49,$55,$63,$41,$00,$42,$42,$24,$18,$24,$42,$42,$00,$41,$22,$14,$08,$08,$08,$08,$00,$7f,$02,$04,$08,$10,$20,$7f,$00,$3c,$20,$20,$20,$20,$20,$3c,$00,$00,$40,$20,$10,$08,$04,$02,$00,$3c,$04,$04,$04,$04,$04,$3c,$00,$00,$08,$14,$22,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$ff,$10,$08,$04,$00,$00,$00,$00,$00,$00,$00,$3c,$02,$3e,$42,$3e,$00,$40,$40,$7c,$42,$42,$42,$7c,$00,$00,$00,$3c,$42,$40,$42,$3c,$00,$02,$02,$3e,$42,$42,$42,$3e,$00,$00,$00,$3c,$42,$7e,$40,$3c,$00,$0c,$10,$10,$7c,$10,$10,$10,$00,$00,$00,$3e,$42,$42,$3e,$02,$3c,$40,$40,$7c,$42,$42,$42,$42,$00,$08,$00,$18,$08,$08,$08,$08,$00,$04,$00,$0c,$04,$04,$04,$04,$38,$40,$40,$44,$48,$50,$68,$44,$00,$18,$08,$08,$08,$08,$08,$1c,$00,$00,$00,$76,$49,$49,$49,$49,$00,$00,$00,$7c,$42,$42,$42,$42,$00,$00,$00,$3c,$42,$42,$42,$3c,$00,$00,$00,$7c,$42,$42,$7c,$40,$40,$00,$00,$3e,$42,$42,$3e,$02,$02,$00,$00,$5c,$60,$40,$40,$40,$00,$00,$00,$3e,$40,$3c,$02,$7c,$00,$10,$10,$7c,$10,$10,$10,$0c,$00,$00,$00,$42,$42,$42,$46,$3a,$00,$00,$00,$42,$42,$42,$24,$18,$00,$00,$00,$41,$49,$49,$49,$36,$00,$00,$00,$42,$24,$18,$24,$42,$00,$00,$00,$42,$42,$42,$3e,$02,$3c,$00,$00,$7e,$04,$18,$20,$7e,$00,$0c,$10,$10,$20,$10,$10,$0c,$00,$10,$10,$10,$10,$10,$10,$10,$00,$60,$10,$10,$08,$10,$10,$60,$00,$00,$00,$30,$49,$06,$00,$00,$00,$08,$04,$04,$08,$10,$10,$08,$00,$02,$02,$02,$02,$02,$02,$02,$02,$04,$04,$04,$04,$04,$04,$04,$04,$08,$08,$08,$08,$08,$08,$08,$08,$10,$10,$10,$10,$10,$10,$10,$10,$20,$20,$20,$20,$20,$20,$20,$20,$40,$40,$40,$40,$40,$40,$40,$40,$80,$80,$80,$80,$80,$80,$80,$80,$c0,$c0,$c0,$c0,$c0,$c0,$c0,$c0,$e0,$e0,$e0,$e0,$e0,$e0,$e0,$e0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f8,$f8,$f8,$f8,$f8,$f8,$f8,$f8,$fc,$fc,$fc,$fc,$fc,$fc,$fc,$fc,$fe,$fe,$fe,$fe,$fe,$fe,$fe,$fe,$7f,$7f,$7f,$7f,$7f,$7f,$7f,$7f,$3f,$3f,$3f,$3f,$3f,$3f,$3f,$3f,$1f,$1f,$1f,$1f,$1f,$1f,$1f,$1f,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$07,$07,$07,$07,$07,$07,$07,$07,$03,$03,$03,$03,$03,$03,$03,$03,$01,$01,$01,$01,$01,$01,$01,$01,$00,$00,$00,$00,$00,$00,$ff,$00,$00,$00,$00,$00,$00,$ff,$00,$00,$00,$00,$00,$00,$ff,$00,$00,$00,$00,$00,$00,$ff,$00,$00,$00,$00,$00,$00,$ff,$00,$00,$00,$00,$00,$00,$ff,$00,$00,$00,$00,$00,$00,$08,$08,$08,$08,$0f,$08,$08,$08,$00,$00,$00,$00,$ff,$08,$08,$08,$08,$08,$08,$08,$ff,$08,$08,$08,$08,$08,$08,$08,$ff,$00,$00,$00,$08,$08,$08,$08,$f8,$08,$08,$08,$81,$42,$24,$18,$18,$24,$42,$81,$00,$00,$00,$00,$0f,$08,$08,$08,$00,$00,$00,$00,$f8,$08,$08,$08,$08,$08,$08,$08,$0f,$00,$00,$00,$08,$08,$08,$08,$f8,$00,$00,$00,$18,$18,$18,$1f,$1f,$18,$18,$18,$00,$00,$00,$ff,$ff,$18,$18,$18,$18,$18,$18,$ff,$ff,$18,$18,$18,$18,$18,$18,$ff,$ff,$00,$00,$00,$18,$18,$18,$f8,$f8,$18,$18,$18,$00,$00,$00,$1f,$1f,$18,$18,$18,$00,$00,$00,$f8,$f8,$18,$18,$18,$18,$18,$18,$1f,$1f,$00,$00,$00,$18,$18,$18,$f8,$f8,$00,$00,$00,$00,$00,$00,$ff,$ff,$00,$00,$00,$18,$18,$18,$18,$18,$18,$18,$18,$00,$00,$00,$00,$03,$07,$0f,$0f,$00,$00,$00,$00,$c0,$e0,$f0,$f0,$0f,$0f,$07,$03,$00,$00,$00,$00,$f0,$f0,$e0,$c0,$00,$00,$00,$00,$00,$7e,$7e,$7e,$7e,$7e,$7e,$00,$00,$00,$3c,$3c,$3c,$3c,$00,$00,$00,$00,$00,$18,$18,$00,$00,$00,$00,$00,$00,$00,$08,$00,$00,$00,$00,$3c,$7e,$7e,$7e,$7e,$3c,$00,$00,$00,$18,$3c,$3c,$18,$00,$00,$00,$3c,$42,$42,$42,$42,$3c,$00,$00,$3c,$42,$5a,$5a,$42,$3c,$00,$ff,$81,$81,$81,$81,$81,$81,$ff,$00,$00,$03,$06,$6c,$38,$10,$00,$00,$00,$7e,$00,$7e,$00,$7e,$00,$00,$00,$00,$00,$03,$04,$08,$08,$00,$00,$00,$00,$e0,$10,$08,$08,$00,$00,$00,$00,$00,$00,$00,$55,$00,$00,$00,$00,$00,$00,$aa,$55,$00,$00,$00,$00,$00,$55,$aa,$55,$00,$00,$00,$00,$aa,$55,$aa,$55,$00,$00,$00,$55,$aa,$55,$aa,$55,$00,$00,$aa,$55,$aa,$55,$aa,$55,$00,$55,$aa,$55,$aa,$55,$aa,$55,$aa,$55,$aa,$55,$aa,$55,$aa,$55,$aa,$55,$aa,$55,$aa,$55,$aa,$00,$aa,$55,$aa,$55,$aa,$55,$00,$00,$aa,$55,$aa,$55,$aa,$00,$00,$00,$aa,$55,$aa,$55,$00,$00,$00,$00,$aa,$55,$aa,$00,$00,$00,$00,$00,$aa,$55,$00,$00,$00,$00,$00,$00,$aa,$00,$00,$00,$00,$00,$00,$00,$80,$00,$80,$00,$80,$00,$80,$00,$80,$40,$80,$40,$80,$40,$80,$40,$a0,$40,$a0,$40,$a0,$40,$a0,$40,$a0,$50,$a0,$50,$a0,$50,$a0,$50,$a8,$50,$a8,$50,$a8,$50,$a8,$50,$a8,$54,$a8,$54,$a8,$54,$a8,$54,$aa,$54,$aa,$54,$aa,$54,$aa,$54,$2a,$55,$2a,$55,$2a,$55,$2a,$55,$2a,$15,$2a,$15,$2a,$15,$2a,$15,$0a,$15,$0a,$15,$0a,$15,$0a,$15,$0a,$05,$0a,$05,$0a,$05,$0a,$05,$02,$05,$02,$05,$02,$05,$02,$05,$02,$01,$02,$01,$02,$01,$02,$01,$00,$01,$00,$01,$00,$01,$00,$01,$7e,$81,$9d,$a1,$a1,$9d,$81,$7e,$08,$08,$08,$04,$03,$00,$00,$00,$08,$08,$08,$10,$e0,$00,$00,$00,$80,$40,$20,$10,$08,$04,$02,$01,$01,$02,$04,$08,$10,$20,$40,$80,$ff,$7f,$3f,$1f,$0f,$07,$03,$01,$ff,$fe,$fc,$f8,$f0,$e0,$c0,$80,$01,$03,$07,$0f,$1f,$3f,$7f,$ff,$80,$c0,$e0,$f0,$f8,$fc,$fe,$ff,$3f,$1f,$0f,$07,$03,$01,$00,$00,$fc,$f8,$f0,$e0,$c0,$80,$00,$00,$00,$00,$01,$03,$07,$0f,$1f,$3f,$00,$00,$80,$c0,$e0,$f0,$f8,$fc,$0f,$07,$03,$01,$00,$00,$00,$00,$f0,$e0,$c0,$80,$00,$00,$00,$00,$00,$00,$00,$00,$01,$03,$07,$0f,$00,$00,$00,$00,$80,$c0,$e0,$f0,$03,$01,$00,$00,$00,$00,$00,$00,$c0,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$03,$00,$00,$00,$00,$00,$00,$80,$c0,$00,$00,$00,$00,$0f,$0f,$0f,$0f,$00,$00,$00,$00,$f0,$f0,$f0,$f0,$0f,$0f,$0f,$0f,$00,$00,$00,$00,$f0,$f0,$f0,$f0,$00,$00,$00,$00,$f0,$f0,$f0,$f0,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$f0,$f0,$f0,$f0,$00,$00,$00,$3e,$1c,$08,$00,$00,$00,$00,$08,$18,$38,$18,$08,$00,$00,$00,$10,$18,$1c,$18,$10,$00,$00,$00,$08,$1c,$3e,$00,$00,$00,$36,$7f,$7f,$7f,$3e,$1c,$08,$00,$08,$1c,$3e,$7f,$3e,$1c,$08,$00,$08,$1c,$3e,$7f,$7f,$1c,$3e,$00,$08,$1c,$2a,$77,$2a,$08,$1c,$00
>a8f6		00 00 00 00 00 00 ff ff 00 00 00 00 00 ff ff ff
>a906		00 00 00 00 ff ff ff ff 00 00 00 ff ff ff ff ff
>a916		00 00 ff ff ff ff ff ff 00 ff ff ff ff ff ff ff
>a926		ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff 00
>a936		ff ff ff ff ff ff 00 00 ff ff ff ff ff 00 00 00
>a946		ff ff ff ff 00 00 00 00 ff ff ff 00 00 00 00 00
>a956		ff ff 00 00 00 00 00 00 ff 00 00 00 00 00 00 00
>a966		08 00 22 00 08 00 02 00 88 00 22 00 88 00 22 00
>a976		8a 00 2a 00 8a 00 2a 00 aa 00 aa 00 aa 00 aa 00
>a986		aa 05 aa 11 aa 05 aa 11 aa 5f aa 77 aa 5f aa 77
>a996		aa ff aa ff aa ff aa ff af ff bb ff af ff bb ff
>a9a6		77 ff dd ff 77 ff dd ff 7f ff df ff 77 ff df ff
>a9b6		ff ff df ff 77 ff dd ff bb ff ee ff aa ff aa ff
>a9c6		aa ff aa 77 aa dd aa 55 aa 55 22 55 88 55 00 55
>a9d6		aa 00 aa 00 88 00 22 00 33 99 cc 66 33 99 cc 66
>a9e6		cc 99 33 66 cc 99 33 66 00 00 00 00 00 00 00 00
>a9f6		08 08 08 08 00 00 08 00 24 24 24 00 00 00 00 00
>aa06		24 24 7e 24 7e 24 24 00 08 1e 28 1c 0a 3c 08 00
>aa16		00 62 64 08 10 26 46 00 30 48 48 30 4a 44 3a 00
>aa26		08 08 08 00 00 00 00 00 04 08 10 10 10 08 04 00
>aa36		20 10 08 08 08 10 20 00 00 2a 1c 3e 1c 2a 00 00
>aa46		00 08 08 3e 08 08 00 00 00 00 00 00 00 08 08 10
>aa56		00 00 00 7e 00 00 00 00 00 00 00 00 00 18 18 00
>aa66		00 02 04 08 10 20 40 00 3c 42 46 5a 62 42 3c 00
>aa76		08 18 08 08 08 08 1c 00 3c 42 02 3c 40 40 7e 00
>aa86		3c 42 02 1c 02 42 3c 00 04 44 44 44 7e 04 04 00
>aa96		7e 40 40 7c 02 02 7c 00 3c 40 40 7c 42 42 3c 00
>aaa6		7e 42 04 08 10 10 10 00 3c 42 42 3c 42 42 3c 00
>aab6		3c 42 42 3e 02 02 3c 00 00 00 08 00 00 08 00 00
>aac6		00 00 08 00 00 08 08 10 08 10 20 40 20 10 08 00
>aad6		00 00 7e 00 7e 00 00 00 10 08 04 02 04 08 10 00
>aae6		3c 42 02 0c 10 00 10 00 3c 42 4e 52 4e 40 3c 00
>aaf6		3c 42 42 7e 42 42 42 00 7c 42 42 7c 42 42 7c 00
>ab06		3c 42 40 40 40 42 3c 00 78 44 42 42 42 44 78 00
>ab16		7e 40 40 78 40 40 7e 00 7e 40 40 78 40 40 40 00
>ab26		3c 42 40 4e 42 42 3c 00 42 42 42 7e 42 42 42 00
>ab36		1c 08 08 08 08 08 1c 00 0e 04 04 04 04 44 38 00
>ab46		42 44 48 70 48 44 42 00 40 40 40 40 40 40 7e 00
>ab56		41 63 55 49 41 41 41 00 42 62 52 4a 46 42 42 00
>ab66		3c 42 42 42 42 42 3c 00 7c 42 42 7c 40 40 40 00
>ab76		3c 42 42 42 4a 44 3a 00 7c 42 42 7c 48 44 42 00
>ab86		3c 42 40 3c 02 42 3c 00 3e 08 08 08 08 08 08 00
>ab96		42 42 42 42 42 42 3c 00 41 41 41 22 22 14 08 00
>aba6		41 41 41 49 55 63 41 00 42 42 24 18 24 42 42 00
>abb6		41 22 14 08 08 08 08 00 7f 02 04 08 10 20 7f 00
>abc6		3c 20 20 20 20 20 3c 00 00 40 20 10 08 04 02 00
>abd6		3c 04 04 04 04 04 3c 00 00 08 14 22 00 00 00 00
>abe6		00 00 00 00 00 00 00 ff 10 08 04 00 00 00 00 00
>abf6		00 00 3c 02 3e 42 3e 00 40 40 7c 42 42 42 7c 00
>ac06		00 00 3c 42 40 42 3c 00 02 02 3e 42 42 42 3e 00
>ac16		00 00 3c 42 7e 40 3c 00 0c 10 10 7c 10 10 10 00
>ac26		00 00 3e 42 42 3e 02 3c 40 40 7c 42 42 42 42 00
>ac36		08 00 18 08 08 08 08 00 04 00 0c 04 04 04 04 38
>ac46		40 40 44 48 50 68 44 00 18 08 08 08 08 08 1c 00
>ac56		00 00 76 49 49 49 49 00 00 00 7c 42 42 42 42 00
>ac66		00 00 3c 42 42 42 3c 00 00 00 7c 42 42 7c 40 40
>ac76		00 00 3e 42 42 3e 02 02 00 00 5c 60 40 40 40 00
>ac86		00 00 3e 40 3c 02 7c 00 10 10 7c 10 10 10 0c 00
>ac96		00 00 42 42 42 46 3a 00 00 00 42 42 42 24 18 00
>aca6		00 00 41 49 49 49 36 00 00 00 42 24 18 24 42 00
>acb6		00 00 42 42 42 3e 02 3c 00 00 7e 04 18 20 7e 00
>acc6		0c 10 10 20 10 10 0c 00 10 10 10 10 10 10 10 00
>acd6		60 10 10 08 10 10 60 00 00 00 30 49 06 00 00 00
>ace6		08 04 04 08 10 10 08 00 02 02 02 02 02 02 02 02
>acf6		04 04 04 04 04 04 04 04 08 08 08 08 08 08 08 08
>ad06		10 10 10 10 10 10 10 10 20 20 20 20 20 20 20 20
>ad16		40 40 40 40 40 40 40 40 80 80 80 80 80 80 80 80
>ad26		c0 c0 c0 c0 c0 c0 c0 c0 e0 e0 e0 e0 e0 e0 e0 e0
>ad36		f0 f0 f0 f0 f0 f0 f0 f0 f8 f8 f8 f8 f8 f8 f8 f8
>ad46		fc fc fc fc fc fc fc fc fe fe fe fe fe fe fe fe
>ad56		7f 7f 7f 7f 7f 7f 7f 7f 3f 3f 3f 3f 3f 3f 3f 3f
>ad66		1f 1f 1f 1f 1f 1f 1f 1f 0f 0f 0f 0f 0f 0f 0f 0f
>ad76		07 07 07 07 07 07 07 07 03 03 03 03 03 03 03 03
>ad86		01 01 01 01 01 01 01 01 00 00 00 00 00 00 ff 00
>ad96		00 00 00 00 00 ff 00 00 00 00 00 00 ff 00 00 00
>ada6		00 00 00 ff 00 00 00 00 00 00 ff 00 00 00 00 00
>adb6		00 ff 00 00 00 00 00 00 08 08 08 08 0f 08 08 08
>adc6		00 00 00 00 ff 08 08 08 08 08 08 08 ff 08 08 08
>add6		08 08 08 08 ff 00 00 00 08 08 08 08 f8 08 08 08
>ade6		81 42 24 18 18 24 42 81 00 00 00 00 0f 08 08 08
>adf6		00 00 00 00 f8 08 08 08 08 08 08 08 0f 00 00 00
>ae06		08 08 08 08 f8 00 00 00 18 18 18 1f 1f 18 18 18
>ae16		00 00 00 ff ff 18 18 18 18 18 18 ff ff 18 18 18
>ae26		18 18 18 ff ff 00 00 00 18 18 18 f8 f8 18 18 18
>ae36		00 00 00 1f 1f 18 18 18 00 00 00 f8 f8 18 18 18
>ae46		18 18 18 1f 1f 00 00 00 18 18 18 f8 f8 00 00 00
>ae56		00 00 00 ff ff 00 00 00 18 18 18 18 18 18 18 18
>ae66		00 00 00 00 03 07 0f 0f 00 00 00 00 c0 e0 f0 f0
>ae76		0f 0f 07 03 00 00 00 00 f0 f0 e0 c0 00 00 00 00
>ae86		00 7e 7e 7e 7e 7e 7e 00 00 00 3c 3c 3c 3c 00 00
>ae96		00 00 00 18 18 00 00 00 00 00 00 00 08 00 00 00
>aea6		00 3c 7e 7e 7e 7e 3c 00 00 00 18 3c 3c 18 00 00
>aeb6		00 3c 42 42 42 42 3c 00 00 3c 42 5a 5a 42 3c 00
>aec6		ff 81 81 81 81 81 81 ff 00 00 03 06 6c 38 10 00
>aed6		00 00 7e 00 7e 00 7e 00 00 00 00 00 03 04 08 08
>aee6		00 00 00 00 e0 10 08 08 00 00 00 00 00 00 00 55
>aef6		00 00 00 00 00 00 aa 55 00 00 00 00 00 55 aa 55
>af06		00 00 00 00 aa 55 aa 55 00 00 00 55 aa 55 aa 55
>af16		00 00 aa 55 aa 55 aa 55 00 55 aa 55 aa 55 aa 55
>af26		aa 55 aa 55 aa 55 aa 55 aa 55 aa 55 aa 55 aa 00
>af36		aa 55 aa 55 aa 55 00 00 aa 55 aa 55 aa 00 00 00
>af46		aa 55 aa 55 00 00 00 00 aa 55 aa 00 00 00 00 00
>af56		aa 55 00 00 00 00 00 00 aa 00 00 00 00 00 00 00
>af66		80 00 80 00 80 00 80 00 80 40 80 40 80 40 80 40
>af76		a0 40 a0 40 a0 40 a0 40 a0 50 a0 50 a0 50 a0 50
>af86		a8 50 a8 50 a8 50 a8 50 a8 54 a8 54 a8 54 a8 54
>af96		aa 54 aa 54 aa 54 aa 54 2a 55 2a 55 2a 55 2a 55
>afa6		2a 15 2a 15 2a 15 2a 15 0a 15 0a 15 0a 15 0a 15
>afb6		0a 05 0a 05 0a 05 0a 05 02 05 02 05 02 05 02 05
>afc6		02 01 02 01 02 01 02 01 00 01 00 01 00 01 00 01
>afd6		7e 81 9d a1 a1 9d 81 7e 08 08 08 04 03 00 00 00
>afe6		08 08 08 10 e0 00 00 00 80 40 20 10 08 04 02 01
>aff6		01 02 04 08 10 20 40 80 ff 7f 3f 1f 0f 07 03 01
>b006		ff fe fc f8 f0 e0 c0 80 01 03 07 0f 1f 3f 7f ff
>b016		80 c0 e0 f0 f8 fc fe ff 3f 1f 0f 07 03 01 00 00
>b026		fc f8 f0 e0 c0 80 00 00 00 00 01 03 07 0f 1f 3f
>b036		00 00 80 c0 e0 f0 f8 fc 0f 07 03 01 00 00 00 00
>b046		f0 e0 c0 80 00 00 00 00 00 00 00 00 01 03 07 0f
>b056		00 00 00 00 80 c0 e0 f0 03 01 00 00 00 00 00 00
>b066		c0 80 00 00 00 00 00 00 00 00 00 00 00 00 01 03
>b076		00 00 00 00 00 00 80 c0 00 00 00 00 0f 0f 0f 0f
>b086		00 00 00 00 f0 f0 f0 f0 0f 0f 0f 0f 00 00 00 00
>b096		f0 f0 f0 f0 00 00 00 00 f0 f0 f0 f0 0f 0f 0f 0f
>b0a6		0f 0f 0f 0f f0 f0 f0 f0 00 00 00 3e 1c 08 00 00
>b0b6		00 00 08 18 38 18 08 00 00 00 10 18 1c 18 10 00
>b0c6		00 00 08 1c 3e 00 00 00 36 7f 7f 7f 3e 1c 08 00
>b0d6		08 1c 3e 7f 3e 1c 08 00 08 1c 3e 7f 7f 1c 3e 00
>b0e6		08 1c 2a 77 2a 08 1c 00

;******  Return to file: ./font_update/newfont.asm


;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/sound/effects.asm

.b0ee						PingCommand:
.b0ee		5a		phy				phy 								; save pos
.b0ef		a9 01		lda #$01			lda 	#1 						; push channel.
.b0f1		48		pha				pha
.b0f2		a9 c8		lda #$c8			lda 	#200 						; pitch LSB
.b0f4		a2 06		ldx #$06			ldx 	#6 						; length
.b0f6		a0 00		ldy #$00			ldy 	#0 						; slide LSB
.b0f8		80 24		bra $b11e			bra 	SoundEffectCommand
.b0fa						ZapCommand:
.b0fa		5a		phy				phy 								; save pos
.b0fb		a9 01		lda #$01			lda 	#1 						; push channel.
.b0fd		48		pha				pha
.b0fe		a9 ff		lda #$ff			lda 	#255 						; pitch LSB
.b100		a2 0a		ldx #$0a			ldx 	#10 						; length
.b102		a0 0a		ldy #$0a			ldy 	#10 						; slide LSB
.b104		80 18		bra $b11e			bra 	SoundEffectCommand
.b106						ShootCommand:
.b106		5a		phy				phy 								; save pos
.b107		a9 03		lda #$03			lda 	#3 						; push channel.
.b109		48		pha				pha
.b10a		a9 20		lda #$20			lda 	#32 						; pitch LSB
.b10c		a2 04		ldx #$04			ldx 	#4 						; length
.b10e		a0 00		ldy #$00			ldy 	#0 						; slide LSB
.b110		80 0c		bra $b11e			bra 	SoundEffectCommand
.b112						Explode:
.b112		5a		phy				phy 								; save pos
.b113		a9 03		lda #$03			lda 	#3 						; push channel.
.b115		48		pha				pha
.b116		a9 50		lda #$50			lda 	#80 						; pitch LSB
.b118		a2 0a		ldx #$0a			ldx 	#10 						; length
.b11a		a0 00		ldy #$00			ldy 	#0 						; slide LSB
.b11c		80 00		bra $b11e			bra 	SoundEffectCommand
.b11e						SoundEffectCommand:
.b11e		8d 6c 06	sta $066c			sta 	SoundCommandBlock 			; set up the command block in sound.asm
.b121		9c 6d 06	stz $066d			stz 	SoundCommandBlock+1
.b124		a9 0f		lda #$0f			lda 	#15
.b126		8d 6e 06	sta $066e			sta 	SoundCommandBlock+2
.b129		8e 6f 06	stx $066f			stx 	SoundCommandBlock+3
.b12c		8c 70 06	sty $0670			sty 	SoundCommandBlock+4
.b12f		9c 71 06	stz $0671			stz 	SoundCommandBlock+5
.b132		68		pla				pla
.b133		09 10		ora #$10			ora 	#$10  						; execute command $11
.b135		a2 6c		ldx #$6c			ldx 	#(SoundCommandBlock & $FF)
.b137		a0 06		ldy #$06			ldy 	#(SoundCommandBlock >> 8)
.b139		20 8f 80	jsr $808f			jsr 	SNDCommand
.b13c		7a		ply				ply
.b13d		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/sound/playing.asm

.b13e						UnaryPlaying:
.b13e		fa		plx				plx
.b13f		20 9d a0	jsr $a09d			jsr 	Evaluate8BitInteger 		; get channel #
.b142		48		pha				pha
.b143		20 9e 91	jsr $919e			jsr		CheckRightBracket
.b146		68		pla				pla
.b147		c9 04		cmp #$04			cmp 	#4
.b149		b0 0c		bcs $b157			bcs 	_UPNotPlaying
.b14b		09 20		ora #$20			ora 	#$20 						; query playing ?
.b14d		20 8f 80	jsr $808f			jsr 	SNDCommand
.b150		c9 00		cmp #$00			cmp 	#0
.b152		f0 03		beq $b157			beq 	_UPNotPlaying
.b154		4c 24 92	jmp $9224			jmp 	ReturnTrue
.b157						_UPNotPlaying:
.b157		4c 2f 92	jmp $922f			jmp 	ReturnFalse

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/sound/sound.asm

.b15a						SoundCommand:
.b15a		b1 30		lda ($30),y			lda 	(codePtr),y
.b15c		c9 c7		cmp #$c7			cmp 	#KWD_OFF 					; SOUND OFF ?
.b15e		d0 09		bne $b169			bne 	_SNDMain
.b160		c8		iny				iny 								; skip OFF
.b161		a9 3f		lda #$3f			lda 	#$3F 						; call command $3F (silence)
.b163		5a		phy				phy
.b164		20 8f 80	jsr $808f			jsr 	SNDCommand
.b167		7a		ply				ply
.b168		60		rts				rts
.b169						_SNDMain:
.b169		a2 00		ldx #$00			ldx 	#0
.b16b		20 9d a0	jsr $a09d			jsr 	Evaluate8BitInteger 		; channel
.b16e		c9 04		cmp #$04			cmp 	#4 							; must be 0-3
.b170		b0 4b		bcs $b1bd			bcs 	_SndError
.b172		e8		inx				inx 								; do the rest in slot 1.
.b173		20 a6 91	jsr $91a6			jsr 	CheckComma
.b176		20 82 a0	jsr $a082			jsr 	Evaluate16BitInteger 		; Pitch
.b179		b5 60		lda $60,x			lda 	NSMantissa1,x 				; must be 10 bit
.b17b		c9 10		cmp #$10			cmp 	#16
.b17d		b0 3e		bcs $b1bd			bcs 	_SndError
.b17f		8d 6d 06	sta $066d			sta 	SoundCommandBlock+1 		; Pitch (2 bytes + 0)
.b182		b5 58		lda $58,x			lda 	NSMantissa0,x
.b184		8d 6c 06	sta $066c			sta 	SoundCommandBlock
.b187		20 a6 91	jsr $91a6			jsr 	CheckComma
.b18a		20 9d a0	jsr $a09d			jsr 	Evaluate8BitInteger 		; Length (1 byte + 3)
.b18d		8d 6f 06	sta $066f			sta 	SoundCommandBlock+3
.b190		a9 0f		lda #$0f			lda 	#15
.b192		8d 6e 06	sta $066e			sta 	SoundCommandBlock+2 		; Volume (1 byte + 2)
.b195		9c 70 06	stz $0670			stz 	SoundCommandBlock+4 		; default slide (2 bytes +4)
.b198		9c 71 06	stz $0671			stz 	SoundCommandBlock+5
.b19b		b1 30		lda ($30),y			lda 	(codePtr),y
.b19d		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.b19f		d0 0e		bne $b1af			bne 	_SNDPlay
.b1a1		c8		iny				iny
.b1a2		20 8c a0	jsr $a08c			jsr 	Evaluate16BitIntegerSigned 	; Slide
.b1a5		b5 58		lda $58,x			lda 	NSMantissa0,x 				; Slide (2 bytes + 4)
.b1a7		8d 70 06	sta $0670			sta 	SoundCommandBlock+4
.b1aa		b5 60		lda $60,x			lda 	NSMantissa1,x
.b1ac		8d 71 06	sta $0671			sta 	SoundCommandBlock+5
.b1af						_SNDPlay:
.b1af		5a		phy				phy
.b1b0		a5 58		lda $58				lda 	NSMantissa0 				; channel.
.b1b2		09 10		ora #$10			ora 	#$10 						; 1x = Queue sound
.b1b4		a2 6c		ldx #$6c			ldx 	#(SoundCommandBlock & $FF)
.b1b6		a0 06		ldy #$06			ldy 	#(SoundCommandBlock >> 8)
.b1b8		20 8f 80	jsr $808f			jsr 	SNDCommand
.b1bb		7a		ply				ply
.b1bc		60		rts				rts
.b1bd						_SndError:
.b1bd		4c 85 a2	jmp $a285			jmp 	RangeError
.066c						SoundCommandBlock:
>066c								.fill 	6

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/bytes.asm

.b1c0						StackPushByte:
.b1c0		48		pha				pha 								; save byte on stack
.b1c1		a5 34		lda $34				lda 	basicStack 					; decrement basic stack pointer
.b1c3		d0 08		bne $b1cd			bne 	_SPBNoBorrow
.b1c5		c6 35		dec $35				dec 	basicStack+1 				; borrow
.b1c7		a5 35		lda $35				lda 	basicStack+1 				; check range.
.b1c9		c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.b1cb		90 06		bcc $b1d3			bcc 	_SPBMemory
.b1cd						_SPBNoBorrow:
.b1cd		c6 34		dec $34				dec 	basicStack
.b1cf		68		pla				pla 								; get back and write
.b1d0		92 34		sta ($34)			sta 	(basicStack)
.b1d2		60		rts				rts
.b1d3						_SPBMemory:
.b1d3		a9 12		lda #$12		lda	#18
.b1d5		4c b7 91	jmp $91b7		jmp	ErrorHandler
.b1d8						StackPopByte:
.b1d8		b2 34		lda ($34)			lda 	(basicStack) 				; bump the stack pointer.
.b1da		e6 34		inc $34				inc 	basicStack
.b1dc		d0 02		bne $b1e0			bne 	_SPBNoCarry
.b1de		e6 35		inc $35				inc 	basicStack+1
.b1e0						_SPBNoCarry:
.b1e0		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/frames.asm

.b1e1						StackOpen:
.b1e1		48		pha				pha 								; save frame byte
.b1e2		29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.b1e4		0a		asl a				asl 	a 							; claim twice this for storage
.b1e5		49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.b1e7		38		sec				sec 								; so basically subtracting from
.b1e8		65 34		adc $34				adc 	basicStack 	 				; basicStack
.b1ea		85 34		sta $34				sta 	basicStack
.b1ec		b0 09		bcs $b1f7			bcs 	_SONoBorrow
>b1ee		db						.byte 	$DB 						; causes a break in the emulator
.b1ef		c6 35		dec $35				dec 	basicStack+1
.b1f1		a5 35		lda $35				lda 	basicStack+1 				; have we reached stack overflow
.b1f3		c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.b1f5		90 04		bcc $b1fb			bcc 	_SOMemory
.b1f7						_SONoBorrow:
.b1f7		68		pla				pla 								; get marker back and write at TOS
.b1f8		92 34		sta ($34)			sta 	(basicStack)
.b1fa		60		rts				rts
.b1fb						_SOMemory:
.b1fb		a9 12		lda #$12		lda	#18
.b1fd		4c b7 91	jmp $91b7		jmp	ErrorHandler
.b200						StackClose:
.b200		b2 34		lda ($34)			lda 	(basicStack) 				; get TOS marker
.b202		29 0f		and #$0f			and 	#$0F 						; bytes to add back
.b204		0a		asl a				asl 	a 							; claim twice this.
.b205		65 34		adc $34				adc 	basicStack 					; add to the stack pointer.
.b207		85 34		sta $34				sta 	basicStack
.b209		90 02		bcc $b20d			bcc 	_SCExit
.b20b		e6 35		inc $35				inc 	basicStack+1
.b20d						_SCExit:
.b20d		60		rts				rts
.b20e						StackCheckFrame:
.b20e		48		pha				pha
.b20f						_StackRemoveLocals:
.b20f		b2 34		lda ($34)			lda 	(basicStack) 				; check for local, keep popping them
.b211		c9 03		cmp #$03			cmp 	#STK_LOCALS+1 				; is the frame a local ? S or N are 1/0
.b213		b0 05		bcs $b21a			bcs 	_SCNoLocal
.b215		20 ba 8b	jsr $8bba			jsr 	LocalPopValue 				; restore the local value
.b218		80 f5		bra $b20f			bra 	_StackRemoveLocals 			; gr round again
.b21a						_SCNoLocal:
.b21a		68		pla				pla 								; get the frame check.
.b21b		52 34		eor ($34)			eor 	(basicStack) 				; xor with toS marker
.b21d		29 f0		and #$f0			and 	#$F0 						; check type bits
.b21f		d0 01		bne $b222			bne 	_SCFError 					; different, we have structures mixed up
.b221		60		rts				rts
.b222						_SCFError:
.b222		8a		txa				txa 								; report error X
.b223		4c b7 91	jmp $91b7			jmp 	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/location.asm

.b226						STKSaveCodePosition:
.b226		5a		phy				phy
.b227		98		tya				tya 								; save Y
.b228		a0 05		ldy #$05			ldy 	#5
.b22a		91 34		sta ($34),y			sta 	(basicStack),y
.b22c		88		dey				dey 								; save Code Pointer
.b22d						_STKSaveLoop:
.b22d		b9 2f 00	lda $002f,y			lda 	safePtr-1,y 				; allows us to access the pointer w/out issues.
.b230		91 34		sta ($34),y			sta 	(basicStack),y
.b232		88		dey				dey
.b233		d0 f8		bne $b22d			bne 	_STKSaveLoop
.b235		7a		ply				ply
.b236		60		rts				rts
.b237						STKLoadCodePosition:
.b237		a0 01		ldy #$01			ldy 	#1 							; load code pointer back
.b239						_STKLoadLoop:
.b239		b1 34		lda ($34),y			lda 	(basicStack),y
.b23b		99 2f 00	sta $002f,y			sta 	safePtr-1,y
.b23e		c8		iny				iny
.b23f		c0 05		cpy #$05			cpy 	#5
.b241		d0 f6		bne $b239			bne 	_STKLoadLoop
.b243		b1 34		lda ($34),y			lda 	(basicStack),y 				; get Y offset
.b245		a8		tay				tay
.b246		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/setup.asm

.b247						StackReset:
.b247		a9 ff		lda #$ff			lda 	#((BasicStackBase+BasicStackSize-1) & $FF)
.b249		85 34		sta $34				sta 	0+basicStack
.b24b		a9 0f		lda #$0f			lda 	#((BasicStackBase+BasicStackSize-1) >> 8)
.b24d		85 35		sta $35				sta 	1+basicStack
.b24f		a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.b251		92 34		sta ($34)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.b253		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/concrete.asm

.b254						StringConcrete:
.b254		5a		phy				phy 								; save position on stack
.b255		20 f1 9c	jsr $9cf1			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.b258		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy target string to zTemp1
.b25a		85 38		sta $38				sta 	zTemp1
.b25c		b5 60		lda $60,x			lda 	NSMantissa1,x
.b25e		85 39		sta $39				sta 	zTemp1+1
.b260		a0 ff		ldy #$ff			ldy 	#$FF	 					; calculate string length
.b262						_SALength:
.b262		c8		iny				iny
.b263		b1 38		lda ($38),y			lda 	(zTemp1),y
.b265		d0 fb		bne $b262			bne 	_SALength
.b267		c0 fd		cpy #$fd			cpy 	#253 						; string too long - cannot concrete.
.b269		b0 3d		bcs $b2a8			bcs 	_SALengthError
.b26b		98		tya				tya 				 				; length of the new string
.b26c		18		clc				clc
.b26d		69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.b26f		90 02		bcc $b273			bcc 	_SAHaveLength
.b271		a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.b273						_SAHaveLength:
.b273		48		pha				pha 								; save length.
.b274		38		sec				sec
.b275		49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.b277		6d 0e 04	adc $040e			adc 	stringMemory
.b27a		8d 0e 04	sta $040e			sta 	stringMemory
.b27d		85 3a		sta $3a				sta 	zTemp2 						; update storage address
.b27f		95 58		sta $58,x			sta 	NSMantissa0,x 				; update mantissa address
.b281		a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.b283		6d 0f 04	adc $040f			adc 	stringMemory+1
.b286		8d 0f 04	sta $040f			sta 	stringMemory+1
.b289		85 3b		sta $3b				sta 	zTemp2+1
.b28b		95 60		sta $60,x			sta 	NSMantissa1,x
.b28d		68		pla				pla 								; save length-3 (chars allowed) in first byte
.b28e		38		sec				sec
.b28f		e9 03		sbc #$03			sbc 	#3
.b291		92 3a		sta ($3a)			sta 	(zTemp2)
.b293		a9 00		lda #$00			lda 	#0 							; clear the status byte.
.b295		a0 01		ldy #$01			ldy 	#1
.b297		91 3a		sta ($3a),y			sta 	(zTemp2),y
.b299						_SACopyNewString:
.b299		a0 00		ldy #$00			ldy 	#0
.b29b						_SACopyNSLoop:
.b29b		b1 38		lda ($38),y			lda 	(zTemp1),y 					; get character
.b29d		c8		iny				iny 								; write two on in string storage
.b29e		c8		iny				iny
.b29f		91 3a		sta ($3a),y			sta 	(zTemp2),y
.b2a1		88		dey				dey 								; this makes it one one.
.b2a2		c9 00		cmp #$00			cmp 	#0 							; until EOS copied
.b2a4		d0 f5		bne $b29b			bne 	_SACopyNSLoop
.b2a6		7a		ply				ply
.b2a7		60		rts				rts
.b2a8						_SALengthError:
.b2a8		a9 09		lda #$09		lda	#9
.b2aa		4c b7 91	jmp $91b7		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/stringalloc.asm

.b2ad						StringSystemInitialise:
.b2ad		a9 ff		lda #$ff			lda 	#((EndVariableSpace-1) & $FF)
.b2af		8d 0e 04	sta $040e			sta 	0+stringMemory
.b2b2		a9 1f		lda #$1f			lda 	#((EndVariableSpace-1) >> 8)
.b2b4		8d 0f 04	sta $040f			sta 	1+stringMemory
.b2b7		9c ff 1f	stz $1fff			stz 	EndVariableSpace-1 			; put a zero at the end, so know end of string memory.
.b2ba		60		rts				rts
.b2bb						StringSpaceInitialise:
.b2bb		20 f1 9c	jsr $9cf1			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.b2be		a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.b2c0		8d 10 04	sta $0410			sta 	stringInitialised
.b2c3		ad 0e 04	lda $040e			lda 	stringMemory 				; allocate 256 bytes for one concreted string
.b2c6		8d 11 04	sta $0411			sta 	stringTempPointer 			; so temporary string space is allocated below that.
.b2c9		ad 0f 04	lda $040f			lda 	stringMemory+1
.b2cc		3a		dec a				dec 	a
.b2cd		8d 12 04	sta $0412			sta 	stringTempPointer+1
.b2d0		60		rts				rts
.b2d1						StringTempAllocate:
.b2d1		c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.b2d3		b0 30		bcs $b305			bcs 	_STALength
.b2d5		2c 10 04	bit $0410			bit 	stringInitialised 			; already initialised
.b2d8		30 05		bmi $b2df			bmi 	_STAAllocate
.b2da		48		pha				pha 								; save value to subtract.
.b2db		20 bb b2	jsr $b2bb			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.b2de		68		pla				pla 								; restore it
.b2df						_STAAllocate:
.b2df		49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.b2e1		18		clc				clc  								; deliberate allows one more
.b2e2		6d 11 04	adc $0411			adc 	stringTempPointer 			; subtract from temp pointer
.b2e5		8d 11 04	sta $0411			sta 	stringTempPointer
.b2e8		95 58		sta $58,x			sta 	NSMantissa0,x 				; address in mantissa
.b2ea		85 3c		sta $3c				sta 	zsTemp 						; and zsTemp
.b2ec		ad 12 04	lda $0412			lda 	stringTempPointer+1
.b2ef		69 ff		adc #$ff			adc 	#$FF
.b2f1		8d 12 04	sta $0412			sta 	stringTempPointer+1
.b2f4		85 3d		sta $3d				sta 	zsTemp+1
.b2f6		95 60		sta $60,x			sta 	NSMantissa1,x
.b2f8		74 68		stz $68,x			stz 	NSMantissa2,x 				; set the typing data and the upper address bytes.
.b2fa		74 70		stz $70,x			stz 	NSMantissa3,x
.b2fc		a9 10		lda #$10			lda 	#NSTString
.b2fe		95 50		sta $50,x			sta 	NSStatus,x
.b300		a9 00		lda #$00			lda 	#0 							; clear the target string
.b302		92 3c		sta ($3c)			sta 	(zsTemp)
.b304		60		rts				rts
.b305						_STALength:
.b305		a9 09		lda #$09		lda	#9
.b307		4c b7 91	jmp $91b7		jmp	ErrorHandler
.b30a						StringTempWrite:
.b30a		48		pha				pha
.b30b		92 3c		sta ($3c)			sta 	(zsTemp) 					; write byte
.b30d		e6 3c		inc $3c				inc 	zsTemp 						; bump pointer
.b30f		d0 02		bne $b313			bne 	_STWNoCarry
.b311		e6 3d		inc $3d				inc 	zsTemp+1
.b313						_STWNoCarry:
.b313		a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.b315		92 3c		sta ($3c)			sta 	(zsTemp)
.b317		68		pla				pla
.b318		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./storage/verify.asm

.b319						Command_VERIFY:
.b319		20 5a a0	jsr $a05a			jsr 	EvaluateString 				; file name to verify
.b31c		a6 37		ldx $37				ldx 	zTemp0+1					; zTemp0 -> XA
.b31e		a5 36		lda $36				lda 	zTemp0
.b320		20 3f 80	jsr $803f			jsr 	KNLOpenFileRead 			; open file for reading
.b323		b0 4b		bcs $b370			bcs 	_CVErrorHandler 			; error, so fail.
.b325		8d 60 06	sta $0660			sta 	CurrentFileStream 			; save the reading stream.
.b328		20 53 80	jsr $8053			jsr     KNLReadByteInit             ; Init reader with the stream
.b32b		9c 5f 06	stz $065f			stz 	LoadEOFFlag 				; clear EOF Flag.
.b32e		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.b330		85 30		sta $30				sta 	codePtr
.b332		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.b334		85 31		sta $31				sta 	codePtr+1
.b336						_CVLoop:
.b336		20 02 8b	jsr $8b02			jsr 	LoadReadLine 				; get next line.
.b339		f0 27		beq $b362			beq 	_CVExit 					; end, exit.
.b33b		20 ad 80	jsr $80ad			jsr 	TKTokeniseLine 				; tokenise the line.
.b33e		ad 2b 04	lda $042b			lda 	tokenLineNumber 			; line number = 0
.b341		0d 2c 04	ora $042c			ora 	tokenLineNumber+1
.b344		f0 f0		beq $b336			beq 	_CVLoop 					; not legal code, blank line or maybe a comment.
.b346		a0 00		ldy #$00			ldy 	#0 							; start compare
.b348						_CVCompareLoop:
.b348		b1 30		lda ($30),y			lda 	(codePtr),y
.b34a		d9 2a 04	cmp $042a,y			cmp 	tokenOffset,y 				; compare against actual code.
.b34d		d0 1c		bne $b36b			bne 	_CVCompareError
.b34f		c8		iny				iny
.b350		cc 2a 04	cpy $042a			cpy 	tokenOffset 				; until done whole line of code
.b353		d0 f3		bne $b348			bne 	_CVCompareLoop
.b355		18		clc				clc
.b356		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.b358		65 30		adc $30				adc 	codePtr
.b35a		85 30		sta $30				sta 	codePtr
.b35c		90 02		bcc $b360			bcc 	_CREExit
.b35e		e6 31		inc $31				inc 	codePtr+1 					; carry
.b360						_CREExit:
.b360		80 d4		bra $b336			bra 	_CVLoop
.b362						_CVExit:
.b362		ad 60 06	lda $0660			lda 	CurrentFileStream
.b365		20 7b 80	jsr $807b			jsr 	KNLCloseFile
.b368		4c d7 8a	jmp $8ad7			jmp 	CLComplete
.b36b						_CVCompareError:
.b36b		a9 1b		lda #$1b		lda	#27
.b36d		4c b7 91	jmp $91b7		jmp	ErrorHandler
.b370						_CVErrorHandler:
.b370		4c f4 8a	jmp $8af4			jmp 	CLErrorHandler

;******  Return to file: _basic.asm

.b373						StartModuleCode:

;******  Processing file: ../modules/_build/_hardware.module

=1						hardwareIntegrated=1
=0						CONBlack = 0
=1						CONGrey = 1
=2						CONDarkBlue = 2
=3						CONGreen = 3
=4						CONPurple = 4
=5						CONBrown = 5
=6						CONOrange = 6
=7						CONCyan = 7
=8						CONDarkGrey = 8
=9						CONLightGrey = 9
=10						CONLightBlue = 10
=11						CONLightGreen = 11
=12						CONPink = 12
=13						CONRed = 13
=14						CONYellow = 14
=15						CONWhite = 15
=9						CONForeground = CONLightGrey
=2						CONBackground = CONDarkBlue
=9						CLICommandLine = CONLightGrey
=5						CLIFComment = CONBrown
=14						CLIBComment = CONYellow
=13						CLILineNumber = CONRed
=6						CLIToken = CONOrange
=7						CLIConstant = CONCyan
=14						CLIIdentifier = CONYellow
=12						CLIPunctuation = CONPink
=15						CLIData = CONWhite
.c000	a000					Export_EXTPrintNoControl:
.c000	a000	48		pha				pha
.c001	a001	da		phx				phx
.c002	a002	5a		phy				phy
.c003	a003	a6 01		ldx $01				ldx 	1
.c005	a005	da		phx				phx
.c006	a006	ac 73 06	ldy $0673			ldy 	EXTColumn 					; Y = Row, e.g. points to character.
.c009	a009	80 11		bra $a01c			bra 	PrintCharacterOnly
.c00b	a00b					Export_EXTPrintCharacter:
.c00b	a00b					PAGEDPrintCharacter:
.c00b	a00b	48		pha				pha
.c00c	a00c	da		phx				phx
.c00d	a00d	5a		phy				phy
.c00e	a00e	a6 01		ldx $01				ldx 	1
.c010	a010	da		phx				phx
.c011	a011	ac 73 06	ldy $0673			ldy 	EXTColumn 					; Y = Row, e.g. points to character.
.c014	a014	09 00		ora #$00			ora 	#$00 						; check $80-$FF
.c016	a016	30 48		bmi $a060			bmi 	EXPCColour
.c018	a018	c9 20		cmp #$20			cmp 	#$20 						; check $00-$1F
.c01a	a01a	90 4d		bcc $a069			bcc 	EXPCControl
.c01c	a01c					PrintCharacterOnly:
.c01c	a01c	a2 02		ldx #$02			ldx 	#2 							; select char memory
.c01e	a01e	86 01		stx $01				stx 	1
.c020	a020	91 40		sta ($40),y			sta 	(EXTAddress),y
.c022	a022	e6 01		inc $01				inc 	1 							; select colour memory
.c024	a024	ad 74 06	lda $0674			lda 	EXTTextColour
.c027	a027	91 40		sta ($40),y			sta 	(EXTAddress),y
.c029	a029	c8		iny				iny 								; advance horizontal position
.c02a	a02a	8c 73 06	sty $0673			sty 	EXTColumn
.c02d	a02d	cc 75 06	cpy $0675			cpy 	EXTScreenWidth 				; reached RHS ?
.c030	a030	90 63		bcc $a095			bcc 	EXPCExit 					; no, then exit.
.c032	a032					EXPCCRLF:
.c032	a032	ee 72 06	inc $0672			inc 	EXTRow  					; bump row
.c035	a035	9c 73 06	stz $0673			stz 	EXTColumn 					; back to column 0
.c038	a038	ad 72 06	lda $0672			lda 	EXTRow 						; check if reached the bottom ?
.c03b	a03b	cd 76 06	cmp $0676			cmp 	EXTScreenHeight 			; if so, then scroll.
.c03e	a03e	f0 18		beq $a058			beq 	EXPCScroll
.c040	a040	18		clc				clc 								; add width to address.
.c041	a041	a5 40		lda $40				lda 	EXTAddress
.c043	a043	6d 75 06	adc $0675			adc 	EXTScreenWidth
.c046	a046	85 40		sta $40				sta 	EXTAddress
.c048	a048	90 4b		bcc $a095			bcc 	EXPCExit
.c04a	a04a	e6 41		inc $41				inc 	EXTAddress+1
.c04c	a04c	80 47		bra $a095			bra 	EXPCExit
.c04e	a04e					EXPCLeft:
.c04e	a04e	ce 73 06	dec $0673			dec 	EXTColumn
.c051	a051	10 42		bpl $a095			bpl 	EXPCExit
.c053	a053					EXPCBegin:
.c053	a053	9c 73 06	stz $0673			stz 	EXTColumn
.c056	a056	80 3d		bra $a095			bra 	EXPCExit
.c058	a058					EXPCScroll:
.c058	a058	ce 72 06	dec $0672			dec 	EXTRow 						; the height-1 th line.
.c05b	a05b	20 46 a1	jsr $a146			jsr 	EXTScreenScroll 			; scroll the screen
.c05e	a05e	80 35		bra $a095			bra 	EXPCExit
.c060	a060					EXPCColour:
.c060	a060	c9 a0		cmp #$a0			cmp 	#$A0						; 80-9F set foreground/background
.c062	a062	b0 31		bcs $a095			bcs 	EXPCExit
.c064	a064	20 26 a1	jsr $a126			jsr 	EXPCHandleColour
.c067	a067	80 2c		bra $a095			bra 	EXPCExit
.c069	a069					EXPCControl:
.c069	a069	c9 11		cmp #$11			cmp 	#$11 						; only handle 00-10.
.c06b	a06b	b0 28		bcs $a095			bcs 	EXPCExit
.c06d	a06d	0a		asl a				asl 	a 							; double into X
.c06e	a06e	aa		tax				tax
.c06f	a06f	7c 04 a1	jmp ($a104,x)			jmp 	(EXPCActionTable,x) 		; and execute code.
.c072	a072					EXPCUp:
.c072	a072	ad 72 06	lda $0672			lda 	EXTRow 						; already at top ?
.c075	a075	f0 1e		beq $a095			beq 	EXPCExit
.c077	a077	ce 72 06	dec $0672			dec 	EXTRow 						; up one in position/address
.c07a	a07a	38		sec				sec
.c07b	a07b	a5 40		lda $40				lda 	EXTAddress
.c07d	a07d	ed 75 06	sbc $0675			sbc 	EXTScreenWidth
.c080	a080	85 40		sta $40				sta 	EXTAddress
.c082	a082	b0 11		bcs $a095			bcs 	EXPCExit
.c084	a084	c6 41		dec $41				dec 	EXTAddress+1
.c086	a086	80 0d		bra $a095			bra 	EXPCExit
.c088	a088					EXPCRight:
.c088	a088	c8		iny				iny
.c089	a089	8c 73 06	sty $0673			sty 	EXTColumn
.c08c	a08c	cc 75 06	cpy $0675			cpy 	EXTScreenWidth
.c08f	a08f	d0 04		bne $a095			bne 	EXPCExit
.c091	a091	88		dey				dey
.c092	a092					EXPCSetColumnY:
.c092	a092	8c 73 06	sty $0673			sty 	EXTColumn
.c095	a095					EXPCExit:
.c095	a095	20 bb a1	jsr $a1bb			jsr 	EXTSetHardwareCursor 		; place the physical cursor.
.c098	a098	68		pla				pla
.c099	a099	85 01		sta $01				sta 	1
.c09b	a09b	7a		ply				ply
.c09c	a09c	fa		plx				plx
.c09d	a09d	68		pla				pla
.c09e	a09e	60		rts				rts
.c09f	a09f					EXPCClearScreen:
.c09f	a09f	20 78 a1	jsr $a178			jsr		EXTClearScreenCode
.c0a2	a0a2	80 f1		bra $a095			bra 	EXPCExit
.c0a4	a0a4					EXPCDown:
.c0a4	a0a4	ad 76 06	lda $0676			lda 	EXTScreenHeight 			; at the bottom
.c0a7	a0a7	3a		dec a				dec 	a
.c0a8	a0a8	cd 72 06	cmp $0672			cmp 	EXTRow
.c0ab	a0ab	f0 e8		beq $a095			beq 	EXPCExit
.c0ad	a0ad	ee 72 06	inc $0672			inc 	EXTRow 						; down one in position/address
.c0b0	a0b0	18		clc				clc
.c0b1	a0b1	a5 40		lda $40				lda 	EXTAddress
.c0b3	a0b3	6d 75 06	adc $0675			adc 	EXTScreenWidth
.c0b6	a0b6	85 40		sta $40				sta 	EXTAddress
.c0b8	a0b8	90 db		bcc $a095			bcc 	EXPCExit
.c0ba	a0ba	e6 41		inc $41				inc 	EXTAddress+1
.c0bc	a0bc	80 d7		bra $a095			bra 	EXPCExit
.c0be	a0be					EXPCTab:
.c0be	a0be	ad 73 06	lda $0673			lda 	EXTColumn 					; next tab stop
.c0c1	a0c1	29 f8		and #$f8			and 	#$F8
.c0c3	a0c3	18		clc				clc
.c0c4	a0c4	69 08		adc #$08			adc 	#8
.c0c6	a0c6	8d 73 06	sta $0673			sta 	EXTColumn
.c0c9	a0c9	cd 75 06	cmp $0675			cmp 	EXTScreenWidth 				; too far, stick end of line.
.c0cc	a0cc	90 c7		bcc $a095			bcc 	EXPCExit
.c0ce	a0ce	80 10		bra $a0e0			bra 	EXPCEnd
.c0d0	a0d0					EXPCBackSpace:
.c0d0	a0d0	88		dey				dey
.c0d1	a0d1	30 c2		bmi $a095			bmi 	EXPCExit
.c0d3	a0d3	ce 73 06	dec $0673			dec 	EXTColumn
.c0d6	a0d6	a9 02		lda #$02			lda 	#2
.c0d8	a0d8	85 01		sta $01				sta 	1
.c0da	a0da	a9 20		lda #$20			lda 	#32
.c0dc	a0dc	91 40		sta ($40),y			sta 	(EXTAddress),y
.c0de	a0de	80 b5		bra $a095			bra 	EXPCExit
.c0e0	a0e0					EXPCEnd:
.c0e0	a0e0	a9 02		lda #$02			lda 	#2 							; access text screen
.c0e2	a0e2	85 01		sta $01				sta 	1
.c0e4	a0e4	ac 75 06	ldy $0675			ldy 	EXTScreenWidth 				; point to last character
.c0e7	a0e7	88		dey				dey
.c0e8	a0e8					EXPCEndSearch:
.c0e8	a0e8	88		dey				dey 								; if past start, move to col 0.
.c0e9	a0e9	30 06		bmi $a0f1			bmi 	EXPCFound
.c0eb	a0eb	b1 40		lda ($40),y			lda 	(EXTAddress),y 				; keep going back till non space found
.c0ed	a0ed	c9 20		cmp #$20			cmp 	#' '
.c0ef	a0ef	f0 f7		beq $a0e8			beq 	EXPCEndSearch
.c0f1	a0f1					EXPCFound:
.c0f1	a0f1	c8		iny				iny 								; move to following cell.
.c0f2	a0f2	80 9e		bra $a092			bra 	EXPCSetColumnY
.c0f4	a0f4					EXPCClearEOL:
.c0f4	a0f4	a9 02		lda #$02			lda 	#2 							; access character RAM
.c0f6	a0f6	85 01		sta $01				sta 	1
.c0f8	a0f8	a9 20		lda #$20			lda 	#' ' 						; write space
.c0fa	a0fa	91 40		sta ($40),y			sta 	(EXTAddress),y
.c0fc	a0fc	c8		iny				iny
.c0fd	a0fd	cc 75 06	cpy $0675			cpy 	EXTScreenWidth 				; until RHS of screen.
.c100	a100	90 f2		bcc $a0f4			bcc 	EXPCClearEOL
.c102	a102	80 91		bra $a095			bra 	EXPCExit
.c104	a104					EXPCActionTable:
>c104	a104	95 a0						.word 	EXPCExit 					; 00
>c106	a106	53 a0						.word 	EXPCBegin 					; 01 A Start of Line
>c108	a108	4e a0						.word 	EXPCLeft 					; 02 B Left
>c10a	a10a	95 a0						.word 	EXPCExit 					; 03 <Break>
>c10c	a10c	95 a0						.word 	EXPCExit 					; 04
>c10e	a10e	e0 a0						.word 	EXPCEnd 					; 05 E End of Line
>c110	a110	88 a0						.word 	EXPCRight 					; 06 F Right
>c112	a112	95 a0						.word 	EXPCExit 					; 07
>c114	a114	d0 a0						.word 	EXPCBackSpace 				; 08 H Backspace
>c116	a116	be a0						.word 	EXPCTab 					; 09 I Tab
>c118	a118	95 a0						.word 	EXPCExit 					; 0A
>c11a	a11a	f4 a0						.word 	EXPCClearEOL 				; 0B K Clear to EOL
>c11c	a11c	9f a0						.word 	EXPCClearScreen			; 0C L CLS
>c11e	a11e	32 a0						.word 	EXPCCRLF 					; 0D M CR/LF
>c120	a120	a4 a0						.word 	EXPCDown 					; 0E N Down
>c122	a122	95 a0						.word 	EXPCExit 					; 0F
>c124	a124	72 a0						.word 	EXPCUp 					; 10 P Up
.c126	a126					EXPCHandleColour:
.c126	a126	c9 90		cmp #$90			cmp 	#$90 						; 8x foreground 9x background
.c128	a128	b0 16		bcs $a140			bcs 	EXPCBackground
.c12a	a12a	0a		asl a				asl 	a 							; shift it 4 bits to the right.
.c12b	a12b	0a		asl a				asl 	a
.c12c	a12c	0a		asl a				asl 	a
.c12d	a12d	0a		asl a				asl 	a
.c12e	a12e	a2 0f		ldx #$0f			ldx 	#$0F 						; Mask in X
.c130	a130					EXPCUpdate:
.c130	a130	48		pha				pha 								; save new colour
.c131	a131	8a		txa				txa 								; get mask
.c132	a132	2d 74 06	and $0674			and 	EXTTextColour 				; mask out old.
.c135	a135	8d 74 06	sta $0674			sta 	EXTTextColour
.c138	a138	68		pla				pla 								; or in new colour
.c139	a139	0d 74 06	ora $0674			ora 	EXTTextColour
.c13c	a13c	8d 74 06	sta $0674			sta 	EXTTextColour
.c13f	a13f	60		rts				rts
.c140	a140					EXPCBackground:
.c140	a140	29 0f		and #$0f			and 	#$0F 						; get the colour
.c142	a142	a2 f0		ldx #$f0			ldx 	#$F0 						; mask
.c144	a144	80 ea		bra $a130			bra 	EXPCUpdate
.c146	a146					EXTScreenScroll:
.c146	a146	a9 02		lda #$02			lda 	#2 							; select text page
.c148	a148	85 01		sta $01				sta 	1
.c14a	a14a	a9 20		lda #$20			lda		#32 						; fill with space
.c14c	a14c	20 81 a2	jsr $a281			jsr 	EXTScrollFill
.c14f	a14f	e6 01		inc $01				inc 	1 							; select colour page
.c151	a151	ad 74 06	lda $0674			lda 	EXTTextColour
.c154	a154	20 81 a2	jsr $a281			jsr 	EXTScrollFill
.c157	a157	60		rts				rts
.c158	a158					PAGEDPrintHex:
.c158	a158	48		pha				pha
.c159	a159	a9 20		lda #$20			lda 	#' '
.c15b	a15b	20 0b a0	jsr $a00b			jsr 	PAGEDPrintCharacter
.c15e	a15e	68		pla				pla
.c15f	a15f	48		pha				pha
.c160	a160	4a		lsr a				lsr 	a
.c161	a161	4a		lsr a				lsr 	a
.c162	a162	4a		lsr a				lsr 	a
.c163	a163	4a		lsr a				lsr 	a
.c164	a164	20 68 a1	jsr $a168			jsr 	_PPHNibble
.c167	a167	68		pla				pla
.c168	a168					_PPHNibble:
.c168	a168	48		pha				pha
.c169	a169	29 0f		and #$0f			and 	#15
.c16b	a16b	c9 0a		cmp #$0a			cmp 	#10
.c16d	a16d	90 02		bcc $a171			bcc 	_PPHOut
.c16f	a16f	69 06		adc #$06			adc 	#6
.c171	a171	69 30		adc #$30	_PPHOut:adc 	#48
.c173	a173	20 0b a0	jsr $a00b			jsr		PAGEDPrintCharacter
.c176	a176	68		pla				pla
.c177	a177	60		rts				rts
.c178	a178					EXTClearScreenCode:
.c178	a178	a9 02		lda #$02			lda 	#2 							; select text page
.c17a	a17a	85 01		sta $01				sta 	1
.c17c	a17c	a9 20		lda #$20			lda		#32 						; fill with space
.c17e	a17e	20 8b a1	jsr $a18b			jsr 	_EXTCSFill
.c181	a181	e6 01		inc $01				inc 	1 							; select colour page
.c183	a183	ad 74 06	lda $0674			lda 	EXTTextColour
.c186	a186	20 8b a1	jsr $a18b			jsr 	_EXTCSFill
.c189	a189	80 22		bra $a1ad			bra 	EXTHomeCursor
.c18b	a18b					_EXTCSFill:
.c18b	a18b	aa		tax				tax
.c18c	a18c	a9 00		lda #$00			lda 	#EXTMemory & $FF
.c18e	a18e	85 40		sta $40				sta 	EXTAddress
.c190	a190	a9 c0		lda #$c0			lda 	#EXTMemory >> 8
.c192	a192	85 41		sta $41				sta 	EXTAddress+1
.c194	a194					_EXTCSFill1:
.c194	a194	a0 00		ldy #$00			ldy 	#0
.c196	a196	8a		txa				txa
.c197	a197					_EXTCSFill2:
.c197	a197	91 40		sta ($40),y			sta 	(EXTAddress),y
.c199	a199	c8		iny				iny
.c19a	a19a	d0 fb		bne $a197			bne 	_EXTCSFill2
.c19c	a19c	e6 41		inc $41				inc 	EXTAddress+1
.c19e	a19e	a5 41		lda $41				lda 	EXTAddress+1
.c1a0	a1a0	c9 d2		cmp #$d2			cmp 	#$D2
.c1a2	a1a2	d0 f0		bne $a194			bne 	_EXTCSFill1
.c1a4	a1a4	8a		txa				txa
.c1a5	a1a5					_EXTCSFill3:
.c1a5	a1a5	91 40		sta ($40),y			sta 	(EXTAddress),y
.c1a7	a1a7	c8		iny				iny
.c1a8	a1a8	c0 c0		cpy #$c0			cpy 	#$C0
.c1aa	a1aa	d0 f9		bne $a1a5			bne 	_EXTCSFill3
.c1ac	a1ac	60		rts				rts
.c1ad	a1ad					EXTHomeCursor:
.c1ad	a1ad	9c 72 06	stz $0672			stz 	EXTRow 						; reset row & column
.c1b0	a1b0	9c 73 06	stz $0673			stz 	EXTColumn
.c1b3	a1b3	a9 00		lda #$00			lda 	#EXTMemory & $FF 			; set address
.c1b5	a1b5	85 40		sta $40				sta 	EXTAddress
.c1b7	a1b7	a9 c0		lda #$c0			lda 	#EXTMemory >> 8
.c1b9	a1b9	85 41		sta $41				sta 	EXTAddress+1
.c1bb	a1bb					EXTSetHardwareCursor:
.c1bb	a1bb	64 01		stz $01				stz 	1 							; I/O Page zero
.c1bd	a1bd	a9 05		lda #$05			lda 	#1+4 						; enable cursor
.c1bf	a1bf	8d 10 d0	sta $d010			sta 	$D010
.c1c2	a1c2	a9 b3		lda #$b3			lda 	#179
.c1c4	a1c4	8d 12 d0	sta $d012			sta 	$D012
.c1c7	a1c7	ad 73 06	lda $0673			lda 	EXTColumn
.c1ca	a1ca	8d 14 d0	sta $d014			sta 	$D014 						; set cursor position
.c1cd	a1cd	9c 15 d0	stz $d015			stz 	$D015
.c1d0	a1d0	ad 72 06	lda $0672			lda 	EXTRow
.c1d3	a1d3	8d 16 d0	sta $d016			sta 	$D016
.c1d6	a1d6	9c 17 d0	stz $d017			stz 	$D017
.c1d9	a1d9	60		rts				rts
.c1da	a1da					Export_EXTInputLine:
.c1da	a1da	48		pha				pha
.c1db	a1db	da		phx				phx
.c1dc	a1dc	5a		phy				phy
.c1dd	a1dd	a5 01		lda $01				lda 	1 							; save I/O page
.c1df	a1df	48		pha				pha
.c1e0	a1e0					_EILLoop:
.c1e0	a1e0	20 0d bc	jsr $bc0d			jsr 	PagedInputSingleCharacter
.c1e3	a1e3	c9 0d		cmp #$0d			cmp 	#13 						; scrape line if exit.
.c1e5	a1e5	f0 44		beq $a22b			beq 	_EILExit
.c1e7	a1e7	c9 04		cmp #$04			cmp 	#4 							; Ctrl+D delete at cursor
.c1e9	a1e9	f0 2a		beq $a215			beq 	_EILDelete
.c1eb	a1eb	c9 08		cmp #$08			cmp 	#8 							; Ctrl+H backspace
.c1ed	a1ed	f0 1c		beq $a20b			beq 	_EILBackspace
.c1ef	a1ef	c9 20		cmp #$20			cmp 	#' '						; < space, print it
.c1f1	a1f1	90 12		bcc $a205			bcc 	_EILPrintLoop
.c1f3	a1f3	c9 7f		cmp #$7f			cmp 	#$7F 						; if -ve print it
.c1f5	a1f5	b0 0e		bcs $a205			bcs 	_EILPrintLoop
.c1f7	a1f7	48		pha				pha 								; save character
.c1f8	a1f8	a9 02		lda #$02			lda 	#2  						; insert a space
.c1fa	a1fa	85 01		sta $01				sta 	1
.c1fc	a1fc	20 6f a2	jsr $a26f			jsr 	EXTILInsert 				; insert in text screen
.c1ff	a1ff	e6 01		inc $01				inc 	1
.c201	a201	20 6f a2	jsr $a26f			jsr 	EXTILInsert 				; insert in colour screen
.c204	a204	68		pla				pla 								; get character back.
.c205	a205					_EILPrintLoop:
.c205	a205	20 0b a0	jsr $a00b			jsr 	PAGEDPrintCharacter
.c208	a208	80 d6		bra $a1e0			bra 	_EILLoop
.c20a	a20a	60		rts				rts
.c20b	a20b					_EILBackspace:
.c20b	a20b	ad 73 06	lda $0673			lda 	EXTColumn					; can we backspace ?
.c20e	a20e	f0 d0		beq $a1e0			beq 	_EILLoop
.c210	a210	a9 02		lda #$02			lda 	#2 							; move cursor left
.c212	a212	20 0b a0	jsr $a00b			jsr 	PAGEDPrintCharacter
.c215	a215					_EILDelete
.c215	a215	a9 02		lda #$02			lda 	#2 							; text block
.c217	a217	85 01		sta $01				sta 	1
.c219	a219	a9 20		lda #$20			lda 	#' ' 						; backspace text.
.c21b	a21b	20 5a a2	jsr $a25a			jsr 	EXTILDelete
.c21e	a21e	e6 01		inc $01				inc 	1 							; colour block
.c220	a220	ac 73 06	ldy $0673			ldy 	EXTColumn 					; get attribute of last character
.c223	a223	88		dey				dey
.c224	a224	b1 40		lda ($40),y			lda 	(EXTAddress),y
.c226	a226	20 5a a2	jsr $a25a			jsr 	EXTILDelete 				; backspace attribute
.c229	a229	80 b5		bra $a1e0			bra 	_EILLoop 					; and go round.
.c22b	a22b					_EILExit:
.c22b	a22b	a9 02		lda #$02			lda 	#2 							; switch to page 2
.c22d	a22d	85 01		sta $01				sta 	1
.c22f	a22f	a0 00		ldy #$00			ldy 	#0 							; copy current line into buffer.
.c231	a231					_EILScrapeLine:
.c231	a231	b1 40		lda ($40),y			lda 	(EXTAddress),y
.c233	a233	99 2a 05	sta $052a,y			sta 	lineBuffer,y
.c236	a236	c8		iny				iny
.c237	a237	cc 75 06	cpy $0675			cpy 	EXTScreenWidth
.c23a	a23a	d0 f5		bne $a231			bne 	_EILScrapeLine
.c23c	a23c					_EILTrimSpaces:
.c23c	a23c	88		dey				dey
.c23d	a23d	c0 ff		cpy #$ff			cpy 	#$FF 						; back past the start
.c23f	a23f	f0 07		beq $a248			beq 	_EILEndTrim		 			; zero the input line.
.c241	a241	b9 2a 05	lda $052a,y			lda 	lineBuffer,y
.c244	a244	c9 20		cmp #$20			cmp 	#' '
.c246	a246	f0 f4		beq $a23c			beq 	_EILTrimSpaces 				; if fail this found non space character
.c248	a248					_EILEndTrim:
.c248	a248	c8		iny				iny 								; trim after non space character.
.c249	a249	a9 00		lda #$00			lda 	#0 							; trim here.
.c24b	a24b	99 2a 05	sta $052a,y			sta 	lineBuffer,y
.c24e	a24e	a9 0d		lda #$0d			lda 	#13 						; echo the RETURN
.c250	a250	20 0b a0	jsr $a00b			jsr 	PAGEDPrintCharacter
.c253	a253	68		pla				pla 								; reset I/O page
.c254	a254	85 01		sta $01				sta 	1
.c256	a256	7a		ply				ply
.c257	a257	fa		plx				plx
.c258	a258	68		pla				pla
.c259	a259	60		rts				rts
.c25a	a25a					EXTILDelete:
.c25a	a25a	48		pha				pha 								; save the new character
.c25b	a25b	ac 73 06	ldy $0673			ldy 	EXTColumn 					; start copying from here.
.c25e	a25e					_EXTDLoop:
.c25e	a25e	c8		iny				iny 								; copy one byte down.
.c25f	a25f	b1 40		lda ($40),y			lda 	(EXTAddress),y
.c261	a261	88		dey				dey
.c262	a262	91 40		sta ($40),y			sta 	(EXTAddress),y
.c264	a264	c8		iny				iny 								; do till end of line.
.c265	a265	cc 75 06	cpy $0675			cpy 	EXTScreenWidth
.c268	a268	90 f4		bcc $a25e			bcc 	_EXTDLoop
.c26a	a26a	88		dey				dey 	 							; write in last slot.
.c26b	a26b	68		pla				pla
.c26c	a26c	91 40		sta ($40),y			sta 	(EXTAddress),y
.c26e	a26e	60		rts				rts
.c26f	a26f					EXTILInsert:
.c26f	a26f	ac 75 06	ldy $0675			ldy 	EXTScreenWidth 				; end position
.c272	a272					_EXTILoop:
.c272	a272	88		dey				dey 								; back one
.c273	a273	cc 73 06	cpy $0673			cpy 	EXTColumn 					; exit if reached insert point.
.c276	a276	f0 08		beq $a280			beq 	_EXTIExit
.c278	a278	88		dey				dey 								; copy one byte up.
.c279	a279	b1 40		lda ($40),y			lda 	(EXTAddress),y
.c27b	a27b	c8		iny				iny
.c27c	a27c	91 40		sta ($40),y			sta 	(EXTAddress),y
.c27e	a27e	80 f2		bra $a272			bra 	_EXTILoop
.c280	a280					_EXTIExit:
.c280	a280	60		rts				rts
.c281	a281					EXTScrollFill:
.c281	a281	aa		tax				tax									; save value to fill with
.c282	a282	a5 36		lda $36				lda 	zTemp0 						; save zTemp0 (dest) zTemp1 (src)
.c284	a284	48		pha				pha
.c285	a285	a5 37		lda $37				lda 	zTemp0+1
.c287	a287	48		pha				pha
.c288	a288	a5 38		lda $38				lda 	zTemp1
.c28a	a28a	48		pha				pha
.c28b	a28b	a5 39		lda $39				lda 	zTemp1+1
.c28d	a28d	48		pha				pha
.c28e	a28e	a9 c0		lda #$c0			lda 	#$C0 						; copy from C000+length to C000
.c290	a290	85 37		sta $37				sta 	zTemp0+1
.c292	a292	85 39		sta $39				sta 	zTemp1+1
.c294	a294	64 36		stz $36				stz 	zTemp0
.c296	a296	ad 75 06	lda $0675			lda 	EXTScreenWidth
.c299	a299	85 38		sta $38				sta 	zTemp1
.c29b	a29b	a0 00		ldy #$00			ldy 	#0
.c29d	a29d					_EXSFCopy1:
.c29d	a29d	b1 38		lda ($38),y			lda 	(zTemp1),y
.c29f	a29f	91 36		sta ($36),y			sta 	(zTemp0),y
.c2a1	a2a1	c8		iny				iny
.c2a2	a2a2	d0 f9		bne $a29d			bne 	_EXSFCopy1
.c2a4	a2a4	e6 37		inc $37				inc 	zTemp0+1 					; next page
.c2a6	a2a6	e6 39		inc $39				inc 	zTemp1+1
.c2a8	a2a8	a5 39		lda $39				lda 	zTemp1+1
.c2aa	a2aa	c9 d3		cmp #$d3			cmp 	#$D3
.c2ac	a2ac	d0 ef		bne $a29d			bne 	_EXSFCopy1
.c2ae	a2ae	ac 75 06	ldy $0675			ldy 	EXTScreenWidth 				; blank the bottom line.
.c2b1	a2b1	8a		txa				txa
.c2b2	a2b2					_EXSFFill1:
.c2b2	a2b2	88		dey				dey
.c2b3	a2b3	91 40		sta ($40),y			sta 	(EXTAddress),y
.c2b5	a2b5	c0 00		cpy #$00			cpy 	#0
.c2b7	a2b7	10 f9		bpl $a2b2			bpl 	_EXSFFill1
.c2b9	a2b9	68		pla				pla
.c2ba	a2ba	85 39		sta $39				sta 	zTemp1+1
.c2bc	a2bc	68		pla				pla
.c2bd	a2bd	85 38		sta $38				sta 	zTemp1
.c2bf	a2bf	68		pla				pla
.c2c0	a2c0	85 37		sta $37				sta 	zTemp0+1
.c2c2	a2c2	68		pla				pla
.c2c3	a2c3	85 36		sta $36				sta 	zTemp0
.c2c5	a2c5	60		rts				rts
=$c000						EXTMemory = $C000
=$02						EXTTextPage = $02
=$03						EXTColourPage = $03
=1						EXTDummySpace = 1 							; fake-space for CR character.
=0						EXTCBlack = 0
.0672						EXTRow:
>0672								.fill 	1
.0673						EXTColumn:
>0673								.fill 	1
.0674						EXTTextColour:
>0674								.fill 	1
.0675						EXTScreenWidth:
>0675								.fill 	1
.0676						EXTScreenHeight:
>0676								.fill 	1
.0040						EXTAddress:
>0040								.fill 	2
.c2c6	a2c6					Export_EXTInitialise:
.c2c6	a2c6	64 01		stz $01				stz 	1 							; Access I/O page 0
.c2c8	a2c8	9c 04 d0	stz $d004			stz 	$D004 						; Disable border
.c2cb	a2cb	9c 08 d0	stz $d008			stz 	$D008
.c2ce	a2ce	9c 09 d0	stz $d009			stz 	$D009
.c2d1	a2d1	a9 09		lda #$09			lda 	#1+8						; Timer On at 70Hz counting up.
.c2d3	a2d3	8d 58 d6	sta $d658			sta 	$D658
.c2d6	a2d6	a9 52		lda #$52			lda 	#$52
.c2d8	a2d8	8d 74 06	sta $0674			sta 	EXTTextColour
.c2db	a2db	a9 50		lda #$50			lda 	#80 						; set screen dimensions.
.c2dd	a2dd	8d 75 06	sta $0675			sta 	EXTScreenWidth
.c2e0	a2e0	a9 3c		lda #$3c			lda 	#60
.c2e2	a2e2	8d 76 06	sta $0676			sta 	EXTScreenHeight
.c2e5	a2e5	20 78 a1	jsr $a178			jsr 	EXTClearScreenCode 			; clear the screen
.c2e8	a2e8					_EXMoveDown:
.c2e8	a2e8	a9 0d		lda #$0d			lda 	#13
.c2ea	a2ea	20 0b a0	jsr $a00b			jsr 	PAGEDPrintCharacter
.c2ed	a2ed	ad 72 06	lda $0672			lda 	EXTRow
.c2f0	a2f0	c9 0a		cmp #$0a			cmp 	#Header_Height-4
.c2f2	a2f2	d0 f4		bne $a2e8			bne 	_EXMoveDown
.c2f4	a2f4	20 fa a2	jsr $a2fa			jsr 	EXTShowHeader
.c2f7	a2f7	64 01		stz $01				stz 	1
.c2f9	a2f9	60		rts				rts
.c2fa	a2fa					EXTShowHeader:
.c2fa	a2fa	a5 01		lda $01				lda 	1
.c2fc	a2fc	48		pha				pha
.c2fd	a2fd	a9 02		lda #$02			lda 	#2
.c2ff	a2ff	a2 ff		ldx #$ff			ldx 	#(Header_chars & $FF)
.c301	a301	a0 a4		ldy #$a4			ldy 	#(Header_chars >> 8)
.c303	a303	20 21 a3	jsr $a321			jsr 	_ESHCopyBlock
.c306	a306	a9 03		lda #$03			lda 	#3
.c308	a308	a2 67		ldx #$67			ldx 	#(Header_attrs & $FF)
.c30a	a30a	a0 a3		ldy #$a3			ldy 	#(Header_attrs >> 8)
.c30c	a30c	20 21 a3	jsr $a321			jsr 	_ESHCopyBlock
.c30f	a30f	64 01		stz $01				stz 	1
.c311	a311	a2 3f		ldx #$3f			ldx 	#16*4-1
.c313	a313					_EXTCopyLUT:
.c313	a313	bd 2f a7	lda $a72f,x			lda 	Header_Palette,x
.c316	a316	9d 00 d8	sta $d800,x			sta 	$D800,x
.c319	a319	9d 40 d8	sta $d840,x			sta 	$D840,x
.c31c	a31c	ca		dex				dex
.c31d	a31d	10 f4		bpl $a313			bpl 	_EXTCopyLUT
.c31f	a31f	68		pla				pla
.c320	a320	60		rts				rts
.c321	a321					_ESHCopyBlock:
.c321	a321	85 01		sta $01				sta 	1
.c323	a323	86 36		stx $36				stx 	zTemp0 						; zTemp0 is RLE packed data
.c325	a325	84 37		sty $37				sty 	zTemp0+1
.c327	a327	a9 00		lda #$00			lda 	#(($C000) & $FF)
.c329	a329	85 38		sta $38				sta 	0+zTemp1
.c32b	a32b	a9 c0		lda #$c0			lda 	#(($C000) >> 8)
.c32d	a32d	85 39		sta $39				sta 	1+zTemp1
.c32f	a32f					_ESHCopyLoop:
.c32f	a32f	b2 36		lda ($36)			lda 	(zTemp0) 					; get next character
.c331	a331	c9 ff		cmp #$ff			cmp 	#Header_RLE 				; packed ?
.c333	a333	f0 1b		beq $a350			beq 	_ESHUnpack
.c335	a335	92 38		sta ($38)			sta 	(zTemp1) 					; copy it out.
.c337	a337	a9 01		lda #$01			lda 	#1 							; source add 1
.c339	a339	a0 01		ldy #$01			ldy 	#1 							; dest add 1
.c33b	a33b					_ESHNext:
.c33b	a33b	18		clc				clc 								; zTemp0 + A
.c33c	a33c	65 36		adc $36				adc 	zTemp0
.c33e	a33e	85 36		sta $36				sta 	zTemp0
.c340	a340	90 02		bcc $a344			bcc 	_ESHNoCarry
.c342	a342	e6 37		inc $37				inc 	zTemp0+1
.c344	a344					_ESHNoCarry:
.c344	a344	98		tya				tya 								; zTemp1 + Y
.c345	a345	18		clc				clc
.c346	a346	65 38		adc $38				adc 	zTemp1
.c348	a348	85 38		sta $38				sta 	zTemp1
.c34a	a34a	90 e3		bcc $a32f			bcc 	_ESHCopyLoop
.c34c	a34c	e6 39		inc $39				inc 	zTemp1+1
.c34e	a34e	80 df		bra $a32f			bra 	_ESHCopyLoop
.c350	a350					_ESHUnpack:
.c350	a350	a0 02		ldy #$02			ldy 	#2 							; get count into X
.c352	a352	b1 36		lda ($36),y			lda 	(zTemp0),y
.c354	a354	aa		tax				tax
.c355	a355	88		dey				dey 								; byte into A
.c356	a356	b1 36		lda ($36),y			lda 	(zTemp0),y
.c358	a358	f0 0c		beq $a366			beq 	_ESHExit 					; exit if zero.
.c35a	a35a	a0 00		ldy #$00			ldy 	#0 							; copy start position
.c35c	a35c					_ESHCopyOut:
.c35c	a35c	91 38		sta ($38),y			sta 	(zTemp1),y
.c35e	a35e	c8		iny				iny
.c35f	a35f	ca		dex				dex
.c360	a360	d0 fa		bne $a35c			bne 	_ESHCopyOut
.c362	a362	a9 03		lda #$03			lda 	#3 							; Y is bytes on screen, 3 bytes from source
.c364	a364	80 d5		bra $a33b			bra 	_ESHNext
.c366	a366					_ESHExit:
.c366	a366	60		rts				rts
=14						Header_Height = 14
=255						Header_RLE = 255
.c367	a367					Header_attrs:
>c367	a367	ff 52 59 52 ff d8 07 d8			.byte	255,82,89,82,255,216,7,216,255,82,2,82,255,216,6,216,255,82,2,82,255,216,7,216,255,82,2,82,255,216,6,216,255,82,8,82,210,210,82,82,255,210,7,210,255,82,19,82,104,104,255,82,7,82,104,104,255,82,4,82,104,104,82,82,104,104,255,82,7,82,104,104,255,82,4,82,104,104,255,82,7,82,210,210,82,82,210,210,255,82,4,82,210,210,255,82,18,82,232,232,255,82,14,82,232,232,82,82,232,232,255,82,7,82,232,232,255,82,14,82,210,210,82,82,210,210,255,82,4,82,210,210,255,82,18,82,255,56,5,56,255,82,4,82,255,56,6,56,255,82,2,82,255,56,6,56,255,82,2,82,255,56,7,56,255,82,8,82,210,210,82,82,255,210,7,210,255,82,19,82,120,120,255,82,7,82,120,120,255,82,14,82,120,120,82,82,120,120,255,82,4,82,120,120,82,82,210,210,255,82,3,82,210,210,82,82,210,210,255,82,2,82,210,210,255,82,20,82,168,168,255,82,7,82,168,168,255,82,8,82,168,168,255,82,3,82,168,168,82,82,168,168,255,82,4,82,168,168,82,82,210,210,255,82,3,82,210,210,82,82,210,210,255,82,3,82,210,210,255,82,19,82,72,72,255,82,7,82,255,72,8,72,82,66,82,255,72,5,72,255,82,3,82,255,72,6,72,255,82,3,82,255,210,5,210,255,82,2,82,210,210,255,82,4,82,210,210,255,82,88,82,255,114,80,114,255,226,7,226,255,146,19,146,114,255,146,4,146,255,114,18,114,255,194,24,194,114,114,255,226,10,226,255,146,16,146,114,255,146,4,146,255,114,18,114,255,194,24,194,114,114,255,226,9,226,255,146,17,146,114,255,146,4,146,255,114,18,114,255,194,24,194,255,114,80,114,255,0
>c36f	a36f	ff 52 02 52 ff d8 06 d8 ff 52 02 52 ff d8 07 d8
>c37f	a37f	ff 52 02 52 ff d8 06 d8 ff 52 08 52 d2 d2 52 52
>c38f	a38f	ff d2 07 d2 ff 52 13 52 68 68 ff 52 07 52 68 68
>c39f	a39f	ff 52 04 52 68 68 52 52 68 68 ff 52 07 52 68 68
>c3af	a3af	ff 52 04 52 68 68 ff 52 07 52 d2 d2 52 52 d2 d2
>c3bf	a3bf	ff 52 04 52 d2 d2 ff 52 12 52 e8 e8 ff 52 0e 52
>c3cf	a3cf	e8 e8 52 52 e8 e8 ff 52 07 52 e8 e8 ff 52 0e 52
>c3df	a3df	d2 d2 52 52 d2 d2 ff 52 04 52 d2 d2 ff 52 12 52
>c3ef	a3ef	ff 38 05 38 ff 52 04 52 ff 38 06 38 ff 52 02 52
>c3ff	a3ff	ff 38 06 38 ff 52 02 52 ff 38 07 38 ff 52 08 52
>c40f	a40f	d2 d2 52 52 ff d2 07 d2 ff 52 13 52 78 78 ff 52
>c41f	a41f	07 52 78 78 ff 52 0e 52 78 78 52 52 78 78 ff 52
>c42f	a42f	04 52 78 78 52 52 d2 d2 ff 52 03 52 d2 d2 52 52
>c43f	a43f	d2 d2 ff 52 02 52 d2 d2 ff 52 14 52 a8 a8 ff 52
>c44f	a44f	07 52 a8 a8 ff 52 08 52 a8 a8 ff 52 03 52 a8 a8
>c45f	a45f	52 52 a8 a8 ff 52 04 52 a8 a8 52 52 d2 d2 ff 52
>c46f	a46f	03 52 d2 d2 52 52 d2 d2 ff 52 03 52 d2 d2 ff 52
>c47f	a47f	13 52 48 48 ff 52 07 52 ff 48 08 48 52 42 52 ff
>c48f	a48f	48 05 48 ff 52 03 52 ff 48 06 48 ff 52 03 52 ff
>c49f	a49f	d2 05 d2 ff 52 02 52 d2 d2 ff 52 04 52 d2 d2 ff
>c4af	a4af	52 58 52 ff 72 50 72 ff e2 07 e2 ff 92 13 92 72
>c4bf	a4bf	ff 92 04 92 ff 72 12 72 ff c2 18 c2 72 72 ff e2
>c4cf	a4cf	0a e2 ff 92 10 92 72 ff 92 04 92 ff 72 12 72 ff
>c4df	a4df	c2 18 c2 72 72 ff e2 09 e2 ff 92 11 92 72 ff 92
>c4ef	a4ef	04 92 ff 72 12 72 ff c2 18 c2 ff 72 50 72 ff 00
.c4ff	a4ff					Header_chars:
>c4ff	a4ff	ff 20 59 20 ff 08 07 08			.byte	255,32,89,32,255,8,7,8,255,32,2,32,255,8,6,8,255,32,2,32,255,8,7,8,255,32,2,32,255,8,6,8,255,32,8,32,252,252,32,32,255,252,7,252,255,32,19,32,8,8,255,32,7,32,8,8,255,32,4,32,8,8,32,32,8,8,255,32,7,32,8,8,255,32,4,32,8,8,255,32,7,32,252,252,32,32,252,252,255,32,4,32,252,252,255,32,18,32,8,8,255,32,14,32,8,8,32,32,8,8,255,32,7,32,8,8,255,32,14,32,252,252,32,32,252,252,255,32,4,32,252,252,255,32,18,32,255,8,5,8,255,32,4,32,255,8,6,8,255,32,2,32,255,8,6,8,255,32,2,32,255,8,7,8,255,32,8,32,252,252,32,32,255,252,7,252,255,32,19,32,8,8,255,32,7,32,8,8,255,32,14,32,8,8,32,32,8,8,255,32,4,32,8,8,32,32,252,252,255,32,3,32,252,252,32,32,252,252,255,32,2,32,252,252,255,32,20,32,8,8,255,32,7,32,8,8,255,32,8,32,8,8,255,32,3,32,8,8,32,32,8,8,255,32,4,32,8,8,32,32,252,252,255,32,3,32,252,252,32,32,252,252,255,32,3,32,252,252,255,32,19,32,8,8,255,32,7,32,255,8,8,8,255,32,2,32,255,8,5,8,255,32,3,32,255,8,6,8,255,32,3,32,255,252,5,252,255,32,2,32,252,252,255,32,4,32,252,252,255,32,88,32,160,255,150,27,150,155,255,150,22,150,155,255,150,24,150,161,130,72,97,114,100,119,97,114,101,255,32,19,32,130,221,50,48,50,50,32,83,116,101,102,97,110,121,32,65,108,108,97,105,114,101,32,32,130,99,50,53,54,102,111,101,110,105,120,46,99,111,109,47,102,50,53,54,45,106,114,255,32,2,32,130,130,77,105,99,114,111,75,101,114,110,101,108,255,32,16,32,130,221,50,48,50,50,32,74,101,115,115,105,101,32,79,98,101,114,114,101,117,116,101,114,130,71,97,100,103,101,116,64,72,97,99,107,119,114,101,110,99,104,76,97,98,115,46,99,111,109,130,130,83,117,112,101,114,66,65,83,73,67,255,32,17,32,130,221,50,48,50,50,32,80,97,117,108,32,82,111,98,115,111,110,255,32,5,32,130,80,97,117,108,64,82,111,98,115,111,110,115,46,111,114,103,46,117,107,255,32,5,32,130,162,255,150,27,150,157,255,150,22,150,157,255,150,24,150,163,255,0
>c507	a507	ff 20 02 20 ff 08 06 08 ff 20 02 20 ff 08 07 08
>c517	a517	ff 20 02 20 ff 08 06 08 ff 20 08 20 fc fc 20 20
>c527	a527	ff fc 07 fc ff 20 13 20 08 08 ff 20 07 20 08 08
>c537	a537	ff 20 04 20 08 08 20 20 08 08 ff 20 07 20 08 08
>c547	a547	ff 20 04 20 08 08 ff 20 07 20 fc fc 20 20 fc fc
>c557	a557	ff 20 04 20 fc fc ff 20 12 20 08 08 ff 20 0e 20
>c567	a567	08 08 20 20 08 08 ff 20 07 20 08 08 ff 20 0e 20
>c577	a577	fc fc 20 20 fc fc ff 20 04 20 fc fc ff 20 12 20
>c587	a587	ff 08 05 08 ff 20 04 20 ff 08 06 08 ff 20 02 20
>c597	a597	ff 08 06 08 ff 20 02 20 ff 08 07 08 ff 20 08 20
>c5a7	a5a7	fc fc 20 20 ff fc 07 fc ff 20 13 20 08 08 ff 20
>c5b7	a5b7	07 20 08 08 ff 20 0e 20 08 08 20 20 08 08 ff 20
>c5c7	a5c7	04 20 08 08 20 20 fc fc ff 20 03 20 fc fc 20 20
>c5d7	a5d7	fc fc ff 20 02 20 fc fc ff 20 14 20 08 08 ff 20
>c5e7	a5e7	07 20 08 08 ff 20 08 20 08 08 ff 20 03 20 08 08
>c5f7	a5f7	20 20 08 08 ff 20 04 20 08 08 20 20 fc fc ff 20
>c607	a607	03 20 fc fc 20 20 fc fc ff 20 03 20 fc fc ff 20
>c617	a617	13 20 08 08 ff 20 07 20 ff 08 08 08 ff 20 02 20
>c627	a627	ff 08 05 08 ff 20 03 20 ff 08 06 08 ff 20 03 20
>c637	a637	ff fc 05 fc ff 20 02 20 fc fc ff 20 04 20 fc fc
>c647	a647	ff 20 58 20 a0 ff 96 1b 96 9b ff 96 16 96 9b ff
>c657	a657	96 18 96 a1 82 48 61 72 64 77 61 72 65 ff 20 13
>c667	a667	20 82 dd 32 30 32 32 20 53 74 65 66 61 6e 79 20
>c677	a677	41 6c 6c 61 69 72 65 20 20 82 63 32 35 36 66 6f
>c687	a687	65 6e 69 78 2e 63 6f 6d 2f 66 32 35 36 2d 6a 72
>c697	a697	ff 20 02 20 82 82 4d 69 63 72 6f 4b 65 72 6e 65
>c6a7	a6a7	6c ff 20 10 20 82 dd 32 30 32 32 20 4a 65 73 73
>c6b7	a6b7	69 65 20 4f 62 65 72 72 65 75 74 65 72 82 47 61
>c6c7	a6c7	64 67 65 74 40 48 61 63 6b 77 72 65 6e 63 68 4c
>c6d7	a6d7	61 62 73 2e 63 6f 6d 82 82 53 75 70 65 72 42 41
>c6e7	a6e7	53 49 43 ff 20 11 20 82 dd 32 30 32 32 20 50 61
>c6f7	a6f7	75 6c 20 52 6f 62 73 6f 6e ff 20 05 20 82 50 61
>c707	a707	75 6c 40 52 6f 62 73 6f 6e 73 2e 6f 72 67 2e 75
>c717	a717	6b ff 20 05 20 82 a2 ff 96 1b 96 9d ff 96 16 96
>c727	a727	9d ff 96 18 96 a3 ff 00
.c72f	a72f					Header_Palette:
>c72f	a72f	00 00 00 00				.dword $000000
>c733	a733	66 66 66 00				.dword $666666
>c737	a737	aa 00 00 00				.dword $0000aa
>c73b	a73b	00 aa 00 00				.dword $00aa00
>c73f	a73f	ea 41 c0 00				.dword $c041ea
>c743	a743	00 48 87 00				.dword $874800
>c747	a747	00 9c ff 00				.dword $ff9c00
>c74b	a74b	ff db 57 00				.dword $57dbff
>c74f	a74f	28 3f 3f 00				.dword $3f3f28
>c753	a753	8a aa aa 00				.dword $aaaa8a
>c757	a757	ff 55 55 00				.dword $5555ff
>c75b	a75b	55 ff 55 00				.dword $55ff55
>c75f	a75f	ed 8d ff 00				.dword $ff8ded
>c763	a763	00 00 ff 00				.dword $ff0000
>c767	a767	55 ff ff 00				.dword $ffff55
>c76b	a76b	ff ff ff 00				.dword $ffffff
>c76f	a76f	ff ff ff 00				.dword $ffffff
>c773	a773	ff ff ff 00				.dword $ffffff

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_graphics.module

=1						graphicsIntegrated=1
=0						GCMD_Initialise = 0*2
=2						GCMD_BitmapCtl = 1*2
=4						GCMD_SpriteCtl = 2*2
=6						GCMD_Clear = 3*2
=8						GCMD_Colour = 4*2
=10						GCMD_DrawFont = 5*2
=12						GCMD_DrawSprite = 6*2
=14						GCMD_SpriteUse = 7*2
=16						GCMD_SpriteImage = 8*2
=18						GCMD_SpriteCollide = 9*2
=64						GCMD_Move = 32*2
=66						GCMD_Line = 33*2
=68						GCMD_FrameRect = 34*2
=70						GCMD_FillRect = 35*2
=72						GCMD_FrameCircle = 36*2
=74						GCMD_FillCircle = 37*2
=80						GCMD_Plot = 40*2
=82						GCMD_SpriteMove = 41*2
=42						GRFirstFreeCode = 42
.c777	a777					GRVectorTable:
>c777	a777	c6 a9					.word	GXInitialise             ; $00 Initialise
>c779	a779	e0 a9					.word	GXControlBitmap          ; $01 BitmapCtl
>c77b	a77b	28 aa					.word	GXControlSprite          ; $02 SpriteCtl
>c77d	a77d	78 a9					.word	GXClearBitmap            ; $03 Clear
>c77f	a77f	b7 ab					.word	GXSetColourMode          ; $04 Colour
>c781	a781	7f ad					.word	GXFontHandler            ; $05 DrawFont
>c783	a783	c7 ad					.word	GXSpriteHandler          ; $06 DrawSprite
>c785	a785	38 ae					.word	GXSelect                 ; $07 SpriteUse
>c787	a787	61 ae					.word	GXSelectImage            ; $08 SpriteImage
>c789	a789	e8 af					.word	GXCollide                ; $09 SpriteCollide
>c78b	a78b	2a a8					.word	GRUndefined              ; $0a
>c78d	a78d	2a a8					.word	GRUndefined              ; $0b
>c78f	a78f	2a a8					.word	GRUndefined              ; $0c
>c791	a791	2a a8					.word	GRUndefined              ; $0d
>c793	a793	2a a8					.word	GRUndefined              ; $0e
>c795	a795	2a a8					.word	GRUndefined              ; $0f
>c797	a797	2a a8					.word	GRUndefined              ; $10
>c799	a799	2a a8					.word	GRUndefined              ; $11
>c79b	a79b	2a a8					.word	GRUndefined              ; $12
>c79d	a79d	2a a8					.word	GRUndefined              ; $13
>c79f	a79f	2a a8					.word	GRUndefined              ; $14
>c7a1	a7a1	2a a8					.word	GRUndefined              ; $15
>c7a3	a7a3	2a a8					.word	GRUndefined              ; $16
>c7a5	a7a5	2a a8					.word	GRUndefined              ; $17
>c7a7	a7a7	2a a8					.word	GRUndefined              ; $18
>c7a9	a7a9	2a a8					.word	GRUndefined              ; $19
>c7ab	a7ab	2a a8					.word	GRUndefined              ; $1a
>c7ad	a7ad	2a a8					.word	GRUndefined              ; $1b
>c7af	a7af	2a a8					.word	GRUndefined              ; $1c
>c7b1	a7b1	2a a8					.word	GRUndefined              ; $1d
>c7b3	a7b3	2a a8					.word	GRUndefined              ; $1e
>c7b5	a7b5	2a a8					.word	GRUndefined              ; $1f
>c7b7	a7b7	28 a8					.word	GXMove                   ; $20 Move
>c7b9	a7b9	85 aa					.word	GXLine                   ; $21 Line
>c7bb	a7bb	00 ac					.word	GXFrameRectangle         ; $22 FrameRect
>c7bd	a7bd	fd ab					.word	GXFillRectangle          ; $23 FillRect
>c7bf	a7bf	2f a8					.word	GXFrameCircle            ; $24 FrameCircle
>c7c1	a7c1	2b a8					.word	GXFillCircle             ; $25 FillCircle
>c7c3	a7c3	2a a8					.word	GRUndefined              ; $26
>c7c5	a7c5	2a a8					.word	GRUndefined              ; $27
>c7c7	a7c7	e5 ab					.word	GXPlotPoint              ; $28 Plot
>c7c9	a7c9	f7 ae					.word	GXMoveSprite             ; $29 SpriteMove
=3						GXMappingPage = 3
=24576						GXMappingAddress = ($2000 * GXMappingPage)
=11						GXEditSlot = 8 + GXMappingPage
=$36						gxzTemp0 = zTemp0
=$38						gxzTemp1 = zTemp1
=$3a						gxzTemp2 = zTemp2
=$3c						gxzScreen = zsTemp
=$627						gxPixelBuffer = numberBuffer
.0677						gxCurrentX:
>0677								.fill 	2
.0679						gxCurrentY:
>0679								.fill 	2
.067b						gxLastX:
>067b								.fill 	2
.067d						gxLastY:
>067d								.fill 	2
.067f						gxX0:
>067f								.fill 	2
.0681						gxY0:
>0681								.fill 	2
.0683						gxX1:
>0683								.fill 	2
.0685						gxY1:
>0685								.fill 	2
.0687						gxSpritesOn:
>0687								.fill 	1
.0688						gxBitmapsOn:
>0688								.fill 	1
.0689						gxBasePage:
>0689								.fill 	1
.068a						gxSpritePage:
>068a								.fill 	1
.068b						gxHeight:
>068b								.fill 	1
.068c						gxMode:
>068c								.fill 	1
.068d						gxColour:
>068d								.fill 	1
.068e						gxEORValue:
>068e								.fill 	1
.068f						gxANDValue:
>068f								.fill 	1
.0690						gxOriginalLUTValue:
>0690								.fill 	1
.0691						gxOffset:
>0691								.fill 	1
.0692						GSCurrentSpriteID:
>0692								.fill 	1
.0693						GSCurrentSpriteAddr:
>0693								.fill 	2
.0695						gxSpriteOffsetBase:
>0695								.fill 	2
.0697						gxSpriteLow:
>0697								.fill 	64
.06d7						gxSpriteHigh:
>06d7								.fill 	64
.c7cb	a7cb					Export_GXGraphicDraw:
.c7cb	a7cb	c9 40		cmp #$40			cmp 	#GCMD_Move					; low instructions don't use coordinates
.c7cd	a7cd	b0 06		bcs $a7d5			bcs 	_GDCoordinate
.c7cf	a7cf	86 36		stx $36				stx 	gxzTemp0 					; save X/Y
.c7d1	a7d1	84 37		sty $37				sty 	gxzTemp0+1
.c7d3	a7d3	80 4b		bra $a820			bra 	_GDExecuteA 				; and execute
.c7d5	a7d5					_GDCoordinate:
.c7d5	a7d5	48		pha				pha 								; save AXY
.c7d6	a7d6	da		phx				phx
.c7d7	a7d7	5a		phy				phy
.c7d8	a7d8	a2 03		ldx #$03			ldx 	#3 							; copy currentX to lastX
.c7da	a7da					_GDCopy1:
.c7da	a7da	bd 77 06	lda $0677,x			lda 	gxCurrentX,x
.c7dd	a7dd	9d 7b 06	sta $067b,x			sta 	gxLastX,x
.c7e0	a7e0	ca		dex				dex
.c7e1	a7e1	10 f7		bpl $a7da			bpl 	_GDCopy1
.c7e3	a7e3	68		pla				pla 								; update Y
.c7e4	a7e4	8d 79 06	sta $0679			sta 	gxCurrentY
.c7e7	a7e7	9c 7a 06	stz $067a			stz 	gxCurrentY+1
.c7ea	a7ea	68		pla				pla
.c7eb	a7eb	8d 77 06	sta $0677			sta 	gxCurrentX
.c7ee	a7ee	68		pla				pla 								; get A (command+X.1) back
.c7ef	a7ef	48		pha				pha
.c7f0	a7f0	29 01		and #$01			and 	#1 							; put LSB as MSB of Current.X
.c7f2	a7f2	8d 78 06	sta $0678			sta 	gxCurrentX+1
.c7f5	a7f5	68		pla				pla 								; get command back
.c7f6	a7f6	29 fe		and #$fe			and 	#$FE 						; lose LSB, chuck the stray X bit
.c7f8	a7f8	48		pha				pha 								; push back.
.c7f9	a7f9	c9 52		cmp #$52			cmp 	#GCMD_SpriteMove 			; move sprite does not clip.
.c7fb	a7fb	f0 17		beq $a814			beq 	_GDCopyToWorkArea
.c7fd	a7fd	ad 78 06	lda $0678			lda 	gxCurrentX+1 				; X < 256 X okay
.c800	a800	f0 07		beq $a809			beq 	_GDCheckY
.c802	a802	ad 77 06	lda $0677			lda 	gxCurrentX 					; otherwise X < 320 = 256 + 64
.c805	a805	c9 40		cmp #$40			cmp 	#64
.c807	a807	b0 08		bcs $a811			bcs 	_GDError1
.c809	a809					_GDCheckY:
.c809	a809	ad 79 06	lda $0679			lda 	gxCurrentY 					; check Y < Height.
.c80c	a80c	cd 8b 06	cmp $068b			cmp 	gxHeight
.c80f	a80f	90 03		bcc $a814			bcc 	_GDCopyToWorkArea
.c811	a811					_GDError1:
.c811	a811	68		pla				pla
.c812	a812					_GDError2:
.c812	a812	38		sec				sec
.c813	a813	60		rts				rts
.c814	a814					_GDCopyToWorkArea:
.c814	a814	a2 07		ldx #$07			ldx 	#7 							; copy current and last to gxXY/12 work area
.c816	a816					_GDCopy2:
.c816	a816	bd 77 06	lda $0677,x			lda 	gxCurrentX,x
.c819	a819	9d 7f 06	sta $067f,x			sta 	gxX0,x
.c81c	a81c	ca		dex				dex
.c81d	a81d	10 f7		bpl $a816			bpl 	_GDCopy2
.c81f	a81f	68		pla				pla 								; get command
.c820	a820					_GDExecuteA:
.c820	a820	c9 54		cmp #$54			cmp 	#GRFirstFreeCode*2 			; bad ?
.c822	a822	b0 ee		bcs $a812			bcs 	_GDError2
.c824	a824	aa		tax				tax
.c825	a825	7c 77 a7	jmp ($a777,x)			jmp 	(GRVectorTable,x)
.c828	a828					GXMove:
.c828	a828	18		clc				clc
.c829	a829	60		rts				rts
.c82a	a82a					GRUndefined:
>c82a	a82a	db						.byte 	$DB 						; causes a break in the emulator
.c82b	a82b					GXFillCircle:
.c82b	a82b	a9 ff		lda #$ff			lda 	#255
.c82d	a82d	80 02		bra $a831			bra 	GXCircle
.c82f	a82f					GXFrameCircle:
.c82f	a82f	a9 00		lda #$00			lda 	#0
.c831	a831					GXCircle:
.c831	a831	8d 1a 07	sta $071a			sta 	gxIsFillMode					; save Fill flag
.c834	a834	ad 88 06	lda $0688			lda 	gxBitmapsOn
.c837	a837	f0 26		beq $a85f			beq 	_GXCFail
.c839	a839	20 8f b0	jsr $b08f			jsr 	GXSortXY 					; topleft/bottomright
.c83c	a83c	20 67 af	jsr $af67			jsr 	GXOpenBitmap 				; start drawing
.c83f	a83f	20 31 a9	jsr $a931			jsr 	GXCircleSetup 				; set up for drawing
.c842	a842	9c 1b 07	stz $071b			stz 	gxYChanged
.c845	a845					_GXCircleDraw:
.c845	a845	ad 18 07	lda $0718			lda 	gxxCentre					; while x <= y
.c848	a848	cd 19 07	cmp $0719			cmp 	gxYCentre
.c84b	a84b	90 0a		bcc $a857			bcc 	_GXCircleContinue
.c84d	a84d	d0 03		bne $a852			bne 	_GXNoLast
.c84f	a84f	20 64 a8	jsr $a864			jsr 	GXPlot1
.c852	a852					_GXNoLast:
.c852	a852	20 6f af	jsr $af6f			jsr 	GXCloseBitmap 				; close the bitmap
.c855	a855	18		clc				clc
.c856	a856	60		rts				rts
.c857	a857					_GXCircleContinue:
.c857	a857	20 61 a8	jsr $a861			jsr 	GXPlot2 					; draw it
.c85a	a85a	20 de a8	jsr $a8de			jsr 	GXCircleMove 				; adjust the coordinates
.c85d	a85d	80 e6		bra $a845			bra 	_GXCircleDraw
.c85f	a85f					_GXCFail:
.c85f	a85f	38		sec				sec
.c860	a860	60		rts				rts
.c861	a861					GXPlot2:
.c861	a861	20 64 a8	jsr $a864			jsr 	GXPlot1 						; plot and swap, fall through does twice
.c864	a864					GXPlot1:
.c864	a864	ad 19 07	lda $0719			lda 	gxYCentre 						; if y = 0, don't do it twice (xor)
.c867	a867	f0 03		beq $a86c			beq 	_GXPlot1Only
.c869	a869	20 88 a8	jsr $a888			jsr 	GXPlot0 						; plot and negate
.c86c	a86c					_GXPlot1Only:
.c86c	a86c	20 88 a8	jsr $a888			jsr 	GXPlot0 						; twice, undoing negation
.c86f	a86f	ad 18 07	lda $0718			lda 	gxxCentre 						; swap X and Y
.c872	a872	ae 19 07	ldx $0719			ldx	 	gxYCentre
.c875	a875	8d 19 07	sta $0719			sta 	gxYCentre
.c878	a878	8e 18 07	stx $0718			stx 	gxxCentre
.c87b	a87b	ad 1b 07	lda $071b			lda 	gxYChanged 						; toggle Y Changed flag
.c87e	a87e	a9 ff		lda #$ff			lda 	#$FF
.c880	a880	8d 1b 07	sta $071b			sta 	gxYChanged
.c883	a883	60		rts				rts
.c884	a884	20 88 a8	jsr $a888			jsr 	GXPlot0 						; do once
.c887	a887	60		rts				rts
.c888	a888	ad 1a 07	lda $071a	GXPlot0:lda 	gxIsFillMode 					; outline mode, always draw as X or Y will change
.c88b	a88b	f0 05		beq $a892			beq 	_GXPlot0Always
.c88d	a88d	ad 1b 07	lda $071b			lda 	gxYChanged						; fill mode, only draw if changed.
.c890	a890	f0 2d		beq $a8bf			beq 	GXPlot0Exit
.c892	a892					_GXPlot0Always:
.c892	a892	a2 02		ldx #$02			ldx 	#2 								; copy Y1-A => Y0
.c894	a894	ad 19 07	lda $0719			lda 	gxYCentre
.c897	a897	20 c0 a8	jsr $a8c0			jsr 	GXSubCopy
.c89a	a89a	a2 00		ldx #$00			ldx 	#0 								; copy X1-A => X0,
.c89c	a89c	ad 18 07	lda $0718			lda 	gxxCentre
.c89f	a89f	20 c0 a8	jsr $a8c0			jsr 	GXSubCopy
.c8a2	a8a2	48		pha				pha 									; save last offset X
.c8a3	a8a3	20 77 af	jsr $af77			jsr 	gxPositionCalc 					; calculate position/offset.
.c8a6	a8a6	68		pla				pla
.c8a7	a8a7	0a		asl a				asl 	a 								; store 2 x last offset in gxzTemp0
.c8a8	a8a8	85 36		sta $36				sta 	gxzTemp0
.c8aa	a8aa	64 37		stz $37				stz 	gxzTemp0+1
.c8ac	a8ac	26 37		rol $37				rol 	gxzTemp0+1
.c8ae	a8ae	ad 1a 07	lda $071a			lda 	gxIsFillMode
.c8b1	a8b1	69 80		adc #$80			adc 	#128
.c8b3	a8b3	20 50 ac	jsr $ac50			jsr 	GXDrawLineTemp0 				; routine from Rectangle.
.c8b6	a8b6	38		sec				sec 									; GY = -GY
.c8b7	a8b7	a9 00		lda #$00			lda 	#0
.c8b9	a8b9	ed 19 07	sbc $0719			sbc 	gxYCentre
.c8bc	a8bc	8d 19 07	sta $0719			sta 	gxYCentre
.c8bf	a8bf					GXPlot0Exit:
.c8bf	a8bf	60		rts				rts
.c8c0	a8c0					GXSubCopy:
.c8c0	a8c0	85 36		sta $36				sta 	gxzTemp0
.c8c2	a8c2	64 37		stz $37				stz 	gxzTemp0+1
.c8c4	a8c4	29 80		and #$80			and 	#$80
.c8c6	a8c6	f0 02		beq $a8ca			beq 	_GXNoSx
.c8c8	a8c8	c6 37		dec $37				dec 	gxzTemp0+1
.c8ca	a8ca					_GXNoSx:
.c8ca	a8ca	38		sec				sec
.c8cb	a8cb	bd 83 06	lda $0683,x			lda 	gxX1,x
.c8ce	a8ce	e5 36		sbc $36				sbc 	gxzTemp0
.c8d0	a8d0	9d 7f 06	sta $067f,x			sta 	gxX0,x
.c8d3	a8d3	bd 84 06	lda $0684,x			lda 	gxX1+1,x
.c8d6	a8d6	e5 37		sbc $37				sbc 	gxzTemp0+1
.c8d8	a8d8	9d 80 06	sta $0680,x			sta 	gxX0+1,x
.c8db	a8db	a5 36		lda $36				lda 	gxzTemp0 						; return A
.c8dd	a8dd	60		rts				rts
.c8de	a8de					GXCircleMove:
.c8de	a8de	9c 1b 07	stz $071b			stz 	gxYChanged 					; clear Y changed flag
.c8e1	a8e1	a5 39		lda $39				lda 	gxzTemp1+1 					; check sign of D
.c8e3	a8e3	10 0d		bpl $a8f2			bpl 	_GXEMPositive
.c8e5	a8e5	ee 18 07	inc $0718			inc 	gxxCentre 					; X++
.c8e8	a8e8	ad 18 07	lda $0718			lda 	gxxCentre
.c8eb	a8eb	20 11 a9	jsr $a911			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.c8ee	a8ee	a9 06		lda #$06			lda 	#6  						; and add 6
.c8f0	a8f0	80 15		bra $a907			bra 	_GXEMAddD
.c8f2	a8f2					_GXEMPositive:
.c8f2	a8f2	ee 18 07	inc $0718			inc 	gxxCentre					; X++
.c8f5	a8f5	ce 19 07	dec $0719			dec 	gxYCentre 					; Y--
.c8f8	a8f8	38		sec				sec 								; calculate X-Y
.c8f9	a8f9	ad 18 07	lda $0718			lda 	gxxCentre
.c8fc	a8fc	ed 19 07	sbc $0719			sbc 	gxYCentre
.c8ff	a8ff	20 11 a9	jsr $a911			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.c902	a902	a9 0a		lda #$0a			lda 	#10  						; and add 10
.c904	a904	ce 1b 07	dec $071b			dec 	gxYChanged
.c907	a907					_GXEMAddD:
.c907	a907	18		clc				clc
.c908	a908	65 38		adc $38				adc 	gxzTemp1
.c90a	a90a	85 38		sta $38				sta 	gxzTemp1
.c90c	a90c	90 02		bcc $a910			bcc 	_GXEMNoCarry
.c90e	a90e	e6 39		inc $39				inc 	gxzTemp1+1
.c910	a910					_GXEMNoCarry:
.c910	a910	60		rts				rts
.c911	a911					_GXAdd4TimesToD:
.c911	a911	85 36		sta $36				sta 	gxzTemp0 					; make 16 bit signed.
.c913	a913	29 80		and #$80			and 	#$80
.c915	a915	f0 02		beq $a919			beq 	_GXA4Unsigned
.c917	a917	a9 ff		lda #$ff			lda 	#$FF
.c919	a919					_GXA4Unsigned:
.c919	a919	85 37		sta $37				sta 	gxzTemp0+1
.c91b	a91b	06 36		asl $36				asl 	gxzTemp0  					; x 4
.c91d	a91d	26 37		rol $37				rol 	gxzTemp0+1
.c91f	a91f	06 36		asl $36				asl 	gxzTemp0
.c921	a921	26 37		rol $37				rol 	gxzTemp0+1
.c923	a923	18		clc				clc 								; add
.c924	a924	a5 36		lda $36				lda		gxzTemp0
.c926	a926	65 38		adc $38				adc 	gxzTemp1
.c928	a928	85 38		sta $38				sta 	gxzTemp1
.c92a	a92a	a5 37		lda $37				lda		gxzTemp0+1
.c92c	a92c	65 39		adc $39				adc 	gxzTemp1+1
.c92e	a92e	85 39		sta $39				sta 	gxzTemp1+1
.c930	a930	60		rts				rts
.c931	a931					GXCircleSetup:
.c931	a931	38		sec				sec
.c932	a932	ad 85 06	lda $0685			lda 	gxY1
.c935	a935	ed 81 06	sbc $0681			sbc 	gxY0
.c938	a938	4a		lsr a				lsr 	a
.c939	a939	8d 17 07	sta $0717			sta 	gxRadius
.c93c	a93c	a2 00		ldx #$00			ldx 	#0
.c93e	a93e	20 60 a9	jsr $a960			jsr 	_GXCalculateCentre
.c941	a941	a2 02		ldx #$02			ldx 	#2
.c943	a943	20 60 a9	jsr $a960			jsr 	_GXCalculateCentre
.c946	a946	9c 18 07	stz $0718			stz 	gxxCentre
.c949	a949	ad 17 07	lda $0717			lda 	gxRadius
.c94c	a94c	8d 19 07	sta $0719			sta 	gxYCentre
.c94f	a94f	0a		asl a				asl 	a 							; R x 2
.c950	a950	85 36		sta $36				sta 	gxzTemp0
.c952	a952	38		sec				sec
.c953	a953	a9 03		lda #$03			lda 	#3
.c955	a955	e5 36		sbc $36				sbc 	gxzTemp0
.c957	a957	85 38		sta $38				sta 	gxzTemp1
.c959	a959	a9 00		lda #$00			lda 	#0
.c95b	a95b	e9 00		sbc #$00			sbc 	#0
.c95d	a95d	85 39		sta $39				sta 	gxzTemp1+1
.c95f	a95f	60		rts				rts
.c960	a960					_GXCalculateCentre:
.c960	a960	38		sec				sec
.c961	a961	bd 83 06	lda $0683,x			lda 	gxX1,x
.c964	a964	7d 7f 06	adc $067f,x			adc 	gxX0,x
.c967	a967	9d 83 06	sta $0683,x			sta 	gxX1,x
.c96a	a96a	bd 84 06	lda $0684,x			lda 	gxX1+1,x
.c96d	a96d	7d 80 06	adc $0680,x			adc 	gxX0+1,x
.c970	a970	4a		lsr a				lsr 	a
.c971	a971	9d 84 06	sta $0684,x			sta 	gxX1+1,x
.c974	a974	7e 83 06	ror $0683,x			ror 	gxX1,x
.c977	a977	60		rts				rts
.0717						gxRadius:
>0717								.fill 	1
.0718						gxxCentre:
>0718								.fill 	1
.0719						gxYCentre:
>0719								.fill 	1
.071a						gxIsFillMode:
>071a								.fill 	1
.071b						gxYChanged:
>071b								.fill  	1
=64000						ScreenSize200 = 320 * 200
=76800						ScreenSize240 = 320 * 240
.c978	a978					GXClearBitmap:
.c978	a978	ad 88 06	lda $0688			lda 	gxBitmapsOn 				; check BMP running.
.c97b	a97b	f0 24		beq $a9a1			beq 	_GXCBFail
.c97d	a97d	20 67 af	jsr $af67			jsr 	GXOpenBitmap 				; start access
.c980	a980	a0 07		ldy #$07			ldy 	#ScreenSize200 / 8192 		; X is pages to clear
.c982	a982	ad 8b 06	lda $068b			lda 	gxHeight
.c985	a985	c9 c8		cmp #$c8			cmp 	#200 						; 200 ?
.c987	a987	a0 09		ldy #$09			ldy 	#ScreenSize240 / 8192
.c989	a989					_GXCalcLastPage:
.c989	a989	98		tya				tya 								; add to base page
.c98a	a98a	18		clc				clc
.c98b	a98b	6d 89 06	adc $0689			adc 	gxBasePage
.c98e	a98e	85 0b		sta $0b				sta 	GXEditSlot  				; clear from this page back
.c990	a990					_GXClearAll:
.c990	a990	20 a3 a9	jsr $a9a3			jsr 	_GXClearBlock 				; clear 8k block
.c993	a993	c6 0b		dec $0b				dec 	GXEditSlot  				; back to previous
.c995	a995	a5 0b		lda $0b				lda 	GXEditSlot
.c997	a997	cd 89 06	cmp $0689			cmp 	gxBasePage 					; until before base page
.c99a	a99a	b0 f4		bcs $a990			bcs 	_GXClearAll
.c99c	a99c	20 6f af	jsr $af6f			jsr 	GXCloseBitmap	 			; stop access
.c99f	a99f	18		clc				clc
.c9a0	a9a0	60		rts				rts
.c9a1	a9a1					_GXCBFail:
.c9a1	a9a1	38		sec				sec
.c9a2	a9a2	60		rts				rts
.c9a3	a9a3					_GXClearBlock:
.c9a3	a9a3	a9 00		lda #$00			lda 	#((GXMappingAddress) & $FF)
.c9a5	a9a5	85 38		sta $38				sta 	0+gxzTemp1
.c9a7	a9a7	a9 60		lda #$60			lda 	#((GXMappingAddress) >> 8)
.c9a9	a9a9	85 39		sta $39				sta 	1+gxzTemp1
.c9ab	a9ab					_GXCB0:
.c9ab	a9ab	a5 36		lda $36				lda 	gxzTemp0
.c9ad	a9ad	a0 00		ldy #$00			ldy 	#0
.c9af	a9af					_GXCB1:
.c9af	a9af	91 38		sta ($38),y			sta 	(gxzTemp1),y
.c9b1	a9b1	c8		iny				iny
.c9b2	a9b2	91 38		sta ($38),y			sta 	(gxzTemp1),y
.c9b4	a9b4	c8		iny				iny
.c9b5	a9b5	91 38		sta ($38),y			sta 	(gxzTemp1),y
.c9b7	a9b7	c8		iny				iny
.c9b8	a9b8	91 38		sta ($38),y			sta 	(gxzTemp1),y
.c9ba	a9ba	c8		iny				iny
.c9bb	a9bb	d0 f2		bne $a9af			bne 	_GXCB1
.c9bd	a9bd	e6 39		inc $39				inc 	gxzTemp1+1
.c9bf	a9bf	a5 39		lda $39				lda 	gxzTemp1+1
.c9c1	a9c1	c9 80		cmp #$80			cmp	 	#(GXMappingAddress >> 8)+$20
.c9c3	a9c3	d0 e6		bne $a9ab			bne 	_GXCB0
.c9c5	a9c5	60		rts				rts
.c9c6	a9c6					GXInitialise:
.c9c6	a9c6	64 01		stz $01				stz 	1
.c9c8	a9c8	a9 01		lda #$01			lda 	#1
.c9ca	a9ca	8d 00 d0	sta $d000			sta 	$D000
.c9cd	a9cd	18		clc				clc
.c9ce	a9ce	9c 87 06	stz $0687			stz 	gxSpritesOn
.c9d1	a9d1	9c 88 06	stz $0688			stz 	gxBitmapsOn
.c9d4	a9d4	a2 0f		ldx #$0f			ldx 	#15
.c9d6	a9d6					_GXIClear:
.c9d6	a9d6	9e 77 06	stz $0677,x			stz 	gxCurrentX,x
.c9d9	a9d9	ca		dex				dex
.c9da	a9da	10 fa		bpl $a9d6			bpl 	_GXIClear
.c9dc	a9dc	20 77 aa	jsr $aa77			jsr 	GXClearSpriteStore
.c9df	a9df	60		rts				rts
.c9e0	a9e0					GXControlBitmap:
.c9e0	a9e0	64 01		stz $01				stz 	1
.c9e2	a9e2	a5 36		lda $36				lda 	gxzTemp0 					; get control bits
.c9e4	a9e4	29 01		and #$01			and 	#1 							; set bitmap flag
.c9e6	a9e6	8d 88 06	sta $0688			sta 	gxBitmapsOn
.c9e9	a9e9	4a		lsr a				lsr 	a 							; bit 0 into carry.
.c9ea	a9ea	ad 00 d0	lda $d000			lda 	$D000 						; read Vicky MCR
.c9ed	a9ed	09 07		ora #$07			ora 	#7 							; turn graphics, text, textoverlay on.
.c9ef	a9ef	29 f7		and #$f7			and 	#$F7 						; clear bitmap bit
.c9f1	a9f1	90 02		bcc $a9f5			bcc 	_CBNotOn
.c9f3	a9f3	09 08		ora #$08			ora 	#$08 						; bitmap on if 1 on 0 off
.c9f5	a9f5					_CBNotOn:
.c9f5	a9f5	8d 00 d0	sta $d000			sta 	$D000 						; update Vicky MCR
.c9f8	a9f8	a5 36		lda $36				lda 	gxzTemp0 					; get control settings (bits 0-2)
.c9fa	a9fa	29 07		and #$07			and 	#7
.c9fc	a9fc	8d 00 d1	sta $d100			sta 	$D100 						; write in Vicky Bitmap Control Register #0
.c9ff	a9ff	a5 37		lda $37				lda 	gxzTemp0+1 					; get the base page
.ca01	aa01	d0 02		bne $aa05			bne 	_CBNotDefault
.ca03	aa03	a9 08		lda #$08			lda 	#8  						; if zero, use 8 e.g. bitmap at $10000
.ca05	aa05					_CBNotDefault:
.ca05	aa05	8d 89 06	sta $0689			sta 	gxBasePage
.ca08	aa08	20 69 aa	jsr $aa69			jsr 	GXCalculateBaseAddress 	 	; convert page# to address
.ca0b	aa0b	a5 37		lda $37				lda 	gxzTemp0+1 					; copy address into Bitmap address registers
.ca0d	aa0d	8d 03 d1	sta $d103			sta 	$D103
.ca10	aa10	a5 36		lda $36				lda 	gxzTemp0
.ca12	aa12	8d 02 d1	sta $d102			sta 	$D102
.ca15	aa15	9c 01 d1	stz $d101			stz 	$D101
.ca18	aa18	a2 f0		ldx #$f0			ldx 	#240 						; height is 240
.ca1a	aa1a	ad 01 d0	lda $d001			lda 	$D001 						; read MCR bit 0
.ca1d	aa1d	29 01		and #$01			and 	#1
.ca1f	aa1f	f0 02		beq $aa23			beq 	_CBHaveHeight
.ca21	aa21	a2 c8		ldx #$c8			ldx 	#200 						; if bit 0 set 320x200
.ca23	aa23					_CBHaveHeight
.ca23	aa23	8e 8b 06	stx $068b			stx 	gxHeight
.ca26	aa26	18		clc				clc
.ca27	aa27	60		rts				rts
.ca28	aa28					GXControlSprite:
.ca28	aa28	64 01		stz $01				stz 	1
.ca2a	aa2a	a5 36		lda $36				lda 	gxzTemp0 					; get control bits
.ca2c	aa2c	29 01		and #$01			and 	#1 							; set sprites flag
.ca2e	aa2e	8d 87 06	sta $0687			sta 	gxSpritesOn
.ca31	aa31	4a		lsr a				lsr 	a 							; bit 0 into carry.
.ca32	aa32	ad 00 d0	lda $d000			lda 	$D000 						; read Vicky MCR
.ca35	aa35	09 07		ora #$07			ora 	#7 							; turn graphics, text, textoverlay on.
.ca37	aa37	29 df		and #$df			and 	#$DF 						; clear sprite bit
.ca39	aa39	90 02		bcc $aa3d			bcc 	_CSNotOn
.ca3b	aa3b	09 20		ora #$20			ora 	#$20 						; sprite on if 1 on 0 off
.ca3d	aa3d					_CSNotOn:
.ca3d	aa3d	8d 00 d0	sta $d000			sta 	$D000 						; update Vicky MCR
.ca40	aa40	a5 37		lda $37				lda 	gxzTemp0+1 					; get the base page
.ca42	aa42	d0 02		bne $aa46			bne 	_CSNotDefault
.ca44	aa44	a9 18		lda #$18			lda 	#24  						; if zero, use 24 e.g. sprites at $30000
.ca46	aa46					_CSNotDefault:
.ca46	aa46	8d 8a 06	sta $068a			sta 	gxSpritePage
.ca49	aa49	20 69 aa	jsr $aa69			jsr 	GXCalculateBaseAddress 	 	; convert page# to address
.ca4c	aa4c	a5 36		lda $36				lda 	gxzTemp0
.ca4e	aa4e	8d 95 06	sta $0695			sta 	gxSpriteOffsetBase
.ca51	aa51	a5 37		lda $37				lda 	gxzTemp0+1
.ca53	aa53	8d 96 06	sta $0696			sta 	gxSpriteOffsetBase+1
.ca56	aa56	a2 00		ldx #$00			ldx 	#0 							; disable all sprites, clears all sprite memory.
.ca58	aa58					_CSClear:
.ca58	aa58	9e 00 d9	stz $d900,x			stz 	$D900,x
.ca5b	aa5b	9e 00 da	stz $da00,x			stz 	$DA00,x
.ca5e	aa5e	ca		dex				dex
.ca5f	aa5f	d0 f7		bne $aa58			bne 	_CSClear
.ca61	aa61	9c 94 06	stz $0694			stz 	GSCurrentSpriteAddr+1 		; no sprite selected.
.ca64	aa64	20 77 aa	jsr $aa77			jsr 	GXClearSpriteStore
.ca67	aa67	18		clc				clc
.ca68	aa68	60		rts				rts
.ca69	aa69					GXCalculateBaseAddress:
.ca69	aa69	85 36		sta $36				sta 	gxzTemp0
.ca6b	aa6b	64 37		stz $37				stz 	gxzTemp0+1
.ca6d	aa6d	a9 05		lda #$05			lda 	#5
.ca6f	aa6f					_GXShift:
.ca6f	aa6f	06 36		asl $36				asl 	gxzTemp0
.ca71	aa71	26 37		rol $37				rol 	gxzTemp0+1
.ca73	aa73	3a		dec a				dec		a
.ca74	aa74	d0 f9		bne $aa6f			bne 	_GXShift
.ca76	aa76	60		rts				rts
.ca77	aa77					GXClearSpriteStore:
.ca77	aa77	a2 3f		ldx #$3f			ldx 	#63 						; erase 64 sprite store elements
.ca79	aa79					_GXCSSLoop:
.ca79	aa79	9e d7 06	stz $06d7,x			stz 	gxSpriteHigh,x
.ca7c	aa7c	a9 80		lda #$80			lda 	#$80 						; set the 'hidden' bit.
.ca7e	aa7e	9d 97 06	sta $0697,x			sta 	gxSpriteLow,x
.ca81	aa81	ca		dex				dex
.ca82	aa82	10 f5		bpl $aa79			bpl 	_GXCSSLoop
.ca84	aa84	60		rts				rts
.ca85	aa85					GXLine:
.ca85	aa85	ad 88 06	lda $0688			lda 	gxBitmapsOn
.ca88	aa88	f0 28		beq $aab2			beq 	_GXLFail
.ca8a	aa8a	20 67 af	jsr $af67			jsr 	GXOpenBitmap
.ca8d	aa8d	20 ad b0	jsr $b0ad			jsr 	GXSortY						; sort pairs so Y1 >= Y0 e.g. top to bottom.
.ca90	aa90	20 58 ab	jsr $ab58			jsr 	GXLineSetup 				; the calculations in the linescanner constructor
.ca93	aa93	20 77 af	jsr $af77			jsr 	gxPositionCalc 				; calculate position/offset.
.ca96	aa96					_GXDrawLoop:
.ca96	aa96	ac 91 06	ldy $0691			ldy 	gxOffset 					; draw the pixel
.ca99	aa99	b1 3c		lda ($3c),y			lda 	(gxzScreen),y
.ca9b	aa9b	2d 8f 06	and $068f			and 	gxANDValue
.ca9e	aa9e	4d 8e 06	eor $068e			eor 	gxEORValue
.caa1	aaa1	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.caa3	aaa3	20 b4 aa	jsr $aab4			jsr 	GXLineIsComplete 			; is the line complete ?
.caa6	aaa6	f0 05		beq $aaad			beq 	_GXLExit
.caa8	aaa8	20 cf aa	jsr $aacf			jsr 	GXLineAdvance 				; code as per advance method
.caab	aaab	80 e9		bra $aa96			bra 	_GXDrawLoop
.caad	aaad					_GXLExit:
.caad	aaad	20 6f af	jsr $af6f			jsr 	GXCloseBitmap
.cab0	aab0	18		clc				clc
.cab1	aab1	60		rts				rts
.cab2	aab2					_GXLFail:
.cab2	aab2	38		sec				sec
.cab3	aab3	60		rts				rts
.cab4	aab4					GXLineIsComplete:
.cab4	aab4	ad 1e 07	lda $071e			lda 	gxIsDiffYLarger 			; is dy larger
.cab7	aab7	d0 0f		bne $aac8			bne 	_GXLICCompareY 				; if so compare Y1/Y0
.cab9	aab9	ad 7f 06	lda $067f			lda 	gxX0 						; compare X, LSB and MSB
.cabc	aabc	4d 83 06	eor $0683			eor 	gxX1
.cabf	aabf	d0 06		bne $aac7			bne 	_GXLICExit
.cac1	aac1	ad 80 06	lda $0680			lda 	gxX0+1
.cac4	aac4	4d 84 06	eor $0684			eor 	gxX1+1
.cac7	aac7					_GXLICExit:
.cac7	aac7	60		rts				rts
.cac8	aac8					_GXLICCompareY:
.cac8	aac8	ad 85 06	lda $0685			lda 	gxY1
.cacb	aacb	4d 81 06	eor $0681			eor 	gxY0
.cace	aace	60		rts				rts
.cacf	aacf					GXLineAdvance:
.cacf	aacf	18		clc				clc 								; add adjust to position
.cad0	aad0	ad 20 07	lda $0720			lda 	gxPosition
.cad3	aad3	6d 21 07	adc $0721			adc 	gxAdjust
.cad6	aad6	8d 20 07	sta $0720			sta 	gxPosition
.cad9	aad9	9c 23 07	stz $0723			stz 	gxAddSelect 				; clear add select flag
.cadc	aadc	b0 05		bcs $aae3			bcs 	_GXLAOverflow 				; if carry out, overflowed.
.cade	aade	cd 22 07	cmp $0722			cmp 	gxTotal 					; if exceeded total
.cae1	aae1	90 0a		bcc $aaed			bcc 	_GXLANoExtra
.cae3	aae3					_GXLAOverflow:
.cae3	aae3	ce 23 07	dec $0723			dec 	gxAddSelect 				; set addselect to $FF
.cae6	aae6	38		sec				sec 								; subtract total and write back
.cae7	aae7	ed 22 07	sbc $0722			sbc 	gxTotal
.caea	aaea	8d 20 07	sta $0720			sta 	gxPosition
.caed	aaed					_GXLANoExtra:
.caed	aaed	ad 1e 07	lda $071e			lda 	gxIsDiffYLarger
.caf0	aaf0	f0 0d		beq $aaff			beq 	_GXDXLarger
.caf2	aaf2	20 51 ab	jsr $ab51			jsr 	GXIncrementY
.caf5	aaf5	ad 23 07	lda $0723			lda 	gxAddSelect
.caf8	aaf8	f0 10		beq $ab0a			beq 	_GXLAExit
.cafa	aafa	20 0b ab	jsr $ab0b			jsr 	gxAdjustX
.cafd	aafd	80 0b		bra $ab0a			bra 	_GXLAExit
.caff	aaff					_GXDXLarger:
.caff	aaff	20 0b ab	jsr $ab0b			jsr 	gxAdjustX
.cb02	ab02	ad 23 07	lda $0723			lda 	gxAddSelect
.cb05	ab05	f0 03		beq $ab0a			beq 	_GXLAExit
.cb07	ab07	20 51 ab	jsr $ab51			jsr 	GXIncrementY
.cb0a	ab0a					_GXLAExit:
.cb0a	ab0a	60		rts				rts
.cb0b	ab0b					gxAdjustX:
.cb0b	ab0b	ad 1f 07	lda $071f			lda 	gxDXNegative
.cb0e	ab0e	10 25		bpl $ab35			bpl 	_GXAXRight
.cb10	ab10	ad 7f 06	lda $067f			lda 	gxX0
.cb13	ab13	d0 03		bne $ab18			bne 	_GXAXNoBorrow
.cb15	ab15	ce 80 06	dec $0680			dec 	gxX0+1
.cb18	ab18					_GXAXNoBorrow:
.cb18	ab18	ce 7f 06	dec $067f			dec 	gxX0
.cb1b	ab1b	ce 91 06	dec $0691			dec 	gxOffset 					; pixel left
.cb1e	ab1e	ad 91 06	lda $0691			lda 	gxOffset
.cb21	ab21	c9 ff		cmp #$ff			cmp 	#$FF
.cb23	ab23	d0 0f		bne $ab34			bne 	_GXAYExit 					; underflow
.cb25	ab25	c6 3d		dec $3d				dec 	gxzScreen+1 					; borrow
.cb27	ab27	a5 3d		lda $3d				lda 	gxzScreen+1 					; gone off page
.cb29	ab29	c9 60		cmp #$60			cmp 	#GXMappingAddress >> 8
.cb2b	ab2b	b0 07		bcs $ab34			bcs 	_GXAYExit
.cb2d	ab2d	18		clc				clc
.cb2e	ab2e	69 20		adc #$20			adc 	#$20 						; fix up
.cb30	ab30	85 3d		sta $3d				sta 	gxzScreen+1
.cb32	ab32	c6 0b		dec $0b				dec 	GXEditSlot 				; back one page
.cb34	ab34					_GXAYExit:
.cb34	ab34	60		rts				rts
.cb35	ab35					_GXAXRight:
.cb35	ab35	ee 7f 06	inc $067f			inc 	gxX0
.cb38	ab38	d0 03		bne $ab3d			bne 	_GXAXNoCarry
.cb3a	ab3a	ee 80 06	inc $0680			inc 	gxX0+1
.cb3d	ab3d					_GXAXNoCarry:
.cb3d	ab3d	ee 91 06	inc $0691			inc 	gxOffset 					; pixel right
.cb40	ab40	d0 0e		bne $ab50			bne 	_GXAXExit 					; if not overflowed, exit.
.cb42	ab42	e6 3d		inc $3d				inc 	gxzScreen+1 					; next line
.cb44	ab44	a5 3d		lda $3d				lda 	gxzScreen+1
.cb46	ab46	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page ?
.cb48	ab48	90 06		bcc $ab50			bcc 	_GXAXExit
.cb4a	ab4a	e9 20		sbc #$20			sbc 	#$20 						; fix up
.cb4c	ab4c	85 3d		sta $3d				sta 	gxzScreen+1
.cb4e	ab4e	e6 0b		inc $0b				inc 	GXEditSlot 				; next page
.cb50	ab50					_GXAXExit:
.cb50	ab50	60		rts				rts
.cb51	ab51					GXIncrementY:
.cb51	ab51	ee 81 06	inc $0681			inc 	gxY0
.cb54	ab54	20 cd af	jsr $afcd			jsr 	GXMovePositionDown
.cb57	ab57	60		rts				rts
.cb58	ab58					GXLineSetup:
.cb58	ab58	ad 85 06	lda $0685			lda 	gxY1
.cb5b	ab5b	38		sec				sec
.cb5c	ab5c	ed 81 06	sbc $0681			sbc 	gxY0
.cb5f	ab5f	4a		lsr a				lsr 	a
.cb60	ab60	8d 1d 07	sta $071d			sta 	gxDiffY
.cb63	ab63	9c 1f 07	stz $071f			stz 	gxDXNegative 				; clear -ve flag
.cb66	ab66	38		sec				sec
.cb67	ab67	ad 83 06	lda $0683			lda 	gxX1
.cb6a	ab6a	ed 7f 06	sbc $067f			sbc 	gxX0
.cb6d	ab6d	8d 1c 07	sta $071c			sta 	gxDiffX
.cb70	ab70	ad 84 06	lda $0684			lda 	gxX1+1 						; calculate MSB
.cb73	ab73	ed 80 06	sbc $0680			sbc 	gxX0+1
.cb76	ab76	6a		ror a				ror 	a 							; rotate bit into DiffX halving it
.cb77	ab77	6e 1c 07	ror $071c			ror 	gxDiffX
.cb7a	ab7a	0a		asl a				asl 	a
.cb7b	ab7b	10 0c		bpl $ab89			bpl 	_GDXNotNegative
.cb7d	ab7d	a9 00		lda #$00			lda 	#0 							; make absolute value of |dx|
.cb7f	ab7f	38		sec				sec
.cb80	ab80	ed 1c 07	sbc $071c			sbc 	gxDiffX
.cb83	ab83	8d 1c 07	sta $071c			sta 	gxDiffX
.cb86	ab86	ce 1f 07	dec $071f			dec 	gxDXNegative 				; -ve flag = $FF.
.cb89	ab89					_GDXNotNegative:
.cb89	ab89	9c 1e 07	stz $071e			stz 	gxIsDiffYLarger 			; clear larger flag
.cb8c	ab8c	ad 1d 07	lda $071d			lda 	gxDiffY 					; set adjust and total.
.cb8f	ab8f	8d 21 07	sta $0721			sta 	gxAdjust
.cb92	ab92	ad 1c 07	lda $071c			lda 	gxDiffX
.cb95	ab95	8d 22 07	sta $0722			sta 	gxTotal
.cb98	ab98	ad 1d 07	lda $071d			lda 	gxDiffY 					; if dy > dx
.cb9b	ab9b	cd 1c 07	cmp $071c			cmp 	gxDiffX
.cb9e	ab9e	90 0f		bcc $abaf			bcc 	_GDXNotLarger
.cba0	aba0	ce 1e 07	dec $071e			dec 	gxIsDiffYLarger 			; set the dy larger flag
.cba3	aba3	ad 1c 07	lda $071c			lda 	gxDiffX 					; set adjust and total other way round
.cba6	aba6	8d 21 07	sta $0721			sta 	gxAdjust
.cba9	aba9	ad 1d 07	lda $071d			lda 	gxDiffY
.cbac	abac	8d 22 07	sta $0722			sta 	gxTotal
.cbaf	abaf					_GDXNotLarger:
.cbaf	abaf	ad 22 07	lda $0722			lda 	gxTotal
.cbb2	abb2	4a		lsr a				lsr 	a
.cbb3	abb3	8d 20 07	sta $0720			sta 	gxPosition
.cbb6	abb6	60		rts				rts
.071c						gxDiffX:
>071c								.fill 	1
.071d						gxDiffY:
>071d								.fill 	1
.071e						gxIsDiffYLarger:
>071e								.fill 	1
.071f						gxDXNegative:
>071f								.fill 	1
.0720						gxPosition:
>0720								.fill 	1
.0721						gxAdjust:
>0721								.fill 	1
.0722						gxTotal:
>0722								.fill 	1
.0723						gxAddSelect:
>0723								.fill 	1
.cbb7	abb7					GXSetColourMode:
.cbb7	abb7	a6 36		ldx $36				ldx 	gxzTemp0
.cbb9	abb9	8e 8d 06	stx $068d			stx 	gxColour 								; set colour
.cbbc	abbc	a5 37		lda $37				lda 	gxzTemp0+1 								;
.cbbe	abbe	8d 8c 06	sta $068c			sta 	gxMode 									; set mode
.cbc1	abc1	29 03		and #$03			and 	#3 										; only interested in bits 0-3
.cbc3	abc3	9c 8f 06	stz $068f			stz 	gxANDValue 								; initially AND with 0, and EOR with Colour
.cbc6	abc6	ae 8d 06	ldx $068d			ldx 	gxColour
.cbc9	abc9	8e 8e 06	stx $068e			stx 	gxEORValue
.cbcc	abcc	c9 02		cmp #$02			cmp 	#2 										; if mode 2/3 And with colour
.cbce	abce	90 03		bcc $abd3			bcc 	_GXSDCNotAndColour
.cbd0	abd0	8e 8f 06	stx $068f			stx 	gxANDValue
.cbd3	abd3					_GXSDCNotAndColour:
.cbd3	abd3	d0 03		bne $abd8			bne 	_GXSDCNotAnd 							; mode 2, Don't EOR with colour
.cbd5	abd5	9c 8e 06	stz $068e			stz 	gxEORValue
.cbd8	abd8					_GXSDCNotAnd:
.cbd8	abd8	4a		lsr a				lsr 	a 										; if bit 0 set, 1's complement AND value
.cbd9	abd9	90 08		bcc $abe3			bcc 	_GXSDCNoFlip
.cbdb	abdb	ad 8f 06	lda $068f			lda	 	gxANDValue
.cbde	abde	49 ff		eor #$ff			eor 	#$FF
.cbe0	abe0	8d 8f 06	sta $068f			sta 	gxANDValue
.cbe3	abe3					_GXSDCNoFlip:
.cbe3	abe3	18		clc				clc
.cbe4	abe4	60		rts				rts
.cbe5	abe5					GXPlotPoint:
.cbe5	abe5	20 67 af	jsr $af67			jsr 	GXOpenBitmap 				; start drawing
.cbe8	abe8	20 77 af	jsr $af77			jsr 	gxPositionCalc 				; setup gxzScreen, gxOffset and the position.
.cbeb	abeb	ac 91 06	ldy $0691			ldy 	gxOffset
.cbee	abee	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel on the right
.cbf0	abf0	2d 8f 06	and $068f			and 	gxANDValue
.cbf3	abf3	4d 8e 06	eor $068e			eor 	gxEORValue
.cbf6	abf6	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.cbf8	abf8	20 6f af	jsr $af6f			jsr 	GXCloseBitmap 				; stop drawing and exit
.cbfb	abfb	18		clc				clc
.cbfc	abfc	60		rts				rts
.cbfd	abfd					GXFillRectangle:
.cbfd	abfd	38		sec				sec
.cbfe	abfe	80 01		bra $ac01			bra 	GXRectangle
.cc00	ac00					GXFrameRectangle:
.cc00	ac00	18		clc				clc
.cc01	ac01					GXRectangle:
.cc01	ac01	ad 88 06	lda $0688			lda 	gxBitmapsOn
.cc04	ac04	f0 35		beq $ac3b			beq 	_GXRFail
.cc06	ac06	08		php				php 								; save Fill flag (CS)
.cc07	ac07	20 67 af	jsr $af67			jsr 	GXOpenBitmap 				; start drawing
.cc0a	ac0a	20 8f b0	jsr $b08f			jsr 	GXSortXY 					; sort both X and Y so top left/bottom right
.cc0d	ac0d	20 77 af	jsr $af77			jsr 	gxPositionCalc 				; setup gxzScreen, gxOffset and the position.
.cc10	ac10	38		sec				sec 								; sec = Draw line
.cc11	ac11	20 3d ac	jsr $ac3d			jsr 	GXDrawLineX1X0 				; draw a line length X1-X0
.cc14	ac14	ad 81 06	lda $0681			lda 	gxY0 						; reached end of rectangle ?
.cc17	ac17	cd 85 06	cmp $0685			cmp 	gxY1
.cc1a	ac1a	f0 19		beq $ac35			beq 	_GXRectangleExit
.cc1c	ac1c					_GXRectLoop:
.cc1c	ac1c	20 cd af	jsr $afcd			jsr 	GXMovePositionDown 			; down one.
.cc1f	ac1f	ee 81 06	inc $0681			inc 	gxY0 						; change Y pos
.cc22	ac22	ad 81 06	lda $0681			lda 	gxY0 						; reached last line
.cc25	ac25	cd 85 06	cmp $0685			cmp 	gxY1
.cc28	ac28	f0 07		beq $ac31			beq 	_GXLastLine
.cc2a	ac2a	28		plp				plp 								; get flag back
.cc2b	ac2b	08		php				php
.cc2c	ac2c	20 3d ac	jsr $ac3d			jsr 	GXDrawLineX1X0 				; draw horizontal line
.cc2f	ac2f	80 eb		bra $ac1c			bra 	_GXRectLoop
.cc31	ac31					_GXLastLine:
.cc31	ac31	38		sec				sec
.cc32	ac32	20 3d ac	jsr $ac3d			jsr 	GXDrawLineX1X0
.cc35	ac35					_GXRectangleExit:
.cc35	ac35	68		pla				pla 								; throw fill flag.
.cc36	ac36	20 6f af	jsr $af6f			jsr 	GXCloseBitmap 				; stop drawing and exit
.cc39	ac39	18		clc				clc
.cc3a	ac3a	60		rts				rts
.cc3b	ac3b					_GXRFail:
.cc3b	ac3b	38		sec				sec
.cc3c	ac3c	60		rts				rts
.cc3d	ac3d					GXDrawLineX1X0:
.cc3d	ac3d	08		php				php 								; save solid/either-end
.cc3e	ac3e	38		sec				sec
.cc3f	ac3f	ad 83 06	lda $0683			lda		gxX1
.cc42	ac42	ed 7f 06	sbc $067f			sbc 	gxX0
.cc45	ac45	85 36		sta $36				sta 	gxzTemp0
.cc47	ac47	ad 84 06	lda $0684			lda 	gxX1+1
.cc4a	ac4a	ed 80 06	sbc $0680			sbc 	gxX0+1
.cc4d	ac4d	85 37		sta $37				sta 	gxzTemp0+1
.cc4f	ac4f	28		plp				plp
.cc50	ac50					GXDrawLineTemp0:
.cc50	ac50	a5 3c		lda $3c				lda 	gxzScreen 						; push gxzScreen, gxOffset and GXEditSlot on stack
.cc52	ac52	48		pha				pha
.cc53	ac53	a5 3d		lda $3d				lda 	gxzScreen+1
.cc55	ac55	48		pha				pha
.cc56	ac56	ad 91 06	lda $0691			lda 	gxOffset
.cc59	ac59	48		pha				pha
.cc5a	ac5a	a5 0b		lda $0b				lda 	GXEditSlot
.cc5c	ac5c	48		pha				pha
.cc5d	ac5d	ac 91 06	ldy $0691			ldy 	gxOffset 					; Y offset
.cc60	ac60	90 1e		bcc $ac80			bcc 	_GXDLTEndPoints 			; if CC draw end points only.
.cc62	ac62					_GXDLTLine:
.cc62	ac62	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel
.cc64	ac64	2d 8f 06	and $068f			and 	gxANDValue
.cc67	ac67	4d 8e 06	eor $068e			eor 	gxEORValue
.cc6a	ac6a	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.cc6c	ac6c	a5 36		lda $36				lda 	gxzTemp0 					; decrement counter
.cc6e	ac6e	d0 04		bne $ac74			bne 	_GXDLTNoBorrow
.cc70	ac70	c6 37		dec $37				dec 	gxzTemp0+1 					; borrow, if goes -ve then exit
.cc72	ac72	30 2e		bmi $aca2			bmi 	_GXDLTExit
.cc74	ac74					_GXDLTNoBorrow:
.cc74	ac74	c6 36		dec $36				dec 	gxzTemp0
.cc76	ac76	c8		iny				iny 								; next slot.
.cc77	ac77	d0 e9		bne $ac62			bne 	_GXDLTLine
.cc79	ac79	e6 3d		inc $3d				inc 	gxzScreen+1 					; carry to next
.cc7b	ac7b	20 b0 ac	jsr $acb0			jsr 	GXDLTCheckWrap				; check for new page.
.cc7e	ac7e	80 e2		bra $ac62			bra 	_GXDLTLine
.cc80	ac80					_GXDLTEndPoints:
.cc80	ac80	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel
.cc82	ac82	2d 8f 06	and $068f			and 	gxANDValue
.cc85	ac85	4d 8e 06	eor $068e			eor 	gxEORValue
.cc88	ac88	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.cc8a	ac8a	98		tya				tya 								; advance to right side
.cc8b	ac8b	18		clc				clc
.cc8c	ac8c	65 36		adc $36				adc 	gxzTemp0
.cc8e	ac8e	a8		tay				tay
.cc8f	ac8f	a5 3d		lda $3d				lda 	gxzScreen+1
.cc91	ac91	65 37		adc $37				adc 	gxzTemp0+1
.cc93	ac93	85 3d		sta $3d				sta 	gxzScreen+1
.cc95	ac95	20 b0 ac	jsr $acb0			jsr 	GXDLTCheckWrap 			; fix up.
.cc98	ac98	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel on the right
.cc9a	ac9a	2d 8f 06	and $068f			and 	gxANDValue
.cc9d	ac9d	4d 8e 06	eor $068e			eor 	gxEORValue
.cca0	aca0	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.cca2	aca2					_GXDLTExit:
.cca2	aca2	68		pla				pla
.cca3	aca3	85 0b		sta $0b				sta 	GXEditSlot
.cca5	aca5	68		pla				pla
.cca6	aca6	8d 91 06	sta $0691			sta 	gxOffset
.cca9	aca9	68		pla				pla
.ccaa	acaa	85 3d		sta $3d				sta 	gxzScreen+1
.ccac	acac	68		pla				pla
.ccad	acad	85 3c		sta $3c				sta 	gxzScreen
.ccaf	acaf	60		rts				rts
.ccb0	acb0					GXDLTCheckWrap:
.ccb0	acb0	a5 3d		lda $3d				lda 	gxzScreen+1 					; check end of page
.ccb2	acb2	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8)
.ccb4	acb4	90 06		bcc $acbc			bcc 	_GXDLTCWExit
.ccb6	acb6	e9 20		sbc #$20			sbc 	#$20 						; fix up
.ccb8	acb8	85 3d		sta $3d				sta 	gxzScreen+1
.ccba	acba	e6 0b		inc $0b				inc 	GXEditSlot
.ccbc	acbc					_GXDLTCWExit:
.ccbc	acbc	60		rts				rts
.ccbd	acbd					GXDrawGraphicElement:
.ccbd	acbd	8d 24 07	sta $0724			sta 	gxSize 						; save size
.ccc0	acc0	3a		dec a				dec 	a
.ccc1	acc1	8d 25 07	sta $0725			sta 	gxMask 						; and mask
.ccc4	acc4	ad 88 06	lda $0688			lda 	gxBitmapsOn 				; check BMP on
.ccc7	acc7	f0 67		beq $ad30			beq 	_GXSLFail
.ccc9	acc9	ad 81 06	lda $0681			lda 	gxY0 						; push Y on stack
.cccc	accc	48		pha				pha
.cccd	accd	8c 27 07	sty $0727			sty 	gxAcquireVector+1 			; and acquisition vector
.ccd0	acd0	8e 26 07	stx $0726			stx 	gxAcquireVector
.ccd3	acd3	20 67 af	jsr $af67			jsr 	GXOpenBitmap 				; open the bitmap.
.ccd6	acd6	ad 29 07	lda $0729			lda 	gxUseMode 					; scale bits
.ccd9	acd9	4a		lsr a				lsr 	a
.ccda	acda	4a		lsr a				lsr 	a
.ccdb	acdb	4a		lsr a				lsr 	a
.ccdc	acdc	29 07		and #$07			and		#7
.ccde	acde	1a		inc a				inc 	a
.ccdf	acdf	8d 28 07	sta $0728			sta 	gxScale
.cce2	ace2	64 38		stz $38				stz 	gxzTemp1					; start first line
.cce4	ace4					_GXGELoop:
.cce4	ace4	a5 38		lda $38				lda 	gxzTemp1 					; current line number to read.
.cce6	ace6	2c 29 07	bit $0729			bit 	gxUseMode 					; check for flip.
.cce9	ace9	10 06		bpl $acf1			bpl		_GXNoVFlip
.cceb	aceb	ad 25 07	lda $0725			lda 	gxMask
.ccee	acee	38		sec				sec
.ccef	acef	e5 38		sbc $38				sbc 	gxzTemp1
.ccf1	acf1					_GXNoVFlip:
.ccf1	acf1	aa		tax				tax 								; get the Xth line.
.ccf2	acf2	20 32 ad	jsr $ad32			jsr 	_GXCallAcquire 				; get that data.
.ccf5	acf5	ad 28 07	lda $0728			lda 	gxScale 					; do scale identical copies of that line.
.ccf8	acf8	85 39		sta $39				sta 	gxzTemp1+1
.ccfa	acfa					_GXGELoop2:
.ccfa	acfa	ad 81 06	lda $0681			lda 	gxY0 						; off screen
.ccfd	acfd	cd 8b 06	cmp $068b			cmp 	gxHeight
.cd00	ad00	b0 10		bcs $ad12			bcs 	_GXDGEExit
.cd02	ad02	20 35 ad	jsr $ad35			jsr 	GXRenderOneLine 			; render line
.cd05	ad05	c6 39		dec $39				dec 	gxzTemp1+1 					; scale times.
.cd07	ad07	d0 f1		bne $acfa			bne 	_GXGELoop2
.cd09	ad09	e6 38		inc $38				inc 	gxzTemp1 					; done all lines.
.cd0b	ad0b	a5 38		lda $38				lda 	gxzTemp1
.cd0d	ad0d	cd 24 07	cmp $0724			cmp 	gxSize
.cd10	ad10	d0 d2		bne $ace4			bne 	_GXGELoop
.cd12	ad12					_GXDGEExit:
.cd12	ad12	68		pla				pla 								; restore Y for next time
.cd13	ad13	8d 81 06	sta $0681			sta 	gxY0
.cd16	ad16	ae 28 07	ldx $0728			ldx 	gxScale 					; get scale (1-8)
.cd19	ad19					_GXShiftLeft:
.cd19	ad19	18		clc				clc
.cd1a	ad1a	ad 24 07	lda $0724			lda 	gxSize
.cd1d	ad1d	6d 7f 06	adc $067f			adc 	gxX0
.cd20	ad20	8d 7f 06	sta $067f			sta 	gxX0
.cd23	ad23	90 03		bcc $ad28			bcc 	_GXSLNoCarry
.cd25	ad25	ee 80 06	inc $0680			inc 	gxX0+1
.cd28	ad28					_GXSLNoCarry:
.cd28	ad28	ca		dex				dex
.cd29	ad29	d0 ee		bne $ad19			bne 	_GXShiftLeft
.cd2b	ad2b	20 6f af	jsr $af6f			jsr 	GXCloseBitmap
.cd2e	ad2e	18		clc				clc
.cd2f	ad2f	60		rts				rts
.cd30	ad30					_GXSLFail:
.cd30	ad30	38		sec				sec
.cd31	ad31	60		rts				rts
.cd32	ad32					_GXCallAcquire:
.cd32	ad32	6c 26 07	jmp ($0726)			jmp 	(gxAcquireVector)
.cd35	ad35					GXRenderOneLine:
.cd35	ad35	20 77 af	jsr $af77			jsr 	gxPositionCalc 				; calculate position/offset.
.cd38	ad38	ac 91 06	ldy $0691			ldy 	gxOffset 					; Y contains position.
.cd3b	ad3b	64 3a		stz $3a				stz 	gxzTemp2 					; do size pixels
.cd3d	ad3d					_GXROLLoop1:
.cd3d	ad3d	ad 28 07	lda $0728			lda 	gxScale 					; set to do 'scale' times
.cd40	ad40	85 3b		sta $3b				sta 	gxzTemp2+1
.cd42	ad42					_GXROLLoop2:
.cd42	ad42	a5 3a		lda $3a				lda 	gxzTemp2 					; get current pixel
.cd44	ad44	2c 8c 06	bit $068c			bit 	gxMode 						; check H Flip
.cd47	ad47	50 06		bvc $ad4f			bvc 	_GXNoHFlip
.cd49	ad49	ad 25 07	lda $0725			lda 	gxMask
.cd4c	ad4c	38		sec				sec
.cd4d	ad4d	e5 3a		sbc $3a				sbc 	gxzTemp2
.cd4f	ad4f					_GXNoHFlip:
.cd4f	ad4f	aa		tax				tax 								; read from the pixel buffer
.cd50	ad50	bd 27 06	lda $0627,x			lda 	gxPixelBuffer,x
.cd53	ad53	d0 07		bne $ad5c			bne 	_GXDraw 					; draw if non zero
.cd55	ad55	ad 29 07	lda $0729			lda 	gxUseMode 					; check to see if solid background
.cd58	ad58	29 04		and #$04			and 	#4
.cd5a	ad5a	f0 0a		beq $ad66			beq 	_GXZeroPixel
.cd5c	ad5c					_GXDraw:
.cd5c	ad5c	b1 3c		lda ($3c),y			lda 	(gxzScreen),y
.cd5e	ad5e	2d 8f 06	and $068f			and 	gxANDValue
.cd61	ad61	5d 27 06	eor $0627,x			eor 	gxPixelBuffer,x
.cd64	ad64	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.cd66	ad66					_GXZeroPixel:
.cd66	ad66	c8		iny				iny 								; advance pointer
.cd67	ad67	d0 05		bne $ad6e			bne 	_GXNoShift
.cd69	ad69	e6 3d		inc $3d				inc 	gxzScreen+1 				; carry to next
.cd6b	ad6b	20 b0 ac	jsr $acb0			jsr 	GXDLTCheckWrap				; check for new page.
.cd6e	ad6e					_GXNoShift:
.cd6e	ad6e	c6 3b		dec $3b				dec 	gxzTemp2+1 					; do the inner loop gxScale times.
.cd70	ad70	d0 d0		bne $ad42			bne 	_GXROLLoop2
.cd72	ad72	e6 3a		inc $3a				inc 	gxzTemp2 					; next pixel.
.cd74	ad74	a5 3a		lda $3a				lda 	gxzTemp2
.cd76	ad76	cd 24 07	cmp $0724			cmp 	gxSize
.cd79	ad79	d0 c2		bne $ad3d			bne 	_GXROLLoop1
.cd7b	ad7b	ee 81 06	inc $0681			inc 	gxY0
.cd7e	ad7e	60		rts				rts
.0724						gxSize:
>0724								.fill 	1
.0725						gxMask:
>0725								.fill 	1
.0726						gxAcquireVector:
>0726								.fill 	2
.0728						gxScale:
>0728								.fill 	1
.0729						gxUseMode:
>0729								.fill 	1
.cd7f	ad7f					GXFontHandler:
.cd7f	ad7f	a5 37		lda $37				lda 	gxzTemp0+1 					; eor with mode
.cd81	ad81	4d 8c 06	eor $068c			eor 	gxMode
.cd84	ad84	8d 29 07	sta $0729			sta 	gxUseMode
.cd87	ad87	64 37		stz $37				stz 	gxzTemp0+1 					; gxzTemp0 is font #
.cd89	ad89	06 36		asl $36				asl	 	gxzTemp0 					; x 2
.cd8b	ad8b	26 37		rol $37				rol	 	gxzTemp0+1
.cd8d	ad8d	06 36		asl $36				asl	 	gxzTemp0 					; x 4
.cd8f	ad8f	26 37		rol $37				rol	 	gxzTemp0+1
.cd91	ad91	06 36		asl $36				asl	 	gxzTemp0 					; x 8
.cd93	ad93	26 37		rol $37				rol	 	gxzTemp0+1
.cd95	ad95	a5 37		lda $37				lda 	gxzTemp0+1 					; put in page C0
.cd97	ad97	09 c0		ora #$c0			ora 	#$C0
.cd99	ad99	85 37		sta $37				sta 	gxzTemp0+1
.cd9b	ad9b	a9 08		lda #$08			lda 	#8 							; size 8x8
.cd9d	ad9d	a2 a5		ldx #$a5			ldx 	#GXGetGraphicDataFont & $FF ; XY = Graphic Data retrieval routine
.cd9f	ad9f	a0 ad		ldy #$ad			ldy 	#GXGetGraphicDataFont >> 8
.cda1	ada1	20 bd ac	jsr $acbd			jsr 	GXDrawGraphicElement
.cda4	ada4	60		rts				rts
.cda5	ada5					GXGetGraphicDataFont:
.cda5	ada5	8a		txa				txa 								; X->Y
.cda6	ada6	a8		tay				tay
.cda7	ada7	a6 01		ldx $01				ldx 	1 							; preserve old value
.cda9	ada9	a9 01		lda #$01			lda 	#1 							; access page 1 (font memory)
.cdab	adab	85 01		sta $01				sta 	1
.cdad	adad	b1 36		lda ($36),y			lda 	(gxzTemp0),y 				; read the font element.
.cdaf	adaf	86 01		stx $01				stx 	1 							; put old value back.
.cdb1	adb1	a2 00		ldx #$00			ldx 	#0 							; do 8 times
.cdb3	adb3					_GXExpand:
.cdb3	adb3	9e 27 06	stz $0627,x			stz 	gxPixelBuffer,x 			; zero in pixel buffer
.cdb6	adb6	0a		asl a				asl 	a 							; shift bit 7 into C
.cdb7	adb7	90 08		bcc $adc1			bcc 	_GXNoPixel
.cdb9	adb9	48		pha				pha 								; if set, set pixel buffer to current colour.
.cdba	adba	ad 8d 06	lda $068d			lda 	gxColour
.cdbd	adbd	9d 27 06	sta $0627,x			sta 	gxPixelBuffer,x
.cdc0	adc0	68		pla				pla
.cdc1	adc1					_GXNoPixel:
.cdc1	adc1	e8		inx				inx 								; do the whole byte.
.cdc2	adc2	e0 08		cpx #$08			cpx 	#8
.cdc4	adc4	d0 ed		bne $adb3			bne 	_GXExpand
.cdc6	adc6	60		rts				rts
.cdc7	adc7					GXSpriteHandler:
.cdc7	adc7	ad 87 06	lda $0687			lda 	gxSpritesOn 				; sprites on ?
.cdca	adca	f0 23		beq $adef			beq 	_GXSHExit
.cdcc	adcc	a5 37		lda $37				lda 	gxzTemp0+1 					; eor with mode
.cdce	adce	4d 8c 06	eor $068c			eor 	gxMode
.cdd1	add1	8d 29 07	sta $0729			sta 	gxUseMode
.cdd4	add4	a6 36		ldx $36				ldx 	gxzTemp0 					; sprite #
.cdd6	add6	da		phx				phx
.cdd7	add7	20 67 af	jsr $af67			jsr 	GXOpenBitmap 				; can access sprite information
.cdda	adda	68		pla				pla
.cddb	addb	20 48 b0	jsr $b048			jsr 	GXFindSprite 				; get the sprite address
.cdde	adde	08		php				php
.cddf	addf	20 6f af	jsr $af6f			jsr 	GXCloseBitmap
.cde2	ade2	28		plp				plp
.cde3	ade3	b0 0a		bcs $adef			bcs		_GXSHExit 					; exit if find failed.
.cde5	ade5	ad 2a 07	lda $072a			lda 	gxSizePixels 				; return size
.cde8	ade8	a2 f0		ldx #$f0			ldx 	#GXSpriteAcquire & $FF
.cdea	adea	a0 ad		ldy #$ad			ldy 	#GXSpriteAcquire >> 8
.cdec	adec	20 bd ac	jsr $acbd			jsr 	GXDrawGraphicElement
.cdef	adef					_GXSHExit:
.cdef	adef	60		rts				rts
.cdf0	adf0					GXSpriteAcquire:
.cdf0	adf0	ad 8a 06	lda $068a			lda 	gxSpritePage				; point to base page
.cdf3	adf3	85 0b		sta $0b				sta 	GXEditSlot
.cdf5	adf5	86 36		stx $36				stx 	gxzTemp0 					; row number x 1,2,3,4
.cdf7	adf7	a9 00		lda #$00			lda 	#0
.cdf9	adf9	ae 2b 07	ldx $072b			ldx 	gxSizeBits
.cdfc	adfc					_GXTimesRowNumber:
.cdfc	adfc	18		clc				clc
.cdfd	adfd	65 36		adc $36				adc 	gxzTemp0
.cdff	adff	ca		dex				dex
.ce00	ae00	10 fa		bpl $adfc			bpl 	_GXTimesRowNumber
.ce02	ae02	64 37		stz $37				stz 	gxzTemp0+1
.ce04	ae04	0a		asl a				asl 	a 							; row x 2,4,6,8
.ce05	ae05	26 37		rol $37				rol 	gxzTemp0+1
.ce07	ae07	0a		asl a				asl 	a 							; row x 4,8,12,16
.ce08	ae08	26 37		rol $37				rol 	gxzTemp0+1
.ce0a	ae0a	0a		asl a				asl 	a 							; row x 8,16,24,32
.ce0b	ae0b	26 37		rol $37				rol 	gxzTemp0+1
.ce0d	ae0d	85 36		sta $36				sta 	gxzTemp0
.ce0f	ae0f	18		clc				clc 								; add base address.
.ce10	ae10	a5 36		lda $36				lda 	gxzTemp0
.ce12	ae12	6d 2d 07	adc $072d			adc 	gxSpriteOffset
.ce15	ae15	85 36		sta $36				sta 	gxzTemp0
.ce17	ae17	a5 37		lda $37				lda 	gxzTemp0+1
.ce19	ae19	6d 2e 07	adc $072e			adc 	gxSpriteOffset+1
.ce1c	ae1c					_GXSAFindPage:
.ce1c	ae1c	c9 20		cmp #$20			cmp 	#$20 						; on this page
.ce1e	ae1e	90 06		bcc $ae26			bcc 	_GXSAFoundPage
.ce20	ae20	e9 20		sbc #$20			sbc 	#$20 						; forward one page
.ce22	ae22	e6 0b		inc $0b				inc 	GXEditSlot
.ce24	ae24	80 f6		bra $ae1c			bra 	_GXSAFindPage
.ce26	ae26					_GXSAFoundPage:
.ce26	ae26	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; physical address of page.
.ce28	ae28	85 37		sta $37				sta 	gxzTemp0+1 					; gxzTemp0 now points to the page
.ce2a	ae2a	a0 00		ldy #$00			ldy 	#0
.ce2c	ae2c					_GXSACopyLoop:
.ce2c	ae2c	b1 36		lda ($36),y			lda 	(gxzTemp0),y
.ce2e	ae2e	99 27 06	sta $0627,y			sta 	gxPixelBuffer,y
.ce31	ae31	c8		iny				iny
.ce32	ae32	cc 2a 07	cpy $072a			cpy 	gxSizePixels
.ce35	ae35	d0 f5		bne $ae2c			bne 	_GXSACopyLoop
.ce37	ae37	60		rts				rts
.ce38	ae38					GXSelect:
.ce38	ae38	ad 87 06	lda $0687			lda 	gxSpritesOn
.ce3b	ae3b	f0 22		beq $ae5f			beq 	_GXSFail
.ce3d	ae3d	a5 36		lda $36				lda 	gxzTemp0 					; illegal sprite #
.ce3f	ae3f	c9 40		cmp #$40			cmp 	#64
.ce41	ae41	b0 1c		bcs $ae5f			bcs 	_GXSFail
.ce43	ae43	8d 92 06	sta $0692			sta 	GSCurrentSpriteID
.ce46	ae46	a4 37		ldy $37				ldy 	gxzTemp0+1 					; control value.
.ce48	ae48	a9 00		lda #$00			lda  	#0 							; multiply sprite # x 8 => A
.ce4a	ae4a	06 36		asl $36				asl 	gxzTemp0
.ce4c	ae4c	06 36		asl $36				asl 	gxzTemp0
.ce4e	ae4e	06 36		asl $36				asl 	gxzTemp0
.ce50	ae50	2a		rol a				rol 	a
.ce51	ae51	69 d9		adc #$d9			adc 	#$D9 						; sprite area
.ce53	ae53	8d 94 06	sta $0694			sta 	GSCurrentSpriteAddr+1 		; address to GSCurrentSprite and gxzTemp
.ce56	ae56	85 37		sta $37				sta 	gxzTemp0+1
.ce58	ae58	a5 36		lda $36				lda 	gxzTemp0
.ce5a	ae5a	8d 93 06	sta $0693			sta 	GSCurrentSpriteAddr
.ce5d	ae5d	18		clc				clc
.ce5e	ae5e	60		rts				rts
.ce5f	ae5f					_GXSFail:
.ce5f	ae5f	38		sec				sec
.ce60	ae60	60		rts				rts
.ce61	ae61					GXSelectImage:
.ce61	ae61	ad 87 06	lda $0687			lda 	gxSpritesOn
.ce64	ae64	f0 74		beq $aeda			beq 	_GXSIFail
.ce66	ae66	ad 94 06	lda $0694			lda 	GSCurrentSpriteAddr+1 		; check sprite selected
.ce69	ae69	f0 6f		beq $aeda			beq 	_GXSIFail 					; (checking the MSB)
.ce6b	ae6b	64 01		stz $01				stz 	1
.ce6d	ae6d	a5 37		lda $37				lda 	gxzTemp0+1 					; push show/hide on the stack.
.ce6f	ae6f	d0 6b		bne $aedc			bne 	_GXSIHide
.ce71	ae71	a5 36		lda $36				lda 	gxzTemp0 					; sprite image
.ce73	ae73	48		pha				pha
.ce74	ae74	20 67 af	jsr $af67			jsr 	GXOpenBitmap
.ce77	ae77	68		pla				pla
.ce78	ae78	20 48 b0	jsr $b048			jsr 	GXFindSprite
.ce7b	ae7b	b0 5a		bcs $aed7			bcs 	_GXSICloseFail 				; no image
.ce7d	ae7d	a0 01		ldy #$01			ldy 	#1
.ce7f	ae7f	ad 93 06	lda $0693			lda 	GSCurrentSpriteAddr
.ce82	ae82	85 36		sta $36				sta 	gxzTemp0
.ce84	ae84	ad 94 06	lda $0694			lda 	GSCurrentSpriteAddr+1
.ce87	ae87	85 37		sta $37				sta 	gxzTemp0+1
.ce89	ae89	ad 2d 07	lda $072d			lda 	gxSpriteOffset
.ce8c	ae8c	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.ce8e	ae8e	18		clc				clc
.ce8f	ae8f	ad 2e 07	lda $072e			lda 	gxSpriteOffset+1
.ce92	ae92	6d 95 06	adc $0695			adc 	gxSpriteOffsetBase
.ce95	ae95	c8		iny				iny
.ce96	ae96	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.ce98	ae98	ad 96 06	lda $0696			lda 	gxSpriteOffsetBase+1
.ce9b	ae9b	69 00		adc #$00			adc 	#0
.ce9d	ae9d	c8		iny				iny
.ce9e	ae9e	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.cea0	aea0	ad 2b 07	lda $072b			lda 	gxSizeBits 					; get raw size
.cea3	aea3	49 03		eor #$03			eor 	#3 							; make it right (00=32 etc.)
.cea5	aea5	2a		rol a				rol 	a 							; x 2
.cea6	aea6	0a		asl a				asl 	a 							; x 4
.cea7	aea7	0a		asl a				asl 	a 							; x 8
.cea8	aea8	0a		asl a				asl 	a 							; x 16
.cea9	aea9	0d 2c 07	ora $072c			ora 	gxSpriteLUT 				; Or with LUT
.ceac	aeac	0a		asl a				asl 	a 							; 1 shift
.cead	aead	09 01		ora #$01			ora 	#1 							; enable sprite.
.ceaf	aeaf	92 36		sta ($36)			sta 	(gxzTemp0) 					; and write back
.ceb1	aeb1	20 6f af	jsr $af6f			jsr 	GXCloseBitmap
.ceb4	aeb4	ae 92 06	ldx $0692			ldx 	GSCurrentSpriteID 			; point to sprite entries.
.ceb7	aeb7	bd d7 06	lda $06d7,x			lda 	gxSpriteHigh,x 				; clear upper two bits of size
.ceba	aeba	29 3f		and #$3f			and 	#$3F
.cebc	aebc	9d d7 06	sta $06d7,x			sta 	gxSpriteHigh,x
.cebf	aebf	ad 2b 07	lda $072b			lda 	gxSizeBits 					; get bit size
.cec2	aec2	6a		ror a				ror 	a 							; shift into bits 6/7
.cec3	aec3	6a		ror a				ror 	a
.cec4	aec4	6a		ror a				ror 	a
.cec5	aec5	29 c0		and #$c0			and 	#$C0
.cec7	aec7	1d d7 06	ora $06d7,x			ora 	gxSpriteHigh,x 				; put in  upper 2 bits of sprite data
.ceca	aeca	9d d7 06	sta $06d7,x			sta 	gxSpriteHigh,x
.cecd	aecd	bd 97 06	lda $0697,x			lda 	gxSpriteLow,x 				; clear hidden flag.
.ced0	aed0	29 7f		and #$7f			and 	#$7F
.ced2	aed2	9d 97 06	sta $0697,x			sta 	gxSpriteLow,x
.ced5	aed5	18		clc				clc
.ced6	aed6	60		rts				rts
.ced7	aed7					_GXSICloseFail:
.ced7	aed7	20 6f af	jsr $af6f			jsr 	GXCloseBitmap
.ceda	aeda					_GXSIFail:
.ceda	aeda	38		sec				sec
.cedb	aedb	60		rts				rts
.cedc	aedc					_GXSIHide:
.cedc	aedc	ad 93 06	lda $0693			lda 	GSCurrentSpriteAddr  		; get Sprite h/w address and write there
.cedf	aedf	85 36		sta $36				sta 	gxzTemp0
.cee1	aee1	ad 94 06	lda $0694			lda 	GSCurrentSpriteAddr+1
.cee4	aee4	85 37		sta $37				sta 	gxzTemp0+1
.cee6	aee6	a9 00		lda #$00			lda 	#0
.cee8	aee8	92 36		sta ($36)			sta 	(gxzTemp0)
.ceea	aeea	ae 92 06	ldx $0692			ldx 	GSCurrentSpriteID 			; get sprite ID
.ceed	aeed	bd 97 06	lda $0697,x			lda 	gxSpriteLow,x 				; set the hidden bit.
.cef0	aef0	09 80		ora #$80			ora 	#$80
.cef2	aef2	9d 97 06	sta $0697,x			sta 	gxSpriteLow,x
.cef5	aef5	18		clc				clc
.cef6	aef6	60		rts				rts
.cef7	aef7					GXMoveSprite:
.cef7	aef7	ad 87 06	lda $0687			lda 	gxSpritesOn
.cefa	aefa	f0 65		beq $af61			beq 	_GXSIFail
.cefc	aefc	ad 94 06	lda $0694			lda 	GSCurrentSpriteAddr+1 		; check sprite selected
.ceff	aeff	f0 60		beq $af61			beq 	_GXSIFail
.cf01	af01	85 37		sta $37				sta 	gxzTemp0+1
.cf03	af03	a0 04		ldy #$04			ldy 	#4
.cf05	af05	ad 93 06	lda $0693			lda 	GSCurrentSpriteAddr
.cf08	af08	85 36		sta $36				sta 	gxzTemp0
.cf0a	af0a	ae 92 06	ldx $0692			ldx 	GSCurrentSpriteID 			; get the size from the upper two bits
.cf0d	af0d	bd d7 06	lda $06d7,x			lda 	gxSpriteHigh,x
.cf10	af10	2a		rol a				rol 	a	 						; into bits 0,1.
.cf11	af11	2a		rol a				rol 	a
.cf12	af12	2a		rol a				rol 	a
.cf13	af13	29 03		and #$03			and 	#3
.cf15	af15	aa		tax				tax
.cf16	af16	bd 63 af	lda $af63,x			lda 	_GXMSOffset,x 				; get 32-SpriteSize/2
.cf19	af19	48		pha				pha
.cf1a	af1a	18		clc				clc
.cf1b	af1b	6d 7f 06	adc $067f			adc 	gxX0						; copy position.
.cf1e	af1e	91 36		sta ($36),y			sta 	(gxzTemp0),y
.cf20	af20	c8		iny				iny
.cf21	af21	ad 80 06	lda $0680			lda 	gxX0+1
.cf24	af24	69 00		adc #$00			adc 	#0
.cf26	af26	91 36		sta ($36),y			sta 	(gxzTemp0),y
.cf28	af28	c8		iny				iny
.cf29	af29	68		pla				pla
.cf2a	af2a	18		clc				clc
.cf2b	af2b	6d 81 06	adc $0681			adc 	gxY0
.cf2e	af2e	91 36		sta ($36),y			sta 	(gxzTemp0),y
.cf30	af30	a9 00		lda #$00			lda 	#0
.cf32	af32	69 00		adc #$00			adc 	#0
.cf34	af34	c8		iny				iny
.cf35	af35	91 36		sta ($36),y			sta 	(gxzTemp0),y
.cf37	af37	4e 80 06	lsr $0680			lsr 	gxX0+1 						; divide X by 4
.cf3a	af3a	6e 7f 06	ror $067f			ror 	gxX0
.cf3d	af3d	4e 7f 06	lsr $067f			lsr 	gxX0
.cf40	af40	4e 81 06	lsr $0681			lsr 	gxY0 						; divide Y by 4
.cf43	af43	4e 81 06	lsr $0681			lsr 	gxY0
.cf46	af46	ae 92 06	ldx $0692			ldx 	GSCurrentSpriteID 			; copy X/4 and Y/4 into the status bytes
.cf49	af49	bd 97 06	lda $0697,x			lda 	gxSpriteLow,x
.cf4c	af4c	29 80		and #$80			and 	#$80
.cf4e	af4e	0d 7f 06	ora $067f			ora 	gxX0
.cf51	af51	9d 97 06	sta $0697,x			sta 	gxSpriteLow,x
.cf54	af54	bd d7 06	lda $06d7,x			lda 	gxSpriteHigh,x
.cf57	af57	29 c0		and #$c0			and 	#$C0
.cf59	af59	0d 81 06	ora $0681			ora 	gxY0
.cf5c	af5c	9d d7 06	sta $06d7,x			sta 	gxSpriteHigh,x
.cf5f	af5f	18		clc				clc
.cf60	af60	60		rts				rts
.cf61	af61					_GXSIFail:
.cf61	af61	38		sec				sec
.cf62	af62	60		rts				rts
.cf63	af63					_GXMSOffset:
>cf63	af63	1c						.byte 	32-8/2
>cf64	af64	18						.byte 	32-16/2
>cf65	af65	14						.byte 	32-24/2
>cf66	af66	10						.byte 	32-32/2
.cf67	af67					GXOpenBitmap:
.cf67	af67	78		sei				sei 								; no interrupts here
.cf68	af68	a5 0b		lda $0b				lda 	GXEditSlot 					; Save the original LUT slot value
.cf6a	af6a	8d 90 06	sta $0690			sta 	gxOriginalLUTValue
.cf6d	af6d	58		cli				cli
.cf6e	af6e	60		rts				rts
.cf6f	af6f					GXCloseBitmap:
.cf6f	af6f	78		sei				sei
.cf70	af70	ad 90 06	lda $0690			lda 	gxOriginalLUTValue 			; restore LUT slot value
.cf73	af73	85 0b		sta $0b				sta 	GXEditSlot
.cf75	af75	58		cli				cli
.cf76	af76	60		rts				rts
.cf77	af77					gxPositionCalc:
.cf77	af77	a5 36		lda $36				lda 	gxzTemp0 					; save temp memory slot
.cf79	af79	48		pha				pha
.cf7a	af7a	ad 81 06	lda $0681			lda 	gxY0 						; gxzScreen = Y0
.cf7d	af7d	85 3c		sta $3c				sta 	gxzScreen
.cf7f	af7f	64 3d		stz $3d				stz 	gxzScreen+1
.cf81	af81	06 3c		asl $3c				asl 	gxzScreen 						; gxzScreen = Y0 * 4
.cf83	af83	26 3d		rol $3d				rol 	gxzScreen+1
.cf85	af85	06 3c		asl $3c				asl 	gxzScreen
.cf87	af87	26 3d		rol $3d				rol 	gxzScreen+1
.cf89	af89	18		clc				clc 								; gxzScreen = Y0 * 5, as it's still in A
.cf8a	af8a	65 3c		adc $3c				adc 	gxzScreen
.cf8c	af8c	85 3c		sta $3c				sta 	gxzScreen
.cf8e	af8e	90 02		bcc $af92			bcc 	_GXPCNoCarry
.cf90	af90	e6 3d		inc $3d				inc 	gxzScreen+1
.cf92	af92					_GXPCNoCarry:
.cf92	af92	06 3c		asl $3c				asl 	gxzScreen 						; now Y0 * 10. Needs to be multiplied by another
.cf94	af94	26 3d		rol $3d				rol 	gxzScreen+1 					; 32. At this point the MSB contains the offset
.cf96	af96	a5 3d		lda $3d				lda	 	gxzScreen+1 					; so save this in zTemp0 and zero it.
.cf98	af98	85 36		sta $36				sta 	gxzTemp0
.cf9a	af9a	64 3d		stz $3d				stz 	gxzScreen+1
.cf9c	af9c	a9 05		lda #$05			lda 	#5 							; now multiply by 32, this puts this in the range 0..8191
.cf9e	af9e					_GXPCMultiply32:
.cf9e	af9e	06 3c		asl $3c				asl 	gxzScreen
.cfa0	afa0	26 3d		rol $3d				rol 	gxzScreen+1
.cfa2	afa2	3a		dec a				dec 	a
.cfa3	afa3	d0 f9		bne $af9e			bne 	_GXPCMultiply32
.cfa5	afa5	18		clc				clc
.cfa6	afa6	ad 7f 06	lda $067f			lda 	gxX0 						; add X to this value, put the result in gxOffset, gxzScreen has to be on a page boundary
.cfa9	afa9	65 3c		adc $3c				adc 	gxzScreen
.cfab	afab	8d 91 06	sta $0691			sta 	gxOffset
.cfae	afae	ad 80 06	lda $0680			lda 	gxX0+1
.cfb1	afb1	65 3d		adc $3d				adc 	gxzScreen+1
.cfb3	afb3	c9 20		cmp #$20			cmp 	#$20 						; has it overflowed into the next one ?
.cfb5	afb5	90 04		bcc $afbb			bcc 	_GXPCNoOverflow
.cfb7	afb7	29 1f		and #$1f			and 	#$1F 						; fix it up
.cfb9	afb9	e6 36		inc $36				inc 	gxzTemp0 					; add 1 to the page number
.cfbb	afbb					_GXPCNoOverflow:
.cfbb	afbb	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; make it the address mapped in.
.cfbd	afbd	85 3d		sta $3d				sta 	gxzScreen+1
.cfbf	afbf	64 3c		stz $3c				stz 	gxzScreen
.cfc1	afc1	18		clc				clc
.cfc2	afc2	a5 36		lda $36				lda 	gxzTemp0 					; get the page number
.cfc4	afc4	6d 89 06	adc $0689			adc 	gxBasePage 					; by adding the base page
.cfc7	afc7	85 0b		sta $0b				sta 	GXEditSlot 				; and map it into memory.
.cfc9	afc9	68		pla				pla
.cfca	afca	85 36		sta $36				sta 	gxzTemp0
.cfcc	afcc	60		rts				rts
.cfcd	afcd					GXMovePositionDown:
.cfcd	afcd	18		clc				clc 								; add 320 to offset/temp+1
.cfce	afce	ad 91 06	lda $0691			lda 	gxOffset
.cfd1	afd1	69 40		adc #$40			adc 	#64
.cfd3	afd3	8d 91 06	sta $0691			sta 	gxOffset
.cfd6	afd6	a5 3d		lda $3d				lda 	gxzScreen+1
.cfd8	afd8	69 01		adc #$01			adc 	#1
.cfda	afda	85 3d		sta $3d				sta 	gxzScreen+1
.cfdc	afdc	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page
.cfde	afde	90 07		bcc $afe7			bcc 	_GXMPDExit
.cfe0	afe0	38		sec				sec  								; next page
.cfe1	afe1	e9 20		sbc #$20			sbc 	#$20
.cfe3	afe3	85 3d		sta $3d				sta 	gxzScreen+1
.cfe5	afe5	e6 0b		inc $0b				inc 	GXEditSlot
.cfe7	afe7					_GXMPDExit:
.cfe7	afe7	60		rts				rts
.cfe8	afe8					GXCollide:
.cfe8	afe8	a5 36		lda $36				lda 	gxzTemp0 					; check if sprite numbers are legal.
.cfea	afea	aa		tax				tax
.cfeb	afeb	05 37		ora $37				ora 	gxzTemp0+1
.cfed	afed	29 c0		and #$c0			and 	#$C0
.cfef	afef	38		sec				sec
.cff0	aff0	d0 53		bne $b045			bne 	_GXCollideFail 				; if either >= 64, fail.
.cff2	aff2	a4 37		ldy $37				ldy 	gxzTemp0+1 					; at this point X is 1st sprite and Y is 2nd sprite.
.cff4	aff4	b9 97 06	lda $0697,y			lda 	gxSpriteLow,y 				; check if either hidden bit is set
.cff7	aff7	1d 97 06	ora $0697,x			ora 	gxSpriteLow,x
.cffa	affa	30 48		bmi $b044			bmi 	_GXOkayFail 				; if either hidden, then they cannot collide.
.cffc	affc	18		clc				clc 								; need to calculate sum of sizes.
.cffd	affd	b9 d7 06	lda $06d7,y			lda 	gxSpriteHigh,y
.d000	b000	7d d7 06	adc $06d7,x			adc 	gxSpriteHigh,x 				; at this point, CS, Bit 6 and 7 contain that sum.
.d003	b003	29 c0		and #$c0			and 	#$C0 					 	; mask off
.d005	b005	6a		ror a				ror 	a 							; 5/6/7
.d006	b006	4a		lsr a				lsr 	a 							; 4/5/6
.d007	b007	4a		lsr a				lsr 	a 							; 3/4/5
.d008	b008	4a		lsr a				lsr 	a 							; 2/3/4
.d009	b009	18		clc				clc
.d00a	b00a	69 08		adc #$08			adc 	#$08
.d00c	b00c	4a		lsr a				lsr 	a 							; adjust because all coordinates are divided by 4 to store.
.d00d	b00d	4a		lsr a				lsr 	a
.d00e	b00e	85 38		sta $38				sta 	gxzTemp1 					; so the difference between the centres has to be less than this.
.d010	b010	b9 d7 06	lda $06d7,y			lda 	gxSpriteHigh,y 				; calculate y1-y0
.d013	b013	29 3f		and #$3f			and 	#$3F
.d015	b015	85 39		sta $39				sta 	gxzTemp1+1
.d017	b017	38		sec				sec
.d018	b018	bd d7 06	lda $06d7,x			lda 	gxSpriteHigh,x
.d01b	b01b	29 3f		and #$3f			and 	#$3F
.d01d	b01d	e5 39		sbc $39				sbc 	gxzTemp1+1
.d01f	b01f	b0 03		bcs $b024			bcs 	_GXCAbs1 					; calculate |y1-y0|
.d021	b021	49 ff		eor #$ff			eor 	#$FF
.d023	b023	1a		inc a				inc 	a
.d024	b024					_GXCAbs1:
.d024	b024	c5 38		cmp $38				cmp 	gxzTemp1 					; if >= difference then no overlap
.d026	b026	b0 1c		bcs $b044			bcs 	_GXOkayFail
.d028	b028	85 39		sta $39				sta 	gxzTemp1+1 					; save |y1-y0|
.d02a	b02a	38		sec				sec 								; calculate |x1-x0|
.d02b	b02b	b9 97 06	lda $0697,y			lda 	gxSpriteLow,y
.d02e	b02e	fd 97 06	sbc $0697,x			sbc 	gxSpriteLow,x
.d031	b031	b0 03		bcs $b036			bcs 	_GXCAbs2
.d033	b033	49 ff		eor #$ff			eor 	#$FF
.d035	b035	1a		inc a				inc 	a
.d036	b036					_GXCAbs2:
.d036	b036	c5 38		cmp $38				cmp 	gxzTemp1 					; if >= difference then no overlap
.d038	b038	b0 0a		bcs $b044			bcs 	_GXOkayFail
.d03a	b03a	c5 39		cmp $39				cmp 	gxzTemp1+1 					; is it less than the previous one.
.d03c	b03c	90 02		bcc $b040			bcc 	_GXCHaveLowest
.d03e	b03e	a5 39		lda $39				lda 	gxzTemp1+1 					; if not, that's the smallest difference.
.d040	b040					_GXCHaveLowest:
.d040	b040	0a		asl a				asl 	a 							; scale to allow for >> 2
.d041	b041	0a		asl a				asl 	a
.d042	b042	18		clc				clc
.d043	b043	60		rts				rts
.d044	b044					_GXOkayFail:
.d044	b044	18		clc				clc
.d045	b045					_GXCollideFail:
.d045	b045	a9 ff		lda #$ff			lda 	#$FF
.d047	b047	60		rts				rts
.d048	b048					GXFindSprite:
.d048	b048	aa		tax				tax
.d049	b049	ad 8a 06	lda $068a			lda 	gxSpritePage 				; access the base page of the sprite
.d04c	b04c	85 0b		sta $0b				sta 	GXEditSlot
.d04e	b04e	bd 00 61	lda $6100,x			lda 	GXMappingAddress+256,x 		; check a valid sprite
.d051	b051	1d 00 60	ora $6000,x			ora 	GXMappingAddress,x
.d054	b054	f0 33		beq $b089			beq 	_GXFSFail
.d056	b056	bd 00 61	lda $6100,x			lda 	GXMappingAddress+256,x 		; MSB
.d059	b059	8d 2e 07	sta $072e			sta 	gxSpriteOffset+1
.d05c	b05c	bd 00 60	lda $6000,x			lda 	GXMappingAddress,x 			; LSB
.d05f	b05f	48		pha				pha 								; save twice
.d060	b060	48		pha				pha
.d061	b061	29 03		and #$03			and 	#3 							; get sprite size
.d063	b063	8d 2b 07	sta $072b			sta 	gxSizeBits 					; save raw (0-3)
.d066	b066	aa		tax				tax
.d067	b067	bd 8b b0	lda $b08b,x			lda 	_GXFXSSTTable,x 			; read sprite size
.d06a	b06a	8d 2a 07	sta $072a			sta 	gxSizePixels 					; save (8/16/24/32)
.d06d	b06d	68		pla				pla 								; get LUT
.d06e	b06e	4a		lsr a				lsr		a
.d06f	b06f	4a		lsr a				lsr		a
.d070	b070	29 03		and #$03			and 	#3
.d072	b072	8d 2c 07	sta $072c			sta 	gxSpriteLUT
.d075	b075	68		pla				pla 								; address, neeeds to be x 4
.d076	b076	29 f0		and #$f0			and 	#$F0
.d078	b078	8d 2d 07	sta $072d			sta 	gxSpriteOffset
.d07b	b07b	0e 2d 07	asl $072d			asl 	gxSpriteOffset
.d07e	b07e	2e 2e 07	rol $072e			rol 	gxSpriteOffset+1
.d081	b081	0e 2d 07	asl $072d			asl 	gxSpriteOffset
.d084	b084	2e 2e 07	rol $072e			rol 	gxSpriteOffset+1
.d087	b087	18		clc				clc
.d088	b088	60		rts				rts
.d089	b089					_GXFSFail:
.d089	b089	38		sec				sec
.d08a	b08a	60		rts				rts
.d08b	b08b					_GXFXSSTTable:
>d08b	b08b	08 10 18 20					.byte 	8,16,24,32
.072a						gxSizePixels:
>072a								.fill 	1
.072b						gxSizeBits:
>072b								.fill 	1
.072c						gxSpriteLUT:
>072c								.fill 	1
.072d						gxSpriteOffset:
>072d								.fill 	2
.d08f	b08f					GXSortXY:
.d08f	b08f	20 ad b0	jsr $b0ad			jsr 	GXSortY 					; will be sorted on Y now
.d092	b092	ad 7f 06	lda $067f			lda 	gxX0 						; compare X0 v X1
.d095	b095	cd 83 06	cmp $0683			cmp 	gxX1
.d098	b098	ad 80 06	lda $0680			lda 	gxX0+1
.d09b	b09b	ed 84 06	sbc $0684			sbc 	gxX1+1
.d09e	b09e	90 0c		bcc $b0ac			bcc 	_GXSXYExit 					; X0 < X1 exit
.d0a0	b0a0	a2 00		ldx #$00			ldx 	#0 							; swap them over
.d0a2	b0a2	a0 04		ldy #$04			ldy 	#4
.d0a4	b0a4	20 c1 b0	jsr $b0c1			jsr 	GXSwapXY
.d0a7	b0a7	e8		inx				inx
.d0a8	b0a8	c8		iny				iny
.d0a9	b0a9	20 c1 b0	jsr $b0c1			jsr 	GXSwapXY
.d0ac	b0ac					_GXSXYExit:
.d0ac	b0ac	60		rts				rts
.d0ad	b0ad					GXSortY:
.d0ad	b0ad	ad 81 06	lda $0681			lda 	gxY0 						; if Y0 >= Y1
.d0b0	b0b0	cd 85 06	cmp $0685			cmp 	gxY1
.d0b3	b0b3	90 0b		bcc $b0c0			bcc 	_GXSYSorted
.d0b5	b0b5	a2 03		ldx #$03			ldx 	#3 							; swap 3-0
.d0b7	b0b7	a0 07		ldy #$07			ldy 	#7 							; with 4-7
.d0b9	b0b9					_GXSwap1:
.d0b9	b0b9	20 c1 b0	jsr $b0c1			jsr 	GXSwapXY
.d0bc	b0bc	88		dey				dey
.d0bd	b0bd	ca		dex				dex
.d0be	b0be	10 f9		bpl $b0b9			bpl 	_GXSwap1
.d0c0	b0c0					_GXSYSorted:
.d0c0	b0c0	60		rts				rts
.d0c1	b0c1					GXSwapXY:
.d0c1	b0c1	bd 7f 06	lda $067f,x			lda 	gxX0,x
.d0c4	b0c4	48		pha				pha
.d0c5	b0c5	b9 7f 06	lda $067f,y			lda 	gxX0,y
.d0c8	b0c8	9d 7f 06	sta $067f,x			sta 	gxX0,x
.d0cb	b0cb	68		pla				pla
.d0cc	b0cc	99 7f 06	sta $067f,y			sta 	gxX0,y
.d0cf	b0cf	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_tokeniser.module

=1						tokeniserIntegrated=1
.d0d0	b0d0					KeywordSet0:
>d0d0	b0d0	00 65					.text	0,$65,""               ; $80 !0:EOF
>d0d2	b0d2	00 58					.text	0,$58,""               ; $81 !1:SH1
>d0d4	b0d4	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>d0d6	b0d6	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $83 ABS(
>d0dc	b0dc	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $84 ALLOC(
>d0e4	b0e4	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $85 ASC(
>d0ea	b0ea	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $86 CHR$(
>d0f1	b0f1	06 aa 45 56 45 4e 54 28			.text	6,$aa,"EVENT("         ; $87 EVENT(
>d0f9	b0f9	05 6b 46 41 4c 53 45			.text	5,$6b,"FALSE"          ; $88 FALSE
>d100	b100	05 44 46 52 41 43 28			.text	5,$44,"FRAC("          ; $89 FRAC(
>d107	b107	09 4a 47 45 54 44 41 54			.text	9,$4a,"GETDATE$("      ; $8a GETDATE$(
>d10f	b10f	45 24 28
>d112	b112	09 5b 47 45 54 54 49 4d			.text	9,$5b,"GETTIME$("      ; $8b GETTIME$(
>d11a	b11a	45 24 28
>d11d	b11d	04 0d 48 49 54 28			.text	4,$0d,"HIT("           ; $8c HIT(
>d123	b123	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $8d INT(
>d129	b129	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $8e ISVAL(
>d131	b131	05 5c 4a 4f 59 42 28			.text	5,$5c,"JOYB("          ; $8f JOYB(
>d138	b138	05 72 4a 4f 59 58 28			.text	5,$72,"JOYX("          ; $90 JOYX(
>d13f	b13f	05 73 4a 4f 59 59 28			.text	5,$73,"JOYY("          ; $91 JOYY(
>d146	b146	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $92 LEFT$(
>d14e	b14e	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $93 LEN(
>d154	b154	04 0e 4d 41 58 28			.text	4,$0e,"MAX("           ; $94 MAX(
>d15a	b15a	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $95 MID$(
>d161	b161	04 0c 4d 49 4e 28			.text	4,$0c,"MIN("           ; $96 MIN(
>d167	b167	04 19 4e 4f 54 28			.text	4,$19,"NOT("           ; $97 NOT(
>d16d	b16d	05 4d 50 45 45 4b 28			.text	5,$4d,"PEEK("          ; $98 PEEK(
>d174	b174	06 91 50 45 45 4b 44 28			.text	6,$91,"PEEKD("         ; $99 PEEKD(
>d17c	b17c	06 99 50 45 45 4b 4c 28			.text	6,$99,"PEEKL("         ; $9a PEEKL(
>d184	b184	06 a4 50 45 45 4b 57 28			.text	6,$a4,"PEEKW("         ; $9b PEEKW(
>d18c	b18c	08 3c 50 4c 41 59 49 4e			.text	8,$3c,"PLAYING("       ; $9c PLAYING(
>d194	b194	47 28
>d196	b196	07 e9 52 41 4e 44 4f 4d			.text	7,$e9,"RANDOM("        ; $9d RANDOM(
>d19e	b19e	28
>d19f	b19f	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $9e RIGHT$(
>d1a7	b1a7	28
>d1a8	b1a8	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $9f RND(
>d1ae	b1ae	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $a0 SGN(
>d1b4	b1b4	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $a1 SPC(
>d1ba	b1ba	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $a2 STR$(
>d1c1	b1c1	06 a9 54 49 4d 45 52 28			.text	6,$a9,"TIMER("         ; $a3 TIMER(
>d1c9	b1c9	04 40 54 52 55 45			.text	4,$40,"TRUE"           ; $a4 TRUE
>d1cf	b1cf	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $a5 VAL(
>d1d5	b1d5	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $a6 FOR
>d1da	b1da	02 8f 49 46				.text	2,$8f,"IF"             ; $a7 IF
>d1de	b1de	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $a8 PROC
>d1e4	b1e4	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $a9 REPEAT
>d1ec	b1ec	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $aa WHILE
>d1f3	b1f3	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $ab ENDIF
>d1fa	b1fa	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $ac ENDPROC
>d202	b202	43
>d203	b203	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $ad NEXT
>d209	b209	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $ae THEN
>d20f	b20f	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $af UNTIL
>d216	b216	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $b0 WEND
>d21c	b21c	02 9b 42 59				.text	2,$9b,"BY"             ; $b1 BY
>d220	b220	04 1c 43 41 4c 4c			.text	4,$1c,"CALL"           ; $b2 CALL
>d226	b226	06 b2 43 49 52 43 4c 45			.text	6,$b2,"CIRCLE"         ; $b3 CIRCLE
>d22e	b22e	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $b4 CLEAR
>d235	b235	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $b5 CLS
>d23a	b23a	05 7f 43 4f 4c 4f 52			.text	5,$7f,"COLOR"          ; $b6 COLOR
>d241	b241	06 d4 43 4f 4c 4f 55 52			.text	6,$d4,"COLOUR"         ; $b7 COLOUR
>d249	b249	06 d0 43 50 52 49 4e 54			.text	6,$d0,"CPRINT"         ; $b8 CPRINT
>d251	b251	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $b9 DATA
>d257	b257	03 da 44 49 4d				.text	3,$da,"DIM"            ; $ba DIM
>d25c	b25c	06 db 44 4f 57 4e 54 4f			.text	6,$db,"DOWNTO"         ; $bb DOWNTO
>d264	b264	04 29 45 4c 53 45			.text	4,$29,"ELSE"           ; $bc ELSE
>d26a	b26a	04 34 46 52 4f 4d			.text	4,$34,"FROM"           ; $bd FROM
>d270	b270	03 e5 47 46 58				.text	3,$e5,"GFX"            ; $be GFX
>d275	b275	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $bf GOSUB
>d27c	b27c	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $c0 GOTO
>d282	b282	04 24 48 45 52 45			.text	4,$24,"HERE"           ; $c1 HERE
>d288	b288	05 63 49 4d 41 47 45			.text	5,$63,"IMAGE"          ; $c2 IMAGE
>d28f	b28f	05 90 49 4e 50 55 54			.text	5,$90,"INPUT"          ; $c3 INPUT
>d296	b296	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $c4 LET
>d29b	b29b	04 28 4c 49 4e 45			.text	4,$28,"LINE"           ; $c5 LINE
>d2a1	b2a1	05 6b 4c 4f 43 41 4c			.text	5,$6b,"LOCAL"          ; $c6 LOCAL
>d2a8	b2a8	03 db 4f 46 46				.text	3,$db,"OFF"            ; $c7 OFF
>d2ad	b2ad	02 9d 4f 4e				.text	2,$9d,"ON"             ; $c8 ON
>d2b1	b2b1	07 20 4f 55 54 4c 49 4e			.text	7,$20,"OUTLINE"        ; $c9 OUTLINE
>d2b9	b2b9	45
>d2ba	b2ba	07 0f 50 41 4c 45 54 54			.text	7,$0f,"PALETTE"        ; $ca PALETTE
>d2c2	b2c2	45
>d2c3	b2c3	04 3f 50 4c 4f 54			.text	4,$3f,"PLOT"           ; $cb PLOT
>d2c9	b2c9	04 2f 50 4f 4b 45			.text	4,$2f,"POKE"           ; $cc POKE
>d2cf	b2cf	05 73 50 4f 4b 45 44			.text	5,$73,"POKED"          ; $cd POKED
>d2d6	b2d6	05 7b 50 4f 4b 45 4c			.text	5,$7b,"POKEL"          ; $ce POKEL
>d2dd	b2dd	05 86 50 4f 4b 45 57			.text	5,$86,"POKEW"          ; $cf POKEW
>d2e4	b2e4	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $d0 PRINT
>d2eb	b2eb	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $d1 READ
>d2f1	b2f1	04 2e 52 45 43 54			.text	4,$2e,"RECT"           ; $d2 RECT
>d2f7	b2f7	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $d3 REM
>d2fc	b2fc	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $d4 RETURN
>d304	b304	05 7b 53 4f 4c 49 44			.text	5,$7b,"SOLID"          ; $d5 SOLID
>d30b	b30b	05 89 53 4f 55 4e 44			.text	5,$89,"SOUND"          ; $d6 SOUND
>d312	b312	06 d7 53 50 52 49 54 45			.text	6,$d7,"SPRITE"         ; $d7 SPRITE
>d31a	b31a	04 45 54 45 58 54			.text	4,$45,"TEXT"           ; $d8 TEXT
>d320	b320	02 a3 54 4f				.text	2,$a3,"TO"             ; $d9 TO
>d324	b324	ff					.text	$FF
.d325	b325					KeywordSet1:
>d325	b325	00 65					.text	0,$65,""               ; $80 !0:EOF
>d327	b327	00 58					.text	0,$58,""               ; $81 !1:SH1
>d329	b329	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>d32b	b32b	08 4c 41 53 53 45 4d 42			.text	8,$4c,"ASSEMBLE"       ; $83 ASSEMBLE
>d333	b333	4c 45
>d335	b335	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $84 ASSERT
>d33d	b33d	06 bd 42 49 54 4d 41 50			.text	6,$bd,"BITMAP"         ; $85 BITMAP
>d345	b345	05 62 42 4c 4f 41 44			.text	5,$62,"BLOAD"          ; $86 BLOAD
>d34c	b34c	05 71 42 53 41 56 45			.text	5,$71,"BSAVE"          ; $87 BSAVE
>d353	b353	03 df 44 49 52				.text	3,$df,"DIR"            ; $88 DIR
>d358	b358	05 7a 44 52 49 56 45			.text	5,$7a,"DRIVE"          ; $89 DRIVE
>d35f	b35f	03 d7 45 4e 44				.text	3,$d7,"END"            ; $8a END
>d364	b364	07 11 45 58 50 4c 4f 44			.text	7,$11,"EXPLODE"        ; $8b EXPLODE
>d36c	b36c	45
>d36d	b36d	02 96 47 4f				.text	2,$96,"GO"             ; $8c GO
>d371	b371	05 70 48 49 4d 45 4d			.text	5,$70,"HIMEM"          ; $8d HIMEM
>d378	b378	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $8e LIST
>d37e	b37e	04 20 4c 4f 41 44			.text	4,$20,"LOAD"           ; $8f LOAD
>d384	b384	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $90 NEW
>d389	b389	04 2e 50 49 4e 47			.text	4,$2e,"PING"           ; $91 PING
>d38f	b38f	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $92 RESTORE
>d397	b397	45
>d398	b398	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $93 RUN
>d39d	b39d	04 2f 53 41 56 45			.text	4,$2f,"SAVE"           ; $94 SAVE
>d3a3	b3a3	07 0a 53 45 54 44 41 54			.text	7,$0a,"SETDATE"        ; $95 SETDATE
>d3ab	b3ab	45
>d3ac	b3ac	07 1b 53 45 54 54 49 4d			.text	7,$1b,"SETTIME"        ; $96 SETTIME
>d3b4	b3b4	45
>d3b5	b3b5	05 8d 53 48 4f 4f 54			.text	5,$8d,"SHOOT"          ; $97 SHOOT
>d3bc	b3bc	07 2a 53 50 52 49 54 45			.text	7,$2a,"SPRITES"        ; $98 SPRITES
>d3c4	b3c4	53
>d3c5	b3c5	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $99 STOP
>d3cb	b3cb	06 d5 56 45 52 49 46 59			.text	6,$d5,"VERIFY"         ; $9a VERIFY
>d3d3	b3d3	03 ee 58 47 4f				.text	3,$ee,"XGO"            ; $9b XGO
>d3d8	b3d8	05 78 58 4c 4f 41 44			.text	5,$78,"XLOAD"          ; $9c XLOAD
>d3df	b3df	03 eb 5a 41 50				.text	3,$eb,"ZAP"            ; $9d ZAP
>d3e4	b3e4	ff					.text	$FF
.d3e5	b3e5					KeywordSet2:
>d3e5	b3e5	00 65					.text	0,$65,""               ; $80 !0:EOF
>d3e7	b3e7	00 58					.text	0,$58,""               ; $81 !1:SH1
>d3e9	b3e9	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>d3eb	b3eb	03 c8 41 44 43				.text	3,$c8,"ADC"            ; $83 ADC
>d3f0	b3f0	03 d3 41 4e 44				.text	3,$d3,"AND"            ; $84 AND
>d3f5	b3f5	03 e0 41 53 4c				.text	3,$e0,"ASL"            ; $85 ASL
>d3fa	b3fa	03 c8 42 43 43				.text	3,$c8,"BCC"            ; $86 BCC
>d3ff	b3ff	03 d8 42 43 53				.text	3,$d8,"BCS"            ; $87 BCS
>d404	b404	03 d8 42 45 51				.text	3,$d8,"BEQ"            ; $88 BEQ
>d409	b409	03 df 42 49 54				.text	3,$df,"BIT"            ; $89 BIT
>d40e	b40e	03 d8 42 4d 49				.text	3,$d8,"BMI"            ; $8a BMI
>d413	b413	03 d5 42 4e 45				.text	3,$d5,"BNE"            ; $8b BNE
>d418	b418	03 de 42 50 4c				.text	3,$de,"BPL"            ; $8c BPL
>d41d	b41d	03 d5 42 52 41				.text	3,$d5,"BRA"            ; $8d BRA
>d422	b422	03 df 42 52 4b				.text	3,$df,"BRK"            ; $8e BRK
>d427	b427	03 db 42 56 43				.text	3,$db,"BVC"            ; $8f BVC
>d42c	b42c	03 eb 42 56 53				.text	3,$eb,"BVS"            ; $90 BVS
>d431	b431	03 d2 43 4c 43				.text	3,$d2,"CLC"            ; $91 CLC
>d436	b436	03 d3 43 4c 44				.text	3,$d3,"CLD"            ; $92 CLD
>d43b	b43b	03 d8 43 4c 49				.text	3,$d8,"CLI"            ; $93 CLI
>d440	b440	03 e5 43 4c 56				.text	3,$e5,"CLV"            ; $94 CLV
>d445	b445	03 e0 43 4d 50				.text	3,$e0,"CMP"            ; $95 CMP
>d44a	b44a	03 eb 43 50 58				.text	3,$eb,"CPX"            ; $96 CPX
>d44f	b44f	03 ec 43 50 59				.text	3,$ec,"CPY"            ; $97 CPY
>d454	b454	03 cc 44 45 43				.text	3,$cc,"DEC"            ; $98 DEC
>d459	b459	03 e1 44 45 58				.text	3,$e1,"DEX"            ; $99 DEX
>d45e	b45e	03 e2 44 45 59				.text	3,$e2,"DEY"            ; $9a DEY
>d463	b463	03 e6 45 4f 52				.text	3,$e6,"EOR"            ; $9b EOR
>d468	b468	03 da 49 4e 43				.text	3,$da,"INC"            ; $9c INC
>d46d	b46d	03 ef 49 4e 58				.text	3,$ef,"INX"            ; $9d INX
>d472	b472	03 f0 49 4e 59				.text	3,$f0,"INY"            ; $9e INY
>d477	b477	03 e7 4a 4d 50				.text	3,$e7,"JMP"            ; $9f JMP
>d47c	b47c	03 ef 4a 53 52				.text	3,$ef,"JSR"            ; $a0 JSR
>d481	b481	03 d1 4c 44 41				.text	3,$d1,"LDA"            ; $a1 LDA
>d486	b486	03 e8 4c 44 58				.text	3,$e8,"LDX"            ; $a2 LDX
>d48b	b48b	03 e9 4c 44 59				.text	3,$e9,"LDY"            ; $a3 LDY
>d490	b490	03 f1 4c 53 52				.text	3,$f1,"LSR"            ; $a4 LSR
>d495	b495	03 ed 4e 4f 50				.text	3,$ed,"NOP"            ; $a5 NOP
>d49a	b49a	03 e2 4f 52 41				.text	3,$e2,"ORA"            ; $a6 ORA
>d49f	b49f	03 d9 50 48 41				.text	3,$d9,"PHA"            ; $a7 PHA
>d4a4	b4a4	03 e8 50 48 50				.text	3,$e8,"PHP"            ; $a8 PHP
>d4a9	b4a9	03 f0 50 48 58				.text	3,$f0,"PHX"            ; $a9 PHX
>d4ae	b4ae	03 f1 50 48 59				.text	3,$f1,"PHY"            ; $aa PHY
>d4b3	b4b3	03 dd 50 4c 41				.text	3,$dd,"PLA"            ; $ab PLA
>d4b8	b4b8	03 ec 50 4c 50				.text	3,$ec,"PLP"            ; $ac PLP
>d4bd	b4bd	03 f4 50 4c 58				.text	3,$f4,"PLX"            ; $ad PLX
>d4c2	b4c2	03 f5 50 4c 59				.text	3,$f5,"PLY"            ; $ae PLY
>d4c7	b4c7	03 ed 52 4f 4c				.text	3,$ed,"ROL"            ; $af ROL
>d4cc	b4cc	03 f3 52 4f 52				.text	3,$f3,"ROR"            ; $b0 ROR
>d4d1	b4d1	03 ef 52 54 49				.text	3,$ef,"RTI"            ; $b1 RTI
>d4d6	b4d6	03 f9 52 54 53				.text	3,$f9,"RTS"            ; $b2 RTS
>d4db	b4db	03 d8 53 42 43				.text	3,$d8,"SBC"            ; $b3 SBC
>d4e0	b4e0	03 db 53 45 43				.text	3,$db,"SEC"            ; $b4 SEC
>d4e5	b4e5	03 dc 53 45 44				.text	3,$dc,"SED"            ; $b5 SED
>d4ea	b4ea	03 e1 53 45 49				.text	3,$e1,"SEI"            ; $b6 SEI
>d4ef	b4ef	03 e8 53 54 41				.text	3,$e8,"STA"            ; $b7 STA
>d4f4	b4f4	03 f7 53 54 50				.text	3,$f7,"STP"            ; $b8 STP
>d4f9	b4f9	03 ff 53 54 58				.text	3,$ff,"STX"            ; $b9 STX
>d4fe	b4fe	03 00 53 54 59				.text	3,$00,"STY"            ; $ba STY
>d503	b503	03 01 53 54 5a				.text	3,$01,"STZ"            ; $bb STZ
>d508	b508	03 ed 54 41 58				.text	3,$ed,"TAX"            ; $bc TAX
>d50d	b50d	03 ee 54 41 59				.text	3,$ee,"TAY"            ; $bd TAY
>d512	b512	03 e8 54 52 42				.text	3,$e8,"TRB"            ; $be TRB
>d517	b517	03 e9 54 53 42				.text	3,$e9,"TSB"            ; $bf TSB
>d51c	b51c	03 ff 54 53 58				.text	3,$ff,"TSX"            ; $c0 TSX
>d521	b521	03 ed 54 58 41				.text	3,$ed,"TXA"            ; $c1 TXA
>d526	b526	03 ff 54 58 53				.text	3,$ff,"TXS"            ; $c2 TXS
>d52b	b52b	03 ee 54 59 41				.text	3,$ee,"TYA"            ; $c3 TYA
>d530	b530	ff					.text	$FF
.d531	b531					Export_TKListConvertLine:
.d531	b531	48		pha				pha 								; save indent on the stack
.d532	b532	9c 1d 04	stz $041d			stz 	tbOffset
.d535	b535	9c 2d 04	stz $042d			stz 	tokenBuffer
.d538	b538	9c 29 04	stz $0429			stz 	currentListColour
.d53b	b53b	a9 8d		lda #$8d			lda 	#CLILineNumber+$80
.d53d	b53d	20 ba b6	jsr $b6ba			jsr 	LCLWriteColour
.d540	b540	a0 02		ldy #$02			ldy 	#2 							; convert line number to string
.d542	b542	b1 30		lda ($30),y			lda 	(codePtr),y
.d544	b544	aa		tax				tax
.d545	b545	88		dey				dey
.d546	b546	b1 30		lda ($30),y			lda 	(codePtr),y
.d548	b548	20 2b b7	jsr $b72b			jsr 	LCLWriteNumberXA
.d54b	b54b	68		pla				pla 								; adjustment to indent
.d54c	b54c	48		pha				pha 								; save on stack
.d54d	b54d	10 0c		bpl $b55b			bpl 	_LCNoAdjust 				; don't adjust indent if +ve, do after.
.d54f	b54f	18		clc				clc 								; add to list indent and make 0 if goes -ve.
.d550	b550	6d 26 04	adc $0426			adc 	listIndent
.d553	b553	8d 26 04	sta $0426			sta 	listIndent
.d556	b556	10 03		bpl $b55b			bpl 	_LCNoAdjust
.d558	b558	9c 26 04	stz $0426			stz 	listIndent
.d55b	b55b					_LCNoAdjust:
.d55b	b55b	18		clc				clc		 							; work out actual indent.
.d55c	b55c	ad 26 04	lda $0426			lda 	listIndent
.d55f	b55f	0a		asl a				asl 	a
.d560	b560	69 07		adc #$07			adc 	#7
.d562	b562	85 36		sta $36				sta 	zTemp0
.d564	b564					_LCPadOut:
.d564	b564	a9 20		lda #$20			lda 	#' '						; pad out to 6+indent characters
.d566	b566	20 c3 b6	jsr $b6c3			jsr 	LCLWrite
.d569	b569	ad 1d 04	lda $041d			lda 	tbOffset
.d56c	b56c	c5 36		cmp $36				cmp 	zTemp0
.d56e	b56e	d0 f4		bne $b564			bne 	_LCPadOut
.d570	b570	a0 03		ldy #$03			ldy 	#3 							; start position.
.d572	b572					_LCMainLoop:
.d572	b572	a9 8c		lda #$8c			lda 	#CLIPunctuation+$80
.d574	b574	20 ba b6	jsr $b6ba			jsr 	LCLWriteColour
.d577	b577	b1 30		lda ($30),y			lda 	(codePtr),y
.d579	b579	c9 80		cmp #$80			cmp 	#KWC_EOL 					; end of line ?
.d57b	b57b	f0 17		beq $b594			beq 	_LCExit
.d57d	b57d	c9 10		cmp #$10			cmp 	#16 						; 0-5 are the double punctuations
.d57f	b57f	90 1e		bcc $b59f			bcc 	_LCDoubles
.d581	b581	c9 20		cmp #$20			cmp 	#32 						; 16-31 are shifted punctuation from 64-91
.d583	b583	90 2a		bcc $b5af			bcc 	_LCShiftPunc
.d585	b585	c9 40		cmp #$40			cmp 	#64 						; 32-64 are as stored, punc and digits
.d587	b587	90 35		bcc $b5be			bcc 	_LCPunctuation
.d589	b589	c9 80		cmp #$80			cmp 	#128 						; 64-127 are variable identifiers.
.d58b	b58b	90 51		bcc $b5de			bcc 	_LCIdentifiers
.d58d	b58d	c9 fe		cmp #$fe			cmp 	#254 						; 128-253 are tokenised words
.d58f	b58f	90 73		bcc $b604			bcc 	_LCTokens
.d591	b591	4c 64 b6	jmp $b664			jmp 	_LCData 					; 254-5 are data objects
.d594	b594					_LCExit:
.d594	b594	68		pla				pla 								; get old indent adjust
.d595	b595	30 07		bmi $b59e			bmi 	_LCExit2
.d597	b597	18		clc				clc 								; add to indent if +ve
.d598	b598	6d 26 04	adc $0426			adc 	listIndent
.d59b	b59b	8d 26 04	sta $0426			sta 	listIndent
.d59e	b59e					_LCExit2:
.d59e	b59e	60		rts				rts
.d59f	b59f					_LCDoubles:
.d59f	b59f	48		pha				pha
.d5a0	b5a0	4a		lsr a				lsr 	a 							; put bit 2 into bit 1
.d5a1	b5a1	29 02		and #$02			and 	#2
.d5a3	b5a3	09 3c		ora #$3c			ora 	#60 						; make < >
.d5a5	b5a5	20 c3 b6	jsr $b6c3			jsr 	LCLWrite
.d5a8	b5a8	68		pla				pla 								; restore, do lower bit
.d5a9	b5a9	29 03		and #$03			and 	#3
.d5ab	b5ab	09 3c		ora #$3c			ora 	#60
.d5ad	b5ad	80 0f		bra $b5be			bra		_LCPunctuation 				; print, increment, loop
.d5af	b5af					_LCShiftPunc:
.d5af	b5af	aa		tax				tax 								; save in X
.d5b0	b5b0	29 07		and #$07			and 	#7 							; lower 3 bits
.d5b2	b5b2	f0 02		beq $b5b6			beq 	_LCNoAdd
.d5b4	b5b4	09 18		ora #$18			ora 	#24 						; adds $18 to it.
.d5b6	b5b6					_LCNoAdd:
.d5b6	b5b6	e0 18		cpx #$18			cpx 	#24 						; if >= 24 add $20
.d5b8	b5b8	90 02		bcc $b5bc			bcc 	_LCNoAdd2
.d5ba	b5ba	09 20		ora #$20			ora 	#32 						; adds $20
.d5bc	b5bc					_LCNoAdd2:
.d5bc	b5bc	09 40		ora #$40			ora 	#$40 						; shift into 64-127 range and fall through.
.d5be	b5be					_LCPunctuation:
.d5be	b5be	c9 3a		cmp #$3a			cmp 	#':' 						; check if :
.d5c0	b5c0	d0 03		bne $b5c5			bne 	_LCPContinue
.d5c2	b5c2	20 d9 b6	jsr $b6d9			jsr 	LCLDeleteLastSpace 			; if so delete any preceding spaces
.d5c5	b5c5					_LCPContinue:
.d5c5	b5c5	c9 2e		cmp #$2e			cmp 	#'.'
.d5c7	b5c7	f0 08		beq $b5d1			beq 	_LCPIsConstant
.d5c9	b5c9	c9 30		cmp #$30			cmp 	#'0'
.d5cb	b5cb	90 0b		bcc $b5d8			bcc 	_LCPNotConstant
.d5cd	b5cd	c9 3a		cmp #$3a			cmp 	#'9'+1
.d5cf	b5cf	b0 07		bcs $b5d8			bcs 	_LCPNotConstant
.d5d1	b5d1					_LCPIsConstant:
.d5d1	b5d1	48		pha				pha
.d5d2	b5d2	a9 87		lda #$87			lda 	#CLIConstant+$80
.d5d4	b5d4	20 ba b6	jsr $b6ba			jsr 	LCLWriteColour
.d5d7	b5d7	68		pla				pla
.d5d8	b5d8					_LCPNotConstant:
.d5d8	b5d8	c8		iny				iny 								; consume character
.d5d9	b5d9	20 c3 b6	jsr $b6c3			jsr 	LCLWrite 					; write it out.
.d5dc	b5dc	80 94		bra $b572			bra 	_LCMainLoop 				; go round again.
.d5de	b5de					_LCIdentifiers:
.d5de	b5de	18		clc				clc 								; convert to physical address
.d5df	b5df	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.d5e1	b5e1	85 37		sta $37				sta 	zTemp0+1
.d5e3	b5e3	c8		iny				iny
.d5e4	b5e4	b1 30		lda ($30),y			lda 	(codePtr),y
.d5e6	b5e6	85 36		sta $36				sta 	zTemp0
.d5e8	b5e8	c8		iny				iny
.d5e9	b5e9	5a		phy				phy 								; save position
.d5ea	b5ea	a9 8e		lda #$8e			lda 	#CLIIdentifier+$80
.d5ec	b5ec	20 ba b6	jsr $b6ba			jsr 	LCLWriteColour
.d5ef	b5ef	a0 07		ldy #$07			ldy 	#7 							; output the identifier at +8
.d5f1	b5f1					_LCOutIdentifier:
.d5f1	b5f1	c8		iny				iny
.d5f2	b5f2	b1 36		lda ($36),y			lda 	(zTemp0),y					; bit 7 set = end.
.d5f4	b5f4	29 7f		and #$7f			and 	#$7F
.d5f6	b5f6	20 15 b7	jsr $b715			jsr 	LCLLowerCase
.d5f9	b5f9	20 c3 b6	jsr $b6c3			jsr 	LCLWrite
.d5fc	b5fc	b1 36		lda ($36),y			lda 	(zTemp0),y				 	; ends when bit 7 set.
.d5fe	b5fe	10 f1		bpl $b5f1			bpl 	_LCOutIdentifier
.d600	b600	7a		ply				ply 								; restore position
.d601	b601	4c 72 b5	jmp $b572			jmp 	_LCMainLoop
.d604	b604					_LCTokens:
.d604	b604	aa		tax				tax 								; token in X
.d605	b605	a9 e5		lda #$e5			lda 	#((KeywordSet2) & $FF)
.d607	b607	85 36		sta $36				sta 	0+zTemp0
.d609	b609	a9 b3		lda #$b3			lda 	#((KeywordSet2) >> 8)
.d60b	b60b	85 37		sta $37				sta 	1+zTemp0
.d60d	b60d	e0 82		cpx #$82			cpx 	#$82
.d60f	b60f	f0 16		beq $b627			beq 	_LCUseShift
.d611	b611	a9 25		lda #$25			lda 	#((KeywordSet1) & $FF)
.d613	b613	85 36		sta $36				sta 	0+zTemp0
.d615	b615	a9 b3		lda #$b3			lda 	#((KeywordSet1) >> 8)
.d617	b617	85 37		sta $37				sta 	1+zTemp0
.d619	b619	e0 81		cpx #$81			cpx 	#$81
.d61b	b61b	f0 0a		beq $b627			beq 	_LCUseShift
.d61d	b61d	a9 d0		lda #$d0			lda 	#((KeywordSet0) & $FF)
.d61f	b61f	85 36		sta $36				sta 	0+zTemp0
.d621	b621	a9 b0		lda #$b0			lda 	#((KeywordSet0) >> 8)
.d623	b623	85 37		sta $37				sta 	1+zTemp0
.d625	b625	80 01		bra $b628			bra 	_LCNoShift
.d627	b627					_LCUseShift:
.d627	b627	c8		iny				iny
.d628	b628					_LCNoShift:
.d628	b628	20 ed b6	jsr $b6ed			jsr 	LCLCheckSpaceRequired 		; do we need a space ?
.d62b	b62b	b1 30		lda ($30),y			lda 	(codePtr),y
.d62d	b62d	aa		tax				tax 								; into X
.d62e	b62e					_LCFindText:
.d62e	b62e	ca		dex				dex
.d62f	b62f	10 0e		bpl $b63f			bpl 	_LCFoundText 				; found text.
.d631	b631	b2 36		lda ($36)			lda 	(zTemp0) 					; length of text
.d633	b633	1a		inc a				inc 	a 							; one extra for size
.d634	b634	38		sec				sec 								; one extra for checksum
.d635	b635	65 36		adc $36				adc 	zTemp0 						; go to next token
.d637	b637	85 36		sta $36				sta 	zTemp0
.d639	b639	90 f3		bcc $b62e			bcc 	_LCFindText
.d63b	b63b	e6 37		inc $37				inc 	zTemp0+1
.d63d	b63d	80 ef		bra $b62e			bra 	_LCFindText
.d63f	b63f					_LCFoundText:
.d63f	b63f	5a		phy				phy 								; save List position
.d640	b640	b2 36		lda ($36)			lda 	(zTemp0)					; count to print
.d642	b642	aa		tax				tax
.d643	b643	a9 86		lda #$86			lda 	#CLIToken+$80
.d645	b645	20 ba b6	jsr $b6ba			jsr 	LCLWriteColour
.d648	b648	a0 02		ldy #$02			ldy 	#2
.d64a	b64a					_LCCopyToken:
.d64a	b64a	b1 36		lda ($36),y			lda 	(zTemp0),y
.d64c	b64c	20 15 b7	jsr $b715			jsr 	LCLLowerCase
.d64f	b64f	20 c3 b6	jsr $b6c3			jsr 	LCLWrite
.d652	b652	c8		iny				iny
.d653	b653	ca		dex				dex
.d654	b654	d0 f4		bne $b64a			bne 	_LCCopyToken
.d656	b656	c9 28		cmp #$28			cmp 	#"(" 						; if last char not ( print a space
.d658	b658	f0 05		beq $b65f			beq 	_LCNoSpace
.d65a	b65a	a9 20		lda #$20			lda 	#' '
.d65c	b65c	20 c3 b6	jsr $b6c3			jsr 	LCLWrite
.d65f	b65f					_LCNoSpace:
.d65f	b65f	7a		ply				ply 								; restore position.
.d660	b660	c8		iny				iny 								; consume token
.d661	b661	4c 72 b5	jmp $b572			jmp 	_LCMainLoop 				; and go around again.
.d664	b664					_LCData:
.d664	b664	48		pha				pha 								; save type $FE/$FF
.d665	b665	a2 24		ldx #$24			ldx 	#'$' 						; figure out $ or "
.d667	b667	c9 fe		cmp #$fe			cmp 	#$FE
.d669	b669	f0 22		beq $b68d			beq 	_LCHaveOpener
.d66b	b66b	a2 22		ldx #$22			ldx 	#'"'
.d66d	b66d	a9 8f		lda #$8f			lda 	#CLIData+$80
.d66f	b66f	20 ba b6	jsr $b6ba			jsr 	LCLWriteColour
.d672	b672	c0 04		cpy #$04			cpy 	#4 							; must be 2nd thing on line
.d674	b674	d0 17		bne $b68d			bne 	_LCHaveOpener
.d676	b676	88		dey				dey 								; what precedes it ?
.d677	b677	b1 30		lda ($30),y			lda 	(codePtr),y
.d679	b679	c8		iny				iny
.d67a	b67a	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; if quote
.d67c	b67c	d0 0f		bne $b68d			bne 	_LCHaveOpener
.d67e	b67e	a9 09		lda #$09			lda 	#9 							; tab
.d680	b680	20 c3 b6	jsr $b6c3			jsr 	LCLWrite
.d683	b683	a9 9e		lda #$9e			lda 	#$90+CLIBComment
.d685	b685	20 c3 b6	jsr $b6c3			jsr 	LCLWrite
.d688	b688	a9 85		lda #$85			lda 	#CLIFComment+$80
.d68a	b68a	20 ba b6	jsr $b6ba			jsr 	LCLWriteColour
.d68d	b68d					_LCHaveOpener:
.d68d	b68d	8a		txa				txa 								; output prefix (# or ")
.d68e	b68e	20 c3 b6	jsr $b6c3			jsr 	LCLWrite
.d691	b691	c8		iny				iny 								; get count
.d692	b692	b1 30		lda ($30),y			lda 	(codePtr),y
.d694	b694	aa		tax				tax
.d695	b695	c8		iny				iny 								; point at first character
.d696	b696					_LCOutData:
.d696	b696	b1 30		lda ($30),y			lda 	(codePtr),y
.d698	b698	c9 00		cmp #$00			cmp 	#0
.d69a	b69a	f0 03		beq $b69f			beq 	_LCNoPrint
.d69c	b69c	20 c3 b6	jsr $b6c3			jsr 	LCLWrite
.d69f	b69f					_LCNoPrint:
.d69f	b69f	c8		iny				iny
.d6a0	b6a0	ca		dex				dex
.d6a1	b6a1	d0 f3		bne $b696			bne 	_LCOutData
.d6a3	b6a3	68		pla				pla 								; closing " required ?
.d6a4	b6a4	c9 ff		cmp #$ff			cmp 	#$FF 						; not required for hex constant.
.d6a6	b6a6	d0 0f		bne $b6b7			bne 	_LCNoQuote
.d6a8	b6a8	a9 22		lda #$22			lda 	#'"'
.d6aa	b6aa	20 c3 b6	jsr $b6c3			jsr 	LCLWrite
.d6ad	b6ad	ad 74 06	lda $0674			lda 	EXTTextColour
.d6b0	b6b0	29 0f		and #$0f			and 	#$0F
.d6b2	b6b2	09 90		ora #$90			ora 	#$90
.d6b4	b6b4	20 c3 b6	jsr $b6c3			jsr 	LCLWrite
.d6b7	b6b7					_LCNoQuote:
.d6b7	b6b7	4c 72 b5	jmp $b572			jmp 	_LCMainLoop
.d6ba	b6ba					LCLWriteColour:
.d6ba	b6ba	cd 29 04	cmp $0429			cmp 	currentListColour 			; has the colour changed
.d6bd	b6bd	8d 29 04	sta $0429			sta 	currentListColour 			; (update it anyway)
.d6c0	b6c0	d0 01		bne $b6c3			bne 	LCLWrite 					; if different, output it
.d6c2	b6c2	60		rts				rts
.d6c3	b6c3					LCLWrite:
.d6c3	b6c3	da		phx				phx
.d6c4	b6c4	ae 1d 04	ldx $041d			ldx 	tbOffset 					; write out make ASCIIZ
.d6c7	b6c7	9d 2d 04	sta $042d,x			sta 	tokenBuffer,x
.d6ca	b6ca	9e 2e 04	stz $042e,x			stz 	tokenBuffer+1,x
.d6cd	b6cd	ee 1d 04	inc $041d			inc 	tbOffset 					; bump the position
.d6d0	b6d0	09 00		ora #$00			ora 	#0 							; don't update last character if colour data
.d6d2	b6d2	30 03		bmi $b6d7			bmi 	_LCLNoColour
.d6d4	b6d4	8d 27 04	sta $0427			sta 	lcLastCharacter
.d6d7	b6d7					_LCLNoColour:
.d6d7	b6d7	fa		plx				plx
.d6d8	b6d8	60		rts				rts
.d6d9	b6d9					LCLDeleteLastSpace:
.d6d9	b6d9	48		pha				pha
.d6da	b6da	da		phx				phx
.d6db	b6db	ae 1d 04	ldx $041d			ldx 	tbOffset
.d6de	b6de	f0 0a		beq $b6ea			beq 	_LCDLSExit
.d6e0	b6e0	bd 2c 04	lda $042c,x			lda 	tokenBuffer-1,x
.d6e3	b6e3	c9 20		cmp #$20			cmp 	#' '
.d6e5	b6e5	d0 03		bne $b6ea			bne 	_LCDLSExit
.d6e7	b6e7	ce 1d 04	dec $041d			dec 	tbOffset
.d6ea	b6ea					_LCDLSExit:
.d6ea	b6ea	fa		plx				plx
.d6eb	b6eb	68		pla				pla
.d6ec	b6ec	60		rts				rts
.d6ed	b6ed					LCLCheckSpaceRequired:
.d6ed	b6ed	ad 27 04	lda $0427			lda 	lcLastCharacter 			; check last character
.d6f0	b6f0	c9 24		cmp #$24			cmp 	#'$' 						; $ # and ) require that token space.
.d6f2	b6f2	f0 1b		beq $b70f			beq 	_LCCSRSpace
.d6f4	b6f4	c9 29		cmp #$29			cmp 	#')'
.d6f6	b6f6	f0 17		beq $b70f			beq 	_LCCSRSpace
.d6f8	b6f8	c9 23		cmp #$23			cmp 	#'#'
.d6fa	b6fa	f0 13		beq $b70f			beq 	_LCCSRSpace
.d6fc	b6fc	20 15 b7	jsr $b715			jsr 	LCLLowerCase 				; saves a little effort
.d6ff	b6ff	c9 30		cmp #$30			cmp 	#"0" 						; check if it was 0-9 A-Z a-z if so need space.
.d701	b701	90 11		bcc $b714			bcc 	_LCCSRExit
.d703	b703	c9 3a		cmp #$3a			cmp 	#"9"+1
.d705	b705	90 08		bcc $b70f			bcc 	_LCCSRSpace
.d707	b707	c9 61		cmp #$61			cmp 	#"a"
.d709	b709	90 09		bcc $b714			bcc 	_LCCSRExit
.d70b	b70b	c9 7b		cmp #$7b			cmp 	#"z"+1
.d70d	b70d	b0 05		bcs $b714			bcs 	_LCCSRExit
.d70f	b70f					_LCCSRSpace:
.d70f	b70f	a9 20		lda #$20			lda 	#' '
.d711	b711	20 c3 b6	jsr $b6c3			jsr 	LCLWrite
.d714	b714					_LCCSRExit:
.d714	b714	60		rts				rts
.d715	b715					LCLLowerCase:
.d715	b715	c9 41		cmp #$41			cmp 	#"A"
.d717	b717	90 06		bcc $b71f			bcc 	_LCLLCOut
.d719	b719	c9 5b		cmp #$5b			cmp 	#"Z"+1
.d71b	b71b	b0 02		bcs $b71f			bcs 	_LCLLCOut
.d71d	b71d	69 20		adc #$20			adc 	#$20
.d71f	b71f					_LCLLCOut:
.d71f	b71f	60		rts				rts
.d720	b720					LCLUpperCase:
.d720	b720	c9 61		cmp #$61			cmp 	#"a"
.d722	b722	90 06		bcc $b72a			bcc 	_LCLUCOut
.d724	b724	c9 7b		cmp #$7b			cmp 	#"z"+1
.d726	b726	b0 02		bcs $b72a			bcs 	_LCLUCOut
.d728	b728	e9 1f		sbc #$1f			sbc 	#$1F
.d72a	b72a					_LCLUCOut:
.d72a	b72a	60		rts				rts
.d72b	b72b					LCLWriteNumberXA:
.d72b	b72b	64 37		stz $37				stz 	zTemp0+1 					; index into digit table.
.d72d	b72d					_LCLWNLoop1:
.d72d	b72d	64 36		stz $36				stz 	zTemp0 						; subtraction count.
.d72f	b72f					_LCLWNLoop2:
.d72f	b72f	48		pha				pha 								; save initial LSB
.d730	b730	38		sec				sec
.d731	b731	a4 37		ldy $37				ldy 	zTemp0+1 					; position in table.
.d733	b733	f9 64 b7	sbc $b764,y			sbc 	_LCLWNTable,y
.d736	b736	48		pha				pha
.d737	b737	8a		txa				txa
.d738	b738	f9 65 b7	sbc $b765,y			sbc 	_LCLWNTable+1,y
.d73b	b73b	90 07		bcc $b744			bcc 	_LCLWNUnderflow
.d73d	b73d	e6 36		inc $36				inc 	zTemp0  					; subtracted one without borrow.
.d73f	b73f	aa		tax				tax 								; update X
.d740	b740	68		pla				pla 								; restore A
.d741	b741	7a		ply				ply 								; throw original
.d742	b742	80 eb		bra $b72f			bra 	_LCLWNLoop2 				; try again.
.d744	b744					_LCLWNUnderflow:
.d744	b744	a4 36		ldy $36				ldy 	zTemp0 						; count of subtractions.
.d746	b746	d0 06		bne $b74e			bne 	_LCLWNOut
.d748	b748	ad 1d 04	lda $041d			lda 	tbOffset 					; suppress leading zeroes
.d74b	b74b	3a		dec a				dec 	a
.d74c	b74c	f0 04		beq $b752			beq 	_LCLWNNext
.d74e	b74e					_LCLWNOut:
.d74e	b74e	98		tya				tya
.d74f	b74f	20 5e b7	jsr $b75e			jsr 	_LCLWNOutDigit
.d752	b752					_LCLWNNext:
.d752	b752	7a		ply				ply 							 	; restore original value.
.d753	b753	68		pla				pla
.d754	b754	a4 37		ldy $37				ldy 	zTemp0+1  					; bump the index
.d756	b756	c8		iny				iny
.d757	b757	c8		iny				iny
.d758	b758	84 37		sty $37				sty 	zTemp0+1
.d75a	b75a	c0 08		cpy #$08			cpy 	#8 							; done all 4
.d75c	b75c	d0 cf		bne $b72d			bne 	_LCLWNLoop1
.d75e	b75e					_LCLWNOutDigit:
.d75e	b75e	09 30		ora #$30			ora 	#'0'
.d760	b760	20 c3 b6	jsr $b6c3			jsr 	LCLWrite
.d763	b763	60		rts				rts
.d764	b764					_LCLWNTable:
>d764	b764	10 27						.word 	10000
>d766	b766	e8 03						.word 	1000
>d768	b768	64 00						.word 	100
>d76a	b76a	0a 00						.word 	10
.d76c	b76c					TOKSearchTable:
.d76c	b76c	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token being tested.
.d76e	b76e	85 36		sta $36				sta 	zTemp0
.d770	b770	a0 00		ldy #$00			ldy 	#0
.d772	b772	a9 80		lda #$80			lda 	#$80 						; token # so we know which one we are looking at
.d774	b774	85 38		sta $38				sta 	zTemp1
.d776	b776					_TSTLoop:
.d776	b776	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.d778	b778	30 49		bmi $b7c3			bmi 	_TSTFail 					; -ve = end of table, so fail.
.d77a	b77a	f0 2e		beq $b7aa			beq 	_TSTNext 					; zero, check next as it's a dummy (e.g. EOL, SHIFT)
.d77c	b77c	c8		iny				iny 								; get the hash
.d77d	b77d	b1 36		lda ($36),y			lda 	(zTemp0),y
.d77f	b77f	88		dey				dey
.d780	b780	cd 03 04	cmp $0403			cmp 	identHash 					; check they match with the identifier hash, if not go to next
.d783	b783	d0 25		bne $b7aa			bne 	_TSTNext
.d785	b785	ad 02 04	lda $0402			lda 	identTypeEnd 				; get length of identifier from end-start
.d788	b788	38		sec				sec
.d789	b789	ed 00 04	sbc $0400			sbc 	identStart
.d78c	b78c	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; compare against the length in the table, no match, then return.
.d78e	b78e	d0 1a		bne $b7aa			bne 	_TSTNext
.d790	b790	5a		phy				phy 								; save Y , we might fail to match.
.d791	b791	c8		iny				iny 								; point to text
.d792	b792	c8		iny				iny
.d793	b793	ae 00 04	ldx $0400			ldx 	identStart 					; offset in line buffer in X
.d796	b796					_TSTCompareName:
.d796	b796	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; compare text.
.d799	b799	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.d79b	b79b	d0 0c		bne $b7a9			bne 	_TSTNextPullY 				; fail, pullY and do next
.d79d	b79d	e8		inx				inx
.d79e	b79e	c8		iny				iny
.d79f	b79f	ec 02 04	cpx $0402			cpx 	identTypeEnd 				; complete match.
.d7a2	b7a2	d0 f2		bne $b796			bne 	_TSTCompareName
.d7a4	b7a4	7a		ply				ply 								; throw Y
.d7a5	b7a5	a5 38		lda $38				lda 	zTemp1 						; get token #
.d7a7	b7a7	38		sec				sec 								; return with CS = passed.
.d7a8	b7a8	60		rts				rts
.d7a9	b7a9					_TSTNextPullY:
.d7a9	b7a9	7a		ply				ply 								; restore current, fall through.
.d7aa	b7aa					_TSTNext:
.d7aa	b7aa	e6 38		inc $38				inc 	zTemp1 						; token counter
.d7ac	b7ac	98		tya				tya
.d7ad	b7ad	18		clc				clc
.d7ae	b7ae	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.d7b0	b7b0	1a		inc a				inc 	a 							; +1
.d7b1	b7b1	1a		inc a				inc 	a 							; +2
.d7b2	b7b2	a8		tay				tay
.d7b3	b7b3	10 c1		bpl $b776			bpl 	_TSTLoop 					; if Y < $80 loop back
.d7b5	b7b5	98		tya				tya 								; add Y to zTemp0 and reset Y
.d7b6	b7b6	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.d7b8	b7b8	18		clc				clc  								; but have tables > 255 bytes
.d7b9	b7b9	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.d7bb	b7bb	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.d7bd	b7bd	90 b7		bcc $b776			bcc 	_TSTLoop
.d7bf	b7bf	e6 37		inc $37				inc 	zTemp0+1
.d7c1	b7c1	80 b3		bra $b776			bra 	_TSTLoop
.d7c3	b7c3					_TSTFail:
.d7c3	b7c3	18		clc				clc
.d7c4	b7c4	60		rts				rts
.d7c5	b7c5					Export_TKTokeniseLine:
.d7c5	b7c5	20 92 b9	jsr $b992			jsr 	LCLFixLineBufferCase 		; fix line case
.d7c8	b7c8	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.d7ca	b7ca	8d 2a 04	sta $042a			sta 	tokenOffset 				; (3 bytes for line number & offset)
.d7cd	b7cd	9c 2b 04	stz $042b			stz 	tokenLineNumber
.d7d0	b7d0	9c 2c 04	stz $042c			stz 	tokenLineNumber+1
.d7d3	b7d3	a2 ff		ldx #$ff			ldx 	#$FF
.d7d5	b7d5					_TKFindFirst:
.d7d5	b7d5	e8		inx				inx
.d7d6	b7d6	bd 2a 05	lda $052a,x			lda 	lineBuffer,x
.d7d9	b7d9	f0 62		beq $b83d			beq 	_TKExit
.d7db	b7db	c9 20		cmp #$20			cmp 	#' '
.d7dd	b7dd	90 f6		bcc $b7d5			bcc 	_TKFindFirst
.d7df	b7df	c9 30		cmp #$30			cmp 	#'0'
.d7e1	b7e1	90 07		bcc $b7ea			bcc 	_TKNoLineNumber
.d7e3	b7e3	c9 3a		cmp #$3a			cmp 	#'9'+1
.d7e5	b7e5	b0 03		bcs $b7ea			bcs 	_TKNoLineNumber
.d7e7	b7e7	20 bc b9	jsr $b9bc			jsr 	TOKExtractLineNumber
.d7ea	b7ea					_TKNoLineNumber:
.d7ea	b7ea					_TKTokeniseLoop:
.d7ea	b7ea	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.d7ed	b7ed	f0 4e		beq $b83d			beq 	_TKExit
.d7ef	b7ef	e8		inx				inx
.d7f0	b7f0	c9 20		cmp #$20			cmp 	#' '
.d7f2	b7f2	f0 f6		beq $b7ea			beq 	_TKTokeniseLoop 			; keep looping if space found.
.d7f4	b7f4	ca		dex				dex 								; undo last get, A contains character, X is position.
.d7f5	b7f5	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.d7f7	b7f7	f0 68		beq $b861			beq 	_TKTokeniseIdentifier 		; (already case converted outside string constants)
.d7f9	b7f9	c9 41		cmp #$41			cmp 	#'A'
.d7fb	b7fb	90 04		bcc $b801			bcc 	_TKTokenisePunctuation
.d7fd	b7fd	c9 5b		cmp #$5b			cmp 	#'Z'+1
.d7ff	b7ff	90 60		bcc $b861			bcc 	_TKTokeniseIdentifier
.d801	b801					_TKTokenisePunctuation:
.d801	b801	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.d803	b803	f0 2e		beq $b833			beq 	_TKString
.d805	b805	c9 24		cmp #$24			cmp 	#'$'						; hexadecimal constant ($ only appears at end of identifiers)
.d807	b807	f0 2f		beq $b838			beq 	_TKHexConstant
.d809	b809	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers - these are for <> <= >= >> <<
.d80b	b80b	f0 36		beq $b843			beq 	_TKCheckDouble
.d80d	b80d	c9 3e		cmp #$3e			cmp 	#'>'
.d80f	b80f	f0 32		beq $b843			beq 	_TKCheckDouble
.d811	b811					_TKStandardPunctuation:
.d811	b811	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; get the punctuation token back.
.d814	b814	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.d816	b816	90 0e		bcc $b826			bcc 	_TKNoShift
.d818	b818	48		pha				pha 								; save. we are about to convert this punctuation token from
.d819	b819	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.d81b	b81b	85 36		sta $36				sta 	zTemp0
.d81d	b81d	68		pla				pla
.d81e	b81e	29 20		and #$20			and 	#32 						; bit 5
.d820	b820	4a		lsr a				lsr 	a 							; shift into bit 3
.d821	b821	4a		lsr a				lsr 	a
.d822	b822	05 36		ora $36				ora 	zTemp0
.d824	b824	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.d826	b826					_TKNoShift:
.d826	b826	20 01 ba	jsr $ba01			jsr 	TOKWriteByte 				; write the punctuation character
.d829	b829	e8		inx				inx 								; consume the character
.d82a	b82a	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; quote found ?
.d82c	b82c	d0 bc		bne $b7ea			bne 	_TKTokeniseLoop 			; and loop round again.
.d82e	b82e	20 f4 b8	jsr $b8f4			jsr 	TOKCheckComment 			; comment checl
.d831	b831	80 b7		bra $b7ea			bra 	_TKTokeniseLoop
.d833	b833					_TKString:
.d833	b833	20 21 b9	jsr $b921			jsr 	TOKTokenString
.d836	b836	80 b2		bra $b7ea			bra 	_TKTokeniseLoop
.d838	b838					_TKHexConstant:
.d838	b838	20 5c b9	jsr $b95c			jsr 	TOKHexConstant
.d83b	b83b	80 ad		bra $b7ea			bra 	_TKTokeniseLoop
.d83d	b83d	a9 80		lda #$80	_TKExit:lda 	#KWC_EOL 					; write end of line byte
.d83f	b83f	20 01 ba	jsr $ba01			jsr 	TOKWriteByte
.d842	b842	60		rts				rts
.d843	b843					_TKCheckDouble:
.d843	b843	bd 2b 05	lda $052b,x			lda 	lineBuffer+1,x 				; get next character
.d846	b846	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.d848	b848	90 c7		bcc $b811			bcc 	_TKStandardPunctuation 		; and do the normal punctuation handler.
.d84a	b84a	c9 3f		cmp #$3f			cmp 	#'>'+1
.d84c	b84c	b0 c3		bcs $b811			bcs 	_TKStandardPunctuation
.d84e	b84e	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.d851	b851	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.d853	b853	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.d854	b854	7d 2b 05	adc $052b,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.d857	b857	38		sec				sec
.d858	b858	e9 3c		sbc #$3c			sbc 	#'<'
.d85a	b85a	20 01 ba	jsr $ba01			jsr 	TOKWriteByte 				; this is in the range 0-7
.d85d	b85d	e8		inx				inx 								; consume both
.d85e	b85e	e8		inx				inx
.d85f	b85f	80 89		bra $b7ea			bra 	_TKTokeniseLoop
.d861	b861					_TKTokeniseIdentifier:
.d861	b861	8e 00 04	stx $0400			stx 	identStart 					; save start
.d864	b864	9c 04 04	stz $0404			stz 	identTypeByte 				; zero the type byte
.d867	b867					_TKCheckLoop:
.d867	b867	e8		inx				inx 								; look at next, we know first is identifier already.
.d868	b868	bd 2a 05	lda $052a,x			lda  	lineBuffer,x
.d86b	b86b	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.d86d	b86d	f0 f8		beq $b867			beq 	_TKCheckLoop
.d86f	b86f	c9 30		cmp #$30			cmp	 	#"0"
.d871	b871	90 0c		bcc $b87f			bcc 	_TKEndIdentifier
.d873	b873	c9 3a		cmp #$3a			cmp 	#"9"+1
.d875	b875	90 f0		bcc $b867			bcc 	_TKCheckLoop
.d877	b877	c9 41		cmp #$41			cmp	 	#"A"
.d879	b879	90 04		bcc $b87f			bcc 	_TKEndIdentifier
.d87b	b87b	c9 5b		cmp #$5b			cmp 	#"Z"+1
.d87d	b87d	90 e8		bcc $b867			bcc 	_TKCheckLoop
.d87f	b87f					_TKEndIdentifier:
.d87f	b87f	8e 01 04	stx $0401			stx 	identTypeStart 				; save start of type text (if any !)
.d882	b882	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.d884	b884	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.d886	b886	f0 06		beq $b88e			beq 	_TKHasTypeCharacter
.d888	b888	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.d88a	b88a	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.d88c	b88c	d0 07		bne $b895			bne 	_TKNoTypeCharacter
.d88e	b88e					_TKHasTypeCharacter:
.d88e	b88e	8c 04 04	sty $0404			sty 	identTypeByte 				; has # or $, save the type
.d891	b891	e8		inx				inx 								; consume the type character
.d892	b892	bd 2a 05	lda $052a,x			lda 	lineBuffer,x
.d895	b895					_TKNoTypeCharacter:
.d895	b895	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.d897	b897	d0 09		bne $b8a2			bne 	_TKNoArray
.d899	b899	e8		inx				inx 								; skip the (
.d89a	b89a	ad 04 04	lda $0404			lda 	identTypeByte 				; set bit 2 (e.g. array) in type byte
.d89d	b89d	09 04		ora #$04			ora 	#$04
.d89f	b89f	8d 04 04	sta $0404			sta 	identTypeByte
.d8a2	b8a2					_TKNoArray:
.d8a2	b8a2	8e 02 04	stx $0402			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.d8a5	b8a5	20 7d b9	jsr $b97d			jsr 	TOKCalculateHash 			; calculate the has for those tokens
.d8a8	b8a8	a0 b0		ldy #$b0			ldy 	#(KeywordSet0) >> 8
.d8aa	b8aa	a9 d0		lda #$d0			lda 	#(KeywordSet0) & $FF
.d8ac	b8ac	20 6c b7	jsr $b76c			jsr 	TOKSearchTable
.d8af	b8af	a2 00		ldx #$00			ldx 	#0
.d8b1	b8b1	b0 1f		bcs $b8d2			bcs 	_TKFoundToken
.d8b3	b8b3	a0 b3		ldy #$b3			ldy 	#(KeywordSet1) >> 8
.d8b5	b8b5	a9 25		lda #$25			lda 	#(KeywordSet1) & $FF
.d8b7	b8b7	20 6c b7	jsr $b76c			jsr 	TOKSearchTable
.d8ba	b8ba	a2 81		ldx #$81			ldx 	#$81
.d8bc	b8bc	b0 14		bcs $b8d2			bcs 	_TKFoundToken
.d8be	b8be	a0 b3		ldy #$b3			ldy 	#(KeywordSet2) >> 8
.d8c0	b8c0	a9 e5		lda #$e5			lda 	#(KeywordSet2) & $FF
.d8c2	b8c2	20 6c b7	jsr $b76c			jsr 	TOKSearchTable
.d8c5	b8c5	a2 82		ldx #$82			ldx 	#$82
.d8c7	b8c7	b0 09		bcs $b8d2			bcs 	_TKFoundToken
.d8c9	b8c9	20 0d ba	jsr $ba0d			jsr 	TOKCheckCreateVariableRecord ; failed all, it's a variable, create record if does not exist.
.d8cc	b8cc	ae 02 04	ldx $0402			ldx 	identTypeEnd 				; X points to following byte
.d8cf	b8cf	4c ea b7	jmp $b7ea			jmp 	_TKTokeniseLoop 			; and go round again.
.d8d2	b8d2					_TKFoundToken:
.d8d2	b8d2	48		pha				pha 								; save token
.d8d3	b8d3	8a		txa				txa 								; shift in X, is there one ?
.d8d4	b8d4	f0 03		beq $b8d9			beq 	_TKNoTShift
.d8d6	b8d6	20 01 ba	jsr $ba01			jsr 	TOKWriteByte 				; if so, write it out
.d8d9	b8d9					_TKNoTShift:
.d8d9	b8d9	68		pla				pla 								; restore and write token
.d8da	b8da	20 01 ba	jsr $ba01			jsr 	TOKWriteByte
.d8dd	b8dd	e0 00		cpx #$00			cpx 	#0 							; check for REM and '
.d8df	b8df	d0 0d		bne $b8ee			bne 	_TKNotRem 			 		; not shifted ?
.d8e1	b8e1	c9 d3		cmp #$d3			cmp 	#KWD_REM
.d8e3	b8e3	d0 09		bne $b8ee			bne 	_TKNotRem
.d8e5	b8e5	ae 02 04	ldx $0402			ldx 	identTypeEnd 				; check if comment follows.
.d8e8	b8e8	20 f4 b8	jsr $b8f4			jsr 	TOKCheckComment
.d8eb	b8eb	4c ea b7	jmp $b7ea			jmp 	_TKTokeniseLoop
.d8ee	b8ee					_TKNotRem:
.d8ee	b8ee	ae 02 04	ldx $0402			ldx 	identTypeEnd 				; X points to following byte
.d8f1	b8f1	4c ea b7	jmp $b7ea			jmp 	_TKTokeniseLoop 			; and go round again.
.d8f4	b8f4					TOKCheckComment:
.d8f4	b8f4	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; skip over space
.d8f7	b8f7	e8		inx				inx
.d8f8	b8f8	c9 20		cmp #$20			cmp 	#' '
.d8fa	b8fa	f0 f8		beq $b8f4			beq 	TOKCheckComment
.d8fc	b8fc	ca		dex				dex 								; first non space character
.d8fd	b8fd	c9 22		cmp #$22			cmp 	#'"'						; quote mark
.d8ff	b8ff	f0 1f		beq $b920			beq 	_TOKCCExit 					; then we are okay
.d901	b901	c9 00		cmp #$00			cmp 	#0 							; EOL
.d903	b903	f0 1b		beq $b920			beq 	_TOKCCExit 					; then we are okay
.d905	b905	da		phx				phx
.d906	b906					_TOKCCLowerCase:
.d906	b906	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; about making it lower case it all, but I thought
.d909	b909	c9 41		cmp #$41			cmp 	#"A"		 				; that was a bit risky. So it's converted to L/C here.
.d90b	b90b	90 09		bcc $b916			bcc 	_TOKKCNotUC
.d90d	b90d	c9 5b		cmp #$5b			cmp 	#"Z"+1
.d90f	b90f	b0 05		bcs $b916			bcs 	_TOKKCNotUC
.d911	b911	49 20		eor #$20			eor 	#$20
.d913	b913	9d 2a 05	sta $052a,x			sta 	lineBuffer,x
.d916	b916					_TOKKCNotUC:
.d916	b916	e8		inx				inx
.d917	b917	c9 00		cmp #$00			cmp 	#0
.d919	b919	d0 eb		bne $b906			bne 	_TOKCCLowerCase
.d91b	b91b	fa		plx				plx
.d91c	b91c	ca		dex				dex 								; tokenise string expects initial skip.
.d91d	b91d	20 21 b9	jsr $b921			jsr 	TOKTokenString 				; tokenise rest of line as a string.
.d920	b920					_TOKCCExit:
.d920	b920	60		rts				rts
.d921	b921					TOKTokenString:
.d921	b921	a9 ff		lda #$ff			lda 	#KWC_STRING 				; string token.
.d923	b923	20 01 ba	jsr $ba01			jsr 	TOKWriteByte
.d926	b926	e8		inx				inx									; start of quoted string.
.d927	b927	da		phx				phx 								; push start of string on top
.d928	b928	ca		dex				dex 								; because we pre-increment
.d929	b929					_TSFindEnd:
.d929	b929	e8		inx				inx
.d92a	b92a	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; next character
.d92d	b92d	f0 04		beq $b933			beq 	_TSEndOfString 				; no matching quote, we don't mind.
.d92f	b92f	c9 22		cmp #$22			cmp 	#'"' 						; go back if quote not found
.d931	b931	d0 f6		bne $b929			bne 	_TSFindEnd
.d933	b933					_TSEndOfString:
.d933	b933	7a		ply				ply  								; so now Y is first character, X is character after end.
.d934	b934	48		pha				pha 								; save terminating character
.d935	b935	20 3d b9	jsr $b93d			jsr 	TOKWriteBlockXY 			; write X to Y as a data block
.d938	b938	68		pla				pla 								; terminating character
.d939	b939	f0 01		beq $b93c			beq 	_TSNotQuote					; if it wasn't EOS skip it
.d93b	b93b	e8		inx				inx
.d93c	b93c					_TSNotQuote:
.d93c	b93c	60		rts				rts
.d93d	b93d					TOKWriteBlockXY:
.d93d	b93d	86 36		stx $36				stx 	zTemp0 						; save end character
.d93f	b93f	98		tya				tya 								; use 2's complement to work out the byte size
.d940	b940	49 ff		eor #$ff			eor 	#$FF
.d942	b942	38		sec				sec
.d943	b943	65 36		adc $36				adc 	zTemp0
.d945	b945	1a		inc a				inc 	a 							; one extra for NULL
.d946	b946	20 01 ba	jsr $ba01			jsr 	TOKWriteByte
.d949	b949					_TOBlockLoop:
.d949	b949	c4 36		cpy $36				cpy 	zTemp0 						; exit if reached the end
.d94b	b94b	f0 09		beq $b956			beq 	_TOBlockExit
.d94d	b94d	b9 2a 05	lda $052a,y			lda 	lineBuffer,y 				; write byte out.
.d950	b950	20 01 ba	jsr $ba01			jsr 	TOKWriteByte
.d953	b953	c8		iny				iny
.d954	b954	80 f3		bra $b949			bra 	_TOBlockLoop
.d956	b956					_TOBlockExit:
.d956	b956	a9 00		lda #$00			lda 	#0 							; add NULL.
.d958	b958	20 01 ba	jsr $ba01			jsr 	TOKWriteByte
.d95b	b95b	60		rts				rts
.d95c	b95c					TOKHexConstant:
.d95c	b95c	a9 fe		lda #$fe			lda 	#KWC_HEXCONST 				; hex constant token.
.d95e	b95e	20 01 ba	jsr $ba01			jsr 	TOKWriteByte
.d961	b961	e8		inx				inx									; start of quoted string.
.d962	b962	da		phx				phx 								; push start of constant on top
.d963	b963	ca		dex				dex
.d964	b964					_THFindLoop:
.d964	b964	e8		inx				inx 	 							; this is stored in a block, so find out how long
.d965	b965	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; the hex constant is.
.d968	b968	c9 30		cmp #$30			cmp 	#"0"
.d96a	b96a	90 0c		bcc $b978			bcc 	_THFoundEnd
.d96c	b96c	c9 3a		cmp #$3a			cmp 	#"9"+1
.d96e	b96e	90 f4		bcc $b964			bcc 	_THFindLoop
.d970	b970	c9 41		cmp #$41			cmp 	#"A"
.d972	b972	90 04		bcc $b978			bcc 	_THFoundEnd
.d974	b974	c9 47		cmp #$47			cmp 	#"F"+1
.d976	b976	90 ec		bcc $b964			bcc 	_THFindLoop
.d978	b978					_THFoundEnd:
.d978	b978	7a		ply				ply 								; restore start
.d979	b979	20 3d b9	jsr $b93d			jsr 	TOKWriteBlockXY 			; output the block
.d97c	b97c	60		rts				rts
.d97d	b97d					TOKCalculateHash:
.d97d	b97d	da		phx				phx
.d97e	b97e	ae 00 04	ldx $0400			ldx 	identStart 					; needs to be same as in tokens.py - simple sum at present.
.d981	b981	a9 00		lda #$00			lda 	#0
.d983	b983					_TCHLoop:
.d983	b983	18		clc				clc
.d984	b984	7d 2a 05	adc $052a,x			adc 	lineBuffer,x
.d987	b987	e8		inx				inx
.d988	b988	ec 02 04	cpx $0402			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.d98b	b98b	d0 f6		bne $b983			bne 	_TCHLoop
.d98d	b98d	8d 03 04	sta $0403			sta 	identHash 					; save the hash
.d990	b990	fa		plx				plx
.d991	b991	60		rts				rts
.d992	b992					LCLFixLineBufferCase:
.d992	b992	a2 00		ldx #$00			ldx 	#0
.d994	b994					_FLBCLoop:
.d994	b994	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; get next character
.d997	b997	f0 22		beq $b9bb			beq 	_FLBCExit 					; end of string.
.d999	b999	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.d99b	b99b	f0 11		beq $b9ae			beq 	_FLBCInQuotes
.d99d	b99d	e8		inx				inx
.d99e	b99e	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.d9a0	b9a0	90 f2		bcc $b994			bcc 	_FLBCLoop
.d9a2	b9a2	c9 7b		cmp #$7b			cmp 	#'z'+1
.d9a4	b9a4	b0 ee		bcs $b994			bcs 	_FLBCLoop
.d9a6	b9a6	38		sec				sec 								; make U/C
.d9a7	b9a7	e9 20		sbc #$20			sbc 	#32
.d9a9	b9a9	9d 29 05	sta $0529,x			sta	 	lineBuffer-1,x 				; write back
.d9ac	b9ac	80 e6		bra $b994			bra 	_FLBCLoop
.d9ae	b9ae					_FLBCInQuotes:
.d9ae	b9ae	e8		inx				inx 								; advance
.d9af	b9af	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; get next
.d9b2	b9b2	f0 07		beq $b9bb			beq 	_FLBCExit 					; exit on EOS
.d9b4	b9b4	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.d9b6	b9b6	d0 f6		bne $b9ae			bne 	_FLBCInQuotes
.d9b8	b9b8	e8		inx				inx 								; skip over it
.d9b9	b9b9	80 d9		bra $b994			bra 	_FLBCLoop
.d9bb	b9bb					_FLBCExit:
.d9bb	b9bb	60		rts				rts
.d9bc	b9bc					TOKExtractLineNumber:
.d9bc	b9bc	ad 2c 04	lda $042c			lda 	tokenLineNumber+1 			; push current value on stack
.d9bf	b9bf	48		pha				pha
.d9c0	b9c0	ad 2b 04	lda $042b			lda 	tokenLineNumber
.d9c3	b9c3	48		pha				pha
.d9c4	b9c4	20 fa b9	jsr $b9fa			jsr 	_LCLNTimes2 				; line # x 2
.d9c7	b9c7	20 fa b9	jsr $b9fa			jsr 	_LCLNTimes2 				; line # x 4
.d9ca	b9ca	18		clc				clc 								; add stacked value
.d9cb	b9cb	68		pla				pla
.d9cc	b9cc	6d 2b 04	adc $042b			adc 	tokenLineNumber
.d9cf	b9cf	8d 2b 04	sta $042b			sta 	tokenLineNumber
.d9d2	b9d2	68		pla				pla
.d9d3	b9d3	6d 2c 04	adc $042c			adc 	tokenLineNumber+1
.d9d6	b9d6	8d 2c 04	sta $042c			sta 	tokenLineNumber+1 			; line # x 5
.d9d9	b9d9	20 fa b9	jsr $b9fa			jsr 	_LCLNTimes2 				; line # x 10
.d9dc	b9dc	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; get and consume character
.d9df	b9df	e8		inx				inx
.d9e0	b9e0	29 0f		and #$0f			and 	#15 						; add to line #
.d9e2	b9e2	18		clc				clc
.d9e3	b9e3	6d 2b 04	adc $042b			adc 	tokenLineNumber
.d9e6	b9e6	8d 2b 04	sta $042b			sta 	tokenLineNumber
.d9e9	b9e9	90 03		bcc $b9ee			bcc 	_TLENNoCarry
.d9eb	b9eb	ee 2c 04	inc $042c			inc 	tokenLineNumber+1
.d9ee	b9ee					_TLENNoCarry:
.d9ee	b9ee	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; more digits ?
.d9f1	b9f1	c9 30		cmp #$30			cmp 	#'0'
.d9f3	b9f3	90 04		bcc $b9f9			bcc 	_TLENExit
.d9f5	b9f5	c9 3a		cmp #$3a			cmp 	#'9'+1
.d9f7	b9f7	90 c3		bcc $b9bc			bcc 	TOKExtractLineNumber
.d9f9	b9f9					_TLENExit:
.d9f9	b9f9	60		rts				rts
.d9fa	b9fa					_LCLNTimes2:
.d9fa	b9fa	0e 2b 04	asl $042b			asl 	tokenLineNumber 			; doubles tokenLineNumber.
.d9fd	b9fd	2e 2c 04	rol $042c			rol 	tokenLineNumber+1
.da00	ba00	60		rts				rts
.da01	ba01					TOKWriteByte:
.da01	ba01	da		phx				phx
.da02	ba02	ae 2a 04	ldx $042a			ldx 	tokenOffset 				; next slot to write to
.da05	ba05	9d 2a 04	sta $042a,x			sta 	tokenOffset,x 				; write byte out
.da08	ba08	ee 2a 04	inc $042a			inc 	tokenOffset 				; advance slot.
.da0b	ba0b	fa		plx				plx
.da0c	ba0c	60		rts				rts
.da0d	ba0d					TOKCheckCreateVariableRecord:
.da0d	ba0d	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.da0f	ba0f	85 36		sta $36				sta 	0+zTemp0
.da11	ba11	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.da13	ba13	85 37		sta $37				sta 	1+zTemp0
.da15	ba15					_CCVSearch:
.da15	ba15	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.da17	ba17	f0 2c		beq $ba45			beq 	_CCVFail
.da19	ba19	a0 01		ldy #$01			ldy 	#1 							; read the hash
.da1b	ba1b	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.da1d	ba1d	cd 03 04	cmp $0403			cmp 	identHash 	  				; if not, try the next.
.da20	ba20	d0 16		bne $ba38			bne 	_CCVNext
.da22	ba22	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.da24	ba24	ae 00 04	ldx $0400			ldx 	identStart
.da27	ba27					_CCVCompare:
.da27	ba27	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.da2a	ba2a	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.da2c	ba2c	e8		inx				inx 								; advance pointers
.da2d	ba2d	c8		iny				iny
.da2e	ba2e	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.da2f	ba2f	d0 07		bne $ba38			bne 	_CCVNext  					; didn't match go to next.
.da31	ba31	90 f4		bcc $ba27			bcc 	_CCVCompare 				; not finished yet.
.da33	ba33	ec 02 04	cpx $0402			cpx 	identTypeEnd 				; matched whole thing ?
.da36	ba36	f0 41		beq $ba79			beq 	_CCVFound 					; yes, we were successful
.da38	ba38					_CCVNext:
.da38	ba38	18		clc				clc 								; go to next record.
.da39	ba39	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.da3b	ba3b	65 36		adc $36				adc 	zTemp0
.da3d	ba3d	85 36		sta $36				sta 	zTemp0
.da3f	ba3f	90 d4		bcc $ba15			bcc 	_CCVSearch
.da41	ba41	e6 37		inc $37				inc 	zTemp0+1
.da43	ba43	80 d0		bra $ba15			bra 	_CCVSearch
.da45	ba45					_CCVFail:
.da45	ba45	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.da47	ba47	ad 03 04	lda $0403			lda 	identHash
.da4a	ba4a	91 36		sta ($36),y			sta 	(zTemp0),y
.da4c	ba4c	c8		iny				iny 								; offset 2 is the type byte
.da4d	ba4d	ad 04 04	lda $0404			lda 	identTypeByte
.da50	ba50	91 36		sta ($36),y			sta 	(zTemp0),y
.da52	ba52	c8		iny				iny
.da53	ba53					_CCVData:
.da53	ba53	a9 00		lda #$00			lda 	#0 							; erase data 3-7 (the 5 value bytes)
.da55	ba55	91 36		sta ($36),y			sta 	(zTemp0),y
.da57	ba57	c8		iny				iny
.da58	ba58	c0 08		cpy #$08			cpy 	#8
.da5a	ba5a	90 f7		bcc $ba53			bcc 	_CCVData
.da5c	ba5c	ae 00 04	ldx $0400			ldx 	identStart 					; copy name into 8 on.
.da5f	ba5f					_CCVCopyName:
.da5f	ba5f	bd 2a 05	lda $052a,x			lda 	lineBuffer,x
.da62	ba62	91 36		sta ($36),y			sta 	(zTemp0),y
.da64	ba64	e8		inx				inx
.da65	ba65	c8		iny				iny
.da66	ba66	ec 02 04	cpx $0402			cpx 	identTypeEnd
.da69	ba69	d0 f4		bne $ba5f			bne 	_CCVCopyName
.da6b	ba6b	98		tya				tya 								; patch offset
.da6c	ba6c	92 36		sta ($36)			sta 	(zTemp0)
.da6e	ba6e	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.da70	ba70	91 36		sta ($36),y			sta 	(zTemp0),y
.da72	ba72	88		dey				dey
.da73	ba73	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.da75	ba75	09 80		ora #$80			ora 	#$80
.da77	ba77	91 36		sta ($36),y			sta 	(zTemp0),y
.da79	ba79					_CCVFound:
.da79	ba79	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.da7b	ba7b	38		sec				sec
.da7c	ba7c	e9 10		sbc #$10			sbc 	#(VariableSpace >> 8) 		; offset from the start of the variable token
.da7e	ba7e	09 40		ora #$40			ora 	#$40 						; make it a writeable token $4000-$7FFF
.da80	ba80	20 01 ba	jsr $ba01			jsr 	TOKWriteByte
.da83	ba83	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.da85	ba85	20 01 ba	jsr $ba01			jsr 	TOKWriteByte
.da88	ba88	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_sound.module

=1						soundIntegrated=1
.da89	ba89					SNDCheckChannel:
.da89	ba89	aa		tax				tax
.da8a	ba8a	bd 3d 08	lda $083d,x			lda 	SNDTimeLeft,x 				; currently playing a note
.da8d	ba8d	d0 38		bne $bac7			bne 	_SNDCCExit
.da8f	ba8f	da		phx				phx 								; save current channel
.da90	ba90	8a		txa				txa 								; put in A
.da91	ba91	20 0d bb	jsr $bb0d			jsr 	SNDFindNextNoteForA 		; is there a note for A in the queue ?
.da94	ba94	68		pla				pla 								; channel # in A
.da95	ba95	90 30		bcc $bac7			bcc 	_SNDCCExit  				; nothing in the queue for this channel, exit.
.da97	ba97	a8		tay				tay 								; Y is the channel #
.da98	ba98	bd 32 07	lda $0732,x			lda 	SNDQueue+1,x 				; copy data into the slot.
.da9b	ba9b	99 31 08	sta $0831,y			sta 	SNDPitchLow,y
.da9e	ba9e	bd 33 07	lda $0733,x			lda 	SNDQueue+2,x
.daa1	baa1	99 35 08	sta $0835,y			sta 	SNDPitchHigh,y
.daa4	baa4	bd 34 07	lda $0734,x			lda 	SNDQueue+3,x
.daa7	baa7	99 39 08	sta $0839,y			sta 	SNDVolume,y
.daaa	baaa	bd 35 07	lda $0735,x			lda 	SNDQueue+4,x
.daad	baad	99 3d 08	sta $083d,y			sta 	SNDTimeLeft,y
.dab0	bab0	bd 36 07	lda $0736,x			lda 	SNDQueue+5,x
.dab3	bab3	99 41 08	sta $0841,y			sta 	SNDAdjustLow,y
.dab6	bab6	bd 37 07	lda $0737,x			lda 	SNDQueue+6,x
.dab9	bab9	99 45 08	sta $0845,y			sta 	SNDAdjustHigh,y
.dabc	babc	5a		phy				phy 								; save channel #
.dabd	babd	20 27 bb	jsr $bb27			jsr 	SNDDeleteXFromQueue 		; delete record at X from queue
.dac0	bac0	ce 30 07	dec $0730			dec 	SNDLength 					; reduce the queue length.
.dac3	bac3	68		pla				pla
.dac4	bac4	20 c8 ba	jsr $bac8			jsr 	SNDUpdateNote 				; update channel A
.dac7	bac7					_SNDCCExit:
.dac7	bac7	60		rts				rts
.dac8	bac8					SNDUpdateNote:
.dac8	bac8	aa		tax				tax 								; so we can access records
.dac9	bac9	0a		asl a				asl 	a 							; convert it to a channel bit pair in 5,6
.daca	baca	0a		asl a				asl 	a
.dacb	bacb	0a		asl a				asl 	a
.dacc	bacc	0a		asl a				asl 	a
.dacd	bacd	0a		asl a				asl 	a
.dace	bace	8d 2f 07	sta $072f			sta 	SNDChannelBits
.dad1	bad1	bd 3d 08	lda $083d,x			lda 	SNDTimeLeft,x 				; are we silent
.dad4	bad4	f0 2e		beq $bb04			beq 	_SNDUNIsSilent
.dad6	bad6	ad 2f 07	lda $072f			lda 	SNDChannelBits 				; push channel bits on stack
.dad9	bad9	48		pha				pha
.dada	bada	bd 31 08	lda $0831,x			lda 	SNDPitchLow,x 				; get 4 lowest bits of pitch.
.dadd	badd	29 0f		and #$0f			and 	#$0F
.dadf	badf	0d 2f 07	ora $072f			ora 	SNDChannelBits 				; set channel bits
.dae2	bae2	09 80		ora #$80			ora 	#$80 						; write to pitch register
.dae4	bae4	20 71 bb	jsr $bb71			jsr 	SNDWritePorts
.dae7	bae7	bd 35 08	lda $0835,x			lda 	SNDPitchHigh,x 				; pitch high => channel temp.
.daea	baea	8d 2f 07	sta $072f			sta 	SNDChannelBits
.daed	baed	bd 31 08	lda $0831,x			lda 	SNDPitchLow,x
.daf0	baf0	4e 2f 07	lsr $072f			lsr 	SNDChannelBits 				; shift 2 LSBs into MSB of A
.daf3	baf3	6a		ror a				ror 	a
.daf4	baf4	4e 2f 07	lsr $072f			lsr 	SNDChannelBits
.daf7	baf7	6a		ror a				ror 	a
.daf8	baf8	4a		lsr a				lsr 	a 							; put in bits 0-5
.daf9	baf9	4a		lsr a				lsr 	a
.dafa	bafa	20 71 bb	jsr $bb71			jsr 	SNDWritePorts 				; write as rest of pitch register
.dafd	bafd	68		pla				pla
.dafe	bafe	09 90		ora #$90			ora 	#$90 						; set to write minimum attentuation.
.db00	bb00	20 71 bb	jsr $bb71			jsr 	SNDWritePorts
.db03	bb03	60		rts				rts
.db04	bb04					_SNDUNIsSilent:
.db04	bb04	ad 2f 07	lda $072f			lda 	SNDChannelBits 				; channel bits
.db07	bb07	09 9f		ora #$9f			ora 	#$9F 						; maximum attenuation
.db09	bb09	20 71 bb	jsr $bb71			jsr 	SNDWritePorts 				; write to the ports
.db0c	bb0c	60		rts				rts
.db0d	bb0d					SNDFindNextNoteForA:
.db0d	bb0d	ac 30 07	ldy $0730			ldy 	SNDLength 					; queue size into Y
.db10	bb10	f0 13		beq $bb25			beq 	_SNDFNNFail 				; queue empty.
.db12	bb12	a2 00		ldx #$00			ldx 	#0
.db14	bb14					_SNDFNNSearch:
.db14	bb14	dd 31 07	cmp $0731,x			cmp 	SNDQueue,x 					; does it match the channel
.db17	bb17	38		sec				sec
.db18	bb18	f0 0c		beq $bb26			beq 	_SNDFNNExit 				; if so exit with CS.
.db1a	bb1a	e8		inx				inx 								; next queue slot.
.db1b	bb1b	e8		inx				inx
.db1c	bb1c	e8		inx				inx
.db1d	bb1d	e8		inx				inx
.db1e	bb1e	e8		inx				inx
.db1f	bb1f	e8		inx				inx
.db20	bb20	e8		inx				inx
.db21	bb21	e8		inx				inx
.db22	bb22	88		dey				dey 								; done the whole queue
.db23	bb23	d0 ef		bne $bb14			bne 	_SNDFNNSearch 				; no, go back.
.db25	bb25					_SNDFNNFail:
.db25	bb25	18		clc				clc
.db26	bb26					_SNDFNNExit:
.db26	bb26	60		rts				rts
.db27	bb27					SNDDeleteXFromQueue:
.db27	bb27	e0 f8		cpx #$f8			cpx 	#SNDQueueSize*8-8 			; reached the end.
.db29	bb29	f0 09		beq $bb34			beq 	_SNDDXExit
.db2b	bb2b	bd 39 07	lda $0739,x			lda 	SNDQueue+8,x
.db2e	bb2e	9d 31 07	sta $0731,x			sta 	SNDQueue,x
.db31	bb31	e8		inx				inx
.db32	bb32	80 f3		bra $bb27			bra 	SNDDeleteXFromQueue
.db34	bb34					_SNDDXExit:
.db34	bb34	60		rts				rts
.072f						SNDChannelBits:
>072f								.fill 	1
.db35	bb35					SNDQueueRequest:
.db35	bb35	86 36		stx $36				stx 	zTemp0						; save queue address
.db37	bb37	84 37		sty $37				sty 	zTemp0+1
.db39	bb39	ae 30 07	ldx $0730			ldx 	SNDLength 					; queue is full, can't take any more.
.db3c	bb3c	e0 20		cpx #$20			cpx 	#SNDQueueSize
.db3e	bb3e	f0 21		beq $bb61			beq 	_SNDQRExit
.db40	bb40	29 03		and #$03			and 	#3	 						; channel # and push on stack
.db42	bb42	48		pha				pha
.db43	bb43	8a		txa				txa  								; get offset in queue buffer/
.db44	bb44	0a		asl a				asl 	a
.db45	bb45	0a		asl a				asl 	a
.db46	bb46	0a		asl a				asl 	a
.db47	bb47	aa		tax				tax
.db48	bb48	68		pla				pla 								; get back and push again
.db49	bb49	48		pha				pha
.db4a	bb4a	9d 31 07	sta $0731,x			sta 	SNDQueue+0,x 				; save the channel #
.db4d	bb4d	a0 00		ldy #$00			ldy 	#0 							; copy the rest in.
.db4f	bb4f					_SNDQCopy:
.db4f	bb4f	b1 36		lda ($36),y			lda 	(zTemp0),y
.db51	bb51	e8		inx				inx
.db52	bb52	c8		iny				iny
.db53	bb53	9d 31 07	sta $0731,x			sta 	SNDQueue,x
.db56	bb56	c0 06		cpy #$06			cpy 	#6
.db58	bb58	d0 f5		bne $bb4f			bne 	_SNDQCopy
.db5a	bb5a	ee 30 07	inc $0730			inc 	SNDLength 					; bump queue length.
.db5d	bb5d	68		pla				pla 								; get channel # back
.db5e	bb5e	20 89 ba	jsr $ba89			jsr 	SNDCheckChannel 			; check if channel needs refreshing.
.db61	bb61					_SNDQRExit:
.db61	bb61	60		rts				rts
.db62	bb62					SNDSilenceChannel:
.db62	bb62	aa		tax				tax 								; zero time left.
.db63	bb63	9e 3d 08	stz $083d,x			stz 	SNDTimeLeft,x
.db66	bb66	0a		asl a				asl 	a 							; shift into position
.db67	bb67	0a		asl a				asl 	a
.db68	bb68	0a		asl a				asl 	a
.db69	bb69	0a		asl a				asl 	a
.db6a	bb6a	0a		asl a				asl 	a
.db6b	bb6b	09 9f		ora #$9f			ora 	#$9F 						; write register attenuation $F
.db6d	bb6d	20 71 bb	jsr $bb71			jsr 	SNDWritePorts
.db70	bb70	60		rts				rts
.db71	bb71					SNDWritePorts:
.db71	bb71	da		phx				phx 								; save X
.db72	bb72	a6 01		ldx $01				ldx 	1 							; save I/O status
.db74	bb74	64 01		stz $01				stz 	1 							; access I/O page 0
.db76	bb76	8d 00 d6	sta $d600			sta 	$D600 						; write to both
.db79	bb79	8d 10 d6	sta $d610			sta 	$D610
.db7c	bb7c	86 01		stx $01				stx 	1 							; restore I/O
.db7e	bb7e	fa		plx				plx 								; restore X
.db7f	bb7f	60		rts				rts
.db80	bb80					Export_SNDCommand:
.db80	bb80	da		phx				phx 								; save XY
.db81	bb81	5a		phy				phy
.db82	bb82	c9 0f		cmp #$0f			cmp 	#$0F 						; $0F is initialise
.db84	bb84	f0 1d		beq $bba3			beq 	_SNDInitialise
.db86	bb86	90 28		bcc $bbb0			bcc 	_SNDExit
.db88	bb88	c9 3f		cmp #$3f			cmp 	#$3F 						; $3F is silence all
.db8a	bb8a	f0 17		beq $bba3			beq 	_SNDSilence
.db8c	bb8c	b0 22		bcs $bbb0			bcs 	_SNDExit
.db8e	bb8e	c9 20		cmp #$20			cmp 	#$20 						; $2x is check playing => A
.db90	bb90	b0 09		bcs $bb9b			bcs 	_SNDQueryPlay
.db92	bb92	c9 14		cmp #$14			cmp 	#$14 						; $10-$13 is queue sound
.db94	bb94	b0 1a		bcs $bbb0			bcs 	_SNDExit
.db96	bb96	20 35 bb	jsr $bb35			jsr 	SNDQueueRequest
.db99	bb99	80 15		bra $bbb0			bra 	_SNDExit
.db9b	bb9b					_SNDQueryPlay:
.db9b	bb9b	29 03		and #$03			and 	#3 							; get channel #
.db9d	bb9d	aa		tax				tax
.db9e	bb9e	bd 3d 08	lda $083d,x			lda 	SNDTimeLeft,x 				; read time left, if zero then silent
.dba1	bba1	80 0d		bra $bbb0			bra 	_SNDExit
.dba3	bba3					_SNDInitialise:
.dba3	bba3					_SNDSilence:
.dba3	bba3	9c 30 07	stz $0730			stz 	SNDLength 					; empty the queue.
.dba6	bba6	a9 03		lda #$03			lda 	#$3 						; silence channel 0-3.
.dba8	bba8					_SNDSilenceLoop:
.dba8	bba8	48		pha				pha
.dba9	bba9	20 62 bb	jsr $bb62			jsr 	SNDSilenceChannel
.dbac	bbac	68		pla				pla
.dbad	bbad	3a		dec a				dec 	a
.dbae	bbae	10 f8		bpl $bba8			bpl 	_SNDSilenceLoop
.dbb0	bbb0					_SNDExit:
.dbb0	bbb0	7a		ply				ply
.dbb1	bbb1	fa		plx				plx
.dbb2	bbb2	60		rts				rts
=32						SNDQueueSize = 32 							; number of queue entries
.0730						SNDLength:
>0730								.fill 	1
.0731						SNDQueue:
>0731								.fill 	SNDQueueSize * 8
.0831						SNDPitchLow:
>0831								.fill 	4
.0835						SNDPitchHigh:
>0835								.fill 	4
.0839						SNDVolume:
>0839								.fill 	4
.083d						SNDTimeLeft:
>083d								.fill 	4
.0841						SNDAdjustLow:
>0841								.fill 	4
.0845						SNDAdjustHigh:
>0845								.fill 	4
.dbb3	bbb3					Export_SNDUpdate:
.dbb3	bbb3					PagedSNDUpdate:
.dbb3	bbb3	ad 3d 08	lda $083d			lda 	SNDTimeLeft+0 				; look at time remaining
.dbb6	bbb6	f0 05		beq $bbbd			beq 	_SNDUNot0 					; not playing
.dbb8	bbb8	a2 00		ldx #$00			ldx 	#0 							; so we know which channel to update
.dbba	bbba	20 dc bb	jsr $bbdc			jsr 	SNDUpdateChannel 			; update it.
.dbbd	bbbd					_SNDUNot0:
.dbbd	bbbd	ad 3e 08	lda $083e			lda 	SNDTimeLeft+1
.dbc0	bbc0	f0 05		beq $bbc7			beq 	_SNDUNot1
.dbc2	bbc2	a2 01		ldx #$01			ldx 	#1
.dbc4	bbc4	20 dc bb	jsr $bbdc			jsr 	SNDUpdateChannel
.dbc7	bbc7					_SNDUNot1:
.dbc7	bbc7	ad 3f 08	lda $083f			lda 	SNDTimeLeft+2
.dbca	bbca	f0 05		beq $bbd1			beq 	_SNDUNot2
.dbcc	bbcc	a2 02		ldx #$02			ldx 	#2
.dbce	bbce	20 dc bb	jsr $bbdc			jsr 	SNDUpdateChannel
.dbd1	bbd1					_SNDUNot2:
.dbd1	bbd1	ad 40 08	lda $0840			lda 	SNDTimeLeft+3
.dbd4	bbd4	f0 05		beq $bbdb			beq 	_SNDUNot3
.dbd6	bbd6	a2 03		ldx #$03			ldx 	#3
.dbd8	bbd8	20 dc bb	jsr $bbdc			jsr 	SNDUpdateChannel
.dbdb	bbdb					_SNDUNot3:
.dbdb	bbdb	60		rts				rts
.dbdc	bbdc					SNDUpdateChannel:
.dbdc	bbdc	c9 ff		cmp #$ff			cmp 	#$FF 						; sound $FF play forever until turned off manually
.dbde	bbde	f0 2c		beq $bc0c			beq 	_SNDUCExit
.dbe0	bbe0	3a		dec a				dec 	a 							; decrement and update timer
.dbe1	bbe1	9d 3d 08	sta $083d,x			sta 	SNDTimeLeft,x
.dbe4	bbe4	f0 1d		beq $bc03			beq 	_SNDUCUpdate 				; if zero, silence channel
.dbe6	bbe6	bd 41 08	lda $0841,x			lda 	SNDAdjustLow,x 				; adjust ?
.dbe9	bbe9	1d 45 08	ora $0845,x			ora 	SNDAdjustHigh,x
.dbec	bbec	f0 1e		beq $bc0c			beq 	_SNDUCExit 					; if zero carry on at current tone.
.dbee	bbee	18		clc				clc 								; add adjust, forcing into a 10 bit range
.dbef	bbef	bd 31 08	lda $0831,x			lda 	SNDPitchLow,x
.dbf2	bbf2	7d 41 08	adc $0841,x			adc 	SNDAdjustLow,x
.dbf5	bbf5	9d 31 08	sta $0831,x			sta 	SNDPitchLow,x
.dbf8	bbf8	bd 35 08	lda $0835,x			lda 	SNDPitchHigh,x
.dbfb	bbfb	7d 45 08	adc $0845,x			adc 	SNDAdjustHigh,x
.dbfe	bbfe	29 03		and #$03			and 	#3
.dc00	bc00	9d 35 08	sta $0835,x			sta 	SNDPitchHigh,x
.dc03	bc03					_SNDUCUpdate:
.dc03	bc03	8a		txa				txa 								; which channel.
.dc04	bc04	48		pha				pha
.dc05	bc05	20 c8 ba	jsr $bac8			jsr 	SNDUpdateNote 				; update the current note
.dc08	bc08	68		pla				pla
.dc09	bc09	20 89 ba	jsr $ba89			jsr 	SNDCheckChannel 			; more to do ?
.dc0c	bc0c					_SNDUCExit:
.dc0c	bc0c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_kernel.module

=1						kernelIntegrated=1
.dc0d	bc0d					Export_KNLInputSingleCharacter:
.dc0d	bc0d					PagedInputSingleCharacter:
.dc0d	bc0d	da		phx				phx
.dc0e	bc0e	5a		phy				phy
.dc0f	bc0f					_EISCWait:
.dc0f	bc0f	a5 01		lda $01				lda 	1 							; save I/O 0
.dc11	bc11	48		pha				pha
.dc12	bc12	64 01		stz $01				stz 	1 							; access I/O Page 0
.dc14	bc14	38		sec				sec 								; calculate timer - LastTick
.dc15	bc15	ad 59 d6	lda $d659			lda 	$D659
.dc18	bc18	cd 61 06	cmp $0661			cmp 	LastTick
.dc1b	bc1b	f0 06		beq $bc23			beq 	_NoFireTick 				; if < 3 clocks don't fire.
.dc1d	bc1d	8d 61 06	sta $0661			sta 	LastTick 					; update last timer
.dc20	bc20	20 b3 bb	jsr $bbb3			jsr 	PagedSNDUpdate 							; go do the code.
.dc23	bc23					_NoFireTick:
.dc23	bc23	68		pla				pla 								; restore I/O 0
.dc24	bc24	85 01		sta $01				sta 	1
.dc26	bc26	20 30 bc	jsr $bc30			jsr 	CheckKeyPressed
.dc29	bc29	c9 00		cmp #$00			cmp 	#0 							; loop back if none pressed.
.dc2b	bc2b	f0 e2		beq $bc0f			beq 	_EISCWait
.dc2d	bc2d	7a		ply				ply
.dc2e	bc2e	fa		plx				plx
.dc2f	bc2f	60		rts				rts
.dc30	bc30					Export_KNLInkey:
.dc30	bc30					CheckKeyPressed:
.dc30	bc30	a9 49		lda #$49			lda     #<event 					; tell kernel where events go.
.dc32	bc32	85 f0		sta $f0				sta     kernel.args.events+0
.dc34	bc34	a9 08		lda #$08			lda     #>event
.dc36	bc36	85 f1		sta $f1				sta     kernel.args.events+1
.dc38	bc38	20 00 ff	jsr $ff00			jsr     kernel.NextEvent 			; get next event
.dc3b	bc3b	b0 0b		bcs $bc48			bcs 	_CKPNoEvent 				; no event
.dc3d	bc3d	ad 49 08	lda $0849			lda     event.type
.dc40	bc40	c9 08		cmp #$08			cmp     #kernel.event.key.PRESSED 	; must be a pressed event.
.dc42	bc42	d0 04		bne $bc48			bne 	_CKPNoEvent
.dc44	bc44	ad 4e 08	lda $084e			lda     event.key.ascii
.dc47	bc47	60		rts				rts
.dc48	bc48					_CKPNoEvent:
.dc48	bc48	a9 00		lda #$00			lda 	#0
.dc4a	bc4a	60		rts				rts
.dc4b	bc4b					Export_EXTReadController:
.dc4b	bc4b	da		phx				phx
.dc4c	bc4c	a6 01		ldx $01				ldx 	1 							; save current I/O in X
.dc4e	bc4e	64 01		stz $01				stz 	1 							; switch to I/O 0
.dc50	bc50	ad 00 dc	lda $dc00			lda 	$DC00  						; read VIA register
.dc53	bc53	86 01		stx $01				stx 	1 							; repair old I/O and exit
.dc55	bc55	fa		plx				plx
.dc56	bc56	60		rts				rts
.0849						event
>0849						type        .byte   ?   ; Enum above
>084a						buf         .byte   ?   ; page id or zero
>084b						ext         .byte   ?   ; page id or zero
.084c						key
>084c						keyboard    .byte   ?   ; Keyboard ID
>084d						raw         .byte   ?   ; Raw key ID
>084e						ascii       .byte   ?   ; ASCII value
>084f						flags       .byte   ?   ; Flags (META)
=$80						META        = $80       ; Meta key; no associated ASCII value.
.084c						mouse
.084c						delta
>084c						x           .byte   ?
>084d						y           .byte   ?
>084e						z           .byte   ?
>084f						buttons     .byte   ?
.084c						clicks
>084c						inner       .byte   ?
>084d						middle      .byte   ?
>084e						outer       .byte   ?
.084c						udp
>084c						token       .byte   ?   ; TODO: break out into fields
.084c						file
>084c						stream      .byte   ?
>084d						cookie      .byte   ?
.084e						data
>084e						requested   .byte   ?   ; Requested number of bytes to read
>084f						read        .byte   ?   ; Number of bytes actually read
.084e						wrote
>084e						requested   .byte   ?   ; Requested number of bytes to read
>084f						wrote       .byte   ?   ; Number of bytes actually read
.084c						directory
>084c						stream      .byte   ?
>084d						cookie      .byte   ?
.084e						volume
>084e						len         .byte   ?   ; Length of volname (in buf)
>084f						flags       .byte   ?   ; block size, text encoding
.084e						file
>084e						len         .byte   ?
>084f						flags       .byte   ?   ; block scale, text encoding, approx size
.084e						free
>084e						flags       .byte   ?   ; block scale, text encoding, approx size
=56						KERR_GENERAL = kernel.event.file.ERROR 		; Event $38
=50						KERR_CLOSED = kernel.event.file.CLOSED 		; Event $32
=40						KERR_NOTFOUND = kernel.event.file.NOT_FOUND ; Event $28
=48						KERR_EOF = kernel.event.file.EOF 			; Event $30
.dc57	bc57					Export_KNLOpenFileWrite:
.dc57	bc57	48		pha				pha
.dc58	bc58	a9 01		lda #$01			lda 	#kernel.args.file.open.WRITE
.dc5a	bc5a	80 03		bra $bc5f			bra 	KNLOpenStart
.dc5c	bc5c					Export_KNLOpenFileRead:
.dc5c	bc5c	48		pha				pha
.dc5d	bc5d	a9 00		lda #$00			lda     #kernel.args.file.open.READ ; set READ mode.
.dc5f	bc5f					KNLOpenStart:
.dc5f	bc5f	85 f5		sta $f5				sta     kernel.args.file.open.mode
.dc61	bc61	68		pla				pla
.dc62	bc62	20 9d bc	jsr $bc9d			jsr 	KNLSetupFileName
.dc65	bc65	a9 49		lda #$49			lda     #event & $FF 				; tell kernel where to store event data
.dc67	bc67	85 f0		sta $f0				sta     kernel.args.events+0
.dc69	bc69	a9 08		lda #$08			lda     #event >> 8
.dc6b	bc6b	85 f1		sta $f1				sta     kernel.args.events+1
.dc6d	bc6d	ad 5e 06	lda $065e			lda 	DefaultDrive 				; currently drive zero only.
.dc70	bc70	85 f3		sta $f3				sta 	kernel.args.file.open.drive
.dc72	bc72	20 5c ff	jsr $ff5c			jsr     kernel.File.Open 			; open the file and exit.
.dc75	bc75	a9 38		lda #$38			lda     #kernel.event.file.ERROR
.dc77	bc77	b0 1d		bcs $bc96			bcs     _out
.dc79	bc79					_loop
.dc79	bc79	20 0c ff	jsr $ff0c			jsr     kernel.Yield    			; event wait
.dc7c	bc7c	20 00 ff	jsr $ff00			jsr     kernel.NextEvent
.dc7f	bc7f	b0 f8		bcs $bc79			bcs     _loop
.dc81	bc81	ad 49 08	lda $0849			lda 	event.type
.dc84	bc84	c9 2a		cmp #$2a			cmp     #kernel.event.file.OPENED
.dc86	bc86	f0 0a		beq $bc92			beq 	_success
.dc88	bc88	c9 28		cmp #$28			cmp     #kernel.event.file.NOT_FOUND
.dc8a	bc8a	f0 0a		beq $bc96			beq 	_out
.dc8c	bc8c	c9 38		cmp #$38			cmp     #kernel.event.file.ERROR
.dc8e	bc8e	f0 06		beq $bc96			beq 	_out
.dc90	bc90	80 e7		bra $bc79			bra     _loop
.dc92	bc92					_success
.dc92	bc92	ad 4c 08	lda $084c			lda     event.file.stream
.dc95	bc95	18		clc				clc
.dc96	bc96					_out
.dc96	bc96	60		rts				rts
.dc97	bc97					Export_KNLCloseFile:
.dc97	bc97	85 f3		sta $f3				sta     kernel.args.file.close.stream
.dc99	bc99	20 68 ff	jsr $ff68			jsr     kernel.File.Close
.dc9c	bc9c	60		rts				rts
.dc9d	bc9d					KNLSetupFileName:
.dc9d	bc9d	5a		phy				phy 								; save Y on stack
.dc9e	bc9e	85 36		sta $36				sta 	zTemp0 						; save filename position in temp, and in kenrel slot
.dca0	bca0	86 37		stx $37				stx 	zTemp0+1
.dca2	bca2	85 fb		sta $fb				sta     kernel.args.file.open.fname+0
.dca4	bca4	86 fc		stx $fc				stx     kernel.args.file.open.fname+1
.dca6	bca6	a0 ff		ldy #$ff			ldy 	#$FF 						; get the filename length => Kernel slot
.dca8	bca8					_KNLGetLength:
.dca8	bca8	c8		iny				iny
.dca9	bca9	b1 36		lda ($36),y			lda 	(zTemp0),y
.dcab	bcab	d0 fb		bne $bca8			bne 	_KNLGetLength
.dcad	bcad	84 fd		sty $fd				sty 	kernel.args.file.open.fname_len
.dcaf	bcaf	7a		ply				ply
.dcb0	bcb0	60		rts				rts
=64						KNLReadBufferLen = 64 								; read buffer size.
.0850						KNLStream:
>0850								.byte   ?
.0851						KNLReadBuffer:
>0851								.fill   KNLReadBufferLen
.0891						KNLNext:
>0891								.byte   ?
.0892						KNLEnd:
>0892								.byte   ?
.dcb1	bcb1					Export_KNLReadByteInit:
.dcb1	bcb1	8d 50 08	sta $0850			sta     KNLStream 					; save stream
.dcb4	bcb4	9c 91 08	stz $0891			stz     KNLNext 					; reset buffer
.dcb7	bcb7	9c 92 08	stz $0892			stz     KNLEnd
.dcba	bcba	60		rts				rts
.dcbb	bcbb					Export_KNLReadByte:
.dcbb	bcbb	da		phx				phx
.dcbc	bcbc	ae 91 08	ldx $0891			ldx     KNLNext 					; all data consumed ?
.dcbf	bcbf	ec 92 08	cpx $0892			cpx     KNLEnd
.dcc2	bcc2	d0 0d		bne $bcd1			bne     _KNLRBGetNextByte
.dcc4	bcc4	20 da bc	jsr $bcda			jsr     KNLRBGetNextBlock 			; read next chunk from the stream
.dcc7	bcc7	b0 0f		bcs $bcd8			bcs     _KNLRBError 				; error has occurred on read.
.dcc9	bcc9	8d 92 08	sta $0892			sta     KNLEnd 						; # read is the number available
.dccc	bccc	a2 00		ldx #$00			ldx     #0 							; reset the read pointer.
.dcce	bcce	8e 91 08	stx $0891			stx     KNLNext
.dcd1	bcd1					_KNLRBGetNextByte:
.dcd1	bcd1	bd 51 08	lda $0851,x			lda     KNLReadBuffer,x 			; get the next data item
.dcd4	bcd4	ee 91 08	inc $0891			inc     KNLNext 					; and advance the index
.dcd7	bcd7	18		clc				clc 								; succeeded
.dcd8	bcd8					_KNLRBError:
.dcd8	bcd8	fa		plx				plx
.dcd9	bcd9	60		rts				rts
.dcda	bcda					Export_KNLReadBlock:
.dcda	bcda					KNLRBGetNextBlock:
.dcda	bcda	ad 50 08	lda $0850			lda     KNLStream 					; set stream to read from
.dcdd	bcdd	85 f3		sta $f3				sta     kernel.args.file.read.stream
.dcdf	bcdf	a9 40		lda #$40			lda     #KNLReadBufferLen 					; set bytes to read.
.dce1	bce1	85 f4		sta $f4				sta     kernel.args.file.read.buflen
.dce3	bce3	20 60 ff	jsr $ff60			jsr     kernel.File.Read 			; read request
.dce6	bce6	a9 38		lda #$38			lda     #kernel.event.file.ERROR    ; Kernel out of events/buffers; shouldn't happen
.dce8	bce8	b0 2e		bcs $bd18			bcs     _KGNBExitFail               ; report as general error
.dcea	bcea					_KGRBEventLoop:
.dcea	bcea	20 0c ff	jsr $ff0c			jsr     kernel.Yield    			; event wait
.dced	bced	20 00 ff	jsr $ff00			jsr     kernel.NextEvent
.dcf0	bcf0	b0 f8		bcs $bcea			bcs     _KGRBEventLoop
.dcf2	bcf2	ad 49 08	lda $0849			lda 	event.type 					; get event
.dcf5	bcf5	c9 2c		cmp #$2c			cmp     #kernel.event.file.DATA 	; data, return data
.dcf7	bcf7	f0 0a		beq $bd03			beq     _KNLRBGetNextByte
.dcf9	bcf9	c9 38		cmp #$38			cmp     #kernel.event.file.ERROR  	; errors on file i/o, return as appropriate.
.dcfb	bcfb	f0 1b		beq $bd18			beq 	_KGNBExitFail
.dcfd	bcfd	c9 30		cmp #$30			cmp     #kernel.event.file.EOF
.dcff	bcff	f0 17		beq $bd18			beq 	_KGNBExitFail
.dd01	bd01	80 e7		bra $bcea			bra 	_KGRBEventLoop
.dd03	bd03					_KNLRBGetNextByte:
.dd03	bd03	a9 51		lda #$51			lda     #<KNLReadBuffer 					; Set the target buffer
.dd05	bd05	85 fb		sta $fb				sta     kernel.args.recv.buf+0
.dd07	bd07	a9 08		lda #$08			lda     #>KNLReadBuffer
.dd09	bd09	85 fc		sta $fc				sta     kernel.args.recv.buf+1
.dd0b	bd0b	ad 4f 08	lda $084f			lda     event.file.data.read 		; Set the target length
.dd0e	bd0e	85 fd		sta $fd				sta     kernel.args.recv.buflen
.dd10	bd10	20 04 ff	jsr $ff04			jsr     kernel.ReadData		       	; Get the data from the kernel  (Synchronous call, no error)
.dd13	bd13	ad 4f 08	lda $084f			lda     event.file.data.read 		; Return # of bytes read (in A)
.dd16	bd16	18		clc				clc
.dd17	bd17	60		rts				rts
.dd18	bd18					_KGNBExitFail:
.dd18	bd18	38		sec				sec
.dd19	bd19	60		rts				rts
.dd1a	bd1a					Export_KNLWriteBlock:
.dd1a	bd1a	da		phx				phx
.dd1b	bd1b	5a		phy				phy
.dd1c	bd1c	85 f3		sta $f3				sta     kernel.args.file.write.stream ; save the stream.
.dd1e	bd1e	a5 36		lda $36				lda     zTemp0 						; save the data location.
.dd20	bd20	85 fb		sta $fb				sta     kernel.args.file.write.buf+0
.dd22	bd22	a5 37		lda $37				lda     zTemp0+1
.dd24	bd24	85 fc		sta $fc				sta     kernel.args.file.write.buf+1
.dd26	bd26	86 fd		stx $fd				stx     kernel.args.file.write.buflen ; Set the buffer length
.dd28	bd28	20 64 ff	jsr $ff64			jsr     kernel.File.Write 			; write it out.
.dd2b	bd2b	a9 38		lda #$38			lda 	#kernel.event.file.ERROR 	; in case it fails.
.dd2d	bd2d	b0 21		bcs $bd50			bcs 	_KWBFailed
.dd2f	bd2f					_KNLWLoop:
.dd2f	bd2f	20 0c ff	jsr $ff0c			jsr     kernel.Yield
.dd32	bd32	20 00 ff	jsr $ff00			jsr     kernel.NextEvent
.dd35	bd35	b0 f8		bcs $bd2f			bcs     _KNLWLoop
.dd37	bd37	ad 49 08	lda $0849			lda     event.type 					; various errors.
.dd3a	bd3a	c9 32		cmp #$32			cmp     #kernel.event.file.CLOSED
.dd3c	bd3c	f0 12		beq $bd50			beq 	_KWBFailed
.dd3e	bd3e	c9 38		cmp #$38			cmp     #kernel.event.file.ERROR
.dd40	bd40	f0 0e		beq $bd50			beq 	_KWBFailed
.dd42	bd42	c9 30		cmp #$30			cmp     #kernel.event.file.EOF
.dd44	bd44	f0 0a		beq $bd50			beq 	_KWBFailed
.dd46	bd46	c9 2e		cmp #$2e			cmp     #kernel.event.file.WROTE 	; wait until block write succeeds
.dd48	bd48	d0 e5		bne $bd2f			bne 	_KNLWLoop
.dd4a	bd4a	18		clc				clc
.dd4b	bd4b	ad 4f 08	lda $084f			lda    event.file.wrote.wrote 		; get bytes written.
.dd4e	bd4e	80 01		bra $bd51			bra 	_KWBExit
.dd50	bd50					_KWBFailed:
.dd50	bd50	38		sec				sec
.dd51	bd51					_KWBExit:
.dd51	bd51	7a		ply				ply
.dd52	bd52	fa		plx				plx
.dd53	bd53	60		rts				rts

;******  Return to file: _basic.asm


;******  End of listing
