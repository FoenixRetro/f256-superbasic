
; 64tass Turbo Assembler Macro V1.56.2625 listing file
; 64tass -q -b -Wall -Wno-portable -c -L output/basic.lst -l output/basic.lbl -Wall -o basic.rom _basic.asm
; Thu Sep 29 10:46:19 2022

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: _basic.asm


;******  Processing file: ./aa_system/01common.inc

=$30					ZeroPageMandatory = $30
=$600					ZeroPagePreference = $600
=$700					MemoryStorage = $700
=$2000					BasicStart = $2000
=$8000					CodeStart = $8000
=$1000					VariableSpace = $1000
=$2000					EndVariableSpace = $2000
=8					MathStackSize = 8
=512					BasicStackSize = 512
=80					MaxLineSize = 80

;******  Return to file: _basic.asm


;******  Processing file: ./aa_system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./aa_system/04data.inc

.0030					codePtr:
>0030							.fill 	4
.0034					basicStack:
>0034							.fill 	2
.0036					zTemp0:
>0036							.fill 	2
.0038					zTemp1:
>0038							.fill 	2
.003a					zTemp2:
>003a							.fill 	2
=$80					NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20					NSBIsReference = $20 						; bit 5 : is a reference
=$10					NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18					NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03					NSBRefMask = $03 							; bits 0,1 : Bytes of reference, -1 (e.g. 00 = 1 byte, 11 = 4 bytes)
=$00					NSTInteger = $00 							; base types for bits 3..4
=$08					NSTFloat = $08
=$10					NSTString = $10
=$18					NSTProcedure = $18
.0600					NSStatus:
>0600							.fill 	MathStackSize
.0608					NSMantissa0:
>0608							.fill 	MathStackSize 				; (this is my integer mantissa system)
.0610					NSMantissa1:
>0610							.fill 	MathStackSize
.0618					NSMantissa2:
>0618							.fill 	MathStackSize
.0620					NSMantissa3:
>0620							.fill 	MathStackSize
.0628					NSExponent:
>0628							.fill 	MathStackSize
.0700					identStart:
>0700							.fill 	1
.0701					identTypeStart:
>0701							.fill 	1
.0702					identTypeEnd:
>0702							.fill 	1
.0703					identHash:
>0703							.fill 	1
.0704					identTypeByte:
>0704							.fill 	1	 						; (see tokenising.pdf)
.0705					encodeState:
>0705							.fill 	1
.0706					decimalCount:
>0706							.fill 	1
.0707					randomSeed:
>0707							.fill 	4
.070b					tokenOffset:
>070b							.fill 	1
.070c					tokenLineNumber:
>070c							.fill 	2
.070e					tokenBuffer:
>070e							.fill 	253
.080b					lineBuffer:
>080b							.fill 	MaxLineSize+1
.085c					numberBuffer:
>085c							.fill 	34

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/binary/handlers.inc


;******  Return to file: _basic.asm


;******  Processing file: ./generated/errors.inc

=1					ERRID_BREAK = 1
=2					ERRID_SYNTAX = 2
=3					ERRID_DIVZERO = 3
=4					ERRID_RANGE = 4
=5					ERRID_TYPE = 5
=6					ERRID_MEMORY = 6
=7					ERRID_ARGUMENT = 7
=8					ERRID_STOP = 8
=9					ERRID_STRING = 9
=10					ERRID_ASSERT = 10
=11					ERRID_DATA = 11
=12					ERRID_NOTDONE = 12

;******  Return to file: _basic.asm


;******  Processing file: ./generated/kwdconst.inc

=$00					KWD_LESSLESS                         = $00; $00 <<
=$01					KWD_LESSEQUAL                        = $01; $01 <=
=$02					KWD_LESSGREATER                      = $02; $02 <>
=$03					KWD_PLINGPLING3                      = $03; $03 !!3
=$04					KWD_GREATERLESS                      = $04; $04 ><
=$05					KWD_GREATEREQUAL                     = $05; $05 >=
=$06					KWD_GREATERGREATER                   = $06; $06 >>
=$07					KWD_PLINGPLING7                      = $07; $07 !!7
=$08					KWD_PLINGPLING8                      = $08; $08 !!8
=$09					KWD_PLINGPLING9                      = $09; $09 !!9
=$0a					KWD_PLINGPLING10                     = $0a; $0a !!10
=$0b					KWD_PLINGPLING11                     = $0b; $0b !!11
=$0c					KWD_PLINGPLING12                     = $0c; $0c !!12
=$0d					KWD_PLINGPLING13                     = $0d; $0d !!13
=$0e					KWD_PLINGPLING14                     = $0e; $0e !!14
=$0f					KWD_PLINGPLING15                     = $0f; $0f !!15
=$10					KWD_AT                               = $10; $10 @
=$11					KWD_PLINGPLING17                     = $11; $11 !!17
=$12					KWD_PLINGPLING18                     = $12; $12 !!18
=$13					KWD_LSQPAREN                         = $13; $13 [
=$14					KWD_BACKSLASH                        = $14; $14 \
=$15					KWD_RSQPAREN                         = $15; $15 ]
=$16					KWD_HAT                              = $16; $16 ^
=$17					KWD_UNDERSCORE                       = $17; $17 _
=$18					KWD_BQUOTE                           = $18; $18 `
=$19					KWD_PLINGPLING25                     = $19; $19 !!25
=$1a					KWD_PLINGPLING26                     = $1a; $1a !!26
=$1b					KWD_LCURLY                           = $1b; $1b {
=$1c					KWD_BAR                              = $1c; $1c |
=$1d					KWD_RCURLY                           = $1d; $1d }
=$1e					KWD_TILDE                            = $1e; $1e ~
=$21					KWD_PLING                            = $21; $21 !
=$22					KWD_DQUOTE                           = $22; $22 "
=$23					KWD_HASH                             = $23; $23 #
=$24					KWD_DOLLAR                           = $24; $24 $
=$25					KWD_PERCENT                          = $25; $25 %
=$26					KWD_AMPERSAND                        = $26; $26 &
=$27					KWD_QUOTE                            = $27; $27 '
=$28					KWD_LPAREN                           = $28; $28 (
=$29					KWD_RPAREN                           = $29; $29 )
=$2a					KWD_STAR                             = $2a; $2a *
=$2b					KWD_PLUS                             = $2b; $2b +
=$2c					KWD_COMMA                            = $2c; $2c ,
=$2d					KWD_MINUS                            = $2d; $2d -
=$2e					KWD_PERIOD                           = $2e; $2e .
=$2f					KWD_SLASH                            = $2f; $2f /
=$30					KWD_0                                = $30; $30 0
=$31					KWD_1                                = $31; $31 1
=$32					KWD_2                                = $32; $32 2
=$33					KWD_3                                = $33; $33 3
=$34					KWD_4                                = $34; $34 4
=$35					KWD_5                                = $35; $35 5
=$36					KWD_6                                = $36; $36 6
=$37					KWD_7                                = $37; $37 7
=$38					KWD_8                                = $38; $38 8
=$39					KWD_9                                = $39; $39 9
=$3a					KWD_COLON                            = $3a; $3a :
=$3b					KWD_SEMICOLON                        = $3b; $3b ;
=$3c					KWD_LESS                             = $3c; $3c <
=$3d					KWD_EQUAL                            = $3d; $3d =
=$3e					KWD_GREATER                          = $3e; $3e >
=$3f					KWD_QMARK                            = $3f; $3f ?
=$83					KWD_ABSLPAREN                        = $83; $83 ABS(
=$84					KWD_ALLOCLPAREN                      = $84; $84 ALLOC(
=$85					KWD_ASCLPAREN                        = $85; $85 ASC(
=$86					KWD_CHRDOLLARLPAREN                  = $86; $86 CHR$(
=$87					KWD_DECLPAREN                        = $87; $87 DEC(
=$88					KWD_FALSE                            = $88; $88 FALSE
=$89					KWD_FRACLPAREN                       = $89; $89 FRAC(
=$8a					KWD_HEXDOLLARLPAREN                  = $8a; $8a HEX$(
=$8b					KWD_INTLPAREN                        = $8b; $8b INT(
=$8c					KWD_ISVALLPAREN                      = $8c; $8c ISVAL(
=$8d					KWD_LEFTDOLLARLPAREN                 = $8d; $8d LEFT$(
=$8e					KWD_LENLPAREN                        = $8e; $8e LEN(
=$8f					KWD_MIDDOLLARLPAREN                  = $8f; $8f MID$(
=$90					KWD_NOT                              = $90; $90 NOT
=$91					KWD_RIGHTDOLLARLPAREN                = $91; $91 RIGHT$(
=$92					KWD_RNDLPAREN                        = $92; $92 RND(
=$93					KWD_SGNLPAREN                        = $93; $93 SGN(
=$94					KWD_SPCLPAREN                        = $94; $94 SPC(
=$95					KWD_STRDOLLARLPAREN                  = $95; $95 STR$(
=$96					KWD_TRUE                             = $96; $96 TRUE
=$97					KWD_VALLPAREN                        = $97; $97 VAL(
=$98					KWD_FOR                              = $98; $98 FOR
=$99					KWD_IF                               = $99; $99 IF
=$9a					KWD_PROC                             = $9a; $9a PROC
=$9b					KWD_REPEAT                           = $9b; $9b REPEAT
=$9c					KWD_WHILE                            = $9c; $9c WHILE
=$9d					KWD_ENDIF                            = $9d; $9d ENDIF
=$9e					KWD_ENDPROC                          = $9e; $9e ENDPROC
=$9f					KWD_NEXT                             = $9f; $9f NEXT
=$a0					KWD_UNTIL                            = $a0; $a0 UNTIL
=$a1					KWD_WEND                             = $a1; $a1 WEND
=$a2					KWD_CALL                             = $a2; $a2 CALL
=$a3					KWD_CLS                              = $a3; $a3 CLS
=$a4					KWD_DATA                             = $a4; $a4 DATA
=$a5					KWD_DIM                              = $a5; $a5 DIM
=$a6					KWD_GOSUB                            = $a6; $a6 GOSUB
=$a7					KWD_GOTO                             = $a7; $a7 GOTO
=$a8					KWD_LET                              = $a8; $a8 LET
=$a9					KWD_PRINT                            = $a9; $a9 PRINT
=$aa					KWD_READ                             = $aa; $aa READ
=$ab					KWD_REM                              = $ab; $ab REM
=$ac					KWD_RETURN                           = $ac; $ac RETURN
=$ad					KWD_THEN                             = $ad; $ad THEN
=$ae					KWD_TO                               = $ae; $ae TO

;******  Return to file: _basic.asm


;******  Processing file: ./generated/kwdconst0.inc

=$80					KWC_EOL = $80
=$ff					KWC_STRING = $FF
=$fe					KWC_HEXCONST = $FE
=$98					KWC_FIRST_STRUCTURE = $98
=$9d					KWC_FIRST_STRUCTURE_DEC = $9d
=$a1					KWC_LAST_STRUCTURE = $a1
=$83					KWC_FIRST_UNARY = $83
=$97					KWC_LAST_UNARY = $97

;******  Return to file: _basic.asm


;******  Processing file: ./memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./aa_system/00start.asm

.8000	a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.8002	9a		txs				txs
.8003	20 50 81	jsr $8150			jsr 	NewCommand 					; erase current program
.8006	20 c5 88	jsr $88c5			jsr 	BackloadProgram
.8009	4c 67 81	jmp $8167			jmp 	CommandRun
.800c					WarmStart:
.800c	a9 57		lda #$57			lda 	#"W"
.800e	20 5a 92	jsr $925a			jsr 	EXTPrintCharacter
.8011	80 fe		bra $8011	halt:	bra 	halt
>8013							.align 2

;******  Processing file: ./aa_system/../generated/vectors.dat

.8014					VectorSetPunc:
>8014	4f 82					.word	ShiftLeft                        ; $00 <<
>8016	8c 8d					.word	BinaryCompareLessEqual           ; $01 <=
>8018	82 8d					.word	BinaryCompareNotEqual            ; $02 <>
>801a	9d 91					.word	SyntaxError                      ; $03 !!3
>801c	9d 91					.word	SyntaxError                      ; $04 ><
>801e	96 8d					.word	BinaryCompareGreaterEqual        ; $05 >=
>8020	52 82					.word	ShiftRight                       ; $06 >>
>8022	9d 91					.word	SyntaxError                      ; $07 !!7
>8024	9d 91					.word	SyntaxError                      ; $08 !!8
>8026	9d 91					.word	SyntaxError                      ; $09 !!9
>8028	9d 91					.word	SyntaxError                      ; $0a !!10
>802a	9d 91					.word	SyntaxError                      ; $0b !!11
>802c	9d 91					.word	SyntaxError                      ; $0c !!12
>802e	9d 91					.word	SyntaxError                      ; $0d !!13
>8030	9d 91					.word	SyntaxError                      ; $0e !!14
>8032	9d 91					.word	SyntaxError                      ; $0f !!15
>8034	9d 91					.word	SyntaxError                      ; $10 @
>8036	9d 91					.word	SyntaxError                      ; $11 !!17
>8038	9d 91					.word	SyntaxError                      ; $12 !!18
>803a	9d 91					.word	SyntaxError                      ; $13 [
>803c	fc 8d					.word	IntegerDivide                    ; $14 \
>803e	9d 91					.word	SyntaxError                      ; $15 ]
>8040	d5 83					.word	EorInteger                       ; $16 ^
>8042	9d 91					.word	SyntaxError                      ; $17 _
>8044	9d 91					.word	SyntaxError                      ; $18 `
>8046	9d 91					.word	SyntaxError                      ; $19 !!25
>8048	9d 91					.word	SyntaxError                      ; $1a !!26
>804a	9d 91					.word	SyntaxError                      ; $1b {
>804c	90 83					.word	OraInteger                       ; $1c |
>804e	9d 91					.word	SyntaxError                      ; $1d }
>8050	9d 91					.word	SyntaxError                      ; $1e ~
>8052	9d 91					.word	SyntaxError                      ; $1f [7m<7F>[m
>8054	9d 91					.word	SyntaxError                      ; $20
>8056	9d 91					.word	SyntaxError                      ; $21 !
>8058	9d 91					.word	SyntaxError                      ; $22 "
>805a	9d 91					.word	SyntaxError                      ; $23 #
>805c	9d 91					.word	SyntaxError                      ; $24 $
>805e	48 8e					.word	IntegerModulus                   ; $25 %
>8060	4b 83					.word	AndInteger                       ; $26 &
>8062	9d 91					.word	SyntaxError                      ; $27 '
>8064	9d 91					.word	SyntaxError                      ; $28 (
>8066	9d 91					.word	SyntaxError                      ; $29 )
>8068	bc 8e					.word	MulInteger                       ; $2a *
>806a	e5 82					.word	AddInteger                       ; $2b +
>806c	9d 91					.word	SyntaxError                      ; $2c ,
>806e	20 83					.word	SubInteger                       ; $2d -
>8070	9d 91					.word	SyntaxError                      ; $2e .
>8072	53 90					.word	FDivideCommand                   ; $2f /
>8074	9d 91					.word	SyntaxError                      ; $30 0
>8076	9d 91					.word	SyntaxError                      ; $31 1
>8078	9d 91					.word	SyntaxError                      ; $32 2
>807a	9d 91					.word	SyntaxError                      ; $33 3
>807c	9d 91					.word	SyntaxError                      ; $34 4
>807e	9d 91					.word	SyntaxError                      ; $35 5
>8080	9d 91					.word	SyntaxError                      ; $36 6
>8082	9d 91					.word	SyntaxError                      ; $37 7
>8084	9d 91					.word	SyntaxError                      ; $38 8
>8086	9d 91					.word	SyntaxError                      ; $39 9
>8088	9d 91					.word	SyntaxError                      ; $3a :
>808a	9d 91					.word	SyntaxError                      ; $3b ;
>808c	6e 8d					.word	BinaryCompareLess                ; $3c <
>808e	64 8d					.word	BinaryCompareEqual               ; $3d =
>8090	78 8d					.word	BinaryCompareGreater             ; $3e >
>8092	9d 91					.word	SyntaxError                      ; $3f ?
.8094					VectorSet0:
>8094	9e 81					.word	EOLCommand                       ; $80 !0:EOF
>8096	ab 81					.word	Shift1Command                    ; $81 !1:SH1
>8098	9d 91					.word	SyntaxError                      ; $82 !2:SH2
>809a	0f 91					.word	AbsUnary                         ; $83 ABS(
>809c	9d 91					.word	SyntaxError                      ; $84 ALLOC(
>809e	1f 91					.word	AscUnary                         ; $85 ASC(
>80a0	9d 91					.word	SyntaxError                      ; $86 CHR$(
>80a2	9d 91					.word	SyntaxError                      ; $87 DEC(
>80a4	60 8d					.word	UnaryFalse                       ; $88 FALSE
>80a6	9d 91					.word	SyntaxError                      ; $89 FRAC(
>80a8	9d 91					.word	SyntaxError                      ; $8a HEX$(
>80aa	9d 91					.word	SyntaxError                      ; $8b INT(
>80ac	9d 91					.word	SyntaxError                      ; $8c ISVAL(
>80ae	9d 91					.word	SyntaxError                      ; $8d LEFT$(
>80b0	2c 91					.word	LenUnary                         ; $8e LEN(
>80b2	9d 91					.word	SyntaxError                      ; $8f MID$(
>80b4	9d 91					.word	SyntaxError                      ; $90 NOT
>80b6	9d 91					.word	SyntaxError                      ; $91 RIGHT$(
>80b8	36 87					.word	Unary_Rnd                        ; $92 RND(
>80ba	46 91					.word	SgnUnary                         ; $93 SGN(
>80bc	9d 91					.word	SyntaxError                      ; $94 SPC(
>80be	9d 91					.word	SyntaxError                      ; $95 STR$(
>80c0	54 8d					.word	UnaryTrue                        ; $96 TRUE
>80c2	9d 91					.word	SyntaxError                      ; $97 VAL(
>80c4	9d 91					.word	SyntaxError                      ; $98 FOR
>80c6	9d 91					.word	SyntaxError                      ; $99 IF
>80c8	9d 91					.word	SyntaxError                      ; $9a PROC
>80ca	9d 91					.word	SyntaxError                      ; $9b REPEAT
>80cc	9d 91					.word	SyntaxError                      ; $9c WHILE
>80ce	9d 91					.word	SyntaxError                      ; $9d ENDIF
>80d0	9d 91					.word	SyntaxError                      ; $9e ENDPROC
>80d2	9d 91					.word	SyntaxError                      ; $9f NEXT
>80d4	9d 91					.word	SyntaxError                      ; $a0 UNTIL
>80d6	9d 91					.word	SyntaxError                      ; $a1 WEND
>80d8	1c 81					.word	CallCommand                      ; $a2 CALL
>80da	9d 91					.word	SyntaxError                      ; $a3 CLS
>80dc	9d 91					.word	SyntaxError                      ; $a4 DATA
>80de	9d 91					.word	SyntaxError                      ; $a5 DIM
>80e0	9d 91					.word	SyntaxError                      ; $a6 GOSUB
>80e2	9d 91					.word	SyntaxError                      ; $a7 GOTO
>80e4	9d 91					.word	SyntaxError                      ; $a8 LET
>80e6	9d 91					.word	SyntaxError                      ; $a9 PRINT
>80e8	9d 91					.word	SyntaxError                      ; $aa READ
>80ea	5a 81					.word	RemCommand                       ; $ab REM
>80ec	9d 91					.word	SyntaxError                      ; $ac RETURN
>80ee	9d 91					.word	SyntaxError                      ; $ad THEN
>80f0	9d 91					.word	SyntaxError                      ; $ae TO
.80f2					VectorSet1:
>80f2	9d 91					.word	SyntaxError                      ; $80 !0:EOF
>80f4	9d 91					.word	SyntaxError                      ; $81 !1:SH1
>80f6	9d 91					.word	SyntaxError                      ; $82 !2:SH2
>80f8	0e 81					.word	AssertCommand                    ; $83 ASSERT
>80fa	28 81					.word	ClearCommand                     ; $84 CLEAR
>80fc	4d 81					.word	EndCommand                       ; $85 END
>80fe	9d 91					.word	SyntaxError                      ; $86 LIST
>8100	50 81					.word	NewCommand                       ; $87 NEW
>8102	9d 91					.word	SyntaxError                      ; $88 RESTORE
>8104	67 81					.word	CommandRUN                       ; $89 RUN
>8106	9d 91					.word	SyntaxError                      ; $8a STOP
.8108					VectorSet2:
>8108	9d 91					.word	SyntaxError                      ; $80 !0:EOF
>810a	9d 91					.word	SyntaxError                      ; $81 !1:SH1
>810c	9d 91					.word	SyntaxError                      ; $82 !2:SH2

;******  Return to file: ./aa_system/00start.asm


;******  Return to file: _basic.asm


;******  Processing file: ./commands/assert.asm

.810e					AssertCommand:
.810e	20 af 87	jsr $87af			jsr 	EvaluateInteger 			; the assert test
.8111	20 65 88	jsr $8865			jsr 	NSMIsZero 					; exit if result is non zero.
.8114	d0 05		bne $811b			bne 	_ACExit
.8116	a9 0a		lda #$0a		lda	#10
.8118	4c b3 81	jmp $81b3		jmp	ErrorHandler
.811b					_ACExit:
.811b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./commands/call.asm

.811c					CallCommand:
.811c	20 c4 87	jsr $87c4			jsr 	Evaluate16BitInteger
.811f	ad 10 06	lda $0610			lda 	NSMantissa1
.8122	8d 09 06	sta $0609			sta 	NSMantissa0+1
.8125	6c 08 06	jmp ($0608)			jmp 	(NSMantissa0)

;******  Return to file: _basic.asm


;******  Processing file: ./commands/clear.asm

.8128					ClearCommand:
.8128	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.812a	85 36		sta $36				sta 	0+zTemp0
.812c	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.812e	85 37		sta $37				sta 	1+zTemp0
.8130					_ClearZeroLoop:
.8130	b2 36		lda ($36)			lda 	(zTemp0) 					; end of variables
.8132	f0 18		beq $814c			beq 	_ClearZeroEnd
.8134	a0 03		ldy #$03			ldy 	#3 							; erase the variables
.8136	a9 00		lda #$00			lda 	#0
.8138					_ClearOneVariable:
.8138	91 36		sta ($36),y			sta 	(zTemp0),y
.813a	c8		iny				iny
.813b	c0 08		cpy #$08			cpy 	#8
.813d	d0 f9		bne $8138			bne 	_ClearOneVariable
.813f	18		clc				clc 								; go to the next variable
.8140	b2 36		lda ($36)			lda 	(zTemp0)
.8142	65 36		adc $36				adc 	zTemp0
.8144	85 36		sta $36				sta 	zTemp0
.8146	90 e8		bcc $8130			bcc 	_ClearZeroLoop
.8148	e6 37		inc $37				inc 	zTemp0+1
.814a	80 e4		bra $8130			bra 	_ClearZeroLoop
.814c					_ClearZeroEnd:
.814c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./commands/end.asm

.814d					EndCommand:
.814d	4c 0c 80	jmp $800c			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./commands/new.asm

.8150					NewCommand:
.8150	20 72 88	jsr $8872			jsr 	MemoryNew
.8153	9c 00 10	stz $1000			stz 	VariableSpace 				; erase all variables.
.8156	20 28 81	jsr $8128			jsr 	ClearCommand 				; clear everything.
.8159	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./commands/rem.asm

.815a					RemCommand:
.815a	b1 30		lda ($30),y			lda 	(codePtr),y
.815c	c9 ff		cmp #$ff			cmp 	#KWC_STRING
.815e	d0 06		bne $8166			bne 	_RMExit
.8160	c8		iny				iny
.8161	98		tya				tya
.8162	38		sec				sec
.8163	71 30		adc ($30),y			adc 	(codePtr),y
.8165	a8		tay				tay
.8166					_RMExit:
.8166	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./commands/run.asm

.8167					CommandRUN:
.8167	20 28 81	jsr $8128			jsr 	ClearCommand 				; clear variable/stacks/etc.
.816a	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.816c	85 30		sta $30				sta 	codePtr
.816e	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.8170	85 31		sta $31				sta 	codePtr+1
.8172					RUNNewLine:
.8172	b2 30		lda ($30)			lda 	(codePtr)
.8174	f0 25		beq $819b			beq 	CRNoProgram         		; no then END.
.8176	a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack
.8178	9a		txs				txs
.8179					RUNCodePointerLine:
.8179	a0 02		ldy #$02			ldy 	#2 							; start of program
.817b					_CRIncMainLoop:
.817b	c8		iny				iny
.817c					_CRMainLoop:
.817c	b1 30		lda ($30),y			lda 	(codePtr),y
.817e	10 10		bpl $8190			bpl 	_CRNotKeyword
.8180	c9 98		cmp #$98			cmp 	#KWC_LAST_UNARY+1 			; if after unary, legitimate command
.8182	b0 04		bcs $8188			bcs 	_CRIsKeyword
.8184	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if unary, syntax error.
.8186	b0 0d		bcs $8195			bcs		_CRSyntaxError
.8188					_CRIsKeyword:
.8188	c8		iny				iny 								; consume command
.8189	0a		asl a				asl 	a 							; double losing the MSB which is '1' as tokens are $80-$FF
.818a	aa		tax				tax 								; put in X for vector jump
.818b	20 98 81	jsr $8198			jsr 	_CRCallVector0 				; call the vector - effectively jsr (vectortable,X)
.818e	80 ec		bra $817c			bra 	_CRMainLoop 				; and loop round
.8190					_CRNotKeyword:
.8190	c9 3a		cmp #$3a			cmp 	#KWD_COLON 					; if a :, consume it and go round.
.8192	f0 e7		beq $817b			beq 	_CRIncMainLoop
>8194	db						.byte 	$DB 						; causes a break in the emulator
.8195					_CRSyntaxError:
.8195	4c 9d 91	jmp $919d			jmp 	SyntaxError
.8198					_CRCallVector0:
.8198	7c 94 80	jmp ($8094,x)			jmp 	(VectorSet0,x)
.819b					CRNoProgram:
.819b	4c 4d 81	jmp $814d			jmp 	EndCommand
.819e					EOLCommand:
.819e	18		clc				clc
.819f	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.81a1	65 30		adc $30				adc 	codePtr
.81a3	85 30		sta $30				sta 	codePtr
.81a5	90 02		bcc $81a9			bcc 	_CREExit
.81a7	e6 31		inc $31				inc 	codePtr+1
.81a9					_CREExit:
.81a9	80 c7		bra $8172			bra 	RunNewLine
.81ab					Shift1Command:
.81ab	b1 30		lda ($30),y			lda 	(codePtr),y
.81ad	c8		iny				iny
.81ae	0a		asl a				asl 	a
.81af	aa		tax				tax
.81b0	7c f2 80	jmp ($80f2,x)			jmp 	(VectorSet1,x)

;******  Return to file: _basic.asm


;******  Processing file: ./errors/charcheck.asm

.8d3b					CheckRightBracket:
.8d3b	b1 30		lda ($30),y			lda 	(codePtr),y
.8d3d	c8		iny				iny
.8d3e	c9 29		cmp #$29			cmp 	#KWD_RPAREN 						; exit if matches
.8d40	d0 0f		bne $8d51			bne 	CNAFail
.8d42	60		rts				rts
.8d43					CheckComma:
.8d43	b1 30		lda ($30),y			lda 	(codePtr),y
.8d45	c8		iny				iny
.8d46	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 						; exit if matches
.8d48	d0 07		bne $8d51			bne 	CNAFail
.8d4a	60		rts				rts
.8d4b					CheckNextA:
.8d4b	d1 30		cmp ($30),y			cmp 	(codePtr),y
.8d4d	d0 02		bne $8d51			bne 	CNAFail
.8d4f	c8		iny				iny 								; skip character
.8d50	60		rts				rts 								; and exit
.8d51					CNAFail:
.8d51	4c 9d 91	jmp $919d			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./errors/errors.asm

.81b3					ErrorHandler:
.81b3	a8		tay				tay 								; find the error text
.81b4	f0 42		beq $81f8			beq 	_EHEnd
.81b6	a2 00		ldx #$00			ldx 	#0
.81b8					_EHFind:
.81b8	88		dey				dey 								; found the error text ?
.81b9	f0 0a		beq $81c5			beq 	_EHFound
.81bb					_EHFindZero:
.81bb	bd b6 91	lda $91b6,x			lda 	ErrorText,x 				; find the next error
.81be	e8		inx				inx
.81bf	c9 00		cmp #$00			cmp 	#0
.81c1	d0 f8		bne $81bb			bne 	_EHFindZero
.81c3	80 f3		bra $81b8			bra 	_EHFind
.81c5					_EHFound:
.81c5	bd b6 91	lda $91b6,x			lda 	ErrorText,x 				; print the message
.81c8	20 5a 92	jsr $925a			jsr 	EXTPrintCharacter
.81cb	e8		inx				inx
.81cc	bd b6 91	lda $91b6,x			lda 	ErrorText,x
.81cf	d0 f4		bne $81c5			bne 	_EHFound
.81d1	a0 01		ldy #$01			ldy 	#1 							; if line number zero don't print i
.81d3	b1 30		lda ($30),y			lda 	(codePtr),y
.81d5	d0 05		bne $81dc			bne 	_EHAtMsg
.81d7	c8		iny				iny
.81d8	b1 30		lda ($30),y			lda 	(codePtr),y
.81da	f0 17		beq $81f3			beq 	_EHCREnd
.81dc					_EHAtMsg:
.81dc	a2 81		ldx #$81			ldx 	#_AtMsg >> 8 				; print " at "
.81de	a9 fb		lda #$fb			lda 	#_AtMsg & $FF
.81e0	20 05 82	jsr $8205			jsr 	PrintStringXA
.81e3	a0 01		ldy #$01			ldy 	#1 							; line number into XA
.81e5	b1 30		lda ($30),y			lda 	(codePtr),y
.81e7	48		pha				pha
.81e8	c8		iny				iny
.81e9	b1 30		lda ($30),y			lda 	(codePtr),y
.81eb	aa		tax				tax
.81ec	68		pla				pla
.81ed	20 3d 8f	jsr $8f3d			jsr 	ConvertInt16 				; convert XA to string
.81f0	20 05 82	jsr $8205			jsr 	PrintStringXA 				; and print it.
.81f3					_EHCREnd:
.81f3	a9 0d		lda #$0d			lda 	#13 						; new line
.81f5	20 5a 92	jsr $925a			jsr 	EXTPrintCharacter
.81f8					_EHEnd:
.81f8	4c 0c 80	jmp $800c			jmp 	WarmStart
>81fb	20 61 74 20 6c 69 6e 65		_AtMsg:	.text 	" at line ",0
>8203	20 00
.8205					PrintStringXA:
.8205	86 37		stx $37				stx 	zTemp0+1
.8207	85 36		sta $36				sta 	zTemp0
.8209	a0 00		ldy #$00			ldy 	#0
.820b					_PSXALoop:
.820b	b1 36		lda ($36),y			lda 	(zTemp0),y
.820d	f0 06		beq $8215			beq 	_PSXAExit
.820f	20 5a 92	jsr $925a			jsr 	EXTPrintCharacter
.8212	c8		iny				iny
.8213	80 f6		bra $820b			bra 	_PSXALoop
.8215					_PSXAExit:
.8215	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/binary/compare.asm

.8d54					UnaryTrue:
.8d54	fa		plx				plx
.8d55					ReturnTrue:
.8d55	a9 01		lda #$01			lda 	#1  						; set to 1
.8d57	20 37 88	jsr $8837			jsr 	NSMSetByte
.8d5a	a9 80		lda #$80			lda 	#$80 						; set sign flag, so it is -1
.8d5c	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8d5f	60		rts				rts
.8d60					UnaryFalse:
.8d60	fa		plx				plx
.8d61					ReturnFalse:
.8d61	4c 35 88	jmp $8835			jmp 	NSMSetZero 					; set it all to zero
.8d64					BinaryCompareEqual:
.8d64	fa		plx				plx
.8d65	20 a0 8d	jsr $8da0			jsr 	CompareBaseCode
.8d68	c9 00		cmp #$00			cmp 	#0
.8d6a	f0 e9		beq $8d55			beq 	ReturnTrue
.8d6c	80 f3		bra $8d61			bra 	ReturnFalse
.8d6e					BinaryCompareLess:
.8d6e	fa		plx				plx
.8d6f	20 a0 8d	jsr $8da0			jsr 	CompareBaseCode
.8d72	c9 ff		cmp #$ff			cmp 	#$FF
.8d74	f0 df		beq $8d55			beq 	ReturnTrue
.8d76	80 e9		bra $8d61			bra 	ReturnFalse
.8d78					BinaryCompareGreater:
.8d78	fa		plx				plx
.8d79	20 a0 8d	jsr $8da0			jsr 	CompareBaseCode
.8d7c	c9 01		cmp #$01			cmp 	#1
.8d7e	f0 d5		beq $8d55			beq 	ReturnTrue
.8d80	80 df		bra $8d61			bra 	ReturnFalse
.8d82					BinaryCompareNotEqual:
.8d82	fa		plx				plx
.8d83	20 a0 8d	jsr $8da0			jsr 	CompareBaseCode
.8d86	c9 00		cmp #$00			cmp 	#0
.8d88	d0 cb		bne $8d55			bne 	ReturnTrue
.8d8a	80 d5		bra $8d61			bra 	ReturnFalse
.8d8c					BinaryCompareLessEqual:
.8d8c	fa		plx				plx
.8d8d	20 a0 8d	jsr $8da0			jsr 	CompareBaseCode
.8d90	c9 01		cmp #$01			cmp 	#1
.8d92	d0 c1		bne $8d55			bne 	ReturnTrue
.8d94	80 cb		bra $8d61			bra 	ReturnFalse
.8d96					BinaryCompareGreaterEqual:
.8d96	fa		plx				plx
.8d97	20 a0 8d	jsr $8da0			jsr 	CompareBaseCode
.8d9a	c9 ff		cmp #$ff			cmp 	#$FF
.8d9c	d0 b7		bne $8d55			bne 	ReturnTrue
.8d9e	80 c1		bra $8d61			bra 	ReturnFalse
.8da0					CompareBaseCode:
.8da0	20 99 84	jsr $8499			jsr 	DereferenceTopTwo 			; make both values if references.
.8da3	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if either is a string.
.8da6	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8da9	29 10		and #$10			and 	#NSTString
.8dab	d0 40		bne $8ded			bne 	_CBCString
.8dad	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check both are integers
.8db0	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8db3	d0 3b		bne $8df0			bne 	_CBCFloat
.8db5	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8db8	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8dbb	29 08		and #$08			and 	#NSTFloat
.8dbd	d0 31		bne $8df0			bne 	_CBCFloat
.8dbf	20 f3 8d	jsr $8df3			jsr 	CompareFixMinusZero
.8dc2	e8		inx				inx
.8dc3	20 f3 8d	jsr $8df3			jsr 	CompareFixMinusZero
.8dc6	ca		dex				dex
.8dc7	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; are the signs different ?
.8dca	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.8dcd	10 0b		bpl $8dda			bpl 	_CDCSameSign
.8dcf	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; if first one is -ve
.8dd2	30 16		bmi $8dea			bmi 	_CBCLess 					; return $FF
.8dd4					_CBCGreater:
.8dd4	a9 01		lda #$01			lda 	#1
.8dd6	60		rts				rts
.8dd7					_CBCEqual:
.8dd7	a9 00		lda #$00			lda 	#0
.8dd9	60		rts				rts
.8dda					_CDCSameSign:
.8dda	20 bf 82	jsr $82bf			jsr 	SubTopTwoStack 				; unsigned subtract
.8ddd	20 65 88	jsr $8865			jsr 	NSMIsZero 					; or the mantissa together
.8de0	f0 f5		beq $8dd7			beq 	_CBCEqual 					; -0 == 0
.8de2	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; sign of the result. if +ve return $01 else return $FF
.8de5	5d 01 06	eor $0601,x			eor 	NSStatus+1,x 				; however if both were -ve this is inverted
.8de8	10 ea		bpl $8dd4			bpl 	_CBCGreater
.8dea					_CBCLess:
.8dea	a9 ff		lda #$ff			lda 	#$FF
.8dec	60		rts				rts
.8ded					_CBCString:
.8ded	4c 16 82	jmp $8216			jmp 	CompareStrings
.8df0					_CBCFloat:
.8df0	4c 39 90	jmp $9039			jmp 	CompareFloat
.8df3					CompareFixMinusZero:
.8df3	20 65 88	jsr $8865			jsr 	NSMIsZero
.8df6	d0 03		bne $8dfb			bne 	_CFXMZNotZero
.8df8	9e 00 06	stz $0600,x			stz 	NSStatus,x
.8dfb					_CFXMZNotZero:
.8dfb	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/binary/divide.asm

.8dfc					IntegerDivide:
.8dfc	fa		plx				plx
.8dfd	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8e00	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8e03	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8e04	0a		asl a				asl 	a
.8e05	10 05		bpl $8e0c			bpl 	_NotRef
.8e07	48		pha				pha
.8e08	20 99 84	jsr $8499			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8e0b	68		pla				pla
.8e0c					_NotRef:
.8e0c	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8e0e	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8e11	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8e14	f0 03		beq $8e19			beq 	_IntegerCode 				; if clear, then we have two integers
.8e16	4c a7 91	jmp $91a7			jmp 	TypeError 					; anything else, type mismatch.
.8e19					_IntegerCode:
.8e19	20 3b 8e	jsr $8e3b			jsr 	CheckDivideZero 			; do div zero check
.8e1c	20 72 8e	jsr $8e72			jsr 	Int32Divide 				; do the division
.8e1f	20 2f 8f	jsr $8f2f			jsr 	CalculateSign 				; calculate result sign
.8e22					NSMCopyPlusTwoToZero:
.8e22	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.8e25	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8e28	bd 12 06	lda $0612,x			lda 	NSMantissa1+2,x
.8e2b	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8e2e	bd 1a 06	lda $061a,x			lda 	NSMantissa2+2,x
.8e31	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8e34	bd 22 06	lda $0622,x			lda 	NSMantissa3+2,x
.8e37	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8e3a	60		rts				rts
.8e3b					CheckDivideZero:
.8e3b	e8		inx				inx
.8e3c	20 65 88	jsr $8865			jsr 	NSMIsZero
.8e3f	f0 02		beq $8e43			beq 	_CDVError
.8e41	ca		dex				dex
.8e42	60		rts				rts
.8e43					_CDVError:
.8e43	a9 03		lda #$03		lda	#3
.8e45	4c b3 81	jmp $81b3		jmp	ErrorHandler
.8e48					IntegerModulus:
.8e48	fa		plx				plx
.8e49	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8e4c	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8e4f	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8e50	0a		asl a				asl 	a
.8e51	10 05		bpl $8e58			bpl 	_NotRef
.8e53	48		pha				pha
.8e54	20 99 84	jsr $8499			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8e57	68		pla				pla
.8e58					_NotRef:
.8e58	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8e5a	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8e5d	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8e60	f0 03		beq $8e65			beq 	_IntegerCode 				; if clear, then we have two integers
.8e62	4c a7 91	jmp $91a7			jmp 	TypeError 					; anything else, type mismatch.
.8e65					_IntegerCode:
.8e65	20 3b 8e	jsr $8e3b			jsr 	CheckDivideZero 			; do div zero check
.8e68	20 72 8e	jsr $8e72			jsr 	Int32Divide 				; do the division
.8e6b	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; clear the sign bit.
.8e6e	5e 00 06	lsr $0600,x			lsr 	NSStatus,x
.8e71	60		rts				rts
.8e72					Int32Divide:
.8e72	48		pha				pha 								; save AXY
.8e73	5a		phy				phy
.8e74	20 0c 88	jsr $880c			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.8e77	20 31 88	jsr $8831			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.8e7a	a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.8e7c					_I32DivideLoop:
.8e7c	e8		inx				inx
.8e7d	e8		inx				inx
.8e7e	20 4a 88	jsr $884a			jsr 	NSMShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.8e81	ca		dex				dex
.8e82	ca		dex				dex
.8e83	20 4b 88	jsr $884b			jsr 	NSMRotateLeft
.8e86	20 b2 8e	jsr $8eb2			jsr 	DivideCheckSubtract 		; check if subtract possible
.8e89	90 03		bcc $8e8e			bcc 	_I32DivideNoCarryIn
.8e8b	fe 0a 06	inc $060a,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.8e8e					_I32DivideNoCarryIn:
.8e8e	88		dey				dey 								; loop round till division completed.
.8e8f	d0 eb		bne $8e7c			bne 	_I32DivideLoop
.8e91	7a		ply				ply 								; restore AXY and exit
.8e92	68		pla				pla
.8e93	60		rts				rts
.8e94					Int32ShiftDivide:
.8e94	48		pha				pha 								; save AY
.8e95	5a		phy				phy
.8e96	e8		inx				inx 								; clear S[X+2]
.8e97	e8		inx				inx
.8e98	20 35 88	jsr $8835			jsr 	NSMSetZero
.8e9b	ca		dex				dex
.8e9c	ca		dex				dex
.8e9d	a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.8e9f					_I32SDLoop:
.8e9f	20 b2 8e	jsr $8eb2			jsr 	DivideCheckSubtract 		; check if subtract possible
.8ea2	e8		inx				inx
.8ea3	e8		inx				inx
.8ea4	20 4b 88	jsr $884b			jsr 	NSMRotateLeft				; shift 64 bit FPA left, rotating carry in
.8ea7	ca		dex				dex
.8ea8	ca		dex				dex
.8ea9	20 4b 88	jsr $884b			jsr 	NSMRotateLeft
.8eac	88		dey				dey 	 							; do 31 times
.8ead	d0 f0		bne $8e9f			bne 	_I32SDLoop
.8eaf	7a		ply				ply 								; restore AY and exit
.8eb0	68		pla				pla
.8eb1	60		rts				rts
.8eb2					DivideCheckSubtract:
.8eb2	20 bf 82	jsr $82bf			jsr 	SubTopTwoStack 				; subtract Stack[X+1] from Stack[X+0]
.8eb5	b0 04		bcs $8ebb			bcs 	_DCSExit 					; if carry set, then could do, exit
.8eb7	20 99 82	jsr $8299			jsr 	AddTopTwoStack 				; add it back in
.8eba	18		clc				clc 								; and return False
.8ebb					_DCSExit:
.8ebb	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/binary/multiply.asm

.8ebc					MulInteger:
.8ebc	fa		plx				plx
.8ebd	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8ec0	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8ec3	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8ec4	0a		asl a				asl 	a
.8ec5	10 05		bpl $8ecc			bpl 	_NotRef
.8ec7	48		pha				pha
.8ec8	20 99 84	jsr $8499			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8ecb	68		pla				pla
.8ecc					_NotRef:
.8ecc	0a		asl a				asl 	a 							; put MSB of type into A:7
.8ecd	30 0b		bmi $8eda			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.8ecf	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8ed2	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8ed5	f0 06		beq $8edd			beq 	_IntegerCode 				; if clear, then we have two integers
.8ed7	4c 86 90	jmp $9086			jmp 	FloatingPointMultiply 							; otherwise at least one float.
.8eda					_StringData:
.8eda	4c b1 91	jmp $91b1			jmp 	NotDoneError							; at least one string - don't know both are strings.
.8edd					_IntegerCode:
.8edd	20 ea 8e	jsr $8eea			jsr 	MultiplyShort
.8ee0	c9 00		cmp #$00			cmp 	#0
.8ee2	f0 05		beq $8ee9			beq 	_MIExit
.8ee4	a9 04		lda #$04		lda	#4
.8ee6	4c b3 81	jmp $81b3		jmp	ErrorHandler
.8ee9					_MIExit:
.8ee9	60		rts				rts
.8eea					MultiplyShort:
.8eea	5a		phy				phy 								; save Y
.8eeb	20 0c 88	jsr $880c			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.8eee	20 31 88	jsr $8831			jsr 	NSMSetZeroMantissaOnly 		; set mantissa S[X] to zero
.8ef1	a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.8ef3					_I32MLoop:
.8ef3	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.8ef6	1d 12 06	ora $0612,x			ora 	NSMantissa1+2,x
.8ef9	1d 1a 06	ora $061a,x			ora 	NSMantissa2+2,x
.8efc	1d 22 06	ora $0622,x			ora 	NSMantissa3+2,x
.8eff	f0 28		beq $8f29			beq 	_I32MExit 					; exit if zero
.8f01	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.8f04	29 01		and #$01			and 	#1
.8f06	f0 0e		beq $8f16			beq 	_I32MNoAdd
.8f08	20 99 82	jsr $8299			jsr 	AddTopTwoStack 				; if so add S[X+1] to S[X+0]
.8f0b	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.8f0e	10 06		bpl $8f16			bpl 	_I32MNoAdd
.8f10					_I32ShiftRight:
.8f10	20 58 88	jsr $8858			jsr 	NSMShiftRight 				; shift S[X] right
.8f13	c8		iny				iny 								; increment shift count
.8f14	80 0a		bra $8f20			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.8f16					_I32MNoAdd:
.8f16	3c 21 06	bit $0621,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.8f19	70 f5		bvs $8f10			bvs 	_I32ShiftRight 				; instead.
.8f1b	e8		inx				inx
.8f1c	20 4a 88	jsr $884a			jsr 	NSMShiftLeft 				; shift additive S[X+1] left
.8f1f	ca		dex				dex
.8f20					_I32MShiftUpper:
.8f20	e8		inx				inx 								; shift S[X+2] right
.8f21	e8		inx				inx
.8f22	20 58 88	jsr $8858			jsr 	NSMShiftRight
.8f25	ca		dex				dex
.8f26	ca		dex				dex
.8f27	80 ca		bra $8ef3			bra 	_I32MLoop 					; try again.
.8f29					_I32MExit:
.8f29	20 2f 8f	jsr $8f2f			jsr 	CalculateSign
.8f2c	98		tya				tya 								; shift in A
.8f2d	7a		ply				ply 								; restore Y and exit
.8f2e	60		rts				rts
.8f2f					CalculateSign:
.8f2f	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.8f32	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; shift result left
.8f35	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.8f38	0a		asl a				asl 	a 							; shift bit 7 into carry
.8f39	7e 00 06	ror $0600,x			ror 	NSStatus,x 					; shift right into status byte.
.8f3c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/binary/scompare.asm

.8216					CompareStrings:
.8216	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check both are strings
.8219	3d 01 06	and $0601,x			and 	NSStatus+1,x
.821c	29 10		and #$10			and 	#NSBIsString
.821e	f0 2c		beq $824c			beq 	_CSTypeError
.8220	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy string addresses to zTemp0/1
.8223	85 36		sta $36				sta 	zTemp0
.8225	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8228	85 37		sta $37				sta 	zTemp0+1
.822a	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.822d	85 38		sta $38				sta 	zTemp1
.822f	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.8232	85 39		sta $39				sta 	zTemp1+1
.8234	5a		phy				phy 								; save Y so we can access strings
.8235	a0 ff		ldy #$ff			ldy 	#$FF 						; -1 for pre increment.
.8237					_CSLoop:
.8237	c8		iny				iny
.8238	b1 36		lda ($36),y			lda 	(zTemp0),y 					; check if they are the same
.823a	d1 38		cmp ($38),y			cmp 	(zTemp1),y
.823c	d0 06		bne $8244			bne 	_CSDifferent
.823e	c9 00		cmp #$00			cmp 	#0 							; reached end ?
.8240	d0 f5		bne $8237			bne 	_CSLoop 					; still comparing
.8242					_CSExit:
.8242	7a		ply				ply 								; reached end, return zero in A from EOS
.8243	60		rts				rts
.8244					_CSDifferent:
.8244	a9 ff		lda #$ff			lda 	#255 						; if < return $FF
.8246	90 fa		bcc $8242			bcc		_CSExit
.8248	a9 01		lda #$01			lda 	#1 							; otherwise return 1.
.824a	80 f6		bra $8242			bra 	_CSExit
.824c					_CSTypeError:
.824c	4c a7 91	jmp $91a7			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/binary/shifts.asm

.824f					ShiftLeft:
.824f	38		sec				sec
.8250	80 01		bra $8253			bra 	ShiftMain
.8252					ShiftRight:
.8252	18		clc				clc
.8253					ShiftMain:
.8253	fa		plx				plx 								; restore X
.8254	08		php				php 								; save direction
.8255	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8258	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.825b	0a		asl a				asl 	a 							; shift reference bit into sign bit
.825c	0a		asl a				asl 	a
.825d	10 05		bpl $8264			bpl 	_NotRef
.825f	48		pha				pha
.8260	20 99 84	jsr $8499			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8263	68		pla				pla
.8264					_NotRef:
.8264	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8266	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8269	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.826c	f0 03		beq $8271			beq 	_IntegerCode 				; if clear, then we have two integers
.826e	4c a7 91	jmp $91a7			jmp 	TypeError 					; anything else, type mismatch.
.8271					_IntegerCode:
.8271	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; check number < 32
.8274	29 e0		and #$e0			and 	#$E0
.8276	1d 11 06	ora $0611,x			ora 	NSMantissa1+1,x
.8279	1d 19 06	ora $0619,x			ora 	NSMantissa2+1,x
.827c	1d 21 06	ora $0621,x			ora 	NSMantissa3+1,x
.827f	d0 13		bne $8294			bne 	_SMExit0 					; if >= 32 it will always return zero.
.8281					_SMLoop:
.8281	de 09 06	dec $0609,x			dec 	NSMantissa0+1,x 			; predecrement, could do << 0
.8284	30 11		bmi $8297			bmi 	_SMExit 					; exit if done.
.8286	28		plp				plp 								; restore direcition setting
.8287	08		php				php
.8288	90 05		bcc $828f			bcc 	_SMRight
.828a	20 4a 88	jsr $884a			jsr 	NSMShiftLeft 				; shift left if CS
.828d	80 f2		bra $8281			bra 	_SMLoop
.828f					_SMRight:
.828f	20 58 88	jsr $8858			jsr 	NSMShiftRight 				; shift right if CC
.8292	80 ed		bra $8281			bra 	_SMLoop
.8294					_SMExit0:
.8294	20 35 88	jsr $8835			jsr 	NSMSetZero 					; return zero.
.8297					_SMExit:
.8297	28		plp				plp 								; throw direction
.8298	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/binary/simple.asm

.8299					AddTopTwoStack:
.8299	18		clc				clc
.829a	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.829d	7d 09 06	adc $0609,x			adc 		NSMantissa0+1,x
.82a0	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.82a3	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.82a6	7d 11 06	adc $0611,x			adc 		NSMantissa1+1,x
.82a9	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.82ac	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.82af	7d 19 06	adc $0619,x			adc 		NSMantissa2+1,x
.82b2	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.82b5	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.82b8	7d 21 06	adc $0621,x			adc 		NSMantissa3+1,x
.82bb	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.82be	60		rts				rts
.82bf					SubTopTwoStack:
.82bf	38		sec				sec
.82c0	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.82c3	fd 09 06	sbc $0609,x			sbc 		NSMantissa0+1,x
.82c6	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.82c9	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.82cc	fd 11 06	sbc $0611,x			sbc 		NSMantissa1+1,x
.82cf	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.82d2	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.82d5	fd 19 06	sbc $0619,x			sbc 		NSMantissa2+1,x
.82d8	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.82db	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.82de	fd 21 06	sbc $0621,x			sbc 		NSMantissa3+1,x
.82e1	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.82e4	60		rts				rts
.82e5					AddInteger:
.82e5	fa		plx				plx
.82e6	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.82e9	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.82ec	0a		asl a				asl 	a 							; shift reference bit into sign bit
.82ed	0a		asl a				asl 	a
.82ee	10 05		bpl $82f5			bpl 	_NotRef
.82f0	48		pha				pha
.82f1	20 99 84	jsr $8499			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.82f4	68		pla				pla
.82f5					_NotRef:
.82f5	0a		asl a				asl 	a 							; put MSB of type into A:7
.82f6	30 0b		bmi $8303			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.82f8	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.82fb	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.82fe	f0 06		beq $8306			beq 	_IntegerCode 				; if clear, then we have two integers
.8300	4c 98 8f	jmp $8f98			jmp 	FloatingPointAdd 							; otherwise at least one float.
.8303					_StringData:
.8303	4c b1 91	jmp $91b1			jmp 	NotDoneError							; at least one string - don't know both are strings.
.8306					_IntegerCode:
.8306					AddCode:
.8306	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.8309	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.830c	10 8b		bpl $8299			bpl 	AddTopTwoStack
.830e	20 bf 82	jsr $82bf			jsr 	SubTopTwoStack 				; do a physical subtraction
.8311	3c 20 06	bit $0620,x			bit 	NSMantissa3,x 				; result is +ve, okay
.8314	10 09		bpl $831f			bpl 	_AddExit
.8316	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; sign is that of 2nd value
.8319	9d 00 06	sta $0600,x			sta 	NSStatus,x
.831c	20 ea 87	jsr $87ea			jsr 	NSMNegateMantissa 			; negate the mantissa and exit
.831f					_AddExit:
.831f	60		rts				rts
.8320					SubInteger:
.8320	fa		plx				plx
.8321	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8324	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8327	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8328	0a		asl a				asl 	a
.8329	10 05		bpl $8330			bpl 	_NotRef
.832b	48		pha				pha
.832c	20 99 84	jsr $8499			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.832f	68		pla				pla
.8330					_NotRef:
.8330	0a		asl a				asl 	a 							; put MSB of type into A:7
.8331	30 0b		bmi $833e			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.8333	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8336	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8339	f0 06		beq $8341			beq 	_IntegerCode 				; if clear, then we have two integers
.833b	4c 9d 8f	jmp $8f9d			jmp 	FloatingPointSub 							; otherwise at least one float.
.833e					_StringData:
.833e	4c b1 91	jmp $91b1			jmp 	NotDoneError							; at least one string - don't know both are strings.
.8341					_IntegerCode:
.8341	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; negate the second value.
.8344	49 80		eor #$80			eor 	#$80
.8346	9d 01 06	sta $0601,x			sta 	NSStatus+1,x
.8349	80 bb		bra $8306			bra 	AddCode 					; and do the same code as add.
.834b					AndInteger:
.834b	fa		plx				plx
.834c	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.834f	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8352	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8353	0a		asl a				asl 	a
.8354	10 05		bpl $835b			bpl 	_NotRef
.8356	48		pha				pha
.8357	20 99 84	jsr $8499			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.835a	68		pla				pla
.835b					_NotRef:
.835b	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.835d	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8360	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8363	f0 03		beq $8368			beq 	_IntegerCode 				; if clear, then we have two integers
.8365	4c a7 91	jmp $91a7			jmp 	TypeError 					; anything else, type mismatch.
.8368					_IntegerCode:
.8368	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.836b	3d 09 06	and $0609,x			and 		NSMantissa0+1,x
.836e	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8371	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8374	3d 11 06	and $0611,x			and 		NSMantissa1+1,x
.8377	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.837a	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.837d	3d 19 06	and $0619,x			and 		NSMantissa2+1,x
.8380	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8383	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8386	3d 21 06	and $0621,x			and 		NSMantissa3+1,x
.8389	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.838c	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.838f	60		rts				rts
.8390					OraInteger:
.8390	fa		plx				plx
.8391	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8394	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8397	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8398	0a		asl a				asl 	a
.8399	10 05		bpl $83a0			bpl 	_NotRef
.839b	48		pha				pha
.839c	20 99 84	jsr $8499			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.839f	68		pla				pla
.83a0					_NotRef:
.83a0	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.83a2	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.83a5	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.83a8	f0 03		beq $83ad			beq 	_IntegerCode 				; if clear, then we have two integers
.83aa	4c a7 91	jmp $91a7			jmp 	TypeError 					; anything else, type mismatch.
.83ad					_IntegerCode:
.83ad	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.83b0	1d 09 06	ora $0609,x			ora 		NSMantissa0+1,x
.83b3	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.83b6	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.83b9	1d 11 06	ora $0611,x			ora 		NSMantissa1+1,x
.83bc	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.83bf	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.83c2	1d 19 06	ora $0619,x			ora 		NSMantissa2+1,x
.83c5	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.83c8	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.83cb	1d 21 06	ora $0621,x			ora 		NSMantissa3+1,x
.83ce	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.83d1	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.83d4	60		rts				rts
.83d5					EorInteger:
.83d5	fa		plx				plx
.83d6	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.83d9	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.83dc	0a		asl a				asl 	a 							; shift reference bit into sign bit
.83dd	0a		asl a				asl 	a
.83de	10 05		bpl $83e5			bpl 	_NotRef
.83e0	48		pha				pha
.83e1	20 99 84	jsr $8499			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.83e4	68		pla				pla
.83e5					_NotRef:
.83e5	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.83e7	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.83ea	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.83ed	f0 03		beq $83f2			beq 	_IntegerCode 				; if clear, then we have two integers
.83ef	4c a7 91	jmp $91a7			jmp 	TypeError 					; anything else, type mismatch.
.83f2					_IntegerCode:
.83f2	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.83f5	5d 09 06	eor $0609,x			eor 		NSMantissa0+1,x
.83f8	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.83fb	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.83fe	5d 11 06	eor $0611,x			eor 		NSMantissa1+1,x
.8401	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8404	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8407	5d 19 06	eor $0619,x			eor 		NSMantissa2+1,x
.840a	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.840d	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8410	5d 21 06	eor $0621,x			eor 		NSMantissa3+1,x
.8413	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8416	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.8419	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/binary/tostring.asm

.8f3d					ConvertInt16:
.8f3d	8d 08 06	sta $0608			sta 	NSMantissa0 				; set up as 32 bit conversion
.8f40	8e 10 06	stx $0610			stx 	NSMantissa1
.8f43	9c 18 06	stz $0618			stz 	NSMantissa2
.8f46	9c 20 06	stz $0620			stz 	NSMantissa3
.8f49	9c 00 06	stz $0600			stz 	NSStatus 					; positive integer
.8f4c	a2 00		ldx #$00			ldx 	#0 							; stack level
.8f4e	a9 0a		lda #$0a			lda 	#10 						; base
.8f50	80 00		bra $8f52			bra 	ConvertInt32
.8f52					ConvertInt32:
.8f52	5a		phy				phy
.8f53	a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.8f55	2c 00 06	bit $0600			bit 	NSStatus 					; output a - if not negative.
.8f58	10 08		bpl $8f62			bpl 	_CI32NotNeg
.8f5a	48		pha				pha
.8f5b	a9 2d		lda #$2d			lda 	#'-'
.8f5d	99 5c 08	sta $085c,y			sta 	NumberBuffer,y
.8f60	c8		iny				iny
.8f61	68		pla				pla
.8f62					_CI32NotNeg:
.8f62	20 70 8f	jsr $8f70			jsr 	_CI32DivideConvert 			; recursive conversion
.8f65	a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.8f67	99 5c 08	sta $085c,y			sta 	NumberBuffer,y
.8f6a	7a		ply				ply
.8f6b	a2 08		ldx #$08			ldx 	#NumberBuffer >> 8
.8f6d	a9 5c		lda #$5c			lda 	#NumberBuffer & $FF
.8f6f	60		rts				rts
.8f70					_CI32DivideConvert:
.8f70	e8		inx				inx 								; write to next slot up
.8f71	20 37 88	jsr $8837			jsr 	NSMSetByte
.8f74	ca		dex				dex
.8f75	20 72 8e	jsr $8e72			jsr 	Int32Divide 				; divide
.8f78	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; save remainder
.8f7b	48		pha				pha
.8f7c	20 22 8e	jsr $8e22			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.8f7f	20 65 88	jsr $8865			jsr 	NSMIsZero 					; is it zero ?
.8f82	f0 06		beq $8f8a			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.8f84	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.8f87	20 70 8f	jsr $8f70			jsr 	_CI32DivideConvert 			; and recusrively call.
.8f8a					_CI32NoRecurse:
.8f8a	68		pla				pla 								; remainder
.8f8b	c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII
.8f8d	90 02		bcc $8f91			bcc 	_CI32NotHex
.8f8f	69 26		adc #$26			adc 	#6+32
.8f91					_CI32NotHex:
.8f91	69 30		adc #$30			adc 	#48
.8f93	99 5c 08	sta $085c,y			sta 	NumberBuffer,y 				; write out and exit
.8f96	c8		iny				iny
.8f97	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/expression.asm


;******  Processing file: ./expressions/../generated/precedence.dat

.841a					PrecedenceLevel:
>841a	04					.byte	 4	; $00 <<
>841b	02					.byte	 2	; $01 <=
>841c	02					.byte	 2	; $02 <>
>841d	00					.byte	 0	; $03 !!3
>841e	00					.byte	 0	; $04 ><
>841f	02					.byte	 2	; $05 >=
>8420	04					.byte	 4	; $06 >>
>8421	00					.byte	 0	; $07 !!7
>8422	00					.byte	 0	; $08 !!8
>8423	00					.byte	 0	; $09 !!9
>8424	00					.byte	 0	; $0a !!10
>8425	00					.byte	 0	; $0b !!11
>8426	00					.byte	 0	; $0c !!12
>8427	00					.byte	 0	; $0d !!13
>8428	00					.byte	 0	; $0e !!14
>8429	00					.byte	 0	; $0f !!15
>842a	00					.byte	 0	; $10 @
>842b	00					.byte	 0	; $11 !!17
>842c	00					.byte	 0	; $12 !!18
>842d	00					.byte	 0	; $13 [
>842e	04					.byte	 4	; $14 \
>842f	00					.byte	 0	; $15 ]
>8430	01					.byte	 1	; $16 ^
>8431	00					.byte	 0	; $17 _
>8432	00					.byte	 0	; $18 `
>8433	00					.byte	 0	; $19 !!25
>8434	00					.byte	 0	; $1a !!26
>8435	00					.byte	 0	; $1b {
>8436	01					.byte	 1	; $1c |
>8437	00					.byte	 0	; $1d }
>8438	00					.byte	 0	; $1e ~
>8439	00					.byte	 0	; $1f [7m<7F>[m
>843a	00					.byte	 0	; $20
>843b	05					.byte	 5	; $21 !
>843c	00					.byte	 0	; $22 "
>843d	00					.byte	 0	; $23 #
>843e	05					.byte	 5	; $24 $
>843f	04					.byte	 4	; $25 %
>8440	01					.byte	 1	; $26 &
>8441	00					.byte	 0	; $27 '
>8442	00					.byte	 0	; $28 (
>8443	00					.byte	 0	; $29 )
>8444	04					.byte	 4	; $2a *
>8445	03					.byte	 3	; $2b +
>8446	00					.byte	 0	; $2c ,
>8447	03					.byte	 3	; $2d -
>8448	00					.byte	 0	; $2e .
>8449	04					.byte	 4	; $2f /
>844a	00					.byte	 0	; $30 0
>844b	00					.byte	 0	; $31 1
>844c	00					.byte	 0	; $32 2
>844d	00					.byte	 0	; $33 3
>844e	00					.byte	 0	; $34 4
>844f	00					.byte	 0	; $35 5
>8450	00					.byte	 0	; $36 6
>8451	00					.byte	 0	; $37 7
>8452	00					.byte	 0	; $38 8
>8453	00					.byte	 0	; $39 9
>8454	00					.byte	 0	; $3a :
>8455	00					.byte	 0	; $3b ;
>8456	02					.byte	 2	; $3c <
>8457	02					.byte	 2	; $3d =
>8458	02					.byte	 2	; $3e >
>8459	05					.byte	 5	; $3f ?

;******  Return to file: ./expressions/expression.asm

.845a					EvaluateExpressionAt0:
.845a	a2 00		ldx #$00			ldx 	#0 							; bottom stack level
.845c					EvaluateExpression:
.845c	a9 00		lda #$00			lda 	#0 							; lowest precedence level
.845e					EvaluateExpressionAtPrecedence:
.845e	48		pha				pha 								; save precedence level
.845f	20 4f 86	jsr $864f			jsr 	EvaluateTerm 				; evaluate term into level X.
.8462	68		pla				pla 								; restore precedence level.
.8463					_EXPRLoop:
.8463	85 36		sta $36				sta 	zTemp0 						; save current precedence level.
.8465	b1 30		lda ($30),y			lda 	(codePtr),y
.8467	c9 40		cmp #$40			cmp		#$40 						; if >= $40 cannot be an operator
.8469	b0 25		bcs $8490			bcs 	_EXPRExit
.846b	da		phx				phx 								; read the operator precedence
.846c	aa		tax				tax
.846d	bd 1a 84	lda $841a,x			lda 	PrecedenceLevel,x
.8470	fa		plx				plx
.8471	c9 00		cmp #$00			cmp 	#0							; if zero exit (not an operator)
.8473	f0 1b		beq $8490			beq 	_EXPRExit
.8475	85 37		sta $37				sta 	zTemp0+1 					; save operator precedence level.
.8477	a5 36		lda $36				lda 	zTemp0 						; compare current precedence vs. operator precedence
.8479	c5 37		cmp $37				cmp 	zTemp0+1
.847b	b0 13		bcs $8490			bcs		_EXPRExit 					; if current >= operator exit
.847d	48		pha				pha 								; save current precedence.
.847e	b1 30		lda ($30),y			lda 	(codePtr),y
.8480	c8		iny				iny
.8481	48		pha				pha
.8482	a5 37		lda $37				lda 	zTemp0+1 					; get operator precedence level
.8484	e8		inx				inx 								; work out the right hand side.
.8485	20 5e 84	jsr $845e			jsr 	EvaluateExpressionAtPrecedence
.8488	ca		dex				dex
.8489	68		pla				pla 								; get operator, call the code.
.848a	20 93 84	jsr $8493			jsr 	_EXPRCaller
.848d	68		pla				pla 								; restore precedence level
.848e	80 d3		bra $8463			bra 	_EXPRLoop 					; and go round.
.8490					_EXPRExit:
.8490	a5 36		lda $36				lda 	zTemp0 						; A = current precedence level.
.8492	60		rts				rts
.8493					_EXPRCaller:
.8493	da		phx				phx 								; save on stack, first thing is to restore it
.8494	0a		asl a				asl 	a 							; double so can use vectors into X
.8495	aa		tax				tax
.8496	7c 14 80	jmp ($8014,x)			jmp 	(VectorSetPunc,x) 			; and go to the code.

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/float/addsub.asm

.8f98					FloatingPointAdd:
.8f98	20 af 90	jsr $90af			jsr 	FloatPrepare 				; prepare for floats
.8f9b	80 0b		bra $8fa8			bra 	FloatAdd
.8f9d					FloatingPointSub:
.8f9d	20 af 90	jsr $90af			jsr 	FloatPrepare 				; prepare for floats
.8fa0					FloatSubtract:
.8fa0	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; negate FPB
.8fa3	49 80		eor #$80			eor 	#$80
.8fa5	9d 01 06	sta $0601,x			sta 	NSStatus+1,x				; and fall through.
.8fa8					FloatAdd:
.8fa8	48		pha				pha
.8fa9	5a		phy				phy
.8faa	20 c0 90	jsr $90c0			jsr 	NSNormalise 				; normalise S[X]
.8fad	f0 54		beq $9003			beq 	_FAReturn1
.8faf	e8		inx				inx 								; normalise S[X+1]
.8fb0	20 c0 90	jsr $90c0			jsr 	NSNormalise
.8fb3	ca		dex				dex
.8fb4	c9 00		cmp #$00			cmp 	#0
.8fb6	f0 6f		beq $9027			beq 	_FAExit 					; if so, just return A
.8fb8	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; are the exponents the same ?
.8fbb	dd 29 06	cmp $0629,x			cmp 	NSExponent+1,x
.8fbe	f0 1b		beq $8fdb			beq 	_FAExponentsEqual
.8fc0	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; work out the larger exponent
.8fc3	a8		tay				tay
.8fc4	38		sec				sec 								; do a signed comparison of the exponents.
.8fc5	fd 29 06	sbc $0629,x			sbc 	NSExponent+1,x
.8fc8	50 02		bvc $8fcc			bvc 	_FANoSignedChange
.8fca	49 80		eor #$80			eor 	#$80
.8fcc					_FANoSignedChange:
.8fcc	29 80		and #$80			and 	#$80
.8fce	10 03		bpl $8fd3			bpl 	_FAHaveMax
.8fd0	bc 29 06	ldy $0629,x			ldy 	NSExponent+1,x
.8fd3					_FAHaveMax:
.8fd3	20 2a 90	jsr $902a			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.8fd6	e8		inx				inx
.8fd7	20 2a 90	jsr $902a			jsr 	_FAShiftToExponent
.8fda	ca		dex				dex
.8fdb					_FAExponentsEqual:
.8fdb	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; are the signs the same
.8fde	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.8fe1	30 10		bmi $8ff3			bmi 	_FADifferentSigns
.8fe3	20 99 82	jsr $8299			jsr 	AddTopTwoStack 				; do the add of the mantissae
.8fe6	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.8fe9	10 3c		bpl $9027			bpl 	_FAExit 					; if no, we are done.
.8feb	20 58 88	jsr $8858			jsr 	NSMShiftRight 				; shift A right, renormalising it.
.8fee	fe 28 06	inc $0628,x			inc 	NSExponent,x 				; bump the exponent and exit
.8ff1	80 34		bra $9027			bra 	_FAExit
.8ff3					_FADifferentSigns:
.8ff3	20 bf 82	jsr $82bf			jsr 	SubTopTwoStack 				; subtract mantissa B from A
.8ff6	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; is the result negative ?
.8ff9	10 2c		bpl $9027			bpl 	_FAExit 					; if no, we are done.
.8ffb	20 e1 87	jsr $87e1			jsr 	NSMNegate 					; netate result
.8ffe	20 ea 87	jsr $87ea			jsr 	NSMNegateMantissa 			; negate (2'c) the mantissa
.9001	80 24		bra $9027			bra 	_FAExit
.9003					_FAReturn1:
.9003	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.9006	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.9009	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.900c	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.900f	bd 19 06	lda $0619,x			lda 	NSMantissa2+1,x
.9012	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.9015	bd 21 06	lda $0621,x			lda 	NSMantissa3+1,x
.9018	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.901b	bd 29 06	lda $0629,x			lda 	NSExponent+1,x
.901e	9d 28 06	sta $0628,x			sta 	NSExponent,x
.9021	bd 01 06	lda $0601,x			lda 	NSStatus+1,x
.9024	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9027					_FAExit:
.9027	7a		ply				ply
.9028	68		pla				pla
.9029	60		rts				rts
.902a					_FAShiftToExponent:
.902a					_FAShiftToExponent2:
.902a	98		tya				tya 								; compare Y to exponent
.902b	dd 28 06	cmp $0628,x			cmp 	NSExponent,x 				; reached the exponent required ?
.902e	f0 08		beq $9038			beq 	_FASEExit 					; exit if so.
.9030	20 58 88	jsr $8858			jsr 	NSMShiftRight	 			; shift the mantissa right
.9033	fe 28 06	inc $0628,x			inc 	NSExponent,x 				; increment exponent
.9036	80 f2		bra $902a			bra 	_FAShiftToExponent2
.9038					_FASEExit:
.9038	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/float/compare.asm

.9039					CompareFloat:
.9039	20 a0 8f	jsr $8fa0			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.903c	bd 10 06	lda $0610,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.903f	29 fc		and #$fc			and 	#$FC
.9041	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.9044	1d 20 06	ora $0620,x			ora 	NSMantissa3,x
.9047	f0 09		beq $9052			beq 	_FCExit 					; zero, so approximately identical
.9049	a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.904b	3c 00 06	bit $0600,x			bit 	NSStatus,x
.904e	10 02		bpl $9052			bpl 	_FCExit
.9050					_FCNegative:
.9050	a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.9052					_FCExit:
.9052	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/float/divide.asm

.9053					FDivideCommand:
.9053	fa		plx				plx	 								; restore stack position
.9054	20 af 90	jsr $90af			jsr 	FloatPrepare 				; prepare for floats
.9057					FloatDivide:
.9057	48		pha				pha
.9058	e8		inx				inx
.9059	20 c0 90	jsr $90c0			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.905c	ca		dex				dex
.905d	c9 00		cmp #$00			cmp 	#0
.905f	f0 20		beq $9081			beq 	_FDZero
.9061	20 c0 90	jsr $90c0			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.9064	f0 19		beq $907f			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.9066	20 94 8e	jsr $8e94			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.9069	20 22 8e	jsr $8e22			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.906c	20 c0 90	jsr $90c0			jsr		NSNormalise 				; renormalise
.906f	20 2f 8f	jsr $8f2f			jsr 	CalculateSign 				; calculate result sign
.9072	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; calculate exponent
.9075	38		sec				sec
.9076	fd 29 06	sbc $0629,x			sbc 	NSExponent+1,x
.9079	38		sec				sec
.907a	e9 1e		sbc #$1e			sbc 	#30
.907c	9d 28 06	sta $0628,x			sta 	NSExponent,x
.907f					_FDExit:
.907f	68		pla				pla
.9080	60		rts				rts
.9081					_FDZero:
.9081	a9 03		lda #$03		lda	#3
.9083	4c b3 81	jmp $81b3		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/float/multiply.asm

.9086					FloatingPointMultiply:
.9086	20 af 90	jsr $90af			jsr 	FloatPrepare 				; prepare for floats
.9089					FloatMultiply:
.9089	48		pha				pha
.908a	20 c0 90	jsr $90c0			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.908d	f0 1b		beq $90aa			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.908f	e8		inx				inx
.9090	20 c0 90	jsr $90c0			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.9093	ca		dex				dex
.9094	c9 00		cmp #$00			cmp 	#0
.9096	f0 0f		beq $90a7			beq 	_FDSetZero
.9098	20 ea 8e	jsr $8eea			jsr 	MultiplyShort 				; calculate the result.
.909b	7d 28 06	adc $0628,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.909e	18		clc				clc
.909f	7d 29 06	adc $0629,x			adc 	NSExponent+1,x
.90a2	9d 28 06	sta $0628,x			sta 	NSExponent,x
.90a5	80 03		bra $90aa			bra 	_FDExit
.90a7					_FDSetZero:
.90a7	20 35 88	jsr $8835			jsr 	NSMSetZero 					; return 0
.90aa					_FDExit:
.90aa	20 c0 90	jsr $90c0			jsr 	NSNormalise 				; normalise the result
.90ad	68		pla				pla
.90ae	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/float/utility.asm

.90af					FloatPrepare:
.90af	20 99 84	jsr $8499			jsr 	DereferenceTopTwo 			; dereference the top two values
.90b2	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check ints/floats
.90b5	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.90b8	29 10		and #$10			and 	#NSBIsString
.90ba	d0 01		bne $90bd			bne 	_FDType
.90bc	60		rts				rts
.90bd					_FDType:
.90bd	4c a7 91	jmp $91a7			jmp 	TypeError
.90c0					NSNormalise:
.90c0	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; make float, keep sign
.90c3	29 80		and #$80			and 	#$80
.90c5	09 08		ora #$08			ora 	#NSTFloat
.90c7	9d 00 06	sta $0600,x			sta 	NSStatus,x
.90ca	20 65 88	jsr $8865			jsr 	NSMIsZero 					; if zero exit
.90cd	d0 09		bne $90d8			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.90cf	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; clear the sign bit.
.90d2	7e 00 06	ror $0600,x			ror 	NSStatus,x 					; (no -0)
.90d5	a9 00		lda #$00			lda 	#0 							; set Z flag
.90d7	60		rts				rts
.90d8					_NSNormaliseOptimise:
.90d8	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; upper byte zero ?
.90db	d0 22		bne $90ff			bne 	_NSNormaliseLoop
.90dd	bd 18 06	lda $0618,x			lda 	NSMantissa2,x 				; byte normalise
.90e0	30 1d		bmi $90ff			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.90e2	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.90e5	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.90e8	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.90eb	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.90ee	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.90f1	9e 08 06	stz $0608,x			stz 	NSMantissa0,x
.90f4	bd 28 06	lda $0628,x			lda 	NSExponent,x
.90f7	38		sec				sec
.90f8	e9 08		sbc #$08			sbc 	#8
.90fa	9d 28 06	sta $0628,x			sta 	NSExponent,x
.90fd	80 d9		bra $90d8			bra 	_NSNormaliseOptimise
.90ff					_NSNormaliseLoop:
.90ff	3c 20 06	bit $0620,x			bit 	NSMantissa3,x 				; bit 30 set ?
.9102	70 08		bvs $910c			bvs 	_NSNExit 					; exit if so with Z flag clear
.9104	20 4a 88	jsr $884a			jsr 	NSMShiftLeft 				; shift mantissa left
.9107	de 28 06	dec $0628,x			dec 	NSExponent,x 				; adjust exponent
.910a	80 f3		bra $90ff			bra 	_NSNormaliseLoop
.910c					_NSNExit:
.910c	a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.910e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/term/dereference.asm

.8499					DereferenceTopTwo:
.8499	e8		inx				inx
.849a	20 9e 84	jsr $849e			jsr 	Dereference 				; deref x+1
.849d	ca		dex				dex  								; falls through to deref x
.849e					Dereference:
.849e	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get the status byte
.84a1	29 20		and #$20			and 	#NSBIsReference 			; shift sign bit to carry, reference to bit 7
.84a3	f0 57		beq $84fc			beq 	_DRFExit 					; not a reference
.84a5	5a		phy				phy
.84a6	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy address to dereference into zTemp0
.84a9	85 36		sta $36				sta 	zTemp0
.84ab	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.84ae	85 37		sta $37				sta 	zTemp0+1
.84b0	9e 10 06	stz $0610,x			stz 	NSMantissa1,x 				; clear second byte.
.84b3	b2 36		lda ($36)			lda 	(zTemp0) 					; do the first byte
.84b5	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.84b8	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get status byte.
.84bb	29 18		and #$18			and 	#NSBTypeMask 				; what type is it ?
.84bd	c9 10		cmp #$10			cmp 	#NSTString 					; if string, dereference two
.84bf	f0 0f		beq $84d0			beq 	_DRFDereferenceTwo
.84c1	c9 08		cmp #$08			cmp 	#NSTFloat 					; if float, do full dereference.
.84c3	f0 39		beq $84fe			beq 	_DRFFull
.84c5	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be integer - how many bytes ?
.84c8	29 03		and #$03			and 	#3
.84ca	f0 32		beq $84fe			beq 	_DRFFull 					; the whole word
.84cc	c9 01		cmp #$01			cmp 	#1 							; is it 10 (e.g. 2 bytes)
.84ce	f0 07		beq $84d7			beq		_DRFClear23 				; no, one byte, clear 2 & 3 and exit
.84d0					_DRFDereferenceTwo:
.84d0	a0 01		ldy #$01			ldy 	#1
.84d2	b1 36		lda ($36),y			lda 	(zTemp0),y
.84d4	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.84d7					_DRFClear23:
.84d7	9e 18 06	stz $0618,x			stz 	NSMantissa2,x 				; clear upper bytes, only read 1 or 2 bytes
.84da	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.84dd	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; make it a value of that type.
.84e0	29 18		and #$18			and 	#NSBTypeMask
.84e2	9d 00 06	sta $0600,x			sta 	NSStatus,x
.84e5	c9 10		cmp #$10			cmp 	#NSTString  				; is it a string
.84e7	d0 12		bne $84fb			bne 	_DRFNotString
.84e9	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; check address is zero
.84ec	1d 10 06	ora $0610,x			ora 	NSMantissa1,x
.84ef	d0 0a		bne $84fb			bne 	_DRFNotString
.84f1	a9 fd		lda #$fd			lda 	#_DRFNullString & $FF 		; if so, return reference to ""
.84f3	9d 08 06	sta $0608,x			sta 	NSMantissa0,X
.84f6	a9 84		lda #$84			lda 	#_DRFNullString >> 8
.84f8	9d 10 06	sta $0610,x			sta 	NSMantissa1,X
.84fb					_DRFNotString
.84fb	7a		ply				ply 								; restore Y and exit
.84fc					_DRFExit:
.84fc	60		rts				rts
.84fd					_DRFNullString:
>84fd	00						.byte 	0
.84fe					_DRFFull:
.84fe	a0 01		ldy #$01			ldy 	#1 							; get remaining 3 bytes.
.8500	b1 36		lda ($36),y			lda 	(zTemp0),y
.8502	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8505	c8		iny				iny
.8506	b1 36		lda ($36),y			lda 	(zTemp0),y
.8508	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.850b	c8		iny				iny
.850c	b1 36		lda ($36),y			lda 	(zTemp0),y
.850e	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8511	9e 28 06	stz $0628,x			stz 	NSExponent,x 				; clear exponent.
.8514	bd 00 06	lda $0600,x			lda		NSStatus,x 					; see if type is integer
.8517	29 18		and #$18			and 	#NSBTypeMask  				; type information only
.8519	9d 00 06	sta $0600,x			sta 	NSStatus,x 					; update it back.
.851c	f0 06		beq $8524			beq 	_DRFNoExponent
.851e	c8		iny				iny 								; if not, read the exponent as well.
.851f	b1 36		lda ($36),y			lda 	(zTemp0),y
.8521	9d 28 06	sta $0628,x			sta 	NSExponent,x
.8524					_DRFNoExponent:
.8524	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; is the most significant bit set ?
.8527	10 0d		bpl $8536			bpl 	_DRFExit2 					; if not, then exit.
.8529	29 7f		and #$7f			and 	#$7F 						; clear that bit.
.852b	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.852e	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; set the sign flag
.8531	09 80		ora #$80			ora 	#NSBIsNegative
.8533	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8536					_DRFExit2:
.8536	7a		ply				ply
.8537	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/term/number.asm

=1					ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2					ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3					ESTA_Decimal = 3 							; fractional part.
.8538					EncodeNumberStart:
.8538	38		sec				sec
.8539	80 01		bra $853c			bra 	EncodeNumberContinue+1
.853b					EncodeNumberContinue:
.853b	18		clc				clc
.853c	08		php				php 								; save reset.
.853d	c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.853f	f0 12		beq $8553			beq 	_ENIsOkay
.8541	c9 30		cmp #$30			cmp 	#"0"
.8543	90 04		bcc $8549			bcc 	_ENBadNumber
.8545	c9 3a		cmp #$3a			cmp 	#"9"+1
.8547	90 0a		bcc $8553			bcc 	_ENIsOkay
.8549					_ENBadNumber:
.8549	28		plp				plp 								; throw saved reset
.854a	ad 05 07	lda $0705			lda 	EncodeState 				; decimal mode, construct final number
.854d	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.854f	f0 73		beq $85c4			beq 	_ENConstructFinal
.8551					_ENFail:
.8551	18		clc				clc 								; not allowed
.8552	60		rts				rts
.8553					_ENIsOkay:
.8553	28		plp				plp 								; are we restarting
.8554	90 0c		bcc $8562			bcc 	_ENNoRestart
.8556					_ENStartEncode:
.8556	29 0f		and #$0f			and 	#15 						; put digit in mantissa
.8558	20 37 88	jsr $8837			jsr 	NSMSetByte
.855b	a9 01		lda #$01			lda 	#ESTA_Low
.855d					_ENExitChange:
.855d	8d 05 07	sta $0705			sta 	EncodeState 				; save new state
.8560	38		sec				sec
.8561	60		rts				rts
.8562					_ENNoRestart:
.8562	48		pha				pha 								; save on stack.
.8563	ad 05 07	lda $0705			lda 	EncodeState 				; get current state
.8566	c9 01		cmp #$01			cmp 	#ESTA_Low
.8568	f0 09		beq $8573			beq  	_ESTALowState
.856a	c9 02		cmp #$02			cmp 	#ESTA_High
.856c	f0 27		beq $8595			beq 	_ESTAHighState
.856e	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.8570	f0 39		beq $85ab			beq 	_ESTADecimalState
>8572	db						.byte 	$DB 						; causes a break in the emulator
.8573					_ESTALowState:
.8573	68		pla				pla 								; get value back
.8574	c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.8576	f0 27		beq $859f			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.8578	29 0f		and #$0f			and 	#15 						; make digit
.857a	85 36		sta $36				sta 	zTemp0 						; save it.
.857c	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.857f	0a		asl a				asl 	a
.8580	0a		asl a				asl 	a
.8581	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.8584	0a		asl a				asl 	a
.8585	65 36		adc $36				adc 	zTemp0
.8587	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.858a	c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.858c	90 05		bcc $8593			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.858e	a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.8590	8d 05 07	sta $0705			sta 	EncodeState
.8593					_ESTANoSwitch:
.8593	38		sec				sec
.8594	60		rts				rts
.8595					_ESTAHighState:
.8595	68		pla				pla 								; get value back
.8596	c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.8598	f0 05		beq $859f			beq 	_ESTASwitchFloat
.859a	20 fe 85	jsr $85fe			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.859d	38		sec				sec
.859e	60		rts				rts
.859f					_ESTASwitchFloat:
.859f	9c 06 07	stz $0706			stz 	DecimalCount
.85a2	e8		inx				inx 								; zero the decimal additive.
.85a3	20 35 88	jsr $8835			jsr 	NSMSetZero
.85a6	ca		dex				dex
.85a7	a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.85a9	80 b2		bra $855d			bra 	_ENExitChange
.85ab					_ESTADecimalState:
.85ab	68		pla				pla 								; digit.
.85ac	c9 2e		cmp #$2e			cmp 	#"." 						; fail on 2nd decimal point.
.85ae	f0 a1		beq $8551			beq 	_ENFail
.85b0	e8		inx				inx 								; put digit into fractional part of X+1
.85b1	20 fe 85	jsr $85fe			jsr 	ESTAShiftDigitIntoMantissa
.85b4	ca		dex				dex
.85b5	ee 06 07	inc $0706			inc 	DecimalCount 				; bump the count of decimals
.85b8	ad 06 07	lda $0706			lda 	DecimalCount
.85bb	c9 0b		cmp #$0b			cmp 	#11
.85bd	f0 02		beq $85c1			beq 	_ESTADSFail
.85bf	38		sec				sec
.85c0	60		rts				rts
.85c1					_ESTADSFail:
.85c1	4c a2 91	jmp $91a2			jmp 	RangeError
.85c4					_ENConstructFinal:
.85c4	ad 06 07	lda $0706			lda 	DecimalCount 				; get decimal count
.85c7	f0 33		beq $85fc			beq 	_ENCFExit 					; no decimals
.85c9	5a		phy				phy
.85ca	0a		asl a				asl 	a 							; x 4 and CLC
.85cb	0a		asl a				asl 	a
.85cc	6d 06 07	adc $0706			adc 	DecimalCount
.85cf	a8		tay				tay
.85d0	b9 61 91	lda $9161,y			lda 	DecimalScalarTable-5,y 		; copy decimal scalar to X+2
.85d3	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.85d6	b9 62 91	lda $9162,y			lda 	DecimalScalarTable-5+1,y
.85d9	9d 12 06	sta $0612,x			sta 	NSMantissa1+2,x
.85dc	b9 63 91	lda $9163,y			lda 	DecimalScalarTable-5+2,y
.85df	9d 1a 06	sta $061a,x			sta 	NSMantissa2+2,x
.85e2	b9 64 91	lda $9164,y			lda 	DecimalScalarTable-5+3,y
.85e5	9d 22 06	sta $0622,x			sta 	NSMantissa3+2,x
.85e8	b9 65 91	lda $9165,y			lda 	DecimalScalarTable-5+4,y
.85eb	9d 2a 06	sta $062a,x			sta 	NSExponent+2,x
.85ee	a9 08		lda #$08			lda 	#NSTFloat
.85f0	9d 02 06	sta $0602,x			sta 	NSStatus+2,x
.85f3	7a		ply				ply
.85f4	e8		inx				inx 								; multiply decimal const by decimal scalar
.85f5	20 89 90	jsr $9089			jsr 	FloatMultiply
.85f8	ca		dex				dex
.85f9	20 a8 8f	jsr $8fa8			jsr 	FloatAdd 					; add to integer part.
.85fc					_ENCFExit:
.85fc	18		clc				clc 								; reject the digit.
.85fd	60		rts				rts
.85fe					ESTAShiftDigitIntoMantissa:
.85fe	29 0f		and #$0f			and 	#15 						; save digit
.8600	48		pha				pha
.8601	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; push mantissa on stack
.8604	48		pha				pha
.8605	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.8608	48		pha				pha
.8609	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.860c	48		pha				pha
.860d	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.8610	48		pha				pha
.8611	20 4a 88	jsr $884a			jsr 	NSMShiftLeft 				; x 2
.8614	20 4a 88	jsr $884a			jsr 	NSMShiftLeft 				; x 4
.8617	18		clc				clc 								; pop mantissa and add
.8618	68		pla				pla
.8619	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.861c	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.861f	68		pla				pla
.8620	7d 10 06	adc $0610,x			adc 	NSMantissa1,x
.8623	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8626	68		pla				pla
.8627	7d 18 06	adc $0618,x			adc 	NSMantissa2,x
.862a	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.862d	68		pla				pla
.862e	7d 20 06	adc $0620,x			adc 	NSMantissa3,x
.8631	9d 20 06	sta $0620,x			sta 	NSMantissa3,x 				; x 5
.8634	20 4a 88	jsr $884a			jsr 	NSMShiftLeft 				; x 10
.8637	68		pla				pla 								; add digit
.8638	18		clc				clc
.8639	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.863c	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.863f	90 0d		bcc $864e			bcc 	_ESTASDExit
.8641	fe 10 06	inc $0610,x			inc 	NSMantissa1,x
.8644	d0 08		bne $864e			bne 	_ESTASDExit
.8646	fe 18 06	inc $0618,x			inc 	NSMantissa2,x
.8649	d0 03		bne $864e			bne 	_ESTASDExit
.864b	fe 20 06	inc $0620,x			inc 	NSMantissa3,x
.864e					_ESTASDExit:
.864e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/term/term.asm

.864f					EvaluateTerm:
.864f	b1 30		lda ($30),y			lda 	(codePtr),y
.8651	30 18		bmi $866b			bmi 	_ETCheckUnary 				; unary function ? (text ones)
.8653	c9 40		cmp #$40			cmp 	#$40 						; 40-7F => identifier reference
.8655	b0 6f		bcs $86c6			bcs 	_ETVariable
.8657	c9 30		cmp #$30			cmp 	#'0' 						; is it a number
.8659	90 6f		bcc $86ca			bcc 	_ETPuncUnary 				; if not it might be a punctuation unary.
.865b	c9 3a		cmp #$3a			cmp 	#'9'+1
.865d	b0 6b		bcs $86ca			bcs 	_ETPuncUnary
.865f	20 38 85	jsr $8538			jsr 	EncodeNumberStart 			; can't fail as it's 0-9 !
.8662					_ETNumber:
.8662	c8		iny				iny 								; keep encoding until we have the numbers
.8663	b1 30		lda ($30),y			lda 	(codePtr),y
.8665	20 3b 85	jsr $853b			jsr 	EncodeNumberContinue
.8668	b0 f8		bcs $8662			bcs 	_ETNumber 					; go back if accepted.
.866a	60		rts				rts
.866b					_ETCheckUnary:
.866b	c9 ff		cmp #$ff			cmp 	#KWC_STRING 				; string token
.866d	f0 41		beq $86b0			beq 	_ETString
.866f	c9 fe		cmp #$fe			cmp 	#KWC_HEXCONST 				; hex constant.
.8671	f0 12		beq $8685			beq 	_ETHexConstant
.8673	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; check it actually is a unary function
.8675	90 0b		bcc $8682			bcc 	_ETSyntaxError
.8677	c9 98		cmp #$98			cmp 	#KWC_LAST_UNARY+1
.8679	b0 07		bcs $8682			bcs 	_ETSyntaxError
.867b	da		phx				phx 								; push X on the stack
.867c	0a		asl a				asl 	a 							; put vector x 2 into X
.867d	aa		tax				tax
.867e	c8		iny				iny 								; consume unary function token
.867f	7c 94 80	jmp ($8094,x)			jmp 	(VectorSet0,x) 				; and do it.
.8682					_ETSyntaxError:
.8682	4c 9d 91	jmp $919d			jmp 	SyntaxError
.8685					_ETHexConstant:
.8685	c8		iny				iny 								; skip #
.8686	c8		iny				iny 								; skip count
.8687	20 35 88	jsr $8835			jsr 	NSMSetZero 					; clear result
.868a					_ETHLoop:
.868a	b1 30		lda ($30),y			lda 	(codePtr),y
.868c	c8		iny				iny 								; and consume
.868d	c9 00		cmp #$00			cmp 	#0 							; exit if zero
.868f	f0 1e		beq $86af			beq 	_ETHExit
.8691	48		pha				pha 								; save on stack.
.8692	20 4a 88	jsr $884a			jsr 	NSMShiftLeft 				; x 2
.8695	20 4a 88	jsr $884a			jsr 	NSMShiftLeft 				; x 4
.8698	20 4a 88	jsr $884a			jsr 	NSMShiftLeft 				; x 8
.869b	20 4a 88	jsr $884a			jsr 	NSMShiftLeft 				; x 16
.869e	68		pla				pla 								; ASCII
.869f	c9 41		cmp #$41			cmp 	#'A'
.86a1	90 02		bcc $86a5			bcc 	_ETHNotChar
.86a3	e9 07		sbc #$07			sbc 	#7
.86a5					_ETHNotChar:
.86a5	29 0f		and #$0f			and 	#15 						; digit now
.86a7	1d 08 06	ora $0608,x			ora 	NSMantissa0,x 				; put in LS Nibble
.86aa	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.86ad	80 db		bra $868a			bra 	_ETHLoop 					; go round.
.86af					_ETHExit:
.86af	60		rts				rts
.86b0					_ETString:
.86b0	c8		iny				iny 								; look at length
.86b1	b1 30		lda ($30),y			lda 	(codePtr),y
.86b3	48		pha				pha
.86b4	c8		iny				iny 								; first character
.86b5	20 ae 88	jsr $88ae			jsr 	MemoryInline 				; put address of string at (codePtr),y on stack
.86b8	68		pla				pla 								; restore count and save
.86b9	85 36		sta $36				sta 	zTemp0
.86bb	98		tya				tya 								; add length to Y to skip it.
.86bc	18		clc				clc
.86bd	65 36		adc $36				adc 	zTemp0
.86bf	a8		tay				tay
.86c0	a9 10		lda #$10			lda 	#NSTString 					; mark as string
.86c2	9d 00 06	sta $0600,x			sta 	NSStatus,x
.86c5	60		rts				rts
.86c6					_ETVariable:
>86c6	db						.byte 	$DB 						; causes a break in the emulator
.86c7	4c ff ff	jmp $ffff			jmp 	$FFFF
.86ca					_ETPuncUnary:
.86ca	c8		iny				iny 								; consume the unary character
.86cb	c9 2d		cmp #$2d			cmp 	#KWD_MINUS 					; unary minus
.86cd	f0 31		beq $8700			beq 	_ETUnaryNegate
.86cf	c9 10		cmp #$10			cmp 	#KWD_AT 					; @ reference -> constant
.86d1	f0 3d		beq $8710			beq 	_ETDereference
.86d3	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; parenthesis
.86d5	f0 58		beq $872f			beq 	_ETParenthesis
.86d7	c9 24		cmp #$24			cmp 	#KWD_DOLLAR
.86d9	f0 43		beq $871e			beq 	_ETStringReference
.86db	64 36		stz $36				stz 	zTemp0 						; zTemp0 is the indirection level.
.86dd	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; byte indirection (0) ?
.86df	f0 06		beq $86e7			beq 	_ETIndirection
.86e1	e6 36		inc $36				inc 	zTemp0
.86e3	c9 21		cmp #$21			cmp 	#KWD_PLING					; word indirection (1) \
.86e5	d0 9b		bne $8682			bne 	_ETSyntaxError
.86e7					_ETIndirection:
.86e7	a5 36		lda $36				lda 	zTemp0 						; push indirection amount (0-1) => (1-2) on the stack
.86e9	1a		inc a				inc 	a
.86ea	48		pha				pha
.86eb	20 4f 86	jsr $864f			jsr 	EvaluateTerm				; evaluate the term
.86ee	20 9e 84	jsr $849e			jsr 	Dereference 				; dereference it.
.86f1	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a +ve integer.
.86f4	d0 07		bne $86fd			bne 	_ETTypeMismatch
.86f6	68		pla				pla 								; indirection 1-2
.86f7	09 20		ora #$20			ora 	#NSBIsReference 			; make it a reference.
.86f9	9d 00 06	sta $0600,x			sta 	NSStatus,x
.86fc	60		rts				rts
.86fd					_ETTypeMismatch:
.86fd	4c a7 91	jmp $91a7			jmp 	TypeError
.8700					_ETUnaryNegate:
.8700	20 4f 86	jsr $864f			jsr 	EvaluateTerm				; evaluate the term
.8703	20 9e 84	jsr $849e			jsr 	Dereference 				; dereference it.
.8706	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a number
.8709	29 10		and #$10			and 	#NSTString
.870b	d0 f0		bne $86fd			bne 	_ETTypeMismatch
.870d	4c e1 87	jmp $87e1			jmp 	NSMNegate  					; just toggles the sign bit.
.8710					_ETDereference:
.8710	20 4f 86	jsr $864f			jsr 	EvaluateTerm				; evaluate the term
.8713	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a reference
.8716	29 20		and #$20			and 	#NSBIsReference
.8718	f0 e3		beq $86fd			beq 	_ETTypeMismatch
.871a	9e 00 06	stz $0600,x			stz 	NSStatus,x 					; make it an integer address
.871d	60		rts				rts
.871e					_ETStringReference:
.871e	20 4f 86	jsr $864f			jsr 	EvaluateTerm				; evaluate the term
.8721	20 9e 84	jsr $849e			jsr 	Dereference 				; dereference it.
.8724	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a +ve integer.
.8727	d0 d4		bne $86fd			bne 	_ETTypeMismatch
.8729	a9 10		lda #$10			lda 	#NSTString 					; make it a string
.872b	9d 00 06	sta $0600,x			sta 	NSStatus,x
.872e	60		rts				rts
.872f					_ETParenthesis:
.872f	20 5c 84	jsr $845c			jsr 	EvaluateExpression 			; evaluate here, from lowest precedence
.8732	20 3b 8d	jsr $8d3b			jsr 	CheckRightBracket 			; check for )
.8735	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/unary/abs.asm

.910f					AbsUnary:
.910f	fa		plx				plx 								; restore stack pos
.9110	20 8c 87	jsr $878c			jsr 	EvaluateNumber 				; get a float or int
.9113	20 3b 8d	jsr $8d3b			jsr 	CheckRightBracket
.9116	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; clear the sign bit
.9119	29 7f		and #$7f			and 	#$7F
.911b	9d 00 06	sta $0600,x			sta 	NSStatus,x
.911e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/unary/asc.asm

.911f					AscUnary:
.911f	fa		plx				plx 								; restore stack pos
.9120	20 97 87	jsr $8797			jsr 	EvaluateString 				; get a string
.9123	b2 36		lda ($36)			lda 	(zTemp0)					; get/return firs character
.9125	20 37 88	jsr $8837			jsr 	NSMSetByte
.9128	20 3b 8d	jsr $8d3b			jsr 	CheckRightBracket
.912b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/unary/len.asm

.912c					LenUnary:
.912c	fa		plx				plx 								; restore stack pos
.912d	20 97 87	jsr $8797			jsr 	EvaluateString 				; get a string
.9130	5a		phy				phy
.9131	a0 00		ldy #$00			ldy 	#0 							; find length
.9133					_LenFind:
.9133	b1 36		lda ($36),y			lda 	(zTemp0),y
.9135	f0 06		beq $913d			beq 	_LenExit
.9137	c8		iny				iny
.9138	d0 f9		bne $9133			bne 	_LenFind
.913a	4c a2 91	jmp $91a2			jmp 	RangeError 					; string > 255
.913d					_LenExit:
.913d	98		tya				tya
.913e	20 37 88	jsr $8837			jsr 	NSMSetByte
.9141	7a		ply				ply
.9142	20 3b 8d	jsr $8d3b			jsr 	CheckRightBracket
.9145	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/unary/rnd.asm

.8736					Unary_Rnd:
.8736	20 8c 87	jsr $878c			jsr 	EvaluateNumber 				; number to use.
.8739	20 3b 8d	jsr $8d3b			jsr 	CheckRightBracket 			; closing bracket
.873c	20 65 87	jsr $8765			jsr 	Random32Bit 				; generate a number.
.873f	ad 07 07	lda $0707			lda 	RandomSeed+0
.8742	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8745	ad 08 07	lda $0708			lda 	RandomSeed+1
.8748	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.874b	ad 09 07	lda $0709			lda 	RandomSeed+2
.874e	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8751	ad 0a 07	lda $070a			lda 	RandomSeed+3
.8754	29 7f		and #$7f			and 	#$7F 						; make legal mantissa
.8756	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8759	a9 e1		lda #$e1			lda 	#-31 						; force into 0-1 range
.875b	8d 28 06	sta $0628			sta 	NSExponent
.875e	a9 08		lda #$08			lda 	#NSTFloat
.8760	8d 00 06	sta $0600			sta 	NSStatus 					; positive.
>8763	db						.byte 	$DB 						; causes a break in the emulator
.8764	60		rts				rts
.8765					Random32Bit:
.8765	5a		phy				phy
.8766	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.8768	ad 07 07	lda $0707			lda 	RandomSeed+0 				; check the seed isn't zero
.876b	d0 03		bne $8770			bne 	_Random1
.876d	a8		tay				tay 								; if so do it 256 times
.876e	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.8770					_Random1:
.8770	0a		asl a				asl 	a 							; LSFR RNG
.8771	2e 08 07	rol $0708			rol 	RandomSeed+1
.8774	2e 09 07	rol $0709			rol 	RandomSeed+2
.8777	2e 0a 07	rol $070a			rol 	RandomSeed+3
.877a	90 02		bcc $877e			bcc 	_Random2
.877c	49 c5		eor #$c5			eor 	#$C5
.877e					_Random2:
.877e	88		dey				dey
.877f	d0 ef		bne $8770			bne 	_Random1
.8781	7a		ply				ply
.8782	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/unary/sgn.asm

.9146					SgnUnary:
.9146	fa		plx				plx 								; restore stack pos
.9147	20 8c 87	jsr $878c			jsr 	EvaluateNumber 				; get a float or int
.914a	20 3b 8d	jsr $8d3b			jsr 	CheckRightBracket
.914d	20 65 88	jsr $8865			jsr 	NSMIsZero 					; if zero
.9150	f0 10		beq $9162			beq 	_SGZero  					; return Int Zero
.9152	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get status w/sign
.9155	48		pha				pha
.9156	a9 01		lda #$01			lda 	#1 							; set to 1
.9158	20 37 88	jsr $8837			jsr 	NSMSetByte
.915b	68		pla				pla
.915c	29 80		and #$80			and		#$80 						; copy the sign byte out
.915e	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9161	60		rts				rts
.9162	20 35 88	jsr $8835	_SGZero:jsr 	NSMSetZero
.9165	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/utility/exprhelper.asm

.8783					EvaluateValue:
.8783	48		pha				pha
.8784	20 5a 84	jsr $845a			jsr		EvaluateExpressionAt0 		; expression
.8787	20 9e 84	jsr $849e			jsr 	Dereference					; derefernce it
.878a	68		pla				pla
.878b	60		rts				rts
.878c					EvaluateNumber:
.878c	20 83 87	jsr $8783			jsr 	EvaluateValue 				; get a value
.878f	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if string.
.8792	29 10		and #$10			and 	#NSBIsString
.8794	d0 16		bne $87ac			bne 	HelperTypeError
.8796	60		rts				rts
.8797					EvaluateString:
.8797	20 83 87	jsr $8783			jsr 	EvaluateValue 				; get a value
.879a	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if string.
.879d	29 10		and #$10			and 	#NSBIsString
.879f	f0 0b		beq $87ac			beq 	HelperTypeError
.87a1					CopyAddressToTemp0:
.87a1	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy address -> zTemp0
.87a4	85 36		sta $36				sta 	zTemp0
.87a6	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.87a9	85 37		sta $37				sta 	zTemp0+1
.87ab	60		rts				rts
.87ac					HelperTypeError:
.87ac	4c a7 91	jmp $91a7			jmp 	TypeError
.87af					EvaluateInteger:
.87af	20 8c 87	jsr $878c			jsr 	EvaluateNumber
.87b2	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check exponent is zero
.87b5	d0 0a		bne $87c1			bne 	HelperValueError 			; if not, it's a float.
.87b7	60		rts				rts
.87b8					EvaluateUnsignedInteger:
.87b8	20 af 87	jsr $87af			jsr 	EvaluateInteger 			; check integer is +ve
.87bb	bd 00 06	lda $0600,x			lda 	NSStatus,x
.87be	30 01		bmi $87c1			bmi 	HelperValueError
.87c0	60		rts				rts
.87c1					HelperValueError:
.87c1	4c ac 91	jmp $91ac			jmp 	ArgumentError
.87c4					Evaluate16BitInteger:
.87c4	20 b8 87	jsr $87b8			jsr	 	EvaluateUnsignedInteger		; get integer
.87c7	bd 20 06	lda $0620,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.87ca	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.87cd	d0 f2		bne $87c1			bne 	HelperValueError
.87cf	60		rts				rts
.87d0					Evaluate8BitInteger:
.87d0	20 b8 87	jsr $87b8			jsr	 	EvaluateUnsignedInteger 	; get an integer
.87d3	d0 ec		bne $87c1			bne 	HelperValueError
.87d5	bd 20 06	lda $0620,x			lda 	NSMantissa3,x	 			; bytes 1, 2 & 3 must be zero
.87d8	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.87db	1d 10 06	ora $0610,x			ora 	NSMantissa1,x
.87de	d0 e1		bne $87c1			bne 	HelperValueError
.87e0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/utility/utility.asm

.87e1					NSMNegate:
.87e1	bd 00 06	lda $0600,x			lda 	NSStatus,x
.87e4	49 80		eor #$80			eor 	#NSBIsNegative
.87e6	9d 00 06	sta $0600,x			sta 	NSStatus,x
.87e9	60		rts				rts
.87ea					NSMNegateMantissa:
.87ea	38		sec				sec
.87eb	a9 00		lda #$00			lda 	#0
.87ed	fd 08 06	sbc $0608,x			sbc 	NSMantissa0,x
.87f0	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.87f3	a9 00		lda #$00			lda 	#0
.87f5	fd 10 06	sbc $0610,x			sbc 	NSMantissa1,x
.87f8	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.87fb	a9 00		lda #$00			lda 	#0
.87fd	fd 18 06	sbc $0618,x			sbc 	NSMantissa2,x
.8800	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8803	a9 00		lda #$00			lda 	#0
.8805	fd 20 06	sbc $0620,x			sbc 	NSMantissa3,x
.8808	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.880b	60		rts				rts
.880c					NSMShiftUpTwo:
.880c	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.880f	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.8812	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8815	9d 12 06	sta $0612,x			sta 	NSMantissa1+2,x
.8818	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.881b	9d 1a 06	sta $061a,x			sta 	NSMantissa2+2,x
.881e	bd 20 06	lda $0620,x			lda 	NSMantissa3,x
.8821	9d 22 06	sta $0622,x			sta 	NSMantissa3+2,x
.8824	bd 28 06	lda $0628,x			lda 	NSExponent,x
.8827	9d 2a 06	sta $062a,x			sta 	NSExponent+2,x
.882a	bd 00 06	lda $0600,x			lda 	NSStatus,x
.882d	9d 02 06	sta $0602,x			sta 	NSStatus+2,x
.8830	60		rts				rts
.8831					NSMSetZeroMantissaOnly:
.8831	a9 00		lda #$00			lda 	#0
.8833	80 08		bra $883d			bra 	NSMSetMantissa
.8835					NSMSetZero:
.8835	a9 00		lda #$00			lda 	#0
.8837					NSMSetByte:
.8837	9e 28 06	stz $0628,x			stz 	NSExponent,x 				; zero exponent, as integer.
.883a	9e 00 06	stz $0600,x			stz 	NSStatus,x 					; status zero (integer)
.883d					NSMSetMantissa:
.883d	9d 08 06	sta $0608,x			sta 	NSMantissa0,x 				; mantissa
.8840	9e 10 06	stz $0610,x			stz 	NSMantissa1,x
.8843	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.8846	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.8849	60		rts				rts
.884a					NSMShiftLeft:
.884a	18		clc				clc
.884b					NSMRotateLeft:
.884b	3e 08 06	rol $0608,x			rol 	NSMantissa0,x
.884e	3e 10 06	rol $0610,x			rol		NSMantissa1,x
.8851	3e 18 06	rol $0618,x			rol		NSMantissa2,x
.8854	3e 20 06	rol $0620,x			rol		NSMantissa3,x
.8857	60		rts				rts
.8858					NSMShiftRight:
.8858	5e 20 06	lsr $0620,x			lsr 	NSMantissa3,x
.885b	7e 18 06	ror $0618,x			ror		NSMantissa2,x
.885e	7e 10 06	ror $0610,x			ror		NSMantissa1,x
.8861	7e 08 06	ror $0608,x			ror		NSMantissa0,x
.8864	60		rts				rts
.8865					NSMIsZero:
.8865	bd 20 06	lda $0620,x			lda 	NSMantissa3,x
.8868	1d 18 06	ora $0618,x			ora		NSMantissa2,x
.886b	1d 10 06	ora $0610,x			ora		NSMantissa1,x
.886e	1d 08 06	ora $0608,x			ora		NSMantissa0,x
.8871	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./generated/constants.asm

.9166					DecimalScalarTable:
>9166	66 66 66 66				.dword $66666666 ; 0.1
>916a	de					.byte $de
>916b	1f 85 eb 51				.dword $51eb851f ; 0.01
>916f	db					.byte $db
>9170	4c 37 89 41				.dword $4189374c ; 0.001
>9174	d8					.byte $d8
>9175	ac 8b db 68				.dword $68db8bac ; 0.0001
>9179	d4					.byte $d4
>917a	24 d6 e2 53				.dword $53e2d624 ; 1e-05
>917e	d1					.byte $d1
>917f	83 de 1b 43				.dword $431bde83 ; 1e-06
>9183	ce					.byte $ce
>9184	6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>9188	ca					.byte $ca
>9189	89 3b e6 55				.dword $55e63b89 ; 1e-08
>918d	c7					.byte $c7
>918e	a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>9192	c4					.byte $c4
>9193	67 7f f3 6d				.dword $6df37f67 ; 1e-10
>9197	c0					.byte $c0
>9198	86 ff f5 57				.dword $57f5ff86 ; 1e-11
>919c	bd					.byte $bd

;******  Return to file: _basic.asm


;******  Processing file: ./generated/errors.asm

.919d					SyntaxError:
.919d	a9 02		lda #$02		lda	#2
.919f	4c b3 81	jmp $81b3		jmp	ErrorHandler
.91a2					RangeError:
.91a2	a9 04		lda #$04		lda	#4
.91a4	4c b3 81	jmp $81b3		jmp	ErrorHandler
.91a7					TypeError:
.91a7	a9 05		lda #$05		lda	#5
.91a9	4c b3 81	jmp $81b3		jmp	ErrorHandler
.91ac					ArgumentError:
.91ac	a9 07		lda #$07		lda	#7
.91ae	4c b3 81	jmp $81b3		jmp	ErrorHandler
.91b1					NotDoneError:
.91b1	a9 0c		lda #$0c		lda	#12
.91b3	4c b3 81	jmp $81b3		jmp	ErrorHandler
.91b6					ErrorText:
>91b6	42 72 65 61 6b 00			.text	"Break",0
>91bc	53 79 6e 74 61 78 20 65			.text	"Syntax error",0
>91c4	72 72 6f 72 00
>91c9	44 69 76 69 73 69 6f 6e			.text	"Division by zero",0
>91d1	20 62 79 20 7a 65 72 6f 00
>91da	4f 75 74 20 6f 66 20 52			.text	"Out of Range",0
>91e2	61 6e 67 65 00
>91e7	54 79 70 65 20 6d 69 73			.text	"Type mismatch",0
>91ef	6d 61 74 63 68 00
>91f5	4f 75 74 20 6f 66 20 6d			.text	"Out of memory",0
>91fd	65 6d 6f 72 79 00
>9203	49 6c 6c 65 67 61 6c 20			.text	"Illegal argument",0
>920b	61 72 67 75 6d 65 6e 74 00
>9214	53 74 6f 70 00				.text	"Stop",0
>9219	53 74 72 69 6e 67 20 74			.text	"String too long",0
>9221	6f 6f 20 6c 6f 6e 67 00
>9229	41 73 73 65 72 74 69 6f			.text	"Assertion failed",0
>9231	6e 20 66 61 69 6c 65 64 00
>923a	4f 75 74 20 6f 66 20 64			.text	"Out of data",0
>9242	61 74 61 00
>9246	55 6e 69 6d 70 6c 65 6d			.text	"Unimplemented",0
>924e	65 6e 74 65 64 00

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/junior/memory.asm

.9254					MemoryPeek:
.9254	b2 36		lda ($36)			lda 	(zTemp0)
.9256	60		rts				rts
.9257					MemoryPoke:
.9257	92 36		sta ($36)			sta 	(zTemp0)
.9259	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/junior/vectors.asm

.925a					EXTPrintCharacter:
.925a	48		pha				pha
.925b	da		phx				phx
.925c	5a		phy				phy
.925d	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.9260	7a		ply				ply
.9261	fa		plx				plx
.9262	68		pla				pla
.9263	60		rts				rts
.9264					EXTInputSingleCharacter:
.9264	da		phx				phx
.9265	5a		phy				phy
.9266					_EISCWait:
.9266	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.9269	c9 00		cmp #$00			cmp 	#0
.926b	f0 f9		beq $9266			beq 	_EISCWait
.926d	7a		ply				ply
.926e	fa		plx				plx
.926f	60		rts				rts
.9270					EXTInputLine:
.9270	a2 00		ldx #$00			ldx 	#0 							; position in line <- start of line
.9272					_ILLoop:
.9272	da		phx				phx 								; read character in
.9273	20 cf ff	jsr $ffcf			jsr 	$FFCF
.9276	fa		plx				plx
.9277	c9 08		cmp #$08			cmp 	#8 							; backspace, CBM doesn't need this.
.9279	f0 12		beq $928d			beq 	_ILBackspace
.927b	c9 0d		cmp #$0d			cmp 	#13							; exit ?
.927d	f0 15		beq $9294			beq 	_ILExit
.927f	c9 20		cmp #$20			cmp 	#32 						; ignore other control
.9281	90 ef		bcc $9272			bcc 	_ILLoop
.9283	e0 50		cpx #$50			cpx 	#MaxLineSize 				; already full buffer
.9285	f0 eb		beq $9272			beq 	_ILLoop
.9287	9d 0b 08	sta $080b,x			sta 	lineBuffer,x 				; save it
.928a	e8		inx				inx
.928b	80 e5		bra $9272			bra 	_ILLoop
.928d					_ILBackspace:
.928d	e0 00		cpx #$00			cpx 	#0  						; can't backspace, start of line.
.928f	f0 e1		beq $9272			beq 	_ILLoop
.9291	ca		dex				dex 								; back one.
.9292	80 de		bra $9272			bra 	_ILLoop
.9294					_ILExit:
.9294	20 5a 92	jsr $925a			jsr 	EXTPrintCharacter
.9297	9e 0b 08	stz $080b,x			stz 	lineBuffer,x 				; make ASCIIZ and exit with address in XA
.929a	60		rts				rts
.929b					EXTBreakCheck:
.929b	4c e1 ff	jmp $ffe1			jmp		$FFE1

;******  Return to file: _basic.asm


;******  Processing file: ./memory.flat/memory.asm

.8872					MemoryNew:
.8872	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.8874	85 30		sta $30				sta 	codePtr
.8876	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.8878	85 31		sta $31				sta 	codePtr+1
.887a	a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.887c	92 30		sta ($30)			sta 	(codePtr)
.887e	60		rts				rts
.887f					MemoryAppend:
.887f	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.8881	85 30		sta $30				sta 	codePtr
.8883	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.8885	85 31		sta $31				sta 	codePtr+1
.8887					_MAFindEnd:
.8887	b2 30		lda ($30)			lda 	(codePtr)
.8889	f0 0d		beq $8898			beq 	_MAFoundEnd
.888b	18		clc				clc
.888c	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.888e	65 30		adc $30				adc 	codePtr
.8890	85 30		sta $30				sta 	codePtr
.8892	90 02		bcc $8896			bcc 	_CREExit
.8894	e6 31		inc $31				inc 	codePtr+1
.8896					_CREExit:
.8896	80 ef		bra $8887			bra 	_MAFindEnd
.8898					_MAFoundEnd:
.8898	ac 0b 07	ldy $070b			ldy 	tokenOffset 				; bytes to copy
.889b	c0 04		cpy #$04			cpy 	#4 							; blank line
.889d	f0 0e		beq $88ad			beq 	_MANoLine
.889f	a9 00		lda #$00			lda 	#0 							; end of program
.88a1	91 30		sta ($30),y			sta 	(codePtr),y
.88a3					_MACopy:
.88a3	88		dey				dey
.88a4	b9 0b 07	lda $070b,y			lda 	tokenOffset,y
.88a7	91 30		sta ($30),y			sta 	(codePtr),y
.88a9	c0 00		cpy #$00			cpy 	#0
.88ab	d0 f6		bne $88a3			bne 	_MACopy
.88ad					_MANoLine:
.88ad	60		rts				rts
.88ae					MemoryInline:
.88ae	98		tya				tya 								; put address into stack,x
.88af	18		clc				clc
.88b0	65 30		adc $30				adc 	codePtr
.88b2	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.88b5	a5 31		lda $31				lda 	codePtr+1
.88b7	69 00		adc #$00			adc 	#0
.88b9	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.88bc	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.88bf	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.88c2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./memory.flat/variable.asm

.88c3					VariableOpen:
.88c3	60		rts				rts
.88c4					VariableClose:
.88c4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./tokeniser/backload.asm

.88c5					BackloadProgram:
.88c5	a2 ff		ldx #$ff			ldx 	#$FF
.88c7	8e fa ff	stx $fffa			stx 	$FFFA 						; fast mode
.88ca	20 ee 88	jsr $88ee			jsr 	BLReadByte
.88cd	30 1e		bmi $88ed			bmi 	_BPExit
.88cf					_BPCopy:
.88cf	e8		inx				inx  								; copy byte in
.88d0	9d 0b 08	sta $080b,x			sta 	lineBuffer,x
.88d3	9e 0c 08	stz $080c,x			stz 	lineBuffer+1,x
.88d6	20 ee 88	jsr $88ee			jsr 	BLReadByte 					; read next byte
.88d9	30 0a		bmi $88e5			bmi 	_BPEndLine 					; -ve = EOL
.88db	c9 09		cmp #$09			cmp 	#9 							; handle TAB
.88dd	d0 02		bne $88e1			bne 	_BPNotTab
.88df	a9 20		lda #$20			lda 	#' '
.88e1					_BPNotTab:
.88e1	c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.88e3	b0 ea		bcs $88cf			bcs 	_BPCopy
.88e5					_BPEndLine:
.88e5	20 b6 8a	jsr $8ab6			jsr 	TokeniseLine 				; tokenise the line.
.88e8	20 7f 88	jsr $887f			jsr 	MemoryAppend 				; append to current program
.88eb	80 d8		bra $88c5			bra 	BackloadProgram
.88ed					_BPExit:
.88ed	60		rts				rts
.88ee					BLReadByte:
.88ee					_BLLoad:
.88ee	ad 00 30	lda $3000			lda 	$3000 						; hardcoded in the makefile.
.88f1	ee ef 88	inc $88ef			inc 	_BLLoad+1
.88f4	d0 03		bne $88f9			bne 	_BLNoCarry
.88f6	ee f0 88	inc $88f0			inc 	_BLLoad+2
.88f9					_BLNoCarry:
.88f9	c9 00		cmp #$00			cmp 	#0
.88fb	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./tokeniser/searchtokens.asm

.88fc					TokeniseSearchTable:
.88fc	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token.
.88fe	85 36		sta $36				sta 	zTemp0
.8900	a0 00		ldy #$00			ldy 	#0
.8902	a9 80		lda #$80			lda 	#$80 						; token #
.8904	85 38		sta $38				sta 	zTemp1
.8906					_TSTLoop:
.8906	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.8908	30 49		bmi $8953			bmi 	_TSTFail 					; -ve = end of table
.890a	f0 2e		beq $893a			beq 	_TSTNext 					; zero, check next it's a dummy
.890c	c8		iny				iny 								; get the hash
.890d	b1 36		lda ($36),y			lda 	(zTemp0),y
.890f	88		dey				dey
.8910	cd 03 07	cmp $0703			cmp 	identHash 					; check they match, if not go to next
.8913	d0 25		bne $893a			bne 	_TSTNext
.8915	ad 02 07	lda $0702			lda 	identTypeEnd 				; length of identifier
.8918	38		sec				sec
.8919	ed 00 07	sbc $0700			sbc 	identStart
.891c	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; no match, then return.
.891e	d0 1a		bne $893a			bne 	_TSTNext
.8920	5a		phy				phy 								; save Y , we might fail
.8921	c8		iny				iny 								; point to text
.8922	c8		iny				iny
.8923	ae 00 07	ldx $0700			ldx 	identStart 					; offset in line buffer in X
.8926					_TSTCompareName:
.8926	bd 0b 08	lda $080b,x			lda 	lineBuffer,x 				; compare text.
.8929	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.892b	d0 0c		bne $8939			bne 	_TSTNextPullY 				; fail, pullY and do next
.892d	e8		inx				inx
.892e	c8		iny				iny
.892f	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; complete match.
.8932	d0 f2		bne $8926			bne 	_TSTCompareName
.8934	7a		ply				ply 								; throw Y
.8935	a5 38		lda $38				lda 	zTemp1 						; get token #
.8937	38		sec				sec 								; return with CS = passed.
.8938	60		rts				rts
.8939					_TSTNextPullY:
.8939	7a		ply				ply 								; restore current, fall through.
.893a					_TSTNext:
.893a	e6 38		inc $38				inc 	zTemp1 						; token counter
.893c	98		tya				tya
.893d	18		clc				clc
.893e	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.8940	1a		inc a				inc 	a 							; +1
.8941	1a		inc a				inc 	a 							; +2
.8942	a8		tay				tay
.8943	10 c1		bpl $8906			bpl 	_TSTLoop 					; if Y < $80 loop back
.8945	98		tya				tya 								; add Y to zTemp0 and reset Y
.8946	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.8948	18		clc				clc  								; but have tables > 255 bytes
.8949	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.894b	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.894d	90 b7		bcc $8906			bcc 	_TSTLoop
.894f	e6 37		inc $37				inc 	zTemp0+1
.8951	80 b3		bra $8906			bra 	_TSTLoop
.8953					_TSTFail:
.8953	18		clc				clc
.8954	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./tokeniser/tokenise.asm


;******  Processing file: ./tokeniser/../generated/kwdtext.dat

.8955					KeywordSet0:
>8955	00 65					.text	0,$65,""               ; $80 !0:EOF
>8957	00 58					.text	0,$58,""               ; $81 !1:SH1
>8959	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>895b	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $83 ABS(
>8961	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $84 ALLOC(
>8969	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $85 ASC(
>896f	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $86 CHR$(
>8976	04 f4 44 45 43 28			.text	4,$f4,"DEC("           ; $87 DEC(
>897c	05 6b 46 41 4c 53 45			.text	5,$6b,"FALSE"          ; $88 FALSE
>8983	05 44 46 52 41 43 28			.text	5,$44,"FRAC("          ; $89 FRAC(
>898a	05 31 48 45 58 24 28			.text	5,$31,"HEX$("          ; $8a HEX$(
>8991	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $8b INT(
>8997	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $8c ISVAL(
>899f	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $8d LEFT$(
>89a7	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $8e LEN(
>89ad	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $8f MID$(
>89b4	03 f1 4e 4f 54				.text	3,$f1,"NOT"            ; $90 NOT
>89b9	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $91 RIGHT$(
>89c1	28
>89c2	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $92 RND(
>89c8	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $93 SGN(
>89ce	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $94 SPC(
>89d4	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $95 STR$(
>89db	04 40 54 52 55 45			.text	4,$40,"TRUE"           ; $96 TRUE
>89e1	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $97 VAL(
>89e7	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $98 FOR
>89ec	02 8f 49 46				.text	2,$8f,"IF"             ; $99 IF
>89f0	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $9a PROC
>89f6	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $9b REPEAT
>89fe	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $9c WHILE
>8a05	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $9d ENDIF
>8a0c	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $9e ENDPROC
>8a14	43
>8a15	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $9f NEXT
>8a1b	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $a0 UNTIL
>8a22	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $a1 WEND
>8a28	04 1c 43 41 4c 4c			.text	4,$1c,"CALL"           ; $a2 CALL
>8a2e	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $a3 CLS
>8a33	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $a4 DATA
>8a39	03 da 44 49 4d				.text	3,$da,"DIM"            ; $a5 DIM
>8a3e	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $a6 GOSUB
>8a45	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $a7 GOTO
>8a4b	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $a8 LET
>8a50	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $a9 PRINT
>8a57	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $aa READ
>8a5d	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $ab REM
>8a62	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $ac RETURN
>8a6a	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $ad THEN
>8a70	02 a3 54 4f				.text	2,$a3,"TO"             ; $ae TO
>8a74	ff					.text	$FF
.8a75					KeywordSet1:
>8a75	00 65					.text	0,$65,""               ; $80 !0:EOF
>8a77	00 58					.text	0,$58,""               ; $81 !1:SH1
>8a79	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>8a7b	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $83 ASSERT
>8a83	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $84 CLEAR
>8a8a	03 d7 45 4e 44				.text	3,$d7,"END"            ; $85 END
>8a8f	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $86 LIST
>8a95	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $87 NEW
>8a9a	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $88 RESTORE
>8aa2	45
>8aa3	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $89 RUN
>8aa8	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $8a STOP
>8aae	ff					.text	$FF
.8aaf					KeywordSet2:
>8aaf	00 65					.text	0,$65,""               ; $80 !0:EOF
>8ab1	00 58					.text	0,$58,""               ; $81 !1:SH1
>8ab3	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>8ab5	ff					.text	$FF

;******  Return to file: ./tokeniser/tokenise.asm

.8ab6					TokeniseLine:
.8ab6	20 3e 8c	jsr $8c3e			jsr 	FixLineBufferCase 			; fix line case
.8ab9	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.8abb	8d 0b 07	sta $070b			sta 	tokenOffset
.8abe	9c 0c 07	stz $070c			stz 	tokenLineNumber
.8ac1	9c 0d 07	stz $070d			stz 	tokenLineNumber+1
.8ac4	a2 ff		ldx #$ff			ldx 	#$FF
.8ac6					_TKFindFirst:
.8ac6	e8		inx				inx
.8ac7	bd 0b 08	lda $080b,x			lda 	lineBuffer,x
.8aca	f0 79		beq $8b45			beq 	_TKExit
.8acc	c9 20		cmp #$20			cmp 	#' '
.8ace	90 f6		bcc $8ac6			bcc 	_TKFindFirst
.8ad0	c9 30		cmp #$30			cmp 	#'0'
.8ad2	90 07		bcc $8adb			bcc 	_TKNoLineNumber
.8ad4	c9 3a		cmp #$3a			cmp 	#'9'+1
.8ad6	b0 03		bcs $8adb			bcs 	_TKNoLineNumber
.8ad8	20 68 8c	jsr $8c68			jsr 	TokeniseExtractLineNumber
.8adb					_TKNoLineNumber:
.8adb					_TKTokeniseLoop:
.8adb	bd 0b 08	lda $080b,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.8ade	f0 65		beq $8b45			beq 	_TKExit
.8ae0	e8		inx				inx
.8ae1	c9 20		cmp #$20			cmp 	#' '
.8ae3	f0 f6		beq $8adb			beq 	_TKTokeniseLoop 			; keep looping if space found.
.8ae5	ca		dex				dex 								; undo last get, A contains character, X is position.
.8ae6	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.8ae8	f0 61		beq $8b4b			beq 	_TKTokeniseIdentifier
.8aea	c9 41		cmp #$41			cmp 	#'A'
.8aec	90 04		bcc $8af2			bcc 	_TKTokenisePunctuation
.8aee	c9 5b		cmp #$5b			cmp 	#'Z'+1
.8af0	90 59		bcc $8b4b			bcc 	_TKTokeniseIdentifier
.8af2					_TKTokenisePunctuation:
.8af2	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.8af4	f0 27		beq $8b1d			beq 	_TKString
.8af6	c9 23		cmp #$23			cmp 	#'#'						; hexadecimal constant (# only appears at end of identifiers)
.8af8	f0 28		beq $8b22			beq 	_TKHexConstant
.8afa	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers.
.8afc	f0 29		beq $8b27			beq 	_TKCheckDouble
.8afe	c9 3e		cmp #$3e			cmp 	#'>'
.8b00	f0 25		beq $8b27			beq 	_TKCheckDouble
.8b02					_TKStandardPunctuation:
.8b02	bd 0b 08	lda $080b,x			lda 	lineBuffer,x 				; get it back.
.8b05	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.8b07	90 0e		bcc $8b17			bcc 	_TKNoShift
.8b09	48		pha				pha 								; save
.8b0a	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.8b0c	85 36		sta $36				sta 	zTemp0
.8b0e	68		pla				pla
.8b0f	29 20		and #$20			and 	#32 						; bit 5
.8b11	4a		lsr a				lsr 	a 							; shift into bit 3
.8b12	4a		lsr a				lsr 	a
.8b13	05 36		ora $36				ora 	zTemp0
.8b15	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.8b17					_TKNoShift:
.8b17	20 ad 8c	jsr $8cad			jsr 	TokeniseWriteByte 			; write the punctuation character
.8b1a	e8		inx				inx 								; consume the character
.8b1b	80 be		bra $8adb			bra 	_TKTokeniseLoop 			; and loop round again.
.8b1d					_TKString:
.8b1d	20 cd 8b	jsr $8bcd			jsr 	TokeniseString
.8b20	80 b9		bra $8adb			bra 	_TKTokeniseLoop
.8b22					_TKHexConstant:
.8b22	20 08 8c	jsr $8c08			jsr 	TokeniseHexConstant
.8b25	80 b4		bra $8adb			bra 	_TKTokeniseLoop
.8b27					_TKCheckDouble:
.8b27	bd 0c 08	lda $080c,x			lda 	lineBuffer+1,x 				; get next character
.8b2a	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.8b2c	90 d4		bcc $8b02			bcc 	_TKStandardPunctuation
.8b2e	c9 3f		cmp #$3f			cmp 	#'>'+1
.8b30	b0 d0		bcs $8b02			bcs 	_TKStandardPunctuation
.8b32	bd 0b 08	lda $080b,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.8b35	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.8b37	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.8b38	7d 0c 08	adc $080c,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.8b3b	38		sec				sec
.8b3c	e9 3c		sbc #$3c			sbc 	#'<'
.8b3e	20 ad 8c	jsr $8cad			jsr 	TokeniseWriteByte 			; this is in the range 0-7
.8b41	e8		inx				inx 								; consume both
.8b42	e8		inx				inx
.8b43	80 96		bra $8adb			bra 	_TKTokeniseLoop
.8b45	a9 80		lda #$80	_TKExit:lda 	#KWC_EOL 					; write end of line byte
.8b47	20 ad 8c	jsr $8cad			jsr 	TokeniseWriteByte
.8b4a	60		rts				rts
.8b4b					_TKTokeniseIdentifier:
.8b4b	8e 00 07	stx $0700			stx 	identStart 					; save start
.8b4e	9c 04 07	stz $0704			stz 	identTypeByte 				; zero the type byte
.8b51					_TKCheckLoop:
.8b51	e8		inx				inx 								; look at next, we know first is identifier.
.8b52	bd 0b 08	lda $080b,x			lda  	lineBuffer,x
.8b55	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.8b57	f0 f8		beq $8b51			beq 	_TKCheckLoop
.8b59	c9 30		cmp #$30			cmp	 	#"0"
.8b5b	90 0c		bcc $8b69			bcc 	_TKEndIdentifier
.8b5d	c9 3a		cmp #$3a			cmp 	#"9"+1
.8b5f	90 f0		bcc $8b51			bcc 	_TKCheckLoop
.8b61	c9 41		cmp #$41			cmp	 	#"A"
.8b63	90 04		bcc $8b69			bcc 	_TKEndIdentifier
.8b65	c9 5b		cmp #$5b			cmp 	#"Z"+1
.8b67	90 e8		bcc $8b51			bcc 	_TKCheckLoop
.8b69					_TKEndIdentifier:
.8b69	8e 01 07	stx $0701			stx 	identTypeStart 				; save start of type text (if any !)
.8b6c	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.8b6e	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.8b70	f0 06		beq $8b78			beq 	_TKHasTypeCharacter
.8b72	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.8b74	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.8b76	d0 07		bne $8b7f			bne 	_TKNoTypeCharacter
.8b78					_TKHasTypeCharacter:
.8b78	8c 04 07	sty $0704			sty 	identTypeByte 				; has # or $, save the type
.8b7b	e8		inx				inx 								; read next
.8b7c	bd 0b 08	lda $080b,x			lda 	lineBuffer,x
.8b7f					_TKNoTypeCharacter:
.8b7f	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.8b81	d0 09		bne $8b8c			bne 	_TKNoArray
.8b83	e8		inx				inx 								; skip the (
.8b84	ad 04 07	lda $0704			lda 	identTypeByte 				; set bit 2 (e.g. array)
.8b87	09 04		ora #$04			ora 	#$04
.8b89	8d 04 07	sta $0704			sta 	identTypeByte
.8b8c					_TKNoArray:
.8b8c	8e 02 07	stx $0702			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.8b8f	20 29 8c	jsr $8c29			jsr 	TokeniseCalculateHash 		; calculate the has for those tokens
.8b92	a0 89		ldy #$89			ldy 	#(KeywordSet0) >> 8
.8b94	a9 55		lda #$55			lda 	#(KeywordSet0) & $FF
.8b96	20 fc 88	jsr $88fc			jsr 	TokeniseSearchTable
.8b99	a2 00		ldx #$00			ldx 	#0
.8b9b	b0 1f		bcs $8bbc			bcs 	_TKFoundToken
.8b9d	a0 8a		ldy #$8a			ldy 	#(KeywordSet1) >> 8
.8b9f	a9 75		lda #$75			lda 	#(KeywordSet1) & $FF
.8ba1	20 fc 88	jsr $88fc			jsr 	TokeniseSearchTable
.8ba4	a2 81		ldx #$81			ldx 	#$81
.8ba6	b0 14		bcs $8bbc			bcs 	_TKFoundToken
.8ba8	a0 8a		ldy #$8a			ldy 	#(KeywordSet1) >> 8
.8baa	a9 75		lda #$75			lda 	#(KeywordSet1) & $FF
.8bac	20 fc 88	jsr $88fc			jsr 	TokeniseSearchTable
.8baf	a2 82		ldx #$82			ldx 	#$82
.8bb1	b0 09		bcs $8bbc			bcs 	_TKFoundToken
.8bb3	20 b9 8c	jsr $8cb9			jsr 	CheckCreateVariableRecord 	; failed all, it's a variable, create record if does not exist.
.8bb6	ae 02 07	ldx $0702			ldx 	identTypeEnd 				; X points to following byte
.8bb9	4c db 8a	jmp $8adb			jmp 	_TKTokeniseLoop 			; and go round again.
.8bbc					_TKFoundToken:
.8bbc	48		pha				pha 								; save token
.8bbd	8a		txa				txa 								; shift in X, is there one ?
.8bbe	f0 03		beq $8bc3			beq 	_TKNoTShift
.8bc0	20 ad 8c	jsr $8cad			jsr 	TokeniseWriteByte 			; if so, write it out
.8bc3					_TKNoTShift:
.8bc3	68		pla				pla 								; restore and write token
.8bc4	20 ad 8c	jsr $8cad			jsr 	TokeniseWriteByte
.8bc7	ae 02 07	ldx $0702			ldx 	identTypeEnd 				; X points to following byte
.8bca	4c db 8a	jmp $8adb			jmp 	_TKTokeniseLoop 			; and go round again.
.8bcd					TokeniseString:
.8bcd	a9 ff		lda #$ff			lda 	#KWC_STRING 				; string token.
.8bcf	20 ad 8c	jsr $8cad			jsr 	TokeniseWriteByte
.8bd2	e8		inx				inx									; start of quoted string.
.8bd3	da		phx				phx 								; push start of string on top
.8bd4	ca		dex				dex
.8bd5					_TSFindEnd:
.8bd5	e8		inx				inx
.8bd6	bd 0b 08	lda $080b,x			lda 	lineBuffer,x 				; next character
.8bd9	f0 04		beq $8bdf			beq 	_TSEndOfString
.8bdb	c9 22		cmp #$22			cmp 	#'"'
.8bdd	d0 f6		bne $8bd5			bne 	_TSFindEnd
.8bdf					_TSEndOfString:
.8bdf	7a		ply				ply  								; so now Y is first character, X is character after end.
.8be0	48		pha				pha 								; save terminating character
.8be1	20 e9 8b	jsr $8be9			jsr 	TOWriteBlockXY 				; write X to Y as a data block
.8be4	68		pla				pla 								; terminating character
.8be5	f0 01		beq $8be8			beq 	_TSNotQuote					; if it wasn't EOS skip it
.8be7	e8		inx				inx
.8be8					_TSNotQuote:
.8be8	60		rts				rts
.8be9					TOWriteBlockXY:
.8be9	86 36		stx $36				stx 	zTemp0 						; write end character
.8beb	98		tya				tya
.8bec	49 ff		eor #$ff			eor 	#$FF
.8bee	38		sec				sec
.8bef	65 36		adc $36				adc 	zTemp0
.8bf1	1a		inc a				inc 	a 							; one extra for NULL
.8bf2	20 ad 8c	jsr $8cad			jsr 	TokeniseWriteByte
.8bf5					_TOBlockLoop:
.8bf5	c4 36		cpy $36				cpy 	zTemp0
.8bf7	f0 09		beq $8c02			beq 	_TOBlockExit
.8bf9	b9 0b 08	lda $080b,y			lda 	lineBuffer,y
.8bfc	20 ad 8c	jsr $8cad			jsr 	TokeniseWriteByte
.8bff	c8		iny				iny
.8c00	80 f3		bra $8bf5			bra 	_TOBlockLoop
.8c02					_TOBlockExit:
.8c02	a9 00		lda #$00			lda 	#0
.8c04	20 ad 8c	jsr $8cad			jsr 	TokeniseWriteByte
.8c07	60		rts				rts
.8c08					TokeniseHexConstant:
.8c08	a9 fe		lda #$fe			lda 	#KWC_HEXCONST 				; hex constant token.
.8c0a	20 ad 8c	jsr $8cad			jsr 	TokeniseWriteByte
.8c0d	e8		inx				inx									; start of quoted string.
.8c0e	da		phx				phx 								; push start of constant on top
.8c0f	ca		dex				dex
.8c10					_THFindLoop:
.8c10	e8		inx				inx
.8c11	bd 0b 08	lda $080b,x			lda 	lineBuffer,x
.8c14	c9 30		cmp #$30			cmp 	#"0"
.8c16	90 0c		bcc $8c24			bcc 	_THFoundEnd
.8c18	c9 3a		cmp #$3a			cmp 	#"9"+1
.8c1a	90 f4		bcc $8c10			bcc 	_THFindLoop
.8c1c	c9 41		cmp #$41			cmp 	#"A"
.8c1e	90 04		bcc $8c24			bcc 	_THFoundEnd
.8c20	c9 47		cmp #$47			cmp 	#"F"+1
.8c22	90 ec		bcc $8c10			bcc 	_THFindLoop
.8c24					_THFoundEnd:
.8c24	7a		ply				ply 								; restore start
.8c25	20 e9 8b	jsr $8be9			jsr 	TOWriteBlockXY 				; output the block
.8c28	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./tokeniser/utility.asm

.8c29					TokeniseCalculateHash:
.8c29	da		phx				phx
.8c2a	ae 00 07	ldx $0700			ldx 	identStart 					; needs to be same as in tokens.py - simple sum
.8c2d	a9 00		lda #$00			lda 	#0
.8c2f					_TCHLoop:
.8c2f	18		clc				clc
.8c30	7d 0b 08	adc $080b,x			adc 	lineBuffer,x
.8c33	e8		inx				inx
.8c34	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.8c37	d0 f6		bne $8c2f			bne 	_TCHLoop
.8c39	8d 03 07	sta $0703			sta 	identHash 					; save the hash
.8c3c	fa		plx				plx
.8c3d	60		rts				rts
.8c3e					FixLineBufferCase:
.8c3e	a2 00		ldx #$00			ldx 	#0
.8c40					_FLBCLoop:
.8c40	bd 0b 08	lda $080b,x			lda 	lineBuffer,x 				; get next character
.8c43	f0 22		beq $8c67			beq 	_FLBCExit 					; end of string.
.8c45	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.8c47	f0 11		beq $8c5a			beq 	_FLBCInQuotes
.8c49	e8		inx				inx
.8c4a	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.8c4c	90 f2		bcc $8c40			bcc 	_FLBCLoop
.8c4e	c9 7b		cmp #$7b			cmp 	#'z'+1
.8c50	b0 ee		bcs $8c40			bcs 	_FLBCLoop
.8c52	38		sec				sec 								; make U/C
.8c53	e9 20		sbc #$20			sbc 	#32
.8c55	9d 0a 08	sta $080a,x			sta	 	lineBuffer-1,x 				; write back
.8c58	80 e6		bra $8c40			bra 	_FLBCLoop
.8c5a					_FLBCInQuotes:
.8c5a	e8		inx				inx 								; advance
.8c5b	bd 0b 08	lda $080b,x			lda 	lineBuffer,x 				; get next
.8c5e	f0 07		beq $8c67			beq 	_FLBCExit 					; exit on EOS
.8c60	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.8c62	d0 f6		bne $8c5a			bne 	_FLBCInQuotes
.8c64	e8		inx				inx 								; skip over it
.8c65	80 d9		bra $8c40			bra 	_FLBCLoop
.8c67					_FLBCExit:
.8c67	60		rts				rts
.8c68					TokeniseExtractLineNumber:
.8c68	ad 0d 07	lda $070d			lda 	tokenLineNumber+1 			; push current value on stack
.8c6b	48		pha				pha
.8c6c	ad 0c 07	lda $070c			lda 	tokenLineNumber
.8c6f	48		pha				pha
.8c70	20 a6 8c	jsr $8ca6			jsr 	_TELNTimes2 				; line # x 4
.8c73	20 a6 8c	jsr $8ca6			jsr 	_TELNTimes2 				; line # x 2
.8c76	18		clc				clc 								; add stacked value
.8c77	68		pla				pla
.8c78	6d 0c 07	adc $070c			adc 	tokenLineNumber
.8c7b	8d 0c 07	sta $070c			sta 	tokenLineNumber
.8c7e	68		pla				pla
.8c7f	6d 0d 07	adc $070d			adc 	tokenLineNumber+1
.8c82	8d 0d 07	sta $070d			sta 	tokenLineNumber+1 			; line # x 5
.8c85	20 a6 8c	jsr $8ca6			jsr 	_TELNTimes2 				; line # x 10
.8c88	bd 0b 08	lda $080b,x			lda 	lineBuffer,x 				; get and consume character
.8c8b	e8		inx				inx
.8c8c	29 0f		and #$0f			and 	#15 						; add to line #
.8c8e	18		clc				clc
.8c8f	6d 0c 07	adc $070c			adc 	tokenLineNumber
.8c92	8d 0c 07	sta $070c			sta 	tokenLineNumber
.8c95	90 03		bcc $8c9a			bcc 	_TLENNoCarry
.8c97	ee 0d 07	inc $070d			inc 	tokenLineNumber+1
.8c9a					_TLENNoCarry:
.8c9a	bd 0b 08	lda $080b,x			lda 	lineBuffer,x 				; more digits ?
.8c9d	c9 30		cmp #$30			cmp 	#'0'
.8c9f	90 04		bcc $8ca5			bcc 	_TLENExit
.8ca1	c9 3a		cmp #$3a			cmp 	#'9'+1
.8ca3	90 c3		bcc $8c68			bcc 	TokeniseExtractLineNumber
.8ca5					_TLENExit:
.8ca5	60		rts				rts
.8ca6					_TELNTimes2:
.8ca6	0e 0c 07	asl $070c			asl 	tokenLineNumber
.8ca9	2e 0d 07	rol $070d			rol 	tokenLineNumber+1
.8cac	60		rts				rts
.8cad					TokeniseWriteByte:
.8cad	da		phx				phx
.8cae	ae 0b 07	ldx $070b			ldx 	tokenOffset 				; next slot to write to
.8cb1	9d 0b 07	sta $070b,x			sta 	tokenOffset,x 				; write byte out
.8cb4	ee 0b 07	inc $070b			inc 	tokenOffset 				; advance slot.
.8cb7	fa		plx				plx
.8cb8	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./tokeniser/variablerecord.asm

.8cb9					CheckCreateVariableRecord:
.8cb9	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.8cbb	85 36		sta $36				sta 	0+zTemp0
.8cbd	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.8cbf	85 37		sta $37				sta 	1+zTemp0
.8cc1	20 c3 88	jsr $88c3			jsr 	VariableOpen 				; make variable space available
.8cc4					_CCVSearch:
.8cc4	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.8cc6	f0 2c		beq $8cf4			beq 	_CCVFail
.8cc8	a0 01		ldy #$01			ldy 	#1 							; read the hash
.8cca	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.8ccc	cd 03 07	cmp $0703			cmp 	identHash
.8ccf	d0 16		bne $8ce7			bne 	_CCVNext
.8cd1	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.8cd3	ae 00 07	ldx $0700			ldx 	identStart
.8cd6					_CCVCompare:
.8cd6	bd 0b 08	lda $080b,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.8cd9	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.8cdb	e8		inx				inx 								; advance pointers
.8cdc	c8		iny				iny
.8cdd	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.8cde	d0 07		bne $8ce7			bne 	_CCVNext  					; didn't match go to next.
.8ce0	90 f4		bcc $8cd6			bcc 	_CCVCompare 				; not finished yet.
.8ce2	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; matched whole thing ?
.8ce5	f0 41		beq $8d28			beq 	_CCVFound 					; yes, we were successful
.8ce7					_CCVNext:
.8ce7	18		clc				clc
.8ce8	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.8cea	65 36		adc $36				adc 	zTemp0
.8cec	85 36		sta $36				sta 	zTemp0
.8cee	90 d4		bcc $8cc4			bcc 	_CCVSearch
.8cf0	e6 37		inc $37				inc 	zTemp0+1
.8cf2	80 d0		bra $8cc4			bra 	_CCVSearch
.8cf4					_CCVFail:
.8cf4	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.8cf6	ad 03 07	lda $0703			lda 	identHash
.8cf9	91 36		sta ($36),y			sta 	(zTemp0),y
.8cfb	c8		iny				iny 								; offset 2 is the type byte
.8cfc	ad 04 07	lda $0704			lda 	identTypeByte
.8cff	91 36		sta ($36),y			sta 	(zTemp0),y
.8d01	c8		iny				iny
.8d02					_CCVData:
.8d02	a9 00		lda #$00			lda 	#0 							; erase data 3-7
.8d04	91 36		sta ($36),y			sta 	(zTemp0),y
.8d06	c8		iny				iny
.8d07	c0 08		cpy #$08			cpy 	#8
.8d09	90 f7		bcc $8d02			bcc 	_CCVData
.8d0b	ae 00 07	ldx $0700			ldx 	identStart 					; copy name into 8 on.
.8d0e					_CCVCopyName:
.8d0e	bd 0b 08	lda $080b,x			lda 	lineBuffer,x
.8d11	91 36		sta ($36),y			sta 	(zTemp0),y
.8d13	e8		inx				inx
.8d14	c8		iny				iny
.8d15	ec 02 07	cpx $0702			cpx 	identTypeEnd
.8d18	d0 f4		bne $8d0e			bne 	_CCVCopyName
.8d1a	98		tya				tya 								; patch offset
.8d1b	92 36		sta ($36)			sta 	(zTemp0)
.8d1d	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.8d1f	91 36		sta ($36),y			sta 	(zTemp0),y
.8d21	88		dey				dey
.8d22	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.8d24	09 80		ora #$80			ora 	#$80
.8d26	91 36		sta ($36),y			sta 	(zTemp0),y
.8d28					_CCVFound:
.8d28	20 c4 88	jsr $88c4			jsr 	VariableClose 				; map out variables, perhaps.
.8d2b	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.8d2d	38		sec				sec
.8d2e	e9 10		sbc #$10			sbc 	#(VariableSpace >> 8) 		; offset from the start
.8d30	09 40		ora #$40			ora 	#$40 						; make it a writeable token
.8d32	20 ad 8c	jsr $8cad			jsr 	TokeniseWriteByte
.8d35	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.8d37	20 ad 8c	jsr $8cad			jsr 	TokeniseWriteByte
.8d3a	60		rts				rts

;******  Return to file: _basic.asm


;******  End of listing
