
; 64tass Turbo Assembler Macro V1.58.2974? listing file
; 64tass -D AUTORUN=0 "-D MONITOR_ADDRESS=\$E000" "-D LOCKOUT_ADDRESS=\$F000" "-D BASIC_ADDRESS=\$34000" "-D SOURCE_ADDRESS=\$28000" "-D SPRITE_ADDRESS=\$30000" "-D LTILEMAP_ADDRESS=\$24000" "-D LTILEIMAGES_ADDRESS=\$26000" -q -b -Wall -c -C -D "HARDWARE=0 $'\x9'$'\x9'$'\x9'$'\x9'$'\x9'$'\x9'" -L output/basic.lst -l output/basic.lbl -Wall -o build/basic.rom _basic.asm
; Mon Feb 20 14:52:41 2023

;Offset	;PC	;Hex		;Monitor	;Source

;******  Command line definitions

=0						AUTORUN=0
=$e000						 MONITOR_ADDRESS=$E000
=$f000						 LOCKOUT_ADDRESS=$F000
=$34000						 BASIC_ADDRESS=$34000
=$28000						 SOURCE_ADDRESS=$28000
=$30000						 SPRITE_ADDRESS=$30000
=$24000						 LTILEMAP_ADDRESS=$24000
=$26000						 LTILEIMAGES_ADDRESS=$26000
=0						HARDWARE=0

;******  Processing input file: _basic.asm


;******  Processing file: ./common/aa.system/01common.inc

=$30						ZeroPageMandatory = $30
=$50						ZeroPagePreference = $50
=$400						MemoryStorage = $400
=$2000						BasicStart = $2000
=$8000						BasicEnd = $8000
=$8000						CodeStart = $8000
=$1000						VariableSpace = $1000
=$2000						EndVariableSpace = $2000
=8						MathStackSize = 8
=512						BasicStackSize = 512
=3584						BasicStackBase = $1000-BasicStackSize
=80						MaxLineSize = 80

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/04data.inc

.0030						codePtr:
>0030								.fill 	4
.0034						basicStack:
>0034								.fill 	2
.0036						zTemp0:
>0036								.fill 	2
.0038						zTemp1:
>0038								.fill 	2
.003a						zTemp2:
>003a								.fill 	2
.003c						zsTemp:
>003c								.fill 	2
.003e						zaTemp:
>003e								.fill 	2
=$30						safePtr = codePtr 							; minimise direct tinkering
=$80						NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20						NSBIsReference = $20 						; bit 5 : is a reference
=$10						NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18						NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03						NSBRefMask = $03 							; bits 0,1 : Bytes of reference, 00 = 4,01 = 1,10=2
=$04						NSBIsArray = $04
=$00						NSTInteger = $00 							; base types for bits 3..4
=$08						NSTFloat = $08
=$10						NSTString = $10
=$18						NSTProcedure = $18
.0050						NSStatus:
>0050								.fill 	MathStackSize
.0058						NSMantissa0:
>0058								.fill 	MathStackSize 				; (this is my integer mantissa system)
.0060						NSMantissa1:
>0060								.fill 	MathStackSize
.0068						NSMantissa2:
>0068								.fill 	MathStackSize
.0070						NSMantissa3:
>0070								.fill 	MathStackSize
.0078						NSExponent:
>0078								.fill 	MathStackSize
.0400						identStart:
>0400								.fill 	1
.0401						identTypeStart:
>0401								.fill 	1
.0402						identTypeEnd:
>0402								.fill 	1
.0403						identHash:
>0403								.fill 	1
.0404						identTypeByte:
>0404								.fill 	1	 						; (see tokenising.pdf)
.0405						encodeState:
>0405								.fill 	1
.0406						digitTemp:
>0406								.fill 	1
.0407						decimalCount:
>0407								.fill 	1
.0408						lowMemPtr:
>0408								.fill 	2
.040a						stringMemory:
>040a								.fill 	2
.040c						stringInitialised:
>040c								.fill 	1
.040d						stringTempPointer:
>040d								.fill 	2
.040f						breakCheck:
>040f								.fill 	1
.0410						decimalPlaces:
>0410								.fill 	1
.0411						dbOffset:
>0411								.fill 	1
.0412						lastParameter:
>0412								.fill 	1
.0413						dataPointer:
>0413								.fill 	5
.0418						inDataStatement:
>0418								.fill 	1
.0419						tbOffset:
>0419								.fill 	1
.041a						AssemblerAddress:
>041a								.fill 	2
.041c						AssemblerControl:
>041c								.fill 	1
.041d						ParamStart:
>041d								.fill 	2
.041f						IsGroup1:
>041f								.fill 	1
.0420						BaseOpcode:
>0420								.fill 	1
.0421						ModeMask:
>0421								.fill 	1
.0422						listIndent:
>0422								.fill 	1
.0423						lcLastCharacter:
>0423								.fill 	1
.0424						isPrintFlag:
>0424								.fill 	1
.0425						currentListColour:
>0425								.fill 	1
.0426						tokenOffset:
>0426								.fill 	1
.0427						tokenLineNumber:
>0427								.fill 	2
.0429						tokenBuffer:
>0429								.fill 	253
.0526						lineBuffer:
>0526								.fill 	253
.0623						numberBuffer:
>0623								.fill 	34
.0645						decimalBuffer:
>0645								.fill 	16

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/ab.system/macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/ab.system/ticktask.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/constants.inc

=$80						AM_ISZP = $80
=$40						AM_ISG1 = $40
=$20						AM_ISG2 = $20
=224						AM_IMMEDIATE = AM_ISZP+AM_ISG1+AM_ISG2+$00
=228						AM_ZEROPAGE = AM_ISZP+AM_ISG1+AM_ISG2+$04
=40						AM_ACC = AM_ISG2+$08
=108						AM_ABS = AM_ISG1+AM_ISG2+$0C
=208						AM_INDY = AM_ISZP+AM_ISG1+$10
=244						AM_ZEROX = AM_ISZP+AM_ISG1+AM_ISG2+$14
=120						AM_ABSY = AM_ISG1+AM_ISG2+$18
=124						AM_ABSX = AM_ISG1+AM_ISG2+$1C
=209						AM_IND = AM_ISZP+AM_ISG1+$11
=$80						AM_ZEROY = AM_ISZP
=$01						AM_INDABS = $01
=$02						AM_INDABSX = $02
=192						AM_INDX = AM_ISZP+AM_ISG1+$00

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/handlers.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.inc

=1						ERRID_BREAK = 1
=2						ERRID_SYNTAX = 2
=3						ERRID_DIVZERO = 3
=4						ERRID_RANGE = 4
=5						ERRID_TYPE = 5
=6						ERRID_MEMORY = 6
=7						ERRID_ARGUMENT = 7
=8						ERRID_STOP = 8
=9						ERRID_STRING = 9
=10						ERRID_ASSERT = 10
=11						ERRID_DATA = 11
=12						ERRID_NOTDONE = 12
=13						ERRID_LINE = 13
=14						ERRID_GOSUB = 14
=15						ERRID_REPEAT = 15
=16						ERRID_WHILE = 16
=17						ERRID_FOR = 17
=18						ERRID_STACK = 18
=19						ERRID_STRUCT = 19
=20						ERRID_PROC = 20
=21						ERRID_REDEFINE = 21
=22						ERRID_ARRAYSIZE = 22
=23						ERRID_ARRAYIDX = 23
=24						ERRID_ARRAYDEC = 24
=25						ERRID_NOTFOUND = 25
=26						ERRID_DRIVEIO = 26
=27						ERRID_VERIFY = 27

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst.inc

=$00						KWD_LESSLESS                         = $00; $00 <<
=$01						KWD_LESSEQUAL                        = $01; $01 <=
=$02						KWD_LESSGREATER                      = $02; $02 <>
=$03						KWD_PLINGPLING3                      = $03; $03 !!3
=$04						KWD_GREATERLESS                      = $04; $04 ><
=$05						KWD_GREATEREQUAL                     = $05; $05 >=
=$06						KWD_GREATERGREATER                   = $06; $06 >>
=$07						KWD_PLINGPLING7                      = $07; $07 !!7
=$08						KWD_PLINGPLING8                      = $08; $08 !!8
=$09						KWD_PLINGPLING9                      = $09; $09 !!9
=$0a						KWD_PLINGPLING10                     = $0a; $0a !!10
=$0b						KWD_PLINGPLING11                     = $0b; $0b !!11
=$0c						KWD_PLINGPLING12                     = $0c; $0c !!12
=$0d						KWD_PLINGPLING13                     = $0d; $0d !!13
=$0e						KWD_PLINGPLING14                     = $0e; $0e !!14
=$0f						KWD_PLINGPLING15                     = $0f; $0f !!15
=$10						KWD_ATCH                             = $10; $10 @
=$11						KWD_PLINGPLING17                     = $11; $11 !!17
=$12						KWD_PLINGPLING18                     = $12; $12 !!18
=$13						KWD_LSQPAREN                         = $13; $13 [
=$14						KWD_BACKSLASH                        = $14; $14 \
=$15						KWD_RSQPAREN                         = $15; $15 ]
=$16						KWD_HAT                              = $16; $16 ^
=$17						KWD_UNDERSCORE                       = $17; $17 _
=$18						KWD_BQUOTE                           = $18; $18 `
=$19						KWD_PLINGPLING25                     = $19; $19 !!25
=$1a						KWD_PLINGPLING26                     = $1a; $1a !!26
=$1b						KWD_LCURLY                           = $1b; $1b {
=$1c						KWD_BAR                              = $1c; $1c |
=$1d						KWD_RCURLY                           = $1d; $1d }
=$1e						KWD_TILDE                            = $1e; $1e ~
=$21						KWD_PLING                            = $21; $21 !
=$22						KWD_DQUOTE                           = $22; $22 "
=$23						KWD_HASH                             = $23; $23 #
=$24						KWD_DOLLAR                           = $24; $24 $
=$25						KWD_PERCENT                          = $25; $25 %
=$26						KWD_AMPERSAND                        = $26; $26 &
=$27						KWD_QUOTE                            = $27; $27 '
=$28						KWD_LPAREN                           = $28; $28 (
=$29						KWD_RPAREN                           = $29; $29 )
=$2a						KWD_STAR                             = $2a; $2a *
=$2b						KWD_PLUS                             = $2b; $2b +
=$2c						KWD_COMMA                            = $2c; $2c ,
=$2d						KWD_MINUS                            = $2d; $2d -
=$2e						KWD_PERIOD                           = $2e; $2e .
=$2f						KWD_SLASH                            = $2f; $2f /
=$30						KWD_0                                = $30; $30 0
=$31						KWD_1                                = $31; $31 1
=$32						KWD_2                                = $32; $32 2
=$33						KWD_3                                = $33; $33 3
=$34						KWD_4                                = $34; $34 4
=$35						KWD_5                                = $35; $35 5
=$36						KWD_6                                = $36; $36 6
=$37						KWD_7                                = $37; $37 7
=$38						KWD_8                                = $38; $38 8
=$39						KWD_9                                = $39; $39 9
=$3a						KWD_COLON                            = $3a; $3a :
=$3b						KWD_SEMICOLON                        = $3b; $3b ;
=$3c						KWD_LESS                             = $3c; $3c <
=$3d						KWD_EQUAL                            = $3d; $3d =
=$3e						KWD_GREATER                          = $3e; $3e >
=$3f						KWD_QMARK                            = $3f; $3f ?
=$83						KWD_ABSLPAREN                        = $83; $83 ABS(
=$84						KWD_ALLOCLPAREN                      = $84; $84 ALLOC(
=$85						KWD_ASCLPAREN                        = $85; $85 ASC(
=$86						KWD_CHRDOLLARLPAREN                  = $86; $86 CHR$(
=$87						KWD_EVENTLPAREN                      = $87; $87 EVENT(
=$88						KWD_FALSE                            = $88; $88 FALSE
=$89						KWD_FRACLPAREN                       = $89; $89 FRAC(
=$8a						KWD_GETDOLLARLPAREN                  = $8a; $8a GET$(
=$8b						KWD_GETLPAREN                        = $8b; $8b GET(
=$8c						KWD_GETDATEDOLLARLPAREN              = $8c; $8c GETDATE$(
=$8d						KWD_GETTIMEDOLLARLPAREN              = $8d; $8d GETTIME$(
=$8e						KWD_HITLPAREN                        = $8e; $8e HIT(
=$8f						KWD_INKEYDOLLARLPAREN                = $8f; $8f INKEY$(
=$90						KWD_INKEYLPAREN                      = $90; $90 INKEY(
=$91						KWD_INTLPAREN                        = $91; $91 INT(
=$92						KWD_ISVALLPAREN                      = $92; $92 ISVAL(
=$93						KWD_ITEMCOUNTLPAREN                  = $93; $93 ITEMCOUNT(
=$94						KWD_ITEMGETDOLLARLPAREN              = $94; $94 ITEMGET$(
=$95						KWD_JOYBLPAREN                       = $95; $95 JOYB(
=$96						KWD_JOYXLPAREN                       = $96; $96 JOYX(
=$97						KWD_JOYYLPAREN                       = $97; $97 JOYY(
=$98						KWD_KEYDOWNLPAREN                    = $98; $98 KEYDOWN(
=$99						KWD_LEFTDOLLARLPAREN                 = $99; $99 LEFT$(
=$9a						KWD_LENLPAREN                        = $9a; $9a LEN(
=$9b						KWD_MAXLPAREN                        = $9b; $9b MAX(
=$9c						KWD_MIDDOLLARLPAREN                  = $9c; $9c MID$(
=$9d						KWD_MINLPAREN                        = $9d; $9d MIN(
=$9e						KWD_NOTLPAREN                        = $9e; $9e NOT(
=$9f						KWD_PEEKLPAREN                       = $9f; $9f PEEK(
=$a0						KWD_PEEKDLPAREN                      = $a0; $a0 PEEKD(
=$a1						KWD_PEEKLLPAREN                      = $a1; $a1 PEEKL(
=$a2						KWD_PEEKWLPAREN                      = $a2; $a2 PEEKW(
=$a3						KWD_PLAYINGLPAREN                    = $a3; $a3 PLAYING(
=$a4						KWD_RANDOMLPAREN                     = $a4; $a4 RANDOM(
=$a5						KWD_RIGHTDOLLARLPAREN                = $a5; $a5 RIGHT$(
=$a6						KWD_RNDLPAREN                        = $a6; $a6 RND(
=$a7						KWD_SGNLPAREN                        = $a7; $a7 SGN(
=$a8						KWD_SPCLPAREN                        = $a8; $a8 SPC(
=$a9						KWD_STRDOLLARLPAREN                  = $a9; $a9 STR$(
=$aa						KWD_TIMERLPAREN                      = $aa; $aa TIMER(
=$ab						KWD_TRUE                             = $ab; $ab TRUE
=$ac						KWD_VALLPAREN                        = $ac; $ac VAL(
=$ad						KWD_FOR                              = $ad; $ad FOR
=$ae						KWD_IF                               = $ae; $ae IF
=$af						KWD_PROC                             = $af; $af PROC
=$b0						KWD_REPEAT                           = $b0; $b0 REPEAT
=$b1						KWD_WHILE                            = $b1; $b1 WHILE
=$b2						KWD_ENDIF                            = $b2; $b2 ENDIF
=$b3						KWD_ENDPROC                          = $b3; $b3 ENDPROC
=$b4						KWD_NEXT                             = $b4; $b4 NEXT
=$b5						KWD_THEN                             = $b5; $b5 THEN
=$b6						KWD_UNTIL                            = $b6; $b6 UNTIL
=$b7						KWD_WEND                             = $b7; $b7 WEND
=$b8						KWD_AT                               = $b8; $b8 AT
=$b9						KWD_BY                               = $b9; $b9 BY
=$ba						KWD_CALL                             = $ba; $ba CALL
=$bb						KWD_CIRCLE                           = $bb; $bb CIRCLE
=$bc						KWD_CLEAR                            = $bc; $bc CLEAR
=$bd						KWD_COLOR                            = $bd; $bd COLOR
=$be						KWD_COLOUR                           = $be; $be COLOUR
=$bf						KWD_DATA                             = $bf; $bf DATA
=$c0						KWD_DIM                              = $c0; $c0 DIM
=$c1						KWD_DOWNTO                           = $c1; $c1 DOWNTO
=$c2						KWD_ELSE                             = $c2; $c2 ELSE
=$c3						KWD_FROM                             = $c3; $c3 FROM
=$c4						KWD_GFX                              = $c4; $c4 GFX
=$c5						KWD_HERE                             = $c5; $c5 HERE
=$c6						KWD_IMAGE                            = $c6; $c6 IMAGE
=$c7						KWD_LET                              = $c7; $c7 LET
=$c8						KWD_LINE                             = $c8; $c8 LINE
=$c9						KWD_LOCAL                            = $c9; $c9 LOCAL
=$ca						KWD_MEMCOPY                          = $ca; $ca MEMCOPY
=$cb						KWD_OFF                              = $cb; $cb OFF
=$cc						KWD_ON                               = $cc; $cc ON
=$cd						KWD_OUTLINE                          = $cd; $cd OUTLINE
=$ce						KWD_PALETTE                          = $ce; $ce PALETTE
=$cf						KWD_PLOT                             = $cf; $cf PLOT
=$d0						KWD_POKE                             = $d0; $d0 POKE
=$d1						KWD_POKED                            = $d1; $d1 POKED
=$d2						KWD_POKEL                            = $d2; $d2 POKEL
=$d3						KWD_POKEW                            = $d3; $d3 POKEW
=$d4						KWD_READ                             = $d4; $d4 READ
=$d5						KWD_RECT                             = $d5; $d5 RECT
=$d6						KWD_REM                              = $d6; $d6 REM
=$d7						KWD_SOLID                            = $d7; $d7 SOLID
=$d8						KWD_SOUND                            = $d8; $d8 SOUND
=$d9						KWD_SPRITE                           = $d9; $d9 SPRITE
=$da						KWD_TEXT                             = $da; $da TEXT
=$db						KWD_TO                               = $db; $db TO
=$83						KWD1_ASSEMBLE                         = $83; $83 ASSEMBLE
=$84						KWD1_ASSERT                           = $84; $84 ASSERT
=$85						KWD1_BITMAP                           = $85; $85 BITMAP
=$86						KWD1_BLOAD                            = $86; $86 BLOAD
=$87						KWD1_BSAVE                            = $87; $87 BSAVE
=$88						KWD1_CLS                              = $88; $88 CLS
=$89						KWD1_CPRINT                           = $89; $89 CPRINT
=$8a						KWD1_DIR                              = $8a; $8a DIR
=$8b						KWD1_DOS                              = $8b; $8b DOS
=$8c						KWD1_DRIVE                            = $8c; $8c DRIVE
=$8d						KWD1_END                              = $8d; $8d END
=$8e						KWD1_EXPLODE                          = $8e; $8e EXPLODE
=$8f						KWD1_GO                               = $8f; $8f GO
=$90						KWD1_GOSUB                            = $90; $90 GOSUB
=$91						KWD1_GOTO                             = $91; $91 GOTO
=$92						KWD1_HIMEM                            = $92; $92 HIMEM
=$93						KWD1_INPUT                            = $93; $93 INPUT
=$94						KWD1_LIST                             = $94; $94 LIST
=$95						KWD1_LOAD                             = $95; $95 LOAD
=$96						KWD1_MDELTA                           = $96; $96 MDELTA
=$97						KWD1_MOUSE                            = $97; $97 MOUSE
=$98						KWD1_NEW                              = $98; $98 NEW
=$99						KWD1_PING                             = $99; $99 PING
=$9a						KWD1_PRINT                            = $9a; $9a PRINT
=$9b						KWD1_RESTORE                          = $9b; $9b RESTORE
=$9c						KWD1_RETURN                           = $9c; $9c RETURN
=$9d						KWD1_RUN                              = $9d; $9d RUN
=$9e						KWD1_SAVE                             = $9e; $9e SAVE
=$9f						KWD1_SETDATE                          = $9f; $9f SETDATE
=$a0						KWD1_SETTIME                          = $a0; $a0 SETTIME
=$a1						KWD1_SHOOT                            = $a1; $a1 SHOOT
=$a2						KWD1_SPRITES                          = $a2; $a2 SPRITES
=$a3						KWD1_STOP                             = $a3; $a3 STOP
=$a4						KWD1_TRY                              = $a4; $a4 TRY
=$a5						KWD1_VERIFY                           = $a5; $a5 VERIFY
=$a6						KWD1_XGO                              = $a6; $a6 XGO
=$a7						KWD1_XLOAD                            = $a7; $a7 XLOAD
=$a8						KWD1_ZAP                              = $a8; $a8 ZAP

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst0.inc

=$80						KWC_EOL = $80
=$81						KWC_SHIFT1 = $81
=$82						KWC_SHIFT2 = $82
=$ff						KWC_STRING = $FF
=$fe						KWC_HEXCONST = $FE
=$ad						KWC_FIRST_STRUCTURE = $ad
=$b2						KWC_FIRST_STRUCTURE_DEC = $b2
=$b7						KWC_LAST_STRUCTURE = $b7
=$83						KWC_FIRST_UNARY = $83
=$ac						KWC_LAST_UNARY = $ac

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/memory/memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/stack.inc

=$e0						STK_GOSUB = $E0
=$d0						STK_FOR = $D0
=$c0						STK_REPEAT = $C0
=$b0						STK_PROC = $B0
=$a0						STK_WHILE = $A0
=$01						STK_LOCALN = $01
=$02						STK_LOCALS = $02

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/00start.asm

.8000						F256Header:
>8000		f2 56						.text	$f2,$56         			; Signature
>8002		04						.byte   4               			; 4 blocks
>8003		04						.byte   4               			; mount at $8000
>8004		40 80						.word   Boot 	      				; Start here
>8006		00 00						.word   0 			               	; version
>8008		00 00						.word   0               			; kernel
>800a		53 75 70 65 72 42 41 53				.text   "SuperBASIC",0 				; name of program.
>8012		49 43 00
.8040		4c 93 80	jmp $8093	Boot:	jmp 	Start

;******  Processing file: ./common/aa.system/../../../modules/_build/_linker.module

=1						PagingEnabled = 1
.8043						EXTPrintCharacter:
.8043		e6 0d		inc $0d			inc 8+5
.8045		20 0b a0	jsr $a00b		jsr	Export_EXTPrintCharacter
.8048		08		php			php
.8049		c6 0d		dec $0d			dec 8+5
.804b		28		plp			plp
.804c		60		rts			rts
.804d						EXTPrintNoControl:
.804d		e6 0d		inc $0d			inc 8+5
.804f		20 00 a0	jsr $a000		jsr	Export_EXTPrintNoControl
.8052		08		php			php
.8053		c6 0d		dec $0d			dec 8+5
.8055		28		plp			plp
.8056		60		rts			rts
.8057						EXTInitialise:
.8057		e6 0d		inc $0d			inc 8+5
.8059		20 da a1	jsr $a1da		jsr	Export_EXTInitialise
.805c		08		php			php
.805d		c6 0d		dec $0d			dec 8+5
.805f		28		plp			plp
.8060		60		rts			rts
.8061						GXGraphicDraw:
.8061		e6 0d		inc $0d			inc 8+5
.8063		20 39 a3	jsr $a339		jsr	Export_GXGraphicDraw
.8066		08		php			php
.8067		c6 0d		dec $0d			dec 8+5
.8069		28		plp			plp
.806a		60		rts			rts
.806b						SNDCommand:
.806b		e6 0d		inc $0d			inc 8+5
.806d		20 55 b7	jsr $b755		jsr	Export_SNDCommand
.8070		08		php			php
.8071		c6 0d		dec $0d			dec 8+5
.8073		28		plp			plp
.8074		60		rts			rts
.8075						SNDUpdate:
.8075		e6 0d		inc $0d			inc 8+5
.8077		20 88 b7	jsr $b788		jsr	Export_SNDUpdate
.807a		08		php			php
.807b		c6 0d		dec $0d			dec 8+5
.807d		28		plp			plp
.807e		60		rts			rts
.807f						TKListConvertLine:
.807f		e6 0d		inc $0d			inc 8+5
.8081		20 06 b1	jsr $b106		jsr	Export_TKListConvertLine
.8084		08		php			php
.8085		c6 0d		dec $0d			dec 8+5
.8087		28		plp			plp
.8088		60		rts			rts
.8089						TKTokeniseLine:
.8089		e6 0d		inc $0d			inc 8+5
.808b		20 9a b3	jsr $b39a		jsr	Export_TKTokeniseLine
.808e		08		php			php
.808f		c6 0d		dec $0d			dec 8+5
.8091		28		plp			plp
.8092		60		rts			rts

;******  Return to file: ./common/aa.system/00start.asm

.8093		a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.8095		9a		txs				txs
.8096		20 57 80	jsr $8057			jsr 	EXTInitialise 				; hardware initialise
.8099		a5 00		lda $00				lda 	0  							; turn on editing of MMU LUT
.809b		09 80		ora #$80			ora 	#$80
.809d		85 00		sta $00				sta 	0
.809f		ad 02 20	lda $2002			lda 	$2002 						; if $2002..5 is BT65 then jump to $2000
.80a2		c9 42		cmp #$42			cmp 	#"B"
.80a4		d0 18		bne $80be			bne 	_NoMachineCode
.80a6		ad 03 20	lda $2003			lda 	$2003
.80a9		c9 54		cmp #$54			cmp 	#"T"
.80ab		d0 11		bne $80be			bne 	_NoMachineCode
.80ad		ad 04 20	lda $2004			lda 	$2004
.80b0		c9 36		cmp #$36			cmp 	#"6"
.80b2		d0 0a		bne $80be			bne 	_NoMachineCode
.80b4		ad 05 20	lda $2005			lda 	$2005
.80b7		c9 35		cmp #$35			cmp 	#"5"
.80b9		d0 03		bne $80be			bne 	_NoMachineCode
.80bb		4c 00 20	jmp $2000			jmp 	$2000
.80be						_NoMachineCode:
.80be		a9 00		lda #$00			lda 	#0 							; zero the default drive.
.80c0		20 ad 83	jsr $83ad			jsr 	KNLSetDrive
.80c3		a9 00		lda #$00			lda 	#0 							; graphics system initialise.
.80c5		aa		tax				tax
.80c6		a8		tay				tay
.80c7		20 61 80	jsr $8061			jsr 	GXGraphicDraw
.80ca		a9 0f		lda #$0f			lda 	#$0F 						; initialise sound system
.80cc		20 6b 80	jsr $806b			jsr 	SNDCommand
.80cf		a9 8d		lda #$8d			lda 	#128+13 					; Display FPGA information.
.80d1		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.80d4		a9 09		lda #$09			lda 	#9
.80d6		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.80d9		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.80dc		64 01		stz $01				stz 	1
.80de		ad ad d6	lda $d6ad			lda 	$D6AD
.80e1		20 82 85	jsr $8582			jsr 	PrintHex
.80e4		ad ac d6	lda $d6ac			lda 	$D6AC
.80e7		20 82 85	jsr $8582			jsr 	PrintHex
.80ea		ad ab d6	lda $d6ab			lda 	$D6AB
.80ed		20 82 85	jsr $8582			jsr 	PrintHex
.80f0		ad aa d6	lda $d6aa			lda 	$D6AA
.80f3		20 82 85	jsr $8582			jsr 	PrintHex
.80f6		a9 20		lda #$20			lda 	#32
.80f8		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.80fb		ad a8 d6	lda $d6a8			lda 	$D6A8
.80fe		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.8101		ad a9 d6	lda $d6a9			lda 	$D6A9
.8104		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.8107		a2 81		ldx #$81			ldx 	#Prompt >> 8 				; display prompt
.8109		a9 1a		lda #$1a			lda 	#Prompt & $FF
.810b		20 e2 93	jsr $93e2			jsr 	PrintStringXA
.810e		20 64 82	jsr $8264			jsr 	ResetIOTracking 			; reset the I/O tracking.
.8111		20 d4 8d	jsr $8dd4			jsr 	NewProgram 					; erase current program
.8114		4c ee 87	jmp $87ee			jmp 	WarmStart					; make same size.
.8117		4c ee 87	jmp $87ee			jmp 	WarmStart
>811a		0d 0d				Prompt:	.text 	13,13

;******  Processing file: ./common/aa.system/../generated/timestamp.asm

>811c		09 09 32 30 2f 30 32 2f			.text 9,9,"20/02/23 37"
>8124		32 33 20 33 37

;******  Return to file: ./common/aa.system/00start.asm

>8129		0d 0d 0d 00					.text 	13,13,13,0

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/ab.system/events.asm

.812d						ProcessEvents:
.812d		20 ec 83	jsr $83ec			jsr 	KNLSetEventPointer
.8130		20 6d 82	jsr $826d			jsr     GetNextEvent 				; get next event
.8133		b0 36		bcs $816b			bcs 	_PEExitZ 					; nothing left to process.
.8135		ad 9b 07	lda $079b			lda 	KNLEvent.type 				; go back if event not key.pressed.
.8138		c9 08		cmp #$08			cmp 	#kernel.event.key.PRESSED
.813a		d0 f1		bne $812d			bne 	ProcessEvents
.813c		ad a1 07	lda $07a1			lda	 	KNLEvent.key.flags 			; is KNLEvent.key.flags = 0 ?
.813f		30 0b		bmi $814c			bmi 	_PEIsRaw
.8141		d0 ea		bne $812d			bne 	ProcessEvents
.8143		ad a0 07	lda $07a0			lda 	KNLEvent.key.ascii 			; is it Ctrl+C
.8146		c9 03		cmp #$03			cmp 	#3
.8148		f0 1e		beq $8168			beq 	_PEReturnBreak  			; no, keep going.
.814a		80 0b		bra $8157			bra 	_PEQueueA
.814c						_PEIsRaw:
.814c		ad 9f 07	lda $079f			lda 	KNLEvent.key.raw 			; return raw key if F1-F12
.814f		c9 81		cmp #$81			cmp 	#129
.8151		90 da		bcc $812d			bcc		ProcessEvents
.8153		c9 8d		cmp #$8d			cmp 	#140+1
.8155		b0 d6		bcs $812d			bcs 	ProcessEvents
.8157						_PEQueueA:
.8157		da		phx				phx
.8158		ae 5d 06	ldx $065d			ldx 	KeyboardQueueEntries 		; get keyboard queue size into X
.815b		e0 08		cpx #$08			cpx 	#KBDQueueSize 				; if full, then ignore
.815d		f0 06		beq $8165			beq 	_PENoQueue
.815f		9d 55 06	sta $0655,x			sta 	KeyboardQueue,x 			; write into queue
.8162		ee 5d 06	inc $065d			inc 	KeyboardQueueEntries 		; bump count
.8165						_PENoQueue:
.8165		fa		plx				plx
.8166		80 c5		bra $812d			bra 	ProcessEvents
.8168						_PEReturnBreak:
.8168		a9 ff		lda #$ff			lda 	#255 						; return with NZ state
.816a		60		rts				rts
.816b						_PEExitZ:
.816b		a9 00		lda #$00			lda 	#0
.816d		60		rts				rts
.816e						PopKeyboardQueue:
.816e		ad 5d 06	lda $065d			lda 	KeyboardQueueEntries 		; get keyboard queue entries.
.8171		f0 17		beq $818a			beq 	_PKQExit 					; zero, then exit.
.8173		ad 55 06	lda $0655			lda 	KeyboardQueue 				; save head of keyboard queue
.8176		48		pha				pha
.8177		da		phx				phx 								; drop head of queue
.8178		a2 00		ldx #$00			ldx 	#0
.817a						_PKQLoop:
.817a		bd 56 06	lda $0656,x			lda 	KeyboardQueue+1,x 			; shift everything back one.
.817d		9d 55 06	sta $0655,x			sta 	KeyboardQueue,x  			; not efficient but doesn't matter.
.8180		e8		inx				inx
.8181		e0 07		cpx #$07			cpx 	#7
.8183		d0 f5		bne $817a			bne 	_PKQLoop
.8185		fa		plx				plx
.8186		ce 5d 06	dec $065d			dec 	KeyboardQueueEntries 		; one fewer in queue.
.8189		68		pla				pla 								; restore head of queue.
.818a						_PKQExit:
.818a		60		rts				rts
.818b						KNLGetKeyPressed:
.818b		a5 01		lda $01				lda 	1 							; save I/O 0
.818d		48		pha				pha
.818e		64 01		stz $01				stz 	1 							; access I/O Page 0
.8190		38		sec				sec 								; calculate timer - LastTick
.8191		ad 59 d6	lda $d659			lda 	$D659
.8194		cd 5e 06	cmp $065e			cmp 	LastTick
.8197		f0 06		beq $819f			beq 	_NoFireTick 				; if < 3 clocks don't fire.
.8199		8d 5e 06	sta $065e			sta 	LastTick 					; update last timer
.819c		20 5c 82	jsr $825c			jsr 	TickHandler 							; go do the code.
.819f						_NoFireTick:
.819f		68		pla				pla 								; restore I/O 0
.81a0		85 01		sta $01				sta 	1
.81a2		ad 5d 06	lda $065d			lda 	KeyboardQueueEntries 		; something in the queue
.81a5		d0 c7		bne $816e			bne 	PopKeyboardQueue 			; if so, pop and return it
.81a7		20 2d 81	jsr $812d			jsr 	ProcessEvents 				; process any outstanding events
.81aa		a9 00		lda #$00			lda 	#0
.81ac		60		rts				rts
.81ad						KNLGetSingleCharacter:
.81ad		20 8b 81	jsr $818b			jsr 	KNLGetKeyPressed
.81b0		c9 00		cmp #$00			cmp 	#0
.81b2		f0 f9		beq $81ad			beq 	KNLGetSingleCharacter
.81b4		60		rts				rts
=8						KBDQueueSize = 8
.0655						KeyboardQueue:
>0655								.fill 	KBDQueueSize
.065d						KeyboardQueueEntries:
>065d								.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/ab.system/input.asm

.81b5						EXTInputLine:
.81b5		48		pha				pha
.81b6		da		phx				phx
.81b7		5a		phy				phy
.81b8		a5 01		lda $01				lda 	1 							; save I/O page
.81ba		48		pha				pha
.81bb						_EILLoop:
.81bb		20 ad 81	jsr $81ad			jsr 	KNLGetSingleCharacter 		; get one single character
.81be		c9 0d		cmp #$0d			cmp 	#13 						; scrape line if exit.
.81c0		f0 44		beq $8206			beq 	_EILExit
.81c2		c9 04		cmp #$04			cmp 	#4 							; Ctrl+D delete at cursor
.81c4		f0 2a		beq $81f0			beq 	_EILDelete
.81c6		c9 08		cmp #$08			cmp 	#8 							; Ctrl+H backspace
.81c8		f0 1c		beq $81e6			beq 	_EILBackspace
.81ca		c9 20		cmp #$20			cmp 	#' '						; < space, print it
.81cc		90 12		bcc $81e0			bcc 	_EILPrintLoop
.81ce		c9 7f		cmp #$7f			cmp 	#$7F 						; if -ve print it
.81d0		b0 0e		bcs $81e0			bcs 	_EILPrintLoop
.81d2		48		pha				pha 								; save character
.81d3		a9 02		lda #$02			lda 	#2  						; insert a space
.81d5		85 01		sta $01				sta 	1
.81d7		20 4a 82	jsr $824a			jsr 	EXTILInsert 				; insert in text screen
.81da		e6 01		inc $01				inc 	1
.81dc		20 4a 82	jsr $824a			jsr 	EXTILInsert 				; insert in colour screen
.81df		68		pla				pla 								; get character back.
.81e0						_EILPrintLoop:
.81e0		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.81e3		80 d6		bra $81bb			bra 	_EILLoop
.81e5		60		rts				rts
.81e6						_EILBackspace:
.81e6		ad c4 07	lda $07c4			lda 	EXTColumn					; can we backspace ?
.81e9		f0 d0		beq $81bb			beq 	_EILLoop
.81eb		a9 02		lda #$02			lda 	#2 							; move cursor left
.81ed		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.81f0						_EILDelete
.81f0		a9 02		lda #$02			lda 	#2 							; text block
.81f2		85 01		sta $01				sta 	1
.81f4		a9 20		lda #$20			lda 	#' ' 						; backspace text.
.81f6		20 35 82	jsr $8235			jsr 	EXTILDelete
.81f9		e6 01		inc $01				inc 	1 							; colour block
.81fb		ac c4 07	ldy $07c4			ldy 	EXTColumn 					; get attribute of last character
.81fe		88		dey				dey
.81ff		b1 40		lda ($40),y			lda 	(EXTAddress),y
.8201		20 35 82	jsr $8235			jsr 	EXTILDelete 				; backspace attribute
.8204		80 b5		bra $81bb			bra 	_EILLoop 					; and go round.
.8206						_EILExit:
.8206		a9 02		lda #$02			lda 	#2 							; switch to page 2
.8208		85 01		sta $01				sta 	1
.820a		a0 00		ldy #$00			ldy 	#0 							; copy current line into buffer.
.820c						_EILScrapeLine:
.820c		b1 40		lda ($40),y			lda 	(EXTAddress),y
.820e		99 26 05	sta $0526,y			sta 	lineBuffer,y
.8211		c8		iny				iny
.8212		cc c6 07	cpy $07c6			cpy 	EXTScreenWidth
.8215		d0 f5		bne $820c			bne 	_EILScrapeLine
.8217						_EILTrimSpaces:
.8217		88		dey				dey
.8218		c0 ff		cpy #$ff			cpy 	#$FF 						; back past the start
.821a		f0 07		beq $8223			beq 	_EILEndTrim		 			; zero the input line.
.821c		b9 26 05	lda $0526,y			lda 	lineBuffer,y
.821f		c9 20		cmp #$20			cmp 	#' '
.8221		f0 f4		beq $8217			beq 	_EILTrimSpaces 				; if fail this found non space character
.8223						_EILEndTrim:
.8223		c8		iny				iny 								; trim after non space character.
.8224		a9 00		lda #$00			lda 	#0 							; trim here.
.8226		99 26 05	sta $0526,y			sta 	lineBuffer,y
.8229		a9 0d		lda #$0d			lda 	#13 						; echo the RETURN
.822b		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.822e		68		pla				pla 								; reset I/O page
.822f		85 01		sta $01				sta 	1
.8231		7a		ply				ply
.8232		fa		plx				plx
.8233		68		pla				pla
.8234		60		rts				rts
.8235						EXTILDelete:
.8235		48		pha				pha 								; save the new character
.8236		ac c4 07	ldy $07c4			ldy 	EXTColumn 					; start copying from here.
.8239						_EXTDLoop:
.8239		c8		iny				iny 								; copy one byte down.
.823a		b1 40		lda ($40),y			lda 	(EXTAddress),y
.823c		88		dey				dey
.823d		91 40		sta ($40),y			sta 	(EXTAddress),y
.823f		c8		iny				iny 								; do till end of line.
.8240		cc c6 07	cpy $07c6			cpy 	EXTScreenWidth
.8243		90 f4		bcc $8239			bcc 	_EXTDLoop
.8245		88		dey				dey 	 							; write in last slot.
.8246		68		pla				pla
.8247		91 40		sta ($40),y			sta 	(EXTAddress),y
.8249		60		rts				rts
.824a						EXTILInsert:
.824a		ac c6 07	ldy $07c6			ldy 	EXTScreenWidth 				; end position
.824d						_EXTILoop:
.824d		88		dey				dey 								; back one
.824e		cc c4 07	cpy $07c4			cpy 	EXTColumn 					; exit if reached insert point.
.8251		f0 08		beq $825b			beq 	_EXTIExit
.8253		88		dey				dey 								; copy one byte up.
.8254		b1 40		lda ($40),y			lda 	(EXTAddress),y
.8256		c8		iny				iny
.8257		91 40		sta ($40),y			sta 	(EXTAddress),y
.8259		80 f2		bra $824d			bra 	_EXTILoop
.825b						_EXTIExit:
.825b		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/ab.system/ticktask.asm

.825c						TickHandler:
.825c		da		phx				phx
.825d		5a		phy				phy 								; need to preserve Y
.825e		20 75 80	jsr $8075			jsr 	SNDUpdate 					; update sound
.8261		7a		ply				ply
.8262		fa		plx				plx
.8263		60		rts				rts
.065e						LastTick:
>065e								.fill 		1

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/ab.system/trackio.asm

.8264						ResetIOTracking:
.8264		a2 3a		ldx #$3a			ldx 	#GNEEnd-GNEBegin-1
.8266						_RIOLoop:
.8266		9e 5f 06	stz $065f,x			stz 	GNEBegin,x
.8269		ca		dex				dex
.826a		10 fa		bpl $8266			bpl 	_RIOLoop
.826c		60		rts				rts
.826d						GetNextEvent:
.826d		20 00 ff	jsr $ff00			jsr 	kernel.NextEvent 			; get event
.8270		08		php				php									; save yes/no flag.
.8271		b0 29		bcs $829c			bcs 	_GNEExit
.8273		48		pha				pha 								; save registers
.8274		da		phx				phx
.8275		5a		phy				phy
.8276		ad 9b 07	lda $079b			lda 	KNLEvent.type	 			; check for PRESSED or RELEASED
.8279		c9 08		cmp #$08			cmp 	#kernel.event.key.PRESSED
.827b		f0 04		beq $8281			beq 	_GNEKeyEvent
.827d		c9 0a		cmp #$0a			cmp 	#kernel.event.key.RELEASED
.827f		d0 08		bne $8289			bne 	_GNECheckMouseEvent
.8281						_GNEKeyEvent:
.8281		20 5b 83	jsr $835b			jsr 	ProcessKeyboardEvent 		; process keyboard up/down.
.8284		20 78 83	jsr $8378			jsr 	UpdateKeyboardJoystick 		; update the keyboard-joystick.
.8287		80 10		bra $8299			bra 	_GNEEventExit
.8289						_GNECheckMouseEvent:
.8289		c9 0c		cmp #$0c			cmp 	#kernel.event.mouse.DELTA 	; check for move events
.828b		d0 05		bne $8292			bne 	_GNENotDelta
.828d		20 9e 82	jsr $829e			jsr 	ProcessMouseDeltaEvent 		; process them.
.8290		80 07		bra $8299			bra 	_GNEEventExit
.8292						_GNENotDelta:
.8292		c9 0e		cmp #$0e			cmp 	#kernel.event.mouse.CLICKS 	; check for click events
.8294		d0 03		bne $8299			bne 	_GNEEventExit
.8296		20 cd 82	jsr $82cd			jsr 	ProcessMouseClickEvent 		; process them.
.8299						_GNEEventExit:
.8299		7a		ply				ply 								; restore registers
.829a		fa		plx				plx
.829b		68		pla				pla
.829c						_GNEExit:
.829c		28		plp				plp
.829d		60		rts				rts
.829e						ProcessMouseDeltaEvent:
.829e		a2 23		ldx #$23			ldx 	#MouseDeltaX-GNEBegin
.82a0		ad 9e 07	lda $079e			lda 	KNLEvent.mouse.delta.x
.82a3		20 f4 82	jsr $82f4			jsr 	PMKAdjustTotal
.82a6		20 37 83	jsr $8337			jsr 	PMKAddSubtract
.82a9		ad 9f 07	lda $079f			lda 	KNLEvent.mouse.delta.y
.82ac		20 f4 82	jsr $82f4			jsr 	PMKAdjustTotal
.82af		20 37 83	jsr $8337			jsr 	PMKAddSubtract
.82b2		ad a0 07	lda $07a0			lda 	KNLEvent.mouse.delta.z
.82b5		20 f4 82	jsr $82f4			jsr 	PMKAdjustTotal
.82b8		20 37 83	jsr $8337			jsr 	PMKAddSubtract
.82bb		ad a1 07	lda $07a1			lda 	KNLEvent.mouse.delta.buttons
.82be		a2 35		ldx #$35			ldx 	#MouseStatusX-GNEBegin
.82c0		20 e2 82	jsr $82e2			jsr 	PMKOutputButton
.82c3		20 e2 82	jsr $82e2			jsr 	PMKOutputButton
.82c6		20 e2 82	jsr $82e2			jsr 	PMKOutputButton
.82c9		20 03 83	jsr $8303			jsr 	PMKClipMouseCoord
.82cc		60		rts				rts
.82cd						ProcessMouseClickEvent:
.82cd		a2 29		ldx #$29			ldx 	#MouseCountInner-GNEBegin
.82cf		ad 9e 07	lda $079e			lda 	KNLEvent.mouse.clicks.inner
.82d2		20 3b 83	jsr $833b			jsr 	PMKAdd
.82d5		ad 9f 07	lda $079f			lda 	KNLEvent.mouse.clicks.middle
.82d8		20 3b 83	jsr $833b			jsr 	PMKAdd
.82db		ad a0 07	lda $07a0			lda 	KNLEvent.mouse.clicks.outer
.82de		20 3b 83	jsr $833b			jsr 	PMKAdd
.82e1		60		rts				rts
.82e2						PMKOutputButton:
.82e2		9e 5f 06	stz $065f,x			stz 	GNEBegin,x 					; button to zero
.82e5		9e 60 06	stz $0660,x			stz 	GNEBegin+1,x
.82e8		6a		ror a				ror 	a 							; shift LSB into carry
.82e9		90 06		bcc $82f1			bcc 	_PMKOBExit
.82eb		de 5f 06	dec $065f,x			dec 	GNEBegin,x 					; if set then set to -1
.82ee		de 60 06	dec $0660,x			dec 	GNEBegin+1,x
.82f1						_PMKOBExit:
.82f1		e8		inx				inx  								; next button
.82f2		e8		inx				inx
.82f3		60		rts				rts
.82f4						PMKAdjustTotal:
.82f4		48		pha				pha 								; save offset A index X
.82f5		da		phx				phx
.82f6		48		pha				pha 								; point X to the position
.82f7		8a		txa				txa
.82f8		18		clc				clc
.82f9		69 0c		adc #$0c			adc 	#MousePosX-MouseDeltaX
.82fb		aa		tax				tax
.82fc		68		pla				pla
.82fd		20 37 83	jsr $8337			jsr 	PMKAddSubtract 				; reuse the addition code.
.8300		fa		plx				plx 								; restore XA
.8301		68		pla				pla
.8302		60		rts				rts
.8303						PMKClipMouseCoord:
.8303		a2 00		ldx #$00			ldx 	#0
.8305						_PCMCLoop:
.8305		bd 8f 06	lda $068f,x			lda 	MousePosX+1,x 				; check if -ve
.8308		10 06		bpl $8310			bpl 	_PCMCNotNeg
.830a		9e 8e 06	stz $068e,x			stz 	MousePosX,x 				; if so zero position.
.830d		9e 8f 06	stz $068f,x			stz 	MousePosX+1,x
.8310						_PCMCNotNeg:
.8310		bd 8e 06	lda $068e,x			lda 	MousePosX,x 				; compare pos vs extent
.8313		dd 31 83	cmp $8331,x			cmp 	_PCMCExtent,x
.8316		bd 8f 06	lda $068f,x			lda 	MousePosX+1,x
.8319		fd 32 83	sbc $8332,x			sbc 	_PCMCExtent+1,x
.831c		90 0c		bcc $832a			bcc 	_PCMCNotOver 				; in range ?
.831e		bd 31 83	lda $8331,x			lda 	_PCMCExtent,x 				; no, set to X limit.
.8321		9d 8e 06	sta $068e,x			sta 	MousePosX,x
.8324		bd 32 83	lda $8332,x			lda 	_PCMCExtent+1,x
.8327		9d 8f 06	sta $068f,x			sta 	MousePosX+1,x
.832a						_PCMCNotOver:
.832a		e8		inx				inx
.832b		e8		inx				inx
.832c		e0 06		cpx #$06			cpx 	#3*2
.832e		d0 d5		bne $8305			bne 	_PCMCLoop
.8330		60		rts				rts
.8331						_PCMCExtent:
>8331		3f 01 ef 00 ff 00				.word 	319,239,255
.8337						PMKAddSubtract:
.8337		c9 00		cmp #$00			cmp 	#0 							; subtracting ?
.8339		30 0e		bmi $8349			bmi 	PMKSubtract
.833b						PMKAdd:
.833b		18		clc				clc
.833c		7d 5f 06	adc $065f,x			adc 	GNEBegin,x
.833f		9d 5f 06	sta $065f,x			sta 	GNEBegin,x
.8342		90 14		bcc $8358			bcc 	PMKExit
.8344		fe 60 06	inc $0660,x			inc 	GNEBegin+1,x
.8347		80 0f		bra $8358			bra 	PMKExit
.8349						PMKSubtract:
.8349		18		clc				clc
.834a		7d 5f 06	adc $065f,x			adc 	GNEBegin,x
.834d		9d 5f 06	sta $065f,x			sta 	GNEBegin,x
.8350		bd 60 06	lda $0660,x			lda 	GNEBegin+1,x
.8353		69 ff		adc #$ff			adc 	#$FF
.8355		9d 60 06	sta $0660,x			sta 	GNEBegin+1,x
.8358						PMKExit:
.8358		e8		inx				inx 								; next slot ?
.8359		e8		inx				inx
.835a		60		rts				rts
.835b						ProcessKeyboardEvent:
.835b		ad 9f 07	lda $079f			lda 	KNLEvent.key.raw 			; raw key code.
.835e		20 99 83	jsr $8399			jsr 	KeyboardConvertXA  			; convert to index in X, mask in A
.8361		ac 9b 07	ldy $079b			ldy 	KNLEvent.type
.8364		c0 0a		cpy #$0a			cpy 	#kernel.event.key.RELEASED 	; check if pressed/released
.8366		f0 07		beq $836f			beq 	_PKERelease
.8368		1d 60 06	ora $0660,x			ora 	KeyStatus,x 				; set bit
.836b		9d 60 06	sta $0660,x			sta 	KeyStatus,x
.836e		60		rts				rts
.836f						_PKERelease:
.836f		49 ff		eor #$ff			eor 	#$FF						; clear bit
.8371		3d 60 06	and $0660,x			and 	KeyStatus,x
.8374		9d 60 06	sta $0660,x			sta 	KeyStatus,x
.8377		60		rts				rts
.8378						UpdateKeyboardJoystick:
.8378		9c 81 06	stz $0681			stz 	KeyJoystick
.837b		a2 00		ldx #$00			ldx 	#0
.837d						_UKJLoop:
.837d		bd 94 83	lda $8394,x			lda 	_UKJKeys,x 					; which key
.8380		29 1f		and #$1f			and 	#$1F
.8382		a8		tay				tay
.8383		b9 60 06	lda $0660,y			lda 	KeyStatus,y 				; get status
.8386		29 10		and #$10			and 	#$10 						; letters always bit 4 (actually ASCII of L/C)
.8388		18		clc				clc  								; set C if bit set
.8389		69 ff		adc #$ff			adc 	#$FF
.838b		2e 81 06	rol $0681			rol 	KeyJoystick 				; shift into place
.838e		e8		inx				inx
.838f		e0 05		cpx #$05			cpx 	#5 							; do all 5
.8391		d0 ea		bne $837d			bne 	_UKJLoop
.8393		60		rts				rts
.8394						_UKJKeys:
>8394		4c 58 5a 4d 4b					.byte	'L','X','Z','M','K'
.8399						KeyboardConvertXA:
.8399		a2 01		ldx #$01			ldx 	#1 							; set the mask temp to %00000001
.839b		8e 80 06	stx $0680			stx 	KeyMaskTemp
.839e						_KCCALoop:
.839e		18		clc				clc
.839f		69 20		adc #$20			adc 	#$20 						; upper 3 bits are the mask, if causes CS A will be in the range 00-1F
.83a1		b0 05		bcs $83a8			bcs 	_KCCADone
.83a3		0e 80 06	asl $0680			asl 	KeyMaskTemp 				; shift the mask temp
.83a6		80 f6		bra $839e			bra 	_KCCALoop
.83a8						_KCCADone:
.83a8		aa		tax				tax 								; table entry in X
.83a9		ad 80 06	lda $0680			lda 	KeyMaskTemp 				; mask temp in A.
.83ac		60		rts				rts
.065f						GNEBegin:
.065f						CMDMouseFlag:
>065f								.fill 	1
.0660						KeyStatus:
>0660								.fill 	32
.0680						KeyMaskTemp:
>0680								.fill 	1
.0681						KeyJoystick:
>0681								.fill 	1
.0682						MouseDeltaX:
>0682								.fill 	2
.0684						MouseDeltaY:
>0684								.fill 	2
.0686						MouseDeltaZ:
>0686								.fill 	2
.0688						MouseCountInner:
>0688								.fill 	2
.068a						MouseCountMiddle:
>068a								.fill 	2
.068c						MouseCountOuter:
>068c								.fill 	2
.068e						MousePosX:
>068e								.fill 	2
.0690						MousePosY:
>0690								.fill 	2
.0692						MousePosZ:
>0692								.fill 	2
.0694						MouseStatusX:
>0694								.fill 	2
.0696						MouseStatusY:
>0696								.fill 	2
.0698						MouseStatusZ:
>0698								.fill 	2
.069a						GNEEnd:

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/ab.system/wrapper.asm

=56						KERR_GENERAL = kernel.event.file.ERROR 		; Event $38
=50						KERR_CLOSED = kernel.event.file.CLOSED 		; Event $32
=40						KERR_NOTFOUND = kernel.event.file.NOT_FOUND ; Event $28
=48						KERR_EOF = kernel.event.file.EOF 			; Event $30
=64						KNLReadBufferLen = 64 								; read buffer size.
.83ad						KNLSetDrive:
.83ad		8d 9a 07	sta $079a			sta 	KNLDefaultDrive
.83b0		60		rts				rts
.83b1						KNLOpenFileWrite:
.83b1		48		pha				pha
.83b2		a9 01		lda #$01			lda 	#kernel.args.file.open.WRITE
.83b4		80 03		bra $83b9			bra 	KNLOpenStart
.83b6						KNLOpenFileRead:
.83b6		48		pha				pha
.83b7		a9 00		lda #$00			lda     #kernel.args.file.open.READ ; set READ mode.
.83b9						KNLOpenStart:
.83b9		85 f5		sta $f5				sta     kernel.args.file.open.mode
.83bb		68		pla				pla
.83bc		20 f7 83	jsr $83f7			jsr 	KNLSetupFileName
.83bf		20 ec 83	jsr $83ec			jsr 	KNLSetEventPointer
.83c2		ad 9a 07	lda $079a			lda 	KNLDefaultDrive 			; currently drive zero only.
.83c5		85 f3		sta $f3				sta 	kernel.args.file.open.drive
.83c7		20 5c ff	jsr $ff5c			jsr     kernel.File.Open 			; open the file and exit.
.83ca		a9 38		lda #$38			lda     #kernel.event.file.ERROR
.83cc		b0 1d		bcs $83eb			bcs     _out
.83ce						_loop
.83ce		20 0c ff	jsr $ff0c			jsr     kernel.Yield    			; event wait
.83d1		20 6d 82	jsr $826d			jsr     GetNextEvent
.83d4		b0 f8		bcs $83ce			bcs     _loop
.83d6		ad 9b 07	lda $079b			lda 	KNLEvent.type
.83d9		c9 2a		cmp #$2a			cmp     #kernel.event.file.OPENED
.83db		f0 0a		beq $83e7			beq 	_success
.83dd		c9 28		cmp #$28			cmp     #kernel.event.file.NOT_FOUND
.83df		f0 0a		beq $83eb			beq 	_out
.83e1		c9 38		cmp #$38			cmp     #kernel.event.file.ERROR
.83e3		f0 06		beq $83eb			beq 	_out
.83e5		80 e7		bra $83ce			bra     _loop
.83e7						_success
.83e7		ad 9e 07	lda $079e			lda     KNLEvent.file.stream
.83ea		18		clc				clc
.83eb						_out
.83eb		60		rts				rts
.83ec						KNLSetEventPointer:
.83ec		48		pha				pha
.83ed		a9 9b		lda #$9b			lda     #KNLEvent & $FF 			; tell kernel where to store event data
.83ef		85 f0		sta $f0				sta     kernel.args.events+0
.83f1		a9 07		lda #$07			lda     #KNLEvent >> 8
.83f3		85 f1		sta $f1				sta     kernel.args.events+1
.83f5		68		pla				pla
.83f6		60		rts				rts
.83f7						KNLSetupFileName:
.83f7		5a		phy				phy 								; save Y on stack
.83f8		85 36		sta $36				sta 	zTemp0 						; save filename position in temp, and in kenrel slot
.83fa		86 37		stx $37				stx 	zTemp0+1
.83fc		85 fb		sta $fb				sta     kernel.args.file.open.fname+0
.83fe		86 fc		stx $fc				stx     kernel.args.file.open.fname+1
.8400		a0 ff		ldy #$ff			ldy 	#$FF 						; get the filename length => Kernel slot
.8402						_KNLGetLength:
.8402		c8		iny				iny
.8403		b1 36		lda ($36),y			lda 	(zTemp0),y
.8405		d0 fb		bne $8402			bne 	_KNLGetLength
.8407		84 fd		sty $fd				sty 	kernel.args.file.open.fname_len
.8409		7a		ply				ply
.840a		60		rts				rts
.840b						KNLReadBlock:
.840b		85 f3		sta $f3				sta     kernel.args.file.read.stream
.840d		86 f4		stx $f4				stx     kernel.args.file.read.buflen
.840f		20 60 ff	jsr $ff60			jsr     kernel.File.Read 			; read request
.8412		a9 38		lda #$38			lda     #kernel.event.file.ERROR    ; Kernel out of events/buffers; shouldn't happen
.8414		b0 2e		bcs $8444			bcs     _KGNBExitFail               ; report as general error
.8416						_KGRBEventLoop:
.8416		20 0c ff	jsr $ff0c			jsr     kernel.Yield    			; event wait
.8419		20 6d 82	jsr $826d			jsr     GetNextEvent
.841c		b0 f8		bcs $8416			bcs     _KGRBEventLoop
.841e		ad 9b 07	lda $079b			lda 	KNLEvent.type 				; get event
.8421		c9 2c		cmp #$2c			cmp     #kernel.event.file.DATA 	; data, return data
.8423		f0 0a		beq $842f			beq     _KNLRBGetNextByte
.8425		c9 38		cmp #$38			cmp     #kernel.event.file.ERROR  	; errors on file i/o, return as appropriate.
.8427		f0 1b		beq $8444			beq 	_KGNBExitFail
.8429		c9 30		cmp #$30			cmp     #kernel.event.file.EOF
.842b		f0 17		beq $8444			beq 	_KGNBExitFail
.842d		80 e7		bra $8416			bra 	_KGRBEventLoop
.842f						_KNLRBGetNextByte:
.842f		a9 9a		lda #$9a			lda     #<KNLReadBuffer 			; Set the target buffer
.8431		85 fb		sta $fb				sta     kernel.args.recv.buf+0
.8433		a9 06		lda #$06			lda     #>KNLReadBuffer
.8435		85 fc		sta $fc				sta     kernel.args.recv.buf+1
.8437		ad a1 07	lda $07a1			lda     KNLEvent.file.data.read 	; Set the target length
.843a		85 fd		sta $fd				sta     kernel.args.recv.buflen
.843c		20 04 ff	jsr $ff04			jsr     kernel.ReadData		       	; Get the data from the kernel  (Synchronous call, no error)
.843f		ad a1 07	lda $07a1			lda     KNLEvent.file.data.read 	; Return # of bytes read (in A)
.8442		18		clc				clc
.8443		60		rts				rts
.8444						_KGNBExitFail:
.8444		38		sec				sec
.8445		60		rts				rts
.8446						KNLWriteBlock:
.8446		da		phx				phx
.8447		5a		phy				phy
.8448		85 f3		sta $f3				sta     kernel.args.file.write.stream ; save the stream.
.844a		a5 36		lda $36				lda     zTemp0 						; save the data location.
.844c		85 fb		sta $fb				sta     kernel.args.file.write.buf+0
.844e		a5 37		lda $37				lda     zTemp0+1
.8450		85 fc		sta $fc				sta     kernel.args.file.write.buf+1
.8452		86 fd		stx $fd				stx     kernel.args.file.write.buflen ; Set the buffer length
.8454		20 64 ff	jsr $ff64			jsr     kernel.File.Write 			; write it out.
.8457		a9 38		lda #$38			lda 	#kernel.event.file.ERROR 	; in case it fails.
.8459		b0 21		bcs $847c			bcs 	_KWBFailed
.845b						_KNLWLoop:
.845b		20 0c ff	jsr $ff0c			jsr     kernel.Yield
.845e		20 6d 82	jsr $826d			jsr     GetNextEvent
.8461		b0 f8		bcs $845b			bcs     _KNLWLoop
.8463		ad 9b 07	lda $079b			lda     KNLEvent.type 				; various errors.
.8466		c9 32		cmp #$32			cmp     #kernel.event.file.CLOSED
.8468		f0 12		beq $847c			beq 	_KWBFailed
.846a		c9 38		cmp #$38			cmp     #kernel.event.file.ERROR
.846c		f0 0e		beq $847c			beq 	_KWBFailed
.846e		c9 30		cmp #$30			cmp     #kernel.event.file.EOF
.8470		f0 0a		beq $847c			beq 	_KWBFailed
.8472		c9 2e		cmp #$2e			cmp     #kernel.event.file.WROTE 	; wait until block write succeeds
.8474		d0 e5		bne $845b			bne 	_KNLWLoop
.8476		18		clc				clc
.8477		ad a1 07	lda $07a1			lda    KNLEvent.file.wrote.wrote 	; get bytes written.
.847a		80 01		bra $847d			bra 	_KWBExit
.847c						_KWBFailed:
.847c		38		sec				sec
.847d						_KWBExit:
.847d		7a		ply				ply
.847e		fa		plx				plx
.847f		60		rts				rts
.8480						KNLCloseFile:
.8480		85 f3		sta $f3				sta     kernel.args.file.close.stream
.8482		20 68 ff	jsr $ff68			jsr     kernel.File.Close
.8485		60		rts				rts
.8486						KNLReadController:
.8486		da		phx				phx
.8487		a6 01		ldx $01				ldx 	1 							; save current I/O in X
.8489		64 01		stz $01				stz 	1 							; switch to I/O 0
.848b		ad 00 dc	lda $dc00			lda 	$DC00  						; read VIA register
.848e		49 ff		eor #$ff			eor 	#$FF 						; make active '1'
.8490		0d 81 06	ora $0681			ora 	KeyJoystick 				; use key joystick.
.8493		86 01		stx $01				stx 	1 							; repair old I/O and exit
.8495		fa		plx				plx
.8496		60		rts				rts
.069a						KNLReadBuffer:
>069a								.fill   256
.079a						KNLDefaultDrive:
>079a								.byte 	?
.079b						KNLEvent
>079b						type        .byte   ?   ; Enum above
>079c						buf         .byte   ?   ; page id or zero
>079d						ext         .byte   ?   ; page id or zero
.079e						key
>079e						keyboard    .byte   ?   ; Keyboard ID
>079f						raw         .byte   ?   ; Raw key ID
>07a0						ascii       .byte   ?   ; ASCII value
>07a1						flags       .byte   ?   ; Flags (META)
=$80						META        = $80       ; Meta key; no associated ASCII value.
.079e						mouse
.079e						delta
>079e						x           .byte   ?
>079f						y           .byte   ?
>07a0						z           .byte   ?
>07a1						buttons     .byte   ?
.079e						clicks
>079e						inner       .byte   ?
>079f						middle      .byte   ?
>07a0						outer       .byte   ?
.079e						joystick
>079e						joy0        .byte   ?
>079f						joy1        .byte   ?
.079e						udp
>079e						token       .byte   ?   ; TODO: break out into fields
.079e						tcp
>079e						len         .byte   ?   ; Raw packet length.
.079e						file
>079e						stream      .byte   ?
>079f						cookie      .byte   ?
.07a0						data
>07a0						requested   .byte   ?   ; Requested number of bytes to read
>07a1						read        .byte   ?   ; Number of bytes actually read
.07a0						wrote
>07a0						requested   .byte   ?   ; Requested number of bytes to read
>07a1						wrote       .byte   ?   ; Number of bytes actually read
.079e						directory
>079e						stream      .byte   ?
>079f						cookie      .byte   ?
.07a0						volume
>07a0						len         .byte   ?   ; Length of volname (in buf)
>07a1						flags       .byte   ?   ; block size, text encoding
.07a0						file
>07a0						len         .byte   ?
>07a1						flags       .byte   ?   ; block scale, text encoding, approx size
.07a0						free
>07a0						flags       .byte   ?   ; block scale, text encoding, approx size

;******  Return to file: _basic.asm


;******  Processing file: ./common/api/api.asm

>ff00						NextEvent   .fill   4   ; Copy the next event into user-space.
>ff04						ReadData    .fill   4   ; Copy primary bulk event data into user-space
>ff08						ReadExt     .fill   4   ; Copy secondary bolk event data into user-space
>ff0c						Yield       .fill   4   ; Give unused time to the kernel.
>ff10						Putch       .fill   4   ; deprecated
>ff14						RunBlock    .fill   4   ; Chain to resident program by block ID.
>ff18						RunNamed    .fill   4   ; Chain to resident program by name.
>ff1c						            .fill   4   ; reserved
>ff20						List        .fill   4   ; Returns a bit-set of available block-accessible devices.
>ff24						GetName     .fill   4   ; Gets the hardware level name of the given block device or media.
>ff28						GetSize     .fill   4   ; Get the number of raw sectors (48 bits) for the given device
>ff2c						Read        .fill   4   ; Read a raw sector (48 bit LBA)
>ff30						Write       .fill   4   ; Write a raw sector (48 bit LBA)
>ff34						Format      .fill   4   ; Perform a low-level format if the media support it.
>ff38						Export      .fill   4   ; Update the FileSystem table with the partition table (if present).
>ff3c						List        .fill   4   ; Returns a bit-set of available logical devices.
>ff40						GetSize     .fill   4   ; Get the size of the partition or logical device in sectors.
>ff44						MkFS        .fill   4   ; Creates a new file-system on the logical device.
>ff48						CheckFS     .fill   4   ; Checks the file-system for errors and corrects them.
>ff4c						Mount       .fill   4   ; Mark the file-system as available for File and Directory operations.
>ff50						Unmount     .fill   4   ; Mark the file-system as unavailable for File and Directory operations.
>ff54						ReadBlock   .fill   4   ; Read a partition-local raw sector on an unmounted device.
>ff58						WriteBlock  .fill   4   ; Write a partition-local raw sector on an unmounted device.
>ff5c						Open        .fill   4   ; Open the given file for read, create, or append.
>ff60						Read        .fill   4   ; Request bytes from a file opened for reading.
>ff64						Write       .fill   4   ; Write bytes to a file opened for create or append.
>ff68						Close       .fill   4   ; Close an open file.
>ff6c						Rename      .fill   4   ; Rename a closed file.
>ff70						Delete      .fill   4   ; Delete a closed file.
>ff74						Open        .fill   4   ; Open a directory for reading.
>ff78						Read        .fill   4   ; Read a directory entry; may also return VOLUME and FREE events.
>ff7c						Close       .fill   4   ; Close a directory once finished reading.
>ff80						MkDir       .fill   4
>ff84						RmDir       .fill   4
>ff88						            .fill   4   ; call gate
>ff8c						GetIP       .fill   4   ; Get the local IP address.
>ff90						SetIP       .fill   4   ; Set the local IP address.
>ff94						GetDNS      .fill   4   ; Get the configured DNS IP address.
>ff98						SetDNS      .fill   4   ; Set the configured DNS IP address.
>ff9c						SendICMP    .fill   4
>ffa0						Match       .fill   4
>ffa4						Init        .fill   4
>ffa8						Send        .fill   4
>ffac						Recv        .fill   4
>ffb0						Open        .fill   4
>ffb4						Accept      .fill   4
>ffb8						Reject      .fill   4
>ffbc						Send        .fill   4
>ffc0						Recv        .fill   4
>ffc4						Close       .fill   4
>ffc8						Reset       .fill   4   ; Re-init the display
>ffcc						GetSize     .fill   4   ; Returns rows/cols in kernel args.
>ffd0						DrawRow     .fill   4   ; Draw text/color buffers left-to-right
>ffd4						DrawColumn  .fill   4   ; Draw text/color buffers top-to-bottom
>ffd8						GetTime     .fill   4
>ffdc						SetTime     .fill   4
>ffe0						GetSysInfo  .fill   4
>ffe4						SetBPS      .fill   4   ; Set the serial BPS (should match the SLIP router's speed).
.00f0						args
.00f0						events
>00f0						dest        .word       ?   ; GetNextEvent copies event data here
>00f2						pending     .byte       ?   ; Negative count of pending events
.00f3						end
.00f3						run
>00f3						block_id    .byte   ?
.00f3						recv
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.00f3						fs
.00f3						format
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.00f3						mkfs
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.00f3						file
.00f3						open
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>00f5						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.00f3						read
>00f3						stream      .byte       ?
>00f4						buflen      .byte       ?
.00f3						write
>00f3						stream      .byte       ?
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.00f3						close
>00f3						stream      .byte       ?
.00f3						rename
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						old         = args.buf
=$fd						old_len     = args.buflen
=$f8						new         = args.ext
=$fa						new_len     = args.extlen
.00f3						delete
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>00f5						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.00f3						directory
.00f3						open
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						path        = args.buf
=$fd						path_len    = args.buflen
.00f3						read
>00f3						stream      .byte       ?
>00f4						buflen      .byte       ?
.00f3						close
>00f3						stream      .byte       ?
.00f3						display
>00f3						x           .byte       ?   ; coordinate or size
>00f4						y           .byte       ?   ; coordinate or size
=$fb						text        = args.buf      ; text
=$f8						color       = args.ext      ; color
=$fb						buf         = args.buf      ; deprecated
=$f8						buf2        = args.ext      ; deprecated
=$fd						buflen      = args.buflen
.00f3						net
=$fb						socket      = args.buf
>00f3						src_port    .word       ?
>00f5						dest_port   .word       ?
>00f7						dest_ip     .fill       4
>00f3						accepted    .byte       ?
=$f8						buf         = args.ext
=$fa						buflen      = args.extlen
=$f8						ext         = $f8
=$fa						extlen      = $fa
=$fb						buf         = $fb
=$fd						buflen      = $fd
=$fe						ptr         = $fe
.0000						args_t
.0000						events
>0000						dest        .word       ?   ; GetNextEvent copies event data here
>0002						pending     .byte       ?   ; Negative count of pending events
.0003						end
.0003						run
>0003						block_id    .byte   ?
.0003						recv
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0003						fs
.0003						format
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0003						mkfs
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0003						file
.0003						open
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0005						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0003						read
>0003						stream      .byte       ?
>0004						buflen      .byte       ?
.0003						write
>0003						stream      .byte       ?
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0003						close
>0003						stream      .byte       ?
.0003						rename
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						old         = args.buf
=$fd						old_len     = args.buflen
=$f8						new         = args.ext
=$fa						new_len     = args.extlen
.0003						delete
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0005						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0003						directory
.0003						open
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						path        = args.buf
=$fd						path_len    = args.buflen
.0003						read
>0003						stream      .byte       ?
>0004						buflen      .byte       ?
.0003						close
>0003						stream      .byte       ?
.0003						display
>0003						x           .byte       ?   ; coordinate or size
>0004						y           .byte       ?   ; coordinate or size
=$fb						text        = args.buf      ; text
=$f8						color       = args.ext      ; color
=$fb						buf         = args.buf      ; deprecated
=$f8						buf2        = args.ext      ; deprecated
=$fd						buflen      = args.buflen
.0003						net
=$fb						socket      = args.buf
>0003						src_port    .word       ?
>0005						dest_port   .word       ?
>0007						dest_ip     .fill       4
>0003						accepted    .byte       ?
=$f8						buf         = args.ext
=$fa						buflen      = args.extlen
=$f8						ext         = $f8
=$fa						extlen      = $fa
=$fb						buf         = $fb
=$fd						buflen      = $fd
=$fe						ptr         = $fe
.0000						event_t
>0000						dest        .word       ?   ; GetNextEvent copies event data here
>0002						pending     .byte       ?   ; Negative count of pending events
.0003						end
.0000						recv_t
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0000						run_t
>0000						block_id    .byte   ?
.0000						fs_t
.0000						format
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0000						mkfs
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0000						fs_mkfs_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0000						file_t
.0000						open
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0002						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0000						read
>0000						stream      .byte       ?
>0001						buflen      .byte       ?
.0000						write
>0000						stream      .byte       ?
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0000						close
>0000						stream      .byte       ?
.0000						rename
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						old         = args.buf
=$fd						old_len     = args.buflen
=$f8						new         = args.ext
=$fa						new_len     = args.extlen
.0000						delete
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0002						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0000						fs_open_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0002						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0000						fs_read_t
>0000						stream      .byte       ?
>0001						buflen      .byte       ?
.0000						fs_write_t
>0000						stream      .byte       ?
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0000						fs_close_t
>0000						stream      .byte       ?
.0000						fs_rename_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						old         = args.buf
=$fd						old_len     = args.buflen
=$f8						new         = args.ext
=$fa						new_len     = args.extlen
.0000						fs_delete_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fnane       = args.buf
=$fd						fname_len   = args.buflen
.0000						dir_t
.0000						open
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						path        = args.buf
=$fd						path_len    = args.buflen
.0000						read
>0000						stream      .byte       ?
>0001						buflen      .byte       ?
.0000						close
>0000						stream      .byte       ?
.0000						dir_open_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						path        = args.buf
=$fd						path_len    = args.buflen
.0000						dir_read_t
>0000						stream      .byte       ?
>0001						buflen      .byte       ?
.0000						dir_close_t
>0000						stream      .byte       ?
.0000						display_t
>0000						x           .byte       ?   ; coordinate or size
>0001						y           .byte       ?   ; coordinate or size
=$fb						text        = args.buf      ; text
=$f8						color       = args.ext      ; color
=$fb						buf         = args.buf      ; deprecated
=$f8						buf2        = args.ext      ; deprecated
=$fd						buflen      = args.buflen
.0000						net_t
=$fb						socket      = args.buf
>0000						src_port    .word       ?
>0002						dest_port   .word       ?
>0004						dest_ip     .fill       4
>0000						accepted    .byte       ?
=$f8						buf         = args.ext
=$fa						buflen      = args.extlen
>0000						            .word   ?   ; Reserved
>0002						            .word   ?   ; Deprecated
>0004						JOYSTICK    .word   ?   ; Game Controller changes.
>0006						DEVICE      .word   ?   ; Device added/removed.
>0008						PRESSED     .word   ?   ; Key pressed
>000a						RELEASED    .word   ?   ; Key released.
>000c						DELTA       .word   ?   ; Regular mouse move and button state
>000e						CLICKS      .word   ?   ; Click counts
>0010						NAME        .word   ?
>0012						SIZE        .word   ?
>0014						DATA        .word   ?   ; The read request has succeeded.
>0016						WROTE       .word   ?   ; The write request has completed.
>0018						FORMATTED   .word   ?   ; The low-level format has completed.
>001a						ERROR       .word   ?
>001c						SIZE        .word   ?
>001e						CREATED     .word   ?
>0020						CHECKED     .word   ?
>0022						DATA        .word   ?   ; The read request has succeeded.
>0024						WROTE       .word   ?   ; The write request has completed.
>0026						ERROR       .word   ?
>0028						NOT_FOUND   .word   ?   ; The file file was not found.
>002a						OPENED      .word   ?   ; The file was successfully opened.
>002c						DATA        .word   ?   ; The read request has succeeded.
>002e						WROTE       .word   ?   ; The write request has completed.
>0030						EOF         .word   ?   ; All file data has been read.
>0032						CLOSED      .word   ?   ; The close request has completed.
>0034						RENAMED     .word   ?   ; The rename request has completed.
>0036						DELETED     .word   ?   ; The delete request has completed.
>0038						ERROR       .word   ?   ; An error occured; close the file if opened.
>003a						OPENED      .word   ?   ; The directory open request succeeded.
>003c						VOLUME      .word   ?   ; A volume record was found.
>003e						FILE        .word   ?   ; A file record was found.
>0040						FREE        .word   ?   ; A file-system free-space record was found.
>0042						EOF         .word   ?   ; All data has been read.
>0044						CLOSED      .word   ?   ; The directory file has been closed.
>0046						ERROR       .word   ?   ; An error occured; user should close.
>0048						TCP         .word   ?
>004a						UDP         .word   ?
.0000						event_t
>0000						type        .byte   ?   ; Enum above
>0001						buf         .byte   ?   ; page id or zero
>0002						ext         .byte   ?   ; page id or zero
.0003						key
>0003						keyboard    .byte   ?   ; Keyboard ID
>0004						raw         .byte   ?   ; Raw key ID
>0005						ascii       .byte   ?   ; ASCII value
>0006						flags       .byte   ?   ; Flags (META)
=$80						META        = $80       ; Meta key; no associated ASCII value.
.0003						mouse
.0003						delta
>0003						x           .byte   ?
>0004						y           .byte   ?
>0005						z           .byte   ?
>0006						buttons     .byte   ?
.0003						clicks
>0003						inner       .byte   ?
>0004						middle      .byte   ?
>0005						outer       .byte   ?
.0003						joystick
>0003						joy0        .byte   ?
>0004						joy1        .byte   ?
.0003						udp
>0003						token       .byte   ?   ; TODO: break out into fields
.0003						tcp
>0003						len         .byte   ?   ; Raw packet length.
.0003						file
>0003						stream      .byte   ?
>0004						cookie      .byte   ?
.0005						data
>0005						requested   .byte   ?   ; Requested number of bytes to read
>0006						read        .byte   ?   ; Number of bytes actually read
.0005						wrote
>0005						requested   .byte   ?   ; Requested number of bytes to read
>0006						wrote       .byte   ?   ; Number of bytes actually read
.0003						directory
>0003						stream      .byte   ?
>0004						cookie      .byte   ?
.0005						volume
>0005						len         .byte   ?   ; Length of volname (in buf)
>0006						flags       .byte   ?   ; block size, text encoding
.0005						file
>0005						len         .byte   ?
>0006						flags       .byte   ?   ; block scale, text encoding, approx size
.0005						free
>0005						flags       .byte   ?   ; block scale, text encoding, approx size
.0000						key_t
>0000						keyboard    .byte   ?   ; Keyboard ID
>0001						raw         .byte   ?   ; Raw key ID
>0002						ascii       .byte   ?   ; ASCII value
>0003						flags       .byte   ?   ; Flags (META)
=$80						META        = $80       ; Meta key; no associated ASCII value.
.0000						mouse_t
.0000						delta
>0000						x           .byte   ?
>0001						y           .byte   ?
>0002						z           .byte   ?
>0003						buttons     .byte   ?
.0000						clicks
>0000						inner       .byte   ?
>0001						middle      .byte   ?
>0002						outer       .byte   ?
.0000						m_delta_t
>0000						x           .byte   ?
>0001						y           .byte   ?
>0002						z           .byte   ?
>0003						buttons     .byte   ?
.0000						m_clicks_t
>0000						inner       .byte   ?
>0001						middle      .byte   ?
>0002						outer       .byte   ?
.0000						joystick_t
>0000						joy0        .byte   ?
>0001						joy1        .byte   ?
.0000						file_t
>0000						stream      .byte   ?
>0001						cookie      .byte   ?
.0002						data
>0002						requested   .byte   ?   ; Requested number of bytes to read
>0003						read        .byte   ?   ; Number of bytes actually read
.0002						wrote
>0002						requested   .byte   ?   ; Requested number of bytes to read
>0003						wrote       .byte   ?   ; Number of bytes actually read
.0000						fs_data_t
>0000						requested   .byte   ?   ; Requested number of bytes to read
>0001						read        .byte   ?   ; Number of bytes actually read
.0000						fs_wrote_t
>0000						requested   .byte   ?   ; Requested number of bytes to read
>0001						wrote       .byte   ?   ; Number of bytes actually read
.0000						dir_t
>0000						stream      .byte   ?
>0001						cookie      .byte   ?
.0002						volume
>0002						len         .byte   ?   ; Length of volname (in buf)
>0003						flags       .byte   ?   ; block size, text encoding
.0002						file
>0002						len         .byte   ?
>0003						flags       .byte   ?   ; block scale, text encoding, approx size
.0002						free
>0002						flags       .byte   ?   ; block scale, text encoding, approx size
.0000						dir_vol_t
>0000						len         .byte   ?   ; Length of volname (in buf)
>0001						flags       .byte   ?   ; block size, text encoding
.0000						dir_file_t
>0000						len         .byte   ?
>0001						flags       .byte   ?   ; block scale, text encoding, approx size
.0000						dir_free_t
>0000						flags       .byte   ?   ; block scale, text encoding, approx size
.0000						dir_ext_t
>0000						free        .fill   6   ; blocks used/free
.0000						udp_t
>0000						token       .byte   ?   ; TODO: break out into fields
.0000						tcp_t
>0000						len         .byte   ?   ; Raw packet length.

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/assembler.asm

.8497						AssembleGroup1:
.8497		a9 ff		lda #$ff			lda 	#$FF 						; flag for group 1 / mask.
.8499		8d 21 04	sta $0421			sta 	ModeMask 					; initialise the mode mask - all for all
.849c		80 02		bra $84a0			bra 	AsmGroup12
.849e						AssembleGroup2:
.849e		a9 00		lda #$00			lda 	#$00 						; flag for group 2
.84a0						AsmGroup12:
.84a0		8d 1f 04	sta $041f			sta 	IsGroup1 					; save the 'group 1' flag
.84a3		68		pla				pla 								; pop the return address to access the information following.
.84a4		fa		plx				plx
.84a5		20 2c 85	jsr $852c			jsr 	AccessParameters 			; get opcode and save as base
.84a8		8d 20 04	sta $0420			sta 	BaseOpcode
.84ab		ad 1f 04	lda $041f			lda 	IsGroup1 					; skip if group 1 as we don't have a complex mask.
.84ae		d0 08		bne $84b8			bne 	_AG12HaveMask
.84b0		a9 02		lda #$02			lda 	#2 							; if group 2 the second parameter is the mask
.84b2		20 34 85	jsr $8534			jsr 	GetParameter		 		; e.g. which modes are supported for this operand
.84b5		8d 21 04	sta $0421			sta 	ModeMask
.84b8						_AG12HaveMask:
.84b8		20 68 86	jsr $8668			jsr 	TypeAndCalculateOperand 	; get zero page type
.84bb		da		phx				phx 								; save found address mode
.84bc		20 98 85	jsr $8598			jsr 	AssembleModeX
.84bf		fa		plx				plx  								; restore address mode
.84c0		b0 0b		bcs $84cd			bcs 	_AG12Exit
.84c2		20 ce 84	jsr $84ce			jsr 	PromoteToAbsolute  			; promote ZP to ABS and try that
.84c5		20 98 85	jsr $8598			jsr 	AssembleModeX
.84c8		b0 03		bcs $84cd			bcs 	_AG12Exit
.84ca		4c 5b a4	jmp $a45b			jmp 	SyntaxError 				; can't do either, so must be wrong mode/operand.
.84cd						_AG12Exit:
.84cd		60		rts				rts
.84ce						PromoteToAbsolute:
.84ce		a9 6c		lda #$6c			lda 	#AM_ABS 					; lda xx
.84d0		e0 e4		cpx #$e4			cpx 	#AM_ZEROPAGE
.84d2		f0 19		beq $84ed			beq 	_PTADo
.84d4		a9 7c		lda #$7c			lda 	#AM_ABSX 					; lda xx,X
.84d6		e0 f4		cpx #$f4			cpx 	#AM_ZEROX
.84d8		f0 13		beq $84ed			beq 	_PTADo
.84da		a9 78		lda #$78			lda 	#AM_ABSY 					; lda xx,Y
.84dc		e0 80		cpx #$80			cpx 	#AM_ZEROY
.84de		f0 0d		beq $84ed			beq 	_PTADo
.84e0		a9 01		lda #$01			lda 	#AM_INDABS 					; lda (xx) (jump)
.84e2		e0 d1		cpx #$d1			cpx 	#AM_IND
.84e4		f0 07		beq $84ed			beq 	_PTADo
.84e6		a9 02		lda #$02			lda 	#AM_INDABSX 				; lda (xx,x) (jump)
.84e8		e0 c0		cpx #$c0			cpx 	#AM_INDX
.84ea		f0 01		beq $84ed			beq 	_PTADo
.84ec		60		rts				rts
.84ed						_PTADo:
.84ed		aa		tax				tax
.84ee		60		rts				rts
.84ef						AssembleGroup3:
.84ef		68		pla				pla 								; get parameters, which is just the opcode.
.84f0		fa		plx				plx
.84f1		20 2c 85	jsr $852c			jsr 	AccessParameters 			; get and output opcode
.84f4		20 44 85	jsr $8544			jsr 	AssemblerWriteByte
.84f7		20 cc 86	jsr $86cc			jsr 	CalculateOperand 			; get a 16 bit operand
.84fa		a5 58		lda $58				lda 	NSMantissa0 				; calculate the offset
.84fc		38		sec				sec
.84fd		ed 1a 04	sbc $041a			sbc 	AssemblerAddress
.8500		48		pha				pha 								; LSB in A
.8501		a5 60		lda $60				lda 	NSMantissa1
.8503		ed 1b 04	sbc $041b			sbc 	AssemblerAddress+1
.8506		aa		tax				tax 								; MSB in X
.8507		68		pla				pla
.8508		18		clc				clc 								; $80 to easy check $80-$7F, plus 1 for offset error
.8509		69 7f		adc #$7f			adc 	#$7F
.850b		90 01		bcc $850e			bcc 	_AG3NoCarry
.850d		e8		inx				inx
.850e						_AG3NoCarry:
.850e		38		sec				sec 								; fix back and write out anyways.
.850f		e9 80		sbc #$80			sbc 	#$80
.8511		20 44 85	jsr $8544			jsr 	AssemblerWriteByte
.8514		e0 00		cpx #$00			cpx 	#0 							; was it in range
.8516		f0 0a		beq $8522			beq 	_AG3Exit
.8518		ad 1c 04	lda $041c			lda 	AssemblerControl 			; are we allowing bad values ?
.851b		29 01		and #$01			and 	#1
.851d		f0 03		beq $8522			beq 	_AG3Exit
.851f		4c 60 a4	jmp $a460			jmp 	RangeError 					; no, branch is out of range
.8522						_AG3Exit:
.8522		60		rts				rts
.8523						AssembleGroup4:
.8523		68		pla				pla 								; pop address
.8524		fa		plx				plx
.8525		20 2c 85	jsr $852c			jsr 	AccessParameters 			; access and get first
.8528		20 44 85	jsr $8544			jsr 	AssemblerWriteByte 			; output it.
.852b		60		rts				rts
.852c						AccessParameters:
.852c		8d 1d 04	sta $041d			sta 	ParamStart
.852f		8e 1e 04	stx $041e			stx 	ParamStart+1
.8532		a9 01		lda #$01			lda 	#1
.8534						GetParameter:
.8534		5a		phy				phy
.8535		a8		tay				tay
.8536		ad 1d 04	lda $041d			lda 	ParamStart
.8539		85 36		sta $36				sta 	zTemp0
.853b		ad 1e 04	lda $041e			lda 	ParamStart+1
.853e		85 37		sta $37				sta 	zTemp0+1
.8540		b1 36		lda ($36),y			lda 	(zTemp0),y
.8542		7a		ply				ply
.8543		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/aswrite.asm

.8544						AssemblerWriteByte:
.8544		48		pha			pha
.8545		ad 1c 04	lda $041c		lda 	AssemblerControl 				; check printing bytes ?
.8548		29 02		and #$02		and 	#2
.854a		f0 1b		beq $8567		beq 	_AWBNoPrint
.854c		ad 1b 04	lda $041b		lda		AssemblerAddress+1 				; print address
.854f		20 82 85	jsr $8582		jsr 	PrintHex
.8552		ad 1a 04	lda $041a		lda		AssemblerAddress
.8555		20 82 85	jsr $8582		jsr 	PrintHex
.8558		a9 20		lda #$20		lda 	#' '
.855a		20 43 80	jsr $8043		jsr 	EXTPrintCharacter
.855d		68		pla			pla 									; print byte
.855e		48		pha			pha
.855f		20 82 85	jsr $8582		jsr 	PrintHex
.8562		a9 0d		lda #$0d		lda 	#13
.8564		20 43 80	jsr $8043		jsr 	EXTPrintCharacter
.8567						_AWBNoPrint:
.8567		ad 1a 04	lda $041a		lda		AssemblerAddress				; copy address to zTemp0
.856a		85 36		sta $36			sta 	zTemp0
.856c		ad 1b 04	lda $041b		lda		AssemblerAddress+1
.856f		f0 0e		beq $857f		beq 	_AWBRange
.8571		85 37		sta $37			sta 	zTemp0+1
.8573		68		pla			pla 									; write byte out
.8574		92 36		sta ($36)		sta 	(zTemp0)
.8576		ee 1a 04	inc $041a		inc 	AssemblerAddress 				; bump address
.8579		d0 03		bne $857e		bne 	_AWBNoCarry
.857b		ee 1b 04	inc $041b		inc 	AssemblerAddress+1
.857e						_AWBNoCarry:
.857e		60		rts			rts
.857f						_AWBRange:
.857f		4c 60 a4	jmp $a460		jmp 	RangeError
.8582						PrintHex:
.8582		48		pha				pha
.8583		4a		lsr a				lsr 	a
.8584		4a		lsr a				lsr 	a
.8585		4a		lsr a				lsr 	a
.8586		4a		lsr a				lsr 	a
.8587		20 8b 85	jsr $858b			jsr 	_PrintNibble
.858a		68		pla				pla
.858b						_PrintNibble:
.858b		29 0f		and #$0f			and 	#15
.858d		c9 0a		cmp #$0a			cmp 	#10
.858f		90 02		bcc $8593			bcc 	_NoShift
.8591		69 06		adc #$06			adc 	#6
.8593						_NoShift:
.8593		69 30		adc #$30			adc 	#48
.8595		4c 43 80	jmp $8043			jmp 	EXTPrintCharacter

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/instruction.asm

.8598						AssembleModeX:
.8598		5a		phy				phy
.8599		ad 1f 04	lda $041f			lda 	IsGroup1
.859c		f0 17		beq $85b5			beq 	_AMXGroup2
.859e		8a		txa				txa 							; is it in group # 1
.859f		29 40		and #$40			and 	#AM_ISG1
.85a1		f0 4d		beq $85f0			beq 	_AMXFail 				; no, give up.
.85a3		8a		txa				txa 							; get back.
.85a4		29 1f		and #$1f			and 	#$1F 					; this is now the offset.
.85a6		e0 e0		cpx #$e0			cpx 	#AM_IMMEDIATE 			; if not immediate, we can continue.
.85a8		d0 22		bne $85cc			bne 	_AMXHaveInfo
.85aa		ad 20 04	lda $0420			lda 	BaseOpcode 				; cannot store immediate.
.85ad		c9 81		cmp #$81			cmp 	#$81
.85af		f0 3f		beq $85f0			beq 	_AMXFail
.85b1		a9 08		lda #$08			lda 	#8 						; if immediate we use offset 8.
.85b3		80 17		bra $85cc			bra 	_AMXHaveInfo 			; odd design decision there.
.85b5						_AMXGroup2:
.85b5		8a		txa				txa 							; is it in group 2 ?
.85b6		29 20		and #$20			and 	#AM_ISG2
.85b8		f0 36		beq $85f0			beq 	_AMXFail 				; no, give up.
.85ba		8a		txa				txa 							; get the offset into Y
.85bb		29 1f		and #$1f			and 	#$1F
.85bd		4a		lsr a				lsr 	a 						; make it 0-7.
.85be		4a		lsr a				lsr  	a
.85bf		a8		tay				tay
.85c0		ad 21 04	lda $0421			lda 	ModeMask 				; shift the modemask left so you can check it against the requested offset
.85c3						_AMXCheckOkay:
.85c3		0a		asl a				asl 	a 						; shift modemask left enough times to check legitimate.
.85c4		88		dey				dey
.85c5		10 fc		bpl $85c3			bpl 	_AMXCheckOkay
.85c7		90 27		bcc $85f0			bcc 	_AMXFail 				; not allowed.
.85c9		8a		txa				txa  							; get mask back
.85ca		29 1f		and #$1f			and 	#$1F
.85cc						_AMXHaveInfo:
.85cc		e0 00		cpx #$00			cpx 	#$00 					; does it *require* an 8 bit operand
.85ce		10 04		bpl $85d4			bpl 	_AMXAnySize 			; checking bit 7, the zero page opcode flag.
.85d0		a4 60		ldy $60				ldy 	NSMantissa1 			; fail if it is outside range, e.g. the MSB is set.
.85d2		d0 1c		bne $85f0			bne 	_AMXFail
.85d4						_AMXAnySize:
.85d4		18		clc				clc 							; add offset to the base opcode
.85d5		6d 20 04	adc $0420			adc 	BaseOpcode
.85d8						_AMXOutputCode:
.85d8		20 44 85	jsr $8544			jsr 	AssemblerWriteByte 		; write the opcode out.
.85db		e0 28		cpx #$28			cpx 	#AM_ACC 				; A mode (e.g. ASL)
.85dd		f0 0e		beq $85ed			beq 	_AMXExit
.85df		a5 58		lda $58				lda 	NSMantissa0 			; write LSB operand
.85e1		20 44 85	jsr $8544			jsr 	AssemblerWriteByte
.85e4		e0 00		cpx #$00			cpx 	#$00 					; zeropage ?
.85e6		30 05		bmi $85ed			bmi 	_AMXExit
.85e8		a5 60		lda $60				lda 	NSMantissa1 			; write MSB operand
.85ea		20 44 85	jsr $8544			jsr 	AssemblerWriteByte
.85ed						_AMXExit:
.85ed		7a		ply				ply
.85ee		38		sec				sec
.85ef		60		rts				rts
.85f0						_AMXFail:
.85f0		a0 00		ldy #$00			ldy 	#0
.85f2						_AMXCheckOddities:
.85f2		8a		txa				txa
.85f3		d9 1a 86	cmp $861a,y			cmp 	ExtraOpcode+2,y 		; match address mode
.85f6		d0 15		bne $860d			bne 	_AMXCONext
.85f8		b9 18 86	lda $8618,y			lda 	ExtraOpcode+0,y 		; do the base opcodes match
.85fb		cd 20 04	cmp $0420			cmp 	BaseOpcode
.85fe		d0 0d		bne $860d			bne 	_AMXCONext
.8600		e0 00		cpx #$00			cpx 	#$00 					; requires zero page ?
.8602		10 04		bpl $8608			bpl 	_AMXCONotZero
.8604		a5 60		lda $60				lda 	NSMantissa1
.8606		d0 05		bne $860d			bne 	_AMXCONext
.8608						_AMXCONotZero:
.8608		b9 19 86	lda $8619,y			lda 	ExtraOpcode+1,y 		; get new opcode
.860b		80 cb		bra $85d8			bra 	_AMXOutputCode 			; and assemble it
.860d						_AMXCONext:
.860d		c8		iny				iny
.860e		c8		iny				iny
.860f		c8		iny				iny
.8610		b9 18 86	lda $8618,y			lda 	ExtraOpcode+0,y 		; end of table
.8613		d0 dd		bne $85f2			bne 	_AMXCheckOddities
.8615						_AMXCOFail:
.8615		7a		ply				ply
.8616		18		clc				clc
.8617		60		rts				rts
.8618						ExtraOpcode:
>8618		40 6c 01					.byte $40,$6c,AM_INDABS 	; jump
>861b		40 7c 02					.byte $40,$7C,AM_INDABSX 	; jump
>861e		a2 be 78					.byte $a2,$BE,AM_ABSY 		; ldx
>8621		a2 b6 80					.byte $a2,$B6,AM_ZEROY 		; ldx
>8624		82 96 80					.byte $82,$96,AM_ZEROY 		; stx
>8627		e2 1a 28					.byte $e2,$1a,AM_ACC 		; inc
>862a		c2 3a 28					.byte $c2,$3a,AM_ACC 		; dec
>862d		20 89 e0					.byte $20,$89,AM_IMMEDIATE 	; bit
>8630		60 9c 6c					.byte $60,$9c,AM_ABS 		; stz
>8633		60 9e 7c					.byte $60,$9e,AM_ABSX 		; stz
>8636		00						.byte $00

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/label.asm

.8637						LabelHere:
.8637		c8		iny				iny 								; skip .
.8638		a2 00		ldx #$00			ldx 	#0 							; get a term
.863a		20 d7 9c	jsr $9cd7			jsr 	EvaluateTerm
.863d		a5 50		lda $50				lda 	NSStatus 					; needs to be an integer reference.
.863f		c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.8641		d0 22		bne $8665			bne 	_ALType 					; otherwise typing error
.8643		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy reference address to zTemp0
.8645		85 36		sta $36				sta 	zTemp0 						; (e.g. where we store the address)
.8647		b5 60		lda $60,x			lda 	NSMantissa1,x
.8649		85 37		sta $37				sta 	zTemp0+1
.864b		5a		phy				phy 								; copy address in (64k)
.864c		a0 01		ldy #$01			ldy 	#1
.864e		ad 1a 04	lda $041a			lda	 	AssemblerAddress
.8651		92 36		sta ($36)			sta 	(zTemp0)
.8653		ad 1b 04	lda $041b			lda	 	AssemblerAddress+1
.8656		91 36		sta ($36),y			sta 	(zTemp0),y
.8658		c8		iny				iny
.8659		a9 00		lda #$00			lda 	#0 							; zero the rest.
.865b		91 36		sta ($36),y			sta 	(zTemp0),y
.865d		c8		iny				iny
.865e		91 36		sta ($36),y			sta 	(zTemp0),y
.8660		c8		iny				iny
.8661		91 36		sta ($36),y			sta 	(zTemp0),y
.8663		7a		ply				ply
.8664		60		rts				rts
.8665						_ALType:
.8665		4c 65 a4	jmp $a465			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/operands.asm

.8668						TypeAndCalculateOperand:
.8668		b1 30		lda ($30),y			lda 	(codePtr),y
.866a		a2 28		ldx #$28			ldx 	#AM_ACC 					; ACC if : or EOL
.866c		c9 3a		cmp #$3a			cmp 	#KWD_COLON
.866e		f0 5b		beq $86cb			beq 	_TACOExit
.8670		c9 80		cmp #$80			cmp 	#KWC_EOL
.8672		f0 57		beq $86cb			beq 	_TACOExit
.8674		c8		iny				iny
.8675		a2 e0		ldx #$e0			ldx 	#AM_IMMEDIATE
.8677		c9 23		cmp #$23			cmp 	#KWD_HASH 					; if hash, then immediate - constant.
.8679		f0 51		beq $86cc			beq 	CalculateOperand
.867b		c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; if ( then check for indirection
.867d		f0 1f		beq $869e			beq 	_TACOIndirect
.867f		88		dey				dey 								; undo get of first character
.8680		20 cc 86	jsr $86cc			jsr 	CalculateOperand 			; get operand
.8683		b1 30		lda ($30),y			lda 	(codePtr),y
.8685		a2 e4		ldx #$e4			ldx 	#AM_ZEROPAGE 				; if not, try zero page (then absolute)
.8687		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8689		d0 40		bne $86cb			bne 	_TACOExit
.868b		c8		iny				iny
.868c		20 d6 86	jsr $86d6			jsr 	TACOCheckXY 				; extract X,Y or 0 (neither) from the variable.
.868f		a2 f4		ldx #$f4			ldx 	#AM_ZEROX 					; check for X
.8691		c9 58		cmp #$58			cmp 	#'X'
.8693		f0 36		beq $86cb			beq 	_TACOExit
.8695		a2 80		ldx #$80			ldx 	#AM_ZEROY 					; check for Y
.8697		c9 59		cmp #$59			cmp 	#'Y'
.8699		f0 30		beq $86cb			beq 	_TACOExit
.869b						_TACOSyntax:
.869b		4c 5b a4	jmp $a45b			jmp 	SyntaxError
.869e						_TACOIndirect:
.869e		20 cc 86	jsr $86cc			jsr 	CalculateOperand 			; get the operand
.86a1		b1 30		lda ($30),y			lda 	(codePtr),y
.86a3		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if , then it must be ,X)
.86a5		f0 17		beq $86be			beq 	_TACOIndX
.86a7		20 6a 93	jsr $936a			jsr 	CheckRightBracket  			; otherwise must be ) or ),Y
.86aa		b1 30		lda ($30),y			lda 	(codePtr),y
.86ac		a2 d1		ldx #$d1			ldx 	#AM_IND
.86ae		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not comma then exit with (xx)
.86b0		d0 19		bne $86cb			bne 	_TACOExit
.86b2		c8		iny				iny
.86b3		20 d6 86	jsr $86d6			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.86b6		c9 59		cmp #$59			cmp 	#'Y' 						; check Y
.86b8		d0 e1		bne $869b			bne 	_TACOSyntax
.86ba		a2 d0		ldx #$d0			ldx 	#AM_INDY
.86bc		80 0d		bra $86cb			bra 	_TACOExit
.86be						_TACOIndX:
.86be		c8		iny				iny
.86bf		20 d6 86	jsr $86d6			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.86c2		c9 58		cmp #$58			cmp 	#'X' 						; check X
.86c4		d0 d5		bne $869b			bne 	_TACOSyntax
.86c6		20 6a 93	jsr $936a			jsr 	CheckRightBracket			; check )
.86c9		a2 c0		ldx #$c0			ldx 	#AM_INDX
.86cb						_TACOExit:
.86cb		60		rts				rts
.86cc						CalculateOperand:
.86cc		48		pha				pha
.86cd		da		phx				phx
.86ce		a2 00		ldx #$00			ldx 	#0 							; get 16 bit integer in Slot 0
.86d0		20 63 a2	jsr $a263			jsr 	Evaluate16BitInteger
.86d3		fa		plx				plx
.86d4		68		pla				pla
.86d5		60		rts				rts
.86d6						TACOCheckXY:
.86d6		b1 30		lda ($30),y			lda 	(codePtr),y
.86d8		29 c0		and #$c0			and 	#$C0 						; check it is an identifier reference.
.86da		c9 40		cmp #$40			cmp 	#$40
.86dc		d0 21		bne $86ff			bne 	_TCXYFail
.86de		b1 30		lda ($30),y			lda 	(codePtr),y
.86e0		18		clc				clc
.86e1		69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.86e3		85 37		sta $37				sta 	zTemp0+1
.86e5		c8		iny				iny
.86e6		b1 30		lda ($30),y			lda 	(codePtr),y
.86e8		c8		iny				iny
.86e9		85 36		sta $36				sta 	zTemp0
.86eb		5a		phy				phy 								; save position
.86ec		a0 02		ldy #$02			ldy 	#2 							; type is integer ?
.86ee		b1 36		lda ($36),y			lda 	(zTemp0),y
.86f0		d0 0c		bne $86fe			bne 	_TCXYPopFail
.86f2		a0 08		ldy #$08			ldy 	#8 							; get first character, should have bit 7 set as also last.
.86f4		b1 36		lda ($36),y			lda 	(zTemp0),y
.86f6		c9 d8		cmp #$d8			cmp 	#'X'+$80 					; should be X or Y
.86f8		f0 08		beq $8702			beq 	_TCXYFound
.86fa		c9 d9		cmp #$d9			cmp 	#'Y'+$80
.86fc		f0 04		beq $8702			beq 	_TCXYFound
.86fe						_TCXYPopFail:
.86fe		7a		ply				ply
.86ff						_TCXYFail:
.86ff		a9 00		lda #$00			lda 	#0
.8701		60		rts				rts
.8702						_TCXYFound:
.8702		7a		ply				ply 								; restore position
.8703		29 7f		and #$7f			and 	#$7F 						; throw bit 7
.8705		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/backload.asm

.8706						BackloadProgram:
.8706		20 d4 8d	jsr $8dd4			jsr 	NewProgram 					; does the actual NEW.
.8709		a2 87		ldx #$87			ldx 	#_BLLoad >> 8
.870b		a9 66		lda #$66			lda 	#_BLLoad & $FF
.870d		20 e2 93	jsr $93e2			jsr 	PrintStringXA
.8710		a9 14		lda #$14			lda 	#SOURCE_ADDRESS >> 13 		; start page
.8712		8d a2 07	sta $07a2			sta 	BackLoadPage
.8715		a9 00		lda #$00			lda 	#(($6000) & $FF)
.8717		8d a3 07	sta $07a3			sta 	0+BackLoadPointer
.871a		a9 60		lda #$60			lda 	#(($6000) >> 8)
.871c		8d a4 07	sta $07a4			sta 	1+BackLoadPointer
.871f		9c a5 07	stz $07a5			stz 	BackLoadLast 				; reset backload last.
.8722		9c a6 07	stz $07a6			stz 	BackLoadLast+1
.8725		a9 ff		lda #$ff			lda 	#$FF
.8727		8d fa ff	sta $fffa			sta 	$FFFA
.872a						_BPLoop:
.872a		a2 ff		ldx #$ff			ldx 	#$FF
.872c		20 9b 87	jsr $879b			jsr 	BLReadByte 					; read a byte
.872f		c9 00		cmp #$00			cmp 	#0
.8731		f0 2c		beq $875f			beq 	_BPExit 					; if 0 exit
.8733		30 2a		bmi $875f			bmi 	_BPExit 					; if -ve exit
.8735						_BPCopy:
.8735		e8		inx				inx  								; copy byte into the lineBuffer
.8736		9d 26 05	sta $0526,x			sta 	lineBuffer,x
.8739		9e 27 05	stz $0527,x			stz 	lineBuffer+1,x
.873c		20 9b 87	jsr $879b			jsr 	BLReadByte 					; read next byte
.873f		30 0a		bmi $874b			bmi 	_BPEndLine 					; -ve = EOL
.8741		c9 09		cmp #$09			cmp 	#9 							; handle TAB, make it space.
.8743		d0 02		bne $8747			bne 	_BPNotTab
.8745		a9 20		lda #$20			lda 	#' '
.8747						_BPNotTab:
.8747		c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.8749		b0 ea		bcs $8735			bcs 	_BPCopy 					; until a control character, should be 13 received.
.874b						_BPEndLine:
.874b		20 89 80	jsr $8089			jsr 	TKTokeniseLine 				; tokenise the line.
.874e		ad 27 04	lda $0427			lda 	tokenLineNumber 			; line number = 0
.8751		0d 28 04	ora $0428			ora 	tokenLineNumber+1
.8754		f0 d4		beq $872a			beq 	_BPLoop 					; not legal code, blank line or maybe a comment.
.8756		20 7b 87	jsr $877b			jsr 	BLCheckLast 				; check last backload okay.
.8759		38		sec				sec 								; append not insert
.875a		20 4f a6	jsr $a64f			jsr 	MemoryInsertLine 			; append to current program
.875d		80 cb		bra $872a			bra 	_BPLoop
.875f						_BPExit:
.875f		9c fa ff	stz $fffa			stz 	$FFFA
.8762		20 0f 92	jsr $920f			jsr 	ClearSystem 				; clear variables etc.
.8765		60		rts				rts
.8766						_BLLoad:
>8766		4c 6f 61 64 69 6e 67 20				.text 	"Loading from Memory",13,0
>876e		66 72 6f 6d 20 4d 65 6d 6f 72 79 0d 00
.877b						BLCheckLast:
.877b		ad a5 07	lda $07a5			lda 	BackLoadLast 				; check last < current
.877e		cd 27 04	cmp $0427			cmp 	tokenLineNumber
.8781		ad a6 07	lda $07a6			lda 	BackLoadLast+1
.8784		ed 28 04	sbc $0428			sbc 	tokenLineNumber+1
.8787		b0 0d		bcs $8796			bcs 	_BLCheckFail
.8789		ad 27 04	lda $0427			lda 	tokenLineNumber 			; update
.878c		8d a5 07	sta $07a5			sta 	BackLoadLast
.878f		ad 28 04	lda $0428			lda 	tokenLineNumber+1
.8792		8d a6 07	sta $07a6			sta 	BackLoadLast+1
.8795		60		rts				rts
.8796						_BLCheckFail:
.8796		a9 02		lda #$02		lda	#2
.8798		4c 83 93	jmp $9383		jmp	ErrorHandler
.879b						BLReadByte:
.879b		da		phx				phx
.879c		a6 0b		ldx $0b				ldx 	8+3 						; save current mapping for $6000 in X
.879e		ad a2 07	lda $07a2			lda 	BackLoadPage	 			; set current page
.87a1		85 0b		sta $0b				sta 	8+3
.87a3		ad a3 07	lda $07a3			lda 	BackLoadPointer 			; copy pointer to zTemp0
.87a6		85 36		sta $36				sta 	zTemp0
.87a8		ad a4 07	lda $07a4			lda 	BackLoadPointer+1
.87ab		85 37		sta $37				sta 	zTemp0+1
.87ad		b2 36		lda ($36)			lda 	(zTemp0) 					; read next byte
.87af		ee a3 07	inc $07a3			inc 	BackLoadPointer 			; bump pointer
.87b2		d0 0f		bne $87c3			bne 	_BLNoCarry
.87b4		ee a4 07	inc $07a4			inc 	BackLoadPointer+1
.87b7		10 0a		bpl $87c3			bpl 	_BLNoCarry 					; need a new page
.87b9		48		pha				pha
.87ba		a9 60		lda #$60			lda 	#$60 						; reset pointer
.87bc		8d a4 07	sta $07a4			sta 	BackLoadPointer+1
.87bf		ee a2 07	inc $07a2			inc 	BackLoadPage 				; next page from source.
.87c2		68		pla				pla
.87c3						_BLNoCarry:
.87c3		86 0b		stx $0b				stx 	8+3 						; restore mapping, then X.
.87c5		fa		plx				plx
.87c6		c9 00		cmp #$00			cmp 	#0
.87c8		60		rts				rts
.07a2						BackLoadPage:
>07a2								.fill  	1
.07a3						BackLoadPointer:
>07a3								.fill 	2
.07a5						BackLoadLast:
>07a5								.fill 	2

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/editor.asm

.87c9						EditProgramCode:
.87c9		ad 27 04	lda $0427			lda 	tokenLineNumber 			; try to find the line.
.87cc		ae 28 04	ldx $0428			ldx 	tokenLineNumber+1
.87cf		20 f3 a6	jsr $a6f3			jsr 	MemorySearch
.87d2		90 05		bcc $87d9			bcc 	_EPCNoDelete 				; reached the end : don't delete
.87d4		d0 03		bne $87d9			bne 	_EPCNoDelete 				; found slot but didn't match : no delete
.87d6		20 18 a6	jsr $a618			jsr 	MemoryDeleteLine 			; delete the line
.87d9						_EPCNoDelete:
.87d9		ad 29 04	lda $0429			lda 	tokenBuffer 				; buffer empty - we just want to delete a line.
.87dc		c9 80		cmp #$80			cmp 	#KWC_EOL
.87de		f0 0d		beq $87ed			beq 	_EPCNoInsert
.87e0		ad 27 04	lda $0427			lda 	tokenLineNumber 			; find the line - it cannot exist as we've just deleted it.
.87e3		ae 28 04	ldx $0428			ldx 	tokenLineNumber+1 			; so this can't fail, it returns some point in the code.
.87e6		20 f3 a6	jsr $a6f3			jsr 	MemorySearch
.87e9		18		clc				clc 								; insert at this point.
.87ea		20 4f a6	jsr $a64f			jsr 	MemoryInsertLine 			; insert the line
.87ed						_EPCNoInsert:
.87ed		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/warmstart.asm

.87ee						WarmStart:
.87ee		a2 ff		ldx #$ff			ldx 	#$FF
.87f0		9a		txs				txs
.87f1		a9 89		lda #$89			lda 	#CLICommandLine+$80 		; set console colour whatever the current colour is.
.87f3		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.87f6		20 b5 81	jsr $81b5			jsr 	EXTInputLine 				; get line to lineBuffer
.87f9		20 89 80	jsr $8089			jsr 	TKTokeniseLine 				; tokenise the line
.87fc		ad 27 04	lda $0427			lda 	tokenLineNumber 			; line number <> 0
.87ff		0d 28 04	ora $0428			ora 	tokenLineNumber+1
.8802		d0 17		bne $881b			bne 	_WSEditCode 				; if so,edit code.
.8804		9c 26 04	stz $0426			stz 	tokenOffset 				; zero the "offset", meaning it only runs one line.
.8807		a9 26		lda #$26			lda 	#((tokenOffset) & $FF)
.8809		85 30		sta $30				sta 	codePtr
.880b		a9 04		lda #$04			lda 	#((tokenOffset) >> 8)
.880d		85 31		sta $31				sta 	codePtr+1
.880f		ad 29 04	lda $0429			lda 	tokenBuffer 				; nothing to run
.8812		c9 80		cmp #$80			cmp 	#KWC_EOL
.8814		f0 d8		beq $87ee			beq 	WarmStart
.8816		20 71 8f	jsr $8f71			jsr 	RUNCodePointerLine 			; execute that line.
.8819		80 d3		bra $87ee			bra 	WarmStart
.881b						_WSEditCode:
.881b		20 c9 87	jsr $87c9			jsr 	EditProgramCode 			; edit the program code
.881e		20 0f 92	jsr $920f			jsr 	ClearSystem 				; clear all variables etc.
.8821		80 cb		bra $87ee			bra 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assemble.asm

.8823						AssembleCommand:
.8823		a2 00		ldx #$00			ldx 	#0
.8825		20 63 a2	jsr $a263			jsr 	Evaluate16BitInteger 		; start address
.8828		a5 58		lda $58				lda 	NSMantissa0
.882a		8d 1a 04	sta $041a			sta 	AssemblerAddress
.882d		a5 60		lda $60				lda 	NSMantissa1
.882f		8d 1b 04	sta $041b			sta 	AssemblerAddress+1
.8832		20 72 93	jsr $9372			jsr 	CheckComma
.8835		20 7e a2	jsr $a27e			jsr 	Evaluate8BitInteger 		; options 0-3
.8838		a5 58		lda $58				lda 	NSMantissa0
.883a		8d 1c 04	sta $041c			sta 	AssemblerControl
.883d		60		rts				rts
.883e		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assert.asm

.883f						AssertCommand:
.883f		a2 00		ldx #$00			ldx 	#0 							; bottom of stack
.8841		20 50 a2	jsr $a250			jsr 	EvaluateInteger 			; the assert test
.8844		20 05 a3	jsr $a305			jsr 	NSMIsZero 					; exit if result is non zero.
.8847		d0 05		bne $884e			bne 	_ACExit
.8849		a9 0a		lda #$0a		lda	#10
.884b		4c 83 93	jmp $9383		jmp	ErrorHandler
.884e						_ACExit:
.884e		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/call.asm

.884f						CallCommand:
.884f		a2 00		ldx #$00			ldx 	#0 							; get the routine address to level 0
.8851		20 63 a2	jsr $a263			jsr 	Evaluate16BitInteger
.8854						_CCClear
.8854		e8		inx				inx  								; clear 1,2 and 3 (for A X Y)
.8855		20 e3 a2	jsr $a2e3			jsr 	NSMSetZero 					; these are optional sequentially.
.8858		e0 04		cpx #$04			cpx 	#4
.885a		d0 f8		bne $8854			bne 	_CCClear
.885c		a2 00		ldx #$00			ldx 	#0 							; and keep trying while there are more values.
.885e						_CCCParam:
.885e		b1 30		lda ($30),y			lda 	(codePtr),y
.8860		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8862		d0 09		bne $886d			bne 	_CCCRun6502
.8864		c8		iny				iny 								; skip comma
.8865		e8		inx				inx	 								; next level
.8866		20 7e a2	jsr $a27e			jsr 	Evaluate8BitInteger 		; get A/X/Y
.8869		e0 03		cpx #$03			cpx 	#3
.886b		90 f1		bcc $885e			bcc 	_CCCParam 					; done all 3 ?
.886d						_CCCRun6502:
.886d		5a		phy				phy 								; save position
.886e		a5 60		lda $60				lda 	NSMantissa1 				; put address in zTemp0
.8870		85 37		sta $37				sta 	zTemp0+1
.8872		a5 58		lda $58				lda 	NSMantissa0
.8874		85 36		sta $36				sta 	zTemp0
.8876		a5 59		lda $59				lda 	NSMantissa0+1 				; get registers into A X Y
.8878		a6 5a		ldx $5a				ldx 	NSMantissa0+2
.887a		a4 5b		ldy $5b				ldy 	NSMantissa0+3
.887c		20 81 88	jsr $8881			jsr 	_CCCZTemp0 					; call zTemp0
.887f		7a		ply				ply 								; restore position and exit
.8880		60		rts				rts
.8881						_CCCZTemp0:
.8881		6c 36 00	jmp ($0036)			jmp 	(zTemp0)

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/data.asm

.8884						Command_Data:
.8884		a9 3a		lda #$3a			lda 	#KWD_COLON 					; advance to colon/EOL, e.g. ignore anything till then.
.8886		a2 80		ldx #$80			ldx 	#KWC_EOL
.8888		20 c5 92	jsr $92c5			jsr 	ScanForward
.888b		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/dim.asm

.888c						DimCommand:
.888c		b1 30		lda ($30),y			lda 	(codePtr),y
.888e		29 c0		and #$c0			and 	#$C0
.8890		c9 40		cmp #$40			cmp 	#$40
.8892		d0 7a		bne $890e			bne 	_DCSyntax 				; n o, error.
.8894		b1 30		lda ($30),y			lda 	(codePtr),y
.8896		18		clc				clc
.8897		69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8899		85 3f		sta $3f				sta 	zaTemp+1
.889b		c8		iny				iny
.889c		b1 30		lda ($30),y			lda 	(codePtr),y
.889e		c8		iny				iny
.889f		85 3e		sta $3e				sta 	zaTemp
.88a1		5a		phy				phy
.88a2		a0 02		ldy #$02			ldy 	#2 						; read type byte
.88a4		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.88a6		29 18		and #$18			and 	#NSBTypeMask 			; check it's not a procedure
.88a8		c9 18		cmp #$18			cmp 	#NSTProcedure
.88aa		f0 62		beq $890e			beq 	_DCSyntax
.88ac		b1 3e		lda ($3e),y			lda 	(zaTemp),y 				; check it's an array
.88ae		29 04		and #$04			and 	#NSBIsArray
.88b0		f0 64		beq $8916			beq 	_DCType
.88b2		a0 04		ldy #$04			ldy 	#4 						; check not already defined
.88b4		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.88b6		d0 59		bne $8911			bne 	_DCRedefine
.88b8		7a		ply				ply
.88b9		20 19 89	jsr $8919			jsr 	_DCGetSize 				; get array size, check it.
.88bc		5a		phy				phy
.88bd		a0 05		ldy #$05			ldy 	#5 						; store in first array size slot
.88bf		91 3e		sta ($3e),y			sta 	(zaTemp),y 				; second will be zero.
.88c1		7a		ply				ply 							; is there a second (e.g. ,x)
.88c2		b1 30		lda ($30),y			lda 	(codePtr),y
.88c4		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.88c6		d0 0a		bne $88d2			bne 	_DCOneDimension
.88c8		c8		iny				iny 							; skip comma
.88c9		20 19 89	jsr $8919			jsr 	_DCGetSize 				; get 2nd array size
.88cc		5a		phy				phy
.88cd		a0 06		ldy #$06			ldy 	#6 						; store in 2nd array size
.88cf		91 3e		sta ($3e),y			sta 	(zaTemp),y
.88d1		7a		ply				ply
.88d2						_DCOneDimension:
.88d2		5a		phy				phy 							; save position
.88d3		a0 05		ldy #$05			ldy 	#5 						; dimensions + 1 in AX (as zero based)
.88d5		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.88d7		aa		tax				tax
.88d8		c8		iny				iny
.88d9		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.88db		e8		inx				inx 							; bump them.
.88dc		1a		inc a				inc 	a
.88dd		20 8e a2	jsr $a28e			jsr 	Multiply8x8 			; work out the total number of elements -> zTemp0
.88e0		a5 37		lda $37				lda 	zTemp0+1 				; don't allow more than 8192 elements whatever
.88e2		29 e0		and #$e0			and 	#$E0
.88e4		d0 23		bne $8909			bne 	_DCSize
.88e6		a0 02		ldy #$02			ldy 	#2 						; get base type
.88e8		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.88ea		20 27 89	jsr $8927			jsr 	ScaleByBaseType 		; scale by base type
.88ed		a5 36		lda $36				lda 	zTemp0
.88ef		a6 37		ldx $37				ldx 	zTemp0+1
.88f1		20 85 9e	jsr $9e85			jsr 	AllocateXABytes 		; allocate memory
.88f4		a0 03		ldy #$03			ldy 	#3 						; copy into the address.
.88f6		91 3e		sta ($3e),y			sta 	(zaTemp),y
.88f8		c8		iny				iny
.88f9		8a		txa				txa
.88fa		91 3e		sta ($3e),y			sta 	(zaTemp),y
.88fc		7a		ply				ply 							; get position back
.88fd		20 6a 93	jsr $936a			jsr 	CheckRightBracket 		; check )
.8900		b1 30		lda ($30),y			lda 	(codePtr),y
.8902		c8		iny				iny 							; consume in case
.8903		c9 2c		cmp #$2c			cmp 	#KWD_COMMA		 		; if so do another DIM.
.8905		f0 85		beq $888c			beq 	DimCommand
.8907		88		dey				dey 							; undo consume
.8908		60		rts				rts
.8909						_DCSize:
.8909		a9 16		lda #$16		lda	#22
.890b		4c 83 93	jmp $9383		jmp	ErrorHandler
.890e						_DCSyntax:
.890e		4c 5b a4	jmp $a45b			jmp 	SyntaxError
.8911						_DCRedefine:
.8911		a9 15		lda #$15		lda	#21
.8913		4c 83 93	jmp $9383		jmp	ErrorHandler
.8916						_DCType:
.8916		4c 65 a4	jmp $a465			jmp 	TypeError
.8919						_DCGetSize:
.8919		a2 00		ldx #$00			ldx 	#0 						; get first index.
.891b		20 7e a2	jsr $a27e			jsr 	Evaluate8BitInteger 	; get array dimension
.891e		c9 00		cmp #$00			cmp 	#0 						; must be 1-254
.8920		f0 e7		beq $8909			beq 	_DCSize
.8922		c9 fe		cmp #$fe			cmp 	#254
.8924		f0 e3		beq $8909			beq 	_DCSize
.8926		60		rts				rts
.8927						ScaleByBaseType:
.8927		29 10		and #$10			and 	#NSBIsString 			; is it string
.8929		d0 19		bne $8944			bne 	_SBBTString
.892b		a5 37		lda $37				lda 	zTemp0+1 				; push value on stack
.892d		48		pha				pha
.892e		a5 36		lda $36				lda 	zTemp0
.8930		48		pha				pha
.8931		06 36		asl $36				asl 	zTemp0 					; x 2
.8933		26 37		rol $37				rol 	zTemp0+1
.8935		06 36		asl $36				asl 	zTemp0 					; x 4
.8937		26 37		rol $37				rol 	zTemp0+1
.8939		68		pla				pla 							; add stacked value = x 5
.893a		65 36		adc $36				adc 	zTemp0
.893c		85 36		sta $36				sta 	zTemp0
.893e		68		pla				pla
.893f		65 37		adc $37				adc 	zTemp0+1
.8941		85 37		sta $37				sta 	zTemp0+1
.8943		60		rts				rts
.8944						_SBBTString:
.8944		06 36		asl $36				asl 	zTemp0
.8946		26 37		rol $37				rol 	zTemp0+1
.8948		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/end.asm

.8949						EndCommand:
.8949		4c ee 87	jmp $87ee			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/for.asm

.894c						ForCommand:
.894c		a9 d9		lda #$d9			lda 	#STK_FOR+9 					; allocate 18 bytes on the return stack (see above).
.894e		20 07 b3	jsr $b307			jsr 	StackOpen
.8951		a2 00		ldx #$00			ldx 	#0
.8953		20 d7 9c	jsr $9cd7			jsr 	EvaluateTerm
.8956		b5 50		lda $50,x			lda 	NSStatus,x
.8958		c9 20		cmp #$20			cmp 	#NSBIsReference+NSTInteger 	; do we have an integer 4 byte reference.
.895a		d0 47		bne $89a3			bne		_FCError
.895c		a9 3d		lda #$3d			lda 	#KWD_EQUAL 					; =
.895e		20 7a 93	jsr $937a			jsr 	CheckNextA
.8961		e8		inx				inx
.8962		20 50 a2	jsr $a250			jsr 	EvaluateInteger 			; <from> in +1
.8965		b1 30		lda ($30),y			lda 	(codePtr),y
.8967		c8		iny				iny 								; consume it
.8968		48		pha				pha 								; save on stack for later
.8969		c9 c1		cmp #$c1			cmp 	#KWD_DOWNTO
.896b		f0 04		beq $8971			beq 	_FCNoSyntax
.896d		c9 db		cmp #$db			cmp 	#KWD_TO
.896f		d0 35		bne $89a6			bne 	_FCSyntaxError
.8971						_FCNoSyntax:
.8971		e8		inx				inx
.8972		20 50 a2	jsr $a250			jsr 	EvaluateInteger
.8975		20 4c b3	jsr $b34c			jsr 	STKSaveCodePosition 		; save loop back position
.8978		68		pla				pla 								; restore DOWNTO or TO
.8979		5a		phy				phy 								; save Y on the stack
.897a		49 c1		eor #$c1			eor 	#KWD_DOWNTO 				; 0 if DOWNTO, #0 if TO
.897c		f0 02		beq $8980			beq 	_FCNotDownTo
.897e		a9 02		lda #$02			lda 	#2
.8980						_FCNotDownTo:
.8980		3a		dec a				dec 	a 							; 255 if DOWNTO, 1 if TO
.8981		a0 10		ldy #$10			ldy 	#16
.8983		91 34		sta ($34),y			sta 	(basicStack),y 				; copy that out to the Basic Stack.
.8985		a0 06		ldy #$06			ldy 	#6 							; this is the address of the loop variable.
.8987		a5 58		lda $58				lda 	NSMantissa0
.8989		91 34		sta ($34),y			sta 	(basicStack),y
.898b		a5 60		lda $60				lda 	NSMantissa1
.898d		c8		iny				iny
.898e		91 34		sta ($34),y			sta 	(basicStack),y
.8990		a0 08		ldy #$08			ldy 	#8 							; set initial index value
.8992		a2 01		ldx #$01			ldx 	#1
.8994		20 a9 89	jsr $89a9			jsr 	FCIntegerToStack
.8997		a0 0c		ldy #$0c			ldy 	#12 						; set the terminal value
.8999		a2 02		ldx #$02			ldx 	#2
.899b		20 a9 89	jsr $89a9			jsr 	FCIntegerToStack
.899e		20 c4 89	jsr $89c4			jsr 	CopyIndexToReference
.89a1		7a		ply				ply 								; restore position
.89a2		60		rts				rts
.89a3						_FCError:
.89a3		4c 65 a4	jmp $a465			jmp 	TypeError
.89a6						_FCSyntaxError:
.89a6		4c 5b a4	jmp $a45b			jmp 	SyntaxError
.89a9						FCIntegerToStack:
.89a9		34 50		bit $50,x			bit 	NSStatus,x 					; is the value negative
.89ab		10 03		bpl $89b0			bpl	 	_FCNotNegative
.89ad		20 ac a2	jsr $a2ac			jsr 	NSMNegateMantissa 			; if so 2's complement the mantissa
.89b0						_FCNotNegative:
.89b0		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy out to the basic stack
.89b2		91 34		sta ($34),y			sta 	(basicStack),y
.89b4		c8		iny				iny
.89b5		b5 60		lda $60,x			lda 	NSMantissa1,x
.89b7		91 34		sta ($34),y			sta 	(basicStack),y
.89b9		c8		iny				iny
.89ba		b5 68		lda $68,x			lda 	NSMantissa2,x
.89bc		91 34		sta ($34),y			sta 	(basicStack),y
.89be		c8		iny				iny
.89bf		b5 70		lda $70,x			lda 	NSMantissa3,x
.89c1		91 34		sta ($34),y			sta 	(basicStack),y
.89c3		60		rts				rts
.89c4						CopyIndexToReference:
.89c4		5a		phy				phy
.89c5		a0 06		ldy #$06			ldy 	#6 							; copy address-8 to write to zTemp0
.89c7		38		sec				sec 								; (because we copy from offset 8)
.89c8		b1 34		lda ($34),y			lda 	(basicStack),y
.89ca		e9 08		sbc #$08			sbc 	#8
.89cc		85 36		sta $36				sta 	zTemp0
.89ce		c8		iny				iny
.89cf		b1 34		lda ($34),y			lda 	(basicStack),y
.89d1		e9 00		sbc #$00			sbc 	#0
.89d3		85 37		sta $37				sta 	zTemp0+1
.89d5		a2 04		ldx #$04			ldx 	#4 							; this is the copy counter/
.89d7		a0 0b		ldy #$0b			ldy 	#8+3 		 				; the MSB of the mantissa
.89d9		b1 34		lda ($34),y			lda 	(basicStack),y
.89db		0a		asl a				asl 	a 							; into carry
.89dc		a0 08		ldy #$08			ldy 	#8 							; where to copy from.
.89de		90 14		bcc $89f4			bcc 	_CITRNormal
.89e0		38		sec				sec
.89e1						_CITRNegative:
.89e1		a9 00		lda #$00			lda 	#0
.89e3		f1 34		sbc ($34),y			sbc 	(basicStack),y
.89e5		91 36		sta ($36),y			sta 	(zTemp0),y
.89e7		c8		iny				iny
.89e8		ca		dex				dex
.89e9		d0 f6		bne $89e1			bne 	_CITRNegative
.89eb		88		dey				dey 								; look at MSB of mantissa
.89ec		b1 36		lda ($36),y			lda 	(zTemp0),y 					; set the MSB as negative packed.
.89ee		09 80		ora #$80			ora 	#$80
.89f0		91 36		sta ($36),y			sta 	(zTemp0),y
.89f2		7a		ply				ply
.89f3		60		rts				rts
.89f4						_CITRNormal:
.89f4		b1 34		lda ($34),y			lda 	(basicStack),y 				; copy without negation.
.89f6		91 36		sta ($36),y			sta 	(zTemp0),y
.89f8		c8		iny				iny
.89f9		ca		dex				dex
.89fa		d0 f8		bne $89f4			bne 	_CITRNormal
.89fc		7a		ply				ply 								; and exit.
.89fd		60		rts				rts
.89fe						NextCommand:
.89fe		a9 d9		lda #$d9			lda 	#STK_FOR+9 					; check FOR is TOS
.8a00		a2 11		ldx #$11			ldx 	#ERRID_FOR 					; this error
.8a02		20 34 b3	jsr $b334			jsr 	StackCheckFrame
.8a05		5a		phy				phy
.8a06		a0 10		ldy #$10			ldy 	#16 						; get the step count
.8a08		b1 34		lda ($34),y			lda 	(basicStack),y
.8a0a		85 36		sta $36				sta 	zTemp0 						; this is the sign extend
.8a0c		30 02		bmi $8a10			bmi 	_NCStepNeg
.8a0e		64 36		stz $36				stz 	zTemp0 						; which is 0 or 255
.8a10						_NCStepNeg:
.8a10		a0 08		ldy #$08			ldy 	#8 							; offset to bump
.8a12		a2 04		ldx #$04			ldx 	#4 							; count to bump
.8a14		18		clc				clc
.8a15						_NCBump:
.8a15		71 34		adc ($34),y			adc 	(basicStack),y 				; add it
.8a17		91 34		sta ($34),y			sta 	(basicStack),y
.8a19		a5 36		lda $36				lda 	zTemp0 						; get sign extend for next time.
.8a1b		c8		iny				iny 								; next byte
.8a1c		ca		dex				dex 								; do four times
.8a1d		d0 f6		bne $8a15			bne 	_NCBump
.8a1f		20 c4 89	jsr $89c4			jsr		CopyIndexToReference		; copy it to the reference variable.
.8a22		a0 10		ldy #$10			ldy 	#16 						; get step count again
.8a24		b1 34		lda ($34),y			lda 	(basicStack),y
.8a26		0a		asl a				asl 	a 							; sign bit to carry
.8a27		a9 0c		lda #$0c			lda 	#12 						; offset of LHS = terminal offset
.8a29		85 38		sta $38				sta 	zTemp1
.8a2b		90 02		bcc $8a2f			bcc 	_NCCompRev 					; use if step is +ve
.8a2d		a9 08		lda #$08			lda 	#8 							; now the LHS = index value
.8a2f						_NCCompRev:
.8a2f		85 38		sta $38				sta 	zTemp1 						; so zTemp0 is the index for LHS
.8a31		49 04		eor #$04			eor 	#(8^12) 					; and zTemp0+1 is the index for RHS
.8a33		85 39		sta $39				sta 	zTemp1+1
.8a35		a2 04		ldx #$04			ldx 	#4 							; bytes to compare
.8a37		38		sec				sec
.8a38						_NCCompare:
.8a38		a4 38		ldy $38				ldy 	zTemp1 						; do compare using the two indices
.8a3a		b1 34		lda ($34),y			lda 	(basicStack),y
.8a3c		a4 39		ldy $39				ldy 	zTemp1+1
.8a3e		f1 34		sbc ($34),y			sbc 	(basicStack),y
.8a40		e6 38		inc $38				inc 	zTemp1 						; bump the indices (inc,dex do not change C or V)
.8a42		e6 39		inc $39				inc 	zTemp1+1
.8a44		ca		dex				dex 								; do it 4 times.
.8a45		d0 f1		bne $8a38			bne 	_NCCompare
.8a47		50 02		bvc $8a4b			bvc 	_NCNoOverflow 				; convert to signed comparison
.8a49		49 80		eor #$80			eor 	#$80
.8a4b						_NCNoOverflow:
.8a4b		7a		ply				ply 								; restore Y position
.8a4c		0a		asl a				asl 	a 							; is bit 7 set.
.8a4d		90 04		bcc $8a53			bcc 	_NCLoopBack 				; if no , >= so loop back
.8a4f		20 26 b3	jsr $b326			jsr 	StackClose 					; exit the loop
.8a52		60		rts				rts
.8a53						_NCLoopBack:
.8a53		20 5d b3	jsr $b35d			jsr 	STKLoadCodePosition 		; loop back
.8a56		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/gosub.asm

.8a57						Command_GOSUB:
.8a57		a2 00		ldx #$00			ldx 	#0
.8a59		20 63 a2	jsr $a263			jsr 	Evaluate16BitInteger 		; line number in Stack.0
.8a5c		a9 e3		lda #$e3			lda 	#STK_GOSUB+3
.8a5e		20 07 b3	jsr $b307			jsr 	StackOpen 					; create frame
.8a61		20 4c b3	jsr $b34c			jsr 	STKSaveCodePosition 		; save current position
.8a64		4c 7a 8a	jmp $8a7a			jmp 	GotoStackX
.8a67						Command_RETURN:
.8a67		a9 e0		lda #$e0			lda 	#STK_GOSUB 					; check TOS is this
.8a69		a2 0e		ldx #$0e			ldx 	#ERRID_GOSUB 				; this error
.8a6b		20 34 b3	jsr $b334			jsr 	StackCheckFrame
.8a6e		20 5d b3	jsr $b35d			jsr 	STKLoadCodePosition 		; restore code position
.8a71		20 26 b3	jsr $b326			jsr 	StackClose
.8a74		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/goto.asm

.8a75						GotoCommand:
.8a75		a2 00		ldx #$00			ldx 	#0 							; GOTO where
.8a77		20 63 a2	jsr $a263			jsr 	Evaluate16BitInteger
.8a7a						GotoStackX:
.8a7a		b5 60		lda $60,x			lda  	NSMantissa1,x 				; put line # in XA. I'll keep this even though
.8a7c		48		pha				pha 								; it is slightly inefficient, just in cases.
.8a7d		b5 58		lda $58,x			lda 	NSMantissa0,x
.8a7f		fa		plx				plx
.8a80		20 f3 a6	jsr $a6f3			jsr 	MemorySearch 				; transfer to line number AX.
.8a83		90 05		bcc $8a8a			bcc 	_GotoError 					; not found, off end.
.8a85		d0 03		bne $8a8a			bne 	_GotoError 					; not found exactly
.8a87		4c 6a 8f	jmp $8f6a			jmp 	RunNewLine 					; and go straight to new line code.
.8a8a						_GotoError:
.8a8a		a9 0d		lda #$0d		lda	#13
.8a8c		4c 83 93	jmp $9383		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/if.asm

.8a8f						IfCommand:
.8a8f		a2 00		ldx #$00			ldx 	#0 							; Get the if test.
.8a91		20 31 a2	jsr $a231			jsr 	EvaluateNumber
.8a94		b1 30		lda ($30),y			lda 	(codePtr),y
.8a96		c9 b5		cmp #$b5			cmp 	#KWD_THEN  					; could be THEN <stuff>
.8a98		d0 0a		bne $8aa4			bne 	_IfStructured 				; we still support it.
.8a9a		c8		iny				iny 								; consume THEN
.8a9b		20 05 a3	jsr $a305			jsr 	NSMIsZero 					; is it zero
.8a9e		f0 01		beq $8aa1			beq 	_IfFail 					; if fail, go to next line
.8aa0		60		rts				rts 								; if THEN just continue
.8aa1						_IfFail:
.8aa1		4c 45 8f	jmp $8f45			jmp 	EOLCommand
.8aa4						_IfStructured:
.8aa4		20 05 a3	jsr $a305			jsr 	NSMIsZero 					; is it zero
.8aa7		d0 07		bne $8ab0			bne 	_IfExit 					; if not, then continue normally.
.8aa9		a9 c2		lda #$c2			lda 	#KWD_ELSE 					; look for else/endif
.8aab		a2 b2		ldx #$b2			ldx 	#KWD_ENDIF
.8aad		20 c5 92	jsr $92c5			jsr 	ScanForward 				; and run from there
.8ab0						_IfExit:
.8ab0		60		rts				rts
.8ab1						ElseCode:
.8ab1		a9 b2		lda #$b2			lda 	#KWD_ENDIF 					; else is only run after the if clause succeeds
.8ab3		aa		tax				tax 								; so just go to the structure exit
.8ab4		20 c5 92	jsr $92c5			jsr 	ScanForward
.8ab7		60		rts				rts
.8ab8						EndIf:
.8ab8		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/inputprint.asm

.8ab9						Command_Input:
.8ab9		9c 24 04	stz $0424			stz 	isPrintFlag
.8abc		80 0c		bra $8aca			bra 	Command_IP_Main
.8abe						Command_CPrint:
.8abe		a9 7f		lda #$7f			lda 	#$7F 						; set input flag to character mode
.8ac0		8d 24 04	sta $0424			sta 	isPrintFlag 				; clear input flag
.8ac3		80 05		bra $8aca			bra 	Command_IP_Main
.8ac5						Command_Print:
.8ac5		a9 ff		lda #$ff			lda 	#$FF 						; set input flag
.8ac7		8d 24 04	sta $0424			sta 	isPrintFlag 				; clear input flag
.8aca						Command_IP_Main:
.8aca		18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.8acb						_CPLoop:
.8acb		08		php				php 								; save last action flag
.8acc		b1 30		lda ($30),y			lda 	(codePtr),y
.8ace		c9 80		cmp #$80			cmp  	#KWC_EOL 					; end of line or colon, exit now.
.8ad0		f0 54		beq $8b26			beq 	_CPExit
.8ad2		c9 3a		cmp #$3a			cmp 	#KWD_COLON
.8ad4		f0 50		beq $8b26			beq 	_CPExit
.8ad6		68		pla				pla 								; throw last action flag
.8ad7		b1 30		lda ($30),y			lda 	(codePtr),y
.8ad9		c8		iny				iny
.8ada		c9 3b		cmp #$3b			cmp 	#KWD_SEMICOLON				; is it a semicolon
.8adc		f0 45		beq $8b23			beq 	_CPContinueWithSameLine
.8ade		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; comma
.8ae0		f0 3c		beq $8b1e			beq 	_CPTab
.8ae2		c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; apostrophe (new line)
.8ae4		f0 34		beq $8b1a			beq 	_CPNewLine
.8ae6		88		dey				dey 								; undo the get.
.8ae7		20 8b 98	jsr $988b			jsr 	EvaluateExpressionAt0 		; evaluate expression at 0.
.8aea		b5 50		lda $50,x			lda 	NSStatus,x 					; read the status
.8aec		29 20		and #$20			and 	#NSBIsReference 			; is it a reference
.8aee		f0 0d		beq $8afd			beq 	_CPIsValue 					; no, display it.
.8af0		ad 24 04	lda $0424			lda 	isPrintFlag 				; if print, dereference and print.
.8af3		d0 05		bne $8afa			bne 	_CPIsPrint 					; otherwise display.
.8af5		20 2f 8b	jsr $8b2f			jsr 	CIInputValue 				; input a value to the reference
.8af8		80 20		bra $8b1a			bra 	_CPNewLine
.8afa						_CPIsPrint:
.8afa		20 50 9b	jsr $9b50			jsr 	Dereference 				; dereference if required.
.8afd						_CPIsValue:
.8afd		b5 50		lda $50,x			lda 	NSStatus,x 					; is it a number
.8aff		29 10		and #$10			and 	#NSBIsString
.8b01		f0 09		beq $8b0c			beq 	_CPNumber
.8b03		a6 60		ldx $60				ldx 	NSMantissa1 				; string, print the text.
.8b05		a5 58		lda $58				lda 	NSMantissa0
.8b07		20 92 8b	jsr $8b92			jsr 	CPPrintStringXA
.8b0a		80 be		bra $8aca			bra 	Command_IP_Main 			; loop round clearing carry so NL if end
.8b0c						_CPNumber:
.8b0c		a9 05		lda #$05			lda 	#5 							; maximum decimals
.8b0e		20 18 a1	jsr $a118			jsr 	ConvertNumberToString 		; convert to string (in unary str$() function)
.8b11		a2 06		ldx #$06			ldx 	#decimalBuffer >> 8
.8b13		a9 45		lda #$45			lda 	#decimalBuffer & $FF
.8b15		20 92 8b	jsr $8b92			jsr 	CPPrintStringXA 			; print it.
.8b18		80 b0		bra $8aca			bra 	Command_IP_Main				; loop round clearing carry so NL if end
.8b1a						_CPNewLine:
.8b1a		a9 0d		lda #$0d			lda 	#13
.8b1c		80 02		bra $8b20			bra 	_CPPrintCharDirect
.8b1e						_CPTab:
.8b1e		a9 09		lda #$09			lda 	#9 							; print TAB
.8b20						_CPPrintCharDirect:
.8b20		20 ad 8b	jsr $8bad			jsr 	CPPVControl 				; print TAB/CR using the non PETSCII
.8b23						_CPContinueWithSameLine:
.8b23		38		sec				sec 								; loop round with carry set, which
.8b24		80 a5		bra $8acb			bra 	_CPLoop 					; will inhibit final CR
.8b26						_CPExit:
.8b26		28		plp				plp 								; get last action flag
.8b27		b0 05		bcs $8b2e			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.8b29		a9 0d		lda #$0d			lda 	#13 						; print new line
.8b2b		20 ad 8b	jsr $8bad			jsr 	CPPVControl
.8b2e						_CPExit2:
.8b2e		60		rts				rts
.8b2f						CIInputValue:
.8b2f		a2 00		ldx #$00			ldx 	#0 							; input a line.
.8b31						_CIInputLine:
.8b31		20 b0 8b	jsr $8bb0			jsr 	CPInputVector 				; get key
.8b34		c9 0d		cmp #$0d			cmp 	#13 						; 13 = End
.8b36		f0 1f		beq $8b57			beq 	_CIHaveValue
.8b38		c9 08		cmp #$08			cmp 	#8 							; 8 = BS
.8b3a		f0 11		beq $8b4d			beq 	_CIBackspace
.8b3c		c9 20		cmp #$20			cmp 	#32 						; ignore other control characters
.8b3e		90 f1		bcc $8b31			bcc 	_CIInputLine
.8b40		e0 50		cpx #$50			cpx 	#80 						; max length
.8b42		b0 ed		bcs $8b31			bcs 	_CIInputLine
.8b44		9d 26 05	sta $0526,x			sta 	lineBuffer,x
.8b47		e8		inx				inx
.8b48		20 43 80	jsr $8043			jsr 	EXTPrintCharacter 			; echo it.
.8b4b		80 e4		bra $8b31			bra 	_CIInputLine
.8b4d						_CIBackspace:
.8b4d		e0 00		cpx #$00			cpx 	#0 							; nothing to delete
.8b4f		f0 e0		beq $8b31			beq 	_CIInputLine
.8b51		20 43 80	jsr $8043			jsr 	EXTPrintCharacter 			; echo it.
.8b54		ca		dex				dex
.8b55		80 da		bra $8b31			bra 	_CIInputLine
.8b57						_CIHaveValue:
.8b57		9e 26 05	stz $0526,x			stz 	lineBuffer,x 				; ASCIIZ string now in line buffer.
.8b5a		a5 50		lda $50				lda 	NSStatus 					; was it a string assignment
.8b5c		29 10		and #$10			and 	#NSBIsString
.8b5e		f0 17		beq $8b77			beq 	_CIAssignNumber 			; assign a number
.8b60		a2 01		ldx #$01			ldx 	#1
.8b62		a9 26		lda #$26			lda 	#lineBuffer & $FF 			; set up to point to new string
.8b64		95 58		sta $58,x			sta 	NSMantissa0,x
.8b66		a9 05		lda #$05			lda 	#lineBuffer >> 8
.8b68		95 60		sta $60,x			sta 	NSMantissa1,x
.8b6a		74 68		stz $68,x			stz 	NSMantissa2,x
.8b6c		74 70		stz $70,x			stz 	NSMantissa3,x
.8b6e		a9 10		lda #$10			lda 	#NSBIsString 				; so it becomes a string value
.8b70		95 50		sta $50,x			sta  	NSStatus,x
.8b72		ca		dex				dex 								; X = 0
.8b73		20 ec 8b	jsr $8bec			jsr 	AssignVariable
.8b76		60		rts				rts
.8b77						_CIAssignNumber:
.8b77		a9 26		lda #$26			lda 	#lineBuffer & $FF 			; set up to point to new string
.8b79		85 36		sta $36				sta 	zTemp0
.8b7b		a9 05		lda #$05			lda 	#lineBuffer >> 8
.8b7d		85 37		sta $37				sta 	zTemp0+1
.8b7f		a2 01		ldx #$01			ldx 	#1 							; put in slot 1
.8b81		20 f8 9f	jsr $9ff8			jsr 	ValEvaluateZTemp0 			; use the VAL() code
.8b84		90 07		bcc $8b8d			bcc 	_CIIsOkay
.8b86		a9 3f		lda #$3f			lda 	#"?" 						; error ?
.8b88		20 a5 8b	jsr $8ba5			jsr 	CPPrintVector
.8b8b		80 a2		bra $8b2f			bra 	CIInputValue
.8b8d						_CIIsOkay:
.8b8d		ca		dex				dex 								; X = 0
.8b8e		20 ec 8b	jsr $8bec			jsr 	AssignVariable
.8b91		60		rts				rts
.8b92						CPPrintStringXA:
.8b92		5a		phy				phy
.8b93		86 37		stx $37				stx 	zTemp0+1
.8b95		85 36		sta $36				sta 	zTemp0
.8b97		a0 00		ldy #$00			ldy 	#0
.8b99						_PSXALoop:
.8b99		b1 36		lda ($36),y			lda 	(zTemp0),y
.8b9b		f0 06		beq $8ba3			beq 	_PSXAExit
.8b9d		20 a5 8b	jsr $8ba5			jsr 	CPPrintVector
.8ba0		c8		iny				iny
.8ba1		80 f6		bra $8b99			bra 	_PSXALoop
.8ba3						_PSXAExit:
.8ba3		7a		ply				ply
.8ba4		60		rts				rts
.8ba5						CPPrintVector:
.8ba5		2c 24 04	bit $0424			bit 	isPrintFlag 				; check if char only mode and call appropriate handler.
.8ba8		30 03		bmi $8bad			bmi 	CPPVControl
.8baa		4c 4d 80	jmp $804d			jmp 	EXTPrintNoControl
.8bad						CPPVControl:
.8bad		4c 43 80	jmp $8043			jmp 	EXTPrintCharacter
.8bb0						CPInputVector:
.8bb0		4c ad 81	jmp $81ad			jmp 	KNLGetSingleCharacter

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/let.asm

.8bb3						LetCommand:
.8bb3		a2 00		ldx #$00			ldx 	#0
.8bb5		b1 30		lda ($30),y			lda 	(codePtr),y
.8bb7		c9 b8		cmp #$b8			cmp 	#KWD_AT
.8bb9		d0 14		bne $8bcf			bne 	_LCStandard
.8bbb		c8		iny				iny 								; skip equal
.8bbc		20 d7 9c	jsr $9cd7			jsr 	EvaluateTerm 				; get a number (the address of the reference)
.8bbf		20 50 9b	jsr $9b50			jsr 	Dereference 				; dereference it to a value
.8bc2		b5 50		lda $50,x			lda 	NSStatus,x 					; check integer
.8bc4		49 20		eor #$20			eor 	#NSBIsReference	 			; toggle reference
.8bc6		95 50		sta $50,x			sta 	NSStatus,x
.8bc8		29 20		and #$20			and 	#NSBIsReference 			; if it is now a reference, continue
.8bca		d0 0f		bne $8bdb			bne 	_LCMain
.8bcc		4c 65 a4	jmp $a465			jmp 	TypeError 					; was a reference before.
.8bcf						_LCStandard:
.8bcf		ad 75 98	lda $9875			lda 	PrecedenceLevel+"*"			; precedence > this
.8bd2		20 8f 98	jsr $988f			jsr 	EvaluateExpressionAtPrecedence
.8bd5		b5 50		lda $50,x			lda 	NSStatus,x 					; is it a reference to an array marked as procedure ?
.8bd7		c9 38		cmp #$38			cmp		#NSTProcedure+NSBIsReference
.8bd9		f0 0e		beq $8be9			beq 	_LetGoProc 					; it's a procedure call.
.8bdb						_LCMain:
.8bdb		a9 3d		lda #$3d			lda 	#"=" 						; check =
.8bdd		20 7a 93	jsr $937a			jsr 	CheckNextA
.8be0		e8		inx				inx 								; RHS
.8be1		20 28 a2	jsr $a228			jsr 	EvaluateValue
.8be4		ca		dex				dex
.8be5		20 ec 8b	jsr $8bec			jsr 	AssignVariable
.8be8		60		rts				rts
.8be9						_LetGoProc:
.8be9		4c 1b 8e	jmp $8e1b			jmp 	CallProcedure
.8bec						AssignVariable:
.8bec		b5 50		lda $50,x			lda 	NSStatus,x 					; check the string/number type bits match
.8bee		48		pha				pha 								; save a copy
.8bef		55 51		eor $51,x			eor 	NSStatus+1,x
.8bf1		29 10		and #$10			and 	#NSBIsString
.8bf3		d0 0b		bne $8c00			bne 	_ASError
.8bf5		68		pla				pla 								; get back
.8bf6		29 10		and #$10			and 	#NSBIsString 				; check type
.8bf8		d0 03		bne $8bfd			bne 	_ASString
.8bfa		4c 8e 9a	jmp $9a8e			jmp 	AssignNumber
.8bfd						_ASString:
.8bfd		4c ec 9a	jmp $9aec			jmp 	AssignString
.8c00						_ASError:
.8c00		4c 65 a4	jmp $a465			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/list.asm

.8c03						Command_List:
.8c03		9c 22 04	stz $0422			stz 	listIndent 					; reset indent.
.8c06		a9 3f		lda #$3f			lda 	#$3F 						; silence at list.
.8c08		20 6b 80	jsr $806b			jsr 	SNDCommand
.8c0b		b1 30		lda ($30),y			lda 	(codePtr),y
.8c0d		29 c0		and #$c0			and 	#$C0 				 		; if so, we are list procedure() which is a seperate block
.8c0f		c9 40		cmp #$40			cmp 	#$40  						; of code.
.8c11		f0 72		beq $8c85			beq 	_CLListProcedure
.8c13		64 5c		stz $5c				stz		NSMantissa0+4				; set the lower (slot 4) to 0 and upper (slot 7) to $FFFF
.8c15		64 64		stz $64				stz 	NSMantissa1+4 				; these are the default top and bottom.
.8c17		a9 ff		lda #$ff			lda 	#$FF
.8c19		85 5f		sta $5f				sta 	NSMantissa0+7
.8c1b		85 67		sta $67				sta 	NSMantissa1+7
.8c1d		b1 30		lda ($30),y			lda 	(codePtr),y
.8c1f		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8c21		f0 1a		beq $8c3d			beq 	_CLSecond
.8c23		20 02 8d	jsr $8d02			jsr 	CLIsDigit 					; if not digit, list all
.8c26		b0 20		bcs $8c48			bcs 	_CLStart
.8c28		a2 04		ldx #$04			ldx 	#4 							; get 1st range into slot 4
.8c2a		20 63 a2	jsr $a263			jsr 	Evaluate16BitInteger
.8c2d		b1 30		lda ($30),y			lda 	(codePtr),y
.8c2f		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8c31		f0 0a		beq $8c3d			beq 	_CLSecond 					; if so go get it
.8c33		a5 5c		lda $5c				lda 	NSMantissa0+4 				; copy 4->7
.8c35		85 5f		sta $5f				sta 	NSMantissa0+7
.8c37		a5 64		lda $64				lda 	NSMantissa1+4
.8c39		85 67		sta $67				sta 	NSMantissa1+7
.8c3b		80 0b		bra $8c48			bra 	_CLStart
.8c3d						_CLSecond:
.8c3d		c8		iny				iny 								; consume comma
.8c3e		20 02 8d	jsr $8d02			jsr 	CLIsDigit 					; digit found
.8c41		b0 05		bcs $8c48			bcs 	_CLStart 					; if not, continue listing
.8c43		a2 07		ldx #$07			ldx 	#7 							; load 2nd range into slot 7
.8c45		20 63 a2	jsr $a263			jsr 	Evaluate16BitInteger
.8c48						_CLStart
.8c48		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8c4a		85 30		sta $30				sta 	codePtr
.8c4c		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8c4e		85 31		sta $31				sta 	codePtr+1
.8c50						_CLLoop:
.8c50		a5 f2		lda $f2				lda 	kernel.args.events.pending 	; load pending event count into accumulator
.8c52		f0 03		beq $8c57			beq 	_NoEvents					; if zero, skip with Z flag set.
.8c54		20 2d 81	jsr $812d			jsr 	ProcessEvents
.8c57						_NoEvents:
.8c57		d0 27		bne $8c80			bne 	_CLBreak
.8c59		b2 30		lda ($30)			lda 	(codePtr)
.8c5b		f0 20		beq $8c7d			beq 	_CLExit
.8c5d		a2 04		ldx #$04			ldx 	#4 							; check range every time, line numbers aren't in order.
.8c5f		20 f1 8c	jsr $8cf1			jsr 	CLCompareLineNo
.8c62		90 0c		bcc $8c70			bcc 	_CLNext
.8c64		a2 07		ldx #$07			ldx 	#7
.8c66		20 f1 8c	jsr $8cf1			jsr 	CLCompareLineNo
.8c69		f0 02		beq $8c6d			beq 	_CLDoThisOne
.8c6b		b0 03		bcs $8c70			bcs 	_CLNext
.8c6d						_CLDoThisOne:
.8c6d		20 de 8c	jsr $8cde			jsr 	CLListOneLine 				; routine to list the current line.
.8c70						_CLNext:
.8c70		18		clc				clc
.8c71		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8c73		65 30		adc $30				adc 	codePtr
.8c75		85 30		sta $30				sta 	codePtr
.8c77		90 02		bcc $8c7b			bcc 	_CREExit
.8c79		e6 31		inc $31				inc 	codePtr+1 					; carry
.8c7b						_CREExit:
.8c7b		80 d3		bra $8c50			bra 	_CLLoop
.8c7d						_CLExit:
.8c7d		4c ee 87	jmp $87ee			jmp 	WarmStart
.8c80						_CLBreak:
.8c80		a9 01		lda #$01		lda	#1
.8c82		4c 83 93	jmp $9383		jmp	ErrorHandler
.8c85						_CLListProcedure:
.8c85		b1 30		lda ($30),y			lda 	(codePtr),y
.8c87		85 38		sta $38				sta 	zTemp1
.8c89		c8		iny				iny
.8c8a		b1 30		lda ($30),y			lda 	(codePtr),y
.8c8c		85 39		sta $39				sta 	zTemp1+1
.8c8e		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8c90		85 30		sta $30				sta 	codePtr
.8c92		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8c94		85 31		sta $31				sta 	codePtr+1
.8c96						_CLLPSearch:
.8c96		b2 30		lda ($30)			lda 	(codePtr)
.8c98		c9 00		cmp #$00			cmp 	#0 							; if zero, end
.8c9a		f0 e1		beq $8c7d			beq 	_CLExit
.8c9c		a0 03		ldy #$03			ldy 	#3 							; check if PROC something
.8c9e		b1 30		lda ($30),y			lda 	(codePtr),y
.8ca0		c9 af		cmp #$af			cmp 	#KWD_PROC
.8ca2		d0 0e		bne $8cb2			bne 	_CLLPNext
.8ca4		c8		iny				iny 								; check if PROC this.
.8ca5		b1 30		lda ($30),y			lda 	(codePtr),y
.8ca7		c5 38		cmp $38				cmp 	zTemp1 						; does it match ?
.8ca9		d0 07		bne $8cb2			bne 	_CLLPNext
.8cab		c8		iny				iny
.8cac		b1 30		lda ($30),y			lda 	(codePtr),y
.8cae		c5 39		cmp $39				cmp 	zTemp1+1
.8cb0		f0 0d		beq $8cbf			beq 	_CLLPFound
.8cb2						_CLLPNext:
.8cb2		18		clc				clc
.8cb3		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8cb5		65 30		adc $30				adc 	codePtr
.8cb7		85 30		sta $30				sta 	codePtr
.8cb9		90 02		bcc $8cbd			bcc 	_CREExit
.8cbb		e6 31		inc $31				inc 	codePtr+1 					; carry
.8cbd						_CREExit:
.8cbd		80 d7		bra $8c96			bra 	_CLLPSearch
.8cbf						_CLLPFound:
.8cbf		b2 30		lda ($30)			lda 	(codePtr)
.8cc1		f0 ba		beq $8c7d			beq 	_CLExit
.8cc3		a0 03		ldy #$03			ldy 	#3 							; get first keyword
.8cc5		b1 30		lda ($30),y			lda 	(codePtr),y
.8cc7		48		pha				pha
.8cc8		20 de 8c	jsr $8cde			jsr 	CLListOneLine 				; list line and go forward
.8ccb		18		clc				clc
.8ccc		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8cce		65 30		adc $30				adc 	codePtr
.8cd0		85 30		sta $30				sta 	codePtr
.8cd2		90 02		bcc $8cd6			bcc 	_CREExit
.8cd4		e6 31		inc $31				inc 	codePtr+1 					; carry
.8cd6						_CREExit:
.8cd6		68		pla				pla 								; reached ENDPROC ?
.8cd7		c9 b3		cmp #$b3			cmp 	#KWD_ENDPROC
.8cd9		d0 e4		bne $8cbf			bne 	_CLLPFound
.8cdb		4c ee 87	jmp $87ee			jmp 	WarmStart
.8cde						CLListOneLine:
.8cde		20 28 93	jsr $9328			jsr 	ScanGetCurrentLineStep 		; get indent adjust.
.8ce1		20 7f 80	jsr $807f			jsr 	TKListConvertLine 			; convert line into token Buffer
.8ce4		a2 04		ldx #$04			ldx 	#(tokenBuffer >> 8) 		; print that line
.8ce6		a9 29		lda #$29			lda 	#(tokenBuffer & $FF)
.8ce8		20 e2 93	jsr $93e2			jsr 	PrintStringXA
.8ceb		a9 0d		lda #$0d			lda 	#13 						; new line
.8ced		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.8cf0		60		rts				rts
.8cf1						CLCompareLineNo:
.8cf1		38		sec				sec
.8cf2		a0 01		ldy #$01			ldy 	#1
.8cf4		b1 30		lda ($30),y			lda 	(codePtr),y
.8cf6		f5 58		sbc $58,x			sbc 	NSMantissa0,x
.8cf8		85 36		sta $36				sta 	zTemp0
.8cfa		c8		iny				iny
.8cfb		b1 30		lda ($30),y			lda 	(codePtr),y
.8cfd		f5 60		sbc $60,x			sbc 	NSMantissa1,x
.8cff		05 36		ora $36				ora 	zTemp0
.8d01		60		rts				rts
.8d02						CLIsDigit:
.8d02		b1 30		lda ($30),y			lda 	(codePtr),y
.8d04		c9 30		cmp #$30			cmp 	#"0"
.8d06		90 03		bcc $8d0b			bcc	 	_CLIDExitFalse
.8d08		c9 3a		cmp #$3a			cmp 	#"9"+1
.8d0a		60		rts				rts
.8d0b						_CLIDExitFalse:
.8d0b		38		sec				sec
.8d0c		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/local.asm

.8d0d						Command_LOCAL:
.8d0d		a2 00		ldx #$00			ldx 	#0 							; at level 0
.8d0f		20 1b 8d	jsr $8d1b			jsr 	LocaliseNextTerm 			; convert term to a local.
.8d12		b1 30		lda ($30),y			lda 	(codePtr),y
.8d14		c8		iny				iny
.8d15		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8d17		f0 f4		beq $8d0d			beq 	Command_LOCAL 				; if so, localise another variable.
.8d19		88		dey				dey 								; unpick pre-get
.8d1a		60		rts				rts
.8d1b						LocaliseNextTerm:
.8d1b		20 d7 9c	jsr $9cd7			jsr 	EvaluateTerm 				; evaluate the term
.8d1e		b5 50		lda $50,x			lda 	NSStatus,x
.8d20		29 20		and #$20			and 	#NSBIsReference 			; check it is a reference, must be a variable.
.8d22		f0 5c		beq $8d80			beq		_LNTError
.8d24		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy address of variable to zTemp0
.8d26		85 36		sta $36				sta 	zTemp0
.8d28		b5 60		lda $60,x			lda 	NSMantissa1,x
.8d2a		85 37		sta $37				sta  	zTemp0+1
.8d2c		b5 50		lda $50,x			lda 	NSStatus,x 					; figure out what it is.
.8d2e		29 10		and #$10			and 	#NSBIsString
.8d30		d0 1e		bne $8d50			bne 	_LNTPushString
.8d32		5a		phy				phy
.8d33		a0 00		ldy #$00			ldy 	#0 							; push 0 to 4 inclusive, the number values, on the stack, and zero them as you go.
.8d35						_LNTPushNumLoop:
.8d35		b1 36		lda ($36),y			lda		(zTemp0),y
.8d37		20 e6 b2	jsr $b2e6			jsr 	StackPushByte
.8d3a		c8		iny				iny
.8d3b		c0 05		cpy #$05			cpy 	#5
.8d3d		d0 f6		bne $8d35			bne 	_LNTPushNumLoop
.8d3f		a5 36		lda $36				lda 	zTemp0 						; push the actual target address to write on the stack
.8d41		20 e6 b2	jsr $b2e6			jsr 	StackPushByte
.8d44		a5 37		lda $37				lda 	zTemp0+1
.8d46		20 e6 b2	jsr $b2e6			jsr 	StackPushByte
.8d49		a9 01		lda #$01			lda 	#STK_LOCALN 				; push local-number marker.
.8d4b		20 e6 b2	jsr $b2e6			jsr 	StackPushByte
.8d4e		7a		ply				ply
.8d4f		60		rts				rts
.8d50						_LNTPushString:
.8d50		5a		phy				phy
.8d51		b2 36		lda ($36)			lda 	(zTemp0) 					; put address of string in zTemp1
.8d53		85 38		sta $38				sta 	zTemp1
.8d55		a0 01		ldy #$01			ldy 	#1
.8d57		b1 36		lda ($36),y			lda 	(zTemp0),y
.8d59		85 39		sta $39				sta 	zTemp1+1
.8d5b		a0 00		ldy #$00			ldy 	#0 							; output string
.8d5d		c9 00		cmp #$00			cmp 	#0 							; if not assigned string
.8d5f		f0 0a		beq $8d6b			beq 	_LNTStringOut
.8d61						_LNTPushStrLoop:
.8d61		b1 38		lda ($38),y			lda 	(zTemp1),y
.8d63		f0 06		beq $8d6b			beq 	_LNTStringOut
.8d65		20 e6 b2	jsr $b2e6			jsr 	StackPushByte
.8d68		c8		iny				iny
.8d69		80 f6		bra $8d61			bra 	_LNTPushStrLoop
.8d6b						_LNTStringOut:
.8d6b		98		tya				tya									; output length (chars written).
.8d6c		20 e6 b2	jsr $b2e6			jsr 	StackPushByte
.8d6f		b5 58		lda $58,x			lda 	NSMantissa0,x 				; output address of the string record *not* the string itself
.8d71		20 e6 b2	jsr $b2e6			jsr 	StackPushByte
.8d74		b5 60		lda $60,x			lda 	NSMantissa1,x
.8d76		20 e6 b2	jsr $b2e6			jsr 	StackPushByte
.8d79		a9 02		lda #$02			lda 	#STK_LOCALS 				; push local-string marker.
.8d7b		20 e6 b2	jsr $b2e6			jsr 	StackPushByte
.8d7e		7a		ply				ply
.8d7f		60		rts				rts
.8d80						_LNTError:
.8d80		4c 5b a4	jmp $a45b			jmp 	SyntaxError
.8d83						LocalPopValue:
.8d83		20 fe b2	jsr $b2fe			jsr 	StackPopByte
.8d86		c9 01		cmp #$01			cmp 	#STK_LOCALN 				; if not local-N
.8d88		d0 17		bne $8da1			bne 	_LPVString
.8d8a		20 fe b2	jsr $b2fe			jsr 	StackPopByte 				; address
.8d8d		85 37		sta $37				sta 	zTemp0+1
.8d8f		20 fe b2	jsr $b2fe			jsr 	StackPopByte
.8d92		85 36		sta $36				sta 	zTemp0
.8d94		5a		phy				phy
.8d95		a0 04		ldy #$04			ldy 	#4 							; copy back
.8d97						_LPVNumberCopy:
.8d97		20 fe b2	jsr $b2fe			jsr 	StackPopByte
.8d9a		91 36		sta ($36),y			sta 	(zTemp0),y
.8d9c		88		dey				dey
.8d9d		10 f8		bpl $8d97			bpl 	_LPVNumberCopy
.8d9f		7a		ply				ply 								; and complete
.8da0		60		rts				rts
.8da1						_LPVString:
.8da1		20 fe b2	jsr $b2fe			jsr 	StackPopByte 				; address of record copied to zTemp0
.8da4		85 37		sta $37				sta 	zTemp0+1
.8da6		20 fe b2	jsr $b2fe			jsr 	StackPopByte
.8da9		85 36		sta $36				sta 	zTemp0
.8dab		5a		phy				phy
.8dac		b2 36		lda ($36)			lda 	(zTemp0) 					; address to write string to copied to zTemp1
.8dae		85 38		sta $38				sta 	zTemp1
.8db0		a0 01		ldy #$01			ldy 	#1
.8db2		b1 36		lda ($36),y			lda 	(zTemp0),y
.8db4		85 39		sta $39				sta 	zTemp1+1
.8db6		20 fe b2	jsr $b2fe			jsr 	StackPopByte 				; # chars to get => y
.8db9		a8		tay				tay
.8dba		a5 39		lda $39				lda 	zTemp1+1 					; if no target (e.g. was "" originally) exit
.8dbc		f0 0e		beq $8dcc			beq 	_LPVStringCopied
.8dbe		a9 00		lda #$00			lda 	#0 							; NULL on end
.8dc0		91 38		sta ($38),y			sta 	(zTemp1),y
.8dc2						_LPVStringCopy:
.8dc2		88		dey				dey
.8dc3		30 07		bmi $8dcc			bmi 	_LPVStringCopied
.8dc5		20 fe b2	jsr $b2fe			jsr 	StackPopByte
.8dc8		91 38		sta ($38),y			sta 	(zTemp1),y
.8dca		80 f6		bra $8dc2			bra 	_LPVStringCopy
.8dcc						_LPVStringCopied:
.8dcc		fa		plx				plx
.8dcd		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/new.asm

.8dce						NewCommand:
.8dce		20 d4 8d	jsr $8dd4			jsr 	NewProgram 					; does the actual NEW.
.8dd1		4c ee 87	jmp $87ee			jmp 	WarmStart 					; and warm starts straight away.
.8dd4						NewProgram:
.8dd4		20 d5 a6	jsr $a6d5			jsr 	MemoryNew
.8dd7		9c 00 10	stz $1000			stz 	VariableSpace 				; erase all variables.
.8dda		20 0f 92	jsr $920f			jsr 	ClearSystem					; clear everything.
.8ddd		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/poke.asm

.8dde						PokeBCommand:
.8dde		a9 01		lda #$01			lda 	#1
.8de0		80 0c		bra $8dee			bra 	PokeCommand
.8de2						PokeWCommand:
.8de2		a9 02		lda #$02			lda 	#2
.8de4		80 08		bra $8dee			bra 	PokeCommand
.8de6						PokeLCommand:
.8de6		a9 03		lda #$03			lda 	#3
.8de8		80 04		bra $8dee			bra 	PokeCommand
.8dea						PokeDCommand:
.8dea		a9 04		lda #$04			lda 	#4
.8dec		80 00		bra $8dee			bra 	PokeCommand
.8dee						PokeCommand:
.8dee		48		pha				pha 								; save count on stack
.8def		a2 00		ldx #$00			ldx 	#0 							; bottom of stack
.8df1		20 63 a2	jsr $a263			jsr		Evaluate16BitInteger 		; address
.8df4		20 72 93	jsr $9372			jsr 	CheckComma
.8df7		e8		inx				inx
.8df8		20 50 a2	jsr $a250			jsr		EvaluateInteger 			; data
.8dfb		a5 58		lda $58				lda 	NSMantissa0 				; copy address
.8dfd		85 36		sta $36				sta 	zTemp0
.8dff		a5 60		lda $60				lda 	NSMantissa1
.8e01		85 37		sta $37				sta 	zTemp0+1
.8e03		68		pla				pla 								; count -> zTemp1
.8e04		85 38		sta $38				sta 	zTemp1
.8e06		5a		phy				phy 								; save Y position.
.8e07		a0 00		ldy #$00			ldy 	#0 							; index to write
.8e09		a2 00		ldx #$00			ldx 	#0 							; index to read
.8e0b						_PCLoop:
.8e0b		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; read byte from mantissa and copy out
.8e0d		91 36		sta ($36),y			sta 	(zTemp0),y
.8e0f		c8		iny				iny 								; next byte to write
.8e10		8a		txa				txa 								; next byte to read - stack layout in 04data.inc
.8e11		18		clc				clc
.8e12		69 08		adc #$08			adc 	#MathStackSize
.8e14		aa		tax				tax
.8e15		c6 38		dec $38				dec 	zTemp1 						; done them all
.8e17		d0 f2		bne $8e0b			bne 	_PCLoop
.8e19		7a		ply				ply 								; restore position.
.8e1a		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/procedure.asm

=2						ParameterStackPos = 2
.8e1b						CallProcedure:
.8e1b		a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start storing parameters at 2.
.8e1d		b1 30		lda ($30),y			lda 	(codePtr),y
.8e1f		c9 29		cmp #$29			cmp 	#KWD_RPAREN
.8e21		f0 0c		beq $8e2f			beq 	_CPEndParam
.8e23						_CPParamLoop:
.8e23		20 28 a2	jsr $a228			jsr 	EvaluateValue 				; get parameter onto stack
.8e26		e8		inx				inx 								; bump next stack
.8e27		b1 30		lda ($30),y			lda 	(codePtr),y
.8e29		c8		iny				iny
.8e2a		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if comma, go back and try again.
.8e2c		f0 f5		beq $8e23			beq 	_CPParamLoop
.8e2e		88		dey				dey 								; unpick.
.8e2f						_CPEndParam:
.8e2f		8e 12 04	stx $0412			stx 	lastParameter 				; save the last parameters index.
.8e32		c8		iny				iny									; skip right bracket
.8e33		a9 b3		lda #$b3			lda 	#STK_PROC+3 				; allocate 6 bytes on the return stack.
.8e35		20 07 b3	jsr $b307			jsr 	StackOpen
.8e38		20 4c b3	jsr $b34c			jsr 	STKSaveCodePosition 		; save loop position
.8e3b		a5 58		lda $58				lda 	NSMantissa0 				; copy variable (e.g. procedure) address to zTemp0
.8e3d		85 36		sta $36				sta 	zTemp0 						; this is the DATA not the RECORD
.8e3f		a5 60		lda $60				lda 	NSMantissa1
.8e41		85 37		sta $37				sta 	zTemp0+1
.8e43		a0 01		ldy #$01			ldy 	#1 							; copy code address back.
.8e45		b2 36		lda ($36)			lda 	(zTemp0)
.8e47		85 30		sta $30				sta 	safePtr
.8e49		b1 36		lda ($36),y			lda 	(zTemp0),y
.8e4b		85 31		sta $31				sta 	safePtr+1
.8e4d		c8		iny				iny
.8e4e		b1 36		lda ($36),y			lda 	(zTemp0),y
.8e50		85 32		sta $32				sta 	safePtr+2
.8e52		c8		iny				iny
.8e53		b1 36		lda ($36),y			lda 	(zTemp0),y
.8e55		85 33		sta $33				sta 	safePtr+3
.8e57		c8		iny				iny 								; get Y offset -> Y
.8e58		b1 36		lda ($36),y			lda 	(zTemp0),y
.8e5a		a8		tay				tay
.8e5b		a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start position of parameters
.8e5d		ec 12 04	cpx $0412			cpx	 	lastParameter 				; check zero parameters at the start
.8e60		f0 13		beq $8e75			beq 	_ParamExit 					; if so, exit.
.8e62						_ParamExtract:
.8e62		ca		dex				dex 								; put a local term on the level before
.8e63		20 1b 8d	jsr $8d1b			jsr 	LocaliseNextTerm			; also pushes original param value to basic stack
.8e66		20 ec 8b	jsr $8bec			jsr 	AssignVariable 				; assign stacked value to the variable.
.8e69		e8		inx				inx 								; advance to next parameter to do.
.8e6a		e8		inx				inx
.8e6b		ec 12 04	cpx $0412			cpx 	lastParameter 				; are we done ?
.8e6e		f0 05		beq $8e75			beq 	_ParamExit
.8e70		20 72 93	jsr $9372			jsr 	CheckComma 					; comma seperating parameters
.8e73		80 ed		bra $8e62			bra 	_ParamExtract
.8e75						_ParamExit:
.8e75		20 6a 93	jsr $936a			jsr 	CheckRightBracket 			; check )
.8e78		60		rts				rts 								; and continue from here
.8e79						Command_ENDPROC:
.8e79		a9 b0		lda #$b0			lda 	#STK_PROC 					; check TOS is this
.8e7b		a2 14		ldx #$14			ldx 	#ERRID_PROC
.8e7d		20 34 b3	jsr $b334			jsr 	StackCheckFrame
.8e80		20 5d b3	jsr $b35d			jsr 	STKLoadCodePosition 		; restore code position
.8e83		20 26 b3	jsr $b326			jsr 	StackClose
.8e86		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/read.asm

.8e87						Command_Read:
.8e87		a2 00		ldx #$00			ldx 	#0 							; evaluate the term which is the var/array element to assign
.8e89		20 d7 9c	jsr $9cd7			jsr 	EvaluateTerm
.8e8c		b5 50		lda $50,x			lda 	NSStatus,x
.8e8e		29 20		and #$20			and 	#NSBIsReference				; get status byte on stack, identifies int, float, string.
.8e90		f0 4f		beq $8ee1			beq 	_CRSyntax 					; check reference (bit 0) fail if not a reference.
.8e92		20 2a 8f	jsr $8f2a			jsr 	SwapDataCodePtrs 			; swap code and data
.8e95		ad 18 04	lda $0418			lda 	inDataStatement 			; if in a data statement, we don't need to search
.8e98		d0 25		bne $8ebf			bne 	_CRContinueData  			; forward for the next one.
.8e9a		b2 30		lda ($30)			lda 	(codePtr)
.8e9c		f0 1c		beq $8eba			beq 	_CRNoData
.8e9e						_CRKeepSearching:
.8e9e		a9 bf		lda #$bf			lda 	#KWD_DATA 					; scan for instruction
.8ea0		a2 80		ldx #$80			ldx 	#KWC_EOL
.8ea2		20 c5 92	jsr $92c5			jsr 	ScanForward
.8ea5		c9 bf		cmp #$bf			cmp 	#KWD_DATA 					; found data ?
.8ea7		f0 16		beq $8ebf			beq 	_CRHaveData 				; found it
.8ea9		18		clc				clc
.8eaa		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8eac		65 30		adc $30				adc 	codePtr
.8eae		85 30		sta $30				sta 	codePtr
.8eb0		90 02		bcc $8eb4			bcc 	_CREExit
.8eb2		e6 31		inc $31				inc 	codePtr+1 					; carry
.8eb4						_CREExit:
.8eb4		a0 03		ldy #$03			ldy 	#3 							; start of line.
.8eb6		b2 30		lda ($30)			lda 	(codePtr)
.8eb8		d0 e4		bne $8e9e			bne 	_CRKeepSearching
.8eba						_CRNoData:
.8eba		a9 0b		lda #$0b		lda	#11
.8ebc		4c 83 93	jmp $9383		jmp	ErrorHandler
.8ebf						_CRHaveData:
.8ebf						_CRContinueData:
.8ebf		a2 01		ldx #$01			ldx 	#1
.8ec1		20 28 a2	jsr $a228			jsr 	EvaluateValue 				; evaluate value into slot # 1
.8ec4		ca		dex				dex
.8ec5		20 ec 8b	jsr $8bec			jsr		AssignVariable 				; do the assignment
.8ec8		9c 18 04	stz $0418			stz 	inDataStatement 			; clear in data flag
.8ecb		b1 30		lda ($30),y			lda 	(codePtr),y
.8ecd		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not, end of data statement and exit
.8ecf		d0 04		bne $8ed5			bne 	_CRSwapBack
.8ed1		c8		iny				iny 								; consume comma
.8ed2		ee 18 04	inc $0418			inc 	inDataStatement 			; set in data statement currently.
.8ed5						_CRSwapBack:
.8ed5		20 2a 8f	jsr $8f2a			jsr 	SwapDataCodePtrs			; swap them back.
.8ed8		b1 30		lda ($30),y			lda 	(codePtr),y
.8eda		c8		iny				iny
.8edb		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8edd		f0 a8		beq $8e87			beq 	Command_Read 				; if so go round again.
.8edf		88		dey				dey 								; unpick get.
.8ee0		60		rts				rts
.8ee1						_CRSyntax:
.8ee1		4c 5b a4	jmp $a45b			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/rem.asm

.8ee4						RemCommand:
.8ee4		b1 30		lda ($30),y			lda 	(codePtr),y
.8ee6		c9 ff		cmp #$ff			cmp 	#KWC_STRING
.8ee8		d0 06		bne $8ef0			bne 	_RMExit
.8eea		c8		iny				iny 								; point to offset
.8eeb		98		tya				tya 								; A = offset position
.8eec		38		sec				sec 								; add size +1 hence SEC
.8eed		71 30		adc ($30),y			adc 	(codePtr),y
.8eef		a8		tay				tay 								; make current position.
.8ef0						_RMExit:
.8ef0		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/repeat.asm

.8ef1						Command_REPEAT:
.8ef1		a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; allocate 6 bytes on the return stack.
.8ef3		20 07 b3	jsr $b307			jsr 	StackOpen
.8ef6		20 4c b3	jsr $b34c			jsr 	STKSaveCodePosition 		; save loop position
.8ef9		60		rts				rts
.8efa						Command_UNTIL:
.8efa		a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; check REPEAT is TOS
.8efc		a2 0f		ldx #$0f			ldx 	#ERRID_REPEAT 				; this error
.8efe		20 34 b3	jsr $b334			jsr 	StackCheckFrame
.8f01		a2 00		ldx #$00			ldx 	#0
.8f03		20 31 a2	jsr $a231			jsr 	EvaluateNumber 				; work out the number
.8f06		20 05 a3	jsr $a305			jsr 	NSMIsZero 					; check if zero
.8f09		f0 04		beq $8f0f			beq 	_CULoopBack 				; if so keep looping
.8f0b		20 26 b3	jsr $b326			jsr 	StackClose		 			; return
.8f0e		60		rts				rts
.8f0f						_CULoopBack:
.8f0f		20 5d b3	jsr $b35d			jsr 	STKLoadCodePosition 		; loop back
.8f12		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/restore.asm

.8f13						Command_Restore:
.8f13		20 2a 8f	jsr $8f2a			jsr 	SwapDataCodePtrs 			; swap code and data
.8f16		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8f18		85 30		sta $30				sta 	codePtr
.8f1a		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8f1c		85 31		sta $31				sta 	codePtr+1
.8f1e		20 2a 8f	jsr $8f2a			jsr 	SwapDataCodePtrs 			; put them back
.8f21		a9 03		lda #$03			lda 	#3 							; start at offset 3, e.g. first instruction of first line.
.8f23		8d 17 04	sta $0417			sta 	dataPointer+4   			; (read checks not EOF)
.8f26		9c 18 04	stz $0418			stz 	inDataStatement 			; not in data statement
.8f29		60		rts				rts
.8f2a						SwapDataCodePtrs:
.8f2a		da		phx				phx
.8f2b		a2 03		ldx #$03			ldx 	#3 							; swap 32 bit code pointer over
.8f2d						_SDCPLoop:
.8f2d		b5 30		lda $30,x			lda 	safePtr,x
.8f2f		48		pha				pha
.8f30		bd 13 04	lda $0413,x			lda 	dataPointer,x
.8f33		95 30		sta $30,x			sta 	safePtr,x
.8f35		68		pla				pla
.8f36		9d 13 04	sta $0413,x			sta 	dataPointer,x
.8f39		ca		dex				dex
.8f3a		10 f1		bpl $8f2d			bpl 	_SDCPLoop
.8f3c		ad 17 04	lda $0417			lda 	dataPointer+4 				; swap Y position over.
.8f3f		8c 17 04	sty $0417			sty 	dataPointer+4
.8f42		a8		tay				tay
.8f43		fa		plx				plx
.8f44		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/run.asm

.8f45						EOLCommand:
.8f45		18		clc				clc
.8f46		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8f48		65 30		adc $30				adc 	codePtr
.8f4a		85 30		sta $30				sta 	codePtr
.8f4c		90 02		bcc $8f50			bcc 	_CREExit
.8f4e		e6 31		inc $31				inc 	codePtr+1 					; carry
.8f50						_CREExit:
.8f50		80 18		bra $8f6a			bra 	RunNewLine
.8f52						CommandRUNOptLoad:
.8f52		b1 30		lda ($30),y			lda 	(codePtr),y
.8f54		c9 80		cmp #$80			cmp 	#KWC_EOL 					; EOL / : just RUN
.8f56		f0 07		beq $8f5f			beq 	RunCurrentProgram
.8f58		c9 3a		cmp #$3a			cmp 	#KWD_COLON
.8f5a		f0 03		beq $8f5f			beq 	RunCurrentProgram
.8f5c		20 b6 ac	jsr $acb6			jsr 	LoadFile 					; load expected name file.
.8f5f						RunCurrentProgram:
.8f5f		20 0f 92	jsr $920f			jsr 	ClearSystem 				; clear variable/stacks/etc.
.8f62		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8f64		85 30		sta $30				sta 	codePtr
.8f66		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8f68		85 31		sta $31				sta 	codePtr+1
.8f6a						RunNewLine:
.8f6a		b2 30		lda ($30)			lda 	(codePtr)
.8f6c		f0 74		beq $8fe2			beq 	CRNoProgram         		; no then END.
.8f6e		a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack
.8f70		9a		txs				txs
.8f71						RUNCodePointerLine:
.8f71		a0 02		ldy #$02			ldy 	#2 							; start of program
.8f73						_CRIncMainLoop:
.8f73		a5 f2		lda $f2				lda 	kernel.args.events.pending 	; load pending event count into accumulator
.8f75		f0 03		beq $8f7a			beq 	_NoEvents					; if zero, skip with Z flag set.
.8f77		20 2d 81	jsr $812d			jsr 	ProcessEvents
.8f7a						_NoEvents:
.8f7a		d0 61		bne $8fdd			bne 	_CRBreak
.8f7c		a5 01		lda $01				lda 	1 							; save I/O 0
.8f7e		48		pha				pha
.8f7f		64 01		stz $01				stz 	1 							; access I/O Page 0
.8f81		38		sec				sec 								; calculate timer - LastTick
.8f82		ad 59 d6	lda $d659			lda 	$D659
.8f85		cd 5e 06	cmp $065e			cmp 	LastTick
.8f88		f0 06		beq $8f90			beq 	_NoFireTick 				; if < 3 clocks don't fire.
.8f8a		8d 5e 06	sta $065e			sta 	LastTick 					; update last timer
.8f8d		20 5c 82	jsr $825c			jsr 	TickHandler 							; go do the code.
.8f90						_NoFireTick:
.8f90		68		pla				pla 								; restore I/O 0
.8f91		85 01		sta $01				sta 	1
.8f93						_CRNoBreakCheck:
.8f93		c8		iny				iny									; next token
.8f94						_CRMainLoop:
.8f94		9c 0c 04	stz $040c			stz 	stringInitialised 			; clear the temporary string initialised flag.
.8f97		b1 30		lda ($30),y			lda 	(codePtr),y
.8f99		10 10		bpl $8fab			bpl 	_CRNotKeyword				; not a token.
.8f9b		c9 ad		cmp #$ad			cmp 	#KWC_LAST_UNARY+1 			; if after unary, legitimate command
.8f9d		b0 04		bcs $8fa3			bcs 	_CRIsKeyword
.8f9f		c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if unary, syntax error.
.8fa1		b0 34		bcs $8fd7			bcs		_CRSyntaxError
.8fa3						_CRIsKeyword:
.8fa3		c8		iny				iny 								; consume command
.8fa4		0a		asl a				asl 	a 							; double losing the MSB which is '1' as tokens are $80-$FF
.8fa5		aa		tax				tax 								; put in X for vector jump
.8fa6		20 da 8f	jsr $8fda			jsr 	_CRCallVector0 				; call the vector - effectively jsr (vectortable,X)
.8fa9		80 e9		bra $8f94			bra 	_CRMainLoop 				; and loop round
.8fab						_CRNotKeyword:
.8fab		c9 3a		cmp #$3a			cmp 	#KWD_COLON 					; if a :, consume it and go round.
.8fad		f0 c4		beq $8f73			beq 	_CRIncMainLoop
.8faf		c9 40		cmp #$40			cmp 	#$40 						; variable/call reference
.8fb1		90 05		bcc $8fb8			bcc 	_CRNotVariable
.8fb3						_CRGoLet:
.8fb3		20 b3 8b	jsr $8bb3			jsr 	LetCommand
.8fb6		80 dc		bra $8f94			bra 	_CRMainLoop
.8fb8						_CRNotVariable:
.8fb8		c9 b8		cmp #$b8			cmp 	#KWD_AT 					; handle @
.8fba		f0 f7		beq $8fb3			beq 	_CRGoLet
.8fbc		c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; handle ? !
.8fbe		f0 f3		beq $8fb3			beq 	_CRGoLet
.8fc0		c9 21		cmp #$21			cmp 	#KWD_PLING
.8fc2		f0 ef		beq $8fb3			beq 	_CRGoLet
.8fc4		c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; handle ' (comment)
.8fc6		f0 09		beq $8fd1			beq 	_CRGoRem
.8fc8		c9 2e		cmp #$2e			cmp 	#KWD_PERIOD 				; handle . (assembler label)
.8fca		d0 0b		bne $8fd7			bne 	_CRSyntaxError
.8fcc		20 37 86	jsr $8637			jsr 	LabelHere
.8fcf		80 c3		bra $8f94			bra 	_CRMainLoop
.8fd1						_CRGoRem:
.8fd1		c8		iny				iny
.8fd2		20 e4 8e	jsr $8ee4			jsr 	RemCommand
.8fd5		80 bd		bra $8f94			bra 	_CRMainLoop
.8fd7						_CRSyntaxError:
.8fd7		4c 5b a4	jmp $a45b			jmp 	SyntaxError
.8fda						_CRCallVector0:
.8fda		7c 78 90	jmp ($9078,x)			jmp 	(VectorSet0,x)
.8fdd						_CRBreak:
.8fdd		a9 01		lda #$01		lda	#1
.8fdf		4c 83 93	jmp $9383		jmp	ErrorHandler
.8fe2						CRNoProgram:
.8fe2		4c 49 89	jmp $8949			jmp 	EndCommand
.8fe5						Shift1Command:
.8fe5		b1 30		lda ($30),y			lda 	(codePtr),y
.8fe7		c8		iny				iny
.8fe8		0a		asl a				asl 	a
.8fe9		aa		tax				tax
.8fea		7c 30 91	jmp ($9130,x)			jmp 	(VectorSet1,x)
.8fed						Shift2Command:
.8fed		b1 30		lda ($30),y			lda 	(codePtr),y
.8fef		c8		iny				iny
.8ff0		0a		asl a				asl 	a
.8ff1		aa		tax				tax
.8ff2		7c 82 91	jmp ($9182,x)			jmp 	(VectorSet2,x)
.8ff5						Unused1:
.8ff5						Unused2:
.8ff5						Unused3:
.8ff5						Unused4:
.8ff5		4c 5b a4	jmp $a45b			jmp 	SyntaxError
>8ff8								.align 2

;******  Processing file: ./common/commands/../generated/vectors.dat

.8ff8						VectorSetPunc:
>8ff8		41 96					.word	ShiftLeft                        ; $00 <<
>8ffa		2c 94					.word	BinaryCompareLessEqual           ; $01 <=
>8ffc		22 94					.word	BinaryCompareNotEqual            ; $02 <>
>8ffe		5b a4					.word	SyntaxError                      ; $03 !!3
>9000		5b a4					.word	SyntaxError                      ; $04 ><
>9002		36 94					.word	BinaryCompareGreaterEqual        ; $05 >=
>9004		44 96					.word	ShiftRight                       ; $06 >>
>9006		5b a4					.word	SyntaxError                      ; $07 !!7
>9008		5b a4					.word	SyntaxError                      ; $08 !!8
>900a		5b a4					.word	SyntaxError                      ; $09 !!9
>900c		5b a4					.word	SyntaxError                      ; $0a !!10
>900e		5b a4					.word	SyntaxError                      ; $0b !!11
>9010		5b a4					.word	SyntaxError                      ; $0c !!12
>9012		5b a4					.word	SyntaxError                      ; $0d !!13
>9014		5b a4					.word	SyntaxError                      ; $0e !!14
>9016		5b a4					.word	SyntaxError                      ; $0f !!15
>9018		5b a4					.word	SyntaxError                      ; $10 @
>901a		5b a4					.word	SyntaxError                      ; $11 !!17
>901c		5b a4					.word	SyntaxError                      ; $12 !!18
>901e		5b a4					.word	SyntaxError                      ; $13 [
>9020		ed 94					.word	IntegerDivide                    ; $14 \
>9022		5b a4					.word	SyntaxError                      ; $15 ]
>9024		7f 97					.word	EorInteger                       ; $16 ^
>9026		5b a4					.word	SyntaxError                      ; $17 _
>9028		5b a4					.word	SyntaxError                      ; $18 `
>902a		5b a4					.word	SyntaxError                      ; $19 !!25
>902c		5b a4					.word	SyntaxError                      ; $1a !!26
>902e		5b a4					.word	SyntaxError                      ; $1b {
>9030		4a 97					.word	OraInteger                       ; $1c |
>9032		5b a4					.word	SyntaxError                      ; $1d }
>9034		5b a4					.word	SyntaxError                      ; $1e ~
>9036		5b a4					.word	SyntaxError                      ; $1f <7F>
>9038		5b a4					.word	SyntaxError                      ; $20
>903a		b4 97					.word	WordIndirect                     ; $21 !
>903c		5b a4					.word	SyntaxError                      ; $22 "
>903e		5b a4					.word	SyntaxError                      ; $23 #
>9040		5b a4					.word	SyntaxError                      ; $24 $
>9042		2e 95					.word	IntegerModulus                   ; $25 %
>9044		15 97					.word	AndInteger                       ; $26 &
>9046		5b a4					.word	SyntaxError                      ; $27 '
>9048		5b a4					.word	SyntaxError                      ; $28 (
>904a		5b a4					.word	SyntaxError                      ; $29 )
>904c		9c 95					.word	MulInteger                       ; $2a *
>904e		b7 96					.word	AddInteger                       ; $2b +
>9050		5b a4					.word	SyntaxError                      ; $2c ,
>9052		f0 96					.word	SubInteger                       ; $2d -
>9054		5b a4					.word	SyntaxError                      ; $2e .
>9056		6e 99					.word	FDivideCommand                   ; $2f /
>9058		5b a4					.word	SyntaxError                      ; $30 0
>905a		5b a4					.word	SyntaxError                      ; $31 1
>905c		5b a4					.word	SyntaxError                      ; $32 2
>905e		5b a4					.word	SyntaxError                      ; $33 3
>9060		5b a4					.word	SyntaxError                      ; $34 4
>9062		5b a4					.word	SyntaxError                      ; $35 5
>9064		5b a4					.word	SyntaxError                      ; $36 6
>9066		5b a4					.word	SyntaxError                      ; $37 7
>9068		5b a4					.word	SyntaxError                      ; $38 8
>906a		5b a4					.word	SyntaxError                      ; $39 9
>906c		5b a4					.word	SyntaxError                      ; $3a :
>906e		5b a4					.word	SyntaxError                      ; $3b ;
>9070		0e 94					.word	BinaryCompareLess                ; $3c <
>9072		04 94					.word	BinaryCompareEqual               ; $3d =
>9074		18 94					.word	BinaryCompareGreater             ; $3e >
>9076		d6 97					.word	ByteIndirect                     ; $3f ?
.9078						VectorSet0:
>9078		45 8f					.word	EOLCommand                       ; $80 !0:EOF
>907a		e5 8f					.word	Shift1Command                    ; $81 !1:SH1
>907c		ed 8f					.word	Shift2Command                    ; $82 !2:SH2
>907e		58 9e					.word	AbsUnary                         ; $83 ABS(
>9080		66 9e					.word	AllocUnary                       ; $84 ALLOC(
>9082		d6 9e					.word	AscUnary                         ; $85 ASC(
>9084		27 a0					.word	ChrUnary                         ; $86 CHR$(
>9086		4d aa					.word	UnaryEvent                       ; $87 EVENT(
>9088		00 94					.word	UnaryFalse                       ; $88 FALSE
>908a		e3 9e					.word	FracUnary                        ; $89 FRAC(
>908c		65 b1					.word	ChrGet                           ; $8a GET$(
>908e		4a b1					.word	AscGet                           ; $8b GET(
>9090		f4 b0					.word	UnaryGetDate                     ; $8c GETDATE$(
>9092		f0 b0					.word	UnaryGetTime                     ; $8d GETTIME$(
>9094		bd a9					.word	UnaryHit                         ; $8e HIT(
>9096		6c b1					.word	ChrInkey                         ; $8f INKEY$(
>9098		5a b1					.word	AscInkey                         ; $90 INKEY(
>909a		f8 9e					.word	IntUnary                         ; $91 INT(
>909c		e6 9f					.word	IsValUnary                       ; $92 ISVAL(
>909e		39 a0					.word	ItemCountUnary                   ; $93 ITEMCOUNT(
>90a0		5d a0					.word	ItemGetUnary                     ; $94 ITEMGET$(
>90a2		c7 ae					.word	UnaryJoyB                        ; $95 JOYB(
>90a4		a0 ae					.word	UnaryJoyX                        ; $96 JOYX(
>90a6		a3 ae					.word	UnaryJoyY                        ; $97 JOYY(
>90a8		85 b1					.word	KeyDown                          ; $98 KEYDOWN(
>90aa		9c a1					.word	Unary_Left                       ; $99 LEFT$(
>90ac		09 9f					.word	LenUnary                         ; $9a LEN(
>90ae		27 9f					.word	Unary_Max                        ; $9b MAX(
>90b0		be a1					.word	Unary_Mid                        ; $9c MID$(
>90b2		23 9f					.word	Unary_Min                        ; $9d MIN(
>90b4		72 9f					.word	Unary_Not                        ; $9e NOT(
>90b6		85 9f					.word	PeekByteUnary                    ; $9f PEEK(
>90b8		91 9f					.word	PeekDUnary                       ; $a0 PEEKD(
>90ba		8d 9f					.word	PeekLUnary                       ; $a1 PEEKL(
>90bc		89 9f					.word	PeekWUnary                       ; $a2 PEEKW(
>90be		64 b2					.word	UnaryPlaying                     ; $a3 PLAYING(
>90c0		9f b1					.word	Unary_Random                     ; $a4 RANDOM(
>90c2		a9 a1					.word	Unary_Right                      ; $a5 RIGHT$(
>90c4		b9 b1					.word	Unary_Rnd                        ; $a6 RND(
>90c6		be 9f					.word	SgnUnary                         ; $a7 SGN(
>90c8		db a0					.word	SpcUnary                         ; $a8 SPC(
>90ca		f6 a0					.word	Unary_Str                        ; $a9 STR$(
>90cc		d7 b0					.word	UnaryTimer                       ; $aa TIMER(
>90ce		f5 93					.word	UnaryTrue                        ; $ab TRUE
>90d0		dc 9f					.word	ValUnary                         ; $ac VAL(
>90d2		4c 89					.word	ForCommand                       ; $ad FOR
>90d4		8f 8a					.word	IfCommand                        ; $ae IF
>90d6		f5 8f					.word	Unused1                          ; $af PROC
>90d8		f1 8e					.word	Command_REPEAT                   ; $b0 REPEAT
>90da		3b 93					.word	Command_WHILE                    ; $b1 WHILE
>90dc		b8 8a					.word	EndIf                            ; $b2 ENDIF
>90de		79 8e					.word	Command_ENDPROC                  ; $b3 ENDPROC
>90e0		fe 89					.word	NextCommand                      ; $b4 NEXT
>90e2		f5 8f					.word	Unused4                          ; $b5 THEN
>90e4		fa 8e					.word	Command_UNTIL                    ; $b6 UNTIL
>90e6		5c 93					.word	Command_WEND                     ; $b7 WEND
>90e8		5b a4					.word	SyntaxError                      ; $b8 AT
>90ea		5b a4					.word	SyntaxError                      ; $b9 BY
>90ec		4f 88					.word	CallCommand                      ; $ba CALL
>90ee		2a a7					.word	CircleCommand                    ; $bb CIRCLE
>90f0		5b a4					.word	SyntaxError                      ; $bc CLEAR
>90f2		5b a4					.word	SyntaxError                      ; $bd COLOR
>90f4		5b a4					.word	SyntaxError                      ; $be COLOUR
>90f6		84 88					.word	Command_Data                     ; $bf DATA
>90f8		8c 88					.word	DimCommand                       ; $c0 DIM
>90fa		f5 8f					.word	Unused3                          ; $c1 DOWNTO
>90fc		b1 8a					.word	ElseCode                         ; $c2 ELSE
>90fe		5b a4					.word	SyntaxError                      ; $c3 FROM
>9100		90 a9					.word	GfxCommand                       ; $c4 GFX
>9102		5b a4					.word	SyntaxError                      ; $c5 HERE
>9104		53 a7					.word	ImageCommand                     ; $c6 IMAGE
>9106		b3 8b					.word	LetCommand                       ; $c7 LET
>9108		a5 a7					.word	LineCommand                      ; $c8 LINE
>910a		0d 8d					.word	Command_LOCAL                    ; $c9 LOCAL
>910c		d9 ae					.word	MCCommand                        ; $ca MEMCOPY
>910e		5b a4					.word	SyntaxError                      ; $cb OFF
>9110		5b a4					.word	SyntaxError                      ; $cc ON
>9112		5b a4					.word	SyntaxError                      ; $cd OUTLINE
>9114		e1 a9					.word	PaletteCommand                   ; $ce PALETTE
>9116		9e a7					.word	PlotCommand                      ; $cf PLOT
>9118		de 8d					.word	PokeBCommand                     ; $d0 POKE
>911a		ea 8d					.word	PokeDCommand                     ; $d1 POKED
>911c		e6 8d					.word	PokeLCommand                     ; $d2 POKEL
>911e		e2 8d					.word	PokeWCommand                     ; $d3 POKEW
>9120		87 8e					.word	Command_Read                     ; $d4 READ
>9122		26 a7					.word	RectangleCommand                 ; $d5 RECT
>9124		e4 8e					.word	RemCommand                       ; $d6 REM
>9126		5b a4					.word	SyntaxError                      ; $d7 SOLID
>9128		80 b2					.word	SoundCommand                     ; $d8 SOUND
>912a		35 a7					.word	SpriteCommand                    ; $d9 SPRITE
>912c		6f a7					.word	TextCommand                      ; $da TEXT
>912e		f5 8f					.word	Unused2                          ; $db TO
.9130						VectorSet1:
>9130		5b a4					.word	SyntaxError                      ; $80 !0:EOF
>9132		5b a4					.word	SyntaxError                      ; $81 !1:SH1
>9134		5b a4					.word	SyntaxError                      ; $82 !2:SH2
>9136		23 88					.word	AssembleCommand                  ; $83 ASSEMBLE
>9138		3f 88					.word	AssertCommand                    ; $84 ASSERT
>913a		f0 a8					.word	BitmapCtrl                       ; $85 BITMAP
>913c		aa aa					.word	Command_BLoad                    ; $86 BLOAD
>913e		56 ab					.word	Command_BSave                    ; $87 BSAVE
>9140		21 aa					.word	ClearScreen                      ; $88 CLS
>9142		be 8a					.word	Command_CPrint                   ; $89 CPRINT
>9144		d9 ab					.word	Command_Dir                      ; $8a DIR
>9146		3b aa					.word	BootDOS                          ; $8b DOS
>9148		a9 ac					.word	Command_Drive                    ; $8c DRIVE
>914a		49 89					.word	EndCommand                       ; $8d END
>914c		38 b2					.word	Explode                          ; $8e EXPLODE
>914e		5b a4					.word	SyntaxError                      ; $8f GO
>9150		57 8a					.word	Command_GOSUB                    ; $90 GOSUB
>9152		75 8a					.word	GotoCommand                      ; $91 GOTO
>9154		5b a4					.word	SyntaxError                      ; $92 HIMEM
>9156		b9 8a					.word	Command_Input                    ; $93 INPUT
>9158		03 8c					.word	Command_List                     ; $94 LIST
>915a		b0 ac					.word	Command_Load                     ; $95 LOAD
>915c		ed af					.word	MouseDeltaStatus                 ; $96 MDELTA
>915e		e9 af					.word	MouseStatus                      ; $97 MOUSE
>9160		ce 8d					.word	NewCommand                       ; $98 NEW
>9162		14 b2					.word	PingCommand                      ; $99 PING
>9164		c5 8a					.word	Command_Print                    ; $9a PRINT
>9166		13 8f					.word	Command_Restore                  ; $9b RESTORE
>9168		67 8a					.word	Command_RETURN                   ; $9c RETURN
>916a		52 8f					.word	CommandRUNOptLoad                ; $9d RUN
>916c		82 ad					.word	Command_Save                     ; $9e SAVE
>916e		63 b0					.word	CommandSetDate                   ; $9f SETDATE
>9170		67 b0					.word	CommandSetTime                   ; $a0 SETTIME
>9172		2c b2					.word	ShootCommand                     ; $a1 SHOOT
>9174		4a a9					.word	SpritesCtrl                      ; $a2 SPRITES
>9176		0a 92					.word	StopCommand                      ; $a3 STOP
>9178		09 ae					.word	Command_Try                      ; $a4 TRY
>917a		46 ae					.word	Command_VERIFY                   ; $a5 VERIFY
>917c		32 aa					.word	XGoCommand                       ; $a6 XGO
>917e		29 aa					.word	XLoadCommand                     ; $a7 XLOAD
>9180		20 b2					.word	ZapCommand                       ; $a8 ZAP
.9182						VectorSet2:
>9182		5b a4					.word	SyntaxError                      ; $80 !0:EOF
>9184		5b a4					.word	SyntaxError                      ; $81 !1:SH1
>9186		5b a4					.word	SyntaxError                      ; $82 !2:SH2
>9188		1a a3					.word	Assemble_adc                     ; $83 ADC
>918a		12 a3					.word	Assemble_and                     ; $84 AND
>918c		2e a3					.word	Assemble_asl                     ; $85 ASL
>918e		98 a3					.word	Assemble_bcc                     ; $86 BCC
>9190		9c a3					.word	Assemble_bcs                     ; $87 BCS
>9192		a4 a3					.word	Assemble_beq                     ; $88 BEQ
>9194		5b a3					.word	Assemble_bit                     ; $89 BIT
>9196		8c a3					.word	Assemble_bmi                     ; $8a BMI
>9198		a0 a3					.word	Assemble_bne                     ; $8b BNE
>919a		88 a3					.word	Assemble_bpl                     ; $8c BPL
>919c		a8 a3					.word	Assemble_bra                     ; $8d BRA
>919e		ac a3					.word	Assemble_brk                     ; $8e BRK
>91a0		90 a3					.word	Assemble_bvc                     ; $8f BVC
>91a2		94 a3					.word	Assemble_bvs                     ; $90 BVS
>91a4		b4 a3					.word	Assemble_clc                     ; $91 CLC
>91a6		08 a4					.word	Assemble_cld                     ; $92 CLD
>91a8		c8 a3					.word	Assemble_cli                     ; $93 CLI
>91aa		f8 a3					.word	Assemble_clv                     ; $94 CLV
>91ac		26 a3					.word	Assemble_cmp                     ; $95 CMP
>91ae		6f a3					.word	Assemble_cpx                     ; $96 CPX
>91b0		6a a3					.word	Assemble_cpy                     ; $97 CPY
>91b2		4c a3					.word	Assemble_dec                     ; $98 DEC
>91b4		04 a4					.word	Assemble_dex                     ; $99 DEX
>91b6		e0 a3					.word	Assemble_dey                     ; $9a DEY
>91b8		16 a3					.word	Assemble_eor                     ; $9b EOR
>91ba		51 a3					.word	Assemble_inc                     ; $9c INC
>91bc		14 a4					.word	Assemble_inx                     ; $9d INX
>91be		00 a4					.word	Assemble_iny                     ; $9e INY
>91c0		83 a3					.word	Assemble_jmp                     ; $9f JMP
>91c2		7e a3					.word	Assemble_jsr                     ; $a0 JSR
>91c4		22 a3					.word	Assemble_lda                     ; $a1 LDA
>91c6		47 a3					.word	Assemble_ldx                     ; $a2 LDX
>91c8		65 a3					.word	Assemble_ldy                     ; $a3 LDY
>91ca		38 a3					.word	Assemble_lsr                     ; $a4 LSR
>91cc		18 a4					.word	Assemble_nop                     ; $a5 NOP
>91ce		0e a3					.word	Assemble_ora                     ; $a6 ORA
>91d0		c4 a3					.word	Assemble_pha                     ; $a7 PHA
>91d2		b0 a3					.word	Assemble_php                     ; $a8 PHP
>91d4		0c a4					.word	Assemble_phx                     ; $a9 PHX
>91d6		cc a3					.word	Assemble_phy                     ; $aa PHY
>91d8		d4 a3					.word	Assemble_pla                     ; $ab PLA
>91da		b8 a3					.word	Assemble_plp                     ; $ac PLP
>91dc		20 a4					.word	Assemble_plx                     ; $ad PLX
>91de		dc a3					.word	Assemble_ply                     ; $ae PLY
>91e0		33 a3					.word	Assemble_rol                     ; $af ROL
>91e2		3d a3					.word	Assemble_ror                     ; $b0 ROR
>91e4		c0 a3					.word	Assemble_rti                     ; $b1 RTI
>91e6		d0 a3					.word	Assemble_rts                     ; $b2 RTS
>91e8		2a a3					.word	Assemble_sbc                     ; $b3 SBC
>91ea		bc a3					.word	Assemble_sec                     ; $b4 SEC
>91ec		1c a4					.word	Assemble_sed                     ; $b5 SED
>91ee		d8 a3					.word	Assemble_sei                     ; $b6 SEI
>91f0		1e a3					.word	Assemble_sta                     ; $b7 STA
>91f2		10 a4					.word	Assemble_stp                     ; $b8 STP
>91f4		42 a3					.word	Assemble_stx                     ; $b9 STX
>91f6		60 a3					.word	Assemble_sty                     ; $ba STY
>91f8		56 a3					.word	Assemble_stz                     ; $bb STZ
>91fa		f4 a3					.word	Assemble_tax                     ; $bc TAX
>91fc		f0 a3					.word	Assemble_tay                     ; $bd TAY
>91fe		79 a3					.word	Assemble_trb                     ; $be TRB
>9200		74 a3					.word	Assemble_tsb                     ; $bf TSB
>9202		fc a3					.word	Assemble_tsx                     ; $c0 TSX
>9204		e4 a3					.word	Assemble_txa                     ; $c1 TXA
>9206		ec a3					.word	Assemble_txs                     ; $c2 TXS
>9208		e8 a3					.word	Assemble_tya                     ; $c3 TYA

;******  Return to file: ./common/commands/run.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/stop.asm

.920a						StopCommand:
.920a		a9 08		lda #$08		lda	#8
.920c		4c 83 93	jmp $9383		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/clear.asm

.920f						ClearSystem:
.920f		a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.9211		85 36		sta $36				sta 	0+zTemp0
.9213		a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.9215		85 37		sta $37				sta 	1+zTemp0
.9217						_ClearZeroLoop:
.9217		b2 36		lda ($36)			lda 	(zTemp0) 					; end of variables if offset is zero.
.9219		f0 24		beq $923f			beq 	_ClearZeroEnd
.921b		a0 03		ldy #$03			ldy 	#3 							; erase the variables
.921d		a9 00		lda #$00			lda 	#0 							; set all the data to zero.
.921f						_ClearOneVariable:
.921f		91 36		sta ($36),y			sta 	(zTemp0),y
.9221		c8		iny				iny
.9222		c0 08		cpy #$08			cpy 	#8
.9224		d0 f9		bne $921f			bne 	_ClearOneVariable
.9226		a0 02		ldy #$02			ldy 	#2 							; has it been marked procedure
.9228		b1 36		lda ($36),y			lda 	(zTemp0),y
.922a		c9 18		cmp #$18			cmp 	#NSTProcedure
.922c		d0 04		bne $9232			bne 	_ClearNotProcedure
.922e		a9 04		lda #$04			lda 	#NSTInteger+NSBIsArray 		; if so set it back to an integer array
.9230		91 36		sta ($36),y			sta 	(zTemp0),y 					; will be fixed on the pre-run scan.
.9232						_ClearNotProcedure:
.9232		18		clc				clc 								; go to the next variable
.9233		b2 36		lda ($36)			lda 	(zTemp0) 					; offset to next, add to zTemp0
.9235		65 36		adc $36				adc 	zTemp0
.9237		85 36		sta $36				sta 	zTemp0
.9239		90 dc		bcc $9217			bcc 	_ClearZeroLoop
.923b		e6 37		inc $37				inc 	zTemp0+1
.923d		80 d8		bra $9217			bra 	_ClearZeroLoop
.923f						_ClearZeroEnd:
.923f		18		clc				clc
.9240		a5 36		lda $36				lda 	zTemp0
.9242		69 01		adc #$01			adc 	#1
.9244		8d 08 04	sta $0408			sta 	lowMemPtr
.9247		a5 37		lda $37				lda 	zTemp0+1
.9249		69 00		adc #$00			adc 	#0
.924b		8d 09 04	sta $0409			sta 	lowMemPtr+1
.924e		20 6d b3	jsr $b36d			jsr 	StackReset
.9251		20 d3 b3	jsr $b3d3			jsr 	StringSystemInitialise
.9254		20 6d 92	jsr $926d			jsr 	ProcedureScan
.9257		20 13 8f	jsr $8f13			jsr 	Command_Restore
.925a		9c 1a 04	stz $041a			stz 	AssemblerAddress
.925d		9c 1b 04	stz $041b			stz 	AssemblerAddress+1
.9260		9c 1c 04	stz $041c			stz 	AssemblerControl
.9263		9c 5d 06	stz $065d			stz 	KeyboardQueueEntries
.9266		20 c3 9e	jsr $9ec3			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.9269		20 e9 a8	jsr $a8e9			jsr 	ResetBitmapSprites
.926c		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/procscan.asm

.926d						ProcedureScan:
.926d		20 2a 8f	jsr $8f2a			jsr 	SwapDataCodePtrs 			; swap code and data
.9270		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.9272		85 30		sta $30				sta 	codePtr
.9274		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.9276		85 31		sta $31				sta 	codePtr+1
.9278						_PSLoop:
.9278		b2 30		lda ($30)			lda 	(codePtr)
.927a		f0 42		beq $92be			beq 	_PSExit
.927c		a0 03		ldy #$03			ldy 	#3 							; is it PROC at start of line ?
.927e		b1 30		lda ($30),y			lda 	(codePtr),y
.9280		c9 af		cmp #$af			cmp 	#KWD_PROC
.9282		d0 2d		bne $92b1			bne 	_PSNext
.9284		c8		iny				iny 								; get the address of the record to zTemp0 and
.9285		b1 30		lda ($30),y			lda 	(codePtr),y
.9287		29 c0		and #$c0			and 	#$C0
.9289		c9 40		cmp #$40			cmp 	#$40
.928b		d0 35		bne $92c2			bne 	_PSSyntax
.928d		b1 30		lda ($30),y			lda 	(codePtr),y
.928f		18		clc				clc
.9290		69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.9292		85 37		sta $37				sta 	zTemp0+1
.9294		c8		iny				iny 								; LSB
.9295		b1 30		lda ($30),y			lda 	(codePtr),y
.9297		85 36		sta $36				sta 	zTemp0
.9299		c8		iny				iny 								; character after variable call.
.929a		98		tya				tya 								; save Y offset at +7 (exponent slot)
.929b		a0 07		ldy #$07			ldy 	#7
.929d		91 36		sta ($36),y			sta 	(zTemp0),y
.929f		a9 18		lda #$18			lda 	#NSTProcedure 				; mark it as procedure
.92a1		a0 02		ldy #$02			ldy 	#2
.92a3		91 36		sta ($36),y			sta 	(zTemp0),y
.92a5		a2 00		ldx #$00			ldx 	#0 							; copy code-Ptr into offset 3-6 (mantissa)
.92a7						_PSCopy:
.92a7		b5 30		lda $30,x			lda 	safePtr,x
.92a9		c8		iny				iny
.92aa		91 36		sta ($36),y			sta 	(zTemp0),y
.92ac		e8		inx				inx
.92ad		e0 04		cpx #$04			cpx 	#4
.92af		d0 f6		bne $92a7			bne 	_PSCopy
.92b1						_PSNext:
.92b1		18		clc				clc
.92b2		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.92b4		65 30		adc $30				adc 	codePtr
.92b6		85 30		sta $30				sta 	codePtr
.92b8		90 02		bcc $92bc			bcc 	_CREExit
.92ba		e6 31		inc $31				inc 	codePtr+1 					; carry
.92bc						_CREExit:
.92bc		80 ba		bra $9278			bra 	_PSLoop
.92be						_PSExit:
.92be		20 2a 8f	jsr $8f2a			jsr 	SwapDataCodePtrs 			; swap code and data
.92c1		60		rts				rts
.92c2						_PSSyntax:
.92c2		4c 5b a4	jmp $a45b			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/scanforward.asm

.92c5						ScanForward:
.92c5		64 38		stz $38				stz 	zTemp1 						; zero the structure count - goes up with WHILE/FOR down with WEND/NEXT etc.
.92c7		86 37		stx $37				stx 	zTemp0+1
.92c9		85 36		sta $36				sta 	zTemp0 						; save X & A as the two possible matches.
.92cb						_ScanLoop:
.92cb		b1 30		lda ($30),y			lda 	(codePtr),y
.92cd		c8		iny				iny
.92ce		a6 38		ldx $38				ldx 	zTemp1 						; if the count is > 0 cannot match as in substructure
.92d0		d0 0e		bne $92e0			bne 	_ScanGoNext
.92d2		c5 36		cmp $36				cmp 	zTemp0 						; see if either matches
.92d4		f0 04		beq $92da			beq 	_ScanMatch
.92d6		c5 37		cmp $37				cmp 	zTemp0+1
.92d8		d0 06		bne $92e0			bne 	_ScanGoNext
.92da						_ScanMatch:
.92da		c9 80		cmp #$80			cmp 	#KWC_EOL 					; if asked for EOL, backtrack.
.92dc		d0 01		bne $92df			bne 	_ScanNotEndEOL
.92de		88		dey				dey
.92df						_ScanNotEndEOL:
.92df		60		rts				rts
.92e0						_ScanGoNext:
.92e0		20 e5 92	jsr $92e5			jsr  	ScanForwardOne 				; allows for shifts and so on.
.92e3		80 e6		bra $92cb			bra 	_ScanLoop
.92e5						ScanForwardOne:
.92e5		c9 40		cmp #$40			cmp 	#$40 						; if 00-3F, punctuation characters, already done.
.92e7		90 3e		bcc $9327			bcc 	_SFWExit
.92e9		c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if 40-82, skip one extra as these are 2 byte
.92eb		90 18		bcc $9305			bcc 	_ScanSkipOne	 			; offsets into the identifier table or shifts.
.92ed		c9 fc		cmp #$fc			cmp 	#$FC 						; FC-FF are data skips (hex consts, strings etc.)
.92ef		b0 2f		bcs $9320			bcs 	_ScanSkipData
.92f1		c9 ad		cmp #$ad			cmp 	#KWC_FIRST_STRUCTURE 		; structure keyword ?
.92f3		90 32		bcc $9327			bcc 	_SFWExit 					; if not, ordinary keywords.
.92f5		c9 b8		cmp #$b8			cmp 	#KWC_LAST_STRUCTURE+1
.92f7		b0 2e		bcs $9327			bcs 	_SFWExit
.92f9		c6 38		dec $38				dec 	zTemp1 						; decrement the sructure count
.92fb		c9 b2		cmp #$b2			cmp 	#KWC_FIRST_STRUCTURE_DEC 	; back if it is a dec structure (e.g. WEND/NEXT)
.92fd		b0 28		bcs $9327			bcs 	_SFWExit
.92ff		e6 38		inc $38				inc 	zTemp1 						; so it's an increment structure
.9301		e6 38		inc $38				inc 	zTemp1 						; twice to undo the dec
.9303		80 22		bra $9327			bra 	_SFWExit
.9305						_ScanSkipOne:
.9305		c8		iny				iny 								; consume the extra one.
.9306		c9 80		cmp #$80			cmp 	#KWC_EOL 					; if not EOL loop back
.9308		d0 1d		bne $9327			bne 	_SFWExit
.930a		18		clc				clc
.930b		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.930d		65 30		adc $30				adc 	codePtr
.930f		85 30		sta $30				sta 	codePtr
.9311		90 02		bcc $9315			bcc 	_CREExit
.9313		e6 31		inc $31				inc 	codePtr+1 					; carry
.9315						_CREExit:
.9315		a0 03		ldy #$03			ldy 	#3 							; scan start position.
.9317		b2 30		lda ($30)			lda 	(codePtr)
.9319		d0 0c		bne $9327			bne 	_SFWExit 					; if not zero, more to scan
.931b		a9 13		lda #$13		lda	#19
.931d		4c 83 93	jmp $9383		jmp	ErrorHandler
.9320						_ScanSkipData:
.9320		88		dey				dey 								; point at data token
.9321		c8		iny				iny 								; point to offset
.9322		98		tya				tya 								; A = offset position
.9323		38		sec				sec 								; add size +1 hence SEC
.9324		71 30		adc ($30),y			adc 	(codePtr),y
.9326		a8		tay				tay 								; make current position.
.9327						_SFWExit:
.9327		60		rts				rts
.9328						ScanGetCurrentLineStep:
.9328		64 38		stz $38				stz 	zTemp1
.932a		a0 03		ldy #$03			ldy 	#3
.932c						_SGCLSLoop:
.932c		b1 30		lda ($30),y			lda 	(codePtr),y
.932e		c8		iny				iny
.932f		c9 80		cmp #$80			cmp 	#KWC_EOL	 				; if EOL exit
.9331		f0 05		beq $9338			beq 	_SGCLSExit
.9333		20 e5 92	jsr $92e5			jsr 	ScanForwardOne
.9336		80 f4		bra $932c			bra 	_SGCLSLoop
.9338						_SGCLSExit:
.9338		a5 38		lda $38				lda 	zTemp1 						; return the adjustment
.933a		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/while.asm

.933b						Command_WHILE:
.933b		5a		phy				phy 								; save position of the test
.933c		a2 00		ldx #$00			ldx 	#0 							; work out the while test.
.933e		20 31 a2	jsr $a231			jsr 	EvaluateNumber
.9341		20 05 a3	jsr $a305			jsr 	NSMIsZero 					; check if zero
.9344		f0 0e		beq $9354			beq 	_WHExitLoop 				; if so exit the loop, while has failed.
.9346		98		tya				tya 								; position *after* test.
.9347		7a		ply				ply 								; restore position before test, at WHILE
.9348		88		dey				dey 								; so we execute the WHILE command again.
.9349		48		pha				pha 								; push after test on the stack
.934a		a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; allocate 6 bytes on the return stack.
.934c		20 07 b3	jsr $b307			jsr 	StackOpen
.934f		20 4c b3	jsr $b34c			jsr 	STKSaveCodePosition 		; save loop position - where the test value expr is.
.9352		7a		ply				ply 								; restore the position *after* the test
.9353		60		rts				rts
.9354						_WHExitLoop:
.9354		68		pla				pla 								; throw post loop position
.9355		a9 b7		lda #$b7			lda 	#KWD_WEND 					; scan forward past WEND
.9357		aa		tax				tax
.9358		20 c5 92	jsr $92c5			jsr 	ScanForward
.935b		60		rts				rts
.935c						Command_WEND:
.935c		a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; check WHILE is TOS e.g. in a while loop :)
.935e		a2 10		ldx #$10			ldx 	#ERRID_WHILE 				; this error if not.
.9360		20 34 b3	jsr $b334			jsr 	StackCheckFrame
.9363		20 5d b3	jsr $b35d			jsr 	STKLoadCodePosition 		; loop back to the WHILE keyword.
.9366		20 26 b3	jsr $b326			jsr 	StackClose		 			; erase the frame
.9369		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/charcheck.asm

.936a						CheckRightBracket:
.936a		b1 30		lda ($30),y			lda 	(codePtr),y
.936c		c8		iny				iny
.936d		c9 29		cmp #$29			cmp 	#KWD_RPAREN 						; exit if matches
.936f		d0 0f		bne $9380			bne 	CNAFail
.9371		60		rts				rts
.9372						CheckComma:
.9372		b1 30		lda ($30),y			lda 	(codePtr),y
.9374		c8		iny				iny
.9375		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 						; exit if matches
.9377		d0 07		bne $9380			bne 	CNAFail
.9379		60		rts				rts
.937a						CheckNextA:
.937a		d1 30		cmp ($30),y			cmp 	(codePtr),y
.937c		d0 02		bne $9380			bne 	CNAFail
.937e		c8		iny				iny 								; skip character
.937f		60		rts				rts 								; and exit
.9380						CNAFail:
.9380		4c 5b a4	jmp $a45b			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/errors.asm

.9383						ErrorHandler:
.9383		48		pha				pha 								; save error #
.9384		a8		tay				tay 								; find the error text
.9385		f0 4e		beq $93d5			beq 	_EHEnd
.9387		a2 00		ldx #$00			ldx 	#0
.9389		a9 74		lda #$74			lda 	#((ErrorText) & $FF)
.938b		85 36		sta $36				sta 	0+zTemp0
.938d		a9 a4		lda #$a4			lda 	#((ErrorText) >> 8)
.938f		85 37		sta $37				sta 	1+zTemp0
.9391						_EHFind:
.9391		88		dey				dey 								; keep looking through text
.9392		f0 0e		beq $93a2			beq 	_EHFound
.9394						_EHFindZero:
.9394		b2 36		lda ($36)			lda 	(zTemp0) 					; find the next error
.9396		e6 36		inc $36				inc 	zTemp0
.9398		d0 02		bne $939c			bne 	_EHFNoCarry
.939a		e6 37		inc $37				inc 	zTemp0+1
.939c						_EHFNoCarry:
.939c		c9 00		cmp #$00			cmp 	#0
.939e		d0 f4		bne $9394			bne 	_EHFindZero
.93a0		80 ef		bra $9391			bra 	_EHFind
.93a2						_EHFound:
.93a2		a5 36		lda $36				lda 	zTemp0 						; print message
.93a4		a6 37		ldx $37				ldx 	zTemp0+1
.93a6		20 e2 93	jsr $93e2			jsr 	PrintStringXA
.93a9		68		pla				pla  								; check if error is 'open structure'
.93aa		c9 13		cmp #$13			cmp 	#ERRID_STRUCT
.93ac		f0 22		beq $93d0			beq 	_EHCREnd
.93ae		a0 01		ldy #$01			ldy 	#1 							; if line number zero don't print it
.93b0		b1 30		lda ($30),y			lda 	(codePtr),y
.93b2		d0 05		bne $93b9			bne 	_EHAtMsg
.93b4		c8		iny				iny
.93b5		b1 30		lda ($30),y			lda 	(codePtr),y
.93b7		f0 17		beq $93d0			beq 	_EHCREnd
.93b9						_EHAtMsg:
.93b9		a2 93		ldx #$93			ldx 	#_AtMsg >> 8 				; print " at "
.93bb		a9 d8		lda #$d8			lda 	#_AtMsg & $FF
.93bd		20 e2 93	jsr $93e2			jsr 	PrintStringXA
.93c0		a0 01		ldy #$01			ldy 	#1 							; line number into XA
.93c2		b1 30		lda ($30),y			lda 	(codePtr),y
.93c4		48		pha				pha
.93c5		c8		iny				iny
.93c6		b1 30		lda ($30),y			lda 	(codePtr),y
.93c8		aa		tax				tax
.93c9		68		pla				pla
.93ca		20 f8 97	jsr $97f8			jsr 	ConvertInt16 				; convert XA to string
.93cd		20 e2 93	jsr $93e2			jsr 	PrintStringXA 				; and print it.
.93d0						_EHCREnd:
.93d0		a9 0d		lda #$0d			lda 	#13 						; new line
.93d2		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.93d5						_EHEnd:
.93d5		4c ee 87	jmp $87ee			jmp 	WarmStart
>93d8		20 61 74 20 6c 69 6e 65		_AtMsg:	.text 	" at line ",0
>93e0		20 00
.93e2						PrintStringXA:
.93e2		5a		phy				phy
.93e3		86 37		stx $37				stx 	zTemp0+1
.93e5		85 36		sta $36				sta 	zTemp0
.93e7		a0 00		ldy #$00			ldy 	#0
.93e9						_PSXALoop:
.93e9		b1 36		lda ($36),y			lda 	(zTemp0),y
.93eb		f0 06		beq $93f3			beq 	_PSXAExit
.93ed		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.93f0		c8		iny				iny
.93f1		80 f6		bra $93e9			bra 	_PSXALoop
.93f3						_PSXAExit:
.93f3		7a		ply				ply
.93f4		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/compare.asm

.93f5						UnaryTrue:
.93f5		fa		plx				plx
.93f6						ReturnTrue:
.93f6		a9 01		lda #$01			lda 	#1  						; set to 1
.93f8		20 e5 a2	jsr $a2e5			jsr 	NSMSetByte
.93fb		a9 80		lda #$80			lda 	#$80 						; set sign flag, so it is -1
.93fd		95 50		sta $50,x			sta 	NSStatus,x
.93ff		60		rts				rts
.9400						UnaryFalse:
.9400		fa		plx				plx
.9401						ReturnFalse:
.9401		4c e3 a2	jmp $a2e3			jmp 	NSMSetZero 					; set it all to zero
.9404						BinaryCompareEqual:
.9404		fa		plx				plx
.9405		20 40 94	jsr $9440			jsr 	CompareBaseCode
.9408		c9 00		cmp #$00			cmp 	#0
.940a		f0 ea		beq $93f6			beq 	ReturnTrue
.940c		80 f3		bra $9401			bra 	ReturnFalse
.940e						BinaryCompareLess:
.940e		fa		plx				plx
.940f		20 40 94	jsr $9440			jsr 	CompareBaseCode
.9412		c9 ff		cmp #$ff			cmp 	#$FF
.9414		f0 e0		beq $93f6			beq 	ReturnTrue
.9416		80 e9		bra $9401			bra 	ReturnFalse
.9418						BinaryCompareGreater:
.9418		fa		plx				plx
.9419		20 40 94	jsr $9440			jsr 	CompareBaseCode
.941c		c9 01		cmp #$01			cmp 	#1
.941e		f0 d6		beq $93f6			beq 	ReturnTrue
.9420		80 df		bra $9401			bra 	ReturnFalse
.9422						BinaryCompareNotEqual:
.9422		fa		plx				plx
.9423		20 40 94	jsr $9440			jsr 	CompareBaseCode
.9426		c9 00		cmp #$00			cmp 	#0
.9428		d0 cc		bne $93f6			bne 	ReturnTrue
.942a		80 d5		bra $9401			bra 	ReturnFalse
.942c						BinaryCompareLessEqual:
.942c		fa		plx				plx
.942d		20 40 94	jsr $9440			jsr 	CompareBaseCode
.9430		c9 01		cmp #$01			cmp 	#1
.9432		d0 c2		bne $93f6			bne 	ReturnTrue
.9434		80 cb		bra $9401			bra 	ReturnFalse
.9436						BinaryCompareGreaterEqual:
.9436		fa		plx				plx
.9437		20 40 94	jsr $9440			jsr 	CompareBaseCode
.943a		c9 ff		cmp #$ff			cmp 	#$FF
.943c		d0 b8		bne $93f6			bne 	ReturnTrue
.943e		80 c1		bra $9401			bra 	ReturnFalse
.9440						CompareBaseCode:
.9440		20 4b 9b	jsr $9b4b			jsr 	DereferenceTopTwo 			; make both values if references.
.9443		b5 50		lda $50,x			lda 	NSStatus,x 					; check if either is a string.
.9445		15 51		ora $51,x			ora 	NSStatus+1,x
.9447		29 10		and #$10			and 	#NSTString
.9449		d0 37		bne $9482			bne 	_CBCString 					; if so do string code, which will check if both.
.944b		b5 78		lda $78,x			lda 	NSExponent,x 				; check both are integers
.944d		15 79		ora $79,x			ora 	NSExponent+1,x
.944f		d0 34		bne $9485			bne 	_CBCFloat
.9451		b5 50		lda $50,x			lda 	NSStatus,x
.9453		15 51		ora $51,x			ora 	NSStatus+1,x
.9455		29 08		and #$08			and 	#NSTFloat
.9457		d0 2c		bne $9485			bne 	_CBCFloat
.9459		20 88 94	jsr $9488			jsr 	CompareFixMinusZero 		; fix up -0 just in cases.
.945c		e8		inx				inx
.945d		20 88 94	jsr $9488			jsr 	CompareFixMinusZero
.9460		ca		dex				dex
.9461		b5 50		lda $50,x			lda 	NSStatus,x 					; are the signs different ?
.9463		55 51		eor $51,x			eor 	NSStatus+1,x
.9465		10 0a		bpl $9471			bpl 	_CDCSameSign
.9467		b5 50		lda $50,x			lda 	NSStatus,x 					; if first one is -ve
.9469		30 14		bmi $947f			bmi 	_CBCLess 					; return $FF
.946b						_CBCGreater:
.946b		a9 01		lda #$01			lda 	#1
.946d		60		rts				rts
.946e						_CBCEqual:
.946e		a9 00		lda #$00			lda 	#0
.9470		60		rts				rts
.9471						_CDCSameSign:
.9471		20 9d 96	jsr $969d			jsr 	SubTopTwoStack 				; unsigned subtract
.9474		20 05 a3	jsr $a305			jsr 	NSMIsZero 					; or the mantissa together
.9477		f0 f5		beq $946e			beq 	_CBCEqual 					; -0 == 0
.9479		b5 70		lda $70,x			lda 	NSMantissa3,x 				; sign of the result. if +ve return $01 else return $FF
.947b		55 51		eor $51,x			eor 	NSStatus+1,x 				; however if both were -ve this is inverted
.947d		10 ec		bpl $946b			bpl 	_CBCGreater
.947f						_CBCLess:
.947f		a9 ff		lda #$ff			lda 	#$FF
.9481		60		rts				rts
.9482						_CBCString:
.9482		4c 0e 96	jmp $960e			jmp 	CompareStrings
.9485						_CBCFloat:
.9485		4c 58 99	jmp $9958			jmp 	CompareFloat
.9488						CompareFixMinusZero:
.9488		20 05 a3	jsr $a305			jsr 	NSMIsZero
.948b		d0 02		bne $948f			bne 	_CFXMZNotZero
.948d		74 50		stz $50,x			stz 	NSStatus,x
.948f						_CFXMZNotZero:
.948f		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/concat.asm

.9490						StringConcat:
.9490		b5 50		lda $50,x			lda 	NSStatus,x 					; check both strings
.9492		35 51		and $51,x			and 	NSStatus+1,x
.9494		29 18		and #$18			and 	#NSBTypeMask
.9496		c9 10		cmp #$10			cmp 	#NSTString
.9498		d0 50		bne $94ea			bne		_SCType
.949a		64 38		stz $38				stz 	zTemp1 						; counting total length
.949c		e8		inx				inx
.949d		20 bb 94	jsr $94bb			jsr 	_SCSetupZ0 					; setup for second
.94a0		20 c4 94	jsr $94c4			jsr 	_SCLengthZ0 				; length for second
.94a3		ca		dex				dex
.94a4		20 bb 94	jsr $94bb			jsr 	_SCSetupZ0 					; setup for first
.94a7		20 c4 94	jsr $94c4			jsr 	_SCLengthZ0 				; length for first
.94aa		a5 38		lda $38				lda 	zTemp1 						; allocate memory using total.
.94ac		20 f7 b3	jsr $b3f7			jsr 	StringTempAllocate
.94af		20 db 94	jsr $94db			jsr 	_SCCopy 					; copy first out, using zTemp0 from above
.94b2		e8		inx				inx
.94b3		20 bb 94	jsr $94bb			jsr 	_SCSetupZ0 					; copy second out
.94b6		20 db 94	jsr $94db			jsr 	_SCCopy
.94b9		ca		dex				dex
.94ba		60		rts				rts
.94bb						_SCSetupZ0:
.94bb		b5 58		lda $58,x			lda 	NSMantissa0,x
.94bd		85 36		sta $36				sta 	zTemp0
.94bf		b5 60		lda $60,x			lda 	NSMantissa1,x
.94c1		85 37		sta $37				sta 	zTemp0+1
.94c3		60		rts				rts
.94c4						_SCLengthZ0:
.94c4		5a		phy				phy
.94c5		a0 00		ldy #$00			ldy 	#0
.94c7						_SCLenLoop:
.94c7		b1 36		lda ($36),y			lda 	(zTemp0),y
.94c9		f0 0e		beq $94d9			beq 	_SCLExit
.94cb		c8		iny				iny
.94cc		e6 38		inc $38				inc 	zTemp1
.94ce		a5 38		lda $38				lda	 	zTemp1 						; check string too long.
.94d0		c9 fd		cmp #$fd			cmp 	#253
.94d2		d0 f3		bne $94c7			bne		_SCLenLoop
.94d4		a9 09		lda #$09		lda	#9
.94d6		4c 83 93	jmp $9383		jmp	ErrorHandler
.94d9						_SCLExit:
.94d9		7a		ply				ply
.94da		60		rts				rts
.94db						_SCCopy:
.94db		5a		phy				phy
.94dc		a0 00		ldy #$00			ldy 	#0
.94de						_SCCopyLoop:
.94de		b1 36		lda ($36),y			lda 	(zTemp0),y
.94e0		f0 06		beq $94e8			beq 	_SCCExit
.94e2		20 30 b4	jsr $b430			jsr 	StringTempWrite
.94e5		c8		iny				iny
.94e6		80 f6		bra $94de			bra 	_SCCopyLoop
.94e8						_SCCExit:
.94e8		7a		ply				ply
.94e9		60		rts				rts
.94ea						_SCType:
.94ea		4c 65 a4	jmp $a465			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/divide.asm

.94ed						IntegerDivide:
.94ed		fa		plx				plx
.94ee		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.94f0		15 51		ora $51,x			ora 	NSStatus+1,x
.94f2		0a		asl a				asl 	a 							; shift reference bit into sign bit
.94f3		0a		asl a				asl 	a
.94f4		10 05		bpl $94fb			bpl 	_NotRef
.94f6		48		pha				pha
.94f7		20 4b 9b	jsr $9b4b			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.94fa		68		pla				pla
.94fb						_NotRef:
.94fb		0a		asl a				asl 	a
.94fc		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.94fe		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9500		15 79		ora $79,x			ora 	NSExponent+1,x
.9502		f0 03		beq $9507			beq 	_IntegerCode 				; if clear, then we have two integers
.9504		4c 65 a4	jmp $a465			jmp 	TypeError 					; anything else, type mismatch.
.9507						_IntegerCode:
.9507		20 21 95	jsr $9521			jsr 	CheckDivideZero 			; do div zero check
.950a		20 53 95	jsr $9553			jsr 	Int32Divide 				; do the division
.950d		20 04 96	jsr $9604			jsr 	CalculateSign 				; calculate result sign
.9510						NSMCopyPlusTwoToZero:
.9510		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.9512		95 58		sta $58,x			sta 	NSMantissa0,x
.9514		b5 62		lda $62,x			lda 	NSMantissa1+2,x
.9516		95 60		sta $60,x			sta 	NSMantissa1,x
.9518		b5 6a		lda $6a,x			lda 	NSMantissa2+2,x
.951a		95 68		sta $68,x			sta 	NSMantissa2,x
.951c		b5 72		lda $72,x			lda 	NSMantissa3+2,x
.951e		95 70		sta $70,x			sta 	NSMantissa3,x
.9520		60		rts				rts
.9521						CheckDivideZero:
.9521		e8		inx				inx
.9522		20 05 a3	jsr $a305			jsr 	NSMIsZero
.9525		f0 02		beq $9529			beq 	_CDVError
.9527		ca		dex				dex
.9528		60		rts				rts
.9529						_CDVError:
.9529		a9 03		lda #$03		lda	#3
.952b		4c 83 93	jmp $9383		jmp	ErrorHandler
.952e						IntegerModulus:
.952e		fa		plx				plx
.952f		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9531		15 51		ora $51,x			ora 	NSStatus+1,x
.9533		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9534		0a		asl a				asl 	a
.9535		10 05		bpl $953c			bpl 	_NotRef
.9537		48		pha				pha
.9538		20 4b 9b	jsr $9b4b			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.953b		68		pla				pla
.953c						_NotRef:
.953c		0a		asl a				asl 	a
.953d		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.953f		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9541		15 79		ora $79,x			ora 	NSExponent+1,x
.9543		f0 03		beq $9548			beq 	_IntegerCode 				; if clear, then we have two integers
.9545		4c 65 a4	jmp $a465			jmp 	TypeError 					; anything else, type mismatch.
.9548						_IntegerCode:
.9548						IntegerModulusNoCheck:
.9548		20 21 95	jsr $9521			jsr 	CheckDivideZero 			; do div zero check
.954b		20 53 95	jsr $9553			jsr 	Int32Divide 				; do the division
.954e		16 50		asl $50,x			asl 	NSStatus,x 					; clear the sign bit.
.9550		56 50		lsr $50,x			lsr 	NSStatus,x
.9552		60		rts				rts
.9553						Int32Divide:
.9553		48		pha				pha 								; save AXY
.9554		5a		phy				phy
.9555		20 c6 a2	jsr $a2c6			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.9558		20 df a2	jsr $a2df			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.955b		a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.955d						_I32DivideLoop:
.955d		e8		inx				inx
.955e		e8		inx				inx
.955f		20 f2 a2	jsr $a2f2			jsr 	NSMShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.9562		ca		dex				dex
.9563		ca		dex				dex
.9564		20 f3 a2	jsr $a2f3			jsr 	NSMRotateLeft
.9567		20 92 95	jsr $9592			jsr 	DivideCheckSubtract 		; check if subtract possible
.956a		90 02		bcc $956e			bcc 	_I32DivideNoCarryIn
.956c		f6 5a		inc $5a,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.956e						_I32DivideNoCarryIn:
.956e		88		dey				dey 								; loop round till division completed.
.956f		d0 ec		bne $955d			bne 	_I32DivideLoop
.9571		7a		ply				ply 								; restore AXY and exit
.9572		68		pla				pla
.9573		60		rts				rts
.9574						Int32ShiftDivide:
.9574		48		pha				pha 								; save AY
.9575		5a		phy				phy
.9576		e8		inx				inx 								; clear S[X+2]
.9577		e8		inx				inx
.9578		20 e3 a2	jsr $a2e3			jsr 	NSMSetZero
.957b		ca		dex				dex
.957c		ca		dex				dex
.957d		a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.957f						_I32SDLoop:
.957f		20 92 95	jsr $9592			jsr 	DivideCheckSubtract 		; check if subtract possible
.9582		e8		inx				inx
.9583		e8		inx				inx
.9584		20 f3 a2	jsr $a2f3			jsr 	NSMRotateLeft				; shift 64 bit FPA left, rotating carry in
.9587		ca		dex				dex
.9588		ca		dex				dex
.9589		20 f3 a2	jsr $a2f3			jsr 	NSMRotateLeft
.958c		88		dey				dey 	 							; do 31 times
.958d		d0 f0		bne $957f			bne 	_I32SDLoop
.958f		7a		ply				ply 								; restore AY and exit
.9590		68		pla				pla
.9591		60		rts				rts
.9592						DivideCheckSubtract:
.9592		20 9d 96	jsr $969d			jsr 	SubTopTwoStack 				; subtract Stack[X+1] from Stack[X+0]
.9595		b0 04		bcs $959b			bcs 	_DCSExit 					; if carry set, then could do, exit
.9597		20 83 96	jsr $9683			jsr 	AddTopTwoStack 				; add it back in
.959a		18		clc				clc 								; and return False
.959b						_DCSExit:
.959b		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/multiply.asm

.959c						MulInteger:
.959c		fa		plx				plx
.959d		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.959f		15 51		ora $51,x			ora 	NSStatus+1,x
.95a1		0a		asl a				asl 	a 							; shift reference bit into sign bit
.95a2		0a		asl a				asl 	a
.95a3		10 05		bpl $95aa			bpl 	_NotRef
.95a5		48		pha				pha
.95a6		20 4b 9b	jsr $9b4b			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.95a9		68		pla				pla
.95aa						_NotRef:
.95aa		0a		asl a				asl 	a 							; put MSB of type into A:7
.95ab		30 09		bmi $95b6			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.95ad		b5 78		lda $78,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.95af		15 79		ora $79,x			ora 	NSExponent+1,x
.95b1		f0 06		beq $95b9			beq 	_IntegerCode 				; if clear, then we have two integers
.95b3		4c 1a 9a	jmp $9a1a			jmp 	FloatingPointMultiply 							; otherwise at least one float.
.95b6						_StringData:
.95b6		4c 6f a4	jmp $a46f			jmp 	NotDoneError							; at least one string - don't know both are strings.
.95b9						_IntegerCode:
.95b9		20 c6 95	jsr $95c6			jsr 	MultiplyShort
.95bc		c9 00		cmp #$00			cmp 	#0
.95be		f0 05		beq $95c5			beq 	_MIExit
.95c0		a9 04		lda #$04		lda	#4
.95c2		4c 83 93	jmp $9383		jmp	ErrorHandler
.95c5						_MIExit:
.95c5		60		rts				rts
.95c6						MultiplyShort:
.95c6		5a		phy				phy 								; save Y
.95c7		20 c6 a2	jsr $a2c6			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.95ca		20 df a2	jsr $a2df			jsr 	NSMSetZeroMantissaOnly 		; set mantissa S[X] to zero
.95cd		a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.95cf						_I32MLoop:
.95cf		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.95d1		15 62		ora $62,x			ora 	NSMantissa1+2,x
.95d3		15 6a		ora $6a,x			ora 	NSMantissa2+2,x
.95d5		15 72		ora $72,x			ora 	NSMantissa3+2,x
.95d7		f0 25		beq $95fe			beq 	_I32MExit 					; exit if zero
.95d9		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.95db		29 01		and #$01			and 	#1
.95dd		f0 0d		beq $95ec			beq 	_I32MNoAdd
.95df		20 83 96	jsr $9683			jsr 	AddTopTwoStack 				; if so add S[X+1] to S[X+0]
.95e2		b5 70		lda $70,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.95e4		10 06		bpl $95ec			bpl 	_I32MNoAdd
.95e6						_I32ShiftRight:
.95e6		20 fc a2	jsr $a2fc			jsr 	NSMShiftRight 				; shift S[X] right
.95e9		c8		iny				iny 								; increment shift count
.95ea		80 09		bra $95f5			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.95ec						_I32MNoAdd:
.95ec		34 71		bit $71,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.95ee		70 f6		bvs $95e6			bvs 	_I32ShiftRight 				; instead.
.95f0		e8		inx				inx
.95f1		20 f2 a2	jsr $a2f2			jsr 	NSMShiftLeft 				; shift additive S[X+1] left
.95f4		ca		dex				dex
.95f5						_I32MShiftUpper:
.95f5		e8		inx				inx 								; shift S[X+2] right
.95f6		e8		inx				inx
.95f7		20 fc a2	jsr $a2fc			jsr 	NSMShiftRight
.95fa		ca		dex				dex
.95fb		ca		dex				dex
.95fc		80 d1		bra $95cf			bra 	_I32MLoop 					; try again.
.95fe						_I32MExit:
.95fe		20 04 96	jsr $9604			jsr 	CalculateSign
.9601		98		tya				tya 								; shift in A
.9602		7a		ply				ply 								; restore Y and exit
.9603		60		rts				rts
.9604						CalculateSign:
.9604		b5 50		lda $50,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.9606		16 50		asl $50,x			asl 	NSStatus,x 					; shift result left
.9608		55 51		eor $51,x			eor 	NSStatus+1,x
.960a		0a		asl a				asl 	a 							; shift bit 7 into carry
.960b		76 50		ror $50,x			ror 	NSStatus,x 					; shift right into status byte.
.960d		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/scompare.asm

.960e						CompareStrings:
.960e		b5 50		lda $50,x			lda 	NSStatus,x 					; check both are strings
.9610		35 51		and $51,x			and 	NSStatus+1,x
.9612		29 10		and #$10			and 	#NSBIsString
.9614		f0 28		beq $963e			beq 	_CSTypeError
.9616		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy string addresses to zTemp0/1
.9618		85 36		sta $36				sta 	zTemp0
.961a		b5 60		lda $60,x			lda 	NSMantissa1,x
.961c		85 37		sta $37				sta 	zTemp0+1
.961e		b5 59		lda $59,x			lda 	NSMantissa0+1,x
.9620		85 38		sta $38				sta 	zTemp1
.9622		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9624		85 39		sta $39				sta 	zTemp1+1
.9626		5a		phy				phy 								; save Y so we can access strings
.9627		a0 ff		ldy #$ff			ldy 	#$FF 						; -1 for pre increment.
.9629						_CSLoop:
.9629		c8		iny				iny
.962a		b1 36		lda ($36),y			lda 	(zTemp0),y 					; check if they are the same
.962c		d1 38		cmp ($38),y			cmp 	(zTemp1),y
.962e		d0 06		bne $9636			bne 	_CSDifferent
.9630		c9 00		cmp #$00			cmp 	#0 							; reached end ?
.9632		d0 f5		bne $9629			bne 	_CSLoop 					; still comparing
.9634						_CSExit:
.9634		7a		ply				ply 								; reached end, return zero in A from EOS
.9635		60		rts				rts
.9636						_CSDifferent:
.9636		a9 ff		lda #$ff			lda 	#255 						; if < return $FF
.9638		90 fa		bcc $9634			bcc		_CSExit
.963a		a9 01		lda #$01			lda 	#1 							; otherwise return 1.
.963c		80 f6		bra $9634			bra 	_CSExit
.963e						_CSTypeError:
.963e		4c 65 a4	jmp $a465			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/shifts.asm

.9641						ShiftLeft:
.9641		38		sec				sec 								; common code, carry determines which way.
.9642		80 01		bra $9645			bra 	ShiftMain
.9644						ShiftRight:
.9644		18		clc				clc
.9645						ShiftMain:
.9645		fa		plx				plx 								; restore X
.9646		08		php				php 								; save direction
.9647		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9649		15 51		ora $51,x			ora 	NSStatus+1,x
.964b		0a		asl a				asl 	a 							; shift reference bit into sign bit
.964c		0a		asl a				asl 	a
.964d		10 05		bpl $9654			bpl 	_NotRef
.964f		48		pha				pha
.9650		20 4b 9b	jsr $9b4b			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9653		68		pla				pla
.9654						_NotRef:
.9654		0a		asl a				asl 	a
.9655		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9657		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9659		15 79		ora $79,x			ora 	NSExponent+1,x
.965b		f0 03		beq $9660			beq 	_IntegerCode 				; if clear, then we have two integers
.965d		4c 65 a4	jmp $a465			jmp 	TypeError 					; anything else, type mismatch.
.9660						_IntegerCode:
.9660		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; check number < 32
.9662		29 e0		and #$e0			and 	#$E0
.9664		15 61		ora $61,x			ora 	NSMantissa1+1,x
.9666		15 69		ora $69,x			ora 	NSMantissa2+1,x
.9668		15 71		ora $71,x			ora 	NSMantissa3+1,x
.966a		d0 12		bne $967e			bne 	_SMExit0 					; if >= 32 it will always return zero.
.966c						_SMLoop:
.966c		d6 59		dec $59,x			dec 	NSMantissa0+1,x 			; predecrement, could do << 0
.966e		30 11		bmi $9681			bmi 	_SMExit 					; exit if done.
.9670		28		plp				plp 								; restore direction setting
.9671		08		php				php
.9672		90 05		bcc $9679			bcc 	_SMRight
.9674		20 f2 a2	jsr $a2f2			jsr 	NSMShiftLeft 				; shift left if CS
.9677		80 f3		bra $966c			bra 	_SMLoop
.9679						_SMRight:
.9679		20 fc a2	jsr $a2fc			jsr 	NSMShiftRight 				; shift right if CC
.967c		80 ee		bra $966c			bra 	_SMLoop
.967e						_SMExit0:
.967e		20 e3 a2	jsr $a2e3			jsr 	NSMSetZero 					; return zero.
.9681						_SMExit:
.9681		28		plp				plp 								; throw direction
.9682		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/simple.asm

.9683						AddTopTwoStack:
.9683		18		clc				clc
.9684		b5 58		lda $58,x			lda		NSMantissa0,x
.9686		75 59		adc $59,x			adc 		NSMantissa0+1,x
.9688		95 58		sta $58,x			sta 	NSMantissa0,x
.968a		b5 60		lda $60,x			lda		NSMantissa1,x
.968c		75 61		adc $61,x			adc 		NSMantissa1+1,x
.968e		95 60		sta $60,x			sta 	NSMantissa1,x
.9690		b5 68		lda $68,x			lda		NSMantissa2,x
.9692		75 69		adc $69,x			adc 		NSMantissa2+1,x
.9694		95 68		sta $68,x			sta 	NSMantissa2,x
.9696		b5 70		lda $70,x			lda		NSMantissa3,x
.9698		75 71		adc $71,x			adc 		NSMantissa3+1,x
.969a		95 70		sta $70,x			sta 	NSMantissa3,x
.969c		60		rts				rts
.969d						SubTopTwoStack:
.969d		38		sec				sec
.969e		b5 58		lda $58,x			lda		NSMantissa0,x
.96a0		f5 59		sbc $59,x			sbc 		NSMantissa0+1,x
.96a2		95 58		sta $58,x			sta 	NSMantissa0,x
.96a4		b5 60		lda $60,x			lda		NSMantissa1,x
.96a6		f5 61		sbc $61,x			sbc 		NSMantissa1+1,x
.96a8		95 60		sta $60,x			sta 	NSMantissa1,x
.96aa		b5 68		lda $68,x			lda		NSMantissa2,x
.96ac		f5 69		sbc $69,x			sbc 		NSMantissa2+1,x
.96ae		95 68		sta $68,x			sta 	NSMantissa2,x
.96b0		b5 70		lda $70,x			lda		NSMantissa3,x
.96b2		f5 71		sbc $71,x			sbc 		NSMantissa3+1,x
.96b4		95 70		sta $70,x			sta 	NSMantissa3,x
.96b6		60		rts				rts
.96b7						AddInteger:
.96b7		fa		plx				plx
.96b8		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.96ba		15 51		ora $51,x			ora 	NSStatus+1,x
.96bc		0a		asl a				asl 	a 							; shift reference bit into sign bit
.96bd		0a		asl a				asl 	a
.96be		10 05		bpl $96c5			bpl 	_NotRef
.96c0		48		pha				pha
.96c1		20 4b 9b	jsr $9b4b			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.96c4		68		pla				pla
.96c5						_NotRef:
.96c5		0a		asl a				asl 	a 							; put MSB of type into A:7
.96c6		30 09		bmi $96d1			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.96c8		b5 78		lda $78,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.96ca		15 79		ora $79,x			ora 	NSExponent+1,x
.96cc		f0 06		beq $96d4			beq 	_IntegerCode 				; if clear, then we have two integers
.96ce		4c ca 98	jmp $98ca			jmp 	FloatingPointAdd 							; otherwise at least one float.
.96d1						_StringData:
.96d1		4c 90 94	jmp $9490			jmp 	StringConcat							; at least one string - don't know both are strings.
.96d4						_IntegerCode:
.96d4						AddCode:
.96d4		b5 50		lda $50,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.96d6		55 51		eor $51,x			eor 	NSStatus+1,x
.96d8		10 a9		bpl $9683			bpl 	AddTopTwoStack
.96da		20 9d 96	jsr $969d			jsr 	SubTopTwoStack 				; do a physical subtraction
.96dd		34 70		bit $70,x			bit 	NSMantissa3,x 				; result is +ve, okay
.96df		10 07		bpl $96e8			bpl 	_AddExit
.96e1		b5 51		lda $51,x			lda 	NSStatus+1,x 				; sign is that of 2nd value
.96e3		95 50		sta $50,x			sta 	NSStatus,x
.96e5		20 ac a2	jsr $a2ac			jsr 	NSMNegateMantissa 			; negate the mantissa and exit
.96e8						_AddExit:
.96e8		20 05 a3	jsr $a305			jsr 	NSMIsZero 					; check for -0
.96eb		d0 02		bne $96ef			bne 	_AddNonZero
.96ed		74 50		stz $50,x			stz 	NSStatus,x
.96ef						_AddNonZero:
.96ef		60		rts				rts
.96f0						SubInteger:
.96f0		fa		plx				plx
.96f1		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.96f3		15 51		ora $51,x			ora 	NSStatus+1,x
.96f5		0a		asl a				asl 	a 							; shift reference bit into sign bit
.96f6		0a		asl a				asl 	a
.96f7		10 05		bpl $96fe			bpl 	_NotRef
.96f9		48		pha				pha
.96fa		20 4b 9b	jsr $9b4b			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.96fd		68		pla				pla
.96fe						_NotRef:
.96fe		0a		asl a				asl 	a 							; put MSB of type into A:7
.96ff		30 09		bmi $970a			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.9701		b5 78		lda $78,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9703		15 79		ora $79,x			ora 	NSExponent+1,x
.9705		f0 06		beq $970d			beq 	_IntegerCode 				; if clear, then we have two integers
.9707		4c cf 98	jmp $98cf			jmp 	FloatingPointSub 							; otherwise at least one float.
.970a						_StringData:
.970a		4c 6f a4	jmp $a46f			jmp 	NotDoneError							; at least one string - don't know both are strings.
.970d						_IntegerCode:
.970d		b5 51		lda $51,x			lda 	NSStatus+1,x 				; negate the second value.
.970f		49 80		eor #$80			eor 	#$80
.9711		95 51		sta $51,x			sta 	NSStatus+1,x
.9713		80 bf		bra $96d4			bra 	AddCode 					; and do the same code as add.
.9715						AndInteger:
.9715		fa		plx				plx
.9716		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9718		15 51		ora $51,x			ora 	NSStatus+1,x
.971a		0a		asl a				asl 	a 							; shift reference bit into sign bit
.971b		0a		asl a				asl 	a
.971c		10 05		bpl $9723			bpl 	_NotRef
.971e		48		pha				pha
.971f		20 4b 9b	jsr $9b4b			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9722		68		pla				pla
.9723						_NotRef:
.9723		0a		asl a				asl 	a
.9724		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9726		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9728		15 79		ora $79,x			ora 	NSExponent+1,x
.972a		f0 03		beq $972f			beq 	_IntegerCode 				; if clear, then we have two integers
.972c		4c 65 a4	jmp $a465			jmp 	TypeError 					; anything else, type mismatch.
.972f						_IntegerCode:
.972f		b5 58		lda $58,x			lda		NSMantissa0,x
.9731		35 59		and $59,x			and 		NSMantissa0+1,x
.9733		95 58		sta $58,x			sta 	NSMantissa0,x
.9735		b5 60		lda $60,x			lda		NSMantissa1,x
.9737		35 61		and $61,x			and 		NSMantissa1+1,x
.9739		95 60		sta $60,x			sta 	NSMantissa1,x
.973b		b5 68		lda $68,x			lda		NSMantissa2,x
.973d		35 69		and $69,x			and 		NSMantissa2+1,x
.973f		95 68		sta $68,x			sta 	NSMantissa2,x
.9741		b5 70		lda $70,x			lda		NSMantissa3,x
.9743		35 71		and $71,x			and 		NSMantissa3+1,x
.9745		95 70		sta $70,x			sta 	NSMantissa3,x
.9747		74 50		stz $50,x			stz	 	NSStatus,x 					; ignore sign.
.9749		60		rts				rts
.974a						OraInteger:
.974a		fa		plx				plx
.974b		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.974d		15 51		ora $51,x			ora 	NSStatus+1,x
.974f		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9750		0a		asl a				asl 	a
.9751		10 05		bpl $9758			bpl 	_NotRef
.9753		48		pha				pha
.9754		20 4b 9b	jsr $9b4b			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9757		68		pla				pla
.9758						_NotRef:
.9758		0a		asl a				asl 	a
.9759		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.975b		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.975d		15 79		ora $79,x			ora 	NSExponent+1,x
.975f		f0 03		beq $9764			beq 	_IntegerCode 				; if clear, then we have two integers
.9761		4c 65 a4	jmp $a465			jmp 	TypeError 					; anything else, type mismatch.
.9764						_IntegerCode:
.9764		b5 58		lda $58,x			lda		NSMantissa0,x
.9766		15 59		ora $59,x			ora 		NSMantissa0+1,x
.9768		95 58		sta $58,x			sta 	NSMantissa0,x
.976a		b5 60		lda $60,x			lda		NSMantissa1,x
.976c		15 61		ora $61,x			ora 		NSMantissa1+1,x
.976e		95 60		sta $60,x			sta 	NSMantissa1,x
.9770		b5 68		lda $68,x			lda		NSMantissa2,x
.9772		15 69		ora $69,x			ora 		NSMantissa2+1,x
.9774		95 68		sta $68,x			sta 	NSMantissa2,x
.9776		b5 70		lda $70,x			lda		NSMantissa3,x
.9778		15 71		ora $71,x			ora 		NSMantissa3+1,x
.977a		95 70		sta $70,x			sta 	NSMantissa3,x
.977c		74 50		stz $50,x			stz	 	NSStatus,x 					; ignore sign.
.977e		60		rts				rts
.977f						EorInteger:
.977f		fa		plx				plx
.9780		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9782		15 51		ora $51,x			ora 	NSStatus+1,x
.9784		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9785		0a		asl a				asl 	a
.9786		10 05		bpl $978d			bpl 	_NotRef
.9788		48		pha				pha
.9789		20 4b 9b	jsr $9b4b			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.978c		68		pla				pla
.978d						_NotRef:
.978d		0a		asl a				asl 	a
.978e		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9790		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9792		15 79		ora $79,x			ora 	NSExponent+1,x
.9794		f0 03		beq $9799			beq 	_IntegerCode 				; if clear, then we have two integers
.9796		4c 65 a4	jmp $a465			jmp 	TypeError 					; anything else, type mismatch.
.9799						_IntegerCode:
.9799		b5 58		lda $58,x			lda		NSMantissa0,x
.979b		55 59		eor $59,x			eor 		NSMantissa0+1,x
.979d		95 58		sta $58,x			sta 	NSMantissa0,x
.979f		b5 60		lda $60,x			lda		NSMantissa1,x
.97a1		55 61		eor $61,x			eor 		NSMantissa1+1,x
.97a3		95 60		sta $60,x			sta 	NSMantissa1,x
.97a5		b5 68		lda $68,x			lda		NSMantissa2,x
.97a7		55 69		eor $69,x			eor 		NSMantissa2+1,x
.97a9		95 68		sta $68,x			sta 	NSMantissa2,x
.97ab		b5 70		lda $70,x			lda		NSMantissa3,x
.97ad		55 71		eor $71,x			eor 		NSMantissa3+1,x
.97af		95 70		sta $70,x			sta 	NSMantissa3,x
.97b1		74 50		stz $50,x			stz	 	NSStatus,x 					; ignore sign.
.97b3		60		rts				rts
.97b4						WordIndirect:
.97b4		fa		plx				plx
.97b5		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.97b7		15 51		ora $51,x			ora 	NSStatus+1,x
.97b9		0a		asl a				asl 	a 							; shift reference bit into sign bit
.97ba		0a		asl a				asl 	a
.97bb		10 05		bpl $97c2			bpl 	_NotRef
.97bd		48		pha				pha
.97be		20 4b 9b	jsr $9b4b			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.97c1		68		pla				pla
.97c2						_NotRef:
.97c2		0a		asl a				asl 	a
.97c3		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.97c5		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.97c7		15 79		ora $79,x			ora 	NSExponent+1,x
.97c9		f0 03		beq $97ce			beq 	_IntegerCode 				; if clear, then we have two integers
.97cb		4c 65 a4	jmp $a465			jmp 	TypeError 					; anything else, type mismatch.
.97ce						_IntegerCode:
.97ce		20 d4 96	jsr $96d4			jsr 	AddCode 					; add the two values
.97d1		a9 22		lda #$22			lda 	#NSBIsReference+2 			; make a 2 byte reference
.97d3		95 50		sta $50,x			sta 	NSStatus,x
.97d5		60		rts				rts
.97d6						ByteIndirect:
.97d6		fa		plx				plx
.97d7		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.97d9		15 51		ora $51,x			ora 	NSStatus+1,x
.97db		0a		asl a				asl 	a 							; shift reference bit into sign bit
.97dc		0a		asl a				asl 	a
.97dd		10 05		bpl $97e4			bpl 	_NotRef
.97df		48		pha				pha
.97e0		20 4b 9b	jsr $9b4b			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.97e3		68		pla				pla
.97e4						_NotRef:
.97e4		0a		asl a				asl 	a
.97e5		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.97e7		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.97e9		15 79		ora $79,x			ora 	NSExponent+1,x
.97eb		f0 03		beq $97f0			beq 	_IntegerCode 				; if clear, then we have two integers
.97ed		4c 65 a4	jmp $a465			jmp 	TypeError 					; anything else, type mismatch.
.97f0						_IntegerCode:
.97f0		20 d4 96	jsr $96d4			jsr 	AddCode 					; add the two values
.97f3		a9 21		lda #$21			lda 	#NSBIsReference+1 			; make a 1 byte reference
.97f5		95 50		sta $50,x			sta 	NSStatus,x
.97f7		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/tostring.asm

.97f8						ConvertInt16:
.97f8		85 58		sta $58				sta 	NSMantissa0 				; set up as 32 bit conversion
.97fa		86 60		stx $60				stx 	NSMantissa1
.97fc		64 68		stz $68				stz 	NSMantissa2
.97fe		64 70		stz $70				stz 	NSMantissa3
.9800		64 50		stz $50				stz 	NSStatus 					; positive integer
.9802		a2 00		ldx #$00			ldx 	#0 							; stack level
.9804		a9 0a		lda #$0a			lda 	#10 						; base 10 decimal.
.9806		80 00		bra $9808			bra 	ConvertInt32
.9808						ConvertInt32:
.9808		5a		phy				phy
.9809		a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.980b		24 50		bit $50				bit 	NSStatus 					; output a - if not negative.
.980d		10 08		bpl $9817			bpl 	_CI32NotNeg
.980f		48		pha				pha
.9810		a9 2d		lda #$2d			lda 	#'-'
.9812		99 23 06	sta $0623,y			sta 	numberBuffer,y
.9815		c8		iny				iny
.9816		68		pla				pla
.9817						_CI32NotNeg:
.9817		20 25 98	jsr $9825			jsr 	_CI32DivideConvert 			; recursive conversion
.981a		a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.981c		99 23 06	sta $0623,y			sta 	numberBuffer,y
.981f		7a		ply				ply
.9820		a2 06		ldx #$06			ldx 	#numberBuffer >> 8 			; return address in XA
.9822		a9 23		lda #$23			lda 	#numberBuffer & $FF
.9824		60		rts				rts
.9825						_CI32DivideConvert:
.9825		e8		inx				inx 								; write to next slot up
.9826		20 e5 a2	jsr $a2e5			jsr 	NSMSetByte 		 			; write the base out.
.9829		ca		dex				dex
.982a		20 53 95	jsr $9553			jsr 	Int32Divide 				; divide
.982d		b5 58		lda $58,x			lda 	NSMantissa0,x 				; save remainder
.982f		48		pha				pha
.9830		20 10 95	jsr $9510			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.9833		20 05 a3	jsr $a305			jsr 	NSMIsZero 					; is it zero ?
.9836		f0 05		beq $983d			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.9838		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.983a		20 25 98	jsr $9825			jsr 	_CI32DivideConvert 			; and recusrively call.
.983d						_CI32NoRecurse:
.983d		68		pla				pla 								; remainder
.983e		c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII, allowing for hexadecimal.
.9840		90 02		bcc $9844			bcc 	_CI32NotHex
.9842		69 26		adc #$26			adc 	#6+32
.9844						_CI32NotHex:
.9844		69 30		adc #$30			adc 	#48
.9846		99 23 06	sta $0623,y			sta 	numberBuffer,y 				; write out and exit
.9849		c8		iny				iny
.984a		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/expression.asm


;******  Processing file: ./common/expressions/../generated/precedence.dat

.984b						PrecedenceLevel:
>984b		04					.byte	 4	; $00 <<
>984c		02					.byte	 2	; $01 <=
>984d		02					.byte	 2	; $02 <>
>984e		00					.byte	 0	; $03 !!3
>984f		00					.byte	 0	; $04 ><
>9850		02					.byte	 2	; $05 >=
>9851		04					.byte	 4	; $06 >>
>9852		00					.byte	 0	; $07 !!7
>9853		00					.byte	 0	; $08 !!8
>9854		00					.byte	 0	; $09 !!9
>9855		00					.byte	 0	; $0a !!10
>9856		00					.byte	 0	; $0b !!11
>9857		00					.byte	 0	; $0c !!12
>9858		00					.byte	 0	; $0d !!13
>9859		00					.byte	 0	; $0e !!14
>985a		00					.byte	 0	; $0f !!15
>985b		00					.byte	 0	; $10 @
>985c		00					.byte	 0	; $11 !!17
>985d		00					.byte	 0	; $12 !!18
>985e		00					.byte	 0	; $13 [
>985f		04					.byte	 4	; $14 \
>9860		00					.byte	 0	; $15 ]
>9861		01					.byte	 1	; $16 ^
>9862		00					.byte	 0	; $17 _
>9863		00					.byte	 0	; $18 `
>9864		00					.byte	 0	; $19 !!25
>9865		00					.byte	 0	; $1a !!26
>9866		00					.byte	 0	; $1b {
>9867		01					.byte	 1	; $1c |
>9868		00					.byte	 0	; $1d }
>9869		00					.byte	 0	; $1e ~
>986a		00					.byte	 0	; $1f <7F>
>986b		00					.byte	 0	; $20
>986c		05					.byte	 5	; $21 !
>986d		00					.byte	 0	; $22 "
>986e		00					.byte	 0	; $23 #
>986f		05					.byte	 5	; $24 $
>9870		04					.byte	 4	; $25 %
>9871		01					.byte	 1	; $26 &
>9872		00					.byte	 0	; $27 '
>9873		00					.byte	 0	; $28 (
>9874		00					.byte	 0	; $29 )
>9875		04					.byte	 4	; $2a *
>9876		03					.byte	 3	; $2b +
>9877		00					.byte	 0	; $2c ,
>9878		03					.byte	 3	; $2d -
>9879		00					.byte	 0	; $2e .
>987a		04					.byte	 4	; $2f /
>987b		00					.byte	 0	; $30 0
>987c		00					.byte	 0	; $31 1
>987d		00					.byte	 0	; $32 2
>987e		00					.byte	 0	; $33 3
>987f		00					.byte	 0	; $34 4
>9880		00					.byte	 0	; $35 5
>9881		00					.byte	 0	; $36 6
>9882		00					.byte	 0	; $37 7
>9883		00					.byte	 0	; $38 8
>9884		00					.byte	 0	; $39 9
>9885		00					.byte	 0	; $3a :
>9886		00					.byte	 0	; $3b ;
>9887		02					.byte	 2	; $3c <
>9888		02					.byte	 2	; $3d =
>9889		02					.byte	 2	; $3e >
>988a		05					.byte	 5	; $3f ?

;******  Return to file: ./common/expressions/expression.asm

.988b						EvaluateExpressionAt0:
.988b		a2 00		ldx #$00			ldx 	#0 							; bottom stack level
.988d						EvaluateExpression:
.988d		a9 00		lda #$00			lda 	#0 							; lowest precedence level
.988f						EvaluateExpressionAtPrecedence:
.988f		48		pha				pha 								; save precedence level
.9890		20 d7 9c	jsr $9cd7			jsr 	EvaluateTerm 				; evaluate term into level X.
.9893		68		pla				pla 								; restore precedence level.
.9894						_EXPRLoop:
.9894		85 36		sta $36				sta 	zTemp0 						; save current precedence level.
.9896		b1 30		lda ($30),y			lda 	(codePtr),y
.9898		c9 40		cmp #$40			cmp		#$40 						; if >= $40 cannot be an operator
.989a		b0 25		bcs $98c1			bcs 	_EXPRExit
.989c		da		phx				phx 								; read the operator precedence
.989d		aa		tax				tax
.989e		bd 4b 98	lda $984b,x			lda 	PrecedenceLevel,x
.98a1		fa		plx				plx
.98a2		c9 00		cmp #$00			cmp 	#0							; if zero exit (not an operator)
.98a4		f0 1b		beq $98c1			beq 	_EXPRExit
.98a6		85 37		sta $37				sta 	zTemp0+1 					; save operator precedence level.
.98a8		a5 36		lda $36				lda 	zTemp0 						; compare current precedence vs. operator precedence
.98aa		c5 37		cmp $37				cmp 	zTemp0+1
.98ac		b0 13		bcs $98c1			bcs		_EXPRExit 					; if current >= operator exit
.98ae		48		pha				pha 								; save current precedence.
.98af		b1 30		lda ($30),y			lda 	(codePtr),y
.98b1		c8		iny				iny
.98b2		48		pha				pha
.98b3		a5 37		lda $37				lda 	zTemp0+1 					; get operator precedence level
.98b5		e8		inx				inx 								; work out the right hand side.
.98b6		20 8f 98	jsr $988f			jsr 	EvaluateExpressionAtPrecedence
.98b9		ca		dex				dex
.98ba		68		pla				pla 								; get operator, call the code.
.98bb		20 c4 98	jsr $98c4			jsr 	_EXPRCaller
.98be		68		pla				pla 								; restore precedence level
.98bf		80 d3		bra $9894			bra 	_EXPRLoop 					; and go round.
.98c1						_EXPRExit:
.98c1		a5 36		lda $36				lda 	zTemp0 						; A = current precedence level.
.98c3		60		rts				rts
.98c4						_EXPRCaller:
.98c4		da		phx				phx 								; save on stack, first thing is to restore it
.98c5		0a		asl a				asl 	a 							; double so can use vectors into X
.98c6		aa		tax				tax
.98c7		7c f8 8f	jmp ($8ff8,x)			jmp 	(VectorSetPunc,x) 			; and go to the code.

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/addsub.asm

.98ca						FloatingPointAdd:
.98ca		20 40 9a	jsr $9a40			jsr 	FloatPrepare 				; prepare for floats
.98cd		80 09		bra $98d8			bra 	FloatAdd
.98cf						FloatingPointSub:
.98cf		20 40 9a	jsr $9a40			jsr 	FloatPrepare 				; prepare for floats
.98d2						FloatSubtract:
.98d2		b5 51		lda $51,x			lda 	NSStatus+1,x 				; negate FPB
.98d4		49 80		eor #$80			eor 	#$80
.98d6		95 51		sta $51,x			sta 	NSStatus+1,x				; and fall through.
.98d8						FloatAdd:
.98d8		48		pha				pha
.98d9		5a		phy				phy
.98da		20 4f 9a	jsr $9a4f			jsr 	NSNormalise 				; normalise S[X]
.98dd		f0 51		beq $9930			beq 	_FAReturn1
.98df		e8		inx				inx 								; normalise S[X+1]
.98e0		20 4f 9a	jsr $9a4f			jsr 	NSNormalise
.98e3		ca		dex				dex
.98e4		c9 00		cmp #$00			cmp 	#0
.98e6		f0 60		beq $9948			beq 	_FAExit 					; if so, just return A
.98e8		b5 78		lda $78,x			lda 	NSExponent,x 				; are the exponents the same ?
.98ea		d5 79		cmp $79,x			cmp 	NSExponent+1,x
.98ec		f0 18		beq $9906			beq 	_FAExponentsEqual
.98ee		b5 78		lda $78,x			lda 	NSExponent,x 				; work out the larger exponent
.98f0		a8		tay				tay
.98f1		38		sec				sec 								; do a signed comparison of the exponents.
.98f2		f5 79		sbc $79,x			sbc 	NSExponent+1,x
.98f4		50 02		bvc $98f8			bvc 	_FANoSignedChange
.98f6		49 80		eor #$80			eor 	#$80
.98f8						_FANoSignedChange:
.98f8		29 80		and #$80			and 	#$80
.98fa		10 02		bpl $98fe			bpl 	_FAHaveMax
.98fc		b4 79		ldy $79,x			ldy 	NSExponent+1,x
.98fe						_FAHaveMax:
.98fe		20 4b 99	jsr $994b			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.9901		e8		inx				inx
.9902		20 4b 99	jsr $994b			jsr 	_FAShiftToExponent
.9905		ca		dex				dex
.9906						_FAExponentsEqual:
.9906		b5 50		lda $50,x			lda 	NSStatus,x 					; are the signs the same
.9908		55 51		eor $51,x			eor 	NSStatus+1,x
.990a		30 0e		bmi $991a			bmi 	_FADifferentSigns
.990c		20 83 96	jsr $9683			jsr 	AddTopTwoStack 				; do the add of the mantissae
.990f		b5 70		lda $70,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.9911		10 35		bpl $9948			bpl 	_FAExit 					; if no, we are done.
.9913		20 fc a2	jsr $a2fc			jsr 	NSMShiftRight 				; shift A right, renormalising it.
.9916		f6 78		inc $78,x			inc 	NSExponent,x 				; bump the exponent and exit
.9918		80 2e		bra $9948			bra 	_FAExit
.991a						_FADifferentSigns:
.991a		20 9d 96	jsr $969d			jsr 	SubTopTwoStack 				; subtract mantissa B from A
.991d		b5 70		lda $70,x			lda 	NSMantissa3,x 				; is the result negative ?
.991f		10 06		bpl $9927			bpl 	_FACheckZero 				; if no, check for -0
.9921		20 a5 a2	jsr $a2a5			jsr 	NSMNegate 					; netate result
.9924		20 ac a2	jsr $a2ac			jsr 	NSMNegateMantissa 			; negate (2'c) the mantissa
.9927						_FACheckZero:
.9927		20 05 a3	jsr $a305			jsr 	NSMIsZero	 				; check for -0
.992a		d0 1c		bne $9948			bne 	_FAExit
.992c		74 50		stz $50,x			stz 	NSStatus,x
.992e		80 18		bra $9948			bra 	_FAExit
.9930						_FAReturn1:
.9930		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; called when S(X) is zero.
.9932		95 58		sta $58,x			sta 	NSMantissa0,x
.9934		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9936		95 60		sta $60,x			sta 	NSMantissa1,x
.9938		b5 69		lda $69,x			lda 	NSMantissa2+1,x
.993a		95 68		sta $68,x			sta 	NSMantissa2,x
.993c		b5 71		lda $71,x			lda 	NSMantissa3+1,x
.993e		95 70		sta $70,x			sta 	NSMantissa3,x
.9940		b5 79		lda $79,x			lda 	NSExponent+1,x
.9942		95 78		sta $78,x			sta 	NSExponent,x
.9944		b5 51		lda $51,x			lda 	NSStatus+1,x
.9946		95 50		sta $50,x			sta 	NSStatus,x
.9948						_FAExit:
.9948		7a		ply				ply
.9949		68		pla				pla
.994a		60		rts				rts
.994b						_FAShiftToExponent:
.994b						_FAShiftToExponent2:
.994b		98		tya				tya 								; compare Y to exponent
.994c		d5 78		cmp $78,x			cmp 	NSExponent,x 				; reached the exponent required ?
.994e		f0 07		beq $9957			beq 	_FASEExit 					; exit if so.
.9950		20 fc a2	jsr $a2fc			jsr 	NSMShiftRight	 			; shift the mantissa right
.9953		f6 78		inc $78,x			inc 	NSExponent,x 				; increment exponent
.9955		80 f4		bra $994b			bra 	_FAShiftToExponent2
.9957						_FASEExit:
.9957		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/compare.asm

.9958						CompareFloat:
.9958		20 d2 98	jsr $98d2			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.995b		b5 60		lda $60,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.995d		29 f8		and #$f8			and 	#$F8
.995f		15 68		ora $68,x			ora 	NSMantissa2,x
.9961		15 70		ora $70,x			ora 	NSMantissa3,x
.9963		f0 08		beq $996d			beq 	_FCExit 					; zero, so approximately identical
.9965		a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.9967		34 50		bit $50,x			bit 	NSStatus,x
.9969		10 02		bpl $996d			bpl 	_FCExit
.996b						_FCNegative:
.996b		a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.996d						_FCExit:
.996d		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/divide.asm

.996e						FDivideCommand:
.996e		fa		plx				plx	 								; restore stack position
.996f		20 40 9a	jsr $9a40			jsr 	FloatPrepare 				; prepare for floats
.9972						FloatDivide:
.9972		48		pha				pha
.9973		e8		inx				inx
.9974		20 4f 9a	jsr $9a4f			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.9977		ca		dex				dex
.9978		c9 00		cmp #$00			cmp 	#0
.997a		f0 1d		beq $9999			beq 	_FDZero
.997c		20 4f 9a	jsr $9a4f			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.997f		f0 16		beq $9997			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.9981		20 74 95	jsr $9574			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.9984		20 10 95	jsr $9510			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.9987		20 4f 9a	jsr $9a4f			jsr		NSNormalise 				; renormalise
.998a		20 04 96	jsr $9604			jsr 	CalculateSign 				; calculate result sign
.998d		b5 78		lda $78,x			lda 	NSExponent,x 				; calculate exponent
.998f		38		sec				sec
.9990		f5 79		sbc $79,x			sbc 	NSExponent+1,x
.9992		38		sec				sec
.9993		e9 1e		sbc #$1e			sbc 	#30
.9995		95 78		sta $78,x			sta 	NSExponent,x
.9997						_FDExit:
.9997		68		pla				pla
.9998		60		rts				rts
.9999						_FDZero:
.9999		a9 03		lda #$03		lda	#3
.999b		4c 83 93	jmp $9383		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/fractional.asm

.999e						FloatFractionalPart:
.999e		5a		phy				phy
.999f		b5 50		lda $50,x			lda 	NSStatus,x 					; take absolute value
.99a1		29 7f		and #$7f			and 	#$7F
.99a3		95 50		sta $50,x			sta 	NSStatus,x
.99a5		20 4f 9a	jsr $9a4f			jsr 	NSNormalise
.99a8		b5 78		lda $78,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.99aa		38		sec				sec
.99ab		e9 e0		sbc #$e0			sbc 	#$E0
.99ad		90 29		bcc $99d8			bcc 	_FFPExit 					; already fractional
.99af		c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.99b1		b0 22		bcs $99d5			bcs 	_FFPZero
.99b3		a8		tay				tay 								; put count to do in Y
.99b4		b5 70		lda $70,x			lda 	NSMantissa3,x 				; do each in turn.
.99b6		20 da 99	jsr $99da			jsr 	_FFPPartial
.99b9		95 70		sta $70,x			sta 	NSMantissa3,x
.99bb		b5 68		lda $68,x			lda 	NSMantissa2,x
.99bd		20 da 99	jsr $99da			jsr 	_FFPPartial
.99c0		95 68		sta $68,x			sta 	NSMantissa2,x
.99c2		b5 60		lda $60,x			lda 	NSMantissa1,x
.99c4		20 da 99	jsr $99da			jsr 	_FFPPartial
.99c7		95 60		sta $60,x			sta 	NSMantissa1,x
.99c9		b5 58		lda $58,x			lda 	NSMantissa0,x
.99cb		20 da 99	jsr $99da			jsr 	_FFPPartial
.99ce		95 58		sta $58,x			sta 	NSMantissa0,x
.99d0		20 05 a3	jsr $a305			jsr 	NSMIsZero 					; zeroed check.
.99d3		d0 03		bne $99d8			bne 	_FFPExit
.99d5						_FFPZero:
.99d5		20 e3 a2	jsr $a2e3			jsr 	NSMSetZero
.99d8						_FFPExit:
.99d8		7a		ply				ply
.99d9		60		rts				rts
.99da						_FFPPartial:
.99da		c0 00		cpy #$00			cpy 	#0 							; no more to do
.99dc		f0 17		beq $99f5			beq 	_FFFPPExit
.99de		c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.99e0		b0 0c		bcs $99ee			bcs 	_FFFPPWholeByte
.99e2		5a		phy				phy
.99e3						_FFFPPLeft:
.99e3		0a		asl a				asl 	a
.99e4		88		dey				dey
.99e5		d0 fc		bne $99e3			bne 	_FFFPPLeft
.99e7		7a		ply				ply
.99e8						_FFFPPRight:
.99e8		4a		lsr a				lsr 	a
.99e9		88		dey				dey
.99ea		d0 fc		bne $99e8			bne 	_FFFPPRight
.99ec		80 07		bra $99f5			bra 	_FFFPPExit
.99ee						_FFFPPWholeByte:
.99ee		98		tya				tya 								; subtract 8 from count
.99ef		38		sec				sec
.99f0		e9 08		sbc #$08			sbc 	#8
.99f2		a8		tay				tay
.99f3		a9 00		lda #$00			lda 	#0 							; and clear all
.99f5						_FFFPPExit:
.99f5		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/integer.asm

.99f6						FloatIntegerPart:
.99f6		48		pha				pha
.99f7		b5 78		lda $78,x			lda 	NSExponent,x 				; is it integer already ?
.99f9		f0 1d		beq $9a18			beq 	_FIPExit 					; if so do nothing
.99fb		20 05 a3	jsr $a305			jsr 	NSMIsZero 					; is it zero ?
.99fe		f0 15		beq $9a15			beq 	_FIPZero 					; if so return zero.
.9a00		20 4f 9a	jsr $9a4f			jsr 	NSNormalise 				; normalise
.9a03		f0 10		beq $9a15			beq 	_FIPZero 					; normalised to zero, exit zero
.9a05						_FIPShift:
.9a05		b5 78		lda $78,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.9a07		10 07		bpl $9a10			bpl 	_FIPCheckZero
.9a09		20 fc a2	jsr $a2fc			jsr 	NSMShiftRight 				; shift mantissa right
.9a0c		f6 78		inc $78,x			inc 	NSExponent,x 				; bump exponent
.9a0e		80 f5		bra $9a05			bra 	_FIPShift
.9a10						_FIPCheckZero:
.9a10		20 05 a3	jsr $a305			jsr 	NSMIsZero 					; avoid -0 problem
.9a13		d0 03		bne $9a18			bne 	_FIPExit 					; set to zero if mantissa zero.
.9a15						_FIPZero:
.9a15		20 e3 a2	jsr $a2e3			jsr 	NSMSetZero
.9a18						_FIPExit:
.9a18		68		pla				pla
.9a19		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/multiply.asm

.9a1a						FloatingPointMultiply:
.9a1a		20 40 9a	jsr $9a40			jsr 	FloatPrepare 				; prepare for floats
.9a1d						FloatMultiply:
.9a1d		48		pha				pha
.9a1e		20 4f 9a	jsr $9a4f			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.9a21		f0 18		beq $9a3b			beq 	_FDExit 					; return zero if zero (e.g. zero*something)
.9a23		e8		inx				inx
.9a24		20 4f 9a	jsr $9a4f			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.9a27		ca		dex				dex
.9a28		c9 00		cmp #$00			cmp 	#0
.9a2a		f0 0c		beq $9a38			beq 	_FDSetZero
.9a2c		20 c6 95	jsr $95c6			jsr 	MultiplyShort 				; calculate the result.
.9a2f		75 78		adc $78,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.9a31		18		clc				clc
.9a32		75 79		adc $79,x			adc 	NSExponent+1,x
.9a34		95 78		sta $78,x			sta 	NSExponent,x
.9a36		80 03		bra $9a3b			bra 	_FDExit
.9a38						_FDSetZero:
.9a38		20 e3 a2	jsr $a2e3			jsr 	NSMSetZero 					; return 0
.9a3b						_FDExit:
.9a3b		20 4f 9a	jsr $9a4f			jsr 	NSNormalise 				; normalise the result
.9a3e		68		pla				pla
.9a3f		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/utility.asm

.9a40						FloatPrepare:
.9a40		20 4b 9b	jsr $9b4b			jsr 	DereferenceTopTwo 			; dereference the top two values
.9a43		b5 50		lda $50,x			lda 	NSStatus,x 					; check ints/floats, either will do.
.9a45		15 51		ora $51,x			ora 	NSStatus+1,x
.9a47		29 10		and #$10			and 	#NSBIsString
.9a49		d0 01		bne $9a4c			bne 	_FDType
.9a4b		60		rts				rts
.9a4c						_FDType:
.9a4c		4c 65 a4	jmp $a465			jmp 	TypeError
.9a4f						NSNormalise:
.9a4f		b5 50		lda $50,x			lda 	NSStatus,x 					; make float, keep sign
.9a51		29 80		and #$80			and 	#$80
.9a53		09 08		ora #$08			ora 	#NSTFloat
.9a55		95 50		sta $50,x			sta 	NSStatus,x
.9a57		20 05 a3	jsr $a305			jsr 	NSMIsZero 					; if zero exit
.9a5a		d0 07		bne $9a63			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.9a5c		16 50		asl $50,x			asl 	NSStatus,x 					; clear the sign bit.
.9a5e		76 50		ror $50,x			ror 	NSStatus,x 					; (no -0)
.9a60		a9 00		lda #$00			lda 	#0 							; set Z flag
.9a62		60		rts				rts
.9a63						_NSNormaliseOptimise:
.9a63		b5 70		lda $70,x			lda 	NSMantissa3,x 				; upper byte zero ?
.9a65		d0 19		bne $9a80			bne 	_NSNormaliseLoop
.9a67		b5 68		lda $68,x			lda 	NSMantissa2,x 				; byte normalise
.9a69		30 15		bmi $9a80			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.9a6b		95 70		sta $70,x			sta 	NSMantissa3,x
.9a6d		b5 60		lda $60,x			lda 	NSMantissa1,x
.9a6f		95 68		sta $68,x			sta 	NSMantissa2,x
.9a71		b5 58		lda $58,x			lda 	NSMantissa0,x
.9a73		95 60		sta $60,x			sta 	NSMantissa1,x
.9a75		74 58		stz $58,x			stz 	NSMantissa0,x
.9a77		b5 78		lda $78,x			lda 	NSExponent,x
.9a79		38		sec				sec
.9a7a		e9 08		sbc #$08			sbc 	#8
.9a7c		95 78		sta $78,x			sta 	NSExponent,x
.9a7e		80 e3		bra $9a63			bra 	_NSNormaliseOptimise
.9a80						_NSNormaliseLoop:
.9a80		34 70		bit $70,x			bit 	NSMantissa3,x 				; bit 30 set ?
.9a82		70 07		bvs $9a8b			bvs 	_NSNExit 					; exit if so with Z flag clear
.9a84		20 f2 a2	jsr $a2f2			jsr 	NSMShiftLeft 				; shift mantissa left
.9a87		d6 78		dec $78,x			dec 	NSExponent,x 				; adjust exponent
.9a89		80 f5		bra $9a80			bra 	_NSNormaliseLoop
.9a8b						_NSNExit:
.9a8b		a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.9a8d		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignnumber.asm

.9a8e						AssignNumber:
.9a8e		5a		phy				phy
.9a8f		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy mantissa0/1 to zTemp0
.9a91		85 36		sta $36				sta 	zTemp0
.9a93		b5 60		lda $60,x			lda 	NSMantissa1,x
.9a95		85 37		sta $37				sta 	zTemp0+1
.9a97		b5 50		lda $50,x			lda 	NSStatus,x 					; clear reference bits
.9a99		29 df		and #$df			and 	#(NSBIsReference ^ $FF)
.9a9b		95 50		sta $50,x			sta 	NSStatus,x
.9a9d		29 18		and #$18			and 	#NSBTypeMask				; assigning to a float ?
.9a9f		c9 08		cmp #$08			cmp 	#NSTFloat
.9aa1		f0 24		beq $9ac7			beq 	_ANFloat
.9aa3		b5 79		lda $79,x			lda		NSExponent+1,x 				; is it a float
.9aa5		f0 03		beq $9aaa			beq		_ANNotFloat
.9aa7		4c 60 a4	jmp $a460			jmp 	RangeError					; if it is, report an error.
.9aaa						_ANNotFloat:
.9aaa		b5 50		lda $50,x			lda 	NSStatus,x 					; check if byte/word reference.
.9aac		29 03		and #$03			and 	#3
.9aae		d0 05		bne $9ab5			bne 	_ANByteWord
.9ab0		20 d2 9a	jsr $9ad2			jsr 	_ANCopy4PackSign 			; copy all 4 bytes and sign
.9ab3		80 1b		bra $9ad0			bra 	_ANExit
.9ab5						_ANByteWord:
.9ab5		48		pha				pha 								; save count
.9ab6		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; do byte
.9ab8		92 36		sta ($36)			sta 	(zTemp0)
.9aba		68		pla				pla
.9abb		c9 01		cmp #$01			cmp	 	#1
.9abd		f0 11		beq $9ad0			beq 	_ANExit
.9abf		b5 61		lda $61,x			lda 	NSMantissa1+1,x 			; do word
.9ac1		a0 01		ldy #$01			ldy 	#1
.9ac3		91 36		sta ($36),y			sta 	(zTemp0),y
.9ac5		80 09		bra $9ad0			bra 	_ANExit
.9ac7						_ANFloat:
.9ac7		20 d2 9a	jsr $9ad2			jsr 	_ANCopy4PackSign 			; write all 4 bytes and packed sign
.9aca		b5 79		lda $79,x			lda 	NSExponent+1,x 				; copy exponent to slot 4
.9acc		a0 04		ldy #$04			ldy 	#4
.9ace		91 36		sta ($36),y			sta 	(zTemp0),y
.9ad0						_ANExit:
.9ad0		7a		ply				ply
.9ad1		60		rts				rts
.9ad2						_ANCopy4PackSign:
.9ad2		a0 03		ldy #$03			ldy 	#3
.9ad4		b5 51		lda $51,x			lda 	NSStatus+1,x 				; sign bit into status
.9ad6		29 80		and #$80			and 	#$80 						; put into high bit of mantissa 3
.9ad8		15 71		ora $71,x			ora 	NSMantissa3+1,x
.9ada		91 36		sta ($36),y			sta 	(zTemp0),y
.9adc		88		dey				dey
.9add		b5 69		lda $69,x			lda 	NSMantissa2+1,x
.9adf		91 36		sta ($36),y			sta 	(zTemp0),y
.9ae1		88		dey				dey
.9ae2		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9ae4		91 36		sta ($36),y			sta 	(zTemp0),y
.9ae6		88		dey				dey
.9ae7		b5 59		lda $59,x			lda 	NSMantissa0+1,x
.9ae9		91 36		sta ($36),y			sta 	(zTemp0),y
.9aeb		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignstring.asm

.9aec						AssignString:
.9aec		5a		phy				phy
.9aed		b5 59		lda $59,x			lda 	NSMantissa0+1,x
.9aef		85 38		sta $38				sta 	zTemp1
.9af1		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9af3		85 39		sta $39				sta 	zTemp1+1
.9af5		b5 58		lda $58,x			lda 	NSMantissa0,x
.9af7		85 36		sta $36				sta 	zTemp0
.9af9		b5 60		lda $60,x			lda 	NSMantissa1,x
.9afb		85 37		sta $37				sta 	zTemp0+1
.9afd		a0 01		ldy #$01			ldy 	#1 							; the high byte of the target address
.9aff		b1 36		lda ($36),y			lda 	(zTemp0),y
.9b01		f0 23		beq $9b26			beq 	_ASNewStringRequired 		; if zero, a new string is required.
.9b03		38		sec				sec 								; put Address-2 in zsTemp - this is the size/status/string record
.9b04		b2 36		lda ($36)			lda 	(zTemp0) 					; of concreted strings
.9b06		e9 02		sbc #$02			sbc 	#2
.9b08		85 3c		sta $3c				sta 	zsTemp
.9b0a		a0 01		ldy #$01			ldy 	#1
.9b0c		b1 36		lda ($36),y			lda 	(zTemp0),y
.9b0e		e9 00		sbc #$00			sbc 	#0
.9b10		85 3d		sta $3d				sta 	zsTemp+1
.9b12		a0 ff		ldy #$ff			ldy 	#$FF 						; get length of new string
.9b14						_ASGetLength:
.9b14		c8		iny				iny
.9b15		b1 38		lda ($38),y			lda 	(zTemp1),y
.9b17		d0 fb		bne $9b14			bne 	_ASGetLength
.9b19		98		tya				tya 								; is this length <= current length
.9b1a		d2 3c		cmp ($3c)			cmp 	(zsTemp)
.9b1c		90 1e		bcc $9b3c			bcc 	_ASCopyString
.9b1e		f0 1c		beq $9b3c			beq 	_ASCopyString
.9b20		a9 80		lda #$80			lda 	#$80 						; mark as unused.
.9b22		a0 01		ldy #$01			ldy 	#1
.9b24		91 3c		sta ($3c),y			sta 	(zsTemp),y
.9b26						_ASNewStringRequired:
.9b26		e8		inx				inx 								; concrete the new string.
.9b27		20 7a b3	jsr $b37a			jsr 	StringConcrete				; (breaks zTemp1/2, not zTemp0 and zsTemp)
.9b2a		ca		dex				dex
.9b2b		18		clc				clc
.9b2c		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; copy that new address to the reference.
.9b2e		69 02		adc #$02			adc 	#2 							; add two to point at the data.
.9b30		92 36		sta ($36)			sta 	(zTemp0)
.9b32		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9b34		69 00		adc #$00			adc 	#0
.9b36		a0 01		ldy #$01			ldy 	#1
.9b38		91 36		sta ($36),y			sta 	(zTemp0),y
.9b3a		80 0d		bra $9b49			bra 	_ASExit
.9b3c						_ASCopyString:
.9b3c		a0 00		ldy #$00			ldy 	#0
.9b3e						_ASCopyLoop:
.9b3e		b1 38		lda ($38),y			lda 	(zTemp1),y
.9b40		c8		iny				iny
.9b41		c8		iny				iny
.9b42		91 3c		sta ($3c),y			sta 	(zsTemp),y
.9b44		88		dey				dey
.9b45		c9 00		cmp #$00			cmp 	#0
.9b47		d0 f5		bne $9b3e			bne 	_ASCopyLoop
.9b49						_ASExit:
.9b49		7a		ply				ply
.9b4a		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/dereference.asm

.9b4b						DereferenceTopTwo:
.9b4b		e8		inx				inx
.9b4c		20 50 9b	jsr $9b50			jsr 	Dereference 				; deref x+1
.9b4f		ca		dex				dex  								; falls through to deref x
.9b50						Dereference:
.9b50		b5 50		lda $50,x			lda 	NSStatus,x 					; get the status byte
.9b52		29 20		and #$20			and 	#NSBIsReference 			; is it a reference
.9b54		f0 48		beq $9b9e			beq 	_DRFExit 					; not a reference, so exit.
.9b56		5a		phy				phy
.9b57		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy address to dereference into zTemp0
.9b59		85 36		sta $36				sta 	zTemp0
.9b5b		b5 60		lda $60,x			lda 	NSMantissa1,x
.9b5d		85 37		sta $37				sta 	zTemp0+1
.9b5f		74 60		stz $60,x			stz 	NSMantissa1,x 				; clear second byte.
.9b61		b2 36		lda ($36)			lda 	(zTemp0) 					; do the first byte
.9b63		95 58		sta $58,x			sta 	NSMantissa0,x
.9b65		b5 50		lda $50,x			lda 	NSStatus,x 					; get status byte.
.9b67		29 18		and #$18			and 	#NSBTypeMask 				; what type is it ?
.9b69		c9 10		cmp #$10			cmp 	#NSTString 					; if string, dereference two
.9b6b		f0 0e		beq $9b7b			beq 	_DRFDereferenceTwo
.9b6d		c9 08		cmp #$08			cmp 	#NSTFloat 					; if float, do full dereference.
.9b6f		f0 2f		beq $9ba0			beq 	_DRFFull
.9b71		b5 50		lda $50,x			lda 	NSStatus,x 					; must be integer - how many bytes ?
.9b73		29 03		and #$03			and 	#3
.9b75		f0 29		beq $9ba0			beq 	_DRFFull 					; the whole word
.9b77		c9 01		cmp #$01			cmp 	#1 							; is it 10 (e.g. 2 bytes)
.9b79		f0 06		beq $9b81			beq		_DRFClear23 				; no, one byte, clear 2 & 3 and exit
.9b7b						_DRFDereferenceTwo:
.9b7b		a0 01		ldy #$01			ldy 	#1
.9b7d		b1 36		lda ($36),y			lda 	(zTemp0),y
.9b7f		95 60		sta $60,x			sta 	NSMantissa1,x
.9b81						_DRFClear23:
.9b81		74 68		stz $68,x			stz 	NSMantissa2,x 				; clear upper bytes, only read 1 or 2 bytes
.9b83		74 70		stz $70,x			stz 	NSMantissa3,x
.9b85		b5 50		lda $50,x			lda 	NSStatus,x 					; make it a value of that type.
.9b87		29 18		and #$18			and 	#NSBTypeMask
.9b89		95 50		sta $50,x			sta 	NSStatus,x 					; and fall through.
.9b8b		c9 10		cmp #$10			cmp 	#NSTString  				; is it a string
.9b8d		d0 0e		bne $9b9d			bne 	_DRFNotString
.9b8f		b5 58		lda $58,x			lda 	NSMantissa0,x 				; check address is zero
.9b91		15 60		ora $60,x			ora 	NSMantissa1,x
.9b93		d0 08		bne $9b9d			bne 	_DRFNotString
.9b95		a9 9f		lda #$9f			lda 	#_DRFNullString & $FF 		; if so, return reference to ""
.9b97		95 58		sta $58,x			sta 	NSMantissa0,x
.9b99		a9 9b		lda #$9b			lda 	#_DRFNullString >> 8
.9b9b		95 60		sta $60,x			sta 	NSMantissa1,x
.9b9d						_DRFNotString
.9b9d		7a		ply				ply 								; restore Y and exit
.9b9e						_DRFExit:
.9b9e		60		rts				rts
.9b9f						_DRFNullString:
>9b9f		00						.byte 	0
.9ba0						_DRFFull:
.9ba0		a0 01		ldy #$01			ldy 	#1 							; get remaining 3 bytes.
.9ba2		b1 36		lda ($36),y			lda 	(zTemp0),y
.9ba4		95 60		sta $60,x			sta 	NSMantissa1,x
.9ba6		c8		iny				iny
.9ba7		b1 36		lda ($36),y			lda 	(zTemp0),y
.9ba9		95 68		sta $68,x			sta 	NSMantissa2,x
.9bab		c8		iny				iny
.9bac		b1 36		lda ($36),y			lda 	(zTemp0),y
.9bae		95 70		sta $70,x			sta 	NSMantissa3,x
.9bb0		74 78		stz $78,x			stz 	NSExponent,x 				; clear exponent.
.9bb2		b5 50		lda $50,x			lda		NSStatus,x 					; see if type is integer
.9bb4		29 18		and #$18			and 	#NSBTypeMask  				; type information only
.9bb6		95 50		sta $50,x			sta 	NSStatus,x 					; update it back.
.9bb8		f0 05		beq $9bbf			beq 	_DRFNoExponent
.9bba		c8		iny				iny 								; if not, read the exponent as well.
.9bbb		b1 36		lda ($36),y			lda 	(zTemp0),y
.9bbd		95 78		sta $78,x			sta 	NSExponent,x
.9bbf						_DRFNoExponent:
.9bbf		b5 70		lda $70,x			lda 	NSMantissa3,x 				; is the most significant bit set ?
.9bc1		10 0a		bpl $9bcd			bpl 	_DRFExit2 					; if not, then exit.
.9bc3		29 7f		and #$7f			and 	#$7F 						; clear that bit.
.9bc5		95 70		sta $70,x			sta 	NSMantissa3,x
.9bc7		b5 50		lda $50,x			lda 	NSStatus,x 					; set the sign flag
.9bc9		09 80		ora #$80			ora 	#NSBIsNegative
.9bcb		95 50		sta $50,x			sta 	NSStatus,x
.9bcd						_DRFExit2:
.9bcd		7a		ply				ply
.9bce		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/number.asm

=1						ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2						ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3						ESTA_Decimal = 3 							; fractional part.
.9bcf						EncodeNumberStart:
.9bcf		38		sec				sec
.9bd0		80 01		bra $9bd3			bra 	EncodeNumberContinue+1
.9bd2						EncodeNumberContinue:
.9bd2		18		clc				clc
.9bd3						EncodeNumber:
.9bd3		08		php				php 								; save reset flag.
.9bd4		c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.9bd6		f0 12		beq $9bea			beq 	_ENIsOkay
.9bd8		c9 30		cmp #$30			cmp 	#"0"
.9bda		90 04		bcc $9be0			bcc 	_ENBadNumber
.9bdc		c9 3a		cmp #$3a			cmp 	#"9"+1
.9bde		90 0a		bcc $9bea			bcc 	_ENIsOkay
.9be0						_ENBadNumber:
.9be0		28		plp				plp 								; throw saved reset
.9be1		ad 05 04	lda $0405			lda 	encodeState 				; if in decimal mode, construct final number
.9be4		c9 03		cmp #$03			cmp 	#ESTA_Decimal
.9be6		f0 7b		beq $9c63			beq 	_ENConstructFinal
.9be8						_ENFail:
.9be8		18		clc				clc 								; not allowed
.9be9		60		rts				rts
.9bea						_ENIsOkay:
.9bea		28		plp				plp 								; are we restarting
.9beb		90 15		bcc $9c02			bcc 	_ENNoRestart
.9bed						_ENStartEncode:
.9bed		c9 2e		cmp #$2e			cmp 	#'.'						; first is decimal place, go straight to that.
.9bef		f0 0c		beq $9bfd			beq 	_ENFirstDP
.9bf1		29 0f		and #$0f			and 	#15 						; put digit in mantissa, initially a single digit constant
.9bf3		20 e5 a2	jsr $a2e5			jsr 	NSMSetByte 					; in single byte mode.
.9bf6		a9 01		lda #$01			lda 	#ESTA_Low
.9bf8						_ENExitChange:
.9bf8		8d 05 04	sta $0405			sta 	encodeState 				; save new state
.9bfb		38		sec				sec
.9bfc		60		rts				rts
.9bfd						_ENFirstDP:
.9bfd		20 e3 a2	jsr $a2e3			jsr 	NSMSetZero 					; clear integer part
.9c00		80 3c		bra $9c3e			bra 	_ESTASwitchFloat			; go straight to float and exi
.9c02						_ENNoRestart:
.9c02		48		pha				pha 								; save digit or DP on stack.
.9c03		ad 05 04	lda $0405			lda 	encodeState 				; get current state
.9c06		c9 01		cmp #$01			cmp 	#ESTA_Low
.9c08		f0 09		beq $9c13			beq  	_ESTALowState
.9c0a		c9 02		cmp #$02			cmp 	#ESTA_High
.9c0c		f0 26		beq $9c34			beq 	_ESTAHighState
.9c0e		c9 03		cmp #$03			cmp 	#ESTA_Decimal
.9c10		f0 38		beq $9c4a			beq 	_ESTADecimalState
>9c12		db						.byte 	$DB 						; causes a break in the emulator
.9c13						_ESTALowState:
.9c13		68		pla				pla 								; get value back
.9c14		c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.9c16		f0 26		beq $9c3e			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.9c18		29 0f		and #$0f			and 	#15 						; make digit
.9c1a		8d 06 04	sta $0406			sta 	digitTemp 					; save it.
.9c1d		b5 58		lda $58,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.9c1f		0a		asl a				asl 	a
.9c20		0a		asl a				asl 	a
.9c21		75 58		adc $58,x			adc 	NSMantissa0,x
.9c23		0a		asl a				asl 	a
.9c24		6d 06 04	adc $0406			adc 	digitTemp
.9c27		95 58		sta $58,x			sta 	NSMantissa0,x
.9c29		c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.9c2b		90 05		bcc $9c32			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.9c2d		a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.9c2f		8d 05 04	sta $0405			sta 	encodeState
.9c32						_ESTANoSwitch:
.9c32		38		sec				sec
.9c33		60		rts				rts
.9c34						_ESTAHighState:
.9c34		68		pla				pla 								; get value back
.9c35		c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.9c37		f0 05		beq $9c3e			beq 	_ESTASwitchFloat
.9c39		20 97 9c	jsr $9c97			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.9c3c		38		sec				sec
.9c3d		60		rts				rts
.9c3e						_ESTASwitchFloat:
.9c3e		9c 07 04	stz $0407			stz 	decimalCount 				; reset the count of digits - we divide by 10^n at the end.
.9c41		e8		inx				inx 								; zero the decimal additive.
.9c42		20 e3 a2	jsr $a2e3			jsr 	NSMSetZero
.9c45		ca		dex				dex
.9c46		a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.9c48		80 ae		bra $9bf8			bra 	_ENExitChange
.9c4a						_ESTADecimalState:
.9c4a		68		pla				pla 								; digit.
.9c4b		c9 2e		cmp #$2e			cmp 	#"." 						; fail on 2nd decimal point.
.9c4d		f0 99		beq $9be8			beq 	_ENFail
.9c4f		e8		inx				inx 								; put digit into fractional part of X+1
.9c50		20 97 9c	jsr $9c97			jsr 	ESTAShiftDigitIntoMantissa
.9c53		ca		dex				dex
.9c54		ee 07 04	inc $0407			inc 	decimalCount 				; bump the count of decimals
.9c57		ad 07 04	lda $0407			lda 	decimalCount 				; too many decimal digits.
.9c5a		c9 0b		cmp #$0b			cmp 	#11
.9c5c		f0 02		beq $9c60			beq 	_ESTADSFail
.9c5e		38		sec				sec
.9c5f		60		rts				rts
.9c60						_ESTADSFail:
.9c60		4c 60 a4	jmp $a460			jmp 	RangeError
.9c63						_ENConstructFinal:
.9c63		ad 07 04	lda $0407			lda 	decimalCount 				; get decimal count
.9c66		f0 2d		beq $9c95			beq 	_ENCFExit 					; no decimals
.9c68		5a		phy				phy
.9c69		0a		asl a				asl 	a 							; x 4 and CLC
.9c6a		0a		asl a				asl 	a
.9c6b		6d 07 04	adc $0407			adc 	decimalCount
.9c6e		a8		tay				tay
.9c6f		b9 1f a4	lda $a41f,y			lda 	DecimalScalarTable-5,y 		; copy decimal scalar to X+2
.9c72		95 5a		sta $5a,x			sta 	NSMantissa0+2,x  			; this is 10^-n
.9c74		b9 20 a4	lda $a420,y			lda 	DecimalScalarTable-5+1,y
.9c77		95 62		sta $62,x			sta 	NSMantissa1+2,x
.9c79		b9 21 a4	lda $a421,y			lda 	DecimalScalarTable-5+2,y
.9c7c		95 6a		sta $6a,x			sta 	NSMantissa2+2,x
.9c7e		b9 22 a4	lda $a422,y			lda 	DecimalScalarTable-5+3,y
.9c81		95 72		sta $72,x			sta 	NSMantissa3+2,x
.9c83		b9 23 a4	lda $a423,y			lda 	DecimalScalarTable-5+4,y
.9c86		95 7a		sta $7a,x			sta 	NSExponent+2,x
.9c88		a9 08		lda #$08			lda 	#NSTFloat
.9c8a		95 52		sta $52,x			sta 	NSStatus+2,x
.9c8c		7a		ply				ply
.9c8d		e8		inx				inx 								; multiply decimal const by decimal scalar
.9c8e		20 1d 9a	jsr $9a1d			jsr 	FloatMultiply
.9c91		ca		dex				dex
.9c92		20 d8 98	jsr $98d8			jsr 	FloatAdd 					; add to integer part.
.9c95						_ENCFExit:
.9c95		18		clc				clc 								; reject the digit.
.9c96		60		rts				rts
.9c97						ESTAShiftDigitIntoMantissa:
.9c97		29 0f		and #$0f			and 	#15 						; save digit
.9c99		48		pha				pha
.9c9a		b5 70		lda $70,x			lda 	NSMantissa3,x 				; push mantissa on stack
.9c9c		48		pha				pha
.9c9d		b5 68		lda $68,x			lda 	NSMantissa2,x
.9c9f		48		pha				pha
.9ca0		b5 60		lda $60,x			lda 	NSMantissa1,x
.9ca2		48		pha				pha
.9ca3		b5 58		lda $58,x			lda 	NSMantissa0,x
.9ca5		48		pha				pha
.9ca6		20 f2 a2	jsr $a2f2			jsr 	NSMShiftLeft 				; x 2
.9ca9		20 f2 a2	jsr $a2f2			jsr 	NSMShiftLeft 				; x 4
.9cac		18		clc				clc 								; pop mantissa and add
.9cad		68		pla				pla
.9cae		75 58		adc $58,x			adc 	NSMantissa0,x
.9cb0		95 58		sta $58,x			sta 	NSMantissa0,x
.9cb2		68		pla				pla
.9cb3		75 60		adc $60,x			adc 	NSMantissa1,x
.9cb5		95 60		sta $60,x			sta 	NSMantissa1,x
.9cb7		68		pla				pla
.9cb8		75 68		adc $68,x			adc 	NSMantissa2,x
.9cba		95 68		sta $68,x			sta 	NSMantissa2,x
.9cbc		68		pla				pla
.9cbd		75 70		adc $70,x			adc 	NSMantissa3,x
.9cbf		95 70		sta $70,x			sta 	NSMantissa3,x 				; x 5
.9cc1		20 f2 a2	jsr $a2f2			jsr 	NSMShiftLeft 				; x 10
.9cc4		68		pla				pla 								; add digit
.9cc5		18		clc				clc
.9cc6		75 58		adc $58,x			adc 	NSMantissa0,x
.9cc8		95 58		sta $58,x			sta 	NSMantissa0,x
.9cca		90 0a		bcc $9cd6			bcc 	_ESTASDExit
.9ccc		f6 60		inc $60,x			inc 	NSMantissa1,x
.9cce		d0 06		bne $9cd6			bne 	_ESTASDExit
.9cd0		f6 68		inc $68,x			inc 	NSMantissa2,x
.9cd2		d0 02		bne $9cd6			bne 	_ESTASDExit
.9cd4		f6 70		inc $70,x			inc 	NSMantissa3,x
.9cd6						_ESTASDExit:
.9cd6		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/term.asm

.9cd7						EvaluateTerm:
.9cd7		b1 30		lda ($30),y			lda 	(codePtr),y
.9cd9		30 18		bmi $9cf3			bmi 	_ETCheckUnary 				; unary function ? (text ones)
.9cdb		c9 40		cmp #$40			cmp 	#$40 						; 40-7F => identifier reference
.9cdd		b0 6c		bcs $9d4b			bcs 	_ETVariable
.9cdf		c9 30		cmp #$30			cmp 	#'0' 						; is it a number
.9ce1		90 6b		bcc $9d4e			bcc 	_ETPuncUnary 				; if not it might be a punctuation unary.
.9ce3		c9 3a		cmp #$3a			cmp 	#'9'+1
.9ce5		b0 67		bcs $9d4e			bcs 	_ETPuncUnary
.9ce7		20 cf 9b	jsr $9bcf			jsr 	EncodeNumberStart 			; can't fail as it's 0-9 !
.9cea						_ETNumber:
.9cea		c8		iny				iny 								; keep encoding until we have the numbers
.9ceb		b1 30		lda ($30),y			lda 	(codePtr),y
.9ced		20 d2 9b	jsr $9bd2			jsr 	EncodeNumberContinue
.9cf0		b0 f8		bcs $9cea			bcs 	_ETNumber 					; go back if accepted.
.9cf2		60		rts				rts
.9cf3						_ETCheckUnary:
.9cf3		c9 ff		cmp #$ff			cmp 	#KWC_STRING 				; string token
.9cf5		f0 3f		beq $9d36			beq 	_ETString
.9cf7		c9 fe		cmp #$fe			cmp 	#KWC_HEXCONST 				; hex constant.
.9cf9		f0 12		beq $9d0d			beq 	_ETHexConstant
.9cfb		c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; check it actually is a unary function
.9cfd		90 0b		bcc $9d0a			bcc 	_ETSyntaxError
.9cff		c9 ad		cmp #$ad			cmp 	#KWC_LAST_UNARY+1
.9d01		b0 07		bcs $9d0a			bcs 	_ETSyntaxError
.9d03		da		phx				phx 								; push X on the stack
.9d04		0a		asl a				asl 	a 							; put vector x 2 into X
.9d05		aa		tax				tax
.9d06		c8		iny				iny 								; consume unary function token
.9d07		7c 78 90	jmp ($9078,x)			jmp 	(VectorSet0,x) 				; and do it.
.9d0a						_ETSyntaxError:
.9d0a		4c 5b a4	jmp $a45b			jmp 	SyntaxError
.9d0d						_ETHexConstant:
.9d0d		c8		iny				iny 								; skip #
.9d0e		c8		iny				iny 								; skip count
.9d0f		20 e3 a2	jsr $a2e3			jsr 	NSMSetZero 					; clear result
.9d12						_ETHLoop:
.9d12		b1 30		lda ($30),y			lda 	(codePtr),y
.9d14		c8		iny				iny 								; and consume
.9d15		c9 00		cmp #$00			cmp 	#0 							; exit if zero
.9d17		f0 1c		beq $9d35			beq 	_ETHExit
.9d19		48		pha				pha 								; save on stack.
.9d1a		20 f2 a2	jsr $a2f2			jsr 	NSMShiftLeft 				; x 2
.9d1d		20 f2 a2	jsr $a2f2			jsr 	NSMShiftLeft 				; x 4
.9d20		20 f2 a2	jsr $a2f2			jsr 	NSMShiftLeft 				; x 8
.9d23		20 f2 a2	jsr $a2f2			jsr 	NSMShiftLeft 				; x 16
.9d26		68		pla				pla 								; ASCII
.9d27		c9 41		cmp #$41			cmp 	#'A'
.9d29		90 02		bcc $9d2d			bcc 	_ETHNotChar
.9d2b		e9 07		sbc #$07			sbc 	#7
.9d2d						_ETHNotChar:
.9d2d		29 0f		and #$0f			and 	#15 						; digit now
.9d2f		15 58		ora $58,x			ora 	NSMantissa0,x 				; put in LS Nibble
.9d31		95 58		sta $58,x			sta 	NSMantissa0,x
.9d33		80 dd		bra $9d12			bra 	_ETHLoop 					; go round.
.9d35						_ETHExit:
.9d35		60		rts				rts
.9d36						_ETString:
.9d36		c8		iny				iny 								; look at length
.9d37		b1 30		lda ($30),y			lda 	(codePtr),y
.9d39		48		pha				pha
.9d3a		c8		iny				iny 								; first character
.9d3b		20 e2 a6	jsr $a6e2			jsr 	MemoryInline 				; put address of string at (code-Ptr),y on stack
.9d3e		68		pla				pla 								; restore count and save
.9d3f		85 36		sta $36				sta 	zTemp0
.9d41		98		tya				tya 								; add length to Y to skip it.
.9d42		18		clc				clc
.9d43		65 36		adc $36				adc 	zTemp0
.9d45		a8		tay				tay
.9d46		a9 10		lda #$10			lda 	#NSTString 					; mark as string
.9d48		95 50		sta $50,x			sta 	NSStatus,x
.9d4a		60		rts				rts
.9d4b						_ETVariable:
.9d4b		4c a0 9d	jmp $9da0			jmp 	VariableHandler
.9d4e						_ETPuncUnary:
.9d4e		c8		iny				iny 								; consume the unary character
.9d4f		c9 2d		cmp #$2d			cmp 	#KWD_MINUS 					; unary minus
.9d51		f0 2b		beq $9d7e			beq 	_ETUnaryNegate
.9d53		c9 b8		cmp #$b8			cmp 	#KWD_AT 					; @ reference -> constant
.9d55		f0 36		beq $9d8d			beq 	_ETDereference
.9d57		c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; parenthesis
.9d59		f0 3e		beq $9d99			beq 	_ETParenthesis
.9d5b		64 36		stz $36				stz 	zTemp0 						; zTemp0 is the indirection level.
.9d5d		c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; byte indirection (0) ?
.9d5f		f0 06		beq $9d67			beq 	_ETIndirection
.9d61		e6 36		inc $36				inc 	zTemp0
.9d63		c9 21		cmp #$21			cmp 	#KWD_PLING					; word indirection (1) \
.9d65		d0 a3		bne $9d0a			bne 	_ETSyntaxError
.9d67						_ETIndirection:
.9d67		a5 36		lda $36				lda 	zTemp0 						; push indirection amount (0-1) => (1-2) on the stack
.9d69		1a		inc a				inc 	a
.9d6a		48		pha				pha
.9d6b		20 d7 9c	jsr $9cd7			jsr 	EvaluateTerm				; evaluate the term
.9d6e		20 50 9b	jsr $9b50			jsr 	Dereference 				; dereference it.
.9d71		b5 50		lda $50,x			lda 	NSStatus,x 					; must be a +ve integer.
.9d73		d0 06		bne $9d7b			bne 	_ETTypeMismatch
.9d75		68		pla				pla 								; indirection 1-2
.9d76		09 20		ora #$20			ora 	#NSBIsReference 			; make it a reference.
.9d78		95 50		sta $50,x			sta 	NSStatus,x
.9d7a		60		rts				rts
.9d7b						_ETTypeMismatch:
.9d7b		4c 65 a4	jmp $a465			jmp 	TypeError
.9d7e						_ETUnaryNegate:
.9d7e		20 d7 9c	jsr $9cd7			jsr 	EvaluateTerm				; evaluate the term
.9d81		20 50 9b	jsr $9b50			jsr 	Dereference 				; dereference it.
.9d84		b5 50		lda $50,x			lda 	NSStatus,x 					; must be a number
.9d86		29 10		and #$10			and 	#NSTString
.9d88		d0 f1		bne $9d7b			bne 	_ETTypeMismatch
.9d8a		4c a5 a2	jmp $a2a5			jmp 	NSMNegate  					; just toggles the sign bit.
.9d8d						_ETDereference:
.9d8d		20 d7 9c	jsr $9cd7			jsr 	EvaluateTerm				; evaluate the term
.9d90		b5 50		lda $50,x			lda 	NSStatus,x 					; must be a reference
.9d92		29 20		and #$20			and 	#NSBIsReference
.9d94		f0 e5		beq $9d7b			beq 	_ETTypeMismatch
.9d96		74 50		stz $50,x			stz 	NSStatus,x 					; make it an integer address
.9d98		60		rts				rts
.9d99						_ETParenthesis:
.9d99		20 8d 98	jsr $988d			jsr 	EvaluateExpression 			; evaluate here, from lowest precedence
.9d9c		20 6a 93	jsr $936a			jsr 	CheckRightBracket 			; check for )
.9d9f		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/variable.asm

.9da0						VariableHandler:
.9da0		b1 30		lda ($30),y			lda 	(codePtr),y
.9da2		18		clc				clc
.9da3		69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.9da5		85 37		sta $37				sta 	zTemp0+1
.9da7		c8		iny				iny
.9da8		b1 30		lda ($30),y			lda 	(codePtr),y
.9daa		85 36		sta $36				sta 	zTemp0
.9dac		c8		iny				iny
.9dad		18		clc				clc									; copy variable address+3 to mantissa
.9dae		69 03		adc #$03			adc 	#3 							; this is the address of the data.
.9db0		95 58		sta $58,x			sta 	NSMantissa0,x
.9db2		a5 37		lda $37				lda 	zTemp0+1
.9db4		69 00		adc #$00			adc 	#0
.9db6		95 60		sta $60,x			sta 	NSMantissa1,x
.9db8		74 68		stz $68,x			stz 	NSMantissa2,x
.9dba		74 70		stz $70,x			stz 	NSMantissa3,x
.9dbc		74 78		stz $78,x			stz 	NSExponent,x
.9dbe		5a		phy				phy
.9dbf		a0 02		ldy #$02			ldy 	#2 							; read type
.9dc1		b1 36		lda ($36),y			lda 	(zTemp0),y
.9dc3		7a		ply				ply
.9dc4		29 1c		and #$1c			and 	#NSBTypeMask+NSBIsArray 	; get type information
.9dc6		09 20		ora #$20			ora 	#NSBIsReference 			; make a reference.
.9dc8		95 50		sta $50,x			sta 	NSStatus,x
.9dca		29 04		and #$04			and 	#NSBIsArray
.9dcc		d0 01		bne $9dcf			bne 	_VHArray
.9dce		60		rts				rts
.9dcf						_VHArray:
.9dcf		e8		inx				inx
.9dd0		20 7e a2	jsr $a27e			jsr 	Evaluate8BitInteger 		; get the 1st index.
.9dd3		a9 ff		lda #$ff			lda 	#$FF 						; set Status of X+2 to a duff value so we know if we picked it up.
.9dd5		95 51		sta $51,x			sta 	NSStatus+1,x
.9dd7		b1 30		lda ($30),y			lda 	(codePtr),y
.9dd9		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.9ddb		d0 06		bne $9de3			bne 	_VHNoSecondIndex
.9ddd		c8		iny				iny 								; skip the comma
.9dde		e8		inx				inx
.9ddf		20 7e a2	jsr $a27e			jsr 	Evaluate8BitInteger 		; get the 2nd index.
.9de2		ca		dex				dex
.9de3						_VHNoSecondIndex:
.9de3		ca		dex				dex 								; set X back.
.9de4		20 6a 93	jsr $936a			jsr 	CheckRightBracket 			; and check the right bracket.
.9de7		5a		phy				phy 								; save position
.9de8		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy record address to zaTemp (moved 6/12/22)
.9dea		85 3e		sta $3e				sta 	zaTemp
.9dec		b5 60		lda $60,x			lda 	NSMantissa1,x
.9dee		85 3f		sta $3f				sta 	zaTemp+1
.9df0		a0 02		ldy #$02			ldy 	#2 							; check first index is not-zero, e.g. array defined
.9df2		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9df4		f0 5d		beq $9e53			beq 	_VHBadArray
.9df6		a0 03		ldy #$03			ldy 	#3 							; get the second index - which is 0 if there is one index.
.9df8		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9dfa		f0 02		beq $9dfe			beq 	_VHHas2Mask
.9dfc		a9 ff		lda #$ff			lda 	#$FF
.9dfe						_VHHas2Mask:
.9dfe		d5 52		cmp $52,x			cmp 	NSStatus+2,x 				; so if they are the same there are the wrong number of indices
.9e00		f0 4c		beq $9e4e			beq 	_VHBadIndex
.9e02		0a		asl a				asl 	a 							; carry will be set if a second index
.9e03		90 08		bcc $9e0d			bcc 	_VHCheckFirstIndex
.9e05		a0 03		ldy #$03			ldy 	#3 			 				; check the 2nd size >= 2nd index
.9e07		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9e09		d5 5a		cmp $5a,x			cmp 	NSMantissa0+2,x
.9e0b		90 41		bcc $9e4e			bcc 	_VHBadIndex
.9e0d						_VHCheckFirstIndex:
.9e0d		a0 02		ldy #$02			ldy 	#2 			 				; check the 2nd size >= 2nd index
.9e0f		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9e11		d5 59		cmp $59,x			cmp 	NSMantissa0+1,x
.9e13		90 39		bcc $9e4e			bcc 	_VHBadIndex
.9e15		64 36		stz $36				stz 	zTemp0 						; clear zTemp0 (if 1 index)
.9e17		64 37		stz $37				stz 	zTemp0+1
.9e19		b5 52		lda $52,x			lda 	NSStatus+2,x 				; if only one index provided, don't need to multiply
.9e1b		30 0e		bmi $9e2b			bmi 	_VHNoMultiply
.9e1d		da		phx				phx
.9e1e		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; get 2nd index on stack
.9e20		48		pha				pha
.9e21		a0 02		ldy #$02			ldy 	#2 							; get 1st size in A
.9e23		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9e25		1a		inc a				inc 	a 							; add 1 for zero base
.9e26		fa		plx				plx
.9e27		20 8e a2	jsr $a28e			jsr 	Multiply8x8 				; calculate -> Z0
.9e2a		fa		plx				plx
.9e2b						_VHNoMultiply:
.9e2b		18		clc				clc
.9e2c		a5 36		lda $36				lda 	zTemp0
.9e2e		75 59		adc $59,x			adc 	NSMantissa0+1,x
.9e30		85 36		sta $36				sta 	zTemp0
.9e32		a5 37		lda $37				lda 	zTemp0+1
.9e34		69 00		adc #$00			adc 	#0
.9e36		85 37		sta $37				sta 	zTemp0+1
.9e38		b5 50		lda $50,x			lda 	NSStatus,x
.9e3a		20 27 89	jsr $8927			jsr 	ScaleByBaseType
.9e3d		18		clc				clc
.9e3e		b2 3e		lda ($3e)			lda 	(zaTemp)
.9e40		65 36		adc $36				adc 	zTemp0
.9e42		95 58		sta $58,x			sta 	NSMantissa0,x
.9e44		a0 01		ldy #$01			ldy 	#1
.9e46		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9e48		65 37		adc $37				adc 	zTemp0+1
.9e4a		95 60		sta $60,x			sta 	NSMantissa1,x
.9e4c		7a		ply				ply 								; restore position
.9e4d		60		rts				rts
.9e4e						_VHBadIndex:
.9e4e		a9 17		lda #$17		lda	#23
.9e50		4c 83 93	jmp $9383		jmp	ErrorHandler
.9e53						_VHBadArray:
.9e53		a9 18		lda #$18		lda	#24
.9e55		4c 83 93	jmp $9383		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/abs.asm

.9e58						AbsUnary:
.9e58		fa		plx				plx 								; restore stack pos
.9e59		20 31 a2	jsr $a231			jsr 	EvaluateNumber 				; get a float or int
.9e5c		20 6a 93	jsr $936a			jsr 	CheckRightBracket
.9e5f		b5 50		lda $50,x			lda 	NSStatus,x 					; clear the sign bit
.9e61		29 7f		and #$7f			and 	#$7F
.9e63		95 50		sta $50,x			sta 	NSStatus,x
.9e65		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/alloc.asm

.9e66						AllocUnary:
.9e66		fa		plx				plx 								; restore stack pos
.9e67		20 63 a2	jsr $a263			jsr 	Evaluate16BitInteger		; get bytes required.
.9e6a		20 6a 93	jsr $936a			jsr 	CheckRightBracket
.9e6d		da		phx				phx 								; save X/Y
.9e6e		5a		phy				phy
.9e6f		8a		txa				txa 								; copy X into Y
.9e70		a8		tay				tay
.9e71		b9 60 00	lda $0060,y			lda		NSMantissa1,y 				; get size into XA
.9e74		aa		tax				tax
.9e75		b9 58 00	lda $0058,y			lda 	NSMantissa0,y
.9e78		20 85 9e	jsr $9e85			jsr 	AllocateXABytes 			; allocate memory
.9e7b		99 58 00	sta $0058,y			sta 	NSMantissa0,y 				; write address out.
.9e7e		8a		txa				txa 	 							; typing is 16 bit integer.
.9e7f		99 60 00	sta $0060,y			sta 	NSMantissa1,y
.9e82		7a		ply				ply
.9e83		fa		plx				plx
.9e84		60		rts				rts
.9e85						AllocateXABytes:
.9e85		5a		phy				phy
.9e86		ac 08 04	ldy $0408			ldy 	lowMemPtr 					; push current address on stack and to zTemp0
.9e89		84 36		sty $36				sty 	zTemp0
.9e8b		5a		phy				phy
.9e8c		ac 09 04	ldy $0409			ldy 	lowMemPtr+1
.9e8f		84 37		sty $37				sty 	zTemp0+1
.9e91		5a		phy				phy
.9e92		18		clc				clc 								; add to low memory pointer
.9e93		6d 08 04	adc $0408			adc 	lowMemPtr
.9e96		8d 08 04	sta $0408			sta 	lowMemPtr
.9e99		8a		txa				txa
.9e9a		6d 09 04	adc $0409			adc 	lowMemPtr+1
.9e9d		8d 09 04	sta $0409			sta 	lowMemPtr+1
.9ea0		b0 2f		bcs $9ed1			bcs 	CISSMemory
.9ea2		20 c3 9e	jsr $9ec3			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.9ea5						_ClearMemory:
.9ea5		ad 08 04	lda $0408			lda 	lowMemPtr 					; cleared all memory allocated
.9ea8		c5 36		cmp $36				cmp 	zTemp0
.9eaa		d0 07		bne $9eb3			bne 	_CMClearNext
.9eac		ad 09 04	lda $0409			lda 	lowMemPtr+1
.9eaf		c5 37		cmp $37				cmp 	zTemp0+1
.9eb1		f0 0c		beq $9ebf			beq 	_CMExit
.9eb3						_CMClearNext:
.9eb3		a9 00		lda #$00			lda 	#0 							; clear byte, advance to next.
.9eb5		92 36		sta ($36)			sta 	(zTemp0)
.9eb7		e6 36		inc $36				inc 	zTemp0
.9eb9		d0 ea		bne $9ea5			bne 	_ClearMemory
.9ebb		e6 37		inc $37				inc		zTemp0+1
.9ebd		80 e6		bra $9ea5			bra 	_ClearMemory
.9ebf						_CMExit:
.9ebf		fa		plx				plx
.9ec0		68		pla				pla
.9ec1		7a		ply				ply
.9ec2		60		rts				rts
.9ec3						CheckIdentifierStringSpace:
.9ec3		48		pha				pha
.9ec4		ad 09 04	lda $0409			lda 	lowMemPtr+1 				; get low memory pointer
.9ec7		18		clc				clc
.9ec8		69 02		adc #$02			adc 	#2 							; need at least 2 256 byte pages
.9eca		cd 0b 04	cmp $040b			cmp 	stringMemory+1 				; is it >= StringMemory
.9ecd		b0 02		bcs $9ed1			bcs 	CISSMemory
.9ecf		68		pla				pla
.9ed0		60		rts				rts
.9ed1						CISSMemory:
.9ed1		a9 06		lda #$06		lda	#6
.9ed3		4c 83 93	jmp $9383		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/asc.asm

.9ed6						AscUnary:
.9ed6		fa		plx				plx 								; restore stack pos
.9ed7		20 3b a2	jsr $a23b			jsr 	EvaluateString 				; get a string
.9eda		b2 36		lda ($36)			lda 	(zTemp0)					; get/return first character
.9edc		20 e5 a2	jsr $a2e5			jsr 	NSMSetByte 					; ASC("") will return zero.
.9edf		20 6a 93	jsr $936a			jsr 	CheckRightBracket
.9ee2		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/frac.asm

.9ee3						FracUnary:
.9ee3		fa		plx				plx 								; restore stack pos
.9ee4		20 31 a2	jsr $a231			jsr 	EvaluateNumber 				; get a float or int
.9ee7		20 6a 93	jsr $936a			jsr 	CheckRightBracket
.9eea		b5 50		lda $50,x			lda 	NSStatus,x
.9eec		29 08		and #$08			and 	#NSTFloat 					; check it is a float
.9eee		f0 04		beq $9ef4			beq 	_IUZero
.9ef0		20 9e 99	jsr $999e			jsr 	FloatFractionalPart 		; if so, get the fractional part.
.9ef3		60		rts				rts
.9ef4						_IUZero:
.9ef4		20 e3 a2	jsr $a2e3			jsr 	NSMSetZero
.9ef7		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/int.asm

.9ef8						IntUnary:
.9ef8		fa		plx				plx 								; restore stack pos
.9ef9		20 31 a2	jsr $a231			jsr 	EvaluateNumber 				; get a float or int
.9efc		20 6a 93	jsr $936a			jsr 	CheckRightBracket
.9eff		b5 50		lda $50,x			lda 	NSStatus,x
.9f01		29 08		and #$08			and 	#NSTFloat 					; check it is a float
.9f03		f0 03		beq $9f08			beq 	_IUExit
.9f05		20 f6 99	jsr $99f6			jsr 	FloatIntegerPart 			; if it is get the integer part.
.9f08						_IUExit:
.9f08		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/len.asm

.9f09						LenUnary:
.9f09		fa		plx				plx 								; restore stack pos
.9f0a		20 3b a2	jsr $a23b			jsr 	EvaluateString 				; get a string
.9f0d		5a		phy				phy
.9f0e		a0 00		ldy #$00			ldy 	#0 							; find length
.9f10						_LenFind:
.9f10		b1 36		lda ($36),y			lda 	(zTemp0),y 					; look for trailing NULL.
.9f12		f0 06		beq $9f1a			beq 	_LenExit
.9f14		c8		iny				iny
.9f15		d0 f9		bne $9f10			bne 	_LenFind
.9f17		4c 60 a4	jmp $a460			jmp 	RangeError 					; string > 255 - no trailing NULL.
.9f1a						_LenExit:
.9f1a		98		tya				tya		 							; return length
.9f1b		20 e5 a2	jsr $a2e5			jsr 	NSMSetByte
.9f1e		7a		ply				ply
.9f1f		20 6a 93	jsr $936a			jsr 	CheckRightBracket
.9f22		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/minmax.asm

.9f23						Unary_Min:
.9f23		a9 01		lda #$01			lda 	#1
.9f25		80 02		bra $9f29			bra 	UnaryMinMaxMain
.9f27						Unary_Max:
.9f27		a9 ff		lda #$ff			lda 	#$FF 						; value from comparator to cause a write
.9f29						UnaryMinMaxMain:
.9f29		fa		plx				plx 								; get index on number stack
.9f2a		48		pha				pha 								; save comparator
.9f2b		20 28 a2	jsr $a228			jsr 	EvaluateValue 				; get the first value.
.9f2e						_UMMMLoop:
.9f2e		b1 30		lda ($30),y			lda 	(codePtr),y
.9f30		c9 29		cmp #$29			cmp 	#KWD_RPAREN 				; if right bracket then done.
.9f32		f0 22		beq $9f56			beq 	_UMMMDone
.9f34		20 72 93	jsr $9372			jsr 	CheckComma 					; must be a comma
.9f37		e8		inx				inx
.9f38		20 28 a2	jsr $a228			jsr 	EvaluateValue
.9f3b		ca		dex				dex
.9f3c		20 c6 a2	jsr $a2c6			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] (Compare is destructive)
.9f3f		e8		inx				inx
.9f40		20 c6 a2	jsr $a2c6			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2], original
.9f43		e8		inx				inx
.9f44		20 40 94	jsr $9440			jsr 	CompareBaseCode 			; part of > = < etc. code, returns 255,0 or 1
.9f47		ca		dex				dex
.9f48		ca		dex				dex
.9f49		85 36		sta $36				sta 	zTemp0 						; save required result
.9f4b		68		pla				pla 								; get and save comparator
.9f4c		48		pha				pha
.9f4d		c5 36		cmp $36				cmp 	zTemp0 						; if the comparator
.9f4f		d0 dd		bne $9f2e			bne 	_UMMMLoop
.9f51		20 59 9f	jsr $9f59			jsr 	ExpCopyAboveDown 			; copy next up slot down
.9f54		80 d8		bra $9f2e			bra 	_UMMMLoop
.9f56						_UMMMDone:
.9f56		68		pla				pla 								; throw the comparator
.9f57		c8		iny				iny 								; skip )
.9f58		60		rts				rts
.9f59						ExpCopyAboveDown:
.9f59		b5 51		lda $51,x			lda 	NSStatus+1,x
.9f5b		95 50		sta $50,x			sta 	NSStatus,x
.9f5d		b5 79		lda $79,x			lda 	NSExponent+1,x
.9f5f		95 78		sta $78,x			sta 	NSExponent,x
.9f61		b5 59		lda $59,x			lda 	NSMantissa0+1,x
.9f63		95 58		sta $58,x			sta 	NSMantissa0,x
.9f65		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9f67		95 60		sta $60,x			sta 	NSMantissa1,x
.9f69		b5 69		lda $69,x			lda 	NSMantissa2+1,x
.9f6b		95 68		sta $68,x			sta 	NSMantissa2,x
.9f6d		b5 71		lda $71,x			lda 	NSMantissa3+1,x
.9f6f		95 70		sta $70,x			sta 	NSMantissa3,x
.9f71		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/not.asm

.9f72						Unary_Not:
.9f72		fa		plx				plx
.9f73		20 50 a2	jsr $a250			jsr 	EvaluateInteger 			; get integer
.9f76		20 6a 93	jsr $936a			jsr 	CheckRightBracket
.9f79		20 05 a3	jsr $a305			jsr 	NSMIsZero 					; zero mantissa ?
.9f7c		f0 04		beq $9f82			beq 	_NotZero
.9f7e		20 e3 a2	jsr $a2e3			jsr 	NSMSetZero
.9f81		60		rts				rts
.9f82						_NotZero:
.9f82		4c f6 93	jmp $93f6			jmp 	ReturnTrue

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/peek.asm

.9f85						PeekByteUnary:
.9f85		a9 01		lda #$01			lda 	#1
.9f87		80 0a		bra $9f93			bra 	PeekUnary
.9f89						PeekWUnary:
.9f89		a9 02		lda #$02			lda 	#2
.9f8b		80 06		bra $9f93			bra 	PeekUnary
.9f8d						PeekLUnary:
.9f8d		a9 03		lda #$03			lda 	#3
.9f8f		80 02		bra $9f93			bra 	PeekUnary
.9f91						PeekDUnary:
.9f91		a9 04		lda #$04			lda 	#4
.9f93						PeekUnary:
.9f93		fa		plx				plx 								; restore position.
.9f94		48		pha				pha 								; save count to copy on stack
.9f95		20 63 a2	jsr $a263			jsr		Evaluate16BitInteger 		; address as constant.
.9f98		20 6a 93	jsr $936a			jsr 	CheckRightBracket
.9f9b		b5 58		lda $58,x			lda 	NSMantissa0,x 				; save mantissa in zTemp0 as address
.9f9d		85 36		sta $36				sta 	zTemp0
.9f9f		b5 60		lda $60,x			lda 	NSMantissa1,x
.9fa1		85 37		sta $37				sta 	zTemp0+1
.9fa3		20 e3 a2	jsr $a2e3			jsr 	NSMSetZero 					; clear the result to zero.
.9fa6		68		pla				pla 								; count in zTemp2
.9fa7		85 3a		sta $3a				sta 	zTemp2
.9fa9		da		phx				phx 								; save stack position and offset of read
.9faa		5a		phy				phy
.9fab		a0 00		ldy #$00			ldy 	#0 							; byte read offset.
.9fad						_PULoop:
.9fad		b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next byte, write to mantissa0,x
.9faf		95 58		sta $58,x			sta 	NSMantissa0,x 				; we change X not the index before it.
.9fb1		c8		iny				iny 								; next byte to write
.9fb2		8a		txa				txa 								; next byte to read - stack layout in 04data.inc
.9fb3		18		clc				clc
.9fb4		69 08		adc #$08			adc 	#MathStackSize
.9fb6		aa		tax				tax
.9fb7		c6 3a		dec $3a				dec 	zTemp2 						; done them all
.9fb9		d0 f2		bne $9fad			bne 	_PULoop
.9fbb		7a		ply				ply 								; restore stack/code pos and exit.
.9fbc		fa		plx				plx
.9fbd		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/sgn.asm

.9fbe						SgnUnary:
.9fbe		fa		plx				plx 								; restore stack pos
.9fbf		20 31 a2	jsr $a231			jsr 	EvaluateNumber 				; get a float or int
.9fc2		20 6a 93	jsr $936a			jsr 	CheckRightBracket
.9fc5		20 05 a3	jsr $a305			jsr 	NSMIsZero 					; if zero
.9fc8		f0 0e		beq $9fd8			beq 	_SGZero  					; return Int Zero
.9fca		b5 50		lda $50,x			lda 	NSStatus,x 					; get status w/sign
.9fcc		48		pha				pha
.9fcd		a9 01		lda #$01			lda 	#1 							; set to 1
.9fcf		20 e5 a2	jsr $a2e5			jsr 	NSMSetByte
.9fd2		68		pla				pla
.9fd3		29 80		and #$80			and		#$80 						; copy the sign byte out
.9fd5		95 50		sta $50,x			sta 	NSStatus,x  				; so it will be -1 or 1
.9fd7		60		rts				rts
.9fd8		20 e3 a2	jsr $a2e3	_SGZero:jsr 	NSMSetZero
.9fdb		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/val.asm

.9fdc						ValUnary:
.9fdc		fa		plx				plx 								; restore stack pos
.9fdd		20 f2 9f	jsr $9ff2			jsr 	ValMainCode 				; do the main val() code
.9fe0		b0 01		bcs $9fe3			bcs 	_VUError 					; couldn't convert
.9fe2		60		rts				rts
.9fe3						_VUError:
.9fe3		4c 65 a4	jmp $a465			jmp 	TypeError
.9fe6						IsValUnary:
.9fe6		fa		plx				plx 								; restore stack pos
.9fe7		20 f2 9f	jsr $9ff2			jsr 	ValMainCode 				; do the main val() code
.9fea		b0 03		bcs $9fef			bcs 	_VUBad
.9fec		4c f6 93	jmp $93f6			jmp 	ReturnTrue
.9fef						_VUBad:
.9fef		4c 01 94	jmp $9401			jmp 	ReturnFalse
.9ff2						ValMainCode:
.9ff2		20 3b a2	jsr $a23b			jsr 	EvaluateString 				; get a string
.9ff5		20 6a 93	jsr $936a			jsr 	CheckRightBracket 			; check right bracket present
.9ff8						ValEvaluateZTemp0:
.9ff8		5a		phy				phy
.9ff9		b2 36		lda ($36)			lda 	(zTemp0) 					; check not empty string
.9ffb		f0 17		beq $a014			beq 	_VMCFail2
.9ffd		a0 ff		ldy #$ff			ldy 	#$FF 						; start position
.9fff		48		pha				pha 								; save first character
.a000		c9 2d		cmp #$2d			cmp 	#"-"		 				; is it - ?
.a002		d0 01		bne $a005			bne 	_VMCStart
.a004		c8		iny				iny 								; skip over -
.a005						_VMCStart:
.a005		38		sec				sec 								; initialise first time round.
.a006						_VMCNext:
.a006		c8		iny				iny 								; pre-increment
.a007		b1 36		lda ($36),y			lda 	(zTemp0),y 					; next character = EOS ?
.a009		f0 0c		beq $a017			beq 	_VMCSuccess 				; successful.
.a00b		20 d3 9b	jsr $9bd3			jsr 	EncodeNumber 				; send it to the number-builder
.a00e		90 03		bcc $a013			bcc 	_VMCFail 					; if failed, give up.
.a010		18		clc				clc 								; next time round, countinue
.a011		80 f3		bra $a006			bra 	_VMCNext
.a013						_VMCFail:
.a013		68		pla				pla
.a014						_VMCFail2:
.a014		7a		ply				ply
.a015		38		sec				sec
.a016		60		rts				rts
.a017						_VMCSuccess:
.a017		a9 00		lda #$00			lda 	#0 							; construct final
.a019		20 d3 9b	jsr $9bd3			jsr 	EncodeNumber 				; by sending a duff value.
.a01c		68		pla				pla 								; if it was -ve
.a01d		c9 2d		cmp #$2d			cmp 	#"-"
.a01f		d0 03		bne $a024			bne 	_VMCNotNegative
.a021		20 a5 a2	jsr $a2a5			jsr		NSMNegate 					; negate it.
.a024						_VMCNotNegative:
.a024		7a		ply				ply
.a025		18		clc				clc
.a026		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/chr.asm

.a027						ChrUnary:
.a027		fa		plx				plx 								; restore stack pos
.a028		20 7e a2	jsr $a27e			jsr 	Evaluate8BitInteger			; get value (chr$(0) returns an empty string)
.a02b		48		pha				pha
.a02c		20 6a 93	jsr $936a			jsr 	CheckRightBracket
.a02f		a9 01		lda #$01			lda 	#1 							; allocate space for one char
.a031		20 f7 b3	jsr $b3f7			jsr 	StringTempAllocate
.a034		68		pla				pla 								; write number to it
.a035		20 30 b4	jsr $b430			jsr 	StringTempWrite
.a038		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/items.asm

.a039						ItemCountUnary:
.a039		fa		plx				plx
.a03a		20 3b a2	jsr $a23b			jsr 	EvaluateString
.a03d		e8		inx				inx
.a03e		20 b1 a0	jsr $a0b1			jsr 	ICGetSeperator
.a041		ca		dex				dex
.a042		20 d2 a0	jsr $a0d2			jsr 	ICSetPointer 				; zTemp0 = (string)
.a045		20 e3 a2	jsr $a2e3			jsr 	NSMSetZero 					; zero the result.
.a048		5a		phy				phy
.a049		a0 ff		ldy #$ff			ldy 	#$FF 						; loop counting seperators in mantissa
.a04b						_ICULoop:
.a04b		c8		iny				iny
.a04c		b1 36		lda ($36),y			lda 	(zTemp0),y
.a04e		cd a7 07	cmp $07a7			cmp 	ICSeperator
.a051		d0 02		bne $a055			bne 	_ICUNoMatch
.a053		f6 58		inc $58,x			inc 	NSMantissa0,x
.a055						_ICUNoMatch:
.a055		c9 00		cmp #$00			cmp 	#0
.a057		d0 f2		bne $a04b			bne 	_ICULoop
.a059		f6 58		inc $58,x			inc 	NSMantissa0,x 				; +1
.a05b		7a		ply				ply
.a05c		60		rts				rts
.a05d						ItemGetUnary:
.a05d		fa		plx				plx
.a05e		20 3b a2	jsr $a23b			jsr 	EvaluateString 				; search string
.a061		20 72 93	jsr $9372			jsr 	CheckComma
.a064		e8		inx				inx 								; get count
.a065		20 7e a2	jsr $a27e			jsr 	Evaluate8BitInteger
.a068		c9 00		cmp #$00			cmp 	#0 							; must be > 0, index starts at 1.
.a06a		f0 61		beq $a0cd			beq 	ICGSRange
.a06c		e8		inx				inx 								; get seperator.
.a06d		20 b1 a0	jsr $a0b1			jsr 	ICGetSeperator
.a070		ca		dex				dex
.a071		ca		dex				dex
.a072		5a		phy				phy
.a073		20 d2 a0	jsr $a0d2			jsr 	ICSetPointer 				; zTemp0 points to string.
.a076		a0 00		ldy #$00			ldy 	#0
.a078		d6 59		dec $59,x			dec 	NSMantissa0+1,x 			; first element.
.a07a		f0 0e		beq $a08a			beq 	_IGUFoundStart
.a07c						_IGUFindNext:
.a07c		b1 36		lda ($36),y			lda 	(zTemp0),y		 			; next
.a07e		f0 4d		beq $a0cd			beq 	ICGSRange 					; eol, not found.
.a080		c8		iny				iny
.a081		cd a7 07	cmp $07a7			cmp 	ICSeperator 				; until found a seperator (or EOS)
.a084		d0 f6		bne $a07c			bne 	_IGUFindNext
.a086		d6 59		dec $59,x			dec 	NSMantissa0+1,x
.a088		d0 f2		bne $a07c			bne 	_IGUFindNext
.a08a						_IGUFoundStart:
.a08a		84 38		sty $38				sty 	zTemp1 						; save start
.a08c		88		dey				dey
.a08d						_IGUFindLength:
.a08d		c8		iny				iny 								; forward till seperator/EOS
.a08e		b1 36		lda ($36),y			lda 	(zTemp0),y
.a090		f0 05		beq $a097			beq 	_IGUFoundLength
.a092		cd a7 07	cmp $07a7			cmp 	ICSeperator
.a095		d0 f6		bne $a08d			bne 	_IGUFindLength
.a097						_IGUFoundLength:
.a097		84 39		sty $39				sty 	zTemp1+1 					; save end of copy string
.a099		98		tya				tya 								; calculate length of new string.
.a09a		38		sec				sec
.a09b		e5 38		sbc $38				sbc 	zTemp1
.a09d		20 f7 b3	jsr $b3f7			jsr 	StringTempAllocate 			; allocate bytes for it.
.a0a0		a4 38		ldy $38				ldy 	zTemp1
.a0a2						_IGUCopySub:
.a0a2		c4 39		cpy $39				cpy 	zTemp1+1
.a0a4		f0 08		beq $a0ae			beq 	_IGUCopyOver
.a0a6		b1 36		lda ($36),y			lda 	(zTemp0),y
.a0a8		20 30 b4	jsr $b430			jsr 	StringTempWrite
.a0ab		c8		iny				iny
.a0ac		80 f4		bra $a0a2			bra 	_IGUCopySub
.a0ae						_IGUCopyOver:
.a0ae		7a		ply				ply
.a0af		60		rts				rts
>a0b0		db						.byte 	$DB 						; causes a break in the emulator
.a0b1						ICGetSeperator:
.a0b1		20 72 93	jsr $9372			jsr 	CheckComma 					; preceding comma
.a0b4		20 3b a2	jsr $a23b			jsr 	EvaluateString 				; seperator string
.a0b7		20 d2 a0	jsr $a0d2			jsr 	ICSetPointer 				; access it
.a0ba		b2 36		lda ($36)			lda 	(zTemp0) 					; get sep char
.a0bc		8d a7 07	sta $07a7			sta 	ICSeperator
.a0bf		f0 0c		beq $a0cd			beq 	ICGSRange 					; check LEN(seperator) = 1
.a0c1		5a		phy				phy
.a0c2		a0 01		ldy #$01			ldy 	#1
.a0c4		b1 36		lda ($36),y			lda 	(zTemp0),y
.a0c6		d0 05		bne $a0cd			bne 	ICGSRange
.a0c8		7a		ply				ply
.a0c9		20 6a 93	jsr $936a			jsr 	CheckRightBracket 			; check following )
.a0cc		60		rts				rts
.a0cd						ICGSRange:
.a0cd		a9 04		lda #$04		lda	#4
.a0cf		4c 83 93	jmp $9383		jmp	ErrorHandler
.a0d2						ICSetPointer:
.a0d2		b5 58		lda $58,x			lda 	NSMantissa0,x 				; set zTemp0 to point to it.
.a0d4		85 36		sta $36				sta 	zTemp0
.a0d6		b5 60		lda $60,x			lda 	NSMantissa1,x
.a0d8		85 37		sta $37				sta 	zTemp0+1
.a0da		60		rts				rts
.07a7						ICSeperator:
>07a7								.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/spc.asm

.a0db						SpcUnary:
.a0db		fa		plx				plx 								; restore stack pos
.a0dc		20 7e a2	jsr $a27e			jsr 	Evaluate8BitInteger			; get value
.a0df		5a		phy				phy
.a0e0		48		pha				pha 								; save count
.a0e1		20 f7 b3	jsr $b3f7			jsr 	StringTempAllocate
.a0e4		7a		ply				ply 								; to do count in Y
.a0e5						_SpcLoop:
.a0e5		c0 00		cpy #$00			cpy 	#0 							; copy Y spaces in.
.a0e7		f0 08		beq $a0f1			beq 	_SpcExit
.a0e9		a9 20		lda #$20			lda 	#32
.a0eb		20 30 b4	jsr $b430			jsr 	StringTempWrite
.a0ee		88		dey				dey
.a0ef		80 f4		bra $a0e5			bra 	_SpcLoop
.a0f1						_SpcExit:
.a0f1		7a		ply				ply
.a0f2		20 6a 93	jsr $936a			jsr 	CheckRightBracket
.a0f5		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/str.asm

.a0f6						Unary_Str:
.a0f6		fa		plx				plx
.a0f7		20 31 a2	jsr $a231			jsr 	EvaluateNumber  			; get number
.a0fa		20 6a 93	jsr $936a			jsr 	CheckRightBracket 			; closing bracket
.a0fd		a9 05		lda #$05			lda 	#5 							; maximum decimals, from Basic816
.a0ff		20 18 a1	jsr $a118			jsr 	ConvertNumberToString 		; do the conversion.
.a102		a9 21		lda #$21			lda		#33 						; create buffer
.a104		20 f7 b3	jsr $b3f7			jsr 	StringTempAllocate 			; allocate memory
.a107		da		phx				phx  								; copy the converted string into the buffer.
.a108		a2 00		ldx #$00			ldx 	#0
.a10a						_USCopy:
.a10a		bd 45 06	lda $0645,x			lda 	decimalBuffer,x
.a10d		20 30 b4	jsr $b430			jsr 	StringTempWrite
.a110		e8		inx				inx
.a111		bd 45 06	lda $0645,x			lda 	decimalBuffer,x
.a114		d0 f4		bne $a10a			bne 	_USCopy
.a116		fa		plx				plx
.a117		60		rts				rts
.a118						ConvertNumberToString:
.a118		5a		phy				phy 								; save code position
.a119		8d 10 04	sta $0410			sta 	decimalPlaces	 			; save number of DPs.
.a11c		9c 11 04	stz $0411			stz 	dbOffset 					; offset into decimal buffer = start.
.a11f		b5 50		lda $50,x			lda 	NSStatus,x  				; is it -ve.
.a121		10 09		bpl $a12c			bpl 	_CNTSNotNegative
.a123		29 7f		and #$7f			and 	#$7F 						; make +ve
.a125		95 50		sta $50,x			sta 	NSStatus,x
.a127		a9 2d		lda #$2d			lda 	#"-"
.a129		20 8d a1	jsr $a18d			jsr 	WriteDecimalBuffer
.a12c						_CNTSNotNegative:
.a12c		b5 78		lda $78,x			lda 	NSExponent,x 				; check if decimal
.a12e		f0 12		beq $a142			beq 	_CNTSNotFloat
.a130		e8		inx				inx 								; round up so we don't get too many 6.999999
.a131		a9 01		lda #$01			lda 	#1
.a133		20 e5 a2	jsr $a2e5			jsr 	NSMSetByte
.a136		ca		dex				dex
.a137		b5 78		lda $78,x			lda		NSExponent,x
.a139		95 79		sta $79,x			sta 	NSExponent+1,x
.a13b		a9 08		lda #$08			lda 	#NSTFloat
.a13d		95 51		sta $51,x			sta 	NSStatus+1,x
.a13f		20 d8 98	jsr $98d8			jsr 	FloatAdd
.a142						_CNTSNotFloat:
.a142		20 6f a1	jsr $a16f			jsr 	MakePlusTwoString 			; do the integer part.
.a145		20 9e 99	jsr $999e			jsr 	FloatFractionalPart 		; get the fractional part
.a148		20 4f 9a	jsr $9a4f			jsr 	NSNormalise					; normalise , exit if zero
.a14b		f0 20		beq $a16d			beq 	_CNTSExit
.a14d		a9 2e		lda #$2e			lda 	#"."
.a14f		20 8d a1	jsr $a18d			jsr 	WriteDecimalBuffer 			; write decimal place
.a152						_CNTSDecimal:
.a152		ce 10 04	dec $0410			dec 	decimalPlaces 				; done all the decimals
.a155		30 16		bmi $a16d			bmi 	_CNTSExit
.a157		e8		inx				inx 								; x 10.0
.a158		a9 0a		lda #$0a			lda 	#10
.a15a		20 e5 a2	jsr $a2e5			jsr 	NSMSetByte
.a15d		a9 08		lda #$08			lda 	#NSTFloat
.a15f		95 50		sta $50,x			sta 	NSStatus,x
.a161		ca		dex				dex
.a162		20 1d 9a	jsr $9a1d			jsr 	FloatMultiply
.a165		20 6f a1	jsr $a16f			jsr 	MakePlusTwoString 			; put the integer e.g. next digit out.
.a168		20 9e 99	jsr $999e			jsr 	FloatFractionalPart 		; get the fractional part
.a16b		80 e5		bra $a152			bra 	_CNTSDecimal 				; keep going.
.a16d						_CNTSExit:
.a16d		7a		ply				ply
.a16e		60		rts				rts
.a16f						MakePlusTwoString:
.a16f		da		phx				phx
.a170		20 c6 a2	jsr $a2c6			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.a173		e8		inx				inx 								; access it
.a174		e8		inx				inx
.a175		20 f6 99	jsr $99f6			jsr 	FloatIntegerPart 			; make it an integer
.a178		a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.a17a		20 08 98	jsr $9808			jsr 	ConvertInt32
.a17d		a2 00		ldx #$00			ldx	 	#0 							; write that to the decimal buffer.
.a17f						_MPTSCopy:
.a17f		bd 23 06	lda $0623,x			lda 	numberBuffer,x
.a182		20 8d a1	jsr $a18d			jsr 	WriteDecimalBuffer
.a185		e8		inx				inx
.a186		bd 23 06	lda $0623,x			lda 	numberBuffer,x
.a189		d0 f4		bne $a17f			bne 	_MPTSCopy
.a18b		fa		plx				plx
.a18c		60		rts				rts
.a18d						WriteDecimalBuffer:
.a18d		da		phx				phx
.a18e		ae 11 04	ldx $0411			ldx 	dbOffset
.a191		9d 45 06	sta $0645,x			sta 	decimalBuffer,x
.a194		9e 46 06	stz $0646,x			stz 	decimalBuffer+1,x
.a197		ee 11 04	inc $0411			inc 	dbOffset
.a19a		fa		plx				plx
.a19b		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/substring.asm

.a19c						Unary_Left:
.a19c		fa		plx				plx
.a19d		18		clc				clc 								; only one parameter
.a19e		20 01 a2	jsr $a201			jsr 	SubstringInitial 			; set up.
.a1a1		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; Param #1 is the length
.a1a3		95 5a		sta $5a,x			sta 	NSMantissa0+2,x
.a1a5		74 59		stz $59,x			stz 	NSMantissa0+1,x 			; Start is zero.
.a1a7		80 25		bra $a1ce			bra 	SubstringMain
.a1a9						Unary_Right:
.a1a9		fa		plx				plx
.a1aa		18		clc				clc 								; only one parameter
.a1ab		20 01 a2	jsr $a201			jsr 	SubstringInitial 			; set up.
.a1ae		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; length => param 2
.a1b0		95 5a		sta $5a,x			sta 	NSMantissa0+2,x
.a1b2		b5 78		lda $78,x			lda 	NSExponent,x 				; total length
.a1b4		f5 59		sbc $59,x			sbc 	NSMantissa0+1,x 			; length - required.
.a1b6		b0 02		bcs $a1ba			bcs 	_URNotUnderflow
.a1b8		a9 00		lda #$00			lda 	#0 							; start from the beginning, as something like right$("AB",3)
.a1ba						_URNotUnderflow:
.a1ba		95 59		sta $59,x			sta 	NSMantissa0+1,x 			; this is the start position
.a1bc		80 10		bra $a1ce			bra 	SubstringMain
.a1be						Unary_Mid:
.a1be		fa		plx				plx
.a1bf		38		sec				sec 								; two parameters
.a1c0		20 01 a2	jsr $a201			jsr 	SubstringInitial 			; set up.
.a1c3		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; first parameter is zero ?
.a1c5		f0 04		beq $a1cb			beq 	_UMError
.a1c7		d6 59		dec $59,x			dec 	NSMantissa0+1,x				; reduce initial offset by 1 as MID$(a$,1..) is actually the first character
.a1c9		80 03		bra $a1ce			bra 	SubstringMain
.a1cb						_UMError:
.a1cb		4c 6a a4	jmp $a46a			jmp 	ArgumentError
.a1ce						SubstringMain:
.a1ce		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; is the initial offset >= the length
.a1d0		d5 78		cmp $78,x			cmp 	NSExponent,x
.a1d2		b0 27		bcs $a1fb			bcs 	_SSMNull 					; if so, return an empty string.
.a1d4		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; if copy count is zero
.a1d6		f0 23		beq $a1fb			beq 	_SSMNull 					; return empty string.
.a1d8		18		clc				clc 								; add the offset +1 to the address and
.a1d9		b5 58		lda $58,x			lda	 	NSMantissa0,x 				; put in zTemp, this is the start of the substring to copy.
.a1db		75 59		adc $59,x			adc 	NSMantissa0+1,x
.a1dd		85 36		sta $36				sta 	zTemp0
.a1df		b5 60		lda $60,x			lda	 	NSMantissa1,x
.a1e1		69 00		adc #$00			adc 	#0
.a1e3		85 37		sta $37				sta 	zTemp0+1
.a1e5						_SSMNoCarry:
.a1e5		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; characters required.
.a1e7		20 f7 b3	jsr $b3f7			jsr 	StringTempAllocate 			; allocate that many characters
.a1ea		5a		phy				phy 								; save Y
.a1eb		a0 00		ldy #$00			ldy 	#0 							; start copying in.
.a1ed						_SSMCopy:
.a1ed		b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next character
.a1ef		f0 08		beq $a1f9			beq 	_SSMEString 				; no more to copy
.a1f1		20 30 b4	jsr $b430			jsr 	StringTempWrite 			; and write it out.
.a1f4		c8		iny				iny
.a1f5		d6 5a		dec $5a,x			dec 	NSMantissa0+2,x
.a1f7		d0 f4		bne $a1ed			bne 	_SSMCopy
.a1f9						_SSMEString:
.a1f9		7a		ply				ply
.a1fa						_SSMExit:
.a1fa		60		rts				rts
.a1fb						_SSMNull:
.a1fb		a9 00		lda #$00			lda 	#0
.a1fd		20 f7 b3	jsr $b3f7			jsr 	StringTempAllocate
.a200		60		rts				rts
.a201						SubstringInitial:
.a201		da		phx				phx 								; save initial stack position
.a202		08		php				php 								; save carry on stack indicating 2 parameters
.a203		20 3b a2	jsr $a23b			jsr 	EvaluateString 				; get a string
.a206		5a		phy				phy 								; calculate length to exponent.
.a207		a0 ff		ldy #$ff			ldy 	#$FF
.a209						_SIFindLength:
.a209		c8		iny				iny
.a20a		b1 36		lda ($36),y			lda 	(zTemp0),y
.a20c		d0 fb		bne $a209			bne 	_SIFindLength
.a20e		98		tya				tya
.a20f		95 78		sta $78,x			sta 	NSExponent,x
.a211		7a		ply				ply
.a212		e8		inx				inx
.a213		20 72 93	jsr $9372			jsr 	CheckComma 					; comma next
.a216		20 7e a2	jsr $a27e			jsr 	Evaluate8BitInteger 		; get next parameter
.a219		28		plp				plp 								; is it the last parameter ?
.a21a		90 07		bcc $a223			bcc 	_SSIExit 					; if so, exit.
.a21c		e8		inx				inx
.a21d		20 72 93	jsr $9372			jsr 	CheckComma 					; comma next
.a220		20 7e a2	jsr $a27e			jsr 	Evaluate8BitInteger 		; get last parameter
.a223						_SSIExit:
.a223		fa		plx				plx
.a224		20 6a 93	jsr $936a			jsr 	CheckRightBracket 			; check closing bracket
.a227		60		rts				rts 								; exit

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/exprhelper.asm

.a228						EvaluateValue:
.a228		48		pha				pha
.a229		20 8d 98	jsr $988d			jsr		EvaluateExpression 			; expression
.a22c		20 50 9b	jsr $9b50			jsr 	Dereference					; derefernce it
.a22f		68		pla				pla
.a230		60		rts				rts
.a231						EvaluateNumber:
.a231		20 28 a2	jsr $a228			jsr 	EvaluateValue 				; get a value
.a234		b5 50		lda $50,x			lda 	NSStatus,x 					; check if string.
.a236		29 10		and #$10			and 	#NSBIsString
.a238		d0 13		bne $a24d			bne 	HelperTypeError
.a23a		60		rts				rts
.a23b						EvaluateString:
.a23b		20 28 a2	jsr $a228			jsr 	EvaluateValue 				; get a value
.a23e		b5 50		lda $50,x			lda 	NSStatus,x 					; check if string.
.a240		29 10		and #$10			and 	#NSBIsString
.a242		f0 09		beq $a24d			beq 	HelperTypeError
.a244						CopyAddressToTemp0:
.a244		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy address -> zTemp0
.a246		85 36		sta $36				sta 	zTemp0 						; (so we can do something with it)
.a248		b5 60		lda $60,x			lda 	NSMantissa1,x
.a24a		85 37		sta $37				sta 	zTemp0+1
.a24c		60		rts				rts
.a24d						HelperTypeError:
.a24d		4c 65 a4	jmp $a465			jmp 	TypeError
.a250						EvaluateInteger:
.a250		20 31 a2	jsr $a231			jsr 	EvaluateNumber
.a253		b5 78		lda $78,x			lda 	NSExponent,x 				; check exponent is zero
.a255		d0 09		bne $a260			bne 	HelperValueError 			; if not, it's a float.
.a257		60		rts				rts
.a258						EvaluateUnsignedInteger:
.a258		20 50 a2	jsr $a250			jsr 	EvaluateInteger 			; check integer is +ve
.a25b		b5 50		lda $50,x			lda 	NSStatus,x
.a25d		30 01		bmi $a260			bmi 	HelperValueError
.a25f		60		rts				rts
.a260						HelperValueError:
.a260		4c 6a a4	jmp $a46a			jmp 	ArgumentError
.a263						Evaluate16BitInteger:
.a263		20 58 a2	jsr $a258			jsr	 	EvaluateUnsignedInteger		; get integer
.a266		b5 70		lda $70,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.a268		15 68		ora $68,x			ora 	NSMantissa2,x
.a26a		d0 f4		bne $a260			bne 	HelperValueError
.a26c		60		rts				rts
.a26d						Evaluate16BitIntegerSigned:
.a26d		20 50 a2	jsr $a250			jsr	 	EvaluateInteger				; get integer
.a270		b5 70		lda $70,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.a272		15 68		ora $68,x			ora 	NSMantissa2,x
.a274		d0 ea		bne $a260			bne 	HelperValueError
.a276		b5 50		lda $50,x			lda 	NSStatus,x 					; signed ?
.a278		10 03		bpl $a27d			bpl 	_EISNotSigned
.a27a		20 ac a2	jsr $a2ac			jsr 	NSMNegateMantissa 			; makes it an actual 2's complement value.
.a27d						_EISNotSigned:
.a27d		60		rts				rts
.a27e						Evaluate8BitInteger:
.a27e		20 58 a2	jsr $a258			jsr	 	EvaluateUnsignedInteger 	; get an integer
.a281		d0 dd		bne $a260			bne 	HelperValueError
.a283		b5 70		lda $70,x			lda 	NSMantissa3,x	 			; bytes 1, 2 & 3 must be zero
.a285		15 68		ora $68,x			ora 	NSMantissa2,x
.a287		15 60		ora $60,x			ora 	NSMantissa1,x
.a289		d0 d5		bne $a260			bne 	HelperValueError
.a28b		b5 58		lda $58,x			lda 	NSMantissa0,x
.a28d		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/mult8x8.asm

.a28e						Multiply8x8:
.a28e		4a		lsr a		  		lsr 	a  							; prime the carry bit for the loop
.a28f		85 36		sta $36			  	sta 	zTemp0
.a291		86 37		stx $37				stx 	zTemp0+1
.a293		a9 00		lda #$00			lda 	#0
.a295		a2 08		ldx #$08			ldx 	#8
.a297						_M88Loop:
.a297		90 03		bcc $a29c			bcc 	_M88NoAdd
.a299		18		clc				clc
.a29a		65 37		adc $37				adc 	zTemp0+1
.a29c						_M88NoAdd:
.a29c		6a		ror a				ror 	a
.a29d		66 36		ror $36				ror 	zTemp0  					; pull another bit out for the next iteration
.a29f		ca		dex				dex         						; inc/dec don't modify carry; only shifts and adds do
.a2a0		d0 f5		bne $a297			bne 	_M88Loop
.a2a2		85 37		sta $37				sta 	zTemp0+1 					; store high 8 bits.
.a2a4		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/utility.asm

.a2a5						NSMNegate:
.a2a5		b5 50		lda $50,x			lda 	NSStatus,x 					; everything is sign/magnitude usually so just
.a2a7		49 80		eor #$80			eor 	#NSBIsNegative  			; toggle the negative flag
.a2a9		95 50		sta $50,x			sta 	NSStatus,x
.a2ab		60		rts				rts
.a2ac						NSMNegateMantissa:
.a2ac		38		sec				sec 								; when we want an actual 32 bit 2's complement value.
.a2ad		a9 00		lda #$00			lda 	#0
.a2af		f5 58		sbc $58,x			sbc 	NSMantissa0,x
.a2b1		95 58		sta $58,x			sta 	NSMantissa0,x
.a2b3		a9 00		lda #$00			lda 	#0
.a2b5		f5 60		sbc $60,x			sbc 	NSMantissa1,x
.a2b7		95 60		sta $60,x			sta 	NSMantissa1,x
.a2b9		a9 00		lda #$00			lda 	#0
.a2bb		f5 68		sbc $68,x			sbc 	NSMantissa2,x
.a2bd		95 68		sta $68,x			sta 	NSMantissa2,x
.a2bf		a9 00		lda #$00			lda 	#0
.a2c1		f5 70		sbc $70,x			sbc 	NSMantissa3,x
.a2c3		95 70		sta $70,x			sta 	NSMantissa3,x
.a2c5		60		rts				rts
.a2c6						NSMShiftUpTwo:
.a2c6		b5 58		lda $58,x			lda 	NSMantissa0,x
.a2c8		95 5a		sta $5a,x			sta 	NSMantissa0+2,x
.a2ca		b5 60		lda $60,x			lda 	NSMantissa1,x
.a2cc		95 62		sta $62,x			sta 	NSMantissa1+2,x
.a2ce		b5 68		lda $68,x			lda 	NSMantissa2,x
.a2d0		95 6a		sta $6a,x			sta 	NSMantissa2+2,x
.a2d2		b5 70		lda $70,x			lda 	NSMantissa3,x
.a2d4		95 72		sta $72,x			sta 	NSMantissa3+2,x
.a2d6		b5 78		lda $78,x			lda 	NSExponent,x
.a2d8		95 7a		sta $7a,x			sta 	NSExponent+2,x
.a2da		b5 50		lda $50,x			lda 	NSStatus,x
.a2dc		95 52		sta $52,x			sta 	NSStatus+2,x
.a2de		60		rts				rts
.a2df						NSMSetZeroMantissaOnly:
.a2df		a9 00		lda #$00			lda 	#0
.a2e1		80 06		bra $a2e9			bra 	NSMSetMantissa
.a2e3						NSMSetZero:
.a2e3		a9 00		lda #$00			lda 	#0
.a2e5						NSMSetByte:
.a2e5		74 78		stz $78,x			stz 	NSExponent,x 				; zero exponent, as integer.
.a2e7		74 50		stz $50,x			stz 	NSStatus,x 					; status zero (integer)
.a2e9						NSMSetMantissa:
.a2e9		95 58		sta $58,x			sta 	NSMantissa0,x 				; mantissa
.a2eb		74 60		stz $60,x			stz 	NSMantissa1,x
.a2ed		74 68		stz $68,x			stz 	NSMantissa2,x
.a2ef		74 70		stz $70,x			stz 	NSMantissa3,x
.a2f1		60		rts				rts
.a2f2						NSMShiftLeft:
.a2f2		18		clc				clc
.a2f3						NSMRotateLeft:
.a2f3		36 58		rol $58,x			rol 	NSMantissa0,x
.a2f5		36 60		rol $60,x			rol		NSMantissa1,x
.a2f7		36 68		rol $68,x			rol		NSMantissa2,x
.a2f9		36 70		rol $70,x			rol		NSMantissa3,x
.a2fb		60		rts				rts
.a2fc						NSMShiftRight:
.a2fc		56 70		lsr $70,x			lsr 	NSMantissa3,x
.a2fe		76 68		ror $68,x			ror		NSMantissa2,x
.a300		76 60		ror $60,x			ror		NSMantissa1,x
.a302		76 58		ror $58,x			ror		NSMantissa0,x
.a304		60		rts				rts
.a305						NSMIsZero:
.a305		b5 70		lda $70,x			lda 	NSMantissa3,x
.a307		15 68		ora $68,x			ora		NSMantissa2,x
.a309		15 60		ora $60,x			ora		NSMantissa1,x
.a30b		15 58		ora $58,x			ora		NSMantissa0,x
.a30d		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/asmcore.asm

.a30e						Assemble_ora:
.a30e		20 97 84	jsr $8497		jsr	AssembleGroup1
>a311		01					.byte $01
.a312						Assemble_and:
.a312		20 97 84	jsr $8497		jsr	AssembleGroup1
>a315		21					.byte $21
.a316						Assemble_eor:
.a316		20 97 84	jsr $8497		jsr	AssembleGroup1
>a319		41					.byte $41
.a31a						Assemble_adc:
.a31a		20 97 84	jsr $8497		jsr	AssembleGroup1
>a31d		61					.byte $61
.a31e						Assemble_sta:
.a31e		20 97 84	jsr $8497		jsr	AssembleGroup1
>a321		81					.byte $81
.a322						Assemble_lda:
.a322		20 97 84	jsr $8497		jsr	AssembleGroup1
>a325		a1					.byte $a1
.a326						Assemble_cmp:
.a326		20 97 84	jsr $8497		jsr	AssembleGroup1
>a329		c1					.byte $c1
.a32a						Assemble_sbc:
.a32a		20 97 84	jsr $8497		jsr	AssembleGroup1
>a32d		e1					.byte $e1
.a32e						Assemble_asl:
.a32e		20 9e 84	jsr $849e		jsr	AssembleGroup2
>a331		02					.byte $02
>a332		75					.byte $75
.a333						Assemble_rol:
.a333		20 9e 84	jsr $849e		jsr	AssembleGroup2
>a336		22					.byte $22
>a337		75					.byte $75
.a338						Assemble_lsr:
.a338		20 9e 84	jsr $849e		jsr	AssembleGroup2
>a33b		42					.byte $42
>a33c		75					.byte $75
.a33d						Assemble_ror:
.a33d		20 9e 84	jsr $849e		jsr	AssembleGroup2
>a340		62					.byte $62
>a341		75					.byte $75
.a342						Assemble_stx:
.a342		20 9e 84	jsr $849e		jsr	AssembleGroup2
>a345		82					.byte $82
>a346		50					.byte $50
.a347						Assemble_ldx:
.a347		20 9e 84	jsr $849e		jsr	AssembleGroup2
>a34a		a2					.byte $a2
>a34b		d0					.byte $d0
.a34c						Assemble_dec:
.a34c		20 9e 84	jsr $849e		jsr	AssembleGroup2
>a34f		c2					.byte $c2
>a350		55					.byte $55
.a351						Assemble_inc:
.a351		20 9e 84	jsr $849e		jsr	AssembleGroup2
>a354		e2					.byte $e2
>a355		55					.byte $55
.a356						Assemble_stz:
.a356		20 9e 84	jsr $849e		jsr	AssembleGroup2
>a359		60					.byte $60
>a35a		44					.byte $44
.a35b						Assemble_bit:
.a35b		20 9e 84	jsr $849e		jsr	AssembleGroup2
>a35e		20					.byte $20
>a35f		55					.byte $55
.a360						Assemble_sty:
.a360		20 9e 84	jsr $849e		jsr	AssembleGroup2
>a363		80					.byte $80
>a364		54					.byte $54
.a365						Assemble_ldy:
.a365		20 9e 84	jsr $849e		jsr	AssembleGroup2
>a368		a0					.byte $a0
>a369		d5					.byte $d5
.a36a						Assemble_cpy:
.a36a		20 9e 84	jsr $849e		jsr	AssembleGroup2
>a36d		c0					.byte $c0
>a36e		d4					.byte $d4
.a36f						Assemble_cpx:
.a36f		20 9e 84	jsr $849e		jsr	AssembleGroup2
>a372		e0					.byte $e0
>a373		d0					.byte $d0
.a374						Assemble_tsb:
.a374		20 9e 84	jsr $849e		jsr	AssembleGroup2
>a377		00					.byte $00
>a378		50					.byte $50
.a379						Assemble_trb:
.a379		20 9e 84	jsr $849e		jsr	AssembleGroup2
>a37c		10					.byte $10
>a37d		50					.byte $50
.a37e						Assemble_jsr:
.a37e		20 9e 84	jsr $849e		jsr	AssembleGroup2
>a381		14					.byte $14
>a382		10					.byte $10
.a383						Assemble_jmp:
.a383		20 9e 84	jsr $849e		jsr	AssembleGroup2
>a386		40					.byte $40
>a387		10					.byte $10
.a388						Assemble_bpl:
.a388		20 ef 84	jsr $84ef		jsr	AssembleGroup3
>a38b		10					.byte $10
.a38c						Assemble_bmi:
.a38c		20 ef 84	jsr $84ef		jsr	AssembleGroup3
>a38f		30					.byte $30
.a390						Assemble_bvc:
.a390		20 ef 84	jsr $84ef		jsr	AssembleGroup3
>a393		50					.byte $50
.a394						Assemble_bvs:
.a394		20 ef 84	jsr $84ef		jsr	AssembleGroup3
>a397		70					.byte $70
.a398						Assemble_bcc:
.a398		20 ef 84	jsr $84ef		jsr	AssembleGroup3
>a39b		90					.byte $90
.a39c						Assemble_bcs:
.a39c		20 ef 84	jsr $84ef		jsr	AssembleGroup3
>a39f		b0					.byte $b0
.a3a0						Assemble_bne:
.a3a0		20 ef 84	jsr $84ef		jsr	AssembleGroup3
>a3a3		d0					.byte $d0
.a3a4						Assemble_beq:
.a3a4		20 ef 84	jsr $84ef		jsr	AssembleGroup3
>a3a7		f0					.byte $f0
.a3a8						Assemble_bra:
.a3a8		20 ef 84	jsr $84ef		jsr	AssembleGroup3
>a3ab		80					.byte $80
.a3ac						Assemble_brk:
.a3ac		20 23 85	jsr $8523		jsr	AssembleGroup4
>a3af		00					.byte $00
.a3b0						Assemble_php:
.a3b0		20 23 85	jsr $8523		jsr	AssembleGroup4
>a3b3		08					.byte $08
.a3b4						Assemble_clc:
.a3b4		20 23 85	jsr $8523		jsr	AssembleGroup4
>a3b7		18					.byte $18
.a3b8						Assemble_plp:
.a3b8		20 23 85	jsr $8523		jsr	AssembleGroup4
>a3bb		28					.byte $28
.a3bc						Assemble_sec:
.a3bc		20 23 85	jsr $8523		jsr	AssembleGroup4
>a3bf		38					.byte $38
.a3c0						Assemble_rti:
.a3c0		20 23 85	jsr $8523		jsr	AssembleGroup4
>a3c3		40					.byte $40
.a3c4						Assemble_pha:
.a3c4		20 23 85	jsr $8523		jsr	AssembleGroup4
>a3c7		48					.byte $48
.a3c8						Assemble_cli:
.a3c8		20 23 85	jsr $8523		jsr	AssembleGroup4
>a3cb		58					.byte $58
.a3cc						Assemble_phy:
.a3cc		20 23 85	jsr $8523		jsr	AssembleGroup4
>a3cf		5a					.byte $5a
.a3d0						Assemble_rts:
.a3d0		20 23 85	jsr $8523		jsr	AssembleGroup4
>a3d3		60					.byte $60
.a3d4						Assemble_pla:
.a3d4		20 23 85	jsr $8523		jsr	AssembleGroup4
>a3d7		68					.byte $68
.a3d8						Assemble_sei:
.a3d8		20 23 85	jsr $8523		jsr	AssembleGroup4
>a3db		78					.byte $78
.a3dc						Assemble_ply:
.a3dc		20 23 85	jsr $8523		jsr	AssembleGroup4
>a3df		7a					.byte $7a
.a3e0						Assemble_dey:
.a3e0		20 23 85	jsr $8523		jsr	AssembleGroup4
>a3e3		88					.byte $88
.a3e4						Assemble_txa:
.a3e4		20 23 85	jsr $8523		jsr	AssembleGroup4
>a3e7		8a					.byte $8a
.a3e8						Assemble_tya:
.a3e8		20 23 85	jsr $8523		jsr	AssembleGroup4
>a3eb		98					.byte $98
.a3ec						Assemble_txs:
.a3ec		20 23 85	jsr $8523		jsr	AssembleGroup4
>a3ef		9a					.byte $9a
.a3f0						Assemble_tay:
.a3f0		20 23 85	jsr $8523		jsr	AssembleGroup4
>a3f3		a8					.byte $a8
.a3f4						Assemble_tax:
.a3f4		20 23 85	jsr $8523		jsr	AssembleGroup4
>a3f7		aa					.byte $aa
.a3f8						Assemble_clv:
.a3f8		20 23 85	jsr $8523		jsr	AssembleGroup4
>a3fb		b8					.byte $b8
.a3fc						Assemble_tsx:
.a3fc		20 23 85	jsr $8523		jsr	AssembleGroup4
>a3ff		ba					.byte $ba
.a400						Assemble_iny:
.a400		20 23 85	jsr $8523		jsr	AssembleGroup4
>a403		c8					.byte $c8
.a404						Assemble_dex:
.a404		20 23 85	jsr $8523		jsr	AssembleGroup4
>a407		ca					.byte $ca
.a408						Assemble_cld:
.a408		20 23 85	jsr $8523		jsr	AssembleGroup4
>a40b		d8					.byte $d8
.a40c						Assemble_phx:
.a40c		20 23 85	jsr $8523		jsr	AssembleGroup4
>a40f		da					.byte $da
.a410						Assemble_stp:
.a410		20 23 85	jsr $8523		jsr	AssembleGroup4
>a413		db					.byte $db
.a414						Assemble_inx:
.a414		20 23 85	jsr $8523		jsr	AssembleGroup4
>a417		e8					.byte $e8
.a418						Assemble_nop:
.a418		20 23 85	jsr $8523		jsr	AssembleGroup4
>a41b		ea					.byte $ea
.a41c						Assemble_sed:
.a41c		20 23 85	jsr $8523		jsr	AssembleGroup4
>a41f		f8					.byte $f8
.a420						Assemble_plx:
.a420		20 23 85	jsr $8523		jsr	AssembleGroup4
>a423		fa					.byte $fa

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/constants.asm

.a424						DecimalScalarTable:
>a424		66 66 66 66				.dword $66666666 ; 0.1
>a428		de					.byte $de
>a429		1f 85 eb 51				.dword $51eb851f ; 0.01
>a42d		db					.byte $db
>a42e		4c 37 89 41				.dword $4189374c ; 0.001
>a432		d8					.byte $d8
>a433		ac 8b db 68				.dword $68db8bac ; 0.0001
>a437		d4					.byte $d4
>a438		24 d6 e2 53				.dword $53e2d624 ; 1e-05
>a43c		d1					.byte $d1
>a43d		83 de 1b 43				.dword $431bde83 ; 1e-06
>a441		ce					.byte $ce
>a442		6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>a446		ca					.byte $ca
>a447		89 3b e6 55				.dword $55e63b89 ; 1e-08
>a44b		c7					.byte $c7
>a44c		a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>a450		c4					.byte $c4
>a451		67 7f f3 6d				.dword $6df37f67 ; 1e-10
>a455		c0					.byte $c0
>a456		86 ff f5 57				.dword $57f5ff86 ; 1e-11
>a45a		bd					.byte $bd

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.asm

.a45b						SyntaxError:
.a45b		a9 02		lda #$02		lda	#2
.a45d		4c 83 93	jmp $9383		jmp	ErrorHandler
.a460						RangeError:
.a460		a9 04		lda #$04		lda	#4
.a462		4c 83 93	jmp $9383		jmp	ErrorHandler
.a465						TypeError:
.a465		a9 05		lda #$05		lda	#5
.a467		4c 83 93	jmp $9383		jmp	ErrorHandler
.a46a						ArgumentError:
.a46a		a9 07		lda #$07		lda	#7
.a46c		4c 83 93	jmp $9383		jmp	ErrorHandler
.a46f						NotDoneError:
.a46f		a9 0c		lda #$0c		lda	#12
.a471		4c 83 93	jmp $9383		jmp	ErrorHandler
.a474						ErrorText:
>a474		42 72 65 61 6b 00			.text	"Break",0
>a47a		53 79 6e 74 61 78 20 65			.text	"Syntax error",0
>a482		72 72 6f 72 00
>a487		44 69 76 69 73 69 6f 6e			.text	"Division by zero",0
>a48f		20 62 79 20 7a 65 72 6f 00
>a498		4f 75 74 20 6f 66 20 52			.text	"Out of Range",0
>a4a0		61 6e 67 65 00
>a4a5		54 79 70 65 20 6d 69 73			.text	"Type mismatch",0
>a4ad		6d 61 74 63 68 00
>a4b3		4f 75 74 20 6f 66 20 6d			.text	"Out of memory",0
>a4bb		65 6d 6f 72 79 00
>a4c1		49 6c 6c 65 67 61 6c 20			.text	"Illegal argument",0
>a4c9		61 72 67 75 6d 65 6e 74 00
>a4d2		53 74 6f 70 00				.text	"Stop",0
>a4d7		53 74 72 69 6e 67 20 74			.text	"String too long",0
>a4df		6f 6f 20 6c 6f 6e 67 00
>a4e7		41 73 73 65 72 74 69 6f			.text	"Assertion failed",0
>a4ef		6e 20 66 61 69 6c 65 64 00
>a4f8		4f 75 74 20 6f 66 20 64			.text	"Out of data",0
>a500		61 74 61 00
>a504		55 6e 69 6d 70 6c 65 6d			.text	"Unimplemented",0
>a50c		65 6e 74 65 64 00
>a512		4e 6f 20 73 75 63 68 20			.text	"No such line number",0
>a51a		6c 69 6e 65 20 6e 75 6d 62 65 72 00
>a526		52 65 74 75 72 6e 20 77			.text	"Return without Gosub",0
>a52e		69 74 68 6f 75 74 20 47 6f 73 75 62 00
>a53b		55 6e 74 69 6c 20 77 69			.text	"Until without Repeat",0
>a543		74 68 6f 75 74 20 52 65 70 65 61 74 00
>a550		57 65 6e 64 20 77 69 74			.text	"Wend without While",0
>a558		68 6f 75 74 20 57 68 69 6c 65 00
>a563		4e 65 78 74 20 77 69 74			.text	"Next without For",0
>a56b		68 6f 75 74 20 46 6f 72 00
>a574		42 41 53 49 43 20 53 74			.text	"BASIC Stack full",0
>a57c		61 63 6b 20 66 75 6c 6c 00
>a585		4f 70 65 6e 20 53 74 72			.text	"Open Structure",0
>a58d		75 63 74 75 72 65 00
>a594		45 6e 64 50 72 6f 63 20			.text	"EndProc without call",0
>a59c		77 69 74 68 6f 75 74 20 63 61 6c 6c 00
>a5a9		41 72 72 61 79 20 61 6c			.text	"Array already defined",0
>a5b1		72 65 61 64 79 20 64 65 66 69 6e 65 64 00
>a5bf		41 72 72 61 79 20 73 69			.text	"Array size",0
>a5c7		7a 65 00
>a5ca		42 61 64 20 61 72 72 61			.text	"Bad array index",0
>a5d2		79 20 69 6e 64 65 78 00
>a5da		41 72 72 61 79 20 6e 6f			.text	"Array not declared",0
>a5e2		74 20 64 65 63 6c 61 72 65 64 00
>a5ed		46 69 6c 65 20 6e 6f 74			.text	"File not found",0
>a5f5		20 66 6f 75 6e 64 00
>a5fc		53 74 6f 72 61 67 65 20			.text	"Storage error",0
>a604		65 72 72 6f 72 00
>a60a		56 65 72 69 66 79 20 66			.text	"Verify failed",0
>a612		61 69 6c 65 64 00

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/timestamp.asm

>e76b		09 09 32 30 2f 30 32 2f			.text 9,9,"20/02/23 37"
>e773		32 33 20 33 37

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/memory/memory.flat/delete.asm

.a618						MemoryDeleteLine:
.a618		20 37 a6	jsr $a637			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.a61b		b2 30		lda ($30)			lda 	(codePtr) 					; size to delete => y
.a61d		a8		tay				tay
.a61e						_MDDLLoop:
.a61e		b1 30		lda ($30),y			lda 	(codePtr),y 				; copy down
.a620		92 30		sta ($30)			sta 	(codePtr)
.a622		a5 30		lda $30				lda 	codePtr 					; check done the lot.
.a624		c5 3a		cmp $3a				cmp 	zTemp2 						; has codePtr (copyFrom) reached the last byte to copy.
.a626		d0 07		bne $a62f			bne 	_MDLDLNext
.a628		a5 31		lda $31				lda 	codePtr+1
.a62a		c5 3b		cmp $3b				cmp 	zTemp2+1
.a62c		d0 01		bne $a62f			bne 	_MDLDLNext
.a62e						_MDDLExit:
.a62e		60		rts				rts
.a62f						_MDLDLNext:
.a62f		e6 30		inc $30				inc 	codePtr						; next byte
.a631		d0 eb		bne $a61e			bne 	_MDDLLoop
.a633		e6 31		inc $31				inc 	codePtr+1
.a635		80 e7		bra $a61e			bra 	_MDDLLoop
.a637						IMemoryFindEnd:
.a637		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a639		85 3a		sta $3a				sta 	0+zTemp2
.a63b		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a63d		85 3b		sta $3b				sta 	1+zTemp2
.a63f						_MDLFELoop:
.a63f		b2 3a		lda ($3a)			lda 	(zTemp2) 					; scan forward using offsets.
.a641		f0 0b		beq $a64e			beq 	_MDLFEExit
.a643		18		clc				clc
.a644		65 3a		adc $3a				adc 	zTemp2
.a646		85 3a		sta $3a				sta 	zTemp2
.a648		90 f5		bcc $a63f			bcc 	_MDLFELoop
.a64a		e6 3b		inc $3b				inc 	zTemp2+1
.a64c		80 f1		bra $a63f			bra 	_MDLFELoop
.a64e						_MDLFEExit:
.a64e		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/memory/memory.flat/insert.asm

.a64f						MemoryInsertLine:
.a64f		08		php				php
.a650		20 37 a6	jsr $a637			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.a653		a5 3b		lda $3b				lda 	zTemp2+1 					; is there space for the new line ?
.a655		1a		inc a				inc 	a
.a656		c9 7f		cmp #$7f			cmp 	#(BasicEnd >> 8)-1
.a658		b0 36		bcs $a690			bcs 	_MDLIError 					; no, fail.
.a65a		28		plp				plp 								; do at a specific point or the end ?
.a65b		90 08		bcc $a665			bcc 	_MDLIFound 					; if specific point already set.
.a65d		a5 3a		lda $3a				lda 	zTemp2 						; if CS on entry append, so put on the
.a65f		85 30		sta $30				sta 	codePtr 					; end.
.a661		a5 3b		lda $3b				lda 	zTemp2+1
.a663		85 31		sta $31				sta 	codePtr+1
.a665						_MDLIFound:
.a665		ad 26 04	lda $0426			lda 	tokenOffset 				; insert gap in Y, the offset, e.g. length of the new line
.a668		a8		tay				tay
.a669						_MDLIInsert:
.a669		b2 3a		lda ($3a)			lda 	(zTemp2) 					; shift one byte up , at least one covers end case (copying link 0)
.a66b		91 3a		sta ($3a),y			sta 	(zTemp2),y 					; work from top down.
.a66d		a5 30		lda $30				lda 	codePtr 					; reached insert point ?
.a66f		c5 3a		cmp $3a				cmp 	zTemp2
.a671		d0 06		bne $a679			bne 	_MDLINext
.a673		a5 31		lda $31				lda 	codePtr+1
.a675		c5 3b		cmp $3b				cmp 	zTemp2+1
.a677		f0 0a		beq $a683			beq 	_MDLIHaveSpace
.a679						_MDLINext:
.a679		a5 3a		lda $3a				lda 	zTemp2 						; if no, keep zTemp2 going backwards opening up space.
.a67b		d0 02		bne $a67f			bne 	_MDLINoBorrow
.a67d		c6 3b		dec $3b				dec 	zTemp2+1
.a67f						_MDLINoBorrow:
.a67f		c6 3a		dec $3a				dec 	zTemp2
.a681		80 e6		bra $a669			bra 	_MDLIInsert
.a683						_MDLIHaveSpace:
.a683		ac 26 04	ldy $0426			ldy 	tokenOffset 				; bytes to copy
.a686		88		dey				dey 								; from offset-1 (last written) to the end of the buffer.
.a687						_MDLICopy:
.a687		b9 26 04	lda $0426,y			lda 	tokenOffset,y
.a68a		91 30		sta ($30),y			sta 	(codePtr),y
.a68c		88		dey				dey
.a68d		10 f8		bpl $a687			bpl 	_MDLICopy
.a68f		60		rts				rts
.a690						_MDLIError:
.a690		a9 06		lda #$06		lda	#6
.a692		4c 83 93	jmp $9383		jmp	ErrorHandler
.a695						MDLAppendLine:
.a695		86 37		stx $37				stx 	zTemp0+1 					; save new line at zTemp0
.a697		85 36		sta $36				sta 	zTemp0
.a699		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a69b		85 38		sta $38				sta 	0+zTemp1
.a69d		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a69f		85 39		sta $39				sta 	1+zTemp1
.a6a1		b2 38		lda ($38)			lda 	(zTemp1)
.a6a3		d0 0a		bne $a6af			bne 	_MDLANoInitialise
.a6a5		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a6a7		8d a8 07	sta $07a8			sta 	0+AppendPointer
.a6aa		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a6ac		8d a9 07	sta $07a9			sta 	1+AppendPointer
.a6af						_MDLANoInitialise:
.a6af		18		clc				clc
.a6b0		ad a8 07	lda $07a8			lda 	AppendPointer 				; copy append pointer to zTemp1 adding the offset as you go
.a6b3		85 38		sta $38				sta 	zTemp1
.a6b5		72 36		adc ($36)			adc 	(zTemp0)
.a6b7		8d a8 07	sta $07a8			sta 	AppendPointer
.a6ba		ad a9 07	lda $07a9			lda 	AppendPointer+1
.a6bd		85 39		sta $39				sta 	zTemp1+1
.a6bf		69 00		adc #$00			adc 	#0
.a6c1		8d a9 07	sta $07a9			sta 	AppendPointer+1
.a6c4		a0 00		ldy #$00			ldy 	#0
.a6c6						_MDLACopy:
.a6c6		b1 36		lda ($36),y			lda 	(zTemp0),y 					; copy new line in
.a6c8		91 38		sta ($38),y			sta 	(zTemp1),y
.a6ca		c8		iny				iny
.a6cb		98		tya				tya
.a6cc		d2 36		cmp ($36)			cmp 	(zTemp0) 					; done whole line
.a6ce		d0 f6		bne $a6c6			bne 	_MDLACopy
.a6d0		a9 00		lda #$00			lda 	#0 							; end of program.
.a6d2		91 38		sta ($38),y			sta 	(zTemp1),y
.a6d4		60		rts				rts
.07a8						AppendPointer:
>07a8								.fill 	2

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/memory/memory.flat/memory.asm

.a6d5						MemoryNew:
.a6d5		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a6d7		85 30		sta $30				sta 	codePtr
.a6d9		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a6db		85 31		sta $31				sta 	codePtr+1
.a6dd		a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.a6df		92 30		sta ($30)			sta 	(codePtr)
.a6e1		60		rts				rts
.a6e2						MemoryInline:
.a6e2		98		tya				tya 								; put address into stack,x
.a6e3		18		clc				clc  								; get the offset, add codePtr
.a6e4		65 30		adc $30				adc 	codePtr
.a6e6		95 58		sta $58,x			sta 	NSMantissa0,x 				; store the result in the mantissa.
.a6e8		a5 31		lda $31				lda 	codePtr+1
.a6ea		69 00		adc #$00			adc 	#0
.a6ec		95 60		sta $60,x			sta 	NSMantissa1,x
.a6ee		74 68		stz $68,x			stz 	NSMantissa2,x
.a6f0		74 70		stz $70,x			stz 	NSMantissa3,x
.a6f2		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/memory/memory.flat/search.asm

.a6f3						MemorySearch:
.a6f3		85 36		sta $36				sta 	zTemp0 						; save line number in zTemp0
.a6f5		86 37		stx $37				stx 	zTemp0+1
.a6f7		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a6f9		85 30		sta $30				sta 	codePtr
.a6fb		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a6fd		85 31		sta $31				sta 	codePtr+1
.a6ff						_MTAXLoop:
.a6ff		b2 30		lda ($30)			lda 	(codePtr)
.a701		18		clc				clc
.a702		f0 21		beq $a725			beq 	_MTAXExit 					; reached end, exit with CC.
.a704		a0 01		ldy #$01			ldy 	#1 							; calculate current line# - requested line#
.a706		b1 30		lda ($30),y			lda 	(codePtr),y
.a708		38		sec				sec
.a709		e5 36		sbc $36				sbc 	zTemp0
.a70b		85 38		sta $38				sta 	zTemp1 						; save interim to set Z
.a70d		c8		iny				iny 								; do the MSB
.a70e		b1 30		lda ($30),y			lda 	(codePtr),y
.a710		e5 37		sbc $37				sbc 	zTemp0+1
.a712		05 38		ora $38				ora 	zTemp1 						; will set Z if result is zero, doesn't affect carry flag
.a714		f0 0f		beq $a725			beq 	_MTAXExit	 				; found so exit (CS will be set)
.a716		b0 0d		bcs $a725			bcs 	_MTAXExit 					; current < required exit
.a718		18		clc				clc
.a719		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.a71b		65 30		adc $30				adc 	codePtr
.a71d		85 30		sta $30				sta 	codePtr
.a71f		90 02		bcc $a723			bcc 	_CREExit
.a721		e6 31		inc $31				inc 	codePtr+1 					; carry
.a723						_CREExit:
.a723		80 da		bra $a6ff			bra 	_MTAXLoop
.a725						_MTAXExit:
.a725		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/graphics/gcommand.asm

.a726						RectangleCommand:
.a726		a9 44		lda #$44			lda 	#GCMD_FrameRect				; frame rectangle
.a728		80 02		bra $a72c			bra 	ShapeDrawCmd
.a72a						CircleCommand:
.a72a		a9 48		lda #$48			lda 	#GCMD_FrameCircle 				; framed circle
.a72c						ShapeDrawCmd:
.a72c		20 b6 a7	jsr $a7b6			jsr 	RunGraphicsCommand
.a72f						ShapeDraw:
.a72f		0d ab 07	ora $07ab			ora 	gxFillSolid  				; adjust AXY for solid fill.
.a732		4c aa a7	jmp $a7aa			jmp 	ExecuteGraphicCommand	 	; and complete
.a735						SpriteCommand:
.a735		a2 00		ldx #$00			ldx 	#0
.a737		20 7e a2	jsr $a27e			jsr 	Evaluate8BitInteger 		; get image number.
.a73a		5a		phy				phy
.a73b		a9 0e		lda #$0e			lda 	#GCMD_SpriteUse 			; use that image.
.a73d		a6 58		ldx $58				ldx 	NSMantissa0
.a73f		e0 40		cpx #$40			cpx 	#64 						; 0-63 only
.a741		b0 0d		bcs $a750			bcs 	_SCRange
.a743		a0 ff		ldy #$ff			ldy 	#255
.a745		20 61 80	jsr $8061			jsr 	GXGraphicDraw
.a748		a9 52		lda #$52			lda 	#GCMD_SpriteMove
.a74a		7a		ply				ply
.a74b		20 b6 a7	jsr $a7b6			jsr 	RunGraphicsCommand
.a74e		80 5a		bra $a7aa			bra 	ExecuteGraphicCommand
.a750						_SCRange:
.a750		4c 60 a4	jmp $a460			jmp 	RangeError
.a753						ImageCommand:
.a753		a2 00		ldx #$00			ldx 	#0
.a755		20 7e a2	jsr $a27e			jsr 	Evaluate8BitInteger 		; get image number.
.a758		20 b6 a7	jsr $a7b6			jsr 	RunGraphicsCommand
.a75b						ImageRunDraw:
.a75b		09 40		ora #$40			ora 	#GCMD_Move					; move cursor
.a75d		20 61 80	jsr $8061			jsr 	GXGraphicDraw
.a760		ad b1 07	lda $07b1			lda 	gxDrawScale
.a763		0a		asl a				asl 	a
.a764		0a		asl a				asl 	a
.a765		0a		asl a				asl 	a
.a766		a8		tay				tay
.a767		a9 0c		lda #$0c			lda 	#GCMD_DrawSprite 			; image drawing
.a769		a6 58		ldx $58				ldx 	NSMantissa0
.a76b		20 61 80	jsr $8061			jsr 	GXGraphicDraw
.a76e		60		rts				rts
.a76f						TextCommand:
.a76f		a2 00		ldx #$00			ldx 	#0
.a771		20 3b a2	jsr $a23b			jsr 	EvaluateString 				; get text
.a774		20 b6 a7	jsr $a7b6			jsr 	RunGraphicsCommand
.a777						TextRunDraw:
.a777		09 40		ora #$40			ora 	#GCMD_Move 					; move cursor
.a779		20 61 80	jsr $8061			jsr 	GXGraphicDraw
.a77c		a0 00		ldy #$00			ldy 	#0
.a77e						_IRDLoop:
.a77e		a5 60		lda $60				lda 	NSMantissa1 				; access character
.a780		85 37		sta $37				sta 	zTemp0+1
.a782		a5 58		lda $58				lda 	NSMantissa0
.a784		85 36		sta $36				sta 	zTemp0
.a786		b1 36		lda ($36),y			lda 	(zTemp0),y
.a788		f0 13		beq $a79d			beq 	_IRDExit
.a78a		5a		phy				phy									; save string pos
.a78b		48		pha				pha 								; save char
.a78c		ad b1 07	lda $07b1			lda 	gxDrawScale 				; get scale
.a78f		0a		asl a				asl 	a
.a790		0a		asl a				asl 	a
.a791		0a		asl a				asl 	a
.a792		a8		tay				tay
.a793		a9 0a		lda #$0a			lda 	#GCMD_DrawFont 				; char drawing
.a795		fa		plx				plx 								; char to draw
.a796		20 61 80	jsr $8061			jsr 	GXGraphicDraw
.a799		7a		ply				ply 								; restore string pos
.a79a		c8		iny				iny
.a79b		90 e1		bcc $a77e			bcc 	_IRDLoop 					; go back if no error.
.a79d						_IRDExit:
.a79d		60		rts				rts
.a79e						PlotCommand:
.a79e		a9 50		lda #$50			lda 	#GCMD_Plot 					; command ID to use
.a7a0		20 b6 a7	jsr $a7b6			jsr 	RunGraphicsCommand
.a7a3		80 05		bra $a7aa			bra 	ExecuteGraphicCommand
.a7a5						LineCommand:
.a7a5		a9 42		lda #$42			lda 	#GCMD_Line 						; command ID to use
.a7a7		20 b6 a7	jsr $a7b6			jsr 	RunGraphicsCommand
.a7aa						ExecuteGraphicCommand:
.a7aa		0d aa 07	ora $07aa			ora 	gxCommandID 				; make a full command
.a7ad		20 61 80	jsr $8061			jsr 	GXGraphicDraw 				; draw it and exit
.a7b0		b0 01		bcs $a7b3			bcs 	_EGCError
.a7b2		60		rts				rts
.a7b3						_EGCError:
.a7b3		4c 5b a4	jmp $a45b			jmp 	SyntaxError
.a7b6						RunGraphicsCommand:
.a7b6		8d aa 07	sta $07aa			sta 	gxCommandID					; save TODO graphics command.
.a7b9		68		pla				pla 								; pop handler address
.a7ba		fa		plx				plx
.a7bb		1a		inc a				inc 	a
.a7bc		d0 01		bne $a7bf			bne 	_RGINoCarry
.a7be		e8		inx				inx
.a7bf						_RGINoCarry:
.a7bf		8d af 07	sta $07af			sta 	gxHandler
.a7c2		8e b0 07	stx $07b0			stx 	gxHandler+1
.a7c5						_RGICommandLoop:
.a7c5		b1 30		lda ($30),y			lda 	(codePtr),y
.a7c7		c8		iny				iny
.a7c8		c9 db		cmp #$db			cmp 	#KWD_TO						; is it TO x,y
.a7ca		f0 53		beq $a81f			beq 	_RGI_To
.a7cc		c9 c5		cmp #$c5			cmp 	#KWD_HERE 					; do it here.
.a7ce		f0 55		beq $a825			beq 	_RGI_Here
.a7d0		c9 80		cmp #$80			cmp 	#KWC_EOL 					; EOL or : , exit
.a7d2		f0 3d		beq $a811			beq 	_RGI_Exit
.a7d4		c9 3a		cmp #$3a			cmp 	#KWD_COLON
.a7d6		f0 39		beq $a811			beq 	_RGI_Exit
.a7d8		c9 cd		cmp #$cd			cmp 	#KWD_OUTLINE 				; solid or outline
.a7da		f0 3e		beq $a81a			beq 	_RGI_Frame
.a7dc		c9 d7		cmp #$d7			cmp 	#KWD_SOLID
.a7de		f0 33		beq $a813			beq 	_RGI_Solid
.a7e0		c9 b9		cmp #$b9			cmp 	#KWD_BY 					; by offset
.a7e2		f0 4b		beq $a82f			beq 	_RGI_By
.a7e4		c9 c3		cmp #$c3			cmp 	#KWD_FROM 					; from
.a7e6		f0 17		beq $a7ff			beq 	_RGI_Move2
.a7e8		c9 c0		cmp #$c0			cmp 	#KWD_DIM 					; dim (set scale)
.a7ea		f0 62		beq $a84e			beq 	_RGI_Dim
.a7ec		c9 be		cmp #$be			cmp 	#KWD_COLOUR 				; colour or Color
.a7ee		f0 74		beq $a864			beq 	_RGI_Colour
.a7f0		c9 bd		cmp #$bd			cmp 	#KWD_COLOR
.a7f2		f0 70		beq $a864			beq 	_RGI_Colour
.a7f4		ae aa 07	ldx $07aa			ldx 	gxCommandID
.a7f7		e0 52		cpx #$52			cpx 	#GCMD_SpriteMove 			; if not sprite
.a7f9		d0 03		bne $a7fe			bne 	_RGI_Move 					; move
.a7fb		4c 8c a8	jmp $a88c			jmp		_RGI_SpriteInstructions
.a7fe						_RGI_Move:
.a7fe		88		dey				dey 								; unpick get.
.a7ff						_RGI_Move2:
.a7ff		20 b2 a8	jsr $a8b2			jsr 	GCGetCoordinatePair 		; move to here
.a802		20 d9 a8	jsr $a8d9			jsr 	GCCopyPairToStore 			; save
.a805		5a		phy				phy
.a806		20 cf a8	jsr $a8cf			jsr 	GCLoadAXY 					; load in
.a809		09 40		ora #$40			ora 	#GCMD_Move 					; move there
.a80b		20 61 80	jsr $8061			jsr 	GXGraphicDraw
.a80e		7a		ply				ply
.a80f		80 b4		bra $a7c5			bra 	_RGICommandLoop 			; and go round
.a811						_RGI_Exit:
.a811		88		dey				dey 								; unpick : / EOL
.a812		60		rts				rts
.a813						_RGI_Solid:
.a813		a9 02		lda #$02			lda 	#2
.a815		8d ab 07	sta $07ab			sta 	gxFillSolid
.a818		80 ab		bra $a7c5			bra 	_RGICommandLoop
.a81a						_RGI_Frame:
.a81a		9c ab 07	stz $07ab			stz 	gxFillSolid
.a81d		80 a6		bra $a7c5			bra 	_RGICommandLoop
.a81f						_RGI_To:
.a81f		20 b2 a8	jsr $a8b2			jsr 	GCGetCoordinatePair 		; get coordinate pair into slot #1,#2
.a822		20 d9 a8	jsr $a8d9			jsr 	GCCopyPairToStore
.a825						_RGI_Here:
.a825		5a		phy				phy
.a826		20 cf a8	jsr $a8cf			jsr 	GCLoadAXY 					; load it into AXY
.a829		20 89 a8	jsr $a889			jsr 	_RGICallHandler 			; go do whatever it is.
.a82c		7a		ply				ply
.a82d		80 96		bra $a7c5			bra 	_RGICommandLoop 			; and go round
.a82f						_RGI_By:
.a82f		20 bf a8	jsr $a8bf			jsr 	GCSignedCoordinatePair 		; get coordinate pair into slot #1,#2
.a832		18		clc				clc
.a833		a5 59		lda $59				lda 	NSMantissa0+1 				; copy it into space.
.a835		6d ac 07	adc $07ac			adc 	gxXPos
.a838		8d ac 07	sta $07ac			sta 	gxXPos
.a83b		a5 61		lda $61				lda 	NSMantissa1+1
.a83d		6d ad 07	adc $07ad			adc 	gxXPos+1
.a840		8d ad 07	sta $07ad			sta 	gxXPos+1
.a843		a5 5a		lda $5a				lda 	NSMantissa0+2
.a845		18		clc				clc
.a846		6d ae 07	adc $07ae			adc 	gxYPos
.a849		8d ae 07	sta $07ae			sta 	gxYPos
.a84c		80 d7		bra $a825			bra 	_RGI_Here
.a84e						_RGI_Dim:
.a84e		a2 01		ldx #$01			ldx	 	#1
.a850		20 7e a2	jsr $a27e			jsr 	Evaluate8BitInteger
.a853		a5 59		lda $59				lda 	NSMantissa0+1
.a855		c9 00		cmp #$00			cmp 	#0
.a857		f0 2d		beq $a886			beq 	_RGIRange
.a859		c9 09		cmp #$09			cmp 	#8+1
.a85b		b0 29		bcs $a886			bcs		_RGIRange
.a85d		3a		dec a				dec 	a
.a85e		8d b1 07	sta $07b1			sta 	gxDrawScale
.a861		4c c5 a7	jmp $a7c5			jmp 	_RGICommandLoop
.a864						_RGI_Colour:
.a864		a2 01		ldx #$01			ldx 	#1 							; colour
.a866		20 7e a2	jsr $a27e			jsr 	Evaluate8BitInteger
.a869		a2 02		ldx #$02			ldx 	#2 							; default zero for 2nd parameter
.a86b		20 e3 a2	jsr $a2e3			jsr 	NSMSetZero
.a86e		b1 30		lda ($30),y			lda 	(codePtr),y
.a870		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; check , => mode.
.a872		d0 04		bne $a878			bne 	_RGICDefaultMode
.a874		c8		iny				iny
.a875		20 7e a2	jsr $a27e			jsr 	Evaluate8BitInteger
.a878						_RGICDefaultMode:
.a878		5a		phy				phy
.a879		a9 08		lda #$08			lda 	#GCMD_Colour 				; set colour.
.a87b		a6 59		ldx $59				ldx 	NSMantissa0+1
.a87d		a4 5a		ldy $5a				ldy 	NSMantissa0+2
.a87f		20 61 80	jsr $8061			jsr 	GXGraphicDraw
.a882		7a		ply				ply
.a883		4c c5 a7	jmp $a7c5			jmp 	_RGICommandLoop 			; and go round
.a886						_RGIRange:
.a886		4c 60 a4	jmp $a460			jmp 	RangeError
.a889						_RGICallHandler:
.a889		6c af 07	jmp ($07af)			jmp 	(gxHandler)
.a88c						_RGI_SpriteInstructions:
.a88c		c9 cb		cmp #$cb			cmp 	#KWD_OFF
.a88e		f0 07		beq $a897			beq 	_RGISpriteOff
.a890		c9 c6		cmp #$c6			cmp 	#KWD_IMAGE
.a892		f0 13		beq $a8a7			beq 	_RGISetImage
.a894		4c fe a7	jmp $a7fe			jmp 	_RGI_Move
.a897						_RGISpriteOff:
.a897		5a		phy				phy
.a898		a0 01		ldy #$01			ldy 	#1
.a89a		a2 00		ldx #$00			ldx 	#0
.a89c						_RGIDoCommandLoop:
.a89c		a9 10		lda #$10			lda 	#GCMD_SpriteImage
.a89e		20 61 80	jsr $8061			jsr 	GXGraphicDraw
.a8a1		7a		ply				ply
.a8a2		b0 e2		bcs $a886			bcs 	_RGIRange
.a8a4		4c c5 a7	jmp $a7c5			jmp 	_RGICommandLoop
.a8a7						_RGISetImage:
.a8a7		a2 01		ldx #$01			ldx 	#1
.a8a9		20 7e a2	jsr $a27e			jsr 	Evaluate8BitInteger
.a8ac		5a		phy				phy
.a8ad		aa		tax				tax
.a8ae		a0 00		ldy #$00			ldy 	#0
.a8b0		80 ea		bra $a89c			bra 	_RGIDoCommandLoop
.a8b2						GCGetCoordinatePair:
.a8b2		a2 01		ldx #$01			ldx 	#1
.a8b4		20 63 a2	jsr $a263			jsr 	Evaluate16BitInteger
.a8b7		20 72 93	jsr $9372			jsr 	CheckComma
.a8ba		e8		inx				inx
.a8bb		20 63 a2	jsr $a263			jsr 	Evaluate16BitInteger
.a8be		60		rts				rts
.a8bf						GCSignedCoordinatePair:
.a8bf		a2 01		ldx #$01			ldx 	#1
.a8c1		20 6d a2	jsr $a26d			jsr 	Evaluate16BitIntegerSigned
.a8c4		20 72 93	jsr $9372			jsr 	CheckComma
.a8c7		e8		inx				inx
.a8c8		20 6d a2	jsr $a26d			jsr 	Evaluate16BitIntegerSigned
.a8cb		60		rts				rts
.a8cc						_GCCPRange:
.a8cc		4c 60 a4	jmp $a460			jmp 	RangeError
.a8cf						GCLoadAXY:
.a8cf		ad ad 07	lda $07ad			lda 	gxXPos+1
.a8d2		ae ac 07	ldx $07ac			ldx 	gxXPos
.a8d5		ac ae 07	ldy $07ae			ldy 	gxYPos
.a8d8		60		rts				rts
.a8d9						GCCopyPairToStore:
.a8d9		a5 59		lda $59				lda 	NSMantissa0+1 				; copy it into space.
.a8db		8d ac 07	sta $07ac			sta 	gxXPos
.a8de		a5 61		lda $61				lda 	NSMantissa1+1
.a8e0		8d ad 07	sta $07ad			sta 	gxXPos+1
.a8e3		a5 5a		lda $5a				lda 	NSMantissa0+2
.a8e5		8d ae 07	sta $07ae			sta 	gxYPos
.a8e8		60		rts				rts
.07aa						gxCommandID:
>07aa								.fill 	1
.07ab						gxFillSolid:
>07ab								.fill 	1
.07ac						gxXPos:
>07ac								.fill 	2
.07ae						gxYPos:
>07ae								.fill 	1
.07af						gxHandler:
>07af								.fill 	2
.07b1						gxDrawScale:
>07b1								.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/graphics/gcontrol.asm

.a8e9						ResetBitmapSprites:
.a8e9		9c b2 07	stz $07b2			stz 	BitmapPageNumber
.a8ec		9c b3 07	stz $07b3			stz 	SpritePageNumber
.a8ef		60		rts				rts
.a8f0						BitmapCtrl:
.a8f0						BitmapCtrlLoop:
.a8f0		b1 30		lda ($30),y			lda 	(codePtr),y
.a8f2		c8		iny				iny
.a8f3		a2 01		ldx #$01			ldx 	#1
.a8f5		c9 cc		cmp #$cc			cmp 	#KWD_ON
.a8f7		f0 24		beq $a91d			beq 	BitmapSwitch
.a8f9		ca		dex				dex
.a8fa		c9 cb		cmp #$cb			cmp 	#KWD_OFF
.a8fc		f0 1f		beq $a91d			beq 	BitmapSwitch
.a8fe		c9 b8		cmp #$b8			cmp 	#KWD_AT  					; set address
.a900		f0 13		beq $a915			beq 	BitmapAddress
.a902		c9 bc		cmp #$bc			cmp 	#KWD_CLEAR
.a904		f0 02		beq $a908			beq 	BitmapClear
.a906		88		dey				dey
.a907		60		rts				rts
.a908						BitmapClear:
.a908		20 7e a2	jsr $a27e			jsr 	Evaluate8BitInteger 		; get the colour
.a90b		5a		phy				phy
.a90c		aa		tax				tax
.a90d		a9 06		lda #$06			lda 	#GCMD_Clear					; clear to that colour
.a90f		20 61 80	jsr $8061			jsr 	GXGraphicDraw
.a912		7a		ply				ply
.a913		80 db		bra $a8f0			bra 	BitmapCtrlLoop
.a915						BitmapAddress:
.a915		20 72 a9	jsr $a972			jsr 	GetPageNumber
.a918		8d b2 07	sta $07b2			sta 	BitmapPageNumber
.a91b		80 d3		bra $a8f0			bra 	BitmapCtrlLoop
.a91d						BitmapSwitch:
.a91d		5a		phy				phy
.a91e		ac b2 07	ldy $07b2			ldy 	BitmapPageNumber 			; gfx 1,on/off,0
.a921		a9 02		lda #$02			lda 	#GCMD_BitmapCtl
.a923		20 61 80	jsr $8061			jsr 	GXGraphicDraw
.a926		a9 08		lda #$08			lda 	#GCMD_Colour				; set colour to $FF
.a928		a0 00		ldy #$00			ldy 	#0
.a92a		a2 ff		ldx #$ff			ldx 	#$FF
.a92c		20 61 80	jsr $8061			jsr 	GXGraphicDraw
.a92f		9c ab 07	stz $07ab			stz 	gxFillSolid
.a932		9c ac 07	stz $07ac			stz 	gxXPos
.a935		9c ad 07	stz $07ad			stz 	gxXPos+1
.a938		9c ae 07	stz $07ae			stz 	gxYPos
.a93b		9c b1 07	stz $07b1			stz 	gxDrawScale
.a93e		a9 40		lda #$40			lda 	#GCMD_Move 						; home cursor
.a940		a2 00		ldx #$00			ldx 	#0
.a942		a0 00		ldy #$00			ldy 	#0
.a944		20 61 80	jsr $8061			jsr 	GXGraphicDraw
.a947		7a		ply				ply
.a948		80 a6		bra $a8f0			bra 	BitmapCtrlLoop
.a94a						SpritesCtrl:
.a94a						SpritesCtrlLoop:
.a94a		b1 30		lda ($30),y			lda 	(codePtr),y
.a94c		c8		iny				iny
.a94d		a2 01		ldx #$01			ldx 	#1
.a94f		c9 cc		cmp #$cc			cmp 	#KWD_ON
.a951		f0 13		beq $a966			beq 	SpriteSwitch
.a953		ca		dex				dex
.a954		c9 cb		cmp #$cb			cmp 	#KWD_OFF
.a956		f0 0e		beq $a966			beq 	SpriteSwitch
.a958		c9 b8		cmp #$b8			cmp 	#KWD_AT
.a95a		f0 02		beq $a95e			beq 	SpriteSetAddress
.a95c		88		dey				dey
.a95d		60		rts				rts
.a95e						SpriteSetAddress:
.a95e		20 72 a9	jsr $a972			jsr 	GetPageNumber
.a961		8d b3 07	sta $07b3			sta 	SpritePageNumber
.a964		80 e4		bra $a94a			bra 	SpritesCtrlLoop
.a966						SpriteSwitch:
.a966		5a		phy				phy
.a967		ac b3 07	ldy $07b3			ldy 	SpritePageNumber 			; gfx 2,on/off,0
.a96a		a9 04		lda #$04			lda 	#GCMD_SpriteCtl
.a96c		20 61 80	jsr $8061			jsr 	GXGraphicDraw
.a96f		7a		ply				ply
.a970		80 d8		bra $a94a			bra 	SpritesCtrlLoop
.a972						GetPageNumber:
.a972		a2 00		ldx #$00			ldx 	#0
.a974		20 58 a2	jsr $a258			jsr 	EvaluateUnsignedInteger 	; evaluate where to go.
.a977		a5 60		lda $60				lda 	NSMantissa1 				; check on page
.a979		29 1f		and #$1f			and 	#$1F
.a97b		05 58		ora $58				ora 	NSMantissa0
.a97d		d0 0c		bne $a98b			bne 	_GPNError
.a97f		a5 68		lda $68				lda 	NSMantissa2
.a981		06 60		asl $60				asl 	NSMantissa1					; get page number
.a983		2a		rol a				rol 	a
.a984		06 60		asl $60				asl 	NSMantissa1
.a986		2a		rol a				rol 	a
.a987		06 60		asl $60				asl 	NSMantissa1
.a989		2a		rol a				rol 	a
.a98a		60		rts				rts
.a98b						_GPNError:
.a98b		a9 07		lda #$07		lda	#7
.a98d		4c 83 93	jmp $9383		jmp	ErrorHandler
.07b2						BitmapPageNumber:
>07b2								.fill 	1
.07b3						SpritePageNumber:
>07b3								.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/graphics/gfx.asm

.a990						GfxCommand:
.a990		a2 00		ldx #$00			ldx 	#0
.a992		20 7e a2	jsr $a27e			jsr 	Evaluate8BitInteger 		; command
.a995		20 72 93	jsr $9372			jsr 	CheckComma
.a998		e8		inx				inx
.a999		20 63 a2	jsr $a263			jsr 	Evaluate16BitInteger 		; X
.a99c		20 72 93	jsr $9372			jsr 	CheckComma
.a99f		e8		inx				inx
.a9a0		20 7e a2	jsr $a27e			jsr 	Evaluate8BitInteger 		; Y
.a9a3		a5 61		lda $61				lda 	NSMantissa1+1  				; shift bit 0 of X into CS, should now be zero
.a9a5		4a		lsr a				lsr 	a
.a9a6		d0 12		bne $a9ba			bne 	_GfxError
.a9a8		26 58		rol $58				rol 	NSMantissa0 				; rotate into command
.a9aa		b0 0e		bcs $a9ba			bcs 	_GfxError 					; bit 7 should have been zero
.a9ac		5a		phy				phy 								; save pos
.a9ad		a5 58		lda $58				lda 	NSMantissa0 				; do the command
.a9af		a6 59		ldx $59				ldx 	NSMantissa0+1
.a9b1		a4 5a		ldy $5a				ldy 	NSMantissa0+2
.a9b3		20 61 80	jsr $8061			jsr 	GXGraphicDraw
.a9b6		b0 02		bcs $a9ba			bcs 	_GfxError
.a9b8		7a		ply				ply 								; restore pos and exit.
.a9b9		60		rts				rts
.a9ba						_GfxError:
.a9ba		4c 60 a4	jmp $a460			jmp 	RangeError

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/graphics/hit.asm

.a9bd						UnaryHit:
.a9bd		fa		plx				plx
.a9be		a9 36		lda #$36			lda 	#zTemp0
.a9c0		20 7e a2	jsr $a27e			jsr 	Evaluate8BitInteger 		; get sprite number 0
.a9c3		20 72 93	jsr $9372			jsr 	CheckComma
.a9c6		e8		inx				inx
.a9c7		20 7e a2	jsr $a27e			jsr 	Evaluate8BitInteger 		; get sprite number 1
.a9ca		20 6a 93	jsr $936a			jsr		CheckRightBracket
.a9cd		ca		dex				dex 								; fix back up again.
.a9ce		da		phx				phx 								; save X/Y
.a9cf		5a		phy				phy
.a9d0		b4 59		ldy $59,x			ldy 	NSMantissa0+1,x 			; get the sprite numbers into X/Y
.a9d2		b5 58		lda $58,x			lda 	NSMantissa0,x
.a9d4		aa		tax				tax
.a9d5		a9 12		lda #$12			lda 	#GCMD_SpriteCollide 		; command check collision.
.a9d7		20 61 80	jsr $8061			jsr 	GXGraphicDraw 				; calculate result
.a9da		1a		inc a				inc 	a 							; so 255 (fail) -> 0, otherwise 1,2,3,4 pixels etc.
.a9db		7a		ply				ply 								; restore XY
.a9dc		fa		plx				plx
.a9dd		20 e5 a2	jsr $a2e5			jsr 	NSMSetByte 					; return the hit result
.a9e0		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/graphics/palette.asm

.a9e1						PaletteCommand:
.a9e1		a2 00		ldx #$00			ldx 	#0
.a9e3		20 7e a2	jsr $a27e			jsr 	Evaluate8BitInteger 		; colour
.a9e6		20 72 93	jsr $9372			jsr 	CheckComma
.a9e9		e8		inx				inx
.a9ea		20 63 a2	jsr $a263			jsr 	Evaluate16BitInteger 		; r
.a9ed		20 72 93	jsr $9372			jsr 	CheckComma
.a9f0		e8		inx				inx
.a9f1		20 7e a2	jsr $a27e			jsr 	Evaluate8BitInteger 		; g
.a9f4		20 72 93	jsr $9372			jsr 	CheckComma
.a9f7		e8		inx				inx
.a9f8		20 7e a2	jsr $a27e			jsr 	Evaluate8BitInteger 		; b
.a9fb		a5 58		lda $58				lda 	NSMantissa0 				; get colour #
.a9fd		85 36		sta $36				sta 	zTemp0
.a9ff		a9 34		lda #$34			lda 	#$D0 >> 2 					; MSB = D0/4
.aa01		85 37		sta $37				sta 	zTemp0+1
.aa03		06 36		asl $36				asl 	zTemp0 						; zTemp = $D000+Colour x 4
.aa05		26 37		rol $37				rol	 	zTemp0+1
.aa07		06 36		asl $36				asl 	zTemp0
.aa09		26 37		rol $37				rol	 	zTemp0+1
.aa0b		a9 01		lda #$01			lda 	#1 							; I/O Page 2
.aa0d		85 01		sta $01				sta 	1
.aa0f		5a		phy				phy
.aa10		a5 5b		lda $5b				lda 	NSMantissa0+3 				; fix to r,g,b
.aa12		92 36		sta ($36)			sta 	(zTemp0)
.aa14		a0 01		ldy #$01			ldy 	#1
.aa16		a5 5a		lda $5a				lda 	NSMantissa0+2
.aa18		91 36		sta ($36),y			sta 	(zTemp0),y
.aa1a		a5 59		lda $59				lda 	NSMantissa0+1
.aa1c		c8		iny				iny
.aa1d		91 36		sta ($36),y			sta 	(zTemp0),y
.aa1f		7a		ply				ply
.aa20		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/hardware/cls.asm

.aa21						ClearScreen:
.aa21		5a		phy				phy
.aa22		a9 0c		lda #$0c			lda 	#12 						; char code 12 clears the screen.
.aa24		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.aa27		7a		ply				ply
.aa28		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/kernel/commands/crossdev.asm

.aa29						XLoadCommand:
.aa29		20 d4 8d	jsr $8dd4			jsr 	NewProgram
.aa2c		20 06 87	jsr $8706			jsr 	BackloadProgram
.aa2f		4c ee 87	jmp $87ee			jmp 	WarmStart
.aa32						XGoCommand:
.aa32		20 d4 8d	jsr $8dd4			jsr 	NewProgram
.aa35		20 06 87	jsr $8706			jsr 	BackloadProgram
.aa38		4c 5f 8f	jmp $8f5f			jmp 	RunCurrentProgram

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/kernel/commands/dos.asm

.aa3b						BootDOS:
.aa3b		a9 49		lda #$49	            lda     #dosName & $FF
.aa3d		85 fb		sta $fb		            sta     kernel.args.buf+0
.aa3f		a9 aa		lda #$aa	            lda     #dosName >> 8
.aa41		85 fc		sta $fc		            sta     kernel.args.buf+1
.aa43		20 18 ff	jsr $ff18	            jsr     kernel.RunNamed
.aa46		4c ee 87	jmp $87ee	            jmp 	WarmStart
>aa49		44 4f 53 00			dosName:	.text 	"DOS",0

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/kernel/commands/event.asm

.aa4d						UnaryEvent:
.aa4d		fa		plx				plx
.aa4e		20 db b0	jsr $b0db			jsr 	TimerToStackX 				; timer in +0
.aa51		e8		inx				inx  								; put reference into +1
.aa52		20 d7 9c	jsr $9cd7			jsr 	EvaluateTerm
.aa55		b5 50		lda $50,x			lda 	NSStatus,x 					; check if is integer reference
.aa57		c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.aa59		d0 4c		bne $aaa7			bne 	_UEType
.aa5b		e8		inx				inx 								; put the step in +2
.aa5c		20 72 93	jsr $9372			jsr 	CheckComma
.aa5f		20 63 a2	jsr $a263			jsr 	Evaluate16BitInteger
.aa62		20 6a 93	jsr $936a			jsr 	CheckRightBracket
.aa65		ca		dex				dex
.aa66		ca		dex				dex
.aa67		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; copy reference to zTemp0
.aa69		85 36		sta $36				sta 	zTemp0
.aa6b		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.aa6d		85 37		sta $37				sta 	zTemp0+1
.aa6f		5a		phy				phy
.aa70		a0 03		ldy #$03			ldy 	#3 							; check bit 7 of last bit, the packed sign bit
.aa72		b1 36		lda ($36),y			lda 	(zTemp0),y
.aa74		30 2d		bmi $aaa3			bmi 	_UEFalse 					; exit if signed.
.aa76		a0 00		ldy #$00			ldy 	#0 							; has it timed out (24 bit)
.aa78		b5 58		lda $58,x			lda 	NSMantissa0,x
.aa7a		d1 36		cmp ($36),y			cmp 	(zTemp0),y
.aa7c		c8		iny				iny
.aa7d		b5 60		lda $60,x			lda 	NSMantissa1,x
.aa7f		f1 36		sbc ($36),y			sbc		(zTemp0),y
.aa81		c8		iny				iny
.aa82		b5 68		lda $68,x			lda 	NSMantissa2,x
.aa84		f1 36		sbc ($36),y			sbc		(zTemp0),y
.aa86		90 1b		bcc $aaa3			bcc 	_UEFalse 					; no, return FALSE.
.aa88		18		clc				clc
.aa89		a0 00		ldy #$00			ldy 	#0 							; work out new value as timer() + step
.aa8b		b5 58		lda $58,x			lda 	NSMantissa0,x
.aa8d		75 5a		adc $5a,x			adc 	NSMantissa0+2,x
.aa8f		91 36		sta ($36),y			sta 	(zTemp0),y
.aa91		c8		iny				iny
.aa92		b5 60		lda $60,x			lda 	NSMantissa1,x
.aa94		75 62		adc $62,x			adc 	NSMantissa1+2,x
.aa96		91 36		sta ($36),y			sta 	(zTemp0),y
.aa98		c8		iny				iny
.aa99		b5 68		lda $68,x			lda 	NSMantissa2,x
.aa9b		75 6a		adc $6a,x			adc 	NSMantissa2+2,x
.aa9d		91 36		sta ($36),y			sta 	(zTemp0),y
.aa9f		7a		ply				ply
.aaa0		4c f6 93	jmp $93f6			jmp 	ReturnTrue
.aaa3						_UEFalse:
.aaa3		7a		ply				ply 								; restore Y
.aaa4		4c 01 94	jmp $9401			jmp 	ReturnFalse 				; and return False
.aaa7						_UEType:
.aaa7		4c 65 a4	jmp $a465			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/kernel/commands/files/bload.asm

.aaaa						Command_BLoad:
.aaaa		20 b5 aa	jsr $aab5			jsr 	BLOADHandler
.aaad		c9 00		cmp #$00			cmp 	#0
.aaaf		d0 01		bne $aab2			bne 	_BLError
.aab1		60		rts				rts
.aab2						_BLError:
.aab2		4c 04 ad	jmp $ad04			jmp 	CLErrorHandler
.aab5						BLOADHandler:
.aab5		a2 00		ldx #$00			ldx 	#0
.aab7		20 3b a2	jsr $a23b			jsr 	EvaluateString 				; file name to load
.aaba		20 72 93	jsr $9372			jsr 	CheckComma 					; consume comma
.aabd		e8		inx				inx
.aabe		20 50 a2	jsr $a250			jsr 	EvaluateInteger 			; load address (full physical address)
.aac1		5a		phy				phy
.aac2		a5 58		lda $58				lda 	NSMantissa0					; file name -> XA
.aac4		a6 60		ldx $60				ldx 	NSMantissa1
.aac6		20 b6 83	jsr $83b6			jsr 	KNLOpenFileRead 			; open file for reading
.aac9		b0 50		bcs $ab1b			bcs 	_BLErrorExit 				; error, so fail.
.aacb		8d b8 07	sta $07b8			sta 	BasicFileStream 			; save the reading stream.
.aace		a2 01		ldx #$01			ldx 	#1 							; address is in slot # 1
.aad0		20 1d ab	jsr $ab1d			jsr 	BLOpenPhysicalMemory 		; open for access.
.aad3						_BLReadFile:
.aad3		ad b8 07	lda $07b8			lda 	BasicFileStream
.aad6		a2 40		ldx #$40			ldx     #KNLReadBufferLen 			; set bytes to read.
.aad8		20 0b 84	jsr $840b			jsr 	KNLReadBlock 				; read next block
.aadb		b0 22		bcs $aaff			bcs 	_BLFileError 				; file error, which might be EOF.
.aadd		c9 00		cmp #$00			cmp 	#0 							; read nothing.
.aadf		f0 f2		beq $aad3			beq 	_BLReadFile
.aae1		8d b6 07	sta $07b6			sta 	BLCopyCounter 				; counter.
.aae4		ac b5 07	ldy $07b5			ldy 	BLYOffset 					; copy the buffer out here
.aae7		a2 00		ldx #$00			ldx 	#0 							; offset in buffer.
.aae9						_BLCopyLoop:
.aae9		bd 9a 06	lda $069a,x			lda 	KNLReadBuffer,x 			; copy byte and advance
.aaec		91 3a		sta ($3a),y			sta 	(zTemp2),y
.aaee		c8		iny				iny
.aaef		d0 03		bne $aaf4			bne 	_BLNoAdjust 				; check changed 256 byte or 8k page.
.aaf1		20 45 ab	jsr $ab45			jsr 	BLAdvancePhysicalMemory
.aaf4						_BLNoAdjust:
.aaf4		e8		inx				inx
.aaf5		ce b6 07	dec $07b6			dec 	BLCopyCounter
.aaf8		d0 ef		bne $aae9			bne 	_BLCopyLoop
.aafa		8c b5 07	sty $07b5			sty 	BLYOffset 					; update Y offset
.aafd		80 d4		bra $aad3			bra 	_BLReadFile 				; go ask for more.
.aaff						_BLFileError:
.aaff		c9 30		cmp #$30			cmp 	#KERR_EOF 					; End of file
.ab01		d0 0d		bne $ab10			bne 	_BLErrorHandler				; no, it's an actual error
.ab03		20 3f ab	jsr $ab3f			jsr 	BLClosePhysicalMemory 		; close the access.
.ab06		ad b8 07	lda $07b8			lda 	BasicFileStream 			; close the file
.ab09		20 80 84	jsr $8480			jsr 	KNLCloseFile
.ab0c		a9 00		lda #$00			lda 	#0 							; and return zero.
.ab0e		7a		ply				ply
.ab0f		60		rts				rts
.ab10						_BLErrorHandler:
.ab10		48		pha				pha 								; save code
.ab11		20 3f ab	jsr $ab3f			jsr 	BLClosePhysicalMemory 		; close access
.ab14		ad b8 07	lda $07b8			lda 	BasicFileStream 			; close the open file
.ab17		20 80 84	jsr $8480			jsr 	KNLCloseFile
.ab1a		68		pla				pla 								; get error code
.ab1b						_BLErrorExit:
.ab1b		7a		ply				ply 								; restore position and exit.
.ab1c		60		rts				rts
=3						BLAccessPage = 3 							; page to use for actual memory.
.ab1d						BLOpenPhysicalMemory:
.ab1d		a5 0b		lda $0b				lda 	BLAccessPage+8 				; save current mapping
.ab1f		8d b4 07	sta $07b4			sta 	BLNormalMapping
.ab22		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy address, 13 bit adjusted for page -> (zTemp2),BLYOffset
.ab24		8d b5 07	sta $07b5			sta 	BLYOffset 					; zTemp2 0 is *always* zero.
.ab27		64 3a		stz $3a				stz 	zTemp2
.ab29		b5 60		lda $60,x			lda 	NSMantissa1,x
.ab2b		29 1f		and #$1f			and 	#$1F
.ab2d		09 60		ora #$60			ora 	#BLAccessPage << 5
.ab2f		85 3b		sta $3b				sta 	zTemp2+1
.ab31		b5 68		lda $68,x			lda 	NSMantissa2,x 				; shift M2:M1 right 3 times to give page # required
.ab33		16 60		asl $60,x			asl 	NSMantissa1,x
.ab35		2a		rol a				rol 	a
.ab36		16 60		asl $60,x			asl 	NSMantissa1,x
.ab38		2a		rol a				rol 	a
.ab39		16 60		asl $60,x			asl 	NSMantissa1,x
.ab3b		2a		rol a				rol 	a
.ab3c		85 0b		sta $0b				sta 	BLAccessPage+8 				; access that page
.ab3e		60		rts				rts
.ab3f						BLClosePhysicalMemory:
.ab3f		ad b4 07	lda $07b4			lda 	BLNormalMapping
.ab42		85 0b		sta $0b				sta 	BLAccessPage+8
.ab44		60		rts				rts
.ab45						BLAdvancePhysicalMemory:
.ab45		48		pha				pha
.ab46		e6 3b		inc $3b				inc		zTemp2+1 					; bump MSB
.ab48		a5 3b		lda $3b				lda 	zTemp2+1
.ab4a		c9 80		cmp #$80			cmp 	#(BLAccessPage+1) << 5 		; reached next page ?
.ab4c		d0 06		bne $ab54			bne 	_BLAPMExit 					; (e.g. end of the mapped page.)
.ab4e		e6 0b		inc $0b				inc 	BLAccessPage+8 				; next physical page
.ab50		a9 60		lda #$60			lda 	#BLAccessPage << 5 			; page back to start of transfer page
.ab52		85 3b		sta $3b				sta 	zTemp2+1
.ab54						_BLAPMExit:
.ab54		68		pla				pla
.ab55		60		rts				rts
.07b4						BLNormalMapping:
>07b4								.fill 	1
.07b5						BLYOffset:
>07b5								.fill 	1
.07b6						BLCopyCounter:
>07b6								.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/kernel/commands/files/bsave.asm

.ab56						Command_BSave:
.ab56		20 61 ab	jsr $ab61			jsr 	BSaveHandler
.ab59		c9 00		cmp #$00			cmp 	#0
.ab5b		d0 01		bne $ab5e			bne 	_BSError
.ab5d		60		rts				rts
.ab5e						_BSError:
.ab5e		4c 04 ad	jmp $ad04			jmp 	CLErrorHandler
.ab61						BSaveHandler:
.ab61		a2 00		ldx #$00			ldx 	#0
.ab63		20 3b a2	jsr $a23b			jsr 	EvaluateString 				; file name to load
.ab66		20 72 93	jsr $9372			jsr 	CheckComma 					; consume comma
.ab69		e8		inx				inx
.ab6a		20 50 a2	jsr $a250			jsr 	EvaluateInteger 			; load address (full physical address)
.ab6d		20 72 93	jsr $9372			jsr 	CheckComma 					; consume comma
.ab70		e8		inx				inx
.ab71		20 50 a2	jsr $a250			jsr 	EvaluateInteger 			; data length (3 bytes only)
.ab74		5a		phy				phy
.ab75		a5 58		lda $58				lda 	NSMantissa0					; file name -> XA
.ab77		a6 60		ldx $60				ldx 	NSMantissa1
.ab79		20 b1 83	jsr $83b1			jsr 	KNLOpenFileWrite 			; open file for reading
.ab7c		b0 47		bcs $abc5			bcs 	_BSErrorExit 				; error, so fail.
.ab7e		8d b8 07	sta $07b8			sta 	BasicFileStream 			; save the reading stream.
.ab81		a2 01		ldx #$01			ldx 	#1 							; address is in slot # 1
.ab83		20 1d ab	jsr $ab1d			jsr 	BLOpenPhysicalMemory 		; open for access.
.ab86		a2 00		ldx #$00			ldx 	#0 							; number of bytes in kernel buffer
.ab88		ac b5 07	ldy $07b5			ldy 	BLYOffset 					; used for data offset.
.ab8b						_BSWriteToFileLoop:
.ab8b		38		sec				sec 								; pre decrement count.
.ab8c		a5 5a		lda $5a				lda 	NSMantissa0+2
.ab8e		e9 01		sbc #$01			sbc 	#1
.ab90		85 5a		sta $5a				sta 	NSMantissa0+2
.ab92		a5 62		lda $62				lda 	NSMantissa1+2
.ab94		e9 00		sbc #$00			sbc 	#0
.ab96		85 62		sta $62				sta 	NSMantissa1+2
.ab98		a5 6a		lda $6a				lda 	NSMantissa2+2
.ab9a		e9 00		sbc #$00			sbc 	#0
.ab9c		85 6a		sta $6a				sta 	NSMantissa2+2
.ab9e		30 15		bmi $abb5			bmi 	_BSFileComplete 			; undercounted, so exit.
.aba0		b1 3a		lda ($3a),y			lda 	(zTemp2),y 					; get byte to save
.aba2		9d 9a 06	sta $069a,x			sta 	KNLReadBuffer,x 			; save in the buffer and bump buffer index
.aba5		e8		inx				inx
.aba6		c8		iny				iny 								; next byte
.aba7		d0 03		bne $abac			bne 	_BSNoCheck
.aba9		20 45 ab	jsr $ab45			jsr 	BLAdvancePhysicalMemory 	; check not gone to next page.
.abac						_BSNoCheck:
.abac		e0 40		cpx #$40			cpx 	#KNLReadBufferLen 			; done the whole buffer
.abae		d0 db		bne $ab8b			bne 	_BSWriteToFileLoop 			; no , do the next byte.
.abb0		20 c7 ab	jsr $abc7			jsr 	BSFlushBuffer 				; yes, flush the buffer
.abb3		80 d6		bra $ab8b			bra 	_BSWriteToFileLoop 			; and keep on going
.abb5						_BSFileComplete:
.abb5		20 c7 ab	jsr $abc7			jsr 	BSFlushBuffer 				; write the buffer remainder.
.abb8		20 3f ab	jsr $ab3f			jsr 	BLClosePhysicalMemory 		; close the access.
.abbb		ad b8 07	lda $07b8			lda 	BasicFileStream 			; close the file
.abbe		20 80 84	jsr $8480			jsr 	KNLCloseFile
.abc1		a9 00		lda #$00			lda 	#0
.abc3		7a		ply				ply
.abc4		60		rts				rts
.abc5						_BSErrorExit:
.abc5		7a		ply				ply
.abc6		60		rts				rts
.abc7						BSFlushBuffer:
.abc7		e0 00		cpx #$00			cpx 	#0 							; buffer empty ?
.abc9		f0 0d		beq $abd8			beq 	_BSFBExit 					; if so, exit.
.abcb		a9 9a		lda #$9a			lda 	#KNLReadBuffer & $FF 		; where to write from.
.abcd		85 36		sta $36				sta 	zTemp0
.abcf		a9 06		lda #$06			lda 	#KNLReadBuffer >> 8
.abd1		85 37		sta $37				sta 	zTemp0+1 					; # of bytes in X
.abd3		20 c3 ad	jsr $adc3			jsr 	CLWriteByteBlock 			; write it.
.abd6		a2 00		ldx #$00			ldx 	#0 							; buffer is empty.
.abd8						_BSFBExit:
.abd8		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/kernel/commands/files/dir.asm

.abd9						Command_Dir:
.abd9		ad 9a 07	lda $079a			lda     KNLDefaultDrive				; set drive to list.
.abdc		85 f3		sta $f3				sta     kernel.args.directory.open.drive
.abde		64 fd		stz $fd				stz     kernel.args.directory.open.path_len
.abe0		20 74 ff	jsr $ff74			jsr     kernel.Directory.Open
.abe3		b0 4f		bcs $ac34			bcs     _CDExit
.abe5						_CDEventLoop:
.abe5		20 0c ff	jsr $ff0c			jsr     kernel.Yield        		; Polite, not actually needed.
.abe8		20 6d 82	jsr $826d			jsr     GetNextEvent
.abeb		b0 f8		bcs $abe5			bcs     _CDEventLoop
.abed		ad 9b 07	lda $079b			lda     KNLEvent.type
.abf0		c9 44		cmp #$44			cmp     #kernel.event.directory.CLOSED
.abf2		f0 40		beq $ac34			beq    	_CDExit
.abf4		20 f9 ab	jsr $abf9			jsr     _CDMessages 				; handle various messages
.abf7		80 ec		bra $abe5			bra     _CDEventLoop
.abf9						_CDMessages:
.abf9		c9 3a		cmp #$3a			cmp     #kernel.event.directory.OPENED
.abfb		f0 15		beq $ac12			beq     _CDEVRead
.abfd		c9 3c		cmp #$3c			cmp     #kernel.event.directory.VOLUME
.abff		f0 19		beq $ac1a			beq     _CDEVVolume
.ac01		c9 3e		cmp #$3e			cmp     #kernel.event.directory.FILE
.ac03		f0 32		beq $ac37			beq     _CDEVFile
.ac05		c9 40		cmp #$40			cmp     #kernel.event.directory.FREE
.ac07		f0 70		beq $ac79			beq     _CDEVFree
.ac09		c9 42		cmp #$42			cmp     #kernel.event.directory.EOF
.ac0b		f0 6e		beq $ac7b			beq     _CDEVEOF
.ac0d		c9 46		cmp #$46			cmp     #kernel.event.directory.ERROR
.ac0f		f0 6a		beq $ac7b			beq     _CDEVEOF
.ac11		60		rts				rts
.ac12						_CDEVRead:
.ac12		ad 9e 07	lda $079e			lda     KNLEvent.directory.stream
.ac15		85 f3		sta $f3				sta     kernel.args.directory.read.stream
.ac17		4c 78 ff	jmp $ff78			jmp     kernel.Directory.Read
.ac1a						_CDEVVolume:
.ac1a		a9 5b		lda #$5b			lda 	#"["
.ac1c		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.ac1f		ad a0 07	lda $07a0			lda     KNLEvent.directory.volume.len
.ac22		20 83 ac	jsr $ac83			jsr     _CDReadData
.ac25		20 e2 93	jsr $93e2			jsr 	PrintStringXA
.ac28		a9 5d		lda #$5d			lda 	#"]"
.ac2a		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.ac2d		a9 0d		lda #$0d			lda 	#13
.ac2f		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.ac32		80 de		bra $ac12			bra     _CDEVRead
.ac34						_CDExit:
.ac34		4c ee 87	jmp $87ee			jmp 	WarmStart
.ac37						_CDEVFile:
.ac37		a9 20		lda #$20			lda 	#32
.ac39		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.ac3c		ad a0 07	lda $07a0			lda     KNLEvent.directory.file.len
.ac3f		48		pha				pha
.ac40		20 83 ac	jsr $ac83			jsr     _CDReadData
.ac43		20 e2 93	jsr $93e2			jsr 	PrintStringXA
.ac46		68		pla				pla
.ac47		49 ff		eor #$ff			eor 	#$FF
.ac49		38		sec				sec
.ac4a		69 10		adc #$10			adc 	#16
.ac4c		aa		tax				tax
.ac4d						_CDEVTab:
.ac4d		a9 20		lda #$20			lda 	#32
.ac4f		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.ac52		ca		dex				dex
.ac53		10 f8		bpl $ac4d			bpl 	_CDEVTab
.ac55		20 9a ac	jsr $ac9a			jsr 	_CDReadExtended
.ac58		ad 26 05	lda $0526			lda 	lineBuffer
.ac5b		ae 27 05	ldx $0527			ldx 	lineBuffer+1
.ac5e		20 f8 97	jsr $97f8			jsr 	ConvertInt16
.ac61		20 e2 93	jsr $93e2			jsr 	PrintStringXA
.ac64		a2 ac		ldx #$ac			ldx 	#_CDEVFMessage >> 8
.ac66		a9 6d		lda #$6d			lda 	#_CDEVFMessage & $FF
.ac68		20 e2 93	jsr $93e2			jsr 	PrintStringXA
.ac6b		80 a5		bra $ac12			bra     _CDEVRead
.ac6d						_CDEVFMessage:
>ac6d		20 62 6c 6f 63 6b 28 73				.text 	" block(s).",13,0
>ac75		29 2e 0d 00
.ac79						_CDEVFree:
.ac79		80 00		bra $ac7b			bra     _CDEVEOF
.ac7b						_CDEVEOF:
.ac7b		ad 9e 07	lda $079e			lda     KNLEvent.directory.stream
.ac7e		85 f3		sta $f3				sta     kernel.args.directory.close.stream
.ac80		4c 7c ff	jmp $ff7c			jmp     kernel.Directory.Close
.ac83						_CDReadData:
.ac83		85 fd		sta $fd				sta     kernel.args.recv.buflen
.ac85		a9 26		lda #$26			lda     #lineBuffer & $FF
.ac87		85 fb		sta $fb				sta     kernel.args.recv.buf+0
.ac89		a9 05		lda #$05			lda     #lineBuffer >> 8
.ac8b		85 fc		sta $fc				sta     kernel.args.recv.buf+1
.ac8d		20 04 ff	jsr $ff04			jsr     kernel.ReadData
.ac90		a6 fd		ldx $fd				ldx     kernel.args.recv.buflen
.ac92		9e 26 05	stz $0526,x			stz     lineBuffer,x
.ac95		a9 26		lda #$26			lda 	#lineBuffer & $FF
.ac97		a2 05		ldx #$05			ldx 	#lineBuffer >> 8
.ac99		60		rts				rts
.ac9a						_CDReadExtended:
.ac9a		a9 02		lda #$02			lda     #2
.ac9c		85 fd		sta $fd				sta     kernel.args.recv.buflen
.ac9e		a9 26		lda #$26			lda     #lineBuffer & $FF
.aca0		85 fb		sta $fb				sta     kernel.args.recv.buf+0
.aca2		a9 05		lda #$05			lda     #lineBuffer >> 8
.aca4		85 fc		sta $fc				sta     kernel.args.recv.buf+1
.aca6		4c 08 ff	jmp $ff08			jmp     kernel.ReadExt

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/kernel/commands/files/drive.asm

.aca9						Command_Drive:
.aca9		20 7e a2	jsr $a27e			jsr 	Evaluate8BitInteger
.acac		20 ad 83	jsr $83ad			jsr 	KNLSetDrive
.acaf		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/kernel/commands/files/load.asm

.acb0						Command_Load:
.acb0		20 b6 ac	jsr $acb6			jsr 	LoadFile
.acb3		4c ee 87	jmp $87ee			jmp 	WarmStart
.acb6						LoadFile:
.acb6		20 3b a2	jsr $a23b			jsr 	EvaluateString 				; file name to load
.acb9		a6 37		ldx $37				ldx 	zTemp0+1					; zTemp0 -> XA
.acbb		a5 36		lda $36				lda 	zTemp0
.acbd		20 b6 83	jsr $83b6			jsr 	KNLOpenFileRead 			; open file for reading
.acc0		b0 42		bcs $ad04			bcs 	CLErrorHandler 				; error, so fail.
.acc2		8d b8 07	sta $07b8			sta 	BasicFileStream 			; save the reading stream.
.acc5		20 54 ad	jsr $ad54			jsr     LoadReadByteInit            ; Init reader with the stream
.acc8		20 d4 8d	jsr $8dd4			jsr 	NewProgram 					; does the actual NEW.
.accb		9c b7 07	stz $07b7			stz 	LoadEOFFlag 				; clear EOF Flag.
.acce						_CLLoop:
.acce		20 12 ad	jsr $ad12			jsr 	LoadReadLine 				; get next line.
.acd1		f0 10		beq $ace3			beq 	_CLExit 					; end, exit.
.acd3		20 89 80	jsr $8089			jsr 	TKTokeniseLine 				; tokenise the line.
.acd6		ad 27 04	lda $0427			lda 	tokenLineNumber 			; line number = 0
.acd9		0d 28 04	ora $0428			ora 	tokenLineNumber+1
.acdc		f0 f0		beq $acce			beq 	_CLLoop 					; not legal code, blank line or maybe a comment.
.acde		20 c9 87	jsr $87c9			jsr 	EditProgramCode 			; do the editing etc.
.ace1		80 eb		bra $acce			bra 	_CLLoop
.ace3						_CLExit:
.ace3		ad b8 07	lda $07b8			lda 	BasicFileStream
.ace6		20 80 84	jsr $8480			jsr 	KNLCloseFile
.ace9						CLComplete:
.ace9		a9 f1		lda #$f1			lda 	#_CLCMsg & $FF
.aceb		a2 ac		ldx #$ac			ldx 	#_CLCMsg >> 8
.aced		20 e2 93	jsr $93e2			jsr 	PrintStringXA
.acf0		60		rts				rts
.acf1						_CLCMsg:
>acf1		43 6f 6d 70 6c 65 74 65				.text 	"Complete.",13,0
>acf9		2e 0d 00
.acfc						CLCloseError:
.acfc		48		pha				pha
.acfd		ad b8 07	lda $07b8			lda 	BasicFileStream
.ad00		20 80 84	jsr $8480			jsr 	KNLCloseFile
.ad03		68		pla				pla
.ad04						CLErrorHandler:
.ad04		c9 28		cmp #$28			cmp 	#KERR_NOTFOUND
.ad06		f0 05		beq $ad0d			beq 	_CLEHNotFound
.ad08		a9 1a		lda #$1a		lda	#26
.ad0a		4c 83 93	jmp $9383		jmp	ErrorHandler
.ad0d						_CLEHNotFound:
.ad0d		a9 19		lda #$19		lda	#25
.ad0f		4c 83 93	jmp $9383		jmp	ErrorHandler
.ad12						LoadReadLine:
.ad12		a2 00		ldx #$00			ldx 	#0 							; look for first character non space/ctl
.ad14		20 2e ad	jsr $ad2e			jsr 	LoadReadCharacter
.ad17		f0 14		beq $ad2d			beq 	_LRLExit 					; eof ?
.ad19		c9 21		cmp #$21			cmp 	#' '+1 						; space control tab skip
.ad1b		90 f5		bcc $ad12			bcc 	LoadReadLine
.ad1d						_LRLLoop:
.ad1d		9d 26 05	sta $0526,x			sta 	lineBuffer,x 				; write into line buffer
.ad20		9e 27 05	stz $0527,x			stz 	lineBuffer+1,x 				; make ASCIIZ
.ad23		e8		inx				inx
.ad24		20 2e ad	jsr $ad2e			jsr 	LoadReadCharacter 			; next line
.ad27		c9 20		cmp #$20			cmp 	#32 						; until < space ctrl/eof.
.ad29		b0 f2		bcs $ad1d			bcs 	_LRLLoop
.ad2b		a9 01		lda #$01			lda 	#1 							; return code 1, okay.
.ad2d						_LRLExit:
.ad2d		60		rts				rts
.ad2e						LoadReadCharacter:
.ad2e		da		phx				phx
.ad2f		5a		phy				phy
.ad30		ad b7 07	lda $07b7			lda 	LoadEOFFlag 				; already done EOF.
.ad33		d0 0c		bne $ad41			bne 	_LRCIsEOF
.ad35		20 5e ad	jsr $ad5e			jsr 	LoadReadByte 				; read a byte
.ad38		90 09		bcc $ad43			bcc		_LRCExit 					; read okay.
.ad3a		c9 30		cmp #$30			cmp 	#KERR_EOF 					; if error not EOF it's an actual error.
.ad3c		d0 be		bne $acfc			bne 	CLCloseError
.ad3e		ce b7 07	dec $07b7			dec 	LoadEOFFlag
.ad41						_LRCIsEOF:
.ad41		a9 00		lda #$00			lda 	#0
.ad43						_LRCExit:
.ad43		c9 09		cmp #$09			cmp 	#9 							; convert tab to space
.ad45		d0 02		bne $ad49			bne 	_LRCNotTab
.ad47		a9 20		lda #$20			lda 	#' '
.ad49						_LRCNotTab:
.ad49		c9 0a		cmp #$0a			cmp 	#$0A
.ad4b		d0 02		bne $ad4f			bne 	_LRCNotLF
.ad4d		a9 0d		lda #$0d			lda 	#$0D
.ad4f						_LRCNotLF:
.ad4f		7a		ply				ply
.ad50		fa		plx				plx
.ad51		c9 00		cmp #$00			cmp 	#0 							; set Z flag if EOF.
.ad53		60		rts				rts
.ad54						LoadReadByteInit:
.ad54		8d b9 07	sta $07b9			sta     LoadFileStream 				; save stream
.ad57		9c ba 07	stz $07ba			stz     LoadNextCharacter 			; reset buffer
.ad5a		9c bb 07	stz $07bb			stz     LoadEndCharacter
.ad5d		60		rts				rts
.ad5e						LoadReadByte:
.ad5e		da		phx				phx
.ad5f		ae ba 07	ldx $07ba			ldx     LoadNextCharacter 					; all data consumed ?
.ad62		ec bb 07	cpx $07bb			cpx     LoadEndCharacter
.ad65		d0 12		bne $ad79			bne     _KNLRBGetNextByte
.ad67		ad b9 07	lda $07b9			lda     LoadFileStream
.ad6a		a2 40		ldx #$40			ldx     #KNLReadBufferLen 			; set bytes to read.
.ad6c		20 0b 84	jsr $840b			jsr     KNLReadBlock 				; read next chunk from the stream
.ad6f		b0 0f		bcs $ad80			bcs     _KNLRBError 				; error has occurred on read.
.ad71		8d bb 07	sta $07bb			sta     LoadEndCharacter 						; # read is the number available
.ad74		a2 00		ldx #$00			ldx     #0 							; reset the read pointer.
.ad76		8e ba 07	stx $07ba			stx     LoadNextCharacter
.ad79						_KNLRBGetNextByte:
.ad79		bd 9a 06	lda $069a,x			lda     KNLReadBuffer,x 			; get the next data item
.ad7c		ee ba 07	inc $07ba			inc     LoadNextCharacter 					; and advance the index
.ad7f		18		clc				clc 								; succeeded
.ad80						_KNLRBError:
.ad80		fa		plx				plx
.ad81		60		rts				rts
.07b7						LoadEOFFlag:
>07b7								.fill 	1
.07b8						BasicFileStream:
>07b8								.fill 	1
.07b9						LoadFileStream:
>07b9								.byte   ?
.07ba						LoadNextCharacter:
>07ba								.byte   ?
.07bb						LoadEndCharacter:
>07bb								.byte   ?

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/kernel/commands/files/save.asm

.ad82						Command_Save:
.ad82		20 3b a2	jsr $a23b			jsr 	EvaluateString 				; file name to load
.ad85		a6 37		ldx $37				ldx 	zTemp0+1					; zTemp0 -> XA
.ad87		a5 36		lda $36				lda 	zTemp0
.ad89		20 b1 83	jsr $83b1			jsr 	KNLOpenFileWrite 			; open file for writing
.ad8c		b0 32		bcs $adc0			bcs 	CSErrorHandler 				; error, so fail.
.ad8e		8d b8 07	sta $07b8			sta 	BasicFileStream 			; save the reading stream.
.ad91		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.ad93		85 30		sta $30				sta 	codePtr
.ad95		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.ad97		85 31		sta $31				sta 	codePtr+1
.ad99						_CSLoop:
.ad99		b2 30		lda ($30)			lda 	(codePtr)
.ad9b		f0 17		beq $adb4			beq 	_CSExit
.ad9d		20 e4 ad	jsr $ade4			jsr 	CSGetCleanLine
.ada0		84 37		sty $37				sty 	zTemp0+1 					; save write address of data
.ada2		85 36		sta $36				sta 	zTemp0
.ada4		20 c3 ad	jsr $adc3			jsr 	CLWriteByteBlock 			; write the block out.
.ada7		18		clc				clc
.ada8		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.adaa		65 30		adc $30				adc 	codePtr
.adac		85 30		sta $30				sta 	codePtr
.adae		90 02		bcc $adb2			bcc 	_CREExit
.adb0		e6 31		inc $31				inc 	codePtr+1 					; carry
.adb2						_CREExit:
.adb2		80 e5		bra $ad99			bra 	_CSLoop
.adb4						_CSExit:
.adb4		ad b8 07	lda $07b8			lda 	BasicFileStream 			; close file
.adb7		20 80 84	jsr $8480			jsr 	KNLCloseFile
.adba		20 e9 ac	jsr $ace9			jsr 	CLComplete 					; display complete message.
.adbd		4c ee 87	jmp $87ee			jmp 	WarmStart 					; and warm start
.adc0						CSErrorHandler:
.adc0		4c 04 ad	jmp $ad04			jmp 	CLErrorHandler
.adc3						CLWriteByteBlock:
.adc3		e0 00		cpx #$00			cpx 	#0 							; written the lot ?
.adc5		f0 1c		beq $ade3			beq 	_CLWBBExit					; if so, exit
.adc7		ad b8 07	lda $07b8			lda 	BasicFileStream 			; stream to write, count in X
.adca		20 46 84	jsr $8446			jsr 	KNLWriteBlock 				; call one write attempt
.adcd		b0 f1		bcs $adc0			bcs 	CSErrorHandler 				; error occurred
.adcf		85 38		sta $38				sta 	zTemp1 						; save bytes written.
.add1		8a		txa				txa 								; subtract bytes written from X, total count.
.add2		38		sec				sec
.add3		e5 38		sbc $38				sbc 	zTemp1
.add5		aa		tax				tax
.add6		18		clc				clc 								; advance zTemp0 pointer by bytes written.
.add7		a5 36		lda $36				lda 	zTemp0
.add9		65 38		adc $38				adc 	zTemp1
.addb		85 36		sta $36				sta 	zTemp0
.addd		90 e4		bcc $adc3			bcc 	CLWriteByteBlock
.addf		e6 37		inc $37				inc 	zTemp0+1
.ade1		80 e0		bra $adc3			bra 	CLWriteByteBlock 			; and retry write out.
.ade3						_CLWBBExit:
.ade3		60		rts				rts
.ade4						CSGetCleanLine:
.ade4		a9 00		lda #$00			lda 	#0 							; no indent.
.ade6		20 7f 80	jsr $807f			jsr 	TKListConvertLine 			; convert line into token Buffer
.ade9		a2 00		ldx #$00			ldx 	#0 							; copy stripping controls.
.adeb		a0 00		ldy #$00			ldy 	#0
.aded						_CSClean:
.aded		b9 29 04	lda $0429,y			lda 	tokenBuffer,y
.adf0		f0 09		beq $adfb			beq 	_CSDoneClean
.adf2		30 04		bmi $adf8			bmi 	_CSIgnoreCharacter
.adf4		9d 26 05	sta $0526,x			sta 	lineBuffer,x
.adf7		e8		inx				inx
.adf8						_CSIgnoreCharacter:
.adf8		c8		iny				iny
.adf9		80 f2		bra $aded			bra 	_CSClean
.adfb						_CSDoneClean:
.adfb		a9 0d		lda #$0d			lda 	#13 						; add CR, length now in X and ASCIIZ.
.adfd		9d 26 05	sta $0526,x			sta 	lineBuffer,x
.ae00		e8		inx				inx
.ae01		9e 26 05	stz $0526,x			stz 	lineBuffer,x
.ae04		a0 05		ldy #$05			ldy 	#(lineBuffer >> 8) 			; line address in YA
.ae06		a9 26		lda #$26			lda 	#(lineBuffer & $FF)
.ae08		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/kernel/commands/files/try.asm

.ae09						Command_Try:
.ae09		b1 30		lda ($30),y			lda 	(codePtr),y
.ae0b		c9 81		cmp #$81			cmp 	#KWC_SHIFT1					; can only try in SHIFT_1
.ae0d		d0 0c		bne $ae1b			bne 	_TrySyntax
.ae0f		c8		iny				iny 								; get second
.ae10		b1 30		lda ($30),y			lda 	(codePtr),y
.ae12		c8		iny				iny 								; and consume it.
.ae13		c9 86		cmp #$86			cmp 	#KWD1_BLOAD
.ae15		f0 09		beq $ae20			beq 	_TryBLoad
.ae17		c9 87		cmp #$87			cmp	 	#KWD1_BSAVE
.ae19		f0 0a		beq $ae25			beq 	_TryBSave
.ae1b						_TrySyntax:
.ae1b		a9 02		lda #$02		lda	#2
.ae1d		4c 83 93	jmp $9383		jmp	ErrorHandler
.ae20						_TryBLoad:
.ae20		20 b5 aa	jsr $aab5			jsr 	BLOADHandler
.ae23		80 03		bra $ae28			bra 	_TryExit
.ae25						_TryBSave:
.ae25		20 61 ab	jsr $ab61			jsr 	BSaveHandler
.ae28						_TryExit:
.ae28		48		pha				pha 								; save result
.ae29		b1 30		lda ($30),y			lda 	(codePtr),y
.ae2b		c8		iny				iny
.ae2c		c9 db		cmp #$db			cmp 	#KWD_TO
.ae2e		d0 eb		bne $ae1b			bne 	_TrySyntax
.ae30		a2 00		ldx #$00			ldx 	#0 							; get an integer reference.
.ae32		20 d7 9c	jsr $9cd7			jsr 	EvaluateTerm
.ae35		b5 50		lda $50,x			lda 	NSStatus,x
.ae37		c9 20		cmp #$20			cmp 	#NSBIsReference+NSTInteger 	; do we have an integer 4 byte reference.
.ae39		d0 e0		bne $ae1b			bne		_TrySyntax
.ae3b		68		pla				pla 								; error code.
.ae3c		a2 01		ldx #$01			ldx	 	#1 							; address in 0, data in 1
.ae3e		20 e5 a2	jsr $a2e5			jsr 	NSMSetByte
.ae41		ca		dex				dex
.ae42		20 ec 8b	jsr $8bec			jsr 	AssignVariable 				; do the assign and exit
.ae45		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/kernel/commands/files/verify.asm

.e778						m
.ae46						Command_VERIFY:
.ae46		20 3b a2	jsr $a23b			jsr 	EvaluateString 				; file name to verify
.ae49		a6 37		ldx $37				ldx 	zTemp0+1					; zTemp0 -> XA
.ae4b		a5 36		lda $36				lda 	zTemp0
.ae4d		20 b6 83	jsr $83b6			jsr 	KNLOpenFileRead 			; open file for reading
.ae50		b0 4b		bcs $ae9d			bcs 	_CVErrorHandler 			; error, so fail.
.ae52		8d b8 07	sta $07b8			sta 	BasicFileStream 			; save the reading stream.
.ae55		20 54 ad	jsr $ad54			jsr     LoadReadByteInit            ; Init reader with the stream
.ae58		9c b7 07	stz $07b7			stz 	LoadEOFFlag 				; clear EOF Flag.
.ae5b		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.ae5d		85 30		sta $30				sta 	codePtr
.ae5f		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.ae61		85 31		sta $31				sta 	codePtr+1
.ae63						_CVLoop:
.ae63		20 12 ad	jsr $ad12			jsr 	LoadReadLine 				; get next line.
.ae66		f0 27		beq $ae8f			beq 	_CVExit 					; end, exit.
.ae68		20 89 80	jsr $8089			jsr 	TKTokeniseLine 				; tokenise the line.
.ae6b		ad 27 04	lda $0427			lda 	tokenLineNumber 			; line number = 0
.ae6e		0d 28 04	ora $0428			ora 	tokenLineNumber+1
.ae71		f0 f0		beq $ae63			beq 	_CVLoop 					; not legal code, blank line or maybe a comment.
.ae73		a0 00		ldy #$00			ldy 	#0 							; start compare
.ae75						_CVCompareLoop:
.ae75		b1 30		lda ($30),y			lda 	(codePtr),y
.ae77		d9 26 04	cmp $0426,y			cmp 	tokenOffset,y 				; compare against actual code.
.ae7a		d0 1c		bne $ae98			bne 	_CVCompareError
.ae7c		c8		iny				iny
.ae7d		cc 26 04	cpy $0426			cpy 	tokenOffset 				; until done whole line of code
.ae80		d0 f3		bne $ae75			bne 	_CVCompareLoop
.ae82		18		clc				clc
.ae83		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.ae85		65 30		adc $30				adc 	codePtr
.ae87		85 30		sta $30				sta 	codePtr
.ae89		90 02		bcc $ae8d			bcc 	_CREExit
.ae8b		e6 31		inc $31				inc 	codePtr+1 					; carry
.ae8d						_CREExit:
.ae8d		80 d4		bra $ae63			bra 	_CVLoop
.ae8f						_CVExit:
.ae8f		ad b8 07	lda $07b8			lda 	BasicFileStream
.ae92		20 80 84	jsr $8480			jsr 	KNLCloseFile
.ae95		4c e9 ac	jmp $ace9			jmp 	CLComplete
.ae98						_CVCompareError:
.ae98		a9 1b		lda #$1b		lda	#27
.ae9a		4c 83 93	jmp $9383		jmp	ErrorHandler
.ae9d						_CVErrorHandler:
.ae9d		4c 04 ad	jmp $ad04			jmp 	CLErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/kernel/commands/joy.asm

.aea0						UnaryJoyX:
.aea0		18		clc				clc
.aea1		80 01		bra $aea4			bra 	JoyMain
.aea3						UnaryJoyY:
.aea3		38		sec				sec
.aea4						JoyMain:
.aea4		fa		plx				plx 								; get pos
.aea5		08		php				php 								; save carry (set for Y)
.aea6		20 7e a2	jsr $a27e			jsr 	Evaluate8BitInteger 		; ignore the parameter
.aea9		20 6a 93	jsr $936a			jsr 	CheckRightBracket
.aeac		20 86 84	jsr $8486			jsr 	KNLReadController 			; read the controller.
.aeaf		28		plp				plp
.aeb0		b0 02		bcs $aeb4			bcs 	_JMNoShift 					; if X then shift bits 3,2 -> 1,0
.aeb2		4a		lsr a				lsr 	a
.aeb3		4a		lsr a				lsr 	a
.aeb4						_JMNoShift:
.aeb4		4a		lsr a				lsr 	a 							; if bit 0 set then left/up e.g. -1
.aeb5		b0 07		bcs $aebe			bcs 	JMIsLeft
.aeb7		4a		lsr a				lsr 	a 							; if bit 1 set then right/down e.g. +1
.aeb8		b0 07		bcs $aec1			bcs 	JMIsRight
.aeba		20 e3 a2	jsr $a2e3			jsr 	NSMSetZero 					; zero result
.aebd		60		rts				rts
.aebe						JMIsLeft:
.aebe		4c f6 93	jmp $93f6			jmp 	ReturnTrue
.aec1						JMIsRight:
.aec1		a9 01		lda #$01			lda 	#1
.aec3		20 e5 a2	jsr $a2e5			jsr 	NSMSetByte
.aec6		60		rts				rts
.aec7						UnaryJoyB:
.aec7		fa		plx				plx 								; get pos
.aec8		20 7e a2	jsr $a27e			jsr 	Evaluate8BitInteger 		; ignore the parameter
.aecb		20 6a 93	jsr $936a			jsr 	CheckRightBracket
.aece		20 86 84	jsr $8486			jsr 	KNLReadController 			; read the controller.
.aed1		29 10		and #$10			and 	#$10
.aed3		d0 e9		bne $aebe			bne 	JMIsLeft
.aed5		20 e3 a2	jsr $a2e3			jsr 	NSMSetZero
.aed8		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/kernel/commands/memcopy.asm

.aed9						MCCommand:
.aed9		a5 01		lda $01				lda 	1 							; save current I/O ; switch to I/O 0
.aedb		48		pha				pha
.aedc		64 01		stz $01				stz 	1
.aede		9c 00 df	stz $df00			stz 	$DF00 						; zero control byte.
.aee1		a9 81		lda #$81			lda 	#$81 						; standard start byte (DMA Enabled, Start set)
.aee3		8d bc 07	sta $07bc			sta 	DMAControlByte
.aee6		20 94 af	jsr $af94			jsr 	MCPosition 					; start position
.aee9		a2 04		ldx #$04			ldx 	#4 							; write to source AND $DF04 destination address $DF08
.aeeb		20 65 af	jsr $af65			jsr 	MCCopyAddress
.aeee		a2 08		ldx #$08			ldx 	#8
.aef0		20 65 af	jsr $af65			jsr 	MCCopyAddress
.aef3		b1 30		lda ($30),y			lda 	(codePtr),y
.aef5		c8		iny				iny
.aef6		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; , <size>
.aef8		f0 09		beq $af03			beq 	_MCSize1D
.aefa		c9 d5		cmp #$d5			cmp 	#KWD_RECT 					; RECT <x>,<y>
.aefc		f0 11		beq $af0f			beq 	_MCRect2D
.aefe						_MCSyntax:
.aefe		a9 02		lda #$02		lda	#2
.af00		4c 83 93	jmp $9383		jmp	ErrorHandler
.af03						_MCSize1D:
.af03		a2 00		ldx #$00			ldx 	#0 							; get size
.af05		20 50 a2	jsr $a250			jsr 	EvaluateInteger
.af08		a2 0c		ldx #$0c			ldx 	#$C 						; copy to size $DF0C-E
.af0a		20 65 af	jsr $af65			jsr 	MCCopyAddress
.af0d		80 24		bra $af33			bra 	_MCDestination
.af0f						_MCRect2D:
.af0f		a2 0c		ldx #$0c			ldx 	#$C 						; width to $DF0C,D
.af11		20 82 af	jsr $af82			jsr 	MCEvalCopyData16
.af14		20 72 93	jsr $9372			jsr 	CheckComma
.af17		a2 0e		ldx #$0e			ldx 	#$E 						; height to $DF0E,F
.af19		20 82 af	jsr $af82			jsr 	MCEvalCopyData16
.af1c		a9 b9		lda #$b9			lda 	#KWD_BY 					; BY keyword.
.af1e		20 7a 93	jsr $937a			jsr 	CheckNextA
.af21		a2 10		ldx #$10			ldx 	#$10 						; store source and destination stride
.af23		20 82 af	jsr $af82			jsr 	MCEvalCopyData16
.af26		a2 12		ldx #$12			ldx 	#$12
.af28		20 89 af	jsr $af89			jsr 	MCCopyData16
.af2b		ad bc 07	lda $07bc			lda 	DMAControlByte 				; set bit 4 of DMA control indicating 2D.
.af2e		09 02		ora #$02			ora 	#$02
.af30		8d bc 07	sta $07bc			sta 	DMAControlByte
.af33						_MCDestination:
.af33		b1 30		lda ($30),y			lda 	(codePtr),y
.af35		c8		iny				iny
.af36		c9 d0		cmp #$d0			cmp 	#KWD_POKE 					; is it POKE n
.af38		f0 0e		beq $af48			beq 	_MCDestPoke
.af3a		c9 db		cmp #$db			cmp 	#KWD_TO 					; is it TO n
.af3c		d0 c0		bne $aefe			bne 	_MCSyntax
.af3e		20 94 af	jsr $af94			jsr 	MCPosition 					; get target address
.af41		a2 08		ldx #$08			ldx 	#8							; copy to target address at $DF08-A
.af43		20 65 af	jsr $af65			jsr 	MCCopyAddress
.af46		80 0e		bra $af56			bra 	_MCDoDMA 					; and we can go.
.af48						_MCDestPoke:
.af48		20 7e a2	jsr $a27e			jsr 	Evaluate8BitInteger 		; POKE what
.af4b		8d 01 df	sta $df01			sta 	$DF01 						; set the FILL register
.af4e		ad bc 07	lda $07bc			lda 	DMAControlByte 				; set bit 2 of control byte indicating FILL.
.af51		09 04		ora #$04			ora 	#$04
.af53		8d bc 07	sta $07bc			sta 	DMAControlByte
.af56						_MCDoDMA:
.af56		ad bc 07	lda $07bc			lda 	DMAControlByte 				; set the DMA Control byte to go !
.af59		8d 00 df	sta $df00			sta 	$DF00
.af5c						_MCWaitBUSD:
.af5c		ad 01 df	lda $df01			lda 	$DF01
.af5f		30 fb		bmi $af5c			bmi 	_MCWaitBUSD
.af61		68		pla				pla 								; restore I/O.
.af62		85 01		sta $01				sta 	1
.af64		60		rts				rts
.af65						MCCopyAddress:
.af65		a5 68		lda $68				lda 	NSMantissa2 				; check valid vlaue
.af67		29 fc		and #$fc			and 	#$FC
.af69		05 70		ora $70				ora 	NSMantissa3
.af6b		d0 10		bne $af7d			bne 	_MCRange
.af6d		a5 58		lda $58				lda 	NSMantissa0
.af6f		9d 00 df	sta $df00,x			sta 	$DF00,x
.af72		a5 60		lda $60				lda 	NSMantissa1
.af74		9d 01 df	sta $df01,x			sta 	$DF01,x
.af77		a5 68		lda $68				lda 	NSMantissa2
.af79		9d 02 df	sta $df02,x			sta 	$DF02,x
.af7c		60		rts				rts
.af7d						_MCRange:
.af7d		a9 04		lda #$04		lda	#4
.af7f		4c 83 93	jmp $9383		jmp	ErrorHandler
.af82						MCEvalCopyData16:
.af82		da		phx				phx
.af83		a2 00		ldx #$00			ldx 	#0
.af85		20 63 a2	jsr $a263			jsr 	Evaluate16BitInteger
.af88		fa		plx				plx
.af89						MCCopyData16:
.af89		a5 58		lda $58				lda 	NSMantissa0
.af8b		9d 00 df	sta $df00,x			sta 	$DF00,x
.af8e		a5 60		lda $60				lda 	NSMantissa1
.af90		9d 01 df	sta $df01,x			sta 	$DF01,x
.af93		60		rts				rts
.af94						MCPosition:
.af94		a2 00		ldx #$00			ldx 	#0 							; get start address.
.af96		b1 30		lda ($30),y			lda 	(codePtr),y
.af98		c9 b8		cmp #$b8			cmp 	#KWD_AT
.af9a		f0 04		beq $afa0			beq 	_MCPAt
.af9c		20 50 a2	jsr $a250			jsr 	EvaluateInteger
.af9f		60		rts				rts
.afa0						_MCPAt:
.afa0		c8		iny				iny
.afa1		20 7e a2	jsr $a27e			jsr 	Evaluate8BitInteger 		; X position
.afa4		48		pha				pha
.afa5		20 72 93	jsr $9372			jsr 	CheckComma
.afa8		e8		inx				inx
.afa9		20 7e a2	jsr $a27e			jsr 	Evaluate8BitInteger 		; Y position
.afac		ca		dex				dex
.afad		85 60		sta $60				sta 	NSMantissa1 				; put Y x 64 in Mantissa.0
.afaf		64 58		stz $58				stz 	NSMantissa0
.afb1		64 68		stz $68				stz 	NSMantissa2
.afb3		64 70		stz $70				stz 	NSMantissa3
.afb5		46 60		lsr $60				lsr 	NSMantissa1
.afb7		66 58		ror $58				ror 	NSMantissa0
.afb9		46 60		lsr $60				lsr 	NSMantissa1
.afbb		66 58		ror $58				ror 	NSMantissa0
.afbd		68		pla				pla
.afbe		18		clc				clc
.afbf		65 58		adc $58				adc 	NSMantissa0 				; add X, Y * 256 and the
.afc1		85 58		sta $58				sta 	NSMantissa0
.afc3		a5 60		lda $60				lda 	NSMantissa1
.afc5		65 59		adc $59				adc 	NSMantissa0+1
.afc7		85 60		sta $60				sta 	NSMantissa1
.afc9		90 02		bcc $afcd			bcc 	_MCPNoCarry
.afcb		e6 68		inc $68				inc 	NSMantissa2
.afcd						_MCPNoCarry:
.afcd		ad da 07	lda $07da			lda 	gxBasePage
.afd0		85 69		sta $69				sta 	NSMantissa2+1
.afd2		64 59		stz $59				stz 	NSMantissa0+1
.afd4		64 61		stz $61				stz 	NSMantissa1+1
.afd6		64 71		stz $71				stz 	NSMantissa3+1
.afd8		a2 01		ldx #$01			ldx 	#1
.afda		20 fc a2	jsr $a2fc			jsr 	NSMShiftRight
.afdd		20 fc a2	jsr $a2fc			jsr 	NSMShiftRight
.afe0		20 fc a2	jsr $a2fc			jsr 	NSMShiftRight
.afe3		a2 00		ldx #$00			ldx 	#0
.afe5		20 83 96	jsr $9683			jsr 	AddTopTwoStack
.afe8		60		rts				rts
.07bc						DMAControlByte:
>07bc								.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/kernel/commands/mouse.asm

.afe9						MouseStatus:
.afe9		a9 ff		lda #$ff	        lda     #255
.afeb		80 02		bra $afef	        bra     MouseCommand
.afed						MouseDeltaStatus:
.afed		a9 00		lda #$00	        lda     #0
.afef						MouseCommand:
.afef		8d 5f 06	sta $065f	        sta     CMDMouseFlag
.aff2		a2 00		ldx #$00	        ldx     #0
.aff4						_MouseCommandLoop:
.aff4		da		phx		        phx                                 ; save slot.
.aff5		20 8b 98	jsr $988b	        jsr     EvaluateExpressionAt0       ; evaluate a reference.
.aff8		a5 50		lda $50		        lda     NSStatus                    ; check it's a reference.
.affa		c9 20		cmp #$20	        cmp     #NSBIsReference
.affc		d0 60		bne $b05e	        bne     _MouseNotRef
.affe		b1 30		lda ($30),y			lda 	(codePtr),y
.b000		c9 2c		cmp #$2c	        cmp     #KWD_COMMA
.b002		d0 01		bne $b005	        bne     _MouseNoSkipComma
.b004		c8		iny		        iny
.b005						_MouseNoSkipComma:
.b005		fa		plx		        plx                                 ; restore X
.b006		5a		phy		        phy                                 ; save Y
.b007		a5 58		lda $58		        lda     NSMantissa0                 ; copy address to zTemp0
.b009		85 36		sta $36		        sta     zTemp0
.b00b		a5 60		lda $60		        lda     NSMantissa1
.b00d		85 37		sta $37		        sta     zTemp0+1
.b00f		a0 04		ldy #$04	        ldy     #4                          ; set exponent, m3, m2 , m1 , m0
.b011		a9 00		lda #$00	        lda     #0
.b013		91 36		sta ($36),y	        sta     (zTemp0),y                  ; exponent
.b015		88		dey		        dey
.b016		91 36		sta ($36),y	        sta     (zTemp0),y                  ; m3
.b018		88		dey		        dey
.b019		91 36		sta ($36),y	        sta     (zTemp0),y                  ; m2
.b01b		88		dey		        dey
.b01c		2c 5f 06	bit $065f	        bit     CMDMouseFlag                ; mouse or mdelta command
.b01f		30 12		bmi $b033	        bmi     _MouseMouseCommand
.b021						_MouseMDeltaCommand:
.b021		bd 82 06	lda $0682,x	        lda     MouseDeltaX,x
.b024		92 36		sta ($36)	        sta     (zTemp0)                    ; m0
.b026		bd 83 06	lda $0683,x	        lda     MouseDeltaX+1,x
.b029		91 36		sta ($36),y	        sta     (zTemp0),y                  ; m1
.b02b		9e 82 06	stz $0682,x	        stz     MouseDeltaX,x               ; clear entry in current table
.b02e		9e 83 06	stz $0683,x	        stz     MouseDeltaX+1,x
.b031		80 0a		bra $b03d	        bra     _MouseProcessData
.b033						_MouseMouseCommand:
.b033		bd 8e 06	lda $068e,x	        lda     MousePosX,x
.b036		92 36		sta ($36)	        sta     (zTemp0)                    ; m0
.b038		bd 8f 06	lda $068f,x	        lda     MousePosX+1,x
.b03b		91 36		sta ($36),y	        sta     (zTemp0),y                  ; m1
.b03d						_MouseProcessData:
.b03d		b1 36		lda ($36),y	        lda     (zTemp0),y
.b03f		10 15		bpl $b056	        bpl     _MouseDataPos               ; signed 16 bit value, so fix up if -ve.
.b041		38		sec		        sec                                 ; negate the mantissa 2 bytes
.b042		a9 00		lda #$00	        lda     #0
.b044		f2 36		sbc ($36)	        sbc     (zTemp0)
.b046		92 36		sta ($36)	        sta     (zTemp0)
.b048		a9 00		lda #$00	        lda     #0
.b04a		f1 36		sbc ($36),y	        sbc     (zTemp0),y
.b04c		91 36		sta ($36),y	        sta     (zTemp0),y
.b04e		a0 03		ldy #$03	        ldy     #3
.b050		b1 36		lda ($36),y	        lda     (zTemp0),y                  ; set upper bit of mantissa
.b052		09 80		ora #$80	        ora     #$80
.b054		91 36		sta ($36),y	        sta     (zTemp0),y
.b056						_MouseDataPos:
.b056		7a		ply		        ply                                 ; restore Y.
.b057		e8		inx		        inx                                 ; next entry
.b058		e8		inx		        inx
.b059		e0 0c		cpx #$0c	        cpx     #6*2                        ; done 6 reads to variables.
.b05b		d0 97		bne $aff4	        bne     _MouseCommandLoop
.b05d		60		rts		        rts
.b05e						_MouseNotRef:
.b05e		a9 07		lda #$07		lda	#7
.b060		4c 83 93	jmp $9383		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/kernel/commands/setdatetime.asm

.b063						CommandSetDate:
.b063		a9 03		lda #$03			lda 	#3
.b065		80 02		bra $b069			bra 	CSDTMain
.b067						CommandSetTime:
.b067		a9 00		lda #$00			lda 	#0
.b069						CSDTMain:
.b069		48		pha				pha 								; save table offsets 0 or 3
.b06a		a2 00		ldx #$00			ldx 	#0 							; input 3 values.
.b06c		20 7e a2	jsr $a27e			jsr 	Evaluate8BitInteger
.b06f		20 72 93	jsr $9372			jsr 	CheckComma
.b072		e8		inx				inx
.b073		20 7e a2	jsr $a27e			jsr 	Evaluate8BitInteger
.b076		20 72 93	jsr $9372			jsr 	CheckComma
.b079		e8		inx				inx
.b07a		20 7e a2	jsr $a27e			jsr 	Evaluate8BitInteger
.b07d		68		pla				pla 								; table offset in Y, saving Y
.b07e		5a		phy				phy
.b07f		a8		tay				tay
.b080		a2 00		ldx #$00			ldx 	#0 							; first number
.b082		a5 01		lda $01				lda 	1 							; save I/O page, switch to zero
.b084		48		pha				pha
.b085		64 01		stz $01				stz 	1
.b087						_CSDTCopy:
.b087		b5 58		lda $58,x			lda 	NSMantissa0,x 				; get first number
.b089		d9 cb b0	cmp $b0cb,y			cmp 	RTCWMinValues,y 			; check range
.b08c		90 1b		bcc $b0a9			bcc 	_CSDTRange
.b08e		d9 d1 b0	cmp $b0d1,y			cmp 	RTCWMaxValues,y
.b091		b0 16		bcs $b0a9			bcs 	_CSDTRange
.b093		20 ae b0	jsr $b0ae			jsr 	CSDTDecimalToBCD
.b096		da		phx				phx 								; save X
.b097		be c5 b0	ldx $b0c5,y			ldx 	RTCWOffset,y 				; offset in RTC in X
.b09a		9d 90 d6	sta $d690,x			sta 	$D690,x 					; write to RTC
.b09d		fa		plx				plx 								; restore X
.b09e		e8		inx				inx 								; next number
.b09f		c8		iny				iny 								; next table entries
.b0a0		e0 03		cpx #$03			cpx 	#3 							; until done all 3.
.b0a2		d0 e3		bne $b087			bne 	_CSDTCopy
.b0a4		68		pla				pla 								; restore I/O space
.b0a5		85 01		sta $01				sta 	1
.b0a7		7a		ply				ply 								; restore code pos and exit.
.b0a8		60		rts				rts
.b0a9						_CSDTRange:
.b0a9		a9 04		lda #$04		lda	#4
.b0ab		4c 83 93	jmp $9383		jmp	ErrorHandler
.b0ae						CSDTDecimalToBCD:
.b0ae		da		phx				phx 								; 10 count in X
.b0af		a2 00		ldx #$00			ldx 	#0
.b0b1						_CSDTDBLoop:
.b0b1		c9 0a		cmp #$0a			cmp 	#10 						; < 10 evaluate result.
.b0b3		90 05		bcc $b0ba			bcc 	_CSDTDBExit
.b0b5		e9 0a		sbc #$0a			sbc 	#10 						; 10 from value
.b0b7		e8		inx				inx 								; one more 10s.
.b0b8		80 f7		bra $b0b1			bra 	_CSDTDBLoop
.b0ba						_CSDTDBExit:
.b0ba		85 36		sta $36				sta 	zTemp0 						; units
.b0bc		8a		txa				txa 								; 10s x 16
.b0bd		0a		asl a				asl 	a
.b0be		0a		asl a				asl 	a
.b0bf		0a		asl a				asl 	a
.b0c0		0a		asl a				asl 	a
.b0c1		05 36		ora $36				ora 	zTemp0 						; BCD result and exit
.b0c3		fa		plx				plx
.b0c4		60		rts				rts
.b0c5						RTCWOffset:
>b0c5		04 02 00 06 09 0a				.byte 	4,2,0,6,9,10
.b0cb						RTCWMinValues:
>b0cb		00 00 00 01 01 00				.byte 	0,0,0,1,1,0
.b0d1						RTCWMaxValues:
>b0d1		18 3c 3c 20 0d 64				.byte 	24,60,60,32,13,100

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/kernel/commands/timer.asm

.b0d7						UnaryTimer:
.b0d7		fa		plx				plx
.b0d8		20 6a 93	jsr $936a			jsr 	CheckRightBracket
.b0db						TimerToStackX:
.b0db		20 e3 a2	jsr $a2e3			jsr 	NSMSetZero 					; zero result
.b0de		64 01		stz $01				stz 	1 							; access I/O
.b0e0		ad 59 d6	lda $d659			lda 	$D659 						; copy timer in
.b0e3		95 58		sta $58,x			sta 	NSMantissa0,x
.b0e5		ad 5a d6	lda $d65a			lda 	$D65A
.b0e8		95 60		sta $60,x			sta 	NSMantissa1,x
.b0ea		ad 5b d6	lda $d65b			lda 	$D65B
.b0ed		95 68		sta $68,x			sta 	NSMantissa2,x
.b0ef		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/kernel/functions/getdatetime.asm

.b0f0						UnaryGetTime:
.b0f0		a9 00		lda #$00			lda 	#0
.b0f2		80 02		bra $b0f6			bra 	UGDTMain
.b0f4						UnaryGetDate:
.b0f4		a9 03		lda #$03			lda 	#3
.b0f6						UGDTMain:
.b0f6		fa		plx				plx 								; get stack position back
.b0f7		48		pha				pha 								; save table offset
.b0f8		20 7e a2	jsr $a27e			jsr 	Evaluate8BitInteger			; ignored parameter
.b0fb		20 6a 93	jsr $936a			jsr 	CheckRightBracket 			; closing )
.b0fe		68		pla				pla 								; table offset in A
.b0ff		5a		phy				phy 								; saving Y
.b100		a8		tay				tay 								; table offset in Y
.b101		a9 08		lda #$08			lda 	#8							; allocate space for 8 chars DD:MM:YY
.b103		20 f7 b3	jsr $b3f7			jsr 	StringTempAllocate
.b106		a5 01		lda $01				lda 	1 							; save I/O table and switch to I/O page 0
.b108		48		pha				pha
.b109		64 01		stz $01				stz 	1
.b10b		20 1e b1	jsr $b11e			jsr 	UGDTDigit 					; do XX:YY:ZZ
.b10e		20 19 b1	jsr $b119			jsr 	UGDTColonDigit
.b111		20 19 b1	jsr $b119			jsr 	UGDTColonDigit
.b114		68		pla				pla 								; restore I/O select
.b115		85 01		sta $01				sta 	1
.b117		7a		ply				ply  								; restore code position
.b118		60		rts				rts
.b119						UGDTColonDigit:
.b119		a9 3a		lda #$3a			lda 	#':'
.b11b		20 30 b4	jsr $b430			jsr 	StringTempWrite
.b11e						UGDTDigit:
.b11e		da		phx				phx 								; save X
.b11f		b9 3e b1	lda $b13e,y			lda 	RTCROffset,y 				; get offset in RTC register
.b122		aa		tax				tax
.b123		bd 90 d6	lda $d690,x			lda 	$D690,x 					; read RTC register
.b126		39 44 b1	and $b144,y			and 	RTCRMask,y 					; and with Mask.
.b129		fa		plx				plx
.b12a		48		pha				pha 								; output in BCD
.b12b		4a		lsr a				lsr 	a
.b12c		4a		lsr a				lsr 	a
.b12d		4a		lsr a				lsr 	a
.b12e		4a		lsr a				lsr 	a
.b12f		09 30		ora #$30			ora 	#48
.b131		20 30 b4	jsr $b430			jsr 	StringTempWrite
.b134		68		pla				pla
.b135		29 0f		and #$0f			and 	#15
.b137		09 30		ora #$30			ora 	#48
.b139		20 30 b4	jsr $b430			jsr 	StringTempWrite
.b13c		c8		iny				iny
.b13d		60		rts				rts
.b13e						RTCROffset:
>b13e		04 02 00 06 09 0a				.byte 	4,2,0,6,9,10
.b144						RTCRMask:
>b144		3f 7f 7f 3f 1f 7f				.byte 	$3F,$7F,$7F,$3F,$1F,$7F

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/kernel/functions/getinkey.asm

.b14a						AscGet:
.b14a		fa		plx				plx 								; restore stack pos
.b14b						AscGet2:
.b14b		20 6a 93	jsr $936a			jsr 	CheckRightBracket
.b14e		20 ad 81	jsr $81ad			jsr 	KNLGetSingleCharacter
.b151		20 e5 a2	jsr $a2e5			jsr 	NSMSetByte
.b154		60		rts				rts
.b155						_AGBreak:
.b155		a9 01		lda #$01		lda	#1
.b157		4c 83 93	jmp $9383		jmp	ErrorHandler
.b15a						AscInkey:
.b15a		fa		plx				plx 								; restore stack pos
.b15b						AscInkey2:
.b15b		20 6a 93	jsr $936a			jsr 	CheckRightBracket
.b15e		20 8b 81	jsr $818b			jsr 	KNLGetKeyPressed
.b161		20 e5 a2	jsr $a2e5			jsr 	NSMSetByte
.b164		60		rts				rts
.b165						ChrGet:
.b165		fa		plx				plx
.b166		20 4b b1	jsr $b14b			jsr 	AscGet2
.b169		4c 70 b1	jmp $b170			jmp 	GetInkeyToString
.b16c						ChrInkey:
.b16c		fa		plx				plx
.b16d		20 5b b1	jsr $b15b			jsr 	AscInkey2
.b170						GetInkeyToString:
.b170		c9 00		cmp #$00			cmp 	#0 							; if zero, return ""
.b172		f0 0b		beq $b17f			beq 	_GKISNull
.b174		48		pha				pha
.b175		a9 01		lda #$01			lda 	#1 							; allocate space for one char
.b177		20 f7 b3	jsr $b3f7			jsr 	StringTempAllocate
.b17a		68		pla				pla 								; write number to it
.b17b		20 30 b4	jsr $b430			jsr 	StringTempWrite
.b17e		60		rts				rts
.b17f						_GKISNull:
.b17f		a9 00		lda #$00			lda 	#0
.b181		20 f7 b3	jsr $b3f7			jsr 	StringTempAllocate
.b184		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/kernel/functions/keydown.asm

.b185						KeyDown:
.b185		20 2d 81	jsr $812d			jsr 	ProcessEvents 				; process outstanding events.
.b188		fa		plx				plx 								; restore stack pos
.b189		20 7e a2	jsr $a27e			jsr 	Evaluate8BitInteger 		; key to check.
.b18c		48		pha				pha 								; check right bracket.
.b18d		20 6a 93	jsr $936a			jsr 	CheckRightBracket
.b190		68		pla				pla
.b191		20 99 83	jsr $8399			jsr 	KeyboardConvertXA 			; get offset and mask.
.b194		3d 60 06	and $0660,x			and 	KeyStatus,x 				; is it zero ?
.b197		f0 03		beq $b19c			beq 	_KeyUp
.b199		4c f6 93	jmp $93f6			jmp 	ReturnTrue
.b19c		4c 01 94	jmp $9401	_KeyUp:	jmp 	ReturnFalse

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/kernel/functions/rnd.asm

.b19f						Unary_Random:
.b19f		fa		plx				plx
.b1a0		20 f0 b1	jsr $b1f0			jsr 	URCopyToMantissa  			; put random # in mantissa
.b1a3		b1 30		lda ($30),y			lda 	(codePtr),y
.b1a5		c9 29		cmp #$29			cmp 	#KWD_RPAREN
.b1a7		f0 08		beq $b1b1			beq 	_URNoModulus 				; then we return a random 30 bit number.
.b1a9		e8		inx				inx
.b1aa		20 63 a2	jsr $a263			jsr 	Evaluate16BitInteger 		; put modulus value in +1
.b1ad		ca		dex				dex
.b1ae		20 48 95	jsr $9548			jsr 	IntegerModulusNoCheck 		; calculate modulus, so now 0 .. n-1
.b1b1						_URNoModulus:
.b1b1		74 50		stz $50,x			stz 	NSStatus,x 					; make it an integer positive
.b1b3		74 78		stz $78,x			stz 	NSExponent,x
.b1b5		20 6a 93	jsr $936a			jsr 	CheckRightBracket
.b1b8		60		rts				rts
.b1b9						Unary_Rnd:
.b1b9		fa		plx				plx
.b1ba		20 31 a2	jsr $a231			jsr 	EvaluateNumber 				; number to use.
.b1bd		20 6a 93	jsr $936a			jsr 	CheckRightBracket 			; closing bracket
.b1c0		b5 50		lda $50,x			lda 	NSStatus,x 					; if -ve, then seed using parameter
.b1c2		10 20		bpl $b1e4			bpl 	_URDontSeed
.b1c4		a5 01		lda $01				lda 	1 							; switch to page 0
.b1c6		48		pha				pha
.b1c7		64 01		stz $01				stz 	1
.b1c9		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy - value to seed butchering it.
.b1cb		49 17		eor #$17			eor 	#$17
.b1cd		8d a4 d6	sta $d6a4			sta 	$D6A4
.b1d0		b5 60		lda $60,x			lda 	NSMantissa1,x
.b1d2		49 a5		eor #$a5			eor 	#$A5
.b1d4		8d a5 d6	sta $d6a5			sta 	$D6A5
.b1d7		a9 03		lda #$03			lda 	#3 							; set bit 1 high/low to set seed.
.b1d9		8d a6 d6	sta $d6a6			sta 	$D6A6
.b1dc		a9 01		lda #$01			lda 	#1
.b1de		8d a6 d6	sta $d6a6			sta 	$D6A6
.b1e1		68		pla				pla
.b1e2		85 01		sta $01				sta 	1
.b1e4						_URDontSeed:
.b1e4		20 f0 b1	jsr $b1f0			jsr 	URCopyToMantissa 			; copy into mantissa
.b1e7		a9 e2		lda #$e2			lda 	#-30 						; force into 0-1 range
.b1e9		95 78		sta $78,x			sta 	NSExponent,x
.b1eb		a9 08		lda #$08			lda 	#NSTFloat
.b1ed		95 50		sta $50,x			sta 	NSStatus,x 					; positive float
.b1ef		60		rts				rts
.b1f0						URCopyToMantissa:
.b1f0		a5 01		lda $01				lda 	1 							; switch to I/O page 1
.b1f2		48		pha				pha
.b1f3		64 01		stz $01				stz 	1
.b1f5		a9 01		lda #$01			lda 	#1
.b1f7		8d a6 d6	sta $d6a6			sta 	$D6A6 						; enable LFSR
.b1fa		ad a4 d6	lda $d6a4			lda 	$D6A4
.b1fd		95 58		sta $58,x			sta 	NSMantissa0,x
.b1ff		ad a5 d6	lda $d6a5			lda 	$D6A5
.b202		95 60		sta $60,x			sta 	NSMantissa1,x
.b204		ad a4 d6	lda $d6a4			lda 	$D6A4
.b207		95 68		sta $68,x			sta 	NSMantissa2,x
.b209		ad a5 d6	lda $d6a5			lda 	$D6A5
.b20c		29 3f		and #$3f			and 	#$3F 						; make legal mantissa
.b20e		95 70		sta $70,x			sta 	NSMantissa3,x
.b210		68		pla				pla
.b211		85 01		sta $01				sta 	1
.b213		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/sound/effects.asm

.b214						PingCommand:
.b214		5a		phy				phy 								; save pos
.b215		a9 01		lda #$01			lda 	#1 						; push channel.
.b217		48		pha				pha
.b218		a9 c8		lda #$c8			lda 	#200 						; pitch LSB
.b21a		a2 06		ldx #$06			ldx 	#6 						; length
.b21c		a0 00		ldy #$00			ldy 	#0 						; slide LSB
.b21e		80 24		bra $b244			bra 	SoundEffectCommand
.b220						ZapCommand:
.b220		5a		phy				phy 								; save pos
.b221		a9 01		lda #$01			lda 	#1 						; push channel.
.b223		48		pha				pha
.b224		a9 ff		lda #$ff			lda 	#255 						; pitch LSB
.b226		a2 0a		ldx #$0a			ldx 	#10 						; length
.b228		a0 0a		ldy #$0a			ldy 	#10 						; slide LSB
.b22a		80 18		bra $b244			bra 	SoundEffectCommand
.b22c						ShootCommand:
.b22c		5a		phy				phy 								; save pos
.b22d		a9 03		lda #$03			lda 	#3 						; push channel.
.b22f		48		pha				pha
.b230		a9 20		lda #$20			lda 	#32 						; pitch LSB
.b232		a2 04		ldx #$04			ldx 	#4 						; length
.b234		a0 00		ldy #$00			ldy 	#0 						; slide LSB
.b236		80 0c		bra $b244			bra 	SoundEffectCommand
.b238						Explode:
.b238		5a		phy				phy 								; save pos
.b239		a9 03		lda #$03			lda 	#3 						; push channel.
.b23b		48		pha				pha
.b23c		a9 50		lda #$50			lda 	#80 						; pitch LSB
.b23e		a2 0a		ldx #$0a			ldx 	#10 						; length
.b240		a0 00		ldy #$00			ldy 	#0 						; slide LSB
.b242		80 00		bra $b244			bra 	SoundEffectCommand
.b244						SoundEffectCommand:
.b244		8d bd 07	sta $07bd			sta 	SoundCommandBlock 			; set up the command block in sound.asm
.b247		9c be 07	stz $07be			stz 	SoundCommandBlock+1
.b24a		a9 0f		lda #$0f			lda 	#15
.b24c		8d bf 07	sta $07bf			sta 	SoundCommandBlock+2
.b24f		8e c0 07	stx $07c0			stx 	SoundCommandBlock+3
.b252		8c c1 07	sty $07c1			sty 	SoundCommandBlock+4
.b255		9c c2 07	stz $07c2			stz 	SoundCommandBlock+5
.b258		68		pla				pla
.b259		09 10		ora #$10			ora 	#$10  						; execute command $11
.b25b		a2 bd		ldx #$bd			ldx 	#(SoundCommandBlock & $FF)
.b25d		a0 07		ldy #$07			ldy 	#(SoundCommandBlock >> 8)
.b25f		20 6b 80	jsr $806b			jsr 	SNDCommand
.b262		7a		ply				ply
.b263		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/sound/playing.asm

.b264						UnaryPlaying:
.b264		fa		plx				plx
.b265		20 7e a2	jsr $a27e			jsr 	Evaluate8BitInteger 		; get channel #
.b268		48		pha				pha
.b269		20 6a 93	jsr $936a			jsr		CheckRightBracket
.b26c		68		pla				pla
.b26d		c9 04		cmp #$04			cmp 	#4
.b26f		b0 0c		bcs $b27d			bcs 	_UPNotPlaying
.b271		09 20		ora #$20			ora 	#$20 						; query playing ?
.b273		20 6b 80	jsr $806b			jsr 	SNDCommand
.b276		c9 00		cmp #$00			cmp 	#0
.b278		f0 03		beq $b27d			beq 	_UPNotPlaying
.b27a		4c f6 93	jmp $93f6			jmp 	ReturnTrue
.b27d						_UPNotPlaying:
.b27d		4c 01 94	jmp $9401			jmp 	ReturnFalse

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/sound/sound.asm

.b280						SoundCommand:
.b280		b1 30		lda ($30),y			lda 	(codePtr),y
.b282		c9 cb		cmp #$cb			cmp 	#KWD_OFF 					; SOUND OFF ?
.b284		d0 09		bne $b28f			bne 	_SNDMain
.b286		c8		iny				iny 								; skip OFF
.b287		a9 3f		lda #$3f			lda 	#$3F 						; call command $3F (silence)
.b289		5a		phy				phy
.b28a		20 6b 80	jsr $806b			jsr 	SNDCommand
.b28d		7a		ply				ply
.b28e		60		rts				rts
.b28f						_SNDMain:
.b28f		a2 00		ldx #$00			ldx 	#0
.b291		20 7e a2	jsr $a27e			jsr 	Evaluate8BitInteger 		; channel
.b294		c9 04		cmp #$04			cmp 	#4 							; must be 0-3
.b296		b0 4b		bcs $b2e3			bcs 	_SndError
.b298		e8		inx				inx 								; do the rest in slot 1.
.b299		20 72 93	jsr $9372			jsr 	CheckComma
.b29c		20 63 a2	jsr $a263			jsr 	Evaluate16BitInteger 		; Pitch
.b29f		b5 60		lda $60,x			lda 	NSMantissa1,x 				; must be 10 bit
.b2a1		c9 10		cmp #$10			cmp 	#16
.b2a3		b0 3e		bcs $b2e3			bcs 	_SndError
.b2a5		8d be 07	sta $07be			sta 	SoundCommandBlock+1 		; Pitch (2 bytes + 0)
.b2a8		b5 58		lda $58,x			lda 	NSMantissa0,x
.b2aa		8d bd 07	sta $07bd			sta 	SoundCommandBlock
.b2ad		20 72 93	jsr $9372			jsr 	CheckComma
.b2b0		20 7e a2	jsr $a27e			jsr 	Evaluate8BitInteger 		; Length (1 byte + 3)
.b2b3		8d c0 07	sta $07c0			sta 	SoundCommandBlock+3
.b2b6		a9 0f		lda #$0f			lda 	#15
.b2b8		8d bf 07	sta $07bf			sta 	SoundCommandBlock+2 		; Volume (1 byte + 2)
.b2bb		9c c1 07	stz $07c1			stz 	SoundCommandBlock+4 		; default slide (2 bytes +4)
.b2be		9c c2 07	stz $07c2			stz 	SoundCommandBlock+5
.b2c1		b1 30		lda ($30),y			lda 	(codePtr),y
.b2c3		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.b2c5		d0 0e		bne $b2d5			bne 	_SNDPlay
.b2c7		c8		iny				iny
.b2c8		20 6d a2	jsr $a26d			jsr 	Evaluate16BitIntegerSigned 	; Slide
.b2cb		b5 58		lda $58,x			lda 	NSMantissa0,x 				; Slide (2 bytes + 4)
.b2cd		8d c1 07	sta $07c1			sta 	SoundCommandBlock+4
.b2d0		b5 60		lda $60,x			lda 	NSMantissa1,x
.b2d2		8d c2 07	sta $07c2			sta 	SoundCommandBlock+5
.b2d5						_SNDPlay:
.b2d5		5a		phy				phy
.b2d6		a5 58		lda $58				lda 	NSMantissa0 				; channel.
.b2d8		09 10		ora #$10			ora 	#$10 						; 1x = Queue sound
.b2da		a2 bd		ldx #$bd			ldx 	#(SoundCommandBlock & $FF)
.b2dc		a0 07		ldy #$07			ldy 	#(SoundCommandBlock >> 8)
.b2de		20 6b 80	jsr $806b			jsr 	SNDCommand
.b2e1		7a		ply				ply
.b2e2		60		rts				rts
.b2e3						_SndError:
.b2e3		4c 60 a4	jmp $a460			jmp 	RangeError
.07bd						SoundCommandBlock:
>07bd								.fill 	6

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/bytes.asm

.b2e6						StackPushByte:
.b2e6		48		pha				pha 								; save byte on stack
.b2e7		a5 34		lda $34				lda 	basicStack 					; decrement basic stack pointer
.b2e9		d0 08		bne $b2f3			bne 	_SPBNoBorrow
.b2eb		c6 35		dec $35				dec 	basicStack+1 				; borrow
.b2ed		a5 35		lda $35				lda 	basicStack+1 				; check range.
.b2ef		c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.b2f1		90 06		bcc $b2f9			bcc 	_SPBMemory
.b2f3						_SPBNoBorrow:
.b2f3		c6 34		dec $34				dec 	basicStack
.b2f5		68		pla				pla 								; get back and write
.b2f6		92 34		sta ($34)			sta 	(basicStack)
.b2f8		60		rts				rts
.b2f9						_SPBMemory:
.b2f9		a9 12		lda #$12		lda	#18
.b2fb		4c 83 93	jmp $9383		jmp	ErrorHandler
.b2fe						StackPopByte:
.b2fe		b2 34		lda ($34)			lda 	(basicStack) 				; bump the stack pointer.
.b300		e6 34		inc $34				inc 	basicStack
.b302		d0 02		bne $b306			bne 	_SPBNoCarry
.b304		e6 35		inc $35				inc 	basicStack+1
.b306						_SPBNoCarry:
.b306		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/frames.asm

.b307						StackOpen:
.b307		48		pha				pha 								; save frame byte
.b308		29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.b30a		0a		asl a				asl 	a 							; claim twice this for storage
.b30b		49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.b30d		38		sec				sec 								; so basically subtracting from
.b30e		65 34		adc $34				adc 	basicStack 	 				; basicStack
.b310		85 34		sta $34				sta 	basicStack
.b312		b0 09		bcs $b31d			bcs 	_SONoBorrow
>b314		db						.byte 	$DB 						; causes a break in the emulator
.b315		c6 35		dec $35				dec 	basicStack+1
.b317		a5 35		lda $35				lda 	basicStack+1 				; have we reached stack overflow
.b319		c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.b31b		90 04		bcc $b321			bcc 	_SOMemory
.b31d						_SONoBorrow:
.b31d		68		pla				pla 								; get marker back and write at TOS
.b31e		92 34		sta ($34)			sta 	(basicStack)
.b320		60		rts				rts
.b321						_SOMemory:
.b321		a9 12		lda #$12		lda	#18
.b323		4c 83 93	jmp $9383		jmp	ErrorHandler
.b326						StackClose:
.b326		b2 34		lda ($34)			lda 	(basicStack) 				; get TOS marker
.b328		29 0f		and #$0f			and 	#$0F 						; bytes to add back
.b32a		0a		asl a				asl 	a 							; claim twice this.
.b32b		65 34		adc $34				adc 	basicStack 					; add to the stack pointer.
.b32d		85 34		sta $34				sta 	basicStack
.b32f		90 02		bcc $b333			bcc 	_SCExit
.b331		e6 35		inc $35				inc 	basicStack+1
.b333						_SCExit:
.b333		60		rts				rts
.b334						StackCheckFrame:
.b334		48		pha				pha
.b335						_StackRemoveLocals:
.b335		b2 34		lda ($34)			lda 	(basicStack) 				; check for local, keep popping them
.b337		c9 03		cmp #$03			cmp 	#STK_LOCALS+1 				; is the frame a local ? S or N are 1/0
.b339		b0 05		bcs $b340			bcs 	_SCNoLocal
.b33b		20 83 8d	jsr $8d83			jsr 	LocalPopValue 				; restore the local value
.b33e		80 f5		bra $b335			bra 	_StackRemoveLocals 			; gr round again
.b340						_SCNoLocal:
.b340		68		pla				pla 								; get the frame check.
.b341		52 34		eor ($34)			eor 	(basicStack) 				; xor with toS marker
.b343		29 f0		and #$f0			and 	#$F0 						; check type bits
.b345		d0 01		bne $b348			bne 	_SCFError 					; different, we have structures mixed up
.b347		60		rts				rts
.b348						_SCFError:
.b348		8a		txa				txa 								; report error X
.b349		4c 83 93	jmp $9383			jmp 	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/location.asm

.b34c						STKSaveCodePosition:
.b34c		5a		phy				phy
.b34d		98		tya				tya 								; save Y
.b34e		a0 05		ldy #$05			ldy 	#5
.b350		91 34		sta ($34),y			sta 	(basicStack),y
.b352		88		dey				dey 								; save Code Pointer
.b353						_STKSaveLoop:
.b353		b9 2f 00	lda $002f,y			lda 	safePtr-1,y 				; allows us to access the pointer w/out issues.
.b356		91 34		sta ($34),y			sta 	(basicStack),y
.b358		88		dey				dey
.b359		d0 f8		bne $b353			bne 	_STKSaveLoop
.b35b		7a		ply				ply
.b35c		60		rts				rts
.b35d						STKLoadCodePosition:
.b35d		a0 01		ldy #$01			ldy 	#1 							; load code pointer back
.b35f						_STKLoadLoop:
.b35f		b1 34		lda ($34),y			lda 	(basicStack),y
.b361		99 2f 00	sta $002f,y			sta 	safePtr-1,y
.b364		c8		iny				iny
.b365		c0 05		cpy #$05			cpy 	#5
.b367		d0 f6		bne $b35f			bne 	_STKLoadLoop
.b369		b1 34		lda ($34),y			lda 	(basicStack),y 				; get Y offset
.b36b		a8		tay				tay
.b36c		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/setup.asm

.b36d						StackReset:
.b36d		a9 ff		lda #$ff			lda 	#((BasicStackBase+BasicStackSize-1) & $FF)
.b36f		85 34		sta $34				sta 	0+basicStack
.b371		a9 0f		lda #$0f			lda 	#((BasicStackBase+BasicStackSize-1) >> 8)
.b373		85 35		sta $35				sta 	1+basicStack
.b375		a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.b377		92 34		sta ($34)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.b379		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/concrete.asm

.b37a						StringConcrete:
.b37a		5a		phy				phy 								; save position on stack
.b37b		20 c3 9e	jsr $9ec3			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.b37e		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy target string to zTemp1
.b380		85 38		sta $38				sta 	zTemp1
.b382		b5 60		lda $60,x			lda 	NSMantissa1,x
.b384		85 39		sta $39				sta 	zTemp1+1
.b386		a0 ff		ldy #$ff			ldy 	#$FF	 					; calculate string length
.b388						_SALength:
.b388		c8		iny				iny
.b389		b1 38		lda ($38),y			lda 	(zTemp1),y
.b38b		d0 fb		bne $b388			bne 	_SALength
.b38d		c0 fd		cpy #$fd			cpy 	#253 						; string too long - cannot concrete.
.b38f		b0 3d		bcs $b3ce			bcs 	_SALengthError
.b391		98		tya				tya 				 				; length of the new string
.b392		18		clc				clc
.b393		69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.b395		90 02		bcc $b399			bcc 	_SAHaveLength
.b397		a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.b399						_SAHaveLength:
.b399		48		pha				pha 								; save length.
.b39a		38		sec				sec
.b39b		49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.b39d		6d 0a 04	adc $040a			adc 	stringMemory
.b3a0		8d 0a 04	sta $040a			sta 	stringMemory
.b3a3		85 3a		sta $3a				sta 	zTemp2 						; update storage address
.b3a5		95 58		sta $58,x			sta 	NSMantissa0,x 				; update mantissa address
.b3a7		a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.b3a9		6d 0b 04	adc $040b			adc 	stringMemory+1
.b3ac		8d 0b 04	sta $040b			sta 	stringMemory+1
.b3af		85 3b		sta $3b				sta 	zTemp2+1
.b3b1		95 60		sta $60,x			sta 	NSMantissa1,x
.b3b3		68		pla				pla 								; save length-3 (chars allowed) in first byte
.b3b4		38		sec				sec
.b3b5		e9 03		sbc #$03			sbc 	#3
.b3b7		92 3a		sta ($3a)			sta 	(zTemp2)
.b3b9		a9 00		lda #$00			lda 	#0 							; clear the status byte.
.b3bb		a0 01		ldy #$01			ldy 	#1
.b3bd		91 3a		sta ($3a),y			sta 	(zTemp2),y
.b3bf						_SACopyNewString:
.b3bf		a0 00		ldy #$00			ldy 	#0
.b3c1						_SACopyNSLoop:
.b3c1		b1 38		lda ($38),y			lda 	(zTemp1),y 					; get character
.b3c3		c8		iny				iny 								; write two on in string storage
.b3c4		c8		iny				iny
.b3c5		91 3a		sta ($3a),y			sta 	(zTemp2),y
.b3c7		88		dey				dey 								; this makes it one one.
.b3c8		c9 00		cmp #$00			cmp 	#0 							; until EOS copied
.b3ca		d0 f5		bne $b3c1			bne 	_SACopyNSLoop
.b3cc		7a		ply				ply
.b3cd		60		rts				rts
.b3ce						_SALengthError:
.b3ce		a9 09		lda #$09		lda	#9
.b3d0		4c 83 93	jmp $9383		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/stringalloc.asm

.b3d3						StringSystemInitialise:
.b3d3		a9 ff		lda #$ff			lda 	#((EndVariableSpace-1) & $FF)
.b3d5		8d 0a 04	sta $040a			sta 	0+stringMemory
.b3d8		a9 1f		lda #$1f			lda 	#((EndVariableSpace-1) >> 8)
.b3da		8d 0b 04	sta $040b			sta 	1+stringMemory
.b3dd		9c ff 1f	stz $1fff			stz 	EndVariableSpace-1 			; put a zero at the end, so know end of string memory.
.b3e0		60		rts				rts
.b3e1						StringSpaceInitialise:
.b3e1		20 c3 9e	jsr $9ec3			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.b3e4		a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.b3e6		8d 0c 04	sta $040c			sta 	stringInitialised
.b3e9		ad 0a 04	lda $040a			lda 	stringMemory 				; allocate 256 bytes for one concreted string
.b3ec		8d 0d 04	sta $040d			sta 	stringTempPointer 			; so temporary string space is allocated below that.
.b3ef		ad 0b 04	lda $040b			lda 	stringMemory+1
.b3f2		3a		dec a				dec 	a
.b3f3		8d 0e 04	sta $040e			sta 	stringTempPointer+1
.b3f6		60		rts				rts
.b3f7						StringTempAllocate:
.b3f7		c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.b3f9		b0 30		bcs $b42b			bcs 	_STALength
.b3fb		2c 0c 04	bit $040c			bit 	stringInitialised 			; already initialised
.b3fe		30 05		bmi $b405			bmi 	_STAAllocate
.b400		48		pha				pha 								; save value to subtract.
.b401		20 e1 b3	jsr $b3e1			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.b404		68		pla				pla 								; restore it
.b405						_STAAllocate:
.b405		49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.b407		18		clc				clc  								; deliberate allows one more
.b408		6d 0d 04	adc $040d			adc 	stringTempPointer 			; subtract from temp pointer
.b40b		8d 0d 04	sta $040d			sta 	stringTempPointer
.b40e		95 58		sta $58,x			sta 	NSMantissa0,x 				; address in mantissa
.b410		85 3c		sta $3c				sta 	zsTemp 						; and zsTemp
.b412		ad 0e 04	lda $040e			lda 	stringTempPointer+1
.b415		69 ff		adc #$ff			adc 	#$FF
.b417		8d 0e 04	sta $040e			sta 	stringTempPointer+1
.b41a		85 3d		sta $3d				sta 	zsTemp+1
.b41c		95 60		sta $60,x			sta 	NSMantissa1,x
.b41e		74 68		stz $68,x			stz 	NSMantissa2,x 				; set the typing data and the upper address bytes.
.b420		74 70		stz $70,x			stz 	NSMantissa3,x
.b422		a9 10		lda #$10			lda 	#NSTString
.b424		95 50		sta $50,x			sta 	NSStatus,x
.b426		a9 00		lda #$00			lda 	#0 							; clear the target string
.b428		92 3c		sta ($3c)			sta 	(zsTemp)
.b42a		60		rts				rts
.b42b						_STALength:
.b42b		a9 09		lda #$09		lda	#9
.b42d		4c 83 93	jmp $9383		jmp	ErrorHandler
.b430						StringTempWrite:
.b430		48		pha				pha
.b431		92 3c		sta ($3c)			sta 	(zsTemp) 					; write byte
.b433		e6 3c		inc $3c				inc 	zsTemp 						; bump pointer
.b435		d0 02		bne $b439			bne 	_STWNoCarry
.b437		e6 3d		inc $3d				inc 	zsTemp+1
.b439						_STWNoCarry:
.b439		a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.b43b		92 3c		sta ($3c)			sta 	(zsTemp)
.b43d		68		pla				pla
.b43e		60		rts				rts

;******  Return to file: _basic.asm

.b43f						StartModuleCode:

;******  Processing file: ../modules/_build/_hardware.module

=1						hardwareIntegrated=1
=0						CONBlack = 0
=1						CONGrey = 1
=2						CONDarkBlue = 2
=3						CONGreen = 3
=4						CONPurple = 4
=5						CONBrown = 5
=6						CONOrange = 6
=7						CONCyan = 7
=8						CONDarkGrey = 8
=9						CONLightGrey = 9
=10						CONLightBlue = 10
=11						CONLightGreen = 11
=12						CONPink = 12
=13						CONRed = 13
=14						CONYellow = 14
=15						CONWhite = 15
=9						CONForeground = CONLightGrey
=2						CONBackground = CONDarkBlue
=9						CLICommandLine = CONLightGrey
=5						CLIFComment = CONBrown
=14						CLIBComment = CONYellow
=13						CLILineNumber = CONRed
=6						CLIToken = CONOrange
=7						CLIConstant = CONCyan
=14						CLIIdentifier = CONYellow
=12						CLIPunctuation = CONPink
=15						CLIData = CONWhite
.c000	a000					Export_EXTPrintNoControl:
.c000	a000	48		pha				pha
.c001	a001	da		phx				phx
.c002	a002	5a		phy				phy
.c003	a003	a6 01		ldx $01				ldx 	1
.c005	a005	da		phx				phx
.c006	a006	ac c4 07	ldy $07c4			ldy 	EXTColumn 					; Y = Row, e.g. points to character.
.c009	a009	80 11		bra $a01c			bra 	PrintCharacterOnly
.c00b	a00b					Export_EXTPrintCharacter:
.c00b	a00b					PAGEDPrintCharacter:
.c00b	a00b	48		pha				pha
.c00c	a00c	da		phx				phx
.c00d	a00d	5a		phy				phy
.c00e	a00e	a6 01		ldx $01				ldx 	1
.c010	a010	da		phx				phx
.c011	a011	ac c4 07	ldy $07c4			ldy 	EXTColumn 					; Y = Row, e.g. points to character.
.c014	a014	09 00		ora #$00			ora 	#$00 						; check $80-$FF
.c016	a016	30 48		bmi $a060			bmi 	EXPCColour
.c018	a018	c9 20		cmp #$20			cmp 	#$20 						; check $00-$1F
.c01a	a01a	90 4d		bcc $a069			bcc 	EXPCControl
.c01c	a01c					PrintCharacterOnly:
.c01c	a01c	a2 02		ldx #$02			ldx 	#2 							; select char memory
.c01e	a01e	86 01		stx $01				stx 	1
.c020	a020	91 40		sta ($40),y			sta 	(EXTAddress),y
.c022	a022	e6 01		inc $01				inc 	1 							; select colour memory
.c024	a024	ad c5 07	lda $07c5			lda 	EXTTextColour
.c027	a027	91 40		sta ($40),y			sta 	(EXTAddress),y
.c029	a029	c8		iny				iny 								; advance horizontal position
.c02a	a02a	8c c4 07	sty $07c4			sty 	EXTColumn
.c02d	a02d	cc c6 07	cpy $07c6			cpy 	EXTScreenWidth 				; reached RHS ?
.c030	a030	90 63		bcc $a095			bcc 	EXPCExit 					; no, then exit.
.c032	a032					EXPCCRLF:
.c032	a032	ee c3 07	inc $07c3			inc 	EXTRow  					; bump row
.c035	a035	9c c4 07	stz $07c4			stz 	EXTColumn 					; back to column 0
.c038	a038	ad c3 07	lda $07c3			lda 	EXTRow 						; check if reached the bottom ?
.c03b	a03b	cd c7 07	cmp $07c7			cmp 	EXTScreenHeight 			; if so, then scroll.
.c03e	a03e	f0 18		beq $a058			beq 	EXPCScroll
.c040	a040	18		clc				clc 								; add width to address.
.c041	a041	a5 40		lda $40				lda 	EXTAddress
.c043	a043	6d c6 07	adc $07c6			adc 	EXTScreenWidth
.c046	a046	85 40		sta $40				sta 	EXTAddress
.c048	a048	90 4b		bcc $a095			bcc 	EXPCExit
.c04a	a04a	e6 41		inc $41				inc 	EXTAddress+1
.c04c	a04c	80 47		bra $a095			bra 	EXPCExit
.c04e	a04e					EXPCLeft:
.c04e	a04e	ce c4 07	dec $07c4			dec 	EXTColumn
.c051	a051	10 42		bpl $a095			bpl 	EXPCExit
.c053	a053					EXPCBegin:
.c053	a053	9c c4 07	stz $07c4			stz 	EXTColumn
.c056	a056	80 3d		bra $a095			bra 	EXPCExit
.c058	a058					EXPCScroll:
.c058	a058	ce c3 07	dec $07c3			dec 	EXTRow 						; the height-1 th line.
.c05b	a05b	20 46 a1	jsr $a146			jsr 	EXTScreenScroll 			; scroll the screen
.c05e	a05e	80 35		bra $a095			bra 	EXPCExit
.c060	a060					EXPCColour:
.c060	a060	c9 a0		cmp #$a0			cmp 	#$A0						; 80-9F set foreground/background
.c062	a062	b0 31		bcs $a095			bcs 	EXPCExit
.c064	a064	20 26 a1	jsr $a126			jsr 	EXPCHandleColour
.c067	a067	80 2c		bra $a095			bra 	EXPCExit
.c069	a069					EXPCControl:
.c069	a069	c9 11		cmp #$11			cmp 	#$11 						; only handle 00-10.
.c06b	a06b	b0 28		bcs $a095			bcs 	EXPCExit
.c06d	a06d	0a		asl a				asl 	a 							; double into X
.c06e	a06e	aa		tax				tax
.c06f	a06f	7c 04 a1	jmp ($a104,x)			jmp 	(EXPCActionTable,x) 		; and execute code.
.c072	a072					EXPCUp:
.c072	a072	ad c3 07	lda $07c3			lda 	EXTRow 						; already at top ?
.c075	a075	f0 1e		beq $a095			beq 	EXPCExit
.c077	a077	ce c3 07	dec $07c3			dec 	EXTRow 						; up one in position/address
.c07a	a07a	38		sec				sec
.c07b	a07b	a5 40		lda $40				lda 	EXTAddress
.c07d	a07d	ed c6 07	sbc $07c6			sbc 	EXTScreenWidth
.c080	a080	85 40		sta $40				sta 	EXTAddress
.c082	a082	b0 11		bcs $a095			bcs 	EXPCExit
.c084	a084	c6 41		dec $41				dec 	EXTAddress+1
.c086	a086	80 0d		bra $a095			bra 	EXPCExit
.c088	a088					EXPCRight:
.c088	a088	c8		iny				iny
.c089	a089	8c c4 07	sty $07c4			sty 	EXTColumn
.c08c	a08c	cc c6 07	cpy $07c6			cpy 	EXTScreenWidth
.c08f	a08f	d0 04		bne $a095			bne 	EXPCExit
.c091	a091	88		dey				dey
.c092	a092					EXPCSetColumnY:
.c092	a092	8c c4 07	sty $07c4			sty 	EXTColumn
.c095	a095					EXPCExit:
.c095	a095	20 bb a1	jsr $a1bb			jsr 	EXTSetHardwareCursor 		; place the physical cursor.
.c098	a098	68		pla				pla
.c099	a099	85 01		sta $01				sta 	1
.c09b	a09b	7a		ply				ply
.c09c	a09c	fa		plx				plx
.c09d	a09d	68		pla				pla
.c09e	a09e	60		rts				rts
.c09f	a09f					EXPCClearScreen:
.c09f	a09f	20 78 a1	jsr $a178			jsr		EXTClearScreenCode
.c0a2	a0a2	80 f1		bra $a095			bra 	EXPCExit
.c0a4	a0a4					EXPCDown:
.c0a4	a0a4	ad c7 07	lda $07c7			lda 	EXTScreenHeight 			; at the bottom
.c0a7	a0a7	3a		dec a				dec 	a
.c0a8	a0a8	cd c3 07	cmp $07c3			cmp 	EXTRow
.c0ab	a0ab	f0 e8		beq $a095			beq 	EXPCExit
.c0ad	a0ad	ee c3 07	inc $07c3			inc 	EXTRow 						; down one in position/address
.c0b0	a0b0	18		clc				clc
.c0b1	a0b1	a5 40		lda $40				lda 	EXTAddress
.c0b3	a0b3	6d c6 07	adc $07c6			adc 	EXTScreenWidth
.c0b6	a0b6	85 40		sta $40				sta 	EXTAddress
.c0b8	a0b8	90 db		bcc $a095			bcc 	EXPCExit
.c0ba	a0ba	e6 41		inc $41				inc 	EXTAddress+1
.c0bc	a0bc	80 d7		bra $a095			bra 	EXPCExit
.c0be	a0be					EXPCTab:
.c0be	a0be	ad c4 07	lda $07c4			lda 	EXTColumn 					; next tab stop
.c0c1	a0c1	29 f8		and #$f8			and 	#$F8
.c0c3	a0c3	18		clc				clc
.c0c4	a0c4	69 08		adc #$08			adc 	#8
.c0c6	a0c6	8d c4 07	sta $07c4			sta 	EXTColumn
.c0c9	a0c9	cd c6 07	cmp $07c6			cmp 	EXTScreenWidth 				; too far, stick end of line.
.c0cc	a0cc	90 c7		bcc $a095			bcc 	EXPCExit
.c0ce	a0ce	80 10		bra $a0e0			bra 	EXPCEnd
.c0d0	a0d0					EXPCBackSpace:
.c0d0	a0d0	88		dey				dey
.c0d1	a0d1	30 c2		bmi $a095			bmi 	EXPCExit
.c0d3	a0d3	ce c4 07	dec $07c4			dec 	EXTColumn
.c0d6	a0d6	a9 02		lda #$02			lda 	#2
.c0d8	a0d8	85 01		sta $01				sta 	1
.c0da	a0da	a9 20		lda #$20			lda 	#32
.c0dc	a0dc	91 40		sta ($40),y			sta 	(EXTAddress),y
.c0de	a0de	80 b5		bra $a095			bra 	EXPCExit
.c0e0	a0e0					EXPCEnd:
.c0e0	a0e0	a9 02		lda #$02			lda 	#2 							; access text screen
.c0e2	a0e2	85 01		sta $01				sta 	1
.c0e4	a0e4	ac c6 07	ldy $07c6			ldy 	EXTScreenWidth 				; point to last character
.c0e7	a0e7	88		dey				dey
.c0e8	a0e8					EXPCEndSearch:
.c0e8	a0e8	88		dey				dey 								; if past start, move to col 0.
.c0e9	a0e9	30 06		bmi $a0f1			bmi 	EXPCFound
.c0eb	a0eb	b1 40		lda ($40),y			lda 	(EXTAddress),y 				; keep going back till non space found
.c0ed	a0ed	c9 20		cmp #$20			cmp 	#' '
.c0ef	a0ef	f0 f7		beq $a0e8			beq 	EXPCEndSearch
.c0f1	a0f1					EXPCFound:
.c0f1	a0f1	c8		iny				iny 								; move to following cell.
.c0f2	a0f2	80 9e		bra $a092			bra 	EXPCSetColumnY
.c0f4	a0f4					EXPCClearEOL:
.c0f4	a0f4	a9 02		lda #$02			lda 	#2 							; access character RAM
.c0f6	a0f6	85 01		sta $01				sta 	1
.c0f8	a0f8	a9 20		lda #$20			lda 	#' ' 						; write space
.c0fa	a0fa	91 40		sta ($40),y			sta 	(EXTAddress),y
.c0fc	a0fc	c8		iny				iny
.c0fd	a0fd	cc c6 07	cpy $07c6			cpy 	EXTScreenWidth 				; until RHS of screen.
.c100	a100	90 f2		bcc $a0f4			bcc 	EXPCClearEOL
.c102	a102	80 91		bra $a095			bra 	EXPCExit
.c104	a104					EXPCActionTable:
>c104	a104	95 a0						.word 	EXPCExit 					; 00
>c106	a106	53 a0						.word 	EXPCBegin 					; 01 A Start of Line
>c108	a108	4e a0						.word 	EXPCLeft 					; 02 B Left
>c10a	a10a	95 a0						.word 	EXPCExit 					; 03 <Break>
>c10c	a10c	95 a0						.word 	EXPCExit 					; 04
>c10e	a10e	e0 a0						.word 	EXPCEnd 					; 05 E End of Line
>c110	a110	88 a0						.word 	EXPCRight 					; 06 F Right
>c112	a112	95 a0						.word 	EXPCExit 					; 07
>c114	a114	d0 a0						.word 	EXPCBackSpace 				; 08 H Backspace
>c116	a116	be a0						.word 	EXPCTab 					; 09 I Tab
>c118	a118	95 a0						.word 	EXPCExit 					; 0A
>c11a	a11a	f4 a0						.word 	EXPCClearEOL 				; 0B K Clear to EOL
>c11c	a11c	9f a0						.word 	EXPCClearScreen			; 0C L CLS
>c11e	a11e	32 a0						.word 	EXPCCRLF 					; 0D M CR/LF
>c120	a120	a4 a0						.word 	EXPCDown 					; 0E N Down
>c122	a122	95 a0						.word 	EXPCExit 					; 0F
>c124	a124	72 a0						.word 	EXPCUp 					; 10 P Up
.c126	a126					EXPCHandleColour:
.c126	a126	c9 90		cmp #$90			cmp 	#$90 						; 8x foreground 9x background
.c128	a128	b0 16		bcs $a140			bcs 	EXPCBackground
.c12a	a12a	0a		asl a				asl 	a 							; shift it 4 bits to the right.
.c12b	a12b	0a		asl a				asl 	a
.c12c	a12c	0a		asl a				asl 	a
.c12d	a12d	0a		asl a				asl 	a
.c12e	a12e	a2 0f		ldx #$0f			ldx 	#$0F 						; Mask in X
.c130	a130					EXPCUpdate:
.c130	a130	48		pha				pha 								; save new colour
.c131	a131	8a		txa				txa 								; get mask
.c132	a132	2d c5 07	and $07c5			and 	EXTTextColour 				; mask out old.
.c135	a135	8d c5 07	sta $07c5			sta 	EXTTextColour
.c138	a138	68		pla				pla 								; or in new colour
.c139	a139	0d c5 07	ora $07c5			ora 	EXTTextColour
.c13c	a13c	8d c5 07	sta $07c5			sta 	EXTTextColour
.c13f	a13f	60		rts				rts
.c140	a140					EXPCBackground:
.c140	a140	29 0f		and #$0f			and 	#$0F 						; get the colour
.c142	a142	a2 f0		ldx #$f0			ldx 	#$F0 						; mask
.c144	a144	80 ea		bra $a130			bra 	EXPCUpdate
.c146	a146					EXTScreenScroll:
.c146	a146	a9 02		lda #$02			lda 	#2 							; select text page
.c148	a148	85 01		sta $01				sta 	1
.c14a	a14a	a9 20		lda #$20			lda		#32 						; fill with space
.c14c	a14c	20 a0 a2	jsr $a2a0			jsr 	EXTScrollFill
.c14f	a14f	e6 01		inc $01				inc 	1 							; select colour page
.c151	a151	ad c5 07	lda $07c5			lda 	EXTTextColour
.c154	a154	20 a0 a2	jsr $a2a0			jsr 	EXTScrollFill
.c157	a157	60		rts				rts
.c158	a158					PAGEDPrintHex:
.c158	a158	48		pha				pha
.c159	a159	a9 20		lda #$20			lda 	#' '
.c15b	a15b	20 0b a0	jsr $a00b			jsr 	PAGEDPrintCharacter
.c15e	a15e	68		pla				pla
.c15f	a15f	48		pha				pha
.c160	a160	4a		lsr a				lsr 	a
.c161	a161	4a		lsr a				lsr 	a
.c162	a162	4a		lsr a				lsr 	a
.c163	a163	4a		lsr a				lsr 	a
.c164	a164	20 68 a1	jsr $a168			jsr 	_PPHNibble
.c167	a167	68		pla				pla
.c168	a168					_PPHNibble:
.c168	a168	48		pha				pha
.c169	a169	29 0f		and #$0f			and 	#15
.c16b	a16b	c9 0a		cmp #$0a			cmp 	#10
.c16d	a16d	90 02		bcc $a171			bcc 	_PPHOut
.c16f	a16f	69 06		adc #$06			adc 	#6
.c171	a171	69 30		adc #$30	_PPHOut:adc 	#48
.c173	a173	20 0b a0	jsr $a00b			jsr		PAGEDPrintCharacter
.c176	a176	68		pla				pla
.c177	a177	60		rts				rts
.c178	a178					EXTClearScreenCode:
.c178	a178	a9 02		lda #$02			lda 	#2 							; select text page
.c17a	a17a	85 01		sta $01				sta 	1
.c17c	a17c	a9 20		lda #$20			lda		#32 						; fill with space
.c17e	a17e	20 8b a1	jsr $a18b			jsr 	_EXTCSFill
.c181	a181	e6 01		inc $01				inc 	1 							; select colour page
.c183	a183	ad c5 07	lda $07c5			lda 	EXTTextColour
.c186	a186	20 8b a1	jsr $a18b			jsr 	_EXTCSFill
.c189	a189	80 22		bra $a1ad			bra 	EXTHomeCursor				; home cursor
.c18b	a18b					_EXTCSFill:
.c18b	a18b	aa		tax				tax
.c18c	a18c	a9 00		lda #$00			lda 	#EXTMemory & $FF
.c18e	a18e	85 40		sta $40				sta 	EXTAddress
.c190	a190	a9 c0		lda #$c0			lda 	#EXTMemory >> 8
.c192	a192	85 41		sta $41				sta 	EXTAddress+1
.c194	a194					_EXTCSFill1:
.c194	a194	a0 00		ldy #$00			ldy 	#0
.c196	a196	8a		txa				txa
.c197	a197					_EXTCSFill2:
.c197	a197	91 40		sta ($40),y			sta 	(EXTAddress),y
.c199	a199	c8		iny				iny
.c19a	a19a	d0 fb		bne $a197			bne 	_EXTCSFill2
.c19c	a19c	e6 41		inc $41				inc 	EXTAddress+1
.c19e	a19e	a5 41		lda $41				lda 	EXTAddress+1
.c1a0	a1a0	c9 d2		cmp #$d2			cmp 	#$D2
.c1a2	a1a2	d0 f0		bne $a194			bne 	_EXTCSFill1
.c1a4	a1a4	8a		txa				txa
.c1a5	a1a5					_EXTCSFill3:
.c1a5	a1a5	91 40		sta ($40),y			sta 	(EXTAddress),y
.c1a7	a1a7	c8		iny				iny
.c1a8	a1a8	c0 c0		cpy #$c0			cpy 	#$C0
.c1aa	a1aa	d0 f9		bne $a1a5			bne 	_EXTCSFill3
.c1ac	a1ac	60		rts				rts
.c1ad	a1ad					EXTHomeCursor:
.c1ad	a1ad	9c c3 07	stz $07c3			stz 	EXTRow 						; reset row & column
.c1b0	a1b0	9c c4 07	stz $07c4			stz 	EXTColumn
.c1b3	a1b3	a9 00		lda #$00			lda 	#EXTMemory & $FF 			; set address in I/O memory
.c1b5	a1b5	85 40		sta $40				sta 	EXTAddress
.c1b7	a1b7	a9 c0		lda #$c0			lda 	#EXTMemory >> 8
.c1b9	a1b9	85 41		sta $41				sta 	EXTAddress+1
.c1bb	a1bb					EXTSetHardwareCursor:
.c1bb	a1bb	64 01		stz $01				stz 	1 							; I/O Page zero
.c1bd	a1bd	a9 05		lda #$05			lda 	#1+4 						; enable cursor
.c1bf	a1bf	8d 10 d0	sta $d010			sta 	$D010
.c1c2	a1c2	a9 d6		lda #$d6			lda 	#214 						; cursor character
.c1c4	a1c4	8d 12 d0	sta $d012			sta 	$D012
.c1c7	a1c7	ad c4 07	lda $07c4			lda 	EXTColumn
.c1ca	a1ca	8d 14 d0	sta $d014			sta 	$D014 						; set cursor position
.c1cd	a1cd	9c 15 d0	stz $d015			stz 	$D015
.c1d0	a1d0	ad c3 07	lda $07c3			lda 	EXTRow
.c1d3	a1d3	8d 16 d0	sta $d016			sta 	$D016
.c1d6	a1d6	9c 17 d0	stz $d017			stz 	$D017
.c1d9	a1d9	60		rts				rts
=$c000						EXTMemory = $C000
=$02						EXTTextPage = $02
=$03						EXTColourPage = $03
=1						EXTDummySpace = 1 							; fake-space for CR character.
=0						EXTCBlack = 0
.07c3						EXTRow:
>07c3								.fill 	1
.07c4						EXTColumn:
>07c4								.fill 	1
.07c5						EXTTextColour:
>07c5								.fill 	1
.07c6						EXTScreenWidth:
>07c6								.fill 	1
.07c7						EXTScreenHeight:
>07c7								.fill 	1
.0040						EXTAddress:
>0040								.fill 	2
.c1da	a1da					Export_EXTInitialise:
.c1da	a1da	64 01		stz $01				stz 	1 							; Access I/O page 0
.c1dc	a1dc	9c 04 d0	stz $d004			stz 	$D004 						; Disable border
.c1df	a1df	9c 08 d0	stz $d008			stz 	$D008
.c1e2	a1e2	9c 09 d0	stz $d009			stz 	$D009
.c1e5	a1e5	a9 09		lda #$09			lda 	#1+8						; Timer On at 70Hz counting up.
.c1e7	a1e7	8d 58 d6	sta $d658			sta 	$D658
.c1ea	a1ea	a9 52		lda #$52			lda 	#$52
.c1ec	a1ec	8d c5 07	sta $07c5			sta 	EXTTextColour
.c1ef	a1ef	a9 50		lda #$50			lda 	#80 						; set screen dimensions.
.c1f1	a1f1	8d c6 07	sta $07c6			sta 	EXTScreenWidth
.c1f4	a1f4	a9 3c		lda #$3c			lda 	#60
.c1f6	a1f6	8d c7 07	sta $07c7			sta 	EXTScreenHeight
.c1f9	a1f9	20 78 a1	jsr $a178			jsr 	EXTClearScreenCode 			; clear the screen
.c1fc	a1fc					_EXMoveDown:
.c1fc	a1fc	a9 0d		lda #$0d			lda 	#13
.c1fe	a1fe	20 0b a0	jsr $a00b			jsr 	PAGEDPrintCharacter
.c201	a201	ad c3 07	lda $07c3			lda 	EXTRow
.c204	a204	c9 0a		cmp #$0a			cmp 	#Header_Height-4
.c206	a206	d0 f4		bne $a1fc			bne 	_EXMoveDown
.c208	a208	20 0e a2	jsr $a20e			jsr 	EXTShowHeader
.c20b	a20b	64 01		stz $01				stz 	1
.c20d	a20d	60		rts				rts
.c20e	a20e					EXTShowHeader:
.c20e	a20e	a5 01		lda $01				lda 	1
.c210	a210	48		pha				pha
.c211	a211	a5 0b		lda $0b				lda 	8+3
.c213	a213	48		pha				pha
.c214	a214	a5 0c		lda $0c				lda 	8+4
.c216	a216	18		clc				clc
.c217	a217	69 03		adc #$03			adc 	#3
.c219	a219	85 0b		sta $0b				sta 	8+3
.c21b	a21b	a2 92		ldx #$92			ldx 	#(Header_jchars & $FF)
.c21d	a21d	a0 61		ldy #$61			ldy 	#(Header_jchars >> 8)-$40
.c21f	a21f	64 01		stz $01				stz 	1
.c221	a221	ad a7 d6	lda $d6a7			lda 	$D6A7
.c224	a224	29 10		and #$10			and 	#$10
.c226	a226	a2 21		ldx #$21			ldx 	#(Header_kchars & $FF)
.c228	a228	a0 65		ldy #$65			ldy 	#(Header_kchars >> 8)-$40
.c22a	a22a					_EXTSHNotK1:
.c22a	a22a	a9 02		lda #$02			lda 	#2
.c22c	a22c	20 5a a2	jsr $a25a			jsr 	_ESHCopyBlock
.c22f	a22f	a2 00		ldx #$00			ldx 	#(Header_jattrs & $FF)
.c231	a231	a0 60		ldy #$60			ldy 	#(Header_jattrs >> 8)-$40
.c233	a233	64 01		stz $01				stz 	1
.c235	a235	ad a7 d6	lda $d6a7			lda 	$D6A7
.c238	a238	29 10		and #$10			and 	#$10
.c23a	a23a	f0 04		beq $a240			beq 	_EXTSHNotK2
.c23c	a23c	a2 c2		ldx #$c2			ldx 	#(Header_kattrs & $FF)
.c23e	a23e	a0 63		ldy #$63			ldy 	#(Header_kattrs >> 8)-$40
.c240	a240					_EXTSHNotK2:
.c240	a240	a9 03		lda #$03			lda 	#3
.c242	a242	20 5a a2	jsr $a25a			jsr 	_ESHCopyBlock
.c245	a245	64 01		stz $01				stz 	1
.c247	a247	a2 3f		ldx #$3f			ldx 	#16*4-1
.c249	a249					_EXTCopyLUT:
.c249	a249	bd 23 67	lda $6723,x			lda 	Header_Palette-$4000,x
.c24c	a24c	9d 00 d8	sta $d800,x			sta 	$D800,x
.c24f	a24f	9d 40 d8	sta $d840,x			sta 	$D840,x
.c252	a252	ca		dex				dex
.c253	a253	10 f4		bpl $a249			bpl 	_EXTCopyLUT
.c255	a255	68		pla				pla
.c256	a256	85 0b		sta $0b				sta 	8+3
.c258	a258	68		pla				pla
.c259	a259	60		rts				rts
.c25a	a25a					_ESHCopyBlock:
.c25a	a25a	85 01		sta $01				sta 	1
.c25c	a25c	86 36		stx $36				stx 	zTemp0 						; zTemp0 is RLE packed data
.c25e	a25e	84 37		sty $37				sty 	zTemp0+1
.c260	a260	a9 00		lda #$00			lda 	#(($C000) & $FF)
.c262	a262	85 38		sta $38				sta 	0+zTemp1
.c264	a264	a9 c0		lda #$c0			lda 	#(($C000) >> 8)
.c266	a266	85 39		sta $39				sta 	1+zTemp1
.c268	a268					_ESHCopyLoop:
.c268	a268	b2 36		lda ($36)			lda 	(zTemp0) 					; get next character
.c26a	a26a	c9 ff		cmp #$ff			cmp 	#Header_RLE 				; packed ?
.c26c	a26c	f0 1b		beq $a289			beq 	_ESHUnpack
.c26e	a26e	92 38		sta ($38)			sta 	(zTemp1) 					; copy it out.
.c270	a270	a9 01		lda #$01			lda 	#1 							; source add 1
.c272	a272	a0 01		ldy #$01			ldy 	#1 							; dest add 1
.c274	a274					_ESHNext:
.c274	a274	18		clc				clc 								; zTemp0 + A
.c275	a275	65 36		adc $36				adc 	zTemp0
.c277	a277	85 36		sta $36				sta 	zTemp0
.c279	a279	90 02		bcc $a27d			bcc 	_ESHNoCarry
.c27b	a27b	e6 37		inc $37				inc 	zTemp0+1
.c27d	a27d					_ESHNoCarry:
.c27d	a27d	98		tya				tya 								; zTemp1 + Y
.c27e	a27e	18		clc				clc
.c27f	a27f	65 38		adc $38				adc 	zTemp1
.c281	a281	85 38		sta $38				sta 	zTemp1
.c283	a283	90 e3		bcc $a268			bcc 	_ESHCopyLoop
.c285	a285	e6 39		inc $39				inc 	zTemp1+1
.c287	a287	80 df		bra $a268			bra 	_ESHCopyLoop
.c289	a289					_ESHUnpack:
.c289	a289	a0 02		ldy #$02			ldy 	#2 							; get count into X
.c28b	a28b	b1 36		lda ($36),y			lda 	(zTemp0),y
.c28d	a28d	aa		tax				tax
.c28e	a28e	88		dey				dey 								; byte into A
.c28f	a28f	b1 36		lda ($36),y			lda 	(zTemp0),y
.c291	a291	f0 0c		beq $a29f			beq 	_ESHExit 					; exit if zero.
.c293	a293	a0 00		ldy #$00			ldy 	#0 							; copy start position
.c295	a295					_ESHCopyOut:
.c295	a295	91 38		sta ($38),y			sta 	(zTemp1),y
.c297	a297	c8		iny				iny
.c298	a298	ca		dex				dex
.c299	a299	d0 fa		bne $a295			bne 	_ESHCopyOut
.c29b	a29b	a9 03		lda #$03			lda 	#3 							; Y is bytes on screen, 3 bytes from source
.c29d	a29d	80 d5		bra $a274			bra 	_ESHNext
.c29f	a29f					_ESHExit:
.c29f	a29f	60		rts				rts
.c2a0	a2a0					EXTScrollFill:
.c2a0	a2a0	aa		tax				tax									; save value to fill with
.c2a1	a2a1	a5 36		lda $36				lda 	zTemp0 						; save zTemp0 (dest) zTemp1 (src)
.c2a3	a2a3	48		pha				pha
.c2a4	a2a4	a5 37		lda $37				lda 	zTemp0+1
.c2a6	a2a6	48		pha				pha
.c2a7	a2a7	a5 38		lda $38				lda 	zTemp1
.c2a9	a2a9	48		pha				pha
.c2aa	a2aa	a5 39		lda $39				lda 	zTemp1+1
.c2ac	a2ac	48		pha				pha
.c2ad	a2ad	a9 c0		lda #$c0			lda 	#$C0 						; copy from C000+length to C000
.c2af	a2af	85 37		sta $37				sta 	zTemp0+1
.c2b1	a2b1	85 39		sta $39				sta 	zTemp1+1
.c2b3	a2b3	64 36		stz $36				stz 	zTemp0
.c2b5	a2b5	ad c6 07	lda $07c6			lda 	EXTScreenWidth
.c2b8	a2b8	85 38		sta $38				sta 	zTemp1
.c2ba	a2ba	a0 00		ldy #$00			ldy 	#0
.c2bc	a2bc					_EXSFCopy1:
.c2bc	a2bc	b1 38		lda ($38),y			lda 	(zTemp1),y
.c2be	a2be	91 36		sta ($36),y			sta 	(zTemp0),y
.c2c0	a2c0	c8		iny				iny
.c2c1	a2c1	d0 f9		bne $a2bc			bne 	_EXSFCopy1
.c2c3	a2c3	e6 37		inc $37				inc 	zTemp0+1 					; next page
.c2c5	a2c5	e6 39		inc $39				inc 	zTemp1+1
.c2c7	a2c7	a5 39		lda $39				lda 	zTemp1+1
.c2c9	a2c9	c9 d3		cmp #$d3			cmp 	#$D3
.c2cb	a2cb	d0 ef		bne $a2bc			bne 	_EXSFCopy1
.c2cd	a2cd	ac c6 07	ldy $07c6			ldy 	EXTScreenWidth 				; blank the bottom line.
.c2d0	a2d0	8a		txa				txa
.c2d1	a2d1					_EXSFFill1:
.c2d1	a2d1	88		dey				dey
.c2d2	a2d2	91 40		sta ($40),y			sta 	(EXTAddress),y
.c2d4	a2d4	c0 00		cpy #$00			cpy 	#0
.c2d6	a2d6	10 f9		bpl $a2d1			bpl 	_EXSFFill1
.c2d8	a2d8	68		pla				pla
.c2d9	a2d9	85 39		sta $39				sta 	zTemp1+1
.c2db	a2db	68		pla				pla
.c2dc	a2dc	85 38		sta $38				sta 	zTemp1
.c2de	a2de	68		pla				pla
.c2df	a2df	85 37		sta $37				sta 	zTemp0+1
.c2e1	a2e1	68		pla				pla
.c2e2	a2e2	85 36		sta $36				sta 	zTemp0
.c2e4	a2e4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_graphics.module

=1						graphicsIntegrated=1
=0						GCMD_Initialise = 0*2
=2						GCMD_BitmapCtl = 1*2
=4						GCMD_SpriteCtl = 2*2
=6						GCMD_Clear = 3*2
=8						GCMD_Colour = 4*2
=10						GCMD_DrawFont = 5*2
=12						GCMD_DrawSprite = 6*2
=14						GCMD_SpriteUse = 7*2
=16						GCMD_SpriteImage = 8*2
=18						GCMD_SpriteCollide = 9*2
=64						GCMD_Move = 32*2
=66						GCMD_Line = 33*2
=68						GCMD_FrameRect = 34*2
=70						GCMD_FillRect = 35*2
=72						GCMD_FrameCircle = 36*2
=74						GCMD_FillCircle = 37*2
=80						GCMD_Plot = 40*2
=82						GCMD_SpriteMove = 41*2
=42						GRFirstFreeCode = 42
.c2e5	a2e5					GRVectorTable:
>c2e5	a2e5	36 a5					.word	GXInitialise             ; $00 Initialise
>c2e7	a2e7	50 a5					.word	GXControlBitmap          ; $01 BitmapCtl
>c2e9	a2e9	98 a5					.word	GXControlSprite          ; $02 SpriteCtl
>c2eb	a2eb	e6 a4					.word	GXClearBitmap            ; $03 Clear
>c2ed	a2ed	27 a7					.word	GXSetColourMode          ; $04 Colour
>c2ef	a2ef	ef a8					.word	GXFontHandler            ; $05 DrawFont
>c2f1	a2f1	37 a9					.word	GXSpriteHandler          ; $06 DrawSprite
>c2f3	a2f3	a8 a9					.word	GXSelect                 ; $07 SpriteUse
>c2f5	a2f5	d1 a9					.word	GXSelectImage            ; $08 SpriteImage
>c2f7	a2f7	58 ab					.word	GXCollide                ; $09 SpriteCollide
>c2f9	a2f9	98 a3					.word	GRUndefined              ; $0a
>c2fb	a2fb	98 a3					.word	GRUndefined              ; $0b
>c2fd	a2fd	98 a3					.word	GRUndefined              ; $0c
>c2ff	a2ff	98 a3					.word	GRUndefined              ; $0d
>c301	a301	98 a3					.word	GRUndefined              ; $0e
>c303	a303	98 a3					.word	GRUndefined              ; $0f
>c305	a305	98 a3					.word	GRUndefined              ; $10
>c307	a307	98 a3					.word	GRUndefined              ; $11
>c309	a309	98 a3					.word	GRUndefined              ; $12
>c30b	a30b	98 a3					.word	GRUndefined              ; $13
>c30d	a30d	98 a3					.word	GRUndefined              ; $14
>c30f	a30f	98 a3					.word	GRUndefined              ; $15
>c311	a311	98 a3					.word	GRUndefined              ; $16
>c313	a313	98 a3					.word	GRUndefined              ; $17
>c315	a315	98 a3					.word	GRUndefined              ; $18
>c317	a317	98 a3					.word	GRUndefined              ; $19
>c319	a319	98 a3					.word	GRUndefined              ; $1a
>c31b	a31b	98 a3					.word	GRUndefined              ; $1b
>c31d	a31d	98 a3					.word	GRUndefined              ; $1c
>c31f	a31f	98 a3					.word	GRUndefined              ; $1d
>c321	a321	98 a3					.word	GRUndefined              ; $1e
>c323	a323	98 a3					.word	GRUndefined              ; $1f
>c325	a325	96 a3					.word	GXMove                   ; $20 Move
>c327	a327	f5 a5					.word	GXLine                   ; $21 Line
>c329	a329	70 a7					.word	GXFrameRectangle         ; $22 FrameRect
>c32b	a32b	6d a7					.word	GXFillRectangle          ; $23 FillRect
>c32d	a32d	9d a3					.word	GXFrameCircle            ; $24 FrameCircle
>c32f	a32f	99 a3					.word	GXFillCircle             ; $25 FillCircle
>c331	a331	98 a3					.word	GRUndefined              ; $26
>c333	a333	98 a3					.word	GRUndefined              ; $27
>c335	a335	55 a7					.word	GXPlotPoint              ; $28 Plot
>c337	a337	67 aa					.word	GXMoveSprite             ; $29 SpriteMove
=3						GXMappingPage = 3
=24576						GXMappingAddress = ($2000 * GXMappingPage)
=11						GXEditSlot = 8 + GXMappingPage
=$36						gxzTemp0 = zTemp0
=$38						gxzTemp1 = zTemp1
=$3a						gxzTemp2 = zTemp2
=$3c						gxzScreen = zsTemp
=$623						gxPixelBuffer = numberBuffer
.07c8						gxCurrentX:
>07c8								.fill 	2
.07ca						gxCurrentY:
>07ca								.fill 	2
.07cc						gxLastX:
>07cc								.fill 	2
.07ce						gxLastY:
>07ce								.fill 	2
.07d0						gxX0:
>07d0								.fill 	2
.07d2						gxY0:
>07d2								.fill 	2
.07d4						gxX1:
>07d4								.fill 	2
.07d6						gxY1:
>07d6								.fill 	2
.07d8						gxSpritesOn:
>07d8								.fill 	1
.07d9						gxBitmapsOn:
>07d9								.fill 	1
.07da						gxBasePage:
>07da								.fill 	1
.07db						gxSpritePage:
>07db								.fill 	1
.07dc						gxHeight:
>07dc								.fill 	1
.07dd						gxMode:
>07dd								.fill 	1
.07de						gxColour:
>07de								.fill 	1
.07df						gxEORValue:
>07df								.fill 	1
.07e0						gxANDValue:
>07e0								.fill 	1
.07e1						gxOriginalLUTValue:
>07e1								.fill 	1
.07e2						gxOffset:
>07e2								.fill 	1
.07e3						GSCurrentSpriteID:
>07e3								.fill 	1
.07e4						GSCurrentSpriteAddr:
>07e4								.fill 	2
.07e6						gxSpriteOffsetBase:
>07e6								.fill 	2
.07e8						gxSpriteLow:
>07e8								.fill 	64
.0828						gxSpriteHigh:
>0828								.fill 	64
.c339	a339					Export_GXGraphicDraw:
.c339	a339	c9 40		cmp #$40			cmp 	#GCMD_Move					; low value instructions don't use coordinates
.c33b	a33b	b0 06		bcs $a343			bcs 	_GDCoordinate 				; (see graphics.txt)
.c33d	a33d	86 36		stx $36				stx 	gxzTemp0 					; save X/Y
.c33f	a33f	84 37		sty $37				sty 	gxzTemp0+1
.c341	a341	80 4b		bra $a38e			bra 	_GDExecuteA 				; and execute
.c343	a343					_GDCoordinate:
.c343	a343	48		pha				pha 								; save AXY
.c344	a344	da		phx				phx
.c345	a345	5a		phy				phy
.c346	a346	a2 03		ldx #$03			ldx 	#3 							; copy currentX to lastX
.c348	a348					_GDCopy1:
.c348	a348	bd c8 07	lda $07c8,x			lda 	gxCurrentX,x
.c34b	a34b	9d cc 07	sta $07cc,x			sta 	gxLastX,x
.c34e	a34e	ca		dex				dex
.c34f	a34f	10 f7		bpl $a348			bpl 	_GDCopy1
.c351	a351	68		pla				pla
.c352	a352	8d ca 07	sta $07ca			sta 	gxCurrentY
.c355	a355	9c cb 07	stz $07cb			stz 	gxCurrentY+1
.c358	a358	68		pla				pla
.c359	a359	8d c8 07	sta $07c8			sta 	gxCurrentX
.c35c	a35c	68		pla				pla 								; get A (command+X.1) back
.c35d	a35d	48		pha				pha
.c35e	a35e	29 01		and #$01			and 	#1 							; put LSB as MSB of Current.X
.c360	a360	8d c9 07	sta $07c9			sta 	gxCurrentX+1
.c363	a363	68		pla				pla 								; get command back
.c364	a364	29 fe		and #$fe			and 	#$FE 						; lose LSB, chuck the stray X bit
.c366	a366	48		pha				pha 								; push back.
.c367	a367	c9 52		cmp #$52			cmp 	#GCMD_SpriteMove 			; move sprite does not clip.
.c369	a369	f0 17		beq $a382			beq 	_GDCopyToWorkArea
.c36b	a36b	ad c9 07	lda $07c9			lda 	gxCurrentX+1 				; X < 256 X okay
.c36e	a36e	f0 07		beq $a377			beq 	_GDCheckY
.c370	a370	ad c8 07	lda $07c8			lda 	gxCurrentX 					; otherwise X < 320 = 256 + 64
.c373	a373	c9 40		cmp #$40			cmp 	#64
.c375	a375	b0 08		bcs $a37f			bcs 	_GDError1
.c377	a377					_GDCheckY:
.c377	a377	ad ca 07	lda $07ca			lda 	gxCurrentY 					; check Y < Height.
.c37a	a37a	cd dc 07	cmp $07dc			cmp 	gxHeight
.c37d	a37d	90 03		bcc $a382			bcc 	_GDCopyToWorkArea
.c37f	a37f					_GDError1:
.c37f	a37f	68		pla				pla
.c380	a380					_GDError2:
.c380	a380	38		sec				sec
.c381	a381	60		rts				rts
.c382	a382					_GDCopyToWorkArea:
.c382	a382	a2 07		ldx #$07			ldx 	#7 							; copy current and last to gxXY/12 work area
.c384	a384					_GDCopy2:
.c384	a384	bd c8 07	lda $07c8,x			lda 	gxCurrentX,x
.c387	a387	9d d0 07	sta $07d0,x			sta 	gxX0,x
.c38a	a38a	ca		dex				dex
.c38b	a38b	10 f7		bpl $a384			bpl 	_GDCopy2
.c38d	a38d	68		pla				pla 								; get command
.c38e	a38e					_GDExecuteA:
.c38e	a38e	c9 54		cmp #$54			cmp 	#GRFirstFreeCode*2 			; bad command ?
.c390	a390	b0 ee		bcs $a380			bcs 	_GDError2
.c392	a392	aa		tax				tax 								; go execute the command.
.c393	a393	7c e5 a2	jmp ($a2e5,x)			jmp 	(GRVectorTable,x)
.c396	a396					GXMove:
.c396	a396	18		clc				clc
.c397	a397	60		rts				rts
.c398	a398					GRUndefined:
>c398	a398	db						.byte 	$DB 						; causes a break in the emulator
.c399	a399					GXFillCircle:
.c399	a399	a9 ff		lda #$ff			lda 	#255 						; A determines fill or not
.c39b	a39b	80 02		bra $a39f			bra 	GXCircle
.c39d	a39d					GXFrameCircle:
.c39d	a39d	a9 00		lda #$00			lda 	#0
.c39f	a39f					GXCircle:
.c39f	a39f	8d 6b 08	sta $086b			sta 	gxIsFillMode				; save Fill flag
.c3a2	a3a2	ad d9 07	lda $07d9			lda 	gxBitmapsOn
.c3a5	a3a5	f0 26		beq $a3cd			beq 	_GXCFail
.c3a7	a3a7	20 ff ab	jsr $abff			jsr 	GXSortXY 					; topleft/bottomright
.c3aa	a3aa	20 d7 aa	jsr $aad7			jsr 	GXOpenBitmap 				; start drawing
.c3ad	a3ad	20 9f a4	jsr $a49f			jsr 	GXCircleSetup 				; set up for drawing
.c3b0	a3b0	9c 6c 08	stz $086c			stz 	gxYChanged
.c3b3	a3b3					_GXCircleDraw:
.c3b3	a3b3	ad 69 08	lda $0869			lda 	gxxCentre					; while x <= y
.c3b6	a3b6	cd 6a 08	cmp $086a			cmp 	gxYCentre
.c3b9	a3b9	90 0a		bcc $a3c5			bcc 	_GXCircleContinue
.c3bb	a3bb	d0 03		bne $a3c0			bne 	_GXNoLast  					; fix up if x < y
.c3bd	a3bd	20 d2 a3	jsr $a3d2			jsr 	GXPlot1
.c3c0	a3c0					_GXNoLast:
.c3c0	a3c0	20 df aa	jsr $aadf			jsr 	GXCloseBitmap 				; close the bitmap
.c3c3	a3c3	18		clc				clc
.c3c4	a3c4	60		rts				rts
.c3c5	a3c5					_GXCircleContinue:
.c3c5	a3c5	20 cf a3	jsr $a3cf			jsr 	GXPlot2 					; draw it
.c3c8	a3c8	20 4c a4	jsr $a44c			jsr 	GXCircleMove 				; adjust the coordinates
.c3cb	a3cb	80 e6		bra $a3b3			bra 	_GXCircleDraw
.c3cd	a3cd					_GXCFail:
.c3cd	a3cd	38		sec				sec
.c3ce	a3ce	60		rts				rts
.c3cf	a3cf					GXPlot2:
.c3cf	a3cf	20 d2 a3	jsr $a3d2			jsr 	GXPlot1 						; plot and swap, fall through does twice
.c3d2	a3d2					GXPlot1:
.c3d2	a3d2	ad 6a 08	lda $086a			lda 	gxYCentre 						; if y = 0, don't do it twice (xor)
.c3d5	a3d5	f0 03		beq $a3da			beq 	_GXPlot1Only
.c3d7	a3d7	20 f6 a3	jsr $a3f6			jsr 	GXPlot0 						; plot and negate
.c3da	a3da					_GXPlot1Only:
.c3da	a3da	20 f6 a3	jsr $a3f6			jsr 	GXPlot0 						; twice, undoing negation
.c3dd	a3dd	ad 69 08	lda $0869			lda 	gxxCentre 						; swap X and Y
.c3e0	a3e0	ae 6a 08	ldx $086a			ldx	 	gxYCentre
.c3e3	a3e3	8d 6a 08	sta $086a			sta 	gxYCentre
.c3e6	a3e6	8e 69 08	stx $0869			stx 	gxxCentre
.c3e9	a3e9	ad 6c 08	lda $086c			lda 	gxYChanged 						; toggle Y Changed flag
.c3ec	a3ec	a9 ff		lda #$ff			lda 	#$FF
.c3ee	a3ee	8d 6c 08	sta $086c			sta 	gxYChanged
.c3f1	a3f1	60		rts				rts
.c3f2	a3f2	20 f6 a3	jsr $a3f6			jsr 	GXPlot0 						; do once
.c3f5	a3f5	60		rts				rts
.c3f6	a3f6	ad 6b 08	lda $086b	GXPlot0:lda 	gxIsFillMode 					; outline mode, always draw as X or Y will change
.c3f9	a3f9	f0 05		beq $a400			beq 	_GXPlot0Always
.c3fb	a3fb	ad 6c 08	lda $086c			lda 	gxYChanged						; fill mode, only draw if changed.
.c3fe	a3fe	f0 2d		beq $a42d			beq 	GXPlot0Exit
.c400	a400					_GXPlot0Always:
.c400	a400	a2 02		ldx #$02			ldx 	#2 								; copy Y1-A => Y0
.c402	a402	ad 6a 08	lda $086a			lda 	gxYCentre
.c405	a405	20 2e a4	jsr $a42e			jsr 	GXSubCopy
.c408	a408	a2 00		ldx #$00			ldx 	#0 								; copy X1-A => X0,
.c40a	a40a	ad 69 08	lda $0869			lda 	gxxCentre
.c40d	a40d	20 2e a4	jsr $a42e			jsr 	GXSubCopy
.c410	a410	48		pha				pha 									; save last offset X
.c411	a411	20 e7 aa	jsr $aae7			jsr 	gxPositionCalc 					; calculate position/offset.
.c414	a414	68		pla				pla
.c415	a415	0a		asl a				asl 	a 								; store 2 x last offset in gxzTemp0
.c416	a416	85 36		sta $36				sta 	gxzTemp0
.c418	a418	64 37		stz $37				stz 	gxzTemp0+1
.c41a	a41a	26 37		rol $37				rol 	gxzTemp0+1
.c41c	a41c	ad 6b 08	lda $086b			lda 	gxIsFillMode
.c41f	a41f	69 80		adc #$80			adc 	#128
.c421	a421	20 c0 a7	jsr $a7c0			jsr 	GXDrawLineTemp0 				; routine from Rectangle.
.c424	a424	38		sec				sec 									; GY = -GY
.c425	a425	a9 00		lda #$00			lda 	#0
.c427	a427	ed 6a 08	sbc $086a			sbc 	gxYCentre
.c42a	a42a	8d 6a 08	sta $086a			sta 	gxYCentre
.c42d	a42d					GXPlot0Exit:
.c42d	a42d	60		rts				rts
.c42e	a42e					GXSubCopy:
.c42e	a42e	85 36		sta $36				sta 	gxzTemp0
.c430	a430	64 37		stz $37				stz 	gxzTemp0+1
.c432	a432	29 80		and #$80			and 	#$80
.c434	a434	f0 02		beq $a438			beq 	_GXNoSx
.c436	a436	c6 37		dec $37				dec 	gxzTemp0+1
.c438	a438					_GXNoSx:
.c438	a438	38		sec				sec
.c439	a439	bd d4 07	lda $07d4,x			lda 	gxX1,x
.c43c	a43c	e5 36		sbc $36				sbc 	gxzTemp0
.c43e	a43e	9d d0 07	sta $07d0,x			sta 	gxX0,x
.c441	a441	bd d5 07	lda $07d5,x			lda 	gxX1+1,x
.c444	a444	e5 37		sbc $37				sbc 	gxzTemp0+1
.c446	a446	9d d1 07	sta $07d1,x			sta 	gxX0+1,x
.c449	a449	a5 36		lda $36				lda 	gxzTemp0 						; return A
.c44b	a44b	60		rts				rts
.c44c	a44c					GXCircleMove:
.c44c	a44c	9c 6c 08	stz $086c			stz 	gxYChanged 					; clear Y changed flag
.c44f	a44f	a5 39		lda $39				lda 	gxzTemp1+1 					; check sign of D
.c451	a451	10 0d		bpl $a460			bpl 	_GXEMPositive
.c453	a453	ee 69 08	inc $0869			inc 	gxxCentre 					; X++
.c456	a456	ad 69 08	lda $0869			lda 	gxxCentre
.c459	a459	20 7f a4	jsr $a47f			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.c45c	a45c	a9 06		lda #$06			lda 	#6  						; and add 6
.c45e	a45e	80 15		bra $a475			bra 	_GXEMAddD
.c460	a460					_GXEMPositive:
.c460	a460	ee 69 08	inc $0869			inc 	gxxCentre					; X++
.c463	a463	ce 6a 08	dec $086a			dec 	gxYCentre 					; Y--
.c466	a466	38		sec				sec 								; calculate X-Y
.c467	a467	ad 69 08	lda $0869			lda 	gxxCentre
.c46a	a46a	ed 6a 08	sbc $086a			sbc 	gxYCentre
.c46d	a46d	20 7f a4	jsr $a47f			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.c470	a470	a9 0a		lda #$0a			lda 	#10  						; and add 10
.c472	a472	ce 6c 08	dec $086c			dec 	gxYChanged
.c475	a475					_GXEMAddD:
.c475	a475	18		clc				clc
.c476	a476	65 38		adc $38				adc 	gxzTemp1
.c478	a478	85 38		sta $38				sta 	gxzTemp1
.c47a	a47a	90 02		bcc $a47e			bcc 	_GXEMNoCarry
.c47c	a47c	e6 39		inc $39				inc 	gxzTemp1+1
.c47e	a47e					_GXEMNoCarry:
.c47e	a47e	60		rts				rts
.c47f	a47f					_GXAdd4TimesToD:
.c47f	a47f	85 36		sta $36				sta 	gxzTemp0 					; make 16 bit signed.
.c481	a481	29 80		and #$80			and 	#$80
.c483	a483	f0 02		beq $a487			beq 	_GXA4Unsigned
.c485	a485	a9 ff		lda #$ff			lda 	#$FF
.c487	a487					_GXA4Unsigned:
.c487	a487	85 37		sta $37				sta 	gxzTemp0+1
.c489	a489	06 36		asl $36				asl 	gxzTemp0  					; x 4
.c48b	a48b	26 37		rol $37				rol 	gxzTemp0+1
.c48d	a48d	06 36		asl $36				asl 	gxzTemp0
.c48f	a48f	26 37		rol $37				rol 	gxzTemp0+1
.c491	a491	18		clc				clc 								; add
.c492	a492	a5 36		lda $36				lda		gxzTemp0
.c494	a494	65 38		adc $38				adc 	gxzTemp1
.c496	a496	85 38		sta $38				sta 	gxzTemp1
.c498	a498	a5 37		lda $37				lda		gxzTemp0+1
.c49a	a49a	65 39		adc $39				adc 	gxzTemp1+1
.c49c	a49c	85 39		sta $39				sta 	gxzTemp1+1
.c49e	a49e	60		rts				rts
.c49f	a49f					GXCircleSetup:
.c49f	a49f	38		sec				sec
.c4a0	a4a0	ad d6 07	lda $07d6			lda 	gxY1
.c4a3	a4a3	ed d2 07	sbc $07d2			sbc 	gxY0
.c4a6	a4a6	4a		lsr a				lsr 	a
.c4a7	a4a7	8d 68 08	sta $0868			sta 	gxRadius
.c4aa	a4aa	a2 00		ldx #$00			ldx 	#0
.c4ac	a4ac	20 ce a4	jsr $a4ce			jsr 	_GXCalculateCentre
.c4af	a4af	a2 02		ldx #$02			ldx 	#2
.c4b1	a4b1	20 ce a4	jsr $a4ce			jsr 	_GXCalculateCentre
.c4b4	a4b4	9c 69 08	stz $0869			stz 	gxxCentre
.c4b7	a4b7	ad 68 08	lda $0868			lda 	gxRadius
.c4ba	a4ba	8d 6a 08	sta $086a			sta 	gxYCentre
.c4bd	a4bd	0a		asl a				asl 	a 							; R x 2
.c4be	a4be	85 36		sta $36				sta 	gxzTemp0
.c4c0	a4c0	38		sec				sec
.c4c1	a4c1	a9 03		lda #$03			lda 	#3
.c4c3	a4c3	e5 36		sbc $36				sbc 	gxzTemp0
.c4c5	a4c5	85 38		sta $38				sta 	gxzTemp1
.c4c7	a4c7	a9 00		lda #$00			lda 	#0
.c4c9	a4c9	e9 00		sbc #$00			sbc 	#0
.c4cb	a4cb	85 39		sta $39				sta 	gxzTemp1+1
.c4cd	a4cd	60		rts				rts
.c4ce	a4ce					_GXCalculateCentre:
.c4ce	a4ce	38		sec				sec
.c4cf	a4cf	bd d4 07	lda $07d4,x			lda 	gxX1,x
.c4d2	a4d2	7d d0 07	adc $07d0,x			adc 	gxX0,x
.c4d5	a4d5	9d d4 07	sta $07d4,x			sta 	gxX1,x
.c4d8	a4d8	bd d5 07	lda $07d5,x			lda 	gxX1+1,x
.c4db	a4db	7d d1 07	adc $07d1,x			adc 	gxX0+1,x
.c4de	a4de	4a		lsr a				lsr 	a
.c4df	a4df	9d d5 07	sta $07d5,x			sta 	gxX1+1,x
.c4e2	a4e2	7e d4 07	ror $07d4,x			ror 	gxX1,x
.c4e5	a4e5	60		rts				rts
.0868						gxRadius:
>0868								.fill 	1
.0869						gxxCentre:
>0869								.fill 	1
.086a						gxYCentre:
>086a								.fill 	1
.086b						gxIsFillMode:
>086b								.fill 	1
.086c						gxYChanged:
>086c								.fill  	1
=64000						ScreenSize200 = 320 * 200
=76800						ScreenSize240 = 320 * 240
.c4e6	a4e6					GXClearBitmap:
.c4e6	a4e6	ad d9 07	lda $07d9			lda 	gxBitmapsOn 				; check BMP turned on.
.c4e9	a4e9	f0 26		beq $a511			beq 	_GXCBFail
.c4eb	a4eb	20 d7 aa	jsr $aad7			jsr 	GXOpenBitmap 				; start access
.c4ee	a4ee	a0 07		ldy #$07			ldy 	#ScreenSize200 / 8192 		; X is pages to clear as 2 graphic heights.
.c4f0	a4f0	ad dc 07	lda $07dc			lda 	gxHeight
.c4f3	a4f3	c9 c8		cmp #$c8			cmp 	#200 						; 200 ?
.c4f5	a4f5	f0 02		beq $a4f9			beq 	_GXCalcLastPage
.c4f7	a4f7	a0 09		ldy #$09			ldy 	#ScreenSize240 / 8192
.c4f9	a4f9					_GXCalcLastPage:
.c4f9	a4f9	98		tya				tya 								; add to base page
.c4fa	a4fa	18		clc				clc
.c4fb	a4fb	6d da 07	adc $07da			adc 	gxBasePage
.c4fe	a4fe	85 0b		sta $0b				sta 	GXEditSlot  				; clear from this page back
.c500	a500					_GXClearAll:
.c500	a500	20 13 a5	jsr $a513			jsr 	_GXClearBlock 				; clear 8k block
.c503	a503	c6 0b		dec $0b				dec 	GXEditSlot  				; back to previous
.c505	a505	a5 0b		lda $0b				lda 	GXEditSlot
.c507	a507	cd da 07	cmp $07da			cmp 	gxBasePage 					; until before base page
.c50a	a50a	b0 f4		bcs $a500			bcs 	_GXClearAll
.c50c	a50c	20 df aa	jsr $aadf			jsr 	GXCloseBitmap	 			; stop access
.c50f	a50f	18		clc				clc
.c510	a510	60		rts				rts
.c511	a511					_GXCBFail:
.c511	a511	38		sec				sec
.c512	a512	60		rts				rts
.c513	a513					_GXClearBlock:
.c513	a513	a9 00		lda #$00			lda 	#((GXMappingAddress) & $FF)
.c515	a515	85 38		sta $38				sta 	0+gxzTemp1
.c517	a517	a9 60		lda #$60			lda 	#((GXMappingAddress) >> 8)
.c519	a519	85 39		sta $39				sta 	1+gxzTemp1
.c51b	a51b					_GXCB0:
.c51b	a51b	a5 36		lda $36				lda 	gxzTemp0 					; clear colour
.c51d	a51d	a0 00		ldy #$00			ldy 	#0
.c51f	a51f					_GXCB1:
.c51f	a51f	91 38		sta ($38),y			sta 	(gxzTemp1),y
.c521	a521	c8		iny				iny
.c522	a522	91 38		sta ($38),y			sta 	(gxzTemp1),y
.c524	a524	c8		iny				iny
.c525	a525	91 38		sta ($38),y			sta 	(gxzTemp1),y
.c527	a527	c8		iny				iny
.c528	a528	91 38		sta ($38),y			sta 	(gxzTemp1),y
.c52a	a52a	c8		iny				iny
.c52b	a52b	d0 f2		bne $a51f			bne 	_GXCB1
.c52d	a52d	e6 39		inc $39				inc 	gxzTemp1+1
.c52f	a52f	a5 39		lda $39				lda 	gxzTemp1+1
.c531	a531	c9 80		cmp #$80			cmp	 	#(GXMappingAddress >> 8)+$20
.c533	a533	d0 e6		bne $a51b			bne 	_GXCB0
.c535	a535	60		rts				rts
.c536	a536					GXInitialise:
.c536	a536	64 01		stz $01				stz 	1 							; access I/O
.c538	a538	a9 01		lda #$01			lda 	#1 							; reset bitmap address
.c53a	a53a	8d 00 d0	sta $d000			sta 	$D000
.c53d	a53d	18		clc				clc
.c53e	a53e	9c d8 07	stz $07d8			stz 	gxSpritesOn					; sprites/bitmaps off.
.c541	a541	9c d9 07	stz $07d9			stz 	gxBitmapsOn
.c544	a544	a2 0f		ldx #$0f			ldx 	#15 						; erase work area
.c546	a546					_GXIClear:
.c546	a546	9e c8 07	stz $07c8,x			stz 	gxCurrentX,x
.c549	a549	ca		dex				dex
.c54a	a54a	10 fa		bpl $a546			bpl 	_GXIClear
.c54c	a54c	20 e7 a5	jsr $a5e7			jsr 	GXClearSpriteStore 			; clear sprite backup space.
.c54f	a54f	60		rts				rts
.c550	a550					GXControlBitmap:
.c550	a550	64 01		stz $01				stz 	1
.c552	a552	a5 36		lda $36				lda 	gxzTemp0 					; get control bits
.c554	a554	29 01		and #$01			and 	#1 							; get bitmap flag (is enabled)
.c556	a556	8d d9 07	sta $07d9			sta 	gxBitmapsOn
.c559	a559	4a		lsr a				lsr 	a 							; bit 0 into carry.
.c55a	a55a	ad 00 d0	lda $d000			lda 	$D000 						; read Vicky MCR
.c55d	a55d	09 07		ora #$07			ora 	#7 							; turn graphics, text, textoverlay on.
.c55f	a55f	29 f7		and #$f7			and 	#$F7 						; clear bitmap bit
.c561	a561	90 02		bcc $a565			bcc 	_CBNotOn
.c563	a563	09 08		ora #$08			ora 	#$08 						; bitmap on if 1 on 0 off
.c565	a565					_CBNotOn:
.c565	a565	8d 00 d0	sta $d000			sta 	$D000 						; update Vicky MCR
.c568	a568	a5 36		lda $36				lda 	gxzTemp0 					; get control settings (bits 0-2)
.c56a	a56a	29 07		and #$07			and 	#7
.c56c	a56c	8d 00 d1	sta $d100			sta 	$D100 						; write in Vicky Bitmap Control Register #0
.c56f	a56f	a5 37		lda $37				lda 	gxzTemp0+1 					; get the base page requested
.c571	a571	d0 02		bne $a575			bne 	_CBNotDefault
.c573	a573	a9 08		lda #$08			lda 	#8  						; if zero, use default 8 e.g. bitmap at $10000
.c575	a575					_CBNotDefault:
.c575	a575	8d da 07	sta $07da			sta 	gxBasePage 					; save as bitmap base page.
.c578	a578	20 d9 a5	jsr $a5d9			jsr 	GXCalculateBaseAddress 	 	; convert page# to address
.c57b	a57b	a5 37		lda $37				lda 	gxzTemp0+1 					; copy address into Bitmap address registers
.c57d	a57d	8d 03 d1	sta $d103			sta 	$D103
.c580	a580	a5 36		lda $36				lda 	gxzTemp0
.c582	a582	8d 02 d1	sta $d102			sta 	$D102
.c585	a585	9c 01 d1	stz $d101			stz 	$D101
.c588	a588	a2 f0		ldx #$f0			ldx 	#240 						; height is 240 or 200 ?
.c58a	a58a	ad 01 d0	lda $d001			lda 	$D001 						; read MCR bit 0
.c58d	a58d	29 01		and #$01			and 	#1
.c58f	a58f	f0 02		beq $a593			beq 	_CBHaveHeight
.c591	a591	a2 c8		ldx #$c8			ldx 	#200 						; if bit 0 set 320x200
.c593	a593					_CBHaveHeight
.c593	a593	8e dc 07	stx $07dc			stx 	gxHeight
.c596	a596	18		clc				clc
.c597	a597	60		rts				rts
.c598	a598					GXControlSprite:
.c598	a598	64 01		stz $01				stz 	1
.c59a	a59a	a5 36		lda $36				lda 	gxzTemp0 					; get control bits
.c59c	a59c	29 01		and #$01			and 	#1 							; set sprites flag
.c59e	a59e	8d d8 07	sta $07d8			sta 	gxSpritesOn
.c5a1	a5a1	4a		lsr a				lsr 	a 							; bit 0 into carry
.c5a2	a5a2	ad 00 d0	lda $d000			lda 	$D000 						; read Vicky MCR
.c5a5	a5a5	09 07		ora #$07			ora 	#7 							; turn graphics, text, textoverlay on.
.c5a7	a5a7	29 df		and #$df			and 	#$DF 						; clear sprite bit
.c5a9	a5a9	90 02		bcc $a5ad			bcc 	_CSNotOn
.c5ab	a5ab	09 20		ora #$20			ora 	#$20 						; sprite on if 1 on 0 off
.c5ad	a5ad					_CSNotOn:
.c5ad	a5ad	8d 00 d0	sta $d000			sta 	$D000 						; update Vicky MCR
.c5b0	a5b0	a5 37		lda $37				lda 	gxzTemp0+1 					; get the base page
.c5b2	a5b2	d0 02		bne $a5b6			bne 	_CSNotDefault
.c5b4	a5b4	a9 18		lda #$18			lda 	#24  						; if zero, use 24 e.g. sprites at $30000
.c5b6	a5b6					_CSNotDefault:
.c5b6	a5b6	8d db 07	sta $07db			sta 	gxSpritePage
.c5b9	a5b9	20 d9 a5	jsr $a5d9			jsr 	GXCalculateBaseAddress 	 	; convert page# to address
.c5bc	a5bc	a5 36		lda $36				lda 	gxzTemp0 					; save this so we know where the sprites are.
.c5be	a5be	8d e6 07	sta $07e6			sta 	gxSpriteOffsetBase
.c5c1	a5c1	a5 37		lda $37				lda 	gxzTemp0+1
.c5c3	a5c3	8d e7 07	sta $07e7			sta 	gxSpriteOffsetBase+1
.c5c6	a5c6	a2 00		ldx #$00			ldx 	#0 							; disable all sprites, clears all sprite memory.
.c5c8	a5c8					_CSClear:
.c5c8	a5c8	9e 00 d9	stz $d900,x			stz 	$D900,x
.c5cb	a5cb	9e 00 da	stz $da00,x			stz 	$DA00,x
.c5ce	a5ce	ca		dex				dex
.c5cf	a5cf	d0 f7		bne $a5c8			bne 	_CSClear
.c5d1	a5d1	9c e5 07	stz $07e5			stz 	GSCurrentSpriteAddr+1 		; no sprite selected.
.c5d4	a5d4	20 e7 a5	jsr $a5e7			jsr 	GXClearSpriteStore
.c5d7	a5d7	18		clc				clc
.c5d8	a5d8	60		rts				rts
.c5d9	a5d9					GXCalculateBaseAddress:
.c5d9	a5d9	85 36		sta $36				sta 	gxzTemp0
.c5db	a5db	64 37		stz $37				stz 	gxzTemp0+1
.c5dd	a5dd	a9 05		lda #$05			lda 	#5
.c5df	a5df					_GXShift:
.c5df	a5df	06 36		asl $36				asl 	gxzTemp0
.c5e1	a5e1	26 37		rol $37				rol 	gxzTemp0+1
.c5e3	a5e3	3a		dec a				dec		a
.c5e4	a5e4	d0 f9		bne $a5df			bne 	_GXShift
.c5e6	a5e6	60		rts				rts
.c5e7	a5e7					GXClearSpriteStore:
.c5e7	a5e7	a2 3f		ldx #$3f			ldx 	#63 						; erase 64 sprite store elements
.c5e9	a5e9					_GXCSSLoop:
.c5e9	a5e9	9e 28 08	stz $0828,x			stz 	gxSpriteHigh,x
.c5ec	a5ec	a9 80		lda #$80			lda 	#$80 						; set the 'hidden' bit.
.c5ee	a5ee	9d e8 07	sta $07e8,x			sta 	gxSpriteLow,x
.c5f1	a5f1	ca		dex				dex
.c5f2	a5f2	10 f5		bpl $a5e9			bpl 	_GXCSSLoop
.c5f4	a5f4	60		rts				rts
.c5f5	a5f5					GXLine:
.c5f5	a5f5	ad d9 07	lda $07d9			lda 	gxBitmapsOn					; check bitmap on.
.c5f8	a5f8	f0 28		beq $a622			beq 	_GXLFail
.c5fa	a5fa	20 d7 aa	jsr $aad7			jsr 	GXOpenBitmap 				; access it.
.c5fd	a5fd	20 1d ac	jsr $ac1d			jsr 	GXSortY						; sort pairs so Y1 >= Y0 e.g. top to bottom.
.c600	a600	20 c8 a6	jsr $a6c8			jsr 	GXLineSetup 				; the calculations in the linescanner constructor
.c603	a603	20 e7 aa	jsr $aae7			jsr 	gxPositionCalc 				; calculate position/offset.
.c606	a606					_GXDrawLoop:
.c606	a606	ac e2 07	ldy $07e2			ldy 	gxOffset 					; draw the pixel
.c609	a609	b1 3c		lda ($3c),y			lda 	(gxzScreen),y
.c60b	a60b	2d e0 07	and $07e0			and 	gxANDValue
.c60e	a60e	4d df 07	eor $07df			eor 	gxEORValue
.c611	a611	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.c613	a613	20 24 a6	jsr $a624			jsr 	GXLineIsComplete 			; is the line complete ?
.c616	a616	f0 05		beq $a61d			beq 	_GXLExit
.c618	a618	20 3f a6	jsr $a63f			jsr 	GXLineAdvance 				; code as per advance method
.c61b	a61b	80 e9		bra $a606			bra 	_GXDrawLoop
.c61d	a61d					_GXLExit:
.c61d	a61d	20 df aa	jsr $aadf			jsr 	GXCloseBitmap 				; restore and return success.
.c620	a620	18		clc				clc
.c621	a621	60		rts				rts
.c622	a622					_GXLFail:
.c622	a622	38		sec				sec
.c623	a623	60		rts				rts
.c624	a624					GXLineIsComplete:
.c624	a624	ad 6f 08	lda $086f			lda 	gxIsDiffYLarger 			; is dy larger
.c627	a627	d0 0f		bne $a638			bne 	_GXLICCompareY 				; if so compare Y1 versus Y0
.c629	a629	ad d0 07	lda $07d0			lda 	gxX0 						; compare X, LSB and MSB
.c62c	a62c	4d d4 07	eor $07d4			eor 	gxX1
.c62f	a62f	d0 06		bne $a637			bne 	_GXLICExit
.c631	a631	ad d1 07	lda $07d1			lda 	gxX0+1
.c634	a634	4d d5 07	eor $07d5			eor 	gxX1+1
.c637	a637					_GXLICExit:
.c637	a637	60		rts				rts
.c638	a638					_GXLICCompareY:
.c638	a638	ad d6 07	lda $07d6			lda 	gxY1
.c63b	a63b	4d d2 07	eor $07d2			eor 	gxY0
.c63e	a63e	60		rts				rts
.c63f	a63f					GXLineAdvance:
.c63f	a63f	18		clc				clc 								; add adjust to position
.c640	a640	ad 71 08	lda $0871			lda 	gxPosition
.c643	a643	6d 72 08	adc $0872			adc 	gxAdjust
.c646	a646	8d 71 08	sta $0871			sta 	gxPosition
.c649	a649	9c 74 08	stz $0874			stz 	gxAddSelect 				; clear add select flag
.c64c	a64c	b0 05		bcs $a653			bcs 	_GXLAOverflow 				; if carry out, overflowed.
.c64e	a64e	cd 73 08	cmp $0873			cmp 	gxTotal 					; if exceeded total
.c651	a651	90 0a		bcc $a65d			bcc 	_GXLANoExtra
.c653	a653					_GXLAOverflow:
.c653	a653	ce 74 08	dec $0874			dec 	gxAddSelect 				; set addselect to $FF
.c656	a656	38		sec				sec 								; subtract total and write back
.c657	a657	ed 73 08	sbc $0873			sbc 	gxTotal
.c65a	a65a	8d 71 08	sta $0871			sta 	gxPosition
.c65d	a65d					_GXLANoExtra:
.c65d	a65d	ad 6f 08	lda $086f			lda 	gxIsDiffYLarger
.c660	a660	f0 0d		beq $a66f			beq 	_GXDXLarger
.c662	a662	20 c1 a6	jsr $a6c1			jsr 	GXIncrementY
.c665	a665	ad 74 08	lda $0874			lda 	gxAddSelect
.c668	a668	f0 10		beq $a67a			beq 	_GXLAExit
.c66a	a66a	20 7b a6	jsr $a67b			jsr 	gxAdjustX
.c66d	a66d	80 0b		bra $a67a			bra 	_GXLAExit
.c66f	a66f					_GXDXLarger:
.c66f	a66f	20 7b a6	jsr $a67b			jsr 	gxAdjustX
.c672	a672	ad 74 08	lda $0874			lda 	gxAddSelect
.c675	a675	f0 03		beq $a67a			beq 	_GXLAExit
.c677	a677	20 c1 a6	jsr $a6c1			jsr 	GXIncrementY
.c67a	a67a					_GXLAExit:
.c67a	a67a	60		rts				rts
.c67b	a67b					gxAdjustX:
.c67b	a67b	ad 70 08	lda $0870			lda 	gxDXNegative
.c67e	a67e	10 25		bpl $a6a5			bpl 	_GXAXRight
.c680	a680	ad d0 07	lda $07d0			lda 	gxX0
.c683	a683	d0 03		bne $a688			bne 	_GXAXNoBorrow
.c685	a685	ce d1 07	dec $07d1			dec 	gxX0+1
.c688	a688					_GXAXNoBorrow:
.c688	a688	ce d0 07	dec $07d0			dec 	gxX0
.c68b	a68b	ce e2 07	dec $07e2			dec 	gxOffset 					; pixel left
.c68e	a68e	ad e2 07	lda $07e2			lda 	gxOffset
.c691	a691	c9 ff		cmp #$ff			cmp 	#$FF
.c693	a693	d0 0f		bne $a6a4			bne 	_GXAYExit 					; underflow
.c695	a695	c6 3d		dec $3d				dec 	gxzScreen+1 					; borrow
.c697	a697	a5 3d		lda $3d				lda 	gxzScreen+1 					; gone off page
.c699	a699	c9 60		cmp #$60			cmp 	#GXMappingAddress >> 8
.c69b	a69b	b0 07		bcs $a6a4			bcs 	_GXAYExit
.c69d	a69d	18		clc				clc
.c69e	a69e	69 20		adc #$20			adc 	#$20 						; fix up
.c6a0	a6a0	85 3d		sta $3d				sta 	gxzScreen+1
.c6a2	a6a2	c6 0b		dec $0b				dec 	GXEditSlot 				; back one page
.c6a4	a6a4					_GXAYExit:
.c6a4	a6a4	60		rts				rts
.c6a5	a6a5					_GXAXRight:
.c6a5	a6a5	ee d0 07	inc $07d0			inc 	gxX0
.c6a8	a6a8	d0 03		bne $a6ad			bne 	_GXAXNoCarry
.c6aa	a6aa	ee d1 07	inc $07d1			inc 	gxX0+1
.c6ad	a6ad					_GXAXNoCarry:
.c6ad	a6ad	ee e2 07	inc $07e2			inc 	gxOffset 					; pixel right
.c6b0	a6b0	d0 0e		bne $a6c0			bne 	_GXAXExit 					; if not overflowed, exit.
.c6b2	a6b2	e6 3d		inc $3d				inc 	gxzScreen+1 					; next line
.c6b4	a6b4	a5 3d		lda $3d				lda 	gxzScreen+1
.c6b6	a6b6	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page ?
.c6b8	a6b8	90 06		bcc $a6c0			bcc 	_GXAXExit
.c6ba	a6ba	e9 20		sbc #$20			sbc 	#$20 						; fix up
.c6bc	a6bc	85 3d		sta $3d				sta 	gxzScreen+1
.c6be	a6be	e6 0b		inc $0b				inc 	GXEditSlot 				; next page
.c6c0	a6c0					_GXAXExit:
.c6c0	a6c0	60		rts				rts
.c6c1	a6c1					GXIncrementY:
.c6c1	a6c1	ee d2 07	inc $07d2			inc 	gxY0
.c6c4	a6c4	20 3d ab	jsr $ab3d			jsr 	GXMovePositionDown
.c6c7	a6c7	60		rts				rts
.c6c8	a6c8					GXLineSetup:
.c6c8	a6c8	ad d6 07	lda $07d6			lda 	gxY1
.c6cb	a6cb	38		sec				sec
.c6cc	a6cc	ed d2 07	sbc $07d2			sbc 	gxY0
.c6cf	a6cf	4a		lsr a				lsr 	a
.c6d0	a6d0	8d 6e 08	sta $086e			sta 	gxDiffY
.c6d3	a6d3	9c 70 08	stz $0870			stz 	gxDXNegative 				; clear -ve flag
.c6d6	a6d6	38		sec				sec
.c6d7	a6d7	ad d4 07	lda $07d4			lda 	gxX1
.c6da	a6da	ed d0 07	sbc $07d0			sbc 	gxX0
.c6dd	a6dd	8d 6d 08	sta $086d			sta 	gxDiffX
.c6e0	a6e0	ad d5 07	lda $07d5			lda 	gxX1+1 						; calculate MSB
.c6e3	a6e3	ed d1 07	sbc $07d1			sbc 	gxX0+1
.c6e6	a6e6	6a		ror a				ror 	a 							; rotate bit into DiffX halving it
.c6e7	a6e7	6e 6d 08	ror $086d			ror 	gxDiffX
.c6ea	a6ea	0a		asl a				asl 	a
.c6eb	a6eb	10 0c		bpl $a6f9			bpl 	_GDXNotNegative
.c6ed	a6ed	a9 00		lda #$00			lda 	#0 							; make absolute value of |dx|
.c6ef	a6ef	38		sec				sec
.c6f0	a6f0	ed 6d 08	sbc $086d			sbc 	gxDiffX
.c6f3	a6f3	8d 6d 08	sta $086d			sta 	gxDiffX
.c6f6	a6f6	ce 70 08	dec $0870			dec 	gxDXNegative 				; -ve flag = $FF.
.c6f9	a6f9					_GDXNotNegative:
.c6f9	a6f9	9c 6f 08	stz $086f			stz 	gxIsDiffYLarger 			; clear larger flag
.c6fc	a6fc	ad 6e 08	lda $086e			lda 	gxDiffY 					; set adjust and total.
.c6ff	a6ff	8d 72 08	sta $0872			sta 	gxAdjust
.c702	a702	ad 6d 08	lda $086d			lda 	gxDiffX
.c705	a705	8d 73 08	sta $0873			sta 	gxTotal
.c708	a708	ad 6e 08	lda $086e			lda 	gxDiffY 					; if dy > dx
.c70b	a70b	cd 6d 08	cmp $086d			cmp 	gxDiffX
.c70e	a70e	90 0f		bcc $a71f			bcc 	_GDXNotLarger
.c710	a710	ce 6f 08	dec $086f			dec 	gxIsDiffYLarger 			; set the dy larger flag
.c713	a713	ad 6d 08	lda $086d			lda 	gxDiffX 					; set adjust and total other way round
.c716	a716	8d 72 08	sta $0872			sta 	gxAdjust
.c719	a719	ad 6e 08	lda $086e			lda 	gxDiffY
.c71c	a71c	8d 73 08	sta $0873			sta 	gxTotal
.c71f	a71f					_GDXNotLarger:
.c71f	a71f	ad 73 08	lda $0873			lda 	gxTotal
.c722	a722	4a		lsr a				lsr 	a
.c723	a723	8d 71 08	sta $0871			sta 	gxPosition
.c726	a726	60		rts				rts
.086d						gxDiffX:
>086d								.fill 	1
.086e						gxDiffY:
>086e								.fill 	1
.086f						gxIsDiffYLarger:
>086f								.fill 	1
.0870						gxDXNegative:
>0870								.fill 	1
.0871						gxPosition:
>0871								.fill 	1
.0872						gxAdjust:
>0872								.fill 	1
.0873						gxTotal:
>0873								.fill 	1
.0874						gxAddSelect:
>0874								.fill 	1
.c727	a727					GXSetColourMode:
.c727	a727	a6 36		ldx $36				ldx 	gxzTemp0
.c729	a729	8e de 07	stx $07de			stx 	gxColour 								; set colour
.c72c	a72c	a5 37		lda $37				lda 	gxzTemp0+1 								;
.c72e	a72e	8d dd 07	sta $07dd			sta 	gxMode 									; set mode
.c731	a731	29 03		and #$03			and 	#3 										; only interested in bits 0-3
.c733	a733	9c e0 07	stz $07e0			stz 	gxANDValue 								; initially AND with 0, and EOR with Colour
.c736	a736	ae de 07	ldx $07de			ldx 	gxColour
.c739	a739	8e df 07	stx $07df			stx 	gxEORValue
.c73c	a73c	c9 02		cmp #$02			cmp 	#2 										; if mode 2/3 And with colour
.c73e	a73e	90 03		bcc $a743			bcc 	_GXSDCNotAndColour
.c740	a740	8e e0 07	stx $07e0			stx 	gxANDValue
.c743	a743					_GXSDCNotAndColour:
.c743	a743	d0 03		bne $a748			bne 	_GXSDCNotAnd 							; mode 2, Don't EOR with colour
.c745	a745	9c df 07	stz $07df			stz 	gxEORValue
.c748	a748					_GXSDCNotAnd:
.c748	a748	4a		lsr a				lsr 	a 										; if bit 0 set, 1's complement AND value
.c749	a749	90 08		bcc $a753			bcc 	_GXSDCNoFlip
.c74b	a74b	ad e0 07	lda $07e0			lda	 	gxANDValue
.c74e	a74e	49 ff		eor #$ff			eor 	#$FF
.c750	a750	8d e0 07	sta $07e0			sta 	gxANDValue
.c753	a753					_GXSDCNoFlip:
.c753	a753	18		clc				clc
.c754	a754	60		rts				rts
.c755	a755					GXPlotPoint:
.c755	a755	20 d7 aa	jsr $aad7			jsr 	GXOpenBitmap 				; start drawing
.c758	a758	20 e7 aa	jsr $aae7			jsr 	gxPositionCalc 				; setup gxzScreen, gxOffset and the position.
.c75b	a75b	ac e2 07	ldy $07e2			ldy 	gxOffset
.c75e	a75e	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 				; set pixel on the right
.c760	a760	2d e0 07	and $07e0			and 	gxANDValue
.c763	a763	4d df 07	eor $07df			eor 	gxEORValue
.c766	a766	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.c768	a768	20 df aa	jsr $aadf			jsr 	GXCloseBitmap 				; stop drawing and exit
.c76b	a76b	18		clc				clc
.c76c	a76c	60		rts				rts
.c76d	a76d					GXFillRectangle:
.c76d	a76d	38		sec				sec 								; pass carry in for fill/frame
.c76e	a76e	80 01		bra $a771			bra 	GXRectangle
.c770	a770					GXFrameRectangle:
.c770	a770	18		clc				clc
.c771	a771					GXRectangle:
.c771	a771	ad d9 07	lda $07d9			lda 	gxBitmapsOn 				; exit if off.
.c774	a774	f0 35		beq $a7ab			beq 	_GXRFail
.c776	a776	08		php				php 								; save Fill flag (CS)
.c777	a777	20 d7 aa	jsr $aad7			jsr 	GXOpenBitmap 				; start drawing
.c77a	a77a	20 ff ab	jsr $abff			jsr 	GXSortXY 					; sort both X and Y so top left/bottom right
.c77d	a77d	20 e7 aa	jsr $aae7			jsr 	gxPositionCalc 				; setup gxzScreen, gxOffset and the position.
.c780	a780	38		sec				sec 								; sec = Draw line
.c781	a781	20 ad a7	jsr $a7ad			jsr 	GXDrawLineX1X0 				; draw a line length X1-X0
.c784	a784	ad d2 07	lda $07d2			lda 	gxY0 						; reached end of rectangle ?
.c787	a787	cd d6 07	cmp $07d6			cmp 	gxY1 						; e.g. 1 pixel high.
.c78a	a78a	f0 19		beq $a7a5			beq 	_GXRectangleExit
.c78c	a78c					_GXRectLoop:
.c78c	a78c	20 3d ab	jsr $ab3d			jsr 	GXMovePositionDown 			; down one.
.c78f	a78f	ee d2 07	inc $07d2			inc 	gxY0 						; change Y pos
.c792	a792	ad d2 07	lda $07d2			lda 	gxY0 						; reached last line
.c795	a795	cd d6 07	cmp $07d6			cmp 	gxY1
.c798	a798	f0 07		beq $a7a1			beq 	_GXLastLine
.c79a	a79a	28		plp				plp 								; get flag back for solid/edged
.c79b	a79b	08		php				php
.c79c	a79c	20 ad a7	jsr $a7ad			jsr 	GXDrawLineX1X0 				; draw horizontal line
.c79f	a79f	80 eb		bra $a78c			bra 	_GXRectLoop
.c7a1	a7a1					_GXLastLine:
.c7a1	a7a1	38		sec				sec
.c7a2	a7a2	20 ad a7	jsr $a7ad			jsr 	GXDrawLineX1X0
.c7a5	a7a5					_GXRectangleExit:
.c7a5	a7a5	68		pla				pla 								; throw fill flag.
.c7a6	a7a6	20 df aa	jsr $aadf			jsr 	GXCloseBitmap 				; stop drawing and exit
.c7a9	a7a9	18		clc				clc
.c7aa	a7aa	60		rts				rts
.c7ab	a7ab					_GXRFail:
.c7ab	a7ab	38		sec				sec
.c7ac	a7ac	60		rts				rts
.c7ad	a7ad					GXDrawLineX1X0:
.c7ad	a7ad	08		php				php 								; save solid/either-end
.c7ae	a7ae	38		sec				sec 								; calculate x1-x0
.c7af	a7af	ad d4 07	lda $07d4			lda		gxX1
.c7b2	a7b2	ed d0 07	sbc $07d0			sbc 	gxX0
.c7b5	a7b5	85 36		sta $36				sta 	gxzTemp0
.c7b7	a7b7	ad d5 07	lda $07d5			lda 	gxX1+1
.c7ba	a7ba	ed d1 07	sbc $07d1			sbc 	gxX0+1
.c7bd	a7bd	85 37		sta $37				sta 	gxzTemp0+1
.c7bf	a7bf	28		plp				plp
.c7c0	a7c0					GXDrawLineTemp0:
.c7c0	a7c0	a5 3c		lda $3c				lda 	gxzScreen 					; push gxzScreen, gxOffset and GXEditSlot on stack
.c7c2	a7c2	48		pha				pha
.c7c3	a7c3	a5 3d		lda $3d				lda 	gxzScreen+1
.c7c5	a7c5	48		pha				pha
.c7c6	a7c6	ad e2 07	lda $07e2			lda 	gxOffset
.c7c9	a7c9	48		pha				pha
.c7ca	a7ca	a5 0b		lda $0b				lda 	GXEditSlot
.c7cc	a7cc	48		pha				pha
.c7cd	a7cd	ac e2 07	ldy $07e2			ldy 	gxOffset 					; Y offset
.c7d0	a7d0	90 1e		bcc $a7f0			bcc 	_GXDLTEndPoints 			; if CC draw end points only.
.c7d2	a7d2					_GXDLTLine:
.c7d2	a7d2	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 				; set pixel
.c7d4	a7d4	2d e0 07	and $07e0			and 	gxANDValue
.c7d7	a7d7	4d df 07	eor $07df			eor 	gxEORValue
.c7da	a7da	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.c7dc	a7dc	a5 36		lda $36				lda 	gxzTemp0 					; decrement counter
.c7de	a7de	d0 04		bne $a7e4			bne 	_GXDLTNoBorrow
.c7e0	a7e0	c6 37		dec $37				dec 	gxzTemp0+1 					; borrow, if goes -ve then exit
.c7e2	a7e2	30 2e		bmi $a812			bmi 	_GXDLTExit
.c7e4	a7e4					_GXDLTNoBorrow:
.c7e4	a7e4	c6 36		dec $36				dec 	gxzTemp0
.c7e6	a7e6	c8		iny				iny 								; next slot.
.c7e7	a7e7	d0 e9		bne $a7d2			bne 	_GXDLTLine
.c7e9	a7e9	e6 3d		inc $3d				inc 	gxzScreen+1 				; carry to next
.c7eb	a7eb	20 20 a8	jsr $a820			jsr 	GXDLTCheckWrap				; check for new page.
.c7ee	a7ee	80 e2		bra $a7d2			bra 	_GXDLTLine
.c7f0	a7f0					_GXDLTEndPoints:
.c7f0	a7f0	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 				; set pixel
.c7f2	a7f2	2d e0 07	and $07e0			and 	gxANDValue
.c7f5	a7f5	4d df 07	eor $07df			eor 	gxEORValue
.c7f8	a7f8	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.c7fa	a7fa	98		tya				tya 								; advance to right side
.c7fb	a7fb	18		clc				clc
.c7fc	a7fc	65 36		adc $36				adc 	gxzTemp0
.c7fe	a7fe	a8		tay				tay
.c7ff	a7ff	a5 3d		lda $3d				lda 	gxzScreen+1
.c801	a801	65 37		adc $37				adc 	gxzTemp0+1
.c803	a803	85 3d		sta $3d				sta 	gxzScreen+1
.c805	a805	20 20 a8	jsr $a820			jsr 	GXDLTCheckWrap 				; fix up.
.c808	a808	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 				; set pixel on the right
.c80a	a80a	2d e0 07	and $07e0			and 	gxANDValue
.c80d	a80d	4d df 07	eor $07df			eor 	gxEORValue
.c810	a810	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.c812	a812					_GXDLTExit:
.c812	a812	68		pla				pla
.c813	a813	85 0b		sta $0b				sta 	GXEditSlot
.c815	a815	68		pla				pla
.c816	a816	8d e2 07	sta $07e2			sta 	gxOffset
.c819	a819	68		pla				pla
.c81a	a81a	85 3d		sta $3d				sta 	gxzScreen+1
.c81c	a81c	68		pla				pla
.c81d	a81d	85 3c		sta $3c				sta 	gxzScreen
.c81f	a81f	60		rts				rts
.c820	a820					GXDLTCheckWrap:
.c820	a820	a5 3d		lda $3d				lda 	gxzScreen+1 				; check end of page
.c822	a822	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8)
.c824	a824	90 06		bcc $a82c			bcc 	_GXDLTCWExit
.c826	a826	e9 20		sbc #$20			sbc 	#$20 						; fix up
.c828	a828	85 3d		sta $3d				sta 	gxzScreen+1
.c82a	a82a	e6 0b		inc $0b				inc 	GXEditSlot 					; next bitmap vram page.
.c82c	a82c					_GXDLTCWExit:
.c82c	a82c	60		rts				rts
.c82d	a82d					GXDrawGraphicElement:
.c82d	a82d	8d 75 08	sta $0875			sta 	gxSize 						; save size
.c830	a830	3a		dec a				dec 	a
.c831	a831	8d 76 08	sta $0876			sta 	gxMask 						; and mask
.c834	a834	ad d9 07	lda $07d9			lda 	gxBitmapsOn 				; check BMP on
.c837	a837	f0 67		beq $a8a0			beq 	_GXSLFail
.c839	a839	ad d2 07	lda $07d2			lda 	gxY0 						; push Y on stack
.c83c	a83c	48		pha				pha
.c83d	a83d	8c 78 08	sty $0878			sty 	gxAcquireVector+1 			; and acquisition vector
.c840	a840	8e 77 08	stx $0877			stx 	gxAcquireVector
.c843	a843	20 d7 aa	jsr $aad7			jsr 	GXOpenBitmap 				; open the bitmap.
.c846	a846	ad 7a 08	lda $087a			lda 	gxUseMode 					; scale bits
.c849	a849	4a		lsr a				lsr 	a
.c84a	a84a	4a		lsr a				lsr 	a
.c84b	a84b	4a		lsr a				lsr 	a
.c84c	a84c	29 07		and #$07			and		#7
.c84e	a84e	1a		inc a				inc 	a
.c84f	a84f	8d 79 08	sta $0879			sta 	gxScale
.c852	a852	64 38		stz $38				stz 	gxzTemp1					; start first line
.c854	a854					_GXGELoop:
.c854	a854	a5 38		lda $38				lda 	gxzTemp1 					; current line number to read.
.c856	a856	2c 7a 08	bit $087a			bit 	gxUseMode 					; check for flip.
.c859	a859	10 06		bpl $a861			bpl		_GXNoVFlip
.c85b	a85b	ad 76 08	lda $0876			lda 	gxMask
.c85e	a85e	38		sec				sec
.c85f	a85f	e5 38		sbc $38				sbc 	gxzTemp1
.c861	a861					_GXNoVFlip:
.c861	a861	aa		tax				tax 								; get the Xth line.
.c862	a862	20 a2 a8	jsr $a8a2			jsr 	_GXCallAcquire 				; get that data.
.c865	a865	ad 79 08	lda $0879			lda 	gxScale 					; do scale identical copies of that line.
.c868	a868	85 39		sta $39				sta 	gxzTemp1+1
.c86a	a86a					_GXGELoop2:
.c86a	a86a	ad d2 07	lda $07d2			lda 	gxY0 						; off screen
.c86d	a86d	cd dc 07	cmp $07dc			cmp 	gxHeight
.c870	a870	b0 10		bcs $a882			bcs 	_GXDGEExit
.c872	a872	20 a5 a8	jsr $a8a5			jsr 	GXRenderOneLine 			; render line
.c875	a875	c6 39		dec $39				dec 	gxzTemp1+1 					; scale times.
.c877	a877	d0 f1		bne $a86a			bne 	_GXGELoop2
.c879	a879	e6 38		inc $38				inc 	gxzTemp1 					; done all lines.
.c87b	a87b	a5 38		lda $38				lda 	gxzTemp1
.c87d	a87d	cd 75 08	cmp $0875			cmp 	gxSize
.c880	a880	d0 d2		bne $a854			bne 	_GXGELoop
.c882	a882					_GXDGEExit:
.c882	a882	68		pla				pla 								; restore Y for next time
.c883	a883	8d d2 07	sta $07d2			sta 	gxY0
.c886	a886	ae 79 08	ldx $0879			ldx 	gxScale 					; get scale (1-8)
.c889	a889					_GXShiftLeft:
.c889	a889	18		clc				clc
.c88a	a88a	ad 75 08	lda $0875			lda 	gxSize
.c88d	a88d	6d d0 07	adc $07d0			adc 	gxX0
.c890	a890	8d d0 07	sta $07d0			sta 	gxX0
.c893	a893	90 03		bcc $a898			bcc 	_GXSLNoCarry
.c895	a895	ee d1 07	inc $07d1			inc 	gxX0+1
.c898	a898					_GXSLNoCarry:
.c898	a898	ca		dex				dex
.c899	a899	d0 ee		bne $a889			bne 	_GXShiftLeft
.c89b	a89b	20 df aa	jsr $aadf			jsr 	GXCloseBitmap
.c89e	a89e	18		clc				clc
.c89f	a89f	60		rts				rts
.c8a0	a8a0					_GXSLFail:
.c8a0	a8a0	38		sec				sec
.c8a1	a8a1	60		rts				rts
.c8a2	a8a2					_GXCallAcquire:
.c8a2	a8a2	6c 77 08	jmp ($0877)			jmp 	(gxAcquireVector)
.c8a5	a8a5					GXRenderOneLine:
.c8a5	a8a5	20 e7 aa	jsr $aae7			jsr 	gxPositionCalc 				; calculate position/offset.
.c8a8	a8a8	ac e2 07	ldy $07e2			ldy 	gxOffset 					; Y contains position.
.c8ab	a8ab	64 3a		stz $3a				stz 	gxzTemp2 					; do size pixels
.c8ad	a8ad					_GXROLLoop1:
.c8ad	a8ad	ad 79 08	lda $0879			lda 	gxScale 					; set to do 'scale' times
.c8b0	a8b0	85 3b		sta $3b				sta 	gxzTemp2+1
.c8b2	a8b2					_GXROLLoop2:
.c8b2	a8b2	a5 3a		lda $3a				lda 	gxzTemp2 					; get current pixel
.c8b4	a8b4	2c dd 07	bit $07dd			bit 	gxMode 						; check H Flip
.c8b7	a8b7	50 06		bvc $a8bf			bvc 	_GXNoHFlip
.c8b9	a8b9	ad 76 08	lda $0876			lda 	gxMask
.c8bc	a8bc	38		sec				sec
.c8bd	a8bd	e5 3a		sbc $3a				sbc 	gxzTemp2
.c8bf	a8bf					_GXNoHFlip:
.c8bf	a8bf	aa		tax				tax 								; read from the pixel buffer
.c8c0	a8c0	bd 23 06	lda $0623,x			lda 	gxPixelBuffer,x
.c8c3	a8c3	d0 07		bne $a8cc			bne 	_GXDraw 					; draw if non zero
.c8c5	a8c5	ad 7a 08	lda $087a			lda 	gxUseMode 					; check to see if solid background
.c8c8	a8c8	29 04		and #$04			and 	#4
.c8ca	a8ca	f0 0a		beq $a8d6			beq 	_GXZeroPixel
.c8cc	a8cc					_GXDraw:
.c8cc	a8cc	b1 3c		lda ($3c),y			lda 	(gxzScreen),y
.c8ce	a8ce	2d e0 07	and $07e0			and 	gxANDValue
.c8d1	a8d1	5d 23 06	eor $0623,x			eor 	gxPixelBuffer,x
.c8d4	a8d4	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.c8d6	a8d6					_GXZeroPixel:
.c8d6	a8d6	c8		iny				iny 								; advance pointer
.c8d7	a8d7	d0 05		bne $a8de			bne 	_GXNoShift
.c8d9	a8d9	e6 3d		inc $3d				inc 	gxzScreen+1 				; carry to next
.c8db	a8db	20 20 a8	jsr $a820			jsr 	GXDLTCheckWrap				; check for new page.
.c8de	a8de					_GXNoShift:
.c8de	a8de	c6 3b		dec $3b				dec 	gxzTemp2+1 					; do the inner loop gxScale times.
.c8e0	a8e0	d0 d0		bne $a8b2			bne 	_GXROLLoop2
.c8e2	a8e2	e6 3a		inc $3a				inc 	gxzTemp2 					; next pixel.
.c8e4	a8e4	a5 3a		lda $3a				lda 	gxzTemp2
.c8e6	a8e6	cd 75 08	cmp $0875			cmp 	gxSize
.c8e9	a8e9	d0 c2		bne $a8ad			bne 	_GXROLLoop1
.c8eb	a8eb	ee d2 07	inc $07d2			inc 	gxY0
.c8ee	a8ee	60		rts				rts
.0875						gxSize:
>0875								.fill 	1
.0876						gxMask:
>0876								.fill 	1
.0877						gxAcquireVector:
>0877								.fill 	2
.0879						gxScale:
>0879								.fill 	1
.087a						gxUseMode:
>087a								.fill 	1
.c8ef	a8ef					GXFontHandler:
.c8ef	a8ef	a5 37		lda $37				lda 	gxzTemp0+1 					; eor with mode
.c8f1	a8f1	4d dd 07	eor $07dd			eor 	gxMode
.c8f4	a8f4	8d 7a 08	sta $087a			sta 	gxUseMode
.c8f7	a8f7	64 37		stz $37				stz 	gxzTemp0+1 					; gxzTemp0 is font #
.c8f9	a8f9	06 36		asl $36				asl	 	gxzTemp0 					; x 2
.c8fb	a8fb	26 37		rol $37				rol	 	gxzTemp0+1
.c8fd	a8fd	06 36		asl $36				asl	 	gxzTemp0 					; x 4
.c8ff	a8ff	26 37		rol $37				rol	 	gxzTemp0+1
.c901	a901	06 36		asl $36				asl	 	gxzTemp0 					; x 8
.c903	a903	26 37		rol $37				rol	 	gxzTemp0+1
.c905	a905	a5 37		lda $37				lda 	gxzTemp0+1 					; put in page C0
.c907	a907	09 c0		ora #$c0			ora 	#$C0
.c909	a909	85 37		sta $37				sta 	gxzTemp0+1
.c90b	a90b	a9 08		lda #$08			lda 	#8 							; size 8x8
.c90d	a90d	a2 15		ldx #$15			ldx 	#GXGetGraphicDataFont & $FF ; XY = Graphic Data retrieval routine
.c90f	a90f	a0 a9		ldy #$a9			ldy 	#GXGetGraphicDataFont >> 8
.c911	a911	20 2d a8	jsr $a82d			jsr 	GXDrawGraphicElement
.c914	a914	60		rts				rts
.c915	a915					GXGetGraphicDataFont:
.c915	a915	8a		txa				txa 								; X->Y
.c916	a916	a8		tay				tay
.c917	a917	a6 01		ldx $01				ldx 	1 							; preserve old value
.c919	a919	a9 01		lda #$01			lda 	#1 							; access page 1 (font memory)
.c91b	a91b	85 01		sta $01				sta 	1
.c91d	a91d	b1 36		lda ($36),y			lda 	(gxzTemp0),y 				; read the font element.
.c91f	a91f	86 01		stx $01				stx 	1 							; put old value back.
.c921	a921	a2 00		ldx #$00			ldx 	#0 							; do 8 times
.c923	a923					_GXExpand:
.c923	a923	9e 23 06	stz $0623,x			stz 	gxPixelBuffer,x 			; zero in pixel buffer
.c926	a926	0a		asl a				asl 	a 							; shift bit 7 into C
.c927	a927	90 08		bcc $a931			bcc 	_GXNoPixel
.c929	a929	48		pha				pha 								; if set, set pixel buffer to current colour.
.c92a	a92a	ad de 07	lda $07de			lda 	gxColour
.c92d	a92d	9d 23 06	sta $0623,x			sta 	gxPixelBuffer,x
.c930	a930	68		pla				pla
.c931	a931					_GXNoPixel:
.c931	a931	e8		inx				inx 								; do the whole byte.
.c932	a932	e0 08		cpx #$08			cpx 	#8
.c934	a934	d0 ed		bne $a923			bne 	_GXExpand
.c936	a936	60		rts				rts
.c937	a937					GXSpriteHandler:
.c937	a937	ad d8 07	lda $07d8			lda 	gxSpritesOn 				; sprites on ?
.c93a	a93a	f0 23		beq $a95f			beq 	_GXSHExit
.c93c	a93c	a5 37		lda $37				lda 	gxzTemp0+1 					; eor with mode
.c93e	a93e	4d dd 07	eor $07dd			eor 	gxMode
.c941	a941	8d 7a 08	sta $087a			sta 	gxUseMode
.c944	a944	a6 36		ldx $36				ldx 	gxzTemp0 					; sprite #
.c946	a946	da		phx				phx
.c947	a947	20 d7 aa	jsr $aad7			jsr 	GXOpenBitmap 				; can access sprite information
.c94a	a94a	68		pla				pla
.c94b	a94b	20 b8 ab	jsr $abb8			jsr 	GXFindSprite 				; get the sprite address
.c94e	a94e	08		php				php
.c94f	a94f	20 df aa	jsr $aadf			jsr 	GXCloseBitmap
.c952	a952	28		plp				plp
.c953	a953	b0 0a		bcs $a95f			bcs		_GXSHExit 					; exit if find failed.
.c955	a955	ad 7b 08	lda $087b			lda 	gxSizePixels 				; return size
.c958	a958	a2 60		ldx #$60			ldx 	#GXSpriteAcquire & $FF
.c95a	a95a	a0 a9		ldy #$a9			ldy 	#GXSpriteAcquire >> 8
.c95c	a95c	20 2d a8	jsr $a82d			jsr 	GXDrawGraphicElement
.c95f	a95f					_GXSHExit:
.c95f	a95f	60		rts				rts
.c960	a960					GXSpriteAcquire:
.c960	a960	ad db 07	lda $07db			lda 	gxSpritePage				; point to base page
.c963	a963	85 0b		sta $0b				sta 	GXEditSlot
.c965	a965	86 36		stx $36				stx 	gxzTemp0 					; row number x 1,2,3,4
.c967	a967	a9 00		lda #$00			lda 	#0
.c969	a969	ae 7c 08	ldx $087c			ldx 	gxSizeBits
.c96c	a96c					_GXTimesRowNumber:
.c96c	a96c	18		clc				clc
.c96d	a96d	65 36		adc $36				adc 	gxzTemp0
.c96f	a96f	ca		dex				dex
.c970	a970	10 fa		bpl $a96c			bpl 	_GXTimesRowNumber
.c972	a972	64 37		stz $37				stz 	gxzTemp0+1
.c974	a974	0a		asl a				asl 	a 							; row x 2,4,6,8
.c975	a975	26 37		rol $37				rol 	gxzTemp0+1
.c977	a977	0a		asl a				asl 	a 							; row x 4,8,12,16
.c978	a978	26 37		rol $37				rol 	gxzTemp0+1
.c97a	a97a	0a		asl a				asl 	a 							; row x 8,16,24,32
.c97b	a97b	26 37		rol $37				rol 	gxzTemp0+1
.c97d	a97d	85 36		sta $36				sta 	gxzTemp0
.c97f	a97f	18		clc				clc 								; add base address.
.c980	a980	a5 36		lda $36				lda 	gxzTemp0
.c982	a982	6d 7e 08	adc $087e			adc 	gxSpriteOffset
.c985	a985	85 36		sta $36				sta 	gxzTemp0
.c987	a987	a5 37		lda $37				lda 	gxzTemp0+1
.c989	a989	6d 7f 08	adc $087f			adc 	gxSpriteOffset+1
.c98c	a98c					_GXSAFindPage:
.c98c	a98c	c9 20		cmp #$20			cmp 	#$20 						; on this page
.c98e	a98e	90 06		bcc $a996			bcc 	_GXSAFoundPage
.c990	a990	e9 20		sbc #$20			sbc 	#$20 						; forward one page
.c992	a992	e6 0b		inc $0b				inc 	GXEditSlot
.c994	a994	80 f6		bra $a98c			bra 	_GXSAFindPage
.c996	a996					_GXSAFoundPage:
.c996	a996	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; physical address of page.
.c998	a998	85 37		sta $37				sta 	gxzTemp0+1 					; gxzTemp0 now points to the page
.c99a	a99a	a0 00		ldy #$00			ldy 	#0
.c99c	a99c					_GXSACopyLoop:
.c99c	a99c	b1 36		lda ($36),y			lda 	(gxzTemp0),y
.c99e	a99e	99 23 06	sta $0623,y			sta 	gxPixelBuffer,y
.c9a1	a9a1	c8		iny				iny
.c9a2	a9a2	cc 7b 08	cpy $087b			cpy 	gxSizePixels
.c9a5	a9a5	d0 f5		bne $a99c			bne 	_GXSACopyLoop
.c9a7	a9a7	60		rts				rts
.c9a8	a9a8					GXSelect:
.c9a8	a9a8	ad d8 07	lda $07d8			lda 	gxSpritesOn
.c9ab	a9ab	f0 22		beq $a9cf			beq 	_GXSFail
.c9ad	a9ad	a5 36		lda $36				lda 	gxzTemp0 					; illegal sprite #
.c9af	a9af	c9 40		cmp #$40			cmp 	#64
.c9b1	a9b1	b0 1c		bcs $a9cf			bcs 	_GXSFail
.c9b3	a9b3	8d e3 07	sta $07e3			sta 	GSCurrentSpriteID
.c9b6	a9b6	a4 37		ldy $37				ldy 	gxzTemp0+1 					; control value.
.c9b8	a9b8	a9 00		lda #$00			lda  	#0 							; multiply sprite # x 8 => A
.c9ba	a9ba	06 36		asl $36				asl 	gxzTemp0
.c9bc	a9bc	06 36		asl $36				asl 	gxzTemp0
.c9be	a9be	06 36		asl $36				asl 	gxzTemp0
.c9c0	a9c0	2a		rol a				rol 	a
.c9c1	a9c1	69 d9		adc #$d9			adc 	#$D9 						; sprite area
.c9c3	a9c3	8d e5 07	sta $07e5			sta 	GSCurrentSpriteAddr+1 		; address to GSCurrentSprite and gxzTemp
.c9c6	a9c6	85 37		sta $37				sta 	gxzTemp0+1
.c9c8	a9c8	a5 36		lda $36				lda 	gxzTemp0
.c9ca	a9ca	8d e4 07	sta $07e4			sta 	GSCurrentSpriteAddr
.c9cd	a9cd	18		clc				clc
.c9ce	a9ce	60		rts				rts
.c9cf	a9cf					_GXSFail:
.c9cf	a9cf	38		sec				sec
.c9d0	a9d0	60		rts				rts
.c9d1	a9d1					GXSelectImage:
.c9d1	a9d1	ad d8 07	lda $07d8			lda 	gxSpritesOn
.c9d4	a9d4	f0 74		beq $aa4a			beq 	_GXSIFail
.c9d6	a9d6	ad e5 07	lda $07e5			lda 	GSCurrentSpriteAddr+1 		; check sprite selected
.c9d9	a9d9	f0 6f		beq $aa4a			beq 	_GXSIFail 					; (checking the MSB)
.c9db	a9db	64 01		stz $01				stz 	1
.c9dd	a9dd	a5 37		lda $37				lda 	gxzTemp0+1 					; push show/hide on the stack.
.c9df	a9df	d0 6b		bne $aa4c			bne 	_GXSIHide
.c9e1	a9e1	a5 36		lda $36				lda 	gxzTemp0 					; sprite image
.c9e3	a9e3	48		pha				pha
.c9e4	a9e4	20 d7 aa	jsr $aad7			jsr 	GXOpenBitmap
.c9e7	a9e7	68		pla				pla
.c9e8	a9e8	20 b8 ab	jsr $abb8			jsr 	GXFindSprite
.c9eb	a9eb	b0 5a		bcs $aa47			bcs 	_GXSICloseFail 				; no image
.c9ed	a9ed	a0 01		ldy #$01			ldy 	#1
.c9ef	a9ef	ad e4 07	lda $07e4			lda 	GSCurrentSpriteAddr
.c9f2	a9f2	85 36		sta $36				sta 	gxzTemp0
.c9f4	a9f4	ad e5 07	lda $07e5			lda 	GSCurrentSpriteAddr+1
.c9f7	a9f7	85 37		sta $37				sta 	gxzTemp0+1
.c9f9	a9f9	ad 7e 08	lda $087e			lda 	gxSpriteOffset
.c9fc	a9fc	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.c9fe	a9fe	18		clc				clc
.c9ff	a9ff	ad 7f 08	lda $087f			lda 	gxSpriteOffset+1
.ca02	aa02	6d e6 07	adc $07e6			adc 	gxSpriteOffsetBase
.ca05	aa05	c8		iny				iny
.ca06	aa06	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.ca08	aa08	ad e7 07	lda $07e7			lda 	gxSpriteOffsetBase+1
.ca0b	aa0b	69 00		adc #$00			adc 	#0
.ca0d	aa0d	c8		iny				iny
.ca0e	aa0e	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.ca10	aa10	ad 7c 08	lda $087c			lda 	gxSizeBits 					; get raw size
.ca13	aa13	49 03		eor #$03			eor 	#3 							; make it right (00=32 etc.)
.ca15	aa15	2a		rol a				rol 	a 							; x 2
.ca16	aa16	0a		asl a				asl 	a 							; x 4
.ca17	aa17	0a		asl a				asl 	a 							; x 8
.ca18	aa18	0a		asl a				asl 	a 							; x 16
.ca19	aa19	0d 7d 08	ora $087d			ora 	gxSpriteLUT 				; Or with LUT
.ca1c	aa1c	0a		asl a				asl 	a 							; 1 shift
.ca1d	aa1d	09 01		ora #$01			ora 	#1 							; enable sprite.
.ca1f	aa1f	92 36		sta ($36)			sta 	(gxzTemp0) 					; and write back
.ca21	aa21	20 df aa	jsr $aadf			jsr 	GXCloseBitmap
.ca24	aa24	ae e3 07	ldx $07e3			ldx 	GSCurrentSpriteID 			; point to sprite entries.
.ca27	aa27	bd 28 08	lda $0828,x			lda 	gxSpriteHigh,x 				; clear upper two bits of size
.ca2a	aa2a	29 3f		and #$3f			and 	#$3F
.ca2c	aa2c	9d 28 08	sta $0828,x			sta 	gxSpriteHigh,x
.ca2f	aa2f	ad 7c 08	lda $087c			lda 	gxSizeBits 					; get bit size
.ca32	aa32	6a		ror a				ror 	a 							; shift into bits 6/7
.ca33	aa33	6a		ror a				ror 	a
.ca34	aa34	6a		ror a				ror 	a
.ca35	aa35	29 c0		and #$c0			and 	#$C0
.ca37	aa37	1d 28 08	ora $0828,x			ora 	gxSpriteHigh,x 				; put in  upper 2 bits of sprite data
.ca3a	aa3a	9d 28 08	sta $0828,x			sta 	gxSpriteHigh,x
.ca3d	aa3d	bd e8 07	lda $07e8,x			lda 	gxSpriteLow,x 				; clear hidden flag.
.ca40	aa40	29 7f		and #$7f			and 	#$7F
.ca42	aa42	9d e8 07	sta $07e8,x			sta 	gxSpriteLow,x
.ca45	aa45	18		clc				clc
.ca46	aa46	60		rts				rts
.ca47	aa47					_GXSICloseFail:
.ca47	aa47	20 df aa	jsr $aadf			jsr 	GXCloseBitmap
.ca4a	aa4a					_GXSIFail:
.ca4a	aa4a	38		sec				sec
.ca4b	aa4b	60		rts				rts
.ca4c	aa4c					_GXSIHide:
.ca4c	aa4c	ad e4 07	lda $07e4			lda 	GSCurrentSpriteAddr  		; get Sprite h/w address and write there
.ca4f	aa4f	85 36		sta $36				sta 	gxzTemp0
.ca51	aa51	ad e5 07	lda $07e5			lda 	GSCurrentSpriteAddr+1
.ca54	aa54	85 37		sta $37				sta 	gxzTemp0+1
.ca56	aa56	a9 00		lda #$00			lda 	#0
.ca58	aa58	92 36		sta ($36)			sta 	(gxzTemp0)
.ca5a	aa5a	ae e3 07	ldx $07e3			ldx 	GSCurrentSpriteID 			; get sprite ID
.ca5d	aa5d	bd e8 07	lda $07e8,x			lda 	gxSpriteLow,x 				; set the hidden bit.
.ca60	aa60	09 80		ora #$80			ora 	#$80
.ca62	aa62	9d e8 07	sta $07e8,x			sta 	gxSpriteLow,x
.ca65	aa65	18		clc				clc
.ca66	aa66	60		rts				rts
.ca67	aa67					GXMoveSprite:
.ca67	aa67	ad d8 07	lda $07d8			lda 	gxSpritesOn
.ca6a	aa6a	f0 65		beq $aad1			beq 	_GXSIFail
.ca6c	aa6c	ad e5 07	lda $07e5			lda 	GSCurrentSpriteAddr+1 		; check sprite selected
.ca6f	aa6f	f0 60		beq $aad1			beq 	_GXSIFail
.ca71	aa71	85 37		sta $37				sta 	gxzTemp0+1
.ca73	aa73	a0 04		ldy #$04			ldy 	#4
.ca75	aa75	ad e4 07	lda $07e4			lda 	GSCurrentSpriteAddr
.ca78	aa78	85 36		sta $36				sta 	gxzTemp0
.ca7a	aa7a	ae e3 07	ldx $07e3			ldx 	GSCurrentSpriteID 			; get the size from the upper two bits
.ca7d	aa7d	bd 28 08	lda $0828,x			lda 	gxSpriteHigh,x
.ca80	aa80	2a		rol a				rol 	a	 						; into bits 0,1.
.ca81	aa81	2a		rol a				rol 	a
.ca82	aa82	2a		rol a				rol 	a
.ca83	aa83	29 03		and #$03			and 	#3
.ca85	aa85	aa		tax				tax
.ca86	aa86	bd d3 aa	lda $aad3,x			lda 	_GXMSOffset,x 				; get 32-SpriteSize/2
.ca89	aa89	48		pha				pha
.ca8a	aa8a	18		clc				clc
.ca8b	aa8b	6d d0 07	adc $07d0			adc 	gxX0						; copy position.
.ca8e	aa8e	91 36		sta ($36),y			sta 	(gxzTemp0),y
.ca90	aa90	c8		iny				iny
.ca91	aa91	ad d1 07	lda $07d1			lda 	gxX0+1
.ca94	aa94	69 00		adc #$00			adc 	#0
.ca96	aa96	91 36		sta ($36),y			sta 	(gxzTemp0),y
.ca98	aa98	c8		iny				iny
.ca99	aa99	68		pla				pla
.ca9a	aa9a	18		clc				clc
.ca9b	aa9b	6d d2 07	adc $07d2			adc 	gxY0
.ca9e	aa9e	91 36		sta ($36),y			sta 	(gxzTemp0),y
.caa0	aaa0	a9 00		lda #$00			lda 	#0
.caa2	aaa2	69 00		adc #$00			adc 	#0
.caa4	aaa4	c8		iny				iny
.caa5	aaa5	91 36		sta ($36),y			sta 	(gxzTemp0),y
.caa7	aaa7	4e d1 07	lsr $07d1			lsr 	gxX0+1 						; divide X by 4
.caaa	aaaa	6e d0 07	ror $07d0			ror 	gxX0
.caad	aaad	4e d0 07	lsr $07d0			lsr 	gxX0
.cab0	aab0	4e d2 07	lsr $07d2			lsr 	gxY0 						; divide Y by 4
.cab3	aab3	4e d2 07	lsr $07d2			lsr 	gxY0
.cab6	aab6	ae e3 07	ldx $07e3			ldx 	GSCurrentSpriteID 			; copy X/4 and Y/4 into the status bytes
.cab9	aab9	bd e8 07	lda $07e8,x			lda 	gxSpriteLow,x
.cabc	aabc	29 80		and #$80			and 	#$80
.cabe	aabe	0d d0 07	ora $07d0			ora 	gxX0
.cac1	aac1	9d e8 07	sta $07e8,x			sta 	gxSpriteLow,x
.cac4	aac4	bd 28 08	lda $0828,x			lda 	gxSpriteHigh,x
.cac7	aac7	29 c0		and #$c0			and 	#$C0
.cac9	aac9	0d d2 07	ora $07d2			ora 	gxY0
.cacc	aacc	9d 28 08	sta $0828,x			sta 	gxSpriteHigh,x
.cacf	aacf	18		clc				clc
.cad0	aad0	60		rts				rts
.cad1	aad1					_GXSIFail:
.cad1	aad1	38		sec				sec
.cad2	aad2	60		rts				rts
.cad3	aad3					_GXMSOffset:
>cad3	aad3	1c						.byte 	32-8/2
>cad4	aad4	18						.byte 	32-16/2
>cad5	aad5	14						.byte 	32-24/2
>cad6	aad6	10						.byte 	32-32/2
.cad7	aad7					GXOpenBitmap:
.cad7	aad7	78		sei				sei 								; no interrupts here
.cad8	aad8	a5 0b		lda $0b				lda 	GXEditSlot 					; Save the original LUT slot value
.cada	aada	8d e1 07	sta $07e1			sta 	gxOriginalLUTValue
.cadd	aadd	58		cli				cli
.cade	aade	60		rts				rts
.cadf	aadf					GXCloseBitmap:
.cadf	aadf	78		sei				sei
.cae0	aae0	ad e1 07	lda $07e1			lda 	gxOriginalLUTValue 			; restore LUT slot value
.cae3	aae3	85 0b		sta $0b				sta 	GXEditSlot
.cae5	aae5	58		cli				cli
.cae6	aae6	60		rts				rts
.cae7	aae7					gxPositionCalc:
.cae7	aae7	a5 36		lda $36				lda 	gxzTemp0 						; save temp memory slot
.cae9	aae9	48		pha				pha
.caea	aaea	ad d2 07	lda $07d2			lda 	gxY0 							; gxzScreen = Y0
.caed	aaed	85 3c		sta $3c				sta 	gxzScreen
.caef	aaef	64 3d		stz $3d				stz 	gxzScreen+1
.caf1	aaf1	06 3c		asl $3c				asl 	gxzScreen 						; gxzScreen = Y0 * 4
.caf3	aaf3	26 3d		rol $3d				rol 	gxzScreen+1
.caf5	aaf5	06 3c		asl $3c				asl 	gxzScreen
.caf7	aaf7	26 3d		rol $3d				rol 	gxzScreen+1
.caf9	aaf9	18		clc				clc 									; gxzScreen = Y0 * 5, as it's still in A
.cafa	aafa	65 3c		adc $3c				adc 	gxzScreen
.cafc	aafc	85 3c		sta $3c				sta 	gxzScreen
.cafe	aafe	90 02		bcc $ab02			bcc 	_GXPCNoCarry
.cb00	ab00	e6 3d		inc $3d				inc 	gxzScreen+1
.cb02	ab02					_GXPCNoCarry:
.cb02	ab02	06 3c		asl $3c				asl 	gxzScreen 						; now Y0 * 10
.cb04	ab04	26 3d		rol $3d				rol 	gxzScreen+1
.cb06	ab06	a5 3d		lda $3d				lda	 	gxzScreen+1
.cb08	ab08	85 36		sta $36				sta 	gxzTemp0 						; the page offset.
.cb0a	ab0a	64 3d		stz $3d				stz 	gxzScreen+1
.cb0c	ab0c	a9 05		lda #$05			lda 	#5 								; now multiply by 32, this puts this in the range 0..8191
.cb0e	ab0e					_GXPCMultiply32:
.cb0e	ab0e	06 3c		asl $3c				asl 	gxzScreen
.cb10	ab10	26 3d		rol $3d				rol 	gxzScreen+1
.cb12	ab12	3a		dec a				dec 	a
.cb13	ab13	d0 f9		bne $ab0e			bne 	_GXPCMultiply32
.cb15	ab15	18		clc				clc
.cb16	ab16	ad d0 07	lda $07d0			lda 	gxX0 						; add X to this value, put the result in gxOffset, gxzScreen has to be on a page boundary
.cb19	ab19	65 3c		adc $3c				adc 	gxzScreen
.cb1b	ab1b	8d e2 07	sta $07e2			sta 	gxOffset
.cb1e	ab1e	ad d1 07	lda $07d1			lda 	gxX0+1
.cb21	ab21	65 3d		adc $3d				adc 	gxzScreen+1
.cb23	ab23	c9 20		cmp #$20			cmp 	#$20 						; has it overflowed into the next one ?
.cb25	ab25	90 04		bcc $ab2b			bcc 	_GXPCNoOverflow
.cb27	ab27	29 1f		and #$1f			and 	#$1F 						; fix it up
.cb29	ab29	e6 36		inc $36				inc 	gxzTemp0 					; add 1 to the page number
.cb2b	ab2b					_GXPCNoOverflow:
.cb2b	ab2b	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; make it the address mapped in.
.cb2d	ab2d	85 3d		sta $3d				sta 	gxzScreen+1
.cb2f	ab2f	64 3c		stz $3c				stz 	gxzScreen
.cb31	ab31	18		clc				clc
.cb32	ab32	a5 36		lda $36				lda 	gxzTemp0 					; get the page number
.cb34	ab34	6d da 07	adc $07da			adc 	gxBasePage 					; by adding the base page
.cb37	ab37	85 0b		sta $0b				sta 	GXEditSlot 					; and map it into memory.
.cb39	ab39	68		pla				pla
.cb3a	ab3a	85 36		sta $36				sta 	gxzTemp0
.cb3c	ab3c	60		rts				rts
.cb3d	ab3d					GXMovePositionDown:
.cb3d	ab3d	18		clc				clc 								; add 320 to offset/temp+1
.cb3e	ab3e	ad e2 07	lda $07e2			lda 	gxOffset
.cb41	ab41	69 40		adc #$40			adc 	#64
.cb43	ab43	8d e2 07	sta $07e2			sta 	gxOffset
.cb46	ab46	a5 3d		lda $3d				lda 	gxzScreen+1
.cb48	ab48	69 01		adc #$01			adc 	#1
.cb4a	ab4a	85 3d		sta $3d				sta 	gxzScreen+1
.cb4c	ab4c	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page ?
.cb4e	ab4e	90 07		bcc $ab57			bcc 	_GXMPDExit
.cb50	ab50	38		sec				sec  								; next page, adjust address
.cb51	ab51	e9 20		sbc #$20			sbc 	#$20
.cb53	ab53	85 3d		sta $3d				sta 	gxzScreen+1
.cb55	ab55	e6 0b		inc $0b				inc 	GXEditSlot 					; bump page
.cb57	ab57					_GXMPDExit:
.cb57	ab57	60		rts				rts
.cb58	ab58					GXCollide:
.cb58	ab58	a5 36		lda $36				lda 	gxzTemp0 					; check if sprite numbers are legal.
.cb5a	ab5a	aa		tax				tax
.cb5b	ab5b	05 37		ora $37				ora 	gxzTemp0+1
.cb5d	ab5d	29 c0		and #$c0			and 	#$C0
.cb5f	ab5f	38		sec				sec
.cb60	ab60	d0 53		bne $abb5			bne 	_GXCollideFail 				; if either >= 64, fail.
.cb62	ab62	a4 37		ldy $37				ldy 	gxzTemp0+1 					; at this point X is 1st sprite and Y is 2nd sprite.
.cb64	ab64	b9 e8 07	lda $07e8,y			lda 	gxSpriteLow,y 				; check if either hidden bit is set
.cb67	ab67	1d e8 07	ora $07e8,x			ora 	gxSpriteLow,x
.cb6a	ab6a	30 48		bmi $abb4			bmi 	_GXOkayFail 				; if either hidden, then they cannot collide.
.cb6c	ab6c	18		clc				clc 								; need to calculate sum of sizes.
.cb6d	ab6d	b9 28 08	lda $0828,y			lda 	gxSpriteHigh,y
.cb70	ab70	7d 28 08	adc $0828,x			adc 	gxSpriteHigh,x 				; at this point, CS, Bit 6 and 7 contain that sum.
.cb73	ab73	29 c0		and #$c0			and 	#$C0 					 	; mask off
.cb75	ab75	6a		ror a				ror 	a 							; 5/6/7
.cb76	ab76	4a		lsr a				lsr 	a 							; 4/5/6
.cb77	ab77	4a		lsr a				lsr 	a 							; 3/4/5
.cb78	ab78	4a		lsr a				lsr 	a 							; 2/3/4
.cb79	ab79	18		clc				clc
.cb7a	ab7a	69 08		adc #$08			adc 	#$08
.cb7c	ab7c	4a		lsr a				lsr 	a 							; adjust because all coordinates are divided by 4 to store.
.cb7d	ab7d	4a		lsr a				lsr 	a
.cb7e	ab7e	85 38		sta $38				sta 	gxzTemp1 					; so the difference between the centres has to be less than this.
.cb80	ab80	b9 28 08	lda $0828,y			lda 	gxSpriteHigh,y 				; calculate y1-y0
.cb83	ab83	29 3f		and #$3f			and 	#$3F
.cb85	ab85	85 39		sta $39				sta 	gxzTemp1+1
.cb87	ab87	38		sec				sec
.cb88	ab88	bd 28 08	lda $0828,x			lda 	gxSpriteHigh,x
.cb8b	ab8b	29 3f		and #$3f			and 	#$3F
.cb8d	ab8d	e5 39		sbc $39				sbc 	gxzTemp1+1
.cb8f	ab8f	b0 03		bcs $ab94			bcs 	_GXCAbs1 					; calculate |y1-y0|
.cb91	ab91	49 ff		eor #$ff			eor 	#$FF
.cb93	ab93	1a		inc a				inc 	a
.cb94	ab94					_GXCAbs1:
.cb94	ab94	c5 38		cmp $38				cmp 	gxzTemp1 					; if >= difference then no overlap
.cb96	ab96	b0 1c		bcs $abb4			bcs 	_GXOkayFail
.cb98	ab98	85 39		sta $39				sta 	gxzTemp1+1 					; save |y1-y0|
.cb9a	ab9a	38		sec				sec 								; calculate |x1-x0|
.cb9b	ab9b	b9 e8 07	lda $07e8,y			lda 	gxSpriteLow,y
.cb9e	ab9e	fd e8 07	sbc $07e8,x			sbc 	gxSpriteLow,x
.cba1	aba1	b0 03		bcs $aba6			bcs 	_GXCAbs2
.cba3	aba3	49 ff		eor #$ff			eor 	#$FF
.cba5	aba5	1a		inc a				inc 	a
.cba6	aba6					_GXCAbs2:
.cba6	aba6	c5 38		cmp $38				cmp 	gxzTemp1 					; if >= difference then no overlap
.cba8	aba8	b0 0a		bcs $abb4			bcs 	_GXOkayFail
.cbaa	abaa	c5 39		cmp $39				cmp 	gxzTemp1+1 					; is it less than the previous one.
.cbac	abac	90 02		bcc $abb0			bcc 	_GXCHaveLowest
.cbae	abae	a5 39		lda $39				lda 	gxzTemp1+1 					; if not, that's the smallest difference.
.cbb0	abb0					_GXCHaveLowest:
.cbb0	abb0	0a		asl a				asl 	a 							; scale to allow for >> 2
.cbb1	abb1	0a		asl a				asl 	a
.cbb2	abb2	18		clc				clc
.cbb3	abb3	60		rts				rts
.cbb4	abb4					_GXOkayFail:
.cbb4	abb4	18		clc				clc
.cbb5	abb5					_GXCollideFail:
.cbb5	abb5	a9 ff		lda #$ff			lda 	#$FF
.cbb7	abb7	60		rts				rts
.cbb8	abb8					GXFindSprite:
.cbb8	abb8	aa		tax				tax
.cbb9	abb9	ad db 07	lda $07db			lda 	gxSpritePage 				; access the base page of the sprite
.cbbc	abbc	85 0b		sta $0b				sta 	GXEditSlot
.cbbe	abbe	bd 00 61	lda $6100,x			lda 	GXMappingAddress+256,x 		; check a valid sprite
.cbc1	abc1	1d 00 60	ora $6000,x			ora 	GXMappingAddress,x
.cbc4	abc4	f0 33		beq $abf9			beq 	_GXFSFail
.cbc6	abc6	bd 00 61	lda $6100,x			lda 	GXMappingAddress+256,x 		; MSB
.cbc9	abc9	8d 7f 08	sta $087f			sta 	gxSpriteOffset+1
.cbcc	abcc	bd 00 60	lda $6000,x			lda 	GXMappingAddress,x 			; LSB
.cbcf	abcf	48		pha				pha 								; save twice
.cbd0	abd0	48		pha				pha
.cbd1	abd1	29 03		and #$03			and 	#3 							; get sprite size
.cbd3	abd3	8d 7c 08	sta $087c			sta 	gxSizeBits 					; save raw (0-3)
.cbd6	abd6	aa		tax				tax
.cbd7	abd7	bd fb ab	lda $abfb,x			lda 	_GXFXSSTTable,x 			; read sprite size
.cbda	abda	8d 7b 08	sta $087b			sta 	gxSizePixels 				; save (8/16/24/32)
.cbdd	abdd	68		pla				pla 								; get LUT
.cbde	abde	4a		lsr a				lsr		a
.cbdf	abdf	4a		lsr a				lsr		a
.cbe0	abe0	29 03		and #$03			and 	#3
.cbe2	abe2	8d 7d 08	sta $087d			sta 	gxSpriteLUT
.cbe5	abe5	68		pla				pla 								; address, neeeds to be x 4
.cbe6	abe6	29 f0		and #$f0			and 	#$F0
.cbe8	abe8	8d 7e 08	sta $087e			sta 	gxSpriteOffset
.cbeb	abeb	0e 7e 08	asl $087e			asl 	gxSpriteOffset
.cbee	abee	2e 7f 08	rol $087f			rol 	gxSpriteOffset+1
.cbf1	abf1	0e 7e 08	asl $087e			asl 	gxSpriteOffset
.cbf4	abf4	2e 7f 08	rol $087f			rol 	gxSpriteOffset+1
.cbf7	abf7	18		clc				clc
.cbf8	abf8	60		rts				rts
.cbf9	abf9					_GXFSFail:
.cbf9	abf9	38		sec				sec
.cbfa	abfa	60		rts				rts
.cbfb	abfb					_GXFXSSTTable:
>cbfb	abfb	08 10 18 20					.byte 	8,16,24,32
.087b						gxSizePixels:
>087b								.fill 	1
.087c						gxSizeBits:
>087c								.fill 	1
.087d						gxSpriteLUT:
>087d								.fill 	1
.087e						gxSpriteOffset:
>087e								.fill 	2
.cbff	abff					GXSortXY:
.cbff	abff	20 1d ac	jsr $ac1d			jsr 	GXSortY 					; will be sorted on Y now
.cc02	ac02	ad d0 07	lda $07d0			lda 	gxX0 						; compare X0 v X1
.cc05	ac05	cd d4 07	cmp $07d4			cmp 	gxX1
.cc08	ac08	ad d1 07	lda $07d1			lda 	gxX0+1
.cc0b	ac0b	ed d5 07	sbc $07d5			sbc 	gxX1+1
.cc0e	ac0e	90 0c		bcc $ac1c			bcc 	_GXSXYExit 					; X0 < X1 exit
.cc10	ac10	a2 00		ldx #$00			ldx 	#0 							; swap them over
.cc12	ac12	a0 04		ldy #$04			ldy 	#4
.cc14	ac14	20 31 ac	jsr $ac31			jsr 	GXSwapXY
.cc17	ac17	e8		inx				inx
.cc18	ac18	c8		iny				iny
.cc19	ac19	20 31 ac	jsr $ac31			jsr 	GXSwapXY
.cc1c	ac1c					_GXSXYExit:
.cc1c	ac1c	60		rts				rts
.cc1d	ac1d					GXSortY:
.cc1d	ac1d	ad d2 07	lda $07d2			lda 	gxY0 						; if Y0 >= Y1
.cc20	ac20	cd d6 07	cmp $07d6			cmp 	gxY1
.cc23	ac23	90 0b		bcc $ac30			bcc 	_GXSYSorted
.cc25	ac25	a2 03		ldx #$03			ldx 	#3 							; swap 3-0 - for lines we want to sort but keep lines together
.cc27	ac27	a0 07		ldy #$07			ldy 	#7 							; with 4-7
.cc29	ac29					_GXSwap1:
.cc29	ac29	20 31 ac	jsr $ac31			jsr 	GXSwapXY
.cc2c	ac2c	88		dey				dey
.cc2d	ac2d	ca		dex				dex
.cc2e	ac2e	10 f9		bpl $ac29			bpl 	_GXSwap1
.cc30	ac30					_GXSYSorted:
.cc30	ac30	60		rts				rts
.cc31	ac31					GXSwapXY:
.cc31	ac31	bd d0 07	lda $07d0,x			lda 	gxX0,x
.cc34	ac34	48		pha				pha
.cc35	ac35	b9 d0 07	lda $07d0,y			lda 	gxX0,y
.cc38	ac38	9d d0 07	sta $07d0,x			sta 	gxX0,x
.cc3b	ac3b	68		pla				pla
.cc3c	ac3c	99 d0 07	sta $07d0,y			sta 	gxX0,y
.cc3f	ac3f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_tokeniser.module

=1						tokeniserIntegrated=1
.cc40	ac40					KeywordSet0:
>cc40	ac40	00 65					.text	0,$65,""               ; $80 !0:EOF
>cc42	ac42	00 58					.text	0,$58,""               ; $81 !1:SH1
>cc44	ac44	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>cc46	ac46	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $83 ABS(
>cc4c	ac4c	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $84 ALLOC(
>cc54	ac54	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $85 ASC(
>cc5a	ac5a	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $86 CHR$(
>cc61	ac61	06 aa 45 56 45 4e 54 28			.text	6,$aa,"EVENT("         ; $87 EVENT(
>cc69	ac69	05 6b 46 41 4c 53 45			.text	5,$6b,"FALSE"          ; $88 FALSE
>cc70	ac70	05 44 46 52 41 43 28			.text	5,$44,"FRAC("          ; $89 FRAC(
>cc77	ac77	05 2c 47 45 54 24 28			.text	5,$2c,"GET$("          ; $8a GET$(
>cc7e	ac7e	04 08 47 45 54 28			.text	4,$08,"GET("           ; $8b GET(
>cc84	ac84	09 4a 47 45 54 44 41 54			.text	9,$4a,"GETDATE$("      ; $8c GETDATE$(
>cc8c	ac8c	45 24 28
>cc8f	ac8f	09 5b 47 45 54 54 49 4d			.text	9,$5b,"GETTIME$("      ; $8d GETTIME$(
>cc97	ac97	45 24 28
>cc9a	ac9a	04 0d 48 49 54 28			.text	4,$0d,"HIT("           ; $8e HIT(
>cca0	aca0	07 cc 49 4e 4b 45 59 24			.text	7,$cc,"INKEY$("        ; $8f INKEY$(
>cca8	aca8	28
>cca9	aca9	06 a8 49 4e 4b 45 59 28			.text	6,$a8,"INKEY("         ; $90 INKEY(
>ccb1	acb1	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $91 INT(
>ccb7	acb7	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $92 ISVAL(
>ccbf	acbf	0a e0 49 54 45 4d 43 4f			.text	10,$e0,"ITEMCOUNT("     ; $93 ITEMCOUNT(
>ccc7	acc7	55 4e 54 28
>cccb	accb	09 5b 49 54 45 4d 47 45			.text	9,$5b,"ITEMGET$("      ; $94 ITEMGET$(
>ccd3	acd3	54 24 28
>ccd6	acd6	05 5c 4a 4f 59 42 28			.text	5,$5c,"JOYB("          ; $95 JOYB(
>ccdd	acdd	05 72 4a 4f 59 58 28			.text	5,$72,"JOYX("          ; $96 JOYX(
>cce4	ace4	05 73 4a 4f 59 59 28			.text	5,$73,"JOYY("          ; $97 JOYY(
>cceb	aceb	08 49 4b 45 59 44 4f 57			.text	8,$49,"KEYDOWN("       ; $98 KEYDOWN(
>ccf3	acf3	4e 28
>ccf5	acf5	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $99 LEFT$(
>ccfd	acfd	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $9a LEN(
>cd03	ad03	04 0e 4d 41 58 28			.text	4,$0e,"MAX("           ; $9b MAX(
>cd09	ad09	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $9c MID$(
>cd10	ad10	04 0c 4d 49 4e 28			.text	4,$0c,"MIN("           ; $9d MIN(
>cd16	ad16	04 19 4e 4f 54 28			.text	4,$19,"NOT("           ; $9e NOT(
>cd1c	ad1c	05 4d 50 45 45 4b 28			.text	5,$4d,"PEEK("          ; $9f PEEK(
>cd23	ad23	06 91 50 45 45 4b 44 28			.text	6,$91,"PEEKD("         ; $a0 PEEKD(
>cd2b	ad2b	06 99 50 45 45 4b 4c 28			.text	6,$99,"PEEKL("         ; $a1 PEEKL(
>cd33	ad33	06 a4 50 45 45 4b 57 28			.text	6,$a4,"PEEKW("         ; $a2 PEEKW(
>cd3b	ad3b	08 3c 50 4c 41 59 49 4e			.text	8,$3c,"PLAYING("       ; $a3 PLAYING(
>cd43	ad43	47 28
>cd45	ad45	07 e9 52 41 4e 44 4f 4d			.text	7,$e9,"RANDOM("        ; $a4 RANDOM(
>cd4d	ad4d	28
>cd4e	ad4e	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $a5 RIGHT$(
>cd56	ad56	28
>cd57	ad57	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $a6 RND(
>cd5d	ad5d	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $a7 SGN(
>cd63	ad63	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $a8 SPC(
>cd69	ad69	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $a9 STR$(
>cd70	ad70	06 a9 54 49 4d 45 52 28			.text	6,$a9,"TIMER("         ; $aa TIMER(
>cd78	ad78	04 40 54 52 55 45			.text	4,$40,"TRUE"           ; $ab TRUE
>cd7e	ad7e	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $ac VAL(
>cd84	ad84	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $ad FOR
>cd89	ad89	02 8f 49 46				.text	2,$8f,"IF"             ; $ae IF
>cd8d	ad8d	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $af PROC
>cd93	ad93	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $b0 REPEAT
>cd9b	ad9b	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $b1 WHILE
>cda2	ada2	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $b2 ENDIF
>cda9	ada9	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $b3 ENDPROC
>cdb1	adb1	43
>cdb2	adb2	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $b4 NEXT
>cdb8	adb8	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $b5 THEN
>cdbe	adbe	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $b6 UNTIL
>cdc5	adc5	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $b7 WEND
>cdcb	adcb	02 95 41 54				.text	2,$95,"AT"             ; $b8 AT
>cdcf	adcf	02 9b 42 59				.text	2,$9b,"BY"             ; $b9 BY
>cdd3	add3	04 1c 43 41 4c 4c			.text	4,$1c,"CALL"           ; $ba CALL
>cdd9	add9	06 b2 43 49 52 43 4c 45			.text	6,$b2,"CIRCLE"         ; $bb CIRCLE
>cde1	ade1	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $bc CLEAR
>cde8	ade8	05 7f 43 4f 4c 4f 52			.text	5,$7f,"COLOR"          ; $bd COLOR
>cdef	adef	06 d4 43 4f 4c 4f 55 52			.text	6,$d4,"COLOUR"         ; $be COLOUR
>cdf7	adf7	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $bf DATA
>cdfd	adfd	03 da 44 49 4d				.text	3,$da,"DIM"            ; $c0 DIM
>ce02	ae02	06 db 44 4f 57 4e 54 4f			.text	6,$db,"DOWNTO"         ; $c1 DOWNTO
>ce0a	ae0a	04 29 45 4c 53 45			.text	4,$29,"ELSE"           ; $c2 ELSE
>ce10	ae10	04 34 46 52 4f 4d			.text	4,$34,"FROM"           ; $c3 FROM
>ce16	ae16	03 e5 47 46 58				.text	3,$e5,"GFX"            ; $c4 GFX
>ce1b	ae1b	04 24 48 45 52 45			.text	4,$24,"HERE"           ; $c5 HERE
>ce21	ae21	05 63 49 4d 41 47 45			.text	5,$63,"IMAGE"          ; $c6 IMAGE
>ce28	ae28	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $c7 LET
>ce2d	ae2d	04 28 4c 49 4e 45			.text	4,$28,"LINE"           ; $c8 LINE
>ce33	ae33	05 6b 4c 4f 43 41 4c			.text	5,$6b,"LOCAL"          ; $c9 LOCAL
>ce3a	ae3a	07 1a 4d 45 4d 43 4f 50			.text	7,$1a,"MEMCOPY"        ; $ca MEMCOPY
>ce42	ae42	59
>ce43	ae43	03 db 4f 46 46				.text	3,$db,"OFF"            ; $cb OFF
>ce48	ae48	02 9d 4f 4e				.text	2,$9d,"ON"             ; $cc ON
>ce4c	ae4c	07 20 4f 55 54 4c 49 4e			.text	7,$20,"OUTLINE"        ; $cd OUTLINE
>ce54	ae54	45
>ce55	ae55	07 0f 50 41 4c 45 54 54			.text	7,$0f,"PALETTE"        ; $ce PALETTE
>ce5d	ae5d	45
>ce5e	ae5e	04 3f 50 4c 4f 54			.text	4,$3f,"PLOT"           ; $cf PLOT
>ce64	ae64	04 2f 50 4f 4b 45			.text	4,$2f,"POKE"           ; $d0 POKE
>ce6a	ae6a	05 73 50 4f 4b 45 44			.text	5,$73,"POKED"          ; $d1 POKED
>ce71	ae71	05 7b 50 4f 4b 45 4c			.text	5,$7b,"POKEL"          ; $d2 POKEL
>ce78	ae78	05 86 50 4f 4b 45 57			.text	5,$86,"POKEW"          ; $d3 POKEW
>ce7f	ae7f	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $d4 READ
>ce85	ae85	04 2e 52 45 43 54			.text	4,$2e,"RECT"           ; $d5 RECT
>ce8b	ae8b	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $d6 REM
>ce90	ae90	05 7b 53 4f 4c 49 44			.text	5,$7b,"SOLID"          ; $d7 SOLID
>ce97	ae97	05 89 53 4f 55 4e 44			.text	5,$89,"SOUND"          ; $d8 SOUND
>ce9e	ae9e	06 d7 53 50 52 49 54 45			.text	6,$d7,"SPRITE"         ; $d9 SPRITE
>cea6	aea6	04 45 54 45 58 54			.text	4,$45,"TEXT"           ; $da TEXT
>ceac	aeac	02 a3 54 4f				.text	2,$a3,"TO"             ; $db TO
>ceb0	aeb0	ff					.text	$FF
.ceb1	aeb1					KeywordSet1:
>ceb1	aeb1	00 65					.text	0,$65,""               ; $80 !0:EOF
>ceb3	aeb3	00 58					.text	0,$58,""               ; $81 !1:SH1
>ceb5	aeb5	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>ceb7	aeb7	08 4c 41 53 53 45 4d 42			.text	8,$4c,"ASSEMBLE"       ; $83 ASSEMBLE
>cebf	aebf	4c 45
>cec1	aec1	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $84 ASSERT
>cec9	aec9	06 bd 42 49 54 4d 41 50			.text	6,$bd,"BITMAP"         ; $85 BITMAP
>ced1	aed1	05 62 42 4c 4f 41 44			.text	5,$62,"BLOAD"          ; $86 BLOAD
>ced8	aed8	05 71 42 53 41 56 45			.text	5,$71,"BSAVE"          ; $87 BSAVE
>cedf	aedf	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $88 CLS
>cee4	aee4	06 d0 43 50 52 49 4e 54			.text	6,$d0,"CPRINT"         ; $89 CPRINT
>ceec	aeec	03 df 44 49 52				.text	3,$df,"DIR"            ; $8a DIR
>cef1	aef1	03 e6 44 4f 53				.text	3,$e6,"DOS"            ; $8b DOS
>cef6	aef6	05 7a 44 52 49 56 45			.text	5,$7a,"DRIVE"          ; $8c DRIVE
>cefd	aefd	03 d7 45 4e 44				.text	3,$d7,"END"            ; $8d END
>cf02	af02	07 11 45 58 50 4c 4f 44			.text	7,$11,"EXPLODE"        ; $8e EXPLODE
>cf0a	af0a	45
>cf0b	af0b	02 96 47 4f				.text	2,$96,"GO"             ; $8f GO
>cf0f	af0f	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $90 GOSUB
>cf16	af16	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $91 GOTO
>cf1c	af1c	05 70 48 49 4d 45 4d			.text	5,$70,"HIMEM"          ; $92 HIMEM
>cf23	af23	05 90 49 4e 50 55 54			.text	5,$90,"INPUT"          ; $93 INPUT
>cf2a	af2a	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $94 LIST
>cf30	af30	04 20 4c 4f 41 44			.text	4,$20,"LOAD"           ; $95 LOAD
>cf36	af36	06 b7 4d 44 45 4c 54 41			.text	6,$b7,"MDELTA"         ; $96 MDELTA
>cf3e	af3e	05 89 4d 4f 55 53 45			.text	5,$89,"MOUSE"          ; $97 MOUSE
>cf45	af45	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $98 NEW
>cf4a	af4a	04 2e 50 49 4e 47			.text	4,$2e,"PING"           ; $99 PING
>cf50	af50	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $9a PRINT
>cf57	af57	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $9b RESTORE
>cf5f	af5f	45
>cf60	af60	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $9c RETURN
>cf68	af68	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $9d RUN
>cf6d	af6d	04 2f 53 41 56 45			.text	4,$2f,"SAVE"           ; $9e SAVE
>cf73	af73	07 0a 53 45 54 44 41 54			.text	7,$0a,"SETDATE"        ; $9f SETDATE
>cf7b	af7b	45
>cf7c	af7c	07 1b 53 45 54 54 49 4d			.text	7,$1b,"SETTIME"        ; $a0 SETTIME
>cf84	af84	45
>cf85	af85	05 8d 53 48 4f 4f 54			.text	5,$8d,"SHOOT"          ; $a1 SHOOT
>cf8c	af8c	07 2a 53 50 52 49 54 45			.text	7,$2a,"SPRITES"        ; $a2 SPRITES
>cf94	af94	53
>cf95	af95	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $a3 STOP
>cf9b	af9b	03 ff 54 52 59				.text	3,$ff,"TRY"            ; $a4 TRY
>cfa0	afa0	06 d5 56 45 52 49 46 59			.text	6,$d5,"VERIFY"         ; $a5 VERIFY
>cfa8	afa8	03 ee 58 47 4f				.text	3,$ee,"XGO"            ; $a6 XGO
>cfad	afad	05 78 58 4c 4f 41 44			.text	5,$78,"XLOAD"          ; $a7 XLOAD
>cfb4	afb4	03 eb 5a 41 50				.text	3,$eb,"ZAP"            ; $a8 ZAP
>cfb9	afb9	ff					.text	$FF
.cfba	afba					KeywordSet2:
>cfba	afba	00 65					.text	0,$65,""               ; $80 !0:EOF
>cfbc	afbc	00 58					.text	0,$58,""               ; $81 !1:SH1
>cfbe	afbe	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>cfc0	afc0	03 c8 41 44 43				.text	3,$c8,"ADC"            ; $83 ADC
>cfc5	afc5	03 d3 41 4e 44				.text	3,$d3,"AND"            ; $84 AND
>cfca	afca	03 e0 41 53 4c				.text	3,$e0,"ASL"            ; $85 ASL
>cfcf	afcf	03 c8 42 43 43				.text	3,$c8,"BCC"            ; $86 BCC
>cfd4	afd4	03 d8 42 43 53				.text	3,$d8,"BCS"            ; $87 BCS
>cfd9	afd9	03 d8 42 45 51				.text	3,$d8,"BEQ"            ; $88 BEQ
>cfde	afde	03 df 42 49 54				.text	3,$df,"BIT"            ; $89 BIT
>cfe3	afe3	03 d8 42 4d 49				.text	3,$d8,"BMI"            ; $8a BMI
>cfe8	afe8	03 d5 42 4e 45				.text	3,$d5,"BNE"            ; $8b BNE
>cfed	afed	03 de 42 50 4c				.text	3,$de,"BPL"            ; $8c BPL
>cff2	aff2	03 d5 42 52 41				.text	3,$d5,"BRA"            ; $8d BRA
>cff7	aff7	03 df 42 52 4b				.text	3,$df,"BRK"            ; $8e BRK
>cffc	affc	03 db 42 56 43				.text	3,$db,"BVC"            ; $8f BVC
>d001	b001	03 eb 42 56 53				.text	3,$eb,"BVS"            ; $90 BVS
>d006	b006	03 d2 43 4c 43				.text	3,$d2,"CLC"            ; $91 CLC
>d00b	b00b	03 d3 43 4c 44				.text	3,$d3,"CLD"            ; $92 CLD
>d010	b010	03 d8 43 4c 49				.text	3,$d8,"CLI"            ; $93 CLI
>d015	b015	03 e5 43 4c 56				.text	3,$e5,"CLV"            ; $94 CLV
>d01a	b01a	03 e0 43 4d 50				.text	3,$e0,"CMP"            ; $95 CMP
>d01f	b01f	03 eb 43 50 58				.text	3,$eb,"CPX"            ; $96 CPX
>d024	b024	03 ec 43 50 59				.text	3,$ec,"CPY"            ; $97 CPY
>d029	b029	03 cc 44 45 43				.text	3,$cc,"DEC"            ; $98 DEC
>d02e	b02e	03 e1 44 45 58				.text	3,$e1,"DEX"            ; $99 DEX
>d033	b033	03 e2 44 45 59				.text	3,$e2,"DEY"            ; $9a DEY
>d038	b038	03 e6 45 4f 52				.text	3,$e6,"EOR"            ; $9b EOR
>d03d	b03d	03 da 49 4e 43				.text	3,$da,"INC"            ; $9c INC
>d042	b042	03 ef 49 4e 58				.text	3,$ef,"INX"            ; $9d INX
>d047	b047	03 f0 49 4e 59				.text	3,$f0,"INY"            ; $9e INY
>d04c	b04c	03 e7 4a 4d 50				.text	3,$e7,"JMP"            ; $9f JMP
>d051	b051	03 ef 4a 53 52				.text	3,$ef,"JSR"            ; $a0 JSR
>d056	b056	03 d1 4c 44 41				.text	3,$d1,"LDA"            ; $a1 LDA
>d05b	b05b	03 e8 4c 44 58				.text	3,$e8,"LDX"            ; $a2 LDX
>d060	b060	03 e9 4c 44 59				.text	3,$e9,"LDY"            ; $a3 LDY
>d065	b065	03 f1 4c 53 52				.text	3,$f1,"LSR"            ; $a4 LSR
>d06a	b06a	03 ed 4e 4f 50				.text	3,$ed,"NOP"            ; $a5 NOP
>d06f	b06f	03 e2 4f 52 41				.text	3,$e2,"ORA"            ; $a6 ORA
>d074	b074	03 d9 50 48 41				.text	3,$d9,"PHA"            ; $a7 PHA
>d079	b079	03 e8 50 48 50				.text	3,$e8,"PHP"            ; $a8 PHP
>d07e	b07e	03 f0 50 48 58				.text	3,$f0,"PHX"            ; $a9 PHX
>d083	b083	03 f1 50 48 59				.text	3,$f1,"PHY"            ; $aa PHY
>d088	b088	03 dd 50 4c 41				.text	3,$dd,"PLA"            ; $ab PLA
>d08d	b08d	03 ec 50 4c 50				.text	3,$ec,"PLP"            ; $ac PLP
>d092	b092	03 f4 50 4c 58				.text	3,$f4,"PLX"            ; $ad PLX
>d097	b097	03 f5 50 4c 59				.text	3,$f5,"PLY"            ; $ae PLY
>d09c	b09c	03 ed 52 4f 4c				.text	3,$ed,"ROL"            ; $af ROL
>d0a1	b0a1	03 f3 52 4f 52				.text	3,$f3,"ROR"            ; $b0 ROR
>d0a6	b0a6	03 ef 52 54 49				.text	3,$ef,"RTI"            ; $b1 RTI
>d0ab	b0ab	03 f9 52 54 53				.text	3,$f9,"RTS"            ; $b2 RTS
>d0b0	b0b0	03 d8 53 42 43				.text	3,$d8,"SBC"            ; $b3 SBC
>d0b5	b0b5	03 db 53 45 43				.text	3,$db,"SEC"            ; $b4 SEC
>d0ba	b0ba	03 dc 53 45 44				.text	3,$dc,"SED"            ; $b5 SED
>d0bf	b0bf	03 e1 53 45 49				.text	3,$e1,"SEI"            ; $b6 SEI
>d0c4	b0c4	03 e8 53 54 41				.text	3,$e8,"STA"            ; $b7 STA
>d0c9	b0c9	03 f7 53 54 50				.text	3,$f7,"STP"            ; $b8 STP
>d0ce	b0ce	03 ff 53 54 58				.text	3,$ff,"STX"            ; $b9 STX
>d0d3	b0d3	03 00 53 54 59				.text	3,$00,"STY"            ; $ba STY
>d0d8	b0d8	03 01 53 54 5a				.text	3,$01,"STZ"            ; $bb STZ
>d0dd	b0dd	03 ed 54 41 58				.text	3,$ed,"TAX"            ; $bc TAX
>d0e2	b0e2	03 ee 54 41 59				.text	3,$ee,"TAY"            ; $bd TAY
>d0e7	b0e7	03 e8 54 52 42				.text	3,$e8,"TRB"            ; $be TRB
>d0ec	b0ec	03 e9 54 53 42				.text	3,$e9,"TSB"            ; $bf TSB
>d0f1	b0f1	03 ff 54 53 58				.text	3,$ff,"TSX"            ; $c0 TSX
>d0f6	b0f6	03 ed 54 58 41				.text	3,$ed,"TXA"            ; $c1 TXA
>d0fb	b0fb	03 ff 54 58 53				.text	3,$ff,"TXS"            ; $c2 TXS
>d100	b100	03 ee 54 59 41				.text	3,$ee,"TYA"            ; $c3 TYA
>d105	b105	ff					.text	$FF
.d106	b106					Export_TKListConvertLine:
.d106	b106	48		pha				pha 								; save indent on the stack
.d107	b107	9c 19 04	stz $0419			stz 	tbOffset
.d10a	b10a	9c 29 04	stz $0429			stz 	tokenBuffer
.d10d	b10d	9c 25 04	stz $0425			stz 	currentListColour
.d110	b110	a9 8d		lda #$8d			lda 	#CLILineNumber+$80
.d112	b112	20 8f b2	jsr $b28f			jsr 	LCLWriteColour
.d115	b115	a0 02		ldy #$02			ldy 	#2 							; convert line number to string
.d117	b117	b1 30		lda ($30),y			lda 	(codePtr),y
.d119	b119	aa		tax				tax
.d11a	b11a	88		dey				dey
.d11b	b11b	b1 30		lda ($30),y			lda 	(codePtr),y
.d11d	b11d	20 00 b3	jsr $b300			jsr 	LCLWriteNumberXA
.d120	b120	68		pla				pla 								; adjustment to indent
.d121	b121	48		pha				pha 								; save on stack
.d122	b122	10 0c		bpl $b130			bpl 	_LCNoAdjust 				; don't adjust indent if +ve, do after.
.d124	b124	18		clc				clc 								; add to list indent and make 0 if goes -ve.
.d125	b125	6d 22 04	adc $0422			adc 	listIndent
.d128	b128	8d 22 04	sta $0422			sta 	listIndent
.d12b	b12b	10 03		bpl $b130			bpl 	_LCNoAdjust
.d12d	b12d	9c 22 04	stz $0422			stz 	listIndent
.d130	b130					_LCNoAdjust:
.d130	b130	18		clc				clc		 							; work out actual indent.
.d131	b131	ad 22 04	lda $0422			lda 	listIndent
.d134	b134	0a		asl a				asl 	a
.d135	b135	69 07		adc #$07			adc 	#7
.d137	b137	85 36		sta $36				sta 	zTemp0
.d139	b139					_LCPadOut:
.d139	b139	a9 20		lda #$20			lda 	#' '						; pad out to 6+indent characters
.d13b	b13b	20 98 b2	jsr $b298			jsr 	LCLWrite
.d13e	b13e	ad 19 04	lda $0419			lda 	tbOffset
.d141	b141	c5 36		cmp $36				cmp 	zTemp0
.d143	b143	d0 f4		bne $b139			bne 	_LCPadOut
.d145	b145	a0 03		ldy #$03			ldy 	#3 							; start position.
.d147	b147					_LCMainLoop:
.d147	b147	a9 8c		lda #$8c			lda 	#CLIPunctuation+$80
.d149	b149	20 8f b2	jsr $b28f			jsr 	LCLWriteColour
.d14c	b14c	b1 30		lda ($30),y			lda 	(codePtr),y
.d14e	b14e	c9 80		cmp #$80			cmp 	#KWC_EOL 					; end of line ?
.d150	b150	f0 17		beq $b169			beq 	_LCExit
.d152	b152	c9 10		cmp #$10			cmp 	#16 						; 0-5 are the double punctuations
.d154	b154	90 1e		bcc $b174			bcc 	_LCDoubles
.d156	b156	c9 20		cmp #$20			cmp 	#32 						; 16-31 are shifted punctuation from 64-91
.d158	b158	90 2a		bcc $b184			bcc 	_LCShiftPunc
.d15a	b15a	c9 40		cmp #$40			cmp 	#64 						; 32-64 are as stored, punc and digits
.d15c	b15c	90 35		bcc $b193			bcc 	_LCPunctuation
.d15e	b15e	c9 80		cmp #$80			cmp 	#128 						; 64-127 are variable identifiers.
.d160	b160	90 51		bcc $b1b3			bcc 	_LCIdentifiers
.d162	b162	c9 fe		cmp #$fe			cmp 	#254 						; 128-253 are tokenised words
.d164	b164	90 73		bcc $b1d9			bcc 	_LCTokens
.d166	b166	4c 39 b2	jmp $b239			jmp 	_LCData 					; 254-5 are data objects
.d169	b169					_LCExit:
.d169	b169	68		pla				pla 								; get old indent adjust
.d16a	b16a	30 07		bmi $b173			bmi 	_LCExit2
.d16c	b16c	18		clc				clc 								; add to indent if +ve
.d16d	b16d	6d 22 04	adc $0422			adc 	listIndent
.d170	b170	8d 22 04	sta $0422			sta 	listIndent
.d173	b173					_LCExit2:
.d173	b173	60		rts				rts
.d174	b174					_LCDoubles:
.d174	b174	48		pha				pha
.d175	b175	4a		lsr a				lsr 	a 							; put bit 2 into bit 1
.d176	b176	29 02		and #$02			and 	#2
.d178	b178	09 3c		ora #$3c			ora 	#60 						; make < >
.d17a	b17a	20 98 b2	jsr $b298			jsr 	LCLWrite
.d17d	b17d	68		pla				pla 								; restore, do lower bit
.d17e	b17e	29 03		and #$03			and 	#3
.d180	b180	09 3c		ora #$3c			ora 	#60
.d182	b182	80 0f		bra $b193			bra		_LCPunctuation 				; print, increment, loop
.d184	b184					_LCShiftPunc:
.d184	b184	aa		tax				tax 								; save in X
.d185	b185	29 07		and #$07			and 	#7 							; lower 3 bits
.d187	b187	f0 02		beq $b18b			beq 	_LCNoAdd
.d189	b189	09 18		ora #$18			ora 	#24 						; adds $18 to it.
.d18b	b18b					_LCNoAdd:
.d18b	b18b	e0 18		cpx #$18			cpx 	#24 						; if >= 24 add $20
.d18d	b18d	90 02		bcc $b191			bcc 	_LCNoAdd2
.d18f	b18f	09 20		ora #$20			ora 	#32 						; adds $20
.d191	b191					_LCNoAdd2:
.d191	b191	09 40		ora #$40			ora 	#$40 						; shift into 64-127 range and fall through.
.d193	b193					_LCPunctuation:
.d193	b193	c9 3a		cmp #$3a			cmp 	#':' 						; check if :
.d195	b195	d0 03		bne $b19a			bne 	_LCPContinue
.d197	b197	20 ae b2	jsr $b2ae			jsr 	LCLDeleteLastSpace 			; if so delete any preceding spaces
.d19a	b19a					_LCPContinue:
.d19a	b19a	c9 2e		cmp #$2e			cmp 	#'.'
.d19c	b19c	f0 08		beq $b1a6			beq 	_LCPIsConstant
.d19e	b19e	c9 30		cmp #$30			cmp 	#'0'
.d1a0	b1a0	90 0b		bcc $b1ad			bcc 	_LCPNotConstant
.d1a2	b1a2	c9 3a		cmp #$3a			cmp 	#'9'+1
.d1a4	b1a4	b0 07		bcs $b1ad			bcs 	_LCPNotConstant
.d1a6	b1a6					_LCPIsConstant:
.d1a6	b1a6	48		pha				pha
.d1a7	b1a7	a9 87		lda #$87			lda 	#CLIConstant+$80
.d1a9	b1a9	20 8f b2	jsr $b28f			jsr 	LCLWriteColour
.d1ac	b1ac	68		pla				pla
.d1ad	b1ad					_LCPNotConstant:
.d1ad	b1ad	c8		iny				iny 								; consume character
.d1ae	b1ae	20 98 b2	jsr $b298			jsr 	LCLWrite 					; write it out.
.d1b1	b1b1	80 94		bra $b147			bra 	_LCMainLoop 				; go round again.
.d1b3	b1b3					_LCIdentifiers:
.d1b3	b1b3	18		clc				clc 								; convert to physical address
.d1b4	b1b4	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.d1b6	b1b6	85 37		sta $37				sta 	zTemp0+1
.d1b8	b1b8	c8		iny				iny
.d1b9	b1b9	b1 30		lda ($30),y			lda 	(codePtr),y
.d1bb	b1bb	85 36		sta $36				sta 	zTemp0
.d1bd	b1bd	c8		iny				iny
.d1be	b1be	5a		phy				phy 								; save position
.d1bf	b1bf	a9 8e		lda #$8e			lda 	#CLIIdentifier+$80
.d1c1	b1c1	20 8f b2	jsr $b28f			jsr 	LCLWriteColour
.d1c4	b1c4	a0 07		ldy #$07			ldy 	#7 							; output the identifier at +8
.d1c6	b1c6					_LCOutIdentifier:
.d1c6	b1c6	c8		iny				iny
.d1c7	b1c7	b1 36		lda ($36),y			lda 	(zTemp0),y					; bit 7 set = end.
.d1c9	b1c9	29 7f		and #$7f			and 	#$7F
.d1cb	b1cb	20 ea b2	jsr $b2ea			jsr 	LCLLowerCase
.d1ce	b1ce	20 98 b2	jsr $b298			jsr 	LCLWrite
.d1d1	b1d1	b1 36		lda ($36),y			lda 	(zTemp0),y				 	; ends when bit 7 set.
.d1d3	b1d3	10 f1		bpl $b1c6			bpl 	_LCOutIdentifier
.d1d5	b1d5	7a		ply				ply 								; restore position
.d1d6	b1d6	4c 47 b1	jmp $b147			jmp 	_LCMainLoop
.d1d9	b1d9					_LCTokens:
.d1d9	b1d9	aa		tax				tax 								; token in X
.d1da	b1da	a9 ba		lda #$ba			lda 	#((KeywordSet2) & $FF)
.d1dc	b1dc	85 36		sta $36				sta 	0+zTemp0
.d1de	b1de	a9 af		lda #$af			lda 	#((KeywordSet2) >> 8)
.d1e0	b1e0	85 37		sta $37				sta 	1+zTemp0
.d1e2	b1e2	e0 82		cpx #$82			cpx 	#$82
.d1e4	b1e4	f0 16		beq $b1fc			beq 	_LCUseShift
.d1e6	b1e6	a9 b1		lda #$b1			lda 	#((KeywordSet1) & $FF)
.d1e8	b1e8	85 36		sta $36				sta 	0+zTemp0
.d1ea	b1ea	a9 ae		lda #$ae			lda 	#((KeywordSet1) >> 8)
.d1ec	b1ec	85 37		sta $37				sta 	1+zTemp0
.d1ee	b1ee	e0 81		cpx #$81			cpx 	#$81
.d1f0	b1f0	f0 0a		beq $b1fc			beq 	_LCUseShift
.d1f2	b1f2	a9 40		lda #$40			lda 	#((KeywordSet0) & $FF)
.d1f4	b1f4	85 36		sta $36				sta 	0+zTemp0
.d1f6	b1f6	a9 ac		lda #$ac			lda 	#((KeywordSet0) >> 8)
.d1f8	b1f8	85 37		sta $37				sta 	1+zTemp0
.d1fa	b1fa	80 01		bra $b1fd			bra 	_LCNoShift
.d1fc	b1fc					_LCUseShift:
.d1fc	b1fc	c8		iny				iny
.d1fd	b1fd					_LCNoShift:
.d1fd	b1fd	20 c2 b2	jsr $b2c2			jsr 	LCLCheckSpaceRequired 		; do we need a space ?
.d200	b200	b1 30		lda ($30),y			lda 	(codePtr),y
.d202	b202	aa		tax				tax 								; into X
.d203	b203					_LCFindText:
.d203	b203	ca		dex				dex
.d204	b204	10 0e		bpl $b214			bpl 	_LCFoundText 				; found text.
.d206	b206	b2 36		lda ($36)			lda 	(zTemp0) 					; length of text
.d208	b208	1a		inc a				inc 	a 							; one extra for size
.d209	b209	38		sec				sec 								; one extra for checksum
.d20a	b20a	65 36		adc $36				adc 	zTemp0 						; go to next token
.d20c	b20c	85 36		sta $36				sta 	zTemp0
.d20e	b20e	90 f3		bcc $b203			bcc 	_LCFindText
.d210	b210	e6 37		inc $37				inc 	zTemp0+1
.d212	b212	80 ef		bra $b203			bra 	_LCFindText
.d214	b214					_LCFoundText:
.d214	b214	5a		phy				phy 								; save List position
.d215	b215	b2 36		lda ($36)			lda 	(zTemp0)					; count to print
.d217	b217	aa		tax				tax
.d218	b218	a9 86		lda #$86			lda 	#CLIToken+$80
.d21a	b21a	20 8f b2	jsr $b28f			jsr 	LCLWriteColour
.d21d	b21d	a0 02		ldy #$02			ldy 	#2
.d21f	b21f					_LCCopyToken:
.d21f	b21f	b1 36		lda ($36),y			lda 	(zTemp0),y
.d221	b221	20 ea b2	jsr $b2ea			jsr 	LCLLowerCase
.d224	b224	20 98 b2	jsr $b298			jsr 	LCLWrite
.d227	b227	c8		iny				iny
.d228	b228	ca		dex				dex
.d229	b229	d0 f4		bne $b21f			bne 	_LCCopyToken
.d22b	b22b	c9 28		cmp #$28			cmp 	#"(" 						; if last char not ( print a space
.d22d	b22d	f0 05		beq $b234			beq 	_LCNoSpace
.d22f	b22f	a9 20		lda #$20			lda 	#' '
.d231	b231	20 98 b2	jsr $b298			jsr 	LCLWrite
.d234	b234					_LCNoSpace:
.d234	b234	7a		ply				ply 								; restore position.
.d235	b235	c8		iny				iny 								; consume token
.d236	b236	4c 47 b1	jmp $b147			jmp 	_LCMainLoop 				; and go around again.
.d239	b239					_LCData:
.d239	b239	48		pha				pha 								; save type $FE/$FF
.d23a	b23a	a2 24		ldx #$24			ldx 	#'$' 						; figure out $ or "
.d23c	b23c	c9 fe		cmp #$fe			cmp 	#$FE
.d23e	b23e	f0 22		beq $b262			beq 	_LCHaveOpener
.d240	b240	a2 22		ldx #$22			ldx 	#'"'
.d242	b242	a9 8f		lda #$8f			lda 	#CLIData+$80
.d244	b244	20 8f b2	jsr $b28f			jsr 	LCLWriteColour
.d247	b247	c0 04		cpy #$04			cpy 	#4 							; must be 2nd thing on line
.d249	b249	d0 17		bne $b262			bne 	_LCHaveOpener
.d24b	b24b	88		dey				dey 								; what precedes it ?
.d24c	b24c	b1 30		lda ($30),y			lda 	(codePtr),y
.d24e	b24e	c8		iny				iny
.d24f	b24f	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; if quote
.d251	b251	d0 0f		bne $b262			bne 	_LCHaveOpener
.d253	b253	a9 09		lda #$09			lda 	#9 							; tab
.d255	b255	20 98 b2	jsr $b298			jsr 	LCLWrite
.d258	b258	a9 9e		lda #$9e			lda 	#$90+CLIBComment
.d25a	b25a	20 98 b2	jsr $b298			jsr 	LCLWrite
.d25d	b25d	a9 85		lda #$85			lda 	#CLIFComment+$80
.d25f	b25f	20 8f b2	jsr $b28f			jsr 	LCLWriteColour
.d262	b262					_LCHaveOpener:
.d262	b262	8a		txa				txa 								; output prefix (# or ")
.d263	b263	20 98 b2	jsr $b298			jsr 	LCLWrite
.d266	b266	c8		iny				iny 								; get count
.d267	b267	b1 30		lda ($30),y			lda 	(codePtr),y
.d269	b269	aa		tax				tax
.d26a	b26a	c8		iny				iny 								; point at first character
.d26b	b26b					_LCOutData:
.d26b	b26b	b1 30		lda ($30),y			lda 	(codePtr),y
.d26d	b26d	c9 00		cmp #$00			cmp 	#0
.d26f	b26f	f0 03		beq $b274			beq 	_LCNoPrint
.d271	b271	20 98 b2	jsr $b298			jsr 	LCLWrite
.d274	b274					_LCNoPrint:
.d274	b274	c8		iny				iny
.d275	b275	ca		dex				dex
.d276	b276	d0 f3		bne $b26b			bne 	_LCOutData
.d278	b278	68		pla				pla 								; closing " required ?
.d279	b279	c9 ff		cmp #$ff			cmp 	#$FF 						; not required for hex constant.
.d27b	b27b	d0 0f		bne $b28c			bne 	_LCNoQuote
.d27d	b27d	a9 22		lda #$22			lda 	#'"'
.d27f	b27f	20 98 b2	jsr $b298			jsr 	LCLWrite
.d282	b282	ad c5 07	lda $07c5			lda 	EXTTextColour
.d285	b285	29 0f		and #$0f			and 	#$0F
.d287	b287	09 90		ora #$90			ora 	#$90
.d289	b289	20 98 b2	jsr $b298			jsr 	LCLWrite
.d28c	b28c					_LCNoQuote:
.d28c	b28c	4c 47 b1	jmp $b147			jmp 	_LCMainLoop
.d28f	b28f					LCLWriteColour:
.d28f	b28f	cd 25 04	cmp $0425			cmp 	currentListColour 			; has the colour changed
.d292	b292	8d 25 04	sta $0425			sta 	currentListColour 			; (update it anyway)
.d295	b295	d0 01		bne $b298			bne 	LCLWrite 					; if different, output it
.d297	b297	60		rts				rts
.d298	b298					LCLWrite:
.d298	b298	da		phx				phx
.d299	b299	ae 19 04	ldx $0419			ldx 	tbOffset 					; write out make ASCIIZ
.d29c	b29c	9d 29 04	sta $0429,x			sta 	tokenBuffer,x
.d29f	b29f	9e 2a 04	stz $042a,x			stz 	tokenBuffer+1,x
.d2a2	b2a2	ee 19 04	inc $0419			inc 	tbOffset 					; bump the position
.d2a5	b2a5	09 00		ora #$00			ora 	#0 							; don't update last character if colour data
.d2a7	b2a7	30 03		bmi $b2ac			bmi 	_LCLNoColour
.d2a9	b2a9	8d 23 04	sta $0423			sta 	lcLastCharacter
.d2ac	b2ac					_LCLNoColour:
.d2ac	b2ac	fa		plx				plx
.d2ad	b2ad	60		rts				rts
.d2ae	b2ae					LCLDeleteLastSpace:
.d2ae	b2ae	48		pha				pha
.d2af	b2af	da		phx				phx
.d2b0	b2b0	ae 19 04	ldx $0419			ldx 	tbOffset
.d2b3	b2b3	f0 0a		beq $b2bf			beq 	_LCDLSExit
.d2b5	b2b5	bd 28 04	lda $0428,x			lda 	tokenBuffer-1,x
.d2b8	b2b8	c9 20		cmp #$20			cmp 	#' '
.d2ba	b2ba	d0 03		bne $b2bf			bne 	_LCDLSExit
.d2bc	b2bc	ce 19 04	dec $0419			dec 	tbOffset
.d2bf	b2bf					_LCDLSExit:
.d2bf	b2bf	fa		plx				plx
.d2c0	b2c0	68		pla				pla
.d2c1	b2c1	60		rts				rts
.d2c2	b2c2					LCLCheckSpaceRequired:
.d2c2	b2c2	ad 23 04	lda $0423			lda 	lcLastCharacter 			; check last character
.d2c5	b2c5	c9 24		cmp #$24			cmp 	#'$' 						; $ # and ) require that token space.
.d2c7	b2c7	f0 1b		beq $b2e4			beq 	_LCCSRSpace
.d2c9	b2c9	c9 29		cmp #$29			cmp 	#')'
.d2cb	b2cb	f0 17		beq $b2e4			beq 	_LCCSRSpace
.d2cd	b2cd	c9 23		cmp #$23			cmp 	#'#'
.d2cf	b2cf	f0 13		beq $b2e4			beq 	_LCCSRSpace
.d2d1	b2d1	20 ea b2	jsr $b2ea			jsr 	LCLLowerCase 				; saves a little effort
.d2d4	b2d4	c9 30		cmp #$30			cmp 	#"0" 						; check if it was 0-9 A-Z a-z if so need space.
.d2d6	b2d6	90 11		bcc $b2e9			bcc 	_LCCSRExit
.d2d8	b2d8	c9 3a		cmp #$3a			cmp 	#"9"+1
.d2da	b2da	90 08		bcc $b2e4			bcc 	_LCCSRSpace
.d2dc	b2dc	c9 61		cmp #$61			cmp 	#"a"
.d2de	b2de	90 09		bcc $b2e9			bcc 	_LCCSRExit
.d2e0	b2e0	c9 7b		cmp #$7b			cmp 	#"z"+1
.d2e2	b2e2	b0 05		bcs $b2e9			bcs 	_LCCSRExit
.d2e4	b2e4					_LCCSRSpace:
.d2e4	b2e4	a9 20		lda #$20			lda 	#' '
.d2e6	b2e6	20 98 b2	jsr $b298			jsr 	LCLWrite
.d2e9	b2e9					_LCCSRExit:
.d2e9	b2e9	60		rts				rts
.d2ea	b2ea					LCLLowerCase:
.d2ea	b2ea	c9 41		cmp #$41			cmp 	#"A"
.d2ec	b2ec	90 06		bcc $b2f4			bcc 	_LCLLCOut
.d2ee	b2ee	c9 5b		cmp #$5b			cmp 	#"Z"+1
.d2f0	b2f0	b0 02		bcs $b2f4			bcs 	_LCLLCOut
.d2f2	b2f2	69 20		adc #$20			adc 	#$20
.d2f4	b2f4					_LCLLCOut:
.d2f4	b2f4	60		rts				rts
.d2f5	b2f5					LCLUpperCase:
.d2f5	b2f5	c9 61		cmp #$61			cmp 	#"a"
.d2f7	b2f7	90 06		bcc $b2ff			bcc 	_LCLUCOut
.d2f9	b2f9	c9 7b		cmp #$7b			cmp 	#"z"+1
.d2fb	b2fb	b0 02		bcs $b2ff			bcs 	_LCLUCOut
.d2fd	b2fd	e9 1f		sbc #$1f			sbc 	#$1F
.d2ff	b2ff					_LCLUCOut:
.d2ff	b2ff	60		rts				rts
.d300	b300					LCLWriteNumberXA:
.d300	b300	64 37		stz $37				stz 	zTemp0+1 					; index into digit table.
.d302	b302					_LCLWNLoop1:
.d302	b302	64 36		stz $36				stz 	zTemp0 						; subtraction count.
.d304	b304					_LCLWNLoop2:
.d304	b304	48		pha				pha 								; save initial LSB
.d305	b305	38		sec				sec
.d306	b306	a4 37		ldy $37				ldy 	zTemp0+1 					; position in table.
.d308	b308	f9 39 b3	sbc $b339,y			sbc 	_LCLWNTable,y
.d30b	b30b	48		pha				pha
.d30c	b30c	8a		txa				txa
.d30d	b30d	f9 3a b3	sbc $b33a,y			sbc 	_LCLWNTable+1,y
.d310	b310	90 07		bcc $b319			bcc 	_LCLWNUnderflow
.d312	b312	e6 36		inc $36				inc 	zTemp0  					; subtracted one without borrow.
.d314	b314	aa		tax				tax 								; update X
.d315	b315	68		pla				pla 								; restore A
.d316	b316	7a		ply				ply 								; throw original
.d317	b317	80 eb		bra $b304			bra 	_LCLWNLoop2 				; try again.
.d319	b319					_LCLWNUnderflow:
.d319	b319	a4 36		ldy $36				ldy 	zTemp0 						; count of subtractions.
.d31b	b31b	d0 06		bne $b323			bne 	_LCLWNOut
.d31d	b31d	ad 19 04	lda $0419			lda 	tbOffset 					; suppress leading zeroes
.d320	b320	3a		dec a				dec 	a
.d321	b321	f0 04		beq $b327			beq 	_LCLWNNext
.d323	b323					_LCLWNOut:
.d323	b323	98		tya				tya
.d324	b324	20 33 b3	jsr $b333			jsr 	_LCLWNOutDigit
.d327	b327					_LCLWNNext:
.d327	b327	7a		ply				ply 							 	; restore original value.
.d328	b328	68		pla				pla
.d329	b329	a4 37		ldy $37				ldy 	zTemp0+1  					; bump the index
.d32b	b32b	c8		iny				iny
.d32c	b32c	c8		iny				iny
.d32d	b32d	84 37		sty $37				sty 	zTemp0+1
.d32f	b32f	c0 08		cpy #$08			cpy 	#8 							; done all 4
.d331	b331	d0 cf		bne $b302			bne 	_LCLWNLoop1
.d333	b333					_LCLWNOutDigit:
.d333	b333	09 30		ora #$30			ora 	#'0'
.d335	b335	20 98 b2	jsr $b298			jsr 	LCLWrite
.d338	b338	60		rts				rts
.d339	b339					_LCLWNTable:
>d339	b339	10 27						.word 	10000
>d33b	b33b	e8 03						.word 	1000
>d33d	b33d	64 00						.word 	100
>d33f	b33f	0a 00						.word 	10
.d341	b341					TOKSearchTable:
.d341	b341	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token being tested.
.d343	b343	85 36		sta $36				sta 	zTemp0
.d345	b345	a0 00		ldy #$00			ldy 	#0
.d347	b347	a9 80		lda #$80			lda 	#$80 						; token # so we know which one we are looking at
.d349	b349	85 38		sta $38				sta 	zTemp1
.d34b	b34b					_TSTLoop:
.d34b	b34b	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.d34d	b34d	30 49		bmi $b398			bmi 	_TSTFail 					; -ve = end of table, so fail.
.d34f	b34f	f0 2e		beq $b37f			beq 	_TSTNext 					; zero, check next as it's a dummy (e.g. EOL, SHIFT)
.d351	b351	c8		iny				iny 								; get the hash
.d352	b352	b1 36		lda ($36),y			lda 	(zTemp0),y
.d354	b354	88		dey				dey
.d355	b355	cd 03 04	cmp $0403			cmp 	identHash 					; check they match with the identifier hash, if not go to next
.d358	b358	d0 25		bne $b37f			bne 	_TSTNext
.d35a	b35a	ad 02 04	lda $0402			lda 	identTypeEnd 				; get length of identifier from end-start
.d35d	b35d	38		sec				sec
.d35e	b35e	ed 00 04	sbc $0400			sbc 	identStart
.d361	b361	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; compare against the length in the table, no match, then return.
.d363	b363	d0 1a		bne $b37f			bne 	_TSTNext
.d365	b365	5a		phy				phy 								; save Y , we might fail to match.
.d366	b366	c8		iny				iny 								; point to text
.d367	b367	c8		iny				iny
.d368	b368	ae 00 04	ldx $0400			ldx 	identStart 					; offset in line buffer in X
.d36b	b36b					_TSTCompareName:
.d36b	b36b	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; compare text.
.d36e	b36e	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.d370	b370	d0 0c		bne $b37e			bne 	_TSTNextPullY 				; fail, pullY and do next
.d372	b372	e8		inx				inx
.d373	b373	c8		iny				iny
.d374	b374	ec 02 04	cpx $0402			cpx 	identTypeEnd 				; complete match.
.d377	b377	d0 f2		bne $b36b			bne 	_TSTCompareName
.d379	b379	7a		ply				ply 								; throw Y
.d37a	b37a	a5 38		lda $38				lda 	zTemp1 						; get token #
.d37c	b37c	38		sec				sec 								; return with CS = passed.
.d37d	b37d	60		rts				rts
.d37e	b37e					_TSTNextPullY:
.d37e	b37e	7a		ply				ply 								; restore current, fall through.
.d37f	b37f					_TSTNext:
.d37f	b37f	e6 38		inc $38				inc 	zTemp1 						; token counter
.d381	b381	98		tya				tya
.d382	b382	18		clc				clc
.d383	b383	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.d385	b385	1a		inc a				inc 	a 							; +1
.d386	b386	1a		inc a				inc 	a 							; +2
.d387	b387	a8		tay				tay
.d388	b388	10 c1		bpl $b34b			bpl 	_TSTLoop 					; if Y < $80 loop back
.d38a	b38a	98		tya				tya 								; add Y to zTemp0 and reset Y
.d38b	b38b	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.d38d	b38d	18		clc				clc  								; but have tables > 255 bytes
.d38e	b38e	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.d390	b390	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.d392	b392	90 b7		bcc $b34b			bcc 	_TSTLoop
.d394	b394	e6 37		inc $37				inc 	zTemp0+1
.d396	b396	80 b3		bra $b34b			bra 	_TSTLoop
.d398	b398					_TSTFail:
.d398	b398	18		clc				clc
.d399	b399	60		rts				rts
.d39a	b39a					Export_TKTokeniseLine:
.d39a	b39a	20 67 b5	jsr $b567			jsr 	LCLFixLineBufferCase 		; fix line case
.d39d	b39d	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.d39f	b39f	8d 26 04	sta $0426			sta 	tokenOffset 				; (3 bytes for line number & offset)
.d3a2	b3a2	9c 27 04	stz $0427			stz 	tokenLineNumber
.d3a5	b3a5	9c 28 04	stz $0428			stz 	tokenLineNumber+1
.d3a8	b3a8	a2 ff		ldx #$ff			ldx 	#$FF
.d3aa	b3aa					_TKFindFirst:
.d3aa	b3aa	e8		inx				inx
.d3ab	b3ab	bd 26 05	lda $0526,x			lda 	lineBuffer,x
.d3ae	b3ae	f0 62		beq $b412			beq 	_TKExit
.d3b0	b3b0	c9 20		cmp #$20			cmp 	#' '
.d3b2	b3b2	90 f6		bcc $b3aa			bcc 	_TKFindFirst
.d3b4	b3b4	c9 30		cmp #$30			cmp 	#'0'
.d3b6	b3b6	90 07		bcc $b3bf			bcc 	_TKNoLineNumber
.d3b8	b3b8	c9 3a		cmp #$3a			cmp 	#'9'+1
.d3ba	b3ba	b0 03		bcs $b3bf			bcs 	_TKNoLineNumber
.d3bc	b3bc	20 91 b5	jsr $b591			jsr 	TOKExtractLineNumber
.d3bf	b3bf					_TKNoLineNumber:
.d3bf	b3bf					_TKTokeniseLoop:
.d3bf	b3bf	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.d3c2	b3c2	f0 4e		beq $b412			beq 	_TKExit
.d3c4	b3c4	e8		inx				inx
.d3c5	b3c5	c9 20		cmp #$20			cmp 	#' '
.d3c7	b3c7	f0 f6		beq $b3bf			beq 	_TKTokeniseLoop 			; keep looping if space found.
.d3c9	b3c9	ca		dex				dex 								; undo last get, A contains character, X is position.
.d3ca	b3ca	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.d3cc	b3cc	f0 68		beq $b436			beq 	_TKTokeniseIdentifier 		; (already case converted outside string constants)
.d3ce	b3ce	c9 41		cmp #$41			cmp 	#'A'
.d3d0	b3d0	90 04		bcc $b3d6			bcc 	_TKTokenisePunctuation
.d3d2	b3d2	c9 5b		cmp #$5b			cmp 	#'Z'+1
.d3d4	b3d4	90 60		bcc $b436			bcc 	_TKTokeniseIdentifier
.d3d6	b3d6					_TKTokenisePunctuation:
.d3d6	b3d6	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.d3d8	b3d8	f0 2e		beq $b408			beq 	_TKString
.d3da	b3da	c9 24		cmp #$24			cmp 	#'$'						; hexadecimal constant ($ only appears at end of identifiers)
.d3dc	b3dc	f0 2f		beq $b40d			beq 	_TKHexConstant
.d3de	b3de	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers - these are for <> <= >= >> <<
.d3e0	b3e0	f0 36		beq $b418			beq 	_TKCheckDouble
.d3e2	b3e2	c9 3e		cmp #$3e			cmp 	#'>'
.d3e4	b3e4	f0 32		beq $b418			beq 	_TKCheckDouble
.d3e6	b3e6					_TKStandardPunctuation:
.d3e6	b3e6	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; get the punctuation token back.
.d3e9	b3e9	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.d3eb	b3eb	90 0e		bcc $b3fb			bcc 	_TKNoShift
.d3ed	b3ed	48		pha				pha 								; save. we are about to convert this punctuation token from
.d3ee	b3ee	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.d3f0	b3f0	85 36		sta $36				sta 	zTemp0
.d3f2	b3f2	68		pla				pla
.d3f3	b3f3	29 20		and #$20			and 	#32 						; bit 5
.d3f5	b3f5	4a		lsr a				lsr 	a 							; shift into bit 3
.d3f6	b3f6	4a		lsr a				lsr 	a
.d3f7	b3f7	05 36		ora $36				ora 	zTemp0
.d3f9	b3f9	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.d3fb	b3fb					_TKNoShift:
.d3fb	b3fb	20 d6 b5	jsr $b5d6			jsr 	TOKWriteByte 				; write the punctuation character
.d3fe	b3fe	e8		inx				inx 								; consume the character
.d3ff	b3ff	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; quote found ?
.d401	b401	d0 bc		bne $b3bf			bne 	_TKTokeniseLoop 			; and loop round again.
.d403	b403	20 c9 b4	jsr $b4c9			jsr 	TOKCheckComment 			; comment checl
.d406	b406	80 b7		bra $b3bf			bra 	_TKTokeniseLoop
.d408	b408					_TKString:
.d408	b408	20 f6 b4	jsr $b4f6			jsr 	TOKTokenString
.d40b	b40b	80 b2		bra $b3bf			bra 	_TKTokeniseLoop
.d40d	b40d					_TKHexConstant:
.d40d	b40d	20 31 b5	jsr $b531			jsr 	TOKHexConstant
.d410	b410	80 ad		bra $b3bf			bra 	_TKTokeniseLoop
.d412	b412	a9 80		lda #$80	_TKExit:lda 	#KWC_EOL 					; write end of line byte
.d414	b414	20 d6 b5	jsr $b5d6			jsr 	TOKWriteByte
.d417	b417	60		rts				rts
.d418	b418					_TKCheckDouble:
.d418	b418	bd 27 05	lda $0527,x			lda 	lineBuffer+1,x 				; get next character
.d41b	b41b	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.d41d	b41d	90 c7		bcc $b3e6			bcc 	_TKStandardPunctuation 		; and do the normal punctuation handler.
.d41f	b41f	c9 3f		cmp #$3f			cmp 	#'>'+1
.d421	b421	b0 c3		bcs $b3e6			bcs 	_TKStandardPunctuation
.d423	b423	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.d426	b426	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.d428	b428	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.d429	b429	7d 27 05	adc $0527,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.d42c	b42c	38		sec				sec
.d42d	b42d	e9 3c		sbc #$3c			sbc 	#'<'
.d42f	b42f	20 d6 b5	jsr $b5d6			jsr 	TOKWriteByte 				; this is in the range 0-7
.d432	b432	e8		inx				inx 								; consume both
.d433	b433	e8		inx				inx
.d434	b434	80 89		bra $b3bf			bra 	_TKTokeniseLoop
.d436	b436					_TKTokeniseIdentifier:
.d436	b436	8e 00 04	stx $0400			stx 	identStart 					; save start
.d439	b439	9c 04 04	stz $0404			stz 	identTypeByte 				; zero the type byte
.d43c	b43c					_TKCheckLoop:
.d43c	b43c	e8		inx				inx 								; look at next, we know first is identifier already.
.d43d	b43d	bd 26 05	lda $0526,x			lda  	lineBuffer,x
.d440	b440	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.d442	b442	f0 f8		beq $b43c			beq 	_TKCheckLoop
.d444	b444	c9 30		cmp #$30			cmp	 	#"0"
.d446	b446	90 0c		bcc $b454			bcc 	_TKEndIdentifier
.d448	b448	c9 3a		cmp #$3a			cmp 	#"9"+1
.d44a	b44a	90 f0		bcc $b43c			bcc 	_TKCheckLoop
.d44c	b44c	c9 41		cmp #$41			cmp	 	#"A"
.d44e	b44e	90 04		bcc $b454			bcc 	_TKEndIdentifier
.d450	b450	c9 5b		cmp #$5b			cmp 	#"Z"+1
.d452	b452	90 e8		bcc $b43c			bcc 	_TKCheckLoop
.d454	b454					_TKEndIdentifier:
.d454	b454	8e 01 04	stx $0401			stx 	identTypeStart 				; save start of type text (if any !)
.d457	b457	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.d459	b459	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.d45b	b45b	f0 06		beq $b463			beq 	_TKHasTypeCharacter
.d45d	b45d	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.d45f	b45f	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.d461	b461	d0 07		bne $b46a			bne 	_TKNoTypeCharacter
.d463	b463					_TKHasTypeCharacter:
.d463	b463	8c 04 04	sty $0404			sty 	identTypeByte 				; has # or $, save the type
.d466	b466	e8		inx				inx 								; consume the type character
.d467	b467	bd 26 05	lda $0526,x			lda 	lineBuffer,x
.d46a	b46a					_TKNoTypeCharacter:
.d46a	b46a	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.d46c	b46c	d0 09		bne $b477			bne 	_TKNoArray
.d46e	b46e	e8		inx				inx 								; skip the (
.d46f	b46f	ad 04 04	lda $0404			lda 	identTypeByte 				; set bit 2 (e.g. array) in type byte
.d472	b472	09 04		ora #$04			ora 	#$04
.d474	b474	8d 04 04	sta $0404			sta 	identTypeByte
.d477	b477					_TKNoArray:
.d477	b477	8e 02 04	stx $0402			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.d47a	b47a	20 52 b5	jsr $b552			jsr 	TOKCalculateHash 			; calculate the has for those tokens
.d47d	b47d	a0 ac		ldy #$ac			ldy 	#(KeywordSet0) >> 8
.d47f	b47f	a9 40		lda #$40			lda 	#(KeywordSet0) & $FF
.d481	b481	20 41 b3	jsr $b341			jsr 	TOKSearchTable
.d484	b484	a2 00		ldx #$00			ldx 	#0
.d486	b486	b0 1f		bcs $b4a7			bcs 	_TKFoundToken
.d488	b488	a0 ae		ldy #$ae			ldy 	#(KeywordSet1) >> 8
.d48a	b48a	a9 b1		lda #$b1			lda 	#(KeywordSet1) & $FF
.d48c	b48c	20 41 b3	jsr $b341			jsr 	TOKSearchTable
.d48f	b48f	a2 81		ldx #$81			ldx 	#$81
.d491	b491	b0 14		bcs $b4a7			bcs 	_TKFoundToken
.d493	b493	a0 af		ldy #$af			ldy 	#(KeywordSet2) >> 8
.d495	b495	a9 ba		lda #$ba			lda 	#(KeywordSet2) & $FF
.d497	b497	20 41 b3	jsr $b341			jsr 	TOKSearchTable
.d49a	b49a	a2 82		ldx #$82			ldx 	#$82
.d49c	b49c	b0 09		bcs $b4a7			bcs 	_TKFoundToken
.d49e	b49e	20 e2 b5	jsr $b5e2			jsr 	TOKCheckCreateVariableRecord ; failed all, it's a variable, create record if does not exist.
.d4a1	b4a1	ae 02 04	ldx $0402			ldx 	identTypeEnd 				; X points to following byte
.d4a4	b4a4	4c bf b3	jmp $b3bf			jmp 	_TKTokeniseLoop 			; and go round again.
.d4a7	b4a7					_TKFoundToken:
.d4a7	b4a7	48		pha				pha 								; save token
.d4a8	b4a8	8a		txa				txa 								; shift in X, is there one ?
.d4a9	b4a9	f0 03		beq $b4ae			beq 	_TKNoTShift
.d4ab	b4ab	20 d6 b5	jsr $b5d6			jsr 	TOKWriteByte 				; if so, write it out
.d4ae	b4ae					_TKNoTShift:
.d4ae	b4ae	68		pla				pla 								; restore and write token
.d4af	b4af	20 d6 b5	jsr $b5d6			jsr 	TOKWriteByte
.d4b2	b4b2	e0 00		cpx #$00			cpx 	#0 							; check for REM and '
.d4b4	b4b4	d0 0d		bne $b4c3			bne 	_TKNotRem 			 		; not shifted ?
.d4b6	b4b6	c9 d6		cmp #$d6			cmp 	#KWD_REM
.d4b8	b4b8	d0 09		bne $b4c3			bne 	_TKNotRem
.d4ba	b4ba	ae 02 04	ldx $0402			ldx 	identTypeEnd 				; check if comment follows.
.d4bd	b4bd	20 c9 b4	jsr $b4c9			jsr 	TOKCheckComment
.d4c0	b4c0	4c bf b3	jmp $b3bf			jmp 	_TKTokeniseLoop
.d4c3	b4c3					_TKNotRem:
.d4c3	b4c3	ae 02 04	ldx $0402			ldx 	identTypeEnd 				; X points to following byte
.d4c6	b4c6	4c bf b3	jmp $b3bf			jmp 	_TKTokeniseLoop 			; and go round again.
.d4c9	b4c9					TOKCheckComment:
.d4c9	b4c9	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; skip over space
.d4cc	b4cc	e8		inx				inx
.d4cd	b4cd	c9 20		cmp #$20			cmp 	#' '
.d4cf	b4cf	f0 f8		beq $b4c9			beq 	TOKCheckComment
.d4d1	b4d1	ca		dex				dex 								; first non space character
.d4d2	b4d2	c9 22		cmp #$22			cmp 	#'"'						; quote mark
.d4d4	b4d4	f0 1f		beq $b4f5			beq 	_TOKCCExit 					; then we are okay
.d4d6	b4d6	c9 00		cmp #$00			cmp 	#0 							; EOL
.d4d8	b4d8	f0 1b		beq $b4f5			beq 	_TOKCCExit 					; then we are okay
.d4da	b4da	da		phx				phx
.d4db	b4db					_TOKCCLowerCase:
.d4db	b4db	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; about making it lower case it all, but I thought
.d4de	b4de	c9 41		cmp #$41			cmp 	#"A"		 				; that was a bit risky. So it's converted to L/C here.
.d4e0	b4e0	90 09		bcc $b4eb			bcc 	_TOKKCNotUC
.d4e2	b4e2	c9 5b		cmp #$5b			cmp 	#"Z"+1
.d4e4	b4e4	b0 05		bcs $b4eb			bcs 	_TOKKCNotUC
.d4e6	b4e6	49 20		eor #$20			eor 	#$20
.d4e8	b4e8	9d 26 05	sta $0526,x			sta 	lineBuffer,x
.d4eb	b4eb					_TOKKCNotUC:
.d4eb	b4eb	e8		inx				inx
.d4ec	b4ec	c9 00		cmp #$00			cmp 	#0
.d4ee	b4ee	d0 eb		bne $b4db			bne 	_TOKCCLowerCase
.d4f0	b4f0	fa		plx				plx
.d4f1	b4f1	ca		dex				dex 								; tokenise string expects initial skip.
.d4f2	b4f2	20 f6 b4	jsr $b4f6			jsr 	TOKTokenString 				; tokenise rest of line as a string.
.d4f5	b4f5					_TOKCCExit:
.d4f5	b4f5	60		rts				rts
.d4f6	b4f6					TOKTokenString:
.d4f6	b4f6	a9 ff		lda #$ff			lda 	#KWC_STRING 				; string token.
.d4f8	b4f8	20 d6 b5	jsr $b5d6			jsr 	TOKWriteByte
.d4fb	b4fb	e8		inx				inx									; start of quoted string.
.d4fc	b4fc	da		phx				phx 								; push start of string on top
.d4fd	b4fd	ca		dex				dex 								; because we pre-increment
.d4fe	b4fe					_TSFindEnd:
.d4fe	b4fe	e8		inx				inx
.d4ff	b4ff	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; next character
.d502	b502	f0 04		beq $b508			beq 	_TSEndOfString 				; no matching quote, we don't mind.
.d504	b504	c9 22		cmp #$22			cmp 	#'"' 						; go back if quote not found
.d506	b506	d0 f6		bne $b4fe			bne 	_TSFindEnd
.d508	b508					_TSEndOfString:
.d508	b508	7a		ply				ply  								; so now Y is first character, X is character after end.
.d509	b509	48		pha				pha 								; save terminating character
.d50a	b50a	20 12 b5	jsr $b512			jsr 	TOKWriteBlockXY 			; write X to Y as a data block
.d50d	b50d	68		pla				pla 								; terminating character
.d50e	b50e	f0 01		beq $b511			beq 	_TSNotQuote					; if it wasn't EOS skip it
.d510	b510	e8		inx				inx
.d511	b511					_TSNotQuote:
.d511	b511	60		rts				rts
.d512	b512					TOKWriteBlockXY:
.d512	b512	86 36		stx $36				stx 	zTemp0 						; save end character
.d514	b514	98		tya				tya 								; use 2's complement to work out the byte size
.d515	b515	49 ff		eor #$ff			eor 	#$FF
.d517	b517	38		sec				sec
.d518	b518	65 36		adc $36				adc 	zTemp0
.d51a	b51a	1a		inc a				inc 	a 							; one extra for NULL
.d51b	b51b	20 d6 b5	jsr $b5d6			jsr 	TOKWriteByte
.d51e	b51e					_TOBlockLoop:
.d51e	b51e	c4 36		cpy $36				cpy 	zTemp0 						; exit if reached the end
.d520	b520	f0 09		beq $b52b			beq 	_TOBlockExit
.d522	b522	b9 26 05	lda $0526,y			lda 	lineBuffer,y 				; write byte out.
.d525	b525	20 d6 b5	jsr $b5d6			jsr 	TOKWriteByte
.d528	b528	c8		iny				iny
.d529	b529	80 f3		bra $b51e			bra 	_TOBlockLoop
.d52b	b52b					_TOBlockExit:
.d52b	b52b	a9 00		lda #$00			lda 	#0 							; add NULL.
.d52d	b52d	20 d6 b5	jsr $b5d6			jsr 	TOKWriteByte
.d530	b530	60		rts				rts
.d531	b531					TOKHexConstant:
.d531	b531	a9 fe		lda #$fe			lda 	#KWC_HEXCONST 				; hex constant token.
.d533	b533	20 d6 b5	jsr $b5d6			jsr 	TOKWriteByte
.d536	b536	e8		inx				inx									; start of quoted string.
.d537	b537	da		phx				phx 								; push start of constant on top
.d538	b538	ca		dex				dex
.d539	b539					_THFindLoop:
.d539	b539	e8		inx				inx 	 							; this is stored in a block, so find out how long
.d53a	b53a	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; the hex constant is.
.d53d	b53d	c9 30		cmp #$30			cmp 	#"0"
.d53f	b53f	90 0c		bcc $b54d			bcc 	_THFoundEnd
.d541	b541	c9 3a		cmp #$3a			cmp 	#"9"+1
.d543	b543	90 f4		bcc $b539			bcc 	_THFindLoop
.d545	b545	c9 41		cmp #$41			cmp 	#"A"
.d547	b547	90 04		bcc $b54d			bcc 	_THFoundEnd
.d549	b549	c9 47		cmp #$47			cmp 	#"F"+1
.d54b	b54b	90 ec		bcc $b539			bcc 	_THFindLoop
.d54d	b54d					_THFoundEnd:
.d54d	b54d	7a		ply				ply 								; restore start
.d54e	b54e	20 12 b5	jsr $b512			jsr 	TOKWriteBlockXY 			; output the block
.d551	b551	60		rts				rts
.d552	b552					TOKCalculateHash:
.d552	b552	da		phx				phx
.d553	b553	ae 00 04	ldx $0400			ldx 	identStart 					; needs to be same as in tokens.py - simple sum at present.
.d556	b556	a9 00		lda #$00			lda 	#0
.d558	b558					_TCHLoop:
.d558	b558	18		clc				clc
.d559	b559	7d 26 05	adc $0526,x			adc 	lineBuffer,x
.d55c	b55c	e8		inx				inx
.d55d	b55d	ec 02 04	cpx $0402			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.d560	b560	d0 f6		bne $b558			bne 	_TCHLoop
.d562	b562	8d 03 04	sta $0403			sta 	identHash 					; save the hash
.d565	b565	fa		plx				plx
.d566	b566	60		rts				rts
.d567	b567					LCLFixLineBufferCase:
.d567	b567	a2 00		ldx #$00			ldx 	#0
.d569	b569					_FLBCLoop:
.d569	b569	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; get next character
.d56c	b56c	f0 22		beq $b590			beq 	_FLBCExit 					; end of string.
.d56e	b56e	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.d570	b570	f0 11		beq $b583			beq 	_FLBCInQuotes
.d572	b572	e8		inx				inx
.d573	b573	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.d575	b575	90 f2		bcc $b569			bcc 	_FLBCLoop
.d577	b577	c9 7b		cmp #$7b			cmp 	#'z'+1
.d579	b579	b0 ee		bcs $b569			bcs 	_FLBCLoop
.d57b	b57b	38		sec				sec 								; make U/C
.d57c	b57c	e9 20		sbc #$20			sbc 	#32
.d57e	b57e	9d 25 05	sta $0525,x			sta	 	lineBuffer-1,x 				; write back
.d581	b581	80 e6		bra $b569			bra 	_FLBCLoop
.d583	b583					_FLBCInQuotes:
.d583	b583	e8		inx				inx 								; advance
.d584	b584	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; get next
.d587	b587	f0 07		beq $b590			beq 	_FLBCExit 					; exit on EOS
.d589	b589	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.d58b	b58b	d0 f6		bne $b583			bne 	_FLBCInQuotes
.d58d	b58d	e8		inx				inx 								; skip over it
.d58e	b58e	80 d9		bra $b569			bra 	_FLBCLoop
.d590	b590					_FLBCExit:
.d590	b590	60		rts				rts
.d591	b591					TOKExtractLineNumber:
.d591	b591	ad 28 04	lda $0428			lda 	tokenLineNumber+1 			; push current value on stack
.d594	b594	48		pha				pha
.d595	b595	ad 27 04	lda $0427			lda 	tokenLineNumber
.d598	b598	48		pha				pha
.d599	b599	20 cf b5	jsr $b5cf			jsr 	_LCLNTimes2 				; line # x 2
.d59c	b59c	20 cf b5	jsr $b5cf			jsr 	_LCLNTimes2 				; line # x 4
.d59f	b59f	18		clc				clc 								; add stacked value
.d5a0	b5a0	68		pla				pla
.d5a1	b5a1	6d 27 04	adc $0427			adc 	tokenLineNumber
.d5a4	b5a4	8d 27 04	sta $0427			sta 	tokenLineNumber
.d5a7	b5a7	68		pla				pla
.d5a8	b5a8	6d 28 04	adc $0428			adc 	tokenLineNumber+1
.d5ab	b5ab	8d 28 04	sta $0428			sta 	tokenLineNumber+1 			; line # x 5
.d5ae	b5ae	20 cf b5	jsr $b5cf			jsr 	_LCLNTimes2 				; line # x 10
.d5b1	b5b1	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; get and consume character
.d5b4	b5b4	e8		inx				inx
.d5b5	b5b5	29 0f		and #$0f			and 	#15 						; add to line #
.d5b7	b5b7	18		clc				clc
.d5b8	b5b8	6d 27 04	adc $0427			adc 	tokenLineNumber
.d5bb	b5bb	8d 27 04	sta $0427			sta 	tokenLineNumber
.d5be	b5be	90 03		bcc $b5c3			bcc 	_TLENNoCarry
.d5c0	b5c0	ee 28 04	inc $0428			inc 	tokenLineNumber+1
.d5c3	b5c3					_TLENNoCarry:
.d5c3	b5c3	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; more digits ?
.d5c6	b5c6	c9 30		cmp #$30			cmp 	#'0'
.d5c8	b5c8	90 04		bcc $b5ce			bcc 	_TLENExit
.d5ca	b5ca	c9 3a		cmp #$3a			cmp 	#'9'+1
.d5cc	b5cc	90 c3		bcc $b591			bcc 	TOKExtractLineNumber
.d5ce	b5ce					_TLENExit:
.d5ce	b5ce	60		rts				rts
.d5cf	b5cf					_LCLNTimes2:
.d5cf	b5cf	0e 27 04	asl $0427			asl 	tokenLineNumber 			; doubles tokenLineNumber.
.d5d2	b5d2	2e 28 04	rol $0428			rol 	tokenLineNumber+1
.d5d5	b5d5	60		rts				rts
.d5d6	b5d6					TOKWriteByte:
.d5d6	b5d6	da		phx				phx
.d5d7	b5d7	ae 26 04	ldx $0426			ldx 	tokenOffset 				; next slot to write to
.d5da	b5da	9d 26 04	sta $0426,x			sta 	tokenOffset,x 				; write byte out
.d5dd	b5dd	ee 26 04	inc $0426			inc 	tokenOffset 				; advance slot.
.d5e0	b5e0	fa		plx				plx
.d5e1	b5e1	60		rts				rts
.d5e2	b5e2					TOKCheckCreateVariableRecord:
.d5e2	b5e2	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.d5e4	b5e4	85 36		sta $36				sta 	0+zTemp0
.d5e6	b5e6	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.d5e8	b5e8	85 37		sta $37				sta 	1+zTemp0
.d5ea	b5ea					_CCVSearch:
.d5ea	b5ea	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.d5ec	b5ec	f0 2c		beq $b61a			beq 	_CCVFail
.d5ee	b5ee	a0 01		ldy #$01			ldy 	#1 							; read the hash
.d5f0	b5f0	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.d5f2	b5f2	cd 03 04	cmp $0403			cmp 	identHash 	  				; if not, try the next.
.d5f5	b5f5	d0 16		bne $b60d			bne 	_CCVNext
.d5f7	b5f7	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.d5f9	b5f9	ae 00 04	ldx $0400			ldx 	identStart
.d5fc	b5fc					_CCVCompare:
.d5fc	b5fc	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.d5ff	b5ff	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.d601	b601	e8		inx				inx 								; advance pointers
.d602	b602	c8		iny				iny
.d603	b603	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.d604	b604	d0 07		bne $b60d			bne 	_CCVNext  					; didn't match go to next.
.d606	b606	90 f4		bcc $b5fc			bcc 	_CCVCompare 				; not finished yet.
.d608	b608	ec 02 04	cpx $0402			cpx 	identTypeEnd 				; matched whole thing ?
.d60b	b60b	f0 41		beq $b64e			beq 	_CCVFound 					; yes, we were successful
.d60d	b60d					_CCVNext:
.d60d	b60d	18		clc				clc 								; go to next record.
.d60e	b60e	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.d610	b610	65 36		adc $36				adc 	zTemp0
.d612	b612	85 36		sta $36				sta 	zTemp0
.d614	b614	90 d4		bcc $b5ea			bcc 	_CCVSearch
.d616	b616	e6 37		inc $37				inc 	zTemp0+1
.d618	b618	80 d0		bra $b5ea			bra 	_CCVSearch
.d61a	b61a					_CCVFail:
.d61a	b61a	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.d61c	b61c	ad 03 04	lda $0403			lda 	identHash
.d61f	b61f	91 36		sta ($36),y			sta 	(zTemp0),y
.d621	b621	c8		iny				iny 								; offset 2 is the type byte
.d622	b622	ad 04 04	lda $0404			lda 	identTypeByte
.d625	b625	91 36		sta ($36),y			sta 	(zTemp0),y
.d627	b627	c8		iny				iny
.d628	b628					_CCVData:
.d628	b628	a9 00		lda #$00			lda 	#0 							; erase data 3-7 (the 5 value bytes)
.d62a	b62a	91 36		sta ($36),y			sta 	(zTemp0),y
.d62c	b62c	c8		iny				iny
.d62d	b62d	c0 08		cpy #$08			cpy 	#8
.d62f	b62f	90 f7		bcc $b628			bcc 	_CCVData
.d631	b631	ae 00 04	ldx $0400			ldx 	identStart 					; copy name into 8 on.
.d634	b634					_CCVCopyName:
.d634	b634	bd 26 05	lda $0526,x			lda 	lineBuffer,x
.d637	b637	91 36		sta ($36),y			sta 	(zTemp0),y
.d639	b639	e8		inx				inx
.d63a	b63a	c8		iny				iny
.d63b	b63b	ec 02 04	cpx $0402			cpx 	identTypeEnd
.d63e	b63e	d0 f4		bne $b634			bne 	_CCVCopyName
.d640	b640	98		tya				tya 								; patch offset
.d641	b641	92 36		sta ($36)			sta 	(zTemp0)
.d643	b643	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.d645	b645	91 36		sta ($36),y			sta 	(zTemp0),y
.d647	b647	88		dey				dey
.d648	b648	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.d64a	b64a	09 80		ora #$80			ora 	#$80
.d64c	b64c	91 36		sta ($36),y			sta 	(zTemp0),y
.d64e	b64e					_CCVFound:
.d64e	b64e	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.d650	b650	38		sec				sec
.d651	b651	e9 10		sbc #$10			sbc 	#(VariableSpace >> 8) 		; offset from the start of the variable token
.d653	b653	09 40		ora #$40			ora 	#$40 						; make it a writeable token $4000-$7FFF
.d655	b655	20 d6 b5	jsr $b5d6			jsr 	TOKWriteByte
.d658	b658	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.d65a	b65a	20 d6 b5	jsr $b5d6			jsr 	TOKWriteByte
.d65d	b65d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_sound.module

=1						soundIntegrated=1
.d65e	b65e					SNDCheckChannel:
.d65e	b65e	aa		tax				tax
.d65f	b65f	bd 8e 09	lda $098e,x			lda 	SNDTimeLeft,x 				; currently playing a note
.d662	b662	d0 38		bne $b69c			bne 	_SNDCCExit
.d664	b664	da		phx				phx 								; save current channel
.d665	b665	8a		txa				txa 								; put in A
.d666	b666	20 e2 b6	jsr $b6e2			jsr 	SNDFindNextNoteForA 		; is there a note for A in the queue ?
.d669	b669	68		pla				pla 								; channel # in A
.d66a	b66a	90 30		bcc $b69c			bcc 	_SNDCCExit  				; nothing in the queue for this channel, exit.
.d66c	b66c	a8		tay				tay 								; Y is the channel #
.d66d	b66d	bd 83 08	lda $0883,x			lda 	SNDQueue+1,x 				; copy data into the slot.
.d670	b670	99 82 09	sta $0982,y			sta 	SNDPitchLow,y
.d673	b673	bd 84 08	lda $0884,x			lda 	SNDQueue+2,x
.d676	b676	99 86 09	sta $0986,y			sta 	SNDPitchHigh,y
.d679	b679	bd 85 08	lda $0885,x			lda 	SNDQueue+3,x
.d67c	b67c	99 8a 09	sta $098a,y			sta 	SNDVolume,y
.d67f	b67f	bd 86 08	lda $0886,x			lda 	SNDQueue+4,x
.d682	b682	99 8e 09	sta $098e,y			sta 	SNDTimeLeft,y
.d685	b685	bd 87 08	lda $0887,x			lda 	SNDQueue+5,x
.d688	b688	99 92 09	sta $0992,y			sta 	SNDAdjustLow,y
.d68b	b68b	bd 88 08	lda $0888,x			lda 	SNDQueue+6,x
.d68e	b68e	99 96 09	sta $0996,y			sta 	SNDAdjustHigh,y
.d691	b691	5a		phy				phy 								; save channel #
.d692	b692	20 fc b6	jsr $b6fc			jsr 	SNDDeleteXFromQueue 		; delete record at X from queue
.d695	b695	ce 81 08	dec $0881			dec 	SNDLength 					; reduce the queue length.
.d698	b698	68		pla				pla
.d699	b699	20 9d b6	jsr $b69d			jsr 	SNDUpdateNote 				; update channel A
.d69c	b69c					_SNDCCExit:
.d69c	b69c	60		rts				rts
.d69d	b69d					SNDUpdateNote:
.d69d	b69d	aa		tax				tax 								; so we can access records
.d69e	b69e	0a		asl a				asl 	a 							; convert it to a channel bit pair in 5,6
.d69f	b69f	0a		asl a				asl 	a
.d6a0	b6a0	0a		asl a				asl 	a
.d6a1	b6a1	0a		asl a				asl 	a
.d6a2	b6a2	0a		asl a				asl 	a
.d6a3	b6a3	8d 80 08	sta $0880			sta 	SNDChannelBits
.d6a6	b6a6	bd 8e 09	lda $098e,x			lda 	SNDTimeLeft,x 				; are we silent
.d6a9	b6a9	f0 2e		beq $b6d9			beq 	_SNDUNIsSilent
.d6ab	b6ab	ad 80 08	lda $0880			lda 	SNDChannelBits 				; push channel bits on stack
.d6ae	b6ae	48		pha				pha
.d6af	b6af	bd 82 09	lda $0982,x			lda 	SNDPitchLow,x 				; get 4 lowest bits of pitch.
.d6b2	b6b2	29 0f		and #$0f			and 	#$0F
.d6b4	b6b4	0d 80 08	ora $0880			ora 	SNDChannelBits 				; set channel bits
.d6b7	b6b7	09 80		ora #$80			ora 	#$80 						; write to pitch register
.d6b9	b6b9	20 46 b7	jsr $b746			jsr 	SNDWritePorts
.d6bc	b6bc	bd 86 09	lda $0986,x			lda 	SNDPitchHigh,x 				; pitch high => channel temp.
.d6bf	b6bf	8d 80 08	sta $0880			sta 	SNDChannelBits
.d6c2	b6c2	bd 82 09	lda $0982,x			lda 	SNDPitchLow,x
.d6c5	b6c5	4e 80 08	lsr $0880			lsr 	SNDChannelBits 				; shift 2 LSBs into MSB of A
.d6c8	b6c8	6a		ror a				ror 	a
.d6c9	b6c9	4e 80 08	lsr $0880			lsr 	SNDChannelBits
.d6cc	b6cc	6a		ror a				ror 	a
.d6cd	b6cd	4a		lsr a				lsr 	a 							; put in bits 0-5
.d6ce	b6ce	4a		lsr a				lsr 	a
.d6cf	b6cf	20 46 b7	jsr $b746			jsr 	SNDWritePorts 				; write as rest of pitch register
.d6d2	b6d2	68		pla				pla
.d6d3	b6d3	09 90		ora #$90			ora 	#$90 						; set to write minimum attentuation.
.d6d5	b6d5	20 46 b7	jsr $b746			jsr 	SNDWritePorts
.d6d8	b6d8	60		rts				rts
.d6d9	b6d9					_SNDUNIsSilent:
.d6d9	b6d9	ad 80 08	lda $0880			lda 	SNDChannelBits 				; channel bits
.d6dc	b6dc	09 9f		ora #$9f			ora 	#$9F 						; maximum attenuation
.d6de	b6de	20 46 b7	jsr $b746			jsr 	SNDWritePorts 				; write to the ports
.d6e1	b6e1	60		rts				rts
.d6e2	b6e2					SNDFindNextNoteForA:
.d6e2	b6e2	ac 81 08	ldy $0881			ldy 	SNDLength 					; queue size into Y
.d6e5	b6e5	f0 13		beq $b6fa			beq 	_SNDFNNFail 				; queue empty.
.d6e7	b6e7	a2 00		ldx #$00			ldx 	#0
.d6e9	b6e9					_SNDFNNSearch:
.d6e9	b6e9	dd 82 08	cmp $0882,x			cmp 	SNDQueue,x 					; does it match the channel
.d6ec	b6ec	38		sec				sec
.d6ed	b6ed	f0 0c		beq $b6fb			beq 	_SNDFNNExit 				; if so exit with CS.
.d6ef	b6ef	e8		inx				inx 								; next queue slot.
.d6f0	b6f0	e8		inx				inx
.d6f1	b6f1	e8		inx				inx
.d6f2	b6f2	e8		inx				inx
.d6f3	b6f3	e8		inx				inx
.d6f4	b6f4	e8		inx				inx
.d6f5	b6f5	e8		inx				inx
.d6f6	b6f6	e8		inx				inx
.d6f7	b6f7	88		dey				dey 								; done the whole queue
.d6f8	b6f8	d0 ef		bne $b6e9			bne 	_SNDFNNSearch 				; no, go back.
.d6fa	b6fa					_SNDFNNFail:
.d6fa	b6fa	18		clc				clc
.d6fb	b6fb					_SNDFNNExit:
.d6fb	b6fb	60		rts				rts
.d6fc	b6fc					SNDDeleteXFromQueue:
.d6fc	b6fc	e0 f8		cpx #$f8			cpx 	#SNDQueueSize*8-8 			; reached the end.
.d6fe	b6fe	f0 09		beq $b709			beq 	_SNDDXExit
.d700	b700	bd 8a 08	lda $088a,x			lda 	SNDQueue+8,x
.d703	b703	9d 82 08	sta $0882,x			sta 	SNDQueue,x
.d706	b706	e8		inx				inx
.d707	b707	80 f3		bra $b6fc			bra 	SNDDeleteXFromQueue
.d709	b709					_SNDDXExit:
.d709	b709	60		rts				rts
.0880						SNDChannelBits:
>0880								.fill 	1
.d70a	b70a					SNDQueueRequest:
.d70a	b70a	86 36		stx $36				stx 	zTemp0						; save queue address
.d70c	b70c	84 37		sty $37				sty 	zTemp0+1
.d70e	b70e	ae 81 08	ldx $0881			ldx 	SNDLength 					; queue is full, can't take any more.
.d711	b711	e0 20		cpx #$20			cpx 	#SNDQueueSize
.d713	b713	f0 21		beq $b736			beq 	_SNDQRExit
.d715	b715	29 03		and #$03			and 	#3	 						; channel # and push on stack
.d717	b717	48		pha				pha
.d718	b718	8a		txa				txa  								; get offset in queue buffer/
.d719	b719	0a		asl a				asl 	a
.d71a	b71a	0a		asl a				asl 	a
.d71b	b71b	0a		asl a				asl 	a
.d71c	b71c	aa		tax				tax
.d71d	b71d	68		pla				pla 								; get back and push again
.d71e	b71e	48		pha				pha
.d71f	b71f	9d 82 08	sta $0882,x			sta 	SNDQueue+0,x 				; save the channel #
.d722	b722	a0 00		ldy #$00			ldy 	#0 							; copy the rest in.
.d724	b724					_SNDQCopy:
.d724	b724	b1 36		lda ($36),y			lda 	(zTemp0),y
.d726	b726	e8		inx				inx
.d727	b727	c8		iny				iny
.d728	b728	9d 82 08	sta $0882,x			sta 	SNDQueue,x
.d72b	b72b	c0 06		cpy #$06			cpy 	#6
.d72d	b72d	d0 f5		bne $b724			bne 	_SNDQCopy
.d72f	b72f	ee 81 08	inc $0881			inc 	SNDLength 					; bump queue length.
.d732	b732	68		pla				pla 								; get channel # back
.d733	b733	20 5e b6	jsr $b65e			jsr 	SNDCheckChannel 			; check if channel needs refreshing.
.d736	b736					_SNDQRExit:
.d736	b736	60		rts				rts
.d737	b737					SNDSilenceChannel:
.d737	b737	aa		tax				tax 								; zero time left.
.d738	b738	9e 8e 09	stz $098e,x			stz 	SNDTimeLeft,x
.d73b	b73b	0a		asl a				asl 	a 							; shift into position
.d73c	b73c	0a		asl a				asl 	a
.d73d	b73d	0a		asl a				asl 	a
.d73e	b73e	0a		asl a				asl 	a
.d73f	b73f	0a		asl a				asl 	a
.d740	b740	09 9f		ora #$9f			ora 	#$9F 						; write register attenuation $F
.d742	b742	20 46 b7	jsr $b746			jsr 	SNDWritePorts
.d745	b745	60		rts				rts
.d746	b746					SNDWritePorts:
.d746	b746	da		phx				phx 								; save X
.d747	b747	a6 01		ldx $01				ldx 	1 							; save I/O status
.d749	b749	64 01		stz $01				stz 	1 							; access I/O page 0
.d74b	b74b	8d 00 d6	sta $d600			sta 	$D600 						; write to both
.d74e	b74e	8d 10 d6	sta $d610			sta 	$D610
.d751	b751	86 01		stx $01				stx 	1 							; restore I/O
.d753	b753	fa		plx				plx 								; restore X
.d754	b754	60		rts				rts
.d755	b755					Export_SNDCommand:
.d755	b755	da		phx				phx 								; save XY
.d756	b756	5a		phy				phy
.d757	b757	c9 0f		cmp #$0f			cmp 	#$0F 						; $0F is initialise
.d759	b759	f0 1d		beq $b778			beq 	_SNDInitialise
.d75b	b75b	90 28		bcc $b785			bcc 	_SNDExit
.d75d	b75d	c9 3f		cmp #$3f			cmp 	#$3F 						; $3F is silence all
.d75f	b75f	f0 17		beq $b778			beq 	_SNDSilence
.d761	b761	b0 22		bcs $b785			bcs 	_SNDExit
.d763	b763	c9 20		cmp #$20			cmp 	#$20 						; $2x is check playing => A
.d765	b765	b0 09		bcs $b770			bcs 	_SNDQueryPlay
.d767	b767	c9 14		cmp #$14			cmp 	#$14 						; $10-$13 is queue sound
.d769	b769	b0 1a		bcs $b785			bcs 	_SNDExit
.d76b	b76b	20 0a b7	jsr $b70a			jsr 	SNDQueueRequest
.d76e	b76e	80 15		bra $b785			bra 	_SNDExit
.d770	b770					_SNDQueryPlay:
.d770	b770	29 03		and #$03			and 	#3 							; get channel #
.d772	b772	aa		tax				tax
.d773	b773	bd 8e 09	lda $098e,x			lda 	SNDTimeLeft,x 				; read time left, if zero then silent
.d776	b776	80 0d		bra $b785			bra 	_SNDExit
.d778	b778					_SNDInitialise:
.d778	b778					_SNDSilence:
.d778	b778	9c 81 08	stz $0881			stz 	SNDLength 					; empty the queue.
.d77b	b77b	a9 03		lda #$03			lda 	#$3 						; silence channel 0-3.
.d77d	b77d					_SNDSilenceLoop:
.d77d	b77d	48		pha				pha
.d77e	b77e	20 37 b7	jsr $b737			jsr 	SNDSilenceChannel
.d781	b781	68		pla				pla
.d782	b782	3a		dec a				dec 	a
.d783	b783	10 f8		bpl $b77d			bpl 	_SNDSilenceLoop
.d785	b785					_SNDExit:
.d785	b785	7a		ply				ply
.d786	b786	fa		plx				plx
.d787	b787	60		rts				rts
=32						SNDQueueSize = 32 							; number of queue entries
.0881						SNDLength:
>0881								.fill 	1
.0882						SNDQueue:
>0882								.fill 	SNDQueueSize * 8
.0982						SNDPitchLow:
>0982								.fill 	4
.0986						SNDPitchHigh:
>0986								.fill 	4
.098a						SNDVolume:
>098a								.fill 	4
.098e						SNDTimeLeft:
>098e								.fill 	4
.0992						SNDAdjustLow:
>0992								.fill 	4
.0996						SNDAdjustHigh:
>0996								.fill 	4
.d788	b788					Export_SNDUpdate:
.d788	b788					PagedSNDUpdate:
.d788	b788	ad 8e 09	lda $098e			lda 	SNDTimeLeft+0 				; look at time remaining
.d78b	b78b	f0 05		beq $b792			beq 	_SNDUNot0 					; not playing
.d78d	b78d	a2 00		ldx #$00			ldx 	#0 							; so we know which channel to update
.d78f	b78f	20 b1 b7	jsr $b7b1			jsr 	SNDUpdateChannel 			; update it.
.d792	b792					_SNDUNot0:
.d792	b792	ad 8f 09	lda $098f			lda 	SNDTimeLeft+1
.d795	b795	f0 05		beq $b79c			beq 	_SNDUNot1
.d797	b797	a2 01		ldx #$01			ldx 	#1
.d799	b799	20 b1 b7	jsr $b7b1			jsr 	SNDUpdateChannel
.d79c	b79c					_SNDUNot1:
.d79c	b79c	ad 90 09	lda $0990			lda 	SNDTimeLeft+2
.d79f	b79f	f0 05		beq $b7a6			beq 	_SNDUNot2
.d7a1	b7a1	a2 02		ldx #$02			ldx 	#2
.d7a3	b7a3	20 b1 b7	jsr $b7b1			jsr 	SNDUpdateChannel
.d7a6	b7a6					_SNDUNot2:
.d7a6	b7a6	ad 91 09	lda $0991			lda 	SNDTimeLeft+3
.d7a9	b7a9	f0 05		beq $b7b0			beq 	_SNDUNot3
.d7ab	b7ab	a2 03		ldx #$03			ldx 	#3
.d7ad	b7ad	20 b1 b7	jsr $b7b1			jsr 	SNDUpdateChannel
.d7b0	b7b0					_SNDUNot3:
.d7b0	b7b0	60		rts				rts
.d7b1	b7b1					SNDUpdateChannel:
.d7b1	b7b1	c9 ff		cmp #$ff			cmp 	#$FF 						; sound $FF play forever until turned off manually
.d7b3	b7b3	f0 2c		beq $b7e1			beq 	_SNDUCExit
.d7b5	b7b5	3a		dec a				dec 	a 							; decrement and update timer
.d7b6	b7b6	9d 8e 09	sta $098e,x			sta 	SNDTimeLeft,x
.d7b9	b7b9	f0 1d		beq $b7d8			beq 	_SNDUCUpdate 				; if zero, silence channel
.d7bb	b7bb	bd 92 09	lda $0992,x			lda 	SNDAdjustLow,x 				; adjust ?
.d7be	b7be	1d 96 09	ora $0996,x			ora 	SNDAdjustHigh,x
.d7c1	b7c1	f0 1e		beq $b7e1			beq 	_SNDUCExit 					; if zero carry on at current tone.
.d7c3	b7c3	18		clc				clc 								; add adjust, forcing into a 10 bit range
.d7c4	b7c4	bd 82 09	lda $0982,x			lda 	SNDPitchLow,x
.d7c7	b7c7	7d 92 09	adc $0992,x			adc 	SNDAdjustLow,x
.d7ca	b7ca	9d 82 09	sta $0982,x			sta 	SNDPitchLow,x
.d7cd	b7cd	bd 86 09	lda $0986,x			lda 	SNDPitchHigh,x
.d7d0	b7d0	7d 96 09	adc $0996,x			adc 	SNDAdjustHigh,x
.d7d3	b7d3	29 03		and #$03			and 	#3
.d7d5	b7d5	9d 86 09	sta $0986,x			sta 	SNDPitchHigh,x
.d7d8	b7d8					_SNDUCUpdate:
.d7d8	b7d8	8a		txa				txa 								; which channel.
.d7d9	b7d9	48		pha				pha
.d7da	b7da	20 9d b6	jsr $b69d			jsr 	SNDUpdateNote 				; update the current note
.d7dd	b7dd	68		pla				pla
.d7de	b7de	20 5e b6	jsr $b65e			jsr 	SNDCheckChannel 			; more to do ?
.d7e1	b7e1					_SNDUCExit:
.d7e1	b7e1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_kernel.module

=1						kernelIntegrated=1

;******  Return to file: _basic.asm


;******  Processing file: ../modules/hardware/header/headerdata.dat

=14						Header_Height = 14
=255						Header_RLE = 255
.e000	a000					Header_jattrs:
>e000	a000	ff f2 58 f2 ff d8 07 d8			.byte	255,242,88,242,255,216,7,216,255,242,2,242,255,216,6,216,255,242,2,242,255,216,8,216,255,242,2,242,255,216,6,216,255,242,9,242,210,210,242,242,255,210,7,210,255,242,17,242,104,104,255,242,7,242,104,104,255,242,4,242,104,104,242,242,104,104,255,242,8,242,104,104,255,242,4,242,104,104,255,242,8,242,210,210,242,242,210,210,255,242,4,242,210,210,255,242,16,242,232,232,255,242,14,242,232,232,242,242,232,232,255,242,8,242,232,232,255,242,15,242,210,210,242,242,210,210,255,242,4,242,210,210,255,242,16,242,255,56,5,56,255,242,4,242,255,56,6,56,255,242,2,242,255,56,7,56,255,242,2,242,255,56,7,56,255,242,9,242,210,210,242,242,255,210,7,210,255,242,17,242,120,120,255,242,7,242,120,120,255,242,15,242,120,120,242,242,120,120,255,242,4,242,120,120,242,242,210,210,255,242,4,242,210,210,242,242,210,210,255,242,2,242,210,210,255,242,18,242,168,168,255,242,7,242,168,168,255,242,8,242,168,168,255,242,4,242,168,168,242,242,168,168,255,242,4,242,168,168,242,242,210,210,255,242,4,242,210,210,242,242,210,210,255,242,3,242,210,210,255,242,17,242,72,72,255,242,7,242,255,72,8,72,255,242,2,242,255,72,6,72,255,242,3,242,255,72,6,72,255,242,3,242,255,210,4,210,209,210,255,242,2,242,210,210,255,242,4,242,210,210,255,242,87,242,255,114,80,114,255,226,27,226,114,255,146,3,146,145,255,114,18,114,255,194,24,194,114,114,255,226,27,226,114,255,146,3,146,145,255,114,18,114,255,194,24,194,114,114,255,226,27,226,114,255,146,3,146,145,255,114,18,114,255,194,24,194,255,114,80,114,255,0
>e008	a008	ff f2 02 f2 ff d8 06 d8 ff f2 02 f2 ff d8 08 d8
>e018	a018	ff f2 02 f2 ff d8 06 d8 ff f2 09 f2 d2 d2 f2 f2
>e028	a028	ff d2 07 d2 ff f2 11 f2 68 68 ff f2 07 f2 68 68
>e038	a038	ff f2 04 f2 68 68 f2 f2 68 68 ff f2 08 f2 68 68
>e048	a048	ff f2 04 f2 68 68 ff f2 08 f2 d2 d2 f2 f2 d2 d2
>e058	a058	ff f2 04 f2 d2 d2 ff f2 10 f2 e8 e8 ff f2 0e f2
>e068	a068	e8 e8 f2 f2 e8 e8 ff f2 08 f2 e8 e8 ff f2 0f f2
>e078	a078	d2 d2 f2 f2 d2 d2 ff f2 04 f2 d2 d2 ff f2 10 f2
>e088	a088	ff 38 05 38 ff f2 04 f2 ff 38 06 38 ff f2 02 f2
>e098	a098	ff 38 07 38 ff f2 02 f2 ff 38 07 38 ff f2 09 f2
>e0a8	a0a8	d2 d2 f2 f2 ff d2 07 d2 ff f2 11 f2 78 78 ff f2
>e0b8	a0b8	07 f2 78 78 ff f2 0f f2 78 78 f2 f2 78 78 ff f2
>e0c8	a0c8	04 f2 78 78 f2 f2 d2 d2 ff f2 04 f2 d2 d2 f2 f2
>e0d8	a0d8	d2 d2 ff f2 02 f2 d2 d2 ff f2 12 f2 a8 a8 ff f2
>e0e8	a0e8	07 f2 a8 a8 ff f2 08 f2 a8 a8 ff f2 04 f2 a8 a8
>e0f8	a0f8	f2 f2 a8 a8 ff f2 04 f2 a8 a8 f2 f2 d2 d2 ff f2
>e108	a108	04 f2 d2 d2 f2 f2 d2 d2 ff f2 03 f2 d2 d2 ff f2
>e118	a118	11 f2 48 48 ff f2 07 f2 ff 48 08 48 ff f2 02 f2
>e128	a128	ff 48 06 48 ff f2 03 f2 ff 48 06 48 ff f2 03 f2
>e138	a138	ff d2 04 d2 d1 d2 ff f2 02 f2 d2 d2 ff f2 04 f2
>e148	a148	d2 d2 ff f2 57 f2 ff 72 50 72 ff e2 1b e2 72 ff
>e158	a158	92 03 92 91 ff 72 12 72 ff c2 18 c2 72 72 ff e2
>e168	a168	1b e2 72 ff 92 03 92 91 ff 72 12 72 ff c2 18 c2
>e178	a178	72 72 ff e2 1b e2 72 ff 92 03 92 91 ff 72 12 72
>e188	a188	ff c2 18 c2 ff 72 50 72 ff 00
.e192	a192					Header_jchars:
>e192	a192	ff 20 58 20 ff 08 07 08			.byte	255,32,88,32,255,8,7,8,255,32,2,32,255,8,6,8,255,32,2,32,255,8,8,8,255,32,2,32,255,8,6,8,255,32,9,32,252,252,32,32,255,252,7,252,255,32,17,32,8,8,255,32,7,32,8,8,255,32,4,32,8,8,32,32,8,8,255,32,8,32,8,8,255,32,4,32,8,8,255,32,8,32,252,252,32,32,252,252,255,32,4,32,252,252,255,32,16,32,8,8,255,32,14,32,8,8,32,32,8,8,255,32,8,32,8,8,255,32,15,32,252,252,32,32,252,252,255,32,4,32,252,252,255,32,16,32,255,8,5,8,255,32,4,32,255,8,6,8,255,32,2,32,255,8,7,8,255,32,2,32,255,8,7,8,255,32,9,32,252,252,32,32,255,252,7,252,255,32,17,32,8,8,255,32,7,32,8,8,255,32,15,32,8,8,32,32,8,8,255,32,4,32,8,8,32,32,252,252,255,32,4,32,252,252,32,32,252,252,255,32,2,32,252,252,255,32,18,32,8,8,255,32,7,32,8,8,255,32,8,32,8,8,255,32,4,32,8,8,32,32,8,8,255,32,4,32,8,8,32,32,252,252,255,32,4,32,252,252,32,32,252,252,255,32,3,32,252,252,255,32,17,32,8,8,255,32,7,32,255,8,8,8,255,32,2,32,255,8,6,8,255,32,3,32,255,8,6,8,255,32,3,32,255,252,6,252,255,32,2,32,252,252,255,32,4,32,252,252,255,32,87,32,160,255,150,27,150,155,255,150,22,150,155,255,150,24,150,161,130,72,97,114,100,119,97,114,101,255,32,19,32,130,215,50,48,50,51,32,83,116,101,102,97,110,121,32,65,108,108,97,105,114,101,32,32,130,99,50,53,54,102,111,101,110,105,120,46,99,111,109,47,102,50,53,54,45,106,114,255,32,2,32,130,130,77,105,99,114,111,75,101,114,110,101,108,255,32,16,32,130,215,50,48,50,51,32,74,101,115,115,105,101,32,79,98,101,114,114,101,117,116,101,114,130,71,97,100,103,101,116,64,72,97,99,107,119,114,101,110,99,104,76,97,98,115,46,99,111,109,130,130,83,117,112,101,114,66,65,83,73,67,255,32,17,32,130,215,50,48,50,51,32,80,97,117,108,32,82,111,98,115,111,110,255,32,5,32,130,80,97,117,108,64,82,111,98,115,111,110,115,46,111,114,103,46,117,107,255,32,5,32,130,162,255,150,27,150,157,255,150,22,150,157,255,150,24,150,163,255,0
>e19a	a19a	ff 20 02 20 ff 08 06 08 ff 20 02 20 ff 08 08 08
>e1aa	a1aa	ff 20 02 20 ff 08 06 08 ff 20 09 20 fc fc 20 20
>e1ba	a1ba	ff fc 07 fc ff 20 11 20 08 08 ff 20 07 20 08 08
>e1ca	a1ca	ff 20 04 20 08 08 20 20 08 08 ff 20 08 20 08 08
>e1da	a1da	ff 20 04 20 08 08 ff 20 08 20 fc fc 20 20 fc fc
>e1ea	a1ea	ff 20 04 20 fc fc ff 20 10 20 08 08 ff 20 0e 20
>e1fa	a1fa	08 08 20 20 08 08 ff 20 08 20 08 08 ff 20 0f 20
>e20a	a20a	fc fc 20 20 fc fc ff 20 04 20 fc fc ff 20 10 20
>e21a	a21a	ff 08 05 08 ff 20 04 20 ff 08 06 08 ff 20 02 20
>e22a	a22a	ff 08 07 08 ff 20 02 20 ff 08 07 08 ff 20 09 20
>e23a	a23a	fc fc 20 20 ff fc 07 fc ff 20 11 20 08 08 ff 20
>e24a	a24a	07 20 08 08 ff 20 0f 20 08 08 20 20 08 08 ff 20
>e25a	a25a	04 20 08 08 20 20 fc fc ff 20 04 20 fc fc 20 20
>e26a	a26a	fc fc ff 20 02 20 fc fc ff 20 12 20 08 08 ff 20
>e27a	a27a	07 20 08 08 ff 20 08 20 08 08 ff 20 04 20 08 08
>e28a	a28a	20 20 08 08 ff 20 04 20 08 08 20 20 fc fc ff 20
>e29a	a29a	04 20 fc fc 20 20 fc fc ff 20 03 20 fc fc ff 20
>e2aa	a2aa	11 20 08 08 ff 20 07 20 ff 08 08 08 ff 20 02 20
>e2ba	a2ba	ff 08 06 08 ff 20 03 20 ff 08 06 08 ff 20 03 20
>e2ca	a2ca	ff fc 06 fc ff 20 02 20 fc fc ff 20 04 20 fc fc
>e2da	a2da	ff 20 57 20 a0 ff 96 1b 96 9b ff 96 16 96 9b ff
>e2ea	a2ea	96 18 96 a1 82 48 61 72 64 77 61 72 65 ff 20 13
>e2fa	a2fa	20 82 d7 32 30 32 33 20 53 74 65 66 61 6e 79 20
>e30a	a30a	41 6c 6c 61 69 72 65 20 20 82 63 32 35 36 66 6f
>e31a	a31a	65 6e 69 78 2e 63 6f 6d 2f 66 32 35 36 2d 6a 72
>e32a	a32a	ff 20 02 20 82 82 4d 69 63 72 6f 4b 65 72 6e 65
>e33a	a33a	6c ff 20 10 20 82 d7 32 30 32 33 20 4a 65 73 73
>e34a	a34a	69 65 20 4f 62 65 72 72 65 75 74 65 72 82 47 61
>e35a	a35a	64 67 65 74 40 48 61 63 6b 77 72 65 6e 63 68 4c
>e36a	a36a	61 62 73 2e 63 6f 6d 82 82 53 75 70 65 72 42 41
>e37a	a37a	53 49 43 ff 20 11 20 82 d7 32 30 32 33 20 50 61
>e38a	a38a	75 6c 20 52 6f 62 73 6f 6e ff 20 05 20 82 50 61
>e39a	a39a	75 6c 40 52 6f 62 73 6f 6e 73 2e 6f 72 67 2e 75
>e3aa	a3aa	6b ff 20 05 20 82 a2 ff 96 1b 96 9d ff 96 16 96
>e3ba	a3ba	9d ff 96 18 96 a3 ff 00
.e3c2	a3c2					Header_kattrs:
>e3c2	a3c2	ff f2 5e f2 ff d8 07 d8			.byte	255,242,94,242,255,216,7,216,255,242,2,242,255,216,6,216,255,242,2,242,255,216,8,216,255,242,2,242,255,216,6,216,255,242,2,242,210,210,255,242,3,242,210,210,255,242,28,242,104,104,255,242,7,242,104,104,255,242,4,242,104,104,242,242,104,104,255,242,8,242,104,104,255,242,4,242,104,104,242,242,210,210,255,242,2,242,210,210,255,242,29,242,232,232,255,242,14,242,232,232,242,242,232,232,255,242,8,242,232,232,255,242,8,242,210,210,242,242,210,210,255,242,30,242,255,56,5,56,255,242,4,242,255,56,6,56,255,242,2,242,255,56,7,56,255,242,2,242,255,56,7,56,255,242,2,242,255,210,4,210,255,242,31,242,120,120,255,242,7,242,120,120,255,242,15,242,113,113,242,242,113,113,255,242,4,242,113,113,242,242,210,210,242,242,210,210,255,242,30,242,168,168,255,242,7,242,168,168,255,242,8,242,168,168,255,242,4,242,168,168,242,242,168,168,255,242,4,242,168,168,242,242,210,210,255,242,2,242,210,210,255,242,29,242,72,72,255,242,7,242,255,72,8,72,255,242,2,242,255,72,6,72,255,242,3,242,255,72,6,72,255,242,2,242,210,210,255,242,3,242,210,210,255,242,93,242,255,114,80,114,255,226,27,226,114,255,146,4,146,255,114,18,114,255,194,24,194,114,114,255,226,27,226,114,255,146,4,146,255,114,18,114,255,194,24,194,114,114,255,226,27,226,114,255,146,4,146,255,114,18,114,255,194,24,194,255,114,80,114,255,0
>e3ca	a3ca	ff f2 02 f2 ff d8 06 d8 ff f2 02 f2 ff d8 08 d8
>e3da	a3da	ff f2 02 f2 ff d8 06 d8 ff f2 02 f2 d2 d2 ff f2
>e3ea	a3ea	03 f2 d2 d2 ff f2 1c f2 68 68 ff f2 07 f2 68 68
>e3fa	a3fa	ff f2 04 f2 68 68 f2 f2 68 68 ff f2 08 f2 68 68
>e40a	a40a	ff f2 04 f2 68 68 f2 f2 d2 d2 ff f2 02 f2 d2 d2
>e41a	a41a	ff f2 1d f2 e8 e8 ff f2 0e f2 e8 e8 f2 f2 e8 e8
>e42a	a42a	ff f2 08 f2 e8 e8 ff f2 08 f2 d2 d2 f2 f2 d2 d2
>e43a	a43a	ff f2 1e f2 ff 38 05 38 ff f2 04 f2 ff 38 06 38
>e44a	a44a	ff f2 02 f2 ff 38 07 38 ff f2 02 f2 ff 38 07 38
>e45a	a45a	ff f2 02 f2 ff d2 04 d2 ff f2 1f f2 78 78 ff f2
>e46a	a46a	07 f2 78 78 ff f2 0f f2 71 71 f2 f2 71 71 ff f2
>e47a	a47a	04 f2 71 71 f2 f2 d2 d2 f2 f2 d2 d2 ff f2 1e f2
>e48a	a48a	a8 a8 ff f2 07 f2 a8 a8 ff f2 08 f2 a8 a8 ff f2
>e49a	a49a	04 f2 a8 a8 f2 f2 a8 a8 ff f2 04 f2 a8 a8 f2 f2
>e4aa	a4aa	d2 d2 ff f2 02 f2 d2 d2 ff f2 1d f2 48 48 ff f2
>e4ba	a4ba	07 f2 ff 48 08 48 ff f2 02 f2 ff 48 06 48 ff f2
>e4ca	a4ca	03 f2 ff 48 06 48 ff f2 02 f2 d2 d2 ff f2 03 f2
>e4da	a4da	d2 d2 ff f2 5d f2 ff 72 50 72 ff e2 1b e2 72 ff
>e4ea	a4ea	92 04 92 ff 72 12 72 ff c2 18 c2 72 72 ff e2 1b
>e4fa	a4fa	e2 72 ff 92 04 92 ff 72 12 72 ff c2 18 c2 72 72
>e50a	a50a	ff e2 1b e2 72 ff 92 04 92 ff 72 12 72 ff c2 18
>e51a	a51a	c2 ff 72 50 72 ff 00
.e521	a521					Header_kchars:
>e521	a521	ff 20 5e 20 ff 08 07 08			.byte	255,32,94,32,255,8,7,8,255,32,2,32,255,8,6,8,255,32,2,32,255,8,8,8,255,32,2,32,255,8,6,8,255,32,2,32,180,180,255,32,3,32,180,180,255,32,28,32,8,8,255,32,7,32,8,8,255,32,4,32,8,8,32,32,8,8,255,32,8,32,8,8,255,32,4,32,8,8,32,32,180,180,255,32,2,32,180,180,255,32,29,32,8,8,255,32,14,32,8,8,32,32,8,8,255,32,8,32,8,8,255,32,8,32,180,180,32,32,180,180,255,32,30,32,255,8,5,8,255,32,4,32,255,8,6,8,255,32,2,32,255,8,7,8,255,32,2,32,255,8,7,8,255,32,2,32,255,180,4,180,255,32,31,32,8,8,255,32,7,32,8,8,255,32,15,32,8,8,32,32,8,8,255,32,4,32,8,8,32,32,180,180,32,32,180,180,255,32,30,32,8,8,255,32,7,32,8,8,255,32,8,32,8,8,255,32,4,32,8,8,32,32,8,8,255,32,4,32,8,8,32,32,180,180,255,32,2,32,180,180,255,32,29,32,8,8,255,32,7,32,255,8,8,8,255,32,2,32,255,8,6,8,255,32,3,32,255,8,6,8,255,32,2,32,180,180,255,32,3,32,180,180,255,32,93,32,188,255,150,27,150,155,255,150,22,150,155,255,150,24,150,189,130,72,97,114,100,119,97,114,101,255,32,19,32,130,215,50,48,50,51,32,83,116,101,102,97,110,121,32,65,108,108,97,105,114,101,32,32,130,99,50,53,54,102,111,101,110,105,120,46,99,111,109,47,102,50,53,54,45,106,114,255,32,2,32,130,130,77,105,99,114,111,75,101,114,110,101,108,255,32,16,32,130,215,50,48,50,51,32,74,101,115,115,105,101,32,79,98,101,114,114,101,117,116,101,114,130,71,97,100,103,101,116,64,72,97,99,107,119,114,101,110,99,104,76,97,98,115,46,99,111,109,130,130,83,117,112,101,114,66,65,83,73,67,255,32,17,32,130,215,50,48,50,51,32,80,97,117,108,32,82,111,98,115,111,110,255,32,5,32,130,80,97,117,108,64,82,111,98,115,111,110,115,46,111,114,103,46,117,107,255,32,5,32,130,190,255,150,27,150,157,255,150,22,150,157,255,150,24,150,191,255,0
>e529	a529	ff 20 02 20 ff 08 06 08 ff 20 02 20 ff 08 08 08
>e539	a539	ff 20 02 20 ff 08 06 08 ff 20 02 20 b4 b4 ff 20
>e549	a549	03 20 b4 b4 ff 20 1c 20 08 08 ff 20 07 20 08 08
>e559	a559	ff 20 04 20 08 08 20 20 08 08 ff 20 08 20 08 08
>e569	a569	ff 20 04 20 08 08 20 20 b4 b4 ff 20 02 20 b4 b4
>e579	a579	ff 20 1d 20 08 08 ff 20 0e 20 08 08 20 20 08 08
>e589	a589	ff 20 08 20 08 08 ff 20 08 20 b4 b4 20 20 b4 b4
>e599	a599	ff 20 1e 20 ff 08 05 08 ff 20 04 20 ff 08 06 08
>e5a9	a5a9	ff 20 02 20 ff 08 07 08 ff 20 02 20 ff 08 07 08
>e5b9	a5b9	ff 20 02 20 ff b4 04 b4 ff 20 1f 20 08 08 ff 20
>e5c9	a5c9	07 20 08 08 ff 20 0f 20 08 08 20 20 08 08 ff 20
>e5d9	a5d9	04 20 08 08 20 20 b4 b4 20 20 b4 b4 ff 20 1e 20
>e5e9	a5e9	08 08 ff 20 07 20 08 08 ff 20 08 20 08 08 ff 20
>e5f9	a5f9	04 20 08 08 20 20 08 08 ff 20 04 20 08 08 20 20
>e609	a609	b4 b4 ff 20 02 20 b4 b4 ff 20 1d 20 08 08 ff 20
>e619	a619	07 20 ff 08 08 08 ff 20 02 20 ff 08 06 08 ff 20
>e629	a629	03 20 ff 08 06 08 ff 20 02 20 b4 b4 ff 20 03 20
>e639	a639	b4 b4 ff 20 5d 20 bc ff 96 1b 96 9b ff 96 16 96
>e649	a649	9b ff 96 18 96 bd 82 48 61 72 64 77 61 72 65 ff
>e659	a659	20 13 20 82 d7 32 30 32 33 20 53 74 65 66 61 6e
>e669	a669	79 20 41 6c 6c 61 69 72 65 20 20 82 63 32 35 36
>e679	a679	66 6f 65 6e 69 78 2e 63 6f 6d 2f 66 32 35 36 2d
>e689	a689	6a 72 ff 20 02 20 82 82 4d 69 63 72 6f 4b 65 72
>e699	a699	6e 65 6c ff 20 10 20 82 d7 32 30 32 33 20 4a 65
>e6a9	a6a9	73 73 69 65 20 4f 62 65 72 72 65 75 74 65 72 82
>e6b9	a6b9	47 61 64 67 65 74 40 48 61 63 6b 77 72 65 6e 63
>e6c9	a6c9	68 4c 61 62 73 2e 63 6f 6d 82 82 53 75 70 65 72
>e6d9	a6d9	42 41 53 49 43 ff 20 11 20 82 d7 32 30 32 33 20
>e6e9	a6e9	50 61 75 6c 20 52 6f 62 73 6f 6e ff 20 05 20 82
>e6f9	a6f9	50 61 75 6c 40 52 6f 62 73 6f 6e 73 2e 6f 72 67
>e709	a709	2e 75 6b ff 20 05 20 82 be ff 96 1b 96 9d ff 96
>e719	a719	16 96 9d ff 96 18 96 bf ff 00
.e723	a723					Header_Palette:
>e723	a723	00 00 00 00				.dword $000000
>e727	a727	66 66 66 00				.dword $666666
>e72b	a72b	aa 00 00 00				.dword $0000aa
>e72f	a72f	00 aa 00 00				.dword $00aa00
>e733	a733	ea 41 c0 00				.dword $c041ea
>e737	a737	00 48 87 00				.dword $874800
>e73b	a73b	00 9c ff 00				.dword $ff9c00
>e73f	a73f	ff db 57 00				.dword $57dbff
>e743	a743	28 3f 3f 00				.dword $3f3f28
>e747	a747	8a aa aa 00				.dword $aaaa8a
>e74b	a74b	ff 55 55 00				.dword $5555ff
>e74f	a74f	55 ff 55 00				.dword $55ff55
>e753	a753	ed 8d ff 00				.dword $ff8ded
>e757	a757	00 00 ff 00				.dword $ff0000
>e75b	a75b	55 ff ff 00				.dword $ffff55
>e75f	a75f	ff ff ff 00				.dword $ffffff
>e763	a763	ff ff ff 00				.dword $ffffff
>e767	a767	ff ff ff 00				.dword $ffffff

;******  Return to file: _basic.asm


;******  End of listing
