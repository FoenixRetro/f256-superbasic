
; 64tass Turbo Assembler Macro V1.57.2900 listing file
; 64tass -D AUTORUN=0 "-D MONITOR_ADDRESS=\$E000" "-D LOCKOUT_ADDRESS=\$F000" "-D BASIC_ADDRESS=\$38000" "-D SOURCE_ADDRESS=\$28000" "-D SPRITE_ADDRESS=\$30000" -q -b -Wall -c -C -D "HARDWARE=0 $'\x9'$'\x9'$'\x9'$'\x9'$'\x9'$'\x9'" -L output/basic.lst -l output/basic.lbl -Wall -o build/basic.rom _basic.asm
; Sat Dec 31 09:40:02 2022

;Offset	;PC	;Hex		;Monitor	;Source

;******  Command line definitions

=0						AUTORUN=0
=$e000						 MONITOR_ADDRESS=$E000
=$f000						 LOCKOUT_ADDRESS=$F000
=$38000						 BASIC_ADDRESS=$38000
=$28000						 SOURCE_ADDRESS=$28000
=$30000						 SPRITE_ADDRESS=$30000
=0						HARDWARE=0

;******  Processing input file: _basic.asm


;******  Processing file: ./common/aa.system/01common.inc

=$30						ZeroPageMandatory = $30
=$50						ZeroPagePreference = $50
=$400						MemoryStorage = $400
=$2000						BasicStart = $2000
=$8000						BasicEnd = $8000
=$8000						CodeStart = $8000
=$1000						VariableSpace = $1000
=$2000						EndVariableSpace = $2000
=8						MathStackSize = 8
=512						BasicStackSize = 512
=3584						BasicStackBase = $1000-BasicStackSize
=80						MaxLineSize = 80

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/04data.inc

.0030						codePtr:
>0030								.fill 	4
.0034						basicStack:
>0034								.fill 	2
.0036						zTemp0:
>0036								.fill 	2
.0038						zTemp1:
>0038								.fill 	2
.003a						zTemp2:
>003a								.fill 	2
.003c						zsTemp:
>003c								.fill 	2
.003e						zaTemp:
>003e								.fill 	2
=$30						safePtr = codePtr 							; minimise direct tinkering
=$80						NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20						NSBIsReference = $20 						; bit 5 : is a reference
=$10						NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18						NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03						NSBRefMask = $03 							; bits 0,1 : Bytes of reference, 00 = 4,01 = 1,10=2
=$04						NSBIsArray = $04
=$00						NSTInteger = $00 							; base types for bits 3..4
=$08						NSTFloat = $08
=$10						NSTString = $10
=$18						NSTProcedure = $18
.0050						NSStatus:
>0050								.fill 	MathStackSize
.0058						NSMantissa0:
>0058								.fill 	MathStackSize 				; (this is my integer mantissa system)
.0060						NSMantissa1:
>0060								.fill 	MathStackSize
.0068						NSMantissa2:
>0068								.fill 	MathStackSize
.0070						NSMantissa3:
>0070								.fill 	MathStackSize
.0078						NSExponent:
>0078								.fill 	MathStackSize
.0400						identStart:
>0400								.fill 	1
.0401						identTypeStart:
>0401								.fill 	1
.0402						identTypeEnd:
>0402								.fill 	1
.0403						identHash:
>0403								.fill 	1
.0404						identTypeByte:
>0404								.fill 	1	 						; (see tokenising.pdf)
.0405						encodeState:
>0405								.fill 	1
.0406						digitTemp:
>0406								.fill 	1
.0407						decimalCount:
>0407								.fill 	1
.0408						randomSeed:
>0408								.fill 	4
.040c						lowMemPtr:
>040c								.fill 	2
.040e						stringMemory:
>040e								.fill 	2
.0410						stringInitialised:
>0410								.fill 	1
.0411						stringTempPointer:
>0411								.fill 	2
.0413						breakCheck:
>0413								.fill 	1
.0414						decimalPlaces:
>0414								.fill 	1
.0415						dbOffset:
>0415								.fill 	1
.0416						lastParameter:
>0416								.fill 	1
.0417						dataPointer:
>0417								.fill 	5
.041c						inDataStatement:
>041c								.fill 	1
.041d						tbOffset:
>041d								.fill 	1
.041e						AssemblerAddress:
>041e								.fill 	2
.0420						AssemblerControl:
>0420								.fill 	1
.0421						ParamStart:
>0421								.fill 	2
.0423						IsGroup1:
>0423								.fill 	1
.0424						BaseOpcode:
>0424								.fill 	1
.0425						ModeMask:
>0425								.fill 	1
.0426						listIndent:
>0426								.fill 	1
.0427						lcLastCharacter:
>0427								.fill 	1
.0428						isInputFlag:
>0428								.fill 	1
.0429						currentListColour:
>0429								.fill 	1
.042a						tokenOffset:
>042a								.fill 	1
.042b						tokenLineNumber:
>042b								.fill 	2
.042d						tokenBuffer:
>042d								.fill 	253
.052a						lineBuffer:
>052a								.fill 	253
.0627						numberBuffer:
>0627								.fill 	34
.0649						decimalBuffer:
>0649								.fill 	16

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/constants.inc

=$80						AM_ISZP = $80
=$40						AM_ISG1 = $40
=$20						AM_ISG2 = $20
=224						AM_IMMEDIATE = AM_ISZP+AM_ISG1+AM_ISG2+$00
=228						AM_ZEROPAGE = AM_ISZP+AM_ISG1+AM_ISG2+$04
=40						AM_ACC = AM_ISG2+$08
=108						AM_ABS = AM_ISG1+AM_ISG2+$0C
=208						AM_INDY = AM_ISZP+AM_ISG1+$10
=244						AM_ZEROX = AM_ISZP+AM_ISG1+AM_ISG2+$14
=120						AM_ABSY = AM_ISG1+AM_ISG2+$18
=124						AM_ABSX = AM_ISG1+AM_ISG2+$1C
=209						AM_IND = AM_ISZP+AM_ISG1+$11
=$80						AM_ZEROY = AM_ISZP
=$01						AM_INDABS = $01
=$02						AM_INDABSX = $02
=192						AM_INDX = AM_ISZP+AM_ISG1+$00

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/handlers.inc


;******  Return to file: _basic.asm


;******  Processing file: ./tick.task/f256/ticktask.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.inc

=1						ERRID_BREAK = 1
=2						ERRID_SYNTAX = 2
=3						ERRID_DIVZERO = 3
=4						ERRID_RANGE = 4
=5						ERRID_TYPE = 5
=6						ERRID_MEMORY = 6
=7						ERRID_ARGUMENT = 7
=8						ERRID_STOP = 8
=9						ERRID_STRING = 9
=10						ERRID_ASSERT = 10
=11						ERRID_DATA = 11
=12						ERRID_NOTDONE = 12
=13						ERRID_LINE = 13
=14						ERRID_GOSUB = 14
=15						ERRID_REPEAT = 15
=16						ERRID_WHILE = 16
=17						ERRID_FOR = 17
=18						ERRID_STACK = 18
=19						ERRID_STRUCT = 19
=20						ERRID_PROC = 20
=21						ERRID_REDEFINE = 21
=22						ERRID_ARRAYSIZE = 22
=23						ERRID_ARRAYIDX = 23
=24						ERRID_ARRAYDEC = 24
=25						ERRID_NOTFOUND = 25
=26						ERRID_DRIVE = 26
=27						ERRID_DRIVEIO = 27

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst.inc

=$00						KWD_LESSLESS                         = $00; $00 <<
=$01						KWD_LESSEQUAL                        = $01; $01 <=
=$02						KWD_LESSGREATER                      = $02; $02 <>
=$03						KWD_PLINGPLING3                      = $03; $03 !!3
=$04						KWD_GREATERLESS                      = $04; $04 ><
=$05						KWD_GREATEREQUAL                     = $05; $05 >=
=$06						KWD_GREATERGREATER                   = $06; $06 >>
=$07						KWD_PLINGPLING7                      = $07; $07 !!7
=$08						KWD_PLINGPLING8                      = $08; $08 !!8
=$09						KWD_PLINGPLING9                      = $09; $09 !!9
=$0a						KWD_PLINGPLING10                     = $0a; $0a !!10
=$0b						KWD_PLINGPLING11                     = $0b; $0b !!11
=$0c						KWD_PLINGPLING12                     = $0c; $0c !!12
=$0d						KWD_PLINGPLING13                     = $0d; $0d !!13
=$0e						KWD_PLINGPLING14                     = $0e; $0e !!14
=$0f						KWD_PLINGPLING15                     = $0f; $0f !!15
=$10						KWD_AT                               = $10; $10 @
=$11						KWD_PLINGPLING17                     = $11; $11 !!17
=$12						KWD_PLINGPLING18                     = $12; $12 !!18
=$13						KWD_LSQPAREN                         = $13; $13 [
=$14						KWD_BACKSLASH                        = $14; $14 \
=$15						KWD_RSQPAREN                         = $15; $15 ]
=$16						KWD_HAT                              = $16; $16 ^
=$17						KWD_UNDERSCORE                       = $17; $17 _
=$18						KWD_BQUOTE                           = $18; $18 `
=$19						KWD_PLINGPLING25                     = $19; $19 !!25
=$1a						KWD_PLINGPLING26                     = $1a; $1a !!26
=$1b						KWD_LCURLY                           = $1b; $1b {
=$1c						KWD_BAR                              = $1c; $1c |
=$1d						KWD_RCURLY                           = $1d; $1d }
=$1e						KWD_TILDE                            = $1e; $1e ~
=$21						KWD_PLING                            = $21; $21 !
=$22						KWD_DQUOTE                           = $22; $22 "
=$23						KWD_HASH                             = $23; $23 #
=$24						KWD_DOLLAR                           = $24; $24 $
=$25						KWD_PERCENT                          = $25; $25 %
=$26						KWD_AMPERSAND                        = $26; $26 &
=$27						KWD_QUOTE                            = $27; $27 '
=$28						KWD_LPAREN                           = $28; $28 (
=$29						KWD_RPAREN                           = $29; $29 )
=$2a						KWD_STAR                             = $2a; $2a *
=$2b						KWD_PLUS                             = $2b; $2b +
=$2c						KWD_COMMA                            = $2c; $2c ,
=$2d						KWD_MINUS                            = $2d; $2d -
=$2e						KWD_PERIOD                           = $2e; $2e .
=$2f						KWD_SLASH                            = $2f; $2f /
=$30						KWD_0                                = $30; $30 0
=$31						KWD_1                                = $31; $31 1
=$32						KWD_2                                = $32; $32 2
=$33						KWD_3                                = $33; $33 3
=$34						KWD_4                                = $34; $34 4
=$35						KWD_5                                = $35; $35 5
=$36						KWD_6                                = $36; $36 6
=$37						KWD_7                                = $37; $37 7
=$38						KWD_8                                = $38; $38 8
=$39						KWD_9                                = $39; $39 9
=$3a						KWD_COLON                            = $3a; $3a :
=$3b						KWD_SEMICOLON                        = $3b; $3b ;
=$3c						KWD_LESS                             = $3c; $3c <
=$3d						KWD_EQUAL                            = $3d; $3d =
=$3e						KWD_GREATER                          = $3e; $3e >
=$3f						KWD_QMARK                            = $3f; $3f ?
=$83						KWD_ABSLPAREN                        = $83; $83 ABS(
=$84						KWD_ALLOCLPAREN                      = $84; $84 ALLOC(
=$85						KWD_ASCLPAREN                        = $85; $85 ASC(
=$86						KWD_CHRDOLLARLPAREN                  = $86; $86 CHR$(
=$87						KWD_EVENTLPAREN                      = $87; $87 EVENT(
=$88						KWD_FALSE                            = $88; $88 FALSE
=$89						KWD_FRACLPAREN                       = $89; $89 FRAC(
=$8a						KWD_GETDATEDOLLARLPAREN              = $8a; $8a GETDATE$(
=$8b						KWD_GETTIMEDOLLARLPAREN              = $8b; $8b GETTIME$(
=$8c						KWD_HITLPAREN                        = $8c; $8c HIT(
=$8d						KWD_INTLPAREN                        = $8d; $8d INT(
=$8e						KWD_ISVALLPAREN                      = $8e; $8e ISVAL(
=$8f						KWD_JOYBLPAREN                       = $8f; $8f JOYB(
=$90						KWD_JOYXLPAREN                       = $90; $90 JOYX(
=$91						KWD_JOYYLPAREN                       = $91; $91 JOYY(
=$92						KWD_LEFTDOLLARLPAREN                 = $92; $92 LEFT$(
=$93						KWD_LENLPAREN                        = $93; $93 LEN(
=$94						KWD_MAXLPAREN                        = $94; $94 MAX(
=$95						KWD_MIDDOLLARLPAREN                  = $95; $95 MID$(
=$96						KWD_MINLPAREN                        = $96; $96 MIN(
=$97						KWD_NOTLPAREN                        = $97; $97 NOT(
=$98						KWD_PEEKLPAREN                       = $98; $98 PEEK(
=$99						KWD_PEEKDLPAREN                      = $99; $99 PEEKD(
=$9a						KWD_PEEKLLPAREN                      = $9a; $9a PEEKL(
=$9b						KWD_PEEKWLPAREN                      = $9b; $9b PEEKW(
=$9c						KWD_PLAYINGLPAREN                    = $9c; $9c PLAYING(
=$9d						KWD_RANDOMLPAREN                     = $9d; $9d RANDOM(
=$9e						KWD_RIGHTDOLLARLPAREN                = $9e; $9e RIGHT$(
=$9f						KWD_RNDLPAREN                        = $9f; $9f RND(
=$a0						KWD_SGNLPAREN                        = $a0; $a0 SGN(
=$a1						KWD_SPCLPAREN                        = $a1; $a1 SPC(
=$a2						KWD_STRDOLLARLPAREN                  = $a2; $a2 STR$(
=$a3						KWD_TIMERLPAREN                      = $a3; $a3 TIMER(
=$a4						KWD_TRUE                             = $a4; $a4 TRUE
=$a5						KWD_VALLPAREN                        = $a5; $a5 VAL(
=$a6						KWD_FOR                              = $a6; $a6 FOR
=$a7						KWD_IF                               = $a7; $a7 IF
=$a8						KWD_PROC                             = $a8; $a8 PROC
=$a9						KWD_REPEAT                           = $a9; $a9 REPEAT
=$aa						KWD_WHILE                            = $aa; $aa WHILE
=$ab						KWD_ENDIF                            = $ab; $ab ENDIF
=$ac						KWD_ENDPROC                          = $ac; $ac ENDPROC
=$ad						KWD_NEXT                             = $ad; $ad NEXT
=$ae						KWD_THEN                             = $ae; $ae THEN
=$af						KWD_UNTIL                            = $af; $af UNTIL
=$b0						KWD_WEND                             = $b0; $b0 WEND
=$b1						KWD_BY                               = $b1; $b1 BY
=$b2						KWD_CALL                             = $b2; $b2 CALL
=$b3						KWD_CIRCLE                           = $b3; $b3 CIRCLE
=$b4						KWD_CLEAR                            = $b4; $b4 CLEAR
=$b5						KWD_CLS                              = $b5; $b5 CLS
=$b6						KWD_COLOR                            = $b6; $b6 COLOR
=$b7						KWD_COLOUR                           = $b7; $b7 COLOUR
=$b8						KWD_DATA                             = $b8; $b8 DATA
=$b9						KWD_DIM                              = $b9; $b9 DIM
=$ba						KWD_DOWNTO                           = $ba; $ba DOWNTO
=$bb						KWD_ELSE                             = $bb; $bb ELSE
=$bc						KWD_FROM                             = $bc; $bc FROM
=$bd						KWD_GFX                              = $bd; $bd GFX
=$be						KWD_GOSUB                            = $be; $be GOSUB
=$bf						KWD_GOTO                             = $bf; $bf GOTO
=$c0						KWD_HERE                             = $c0; $c0 HERE
=$c1						KWD_IMAGE                            = $c1; $c1 IMAGE
=$c2						KWD_INPUT                            = $c2; $c2 INPUT
=$c3						KWD_LET                              = $c3; $c3 LET
=$c4						KWD_LINE                             = $c4; $c4 LINE
=$c5						KWD_LOCAL                            = $c5; $c5 LOCAL
=$c6						KWD_OFF                              = $c6; $c6 OFF
=$c7						KWD_ON                               = $c7; $c7 ON
=$c8						KWD_OUTLINE                          = $c8; $c8 OUTLINE
=$c9						KWD_PALETTE                          = $c9; $c9 PALETTE
=$ca						KWD_PLOT                             = $ca; $ca PLOT
=$cb						KWD_POKE                             = $cb; $cb POKE
=$cc						KWD_POKED                            = $cc; $cc POKED
=$cd						KWD_POKEL                            = $cd; $cd POKEL
=$ce						KWD_POKEW                            = $ce; $ce POKEW
=$cf						KWD_PRINT                            = $cf; $cf PRINT
=$d0						KWD_READ                             = $d0; $d0 READ
=$d1						KWD_RECT                             = $d1; $d1 RECT
=$d2						KWD_REM                              = $d2; $d2 REM
=$d3						KWD_RETURN                           = $d3; $d3 RETURN
=$d4						KWD_SOLID                            = $d4; $d4 SOLID
=$d5						KWD_SOUND                            = $d5; $d5 SOUND
=$d6						KWD_SPRITE                           = $d6; $d6 SPRITE
=$d7						KWD_TEXT                             = $d7; $d7 TEXT
=$d8						KWD_TO                               = $d8; $d8 TO

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst0.inc

=$80						KWC_EOL = $80
=$ff						KWC_STRING = $FF
=$fe						KWC_HEXCONST = $FE
=$a6						KWC_FIRST_STRUCTURE = $a6
=$ab						KWC_FIRST_STRUCTURE_DEC = $ab
=$b0						KWC_LAST_STRUCTURE = $b0
=$83						KWC_FIRST_UNARY = $83
=$a5						KWC_LAST_UNARY = $a5

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/stack.inc

=$e0						STK_GOSUB = $E0
=$d0						STK_FOR = $D0
=$c0						STK_REPEAT = $C0
=$b0						STK_PROC = $B0
=$a0						STK_WHILE = $A0
=$01						STK_LOCALN = $01
=$02						STK_LOCALS = $02

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/00start.asm

.8000		4c 99 80	jmp $8099	Boot:	jmp 	Start

;******  Processing file: ./common/aa.system/../../../modules/_build/_linker.module

=1						PagingEnabled = 1
.8003						EXTPrintCharacter:
.8003		e6 0d		inc $0d			inc 8+5
.8005		20 00 a0	jsr $a000		jsr	Export_EXTPrintCharacter
.8008		08		php			php
.8009		c6 0d		dec $0d			dec 8+5
.800b		28		plp			plp
.800c		60		rts			rts
.800d						EXTInitialise:
.800d		e6 0d		inc $0d			inc 8+5
.800f		20 bb a2	jsr $a2bb		jsr	Export_EXTInitialise
.8012		08		php			php
.8013		c6 0d		dec $0d			dec 8+5
.8015		28		plp			plp
.8016		60		rts			rts
.8017						EXTBreakCheck:
.8017		e6 0d		inc $0d			inc 8+5
.8019		20 1a bc	jsr $bc1a		jsr	Export_EXTBreakCheck
.801c		08		php			php
.801d		c6 0d		dec $0d			dec 8+5
.801f		28		plp			plp
.8020		60		rts			rts
.8021						EXTReadController:
.8021		e6 0d		inc $0d			inc 8+5
.8023		20 1d bc	jsr $bc1d		jsr	Export_EXTReadController
.8026		08		php			php
.8027		c6 0d		dec $0d			dec 8+5
.8029		28		plp			plp
.802a		60		rts			rts
.802b						EXTInputLine:
.802b		e6 0d		inc $0d			inc 8+5
.802d		20 cf a1	jsr $a1cf		jsr	Export_EXTInputLine
.8030		08		php			php
.8031		c6 0d		dec $0d			dec 8+5
.8033		28		plp			plp
.8034		60		rts			rts
.8035						KNLInputSingleCharacter:
.8035		e6 0d		inc $0d			inc 8+5
.8037		20 d9 bb	jsr $bbd9		jsr	Export_KNLInputSingleCharacter
.803a		08		php			php
.803b		c6 0d		dec $0d			dec 8+5
.803d		28		plp			plp
.803e		60		rts			rts
.803f						KNLOpenFileRead:
.803f		e6 0d		inc $0d			inc 8+5
.8041		20 29 bc	jsr $bc29		jsr	Export_KNLOpenFileRead
.8044		08		php			php
.8045		c6 0d		dec $0d			dec 8+5
.8047		28		plp			plp
.8048		60		rts			rts
.8049						KNLReadByteInit:
.8049		e6 0d		inc $0d			inc 8+5
.804b		20 7d bc	jsr $bc7d		jsr	Export_KNLReadByteInit
.804e		08		php			php
.804f		c6 0d		dec $0d			dec 8+5
.8051		28		plp			plp
.8052		60		rts			rts
.8053						KNLReadByte:
.8053		e6 0d		inc $0d			inc 8+5
.8055		20 87 bc	jsr $bc87		jsr	Export_KNLReadByte
.8058		08		php			php
.8059		c6 0d		dec $0d			dec 8+5
.805b		28		plp			plp
.805c		60		rts			rts
.805d						KNLCloseFile:
.805d		e6 0d		inc $0d			inc 8+5
.805f		20 63 bc	jsr $bc63		jsr	Export_KNLCloseFile
.8062		08		php			php
.8063		c6 0d		dec $0d			dec 8+5
.8065		28		plp			plp
.8066		60		rts			rts
.8067						GXGraphicDraw:
.8067		e6 0d		inc $0d			inc 8+5
.8069		20 c0 a7	jsr $a7c0		jsr	Export_GXGraphicDraw
.806c		08		php			php
.806d		c6 0d		dec $0d			dec 8+5
.806f		28		plp			plp
.8070		60		rts			rts
.8071						SNDCommand:
.8071		e6 0d		inc $0d			inc 8+5
.8073		20 4c bb	jsr $bb4c		jsr	Export_SNDCommand
.8076		08		php			php
.8077		c6 0d		dec $0d			dec 8+5
.8079		28		plp			plp
.807a		60		rts			rts
.807b						SNDUpdate:
.807b		e6 0d		inc $0d			inc 8+5
.807d		20 7f bb	jsr $bb7f		jsr	Export_SNDUpdate
.8080		08		php			php
.8081		c6 0d		dec $0d			dec 8+5
.8083		28		plp			plp
.8084		60		rts			rts
.8085						TKListConvertLine:
.8085		e6 0d		inc $0d			inc 8+5
.8087		20 fd b4	jsr $b4fd		jsr	Export_TKListConvertLine
.808a		08		php			php
.808b		c6 0d		dec $0d			dec 8+5
.808d		28		plp			plp
.808e		60		rts			rts
.808f						TKTokeniseLine:
.808f		e6 0d		inc $0d			inc 8+5
.8091		20 91 b7	jsr $b791		jsr	Export_TKTokeniseLine
.8094		08		php			php
.8095		c6 0d		dec $0d			dec 8+5
.8097		28		plp			plp
.8098		60		rts			rts

;******  Return to file: ./common/aa.system/00start.asm

.8099		a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.809b		9a		txs				txs
.809c		a5 00		lda $00				lda 	0  							; turn on editing of MMU LUT
.809e		09 80		ora #$80			ora 	#$80
.80a0		85 00		sta $00				sta 	0
.80a2		20 22 a7	jsr $a722			jsr		UpdateFont 					; update font if between FPGA updates.
.80a5		20 0d 80	jsr $800d			jsr 	EXTInitialise 				; hardware initialise
.80a8		a9 00		lda #$00			lda 	#0 							; graphics system initialise.
.80aa		aa		tax				tax
.80ab		a8		tay				tay
.80ac		20 67 80	jsr $8067			jsr 	GXGraphicDraw
.80af		a9 0f		lda #$0f			lda 	#$0F 						; initialise sound system
.80b1		20 71 80	jsr $8071			jsr 	SNDCommand
.80b4		a2 80		ldx #$80			ldx 	#Prompt >> 8 				; display prompt
.80b6		a9 c4		lda #$c4			lda 	#Prompt & $FF
.80b8		20 56 90	jsr $9056			jsr 	PrintStringXA
.80bb		20 de 8a	jsr $8ade			jsr 	NewProgram 					; erase current program
.80be		4c 0f 84	jmp $840f			jmp 	WarmStart					; make same size.
.80c1		4c 0f 84	jmp $840f			jmp 	WarmStart
.80c4						Prompt:

;******  Processing file: ./common/aa.system/../generated/timestamp.asm

>80c4		41 6c 70 68 61 20 31 39			.text "Alpha 19 built 31-Dec-22. "
>80cc		20 62 75 69 6c 74 20 33 31 2d 44 65 63 2d 32 32
>80dc		2e 20

;******  Return to file: ./common/aa.system/00start.asm

>80de		0d 0d 00					.text 	13,13,0

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/assembler.asm

.80e1						AssembleGroup1:
.80e1		a9 ff		lda #$ff			lda 	#$FF 						; flag for group 1 / mask.
.80e3		8d 25 04	sta $0425			sta 	ModeMask 					; initialise the mode mask - all for all
.80e6		80 02		bra $80ea			bra 	AsmGroup12
.80e8						AssembleGroup2:
.80e8		a9 00		lda #$00			lda 	#$00 						; flag for group 2
.80ea						AsmGroup12:
.80ea		8d 23 04	sta $0423			sta 	IsGroup1 					; save the 'group 1' flag
.80ed		68		pla				pla 								; pop the return address to access the information following.
.80ee		fa		plx				plx
.80ef		20 76 81	jsr $8176			jsr 	AccessParameters 			; get opcode and save as base
.80f2		8d 24 04	sta $0424			sta 	BaseOpcode
.80f5		ad 23 04	lda $0423			lda 	IsGroup1 					; skip if group 1 as we don't have a complex mask.
.80f8		d0 08		bne $8102			bne 	_AG12HaveMask
.80fa		a9 02		lda #$02			lda 	#2 							; if group 2 the second parameter is the mask
.80fc		20 7e 81	jsr $817e			jsr 	GetParameter		 		; e.g. which modes are supported for this operand
.80ff		8d 25 04	sta $0425			sta 	ModeMask
.8102						_AG12HaveMask:
.8102		20 b2 82	jsr $82b2			jsr 	TypeAndCalculateOperand 	; get zero page type
.8105		da		phx				phx 								; save found address mode
.8106		20 e2 81	jsr $81e2			jsr 	AssembleModeX
.8109		fa		plx				plx  								; restore address mode
.810a		b0 0b		bcs $8117			bcs 	_AG12Exit
.810c		20 18 81	jsr $8118			jsr 	PromoteToAbsolute  			; promote ZP to ABS and try that
.810f		20 e2 81	jsr $81e2			jsr 	AssembleModeX
.8112		b0 03		bcs $8117			bcs 	_AG12Exit
.8114		4c c6 a0	jmp $a0c6			jmp 	SyntaxError 				; can't do either, so must be wrong mode/operand.
.8117						_AG12Exit:
.8117		60		rts				rts
.8118						PromoteToAbsolute:
.8118		a9 6c		lda #$6c			lda 	#AM_ABS 					; lda xx
.811a		e0 e4		cpx #$e4			cpx 	#AM_ZEROPAGE
.811c		f0 19		beq $8137			beq 	_PTADo
.811e		a9 7c		lda #$7c			lda 	#AM_ABSX 					; lda xx,X
.8120		e0 f4		cpx #$f4			cpx 	#AM_ZEROX
.8122		f0 13		beq $8137			beq 	_PTADo
.8124		a9 78		lda #$78			lda 	#AM_ABSY 					; lda xx,Y
.8126		e0 80		cpx #$80			cpx 	#AM_ZEROY
.8128		f0 0d		beq $8137			beq 	_PTADo
.812a		a9 01		lda #$01			lda 	#AM_INDABS 					; lda (xx) (jump)
.812c		e0 d1		cpx #$d1			cpx 	#AM_IND
.812e		f0 07		beq $8137			beq 	_PTADo
.8130		a9 02		lda #$02			lda 	#AM_INDABSX 				; lda (xx,x) (jump)
.8132		e0 c0		cpx #$c0			cpx 	#AM_INDX
.8134		f0 01		beq $8137			beq 	_PTADo
.8136		60		rts				rts
.8137						_PTADo:
.8137		aa		tax				tax
.8138		60		rts				rts
.8139						AssembleGroup3:
.8139		68		pla				pla 								; get parameters, which is just the opcode.
.813a		fa		plx				plx
.813b		20 76 81	jsr $8176			jsr 	AccessParameters 			; get and output opcode
.813e		20 8e 81	jsr $818e			jsr 	AssemblerWriteByte
.8141		20 16 83	jsr $8316			jsr 	CalculateOperand 			; get a 16 bit operand
.8144		a5 58		lda $58				lda 	NSMantissa0 				; calculate the offset
.8146		38		sec				sec
.8147		ed 1e 04	sbc $041e			sbc 	AssemblerAddress
.814a		48		pha				pha 								; LSB in A
.814b		a5 60		lda $60				lda 	NSMantissa1
.814d		ed 1f 04	sbc $041f			sbc 	AssemblerAddress+1
.8150		aa		tax				tax 								; MSB in X
.8151		68		pla				pla
.8152		18		clc				clc 								; $80 to easy check $80-$7F, plus 1 for offset error
.8153		69 7f		adc #$7f			adc 	#$7F
.8155		90 01		bcc $8158			bcc 	_AG3NoCarry
.8157		e8		inx				inx
.8158						_AG3NoCarry:
.8158		38		sec				sec 								; fix back and write out anyways.
.8159		e9 80		sbc #$80			sbc 	#$80
.815b		20 8e 81	jsr $818e			jsr 	AssemblerWriteByte
.815e		e0 00		cpx #$00			cpx 	#0 							; was it in range
.8160		f0 0a		beq $816c			beq 	_AG3Exit
.8162		ad 20 04	lda $0420			lda 	AssemblerControl 			; are we allowing bad values ?
.8165		29 01		and #$01			and 	#1
.8167		f0 03		beq $816c			beq 	_AG3Exit
.8169		4c cb a0	jmp $a0cb			jmp 	RangeError 					; no, branch is out of range
.816c						_AG3Exit:
.816c		60		rts				rts
.816d						AssembleGroup4:
.816d		68		pla				pla 								; pop address
.816e		fa		plx				plx
.816f		20 76 81	jsr $8176			jsr 	AccessParameters 			; access and get first
.8172		20 8e 81	jsr $818e			jsr 	AssemblerWriteByte 			; output it.
.8175		60		rts				rts
.8176						AccessParameters:
.8176		8d 21 04	sta $0421			sta 	ParamStart
.8179		8e 22 04	stx $0422			stx 	ParamStart+1
.817c		a9 01		lda #$01			lda 	#1
.817e						GetParameter:
.817e		5a		phy				phy
.817f		a8		tay				tay
.8180		ad 21 04	lda $0421			lda 	ParamStart
.8183		85 36		sta $36				sta 	zTemp0
.8185		ad 22 04	lda $0422			lda 	ParamStart+1
.8188		85 37		sta $37				sta 	zTemp0+1
.818a		b1 36		lda ($36),y			lda 	(zTemp0),y
.818c		7a		ply				ply
.818d		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/aswrite.asm

.818e						AssemblerWriteByte:
.818e		48		pha			pha
.818f		ad 20 04	lda $0420		lda 	AssemblerControl 				; check printing bytes ?
.8192		29 02		and #$02		and 	#2
.8194		f0 1b		beq $81b1		beq 	_AWBNoPrint
.8196		ad 1f 04	lda $041f		lda		AssemblerAddress+1 				; print address
.8199		20 cc 81	jsr $81cc		jsr 	PrintHex
.819c		ad 1e 04	lda $041e		lda		AssemblerAddress
.819f		20 cc 81	jsr $81cc		jsr 	PrintHex
.81a2		a9 20		lda #$20		lda 	#' '
.81a4		20 03 80	jsr $8003		jsr 	EXTPrintCharacter
.81a7		68		pla			pla 									; print byte
.81a8		48		pha			pha
.81a9		20 cc 81	jsr $81cc		jsr 	PrintHex
.81ac		a9 0d		lda #$0d		lda 	#13
.81ae		20 03 80	jsr $8003		jsr 	EXTPrintCharacter
.81b1						_AWBNoPrint:
.81b1		ad 1e 04	lda $041e		lda		AssemblerAddress				; copy address to zTemp0
.81b4		85 36		sta $36			sta 	zTemp0
.81b6		ad 1f 04	lda $041f		lda		AssemblerAddress+1
.81b9		f0 0e		beq $81c9		beq 	_AWBRange
.81bb		85 37		sta $37			sta 	zTemp0+1
.81bd		68		pla			pla 									; write byte out
.81be		92 36		sta ($36)		sta 	(zTemp0)
.81c0		ee 1e 04	inc $041e		inc 	AssemblerAddress 				; bump address
.81c3		d0 03		bne $81c8		bne 	_AWBNoCarry
.81c5		ee 1f 04	inc $041f		inc 	AssemblerAddress+1
.81c8						_AWBNoCarry:
.81c8		60		rts			rts
.81c9						_AWBRange:
.81c9		4c cb a0	jmp $a0cb		jmp 	RangeError
.81cc						PrintHex:
.81cc		48		pha				pha
.81cd		4a		lsr a				lsr 	a
.81ce		4a		lsr a				lsr 	a
.81cf		4a		lsr a				lsr 	a
.81d0		4a		lsr a				lsr 	a
.81d1		20 d5 81	jsr $81d5			jsr 	_PrintNibble
.81d4		68		pla				pla
.81d5						_PrintNibble:
.81d5		29 0f		and #$0f			and 	#15
.81d7		c9 0a		cmp #$0a			cmp 	#10
.81d9		90 02		bcc $81dd			bcc 	_NoShift
.81db		69 06		adc #$06			adc 	#6
.81dd						_NoShift:
.81dd		69 30		adc #$30			adc 	#48
.81df		4c 03 80	jmp $8003			jmp 	EXTPrintCharacter

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/instruction.asm

.81e2						AssembleModeX:
.81e2		5a		phy				phy
.81e3		ad 23 04	lda $0423			lda 	IsGroup1
.81e6		f0 17		beq $81ff			beq 	_AMXGroup2
.81e8		8a		txa				txa 							; is it in group # 1
.81e9		29 40		and #$40			and 	#AM_ISG1
.81eb		f0 4d		beq $823a			beq 	_AMXFail 				; no, give up.
.81ed		8a		txa				txa 							; get back.
.81ee		29 1f		and #$1f			and 	#$1F 					; this is now the offset.
.81f0		e0 e0		cpx #$e0			cpx 	#AM_IMMEDIATE 			; if not immediate, we can continue.
.81f2		d0 22		bne $8216			bne 	_AMXHaveInfo
.81f4		ad 24 04	lda $0424			lda 	BaseOpcode 				; cannot store immediate.
.81f7		c9 81		cmp #$81			cmp 	#$81
.81f9		f0 3f		beq $823a			beq 	_AMXFail
.81fb		a9 08		lda #$08			lda 	#8 						; if immediate we use offset 8.
.81fd		80 17		bra $8216			bra 	_AMXHaveInfo 			; odd design decision there.
.81ff						_AMXGroup2:
.81ff		8a		txa				txa 							; is it in group 2 ?
.8200		29 20		and #$20			and 	#AM_ISG2
.8202		f0 36		beq $823a			beq 	_AMXFail 				; no, give up.
.8204		8a		txa				txa 							; get the offset into Y
.8205		29 1f		and #$1f			and 	#$1F
.8207		4a		lsr a				lsr 	a 						; make it 0-7.
.8208		4a		lsr a				lsr  	a
.8209		a8		tay				tay
.820a		ad 25 04	lda $0425			lda 	ModeMask 				; shift the modemask left so you can check it against the requested offset
.820d						_AMXCheckOkay:
.820d		0a		asl a				asl 	a 						; shift modemask left enough times to check legitimate.
.820e		88		dey				dey
.820f		10 fc		bpl $820d			bpl 	_AMXCheckOkay
.8211		90 27		bcc $823a			bcc 	_AMXFail 				; not allowed.
.8213		8a		txa				txa  							; get mask back
.8214		29 1f		and #$1f			and 	#$1F
.8216						_AMXHaveInfo:
.8216		e0 00		cpx #$00			cpx 	#$00 					; does it *require* an 8 bit operand
.8218		10 04		bpl $821e			bpl 	_AMXAnySize 			; checking bit 7, the zero page opcode flag.
.821a		a4 60		ldy $60				ldy 	NSMantissa1 			; fail if it is outside range, e.g. the MSB is set.
.821c		d0 1c		bne $823a			bne 	_AMXFail
.821e						_AMXAnySize:
.821e		18		clc				clc 							; add offset to the base opcode
.821f		6d 24 04	adc $0424			adc 	BaseOpcode
.8222						_AMXOutputCode:
.8222		20 8e 81	jsr $818e			jsr 	AssemblerWriteByte 		; write the opcode out.
.8225		e0 28		cpx #$28			cpx 	#AM_ACC 				; A mode (e.g. ASL)
.8227		f0 0e		beq $8237			beq 	_AMXExit
.8229		a5 58		lda $58				lda 	NSMantissa0 			; write LSB operand
.822b		20 8e 81	jsr $818e			jsr 	AssemblerWriteByte
.822e		e0 00		cpx #$00			cpx 	#$00 					; zeropage ?
.8230		30 05		bmi $8237			bmi 	_AMXExit
.8232		a5 60		lda $60				lda 	NSMantissa1 			; write MSB operand
.8234		20 8e 81	jsr $818e			jsr 	AssemblerWriteByte
.8237						_AMXExit:
.8237		7a		ply				ply
.8238		38		sec				sec
.8239		60		rts				rts
.823a						_AMXFail:
.823a		a0 00		ldy #$00			ldy 	#0
.823c						_AMXCheckOddities:
.823c		8a		txa				txa
.823d		d9 64 82	cmp $8264,y			cmp 	ExtraOpcode+2,y 		; match address mode
.8240		d0 15		bne $8257			bne 	_AMXCONext
.8242		b9 62 82	lda $8262,y			lda 	ExtraOpcode+0,y 		; do the base opcodes match
.8245		cd 24 04	cmp $0424			cmp 	BaseOpcode
.8248		d0 0d		bne $8257			bne 	_AMXCONext
.824a		e0 00		cpx #$00			cpx 	#$00 					; requires zero page ?
.824c		10 04		bpl $8252			bpl 	_AMXCONotZero
.824e		a5 60		lda $60				lda 	NSMantissa1
.8250		d0 05		bne $8257			bne 	_AMXCONext
.8252						_AMXCONotZero:
.8252		b9 63 82	lda $8263,y			lda 	ExtraOpcode+1,y 		; get new opcode
.8255		80 cb		bra $8222			bra 	_AMXOutputCode 			; and assemble it
.8257						_AMXCONext:
.8257		c8		iny				iny
.8258		c8		iny				iny
.8259		c8		iny				iny
.825a		b9 62 82	lda $8262,y			lda 	ExtraOpcode+0,y 		; end of table
.825d		d0 dd		bne $823c			bne 	_AMXCheckOddities
.825f						_AMXCOFail:
.825f		7a		ply				ply
.8260		18		clc				clc
.8261		60		rts				rts
.8262						ExtraOpcode:
>8262		40 6c 01					.byte $40,$6c,AM_INDABS 	; jump
>8265		40 7c 02					.byte $40,$7C,AM_INDABSX 	; jump
>8268		a2 be 78					.byte $a2,$BE,AM_ABSY 		; ldx
>826b		a2 b6 80					.byte $a2,$B6,AM_ZEROY 		; ldx
>826e		82 96 80					.byte $82,$96,AM_ZEROY 		; stx
>8271		e2 1a 28					.byte $e2,$1a,AM_ACC 		; inc
>8274		c2 3a 28					.byte $c2,$3a,AM_ACC 		; dec
>8277		20 89 e0					.byte $20,$89,AM_IMMEDIATE 	; bit
>827a		60 9c 6c					.byte $60,$9c,AM_ABS 		; stz
>827d		60 9e 7c					.byte $60,$9e,AM_ABSX 		; stz
>8280		00						.byte $00

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/label.asm

.8281						LabelHere:
.8281		c8		iny				iny 								; skip .
.8282		a2 00		ldx #$00			ldx 	#0 							; get a term
.8284		20 4b 99	jsr $994b			jsr 	EvaluateTerm
.8287		a5 50		lda $50				lda 	NSStatus 					; needs to be an integer reference.
.8289		c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.828b		d0 22		bne $82af			bne 	_ALType 					; otherwise typing error
.828d		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy reference address to zTemp0
.828f		85 36		sta $36				sta 	zTemp0 						; (e.g. where we store the address)
.8291		b5 60		lda $60,x			lda 	NSMantissa1,x
.8293		85 37		sta $37				sta 	zTemp0+1
.8295		5a		phy				phy 								; copy address in (64k)
.8296		a0 01		ldy #$01			ldy 	#1
.8298		ad 1e 04	lda $041e			lda	 	AssemblerAddress
.829b		92 36		sta ($36)			sta 	(zTemp0)
.829d		ad 1f 04	lda $041f			lda	 	AssemblerAddress+1
.82a0		91 36		sta ($36),y			sta 	(zTemp0),y
.82a2		c8		iny				iny
.82a3		a9 00		lda #$00			lda 	#0 							; zero the rest.
.82a5		91 36		sta ($36),y			sta 	(zTemp0),y
.82a7		c8		iny				iny
.82a8		91 36		sta ($36),y			sta 	(zTemp0),y
.82aa		c8		iny				iny
.82ab		91 36		sta ($36),y			sta 	(zTemp0),y
.82ad		7a		ply				ply
.82ae		60		rts				rts
.82af						_ALType:
.82af		4c d0 a0	jmp $a0d0			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/operands.asm

.82b2						TypeAndCalculateOperand:
.82b2		b1 30		lda ($30),y			lda 	(codePtr),y
.82b4		a2 28		ldx #$28			ldx 	#AM_ACC 					; ACC if : or EOL
.82b6		c9 3a		cmp #$3a			cmp 	#KWD_COLON
.82b8		f0 5b		beq $8315			beq 	_TACOExit
.82ba		c9 80		cmp #$80			cmp 	#KWC_EOL
.82bc		f0 57		beq $8315			beq 	_TACOExit
.82be		c8		iny				iny
.82bf		a2 e0		ldx #$e0			ldx 	#AM_IMMEDIATE
.82c1		c9 23		cmp #$23			cmp 	#KWD_HASH 					; if hash, then immediate - constant.
.82c3		f0 51		beq $8316			beq 	CalculateOperand
.82c5		c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; if ( then check for indirection
.82c7		f0 1f		beq $82e8			beq 	_TACOIndirect
.82c9		88		dey				dey 								; undo get of first character
.82ca		20 16 83	jsr $8316			jsr 	CalculateOperand 			; get operand
.82cd		b1 30		lda ($30),y			lda 	(codePtr),y
.82cf		a2 e4		ldx #$e4			ldx 	#AM_ZEROPAGE 				; if not, try zero page (then absolute)
.82d1		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.82d3		d0 40		bne $8315			bne 	_TACOExit
.82d5		c8		iny				iny
.82d6		20 20 83	jsr $8320			jsr 	TACOCheckXY 				; extract X,Y or 0 (neither) from the variable.
.82d9		a2 f4		ldx #$f4			ldx 	#AM_ZEROX 					; check for X
.82db		c9 58		cmp #$58			cmp 	#'X'
.82dd		f0 36		beq $8315			beq 	_TACOExit
.82df		a2 80		ldx #$80			ldx 	#AM_ZEROY 					; check for Y
.82e1		c9 59		cmp #$59			cmp 	#'Y'
.82e3		f0 30		beq $8315			beq 	_TACOExit
.82e5						_TACOSyntax:
.82e5		4c c6 a0	jmp $a0c6			jmp 	SyntaxError
.82e8						_TACOIndirect:
.82e8		20 16 83	jsr $8316			jsr 	CalculateOperand 			; get the operand
.82eb		b1 30		lda ($30),y			lda 	(codePtr),y
.82ed		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if , then it must be ,X)
.82ef		f0 17		beq $8308			beq 	_TACOIndX
.82f1		20 e4 8f	jsr $8fe4			jsr 	CheckRightBracket  			; otherwise must be ) or ),Y
.82f4		b1 30		lda ($30),y			lda 	(codePtr),y
.82f6		a2 d1		ldx #$d1			ldx 	#AM_IND
.82f8		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not comma then exit with (xx)
.82fa		d0 19		bne $8315			bne 	_TACOExit
.82fc		c8		iny				iny
.82fd		20 20 83	jsr $8320			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.8300		c9 59		cmp #$59			cmp 	#'Y' 						; check Y
.8302		d0 e1		bne $82e5			bne 	_TACOSyntax
.8304		a2 d0		ldx #$d0			ldx 	#AM_INDY
.8306		80 0d		bra $8315			bra 	_TACOExit
.8308						_TACOIndX:
.8308		c8		iny				iny
.8309		20 20 83	jsr $8320			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.830c		c9 58		cmp #$58			cmp 	#'X' 						; check X
.830e		d0 d5		bne $82e5			bne 	_TACOSyntax
.8310		20 e4 8f	jsr $8fe4			jsr 	CheckRightBracket			; check )
.8313		a2 c0		ldx #$c0			ldx 	#AM_INDX
.8315						_TACOExit:
.8315		60		rts				rts
.8316						CalculateOperand:
.8316		48		pha				pha
.8317		da		phx				phx
.8318		a2 00		ldx #$00			ldx 	#0 							; get 16 bit integer in Slot 0
.831a		20 c8 9e	jsr $9ec8			jsr 	Evaluate16BitInteger
.831d		fa		plx				plx
.831e		68		pla				pla
.831f		60		rts				rts
.8320						TACOCheckXY:
.8320		b1 30		lda ($30),y			lda 	(codePtr),y
.8322		29 c0		and #$c0			and 	#$C0 						; check it is an identifier reference.
.8324		c9 40		cmp #$40			cmp 	#$40
.8326		d0 21		bne $8349			bne 	_TCXYFail
.8328		b1 30		lda ($30),y			lda 	(codePtr),y
.832a		18		clc				clc
.832b		69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.832d		85 37		sta $37				sta 	zTemp0+1
.832f		c8		iny				iny
.8330		b1 30		lda ($30),y			lda 	(codePtr),y
.8332		c8		iny				iny
.8333		85 36		sta $36				sta 	zTemp0
.8335		5a		phy				phy 								; save position
.8336		a0 02		ldy #$02			ldy 	#2 							; type is integer ?
.8338		b1 36		lda ($36),y			lda 	(zTemp0),y
.833a		d0 0c		bne $8348			bne 	_TCXYPopFail
.833c		a0 08		ldy #$08			ldy 	#8 							; get first character, should have bit 7 set as also last.
.833e		b1 36		lda ($36),y			lda 	(zTemp0),y
.8340		c9 d8		cmp #$d8			cmp 	#'X'+$80 					; should be X or Y
.8342		f0 08		beq $834c			beq 	_TCXYFound
.8344		c9 d9		cmp #$d9			cmp 	#'Y'+$80
.8346		f0 04		beq $834c			beq 	_TCXYFound
.8348						_TCXYPopFail:
.8348		7a		ply				ply
.8349						_TCXYFail:
.8349		a9 00		lda #$00			lda 	#0
.834b		60		rts				rts
.834c						_TCXYFound:
.834c		7a		ply				ply 								; restore position
.834d		29 7f		and #$7f			and 	#$7F 						; throw bit 7
.834f		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/backload.asm

.8350						BackloadProgram:
.8350		20 de 8a	jsr $8ade			jsr 	NewProgram 					; does the actual NEW.
.8353		a2 83		ldx #$83			ldx 	#_BLLoad >> 8
.8355		a9 a7		lda #$a7			lda 	#_BLLoad & $FF
.8357		20 56 90	jsr $9056			jsr 	PrintStringXA
.835a		a9 14		lda #$14			lda 	#SOURCE_ADDRESS >> 13 		; start page
.835c		8d 59 06	sta $0659			sta 	BackLoadPage
.835f		a9 00		lda #$00			lda 	#(($6000) & $FF)
.8361		8d 5a 06	sta $065a			sta 	0+BackLoadPointer
.8364		a9 60		lda #$60			lda 	#(($6000) >> 8)
.8366		8d 5b 06	sta $065b			sta 	1+BackLoadPointer
.8369		a9 ff		lda #$ff			lda 	#$FF
.836b		8d fa ff	sta $fffa			sta 	$FFFA
.836e						_BPLoop:
.836e		a2 ff		ldx #$ff			ldx 	#$FF
.8370		20 bc 83	jsr $83bc			jsr 	BLReadByte 					; read a byte
.8373		c9 00		cmp #$00			cmp 	#0
.8375		f0 29		beq $83a0			beq 	_BPExit 					; if 0 exit
.8377		30 27		bmi $83a0			bmi 	_BPExit 					; if -ve exit
.8379						_BPCopy:
.8379		e8		inx				inx  								; copy byte into the lineBuffer
.837a		9d 2a 05	sta $052a,x			sta 	lineBuffer,x
.837d		9e 2b 05	stz $052b,x			stz 	lineBuffer+1,x
.8380		20 bc 83	jsr $83bc			jsr 	BLReadByte 					; read next byte
.8383		30 0a		bmi $838f			bmi 	_BPEndLine 					; -ve = EOL
.8385		c9 09		cmp #$09			cmp 	#9 							; handle TAB, make it space.
.8387		d0 02		bne $838b			bne 	_BPNotTab
.8389		a9 20		lda #$20			lda 	#' '
.838b						_BPNotTab:
.838b		c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.838d		b0 ea		bcs $8379			bcs 	_BPCopy 					; until a control character, should be 13 received.
.838f						_BPEndLine:
.838f		20 8f 80	jsr $808f			jsr 	TKTokeniseLine 				; tokenise the line.
.8392		ad 2b 04	lda $042b			lda 	tokenLineNumber 			; line number = 0
.8395		0d 2c 04	ora $042c			ora 	tokenLineNumber+1
.8398		f0 d4		beq $836e			beq 	_BPLoop 					; not legal code, blank line or maybe a comment.
.839a		38		sec				sec 								; append not insert
.839b		20 4b a6	jsr $a64b			jsr 	MemoryInsertLine 			; append to current program
.839e		80 ce		bra $836e			bra 	_BPLoop
.83a0						_BPExit:
.83a0		9c fa ff	stz $fffa			stz 	$FFFA
.83a3		20 a5 84	jsr $84a5			jsr 	ClearCommand 				; clear variables etc.
.83a6		60		rts				rts
.83a7						_BLLoad:
>83a7		4c 6f 61 64 69 6e 67 20				.text 	"Loading from Memory",13,0
>83af		66 72 6f 6d 20 4d 65 6d 6f 72 79 0d 00
.83bc						BLReadByte:
.83bc		da		phx				phx
.83bd		a6 0b		ldx $0b				ldx 	8+3 						; save current mapping for $6000 in X
.83bf		ad 59 06	lda $0659			lda 	BackLoadPage	 			; set current page
.83c2		85 0b		sta $0b				sta 	8+3
.83c4		ad 5a 06	lda $065a			lda 	BackLoadPointer 			; copy pointer to zTemp0
.83c7		85 36		sta $36				sta 	zTemp0
.83c9		ad 5b 06	lda $065b			lda 	BackLoadPointer+1
.83cc		85 37		sta $37				sta 	zTemp0+1
.83ce		b2 36		lda ($36)			lda 	(zTemp0) 					; read next byte
.83d0		ee 5a 06	inc $065a			inc 	BackLoadPointer 			; bump pointer
.83d3		d0 0f		bne $83e4			bne 	_BLNoCarry
.83d5		ee 5b 06	inc $065b			inc 	BackLoadPointer+1
.83d8		10 0a		bpl $83e4			bpl 	_BLNoCarry 					; need a new page
.83da		48		pha				pha
.83db		a9 60		lda #$60			lda 	#$60 						; reset pointer
.83dd		8d 5b 06	sta $065b			sta 	BackLoadPointer+1
.83e0		ee 59 06	inc $0659			inc 	BackLoadPage 				; next page from source.
.83e3		68		pla				pla
.83e4						_BLNoCarry:
.83e4		86 0b		stx $0b				stx 	8+3 						; restore mapping, then X.
.83e6		fa		plx				plx
.83e7		c9 00		cmp #$00			cmp 	#0
.83e9		60		rts				rts
.0659						BackLoadPage:
>0659								.fill  	1
.065a						BackLoadPointer:
>065a								.fill 	2

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/editor.asm

.83ea						EditProgramCode:
.83ea		ad 2b 04	lda $042b			lda 	tokenLineNumber 			; try to find the line.
.83ed		ae 2c 04	ldx $042c			ldx 	tokenLineNumber+1
.83f0		20 ef a6	jsr $a6ef			jsr 	MemorySearch
.83f3		90 05		bcc $83fa			bcc 	_EPCNoDelete 				; reached the end : don't delete
.83f5		d0 03		bne $83fa			bne 	_EPCNoDelete 				; found slot but didn't match : no delete
.83f7		20 14 a6	jsr $a614			jsr 	MemoryDeleteLine 			; delete the line
.83fa						_EPCNoDelete:
.83fa		ad 2d 04	lda $042d			lda 	tokenBuffer 				; buffer empty - we just want to delete a line.
.83fd		c9 80		cmp #$80			cmp 	#KWC_EOL
.83ff		f0 0d		beq $840e			beq 	_EPCNoInsert
.8401		ad 2b 04	lda $042b			lda 	tokenLineNumber 			; find the line - it cannot exist as we've just deleted it.
.8404		ae 2c 04	ldx $042c			ldx 	tokenLineNumber+1 			; so this can't fail, it returns some point in the code.
.8407		20 ef a6	jsr $a6ef			jsr 	MemorySearch
.840a		18		clc				clc 								; insert at this point.
.840b		20 4b a6	jsr $a64b			jsr 	MemoryInsertLine 			; insert the line
.840e						_EPCNoInsert:
.840e		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/warmstart.asm

.840f						WarmStart:
.840f		a2 ff		ldx #$ff			ldx 	#$FF
.8411		9a		txs				txs
.8412		a9 89		lda #$89			lda 	#CLICommandLine+$80 		; set console colour whatever the current colour is.
.8414		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.8417		20 2b 80	jsr $802b			jsr 	EXTInputLine 				; get line to lineBuffer
.841a		20 8f 80	jsr $808f			jsr 	TKTokeniseLine 				; tokenise the line
.841d		ad 2b 04	lda $042b			lda 	tokenLineNumber 			; line number <> 0
.8420		0d 2c 04	ora $042c			ora 	tokenLineNumber+1
.8423		d0 17		bne $843c			bne 	_WSEditCode 				; if so,edit code.
.8425		9c 2a 04	stz $042a			stz 	tokenOffset 				; zero the "offset", meaning it only runs one line.
.8428		a9 2a		lda #$2a			lda 	#((tokenOffset) & $FF)
.842a		85 30		sta $30				sta 	codePtr
.842c		a9 04		lda #$04			lda 	#((tokenOffset) >> 8)
.842e		85 31		sta $31				sta 	codePtr+1
.8430		ad 2d 04	lda $042d			lda 	tokenBuffer 				; nothing to run
.8433		c9 80		cmp #$80			cmp 	#KWC_EOL
.8435		f0 d8		beq $840f			beq 	WarmStart
.8437		20 6e 8c	jsr $8c6e			jsr 	RUNCodePointerLine 			; execute that line.
.843a		80 d3		bra $840f			bra 	WarmStart
.843c						_WSEditCode:
.843c		20 ea 83	jsr $83ea			jsr 	EditProgramCode 			; edit the program code
.843f		20 a5 84	jsr $84a5			jsr 	ClearCommand 				; clear all variables etc.
.8442		80 cb		bra $840f			bra 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assemble.asm

.8444						AssembleCommand:
.8444		a2 00		ldx #$00			ldx 	#0
.8446		20 c8 9e	jsr $9ec8			jsr 	Evaluate16BitInteger 		; start address
.8449		a5 58		lda $58				lda 	NSMantissa0
.844b		8d 1e 04	sta $041e			sta 	AssemblerAddress
.844e		a5 60		lda $60				lda 	NSMantissa1
.8450		8d 1f 04	sta $041f			sta 	AssemblerAddress+1
.8453		20 ec 8f	jsr $8fec			jsr 	CheckComma
.8456		20 e3 9e	jsr $9ee3			jsr 	Evaluate8BitInteger 		; options 0-3
.8459		a5 58		lda $58				lda 	NSMantissa0
.845b		8d 20 04	sta $0420			sta 	AssemblerControl
.845e		60		rts				rts
.845f		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assert.asm

.8460						AssertCommand:
.8460		a2 00		ldx #$00			ldx 	#0 							; bottom of stack
.8462		20 b5 9e	jsr $9eb5			jsr 	EvaluateInteger 			; the assert test
.8465		20 6a 9f	jsr $9f6a			jsr 	NSMIsZero 					; exit if result is non zero.
.8468		d0 05		bne $846f			bne 	_ACExit
.846a		a9 0a		lda #$0a		lda	#10
.846c		4c fd 8f	jmp $8ffd		jmp	ErrorHandler
.846f						_ACExit:
.846f		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/call.asm

.8470						CallCommand:
.8470		a2 00		ldx #$00			ldx 	#0 							; get the routine address to level 0
.8472		20 c8 9e	jsr $9ec8			jsr 	Evaluate16BitInteger
.8475						_CCClear
.8475		e8		inx				inx  								; clear 1,2 and 3 (for A X Y)
.8476		20 48 9f	jsr $9f48			jsr 	NSMSetZero 					; these are optional sequentially.
.8479		e0 04		cpx #$04			cpx 	#4
.847b		d0 f8		bne $8475			bne 	_CCClear
.847d		a2 00		ldx #$00			ldx 	#0 							; and keep trying while there are more values.
.847f						_CCCParam:
.847f		b1 30		lda ($30),y			lda 	(codePtr),y
.8481		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8483		d0 09		bne $848e			bne 	_CCCRun6502
.8485		c8		iny				iny 								; skip comma
.8486		e8		inx				inx	 								; next level
.8487		20 e3 9e	jsr $9ee3			jsr 	Evaluate8BitInteger 		; get A/X/Y
.848a		e0 03		cpx #$03			cpx 	#3
.848c		90 f1		bcc $847f			bcc 	_CCCParam 					; done all 3 ?
.848e						_CCCRun6502:
.848e		5a		phy				phy 								; save position
.848f		a5 60		lda $60				lda 	NSMantissa1 				; put address in zTemp0
.8491		85 37		sta $37				sta 	zTemp0+1
.8493		a5 58		lda $58				lda 	NSMantissa0
.8495		85 36		sta $36				sta 	zTemp0
.8497		a5 59		lda $59				lda 	NSMantissa0+1 				; get registers into A X Y
.8499		a6 5a		ldx $5a				ldx 	NSMantissa0+2
.849b		a4 5b		ldy $5b				ldy 	NSMantissa0+3
.849d		20 a2 84	jsr $84a2			jsr 	_CCCZTemp0 					; call zTemp0
.84a0		7a		ply				ply 								; restore position and exit
.84a1		60		rts				rts
.84a2						_CCCZTemp0:
.84a2		6c 36 00	jmp ($0036)			jmp 	(zTemp0)

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/clear.asm

.84a5						ClearCommand:
.84a5		a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.84a7		85 36		sta $36				sta 	0+zTemp0
.84a9		a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.84ab		85 37		sta $37				sta 	1+zTemp0
.84ad						_ClearZeroLoop:
.84ad		b2 36		lda ($36)			lda 	(zTemp0) 					; end of variables if offset is zero.
.84af		f0 24		beq $84d5			beq 	_ClearZeroEnd
.84b1		a0 03		ldy #$03			ldy 	#3 							; erase the variables
.84b3		a9 00		lda #$00			lda 	#0 							; set all the data to zero.
.84b5						_ClearOneVariable:
.84b5		91 36		sta ($36),y			sta 	(zTemp0),y
.84b7		c8		iny				iny
.84b8		c0 08		cpy #$08			cpy 	#8
.84ba		d0 f9		bne $84b5			bne 	_ClearOneVariable
.84bc		a0 02		ldy #$02			ldy 	#2 							; has it been marked procedure
.84be		b1 36		lda ($36),y			lda 	(zTemp0),y
.84c0		c9 18		cmp #$18			cmp 	#NSTProcedure
.84c2		d0 04		bne $84c8			bne 	_ClearNotProcedure
.84c4		a9 04		lda #$04			lda 	#NSTInteger+NSBIsArray 		; if so set it back to an integer array
.84c6		91 36		sta ($36),y			sta 	(zTemp0),y 					; will be fixed on the pre-run scan.
.84c8						_ClearNotProcedure:
.84c8		18		clc				clc 								; go to the next variable
.84c9		b2 36		lda ($36)			lda 	(zTemp0) 					; offset to next, add to zTemp0
.84cb		65 36		adc $36				adc 	zTemp0
.84cd		85 36		sta $36				sta 	zTemp0
.84cf		90 dc		bcc $84ad			bcc 	_ClearZeroLoop
.84d1		e6 37		inc $37				inc 	zTemp0+1
.84d3		80 d8		bra $84ad			bra 	_ClearZeroLoop
.84d5						_ClearZeroEnd:
.84d5		18		clc				clc
.84d6		a5 36		lda $36				lda 	zTemp0
.84d8		69 01		adc #$01			adc 	#1
.84da		8d 0c 04	sta $040c			sta 	lowMemPtr
.84dd		a5 37		lda $37				lda 	zTemp0+1
.84df		69 00		adc #$00			adc 	#0
.84e1		8d 0d 04	sta $040d			sta 	lowMemPtr+1
.84e4		20 a9 b0	jsr $b0a9			jsr 	StackReset
.84e7		20 0f b1	jsr $b10f			jsr 	StringSystemInitialise
.84ea		20 ed 8e	jsr $8eed			jsr 	ProcedureScan
.84ed		20 1d 8c	jsr $8c1d			jsr 	Command_Restore
.84f0		9c 1e 04	stz $041e			stz 	AssemblerAddress
.84f3		9c 1f 04	stz $041f			stz 	AssemblerAddress+1
.84f6		9c 20 04	stz $0420			stz 	AssemblerControl
.84f9		20 37 9b	jsr $9b37			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.84fc		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/cls.asm

.84fd						ClearScreen:
.84fd		5a		phy				phy
.84fe		a9 0c		lda #$0c			lda 	#12 						; char code 12 clears the screen.
.8500		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.8503		7a		ply				ply
.8504		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/data.asm

.8505						Command_Data:
.8505		a9 3a		lda #$3a			lda 	#KWD_COLON 					; advance to colon/EOL, e.g. ignore anything till then.
.8507		a2 80		ldx #$80			ldx 	#KWC_EOL
.8509		20 3f 8f	jsr $8f3f			jsr 	ScanForward
.850c		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/dim.asm

.850d						DimCommand:
.850d		b1 30		lda ($30),y			lda 	(codePtr),y
.850f		29 c0		and #$c0			and 	#$C0
.8511		c9 40		cmp #$40			cmp 	#$40
.8513		d0 7a		bne $858f			bne 	_DCSyntax 				; n o, error.
.8515		b1 30		lda ($30),y			lda 	(codePtr),y
.8517		18		clc				clc
.8518		69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.851a		85 3f		sta $3f				sta 	zaTemp+1
.851c		c8		iny				iny
.851d		b1 30		lda ($30),y			lda 	(codePtr),y
.851f		c8		iny				iny
.8520		85 3e		sta $3e				sta 	zaTemp
.8522		5a		phy				phy
.8523		a0 02		ldy #$02			ldy 	#2 						; read type byte
.8525		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8527		29 18		and #$18			and 	#NSBTypeMask 			; check it's not a procedure
.8529		c9 18		cmp #$18			cmp 	#NSTProcedure
.852b		f0 62		beq $858f			beq 	_DCSyntax
.852d		b1 3e		lda ($3e),y			lda 	(zaTemp),y 				; check it's an array
.852f		29 04		and #$04			and 	#NSBIsArray
.8531		f0 64		beq $8597			beq 	_DCType
.8533		a0 04		ldy #$04			ldy 	#4 						; check not already defined
.8535		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8537		d0 59		bne $8592			bne 	_DCRedefine
.8539		7a		ply				ply
.853a		20 9a 85	jsr $859a			jsr 	_DCGetSize 				; get array size, check it.
.853d		5a		phy				phy
.853e		a0 05		ldy #$05			ldy 	#5 						; store in first array size slot
.8540		91 3e		sta ($3e),y			sta 	(zaTemp),y 				; second will be zero.
.8542		7a		ply				ply 							; is there a second (e.g. ,x)
.8543		b1 30		lda ($30),y			lda 	(codePtr),y
.8545		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8547		d0 0a		bne $8553			bne 	_DCOneDimension
.8549		c8		iny				iny 							; skip comma
.854a		20 9a 85	jsr $859a			jsr 	_DCGetSize 				; get 2nd array size
.854d		5a		phy				phy
.854e		a0 06		ldy #$06			ldy 	#6 						; store in 2nd array size
.8550		91 3e		sta ($3e),y			sta 	(zaTemp),y
.8552		7a		ply				ply
.8553						_DCOneDimension:
.8553		5a		phy				phy 							; save position
.8554		a0 05		ldy #$05			ldy 	#5 						; dimensions + 1 in AX (as zero based)
.8556		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8558		aa		tax				tax
.8559		c8		iny				iny
.855a		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.855c		e8		inx				inx 							; bump them.
.855d		1a		inc a				inc 	a
.855e		20 f3 9e	jsr $9ef3			jsr 	Multiply8x8 			; work out the total number of elements -> zTemp0
.8561		a5 37		lda $37				lda 	zTemp0+1 				; don't allow more than 8192 elements whatever
.8563		29 e0		and #$e0			and 	#$E0
.8565		d0 23		bne $858a			bne 	_DCSize
.8567		a0 02		ldy #$02			ldy 	#2 						; get base type
.8569		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.856b		20 a8 85	jsr $85a8			jsr 	ScaleByBaseType 		; scale by base type
.856e		a5 36		lda $36				lda 	zTemp0
.8570		a6 37		ldx $37				ldx 	zTemp0+1
.8572		20 f9 9a	jsr $9af9			jsr 	AllocateXABytes 		; allocate memory
.8575		a0 03		ldy #$03			ldy 	#3 						; copy into the address.
.8577		91 3e		sta ($3e),y			sta 	(zaTemp),y
.8579		c8		iny				iny
.857a		8a		txa				txa
.857b		91 3e		sta ($3e),y			sta 	(zaTemp),y
.857d		7a		ply				ply 							; get position back
.857e		20 e4 8f	jsr $8fe4			jsr 	CheckRightBracket 		; check )
.8581		b1 30		lda ($30),y			lda 	(codePtr),y
.8583		c8		iny				iny 							; consume in case
.8584		c9 2c		cmp #$2c			cmp 	#KWD_COMMA		 		; if so do another DIM.
.8586		f0 85		beq $850d			beq 	DimCommand
.8588		88		dey				dey 							; undo consume
.8589		60		rts				rts
.858a						_DCSize:
.858a		a9 16		lda #$16		lda	#22
.858c		4c fd 8f	jmp $8ffd		jmp	ErrorHandler
.858f						_DCSyntax:
.858f		4c c6 a0	jmp $a0c6			jmp 	SyntaxError
.8592						_DCRedefine:
.8592		a9 15		lda #$15		lda	#21
.8594		4c fd 8f	jmp $8ffd		jmp	ErrorHandler
.8597						_DCType:
.8597		4c d0 a0	jmp $a0d0			jmp 	TypeError
.859a						_DCGetSize:
.859a		a2 00		ldx #$00			ldx 	#0 						; get first index.
.859c		20 e3 9e	jsr $9ee3			jsr 	Evaluate8BitInteger 	; get array dimension
.859f		c9 00		cmp #$00			cmp 	#0 						; must be 1-254
.85a1		f0 e7		beq $858a			beq 	_DCSize
.85a3		c9 fe		cmp #$fe			cmp 	#254
.85a5		f0 e3		beq $858a			beq 	_DCSize
.85a7		60		rts				rts
.85a8						ScaleByBaseType:
.85a8		29 10		and #$10			and 	#NSBIsString 			; is it string
.85aa		d0 19		bne $85c5			bne 	_SBBTString
.85ac		a5 37		lda $37				lda 	zTemp0+1 				; push value on stack
.85ae		48		pha				pha
.85af		a5 36		lda $36				lda 	zTemp0
.85b1		48		pha				pha
.85b2		06 36		asl $36				asl 	zTemp0 					; x 2
.85b4		26 37		rol $37				rol 	zTemp0+1
.85b6		06 36		asl $36				asl 	zTemp0 					; x 4
.85b8		26 37		rol $37				rol 	zTemp0+1
.85ba		68		pla				pla 							; add stacked value = x 5
.85bb		65 36		adc $36				adc 	zTemp0
.85bd		85 36		sta $36				sta 	zTemp0
.85bf		68		pla				pla
.85c0		65 37		adc $37				adc 	zTemp0+1
.85c2		85 37		sta $37				sta 	zTemp0+1
.85c4		60		rts				rts
.85c5						_SBBTString:
.85c5		06 36		asl $36				asl 	zTemp0
.85c7		26 37		rol $37				rol 	zTemp0+1
.85c9		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/end.asm

.85ca						EndCommand:
.85ca		4c 0f 84	jmp $840f			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/for.asm

.85cd						ForCommand:
.85cd		a9 d9		lda #$d9			lda 	#STK_FOR+9 					; allocate 18 bytes on the return stack (see above).
.85cf		20 43 b0	jsr $b043			jsr 	StackOpen
.85d2		a2 00		ldx #$00			ldx 	#0
.85d4		20 4b 99	jsr $994b			jsr 	EvaluateTerm
.85d7		b5 50		lda $50,x			lda 	NSStatus,x
.85d9		c9 20		cmp #$20			cmp 	#NSBIsReference+NSTInteger 	; do we have an integer 4 byte reference.
.85db		d0 47		bne $8624			bne		_FCError
.85dd		a9 3d		lda #$3d			lda 	#KWD_EQUAL 					; =
.85df		20 f4 8f	jsr $8ff4			jsr 	CheckNextA
.85e2		e8		inx				inx
.85e3		20 b5 9e	jsr $9eb5			jsr 	EvaluateInteger 			; <from> in +1
.85e6		b1 30		lda ($30),y			lda 	(codePtr),y
.85e8		c8		iny				iny 								; consume it
.85e9		48		pha				pha 								; save on stack for later
.85ea		c9 ba		cmp #$ba			cmp 	#KWD_DOWNTO
.85ec		f0 04		beq $85f2			beq 	_FCNoSyntax
.85ee		c9 d8		cmp #$d8			cmp 	#KWD_TO
.85f0		d0 35		bne $8627			bne 	_FCSyntaxError
.85f2						_FCNoSyntax:
.85f2		e8		inx				inx
.85f3		20 b5 9e	jsr $9eb5			jsr 	EvaluateInteger
.85f6		20 88 b0	jsr $b088			jsr 	STKSaveCodePosition 		; save loop back position
.85f9		68		pla				pla 								; restore DOWNTO or TO
.85fa		5a		phy				phy 								; save Y on the stack
.85fb		49 ba		eor #$ba			eor 	#KWD_DOWNTO 				; 0 if DOWNTO, #0 if TO
.85fd		f0 02		beq $8601			beq 	_FCNotDownTo
.85ff		a9 02		lda #$02			lda 	#2
.8601						_FCNotDownTo:
.8601		3a		dec a				dec 	a 							; 255 if DOWNTO, 1 if TO
.8602		a0 10		ldy #$10			ldy 	#16
.8604		91 34		sta ($34),y			sta 	(basicStack),y 				; copy that out to the Basic Stack.
.8606		a0 06		ldy #$06			ldy 	#6 							; this is the address of the loop variable.
.8608		a5 58		lda $58				lda 	NSMantissa0
.860a		91 34		sta ($34),y			sta 	(basicStack),y
.860c		a5 60		lda $60				lda 	NSMantissa1
.860e		c8		iny				iny
.860f		91 34		sta ($34),y			sta 	(basicStack),y
.8611		a0 08		ldy #$08			ldy 	#8 							; set initial index value
.8613		a2 01		ldx #$01			ldx 	#1
.8615		20 2a 86	jsr $862a			jsr 	FCIntegerToStack
.8618		a0 0c		ldy #$0c			ldy 	#12 						; set the terminal value
.861a		a2 02		ldx #$02			ldx 	#2
.861c		20 2a 86	jsr $862a			jsr 	FCIntegerToStack
.861f		20 45 86	jsr $8645			jsr 	CopyIndexToReference
.8622		7a		ply				ply 								; restore position
.8623		60		rts				rts
.8624						_FCError:
.8624		4c d0 a0	jmp $a0d0			jmp 	TypeError
.8627						_FCSyntaxError:
.8627		4c c6 a0	jmp $a0c6			jmp 	SyntaxError
.862a						FCIntegerToStack:
.862a		34 50		bit $50,x			bit 	NSStatus,x 					; is the value negative
.862c		10 03		bpl $8631			bpl	 	_FCNotNegative
.862e		20 11 9f	jsr $9f11			jsr 	NSMNegateMantissa 			; if so 2's complement the mantissa
.8631						_FCNotNegative:
.8631		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy out to the basic stack
.8633		91 34		sta ($34),y			sta 	(basicStack),y
.8635		c8		iny				iny
.8636		b5 60		lda $60,x			lda 	NSMantissa1,x
.8638		91 34		sta ($34),y			sta 	(basicStack),y
.863a		c8		iny				iny
.863b		b5 68		lda $68,x			lda 	NSMantissa2,x
.863d		91 34		sta ($34),y			sta 	(basicStack),y
.863f		c8		iny				iny
.8640		b5 70		lda $70,x			lda 	NSMantissa3,x
.8642		91 34		sta ($34),y			sta 	(basicStack),y
.8644		60		rts				rts
.8645						CopyIndexToReference:
.8645		5a		phy				phy
.8646		a0 06		ldy #$06			ldy 	#6 							; copy address-8 to write to zTemp0
.8648		38		sec				sec 								; (because we copy from offset 8)
.8649		b1 34		lda ($34),y			lda 	(basicStack),y
.864b		e9 08		sbc #$08			sbc 	#8
.864d		85 36		sta $36				sta 	zTemp0
.864f		c8		iny				iny
.8650		b1 34		lda ($34),y			lda 	(basicStack),y
.8652		e9 00		sbc #$00			sbc 	#0
.8654		85 37		sta $37				sta 	zTemp0+1
.8656		a2 04		ldx #$04			ldx 	#4 							; this is the copy counter/
.8658		a0 0b		ldy #$0b			ldy 	#8+3 		 				; the MSB of the mantissa
.865a		b1 34		lda ($34),y			lda 	(basicStack),y
.865c		0a		asl a				asl 	a 							; into carry
.865d		a0 08		ldy #$08			ldy 	#8 							; where to copy from.
.865f		90 14		bcc $8675			bcc 	_CITRNormal
.8661		38		sec				sec
.8662						_CITRNegative:
.8662		a9 00		lda #$00			lda 	#0
.8664		f1 34		sbc ($34),y			sbc 	(basicStack),y
.8666		91 36		sta ($36),y			sta 	(zTemp0),y
.8668		c8		iny				iny
.8669		ca		dex				dex
.866a		d0 f6		bne $8662			bne 	_CITRNegative
.866c		88		dey				dey 								; look at MSB of mantissa
.866d		b1 36		lda ($36),y			lda 	(zTemp0),y 					; set the MSB as negative packed.
.866f		09 80		ora #$80			ora 	#$80
.8671		91 36		sta ($36),y			sta 	(zTemp0),y
.8673		7a		ply				ply
.8674		60		rts				rts
.8675						_CITRNormal:
.8675		b1 34		lda ($34),y			lda 	(basicStack),y 				; copy without negation.
.8677		91 36		sta ($36),y			sta 	(zTemp0),y
.8679		c8		iny				iny
.867a		ca		dex				dex
.867b		d0 f8		bne $8675			bne 	_CITRNormal
.867d		7a		ply				ply 								; and exit.
.867e		60		rts				rts
.867f						NextCommand:
.867f		a9 d9		lda #$d9			lda 	#STK_FOR+9 					; check FOR is TOS
.8681		a2 11		ldx #$11			ldx 	#ERRID_FOR 					; this error
.8683		20 70 b0	jsr $b070			jsr 	StackCheckFrame
.8686		5a		phy				phy
.8687		a0 10		ldy #$10			ldy 	#16 						; get the step count
.8689		b1 34		lda ($34),y			lda 	(basicStack),y
.868b		85 36		sta $36				sta 	zTemp0 						; this is the sign extend
.868d		30 02		bmi $8691			bmi 	_NCStepNeg
.868f		64 36		stz $36				stz 	zTemp0 						; which is 0 or 255
.8691						_NCStepNeg:
.8691		a0 08		ldy #$08			ldy 	#8 							; offset to bump
.8693		a2 04		ldx #$04			ldx 	#4 							; count to bump
.8695		18		clc				clc
.8696						_NCBump:
.8696		71 34		adc ($34),y			adc 	(basicStack),y 				; add it
.8698		91 34		sta ($34),y			sta 	(basicStack),y
.869a		a5 36		lda $36				lda 	zTemp0 						; get sign extend for next time.
.869c		c8		iny				iny 								; next byte
.869d		ca		dex				dex 								; do four times
.869e		d0 f6		bne $8696			bne 	_NCBump
.86a0		20 45 86	jsr $8645			jsr		CopyIndexToReference		; copy it to the reference variable.
.86a3		a0 10		ldy #$10			ldy 	#16 						; get step count again
.86a5		b1 34		lda ($34),y			lda 	(basicStack),y
.86a7		0a		asl a				asl 	a 							; sign bit to carry
.86a8		a9 0c		lda #$0c			lda 	#12 						; offset of LHS = terminal offset
.86aa		85 38		sta $38				sta 	zTemp1
.86ac		90 02		bcc $86b0			bcc 	_NCCompRev 					; use if step is +ve
.86ae		a9 08		lda #$08			lda 	#8 							; now the LHS = index value
.86b0						_NCCompRev:
.86b0		85 38		sta $38				sta 	zTemp1 						; so zTemp0 is the index for LHS
.86b2		49 04		eor #$04			eor 	#(8^12) 					; and zTemp0+1 is the index for RHS
.86b4		85 39		sta $39				sta 	zTemp1+1
.86b6		a2 04		ldx #$04			ldx 	#4 							; bytes to compare
.86b8		38		sec				sec
.86b9						_NCCompare:
.86b9		a4 38		ldy $38				ldy 	zTemp1 						; do compare using the two indices
.86bb		b1 34		lda ($34),y			lda 	(basicStack),y
.86bd		a4 39		ldy $39				ldy 	zTemp1+1
.86bf		f1 34		sbc ($34),y			sbc 	(basicStack),y
.86c1		e6 38		inc $38				inc 	zTemp1 						; bump the indices (inc,dex do not change C or V)
.86c3		e6 39		inc $39				inc 	zTemp1+1
.86c5		ca		dex				dex 								; do it 4 times.
.86c6		d0 f1		bne $86b9			bne 	_NCCompare
.86c8		50 02		bvc $86cc			bvc 	_NCNoOverflow 				; convert to signed comparison
.86ca		49 80		eor #$80			eor 	#$80
.86cc						_NCNoOverflow:
.86cc		7a		ply				ply 								; restore Y position
.86cd		0a		asl a				asl 	a 							; is bit 7 set.
.86ce		90 04		bcc $86d4			bcc 	_NCLoopBack 				; if no , >= so loop back
.86d0		20 62 b0	jsr $b062			jsr 	StackClose 					; exit the loop
.86d3		60		rts				rts
.86d4						_NCLoopBack:
.86d4		20 99 b0	jsr $b099			jsr 	STKLoadCodePosition 		; loop back
.86d7		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/gosub.asm

.86d8						Command_GOSUB:
.86d8		a2 00		ldx #$00			ldx 	#0
.86da		20 c8 9e	jsr $9ec8			jsr 	Evaluate16BitInteger 		; line number in Stack.0
.86dd		a9 e3		lda #$e3			lda 	#STK_GOSUB+3
.86df		20 43 b0	jsr $b043			jsr 	StackOpen 					; create frame
.86e2		20 88 b0	jsr $b088			jsr 	STKSaveCodePosition 		; save current position
.86e5		4c fb 86	jmp $86fb			jmp 	GotoStackX
.86e8						Command_RETURN:
.86e8		a9 e0		lda #$e0			lda 	#STK_GOSUB 					; check TOS is this
.86ea		a2 0e		ldx #$0e			ldx 	#ERRID_GOSUB 				; this error
.86ec		20 70 b0	jsr $b070			jsr 	StackCheckFrame
.86ef		20 99 b0	jsr $b099			jsr 	STKLoadCodePosition 		; restore code position
.86f2		20 62 b0	jsr $b062			jsr 	StackClose
.86f5		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/goto.asm

.86f6						GotoCommand:
.86f6		a2 00		ldx #$00			ldx 	#0 							; GOTO where
.86f8		20 c8 9e	jsr $9ec8			jsr 	Evaluate16BitInteger
.86fb						GotoStackX:
.86fb		b5 60		lda $60,x			lda  	NSMantissa1,x 				; put line # in XA. I'll keep this even though
.86fd		48		pha				pha 								; it is slightly inefficient, just in cases.
.86fe		b5 58		lda $58,x			lda 	NSMantissa0,x
.8700		fa		plx				plx
.8701		20 ef a6	jsr $a6ef			jsr 	MemorySearch 				; transfer to line number AX.
.8704		90 05		bcc $870b			bcc 	_GotoError 					; not found, off end.
.8706		d0 03		bne $870b			bne 	_GotoError 					; not found exactly
.8708		4c 67 8c	jmp $8c67			jmp 	RunNewLine 					; and go straight to new line code.
.870b						_GotoError:
.870b		a9 0d		lda #$0d		lda	#13
.870d		4c fd 8f	jmp $8ffd		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/if.asm

.8710						IfCommand:
.8710		a2 00		ldx #$00			ldx 	#0 							; Get the if test.
.8712		20 96 9e	jsr $9e96			jsr 	EvaluateNumber
.8715		b1 30		lda ($30),y			lda 	(codePtr),y
.8717		c9 ae		cmp #$ae			cmp 	#KWD_THEN  					; could be THEN <stuff>
.8719		d0 0a		bne $8725			bne 	_IfStructured 				; we still support it.
.871b		c8		iny				iny 								; consume THEN
.871c		20 6a 9f	jsr $9f6a			jsr 	NSMIsZero 					; is it zero
.871f		f0 01		beq $8722			beq 	_IfFail 					; if fail, go to next line
.8721		60		rts				rts 								; if THEN just continue
.8722						_IfFail:
.8722		4c 4f 8c	jmp $8c4f			jmp 	EOLCommand
.8725						_IfStructured:
.8725		20 6a 9f	jsr $9f6a			jsr 	NSMIsZero 					; is it zero
.8728		d0 07		bne $8731			bne 	_IfExit 					; if not, then continue normally.
.872a		a9 bb		lda #$bb			lda 	#KWD_ELSE 					; look for else/endif
.872c		a2 ab		ldx #$ab			ldx 	#KWD_ENDIF
.872e		20 3f 8f	jsr $8f3f			jsr 	ScanForward 				; and run from there
.8731						_IfExit:
.8731		60		rts				rts
.8732						ElseCode:
.8732		a9 ab		lda #$ab			lda 	#KWD_ENDIF 					; else is only run after the if clause succeeds
.8734		aa		tax				tax 								; so just go to the structure exit
.8735		20 3f 8f	jsr $8f3f			jsr 	ScanForward
.8738		60		rts				rts
.8739						EndIf:
.8739		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/inputprint.asm

.873a						Command_Input:
.873a		a9 ff		lda #$ff			lda 	#$FF 						; set input flag
.873c		8d 28 04	sta $0428			sta 	isInputFlag
.873f		80 03		bra $8744			bra 	Command_IP_Main
.8741						Command_Print:
.8741		9c 28 04	stz $0428			stz 	isInputFlag 				; clear input flag
.8744						Command_IP_Main:
.8744		18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.8745						_CPLoop:
.8745		08		php				php 								; save last action flag
.8746		b1 30		lda ($30),y			lda 	(codePtr),y
.8748		c9 80		cmp #$80			cmp  	#KWC_EOL 					; end of line or colon, exit now.
.874a		f0 54		beq $87a0			beq 	_CPExit
.874c		c9 3a		cmp #$3a			cmp 	#KWD_COLON
.874e		f0 50		beq $87a0			beq 	_CPExit
.8750		68		pla				pla 								; throw last action flag
.8751		b1 30		lda ($30),y			lda 	(codePtr),y
.8753		c8		iny				iny
.8754		c9 3b		cmp #$3b			cmp 	#KWD_SEMICOLON				; is it a semicolon
.8756		f0 45		beq $879d			beq 	_CPContinueWithSameLine
.8758		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; comma
.875a		f0 3c		beq $8798			beq 	_CPTab
.875c		c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; apostrophe (new line)
.875e		f0 34		beq $8794			beq 	_CPNewLine
.8760		88		dey				dey 								; undo the get.
.8761		20 ff 94	jsr $94ff			jsr 	EvaluateExpressionAt0 		; evaluate expression at 0.
.8764		b5 50		lda $50,x			lda 	NSStatus,x 					; read the status
.8766		29 20		and #$20			and 	#NSBIsReference 			; is it a reference
.8768		f0 0d		beq $8777			beq 	_CPIsValue 					; no, display it.
.876a		ad 28 04	lda $0428			lda 	isInputFlag 				; if print, dereference and print.
.876d		f0 05		beq $8774			beq 	_CPIsPrint 					; otherwise display.
.876f		20 a9 87	jsr $87a9			jsr 	CIInputValue 				; input a value to the reference
.8772		80 20		bra $8794			bra 	_CPNewLine
.8774						_CPIsPrint:
.8774		20 c4 97	jsr $97c4			jsr 	Dereference 				; dereference if required.
.8777						_CPIsValue:
.8777		b5 50		lda $50,x			lda 	NSStatus,x 					; is it a number
.8779		29 10		and #$10			and 	#NSBIsString
.877b		f0 09		beq $8786			beq 	_CPNumber
.877d		a6 60		ldx $60				ldx 	NSMantissa1 				; string, print the text.
.877f		a5 58		lda $58				lda 	NSMantissa0
.8781		20 0c 88	jsr $880c			jsr 	CPPrintStringXA
.8784		80 be		bra $8744			bra 	Command_IP_Main 			; loop round clearing carry so NL if end
.8786						_CPNumber:
.8786		a9 05		lda #$05			lda 	#5 							; maximum decimals
.8788		20 7d 9d	jsr $9d7d			jsr 	ConvertNumberToString 		; convert to string (in unary str$() function)
.878b		a2 06		ldx #$06			ldx 	#decimalBuffer >> 8
.878d		a9 49		lda #$49			lda 	#decimalBuffer & $FF
.878f		20 0c 88	jsr $880c			jsr 	CPPrintStringXA 			; print it.
.8792		80 b0		bra $8744			bra 	Command_IP_Main				; loop round clearing carry so NL if end
.8794						_CPNewLine:
.8794		a9 0d		lda #$0d			lda 	#13
.8796		80 02		bra $879a			bra 	_CPPrintChar
.8798						_CPTab:
.8798		a9 09		lda #$09			lda 	#9 							; print TAB
.879a						_CPPrintChar:
.879a		20 1f 88	jsr $881f			jsr 	CPPrintVector
.879d						_CPContinueWithSameLine:
.879d		38		sec				sec 								; loop round with carry set, which
.879e		80 a5		bra $8745			bra 	_CPLoop 					; will inhibit final CR
.87a0						_CPExit:
.87a0		28		plp				plp 								; get last action flag
.87a1		b0 05		bcs $87a8			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.87a3		a9 0d		lda #$0d			lda 	#13 						; print new line
.87a5		20 1f 88	jsr $881f			jsr 	CPPrintVector
.87a8						_CPExit2:
.87a8		60		rts				rts
.87a9						CIInputValue:
.87a9		a2 00		ldx #$00			ldx 	#0 							; input a line.
.87ab						_CIInputLine:
.87ab		20 22 88	jsr $8822			jsr 	CPInputVector 				; get key
.87ae		c9 0d		cmp #$0d			cmp 	#13 						; 13 = End
.87b0		f0 1f		beq $87d1			beq 	_CIHaveValue
.87b2		c9 08		cmp #$08			cmp 	#8 							; 8 = BS
.87b4		f0 11		beq $87c7			beq 	_CIBackspace
.87b6		c9 20		cmp #$20			cmp 	#32 						; ignore other control characters
.87b8		90 f1		bcc $87ab			bcc 	_CIInputLine
.87ba		e0 50		cpx #$50			cpx 	#80 						; max length
.87bc		b0 ed		bcs $87ab			bcs 	_CIInputLine
.87be		9d 2a 05	sta $052a,x			sta 	lineBuffer,x
.87c1		e8		inx				inx
.87c2		20 1f 88	jsr $881f			jsr 	CPPrintVector 				; echo it.
.87c5		80 e4		bra $87ab			bra 	_CIInputLine
.87c7						_CIBackspace:
.87c7		e0 00		cpx #$00			cpx 	#0 							; nothing to delete
.87c9		f0 e0		beq $87ab			beq 	_CIInputLine
.87cb		20 1f 88	jsr $881f			jsr 	CPPrintVector 				; echo it.
.87ce		ca		dex				dex
.87cf		80 da		bra $87ab			bra 	_CIInputLine
.87d1						_CIHaveValue:
.87d1		9e 2a 05	stz $052a,x			stz 	lineBuffer,x 				; ASCIIZ string now in line buffer.
.87d4		a5 50		lda $50				lda 	NSStatus 					; was it a string assignment
.87d6		29 10		and #$10			and 	#NSBIsString
.87d8		f0 17		beq $87f1			beq 	_CIAssignNumber 			; assign a number
.87da		a2 01		ldx #$01			ldx 	#1
.87dc		a9 2a		lda #$2a			lda 	#lineBuffer & $FF 			; set up to point to new string
.87de		95 58		sta $58,x			sta 	NSMantissa0,x
.87e0		a9 05		lda #$05			lda 	#lineBuffer >> 8
.87e2		95 60		sta $60,x			sta 	NSMantissa1,x
.87e4		74 68		stz $68,x			stz 	NSMantissa2,x
.87e6		74 70		stz $70,x			stz 	NSMantissa3,x
.87e8		a9 10		lda #$10			lda 	#NSBIsString 				; so it becomes a string value
.87ea		95 50		sta $50,x			sta  	NSStatus,x
.87ec		ca		dex				dex 								; X = 0
.87ed		20 5e 88	jsr $885e			jsr 	AssignVariable
.87f0		60		rts				rts
.87f1						_CIAssignNumber:
.87f1		a9 2a		lda #$2a			lda 	#lineBuffer & $FF 			; set up to point to new string
.87f3		85 36		sta $36				sta 	zTemp0
.87f5		a9 05		lda #$05			lda 	#lineBuffer >> 8
.87f7		85 37		sta $37				sta 	zTemp0+1
.87f9		a2 01		ldx #$01			ldx 	#1 							; put in slot 1
.87fb		20 ff 9c	jsr $9cff			jsr 	ValEvaluateZTemp0 			; use the VAL() code
.87fe		90 07		bcc $8807			bcc 	_CIIsOkay
.8800		a9 3f		lda #$3f			lda 	#"?" 						; error ?
.8802		20 1f 88	jsr $881f			jsr 	CPPrintVector
.8805		80 a2		bra $87a9			bra 	CIInputValue
.8807						_CIIsOkay:
.8807		ca		dex				dex 								; X = 0
.8808		20 5e 88	jsr $885e			jsr 	AssignVariable
.880b		60		rts				rts
.880c						CPPrintStringXA:
.880c		5a		phy				phy
.880d		86 37		stx $37				stx 	zTemp0+1
.880f		85 36		sta $36				sta 	zTemp0
.8811		a0 00		ldy #$00			ldy 	#0
.8813						_PSXALoop:
.8813		b1 36		lda ($36),y			lda 	(zTemp0),y
.8815		f0 06		beq $881d			beq 	_PSXAExit
.8817		20 1f 88	jsr $881f			jsr 	CPPrintVector
.881a		c8		iny				iny
.881b		80 f6		bra $8813			bra 	_PSXALoop
.881d						_PSXAExit:
.881d		7a		ply				ply
.881e		60		rts				rts
.881f						CPPrintVector:
.881f		4c 03 80	jmp $8003			jmp 	EXTPrintCharacter
.8822						CPInputVector:
.8822		4c 35 80	jmp $8035			jmp 	KNLInputSingleCharacter

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/let.asm

.8825						LetCommand:
.8825		a2 00		ldx #$00			ldx 	#0
.8827		b1 30		lda ($30),y			lda 	(codePtr),y
.8829		c9 10		cmp #$10			cmp 	#KWD_AT
.882b		d0 14		bne $8841			bne 	_LCStandard
.882d		c8		iny				iny 								; skip equal
.882e		20 4b 99	jsr $994b			jsr 	EvaluateTerm 				; get a number (the address of the reference)
.8831		20 c4 97	jsr $97c4			jsr 	Dereference 				; dereference it to a value
.8834		b5 50		lda $50,x			lda 	NSStatus,x 					; check integer
.8836		49 20		eor #$20			eor 	#NSBIsReference	 			; toggle reference
.8838		95 50		sta $50,x			sta 	NSStatus,x
.883a		29 20		and #$20			and 	#NSBIsReference 			; if it is now a reference, continue
.883c		d0 0f		bne $884d			bne 	_LCMain
.883e		4c d0 a0	jmp $a0d0			jmp 	TypeError 					; was a reference before.
.8841						_LCStandard:
.8841		ad e9 94	lda $94e9			lda 	PrecedenceLevel+"*"			; precedence > this
.8844		20 03 95	jsr $9503			jsr 	EvaluateExpressionAtPrecedence
.8847		b5 50		lda $50,x			lda 	NSStatus,x 					; is it a reference to an array marked as procedure ?
.8849		c9 38		cmp #$38			cmp		#NSTProcedure+NSBIsReference
.884b		f0 0e		beq $885b			beq 	_LetGoProc 					; it's a procedure call.
.884d						_LCMain:
.884d		a9 3d		lda #$3d			lda 	#"=" 						; check =
.884f		20 f4 8f	jsr $8ff4			jsr 	CheckNextA
.8852		e8		inx				inx 								; RHS
.8853		20 8d 9e	jsr $9e8d			jsr 	EvaluateValue
.8856		ca		dex				dex
.8857		20 5e 88	jsr $885e			jsr 	AssignVariable
.885a		60		rts				rts
.885b						_LetGoProc:
.885b		4c 25 8b	jmp $8b25			jmp 	CallProcedure
.885e						AssignVariable:
.885e		b5 50		lda $50,x			lda 	NSStatus,x 					; check the string/number type bits match
.8860		48		pha				pha 								; save a copy
.8861		55 51		eor $51,x			eor 	NSStatus+1,x
.8863		29 10		and #$10			and 	#NSBIsString
.8865		d0 0b		bne $8872			bne 	_ASError
.8867		68		pla				pla 								; get back
.8868		29 10		and #$10			and 	#NSBIsString 				; check type
.886a		d0 03		bne $886f			bne 	_ASString
.886c		4c 02 97	jmp $9702			jmp 	AssignNumber
.886f						_ASString:
.886f		4c 60 97	jmp $9760			jmp 	AssignString
.8872						_ASError:
.8872		4c d0 a0	jmp $a0d0			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/list.asm

.8875						Command_List:
.8875		9c 26 04	stz $0426			stz 	listIndent 					; reset indent.
.8878		a9 3f		lda #$3f			lda 	#$3F 						; silence at list.
.887a		20 71 80	jsr $8071			jsr 	SNDCommand
.887d		b1 30		lda ($30),y			lda 	(codePtr),y
.887f		29 c0		and #$c0			and 	#$C0 				 		; if so, we are list procedure() which is a seperate block
.8881		c9 40		cmp #$40			cmp 	#$40  						; of code.
.8883		f0 6e		beq $88f3			beq 	_CLListProcedure
.8885		64 5c		stz $5c				stz		NSMantissa0+4				; set the lower (slot 4) to 0 and upper (slot 7) to $FFFF
.8887		64 64		stz $64				stz 	NSMantissa1+4 				; these are the default top and bottom.
.8889		a9 ff		lda #$ff			lda 	#$FF
.888b		85 5f		sta $5f				sta 	NSMantissa0+7
.888d		85 67		sta $67				sta 	NSMantissa1+7
.888f		b1 30		lda ($30),y			lda 	(codePtr),y
.8891		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8893		f0 1a		beq $88af			beq 	_CLSecond
.8895		20 70 89	jsr $8970			jsr 	CLIsDigit 					; if not digit, list all
.8898		b0 20		bcs $88ba			bcs 	_CLStart
.889a		a2 04		ldx #$04			ldx 	#4 							; get 1st range into slot 4
.889c		20 c8 9e	jsr $9ec8			jsr 	Evaluate16BitInteger
.889f		b1 30		lda ($30),y			lda 	(codePtr),y
.88a1		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.88a3		f0 0a		beq $88af			beq 	_CLSecond 					; if so go get it
.88a5		a5 5c		lda $5c				lda 	NSMantissa0+4 				; copy 4->7
.88a7		85 5f		sta $5f				sta 	NSMantissa0+7
.88a9		a5 64		lda $64				lda 	NSMantissa1+4
.88ab		85 67		sta $67				sta 	NSMantissa1+7
.88ad		80 0b		bra $88ba			bra 	_CLStart
.88af						_CLSecond:
.88af		c8		iny				iny 								; consume comma
.88b0		20 70 89	jsr $8970			jsr 	CLIsDigit 					; digit found
.88b3		b0 05		bcs $88ba			bcs 	_CLStart 					; if not, continue listing
.88b5		a2 07		ldx #$07			ldx 	#7 							; load 2nd range into slot 7
.88b7		20 c8 9e	jsr $9ec8			jsr 	Evaluate16BitInteger
.88ba						_CLStart
.88ba		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.88bc		85 30		sta $30				sta 	codePtr
.88be		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.88c0		85 31		sta $31				sta 	codePtr+1
.88c2						_CLLoop:
.88c2		20 17 80	jsr $8017			jsr 	EXTBreakCheck 				; break check here, as we want the option of breaking out of long lists.
.88c5		f0 27		beq $88ee			beq 	_CLBreak
.88c7		b2 30		lda ($30)			lda 	(codePtr)
.88c9		f0 20		beq $88eb			beq 	_CLExit
.88cb		a2 04		ldx #$04			ldx 	#4 							; check range every time, line numbers aren't in order.
.88cd		20 5f 89	jsr $895f			jsr 	CLCompareLineNo
.88d0		90 0c		bcc $88de			bcc 	_CLNext
.88d2		a2 07		ldx #$07			ldx 	#7
.88d4		20 5f 89	jsr $895f			jsr 	CLCompareLineNo
.88d7		f0 02		beq $88db			beq 	_CLDoThisOne
.88d9		b0 03		bcs $88de			bcs 	_CLNext
.88db						_CLDoThisOne:
.88db		20 4c 89	jsr $894c			jsr 	CLListOneLine 				; routine to list the current line.
.88de						_CLNext:
.88de		18		clc				clc
.88df		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.88e1		65 30		adc $30				adc 	codePtr
.88e3		85 30		sta $30				sta 	codePtr
.88e5		90 02		bcc $88e9			bcc 	_CREExit
.88e7		e6 31		inc $31				inc 	codePtr+1 					; carry
.88e9						_CREExit:
.88e9		80 d7		bra $88c2			bra 	_CLLoop
.88eb						_CLExit:
.88eb		4c 0f 84	jmp $840f			jmp 	WarmStart
.88ee						_CLBreak:
.88ee		a9 01		lda #$01		lda	#1
.88f0		4c fd 8f	jmp $8ffd		jmp	ErrorHandler
.88f3						_CLListProcedure:
.88f3		b1 30		lda ($30),y			lda 	(codePtr),y
.88f5		85 38		sta $38				sta 	zTemp1
.88f7		c8		iny				iny
.88f8		b1 30		lda ($30),y			lda 	(codePtr),y
.88fa		85 39		sta $39				sta 	zTemp1+1
.88fc		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.88fe		85 30		sta $30				sta 	codePtr
.8900		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8902		85 31		sta $31				sta 	codePtr+1
.8904						_CLLPSearch:
.8904		b2 30		lda ($30)			lda 	(codePtr)
.8906		c9 00		cmp #$00			cmp 	#0 							; if zero, end
.8908		f0 e1		beq $88eb			beq 	_CLExit
.890a		a0 03		ldy #$03			ldy 	#3 							; check if PROC something
.890c		b1 30		lda ($30),y			lda 	(codePtr),y
.890e		c9 a8		cmp #$a8			cmp 	#KWD_PROC
.8910		d0 0e		bne $8920			bne 	_CLLPNext
.8912		c8		iny				iny 								; check if PROC this.
.8913		b1 30		lda ($30),y			lda 	(codePtr),y
.8915		c5 38		cmp $38				cmp 	zTemp1 						; does it match ?
.8917		d0 07		bne $8920			bne 	_CLLPNext
.8919		c8		iny				iny
.891a		b1 30		lda ($30),y			lda 	(codePtr),y
.891c		c5 39		cmp $39				cmp 	zTemp1+1
.891e		f0 0d		beq $892d			beq 	_CLLPFound
.8920						_CLLPNext:
.8920		18		clc				clc
.8921		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8923		65 30		adc $30				adc 	codePtr
.8925		85 30		sta $30				sta 	codePtr
.8927		90 02		bcc $892b			bcc 	_CREExit
.8929		e6 31		inc $31				inc 	codePtr+1 					; carry
.892b						_CREExit:
.892b		80 d7		bra $8904			bra 	_CLLPSearch
.892d						_CLLPFound:
.892d		b2 30		lda ($30)			lda 	(codePtr)
.892f		f0 ba		beq $88eb			beq 	_CLExit
.8931		a0 03		ldy #$03			ldy 	#3 							; get first keyword
.8933		b1 30		lda ($30),y			lda 	(codePtr),y
.8935		48		pha				pha
.8936		20 4c 89	jsr $894c			jsr 	CLListOneLine 				; list line and go forward
.8939		18		clc				clc
.893a		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.893c		65 30		adc $30				adc 	codePtr
.893e		85 30		sta $30				sta 	codePtr
.8940		90 02		bcc $8944			bcc 	_CREExit
.8942		e6 31		inc $31				inc 	codePtr+1 					; carry
.8944						_CREExit:
.8944		68		pla				pla 								; reached ENDPROC ?
.8945		c9 ac		cmp #$ac			cmp 	#KWD_ENDPROC
.8947		d0 e4		bne $892d			bne 	_CLLPFound
.8949		4c 0f 84	jmp $840f			jmp 	WarmStart
.894c						CLListOneLine:
.894c		20 a2 8f	jsr $8fa2			jsr 	ScanGetCurrentLineStep 		; get indent adjust.
.894f		20 85 80	jsr $8085			jsr 	TKListConvertLine 			; convert line into token Buffer
.8952		a2 04		ldx #$04			ldx 	#(tokenBuffer >> 8) 		; print that line
.8954		a9 2d		lda #$2d			lda 	#(tokenBuffer & $FF)
.8956		20 56 90	jsr $9056			jsr 	PrintStringXA
.8959		a9 0d		lda #$0d			lda 	#13 						; new line
.895b		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.895e		60		rts				rts
.895f						CLCompareLineNo:
.895f		38		sec				sec
.8960		a0 01		ldy #$01			ldy 	#1
.8962		b1 30		lda ($30),y			lda 	(codePtr),y
.8964		f5 58		sbc $58,x			sbc 	NSMantissa0,x
.8966		85 36		sta $36				sta 	zTemp0
.8968		c8		iny				iny
.8969		b1 30		lda ($30),y			lda 	(codePtr),y
.896b		f5 60		sbc $60,x			sbc 	NSMantissa1,x
.896d		05 36		ora $36				ora 	zTemp0
.896f		60		rts				rts
.8970						CLIsDigit:
.8970		b1 30		lda ($30),y			lda 	(codePtr),y
.8972		c9 30		cmp #$30			cmp 	#"0"
.8974		90 03		bcc $8979			bcc	 	_CLIDExitFalse
.8976		c9 3a		cmp #$3a			cmp 	#"9"+1
.8978		60		rts				rts
.8979						_CLIDExitFalse:
.8979		38		sec				sec
.897a		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/load.asm

.897b						Command_Load:
.897b		20 a0 9e	jsr $9ea0			jsr 	EvaluateString 				; file name to load
.897e		a6 37		ldx $37				ldx 	zTemp0+1					; zTemp0 -> XA
.8980		a5 36		lda $36				lda 	zTemp0
.8982		20 3f 80	jsr $803f			jsr 	KNLOpenFileRead 			; open file for reading
.8985		b0 3b		bcs $89c2			bcs 	_CLErrorHandler 			; error, so fail.
.8987		8d 5d 06	sta $065d			sta 	ReadStream 					; save the reading stream.
.898a		20 49 80	jsr $8049			jsr     KNLReadByteInit             ; Init reader with the stream
.898d		20 de 8a	jsr $8ade			jsr 	NewProgram 					; does the actual NEW.
.8990		9c 5c 06	stz $065c			stz 	LoadEOFFlag 				; clear EOF Flag.
.8993						_CLLoop:
.8993		20 c7 89	jsr $89c7			jsr 	LoadReadLine 				; get next line.
.8996		f0 10		beq $89a8			beq 	_CLExit 					; end, exit.
.8998		20 8f 80	jsr $808f			jsr 	TKTokeniseLine 				; tokenise the line.
.899b		ad 2b 04	lda $042b			lda 	tokenLineNumber 			; line number = 0
.899e		0d 2c 04	ora $042c			ora 	tokenLineNumber+1
.89a1		f0 f0		beq $8993			beq 	_CLLoop 					; not legal code, blank line or maybe a comment.
.89a3		20 ea 83	jsr $83ea			jsr 	EditProgramCode 			; do the editing etc.
.89a6		80 eb		bra $8993			bra 	_CLLoop
.89a8						_CLExit:
.89a8		a9 4f		lda #$4f			lda 	#"O"
.89aa		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.89ad		a9 6b		lda #$6b			lda 	#"k"
.89af		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.89b2		a9 0d		lda #$0d			lda 	#13
.89b4		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.89b7		4c 0f 84	jmp $840f			jmp 	WarmStart
.89ba						_CLCloseError:
.89ba		48		pha				pha
.89bb		ad 5d 06	lda $065d			lda 	ReadStream
.89be		20 5d 80	jsr $805d			jsr 	KNLCloseFile
.89c1		68		pla				pla
.89c2						_CLErrorHandler:
.89c2		a9 1a		lda #$1a		lda	#26
.89c4		4c fd 8f	jmp $8ffd		jmp	ErrorHandler
.89c7						LoadReadLine:
.89c7		a2 00		ldx #$00			ldx 	#0 							; look for first character non space/ctl
.89c9		20 e3 89	jsr $89e3			jsr 	LoadReadCharacter
.89cc		f0 14		beq $89e2			beq 	_LRLExit 					; eof ?
.89ce		c9 21		cmp #$21			cmp 	#' '+1 						; space control tab skip
.89d0		90 f5		bcc $89c7			bcc 	LoadReadLine
.89d2						_LRLLoop:
.89d2		9d 2a 05	sta $052a,x			sta 	lineBuffer,x 				; write into line buffer
.89d5		9e 2b 05	stz $052b,x			stz 	lineBuffer+1,x 				; make ASCIIZ
.89d8		e8		inx				inx
.89d9		20 e3 89	jsr $89e3			jsr 	LoadReadCharacter 			; next line
.89dc		c9 20		cmp #$20			cmp 	#32 						; until < space ctrl/eof.
.89de		b0 f2		bcs $89d2			bcs 	_LRLLoop
.89e0		a9 01		lda #$01			lda 	#1 							; return code 1, okay.
.89e2						_LRLExit:
.89e2		60		rts				rts
.89e3						LoadReadCharacter:
.89e3		da		phx				phx
.89e4		5a		phy				phy
.89e5		ad 5c 06	lda $065c			lda 	LoadEOFFlag 				; already done EOF.
.89e8		d0 0c		bne $89f6			bne 	_LRCIsEOF
.89ea		20 53 80	jsr $8053			jsr 	KNLReadByte 				; read a byte
.89ed		90 09		bcc $89f8			bcc		_LRCExit 					; read okay.
.89ef		c9 30		cmp #$30			cmp 	#KERR_EOF 					; if error not EOF it's an actual error.
.89f1		d0 16		bne $8a09			bne 	_LRCFatal
.89f3		ce 5c 06	dec $065c			dec 	LoadEOFFlag
.89f6						_LRCIsEOF:
.89f6		a9 00		lda #$00			lda 	#0
.89f8						_LRCExit:
.89f8		c9 08		cmp #$08			cmp 	#8 							; convert tab to space
.89fa		d0 02		bne $89fe			bne 	_LRCNotTab
.89fc		a9 20		lda #$20			lda 	#' '
.89fe						_LRCNotTab:
.89fe		c9 0a		cmp #$0a			cmp 	#$0A
.8a00		d0 02		bne $8a04			bne 	_LRCNotLF
.8a02		a9 0d		lda #$0d			lda 	#$0D
.8a04						_LRCNotLF:
.8a04		7a		ply				ply
.8a05		fa		plx				plx
.8a06		c9 00		cmp #$00			cmp 	#0 							; set Z flag if EOF.
.8a08		60		rts				rts
.8a09						_LRCFatal:
.8a09		c9 28		cmp #$28			cmp 	#KERR_NOTFOUND
.8a0b		f0 05		beq $8a12			beq 	_LRFNotFound
.8a0d		a9 1b		lda #$1b		lda	#27
.8a0f		4c fd 8f	jmp $8ffd		jmp	ErrorHandler
.8a12						_LRFNotFound:
.8a12		a9 19		lda #$19		lda	#25
.8a14		4c fd 8f	jmp $8ffd		jmp	ErrorHandler
.065c						LoadEOFFlag:
>065c								.fill 	1
.065d						ReadStream:
>065d								.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/local.asm

.8a17						Command_LOCAL:
.8a17		a2 00		ldx #$00			ldx 	#0 							; at level 0
.8a19		20 25 8a	jsr $8a25			jsr 	LocaliseNextTerm 			; convert term to a local.
.8a1c		b1 30		lda ($30),y			lda 	(codePtr),y
.8a1e		c8		iny				iny
.8a1f		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8a21		f0 f4		beq $8a17			beq 	Command_LOCAL 				; if so, localise another variable.
.8a23		88		dey				dey 								; unpick pre-get
.8a24		60		rts				rts
.8a25						LocaliseNextTerm:
.8a25		20 4b 99	jsr $994b			jsr 	EvaluateTerm 				; evaluate the term
.8a28		b5 50		lda $50,x			lda 	NSStatus,x
.8a2a		29 20		and #$20			and 	#NSBIsReference 			; check it is a reference, must be a variable.
.8a2c		f0 5c		beq $8a8a			beq		_LNTError
.8a2e		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy address of variable to zTemp0
.8a30		85 36		sta $36				sta 	zTemp0
.8a32		b5 60		lda $60,x			lda 	NSMantissa1,x
.8a34		85 37		sta $37				sta  	zTemp0+1
.8a36		b5 50		lda $50,x			lda 	NSStatus,x 					; figure out what it is.
.8a38		29 10		and #$10			and 	#NSBIsString
.8a3a		d0 1e		bne $8a5a			bne 	_LNTPushString
.8a3c		5a		phy				phy
.8a3d		a0 00		ldy #$00			ldy 	#0 							; push 0 to 4 inclusive, the number values, on the stack, and zero them as you go.
.8a3f						_LNTPushNumLoop:
.8a3f		b1 36		lda ($36),y			lda		(zTemp0),y
.8a41		20 22 b0	jsr $b022			jsr 	StackPushByte
.8a44		c8		iny				iny
.8a45		c0 05		cpy #$05			cpy 	#5
.8a47		d0 f6		bne $8a3f			bne 	_LNTPushNumLoop
.8a49		a5 36		lda $36				lda 	zTemp0 						; push the actual target address to write on the stack
.8a4b		20 22 b0	jsr $b022			jsr 	StackPushByte
.8a4e		a5 37		lda $37				lda 	zTemp0+1
.8a50		20 22 b0	jsr $b022			jsr 	StackPushByte
.8a53		a9 01		lda #$01			lda 	#STK_LOCALN 				; push local-number marker.
.8a55		20 22 b0	jsr $b022			jsr 	StackPushByte
.8a58		7a		ply				ply
.8a59		60		rts				rts
.8a5a						_LNTPushString:
.8a5a		5a		phy				phy
.8a5b		b2 36		lda ($36)			lda 	(zTemp0) 					; put address of string in zTemp1
.8a5d		85 38		sta $38				sta 	zTemp1
.8a5f		a0 01		ldy #$01			ldy 	#1
.8a61		b1 36		lda ($36),y			lda 	(zTemp0),y
.8a63		85 39		sta $39				sta 	zTemp1+1
.8a65		a0 00		ldy #$00			ldy 	#0 							; output string
.8a67		c9 00		cmp #$00			cmp 	#0 							; if not assigned string
.8a69		f0 0a		beq $8a75			beq 	_LNTStringOut
.8a6b						_LNTPushStrLoop:
.8a6b		b1 38		lda ($38),y			lda 	(zTemp1),y
.8a6d		f0 06		beq $8a75			beq 	_LNTStringOut
.8a6f		20 22 b0	jsr $b022			jsr 	StackPushByte
.8a72		c8		iny				iny
.8a73		80 f6		bra $8a6b			bra 	_LNTPushStrLoop
.8a75						_LNTStringOut:
.8a75		98		tya				tya									; output length (chars written).
.8a76		20 22 b0	jsr $b022			jsr 	StackPushByte
.8a79		b5 58		lda $58,x			lda 	NSMantissa0,x 				; output address of the string record *not* the string itself
.8a7b		20 22 b0	jsr $b022			jsr 	StackPushByte
.8a7e		b5 60		lda $60,x			lda 	NSMantissa1,x
.8a80		20 22 b0	jsr $b022			jsr 	StackPushByte
.8a83		a9 02		lda #$02			lda 	#STK_LOCALS 				; push local-string marker.
.8a85		20 22 b0	jsr $b022			jsr 	StackPushByte
.8a88		7a		ply				ply
.8a89		60		rts				rts
.8a8a						_LNTError:
.8a8a		4c c6 a0	jmp $a0c6			jmp 	SyntaxError
.8a8d						LocalPopValue:
.8a8d		20 3a b0	jsr $b03a			jsr 	StackPopByte
.8a90		c9 01		cmp #$01			cmp 	#STK_LOCALN 				; if not local-N
.8a92		d0 17		bne $8aab			bne 	_LPVString
.8a94		20 3a b0	jsr $b03a			jsr 	StackPopByte 				; address
.8a97		85 37		sta $37				sta 	zTemp0+1
.8a99		20 3a b0	jsr $b03a			jsr 	StackPopByte
.8a9c		85 36		sta $36				sta 	zTemp0
.8a9e		5a		phy				phy
.8a9f		a0 04		ldy #$04			ldy 	#4 							; copy back
.8aa1						_LPVNumberCopy:
.8aa1		20 3a b0	jsr $b03a			jsr 	StackPopByte
.8aa4		91 36		sta ($36),y			sta 	(zTemp0),y
.8aa6		88		dey				dey
.8aa7		10 f8		bpl $8aa1			bpl 	_LPVNumberCopy
.8aa9		7a		ply				ply 								; and complete
.8aaa		60		rts				rts
.8aab						_LPVString:
.8aab		20 3a b0	jsr $b03a			jsr 	StackPopByte 				; address of record copied to zTemp0
.8aae		85 37		sta $37				sta 	zTemp0+1
.8ab0		20 3a b0	jsr $b03a			jsr 	StackPopByte
.8ab3		85 36		sta $36				sta 	zTemp0
.8ab5		5a		phy				phy
.8ab6		b2 36		lda ($36)			lda 	(zTemp0) 					; address to write string to copied to zTemp1
.8ab8		85 38		sta $38				sta 	zTemp1
.8aba		a0 01		ldy #$01			ldy 	#1
.8abc		b1 36		lda ($36),y			lda 	(zTemp0),y
.8abe		85 39		sta $39				sta 	zTemp1+1
.8ac0		20 3a b0	jsr $b03a			jsr 	StackPopByte 				; # chars to get => y
.8ac3		a8		tay				tay
.8ac4		a5 39		lda $39				lda 	zTemp1+1 					; if no target (e.g. was "" originally) exit
.8ac6		f0 0e		beq $8ad6			beq 	_LPVStringCopied
.8ac8		a9 00		lda #$00			lda 	#0 							; NULL on end
.8aca		91 38		sta ($38),y			sta 	(zTemp1),y
.8acc						_LPVStringCopy:
.8acc		88		dey				dey
.8acd		30 07		bmi $8ad6			bmi 	_LPVStringCopied
.8acf		20 3a b0	jsr $b03a			jsr 	StackPopByte
.8ad2		91 38		sta ($38),y			sta 	(zTemp1),y
.8ad4		80 f6		bra $8acc			bra 	_LPVStringCopy
.8ad6						_LPVStringCopied:
.8ad6		fa		plx				plx
.8ad7		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/new.asm

.8ad8						NewCommand:
.8ad8		20 de 8a	jsr $8ade			jsr 	NewProgram 					; does the actual NEW.
.8adb		4c 0f 84	jmp $840f			jmp 	WarmStart 					; and warm starts straight away.
.8ade						NewProgram:
.8ade		20 d1 a6	jsr $a6d1			jsr 	MemoryNew
.8ae1		9c 00 10	stz $1000			stz 	VariableSpace 				; erase all variables.
.8ae4		20 a5 84	jsr $84a5			jsr 	ClearCommand 				; clear everything.
.8ae7		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/poke.asm

.8ae8						PokeBCommand:
.8ae8		a9 01		lda #$01			lda 	#1
.8aea		80 0c		bra $8af8			bra 	PokeCommand
.8aec						PokeWCommand:
.8aec		a9 02		lda #$02			lda 	#2
.8aee		80 08		bra $8af8			bra 	PokeCommand
.8af0						PokeLCommand:
.8af0		a9 03		lda #$03			lda 	#3
.8af2		80 04		bra $8af8			bra 	PokeCommand
.8af4						PokeDCommand:
.8af4		a9 04		lda #$04			lda 	#4
.8af6		80 00		bra $8af8			bra 	PokeCommand
.8af8						PokeCommand:
.8af8		48		pha				pha 								; save count on stack
.8af9		a2 00		ldx #$00			ldx 	#0 							; bottom of stack
.8afb		20 c8 9e	jsr $9ec8			jsr		Evaluate16BitInteger 		; address
.8afe		20 ec 8f	jsr $8fec			jsr 	CheckComma
.8b01		e8		inx				inx
.8b02		20 b5 9e	jsr $9eb5			jsr		EvaluateInteger 			; data
.8b05		a5 58		lda $58				lda 	NSMantissa0 				; copy address
.8b07		85 36		sta $36				sta 	zTemp0
.8b09		a5 60		lda $60				lda 	NSMantissa1
.8b0b		85 37		sta $37				sta 	zTemp0+1
.8b0d		68		pla				pla 								; count -> zTemp1
.8b0e		85 38		sta $38				sta 	zTemp1
.8b10		5a		phy				phy 								; save Y position.
.8b11		a0 00		ldy #$00			ldy 	#0 							; index to write
.8b13		a2 00		ldx #$00			ldx 	#0 							; index to read
.8b15						_PCLoop:
.8b15		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; read byte from mantissa and copy out
.8b17		91 36		sta ($36),y			sta 	(zTemp0),y
.8b19		c8		iny				iny 								; next byte to write
.8b1a		8a		txa				txa 								; next byte to read - stack layout in 04data.inc
.8b1b		18		clc				clc
.8b1c		69 08		adc #$08			adc 	#MathStackSize
.8b1e		aa		tax				tax
.8b1f		c6 38		dec $38				dec 	zTemp1 						; done them all
.8b21		d0 f2		bne $8b15			bne 	_PCLoop
.8b23		7a		ply				ply 								; restore position.
.8b24		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/procedure.asm

=2						ParameterStackPos = 2
.8b25						CallProcedure:
.8b25		a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start storing parameters at 2.
.8b27		b1 30		lda ($30),y			lda 	(codePtr),y
.8b29		c9 29		cmp #$29			cmp 	#KWD_RPAREN
.8b2b		f0 0c		beq $8b39			beq 	_CPEndParam
.8b2d						_CPParamLoop:
.8b2d		20 8d 9e	jsr $9e8d			jsr 	EvaluateValue 				; get parameter onto stack
.8b30		e8		inx				inx 								; bump next stack
.8b31		b1 30		lda ($30),y			lda 	(codePtr),y
.8b33		c8		iny				iny
.8b34		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if comma, go back and try again.
.8b36		f0 f5		beq $8b2d			beq 	_CPParamLoop
.8b38		88		dey				dey 								; unpick.
.8b39						_CPEndParam:
.8b39		8e 16 04	stx $0416			stx 	lastParameter 				; save the last parameters index.
.8b3c		c8		iny				iny									; skip right bracket
.8b3d		a9 b3		lda #$b3			lda 	#STK_PROC+3 				; allocate 6 bytes on the return stack.
.8b3f		20 43 b0	jsr $b043			jsr 	StackOpen
.8b42		20 88 b0	jsr $b088			jsr 	STKSaveCodePosition 		; save loop position
.8b45		a5 58		lda $58				lda 	NSMantissa0 				; copy variable (e.g. procedure) address to zTemp0
.8b47		85 36		sta $36				sta 	zTemp0 						; this is the DATA not the RECORD
.8b49		a5 60		lda $60				lda 	NSMantissa1
.8b4b		85 37		sta $37				sta 	zTemp0+1
.8b4d		a0 01		ldy #$01			ldy 	#1 							; copy code address back.
.8b4f		b2 36		lda ($36)			lda 	(zTemp0)
.8b51		85 30		sta $30				sta 	safePtr
.8b53		b1 36		lda ($36),y			lda 	(zTemp0),y
.8b55		85 31		sta $31				sta 	safePtr+1
.8b57		c8		iny				iny
.8b58		b1 36		lda ($36),y			lda 	(zTemp0),y
.8b5a		85 32		sta $32				sta 	safePtr+2
.8b5c		c8		iny				iny
.8b5d		b1 36		lda ($36),y			lda 	(zTemp0),y
.8b5f		85 33		sta $33				sta 	safePtr+3
.8b61		c8		iny				iny 								; get Y offset -> Y
.8b62		b1 36		lda ($36),y			lda 	(zTemp0),y
.8b64		a8		tay				tay
.8b65		a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start position of parameters
.8b67		ec 16 04	cpx $0416			cpx	 	lastParameter 				; check zero parameters at the start
.8b6a		f0 13		beq $8b7f			beq 	_ParamExit 					; if so, exit.
.8b6c						_ParamExtract:
.8b6c		ca		dex				dex 								; put a local term on the level before
.8b6d		20 25 8a	jsr $8a25			jsr 	LocaliseNextTerm			; also pushes original param value to basic stack
.8b70		20 5e 88	jsr $885e			jsr 	AssignVariable 				; assign stacked value to the variable.
.8b73		e8		inx				inx 								; advance to next parameter to do.
.8b74		e8		inx				inx
.8b75		ec 16 04	cpx $0416			cpx 	lastParameter 				; are we done ?
.8b78		f0 05		beq $8b7f			beq 	_ParamExit
.8b7a		20 ec 8f	jsr $8fec			jsr 	CheckComma 					; comma seperating parameters
.8b7d		80 ed		bra $8b6c			bra 	_ParamExtract
.8b7f						_ParamExit:
.8b7f		20 e4 8f	jsr $8fe4			jsr 	CheckRightBracket 			; check )
.8b82		60		rts				rts 								; and continue from here
.8b83						Command_ENDPROC:
.8b83		a9 b0		lda #$b0			lda 	#STK_PROC 					; check TOS is this
.8b85		a2 14		ldx #$14			ldx 	#ERRID_PROC
.8b87		20 70 b0	jsr $b070			jsr 	StackCheckFrame
.8b8a		20 99 b0	jsr $b099			jsr 	STKLoadCodePosition 		; restore code position
.8b8d		20 62 b0	jsr $b062			jsr 	StackClose
.8b90		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/read.asm

.8b91						Command_Read:
.8b91		a2 00		ldx #$00			ldx 	#0 							; evaluate the term which is the var/array element to assign
.8b93		20 4b 99	jsr $994b			jsr 	EvaluateTerm
.8b96		b5 50		lda $50,x			lda 	NSStatus,x
.8b98		29 20		and #$20			and 	#NSBIsReference				; get status byte on stack, identifies int, float, string.
.8b9a		f0 4f		beq $8beb			beq 	_CRSyntax 					; check reference (bit 0) fail if not a reference.
.8b9c		20 34 8c	jsr $8c34			jsr 	SwapDataCodePtrs 			; swap code and data
.8b9f		ad 1c 04	lda $041c			lda 	inDataStatement 			; if in a data statement, we don't need to search
.8ba2		d0 25		bne $8bc9			bne 	_CRContinueData  			; forward for the next one.
.8ba4		b2 30		lda ($30)			lda 	(codePtr)
.8ba6		f0 1c		beq $8bc4			beq 	_CRNoData
.8ba8						_CRKeepSearching:
.8ba8		a9 b8		lda #$b8			lda 	#KWD_DATA 					; scan for instruction
.8baa		a2 80		ldx #$80			ldx 	#KWC_EOL
.8bac		20 3f 8f	jsr $8f3f			jsr 	ScanForward
.8baf		c9 b8		cmp #$b8			cmp 	#KWD_DATA 					; found data ?
.8bb1		f0 16		beq $8bc9			beq 	_CRHaveData 				; found it
.8bb3		18		clc				clc
.8bb4		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8bb6		65 30		adc $30				adc 	codePtr
.8bb8		85 30		sta $30				sta 	codePtr
.8bba		90 02		bcc $8bbe			bcc 	_CREExit
.8bbc		e6 31		inc $31				inc 	codePtr+1 					; carry
.8bbe						_CREExit:
.8bbe		a0 03		ldy #$03			ldy 	#3 							; start of line.
.8bc0		b2 30		lda ($30)			lda 	(codePtr)
.8bc2		d0 e4		bne $8ba8			bne 	_CRKeepSearching
.8bc4						_CRNoData:
.8bc4		a9 0b		lda #$0b		lda	#11
.8bc6		4c fd 8f	jmp $8ffd		jmp	ErrorHandler
.8bc9						_CRHaveData:
.8bc9						_CRContinueData:
.8bc9		a2 01		ldx #$01			ldx 	#1
.8bcb		20 8d 9e	jsr $9e8d			jsr 	EvaluateValue 				; evaluate value into slot # 1
.8bce		ca		dex				dex
.8bcf		20 5e 88	jsr $885e			jsr		AssignVariable 				; do the assignment
.8bd2		9c 1c 04	stz $041c			stz 	inDataStatement 			; clear in data flag
.8bd5		b1 30		lda ($30),y			lda 	(codePtr),y
.8bd7		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not, end of data statement and exit
.8bd9		d0 04		bne $8bdf			bne 	_CRSwapBack
.8bdb		c8		iny				iny 								; consume comma
.8bdc		ee 1c 04	inc $041c			inc 	inDataStatement 			; set in data statement currently.
.8bdf						_CRSwapBack:
.8bdf		20 34 8c	jsr $8c34			jsr 	SwapDataCodePtrs			; swap them back.
.8be2		b1 30		lda ($30),y			lda 	(codePtr),y
.8be4		c8		iny				iny
.8be5		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8be7		f0 a8		beq $8b91			beq 	Command_Read 				; if so go round again.
.8be9		88		dey				dey 								; unpick get.
.8bea		60		rts				rts
.8beb						_CRSyntax:
.8beb		4c c6 a0	jmp $a0c6			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/rem.asm

.8bee						RemCommand:
.8bee		b1 30		lda ($30),y			lda 	(codePtr),y
.8bf0		c9 ff		cmp #$ff			cmp 	#KWC_STRING
.8bf2		d0 06		bne $8bfa			bne 	_RMExit
.8bf4		c8		iny				iny 								; point to offset
.8bf5		98		tya				tya 								; A = offset position
.8bf6		38		sec				sec 								; add size +1 hence SEC
.8bf7		71 30		adc ($30),y			adc 	(codePtr),y
.8bf9		a8		tay				tay 								; make current position.
.8bfa						_RMExit:
.8bfa		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/repeat.asm

.8bfb						Command_REPEAT:
.8bfb		a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; allocate 6 bytes on the return stack.
.8bfd		20 43 b0	jsr $b043			jsr 	StackOpen
.8c00		20 88 b0	jsr $b088			jsr 	STKSaveCodePosition 		; save loop position
.8c03		60		rts				rts
.8c04						Command_UNTIL:
.8c04		a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; check REPEAT is TOS
.8c06		a2 0f		ldx #$0f			ldx 	#ERRID_REPEAT 				; this error
.8c08		20 70 b0	jsr $b070			jsr 	StackCheckFrame
.8c0b		a2 00		ldx #$00			ldx 	#0
.8c0d		20 96 9e	jsr $9e96			jsr 	EvaluateNumber 				; work out the number
.8c10		20 6a 9f	jsr $9f6a			jsr 	NSMIsZero 					; check if zero
.8c13		f0 04		beq $8c19			beq 	_CULoopBack 				; if so keep looping
.8c15		20 62 b0	jsr $b062			jsr 	StackClose		 			; return
.8c18		60		rts				rts
.8c19						_CULoopBack:
.8c19		20 99 b0	jsr $b099			jsr 	STKLoadCodePosition 		; loop back
.8c1c		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/restore.asm

.8c1d						Command_Restore:
.8c1d		20 34 8c	jsr $8c34			jsr 	SwapDataCodePtrs 			; swap code and data
.8c20		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8c22		85 30		sta $30				sta 	codePtr
.8c24		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8c26		85 31		sta $31				sta 	codePtr+1
.8c28		20 34 8c	jsr $8c34			jsr 	SwapDataCodePtrs 			; put them back
.8c2b		a9 03		lda #$03			lda 	#3 							; start at offset 3, e.g. first instruction of first line.
.8c2d		8d 1b 04	sta $041b			sta 	dataPointer+4   			; (read checks not EOF)
.8c30		9c 1c 04	stz $041c			stz 	inDataStatement 			; not in data statement
.8c33		60		rts				rts
.8c34						SwapDataCodePtrs:
.8c34		da		phx				phx
.8c35		a2 03		ldx #$03			ldx 	#3 							; swap 32 bit code pointer over
.8c37						_SDCPLoop:
.8c37		b5 30		lda $30,x			lda 	safePtr,x
.8c39		48		pha				pha
.8c3a		bd 17 04	lda $0417,x			lda 	dataPointer,x
.8c3d		95 30		sta $30,x			sta 	safePtr,x
.8c3f		68		pla				pla
.8c40		9d 17 04	sta $0417,x			sta 	dataPointer,x
.8c43		ca		dex				dex
.8c44		10 f1		bpl $8c37			bpl 	_SDCPLoop
.8c46		ad 1b 04	lda $041b			lda 	dataPointer+4 				; swap Y position over.
.8c49		8c 1b 04	sty $041b			sty 	dataPointer+4
.8c4c		a8		tay				tay
.8c4d		fa		plx				plx
.8c4e		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/run.asm

.8c4f						EOLCommand:
.8c4f		18		clc				clc
.8c50		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8c52		65 30		adc $30				adc 	codePtr
.8c54		85 30		sta $30				sta 	codePtr
.8c56		90 02		bcc $8c5a			bcc 	_CREExit
.8c58		e6 31		inc $31				inc 	codePtr+1 					; carry
.8c5a						_CREExit:
.8c5a		80 0b		bra $8c67			bra 	RunNewLine
.8c5c						CommandRUN:
.8c5c		20 a5 84	jsr $84a5			jsr 	ClearCommand 				; clear variable/stacks/etc.
.8c5f		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8c61		85 30		sta $30				sta 	codePtr
.8c63		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8c65		85 31		sta $31				sta 	codePtr+1
.8c67						RunNewLine:
.8c67		b2 30		lda ($30)			lda 	(codePtr)
.8c69		f0 7b		beq $8ce6			beq 	CRNoProgram         		; no then END.
.8c6b		a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack
.8c6d		9a		txs				txs
.8c6e						RUNCodePointerLine:
.8c6e		a0 02		ldy #$02			ldy 	#2 							; start of program
.8c70						_CRIncMainLoop:
.8c70		0e 13 04	asl $0413			asl 	breakCheck 					; clears 1 time in 8
.8c73		d0 22		bne $8c97			bne 	_CRNoBreakCheck
.8c75		ce 13 04	dec $0413			dec	 	breakCheck 					; set it back to $FF
.8c78		20 17 80	jsr $8017			jsr 	EXTBreakCheck 				; break check
.8c7b		f0 64		beq $8ce1			beq 	_CRBreak
.8c7d		a5 01		lda $01				lda 	1 							; save I/O 0
.8c7f		48		pha				pha
.8c80		64 01		stz $01				stz 	1 							; access I/O Page 0
.8c82		38		sec				sec 								; calculate timer - LastTick
.8c83		ad 59 d6	lda $d659			lda 	$D659
.8c86		aa		tax				tax 								; saving timer in X
.8c87		ed 5e 06	sbc $065e			sbc 	LastTick
.8c8a		c9 03		cmp #$03			cmp 	#3
.8c8c		90 06		bcc $8c94			bcc 	_NoFireTick 				; if < 3 clocks don't fire.
.8c8e		8e 5e 06	stx $065e			stx 	LastTick 					; update last timer
.8c91		20 73 9f	jsr $9f73			jsr 	TickHandler 							; go do the code.
.8c94						_NoFireTick:
.8c94		68		pla				pla 								; restore I/O 0
.8c95		85 01		sta $01				sta 	1
.8c97						_CRNoBreakCheck:
.8c97		c8		iny				iny									; next token
.8c98						_CRMainLoop:
.8c98		9c 10 04	stz $0410			stz 	stringInitialised 			; clear the temporary string initialised flag.
.8c9b		b1 30		lda ($30),y			lda 	(codePtr),y
.8c9d		10 10		bpl $8caf			bpl 	_CRNotKeyword				; not a token.
.8c9f		c9 a6		cmp #$a6			cmp 	#KWC_LAST_UNARY+1 			; if after unary, legitimate command
.8ca1		b0 04		bcs $8ca7			bcs 	_CRIsKeyword
.8ca3		c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if unary, syntax error.
.8ca5		b0 34		bcs $8cdb			bcs		_CRSyntaxError
.8ca7						_CRIsKeyword:
.8ca7		c8		iny				iny 								; consume command
.8ca8		0a		asl a				asl 	a 							; double losing the MSB which is '1' as tokens are $80-$FF
.8ca9		aa		tax				tax 								; put in X for vector jump
.8caa		20 de 8c	jsr $8cde			jsr 	_CRCallVector0 				; call the vector - effectively jsr (vectortable,X)
.8cad		80 e9		bra $8c98			bra 	_CRMainLoop 				; and loop round
.8caf						_CRNotKeyword:
.8caf		c9 3a		cmp #$3a			cmp 	#KWD_COLON 					; if a :, consume it and go round.
.8cb1		f0 bd		beq $8c70			beq 	_CRIncMainLoop
.8cb3		c9 40		cmp #$40			cmp 	#$40 						; variable/call reference
.8cb5		90 05		bcc $8cbc			bcc 	_CRNotVariable
.8cb7						_CRGoLet:
.8cb7		20 25 88	jsr $8825			jsr 	LetCommand
.8cba		80 dc		bra $8c98			bra 	_CRMainLoop
.8cbc						_CRNotVariable:
.8cbc		c9 10		cmp #$10			cmp 	#KWD_AT 					; handle @
.8cbe		f0 f7		beq $8cb7			beq 	_CRGoLet
.8cc0		c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; handle ? !
.8cc2		f0 f3		beq $8cb7			beq 	_CRGoLet
.8cc4		c9 21		cmp #$21			cmp 	#KWD_PLING
.8cc6		f0 ef		beq $8cb7			beq 	_CRGoLet
.8cc8		c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; handle ' (comment)
.8cca		f0 09		beq $8cd5			beq 	_CRGoRem
.8ccc		c9 2e		cmp #$2e			cmp 	#KWD_PERIOD 				; handle . (assembler label)
.8cce		d0 0b		bne $8cdb			bne 	_CRSyntaxError
.8cd0		20 81 82	jsr $8281			jsr 	LabelHere
.8cd3		80 c3		bra $8c98			bra 	_CRMainLoop
.8cd5						_CRGoRem:
.8cd5		c8		iny				iny
.8cd6		20 ee 8b	jsr $8bee			jsr 	RemCommand
.8cd9		80 bd		bra $8c98			bra 	_CRMainLoop
.8cdb						_CRSyntaxError:
.8cdb		4c c6 a0	jmp $a0c6			jmp 	SyntaxError
.8cde						_CRCallVector0:
.8cde		7c 7c 8d	jmp ($8d7c,x)			jmp 	(VectorSet0,x)
.8ce1						_CRBreak:
.8ce1		a9 01		lda #$01		lda	#1
.8ce3		4c fd 8f	jmp $8ffd		jmp	ErrorHandler
.8ce6						CRNoProgram:
.8ce6		4c ca 85	jmp $85ca			jmp 	EndCommand
.8ce9						Shift1Command:
.8ce9		b1 30		lda ($30),y			lda 	(codePtr),y
.8ceb		c8		iny				iny
.8cec		0a		asl a				asl 	a
.8ced		aa		tax				tax
.8cee		7c 2e 8e	jmp ($8e2e,x)			jmp 	(VectorSet1,x)
.8cf1						Shift2Command:
.8cf1		b1 30		lda ($30),y			lda 	(codePtr),y
.8cf3		c8		iny				iny
.8cf4		0a		asl a				asl 	a
.8cf5		aa		tax				tax
.8cf6		7c 60 8e	jmp ($8e60,x)			jmp 	(VectorSet2,x)
.8cf9						Unused1:
.8cf9						Unused2:
.8cf9						Unused3:
.8cf9						Unused4:
.8cf9		4c c6 a0	jmp $a0c6			jmp 	SyntaxError
>8cfc								.align 2

;******  Processing file: ./common/commands/../generated/vectors.dat

.8cfc						VectorSetPunc:
>8cfc		b5 92					.word	ShiftLeft                        ; $00 <<
>8cfe		a0 90					.word	BinaryCompareLessEqual           ; $01 <=
>8d00		96 90					.word	BinaryCompareNotEqual            ; $02 <>
>8d02		c6 a0					.word	SyntaxError                      ; $03 !!3
>8d04		c6 a0					.word	SyntaxError                      ; $04 ><
>8d06		aa 90					.word	BinaryCompareGreaterEqual        ; $05 >=
>8d08		b8 92					.word	ShiftRight                       ; $06 >>
>8d0a		c6 a0					.word	SyntaxError                      ; $07 !!7
>8d0c		c6 a0					.word	SyntaxError                      ; $08 !!8
>8d0e		c6 a0					.word	SyntaxError                      ; $09 !!9
>8d10		c6 a0					.word	SyntaxError                      ; $0a !!10
>8d12		c6 a0					.word	SyntaxError                      ; $0b !!11
>8d14		c6 a0					.word	SyntaxError                      ; $0c !!12
>8d16		c6 a0					.word	SyntaxError                      ; $0d !!13
>8d18		c6 a0					.word	SyntaxError                      ; $0e !!14
>8d1a		c6 a0					.word	SyntaxError                      ; $0f !!15
>8d1c		c6 a0					.word	SyntaxError                      ; $10 @
>8d1e		c6 a0					.word	SyntaxError                      ; $11 !!17
>8d20		c6 a0					.word	SyntaxError                      ; $12 !!18
>8d22		c6 a0					.word	SyntaxError                      ; $13 [
>8d24		61 91					.word	IntegerDivide                    ; $14 \
>8d26		c6 a0					.word	SyntaxError                      ; $15 ]
>8d28		f3 93					.word	EorInteger                       ; $16 ^
>8d2a		c6 a0					.word	SyntaxError                      ; $17 _
>8d2c		c6 a0					.word	SyntaxError                      ; $18 `
>8d2e		c6 a0					.word	SyntaxError                      ; $19 !!25
>8d30		c6 a0					.word	SyntaxError                      ; $1a !!26
>8d32		c6 a0					.word	SyntaxError                      ; $1b {
>8d34		be 93					.word	OraInteger                       ; $1c |
>8d36		c6 a0					.word	SyntaxError                      ; $1d }
>8d38		c6 a0					.word	SyntaxError                      ; $1e ~
>8d3a		c6 a0					.word	SyntaxError                      ; $1f [7m<7F>[m
>8d3c		c6 a0					.word	SyntaxError                      ; $20
>8d3e		28 94					.word	WordIndirect                     ; $21 !
>8d40		c6 a0					.word	SyntaxError                      ; $22 "
>8d42		c6 a0					.word	SyntaxError                      ; $23 #
>8d44		c6 a0					.word	SyntaxError                      ; $24 $
>8d46		a2 91					.word	IntegerModulus                   ; $25 %
>8d48		89 93					.word	AndInteger                       ; $26 &
>8d4a		c6 a0					.word	SyntaxError                      ; $27 '
>8d4c		c6 a0					.word	SyntaxError                      ; $28 (
>8d4e		c6 a0					.word	SyntaxError                      ; $29 )
>8d50		10 92					.word	MulInteger                       ; $2a *
>8d52		2b 93					.word	AddInteger                       ; $2b +
>8d54		c6 a0					.word	SyntaxError                      ; $2c ,
>8d56		64 93					.word	SubInteger                       ; $2d -
>8d58		c6 a0					.word	SyntaxError                      ; $2e .
>8d5a		e2 95					.word	FDivideCommand                   ; $2f /
>8d5c		c6 a0					.word	SyntaxError                      ; $30 0
>8d5e		c6 a0					.word	SyntaxError                      ; $31 1
>8d60		c6 a0					.word	SyntaxError                      ; $32 2
>8d62		c6 a0					.word	SyntaxError                      ; $33 3
>8d64		c6 a0					.word	SyntaxError                      ; $34 4
>8d66		c6 a0					.word	SyntaxError                      ; $35 5
>8d68		c6 a0					.word	SyntaxError                      ; $36 6
>8d6a		c6 a0					.word	SyntaxError                      ; $37 7
>8d6c		c6 a0					.word	SyntaxError                      ; $38 8
>8d6e		c6 a0					.word	SyntaxError                      ; $39 9
>8d70		c6 a0					.word	SyntaxError                      ; $3a :
>8d72		c6 a0					.word	SyntaxError                      ; $3b ;
>8d74		82 90					.word	BinaryCompareLess                ; $3c <
>8d76		78 90					.word	BinaryCompareEqual               ; $3d =
>8d78		8c 90					.word	BinaryCompareGreater             ; $3e >
>8d7a		4a 94					.word	ByteIndirect                     ; $3f ?
.8d7c						VectorSet0:
>8d7c		4f 8c					.word	EOLCommand                       ; $80 !0:EOF
>8d7e		e9 8c					.word	Shift1Command                    ; $81 !1:SH1
>8d80		f1 8c					.word	Shift2Command                    ; $82 !2:SH2
>8d82		cc 9a					.word	AbsUnary                         ; $83 ABS(
>8d84		da 9a					.word	AllocUnary                       ; $84 ALLOC(
>8d86		4a 9b					.word	AscUnary                         ; $85 ASC(
>8d88		2e 9d					.word	ChrUnary                         ; $86 CHR$(
>8d8a		65 a5					.word	UnaryEvent                       ; $87 EVENT(
>8d8c		74 90					.word	UnaryFalse                       ; $88 FALSE
>8d8e		57 9b					.word	FracUnary                        ; $89 FRAC(
>8d90		c6 a0					.word	SyntaxError                      ; $8a GETDATE$(
>8d92		c6 a0					.word	SyntaxError                      ; $8b GETTIME$(
>8d94		ef a4					.word	UnaryHit                         ; $8c HIT(
>8d96		6c 9b					.word	IntUnary                         ; $8d INT(
>8d98		ed 9c					.word	IsValUnary                       ; $8e ISVAL(
>8d9a		e9 a5					.word	UnaryJoyB                        ; $8f JOYB(
>8d9c		c2 a5					.word	UnaryJoyX                        ; $90 JOYX(
>8d9e		c5 a5					.word	UnaryJoyY                        ; $91 JOYY(
>8da0		01 9e					.word	Unary_Left                       ; $92 LEFT$(
>8da2		7d 9b					.word	LenUnary                         ; $93 LEN(
>8da4		9b 9b					.word	Unary_Max                        ; $94 MAX(
>8da6		23 9e					.word	Unary_Mid                        ; $95 MID$(
>8da8		97 9b					.word	Unary_Min                        ; $96 MIN(
>8daa		e6 9b					.word	Unary_Not                        ; $97 NOT(
>8dac		f9 9b					.word	PeekByteUnary                    ; $98 PEEK(
>8dae		05 9c					.word	PeekDUnary                       ; $99 PEEKD(
>8db0		01 9c					.word	PeekLUnary                       ; $9a PEEKL(
>8db2		fd 9b					.word	PeekWUnary                       ; $9b PEEKW(
>8db4		a0 af					.word	UnaryPlaying                     ; $9c PLAYING(
>8db6		32 9c					.word	Unary_Random                     ; $9d RANDOM(
>8db8		0e 9e					.word	Unary_Right                      ; $9e RIGHT$(
>8dba		4f 9c					.word	Unary_Rnd                        ; $9f RND(
>8dbc		c5 9c					.word	SgnUnary                         ; $a0 SGN(
>8dbe		40 9d					.word	SpcUnary                         ; $a1 SPC(
>8dc0		5b 9d					.word	Unary_Str                        ; $a2 STR$(
>8dc2		fb a5					.word	UnaryTimer                       ; $a3 TIMER(
>8dc4		69 90					.word	UnaryTrue                        ; $a4 TRUE
>8dc6		e3 9c					.word	ValUnary                         ; $a5 VAL(
>8dc8		cd 85					.word	ForCommand                       ; $a6 FOR
>8dca		10 87					.word	IfCommand                        ; $a7 IF
>8dcc		f9 8c					.word	Unused1                          ; $a8 PROC
>8dce		fb 8b					.word	Command_REPEAT                   ; $a9 REPEAT
>8dd0		b5 8f					.word	Command_WHILE                    ; $aa WHILE
>8dd2		39 87					.word	EndIf                            ; $ab ENDIF
>8dd4		83 8b					.word	Command_ENDPROC                  ; $ac ENDPROC
>8dd6		7f 86					.word	NextCommand                      ; $ad NEXT
>8dd8		f9 8c					.word	Unused4                          ; $ae THEN
>8dda		04 8c					.word	Command_UNTIL                    ; $af UNTIL
>8ddc		d6 8f					.word	Command_WEND                     ; $b0 WEND
>8dde		c6 a0					.word	SyntaxError                      ; $b1 BY
>8de0		70 84					.word	CallCommand                      ; $b2 CALL
>8de2		a3 a2					.word	CircleCommand                    ; $b3 CIRCLE
>8de4		a5 84					.word	ClearCommand                     ; $b4 CLEAR
>8de6		fd 84					.word	ClearScreen                      ; $b5 CLS
>8de8		c6 a0					.word	SyntaxError                      ; $b6 COLOR
>8dea		c6 a0					.word	SyntaxError                      ; $b7 COLOUR
>8dec		05 85					.word	Command_Data                     ; $b8 DATA
>8dee		0d 85					.word	DimCommand                       ; $b9 DIM
>8df0		f9 8c					.word	Unused3                          ; $ba DOWNTO
>8df2		32 87					.word	ElseCode                         ; $bb ELSE
>8df4		c6 a0					.word	SyntaxError                      ; $bc FROM
>8df6		c2 a4					.word	GfxCommand                       ; $bd GFX
>8df8		d8 86					.word	Command_GOSUB                    ; $be GOSUB
>8dfa		f6 86					.word	GotoCommand                      ; $bf GOTO
>8dfc		c6 a0					.word	SyntaxError                      ; $c0 HERE
>8dfe		cc a2					.word	ImageCommand                     ; $c1 IMAGE
>8e00		3a 87					.word	Command_Input                    ; $c2 INPUT
>8e02		25 88					.word	LetCommand                       ; $c3 LET
>8e04		1e a3					.word	LineCommand                      ; $c4 LINE
>8e06		17 8a					.word	Command_LOCAL                    ; $c5 LOCAL
>8e08		c6 a0					.word	SyntaxError                      ; $c6 OFF
>8e0a		c6 a0					.word	SyntaxError                      ; $c7 ON
>8e0c		c6 a0					.word	SyntaxError                      ; $c8 OUTLINE
>8e0e		13 a5					.word	PaletteCommand                   ; $c9 PALETTE
>8e10		17 a3					.word	PlotCommand                      ; $ca PLOT
>8e12		e8 8a					.word	PokeBCommand                     ; $cb POKE
>8e14		f4 8a					.word	PokeDCommand                     ; $cc POKED
>8e16		f0 8a					.word	PokeLCommand                     ; $cd POKEL
>8e18		ec 8a					.word	PokeWCommand                     ; $ce POKEW
>8e1a		41 87					.word	Command_Print                    ; $cf PRINT
>8e1c		91 8b					.word	Command_Read                     ; $d0 READ
>8e1e		9f a2					.word	RectangleCommand                 ; $d1 RECT
>8e20		ee 8b					.word	RemCommand                       ; $d2 REM
>8e22		e8 86					.word	Command_RETURN                   ; $d3 RETURN
>8e24		c6 a0					.word	SyntaxError                      ; $d4 SOLID
>8e26		bc af					.word	SoundCommand                     ; $d5 SOUND
>8e28		ae a2					.word	SpriteCommand                    ; $d6 SPRITE
>8e2a		e8 a2					.word	TextCommand                      ; $d7 TEXT
>8e2c		f9 8c					.word	Unused2                          ; $d8 TO
.8e2e						VectorSet1:
>8e2e		c6 a0					.word	SyntaxError                      ; $80 !0:EOF
>8e30		c6 a0					.word	SyntaxError                      ; $81 !1:SH1
>8e32		c6 a0					.word	SyntaxError                      ; $82 !2:SH2
>8e34		44 84					.word	AssembleCommand                  ; $83 ASSEMBLE
>8e36		60 84					.word	AssertCommand                    ; $84 ASSERT
>8e38		62 a4					.word	BitmapCtrl                       ; $85 BITMAP
>8e3a		ca 85					.word	EndCommand                       ; $86 END
>8e3c		74 af					.word	Explode                          ; $87 EXPLODE
>8e3e		c6 a0					.word	SyntaxError                      ; $88 GO
>8e40		75 88					.word	Command_List                     ; $89 LIST
>8e42		7b 89					.word	Command_Load                     ; $8a LOAD
>8e44		d8 8a					.word	NewCommand                       ; $8b NEW
>8e46		50 af					.word	PingCommand                      ; $8c PING
>8e48		1d 8c					.word	Command_Restore                  ; $8d RESTORE
>8e4a		5c 8c					.word	CommandRUN                       ; $8e RUN
>8e4c		c6 a0					.word	SyntaxError                      ; $8f SAVE
>8e4e		c6 a0					.word	SyntaxError                      ; $90 SETDATE
>8e50		c6 a0					.word	SyntaxError                      ; $91 SETTIME
>8e52		68 af					.word	ShootCommand                     ; $92 SHOOT
>8e54		a7 a4					.word	SpritesCtrl                      ; $93 SPRITES
>8e56		e8 8e					.word	StopCommand                      ; $94 STOP
>8e58		c6 a0					.word	SyntaxError                      ; $95 VERIFY
>8e5a		5c a5					.word	XGoCommand                       ; $96 XGO
>8e5c		53 a5					.word	XLoadCommand                     ; $97 XLOAD
>8e5e		5c af					.word	ZapCommand                       ; $98 ZAP
.8e60						VectorSet2:
>8e60		c6 a0					.word	SyntaxError                      ; $80 !0:EOF
>8e62		c6 a0					.word	SyntaxError                      ; $81 !1:SH1
>8e64		c6 a0					.word	SyntaxError                      ; $82 !2:SH2
>8e66		85 9f					.word	Assemble_adc                     ; $83 ADC
>8e68		7d 9f					.word	Assemble_and                     ; $84 AND
>8e6a		99 9f					.word	Assemble_asl                     ; $85 ASL
>8e6c		03 a0					.word	Assemble_bcc                     ; $86 BCC
>8e6e		07 a0					.word	Assemble_bcs                     ; $87 BCS
>8e70		0f a0					.word	Assemble_beq                     ; $88 BEQ
>8e72		c6 9f					.word	Assemble_bit                     ; $89 BIT
>8e74		f7 9f					.word	Assemble_bmi                     ; $8a BMI
>8e76		0b a0					.word	Assemble_bne                     ; $8b BNE
>8e78		f3 9f					.word	Assemble_bpl                     ; $8c BPL
>8e7a		13 a0					.word	Assemble_bra                     ; $8d BRA
>8e7c		17 a0					.word	Assemble_brk                     ; $8e BRK
>8e7e		fb 9f					.word	Assemble_bvc                     ; $8f BVC
>8e80		ff 9f					.word	Assemble_bvs                     ; $90 BVS
>8e82		1f a0					.word	Assemble_clc                     ; $91 CLC
>8e84		73 a0					.word	Assemble_cld                     ; $92 CLD
>8e86		33 a0					.word	Assemble_cli                     ; $93 CLI
>8e88		63 a0					.word	Assemble_clv                     ; $94 CLV
>8e8a		91 9f					.word	Assemble_cmp                     ; $95 CMP
>8e8c		da 9f					.word	Assemble_cpx                     ; $96 CPX
>8e8e		d5 9f					.word	Assemble_cpy                     ; $97 CPY
>8e90		b7 9f					.word	Assemble_dec                     ; $98 DEC
>8e92		6f a0					.word	Assemble_dex                     ; $99 DEX
>8e94		4b a0					.word	Assemble_dey                     ; $9a DEY
>8e96		81 9f					.word	Assemble_eor                     ; $9b EOR
>8e98		bc 9f					.word	Assemble_inc                     ; $9c INC
>8e9a		7f a0					.word	Assemble_inx                     ; $9d INX
>8e9c		6b a0					.word	Assemble_iny                     ; $9e INY
>8e9e		ee 9f					.word	Assemble_jmp                     ; $9f JMP
>8ea0		e9 9f					.word	Assemble_jsr                     ; $a0 JSR
>8ea2		8d 9f					.word	Assemble_lda                     ; $a1 LDA
>8ea4		b2 9f					.word	Assemble_ldx                     ; $a2 LDX
>8ea6		d0 9f					.word	Assemble_ldy                     ; $a3 LDY
>8ea8		a3 9f					.word	Assemble_lsr                     ; $a4 LSR
>8eaa		83 a0					.word	Assemble_nop                     ; $a5 NOP
>8eac		79 9f					.word	Assemble_ora                     ; $a6 ORA
>8eae		2f a0					.word	Assemble_pha                     ; $a7 PHA
>8eb0		1b a0					.word	Assemble_php                     ; $a8 PHP
>8eb2		77 a0					.word	Assemble_phx                     ; $a9 PHX
>8eb4		37 a0					.word	Assemble_phy                     ; $aa PHY
>8eb6		3f a0					.word	Assemble_pla                     ; $ab PLA
>8eb8		23 a0					.word	Assemble_plp                     ; $ac PLP
>8eba		8b a0					.word	Assemble_plx                     ; $ad PLX
>8ebc		47 a0					.word	Assemble_ply                     ; $ae PLY
>8ebe		9e 9f					.word	Assemble_rol                     ; $af ROL
>8ec0		a8 9f					.word	Assemble_ror                     ; $b0 ROR
>8ec2		2b a0					.word	Assemble_rti                     ; $b1 RTI
>8ec4		3b a0					.word	Assemble_rts                     ; $b2 RTS
>8ec6		95 9f					.word	Assemble_sbc                     ; $b3 SBC
>8ec8		27 a0					.word	Assemble_sec                     ; $b4 SEC
>8eca		87 a0					.word	Assemble_sed                     ; $b5 SED
>8ecc		43 a0					.word	Assemble_sei                     ; $b6 SEI
>8ece		89 9f					.word	Assemble_sta                     ; $b7 STA
>8ed0		7b a0					.word	Assemble_stp                     ; $b8 STP
>8ed2		ad 9f					.word	Assemble_stx                     ; $b9 STX
>8ed4		cb 9f					.word	Assemble_sty                     ; $ba STY
>8ed6		c1 9f					.word	Assemble_stz                     ; $bb STZ
>8ed8		5f a0					.word	Assemble_tax                     ; $bc TAX
>8eda		5b a0					.word	Assemble_tay                     ; $bd TAY
>8edc		e4 9f					.word	Assemble_trb                     ; $be TRB
>8ede		df 9f					.word	Assemble_tsb                     ; $bf TSB
>8ee0		67 a0					.word	Assemble_tsx                     ; $c0 TSX
>8ee2		4f a0					.word	Assemble_txa                     ; $c1 TXA
>8ee4		57 a0					.word	Assemble_txs                     ; $c2 TXS
>8ee6		53 a0					.word	Assemble_tya                     ; $c3 TYA

;******  Return to file: ./common/commands/run.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/stop.asm

.8ee8						StopCommand:
.8ee8		a9 08		lda #$08		lda	#8
.8eea		4c fd 8f	jmp $8ffd		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/procscan.asm

.8eed						ProcedureScan:
.8eed		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8eef		85 30		sta $30				sta 	codePtr
.8ef1		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8ef3		85 31		sta $31				sta 	codePtr+1
.8ef5						_PSLoop:
.8ef5		b2 30		lda ($30)			lda 	(codePtr)
.8ef7		f0 42		beq $8f3b			beq 	_PSExit
.8ef9		a0 03		ldy #$03			ldy 	#3 							; is it PROC at start of line ?
.8efb		b1 30		lda ($30),y			lda 	(codePtr),y
.8efd		c9 a8		cmp #$a8			cmp 	#KWD_PROC
.8eff		d0 2d		bne $8f2e			bne 	_PSNext
.8f01		c8		iny				iny 								; get the address of the record to zTemp0 and
.8f02		b1 30		lda ($30),y			lda 	(codePtr),y
.8f04		29 c0		and #$c0			and 	#$C0
.8f06		c9 40		cmp #$40			cmp 	#$40
.8f08		d0 32		bne $8f3c			bne 	_PSSyntax
.8f0a		b1 30		lda ($30),y			lda 	(codePtr),y
.8f0c		18		clc				clc
.8f0d		69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8f0f		85 37		sta $37				sta 	zTemp0+1
.8f11		c8		iny				iny 								; LSB
.8f12		b1 30		lda ($30),y			lda 	(codePtr),y
.8f14		85 36		sta $36				sta 	zTemp0
.8f16		c8		iny				iny 								; character after variable call.
.8f17		98		tya				tya 								; save Y offset at +7 (exponent slot)
.8f18		a0 07		ldy #$07			ldy 	#7
.8f1a		91 36		sta ($36),y			sta 	(zTemp0),y
.8f1c		a9 18		lda #$18			lda 	#NSTProcedure 				; mark it as procedure
.8f1e		a0 02		ldy #$02			ldy 	#2
.8f20		91 36		sta ($36),y			sta 	(zTemp0),y
.8f22		a2 00		ldx #$00			ldx 	#0 							; copy code-Ptr into offset 3-6 (mantissa)
.8f24						_PSCopy:
.8f24		b5 30		lda $30,x			lda 	safePtr,x
.8f26		c8		iny				iny
.8f27		91 36		sta ($36),y			sta 	(zTemp0),y
.8f29		e8		inx				inx
.8f2a		e0 04		cpx #$04			cpx 	#4
.8f2c		d0 f6		bne $8f24			bne 	_PSCopy
.8f2e						_PSNext:
.8f2e		18		clc				clc
.8f2f		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8f31		65 30		adc $30				adc 	codePtr
.8f33		85 30		sta $30				sta 	codePtr
.8f35		90 02		bcc $8f39			bcc 	_CREExit
.8f37		e6 31		inc $31				inc 	codePtr+1 					; carry
.8f39						_CREExit:
.8f39		80 ba		bra $8ef5			bra 	_PSLoop
.8f3b						_PSExit:
.8f3b		60		rts				rts
.8f3c						_PSSyntax:
.8f3c		4c c6 a0	jmp $a0c6			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/scanforward.asm

.8f3f						ScanForward:
.8f3f		64 38		stz $38				stz 	zTemp1 						; zero the structure count - goes up with WHILE/FOR down with WEND/NEXT etc.
.8f41		86 37		stx $37				stx 	zTemp0+1
.8f43		85 36		sta $36				sta 	zTemp0 						; save X & A as the two possible matches.
.8f45						_ScanLoop:
.8f45		b1 30		lda ($30),y			lda 	(codePtr),y
.8f47		c8		iny				iny
.8f48		a6 38		ldx $38				ldx 	zTemp1 						; if the count is > 0 cannot match as in substructure
.8f4a		d0 0e		bne $8f5a			bne 	_ScanGoNext
.8f4c		c5 36		cmp $36				cmp 	zTemp0 						; see if either matches
.8f4e		f0 04		beq $8f54			beq 	_ScanMatch
.8f50		c5 37		cmp $37				cmp 	zTemp0+1
.8f52		d0 06		bne $8f5a			bne 	_ScanGoNext
.8f54						_ScanMatch:
.8f54		c9 80		cmp #$80			cmp 	#KWC_EOL 					; if asked for EOL, backtrack.
.8f56		d0 01		bne $8f59			bne 	_ScanNotEndEOL
.8f58		88		dey				dey
.8f59						_ScanNotEndEOL:
.8f59		60		rts				rts
.8f5a						_ScanGoNext:
.8f5a		20 5f 8f	jsr $8f5f			jsr  	ScanForwardOne 				; allows for shifts and so on.
.8f5d		80 e6		bra $8f45			bra 	_ScanLoop
.8f5f						ScanForwardOne:
.8f5f		c9 40		cmp #$40			cmp 	#$40 						; if 00-3F, punctuation characters, already done.
.8f61		90 3e		bcc $8fa1			bcc 	_SFWExit
.8f63		c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if 40-82, skip one extra as these are 2 byte
.8f65		90 18		bcc $8f7f			bcc 	_ScanSkipOne	 			; offsets into the identifier table or shifts.
.8f67		c9 fc		cmp #$fc			cmp 	#$FC 						; FC-FF are data skips (hex consts, strings etc.)
.8f69		b0 2f		bcs $8f9a			bcs 	_ScanSkipData
.8f6b		c9 a6		cmp #$a6			cmp 	#KWC_FIRST_STRUCTURE 		; structure keyword ?
.8f6d		90 32		bcc $8fa1			bcc 	_SFWExit 					; if not, ordinary keywords.
.8f6f		c9 b1		cmp #$b1			cmp 	#KWC_LAST_STRUCTURE+1
.8f71		b0 2e		bcs $8fa1			bcs 	_SFWExit
.8f73		c6 38		dec $38				dec 	zTemp1 						; decrement the sructure count
.8f75		c9 ab		cmp #$ab			cmp 	#KWC_FIRST_STRUCTURE_DEC 	; back if it is a dec structure (e.g. WEND/NEXT)
.8f77		b0 28		bcs $8fa1			bcs 	_SFWExit
.8f79		e6 38		inc $38				inc 	zTemp1 						; so it's an increment structure
.8f7b		e6 38		inc $38				inc 	zTemp1 						; twice to undo the dec
.8f7d		80 22		bra $8fa1			bra 	_SFWExit
.8f7f						_ScanSkipOne:
.8f7f		c8		iny				iny 								; consume the extra one.
.8f80		c9 80		cmp #$80			cmp 	#KWC_EOL 					; if not EOL loop back
.8f82		d0 1d		bne $8fa1			bne 	_SFWExit
.8f84		18		clc				clc
.8f85		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8f87		65 30		adc $30				adc 	codePtr
.8f89		85 30		sta $30				sta 	codePtr
.8f8b		90 02		bcc $8f8f			bcc 	_CREExit
.8f8d		e6 31		inc $31				inc 	codePtr+1 					; carry
.8f8f						_CREExit:
.8f8f		a0 03		ldy #$03			ldy 	#3 							; scan start position.
.8f91		b2 30		lda ($30)			lda 	(codePtr)
.8f93		d0 0c		bne $8fa1			bne 	_SFWExit 					; if not zero, more to scan
.8f95		a9 13		lda #$13		lda	#19
.8f97		4c fd 8f	jmp $8ffd		jmp	ErrorHandler
.8f9a						_ScanSkipData:
.8f9a		88		dey				dey 								; point at data token
.8f9b		c8		iny				iny 								; point to offset
.8f9c		98		tya				tya 								; A = offset position
.8f9d		38		sec				sec 								; add size +1 hence SEC
.8f9e		71 30		adc ($30),y			adc 	(codePtr),y
.8fa0		a8		tay				tay 								; make current position.
.8fa1						_SFWExit:
.8fa1		60		rts				rts
.8fa2						ScanGetCurrentLineStep:
.8fa2		64 38		stz $38				stz 	zTemp1
.8fa4		a0 03		ldy #$03			ldy 	#3
.8fa6						_SGCLSLoop:
.8fa6		b1 30		lda ($30),y			lda 	(codePtr),y
.8fa8		c8		iny				iny
.8fa9		c9 80		cmp #$80			cmp 	#KWC_EOL	 				; if EOL exit
.8fab		f0 05		beq $8fb2			beq 	_SGCLSExit
.8fad		20 5f 8f	jsr $8f5f			jsr 	ScanForwardOne
.8fb0		80 f4		bra $8fa6			bra 	_SGCLSLoop
.8fb2						_SGCLSExit:
.8fb2		a5 38		lda $38				lda 	zTemp1 						; return the adjustment
.8fb4		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/while.asm

.8fb5						Command_WHILE:
.8fb5		5a		phy				phy 								; save position of the test
.8fb6		a2 00		ldx #$00			ldx 	#0 							; work out the while test.
.8fb8		20 96 9e	jsr $9e96			jsr 	EvaluateNumber
.8fbb		20 6a 9f	jsr $9f6a			jsr 	NSMIsZero 					; check if zero
.8fbe		f0 0e		beq $8fce			beq 	_WHExitLoop 				; if so exit the loop, while has failed.
.8fc0		98		tya				tya 								; position *after* test.
.8fc1		7a		ply				ply 								; restore position before test, at WHILE
.8fc2		88		dey				dey 								; so we execute the WHILE command again.
.8fc3		48		pha				pha 								; push after test on the stack
.8fc4		a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; allocate 6 bytes on the return stack.
.8fc6		20 43 b0	jsr $b043			jsr 	StackOpen
.8fc9		20 88 b0	jsr $b088			jsr 	STKSaveCodePosition 		; save loop position - where the test value expr is.
.8fcc		7a		ply				ply 								; restore the position *after* the test
.8fcd		60		rts				rts
.8fce						_WHExitLoop:
.8fce		68		pla				pla 								; throw post loop position
.8fcf		a9 b0		lda #$b0			lda 	#KWD_WEND 					; scan forward past WEND
.8fd1		aa		tax				tax
.8fd2		20 3f 8f	jsr $8f3f			jsr 	ScanForward
.8fd5		60		rts				rts
.8fd6						Command_WEND:
.8fd6		a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; check WHILE is TOS e.g. in a while loop :)
.8fd8		a2 10		ldx #$10			ldx 	#ERRID_WHILE 				; this error if not.
.8fda		20 70 b0	jsr $b070			jsr 	StackCheckFrame
.8fdd		20 99 b0	jsr $b099			jsr 	STKLoadCodePosition 		; loop back to the WHILE keyword.
.8fe0		20 62 b0	jsr $b062			jsr 	StackClose		 			; erase the frame
.8fe3		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/charcheck.asm

.8fe4						CheckRightBracket:
.8fe4		b1 30		lda ($30),y			lda 	(codePtr),y
.8fe6		c8		iny				iny
.8fe7		c9 29		cmp #$29			cmp 	#KWD_RPAREN 						; exit if matches
.8fe9		d0 0f		bne $8ffa			bne 	CNAFail
.8feb		60		rts				rts
.8fec						CheckComma:
.8fec		b1 30		lda ($30),y			lda 	(codePtr),y
.8fee		c8		iny				iny
.8fef		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 						; exit if matches
.8ff1		d0 07		bne $8ffa			bne 	CNAFail
.8ff3		60		rts				rts
.8ff4						CheckNextA:
.8ff4		d1 30		cmp ($30),y			cmp 	(codePtr),y
.8ff6		d0 02		bne $8ffa			bne 	CNAFail
.8ff8		c8		iny				iny 								; skip character
.8ff9		60		rts				rts 								; and exit
.8ffa						CNAFail:
.8ffa		4c c6 a0	jmp $a0c6			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/errors.asm

.8ffd						ErrorHandler:
.8ffd		a8		tay				tay 								; find the error text
.8ffe		f0 49		beq $9049			beq 	_EHEnd
.9000		a2 00		ldx #$00			ldx 	#0
.9002		a9 df		lda #$df			lda 	#((ErrorText) & $FF)
.9004		85 36		sta $36				sta 	0+zTemp0
.9006		a9 a0		lda #$a0			lda 	#((ErrorText) >> 8)
.9008		85 37		sta $37				sta 	1+zTemp0
.900a						_EHFind:
.900a		88		dey				dey 								; keep looking through text
.900b		f0 0e		beq $901b			beq 	_EHFound
.900d						_EHFindZero:
.900d		b2 36		lda ($36)			lda 	(zTemp0) 					; find the next error
.900f		e6 36		inc $36				inc 	zTemp0
.9011		d0 02		bne $9015			bne 	_EHFNoCarry
.9013		e6 37		inc $37				inc 	zTemp0+1
.9015						_EHFNoCarry:
.9015		c9 00		cmp #$00			cmp 	#0
.9017		d0 f4		bne $900d			bne 	_EHFindZero
.9019		80 ef		bra $900a			bra 	_EHFind
.901b						_EHFound:
.901b		a5 36		lda $36				lda 	zTemp0 						; print message
.901d		a6 37		ldx $37				ldx 	zTemp0+1
.901f		20 56 90	jsr $9056			jsr 	PrintStringXA
.9022		a0 01		ldy #$01			ldy 	#1 							; if line number zero don't print it
.9024		b1 30		lda ($30),y			lda 	(codePtr),y
.9026		d0 05		bne $902d			bne 	_EHAtMsg
.9028		c8		iny				iny
.9029		b1 30		lda ($30),y			lda 	(codePtr),y
.902b		f0 17		beq $9044			beq 	_EHCREnd
.902d						_EHAtMsg:
.902d		a2 90		ldx #$90			ldx 	#_AtMsg >> 8 				; print " at "
.902f		a9 4c		lda #$4c			lda 	#_AtMsg & $FF
.9031		20 56 90	jsr $9056			jsr 	PrintStringXA
.9034		a0 01		ldy #$01			ldy 	#1 							; line number into XA
.9036		b1 30		lda ($30),y			lda 	(codePtr),y
.9038		48		pha				pha
.9039		c8		iny				iny
.903a		b1 30		lda ($30),y			lda 	(codePtr),y
.903c		aa		tax				tax
.903d		68		pla				pla
.903e		20 6c 94	jsr $946c			jsr 	ConvertInt16 				; convert XA to string
.9041		20 56 90	jsr $9056			jsr 	PrintStringXA 				; and print it.
.9044						_EHCREnd:
.9044		a9 0d		lda #$0d			lda 	#13 						; new line
.9046		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.9049						_EHEnd:
.9049		4c 0f 84	jmp $840f			jmp 	WarmStart
>904c		20 61 74 20 6c 69 6e 65		_AtMsg:	.text 	" at line ",0
>9054		20 00
.9056						PrintStringXA:
.9056		5a		phy				phy
.9057		86 37		stx $37				stx 	zTemp0+1
.9059		85 36		sta $36				sta 	zTemp0
.905b		a0 00		ldy #$00			ldy 	#0
.905d						_PSXALoop:
.905d		b1 36		lda ($36),y			lda 	(zTemp0),y
.905f		f0 06		beq $9067			beq 	_PSXAExit
.9061		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.9064		c8		iny				iny
.9065		80 f6		bra $905d			bra 	_PSXALoop
.9067						_PSXAExit:
.9067		7a		ply				ply
.9068		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/compare.asm

.9069						UnaryTrue:
.9069		fa		plx				plx
.906a						ReturnTrue:
.906a		a9 01		lda #$01			lda 	#1  						; set to 1
.906c		20 4a 9f	jsr $9f4a			jsr 	NSMSetByte
.906f		a9 80		lda #$80			lda 	#$80 						; set sign flag, so it is -1
.9071		95 50		sta $50,x			sta 	NSStatus,x
.9073		60		rts				rts
.9074						UnaryFalse:
.9074		fa		plx				plx
.9075						ReturnFalse:
.9075		4c 48 9f	jmp $9f48			jmp 	NSMSetZero 					; set it all to zero
.9078						BinaryCompareEqual:
.9078		fa		plx				plx
.9079		20 b4 90	jsr $90b4			jsr 	CompareBaseCode
.907c		c9 00		cmp #$00			cmp 	#0
.907e		f0 ea		beq $906a			beq 	ReturnTrue
.9080		80 f3		bra $9075			bra 	ReturnFalse
.9082						BinaryCompareLess:
.9082		fa		plx				plx
.9083		20 b4 90	jsr $90b4			jsr 	CompareBaseCode
.9086		c9 ff		cmp #$ff			cmp 	#$FF
.9088		f0 e0		beq $906a			beq 	ReturnTrue
.908a		80 e9		bra $9075			bra 	ReturnFalse
.908c						BinaryCompareGreater:
.908c		fa		plx				plx
.908d		20 b4 90	jsr $90b4			jsr 	CompareBaseCode
.9090		c9 01		cmp #$01			cmp 	#1
.9092		f0 d6		beq $906a			beq 	ReturnTrue
.9094		80 df		bra $9075			bra 	ReturnFalse
.9096						BinaryCompareNotEqual:
.9096		fa		plx				plx
.9097		20 b4 90	jsr $90b4			jsr 	CompareBaseCode
.909a		c9 00		cmp #$00			cmp 	#0
.909c		d0 cc		bne $906a			bne 	ReturnTrue
.909e		80 d5		bra $9075			bra 	ReturnFalse
.90a0						BinaryCompareLessEqual:
.90a0		fa		plx				plx
.90a1		20 b4 90	jsr $90b4			jsr 	CompareBaseCode
.90a4		c9 01		cmp #$01			cmp 	#1
.90a6		d0 c2		bne $906a			bne 	ReturnTrue
.90a8		80 cb		bra $9075			bra 	ReturnFalse
.90aa						BinaryCompareGreaterEqual:
.90aa		fa		plx				plx
.90ab		20 b4 90	jsr $90b4			jsr 	CompareBaseCode
.90ae		c9 ff		cmp #$ff			cmp 	#$FF
.90b0		d0 b8		bne $906a			bne 	ReturnTrue
.90b2		80 c1		bra $9075			bra 	ReturnFalse
.90b4						CompareBaseCode:
.90b4		20 bf 97	jsr $97bf			jsr 	DereferenceTopTwo 			; make both values if references.
.90b7		b5 50		lda $50,x			lda 	NSStatus,x 					; check if either is a string.
.90b9		15 51		ora $51,x			ora 	NSStatus+1,x
.90bb		29 10		and #$10			and 	#NSTString
.90bd		d0 37		bne $90f6			bne 	_CBCString 					; if so do string code, which will check if both.
.90bf		b5 78		lda $78,x			lda 	NSExponent,x 				; check both are integers
.90c1		15 79		ora $79,x			ora 	NSExponent+1,x
.90c3		d0 34		bne $90f9			bne 	_CBCFloat
.90c5		b5 50		lda $50,x			lda 	NSStatus,x
.90c7		15 51		ora $51,x			ora 	NSStatus+1,x
.90c9		29 08		and #$08			and 	#NSTFloat
.90cb		d0 2c		bne $90f9			bne 	_CBCFloat
.90cd		20 fc 90	jsr $90fc			jsr 	CompareFixMinusZero 		; fix up -0 just in cases.
.90d0		e8		inx				inx
.90d1		20 fc 90	jsr $90fc			jsr 	CompareFixMinusZero
.90d4		ca		dex				dex
.90d5		b5 50		lda $50,x			lda 	NSStatus,x 					; are the signs different ?
.90d7		55 51		eor $51,x			eor 	NSStatus+1,x
.90d9		10 0a		bpl $90e5			bpl 	_CDCSameSign
.90db		b5 50		lda $50,x			lda 	NSStatus,x 					; if first one is -ve
.90dd		30 14		bmi $90f3			bmi 	_CBCLess 					; return $FF
.90df						_CBCGreater:
.90df		a9 01		lda #$01			lda 	#1
.90e1		60		rts				rts
.90e2						_CBCEqual:
.90e2		a9 00		lda #$00			lda 	#0
.90e4		60		rts				rts
.90e5						_CDCSameSign:
.90e5		20 11 93	jsr $9311			jsr 	SubTopTwoStack 				; unsigned subtract
.90e8		20 6a 9f	jsr $9f6a			jsr 	NSMIsZero 					; or the mantissa together
.90eb		f0 f5		beq $90e2			beq 	_CBCEqual 					; -0 == 0
.90ed		b5 70		lda $70,x			lda 	NSMantissa3,x 				; sign of the result. if +ve return $01 else return $FF
.90ef		55 51		eor $51,x			eor 	NSStatus+1,x 				; however if both were -ve this is inverted
.90f1		10 ec		bpl $90df			bpl 	_CBCGreater
.90f3						_CBCLess:
.90f3		a9 ff		lda #$ff			lda 	#$FF
.90f5		60		rts				rts
.90f6						_CBCString:
.90f6		4c 82 92	jmp $9282			jmp 	CompareStrings
.90f9						_CBCFloat:
.90f9		4c cc 95	jmp $95cc			jmp 	CompareFloat
.90fc						CompareFixMinusZero:
.90fc		20 6a 9f	jsr $9f6a			jsr 	NSMIsZero
.90ff		d0 02		bne $9103			bne 	_CFXMZNotZero
.9101		74 50		stz $50,x			stz 	NSStatus,x
.9103						_CFXMZNotZero:
.9103		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/concat.asm

.9104						StringConcat:
.9104		b5 50		lda $50,x			lda 	NSStatus,x 					; check both strings
.9106		35 51		and $51,x			and 	NSStatus+1,x
.9108		29 18		and #$18			and 	#NSBTypeMask
.910a		c9 10		cmp #$10			cmp 	#NSTString
.910c		d0 50		bne $915e			bne		_SCType
.910e		64 38		stz $38				stz 	zTemp1 						; counting total length
.9110		e8		inx				inx
.9111		20 2f 91	jsr $912f			jsr 	_SCSetupZ0 					; setup for second
.9114		20 38 91	jsr $9138			jsr 	_SCLengthZ0 				; length for second
.9117		ca		dex				dex
.9118		20 2f 91	jsr $912f			jsr 	_SCSetupZ0 					; setup for first
.911b		20 38 91	jsr $9138			jsr 	_SCLengthZ0 				; length for first
.911e		a5 38		lda $38				lda 	zTemp1 						; allocate memory using total.
.9120		20 33 b1	jsr $b133			jsr 	StringTempAllocate
.9123		20 4f 91	jsr $914f			jsr 	_SCCopy 					; copy first out, using zTemp0 from above
.9126		e8		inx				inx
.9127		20 2f 91	jsr $912f			jsr 	_SCSetupZ0 					; copy second out
.912a		20 4f 91	jsr $914f			jsr 	_SCCopy
.912d		ca		dex				dex
.912e		60		rts				rts
.912f						_SCSetupZ0:
.912f		b5 58		lda $58,x			lda 	NSMantissa0,x
.9131		85 36		sta $36				sta 	zTemp0
.9133		b5 60		lda $60,x			lda 	NSMantissa1,x
.9135		85 37		sta $37				sta 	zTemp0+1
.9137		60		rts				rts
.9138						_SCLengthZ0:
.9138		5a		phy				phy
.9139		a0 00		ldy #$00			ldy 	#0
.913b						_SCLenLoop:
.913b		b1 36		lda ($36),y			lda 	(zTemp0),y
.913d		f0 0e		beq $914d			beq 	_SCLExit
.913f		c8		iny				iny
.9140		e6 38		inc $38				inc 	zTemp1
.9142		a5 38		lda $38				lda	 	zTemp1 						; check string too long.
.9144		c9 fd		cmp #$fd			cmp 	#253
.9146		d0 f3		bne $913b			bne		_SCLenLoop
.9148		a9 09		lda #$09		lda	#9
.914a		4c fd 8f	jmp $8ffd		jmp	ErrorHandler
.914d						_SCLExit:
.914d		7a		ply				ply
.914e		60		rts				rts
.914f						_SCCopy:
.914f		5a		phy				phy
.9150		a0 00		ldy #$00			ldy 	#0
.9152						_SCCopyLoop:
.9152		b1 36		lda ($36),y			lda 	(zTemp0),y
.9154		f0 06		beq $915c			beq 	_SCCExit
.9156		20 6c b1	jsr $b16c			jsr 	StringTempWrite
.9159		c8		iny				iny
.915a		80 f6		bra $9152			bra 	_SCCopyLoop
.915c						_SCCExit:
.915c		7a		ply				ply
.915d		60		rts				rts
.915e						_SCType:
.915e		4c d0 a0	jmp $a0d0			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/divide.asm

.9161						IntegerDivide:
.9161		fa		plx				plx
.9162		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9164		15 51		ora $51,x			ora 	NSStatus+1,x
.9166		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9167		0a		asl a				asl 	a
.9168		10 05		bpl $916f			bpl 	_NotRef
.916a		48		pha				pha
.916b		20 bf 97	jsr $97bf			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.916e		68		pla				pla
.916f						_NotRef:
.916f		0a		asl a				asl 	a
.9170		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9172		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9174		15 79		ora $79,x			ora 	NSExponent+1,x
.9176		f0 03		beq $917b			beq 	_IntegerCode 				; if clear, then we have two integers
.9178		4c d0 a0	jmp $a0d0			jmp 	TypeError 					; anything else, type mismatch.
.917b						_IntegerCode:
.917b		20 95 91	jsr $9195			jsr 	CheckDivideZero 			; do div zero check
.917e		20 c7 91	jsr $91c7			jsr 	Int32Divide 				; do the division
.9181		20 78 92	jsr $9278			jsr 	CalculateSign 				; calculate result sign
.9184						NSMCopyPlusTwoToZero:
.9184		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.9186		95 58		sta $58,x			sta 	NSMantissa0,x
.9188		b5 62		lda $62,x			lda 	NSMantissa1+2,x
.918a		95 60		sta $60,x			sta 	NSMantissa1,x
.918c		b5 6a		lda $6a,x			lda 	NSMantissa2+2,x
.918e		95 68		sta $68,x			sta 	NSMantissa2,x
.9190		b5 72		lda $72,x			lda 	NSMantissa3+2,x
.9192		95 70		sta $70,x			sta 	NSMantissa3,x
.9194		60		rts				rts
.9195						CheckDivideZero:
.9195		e8		inx				inx
.9196		20 6a 9f	jsr $9f6a			jsr 	NSMIsZero
.9199		f0 02		beq $919d			beq 	_CDVError
.919b		ca		dex				dex
.919c		60		rts				rts
.919d						_CDVError:
.919d		a9 03		lda #$03		lda	#3
.919f		4c fd 8f	jmp $8ffd		jmp	ErrorHandler
.91a2						IntegerModulus:
.91a2		fa		plx				plx
.91a3		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.91a5		15 51		ora $51,x			ora 	NSStatus+1,x
.91a7		0a		asl a				asl 	a 							; shift reference bit into sign bit
.91a8		0a		asl a				asl 	a
.91a9		10 05		bpl $91b0			bpl 	_NotRef
.91ab		48		pha				pha
.91ac		20 bf 97	jsr $97bf			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.91af		68		pla				pla
.91b0						_NotRef:
.91b0		0a		asl a				asl 	a
.91b1		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.91b3		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.91b5		15 79		ora $79,x			ora 	NSExponent+1,x
.91b7		f0 03		beq $91bc			beq 	_IntegerCode 				; if clear, then we have two integers
.91b9		4c d0 a0	jmp $a0d0			jmp 	TypeError 					; anything else, type mismatch.
.91bc						_IntegerCode:
.91bc						IntegerModulusNoCheck:
.91bc		20 95 91	jsr $9195			jsr 	CheckDivideZero 			; do div zero check
.91bf		20 c7 91	jsr $91c7			jsr 	Int32Divide 				; do the division
.91c2		16 50		asl $50,x			asl 	NSStatus,x 					; clear the sign bit.
.91c4		56 50		lsr $50,x			lsr 	NSStatus,x
.91c6		60		rts				rts
.91c7						Int32Divide:
.91c7		48		pha				pha 								; save AXY
.91c8		5a		phy				phy
.91c9		20 2b 9f	jsr $9f2b			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.91cc		20 44 9f	jsr $9f44			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.91cf		a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.91d1						_I32DivideLoop:
.91d1		e8		inx				inx
.91d2		e8		inx				inx
.91d3		20 57 9f	jsr $9f57			jsr 	NSMShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.91d6		ca		dex				dex
.91d7		ca		dex				dex
.91d8		20 58 9f	jsr $9f58			jsr 	NSMRotateLeft
.91db		20 06 92	jsr $9206			jsr 	DivideCheckSubtract 		; check if subtract possible
.91de		90 02		bcc $91e2			bcc 	_I32DivideNoCarryIn
.91e0		f6 5a		inc $5a,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.91e2						_I32DivideNoCarryIn:
.91e2		88		dey				dey 								; loop round till division completed.
.91e3		d0 ec		bne $91d1			bne 	_I32DivideLoop
.91e5		7a		ply				ply 								; restore AXY and exit
.91e6		68		pla				pla
.91e7		60		rts				rts
.91e8						Int32ShiftDivide:
.91e8		48		pha				pha 								; save AY
.91e9		5a		phy				phy
.91ea		e8		inx				inx 								; clear S[X+2]
.91eb		e8		inx				inx
.91ec		20 48 9f	jsr $9f48			jsr 	NSMSetZero
.91ef		ca		dex				dex
.91f0		ca		dex				dex
.91f1		a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.91f3						_I32SDLoop:
.91f3		20 06 92	jsr $9206			jsr 	DivideCheckSubtract 		; check if subtract possible
.91f6		e8		inx				inx
.91f7		e8		inx				inx
.91f8		20 58 9f	jsr $9f58			jsr 	NSMRotateLeft				; shift 64 bit FPA left, rotating carry in
.91fb		ca		dex				dex
.91fc		ca		dex				dex
.91fd		20 58 9f	jsr $9f58			jsr 	NSMRotateLeft
.9200		88		dey				dey 	 							; do 31 times
.9201		d0 f0		bne $91f3			bne 	_I32SDLoop
.9203		7a		ply				ply 								; restore AY and exit
.9204		68		pla				pla
.9205		60		rts				rts
.9206						DivideCheckSubtract:
.9206		20 11 93	jsr $9311			jsr 	SubTopTwoStack 				; subtract Stack[X+1] from Stack[X+0]
.9209		b0 04		bcs $920f			bcs 	_DCSExit 					; if carry set, then could do, exit
.920b		20 f7 92	jsr $92f7			jsr 	AddTopTwoStack 				; add it back in
.920e		18		clc				clc 								; and return False
.920f						_DCSExit:
.920f		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/multiply.asm

.9210						MulInteger:
.9210		fa		plx				plx
.9211		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9213		15 51		ora $51,x			ora 	NSStatus+1,x
.9215		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9216		0a		asl a				asl 	a
.9217		10 05		bpl $921e			bpl 	_NotRef
.9219		48		pha				pha
.921a		20 bf 97	jsr $97bf			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.921d		68		pla				pla
.921e						_NotRef:
.921e		0a		asl a				asl 	a 							; put MSB of type into A:7
.921f		30 09		bmi $922a			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.9221		b5 78		lda $78,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9223		15 79		ora $79,x			ora 	NSExponent+1,x
.9225		f0 06		beq $922d			beq 	_IntegerCode 				; if clear, then we have two integers
.9227		4c 8e 96	jmp $968e			jmp 	FloatingPointMultiply 							; otherwise at least one float.
.922a						_StringData:
.922a		4c da a0	jmp $a0da			jmp 	NotDoneError							; at least one string - don't know both are strings.
.922d						_IntegerCode:
.922d		20 3a 92	jsr $923a			jsr 	MultiplyShort
.9230		c9 00		cmp #$00			cmp 	#0
.9232		f0 05		beq $9239			beq 	_MIExit
.9234		a9 04		lda #$04		lda	#4
.9236		4c fd 8f	jmp $8ffd		jmp	ErrorHandler
.9239						_MIExit:
.9239		60		rts				rts
.923a						MultiplyShort:
.923a		5a		phy				phy 								; save Y
.923b		20 2b 9f	jsr $9f2b			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.923e		20 44 9f	jsr $9f44			jsr 	NSMSetZeroMantissaOnly 		; set mantissa S[X] to zero
.9241		a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.9243						_I32MLoop:
.9243		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.9245		15 62		ora $62,x			ora 	NSMantissa1+2,x
.9247		15 6a		ora $6a,x			ora 	NSMantissa2+2,x
.9249		15 72		ora $72,x			ora 	NSMantissa3+2,x
.924b		f0 25		beq $9272			beq 	_I32MExit 					; exit if zero
.924d		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.924f		29 01		and #$01			and 	#1
.9251		f0 0d		beq $9260			beq 	_I32MNoAdd
.9253		20 f7 92	jsr $92f7			jsr 	AddTopTwoStack 				; if so add S[X+1] to S[X+0]
.9256		b5 70		lda $70,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.9258		10 06		bpl $9260			bpl 	_I32MNoAdd
.925a						_I32ShiftRight:
.925a		20 61 9f	jsr $9f61			jsr 	NSMShiftRight 				; shift S[X] right
.925d		c8		iny				iny 								; increment shift count
.925e		80 09		bra $9269			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.9260						_I32MNoAdd:
.9260		34 71		bit $71,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.9262		70 f6		bvs $925a			bvs 	_I32ShiftRight 				; instead.
.9264		e8		inx				inx
.9265		20 57 9f	jsr $9f57			jsr 	NSMShiftLeft 				; shift additive S[X+1] left
.9268		ca		dex				dex
.9269						_I32MShiftUpper:
.9269		e8		inx				inx 								; shift S[X+2] right
.926a		e8		inx				inx
.926b		20 61 9f	jsr $9f61			jsr 	NSMShiftRight
.926e		ca		dex				dex
.926f		ca		dex				dex
.9270		80 d1		bra $9243			bra 	_I32MLoop 					; try again.
.9272						_I32MExit:
.9272		20 78 92	jsr $9278			jsr 	CalculateSign
.9275		98		tya				tya 								; shift in A
.9276		7a		ply				ply 								; restore Y and exit
.9277		60		rts				rts
.9278						CalculateSign:
.9278		b5 50		lda $50,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.927a		16 50		asl $50,x			asl 	NSStatus,x 					; shift result left
.927c		55 51		eor $51,x			eor 	NSStatus+1,x
.927e		0a		asl a				asl 	a 							; shift bit 7 into carry
.927f		76 50		ror $50,x			ror 	NSStatus,x 					; shift right into status byte.
.9281		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/scompare.asm

.9282						CompareStrings:
.9282		b5 50		lda $50,x			lda 	NSStatus,x 					; check both are strings
.9284		35 51		and $51,x			and 	NSStatus+1,x
.9286		29 10		and #$10			and 	#NSBIsString
.9288		f0 28		beq $92b2			beq 	_CSTypeError
.928a		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy string addresses to zTemp0/1
.928c		85 36		sta $36				sta 	zTemp0
.928e		b5 60		lda $60,x			lda 	NSMantissa1,x
.9290		85 37		sta $37				sta 	zTemp0+1
.9292		b5 59		lda $59,x			lda 	NSMantissa0+1,x
.9294		85 38		sta $38				sta 	zTemp1
.9296		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9298		85 39		sta $39				sta 	zTemp1+1
.929a		5a		phy				phy 								; save Y so we can access strings
.929b		a0 ff		ldy #$ff			ldy 	#$FF 						; -1 for pre increment.
.929d						_CSLoop:
.929d		c8		iny				iny
.929e		b1 36		lda ($36),y			lda 	(zTemp0),y 					; check if they are the same
.92a0		d1 38		cmp ($38),y			cmp 	(zTemp1),y
.92a2		d0 06		bne $92aa			bne 	_CSDifferent
.92a4		c9 00		cmp #$00			cmp 	#0 							; reached end ?
.92a6		d0 f5		bne $929d			bne 	_CSLoop 					; still comparing
.92a8						_CSExit:
.92a8		7a		ply				ply 								; reached end, return zero in A from EOS
.92a9		60		rts				rts
.92aa						_CSDifferent:
.92aa		a9 ff		lda #$ff			lda 	#255 						; if < return $FF
.92ac		90 fa		bcc $92a8			bcc		_CSExit
.92ae		a9 01		lda #$01			lda 	#1 							; otherwise return 1.
.92b0		80 f6		bra $92a8			bra 	_CSExit
.92b2						_CSTypeError:
.92b2		4c d0 a0	jmp $a0d0			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/shifts.asm

.92b5						ShiftLeft:
.92b5		38		sec				sec 								; common code, carry determines which way.
.92b6		80 01		bra $92b9			bra 	ShiftMain
.92b8						ShiftRight:
.92b8		18		clc				clc
.92b9						ShiftMain:
.92b9		fa		plx				plx 								; restore X
.92ba		08		php				php 								; save direction
.92bb		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.92bd		15 51		ora $51,x			ora 	NSStatus+1,x
.92bf		0a		asl a				asl 	a 							; shift reference bit into sign bit
.92c0		0a		asl a				asl 	a
.92c1		10 05		bpl $92c8			bpl 	_NotRef
.92c3		48		pha				pha
.92c4		20 bf 97	jsr $97bf			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.92c7		68		pla				pla
.92c8						_NotRef:
.92c8		0a		asl a				asl 	a
.92c9		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.92cb		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.92cd		15 79		ora $79,x			ora 	NSExponent+1,x
.92cf		f0 03		beq $92d4			beq 	_IntegerCode 				; if clear, then we have two integers
.92d1		4c d0 a0	jmp $a0d0			jmp 	TypeError 					; anything else, type mismatch.
.92d4						_IntegerCode:
.92d4		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; check number < 32
.92d6		29 e0		and #$e0			and 	#$E0
.92d8		15 61		ora $61,x			ora 	NSMantissa1+1,x
.92da		15 69		ora $69,x			ora 	NSMantissa2+1,x
.92dc		15 71		ora $71,x			ora 	NSMantissa3+1,x
.92de		d0 12		bne $92f2			bne 	_SMExit0 					; if >= 32 it will always return zero.
.92e0						_SMLoop:
.92e0		d6 59		dec $59,x			dec 	NSMantissa0+1,x 			; predecrement, could do << 0
.92e2		30 11		bmi $92f5			bmi 	_SMExit 					; exit if done.
.92e4		28		plp				plp 								; restore direction setting
.92e5		08		php				php
.92e6		90 05		bcc $92ed			bcc 	_SMRight
.92e8		20 57 9f	jsr $9f57			jsr 	NSMShiftLeft 				; shift left if CS
.92eb		80 f3		bra $92e0			bra 	_SMLoop
.92ed						_SMRight:
.92ed		20 61 9f	jsr $9f61			jsr 	NSMShiftRight 				; shift right if CC
.92f0		80 ee		bra $92e0			bra 	_SMLoop
.92f2						_SMExit0:
.92f2		20 48 9f	jsr $9f48			jsr 	NSMSetZero 					; return zero.
.92f5						_SMExit:
.92f5		28		plp				plp 								; throw direction
.92f6		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/simple.asm

.92f7						AddTopTwoStack:
.92f7		18		clc				clc
.92f8		b5 58		lda $58,x			lda		NSMantissa0,x
.92fa		75 59		adc $59,x			adc 		NSMantissa0+1,x
.92fc		95 58		sta $58,x			sta 	NSMantissa0,x
.92fe		b5 60		lda $60,x			lda		NSMantissa1,x
.9300		75 61		adc $61,x			adc 		NSMantissa1+1,x
.9302		95 60		sta $60,x			sta 	NSMantissa1,x
.9304		b5 68		lda $68,x			lda		NSMantissa2,x
.9306		75 69		adc $69,x			adc 		NSMantissa2+1,x
.9308		95 68		sta $68,x			sta 	NSMantissa2,x
.930a		b5 70		lda $70,x			lda		NSMantissa3,x
.930c		75 71		adc $71,x			adc 		NSMantissa3+1,x
.930e		95 70		sta $70,x			sta 	NSMantissa3,x
.9310		60		rts				rts
.9311						SubTopTwoStack:
.9311		38		sec				sec
.9312		b5 58		lda $58,x			lda		NSMantissa0,x
.9314		f5 59		sbc $59,x			sbc 		NSMantissa0+1,x
.9316		95 58		sta $58,x			sta 	NSMantissa0,x
.9318		b5 60		lda $60,x			lda		NSMantissa1,x
.931a		f5 61		sbc $61,x			sbc 		NSMantissa1+1,x
.931c		95 60		sta $60,x			sta 	NSMantissa1,x
.931e		b5 68		lda $68,x			lda		NSMantissa2,x
.9320		f5 69		sbc $69,x			sbc 		NSMantissa2+1,x
.9322		95 68		sta $68,x			sta 	NSMantissa2,x
.9324		b5 70		lda $70,x			lda		NSMantissa3,x
.9326		f5 71		sbc $71,x			sbc 		NSMantissa3+1,x
.9328		95 70		sta $70,x			sta 	NSMantissa3,x
.932a		60		rts				rts
.932b						AddInteger:
.932b		fa		plx				plx
.932c		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.932e		15 51		ora $51,x			ora 	NSStatus+1,x
.9330		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9331		0a		asl a				asl 	a
.9332		10 05		bpl $9339			bpl 	_NotRef
.9334		48		pha				pha
.9335		20 bf 97	jsr $97bf			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9338		68		pla				pla
.9339						_NotRef:
.9339		0a		asl a				asl 	a 							; put MSB of type into A:7
.933a		30 09		bmi $9345			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.933c		b5 78		lda $78,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.933e		15 79		ora $79,x			ora 	NSExponent+1,x
.9340		f0 06		beq $9348			beq 	_IntegerCode 				; if clear, then we have two integers
.9342		4c 3e 95	jmp $953e			jmp 	FloatingPointAdd 							; otherwise at least one float.
.9345						_StringData:
.9345		4c 04 91	jmp $9104			jmp 	StringConcat							; at least one string - don't know both are strings.
.9348						_IntegerCode:
.9348						AddCode:
.9348		b5 50		lda $50,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.934a		55 51		eor $51,x			eor 	NSStatus+1,x
.934c		10 a9		bpl $92f7			bpl 	AddTopTwoStack
.934e		20 11 93	jsr $9311			jsr 	SubTopTwoStack 				; do a physical subtraction
.9351		34 70		bit $70,x			bit 	NSMantissa3,x 				; result is +ve, okay
.9353		10 07		bpl $935c			bpl 	_AddExit
.9355		b5 51		lda $51,x			lda 	NSStatus+1,x 				; sign is that of 2nd value
.9357		95 50		sta $50,x			sta 	NSStatus,x
.9359		20 11 9f	jsr $9f11			jsr 	NSMNegateMantissa 			; negate the mantissa and exit
.935c						_AddExit:
.935c		20 6a 9f	jsr $9f6a			jsr 	NSMIsZero 					; check for -0
.935f		d0 02		bne $9363			bne 	_AddNonZero
.9361		74 50		stz $50,x			stz 	NSStatus,x
.9363						_AddNonZero:
.9363		60		rts				rts
.9364						SubInteger:
.9364		fa		plx				plx
.9365		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9367		15 51		ora $51,x			ora 	NSStatus+1,x
.9369		0a		asl a				asl 	a 							; shift reference bit into sign bit
.936a		0a		asl a				asl 	a
.936b		10 05		bpl $9372			bpl 	_NotRef
.936d		48		pha				pha
.936e		20 bf 97	jsr $97bf			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9371		68		pla				pla
.9372						_NotRef:
.9372		0a		asl a				asl 	a 							; put MSB of type into A:7
.9373		30 09		bmi $937e			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.9375		b5 78		lda $78,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9377		15 79		ora $79,x			ora 	NSExponent+1,x
.9379		f0 06		beq $9381			beq 	_IntegerCode 				; if clear, then we have two integers
.937b		4c 43 95	jmp $9543			jmp 	FloatingPointSub 							; otherwise at least one float.
.937e						_StringData:
.937e		4c da a0	jmp $a0da			jmp 	NotDoneError							; at least one string - don't know both are strings.
.9381						_IntegerCode:
.9381		b5 51		lda $51,x			lda 	NSStatus+1,x 				; negate the second value.
.9383		49 80		eor #$80			eor 	#$80
.9385		95 51		sta $51,x			sta 	NSStatus+1,x
.9387		80 bf		bra $9348			bra 	AddCode 					; and do the same code as add.
.9389						AndInteger:
.9389		fa		plx				plx
.938a		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.938c		15 51		ora $51,x			ora 	NSStatus+1,x
.938e		0a		asl a				asl 	a 							; shift reference bit into sign bit
.938f		0a		asl a				asl 	a
.9390		10 05		bpl $9397			bpl 	_NotRef
.9392		48		pha				pha
.9393		20 bf 97	jsr $97bf			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9396		68		pla				pla
.9397						_NotRef:
.9397		0a		asl a				asl 	a
.9398		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.939a		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.939c		15 79		ora $79,x			ora 	NSExponent+1,x
.939e		f0 03		beq $93a3			beq 	_IntegerCode 				; if clear, then we have two integers
.93a0		4c d0 a0	jmp $a0d0			jmp 	TypeError 					; anything else, type mismatch.
.93a3						_IntegerCode:
.93a3		b5 58		lda $58,x			lda		NSMantissa0,x
.93a5		35 59		and $59,x			and 		NSMantissa0+1,x
.93a7		95 58		sta $58,x			sta 	NSMantissa0,x
.93a9		b5 60		lda $60,x			lda		NSMantissa1,x
.93ab		35 61		and $61,x			and 		NSMantissa1+1,x
.93ad		95 60		sta $60,x			sta 	NSMantissa1,x
.93af		b5 68		lda $68,x			lda		NSMantissa2,x
.93b1		35 69		and $69,x			and 		NSMantissa2+1,x
.93b3		95 68		sta $68,x			sta 	NSMantissa2,x
.93b5		b5 70		lda $70,x			lda		NSMantissa3,x
.93b7		35 71		and $71,x			and 		NSMantissa3+1,x
.93b9		95 70		sta $70,x			sta 	NSMantissa3,x
.93bb		74 50		stz $50,x			stz	 	NSStatus,x 					; ignore sign.
.93bd		60		rts				rts
.93be						OraInteger:
.93be		fa		plx				plx
.93bf		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.93c1		15 51		ora $51,x			ora 	NSStatus+1,x
.93c3		0a		asl a				asl 	a 							; shift reference bit into sign bit
.93c4		0a		asl a				asl 	a
.93c5		10 05		bpl $93cc			bpl 	_NotRef
.93c7		48		pha				pha
.93c8		20 bf 97	jsr $97bf			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.93cb		68		pla				pla
.93cc						_NotRef:
.93cc		0a		asl a				asl 	a
.93cd		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.93cf		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.93d1		15 79		ora $79,x			ora 	NSExponent+1,x
.93d3		f0 03		beq $93d8			beq 	_IntegerCode 				; if clear, then we have two integers
.93d5		4c d0 a0	jmp $a0d0			jmp 	TypeError 					; anything else, type mismatch.
.93d8						_IntegerCode:
.93d8		b5 58		lda $58,x			lda		NSMantissa0,x
.93da		15 59		ora $59,x			ora 		NSMantissa0+1,x
.93dc		95 58		sta $58,x			sta 	NSMantissa0,x
.93de		b5 60		lda $60,x			lda		NSMantissa1,x
.93e0		15 61		ora $61,x			ora 		NSMantissa1+1,x
.93e2		95 60		sta $60,x			sta 	NSMantissa1,x
.93e4		b5 68		lda $68,x			lda		NSMantissa2,x
.93e6		15 69		ora $69,x			ora 		NSMantissa2+1,x
.93e8		95 68		sta $68,x			sta 	NSMantissa2,x
.93ea		b5 70		lda $70,x			lda		NSMantissa3,x
.93ec		15 71		ora $71,x			ora 		NSMantissa3+1,x
.93ee		95 70		sta $70,x			sta 	NSMantissa3,x
.93f0		74 50		stz $50,x			stz	 	NSStatus,x 					; ignore sign.
.93f2		60		rts				rts
.93f3						EorInteger:
.93f3		fa		plx				plx
.93f4		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.93f6		15 51		ora $51,x			ora 	NSStatus+1,x
.93f8		0a		asl a				asl 	a 							; shift reference bit into sign bit
.93f9		0a		asl a				asl 	a
.93fa		10 05		bpl $9401			bpl 	_NotRef
.93fc		48		pha				pha
.93fd		20 bf 97	jsr $97bf			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9400		68		pla				pla
.9401						_NotRef:
.9401		0a		asl a				asl 	a
.9402		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9404		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9406		15 79		ora $79,x			ora 	NSExponent+1,x
.9408		f0 03		beq $940d			beq 	_IntegerCode 				; if clear, then we have two integers
.940a		4c d0 a0	jmp $a0d0			jmp 	TypeError 					; anything else, type mismatch.
.940d						_IntegerCode:
.940d		b5 58		lda $58,x			lda		NSMantissa0,x
.940f		55 59		eor $59,x			eor 		NSMantissa0+1,x
.9411		95 58		sta $58,x			sta 	NSMantissa0,x
.9413		b5 60		lda $60,x			lda		NSMantissa1,x
.9415		55 61		eor $61,x			eor 		NSMantissa1+1,x
.9417		95 60		sta $60,x			sta 	NSMantissa1,x
.9419		b5 68		lda $68,x			lda		NSMantissa2,x
.941b		55 69		eor $69,x			eor 		NSMantissa2+1,x
.941d		95 68		sta $68,x			sta 	NSMantissa2,x
.941f		b5 70		lda $70,x			lda		NSMantissa3,x
.9421		55 71		eor $71,x			eor 		NSMantissa3+1,x
.9423		95 70		sta $70,x			sta 	NSMantissa3,x
.9425		74 50		stz $50,x			stz	 	NSStatus,x 					; ignore sign.
.9427		60		rts				rts
.9428						WordIndirect:
.9428		fa		plx				plx
.9429		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.942b		15 51		ora $51,x			ora 	NSStatus+1,x
.942d		0a		asl a				asl 	a 							; shift reference bit into sign bit
.942e		0a		asl a				asl 	a
.942f		10 05		bpl $9436			bpl 	_NotRef
.9431		48		pha				pha
.9432		20 bf 97	jsr $97bf			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9435		68		pla				pla
.9436						_NotRef:
.9436		0a		asl a				asl 	a
.9437		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9439		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.943b		15 79		ora $79,x			ora 	NSExponent+1,x
.943d		f0 03		beq $9442			beq 	_IntegerCode 				; if clear, then we have two integers
.943f		4c d0 a0	jmp $a0d0			jmp 	TypeError 					; anything else, type mismatch.
.9442						_IntegerCode:
.9442		20 48 93	jsr $9348			jsr 	AddCode 					; add the two values
.9445		a9 22		lda #$22			lda 	#NSBIsReference+2 			; make a 2 byte reference
.9447		95 50		sta $50,x			sta 	NSStatus,x
.9449		60		rts				rts
.944a						ByteIndirect:
.944a		fa		plx				plx
.944b		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.944d		15 51		ora $51,x			ora 	NSStatus+1,x
.944f		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9450		0a		asl a				asl 	a
.9451		10 05		bpl $9458			bpl 	_NotRef
.9453		48		pha				pha
.9454		20 bf 97	jsr $97bf			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9457		68		pla				pla
.9458						_NotRef:
.9458		0a		asl a				asl 	a
.9459		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.945b		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.945d		15 79		ora $79,x			ora 	NSExponent+1,x
.945f		f0 03		beq $9464			beq 	_IntegerCode 				; if clear, then we have two integers
.9461		4c d0 a0	jmp $a0d0			jmp 	TypeError 					; anything else, type mismatch.
.9464						_IntegerCode:
.9464		20 48 93	jsr $9348			jsr 	AddCode 					; add the two values
.9467		a9 21		lda #$21			lda 	#NSBIsReference+1 			; make a 1 byte reference
.9469		95 50		sta $50,x			sta 	NSStatus,x
.946b		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/tostring.asm

.946c						ConvertInt16:
.946c		85 58		sta $58				sta 	NSMantissa0 				; set up as 32 bit conversion
.946e		86 60		stx $60				stx 	NSMantissa1
.9470		64 68		stz $68				stz 	NSMantissa2
.9472		64 70		stz $70				stz 	NSMantissa3
.9474		64 50		stz $50				stz 	NSStatus 					; positive integer
.9476		a2 00		ldx #$00			ldx 	#0 							; stack level
.9478		a9 0a		lda #$0a			lda 	#10 						; base 10 decimal.
.947a		80 00		bra $947c			bra 	ConvertInt32
.947c						ConvertInt32:
.947c		5a		phy				phy
.947d		a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.947f		24 50		bit $50				bit 	NSStatus 					; output a - if not negative.
.9481		10 08		bpl $948b			bpl 	_CI32NotNeg
.9483		48		pha				pha
.9484		a9 2d		lda #$2d			lda 	#'-'
.9486		99 27 06	sta $0627,y			sta 	numberBuffer,y
.9489		c8		iny				iny
.948a		68		pla				pla
.948b						_CI32NotNeg:
.948b		20 99 94	jsr $9499			jsr 	_CI32DivideConvert 			; recursive conversion
.948e		a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.9490		99 27 06	sta $0627,y			sta 	numberBuffer,y
.9493		7a		ply				ply
.9494		a2 06		ldx #$06			ldx 	#numberBuffer >> 8 			; return address in XA
.9496		a9 27		lda #$27			lda 	#numberBuffer & $FF
.9498		60		rts				rts
.9499						_CI32DivideConvert:
.9499		e8		inx				inx 								; write to next slot up
.949a		20 4a 9f	jsr $9f4a			jsr 	NSMSetByte 		 			; write the base out.
.949d		ca		dex				dex
.949e		20 c7 91	jsr $91c7			jsr 	Int32Divide 				; divide
.94a1		b5 58		lda $58,x			lda 	NSMantissa0,x 				; save remainder
.94a3		48		pha				pha
.94a4		20 84 91	jsr $9184			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.94a7		20 6a 9f	jsr $9f6a			jsr 	NSMIsZero 					; is it zero ?
.94aa		f0 05		beq $94b1			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.94ac		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.94ae		20 99 94	jsr $9499			jsr 	_CI32DivideConvert 			; and recusrively call.
.94b1						_CI32NoRecurse:
.94b1		68		pla				pla 								; remainder
.94b2		c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII, allowing for hexadecimal.
.94b4		90 02		bcc $94b8			bcc 	_CI32NotHex
.94b6		69 26		adc #$26			adc 	#6+32
.94b8						_CI32NotHex:
.94b8		69 30		adc #$30			adc 	#48
.94ba		99 27 06	sta $0627,y			sta 	numberBuffer,y 				; write out and exit
.94bd		c8		iny				iny
.94be		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/expression.asm


;******  Processing file: ./common/expressions/../generated/precedence.dat

.94bf						PrecedenceLevel:
>94bf		04					.byte	 4	; $00 <<
>94c0		02					.byte	 2	; $01 <=
>94c1		02					.byte	 2	; $02 <>
>94c2		00					.byte	 0	; $03 !!3
>94c3		00					.byte	 0	; $04 ><
>94c4		02					.byte	 2	; $05 >=
>94c5		04					.byte	 4	; $06 >>
>94c6		00					.byte	 0	; $07 !!7
>94c7		00					.byte	 0	; $08 !!8
>94c8		00					.byte	 0	; $09 !!9
>94c9		00					.byte	 0	; $0a !!10
>94ca		00					.byte	 0	; $0b !!11
>94cb		00					.byte	 0	; $0c !!12
>94cc		00					.byte	 0	; $0d !!13
>94cd		00					.byte	 0	; $0e !!14
>94ce		00					.byte	 0	; $0f !!15
>94cf		00					.byte	 0	; $10 @
>94d0		00					.byte	 0	; $11 !!17
>94d1		00					.byte	 0	; $12 !!18
>94d2		00					.byte	 0	; $13 [
>94d3		04					.byte	 4	; $14 \
>94d4		00					.byte	 0	; $15 ]
>94d5		01					.byte	 1	; $16 ^
>94d6		00					.byte	 0	; $17 _
>94d7		00					.byte	 0	; $18 `
>94d8		00					.byte	 0	; $19 !!25
>94d9		00					.byte	 0	; $1a !!26
>94da		00					.byte	 0	; $1b {
>94db		01					.byte	 1	; $1c |
>94dc		00					.byte	 0	; $1d }
>94dd		00					.byte	 0	; $1e ~
>94de		00					.byte	 0	; $1f [7m<7F>[m
>94df		00					.byte	 0	; $20
>94e0		05					.byte	 5	; $21 !
>94e1		00					.byte	 0	; $22 "
>94e2		00					.byte	 0	; $23 #
>94e3		05					.byte	 5	; $24 $
>94e4		04					.byte	 4	; $25 %
>94e5		01					.byte	 1	; $26 &
>94e6		00					.byte	 0	; $27 '
>94e7		00					.byte	 0	; $28 (
>94e8		00					.byte	 0	; $29 )
>94e9		04					.byte	 4	; $2a *
>94ea		03					.byte	 3	; $2b +
>94eb		00					.byte	 0	; $2c ,
>94ec		03					.byte	 3	; $2d -
>94ed		00					.byte	 0	; $2e .
>94ee		04					.byte	 4	; $2f /
>94ef		00					.byte	 0	; $30 0
>94f0		00					.byte	 0	; $31 1
>94f1		00					.byte	 0	; $32 2
>94f2		00					.byte	 0	; $33 3
>94f3		00					.byte	 0	; $34 4
>94f4		00					.byte	 0	; $35 5
>94f5		00					.byte	 0	; $36 6
>94f6		00					.byte	 0	; $37 7
>94f7		00					.byte	 0	; $38 8
>94f8		00					.byte	 0	; $39 9
>94f9		00					.byte	 0	; $3a :
>94fa		00					.byte	 0	; $3b ;
>94fb		02					.byte	 2	; $3c <
>94fc		02					.byte	 2	; $3d =
>94fd		02					.byte	 2	; $3e >
>94fe		05					.byte	 5	; $3f ?

;******  Return to file: ./common/expressions/expression.asm

.94ff						EvaluateExpressionAt0:
.94ff		a2 00		ldx #$00			ldx 	#0 							; bottom stack level
.9501						EvaluateExpression:
.9501		a9 00		lda #$00			lda 	#0 							; lowest precedence level
.9503						EvaluateExpressionAtPrecedence:
.9503		48		pha				pha 								; save precedence level
.9504		20 4b 99	jsr $994b			jsr 	EvaluateTerm 				; evaluate term into level X.
.9507		68		pla				pla 								; restore precedence level.
.9508						_EXPRLoop:
.9508		85 36		sta $36				sta 	zTemp0 						; save current precedence level.
.950a		b1 30		lda ($30),y			lda 	(codePtr),y
.950c		c9 40		cmp #$40			cmp		#$40 						; if >= $40 cannot be an operator
.950e		b0 25		bcs $9535			bcs 	_EXPRExit
.9510		da		phx				phx 								; read the operator precedence
.9511		aa		tax				tax
.9512		bd bf 94	lda $94bf,x			lda 	PrecedenceLevel,x
.9515		fa		plx				plx
.9516		c9 00		cmp #$00			cmp 	#0							; if zero exit (not an operator)
.9518		f0 1b		beq $9535			beq 	_EXPRExit
.951a		85 37		sta $37				sta 	zTemp0+1 					; save operator precedence level.
.951c		a5 36		lda $36				lda 	zTemp0 						; compare current precedence vs. operator precedence
.951e		c5 37		cmp $37				cmp 	zTemp0+1
.9520		b0 13		bcs $9535			bcs		_EXPRExit 					; if current >= operator exit
.9522		48		pha				pha 								; save current precedence.
.9523		b1 30		lda ($30),y			lda 	(codePtr),y
.9525		c8		iny				iny
.9526		48		pha				pha
.9527		a5 37		lda $37				lda 	zTemp0+1 					; get operator precedence level
.9529		e8		inx				inx 								; work out the right hand side.
.952a		20 03 95	jsr $9503			jsr 	EvaluateExpressionAtPrecedence
.952d		ca		dex				dex
.952e		68		pla				pla 								; get operator, call the code.
.952f		20 38 95	jsr $9538			jsr 	_EXPRCaller
.9532		68		pla				pla 								; restore precedence level
.9533		80 d3		bra $9508			bra 	_EXPRLoop 					; and go round.
.9535						_EXPRExit:
.9535		a5 36		lda $36				lda 	zTemp0 						; A = current precedence level.
.9537		60		rts				rts
.9538						_EXPRCaller:
.9538		da		phx				phx 								; save on stack, first thing is to restore it
.9539		0a		asl a				asl 	a 							; double so can use vectors into X
.953a		aa		tax				tax
.953b		7c fc 8c	jmp ($8cfc,x)			jmp 	(VectorSetPunc,x) 			; and go to the code.

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/addsub.asm

.953e						FloatingPointAdd:
.953e		20 b4 96	jsr $96b4			jsr 	FloatPrepare 				; prepare for floats
.9541		80 09		bra $954c			bra 	FloatAdd
.9543						FloatingPointSub:
.9543		20 b4 96	jsr $96b4			jsr 	FloatPrepare 				; prepare for floats
.9546						FloatSubtract:
.9546		b5 51		lda $51,x			lda 	NSStatus+1,x 				; negate FPB
.9548		49 80		eor #$80			eor 	#$80
.954a		95 51		sta $51,x			sta 	NSStatus+1,x				; and fall through.
.954c						FloatAdd:
.954c		48		pha				pha
.954d		5a		phy				phy
.954e		20 c3 96	jsr $96c3			jsr 	NSNormalise 				; normalise S[X]
.9551		f0 51		beq $95a4			beq 	_FAReturn1
.9553		e8		inx				inx 								; normalise S[X+1]
.9554		20 c3 96	jsr $96c3			jsr 	NSNormalise
.9557		ca		dex				dex
.9558		c9 00		cmp #$00			cmp 	#0
.955a		f0 60		beq $95bc			beq 	_FAExit 					; if so, just return A
.955c		b5 78		lda $78,x			lda 	NSExponent,x 				; are the exponents the same ?
.955e		d5 79		cmp $79,x			cmp 	NSExponent+1,x
.9560		f0 18		beq $957a			beq 	_FAExponentsEqual
.9562		b5 78		lda $78,x			lda 	NSExponent,x 				; work out the larger exponent
.9564		a8		tay				tay
.9565		38		sec				sec 								; do a signed comparison of the exponents.
.9566		f5 79		sbc $79,x			sbc 	NSExponent+1,x
.9568		50 02		bvc $956c			bvc 	_FANoSignedChange
.956a		49 80		eor #$80			eor 	#$80
.956c						_FANoSignedChange:
.956c		29 80		and #$80			and 	#$80
.956e		10 02		bpl $9572			bpl 	_FAHaveMax
.9570		b4 79		ldy $79,x			ldy 	NSExponent+1,x
.9572						_FAHaveMax:
.9572		20 bf 95	jsr $95bf			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.9575		e8		inx				inx
.9576		20 bf 95	jsr $95bf			jsr 	_FAShiftToExponent
.9579		ca		dex				dex
.957a						_FAExponentsEqual:
.957a		b5 50		lda $50,x			lda 	NSStatus,x 					; are the signs the same
.957c		55 51		eor $51,x			eor 	NSStatus+1,x
.957e		30 0e		bmi $958e			bmi 	_FADifferentSigns
.9580		20 f7 92	jsr $92f7			jsr 	AddTopTwoStack 				; do the add of the mantissae
.9583		b5 70		lda $70,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.9585		10 35		bpl $95bc			bpl 	_FAExit 					; if no, we are done.
.9587		20 61 9f	jsr $9f61			jsr 	NSMShiftRight 				; shift A right, renormalising it.
.958a		f6 78		inc $78,x			inc 	NSExponent,x 				; bump the exponent and exit
.958c		80 2e		bra $95bc			bra 	_FAExit
.958e						_FADifferentSigns:
.958e		20 11 93	jsr $9311			jsr 	SubTopTwoStack 				; subtract mantissa B from A
.9591		b5 70		lda $70,x			lda 	NSMantissa3,x 				; is the result negative ?
.9593		10 06		bpl $959b			bpl 	_FACheckZero 				; if no, check for -0
.9595		20 0a 9f	jsr $9f0a			jsr 	NSMNegate 					; netate result
.9598		20 11 9f	jsr $9f11			jsr 	NSMNegateMantissa 			; negate (2'c) the mantissa
.959b						_FACheckZero:
.959b		20 6a 9f	jsr $9f6a			jsr 	NSMIsZero	 				; check for -0
.959e		d0 1c		bne $95bc			bne 	_FAExit
.95a0		74 50		stz $50,x			stz 	NSStatus,x
.95a2		80 18		bra $95bc			bra 	_FAExit
.95a4						_FAReturn1:
.95a4		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; called when S(X) is zero.
.95a6		95 58		sta $58,x			sta 	NSMantissa0,x
.95a8		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.95aa		95 60		sta $60,x			sta 	NSMantissa1,x
.95ac		b5 69		lda $69,x			lda 	NSMantissa2+1,x
.95ae		95 68		sta $68,x			sta 	NSMantissa2,x
.95b0		b5 71		lda $71,x			lda 	NSMantissa3+1,x
.95b2		95 70		sta $70,x			sta 	NSMantissa3,x
.95b4		b5 79		lda $79,x			lda 	NSExponent+1,x
.95b6		95 78		sta $78,x			sta 	NSExponent,x
.95b8		b5 51		lda $51,x			lda 	NSStatus+1,x
.95ba		95 50		sta $50,x			sta 	NSStatus,x
.95bc						_FAExit:
.95bc		7a		ply				ply
.95bd		68		pla				pla
.95be		60		rts				rts
.95bf						_FAShiftToExponent:
.95bf						_FAShiftToExponent2:
.95bf		98		tya				tya 								; compare Y to exponent
.95c0		d5 78		cmp $78,x			cmp 	NSExponent,x 				; reached the exponent required ?
.95c2		f0 07		beq $95cb			beq 	_FASEExit 					; exit if so.
.95c4		20 61 9f	jsr $9f61			jsr 	NSMShiftRight	 			; shift the mantissa right
.95c7		f6 78		inc $78,x			inc 	NSExponent,x 				; increment exponent
.95c9		80 f4		bra $95bf			bra 	_FAShiftToExponent2
.95cb						_FASEExit:
.95cb		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/compare.asm

.95cc						CompareFloat:
.95cc		20 46 95	jsr $9546			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.95cf		b5 60		lda $60,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.95d1		29 f8		and #$f8			and 	#$F8
.95d3		15 68		ora $68,x			ora 	NSMantissa2,x
.95d5		15 70		ora $70,x			ora 	NSMantissa3,x
.95d7		f0 08		beq $95e1			beq 	_FCExit 					; zero, so approximately identical
.95d9		a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.95db		34 50		bit $50,x			bit 	NSStatus,x
.95dd		10 02		bpl $95e1			bpl 	_FCExit
.95df						_FCNegative:
.95df		a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.95e1						_FCExit:
.95e1		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/divide.asm

.95e2						FDivideCommand:
.95e2		fa		plx				plx	 								; restore stack position
.95e3		20 b4 96	jsr $96b4			jsr 	FloatPrepare 				; prepare for floats
.95e6						FloatDivide:
.95e6		48		pha				pha
.95e7		e8		inx				inx
.95e8		20 c3 96	jsr $96c3			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.95eb		ca		dex				dex
.95ec		c9 00		cmp #$00			cmp 	#0
.95ee		f0 1d		beq $960d			beq 	_FDZero
.95f0		20 c3 96	jsr $96c3			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.95f3		f0 16		beq $960b			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.95f5		20 e8 91	jsr $91e8			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.95f8		20 84 91	jsr $9184			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.95fb		20 c3 96	jsr $96c3			jsr		NSNormalise 				; renormalise
.95fe		20 78 92	jsr $9278			jsr 	CalculateSign 				; calculate result sign
.9601		b5 78		lda $78,x			lda 	NSExponent,x 				; calculate exponent
.9603		38		sec				sec
.9604		f5 79		sbc $79,x			sbc 	NSExponent+1,x
.9606		38		sec				sec
.9607		e9 1e		sbc #$1e			sbc 	#30
.9609		95 78		sta $78,x			sta 	NSExponent,x
.960b						_FDExit:
.960b		68		pla				pla
.960c		60		rts				rts
.960d						_FDZero:
.960d		a9 03		lda #$03		lda	#3
.960f		4c fd 8f	jmp $8ffd		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/fractional.asm

.9612						FloatFractionalPart:
.9612		5a		phy				phy
.9613		b5 50		lda $50,x			lda 	NSStatus,x 					; take absolute value
.9615		29 7f		and #$7f			and 	#$7F
.9617		95 50		sta $50,x			sta 	NSStatus,x
.9619		20 c3 96	jsr $96c3			jsr 	NSNormalise
.961c		b5 78		lda $78,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.961e		38		sec				sec
.961f		e9 e0		sbc #$e0			sbc 	#$E0
.9621		90 29		bcc $964c			bcc 	_FFPExit 					; already fractional
.9623		c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.9625		b0 22		bcs $9649			bcs 	_FFPZero
.9627		a8		tay				tay 								; put count to do in Y
.9628		b5 70		lda $70,x			lda 	NSMantissa3,x 				; do each in turn.
.962a		20 4e 96	jsr $964e			jsr 	_FFPPartial
.962d		95 70		sta $70,x			sta 	NSMantissa3,x
.962f		b5 68		lda $68,x			lda 	NSMantissa2,x
.9631		20 4e 96	jsr $964e			jsr 	_FFPPartial
.9634		95 68		sta $68,x			sta 	NSMantissa2,x
.9636		b5 60		lda $60,x			lda 	NSMantissa1,x
.9638		20 4e 96	jsr $964e			jsr 	_FFPPartial
.963b		95 60		sta $60,x			sta 	NSMantissa1,x
.963d		b5 58		lda $58,x			lda 	NSMantissa0,x
.963f		20 4e 96	jsr $964e			jsr 	_FFPPartial
.9642		95 58		sta $58,x			sta 	NSMantissa0,x
.9644		20 6a 9f	jsr $9f6a			jsr 	NSMIsZero 					; zeroed check.
.9647		d0 03		bne $964c			bne 	_FFPExit
.9649						_FFPZero:
.9649		20 48 9f	jsr $9f48			jsr 	NSMSetZero
.964c						_FFPExit:
.964c		7a		ply				ply
.964d		60		rts				rts
.964e						_FFPPartial:
.964e		c0 00		cpy #$00			cpy 	#0 							; no more to do
.9650		f0 17		beq $9669			beq 	_FFFPPExit
.9652		c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.9654		b0 0c		bcs $9662			bcs 	_FFFPPWholeByte
.9656		5a		phy				phy
.9657						_FFFPPLeft:
.9657		0a		asl a				asl 	a
.9658		88		dey				dey
.9659		d0 fc		bne $9657			bne 	_FFFPPLeft
.965b		7a		ply				ply
.965c						_FFFPPRight:
.965c		4a		lsr a				lsr 	a
.965d		88		dey				dey
.965e		d0 fc		bne $965c			bne 	_FFFPPRight
.9660		80 07		bra $9669			bra 	_FFFPPExit
.9662						_FFFPPWholeByte:
.9662		98		tya				tya 								; subtract 8 from count
.9663		38		sec				sec
.9664		e9 08		sbc #$08			sbc 	#8
.9666		a8		tay				tay
.9667		a9 00		lda #$00			lda 	#0 							; and clear all
.9669						_FFFPPExit:
.9669		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/integer.asm

.966a						FloatIntegerPart:
.966a		48		pha				pha
.966b		b5 78		lda $78,x			lda 	NSExponent,x 				; is it integer already ?
.966d		f0 1d		beq $968c			beq 	_FIPExit 					; if so do nothing
.966f		20 6a 9f	jsr $9f6a			jsr 	NSMIsZero 					; is it zero ?
.9672		f0 15		beq $9689			beq 	_FIPZero 					; if so return zero.
.9674		20 c3 96	jsr $96c3			jsr 	NSNormalise 				; normalise
.9677		f0 10		beq $9689			beq 	_FIPZero 					; normalised to zero, exit zero
.9679						_FIPShift:
.9679		b5 78		lda $78,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.967b		10 07		bpl $9684			bpl 	_FIPCheckZero
.967d		20 61 9f	jsr $9f61			jsr 	NSMShiftRight 				; shift mantissa right
.9680		f6 78		inc $78,x			inc 	NSExponent,x 				; bump exponent
.9682		80 f5		bra $9679			bra 	_FIPShift
.9684						_FIPCheckZero:
.9684		20 6a 9f	jsr $9f6a			jsr 	NSMIsZero 					; avoid -0 problem
.9687		d0 03		bne $968c			bne 	_FIPExit 					; set to zero if mantissa zero.
.9689						_FIPZero:
.9689		20 48 9f	jsr $9f48			jsr 	NSMSetZero
.968c						_FIPExit:
.968c		68		pla				pla
.968d		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/multiply.asm

.968e						FloatingPointMultiply:
.968e		20 b4 96	jsr $96b4			jsr 	FloatPrepare 				; prepare for floats
.9691						FloatMultiply:
.9691		48		pha				pha
.9692		20 c3 96	jsr $96c3			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.9695		f0 18		beq $96af			beq 	_FDExit 					; return zero if zero (e.g. zero*something)
.9697		e8		inx				inx
.9698		20 c3 96	jsr $96c3			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.969b		ca		dex				dex
.969c		c9 00		cmp #$00			cmp 	#0
.969e		f0 0c		beq $96ac			beq 	_FDSetZero
.96a0		20 3a 92	jsr $923a			jsr 	MultiplyShort 				; calculate the result.
.96a3		75 78		adc $78,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.96a5		18		clc				clc
.96a6		75 79		adc $79,x			adc 	NSExponent+1,x
.96a8		95 78		sta $78,x			sta 	NSExponent,x
.96aa		80 03		bra $96af			bra 	_FDExit
.96ac						_FDSetZero:
.96ac		20 48 9f	jsr $9f48			jsr 	NSMSetZero 					; return 0
.96af						_FDExit:
.96af		20 c3 96	jsr $96c3			jsr 	NSNormalise 				; normalise the result
.96b2		68		pla				pla
.96b3		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/utility.asm

.96b4						FloatPrepare:
.96b4		20 bf 97	jsr $97bf			jsr 	DereferenceTopTwo 			; dereference the top two values
.96b7		b5 50		lda $50,x			lda 	NSStatus,x 					; check ints/floats, either will do.
.96b9		15 51		ora $51,x			ora 	NSStatus+1,x
.96bb		29 10		and #$10			and 	#NSBIsString
.96bd		d0 01		bne $96c0			bne 	_FDType
.96bf		60		rts				rts
.96c0						_FDType:
.96c0		4c d0 a0	jmp $a0d0			jmp 	TypeError
.96c3						NSNormalise:
.96c3		b5 50		lda $50,x			lda 	NSStatus,x 					; make float, keep sign
.96c5		29 80		and #$80			and 	#$80
.96c7		09 08		ora #$08			ora 	#NSTFloat
.96c9		95 50		sta $50,x			sta 	NSStatus,x
.96cb		20 6a 9f	jsr $9f6a			jsr 	NSMIsZero 					; if zero exit
.96ce		d0 07		bne $96d7			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.96d0		16 50		asl $50,x			asl 	NSStatus,x 					; clear the sign bit.
.96d2		76 50		ror $50,x			ror 	NSStatus,x 					; (no -0)
.96d4		a9 00		lda #$00			lda 	#0 							; set Z flag
.96d6		60		rts				rts
.96d7						_NSNormaliseOptimise:
.96d7		b5 70		lda $70,x			lda 	NSMantissa3,x 				; upper byte zero ?
.96d9		d0 19		bne $96f4			bne 	_NSNormaliseLoop
.96db		b5 68		lda $68,x			lda 	NSMantissa2,x 				; byte normalise
.96dd		30 15		bmi $96f4			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.96df		95 70		sta $70,x			sta 	NSMantissa3,x
.96e1		b5 60		lda $60,x			lda 	NSMantissa1,x
.96e3		95 68		sta $68,x			sta 	NSMantissa2,x
.96e5		b5 58		lda $58,x			lda 	NSMantissa0,x
.96e7		95 60		sta $60,x			sta 	NSMantissa1,x
.96e9		74 58		stz $58,x			stz 	NSMantissa0,x
.96eb		b5 78		lda $78,x			lda 	NSExponent,x
.96ed		38		sec				sec
.96ee		e9 08		sbc #$08			sbc 	#8
.96f0		95 78		sta $78,x			sta 	NSExponent,x
.96f2		80 e3		bra $96d7			bra 	_NSNormaliseOptimise
.96f4						_NSNormaliseLoop:
.96f4		34 70		bit $70,x			bit 	NSMantissa3,x 				; bit 30 set ?
.96f6		70 07		bvs $96ff			bvs 	_NSNExit 					; exit if so with Z flag clear
.96f8		20 57 9f	jsr $9f57			jsr 	NSMShiftLeft 				; shift mantissa left
.96fb		d6 78		dec $78,x			dec 	NSExponent,x 				; adjust exponent
.96fd		80 f5		bra $96f4			bra 	_NSNormaliseLoop
.96ff						_NSNExit:
.96ff		a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.9701		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignnumber.asm

.9702						AssignNumber:
.9702		5a		phy				phy
.9703		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy mantissa0/1 to zTemp0
.9705		85 36		sta $36				sta 	zTemp0
.9707		b5 60		lda $60,x			lda 	NSMantissa1,x
.9709		85 37		sta $37				sta 	zTemp0+1
.970b		b5 50		lda $50,x			lda 	NSStatus,x 					; clear reference bits
.970d		29 df		and #$df			and 	#(NSBIsReference ^ $FF)
.970f		95 50		sta $50,x			sta 	NSStatus,x
.9711		29 18		and #$18			and 	#NSBTypeMask				; assigning to a float ?
.9713		c9 08		cmp #$08			cmp 	#NSTFloat
.9715		f0 24		beq $973b			beq 	_ANFloat
.9717		b5 79		lda $79,x			lda		NSExponent+1,x 				; is it a float
.9719		f0 03		beq $971e			beq		_ANNotFloat
.971b		4c cb a0	jmp $a0cb			jmp 	RangeError					; if it is, report an error.
.971e						_ANNotFloat:
.971e		b5 50		lda $50,x			lda 	NSStatus,x 					; check if byte/word reference.
.9720		29 03		and #$03			and 	#3
.9722		d0 05		bne $9729			bne 	_ANByteWord
.9724		20 46 97	jsr $9746			jsr 	_ANCopy4PackSign 			; copy all 4 bytes and sign
.9727		80 1b		bra $9744			bra 	_ANExit
.9729						_ANByteWord:
.9729		48		pha				pha 								; save count
.972a		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; do byte
.972c		92 36		sta ($36)			sta 	(zTemp0)
.972e		68		pla				pla
.972f		c9 01		cmp #$01			cmp	 	#1
.9731		f0 11		beq $9744			beq 	_ANExit
.9733		b5 61		lda $61,x			lda 	NSMantissa1+1,x 			; do word
.9735		a0 01		ldy #$01			ldy 	#1
.9737		91 36		sta ($36),y			sta 	(zTemp0),y
.9739		80 09		bra $9744			bra 	_ANExit
.973b						_ANFloat:
.973b		20 46 97	jsr $9746			jsr 	_ANCopy4PackSign 			; write all 4 bytes and packed sign
.973e		b5 79		lda $79,x			lda 	NSExponent+1,x 				; copy exponent to slot 4
.9740		a0 04		ldy #$04			ldy 	#4
.9742		91 36		sta ($36),y			sta 	(zTemp0),y
.9744						_ANExit:
.9744		7a		ply				ply
.9745		60		rts				rts
.9746						_ANCopy4PackSign:
.9746		a0 03		ldy #$03			ldy 	#3
.9748		b5 51		lda $51,x			lda 	NSStatus+1,x 				; sign bit into status
.974a		29 80		and #$80			and 	#$80 						; put into high bit of mantissa 3
.974c		15 71		ora $71,x			ora 	NSMantissa3+1,x
.974e		91 36		sta ($36),y			sta 	(zTemp0),y
.9750		88		dey				dey
.9751		b5 69		lda $69,x			lda 	NSMantissa2+1,x
.9753		91 36		sta ($36),y			sta 	(zTemp0),y
.9755		88		dey				dey
.9756		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9758		91 36		sta ($36),y			sta 	(zTemp0),y
.975a		88		dey				dey
.975b		b5 59		lda $59,x			lda 	NSMantissa0+1,x
.975d		91 36		sta ($36),y			sta 	(zTemp0),y
.975f		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignstring.asm

.9760						AssignString:
.9760		5a		phy				phy
.9761		b5 59		lda $59,x			lda 	NSMantissa0+1,x
.9763		85 38		sta $38				sta 	zTemp1
.9765		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9767		85 39		sta $39				sta 	zTemp1+1
.9769		b5 58		lda $58,x			lda 	NSMantissa0,x
.976b		85 36		sta $36				sta 	zTemp0
.976d		b5 60		lda $60,x			lda 	NSMantissa1,x
.976f		85 37		sta $37				sta 	zTemp0+1
.9771		a0 01		ldy #$01			ldy 	#1 							; the high byte of the target address
.9773		b1 36		lda ($36),y			lda 	(zTemp0),y
.9775		f0 23		beq $979a			beq 	_ASNewStringRequired 		; if zero, a new string is required.
.9777		38		sec				sec 								; put Address-2 in zsTemp - this is the size/status/string record
.9778		b2 36		lda ($36)			lda 	(zTemp0) 					; of concreted strings
.977a		e9 02		sbc #$02			sbc 	#2
.977c		85 3c		sta $3c				sta 	zsTemp
.977e		a0 01		ldy #$01			ldy 	#1
.9780		b1 36		lda ($36),y			lda 	(zTemp0),y
.9782		e9 00		sbc #$00			sbc 	#0
.9784		85 3d		sta $3d				sta 	zsTemp+1
.9786		a0 ff		ldy #$ff			ldy 	#$FF 						; get length of new string
.9788						_ASGetLength:
.9788		c8		iny				iny
.9789		b1 38		lda ($38),y			lda 	(zTemp1),y
.978b		d0 fb		bne $9788			bne 	_ASGetLength
.978d		98		tya				tya 								; is this length <= current length
.978e		d2 3c		cmp ($3c)			cmp 	(zsTemp)
.9790		90 1e		bcc $97b0			bcc 	_ASCopyString
.9792		f0 1c		beq $97b0			beq 	_ASCopyString
.9794		a9 80		lda #$80			lda 	#$80 						; mark as unused.
.9796		a0 01		ldy #$01			ldy 	#1
.9798		91 3c		sta ($3c),y			sta 	(zsTemp),y
.979a						_ASNewStringRequired:
.979a		e8		inx				inx 								; concrete the new string.
.979b		20 b6 b0	jsr $b0b6			jsr 	StringConcrete				; (breaks zTemp1/2, not zTemp0 and zsTemp)
.979e		ca		dex				dex
.979f		18		clc				clc
.97a0		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; copy that new address to the reference.
.97a2		69 02		adc #$02			adc 	#2 							; add two to point at the data.
.97a4		92 36		sta ($36)			sta 	(zTemp0)
.97a6		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.97a8		69 00		adc #$00			adc 	#0
.97aa		a0 01		ldy #$01			ldy 	#1
.97ac		91 36		sta ($36),y			sta 	(zTemp0),y
.97ae		80 0d		bra $97bd			bra 	_ASExit
.97b0						_ASCopyString:
.97b0		a0 00		ldy #$00			ldy 	#0
.97b2						_ASCopyLoop:
.97b2		b1 38		lda ($38),y			lda 	(zTemp1),y
.97b4		c8		iny				iny
.97b5		c8		iny				iny
.97b6		91 3c		sta ($3c),y			sta 	(zsTemp),y
.97b8		88		dey				dey
.97b9		c9 00		cmp #$00			cmp 	#0
.97bb		d0 f5		bne $97b2			bne 	_ASCopyLoop
.97bd						_ASExit:
.97bd		7a		ply				ply
.97be		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/dereference.asm

.97bf						DereferenceTopTwo:
.97bf		e8		inx				inx
.97c0		20 c4 97	jsr $97c4			jsr 	Dereference 				; deref x+1
.97c3		ca		dex				dex  								; falls through to deref x
.97c4						Dereference:
.97c4		b5 50		lda $50,x			lda 	NSStatus,x 					; get the status byte
.97c6		29 20		and #$20			and 	#NSBIsReference 			; is it a reference
.97c8		f0 48		beq $9812			beq 	_DRFExit 					; not a reference, so exit.
.97ca		5a		phy				phy
.97cb		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy address to dereference into zTemp0
.97cd		85 36		sta $36				sta 	zTemp0
.97cf		b5 60		lda $60,x			lda 	NSMantissa1,x
.97d1		85 37		sta $37				sta 	zTemp0+1
.97d3		74 60		stz $60,x			stz 	NSMantissa1,x 				; clear second byte.
.97d5		b2 36		lda ($36)			lda 	(zTemp0) 					; do the first byte
.97d7		95 58		sta $58,x			sta 	NSMantissa0,x
.97d9		b5 50		lda $50,x			lda 	NSStatus,x 					; get status byte.
.97db		29 18		and #$18			and 	#NSBTypeMask 				; what type is it ?
.97dd		c9 10		cmp #$10			cmp 	#NSTString 					; if string, dereference two
.97df		f0 0e		beq $97ef			beq 	_DRFDereferenceTwo
.97e1		c9 08		cmp #$08			cmp 	#NSTFloat 					; if float, do full dereference.
.97e3		f0 2f		beq $9814			beq 	_DRFFull
.97e5		b5 50		lda $50,x			lda 	NSStatus,x 					; must be integer - how many bytes ?
.97e7		29 03		and #$03			and 	#3
.97e9		f0 29		beq $9814			beq 	_DRFFull 					; the whole word
.97eb		c9 01		cmp #$01			cmp 	#1 							; is it 10 (e.g. 2 bytes)
.97ed		f0 06		beq $97f5			beq		_DRFClear23 				; no, one byte, clear 2 & 3 and exit
.97ef						_DRFDereferenceTwo:
.97ef		a0 01		ldy #$01			ldy 	#1
.97f1		b1 36		lda ($36),y			lda 	(zTemp0),y
.97f3		95 60		sta $60,x			sta 	NSMantissa1,x
.97f5						_DRFClear23:
.97f5		74 68		stz $68,x			stz 	NSMantissa2,x 				; clear upper bytes, only read 1 or 2 bytes
.97f7		74 70		stz $70,x			stz 	NSMantissa3,x
.97f9		b5 50		lda $50,x			lda 	NSStatus,x 					; make it a value of that type.
.97fb		29 18		and #$18			and 	#NSBTypeMask
.97fd		95 50		sta $50,x			sta 	NSStatus,x 					; and fall through.
.97ff		c9 10		cmp #$10			cmp 	#NSTString  				; is it a string
.9801		d0 0e		bne $9811			bne 	_DRFNotString
.9803		b5 58		lda $58,x			lda 	NSMantissa0,x 				; check address is zero
.9805		15 60		ora $60,x			ora 	NSMantissa1,x
.9807		d0 08		bne $9811			bne 	_DRFNotString
.9809		a9 13		lda #$13			lda 	#_DRFNullString & $FF 		; if so, return reference to ""
.980b		95 58		sta $58,x			sta 	NSMantissa0,x
.980d		a9 98		lda #$98			lda 	#_DRFNullString >> 8
.980f		95 60		sta $60,x			sta 	NSMantissa1,x
.9811						_DRFNotString
.9811		7a		ply				ply 								; restore Y and exit
.9812						_DRFExit:
.9812		60		rts				rts
.9813						_DRFNullString:
>9813		00						.byte 	0
.9814						_DRFFull:
.9814		a0 01		ldy #$01			ldy 	#1 							; get remaining 3 bytes.
.9816		b1 36		lda ($36),y			lda 	(zTemp0),y
.9818		95 60		sta $60,x			sta 	NSMantissa1,x
.981a		c8		iny				iny
.981b		b1 36		lda ($36),y			lda 	(zTemp0),y
.981d		95 68		sta $68,x			sta 	NSMantissa2,x
.981f		c8		iny				iny
.9820		b1 36		lda ($36),y			lda 	(zTemp0),y
.9822		95 70		sta $70,x			sta 	NSMantissa3,x
.9824		74 78		stz $78,x			stz 	NSExponent,x 				; clear exponent.
.9826		b5 50		lda $50,x			lda		NSStatus,x 					; see if type is integer
.9828		29 18		and #$18			and 	#NSBTypeMask  				; type information only
.982a		95 50		sta $50,x			sta 	NSStatus,x 					; update it back.
.982c		f0 05		beq $9833			beq 	_DRFNoExponent
.982e		c8		iny				iny 								; if not, read the exponent as well.
.982f		b1 36		lda ($36),y			lda 	(zTemp0),y
.9831		95 78		sta $78,x			sta 	NSExponent,x
.9833						_DRFNoExponent:
.9833		b5 70		lda $70,x			lda 	NSMantissa3,x 				; is the most significant bit set ?
.9835		10 0a		bpl $9841			bpl 	_DRFExit2 					; if not, then exit.
.9837		29 7f		and #$7f			and 	#$7F 						; clear that bit.
.9839		95 70		sta $70,x			sta 	NSMantissa3,x
.983b		b5 50		lda $50,x			lda 	NSStatus,x 					; set the sign flag
.983d		09 80		ora #$80			ora 	#NSBIsNegative
.983f		95 50		sta $50,x			sta 	NSStatus,x
.9841						_DRFExit2:
.9841		7a		ply				ply
.9842		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/number.asm

=1						ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2						ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3						ESTA_Decimal = 3 							; fractional part.
.9843						EncodeNumberStart:
.9843		38		sec				sec
.9844		80 01		bra $9847			bra 	EncodeNumberContinue+1
.9846						EncodeNumberContinue:
.9846		18		clc				clc
.9847						EncodeNumber:
.9847		08		php				php 								; save reset flag.
.9848		c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.984a		f0 12		beq $985e			beq 	_ENIsOkay
.984c		c9 30		cmp #$30			cmp 	#"0"
.984e		90 04		bcc $9854			bcc 	_ENBadNumber
.9850		c9 3a		cmp #$3a			cmp 	#"9"+1
.9852		90 0a		bcc $985e			bcc 	_ENIsOkay
.9854						_ENBadNumber:
.9854		28		plp				plp 								; throw saved reset
.9855		ad 05 04	lda $0405			lda 	encodeState 				; if in decimal mode, construct final number
.9858		c9 03		cmp #$03			cmp 	#ESTA_Decimal
.985a		f0 7b		beq $98d7			beq 	_ENConstructFinal
.985c						_ENFail:
.985c		18		clc				clc 								; not allowed
.985d		60		rts				rts
.985e						_ENIsOkay:
.985e		28		plp				plp 								; are we restarting
.985f		90 15		bcc $9876			bcc 	_ENNoRestart
.9861						_ENStartEncode:
.9861		c9 2e		cmp #$2e			cmp 	#'.'						; first is decimal place, go straight to that.
.9863		f0 0c		beq $9871			beq 	_ENFirstDP
.9865		29 0f		and #$0f			and 	#15 						; put digit in mantissa, initially a single digit constant
.9867		20 4a 9f	jsr $9f4a			jsr 	NSMSetByte 					; in single byte mode.
.986a		a9 01		lda #$01			lda 	#ESTA_Low
.986c						_ENExitChange:
.986c		8d 05 04	sta $0405			sta 	encodeState 				; save new state
.986f		38		sec				sec
.9870		60		rts				rts
.9871						_ENFirstDP:
.9871		20 48 9f	jsr $9f48			jsr 	NSMSetZero 					; clear integer part
.9874		80 3c		bra $98b2			bra 	_ESTASwitchFloat			; go straight to float and exi
.9876						_ENNoRestart:
.9876		48		pha				pha 								; save digit or DP on stack.
.9877		ad 05 04	lda $0405			lda 	encodeState 				; get current state
.987a		c9 01		cmp #$01			cmp 	#ESTA_Low
.987c		f0 09		beq $9887			beq  	_ESTALowState
.987e		c9 02		cmp #$02			cmp 	#ESTA_High
.9880		f0 26		beq $98a8			beq 	_ESTAHighState
.9882		c9 03		cmp #$03			cmp 	#ESTA_Decimal
.9884		f0 38		beq $98be			beq 	_ESTADecimalState
>9886		db						.byte 	$DB 						; causes a break in the emulator
.9887						_ESTALowState:
.9887		68		pla				pla 								; get value back
.9888		c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.988a		f0 26		beq $98b2			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.988c		29 0f		and #$0f			and 	#15 						; make digit
.988e		8d 06 04	sta $0406			sta 	digitTemp 					; save it.
.9891		b5 58		lda $58,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.9893		0a		asl a				asl 	a
.9894		0a		asl a				asl 	a
.9895		75 58		adc $58,x			adc 	NSMantissa0,x
.9897		0a		asl a				asl 	a
.9898		6d 06 04	adc $0406			adc 	digitTemp
.989b		95 58		sta $58,x			sta 	NSMantissa0,x
.989d		c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.989f		90 05		bcc $98a6			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.98a1		a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.98a3		8d 05 04	sta $0405			sta 	encodeState
.98a6						_ESTANoSwitch:
.98a6		38		sec				sec
.98a7		60		rts				rts
.98a8						_ESTAHighState:
.98a8		68		pla				pla 								; get value back
.98a9		c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.98ab		f0 05		beq $98b2			beq 	_ESTASwitchFloat
.98ad		20 0b 99	jsr $990b			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.98b0		38		sec				sec
.98b1		60		rts				rts
.98b2						_ESTASwitchFloat:
.98b2		9c 07 04	stz $0407			stz 	decimalCount 				; reset the count of digits - we divide by 10^n at the end.
.98b5		e8		inx				inx 								; zero the decimal additive.
.98b6		20 48 9f	jsr $9f48			jsr 	NSMSetZero
.98b9		ca		dex				dex
.98ba		a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.98bc		80 ae		bra $986c			bra 	_ENExitChange
.98be						_ESTADecimalState:
.98be		68		pla				pla 								; digit.
.98bf		c9 2e		cmp #$2e			cmp 	#"." 						; fail on 2nd decimal point.
.98c1		f0 99		beq $985c			beq 	_ENFail
.98c3		e8		inx				inx 								; put digit into fractional part of X+1
.98c4		20 0b 99	jsr $990b			jsr 	ESTAShiftDigitIntoMantissa
.98c7		ca		dex				dex
.98c8		ee 07 04	inc $0407			inc 	decimalCount 				; bump the count of decimals
.98cb		ad 07 04	lda $0407			lda 	decimalCount 				; too many decimal digits.
.98ce		c9 0b		cmp #$0b			cmp 	#11
.98d0		f0 02		beq $98d4			beq 	_ESTADSFail
.98d2		38		sec				sec
.98d3		60		rts				rts
.98d4						_ESTADSFail:
.98d4		4c cb a0	jmp $a0cb			jmp 	RangeError
.98d7						_ENConstructFinal:
.98d7		ad 07 04	lda $0407			lda 	decimalCount 				; get decimal count
.98da		f0 2d		beq $9909			beq 	_ENCFExit 					; no decimals
.98dc		5a		phy				phy
.98dd		0a		asl a				asl 	a 							; x 4 and CLC
.98de		0a		asl a				asl 	a
.98df		6d 07 04	adc $0407			adc 	decimalCount
.98e2		a8		tay				tay
.98e3		b9 8a a0	lda $a08a,y			lda 	DecimalScalarTable-5,y 		; copy decimal scalar to X+2
.98e6		95 5a		sta $5a,x			sta 	NSMantissa0+2,x  			; this is 10^-n
.98e8		b9 8b a0	lda $a08b,y			lda 	DecimalScalarTable-5+1,y
.98eb		95 62		sta $62,x			sta 	NSMantissa1+2,x
.98ed		b9 8c a0	lda $a08c,y			lda 	DecimalScalarTable-5+2,y
.98f0		95 6a		sta $6a,x			sta 	NSMantissa2+2,x
.98f2		b9 8d a0	lda $a08d,y			lda 	DecimalScalarTable-5+3,y
.98f5		95 72		sta $72,x			sta 	NSMantissa3+2,x
.98f7		b9 8e a0	lda $a08e,y			lda 	DecimalScalarTable-5+4,y
.98fa		95 7a		sta $7a,x			sta 	NSExponent+2,x
.98fc		a9 08		lda #$08			lda 	#NSTFloat
.98fe		95 52		sta $52,x			sta 	NSStatus+2,x
.9900		7a		ply				ply
.9901		e8		inx				inx 								; multiply decimal const by decimal scalar
.9902		20 91 96	jsr $9691			jsr 	FloatMultiply
.9905		ca		dex				dex
.9906		20 4c 95	jsr $954c			jsr 	FloatAdd 					; add to integer part.
.9909						_ENCFExit:
.9909		18		clc				clc 								; reject the digit.
.990a		60		rts				rts
.990b						ESTAShiftDigitIntoMantissa:
.990b		29 0f		and #$0f			and 	#15 						; save digit
.990d		48		pha				pha
.990e		b5 70		lda $70,x			lda 	NSMantissa3,x 				; push mantissa on stack
.9910		48		pha				pha
.9911		b5 68		lda $68,x			lda 	NSMantissa2,x
.9913		48		pha				pha
.9914		b5 60		lda $60,x			lda 	NSMantissa1,x
.9916		48		pha				pha
.9917		b5 58		lda $58,x			lda 	NSMantissa0,x
.9919		48		pha				pha
.991a		20 57 9f	jsr $9f57			jsr 	NSMShiftLeft 				; x 2
.991d		20 57 9f	jsr $9f57			jsr 	NSMShiftLeft 				; x 4
.9920		18		clc				clc 								; pop mantissa and add
.9921		68		pla				pla
.9922		75 58		adc $58,x			adc 	NSMantissa0,x
.9924		95 58		sta $58,x			sta 	NSMantissa0,x
.9926		68		pla				pla
.9927		75 60		adc $60,x			adc 	NSMantissa1,x
.9929		95 60		sta $60,x			sta 	NSMantissa1,x
.992b		68		pla				pla
.992c		75 68		adc $68,x			adc 	NSMantissa2,x
.992e		95 68		sta $68,x			sta 	NSMantissa2,x
.9930		68		pla				pla
.9931		75 70		adc $70,x			adc 	NSMantissa3,x
.9933		95 70		sta $70,x			sta 	NSMantissa3,x 				; x 5
.9935		20 57 9f	jsr $9f57			jsr 	NSMShiftLeft 				; x 10
.9938		68		pla				pla 								; add digit
.9939		18		clc				clc
.993a		75 58		adc $58,x			adc 	NSMantissa0,x
.993c		95 58		sta $58,x			sta 	NSMantissa0,x
.993e		90 0a		bcc $994a			bcc 	_ESTASDExit
.9940		f6 60		inc $60,x			inc 	NSMantissa1,x
.9942		d0 06		bne $994a			bne 	_ESTASDExit
.9944		f6 68		inc $68,x			inc 	NSMantissa2,x
.9946		d0 02		bne $994a			bne 	_ESTASDExit
.9948		f6 70		inc $70,x			inc 	NSMantissa3,x
.994a						_ESTASDExit:
.994a		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/term.asm

.994b						EvaluateTerm:
.994b		b1 30		lda ($30),y			lda 	(codePtr),y
.994d		30 18		bmi $9967			bmi 	_ETCheckUnary 				; unary function ? (text ones)
.994f		c9 40		cmp #$40			cmp 	#$40 						; 40-7F => identifier reference
.9951		b0 6c		bcs $99bf			bcs 	_ETVariable
.9953		c9 30		cmp #$30			cmp 	#'0' 						; is it a number
.9955		90 6b		bcc $99c2			bcc 	_ETPuncUnary 				; if not it might be a punctuation unary.
.9957		c9 3a		cmp #$3a			cmp 	#'9'+1
.9959		b0 67		bcs $99c2			bcs 	_ETPuncUnary
.995b		20 43 98	jsr $9843			jsr 	EncodeNumberStart 			; can't fail as it's 0-9 !
.995e						_ETNumber:
.995e		c8		iny				iny 								; keep encoding until we have the numbers
.995f		b1 30		lda ($30),y			lda 	(codePtr),y
.9961		20 46 98	jsr $9846			jsr 	EncodeNumberContinue
.9964		b0 f8		bcs $995e			bcs 	_ETNumber 					; go back if accepted.
.9966		60		rts				rts
.9967						_ETCheckUnary:
.9967		c9 ff		cmp #$ff			cmp 	#KWC_STRING 				; string token
.9969		f0 3f		beq $99aa			beq 	_ETString
.996b		c9 fe		cmp #$fe			cmp 	#KWC_HEXCONST 				; hex constant.
.996d		f0 12		beq $9981			beq 	_ETHexConstant
.996f		c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; check it actually is a unary function
.9971		90 0b		bcc $997e			bcc 	_ETSyntaxError
.9973		c9 a6		cmp #$a6			cmp 	#KWC_LAST_UNARY+1
.9975		b0 07		bcs $997e			bcs 	_ETSyntaxError
.9977		da		phx				phx 								; push X on the stack
.9978		0a		asl a				asl 	a 							; put vector x 2 into X
.9979		aa		tax				tax
.997a		c8		iny				iny 								; consume unary function token
.997b		7c 7c 8d	jmp ($8d7c,x)			jmp 	(VectorSet0,x) 				; and do it.
.997e						_ETSyntaxError:
.997e		4c c6 a0	jmp $a0c6			jmp 	SyntaxError
.9981						_ETHexConstant:
.9981		c8		iny				iny 								; skip #
.9982		c8		iny				iny 								; skip count
.9983		20 48 9f	jsr $9f48			jsr 	NSMSetZero 					; clear result
.9986						_ETHLoop:
.9986		b1 30		lda ($30),y			lda 	(codePtr),y
.9988		c8		iny				iny 								; and consume
.9989		c9 00		cmp #$00			cmp 	#0 							; exit if zero
.998b		f0 1c		beq $99a9			beq 	_ETHExit
.998d		48		pha				pha 								; save on stack.
.998e		20 57 9f	jsr $9f57			jsr 	NSMShiftLeft 				; x 2
.9991		20 57 9f	jsr $9f57			jsr 	NSMShiftLeft 				; x 4
.9994		20 57 9f	jsr $9f57			jsr 	NSMShiftLeft 				; x 8
.9997		20 57 9f	jsr $9f57			jsr 	NSMShiftLeft 				; x 16
.999a		68		pla				pla 								; ASCII
.999b		c9 41		cmp #$41			cmp 	#'A'
.999d		90 02		bcc $99a1			bcc 	_ETHNotChar
.999f		e9 07		sbc #$07			sbc 	#7
.99a1						_ETHNotChar:
.99a1		29 0f		and #$0f			and 	#15 						; digit now
.99a3		15 58		ora $58,x			ora 	NSMantissa0,x 				; put in LS Nibble
.99a5		95 58		sta $58,x			sta 	NSMantissa0,x
.99a7		80 dd		bra $9986			bra 	_ETHLoop 					; go round.
.99a9						_ETHExit:
.99a9		60		rts				rts
.99aa						_ETString:
.99aa		c8		iny				iny 								; look at length
.99ab		b1 30		lda ($30),y			lda 	(codePtr),y
.99ad		48		pha				pha
.99ae		c8		iny				iny 								; first character
.99af		20 de a6	jsr $a6de			jsr 	MemoryInline 				; put address of string at (code-Ptr),y on stack
.99b2		68		pla				pla 								; restore count and save
.99b3		85 36		sta $36				sta 	zTemp0
.99b5		98		tya				tya 								; add length to Y to skip it.
.99b6		18		clc				clc
.99b7		65 36		adc $36				adc 	zTemp0
.99b9		a8		tay				tay
.99ba		a9 10		lda #$10			lda 	#NSTString 					; mark as string
.99bc		95 50		sta $50,x			sta 	NSStatus,x
.99be		60		rts				rts
.99bf						_ETVariable:
.99bf		4c 14 9a	jmp $9a14			jmp 	VariableHandler
.99c2						_ETPuncUnary:
.99c2		c8		iny				iny 								; consume the unary character
.99c3		c9 2d		cmp #$2d			cmp 	#KWD_MINUS 					; unary minus
.99c5		f0 2b		beq $99f2			beq 	_ETUnaryNegate
.99c7		c9 10		cmp #$10			cmp 	#KWD_AT 					; @ reference -> constant
.99c9		f0 36		beq $9a01			beq 	_ETDereference
.99cb		c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; parenthesis
.99cd		f0 3e		beq $9a0d			beq 	_ETParenthesis
.99cf		64 36		stz $36				stz 	zTemp0 						; zTemp0 is the indirection level.
.99d1		c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; byte indirection (0) ?
.99d3		f0 06		beq $99db			beq 	_ETIndirection
.99d5		e6 36		inc $36				inc 	zTemp0
.99d7		c9 21		cmp #$21			cmp 	#KWD_PLING					; word indirection (1) \
.99d9		d0 a3		bne $997e			bne 	_ETSyntaxError
.99db						_ETIndirection:
.99db		a5 36		lda $36				lda 	zTemp0 						; push indirection amount (0-1) => (1-2) on the stack
.99dd		1a		inc a				inc 	a
.99de		48		pha				pha
.99df		20 4b 99	jsr $994b			jsr 	EvaluateTerm				; evaluate the term
.99e2		20 c4 97	jsr $97c4			jsr 	Dereference 				; dereference it.
.99e5		b5 50		lda $50,x			lda 	NSStatus,x 					; must be a +ve integer.
.99e7		d0 06		bne $99ef			bne 	_ETTypeMismatch
.99e9		68		pla				pla 								; indirection 1-2
.99ea		09 20		ora #$20			ora 	#NSBIsReference 			; make it a reference.
.99ec		95 50		sta $50,x			sta 	NSStatus,x
.99ee		60		rts				rts
.99ef						_ETTypeMismatch:
.99ef		4c d0 a0	jmp $a0d0			jmp 	TypeError
.99f2						_ETUnaryNegate:
.99f2		20 4b 99	jsr $994b			jsr 	EvaluateTerm				; evaluate the term
.99f5		20 c4 97	jsr $97c4			jsr 	Dereference 				; dereference it.
.99f8		b5 50		lda $50,x			lda 	NSStatus,x 					; must be a number
.99fa		29 10		and #$10			and 	#NSTString
.99fc		d0 f1		bne $99ef			bne 	_ETTypeMismatch
.99fe		4c 0a 9f	jmp $9f0a			jmp 	NSMNegate  					; just toggles the sign bit.
.9a01						_ETDereference:
.9a01		20 4b 99	jsr $994b			jsr 	EvaluateTerm				; evaluate the term
.9a04		b5 50		lda $50,x			lda 	NSStatus,x 					; must be a reference
.9a06		29 20		and #$20			and 	#NSBIsReference
.9a08		f0 e5		beq $99ef			beq 	_ETTypeMismatch
.9a0a		74 50		stz $50,x			stz 	NSStatus,x 					; make it an integer address
.9a0c		60		rts				rts
.9a0d						_ETParenthesis:
.9a0d		20 01 95	jsr $9501			jsr 	EvaluateExpression 			; evaluate here, from lowest precedence
.9a10		20 e4 8f	jsr $8fe4			jsr 	CheckRightBracket 			; check for )
.9a13		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/variable.asm

.9a14						VariableHandler:
.9a14		b1 30		lda ($30),y			lda 	(codePtr),y
.9a16		18		clc				clc
.9a17		69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.9a19		85 37		sta $37				sta 	zTemp0+1
.9a1b		c8		iny				iny
.9a1c		b1 30		lda ($30),y			lda 	(codePtr),y
.9a1e		85 36		sta $36				sta 	zTemp0
.9a20		c8		iny				iny
.9a21		18		clc				clc									; copy variable address+3 to mantissa
.9a22		69 03		adc #$03			adc 	#3 							; this is the address of the data.
.9a24		95 58		sta $58,x			sta 	NSMantissa0,x
.9a26		a5 37		lda $37				lda 	zTemp0+1
.9a28		69 00		adc #$00			adc 	#0
.9a2a		95 60		sta $60,x			sta 	NSMantissa1,x
.9a2c		74 68		stz $68,x			stz 	NSMantissa2,x
.9a2e		74 70		stz $70,x			stz 	NSMantissa3,x
.9a30		74 78		stz $78,x			stz 	NSExponent,x
.9a32		5a		phy				phy
.9a33		a0 02		ldy #$02			ldy 	#2 							; read type
.9a35		b1 36		lda ($36),y			lda 	(zTemp0),y
.9a37		7a		ply				ply
.9a38		29 1c		and #$1c			and 	#NSBTypeMask+NSBIsArray 	; get type information
.9a3a		09 20		ora #$20			ora 	#NSBIsReference 			; make a reference.
.9a3c		95 50		sta $50,x			sta 	NSStatus,x
.9a3e		29 04		and #$04			and 	#NSBIsArray
.9a40		d0 01		bne $9a43			bne 	_VHArray
.9a42		60		rts				rts
.9a43						_VHArray:
.9a43		e8		inx				inx
.9a44		20 e3 9e	jsr $9ee3			jsr 	Evaluate8BitInteger 		; get the 1st index.
.9a47		a9 ff		lda #$ff			lda 	#$FF 						; set Status of X+2 to a duff value so we know if we picked it up.
.9a49		95 51		sta $51,x			sta 	NSStatus+1,x
.9a4b		b1 30		lda ($30),y			lda 	(codePtr),y
.9a4d		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.9a4f		d0 06		bne $9a57			bne 	_VHNoSecondIndex
.9a51		c8		iny				iny 								; skip the comma
.9a52		e8		inx				inx
.9a53		20 e3 9e	jsr $9ee3			jsr 	Evaluate8BitInteger 		; get the 2nd index.
.9a56		ca		dex				dex
.9a57						_VHNoSecondIndex:
.9a57		ca		dex				dex 								; set X back.
.9a58		20 e4 8f	jsr $8fe4			jsr 	CheckRightBracket 			; and check the right bracket.
.9a5b		5a		phy				phy 								; save position
.9a5c		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy record address to zaTemp (moved 6/12/22)
.9a5e		85 3e		sta $3e				sta 	zaTemp
.9a60		b5 60		lda $60,x			lda 	NSMantissa1,x
.9a62		85 3f		sta $3f				sta 	zaTemp+1
.9a64		a0 02		ldy #$02			ldy 	#2 							; check first index is not-zero, e.g. array defined
.9a66		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9a68		f0 5d		beq $9ac7			beq 	_VHBadArray
.9a6a		a0 03		ldy #$03			ldy 	#3 							; get the second index - which is 0 if there is one index.
.9a6c		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9a6e		f0 02		beq $9a72			beq 	_VHHas2Mask
.9a70		a9 ff		lda #$ff			lda 	#$FF
.9a72						_VHHas2Mask:
.9a72		d5 52		cmp $52,x			cmp 	NSStatus+2,x 				; so if they are the same there are the wrong number of indices
.9a74		f0 4c		beq $9ac2			beq 	_VHBadIndex
.9a76		0a		asl a				asl 	a 							; carry will be set if a second index
.9a77		90 08		bcc $9a81			bcc 	_VHCheckFirstIndex
.9a79		a0 03		ldy #$03			ldy 	#3 			 				; check the 2nd size >= 2nd index
.9a7b		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9a7d		d5 5a		cmp $5a,x			cmp 	NSMantissa0+2,x
.9a7f		90 41		bcc $9ac2			bcc 	_VHBadIndex
.9a81						_VHCheckFirstIndex:
.9a81		a0 02		ldy #$02			ldy 	#2 			 				; check the 2nd size >= 2nd index
.9a83		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9a85		d5 59		cmp $59,x			cmp 	NSMantissa0+1,x
.9a87		90 39		bcc $9ac2			bcc 	_VHBadIndex
.9a89		64 36		stz $36				stz 	zTemp0 						; clear zTemp0 (if 1 index)
.9a8b		64 37		stz $37				stz 	zTemp0+1
.9a8d		b5 52		lda $52,x			lda 	NSStatus+2,x 				; if only one index provided, don't need to multiply
.9a8f		30 0e		bmi $9a9f			bmi 	_VHNoMultiply
.9a91		da		phx				phx
.9a92		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; get 2nd index on stack
.9a94		48		pha				pha
.9a95		a0 02		ldy #$02			ldy 	#2 							; get 1st size in A
.9a97		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9a99		1a		inc a				inc 	a 							; add 1 for zero base
.9a9a		fa		plx				plx
.9a9b		20 f3 9e	jsr $9ef3			jsr 	Multiply8x8 				; calculate -> Z0
.9a9e		fa		plx				plx
.9a9f						_VHNoMultiply:
.9a9f		18		clc				clc
.9aa0		a5 36		lda $36				lda 	zTemp0
.9aa2		75 59		adc $59,x			adc 	NSMantissa0+1,x
.9aa4		85 36		sta $36				sta 	zTemp0
.9aa6		a5 37		lda $37				lda 	zTemp0+1
.9aa8		69 00		adc #$00			adc 	#0
.9aaa		85 37		sta $37				sta 	zTemp0+1
.9aac		b5 50		lda $50,x			lda 	NSStatus,x
.9aae		20 a8 85	jsr $85a8			jsr 	ScaleByBaseType
.9ab1		18		clc				clc
.9ab2		b2 3e		lda ($3e)			lda 	(zaTemp)
.9ab4		65 36		adc $36				adc 	zTemp0
.9ab6		95 58		sta $58,x			sta 	NSMantissa0,x
.9ab8		a0 01		ldy #$01			ldy 	#1
.9aba		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9abc		65 37		adc $37				adc 	zTemp0+1
.9abe		95 60		sta $60,x			sta 	NSMantissa1,x
.9ac0		7a		ply				ply 								; restore position
.9ac1		60		rts				rts
.9ac2						_VHBadIndex:
.9ac2		a9 17		lda #$17		lda	#23
.9ac4		4c fd 8f	jmp $8ffd		jmp	ErrorHandler
.9ac7						_VHBadArray:
.9ac7		a9 18		lda #$18		lda	#24
.9ac9		4c fd 8f	jmp $8ffd		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/abs.asm

.9acc						AbsUnary:
.9acc		fa		plx				plx 								; restore stack pos
.9acd		20 96 9e	jsr $9e96			jsr 	EvaluateNumber 				; get a float or int
.9ad0		20 e4 8f	jsr $8fe4			jsr 	CheckRightBracket
.9ad3		b5 50		lda $50,x			lda 	NSStatus,x 					; clear the sign bit
.9ad5		29 7f		and #$7f			and 	#$7F
.9ad7		95 50		sta $50,x			sta 	NSStatus,x
.9ad9		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/alloc.asm

.9ada						AllocUnary:
.9ada		fa		plx				plx 								; restore stack pos
.9adb		20 c8 9e	jsr $9ec8			jsr 	Evaluate16BitInteger		; get bytes required.
.9ade		20 e4 8f	jsr $8fe4			jsr 	CheckRightBracket
.9ae1		da		phx				phx 								; save X/Y
.9ae2		5a		phy				phy
.9ae3		8a		txa				txa 								; copy X into Y
.9ae4		a8		tay				tay
.9ae5		b9 60 00	lda $0060,y			lda		NSMantissa1,y 				; get size into XA
.9ae8		aa		tax				tax
.9ae9		b9 58 00	lda $0058,y			lda 	NSMantissa0,y
.9aec		20 f9 9a	jsr $9af9			jsr 	AllocateXABytes 			; allocate memory
.9aef		99 58 00	sta $0058,y			sta 	NSMantissa0,y 				; write address out.
.9af2		8a		txa				txa 	 							; typing is 16 bit integer.
.9af3		99 60 00	sta $0060,y			sta 	NSMantissa1,y
.9af6		7a		ply				ply
.9af7		fa		plx				plx
.9af8		60		rts				rts
.9af9						AllocateXABytes:
.9af9		5a		phy				phy
.9afa		ac 0c 04	ldy $040c			ldy 	lowMemPtr 					; push current address on stack and to zTemp0
.9afd		84 36		sty $36				sty 	zTemp0
.9aff		5a		phy				phy
.9b00		ac 0d 04	ldy $040d			ldy 	lowMemPtr+1
.9b03		84 37		sty $37				sty 	zTemp0+1
.9b05		5a		phy				phy
.9b06		18		clc				clc 								; add to low memory pointer
.9b07		6d 0c 04	adc $040c			adc 	lowMemPtr
.9b0a		8d 0c 04	sta $040c			sta 	lowMemPtr
.9b0d		8a		txa				txa
.9b0e		6d 0d 04	adc $040d			adc 	lowMemPtr+1
.9b11		8d 0d 04	sta $040d			sta 	lowMemPtr+1
.9b14		b0 2f		bcs $9b45			bcs 	CISSMemory
.9b16		20 37 9b	jsr $9b37			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.9b19						_ClearMemory:
.9b19		ad 0c 04	lda $040c			lda 	lowMemPtr 					; cleared all memory allocated
.9b1c		c5 36		cmp $36				cmp 	zTemp0
.9b1e		d0 07		bne $9b27			bne 	_CMClearNext
.9b20		ad 0d 04	lda $040d			lda 	lowMemPtr+1
.9b23		c5 37		cmp $37				cmp 	zTemp0+1
.9b25		f0 0c		beq $9b33			beq 	_CMExit
.9b27						_CMClearNext:
.9b27		a9 00		lda #$00			lda 	#0 							; clear byte, advance to next.
.9b29		92 36		sta ($36)			sta 	(zTemp0)
.9b2b		e6 36		inc $36				inc 	zTemp0
.9b2d		d0 ea		bne $9b19			bne 	_ClearMemory
.9b2f		e6 37		inc $37				inc		zTemp0+1
.9b31		80 e6		bra $9b19			bra 	_ClearMemory
.9b33						_CMExit:
.9b33		fa		plx				plx
.9b34		68		pla				pla
.9b35		7a		ply				ply
.9b36		60		rts				rts
.9b37						CheckIdentifierStringSpace:
.9b37		48		pha				pha
.9b38		ad 0d 04	lda $040d			lda 	lowMemPtr+1 				; get low memory pointer
.9b3b		18		clc				clc
.9b3c		69 02		adc #$02			adc 	#2 							; need at least 2 256 byte pages
.9b3e		cd 0f 04	cmp $040f			cmp 	stringMemory+1 				; is it >= StringMemory
.9b41		b0 02		bcs $9b45			bcs 	CISSMemory
.9b43		68		pla				pla
.9b44		60		rts				rts
.9b45						CISSMemory:
.9b45		a9 06		lda #$06		lda	#6
.9b47		4c fd 8f	jmp $8ffd		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/asc.asm

.9b4a						AscUnary:
.9b4a		fa		plx				plx 								; restore stack pos
.9b4b		20 a0 9e	jsr $9ea0			jsr 	EvaluateString 				; get a string
.9b4e		b2 36		lda ($36)			lda 	(zTemp0)					; get/return first character
.9b50		20 4a 9f	jsr $9f4a			jsr 	NSMSetByte 					; ASC("") will return zero.
.9b53		20 e4 8f	jsr $8fe4			jsr 	CheckRightBracket
.9b56		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/frac.asm

.9b57						FracUnary:
.9b57		fa		plx				plx 								; restore stack pos
.9b58		20 96 9e	jsr $9e96			jsr 	EvaluateNumber 				; get a float or int
.9b5b		20 e4 8f	jsr $8fe4			jsr 	CheckRightBracket
.9b5e		b5 50		lda $50,x			lda 	NSStatus,x
.9b60		29 08		and #$08			and 	#NSTFloat 					; check it is a float
.9b62		f0 04		beq $9b68			beq 	_IUZero
.9b64		20 12 96	jsr $9612			jsr 	FloatFractionalPart 		; if so, get the fractional part.
.9b67		60		rts				rts
.9b68						_IUZero:
.9b68		20 48 9f	jsr $9f48			jsr 	NSMSetZero
.9b6b		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/int.asm

.9b6c						IntUnary:
.9b6c		fa		plx				plx 								; restore stack pos
.9b6d		20 96 9e	jsr $9e96			jsr 	EvaluateNumber 				; get a float or int
.9b70		20 e4 8f	jsr $8fe4			jsr 	CheckRightBracket
.9b73		b5 50		lda $50,x			lda 	NSStatus,x
.9b75		29 08		and #$08			and 	#NSTFloat 					; check it is a float
.9b77		f0 03		beq $9b7c			beq 	_IUExit
.9b79		20 6a 96	jsr $966a			jsr 	FloatIntegerPart 			; if it is get the integer part.
.9b7c						_IUExit:
.9b7c		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/len.asm

.9b7d						LenUnary:
.9b7d		fa		plx				plx 								; restore stack pos
.9b7e		20 a0 9e	jsr $9ea0			jsr 	EvaluateString 				; get a string
.9b81		5a		phy				phy
.9b82		a0 00		ldy #$00			ldy 	#0 							; find length
.9b84						_LenFind:
.9b84		b1 36		lda ($36),y			lda 	(zTemp0),y 					; look for trailing NULL.
.9b86		f0 06		beq $9b8e			beq 	_LenExit
.9b88		c8		iny				iny
.9b89		d0 f9		bne $9b84			bne 	_LenFind
.9b8b		4c cb a0	jmp $a0cb			jmp 	RangeError 					; string > 255 - no trailing NULL.
.9b8e						_LenExit:
.9b8e		98		tya				tya		 							; return length
.9b8f		20 4a 9f	jsr $9f4a			jsr 	NSMSetByte
.9b92		7a		ply				ply
.9b93		20 e4 8f	jsr $8fe4			jsr 	CheckRightBracket
.9b96		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/minmax.asm

.9b97						Unary_Min:
.9b97		a9 01		lda #$01			lda 	#1
.9b99		80 02		bra $9b9d			bra 	UnaryMinMaxMain
.9b9b						Unary_Max:
.9b9b		a9 ff		lda #$ff			lda 	#$FF 						; value from comparator to cause a write
.9b9d						UnaryMinMaxMain:
.9b9d		fa		plx				plx 								; get index on number stack
.9b9e		48		pha				pha 								; save comparator
.9b9f		20 8d 9e	jsr $9e8d			jsr 	EvaluateValue 				; get the first value.
.9ba2						_UMMMLoop:
.9ba2		b1 30		lda ($30),y			lda 	(codePtr),y
.9ba4		c9 29		cmp #$29			cmp 	#KWD_RPAREN 				; if right bracket then done.
.9ba6		f0 22		beq $9bca			beq 	_UMMMDone
.9ba8		20 ec 8f	jsr $8fec			jsr 	CheckComma 					; must be a comma
.9bab		e8		inx				inx
.9bac		20 8d 9e	jsr $9e8d			jsr 	EvaluateValue
.9baf		ca		dex				dex
.9bb0		20 2b 9f	jsr $9f2b			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] (Compare is destructive)
.9bb3		e8		inx				inx
.9bb4		20 2b 9f	jsr $9f2b			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2], original
.9bb7		e8		inx				inx
.9bb8		20 b4 90	jsr $90b4			jsr 	CompareBaseCode 			; part of > = < etc. code, returns 255,0 or 1
.9bbb		ca		dex				dex
.9bbc		ca		dex				dex
.9bbd		85 36		sta $36				sta 	zTemp0 						; save required result
.9bbf		68		pla				pla 								; get and save comparator
.9bc0		48		pha				pha
.9bc1		c5 36		cmp $36				cmp 	zTemp0 						; if the comparator
.9bc3		d0 dd		bne $9ba2			bne 	_UMMMLoop
.9bc5		20 cd 9b	jsr $9bcd			jsr 	ExpCopyAboveDown 			; copy next up slot down
.9bc8		80 d8		bra $9ba2			bra 	_UMMMLoop
.9bca						_UMMMDone:
.9bca		68		pla				pla 								; throw the comparator
.9bcb		c8		iny				iny 								; skip )
.9bcc		60		rts				rts
.9bcd						ExpCopyAboveDown:
.9bcd		b5 51		lda $51,x			lda 	NSStatus+1,x
.9bcf		95 50		sta $50,x			sta 	NSStatus,x
.9bd1		b5 79		lda $79,x			lda 	NSExponent+1,x
.9bd3		95 78		sta $78,x			sta 	NSExponent,x
.9bd5		b5 59		lda $59,x			lda 	NSMantissa0+1,x
.9bd7		95 58		sta $58,x			sta 	NSMantissa0,x
.9bd9		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9bdb		95 60		sta $60,x			sta 	NSMantissa1,x
.9bdd		b5 69		lda $69,x			lda 	NSMantissa2+1,x
.9bdf		95 68		sta $68,x			sta 	NSMantissa2,x
.9be1		b5 71		lda $71,x			lda 	NSMantissa3+1,x
.9be3		95 70		sta $70,x			sta 	NSMantissa3,x
.9be5		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/not.asm

.9be6						Unary_Not:
.9be6		fa		plx				plx
.9be7		20 b5 9e	jsr $9eb5			jsr 	EvaluateInteger 			; get integer
.9bea		20 e4 8f	jsr $8fe4			jsr 	CheckRightBracket
.9bed		20 6a 9f	jsr $9f6a			jsr 	NSMIsZero 					; zero mantissa ?
.9bf0		f0 04		beq $9bf6			beq 	_NotZero
.9bf2		20 48 9f	jsr $9f48			jsr 	NSMSetZero
.9bf5		60		rts				rts
.9bf6						_NotZero:
.9bf6		4c 6a 90	jmp $906a			jmp 	ReturnTrue

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/peek.asm

.9bf9						PeekByteUnary:
.9bf9		a9 01		lda #$01			lda 	#1
.9bfb		80 0a		bra $9c07			bra 	PeekUnary
.9bfd						PeekWUnary:
.9bfd		a9 02		lda #$02			lda 	#2
.9bff		80 06		bra $9c07			bra 	PeekUnary
.9c01						PeekLUnary:
.9c01		a9 03		lda #$03			lda 	#3
.9c03		80 02		bra $9c07			bra 	PeekUnary
.9c05						PeekDUnary:
.9c05		a9 04		lda #$04			lda 	#4
.9c07						PeekUnary:
.9c07		fa		plx				plx 								; restore position.
.9c08		48		pha				pha 								; save count to copy on stack
.9c09		20 c8 9e	jsr $9ec8			jsr		Evaluate16BitInteger 		; address as constant.
.9c0c		20 e4 8f	jsr $8fe4			jsr 	CheckRightBracket
.9c0f		b5 58		lda $58,x			lda 	NSMantissa0,x 				; save mantissa in zTemp0 as address
.9c11		85 36		sta $36				sta 	zTemp0
.9c13		b5 60		lda $60,x			lda 	NSMantissa1,x
.9c15		85 37		sta $37				sta 	zTemp0+1
.9c17		20 48 9f	jsr $9f48			jsr 	NSMSetZero 					; clear the result to zero.
.9c1a		68		pla				pla 								; count in zTemp2
.9c1b		85 3a		sta $3a				sta 	zTemp2
.9c1d		da		phx				phx 								; save stack position and offset of read
.9c1e		5a		phy				phy
.9c1f		a0 00		ldy #$00			ldy 	#0 							; byte read offset.
.9c21						_PULoop:
.9c21		b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next byte, write to mantissa0,x
.9c23		95 58		sta $58,x			sta 	NSMantissa0,x 				; we change X not the index before it.
.9c25		c8		iny				iny 								; next byte to write
.9c26		8a		txa				txa 								; next byte to read - stack layout in 04data.inc
.9c27		18		clc				clc
.9c28		69 08		adc #$08			adc 	#MathStackSize
.9c2a		aa		tax				tax
.9c2b		c6 3a		dec $3a				dec 	zTemp2 						; done them all
.9c2d		d0 f2		bne $9c21			bne 	_PULoop
.9c2f		7a		ply				ply 								; restore stack/code pos and exit.
.9c30		fa		plx				plx
.9c31		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/rnd.asm

.9c32						Unary_Random:
.9c32		fa		plx				plx
.9c33		20 a4 9c	jsr $9ca4			jsr 	Random32Bit 				; get a random number
.9c36		20 8d 9c	jsr $9c8d			jsr 	URCopyToMantissa  			; put in mantissa
.9c39		b1 30		lda ($30),y			lda 	(codePtr),y
.9c3b		c9 29		cmp #$29			cmp 	#KWD_RPAREN
.9c3d		f0 08		beq $9c47			beq 	_URNoModulus 				; then we return a random 30 bit number.
.9c3f		e8		inx				inx
.9c40		20 c8 9e	jsr $9ec8			jsr 	Evaluate16BitInteger 		; put modulus value in +1
.9c43		ca		dex				dex
.9c44		20 bc 91	jsr $91bc			jsr 	IntegerModulusNoCheck 		; calculate modulus, so now 0 .. n-1
.9c47						_URNoModulus:
.9c47		74 50		stz $50,x			stz 	NSStatus,x 					; make it an integer positive
.9c49		74 78		stz $78,x			stz 	NSExponent,x
.9c4b		20 e4 8f	jsr $8fe4			jsr 	CheckRightBracket
.9c4e		60		rts				rts
.9c4f						Unary_Rnd:
.9c4f		fa		plx				plx
.9c50		20 96 9e	jsr $9e96			jsr 	EvaluateNumber 				; number to use.
.9c53		20 e4 8f	jsr $8fe4			jsr 	CheckRightBracket 			; closing bracket
.9c56		20 6a 9f	jsr $9f6a			jsr 	NSMIsZero 					; if zero, then don't generate a new number
.9c59		f0 26		beq $9c81			beq 	_URCopySeed
.9c5b		b5 50		lda $50,x			lda 	NSStatus,x 					; if -ve, then seed using parameter
.9c5d		10 1f		bpl $9c7e			bpl 	_URDontSeed
.9c5f		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy - value to seed butchering it.
.9c61		49 17		eor #$17			eor 	#$17
.9c63		8d 08 04	sta $0408			sta 	randomSeed+0
.9c66		b5 60		lda $60,x			lda 	NSMantissa1,x
.9c68		49 a5		eor #$a5			eor 	#$A5
.9c6a		8d 09 04	sta $0409			sta 	randomSeed+1
.9c6d		b5 68		lda $68,x			lda 	NSMantissa2,x
.9c6f		49 c2		eor #$c2			eor 	#$C2
.9c71		8d 0a 04	sta $040a			sta 	randomSeed+2
.9c74		b5 70		lda $70,x			lda 	NSMantissa3,x
.9c76		49 9d		eor #$9d			eor 	#$9D
.9c78		8d 0b 04	sta $040b			sta 	randomSeed+3
.9c7b		20 a4 9c	jsr $9ca4			jsr 	Random32Bit
.9c7e						_URDontSeed:
.9c7e		20 a4 9c	jsr $9ca4			jsr 	Random32Bit 				; generate a number
.9c81						_URCopySeed:
.9c81		20 8d 9c	jsr $9c8d			jsr 	URCopyToMantissa 			; copy into mantissa
.9c84		a9 e2		lda #$e2			lda 	#-30 						; force into 0-1 range
.9c86		95 78		sta $78,x			sta 	NSExponent,x
.9c88		a9 08		lda #$08			lda 	#NSTFloat
.9c8a		95 50		sta $50,x			sta 	NSStatus,x 					; positive float
.9c8c		60		rts				rts
.9c8d						URCopyToMantissa:
.9c8d		ad 08 04	lda $0408			lda 	randomSeed+0
.9c90		95 58		sta $58,x			sta 	NSMantissa0,x
.9c92		ad 09 04	lda $0409			lda 	randomSeed+1
.9c95		95 60		sta $60,x			sta 	NSMantissa1,x
.9c97		ad 0a 04	lda $040a			lda 	randomSeed+2
.9c9a		95 68		sta $68,x			sta 	NSMantissa2,x
.9c9c		ad 0b 04	lda $040b			lda 	randomSeed+3
.9c9f		29 3f		and #$3f			and 	#$3F 						; make legal mantissa
.9ca1		95 70		sta $70,x			sta 	NSMantissa3,x
.9ca3		60		rts				rts
.9ca4						Random32Bit:
.9ca4		5a		phy				phy
.9ca5		a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.9ca7		ad 08 04	lda $0408			lda 	randomSeed+0 				; check the seed isn't zero
.9caa		d0 03		bne $9caf			bne 	_Random1
.9cac		a8		tay				tay 								; if so do it 256 times
.9cad		a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.9caf						_Random1:
.9caf		0a		asl a				asl 	a 							; LSFR RNG
.9cb0		2e 09 04	rol $0409			rol 	randomSeed+1
.9cb3		2e 0a 04	rol $040a			rol 	randomSeed+2
.9cb6		2e 0b 04	rol $040b			rol 	randomSeed+3
.9cb9		90 02		bcc $9cbd			bcc 	_Random2
.9cbb		49 c5		eor #$c5			eor 	#$C5
.9cbd						_Random2:
.9cbd		88		dey				dey
.9cbe		d0 ef		bne $9caf			bne 	_Random1
.9cc0		8d 08 04	sta $0408			sta 	randomSeed+0
.9cc3		7a		ply				ply
.9cc4		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/sgn.asm

.9cc5						SgnUnary:
.9cc5		fa		plx				plx 								; restore stack pos
.9cc6		20 96 9e	jsr $9e96			jsr 	EvaluateNumber 				; get a float or int
.9cc9		20 e4 8f	jsr $8fe4			jsr 	CheckRightBracket
.9ccc		20 6a 9f	jsr $9f6a			jsr 	NSMIsZero 					; if zero
.9ccf		f0 0e		beq $9cdf			beq 	_SGZero  					; return Int Zero
.9cd1		b5 50		lda $50,x			lda 	NSStatus,x 					; get status w/sign
.9cd3		48		pha				pha
.9cd4		a9 01		lda #$01			lda 	#1 							; set to 1
.9cd6		20 4a 9f	jsr $9f4a			jsr 	NSMSetByte
.9cd9		68		pla				pla
.9cda		29 80		and #$80			and		#$80 						; copy the sign byte out
.9cdc		95 50		sta $50,x			sta 	NSStatus,x  				; so it will be -1 or 1
.9cde		60		rts				rts
.9cdf		20 48 9f	jsr $9f48	_SGZero:jsr 	NSMSetZero
.9ce2		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/val.asm

.9ce3						ValUnary:
.9ce3		fa		plx				plx 								; restore stack pos
.9ce4		20 f9 9c	jsr $9cf9			jsr 	ValMainCode 				; do the main val() code
.9ce7		b0 01		bcs $9cea			bcs 	_VUError 					; couldn't convert
.9ce9		60		rts				rts
.9cea						_VUError:
.9cea		4c d0 a0	jmp $a0d0			jmp 	TypeError
.9ced						IsValUnary:
.9ced		fa		plx				plx 								; restore stack pos
.9cee		20 f9 9c	jsr $9cf9			jsr 	ValMainCode 				; do the main val() code
.9cf1		b0 03		bcs $9cf6			bcs 	_VUBad
.9cf3		4c 6a 90	jmp $906a			jmp 	ReturnTrue
.9cf6						_VUBad:
.9cf6		4c 75 90	jmp $9075			jmp 	ReturnFalse
.9cf9						ValMainCode:
.9cf9		20 a0 9e	jsr $9ea0			jsr 	EvaluateString 				; get a string
.9cfc		20 e4 8f	jsr $8fe4			jsr 	CheckRightBracket 			; check right bracket present
.9cff						ValEvaluateZTemp0:
.9cff		5a		phy				phy
.9d00		b2 36		lda ($36)			lda 	(zTemp0) 					; check not empty string
.9d02		f0 17		beq $9d1b			beq 	_VMCFail2
.9d04		a0 ff		ldy #$ff			ldy 	#$FF 						; start position
.9d06		48		pha				pha 								; save first character
.9d07		c9 2d		cmp #$2d			cmp 	#"-"		 				; is it - ?
.9d09		d0 01		bne $9d0c			bne 	_VMCStart
.9d0b		c8		iny				iny 								; skip over -
.9d0c						_VMCStart:
.9d0c		38		sec				sec 								; initialise first time round.
.9d0d						_VMCNext:
.9d0d		c8		iny				iny 								; pre-increment
.9d0e		b1 36		lda ($36),y			lda 	(zTemp0),y 					; next character = EOS ?
.9d10		f0 0c		beq $9d1e			beq 	_VMCSuccess 				; successful.
.9d12		20 47 98	jsr $9847			jsr 	EncodeNumber 				; send it to the number-builder
.9d15		90 03		bcc $9d1a			bcc 	_VMCFail 					; if failed, give up.
.9d17		18		clc				clc 								; next time round, countinue
.9d18		80 f3		bra $9d0d			bra 	_VMCNext
.9d1a						_VMCFail:
.9d1a		68		pla				pla
.9d1b						_VMCFail2:
.9d1b		7a		ply				ply
.9d1c		38		sec				sec
.9d1d		60		rts				rts
.9d1e						_VMCSuccess:
.9d1e		a9 00		lda #$00			lda 	#0 							; construct final
.9d20		20 47 98	jsr $9847			jsr 	EncodeNumber 				; by sending a duff value.
.9d23		68		pla				pla 								; if it was -ve
.9d24		c9 2d		cmp #$2d			cmp 	#"-"
.9d26		d0 03		bne $9d2b			bne 	_VMCNotNegative
.9d28		20 0a 9f	jsr $9f0a			jsr		NSMNegate 					; negate it.
.9d2b						_VMCNotNegative:
.9d2b		7a		ply				ply
.9d2c		18		clc				clc
.9d2d		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/chr.asm

.9d2e						ChrUnary:
.9d2e		fa		plx				plx 								; restore stack pos
.9d2f		20 e3 9e	jsr $9ee3			jsr 	Evaluate8BitInteger			; get value (chr$(0) returns an empty string)
.9d32		48		pha				pha
.9d33		20 e4 8f	jsr $8fe4			jsr 	CheckRightBracket
.9d36		a9 01		lda #$01			lda 	#1 							; allocate space for one char
.9d38		20 33 b1	jsr $b133			jsr 	StringTempAllocate
.9d3b		68		pla				pla 								; write number to it
.9d3c		20 6c b1	jsr $b16c			jsr 	StringTempWrite
.9d3f		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/spc.asm

.9d40						SpcUnary:
.9d40		fa		plx				plx 								; restore stack pos
.9d41		20 e3 9e	jsr $9ee3			jsr 	Evaluate8BitInteger			; get value
.9d44		5a		phy				phy
.9d45		48		pha				pha 								; save count
.9d46		20 33 b1	jsr $b133			jsr 	StringTempAllocate
.9d49		7a		ply				ply 								; to do count in Y
.9d4a						_SpcLoop:
.9d4a		c0 00		cpy #$00			cpy 	#0 							; copy Y spaces in.
.9d4c		f0 08		beq $9d56			beq 	_SpcExit
.9d4e		a9 20		lda #$20			lda 	#32
.9d50		20 6c b1	jsr $b16c			jsr 	StringTempWrite
.9d53		88		dey				dey
.9d54		80 f4		bra $9d4a			bra 	_SpcLoop
.9d56						_SpcExit:
.9d56		7a		ply				ply
.9d57		20 e4 8f	jsr $8fe4			jsr 	CheckRightBracket
.9d5a		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/str.asm

.9d5b						Unary_Str:
.9d5b		fa		plx				plx
.9d5c		20 96 9e	jsr $9e96			jsr 	EvaluateNumber  			; get number
.9d5f		20 e4 8f	jsr $8fe4			jsr 	CheckRightBracket 			; closing bracket
.9d62		a9 05		lda #$05			lda 	#5 							; maximum decimals, from Basic816
.9d64		20 7d 9d	jsr $9d7d			jsr 	ConvertNumberToString 		; do the conversion.
.9d67		a9 21		lda #$21			lda		#33 						; create buffer
.9d69		20 33 b1	jsr $b133			jsr 	StringTempAllocate 			; allocate memory
.9d6c		da		phx				phx  								; copy the converted string into the buffer.
.9d6d		a2 00		ldx #$00			ldx 	#0
.9d6f						_USCopy:
.9d6f		bd 49 06	lda $0649,x			lda 	decimalBuffer,x
.9d72		20 6c b1	jsr $b16c			jsr 	StringTempWrite
.9d75		e8		inx				inx
.9d76		bd 49 06	lda $0649,x			lda 	decimalBuffer,x
.9d79		d0 f4		bne $9d6f			bne 	_USCopy
.9d7b		fa		plx				plx
.9d7c		60		rts				rts
.9d7d						ConvertNumberToString:
.9d7d		5a		phy				phy 								; save code position
.9d7e		8d 14 04	sta $0414			sta 	decimalPlaces	 			; save number of DPs.
.9d81		9c 15 04	stz $0415			stz 	dbOffset 					; offset into decimal buffer = start.
.9d84		b5 50		lda $50,x			lda 	NSStatus,x  				; is it -ve.
.9d86		10 09		bpl $9d91			bpl 	_CNTSNotNegative
.9d88		29 7f		and #$7f			and 	#$7F 						; make +ve
.9d8a		95 50		sta $50,x			sta 	NSStatus,x
.9d8c		a9 2d		lda #$2d			lda 	#"-"
.9d8e		20 f2 9d	jsr $9df2			jsr 	WriteDecimalBuffer
.9d91						_CNTSNotNegative:
.9d91		b5 78		lda $78,x			lda 	NSExponent,x 				; check if decimal
.9d93		f0 12		beq $9da7			beq 	_CNTSNotFloat
.9d95		e8		inx				inx 								; round up so we don't get too many 6.999999
.9d96		a9 01		lda #$01			lda 	#1
.9d98		20 4a 9f	jsr $9f4a			jsr 	NSMSetByte
.9d9b		ca		dex				dex
.9d9c		b5 78		lda $78,x			lda		NSExponent,x
.9d9e		95 79		sta $79,x			sta 	NSExponent+1,x
.9da0		a9 08		lda #$08			lda 	#NSTFloat
.9da2		95 51		sta $51,x			sta 	NSStatus+1,x
.9da4		20 4c 95	jsr $954c			jsr 	FloatAdd
.9da7						_CNTSNotFloat:
.9da7		20 d4 9d	jsr $9dd4			jsr 	MakePlusTwoString 			; do the integer part.
.9daa		20 12 96	jsr $9612			jsr 	FloatFractionalPart 		; get the fractional part
.9dad		20 c3 96	jsr $96c3			jsr 	NSNormalise					; normalise , exit if zero
.9db0		f0 20		beq $9dd2			beq 	_CNTSExit
.9db2		a9 2e		lda #$2e			lda 	#"."
.9db4		20 f2 9d	jsr $9df2			jsr 	WriteDecimalBuffer 			; write decimal place
.9db7						_CNTSDecimal:
.9db7		ce 14 04	dec $0414			dec 	decimalPlaces 				; done all the decimals
.9dba		30 16		bmi $9dd2			bmi 	_CNTSExit
.9dbc		e8		inx				inx 								; x 10.0
.9dbd		a9 0a		lda #$0a			lda 	#10
.9dbf		20 4a 9f	jsr $9f4a			jsr 	NSMSetByte
.9dc2		a9 08		lda #$08			lda 	#NSTFloat
.9dc4		95 50		sta $50,x			sta 	NSStatus,x
.9dc6		ca		dex				dex
.9dc7		20 91 96	jsr $9691			jsr 	FloatMultiply
.9dca		20 d4 9d	jsr $9dd4			jsr 	MakePlusTwoString 			; put the integer e.g. next digit out.
.9dcd		20 12 96	jsr $9612			jsr 	FloatFractionalPart 		; get the fractional part
.9dd0		80 e5		bra $9db7			bra 	_CNTSDecimal 				; keep going.
.9dd2						_CNTSExit:
.9dd2		7a		ply				ply
.9dd3		60		rts				rts
.9dd4						MakePlusTwoString:
.9dd4		da		phx				phx
.9dd5		20 2b 9f	jsr $9f2b			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.9dd8		e8		inx				inx 								; access it
.9dd9		e8		inx				inx
.9dda		20 6a 96	jsr $966a			jsr 	FloatIntegerPart 			; make it an integer
.9ddd		a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.9ddf		20 7c 94	jsr $947c			jsr 	ConvertInt32
.9de2		a2 00		ldx #$00			ldx	 	#0 							; write that to the decimal buffer.
.9de4						_MPTSCopy:
.9de4		bd 27 06	lda $0627,x			lda 	numberBuffer,x
.9de7		20 f2 9d	jsr $9df2			jsr 	WriteDecimalBuffer
.9dea		e8		inx				inx
.9deb		bd 27 06	lda $0627,x			lda 	numberBuffer,x
.9dee		d0 f4		bne $9de4			bne 	_MPTSCopy
.9df0		fa		plx				plx
.9df1		60		rts				rts
.9df2						WriteDecimalBuffer:
.9df2		da		phx				phx
.9df3		ae 15 04	ldx $0415			ldx 	dbOffset
.9df6		9d 49 06	sta $0649,x			sta 	decimalBuffer,x
.9df9		9e 4a 06	stz $064a,x			stz 	decimalBuffer+1,x
.9dfc		ee 15 04	inc $0415			inc 	dbOffset
.9dff		fa		plx				plx
.9e00		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/substring.asm

.9e01						Unary_Left:
.9e01		fa		plx				plx
.9e02		18		clc				clc 								; only one parameter
.9e03		20 66 9e	jsr $9e66			jsr 	SubstringInitial 			; set up.
.9e06		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; Param #1 is the length
.9e08		95 5a		sta $5a,x			sta 	NSMantissa0+2,x
.9e0a		74 59		stz $59,x			stz 	NSMantissa0+1,x 			; Start is zero.
.9e0c		80 25		bra $9e33			bra 	SubstringMain
.9e0e						Unary_Right:
.9e0e		fa		plx				plx
.9e0f		18		clc				clc 								; only one parameter
.9e10		20 66 9e	jsr $9e66			jsr 	SubstringInitial 			; set up.
.9e13		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; length => param 2
.9e15		95 5a		sta $5a,x			sta 	NSMantissa0+2,x
.9e17		b5 78		lda $78,x			lda 	NSExponent,x 				; total length
.9e19		f5 59		sbc $59,x			sbc 	NSMantissa0+1,x 			; length - required.
.9e1b		b0 02		bcs $9e1f			bcs 	_URNotUnderflow
.9e1d		a9 00		lda #$00			lda 	#0 							; start from the beginning, as something like right$("AB",3)
.9e1f						_URNotUnderflow:
.9e1f		95 59		sta $59,x			sta 	NSMantissa0+1,x 			; this is the start position
.9e21		80 10		bra $9e33			bra 	SubstringMain
.9e23						Unary_Mid:
.9e23		fa		plx				plx
.9e24		38		sec				sec 								; two parameters
.9e25		20 66 9e	jsr $9e66			jsr 	SubstringInitial 			; set up.
.9e28		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; first parameter is zero ?
.9e2a		f0 04		beq $9e30			beq 	_UMError
.9e2c		d6 59		dec $59,x			dec 	NSMantissa0+1,x				; reduce initial offset by 1 as MID$(a$,1..) is actually the first character
.9e2e		80 03		bra $9e33			bra 	SubstringMain
.9e30						_UMError:
.9e30		4c d5 a0	jmp $a0d5			jmp 	ArgumentError
.9e33						SubstringMain:
.9e33		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; is the initial offset >= the length
.9e35		d5 78		cmp $78,x			cmp 	NSExponent,x
.9e37		b0 27		bcs $9e60			bcs 	_SSMNull 					; if so, return an empty string.
.9e39		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; if copy count is zero
.9e3b		f0 23		beq $9e60			beq 	_SSMNull 					; return empty string.
.9e3d		18		clc				clc 								; add the offset +1 to the address and
.9e3e		b5 58		lda $58,x			lda	 	NSMantissa0,x 				; put in zTemp, this is the start of the substring to copy.
.9e40		75 59		adc $59,x			adc 	NSMantissa0+1,x
.9e42		85 36		sta $36				sta 	zTemp0
.9e44		b5 60		lda $60,x			lda	 	NSMantissa1,x
.9e46		69 00		adc #$00			adc 	#0
.9e48		85 37		sta $37				sta 	zTemp0+1
.9e4a						_SSMNoCarry:
.9e4a		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; characters required.
.9e4c		20 33 b1	jsr $b133			jsr 	StringTempAllocate 			; allocate that many characters
.9e4f		5a		phy				phy 								; save Y
.9e50		a0 00		ldy #$00			ldy 	#0 							; start copying in.
.9e52						_SSMCopy:
.9e52		b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next character
.9e54		f0 08		beq $9e5e			beq 	_SSMEString 				; no more to copy
.9e56		20 6c b1	jsr $b16c			jsr 	StringTempWrite 			; and write it out.
.9e59		c8		iny				iny
.9e5a		d6 5a		dec $5a,x			dec 	NSMantissa0+2,x
.9e5c		d0 f4		bne $9e52			bne 	_SSMCopy
.9e5e						_SSMEString:
.9e5e		7a		ply				ply
.9e5f						_SSMExit:
.9e5f		60		rts				rts
.9e60						_SSMNull:
.9e60		a9 00		lda #$00			lda 	#0
.9e62		20 33 b1	jsr $b133			jsr 	StringTempAllocate
.9e65		60		rts				rts
.9e66						SubstringInitial:
.9e66		da		phx				phx 								; save initial stack position
.9e67		08		php				php 								; save carry on stack indicating 2 parameters
.9e68		20 a0 9e	jsr $9ea0			jsr 	EvaluateString 				; get a string
.9e6b		5a		phy				phy 								; calculate length to exponent.
.9e6c		a0 ff		ldy #$ff			ldy 	#$FF
.9e6e						_SIFindLength:
.9e6e		c8		iny				iny
.9e6f		b1 36		lda ($36),y			lda 	(zTemp0),y
.9e71		d0 fb		bne $9e6e			bne 	_SIFindLength
.9e73		98		tya				tya
.9e74		95 78		sta $78,x			sta 	NSExponent,x
.9e76		7a		ply				ply
.9e77		e8		inx				inx
.9e78		20 ec 8f	jsr $8fec			jsr 	CheckComma 					; comma next
.9e7b		20 e3 9e	jsr $9ee3			jsr 	Evaluate8BitInteger 		; get next parameter
.9e7e		28		plp				plp 								; is it the last parameter ?
.9e7f		90 07		bcc $9e88			bcc 	_SSIExit 					; if so, exit.
.9e81		e8		inx				inx
.9e82		20 ec 8f	jsr $8fec			jsr 	CheckComma 					; comma next
.9e85		20 e3 9e	jsr $9ee3			jsr 	Evaluate8BitInteger 		; get last parameter
.9e88						_SSIExit:
.9e88		fa		plx				plx
.9e89		20 e4 8f	jsr $8fe4			jsr 	CheckRightBracket 			; check closing bracket
.9e8c		60		rts				rts 								; exit

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/exprhelper.asm

.9e8d						EvaluateValue:
.9e8d		48		pha				pha
.9e8e		20 01 95	jsr $9501			jsr		EvaluateExpression 			; expression
.9e91		20 c4 97	jsr $97c4			jsr 	Dereference					; derefernce it
.9e94		68		pla				pla
.9e95		60		rts				rts
.9e96						EvaluateNumber:
.9e96		20 8d 9e	jsr $9e8d			jsr 	EvaluateValue 				; get a value
.9e99		b5 50		lda $50,x			lda 	NSStatus,x 					; check if string.
.9e9b		29 10		and #$10			and 	#NSBIsString
.9e9d		d0 13		bne $9eb2			bne 	HelperTypeError
.9e9f		60		rts				rts
.9ea0						EvaluateString:
.9ea0		20 8d 9e	jsr $9e8d			jsr 	EvaluateValue 				; get a value
.9ea3		b5 50		lda $50,x			lda 	NSStatus,x 					; check if string.
.9ea5		29 10		and #$10			and 	#NSBIsString
.9ea7		f0 09		beq $9eb2			beq 	HelperTypeError
.9ea9						CopyAddressToTemp0:
.9ea9		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy address -> zTemp0
.9eab		85 36		sta $36				sta 	zTemp0 						; (so we can do something with it)
.9ead		b5 60		lda $60,x			lda 	NSMantissa1,x
.9eaf		85 37		sta $37				sta 	zTemp0+1
.9eb1		60		rts				rts
.9eb2						HelperTypeError:
.9eb2		4c d0 a0	jmp $a0d0			jmp 	TypeError
.9eb5						EvaluateInteger:
.9eb5		20 96 9e	jsr $9e96			jsr 	EvaluateNumber
.9eb8		b5 78		lda $78,x			lda 	NSExponent,x 				; check exponent is zero
.9eba		d0 09		bne $9ec5			bne 	HelperValueError 			; if not, it's a float.
.9ebc		60		rts				rts
.9ebd						EvaluateUnsignedInteger:
.9ebd		20 b5 9e	jsr $9eb5			jsr 	EvaluateInteger 			; check integer is +ve
.9ec0		b5 50		lda $50,x			lda 	NSStatus,x
.9ec2		30 01		bmi $9ec5			bmi 	HelperValueError
.9ec4		60		rts				rts
.9ec5						HelperValueError:
.9ec5		4c d5 a0	jmp $a0d5			jmp 	ArgumentError
.9ec8						Evaluate16BitInteger:
.9ec8		20 bd 9e	jsr $9ebd			jsr	 	EvaluateUnsignedInteger		; get integer
.9ecb		b5 70		lda $70,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.9ecd		15 68		ora $68,x			ora 	NSMantissa2,x
.9ecf		d0 f4		bne $9ec5			bne 	HelperValueError
.9ed1		60		rts				rts
.9ed2						Evaluate16BitIntegerSigned:
.9ed2		20 b5 9e	jsr $9eb5			jsr	 	EvaluateInteger				; get integer
.9ed5		b5 70		lda $70,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.9ed7		15 68		ora $68,x			ora 	NSMantissa2,x
.9ed9		d0 ea		bne $9ec5			bne 	HelperValueError
.9edb		b5 50		lda $50,x			lda 	NSStatus,x 					; signed ?
.9edd		10 03		bpl $9ee2			bpl 	_EISNotSigned
.9edf		20 11 9f	jsr $9f11			jsr 	NSMNegateMantissa 			; makes it an actual 2's complement value.
.9ee2						_EISNotSigned:
.9ee2		60		rts				rts
.9ee3						Evaluate8BitInteger:
.9ee3		20 bd 9e	jsr $9ebd			jsr	 	EvaluateUnsignedInteger 	; get an integer
.9ee6		d0 dd		bne $9ec5			bne 	HelperValueError
.9ee8		b5 70		lda $70,x			lda 	NSMantissa3,x	 			; bytes 1, 2 & 3 must be zero
.9eea		15 68		ora $68,x			ora 	NSMantissa2,x
.9eec		15 60		ora $60,x			ora 	NSMantissa1,x
.9eee		d0 d5		bne $9ec5			bne 	HelperValueError
.9ef0		b5 58		lda $58,x			lda 	NSMantissa0,x
.9ef2		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/mult8x8.asm

.9ef3						Multiply8x8:
.9ef3		4a		lsr a		  		lsr 	a  							; prime the carry bit for the loop
.9ef4		85 36		sta $36			  	sta 	zTemp0
.9ef6		86 37		stx $37				stx 	zTemp0+1
.9ef8		a9 00		lda #$00			lda 	#0
.9efa		a2 08		ldx #$08			ldx 	#8
.9efc						_M88Loop:
.9efc		90 03		bcc $9f01			bcc 	_M88NoAdd
.9efe		18		clc				clc
.9eff		65 37		adc $37				adc 	zTemp0+1
.9f01						_M88NoAdd:
.9f01		6a		ror a				ror 	a
.9f02		66 36		ror $36				ror 	zTemp0  					; pull another bit out for the next iteration
.9f04		ca		dex				dex         						; inc/dec don't modify carry; only shifts and adds do
.9f05		d0 f5		bne $9efc			bne 	_M88Loop
.9f07		85 37		sta $37				sta 	zTemp0+1 					; store high 8 bits.
.9f09		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/utility.asm

.9f0a						NSMNegate:
.9f0a		b5 50		lda $50,x			lda 	NSStatus,x 					; everything is sign/magnitude usually so just
.9f0c		49 80		eor #$80			eor 	#NSBIsNegative  			; toggle the negative flag
.9f0e		95 50		sta $50,x			sta 	NSStatus,x
.9f10		60		rts				rts
.9f11						NSMNegateMantissa:
.9f11		38		sec				sec 								; when we want an actual 32 bit 2's complement value.
.9f12		a9 00		lda #$00			lda 	#0
.9f14		f5 58		sbc $58,x			sbc 	NSMantissa0,x
.9f16		95 58		sta $58,x			sta 	NSMantissa0,x
.9f18		a9 00		lda #$00			lda 	#0
.9f1a		f5 60		sbc $60,x			sbc 	NSMantissa1,x
.9f1c		95 60		sta $60,x			sta 	NSMantissa1,x
.9f1e		a9 00		lda #$00			lda 	#0
.9f20		f5 68		sbc $68,x			sbc 	NSMantissa2,x
.9f22		95 68		sta $68,x			sta 	NSMantissa2,x
.9f24		a9 00		lda #$00			lda 	#0
.9f26		f5 70		sbc $70,x			sbc 	NSMantissa3,x
.9f28		95 70		sta $70,x			sta 	NSMantissa3,x
.9f2a		60		rts				rts
.9f2b						NSMShiftUpTwo:
.9f2b		b5 58		lda $58,x			lda 	NSMantissa0,x
.9f2d		95 5a		sta $5a,x			sta 	NSMantissa0+2,x
.9f2f		b5 60		lda $60,x			lda 	NSMantissa1,x
.9f31		95 62		sta $62,x			sta 	NSMantissa1+2,x
.9f33		b5 68		lda $68,x			lda 	NSMantissa2,x
.9f35		95 6a		sta $6a,x			sta 	NSMantissa2+2,x
.9f37		b5 70		lda $70,x			lda 	NSMantissa3,x
.9f39		95 72		sta $72,x			sta 	NSMantissa3+2,x
.9f3b		b5 78		lda $78,x			lda 	NSExponent,x
.9f3d		95 7a		sta $7a,x			sta 	NSExponent+2,x
.9f3f		b5 50		lda $50,x			lda 	NSStatus,x
.9f41		95 52		sta $52,x			sta 	NSStatus+2,x
.9f43		60		rts				rts
.9f44						NSMSetZeroMantissaOnly:
.9f44		a9 00		lda #$00			lda 	#0
.9f46		80 06		bra $9f4e			bra 	NSMSetMantissa
.9f48						NSMSetZero:
.9f48		a9 00		lda #$00			lda 	#0
.9f4a						NSMSetByte:
.9f4a		74 78		stz $78,x			stz 	NSExponent,x 				; zero exponent, as integer.
.9f4c		74 50		stz $50,x			stz 	NSStatus,x 					; status zero (integer)
.9f4e						NSMSetMantissa:
.9f4e		95 58		sta $58,x			sta 	NSMantissa0,x 				; mantissa
.9f50		74 60		stz $60,x			stz 	NSMantissa1,x
.9f52		74 68		stz $68,x			stz 	NSMantissa2,x
.9f54		74 70		stz $70,x			stz 	NSMantissa3,x
.9f56		60		rts				rts
.9f57						NSMShiftLeft:
.9f57		18		clc				clc
.9f58						NSMRotateLeft:
.9f58		36 58		rol $58,x			rol 	NSMantissa0,x
.9f5a		36 60		rol $60,x			rol		NSMantissa1,x
.9f5c		36 68		rol $68,x			rol		NSMantissa2,x
.9f5e		36 70		rol $70,x			rol		NSMantissa3,x
.9f60		60		rts				rts
.9f61						NSMShiftRight:
.9f61		56 70		lsr $70,x			lsr 	NSMantissa3,x
.9f63		76 68		ror $68,x			ror		NSMantissa2,x
.9f65		76 60		ror $60,x			ror		NSMantissa1,x
.9f67		76 58		ror $58,x			ror		NSMantissa0,x
.9f69		60		rts				rts
.9f6a						NSMIsZero:
.9f6a		b5 70		lda $70,x			lda 	NSMantissa3,x
.9f6c		15 68		ora $68,x			ora		NSMantissa2,x
.9f6e		15 60		ora $60,x			ora		NSMantissa1,x
.9f70		15 58		ora $58,x			ora		NSMantissa0,x
.9f72		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./tick.task/f256/ticktask.asm

.9f73						TickHandler:
.9f73		5a		phy				phy 								; need to preserve Y
.9f74		20 7b 80	jsr $807b			jsr 	SNDUpdate 					; update sound
.9f77		7a		ply				ply
.9f78		60		rts				rts
.065e						LastTick:
>065e								.fill 		1

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/asmcore.asm

.9f79						Assemble_ora:
.9f79		20 e1 80	jsr $80e1		jsr	AssembleGroup1
>9f7c		01					.byte $01
.9f7d						Assemble_and:
.9f7d		20 e1 80	jsr $80e1		jsr	AssembleGroup1
>9f80		21					.byte $21
.9f81						Assemble_eor:
.9f81		20 e1 80	jsr $80e1		jsr	AssembleGroup1
>9f84		41					.byte $41
.9f85						Assemble_adc:
.9f85		20 e1 80	jsr $80e1		jsr	AssembleGroup1
>9f88		61					.byte $61
.9f89						Assemble_sta:
.9f89		20 e1 80	jsr $80e1		jsr	AssembleGroup1
>9f8c		81					.byte $81
.9f8d						Assemble_lda:
.9f8d		20 e1 80	jsr $80e1		jsr	AssembleGroup1
>9f90		a1					.byte $a1
.9f91						Assemble_cmp:
.9f91		20 e1 80	jsr $80e1		jsr	AssembleGroup1
>9f94		c1					.byte $c1
.9f95						Assemble_sbc:
.9f95		20 e1 80	jsr $80e1		jsr	AssembleGroup1
>9f98		e1					.byte $e1
.9f99						Assemble_asl:
.9f99		20 e8 80	jsr $80e8		jsr	AssembleGroup2
>9f9c		02					.byte $02
>9f9d		75					.byte $75
.9f9e						Assemble_rol:
.9f9e		20 e8 80	jsr $80e8		jsr	AssembleGroup2
>9fa1		22					.byte $22
>9fa2		75					.byte $75
.9fa3						Assemble_lsr:
.9fa3		20 e8 80	jsr $80e8		jsr	AssembleGroup2
>9fa6		42					.byte $42
>9fa7		75					.byte $75
.9fa8						Assemble_ror:
.9fa8		20 e8 80	jsr $80e8		jsr	AssembleGroup2
>9fab		62					.byte $62
>9fac		75					.byte $75
.9fad						Assemble_stx:
.9fad		20 e8 80	jsr $80e8		jsr	AssembleGroup2
>9fb0		82					.byte $82
>9fb1		50					.byte $50
.9fb2						Assemble_ldx:
.9fb2		20 e8 80	jsr $80e8		jsr	AssembleGroup2
>9fb5		a2					.byte $a2
>9fb6		d0					.byte $d0
.9fb7						Assemble_dec:
.9fb7		20 e8 80	jsr $80e8		jsr	AssembleGroup2
>9fba		c2					.byte $c2
>9fbb		55					.byte $55
.9fbc						Assemble_inc:
.9fbc		20 e8 80	jsr $80e8		jsr	AssembleGroup2
>9fbf		e2					.byte $e2
>9fc0		55					.byte $55
.9fc1						Assemble_stz:
.9fc1		20 e8 80	jsr $80e8		jsr	AssembleGroup2
>9fc4		60					.byte $60
>9fc5		44					.byte $44
.9fc6						Assemble_bit:
.9fc6		20 e8 80	jsr $80e8		jsr	AssembleGroup2
>9fc9		20					.byte $20
>9fca		55					.byte $55
.9fcb						Assemble_sty:
.9fcb		20 e8 80	jsr $80e8		jsr	AssembleGroup2
>9fce		80					.byte $80
>9fcf		54					.byte $54
.9fd0						Assemble_ldy:
.9fd0		20 e8 80	jsr $80e8		jsr	AssembleGroup2
>9fd3		a0					.byte $a0
>9fd4		d5					.byte $d5
.9fd5						Assemble_cpy:
.9fd5		20 e8 80	jsr $80e8		jsr	AssembleGroup2
>9fd8		c0					.byte $c0
>9fd9		d4					.byte $d4
.9fda						Assemble_cpx:
.9fda		20 e8 80	jsr $80e8		jsr	AssembleGroup2
>9fdd		e0					.byte $e0
>9fde		d0					.byte $d0
.9fdf						Assemble_tsb:
.9fdf		20 e8 80	jsr $80e8		jsr	AssembleGroup2
>9fe2		00					.byte $00
>9fe3		50					.byte $50
.9fe4						Assemble_trb:
.9fe4		20 e8 80	jsr $80e8		jsr	AssembleGroup2
>9fe7		10					.byte $10
>9fe8		50					.byte $50
.9fe9						Assemble_jsr:
.9fe9		20 e8 80	jsr $80e8		jsr	AssembleGroup2
>9fec		14					.byte $14
>9fed		10					.byte $10
.9fee						Assemble_jmp:
.9fee		20 e8 80	jsr $80e8		jsr	AssembleGroup2
>9ff1		40					.byte $40
>9ff2		10					.byte $10
.9ff3						Assemble_bpl:
.9ff3		20 39 81	jsr $8139		jsr	AssembleGroup3
>9ff6		10					.byte $10
.9ff7						Assemble_bmi:
.9ff7		20 39 81	jsr $8139		jsr	AssembleGroup3
>9ffa		30					.byte $30
.9ffb						Assemble_bvc:
.9ffb		20 39 81	jsr $8139		jsr	AssembleGroup3
>9ffe		50					.byte $50
.9fff						Assemble_bvs:
.9fff		20 39 81	jsr $8139		jsr	AssembleGroup3
>a002		70					.byte $70
.a003						Assemble_bcc:
.a003		20 39 81	jsr $8139		jsr	AssembleGroup3
>a006		90					.byte $90
.a007						Assemble_bcs:
.a007		20 39 81	jsr $8139		jsr	AssembleGroup3
>a00a		b0					.byte $b0
.a00b						Assemble_bne:
.a00b		20 39 81	jsr $8139		jsr	AssembleGroup3
>a00e		d0					.byte $d0
.a00f						Assemble_beq:
.a00f		20 39 81	jsr $8139		jsr	AssembleGroup3
>a012		f0					.byte $f0
.a013						Assemble_bra:
.a013		20 39 81	jsr $8139		jsr	AssembleGroup3
>a016		80					.byte $80
.a017						Assemble_brk:
.a017		20 6d 81	jsr $816d		jsr	AssembleGroup4
>a01a		00					.byte $00
.a01b						Assemble_php:
.a01b		20 6d 81	jsr $816d		jsr	AssembleGroup4
>a01e		08					.byte $08
.a01f						Assemble_clc:
.a01f		20 6d 81	jsr $816d		jsr	AssembleGroup4
>a022		18					.byte $18
.a023						Assemble_plp:
.a023		20 6d 81	jsr $816d		jsr	AssembleGroup4
>a026		28					.byte $28
.a027						Assemble_sec:
.a027		20 6d 81	jsr $816d		jsr	AssembleGroup4
>a02a		38					.byte $38
.a02b						Assemble_rti:
.a02b		20 6d 81	jsr $816d		jsr	AssembleGroup4
>a02e		40					.byte $40
.a02f						Assemble_pha:
.a02f		20 6d 81	jsr $816d		jsr	AssembleGroup4
>a032		48					.byte $48
.a033						Assemble_cli:
.a033		20 6d 81	jsr $816d		jsr	AssembleGroup4
>a036		58					.byte $58
.a037						Assemble_phy:
.a037		20 6d 81	jsr $816d		jsr	AssembleGroup4
>a03a		5a					.byte $5a
.a03b						Assemble_rts:
.a03b		20 6d 81	jsr $816d		jsr	AssembleGroup4
>a03e		60					.byte $60
.a03f						Assemble_pla:
.a03f		20 6d 81	jsr $816d		jsr	AssembleGroup4
>a042		68					.byte $68
.a043						Assemble_sei:
.a043		20 6d 81	jsr $816d		jsr	AssembleGroup4
>a046		78					.byte $78
.a047						Assemble_ply:
.a047		20 6d 81	jsr $816d		jsr	AssembleGroup4
>a04a		7a					.byte $7a
.a04b						Assemble_dey:
.a04b		20 6d 81	jsr $816d		jsr	AssembleGroup4
>a04e		88					.byte $88
.a04f						Assemble_txa:
.a04f		20 6d 81	jsr $816d		jsr	AssembleGroup4
>a052		8a					.byte $8a
.a053						Assemble_tya:
.a053		20 6d 81	jsr $816d		jsr	AssembleGroup4
>a056		98					.byte $98
.a057						Assemble_txs:
.a057		20 6d 81	jsr $816d		jsr	AssembleGroup4
>a05a		9a					.byte $9a
.a05b						Assemble_tay:
.a05b		20 6d 81	jsr $816d		jsr	AssembleGroup4
>a05e		a8					.byte $a8
.a05f						Assemble_tax:
.a05f		20 6d 81	jsr $816d		jsr	AssembleGroup4
>a062		aa					.byte $aa
.a063						Assemble_clv:
.a063		20 6d 81	jsr $816d		jsr	AssembleGroup4
>a066		b8					.byte $b8
.a067						Assemble_tsx:
.a067		20 6d 81	jsr $816d		jsr	AssembleGroup4
>a06a		ba					.byte $ba
.a06b						Assemble_iny:
.a06b		20 6d 81	jsr $816d		jsr	AssembleGroup4
>a06e		c8					.byte $c8
.a06f						Assemble_dex:
.a06f		20 6d 81	jsr $816d		jsr	AssembleGroup4
>a072		ca					.byte $ca
.a073						Assemble_cld:
.a073		20 6d 81	jsr $816d		jsr	AssembleGroup4
>a076		d8					.byte $d8
.a077						Assemble_phx:
.a077		20 6d 81	jsr $816d		jsr	AssembleGroup4
>a07a		da					.byte $da
.a07b						Assemble_stp:
.a07b		20 6d 81	jsr $816d		jsr	AssembleGroup4
>a07e		db					.byte $db
.a07f						Assemble_inx:
.a07f		20 6d 81	jsr $816d		jsr	AssembleGroup4
>a082		e8					.byte $e8
.a083						Assemble_nop:
.a083		20 6d 81	jsr $816d		jsr	AssembleGroup4
>a086		ea					.byte $ea
.a087						Assemble_sed:
.a087		20 6d 81	jsr $816d		jsr	AssembleGroup4
>a08a		f8					.byte $f8
.a08b						Assemble_plx:
.a08b		20 6d 81	jsr $816d		jsr	AssembleGroup4
>a08e		fa					.byte $fa

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/constants.asm

.a08f						DecimalScalarTable:
>a08f		66 66 66 66				.dword $66666666 ; 0.1
>a093		de					.byte $de
>a094		1f 85 eb 51				.dword $51eb851f ; 0.01
>a098		db					.byte $db
>a099		4c 37 89 41				.dword $4189374c ; 0.001
>a09d		d8					.byte $d8
>a09e		ac 8b db 68				.dword $68db8bac ; 0.0001
>a0a2		d4					.byte $d4
>a0a3		24 d6 e2 53				.dword $53e2d624 ; 1e-05
>a0a7		d1					.byte $d1
>a0a8		83 de 1b 43				.dword $431bde83 ; 1e-06
>a0ac		ce					.byte $ce
>a0ad		6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>a0b1		ca					.byte $ca
>a0b2		89 3b e6 55				.dword $55e63b89 ; 1e-08
>a0b6		c7					.byte $c7
>a0b7		a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>a0bb		c4					.byte $c4
>a0bc		67 7f f3 6d				.dword $6df37f67 ; 1e-10
>a0c0		c0					.byte $c0
>a0c1		86 ff f5 57				.dword $57f5ff86 ; 1e-11
>a0c5		bd					.byte $bd

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.asm

.a0c6						SyntaxError:
.a0c6		a9 02		lda #$02		lda	#2
.a0c8		4c fd 8f	jmp $8ffd		jmp	ErrorHandler
.a0cb						RangeError:
.a0cb		a9 04		lda #$04		lda	#4
.a0cd		4c fd 8f	jmp $8ffd		jmp	ErrorHandler
.a0d0						TypeError:
.a0d0		a9 05		lda #$05		lda	#5
.a0d2		4c fd 8f	jmp $8ffd		jmp	ErrorHandler
.a0d5						ArgumentError:
.a0d5		a9 07		lda #$07		lda	#7
.a0d7		4c fd 8f	jmp $8ffd		jmp	ErrorHandler
.a0da						NotDoneError:
.a0da		a9 0c		lda #$0c		lda	#12
.a0dc		4c fd 8f	jmp $8ffd		jmp	ErrorHandler
.a0df						ErrorText:
>a0df		42 72 65 61 6b 00			.text	"Break",0
>a0e5		53 79 6e 74 61 78 20 65			.text	"Syntax error",0
>a0ed		72 72 6f 72 00
>a0f2		44 69 76 69 73 69 6f 6e			.text	"Division by zero",0
>a0fa		20 62 79 20 7a 65 72 6f 00
>a103		4f 75 74 20 6f 66 20 52			.text	"Out of Range",0
>a10b		61 6e 67 65 00
>a110		54 79 70 65 20 6d 69 73			.text	"Type mismatch",0
>a118		6d 61 74 63 68 00
>a11e		4f 75 74 20 6f 66 20 6d			.text	"Out of memory",0
>a126		65 6d 6f 72 79 00
>a12c		49 6c 6c 65 67 61 6c 20			.text	"Illegal argument",0
>a134		61 72 67 75 6d 65 6e 74 00
>a13d		53 74 6f 70 00				.text	"Stop",0
>a142		53 74 72 69 6e 67 20 74			.text	"String too long",0
>a14a		6f 6f 20 6c 6f 6e 67 00
>a152		41 73 73 65 72 74 69 6f			.text	"Assertion failed",0
>a15a		6e 20 66 61 69 6c 65 64 00
>a163		4f 75 74 20 6f 66 20 64			.text	"Out of data",0
>a16b		61 74 61 00
>a16f		55 6e 69 6d 70 6c 65 6d			.text	"Unimplemented",0
>a177		65 6e 74 65 64 00
>a17d		4e 6f 20 73 75 63 68 20			.text	"No such line number",0
>a185		6c 69 6e 65 20 6e 75 6d 62 65 72 00
>a191		52 65 74 75 72 6e 20 77			.text	"Return without Gosub",0
>a199		69 74 68 6f 75 74 20 47 6f 73 75 62 00
>a1a6		55 6e 74 69 6c 20 77 69			.text	"Until without Repeat",0
>a1ae		74 68 6f 75 74 20 52 65 70 65 61 74 00
>a1bb		57 65 6e 64 20 77 69 74			.text	"Wend without While",0
>a1c3		68 6f 75 74 20 57 68 69 6c 65 00
>a1ce		4e 65 78 74 20 77 69 74			.text	"Next without For",0
>a1d6		68 6f 75 74 20 46 6f 72 00
>a1df		42 41 53 49 43 20 53 74			.text	"BASIC Stack full",0
>a1e7		61 63 6b 20 66 75 6c 6c 00
>a1f0		4f 70 65 6e 20 53 74 72			.text	"Open Structure",0
>a1f8		75 63 74 75 72 65 00
>a1ff		45 6e 64 50 72 6f 63 20			.text	"EndProc without call",0
>a207		77 69 74 68 6f 75 74 20 63 61 6c 6c 00
>a214		41 72 72 61 79 20 61 6c			.text	"Array already defined",0
>a21c		72 65 61 64 79 20 64 65 66 69 6e 65 64 00
>a22a		41 72 72 61 79 20 73 69			.text	"Array size",0
>a232		7a 65 00
>a235		42 61 64 20 61 72 72 61			.text	"Bad array index",0
>a23d		79 20 69 6e 64 65 78 00
>a245		41 72 72 61 79 20 6e 6f			.text	"Array not declared",0
>a24d		74 20 64 65 63 6c 61 72 65 64 00
>a258		46 69 6c 65 20 6e 6f 74			.text	"File not found",0
>a260		20 66 6f 75 6e 64 00
>a267		44 72 69 76 65 20 6e 6f			.text	"Drive not found",0
>a26f		74 20 66 6f 75 6e 64 00
>a277		53 74 6f 72 61 67 65 20			.text	"Storage error",0
>a27f		65 72 72 6f 72 00

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/timestamp.asm

>a285		41 6c 70 68 61 20 31 39			.text "Alpha 19 built 31-Dec-22. "
>a28d		20 62 75 69 6c 74 20 33 31 2d 44 65 63 2d 32 32
>a29d		2e 20

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/graphics/gcommand.asm

.a29f						RectangleCommand:
.a29f		a9 44		lda #$44			lda 	#GCMD_FrameRect				; frame rectangle
.a2a1		80 02		bra $a2a5			bra 	ShapeDrawCmd
.a2a3						CircleCommand:
.a2a3		a9 48		lda #$48			lda 	#GCMD_FrameCircle 				; framed circle
.a2a5						ShapeDrawCmd:
.a2a5		20 2f a3	jsr $a32f			jsr 	RunGraphicsCommand
.a2a8						ShapeDraw:
.a2a8		0d 60 06	ora $0660			ora 	gxFillSolid  				; adjust AXY for solid fill.
.a2ab		4c 23 a3	jmp $a323			jmp 	ExecuteGraphicCommand	 	; and complete
.a2ae						SpriteCommand:
.a2ae		a2 00		ldx #$00			ldx 	#0
.a2b0		20 e3 9e	jsr $9ee3			jsr 	Evaluate8BitInteger 		; get image number.
.a2b3		5a		phy				phy
.a2b4		a9 0e		lda #$0e			lda 	#GCMD_SpriteUse 			; use that image.
.a2b6		a6 58		ldx $58				ldx 	NSMantissa0
.a2b8		e0 40		cpx #$40			cpx 	#64 						; 0-63 only
.a2ba		b0 0d		bcs $a2c9			bcs 	_SCRange
.a2bc		a0 ff		ldy #$ff			ldy 	#255
.a2be		20 67 80	jsr $8067			jsr 	GXGraphicDraw
.a2c1		a9 52		lda #$52			lda 	#GCMD_SpriteMove
.a2c3		7a		ply				ply
.a2c4		20 2f a3	jsr $a32f			jsr 	RunGraphicsCommand
.a2c7		80 5a		bra $a323			bra 	ExecuteGraphicCommand
.a2c9						_SCRange:
.a2c9		4c cb a0	jmp $a0cb			jmp 	RangeError
.a2cc						ImageCommand:
.a2cc		a2 00		ldx #$00			ldx 	#0
.a2ce		20 e3 9e	jsr $9ee3			jsr 	Evaluate8BitInteger 		; get image number.
.a2d1		20 2f a3	jsr $a32f			jsr 	RunGraphicsCommand
.a2d4						ImageRunDraw:
.a2d4		09 40		ora #$40			ora 	#GCMD_Move					; move cursor
.a2d6		20 67 80	jsr $8067			jsr 	GXGraphicDraw
.a2d9		ad 66 06	lda $0666			lda 	gxDrawScale
.a2dc		0a		asl a				asl 	a
.a2dd		0a		asl a				asl 	a
.a2de		0a		asl a				asl 	a
.a2df		a8		tay				tay
.a2e0		a9 0c		lda #$0c			lda 	#GCMD_DrawSprite 			; image drawing
.a2e2		a6 58		ldx $58				ldx 	NSMantissa0
.a2e4		20 67 80	jsr $8067			jsr 	GXGraphicDraw
.a2e7		60		rts				rts
.a2e8						TextCommand:
.a2e8		a2 00		ldx #$00			ldx 	#0
.a2ea		20 a0 9e	jsr $9ea0			jsr 	EvaluateString 				; get text
.a2ed		20 2f a3	jsr $a32f			jsr 	RunGraphicsCommand
.a2f0						TextRunDraw:
.a2f0		09 40		ora #$40			ora 	#GCMD_Move 					; move cursor
.a2f2		20 67 80	jsr $8067			jsr 	GXGraphicDraw
.a2f5		a0 00		ldy #$00			ldy 	#0
.a2f7						_IRDLoop:
.a2f7		a5 60		lda $60				lda 	NSMantissa1 				; access character
.a2f9		85 37		sta $37				sta 	zTemp0+1
.a2fb		a5 58		lda $58				lda 	NSMantissa0
.a2fd		85 36		sta $36				sta 	zTemp0
.a2ff		b1 36		lda ($36),y			lda 	(zTemp0),y
.a301		f0 13		beq $a316			beq 	_IRDExit
.a303		5a		phy				phy									; save string pos
.a304		48		pha				pha 								; save char
.a305		ad 66 06	lda $0666			lda 	gxDrawScale 				; get scale
.a308		0a		asl a				asl 	a
.a309		0a		asl a				asl 	a
.a30a		0a		asl a				asl 	a
.a30b		a8		tay				tay
.a30c		a9 0a		lda #$0a			lda 	#GCMD_DrawFont 				; char drawing
.a30e		fa		plx				plx 								; char to draw
.a30f		20 67 80	jsr $8067			jsr 	GXGraphicDraw
.a312		7a		ply				ply 								; restore string pos
.a313		c8		iny				iny
.a314		90 e1		bcc $a2f7			bcc 	_IRDLoop 					; go back if no error.
.a316						_IRDExit:
.a316		60		rts				rts
.a317						PlotCommand:
.a317		a9 50		lda #$50			lda 	#GCMD_Plot 					; command ID to use
.a319		20 2f a3	jsr $a32f			jsr 	RunGraphicsCommand
.a31c		80 05		bra $a323			bra 	ExecuteGraphicCommand
.a31e						LineCommand:
.a31e		a9 42		lda #$42			lda 	#GCMD_Line 						; command ID to use
.a320		20 2f a3	jsr $a32f			jsr 	RunGraphicsCommand
.a323						ExecuteGraphicCommand:
.a323		0d 5f 06	ora $065f			ora 	gxCommandID 				; make a full command
.a326		20 67 80	jsr $8067			jsr 	GXGraphicDraw 				; draw it and exit
.a329		b0 01		bcs $a32c			bcs 	_EGCError
.a32b		60		rts				rts
.a32c						_EGCError:
.a32c		4c c6 a0	jmp $a0c6			jmp 	SyntaxError
.a32f						RunGraphicsCommand:
.a32f		8d 5f 06	sta $065f			sta 	gxCommandID					; save TODO graphics command.
.a332		68		pla				pla 								; pop handler address
.a333		fa		plx				plx
.a334		1a		inc a				inc 	a
.a335		d0 01		bne $a338			bne 	_RGINoCarry
.a337		e8		inx				inx
.a338						_RGINoCarry:
.a338		8d 64 06	sta $0664			sta 	gxHandler
.a33b		8e 65 06	stx $0665			stx 	gxHandler+1
.a33e						_RGICommandLoop:
.a33e		b1 30		lda ($30),y			lda 	(codePtr),y
.a340		c8		iny				iny
.a341		c9 d8		cmp #$d8			cmp 	#KWD_TO						; is it TO x,y
.a343		f0 53		beq $a398			beq 	_RGI_To
.a345		c9 c0		cmp #$c0			cmp 	#KWD_HERE 					; do it here.
.a347		f0 55		beq $a39e			beq 	_RGI_Here
.a349		c9 80		cmp #$80			cmp 	#KWC_EOL 					; EOL or : , exit
.a34b		f0 3d		beq $a38a			beq 	_RGI_Exit
.a34d		c9 3a		cmp #$3a			cmp 	#KWD_COLON
.a34f		f0 39		beq $a38a			beq 	_RGI_Exit
.a351		c9 c8		cmp #$c8			cmp 	#KWD_OUTLINE 				; solid or outline
.a353		f0 3e		beq $a393			beq 	_RGI_Frame
.a355		c9 d4		cmp #$d4			cmp 	#KWD_SOLID
.a357		f0 33		beq $a38c			beq 	_RGI_Solid
.a359		c9 b1		cmp #$b1			cmp 	#KWD_BY 					; by offset
.a35b		f0 4b		beq $a3a8			beq 	_RGI_By
.a35d		c9 bc		cmp #$bc			cmp 	#KWD_FROM 					; from
.a35f		f0 17		beq $a378			beq 	_RGI_Move2
.a361		c9 b9		cmp #$b9			cmp 	#KWD_DIM 					; dim (set scale)
.a363		f0 62		beq $a3c7			beq 	_RGI_Dim
.a365		c9 b7		cmp #$b7			cmp 	#KWD_COLOUR 				; colour or Color
.a367		f0 74		beq $a3dd			beq 	_RGI_Colour
.a369		c9 b6		cmp #$b6			cmp 	#KWD_COLOR
.a36b		f0 70		beq $a3dd			beq 	_RGI_Colour
.a36d		ae 5f 06	ldx $065f			ldx 	gxCommandID
.a370		e0 52		cpx #$52			cpx 	#GCMD_SpriteMove 			; if not sprite
.a372		d0 03		bne $a377			bne 	_RGI_Move 					; move
.a374		4c 05 a4	jmp $a405			jmp		_RGI_SpriteInstructions
.a377						_RGI_Move:
.a377		88		dey				dey 								; unpick get.
.a378						_RGI_Move2:
.a378		20 2b a4	jsr $a42b			jsr 	GCGetCoordinatePair 		; move to here
.a37b		20 52 a4	jsr $a452			jsr 	GCCopyPairToStore 			; save
.a37e		5a		phy				phy
.a37f		20 48 a4	jsr $a448			jsr 	GCLoadAXY 					; load in
.a382		09 40		ora #$40			ora 	#GCMD_Move 					; move there
.a384		20 67 80	jsr $8067			jsr 	GXGraphicDraw
.a387		7a		ply				ply
.a388		80 b4		bra $a33e			bra 	_RGICommandLoop 			; and go round
.a38a						_RGI_Exit:
.a38a		88		dey				dey 								; unpick : / EOL
.a38b		60		rts				rts
.a38c						_RGI_Solid:
.a38c		a9 02		lda #$02			lda 	#2
.a38e		8d 60 06	sta $0660			sta 	gxFillSolid
.a391		80 ab		bra $a33e			bra 	_RGICommandLoop
.a393						_RGI_Frame:
.a393		9c 60 06	stz $0660			stz 	gxFillSolid
.a396		80 a6		bra $a33e			bra 	_RGICommandLoop
.a398						_RGI_To:
.a398		20 2b a4	jsr $a42b			jsr 	GCGetCoordinatePair 		; get coordinate pair into slot #1,#2
.a39b		20 52 a4	jsr $a452			jsr 	GCCopyPairToStore
.a39e						_RGI_Here:
.a39e		5a		phy				phy
.a39f		20 48 a4	jsr $a448			jsr 	GCLoadAXY 					; load it into AXY
.a3a2		20 02 a4	jsr $a402			jsr 	_RGICallHandler 			; go do whatever it is.
.a3a5		7a		ply				ply
.a3a6		80 96		bra $a33e			bra 	_RGICommandLoop 			; and go round
.a3a8						_RGI_By:
.a3a8		20 38 a4	jsr $a438			jsr 	GCSignedCoordinatePair 		; get coordinate pair into slot #1,#2
.a3ab		18		clc				clc
.a3ac		a5 59		lda $59				lda 	NSMantissa0+1 				; copy it into space.
.a3ae		6d 61 06	adc $0661			adc 	gxXPos
.a3b1		8d 61 06	sta $0661			sta 	gxXPos
.a3b4		a5 61		lda $61				lda 	NSMantissa1+1
.a3b6		6d 62 06	adc $0662			adc 	gxXPos+1
.a3b9		8d 62 06	sta $0662			sta 	gxXPos+1
.a3bc		a5 5a		lda $5a				lda 	NSMantissa0+2
.a3be		18		clc				clc
.a3bf		6d 63 06	adc $0663			adc 	gxYPos
.a3c2		8d 63 06	sta $0663			sta 	gxYPos
.a3c5		80 d7		bra $a39e			bra 	_RGI_Here
.a3c7						_RGI_Dim:
.a3c7		a2 01		ldx #$01			ldx	 	#1
.a3c9		20 e3 9e	jsr $9ee3			jsr 	Evaluate8BitInteger
.a3cc		a5 59		lda $59				lda 	NSMantissa0+1
.a3ce		c9 00		cmp #$00			cmp 	#0
.a3d0		f0 2d		beq $a3ff			beq 	_RGIRange
.a3d2		c9 09		cmp #$09			cmp 	#8+1
.a3d4		b0 29		bcs $a3ff			bcs		_RGIRange
.a3d6		3a		dec a				dec 	a
.a3d7		8d 66 06	sta $0666			sta 	gxDrawScale
.a3da		4c 3e a3	jmp $a33e			jmp 	_RGICommandLoop
.a3dd						_RGI_Colour:
.a3dd		a2 01		ldx #$01			ldx 	#1 							; colour
.a3df		20 e3 9e	jsr $9ee3			jsr 	Evaluate8BitInteger
.a3e2		a2 02		ldx #$02			ldx 	#2 							; default zero for 2nd parameter
.a3e4		20 48 9f	jsr $9f48			jsr 	NSMSetZero
.a3e7		b1 30		lda ($30),y			lda 	(codePtr),y
.a3e9		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; check , => mode.
.a3eb		d0 04		bne $a3f1			bne 	_RGICDefaultMode
.a3ed		c8		iny				iny
.a3ee		20 e3 9e	jsr $9ee3			jsr 	Evaluate8BitInteger
.a3f1						_RGICDefaultMode:
.a3f1		5a		phy				phy
.a3f2		a9 08		lda #$08			lda 	#GCMD_Colour 				; set colour.
.a3f4		a6 59		ldx $59				ldx 	NSMantissa0+1
.a3f6		a4 5a		ldy $5a				ldy 	NSMantissa0+2
.a3f8		20 67 80	jsr $8067			jsr 	GXGraphicDraw
.a3fb		7a		ply				ply
.a3fc		4c 3e a3	jmp $a33e			jmp 	_RGICommandLoop 			; and go round
.a3ff						_RGIRange:
.a3ff		4c cb a0	jmp $a0cb			jmp 	RangeError
.a402						_RGICallHandler:
.a402		6c 64 06	jmp ($0664)			jmp 	(gxHandler)
.a405						_RGI_SpriteInstructions:
.a405		c9 c6		cmp #$c6			cmp 	#KWD_OFF
.a407		f0 07		beq $a410			beq 	_RGISpriteOff
.a409		c9 c1		cmp #$c1			cmp 	#KWD_IMAGE
.a40b		f0 13		beq $a420			beq 	_RGISetImage
.a40d		4c 77 a3	jmp $a377			jmp 	_RGI_Move
.a410						_RGISpriteOff:
.a410		5a		phy				phy
.a411		a0 01		ldy #$01			ldy 	#1
.a413		a2 00		ldx #$00			ldx 	#0
.a415						_RGIDoCommandLoop:
.a415		a9 10		lda #$10			lda 	#GCMD_SpriteImage
.a417		20 67 80	jsr $8067			jsr 	GXGraphicDraw
.a41a		7a		ply				ply
.a41b		b0 e2		bcs $a3ff			bcs 	_RGIRange
.a41d		4c 3e a3	jmp $a33e			jmp 	_RGICommandLoop
.a420						_RGISetImage:
.a420		a2 01		ldx #$01			ldx 	#1
.a422		20 e3 9e	jsr $9ee3			jsr 	Evaluate8BitInteger
.a425		5a		phy				phy
.a426		aa		tax				tax
.a427		a0 00		ldy #$00			ldy 	#0
.a429		80 ea		bra $a415			bra 	_RGIDoCommandLoop
.a42b						GCGetCoordinatePair:
.a42b		a2 01		ldx #$01			ldx 	#1
.a42d		20 c8 9e	jsr $9ec8			jsr 	Evaluate16BitInteger
.a430		20 ec 8f	jsr $8fec			jsr 	CheckComma
.a433		e8		inx				inx
.a434		20 c8 9e	jsr $9ec8			jsr 	Evaluate16BitInteger
.a437		60		rts				rts
.a438						GCSignedCoordinatePair:
.a438		a2 01		ldx #$01			ldx 	#1
.a43a		20 d2 9e	jsr $9ed2			jsr 	Evaluate16BitIntegerSigned
.a43d		20 ec 8f	jsr $8fec			jsr 	CheckComma
.a440		e8		inx				inx
.a441		20 d2 9e	jsr $9ed2			jsr 	Evaluate16BitIntegerSigned
.a444		60		rts				rts
.a445						_GCCPRange:
.a445		4c cb a0	jmp $a0cb			jmp 	RangeError
.a448						GCLoadAXY:
.a448		ad 62 06	lda $0662			lda 	gxXPos+1
.a44b		ae 61 06	ldx $0661			ldx 	gxXPos
.a44e		ac 63 06	ldy $0663			ldy 	gxYPos
.a451		60		rts				rts
.a452						GCCopyPairToStore:
.a452		a5 59		lda $59				lda 	NSMantissa0+1 				; copy it into space.
.a454		8d 61 06	sta $0661			sta 	gxXPos
.a457		a5 61		lda $61				lda 	NSMantissa1+1
.a459		8d 62 06	sta $0662			sta 	gxXPos+1
.a45c		a5 5a		lda $5a				lda 	NSMantissa0+2
.a45e		8d 63 06	sta $0663			sta 	gxYPos
.a461		60		rts				rts
.065f						gxCommandID:
>065f								.fill 	1
.0660						gxFillSolid:
>0660								.fill 	1
.0661						gxXPos:
>0661								.fill 	2
.0663						gxYPos:
>0663								.fill 	1
.0664						gxHandler:
>0664								.fill 	2
.0666						gxDrawScale:
>0666								.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/graphics/gcontrol.asm

.a462						BitmapCtrl:
.a462		b1 30		lda ($30),y			lda 	(codePtr),y
.a464		c8		iny				iny
.a465		a2 01		ldx #$01			ldx 	#1
.a467		c9 c7		cmp #$c7			cmp 	#KWD_ON
.a469		f0 11		beq $a47c			beq 	BitmapSwitch
.a46b		ca		dex				dex
.a46c		c9 c6		cmp #$c6			cmp 	#KWD_OFF
.a46e		f0 0c		beq $a47c			beq 	BitmapSwitch
.a470		20 e3 9e	jsr $9ee3			jsr 	Evaluate8BitInteger 		; get the colour
.a473		5a		phy				phy
.a474		aa		tax				tax
.a475		a9 06		lda #$06			lda 	#GCMD_Clear					; clear to that colour
.a477		20 67 80	jsr $8067			jsr 	GXGraphicDraw
.a47a		7a		ply				ply
.a47b		60		rts				rts
.a47c						BitmapSwitch:
.a47c		5a		phy				phy
.a47d		a0 00		ldy #$00			ldy 	#0 							; gfx 1,on/off,0
.a47f		a9 02		lda #$02			lda 	#GCMD_BitmapCtl
.a481		20 67 80	jsr $8067			jsr 	GXGraphicDraw
.a484		a9 08		lda #$08			lda 	#GCMD_Colour				; set colour to $FF
.a486		a0 00		ldy #$00			ldy 	#0
.a488		a2 ff		ldx #$ff			ldx 	#$FF
.a48a		20 67 80	jsr $8067			jsr 	GXGraphicDraw
.a48d		9c 60 06	stz $0660			stz 	gxFillSolid
.a490		9c 61 06	stz $0661			stz 	gxXPos
.a493		9c 62 06	stz $0662			stz 	gxXPos+1
.a496		9c 63 06	stz $0663			stz 	gxYPos
.a499		9c 66 06	stz $0666			stz 	gxDrawScale
.a49c		a9 40		lda #$40			lda 	#GCMD_Move 						; home cursor
.a49e		a2 00		ldx #$00			ldx 	#0
.a4a0		a0 00		ldy #$00			ldy 	#0
.a4a2		20 67 80	jsr $8067			jsr 	GXGraphicDraw
.a4a5		7a		ply				ply
.a4a6		60		rts				rts
.a4a7						SpritesCtrl:
.a4a7		b1 30		lda ($30),y			lda 	(codePtr),y
.a4a9		c8		iny				iny
.a4aa		a2 01		ldx #$01			ldx 	#1
.a4ac		c9 c7		cmp #$c7			cmp 	#KWD_ON
.a4ae		f0 08		beq $a4b8			beq 	SpriteSwitch
.a4b0		ca		dex				dex
.a4b1		c9 c6		cmp #$c6			cmp 	#KWD_OFF
.a4b3		f0 03		beq $a4b8			beq 	SpriteSwitch
.a4b5		4c c6 a0	jmp $a0c6			jmp 	SyntaxError
.a4b8						SpriteSwitch:
.a4b8		5a		phy				phy
.a4b9		a0 00		ldy #$00			ldy 	#0 							; gfx 2,on/off,0
.a4bb		a9 04		lda #$04			lda 	#GCMD_SpriteCtl
.a4bd		20 67 80	jsr $8067			jsr 	GXGraphicDraw
.a4c0		7a		ply				ply
.a4c1		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/graphics/gfx.asm

.a4c2						GfxCommand:
.a4c2		a2 00		ldx #$00			ldx 	#0
.a4c4		20 e3 9e	jsr $9ee3			jsr 	Evaluate8BitInteger 		; command
.a4c7		20 ec 8f	jsr $8fec			jsr 	CheckComma
.a4ca		e8		inx				inx
.a4cb		20 c8 9e	jsr $9ec8			jsr 	Evaluate16BitInteger 		; X
.a4ce		20 ec 8f	jsr $8fec			jsr 	CheckComma
.a4d1		e8		inx				inx
.a4d2		20 e3 9e	jsr $9ee3			jsr 	Evaluate8BitInteger 		; Y
.a4d5		a5 61		lda $61				lda 	NSMantissa1+1  				; shift bit 0 of X into CS, should now be zero
.a4d7		4a		lsr a				lsr 	a
.a4d8		d0 12		bne $a4ec			bne 	_GfxError
.a4da		26 58		rol $58				rol 	NSMantissa0 				; rotate into command
.a4dc		b0 0e		bcs $a4ec			bcs 	_GfxError 					; bit 7 should have been zero
.a4de		5a		phy				phy 								; save pos
.a4df		a5 58		lda $58				lda 	NSMantissa0 				; do the command
.a4e1		a6 59		ldx $59				ldx 	NSMantissa0+1
.a4e3		a4 5a		ldy $5a				ldy 	NSMantissa0+2
.a4e5		20 67 80	jsr $8067			jsr 	GXGraphicDraw
.a4e8		b0 02		bcs $a4ec			bcs 	_GfxError
.a4ea		7a		ply				ply 								; restore pos and exit.
.a4eb		60		rts				rts
.a4ec						_GfxError:
.a4ec		4c cb a0	jmp $a0cb			jmp 	RangeError

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/graphics/hit.asm

.a4ef						UnaryHit:
.a4ef		fa		plx				plx
.a4f0		a9 36		lda #$36			lda 	#zTemp0
.a4f2		20 e3 9e	jsr $9ee3			jsr 	Evaluate8BitInteger 		; get sprite number 0
.a4f5		20 ec 8f	jsr $8fec			jsr 	CheckComma
.a4f8		e8		inx				inx
.a4f9		20 e3 9e	jsr $9ee3			jsr 	Evaluate8BitInteger 		; get sprite number 1
.a4fc		20 e4 8f	jsr $8fe4			jsr		CheckRightBracket
.a4ff		ca		dex				dex 								; fix back up again.
.a500		da		phx				phx 								; save X/Y
.a501		5a		phy				phy
.a502		b4 59		ldy $59,x			ldy 	NSMantissa0+1,x 			; get the sprite numbers into X/Y
.a504		b5 58		lda $58,x			lda 	NSMantissa0,x
.a506		aa		tax				tax
.a507		a9 12		lda #$12			lda 	#GCMD_SpriteCollide 		; command check collision.
.a509		20 67 80	jsr $8067			jsr 	GXGraphicDraw 				; calculate result
.a50c		1a		inc a				inc 	a 							; so 255 (fail) -> 0, otherwise 1,2,3,4 pixels etc.
.a50d		7a		ply				ply 								; restore XY
.a50e		fa		plx				plx
.a50f		20 4a 9f	jsr $9f4a			jsr 	NSMSetByte 					; return the hit result
.a512		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/graphics/palette.asm

.a513						PaletteCommand:
.a513		a2 00		ldx #$00			ldx 	#0
.a515		20 e3 9e	jsr $9ee3			jsr 	Evaluate8BitInteger 		; colour
.a518		20 ec 8f	jsr $8fec			jsr 	CheckComma
.a51b		e8		inx				inx
.a51c		20 c8 9e	jsr $9ec8			jsr 	Evaluate16BitInteger 		; r
.a51f		20 ec 8f	jsr $8fec			jsr 	CheckComma
.a522		e8		inx				inx
.a523		20 e3 9e	jsr $9ee3			jsr 	Evaluate8BitInteger 		; g
.a526		20 ec 8f	jsr $8fec			jsr 	CheckComma
.a529		e8		inx				inx
.a52a		20 e3 9e	jsr $9ee3			jsr 	Evaluate8BitInteger 		; b
.a52d		a5 58		lda $58				lda 	NSMantissa0 				; get colour #
.a52f		85 36		sta $36				sta 	zTemp0
.a531		a9 34		lda #$34			lda 	#$D0 >> 2 					; MSB = D0/4
.a533		85 37		sta $37				sta 	zTemp0+1
.a535		06 36		asl $36				asl 	zTemp0 						; zTemp = $D000+Colour x 4
.a537		26 37		rol $37				rol	 	zTemp0+1
.a539		06 36		asl $36				asl 	zTemp0
.a53b		26 37		rol $37				rol	 	zTemp0+1
.a53d		a9 01		lda #$01			lda 	#1 							; I/O Page 2
.a53f		85 01		sta $01				sta 	1
.a541		5a		phy				phy
.a542		a5 5b		lda $5b				lda 	NSMantissa0+3 				; fix to r,g,b
.a544		92 36		sta ($36)			sta 	(zTemp0)
.a546		a0 01		ldy #$01			ldy 	#1
.a548		a5 5a		lda $5a				lda 	NSMantissa0+2
.a54a		91 36		sta ($36),y			sta 	(zTemp0),y
.a54c		a5 59		lda $59				lda 	NSMantissa0+1
.a54e		c8		iny				iny
.a54f		91 36		sta ($36),y			sta 	(zTemp0),y
.a551		7a		ply				ply
.a552		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/hardware/crossdev.asm

.a553						XLoadCommand:
.a553		20 de 8a	jsr $8ade			jsr 	NewProgram
.a556		20 50 83	jsr $8350			jsr 	BackloadProgram
.a559		4c 0f 84	jmp $840f			jmp 	WarmStart
.a55c						XGoCommand:
.a55c		20 de 8a	jsr $8ade			jsr 	NewProgram
.a55f		20 50 83	jsr $8350			jsr 	BackloadProgram
.a562		4c 5c 8c	jmp $8c5c			jmp 	CommandRUN

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/hardware/event.asm

.a565						UnaryEvent:
.a565		fa		plx				plx
.a566		20 ff a5	jsr $a5ff			jsr 	TimerToStackX 				; timer in +0
.a569		e8		inx				inx  								; put reference into +1
.a56a		20 4b 99	jsr $994b			jsr 	EvaluateTerm
.a56d		b5 50		lda $50,x			lda 	NSStatus,x 					; check if is integer reference
.a56f		c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.a571		d0 4c		bne $a5bf			bne 	_UEType
.a573		e8		inx				inx 								; put the step in +2
.a574		20 ec 8f	jsr $8fec			jsr 	CheckComma
.a577		20 c8 9e	jsr $9ec8			jsr 	Evaluate16BitInteger
.a57a		20 e4 8f	jsr $8fe4			jsr 	CheckRightBracket
.a57d		ca		dex				dex
.a57e		ca		dex				dex
.a57f		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; copy reference to zTemp0
.a581		85 36		sta $36				sta 	zTemp0
.a583		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.a585		85 37		sta $37				sta 	zTemp0+1
.a587		5a		phy				phy
.a588		a0 03		ldy #$03			ldy 	#3 							; check bit 7 of last bit, the packed sign bit
.a58a		b1 36		lda ($36),y			lda 	(zTemp0),y
.a58c		30 2d		bmi $a5bb			bmi 	_UEFalse 					; exit if signed.
.a58e		a0 00		ldy #$00			ldy 	#0 							; has it timed out (24 bit)
.a590		b5 58		lda $58,x			lda 	NSMantissa0,x
.a592		d1 36		cmp ($36),y			cmp 	(zTemp0),y
.a594		c8		iny				iny
.a595		b5 60		lda $60,x			lda 	NSMantissa1,x
.a597		f1 36		sbc ($36),y			sbc		(zTemp0),y
.a599		c8		iny				iny
.a59a		b5 68		lda $68,x			lda 	NSMantissa2,x
.a59c		f1 36		sbc ($36),y			sbc		(zTemp0),y
.a59e		90 1b		bcc $a5bb			bcc 	_UEFalse 					; no, return FALSE.
.a5a0		18		clc				clc
.a5a1		a0 00		ldy #$00			ldy 	#0 							; work out new value as timer() + step
.a5a3		b5 58		lda $58,x			lda 	NSMantissa0,x
.a5a5		75 5a		adc $5a,x			adc 	NSMantissa0+2,x
.a5a7		91 36		sta ($36),y			sta 	(zTemp0),y
.a5a9		c8		iny				iny
.a5aa		b5 60		lda $60,x			lda 	NSMantissa1,x
.a5ac		75 62		adc $62,x			adc 	NSMantissa1+2,x
.a5ae		91 36		sta ($36),y			sta 	(zTemp0),y
.a5b0		c8		iny				iny
.a5b1		b5 68		lda $68,x			lda 	NSMantissa2,x
.a5b3		75 6a		adc $6a,x			adc 	NSMantissa2+2,x
.a5b5		91 36		sta ($36),y			sta 	(zTemp0),y
.a5b7		7a		ply				ply
.a5b8		4c 6a 90	jmp $906a			jmp 	ReturnTrue
.a5bb						_UEFalse:
.a5bb		7a		ply				ply 								; restore Y
.a5bc		4c 75 90	jmp $9075			jmp 	ReturnFalse 				; and return False
.a5bf						_UEType:
.a5bf		4c d0 a0	jmp $a0d0			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/hardware/joy.asm

.a5c2						UnaryJoyX:
.a5c2		18		clc				clc
.a5c3		80 01		bra $a5c6			bra 	JoyMain
.a5c5						UnaryJoyY:
.a5c5		38		sec				sec
.a5c6						JoyMain:
.a5c6		fa		plx				plx 								; get pos
.a5c7		08		php				php 								; save carry (set for Y)
.a5c8		20 e3 9e	jsr $9ee3			jsr 	Evaluate8BitInteger 		; ignore the parameter
.a5cb		20 e4 8f	jsr $8fe4			jsr 	CheckRightBracket
.a5ce		20 21 80	jsr $8021			jsr 	EXTReadController 			; read the controller.
.a5d1		28		plp				plp
.a5d2		b0 02		bcs $a5d6			bcs 	_JMNoShift 					; if X then shift bits 3,2 -> 1,0
.a5d4		4a		lsr a				lsr 	a
.a5d5		4a		lsr a				lsr 	a
.a5d6						_JMNoShift:
.a5d6		4a		lsr a				lsr 	a 							; if bit 0 set then left/up e.g. -1
.a5d7		b0 07		bcs $a5e0			bcs 	JMIsLeft
.a5d9		4a		lsr a				lsr 	a 							; if bit 1 set then right/down e.g. +1
.a5da		b0 07		bcs $a5e3			bcs 	JMIsRight
.a5dc		20 48 9f	jsr $9f48			jsr 	NSMSetZero 					; zero result
.a5df		60		rts				rts
.a5e0						JMIsLeft:
.a5e0		4c 6a 90	jmp $906a			jmp 	ReturnTrue
.a5e3						JMIsRight:
.a5e3		a9 01		lda #$01			lda 	#1
.a5e5		20 4a 9f	jsr $9f4a			jsr 	NSMSetByte
.a5e8		60		rts				rts
.a5e9						UnaryJoyB:
.a5e9		fa		plx				plx 								; get pos
.a5ea		20 e3 9e	jsr $9ee3			jsr 	Evaluate8BitInteger 		; ignore the parameter
.a5ed		20 e4 8f	jsr $8fe4			jsr 	CheckRightBracket
.a5f0		20 21 80	jsr $8021			jsr 	EXTReadController 			; read the controller.
.a5f3		29 10		and #$10			and 	#$10
.a5f5		d0 e9		bne $a5e0			bne 	JMIsLeft
.a5f7		20 48 9f	jsr $9f48			jsr 	NSMSetZero
.a5fa		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/hardware/timer.asm

.a5fb						UnaryTimer:
.a5fb		fa		plx				plx
.a5fc		20 e4 8f	jsr $8fe4			jsr 	CheckRightBracket
.a5ff						TimerToStackX:
.a5ff		20 48 9f	jsr $9f48			jsr 	NSMSetZero 					; zero result
.a602		64 01		stz $01				stz 	1 							; access I/O
.a604		ad 59 d6	lda $d659			lda 	$D659 						; copy timer in
.a607		95 58		sta $58,x			sta 	NSMantissa0,x
.a609		ad 5a d6	lda $d65a			lda 	$D65A
.a60c		95 60		sta $60,x			sta 	NSMantissa1,x
.a60e		ad 5b d6	lda $d65b			lda 	$D65B
.a611		95 68		sta $68,x			sta 	NSMantissa2,x
.a613		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/kernel/api.asm

>ff00						NextEvent   .fill   4   ; Copy the next event into user-space.
>ff04						ReadData    .fill   4   ; Copy primary bulk event data into user-space
>ff08						ReadExt     .fill   4   ; Copy secondary bolk event data into user-space
>ff0c						Yield       .fill   4   ; Give unused time to the kernel.
>ff10						Putch       .fill   4   ; deprecated
>ff14						Basic       .fill   4   ; deprecated
>ff18						            .fill   4   ; reserved
>ff1c						            .fill   4   ; reserved
>ff20						List        .fill   4   ; Returns a bit-set of available block-accessible devices.
>ff24						GetName     .fill   4   ; Gets the hardware level name of the given block device or media.
>ff28						GetSize     .fill   4   ; Get the number of raw sectors (48 bits) for the given device
>ff2c						Read        .fill   4   ; Read a raw sector (48 bit LBA)
>ff30						Write       .fill   4   ; Write a raw sector (48 bit LBA)
>ff34						Format      .fill   4   ; Perform a low-level format if the media support it.
>ff38						Export      .fill   4   ; Update the FileSystem table with the partition table (if present).
>ff3c						List        .fill   4   ; Returns a bit-set of available logical devices.
>ff40						GetSize     .fill   4   ; Get the size of the partition or logical device in sectors.
>ff44						MkFS        .fill   4   ; Creates a new file-system on the logical device.
>ff48						CheckFS     .fill   4   ; Checks the file-system for errors and corrects them.
>ff4c						Mount       .fill   4   ; Mark the file-system as available for File and Directory operations.
>ff50						Unmount     .fill   4   ; Mark the file-system as unavailable for File and Directory operations.
>ff54						ReadBlock   .fill   4   ; Read a partition-local raw sector on an unmounted device.
>ff58						WriteBlock  .fill   4   ; Write a partition-local raw sector on an unmounted device.
>ff5c						Open        .fill   4   ; Open the given file for read, create, or append.
>ff60						Read        .fill   4   ; Request bytes from a file opened for reading.
>ff64						Write       .fill   4   ; Write bytes to a file opened for create or append.
>ff68						Close       .fill   4   ; Close an open file.
>ff6c						Rename      .fill   4   ; Rename a closed file.
>ff70						Delete      .fill   4   ; Delete a closed file.
>ff74						Open        .fill   4   ; Open a directory for reading.
>ff78						Read        .fill   4   ; Read a directory entry; may also return VOLUME and FREE events.
>ff7c						Close       .fill   4   ; Close a directory once finished reading.
>ff80						            .fill   4   ; call gate
>ff84						GetSize     .fill   4   ; Returns rows/cols in kernel args.
>ff88						DrawRow     .fill   4   ; Draw text/color buffers left-to-right
>ff8c						DrawColumn  .fill   4   ; Draw text/color buffers top-to-bottom
>ff90						GetIP       .fill   4   ; Get the local IP address.
>ff94						SetIP       .fill   4   ; Set the local IP address.
>ff98						GetDNS      .fill   4   ; Get the configured DNS IP address.
>ff9c						SetDNS      .fill   4   ; Set the configured DNS IP address.
>ffa0						GetTime     .fill   4
>ffa4						SetTime     .fill   4
>ffa8						GetSysInfo  .fill   4
>ffac						SetBPS      .fill   4   ; Set the serial BPS (should match the SLIP router's speed).
>ffb0						InitUDP     .fill   4
>ffb4						SendUDP     .fill   4
>ffb8						RecvUDP     .fill   4
>ffbc						InitTCP     .fill   4
>ffc0						SendTCP     .fill   4
>ffc4						RecvTCP     .fill   4
>ffc8						SendICMP    .fill   4
>ffcc						RecvICMP    .fill   4
.00f0						args
.00f0						events
>00f0						dest        .word       ?   ; GetNextEvent copies event data here
>00f2						pending     .byte       ?   ; Negative count of pending events
.00f3						end
.00f3						recv
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.00f3						fs
.00f3						format
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.00f3						mkfs
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.00f3						file
.00f3						open
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>00f5						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.00f3						read
>00f3						stream      .byte       ?
>00f4						buflen      .byte       ?
.00f3						write
>00f3						stream      .byte       ?
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.00f3						close
>00f3						stream      .byte       ?
.00f3						rename
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						old         = args.buf
=$fd						old_len     = args.buflen
=$f8						new         = args.ext
=$fa						new_len     = args.extlen
.00f3						delete
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>00f5						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.00f3						directory
.00f3						open
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
.00f3						read
>00f3						stream      .byte       ?
>00f4						buflen      .byte       ?
.00f3						close
>00f3						stream      .byte       ?
.00f3						display
>00f3						x           .byte       ?   ; coordinate or size
>00f4						y           .byte       ?   ; coordinate or size
=$fb						text        = args.buf      ; text
=$f8						color       = args.ext      ; color
=$fb						buf         = args.buf      ; deprecated
=$f8						buf2        = args.ext      ; deprecated
=$fd						buflen      = args.buflen
.00f3						net
>00f3						socket      .word       ?
>00f5						src_port    .word       ?
>00f7						dest_port   .word       ?
>00f9						dest_ip     .fill       4
>00f5						buf         .word       ?
>00f7						buflen      .byte       ?
>00f8						ext         .word       ?
>00fa						extlen      .byte       ?
=$f8						ext         = $f8
=$fa						extlen      = $fa
=$fb						buf         = $fb
=$fd						buflen      = $fd
=$fe						ptr         = $fe
.0000						args_t
.0000						events
>0000						dest        .word       ?   ; GetNextEvent copies event data here
>0002						pending     .byte       ?   ; Negative count of pending events
.0003						end
.0003						recv
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0003						fs
.0003						format
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0003						mkfs
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0003						file
.0003						open
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0005						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0003						read
>0003						stream      .byte       ?
>0004						buflen      .byte       ?
.0003						write
>0003						stream      .byte       ?
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0003						close
>0003						stream      .byte       ?
.0003						rename
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						old         = args.buf
=$fd						old_len     = args.buflen
=$f8						new         = args.ext
=$fa						new_len     = args.extlen
.0003						delete
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0005						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0003						directory
.0003						open
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
.0003						read
>0003						stream      .byte       ?
>0004						buflen      .byte       ?
.0003						close
>0003						stream      .byte       ?
.0003						display
>0003						x           .byte       ?   ; coordinate or size
>0004						y           .byte       ?   ; coordinate or size
=$fb						text        = args.buf      ; text
=$f8						color       = args.ext      ; color
=$fb						buf         = args.buf      ; deprecated
=$f8						buf2        = args.ext      ; deprecated
=$fd						buflen      = args.buflen
.0003						net
>0003						socket      .word       ?
>0005						src_port    .word       ?
>0007						dest_port   .word       ?
>0009						dest_ip     .fill       4
>0005						buf         .word       ?
>0007						buflen      .byte       ?
>0008						ext         .word       ?
>000a						extlen      .byte       ?
=$f8						ext         = $f8
=$fa						extlen      = $fa
=$fb						buf         = $fb
=$fd						buflen      = $fd
=$fe						ptr         = $fe
.0000						event_t
>0000						dest        .word       ?   ; GetNextEvent copies event data here
>0002						pending     .byte       ?   ; Negative count of pending events
.0003						end
.0000						recv_t
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0000						fs_t
.0000						format
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0000						mkfs
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0000						fs_mkfs_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0000						file_t
.0000						open
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0002						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0000						read
>0000						stream      .byte       ?
>0001						buflen      .byte       ?
.0000						write
>0000						stream      .byte       ?
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0000						close
>0000						stream      .byte       ?
.0000						rename
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						old         = args.buf
=$fd						old_len     = args.buflen
=$f8						new         = args.ext
=$fa						new_len     = args.extlen
.0000						delete
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0002						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0000						fs_open_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0002						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0000						fs_read_t
>0000						stream      .byte       ?
>0001						buflen      .byte       ?
.0000						fs_write_t
>0000						stream      .byte       ?
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0000						fs_close_t
>0000						stream      .byte       ?
.0000						fs_rename_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						old         = args.buf
=$fd						old_len     = args.buflen
=$f8						new         = args.ext
=$fa						new_len     = args.extlen
.0000						fs_delete_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fnane       = args.buf
=$fd						fname_len   = args.buflen
.0000						dir_t
.0000						open
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
.0000						read
>0000						stream      .byte       ?
>0001						buflen      .byte       ?
.0000						close
>0000						stream      .byte       ?
.0000						dir_open_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
.0000						dir_read_t
>0000						stream      .byte       ?
>0001						buflen      .byte       ?
.0000						dir_close_t
>0000						stream      .byte       ?
.0000						display_t
>0000						x           .byte       ?   ; coordinate or size
>0001						y           .byte       ?   ; coordinate or size
=$fb						text        = args.buf      ; text
=$f8						color       = args.ext      ; color
=$fb						buf         = args.buf      ; deprecated
=$f8						buf2        = args.ext      ; deprecated
=$fd						buflen      = args.buflen
.0000						net_t
>0000						socket      .word       ?
>0002						src_port    .word       ?
>0004						dest_port   .word       ?
>0006						dest_ip     .fill       4
>0002						buf         .word       ?
>0004						buflen      .byte       ?
>0005						ext         .word       ?
>0007						extlen      .byte       ?
>0000						            .word   ?   ; Reserved
>0002						            .word   ?   ; Deprecated
>0004						GAME        .word   ?   ; Game Controller changes.
>0006						DEVICE      .word   ?   ; Device added/removed.
>0008						PRESSED     .word   ?   ; Key pressed
>000a						RELEASED    .word   ?   ; Key released.
>000c						DELTA       .word   ?   ; Regular mouse move and button state
>000e						CLICKS      .word   ?   ; Click counts
>0010						NAME        .word   ?
>0012						SIZE        .word   ?
>0014						DATA        .word   ?   ; The read request has succeeded.
>0016						WROTE       .word   ?   ; The write request has completed.
>0018						FORMATTED   .word   ?   ; The low-level format has completed.
>001a						ERROR       .word   ?
>001c						SIZE        .word   ?
>001e						CREATED     .word   ?
>0020						CHECKED     .word   ?
>0022						DATA        .word   ?   ; The read request has succeeded.
>0024						WROTE       .word   ?   ; The write request has completed.
>0026						ERROR       .word   ?
>0028						NOT_FOUND   .word   ?   ; The file file was not found.
>002a						OPENED      .word   ?   ; The file was successfully opened.
>002c						DATA        .word   ?   ; The read request has succeeded.
>002e						WROTE       .word   ?   ; The write request has completed.
>0030						EOF         .word   ?   ; All file data has been read.
>0032						CLOSED      .word   ?   ; The close request has completed.
>0034						RENAMED     .word   ?   ; The rename request has completed.
>0036						DELETED     .word   ?   ; The delete request has completed.
>0038						ERROR       .word   ?   ; An error occured; close the file if opened.
>003a						OPENED      .word   ?   ; The directory open request succeeded.
>003c						VOLUME      .word   ?   ; A volume record was found.
>003e						FILE        .word   ?   ; A file record was found.
>0040						FREE        .word   ?   ; A file-system free-space record was found.
>0042						EOF         .word   ?   ; All data has been read.
>0044						CLOSED      .word   ?   ; The directory file has been closed.
>0046						ERROR       .word   ?   ; An error occured; user should close.
>0048						TCP         .word   ?
>004a						UDP         .word   ?
.0000						event_t
>0000						type        .byte   ?   ; Enum above
>0001						buf         .byte   ?   ; page id or zero
>0002						ext         .byte   ?   ; page id or zero
.0003						key
>0003						keyboard    .byte   ?   ; Keyboard ID
>0004						raw         .byte   ?   ; Raw key ID
>0005						ascii       .byte   ?   ; ASCII value
>0006						flags       .byte   ?   ; Flags (META)
=$80						META        = $80       ; Meta key; no associated ASCII value.
.0003						mouse
.0003						delta
>0003						x           .byte   ?
>0004						y           .byte   ?
>0005						z           .byte   ?
>0006						buttons     .byte   ?
.0003						clicks
>0003						inner       .byte   ?
>0004						middle      .byte   ?
>0005						outer       .byte   ?
.0003						udp
>0003						token       .byte   ?   ; TODO: break out into fields
.0003						file
>0003						stream      .byte   ?
>0004						cookie      .byte   ?
.0005						data
>0005						requested   .byte   ?   ; Requested number of bytes to read
>0006						read        .byte   ?   ; Number of bytes actually read
.0005						wrote
>0005						requested   .byte   ?   ; Requested number of bytes to read
>0006						wrote       .byte   ?   ; Number of bytes actually read
.0003						directory
>0003						stream      .byte   ?
>0004						cookie      .byte   ?
.0005						volume
>0005						len         .byte   ?   ; Length of volname (in buf)
>0006						flags       .byte   ?   ; block size, text encoding
.0005						file
>0005						len         .byte   ?
>0006						flags       .byte   ?   ; block scale, text encoding, approx size
.0005						free
>0005						flags       .byte   ?   ; block scale, text encoding, approx size
.0000						key_t
>0000						keyboard    .byte   ?   ; Keyboard ID
>0001						raw         .byte   ?   ; Raw key ID
>0002						ascii       .byte   ?   ; ASCII value
>0003						flags       .byte   ?   ; Flags (META)
=$80						META        = $80       ; Meta key; no associated ASCII value.
.0000						mouse_t
.0000						delta
>0000						x           .byte   ?
>0001						y           .byte   ?
>0002						z           .byte   ?
>0003						buttons     .byte   ?
.0000						clicks
>0000						inner       .byte   ?
>0001						middle      .byte   ?
>0002						outer       .byte   ?
.0000						m_delta_t
>0000						x           .byte   ?
>0001						y           .byte   ?
>0002						z           .byte   ?
>0003						buttons     .byte   ?
.0000						m_clicks_t
>0000						inner       .byte   ?
>0001						middle      .byte   ?
>0002						outer       .byte   ?
.0000						file_t
>0000						stream      .byte   ?
>0001						cookie      .byte   ?
.0002						data
>0002						requested   .byte   ?   ; Requested number of bytes to read
>0003						read        .byte   ?   ; Number of bytes actually read
.0002						wrote
>0002						requested   .byte   ?   ; Requested number of bytes to read
>0003						wrote       .byte   ?   ; Number of bytes actually read
.0000						fs_data_t
>0000						requested   .byte   ?   ; Requested number of bytes to read
>0001						read        .byte   ?   ; Number of bytes actually read
.0000						fs_wrote_t
>0000						requested   .byte   ?   ; Requested number of bytes to read
>0001						wrote       .byte   ?   ; Number of bytes actually read
.0000						dir_t
>0000						stream      .byte   ?
>0001						cookie      .byte   ?
.0002						volume
>0002						len         .byte   ?   ; Length of volname (in buf)
>0003						flags       .byte   ?   ; block size, text encoding
.0002						file
>0002						len         .byte   ?
>0003						flags       .byte   ?   ; block scale, text encoding, approx size
.0002						free
>0002						flags       .byte   ?   ; block scale, text encoding, approx size
.0000						dir_vol_t
>0000						len         .byte   ?   ; Length of volname (in buf)
>0001						flags       .byte   ?   ; block size, text encoding
.0000						dir_file_t
>0000						len         .byte   ?
>0001						flags       .byte   ?   ; block scale, text encoding, approx size
.0000						dir_free_t
>0000						flags       .byte   ?   ; block scale, text encoding, approx size
.0000						dir_ext_t
>0000						free        .fill   6   ; blocks used/free
.0000						udp_t
>0000						token       .byte   ?   ; TODO: break out into fields

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/delete.asm

.a614						MemoryDeleteLine:
.a614		20 33 a6	jsr $a633			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.a617		b2 30		lda ($30)			lda 	(codePtr) 					; size to delete => y
.a619		a8		tay				tay
.a61a						_MDDLLoop:
.a61a		b1 30		lda ($30),y			lda 	(codePtr),y 				; copy down
.a61c		92 30		sta ($30)			sta 	(codePtr)
.a61e		a5 30		lda $30				lda 	codePtr 					; check done the lot.
.a620		c5 3a		cmp $3a				cmp 	zTemp2 						; has codePtr (copyFrom) reached the last byte to copy.
.a622		d0 07		bne $a62b			bne 	_MDLDLNext
.a624		a5 31		lda $31				lda 	codePtr+1
.a626		c5 3b		cmp $3b				cmp 	zTemp2+1
.a628		d0 01		bne $a62b			bne 	_MDLDLNext
.a62a						_MDDLExit:
.a62a		60		rts				rts
.a62b						_MDLDLNext:
.a62b		e6 30		inc $30				inc 	codePtr						; next byte
.a62d		d0 eb		bne $a61a			bne 	_MDDLLoop
.a62f		e6 31		inc $31				inc 	codePtr+1
.a631		80 e7		bra $a61a			bra 	_MDDLLoop
.a633						IMemoryFindEnd:
.a633		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a635		85 3a		sta $3a				sta 	0+zTemp2
.a637		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a639		85 3b		sta $3b				sta 	1+zTemp2
.a63b						_MDLFELoop:
.a63b		b2 3a		lda ($3a)			lda 	(zTemp2) 					; scan forward using offsets.
.a63d		f0 0b		beq $a64a			beq 	_MDLFEExit
.a63f		18		clc				clc
.a640		65 3a		adc $3a				adc 	zTemp2
.a642		85 3a		sta $3a				sta 	zTemp2
.a644		90 f5		bcc $a63b			bcc 	_MDLFELoop
.a646		e6 3b		inc $3b				inc 	zTemp2+1
.a648		80 f1		bra $a63b			bra 	_MDLFELoop
.a64a						_MDLFEExit:
.a64a		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/insert.asm

.a64b						MemoryInsertLine:
.a64b		08		php				php
.a64c		20 33 a6	jsr $a633			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.a64f		a5 3b		lda $3b				lda 	zTemp2+1 					; is there space for the new line ?
.a651		1a		inc a				inc 	a
.a652		c9 7f		cmp #$7f			cmp 	#(BasicEnd >> 8)-1
.a654		b0 36		bcs $a68c			bcs 	_MDLIError 					; no, fail.
.a656		28		plp				plp 								; do at a specific point or the end ?
.a657		90 08		bcc $a661			bcc 	_MDLIFound 					; if specific point already set.
.a659		a5 3a		lda $3a				lda 	zTemp2 						; if CS on entry append, so put on the
.a65b		85 30		sta $30				sta 	codePtr 					; end.
.a65d		a5 3b		lda $3b				lda 	zTemp2+1
.a65f		85 31		sta $31				sta 	codePtr+1
.a661						_MDLIFound:
.a661		ad 2a 04	lda $042a			lda 	tokenOffset 				; insert gap in Y, the offset, e.g. length of the new line
.a664		a8		tay				tay
.a665						_MDLIInsert:
.a665		b2 3a		lda ($3a)			lda 	(zTemp2) 					; shift one byte up , at least one covers end case (copying link 0)
.a667		91 3a		sta ($3a),y			sta 	(zTemp2),y 					; work from top down.
.a669		a5 30		lda $30				lda 	codePtr 					; reached insert point ?
.a66b		c5 3a		cmp $3a				cmp 	zTemp2
.a66d		d0 06		bne $a675			bne 	_MDLINext
.a66f		a5 31		lda $31				lda 	codePtr+1
.a671		c5 3b		cmp $3b				cmp 	zTemp2+1
.a673		f0 0a		beq $a67f			beq 	_MDLIHaveSpace
.a675						_MDLINext:
.a675		a5 3a		lda $3a				lda 	zTemp2 						; if no, keep zTemp2 going backwards opening up space.
.a677		d0 02		bne $a67b			bne 	_MDLINoBorrow
.a679		c6 3b		dec $3b				dec 	zTemp2+1
.a67b						_MDLINoBorrow:
.a67b		c6 3a		dec $3a				dec 	zTemp2
.a67d		80 e6		bra $a665			bra 	_MDLIInsert
.a67f						_MDLIHaveSpace:
.a67f		ac 2a 04	ldy $042a			ldy 	tokenOffset 				; bytes to copy
.a682		88		dey				dey 								; from offset-1 (last written) to the end of the buffer.
.a683						_MDLICopy:
.a683		b9 2a 04	lda $042a,y			lda 	tokenOffset,y
.a686		91 30		sta ($30),y			sta 	(codePtr),y
.a688		88		dey				dey
.a689		10 f8		bpl $a683			bpl 	_MDLICopy
.a68b		60		rts				rts
.a68c						_MDLIError:
.a68c		a9 06		lda #$06		lda	#6
.a68e		4c fd 8f	jmp $8ffd		jmp	ErrorHandler
.a691						MDLAppendLine:
.a691		86 37		stx $37				stx 	zTemp0+1 					; save new line at zTemp0
.a693		85 36		sta $36				sta 	zTemp0
.a695		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a697		85 38		sta $38				sta 	0+zTemp1
.a699		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a69b		85 39		sta $39				sta 	1+zTemp1
.a69d		b2 38		lda ($38)			lda 	(zTemp1)
.a69f		d0 0a		bne $a6ab			bne 	_MDLANoInitialise
.a6a1		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a6a3		8d 67 06	sta $0667			sta 	0+AppendPointer
.a6a6		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a6a8		8d 68 06	sta $0668			sta 	1+AppendPointer
.a6ab						_MDLANoInitialise:
.a6ab		18		clc				clc
.a6ac		ad 67 06	lda $0667			lda 	AppendPointer 				; copy append pointer to zTemp1 adding the offset as you go
.a6af		85 38		sta $38				sta 	zTemp1
.a6b1		72 36		adc ($36)			adc 	(zTemp0)
.a6b3		8d 67 06	sta $0667			sta 	AppendPointer
.a6b6		ad 68 06	lda $0668			lda 	AppendPointer+1
.a6b9		85 39		sta $39				sta 	zTemp1+1
.a6bb		69 00		adc #$00			adc 	#0
.a6bd		8d 68 06	sta $0668			sta 	AppendPointer+1
.a6c0		a0 00		ldy #$00			ldy 	#0
.a6c2						_MDLACopy:
.a6c2		b1 36		lda ($36),y			lda 	(zTemp0),y 					; copy new line in
.a6c4		91 38		sta ($38),y			sta 	(zTemp1),y
.a6c6		c8		iny				iny
.a6c7		98		tya				tya
.a6c8		d2 36		cmp ($36)			cmp 	(zTemp0) 					; done whole line
.a6ca		d0 f6		bne $a6c2			bne 	_MDLACopy
.a6cc		a9 00		lda #$00			lda 	#0 							; end of program.
.a6ce		91 38		sta ($38),y			sta 	(zTemp1),y
.a6d0		60		rts				rts
.0667						AppendPointer:
>0667								.fill 	2

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/memory.asm

.a6d1						MemoryNew:
.a6d1		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a6d3		85 30		sta $30				sta 	codePtr
.a6d5		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a6d7		85 31		sta $31				sta 	codePtr+1
.a6d9		a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.a6db		92 30		sta ($30)			sta 	(codePtr)
.a6dd		60		rts				rts
.a6de						MemoryInline:
.a6de		98		tya				tya 								; put address into stack,x
.a6df		18		clc				clc  								; get the offset, add codePtr
.a6e0		65 30		adc $30				adc 	codePtr
.a6e2		95 58		sta $58,x			sta 	NSMantissa0,x 				; store the result in the mantissa.
.a6e4		a5 31		lda $31				lda 	codePtr+1
.a6e6		69 00		adc #$00			adc 	#0
.a6e8		95 60		sta $60,x			sta 	NSMantissa1,x
.a6ea		74 68		stz $68,x			stz 	NSMantissa2,x
.a6ec		74 70		stz $70,x			stz 	NSMantissa3,x
.a6ee		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/search.asm

.a6ef						MemorySearch:
.a6ef		85 36		sta $36				sta 	zTemp0 						; save line number in zTemp0
.a6f1		86 37		stx $37				stx 	zTemp0+1
.a6f3		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a6f5		85 30		sta $30				sta 	codePtr
.a6f7		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a6f9		85 31		sta $31				sta 	codePtr+1
.a6fb						_MTAXLoop:
.a6fb		b2 30		lda ($30)			lda 	(codePtr)
.a6fd		18		clc				clc
.a6fe		f0 21		beq $a721			beq 	_MTAXExit 					; reached end, exit with CC.
.a700		a0 01		ldy #$01			ldy 	#1 							; calculate current line# - requested line#
.a702		b1 30		lda ($30),y			lda 	(codePtr),y
.a704		38		sec				sec
.a705		e5 36		sbc $36				sbc 	zTemp0
.a707		85 38		sta $38				sta 	zTemp1 						; save interim to set Z
.a709		c8		iny				iny 								; do the MSB
.a70a		b1 30		lda ($30),y			lda 	(codePtr),y
.a70c		e5 37		sbc $37				sbc 	zTemp0+1
.a70e		05 38		ora $38				ora 	zTemp1 						; will set Z if result is zero, doesn't affect carry flag
.a710		f0 0f		beq $a721			beq 	_MTAXExit	 				; found so exit (CS will be set)
.a712		b0 0d		bcs $a721			bcs 	_MTAXExit 					; current < required exit
.a714		18		clc				clc
.a715		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.a717		65 30		adc $30				adc 	codePtr
.a719		85 30		sta $30				sta 	codePtr
.a71b		90 02		bcc $a71f			bcc 	_CREExit
.a71d		e6 31		inc $31				inc 	codePtr+1 					; carry
.a71f						_CREExit:
.a71f		80 da		bra $a6fb			bra 	_MTAXLoop
.a721						_MTAXExit:
.a721		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./font_update/newfont.asm

.a722						UpdateFont:
.a722		a5 01		lda $01				lda 	1 							; save position
.a724		48		pha				pha
.a725		a9 01		lda #$01			lda 	#1 							; switch to I/O block 1
.a727		85 01		sta $01				sta 	1
.a729		a9 50		lda #$50			lda 	#((FontBinary) & $FF)
.a72b		85 36		sta $36				sta 	0+zTemp0
.a72d		a9 a7		lda #$a7			lda 	#((FontBinary) >> 8)
.a72f		85 37		sta $37				sta 	1+zTemp0
.a731		a9 00		lda #$00			lda 	#(($C000) & $FF)
.a733		85 38		sta $38				sta 	0+zTemp1
.a735		a9 c0		lda #$c0			lda 	#(($C000) >> 8)
.a737		85 39		sta $39				sta 	1+zTemp1
.a739						_UFCopy1:
.a739		a0 00		ldy #$00			ldy 	#0
.a73b						_UFCopy2:
.a73b		b1 36		lda ($36),y			lda 	(zTemp0),y
.a73d		91 38		sta ($38),y			sta 	(zTemp1),y
.a73f		c8		iny				iny
.a740		d0 f9		bne $a73b			bne 	_UFCopy2
.a742		e6 37		inc $37				inc 	zTemp0+1
.a744		e6 39		inc $39				inc 	zTemp1+1
.a746		a5 39		lda $39				lda 	zTemp1+1
.a748		c9 c8		cmp #$c8			cmp 	#$C8
.a74a		d0 ed		bne $a739			bne 	_UFCopy1
.a74c		68		pla				pla 								; restore.
.a74d		85 01		sta $01				sta 	1
.a74f		60		rts				rts

;******  Processing file: ./font_update/../common/generated/font.dat

.a750						FontBinary:
>a750		06 09 10 3c 10 21 7e 00			.byte	$06,$09,$10,$3c,$10,$21,$7e,$00,$00,$00,$00,$00,$00,$00,$ff,$ff,$00,$00,$00,$00,$00,$ff,$ff,$ff,$00,$00,$00,$00,$ff,$ff,$ff,$ff,$00,$00,$00,$ff,$ff,$ff,$ff,$ff,$00,$00,$ff,$ff,$ff,$ff,$ff,$ff,$00,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$00,$ff,$ff,$ff,$ff,$ff,$ff,$00,$00,$ff,$ff,$ff,$ff,$ff,$00,$00,$00,$ff,$ff,$ff,$ff,$00,$00,$00,$00,$ff,$ff,$ff,$00,$00,$00,$00,$00,$ff,$ff,$00,$00,$00,$00,$00,$00,$ff,$00,$00,$00,$00,$00,$00,$00,$08,$00,$22,$00,$08,$00,$02,$00,$88,$00,$22,$00,$88,$00,$22,$00,$8a,$00,$2a,$00,$8a,$00,$2a,$00,$aa,$00,$aa,$00,$aa,$00,$aa,$00,$aa,$05,$aa,$11,$aa,$05,$aa,$11,$aa,$5f,$aa,$77,$aa,$5f,$aa,$77,$aa,$ff,$aa,$ff,$aa,$ff,$aa,$ff,$af,$ff,$bb,$ff,$af,$ff,$bb,$ff,$77,$ff,$dd,$ff,$77,$ff,$dd,$ff,$7f,$ff,$df,$ff,$77,$ff,$df,$ff,$ff,$ff,$df,$ff,$77,$ff,$dd,$ff,$bb,$ff,$ee,$ff,$aa,$ff,$aa,$ff,$aa,$ff,$aa,$77,$aa,$dd,$aa,$55,$aa,$55,$22,$55,$88,$55,$00,$55,$aa,$00,$aa,$00,$88,$00,$22,$00,$33,$99,$cc,$66,$33,$99,$cc,$66,$cc,$99,$33,$66,$cc,$99,$33,$66,$00,$00,$00,$00,$00,$00,$00,$00,$08,$08,$08,$08,$00,$00,$08,$00,$24,$24,$24,$00,$00,$00,$00,$00,$24,$24,$7e,$24,$7e,$24,$24,$00,$08,$1e,$28,$1c,$0a,$3c,$08,$00,$00,$62,$64,$08,$10,$26,$46,$00,$30,$48,$48,$30,$4a,$44,$3a,$00,$08,$08,$08,$00,$00,$00,$00,$00,$04,$08,$10,$10,$10,$08,$04,$00,$20,$10,$08,$08,$08,$10,$20,$00,$00,$2a,$1c,$3e,$1c,$2a,$00,$00,$00,$08,$08,$3e,$08,$08,$00,$00,$00,$00,$00,$00,$00,$08,$08,$10,$00,$00,$00,$7e,$00,$00,$00,$00,$00,$00,$00,$00,$00,$18,$18,$00,$00,$02,$04,$08,$10,$20,$40,$00,$3c,$42,$46,$5a,$62,$42,$3c,$00,$08,$18,$08,$08,$08,$08,$1c,$00,$3c,$42,$02,$3c,$40,$40,$7e,$00,$3c,$42,$02,$1c,$02,$42,$3c,$00,$04,$44,$44,$44,$7e,$04,$04,$00,$7e,$40,$40,$7c,$02,$02,$7c,$00,$3c,$40,$40,$7c,$42,$42,$3c,$00,$7e,$42,$04,$08,$10,$10,$10,$00,$3c,$42,$42,$3c,$42,$42,$3c,$00,$3c,$42,$42,$3e,$02,$02,$3c,$00,$00,$00,$08,$00,$00,$08,$00,$00,$00,$00,$08,$00,$00,$08,$08,$10,$08,$10,$20,$40,$20,$10,$08,$00,$00,$00,$7e,$00,$7e,$00,$00,$00,$10,$08,$04,$02,$04,$08,$10,$00,$3c,$42,$02,$0c,$10,$00,$10,$00,$3c,$42,$4e,$52,$4e,$40,$3c,$00,$3c,$42,$42,$7e,$42,$42,$42,$00,$7c,$42,$42,$7c,$42,$42,$7c,$00,$3c,$42,$40,$40,$40,$42,$3c,$00,$78,$44,$42,$42,$42,$44,$78,$00,$7e,$40,$40,$78,$40,$40,$7e,$00,$7e,$40,$40,$78,$40,$40,$40,$00,$3c,$42,$40,$4e,$42,$42,$3c,$00,$42,$42,$42,$7e,$42,$42,$42,$00,$1c,$08,$08,$08,$08,$08,$1c,$00,$0e,$04,$04,$04,$04,$44,$38,$00,$42,$44,$48,$70,$48,$44,$42,$00,$40,$40,$40,$40,$40,$40,$7e,$00,$41,$63,$55,$49,$41,$41,$41,$00,$42,$62,$52,$4a,$46,$42,$42,$00,$3c,$42,$42,$42,$42,$42,$3c,$00,$7c,$42,$42,$7c,$40,$40,$40,$00,$3c,$42,$42,$42,$4a,$44,$3a,$00,$7c,$42,$42,$7c,$48,$44,$42,$00,$3c,$42,$40,$3c,$02,$42,$3c,$00,$3e,$08,$08,$08,$08,$08,$08,$00,$42,$42,$42,$42,$42,$42,$3c,$00,$41,$41,$41,$22,$22,$14,$08,$00,$41,$41,$41,$49,$55,$63,$41,$00,$42,$42,$24,$18,$24,$42,$42,$00,$41,$22,$14,$08,$08,$08,$08,$00,$7f,$02,$04,$08,$10,$20,$7f,$00,$3c,$20,$20,$20,$20,$20,$3c,$00,$00,$40,$20,$10,$08,$04,$02,$00,$3c,$04,$04,$04,$04,$04,$3c,$00,$00,$08,$14,$22,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$ff,$10,$08,$04,$00,$00,$00,$00,$00,$00,$00,$3c,$02,$3e,$42,$3e,$00,$40,$40,$7c,$42,$42,$42,$7c,$00,$00,$00,$3c,$42,$40,$42,$3c,$00,$02,$02,$3e,$42,$42,$42,$3e,$00,$00,$00,$3c,$42,$7e,$40,$3c,$00,$0c,$10,$10,$7c,$10,$10,$10,$00,$00,$00,$3e,$42,$42,$3e,$02,$3c,$40,$40,$7c,$42,$42,$42,$42,$00,$08,$00,$18,$08,$08,$08,$08,$00,$04,$00,$0c,$04,$04,$04,$04,$38,$40,$40,$44,$48,$50,$68,$44,$00,$18,$08,$08,$08,$08,$08,$1c,$00,$00,$00,$76,$49,$49,$49,$49,$00,$00,$00,$7c,$42,$42,$42,$42,$00,$00,$00,$3c,$42,$42,$42,$3c,$00,$00,$00,$7c,$42,$42,$7c,$40,$40,$00,$00,$3e,$42,$42,$3e,$02,$02,$00,$00,$5c,$60,$40,$40,$40,$00,$00,$00,$3e,$40,$3c,$02,$7c,$00,$10,$10,$7c,$10,$10,$10,$0c,$00,$00,$00,$42,$42,$42,$46,$3a,$00,$00,$00,$42,$42,$42,$24,$18,$00,$00,$00,$41,$49,$49,$49,$36,$00,$00,$00,$42,$24,$18,$24,$42,$00,$00,$00,$42,$42,$42,$3e,$02,$3c,$00,$00,$7e,$04,$18,$20,$7e,$00,$0c,$10,$10,$20,$10,$10,$0c,$00,$10,$10,$10,$10,$10,$10,$10,$00,$60,$10,$10,$08,$10,$10,$60,$00,$00,$00,$30,$49,$06,$00,$00,$00,$08,$04,$04,$08,$10,$10,$08,$00,$02,$02,$02,$02,$02,$02,$02,$02,$04,$04,$04,$04,$04,$04,$04,$04,$08,$08,$08,$08,$08,$08,$08,$08,$10,$10,$10,$10,$10,$10,$10,$10,$20,$20,$20,$20,$20,$20,$20,$20,$40,$40,$40,$40,$40,$40,$40,$40,$80,$80,$80,$80,$80,$80,$80,$80,$c0,$c0,$c0,$c0,$c0,$c0,$c0,$c0,$e0,$e0,$e0,$e0,$e0,$e0,$e0,$e0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f0,$f8,$f8,$f8,$f8,$f8,$f8,$f8,$f8,$fc,$fc,$fc,$fc,$fc,$fc,$fc,$fc,$fe,$fe,$fe,$fe,$fe,$fe,$fe,$fe,$7f,$7f,$7f,$7f,$7f,$7f,$7f,$7f,$3f,$3f,$3f,$3f,$3f,$3f,$3f,$3f,$1f,$1f,$1f,$1f,$1f,$1f,$1f,$1f,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$07,$07,$07,$07,$07,$07,$07,$07,$03,$03,$03,$03,$03,$03,$03,$03,$01,$01,$01,$01,$01,$01,$01,$01,$00,$00,$00,$00,$00,$00,$ff,$00,$00,$00,$00,$00,$00,$ff,$00,$00,$00,$00,$00,$00,$ff,$00,$00,$00,$00,$00,$00,$ff,$00,$00,$00,$00,$00,$00,$ff,$00,$00,$00,$00,$00,$00,$ff,$00,$00,$00,$00,$00,$00,$08,$08,$08,$08,$0f,$08,$08,$08,$00,$00,$00,$00,$ff,$08,$08,$08,$08,$08,$08,$08,$ff,$08,$08,$08,$08,$08,$08,$08,$ff,$00,$00,$00,$08,$08,$08,$08,$f8,$08,$08,$08,$81,$42,$24,$18,$18,$24,$42,$81,$00,$00,$00,$00,$0f,$08,$08,$08,$00,$00,$00,$00,$f8,$08,$08,$08,$08,$08,$08,$08,$0f,$00,$00,$00,$08,$08,$08,$08,$f8,$00,$00,$00,$18,$18,$18,$1f,$1f,$18,$18,$18,$00,$00,$00,$ff,$ff,$18,$18,$18,$18,$18,$18,$ff,$ff,$18,$18,$18,$18,$18,$18,$ff,$ff,$00,$00,$00,$18,$18,$18,$f8,$f8,$18,$18,$18,$00,$00,$00,$1f,$1f,$18,$18,$18,$00,$00,$00,$f8,$f8,$18,$18,$18,$18,$18,$18,$1f,$1f,$00,$00,$00,$18,$18,$18,$f8,$f8,$00,$00,$00,$00,$00,$00,$ff,$ff,$00,$00,$00,$18,$18,$18,$18,$18,$18,$18,$18,$00,$00,$00,$00,$03,$07,$0f,$0f,$00,$00,$00,$00,$c0,$e0,$f0,$f0,$0f,$0f,$07,$03,$00,$00,$00,$00,$f0,$f0,$e0,$c0,$00,$00,$00,$00,$00,$7e,$7e,$7e,$7e,$7e,$7e,$00,$00,$00,$3c,$3c,$3c,$3c,$00,$00,$00,$00,$00,$18,$18,$00,$00,$00,$00,$00,$00,$00,$08,$00,$00,$00,$00,$3c,$7e,$7e,$7e,$7e,$3c,$00,$00,$00,$18,$3c,$3c,$18,$00,$00,$00,$3c,$42,$42,$42,$42,$3c,$00,$00,$3c,$42,$5a,$5a,$42,$3c,$00,$ff,$81,$81,$81,$81,$81,$81,$ff,$00,$00,$03,$06,$6c,$38,$10,$00,$00,$00,$7e,$00,$7e,$00,$7e,$00,$00,$00,$00,$00,$03,$04,$08,$08,$00,$00,$00,$00,$e0,$10,$08,$08,$00,$00,$00,$00,$00,$00,$00,$55,$00,$00,$00,$00,$00,$00,$aa,$55,$00,$00,$00,$00,$00,$55,$aa,$55,$00,$00,$00,$00,$aa,$55,$aa,$55,$00,$00,$00,$55,$aa,$55,$aa,$55,$00,$00,$aa,$55,$aa,$55,$aa,$55,$00,$55,$aa,$55,$aa,$55,$aa,$55,$aa,$55,$aa,$55,$aa,$55,$aa,$55,$aa,$55,$aa,$55,$aa,$55,$aa,$00,$aa,$55,$aa,$55,$aa,$55,$00,$00,$aa,$55,$aa,$55,$aa,$00,$00,$00,$aa,$55,$aa,$55,$00,$00,$00,$00,$aa,$55,$aa,$00,$00,$00,$00,$00,$aa,$55,$00,$00,$00,$00,$00,$00,$aa,$00,$00,$00,$00,$00,$00,$00,$80,$00,$80,$00,$80,$00,$80,$00,$80,$40,$80,$40,$80,$40,$80,$40,$a0,$40,$a0,$40,$a0,$40,$a0,$40,$a0,$50,$a0,$50,$a0,$50,$a0,$50,$a8,$50,$a8,$50,$a8,$50,$a8,$50,$a8,$54,$a8,$54,$a8,$54,$a8,$54,$aa,$54,$aa,$54,$aa,$54,$aa,$54,$2a,$55,$2a,$55,$2a,$55,$2a,$55,$2a,$15,$2a,$15,$2a,$15,$2a,$15,$0a,$15,$0a,$15,$0a,$15,$0a,$15,$0a,$05,$0a,$05,$0a,$05,$0a,$05,$02,$05,$02,$05,$02,$05,$02,$05,$02,$01,$02,$01,$02,$01,$02,$01,$00,$01,$00,$01,$00,$01,$00,$01,$7e,$81,$9d,$a1,$a1,$9d,$81,$7e,$08,$08,$08,$04,$03,$00,$00,$00,$08,$08,$08,$10,$e0,$00,$00,$00,$80,$40,$20,$10,$08,$04,$02,$01,$01,$02,$04,$08,$10,$20,$40,$80,$ff,$7f,$3f,$1f,$0f,$07,$03,$01,$ff,$fe,$fc,$f8,$f0,$e0,$c0,$80,$01,$03,$07,$0f,$1f,$3f,$7f,$ff,$80,$c0,$e0,$f0,$f8,$fc,$fe,$ff,$3f,$1f,$0f,$07,$03,$01,$00,$00,$fc,$f8,$f0,$e0,$c0,$80,$00,$00,$00,$00,$01,$03,$07,$0f,$1f,$3f,$00,$00,$80,$c0,$e0,$f0,$f8,$fc,$0f,$07,$03,$01,$00,$00,$00,$00,$f0,$e0,$c0,$80,$00,$00,$00,$00,$00,$00,$00,$00,$01,$03,$07,$0f,$00,$00,$00,$00,$80,$c0,$e0,$f0,$03,$01,$00,$00,$00,$00,$00,$00,$c0,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$03,$00,$00,$00,$00,$00,$00,$80,$c0,$00,$00,$00,$00,$0f,$0f,$0f,$0f,$00,$00,$00,$00,$f0,$f0,$f0,$f0,$0f,$0f,$0f,$0f,$00,$00,$00,$00,$f0,$f0,$f0,$f0,$00,$00,$00,$00,$f0,$f0,$f0,$f0,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$0f,$f0,$f0,$f0,$f0,$00,$00,$00,$3e,$1c,$08,$00,$00,$00,$00,$08,$18,$38,$18,$08,$00,$00,$00,$10,$18,$1c,$18,$10,$00,$00,$00,$08,$1c,$3e,$00,$00,$00,$36,$7f,$7f,$7f,$3e,$1c,$08,$00,$08,$1c,$3e,$7f,$3e,$1c,$08,$00,$08,$1c,$3e,$7f,$7f,$1c,$3e,$00,$08,$1c,$2a,$77,$2a,$08,$1c,$00
>a758		00 00 00 00 00 00 ff ff 00 00 00 00 00 ff ff ff
>a768		00 00 00 00 ff ff ff ff 00 00 00 ff ff ff ff ff
>a778		00 00 ff ff ff ff ff ff 00 ff ff ff ff ff ff ff
>a788		ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff 00
>a798		ff ff ff ff ff ff 00 00 ff ff ff ff ff 00 00 00
>a7a8		ff ff ff ff 00 00 00 00 ff ff ff 00 00 00 00 00
>a7b8		ff ff 00 00 00 00 00 00 ff 00 00 00 00 00 00 00
>a7c8		08 00 22 00 08 00 02 00 88 00 22 00 88 00 22 00
>a7d8		8a 00 2a 00 8a 00 2a 00 aa 00 aa 00 aa 00 aa 00
>a7e8		aa 05 aa 11 aa 05 aa 11 aa 5f aa 77 aa 5f aa 77
>a7f8		aa ff aa ff aa ff aa ff af ff bb ff af ff bb ff
>a808		77 ff dd ff 77 ff dd ff 7f ff df ff 77 ff df ff
>a818		ff ff df ff 77 ff dd ff bb ff ee ff aa ff aa ff
>a828		aa ff aa 77 aa dd aa 55 aa 55 22 55 88 55 00 55
>a838		aa 00 aa 00 88 00 22 00 33 99 cc 66 33 99 cc 66
>a848		cc 99 33 66 cc 99 33 66 00 00 00 00 00 00 00 00
>a858		08 08 08 08 00 00 08 00 24 24 24 00 00 00 00 00
>a868		24 24 7e 24 7e 24 24 00 08 1e 28 1c 0a 3c 08 00
>a878		00 62 64 08 10 26 46 00 30 48 48 30 4a 44 3a 00
>a888		08 08 08 00 00 00 00 00 04 08 10 10 10 08 04 00
>a898		20 10 08 08 08 10 20 00 00 2a 1c 3e 1c 2a 00 00
>a8a8		00 08 08 3e 08 08 00 00 00 00 00 00 00 08 08 10
>a8b8		00 00 00 7e 00 00 00 00 00 00 00 00 00 18 18 00
>a8c8		00 02 04 08 10 20 40 00 3c 42 46 5a 62 42 3c 00
>a8d8		08 18 08 08 08 08 1c 00 3c 42 02 3c 40 40 7e 00
>a8e8		3c 42 02 1c 02 42 3c 00 04 44 44 44 7e 04 04 00
>a8f8		7e 40 40 7c 02 02 7c 00 3c 40 40 7c 42 42 3c 00
>a908		7e 42 04 08 10 10 10 00 3c 42 42 3c 42 42 3c 00
>a918		3c 42 42 3e 02 02 3c 00 00 00 08 00 00 08 00 00
>a928		00 00 08 00 00 08 08 10 08 10 20 40 20 10 08 00
>a938		00 00 7e 00 7e 00 00 00 10 08 04 02 04 08 10 00
>a948		3c 42 02 0c 10 00 10 00 3c 42 4e 52 4e 40 3c 00
>a958		3c 42 42 7e 42 42 42 00 7c 42 42 7c 42 42 7c 00
>a968		3c 42 40 40 40 42 3c 00 78 44 42 42 42 44 78 00
>a978		7e 40 40 78 40 40 7e 00 7e 40 40 78 40 40 40 00
>a988		3c 42 40 4e 42 42 3c 00 42 42 42 7e 42 42 42 00
>a998		1c 08 08 08 08 08 1c 00 0e 04 04 04 04 44 38 00
>a9a8		42 44 48 70 48 44 42 00 40 40 40 40 40 40 7e 00
>a9b8		41 63 55 49 41 41 41 00 42 62 52 4a 46 42 42 00
>a9c8		3c 42 42 42 42 42 3c 00 7c 42 42 7c 40 40 40 00
>a9d8		3c 42 42 42 4a 44 3a 00 7c 42 42 7c 48 44 42 00
>a9e8		3c 42 40 3c 02 42 3c 00 3e 08 08 08 08 08 08 00
>a9f8		42 42 42 42 42 42 3c 00 41 41 41 22 22 14 08 00
>aa08		41 41 41 49 55 63 41 00 42 42 24 18 24 42 42 00
>aa18		41 22 14 08 08 08 08 00 7f 02 04 08 10 20 7f 00
>aa28		3c 20 20 20 20 20 3c 00 00 40 20 10 08 04 02 00
>aa38		3c 04 04 04 04 04 3c 00 00 08 14 22 00 00 00 00
>aa48		00 00 00 00 00 00 00 ff 10 08 04 00 00 00 00 00
>aa58		00 00 3c 02 3e 42 3e 00 40 40 7c 42 42 42 7c 00
>aa68		00 00 3c 42 40 42 3c 00 02 02 3e 42 42 42 3e 00
>aa78		00 00 3c 42 7e 40 3c 00 0c 10 10 7c 10 10 10 00
>aa88		00 00 3e 42 42 3e 02 3c 40 40 7c 42 42 42 42 00
>aa98		08 00 18 08 08 08 08 00 04 00 0c 04 04 04 04 38
>aaa8		40 40 44 48 50 68 44 00 18 08 08 08 08 08 1c 00
>aab8		00 00 76 49 49 49 49 00 00 00 7c 42 42 42 42 00
>aac8		00 00 3c 42 42 42 3c 00 00 00 7c 42 42 7c 40 40
>aad8		00 00 3e 42 42 3e 02 02 00 00 5c 60 40 40 40 00
>aae8		00 00 3e 40 3c 02 7c 00 10 10 7c 10 10 10 0c 00
>aaf8		00 00 42 42 42 46 3a 00 00 00 42 42 42 24 18 00
>ab08		00 00 41 49 49 49 36 00 00 00 42 24 18 24 42 00
>ab18		00 00 42 42 42 3e 02 3c 00 00 7e 04 18 20 7e 00
>ab28		0c 10 10 20 10 10 0c 00 10 10 10 10 10 10 10 00
>ab38		60 10 10 08 10 10 60 00 00 00 30 49 06 00 00 00
>ab48		08 04 04 08 10 10 08 00 02 02 02 02 02 02 02 02
>ab58		04 04 04 04 04 04 04 04 08 08 08 08 08 08 08 08
>ab68		10 10 10 10 10 10 10 10 20 20 20 20 20 20 20 20
>ab78		40 40 40 40 40 40 40 40 80 80 80 80 80 80 80 80
>ab88		c0 c0 c0 c0 c0 c0 c0 c0 e0 e0 e0 e0 e0 e0 e0 e0
>ab98		f0 f0 f0 f0 f0 f0 f0 f0 f8 f8 f8 f8 f8 f8 f8 f8
>aba8		fc fc fc fc fc fc fc fc fe fe fe fe fe fe fe fe
>abb8		7f 7f 7f 7f 7f 7f 7f 7f 3f 3f 3f 3f 3f 3f 3f 3f
>abc8		1f 1f 1f 1f 1f 1f 1f 1f 0f 0f 0f 0f 0f 0f 0f 0f
>abd8		07 07 07 07 07 07 07 07 03 03 03 03 03 03 03 03
>abe8		01 01 01 01 01 01 01 01 00 00 00 00 00 00 ff 00
>abf8		00 00 00 00 00 ff 00 00 00 00 00 00 ff 00 00 00
>ac08		00 00 00 ff 00 00 00 00 00 00 ff 00 00 00 00 00
>ac18		00 ff 00 00 00 00 00 00 08 08 08 08 0f 08 08 08
>ac28		00 00 00 00 ff 08 08 08 08 08 08 08 ff 08 08 08
>ac38		08 08 08 08 ff 00 00 00 08 08 08 08 f8 08 08 08
>ac48		81 42 24 18 18 24 42 81 00 00 00 00 0f 08 08 08
>ac58		00 00 00 00 f8 08 08 08 08 08 08 08 0f 00 00 00
>ac68		08 08 08 08 f8 00 00 00 18 18 18 1f 1f 18 18 18
>ac78		00 00 00 ff ff 18 18 18 18 18 18 ff ff 18 18 18
>ac88		18 18 18 ff ff 00 00 00 18 18 18 f8 f8 18 18 18
>ac98		00 00 00 1f 1f 18 18 18 00 00 00 f8 f8 18 18 18
>aca8		18 18 18 1f 1f 00 00 00 18 18 18 f8 f8 00 00 00
>acb8		00 00 00 ff ff 00 00 00 18 18 18 18 18 18 18 18
>acc8		00 00 00 00 03 07 0f 0f 00 00 00 00 c0 e0 f0 f0
>acd8		0f 0f 07 03 00 00 00 00 f0 f0 e0 c0 00 00 00 00
>ace8		00 7e 7e 7e 7e 7e 7e 00 00 00 3c 3c 3c 3c 00 00
>acf8		00 00 00 18 18 00 00 00 00 00 00 00 08 00 00 00
>ad08		00 3c 7e 7e 7e 7e 3c 00 00 00 18 3c 3c 18 00 00
>ad18		00 3c 42 42 42 42 3c 00 00 3c 42 5a 5a 42 3c 00
>ad28		ff 81 81 81 81 81 81 ff 00 00 03 06 6c 38 10 00
>ad38		00 00 7e 00 7e 00 7e 00 00 00 00 00 03 04 08 08
>ad48		00 00 00 00 e0 10 08 08 00 00 00 00 00 00 00 55
>ad58		00 00 00 00 00 00 aa 55 00 00 00 00 00 55 aa 55
>ad68		00 00 00 00 aa 55 aa 55 00 00 00 55 aa 55 aa 55
>ad78		00 00 aa 55 aa 55 aa 55 00 55 aa 55 aa 55 aa 55
>ad88		aa 55 aa 55 aa 55 aa 55 aa 55 aa 55 aa 55 aa 00
>ad98		aa 55 aa 55 aa 55 00 00 aa 55 aa 55 aa 00 00 00
>ada8		aa 55 aa 55 00 00 00 00 aa 55 aa 00 00 00 00 00
>adb8		aa 55 00 00 00 00 00 00 aa 00 00 00 00 00 00 00
>adc8		80 00 80 00 80 00 80 00 80 40 80 40 80 40 80 40
>add8		a0 40 a0 40 a0 40 a0 40 a0 50 a0 50 a0 50 a0 50
>ade8		a8 50 a8 50 a8 50 a8 50 a8 54 a8 54 a8 54 a8 54
>adf8		aa 54 aa 54 aa 54 aa 54 2a 55 2a 55 2a 55 2a 55
>ae08		2a 15 2a 15 2a 15 2a 15 0a 15 0a 15 0a 15 0a 15
>ae18		0a 05 0a 05 0a 05 0a 05 02 05 02 05 02 05 02 05
>ae28		02 01 02 01 02 01 02 01 00 01 00 01 00 01 00 01
>ae38		7e 81 9d a1 a1 9d 81 7e 08 08 08 04 03 00 00 00
>ae48		08 08 08 10 e0 00 00 00 80 40 20 10 08 04 02 01
>ae58		01 02 04 08 10 20 40 80 ff 7f 3f 1f 0f 07 03 01
>ae68		ff fe fc f8 f0 e0 c0 80 01 03 07 0f 1f 3f 7f ff
>ae78		80 c0 e0 f0 f8 fc fe ff 3f 1f 0f 07 03 01 00 00
>ae88		fc f8 f0 e0 c0 80 00 00 00 00 01 03 07 0f 1f 3f
>ae98		00 00 80 c0 e0 f0 f8 fc 0f 07 03 01 00 00 00 00
>aea8		f0 e0 c0 80 00 00 00 00 00 00 00 00 01 03 07 0f
>aeb8		00 00 00 00 80 c0 e0 f0 03 01 00 00 00 00 00 00
>aec8		c0 80 00 00 00 00 00 00 00 00 00 00 00 00 01 03
>aed8		00 00 00 00 00 00 80 c0 00 00 00 00 0f 0f 0f 0f
>aee8		00 00 00 00 f0 f0 f0 f0 0f 0f 0f 0f 00 00 00 00
>aef8		f0 f0 f0 f0 00 00 00 00 f0 f0 f0 f0 0f 0f 0f 0f
>af08		0f 0f 0f 0f f0 f0 f0 f0 00 00 00 3e 1c 08 00 00
>af18		00 00 08 18 38 18 08 00 00 00 10 18 1c 18 10 00
>af28		00 00 08 1c 3e 00 00 00 36 7f 7f 7f 3e 1c 08 00
>af38		08 1c 3e 7f 3e 1c 08 00 08 1c 3e 7f 7f 1c 3e 00
>af48		08 1c 2a 77 2a 08 1c 00

;******  Return to file: ./font_update/newfont.asm


;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/sound/effects.asm

.af50						PingCommand:
.af50		5a		phy				phy 								; save pos
.af51		a9 01		lda #$01			lda 	#1 						; push channel.
.af53		48		pha				pha
.af54		a9 c8		lda #$c8			lda 	#200 						; pitch LSB
.af56		a2 03		ldx #$03			ldx 	#3 						; length
.af58		a0 00		ldy #$00			ldy 	#0 						; slide LSB
.af5a		80 24		bra $af80			bra 	SoundEffectCommand
.af5c						ZapCommand:
.af5c		5a		phy				phy 								; save pos
.af5d		a9 01		lda #$01			lda 	#1 						; push channel.
.af5f		48		pha				pha
.af60		a9 ff		lda #$ff			lda 	#255 						; pitch LSB
.af62		a2 05		ldx #$05			ldx 	#5 						; length
.af64		a0 14		ldy #$14			ldy 	#20 						; slide LSB
.af66		80 18		bra $af80			bra 	SoundEffectCommand
.af68						ShootCommand:
.af68		5a		phy				phy 								; save pos
.af69		a9 03		lda #$03			lda 	#3 						; push channel.
.af6b		48		pha				pha
.af6c		a9 20		lda #$20			lda 	#32 						; pitch LSB
.af6e		a2 02		ldx #$02			ldx 	#2 						; length
.af70		a0 00		ldy #$00			ldy 	#0 						; slide LSB
.af72		80 0c		bra $af80			bra 	SoundEffectCommand
.af74						Explode:
.af74		5a		phy				phy 								; save pos
.af75		a9 03		lda #$03			lda 	#3 						; push channel.
.af77		48		pha				pha
.af78		a9 50		lda #$50			lda 	#80 						; pitch LSB
.af7a		a2 05		ldx #$05			ldx 	#5 						; length
.af7c		a0 00		ldy #$00			ldy 	#0 						; slide LSB
.af7e		80 00		bra $af80			bra 	SoundEffectCommand
.af80						SoundEffectCommand:
.af80		8d 69 06	sta $0669			sta 	SoundCommandBlock 			; set up the command block in sound.asm
.af83		9c 6a 06	stz $066a			stz 	SoundCommandBlock+1
.af86		a9 0f		lda #$0f			lda 	#15
.af88		8d 6b 06	sta $066b			sta 	SoundCommandBlock+2
.af8b		8e 6c 06	stx $066c			stx 	SoundCommandBlock+3
.af8e		8c 6d 06	sty $066d			sty 	SoundCommandBlock+4
.af91		9c 6e 06	stz $066e			stz 	SoundCommandBlock+5
.af94		68		pla				pla
.af95		09 10		ora #$10			ora 	#$10  						; execute command $11
.af97		a2 69		ldx #$69			ldx 	#(SoundCommandBlock & $FF)
.af99		a0 06		ldy #$06			ldy 	#(SoundCommandBlock >> 8)
.af9b		20 71 80	jsr $8071			jsr 	SNDCommand
.af9e		7a		ply				ply
.af9f		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/sound/playing.asm

.afa0						UnaryPlaying:
.afa0		fa		plx				plx
.afa1		20 e3 9e	jsr $9ee3			jsr 	Evaluate8BitInteger 		; get channel #
.afa4		48		pha				pha
.afa5		20 e4 8f	jsr $8fe4			jsr		CheckRightBracket
.afa8		68		pla				pla
.afa9		c9 04		cmp #$04			cmp 	#4
.afab		b0 0c		bcs $afb9			bcs 	_UPNotPlaying
.afad		09 20		ora #$20			ora 	#$20 						; query playing ?
.afaf		20 71 80	jsr $8071			jsr 	SNDCommand
.afb2		c9 00		cmp #$00			cmp 	#0
.afb4		f0 03		beq $afb9			beq 	_UPNotPlaying
.afb6		4c 6a 90	jmp $906a			jmp 	ReturnTrue
.afb9						_UPNotPlaying:
.afb9		4c 75 90	jmp $9075			jmp 	ReturnFalse

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/sound/sound.asm

.afbc						SoundCommand:
.afbc		b1 30		lda ($30),y			lda 	(codePtr),y
.afbe		c9 c6		cmp #$c6			cmp 	#KWD_OFF 					; SOUND OFF ?
.afc0		d0 09		bne $afcb			bne 	_SNDMain
.afc2		c8		iny				iny 								; skip OFF
.afc3		a9 3f		lda #$3f			lda 	#$3F 						; call command $3F (silence)
.afc5		5a		phy				phy
.afc6		20 71 80	jsr $8071			jsr 	SNDCommand
.afc9		7a		ply				ply
.afca		60		rts				rts
.afcb						_SNDMain:
.afcb		a2 00		ldx #$00			ldx 	#0
.afcd		20 e3 9e	jsr $9ee3			jsr 	Evaluate8BitInteger 		; channel
.afd0		c9 04		cmp #$04			cmp 	#4 							; must be 0-3
.afd2		b0 4b		bcs $b01f			bcs 	_SndError
.afd4		e8		inx				inx 								; do the rest in slot 1.
.afd5		20 ec 8f	jsr $8fec			jsr 	CheckComma
.afd8		20 c8 9e	jsr $9ec8			jsr 	Evaluate16BitInteger 		; Pitch
.afdb		b5 60		lda $60,x			lda 	NSMantissa1,x 				; must be 10 bit
.afdd		c9 10		cmp #$10			cmp 	#16
.afdf		b0 3e		bcs $b01f			bcs 	_SndError
.afe1		8d 6a 06	sta $066a			sta 	SoundCommandBlock+1 		; Pitch (2 bytes + 0)
.afe4		b5 58		lda $58,x			lda 	NSMantissa0,x
.afe6		8d 69 06	sta $0669			sta 	SoundCommandBlock
.afe9		20 ec 8f	jsr $8fec			jsr 	CheckComma
.afec		20 e3 9e	jsr $9ee3			jsr 	Evaluate8BitInteger 		; Length (1 byte + 3)
.afef		8d 6c 06	sta $066c			sta 	SoundCommandBlock+3
.aff2		a9 0f		lda #$0f			lda 	#15
.aff4		8d 6b 06	sta $066b			sta 	SoundCommandBlock+2 		; Volume (1 byte + 2)
.aff7		9c 6d 06	stz $066d			stz 	SoundCommandBlock+4 		; default slide (2 bytes +4)
.affa		9c 6e 06	stz $066e			stz 	SoundCommandBlock+5
.affd		b1 30		lda ($30),y			lda 	(codePtr),y
.afff		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.b001		d0 0e		bne $b011			bne 	_SNDPlay
.b003		c8		iny				iny
.b004		20 d2 9e	jsr $9ed2			jsr 	Evaluate16BitIntegerSigned 	; Slide
.b007		b5 58		lda $58,x			lda 	NSMantissa0,x 				; Slide (2 bytes + 4)
.b009		8d 6d 06	sta $066d			sta 	SoundCommandBlock+4
.b00c		b5 60		lda $60,x			lda 	NSMantissa1,x
.b00e		8d 6e 06	sta $066e			sta 	SoundCommandBlock+5
.b011						_SNDPlay:
.b011		5a		phy				phy
.b012		a5 58		lda $58				lda 	NSMantissa0 				; channel.
.b014		09 10		ora #$10			ora 	#$10 						; 1x = Queue sound
.b016		a2 69		ldx #$69			ldx 	#(SoundCommandBlock & $FF)
.b018		a0 06		ldy #$06			ldy 	#(SoundCommandBlock >> 8)
.b01a		20 71 80	jsr $8071			jsr 	SNDCommand
.b01d		7a		ply				ply
.b01e		60		rts				rts
.b01f						_SndError:
.b01f		4c cb a0	jmp $a0cb			jmp 	RangeError
.0669						SoundCommandBlock:
>0669								.fill 	6

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/bytes.asm

.b022						StackPushByte:
.b022		48		pha				pha 								; save byte on stack
.b023		a5 34		lda $34				lda 	basicStack 					; decrement basic stack pointer
.b025		d0 08		bne $b02f			bne 	_SPBNoBorrow
.b027		c6 35		dec $35				dec 	basicStack+1 				; borrow
.b029		a5 35		lda $35				lda 	basicStack+1 				; check range.
.b02b		c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.b02d		90 06		bcc $b035			bcc 	_SPBMemory
.b02f						_SPBNoBorrow:
.b02f		c6 34		dec $34				dec 	basicStack
.b031		68		pla				pla 								; get back and write
.b032		92 34		sta ($34)			sta 	(basicStack)
.b034		60		rts				rts
.b035						_SPBMemory:
.b035		a9 12		lda #$12		lda	#18
.b037		4c fd 8f	jmp $8ffd		jmp	ErrorHandler
.b03a						StackPopByte:
.b03a		b2 34		lda ($34)			lda 	(basicStack) 				; bump the stack pointer.
.b03c		e6 34		inc $34				inc 	basicStack
.b03e		d0 02		bne $b042			bne 	_SPBNoCarry
.b040		e6 35		inc $35				inc 	basicStack+1
.b042						_SPBNoCarry:
.b042		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/frames.asm

.b043						StackOpen:
.b043		48		pha				pha 								; save frame byte
.b044		29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.b046		0a		asl a				asl 	a 							; claim twice this for storage
.b047		49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.b049		38		sec				sec 								; so basically subtracting from
.b04a		65 34		adc $34				adc 	basicStack 	 				; basicStack
.b04c		85 34		sta $34				sta 	basicStack
.b04e		b0 09		bcs $b059			bcs 	_SONoBorrow
>b050		db						.byte 	$DB 						; causes a break in the emulator
.b051		c6 35		dec $35				dec 	basicStack+1
.b053		a5 35		lda $35				lda 	basicStack+1 				; have we reached stack overflow
.b055		c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.b057		90 04		bcc $b05d			bcc 	_SOMemory
.b059						_SONoBorrow:
.b059		68		pla				pla 								; get marker back and write at TOS
.b05a		92 34		sta ($34)			sta 	(basicStack)
.b05c		60		rts				rts
.b05d						_SOMemory:
.b05d		a9 12		lda #$12		lda	#18
.b05f		4c fd 8f	jmp $8ffd		jmp	ErrorHandler
.b062						StackClose:
.b062		b2 34		lda ($34)			lda 	(basicStack) 				; get TOS marker
.b064		29 0f		and #$0f			and 	#$0F 						; bytes to add back
.b066		0a		asl a				asl 	a 							; claim twice this.
.b067		65 34		adc $34				adc 	basicStack 					; add to the stack pointer.
.b069		85 34		sta $34				sta 	basicStack
.b06b		90 02		bcc $b06f			bcc 	_SCExit
.b06d		e6 35		inc $35				inc 	basicStack+1
.b06f						_SCExit:
.b06f		60		rts				rts
.b070						StackCheckFrame:
.b070		48		pha				pha
.b071						_StackRemoveLocals:
.b071		b2 34		lda ($34)			lda 	(basicStack) 				; check for local, keep popping them
.b073		c9 03		cmp #$03			cmp 	#STK_LOCALS+1 				; is the frame a local ? S or N are 1/0
.b075		b0 05		bcs $b07c			bcs 	_SCNoLocal
.b077		20 8d 8a	jsr $8a8d			jsr 	LocalPopValue 				; restore the local value
.b07a		80 f5		bra $b071			bra 	_StackRemoveLocals 			; gr round again
.b07c						_SCNoLocal:
.b07c		68		pla				pla 								; get the frame check.
.b07d		52 34		eor ($34)			eor 	(basicStack) 				; xor with toS marker
.b07f		29 f0		and #$f0			and 	#$F0 						; check type bits
.b081		d0 01		bne $b084			bne 	_SCFError 					; different, we have structures mixed up
.b083		60		rts				rts
.b084						_SCFError:
.b084		8a		txa				txa 								; report error X
.b085		4c fd 8f	jmp $8ffd			jmp 	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/location.asm

.b088						STKSaveCodePosition:
.b088		5a		phy				phy
.b089		98		tya				tya 								; save Y
.b08a		a0 05		ldy #$05			ldy 	#5
.b08c		91 34		sta ($34),y			sta 	(basicStack),y
.b08e		88		dey				dey 								; save Code Pointer
.b08f						_STKSaveLoop:
.b08f		b9 2f 00	lda $002f,y			lda 	safePtr-1,y 				; allows us to access the pointer w/out issues.
.b092		91 34		sta ($34),y			sta 	(basicStack),y
.b094		88		dey				dey
.b095		d0 f8		bne $b08f			bne 	_STKSaveLoop
.b097		7a		ply				ply
.b098		60		rts				rts
.b099						STKLoadCodePosition:
.b099		a0 01		ldy #$01			ldy 	#1 							; load code pointer back
.b09b						_STKLoadLoop:
.b09b		b1 34		lda ($34),y			lda 	(basicStack),y
.b09d		99 2f 00	sta $002f,y			sta 	safePtr-1,y
.b0a0		c8		iny				iny
.b0a1		c0 05		cpy #$05			cpy 	#5
.b0a3		d0 f6		bne $b09b			bne 	_STKLoadLoop
.b0a5		b1 34		lda ($34),y			lda 	(basicStack),y 				; get Y offset
.b0a7		a8		tay				tay
.b0a8		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/setup.asm

.b0a9						StackReset:
.b0a9		a9 ff		lda #$ff			lda 	#((BasicStackBase+BasicStackSize-1) & $FF)
.b0ab		85 34		sta $34				sta 	0+basicStack
.b0ad		a9 0f		lda #$0f			lda 	#((BasicStackBase+BasicStackSize-1) >> 8)
.b0af		85 35		sta $35				sta 	1+basicStack
.b0b1		a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.b0b3		92 34		sta ($34)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.b0b5		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/concrete.asm

.b0b6						StringConcrete:
.b0b6		5a		phy				phy 								; save position on stack
.b0b7		20 37 9b	jsr $9b37			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.b0ba		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy target string to zTemp1
.b0bc		85 38		sta $38				sta 	zTemp1
.b0be		b5 60		lda $60,x			lda 	NSMantissa1,x
.b0c0		85 39		sta $39				sta 	zTemp1+1
.b0c2		a0 ff		ldy #$ff			ldy 	#$FF	 					; calculate string length
.b0c4						_SALength:
.b0c4		c8		iny				iny
.b0c5		b1 38		lda ($38),y			lda 	(zTemp1),y
.b0c7		d0 fb		bne $b0c4			bne 	_SALength
.b0c9		c0 fd		cpy #$fd			cpy 	#253 						; string too long - cannot concrete.
.b0cb		b0 3d		bcs $b10a			bcs 	_SALengthError
.b0cd		98		tya				tya 				 				; length of the new string
.b0ce		18		clc				clc
.b0cf		69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.b0d1		90 02		bcc $b0d5			bcc 	_SAHaveLength
.b0d3		a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.b0d5						_SAHaveLength:
.b0d5		48		pha				pha 								; save length.
.b0d6		38		sec				sec
.b0d7		49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.b0d9		6d 0e 04	adc $040e			adc 	stringMemory
.b0dc		8d 0e 04	sta $040e			sta 	stringMemory
.b0df		85 3a		sta $3a				sta 	zTemp2 						; update storage address
.b0e1		95 58		sta $58,x			sta 	NSMantissa0,x 				; update mantissa address
.b0e3		a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.b0e5		6d 0f 04	adc $040f			adc 	stringMemory+1
.b0e8		8d 0f 04	sta $040f			sta 	stringMemory+1
.b0eb		85 3b		sta $3b				sta 	zTemp2+1
.b0ed		95 60		sta $60,x			sta 	NSMantissa1,x
.b0ef		68		pla				pla 								; save length-3 (chars allowed) in first byte
.b0f0		38		sec				sec
.b0f1		e9 03		sbc #$03			sbc 	#3
.b0f3		92 3a		sta ($3a)			sta 	(zTemp2)
.b0f5		a9 00		lda #$00			lda 	#0 							; clear the status byte.
.b0f7		a0 01		ldy #$01			ldy 	#1
.b0f9		91 3a		sta ($3a),y			sta 	(zTemp2),y
.b0fb						_SACopyNewString:
.b0fb		a0 00		ldy #$00			ldy 	#0
.b0fd						_SACopyNSLoop:
.b0fd		b1 38		lda ($38),y			lda 	(zTemp1),y 					; get character
.b0ff		c8		iny				iny 								; write two on in string storage
.b100		c8		iny				iny
.b101		91 3a		sta ($3a),y			sta 	(zTemp2),y
.b103		88		dey				dey 								; this makes it one one.
.b104		c9 00		cmp #$00			cmp 	#0 							; until EOS copied
.b106		d0 f5		bne $b0fd			bne 	_SACopyNSLoop
.b108		7a		ply				ply
.b109		60		rts				rts
.b10a						_SALengthError:
.b10a		a9 09		lda #$09		lda	#9
.b10c		4c fd 8f	jmp $8ffd		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/stringalloc.asm

.b10f						StringSystemInitialise:
.b10f		a9 ff		lda #$ff			lda 	#((EndVariableSpace-1) & $FF)
.b111		8d 0e 04	sta $040e			sta 	0+stringMemory
.b114		a9 1f		lda #$1f			lda 	#((EndVariableSpace-1) >> 8)
.b116		8d 0f 04	sta $040f			sta 	1+stringMemory
.b119		9c ff 1f	stz $1fff			stz 	EndVariableSpace-1 			; put a zero at the end, so know end of string memory.
.b11c		60		rts				rts
.b11d						StringSpaceInitialise:
.b11d		20 37 9b	jsr $9b37			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.b120		a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.b122		8d 10 04	sta $0410			sta 	stringInitialised
.b125		ad 0e 04	lda $040e			lda 	stringMemory 				; allocate 256 bytes for one concreted string
.b128		8d 11 04	sta $0411			sta 	stringTempPointer 			; so temporary string space is allocated below that.
.b12b		ad 0f 04	lda $040f			lda 	stringMemory+1
.b12e		3a		dec a				dec 	a
.b12f		8d 12 04	sta $0412			sta 	stringTempPointer+1
.b132		60		rts				rts
.b133						StringTempAllocate:
.b133		c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.b135		b0 30		bcs $b167			bcs 	_STALength
.b137		2c 10 04	bit $0410			bit 	stringInitialised 			; already initialised
.b13a		30 05		bmi $b141			bmi 	_STAAllocate
.b13c		48		pha				pha 								; save value to subtract.
.b13d		20 1d b1	jsr $b11d			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.b140		68		pla				pla 								; restore it
.b141						_STAAllocate:
.b141		49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.b143		18		clc				clc  								; deliberate allows one more
.b144		6d 11 04	adc $0411			adc 	stringTempPointer 			; subtract from temp pointer
.b147		8d 11 04	sta $0411			sta 	stringTempPointer
.b14a		95 58		sta $58,x			sta 	NSMantissa0,x 				; address in mantissa
.b14c		85 3c		sta $3c				sta 	zsTemp 						; and zsTemp
.b14e		ad 12 04	lda $0412			lda 	stringTempPointer+1
.b151		69 ff		adc #$ff			adc 	#$FF
.b153		8d 12 04	sta $0412			sta 	stringTempPointer+1
.b156		85 3d		sta $3d				sta 	zsTemp+1
.b158		95 60		sta $60,x			sta 	NSMantissa1,x
.b15a		74 68		stz $68,x			stz 	NSMantissa2,x 				; set the typing data and the upper address bytes.
.b15c		74 70		stz $70,x			stz 	NSMantissa3,x
.b15e		a9 10		lda #$10			lda 	#NSTString
.b160		95 50		sta $50,x			sta 	NSStatus,x
.b162		a9 00		lda #$00			lda 	#0 							; clear the target string
.b164		92 3c		sta ($3c)			sta 	(zsTemp)
.b166		60		rts				rts
.b167						_STALength:
.b167		a9 09		lda #$09		lda	#9
.b169		4c fd 8f	jmp $8ffd		jmp	ErrorHandler
.b16c						StringTempWrite:
.b16c		48		pha				pha
.b16d		92 3c		sta ($3c)			sta 	(zsTemp) 					; write byte
.b16f		e6 3c		inc $3c				inc 	zsTemp 						; bump pointer
.b171		d0 02		bne $b175			bne 	_STWNoCarry
.b173		e6 3d		inc $3d				inc 	zsTemp+1
.b175						_STWNoCarry:
.b175		a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.b177		92 3c		sta ($3c)			sta 	(zsTemp)
.b179		68		pla				pla
.b17a		60		rts				rts

;******  Return to file: _basic.asm

.b17b						StartModuleCode:

;******  Processing file: ../modules/_build/_hardware.module

=1						hardwareIntegrated=1
=0						CONBlack = 0
=1						CONGrey = 1
=2						CONDarkBlue = 2
=3						CONGreen = 3
=4						CONPurple = 4
=5						CONBrown = 5
=6						CONOrange = 6
=7						CONCyan = 7
=8						CONDarkGrey = 8
=9						CONLightGrey = 9
=10						CONLightBlue = 10
=11						CONLightGreen = 11
=12						CONPink = 12
=13						CONRed = 13
=14						CONYellow = 14
=15						CONWhite = 15
=9						CONForeground = CONLightGrey
=2						CONBackground = CONDarkBlue
=9						CLICommandLine = CONLightGrey
=5						CLIFComment = CONBrown
=14						CLIBComment = CONYellow
=13						CLILineNumber = CONRed
=6						CLIToken = CONOrange
=7						CLIConstant = CONCyan
=14						CLIIdentifier = CONYellow
=12						CLIPunctuation = CONPink
=15						CLIData = CONWhite
.c000	a000					Export_EXTPrintCharacter:
.c000	a000					PAGEDPrintCharacter:
.c000	a000	48		pha				pha
.c001	a001	da		phx				phx
.c002	a002	5a		phy				phy
.c003	a003	a6 01		ldx $01				ldx 	1
.c005	a005	da		phx				phx
.c006	a006	ac 70 06	ldy $0670			ldy 	EXTColumn 					; Y = Row, e.g. points to character.
.c009	a009	09 00		ora #$00			ora 	#$00 						; check $80-$FF
.c00b	a00b	30 48		bmi $a055			bmi 	_EXPCColour
.c00d	a00d	c9 20		cmp #$20			cmp 	#$20 						; check $00-$1F
.c00f	a00f	90 4d		bcc $a05e			bcc 	_EXPCControl
.c011	a011	a2 02		ldx #$02			ldx 	#2 							; select char memory
.c013	a013	86 01		stx $01				stx 	1
.c015	a015	91 40		sta ($40),y			sta 	(EXTAddress),y
.c017	a017	e6 01		inc $01				inc 	1 							; select colour memory
.c019	a019	ad 71 06	lda $0671			lda 	EXTTextColour
.c01c	a01c	91 40		sta ($40),y			sta 	(EXTAddress),y
.c01e	a01e	c8		iny				iny 								; advance horizontal position
.c01f	a01f	8c 70 06	sty $0670			sty 	EXTColumn
.c022	a022	cc 72 06	cpy $0672			cpy 	EXTScreenWidth 				; reached RHS ?
.c025	a025	90 63		bcc $a08a			bcc 	_EXPCExit 					; no, then exit.
.c027	a027					_EXPCCRLF:
.c027	a027	ee 6f 06	inc $066f			inc 	EXTRow  					; bump row
.c02a	a02a	9c 70 06	stz $0670			stz 	EXTColumn 					; back to column 0
.c02d	a02d	ad 6f 06	lda $066f			lda 	EXTRow 						; check if reached the bottom ?
.c030	a030	cd 73 06	cmp $0673			cmp 	EXTScreenHeight 			; if so, then scroll.
.c033	a033	f0 18		beq $a04d			beq 	_EXPCScroll
.c035	a035	18		clc				clc 								; add width to address.
.c036	a036	a5 40		lda $40				lda 	EXTAddress
.c038	a038	6d 72 06	adc $0672			adc 	EXTScreenWidth
.c03b	a03b	85 40		sta $40				sta 	EXTAddress
.c03d	a03d	90 4b		bcc $a08a			bcc 	_EXPCExit
.c03f	a03f	e6 41		inc $41				inc 	EXTAddress+1
.c041	a041	80 47		bra $a08a			bra 	_EXPCExit
.c043	a043					_EXPCLeft:
.c043	a043	ce 70 06	dec $0670			dec 	EXTColumn
.c046	a046	10 42		bpl $a08a			bpl 	_EXPCExit
.c048	a048					_EXPCBegin:
.c048	a048	9c 70 06	stz $0670			stz 	EXTColumn
.c04b	a04b	80 3d		bra $a08a			bra 	_EXPCExit
.c04d	a04d					_EXPCScroll:
.c04d	a04d	ce 6f 06	dec $066f			dec 	EXTRow 						; the height-1 th line.
.c050	a050	20 3b a1	jsr $a13b			jsr 	EXTScreenScroll 			; scroll the screen
.c053	a053	80 35		bra $a08a			bra 	_EXPCExit
.c055	a055					_EXPCColour:
.c055	a055	c9 a0		cmp #$a0			cmp 	#$A0						; 80-9F set foreground/background
.c057	a057	b0 31		bcs $a08a			bcs 	_EXPCExit
.c059	a059	20 1b a1	jsr $a11b			jsr 	_EXPCHandleColour
.c05c	a05c	80 2c		bra $a08a			bra 	_EXPCExit
.c05e	a05e					_EXPCControl:
.c05e	a05e	c9 11		cmp #$11			cmp 	#$11 						; only handle 00-10.
.c060	a060	b0 28		bcs $a08a			bcs 	_EXPCExit
.c062	a062	0a		asl a				asl 	a 							; double into X
.c063	a063	aa		tax				tax
.c064	a064	7c f9 a0	jmp ($a0f9,x)			jmp 	(_EXPCActionTable,x) 		; and execute code.
.c067	a067					_EXPCUp:
.c067	a067	ad 6f 06	lda $066f			lda 	EXTRow 						; already at top ?
.c06a	a06a	f0 1e		beq $a08a			beq 	_EXPCExit
.c06c	a06c	ce 6f 06	dec $066f			dec 	EXTRow 						; up one in position/address
.c06f	a06f	38		sec				sec
.c070	a070	a5 40		lda $40				lda 	EXTAddress
.c072	a072	ed 72 06	sbc $0672			sbc 	EXTScreenWidth
.c075	a075	85 40		sta $40				sta 	EXTAddress
.c077	a077	b0 11		bcs $a08a			bcs 	_EXPCExit
.c079	a079	c6 41		dec $41				dec 	EXTAddress+1
.c07b	a07b	80 0d		bra $a08a			bra 	_EXPCExit
.c07d	a07d					_EXPCRight:
.c07d	a07d	c8		iny				iny
.c07e	a07e	8c 70 06	sty $0670			sty 	EXTColumn
.c081	a081	cc 72 06	cpy $0672			cpy 	EXTScreenWidth
.c084	a084	d0 04		bne $a08a			bne 	_EXPCExit
.c086	a086	88		dey				dey
.c087	a087					_EXPCSetColumnY:
.c087	a087	8c 70 06	sty $0670			sty 	EXTColumn
.c08a	a08a					_EXPCExit:
.c08a	a08a	20 b0 a1	jsr $a1b0			jsr 	EXTSetHardwareCursor 		; place the physical cursor.
.c08d	a08d	68		pla				pla
.c08e	a08e	85 01		sta $01				sta 	1
.c090	a090	7a		ply				ply
.c091	a091	fa		plx				plx
.c092	a092	68		pla				pla
.c093	a093	60		rts				rts
.c094	a094					_EXPCClearScreen:
.c094	a094	20 6d a1	jsr $a16d			jsr		EXTClearScreenCode
.c097	a097	80 f1		bra $a08a			bra 	_EXPCExit
.c099	a099					_EXPCDown:
.c099	a099	ad 73 06	lda $0673			lda 	EXTScreenHeight 			; at the bottom
.c09c	a09c	3a		dec a				dec 	a
.c09d	a09d	cd 6f 06	cmp $066f			cmp 	EXTRow
.c0a0	a0a0	f0 e8		beq $a08a			beq 	_EXPCExit
.c0a2	a0a2	ee 6f 06	inc $066f			inc 	EXTRow 						; down one in position/address
.c0a5	a0a5	18		clc				clc
.c0a6	a0a6	a5 40		lda $40				lda 	EXTAddress
.c0a8	a0a8	6d 72 06	adc $0672			adc 	EXTScreenWidth
.c0ab	a0ab	85 40		sta $40				sta 	EXTAddress
.c0ad	a0ad	90 db		bcc $a08a			bcc 	_EXPCExit
.c0af	a0af	e6 41		inc $41				inc 	EXTAddress+1
.c0b1	a0b1	80 d7		bra $a08a			bra 	_EXPCExit
.c0b3	a0b3					_EXPCTab:
.c0b3	a0b3	ad 70 06	lda $0670			lda 	EXTColumn 					; next tab stop
.c0b6	a0b6	29 f8		and #$f8			and 	#$F8
.c0b8	a0b8	18		clc				clc
.c0b9	a0b9	69 08		adc #$08			adc 	#8
.c0bb	a0bb	8d 70 06	sta $0670			sta 	EXTColumn
.c0be	a0be	cd 72 06	cmp $0672			cmp 	EXTScreenWidth 				; too far, stick end of line.
.c0c1	a0c1	90 c7		bcc $a08a			bcc 	_EXPCExit
.c0c3	a0c3	80 10		bra $a0d5			bra 	_EXPCEnd
.c0c5	a0c5					_EXPCBackSpace:
.c0c5	a0c5	88		dey				dey
.c0c6	a0c6	30 c2		bmi $a08a			bmi 	_EXPCExit
.c0c8	a0c8	ce 70 06	dec $0670			dec 	EXTColumn
.c0cb	a0cb	a9 02		lda #$02			lda 	#2
.c0cd	a0cd	85 01		sta $01				sta 	1
.c0cf	a0cf	a9 20		lda #$20			lda 	#32
.c0d1	a0d1	91 40		sta ($40),y			sta 	(EXTAddress),y
.c0d3	a0d3	80 b5		bra $a08a			bra 	_EXPCExit
.c0d5	a0d5					_EXPCEnd:
.c0d5	a0d5	a9 02		lda #$02			lda 	#2 							; access text screen
.c0d7	a0d7	85 01		sta $01				sta 	1
.c0d9	a0d9	ac 72 06	ldy $0672			ldy 	EXTScreenWidth 				; point to last character
.c0dc	a0dc	88		dey				dey
.c0dd	a0dd					_EXPCEndSearch:
.c0dd	a0dd	88		dey				dey 								; if past start, move to col 0.
.c0de	a0de	30 06		bmi $a0e6			bmi 	_EXPCFound
.c0e0	a0e0	b1 40		lda ($40),y			lda 	(EXTAddress),y 				; keep going back till non space found
.c0e2	a0e2	c9 20		cmp #$20			cmp 	#' '
.c0e4	a0e4	f0 f7		beq $a0dd			beq 	_EXPCEndSearch
.c0e6	a0e6					_EXPCFound:
.c0e6	a0e6	c8		iny				iny 								; move to following cell.
.c0e7	a0e7	80 9e		bra $a087			bra 	_EXPCSetColumnY
.c0e9	a0e9					_EXPCClearEOL:
.c0e9	a0e9	a9 02		lda #$02			lda 	#2 							; access character RAM
.c0eb	a0eb	85 01		sta $01				sta 	1
.c0ed	a0ed	a9 20		lda #$20			lda 	#' ' 						; write space
.c0ef	a0ef	91 40		sta ($40),y			sta 	(EXTAddress),y
.c0f1	a0f1	c8		iny				iny
.c0f2	a0f2	cc 72 06	cpy $0672			cpy 	EXTScreenWidth 				; until RHS of screen.
.c0f5	a0f5	90 f2		bcc $a0e9			bcc 	_EXPCClearEOL
.c0f7	a0f7	80 91		bra $a08a			bra 	_EXPCExit
.c0f9	a0f9					_EXPCActionTable:
>c0f9	a0f9	8a a0						.word 	_EXPCExit 					; 00
>c0fb	a0fb	48 a0						.word 	_EXPCBegin 					; 01 A Start of Line
>c0fd	a0fd	43 a0						.word 	_EXPCLeft 					; 02 B Left
>c0ff	a0ff	8a a0						.word 	_EXPCExit 					; 03 <Break>
>c101	a101	8a a0						.word 	_EXPCExit 					; 04
>c103	a103	d5 a0						.word 	_EXPCEnd 					; 05 E End of Line
>c105	a105	7d a0						.word 	_EXPCRight 					; 06 F Right
>c107	a107	8a a0						.word 	_EXPCExit 					; 07
>c109	a109	c5 a0						.word 	_EXPCBackSpace 				; 08 H Backspace
>c10b	a10b	b3 a0						.word 	_EXPCTab 					; 09 I Tab
>c10d	a10d	8a a0						.word 	_EXPCExit 					; 0A
>c10f	a10f	e9 a0						.word 	_EXPCClearEOL 				; 0B K Clear to EOL
>c111	a111	94 a0						.word 	_EXPCClearScreen			; 0C L CLS
>c113	a113	27 a0						.word 	_EXPCCRLF 					; 0D M CR/LF
>c115	a115	99 a0						.word 	_EXPCDown 					; 0E N Down
>c117	a117	8a a0						.word 	_EXPCExit 					; 0F
>c119	a119	67 a0						.word 	_EXPCUp 					; 10 P Up
.c11b	a11b					_EXPCHandleColour
.c11b	a11b	c9 90		cmp #$90			cmp 	#$90 						; 8x foreground 9x background
.c11d	a11d	b0 16		bcs $a135			bcs 	_EXPCBackground
.c11f	a11f	0a		asl a				asl 	a 							; shift it 4 bits to the right.
.c120	a120	0a		asl a				asl 	a
.c121	a121	0a		asl a				asl 	a
.c122	a122	0a		asl a				asl 	a
.c123	a123	a2 0f		ldx #$0f			ldx 	#$0F 						; Mask in X
.c125	a125					_EXPCUpdate:
.c125	a125	48		pha				pha 								; save new colour
.c126	a126	8a		txa				txa 								; get mask
.c127	a127	2d 71 06	and $0671			and 	EXTTextColour 				; mask out old.
.c12a	a12a	8d 71 06	sta $0671			sta 	EXTTextColour
.c12d	a12d	68		pla				pla 								; or in new colour
.c12e	a12e	0d 71 06	ora $0671			ora 	EXTTextColour
.c131	a131	8d 71 06	sta $0671			sta 	EXTTextColour
.c134	a134	60		rts				rts
.c135	a135					_EXPCBackground:
.c135	a135	29 0f		and #$0f			and 	#$0F 						; get the colour
.c137	a137	a2 f0		ldx #$f0			ldx 	#$F0 						; mask
.c139	a139	80 ea		bra $a125			bra 	_EXPCUpdate
.c13b	a13b					EXTScreenScroll:
.c13b	a13b	a9 02		lda #$02			lda 	#2 							; select text page
.c13d	a13d	85 01		sta $01				sta 	1
.c13f	a13f	a9 20		lda #$20			lda		#32 						; fill with space
.c141	a141	20 76 a2	jsr $a276			jsr 	EXTScrollFill
.c144	a144	e6 01		inc $01				inc 	1 							; select colour page
.c146	a146	ad 71 06	lda $0671			lda 	EXTTextColour
.c149	a149	20 76 a2	jsr $a276			jsr 	EXTScrollFill
.c14c	a14c	60		rts				rts
.c14d	a14d					PAGEDPrintHex:
.c14d	a14d	48		pha				pha
.c14e	a14e	a9 20		lda #$20			lda 	#' '
.c150	a150	20 00 a0	jsr $a000			jsr 	PAGEDPrintCharacter
.c153	a153	68		pla				pla
.c154	a154	48		pha				pha
.c155	a155	4a		lsr a				lsr 	a
.c156	a156	4a		lsr a				lsr 	a
.c157	a157	4a		lsr a				lsr 	a
.c158	a158	4a		lsr a				lsr 	a
.c159	a159	20 5d a1	jsr $a15d			jsr 	_PPHNibble
.c15c	a15c	68		pla				pla
.c15d	a15d					_PPHNibble:
.c15d	a15d	48		pha				pha
.c15e	a15e	29 0f		and #$0f			and 	#15
.c160	a160	c9 0a		cmp #$0a			cmp 	#10
.c162	a162	90 02		bcc $a166			bcc 	_PPHOut
.c164	a164	69 06		adc #$06			adc 	#6
.c166	a166	69 30		adc #$30	_PPHOut:adc 	#48
.c168	a168	20 00 a0	jsr $a000			jsr		PAGEDPrintCharacter
.c16b	a16b	68		pla				pla
.c16c	a16c	60		rts				rts
.c16d	a16d					EXTClearScreenCode:
.c16d	a16d	a9 02		lda #$02			lda 	#2 							; select text page
.c16f	a16f	85 01		sta $01				sta 	1
.c171	a171	a9 20		lda #$20			lda		#32 						; fill with space
.c173	a173	20 80 a1	jsr $a180			jsr 	_EXTCSFill
.c176	a176	e6 01		inc $01				inc 	1 							; select colour page
.c178	a178	ad 71 06	lda $0671			lda 	EXTTextColour
.c17b	a17b	20 80 a1	jsr $a180			jsr 	_EXTCSFill
.c17e	a17e	80 22		bra $a1a2			bra 	EXTHomeCursor
.c180	a180					_EXTCSFill:
.c180	a180	aa		tax				tax
.c181	a181	a9 00		lda #$00			lda 	#EXTMemory & $FF
.c183	a183	85 40		sta $40				sta 	EXTAddress
.c185	a185	a9 c0		lda #$c0			lda 	#EXTMemory >> 8
.c187	a187	85 41		sta $41				sta 	EXTAddress+1
.c189	a189					_EXTCSFill1:
.c189	a189	a0 00		ldy #$00			ldy 	#0
.c18b	a18b	8a		txa				txa
.c18c	a18c					_EXTCSFill2:
.c18c	a18c	91 40		sta ($40),y			sta 	(EXTAddress),y
.c18e	a18e	c8		iny				iny
.c18f	a18f	d0 fb		bne $a18c			bne 	_EXTCSFill2
.c191	a191	e6 41		inc $41				inc 	EXTAddress+1
.c193	a193	a5 41		lda $41				lda 	EXTAddress+1
.c195	a195	c9 d2		cmp #$d2			cmp 	#$D2
.c197	a197	d0 f0		bne $a189			bne 	_EXTCSFill1
.c199	a199	8a		txa				txa
.c19a	a19a					_EXTCSFill3:
.c19a	a19a	91 40		sta ($40),y			sta 	(EXTAddress),y
.c19c	a19c	c8		iny				iny
.c19d	a19d	c0 c0		cpy #$c0			cpy 	#$C0
.c19f	a19f	d0 f9		bne $a19a			bne 	_EXTCSFill3
.c1a1	a1a1	60		rts				rts
.c1a2	a1a2					EXTHomeCursor:
.c1a2	a1a2	9c 6f 06	stz $066f			stz 	EXTRow 						; reset row & column
.c1a5	a1a5	9c 70 06	stz $0670			stz 	EXTColumn
.c1a8	a1a8	a9 00		lda #$00			lda 	#EXTMemory & $FF 			; set address
.c1aa	a1aa	85 40		sta $40				sta 	EXTAddress
.c1ac	a1ac	a9 c0		lda #$c0			lda 	#EXTMemory >> 8
.c1ae	a1ae	85 41		sta $41				sta 	EXTAddress+1
.c1b0	a1b0					EXTSetHardwareCursor:
.c1b0	a1b0	64 01		stz $01				stz 	1 							; I/O Page zero
.c1b2	a1b2	a9 05		lda #$05			lda 	#1+4 						; enable cursor
.c1b4	a1b4	8d 10 d0	sta $d010			sta 	$D010
.c1b7	a1b7	a9 b3		lda #$b3			lda 	#179
.c1b9	a1b9	8d 12 d0	sta $d012			sta 	$D012
.c1bc	a1bc	ad 70 06	lda $0670			lda 	EXTColumn
.c1bf	a1bf	8d 14 d0	sta $d014			sta 	$D014 						; set cursor position
.c1c2	a1c2	9c 15 d0	stz $d015			stz 	$D015
.c1c5	a1c5	ad 6f 06	lda $066f			lda 	EXTRow
.c1c8	a1c8	8d 16 d0	sta $d016			sta 	$D016
.c1cb	a1cb	9c 17 d0	stz $d017			stz 	$D017
.c1ce	a1ce	60		rts				rts
.c1cf	a1cf					Export_EXTInputLine:
.c1cf	a1cf	48		pha				pha
.c1d0	a1d0	da		phx				phx
.c1d1	a1d1	5a		phy				phy
.c1d2	a1d2	a5 01		lda $01				lda 	1 							; save I/O page
.c1d4	a1d4	48		pha				pha
.c1d5	a1d5					_EILLoop:
.c1d5	a1d5	20 d9 bb	jsr $bbd9			jsr 	PagedInputSingleCharacter
.c1d8	a1d8	c9 0d		cmp #$0d			cmp 	#13 						; scrape line if exit.
.c1da	a1da	f0 44		beq $a220			beq 	_EILExit
.c1dc	a1dc	c9 04		cmp #$04			cmp 	#4 							; Ctrl+D delete at cursor
.c1de	a1de	f0 2a		beq $a20a			beq 	_EILDelete
.c1e0	a1e0	c9 08		cmp #$08			cmp 	#8 							; Ctrl+H backspace
.c1e2	a1e2	f0 1c		beq $a200			beq 	_EILBackspace
.c1e4	a1e4	c9 20		cmp #$20			cmp 	#' '						; < space, print it
.c1e6	a1e6	90 12		bcc $a1fa			bcc 	_EILPrintLoop
.c1e8	a1e8	c9 7f		cmp #$7f			cmp 	#$7F 						; if -ve print it
.c1ea	a1ea	b0 0e		bcs $a1fa			bcs 	_EILPrintLoop
.c1ec	a1ec	48		pha				pha 								; save character
.c1ed	a1ed	a9 02		lda #$02			lda 	#2  						; insert a space
.c1ef	a1ef	85 01		sta $01				sta 	1
.c1f1	a1f1	20 64 a2	jsr $a264			jsr 	EXTILInsert 				; insert in text screen
.c1f4	a1f4	e6 01		inc $01				inc 	1
.c1f6	a1f6	20 64 a2	jsr $a264			jsr 	EXTILInsert 				; insert in colour screen
.c1f9	a1f9	68		pla				pla 								; get character back.
.c1fa	a1fa					_EILPrintLoop:
.c1fa	a1fa	20 00 a0	jsr $a000			jsr 	PAGEDPrintCharacter
.c1fd	a1fd	80 d6		bra $a1d5			bra 	_EILLoop
.c1ff	a1ff	60		rts				rts
.c200	a200					_EILBackspace:
.c200	a200	ad 70 06	lda $0670			lda 	EXTColumn					; can we backspace ?
.c203	a203	f0 d0		beq $a1d5			beq 	_EILLoop
.c205	a205	a9 02		lda #$02			lda 	#2 							; move cursor left
.c207	a207	20 00 a0	jsr $a000			jsr 	PAGEDPrintCharacter
.c20a	a20a					_EILDelete
.c20a	a20a	a9 02		lda #$02			lda 	#2 							; text block
.c20c	a20c	85 01		sta $01				sta 	1
.c20e	a20e	a9 20		lda #$20			lda 	#' ' 						; backspace text.
.c210	a210	20 4f a2	jsr $a24f			jsr 	EXTILDelete
.c213	a213	e6 01		inc $01				inc 	1 							; colour block
.c215	a215	ac 70 06	ldy $0670			ldy 	EXTColumn 					; get attribute of last character
.c218	a218	88		dey				dey
.c219	a219	b1 40		lda ($40),y			lda 	(EXTAddress),y
.c21b	a21b	20 4f a2	jsr $a24f			jsr 	EXTILDelete 				; backspace attribute
.c21e	a21e	80 b5		bra $a1d5			bra 	_EILLoop 					; and go round.
.c220	a220					_EILExit:
.c220	a220	a9 02		lda #$02			lda 	#2 							; switch to page 2
.c222	a222	85 01		sta $01				sta 	1
.c224	a224	a0 00		ldy #$00			ldy 	#0 							; copy current line into buffer.
.c226	a226					_EILScrapeLine:
.c226	a226	b1 40		lda ($40),y			lda 	(EXTAddress),y
.c228	a228	99 2a 05	sta $052a,y			sta 	lineBuffer,y
.c22b	a22b	c8		iny				iny
.c22c	a22c	cc 72 06	cpy $0672			cpy 	EXTScreenWidth
.c22f	a22f	d0 f5		bne $a226			bne 	_EILScrapeLine
.c231	a231					_EILTrimSpaces:
.c231	a231	88		dey				dey
.c232	a232	c0 ff		cpy #$ff			cpy 	#$FF 						; back past the start
.c234	a234	f0 07		beq $a23d			beq 	_EILEndTrim		 			; zero the input line.
.c236	a236	b9 2a 05	lda $052a,y			lda 	lineBuffer,y
.c239	a239	c9 20		cmp #$20			cmp 	#' '
.c23b	a23b	f0 f4		beq $a231			beq 	_EILTrimSpaces 				; if fail this found non space character
.c23d	a23d					_EILEndTrim:
.c23d	a23d	c8		iny				iny 								; trim after non space character.
.c23e	a23e	a9 00		lda #$00			lda 	#0 							; trim here.
.c240	a240	99 2a 05	sta $052a,y			sta 	lineBuffer,y
.c243	a243	a9 0d		lda #$0d			lda 	#13 						; echo the RETURN
.c245	a245	20 00 a0	jsr $a000			jsr 	PAGEDPrintCharacter
.c248	a248	68		pla				pla 								; reset I/O page
.c249	a249	85 01		sta $01				sta 	1
.c24b	a24b	7a		ply				ply
.c24c	a24c	fa		plx				plx
.c24d	a24d	68		pla				pla
.c24e	a24e	60		rts				rts
.c24f	a24f					EXTILDelete:
.c24f	a24f	48		pha				pha 								; save the new character
.c250	a250	ac 70 06	ldy $0670			ldy 	EXTColumn 					; start copying from here.
.c253	a253					_EXTDLoop:
.c253	a253	c8		iny				iny 								; copy one byte down.
.c254	a254	b1 40		lda ($40),y			lda 	(EXTAddress),y
.c256	a256	88		dey				dey
.c257	a257	91 40		sta ($40),y			sta 	(EXTAddress),y
.c259	a259	c8		iny				iny 								; do till end of line.
.c25a	a25a	cc 72 06	cpy $0672			cpy 	EXTScreenWidth
.c25d	a25d	90 f4		bcc $a253			bcc 	_EXTDLoop
.c25f	a25f	88		dey				dey 	 							; write in last slot.
.c260	a260	68		pla				pla
.c261	a261	91 40		sta ($40),y			sta 	(EXTAddress),y
.c263	a263	60		rts				rts
.c264	a264					EXTILInsert:
.c264	a264	ac 72 06	ldy $0672			ldy 	EXTScreenWidth 				; end position
.c267	a267					_EXTILoop:
.c267	a267	88		dey				dey 								; back one
.c268	a268	cc 70 06	cpy $0670			cpy 	EXTColumn 					; exit if reached insert point.
.c26b	a26b	f0 08		beq $a275			beq 	_EXTIExit
.c26d	a26d	88		dey				dey 								; copy one byte up.
.c26e	a26e	b1 40		lda ($40),y			lda 	(EXTAddress),y
.c270	a270	c8		iny				iny
.c271	a271	91 40		sta ($40),y			sta 	(EXTAddress),y
.c273	a273	80 f2		bra $a267			bra 	_EXTILoop
.c275	a275					_EXTIExit:
.c275	a275	60		rts				rts
.c276	a276					EXTScrollFill:
.c276	a276	aa		tax				tax									; save value to fill with
.c277	a277	a5 36		lda $36				lda 	zTemp0 						; save zTemp0 (dest) zTemp1 (src)
.c279	a279	48		pha				pha
.c27a	a27a	a5 37		lda $37				lda 	zTemp0+1
.c27c	a27c	48		pha				pha
.c27d	a27d	a5 38		lda $38				lda 	zTemp1
.c27f	a27f	48		pha				pha
.c280	a280	a5 39		lda $39				lda 	zTemp1+1
.c282	a282	48		pha				pha
.c283	a283	a9 c0		lda #$c0			lda 	#$C0 						; copy from C000+length to C000
.c285	a285	85 37		sta $37				sta 	zTemp0+1
.c287	a287	85 39		sta $39				sta 	zTemp1+1
.c289	a289	64 36		stz $36				stz 	zTemp0
.c28b	a28b	ad 72 06	lda $0672			lda 	EXTScreenWidth
.c28e	a28e	85 38		sta $38				sta 	zTemp1
.c290	a290	a0 00		ldy #$00			ldy 	#0
.c292	a292					_EXSFCopy1:
.c292	a292	b1 38		lda ($38),y			lda 	(zTemp1),y
.c294	a294	91 36		sta ($36),y			sta 	(zTemp0),y
.c296	a296	c8		iny				iny
.c297	a297	d0 f9		bne $a292			bne 	_EXSFCopy1
.c299	a299	e6 37		inc $37				inc 	zTemp0+1 					; next page
.c29b	a29b	e6 39		inc $39				inc 	zTemp1+1
.c29d	a29d	a5 39		lda $39				lda 	zTemp1+1
.c29f	a29f	c9 d3		cmp #$d3			cmp 	#$D3
.c2a1	a2a1	d0 ef		bne $a292			bne 	_EXSFCopy1
.c2a3	a2a3	ac 72 06	ldy $0672			ldy 	EXTScreenWidth 				; blank the bottom line.
.c2a6	a2a6	8a		txa				txa
.c2a7	a2a7					_EXSFFill1:
.c2a7	a2a7	88		dey				dey
.c2a8	a2a8	91 40		sta ($40),y			sta 	(EXTAddress),y
.c2aa	a2aa	c0 00		cpy #$00			cpy 	#0
.c2ac	a2ac	10 f9		bpl $a2a7			bpl 	_EXSFFill1
.c2ae	a2ae	68		pla				pla
.c2af	a2af	85 39		sta $39				sta 	zTemp1+1
.c2b1	a2b1	68		pla				pla
.c2b2	a2b2	85 38		sta $38				sta 	zTemp1
.c2b4	a2b4	68		pla				pla
.c2b5	a2b5	85 37		sta $37				sta 	zTemp0+1
.c2b7	a2b7	68		pla				pla
.c2b8	a2b8	85 36		sta $36				sta 	zTemp0
.c2ba	a2ba	60		rts				rts
=$c000						EXTMemory = $C000
=$02						EXTTextPage = $02
=$03						EXTColourPage = $03
=1						EXTDummySpace = 1 							; fake-space for CR character.
=0						EXTCBlack = 0
.066f						EXTRow:
>066f								.fill 	1
.0670						EXTColumn:
>0670								.fill 	1
.0671						EXTTextColour:
>0671								.fill 	1
.0672						EXTScreenWidth:
>0672								.fill 	1
.0673						EXTScreenHeight:
>0673								.fill 	1
.0040						EXTAddress:
>0040								.fill 	2
.c2bb	a2bb					Export_EXTInitialise:
.c2bb	a2bb	64 01		stz $01				stz 	1 							; Access I/O page 0
.c2bd	a2bd	9c 04 d0	stz $d004			stz 	$D004 						; Disable border
.c2c0	a2c0	9c 08 d0	stz $d008			stz 	$D008
.c2c3	a2c3	9c 09 d0	stz $d009			stz 	$D009
.c2c6	a2c6	a9 09		lda #$09			lda 	#1+8						; Timer On at 70Hz counting up.
.c2c8	a2c8	8d 58 d6	sta $d658			sta 	$D658
.c2cb	a2cb	a9 52		lda #$52			lda 	#$52
.c2cd	a2cd	8d 71 06	sta $0671			sta 	EXTTextColour
.c2d0	a2d0	a9 50		lda #$50			lda 	#80 						; set screen dimensions.
.c2d2	a2d2	8d 72 06	sta $0672			sta 	EXTScreenWidth
.c2d5	a2d5	a9 3c		lda #$3c			lda 	#60
.c2d7	a2d7	8d 73 06	sta $0673			sta 	EXTScreenHeight
.c2da	a2da	20 6d a1	jsr $a16d			jsr 	EXTClearScreenCode 			; clear the screen
.c2dd	a2dd					_EXMoveDown:
.c2dd	a2dd	a9 0d		lda #$0d			lda 	#13
.c2df	a2df	20 00 a0	jsr $a000			jsr 	PAGEDPrintCharacter
.c2e2	a2e2	ad 6f 06	lda $066f			lda 	EXTRow
.c2e5	a2e5	c9 0f		cmp #$0f			cmp 	#Header_Height+1
.c2e7	a2e7	d0 f4		bne $a2dd			bne 	_EXMoveDown
.c2e9	a2e9	20 ef a2	jsr $a2ef			jsr 	EXTShowHeader
.c2ec	a2ec	64 01		stz $01				stz 	1
.c2ee	a2ee	60		rts				rts
.c2ef	a2ef					EXTShowHeader:
.c2ef	a2ef	a5 01		lda $01				lda 	1
.c2f1	a2f1	48		pha				pha
.c2f2	a2f2	a9 02		lda #$02			lda 	#2
.c2f4	a2f4	a2 f4		ldx #$f4			ldx 	#(Header_chars & $FF)
.c2f6	a2f6	a0 a4		ldy #$a4			ldy 	#(Header_chars >> 8)
.c2f8	a2f8	20 16 a3	jsr $a316			jsr 	_ESHCopyBlock
.c2fb	a2fb	a9 03		lda #$03			lda 	#3
.c2fd	a2fd	a2 5c		ldx #$5c			ldx 	#(Header_attrs & $FF)
.c2ff	a2ff	a0 a3		ldy #$a3			ldy 	#(Header_attrs >> 8)
.c301	a301	20 16 a3	jsr $a316			jsr 	_ESHCopyBlock
.c304	a304	64 01		stz $01				stz 	1
.c306	a306	a2 3f		ldx #$3f			ldx 	#16*4-1
.c308	a308					_EXTCopyLUT:
.c308	a308	bd 24 a7	lda $a724,x			lda 	Header_Palette,x
.c30b	a30b	9d 00 d8	sta $d800,x			sta 	$D800,x
.c30e	a30e	9d 40 d8	sta $d840,x			sta 	$D840,x
.c311	a311	ca		dex				dex
.c312	a312	10 f4		bpl $a308			bpl 	_EXTCopyLUT
.c314	a314	68		pla				pla
.c315	a315	60		rts				rts
.c316	a316					_ESHCopyBlock:
.c316	a316	85 01		sta $01				sta 	1
.c318	a318	86 36		stx $36				stx 	zTemp0 						; zTemp0 is RLE packed data
.c31a	a31a	84 37		sty $37				sty 	zTemp0+1
.c31c	a31c	a9 00		lda #$00			lda 	#(($C000) & $FF)
.c31e	a31e	85 38		sta $38				sta 	0+zTemp1
.c320	a320	a9 c0		lda #$c0			lda 	#(($C000) >> 8)
.c322	a322	85 39		sta $39				sta 	1+zTemp1
.c324	a324					_ESHCopyLoop:
.c324	a324	b2 36		lda ($36)			lda 	(zTemp0) 					; get next character
.c326	a326	c9 ff		cmp #$ff			cmp 	#Header_RLE 				; packed ?
.c328	a328	f0 1b		beq $a345			beq 	_ESHUnpack
.c32a	a32a	92 38		sta ($38)			sta 	(zTemp1) 					; copy it out.
.c32c	a32c	a9 01		lda #$01			lda 	#1 							; source add 1
.c32e	a32e	a0 01		ldy #$01			ldy 	#1 							; dest add 1
.c330	a330					_ESHNext:
.c330	a330	18		clc				clc 								; zTemp0 + A
.c331	a331	65 36		adc $36				adc 	zTemp0
.c333	a333	85 36		sta $36				sta 	zTemp0
.c335	a335	90 02		bcc $a339			bcc 	_ESHNoCarry
.c337	a337	e6 37		inc $37				inc 	zTemp0+1
.c339	a339					_ESHNoCarry:
.c339	a339	98		tya				tya 								; zTemp1 + Y
.c33a	a33a	18		clc				clc
.c33b	a33b	65 38		adc $38				adc 	zTemp1
.c33d	a33d	85 38		sta $38				sta 	zTemp1
.c33f	a33f	90 e3		bcc $a324			bcc 	_ESHCopyLoop
.c341	a341	e6 39		inc $39				inc 	zTemp1+1
.c343	a343	80 df		bra $a324			bra 	_ESHCopyLoop
.c345	a345					_ESHUnpack:
.c345	a345	a0 02		ldy #$02			ldy 	#2 							; get count into X
.c347	a347	b1 36		lda ($36),y			lda 	(zTemp0),y
.c349	a349	aa		tax				tax
.c34a	a34a	88		dey				dey 								; byte into A
.c34b	a34b	b1 36		lda ($36),y			lda 	(zTemp0),y
.c34d	a34d	f0 0c		beq $a35b			beq 	_ESHExit 					; exit if zero.
.c34f	a34f	a0 00		ldy #$00			ldy 	#0 							; copy start position
.c351	a351					_ESHCopyOut:
.c351	a351	91 38		sta ($38),y			sta 	(zTemp1),y
.c353	a353	c8		iny				iny
.c354	a354	ca		dex				dex
.c355	a355	d0 fa		bne $a351			bne 	_ESHCopyOut
.c357	a357	a9 03		lda #$03			lda 	#3 							; Y is bytes on screen, 3 bytes from source
.c359	a359	80 d5		bra $a330			bra 	_ESHNext
.c35b	a35b					_ESHExit:
.c35b	a35b	60		rts				rts
=14						Header_Height = 14
=255						Header_RLE = 255
.c35c	a35c					Header_attrs:
>c35c	a35c	ff 52 59 52 ff d8 07 d8			.byte	255,82,89,82,255,216,7,216,255,82,2,82,255,216,6,216,255,82,2,82,255,216,7,216,255,82,2,82,255,216,6,216,255,82,8,82,210,210,82,82,255,210,7,210,255,82,19,82,104,104,255,82,7,82,104,104,255,82,4,82,104,104,82,82,104,104,255,82,7,82,104,104,255,82,4,82,104,104,255,82,7,82,210,210,82,82,210,210,255,82,4,82,210,210,255,82,18,82,232,232,255,82,14,82,232,232,82,82,232,232,255,82,7,82,232,232,255,82,14,82,210,210,82,82,210,210,255,82,4,82,210,210,255,82,18,82,255,56,5,56,255,82,4,82,255,56,6,56,255,82,2,82,255,56,6,56,255,82,2,82,255,56,7,56,255,82,8,82,210,210,82,82,255,210,7,210,255,82,19,82,120,120,255,82,7,82,120,120,255,82,14,82,120,120,82,82,120,120,255,82,4,82,120,120,82,82,210,210,255,82,3,82,210,210,82,82,210,210,255,82,2,82,210,210,255,82,20,82,168,168,255,82,7,82,168,168,255,82,8,82,168,168,255,82,3,82,168,168,82,82,168,168,255,82,4,82,168,168,82,82,210,210,255,82,3,82,210,210,82,82,210,210,255,82,3,82,210,210,255,82,19,82,72,72,255,82,7,82,255,72,8,72,82,66,82,255,72,5,72,255,82,3,82,255,72,6,72,255,82,3,82,255,210,5,210,255,82,2,82,210,210,255,82,4,82,210,210,255,82,88,82,255,114,80,114,255,226,7,226,255,146,19,146,114,255,146,4,146,255,114,18,114,255,194,24,194,114,114,255,226,10,226,255,146,16,146,114,255,146,4,146,255,114,18,114,255,194,24,194,114,114,255,226,9,226,255,146,17,146,114,255,146,4,146,255,114,18,114,255,194,24,194,255,114,80,114,255,0
>c364	a364	ff 52 02 52 ff d8 06 d8 ff 52 02 52 ff d8 07 d8
>c374	a374	ff 52 02 52 ff d8 06 d8 ff 52 08 52 d2 d2 52 52
>c384	a384	ff d2 07 d2 ff 52 13 52 68 68 ff 52 07 52 68 68
>c394	a394	ff 52 04 52 68 68 52 52 68 68 ff 52 07 52 68 68
>c3a4	a3a4	ff 52 04 52 68 68 ff 52 07 52 d2 d2 52 52 d2 d2
>c3b4	a3b4	ff 52 04 52 d2 d2 ff 52 12 52 e8 e8 ff 52 0e 52
>c3c4	a3c4	e8 e8 52 52 e8 e8 ff 52 07 52 e8 e8 ff 52 0e 52
>c3d4	a3d4	d2 d2 52 52 d2 d2 ff 52 04 52 d2 d2 ff 52 12 52
>c3e4	a3e4	ff 38 05 38 ff 52 04 52 ff 38 06 38 ff 52 02 52
>c3f4	a3f4	ff 38 06 38 ff 52 02 52 ff 38 07 38 ff 52 08 52
>c404	a404	d2 d2 52 52 ff d2 07 d2 ff 52 13 52 78 78 ff 52
>c414	a414	07 52 78 78 ff 52 0e 52 78 78 52 52 78 78 ff 52
>c424	a424	04 52 78 78 52 52 d2 d2 ff 52 03 52 d2 d2 52 52
>c434	a434	d2 d2 ff 52 02 52 d2 d2 ff 52 14 52 a8 a8 ff 52
>c444	a444	07 52 a8 a8 ff 52 08 52 a8 a8 ff 52 03 52 a8 a8
>c454	a454	52 52 a8 a8 ff 52 04 52 a8 a8 52 52 d2 d2 ff 52
>c464	a464	03 52 d2 d2 52 52 d2 d2 ff 52 03 52 d2 d2 ff 52
>c474	a474	13 52 48 48 ff 52 07 52 ff 48 08 48 52 42 52 ff
>c484	a484	48 05 48 ff 52 03 52 ff 48 06 48 ff 52 03 52 ff
>c494	a494	d2 05 d2 ff 52 02 52 d2 d2 ff 52 04 52 d2 d2 ff
>c4a4	a4a4	52 58 52 ff 72 50 72 ff e2 07 e2 ff 92 13 92 72
>c4b4	a4b4	ff 92 04 92 ff 72 12 72 ff c2 18 c2 72 72 ff e2
>c4c4	a4c4	0a e2 ff 92 10 92 72 ff 92 04 92 ff 72 12 72 ff
>c4d4	a4d4	c2 18 c2 72 72 ff e2 09 e2 ff 92 11 92 72 ff 92
>c4e4	a4e4	04 92 ff 72 12 72 ff c2 18 c2 ff 72 50 72 ff 00
.c4f4	a4f4					Header_chars:
>c4f4	a4f4	ff 20 59 20 ff 08 07 08			.byte	255,32,89,32,255,8,7,8,255,32,2,32,255,8,6,8,255,32,2,32,255,8,7,8,255,32,2,32,255,8,6,8,255,32,8,32,252,252,32,32,255,252,7,252,255,32,19,32,8,8,255,32,7,32,8,8,255,32,4,32,8,8,32,32,8,8,255,32,7,32,8,8,255,32,4,32,8,8,255,32,7,32,252,252,32,32,252,252,255,32,4,32,252,252,255,32,18,32,8,8,255,32,14,32,8,8,32,32,8,8,255,32,7,32,8,8,255,32,14,32,252,252,32,32,252,252,255,32,4,32,252,252,255,32,18,32,255,8,5,8,255,32,4,32,255,8,6,8,255,32,2,32,255,8,6,8,255,32,2,32,255,8,7,8,255,32,8,32,252,252,32,32,255,252,7,252,255,32,19,32,8,8,255,32,7,32,8,8,255,32,14,32,8,8,32,32,8,8,255,32,4,32,8,8,32,32,252,252,255,32,3,32,252,252,32,32,252,252,255,32,2,32,252,252,255,32,20,32,8,8,255,32,7,32,8,8,255,32,8,32,8,8,255,32,3,32,8,8,32,32,8,8,255,32,4,32,8,8,32,32,252,252,255,32,3,32,252,252,32,32,252,252,255,32,3,32,252,252,255,32,19,32,8,8,255,32,7,32,255,8,8,8,255,32,2,32,255,8,5,8,255,32,3,32,255,8,6,8,255,32,3,32,255,252,5,252,255,32,2,32,252,252,255,32,4,32,252,252,255,32,88,32,160,255,150,27,150,155,255,150,22,150,155,255,150,24,150,161,130,72,97,114,100,119,97,114,101,255,32,19,32,130,221,50,48,50,50,32,83,116,101,102,97,110,121,32,65,108,108,97,105,114,101,32,32,130,99,50,53,54,102,111,101,110,105,120,46,99,111,109,47,102,50,53,54,45,106,114,255,32,2,32,130,130,77,105,99,114,111,75,101,114,110,101,108,255,32,16,32,130,221,50,48,50,50,32,74,101,115,115,105,101,32,79,98,101,114,114,101,117,116,101,114,130,71,97,100,103,101,116,64,72,97,99,107,119,114,101,110,99,104,76,97,98,115,46,99,111,109,130,130,83,117,112,101,114,66,65,83,73,67,255,32,17,32,130,221,50,48,50,50,32,80,97,117,108,32,82,111,98,115,111,110,255,32,5,32,130,80,97,117,108,64,82,111,98,115,111,110,115,46,111,114,103,46,117,107,255,32,5,32,130,162,255,150,27,150,157,255,150,22,150,157,255,150,24,150,163,255,0
>c4fc	a4fc	ff 20 02 20 ff 08 06 08 ff 20 02 20 ff 08 07 08
>c50c	a50c	ff 20 02 20 ff 08 06 08 ff 20 08 20 fc fc 20 20
>c51c	a51c	ff fc 07 fc ff 20 13 20 08 08 ff 20 07 20 08 08
>c52c	a52c	ff 20 04 20 08 08 20 20 08 08 ff 20 07 20 08 08
>c53c	a53c	ff 20 04 20 08 08 ff 20 07 20 fc fc 20 20 fc fc
>c54c	a54c	ff 20 04 20 fc fc ff 20 12 20 08 08 ff 20 0e 20
>c55c	a55c	08 08 20 20 08 08 ff 20 07 20 08 08 ff 20 0e 20
>c56c	a56c	fc fc 20 20 fc fc ff 20 04 20 fc fc ff 20 12 20
>c57c	a57c	ff 08 05 08 ff 20 04 20 ff 08 06 08 ff 20 02 20
>c58c	a58c	ff 08 06 08 ff 20 02 20 ff 08 07 08 ff 20 08 20
>c59c	a59c	fc fc 20 20 ff fc 07 fc ff 20 13 20 08 08 ff 20
>c5ac	a5ac	07 20 08 08 ff 20 0e 20 08 08 20 20 08 08 ff 20
>c5bc	a5bc	04 20 08 08 20 20 fc fc ff 20 03 20 fc fc 20 20
>c5cc	a5cc	fc fc ff 20 02 20 fc fc ff 20 14 20 08 08 ff 20
>c5dc	a5dc	07 20 08 08 ff 20 08 20 08 08 ff 20 03 20 08 08
>c5ec	a5ec	20 20 08 08 ff 20 04 20 08 08 20 20 fc fc ff 20
>c5fc	a5fc	03 20 fc fc 20 20 fc fc ff 20 03 20 fc fc ff 20
>c60c	a60c	13 20 08 08 ff 20 07 20 ff 08 08 08 ff 20 02 20
>c61c	a61c	ff 08 05 08 ff 20 03 20 ff 08 06 08 ff 20 03 20
>c62c	a62c	ff fc 05 fc ff 20 02 20 fc fc ff 20 04 20 fc fc
>c63c	a63c	ff 20 58 20 a0 ff 96 1b 96 9b ff 96 16 96 9b ff
>c64c	a64c	96 18 96 a1 82 48 61 72 64 77 61 72 65 ff 20 13
>c65c	a65c	20 82 dd 32 30 32 32 20 53 74 65 66 61 6e 79 20
>c66c	a66c	41 6c 6c 61 69 72 65 20 20 82 63 32 35 36 66 6f
>c67c	a67c	65 6e 69 78 2e 63 6f 6d 2f 66 32 35 36 2d 6a 72
>c68c	a68c	ff 20 02 20 82 82 4d 69 63 72 6f 4b 65 72 6e 65
>c69c	a69c	6c ff 20 10 20 82 dd 32 30 32 32 20 4a 65 73 73
>c6ac	a6ac	69 65 20 4f 62 65 72 72 65 75 74 65 72 82 47 61
>c6bc	a6bc	64 67 65 74 40 48 61 63 6b 77 72 65 6e 63 68 4c
>c6cc	a6cc	61 62 73 2e 63 6f 6d 82 82 53 75 70 65 72 42 41
>c6dc	a6dc	53 49 43 ff 20 11 20 82 dd 32 30 32 32 20 50 61
>c6ec	a6ec	75 6c 20 52 6f 62 73 6f 6e ff 20 05 20 82 50 61
>c6fc	a6fc	75 6c 40 52 6f 62 73 6f 6e 73 2e 6f 72 67 2e 75
>c70c	a70c	6b ff 20 05 20 82 a2 ff 96 1b 96 9d ff 96 16 96
>c71c	a71c	9d ff 96 18 96 a3 ff 00
.c724	a724					Header_Palette:
>c724	a724	00 00 00 00				.dword $000000
>c728	a728	66 66 66 00				.dword $666666
>c72c	a72c	aa 00 00 00				.dword $0000aa
>c730	a730	00 aa 00 00				.dword $00aa00
>c734	a734	ea 41 c0 00				.dword $c041ea
>c738	a738	00 48 87 00				.dword $874800
>c73c	a73c	00 9c ff 00				.dword $ff9c00
>c740	a740	ff db 57 00				.dword $57dbff
>c744	a744	28 3f 3f 00				.dword $3f3f28
>c748	a748	8a aa aa 00				.dword $aaaa8a
>c74c	a74c	ff 55 55 00				.dword $5555ff
>c750	a750	55 ff 55 00				.dword $55ff55
>c754	a754	ed 8d ff 00				.dword $ff8ded
>c758	a758	00 00 ff 00				.dword $ff0000
>c75c	a75c	55 ff ff 00				.dword $ffff55
>c760	a760	ff ff ff 00				.dword $ffffff
>c764	a764	ff ff ff 00				.dword $ffffff
>c768	a768	ff ff ff 00				.dword $ffffff

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_graphics.module

=1						graphicsIntegrated=1
=0						GCMD_Initialise = 0*2
=2						GCMD_BitmapCtl = 1*2
=4						GCMD_SpriteCtl = 2*2
=6						GCMD_Clear = 3*2
=8						GCMD_Colour = 4*2
=10						GCMD_DrawFont = 5*2
=12						GCMD_DrawSprite = 6*2
=14						GCMD_SpriteUse = 7*2
=16						GCMD_SpriteImage = 8*2
=18						GCMD_SpriteCollide = 9*2
=64						GCMD_Move = 32*2
=66						GCMD_Line = 33*2
=68						GCMD_FrameRect = 34*2
=70						GCMD_FillRect = 35*2
=72						GCMD_FrameCircle = 36*2
=74						GCMD_FillCircle = 37*2
=80						GCMD_Plot = 40*2
=82						GCMD_SpriteMove = 41*2
=42						GRFirstFreeCode = 42
.c76c	a76c					GRVectorTable:
>c76c	a76c	bb a9					.word	GXInitialise             ; $00 Initialise
>c76e	a76e	d5 a9					.word	GXControlBitmap          ; $01 BitmapCtl
>c770	a770	1d aa					.word	GXControlSprite          ; $02 SpriteCtl
>c772	a772	6d a9					.word	GXClearBitmap            ; $03 Clear
>c774	a774	ac ab					.word	GXSetColourMode          ; $04 Colour
>c776	a776	74 ad					.word	GXFontHandler            ; $05 DrawFont
>c778	a778	bc ad					.word	GXSpriteHandler          ; $06 DrawSprite
>c77a	a77a	2d ae					.word	GXSelect                 ; $07 SpriteUse
>c77c	a77c	56 ae					.word	GXSelectImage            ; $08 SpriteImage
>c77e	a77e	dd af					.word	GXCollide                ; $09 SpriteCollide
>c780	a780	1f a8					.word	GRUndefined              ; $0a
>c782	a782	1f a8					.word	GRUndefined              ; $0b
>c784	a784	1f a8					.word	GRUndefined              ; $0c
>c786	a786	1f a8					.word	GRUndefined              ; $0d
>c788	a788	1f a8					.word	GRUndefined              ; $0e
>c78a	a78a	1f a8					.word	GRUndefined              ; $0f
>c78c	a78c	1f a8					.word	GRUndefined              ; $10
>c78e	a78e	1f a8					.word	GRUndefined              ; $11
>c790	a790	1f a8					.word	GRUndefined              ; $12
>c792	a792	1f a8					.word	GRUndefined              ; $13
>c794	a794	1f a8					.word	GRUndefined              ; $14
>c796	a796	1f a8					.word	GRUndefined              ; $15
>c798	a798	1f a8					.word	GRUndefined              ; $16
>c79a	a79a	1f a8					.word	GRUndefined              ; $17
>c79c	a79c	1f a8					.word	GRUndefined              ; $18
>c79e	a79e	1f a8					.word	GRUndefined              ; $19
>c7a0	a7a0	1f a8					.word	GRUndefined              ; $1a
>c7a2	a7a2	1f a8					.word	GRUndefined              ; $1b
>c7a4	a7a4	1f a8					.word	GRUndefined              ; $1c
>c7a6	a7a6	1f a8					.word	GRUndefined              ; $1d
>c7a8	a7a8	1f a8					.word	GRUndefined              ; $1e
>c7aa	a7aa	1f a8					.word	GRUndefined              ; $1f
>c7ac	a7ac	1d a8					.word	GXMove                   ; $20 Move
>c7ae	a7ae	7a aa					.word	GXLine                   ; $21 Line
>c7b0	a7b0	f5 ab					.word	GXFrameRectangle         ; $22 FrameRect
>c7b2	a7b2	f2 ab					.word	GXFillRectangle          ; $23 FillRect
>c7b4	a7b4	24 a8					.word	GXFrameCircle            ; $24 FrameCircle
>c7b6	a7b6	20 a8					.word	GXFillCircle             ; $25 FillCircle
>c7b8	a7b8	1f a8					.word	GRUndefined              ; $26
>c7ba	a7ba	1f a8					.word	GRUndefined              ; $27
>c7bc	a7bc	da ab					.word	GXPlotPoint              ; $28 Plot
>c7be	a7be	ec ae					.word	GXMoveSprite             ; $29 SpriteMove
=3						GXMappingPage = 3
=24576						GXMappingAddress = ($2000 * GXMappingPage)
=11						GXEditSlot = 8 + GXMappingPage
=$36						gxzTemp0 = zTemp0
=$38						gxzTemp1 = zTemp1
=$3a						gxzTemp2 = zTemp2
=$3c						gxzScreen = zsTemp
=$627						gxPixelBuffer = numberBuffer
.0674						gxCurrentX:
>0674								.fill 	2
.0676						gxCurrentY:
>0676								.fill 	2
.0678						gxLastX:
>0678								.fill 	2
.067a						gxLastY:
>067a								.fill 	2
.067c						gxX0:
>067c								.fill 	2
.067e						gxY0:
>067e								.fill 	2
.0680						gxX1:
>0680								.fill 	2
.0682						gxY1:
>0682								.fill 	2
.0684						gxSpritesOn:
>0684								.fill 	1
.0685						gxBitmapsOn:
>0685								.fill 	1
.0686						gxBasePage:
>0686								.fill 	1
.0687						gxSpritePage:
>0687								.fill 	1
.0688						gxHeight:
>0688								.fill 	1
.0689						gxMode:
>0689								.fill 	1
.068a						gxColour:
>068a								.fill 	1
.068b						gxEORValue:
>068b								.fill 	1
.068c						gxANDValue:
>068c								.fill 	1
.068d						gxOriginalLUTValue:
>068d								.fill 	1
.068e						gxOffset:
>068e								.fill 	1
.068f						GSCurrentSpriteID:
>068f								.fill 	1
.0690						GSCurrentSpriteAddr:
>0690								.fill 	2
.0692						gxSpriteOffsetBase:
>0692								.fill 	2
.0694						gxSpriteLow:
>0694								.fill 	64
.06d4						gxSpriteHigh:
>06d4								.fill 	64
.c7c0	a7c0					Export_GXGraphicDraw:
.c7c0	a7c0	c9 40		cmp #$40			cmp 	#GCMD_Move					; low instructions don't use coordinates
.c7c2	a7c2	b0 06		bcs $a7ca			bcs 	_GDCoordinate
.c7c4	a7c4	86 36		stx $36				stx 	gxzTemp0 					; save X/Y
.c7c6	a7c6	84 37		sty $37				sty 	gxzTemp0+1
.c7c8	a7c8	80 4b		bra $a815			bra 	_GDExecuteA 				; and execute
.c7ca	a7ca					_GDCoordinate:
.c7ca	a7ca	48		pha				pha 								; save AXY
.c7cb	a7cb	da		phx				phx
.c7cc	a7cc	5a		phy				phy
.c7cd	a7cd	a2 03		ldx #$03			ldx 	#3 							; copy currentX to lastX
.c7cf	a7cf					_GDCopy1:
.c7cf	a7cf	bd 74 06	lda $0674,x			lda 	gxCurrentX,x
.c7d2	a7d2	9d 78 06	sta $0678,x			sta 	gxLastX,x
.c7d5	a7d5	ca		dex				dex
.c7d6	a7d6	10 f7		bpl $a7cf			bpl 	_GDCopy1
.c7d8	a7d8	68		pla				pla 								; update Y
.c7d9	a7d9	8d 76 06	sta $0676			sta 	gxCurrentY
.c7dc	a7dc	9c 77 06	stz $0677			stz 	gxCurrentY+1
.c7df	a7df	68		pla				pla
.c7e0	a7e0	8d 74 06	sta $0674			sta 	gxCurrentX
.c7e3	a7e3	68		pla				pla 								; get A (command+X.1) back
.c7e4	a7e4	48		pha				pha
.c7e5	a7e5	29 01		and #$01			and 	#1 							; put LSB as MSB of Current.X
.c7e7	a7e7	8d 75 06	sta $0675			sta 	gxCurrentX+1
.c7ea	a7ea	68		pla				pla 								; get command back
.c7eb	a7eb	29 fe		and #$fe			and 	#$FE 						; lose LSB, chuck the stray X bit
.c7ed	a7ed	48		pha				pha 								; push back.
.c7ee	a7ee	c9 52		cmp #$52			cmp 	#GCMD_SpriteMove 			; move sprite does not clip.
.c7f0	a7f0	f0 17		beq $a809			beq 	_GDCopyToWorkArea
.c7f2	a7f2	ad 75 06	lda $0675			lda 	gxCurrentX+1 				; X < 256 X okay
.c7f5	a7f5	f0 07		beq $a7fe			beq 	_GDCheckY
.c7f7	a7f7	ad 74 06	lda $0674			lda 	gxCurrentX 					; otherwise X < 320 = 256 + 64
.c7fa	a7fa	c9 40		cmp #$40			cmp 	#64
.c7fc	a7fc	b0 08		bcs $a806			bcs 	_GDError1
.c7fe	a7fe					_GDCheckY:
.c7fe	a7fe	ad 76 06	lda $0676			lda 	gxCurrentY 					; check Y < Height.
.c801	a801	cd 88 06	cmp $0688			cmp 	gxHeight
.c804	a804	90 03		bcc $a809			bcc 	_GDCopyToWorkArea
.c806	a806					_GDError1:
.c806	a806	68		pla				pla
.c807	a807					_GDError2:
.c807	a807	38		sec				sec
.c808	a808	60		rts				rts
.c809	a809					_GDCopyToWorkArea:
.c809	a809	a2 07		ldx #$07			ldx 	#7 							; copy current and last to gxXY/12 work area
.c80b	a80b					_GDCopy2:
.c80b	a80b	bd 74 06	lda $0674,x			lda 	gxCurrentX,x
.c80e	a80e	9d 7c 06	sta $067c,x			sta 	gxX0,x
.c811	a811	ca		dex				dex
.c812	a812	10 f7		bpl $a80b			bpl 	_GDCopy2
.c814	a814	68		pla				pla 								; get command
.c815	a815					_GDExecuteA:
.c815	a815	c9 54		cmp #$54			cmp 	#GRFirstFreeCode*2 			; bad ?
.c817	a817	b0 ee		bcs $a807			bcs 	_GDError2
.c819	a819	aa		tax				tax
.c81a	a81a	7c 6c a7	jmp ($a76c,x)			jmp 	(GRVectorTable,x)
.c81d	a81d					GXMove:
.c81d	a81d	18		clc				clc
.c81e	a81e	60		rts				rts
.c81f	a81f					GRUndefined:
>c81f	a81f	db						.byte 	$DB 						; causes a break in the emulator
.c820	a820					GXFillCircle:
.c820	a820	a9 ff		lda #$ff			lda 	#255
.c822	a822	80 02		bra $a826			bra 	GXCircle
.c824	a824					GXFrameCircle:
.c824	a824	a9 00		lda #$00			lda 	#0
.c826	a826					GXCircle:
.c826	a826	8d 17 07	sta $0717			sta 	gxIsFillMode					; save Fill flag
.c829	a829	ad 85 06	lda $0685			lda 	gxBitmapsOn
.c82c	a82c	f0 26		beq $a854			beq 	_GXCFail
.c82e	a82e	20 84 b0	jsr $b084			jsr 	GXSortXY 					; topleft/bottomright
.c831	a831	20 5c af	jsr $af5c			jsr 	GXOpenBitmap 				; start drawing
.c834	a834	20 26 a9	jsr $a926			jsr 	GXCircleSetup 				; set up for drawing
.c837	a837	9c 18 07	stz $0718			stz 	gxYChanged
.c83a	a83a					_GXCircleDraw:
.c83a	a83a	ad 15 07	lda $0715			lda 	gxxCentre					; while x <= y
.c83d	a83d	cd 16 07	cmp $0716			cmp 	gxYCentre
.c840	a840	90 0a		bcc $a84c			bcc 	_GXCircleContinue
.c842	a842	d0 03		bne $a847			bne 	_GXNoLast
.c844	a844	20 59 a8	jsr $a859			jsr 	GXPlot1
.c847	a847					_GXNoLast:
.c847	a847	20 64 af	jsr $af64			jsr 	GXCloseBitmap 				; close the bitmap
.c84a	a84a	18		clc				clc
.c84b	a84b	60		rts				rts
.c84c	a84c					_GXCircleContinue:
.c84c	a84c	20 56 a8	jsr $a856			jsr 	GXPlot2 					; draw it
.c84f	a84f	20 d3 a8	jsr $a8d3			jsr 	GXCircleMove 				; adjust the coordinates
.c852	a852	80 e6		bra $a83a			bra 	_GXCircleDraw
.c854	a854					_GXCFail:
.c854	a854	38		sec				sec
.c855	a855	60		rts				rts
.c856	a856					GXPlot2:
.c856	a856	20 59 a8	jsr $a859			jsr 	GXPlot1 						; plot and swap, fall through does twice
.c859	a859					GXPlot1:
.c859	a859	ad 16 07	lda $0716			lda 	gxYCentre 						; if y = 0, don't do it twice (xor)
.c85c	a85c	f0 03		beq $a861			beq 	_GXPlot1Only
.c85e	a85e	20 7d a8	jsr $a87d			jsr 	GXPlot0 						; plot and negate
.c861	a861					_GXPlot1Only:
.c861	a861	20 7d a8	jsr $a87d			jsr 	GXPlot0 						; twice, undoing negation
.c864	a864	ad 15 07	lda $0715			lda 	gxxCentre 						; swap X and Y
.c867	a867	ae 16 07	ldx $0716			ldx	 	gxYCentre
.c86a	a86a	8d 16 07	sta $0716			sta 	gxYCentre
.c86d	a86d	8e 15 07	stx $0715			stx 	gxxCentre
.c870	a870	ad 18 07	lda $0718			lda 	gxYChanged 						; toggle Y Changed flag
.c873	a873	a9 ff		lda #$ff			lda 	#$FF
.c875	a875	8d 18 07	sta $0718			sta 	gxYChanged
.c878	a878	60		rts				rts
.c879	a879	20 7d a8	jsr $a87d			jsr 	GXPlot0 						; do once
.c87c	a87c	60		rts				rts
.c87d	a87d	ad 17 07	lda $0717	GXPlot0:lda 	gxIsFillMode 					; outline mode, always draw as X or Y will change
.c880	a880	f0 05		beq $a887			beq 	_GXPlot0Always
.c882	a882	ad 18 07	lda $0718			lda 	gxYChanged						; fill mode, only draw if changed.
.c885	a885	f0 2d		beq $a8b4			beq 	GXPlot0Exit
.c887	a887					_GXPlot0Always:
.c887	a887	a2 02		ldx #$02			ldx 	#2 								; copy Y1-A => Y0
.c889	a889	ad 16 07	lda $0716			lda 	gxYCentre
.c88c	a88c	20 b5 a8	jsr $a8b5			jsr 	GXSubCopy
.c88f	a88f	a2 00		ldx #$00			ldx 	#0 								; copy X1-A => X0,
.c891	a891	ad 15 07	lda $0715			lda 	gxxCentre
.c894	a894	20 b5 a8	jsr $a8b5			jsr 	GXSubCopy
.c897	a897	48		pha				pha 									; save last offset X
.c898	a898	20 6c af	jsr $af6c			jsr 	gxPositionCalc 					; calculate position/offset.
.c89b	a89b	68		pla				pla
.c89c	a89c	0a		asl a				asl 	a 								; store 2 x last offset in gxzTemp0
.c89d	a89d	85 36		sta $36				sta 	gxzTemp0
.c89f	a89f	64 37		stz $37				stz 	gxzTemp0+1
.c8a1	a8a1	26 37		rol $37				rol 	gxzTemp0+1
.c8a3	a8a3	ad 17 07	lda $0717			lda 	gxIsFillMode
.c8a6	a8a6	69 80		adc #$80			adc 	#128
.c8a8	a8a8	20 45 ac	jsr $ac45			jsr 	GXDrawLineTemp0 				; routine from Rectangle.
.c8ab	a8ab	38		sec				sec 									; GY = -GY
.c8ac	a8ac	a9 00		lda #$00			lda 	#0
.c8ae	a8ae	ed 16 07	sbc $0716			sbc 	gxYCentre
.c8b1	a8b1	8d 16 07	sta $0716			sta 	gxYCentre
.c8b4	a8b4					GXPlot0Exit:
.c8b4	a8b4	60		rts				rts
.c8b5	a8b5					GXSubCopy:
.c8b5	a8b5	85 36		sta $36				sta 	gxzTemp0
.c8b7	a8b7	64 37		stz $37				stz 	gxzTemp0+1
.c8b9	a8b9	29 80		and #$80			and 	#$80
.c8bb	a8bb	f0 02		beq $a8bf			beq 	_GXNoSx
.c8bd	a8bd	c6 37		dec $37				dec 	gxzTemp0+1
.c8bf	a8bf					_GXNoSx:
.c8bf	a8bf	38		sec				sec
.c8c0	a8c0	bd 80 06	lda $0680,x			lda 	gxX1,x
.c8c3	a8c3	e5 36		sbc $36				sbc 	gxzTemp0
.c8c5	a8c5	9d 7c 06	sta $067c,x			sta 	gxX0,x
.c8c8	a8c8	bd 81 06	lda $0681,x			lda 	gxX1+1,x
.c8cb	a8cb	e5 37		sbc $37				sbc 	gxzTemp0+1
.c8cd	a8cd	9d 7d 06	sta $067d,x			sta 	gxX0+1,x
.c8d0	a8d0	a5 36		lda $36				lda 	gxzTemp0 						; return A
.c8d2	a8d2	60		rts				rts
.c8d3	a8d3					GXCircleMove:
.c8d3	a8d3	9c 18 07	stz $0718			stz 	gxYChanged 					; clear Y changed flag
.c8d6	a8d6	a5 39		lda $39				lda 	gxzTemp1+1 					; check sign of D
.c8d8	a8d8	10 0d		bpl $a8e7			bpl 	_GXEMPositive
.c8da	a8da	ee 15 07	inc $0715			inc 	gxxCentre 					; X++
.c8dd	a8dd	ad 15 07	lda $0715			lda 	gxxCentre
.c8e0	a8e0	20 06 a9	jsr $a906			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.c8e3	a8e3	a9 06		lda #$06			lda 	#6  						; and add 6
.c8e5	a8e5	80 15		bra $a8fc			bra 	_GXEMAddD
.c8e7	a8e7					_GXEMPositive:
.c8e7	a8e7	ee 15 07	inc $0715			inc 	gxxCentre					; X++
.c8ea	a8ea	ce 16 07	dec $0716			dec 	gxYCentre 					; Y--
.c8ed	a8ed	38		sec				sec 								; calculate X-Y
.c8ee	a8ee	ad 15 07	lda $0715			lda 	gxxCentre
.c8f1	a8f1	ed 16 07	sbc $0716			sbc 	gxYCentre
.c8f4	a8f4	20 06 a9	jsr $a906			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.c8f7	a8f7	a9 0a		lda #$0a			lda 	#10  						; and add 10
.c8f9	a8f9	ce 18 07	dec $0718			dec 	gxYChanged
.c8fc	a8fc					_GXEMAddD:
.c8fc	a8fc	18		clc				clc
.c8fd	a8fd	65 38		adc $38				adc 	gxzTemp1
.c8ff	a8ff	85 38		sta $38				sta 	gxzTemp1
.c901	a901	90 02		bcc $a905			bcc 	_GXEMNoCarry
.c903	a903	e6 39		inc $39				inc 	gxzTemp1+1
.c905	a905					_GXEMNoCarry:
.c905	a905	60		rts				rts
.c906	a906					_GXAdd4TimesToD:
.c906	a906	85 36		sta $36				sta 	gxzTemp0 					; make 16 bit signed.
.c908	a908	29 80		and #$80			and 	#$80
.c90a	a90a	f0 02		beq $a90e			beq 	_GXA4Unsigned
.c90c	a90c	a9 ff		lda #$ff			lda 	#$FF
.c90e	a90e					_GXA4Unsigned:
.c90e	a90e	85 37		sta $37				sta 	gxzTemp0+1
.c910	a910	06 36		asl $36				asl 	gxzTemp0  					; x 4
.c912	a912	26 37		rol $37				rol 	gxzTemp0+1
.c914	a914	06 36		asl $36				asl 	gxzTemp0
.c916	a916	26 37		rol $37				rol 	gxzTemp0+1
.c918	a918	18		clc				clc 								; add
.c919	a919	a5 36		lda $36				lda		gxzTemp0
.c91b	a91b	65 38		adc $38				adc 	gxzTemp1
.c91d	a91d	85 38		sta $38				sta 	gxzTemp1
.c91f	a91f	a5 37		lda $37				lda		gxzTemp0+1
.c921	a921	65 39		adc $39				adc 	gxzTemp1+1
.c923	a923	85 39		sta $39				sta 	gxzTemp1+1
.c925	a925	60		rts				rts
.c926	a926					GXCircleSetup:
.c926	a926	38		sec				sec
.c927	a927	ad 82 06	lda $0682			lda 	gxY1
.c92a	a92a	ed 7e 06	sbc $067e			sbc 	gxY0
.c92d	a92d	4a		lsr a				lsr 	a
.c92e	a92e	8d 14 07	sta $0714			sta 	gxRadius
.c931	a931	a2 00		ldx #$00			ldx 	#0
.c933	a933	20 55 a9	jsr $a955			jsr 	_GXCalculateCentre
.c936	a936	a2 02		ldx #$02			ldx 	#2
.c938	a938	20 55 a9	jsr $a955			jsr 	_GXCalculateCentre
.c93b	a93b	9c 15 07	stz $0715			stz 	gxxCentre
.c93e	a93e	ad 14 07	lda $0714			lda 	gxRadius
.c941	a941	8d 16 07	sta $0716			sta 	gxYCentre
.c944	a944	0a		asl a				asl 	a 							; R x 2
.c945	a945	85 36		sta $36				sta 	gxzTemp0
.c947	a947	38		sec				sec
.c948	a948	a9 03		lda #$03			lda 	#3
.c94a	a94a	e5 36		sbc $36				sbc 	gxzTemp0
.c94c	a94c	85 38		sta $38				sta 	gxzTemp1
.c94e	a94e	a9 00		lda #$00			lda 	#0
.c950	a950	e9 00		sbc #$00			sbc 	#0
.c952	a952	85 39		sta $39				sta 	gxzTemp1+1
.c954	a954	60		rts				rts
.c955	a955					_GXCalculateCentre:
.c955	a955	38		sec				sec
.c956	a956	bd 80 06	lda $0680,x			lda 	gxX1,x
.c959	a959	7d 7c 06	adc $067c,x			adc 	gxX0,x
.c95c	a95c	9d 80 06	sta $0680,x			sta 	gxX1,x
.c95f	a95f	bd 81 06	lda $0681,x			lda 	gxX1+1,x
.c962	a962	7d 7d 06	adc $067d,x			adc 	gxX0+1,x
.c965	a965	4a		lsr a				lsr 	a
.c966	a966	9d 81 06	sta $0681,x			sta 	gxX1+1,x
.c969	a969	7e 80 06	ror $0680,x			ror 	gxX1,x
.c96c	a96c	60		rts				rts
.0714						gxRadius:
>0714								.fill 	1
.0715						gxxCentre:
>0715								.fill 	1
.0716						gxYCentre:
>0716								.fill 	1
.0717						gxIsFillMode:
>0717								.fill 	1
.0718						gxYChanged:
>0718								.fill  	1
=64000						ScreenSize200 = 320 * 200
=76800						ScreenSize240 = 320 * 240
.c96d	a96d					GXClearBitmap:
.c96d	a96d	ad 85 06	lda $0685			lda 	gxBitmapsOn 				; check BMP running.
.c970	a970	f0 24		beq $a996			beq 	_GXCBFail
.c972	a972	20 5c af	jsr $af5c			jsr 	GXOpenBitmap 				; start access
.c975	a975	a0 07		ldy #$07			ldy 	#ScreenSize200 / 8192 		; X is pages to clear
.c977	a977	ad 88 06	lda $0688			lda 	gxHeight
.c97a	a97a	c9 c8		cmp #$c8			cmp 	#200 						; 200 ?
.c97c	a97c	a0 09		ldy #$09			ldy 	#ScreenSize240 / 8192
.c97e	a97e					_GXCalcLastPage:
.c97e	a97e	98		tya				tya 								; add to base page
.c97f	a97f	18		clc				clc
.c980	a980	6d 86 06	adc $0686			adc 	gxBasePage
.c983	a983	85 0b		sta $0b				sta 	GXEditSlot  				; clear from this page back
.c985	a985					_GXClearAll:
.c985	a985	20 98 a9	jsr $a998			jsr 	_GXClearBlock 				; clear 8k block
.c988	a988	c6 0b		dec $0b				dec 	GXEditSlot  				; back to previous
.c98a	a98a	a5 0b		lda $0b				lda 	GXEditSlot
.c98c	a98c	cd 86 06	cmp $0686			cmp 	gxBasePage 					; until before base page
.c98f	a98f	b0 f4		bcs $a985			bcs 	_GXClearAll
.c991	a991	20 64 af	jsr $af64			jsr 	GXCloseBitmap	 			; stop access
.c994	a994	18		clc				clc
.c995	a995	60		rts				rts
.c996	a996					_GXCBFail:
.c996	a996	38		sec				sec
.c997	a997	60		rts				rts
.c998	a998					_GXClearBlock:
.c998	a998	a9 00		lda #$00			lda 	#((GXMappingAddress) & $FF)
.c99a	a99a	85 38		sta $38				sta 	0+gxzTemp1
.c99c	a99c	a9 60		lda #$60			lda 	#((GXMappingAddress) >> 8)
.c99e	a99e	85 39		sta $39				sta 	1+gxzTemp1
.c9a0	a9a0					_GXCB0:
.c9a0	a9a0	a5 36		lda $36				lda 	gxzTemp0
.c9a2	a9a2	a0 00		ldy #$00			ldy 	#0
.c9a4	a9a4					_GXCB1:
.c9a4	a9a4	91 38		sta ($38),y			sta 	(gxzTemp1),y
.c9a6	a9a6	c8		iny				iny
.c9a7	a9a7	91 38		sta ($38),y			sta 	(gxzTemp1),y
.c9a9	a9a9	c8		iny				iny
.c9aa	a9aa	91 38		sta ($38),y			sta 	(gxzTemp1),y
.c9ac	a9ac	c8		iny				iny
.c9ad	a9ad	91 38		sta ($38),y			sta 	(gxzTemp1),y
.c9af	a9af	c8		iny				iny
.c9b0	a9b0	d0 f2		bne $a9a4			bne 	_GXCB1
.c9b2	a9b2	e6 39		inc $39				inc 	gxzTemp1+1
.c9b4	a9b4	a5 39		lda $39				lda 	gxzTemp1+1
.c9b6	a9b6	c9 80		cmp #$80			cmp	 	#(GXMappingAddress >> 8)+$20
.c9b8	a9b8	d0 e6		bne $a9a0			bne 	_GXCB0
.c9ba	a9ba	60		rts				rts
.c9bb	a9bb					GXInitialise:
.c9bb	a9bb	64 01		stz $01				stz 	1
.c9bd	a9bd	a9 01		lda #$01			lda 	#1
.c9bf	a9bf	8d 00 d0	sta $d000			sta 	$D000
.c9c2	a9c2	18		clc				clc
.c9c3	a9c3	9c 84 06	stz $0684			stz 	gxSpritesOn
.c9c6	a9c6	9c 85 06	stz $0685			stz 	gxBitmapsOn
.c9c9	a9c9	a2 0f		ldx #$0f			ldx 	#15
.c9cb	a9cb					_GXIClear:
.c9cb	a9cb	9e 74 06	stz $0674,x			stz 	gxCurrentX,x
.c9ce	a9ce	ca		dex				dex
.c9cf	a9cf	10 fa		bpl $a9cb			bpl 	_GXIClear
.c9d1	a9d1	20 6c aa	jsr $aa6c			jsr 	GXClearSpriteStore
.c9d4	a9d4	60		rts				rts
.c9d5	a9d5					GXControlBitmap:
.c9d5	a9d5	64 01		stz $01				stz 	1
.c9d7	a9d7	a5 36		lda $36				lda 	gxzTemp0 					; get control bits
.c9d9	a9d9	29 01		and #$01			and 	#1 							; set bitmap flag
.c9db	a9db	8d 85 06	sta $0685			sta 	gxBitmapsOn
.c9de	a9de	4a		lsr a				lsr 	a 							; bit 0 into carry.
.c9df	a9df	ad 00 d0	lda $d000			lda 	$D000 						; read Vicky MCR
.c9e2	a9e2	09 07		ora #$07			ora 	#7 							; turn graphics, text, textoverlay on.
.c9e4	a9e4	29 f7		and #$f7			and 	#$F7 						; clear bitmap bit
.c9e6	a9e6	90 02		bcc $a9ea			bcc 	_CBNotOn
.c9e8	a9e8	09 08		ora #$08			ora 	#$08 						; bitmap on if 1 on 0 off
.c9ea	a9ea					_CBNotOn:
.c9ea	a9ea	8d 00 d0	sta $d000			sta 	$D000 						; update Vicky MCR
.c9ed	a9ed	a5 36		lda $36				lda 	gxzTemp0 					; get control settings (bits 0-2)
.c9ef	a9ef	29 07		and #$07			and 	#7
.c9f1	a9f1	8d 00 d1	sta $d100			sta 	$D100 						; write in Vicky Bitmap Control Register #0
.c9f4	a9f4	a5 37		lda $37				lda 	gxzTemp0+1 					; get the base page
.c9f6	a9f6	d0 02		bne $a9fa			bne 	_CBNotDefault
.c9f8	a9f8	a9 08		lda #$08			lda 	#8  						; if zero, use 8 e.g. bitmap at $10000
.c9fa	a9fa					_CBNotDefault:
.c9fa	a9fa	8d 86 06	sta $0686			sta 	gxBasePage
.c9fd	a9fd	20 5e aa	jsr $aa5e			jsr 	GXCalculateBaseAddress 	 	; convert page# to address
.ca00	aa00	a5 37		lda $37				lda 	gxzTemp0+1 					; copy address into Bitmap address registers
.ca02	aa02	8d 03 d1	sta $d103			sta 	$D103
.ca05	aa05	a5 36		lda $36				lda 	gxzTemp0
.ca07	aa07	8d 02 d1	sta $d102			sta 	$D102
.ca0a	aa0a	9c 01 d1	stz $d101			stz 	$D101
.ca0d	aa0d	a2 f0		ldx #$f0			ldx 	#240 						; height is 240
.ca0f	aa0f	ad 01 d0	lda $d001			lda 	$D001 						; read MCR bit 0
.ca12	aa12	29 01		and #$01			and 	#1
.ca14	aa14	f0 02		beq $aa18			beq 	_CBHaveHeight
.ca16	aa16	a2 c8		ldx #$c8			ldx 	#200 						; if bit 0 set 320x200
.ca18	aa18					_CBHaveHeight
.ca18	aa18	8e 88 06	stx $0688			stx 	gxHeight
.ca1b	aa1b	18		clc				clc
.ca1c	aa1c	60		rts				rts
.ca1d	aa1d					GXControlSprite:
.ca1d	aa1d	64 01		stz $01				stz 	1
.ca1f	aa1f	a5 36		lda $36				lda 	gxzTemp0 					; get control bits
.ca21	aa21	29 01		and #$01			and 	#1 							; set sprites flag
.ca23	aa23	8d 84 06	sta $0684			sta 	gxSpritesOn
.ca26	aa26	4a		lsr a				lsr 	a 							; bit 0 into carry.
.ca27	aa27	ad 00 d0	lda $d000			lda 	$D000 						; read Vicky MCR
.ca2a	aa2a	09 07		ora #$07			ora 	#7 							; turn graphics, text, textoverlay on.
.ca2c	aa2c	29 df		and #$df			and 	#$DF 						; clear sprite bit
.ca2e	aa2e	90 02		bcc $aa32			bcc 	_CSNotOn
.ca30	aa30	09 20		ora #$20			ora 	#$20 						; sprite on if 1 on 0 off
.ca32	aa32					_CSNotOn:
.ca32	aa32	8d 00 d0	sta $d000			sta 	$D000 						; update Vicky MCR
.ca35	aa35	a5 37		lda $37				lda 	gxzTemp0+1 					; get the base page
.ca37	aa37	d0 02		bne $aa3b			bne 	_CSNotDefault
.ca39	aa39	a9 18		lda #$18			lda 	#24  						; if zero, use 24 e.g. sprites at $30000
.ca3b	aa3b					_CSNotDefault:
.ca3b	aa3b	8d 87 06	sta $0687			sta 	gxSpritePage
.ca3e	aa3e	20 5e aa	jsr $aa5e			jsr 	GXCalculateBaseAddress 	 	; convert page# to address
.ca41	aa41	a5 36		lda $36				lda 	zTemp0
.ca43	aa43	8d 92 06	sta $0692			sta 	gxSpriteOffsetBase
.ca46	aa46	a5 37		lda $37				lda 	zTemp0+1
.ca48	aa48	8d 93 06	sta $0693			sta 	gxSpriteOffsetBase+1
.ca4b	aa4b	a2 00		ldx #$00			ldx 	#0 							; disable all sprites, clears all sprite memory.
.ca4d	aa4d					_CSClear:
.ca4d	aa4d	9e 00 d9	stz $d900,x			stz 	$D900,x
.ca50	aa50	9e 00 da	stz $da00,x			stz 	$DA00,x
.ca53	aa53	ca		dex				dex
.ca54	aa54	d0 f7		bne $aa4d			bne 	_CSClear
.ca56	aa56	9c 91 06	stz $0691			stz 	GSCurrentSpriteAddr+1 		; no sprite selected.
.ca59	aa59	20 6c aa	jsr $aa6c			jsr 	GXClearSpriteStore
.ca5c	aa5c	18		clc				clc
.ca5d	aa5d	60		rts				rts
.ca5e	aa5e					GXCalculateBaseAddress:
.ca5e	aa5e	85 36		sta $36				sta 	gxzTemp0
.ca60	aa60	64 37		stz $37				stz 	gxzTemp0+1
.ca62	aa62	a9 05		lda #$05			lda 	#5
.ca64	aa64					_GXShift:
.ca64	aa64	06 36		asl $36				asl 	gxzTemp0
.ca66	aa66	26 37		rol $37				rol 	gxzTemp0+1
.ca68	aa68	3a		dec a				dec		a
.ca69	aa69	d0 f9		bne $aa64			bne 	_GXShift
.ca6b	aa6b	60		rts				rts
.ca6c	aa6c					GXClearSpriteStore:
.ca6c	aa6c	a2 3f		ldx #$3f			ldx 	#63 						; erase 64 sprite store elements
.ca6e	aa6e					_GXCSSLoop:
.ca6e	aa6e	9e d4 06	stz $06d4,x			stz 	gxSpriteHigh,x
.ca71	aa71	a9 80		lda #$80			lda 	#$80 						; set the 'hidden' bit.
.ca73	aa73	9d 94 06	sta $0694,x			sta 	gxSpriteLow,x
.ca76	aa76	ca		dex				dex
.ca77	aa77	10 f5		bpl $aa6e			bpl 	_GXCSSLoop
.ca79	aa79	60		rts				rts
.ca7a	aa7a					GXLine:
.ca7a	aa7a	ad 85 06	lda $0685			lda 	gxBitmapsOn
.ca7d	aa7d	f0 28		beq $aaa7			beq 	_GXLFail
.ca7f	aa7f	20 5c af	jsr $af5c			jsr 	GXOpenBitmap
.ca82	aa82	20 a2 b0	jsr $b0a2			jsr 	GXSortY						; sort pairs so Y1 >= Y0 e.g. top to bottom.
.ca85	aa85	20 4d ab	jsr $ab4d			jsr 	GXLineSetup 				; the calculations in the linescanner constructor
.ca88	aa88	20 6c af	jsr $af6c			jsr 	gxPositionCalc 				; calculate position/offset.
.ca8b	aa8b					_GXDrawLoop:
.ca8b	aa8b	ac 8e 06	ldy $068e			ldy 	gxOffset 					; draw the pixel
.ca8e	aa8e	b1 3c		lda ($3c),y			lda 	(gxzScreen),y
.ca90	aa90	2d 8c 06	and $068c			and 	gxANDValue
.ca93	aa93	4d 8b 06	eor $068b			eor 	gxEORValue
.ca96	aa96	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.ca98	aa98	20 a9 aa	jsr $aaa9			jsr 	GXLineIsComplete 			; is the line complete ?
.ca9b	aa9b	f0 05		beq $aaa2			beq 	_GXLExit
.ca9d	aa9d	20 c4 aa	jsr $aac4			jsr 	GXLineAdvance 				; code as per advance method
.caa0	aaa0	80 e9		bra $aa8b			bra 	_GXDrawLoop
.caa2	aaa2					_GXLExit:
.caa2	aaa2	20 64 af	jsr $af64			jsr 	GXCloseBitmap
.caa5	aaa5	18		clc				clc
.caa6	aaa6	60		rts				rts
.caa7	aaa7					_GXLFail:
.caa7	aaa7	38		sec				sec
.caa8	aaa8	60		rts				rts
.caa9	aaa9					GXLineIsComplete:
.caa9	aaa9	ad 1b 07	lda $071b			lda 	gxIsDiffYLarger 			; is dy larger
.caac	aaac	d0 0f		bne $aabd			bne 	_GXLICCompareY 				; if so compare Y1/Y0
.caae	aaae	ad 7c 06	lda $067c			lda 	gxX0 						; compare X, LSB and MSB
.cab1	aab1	4d 80 06	eor $0680			eor 	gxX1
.cab4	aab4	d0 06		bne $aabc			bne 	_GXLICExit
.cab6	aab6	ad 7d 06	lda $067d			lda 	gxX0+1
.cab9	aab9	4d 81 06	eor $0681			eor 	gxX1+1
.cabc	aabc					_GXLICExit:
.cabc	aabc	60		rts				rts
.cabd	aabd					_GXLICCompareY:
.cabd	aabd	ad 82 06	lda $0682			lda 	gxY1
.cac0	aac0	4d 7e 06	eor $067e			eor 	gxY0
.cac3	aac3	60		rts				rts
.cac4	aac4					GXLineAdvance:
.cac4	aac4	18		clc				clc 								; add adjust to position
.cac5	aac5	ad 1d 07	lda $071d			lda 	gxPosition
.cac8	aac8	6d 1e 07	adc $071e			adc 	gxAdjust
.cacb	aacb	8d 1d 07	sta $071d			sta 	gxPosition
.cace	aace	9c 20 07	stz $0720			stz 	gxAddSelect 				; clear add select flag
.cad1	aad1	b0 05		bcs $aad8			bcs 	_GXLAOverflow 				; if carry out, overflowed.
.cad3	aad3	cd 1f 07	cmp $071f			cmp 	gxTotal 					; if exceeded total
.cad6	aad6	90 0a		bcc $aae2			bcc 	_GXLANoExtra
.cad8	aad8					_GXLAOverflow:
.cad8	aad8	ce 20 07	dec $0720			dec 	gxAddSelect 				; set addselect to $FF
.cadb	aadb	38		sec				sec 								; subtract total and write back
.cadc	aadc	ed 1f 07	sbc $071f			sbc 	gxTotal
.cadf	aadf	8d 1d 07	sta $071d			sta 	gxPosition
.cae2	aae2					_GXLANoExtra:
.cae2	aae2	ad 1b 07	lda $071b			lda 	gxIsDiffYLarger
.cae5	aae5	f0 0d		beq $aaf4			beq 	_GXDXLarger
.cae7	aae7	20 46 ab	jsr $ab46			jsr 	GXIncrementY
.caea	aaea	ad 20 07	lda $0720			lda 	gxAddSelect
.caed	aaed	f0 10		beq $aaff			beq 	_GXLAExit
.caef	aaef	20 00 ab	jsr $ab00			jsr 	gxAdjustX
.caf2	aaf2	80 0b		bra $aaff			bra 	_GXLAExit
.caf4	aaf4					_GXDXLarger:
.caf4	aaf4	20 00 ab	jsr $ab00			jsr 	gxAdjustX
.caf7	aaf7	ad 20 07	lda $0720			lda 	gxAddSelect
.cafa	aafa	f0 03		beq $aaff			beq 	_GXLAExit
.cafc	aafc	20 46 ab	jsr $ab46			jsr 	GXIncrementY
.caff	aaff					_GXLAExit:
.caff	aaff	60		rts				rts
.cb00	ab00					gxAdjustX:
.cb00	ab00	ad 1c 07	lda $071c			lda 	gxDXNegative
.cb03	ab03	10 25		bpl $ab2a			bpl 	_GXAXRight
.cb05	ab05	ad 7c 06	lda $067c			lda 	gxX0
.cb08	ab08	d0 03		bne $ab0d			bne 	_GXAXNoBorrow
.cb0a	ab0a	ce 7d 06	dec $067d			dec 	gxX0+1
.cb0d	ab0d					_GXAXNoBorrow:
.cb0d	ab0d	ce 7c 06	dec $067c			dec 	gxX0
.cb10	ab10	ce 8e 06	dec $068e			dec 	gxOffset 					; pixel left
.cb13	ab13	ad 8e 06	lda $068e			lda 	gxOffset
.cb16	ab16	c9 ff		cmp #$ff			cmp 	#$FF
.cb18	ab18	d0 0f		bne $ab29			bne 	_GXAYExit 					; underflow
.cb1a	ab1a	c6 3d		dec $3d				dec 	gxzScreen+1 					; borrow
.cb1c	ab1c	a5 3d		lda $3d				lda 	gxzScreen+1 					; gone off page
.cb1e	ab1e	c9 60		cmp #$60			cmp 	#GXMappingAddress >> 8
.cb20	ab20	b0 07		bcs $ab29			bcs 	_GXAYExit
.cb22	ab22	18		clc				clc
.cb23	ab23	69 20		adc #$20			adc 	#$20 						; fix up
.cb25	ab25	85 3d		sta $3d				sta 	gxzScreen+1
.cb27	ab27	c6 0b		dec $0b				dec 	GXEditSlot 				; back one page
.cb29	ab29					_GXAYExit:
.cb29	ab29	60		rts				rts
.cb2a	ab2a					_GXAXRight:
.cb2a	ab2a	ee 7c 06	inc $067c			inc 	gxX0
.cb2d	ab2d	d0 03		bne $ab32			bne 	_GXAXNoCarry
.cb2f	ab2f	ee 7d 06	inc $067d			inc 	gxX0+1
.cb32	ab32					_GXAXNoCarry:
.cb32	ab32	ee 8e 06	inc $068e			inc 	gxOffset 					; pixel right
.cb35	ab35	d0 0e		bne $ab45			bne 	_GXAXExit 					; if not overflowed, exit.
.cb37	ab37	e6 3d		inc $3d				inc 	gxzScreen+1 					; next line
.cb39	ab39	a5 3d		lda $3d				lda 	gxzScreen+1
.cb3b	ab3b	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page ?
.cb3d	ab3d	90 06		bcc $ab45			bcc 	_GXAXExit
.cb3f	ab3f	e9 20		sbc #$20			sbc 	#$20 						; fix up
.cb41	ab41	85 3d		sta $3d				sta 	gxzScreen+1
.cb43	ab43	e6 0b		inc $0b				inc 	GXEditSlot 				; next page
.cb45	ab45					_GXAXExit:
.cb45	ab45	60		rts				rts
.cb46	ab46					GXIncrementY:
.cb46	ab46	ee 7e 06	inc $067e			inc 	gxY0
.cb49	ab49	20 c2 af	jsr $afc2			jsr 	GXMovePositionDown
.cb4c	ab4c	60		rts				rts
.cb4d	ab4d					GXLineSetup:
.cb4d	ab4d	ad 82 06	lda $0682			lda 	gxY1
.cb50	ab50	38		sec				sec
.cb51	ab51	ed 7e 06	sbc $067e			sbc 	gxY0
.cb54	ab54	4a		lsr a				lsr 	a
.cb55	ab55	8d 1a 07	sta $071a			sta 	gxDiffY
.cb58	ab58	9c 1c 07	stz $071c			stz 	gxDXNegative 				; clear -ve flag
.cb5b	ab5b	38		sec				sec
.cb5c	ab5c	ad 80 06	lda $0680			lda 	gxX1
.cb5f	ab5f	ed 7c 06	sbc $067c			sbc 	gxX0
.cb62	ab62	8d 19 07	sta $0719			sta 	gxDiffX
.cb65	ab65	ad 81 06	lda $0681			lda 	gxX1+1 						; calculate MSB
.cb68	ab68	ed 7d 06	sbc $067d			sbc 	gxX0+1
.cb6b	ab6b	6a		ror a				ror 	a 							; rotate bit into DiffX halving it
.cb6c	ab6c	6e 19 07	ror $0719			ror 	gxDiffX
.cb6f	ab6f	0a		asl a				asl 	a
.cb70	ab70	10 0c		bpl $ab7e			bpl 	_GDXNotNegative
.cb72	ab72	a9 00		lda #$00			lda 	#0 							; make absolute value of |dx|
.cb74	ab74	38		sec				sec
.cb75	ab75	ed 19 07	sbc $0719			sbc 	gxDiffX
.cb78	ab78	8d 19 07	sta $0719			sta 	gxDiffX
.cb7b	ab7b	ce 1c 07	dec $071c			dec 	gxDXNegative 				; -ve flag = $FF.
.cb7e	ab7e					_GDXNotNegative:
.cb7e	ab7e	9c 1b 07	stz $071b			stz 	gxIsDiffYLarger 			; clear larger flag
.cb81	ab81	ad 1a 07	lda $071a			lda 	gxDiffY 					; set adjust and total.
.cb84	ab84	8d 1e 07	sta $071e			sta 	gxAdjust
.cb87	ab87	ad 19 07	lda $0719			lda 	gxDiffX
.cb8a	ab8a	8d 1f 07	sta $071f			sta 	gxTotal
.cb8d	ab8d	ad 1a 07	lda $071a			lda 	gxDiffY 					; if dy > dx
.cb90	ab90	cd 19 07	cmp $0719			cmp 	gxDiffX
.cb93	ab93	90 0f		bcc $aba4			bcc 	_GDXNotLarger
.cb95	ab95	ce 1b 07	dec $071b			dec 	gxIsDiffYLarger 			; set the dy larger flag
.cb98	ab98	ad 19 07	lda $0719			lda 	gxDiffX 					; set adjust and total other way round
.cb9b	ab9b	8d 1e 07	sta $071e			sta 	gxAdjust
.cb9e	ab9e	ad 1a 07	lda $071a			lda 	gxDiffY
.cba1	aba1	8d 1f 07	sta $071f			sta 	gxTotal
.cba4	aba4					_GDXNotLarger:
.cba4	aba4	ad 1f 07	lda $071f			lda 	gxTotal
.cba7	aba7	4a		lsr a				lsr 	a
.cba8	aba8	8d 1d 07	sta $071d			sta 	gxPosition
.cbab	abab	60		rts				rts
.0719						gxDiffX:
>0719								.fill 	1
.071a						gxDiffY:
>071a								.fill 	1
.071b						gxIsDiffYLarger:
>071b								.fill 	1
.071c						gxDXNegative:
>071c								.fill 	1
.071d						gxPosition:
>071d								.fill 	1
.071e						gxAdjust:
>071e								.fill 	1
.071f						gxTotal:
>071f								.fill 	1
.0720						gxAddSelect:
>0720								.fill 	1
.cbac	abac					GXSetColourMode:
.cbac	abac	a6 36		ldx $36				ldx 	gxzTemp0
.cbae	abae	8e 8a 06	stx $068a			stx 	gxColour 								; set colour
.cbb1	abb1	a5 37		lda $37				lda 	gxzTemp0+1 								;
.cbb3	abb3	8d 89 06	sta $0689			sta 	gxMode 									; set mode
.cbb6	abb6	29 03		and #$03			and 	#3 										; only interested in bits 0-3
.cbb8	abb8	9c 8c 06	stz $068c			stz 	gxANDValue 								; initially AND with 0, and EOR with Colour
.cbbb	abbb	ae 8a 06	ldx $068a			ldx 	gxColour
.cbbe	abbe	8e 8b 06	stx $068b			stx 	gxEORValue
.cbc1	abc1	c9 02		cmp #$02			cmp 	#2 										; if mode 2/3 And with colour
.cbc3	abc3	90 03		bcc $abc8			bcc 	_GXSDCNotAndColour
.cbc5	abc5	8e 8c 06	stx $068c			stx 	gxANDValue
.cbc8	abc8					_GXSDCNotAndColour:
.cbc8	abc8	d0 03		bne $abcd			bne 	_GXSDCNotAnd 							; mode 2, Don't EOR with colour
.cbca	abca	9c 8b 06	stz $068b			stz 	gxEORValue
.cbcd	abcd					_GXSDCNotAnd:
.cbcd	abcd	4a		lsr a				lsr 	a 										; if bit 0 set, 1's complement AND value
.cbce	abce	90 08		bcc $abd8			bcc 	_GXSDCNoFlip
.cbd0	abd0	ad 8c 06	lda $068c			lda	 	gxANDValue
.cbd3	abd3	49 ff		eor #$ff			eor 	#$FF
.cbd5	abd5	8d 8c 06	sta $068c			sta 	gxANDValue
.cbd8	abd8					_GXSDCNoFlip:
.cbd8	abd8	18		clc				clc
.cbd9	abd9	60		rts				rts
.cbda	abda					GXPlotPoint:
.cbda	abda	20 5c af	jsr $af5c			jsr 	GXOpenBitmap 				; start drawing
.cbdd	abdd	20 6c af	jsr $af6c			jsr 	gxPositionCalc 				; setup gxzScreen, gxOffset and the position.
.cbe0	abe0	ac 8e 06	ldy $068e			ldy 	gxOffset
.cbe3	abe3	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel on the right
.cbe5	abe5	2d 8c 06	and $068c			and 	gxANDValue
.cbe8	abe8	4d 8b 06	eor $068b			eor 	gxEORValue
.cbeb	abeb	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.cbed	abed	20 64 af	jsr $af64			jsr 	GXCloseBitmap 				; stop drawing and exit
.cbf0	abf0	18		clc				clc
.cbf1	abf1	60		rts				rts
.cbf2	abf2					GXFillRectangle:
.cbf2	abf2	38		sec				sec
.cbf3	abf3	80 01		bra $abf6			bra 	GXRectangle
.cbf5	abf5					GXFrameRectangle:
.cbf5	abf5	18		clc				clc
.cbf6	abf6					GXRectangle:
.cbf6	abf6	ad 85 06	lda $0685			lda 	gxBitmapsOn
.cbf9	abf9	f0 35		beq $ac30			beq 	_GXRFail
.cbfb	abfb	08		php				php 								; save Fill flag (CS)
.cbfc	abfc	20 5c af	jsr $af5c			jsr 	GXOpenBitmap 				; start drawing
.cbff	abff	20 84 b0	jsr $b084			jsr 	GXSortXY 					; sort both X and Y so top left/bottom right
.cc02	ac02	20 6c af	jsr $af6c			jsr 	gxPositionCalc 				; setup gxzScreen, gxOffset and the position.
.cc05	ac05	38		sec				sec 								; sec = Draw line
.cc06	ac06	20 32 ac	jsr $ac32			jsr 	GXDrawLineX1X0 				; draw a line length X1-X0
.cc09	ac09	ad 7e 06	lda $067e			lda 	gxY0 						; reached end of rectangle ?
.cc0c	ac0c	cd 82 06	cmp $0682			cmp 	gxY1
.cc0f	ac0f	f0 19		beq $ac2a			beq 	_GXRectangleExit
.cc11	ac11					_GXRectLoop:
.cc11	ac11	20 c2 af	jsr $afc2			jsr 	GXMovePositionDown 			; down one.
.cc14	ac14	ee 7e 06	inc $067e			inc 	gxY0 						; change Y pos
.cc17	ac17	ad 7e 06	lda $067e			lda 	gxY0 						; reached last line
.cc1a	ac1a	cd 82 06	cmp $0682			cmp 	gxY1
.cc1d	ac1d	f0 07		beq $ac26			beq 	_GXLastLine
.cc1f	ac1f	28		plp				plp 								; get flag back
.cc20	ac20	08		php				php
.cc21	ac21	20 32 ac	jsr $ac32			jsr 	GXDrawLineX1X0 				; draw horizontal line
.cc24	ac24	80 eb		bra $ac11			bra 	_GXRectLoop
.cc26	ac26					_GXLastLine:
.cc26	ac26	38		sec				sec
.cc27	ac27	20 32 ac	jsr $ac32			jsr 	GXDrawLineX1X0
.cc2a	ac2a					_GXRectangleExit:
.cc2a	ac2a	68		pla				pla 								; throw fill flag.
.cc2b	ac2b	20 64 af	jsr $af64			jsr 	GXCloseBitmap 				; stop drawing and exit
.cc2e	ac2e	18		clc				clc
.cc2f	ac2f	60		rts				rts
.cc30	ac30					_GXRFail:
.cc30	ac30	38		sec				sec
.cc31	ac31	60		rts				rts
.cc32	ac32					GXDrawLineX1X0:
.cc32	ac32	08		php				php 								; save solid/either-end
.cc33	ac33	38		sec				sec
.cc34	ac34	ad 80 06	lda $0680			lda		gxX1
.cc37	ac37	ed 7c 06	sbc $067c			sbc 	gxX0
.cc3a	ac3a	85 36		sta $36				sta 	gxzTemp0
.cc3c	ac3c	ad 81 06	lda $0681			lda 	gxX1+1
.cc3f	ac3f	ed 7d 06	sbc $067d			sbc 	gxX0+1
.cc42	ac42	85 37		sta $37				sta 	gxzTemp0+1
.cc44	ac44	28		plp				plp
.cc45	ac45					GXDrawLineTemp0:
.cc45	ac45	a5 3c		lda $3c				lda 	gxzScreen 						; push gxzScreen, gxOffset and GXEditSlot on stack
.cc47	ac47	48		pha				pha
.cc48	ac48	a5 3d		lda $3d				lda 	gxzScreen+1
.cc4a	ac4a	48		pha				pha
.cc4b	ac4b	ad 8e 06	lda $068e			lda 	gxOffset
.cc4e	ac4e	48		pha				pha
.cc4f	ac4f	a5 0b		lda $0b				lda 	GXEditSlot
.cc51	ac51	48		pha				pha
.cc52	ac52	ac 8e 06	ldy $068e			ldy 	gxOffset 					; Y offset
.cc55	ac55	90 1e		bcc $ac75			bcc 	_GXDLTEndPoints 			; if CC draw end points only.
.cc57	ac57					_GXDLTLine:
.cc57	ac57	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel
.cc59	ac59	2d 8c 06	and $068c			and 	gxANDValue
.cc5c	ac5c	4d 8b 06	eor $068b			eor 	gxEORValue
.cc5f	ac5f	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.cc61	ac61	a5 36		lda $36				lda 	gxzTemp0 					; decrement counter
.cc63	ac63	d0 04		bne $ac69			bne 	_GXDLTNoBorrow
.cc65	ac65	c6 37		dec $37				dec 	gxzTemp0+1 					; borrow, if goes -ve then exit
.cc67	ac67	30 2e		bmi $ac97			bmi 	_GXDLTExit
.cc69	ac69					_GXDLTNoBorrow:
.cc69	ac69	c6 36		dec $36				dec 	gxzTemp0
.cc6b	ac6b	c8		iny				iny 								; next slot.
.cc6c	ac6c	d0 e9		bne $ac57			bne 	_GXDLTLine
.cc6e	ac6e	e6 3d		inc $3d				inc 	gxzScreen+1 					; carry to next
.cc70	ac70	20 a5 ac	jsr $aca5			jsr 	GXDLTCheckWrap				; check for new page.
.cc73	ac73	80 e2		bra $ac57			bra 	_GXDLTLine
.cc75	ac75					_GXDLTEndPoints:
.cc75	ac75	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel
.cc77	ac77	2d 8c 06	and $068c			and 	gxANDValue
.cc7a	ac7a	4d 8b 06	eor $068b			eor 	gxEORValue
.cc7d	ac7d	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.cc7f	ac7f	98		tya				tya 								; advance to right side
.cc80	ac80	18		clc				clc
.cc81	ac81	65 36		adc $36				adc 	gxzTemp0
.cc83	ac83	a8		tay				tay
.cc84	ac84	a5 3d		lda $3d				lda 	gxzScreen+1
.cc86	ac86	65 37		adc $37				adc 	gxzTemp0+1
.cc88	ac88	85 3d		sta $3d				sta 	gxzScreen+1
.cc8a	ac8a	20 a5 ac	jsr $aca5			jsr 	GXDLTCheckWrap 			; fix up.
.cc8d	ac8d	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel on the right
.cc8f	ac8f	2d 8c 06	and $068c			and 	gxANDValue
.cc92	ac92	4d 8b 06	eor $068b			eor 	gxEORValue
.cc95	ac95	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.cc97	ac97					_GXDLTExit:
.cc97	ac97	68		pla				pla
.cc98	ac98	85 0b		sta $0b				sta 	GXEditSlot
.cc9a	ac9a	68		pla				pla
.cc9b	ac9b	8d 8e 06	sta $068e			sta 	gxOffset
.cc9e	ac9e	68		pla				pla
.cc9f	ac9f	85 3d		sta $3d				sta 	gxzScreen+1
.cca1	aca1	68		pla				pla
.cca2	aca2	85 3c		sta $3c				sta 	gxzScreen
.cca4	aca4	60		rts				rts
.cca5	aca5					GXDLTCheckWrap:
.cca5	aca5	a5 3d		lda $3d				lda 	gxzScreen+1 					; check end of page
.cca7	aca7	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8)
.cca9	aca9	90 06		bcc $acb1			bcc 	_GXDLTCWExit
.ccab	acab	e9 20		sbc #$20			sbc 	#$20 						; fix up
.ccad	acad	85 3d		sta $3d				sta 	gxzScreen+1
.ccaf	acaf	e6 0b		inc $0b				inc 	GXEditSlot
.ccb1	acb1					_GXDLTCWExit:
.ccb1	acb1	60		rts				rts
.ccb2	acb2					GXDrawGraphicElement:
.ccb2	acb2	8d 21 07	sta $0721			sta 	gxSize 						; save size
.ccb5	acb5	3a		dec a				dec 	a
.ccb6	acb6	8d 22 07	sta $0722			sta 	gxMask 						; and mask
.ccb9	acb9	ad 85 06	lda $0685			lda 	gxBitmapsOn 				; check BMP on
.ccbc	acbc	f0 67		beq $ad25			beq 	_GXSLFail
.ccbe	acbe	ad 7e 06	lda $067e			lda 	gxY0 						; push Y on stack
.ccc1	acc1	48		pha				pha
.ccc2	acc2	8c 24 07	sty $0724			sty 	gxAcquireVector+1 			; and acquisition vector
.ccc5	acc5	8e 23 07	stx $0723			stx 	gxAcquireVector
.ccc8	acc8	20 5c af	jsr $af5c			jsr 	GXOpenBitmap 				; open the bitmap.
.cccb	accb	ad 26 07	lda $0726			lda 	gxUseMode 					; scale bits
.ccce	acce	4a		lsr a				lsr 	a
.cccf	accf	4a		lsr a				lsr 	a
.ccd0	acd0	4a		lsr a				lsr 	a
.ccd1	acd1	29 07		and #$07			and		#7
.ccd3	acd3	1a		inc a				inc 	a
.ccd4	acd4	8d 25 07	sta $0725			sta 	gxScale
.ccd7	acd7	64 38		stz $38				stz 	gxzTemp1					; start first line
.ccd9	acd9					_GXGELoop:
.ccd9	acd9	a5 38		lda $38				lda 	gxzTemp1 					; current line number to read.
.ccdb	acdb	2c 26 07	bit $0726			bit 	gxUseMode 					; check for flip.
.ccde	acde	10 06		bpl $ace6			bpl		_GXNoVFlip
.cce0	ace0	ad 22 07	lda $0722			lda 	gxMask
.cce3	ace3	38		sec				sec
.cce4	ace4	e5 38		sbc $38				sbc 	gxzTemp1
.cce6	ace6					_GXNoVFlip:
.cce6	ace6	aa		tax				tax 								; get the Xth line.
.cce7	ace7	20 27 ad	jsr $ad27			jsr 	_GXCallAcquire 				; get that data.
.ccea	acea	ad 25 07	lda $0725			lda 	gxScale 					; do scale identical copies of that line.
.cced	aced	85 39		sta $39				sta 	gxzTemp1+1
.ccef	acef					_GXGELoop2:
.ccef	acef	ad 7e 06	lda $067e			lda 	gxY0 						; off screen
.ccf2	acf2	cd 88 06	cmp $0688			cmp 	gxHeight
.ccf5	acf5	b0 10		bcs $ad07			bcs 	_GXDGEExit
.ccf7	acf7	20 2a ad	jsr $ad2a			jsr 	GXRenderOneLine 			; render line
.ccfa	acfa	c6 39		dec $39				dec 	gxzTemp1+1 					; scale times.
.ccfc	acfc	d0 f1		bne $acef			bne 	_GXGELoop2
.ccfe	acfe	e6 38		inc $38				inc 	gxzTemp1 					; done all lines.
.cd00	ad00	a5 38		lda $38				lda 	gxzTemp1
.cd02	ad02	cd 21 07	cmp $0721			cmp 	gxSize
.cd05	ad05	d0 d2		bne $acd9			bne 	_GXGELoop
.cd07	ad07					_GXDGEExit:
.cd07	ad07	68		pla				pla 								; restore Y for next time
.cd08	ad08	8d 7e 06	sta $067e			sta 	gxY0
.cd0b	ad0b	ae 25 07	ldx $0725			ldx 	gxScale 					; get scale (1-8)
.cd0e	ad0e					_GXShiftLeft:
.cd0e	ad0e	18		clc				clc
.cd0f	ad0f	ad 21 07	lda $0721			lda 	gxSize
.cd12	ad12	6d 7c 06	adc $067c			adc 	gxX0
.cd15	ad15	8d 7c 06	sta $067c			sta 	gxX0
.cd18	ad18	90 03		bcc $ad1d			bcc 	_GXSLNoCarry
.cd1a	ad1a	ee 7d 06	inc $067d			inc 	gxX0+1
.cd1d	ad1d					_GXSLNoCarry:
.cd1d	ad1d	ca		dex				dex
.cd1e	ad1e	d0 ee		bne $ad0e			bne 	_GXShiftLeft
.cd20	ad20	20 64 af	jsr $af64			jsr 	GXCloseBitmap
.cd23	ad23	18		clc				clc
.cd24	ad24	60		rts				rts
.cd25	ad25					_GXSLFail:
.cd25	ad25	38		sec				sec
.cd26	ad26	60		rts				rts
.cd27	ad27					_GXCallAcquire:
.cd27	ad27	6c 23 07	jmp ($0723)			jmp 	(gxAcquireVector)
.cd2a	ad2a					GXRenderOneLine:
.cd2a	ad2a	20 6c af	jsr $af6c			jsr 	gxPositionCalc 				; calculate position/offset.
.cd2d	ad2d	ac 8e 06	ldy $068e			ldy 	gxOffset 					; Y contains position.
.cd30	ad30	64 3a		stz $3a				stz 	gxzTemp2 					; do size pixels
.cd32	ad32					_GXROLLoop1:
.cd32	ad32	ad 25 07	lda $0725			lda 	gxScale 					; set to do 'scale' times
.cd35	ad35	85 3b		sta $3b				sta 	gxzTemp2+1
.cd37	ad37					_GXROLLoop2:
.cd37	ad37	a5 3a		lda $3a				lda 	gxzTemp2 					; get current pixel
.cd39	ad39	2c 89 06	bit $0689			bit 	gxMode 						; check H Flip
.cd3c	ad3c	50 06		bvc $ad44			bvc 	_GXNoHFlip
.cd3e	ad3e	ad 22 07	lda $0722			lda 	gxMask
.cd41	ad41	38		sec				sec
.cd42	ad42	e5 3a		sbc $3a				sbc 	gxzTemp2
.cd44	ad44					_GXNoHFlip:
.cd44	ad44	aa		tax				tax 								; read from the pixel buffer
.cd45	ad45	bd 27 06	lda $0627,x			lda 	gxPixelBuffer,x
.cd48	ad48	d0 07		bne $ad51			bne 	_GXDraw 					; draw if non zero
.cd4a	ad4a	ad 26 07	lda $0726			lda 	gxUseMode 					; check to see if solid background
.cd4d	ad4d	29 04		and #$04			and 	#4
.cd4f	ad4f	f0 0a		beq $ad5b			beq 	_GXZeroPixel
.cd51	ad51					_GXDraw:
.cd51	ad51	b1 3c		lda ($3c),y			lda 	(gxzScreen),y
.cd53	ad53	2d 8c 06	and $068c			and 	gxANDValue
.cd56	ad56	5d 27 06	eor $0627,x			eor 	gxPixelBuffer,x
.cd59	ad59	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.cd5b	ad5b					_GXZeroPixel:
.cd5b	ad5b	c8		iny				iny 								; advance pointer
.cd5c	ad5c	d0 05		bne $ad63			bne 	_GXNoShift
.cd5e	ad5e	e6 3d		inc $3d				inc 	gxzScreen+1 				; carry to next
.cd60	ad60	20 a5 ac	jsr $aca5			jsr 	GXDLTCheckWrap				; check for new page.
.cd63	ad63					_GXNoShift:
.cd63	ad63	c6 3b		dec $3b				dec 	gxzTemp2+1 					; do the inner loop gxScale times.
.cd65	ad65	d0 d0		bne $ad37			bne 	_GXROLLoop2
.cd67	ad67	e6 3a		inc $3a				inc 	gxzTemp2 					; next pixel.
.cd69	ad69	a5 3a		lda $3a				lda 	gxzTemp2
.cd6b	ad6b	cd 21 07	cmp $0721			cmp 	gxSize
.cd6e	ad6e	d0 c2		bne $ad32			bne 	_GXROLLoop1
.cd70	ad70	ee 7e 06	inc $067e			inc 	gxY0
.cd73	ad73	60		rts				rts
.0721						gxSize:
>0721								.fill 	1
.0722						gxMask:
>0722								.fill 	1
.0723						gxAcquireVector:
>0723								.fill 	2
.0725						gxScale:
>0725								.fill 	1
.0726						gxUseMode:
>0726								.fill 	1
.cd74	ad74					GXFontHandler:
.cd74	ad74	a5 37		lda $37				lda 	gxzTemp0+1 					; eor with mode
.cd76	ad76	4d 89 06	eor $0689			eor 	gxMode
.cd79	ad79	8d 26 07	sta $0726			sta 	gxUseMode
.cd7c	ad7c	64 37		stz $37				stz 	gxzTemp0+1 					; gxzTemp0 is font #
.cd7e	ad7e	06 36		asl $36				asl	 	gxzTemp0 					; x 2
.cd80	ad80	26 37		rol $37				rol	 	gxzTemp0+1
.cd82	ad82	06 36		asl $36				asl	 	gxzTemp0 					; x 4
.cd84	ad84	26 37		rol $37				rol	 	gxzTemp0+1
.cd86	ad86	06 36		asl $36				asl	 	gxzTemp0 					; x 8
.cd88	ad88	26 37		rol $37				rol	 	gxzTemp0+1
.cd8a	ad8a	a5 37		lda $37				lda 	gxzTemp0+1 					; put in page C0
.cd8c	ad8c	09 c0		ora #$c0			ora 	#$C0
.cd8e	ad8e	85 37		sta $37				sta 	gxzTemp0+1
.cd90	ad90	a9 08		lda #$08			lda 	#8 							; size 8x8
.cd92	ad92	a2 9a		ldx #$9a			ldx 	#GXGetGraphicDataFont & $FF ; XY = Graphic Data retrieval routine
.cd94	ad94	a0 ad		ldy #$ad			ldy 	#GXGetGraphicDataFont >> 8
.cd96	ad96	20 b2 ac	jsr $acb2			jsr 	GXDrawGraphicElement
.cd99	ad99	60		rts				rts
.cd9a	ad9a					GXGetGraphicDataFont:
.cd9a	ad9a	8a		txa				txa 								; X->Y
.cd9b	ad9b	a8		tay				tay
.cd9c	ad9c	a6 01		ldx $01				ldx 	1 							; preserve old value
.cd9e	ad9e	a9 01		lda #$01			lda 	#1 							; access page 1 (font memory)
.cda0	ada0	85 01		sta $01				sta 	1
.cda2	ada2	b1 36		lda ($36),y			lda 	(gxzTemp0),y 				; read the font element.
.cda4	ada4	86 01		stx $01				stx 	1 							; put old value back.
.cda6	ada6	a2 00		ldx #$00			ldx 	#0 							; do 8 times
.cda8	ada8					_GXExpand:
.cda8	ada8	9e 27 06	stz $0627,x			stz 	gxPixelBuffer,x 			; zero in pixel buffer
.cdab	adab	0a		asl a				asl 	a 							; shift bit 7 into C
.cdac	adac	90 08		bcc $adb6			bcc 	_GXNoPixel
.cdae	adae	48		pha				pha 								; if set, set pixel buffer to current colour.
.cdaf	adaf	ad 8a 06	lda $068a			lda 	gxColour
.cdb2	adb2	9d 27 06	sta $0627,x			sta 	gxPixelBuffer,x
.cdb5	adb5	68		pla				pla
.cdb6	adb6					_GXNoPixel:
.cdb6	adb6	e8		inx				inx 								; do the whole byte.
.cdb7	adb7	e0 08		cpx #$08			cpx 	#8
.cdb9	adb9	d0 ed		bne $ada8			bne 	_GXExpand
.cdbb	adbb	60		rts				rts
.cdbc	adbc					GXSpriteHandler:
.cdbc	adbc	ad 84 06	lda $0684			lda 	gxSpritesOn 				; sprites on ?
.cdbf	adbf	f0 23		beq $ade4			beq 	_GXSHExit
.cdc1	adc1	a5 37		lda $37				lda 	gxzTemp0+1 					; eor with mode
.cdc3	adc3	4d 89 06	eor $0689			eor 	gxMode
.cdc6	adc6	8d 26 07	sta $0726			sta 	gxUseMode
.cdc9	adc9	a6 36		ldx $36				ldx 	gxzTemp0 					; sprite #
.cdcb	adcb	da		phx				phx
.cdcc	adcc	20 5c af	jsr $af5c			jsr 	GXOpenBitmap 				; can access sprite information
.cdcf	adcf	68		pla				pla
.cdd0	add0	20 3d b0	jsr $b03d			jsr 	GXFindSprite 				; get the sprite address
.cdd3	add3	08		php				php
.cdd4	add4	20 64 af	jsr $af64			jsr 	GXCloseBitmap
.cdd7	add7	28		plp				plp
.cdd8	add8	b0 0a		bcs $ade4			bcs		_GXSHExit 					; exit if find failed.
.cdda	adda	ad 27 07	lda $0727			lda 	gxSizePixels 				; return size
.cddd	addd	a2 e5		ldx #$e5			ldx 	#GXSpriteAcquire & $FF
.cddf	addf	a0 ad		ldy #$ad			ldy 	#GXSpriteAcquire >> 8
.cde1	ade1	20 b2 ac	jsr $acb2			jsr 	GXDrawGraphicElement
.cde4	ade4					_GXSHExit:
.cde4	ade4	60		rts				rts
.cde5	ade5					GXSpriteAcquire:
.cde5	ade5	ad 87 06	lda $0687			lda 	gxSpritePage				; point to base page
.cde8	ade8	85 0b		sta $0b				sta 	GXEditSlot
.cdea	adea	86 36		stx $36				stx 	zTemp0 						; row number x 1,2,3,4
.cdec	adec	a9 00		lda #$00			lda 	#0
.cdee	adee	ae 28 07	ldx $0728			ldx 	gxSizeBits
.cdf1	adf1					_GXTimesRowNumber:
.cdf1	adf1	18		clc				clc
.cdf2	adf2	65 36		adc $36				adc 	zTemp0
.cdf4	adf4	ca		dex				dex
.cdf5	adf5	10 fa		bpl $adf1			bpl 	_GXTimesRowNumber
.cdf7	adf7	64 37		stz $37				stz 	gxzTemp0+1
.cdf9	adf9	0a		asl a				asl 	a 							; row x 2,4,6,8
.cdfa	adfa	26 37		rol $37				rol 	gxzTemp0+1
.cdfc	adfc	0a		asl a				asl 	a 							; row x 4,8,12,16
.cdfd	adfd	26 37		rol $37				rol 	gxzTemp0+1
.cdff	adff	0a		asl a				asl 	a 							; row x 8,16,24,32
.ce00	ae00	26 37		rol $37				rol 	gxzTemp0+1
.ce02	ae02	85 36		sta $36				sta 	gxzTemp0
.ce04	ae04	18		clc				clc 								; add base address.
.ce05	ae05	a5 36		lda $36				lda 	gxzTemp0
.ce07	ae07	6d 2a 07	adc $072a			adc 	gxSpriteOffset
.ce0a	ae0a	85 36		sta $36				sta 	gxzTemp0
.ce0c	ae0c	a5 37		lda $37				lda 	gxzTemp0+1
.ce0e	ae0e	6d 2b 07	adc $072b			adc 	gxSpriteOffset+1
.ce11	ae11					_GXSAFindPage:
.ce11	ae11	c9 20		cmp #$20			cmp 	#$20 						; on this page
.ce13	ae13	90 06		bcc $ae1b			bcc 	_GXSAFoundPage
.ce15	ae15	e9 20		sbc #$20			sbc 	#$20 						; forward one page
.ce17	ae17	e6 0b		inc $0b				inc 	GXEditSlot
.ce19	ae19	80 f6		bra $ae11			bra 	_GXSAFindPage
.ce1b	ae1b					_GXSAFoundPage:
.ce1b	ae1b	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; physical address of page.
.ce1d	ae1d	85 37		sta $37				sta 	gxzTemp0+1 					; gxzTemp0 now points to the page
.ce1f	ae1f	a0 00		ldy #$00			ldy 	#0
.ce21	ae21					_GXSACopyLoop:
.ce21	ae21	b1 36		lda ($36),y			lda 	(gxzTemp0),y
.ce23	ae23	99 27 06	sta $0627,y			sta 	gxPixelBuffer,y
.ce26	ae26	c8		iny				iny
.ce27	ae27	cc 27 07	cpy $0727			cpy 	gxSizePixels
.ce2a	ae2a	d0 f5		bne $ae21			bne 	_GXSACopyLoop
.ce2c	ae2c	60		rts				rts
.ce2d	ae2d					GXSelect:
.ce2d	ae2d	ad 84 06	lda $0684			lda 	gxSpritesOn
.ce30	ae30	f0 22		beq $ae54			beq 	_GXSFail
.ce32	ae32	a5 36		lda $36				lda 	gxzTemp0 					; illegal sprite #
.ce34	ae34	c9 40		cmp #$40			cmp 	#64
.ce36	ae36	b0 1c		bcs $ae54			bcs 	_GXSFail
.ce38	ae38	8d 8f 06	sta $068f			sta 	GSCurrentSpriteID
.ce3b	ae3b	a4 37		ldy $37				ldy 	gxzTemp0+1 					; control value.
.ce3d	ae3d	a9 00		lda #$00			lda  	#0 							; multiply sprite # x 8 => A
.ce3f	ae3f	06 36		asl $36				asl 	gxzTemp0
.ce41	ae41	06 36		asl $36				asl 	gxzTemp0
.ce43	ae43	06 36		asl $36				asl 	gxzTemp0
.ce45	ae45	2a		rol a				rol 	a
.ce46	ae46	69 d9		adc #$d9			adc 	#$D9 						; sprite area
.ce48	ae48	8d 91 06	sta $0691			sta 	GSCurrentSpriteAddr+1 		; address to GSCurrentSprite and gxzTemp
.ce4b	ae4b	85 37		sta $37				sta 	gxzTemp0+1
.ce4d	ae4d	a5 36		lda $36				lda 	gxzTemp0
.ce4f	ae4f	8d 90 06	sta $0690			sta 	GSCurrentSpriteAddr
.ce52	ae52	18		clc				clc
.ce53	ae53	60		rts				rts
.ce54	ae54					_GXSFail:
.ce54	ae54	38		sec				sec
.ce55	ae55	60		rts				rts
.ce56	ae56					GXSelectImage:
.ce56	ae56	ad 84 06	lda $0684			lda 	gxSpritesOn
.ce59	ae59	f0 74		beq $aecf			beq 	_GXSIFail
.ce5b	ae5b	ad 91 06	lda $0691			lda 	GSCurrentSpriteAddr+1 		; check sprite selected
.ce5e	ae5e	f0 6f		beq $aecf			beq 	_GXSIFail 					; (checking the MSB)
.ce60	ae60	64 01		stz $01				stz 	1
.ce62	ae62	a5 37		lda $37				lda 	gxzTemp0+1 					; push show/hide on the stack.
.ce64	ae64	d0 6b		bne $aed1			bne 	_GXSIHide
.ce66	ae66	a5 36		lda $36				lda 	gxzTemp0 					; sprite image
.ce68	ae68	48		pha				pha
.ce69	ae69	20 5c af	jsr $af5c			jsr 	GXOpenBitmap
.ce6c	ae6c	68		pla				pla
.ce6d	ae6d	20 3d b0	jsr $b03d			jsr 	GXFindSprite
.ce70	ae70	b0 5a		bcs $aecc			bcs 	_GXSICloseFail 				; no image
.ce72	ae72	a0 01		ldy #$01			ldy 	#1
.ce74	ae74	ad 90 06	lda $0690			lda 	GSCurrentSpriteAddr
.ce77	ae77	85 36		sta $36				sta 	gxzTemp0
.ce79	ae79	ad 91 06	lda $0691			lda 	GSCurrentSpriteAddr+1
.ce7c	ae7c	85 37		sta $37				sta 	gxzTemp0+1
.ce7e	ae7e	ad 2a 07	lda $072a			lda 	gxSpriteOffset
.ce81	ae81	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.ce83	ae83	18		clc				clc
.ce84	ae84	ad 2b 07	lda $072b			lda 	gxSpriteOffset+1
.ce87	ae87	6d 92 06	adc $0692			adc 	gxSpriteOffsetBase
.ce8a	ae8a	c8		iny				iny
.ce8b	ae8b	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.ce8d	ae8d	ad 93 06	lda $0693			lda 	gxSpriteOffsetBase+1
.ce90	ae90	69 00		adc #$00			adc 	#0
.ce92	ae92	c8		iny				iny
.ce93	ae93	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.ce95	ae95	ad 28 07	lda $0728			lda 	gxSizeBits 					; get raw size
.ce98	ae98	49 03		eor #$03			eor 	#3 							; make it right (00=32 etc.)
.ce9a	ae9a	2a		rol a				rol 	a 							; x 2
.ce9b	ae9b	0a		asl a				asl 	a 							; x 4
.ce9c	ae9c	0a		asl a				asl 	a 							; x 8
.ce9d	ae9d	0a		asl a				asl 	a 							; x 16
.ce9e	ae9e	0d 29 07	ora $0729			ora 	gxSpriteLUT 				; Or with LUT
.cea1	aea1	0a		asl a				asl 	a 							; 1 shift
.cea2	aea2	09 01		ora #$01			ora 	#1 							; enable sprite.
.cea4	aea4	92 36		sta ($36)			sta 	(gxzTemp0) 					; and write back
.cea6	aea6	20 64 af	jsr $af64			jsr 	GXCloseBitmap
.cea9	aea9	ae 8f 06	ldx $068f			ldx 	GSCurrentSpriteID 			; point to sprite entries.
.ceac	aeac	bd d4 06	lda $06d4,x			lda 	gxSpriteHigh,x 				; clear upper two bits of size
.ceaf	aeaf	29 3f		and #$3f			and 	#$3F
.ceb1	aeb1	9d d4 06	sta $06d4,x			sta 	gxSpriteHigh,x
.ceb4	aeb4	ad 28 07	lda $0728			lda 	gxSizeBits 					; get bit size
.ceb7	aeb7	6a		ror a				ror 	a 							; shift into bits 6/7
.ceb8	aeb8	6a		ror a				ror 	a
.ceb9	aeb9	6a		ror a				ror 	a
.ceba	aeba	29 c0		and #$c0			and 	#$C0
.cebc	aebc	1d d4 06	ora $06d4,x			ora 	gxSpriteHigh,x 				; put in  upper 2 bits of sprite data
.cebf	aebf	9d d4 06	sta $06d4,x			sta 	gxSpriteHigh,x
.cec2	aec2	bd 94 06	lda $0694,x			lda 	gxSpriteLow,x 				; clear hidden flag.
.cec5	aec5	29 7f		and #$7f			and 	#$7F
.cec7	aec7	9d 94 06	sta $0694,x			sta 	gxSpriteLow,x
.ceca	aeca	18		clc				clc
.cecb	aecb	60		rts				rts
.cecc	aecc					_GXSICloseFail:
.cecc	aecc	20 64 af	jsr $af64			jsr 	GXCloseBitmap
.cecf	aecf					_GXSIFail:
.cecf	aecf	38		sec				sec
.ced0	aed0	60		rts				rts
.ced1	aed1					_GXSIHide:
.ced1	aed1	ad 90 06	lda $0690			lda 	GSCurrentSpriteAddr  		; get Sprite h/w address and write there
.ced4	aed4	85 36		sta $36				sta 	gxzTemp0
.ced6	aed6	ad 91 06	lda $0691			lda 	GSCurrentSpriteAddr+1
.ced9	aed9	85 37		sta $37				sta 	gxzTemp0+1
.cedb	aedb	a9 00		lda #$00			lda 	#0
.cedd	aedd	92 36		sta ($36)			sta 	(gxzTemp0)
.cedf	aedf	ae 8f 06	ldx $068f			ldx 	GSCurrentSpriteID 			; get sprite ID
.cee2	aee2	bd 94 06	lda $0694,x			lda 	gxSpriteLow,x 				; set the hidden bit.
.cee5	aee5	09 80		ora #$80			ora 	#$80
.cee7	aee7	9d 94 06	sta $0694,x			sta 	gxSpriteLow,x
.ceea	aeea	18		clc				clc
.ceeb	aeeb	60		rts				rts
.ceec	aeec					GXMoveSprite:
.ceec	aeec	ad 84 06	lda $0684			lda 	gxSpritesOn
.ceef	aeef	f0 65		beq $af56			beq 	_GXSIFail
.cef1	aef1	ad 91 06	lda $0691			lda 	GSCurrentSpriteAddr+1 		; check sprite selected
.cef4	aef4	f0 60		beq $af56			beq 	_GXSIFail
.cef6	aef6	85 37		sta $37				sta 	gxzTemp0+1
.cef8	aef8	a0 04		ldy #$04			ldy 	#4
.cefa	aefa	ad 90 06	lda $0690			lda 	GSCurrentSpriteAddr
.cefd	aefd	85 36		sta $36				sta 	gxzTemp0
.ceff	aeff	ae 8f 06	ldx $068f			ldx 	GSCurrentSpriteID 			; get the size from the upper two bits
.cf02	af02	bd d4 06	lda $06d4,x			lda 	gxSpriteHigh,x
.cf05	af05	2a		rol a				rol 	a	 						; into bits 0,1.
.cf06	af06	2a		rol a				rol 	a
.cf07	af07	2a		rol a				rol 	a
.cf08	af08	29 03		and #$03			and 	#3
.cf0a	af0a	aa		tax				tax
.cf0b	af0b	bd 58 af	lda $af58,x			lda 	_GXMSOffset,x 				; get 32-SpriteSize/2
.cf0e	af0e	48		pha				pha
.cf0f	af0f	18		clc				clc
.cf10	af10	6d 7c 06	adc $067c			adc 	gxX0						; copy position.
.cf13	af13	91 36		sta ($36),y			sta 	(gxzTemp0),y
.cf15	af15	c8		iny				iny
.cf16	af16	ad 7d 06	lda $067d			lda 	gxX0+1
.cf19	af19	69 00		adc #$00			adc 	#0
.cf1b	af1b	91 36		sta ($36),y			sta 	(gxzTemp0),y
.cf1d	af1d	c8		iny				iny
.cf1e	af1e	68		pla				pla
.cf1f	af1f	18		clc				clc
.cf20	af20	6d 7e 06	adc $067e			adc 	gxY0
.cf23	af23	91 36		sta ($36),y			sta 	(gxzTemp0),y
.cf25	af25	a9 00		lda #$00			lda 	#0
.cf27	af27	69 00		adc #$00			adc 	#0
.cf29	af29	c8		iny				iny
.cf2a	af2a	91 36		sta ($36),y			sta 	(gxzTemp0),y
.cf2c	af2c	4e 7d 06	lsr $067d			lsr 	gxX0+1 						; divide X by 4
.cf2f	af2f	6e 7c 06	ror $067c			ror 	gxX0
.cf32	af32	4e 7c 06	lsr $067c			lsr 	gxX0
.cf35	af35	4e 7e 06	lsr $067e			lsr 	gxY0 						; divide Y by 4
.cf38	af38	4e 7e 06	lsr $067e			lsr 	gxY0
.cf3b	af3b	ae 8f 06	ldx $068f			ldx 	GSCurrentSpriteID 			; copy X/4 and Y/4 into the status bytes
.cf3e	af3e	bd 94 06	lda $0694,x			lda 	gxSpriteLow,x
.cf41	af41	29 80		and #$80			and 	#$80
.cf43	af43	0d 7c 06	ora $067c			ora 	gxX0
.cf46	af46	9d 94 06	sta $0694,x			sta 	gxSpriteLow,x
.cf49	af49	bd d4 06	lda $06d4,x			lda 	gxSpriteHigh,x
.cf4c	af4c	29 c0		and #$c0			and 	#$C0
.cf4e	af4e	0d 7e 06	ora $067e			ora 	gxY0
.cf51	af51	9d d4 06	sta $06d4,x			sta 	gxSpriteHigh,x
.cf54	af54	18		clc				clc
.cf55	af55	60		rts				rts
.cf56	af56					_GXSIFail:
.cf56	af56	38		sec				sec
.cf57	af57	60		rts				rts
.cf58	af58					_GXMSOffset:
>cf58	af58	1c						.byte 	32-8/2
>cf59	af59	18						.byte 	32-16/2
>cf5a	af5a	14						.byte 	32-24/2
>cf5b	af5b	10						.byte 	32-32/2
.cf5c	af5c					GXOpenBitmap:
.cf5c	af5c	78		sei				sei 								; no interrupts here
.cf5d	af5d	a5 0b		lda $0b				lda 	GXEditSlot 					; Save the original LUT slot value
.cf5f	af5f	8d 8d 06	sta $068d			sta 	gxOriginalLUTValue
.cf62	af62	58		cli				cli
.cf63	af63	60		rts				rts
.cf64	af64					GXCloseBitmap:
.cf64	af64	78		sei				sei
.cf65	af65	ad 8d 06	lda $068d			lda 	gxOriginalLUTValue 			; restore LUT slot value
.cf68	af68	85 0b		sta $0b				sta 	GXEditSlot
.cf6a	af6a	58		cli				cli
.cf6b	af6b	60		rts				rts
.cf6c	af6c					gxPositionCalc:
.cf6c	af6c	a5 36		lda $36				lda 	gxzTemp0 					; save temp memory slot
.cf6e	af6e	48		pha				pha
.cf6f	af6f	ad 7e 06	lda $067e			lda 	gxY0 						; gxzScreen = Y0
.cf72	af72	85 3c		sta $3c				sta 	gxzScreen
.cf74	af74	64 3d		stz $3d				stz 	gxzScreen+1
.cf76	af76	06 3c		asl $3c				asl 	gxzScreen 						; gxzScreen = Y0 * 4
.cf78	af78	26 3d		rol $3d				rol 	gxzScreen+1
.cf7a	af7a	06 3c		asl $3c				asl 	gxzScreen
.cf7c	af7c	26 3d		rol $3d				rol 	gxzScreen+1
.cf7e	af7e	18		clc				clc 								; gxzScreen = Y0 * 5, as it's still in A
.cf7f	af7f	65 3c		adc $3c				adc 	gxzScreen
.cf81	af81	85 3c		sta $3c				sta 	gxzScreen
.cf83	af83	90 02		bcc $af87			bcc 	_GXPCNoCarry
.cf85	af85	e6 3d		inc $3d				inc 	gxzScreen+1
.cf87	af87					_GXPCNoCarry:
.cf87	af87	06 3c		asl $3c				asl 	gxzScreen 						; now Y0 * 10. Needs to be multiplied by another
.cf89	af89	26 3d		rol $3d				rol 	gxzScreen+1 					; 32. At this point the MSB contains the offset
.cf8b	af8b	a5 3d		lda $3d				lda	 	gxzScreen+1 					; so save this in zTemp0 and zero it.
.cf8d	af8d	85 36		sta $36				sta 	gxzTemp0
.cf8f	af8f	64 3d		stz $3d				stz 	gxzScreen+1
.cf91	af91	a9 05		lda #$05			lda 	#5 							; now multiply by 32, this puts this in the range 0..8191
.cf93	af93					_GXPCMultiply32:
.cf93	af93	06 3c		asl $3c				asl 	gxzScreen
.cf95	af95	26 3d		rol $3d				rol 	gxzScreen+1
.cf97	af97	3a		dec a				dec 	a
.cf98	af98	d0 f9		bne $af93			bne 	_GXPCMultiply32
.cf9a	af9a	18		clc				clc
.cf9b	af9b	ad 7c 06	lda $067c			lda 	gxX0 						; add X to this value, put the result in gxOffset, gxzScreen has to be on a page boundary
.cf9e	af9e	65 3c		adc $3c				adc 	gxzScreen
.cfa0	afa0	8d 8e 06	sta $068e			sta 	gxOffset
.cfa3	afa3	ad 7d 06	lda $067d			lda 	gxX0+1
.cfa6	afa6	65 3d		adc $3d				adc 	gxzScreen+1
.cfa8	afa8	c9 20		cmp #$20			cmp 	#$20 						; has it overflowed into the next one ?
.cfaa	afaa	90 04		bcc $afb0			bcc 	_GXPCNoOverflow
.cfac	afac	29 1f		and #$1f			and 	#$1F 						; fix it up
.cfae	afae	e6 36		inc $36				inc 	gxzTemp0 					; add 1 to the page number
.cfb0	afb0					_GXPCNoOverflow:
.cfb0	afb0	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; make it the address mapped in.
.cfb2	afb2	85 3d		sta $3d				sta 	gxzScreen+1
.cfb4	afb4	64 3c		stz $3c				stz 	gxzScreen
.cfb6	afb6	18		clc				clc
.cfb7	afb7	a5 36		lda $36				lda 	gxzTemp0 					; get the page number
.cfb9	afb9	6d 86 06	adc $0686			adc 	gxBasePage 					; by adding the base page
.cfbc	afbc	85 0b		sta $0b				sta 	GXEditSlot 				; and map it into memory.
.cfbe	afbe	68		pla				pla
.cfbf	afbf	85 36		sta $36				sta 	gxzTemp0
.cfc1	afc1	60		rts				rts
.cfc2	afc2					GXMovePositionDown:
.cfc2	afc2	18		clc				clc 								; add 320 to offset/temp+1
.cfc3	afc3	ad 8e 06	lda $068e			lda 	gxOffset
.cfc6	afc6	69 40		adc #$40			adc 	#64
.cfc8	afc8	8d 8e 06	sta $068e			sta 	gxOffset
.cfcb	afcb	a5 3d		lda $3d				lda 	gxzScreen+1
.cfcd	afcd	69 01		adc #$01			adc 	#1
.cfcf	afcf	85 3d		sta $3d				sta 	gxzScreen+1
.cfd1	afd1	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page
.cfd3	afd3	90 07		bcc $afdc			bcc 	_GXMPDExit
.cfd5	afd5	38		sec				sec  								; next page
.cfd6	afd6	e9 20		sbc #$20			sbc 	#$20
.cfd8	afd8	85 3d		sta $3d				sta 	gxzScreen+1
.cfda	afda	e6 0b		inc $0b				inc 	GXEditSlot
.cfdc	afdc					_GXMPDExit:
.cfdc	afdc	60		rts				rts
.cfdd	afdd					GXCollide:
.cfdd	afdd	a5 36		lda $36				lda 	gxzTemp0 					; check if sprite numbers are legal.
.cfdf	afdf	aa		tax				tax
.cfe0	afe0	05 37		ora $37				ora 	gxzTemp0+1
.cfe2	afe2	29 c0		and #$c0			and 	#$C0
.cfe4	afe4	38		sec				sec
.cfe5	afe5	d0 53		bne $b03a			bne 	_GXCollideFail 				; if either >= 64, fail.
.cfe7	afe7	a4 37		ldy $37				ldy 	gxzTemp0+1 					; at this point X is 1st sprite and Y is 2nd sprite.
.cfe9	afe9	b9 94 06	lda $0694,y			lda 	gxSpriteLow,y 				; check if either hidden bit is set
.cfec	afec	1d 94 06	ora $0694,x			ora 	gxSpriteLow,x
.cfef	afef	30 48		bmi $b039			bmi 	_GXOkayFail 				; if either hidden, then they cannot collide.
.cff1	aff1	18		clc				clc 								; need to calculate sum of sizes.
.cff2	aff2	b9 d4 06	lda $06d4,y			lda 	gxSpriteHigh,y
.cff5	aff5	7d d4 06	adc $06d4,x			adc 	gxSpriteHigh,x 				; at this point, CS, Bit 6 and 7 contain that sum.
.cff8	aff8	29 c0		and #$c0			and 	#$C0 					 	; mask off
.cffa	affa	6a		ror a				ror 	a 							; 5/6/7
.cffb	affb	4a		lsr a				lsr 	a 							; 4/5/6
.cffc	affc	4a		lsr a				lsr 	a 							; 3/4/5
.cffd	affd	4a		lsr a				lsr 	a 							; 2/3/4
.cffe	affe	18		clc				clc
.cfff	afff	69 08		adc #$08			adc 	#$08
.d001	b001	4a		lsr a				lsr 	a 							; adjust because all coordinates are divided by 4 to store.
.d002	b002	4a		lsr a				lsr 	a
.d003	b003	85 38		sta $38				sta 	gxzTemp1 					; so the difference between the centres has to be less than this.
.d005	b005	b9 d4 06	lda $06d4,y			lda 	gxSpriteHigh,y 				; calculate y1-y0
.d008	b008	29 3f		and #$3f			and 	#$3F
.d00a	b00a	85 39		sta $39				sta 	gxzTemp1+1
.d00c	b00c	38		sec				sec
.d00d	b00d	bd d4 06	lda $06d4,x			lda 	gxSpriteHigh,x
.d010	b010	29 3f		and #$3f			and 	#$3F
.d012	b012	e5 39		sbc $39				sbc 	gxzTemp1+1
.d014	b014	b0 03		bcs $b019			bcs 	_GXCAbs1 					; calculate |y1-y0|
.d016	b016	49 ff		eor #$ff			eor 	#$FF
.d018	b018	1a		inc a				inc 	a
.d019	b019					_GXCAbs1:
.d019	b019	c5 38		cmp $38				cmp 	gxzTemp1 					; if >= difference then no overlap
.d01b	b01b	b0 1c		bcs $b039			bcs 	_GXOkayFail
.d01d	b01d	85 39		sta $39				sta 	gxzTemp1+1 					; save |y1-y0|
.d01f	b01f	38		sec				sec 								; calculate |x1-x0|
.d020	b020	b9 94 06	lda $0694,y			lda 	gxSpriteLow,y
.d023	b023	fd 94 06	sbc $0694,x			sbc 	gxSpriteLow,x
.d026	b026	b0 03		bcs $b02b			bcs 	_GXCAbs2
.d028	b028	49 ff		eor #$ff			eor 	#$FF
.d02a	b02a	1a		inc a				inc 	a
.d02b	b02b					_GXCAbs2:
.d02b	b02b	c5 38		cmp $38				cmp 	gxzTemp1 					; if >= difference then no overlap
.d02d	b02d	b0 0a		bcs $b039			bcs 	_GXOkayFail
.d02f	b02f	c5 39		cmp $39				cmp 	gxzTemp1+1 					; is it less than the previous one.
.d031	b031	90 02		bcc $b035			bcc 	_GXCHaveLowest
.d033	b033	a5 39		lda $39				lda 	gxzTemp1+1 					; if not, that's the smallest difference.
.d035	b035					_GXCHaveLowest:
.d035	b035	0a		asl a				asl 	a 							; scale to allow for >> 2
.d036	b036	0a		asl a				asl 	a
.d037	b037	18		clc				clc
.d038	b038	60		rts				rts
.d039	b039					_GXOkayFail:
.d039	b039	18		clc				clc
.d03a	b03a					_GXCollideFail:
.d03a	b03a	a9 ff		lda #$ff			lda 	#$FF
.d03c	b03c	60		rts				rts
.d03d	b03d					GXFindSprite:
.d03d	b03d	aa		tax				tax
.d03e	b03e	ad 87 06	lda $0687			lda 	gxSpritePage 				; access the base page of the sprite
.d041	b041	85 0b		sta $0b				sta 	GXEditSlot
.d043	b043	bd 00 61	lda $6100,x			lda 	GXMappingAddress+256,x 		; check a valid sprite
.d046	b046	1d 00 60	ora $6000,x			ora 	GXMappingAddress,x
.d049	b049	f0 33		beq $b07e			beq 	_GXFSFail
.d04b	b04b	bd 00 61	lda $6100,x			lda 	GXMappingAddress+256,x 		; MSB
.d04e	b04e	8d 2b 07	sta $072b			sta 	gxSpriteOffset+1
.d051	b051	bd 00 60	lda $6000,x			lda 	GXMappingAddress,x 			; LSB
.d054	b054	48		pha				pha 								; save twice
.d055	b055	48		pha				pha
.d056	b056	29 03		and #$03			and 	#3 							; get sprite size
.d058	b058	8d 28 07	sta $0728			sta 	gxSizeBits 					; save raw (0-3)
.d05b	b05b	aa		tax				tax
.d05c	b05c	bd 80 b0	lda $b080,x			lda 	_GXFXSSTTable,x 			; read sprite size
.d05f	b05f	8d 27 07	sta $0727			sta 	gxSizePixels 					; save (8/16/24/32)
.d062	b062	68		pla				pla 								; get LUT
.d063	b063	4a		lsr a				lsr		a
.d064	b064	4a		lsr a				lsr		a
.d065	b065	29 03		and #$03			and 	#3
.d067	b067	8d 29 07	sta $0729			sta 	gxSpriteLUT
.d06a	b06a	68		pla				pla 								; address, neeeds to be x 4
.d06b	b06b	29 f0		and #$f0			and 	#$F0
.d06d	b06d	8d 2a 07	sta $072a			sta 	gxSpriteOffset
.d070	b070	0e 2a 07	asl $072a			asl 	gxSpriteOffset
.d073	b073	2e 2b 07	rol $072b			rol 	gxSpriteOffset+1
.d076	b076	0e 2a 07	asl $072a			asl 	gxSpriteOffset
.d079	b079	2e 2b 07	rol $072b			rol 	gxSpriteOffset+1
.d07c	b07c	18		clc				clc
.d07d	b07d	60		rts				rts
.d07e	b07e					_GXFSFail:
.d07e	b07e	38		sec				sec
.d07f	b07f	60		rts				rts
.d080	b080					_GXFXSSTTable:
>d080	b080	08 10 18 20					.byte 	8,16,24,32
.0727						gxSizePixels:
>0727								.fill 	1
.0728						gxSizeBits:
>0728								.fill 	1
.0729						gxSpriteLUT:
>0729								.fill 	1
.072a						gxSpriteOffset:
>072a								.fill 	2
.d084	b084					GXSortXY:
.d084	b084	20 a2 b0	jsr $b0a2			jsr 	GXSortY 					; will be sorted on Y now
.d087	b087	ad 7c 06	lda $067c			lda 	gxX0 						; compare X0 v X1
.d08a	b08a	cd 80 06	cmp $0680			cmp 	gxX1
.d08d	b08d	ad 7d 06	lda $067d			lda 	gxX0+1
.d090	b090	ed 81 06	sbc $0681			sbc 	gxX1+1
.d093	b093	90 0c		bcc $b0a1			bcc 	_GXSXYExit 					; X0 < X1 exit
.d095	b095	a2 00		ldx #$00			ldx 	#0 							; swap them over
.d097	b097	a0 04		ldy #$04			ldy 	#4
.d099	b099	20 b6 b0	jsr $b0b6			jsr 	GXSwapXY
.d09c	b09c	e8		inx				inx
.d09d	b09d	c8		iny				iny
.d09e	b09e	20 b6 b0	jsr $b0b6			jsr 	GXSwapXY
.d0a1	b0a1					_GXSXYExit:
.d0a1	b0a1	60		rts				rts
.d0a2	b0a2					GXSortY:
.d0a2	b0a2	ad 7e 06	lda $067e			lda 	gxY0 						; if Y0 >= Y1
.d0a5	b0a5	cd 82 06	cmp $0682			cmp 	gxY1
.d0a8	b0a8	90 0b		bcc $b0b5			bcc 	_GXSYSorted
.d0aa	b0aa	a2 03		ldx #$03			ldx 	#3 							; swap 3-0
.d0ac	b0ac	a0 07		ldy #$07			ldy 	#7 							; with 4-7
.d0ae	b0ae					_GXSwap1:
.d0ae	b0ae	20 b6 b0	jsr $b0b6			jsr 	GXSwapXY
.d0b1	b0b1	88		dey				dey
.d0b2	b0b2	ca		dex				dex
.d0b3	b0b3	10 f9		bpl $b0ae			bpl 	_GXSwap1
.d0b5	b0b5					_GXSYSorted:
.d0b5	b0b5	60		rts				rts
.d0b6	b0b6					GXSwapXY:
.d0b6	b0b6	bd 7c 06	lda $067c,x			lda 	gxX0,x
.d0b9	b0b9	48		pha				pha
.d0ba	b0ba	b9 7c 06	lda $067c,y			lda 	gxX0,y
.d0bd	b0bd	9d 7c 06	sta $067c,x			sta 	gxX0,x
.d0c0	b0c0	68		pla				pla
.d0c1	b0c1	99 7c 06	sta $067c,y			sta 	gxX0,y
.d0c4	b0c4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_tokeniser.module

=1						tokeniserIntegrated=1
.d0c5	b0c5					KeywordSet0:
>d0c5	b0c5	00 65					.text	0,$65,""               ; $80 !0:EOF
>d0c7	b0c7	00 58					.text	0,$58,""               ; $81 !1:SH1
>d0c9	b0c9	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>d0cb	b0cb	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $83 ABS(
>d0d1	b0d1	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $84 ALLOC(
>d0d9	b0d9	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $85 ASC(
>d0df	b0df	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $86 CHR$(
>d0e6	b0e6	06 aa 45 56 45 4e 54 28			.text	6,$aa,"EVENT("         ; $87 EVENT(
>d0ee	b0ee	05 6b 46 41 4c 53 45			.text	5,$6b,"FALSE"          ; $88 FALSE
>d0f5	b0f5	05 44 46 52 41 43 28			.text	5,$44,"FRAC("          ; $89 FRAC(
>d0fc	b0fc	09 4a 47 45 54 44 41 54			.text	9,$4a,"GETDATE$("      ; $8a GETDATE$(
>d104	b104	45 24 28
>d107	b107	09 5b 47 45 54 54 49 4d			.text	9,$5b,"GETTIME$("      ; $8b GETTIME$(
>d10f	b10f	45 24 28
>d112	b112	04 0d 48 49 54 28			.text	4,$0d,"HIT("           ; $8c HIT(
>d118	b118	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $8d INT(
>d11e	b11e	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $8e ISVAL(
>d126	b126	05 5c 4a 4f 59 42 28			.text	5,$5c,"JOYB("          ; $8f JOYB(
>d12d	b12d	05 72 4a 4f 59 58 28			.text	5,$72,"JOYX("          ; $90 JOYX(
>d134	b134	05 73 4a 4f 59 59 28			.text	5,$73,"JOYY("          ; $91 JOYY(
>d13b	b13b	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $92 LEFT$(
>d143	b143	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $93 LEN(
>d149	b149	04 0e 4d 41 58 28			.text	4,$0e,"MAX("           ; $94 MAX(
>d14f	b14f	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $95 MID$(
>d156	b156	04 0c 4d 49 4e 28			.text	4,$0c,"MIN("           ; $96 MIN(
>d15c	b15c	04 19 4e 4f 54 28			.text	4,$19,"NOT("           ; $97 NOT(
>d162	b162	05 4d 50 45 45 4b 28			.text	5,$4d,"PEEK("          ; $98 PEEK(
>d169	b169	06 91 50 45 45 4b 44 28			.text	6,$91,"PEEKD("         ; $99 PEEKD(
>d171	b171	06 99 50 45 45 4b 4c 28			.text	6,$99,"PEEKL("         ; $9a PEEKL(
>d179	b179	06 a4 50 45 45 4b 57 28			.text	6,$a4,"PEEKW("         ; $9b PEEKW(
>d181	b181	08 3c 50 4c 41 59 49 4e			.text	8,$3c,"PLAYING("       ; $9c PLAYING(
>d189	b189	47 28
>d18b	b18b	07 e9 52 41 4e 44 4f 4d			.text	7,$e9,"RANDOM("        ; $9d RANDOM(
>d193	b193	28
>d194	b194	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $9e RIGHT$(
>d19c	b19c	28
>d19d	b19d	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $9f RND(
>d1a3	b1a3	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $a0 SGN(
>d1a9	b1a9	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $a1 SPC(
>d1af	b1af	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $a2 STR$(
>d1b6	b1b6	06 a9 54 49 4d 45 52 28			.text	6,$a9,"TIMER("         ; $a3 TIMER(
>d1be	b1be	04 40 54 52 55 45			.text	4,$40,"TRUE"           ; $a4 TRUE
>d1c4	b1c4	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $a5 VAL(
>d1ca	b1ca	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $a6 FOR
>d1cf	b1cf	02 8f 49 46				.text	2,$8f,"IF"             ; $a7 IF
>d1d3	b1d3	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $a8 PROC
>d1d9	b1d9	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $a9 REPEAT
>d1e1	b1e1	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $aa WHILE
>d1e8	b1e8	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $ab ENDIF
>d1ef	b1ef	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $ac ENDPROC
>d1f7	b1f7	43
>d1f8	b1f8	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $ad NEXT
>d1fe	b1fe	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $ae THEN
>d204	b204	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $af UNTIL
>d20b	b20b	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $b0 WEND
>d211	b211	02 9b 42 59				.text	2,$9b,"BY"             ; $b1 BY
>d215	b215	04 1c 43 41 4c 4c			.text	4,$1c,"CALL"           ; $b2 CALL
>d21b	b21b	06 b2 43 49 52 43 4c 45			.text	6,$b2,"CIRCLE"         ; $b3 CIRCLE
>d223	b223	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $b4 CLEAR
>d22a	b22a	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $b5 CLS
>d22f	b22f	05 7f 43 4f 4c 4f 52			.text	5,$7f,"COLOR"          ; $b6 COLOR
>d236	b236	06 d4 43 4f 4c 4f 55 52			.text	6,$d4,"COLOUR"         ; $b7 COLOUR
>d23e	b23e	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $b8 DATA
>d244	b244	03 da 44 49 4d				.text	3,$da,"DIM"            ; $b9 DIM
>d249	b249	06 db 44 4f 57 4e 54 4f			.text	6,$db,"DOWNTO"         ; $ba DOWNTO
>d251	b251	04 29 45 4c 53 45			.text	4,$29,"ELSE"           ; $bb ELSE
>d257	b257	04 34 46 52 4f 4d			.text	4,$34,"FROM"           ; $bc FROM
>d25d	b25d	03 e5 47 46 58				.text	3,$e5,"GFX"            ; $bd GFX
>d262	b262	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $be GOSUB
>d269	b269	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $bf GOTO
>d26f	b26f	04 24 48 45 52 45			.text	4,$24,"HERE"           ; $c0 HERE
>d275	b275	05 63 49 4d 41 47 45			.text	5,$63,"IMAGE"          ; $c1 IMAGE
>d27c	b27c	05 90 49 4e 50 55 54			.text	5,$90,"INPUT"          ; $c2 INPUT
>d283	b283	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $c3 LET
>d288	b288	04 28 4c 49 4e 45			.text	4,$28,"LINE"           ; $c4 LINE
>d28e	b28e	05 6b 4c 4f 43 41 4c			.text	5,$6b,"LOCAL"          ; $c5 LOCAL
>d295	b295	03 db 4f 46 46				.text	3,$db,"OFF"            ; $c6 OFF
>d29a	b29a	02 9d 4f 4e				.text	2,$9d,"ON"             ; $c7 ON
>d29e	b29e	07 20 4f 55 54 4c 49 4e			.text	7,$20,"OUTLINE"        ; $c8 OUTLINE
>d2a6	b2a6	45
>d2a7	b2a7	07 0f 50 41 4c 45 54 54			.text	7,$0f,"PALETTE"        ; $c9 PALETTE
>d2af	b2af	45
>d2b0	b2b0	04 3f 50 4c 4f 54			.text	4,$3f,"PLOT"           ; $ca PLOT
>d2b6	b2b6	04 2f 50 4f 4b 45			.text	4,$2f,"POKE"           ; $cb POKE
>d2bc	b2bc	05 73 50 4f 4b 45 44			.text	5,$73,"POKED"          ; $cc POKED
>d2c3	b2c3	05 7b 50 4f 4b 45 4c			.text	5,$7b,"POKEL"          ; $cd POKEL
>d2ca	b2ca	05 86 50 4f 4b 45 57			.text	5,$86,"POKEW"          ; $ce POKEW
>d2d1	b2d1	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $cf PRINT
>d2d8	b2d8	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $d0 READ
>d2de	b2de	04 2e 52 45 43 54			.text	4,$2e,"RECT"           ; $d1 RECT
>d2e4	b2e4	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $d2 REM
>d2e9	b2e9	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $d3 RETURN
>d2f1	b2f1	05 7b 53 4f 4c 49 44			.text	5,$7b,"SOLID"          ; $d4 SOLID
>d2f8	b2f8	05 89 53 4f 55 4e 44			.text	5,$89,"SOUND"          ; $d5 SOUND
>d2ff	b2ff	06 d7 53 50 52 49 54 45			.text	6,$d7,"SPRITE"         ; $d6 SPRITE
>d307	b307	04 45 54 45 58 54			.text	4,$45,"TEXT"           ; $d7 TEXT
>d30d	b30d	02 a3 54 4f				.text	2,$a3,"TO"             ; $d8 TO
>d311	b311	ff					.text	$FF
.d312	b312					KeywordSet1:
>d312	b312	00 65					.text	0,$65,""               ; $80 !0:EOF
>d314	b314	00 58					.text	0,$58,""               ; $81 !1:SH1
>d316	b316	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>d318	b318	08 4c 41 53 53 45 4d 42			.text	8,$4c,"ASSEMBLE"       ; $83 ASSEMBLE
>d320	b320	4c 45
>d322	b322	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $84 ASSERT
>d32a	b32a	06 bd 42 49 54 4d 41 50			.text	6,$bd,"BITMAP"         ; $85 BITMAP
>d332	b332	03 d7 45 4e 44				.text	3,$d7,"END"            ; $86 END
>d337	b337	07 11 45 58 50 4c 4f 44			.text	7,$11,"EXPLODE"        ; $87 EXPLODE
>d33f	b33f	45
>d340	b340	02 96 47 4f				.text	2,$96,"GO"             ; $88 GO
>d344	b344	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $89 LIST
>d34a	b34a	04 20 4c 4f 41 44			.text	4,$20,"LOAD"           ; $8a LOAD
>d350	b350	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $8b NEW
>d355	b355	04 2e 50 49 4e 47			.text	4,$2e,"PING"           ; $8c PING
>d35b	b35b	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $8d RESTORE
>d363	b363	45
>d364	b364	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $8e RUN
>d369	b369	04 2f 53 41 56 45			.text	4,$2f,"SAVE"           ; $8f SAVE
>d36f	b36f	07 0a 53 45 54 44 41 54			.text	7,$0a,"SETDATE"        ; $90 SETDATE
>d377	b377	45
>d378	b378	07 1b 53 45 54 54 49 4d			.text	7,$1b,"SETTIME"        ; $91 SETTIME
>d380	b380	45
>d381	b381	05 8d 53 48 4f 4f 54			.text	5,$8d,"SHOOT"          ; $92 SHOOT
>d388	b388	07 2a 53 50 52 49 54 45			.text	7,$2a,"SPRITES"        ; $93 SPRITES
>d390	b390	53
>d391	b391	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $94 STOP
>d397	b397	06 d5 56 45 52 49 46 59			.text	6,$d5,"VERIFY"         ; $95 VERIFY
>d39f	b39f	03 ee 58 47 4f				.text	3,$ee,"XGO"            ; $96 XGO
>d3a4	b3a4	05 78 58 4c 4f 41 44			.text	5,$78,"XLOAD"          ; $97 XLOAD
>d3ab	b3ab	03 eb 5a 41 50				.text	3,$eb,"ZAP"            ; $98 ZAP
>d3b0	b3b0	ff					.text	$FF
.d3b1	b3b1					KeywordSet2:
>d3b1	b3b1	00 65					.text	0,$65,""               ; $80 !0:EOF
>d3b3	b3b3	00 58					.text	0,$58,""               ; $81 !1:SH1
>d3b5	b3b5	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>d3b7	b3b7	03 c8 41 44 43				.text	3,$c8,"ADC"            ; $83 ADC
>d3bc	b3bc	03 d3 41 4e 44				.text	3,$d3,"AND"            ; $84 AND
>d3c1	b3c1	03 e0 41 53 4c				.text	3,$e0,"ASL"            ; $85 ASL
>d3c6	b3c6	03 c8 42 43 43				.text	3,$c8,"BCC"            ; $86 BCC
>d3cb	b3cb	03 d8 42 43 53				.text	3,$d8,"BCS"            ; $87 BCS
>d3d0	b3d0	03 d8 42 45 51				.text	3,$d8,"BEQ"            ; $88 BEQ
>d3d5	b3d5	03 df 42 49 54				.text	3,$df,"BIT"            ; $89 BIT
>d3da	b3da	03 d8 42 4d 49				.text	3,$d8,"BMI"            ; $8a BMI
>d3df	b3df	03 d5 42 4e 45				.text	3,$d5,"BNE"            ; $8b BNE
>d3e4	b3e4	03 de 42 50 4c				.text	3,$de,"BPL"            ; $8c BPL
>d3e9	b3e9	03 d5 42 52 41				.text	3,$d5,"BRA"            ; $8d BRA
>d3ee	b3ee	03 df 42 52 4b				.text	3,$df,"BRK"            ; $8e BRK
>d3f3	b3f3	03 db 42 56 43				.text	3,$db,"BVC"            ; $8f BVC
>d3f8	b3f8	03 eb 42 56 53				.text	3,$eb,"BVS"            ; $90 BVS
>d3fd	b3fd	03 d2 43 4c 43				.text	3,$d2,"CLC"            ; $91 CLC
>d402	b402	03 d3 43 4c 44				.text	3,$d3,"CLD"            ; $92 CLD
>d407	b407	03 d8 43 4c 49				.text	3,$d8,"CLI"            ; $93 CLI
>d40c	b40c	03 e5 43 4c 56				.text	3,$e5,"CLV"            ; $94 CLV
>d411	b411	03 e0 43 4d 50				.text	3,$e0,"CMP"            ; $95 CMP
>d416	b416	03 eb 43 50 58				.text	3,$eb,"CPX"            ; $96 CPX
>d41b	b41b	03 ec 43 50 59				.text	3,$ec,"CPY"            ; $97 CPY
>d420	b420	03 cc 44 45 43				.text	3,$cc,"DEC"            ; $98 DEC
>d425	b425	03 e1 44 45 58				.text	3,$e1,"DEX"            ; $99 DEX
>d42a	b42a	03 e2 44 45 59				.text	3,$e2,"DEY"            ; $9a DEY
>d42f	b42f	03 e6 45 4f 52				.text	3,$e6,"EOR"            ; $9b EOR
>d434	b434	03 da 49 4e 43				.text	3,$da,"INC"            ; $9c INC
>d439	b439	03 ef 49 4e 58				.text	3,$ef,"INX"            ; $9d INX
>d43e	b43e	03 f0 49 4e 59				.text	3,$f0,"INY"            ; $9e INY
>d443	b443	03 e7 4a 4d 50				.text	3,$e7,"JMP"            ; $9f JMP
>d448	b448	03 ef 4a 53 52				.text	3,$ef,"JSR"            ; $a0 JSR
>d44d	b44d	03 d1 4c 44 41				.text	3,$d1,"LDA"            ; $a1 LDA
>d452	b452	03 e8 4c 44 58				.text	3,$e8,"LDX"            ; $a2 LDX
>d457	b457	03 e9 4c 44 59				.text	3,$e9,"LDY"            ; $a3 LDY
>d45c	b45c	03 f1 4c 53 52				.text	3,$f1,"LSR"            ; $a4 LSR
>d461	b461	03 ed 4e 4f 50				.text	3,$ed,"NOP"            ; $a5 NOP
>d466	b466	03 e2 4f 52 41				.text	3,$e2,"ORA"            ; $a6 ORA
>d46b	b46b	03 d9 50 48 41				.text	3,$d9,"PHA"            ; $a7 PHA
>d470	b470	03 e8 50 48 50				.text	3,$e8,"PHP"            ; $a8 PHP
>d475	b475	03 f0 50 48 58				.text	3,$f0,"PHX"            ; $a9 PHX
>d47a	b47a	03 f1 50 48 59				.text	3,$f1,"PHY"            ; $aa PHY
>d47f	b47f	03 dd 50 4c 41				.text	3,$dd,"PLA"            ; $ab PLA
>d484	b484	03 ec 50 4c 50				.text	3,$ec,"PLP"            ; $ac PLP
>d489	b489	03 f4 50 4c 58				.text	3,$f4,"PLX"            ; $ad PLX
>d48e	b48e	03 f5 50 4c 59				.text	3,$f5,"PLY"            ; $ae PLY
>d493	b493	03 ed 52 4f 4c				.text	3,$ed,"ROL"            ; $af ROL
>d498	b498	03 f3 52 4f 52				.text	3,$f3,"ROR"            ; $b0 ROR
>d49d	b49d	03 ef 52 54 49				.text	3,$ef,"RTI"            ; $b1 RTI
>d4a2	b4a2	03 f9 52 54 53				.text	3,$f9,"RTS"            ; $b2 RTS
>d4a7	b4a7	03 d8 53 42 43				.text	3,$d8,"SBC"            ; $b3 SBC
>d4ac	b4ac	03 db 53 45 43				.text	3,$db,"SEC"            ; $b4 SEC
>d4b1	b4b1	03 dc 53 45 44				.text	3,$dc,"SED"            ; $b5 SED
>d4b6	b4b6	03 e1 53 45 49				.text	3,$e1,"SEI"            ; $b6 SEI
>d4bb	b4bb	03 e8 53 54 41				.text	3,$e8,"STA"            ; $b7 STA
>d4c0	b4c0	03 f7 53 54 50				.text	3,$f7,"STP"            ; $b8 STP
>d4c5	b4c5	03 ff 53 54 58				.text	3,$ff,"STX"            ; $b9 STX
>d4ca	b4ca	03 00 53 54 59				.text	3,$00,"STY"            ; $ba STY
>d4cf	b4cf	03 01 53 54 5a				.text	3,$01,"STZ"            ; $bb STZ
>d4d4	b4d4	03 ed 54 41 58				.text	3,$ed,"TAX"            ; $bc TAX
>d4d9	b4d9	03 ee 54 41 59				.text	3,$ee,"TAY"            ; $bd TAY
>d4de	b4de	03 e8 54 52 42				.text	3,$e8,"TRB"            ; $be TRB
>d4e3	b4e3	03 e9 54 53 42				.text	3,$e9,"TSB"            ; $bf TSB
>d4e8	b4e8	03 ff 54 53 58				.text	3,$ff,"TSX"            ; $c0 TSX
>d4ed	b4ed	03 ed 54 58 41				.text	3,$ed,"TXA"            ; $c1 TXA
>d4f2	b4f2	03 ff 54 58 53				.text	3,$ff,"TXS"            ; $c2 TXS
>d4f7	b4f7	03 ee 54 59 41				.text	3,$ee,"TYA"            ; $c3 TYA
>d4fc	b4fc	ff					.text	$FF
.d4fd	b4fd					Export_TKListConvertLine:
.d4fd	b4fd	48		pha				pha 								; save indent on the stack
.d4fe	b4fe	9c 1d 04	stz $041d			stz 	tbOffset
.d501	b501	9c 2d 04	stz $042d			stz 	tokenBuffer
.d504	b504	9c 29 04	stz $0429			stz 	currentListColour
.d507	b507	a9 8d		lda #$8d			lda 	#CLILineNumber+$80
.d509	b509	20 86 b6	jsr $b686			jsr 	LCLWriteColour
.d50c	b50c	a0 02		ldy #$02			ldy 	#2 							; convert line number to string
.d50e	b50e	b1 30		lda ($30),y			lda 	(codePtr),y
.d510	b510	aa		tax				tax
.d511	b511	88		dey				dey
.d512	b512	b1 30		lda ($30),y			lda 	(codePtr),y
.d514	b514	20 f7 b6	jsr $b6f7			jsr 	LCLWriteNumberXA
.d517	b517	68		pla				pla 								; adjustment to indent
.d518	b518	48		pha				pha 								; save on stack
.d519	b519	10 0c		bpl $b527			bpl 	_LCNoAdjust 				; don't adjust indent if +ve, do after.
.d51b	b51b	18		clc				clc 								; add to list indent and make 0 if goes -ve.
.d51c	b51c	6d 26 04	adc $0426			adc 	listIndent
.d51f	b51f	8d 26 04	sta $0426			sta 	listIndent
.d522	b522	10 03		bpl $b527			bpl 	_LCNoAdjust
.d524	b524	9c 26 04	stz $0426			stz 	listIndent
.d527	b527					_LCNoAdjust:
.d527	b527	18		clc				clc		 							; work out actual indent.
.d528	b528	ad 26 04	lda $0426			lda 	listIndent
.d52b	b52b	0a		asl a				asl 	a
.d52c	b52c	69 07		adc #$07			adc 	#7
.d52e	b52e	85 36		sta $36				sta 	zTemp0
.d530	b530					_LCPadOut:
.d530	b530	a9 20		lda #$20			lda 	#' '						; pad out to 6+indent characters
.d532	b532	20 8f b6	jsr $b68f			jsr 	LCLWrite
.d535	b535	ad 1d 04	lda $041d			lda 	tbOffset
.d538	b538	c5 36		cmp $36				cmp 	zTemp0
.d53a	b53a	d0 f4		bne $b530			bne 	_LCPadOut
.d53c	b53c	a0 03		ldy #$03			ldy 	#3 							; start position.
.d53e	b53e					_LCMainLoop:
.d53e	b53e	a9 8c		lda #$8c			lda 	#CLIPunctuation+$80
.d540	b540	20 86 b6	jsr $b686			jsr 	LCLWriteColour
.d543	b543	b1 30		lda ($30),y			lda 	(codePtr),y
.d545	b545	c9 80		cmp #$80			cmp 	#KWC_EOL 					; end of line ?
.d547	b547	f0 17		beq $b560			beq 	_LCExit
.d549	b549	c9 10		cmp #$10			cmp 	#16 						; 0-5 are the double punctuations
.d54b	b54b	90 1e		bcc $b56b			bcc 	_LCDoubles
.d54d	b54d	c9 20		cmp #$20			cmp 	#32 						; 16-31 are shifted punctuation from 64-91
.d54f	b54f	90 2a		bcc $b57b			bcc 	_LCShiftPunc
.d551	b551	c9 40		cmp #$40			cmp 	#64 						; 32-64 are as stored, punc and digits
.d553	b553	90 35		bcc $b58a			bcc 	_LCPunctuation
.d555	b555	c9 80		cmp #$80			cmp 	#128 						; 64-127 are variable identifiers.
.d557	b557	90 51		bcc $b5aa			bcc 	_LCIdentifiers
.d559	b559	c9 fe		cmp #$fe			cmp 	#254 						; 128-253 are tokenised words
.d55b	b55b	90 73		bcc $b5d0			bcc 	_LCTokens
.d55d	b55d	4c 30 b6	jmp $b630			jmp 	_LCData 					; 254-5 are data objects
.d560	b560					_LCExit:
.d560	b560	68		pla				pla 								; get old indent adjust
.d561	b561	30 07		bmi $b56a			bmi 	_LCExit2
.d563	b563	18		clc				clc 								; add to indent if +ve
.d564	b564	6d 26 04	adc $0426			adc 	listIndent
.d567	b567	8d 26 04	sta $0426			sta 	listIndent
.d56a	b56a					_LCExit2:
.d56a	b56a	60		rts				rts
.d56b	b56b					_LCDoubles:
.d56b	b56b	48		pha				pha
.d56c	b56c	4a		lsr a				lsr 	a 							; put bit 2 into bit 1
.d56d	b56d	29 02		and #$02			and 	#2
.d56f	b56f	09 3c		ora #$3c			ora 	#60 						; make < >
.d571	b571	20 8f b6	jsr $b68f			jsr 	LCLWrite
.d574	b574	68		pla				pla 								; restore, do lower bit
.d575	b575	29 03		and #$03			and 	#3
.d577	b577	09 3c		ora #$3c			ora 	#60
.d579	b579	80 0f		bra $b58a			bra		_LCPunctuation 				; print, increment, loop
.d57b	b57b					_LCShiftPunc:
.d57b	b57b	aa		tax				tax 								; save in X
.d57c	b57c	29 07		and #$07			and 	#7 							; lower 3 bits
.d57e	b57e	f0 02		beq $b582			beq 	_LCNoAdd
.d580	b580	09 18		ora #$18			ora 	#24 						; adds $18 to it.
.d582	b582					_LCNoAdd:
.d582	b582	e0 18		cpx #$18			cpx 	#24 						; if >= 24 add $20
.d584	b584	90 02		bcc $b588			bcc 	_LCNoAdd2
.d586	b586	09 20		ora #$20			ora 	#32 						; adds $20
.d588	b588					_LCNoAdd2:
.d588	b588	09 40		ora #$40			ora 	#$40 						; shift into 64-127 range and fall through.
.d58a	b58a					_LCPunctuation:
.d58a	b58a	c9 3a		cmp #$3a			cmp 	#':' 						; check if :
.d58c	b58c	d0 03		bne $b591			bne 	_LCPContinue
.d58e	b58e	20 a5 b6	jsr $b6a5			jsr 	LCLDeleteLastSpace 			; if so delete any preceding spaces
.d591	b591					_LCPContinue:
.d591	b591	c9 2e		cmp #$2e			cmp 	#'.'
.d593	b593	f0 08		beq $b59d			beq 	_LCPIsConstant
.d595	b595	c9 30		cmp #$30			cmp 	#'0'
.d597	b597	90 0b		bcc $b5a4			bcc 	_LCPNotConstant
.d599	b599	c9 3a		cmp #$3a			cmp 	#'9'+1
.d59b	b59b	b0 07		bcs $b5a4			bcs 	_LCPNotConstant
.d59d	b59d					_LCPIsConstant:
.d59d	b59d	48		pha				pha
.d59e	b59e	a9 87		lda #$87			lda 	#CLIConstant+$80
.d5a0	b5a0	20 86 b6	jsr $b686			jsr 	LCLWriteColour
.d5a3	b5a3	68		pla				pla
.d5a4	b5a4					_LCPNotConstant:
.d5a4	b5a4	c8		iny				iny 								; consume character
.d5a5	b5a5	20 8f b6	jsr $b68f			jsr 	LCLWrite 					; write it out.
.d5a8	b5a8	80 94		bra $b53e			bra 	_LCMainLoop 				; go round again.
.d5aa	b5aa					_LCIdentifiers:
.d5aa	b5aa	18		clc				clc 								; convert to physical address
.d5ab	b5ab	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.d5ad	b5ad	85 37		sta $37				sta 	zTemp0+1
.d5af	b5af	c8		iny				iny
.d5b0	b5b0	b1 30		lda ($30),y			lda 	(codePtr),y
.d5b2	b5b2	85 36		sta $36				sta 	zTemp0
.d5b4	b5b4	c8		iny				iny
.d5b5	b5b5	5a		phy				phy 								; save position
.d5b6	b5b6	a9 8e		lda #$8e			lda 	#CLIIdentifier+$80
.d5b8	b5b8	20 86 b6	jsr $b686			jsr 	LCLWriteColour
.d5bb	b5bb	a0 07		ldy #$07			ldy 	#7 							; output the identifier at +8
.d5bd	b5bd					_LCOutIdentifier:
.d5bd	b5bd	c8		iny				iny
.d5be	b5be	b1 36		lda ($36),y			lda 	(zTemp0),y					; bit 7 set = end.
.d5c0	b5c0	29 7f		and #$7f			and 	#$7F
.d5c2	b5c2	20 e1 b6	jsr $b6e1			jsr 	LCLLowerCase
.d5c5	b5c5	20 8f b6	jsr $b68f			jsr 	LCLWrite
.d5c8	b5c8	b1 36		lda ($36),y			lda 	(zTemp0),y				 	; ends when bit 7 set.
.d5ca	b5ca	10 f1		bpl $b5bd			bpl 	_LCOutIdentifier
.d5cc	b5cc	7a		ply				ply 								; restore position
.d5cd	b5cd	4c 3e b5	jmp $b53e			jmp 	_LCMainLoop
.d5d0	b5d0					_LCTokens:
.d5d0	b5d0	aa		tax				tax 								; token in X
.d5d1	b5d1	a9 b1		lda #$b1			lda 	#((KeywordSet2) & $FF)
.d5d3	b5d3	85 36		sta $36				sta 	0+zTemp0
.d5d5	b5d5	a9 b3		lda #$b3			lda 	#((KeywordSet2) >> 8)
.d5d7	b5d7	85 37		sta $37				sta 	1+zTemp0
.d5d9	b5d9	e0 82		cpx #$82			cpx 	#$82
.d5db	b5db	f0 16		beq $b5f3			beq 	_LCUseShift
.d5dd	b5dd	a9 12		lda #$12			lda 	#((KeywordSet1) & $FF)
.d5df	b5df	85 36		sta $36				sta 	0+zTemp0
.d5e1	b5e1	a9 b3		lda #$b3			lda 	#((KeywordSet1) >> 8)
.d5e3	b5e3	85 37		sta $37				sta 	1+zTemp0
.d5e5	b5e5	e0 81		cpx #$81			cpx 	#$81
.d5e7	b5e7	f0 0a		beq $b5f3			beq 	_LCUseShift
.d5e9	b5e9	a9 c5		lda #$c5			lda 	#((KeywordSet0) & $FF)
.d5eb	b5eb	85 36		sta $36				sta 	0+zTemp0
.d5ed	b5ed	a9 b0		lda #$b0			lda 	#((KeywordSet0) >> 8)
.d5ef	b5ef	85 37		sta $37				sta 	1+zTemp0
.d5f1	b5f1	80 01		bra $b5f4			bra 	_LCNoShift
.d5f3	b5f3					_LCUseShift:
.d5f3	b5f3	c8		iny				iny
.d5f4	b5f4					_LCNoShift:
.d5f4	b5f4	20 b9 b6	jsr $b6b9			jsr 	LCLCheckSpaceRequired 		; do we need a space ?
.d5f7	b5f7	b1 30		lda ($30),y			lda 	(codePtr),y
.d5f9	b5f9	aa		tax				tax 								; into X
.d5fa	b5fa					_LCFindText:
.d5fa	b5fa	ca		dex				dex
.d5fb	b5fb	10 0e		bpl $b60b			bpl 	_LCFoundText 				; found text.
.d5fd	b5fd	b2 36		lda ($36)			lda 	(zTemp0) 					; length of text
.d5ff	b5ff	1a		inc a				inc 	a 							; one extra for size
.d600	b600	38		sec				sec 								; one extra for checksum
.d601	b601	65 36		adc $36				adc 	zTemp0 						; go to next token
.d603	b603	85 36		sta $36				sta 	zTemp0
.d605	b605	90 f3		bcc $b5fa			bcc 	_LCFindText
.d607	b607	e6 37		inc $37				inc 	zTemp0+1
.d609	b609	80 ef		bra $b5fa			bra 	_LCFindText
.d60b	b60b					_LCFoundText:
.d60b	b60b	5a		phy				phy 								; save List position
.d60c	b60c	b2 36		lda ($36)			lda 	(zTemp0)					; count to print
.d60e	b60e	aa		tax				tax
.d60f	b60f	a9 86		lda #$86			lda 	#CLIToken+$80
.d611	b611	20 86 b6	jsr $b686			jsr 	LCLWriteColour
.d614	b614	a0 02		ldy #$02			ldy 	#2
.d616	b616					_LCCopyToken:
.d616	b616	b1 36		lda ($36),y			lda 	(zTemp0),y
.d618	b618	20 e1 b6	jsr $b6e1			jsr 	LCLLowerCase
.d61b	b61b	20 8f b6	jsr $b68f			jsr 	LCLWrite
.d61e	b61e	c8		iny				iny
.d61f	b61f	ca		dex				dex
.d620	b620	d0 f4		bne $b616			bne 	_LCCopyToken
.d622	b622	c9 28		cmp #$28			cmp 	#"(" 						; if last char not ( print a space
.d624	b624	f0 05		beq $b62b			beq 	_LCNoSpace
.d626	b626	a9 20		lda #$20			lda 	#' '
.d628	b628	20 8f b6	jsr $b68f			jsr 	LCLWrite
.d62b	b62b					_LCNoSpace:
.d62b	b62b	7a		ply				ply 								; restore position.
.d62c	b62c	c8		iny				iny 								; consume token
.d62d	b62d	4c 3e b5	jmp $b53e			jmp 	_LCMainLoop 				; and go around again.
.d630	b630					_LCData:
.d630	b630	48		pha				pha 								; save type $FE/$FF
.d631	b631	a2 24		ldx #$24			ldx 	#'$' 						; figure out $ or "
.d633	b633	c9 fe		cmp #$fe			cmp 	#$FE
.d635	b635	f0 22		beq $b659			beq 	_LCHaveOpener
.d637	b637	a2 22		ldx #$22			ldx 	#'"'
.d639	b639	a9 8f		lda #$8f			lda 	#CLIData+$80
.d63b	b63b	20 86 b6	jsr $b686			jsr 	LCLWriteColour
.d63e	b63e	c0 04		cpy #$04			cpy 	#4 							; must be 2nd thing on line
.d640	b640	d0 17		bne $b659			bne 	_LCHaveOpener
.d642	b642	88		dey				dey 								; what precedes it ?
.d643	b643	b1 30		lda ($30),y			lda 	(codePtr),y
.d645	b645	c8		iny				iny
.d646	b646	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; if quote
.d648	b648	d0 0f		bne $b659			bne 	_LCHaveOpener
.d64a	b64a	a9 09		lda #$09			lda 	#9 							; tab
.d64c	b64c	20 8f b6	jsr $b68f			jsr 	LCLWrite
.d64f	b64f	a9 9e		lda #$9e			lda 	#$90+CLIBComment
.d651	b651	20 8f b6	jsr $b68f			jsr 	LCLWrite
.d654	b654	a9 85		lda #$85			lda 	#CLIFComment+$80
.d656	b656	20 86 b6	jsr $b686			jsr 	LCLWriteColour
.d659	b659					_LCHaveOpener:
.d659	b659	8a		txa				txa 								; output prefix (# or ")
.d65a	b65a	20 8f b6	jsr $b68f			jsr 	LCLWrite
.d65d	b65d	c8		iny				iny 								; get count
.d65e	b65e	b1 30		lda ($30),y			lda 	(codePtr),y
.d660	b660	aa		tax				tax
.d661	b661	c8		iny				iny 								; point at first character
.d662	b662					_LCOutData:
.d662	b662	b1 30		lda ($30),y			lda 	(codePtr),y
.d664	b664	c9 00		cmp #$00			cmp 	#0
.d666	b666	f0 03		beq $b66b			beq 	_LCNoPrint
.d668	b668	20 8f b6	jsr $b68f			jsr 	LCLWrite
.d66b	b66b					_LCNoPrint:
.d66b	b66b	c8		iny				iny
.d66c	b66c	ca		dex				dex
.d66d	b66d	d0 f3		bne $b662			bne 	_LCOutData
.d66f	b66f	68		pla				pla 								; closing " required ?
.d670	b670	c9 ff		cmp #$ff			cmp 	#$FF 						; not required for hex constant.
.d672	b672	d0 0f		bne $b683			bne 	_LCNoQuote
.d674	b674	a9 22		lda #$22			lda 	#'"'
.d676	b676	20 8f b6	jsr $b68f			jsr 	LCLWrite
.d679	b679	ad 71 06	lda $0671			lda 	EXTTextColour
.d67c	b67c	29 0f		and #$0f			and 	#$0F
.d67e	b67e	09 90		ora #$90			ora 	#$90
.d680	b680	20 8f b6	jsr $b68f			jsr 	LCLWrite
.d683	b683					_LCNoQuote:
.d683	b683	4c 3e b5	jmp $b53e			jmp 	_LCMainLoop
.d686	b686					LCLWriteColour:
.d686	b686	cd 29 04	cmp $0429			cmp 	currentListColour 			; has the colour changed
.d689	b689	8d 29 04	sta $0429			sta 	currentListColour 			; (update it anyway)
.d68c	b68c	d0 01		bne $b68f			bne 	LCLWrite 					; if different, output it
.d68e	b68e	60		rts				rts
.d68f	b68f					LCLWrite:
.d68f	b68f	da		phx				phx
.d690	b690	ae 1d 04	ldx $041d			ldx 	tbOffset 					; write out make ASCIIZ
.d693	b693	9d 2d 04	sta $042d,x			sta 	tokenBuffer,x
.d696	b696	9e 2e 04	stz $042e,x			stz 	tokenBuffer+1,x
.d699	b699	ee 1d 04	inc $041d			inc 	tbOffset 					; bump the position
.d69c	b69c	09 00		ora #$00			ora 	#0 							; don't update last character if colour data
.d69e	b69e	30 03		bmi $b6a3			bmi 	_LCLNoColour
.d6a0	b6a0	8d 27 04	sta $0427			sta 	lcLastCharacter
.d6a3	b6a3					_LCLNoColour:
.d6a3	b6a3	fa		plx				plx
.d6a4	b6a4	60		rts				rts
.d6a5	b6a5					LCLDeleteLastSpace:
.d6a5	b6a5	48		pha				pha
.d6a6	b6a6	da		phx				phx
.d6a7	b6a7	ae 1d 04	ldx $041d			ldx 	tbOffset
.d6aa	b6aa	f0 0a		beq $b6b6			beq 	_LCDLSExit
.d6ac	b6ac	bd 2c 04	lda $042c,x			lda 	tokenBuffer-1,x
.d6af	b6af	c9 20		cmp #$20			cmp 	#' '
.d6b1	b6b1	d0 03		bne $b6b6			bne 	_LCDLSExit
.d6b3	b6b3	ce 1d 04	dec $041d			dec 	tbOffset
.d6b6	b6b6					_LCDLSExit:
.d6b6	b6b6	fa		plx				plx
.d6b7	b6b7	68		pla				pla
.d6b8	b6b8	60		rts				rts
.d6b9	b6b9					LCLCheckSpaceRequired:
.d6b9	b6b9	ad 27 04	lda $0427			lda 	lcLastCharacter 			; check last character
.d6bc	b6bc	c9 24		cmp #$24			cmp 	#'$' 						; $ # and ) require that token space.
.d6be	b6be	f0 1b		beq $b6db			beq 	_LCCSRSpace
.d6c0	b6c0	c9 29		cmp #$29			cmp 	#')'
.d6c2	b6c2	f0 17		beq $b6db			beq 	_LCCSRSpace
.d6c4	b6c4	c9 23		cmp #$23			cmp 	#'#'
.d6c6	b6c6	f0 13		beq $b6db			beq 	_LCCSRSpace
.d6c8	b6c8	20 e1 b6	jsr $b6e1			jsr 	LCLLowerCase 				; saves a little effort
.d6cb	b6cb	c9 30		cmp #$30			cmp 	#"0" 						; check if it was 0-9 A-Z a-z if so need space.
.d6cd	b6cd	90 11		bcc $b6e0			bcc 	_LCCSRExit
.d6cf	b6cf	c9 3a		cmp #$3a			cmp 	#"9"+1
.d6d1	b6d1	90 08		bcc $b6db			bcc 	_LCCSRSpace
.d6d3	b6d3	c9 61		cmp #$61			cmp 	#"a"
.d6d5	b6d5	90 09		bcc $b6e0			bcc 	_LCCSRExit
.d6d7	b6d7	c9 7b		cmp #$7b			cmp 	#"z"+1
.d6d9	b6d9	b0 05		bcs $b6e0			bcs 	_LCCSRExit
.d6db	b6db					_LCCSRSpace:
.d6db	b6db	a9 20		lda #$20			lda 	#' '
.d6dd	b6dd	20 8f b6	jsr $b68f			jsr 	LCLWrite
.d6e0	b6e0					_LCCSRExit:
.d6e0	b6e0	60		rts				rts
.d6e1	b6e1					LCLLowerCase:
.d6e1	b6e1	c9 41		cmp #$41			cmp 	#"A"
.d6e3	b6e3	90 06		bcc $b6eb			bcc 	_LCLLCOut
.d6e5	b6e5	c9 5b		cmp #$5b			cmp 	#"Z"+1
.d6e7	b6e7	b0 02		bcs $b6eb			bcs 	_LCLLCOut
.d6e9	b6e9	69 20		adc #$20			adc 	#$20
.d6eb	b6eb					_LCLLCOut:
.d6eb	b6eb	60		rts				rts
.d6ec	b6ec					LCLUpperCase:
.d6ec	b6ec	c9 61		cmp #$61			cmp 	#"a"
.d6ee	b6ee	90 06		bcc $b6f6			bcc 	_LCLUCOut
.d6f0	b6f0	c9 7b		cmp #$7b			cmp 	#"z"+1
.d6f2	b6f2	b0 02		bcs $b6f6			bcs 	_LCLUCOut
.d6f4	b6f4	e9 1f		sbc #$1f			sbc 	#$1F
.d6f6	b6f6					_LCLUCOut:
.d6f6	b6f6	60		rts				rts
.d6f7	b6f7					LCLWriteNumberXA:
.d6f7	b6f7	64 37		stz $37				stz 	zTemp0+1 					; index into digit table.
.d6f9	b6f9					_LCLWNLoop1:
.d6f9	b6f9	64 36		stz $36				stz 	zTemp0 						; subtraction count.
.d6fb	b6fb					_LCLWNLoop2:
.d6fb	b6fb	48		pha				pha 								; save initial LSB
.d6fc	b6fc	38		sec				sec
.d6fd	b6fd	a4 37		ldy $37				ldy 	zTemp0+1 					; position in table.
.d6ff	b6ff	f9 30 b7	sbc $b730,y			sbc 	_LCLWNTable,y
.d702	b702	48		pha				pha
.d703	b703	8a		txa				txa
.d704	b704	f9 31 b7	sbc $b731,y			sbc 	_LCLWNTable+1,y
.d707	b707	90 07		bcc $b710			bcc 	_LCLWNUnderflow
.d709	b709	e6 36		inc $36				inc 	zTemp0  					; subtracted one without borrow.
.d70b	b70b	aa		tax				tax 								; update X
.d70c	b70c	68		pla				pla 								; restore A
.d70d	b70d	7a		ply				ply 								; throw original
.d70e	b70e	80 eb		bra $b6fb			bra 	_LCLWNLoop2 				; try again.
.d710	b710					_LCLWNUnderflow:
.d710	b710	a4 36		ldy $36				ldy 	zTemp0 						; count of subtractions.
.d712	b712	d0 06		bne $b71a			bne 	_LCLWNOut
.d714	b714	ad 1d 04	lda $041d			lda 	tbOffset 					; suppress leading zeroes
.d717	b717	3a		dec a				dec 	a
.d718	b718	f0 04		beq $b71e			beq 	_LCLWNNext
.d71a	b71a					_LCLWNOut:
.d71a	b71a	98		tya				tya
.d71b	b71b	20 2a b7	jsr $b72a			jsr 	_LCLWNOutDigit
.d71e	b71e					_LCLWNNext:
.d71e	b71e	7a		ply				ply 							 	; restore original value.
.d71f	b71f	68		pla				pla
.d720	b720	a4 37		ldy $37				ldy 	zTemp0+1  					; bump the index
.d722	b722	c8		iny				iny
.d723	b723	c8		iny				iny
.d724	b724	84 37		sty $37				sty 	zTemp0+1
.d726	b726	c0 08		cpy #$08			cpy 	#8 							; done all 4
.d728	b728	d0 cf		bne $b6f9			bne 	_LCLWNLoop1
.d72a	b72a					_LCLWNOutDigit:
.d72a	b72a	09 30		ora #$30			ora 	#'0'
.d72c	b72c	20 8f b6	jsr $b68f			jsr 	LCLWrite
.d72f	b72f	60		rts				rts
.d730	b730					_LCLWNTable:
>d730	b730	10 27						.word 	10000
>d732	b732	e8 03						.word 	1000
>d734	b734	64 00						.word 	100
>d736	b736	0a 00						.word 	10
.d738	b738					TOKSearchTable:
.d738	b738	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token being tested.
.d73a	b73a	85 36		sta $36				sta 	zTemp0
.d73c	b73c	a0 00		ldy #$00			ldy 	#0
.d73e	b73e	a9 80		lda #$80			lda 	#$80 						; token # so we know which one we are looking at
.d740	b740	85 38		sta $38				sta 	zTemp1
.d742	b742					_TSTLoop:
.d742	b742	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.d744	b744	30 49		bmi $b78f			bmi 	_TSTFail 					; -ve = end of table, so fail.
.d746	b746	f0 2e		beq $b776			beq 	_TSTNext 					; zero, check next as it's a dummy (e.g. EOL, SHIFT)
.d748	b748	c8		iny				iny 								; get the hash
.d749	b749	b1 36		lda ($36),y			lda 	(zTemp0),y
.d74b	b74b	88		dey				dey
.d74c	b74c	cd 03 04	cmp $0403			cmp 	identHash 					; check they match with the identifier hash, if not go to next
.d74f	b74f	d0 25		bne $b776			bne 	_TSTNext
.d751	b751	ad 02 04	lda $0402			lda 	identTypeEnd 				; get length of identifier from end-start
.d754	b754	38		sec				sec
.d755	b755	ed 00 04	sbc $0400			sbc 	identStart
.d758	b758	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; compare against the length in the table, no match, then return.
.d75a	b75a	d0 1a		bne $b776			bne 	_TSTNext
.d75c	b75c	5a		phy				phy 								; save Y , we might fail to match.
.d75d	b75d	c8		iny				iny 								; point to text
.d75e	b75e	c8		iny				iny
.d75f	b75f	ae 00 04	ldx $0400			ldx 	identStart 					; offset in line buffer in X
.d762	b762					_TSTCompareName:
.d762	b762	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; compare text.
.d765	b765	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.d767	b767	d0 0c		bne $b775			bne 	_TSTNextPullY 				; fail, pullY and do next
.d769	b769	e8		inx				inx
.d76a	b76a	c8		iny				iny
.d76b	b76b	ec 02 04	cpx $0402			cpx 	identTypeEnd 				; complete match.
.d76e	b76e	d0 f2		bne $b762			bne 	_TSTCompareName
.d770	b770	7a		ply				ply 								; throw Y
.d771	b771	a5 38		lda $38				lda 	zTemp1 						; get token #
.d773	b773	38		sec				sec 								; return with CS = passed.
.d774	b774	60		rts				rts
.d775	b775					_TSTNextPullY:
.d775	b775	7a		ply				ply 								; restore current, fall through.
.d776	b776					_TSTNext:
.d776	b776	e6 38		inc $38				inc 	zTemp1 						; token counter
.d778	b778	98		tya				tya
.d779	b779	18		clc				clc
.d77a	b77a	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.d77c	b77c	1a		inc a				inc 	a 							; +1
.d77d	b77d	1a		inc a				inc 	a 							; +2
.d77e	b77e	a8		tay				tay
.d77f	b77f	10 c1		bpl $b742			bpl 	_TSTLoop 					; if Y < $80 loop back
.d781	b781	98		tya				tya 								; add Y to zTemp0 and reset Y
.d782	b782	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.d784	b784	18		clc				clc  								; but have tables > 255 bytes
.d785	b785	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.d787	b787	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.d789	b789	90 b7		bcc $b742			bcc 	_TSTLoop
.d78b	b78b	e6 37		inc $37				inc 	zTemp0+1
.d78d	b78d	80 b3		bra $b742			bra 	_TSTLoop
.d78f	b78f					_TSTFail:
.d78f	b78f	18		clc				clc
.d790	b790	60		rts				rts
.d791	b791					Export_TKTokeniseLine:
.d791	b791	20 5e b9	jsr $b95e			jsr 	LCLFixLineBufferCase 		; fix line case
.d794	b794	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.d796	b796	8d 2a 04	sta $042a			sta 	tokenOffset 				; (3 bytes for line number & offset)
.d799	b799	9c 2b 04	stz $042b			stz 	tokenLineNumber
.d79c	b79c	9c 2c 04	stz $042c			stz 	tokenLineNumber+1
.d79f	b79f	a2 ff		ldx #$ff			ldx 	#$FF
.d7a1	b7a1					_TKFindFirst:
.d7a1	b7a1	e8		inx				inx
.d7a2	b7a2	bd 2a 05	lda $052a,x			lda 	lineBuffer,x
.d7a5	b7a5	f0 62		beq $b809			beq 	_TKExit
.d7a7	b7a7	c9 20		cmp #$20			cmp 	#' '
.d7a9	b7a9	90 f6		bcc $b7a1			bcc 	_TKFindFirst
.d7ab	b7ab	c9 30		cmp #$30			cmp 	#'0'
.d7ad	b7ad	90 07		bcc $b7b6			bcc 	_TKNoLineNumber
.d7af	b7af	c9 3a		cmp #$3a			cmp 	#'9'+1
.d7b1	b7b1	b0 03		bcs $b7b6			bcs 	_TKNoLineNumber
.d7b3	b7b3	20 88 b9	jsr $b988			jsr 	TOKExtractLineNumber
.d7b6	b7b6					_TKNoLineNumber:
.d7b6	b7b6					_TKTokeniseLoop:
.d7b6	b7b6	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.d7b9	b7b9	f0 4e		beq $b809			beq 	_TKExit
.d7bb	b7bb	e8		inx				inx
.d7bc	b7bc	c9 20		cmp #$20			cmp 	#' '
.d7be	b7be	f0 f6		beq $b7b6			beq 	_TKTokeniseLoop 			; keep looping if space found.
.d7c0	b7c0	ca		dex				dex 								; undo last get, A contains character, X is position.
.d7c1	b7c1	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.d7c3	b7c3	f0 68		beq $b82d			beq 	_TKTokeniseIdentifier 		; (already case converted outside string constants)
.d7c5	b7c5	c9 41		cmp #$41			cmp 	#'A'
.d7c7	b7c7	90 04		bcc $b7cd			bcc 	_TKTokenisePunctuation
.d7c9	b7c9	c9 5b		cmp #$5b			cmp 	#'Z'+1
.d7cb	b7cb	90 60		bcc $b82d			bcc 	_TKTokeniseIdentifier
.d7cd	b7cd					_TKTokenisePunctuation:
.d7cd	b7cd	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.d7cf	b7cf	f0 2e		beq $b7ff			beq 	_TKString
.d7d1	b7d1	c9 24		cmp #$24			cmp 	#'$'						; hexadecimal constant ($ only appears at end of identifiers)
.d7d3	b7d3	f0 2f		beq $b804			beq 	_TKHexConstant
.d7d5	b7d5	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers - these are for <> <= >= >> <<
.d7d7	b7d7	f0 36		beq $b80f			beq 	_TKCheckDouble
.d7d9	b7d9	c9 3e		cmp #$3e			cmp 	#'>'
.d7db	b7db	f0 32		beq $b80f			beq 	_TKCheckDouble
.d7dd	b7dd					_TKStandardPunctuation:
.d7dd	b7dd	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; get the punctuation token back.
.d7e0	b7e0	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.d7e2	b7e2	90 0e		bcc $b7f2			bcc 	_TKNoShift
.d7e4	b7e4	48		pha				pha 								; save. we are about to convert this punctuation token from
.d7e5	b7e5	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.d7e7	b7e7	85 36		sta $36				sta 	zTemp0
.d7e9	b7e9	68		pla				pla
.d7ea	b7ea	29 20		and #$20			and 	#32 						; bit 5
.d7ec	b7ec	4a		lsr a				lsr 	a 							; shift into bit 3
.d7ed	b7ed	4a		lsr a				lsr 	a
.d7ee	b7ee	05 36		ora $36				ora 	zTemp0
.d7f0	b7f0	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.d7f2	b7f2					_TKNoShift:
.d7f2	b7f2	20 cd b9	jsr $b9cd			jsr 	TOKWriteByte 				; write the punctuation character
.d7f5	b7f5	e8		inx				inx 								; consume the character
.d7f6	b7f6	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; quote found ?
.d7f8	b7f8	d0 bc		bne $b7b6			bne 	_TKTokeniseLoop 			; and loop round again.
.d7fa	b7fa	20 c0 b8	jsr $b8c0			jsr 	TOKCheckComment 			; comment checl
.d7fd	b7fd	80 b7		bra $b7b6			bra 	_TKTokeniseLoop
.d7ff	b7ff					_TKString:
.d7ff	b7ff	20 ed b8	jsr $b8ed			jsr 	TOKTokenString
.d802	b802	80 b2		bra $b7b6			bra 	_TKTokeniseLoop
.d804	b804					_TKHexConstant:
.d804	b804	20 28 b9	jsr $b928			jsr 	TOKHexConstant
.d807	b807	80 ad		bra $b7b6			bra 	_TKTokeniseLoop
.d809	b809	a9 80		lda #$80	_TKExit:lda 	#KWC_EOL 					; write end of line byte
.d80b	b80b	20 cd b9	jsr $b9cd			jsr 	TOKWriteByte
.d80e	b80e	60		rts				rts
.d80f	b80f					_TKCheckDouble:
.d80f	b80f	bd 2b 05	lda $052b,x			lda 	lineBuffer+1,x 				; get next character
.d812	b812	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.d814	b814	90 c7		bcc $b7dd			bcc 	_TKStandardPunctuation 		; and do the normal punctuation handler.
.d816	b816	c9 3f		cmp #$3f			cmp 	#'>'+1
.d818	b818	b0 c3		bcs $b7dd			bcs 	_TKStandardPunctuation
.d81a	b81a	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.d81d	b81d	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.d81f	b81f	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.d820	b820	7d 2b 05	adc $052b,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.d823	b823	38		sec				sec
.d824	b824	e9 3c		sbc #$3c			sbc 	#'<'
.d826	b826	20 cd b9	jsr $b9cd			jsr 	TOKWriteByte 				; this is in the range 0-7
.d829	b829	e8		inx				inx 								; consume both
.d82a	b82a	e8		inx				inx
.d82b	b82b	80 89		bra $b7b6			bra 	_TKTokeniseLoop
.d82d	b82d					_TKTokeniseIdentifier:
.d82d	b82d	8e 00 04	stx $0400			stx 	identStart 					; save start
.d830	b830	9c 04 04	stz $0404			stz 	identTypeByte 				; zero the type byte
.d833	b833					_TKCheckLoop:
.d833	b833	e8		inx				inx 								; look at next, we know first is identifier already.
.d834	b834	bd 2a 05	lda $052a,x			lda  	lineBuffer,x
.d837	b837	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.d839	b839	f0 f8		beq $b833			beq 	_TKCheckLoop
.d83b	b83b	c9 30		cmp #$30			cmp	 	#"0"
.d83d	b83d	90 0c		bcc $b84b			bcc 	_TKEndIdentifier
.d83f	b83f	c9 3a		cmp #$3a			cmp 	#"9"+1
.d841	b841	90 f0		bcc $b833			bcc 	_TKCheckLoop
.d843	b843	c9 41		cmp #$41			cmp	 	#"A"
.d845	b845	90 04		bcc $b84b			bcc 	_TKEndIdentifier
.d847	b847	c9 5b		cmp #$5b			cmp 	#"Z"+1
.d849	b849	90 e8		bcc $b833			bcc 	_TKCheckLoop
.d84b	b84b					_TKEndIdentifier:
.d84b	b84b	8e 01 04	stx $0401			stx 	identTypeStart 				; save start of type text (if any !)
.d84e	b84e	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.d850	b850	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.d852	b852	f0 06		beq $b85a			beq 	_TKHasTypeCharacter
.d854	b854	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.d856	b856	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.d858	b858	d0 07		bne $b861			bne 	_TKNoTypeCharacter
.d85a	b85a					_TKHasTypeCharacter:
.d85a	b85a	8c 04 04	sty $0404			sty 	identTypeByte 				; has # or $, save the type
.d85d	b85d	e8		inx				inx 								; consume the type character
.d85e	b85e	bd 2a 05	lda $052a,x			lda 	lineBuffer,x
.d861	b861					_TKNoTypeCharacter:
.d861	b861	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.d863	b863	d0 09		bne $b86e			bne 	_TKNoArray
.d865	b865	e8		inx				inx 								; skip the (
.d866	b866	ad 04 04	lda $0404			lda 	identTypeByte 				; set bit 2 (e.g. array) in type byte
.d869	b869	09 04		ora #$04			ora 	#$04
.d86b	b86b	8d 04 04	sta $0404			sta 	identTypeByte
.d86e	b86e					_TKNoArray:
.d86e	b86e	8e 02 04	stx $0402			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.d871	b871	20 49 b9	jsr $b949			jsr 	TOKCalculateHash 			; calculate the has for those tokens
.d874	b874	a0 b0		ldy #$b0			ldy 	#(KeywordSet0) >> 8
.d876	b876	a9 c5		lda #$c5			lda 	#(KeywordSet0) & $FF
.d878	b878	20 38 b7	jsr $b738			jsr 	TOKSearchTable
.d87b	b87b	a2 00		ldx #$00			ldx 	#0
.d87d	b87d	b0 1f		bcs $b89e			bcs 	_TKFoundToken
.d87f	b87f	a0 b3		ldy #$b3			ldy 	#(KeywordSet1) >> 8
.d881	b881	a9 12		lda #$12			lda 	#(KeywordSet1) & $FF
.d883	b883	20 38 b7	jsr $b738			jsr 	TOKSearchTable
.d886	b886	a2 81		ldx #$81			ldx 	#$81
.d888	b888	b0 14		bcs $b89e			bcs 	_TKFoundToken
.d88a	b88a	a0 b3		ldy #$b3			ldy 	#(KeywordSet2) >> 8
.d88c	b88c	a9 b1		lda #$b1			lda 	#(KeywordSet2) & $FF
.d88e	b88e	20 38 b7	jsr $b738			jsr 	TOKSearchTable
.d891	b891	a2 82		ldx #$82			ldx 	#$82
.d893	b893	b0 09		bcs $b89e			bcs 	_TKFoundToken
.d895	b895	20 d9 b9	jsr $b9d9			jsr 	TOKCheckCreateVariableRecord ; failed all, it's a variable, create record if does not exist.
.d898	b898	ae 02 04	ldx $0402			ldx 	identTypeEnd 				; X points to following byte
.d89b	b89b	4c b6 b7	jmp $b7b6			jmp 	_TKTokeniseLoop 			; and go round again.
.d89e	b89e					_TKFoundToken:
.d89e	b89e	48		pha				pha 								; save token
.d89f	b89f	8a		txa				txa 								; shift in X, is there one ?
.d8a0	b8a0	f0 03		beq $b8a5			beq 	_TKNoTShift
.d8a2	b8a2	20 cd b9	jsr $b9cd			jsr 	TOKWriteByte 				; if so, write it out
.d8a5	b8a5					_TKNoTShift:
.d8a5	b8a5	68		pla				pla 								; restore and write token
.d8a6	b8a6	20 cd b9	jsr $b9cd			jsr 	TOKWriteByte
.d8a9	b8a9	e0 00		cpx #$00			cpx 	#0 							; check for REM and '
.d8ab	b8ab	d0 0d		bne $b8ba			bne 	_TKNotRem 			 		; not shifted ?
.d8ad	b8ad	c9 d2		cmp #$d2			cmp 	#KWD_REM
.d8af	b8af	d0 09		bne $b8ba			bne 	_TKNotRem
.d8b1	b8b1	ae 02 04	ldx $0402			ldx 	identTypeEnd 				; check if comment follows.
.d8b4	b8b4	20 c0 b8	jsr $b8c0			jsr 	TOKCheckComment
.d8b7	b8b7	4c b6 b7	jmp $b7b6			jmp 	_TKTokeniseLoop
.d8ba	b8ba					_TKNotRem:
.d8ba	b8ba	ae 02 04	ldx $0402			ldx 	identTypeEnd 				; X points to following byte
.d8bd	b8bd	4c b6 b7	jmp $b7b6			jmp 	_TKTokeniseLoop 			; and go round again.
.d8c0	b8c0					TOKCheckComment:
.d8c0	b8c0	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; skip over space
.d8c3	b8c3	e8		inx				inx
.d8c4	b8c4	c9 20		cmp #$20			cmp 	#' '
.d8c6	b8c6	f0 f8		beq $b8c0			beq 	TOKCheckComment
.d8c8	b8c8	ca		dex				dex 								; first non space character
.d8c9	b8c9	c9 22		cmp #$22			cmp 	#'"'						; quote mark
.d8cb	b8cb	f0 1f		beq $b8ec			beq 	_TOKCCExit 					; then we are okay
.d8cd	b8cd	c9 00		cmp #$00			cmp 	#0 							; EOL
.d8cf	b8cf	f0 1b		beq $b8ec			beq 	_TOKCCExit 					; then we are okay
.d8d1	b8d1	da		phx				phx
.d8d2	b8d2					_TOKCCLowerCase:
.d8d2	b8d2	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; about making it lower case it all, but I thought
.d8d5	b8d5	c9 41		cmp #$41			cmp 	#"A"		 				; that was a bit risky. So it's converted to L/C here.
.d8d7	b8d7	90 09		bcc $b8e2			bcc 	_TOKKCNotUC
.d8d9	b8d9	c9 5b		cmp #$5b			cmp 	#"Z"+1
.d8db	b8db	b0 05		bcs $b8e2			bcs 	_TOKKCNotUC
.d8dd	b8dd	49 20		eor #$20			eor 	#$20
.d8df	b8df	9d 2a 05	sta $052a,x			sta 	lineBuffer,x
.d8e2	b8e2					_TOKKCNotUC:
.d8e2	b8e2	e8		inx				inx
.d8e3	b8e3	c9 00		cmp #$00			cmp 	#0
.d8e5	b8e5	d0 eb		bne $b8d2			bne 	_TOKCCLowerCase
.d8e7	b8e7	fa		plx				plx
.d8e8	b8e8	ca		dex				dex 								; tokenise string expects initial skip.
.d8e9	b8e9	20 ed b8	jsr $b8ed			jsr 	TOKTokenString 				; tokenise rest of line as a string.
.d8ec	b8ec					_TOKCCExit:
.d8ec	b8ec	60		rts				rts
.d8ed	b8ed					TOKTokenString:
.d8ed	b8ed	a9 ff		lda #$ff			lda 	#KWC_STRING 				; string token.
.d8ef	b8ef	20 cd b9	jsr $b9cd			jsr 	TOKWriteByte
.d8f2	b8f2	e8		inx				inx									; start of quoted string.
.d8f3	b8f3	da		phx				phx 								; push start of string on top
.d8f4	b8f4	ca		dex				dex 								; because we pre-increment
.d8f5	b8f5					_TSFindEnd:
.d8f5	b8f5	e8		inx				inx
.d8f6	b8f6	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; next character
.d8f9	b8f9	f0 04		beq $b8ff			beq 	_TSEndOfString 				; no matching quote, we don't mind.
.d8fb	b8fb	c9 22		cmp #$22			cmp 	#'"' 						; go back if quote not found
.d8fd	b8fd	d0 f6		bne $b8f5			bne 	_TSFindEnd
.d8ff	b8ff					_TSEndOfString:
.d8ff	b8ff	7a		ply				ply  								; so now Y is first character, X is character after end.
.d900	b900	48		pha				pha 								; save terminating character
.d901	b901	20 09 b9	jsr $b909			jsr 	TOKWriteBlockXY 			; write X to Y as a data block
.d904	b904	68		pla				pla 								; terminating character
.d905	b905	f0 01		beq $b908			beq 	_TSNotQuote					; if it wasn't EOS skip it
.d907	b907	e8		inx				inx
.d908	b908					_TSNotQuote:
.d908	b908	60		rts				rts
.d909	b909					TOKWriteBlockXY:
.d909	b909	86 36		stx $36				stx 	zTemp0 						; save end character
.d90b	b90b	98		tya				tya 								; use 2's complement to work out the byte size
.d90c	b90c	49 ff		eor #$ff			eor 	#$FF
.d90e	b90e	38		sec				sec
.d90f	b90f	65 36		adc $36				adc 	zTemp0
.d911	b911	1a		inc a				inc 	a 							; one extra for NULL
.d912	b912	20 cd b9	jsr $b9cd			jsr 	TOKWriteByte
.d915	b915					_TOBlockLoop:
.d915	b915	c4 36		cpy $36				cpy 	zTemp0 						; exit if reached the end
.d917	b917	f0 09		beq $b922			beq 	_TOBlockExit
.d919	b919	b9 2a 05	lda $052a,y			lda 	lineBuffer,y 				; write byte out.
.d91c	b91c	20 cd b9	jsr $b9cd			jsr 	TOKWriteByte
.d91f	b91f	c8		iny				iny
.d920	b920	80 f3		bra $b915			bra 	_TOBlockLoop
.d922	b922					_TOBlockExit:
.d922	b922	a9 00		lda #$00			lda 	#0 							; add NULL.
.d924	b924	20 cd b9	jsr $b9cd			jsr 	TOKWriteByte
.d927	b927	60		rts				rts
.d928	b928					TOKHexConstant:
.d928	b928	a9 fe		lda #$fe			lda 	#KWC_HEXCONST 				; hex constant token.
.d92a	b92a	20 cd b9	jsr $b9cd			jsr 	TOKWriteByte
.d92d	b92d	e8		inx				inx									; start of quoted string.
.d92e	b92e	da		phx				phx 								; push start of constant on top
.d92f	b92f	ca		dex				dex
.d930	b930					_THFindLoop:
.d930	b930	e8		inx				inx 	 							; this is stored in a block, so find out how long
.d931	b931	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; the hex constant is.
.d934	b934	c9 30		cmp #$30			cmp 	#"0"
.d936	b936	90 0c		bcc $b944			bcc 	_THFoundEnd
.d938	b938	c9 3a		cmp #$3a			cmp 	#"9"+1
.d93a	b93a	90 f4		bcc $b930			bcc 	_THFindLoop
.d93c	b93c	c9 41		cmp #$41			cmp 	#"A"
.d93e	b93e	90 04		bcc $b944			bcc 	_THFoundEnd
.d940	b940	c9 47		cmp #$47			cmp 	#"F"+1
.d942	b942	90 ec		bcc $b930			bcc 	_THFindLoop
.d944	b944					_THFoundEnd:
.d944	b944	7a		ply				ply 								; restore start
.d945	b945	20 09 b9	jsr $b909			jsr 	TOKWriteBlockXY 			; output the block
.d948	b948	60		rts				rts
.d949	b949					TOKCalculateHash:
.d949	b949	da		phx				phx
.d94a	b94a	ae 00 04	ldx $0400			ldx 	identStart 					; needs to be same as in tokens.py - simple sum at present.
.d94d	b94d	a9 00		lda #$00			lda 	#0
.d94f	b94f					_TCHLoop:
.d94f	b94f	18		clc				clc
.d950	b950	7d 2a 05	adc $052a,x			adc 	lineBuffer,x
.d953	b953	e8		inx				inx
.d954	b954	ec 02 04	cpx $0402			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.d957	b957	d0 f6		bne $b94f			bne 	_TCHLoop
.d959	b959	8d 03 04	sta $0403			sta 	identHash 					; save the hash
.d95c	b95c	fa		plx				plx
.d95d	b95d	60		rts				rts
.d95e	b95e					LCLFixLineBufferCase:
.d95e	b95e	a2 00		ldx #$00			ldx 	#0
.d960	b960					_FLBCLoop:
.d960	b960	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; get next character
.d963	b963	f0 22		beq $b987			beq 	_FLBCExit 					; end of string.
.d965	b965	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.d967	b967	f0 11		beq $b97a			beq 	_FLBCInQuotes
.d969	b969	e8		inx				inx
.d96a	b96a	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.d96c	b96c	90 f2		bcc $b960			bcc 	_FLBCLoop
.d96e	b96e	c9 7b		cmp #$7b			cmp 	#'z'+1
.d970	b970	b0 ee		bcs $b960			bcs 	_FLBCLoop
.d972	b972	38		sec				sec 								; make U/C
.d973	b973	e9 20		sbc #$20			sbc 	#32
.d975	b975	9d 29 05	sta $0529,x			sta	 	lineBuffer-1,x 				; write back
.d978	b978	80 e6		bra $b960			bra 	_FLBCLoop
.d97a	b97a					_FLBCInQuotes:
.d97a	b97a	e8		inx				inx 								; advance
.d97b	b97b	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; get next
.d97e	b97e	f0 07		beq $b987			beq 	_FLBCExit 					; exit on EOS
.d980	b980	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.d982	b982	d0 f6		bne $b97a			bne 	_FLBCInQuotes
.d984	b984	e8		inx				inx 								; skip over it
.d985	b985	80 d9		bra $b960			bra 	_FLBCLoop
.d987	b987					_FLBCExit:
.d987	b987	60		rts				rts
.d988	b988					TOKExtractLineNumber:
.d988	b988	ad 2c 04	lda $042c			lda 	tokenLineNumber+1 			; push current value on stack
.d98b	b98b	48		pha				pha
.d98c	b98c	ad 2b 04	lda $042b			lda 	tokenLineNumber
.d98f	b98f	48		pha				pha
.d990	b990	20 c6 b9	jsr $b9c6			jsr 	_LCLNTimes2 				; line # x 2
.d993	b993	20 c6 b9	jsr $b9c6			jsr 	_LCLNTimes2 				; line # x 4
.d996	b996	18		clc				clc 								; add stacked value
.d997	b997	68		pla				pla
.d998	b998	6d 2b 04	adc $042b			adc 	tokenLineNumber
.d99b	b99b	8d 2b 04	sta $042b			sta 	tokenLineNumber
.d99e	b99e	68		pla				pla
.d99f	b99f	6d 2c 04	adc $042c			adc 	tokenLineNumber+1
.d9a2	b9a2	8d 2c 04	sta $042c			sta 	tokenLineNumber+1 			; line # x 5
.d9a5	b9a5	20 c6 b9	jsr $b9c6			jsr 	_LCLNTimes2 				; line # x 10
.d9a8	b9a8	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; get and consume character
.d9ab	b9ab	e8		inx				inx
.d9ac	b9ac	29 0f		and #$0f			and 	#15 						; add to line #
.d9ae	b9ae	18		clc				clc
.d9af	b9af	6d 2b 04	adc $042b			adc 	tokenLineNumber
.d9b2	b9b2	8d 2b 04	sta $042b			sta 	tokenLineNumber
.d9b5	b9b5	90 03		bcc $b9ba			bcc 	_TLENNoCarry
.d9b7	b9b7	ee 2c 04	inc $042c			inc 	tokenLineNumber+1
.d9ba	b9ba					_TLENNoCarry:
.d9ba	b9ba	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; more digits ?
.d9bd	b9bd	c9 30		cmp #$30			cmp 	#'0'
.d9bf	b9bf	90 04		bcc $b9c5			bcc 	_TLENExit
.d9c1	b9c1	c9 3a		cmp #$3a			cmp 	#'9'+1
.d9c3	b9c3	90 c3		bcc $b988			bcc 	TOKExtractLineNumber
.d9c5	b9c5					_TLENExit:
.d9c5	b9c5	60		rts				rts
.d9c6	b9c6					_LCLNTimes2:
.d9c6	b9c6	0e 2b 04	asl $042b			asl 	tokenLineNumber 			; doubles tokenLineNumber.
.d9c9	b9c9	2e 2c 04	rol $042c			rol 	tokenLineNumber+1
.d9cc	b9cc	60		rts				rts
.d9cd	b9cd					TOKWriteByte:
.d9cd	b9cd	da		phx				phx
.d9ce	b9ce	ae 2a 04	ldx $042a			ldx 	tokenOffset 				; next slot to write to
.d9d1	b9d1	9d 2a 04	sta $042a,x			sta 	tokenOffset,x 				; write byte out
.d9d4	b9d4	ee 2a 04	inc $042a			inc 	tokenOffset 				; advance slot.
.d9d7	b9d7	fa		plx				plx
.d9d8	b9d8	60		rts				rts
.d9d9	b9d9					TOKCheckCreateVariableRecord:
.d9d9	b9d9	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.d9db	b9db	85 36		sta $36				sta 	0+zTemp0
.d9dd	b9dd	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.d9df	b9df	85 37		sta $37				sta 	1+zTemp0
.d9e1	b9e1					_CCVSearch:
.d9e1	b9e1	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.d9e3	b9e3	f0 2c		beq $ba11			beq 	_CCVFail
.d9e5	b9e5	a0 01		ldy #$01			ldy 	#1 							; read the hash
.d9e7	b9e7	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.d9e9	b9e9	cd 03 04	cmp $0403			cmp 	identHash 	  				; if not, try the next.
.d9ec	b9ec	d0 16		bne $ba04			bne 	_CCVNext
.d9ee	b9ee	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.d9f0	b9f0	ae 00 04	ldx $0400			ldx 	identStart
.d9f3	b9f3					_CCVCompare:
.d9f3	b9f3	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.d9f6	b9f6	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.d9f8	b9f8	e8		inx				inx 								; advance pointers
.d9f9	b9f9	c8		iny				iny
.d9fa	b9fa	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.d9fb	b9fb	d0 07		bne $ba04			bne 	_CCVNext  					; didn't match go to next.
.d9fd	b9fd	90 f4		bcc $b9f3			bcc 	_CCVCompare 				; not finished yet.
.d9ff	b9ff	ec 02 04	cpx $0402			cpx 	identTypeEnd 				; matched whole thing ?
.da02	ba02	f0 41		beq $ba45			beq 	_CCVFound 					; yes, we were successful
.da04	ba04					_CCVNext:
.da04	ba04	18		clc				clc 								; go to next record.
.da05	ba05	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.da07	ba07	65 36		adc $36				adc 	zTemp0
.da09	ba09	85 36		sta $36				sta 	zTemp0
.da0b	ba0b	90 d4		bcc $b9e1			bcc 	_CCVSearch
.da0d	ba0d	e6 37		inc $37				inc 	zTemp0+1
.da0f	ba0f	80 d0		bra $b9e1			bra 	_CCVSearch
.da11	ba11					_CCVFail:
.da11	ba11	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.da13	ba13	ad 03 04	lda $0403			lda 	identHash
.da16	ba16	91 36		sta ($36),y			sta 	(zTemp0),y
.da18	ba18	c8		iny				iny 								; offset 2 is the type byte
.da19	ba19	ad 04 04	lda $0404			lda 	identTypeByte
.da1c	ba1c	91 36		sta ($36),y			sta 	(zTemp0),y
.da1e	ba1e	c8		iny				iny
.da1f	ba1f					_CCVData:
.da1f	ba1f	a9 00		lda #$00			lda 	#0 							; erase data 3-7 (the 5 value bytes)
.da21	ba21	91 36		sta ($36),y			sta 	(zTemp0),y
.da23	ba23	c8		iny				iny
.da24	ba24	c0 08		cpy #$08			cpy 	#8
.da26	ba26	90 f7		bcc $ba1f			bcc 	_CCVData
.da28	ba28	ae 00 04	ldx $0400			ldx 	identStart 					; copy name into 8 on.
.da2b	ba2b					_CCVCopyName:
.da2b	ba2b	bd 2a 05	lda $052a,x			lda 	lineBuffer,x
.da2e	ba2e	91 36		sta ($36),y			sta 	(zTemp0),y
.da30	ba30	e8		inx				inx
.da31	ba31	c8		iny				iny
.da32	ba32	ec 02 04	cpx $0402			cpx 	identTypeEnd
.da35	ba35	d0 f4		bne $ba2b			bne 	_CCVCopyName
.da37	ba37	98		tya				tya 								; patch offset
.da38	ba38	92 36		sta ($36)			sta 	(zTemp0)
.da3a	ba3a	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.da3c	ba3c	91 36		sta ($36),y			sta 	(zTemp0),y
.da3e	ba3e	88		dey				dey
.da3f	ba3f	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.da41	ba41	09 80		ora #$80			ora 	#$80
.da43	ba43	91 36		sta ($36),y			sta 	(zTemp0),y
.da45	ba45					_CCVFound:
.da45	ba45	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.da47	ba47	38		sec				sec
.da48	ba48	e9 10		sbc #$10			sbc 	#(VariableSpace >> 8) 		; offset from the start of the variable token
.da4a	ba4a	09 40		ora #$40			ora 	#$40 						; make it a writeable token $4000-$7FFF
.da4c	ba4c	20 cd b9	jsr $b9cd			jsr 	TOKWriteByte
.da4f	ba4f	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.da51	ba51	20 cd b9	jsr $b9cd			jsr 	TOKWriteByte
.da54	ba54	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_sound.module

=1						soundIntegrated=1
.da55	ba55					SNDCheckChannel:
.da55	ba55	aa		tax				tax
.da56	ba56	bd 3a 08	lda $083a,x			lda 	SNDTimeLeft,x 				; currently playing a note
.da59	ba59	d0 38		bne $ba93			bne 	_SNDCCExit
.da5b	ba5b	da		phx				phx 								; save current channel
.da5c	ba5c	8a		txa				txa 								; put in A
.da5d	ba5d	20 d9 ba	jsr $bad9			jsr 	SNDFindNextNoteForA 		; is there a note for A in the queue ?
.da60	ba60	68		pla				pla 								; channel # in A
.da61	ba61	90 30		bcc $ba93			bcc 	_SNDCCExit  				; nothing in the queue for this channel, exit.
.da63	ba63	a8		tay				tay 								; Y is the channel #
.da64	ba64	bd 2f 07	lda $072f,x			lda 	SNDQueue+1,x 				; copy data into the slot.
.da67	ba67	99 2e 08	sta $082e,y			sta 	SNDPitchLow,y
.da6a	ba6a	bd 30 07	lda $0730,x			lda 	SNDQueue+2,x
.da6d	ba6d	99 32 08	sta $0832,y			sta 	SNDPitchHigh,y
.da70	ba70	bd 31 07	lda $0731,x			lda 	SNDQueue+3,x
.da73	ba73	99 36 08	sta $0836,y			sta 	SNDVolume,y
.da76	ba76	bd 32 07	lda $0732,x			lda 	SNDQueue+4,x
.da79	ba79	99 3a 08	sta $083a,y			sta 	SNDTimeLeft,y
.da7c	ba7c	bd 33 07	lda $0733,x			lda 	SNDQueue+5,x
.da7f	ba7f	99 3e 08	sta $083e,y			sta 	SNDAdjustLow,y
.da82	ba82	bd 34 07	lda $0734,x			lda 	SNDQueue+6,x
.da85	ba85	99 42 08	sta $0842,y			sta 	SNDAdjustHigh,y
.da88	ba88	5a		phy				phy 								; save channel #
.da89	ba89	20 f3 ba	jsr $baf3			jsr 	SNDDeleteXFromQueue 		; delete record at X from queue
.da8c	ba8c	ce 2d 07	dec $072d			dec 	SNDLength 					; reduce the queue length.
.da8f	ba8f	68		pla				pla
.da90	ba90	20 94 ba	jsr $ba94			jsr 	SNDUpdateNote 				; update channel A
.da93	ba93					_SNDCCExit:
.da93	ba93	60		rts				rts
.da94	ba94					SNDUpdateNote:
.da94	ba94	aa		tax				tax 								; so we can access records
.da95	ba95	0a		asl a				asl 	a 							; convert it to a channel bit pair in 5,6
.da96	ba96	0a		asl a				asl 	a
.da97	ba97	0a		asl a				asl 	a
.da98	ba98	0a		asl a				asl 	a
.da99	ba99	0a		asl a				asl 	a
.da9a	ba9a	8d 2c 07	sta $072c			sta 	SNDChannelBits
.da9d	ba9d	bd 3a 08	lda $083a,x			lda 	SNDTimeLeft,x 				; are we silent
.daa0	baa0	f0 2e		beq $bad0			beq 	_SNDUNIsSilent
.daa2	baa2	ad 2c 07	lda $072c			lda 	SNDChannelBits 				; push channel bits on stack
.daa5	baa5	48		pha				pha
.daa6	baa6	bd 2e 08	lda $082e,x			lda 	SNDPitchLow,x 				; get 4 lowest bits of pitch.
.daa9	baa9	29 0f		and #$0f			and 	#$0F
.daab	baab	0d 2c 07	ora $072c			ora 	SNDChannelBits 				; set channel bits
.daae	baae	09 80		ora #$80			ora 	#$80 						; write to pitch register
.dab0	bab0	20 3d bb	jsr $bb3d			jsr 	SNDWritePorts
.dab3	bab3	bd 32 08	lda $0832,x			lda 	SNDPitchHigh,x 				; pitch high => channel temp.
.dab6	bab6	8d 2c 07	sta $072c			sta 	SNDChannelBits
.dab9	bab9	bd 2e 08	lda $082e,x			lda 	SNDPitchLow,x
.dabc	babc	4e 2c 07	lsr $072c			lsr 	SNDChannelBits 				; shift 2 LSBs into MSB of A
.dabf	babf	6a		ror a				ror 	a
.dac0	bac0	4e 2c 07	lsr $072c			lsr 	SNDChannelBits
.dac3	bac3	6a		ror a				ror 	a
.dac4	bac4	4a		lsr a				lsr 	a 							; put in bits 0-5
.dac5	bac5	4a		lsr a				lsr 	a
.dac6	bac6	20 3d bb	jsr $bb3d			jsr 	SNDWritePorts 				; write as rest of pitch register
.dac9	bac9	68		pla				pla
.daca	baca	09 90		ora #$90			ora 	#$90 						; set to write minimum attentuation.
.dacc	bacc	20 3d bb	jsr $bb3d			jsr 	SNDWritePorts
.dacf	bacf	60		rts				rts
.dad0	bad0					_SNDUNIsSilent:
.dad0	bad0	ad 2c 07	lda $072c			lda 	SNDChannelBits 				; channel bits
.dad3	bad3	09 9f		ora #$9f			ora 	#$9F 						; maximum attenuation
.dad5	bad5	20 3d bb	jsr $bb3d			jsr 	SNDWritePorts 				; write to the ports
.dad8	bad8	60		rts				rts
.dad9	bad9					SNDFindNextNoteForA:
.dad9	bad9	ac 2d 07	ldy $072d			ldy 	SNDLength 					; queue size into Y
.dadc	badc	f0 13		beq $baf1			beq 	_SNDFNNFail 				; queue empty.
.dade	bade	a2 00		ldx #$00			ldx 	#0
.dae0	bae0					_SNDFNNSearch:
.dae0	bae0	dd 2e 07	cmp $072e,x			cmp 	SNDQueue,x 					; does it match the channel
.dae3	bae3	38		sec				sec
.dae4	bae4	f0 0c		beq $baf2			beq 	_SNDFNNExit 				; if so exit with CS.
.dae6	bae6	e8		inx				inx 								; next queue slot.
.dae7	bae7	e8		inx				inx
.dae8	bae8	e8		inx				inx
.dae9	bae9	e8		inx				inx
.daea	baea	e8		inx				inx
.daeb	baeb	e8		inx				inx
.daec	baec	e8		inx				inx
.daed	baed	e8		inx				inx
.daee	baee	88		dey				dey 								; done the whole queue
.daef	baef	d0 ef		bne $bae0			bne 	_SNDFNNSearch 				; no, go back.
.daf1	baf1					_SNDFNNFail:
.daf1	baf1	18		clc				clc
.daf2	baf2					_SNDFNNExit:
.daf2	baf2	60		rts				rts
.daf3	baf3					SNDDeleteXFromQueue:
.daf3	baf3	e0 f8		cpx #$f8			cpx 	#SNDQueueSize*8-8 			; reached the end.
.daf5	baf5	f0 09		beq $bb00			beq 	_SNDDXExit
.daf7	baf7	bd 36 07	lda $0736,x			lda 	SNDQueue+8,x
.dafa	bafa	9d 2e 07	sta $072e,x			sta 	SNDQueue,x
.dafd	bafd	e8		inx				inx
.dafe	bafe	80 f3		bra $baf3			bra 	SNDDeleteXFromQueue
.db00	bb00					_SNDDXExit:
.db00	bb00	60		rts				rts
.072c						SNDChannelBits:
>072c								.fill 	1
.db01	bb01					SNDQueueRequest:
.db01	bb01	86 36		stx $36				stx 	zTemp0						; save queue address
.db03	bb03	84 37		sty $37				sty 	zTemp0+1
.db05	bb05	ae 2d 07	ldx $072d			ldx 	SNDLength 					; queue is full, can't take any more.
.db08	bb08	e0 20		cpx #$20			cpx 	#SNDQueueSize
.db0a	bb0a	f0 21		beq $bb2d			beq 	_SNDQRExit
.db0c	bb0c	29 03		and #$03			and 	#3	 						; channel # and push on stack
.db0e	bb0e	48		pha				pha
.db0f	bb0f	8a		txa				txa  								; get offset in queue buffer/
.db10	bb10	0a		asl a				asl 	a
.db11	bb11	0a		asl a				asl 	a
.db12	bb12	0a		asl a				asl 	a
.db13	bb13	aa		tax				tax
.db14	bb14	68		pla				pla 								; get back and push again
.db15	bb15	48		pha				pha
.db16	bb16	9d 2e 07	sta $072e,x			sta 	SNDQueue+0,x 				; save the channel #
.db19	bb19	a0 00		ldy #$00			ldy 	#0 							; copy the rest in.
.db1b	bb1b					_SNDQCopy:
.db1b	bb1b	b1 36		lda ($36),y			lda 	(zTemp0),y
.db1d	bb1d	e8		inx				inx
.db1e	bb1e	c8		iny				iny
.db1f	bb1f	9d 2e 07	sta $072e,x			sta 	SNDQueue,x
.db22	bb22	c0 06		cpy #$06			cpy 	#6
.db24	bb24	d0 f5		bne $bb1b			bne 	_SNDQCopy
.db26	bb26	ee 2d 07	inc $072d			inc 	SNDLength 					; bump queue length.
.db29	bb29	68		pla				pla 								; get channel # back
.db2a	bb2a	20 55 ba	jsr $ba55			jsr 	SNDCheckChannel 			; check if channel needs refreshing.
.db2d	bb2d					_SNDQRExit:
.db2d	bb2d	60		rts				rts
.db2e	bb2e					SNDSilenceChannel:
.db2e	bb2e	aa		tax				tax 								; zero time left.
.db2f	bb2f	9e 3a 08	stz $083a,x			stz 	SNDTimeLeft,x
.db32	bb32	0a		asl a				asl 	a 							; shift into position
.db33	bb33	0a		asl a				asl 	a
.db34	bb34	0a		asl a				asl 	a
.db35	bb35	0a		asl a				asl 	a
.db36	bb36	0a		asl a				asl 	a
.db37	bb37	09 9f		ora #$9f			ora 	#$9F 						; write register attenuation $F
.db39	bb39	20 3d bb	jsr $bb3d			jsr 	SNDWritePorts
.db3c	bb3c	60		rts				rts
.db3d	bb3d					SNDWritePorts:
.db3d	bb3d	da		phx				phx 								; save X
.db3e	bb3e	a6 01		ldx $01				ldx 	1 							; save I/O status
.db40	bb40	64 01		stz $01				stz 	1 							; access I/O page 0
.db42	bb42	8d 00 d6	sta $d600			sta 	$D600 						; write to both
.db45	bb45	8d 10 d6	sta $d610			sta 	$D610
.db48	bb48	86 01		stx $01				stx 	1 							; restore I/O
.db4a	bb4a	fa		plx				plx 								; restore X
.db4b	bb4b	60		rts				rts
.db4c	bb4c					Export_SNDCommand:
.db4c	bb4c	da		phx				phx 								; save XY
.db4d	bb4d	5a		phy				phy
.db4e	bb4e	c9 0f		cmp #$0f			cmp 	#$0F 						; $0F is initialise
.db50	bb50	f0 1d		beq $bb6f			beq 	_SNDInitialise
.db52	bb52	90 28		bcc $bb7c			bcc 	_SNDExit
.db54	bb54	c9 3f		cmp #$3f			cmp 	#$3F 						; $3F is silence all
.db56	bb56	f0 17		beq $bb6f			beq 	_SNDSilence
.db58	bb58	b0 22		bcs $bb7c			bcs 	_SNDExit
.db5a	bb5a	c9 20		cmp #$20			cmp 	#$20 						; $2x is check playing => A
.db5c	bb5c	b0 09		bcs $bb67			bcs 	_SNDQueryPlay
.db5e	bb5e	c9 14		cmp #$14			cmp 	#$14 						; $10-$13 is queue sound
.db60	bb60	b0 1a		bcs $bb7c			bcs 	_SNDExit
.db62	bb62	20 01 bb	jsr $bb01			jsr 	SNDQueueRequest
.db65	bb65	80 15		bra $bb7c			bra 	_SNDExit
.db67	bb67					_SNDQueryPlay:
.db67	bb67	29 03		and #$03			and 	#3 							; get channel #
.db69	bb69	aa		tax				tax
.db6a	bb6a	bd 3a 08	lda $083a,x			lda 	SNDTimeLeft,x 				; read time left, if zero then silent
.db6d	bb6d	80 0d		bra $bb7c			bra 	_SNDExit
.db6f	bb6f					_SNDInitialise:
.db6f	bb6f					_SNDSilence:
.db6f	bb6f	9c 2d 07	stz $072d			stz 	SNDLength 					; empty the queue.
.db72	bb72	a9 03		lda #$03			lda 	#$3 						; silence channel 0-3.
.db74	bb74					_SNDSilenceLoop:
.db74	bb74	48		pha				pha
.db75	bb75	20 2e bb	jsr $bb2e			jsr 	SNDSilenceChannel
.db78	bb78	68		pla				pla
.db79	bb79	3a		dec a				dec 	a
.db7a	bb7a	10 f8		bpl $bb74			bpl 	_SNDSilenceLoop
.db7c	bb7c					_SNDExit:
.db7c	bb7c	7a		ply				ply
.db7d	bb7d	fa		plx				plx
.db7e	bb7e	60		rts				rts
=32						SNDQueueSize = 32 							; number of queue entries
.072d						SNDLength:
>072d								.fill 	1
.072e						SNDQueue:
>072e								.fill 	SNDQueueSize * 8
.082e						SNDPitchLow:
>082e								.fill 	4
.0832						SNDPitchHigh:
>0832								.fill 	4
.0836						SNDVolume:
>0836								.fill 	4
.083a						SNDTimeLeft:
>083a								.fill 	4
.083e						SNDAdjustLow:
>083e								.fill 	4
.0842						SNDAdjustHigh:
>0842								.fill 	4
.db7f	bb7f					Export_SNDUpdate:
.db7f	bb7f					PagedSNDUpdate:
.db7f	bb7f	ad 3a 08	lda $083a			lda 	SNDTimeLeft+0 				; look at time remaining
.db82	bb82	f0 05		beq $bb89			beq 	_SNDUNot0 					; not playing
.db84	bb84	a2 00		ldx #$00			ldx 	#0 							; so we know which channel to update
.db86	bb86	20 a8 bb	jsr $bba8			jsr 	SNDUpdateChannel 			; update it.
.db89	bb89					_SNDUNot0:
.db89	bb89	ad 3b 08	lda $083b			lda 	SNDTimeLeft+1
.db8c	bb8c	f0 05		beq $bb93			beq 	_SNDUNot1
.db8e	bb8e	a2 01		ldx #$01			ldx 	#1
.db90	bb90	20 a8 bb	jsr $bba8			jsr 	SNDUpdateChannel
.db93	bb93					_SNDUNot1:
.db93	bb93	ad 3c 08	lda $083c			lda 	SNDTimeLeft+2
.db96	bb96	f0 05		beq $bb9d			beq 	_SNDUNot2
.db98	bb98	a2 02		ldx #$02			ldx 	#2
.db9a	bb9a	20 a8 bb	jsr $bba8			jsr 	SNDUpdateChannel
.db9d	bb9d					_SNDUNot2:
.db9d	bb9d	ad 3d 08	lda $083d			lda 	SNDTimeLeft+3
.dba0	bba0	f0 05		beq $bba7			beq 	_SNDUNot3
.dba2	bba2	a2 03		ldx #$03			ldx 	#3
.dba4	bba4	20 a8 bb	jsr $bba8			jsr 	SNDUpdateChannel
.dba7	bba7					_SNDUNot3:
.dba7	bba7	60		rts				rts
.dba8	bba8					SNDUpdateChannel:
.dba8	bba8	c9 ff		cmp #$ff			cmp 	#$FF 						; sound $FF play forever until turned off manually
.dbaa	bbaa	f0 2c		beq $bbd8			beq 	_SNDUCExit
.dbac	bbac	3a		dec a				dec 	a 							; decrement and update timer
.dbad	bbad	9d 3a 08	sta $083a,x			sta 	SNDTimeLeft,x
.dbb0	bbb0	f0 1d		beq $bbcf			beq 	_SNDUCUpdate 				; if zero, silence channel
.dbb2	bbb2	bd 3e 08	lda $083e,x			lda 	SNDAdjustLow,x 				; adjust ?
.dbb5	bbb5	1d 42 08	ora $0842,x			ora 	SNDAdjustHigh,x
.dbb8	bbb8	f0 1e		beq $bbd8			beq 	_SNDUCExit 					; if zero carry on at current tone.
.dbba	bbba	18		clc				clc 								; add adjust, forcing into a 10 bit range
.dbbb	bbbb	bd 2e 08	lda $082e,x			lda 	SNDPitchLow,x
.dbbe	bbbe	7d 3e 08	adc $083e,x			adc 	SNDAdjustLow,x
.dbc1	bbc1	9d 2e 08	sta $082e,x			sta 	SNDPitchLow,x
.dbc4	bbc4	bd 32 08	lda $0832,x			lda 	SNDPitchHigh,x
.dbc7	bbc7	7d 42 08	adc $0842,x			adc 	SNDAdjustHigh,x
.dbca	bbca	29 03		and #$03			and 	#3
.dbcc	bbcc	9d 32 08	sta $0832,x			sta 	SNDPitchHigh,x
.dbcf	bbcf					_SNDUCUpdate:
.dbcf	bbcf	8a		txa				txa 								; which channel.
.dbd0	bbd0	48		pha				pha
.dbd1	bbd1	20 94 ba	jsr $ba94			jsr 	SNDUpdateNote 				; update the current note
.dbd4	bbd4	68		pla				pla
.dbd5	bbd5	20 55 ba	jsr $ba55			jsr 	SNDCheckChannel 			; more to do ?
.dbd8	bbd8					_SNDUCExit:
.dbd8	bbd8	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_kernel.module

=1						kernelIntegrated=1
.dbd9	bbd9					Export_KNLInputSingleCharacter:
.dbd9	bbd9					PagedInputSingleCharacter:
.dbd9	bbd9	da		phx				phx
.dbda	bbda	5a		phy				phy
.dbdb	bbdb					_EISCWait:
.dbdb	bbdb	a5 01		lda $01				lda 	1 							; save I/O 0
.dbdd	bbdd	48		pha				pha
.dbde	bbde	64 01		stz $01				stz 	1 							; access I/O Page 0
.dbe0	bbe0	38		sec				sec 								; calculate timer - LastTick
.dbe1	bbe1	ad 59 d6	lda $d659			lda 	$D659
.dbe4	bbe4	aa		tax				tax 								; saving timer in X
.dbe5	bbe5	ed 5e 06	sbc $065e			sbc 	LastTick
.dbe8	bbe8	c9 03		cmp #$03			cmp 	#3
.dbea	bbea	90 06		bcc $bbf2			bcc 	_NoFireTick 				; if < 3 clocks don't fire.
.dbec	bbec	8e 5e 06	stx $065e			stx 	LastTick 					; update last timer
.dbef	bbef	20 7f bb	jsr $bb7f			jsr 	PagedSNDUpdate 							; go do the code.
.dbf2	bbf2					_NoFireTick:
.dbf2	bbf2	68		pla				pla 								; restore I/O 0
.dbf3	bbf3	85 01		sta $01				sta 	1
.dbf5	bbf5	20 ff bb	jsr $bbff			jsr 	CheckKeyPressed
.dbf8	bbf8	c9 00		cmp #$00			cmp 	#0 							; loop back if none pressed.
.dbfa	bbfa	f0 df		beq $bbdb			beq 	_EISCWait
.dbfc	bbfc	7a		ply				ply
.dbfd	bbfd	fa		plx				plx
.dbfe	bbfe	60		rts				rts
.dbff	bbff					Export_KNLInkey:
.dbff	bbff					CheckKeyPressed:
.dbff	bbff	a9 46		lda #$46			lda     #<event 					; tell kernel where events go.
.dc01	bc01	85 f0		sta $f0				sta     kernel.args.events+0
.dc03	bc03	a9 08		lda #$08			lda     #>event
.dc05	bc05	85 f1		sta $f1				sta     kernel.args.events+1
.dc07	bc07	20 00 ff	jsr $ff00			jsr     kernel.NextEvent 			; get next event
.dc0a	bc0a	b0 0b		bcs $bc17			bcs 	_CKPNoEvent 				; no event
.dc0c	bc0c	ad 46 08	lda $0846			lda     event.type
.dc0f	bc0f	c9 08		cmp #$08			cmp     #kernel.event.key.PRESSED 	; must be a pressed event.
.dc11	bc11	d0 04		bne $bc17			bne 	_CKPNoEvent
.dc13	bc13	ad 4b 08	lda $084b			lda     event.key.ascii
.dc16	bc16	60		rts				rts
.dc17	bc17					_CKPNoEvent:
.dc17	bc17	a9 00		lda #$00			lda 	#0
.dc19	bc19	60		rts				rts
.dc1a	bc1a					Export_EXTBreakCheck:
.dc1a	bc1a	4c e1 ff	jmp $ffe1			jmp		$FFE1
.dc1d	bc1d					Export_EXTReadController:
.dc1d	bc1d	da		phx				phx
.dc1e	bc1e	a6 01		ldx $01				ldx 	1 							; save current I/O in X
.dc20	bc20	64 01		stz $01				stz 	1 							; switch to I/O 0
.dc22	bc22	ad 00 dc	lda $dc00			lda 	$DC00  						; read VIA register
.dc25	bc25	86 01		stx $01				stx 	1 							; repair old I/O and exit
.dc27	bc27	fa		plx				plx
.dc28	bc28	60		rts				rts
.0846						event
>0846						type        .byte   ?   ; Enum above
>0847						buf         .byte   ?   ; page id or zero
>0848						ext         .byte   ?   ; page id or zero
.0849						key
>0849						keyboard    .byte   ?   ; Keyboard ID
>084a						raw         .byte   ?   ; Raw key ID
>084b						ascii       .byte   ?   ; ASCII value
>084c						flags       .byte   ?   ; Flags (META)
=$80						META        = $80       ; Meta key; no associated ASCII value.
.0849						mouse
.0849						delta
>0849						x           .byte   ?
>084a						y           .byte   ?
>084b						z           .byte   ?
>084c						buttons     .byte   ?
.0849						clicks
>0849						inner       .byte   ?
>084a						middle      .byte   ?
>084b						outer       .byte   ?
.0849						udp
>0849						token       .byte   ?   ; TODO: break out into fields
.0849						file
>0849						stream      .byte   ?
>084a						cookie      .byte   ?
.084b						data
>084b						requested   .byte   ?   ; Requested number of bytes to read
>084c						read        .byte   ?   ; Number of bytes actually read
.084b						wrote
>084b						requested   .byte   ?   ; Requested number of bytes to read
>084c						wrote       .byte   ?   ; Number of bytes actually read
.0849						directory
>0849						stream      .byte   ?
>084a						cookie      .byte   ?
.084b						volume
>084b						len         .byte   ?   ; Length of volname (in buf)
>084c						flags       .byte   ?   ; block size, text encoding
.084b						file
>084b						len         .byte   ?
>084c						flags       .byte   ?   ; block scale, text encoding, approx size
.084b						free
>084b						flags       .byte   ?   ; block scale, text encoding, approx size
=56						KERR_GENERAL = kernel.event.file.ERROR 		; Event $38
=50						KERR_CLOSED = kernel.event.file.CLOSED 		; Event $32
=40						KERR_NOTFOUND = kernel.event.file.NOT_FOUND ; Event $28
=48						KERR_EOF = kernel.event.file.EOF 			; Event $30
.dc29	bc29					Export_KNLOpenFileRead:
.dc29	bc29	48		pha				pha
.dc2a	bc2a	a9 00		lda #$00	        lda     #kernel.args.file.open.READ ; set READ mode.
.dc2c	bc2c	85 f5		sta $f5		        sta     kernel.args.file.open.mode
.dc2e	bc2e	68		pla		        pla
.dc2f	bc2f	20 69 bc	jsr $bc69			jsr 	KNLSetupFileName
.dc32	bc32	a9 46		lda #$46	        lda     #event & $FF 				; tell kernel where to store event data
.dc34	bc34	85 f0		sta $f0		        sta     kernel.args.events+0
.dc36	bc36	a9 08		lda #$08	        lda     #event >> 8
.dc38	bc38	85 f1		sta $f1		        sta     kernel.args.events+1
.dc3a	bc3a	a9 00		lda #$00			lda 	#0 							; currently drive zero only.
.dc3c	bc3c	85 f3		sta $f3				sta 	kernel.args.file.open.drive
.dc3e	bc3e	20 5c ff	jsr $ff5c	        jsr     kernel.File.Open 			; open the file and exit.
.dc41	bc41	a9 38		lda #$38	        lda     #kernel.event.file.ERROR
.dc43	bc43	b0 1d		bcs $bc62	        bcs     _out
.dc45	bc45					_loop
.dc45	bc45	20 0c ff	jsr $ff0c			jsr     kernel.Yield    			; event wait
.dc48	bc48	20 00 ff	jsr $ff00			jsr     kernel.NextEvent
.dc4b	bc4b	b0 f8		bcs $bc45			bcs     _loop
.dc4d	bc4d	ad 46 08	lda $0846			lda 	event.type
.dc50	bc50	c9 2a		cmp #$2a			cmp     #kernel.event.file.OPENED
.dc52	bc52	f0 0a		beq $bc5e			beq 	_success
.dc54	bc54	c9 28		cmp #$28			cmp     #kernel.event.file.NOT_FOUND
.dc56	bc56	f0 0a		beq $bc62			beq 	_out
.dc58	bc58	c9 38		cmp #$38			cmp     #kernel.event.file.ERROR
.dc5a	bc5a	f0 06		beq $bc62			beq 	_out
.dc5c	bc5c	80 e7		bra $bc45			bra     _loop
.dc5e	bc5e					_success
.dc5e	bc5e	ad 49 08	lda $0849	        lda     event.file.stream
.dc61	bc61	18		clc		        clc
.dc62	bc62					_out
.dc62	bc62	60		rts		        rts
.dc63	bc63					Export_KNLCloseFile:
.dc63	bc63	85 f3		sta $f3				sta     kernel.args.file.close.stream
.dc65	bc65	20 68 ff	jsr $ff68			jsr     kernel.File.Close
.dc68	bc68	60		rts				rts
.dc69	bc69					KNLSetupFileName:
.dc69	bc69	5a		phy				phy 								; save Y on stack
.dc6a	bc6a	85 36		sta $36				sta 	zTemp0 						; save filename position in temp, and in kenrel slot
.dc6c	bc6c	86 37		stx $37				stx 	zTemp0+1
.dc6e	bc6e	85 fb		sta $fb		        sta     kernel.args.file.open.fname+0
.dc70	bc70	86 fc		stx $fc		        stx     kernel.args.file.open.fname+1
.dc72	bc72	a0 ff		ldy #$ff	        ldy 	#$FF 						; get the filename length => Kernel slot
.dc74	bc74					_KNLGetLength:
.dc74	bc74	c8		iny				iny
.dc75	bc75	b1 36		lda ($36),y			lda 	(zTemp0),y
.dc77	bc77	d0 fb		bne $bc74			bne 	_KNLGetLength
.dc79	bc79	84 fd		sty $fd				sty 	kernel.args.file.open.fname_len
.dc7b	bc7b	7a		ply				ply
.dc7c	bc7c	60		rts				rts
=64						KNLBufLen = 64 								; read buffer size.
.084d						KNLStream:
>084d								.byte   ?
.084e						KNLBuf:
>084e								.fill   KNLBufLen
.088e						KNLNext:
>088e								.byte   ?
.088f						KNLEnd:
>088f								.byte   ?
.dc7d	bc7d					Export_KNLReadByteInit:
.dc7d	bc7d	8d 4d 08	sta $084d			sta     KNLStream 					; save stream
.dc80	bc80	9c 8e 08	stz $088e			stz     KNLNext 					; reset buffer
.dc83	bc83	9c 8f 08	stz $088f			stz     KNLEnd
.dc86	bc86	60		rts				rts
.dc87	bc87					Export_KNLReadByte:
.dc87	bc87	da		phx				phx
.dc88	bc88	ae 8e 08	ldx $088e			ldx     KNLNext 					; all data consumed ?
.dc8b	bc8b	ec 8f 08	cpx $088f			cpx     KNLEnd
.dc8e	bc8e	d0 0d		bne $bc9d			bne     _KNLRBGetNextByte
.dc90	bc90	20 a6 bc	jsr $bca6			jsr     KNLRBGetNextBlock 			; read next chunk from the stream
.dc93	bc93	b0 0f		bcs $bca4			bcs     _KNLRBError 				; error has occurred on read.
.dc95	bc95	8d 8f 08	sta $088f			sta     KNLEnd 						; # read is the number available
.dc98	bc98	a2 00		ldx #$00			ldx     #0 							; reset the read pointer.
.dc9a	bc9a	8e 8e 08	stx $088e			stx     KNLNext
.dc9d	bc9d					_KNLRBGetNextByte:
.dc9d	bc9d	bd 4e 08	lda $084e,x			lda     KNLBuf,x 					; get the next data item
.dca0	bca0	ee 8e 08	inc $088e			inc     KNLNext 					; and advance the index
.dca3	bca3	18		clc				clc 								; succeeded
.dca4	bca4					_KNLRBError:
.dca4	bca4	fa		plx				plx
.dca5	bca5	60		rts				rts
.dca6	bca6					KNLRBGetNextBlock:
.dca6	bca6	ad 4d 08	lda $084d			lda     KNLStream 					; set stream to read from
.dca9	bca9	85 f3		sta $f3				sta     kernel.args.file.read.stream
.dcab	bcab	a9 40		lda #$40			lda     #KNLBufLen 					; set bytes to read.
.dcad	bcad	85 f4		sta $f4				sta     kernel.args.file.read.buflen
.dcaf	bcaf	20 60 ff	jsr $ff60			jsr     kernel.File.Read 			; read request
.dcb2	bcb2	a9 38		lda #$38			lda     #kernel.event.file.ERROR    ; Kernel out of events/buffers; shouldn't happen
.dcb4	bcb4	b0 2e		bcs $bce4			bcs     _KGNBExitFail               ; report as general error
.dcb6	bcb6					_KGRBEventLoop:
.dcb6	bcb6	20 0c ff	jsr $ff0c			jsr     kernel.Yield    			; event wait
.dcb9	bcb9	20 00 ff	jsr $ff00			jsr     kernel.NextEvent
.dcbc	bcbc	b0 f8		bcs $bcb6			bcs     _KGRBEventLoop
.dcbe	bcbe	ad 46 08	lda $0846			lda 	event.type 					; get event
.dcc1	bcc1	c9 2c		cmp #$2c			cmp     #kernel.event.file.DATA 	; data, return data
.dcc3	bcc3	f0 0a		beq $bccf			beq     _KNLRBGetNextByte
.dcc5	bcc5	c9 38		cmp #$38			cmp     #kernel.event.file.ERROR  	; errors on file i/o, return as appropriate.
.dcc7	bcc7	f0 1b		beq $bce4			beq 	_KGNBExitFail
.dcc9	bcc9	c9 30		cmp #$30			cmp     #kernel.event.file.EOF
.dccb	bccb	f0 17		beq $bce4			beq 	_KGNBExitFail
.dccd	bccd	80 e7		bra $bcb6			bra 	_KGRBEventLoop
.dccf	bccf					_KNLRBGetNextByte:
.dccf	bccf	a9 4e		lda #$4e			lda     #<KNLBuf 					; Set the target buffer
.dcd1	bcd1	85 fb		sta $fb				sta     kernel.args.recv.buf+0
.dcd3	bcd3	a9 08		lda #$08			lda     #>KNLBuf
.dcd5	bcd5	85 fc		sta $fc				sta     kernel.args.recv.buf+1
.dcd7	bcd7	ad 4c 08	lda $084c			lda     event.file.data.read 		; Set the target length
.dcda	bcda	85 fd		sta $fd				sta     kernel.args.recv.buflen
.dcdc	bcdc	20 04 ff	jsr $ff04			jsr     kernel.ReadData		       	; Get the data from the kernel  (Synchronous call, no error)
.dcdf	bcdf	ad 4c 08	lda $084c			lda    event.file.data.read 		; Return # of bytes read (in A)
.dce2	bce2	18		clc				clc
.dce3	bce3	60		rts				rts
.dce4	bce4					_KGNBExitFail:
.dce4	bce4	38		sec				sec
.dce5	bce5	60		rts				rts

;******  Return to file: _basic.asm


;******  End of listing
