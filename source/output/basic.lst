
; 64tass Turbo Assembler Macro V1.56.2625 listing file
; 64tass -D AUTORUN=1 -q -b -Wall -c -L output/basic.lst -l output/basic.lbl -Wall -o basic.rom _basic.asm
; Fri Nov  4 08:25:12 2022

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=1					AUTORUN=1

;******  Processing input file: _basic.asm


;******  Processing file: ./common/aa.system/01common.inc

=$30					ZeroPageMandatory = $30
=$400					ZeroPagePreference = $400
=$480					MemoryStorage = $480
=$2000					BasicStart = $2000
=$8000					BasicEnd = $8000
=$8000					CodeStart = $8000
=$1000					VariableSpace = $1000
=$2000					EndVariableSpace = $2000
=8					MathStackSize = 8
=512					BasicStackSize = 512
=3584					BasicStackBase = $1000-BasicStackSize
=80					MaxLineSize = 80

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/04data.inc

.0030					codePtr:
>0030							.fill 	4
.0034					basicStack:
>0034							.fill 	2
.0036					zTemp0:
>0036							.fill 	2
.0038					zTemp1:
>0038							.fill 	2
.003a					zTemp2:
>003a							.fill 	2
.003c					zsTemp:
>003c							.fill 	2
.003e					zaTemp:
>003e							.fill 	2
=$30					safePtr = codePtr 							; minimise direct tinkering
=$80					NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20					NSBIsReference = $20 						; bit 5 : is a reference
=$10					NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18					NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03					NSBRefMask = $03 							; bits 0,1 : Bytes of reference, -1 (e.g. 00 = 1 byte, 11 = 4 bytes)
=$04					NSBIsArray = $04
=$00					NSTInteger = $00 							; base types for bits 3..4
=$08					NSTFloat = $08
=$10					NSTString = $10
=$18					NSTProcedure = $18
.0400					NSStatus:
>0400							.fill 	MathStackSize
.0408					NSMantissa0:
>0408							.fill 	MathStackSize 				; (this is my integer mantissa system)
.0410					NSMantissa1:
>0410							.fill 	MathStackSize
.0418					NSMantissa2:
>0418							.fill 	MathStackSize
.0420					NSMantissa3:
>0420							.fill 	MathStackSize
.0428					NSExponent:
>0428							.fill 	MathStackSize
.0480					identStart:
>0480							.fill 	1
.0481					identTypeStart:
>0481							.fill 	1
.0482					identTypeEnd:
>0482							.fill 	1
.0483					identHash:
>0483							.fill 	1
.0484					identTypeByte:
>0484							.fill 	1	 						; (see tokenising.pdf)
.0485					encodeState:
>0485							.fill 	1
.0486					digitTemp:
>0486							.fill 	1
.0487					decimalCount:
>0487							.fill 	1
.0488					randomSeed:
>0488							.fill 	4
.048c					lowMemPtr:
>048c							.fill 	2
.048e					stringMemory:
>048e							.fill 	2
.0490					stringInitialised:
>0490							.fill 	1
.0491					stringTempPointer:
>0491							.fill 	2
.0493					breakCheck:
>0493							.fill 	1
.0494					decimalPlaces:
>0494							.fill 	1
.0495					dbOffset:
>0495							.fill 	1
.0496					lastParameter:
>0496							.fill 	1
.0497					dataPointer:
>0497							.fill 	5
.049c					inDataStatement:
>049c							.fill 	1
.049d					tbOffset:
>049d							.fill 	1
.049e					AssemblerAddress:
>049e							.fill 	2
.04a0					AssemblerControl:
>04a0							.fill 	1
.04a1					ParamStart:
>04a1							.fill 	2
.04a3					IsGroup1:
>04a3							.fill 	1
.04a4					BaseOpcode:
>04a4							.fill 	1
.04a5					ModeMask:
>04a5							.fill 	1
.04a6					listIndent:
>04a6							.fill 	1
.04a7					tokenOffset:
>04a7							.fill 	1
.04a8					tokenLineNumber:
>04a8							.fill 	2
.04aa					tokenBuffer:
>04aa							.fill 	253
.05a7					lineBuffer:
>05a7							.fill 	MaxLineSize+1
.05f8					numberBuffer:
>05f8							.fill 	34
.061a					decimalBuffer:
>061a							.fill 	16

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/constants.inc

=$80					AM_ISZP = $80
=$40					AM_ISG1 = $40
=$20					AM_ISG2 = $20
=224					AM_IMMEDIATE = AM_ISZP+AM_ISG1+AM_ISG2+$00
=228					AM_ZEROPAGE = AM_ISZP+AM_ISG1+AM_ISG2+$04
=40					AM_ACC = AM_ISG2+$08
=108					AM_ABS = AM_ISG1+AM_ISG2+$0C
=208					AM_INDY = AM_ISZP+AM_ISG1+$10
=244					AM_ZEROX = AM_ISZP+AM_ISG1+AM_ISG2+$14
=120					AM_ABSY = AM_ISG1+AM_ISG2+$18
=124					AM_ABSX = AM_ISG1+AM_ISG2+$1C
=209					AM_IND = AM_ISZP+AM_ISG1+$11
=$80					AM_ZEROY = AM_ISZP
=$01					AM_INDABS = $01
=$02					AM_INDABSX = $02
=192					AM_INDX = AM_ISZP+AM_ISG1+$00

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/handlers.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.inc

=1					ERRID_BREAK = 1
=2					ERRID_SYNTAX = 2
=3					ERRID_DIVZERO = 3
=4					ERRID_RANGE = 4
=5					ERRID_TYPE = 5
=6					ERRID_MEMORY = 6
=7					ERRID_ARGUMENT = 7
=8					ERRID_STOP = 8
=9					ERRID_STRING = 9
=10					ERRID_ASSERT = 10
=11					ERRID_DATA = 11
=12					ERRID_NOTDONE = 12
=13					ERRID_LINE = 13
=14					ERRID_GOSUB = 14
=15					ERRID_REPEAT = 15
=16					ERRID_WHILE = 16
=17					ERRID_FOR = 17
=18					ERRID_STACK = 18
=19					ERRID_STRUCT = 19
=20					ERRID_PROC = 20
=21					ERRID_REDEFINE = 21
=22					ERRID_ARRAYSIZE = 22
=23					ERRID_ARRAYIDX = 23

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst.inc

=$00					KWD_LESSLESS                         = $00; $00 <<
=$01					KWD_LESSEQUAL                        = $01; $01 <=
=$02					KWD_LESSGREATER                      = $02; $02 <>
=$03					KWD_PLINGPLING3                      = $03; $03 !!3
=$04					KWD_GREATERLESS                      = $04; $04 ><
=$05					KWD_GREATEREQUAL                     = $05; $05 >=
=$06					KWD_GREATERGREATER                   = $06; $06 >>
=$07					KWD_PLINGPLING7                      = $07; $07 !!7
=$08					KWD_PLINGPLING8                      = $08; $08 !!8
=$09					KWD_PLINGPLING9                      = $09; $09 !!9
=$0a					KWD_PLINGPLING10                     = $0a; $0a !!10
=$0b					KWD_PLINGPLING11                     = $0b; $0b !!11
=$0c					KWD_PLINGPLING12                     = $0c; $0c !!12
=$0d					KWD_PLINGPLING13                     = $0d; $0d !!13
=$0e					KWD_PLINGPLING14                     = $0e; $0e !!14
=$0f					KWD_PLINGPLING15                     = $0f; $0f !!15
=$10					KWD_AT                               = $10; $10 @
=$11					KWD_PLINGPLING17                     = $11; $11 !!17
=$12					KWD_PLINGPLING18                     = $12; $12 !!18
=$13					KWD_LSQPAREN                         = $13; $13 [
=$14					KWD_BACKSLASH                        = $14; $14 \
=$15					KWD_RSQPAREN                         = $15; $15 ]
=$16					KWD_HAT                              = $16; $16 ^
=$17					KWD_UNDERSCORE                       = $17; $17 _
=$18					KWD_BQUOTE                           = $18; $18 `
=$19					KWD_PLINGPLING25                     = $19; $19 !!25
=$1a					KWD_PLINGPLING26                     = $1a; $1a !!26
=$1b					KWD_LCURLY                           = $1b; $1b {
=$1c					KWD_BAR                              = $1c; $1c |
=$1d					KWD_RCURLY                           = $1d; $1d }
=$1e					KWD_TILDE                            = $1e; $1e ~
=$21					KWD_PLING                            = $21; $21 !
=$22					KWD_DQUOTE                           = $22; $22 "
=$23					KWD_HASH                             = $23; $23 #
=$24					KWD_DOLLAR                           = $24; $24 $
=$25					KWD_PERCENT                          = $25; $25 %
=$26					KWD_AMPERSAND                        = $26; $26 &
=$27					KWD_QUOTE                            = $27; $27 '
=$28					KWD_LPAREN                           = $28; $28 (
=$29					KWD_RPAREN                           = $29; $29 )
=$2a					KWD_STAR                             = $2a; $2a *
=$2b					KWD_PLUS                             = $2b; $2b +
=$2c					KWD_COMMA                            = $2c; $2c ,
=$2d					KWD_MINUS                            = $2d; $2d -
=$2e					KWD_PERIOD                           = $2e; $2e .
=$2f					KWD_SLASH                            = $2f; $2f /
=$30					KWD_0                                = $30; $30 0
=$31					KWD_1                                = $31; $31 1
=$32					KWD_2                                = $32; $32 2
=$33					KWD_3                                = $33; $33 3
=$34					KWD_4                                = $34; $34 4
=$35					KWD_5                                = $35; $35 5
=$36					KWD_6                                = $36; $36 6
=$37					KWD_7                                = $37; $37 7
=$38					KWD_8                                = $38; $38 8
=$39					KWD_9                                = $39; $39 9
=$3a					KWD_COLON                            = $3a; $3a :
=$3b					KWD_SEMICOLON                        = $3b; $3b ;
=$3c					KWD_LESS                             = $3c; $3c <
=$3d					KWD_EQUAL                            = $3d; $3d =
=$3e					KWD_GREATER                          = $3e; $3e >
=$3f					KWD_QMARK                            = $3f; $3f ?
=$83					KWD_ABSLPAREN                        = $83; $83 ABS(
=$84					KWD_ALLOCLPAREN                      = $84; $84 ALLOC(
=$85					KWD_ASCLPAREN                        = $85; $85 ASC(
=$86					KWD_CHRDOLLARLPAREN                  = $86; $86 CHR$(
=$87					KWD_EVENTLPAREN                      = $87; $87 EVENT(
=$88					KWD_FALSE                            = $88; $88 FALSE
=$89					KWD_FRACLPAREN                       = $89; $89 FRAC(
=$8a					KWD_HITLPAREN                        = $8a; $8a HIT(
=$8b					KWD_INTLPAREN                        = $8b; $8b INT(
=$8c					KWD_ISVALLPAREN                      = $8c; $8c ISVAL(
=$8d					KWD_JOYBLPAREN                       = $8d; $8d JOYB(
=$8e					KWD_JOYXLPAREN                       = $8e; $8e JOYX(
=$8f					KWD_JOYYLPAREN                       = $8f; $8f JOYY(
=$90					KWD_LEFTDOLLARLPAREN                 = $90; $90 LEFT$(
=$91					KWD_LENLPAREN                        = $91; $91 LEN(
=$92					KWD_MAXLPAREN                        = $92; $92 MAX(
=$93					KWD_MIDDOLLARLPAREN                  = $93; $93 MID$(
=$94					KWD_MINLPAREN                        = $94; $94 MIN(
=$95					KWD_NOTLPAREN                        = $95; $95 NOT(
=$96					KWD_RANDOMLPAREN                     = $96; $96 RANDOM(
=$97					KWD_RIGHTDOLLARLPAREN                = $97; $97 RIGHT$(
=$98					KWD_RNDLPAREN                        = $98; $98 RND(
=$99					KWD_SGNLPAREN                        = $99; $99 SGN(
=$9a					KWD_SPCLPAREN                        = $9a; $9a SPC(
=$9b					KWD_STRDOLLARLPAREN                  = $9b; $9b STR$(
=$9c					KWD_TIMERLPAREN                      = $9c; $9c TIMER(
=$9d					KWD_TRUE                             = $9d; $9d TRUE
=$9e					KWD_VALLPAREN                        = $9e; $9e VAL(
=$9f					KWD_FOR                              = $9f; $9f FOR
=$a0					KWD_IF                               = $a0; $a0 IF
=$a1					KWD_PROC                             = $a1; $a1 PROC
=$a2					KWD_REPEAT                           = $a2; $a2 REPEAT
=$a3					KWD_WHILE                            = $a3; $a3 WHILE
=$a4					KWD_ENDIF                            = $a4; $a4 ENDIF
=$a5					KWD_ENDPROC                          = $a5; $a5 ENDPROC
=$a6					KWD_NEXT                             = $a6; $a6 NEXT
=$a7					KWD_THEN                             = $a7; $a7 THEN
=$a8					KWD_UNTIL                            = $a8; $a8 UNTIL
=$a9					KWD_WEND                             = $a9; $a9 WEND
=$aa					KWD_BY                               = $aa; $aa BY
=$ab					KWD_CALL                             = $ab; $ab CALL
=$ac					KWD_CIRCLE                           = $ac; $ac CIRCLE
=$ad					KWD_CLEAR                            = $ad; $ad CLEAR
=$ae					KWD_CLS                              = $ae; $ae CLS
=$af					KWD_COLOR                            = $af; $af COLOR
=$b0					KWD_COLOUR                           = $b0; $b0 COLOUR
=$b1					KWD_DATA                             = $b1; $b1 DATA
=$b2					KWD_DIM                              = $b2; $b2 DIM
=$b3					KWD_DOWNTO                           = $b3; $b3 DOWNTO
=$b4					KWD_ELSE                             = $b4; $b4 ELSE
=$b5					KWD_FROM                             = $b5; $b5 FROM
=$b6					KWD_GFX                              = $b6; $b6 GFX
=$b7					KWD_GOSUB                            = $b7; $b7 GOSUB
=$b8					KWD_GOTO                             = $b8; $b8 GOTO
=$b9					KWD_HERE                             = $b9; $b9 HERE
=$ba					KWD_IMAGE                            = $ba; $ba IMAGE
=$bb					KWD_LET                              = $bb; $bb LET
=$bc					KWD_LINE                             = $bc; $bc LINE
=$bd					KWD_LOCAL                            = $bd; $bd LOCAL
=$be					KWD_OFF                              = $be; $be OFF
=$bf					KWD_ON                               = $bf; $bf ON
=$c0					KWD_OUTLINE                          = $c0; $c0 OUTLINE
=$c1					KWD_PALETTE                          = $c1; $c1 PALETTE
=$c2					KWD_PLOT                             = $c2; $c2 PLOT
=$c3					KWD_PRINT                            = $c3; $c3 PRINT
=$c4					KWD_READ                             = $c4; $c4 READ
=$c5					KWD_RECT                             = $c5; $c5 RECT
=$c6					KWD_REM                              = $c6; $c6 REM
=$c7					KWD_RETURN                           = $c7; $c7 RETURN
=$c8					KWD_SOLID                            = $c8; $c8 SOLID
=$c9					KWD_SPRITE                           = $c9; $c9 SPRITE
=$ca					KWD_TEXT                             = $ca; $ca TEXT
=$cb					KWD_TO                               = $cb; $cb TO

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst0.inc

=$80					KWC_EOL = $80
=$ff					KWC_STRING = $FF
=$fe					KWC_HEXCONST = $FE
=$9f					KWC_FIRST_STRUCTURE = $9f
=$a4					KWC_FIRST_STRUCTURE_DEC = $a4
=$a9					KWC_LAST_STRUCTURE = $a9
=$83					KWC_FIRST_UNARY = $83
=$9e					KWC_LAST_UNARY = $9e

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/stack.inc

=$e0					STK_GOSUB = $E0
=$d0					STK_FOR = $D0
=$c0					STK_REPEAT = $C0
=$b0					STK_PROC = $B0
=$a0					STK_WHILE = $A0
=$01					STK_LOCALN = $01
=$02					STK_LOCALS = $02

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/00start.asm

.8000	a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.8002	9a		txs				txs
.8003	20 e7 b6	jsr $b6e7			jsr 	EXTInitialise 				; hardware initialise
.8006	a9 00		lda #$00			lda 	#0 							; graphics system initialise.
.8008	8a		txa				txa
.8009	a8		tay				tay
.800a	20 85 80	jsr $8085			jsr 	GXGraphicDraw
.800d	a2 80		ldx #$80			ldx 	#(Prompt >> 8) 				; prompt
.800f	a9 1d		lda #$1d			lda 	#(Prompt & $FF)
.8011	20 30 9b	jsr $9b30			jsr 	PrintStringXA
.8014	20 0d 94	jsr $940d			jsr 	NewCommand 					; erase current program
.8017	20 38 a8	jsr $a838			jsr 	BackloadProgram
.801a	4c cc 95	jmp $95cc			jmp 	CommandRun
>801d	0d 0d 2a 2a 2a 20 46 32		Prompt:	.text 	13,13,"*** F256 Junior SuperBASIC ***",13,13
>8025	35 36 20 4a 75 6e 69 6f 72 20 53 75 70 65 72 42
>8035	41 53 49 43 20 2a 2a 2a 0d 0d
>803f	57 72 69 74 74 65 6e 20				.text 	"Written by Paul Robson 2022.",13,13
>8047	62 79 20 50 61 75 6c 20 52 6f 62 73 6f 6e 20 32
>8057	30 32 32 2e 0d 0d

;******  Processing file: ./common/aa.system/../generated/timestamp.asm

>805d	42 75 69 6c 74 20 46 72			.text "Built Friday 04-Nov-2022. Build 2651."
>8065	69 64 61 79 20 30 34 2d 4e 6f 76 2d 32 30 32 32
>8075	2e 20 42 75 69 6c 64 20 32 36 35 31 2e

;******  Return to file: ./common/aa.system/00start.asm

>8082	0d 0d 00					.byte 	13,13,0

;******  Processing file: ./common/aa.system/../../../graphics/_graphics.asm

=1					graphicsIntegrated = 1

;******  Processing file: ./common/aa.system/../../../graphics/aa.main/graphics.inc

=0					GCMD_Initialise = 0*2
=2					GCMD_BitmapCtl = 1*2
=4					GCMD_SpriteCtl = 2*2
=6					GCMD_Clear = 3*2
=8					GCMD_Colour = 4*2
=10					GCMD_DrawFont = 5*2
=12					GCMD_DrawSprite = 6*2
=14					GCMD_SpriteUse = 7*2
=16					GCMD_SpriteImage = 8*2
=18					GCMD_SpriteCollide = 9*2
=32					GCMD_Move = 16*2
=34					GCMD_Line = 17*2
=36					GCMD_FrameRect = 18*2
=38					GCMD_FillRect = 19*2
=40					GCMD_FrameCircle = 20*2
=42					GCMD_FillCircle = 21*2
=48					GCMD_Plot = 24*2
=50					GCMD_SpriteMove = 25*2

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./aa.main/aa.data.asm

=3					GXMappingPage = 3
=24576					GXMappingAddress = ($2000 * GXMappingPage)
=0					GXMappingLUT = 0
=11					GXEditSlot = 8 + GXMappingPage
=$36					gxzTemp0 = zTemp0
=$38					gxzTemp1 = zTemp1
=$3a					gxzTemp2 = zTemp2
=$3c					gxzScreen = zsTemp
=$5f8					gxPixelBuffer = numberBuffer
.062a					gxCurrentX:
>062a							.fill 	2
.062c					gxCurrentY:
>062c							.fill 	2
.062e					gxLastX:
>062e							.fill 	2
.0630					gxLastY:
>0630							.fill 	2
.0632					gxX0:
>0632							.fill 	2
.0634					gxY0:
>0634							.fill 	2
.0636					gxX1:
>0636							.fill 	2
.0638					gxY1:
>0638							.fill 	2
.063a					gxSpritesOn:
>063a							.fill 	1
.063b					gxBitmapsOn:
>063b							.fill 	1
.063c					gxBasePage:
>063c							.fill 	1
.063d					gxSpritePage:
>063d							.fill 	1
.063e					gxHeight:
>063e							.fill 	1
.063f					gxMode:
>063f							.fill 	1
.0640					gxColour:
>0640							.fill 	1
.0641					gxEORValue:
>0641							.fill 	1
.0642					gxANDValue:
>0642							.fill 	1
.0643					gxOriginalLUTValue:
>0643							.fill 	1
.0644					gxOriginalMMUSetting:
>0644							.fill 	1
.0645					gsOffset:
>0645							.fill 	1
.0646					GSCurrentSpriteID:
>0646							.fill 	1
.0647					GSCurrentSpriteAddr:
>0647							.fill 	2
.0649					GXSpriteOffsetBase:
>0649							.fill 	2
.064b					GXSpriteLow:
>064b							.fill 	64
.068b					GXSpriteHigh:
>068b							.fill 	64

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./aa.main/main.asm

.8085					GXGraphicDraw:
.8085	c9 20		cmp #$20			cmp 	#GCMD_Move					; low instructions don't use coordinates
.8087	b0 06		bcs $808f			bcs 	_GDCoordinate
.8089	86 36		stx $36				stx 	gxzTemp0 					; save X/Y
.808b	84 37		sty $37				sty 	gxzTemp0+1
.808d	80 4b		bra $80da			bra 	_GDExecuteA 				; and execute
.808f					_GDCoordinate:
.808f	48		pha				pha 								; save AXY
.8090	da		phx				phx
.8091	5a		phy				phy
.8092	a2 03		ldx #$03			ldx 	#3 							; copy currentX to lastX
.8094					_GDCopy1:
.8094	bd 2a 06	lda $062a,x			lda 	gxCurrentX,x
.8097	9d 2e 06	sta $062e,x			sta 	gxLastX,x
.809a	ca		dex				dex
.809b	10 f7		bpl $8094			bpl 	_GDCopy1
.809d	68		pla				pla 								; update Y
.809e	8d 2c 06	sta $062c			sta 	gxCurrentY
.80a1	9c 2d 06	stz $062d			stz 	gxCurrentY+1
.80a4	68		pla				pla
.80a5	8d 2a 06	sta $062a			sta 	gxCurrentX
.80a8	68		pla				pla 								; get A (command+X.1) back
.80a9	48		pha				pha
.80aa	29 01		and #$01			and 	#1 							; put LSB as MSB of Current.X
.80ac	8d 2b 06	sta $062b			sta 	gxCurrentX+1
.80af	68		pla				pla 								; get command back
.80b0	29 fe		and #$fe			and 	#$FE 						; lose LSB, chuck the stray X bit
.80b2	48		pha				pha 								; push back.
.80b3	c9 32		cmp #$32			cmp 	#GCMD_SpriteMove 			; move sprite does not clip.
.80b5	f0 17		beq $80ce			beq 	_GDCopyToWorkArea
.80b7	ad 2b 06	lda $062b			lda 	gxCurrentX+1 				; X < 256 X okay
.80ba	f0 07		beq $80c3			beq 	_GDCheckY
.80bc	ad 2a 06	lda $062a			lda 	gxCurrentX 					; otherwise X < 320 = 256 + 64
.80bf	c9 40		cmp #$40			cmp 	#64
.80c1	b0 08		bcs $80cb			bcs 	_GDError1
.80c3					_GDCheckY:
.80c3	ad 2c 06	lda $062c			lda 	gxCurrentY 					; check Y < Height.
.80c6	cd 3e 06	cmp $063e			cmp 	gxHeight
.80c9	90 03		bcc $80ce			bcc 	_GDCopyToWorkArea
.80cb					_GDError1:
.80cb	68		pla				pla
.80cc					_GDError2:
.80cc	38		sec				sec
.80cd	60		rts				rts
.80ce					_GDCopyToWorkArea:
.80ce	a2 07		ldx #$07			ldx 	#7 							; copy current and last to gxXY/12 work area
.80d0					_GDCopy2:
.80d0	bd 2a 06	lda $062a,x			lda 	gxCurrentX,x
.80d3	9d 32 06	sta $0632,x			sta 	gxX0,x
.80d6	ca		dex				dex
.80d7	10 f7		bpl $80d0			bpl 	_GDCopy2
.80d9	68		pla				pla 								; get command
.80da					_GDExecuteA:
.80da	c9 34		cmp #$34			cmp 	#GRFirstFreeCode*2 			; bad ?
.80dc	b0 ee		bcs $80cc			bcs 	_GDError2
.80de	aa		tax				tax
.80df	7c e5 80	jmp ($80e5,x)			jmp 	(GRVectorTable,x)
.80e2					GXMove:
.80e2	18		clc				clc
.80e3	60		rts				rts
.80e4					GRUndefined:
>80e4	db						.byte 	$DB 						; causes a break in the emulator

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./aa.main/vectors.asm

=26					GRFirstFreeCode = 26
.80e5					GRVectorTable:
>80e5	b4 82					.word	GXInitialise             ; $00 Initialise
>80e7	ce 82					.word	GXControlBitmap          ; $01 BitmapCtl
>80e9	16 83					.word	GXControlSprite          ; $02 SpriteCtl
>80eb	66 82					.word	GXClearBitmap            ; $03 Clear
>80ed	a5 84					.word	GXSetColourMode          ; $04 Colour
>80ef	6d 86					.word	GXFontHandler            ; $05 DrawFont
>80f1	b5 86					.word	GXSpriteHandler          ; $06 DrawSprite
>80f3	21 87					.word	GXSelect                 ; $07 SpriteUse
>80f5	4a 87					.word	GXSelectImage            ; $08 SpriteImage
>80f7	df 88					.word	GXCollide                ; $09 SpriteCollide
>80f9	e4 80					.word	GRUndefined              ; $0a
>80fb	e4 80					.word	GRUndefined              ; $0b
>80fd	e4 80					.word	GRUndefined              ; $0c
>80ff	e4 80					.word	GRUndefined              ; $0d
>8101	e4 80					.word	GRUndefined              ; $0e
>8103	e4 80					.word	GRUndefined              ; $0f
>8105	e2 80					.word	GXMove                   ; $10 Move
>8107	73 83					.word	GXLine                   ; $11 Line
>8109	ee 84					.word	GXFrameRectangle         ; $12 FrameRect
>810b	eb 84					.word	GXFillRectangle          ; $13 FillRect
>810d	1d 81					.word	GXFrameCircle            ; $14 FrameCircle
>810f	19 81					.word	GXFillCircle             ; $15 FillCircle
>8111	e4 80					.word	GRUndefined              ; $16
>8113	e4 80					.word	GRUndefined              ; $17
>8115	d3 84					.word	GXPlotPoint              ; $18 Plot
>8117	e0 87					.word	GXMoveSprite             ; $19 SpriteMove

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/circle.asm

.8119					GXFillCircle:
.8119	a9 ff		lda #$ff			lda 	#255
.811b	80 02		bra $811f			bra 	GXCircle
.811d					GXFrameCircle:
.811d	a9 00		lda #$00			lda 	#0
.811f					GXCircle:
.811f	8d ce 06	sta $06ce			sta 	gxIsFillMode					; save Fill flag
.8122	ad 3b 06	lda $063b			lda 	gxBitmapsOn
.8125	f0 26		beq $814d			beq 	_GXCFail
.8127	20 86 89	jsr $8986			jsr 	GXSortXY 					; topleft/bottomright
.812a	20 50 88	jsr $8850			jsr 	GXOpenBitmap 				; start drawing
.812d	20 1f 82	jsr $821f			jsr 	GXCircleSetup 				; set up for drawing
.8130	9c cf 06	stz $06cf			stz 	gxYChanged
.8133					_GXCircleDraw:
.8133	ad cc 06	lda $06cc			lda 	gXCentre					; while x <= y
.8136	cd cd 06	cmp $06cd			cmp 	gYCentre
.8139	90 0a		bcc $8145			bcc 	_GXCircleContinue
.813b	d0 03		bne $8140			bne 	_GXNoLast
.813d	20 52 81	jsr $8152			jsr 	GXPlot1
.8140					_GXNoLast:
.8140	20 61 88	jsr $8861			jsr 	GXCloseBitmap 				; close the bitmap
.8143	18		clc				clc
.8144	60		rts				rts
.8145					_GXCircleContinue:
.8145	20 4f 81	jsr $814f			jsr 	GXPlot2 					; draw it
.8148	20 cc 81	jsr $81cc			jsr 	GXCircleMove 				; adjust the coordinates
.814b	80 e6		bra $8133			bra 	_GXCircleDraw
.814d					_GXCFail:
.814d	38		sec				sec
.814e	60		rts				rts
.814f					GXPlot2:
.814f	20 52 81	jsr $8152			jsr 	GXPlot1 						; plot and swap, fall through does twice
.8152					GXPlot1:
.8152	ad cd 06	lda $06cd			lda 	gYCentre 						; if y = 0, don't do it twice (xor)
.8155	f0 03		beq $815a			beq 	_GXPlot1Only
.8157	20 76 81	jsr $8176			jsr 	GXPlot0 						; plot and negate
.815a					_GXPlot1Only:
.815a	20 76 81	jsr $8176			jsr 	GXPlot0 						; twice, undoing negation
.815d	ad cc 06	lda $06cc			lda 	gXCentre 						; swap X and Y
.8160	ae cd 06	ldx $06cd			ldx	 	gYCentre
.8163	8d cd 06	sta $06cd			sta 	gYCentre
.8166	8e cc 06	stx $06cc			stx 	gXCentre
.8169	ad cf 06	lda $06cf			lda 	gxYChanged 						; toggle Y Changed flag
.816c	a9 ff		lda #$ff			lda 	#$FF
.816e	8d cf 06	sta $06cf			sta 	gxYChanged
.8171	60		rts				rts
.8172	20 76 81	jsr $8176			jsr 	GXPlot0 						; do once
.8175	60		rts				rts
.8176	ad ce 06	lda $06ce	GXPlot0:lda 	gxIsFillMode 					; outline mode, always draw as X or Y will change
.8179	f0 05		beq $8180			beq 	_GXPlot0Always
.817b	ad cf 06	lda $06cf			lda 	gxYChanged						; fill mode, only draw if changed.
.817e	f0 2d		beq $81ad			beq 	GXPlot0Exit
.8180					_GXPlot0Always:
.8180	a2 02		ldx #$02			ldx 	#2 								; copy Y1-A => Y0
.8182	ad cd 06	lda $06cd			lda 	gYCentre
.8185	20 ae 81	jsr $81ae			jsr 	GXSubCopy
.8188	a2 00		ldx #$00			ldx 	#0 								; copy X1-A => X0,
.818a	ad cc 06	lda $06cc			lda 	gXCentre
.818d	20 ae 81	jsr $81ae			jsr 	GXSubCopy
.8190	48		pha				pha 									; save last offset X
.8191	20 6e 88	jsr $886e			jsr 	GXPositionCalc 					; calculate position/offset.
.8194	68		pla				pla
.8195	0a		asl a				asl 	a 								; store 2 x last offset in gxzTemp0
.8196	85 36		sta $36				sta 	gxzTemp0
.8198	64 37		stz $37				stz 	gxzTemp0+1
.819a	26 37		rol $37				rol 	gxzTemp0+1
.819c	ad ce 06	lda $06ce			lda 	gxIsFillMode
.819f	69 80		adc #$80			adc 	#128
.81a1	20 3e 85	jsr $853e			jsr 	GXDrawLineTemp0 				; routine from Rectangle.
.81a4	38		sec				sec 									; GY = -GY
.81a5	a9 00		lda #$00			lda 	#0
.81a7	ed cd 06	sbc $06cd			sbc 	gYCentre
.81aa	8d cd 06	sta $06cd			sta 	gYCentre
.81ad					GXPlot0Exit:
.81ad	60		rts				rts
.81ae					GXSubCopy:
.81ae	85 36		sta $36				sta 	gxzTemp0
.81b0	64 37		stz $37				stz 	gxzTemp0+1
.81b2	29 80		and #$80			and 	#$80
.81b4	f0 02		beq $81b8			beq 	_GXNoSx
.81b6	c6 37		dec $37				dec 	gxzTemp0+1
.81b8					_GXNoSx:
.81b8	38		sec				sec
.81b9	bd 36 06	lda $0636,x			lda 	gXX1,x
.81bc	e5 36		sbc $36				sbc 	gxzTemp0
.81be	9d 32 06	sta $0632,x			sta 	gXX0,x
.81c1	bd 37 06	lda $0637,x			lda 	gXX1+1,x
.81c4	e5 37		sbc $37				sbc 	gxzTemp0+1
.81c6	9d 33 06	sta $0633,x			sta 	gXX0+1,x
.81c9	a5 36		lda $36				lda 	gxzTemp0 						; return A
.81cb	60		rts				rts
.81cc					GXCircleMove:
.81cc	9c cf 06	stz $06cf			stz 	gxYChanged 					; clear Y changed flag
.81cf	a5 39		lda $39				lda 	gxzTemp1+1 					; check sign of D
.81d1	10 0d		bpl $81e0			bpl 	_GXEMPositive
.81d3	ee cc 06	inc $06cc			inc 	gXCentre 					; X++
.81d6	ad cc 06	lda $06cc			lda 	gXCentre
.81d9	20 ff 81	jsr $81ff			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.81dc	a9 06		lda #$06			lda 	#6  						; and add 6
.81de	80 15		bra $81f5			bra 	_GXEMAddD
.81e0					_GXEMPositive:
.81e0	ee cc 06	inc $06cc			inc 	gXCentre					; X++
.81e3	ce cd 06	dec $06cd			dec 	gyCentre 					; Y--
.81e6	38		sec				sec 								; calculate X-Y
.81e7	ad cc 06	lda $06cc			lda 	gXCentre
.81ea	ed cd 06	sbc $06cd			sbc 	gYCentre
.81ed	20 ff 81	jsr $81ff			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.81f0	a9 0a		lda #$0a			lda 	#10  						; and add 10
.81f2	ce cf 06	dec $06cf			dec 	gxYChanged
.81f5					_GXEMAddD:
.81f5	18		clc				clc
.81f6	65 38		adc $38				adc 	gxzTemp1
.81f8	85 38		sta $38				sta 	gxzTemp1
.81fa	90 02		bcc $81fe			bcc 	_GXEMNoCarry
.81fc	e6 39		inc $39				inc 	gxzTemp1+1
.81fe					_GXEMNoCarry:
.81fe	60		rts				rts
.81ff					_GXAdd4TimesToD:
.81ff	85 36		sta $36				sta 	gxzTemp0 					; make 16 bit signed.
.8201	29 80		and #$80			and 	#$80
.8203	f0 02		beq $8207			beq 	_GXA4Unsigned
.8205	a9 ff		lda #$ff			lda 	#$FF
.8207					_GXA4Unsigned:
.8207	85 37		sta $37				sta 	gxzTemp0+1
.8209	06 36		asl $36				asl 	gxzTemp0  					; x 4
.820b	26 37		rol $37				rol 	gxzTemp0+1
.820d	06 36		asl $36				asl 	gxzTemp0
.820f	26 37		rol $37				rol 	gxzTemp0+1
.8211	18		clc				clc 								; add
.8212	a5 36		lda $36				lda		gxzTemp0
.8214	65 38		adc $38				adc 	gxzTemp1
.8216	85 38		sta $38				sta 	gxzTemp1
.8218	a5 37		lda $37				lda		gxzTemp0+1
.821a	65 39		adc $39				adc 	gxzTemp1+1
.821c	85 39		sta $39				sta 	gxzTemp1+1
.821e	60		rts				rts
.821f					GXCircleSetup:
.821f	38		sec				sec
.8220	ad 38 06	lda $0638			lda 	gxY1
.8223	ed 34 06	sbc $0634			sbc 	gxY0
.8226	4a		lsr a				lsr 	a
.8227	8d cb 06	sta $06cb			sta 	gxRadius
.822a	a2 00		ldx #$00			ldx 	#0
.822c	20 4e 82	jsr $824e			jsr 	_GXCalculateCentre
.822f	a2 02		ldx #$02			ldx 	#2
.8231	20 4e 82	jsr $824e			jsr 	_GXCalculateCentre
.8234	9c cc 06	stz $06cc			stz 	gXCentre
.8237	ad cb 06	lda $06cb			lda 	gxRadius
.823a	8d cd 06	sta $06cd			sta 	gYCentre
.823d	0a		asl a				asl 	a 							; R x 2
.823e	85 36		sta $36				sta 	gxzTemp0
.8240	38		sec				sec
.8241	a9 03		lda #$03			lda 	#3
.8243	e5 36		sbc $36				sbc 	gxzTemp0
.8245	85 38		sta $38				sta 	gxzTemp1
.8247	a9 00		lda #$00			lda 	#0
.8249	e9 00		sbc #$00			sbc 	#0
.824b	85 39		sta $39				sta 	gxzTemp1+1
.824d	60		rts				rts
.824e					_GXCalculateCentre:
.824e	38		sec				sec
.824f	bd 36 06	lda $0636,x			lda 	gxX1,x
.8252	7d 32 06	adc $0632,x			adc 	gXX0,x
.8255	9d 36 06	sta $0636,x			sta 	gXX1,x
.8258	bd 37 06	lda $0637,x			lda 	gXX1+1,x
.825b	7d 33 06	adc $0633,x			adc 	gXX0+1,x
.825e	4a		lsr a				lsr 	a
.825f	9d 37 06	sta $0637,x			sta 	gXX1+1,x
.8262	7e 36 06	ror $0636,x			ror 	gXX1,x
.8265	60		rts				rts
.06cb					gxRadius:
>06cb							.fill 	1
.06cc					gXCentre:
>06cc							.fill 	1
.06cd					gYCentre:
>06cd							.fill 	1
.06ce					gxIsFillMode:
>06ce							.fill 	1
.06cf					gxYChanged:
>06cf							.fill  	1

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/clear.asm

=64000					ScreenSize200 = 320 * 200
=76800					ScreenSize240 = 320 * 240
.8266					GXClearBitmap:
.8266	ad 3b 06	lda $063b			lda 	gxBitmapsOn 				; check BMP running.
.8269	f0 24		beq $828f			beq 	_GXCBFail
.826b	20 50 88	jsr $8850			jsr 	GXOpenBitmap 				; start access
.826e	a0 07		ldy #$07			ldy 	#ScreenSize200 / 8192 		; X is pages to clear
.8270	ad 3e 06	lda $063e			lda 	gxHeight
.8273	c9 c8		cmp #$c8			cmp 	#200 						; 200 ?
.8275	a0 09		ldy #$09			ldy 	#ScreenSize240 / 8192
.8277					_GXCalcLastPage:
.8277	98		tya				tya 								; add to base page
.8278	18		clc				clc
.8279	6d 3c 06	adc $063c			adc 	gxBasePage
.827c	85 0b		sta $0b				sta 	GXEditSlot  				; clear from this page back
.827e					_GXClearAll:
.827e	20 91 82	jsr $8291			jsr 	_GXClearBlock 				; clear 8k block
.8281	c6 0b		dec $0b				dec 	GXEditSlot  				; back to previous
.8283	a5 0b		lda $0b				lda 	GXEditSlot
.8285	cd 3c 06	cmp $063c			cmp 	gxBasePage 					; until before base page
.8288	b0 f4		bcs $827e			bcs 	_GXClearAll
.828a	20 61 88	jsr $8861			jsr 	GXCloseBitmap	 			; stop access
.828d	18		clc				clc
.828e	60		rts				rts
.828f					_GXCBFail:
.828f	38		sec				sec
.8290	60		rts				rts
.8291					_GXClearBlock:
.8291	a9 00		lda #$00			lda 	#((GXMappingAddress) & $FF)
.8293	85 38		sta $38				sta 	0+gxzTemp1
.8295	a9 60		lda #$60			lda 	#((GXMappingAddress) >> 8)
.8297	85 39		sta $39				sta 	1+gxzTemp1
.8299					_GXCB0:
.8299	a5 36		lda $36				lda 	gxzTemp0
.829b	a0 00		ldy #$00			ldy 	#0
.829d					_GXCB1:
.829d	91 38		sta ($38),y			sta 	(gxzTemp1),y
.829f	c8		iny				iny
.82a0	91 38		sta ($38),y			sta 	(gxzTemp1),y
.82a2	c8		iny				iny
.82a3	91 38		sta ($38),y			sta 	(gxzTemp1),y
.82a5	c8		iny				iny
.82a6	91 38		sta ($38),y			sta 	(gxzTemp1),y
.82a8	c8		iny				iny
.82a9	d0 f2		bne $829d			bne 	_GXCB1
.82ab	e6 39		inc $39				inc 	gxzTemp1+1
.82ad	a5 39		lda $39				lda 	gxzTemp1+1
.82af	c9 80		cmp #$80			cmp	 	#(GXMappingAddress >> 8)+$20
.82b1	d0 e6		bne $8299			bne 	_GXCB0
.82b3	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/control.asm

.82b4					GXInitialise:
.82b4	64 01		stz $01				stz 	1
.82b6	a9 01		lda #$01			lda 	#1
.82b8	8d 00 d0	sta $d000			sta 	$D000
.82bb	18		clc				clc
.82bc	9c 3a 06	stz $063a			stz 	GXSpritesOn
.82bf	9c 3b 06	stz $063b			stz 	GXBitmapsOn
.82c2	a2 0f		ldx #$0f			ldx 	#15
.82c4					_GXIClear:
.82c4	9e 2a 06	stz $062a,x			stz 	gxCurrentX,x
.82c7	ca		dex				dex
.82c8	10 fa		bpl $82c4			bpl 	_GXIClear
.82ca	20 65 83	jsr $8365			jsr 	GXClearSpriteStore
.82cd	60		rts				rts
.82ce					GXControlBitmap:
.82ce	64 01		stz $01				stz 	1
.82d0	a5 36		lda $36				lda 	gxzTemp0 					; get control bits
.82d2	29 01		and #$01			and 	#1 							; set bitmap flag
.82d4	8d 3b 06	sta $063b			sta 	gxBitmapsOn
.82d7	4a		lsr a				lsr 	a 							; bit 0 into carry.
.82d8	ad 00 d0	lda $d000			lda 	$D000 						; read Vicky MCR
.82db	09 07		ora #$07			ora 	#7 							; turn graphics, text, textoverlay on.
.82dd	29 f7		and #$f7			and 	#$F7 						; clear bitmap bit
.82df	90 02		bcc $82e3			bcc 	_CBNotOn
.82e1	09 08		ora #$08			ora 	#$08 						; bitmap on if 1 on 0 off
.82e3					_CBNotOn:
.82e3	8d 00 d0	sta $d000			sta 	$D000 						; update Vicky MCR
.82e6	a5 36		lda $36				lda 	gxzTemp0 					; get control settings (bits 0-2)
.82e8	29 07		and #$07			and 	#7
.82ea	8d 00 d1	sta $d100			sta 	$D100 						; write in Vicky Bitmap Control Register #0
.82ed	a5 37		lda $37				lda 	gxzTemp0+1 					; get the base page
.82ef	d0 02		bne $82f3			bne 	_CBNotDefault
.82f1	a9 08		lda #$08			lda 	#8  						; if zero, use 8 e.g. bitmap at $10000
.82f3					_CBNotDefault:
.82f3	8d 3c 06	sta $063c			sta 	gxBasePage
.82f6	20 57 83	jsr $8357			jsr 	GXCalculateBaseAddress 	 	; convert page# to address
.82f9	a5 37		lda $37				lda 	gxzTemp0+1 					; copy address into Bitmap address registers
.82fb	8d 03 d1	sta $d103			sta 	$D103
.82fe	a5 36		lda $36				lda 	gxzTemp0
.8300	8d 02 d1	sta $d102			sta 	$D102
.8303	9c 01 d1	stz $d101			stz 	$D101
.8306	a2 f0		ldx #$f0			ldx 	#240 						; height is 240
.8308	ad 01 d0	lda $d001			lda 	$D001 						; read MCR bit 0
.830b	29 01		and #$01			and 	#1
.830d	f0 02		beq $8311			beq 	_CBHaveHeight
.830f	a2 c8		ldx #$c8			ldx 	#200 						; if bit 0 set 320x200
.8311					_CBHaveHeight
.8311	8e 3e 06	stx $063e			stx 	gxHeight
.8314	18		clc				clc
.8315	60		rts				rts
.8316					GXControlSprite:
.8316	64 01		stz $01				stz 	1
.8318	a5 36		lda $36				lda 	gxzTemp0 					; get control bits
.831a	29 01		and #$01			and 	#1 							; set sprites flag
.831c	8d 3a 06	sta $063a			sta 	gxSpritesOn
.831f	4a		lsr a				lsr 	a 							; bit 0 into carry.
.8320	ad 00 d0	lda $d000			lda 	$D000 						; read Vicky MCR
.8323	09 07		ora #$07			ora 	#7 							; turn graphics, text, textoverlay on.
.8325	29 df		and #$df			and 	#$DF 						; clear sprite bit
.8327	90 02		bcc $832b			bcc 	_CSNotOn
.8329	09 20		ora #$20			ora 	#$20 						; sprite on if 1 on 0 off
.832b					_CSNotOn:
.832b	8d 00 d0	sta $d000			sta 	$D000 						; update Vicky MCR
.832e	a5 37		lda $37				lda 	gxzTemp0+1 					; get the base page
.8330	d0 02		bne $8334			bne 	_CSNotDefault
.8332	a9 18		lda #$18			lda 	#24  						; if zero, use 24 e.g. sprites at $30000
.8334					_CSNotDefault:
.8334	8d 3d 06	sta $063d			sta 	gxSpritePage
.8337	20 57 83	jsr $8357			jsr 	GXCalculateBaseAddress 	 	; convert page# to address
.833a	a5 36		lda $36				lda 	zTemp0
.833c	8d 49 06	sta $0649			sta 	GXSpriteOffsetBase
.833f	a5 37		lda $37				lda 	zTemp0+1
.8341	8d 4a 06	sta $064a			sta 	GXSpriteOffsetBase+1
.8344	a2 00		ldx #$00			ldx 	#0 							; disable all sprites, clears all sprite memory.
.8346					_CSClear:
.8346	9e 00 d9	stz $d900,x			stz 	$D900,x
.8349	9e 00 da	stz $da00,x			stz 	$DA00,x
.834c	ca		dex				dex
.834d	d0 f7		bne $8346			bne 	_CSClear
.834f	9c 48 06	stz $0648			stz 	GSCurrentSpriteAddr+1 		; no sprite selected.
.8352	20 65 83	jsr $8365			jsr 	GXClearSpriteStore
.8355	18		clc				clc
.8356	60		rts				rts
.8357					GXCalculateBaseAddress:
.8357	85 36		sta $36				sta 	gxzTemp0
.8359	64 37		stz $37				stz 	gxzTemp0+1
.835b	a9 05		lda #$05			lda 	#5
.835d					_GXShift:
.835d	06 36		asl $36				asl 	gxzTemp0
.835f	26 37		rol $37				rol 	gxzTemp0+1
.8361	3a		dec a				dec		a
.8362	d0 f9		bne $835d			bne 	_GXShift
.8364	60		rts				rts
.8365					GXClearSpriteStore:
.8365	a2 3f		ldx #$3f			ldx 	#63 						; erase 64 sprite store elements
.8367					_GXCSSLoop:
.8367	9e 8b 06	stz $068b,x			stz 	GXSpriteHigh,x
.836a	a9 80		lda #$80			lda 	#$80 						; set the 'hidden' bit.
.836c	9d 4b 06	sta $064b,x			sta 	GXSpriteLow,x
.836f	ca		dex				dex
.8370	10 f5		bpl $8367			bpl 	_GXCSSLoop
.8372	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/line.asm

.8373					GXLine:
.8373	ad 3b 06	lda $063b			lda 	GXBitmapsOn
.8376	f0 28		beq $83a0			beq 	_GXLFail
.8378	20 50 88	jsr $8850			jsr 	GXOpenBitmap
.837b	20 a4 89	jsr $89a4			jsr 	GXSortY						; sort pairs so Y1 >= Y0 e.g. top to bottom.
.837e	20 46 84	jsr $8446			jsr 	GXLineSetup 				; the calculations in the linescanner constructor
.8381	20 6e 88	jsr $886e			jsr 	GXPositionCalc 				; calculate position/offset.
.8384					_GXDrawLoop:
.8384	ac 45 06	ldy $0645			ldy 	gsOffset 					; draw the pixel
.8387	b1 3c		lda ($3c),y			lda 	(gxzScreen),y
.8389	2d 42 06	and $0642			and 	gxANDValue
.838c	4d 41 06	eor $0641			eor 	gxEORValue
.838f	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.8391	20 a2 83	jsr $83a2			jsr 	GXLineIsComplete 			; is the line complete ?
.8394	f0 05		beq $839b			beq 	_GXLExit
.8396	20 bd 83	jsr $83bd			jsr 	GXLineAdvance 				; code as per advance method
.8399	80 e9		bra $8384			bra 	_GXDrawLoop
.839b					_GXLExit:
.839b	20 61 88	jsr $8861			jsr 	GXCloseBitmap
.839e	18		clc				clc
.839f	60		rts				rts
.83a0					_GXLFail:
.83a0	38		sec				sec
.83a1	60		rts				rts
.83a2					GXLineIsComplete:
.83a2	ad d2 06	lda $06d2			lda 	GXIsDiffYLarger 			; is dy larger
.83a5	d0 0f		bne $83b6			bne 	_GXLICCompareY 				; if so compare Y1/Y0
.83a7	ad 32 06	lda $0632			lda 	GXX0 						; compare X, LSB and MSB
.83aa	4d 36 06	eor $0636			eor 	GXX1
.83ad	d0 06		bne $83b5			bne 	_GXLICExit
.83af	ad 33 06	lda $0633			lda 	GXX0+1
.83b2	4d 37 06	eor $0637			eor 	GXX1+1
.83b5					_GXLICExit:
.83b5	60		rts				rts
.83b6					_GXLICCompareY:
.83b6	ad 38 06	lda $0638			lda 	GXY1
.83b9	4d 34 06	eor $0634			eor 	GXY0
.83bc	60		rts				rts
.83bd					GXLineAdvance:
.83bd	18		clc				clc 								; add adjust to position
.83be	ad d4 06	lda $06d4			lda 	GXPosition
.83c1	6d d5 06	adc $06d5			adc 	GXAdjust
.83c4	8d d4 06	sta $06d4			sta 	GXPosition
.83c7	9c d7 06	stz $06d7			stz 	GXAddSelect 				; clear add select flag
.83ca	b0 05		bcs $83d1			bcs 	_GXLAOverflow 				; if carry out, overflowed.
.83cc	cd d6 06	cmp $06d6			cmp 	GXTotal 					; if exceeded total
.83cf	90 0a		bcc $83db			bcc 	_GXLANoExtra
.83d1					_GXLAOverflow:
.83d1	ce d7 06	dec $06d7			dec 	GXAddSelect 				; set addselect to $FF
.83d4	38		sec				sec 								; subtract total and write back
.83d5	ed d6 06	sbc $06d6			sbc 	GXTotal
.83d8	8d d4 06	sta $06d4			sta 	GXPosition
.83db					_GXLANoExtra:
.83db	ad d2 06	lda $06d2			lda 	GXIsDiffYLarger
.83de	f0 0d		beq $83ed			beq 	_GXDXLarger
.83e0	20 3f 84	jsr $843f			jsr 	GXIncrementY
.83e3	ad d7 06	lda $06d7			lda 	GXAddSelect
.83e6	f0 10		beq $83f8			beq 	_GXLAExit
.83e8	20 f9 83	jsr $83f9			jsr 	GXAdjustX
.83eb	80 0b		bra $83f8			bra 	_GXLAExit
.83ed					_GXDXLarger:
.83ed	20 f9 83	jsr $83f9			jsr 	GXAdjustX
.83f0	ad d7 06	lda $06d7			lda 	GXAddSelect
.83f3	f0 03		beq $83f8			beq 	_GXLAExit
.83f5	20 3f 84	jsr $843f			jsr 	GXIncrementY
.83f8					_GXLAExit:
.83f8	60		rts				rts
.83f9					GXAdjustX:
.83f9	ad d3 06	lda $06d3			lda 	GXDXNegative
.83fc	10 25		bpl $8423			bpl 	_GXAXRight
.83fe	ad 32 06	lda $0632			lda 	GXX0
.8401	d0 03		bne $8406			bne 	_GXAXNoBorrow
.8403	ce 33 06	dec $0633			dec 	GXX0+1
.8406					_GXAXNoBorrow:
.8406	ce 32 06	dec $0632			dec 	GXX0
.8409	ce 45 06	dec $0645			dec 	gsOffset 					; pixel left
.840c	ad 45 06	lda $0645			lda 	gsOffset
.840f	c9 ff		cmp #$ff			cmp 	#$FF
.8411	d0 0f		bne $8422			bne 	_GXAYExit 					; underflow
.8413	c6 3d		dec $3d				dec 	gxzScreen+1 					; borrow
.8415	a5 3d		lda $3d				lda 	gxzScreen+1 					; gone off page
.8417	c9 60		cmp #$60			cmp 	#GXMappingAddress >> 8
.8419	b0 07		bcs $8422			bcs 	_GXAYExit
.841b	18		clc				clc
.841c	69 20		adc #$20			adc 	#$20 						; fix up
.841e	85 3d		sta $3d				sta 	gxzScreen+1
.8420	c6 0b		dec $0b				dec 	GXEditSlot 				; back one page
.8422					_GXAYExit:
.8422	60		rts				rts
.8423					_GXAXRight:
.8423	ee 32 06	inc $0632			inc 	GXX0
.8426	d0 03		bne $842b			bne 	_GXAXNoCarry
.8428	ee 33 06	inc $0633			inc 	GXX0+1
.842b					_GXAXNoCarry:
.842b	ee 45 06	inc $0645			inc 	gsOffset 					; pixel right
.842e	d0 0e		bne $843e			bne 	_GXAXExit 					; if not overflowed, exit.
.8430	e6 3d		inc $3d				inc 	gxzScreen+1 					; next line
.8432	a5 3d		lda $3d				lda 	gxzScreen+1
.8434	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page ?
.8436	90 06		bcc $843e			bcc 	_GXAXExit
.8438	e9 20		sbc #$20			sbc 	#$20 						; fix up
.843a	85 3d		sta $3d				sta 	gxzScreen+1
.843c	e6 0b		inc $0b				inc 	GXEditSlot 				; next page
.843e					_GXAXExit:
.843e	60		rts				rts
.843f					GXIncrementY:
.843f	ee 34 06	inc $0634			inc 	GXY0
.8442	20 c4 88	jsr $88c4			jsr 	GXMovePositionDown
.8445	60		rts				rts
.8446					GXLineSetup:
.8446	ad 38 06	lda $0638			lda 	GXY1
.8449	38		sec				sec
.844a	ed 34 06	sbc $0634			sbc 	GXY0
.844d	4a		lsr a				lsr 	a
.844e	8d d1 06	sta $06d1			sta 	GXDiffY
.8451	9c d3 06	stz $06d3			stz 	GXDXNegative 				; clear -ve flag
.8454	38		sec				sec
.8455	ad 36 06	lda $0636			lda 	GXX1
.8458	ed 32 06	sbc $0632			sbc 	GXX0
.845b	8d d0 06	sta $06d0			sta 	GXDiffX
.845e	ad 37 06	lda $0637			lda 	GXX1+1 						; calculate MSB
.8461	ed 33 06	sbc $0633			sbc 	GXX0+1
.8464	6a		ror a				ror 	a 							; rotate bit into DiffX halving it
.8465	6e d0 06	ror $06d0			ror 	GXDiffX
.8468	0a		asl a				asl 	a
.8469	10 0c		bpl $8477			bpl 	_GDXNotNegative
.846b	a9 00		lda #$00			lda 	#0 							; make absolute value of |dx|
.846d	38		sec				sec
.846e	ed d0 06	sbc $06d0			sbc 	GXDiffX
.8471	8d d0 06	sta $06d0			sta 	GXDiffX
.8474	ce d3 06	dec $06d3			dec 	GXDXNegative 				; -ve flag = $FF.
.8477					_GDXNotNegative:
.8477	9c d2 06	stz $06d2			stz 	GXIsDiffYLarger 			; clear larger flag
.847a	ad d1 06	lda $06d1			lda 	GXDiffY 					; set adjust and total.
.847d	8d d5 06	sta $06d5			sta 	GXAdjust
.8480	ad d0 06	lda $06d0			lda 	GXDiffX
.8483	8d d6 06	sta $06d6			sta 	GXTotal
.8486	ad d1 06	lda $06d1			lda 	GXDiffY 					; if dy > dx
.8489	cd d0 06	cmp $06d0			cmp 	GXDiffX
.848c	90 0f		bcc $849d			bcc 	_GDXNotLarger
.848e	ce d2 06	dec $06d2			dec 	GXIsDiffYLarger 			; set the dy larger flag
.8491	ad d0 06	lda $06d0			lda 	GXDiffX 					; set adjust and total other way round
.8494	8d d5 06	sta $06d5			sta 	GXAdjust
.8497	ad d1 06	lda $06d1			lda 	GXDiffY
.849a	8d d6 06	sta $06d6			sta 	GXTotal
.849d					_GDXNotLarger:
.849d	ad d6 06	lda $06d6			lda 	GXTotal
.84a0	4a		lsr a				lsr 	a
.84a1	8d d4 06	sta $06d4			sta 	GXPosition
.84a4	60		rts				rts
.06d0					GXDiffX:
>06d0							.fill 	1
.06d1					GXDiffY:
>06d1							.fill 	1
.06d2					GXIsDiffYLarger:
>06d2							.fill 	1
.06d3					GXDXNegative:
>06d3							.fill 	1
.06d4					GXPosition:
>06d4							.fill 	1
.06d5					GXAdjust:
>06d5							.fill 	1
.06d6					GXTotal:
>06d6							.fill 	1
.06d7					GXAddSelect:
>06d7							.fill 	1

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/mode.asm

.84a5					GXSetColourMode:
.84a5	a6 36		ldx $36				ldx 	gxzTemp0
.84a7	8e 40 06	stx $0640			stx 	gxColour 								; set colour
.84aa	a5 37		lda $37				lda 	gxzTemp0+1 								;
.84ac	8d 3f 06	sta $063f			sta 	gxMode 									; set mode
.84af	29 03		and #$03			and 	#3 										; only interested in bits 0-3
.84b1	9c 42 06	stz $0642			stz 	gxANDValue 								; initially AND with 0, and EOR with Colour
.84b4	ae 40 06	ldx $0640			ldx 	gxColour
.84b7	8e 41 06	stx $0641			stx 	gxEORValue
.84ba	c9 02		cmp #$02			cmp 	#2 										; if mode 2/3 And with colour
.84bc	90 03		bcc $84c1			bcc 	_GXSDCNotAndColour
.84be	8e 42 06	stx $0642			stx 	gxANDValue
.84c1					_GXSDCNotAndColour:
.84c1	d0 03		bne $84c6			bne 	_GXSDCNotAnd 							; mode 2, Don't EOR with colour
.84c3	9c 41 06	stz $0641			stz 	gxEORValue
.84c6					_GXSDCNotAnd:
.84c6	4a		lsr a				lsr 	a 										; if bit 0 set, 1's complement AND value
.84c7	90 08		bcc $84d1			bcc 	_GXSDCNoFlip
.84c9	ad 42 06	lda $0642			lda	 	gxANDValue
.84cc	49 ff		eor #$ff			eor 	#$FF
.84ce	8d 42 06	sta $0642			sta 	gxANDValue
.84d1					_GXSDCNoFlip:
.84d1	18		clc				clc
.84d2	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/plot.asm

.84d3					GXPlotPoint:
.84d3	20 50 88	jsr $8850			jsr 	GXOpenBitmap 				; start drawing
.84d6	20 6e 88	jsr $886e			jsr 	GXPositionCalc 				; setup gxzScreen, gsOffset and the position.
.84d9	ac 45 06	ldy $0645			ldy 	gsOffset
.84dc	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel on the right
.84de	2d 42 06	and $0642			and 	gxANDValue
.84e1	4d 41 06	eor $0641			eor 	gxEORValue
.84e4	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.84e6	20 61 88	jsr $8861			jsr 	GXCloseBitmap 				; stop drawing and exit
.84e9	18		clc				clc
.84ea	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/rect.asm

.84eb					GXFillRectangle:
.84eb	38		sec				sec
.84ec	80 01		bra $84ef			bra 	GXRectangle
.84ee					GXFrameRectangle:
.84ee	18		clc				clc
.84ef					GXRectangle:
.84ef	ad 3b 06	lda $063b			lda 	gxBitmapsOn
.84f2	f0 35		beq $8529			beq 	_GXRFail
.84f4	08		php				php 								; save Fill flag (CS)
.84f5	20 50 88	jsr $8850			jsr 	GXOpenBitmap 				; start drawing
.84f8	20 86 89	jsr $8986			jsr 	GXSortXY 					; sort both X and Y so top left/bottom right
.84fb	20 6e 88	jsr $886e			jsr 	GXPositionCalc 				; setup gxzScreen, gsOffset and the position.
.84fe	38		sec				sec 								; sec = Draw line
.84ff	20 2b 85	jsr $852b			jsr 	GXDrawLineX1X0 				; draw a line length X1-X0
.8502	ad 34 06	lda $0634			lda 	gxY0 						; reached end of rectangle ?
.8505	cd 38 06	cmp $0638			cmp 	gxY1
.8508	f0 19		beq $8523			beq 	_GXRectangleExit
.850a					_GXRectLoop:
.850a	20 c4 88	jsr $88c4			jsr 	GXMovePositionDown 			; down one.
.850d	ee 34 06	inc $0634			inc 	gxY0 						; change Y pos
.8510	ad 34 06	lda $0634			lda 	gxY0 						; reached last line
.8513	cd 38 06	cmp $0638			cmp 	gXY1
.8516	f0 07		beq $851f			beq 	_GXLastLine
.8518	28		plp				plp 								; get flag back
.8519	08		php				php
.851a	20 2b 85	jsr $852b			jsr 	GXDrawLineX1X0 				; draw horizontal line
.851d	80 eb		bra $850a			bra 	_GXRectLoop
.851f					_GXLastLine:
.851f	38		sec				sec
.8520	20 2b 85	jsr $852b			jsr 	GXDrawLineX1X0
.8523					_GXRectangleExit:
.8523	68		pla				pla 								; throw fill flag.
.8524	20 61 88	jsr $8861			jsr 	GXCloseBitmap 				; stop drawing and exit
.8527	18		clc				clc
.8528	60		rts				rts
.8529					_GXRFail:
.8529	38		sec				sec
.852a	60		rts				rts
.852b					GXDrawLineX1X0:
.852b	08		php				php 								; save solid/either-end
.852c	38		sec				sec
.852d	ad 36 06	lda $0636			lda		gXX1
.8530	ed 32 06	sbc $0632			sbc 	gXX0
.8533	85 36		sta $36				sta 	gxzTemp0
.8535	ad 37 06	lda $0637			lda 	gXX1+1
.8538	ed 33 06	sbc $0633			sbc 	gXX0+1
.853b	85 37		sta $37				sta 	gxzTemp0+1
.853d	28		plp				plp
.853e					GXDrawLineTemp0:
.853e	a5 3c		lda $3c				lda 	gxzScreen 						; push gxzScreen, gsOffset and GXEditSlot on stack
.8540	48		pha				pha
.8541	a5 3d		lda $3d				lda 	gxzScreen+1
.8543	48		pha				pha
.8544	ad 45 06	lda $0645			lda 	gsOffset
.8547	48		pha				pha
.8548	a5 0b		lda $0b				lda 	GXEditSlot
.854a	48		pha				pha
.854b	ac 45 06	ldy $0645			ldy 	gsOffset 					; Y offset
.854e	90 1e		bcc $856e			bcc 	_GXDLTEndPoints 			; if CC draw end points only.
.8550					_GXDLTLine:
.8550	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel
.8552	2d 42 06	and $0642			and 	gxANDValue
.8555	4d 41 06	eor $0641			eor 	gxEORValue
.8558	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.855a	a5 36		lda $36				lda 	gxzTemp0 					; decrement counter
.855c	d0 04		bne $8562			bne 	_GXDLTNoBorrow
.855e	c6 37		dec $37				dec 	gxzTemp0+1 					; borrow, if goes -ve then exit
.8560	30 2e		bmi $8590			bmi 	_GXDLTExit
.8562					_GXDLTNoBorrow:
.8562	c6 36		dec $36				dec 	gxzTemp0
.8564	c8		iny				iny 								; next slot.
.8565	d0 e9		bne $8550			bne 	_GXDLTLine
.8567	e6 3d		inc $3d				inc 	gxzScreen+1 					; carry to next
.8569	20 9e 85	jsr $859e			jsr 	GXDLTCheckWrap				; check for new page.
.856c	80 e2		bra $8550			bra 	_GXDLTLine
.856e					_GXDLTEndPoints:
.856e	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel
.8570	2d 42 06	and $0642			and 	gxANDValue
.8573	4d 41 06	eor $0641			eor 	gxEORValue
.8576	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.8578	98		tya				tya 								; advance to right side
.8579	18		clc				clc
.857a	65 36		adc $36				adc 	gxzTemp0
.857c	a8		tay				tay
.857d	a5 3d		lda $3d				lda 	gxzScreen+1
.857f	65 37		adc $37				adc 	gxzTemp0+1
.8581	85 3d		sta $3d				sta 	gxzScreen+1
.8583	20 9e 85	jsr $859e			jsr 	GXDLTCheckWrap 			; fix up.
.8586	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel on the right
.8588	2d 42 06	and $0642			and 	gxANDValue
.858b	4d 41 06	eor $0641			eor 	gxEORValue
.858e	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.8590					_GXDLTExit:
.8590	68		pla				pla
.8591	85 0b		sta $0b				sta 	GXEditSlot
.8593	68		pla				pla
.8594	8d 45 06	sta $0645			sta 	gsOffset
.8597	68		pla				pla
.8598	85 3d		sta $3d				sta 	gxzScreen+1
.859a	68		pla				pla
.859b	85 3c		sta $3c				sta 	gxzScreen
.859d	60		rts				rts
.859e					GXDLTCheckWrap:
.859e	a5 3d		lda $3d				lda 	gxzScreen+1 					; check end of page
.85a0	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8)
.85a2	90 06		bcc $85aa			bcc 	_GXDLTCWExit
.85a4	e9 20		sbc #$20			sbc 	#$20 						; fix up
.85a6	85 3d		sta $3d				sta 	gxzScreen+1
.85a8	e6 0b		inc $0b				inc 	GXEditSlot
.85aa					_GXDLTCWExit:
.85aa	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/render.asm

.85ab					GXDrawGraphicElement:
.85ab	8d d8 06	sta $06d8			sta 	gxSize 						; save size
.85ae	3a		dec a				dec 	a
.85af	8d d9 06	sta $06d9			sta 	gxMask 						; and mask
.85b2	ad 3b 06	lda $063b			lda 	gxBitmapsOn 				; check BMP on
.85b5	f0 67		beq $861e			beq 	_GXSLFail
.85b7	ad 34 06	lda $0634			lda 	gxY0 						; push Y on stack
.85ba	48		pha				pha
.85bb	8c db 06	sty $06db			sty 	gxAcquireVector+1 			; and acquisition vector
.85be	8e da 06	stx $06da			stx 	gxAcquireVector
.85c1	20 50 88	jsr $8850			jsr 	gxOpenBitmap 				; open the bitmap.
.85c4	ad dd 06	lda $06dd			lda 	gxUseMode 					; scale bits
.85c7	4a		lsr a				lsr 	a
.85c8	4a		lsr a				lsr 	a
.85c9	4a		lsr a				lsr 	a
.85ca	29 07		and #$07			and		#7
.85cc	1a		inc a				inc 	a
.85cd	8d dc 06	sta $06dc			sta 	gxScale
.85d0	64 38		stz $38				stz 	gxzTemp1					; start first line
.85d2					_GXGELoop:
.85d2	a5 38		lda $38				lda 	gxzTemp1 					; current line number to read.
.85d4	2c dd 06	bit $06dd			bit 	gxUseMode 					; check for flip.
.85d7	10 06		bpl $85df			bpl		_GXNoVFlip
.85d9	ad d9 06	lda $06d9			lda 	gxMask
.85dc	38		sec				sec
.85dd	e5 38		sbc $38				sbc 	gxzTemp1
.85df					_GXNoVFlip:
.85df	aa		tax				tax 								; get the Xth line.
.85e0	20 20 86	jsr $8620			jsr 	_GXCallAcquire 				; get that data.
.85e3	ad dc 06	lda $06dc			lda 	gxScale 					; do scale identical copies of that line.
.85e6	85 39		sta $39				sta 	gxzTemp1+1
.85e8					_GXGELoop2:
.85e8	ad 34 06	lda $0634			lda 	gxY0 						; off screen
.85eb	cd 3e 06	cmp $063e			cmp 	gxHeight
.85ee	b0 10		bcs $8600			bcs 	_GXDGEExit
.85f0	20 23 86	jsr $8623			jsr 	GXRenderOneLine 			; render line
.85f3	c6 39		dec $39				dec 	gxzTemp1+1 					; scale times.
.85f5	d0 f1		bne $85e8			bne 	_GXGELoop2
.85f7	e6 38		inc $38				inc 	gxzTemp1 					; done all lines.
.85f9	a5 38		lda $38				lda 	gxzTemp1
.85fb	cd d8 06	cmp $06d8			cmp 	gxSize
.85fe	d0 d2		bne $85d2			bne 	_GXGELoop
.8600					_GXDGEExit:
.8600	68		pla				pla 								; restore Y for next time
.8601	8d 34 06	sta $0634			sta 	gxY0
.8604	ae dc 06	ldx $06dc			ldx 	gxScale 					; get scale (1-8)
.8607					_GXShiftLeft:
.8607	18		clc				clc
.8608	ad d8 06	lda $06d8			lda 	gxSize
.860b	6d 32 06	adc $0632			adc 	gxX0
.860e	8d 32 06	sta $0632			sta 	gxX0
.8611	90 03		bcc $8616			bcc 	_GXSLNoCarry
.8613	ee 33 06	inc $0633			inc 	gxX0+1
.8616					_GXSLNoCarry:
.8616	ca		dex				dex
.8617	d0 ee		bne $8607			bne 	_GXShiftLeft
.8619	20 61 88	jsr $8861			jsr 	GXCloseBitmap
.861c	18		clc				clc
.861d	60		rts				rts
.861e					_GXSLFail:
.861e	38		sec				sec
.861f	60		rts				rts
.8620					_GXCallAcquire:
.8620	6c da 06	jmp ($06da)			jmp 	(gxAcquireVector)
.8623					GXRenderOneLine:
.8623	20 6e 88	jsr $886e			jsr 	GXPositionCalc 				; calculate position/offset.
.8626	ac 45 06	ldy $0645			ldy 	gsOffset 					; Y contains position.
.8629	64 3a		stz $3a				stz 	gxzTemp2 					; do size pixels
.862b					_GXROLLoop1:
.862b	ad dc 06	lda $06dc			lda 	gxScale 					; set to do 'scale' times
.862e	85 3b		sta $3b				sta 	gxzTemp2+1
.8630					_GXROLLoop2:
.8630	a5 3a		lda $3a				lda 	gxzTemp2 					; get current pixel
.8632	2c 3f 06	bit $063f			bit 	gxMode 						; check H Flip
.8635	50 06		bvc $863d			bvc 	_GXNoHFlip
.8637	ad d9 06	lda $06d9			lda 	gxMask
.863a	38		sec				sec
.863b	e5 3a		sbc $3a				sbc 	gxzTemp2
.863d					_GXNoHFlip:
.863d	aa		tax				tax 								; read from the pixel buffer
.863e	bd f8 05	lda $05f8,x			lda 	gxPixelBuffer,x
.8641	d0 07		bne $864a			bne 	_GXDraw 					; draw if non zero
.8643	ad dd 06	lda $06dd			lda 	gxUseMode 					; check to see if solid background
.8646	29 04		and #$04			and 	#4
.8648	f0 0a		beq $8654			beq 	_GXZeroPixel
.864a					_GXDraw:
.864a	b1 3c		lda ($3c),y			lda 	(gxzScreen),y
.864c	2d 42 06	and $0642			and 	gxANDValue
.864f	5d f8 05	eor $05f8,x			eor 	gxPixelBuffer,x
.8652	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.8654					_GXZeroPixel:
.8654	c8		iny				iny 								; advance pointer
.8655	d0 05		bne $865c			bne 	_GXNoShift
.8657	e6 3d		inc $3d				inc 	gxzScreen+1 				; carry to next
.8659	20 9e 85	jsr $859e			jsr 	GXDLTCheckWrap				; check for new page.
.865c					_GXNoShift:
.865c	c6 3b		dec $3b				dec 	gxzTemp2+1 					; do the inner loop gxScale times.
.865e	d0 d0		bne $8630			bne 	_GXROLLoop2
.8660	e6 3a		inc $3a				inc 	gxzTemp2 					; next pixel.
.8662	a5 3a		lda $3a				lda 	gxzTemp2
.8664	cd d8 06	cmp $06d8			cmp 	gxSize
.8667	d0 c2		bne $862b			bne 	_GXROLLoop1
.8669	ee 34 06	inc $0634			inc 	gxY0
.866c	60		rts				rts
.06d8					gxSize:
>06d8							.fill 	1
.06d9					gxMask:
>06d9							.fill 	1
.06da					gxAcquireVector:
>06da							.fill 	2
.06dc					gxScale:
>06dc							.fill 	1
.06dd					gxUseMode:
>06dd							.fill 	1

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/sources/font.asm

.866d					GXFontHandler:
.866d	a5 37		lda $37				lda 	gxzTemp0+1 					; eor with mode
.866f	4d 3f 06	eor $063f			eor 	gxMode
.8672	8d dd 06	sta $06dd			sta 	gxUseMode
.8675	64 37		stz $37				stz 	gxzTemp0+1 					; gxzTemp0 is font #
.8677	06 36		asl $36				asl	 	gxzTemp0 					; x 2
.8679	26 37		rol $37				rol	 	gxzTemp0+1
.867b	06 36		asl $36				asl	 	gxzTemp0 					; x 4
.867d	26 37		rol $37				rol	 	gxzTemp0+1
.867f	06 36		asl $36				asl	 	gxzTemp0 					; x 8
.8681	26 37		rol $37				rol	 	gxzTemp0+1
.8683	a5 37		lda $37				lda 	gxzTemp0+1 					; put in page C0
.8685	09 c0		ora #$c0			ora 	#$C0
.8687	85 37		sta $37				sta 	gxzTemp0+1
.8689	a9 08		lda #$08			lda 	#8 							; size 8x8
.868b	a2 93		ldx #$93			ldx 	#GXGetGraphicDataFont & $FF ; XY = Graphic Data retrieval routine
.868d	a0 86		ldy #$86			ldy 	#GXGetGraphicDataFont >> 8
.868f	20 ab 85	jsr $85ab			jsr 	GXDrawGraphicElement
.8692	60		rts				rts
.8693					GXGetGraphicDataFont:
.8693	8a		txa				txa 								; X->Y
.8694	a8		tay				tay
.8695	a6 01		ldx $01				ldx 	1 							; preserve old value
.8697	a9 01		lda #$01			lda 	#1 							; access page 1 (font memory)
.8699	85 01		sta $01				sta 	1
.869b	b1 36		lda ($36),y			lda 	(gxzTemp0),y 				; read the font element.
.869d	86 01		stx $01				stx 	1 							; put old value back.
.869f	a2 00		ldx #$00			ldx 	#0 							; do 8 times
.86a1					_GXExpand:
.86a1	9e f8 05	stz $05f8,x			stz 	gxPixelBuffer,x 			; zero in pixel buffer
.86a4	0a		asl a				asl 	a 							; shift bit 7 into C
.86a5	90 08		bcc $86af			bcc 	_GXNoPixel
.86a7	48		pha				pha 								; if set, set pixel buffer to current colour.
.86a8	ad 40 06	lda $0640			lda 	gxColour
.86ab	9d f8 05	sta $05f8,x			sta 	gxPixelBuffer,x
.86ae	68		pla				pla
.86af					_GXNoPixel:
.86af	e8		inx				inx 								; do the whole byte.
.86b0	e0 08		cpx #$08			cpx 	#8
.86b2	d0 ed		bne $86a1			bne 	_GXExpand
.86b4	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/sources/sprite.asm

.86b5					GXSpriteHandler:
.86b5	a5 37		lda $37				lda 	gxzTemp0+1 					; eor with mode
.86b7	4d 3f 06	eor $063f			eor 	gxMode
.86ba	8d dd 06	sta $06dd			sta 	gxUseMode
.86bd	a6 36		ldx $36				ldx 	gxzTemp0 					; sprite #
.86bf	da		phx				phx
.86c0	20 50 88	jsr $8850			jsr 	GXOpenBitmap 				; can access sprite information
.86c3	68		pla				pla
.86c4	20 3f 89	jsr $893f			jsr 	GXFindSprite 				; get the sprite address
.86c7	08		php				php
.86c8	20 61 88	jsr $8861			jsr 	GXCloseBitmap
.86cb	28		plp				plp
.86cc	b0 0a		bcs $86d8			bcs		_GXSHExit 					; exit if find failed.
.86ce	ad de 06	lda $06de			lda 	GXSizePixels 				; return size
.86d1	a2 d9		ldx #$d9			ldx 	#GXSpriteAcquire & $FF
.86d3	a0 86		ldy #$86			ldy 	#GXSpriteAcquire >> 8
.86d5	20 ab 85	jsr $85ab			jsr 	GXDrawGraphicElement
.86d8					_GXSHExit:
.86d8	60		rts				rts
.86d9					GXSpriteAcquire:
.86d9	ad 3d 06	lda $063d			lda 	GXSpritePage				; point to base page
.86dc	85 0b		sta $0b				sta 	GXEditSlot
.86de	86 36		stx $36				stx 	zTemp0 						; row number x 1,2,3,4
.86e0	a9 00		lda #$00			lda 	#0
.86e2	ae df 06	ldx $06df			ldx 	GXSizeBits
.86e5					_GXTimesRowNumber:
.86e5	18		clc				clc
.86e6	65 36		adc $36				adc 	zTemp0
.86e8	ca		dex				dex
.86e9	10 fa		bpl $86e5			bpl 	_GXTimesRowNumber
.86eb	64 37		stz $37				stz 	gxzTemp0+1
.86ed	0a		asl a				asl 	a 							; row x 2,4,6,8
.86ee	26 37		rol $37				rol 	gxzTemp0+1
.86f0	0a		asl a				asl 	a 							; row x 4,8,12,16
.86f1	26 37		rol $37				rol 	gxzTemp0+1
.86f3	0a		asl a				asl 	a 							; row x 8,16,24,32
.86f4	26 37		rol $37				rol 	gxzTemp0+1
.86f6	85 36		sta $36				sta 	gxzTemp0
.86f8	18		clc				clc 								; add base address.
.86f9	a5 36		lda $36				lda 	gxzTemp0
.86fb	6d e1 06	adc $06e1			adc 	GXSpriteOffset
.86fe	85 36		sta $36				sta 	gxzTemp0
.8700	a5 37		lda $37				lda 	gxzTemp0+1
.8702	6d e2 06	adc $06e2			adc 	GXSpriteOffset+1
.8705					_GXSAFindPage:
.8705	c9 20		cmp #$20			cmp 	#$20 						; on this page
.8707	90 06		bcc $870f			bcc 	_GXSAFoundPage
.8709	e9 20		sbc #$20			sbc 	#$20 						; forward one page
.870b	e6 0b		inc $0b				inc 	GXEditSlot
.870d	80 f6		bra $8705			bra 	_GXSAFindPage
.870f					_GXSAFoundPage:
.870f	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; physical address of page.
.8711	85 37		sta $37				sta 	gxzTemp0+1 					; gxzTemp0 now points to the page
.8713	a0 00		ldy #$00			ldy 	#0
.8715					_GXSACopyLoop:
.8715	b1 36		lda ($36),y			lda 	(gxzTemp0),y
.8717	99 f8 05	sta $05f8,y			sta 	gxPixelBuffer,y
.871a	c8		iny				iny
.871b	cc de 06	cpy $06de			cpy 	GXSizePixels
.871e	d0 f5		bne $8715			bne 	_GXSACopyLoop
.8720	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/sprite.asm

.8721					GXSelect:
.8721	ad 3a 06	lda $063a			lda 	gxSpritesOn
.8724	f0 22		beq $8748			beq 	_GXSFail
.8726	a5 36		lda $36				lda 	gxzTemp0 					; illegal sprite #
.8728	c9 40		cmp #$40			cmp 	#64
.872a	b0 1c		bcs $8748			bcs 	_GXSFail
.872c	8d 46 06	sta $0646			sta 	GSCurrentSpriteID
.872f	a4 37		ldy $37				ldy 	gxzTemp0+1 					; control value.
.8731	a9 00		lda #$00			lda  	#0 							; multiply sprite # x 8 => A
.8733	06 36		asl $36				asl 	gxzTemp0
.8735	06 36		asl $36				asl 	gxzTemp0
.8737	06 36		asl $36				asl 	gxzTemp0
.8739	2a		rol a				rol 	a
.873a	69 d9		adc #$d9			adc 	#$D9 						; sprite area
.873c	8d 48 06	sta $0648			sta 	GSCurrentSpriteAddr+1 		; address to GSCurrentSprite and gxzTemp
.873f	85 37		sta $37				sta 	gxzTemp0+1
.8741	a5 36		lda $36				lda 	gxzTemp0
.8743	8d 47 06	sta $0647			sta 	GSCurrentSpriteAddr
.8746	18		clc				clc
.8747	60		rts				rts
.8748					_GXSFail:
.8748	38		sec				sec
.8749	60		rts				rts
.874a					GXSelectImage:
.874a	ad 3a 06	lda $063a			lda 	gxSpritesOn
.874d	f0 74		beq $87c3			beq 	_GXSIFail
.874f	ad 48 06	lda $0648			lda 	GSCurrentSpriteAddr+1 		; check sprite selected
.8752	f0 6f		beq $87c3			beq 	_GXSIFail 					; (checking the MSB)
.8754	64 01		stz $01				stz 	1
.8756	a5 37		lda $37				lda 	gxzTemp0+1 					; push show/hide on the stack.
.8758	d0 6b		bne $87c5			bne 	_GXSIHide
.875a	a5 36		lda $36				lda 	gxzTemp0 					; sprite image
.875c	48		pha				pha
.875d	20 50 88	jsr $8850			jsr 	GXOpenBitmap
.8760	68		pla				pla
.8761	20 3f 89	jsr $893f			jsr 	GXFindSprite
.8764	b0 5a		bcs $87c0			bcs 	_GXSICloseFail 				; no image
.8766	a0 01		ldy #$01			ldy 	#1
.8768	ad 47 06	lda $0647			lda 	GSCurrentSpriteAddr
.876b	85 36		sta $36				sta 	gxzTemp0
.876d	ad 48 06	lda $0648			lda 	GSCurrentSpriteAddr+1
.8770	85 37		sta $37				sta 	gxzTemp0+1
.8772	ad e1 06	lda $06e1			lda 	GXSpriteOffset
.8775	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.8777	18		clc				clc
.8778	ad e2 06	lda $06e2			lda 	GXSpriteOffset+1
.877b	6d 49 06	adc $0649			adc 	GXSpriteOffsetBase
.877e	c8		iny				iny
.877f	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.8781	ad 4a 06	lda $064a			lda 	GXSpriteOffsetBase+1
.8784	69 00		adc #$00			adc 	#0
.8786	c8		iny				iny
.8787	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.8789	ad df 06	lda $06df			lda 	GXSizeBits 					; get raw size
.878c	49 03		eor #$03			eor 	#3 							; make it right (00=32 etc.)
.878e	2a		rol a				rol 	a 							; x 2
.878f	0a		asl a				asl 	a 							; x 4
.8790	0a		asl a				asl 	a 							; x 8
.8791	0a		asl a				asl 	a 							; x 16
.8792	0d e0 06	ora $06e0			ora 	GXSpriteLUT 				; Or with LUT
.8795	0a		asl a				asl 	a 							; 1 shift
.8796	09 01		ora #$01			ora 	#1 							; enable sprite.
.8798	92 36		sta ($36)			sta 	(gxzTemp0) 					; and write back
.879a	20 61 88	jsr $8861			jsr 	GXCloseBitmap
.879d	ae 46 06	ldx $0646			ldx 	GSCurrentSpriteID 			; point to sprite entries.
.87a0	bd 8b 06	lda $068b,x			lda 	GXSpriteHigh,x 				; clear upper two bits of size
.87a3	29 3f		and #$3f			and 	#$3F
.87a5	9d 8b 06	sta $068b,x			sta 	GXSpriteHigh,x
.87a8	ad df 06	lda $06df			lda 	GXSizeBits 					; get bit size
.87ab	6a		ror a				ror 	a 							; shift into bits 6/7
.87ac	6a		ror a				ror 	a
.87ad	6a		ror a				ror 	a
.87ae	29 c0		and #$c0			and 	#$C0
.87b0	1d 8b 06	ora $068b,x			ora 	GXSpriteHigh,x 				; put in  upper 2 bits of sprite data
.87b3	9d 8b 06	sta $068b,x			sta 	GXSpriteHigh,x
.87b6	bd 4b 06	lda $064b,x			lda 	GXSpriteLow,x 				; clear hidden flag.
.87b9	29 7f		and #$7f			and 	#$7F
.87bb	9d 4b 06	sta $064b,x			sta 	GXSpriteLow,x
.87be	18		clc				clc
.87bf	60		rts				rts
.87c0					_GXSICloseFail:
.87c0	20 61 88	jsr $8861			jsr 	GXCloseBitmap
.87c3					_GXSIFail:
.87c3	38		sec				sec
.87c4	60		rts				rts
.87c5					_GXSIHide:
.87c5	ad 47 06	lda $0647			lda 	GSCurrentSpriteAddr  		; get Sprite h/w address and write there
.87c8	85 36		sta $36				sta 	gxzTemp0
.87ca	ad 48 06	lda $0648			lda 	GSCurrentSpriteAddr+1
.87cd	85 37		sta $37				sta 	gxzTemp0+1
.87cf	a9 00		lda #$00			lda 	#0
.87d1	92 36		sta ($36)			sta 	(gxzTemp0)
.87d3	ae 46 06	ldx $0646			ldx 	GSCurrentSpriteID 			; get sprite ID
.87d6	bd 4b 06	lda $064b,x			lda 	GXSpriteLow,x 				; set the hidden bit.
.87d9	09 80		ora #$80			ora 	#$80
.87db	9d 4b 06	sta $064b,x			sta 	GXSpriteLow,x
.87de	18		clc				clc
.87df	60		rts				rts
.87e0					GXMoveSprite:
.87e0	ad 3a 06	lda $063a			lda 	gxSpritesOn
.87e3	f0 65		beq $884a			beq 	_GXSIFail
.87e5	ad 48 06	lda $0648			lda 	GSCurrentSpriteAddr+1 		; check sprite selected
.87e8	f0 60		beq $884a			beq 	_GXSIFail
.87ea	85 37		sta $37				sta 	gxzTemp0+1
.87ec	a0 04		ldy #$04			ldy 	#4
.87ee	ad 47 06	lda $0647			lda 	GSCurrentSpriteAddr
.87f1	85 36		sta $36				sta 	gxzTemp0
.87f3	ae 46 06	ldx $0646			ldx 	GSCurrentSpriteID 			; get the size from the upper two bits
.87f6	bd 8b 06	lda $068b,x			lda 	GXSpriteHigh,x
.87f9	2a		rol a				rol 	a	 						; into bits 0,1.
.87fa	2a		rol a				rol 	a
.87fb	2a		rol a				rol 	a
.87fc	29 03		and #$03			and 	#3
.87fe	aa		tax				tax
.87ff	bd 4c 88	lda $884c,x			lda 	_GXMSOffset,x 				; get 32-SpriteSize/2
.8802	48		pha				pha
.8803	18		clc				clc
.8804	6d 32 06	adc $0632			adc 	gxX0						; copy position.
.8807	91 36		sta ($36),y			sta 	(gxzTemp0),y
.8809	c8		iny				iny
.880a	ad 33 06	lda $0633			lda 	gxX0+1
.880d	69 00		adc #$00			adc 	#0
.880f	91 36		sta ($36),y			sta 	(gxzTemp0),y
.8811	c8		iny				iny
.8812	68		pla				pla
.8813	18		clc				clc
.8814	6d 34 06	adc $0634			adc 	gxY0
.8817	91 36		sta ($36),y			sta 	(gxzTemp0),y
.8819	a9 00		lda #$00			lda 	#0
.881b	69 00		adc #$00			adc 	#0
.881d	c8		iny				iny
.881e	91 36		sta ($36),y			sta 	(gxzTemp0),y
.8820	4e 33 06	lsr $0633			lsr 	gxX0+1 						; divide X by 4
.8823	6e 32 06	ror $0632			ror 	gxX0
.8826	4e 32 06	lsr $0632			lsr 	gxX0
.8829	4e 34 06	lsr $0634			lsr 	gxY0 						; divide Y by 4
.882c	4e 34 06	lsr $0634			lsr 	gxY0
.882f	ae 46 06	ldx $0646			ldx 	GSCurrentSpriteID 			; copy X/4 and Y/4 into the status bytes
.8832	bd 4b 06	lda $064b,x			lda 	GXSpriteLow,x
.8835	29 80		and #$80			and 	#$80
.8837	0d 32 06	ora $0632			ora 	gxX0
.883a	9d 4b 06	sta $064b,x			sta 	GXSpriteLow,x
.883d	bd 8b 06	lda $068b,x			lda 	GXSpriteHigh,x
.8840	29 c0		and #$c0			and 	#$C0
.8842	0d 34 06	ora $0634			ora 	gxY0
.8845	9d 8b 06	sta $068b,x			sta 	GXSpriteHigh,x
.8848	18		clc				clc
.8849	60		rts				rts
.884a					_GXSIFail:
.884a	38		sec				sec
.884b	60		rts				rts
.884c					_GXMSOffset:
>884c	1c						.byte 	32-8/2
>884d	18						.byte 	32-16/2
>884e	14						.byte 	32-24/2
>884f	10						.byte 	32-32/2

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./utility/access.asm

.8850					GXOpenBitmap:
.8850	78		sei				sei 								; no interrupts here
.8851	a5 00		lda $00				lda 	0 							; save original MMU Control register
.8853	8d 44 06	sta $0644			sta 	gxOriginalMMUSetting
.8856	a9 80		lda #$80			lda 	#GXMappingLUT*16+$80+GXMappingLUT
.8858	85 00		sta $00				sta 	0
.885a	a5 0b		lda $0b				lda 	GXEditSlot 					; Save the original LUT slot value
.885c	8d 43 06	sta $0643			sta 	gxOriginalLUTValue
.885f	58		cli				cli
.8860	60		rts				rts
.8861					GXCloseBitmap:
.8861	78		sei				sei
.8862	ad 43 06	lda $0643			lda 	gxOriginalLUTValue 			; restore LUT slot value
.8865	85 0b		sta $0b				sta 	GXEditSlot
.8867	ad 44 06	lda $0644			lda 	gxOriginalMMUSetting 		; restore MMU Control register
.886a	85 00		sta $00				sta 	0
.886c	58		cli				cli
.886d	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./utility/calculate.asm

.886e					GXPositionCalc:
.886e	a5 36		lda $36				lda 	gxzTemp0 					; save temp memory slot
.8870	48		pha				pha
.8871	ad 34 06	lda $0634			lda 	GXY0 						; gxzScreen = Y0
.8874	85 3c		sta $3c				sta 	gxzScreen
.8876	64 3d		stz $3d				stz 	gxzScreen+1
.8878	06 3c		asl $3c				asl 	gxzScreen 						; gxzScreen = Y0 * 4
.887a	26 3d		rol $3d				rol 	gxzScreen+1
.887c	06 3c		asl $3c				asl 	gxzScreen
.887e	26 3d		rol $3d				rol 	gxzScreen+1
.8880	18		clc				clc 								; gxzScreen = Y0 * 5, as it's still in A
.8881	65 3c		adc $3c				adc 	gxzScreen
.8883	85 3c		sta $3c				sta 	gxzScreen
.8885	90 02		bcc $8889			bcc 	_GXPCNoCarry
.8887	e6 3d		inc $3d				inc 	gxzScreen+1
.8889					_GXPCNoCarry:
.8889	06 3c		asl $3c				asl 	gxzScreen 						; now Y0 * 10. Needs to be multiplied by another
.888b	26 3d		rol $3d				rol 	gxzScreen+1 					; 32. At this point the MSB contains the offset
.888d	a5 3d		lda $3d				lda	 	gxzScreen+1 					; so save this in zTemp0 and zero it.
.888f	85 36		sta $36				sta 	gxzTemp0
.8891	64 3d		stz $3d				stz 	gxzScreen+1
.8893	a9 05		lda #$05			lda 	#5 							; now multiply by 32, this puts this in the range 0..8191
.8895					_GXPCMultiply32:
.8895	06 3c		asl $3c				asl 	gxzScreen
.8897	26 3d		rol $3d				rol 	gxzScreen+1
.8899	3a		dec a				dec 	a
.889a	d0 f9		bne $8895			bne 	_GXPCMultiply32
.889c	18		clc				clc
.889d	ad 32 06	lda $0632			lda 	GXX0 						; add X to this value, put the result in gsOffset, gxzScreen has to be on a page boundary
.88a0	65 3c		adc $3c				adc 	gxzScreen
.88a2	8d 45 06	sta $0645			sta 	gsOffset
.88a5	ad 33 06	lda $0633			lda 	GXX0+1
.88a8	65 3d		adc $3d				adc 	gxzScreen+1
.88aa	c9 20		cmp #$20			cmp 	#$20 						; has it overflowed into the next one ?
.88ac	90 04		bcc $88b2			bcc 	_GXPCNoOverflow
.88ae	29 1f		and #$1f			and 	#$1F 						; fix it up
.88b0	e6 36		inc $36				inc 	gxzTemp0 					; add 1 to the page number
.88b2					_GXPCNoOverflow:
.88b2	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; make it the address mapped in.
.88b4	85 3d		sta $3d				sta 	gxzScreen+1
.88b6	64 3c		stz $3c				stz 	gxzScreen
.88b8	18		clc				clc
.88b9	a5 36		lda $36				lda 	gxzTemp0 					; get the page number
.88bb	6d 3c 06	adc $063c			adc 	gxBasePage 					; by adding the base page
.88be	85 0b		sta $0b				sta 	GXEditSlot 				; and map it into memory.
.88c0	68		pla				pla
.88c1	85 36		sta $36				sta 	gxzTemp0
.88c3	60		rts				rts
.88c4					GXMovePositionDown:
.88c4	18		clc				clc 								; add 320 to offset/temp+1
.88c5	ad 45 06	lda $0645			lda 	gsOffset
.88c8	69 40		adc #$40			adc 	#64
.88ca	8d 45 06	sta $0645			sta 	gsOffset
.88cd	a5 3d		lda $3d				lda 	gxzScreen+1
.88cf	69 01		adc #$01			adc 	#1
.88d1	85 3d		sta $3d				sta 	gxzScreen+1
.88d3	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page
.88d5	90 07		bcc $88de			bcc 	_GXMPDExit
.88d7	38		sec				sec  								; next page
.88d8	e9 20		sbc #$20			sbc 	#$20
.88da	85 3d		sta $3d				sta 	gxzScreen+1
.88dc	e6 0b		inc $0b				inc 	GXEditSlot
.88de					_GXMPDExit:
.88de	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./utility/collide.asm

.88df					GXCollide:
.88df	a5 36		lda $36				lda 	gxzTemp0 					; check if sprite numbers are legal.
.88e1	aa		tax				tax
.88e2	05 37		ora $37				ora 	gxzTemp0+1
.88e4	29 c0		and #$c0			and 	#$C0
.88e6	38		sec				sec
.88e7	d0 53		bne $893c			bne 	_GXCollideFail 				; if either >= 64, fail.
.88e9	a4 37		ldy $37				ldy 	gxzTemp0+1 					; at this point X is 1st sprite and Y is 2nd sprite.
.88eb	b9 4b 06	lda $064b,y			lda 	GXSpriteLow,y 				; check if either hidden bit is set
.88ee	1d 4b 06	ora $064b,x			ora 	GXSpriteLow,x
.88f1	30 48		bmi $893b			bmi 	_GXOkayFail 				; if either hidden, then they cannot collide.
.88f3	18		clc				clc 								; need to calculate sum of sizes.
.88f4	b9 8b 06	lda $068b,y			lda 	GXSpriteHigh,y
.88f7	7d 8b 06	adc $068b,x			adc 	GXSpriteHigh,x 				; at this point, CS, Bit 6 and 7 contain that sum.
.88fa	29 c0		and #$c0			and 	#$C0 					 	; mask off
.88fc	6a		ror a				ror 	a 							; 5/6/7
.88fd	4a		lsr a				lsr 	a 							; 4/5/6
.88fe	4a		lsr a				lsr 	a 							; 3/4/5
.88ff	4a		lsr a				lsr 	a 							; 2/3/4
.8900	18		clc				clc
.8901	69 08		adc #$08			adc 	#$08
.8903	4a		lsr a				lsr 	a 							; adjust because all coordinates are divided by 4 to store.
.8904	4a		lsr a				lsr 	a
.8905	85 38		sta $38				sta 	gxzTemp1 					; so the difference between the centres has to be less than this.
.8907	b9 8b 06	lda $068b,y			lda 	GXSpriteHigh,y 				; calculate y1-y0
.890a	29 3f		and #$3f			and 	#$3F
.890c	85 39		sta $39				sta 	gxzTemp1+1
.890e	38		sec				sec
.890f	bd 8b 06	lda $068b,x			lda 	GXSpriteHigh,x
.8912	29 3f		and #$3f			and 	#$3F
.8914	e5 39		sbc $39				sbc 	gxzTemp1+1
.8916	b0 03		bcs $891b			bcs 	_GXCAbs1 					; calculate |y1-y0|
.8918	49 ff		eor #$ff			eor 	#$FF
.891a	1a		inc a				inc 	a
.891b					_GXCAbs1:
.891b	c5 38		cmp $38				cmp 	gxzTemp1 					; if >= difference then no overlap
.891d	b0 1c		bcs $893b			bcs 	_GXOkayFail
.891f	85 39		sta $39				sta 	gxzTemp1+1 					; save |y1-y0|
.8921	38		sec				sec 								; calculate |x1-x0|
.8922	b9 4b 06	lda $064b,y			lda 	GXSpriteLow,y
.8925	fd 4b 06	sbc $064b,x			sbc 	GXSpriteLow,x
.8928	b0 03		bcs $892d			bcs 	_GXCAbs2
.892a	49 ff		eor #$ff			eor 	#$FF
.892c	1a		inc a				inc 	a
.892d					_GXCAbs2:
.892d	c5 38		cmp $38				cmp 	gxzTemp1 					; if >= difference then no overlap
.892f	b0 0a		bcs $893b			bcs 	_GXOkayFail
.8931	c5 39		cmp $39				cmp 	gxzTemp1+1 					; is it less than the previous one.
.8933	90 02		bcc $8937			bcc 	_GXCHaveLowest
.8935	a5 39		lda $39				lda 	gxzTemp1+1 					; if not, that's the smallest difference.
.8937					_GXCHaveLowest:
.8937	0a		asl a				asl 	a 							; scale to allow for >> 2
.8938	0a		asl a				asl 	a
.8939	18		clc				clc
.893a	60		rts				rts
.893b					_GXOkayFail:
.893b	18		clc				clc
.893c					_GXCollideFail:
.893c	a9 ff		lda #$ff			lda 	#$FF
.893e	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./utility/find.asm

.893f					GXFindSprite:
.893f	aa		tax				tax
.8940	ad 3d 06	lda $063d			lda 	GXSpritePage 				; access the base page of the sprite
.8943	85 0b		sta $0b				sta 	GXEditSlot
.8945	bd 00 61	lda $6100,x			lda 	GXMappingAddress+256,x 		; check a valid sprite
.8948	1d 00 60	ora $6000,x			ora 	GXMappingAddress,x
.894b	f0 33		beq $8980			beq 	_GXFSFail
.894d	bd 00 61	lda $6100,x			lda 	GXMappingAddress+256,x 		; MSB
.8950	8d e2 06	sta $06e2			sta 	GXSpriteOffset+1
.8953	bd 00 60	lda $6000,x			lda 	GXMappingAddress,x 			; LSB
.8956	48		pha				pha 								; save twice
.8957	48		pha				pha
.8958	29 03		and #$03			and 	#3 							; get sprite size
.895a	8d df 06	sta $06df			sta 	GXSizeBits 					; save raw (0-3)
.895d	aa		tax				tax
.895e	bd 82 89	lda $8982,x			lda 	_GXFXSSTTable,x 			; read sprite size
.8961	8d de 06	sta $06de			sta 	GXSizePixels 					; save (8/16/24/32)
.8964	68		pla				pla 								; get LUT
.8965	4a		lsr a				lsr		a
.8966	4a		lsr a				lsr		a
.8967	29 03		and #$03			and 	#3
.8969	8d e0 06	sta $06e0			sta 	GXSpriteLUT
.896c	68		pla				pla 								; address, neeeds to be x 4
.896d	29 f0		and #$f0			and 	#$F0
.896f	8d e1 06	sta $06e1			sta 	GXSpriteOffset
.8972	0e e1 06	asl $06e1			asl 	GXSpriteOffset
.8975	2e e2 06	rol $06e2			rol 	GXSpriteOffset+1
.8978	0e e1 06	asl $06e1			asl 	GXSpriteOffset
.897b	2e e2 06	rol $06e2			rol 	GXSpriteOffset+1
.897e	18		clc				clc
.897f	60		rts				rts
.8980					_GXFSFail:
.8980	38		sec				sec
.8981	60		rts				rts
.8982					_GXFXSSTTable:
>8982	08 10 18 20					.byte 	8,16,24,32
.06de					GXSizePixels:
>06de							.fill 	1
.06df					GXSizeBits:
>06df							.fill 	1
.06e0					GXSpriteLUT:
>06e0							.fill 	1
.06e1					GXSpriteOffset:
>06e1							.fill 	2

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./utility/sort.asm

.8986					GXSortXY:
.8986	20 a4 89	jsr $89a4			jsr 	GXSortY 					; will be sorted on Y now
.8989	ad 32 06	lda $0632			lda 	gxX0 						; compare X0 v X1
.898c	cd 36 06	cmp $0636			cmp 	gxX1
.898f	ad 33 06	lda $0633			lda 	gXX0+1
.8992	ed 37 06	sbc $0637			sbc 	gXX1+1
.8995	90 0c		bcc $89a3			bcc 	_GXSXYExit 					; X0 < X1 exit
.8997	a2 00		ldx #$00			ldx 	#0 							; swap them over
.8999	a0 04		ldy #$04			ldy 	#4
.899b	20 b8 89	jsr $89b8			jsr 	GXSwapXY
.899e	e8		inx				inx
.899f	c8		iny				iny
.89a0	20 b8 89	jsr $89b8			jsr 	GXSwapXY
.89a3					_GXSXYExit:
.89a3	60		rts				rts
.89a4					GXSortY:
.89a4	ad 34 06	lda $0634			lda 	gxY0 						; if Y0 >= Y1
.89a7	cd 38 06	cmp $0638			cmp 	gxY1
.89aa	90 0b		bcc $89b7			bcc 	_GXSYSorted
.89ac	a2 03		ldx #$03			ldx 	#3 							; swap 3-0
.89ae	a0 07		ldy #$07			ldy 	#7 							; with 4-7
.89b0					_GXSwap1:
.89b0	20 b8 89	jsr $89b8			jsr 	GXSwapXY
.89b3	88		dey				dey
.89b4	ca		dex				dex
.89b5	10 f9		bpl $89b0			bpl 	_GXSwap1
.89b7					_GXSYSorted:
.89b7	60		rts				rts
.89b8					GXSwapXY:
.89b8	bd 32 06	lda $0632,x			lda 	gxX0,x
.89bb	48		pha				pha
.89bc	b9 32 06	lda $0632,y			lda 	gxX0,y
.89bf	9d 32 06	sta $0632,x			sta 	gxX0,x
.89c2	68		pla				pla
.89c3	99 32 06	sta $0632,y			sta 	gxX0,y
.89c6	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Return to file: ./common/aa.system/00start.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/assembler.asm

.89c7					AssembleGroup1:
.89c7	a9 ff		lda #$ff			lda 	#$FF
.89c9	8d a5 04	sta $04a5			sta 	ModeMask 					; initialise the mode mask - all for all
.89cc	80 02		bra $89d0			bra 	AsmGroup12
.89ce					AssembleGroup2:
.89ce	a5 00		lda $00				lda 	$00
.89d0					AsmGroup12:
.89d0	8d a3 04	sta $04a3			sta 	IsGroup1 					; save the 'group 1' flag
.89d3	68		pla				pla 								; pop the return address to access the information following.
.89d4	fa		plx				plx
.89d5	20 5e 8a	jsr $8a5e			jsr 	AccessParameters 			; get opcode and save as base
.89d8	8d a4 04	sta $04a4			sta 	BaseOpcode
.89db	ad a3 04	lda $04a3			lda 	IsGroup1 					; skip if group 1 as we don't have a complex mask.
.89de	d0 08		bne $89e8			bne 	_AG12HaveMask
.89e0	a9 02		lda #$02			lda 	#2 							; if group 2 the second parameter is the mask
.89e2	20 66 8a	jsr $8a66			jsr 	GetParameter		 		; e.g. which modes are supported for this operand
.89e5	8d a5 04	sta $04a5			sta 	ModeMask
.89e8					_AG12HaveMask:
.89e8	20 a1 8b	jsr $8ba1			jsr 	TypeAndCalculateOperand 	; get zero page type
.89eb	da		phx				phx 								; save found address mode
.89ec	20 ca 8a	jsr $8aca			jsr 	AssembleModeX
.89ef	fa		plx				plx  								; restore address mode
.89f0	b0 0b		bcs $89fd			bcs 	_AG12Exit
.89f2	20 fe 89	jsr $89fe			jsr 	PromoteToAbsolute  			; promote ZP to ABS and try that
.89f5	20 ca 8a	jsr $8aca			jsr 	AssembleModeX
.89f8	b0 03		bcs $89fd			bcs 	_AG12Exit
.89fa	4c 43 b5	jmp $b543			jmp 	SyntaxError 				; can't do either, so must be wrong mode/operand.
.89fd					_AG12Exit:
.89fd	60		rts				rts
.89fe					PromoteToAbsolute:
.89fe	a9 6c		lda #$6c			lda 	#AM_ABS 					; lda xx
.8a00	e0 e4		cpx #$e4			cpx 	#AM_ZEROPAGE
.8a02	f0 19		beq $8a1d			beq 	_PTADo
.8a04	a9 7c		lda #$7c			lda 	#AM_ABSX 					; lda xx,X
.8a06	e0 f4		cpx #$f4			cpx 	#AM_ZEROX
.8a08	f0 13		beq $8a1d			beq 	_PTADo
.8a0a	a9 78		lda #$78			lda 	#AM_ABSY 					; lda xx,Y
.8a0c	e0 80		cpx #$80			cpx 	#AM_ZEROY
.8a0e	f0 0d		beq $8a1d			beq 	_PTADo
.8a10	a9 01		lda #$01			lda 	#AM_INDABS 					; lda (xx) (jump)
.8a12	e0 d1		cpx #$d1			cpx 	#AM_IND
.8a14	f0 07		beq $8a1d			beq 	_PTADo
.8a16	a9 02		lda #$02			lda 	#AM_INDABSX 				; lda (xx,x) (jump)
.8a18	e0 c0		cpx #$c0			cpx 	#AM_INDX
.8a1a	f0 01		beq $8a1d			beq 	_PTADo
.8a1c	60		rts				rts
.8a1d					_PTADo:
.8a1d	aa		tax				tax
.8a1e	60		rts				rts
.8a1f					AssembleGroup3:
.8a1f	68		pla				pla 								; get parameters, which is just the opcode.
.8a20	fa		plx				plx
.8a21	20 5e 8a	jsr $8a5e			jsr 	AccessParameters 			; get and output opcode
.8a24	20 76 8a	jsr $8a76			jsr 	AssemblerWriteByte
.8a27	20 05 8c	jsr $8c05			jsr 	CalculateOperand 			; get a 16 bit operand
.8a2a	ad 08 04	lda $0408			lda 	NSMantissa0 				; calculate the offset
.8a2d	38		sec				sec
.8a2e	ed 9e 04	sbc $049e			sbc 	AssemblerAddress
.8a31	48		pha				pha 								; LSB in A
.8a32	ad 10 04	lda $0410			lda 	NSMantissa1
.8a35	ed 9f 04	sbc $049f			sbc 	AssemblerAddress+1
.8a38	aa		tax				tax 								; MSB in X
.8a39	68		pla				pla
.8a3a	18		clc				clc 								; $80 to easy check $80-$7F, plus 1 for offset error
.8a3b	69 7f		adc #$7f			adc 	#$7F
.8a3d	90 01		bcc $8a40			bcc 	_AG3NoCarry
.8a3f	e8		inx				inx
.8a40					_AG3NoCarry:
.8a40	38		sec				sec 								; fix back and write out anyways.
.8a41	e9 80		sbc #$80			sbc 	#$80
.8a43	20 76 8a	jsr $8a76			jsr 	AssemblerWriteByte
.8a46	e0 00		cpx #$00			cpx 	#0 							; was it in range
.8a48	f0 0a		beq $8a54			beq 	_AG3Exit
.8a4a	ad a0 04	lda $04a0			lda 	AssemblerControl 			; are we allowing bad values ?
.8a4d	29 01		and #$01			and 	#1
.8a4f	f0 03		beq $8a54			beq 	_AG3Exit
.8a51	4c 48 b5	jmp $b548			jmp 	RangeError 					; no, branch is out of range
.8a54					_AG3Exit:
.8a54	60		rts				rts
.8a55					AssembleGroup4:
.8a55	68		pla				pla 								; pop address
.8a56	fa		plx				plx
.8a57	20 5e 8a	jsr $8a5e			jsr 	AccessParameters 			; access and get first
.8a5a	20 76 8a	jsr $8a76			jsr 	AssemblerWriteByte 			; output it.
.8a5d	60		rts				rts
.8a5e					AccessParameters:
.8a5e	8d a1 04	sta $04a1			sta 	ParamStart
.8a61	8e a2 04	stx $04a2			stx 	ParamStart+1
.8a64	a9 01		lda #$01			lda 	#1
.8a66					GetParameter:
.8a66	5a		phy				phy
.8a67	a8		tay				tay
.8a68	ad a1 04	lda $04a1			lda 	ParamStart
.8a6b	85 36		sta $36				sta 	zTemp0
.8a6d	ad a2 04	lda $04a2			lda 	ParamStart+1
.8a70	85 37		sta $37				sta 	zTemp0+1
.8a72	b1 36		lda ($36),y			lda 	(zTemp0),y
.8a74	7a		ply				ply
.8a75	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/aswrite.asm

.8a76					AssemblerWriteByte:
.8a76	48		pha			pha
.8a77	ad a0 04	lda $04a0		lda 	AssemblerControl 				; check printing bytes ?
.8a7a	29 02		and #$02		and 	#2
.8a7c	f0 1b		beq $8a99		beq 	_AWBNoPrint
.8a7e	ad 9f 04	lda $049f		lda		AssemblerAddress+1 				; print address
.8a81	20 b4 8a	jsr $8ab4		jsr 	PrintHex
.8a84	ad 9e 04	lda $049e		lda		AssemblerAddress
.8a87	20 b4 8a	jsr $8ab4		jsr 	PrintHex
.8a8a	a9 20		lda #$20		lda 	#' '
.8a8c	20 fb b6	jsr $b6fb		jsr 	EXTPrintCharacter
.8a8f	68		pla			pla 									; print byte
.8a90	48		pha			pha
.8a91	20 b4 8a	jsr $8ab4		jsr 	PrintHex
.8a94	a9 0d		lda #$0d		lda 	#13
.8a96	20 fb b6	jsr $b6fb		jsr 	EXTPrintCharacter
.8a99					_AWBNoPrint:
.8a99	ad 9e 04	lda $049e		lda		AssemblerAddress				; copy address to zTemp0
.8a9c	85 36		sta $36			sta 	zTemp0
.8a9e	ad 9f 04	lda $049f		lda		AssemblerAddress+1
.8aa1	f0 0e		beq $8ab1		beq 	_AWBRange
.8aa3	85 37		sta $37			sta 	zTemp0+1
.8aa5	68		pla			pla 									; write byte out
.8aa6	92 36		sta ($36)		sta 	(zTemp0)
.8aa8	ee 9e 04	inc $049e		inc 	AssemblerAddress 				; bump address
.8aab	d0 03		bne $8ab0		bne 	_AWBNoCarry
.8aad	ee 9f 04	inc $049f		inc 	AssemblerAddress+1
.8ab0					_AWBNoCarry:
.8ab0	60		rts			rts
.8ab1					_AWBRange:
.8ab1	4c 48 b5	jmp $b548		jmp 	RangeError
.8ab4					PrintHex:
.8ab4	48		pha				pha
.8ab5	4a		lsr a				lsr 	a
.8ab6	4a		lsr a				lsr 	a
.8ab7	4a		lsr a				lsr 	a
.8ab8	4a		lsr a				lsr 	a
.8ab9	20 bd 8a	jsr $8abd			jsr 	_PrintNibble
.8abc	68		pla				pla
.8abd					_PrintNibble:
.8abd	29 0f		and #$0f			and 	#15
.8abf	c9 0a		cmp #$0a			cmp 	#10
.8ac1	90 02		bcc $8ac5			bcc 	_NoShift
.8ac3	69 06		adc #$06			adc 	#6
.8ac5					_NoShift:
.8ac5	69 30		adc #$30			adc 	#48
.8ac7	4c fb b6	jmp $b6fb			jmp 	EXTPrintCharacter

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/instruction.asm

.8aca					AssembleModeX:
.8aca	5a		phy				phy
.8acb	ad a3 04	lda $04a3			lda 	IsGroup1
.8ace	f0 17		beq $8ae7			beq 	_AMXGroup2
.8ad0	8a		txa				txa 							; is it in group # 1
.8ad1	29 40		and #$40			and 	#AM_ISG1
.8ad3	f0 50		beq $8b25			beq 	_AMXFail 				; no, give up.
.8ad5	8a		txa				txa 							; get back.
.8ad6	29 1f		and #$1f			and 	#$1F 					; this is now the offset.
.8ad8	e0 e0		cpx #$e0			cpx 	#AM_IMMEDIATE 			; if not immediate, we can continue.
.8ada	d0 22		bne $8afe			bne 	_AMXHaveInfo
.8adc	ad a4 04	lda $04a4			lda 	BaseOpcode 				; cannot store immediate.
.8adf	c9 81		cmp #$81			cmp 	#$81
.8ae1	f0 42		beq $8b25			beq 	_AMXFail
.8ae3	a9 08		lda #$08			lda 	#8 						; if immediate we use offset 8.
.8ae5	80 17		bra $8afe			bra 	_AMXHaveInfo 			; odd design decision there.
.8ae7					_AMXGroup2:
.8ae7	8a		txa				txa 							; is it in group 2 ?
.8ae8	29 20		and #$20			and 	#AM_ISG2
.8aea	f0 39		beq $8b25			beq 	_AMXFail 				; no, give up.
.8aec	8a		txa				txa 							; get the offset into Y
.8aed	29 1f		and #$1f			and 	#$1F
.8aef	4a		lsr a				lsr 	a 						; make it 0-7.
.8af0	4a		lsr a				lsr  	a
.8af1	a8		tay				tay
.8af2	ad a5 04	lda $04a5			lda 	ModeMask 				; shift the modemask left so you can check it against the requested offset
.8af5					_AMXCheckOkay:
.8af5	0a		asl a				asl 	a 						; shift modemask left enough times to check legitimate.
.8af6	88		dey				dey
.8af7	10 fc		bpl $8af5			bpl 	_AMXCheckOkay
.8af9	90 2a		bcc $8b25			bcc 	_AMXFail 				; not allowed.
.8afb	8a		txa				txa  							; get mask back
.8afc	29 1f		and #$1f			and 	#$1F
.8afe					_AMXHaveInfo:
.8afe	e0 00		cpx #$00			cpx 	#$00 					; does it *require* an 8 bit operand
.8b00	10 05		bpl $8b07			bpl 	_AMXAnySize 			; checking bit 7, the zero page opcode flag.
.8b02	ac 10 04	ldy $0410			ldy 	NSMantissa1 			; fail if it is outside range, e.g. the MSB is set.
.8b05	d0 1e		bne $8b25			bne 	_AMXFail
.8b07					_AMXAnySize:
.8b07	18		clc				clc 							; add offset to the base opcode
.8b08	6d a4 04	adc $04a4			adc 	BaseOpcode
.8b0b					_AMXOutputCode:
.8b0b	20 76 8a	jsr $8a76			jsr 	AssemblerWriteByte 		; write the opcode out.
.8b0e	e0 28		cpx #$28			cpx 	#AM_ACC 				; A mode (e.g. ASL A)
.8b10	f0 10		beq $8b22			beq 	_AMXExit
.8b12	ad 08 04	lda $0408			lda 	NSMantissa0 				; write LSB operand
.8b15	20 76 8a	jsr $8a76			jsr 	AssemblerWriteByte
.8b18	e0 00		cpx #$00			cpx 	#$00 					; zeropage ?
.8b1a	30 06		bmi $8b22			bmi 	_AMXExit
.8b1c	ad 10 04	lda $0410			lda 	NSMantissa1 			; write MSB operand
.8b1f	20 76 8a	jsr $8a76			jsr 	AssemblerWriteByte
.8b22					_AMXExit:
.8b22	7a		ply				ply
.8b23	38		sec				sec
.8b24	60		rts				rts
.8b25					_AMXFail:
.8b25	a0 00		ldy #$00			ldy 	#0
.8b27					_AMXCheckOddities:
.8b27	8a		txa				txa
.8b28	d9 50 8b	cmp $8b50,y			cmp 	ExtraOpcode+2,y 		; match address mode
.8b2b	d0 16		bne $8b43			bne 	_AMXCONext
.8b2d	b9 4e 8b	lda $8b4e,y			lda 	ExtraOpcode+0,y 		; do the base opcodes match
.8b30	cd a4 04	cmp $04a4			cmp 	BaseOpcode
.8b33	d0 0e		bne $8b43			bne 	_AMXCONext
.8b35	e0 00		cpx #$00			cpx 	#$00 					; requires zero page ?
.8b37	10 05		bpl $8b3e			bpl 	_AMXCONotZero
.8b39	ad 10 04	lda $0410			lda 	NSMantissa1
.8b3c	d0 05		bne $8b43			bne 	_AMXCONext
.8b3e					_AMXCONotZero:
.8b3e	b9 4f 8b	lda $8b4f,y			lda 	ExtraOpcode+1,y 		; get new opcode
.8b41	80 c8		bra $8b0b			bra 	_AMXOutputCode 			; and assemble it
.8b43					_AMXCONext:
.8b43	c8		iny				iny
.8b44	c8		iny				iny
.8b45	c8		iny				iny
.8b46	b9 4e 8b	lda $8b4e,y			lda 	ExtraOpcode+0,y 		; end of table
.8b49	d0 dc		bne $8b27			bne 	_AMXCheckOddities
.8b4b					_AMXCOFail:
.8b4b	7a		ply				ply
.8b4c	18		clc				clc
.8b4d	60		rts				rts
.8b4e					ExtraOpcode:
>8b4e	40 6c 01					.byte $40,$6c,AM_INDABS 	; jmp
>8b51	40 7c 02					.byte $40,$7C,AM_INDABSX 	; jmp
>8b54	a2 be 78					.byte $a2,$BE,AM_ABSY 		; ldx
>8b57	a2 b6 80					.byte $a2,$B6,AM_ZEROY 		; ldx
>8b5a	82 96 80					.byte $82,$96,AM_ZEROY 		; stx
>8b5d	e2 1a 28					.byte $e2,$1a,AM_ACC 		; inc
>8b60	c2 3a 28					.byte $c2,$3a,AM_ACC 		; dec
>8b63	20 89 e0					.byte $20,$89,AM_IMMEDIATE 	; bit
>8b66	60 9c 6c					.byte $60,$9c,AM_ABS 		; stz
>8b69	60 9e 7c					.byte $60,$9e,AM_ABSX 		; stz
>8b6c	00						.byte $00

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/label.asm

.8b6d					LabelHere:
.8b6d	c8		iny				iny 								; skip .
.8b6e	a2 00		ldx #$00			ldx 	#0 							; get a term
.8b70	20 b9 a1	jsr $a1b9			jsr 	EvaluateTerm 				; get a term
.8b73	ad 00 04	lda $0400			lda 	NSStatus 					; needs to be an integer reference.
.8b76	c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.8b78	d0 24		bne $8b9e			bne 	_ALType
.8b7a	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy reference address to zTemp0
.8b7d	85 36		sta $36				sta 	zTemp0
.8b7f	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8b82	85 37		sta $37				sta 	zTemp0+1
.8b84	5a		phy				phy 								; copy address in.
.8b85	a0 01		ldy #$01			ldy 	#1
.8b87	ad 9e 04	lda $049e			lda	 	AssemblerAddress
.8b8a	92 36		sta ($36)			sta 	(zTemp0)
.8b8c	ad 9f 04	lda $049f			lda	 	AssemblerAddress+1
.8b8f	91 36		sta ($36),y			sta 	(zTemp0),y
.8b91	c8		iny				iny
.8b92	a9 00		lda #$00			lda 	#0
.8b94	91 36		sta ($36),y			sta 	(zTemp0),y
.8b96	c8		iny				iny
.8b97	91 36		sta ($36),y			sta 	(zTemp0),y
.8b99	c8		iny				iny
.8b9a	91 36		sta ($36),y			sta 	(zTemp0),y
.8b9c	7a		ply				ply
.8b9d	60		rts				rts
.8b9e					_ALType:
.8b9e	4c 4d b5	jmp $b54d			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/operands.asm

.8ba1					TypeAndCalculateOperand:
.8ba1	b1 30		lda ($30),y			lda 	(codePtr),y
.8ba3	a2 28		ldx #$28			ldx 	#AM_ACC 					; ACC if : or EOL
.8ba5	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.8ba7	f0 5b		beq $8c04			beq 	_TACOExit
.8ba9	c9 80		cmp #$80			cmp 	#KWC_EOL
.8bab	f0 57		beq $8c04			beq 	_TACOExit
.8bad	c8		iny				iny
.8bae	a2 e0		ldx #$e0			ldx 	#AM_IMMEDIATE
.8bb0	c9 23		cmp #$23			cmp 	#KWD_HASH 					; if hash, then immediate - constant.
.8bb2	f0 51		beq $8c05			beq 	CalculateOperand
.8bb4	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; if ( then check for indirection
.8bb6	f0 1f		beq $8bd7			beq 	_TACOIndirect
.8bb8	88		dey				dey 								; undo get of first character
.8bb9	20 05 8c	jsr $8c05			jsr 	CalculateOperand 			; get operand
.8bbc	b1 30		lda ($30),y			lda 	(codePtr),y
.8bbe	a2 e4		ldx #$e4			ldx 	#AM_ZEROPAGE 				; if not, try zero page (then absolute)
.8bc0	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8bc2	d0 40		bne $8c04			bne 	_TACOExit
.8bc4	c8		iny				iny
.8bc5	20 cc ae	jsr $aecc			jsr 	TACOCheckXY 				; extract X,Y or 0 (neither) from the variable.
.8bc8	a2 f4		ldx #$f4			ldx 	#AM_ZEROX 					; check for X
.8bca	c9 58		cmp #$58			cmp 	#'X'
.8bcc	f0 36		beq $8c04			beq 	_TACOExit
.8bce	a2 80		ldx #$80			ldx 	#AM_ZEROY 					; check for Y
.8bd0	c9 59		cmp #$59			cmp 	#'Y'
.8bd2	f0 30		beq $8c04			beq 	_TACOExit
.8bd4					_TACOSyntax:
.8bd4	4c 43 b5	jmp $b543			jmp 	SyntaxError
.8bd7					_TACOIndirect:
.8bd7	20 05 8c	jsr $8c05			jsr 	CalculateOperand 			; get the operand
.8bda	b1 30		lda ($30),y			lda 	(codePtr),y
.8bdc	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if , then it must be ,X)
.8bde	f0 17		beq $8bf7			beq 	_TACOIndX
.8be0	20 55 af	jsr $af55			jsr 	CheckRightBracket  			; otherwise must be ) or ),Y
.8be3	b1 30		lda ($30),y			lda 	(codePtr),y
.8be5	a2 d1		ldx #$d1			ldx 	#AM_IND
.8be7	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not comma then exit with (xx)
.8be9	d0 19		bne $8c04			bne 	_TACOExit
.8beb	c8		iny				iny
.8bec	20 cc ae	jsr $aecc			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.8bef	c9 59		cmp #$59			cmp 	#'Y' 						; check Y
.8bf1	d0 e1		bne $8bd4			bne 	_TACOSyntax
.8bf3	a2 d0		ldx #$d0			ldx 	#AM_INDY
.8bf5	80 0d		bra $8c04			bra 	_TACOExit
.8bf7					_TACOIndX:
.8bf7	c8		iny				iny
.8bf8	20 cc ae	jsr $aecc			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.8bfb	c9 58		cmp #$58			cmp 	#'X' 						; check X
.8bfd	d0 d5		bne $8bd4			bne 	_TACOSyntax
.8bff	20 55 af	jsr $af55			jsr 	CheckRightBracket			; check )
.8c02	a2 c0		ldx #$c0			ldx 	#AM_INDX
.8c04					_TACOExit:
.8c04	60		rts				rts
.8c05					CalculateOperand:
.8c05	48		pha				pha
.8c06	da		phx				phx
.8c07	a2 00		ldx #$00			ldx 	#0 							; get 16 bit integer in Slot 0
.8c09	20 8a a6	jsr $a68a			jsr 	Evaluate16BitInteger
.8c0c	fa		plx				plx
.8c0d	68		pla				pla
.8c0e	60		rts				rts
.aecc					TACOCheckXY:
.aecc	b1 30		lda ($30),y			lda 	(codePtr),y
.aece	29 c0		and #$c0			and 	#$C0 						; check it is an identifier reference.
.aed0	c9 40		cmp #$40			cmp 	#$40
.aed2	d0 21		bne $aef5			bne 	_TCXYFail
.aed4	b1 30		lda ($30),y			lda 	(codePtr),y
.aed6	18		clc				clc
.aed7	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.aed9	85 37		sta $37				sta 	zTemp0+1
.aedb	c8		iny				iny
.aedc	b1 30		lda ($30),y			lda 	(codePtr),y
.aede	c8		iny				iny
.aedf	85 36		sta $36				sta 	zTemp0
.aee1	5a		phy				phy 								; save position
.aee2	a0 02		ldy #$02			ldy 	#2 							; type is integer ?
.aee4	b1 36		lda ($36),y			lda 	(zTemp0),y
.aee6	d0 0c		bne $aef4			bne 	_TCXYPopFail
.aee8	a0 08		ldy #$08			ldy 	#8 							; get first character, should have bit 7 set as also last.
.aeea	b1 36		lda ($36),y			lda 	(zTemp0),y
.aeec	c9 d8		cmp #$d8			cmp 	#'X'+$80 					; should be X or Y
.aeee	f0 08		beq $aef8			beq 	_TCXYFound
.aef0	c9 d9		cmp #$d9			cmp 	#'Y'+$80
.aef2	f0 04		beq $aef8			beq 	_TCXYFound
.aef4					_TCXYPopFail:
.aef4	7a		ply				ply
.aef5					_TCXYFail:
.aef5	a9 00		lda #$00			lda 	#0
.aef7	60		rts				rts
.aef8					_TCXYFound:
.aef8	7a		ply				ply 								; restore position
.aef9	29 7f		and #$7f			and 	#$7F 						; throw bit 7
.aefb	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/editor.asm

.8c0f					EditProgramCode:
.8c0f	ad a8 04	lda $04a8			lda 	TokenLineNumber 			; find the line.
.8c12	ae a9 04	ldx $04a9			ldx 	TokenLineNumber+1
.8c15	20 71 a7	jsr $a771			jsr 	MemorySearch
.8c18	90 05		bcc $8c1f			bcc 	_EPCNoDelete 				; reached the end don't delete
.8c1a	d0 03		bne $8c1f			bne 	_EPCNoDelete 				; found slot but didn't match, no delete
.8c1c	20 86 b7	jsr $b786			jsr 	MemoryDeleteLine 			; delete the line
.8c1f					_EPCNoDelete:
.8c1f	ad aa 04	lda $04aa			lda 	TokenBuffer 				; buffer empty
.8c22	c9 80		cmp #$80			cmp 	#KWC_EOL
.8c24	f0 0d		beq $8c33			beq 	_EPCNoInsert
.8c26	ad a8 04	lda $04a8			lda 	TokenLineNumber 			; find the line - it cannot exist.
.8c29	ae a9 04	ldx $04a9			ldx 	TokenLineNumber+1 			; so this can't fail, it returns some point in the code.
.8c2c	20 71 a7	jsr $a771			jsr 	MemorySearch
.8c2f	18		clc				clc 								; insert at this point.
.8c30	20 bd b7	jsr $b7bd			jsr 	MemoryInsertLine 			; insert the line
.8c33					_EPCNoInsert:
.8c33	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/warmstart.asm

.8c34					WarmStart:
.8c34	a2 ff		ldx #$ff			ldx 	#$FF
.8c36	9a		txs				txs
.8c37	20 11 b7	jsr $b711			jsr 	EXTInputLine 				; get line to lineBuffer
.8c3a	20 4d ac	jsr $ac4d			jsr 	TokeniseLine 				; tokenise the line
.8c3d	ad a8 04	lda $04a8			lda 	TokenLineNumber 			; line number ?
.8c40	0d a9 04	ora $04a9			ora 	TokenLineNumber+1
.8c43	d0 17		bne $8c5c			bne 	_WSEditCode 				; if so,edit code.
.8c45	9c a7 04	stz $04a7			stz 	TokenOffset 				; zero offset, meaning it only runs one line.
.8c48	a9 a7		lda #$a7			lda 	#((TokenOffset) & $FF)
.8c4a	85 30		sta $30				sta 	codePtr
.8c4c	a9 04		lda #$04			lda 	#((TokenOffset) >> 8)
.8c4e	85 31		sta $31				sta 	codePtr+1
.8c50	ad aa 04	lda $04aa			lda 	TokenBuffer 				; nothing to run
.8c53	c9 80		cmp #$80			cmp 	#KWC_EOL
.8c55	f0 dd		beq $8c34			beq 	WarmStart
.8c57	20 de 95	jsr $95de			jsr 	RUNCodePointerLine 			; execute that line.
.8c5a	80 d8		bra $8c34			bra 	WarmStart
.8c5c					_WSEditCode:
.8c5c	20 0f 8c	jsr $8c0f			jsr 	EditProgramCode
.8c5f	20 cd 8c	jsr $8ccd			jsr 	ClearCommand
.8c62	80 d0		bra $8c34			bra 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assemble.asm

.8c64					AssembleCommand:
.8c64	a2 00		ldx #$00			ldx 	#0
.8c66	20 8a a6	jsr $a68a			jsr 	Evaluate16BitInteger 		; start address
.8c69	ad 08 04	lda $0408			lda 	NSMantissa0
.8c6c	8d 9e 04	sta $049e			sta 	AssemblerAddress
.8c6f	ad 10 04	lda $0410			lda 	NSMantissa1
.8c72	8d 9f 04	sta $049f			sta 	AssemblerAddress+1
.8c75	20 5d af	jsr $af5d			jsr 	CheckComma
.8c78	20 aa a6	jsr $a6aa			jsr 	Evaluate8BitInteger 		; options
.8c7b	ad 08 04	lda $0408			lda 	NSMantissa0
.8c7e	8d a0 04	sta $04a0			sta 	AssemblerControl
.8c81	60		rts				rts
.8c82	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assert.asm

.8c83					AssertCommand:
.8c83	a2 00		ldx #$00			ldx 	#0
.8c85	20 75 a6	jsr $a675			jsr 	EvaluateInteger 			; the assert test
.8c88	20 42 a7	jsr $a742			jsr 	NSMIsZero 					; exit if result is non zero.
.8c8b	d0 05		bne $8c92			bne 	_ACExit
.8c8d	a9 0a		lda #$0a		lda	#10
.8c8f	4c d7 9a	jmp $9ad7		jmp	ErrorHandler
.8c92					_ACExit:
.8c92	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/call.asm

.8c93					CallCommand:
.8c93	a2 00		ldx #$00			ldx 	#0
.8c95	20 8a a6	jsr $a68a			jsr 	Evaluate16BitInteger
.8c98					_CCClear
.8c98	e8		inx				inx  								; clear 1,2 and 3 (for A X Y)
.8c99	20 12 a7	jsr $a712			jsr 	NSMSetZero
.8c9c	e0 04		cpx #$04			cpx 	#4
.8c9e	d0 f8		bne $8c98			bne 	_CCClear
.8ca0	a2 00		ldx #$00			ldx 	#0 							; and keep trying
.8ca2					_CCCParam:
.8ca2	b1 30		lda ($30),y			lda 	(codePtr),y
.8ca4	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8ca6	d0 09		bne $8cb1			bne 	_CCCRun6502
.8ca8	c8		iny				iny 								; skip comma
.8ca9	e8		inx				inx	 								; next level
.8caa	20 aa a6	jsr $a6aa			jsr 	Evaluate8BitInteger 		; get A/X/Y
.8cad	e0 03		cpx #$03			cpx 	#3
.8caf	90 f1		bcc $8ca2			bcc 	_CCCParam 					; done all 3 ?
.8cb1					_CCCRun6502:
.8cb1	5a		phy				phy 								; save position
.8cb2	ad 10 04	lda $0410			lda 	NSMantissa1 				; put address in zTemp0
.8cb5	85 37		sta $37				sta 	zTemp0+1
.8cb7	ad 08 04	lda $0408			lda 	NSMantissa0
.8cba	85 36		sta $36				sta 	zTemp0
.8cbc	ad 09 04	lda $0409			lda 	NSMantissa0+1 				; get registers
.8cbf	ae 0a 04	ldx $040a			ldx 	NSMantissa0+2
.8cc2	ac 0b 04	ldy $040b			ldy 	NSMantissa0+3
.8cc5	20 ca 8c	jsr $8cca			jsr 	_CCCZTemp0 					; call zTemp0
.8cc8	7a		ply				ply 								; restore position and exit
.8cc9	60		rts				rts
.8cca					_CCCZTemp0:
.8cca	6c 36 00	jmp ($0036)			jmp 	(zTemp0)

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/clear.asm

.8ccd					ClearCommand:
.8ccd	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.8ccf	85 36		sta $36				sta 	0+zTemp0
.8cd1	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.8cd3	85 37		sta $37				sta 	1+zTemp0
.8cd5					_ClearZeroLoop:
.8cd5	b2 36		lda ($36)			lda 	(zTemp0) 					; end of variables
.8cd7	f0 24		beq $8cfd			beq 	_ClearZeroEnd
.8cd9	a0 03		ldy #$03			ldy 	#3 							; erase the variables
.8cdb	a9 00		lda #$00			lda 	#0
.8cdd					_ClearOneVariable:
.8cdd	91 36		sta ($36),y			sta 	(zTemp0),y
.8cdf	c8		iny				iny
.8ce0	c0 08		cpy #$08			cpy 	#8
.8ce2	d0 f9		bne $8cdd			bne 	_ClearOneVariable
.8ce4	a0 02		ldy #$02			ldy 	#2 							; has it been marked procedure
.8ce6	b1 36		lda ($36),y			lda 	(zTemp0),y
.8ce8	c9 18		cmp #$18			cmp 	#NSTProcedure
.8cea	d0 04		bne $8cf0			bne 	_ClearNotProcedure
.8cec	a9 04		lda #$04			lda 	#NSTInteger+NSBIsArray 		; set it back to an integer array
.8cee	91 36		sta ($36),y			sta 	(zTemp0),y
.8cf0					_ClearNotProcedure:
.8cf0	18		clc				clc 								; go to the next variable
.8cf1	b2 36		lda ($36)			lda 	(zTemp0)
.8cf3	65 36		adc $36				adc 	zTemp0
.8cf5	85 36		sta $36				sta 	zTemp0
.8cf7	90 dc		bcc $8cd5			bcc 	_ClearZeroLoop
.8cf9	e6 37		inc $37				inc 	zTemp0+1
.8cfb	80 d8		bra $8cd5			bra 	_ClearZeroLoop
.8cfd					_ClearZeroEnd:
.8cfd	18		clc				clc
.8cfe	a5 36		lda $36				lda 	zTemp0
.8d00	69 01		adc #$01			adc 	#1
.8d02	8d 8c 04	sta $048c			sta 	lowMemPtr
.8d05	a5 37		lda $37				lda 	zTemp0+1
.8d07	69 00		adc #$00			adc 	#0
.8d09	8d 8d 04	sta $048d			sta 	lowMemPtr+1
.8d0c	20 2b a8	jsr $a82b			jsr 	StackReset
.8d0f	20 a0 b8	jsr $b8a0			jsr 	StringSystemInitialise
.8d12	20 e0 99	jsr $99e0			jsr 	ProcedureScan
.8d15	20 9a 95	jsr $959a			jsr 	Command_Restore
.8d18	9c 9e 04	stz $049e			stz 	AssemblerAddress
.8d1b	9c 9f 04	stz $049f			stz 	AssemblerAddress+1
.8d1e	9c a0 04	stz $04a0			stz 	AssemblerControl
.8d21	20 ac a3	jsr $a3ac			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.8d24	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/commands/cls.asm

.8d25					ClearScreen:
.8d25	5a		phy				phy
.8d26	20 f8 b6	jsr $b6f8			jsr 	EXTClearScreen
.8d29	7a		ply				ply
.8d2a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/data.asm

.8d2b					Command_Data:
.8d2b	a9 3a		lda #$3a			lda 	#KWD_COLON 					; advance to colon/EOL
.8d2d	a2 80		ldx #$80			ldx 	#KWC_EOL
.8d2f	20 32 9a	jsr $9a32			jsr 	ScanForward
.8d32	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/dim.asm

.8d33					DimCommand:
.8d33	b1 30		lda ($30),y			lda 	(codePtr),y
.8d35	29 c0		and #$c0			and 	#$C0
.8d37	c9 40		cmp #$40			cmp 	#$40
.8d39	d0 7a		bne $8db5			bne 	_DCSyntax
.8d3b	b1 30		lda ($30),y			lda 	(codePtr),y
.8d3d	18		clc				clc
.8d3e	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8d40	85 3f		sta $3f				sta 	zaTemp+1
.8d42	c8		iny				iny
.8d43	b1 30		lda ($30),y			lda 	(codePtr),y
.8d45	c8		iny				iny
.8d46	85 3e		sta $3e				sta 	zaTemp
.8d48	5a		phy				phy
.8d49	a0 02		ldy #$02			ldy 	#2 						; read type byte
.8d4b	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8d4d	29 18		and #$18			and 	#NSBTypeMask 			; check it's not a procedure
.8d4f	c9 18		cmp #$18			cmp 	#NSTProcedure
.8d51	f0 62		beq $8db5			beq 	_DCSyntax
.8d53	b1 3e		lda ($3e),y			lda 	(zaTemp),y 				; check it's an array
.8d55	29 04		and #$04			and 	#NSBIsArray
.8d57	f0 64		beq $8dbd			beq 	_DCType
.8d59	a0 04		ldy #$04			ldy 	#4 						; check not already defined
.8d5b	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8d5d	d0 59		bne $8db8			bne 	_DCRedefine
.8d5f	7a		ply				ply
.8d60	20 c0 8d	jsr $8dc0			jsr 	_DCGetSize 				; get array size, check it.
.8d63	5a		phy				phy
.8d64	a0 05		ldy #$05			ldy 	#5 						; store in first array size slot
.8d66	91 3e		sta ($3e),y			sta 	(zaTemp),y 				; second will be zero.
.8d68	7a		ply				ply 							; is there a second (e.g. ,x)
.8d69	b1 30		lda ($30),y			lda 	(codePtr),y
.8d6b	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8d6d	d0 0a		bne $8d79			bne 	_DCOneDimension
.8d6f	c8		iny				iny 							; skip comma
.8d70	20 c0 8d	jsr $8dc0			jsr 	_DCGetSize 				; get 2nd array size
.8d73	5a		phy				phy
.8d74	a0 06		ldy #$06			ldy 	#6 						; store in 2nd array size
.8d76	91 3e		sta ($3e),y			sta 	(zaTemp),y
.8d78	7a		ply				ply
.8d79					_DCOneDimension:
.8d79	5a		phy				phy 							; save position
.8d7a	a0 05		ldy #$05			ldy 	#5 						; dimensions + 1 in AX (as zero based)
.8d7c	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8d7e	aa		tax				tax
.8d7f	c8		iny				iny
.8d80	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8d82	e8		inx				inx 							; bump them.
.8d83	1a		inc a				inc 	a
.8d84	20 df b3	jsr $b3df			jsr 	Multiply8x8 			; work out the total number of elements -> zTemp0
.8d87	a5 37		lda $37				lda 	zTemp0+1 				; don't allow more than 8192 elements whatever
.8d89	29 e0		and #$e0			and 	#$E0
.8d8b	d0 23		bne $8db0			bne 	_DCSize
.8d8d	a0 02		ldy #$02			ldy 	#2 						; get base type
.8d8f	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8d91	20 ce 8d	jsr $8dce			jsr 	ScaleByBaseType 		; scale by base type
.8d94	a5 36		lda $36				lda 	zTemp0
.8d96	a6 37		ldx $37				ldx 	zTemp0+1
.8d98	20 6e a3	jsr $a36e			jsr 	AllocateXABytes 		; allocate memory
.8d9b	a0 03		ldy #$03			ldy 	#3 						; copy into the address.
.8d9d	91 3e		sta ($3e),y			sta 	(zaTemp),y
.8d9f	c8		iny				iny
.8da0	8a		txa				txa
.8da1	91 3e		sta ($3e),y			sta 	(zaTemp),y
.8da3	7a		ply				ply 							; get position back
.8da4	20 55 af	jsr $af55			jsr 	CheckRightBracket 		; check )
.8da7	b1 30		lda ($30),y			lda 	(codePtr),y
.8da9	c8		iny				iny 							; consume in case
.8daa	c9 2c		cmp #$2c			cmp 	#KWD_COMMA		 		; if so do another DIM.
.8dac	f0 85		beq $8d33			beq 	DimCommand
.8dae	88		dey				dey 							; undo consume
.8daf	60		rts				rts
.8db0					_DCSize:
.8db0	a9 16		lda #$16		lda	#22
.8db2	4c d7 9a	jmp $9ad7		jmp	ErrorHandler
.8db5					_DCSyntax:
.8db5	4c 43 b5	jmp $b543			jmp 	SyntaxError
.8db8					_DCRedefine:
.8db8	a9 15		lda #$15		lda	#21
.8dba	4c d7 9a	jmp $9ad7		jmp	ErrorHandler
.8dbd					_DCType:
.8dbd	4c 4d b5	jmp $b54d			jmp 	TypeError
.8dc0					_DCGetSize:
.8dc0	a2 00		ldx #$00			ldx 	#0 						; get first index.
.8dc2	20 aa a6	jsr $a6aa			jsr 	Evaluate8BitInteger 	; get array dimension
.8dc5	c9 00		cmp #$00			cmp 	#0 						; must be 1-254
.8dc7	f0 e7		beq $8db0			beq 	_DCSize
.8dc9	c9 fe		cmp #$fe			cmp 	#254
.8dcb	f0 e3		beq $8db0			beq 	_DCSize
.8dcd	60		rts				rts
.8dce					ScaleByBaseType:
.8dce	29 10		and #$10			and 	#NSBIsString 			; is it string
.8dd0	d0 19		bne $8deb			bne 	_SBBTString
.8dd2	a5 37		lda $37				lda 	zTemp0+1 				; push value on stack
.8dd4	48		pha				pha
.8dd5	a5 36		lda $36				lda 	zTemp0
.8dd7	48		pha				pha
.8dd8	06 36		asl $36				asl 	zTemp0 					; x 2
.8dda	26 37		rol $37				rol 	zTemp0+1
.8ddc	06 36		asl $36				asl 	zTemp0 					; x 4
.8dde	26 37		rol $37				rol 	zTemp0+1
.8de0	68		pla				pla 							; add stacked value = x 5
.8de1	65 36		adc $36				adc 	zTemp0
.8de3	85 36		sta $36				sta 	zTemp0
.8de5	68		pla				pla
.8de6	65 37		adc $37				adc 	zTemp0+1
.8de8	85 37		sta $37				sta 	zTemp0+1
.8dea	60		rts				rts
.8deb					_SBBTString:
.8deb	06 36		asl $36				asl 	zTemp0
.8ded	26 37		rol $37				rol 	zTemp0+1
.8def	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/end.asm

.8df0					EndCommand:
.8df0	4c 34 8c	jmp $8c34			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/commands/event.asm

.8df3					UnaryEvent:
.8df3	fa		plx				plx
.8df4	20 1f 98	jsr $981f			jsr 	TimerToStackX 				; timer in +0
.8df7	e8		inx				inx  								; put reference into +1
.8df8	20 b9 a1	jsr $a1b9			jsr 	EvaluateTerm
.8dfb	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if is integer reference
.8dfe	c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.8e00	d0 57		bne $8e59			bne 	_UEType
.8e02	e8		inx				inx 								; put the step in +2
.8e03	20 5d af	jsr $af5d			jsr 	CheckComma
.8e06	20 8a a6	jsr $a68a			jsr 	Evaluate16BitInteger
.8e09	20 55 af	jsr $af55			jsr 	CheckRightBracket
.8e0c	ca		dex				dex
.8e0d	ca		dex				dex
.8e0e	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; copy reference to zTemp0
.8e11	85 36		sta $36				sta 	zTemp0
.8e13	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.8e16	85 37		sta $37				sta 	zTemp0+1
.8e18	5a		phy				phy
.8e19	a0 03		ldy #$03			ldy 	#3 							; check bit 7 of last bit, the packed sign bit
.8e1b	b1 36		lda ($36),y			lda 	(zTemp0),y
.8e1d	30 36		bmi $8e55			bmi 	_UEFalse 					; exit if signed.
.8e1f	a0 00		ldy #$00			ldy 	#0 							; has it timed out (24 bit)
.8e21	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.8e24	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.8e26	c8		iny				iny
.8e27	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8e2a	f1 36		sbc ($36),y			sbc		(zTemp0),y
.8e2c	c8		iny				iny
.8e2d	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.8e30	f1 36		sbc ($36),y			sbc		(zTemp0),y
.8e32	90 21		bcc $8e55			bcc 	_UEFalse 					; no, return FALSE.
.8e34	18		clc				clc
.8e35	a0 00		ldy #$00			ldy 	#0 							; work out new value as timer() + step
.8e37	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.8e3a	7d 0a 04	adc $040a,x			adc 	NSMantissa0+2,x
.8e3d	91 36		sta ($36),y			sta 	(zTemp0),y
.8e3f	c8		iny				iny
.8e40	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8e43	7d 12 04	adc $0412,x			adc 	NSMantissa1+2,x
.8e46	91 36		sta ($36),y			sta 	(zTemp0),y
.8e48	c8		iny				iny
.8e49	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.8e4c	7d 1a 04	adc $041a,x			adc 	NSMantissa2+2,x
.8e4f	91 36		sta ($36),y			sta 	(zTemp0),y
.8e51	7a		ply				ply
.8e52	4c 44 9b	jmp $9b44			jmp 	ReturnTrue
.8e55					_UEFalse:
.8e55	7a		ply				ply 								; restore Y
.8e56	4c 50 9b	jmp $9b50			jmp 	ReturnFalse 				; and return False
.8e59					_UEType:
.8e59	4c 4d b5	jmp $b54d			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/for.asm

.8e5c					ForCommand:
.8e5c	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; allocate 18 bytes on the return stack.
.8e5e	20 c6 a7	jsr $a7c6			jsr 	StackOpen
.8e61	a2 00		ldx #$00			ldx 	#0
.8e63	20 b9 a1	jsr $a1b9			jsr 	EvaluateTerm
.8e66	bd 00 04	lda $0400,x			lda 	NSStatus,x
.8e69	c9 20		cmp #$20			cmp 	#NSBIsReference+NSTInteger 	; do we have an integer 4 byte reference.
.8e6b	d0 49		bne $8eb6			bne		_FCError
.8e6d	a9 3d		lda #$3d			lda 	#KWD_EQUAL 					; =
.8e6f	20 65 af	jsr $af65			jsr 	CheckNextA
.8e72	e8		inx				inx
.8e73	20 75 a6	jsr $a675			jsr 	EvaluateInteger 			; <from> in +1
.8e76	b1 30		lda ($30),y			lda 	(codePtr),y
.8e78	c8		iny				iny 								; consume it
.8e79	48		pha				pha 								; save on stack for later
.8e7a	c9 b3		cmp #$b3			cmp 	#KWD_DOWNTO
.8e7c	f0 04		beq $8e82			beq 	_FCNoSyntax
.8e7e	c9 cb		cmp #$cb			cmp 	#KWD_TO
.8e80	d0 37		bne $8eb9			bne 	_FCSyntaxError
.8e82					_FCNoSyntax:
.8e82	e8		inx				inx
.8e83	20 75 a6	jsr $a675			jsr 	EvaluateInteger
.8e86	20 0a a8	jsr $a80a			jsr 	STKSaveCodePosition 		; save loop back position
.8e89	68		pla				pla 								; restore DOWNTO or TO
.8e8a	5a		phy				phy 								; save Y on the stack
.8e8b	49 b3		eor #$b3			eor 	#KWD_DOWNTO 				; 0 if DOWNTO, #0 if TO
.8e8d	f0 02		beq $8e91			beq 	_FCNotDownTo
.8e8f	a9 02		lda #$02			lda 	#2
.8e91					_FCNotDownTo:
.8e91	3a		dec a				dec 	a 							; 255 if DOWNTO, 1 if TO
.8e92	a0 10		ldy #$10			ldy 	#16
.8e94	91 34		sta ($34),y			sta 	(basicStack),y 				; copy that out to the Basic Stack.
.8e96	a0 06		ldy #$06			ldy 	#6
.8e98	ad 08 04	lda $0408			lda 	NSMantissa0
.8e9b	91 34		sta ($34),y			sta 	(basicStack),y
.8e9d	ad 10 04	lda $0410			lda 	NSMantissa1
.8ea0	c8		iny				iny
.8ea1	91 34		sta ($34),y			sta 	(basicStack),y
.8ea3	a0 08		ldy #$08			ldy 	#8 							; set initial index value
.8ea5	a2 01		ldx #$01			ldx 	#1
.8ea7	20 bc 8e	jsr $8ebc			jsr 	FCIntegerToStack
.8eaa	a0 0c		ldy #$0c			ldy 	#12 						; set the terminal value
.8eac	a2 02		ldx #$02			ldx 	#2
.8eae	20 bc 8e	jsr $8ebc			jsr 	FCIntegerToStack
.8eb1	20 dc 8e	jsr $8edc			jsr 	CopyIndexToReference
.8eb4	7a		ply				ply 								; restore position
.8eb5	60		rts				rts
.8eb6					_FCError:
.8eb6	4c 4d b5	jmp $b54d			jmp 	TypeError
.8eb9					_FCSyntaxError:
.8eb9	4c 43 b5	jmp $b543			jmp 	SyntaxError
.8ebc					FCIntegerToStack:
.8ebc	3c 00 04	bit $0400,x			bit 	NSStatus,x 					; is the value negative
.8ebf	10 03		bpl $8ec4			bpl	 	_FCNotNegative
.8ec1	20 c7 a6	jsr $a6c7			jsr 	NSMNegateMantissa 			; if so 2's complement the mantissa
.8ec4					_FCNotNegative:
.8ec4	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy out to the basic stack
.8ec7	91 34		sta ($34),y			sta 	(basicStack),y
.8ec9	c8		iny				iny
.8eca	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8ecd	91 34		sta ($34),y			sta 	(basicStack),y
.8ecf	c8		iny				iny
.8ed0	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.8ed3	91 34		sta ($34),y			sta 	(basicStack),y
.8ed5	c8		iny				iny
.8ed6	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.8ed9	91 34		sta ($34),y			sta 	(basicStack),y
.8edb	60		rts				rts
.8edc					CopyIndexToReference:
.8edc	5a		phy				phy
.8edd	a0 06		ldy #$06			ldy 	#6 							; copy address-8 to write to zTemp0
.8edf	38		sec				sec 								; (because we copy from offset 8)
.8ee0	b1 34		lda ($34),y			lda 	(basicStack),y
.8ee2	e9 08		sbc #$08			sbc 	#8
.8ee4	85 36		sta $36				sta 	zTemp0
.8ee6	c8		iny				iny
.8ee7	b1 34		lda ($34),y			lda 	(basicStack),y
.8ee9	e9 00		sbc #$00			sbc 	#0
.8eeb	85 37		sta $37				sta 	zTemp0+1
.8eed	a2 04		ldx #$04			ldx 	#4 							; this is the copy counter/
.8eef	a0 0b		ldy #$0b			ldy 	#8+3 		 				; the MSB of the mantissa
.8ef1	b1 34		lda ($34),y			lda 	(basicStack),y
.8ef3	0a		asl a				asl 	a 							; into carry
.8ef4	a0 08		ldy #$08			ldy 	#8 							; where to copy from.
.8ef6	90 14		bcc $8f0c			bcc 	_CITRNormal
.8ef8	38		sec				sec
.8ef9					_CITRNegative:
.8ef9	a9 00		lda #$00			lda 	#0
.8efb	f1 34		sbc ($34),y			sbc 	(basicStack),y
.8efd	91 36		sta ($36),y			sta 	(zTemp0),y
.8eff	c8		iny				iny
.8f00	ca		dex				dex
.8f01	d0 f6		bne $8ef9			bne 	_CITRNegative
.8f03	88		dey				dey 								; look at MSB of mantissa
.8f04	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set the MSB as negative packed.
.8f06	09 80		ora #$80			ora 	#$80
.8f08	91 36		sta ($36),y			sta 	(zTemp0),y
.8f0a	7a		ply				ply
.8f0b	60		rts				rts
.8f0c					_CITRNormal:
.8f0c	b1 34		lda ($34),y			lda 	(basicStack),y 				; copy without negation.
.8f0e	91 36		sta ($36),y			sta 	(zTemp0),y
.8f10	c8		iny				iny
.8f11	ca		dex				dex
.8f12	d0 f8		bne $8f0c			bne 	_CITRNormal
.8f14	7a		ply				ply 								; and exit.
.8f15	60		rts				rts
.8f16					NextCommand:
.8f16	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; check FOR is TOS
.8f18	a2 11		ldx #$11			ldx 	#ERRID_FOR 					; this error
.8f1a	20 f2 a7	jsr $a7f2			jsr 	StackCheckFrame
.8f1d	5a		phy				phy
.8f1e	a0 10		ldy #$10			ldy 	#16 						; get the step count
.8f20	b1 34		lda ($34),y			lda 	(basicStack),y
.8f22	85 36		sta $36				sta 	zTemp0 						; this is the sign extend
.8f24	30 02		bmi $8f28			bmi 	_NCStepNeg
.8f26	64 36		stz $36				stz 	zTemp0 						; which is 0 or 255
.8f28					_NCStepNeg:
.8f28	a0 08		ldy #$08			ldy 	#8 							; offset to bump
.8f2a	a2 04		ldx #$04			ldx 	#4 							; count to bump
.8f2c	18		clc				clc
.8f2d					_NCBump:
.8f2d	71 34		adc ($34),y			adc 	(basicStack),y 				; add it
.8f2f	91 34		sta ($34),y			sta 	(basicStack),y
.8f31	a5 36		lda $36				lda 	zTemp0 						; get sign extend for next time.
.8f33	c8		iny				iny 								; next byte
.8f34	ca		dex				dex 								; do four times
.8f35	d0 f6		bne $8f2d			bne 	_NCBump
.8f37	20 dc 8e	jsr $8edc			jsr		CopyIndexToReference		; copy it to the reference variable.
.8f3a	a0 10		ldy #$10			ldy 	#16 						; get step count again
.8f3c	b1 34		lda ($34),y			lda 	(basicStack),y
.8f3e	0a		asl a				asl 	a 							; sign bit to carry
.8f3f	a9 0c		lda #$0c			lda 	#12 						; offset of LHS = terminal offset
.8f41	85 38		sta $38				sta 	zTemp1
.8f43	90 02		bcc $8f47			bcc 	_NCCompRev 					; use if step is +ve
.8f45	a9 08		lda #$08			lda 	#8 							; now the LHS = index value
.8f47					_NCCompRev:
.8f47	85 38		sta $38				sta 	zTemp1 						; so zTemp0 is the index for LHS
.8f49	49 04		eor #$04			eor 	#(8^12) 					; and zTemp0+1 is the index for RHS
.8f4b	85 39		sta $39				sta 	zTemp1+1
.8f4d	a2 04		ldx #$04			ldx 	#4 							; bytes to compare
.8f4f	38		sec				sec
.8f50					_NCCompare:
.8f50	a4 38		ldy $38				ldy 	zTemp1 						; do compare using the two indices
.8f52	b1 34		lda ($34),y			lda 	(basicStack),y
.8f54	a4 39		ldy $39				ldy 	zTemp1+1
.8f56	f1 34		sbc ($34),y			sbc 	(basicStack),y
.8f58	e6 38		inc $38				inc 	zTemp1 						; bump the indices (inc,dex do not change C or V)
.8f5a	e6 39		inc $39				inc 	zTemp1+1
.8f5c	ca		dex				dex 								; do it 4 times.
.8f5d	d0 f1		bne $8f50			bne 	_NCCompare
.8f5f	50 02		bvc $8f63			bvc 	_NCNoOverflow 				; convert to signed comparison
.8f61	49 80		eor #$80			eor 	#$80
.8f63					_NCNoOverflow:
.8f63	7a		ply				ply 								; restore Y position
.8f64	0a		asl a				asl 	a 							; is bit 7 set.
.8f65	90 04		bcc $8f6b			bcc 	_NCLoopback 				; if no , >= so loop back
.8f67	20 e4 a7	jsr $a7e4			jsr 	StackClose 					; exit the loop
.8f6a	60		rts				rts
.8f6b					_NCLoopBack:
.8f6b	20 1b a8	jsr $a81b			jsr 	STKLoadCodePosition 		; loop back
.8f6e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/commands/gcommand.asm

.8f6f					RectangleCommand:
.8f6f	a9 24		lda #$24			lda 	#GCMD_FrameRect				; frame rectangle
.8f71	80 02		bra $8f75			bra 	ShapeDrawCmd
.8f73					CircleCommand:
.8f73	a9 28		lda #$28			lda 	#GCMD_FrameCircle 				; framed circle
.8f75					ShapeDrawCmd:
.8f75	20 03 90	jsr $9003			jsr 	RunGraphicsCommand
.8f78					ShapeDraw:
.8f78	0d e4 06	ora $06e4			ora 	gxFillSolid  				; adjust AXY for solid fill.
.8f7b	4c f7 8f	jmp $8ff7			jmp 	ExecuteGraphicCommand	 	; and complete
.8f7e					SpriteCommand:
.8f7e	a2 00		ldx #$00			ldx 	#0
.8f80	20 aa a6	jsr $a6aa			jsr 	Evaluate8BitInteger 		; get image number.
.8f83	5a		phy				phy
.8f84	a9 0e		lda #$0e			lda 	#GCMD_SpriteUse 			; use that image.
.8f86	ae 08 04	ldx $0408			ldx 	NSMantissa0
.8f89	e0 40		cpx #$40			cpx 	#64 						; 0-63 only
.8f8b	b0 0d		bcs $8f9a			bcs 	_SCRange
.8f8d	a0 ff		ldy #$ff			ldy 	#255
.8f8f	20 85 80	jsr $8085			jsr 	GXGraphicDraw
.8f92	a9 32		lda #$32			lda 	#GCMD_SpriteMove
.8f94	7a		ply				ply
.8f95	20 03 90	jsr $9003			jsr 	RunGraphicsCommand
.8f98	80 5d		bra $8ff7			bra 	ExecuteGraphicCommand
.8f9a					_SCRange:
.8f9a	4c 48 b5	jmp $b548			jmp 	RangeError
.8f9d					ImageCommand:
.8f9d	a2 00		ldx #$00			ldx 	#0
.8f9f	20 aa a6	jsr $a6aa			jsr 	Evaluate8BitInteger 		; get image number.
.8fa2	20 03 90	jsr $9003			jsr 	RunGraphicsCommand
.8fa5					ImageRunDraw:
.8fa5	09 20		ora #$20			ora 	#GCMD_Move					; move cursor
.8fa7	20 85 80	jsr $8085			jsr 	GXGraphicDraw
.8faa	ad ea 06	lda $06ea			lda 	gxDrawScale
.8fad	0a		asl a				asl 	a
.8fae	0a		asl a				asl 	a
.8faf	0a		asl a				asl 	a
.8fb0	a8		tay				tay
.8fb1	a9 0c		lda #$0c			lda 	#GCMD_DrawSprite 			; image drawing
.8fb3	ae 08 04	ldx $0408			ldx 	NSMantissa0
.8fb6	20 85 80	jsr $8085			jsr 	GXGraphicDraw
.8fb9	60		rts				rts
.8fba					TextCommand:
.8fba	a2 00		ldx #$00			ldx 	#0
.8fbc	20 5d a6	jsr $a65d			jsr 	EvaluateString 				; get text
.8fbf	20 03 90	jsr $9003			jsr 	RunGraphicsCommand
.8fc2					TextRunDraw:
.8fc2	09 20		ora #$20			ora 	#GCMD_Move 					; move cursor
.8fc4	20 85 80	jsr $8085			jsr 	GXGraphicDraw
.8fc7	a0 00		ldy #$00			ldy 	#0
.8fc9					_IRDLoop:
.8fc9	ad 10 04	lda $0410			lda 	NSMantissa1 				; access character
.8fcc	85 37		sta $37				sta 	zTemp0+1
.8fce	ad 08 04	lda $0408			lda 	NSMantissa0
.8fd1	85 36		sta $36				sta 	zTemp0
.8fd3	b1 36		lda ($36),y			lda 	(zTemp0),y
.8fd5	f0 13		beq $8fea			beq 	_IRDExit
.8fd7	5a		phy				phy									; save string pos
.8fd8	48		pha				pha 								; save char
.8fd9	ad ea 06	lda $06ea			lda 	gxDrawScale 				; get scale
.8fdc	0a		asl a				asl 	a
.8fdd	0a		asl a				asl 	a
.8fde	0a		asl a				asl 	a
.8fdf	a8		tay				tay
.8fe0	a9 0a		lda #$0a			lda 	#GCMD_DrawFont 				; char drawing
.8fe2	fa		plx				plx 								; char to draw
.8fe3	20 85 80	jsr $8085			jsr 	GXGraphicDraw
.8fe6	7a		ply				ply 								; restore string pos
.8fe7	c8		iny				iny
.8fe8	90 df		bcc $8fc9			bcc 	_IRDLoop 					; go back if no error.
.8fea					_IRDExit:
.8fea	60		rts				rts
.8feb					PlotCommand:
.8feb	a9 30		lda #$30			lda 	#GCMD_Plot 					; command ID to use
.8fed	20 03 90	jsr $9003			jsr 	RunGraphicsCommand
.8ff0	80 05		bra $8ff7			bra 	ExecuteGraphicCommand
.8ff2					LineCommand:
.8ff2	a9 22		lda #$22			lda 	#GCMD_Line 						; command ID to use
.8ff4	20 03 90	jsr $9003			jsr 	RunGraphicsCommand
.8ff7					ExecuteGraphicCommand:
.8ff7	0d e3 06	ora $06e3			ora 	gxCommandID 				; make a full command
.8ffa	20 85 80	jsr $8085			jsr 	GXGraphicDraw 				; draw it and exit
.8ffd	b0 01		bcs $9000			bcs 	_EGCError
.8fff	60		rts				rts
.9000					_EGCError:
.9000	4c 43 b5	jmp $b543			jmp 	SyntaxError
.9003					RunGraphicsCommand:
.9003	8d e3 06	sta $06e3			sta 	gxCommandID					; save TODO graphics command.
.9006	68		pla				pla 								; pop handler address
.9007	fa		plx				plx
.9008	1a		inc a				inc 	a
.9009	d0 01		bne $900c			bne 	_RGINoCarry
.900b	e8		inx				inx
.900c					_RGINoCarry:
.900c	8d e8 06	sta $06e8			sta 	GXHandler
.900f	8e e9 06	stx $06e9			stx 	GXHandler+1
.9012					_RGICommandLoop:
.9012	b1 30		lda ($30),y			lda 	(codePtr),y
.9014	c8		iny				iny
.9015	c9 cb		cmp #$cb			cmp 	#KWD_TO						; is it TO x,y
.9017	f0 53		beq $906c			beq 	_RGI_To
.9019	c9 b9		cmp #$b9			cmp 	#KWD_HERE 					; do it here.
.901b	f0 55		beq $9072			beq 	_RGI_Here
.901d	c9 80		cmp #$80			cmp 	#KWC_EOL 					; EOL or : , exit
.901f	f0 3d		beq $905e			beq 	_RGI_Exit
.9021	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.9023	f0 39		beq $905e			beq 	_RGI_Exit
.9025	c9 c0		cmp #$c0			cmp 	#KWD_OUTLINE 				; solid or outline
.9027	f0 3e		beq $9067			beq 	_RGI_Frame
.9029	c9 c8		cmp #$c8			cmp 	#KWD_SOLID
.902b	f0 33		beq $9060			beq 	_RGI_Solid
.902d	c9 aa		cmp #$aa			cmp 	#KWD_BY 					; by offset
.902f	f0 4b		beq $907c			beq 	_RGI_By
.9031	c9 b5		cmp #$b5			cmp 	#KWD_FROM 					; from
.9033	f0 17		beq $904c			beq 	_RGI_Move2
.9035	c9 b2		cmp #$b2			cmp 	#KWD_DIM 					; dim (set scale)
.9037	f0 65		beq $909e			beq 	_RGI_Dim
.9039	c9 b0		cmp #$b0			cmp 	#KWD_COLOUR 				; colour or Color
.903b	f0 78		beq $90b5			beq 	_RGI_Colour
.903d	c9 af		cmp #$af			cmp 	#KWD_COLOR
.903f	f0 74		beq $90b5			beq 	_RGI_Colour
.9041	ae e3 06	ldx $06e3			ldx 	gxCommandID
.9044	e0 32		cpx #$32			cpx 	#GCMD_SpriteMove 			; if not sprite
.9046	d0 03		bne $904b			bne 	_RGI_Move 					; move
.9048	4c df 90	jmp $90df			jmp		_RGI_SpriteInstructions
.904b					_RGI_Move:
.904b	88		dey				dey 								; unpick get.
.904c					_RGI_Move2:
.904c	20 05 91	jsr $9105			jsr 	GCGetCoordinatePair 		; move to here
.904f	20 2c 91	jsr $912c			jsr 	GCCopyPairToStore 			; save
.9052	5a		phy				phy
.9053	20 22 91	jsr $9122			jsr 	GCLoadAXY 					; load in
.9056	09 20		ora #$20			ora 	#GCMD_Move 					; move there
.9058	20 85 80	jsr $8085			jsr 	GXGraphicDraw
.905b	7a		ply				ply
.905c	80 b4		bra $9012			bra 	_RGICommandLoop 			; and go round
.905e					_RGI_Exit:
.905e	88		dey				dey 								; unpick : / EOL
.905f	60		rts				rts
.9060					_RGI_Solid:
.9060	a9 02		lda #$02			lda 	#2
.9062	8d e4 06	sta $06e4			sta 	gxFillSolid
.9065	80 ab		bra $9012			bra 	_RGICommandLoop
.9067					_RGI_Frame:
.9067	9c e4 06	stz $06e4			stz 	gxFillSolid
.906a	80 a6		bra $9012			bra 	_RGICommandLoop
.906c					_RGI_To:
.906c	20 05 91	jsr $9105			jsr 	GCGetCoordinatePair 		; get coordinate pair into slot #1,#2
.906f	20 2c 91	jsr $912c			jsr 	GCCopyPairToStore
.9072					_RGI_Here:
.9072	5a		phy				phy
.9073	20 22 91	jsr $9122			jsr 	GCLoadAXY 					; load it into AXY
.9076	20 dc 90	jsr $90dc			jsr 	_RGICallHandler 			; go do whatever it is.
.9079	7a		ply				ply
.907a	80 96		bra $9012			bra 	_RGICommandLoop 			; and go round
.907c					_RGI_By:
.907c	20 12 91	jsr $9112			jsr 	GCSignedCoordinatePair 		; get coordinate pair into slot #1,#2
.907f	18		clc				clc
.9080	ad 09 04	lda $0409			lda 	NSMantissa0+1 				; copy it into space.
.9083	6d e5 06	adc $06e5			adc 	gxxPos
.9086	8d e5 06	sta $06e5			sta 	gxXPos
.9089	ad 11 04	lda $0411			lda 	NSMantissa1+1
.908c	6d e6 06	adc $06e6			adc 	gxxPos+1
.908f	8d e6 06	sta $06e6			sta 	gxXPos+1
.9092	ad 0a 04	lda $040a			lda 	NSMantissa0+2
.9095	18		clc				clc
.9096	6d e7 06	adc $06e7			adc 	gxYPos
.9099	8d e7 06	sta $06e7			sta 	gxYPos
.909c	80 d4		bra $9072			bra 	_RGI_Here
.909e					_RGI_Dim:
.909e	a2 01		ldx #$01			ldx	 	#1
.90a0	20 aa a6	jsr $a6aa			jsr 	Evaluate8BitInteger
.90a3	ad 09 04	lda $0409			lda 	NSMantissa0+1
.90a6	c9 00		cmp #$00			cmp 	#0
.90a8	f0 2f		beq $90d9			beq 	_RGIRange
.90aa	c9 09		cmp #$09			cmp 	#8+1
.90ac	b0 2b		bcs $90d9			bcs		_RGIRange
.90ae	3a		dec a				dec 	a
.90af	8d ea 06	sta $06ea			sta 	gxDrawScale
.90b2	4c 12 90	jmp $9012			jmp 	_RGICommandLoop
.90b5					_RGI_Colour:
.90b5	a2 01		ldx #$01			ldx 	#1 							; colour
.90b7	20 aa a6	jsr $a6aa			jsr 	Evaluate8BitInteger
.90ba	a2 02		ldx #$02			ldx 	#2 							; default zero for 2nd parameter
.90bc	20 12 a7	jsr $a712			jsr 	NSMSetZero
.90bf	b1 30		lda ($30),y			lda 	(codePtr),y
.90c1	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; check , => mode.
.90c3	d0 04		bne $90c9			bne 	_RGICDefaultMode
.90c5	c8		iny				iny
.90c6	20 aa a6	jsr $a6aa			jsr 	Evaluate8BitInteger
.90c9					_RGICDefaultMode:
.90c9	5a		phy				phy
.90ca	a9 08		lda #$08			lda 	#GCMD_Colour 				; set colour.
.90cc	ae 09 04	ldx $0409			ldx 	NSMantissa0+1
.90cf	ac 0a 04	ldy $040a			ldy 	NSMantissa0+2
.90d2	20 85 80	jsr $8085			jsr 	GXGraphicDraw
.90d5	7a		ply				ply
.90d6	4c 12 90	jmp $9012			jmp 	_RGICommandLoop 			; and go round
.90d9					_RGIRange:
.90d9	4c 48 b5	jmp $b548			jmp 	RangeError
.90dc					_RGICallHandler:
.90dc	6c e8 06	jmp ($06e8)			jmp 	(GXHandler)
.90df					_RGI_SpriteInstructions:
.90df	c9 be		cmp #$be			cmp 	#KWD_OFF
.90e1	f0 07		beq $90ea			beq 	_RGISpriteOff
.90e3	c9 ba		cmp #$ba			cmp 	#KWD_IMAGE
.90e5	f0 13		beq $90fa			beq 	_RGISetImage
.90e7	4c 4b 90	jmp $904b			jmp 	_RGI_Move
.90ea					_RGISpriteOff:
.90ea	5a		phy				phy
.90eb	a0 01		ldy #$01			ldy 	#1
.90ed	a2 00		ldx #$00			ldx 	#0
.90ef					_RGIDoCommandLoop:
.90ef	a9 10		lda #$10			lda 	#GCMD_SpriteImage
.90f1	20 85 80	jsr $8085			jsr 	GXGraphicDraw
.90f4	7a		ply				ply
.90f5	b0 e2		bcs $90d9			bcs 	_RGIRange
.90f7	4c 12 90	jmp $9012			jmp 	_RGICommandLoop
.90fa					_RGISetImage:
.90fa	a2 01		ldx #$01			ldx 	#1
.90fc	20 aa a6	jsr $a6aa			jsr 	Evaluate8BitInteger
.90ff	5a		phy				phy
.9100	aa		tax				tax
.9101	a0 00		ldy #$00			ldy 	#0
.9103	80 ea		bra $90ef			bra 	_RGIDoCommandLoop
.9105					GCGetCoordinatePair:
.9105	a2 01		ldx #$01			ldx 	#1
.9107	20 8a a6	jsr $a68a			jsr 	Evaluate16BitInteger
.910a	20 5d af	jsr $af5d			jsr 	CheckComma
.910d	e8		inx				inx
.910e	20 8a a6	jsr $a68a			jsr 	Evaluate16BitInteger
.9111	60		rts				rts
.9112					GCSignedCoordinatePair:
.9112	a2 01		ldx #$01			ldx 	#1
.9114	20 96 a6	jsr $a696			jsr 	Evaluate16BitIntegerSigned
.9117	20 5d af	jsr $af5d			jsr 	CheckComma
.911a	e8		inx				inx
.911b	20 96 a6	jsr $a696			jsr 	Evaluate16BitIntegerSigned
.911e	60		rts				rts
.911f					_GCCPRange:
.911f	4c 48 b5	jmp $b548			jmp 	RangeError
.9122					GCLoadAXY:
.9122	ad e6 06	lda $06e6			lda 	gxXPos+1
.9125	ae e5 06	ldx $06e5			ldx 	gxXPos
.9128	ac e7 06	ldy $06e7			ldy 	gxYPos
.912b	60		rts				rts
.912c					GCCopyPairToStore:
.912c	ad 09 04	lda $0409			lda 	NSMantissa0+1 				; copy it into space.
.912f	8d e5 06	sta $06e5			sta 	gxXPos
.9132	ad 11 04	lda $0411			lda 	NSMantissa1+1
.9135	8d e6 06	sta $06e6			sta 	gxXPos+1
.9138	ad 0a 04	lda $040a			lda 	NSMantissa0+2
.913b	8d e7 06	sta $06e7			sta 	gxYPos
.913e	60		rts				rts
.06e3					gxCommandID:
>06e3							.fill 	1
.06e4					gxFillSolid:
>06e4							.fill 	1
.06e5					gxXPos:
>06e5							.fill 	2
.06e7					gxYPos:
>06e7							.fill 	1
.06e8					gxHandler:
>06e8							.fill 	2
.06ea					gxDrawScale:
>06ea							.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/commands/gcontrol.asm

.913f					BitmapCtrl:
.913f	b1 30		lda ($30),y			lda 	(codePtr),y
.9141	c8		iny				iny
.9142	a2 01		ldx #$01			ldx 	#1
.9144	c9 bf		cmp #$bf			cmp 	#KWD_ON
.9146	f0 11		beq $9159			beq 	BitmapSwitch
.9148	ca		dex				dex
.9149	c9 be		cmp #$be			cmp 	#KWD_OFF
.914b	f0 0c		beq $9159			beq 	BitmapSwitch
.914d	20 aa a6	jsr $a6aa			jsr 	Evaluate8BitInteger 		; get the colour
.9150	5a		phy				phy
.9151	aa		tax				tax
.9152	a9 06		lda #$06			lda 	#GCMD_Clear					; clear to that colour
.9154	20 85 80	jsr $8085			jsr 	GXGraphicDraw
.9157	7a		ply				ply
.9158	60		rts				rts
.9159					BitmapSwitch:
.9159	5a		phy				phy
.915a	a0 00		ldy #$00			ldy 	#0 							; gfx 1,on/off,0
.915c	a9 02		lda #$02			lda 	#GCMD_BitmapCtl
.915e	20 85 80	jsr $8085			jsr 	GXGraphicDraw
.9161	a9 08		lda #$08			lda 	#GCMD_Colour				; set colour to $FF
.9163	a0 00		ldy #$00			ldy 	#0
.9165	a2 ff		ldx #$ff			ldx 	#$FF
.9167	20 85 80	jsr $8085			jsr 	GXGraphicDraw
.916a	9c e4 06	stz $06e4			stz 	gxFillSolid
.916d	9c e5 06	stz $06e5			stz 	gxXPos
.9170	9c e6 06	stz $06e6			stz 	gxXPos+1
.9173	9c e7 06	stz $06e7			stz 	gxYPos
.9176	9c ea 06	stz $06ea			stz 	gxDrawScale
.9179	a9 20		lda #$20			lda 	#GCMD_Move 						; home cursor
.917b	a2 00		ldx #$00			ldx 	#0
.917d	a0 00		ldy #$00			ldy 	#0
.917f	20 85 80	jsr $8085			jsr 	GXGraphicDraw
.9182	7a		ply				ply
.9183	60		rts				rts
.9184					SpritesCtrl:
.9184	b1 30		lda ($30),y			lda 	(codePtr),y
.9186	c8		iny				iny
.9187	a2 01		ldx #$01			ldx 	#1
.9189	c9 bf		cmp #$bf			cmp 	#KWD_ON
.918b	f0 08		beq $9195			beq 	SpriteSwitch
.918d	ca		dex				dex
.918e	c9 be		cmp #$be			cmp 	#KWD_OFF
.9190	f0 03		beq $9195			beq 	SpriteSwitch
.9192	4c 43 b5	jmp $b543			jmp 	SyntaxError
.9195					SpriteSwitch:
.9195	5a		phy				phy
.9196	a0 00		ldy #$00			ldy 	#0 							; gfx 2,on/off,0
.9198	a9 04		lda #$04			lda 	#GCMD_SpriteCtl
.919a	20 85 80	jsr $8085			jsr 	GXGraphicDraw
.919d	7a		ply				ply
.919e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/commands/gfx.asm

.919f					GfxCommand:
.919f	a2 00		ldx #$00			ldx 	#0
.91a1	20 aa a6	jsr $a6aa			jsr 	Evaluate8BitInteger 		; command
.91a4	20 5d af	jsr $af5d			jsr 	CheckComma
.91a7	e8		inx				inx
.91a8	20 8a a6	jsr $a68a			jsr 	Evaluate16BitInteger 		; X
.91ab	20 5d af	jsr $af5d			jsr 	CheckComma
.91ae	e8		inx				inx
.91af	20 aa a6	jsr $a6aa			jsr 	Evaluate8BitInteger 		; Y
.91b2	ad 11 04	lda $0411			lda 	NSMantissa1+1  				; shift bit 0 of X into CS, should now be zero
.91b5	4a		lsr a				lsr 	a
.91b6	d0 16		bne $91ce			bne 	_GfxError
.91b8	2e 08 04	rol $0408			rol 	NSMantissa0 				; rotate into command
.91bb	b0 11		bcs $91ce			bcs 	_GfxError 					; bit 7 should have been zero
.91bd	5a		phy				phy 								; save pos
.91be	ad 08 04	lda $0408			lda 	NSMantissa0 				; do the command
.91c1	ae 09 04	ldx $0409			ldx 	NSMantissa0+1
.91c4	ac 0a 04	ldy $040a			ldy 	NSMantissa0+2
.91c7	20 85 80	jsr $8085			jsr 	GXGraphicDraw
.91ca	b0 02		bcs $91ce			bcs 	_GfxError
.91cc	7a		ply				ply 								; restore pos and exit.
.91cd	60		rts				rts
.91ce					_GfxError:
.91ce	4c 48 b5	jmp $b548			jmp 	RangeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/gosub.asm

.91d1					Command_GOSUB:
.91d1	a2 00		ldx #$00			ldx 	#0
.91d3	20 8a a6	jsr $a68a			jsr 	Evaluate16BitInteger 		; line number in Stack.0
.91d6	a9 e3		lda #$e3			lda 	#STK_GOSUB+3
.91d8	20 c6 a7	jsr $a7c6			jsr 	StackOpen 					; create frame
.91db	20 0a a8	jsr $a80a			jsr 	STKSaveCodePosition 		; save current position
.91de	4c f4 91	jmp $91f4			jmp 	GotoStackX
.91e1					Command_RETURN:
.91e1	a9 e0		lda #$e0			lda 	#STK_GOSUB 					; check TOS is this
.91e3	a2 0e		ldx #$0e			ldx 	#ERRID_GOSUB 				; this error
.91e5	20 f2 a7	jsr $a7f2			jsr 	StackCheckFrame
.91e8	20 1b a8	jsr $a81b			jsr 	STKLoadCodePosition 		; restore code position
.91eb	20 e4 a7	jsr $a7e4			jsr 	StackClose
.91ee	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/goto.asm

.91ef					GotoCommand:
.91ef	a2 00		ldx #$00			ldx 	#0 							; GOTO where
.91f1	20 8a a6	jsr $a68a			jsr 	Evaluate16BitInteger
.91f4					GotoStackX:
.91f4	bd 10 04	lda $0410,x			lda  	NSMantissa1,x 				; put line # in XA. I'll keep this even though
.91f7	48		pha				pha 								; it is slightly inefficient, just in cases.
.91f8	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.91fb	fa		plx				plx
.91fc	20 71 a7	jsr $a771			jsr 	MemorySearch 				; transfer to line number AX.
.91ff	90 05		bcc $9206			bcc 	_GotoError 					; not found, off end.
.9201	d0 03		bne $9206			bne 	_GotoError 					; not found exactly
.9203	4c d7 95	jmp $95d7			jmp 	RunNewLine 					; and go straight to new line code.
.9206					_GotoError:
.9206	a9 0d		lda #$0d		lda	#13
.9208	4c d7 9a	jmp $9ad7		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/commands/hit.asm

.920b					UnaryHit:
.920b	fa		plx				plx
.920c	a9 36		lda #$36			lda 	#zTemp0
.920e	20 aa a6	jsr $a6aa			jsr 	Evaluate8BitInteger 		; get sprite number 0
.9211	20 5d af	jsr $af5d			jsr 	CheckComma
.9214	e8		inx				inx
.9215	20 aa a6	jsr $a6aa			jsr 	Evaluate8BitInteger 		; get sprite number 1
.9218	20 55 af	jsr $af55			jsr		CheckRightBracket
.921b	ca		dex				dex 								; fix back up again.
.921c	da		phx				phx 								; save X/Y
.921d	5a		phy				phy
.921e	bc 09 04	ldy $0409,x			ldy 	NSMantissa0+1,x 			; get the sprite numbers into X/Y
.9221	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9224	aa		tax				tax
.9225	a9 12		lda #$12			lda 	#GCMD_SpriteCollide 		; command check collision.
.9227	20 85 80	jsr $8085			jsr 	GXGraphicDraw 				; calculate result
.922a	1a		inc a				inc 	a 							; so 255 (fail) -> 0, otherwise 1,2,3,4 pixels etc.
.922b	7a		ply				ply 								; restore XY
.922c	fa		plx				plx
.922d	20 14 a7	jsr $a714			jsr 	NSMSetByte 					; return the hit result
.9230	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/if.asm

.9231					IfCommand:
.9231	a2 00		ldx #$00			ldx 	#0 							; If what.
.9233	20 52 a6	jsr $a652			jsr 	EvaluateNumber
.9236	b1 30		lda ($30),y			lda 	(codePtr),y
.9238	c9 a7		cmp #$a7			cmp 	#KWD_THEN  					; could be THEN <stuff> or GOTO
.923a	d0 0a		bne $9246			bne 	_IFStructured
.923c	c8		iny				iny 								; consume THEN
.923d	20 42 a7	jsr $a742			jsr 	NSMIsZero 					; is it zero
.9240	f0 01		beq $9243			beq 	_IfFail 					; if fail, go to next line
.9242	60		rts				rts 								; if THEN just continue
.9243					_IfFail:
.9243	4c 3c 96	jmp $963c			jmp 	EOLCommand
.9246					_IfStructured:
.9246	20 42 a7	jsr $a742			jsr 	NSMIsZero 					; is it zero
.9249	d0 07		bne $9252			bne 	_IfExit 					; if not, then continue normally.
.924b	a9 b4		lda #$b4			lda 	#KWD_ELSE 					; look for else/endif
.924d	a2 a4		ldx #$a4			ldx 	#KWD_ENDIF
.924f	20 32 9a	jsr $9a32			jsr 	ScanForward 				; and run from there/
.9252					_IfExit:
.9252	60		rts				rts
.9253					ElseCode:
.9253	a9 a4		lda #$a4			lda 	#KWD_ENDIF 					; else is only run after the if clause succeeds
.9255	aa		tax				tax 								; so just go to the structure exit
.9256	20 32 9a	jsr $9a32			jsr 	ScanForward
.9259	60		rts				rts
.925a					EndIf:
.925a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/commands/joy.asm

.925b					UnaryJoyX:
.925b	18		clc				clc
.925c	80 01		bra $925f			bra 	JoyMain
.925e					UnaryJoyY:
.925e	38		sec				sec
.925f					JoyMain:
.925f	fa		plx				plx 								; get pos
.9260	08		php				php 								; save carry (set for Y)
.9261	20 aa a6	jsr $a6aa			jsr 	Evaluate8BitInteger 		; ignore the parameter
.9264	20 55 af	jsr $af55			jsr 	CheckRightBracket
.9267	20 3f b7	jsr $b73f			jsr 	EXTReadController 			; read the controller.
.926a	28		plp				plp
.926b	90 02		bcc $926f			bcc 	_JMNoShift 					; if Y then shift bits 3,2 -> 1,0
.926d	4a		lsr a				lsr 	a
.926e	4a		lsr a				lsr 	a
.926f					_JMNoShift:
.926f	4a		lsr a				lsr 	a 							; if bit 0 set then right/down e.g. +1
.9270	b0 0a		bcs $927c			bcs 	_JMIsRight
.9272	4a		lsr a				lsr 	a 							; if bit 1 set then left/up e.g. -1
.9273	b0 04		bcs $9279			bcs 	_JMIsLeft
.9275	20 12 a7	jsr $a712			jsr 	NSMSetZero 					; zero result
.9278	60		rts				rts
.9279					_JMIsLeft:
.9279	4c 44 9b	jmp $9b44			jmp 	ReturnTrue
.927c					_JMIsRight:
.927c	a9 01		lda #$01			lda 	#1
.927e	20 14 a7	jsr $a714			jsr 	NSMSetByte
.9281	60		rts				rts
.9282					UnaryJoyB:
.9282	fa		plx				plx 								; get pos
.9283	20 aa a6	jsr $a6aa			jsr 	Evaluate8BitInteger 		; ignore the parameter
.9286	20 55 af	jsr $af55			jsr 	CheckRightBracket
.9289	20 3f b7	jsr $b73f			jsr 	EXTReadController 			; read the controller.
.928c	4a		lsr a				lsr 	a
.928d	4a		lsr a				lsr 	a
.928e	4a		lsr a				lsr 	a
.928f	4a		lsr a				lsr 	a
.9290	29 01		and #$01			and 	#1
.9292	20 14 a7	jsr $a714			jsr 	NSMSetByte
.9295	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/let.asm

.9296					LetCommand:
.9296	a2 00		ldx #$00			ldx 	#0
.9298	b1 30		lda ($30),y			lda 	(codePtr),y
.929a	c9 10		cmp #$10			cmp 	#KWD_AT
.929c	d0 16		bne $92b4			bne 	_LCStandard
.929e	c8		iny				iny 								; skip equal
.929f	20 b9 a1	jsr $a1b9			jsr 	EvaluateTerm 				; get a number
.92a2	20 fd 9f	jsr $9ffd			jsr 	Dereference 				; dereference it
.92a5	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check integer
.92a8	49 20		eor #$20			eor 	#NSBIsReference	 			; toggle reference
.92aa	9d 00 04	sta $0400,x			sta 	NSStatus,x
.92ad	29 20		and #$20			and 	#NSBIsReference 			; if it is now a reference, continue
.92af	d0 10		bne $92c1			bne 	_LCMain
.92b1	4c 4d b5	jmp $b54d			jmp 	TypeError 					; was a reference before.
.92b4					_LCStandard:
.92b4	ad d0 9e	lda $9ed0			lda 	PrecedenceLevel+"*"			; precedence > this
.92b7	20 ea 9e	jsr $9eea			jsr 	EvaluateExpressionAtPrecedence
.92ba	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; is it a reference to an array
.92bd	c9 38		cmp #$38			cmp		#NSTProcedure+NSBIsReference
.92bf	f0 0e		beq $92cf			beq 	_LetGoProc 					; it's a procedure call.
.92c1					_LCMain:
.92c1	a9 3d		lda #$3d			lda 	#"=" 						; check =
.92c3	20 65 af	jsr $af65			jsr 	CheckNextA
.92c6	e8		inx				inx 								; RHS
.92c7	20 49 a6	jsr $a649			jsr 	EvaluateValue
.92ca	ca		dex				dex
.92cb	20 d2 92	jsr $92d2			jsr 	AssignVariable
.92ce	60		rts				rts
.92cf					_LetGoProc:
.92cf	4c b2 94	jmp $94b2			jmp 	CallProcedure
.92d2					AssignVariable:
.92d2	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check the string/number type bits match
.92d5	48		pha				pha 								; save a copy
.92d6	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.92d9	29 10		and #$10			and 	#NSBIsString
.92db	d0 0b		bne $92e8			bne 	_ASError
.92dd	68		pla				pla 								; get back
.92de	29 10		and #$10			and 	#NSBIsString 				; check type
.92e0	d0 03		bne $92e5			bne 	_ASString
.92e2	4c 25 9f	jmp $9f25			jmp 	AssignNumber
.92e5					_ASString:
.92e5	4c 93 9f	jmp $9f93			jmp 	AssignString
.92e8					_ASError:
.92e8	4c 4d b5	jmp $b54d			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/list.asm

.92eb					Command_List:
.92eb	9c a6 04	stz $04a6			stz 	listIndent 					; reset indent.
.92ee	9c 0c 04	stz $040c			stz		NSMantissa0+4				; set the lower (slot 4) to 0 and upper (slot 7) to $FFFF
.92f1	9c 14 04	stz $0414			stz 	NSMantissa1+4
.92f4	a9 ff		lda #$ff			lda 	#$FF
.92f6	8d 0f 04	sta $040f			sta 	NSMantissa0+7
.92f9	8d 17 04	sta $0417			sta 	NSMantissa1+7
.92fc	b1 30		lda ($30),y			lda 	(codePtr),y
.92fe	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.9300	f0 1e		beq $9320			beq 	_CLSecond
.9302	20 7e 93	jsr $937e			jsr 	CLIsDigit 					; if not digit, list all
.9305	b0 24		bcs $932b			bcs 	_CLStart
.9307	a2 04		ldx #$04			ldx 	#4 							; get 1st range into slot 4
.9309	20 8a a6	jsr $a68a			jsr 	Evaluate16BitInteger
.930c	b1 30		lda ($30),y			lda 	(codePtr),y
.930e	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.9310	f0 0e		beq $9320			beq 	_CLSecond 					; if so go get it
.9312	ad 0c 04	lda $040c			lda 	NSMantissa0+4 				; copy 4->7
.9315	8d 0f 04	sta $040f			sta 	NSMantissa0+7
.9318	ad 14 04	lda $0414			lda 	NSMantissa1+4
.931b	8d 17 04	sta $0417			sta 	NSMantissa1+7
.931e	80 0b		bra $932b			bra 	_CLStart
.9320					_CLSecond:
.9320	c8		iny				iny 								; consume comma
.9321	20 7e 93	jsr $937e			jsr 	CLIsDigit 					; digit found
.9324	b0 05		bcs $932b			bcs 	_CLStart 					; if not, continue listing
.9326	a2 07		ldx #$07			ldx 	#7 							; load 2nd range into slot 7
.9328	20 8a a6	jsr $a68a			jsr 	Evaluate16BitInteger
.932b					_CLStart
.932b	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.932d	85 30		sta $30				sta 	codePtr
.932f	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.9331	85 31		sta $31				sta 	codePtr+1
.9333					_CLLoop:
.9333	20 3c b7	jsr $b73c			jsr 	EXTBreakCheck 				; break check
.9336	f0 30		beq $9368			beq 	_CLExit
.9338	b2 30		lda ($30)			lda 	(codePtr)
.933a	f0 2c		beq $9368			beq 	_CLExit
.933c	a2 04		ldx #$04			ldx 	#4 							; check range every time, line numbers aren't in order.
.933e	20 6b 93	jsr $936b			jsr 	CLCompareLineNo
.9341	90 18		bcc $935b			bcc 	_CLNext
.9343	a2 07		ldx #$07			ldx 	#7
.9345	20 6b 93	jsr $936b			jsr 	CLCompareLineNo
.9348	f0 02		beq $934c			beq 	_CLDoThisOne
.934a	b0 0f		bcs $935b			bcs 	_CLNext
.934c					_CLDoThisOne:
.934c	20 37 98	jsr $9837			jsr 	ListConvertLine 			; convert line into token Buffer
.934f	a2 04		ldx #$04			ldx 	#(tokenBuffer >> 8) 		; print that line
.9351	a9 aa		lda #$aa			lda 	#(tokenBuffer & $FF)
.9353	20 30 9b	jsr $9b30			jsr 	PrintStringXA
.9356	a9 0d		lda #$0d			lda 	#13 						; new line
.9358	20 fb b6	jsr $b6fb			jsr 	EXTPrintCharacter
.935b					_CLNext:
.935b	18		clc				clc
.935c	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.935e	65 30		adc $30				adc 	codePtr
.9360	85 30		sta $30				sta 	codePtr
.9362	90 02		bcc $9366			bcc 	_CREExit
.9364	e6 31		inc $31				inc 	codePtr+1
.9366					_CREExit:
.9366	80 cb		bra $9333			bra 	_CLLoop
.9368					_CLExit:
.9368	4c 34 8c	jmp $8c34			jmp 	WarmStart
.936b					CLCompareLineNo:
.936b	38		sec				sec
.936c	a0 01		ldy #$01			ldy 	#1
.936e	b1 30		lda ($30),y			lda 	(codePtr),y
.9370	fd 08 04	sbc $0408,x			sbc 	NSMantissa0,x
.9373	85 36		sta $36				sta 	zTemp0
.9375	c8		iny				iny
.9376	b1 30		lda ($30),y			lda 	(codePtr),y
.9378	fd 10 04	sbc $0410,x			sbc 	NSMantissa1,x
.937b	05 36		ora $36				ora 	zTemp0
.937d	60		rts				rts
.937e					CLIsDigit:
.937e	b1 30		lda ($30),y			lda 	(codePtr),y
.9380	c9 30		cmp #$30			cmp 	#"0"
.9382	90 03		bcc $9387			bcc	 	_CLIDExitFalse
.9384	c9 3a		cmp #$3a			cmp 	#"9"+1
.9386	60		rts				rts
.9387					_CLIDExitFalse:
.9387	38		sec				sec
.9388	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/local.asm

.9389					Command_LOCAL:
.9389	a2 00		ldx #$00			ldx 	#0 							; at level 0
.938b	20 97 93	jsr $9397			jsr 	LocaliseNextTerm 			; convert term to a local.
.938e	b1 30		lda ($30),y			lda 	(codePtr),y
.9390	c8		iny				iny
.9391	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.9393	f0 f4		beq $9389			beq 	Command_LOCAL
.9395	88		dey				dey 								; unpick pre-get
.9396	60		rts				rts
.9397					LocaliseNextTerm:
.9397	20 b9 a1	jsr $a1b9			jsr 	EvaluateTerm 				; evaluate the term
.939a	bd 00 04	lda $0400,x			lda 	NSStatus,x
.939d	29 20		and #$20			and 	#NSBIsReference 			; check it is a reference
.939f	f0 69		beq $940a			beq		_LNTError
.93a1	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address of variable to zTemp0
.93a4	85 36		sta $36				sta 	zTemp0
.93a6	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.93a9	85 37		sta $37				sta  	zTemp0+1
.93ab	bd 00 04	lda $0400,x			lda 	NSStatus,x
.93ae	29 10		and #$10			and 	#NSBIsString
.93b0	d0 22		bne $93d4			bne 	_LNTPushString
.93b2	5a		phy				phy
.93b3	a0 00		ldy #$00			ldy 	#0 							; push 0 to 4 inclusive, the number values, on the stack, and zero them as you go.
.93b5					_LNTPushNumLoop:
.93b5	b1 36		lda ($36),y			lda		(zTemp0),y
.93b7	20 a4 a7	jsr $a7a4			jsr 	StackPushByte
.93ba	a9 00		lda #$00			lda 	#0
.93bc	91 36		sta ($36),y			sta 	(zTemp0),y
.93be	c8		iny				iny
.93bf	c0 05		cpy #$05			cpy 	#5
.93c1	d0 f2		bne $93b5			bne 	_LNTPushNumLoop
.93c3	a5 36		lda $36				lda 	zTemp0 						; push the actual target address to write on the stack
.93c5	20 a4 a7	jsr $a7a4			jsr 	StackPushByte
.93c8	a5 37		lda $37				lda 	zTemp0+1
.93ca	20 a4 a7	jsr $a7a4			jsr 	StackPushByte
.93cd	a9 01		lda #$01			lda 	#STK_LOCALN 				; push local-number marker.
.93cf	20 a4 a7	jsr $a7a4			jsr 	StackPushByte
.93d2	7a		ply				ply
.93d3	60		rts				rts
.93d4					_LNTPushString:
.93d4	5a		phy				phy
.93d5	b2 36		lda ($36)			lda 	(zTemp0) 					; put address of string in zTemp1
.93d7	85 38		sta $38				sta 	zTemp1
.93d9	a0 01		ldy #$01			ldy 	#1
.93db	b1 36		lda ($36),y			lda 	(zTemp0),y
.93dd	85 39		sta $39				sta 	zTemp1+1
.93df	a0 00		ldy #$00			ldy 	#0 							; output string
.93e1	c9 00		cmp #$00			cmp 	#0 							; if not assigned strin
.93e3	f0 0a		beq $93ef			beq 	_LNTStringOut
.93e5					_LNTPushStrLoop:
.93e5	b1 38		lda ($38),y			lda 	(zTemp1),y
.93e7	f0 06		beq $93ef			beq 	_LNTStringOut
.93e9	20 a4 a7	jsr $a7a4			jsr 	StackPushByte
.93ec	c8		iny				iny
.93ed	80 f6		bra $93e5			bra 	_LNTPushStrLoop
.93ef					_LNTStringOut:
.93ef	98		tya				tya									; output length
.93f0	20 a4 a7	jsr $a7a4			jsr 	StackPushByte
.93f3	a9 00		lda #$00			lda 	#0 							; clear original string.
.93f5	92 38		sta ($38)			sta 	(zTemp1)
.93f7	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; output address of the string record *not* the string itself
.93fa	20 a4 a7	jsr $a7a4			jsr 	StackPushByte
.93fd	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9400	20 a4 a7	jsr $a7a4			jsr 	StackPushByte
.9403	a9 02		lda #$02			lda 	#STK_LOCALS 				; push local-string marker.
.9405	20 a4 a7	jsr $a7a4			jsr 	StackPushByte
.9408	7a		ply				ply
.9409	60		rts				rts
.940a					_LNTError:
.940a	4c 43 b5	jmp $b543			jmp 	SyntaxError
.aefc					LocalPopValue:
.aefc	20 bd a7	jsr $a7bd			jsr 	StackPopByte
.aeff	c9 01		cmp #$01			cmp 	#STK_LOCALN 				; if not local-N
.af01	d0 17		bne $af1a			bne 	_LPVString
.af03	20 bd a7	jsr $a7bd			jsr 	StackPopByte 				; address
.af06	85 37		sta $37				sta 	zTemp0+1
.af08	20 bd a7	jsr $a7bd			jsr 	StackPopByte
.af0b	85 36		sta $36				sta 	zTemp0
.af0d	5a		phy				phy
.af0e	a0 04		ldy #$04			ldy 	#4 							; copy back
.af10					_LPVNumberCopy:
.af10	20 bd a7	jsr $a7bd			jsr 	StackPopByte
.af13	91 36		sta ($36),y			sta 	(zTemp0),y
.af15	88		dey				dey
.af16	10 f8		bpl $af10			bpl 	_LPVNumberCopy
.af18	7a		ply				ply 								; and complete
.af19	60		rts				rts
.af1a					_LPVString:
.af1a	20 bd a7	jsr $a7bd			jsr 	StackPopByte 				; address of record => zTemp0
.af1d	85 37		sta $37				sta 	zTemp0+1
.af1f	20 bd a7	jsr $a7bd			jsr 	StackPopByte
.af22	85 36		sta $36				sta 	zTemp0
.af24	5a		phy				phy
.af25	b2 36		lda ($36)			lda 	(zTemp0) 					; address to write string to => zTemp1
.af27	85 38		sta $38				sta 	zTemp1
.af29	a0 01		ldy #$01			ldy 	#1
.af2b	b1 36		lda ($36),y			lda 	(zTemp0),y
.af2d	85 39		sta $39				sta 	zTemp1+1
.af2f	20 bd a7	jsr $a7bd			jsr 	StackPopByte 				; # to get => y
.af32	a8		tay				tay
.af33	a5 39		lda $39				lda 	zTemp1+1 					; if no target (e.g. was "" originally) exit
.af35	f0 0e		beq $af45			beq 	_LPVStringCopied
.af37	a9 00		lda #$00			lda 	#0 							; NULL on end
.af39	91 38		sta ($38),y			sta 	(zTemp1),y
.af3b					_LPVStringCopy:
.af3b	88		dey				dey
.af3c	30 07		bmi $af45			bmi 	_LPVStringCopied
.af3e	20 bd a7	jsr $a7bd			jsr 	StackPopByte
.af41	91 38		sta ($38),y			sta 	(zTemp1),y
.af43	80 f6		bra $af3b			bra 	_LPVStringCopy
.af45					_LPVStringCopied:
.af45	fa		plx				plx
.af46	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/new.asm

.940d					NewCommand:
.940d	20 4f a7	jsr $a74f			jsr 	MemoryNew
.9410	9c 00 10	stz $1000			stz 	VariableSpace 				; erase all variables.
.9413	20 cd 8c	jsr $8ccd			jsr 	ClearCommand 				; clear everything.
.9416	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/commands/palette.asm

.9417					PaletteCommand:
.9417	a2 00		ldx #$00			ldx 	#0
.9419	20 aa a6	jsr $a6aa			jsr 	Evaluate8BitInteger 		; colour
.941c	20 5d af	jsr $af5d			jsr 	CheckComma
.941f	e8		inx				inx
.9420	20 8a a6	jsr $a68a			jsr 	Evaluate16BitInteger 		; r
.9423	20 5d af	jsr $af5d			jsr 	CheckComma
.9426	e8		inx				inx
.9427	20 aa a6	jsr $a6aa			jsr 	Evaluate8BitInteger 		; g
.942a	20 5d af	jsr $af5d			jsr 	CheckComma
.942d	e8		inx				inx
.942e	20 aa a6	jsr $a6aa			jsr 	Evaluate8BitInteger 		; b
.9431	ad 08 04	lda $0408			lda 	NSMantissa0 				; get colour #
.9434	85 36		sta $36				sta 	zTemp0
.9436	a9 34		lda #$34			lda 	#$D0 >> 2 					; MSB = D0/4
.9438	85 37		sta $37				sta 	zTemp0+1
.943a	06 36		asl $36				asl 	zTemp0 						; zTemp = $D000+Colour x 4
.943c	26 37		rol $37				rol	 	zTemp0+1
.943e	06 36		asl $36				asl 	zTemp0
.9440	26 37		rol $37				rol	 	zTemp0+1
.9442	a9 01		lda #$01			lda 	#1 							; I/O Page 2
.9444	85 01		sta $01				sta 	1
.9446	5a		phy				phy
.9447	ad 0b 04	lda $040b			lda 	NSMantissa0+3 				; fix to r,g,b
.944a	92 36		sta ($36)			sta 	(zTemp0)
.944c	a0 01		ldy #$01			ldy 	#1
.944e	ad 0a 04	lda $040a			lda 	NSMantissa0+2
.9451	91 36		sta ($36),y			sta 	(zTemp0),y
.9453	ad 09 04	lda $0409			lda 	NSMantissa0+1
.9456	c8		iny				iny
.9457	91 36		sta ($36),y			sta 	(zTemp0),y
.9459	7a		ply				ply
.945a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/print.asm

.945b					Command_Print:
.945b	18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.945c					_CPLoop:
.945c	08		php				php 								; save last action flag
.945d	b1 30		lda ($30),y			lda 	(codePtr),y
.945f	c9 80		cmp #$80			cmp  	#KWC_EOL 					; end of line or colon, exit now.
.9461	f0 46		beq $94a9			beq 	_CPExit
.9463	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.9465	f0 42		beq $94a9			beq 	_CPExit
.9467	68		pla				pla 								; throw last action flag
.9468	b1 30		lda ($30),y			lda 	(codePtr),y
.946a	c8		iny				iny
.946b	c9 3b		cmp #$3b			cmp 	#KWD_SEMICOLON				; is it a semicolon
.946d	f0 37		beq $94a6			beq 	_CPContinueWithSameLine
.946f	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; comma
.9471	f0 2e		beq $94a1			beq 	_CPTab
.9473	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; apostrophe (new line)
.9475	f0 26		beq $949d			beq 	_CPNewLine
.9477	88		dey				dey 								; undo the get.
.9478	a2 00		ldx #$00			ldx 	#0
.947a	20 49 a6	jsr $a649			jsr 	EvaluateValue 				; get a value into slot 0
.947d	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; is it a number
.9480	29 10		and #$10			and 	#NSBIsString
.9482	f0 0b		beq $948f			beq 	_CPNumber
.9484	ae 10 04	ldx $0410			ldx 	NSMantissa1 				; string, print the text.
.9487	ad 08 04	lda $0408			lda 	NSMantissa0
.948a	20 30 9b	jsr $9b30			jsr 	PrintStringXA
.948d	80 cc		bra $945b			bra 	Command_Print 				; loop round clearing carry so NL if end
.948f					_CPNumber:
.948f	a9 05		lda #$05			lda 	#5 							; maximum decimals
.9491	20 1f a5	jsr $a51f			jsr 	ConvertNumberToString 		; convert to string
.9494	a2 06		ldx #$06			ldx 	#DecimalBuffer >> 8
.9496	a9 1a		lda #$1a			lda 	#DecimalBuffer & $FF
.9498	20 30 9b	jsr $9b30			jsr 	PrintStringXA
.949b	80 be		bra $945b			bra 	Command_Print 				; loop round clearing carry so NL if end
.949d					_CPNewLine:
.949d	a9 0d		lda #$0d			lda 	#13
.949f	80 02		bra $94a3			bra 	_CPPrintChar
.94a1					_CPTab:
.94a1	a9 09		lda #$09			lda 	#9 							; print TAB
.94a3					_CPPrintChar:
.94a3	20 fb b6	jsr $b6fb			jsr 	EXTPrintCharacter
.94a6					_CPContinueWithSameLine:
.94a6	38		sec				sec 								; loop round with carry set, which
.94a7	80 b3		bra $945c			bra 	_CPLoop 					; will inhibit final CR
.94a9					_CPExit:
.94a9	28		plp				plp 								; get last action flag
.94aa	b0 05		bcs $94b1			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.94ac	a9 0d		lda #$0d			lda 	#13 						; print new line
.94ae	20 fb b6	jsr $b6fb			jsr 	EXTPrintCharacter
.94b1					_CPExit2:
.94b1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/procedure.asm

=2					ParameterStackPos = 2
.94b2					CallProcedure:
.94b2	a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start storing parameters at 2.
.94b4	b1 30		lda ($30),y			lda 	(codePtr),y
.94b6	c9 29		cmp #$29			cmp 	#KWD_RPAREN
.94b8	f0 0c		beq $94c6			beq 	_CPEndParam
.94ba					_CPParamLoop:
.94ba	20 49 a6	jsr $a649			jsr 	EvaluateValue 				; get parameter onto stack
.94bd	e8		inx				inx 								; bump next stack
.94be	b1 30		lda ($30),y			lda 	(codePtr),y
.94c0	c8		iny				iny
.94c1	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if comma, go back and try again.
.94c3	f0 f5		beq $94ba			beq 	_CPParamLoop
.94c5	88		dey				dey 								; unpick.
.94c6					_CPEndParam:
.94c6	8e 96 04	stx $0496			stx 	LastParameter 				; save the last parameters index.
.94c9	c8		iny				iny									; skip right bracket
.94ca	a9 b3		lda #$b3			lda 	#STK_PROC+3 				; allocate 6 bytes on the return stack.
.94cc	20 c6 a7	jsr $a7c6			jsr 	StackOpen
.94cf	20 0a a8	jsr $a80a			jsr 	STKSaveCodePosition 		; save loop position
.94d2	ad 08 04	lda $0408			lda 	NSMantissa0 				; copy variable (e.g. procedure) address to zTemp0
.94d5	85 36		sta $36				sta 	zTemp0 						; this is the DATA not the RECORD
.94d7	ad 10 04	lda $0410			lda 	NSMantissa1
.94da	85 37		sta $37				sta 	zTemp0+1
.94dc	a0 01		ldy #$01			ldy 	#1 							; copy code address back.
.94de	b2 36		lda ($36)			lda 	(zTemp0)
.94e0	85 30		sta $30				sta 	safePtr
.94e2	b1 36		lda ($36),y			lda 	(zTemp0),y
.94e4	85 31		sta $31				sta 	safePtr+1
.94e6	c8		iny				iny
.94e7	b1 36		lda ($36),y			lda 	(zTemp0),y
.94e9	85 32		sta $32				sta 	safePtr+2
.94eb	c8		iny				iny
.94ec	b1 36		lda ($36),y			lda 	(zTemp0),y
.94ee	85 33		sta $33				sta 	safePtr+3
.94f0	c8		iny				iny 								; get Y offset -> Y
.94f1	b1 36		lda ($36),y			lda 	(zTemp0),y
.94f3	a8		tay				tay
.94f4	a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start position of parameters
.94f6	ec 96 04	cpx $0496			cpx	 	LastParameter 				; check no parameters at the start
.94f9	f0 13		beq $950e			beq 	_ParamExit 					; if so, exit.
.94fb					_ParamExtract:
.94fb	ca		dex				dex 								; put a local term on the level before
.94fc	20 97 93	jsr $9397			jsr 	LocaliseNextTerm			; also pushes original param value to basic stack
.94ff	20 d2 92	jsr $92d2			jsr 	AssignVariable 				; assign stacked value to the variable.
.9502	e8		inx				inx 								; advance to next parameter to do.
.9503	e8		inx				inx
.9504	ec 96 04	cpx $0496			cpx 	LastParameter 				; are we done ?
.9507	f0 05		beq $950e			beq 	_ParamExit
.9509	20 5d af	jsr $af5d			jsr 	CheckComma 					; comma seperating parameters
.950c	80 ed		bra $94fb			bra 	_ParamExtract
.950e					_ParamExit:
.950e	20 55 af	jsr $af55			jsr 	CheckRightBracket 			; check )
.9511	60		rts				rts 								; and continue from here
.af47					Command_ENDPROC:
.af47	a9 b0		lda #$b0			lda 	#STK_PROC 					; check TOS is this
.af49	a2 14		ldx #$14			ldx 	#ERRID_PROC
.af4b	20 f2 a7	jsr $a7f2			jsr 	StackCheckFrame
.af4e	20 1b a8	jsr $a81b			jsr 	STKLoadCodePosition 		; restore code position
.af51	20 e4 a7	jsr $a7e4			jsr 	StackClose
.af54	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/read.asm

.9512					Command_Read:
.9512	a2 00		ldx #$00			ldx 	#0 							; evaluate the term which is the var/array element to assign
.9514	20 b9 a1	jsr $a1b9			jsr 	EvaluateTerm
.9517	bd 00 04	lda $0400,x			lda 	NSStatus,x
.951a	29 20		and #$20			and 	#NSBIsReference				; get status byte on stack, identifies int, float, string.
.951c	f0 4a		beq $9568			beq 	_CRSyntax 					; check reference (bit 0)
.951e	20 b1 95	jsr $95b1			jsr 	SwapDataCodePtrs 			; swap code and data
.9521	ad 9c 04	lda $049c			lda 	inDataStatement 			; if in a data statement, we don't need to search
.9524	d0 20		bne $9546			bne 	_CRContinueData
.9526					_CRKeepSearching:
.9526	a9 b1		lda #$b1			lda 	#KWD_DATA 					; scan for instruction
.9528	aa		tax				tax
.9529	20 32 9a	jsr $9a32			jsr 	ScanForward
.952c	c9 b1		cmp #$b1			cmp 	#KWD_DATA 					; found data ?
.952e	f0 16		beq $9546			beq 	_CRHaveData 				; found it
.9530	18		clc				clc
.9531	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.9533	65 30		adc $30				adc 	codePtr
.9535	85 30		sta $30				sta 	codePtr
.9537	90 02		bcc $953b			bcc 	_CREExit
.9539	e6 31		inc $31				inc 	codePtr+1
.953b					_CREExit:
.953b	a0 03		ldy #$03			ldy 	#3 							; start of line.
.953d	b2 30		lda ($30)			lda 	(codePtr)
.953f	d0 e5		bne $9526			bne 	_CRKeepSearching
.9541	a9 0b		lda #$0b		lda	#11
.9543	4c d7 9a	jmp $9ad7		jmp	ErrorHandler
.9546					_CRHaveData:
.9546					_CRContinueData:
.9546	a2 01		ldx #$01			ldx 	#1
.9548	20 49 a6	jsr $a649			jsr 	EvaluateValue 				; evaluate value into slot # 1
.954b	ca		dex				dex
.954c	20 d2 92	jsr $92d2			jsr		AssignVariable 				; do the assignment
.954f	9c 9c 04	stz $049c			stz 	inDataStatement 			; clear in data
.9552	b1 30		lda ($30),y			lda 	(codePtr),y
.9554	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not, end of data statement
.9556	d0 04		bne $955c			bne 	_CRSwapBack
.9558	c8		iny				iny 								; consume comma
.9559	ee 9c 04	inc $049c			inc 	inDataStatement 			; set in data statement currently.
.955c					_CRSwapBack:
.955c	20 b1 95	jsr $95b1			jsr 	SwapDataCodePtrs			; swap them back.
.955f	b1 30		lda ($30),y			lda 	(codePtr),y
.9561	c8		iny				iny
.9562	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.9564	f0 ac		beq $9512			beq 	Command_Read 				; if so go round again.
.9566	88		dey				dey 								; unpick get.
.9567	60		rts				rts
.9568					_CRSyntax:
.9568	4c 43 b5	jmp $b543			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/rem.asm

.956b					RemCommand:
.956b	b1 30		lda ($30),y			lda 	(codePtr),y
.956d	c9 ff		cmp #$ff			cmp 	#KWC_STRING
.956f	d0 06		bne $9577			bne 	_RMExit
.9571	c8		iny				iny
.9572	98		tya				tya
.9573	38		sec				sec
.9574	71 30		adc ($30),y			adc 	(codePtr),y
.9576	a8		tay				tay
.9577					_RMExit:
.9577	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/repeat.asm

.9578					Command_REPEAT:
.9578	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; allocate 6 bytes on the return stack.
.957a	20 c6 a7	jsr $a7c6			jsr 	StackOpen
.957d	20 0a a8	jsr $a80a			jsr 	STKSaveCodePosition 		; save loop position
.9580	60		rts				rts
.9581					Command_UNTIL:
.9581	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; check REPEAT is TOS
.9583	a2 0f		ldx #$0f			ldx 	#ERRID_REPEAT 				; this error
.9585	20 f2 a7	jsr $a7f2			jsr 	StackCheckFrame
.9588	a2 00		ldx #$00			ldx 	#0
.958a	20 52 a6	jsr $a652			jsr 	EvaluateNumber 				; work out the number
.958d	20 42 a7	jsr $a742			jsr 	NSMIsZero 					; check if zero
.9590	f0 04		beq $9596			beq 	_CULoopBack 				; if so keep looping
.9592	20 e4 a7	jsr $a7e4			jsr 	StackClose		 			; return
.9595	60		rts				rts
.9596					_CULoopBack:
.9596	20 1b a8	jsr $a81b			jsr 	STKLoadCodePosition 		; loop back
.9599	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/restore.asm

.959a					Command_Restore:
.959a	20 b1 95	jsr $95b1			jsr 	SwapDataCodePtrs 			; swap code and data
.959d	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.959f	85 30		sta $30				sta 	codePtr
.95a1	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.95a3	85 31		sta $31				sta 	codePtr+1
.95a5	20 b1 95	jsr $95b1			jsr 	SwapDataCodePtrs 			; put them back
.95a8	a9 03		lda #$03			lda 	#3 							; start at offset 3, e.g. first instruction of first line.
.95aa	8d 9b 04	sta $049b			sta 	dataPointer+4
.95ad	9c 9c 04	stz $049c			stz 	inDataStatement 			; not in data statement
.95b0	60		rts				rts
.95b1					SwapDataCodePtrs:
.95b1	da		phx				phx
.95b2	a2 03		ldx #$03			ldx 	#3 							; swap 32 bit code pointer over
.95b4					_SDCPLoop:
.95b4	b5 30		lda $30,x			lda 	safePtr,x
.95b6	48		pha				pha
.95b7	bd 97 04	lda $0497,x			lda 	dataPointer,x
.95ba	95 30		sta $30,x			sta 	safePtr,x
.95bc	68		pla				pla
.95bd	9d 97 04	sta $0497,x			sta 	dataPointer,x
.95c0	ca		dex				dex
.95c1	10 f1		bpl $95b4			bpl 	_SDCPLoop
.95c3	ad 9b 04	lda $049b			lda 	dataPointer+4 				; swap Y position over.
.95c6	8c 9b 04	sty $049b			sty 	dataPointer+4
.95c9	a8		tay				tay
.95ca	fa		plx				plx
.95cb	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/run.asm

.95cc					CommandRUN:
.95cc	20 cd 8c	jsr $8ccd			jsr 	ClearCommand 				; clear variable/stacks/etc.
.95cf	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.95d1	85 30		sta $30				sta 	codePtr
.95d3	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.95d5	85 31		sta $31				sta 	codePtr+1
.95d7					RUNNewLine:
.95d7	b2 30		lda ($30)			lda 	(codePtr)
.95d9	f0 5e		beq $9639			beq 	CRNoProgram         		; no then END.
.95db	a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack
.95dd	9a		txs				txs
.95de					RUNCodePointerLine:
.95de	a0 02		ldy #$02			ldy 	#2 							; start of program
.95e0					_CRIncMainLoop:
.95e0	0e 93 04	asl $0493			asl 	breakCheck 					; clears 1 time in 8
.95e3	d0 05		bne $95ea			bne 	_CRNoBreakCheck
.95e5	20 3c b7	jsr $b73c			jsr 	EXTBreakCheck 				; break check
.95e8	f0 4a		beq $9634			beq 	_CRBreak
.95ea					_CRNoBreakCheck:
.95ea	c8		iny				iny
.95eb					_CRMainLoop:
.95eb	9c 90 04	stz $0490			stz 	stringInitialised 			; clear the temporary string initialised flag.
.95ee	b1 30		lda ($30),y			lda 	(codePtr),y
.95f0	10 10		bpl $9602			bpl 	_CRNotKeyword
.95f2	c9 9f		cmp #$9f			cmp 	#KWC_LAST_UNARY+1 			; if after unary, legitimate command
.95f4	b0 04		bcs $95fa			bcs 	_CRIsKeyword
.95f6	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if unary, syntax error.
.95f8	b0 34		bcs $962e			bcs		_CRSyntaxError
.95fa					_CRIsKeyword:
.95fa	c8		iny				iny 								; consume command
.95fb	0a		asl a				asl 	a 							; double losing the MSB which is '1' as tokens are $80-$FF
.95fc	aa		tax				tax 								; put in X for vector jump
.95fd	20 31 96	jsr $9631			jsr 	_CRCallVector0 				; call the vector - effectively jsr (vectortable,X)
.9600	80 e9		bra $95eb			bra 	_CRMainLoop 				; and loop round
.9602					_CRNotKeyword:
.9602	c9 3a		cmp #$3a			cmp 	#KWD_COLON 					; if a :, consume it and go round.
.9604	f0 da		beq $95e0			beq 	_CRIncMainLoop
.9606	c9 40		cmp #$40			cmp 	#$40 						; variable/call reference
.9608	90 05		bcc $960f			bcc 	_CRNotVariable
.960a					_CRGoLet:
.960a	20 96 92	jsr $9296			jsr 	LetCommand
.960d	80 dc		bra $95eb			bra 	_CRMainLoop
.960f					_CRNotVariable:
.960f	c9 10		cmp #$10			cmp 	#KWD_AT 					; handle @
.9611	f0 f7		beq $960a			beq 	_CRGoLet
.9613	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; handle ? !
.9615	f0 f3		beq $960a			beq 	_CRGoLet
.9617	c9 21		cmp #$21			cmp 	#KWD_PLING
.9619	f0 ef		beq $960a			beq 	_CRGoLet
.961b	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; handle ' (comment)
.961d	f0 09		beq $9628			beq 	_CRGoRem
.961f	c9 2e		cmp #$2e			cmp 	#KWD_PERIOD 				; handle . (assembler label)
.9621	d0 0b		bne $962e			bne 	_CRSyntaxError
.9623	20 6d 8b	jsr $8b6d			jsr 	LabelHere
.9626	80 c3		bra $95eb			bra 	_CRMainLoop
.9628					_CRGoRem:
.9628	c8		iny				iny
.9629	20 6b 95	jsr $956b			jsr 	RemCommand
.962c	80 bd		bra $95eb			bra 	_CRMainLoop
.962e					_CRSyntaxError:
.962e	4c 43 b5	jmp $b543			jmp 	SyntaxError
.9631					_CRCallVector0:
.9631	7c dc 96	jmp ($96dc,x)			jmp 	(VectorSet0,x)
.9634					_CRBreak:
.9634	a9 01		lda #$01		lda	#1
.9636	4c d7 9a	jmp $9ad7		jmp	ErrorHandler
.9639					CRNoProgram:
.9639	4c f0 8d	jmp $8df0			jmp 	EndCommand
.963c					EOLCommand:
.963c	18		clc				clc
.963d	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.963f	65 30		adc $30				adc 	codePtr
.9641	85 30		sta $30				sta 	codePtr
.9643	90 02		bcc $9647			bcc 	_CREExit
.9645	e6 31		inc $31				inc 	codePtr+1
.9647					_CREExit:
.9647	80 8e		bra $95d7			bra 	RunNewLine
.9649					Shift1Command:
.9649	b1 30		lda ($30),y			lda 	(codePtr),y
.964b	c8		iny				iny
.964c	0a		asl a				asl 	a
.964d	aa		tax				tax
.964e	7c 74 97	jmp ($9774,x)			jmp 	(VectorSet1,x)
.9651					Shift2Command:
.9651	b1 30		lda ($30),y			lda 	(codePtr),y
.9653	c8		iny				iny
.9654	0a		asl a				asl 	a
.9655	aa		tax				tax
.9656	7c 8e 97	jmp ($978e,x)			jmp 	(VectorSet2,x)
.9659					Unused1:
.9659					Unused2:
.9659					Unused3:
.9659					Unused4:
.9659	4c 43 b5	jmp $b543			jmp 	SyntaxError
>965c							.align 2

;******  Processing file: ./common/commands/../generated/vectors.dat

.965c					VectorSetPunc:
>965c	81 9c					.word	ShiftLeft                        ; $00 <<
>965e	7b 9b					.word	BinaryCompareLessEqual           ; $01 <=
>9660	71 9b					.word	BinaryCompareNotEqual            ; $02 <>
>9662	43 b5					.word	SyntaxError                      ; $03 !!3
>9664	43 b5					.word	SyntaxError                      ; $04 ><
>9666	85 9b					.word	BinaryCompareGreaterEqual        ; $05 >=
>9668	84 9c					.word	ShiftRight                       ; $06 >>
>966a	43 b5					.word	SyntaxError                      ; $07 !!7
>966c	43 b5					.word	SyntaxError                      ; $08 !!8
>966e	43 b5					.word	SyntaxError                      ; $09 !!9
>9670	43 b5					.word	SyntaxError                      ; $0a !!10
>9672	43 b5					.word	SyntaxError                      ; $0b !!11
>9674	43 b5					.word	SyntaxError                      ; $0c !!12
>9676	43 b5					.word	SyntaxError                      ; $0d !!13
>9678	43 b5					.word	SyntaxError                      ; $0e !!14
>967a	43 b5					.word	SyntaxError                      ; $0f !!15
>967c	43 b5					.word	SyntaxError                      ; $10 @
>967e	43 b5					.word	SyntaxError                      ; $11 !!17
>9680	43 b5					.word	SyntaxError                      ; $12 !!18
>9682	43 b5					.word	SyntaxError                      ; $13 [
>9684	6e af					.word	IntegerDivide                    ; $14 \
>9686	43 b5					.word	SyntaxError                      ; $15 ]
>9688	12 9e					.word	EorInteger                       ; $16 ^
>968a	43 b5					.word	SyntaxError                      ; $17 _
>968c	43 b5					.word	SyntaxError                      ; $18 `
>968e	43 b5					.word	SyntaxError                      ; $19 !!25
>9690	43 b5					.word	SyntaxError                      ; $1a !!26
>9692	43 b5					.word	SyntaxError                      ; $1b {
>9694	cc 9d					.word	OraInteger                       ; $1c |
>9696	43 b5					.word	SyntaxError                      ; $1d }
>9698	43 b5					.word	SyntaxError                      ; $1e ~
>969a	43 b5					.word	SyntaxError                      ; $1f [7m<7F>[m
>969c	43 b5					.word	SyntaxError                      ; $20
>969e	58 9e					.word	WordIndirect                     ; $21 !
>96a0	43 b5					.word	SyntaxError                      ; $22 "
>96a2	43 b5					.word	SyntaxError                      ; $23 #
>96a4	43 b5					.word	SyntaxError                      ; $24 $
>96a6	bb af					.word	IntegerModulus                   ; $25 %
>96a8	86 9d					.word	AndInteger                       ; $26 &
>96aa	43 b5					.word	SyntaxError                      ; $27 '
>96ac	43 b5					.word	SyntaxError                      ; $28 (
>96ae	43 b5					.word	SyntaxError                      ; $29 )
>96b0	30 b0					.word	MulInteger                       ; $2a *
>96b2	18 9d					.word	AddInteger                       ; $2b +
>96b4	43 b5					.word	SyntaxError                      ; $2c ,
>96b6	5b 9d					.word	SubInteger                       ; $2d -
>96b8	43 b5					.word	SyntaxError                      ; $2e .
>96ba	cf b1					.word	FDivideCommand                   ; $2f /
>96bc	43 b5					.word	SyntaxError                      ; $30 0
>96be	43 b5					.word	SyntaxError                      ; $31 1
>96c0	43 b5					.word	SyntaxError                      ; $32 2
>96c2	43 b5					.word	SyntaxError                      ; $33 3
>96c4	43 b5					.word	SyntaxError                      ; $34 4
>96c6	43 b5					.word	SyntaxError                      ; $35 5
>96c8	43 b5					.word	SyntaxError                      ; $36 6
>96ca	43 b5					.word	SyntaxError                      ; $37 7
>96cc	43 b5					.word	SyntaxError                      ; $38 8
>96ce	43 b5					.word	SyntaxError                      ; $39 9
>96d0	43 b5					.word	SyntaxError                      ; $3a :
>96d2	43 b5					.word	SyntaxError                      ; $3b ;
>96d4	5d 9b					.word	BinaryCompareLess                ; $3c <
>96d6	53 9b					.word	BinaryCompareEqual               ; $3d =
>96d8	67 9b					.word	BinaryCompareGreater             ; $3e >
>96da	7f 9e					.word	ByteIndirect                     ; $3f ?
.96dc					VectorSet0:
>96dc	3c 96					.word	EOLCommand                       ; $80 !0:EOF
>96de	49 96					.word	Shift1Command                    ; $81 !1:SH1
>96e0	51 96					.word	Shift2Command                    ; $82 !2:SH2
>96e2	15 b3					.word	AbsUnary                         ; $83 ABS(
>96e4	4f a3					.word	AllocUnary                       ; $84 ALLOC(
>96e6	25 b3					.word	AscUnary                         ; $85 ASC(
>96e8	d0 a4					.word	ChrUnary                         ; $86 CHR$(
>96ea	f3 8d					.word	UnaryEvent                       ; $87 EVENT(
>96ec	4f 9b					.word	UnaryFalse                       ; $88 FALSE
>96ee	32 b3					.word	FracUnary                        ; $89 FRAC(
>96f0	0b 92					.word	UnaryHit                         ; $8a HIT(
>96f2	48 b3					.word	IntUnary                         ; $8b INT(
>96f4	9e b3					.word	IsValUnary                       ; $8c ISVAL(
>96f6	82 92					.word	UnaryJoyB                        ; $8d JOYB(
>96f8	5b 92					.word	UnaryJoyX                        ; $8e JOYX(
>96fa	5e 92					.word	UnaryJoyY                        ; $8f JOYY(
>96fc	aa a5					.word	Unary_Left                       ; $90 LEFT$(
>96fe	5a b3					.word	LenUnary                         ; $91 LEN(
>9700	c3 a3					.word	Unary_Max                        ; $92 MAX(
>9702	d4 a5					.word	Unary_Mid                        ; $93 MID$(
>9704	bf a3					.word	Unary_Min                        ; $94 MIN(
>9706	1a a4					.word	Unary_Not                        ; $95 NOT(
>9708	30 a4					.word	Unary_Random                     ; $96 RANDOM(
>970a	ba a5					.word	Unary_Right                      ; $97 RIGHT$(
>970c	4f a4					.word	Unary_Rnd                        ; $98 RND(
>970e	74 b3					.word	SgnUnary                         ; $99 SGN(
>9710	e2 a4					.word	SpcUnary                         ; $9a SPC(
>9712	fd a4					.word	Unary_Str                        ; $9b STR$(
>9714	1b 98					.word	UnaryTimer                       ; $9c TIMER(
>9716	43 9b					.word	UnaryTrue                        ; $9d TRUE
>9718	94 b3					.word	ValUnary                         ; $9e VAL(
>971a	5c 8e					.word	ForCommand                       ; $9f FOR
>971c	31 92					.word	IfCommand                        ; $a0 IF
>971e	59 96					.word	Unused1                          ; $a1 PROC
>9720	78 95					.word	Command_REPEAT                   ; $a2 REPEAT
>9722	a8 9a					.word	Command_WHILE                    ; $a3 WHILE
>9724	5a 92					.word	EndIf                            ; $a4 ENDIF
>9726	47 af					.word	Command_ENDPROC                  ; $a5 ENDPROC
>9728	16 8f					.word	NextCommand                      ; $a6 NEXT
>972a	59 96					.word	Unused4                          ; $a7 THEN
>972c	81 95					.word	Command_UNTIL                    ; $a8 UNTIL
>972e	c9 9a					.word	Command_WEND                     ; $a9 WEND
>9730	43 b5					.word	SyntaxError                      ; $aa BY
>9732	93 8c					.word	CallCommand                      ; $ab CALL
>9734	73 8f					.word	CircleCommand                    ; $ac CIRCLE
>9736	cd 8c					.word	ClearCommand                     ; $ad CLEAR
>9738	25 8d					.word	ClearScreen                      ; $ae CLS
>973a	43 b5					.word	SyntaxError                      ; $af COLOR
>973c	43 b5					.word	SyntaxError                      ; $b0 COLOUR
>973e	2b 8d					.word	Command_Data                     ; $b1 DATA
>9740	33 8d					.word	DimCommand                       ; $b2 DIM
>9742	59 96					.word	Unused3                          ; $b3 DOWNTO
>9744	53 92					.word	ElseCode                         ; $b4 ELSE
>9746	43 b5					.word	SyntaxError                      ; $b5 FROM
>9748	9f 91					.word	GfxCommand                       ; $b6 GFX
>974a	d1 91					.word	Command_GOSUB                    ; $b7 GOSUB
>974c	ef 91					.word	GotoCommand                      ; $b8 GOTO
>974e	43 b5					.word	SyntaxError                      ; $b9 HERE
>9750	9d 8f					.word	ImageCommand                     ; $ba IMAGE
>9752	96 92					.word	LetCommand                       ; $bb LET
>9754	f2 8f					.word	LineCommand                      ; $bc LINE
>9756	89 93					.word	Command_LOCAL                    ; $bd LOCAL
>9758	43 b5					.word	SyntaxError                      ; $be OFF
>975a	43 b5					.word	SyntaxError                      ; $bf ON
>975c	43 b5					.word	SyntaxError                      ; $c0 OUTLINE
>975e	17 94					.word	PaletteCommand                   ; $c1 PALETTE
>9760	eb 8f					.word	PlotCommand                      ; $c2 PLOT
>9762	5b 94					.word	Command_Print                    ; $c3 PRINT
>9764	12 95					.word	Command_Read                     ; $c4 READ
>9766	6f 8f					.word	RectangleCommand                 ; $c5 RECT
>9768	6b 95					.word	RemCommand                       ; $c6 REM
>976a	e1 91					.word	Command_RETURN                   ; $c7 RETURN
>976c	43 b5					.word	SyntaxError                      ; $c8 SOLID
>976e	7e 8f					.word	SpriteCommand                    ; $c9 SPRITE
>9770	ba 8f					.word	TextCommand                      ; $ca TEXT
>9772	59 96					.word	Unused2                          ; $cb TO
.9774					VectorSet1:
>9774	43 b5					.word	SyntaxError                      ; $80 !0:EOF
>9776	43 b5					.word	SyntaxError                      ; $81 !1:SH1
>9778	43 b5					.word	SyntaxError                      ; $82 !2:SH2
>977a	64 8c					.word	AssembleCommand                  ; $83 ASSEMBLE
>977c	83 8c					.word	AssertCommand                    ; $84 ASSERT
>977e	3f 91					.word	BitmapCtrl                       ; $85 BITMAP
>9780	f0 8d					.word	EndCommand                       ; $86 END
>9782	eb 92					.word	Command_List                     ; $87 LIST
>9784	0d 94					.word	NewCommand                       ; $88 NEW
>9786	9a 95					.word	Command_Restore                  ; $89 RESTORE
>9788	cc 95					.word	CommandRUN                       ; $8a RUN
>978a	84 91					.word	SpritesCtrl                      ; $8b SPRITES
>978c	16 98					.word	StopCommand                      ; $8c STOP
.978e					VectorSet2:
>978e	43 b5					.word	SyntaxError                      ; $80 !0:EOF
>9790	43 b5					.word	SyntaxError                      ; $81 !1:SH1
>9792	43 b5					.word	SyntaxError                      ; $82 !2:SH2
>9794	02 b4					.word	Assemble_adc                     ; $83 ADC
>9796	fa b3					.word	Assemble_and                     ; $84 AND
>9798	16 b4					.word	Assemble_asl                     ; $85 ASL
>979a	80 b4					.word	Assemble_bcc                     ; $86 BCC
>979c	84 b4					.word	Assemble_bcs                     ; $87 BCS
>979e	8c b4					.word	Assemble_beq                     ; $88 BEQ
>97a0	43 b4					.word	Assemble_bit                     ; $89 BIT
>97a2	74 b4					.word	Assemble_bmi                     ; $8a BMI
>97a4	88 b4					.word	Assemble_bne                     ; $8b BNE
>97a6	70 b4					.word	Assemble_bpl                     ; $8c BPL
>97a8	90 b4					.word	Assemble_bra                     ; $8d BRA
>97aa	94 b4					.word	Assemble_brk                     ; $8e BRK
>97ac	78 b4					.word	Assemble_bvc                     ; $8f BVC
>97ae	7c b4					.word	Assemble_bvs                     ; $90 BVS
>97b0	9c b4					.word	Assemble_clc                     ; $91 CLC
>97b2	f0 b4					.word	Assemble_cld                     ; $92 CLD
>97b4	b0 b4					.word	Assemble_cli                     ; $93 CLI
>97b6	e0 b4					.word	Assemble_clv                     ; $94 CLV
>97b8	0e b4					.word	Assemble_cmp                     ; $95 CMP
>97ba	57 b4					.word	Assemble_cpx                     ; $96 CPX
>97bc	52 b4					.word	Assemble_cpy                     ; $97 CPY
>97be	34 b4					.word	Assemble_dec                     ; $98 DEC
>97c0	ec b4					.word	Assemble_dex                     ; $99 DEX
>97c2	c8 b4					.word	Assemble_dey                     ; $9a DEY
>97c4	fe b3					.word	Assemble_eor                     ; $9b EOR
>97c6	39 b4					.word	Assemble_inc                     ; $9c INC
>97c8	fc b4					.word	Assemble_inx                     ; $9d INX
>97ca	e8 b4					.word	Assemble_iny                     ; $9e INY
>97cc	6b b4					.word	Assemble_jmp                     ; $9f JMP
>97ce	66 b4					.word	Assemble_jsr                     ; $a0 JSR
>97d0	0a b4					.word	Assemble_lda                     ; $a1 LDA
>97d2	2f b4					.word	Assemble_ldx                     ; $a2 LDX
>97d4	4d b4					.word	Assemble_ldy                     ; $a3 LDY
>97d6	20 b4					.word	Assemble_lsr                     ; $a4 LSR
>97d8	00 b5					.word	Assemble_nop                     ; $a5 NOP
>97da	f6 b3					.word	Assemble_ora                     ; $a6 ORA
>97dc	ac b4					.word	Assemble_pha                     ; $a7 PHA
>97de	98 b4					.word	Assemble_php                     ; $a8 PHP
>97e0	f4 b4					.word	Assemble_phx                     ; $a9 PHX
>97e2	b4 b4					.word	Assemble_phy                     ; $aa PHY
>97e4	bc b4					.word	Assemble_pla                     ; $ab PLA
>97e6	a0 b4					.word	Assemble_plp                     ; $ac PLP
>97e8	08 b5					.word	Assemble_plx                     ; $ad PLX
>97ea	c4 b4					.word	Assemble_ply                     ; $ae PLY
>97ec	1b b4					.word	Assemble_rol                     ; $af ROL
>97ee	25 b4					.word	Assemble_ror                     ; $b0 ROR
>97f0	a8 b4					.word	Assemble_rti                     ; $b1 RTI
>97f2	b8 b4					.word	Assemble_rts                     ; $b2 RTS
>97f4	12 b4					.word	Assemble_sbc                     ; $b3 SBC
>97f6	a4 b4					.word	Assemble_sec                     ; $b4 SEC
>97f8	04 b5					.word	Assemble_sed                     ; $b5 SED
>97fa	c0 b4					.word	Assemble_sei                     ; $b6 SEI
>97fc	06 b4					.word	Assemble_sta                     ; $b7 STA
>97fe	f8 b4					.word	Assemble_stp                     ; $b8 STP
>9800	2a b4					.word	Assemble_stx                     ; $b9 STX
>9802	48 b4					.word	Assemble_sty                     ; $ba STY
>9804	3e b4					.word	Assemble_stz                     ; $bb STZ
>9806	dc b4					.word	Assemble_tax                     ; $bc TAX
>9808	d8 b4					.word	Assemble_tay                     ; $bd TAY
>980a	61 b4					.word	Assemble_trb                     ; $be TRB
>980c	5c b4					.word	Assemble_tsb                     ; $bf TSB
>980e	e4 b4					.word	Assemble_tsx                     ; $c0 TSX
>9810	cc b4					.word	Assemble_txa                     ; $c1 TXA
>9812	d4 b4					.word	Assemble_txs                     ; $c2 TXS
>9814	d0 b4					.word	Assemble_tya                     ; $c3 TYA

;******  Return to file: ./common/commands/run.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/stop.asm

.9816					StopCommand:
.9816	a9 08		lda #$08		lda	#8
.9818	4c d7 9a	jmp $9ad7		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/commands/timer.asm

.981b					UnaryTimer:
.981b	fa		plx				plx
.981c	20 55 af	jsr $af55			jsr 	CheckRightBracket
.981f					TimerToStackX:
.981f	20 12 a7	jsr $a712			jsr 	NSMSetZero 					; zero result
.9822	64 01		stz $01				stz 	1 							; access I/O
.9824	ad 59 d6	lda $d659			lda 	$D659 						; copy timer in
.9827	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.982a	ad 5a d6	lda $d65a			lda 	$D65A
.982d	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9830	ad 5b d6	lda $d65b			lda 	$D65B
.9833	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9836	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/expandline.asm

.9837					ListConvertLine:
.9837	9c 9d 04	stz $049d			stz 	tbOffset
.983a	9c aa 04	stz $04aa			stz 	tokenBuffer
.983d	a0 02		ldy #$02			ldy 	#2 							; convert line number to string
.983f	b1 30		lda ($30),y			lda 	(codePtr),y
.9841	aa		tax				tax
.9842	88		dey				dey
.9843	b1 30		lda ($30),y			lda 	(codePtr),y
.9845	20 b1 b0	jsr $b0b1			jsr 	ConvertInt16
.9848	85 36		sta $36				sta 	zTemp0 						; copy number into buffer
.984a	86 37		stx $37				stx 	zTemp0+1
.984c	a0 00		ldy #$00			ldy 	#0
.984e					_LCCopyNumber:
.984e	b1 36		lda ($36),y			lda 	(zTemp0),y
.9850	20 7c 99	jsr $997c			jsr 	LCLWrite
.9853	c8		iny				iny
.9854	b1 36		lda ($36),y			lda 	(zTemp0),y
.9856	d0 f6		bne $984e			bne 	_LCCopyNumber
.9858	20 95 9a	jsr $9a95			jsr 	ScanGetCurrentLineStep 		; adjustment to indent
.985b	48		pha				pha 								; save on stack
.985c	10 0c		bpl $986a			bpl 	_LCNoAdjust 				; don't adjust indent if +ve, do after.
.985e	18		clc				clc 								; add to list indent and make 0 if goes -ve.
.985f	6d a6 04	adc $04a6			adc 	listIndent
.9862	8d a6 04	sta $04a6			sta 	listIndent
.9865	10 03		bpl $986a			bpl 	_LCNoAdjust
.9867	9c a6 04	stz $04a6			stz 	listIndent
.986a					_LCNoAdjust:
.986a	18		clc				clc		 							; work out actual indent.
.986b	ad a6 04	lda $04a6			lda 	listIndent
.986e	0a		asl a				asl 	a
.986f	69 06		adc #$06			adc 	#6
.9871	85 36		sta $36				sta 	zTemp0
.9873					_LCPadOut:
.9873	a9 20		lda #$20			lda 	#' '						; pad out to 6 characters
.9875	20 7c 99	jsr $997c			jsr 	LCLWrite
.9878	ad 9d 04	lda $049d			lda 	tbOffset
.987b	c5 36		cmp $36				cmp 	zTemp0
.987d	d0 f4		bne $9873			bne 	_LCPadOut
.987f	a0 03		ldy #$03			ldy 	#3 							; start position.
.9881					_LCMainLoop:
.9881	b1 30		lda ($30),y			lda 	(codePtr),y
.9883	c9 80		cmp #$80			cmp 	#KWC_EOL 					; end of line ?
.9885	f0 17		beq $989e			beq 	_LCExit
.9887	c9 10		cmp #$10			cmp 	#16 						; 0-5 are the double punctuations
.9889	90 1e		bcc $98a9			bcc 	_LCDoubles
.988b	c9 20		cmp #$20			cmp 	#32 						; 16-31 are shifted punctuation from 64-91
.988d	90 2a		bcc $98b9			bcc 	_LCShiftPunc
.988f	c9 40		cmp #$40			cmp 	#64 						; 32-64 are as stored, punc and digits
.9891	90 35		bcc $98c8			bcc 	_LCPunctuation
.9893	c9 80		cmp #$80			cmp 	#128 						; 64-127 are variable identifiers.
.9895	90 3e		bcc $98d5			bcc 	_LCIdentifiers
.9897	c9 fe		cmp #$fe			cmp 	#254 						; 128-253 are tokenised words
.9899	90 5a		bcc $98f5			bcc 	_LCTokens
.989b	4c 50 99	jmp $9950			jmp 	_LCData 					; 254-5 are data objects
.989e					_LCExit:
.989e	68		pla				pla 								; get old indent adjust
.989f	30 07		bmi $98a8			bmi 	_LCExit2
.98a1	18		clc				clc 								; add to indent if +ve
.98a2	6d a6 04	adc $04a6			adc 	listIndent
.98a5	8d a6 04	sta $04a6			sta 	listIndent
.98a8					_LCExit2:
.98a8	60		rts				rts
.98a9					_LCDoubles:
.98a9	48		pha				pha
.98aa	4a		lsr a				lsr 	a 							; put bit 2 into bit 1
.98ab	29 02		and #$02			and 	#2
.98ad	09 3c		ora #$3c			ora 	#60 						; make < >
.98af	20 7c 99	jsr $997c			jsr 	LCLWrite
.98b2	68		pla				pla 								; restore, do lower bit
.98b3	29 03		and #$03			and 	#3
.98b5	09 3c		ora #$3c			ora 	#60
.98b7	80 0f		bra $98c8			bra		_LCPunctuation 				; print, increment, loop
.98b9					_LCShiftPunc:
.98b9	aa		tax				tax 								; save in X
.98ba	29 07		and #$07			and 	#7 							; lower 3 bits
.98bc	f0 02		beq $98c0			beq 	_LCNoAdd
.98be	09 18		ora #$18			ora 	#24 						; adds $18 to it.
.98c0					_LCNoAdd:
.98c0	e0 18		cpx #$18			cpx 	#24 						; if >= 24 add $20
.98c2	90 02		bcc $98c6			bcc 	_LCNoAdd2
.98c4	09 20		ora #$20			ora 	#32 						; adds $20
.98c6					_LCNoAdd2:
.98c6	09 40		ora #$40			ora 	#$40 						; shift into 64-127 range and fall through.
.98c8					_LCPunctuation:
.98c8	c9 3a		cmp #$3a			cmp 	#':' 						; check if :
.98ca	d0 03		bne $98cf			bne 	_LCPContinue
.98cc	20 8b 99	jsr $998b			jsr 	LCDeleteLastSpace
.98cf					_LCPContinue:
.98cf	c8		iny				iny 								; consume character
.98d0	20 7c 99	jsr $997c			jsr 	LCLWrite 					; write it out.
.98d3	80 ac		bra $9881			bra 	_LCMainLoop 				; go round again.
.98d5					_LCIdentifiers:
.98d5	18		clc				clc 								; convert to physical address
.98d6	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.98d8	85 37		sta $37				sta 	zTemp0+1
.98da	c8		iny				iny
.98db	b1 30		lda ($30),y			lda 	(codePtr),y
.98dd	85 36		sta $36				sta 	zTemp0
.98df	c8		iny				iny
.98e0	5a		phy				phy 								; save position
.98e1	a0 07		ldy #$07			ldy 	#7 							; output the identifier.
.98e3					_LCOutIdentifier:
.98e3	c8		iny				iny
.98e4	b1 36		lda ($36),y			lda 	(zTemp0),y
.98e6	29 7f		and #$7f			and 	#$7F
.98e8	20 ca 99	jsr $99ca			jsr 	LCLLowerCase
.98eb	20 7c 99	jsr $997c			jsr 	LCLWrite
.98ee	b1 36		lda ($36),y			lda 	(zTemp0),y				 	; ends when bit 7 set.
.98f0	10 f1		bpl $98e3			bpl 	_LCOutIdentifier
.98f2	7a		ply				ply 								; restore position
.98f3	80 8c		bra $9881			bra 	_LCMainLoop
.98f5					_LCTokens:
.98f5	aa		tax				tax 								; token in X
.98f6	a9 01		lda #$01			lda 	#((KeywordSet2) & $FF)
.98f8	85 36		sta $36				sta 	0+zTemp0
.98fa	a9 ab		lda #$ab			lda 	#((KeywordSet2) >> 8)
.98fc	85 37		sta $37				sta 	1+zTemp0
.98fe	e0 82		cpx #$82			cpx 	#$82
.9900	f0 16		beq $9918			beq 	_LCUseShift
.9902	a9 b3		lda #$b3			lda 	#((KeywordSet1) & $FF)
.9904	85 36		sta $36				sta 	0+zTemp0
.9906	a9 aa		lda #$aa			lda 	#((KeywordSet1) >> 8)
.9908	85 37		sta $37				sta 	1+zTemp0
.990a	e0 81		cpx #$81			cpx 	#$81
.990c	f0 0a		beq $9918			beq 	_LCUseShift
.990e	a9 ce		lda #$ce			lda 	#((KeywordSet0) & $FF)
.9910	85 36		sta $36				sta 	0+zTemp0
.9912	a9 a8		lda #$a8			lda 	#((KeywordSet0) >> 8)
.9914	85 37		sta $37				sta 	1+zTemp0
.9916	80 01		bra $9919			bra 	_LCNoShift
.9918					_LCUseShift:
.9918	c8		iny				iny
.9919					_LCNoShift:
.9919	20 9f 99	jsr $999f			jsr 	LCCheckSpaceRequired 		; do we need a space ?
.991c	b1 30		lda ($30),y			lda 	(codePtr),y
.991e	aa		tax				tax 								; into X
.991f					_LCFindText:
.991f	ca		dex				dex
.9920	10 0e		bpl $9930			bpl 	_LCFoundText 				; found text.
.9922	b2 36		lda ($36)			lda 	(zTemp0) 					; length of text
.9924	1a		inc a				inc 	a 							; one extra for size
.9925	38		sec				sec 								; one extra for checksum
.9926	65 36		adc $36				adc 	zTemp0 						; go to next token
.9928	85 36		sta $36				sta 	zTemp0
.992a	90 f3		bcc $991f			bcc 	_LCFindText
.992c	e6 37		inc $37				inc 	zTemp0+1
.992e	80 ef		bra $991f			bra 	_LCFindText
.9930					_LCFoundText:
.9930	5a		phy				phy 								; save List position
.9931	b2 36		lda ($36)			lda 	(zTemp0)					; count to print
.9933	aa		tax				tax
.9934	a0 02		ldy #$02			ldy 	#2
.9936					_LCCopyToken:
.9936	b1 36		lda ($36),y			lda 	(zTemp0),y
.9938	20 ca 99	jsr $99ca			jsr 	LCLLowerCase
.993b	20 7c 99	jsr $997c			jsr 	LCLWrite
.993e	c8		iny				iny
.993f	ca		dex				dex
.9940	d0 f4		bne $9936			bne 	_LCCopyToken
.9942	c9 28		cmp #$28			cmp 	#"(" 						; if last char not ( print a space
.9944	f0 05		beq $994b			beq 	_LCNoSpace
.9946	a9 20		lda #$20			lda 	#' '
.9948	20 7c 99	jsr $997c			jsr 	LCLWrite
.994b					_LCNoSpace:
.994b	7a		ply				ply 								; restore position.
.994c	c8		iny				iny 								; consume token
.994d	4c 81 98	jmp $9881			jmp 	_LCMainLoop 				; and go around again.
.9950					_LCData:
.9950	48		pha				pha 								; save type $FE/$FF
.9951	a2 24		ldx #$24			ldx 	#'$' 						; figure out $ or "
.9953	c9 fe		cmp #$fe			cmp 	#$FE
.9955	f0 02		beq $9959			beq 	_LCHaveOpener
.9957	a2 22		ldx #$22			ldx 	#'"'
.9959					_LCHaveOpener:
.9959	8a		txa				txa 								; output prefix (# or ")
.995a	20 7c 99	jsr $997c			jsr 	LCLWrite
.995d	c8		iny				iny 								; get count
.995e	b1 30		lda ($30),y			lda 	(codePtr),y
.9960	aa		tax				tax
.9961	c8		iny				iny 								; point at first character
.9962					_LCOutData:
.9962	b1 30		lda ($30),y			lda 	(codePtr),y
.9964	c9 00		cmp #$00			cmp 	#0
.9966	f0 03		beq $996b			beq 	_LCNoPrint
.9968	20 7c 99	jsr $997c			jsr 	LCLWrite
.996b					_LCNoPrint:
.996b	c8		iny				iny
.996c	ca		dex				dex
.996d	d0 f3		bne $9962			bne 	_LCOutData
.996f	68		pla				pla 								; closing " required ?
.9970	c9 ff		cmp #$ff			cmp 	#$FF
.9972	d0 05		bne $9979			bne 	_LCNoQuote
.9974	a9 22		lda #$22			lda 	#'"'
.9976	20 7c 99	jsr $997c			jsr 	LCLWrite
.9979					_LCNoQuote:
.9979	4c 81 98	jmp $9881			jmp 	_LCMainLoop
.997c					LCLWrite:
.997c	da		phx				phx
.997d	ae 9d 04	ldx $049d			ldx 	tbOffset
.9980	9d aa 04	sta $04aa,x			sta 	tokenBuffer,x
.9983	9e ab 04	stz $04ab,x			stz 	tokenBuffer+1,x
.9986	ee 9d 04	inc $049d			inc 	tbOffset
.9989	fa		plx				plx
.998a	60		rts				rts
.998b					LCDeleteLastSpace:
.998b	48		pha				pha
.998c	da		phx				phx
.998d	ae 9d 04	ldx $049d			ldx 	tbOffset
.9990	f0 0a		beq $999c			beq 	_LCDLSExit
.9992	bd a9 04	lda $04a9,x			lda 	tokenBuffer-1,x
.9995	c9 20		cmp #$20			cmp 	#' '
.9997	d0 03		bne $999c			bne 	_LCDLSExit
.9999	ce 9d 04	dec $049d			dec 	tbOffset
.999c					_LCDLSExit:
.999c	fa		plx				plx
.999d	68		pla				pla
.999e	60		rts				rts
.999f					LCCheckSpaceRequired:
.999f	ae 9d 04	ldx $049d			ldx 	tbOffset
.99a2	bd a9 04	lda $04a9,x			lda 	tokenBuffer-1,x 			; previous character
.99a5	c9 24		cmp #$24			cmp 	#'$' 						; $ # and ) require that token space.
.99a7	f0 1b		beq $99c4			beq 	_LCCSRSpace
.99a9	c9 29		cmp #$29			cmp 	#')'
.99ab	f0 17		beq $99c4			beq 	_LCCSRSpace
.99ad	c9 23		cmp #$23			cmp 	#'#'
.99af	f0 13		beq $99c4			beq 	_LCCSRSpace
.99b1	20 ca 99	jsr $99ca			jsr 	LCLLowerCase 				; saves a little effort
.99b4	c9 30		cmp #$30			cmp 	#"0" 						; check if it was 0-9 A-Z a-z if so need space.
.99b6	90 11		bcc $99c9			bcc 	_LCCSRExit
.99b8	c9 3a		cmp #$3a			cmp 	#"9"+1
.99ba	90 08		bcc $99c4			bcc 	_LCCSRSpace
.99bc	c9 61		cmp #$61			cmp 	#"a"
.99be	90 09		bcc $99c9			bcc 	_LCCSRExit
.99c0	c9 7b		cmp #$7b			cmp 	#"z"+1
.99c2	b0 05		bcs $99c9			bcs 	_LCCSRExit
.99c4					_LCCSRSpace:
.99c4	a9 20		lda #$20			lda 	#' '
.99c6	20 7c 99	jsr $997c			jsr 	LCLWrite
.99c9					_LCCSRExit:
.99c9	60		rts				rts
.99ca					LCLLowerCase:
.99ca	c9 41		cmp #$41			cmp 	#"A"
.99cc	90 06		bcc $99d4			bcc 	_LCLLCOut
.99ce	c9 5b		cmp #$5b			cmp 	#"Z"+1
.99d0	b0 02		bcs $99d4			bcs 	_LCLLCOut
.99d2	69 20		adc #$20			adc 	#$20
.99d4					_LCLLCOut:
.99d4	60		rts				rts
.99d5					LCLUpperCase:
.99d5	c9 61		cmp #$61			cmp 	#"a"
.99d7	90 06		bcc $99df			bcc 	_LCLUCOut
.99d9	c9 7b		cmp #$7b			cmp 	#"z"+1
.99db	b0 02		bcs $99df			bcs 	_LCLUCOut
.99dd	e9 1f		sbc #$1f			sbc 	#$1F
.99df					_LCLUCOut:
.99df	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/procscan.asm

.99e0					ProcedureScan:
.99e0	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.99e2	85 30		sta $30				sta 	codePtr
.99e4	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.99e6	85 31		sta $31				sta 	codePtr+1
.99e8					_PSLoop:
.99e8	b2 30		lda ($30)			lda 	(codePtr)
.99ea	f0 42		beq $9a2e			beq 	_PSExit
.99ec	a0 03		ldy #$03			ldy 	#3 							; is it PROC ?
.99ee	b1 30		lda ($30),y			lda 	(codePtr),y
.99f0	c9 a1		cmp #$a1			cmp 	#KWD_PROC
.99f2	d0 2d		bne $9a21			bne 	_PSNext
.99f4	c8		iny				iny 								; get the address of the record to zTemp0 and
.99f5	b1 30		lda ($30),y			lda 	(codePtr),y
.99f7	29 c0		and #$c0			and 	#$C0
.99f9	c9 40		cmp #$40			cmp 	#$40
.99fb	d0 32		bne $9a2f			bne 	_PSSyntax
.99fd	b1 30		lda ($30),y			lda 	(codePtr),y
.99ff	18		clc				clc
.9a00	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.9a02	85 37		sta $37				sta 	zTemp0+1
.9a04	c8		iny				iny 								; LSB
.9a05	b1 30		lda ($30),y			lda 	(codePtr),y
.9a07	85 36		sta $36				sta 	zTemp0
.9a09	c8		iny				iny 								; character after variable call.
.9a0a	98		tya				tya 								; save Y offset at +7
.9a0b	a0 07		ldy #$07			ldy 	#7
.9a0d	91 36		sta ($36),y			sta 	(zTemp0),y
.9a0f	a9 18		lda #$18			lda 	#NSTProcedure 				; mark it as procedure
.9a11	a0 02		ldy #$02			ldy 	#2
.9a13	91 36		sta ($36),y			sta 	(zTemp0),y
.9a15	a2 00		ldx #$00			ldx 	#0 							; copy code-Ptr in
.9a17					_PSCopy:
.9a17	b5 30		lda $30,x			lda 	safePtr,x
.9a19	c8		iny				iny
.9a1a	91 36		sta ($36),y			sta 	(zTemp0),y
.9a1c	e8		inx				inx
.9a1d	e0 04		cpx #$04			cpx 	#4
.9a1f	d0 f6		bne $9a17			bne 	_PSCopy
.9a21					_PSNext:
.9a21	18		clc				clc
.9a22	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.9a24	65 30		adc $30				adc 	codePtr
.9a26	85 30		sta $30				sta 	codePtr
.9a28	90 02		bcc $9a2c			bcc 	_CREExit
.9a2a	e6 31		inc $31				inc 	codePtr+1
.9a2c					_CREExit:
.9a2c	80 ba		bra $99e8			bra 	_PSLoop
.9a2e					_PSExit:
.9a2e	60		rts				rts
.9a2f					_PSSyntax:
.9a2f	4c 43 b5	jmp $b543			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/scanforward.asm

.9a32					ScanForward:
.9a32	64 38		stz $38				stz 	zTemp1 						; this is the structure count - goes up with WHILE/FOR
.9a34	86 37		stx $37				stx 	zTemp0+1
.9a36	85 36		sta $36				sta 	zTemp0 						; save XA as the two possible matches.
.9a38					_ScanLoop:
.9a38	b1 30		lda ($30),y			lda 	(codePtr),y
.9a3a	c8		iny				iny
.9a3b	a6 38		ldx $38				ldx 	zTemp1 						; if the count is > 0 cannot match as in substructure
.9a3d	d0 0e		bne $9a4d			bne 	_ScanGoNext
.9a3f	c5 36		cmp $36				cmp 	zTemp0 						; see if either matches
.9a41	f0 04		beq $9a47			beq 	_ScanMatch
.9a43	c5 37		cmp $37				cmp 	zTemp0+1
.9a45	d0 06		bne $9a4d			bne 	_ScanGoNext
.9a47					_ScanMatch:
.9a47	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if asked for EOL, backtrack.
.9a49	d0 01		bne $9a4c			bne 	_ScanNotEndEOL
.9a4b	88		dey				dey
.9a4c					_ScanNotEndEOL:
.9a4c	60		rts				rts
.9a4d					_ScanGoNext:
.9a4d	20 52 9a	jsr $9a52			jsr  	ScanForwardOne
.9a50	80 e6		bra $9a38			bra 	_ScanLoop
.9a52					ScanForwardOne:
.9a52	c9 40		cmp #$40			cmp 	#$40 						; if 00-3F, punctuation characters, loop back
.9a54	90 3e		bcc $9a94			bcc 	_SFWExit
.9a56	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if 40-82, skip one extra.
.9a58	90 18		bcc $9a72			bcc 	_ScanSkipOne
.9a5a	c9 fc		cmp #$fc			cmp 	#$FC 						; FC-FF are data skips
.9a5c	b0 2f		bcs $9a8d			bcs 	_ScanSkipData
.9a5e	c9 9f		cmp #$9f			cmp 	#KWC_FIRST_STRUCTURE 		; structure keyword ?
.9a60	90 32		bcc $9a94			bcc 	_SFWExit 					; if not, ordinary keywords.
.9a62	c9 aa		cmp #$aa			cmp 	#KWC_LAST_STRUCTURE+1
.9a64	b0 2e		bcs $9a94			bcs 	_SFWExit
.9a66	c6 38		dec $38				dec 	zTemp1 						; decrement the sructure count
.9a68	c9 a4		cmp #$a4			cmp 	#KWC_FIRST_STRUCTURE_DEC 	; back if it is a dec structure (e.g. WEND/NEXT)
.9a6a	b0 28		bcs $9a94			bcs 	_SFWExit
.9a6c	e6 38		inc $38				inc 	zTemp1 						; so it's an increment structure
.9a6e	e6 38		inc $38				inc 	zTemp1 						; twice to undo the dec
.9a70	80 22		bra $9a94			bra 	_SFWExit
.9a72					_ScanSkipOne:
.9a72	c8		iny				iny 								; consume the extra one.
.9a73	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if not EOL loop back
.9a75	d0 1d		bne $9a94			bne 	_SFWExit
.9a77	18		clc				clc
.9a78	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.9a7a	65 30		adc $30				adc 	codePtr
.9a7c	85 30		sta $30				sta 	codePtr
.9a7e	90 02		bcc $9a82			bcc 	_CREExit
.9a80	e6 31		inc $31				inc 	codePtr+1
.9a82					_CREExit:
.9a82	a0 03		ldy #$03			ldy 	#3 							; scan start position.
.9a84	b2 30		lda ($30)			lda 	(codePtr)
.9a86	d0 0c		bne $9a94			bne 	_SFWExit 					; if not zero, more to scan
.9a88	a9 13		lda #$13		lda	#19
.9a8a	4c d7 9a	jmp $9ad7		jmp	ErrorHandler
.9a8d					_ScanSkipData:
.9a8d	88		dey				dey 								; point at data token
.9a8e	c8		iny				iny
.9a8f	98		tya				tya
.9a90	38		sec				sec
.9a91	71 30		adc ($30),y			adc 	(codePtr),y
.9a93	a8		tay				tay
.9a94					_SFWExit:
.9a94	60		rts				rts
.9a95					ScanGetCurrentLineStep:
.9a95	64 38		stz $38				stz 	zTemp1
.9a97	a0 03		ldy #$03			ldy 	#3
.9a99					_SGCLSLoop:
.9a99	b1 30		lda ($30),y			lda 	(codePtr),y
.9a9b	c8		iny				iny
.9a9c	c9 80		cmp #$80			cmp 	#KWC_EOL	 				; if EOL exit
.9a9e	f0 05		beq $9aa5			beq 	_SGCLSExit
.9aa0	20 52 9a	jsr $9a52			jsr 	ScanForwardOne
.9aa3	80 f4		bra $9a99			bra 	_SGCLSLoop
.9aa5					_SGCLSExit:
.9aa5	a5 38		lda $38				lda 	zTemp1
.9aa7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/while.asm

.9aa8					Command_WHILE:
.9aa8	5a		phy				phy 								; save position of the test
.9aa9	a2 00		ldx #$00			ldx 	#0
.9aab	20 52 a6	jsr $a652			jsr 	EvaluateNumber 				; work out the number
.9aae	20 42 a7	jsr $a742			jsr 	NSMIsZero 					; check if zero
.9ab1	f0 0e		beq $9ac1			beq 	_WHExitLoop 				; if so exit the loop
.9ab3	98		tya				tya 								; position *after* test.
.9ab4	7a		ply				ply 								; restore position before test, at WHILE
.9ab5	88		dey				dey
.9ab6	48		pha				pha 								; push after test on the stack
.9ab7	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; allocate 6 bytes on the return stack.
.9ab9	20 c6 a7	jsr $a7c6			jsr 	StackOpen
.9abc	20 0a a8	jsr $a80a			jsr 	STKSaveCodePosition 		; save loop position - where the test value is.
.9abf	7a		ply				ply 								; restore the position *after* the test
.9ac0	60		rts				rts
.9ac1					_WHExitLoop:
.9ac1	68		pla				pla 								; throw post loop position
.9ac2	a9 a9		lda #$a9			lda 	#KWD_WEND 					; scan forward past WEND
.9ac4	aa		tax				tax
.9ac5	20 32 9a	jsr $9a32			jsr 	ScanForward
.9ac8	60		rts				rts
.9ac9					Command_WEND:
.9ac9	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; check WHILE is TOS
.9acb	a2 10		ldx #$10			ldx 	#ERRID_WHILE 				; this error
.9acd	20 f2 a7	jsr $a7f2			jsr 	StackCheckFrame
.9ad0	20 1b a8	jsr $a81b			jsr 	STKLoadCodePosition 		; loop back
.9ad3	20 e4 a7	jsr $a7e4			jsr 	StackClose		 			; erase the frame
.9ad6	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/charcheck.asm

.af55					CheckRightBracket:
.af55	b1 30		lda ($30),y			lda 	(codePtr),y
.af57	c8		iny				iny
.af58	c9 29		cmp #$29			cmp 	#KWD_RPAREN 						; exit if matches
.af5a	d0 0f		bne $af6b			bne 	CNAFail
.af5c	60		rts				rts
.af5d					CheckComma:
.af5d	b1 30		lda ($30),y			lda 	(codePtr),y
.af5f	c8		iny				iny
.af60	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 						; exit if matches
.af62	d0 07		bne $af6b			bne 	CNAFail
.af64	60		rts				rts
.af65					CheckNextA:
.af65	d1 30		cmp ($30),y			cmp 	(codePtr),y
.af67	d0 02		bne $af6b			bne 	CNAFail
.af69	c8		iny				iny 								; skip character
.af6a	60		rts				rts 								; and exit
.af6b					CNAFail:
.af6b	4c 43 b5	jmp $b543			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/errors.asm

.9ad7					ErrorHandler:
.9ad7	a8		tay				tay 								; find the error text
.9ad8	f0 49		beq $9b23			beq 	_EHEnd
.9ada	a2 00		ldx #$00			ldx 	#0
.9adc	a9 5c		lda #$5c			lda 	#((ErrorText) & $FF)
.9ade	85 36		sta $36				sta 	0+zTemp0
.9ae0	a9 b5		lda #$b5			lda 	#((ErrorText) >> 8)
.9ae2	85 37		sta $37				sta 	1+zTemp0
.9ae4					_EHFind:
.9ae4	88		dey				dey 								; found the error text ?
.9ae5	f0 0e		beq $9af5			beq 	_EHFound
.9ae7					_EHFindZero:
.9ae7	b2 36		lda ($36)			lda 	(zTemp0) 					; find the next error
.9ae9	e6 36		inc $36				inc 	zTemp0
.9aeb	d0 02		bne $9aef			bne 	_EHFNoCarry
.9aed	e6 37		inc $37				inc 	zTemp0+1
.9aef					_EHFNoCarry:
.9aef	c9 00		cmp #$00			cmp 	#0
.9af1	d0 f4		bne $9ae7			bne 	_EHFindZero
.9af3	80 ef		bra $9ae4			bra 	_EHFind
.9af5					_EHFound:
.9af5	a5 36		lda $36				lda 	zTemp0 						; print message
.9af7	a6 37		ldx $37				ldx 	zTemp0+1
.9af9	20 30 9b	jsr $9b30			jsr 	PrintStringXA
.9afc	a0 01		ldy #$01			ldy 	#1 							; if line number zero don't print i
.9afe	b1 30		lda ($30),y			lda 	(codePtr),y
.9b00	d0 05		bne $9b07			bne 	_EHAtMsg
.9b02	c8		iny				iny
.9b03	b1 30		lda ($30),y			lda 	(codePtr),y
.9b05	f0 17		beq $9b1e			beq 	_EHCREnd
.9b07					_EHAtMsg:
.9b07	a2 9b		ldx #$9b			ldx 	#_AtMsg >> 8 				; print " at "
.9b09	a9 26		lda #$26			lda 	#_AtMsg & $FF
.9b0b	20 30 9b	jsr $9b30			jsr 	PrintStringXA
.9b0e	a0 01		ldy #$01			ldy 	#1 							; line number into XA
.9b10	b1 30		lda ($30),y			lda 	(codePtr),y
.9b12	48		pha				pha
.9b13	c8		iny				iny
.9b14	b1 30		lda ($30),y			lda 	(codePtr),y
.9b16	aa		tax				tax
.9b17	68		pla				pla
.9b18	20 b1 b0	jsr $b0b1			jsr 	ConvertInt16 				; convert XA to string
.9b1b	20 30 9b	jsr $9b30			jsr 	PrintStringXA 				; and print it.
.9b1e					_EHCREnd:
.9b1e	a9 0d		lda #$0d			lda 	#13 						; new line
.9b20	20 fb b6	jsr $b6fb			jsr 	EXTPrintCharacter
.9b23					_EHEnd:
.9b23	4c 34 8c	jmp $8c34			jmp 	WarmStart
>9b26	20 61 74 20 6c 69 6e 65		_AtMsg:	.text 	" at line ",0
>9b2e	20 00
.9b30					PrintStringXA:
.9b30	5a		phy				phy
.9b31	86 37		stx $37				stx 	zTemp0+1
.9b33	85 36		sta $36				sta 	zTemp0
.9b35	a0 00		ldy #$00			ldy 	#0
.9b37					_PSXALoop:
.9b37	b1 36		lda ($36),y			lda 	(zTemp0),y
.9b39	f0 06		beq $9b41			beq 	_PSXAExit
.9b3b	20 fb b6	jsr $b6fb			jsr 	EXTPrintCharacter
.9b3e	c8		iny				iny
.9b3f	80 f6		bra $9b37			bra 	_PSXALoop
.9b41					_PSXAExit:
.9b41	7a		ply				ply
.9b42	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/compare.asm

.9b43					UnaryTrue:
.9b43	fa		plx				plx
.9b44					ReturnTrue:
.9b44	a9 01		lda #$01			lda 	#1  						; set to 1
.9b46	20 14 a7	jsr $a714			jsr 	NSMSetByte
.9b49	a9 80		lda #$80			lda 	#$80 						; set sign flag, so it is -1
.9b4b	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9b4e	60		rts				rts
.9b4f					UnaryFalse:
.9b4f	fa		plx				plx
.9b50					ReturnFalse:
.9b50	4c 12 a7	jmp $a712			jmp 	NSMSetZero 					; set it all to zero
.9b53					BinaryCompareEqual:
.9b53	fa		plx				plx
.9b54	20 8f 9b	jsr $9b8f			jsr 	CompareBaseCode
.9b57	c9 00		cmp #$00			cmp 	#0
.9b59	f0 e9		beq $9b44			beq 	ReturnTrue
.9b5b	80 f3		bra $9b50			bra 	ReturnFalse
.9b5d					BinaryCompareLess:
.9b5d	fa		plx				plx
.9b5e	20 8f 9b	jsr $9b8f			jsr 	CompareBaseCode
.9b61	c9 ff		cmp #$ff			cmp 	#$FF
.9b63	f0 df		beq $9b44			beq 	ReturnTrue
.9b65	80 e9		bra $9b50			bra 	ReturnFalse
.9b67					BinaryCompareGreater:
.9b67	fa		plx				plx
.9b68	20 8f 9b	jsr $9b8f			jsr 	CompareBaseCode
.9b6b	c9 01		cmp #$01			cmp 	#1
.9b6d	f0 d5		beq $9b44			beq 	ReturnTrue
.9b6f	80 df		bra $9b50			bra 	ReturnFalse
.9b71					BinaryCompareNotEqual:
.9b71	fa		plx				plx
.9b72	20 8f 9b	jsr $9b8f			jsr 	CompareBaseCode
.9b75	c9 00		cmp #$00			cmp 	#0
.9b77	d0 cb		bne $9b44			bne 	ReturnTrue
.9b79	80 d5		bra $9b50			bra 	ReturnFalse
.9b7b					BinaryCompareLessEqual:
.9b7b	fa		plx				plx
.9b7c	20 8f 9b	jsr $9b8f			jsr 	CompareBaseCode
.9b7f	c9 01		cmp #$01			cmp 	#1
.9b81	d0 c1		bne $9b44			bne 	ReturnTrue
.9b83	80 cb		bra $9b50			bra 	ReturnFalse
.9b85					BinaryCompareGreaterEqual:
.9b85	fa		plx				plx
.9b86	20 8f 9b	jsr $9b8f			jsr 	CompareBaseCode
.9b89	c9 ff		cmp #$ff			cmp 	#$FF
.9b8b	d0 b7		bne $9b44			bne 	ReturnTrue
.9b8d	80 c1		bra $9b50			bra 	ReturnFalse
.9b8f					CompareBaseCode:
.9b8f	20 f8 9f	jsr $9ff8			jsr 	DereferenceTopTwo 			; make both values if references.
.9b92	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if either is a string.
.9b95	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9b98	29 10		and #$10			and 	#NSTString
.9b9a	d0 40		bne $9bdc			bne 	_CBCString
.9b9c	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check both are integers
.9b9f	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9ba2	d0 3b		bne $9bdf			bne 	_CBCFloat
.9ba4	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9ba7	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9baa	29 08		and #$08			and 	#NSTFloat
.9bac	d0 31		bne $9bdf			bne 	_CBCFloat
.9bae	20 e2 9b	jsr $9be2			jsr 	CompareFixMinusZero
.9bb1	e8		inx				inx
.9bb2	20 e2 9b	jsr $9be2			jsr 	CompareFixMinusZero
.9bb5	ca		dex				dex
.9bb6	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; are the signs different ?
.9bb9	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.9bbc	10 0b		bpl $9bc9			bpl 	_CDCSameSign
.9bbe	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; if first one is -ve
.9bc1	30 16		bmi $9bd9			bmi 	_CBCLess 					; return $FF
.9bc3					_CBCGreater:
.9bc3	a9 01		lda #$01			lda 	#1
.9bc5	60		rts				rts
.9bc6					_CBCEqual:
.9bc6	a9 00		lda #$00			lda 	#0
.9bc8	60		rts				rts
.9bc9					_CDCSameSign:
.9bc9	20 f2 9c	jsr $9cf2			jsr 	SubTopTwoStack 				; unsigned subtract
.9bcc	20 42 a7	jsr $a742			jsr 	NSMIsZero 					; or the mantissa together
.9bcf	f0 f5		beq $9bc6			beq 	_CBCEqual 					; -0 == 0
.9bd1	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; sign of the result. if +ve return $01 else return $FF
.9bd4	5d 01 04	eor $0401,x			eor 	NSStatus+1,x 				; however if both were -ve this is inverted
.9bd7	10 ea		bpl $9bc3			bpl 	_CBCGreater
.9bd9					_CBCLess:
.9bd9	a9 ff		lda #$ff			lda 	#$FF
.9bdb	60		rts				rts
.9bdc					_CBCString:
.9bdc	4c 48 9c	jmp $9c48			jmp 	CompareStrings
.9bdf					_CBCFloat:
.9bdf	4c b5 b1	jmp $b1b5			jmp 	CompareFloat
.9be2					CompareFixMinusZero:
.9be2	20 42 a7	jsr $a742			jsr 	NSMIsZero
.9be5	d0 03		bne $9bea			bne 	_CFXMZNotZero
.9be7	9e 00 04	stz $0400,x			stz 	NSStatus,x
.9bea					_CFXMZNotZero:
.9bea	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/concat.asm

.9beb					StringConcat:
.9beb	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check both strings
.9bee	3d 01 04	and $0401,x			and 	NSStatus+1,x
.9bf1	29 18		and #$18			and 	#NSBTypeMask
.9bf3	c9 10		cmp #$10			cmp 	#NSTString
.9bf5	d0 4e		bne $9c45			bne		_SCType
.9bf7	64 38		stz $38				stz 	zTemp1 						; counting total length
.9bf9	e8		inx				inx
.9bfa	20 18 9c	jsr $9c18			jsr 	_SCSetupZ0 					; setup for second
.9bfd	20 23 9c	jsr $9c23			jsr 	_SCLengthZ0 				; length for second
.9c00	ca		dex				dex
.9c01	20 18 9c	jsr $9c18			jsr 	_SCSetupZ0 					; setup for first
.9c04	20 23 9c	jsr $9c23			jsr 	_SCLengthZ0 				; length for first
.9c07	a5 38		lda $38				lda 	zTemp1 						; allocate memory
.9c09	20 c4 b8	jsr $b8c4			jsr 	StringTempAllocate
.9c0c	20 36 9c	jsr $9c36			jsr 	_SCCopy 					; copy first out, using zTemp0 from above
.9c0f	e8		inx				inx
.9c10	20 18 9c	jsr $9c18			jsr 	_SCSetupZ0 					; copy second out
.9c13	20 36 9c	jsr $9c36			jsr 	_SCCopy
.9c16	ca		dex				dex
.9c17	60		rts				rts
.9c18					_SCSetupZ0:
.9c18	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9c1b	85 36		sta $36				sta 	zTemp0
.9c1d	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9c20	85 37		sta $37				sta 	zTemp0+1
.9c22	60		rts				rts
.9c23					_SCLengthZ0:
.9c23	5a		phy				phy
.9c24	a0 00		ldy #$00			ldy 	#0
.9c26					_SCLenLoop:
.9c26	b1 36		lda ($36),y			lda 	(zTemp0),y
.9c28	f0 0a		beq $9c34			beq 	_SCLExit
.9c2a	c8		iny				iny
.9c2b	e6 38		inc $38				inc 	zTemp1
.9c2d	10 f7		bpl $9c26			bpl		_SCLenLoop
.9c2f	a9 09		lda #$09		lda	#9
.9c31	4c d7 9a	jmp $9ad7		jmp	ErrorHandler
.9c34					_SCLExit:
.9c34	7a		ply				ply
.9c35	60		rts				rts
.9c36					_SCCopy:
.9c36	5a		phy				phy
.9c37	a0 00		ldy #$00			ldy 	#0
.9c39					_SCCopyLoop:
.9c39	b1 36		lda ($36),y			lda 	(zTemp0),y
.9c3b	f0 06		beq $9c43			beq 	_SCCExit
.9c3d	20 02 b9	jsr $b902			jsr 	StringTempWrite
.9c40	c8		iny				iny
.9c41	80 f6		bra $9c39			bra 	_SCCopyLoop
.9c43					_SCCExit:
.9c43	7a		ply				ply
.9c44	60		rts				rts
.9c45					_SCType:
.9c45	4c 4d b5	jmp $b54d			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/divide.asm

.af6e					IntegerDivide:
.af6e	fa		plx				plx
.af6f	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.af72	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.af75	0a		asl a				asl 	a 							; shift reference bit into sign bit
.af76	0a		asl a				asl 	a
.af77	10 05		bpl $af7e			bpl 	_NotRef
.af79	48		pha				pha
.af7a	20 f8 9f	jsr $9ff8			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.af7d	68		pla				pla
.af7e					_NotRef:
.af7e	0a		asl a				asl 	a
.af7f	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.af81	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.af84	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.af87	f0 03		beq $af8c			beq 	_IntegerCode 				; if clear, then we have two integers
.af89	4c 4d b5	jmp $b54d			jmp 	TypeError 					; anything else, type mismatch.
.af8c					_IntegerCode:
.af8c	20 ae af	jsr $afae			jsr 	CheckDivideZero 			; do div zero check
.af8f	20 e6 af	jsr $afe6			jsr 	Int32Divide 				; do the division
.af92	20 a3 b0	jsr $b0a3			jsr 	CalculateSign 				; calculate result sign
.af95					NSMCopyPlusTwoToZero:
.af95	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.af98	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.af9b	bd 12 04	lda $0412,x			lda 	NSMantissa1+2,x
.af9e	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.afa1	bd 1a 04	lda $041a,x			lda 	NSMantissa2+2,x
.afa4	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.afa7	bd 22 04	lda $0422,x			lda 	NSMantissa3+2,x
.afaa	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.afad	60		rts				rts
.afae					CheckDivideZero:
.afae	e8		inx				inx
.afaf	20 42 a7	jsr $a742			jsr 	NSMIsZero
.afb2	f0 02		beq $afb6			beq 	_CDVError
.afb4	ca		dex				dex
.afb5	60		rts				rts
.afb6					_CDVError:
.afb6	a9 03		lda #$03		lda	#3
.afb8	4c d7 9a	jmp $9ad7		jmp	ErrorHandler
.afbb					IntegerModulus:
.afbb	fa		plx				plx
.afbc	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.afbf	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.afc2	0a		asl a				asl 	a 							; shift reference bit into sign bit
.afc3	0a		asl a				asl 	a
.afc4	10 05		bpl $afcb			bpl 	_NotRef
.afc6	48		pha				pha
.afc7	20 f8 9f	jsr $9ff8			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.afca	68		pla				pla
.afcb					_NotRef:
.afcb	0a		asl a				asl 	a
.afcc	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.afce	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.afd1	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.afd4	f0 03		beq $afd9			beq 	_IntegerCode 				; if clear, then we have two integers
.afd6	4c 4d b5	jmp $b54d			jmp 	TypeError 					; anything else, type mismatch.
.afd9					_IntegerCode:
.afd9					IntegerModulusNoCheck:
.afd9	20 ae af	jsr $afae			jsr 	CheckDivideZero 			; do div zero check
.afdc	20 e6 af	jsr $afe6			jsr 	Int32Divide 				; do the division
.afdf	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; clear the sign bit.
.afe2	5e 00 04	lsr $0400,x			lsr 	NSStatus,x
.afe5	60		rts				rts
.afe6					Int32Divide:
.afe6	48		pha				pha 								; save AXY
.afe7	5a		phy				phy
.afe8	20 e9 a6	jsr $a6e9			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.afeb	20 0e a7	jsr $a70e			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.afee	a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.aff0					_I32DivideLoop:
.aff0	e8		inx				inx
.aff1	e8		inx				inx
.aff2	20 27 a7	jsr $a727			jsr 	NSMShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.aff5	ca		dex				dex
.aff6	ca		dex				dex
.aff7	20 28 a7	jsr $a728			jsr 	NSMRotateLeft
.affa	20 26 b0	jsr $b026			jsr 	DivideCheckSubtract 		; check if subtract possible
.affd	90 03		bcc $b002			bcc 	_I32DivideNoCarryIn
.afff	fe 0a 04	inc $040a,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.b002					_I32DivideNoCarryIn:
.b002	88		dey				dey 								; loop round till division completed.
.b003	d0 eb		bne $aff0			bne 	_I32DivideLoop
.b005	7a		ply				ply 								; restore AXY and exit
.b006	68		pla				pla
.b007	60		rts				rts
.b008					Int32ShiftDivide:
.b008	48		pha				pha 								; save AY
.b009	5a		phy				phy
.b00a	e8		inx				inx 								; clear S[X+2]
.b00b	e8		inx				inx
.b00c	20 12 a7	jsr $a712			jsr 	NSMSetZero
.b00f	ca		dex				dex
.b010	ca		dex				dex
.b011	a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.b013					_I32SDLoop:
.b013	20 26 b0	jsr $b026			jsr 	DivideCheckSubtract 		; check if subtract possible
.b016	e8		inx				inx
.b017	e8		inx				inx
.b018	20 28 a7	jsr $a728			jsr 	NSMRotateLeft				; shift 64 bit FPA left, rotating carry in
.b01b	ca		dex				dex
.b01c	ca		dex				dex
.b01d	20 28 a7	jsr $a728			jsr 	NSMRotateLeft
.b020	88		dey				dey 	 							; do 31 times
.b021	d0 f0		bne $b013			bne 	_I32SDLoop
.b023	7a		ply				ply 								; restore AY and exit
.b024	68		pla				pla
.b025	60		rts				rts
.b026					DivideCheckSubtract:
.b026	20 f2 9c	jsr $9cf2			jsr 	SubTopTwoStack 				; subtract Stack[X+1] from Stack[X+0]
.b029	b0 04		bcs $b02f			bcs 	_DCSExit 					; if carry set, then could do, exit
.b02b	20 cc 9c	jsr $9ccc			jsr 	AddTopTwoStack 				; add it back in
.b02e	18		clc				clc 								; and return False
.b02f					_DCSExit:
.b02f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/multiply.asm

.b030					MulInteger:
.b030	fa		plx				plx
.b031	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.b034	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.b037	0a		asl a				asl 	a 							; shift reference bit into sign bit
.b038	0a		asl a				asl 	a
.b039	10 05		bpl $b040			bpl 	_NotRef
.b03b	48		pha				pha
.b03c	20 f8 9f	jsr $9ff8			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.b03f	68		pla				pla
.b040					_NotRef:
.b040	0a		asl a				asl 	a 							; put MSB of type into A:7
.b041	30 0b		bmi $b04e			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.b043	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.b046	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.b049	f0 06		beq $b051			beq 	_IntegerCode 				; if clear, then we have two integers
.b04b	4c 8c b2	jmp $b28c			jmp 	FloatingPointMultiply 							; otherwise at least one float.
.b04e					_StringData:
.b04e	4c 57 b5	jmp $b557			jmp 	NotDoneError							; at least one string - don't know both are strings.
.b051					_IntegerCode:
.b051	20 5e b0	jsr $b05e			jsr 	MultiplyShort
.b054	c9 00		cmp #$00			cmp 	#0
.b056	f0 05		beq $b05d			beq 	_MIExit
.b058	a9 04		lda #$04		lda	#4
.b05a	4c d7 9a	jmp $9ad7		jmp	ErrorHandler
.b05d					_MIExit:
.b05d	60		rts				rts
.b05e					MultiplyShort:
.b05e	5a		phy				phy 								; save Y
.b05f	20 e9 a6	jsr $a6e9			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.b062	20 0e a7	jsr $a70e			jsr 	NSMSetZeroMantissaOnly 		; set mantissa S[X] to zero
.b065	a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.b067					_I32MLoop:
.b067	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.b06a	1d 12 04	ora $0412,x			ora 	NSMantissa1+2,x
.b06d	1d 1a 04	ora $041a,x			ora 	NSMantissa2+2,x
.b070	1d 22 04	ora $0422,x			ora 	NSMantissa3+2,x
.b073	f0 28		beq $b09d			beq 	_I32MExit 					; exit if zero
.b075	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.b078	29 01		and #$01			and 	#1
.b07a	f0 0e		beq $b08a			beq 	_I32MNoAdd
.b07c	20 cc 9c	jsr $9ccc			jsr 	AddTopTwoStack 				; if so add S[X+1] to S[X+0]
.b07f	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.b082	10 06		bpl $b08a			bpl 	_I32MNoAdd
.b084					_I32ShiftRight:
.b084	20 35 a7	jsr $a735			jsr 	NSMShiftRight 				; shift S[X] right
.b087	c8		iny				iny 								; increment shift count
.b088	80 0a		bra $b094			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.b08a					_I32MNoAdd:
.b08a	3c 21 04	bit $0421,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.b08d	70 f5		bvs $b084			bvs 	_I32ShiftRight 				; instead.
.b08f	e8		inx				inx
.b090	20 27 a7	jsr $a727			jsr 	NSMShiftLeft 				; shift additive S[X+1] left
.b093	ca		dex				dex
.b094					_I32MShiftUpper:
.b094	e8		inx				inx 								; shift S[X+2] right
.b095	e8		inx				inx
.b096	20 35 a7	jsr $a735			jsr 	NSMShiftRight
.b099	ca		dex				dex
.b09a	ca		dex				dex
.b09b	80 ca		bra $b067			bra 	_I32MLoop 					; try again.
.b09d					_I32MExit:
.b09d	20 a3 b0	jsr $b0a3			jsr 	CalculateSign
.b0a0	98		tya				tya 								; shift in A
.b0a1	7a		ply				ply 								; restore Y and exit
.b0a2	60		rts				rts
.b0a3					CalculateSign:
.b0a3	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.b0a6	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; shift result left
.b0a9	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.b0ac	0a		asl a				asl 	a 							; shift bit 7 into carry
.b0ad	7e 00 04	ror $0400,x			ror 	NSStatus,x 					; shift right into status byte.
.b0b0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/scompare.asm

.9c48					CompareStrings:
.9c48	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check both are strings
.9c4b	3d 01 04	and $0401,x			and 	NSStatus+1,x
.9c4e	29 10		and #$10			and 	#NSBIsString
.9c50	f0 2c		beq $9c7e			beq 	_CSTypeError
.9c52	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy string addresses to zTemp0/1
.9c55	85 36		sta $36				sta 	zTemp0
.9c57	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9c5a	85 37		sta $37				sta 	zTemp0+1
.9c5c	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.9c5f	85 38		sta $38				sta 	zTemp1
.9c61	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9c64	85 39		sta $39				sta 	zTemp1+1
.9c66	5a		phy				phy 								; save Y so we can access strings
.9c67	a0 ff		ldy #$ff			ldy 	#$FF 						; -1 for pre increment.
.9c69					_CSLoop:
.9c69	c8		iny				iny
.9c6a	b1 36		lda ($36),y			lda 	(zTemp0),y 					; check if they are the same
.9c6c	d1 38		cmp ($38),y			cmp 	(zTemp1),y
.9c6e	d0 06		bne $9c76			bne 	_CSDifferent
.9c70	c9 00		cmp #$00			cmp 	#0 							; reached end ?
.9c72	d0 f5		bne $9c69			bne 	_CSLoop 					; still comparing
.9c74					_CSExit:
.9c74	7a		ply				ply 								; reached end, return zero in A from EOS
.9c75	60		rts				rts
.9c76					_CSDifferent:
.9c76	a9 ff		lda #$ff			lda 	#255 						; if < return $FF
.9c78	90 fa		bcc $9c74			bcc		_CSExit
.9c7a	a9 01		lda #$01			lda 	#1 							; otherwise return 1.
.9c7c	80 f6		bra $9c74			bra 	_CSExit
.9c7e					_CSTypeError:
.9c7e	4c 4d b5	jmp $b54d			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/shifts.asm

.9c81					ShiftLeft:
.9c81	38		sec				sec
.9c82	80 01		bra $9c85			bra 	ShiftMain
.9c84					ShiftRight:
.9c84	18		clc				clc
.9c85					ShiftMain:
.9c85	fa		plx				plx 								; restore X
.9c86	08		php				php 								; save direction
.9c87	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9c8a	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9c8d	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9c8e	0a		asl a				asl 	a
.9c8f	10 05		bpl $9c96			bpl 	_NotRef
.9c91	48		pha				pha
.9c92	20 f8 9f	jsr $9ff8			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9c95	68		pla				pla
.9c96					_NotRef:
.9c96	0a		asl a				asl 	a
.9c97	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9c99	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9c9c	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9c9f	f0 03		beq $9ca4			beq 	_IntegerCode 				; if clear, then we have two integers
.9ca1	4c 4d b5	jmp $b54d			jmp 	TypeError 					; anything else, type mismatch.
.9ca4					_IntegerCode:
.9ca4	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; check number < 32
.9ca7	29 e0		and #$e0			and 	#$E0
.9ca9	1d 11 04	ora $0411,x			ora 	NSMantissa1+1,x
.9cac	1d 19 04	ora $0419,x			ora 	NSMantissa2+1,x
.9caf	1d 21 04	ora $0421,x			ora 	NSMantissa3+1,x
.9cb2	d0 13		bne $9cc7			bne 	_SMExit0 					; if >= 32 it will always return zero.
.9cb4					_SMLoop:
.9cb4	de 09 04	dec $0409,x			dec 	NSMantissa0+1,x 			; predecrement, could do << 0
.9cb7	30 11		bmi $9cca			bmi 	_SMExit 					; exit if done.
.9cb9	28		plp				plp 								; restore direcition setting
.9cba	08		php				php
.9cbb	90 05		bcc $9cc2			bcc 	_SMRight
.9cbd	20 27 a7	jsr $a727			jsr 	NSMShiftLeft 				; shift left if CS
.9cc0	80 f2		bra $9cb4			bra 	_SMLoop
.9cc2					_SMRight:
.9cc2	20 35 a7	jsr $a735			jsr 	NSMShiftRight 				; shift right if CC
.9cc5	80 ed		bra $9cb4			bra 	_SMLoop
.9cc7					_SMExit0:
.9cc7	20 12 a7	jsr $a712			jsr 	NSMSetZero 					; return zero.
.9cca					_SMExit:
.9cca	28		plp				plp 								; throw direction
.9ccb	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/simple.asm

.9ccc					AddTopTwoStack:
.9ccc	18		clc				clc
.9ccd	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9cd0	7d 09 04	adc $0409,x			adc 		NSMantissa0+1,x
.9cd3	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9cd6	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9cd9	7d 11 04	adc $0411,x			adc 		NSMantissa1+1,x
.9cdc	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9cdf	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9ce2	7d 19 04	adc $0419,x			adc 		NSMantissa2+1,x
.9ce5	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9ce8	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9ceb	7d 21 04	adc $0421,x			adc 		NSMantissa3+1,x
.9cee	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9cf1	60		rts				rts
.9cf2					SubTopTwoStack:
.9cf2	38		sec				sec
.9cf3	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9cf6	fd 09 04	sbc $0409,x			sbc 		NSMantissa0+1,x
.9cf9	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9cfc	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9cff	fd 11 04	sbc $0411,x			sbc 		NSMantissa1+1,x
.9d02	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9d05	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9d08	fd 19 04	sbc $0419,x			sbc 		NSMantissa2+1,x
.9d0b	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9d0e	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9d11	fd 21 04	sbc $0421,x			sbc 		NSMantissa3+1,x
.9d14	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9d17	60		rts				rts
.9d18					AddInteger:
.9d18	fa		plx				plx
.9d19	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9d1c	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9d1f	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9d20	0a		asl a				asl 	a
.9d21	10 05		bpl $9d28			bpl 	_NotRef
.9d23	48		pha				pha
.9d24	20 f8 9f	jsr $9ff8			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9d27	68		pla				pla
.9d28					_NotRef:
.9d28	0a		asl a				asl 	a 							; put MSB of type into A:7
.9d29	30 0b		bmi $9d36			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.9d2b	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9d2e	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9d31	f0 06		beq $9d39			beq 	_IntegerCode 				; if clear, then we have two integers
.9d33	4c 0c b1	jmp $b10c			jmp 	FloatingPointAdd 							; otherwise at least one float.
.9d36					_StringData:
.9d36	4c eb 9b	jmp $9beb			jmp 	StringConcat							; at least one string - don't know both are strings.
.9d39					_IntegerCode:
.9d39					AddCode:
.9d39	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.9d3c	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.9d3f	10 8b		bpl $9ccc			bpl 	AddTopTwoStack
.9d41	20 f2 9c	jsr $9cf2			jsr 	SubTopTwoStack 				; do a physical subtraction
.9d44	3c 20 04	bit $0420,x			bit 	NSMantissa3,x 				; result is +ve, okay
.9d47	10 09		bpl $9d52			bpl 	_AddExit
.9d49	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; sign is that of 2nd value
.9d4c	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9d4f	20 c7 a6	jsr $a6c7			jsr 	NSMNegateMantissa 			; negate the mantissa and exit
.9d52					_AddExit:
.9d52	20 42 a7	jsr $a742			jsr 	NSMIsZero 					; check for -0
.9d55	d0 03		bne $9d5a			bne 	_AddNonZero
.9d57	9e 00 04	stz $0400,x			stz 	NSStatus,x
.9d5a					_AddNonZero:
.9d5a	60		rts				rts
.9d5b					SubInteger:
.9d5b	fa		plx				plx
.9d5c	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9d5f	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9d62	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9d63	0a		asl a				asl 	a
.9d64	10 05		bpl $9d6b			bpl 	_NotRef
.9d66	48		pha				pha
.9d67	20 f8 9f	jsr $9ff8			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9d6a	68		pla				pla
.9d6b					_NotRef:
.9d6b	0a		asl a				asl 	a 							; put MSB of type into A:7
.9d6c	30 0b		bmi $9d79			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.9d6e	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9d71	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9d74	f0 06		beq $9d7c			beq 	_IntegerCode 				; if clear, then we have two integers
.9d76	4c 11 b1	jmp $b111			jmp 	FloatingPointSub 							; otherwise at least one float.
.9d79					_StringData:
.9d79	4c 57 b5	jmp $b557			jmp 	NotDoneError							; at least one string - don't know both are strings.
.9d7c					_IntegerCode:
.9d7c	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; negate the second value.
.9d7f	49 80		eor #$80			eor 	#$80
.9d81	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.9d84	80 b3		bra $9d39			bra 	AddCode 					; and do the same code as add.
.9d86					AndInteger:
.9d86	fa		plx				plx
.9d87	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9d8a	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9d8d	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9d8e	0a		asl a				asl 	a
.9d8f	10 05		bpl $9d96			bpl 	_NotRef
.9d91	48		pha				pha
.9d92	20 f8 9f	jsr $9ff8			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9d95	68		pla				pla
.9d96					_NotRef:
.9d96	0a		asl a				asl 	a
.9d97	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9d99	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9d9c	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9d9f	f0 03		beq $9da4			beq 	_IntegerCode 				; if clear, then we have two integers
.9da1	4c 4d b5	jmp $b54d			jmp 	TypeError 					; anything else, type mismatch.
.9da4					_IntegerCode:
.9da4	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9da7	3d 09 04	and $0409,x			and 		NSMantissa0+1,x
.9daa	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9dad	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9db0	3d 11 04	and $0411,x			and 		NSMantissa1+1,x
.9db3	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9db6	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9db9	3d 19 04	and $0419,x			and 		NSMantissa2+1,x
.9dbc	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9dbf	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9dc2	3d 21 04	and $0421,x			and 		NSMantissa3+1,x
.9dc5	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9dc8	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.9dcb	60		rts				rts
.9dcc					OraInteger:
.9dcc	fa		plx				plx
.9dcd	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9dd0	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9dd3	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9dd4	0a		asl a				asl 	a
.9dd5	10 05		bpl $9ddc			bpl 	_NotRef
.9dd7	48		pha				pha
.9dd8	20 f8 9f	jsr $9ff8			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9ddb	68		pla				pla
.9ddc					_NotRef:
.9ddc	0a		asl a				asl 	a
.9ddd	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9ddf	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9de2	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9de5	f0 03		beq $9dea			beq 	_IntegerCode 				; if clear, then we have two integers
.9de7	4c 4d b5	jmp $b54d			jmp 	TypeError 					; anything else, type mismatch.
.9dea					_IntegerCode:
.9dea	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9ded	1d 09 04	ora $0409,x			ora 		NSMantissa0+1,x
.9df0	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9df3	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9df6	1d 11 04	ora $0411,x			ora 		NSMantissa1+1,x
.9df9	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9dfc	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9dff	1d 19 04	ora $0419,x			ora 		NSMantissa2+1,x
.9e02	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9e05	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9e08	1d 21 04	ora $0421,x			ora 		NSMantissa3+1,x
.9e0b	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9e0e	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.9e11	60		rts				rts
.9e12					EorInteger:
.9e12	fa		plx				plx
.9e13	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9e16	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9e19	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9e1a	0a		asl a				asl 	a
.9e1b	10 05		bpl $9e22			bpl 	_NotRef
.9e1d	48		pha				pha
.9e1e	20 f8 9f	jsr $9ff8			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9e21	68		pla				pla
.9e22					_NotRef:
.9e22	0a		asl a				asl 	a
.9e23	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9e25	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9e28	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9e2b	f0 03		beq $9e30			beq 	_IntegerCode 				; if clear, then we have two integers
.9e2d	4c 4d b5	jmp $b54d			jmp 	TypeError 					; anything else, type mismatch.
.9e30					_IntegerCode:
.9e30	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9e33	5d 09 04	eor $0409,x			eor 		NSMantissa0+1,x
.9e36	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9e39	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9e3c	5d 11 04	eor $0411,x			eor 		NSMantissa1+1,x
.9e3f	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9e42	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9e45	5d 19 04	eor $0419,x			eor 		NSMantissa2+1,x
.9e48	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9e4b	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9e4e	5d 21 04	eor $0421,x			eor 		NSMantissa3+1,x
.9e51	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9e54	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.9e57	60		rts				rts
.9e58					WordIndirect:
.9e58	fa		plx				plx
.9e59	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9e5c	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9e5f	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9e60	0a		asl a				asl 	a
.9e61	10 05		bpl $9e68			bpl 	_NotRef
.9e63	48		pha				pha
.9e64	20 f8 9f	jsr $9ff8			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9e67	68		pla				pla
.9e68					_NotRef:
.9e68	0a		asl a				asl 	a
.9e69	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9e6b	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9e6e	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9e71	f0 03		beq $9e76			beq 	_IntegerCode 				; if clear, then we have two integers
.9e73	4c 4d b5	jmp $b54d			jmp 	TypeError 					; anything else, type mismatch.
.9e76					_IntegerCode:
.9e76	20 39 9d	jsr $9d39			jsr 	AddCode 					; add the two values
.9e79	a9 22		lda #$22			lda 	#NSBIsReference+2 			; make a 2 byte reference
.9e7b	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9e7e	60		rts				rts
.9e7f					ByteIndirect:
.9e7f	fa		plx				plx
.9e80	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9e83	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9e86	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9e87	0a		asl a				asl 	a
.9e88	10 05		bpl $9e8f			bpl 	_NotRef
.9e8a	48		pha				pha
.9e8b	20 f8 9f	jsr $9ff8			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9e8e	68		pla				pla
.9e8f					_NotRef:
.9e8f	0a		asl a				asl 	a
.9e90	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9e92	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9e95	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9e98	f0 03		beq $9e9d			beq 	_IntegerCode 				; if clear, then we have two integers
.9e9a	4c 4d b5	jmp $b54d			jmp 	TypeError 					; anything else, type mismatch.
.9e9d					_IntegerCode:
.9e9d	20 39 9d	jsr $9d39			jsr 	AddCode 					; add the two values
.9ea0	a9 21		lda #$21			lda 	#NSBIsReference+1 			; make a 1 byte reference
.9ea2	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9ea5	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/tostring.asm

.b0b1					ConvertInt16:
.b0b1	8d 08 04	sta $0408			sta 	NSMantissa0 				; set up as 32 bit conversion
.b0b4	8e 10 04	stx $0410			stx 	NSMantissa1
.b0b7	9c 18 04	stz $0418			stz 	NSMantissa2
.b0ba	9c 20 04	stz $0420			stz 	NSMantissa3
.b0bd	9c 00 04	stz $0400			stz 	NSStatus 					; positive integer
.b0c0	a2 00		ldx #$00			ldx 	#0 							; stack level
.b0c2	a9 0a		lda #$0a			lda 	#10 						; base
.b0c4	80 00		bra $b0c6			bra 	ConvertInt32
.b0c6					ConvertInt32:
.b0c6	5a		phy				phy
.b0c7	a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.b0c9	2c 00 04	bit $0400			bit 	NSStatus 					; output a - if not negative.
.b0cc	10 08		bpl $b0d6			bpl 	_CI32NotNeg
.b0ce	48		pha				pha
.b0cf	a9 2d		lda #$2d			lda 	#'-'
.b0d1	99 f8 05	sta $05f8,y			sta 	NumberBuffer,y
.b0d4	c8		iny				iny
.b0d5	68		pla				pla
.b0d6					_CI32NotNeg:
.b0d6	20 e4 b0	jsr $b0e4			jsr 	_CI32DivideConvert 			; recursive conversion
.b0d9	a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.b0db	99 f8 05	sta $05f8,y			sta 	NumberBuffer,y
.b0de	7a		ply				ply
.b0df	a2 05		ldx #$05			ldx 	#NumberBuffer >> 8
.b0e1	a9 f8		lda #$f8			lda 	#NumberBuffer & $FF
.b0e3	60		rts				rts
.b0e4					_CI32DivideConvert:
.b0e4	e8		inx				inx 								; write to next slot up
.b0e5	20 14 a7	jsr $a714			jsr 	NSMSetByte
.b0e8	ca		dex				dex
.b0e9	20 e6 af	jsr $afe6			jsr 	Int32Divide 				; divide
.b0ec	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; save remainder
.b0ef	48		pha				pha
.b0f0	20 95 af	jsr $af95			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.b0f3	20 42 a7	jsr $a742			jsr 	NSMIsZero 					; is it zero ?
.b0f6	f0 06		beq $b0fe			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.b0f8	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.b0fb	20 e4 b0	jsr $b0e4			jsr 	_CI32DivideConvert 			; and recusrively call.
.b0fe					_CI32NoRecurse:
.b0fe	68		pla				pla 								; remainder
.b0ff	c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII
.b101	90 02		bcc $b105			bcc 	_CI32NotHex
.b103	69 26		adc #$26			adc 	#6+32
.b105					_CI32NotHex:
.b105	69 30		adc #$30			adc 	#48
.b107	99 f8 05	sta $05f8,y			sta 	NumberBuffer,y 				; write out and exit
.b10a	c8		iny				iny
.b10b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/expression.asm


;******  Processing file: ./common/expressions/../generated/precedence.dat

.9ea6					PrecedenceLevel:
>9ea6	04					.byte	 4	; $00 <<
>9ea7	02					.byte	 2	; $01 <=
>9ea8	02					.byte	 2	; $02 <>
>9ea9	00					.byte	 0	; $03 !!3
>9eaa	00					.byte	 0	; $04 ><
>9eab	02					.byte	 2	; $05 >=
>9eac	04					.byte	 4	; $06 >>
>9ead	00					.byte	 0	; $07 !!7
>9eae	00					.byte	 0	; $08 !!8
>9eaf	00					.byte	 0	; $09 !!9
>9eb0	00					.byte	 0	; $0a !!10
>9eb1	00					.byte	 0	; $0b !!11
>9eb2	00					.byte	 0	; $0c !!12
>9eb3	00					.byte	 0	; $0d !!13
>9eb4	00					.byte	 0	; $0e !!14
>9eb5	00					.byte	 0	; $0f !!15
>9eb6	00					.byte	 0	; $10 @
>9eb7	00					.byte	 0	; $11 !!17
>9eb8	00					.byte	 0	; $12 !!18
>9eb9	00					.byte	 0	; $13 [
>9eba	04					.byte	 4	; $14 \
>9ebb	00					.byte	 0	; $15 ]
>9ebc	01					.byte	 1	; $16 ^
>9ebd	00					.byte	 0	; $17 _
>9ebe	00					.byte	 0	; $18 `
>9ebf	00					.byte	 0	; $19 !!25
>9ec0	00					.byte	 0	; $1a !!26
>9ec1	00					.byte	 0	; $1b {
>9ec2	01					.byte	 1	; $1c |
>9ec3	00					.byte	 0	; $1d }
>9ec4	00					.byte	 0	; $1e ~
>9ec5	00					.byte	 0	; $1f [7m<7F>[m
>9ec6	00					.byte	 0	; $20
>9ec7	05					.byte	 5	; $21 !
>9ec8	00					.byte	 0	; $22 "
>9ec9	00					.byte	 0	; $23 #
>9eca	05					.byte	 5	; $24 $
>9ecb	04					.byte	 4	; $25 %
>9ecc	01					.byte	 1	; $26 &
>9ecd	00					.byte	 0	; $27 '
>9ece	00					.byte	 0	; $28 (
>9ecf	00					.byte	 0	; $29 )
>9ed0	04					.byte	 4	; $2a *
>9ed1	03					.byte	 3	; $2b +
>9ed2	00					.byte	 0	; $2c ,
>9ed3	03					.byte	 3	; $2d -
>9ed4	00					.byte	 0	; $2e .
>9ed5	04					.byte	 4	; $2f /
>9ed6	00					.byte	 0	; $30 0
>9ed7	00					.byte	 0	; $31 1
>9ed8	00					.byte	 0	; $32 2
>9ed9	00					.byte	 0	; $33 3
>9eda	00					.byte	 0	; $34 4
>9edb	00					.byte	 0	; $35 5
>9edc	00					.byte	 0	; $36 6
>9edd	00					.byte	 0	; $37 7
>9ede	00					.byte	 0	; $38 8
>9edf	00					.byte	 0	; $39 9
>9ee0	00					.byte	 0	; $3a :
>9ee1	00					.byte	 0	; $3b ;
>9ee2	02					.byte	 2	; $3c <
>9ee3	02					.byte	 2	; $3d =
>9ee4	02					.byte	 2	; $3e >
>9ee5	05					.byte	 5	; $3f ?

;******  Return to file: ./common/expressions/expression.asm

.9ee6					EvaluateExpressionAt0:
.9ee6	a2 00		ldx #$00			ldx 	#0 							; bottom stack level
.9ee8					EvaluateExpression:
.9ee8	a9 00		lda #$00			lda 	#0 							; lowest precedence level
.9eea					EvaluateExpressionAtPrecedence:
.9eea	48		pha				pha 								; save precedence level
.9eeb	20 b9 a1	jsr $a1b9			jsr 	EvaluateTerm 				; evaluate term into level X.
.9eee	68		pla				pla 								; restore precedence level.
.9eef					_EXPRLoop:
.9eef	85 36		sta $36				sta 	zTemp0 						; save current precedence level.
.9ef1	b1 30		lda ($30),y			lda 	(codePtr),y
.9ef3	c9 40		cmp #$40			cmp		#$40 						; if >= $40 cannot be an operator
.9ef5	b0 25		bcs $9f1c			bcs 	_EXPRExit
.9ef7	da		phx				phx 								; read the operator precedence
.9ef8	aa		tax				tax
.9ef9	bd a6 9e	lda $9ea6,x			lda 	PrecedenceLevel,x
.9efc	fa		plx				plx
.9efd	c9 00		cmp #$00			cmp 	#0							; if zero exit (not an operator)
.9eff	f0 1b		beq $9f1c			beq 	_EXPRExit
.9f01	85 37		sta $37				sta 	zTemp0+1 					; save operator precedence level.
.9f03	a5 36		lda $36				lda 	zTemp0 						; compare current precedence vs. operator precedence
.9f05	c5 37		cmp $37				cmp 	zTemp0+1
.9f07	b0 13		bcs $9f1c			bcs		_EXPRExit 					; if current >= operator exit
.9f09	48		pha				pha 								; save current precedence.
.9f0a	b1 30		lda ($30),y			lda 	(codePtr),y
.9f0c	c8		iny				iny
.9f0d	48		pha				pha
.9f0e	a5 37		lda $37				lda 	zTemp0+1 					; get operator precedence level
.9f10	e8		inx				inx 								; work out the right hand side.
.9f11	20 ea 9e	jsr $9eea			jsr 	EvaluateExpressionAtPrecedence
.9f14	ca		dex				dex
.9f15	68		pla				pla 								; get operator, call the code.
.9f16	20 1f 9f	jsr $9f1f			jsr 	_EXPRCaller
.9f19	68		pla				pla 								; restore precedence level
.9f1a	80 d3		bra $9eef			bra 	_EXPRLoop 					; and go round.
.9f1c					_EXPRExit:
.9f1c	a5 36		lda $36				lda 	zTemp0 						; A = current precedence level.
.9f1e	60		rts				rts
.9f1f					_EXPRCaller:
.9f1f	da		phx				phx 								; save on stack, first thing is to restore it
.9f20	0a		asl a				asl 	a 							; double so can use vectors into X
.9f21	aa		tax				tax
.9f22	7c 5c 96	jmp ($965c,x)			jmp 	(VectorSetPunc,x) 			; and go to the code.

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/addsub.asm

.b10c					FloatingPointAdd:
.b10c	20 b5 b2	jsr $b2b5			jsr 	FloatPrepare 				; prepare for floats
.b10f	80 0b		bra $b11c			bra 	FloatAdd
.b111					FloatingPointSub:
.b111	20 b5 b2	jsr $b2b5			jsr 	FloatPrepare 				; prepare for floats
.b114					FloatSubtract:
.b114	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; negate FPB
.b117	49 80		eor #$80			eor 	#$80
.b119	9d 01 04	sta $0401,x			sta 	NSStatus+1,x				; and fall through.
.b11c					FloatAdd:
.b11c	48		pha				pha
.b11d	5a		phy				phy
.b11e	20 c6 b2	jsr $b2c6			jsr 	NSNormalise 				; normalise S[X]
.b121	f0 5c		beq $b17f			beq 	_FAReturn1
.b123	e8		inx				inx 								; normalise S[X+1]
.b124	20 c6 b2	jsr $b2c6			jsr 	NSNormalise
.b127	ca		dex				dex
.b128	c9 00		cmp #$00			cmp 	#0
.b12a	f0 77		beq $b1a3			beq 	_FAExit 					; if so, just return A
.b12c	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; are the exponents the same ?
.b12f	dd 29 04	cmp $0429,x			cmp 	NSExponent+1,x
.b132	f0 1b		beq $b14f			beq 	_FAExponentsEqual
.b134	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; work out the larger exponent
.b137	a8		tay				tay
.b138	38		sec				sec 								; do a signed comparison of the exponents.
.b139	fd 29 04	sbc $0429,x			sbc 	NSExponent+1,x
.b13c	50 02		bvc $b140			bvc 	_FANoSignedChange
.b13e	49 80		eor #$80			eor 	#$80
.b140					_FANoSignedChange:
.b140	29 80		and #$80			and 	#$80
.b142	10 03		bpl $b147			bpl 	_FAHaveMax
.b144	bc 29 04	ldy $0429,x			ldy 	NSExponent+1,x
.b147					_FAHaveMax:
.b147	20 a6 b1	jsr $b1a6			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.b14a	e8		inx				inx
.b14b	20 a6 b1	jsr $b1a6			jsr 	_FAShiftToExponent
.b14e	ca		dex				dex
.b14f					_FAExponentsEqual:
.b14f	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; are the signs the same
.b152	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.b155	30 10		bmi $b167			bmi 	_FADifferentSigns
.b157	20 cc 9c	jsr $9ccc			jsr 	AddTopTwoStack 				; do the add of the mantissae
.b15a	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.b15d	10 44		bpl $b1a3			bpl 	_FAExit 					; if no, we are done.
.b15f	20 35 a7	jsr $a735			jsr 	NSMShiftRight 				; shift A right, renormalising it.
.b162	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; bump the exponent and exit
.b165	80 3c		bra $b1a3			bra 	_FAExit
.b167					_FADifferentSigns:
.b167	20 f2 9c	jsr $9cf2			jsr 	SubTopTwoStack 				; subtract mantissa B from A
.b16a	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; is the result negative ?
.b16d	10 06		bpl $b175			bpl 	_FACheckZero 				; if no, check for -0
.b16f	20 be a6	jsr $a6be			jsr 	NSMNegate 					; netate result
.b172	20 c7 a6	jsr $a6c7			jsr 	NSMNegateMantissa 			; negate (2'c) the mantissa
.b175					_FACheckZero:
.b175	20 42 a7	jsr $a742			jsr 	NSMIsZero	 				; check for -0
.b178	d0 29		bne $b1a3			bne 	_FAExit
.b17a	9e 00 04	stz $0400,x			stz 	NSStatus,x
.b17d	80 24		bra $b1a3			bra 	_FAExit
.b17f					_FAReturn1:
.b17f	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.b182	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.b185	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.b188	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.b18b	bd 19 04	lda $0419,x			lda 	NSMantissa2+1,x
.b18e	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.b191	bd 21 04	lda $0421,x			lda 	NSMantissa3+1,x
.b194	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.b197	bd 29 04	lda $0429,x			lda 	NSExponent+1,x
.b19a	9d 28 04	sta $0428,x			sta 	NSExponent,x
.b19d	bd 01 04	lda $0401,x			lda 	NSStatus+1,x
.b1a0	9d 00 04	sta $0400,x			sta 	NSStatus,x
.b1a3					_FAExit:
.b1a3	7a		ply				ply
.b1a4	68		pla				pla
.b1a5	60		rts				rts
.b1a6					_FAShiftToExponent:
.b1a6					_FAShiftToExponent2:
.b1a6	98		tya				tya 								; compare Y to exponent
.b1a7	dd 28 04	cmp $0428,x			cmp 	NSExponent,x 				; reached the exponent required ?
.b1aa	f0 08		beq $b1b4			beq 	_FASEExit 					; exit if so.
.b1ac	20 35 a7	jsr $a735			jsr 	NSMShiftRight	 			; shift the mantissa right
.b1af	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; increment exponent
.b1b2	80 f2		bra $b1a6			bra 	_FAShiftToExponent2
.b1b4					_FASEExit:
.b1b4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/compare.asm

.b1b5					CompareFloat:
.b1b5	20 14 b1	jsr $b114			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.b1b8	bd 10 04	lda $0410,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.b1bb	29 f8		and #$f8			and 	#$F8
.b1bd	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.b1c0	1d 20 04	ora $0420,x			ora 	NSMantissa3,x
.b1c3	f0 09		beq $b1ce			beq 	_FCExit 					; zero, so approximately identical
.b1c5	a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.b1c7	3c 00 04	bit $0400,x			bit 	NSStatus,x
.b1ca	10 02		bpl $b1ce			bpl 	_FCExit
.b1cc					_FCNegative:
.b1cc	a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.b1ce					_FCExit:
.b1ce	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/divide.asm

.b1cf					FDivideCommand:
.b1cf	fa		plx				plx	 								; restore stack position
.b1d0	20 b5 b2	jsr $b2b5			jsr 	FloatPrepare 				; prepare for floats
.b1d3					FloatDivide:
.b1d3	48		pha				pha
.b1d4	e8		inx				inx
.b1d5	20 c6 b2	jsr $b2c6			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.b1d8	ca		dex				dex
.b1d9	c9 00		cmp #$00			cmp 	#0
.b1db	f0 20		beq $b1fd			beq 	_FDZero
.b1dd	20 c6 b2	jsr $b2c6			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.b1e0	f0 19		beq $b1fb			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.b1e2	20 08 b0	jsr $b008			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.b1e5	20 95 af	jsr $af95			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.b1e8	20 c6 b2	jsr $b2c6			jsr		NSNormalise 				; renormalise
.b1eb	20 a3 b0	jsr $b0a3			jsr 	CalculateSign 				; calculate result sign
.b1ee	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; calculate exponent
.b1f1	38		sec				sec
.b1f2	fd 29 04	sbc $0429,x			sbc 	NSExponent+1,x
.b1f5	38		sec				sec
.b1f6	e9 1e		sbc #$1e			sbc 	#30
.b1f8	9d 28 04	sta $0428,x			sta 	NSExponent,x
.b1fb					_FDExit:
.b1fb	68		pla				pla
.b1fc	60		rts				rts
.b1fd					_FDZero:
.b1fd	a9 03		lda #$03		lda	#3
.b1ff	4c d7 9a	jmp $9ad7		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/fractional.asm

.b202					FloatFractionalPart:
.b202	5a		phy				phy
.b203	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; take absolute value
.b206	29 7f		and #$7f			and 	#$7F
.b208	9d 00 04	sta $0400,x			sta 	NSStatus,x
.b20b	20 c6 b2	jsr $b2c6			jsr 	NSNormalise
.b20e	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.b211	38		sec				sec
.b212	e9 e0		sbc #$e0			sbc 	#$E0
.b214	90 31		bcc $b247			bcc 	_FFPExit 					; already fractional
.b216	c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.b218	b0 2a		bcs $b244			bcs 	_FFPZero
.b21a	a8		tay				tay 								; put count to do in Y
.b21b	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; do each in turn.
.b21e	20 49 b2	jsr $b249			jsr 	_FFPPartial
.b221	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.b224	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.b227	20 49 b2	jsr $b249			jsr 	_FFPPartial
.b22a	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.b22d	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.b230	20 49 b2	jsr $b249			jsr 	_FFPPartial
.b233	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.b236	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.b239	20 49 b2	jsr $b249			jsr 	_FFPPartial
.b23c	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.b23f	20 42 a7	jsr $a742			jsr 	NSMIsZero 					; zeroed check.
.b242	d0 03		bne $b247			bne 	_FFPExit
.b244					_FFPZero:
.b244	20 12 a7	jsr $a712			jsr 	NSMSetZero
.b247					_FFPExit:
.b247	7a		ply				ply
.b248	60		rts				rts
.b249					_FFPPartial:
.b249	c0 00		cpy #$00			cpy 	#0 							; no more to do
.b24b	f0 17		beq $b264			beq 	_FFFPPExit
.b24d	c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.b24f	b0 0c		bcs $b25d			bcs 	_FFFPPWholeByte
.b251	5a		phy				phy
.b252					_FFFPPLeft:
.b252	0a		asl a				asl 	a
.b253	88		dey				dey
.b254	d0 fc		bne $b252			bne 	_FFFPPLeft
.b256	7a		ply				ply
.b257					_FFFPPRight:
.b257	4a		lsr a				lsr 	a
.b258	88		dey				dey
.b259	d0 fc		bne $b257			bne 	_FFFPPRight
.b25b	80 07		bra $b264			bra 	_FFFPPExit
.b25d					_FFFPPWholeByte:
.b25d	98		tya				tya 								; subtract 8 from count
.b25e	38		sec				sec
.b25f	e9 08		sbc #$08			sbc 	#8
.b261	a8		tay				tay
.b262	a9 00		lda #$00			lda 	#0 							; and clear all
.b264					_FFFPPExit:
.b264	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/integer.asm

.b265					FloatIntegerPart:
.b265	48		pha				pha
.b266	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; is it integer already ?
.b269	f0 1f		beq $b28a			beq 	_FIPExit 					; if so do nothing
.b26b	20 42 a7	jsr $a742			jsr 	NSMIsZero 					; is it zero ?
.b26e	f0 17		beq $b287			beq 	_FIPZero 					; if so return zero.
.b270	20 c6 b2	jsr $b2c6			jsr 	NSNormalise 				; normalise
.b273	f0 12		beq $b287			beq 	_FIPZero 					; normalised to zero, exit zero
.b275					_FIPShift:
.b275	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.b278	10 08		bpl $b282			bpl 	_FIPCheckZero
.b27a	20 35 a7	jsr $a735			jsr 	NSMShiftRight 				; shift mantissa right
.b27d	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; bump exponent
.b280	80 f3		bra $b275			bra 	_FIPShift
.b282					_FIPCheckZero:
.b282	20 42 a7	jsr $a742			jsr 	NSMIsZero 					; avoid -0 problem
.b285	d0 03		bne $b28a			bne 	_FIPExit 					; set to zero if mantissa zero.
.b287					_FIPZero:
.b287	20 12 a7	jsr $a712			jsr 	NSMSetZero
.b28a					_FIPExit:
.b28a	68		pla				pla
.b28b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/multiply.asm

.b28c					FloatingPointMultiply:
.b28c	20 b5 b2	jsr $b2b5			jsr 	FloatPrepare 				; prepare for floats
.b28f					FloatMultiply:
.b28f	48		pha				pha
.b290	20 c6 b2	jsr $b2c6			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.b293	f0 1b		beq $b2b0			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.b295	e8		inx				inx
.b296	20 c6 b2	jsr $b2c6			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.b299	ca		dex				dex
.b29a	c9 00		cmp #$00			cmp 	#0
.b29c	f0 0f		beq $b2ad			beq 	_FDSetZero
.b29e	20 5e b0	jsr $b05e			jsr 	MultiplyShort 				; calculate the result.
.b2a1	7d 28 04	adc $0428,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.b2a4	18		clc				clc
.b2a5	7d 29 04	adc $0429,x			adc 	NSExponent+1,x
.b2a8	9d 28 04	sta $0428,x			sta 	NSExponent,x
.b2ab	80 03		bra $b2b0			bra 	_FDExit
.b2ad					_FDSetZero:
.b2ad	20 12 a7	jsr $a712			jsr 	NSMSetZero 					; return 0
.b2b0					_FDExit:
.b2b0	20 c6 b2	jsr $b2c6			jsr 	NSNormalise 				; normalise the result
.b2b3	68		pla				pla
.b2b4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/utility.asm

.b2b5					FloatPrepare:
.b2b5	20 f8 9f	jsr $9ff8			jsr 	DereferenceTopTwo 			; dereference the top two values
.b2b8	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check ints/floats
.b2bb	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.b2be	29 10		and #$10			and 	#NSBIsString
.b2c0	d0 01		bne $b2c3			bne 	_FDType
.b2c2	60		rts				rts
.b2c3					_FDType:
.b2c3	4c 4d b5	jmp $b54d			jmp 	TypeError
.b2c6					NSNormalise:
.b2c6	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; make float, keep sign
.b2c9	29 80		and #$80			and 	#$80
.b2cb	09 08		ora #$08			ora 	#NSTFloat
.b2cd	9d 00 04	sta $0400,x			sta 	NSStatus,x
.b2d0	20 42 a7	jsr $a742			jsr 	NSMIsZero 					; if zero exit
.b2d3	d0 09		bne $b2de			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.b2d5	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; clear the sign bit.
.b2d8	7e 00 04	ror $0400,x			ror 	NSStatus,x 					; (no -0)
.b2db	a9 00		lda #$00			lda 	#0 							; set Z flag
.b2dd	60		rts				rts
.b2de					_NSNormaliseOptimise:
.b2de	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; upper byte zero ?
.b2e1	d0 22		bne $b305			bne 	_NSNormaliseLoop
.b2e3	bd 18 04	lda $0418,x			lda 	NSMantissa2,x 				; byte normalise
.b2e6	30 1d		bmi $b305			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.b2e8	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.b2eb	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.b2ee	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.b2f1	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.b2f4	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.b2f7	9e 08 04	stz $0408,x			stz 	NSMantissa0,x
.b2fa	bd 28 04	lda $0428,x			lda 	NSExponent,x
.b2fd	38		sec				sec
.b2fe	e9 08		sbc #$08			sbc 	#8
.b300	9d 28 04	sta $0428,x			sta 	NSExponent,x
.b303	80 d9		bra $b2de			bra 	_NSNormaliseOptimise
.b305					_NSNormaliseLoop:
.b305	3c 20 04	bit $0420,x			bit 	NSMantissa3,x 				; bit 30 set ?
.b308	70 08		bvs $b312			bvs 	_NSNExit 					; exit if so with Z flag clear
.b30a	20 27 a7	jsr $a727			jsr 	NSMShiftLeft 				; shift mantissa left
.b30d	de 28 04	dec $0428,x			dec 	NSExponent,x 				; adjust exponent
.b310	80 f3		bra $b305			bra 	_NSNormaliseLoop
.b312					_NSNExit:
.b312	a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.b314	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignnumber.asm

.9f25					AssignNumber:
.9f25	5a		phy				phy
.9f26	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy mantissa0/1 to zTemp0
.9f29	85 36		sta $36				sta 	zTemp0
.9f2b	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9f2e	85 37		sta $37				sta 	zTemp0+1
.9f30	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; clear reference bits
.9f33	29 df		and #$df			and 	#(NSBIsReference ^ $FF)
.9f35	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9f38	29 18		and #$18			and 	#NSBTypeMask				; assigning to a float ?
.9f3a	c9 08		cmp #$08			cmp 	#NSTFloat
.9f3c	f0 2a		beq $9f68			beq 	_ANFloat
.9f3e	bd 29 04	lda $0429,x			lda		NSExponent+1,x 				; is it a float
.9f41	f0 05		beq $9f48			beq		_ANNotFloat
.9f43	e8		inx				inx
.9f44	20 65 b2	jsr $b265			jsr 	FloatIntegerPart 			; make it an integer
.9f47	ca		dex				dex
.9f48					_ANNotFloat:
.9f48	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if byte/word reference.
.9f4b	29 03		and #$03			and 	#3
.9f4d	d0 05		bne $9f54			bne 	_ANByteWord
.9f4f	20 74 9f	jsr $9f74			jsr 	_ANCopy4PackSign 			; copy all 4 bytes and sign
.9f52	80 1e		bra $9f72			bra 	_ANExit
.9f54					_ANByteWord:
.9f54	48		pha				pha 								; save count
.9f55	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; do byte
.9f58	92 36		sta ($36)			sta 	(zTemp0)
.9f5a	68		pla				pla
.9f5b	c9 01		cmp #$01			cmp	 	#1
.9f5d	f0 13		beq $9f72			beq 	_ANExit
.9f5f	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x 			; do word
.9f62	a0 01		ldy #$01			ldy 	#1
.9f64	91 36		sta ($36),y			sta 	(zTemp0),y
.9f66	80 0a		bra $9f72			bra 	_ANExit
.9f68					_ANFloat:
.9f68	20 74 9f	jsr $9f74			jsr 	_ANCopy4PackSign 			; write all 4 bytes and packed sign
.9f6b	bd 29 04	lda $0429,x			lda 	NSExponent+1,x 				; copy exponent to slot 4
.9f6e	a0 04		ldy #$04			ldy 	#4
.9f70	91 36		sta ($36),y			sta 	(zTemp0),y
.9f72					_ANExit:
.9f72	7a		ply				ply
.9f73	60		rts				rts
.9f74					_ANCopy4PackSign:
.9f74	a0 03		ldy #$03			ldy 	#3
.9f76	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; sign bit into status
.9f79	29 80		and #$80			and 	#$80 						; put into high bit of mantissa 3
.9f7b	1d 21 04	ora $0421,x			ora 	NSMantissa3+1,x
.9f7e	91 36		sta ($36),y			sta 	(zTemp0),y
.9f80	88		dey				dey
.9f81	bd 19 04	lda $0419,x			lda 	NSMantissa2+1,x
.9f84	91 36		sta ($36),y			sta 	(zTemp0),y
.9f86	88		dey				dey
.9f87	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9f8a	91 36		sta ($36),y			sta 	(zTemp0),y
.9f8c	88		dey				dey
.9f8d	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.9f90	91 36		sta ($36),y			sta 	(zTemp0),y
.9f92	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignstring.asm

.9f93					AssignString:
.9f93	5a		phy				phy
.9f94	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.9f97	85 38		sta $38				sta 	zTemp1
.9f99	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9f9c	85 39		sta $39				sta 	zTemp1+1
.9f9e	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9fa1	85 36		sta $36				sta 	zTemp0
.9fa3	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9fa6	85 37		sta $37				sta 	zTemp0+1
.9fa8	a0 01		ldy #$01			ldy 	#1 							; the high byte of the target address
.9faa	b1 36		lda ($36),y			lda 	(zTemp0),y
.9fac	f0 23		beq $9fd1			beq 	_ASNewStringRequired 		; if zero, a new string is required.
.9fae	38		sec				sec 								; put Address-2 in zsTemp - this is the size/status/string record
.9faf	b2 36		lda ($36)			lda 	(zTemp0) 					; of concreted strings
.9fb1	e9 02		sbc #$02			sbc 	#2
.9fb3	85 3c		sta $3c				sta 	zsTemp
.9fb5	a0 01		ldy #$01			ldy 	#1
.9fb7	b1 36		lda ($36),y			lda 	(zTemp0),y
.9fb9	e9 00		sbc #$00			sbc 	#0
.9fbb	85 3d		sta $3d				sta 	zsTemp+1
.9fbd	a0 ff		ldy #$ff			ldy 	#$FF 						; get length of new string
.9fbf					_ASGetLength:
.9fbf	c8		iny				iny
.9fc0	b1 38		lda ($38),y			lda 	(zTemp1),y
.9fc2	d0 fb		bne $9fbf			bne 	_ASGetLength
.9fc4	98		tya				tya 								; is this length <= current length
.9fc5	d2 3c		cmp ($3c)			cmp 	(zsTemp)
.9fc7	90 20		bcc $9fe9			bcc 	_ASCopyString
.9fc9	f0 1e		beq $9fe9			beq 	_ASCopyString
.9fcb	a9 80		lda #$80			lda 	#$80 						; mark as unused.
.9fcd	a0 01		ldy #$01			ldy 	#1
.9fcf	91 3c		sta ($3c),y			sta 	(zsTemp),y
.9fd1					_ASNewStringRequired:
.9fd1	e8		inx				inx 								; concrete the new string.
.9fd2	20 43 b8	jsr $b843			jsr 	StringConcrete				; (breaks zTemp1/2, not zTemp0 and zsTemp)
.9fd5	ca		dex				dex
.9fd6	18		clc				clc
.9fd7	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; copy that new address to the reference.
.9fda	69 02		adc #$02			adc 	#2 							; add two to point at the data.
.9fdc	92 36		sta ($36)			sta 	(zTemp0)
.9fde	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9fe1	69 00		adc #$00			adc 	#0
.9fe3	a0 01		ldy #$01			ldy 	#1
.9fe5	91 36		sta ($36),y			sta 	(zTemp0),y
.9fe7	80 0d		bra $9ff6			bra 	_ASExit
.9fe9					_ASCopyString:
.9fe9	a0 00		ldy #$00			ldy 	#0
.9feb					_ASCopyLoop:
.9feb	b1 38		lda ($38),y			lda 	(zTemp1),y
.9fed	c8		iny				iny
.9fee	c8		iny				iny
.9fef	91 3c		sta ($3c),y			sta 	(zsTemp),y
.9ff1	88		dey				dey
.9ff2	c9 00		cmp #$00			cmp 	#0
.9ff4	d0 f5		bne $9feb			bne 	_ASCopyLoop
.9ff6					_ASExit:
.9ff6	7a		ply				ply
.9ff7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/dereference.asm

.9ff8					DereferenceTopTwo:
.9ff8	e8		inx				inx
.9ff9	20 fd 9f	jsr $9ffd			jsr 	Dereference 				; deref x+1
.9ffc	ca		dex				dex  								; falls through to deref x
.9ffd					Dereference:
.9ffd	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get the status byte
.a000	29 20		and #$20			and 	#NSBIsReference 			; shift sign bit to carry, reference to bit 7
.a002	f0 57		beq $a05b			beq 	_DRFExit 					; not a reference
.a004	5a		phy				phy
.a005	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address to dereference into zTemp0
.a008	85 36		sta $36				sta 	zTemp0
.a00a	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a00d	85 37		sta $37				sta 	zTemp0+1
.a00f	9e 10 04	stz $0410,x			stz 	NSMantissa1,x 				; clear second byte.
.a012	b2 36		lda ($36)			lda 	(zTemp0) 					; do the first byte
.a014	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a017	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get status byte.
.a01a	29 18		and #$18			and 	#NSBTypeMask 				; what type is it ?
.a01c	c9 10		cmp #$10			cmp 	#NSTString 					; if string, dereference two
.a01e	f0 0f		beq $a02f			beq 	_DRFDereferenceTwo
.a020	c9 08		cmp #$08			cmp 	#NSTFloat 					; if float, do full dereference.
.a022	f0 39		beq $a05d			beq 	_DRFFull
.a024	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be integer - how many bytes ?
.a027	29 03		and #$03			and 	#3
.a029	f0 32		beq $a05d			beq 	_DRFFull 					; the whole word
.a02b	c9 01		cmp #$01			cmp 	#1 							; is it 10 (e.g. 2 bytes)
.a02d	f0 07		beq $a036			beq		_DRFClear23 				; no, one byte, clear 2 & 3 and exit
.a02f					_DRFDereferenceTwo:
.a02f	a0 01		ldy #$01			ldy 	#1
.a031	b1 36		lda ($36),y			lda 	(zTemp0),y
.a033	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a036					_DRFClear23:
.a036	9e 18 04	stz $0418,x			stz 	NSMantissa2,x 				; clear upper bytes, only read 1 or 2 bytes
.a039	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.a03c	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; make it a value of that type.
.a03f	29 18		and #$18			and 	#NSBTypeMask
.a041	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a044	c9 10		cmp #$10			cmp 	#NSTString  				; is it a string
.a046	d0 12		bne $a05a			bne 	_DRFNotString
.a048	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; check address is zero
.a04b	1d 10 04	ora $0410,x			ora 	NSMantissa1,x
.a04e	d0 0a		bne $a05a			bne 	_DRFNotString
.a050	a9 5c		lda #$5c			lda 	#_DRFNullString & $FF 		; if so, return reference to ""
.a052	9d 08 04	sta $0408,x			sta 	NSMantissa0,X
.a055	a9 a0		lda #$a0			lda 	#_DRFNullString >> 8
.a057	9d 10 04	sta $0410,x			sta 	NSMantissa1,X
.a05a					_DRFNotString
.a05a	7a		ply				ply 								; restore Y and exit
.a05b					_DRFExit:
.a05b	60		rts				rts
.a05c					_DRFNullString:
>a05c	00						.byte 	0
.a05d					_DRFFull:
.a05d	a0 01		ldy #$01			ldy 	#1 							; get remaining 3 bytes.
.a05f	b1 36		lda ($36),y			lda 	(zTemp0),y
.a061	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a064	c8		iny				iny
.a065	b1 36		lda ($36),y			lda 	(zTemp0),y
.a067	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.a06a	c8		iny				iny
.a06b	b1 36		lda ($36),y			lda 	(zTemp0),y
.a06d	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.a070	9e 28 04	stz $0428,x			stz 	NSExponent,x 				; clear exponent.
.a073	bd 00 04	lda $0400,x			lda		NSStatus,x 					; see if type is integer
.a076	29 18		and #$18			and 	#NSBTypeMask  				; type information only
.a078	9d 00 04	sta $0400,x			sta 	NSStatus,x 					; update it back.
.a07b	f0 06		beq $a083			beq 	_DRFNoExponent
.a07d	c8		iny				iny 								; if not, read the exponent as well.
.a07e	b1 36		lda ($36),y			lda 	(zTemp0),y
.a080	9d 28 04	sta $0428,x			sta 	NSExponent,x
.a083					_DRFNoExponent:
.a083	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; is the most significant bit set ?
.a086	10 0d		bpl $a095			bpl 	_DRFExit2 					; if not, then exit.
.a088	29 7f		and #$7f			and 	#$7F 						; clear that bit.
.a08a	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.a08d	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; set the sign flag
.a090	09 80		ora #$80			ora 	#NSBIsNegative
.a092	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a095					_DRFExit2:
.a095	7a		ply				ply
.a096	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/number.asm

=1					ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2					ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3					ESTA_Decimal = 3 							; fractional part.
.a097					EncodeNumberStart:
.a097	38		sec				sec
.a098	80 01		bra $a09b			bra 	EncodeNumberContinue+1
.a09a					EncodeNumberContinue:
.a09a	18		clc				clc
.a09b					EncodeNumber:
.a09b	08		php				php 								; save reset.
.a09c	c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.a09e	f0 12		beq $a0b2			beq 	_ENIsOkay
.a0a0	c9 30		cmp #$30			cmp 	#"0"
.a0a2	90 04		bcc $a0a8			bcc 	_ENBadNumber
.a0a4	c9 3a		cmp #$3a			cmp 	#"9"+1
.a0a6	90 0a		bcc $a0b2			bcc 	_ENIsOkay
.a0a8					_ENBadNumber:
.a0a8	28		plp				plp 								; throw saved reset
.a0a9	ad 85 04	lda $0485			lda 	EncodeState 				; decimal mode, construct final number
.a0ac	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.a0ae	f0 7e		beq $a12e			beq 	_ENConstructFinal
.a0b0					_ENFail:
.a0b0	18		clc				clc 								; not allowed
.a0b1	60		rts				rts
.a0b2					_ENIsOkay:
.a0b2	28		plp				plp 								; are we restarting
.a0b3	90 15		bcc $a0ca			bcc 	_ENNoRestart
.a0b5					_ENStartEncode:
.a0b5	c9 2e		cmp #$2e			cmp 	#'.'						; first is DP
.a0b7	f0 0c		beq $a0c5			beq 	_ENFirstDP
.a0b9	29 0f		and #$0f			and 	#15 						; put digit in mantissa
.a0bb	20 14 a7	jsr $a714			jsr 	NSMSetByte
.a0be	a9 01		lda #$01			lda 	#ESTA_Low
.a0c0					_ENExitChange:
.a0c0	8d 85 04	sta $0485			sta 	EncodeState 				; save new state
.a0c3	38		sec				sec
.a0c4	60		rts				rts
.a0c5					_ENFirstDP:
.a0c5	20 12 a7	jsr $a712			jsr 	NSMSetZero 					; clear integer part
.a0c8	80 3f		bra $a109			bra 	_ESTASwitchFloat			; go straight to float and exi
.a0ca					_ENNoRestart:
.a0ca	48		pha				pha 								; save on stack.
.a0cb	ad 85 04	lda $0485			lda 	EncodeState 				; get current state
.a0ce	c9 01		cmp #$01			cmp 	#ESTA_Low
.a0d0	f0 09		beq $a0db			beq  	_ESTALowState
.a0d2	c9 02		cmp #$02			cmp 	#ESTA_High
.a0d4	f0 29		beq $a0ff			beq 	_ESTAHighState
.a0d6	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.a0d8	f0 3b		beq $a115			beq 	_ESTADecimalState
>a0da	db						.byte 	$DB 						; causes a break in the emulator
.a0db					_ESTALowState:
.a0db	68		pla				pla 								; get value back
.a0dc	c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.a0de	f0 29		beq $a109			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.a0e0	29 0f		and #$0f			and 	#15 						; make digit
.a0e2	8d 86 04	sta $0486			sta 	DigitTemp 					; save it.
.a0e5	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.a0e8	0a		asl a				asl 	a
.a0e9	0a		asl a				asl 	a
.a0ea	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.a0ed	0a		asl a				asl 	a
.a0ee	6d 86 04	adc $0486			adc 	DigitTemp
.a0f1	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a0f4	c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.a0f6	90 05		bcc $a0fd			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.a0f8	a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.a0fa	8d 85 04	sta $0485			sta 	EncodeState
.a0fd					_ESTANoSwitch:
.a0fd	38		sec				sec
.a0fe	60		rts				rts
.a0ff					_ESTAHighState:
.a0ff	68		pla				pla 								; get value back
.a100	c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.a102	f0 05		beq $a109			beq 	_ESTASwitchFloat
.a104	20 68 a1	jsr $a168			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.a107	38		sec				sec
.a108	60		rts				rts
.a109					_ESTASwitchFloat:
.a109	9c 87 04	stz $0487			stz 	DecimalCount
.a10c	e8		inx				inx 								; zero the decimal additive.
.a10d	20 12 a7	jsr $a712			jsr 	NSMSetZero
.a110	ca		dex				dex
.a111	a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.a113	80 ab		bra $a0c0			bra 	_ENExitChange
.a115					_ESTADecimalState:
.a115	68		pla				pla 								; digit.
.a116	c9 2e		cmp #$2e			cmp 	#"." 						; fail on 2nd decimal point.
.a118	f0 96		beq $a0b0			beq 	_ENFail
.a11a	e8		inx				inx 								; put digit into fractional part of X+1
.a11b	20 68 a1	jsr $a168			jsr 	ESTAShiftDigitIntoMantissa
.a11e	ca		dex				dex
.a11f	ee 87 04	inc $0487			inc 	DecimalCount 				; bump the count of decimals
.a122	ad 87 04	lda $0487			lda 	DecimalCount
.a125	c9 0b		cmp #$0b			cmp 	#11
.a127	f0 02		beq $a12b			beq 	_ESTADSFail
.a129	38		sec				sec
.a12a	60		rts				rts
.a12b					_ESTADSFail:
.a12b	4c 48 b5	jmp $b548			jmp 	RangeError
.a12e					_ENConstructFinal:
.a12e	ad 87 04	lda $0487			lda 	DecimalCount 				; get decimal count
.a131	f0 33		beq $a166			beq 	_ENCFExit 					; no decimals
.a133	5a		phy				phy
.a134	0a		asl a				asl 	a 							; x 4 and CLC
.a135	0a		asl a				asl 	a
.a136	6d 87 04	adc $0487			adc 	DecimalCount
.a139	a8		tay				tay
.a13a	b9 07 b5	lda $b507,y			lda 	DecimalScalarTable-5,y 		; copy decimal scalar to X+2
.a13d	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.a140	b9 08 b5	lda $b508,y			lda 	DecimalScalarTable-5+1,y
.a143	9d 12 04	sta $0412,x			sta 	NSMantissa1+2,x
.a146	b9 09 b5	lda $b509,y			lda 	DecimalScalarTable-5+2,y
.a149	9d 1a 04	sta $041a,x			sta 	NSMantissa2+2,x
.a14c	b9 0a b5	lda $b50a,y			lda 	DecimalScalarTable-5+3,y
.a14f	9d 22 04	sta $0422,x			sta 	NSMantissa3+2,x
.a152	b9 0b b5	lda $b50b,y			lda 	DecimalScalarTable-5+4,y
.a155	9d 2a 04	sta $042a,x			sta 	NSExponent+2,x
.a158	a9 08		lda #$08			lda 	#NSTFloat
.a15a	9d 02 04	sta $0402,x			sta 	NSStatus+2,x
.a15d	7a		ply				ply
.a15e	e8		inx				inx 								; multiply decimal const by decimal scalar
.a15f	20 8f b2	jsr $b28f			jsr 	FloatMultiply
.a162	ca		dex				dex
.a163	20 1c b1	jsr $b11c			jsr 	FloatAdd 					; add to integer part.
.a166					_ENCFExit:
.a166	18		clc				clc 								; reject the digit.
.a167	60		rts				rts
.a168					ESTAShiftDigitIntoMantissa:
.a168	29 0f		and #$0f			and 	#15 						; save digit
.a16a	48		pha				pha
.a16b	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; push mantissa on stack
.a16e	48		pha				pha
.a16f	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.a172	48		pha				pha
.a173	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a176	48		pha				pha
.a177	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.a17a	48		pha				pha
.a17b	20 27 a7	jsr $a727			jsr 	NSMShiftLeft 				; x 2
.a17e	20 27 a7	jsr $a727			jsr 	NSMShiftLeft 				; x 4
.a181	18		clc				clc 								; pop mantissa and add
.a182	68		pla				pla
.a183	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.a186	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a189	68		pla				pla
.a18a	7d 10 04	adc $0410,x			adc 	NSMantissa1,x
.a18d	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a190	68		pla				pla
.a191	7d 18 04	adc $0418,x			adc 	NSMantissa2,x
.a194	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.a197	68		pla				pla
.a198	7d 20 04	adc $0420,x			adc 	NSMantissa3,x
.a19b	9d 20 04	sta $0420,x			sta 	NSMantissa3,x 				; x 5
.a19e	20 27 a7	jsr $a727			jsr 	NSMShiftLeft 				; x 10
.a1a1	68		pla				pla 								; add digit
.a1a2	18		clc				clc
.a1a3	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.a1a6	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a1a9	90 0d		bcc $a1b8			bcc 	_ESTASDExit
.a1ab	fe 10 04	inc $0410,x			inc 	NSMantissa1,x
.a1ae	d0 08		bne $a1b8			bne 	_ESTASDExit
.a1b0	fe 18 04	inc $0418,x			inc 	NSMantissa2,x
.a1b3	d0 03		bne $a1b8			bne 	_ESTASDExit
.a1b5	fe 20 04	inc $0420,x			inc 	NSMantissa3,x
.a1b8					_ESTASDExit:
.a1b8	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/term.asm

.a1b9					EvaluateTerm:
.a1b9	b1 30		lda ($30),y			lda 	(codePtr),y
.a1bb	30 18		bmi $a1d5			bmi 	_ETCheckUnary 				; unary function ? (text ones)
.a1bd	c9 40		cmp #$40			cmp 	#$40 						; 40-7F => identifier reference
.a1bf	b0 6f		bcs $a230			bcs 	_ETVariable
.a1c1	c9 30		cmp #$30			cmp 	#'0' 						; is it a number
.a1c3	90 6e		bcc $a233			bcc 	_ETPuncUnary 				; if not it might be a punctuation unary.
.a1c5	c9 3a		cmp #$3a			cmp 	#'9'+1
.a1c7	b0 6a		bcs $a233			bcs 	_ETPuncUnary
.a1c9	20 97 a0	jsr $a097			jsr 	EncodeNumberStart 			; can't fail as it's 0-9 !
.a1cc					_ETNumber:
.a1cc	c8		iny				iny 								; keep encoding until we have the numbers
.a1cd	b1 30		lda ($30),y			lda 	(codePtr),y
.a1cf	20 9a a0	jsr $a09a			jsr 	EncodeNumberContinue
.a1d2	b0 f8		bcs $a1cc			bcs 	_ETNumber 					; go back if accepted.
.a1d4	60		rts				rts
.a1d5					_ETCheckUnary:
.a1d5	c9 ff		cmp #$ff			cmp 	#KWC_STRING 				; string token
.a1d7	f0 41		beq $a21a			beq 	_ETString
.a1d9	c9 fe		cmp #$fe			cmp 	#KWC_HEXCONST 				; hex constant.
.a1db	f0 12		beq $a1ef			beq 	_ETHexConstant
.a1dd	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; check it actually is a unary function
.a1df	90 0b		bcc $a1ec			bcc 	_ETSyntaxError
.a1e1	c9 9f		cmp #$9f			cmp 	#KWC_LAST_UNARY+1
.a1e3	b0 07		bcs $a1ec			bcs 	_ETSyntaxError
.a1e5	da		phx				phx 								; push X on the stack
.a1e6	0a		asl a				asl 	a 							; put vector x 2 into X
.a1e7	aa		tax				tax
.a1e8	c8		iny				iny 								; consume unary function token
.a1e9	7c dc 96	jmp ($96dc,x)			jmp 	(VectorSet0,x) 				; and do it.
.a1ec					_ETSyntaxError:
.a1ec	4c 43 b5	jmp $b543			jmp 	SyntaxError
.a1ef					_ETHexConstant:
.a1ef	c8		iny				iny 								; skip #
.a1f0	c8		iny				iny 								; skip count
.a1f1	20 12 a7	jsr $a712			jsr 	NSMSetZero 					; clear result
.a1f4					_ETHLoop:
.a1f4	b1 30		lda ($30),y			lda 	(codePtr),y
.a1f6	c8		iny				iny 								; and consume
.a1f7	c9 00		cmp #$00			cmp 	#0 							; exit if zero
.a1f9	f0 1e		beq $a219			beq 	_ETHExit
.a1fb	48		pha				pha 								; save on stack.
.a1fc	20 27 a7	jsr $a727			jsr 	NSMShiftLeft 				; x 2
.a1ff	20 27 a7	jsr $a727			jsr 	NSMShiftLeft 				; x 4
.a202	20 27 a7	jsr $a727			jsr 	NSMShiftLeft 				; x 8
.a205	20 27 a7	jsr $a727			jsr 	NSMShiftLeft 				; x 16
.a208	68		pla				pla 								; ASCII
.a209	c9 41		cmp #$41			cmp 	#'A'
.a20b	90 02		bcc $a20f			bcc 	_ETHNotChar
.a20d	e9 07		sbc #$07			sbc 	#7
.a20f					_ETHNotChar:
.a20f	29 0f		and #$0f			and 	#15 						; digit now
.a211	1d 08 04	ora $0408,x			ora 	NSMantissa0,x 				; put in LS Nibble
.a214	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a217	80 db		bra $a1f4			bra 	_ETHLoop 					; go round.
.a219					_ETHExit:
.a219	60		rts				rts
.a21a					_ETString:
.a21a	c8		iny				iny 								; look at length
.a21b	b1 30		lda ($30),y			lda 	(codePtr),y
.a21d	48		pha				pha
.a21e	c8		iny				iny 								; first character
.a21f	20 5c a7	jsr $a75c			jsr 	MemoryInline 				; put address of string at (code-Ptr),y on stack
.a222	68		pla				pla 								; restore count and save
.a223	85 36		sta $36				sta 	zTemp0
.a225	98		tya				tya 								; add length to Y to skip it.
.a226	18		clc				clc
.a227	65 36		adc $36				adc 	zTemp0
.a229	a8		tay				tay
.a22a	a9 10		lda #$10			lda 	#NSTString 					; mark as string
.a22c	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a22f	60		rts				rts
.a230					_ETVariable:
.a230	4c 8a a2	jmp $a28a			jmp 	VariableHandler
.a233					_ETPuncUnary:
.a233	c8		iny				iny 								; consume the unary character
.a234	c9 2d		cmp #$2d			cmp 	#KWD_MINUS 					; unary minus
.a236	f0 2d		beq $a265			beq 	_ETUnaryNegate
.a238	c9 10		cmp #$10			cmp 	#KWD_AT 					; @ reference -> constant
.a23a	f0 39		beq $a275			beq 	_ETDereference
.a23c	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; parenthesis
.a23e	f0 43		beq $a283			beq 	_ETParenthesis
.a240	64 36		stz $36				stz 	zTemp0 						; zTemp0 is the indirection level.
.a242	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; byte indirection (0) ?
.a244	f0 06		beq $a24c			beq 	_ETIndirection
.a246	e6 36		inc $36				inc 	zTemp0
.a248	c9 21		cmp #$21			cmp 	#KWD_PLING					; word indirection (1) \
.a24a	d0 a0		bne $a1ec			bne 	_ETSyntaxError
.a24c					_ETIndirection:
.a24c	a5 36		lda $36				lda 	zTemp0 						; push indirection amount (0-1) => (1-2) on the stack
.a24e	1a		inc a				inc 	a
.a24f	48		pha				pha
.a250	20 b9 a1	jsr $a1b9			jsr 	EvaluateTerm				; evaluate the term
.a253	20 fd 9f	jsr $9ffd			jsr 	Dereference 				; dereference it.
.a256	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a +ve integer.
.a259	d0 07		bne $a262			bne 	_ETTypeMismatch
.a25b	68		pla				pla 								; indirection 1-2
.a25c	09 20		ora #$20			ora 	#NSBIsReference 			; make it a reference.
.a25e	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a261	60		rts				rts
.a262					_ETTypeMismatch:
.a262	4c 4d b5	jmp $b54d			jmp 	TypeError
.a265					_ETUnaryNegate:
.a265	20 b9 a1	jsr $a1b9			jsr 	EvaluateTerm				; evaluate the term
.a268	20 fd 9f	jsr $9ffd			jsr 	Dereference 				; dereference it.
.a26b	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a number
.a26e	29 10		and #$10			and 	#NSTString
.a270	d0 f0		bne $a262			bne 	_ETTypeMismatch
.a272	4c be a6	jmp $a6be			jmp 	NSMNegate  					; just toggles the sign bit.
.a275					_ETDereference:
.a275	20 b9 a1	jsr $a1b9			jsr 	EvaluateTerm				; evaluate the term
.a278	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a reference
.a27b	29 20		and #$20			and 	#NSBIsReference
.a27d	f0 e3		beq $a262			beq 	_ETTypeMismatch
.a27f	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; make it an integer address
.a282	60		rts				rts
.a283					_ETParenthesis:
.a283	20 e8 9e	jsr $9ee8			jsr 	EvaluateExpression 			; evaluate here, from lowest precedence
.a286	20 55 af	jsr $af55			jsr 	CheckRightBracket 			; check for )
.a289	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/variable.asm

.a28a					VariableHandler:
.a28a	b1 30		lda ($30),y			lda 	(codePtr),y
.a28c	18		clc				clc
.a28d	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.a28f	85 37		sta $37				sta 	zTemp0+1
.a291	c8		iny				iny
.a292	b1 30		lda ($30),y			lda 	(codePtr),y
.a294	85 36		sta $36				sta 	zTemp0
.a296	c8		iny				iny
.a297	18		clc				clc									; copy variable address+3 to mantissa
.a298	69 03		adc #$03			adc 	#3
.a29a	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a29d	a5 37		lda $37				lda 	zTemp0+1
.a29f	69 00		adc #$00			adc 	#0
.a2a1	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a2a4	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.a2a7	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.a2aa	9e 28 04	stz $0428,x			stz 	NSExponent,x
.a2ad	5a		phy				phy
.a2ae	a0 02		ldy #$02			ldy 	#2 							; read type
.a2b0	b1 36		lda ($36),y			lda 	(zTemp0),y
.a2b2	7a		ply				ply
.a2b3	29 1c		and #$1c			and 	#NSBTypeMask+NSBIsArray 	; get type information
.a2b5	09 20		ora #$20			ora 	#NSBIsReference 			; make a reference.
.a2b7	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a2ba	29 04		and #$04			and 	#NSBIsArray
.a2bc	d0 01		bne $a2bf			bne 	_VHArray
.a2be	60		rts				rts
.a2bf					_VHArray:
.a2bf	e8		inx				inx
.a2c0	20 aa a6	jsr $a6aa			jsr 	Evaluate8BitInteger 		; get the 1st index.
.a2c3	a9 ff		lda #$ff			lda 	#$FF 						; set Status of X+2 to a duff value so we know if we picked it up.
.a2c5	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.a2c8	b1 30		lda ($30),y			lda 	(codePtr),y
.a2ca	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.a2cc	d0 06		bne $a2d4			bne 	_VHNoSecondIndex
.a2ce	c8		iny				iny 								; skip the comma
.a2cf	e8		inx				inx
.a2d0	20 aa a6	jsr $a6aa			jsr 	Evaluate8BitInteger 		; get the 2nd index.
.a2d3	ca		dex				dex
.a2d4					_VHNoSecondIndex:
.a2d4	ca		dex				dex 								; set X back.
.a2d5	20 55 af	jsr $af55			jsr 	CheckRightBracket 			; and check the right bracket.
.a2d8	5a		phy				phy 								; save position
.a2d9	a0 02		ldy #$02			ldy 	#2 							; check first index is not-zero, e.g. array defined
.a2db	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a2dd	f0 6b		beq $a34a			beq 	_VHBadIndex
.a2df	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy record address to zaTemp
.a2e2	85 3e		sta $3e				sta 	zaTemp
.a2e4	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a2e7	85 3f		sta $3f				sta 	zaTemp+1
.a2e9	a0 03		ldy #$03			ldy 	#3 							; get the second index - which is 0 if there is one index.
.a2eb	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a2ed	f0 02		beq $a2f1			beq 	_VHHas2Mask
.a2ef	a9 ff		lda #$ff			lda 	#$FF
.a2f1					_VHHas2Mask:
.a2f1	dd 02 04	cmp $0402,x			cmp 	NSStatus+2,x 				; so if they are the same there are the wrong number of indices
.a2f4	f0 54		beq $a34a			beq 	_VHBadIndex
.a2f6	0a		asl a				asl 	a 							; carry will be set if a second index
.a2f7	90 09		bcc $a302			bcc 	_VHCheckFirstIndex
.a2f9	a0 03		ldy #$03			ldy 	#3 			 				; check the 2nd size >= 2nd index
.a2fb	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a2fd	dd 0a 04	cmp $040a,x			cmp 	NSMantissa0+2,x
.a300	90 48		bcc $a34a			bcc 	_VHBadIndex
.a302					_VHCheckFirstIndex:
.a302	a0 02		ldy #$02			ldy 	#2 			 				; check the 2nd size >= 2nd index
.a304	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a306	dd 09 04	cmp $0409,x			cmp 	NSMantissa0+1,x
.a309	90 3f		bcc $a34a			bcc 	_VHBadIndex
.a30b	64 36		stz $36				stz 	zTemp0 						; clear zTemp0 (if 1 index)
.a30d	64 37		stz $37				stz 	zTemp0+1
.a30f	bd 02 04	lda $0402,x			lda 	NSStatus+2,x 				; if only one index provided, don't need to multiply
.a312	30 0f		bmi $a323			bmi 	_VHNoMultiply
.a314	da		phx				phx
.a315	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; get 2nd index on stack
.a318	48		pha				pha
.a319	a0 02		ldy #$02			ldy 	#2 							; get 1st size in A
.a31b	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a31d	1a		inc a				inc 	a 							; add 1 for zero base
.a31e	fa		plx				plx
.a31f	20 df b3	jsr $b3df			jsr 	Multiply8x8 				; calculate -> Z0
.a322	fa		plx				plx
.a323					_VHNoMultiply:
.a323	18		clc				clc
.a324	a5 36		lda $36				lda 	zTemp0
.a326	7d 09 04	adc $0409,x			adc 	NSMantissa0+1,x
.a329	85 36		sta $36				sta 	zTemp0
.a32b	a5 37		lda $37				lda 	zTemp0+1
.a32d	69 00		adc #$00			adc 	#0
.a32f	85 37		sta $37				sta 	zTemp0+1
.a331	bd 00 04	lda $0400,x			lda 	NSStatus,x
.a334	20 ce 8d	jsr $8dce			jsr 	ScaleByBaseType
.a337	18		clc				clc
.a338	b2 3e		lda ($3e)			lda 	(zaTemp)
.a33a	65 36		adc $36				adc 	zTemp0
.a33c	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a33f	a0 01		ldy #$01			ldy 	#1
.a341	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a343	65 37		adc $37				adc 	zTemp0+1
.a345	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a348	7a		ply				ply 								; restore position
.a349	60		rts				rts
.a34a					_VHBadIndex:
.a34a	a9 17		lda #$17		lda	#23
.a34c	4c d7 9a	jmp $9ad7		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/abs.asm

.b315					AbsUnary:
.b315	fa		plx				plx 								; restore stack pos
.b316	20 52 a6	jsr $a652			jsr 	EvaluateNumber 				; get a float or int
.b319	20 55 af	jsr $af55			jsr 	CheckRightBracket
.b31c	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; clear the sign bit
.b31f	29 7f		and #$7f			and 	#$7F
.b321	9d 00 04	sta $0400,x			sta 	NSStatus,x
.b324	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/alloc.asm

.a34f					AllocUnary:
.a34f	fa		plx				plx 								; restore stack pos
.a350	20 8a a6	jsr $a68a			jsr 	Evaluate16BitInteger		; get bytes required.
.a353	20 55 af	jsr $af55			jsr 	CheckRightBracket
.a356	da		phx				phx 								; save X/Y
.a357	5a		phy				phy
.a358	8a		txa				txa 								; copy X into Y
.a359	a8		tay				tay
.a35a	b9 10 04	lda $0410,y			lda		NSMantissa1,y 				; get size
.a35d	aa		tax				tax
.a35e	b9 08 04	lda $0408,y			lda 	NSMantissa0,y
.a361	20 6e a3	jsr $a36e			jsr 	AllocateXABytes 			; allocate memory
.a364	99 08 04	sta $0408,y			sta 	NSMantissa0,y 				; write address out.
.a367	8a		txa				txa
.a368	99 10 04	sta $0410,y			sta 	NSMantissa1,y
.a36b	7a		ply				ply
.a36c	fa		plx				plx
.a36d	60		rts				rts
.a36e					AllocateXABytes:
.a36e	5a		phy				phy
.a36f	ac 8c 04	ldy $048c			ldy 	lowMemPtr 					; push current address on stack and to zTemp0
.a372	84 36		sty $36				sty 	zTemp0
.a374	5a		phy				phy
.a375	ac 8d 04	ldy $048d			ldy 	lowMemPtr+1
.a378	84 37		sty $37				sty 	zTemp0+1
.a37a	5a		phy				phy
.a37b	18		clc				clc 								; add to low memory pointer
.a37c	6d 8c 04	adc $048c			adc 	lowMemPtr
.a37f	8d 8c 04	sta $048c			sta 	lowMemPtr
.a382	8a		txa				txa
.a383	6d 8d 04	adc $048d			adc 	lowMemPtr+1
.a386	8d 8d 04	sta $048d			sta 	lowMemPtr+1
.a389	b0 2f		bcs $a3ba			bcs 	CISSMemory
.a38b	20 ac a3	jsr $a3ac			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.a38e					_ClearMemory:
.a38e	ad 8c 04	lda $048c			lda 	lowMemPtr 					; cleared all memory allocated
.a391	c5 36		cmp $36				cmp 	zTemp0
.a393	d0 07		bne $a39c			bne 	_CMClearNext
.a395	ad 8d 04	lda $048d			lda 	lowMemPtr+1
.a398	c5 37		cmp $37				cmp 	zTemp0+1
.a39a	f0 0c		beq $a3a8			beq 	_CMExit
.a39c					_CMClearNext:
.a39c	a9 00		lda #$00			lda 	#0 							; clear byte, advance to next.
.a39e	92 36		sta ($36)			sta 	(zTemp0)
.a3a0	e6 36		inc $36				inc 	zTemp0
.a3a2	d0 ea		bne $a38e			bne 	_ClearMemory
.a3a4	e6 37		inc $37				inc		zTemp0+1
.a3a6	80 e6		bra $a38e			bra 	_ClearMemory
.a3a8					_CMExit:
.a3a8	fa		plx				plx
.a3a9	68		pla				pla
.a3aa	7a		ply				ply
.a3ab	60		rts				rts
.a3ac					CheckIdentifierStringSpace:
.a3ac	48		pha				pha
.a3ad	ad 8d 04	lda $048d			lda 	lowMemPtr+1 				; get low memory pointer
.a3b0	18		clc				clc
.a3b1	69 02		adc #$02			adc 	#2 							; need at least 2 256 byte pages
.a3b3	cd 8f 04	cmp $048f			cmp 	StringMemory+1 				; is it >= StringMemory
.a3b6	b0 02		bcs $a3ba			bcs 	CISSMemory
.a3b8	68		pla				pla
.a3b9	60		rts				rts
.a3ba					CISSMemory:
.a3ba	a9 06		lda #$06		lda	#6
.a3bc	4c d7 9a	jmp $9ad7		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/asc.asm

.b325					AscUnary:
.b325	fa		plx				plx 								; restore stack pos
.b326	20 5d a6	jsr $a65d			jsr 	EvaluateString 				; get a string
.b329	b2 36		lda ($36)			lda 	(zTemp0)					; get/return firs character
.b32b	20 14 a7	jsr $a714			jsr 	NSMSetByte
.b32e	20 55 af	jsr $af55			jsr 	CheckRightBracket
.b331	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/frac.asm

.b332					FracUnary:
.b332	fa		plx				plx 								; restore stack pos
.b333	20 52 a6	jsr $a652			jsr 	EvaluateNumber 				; get a float or int
.b336	20 55 af	jsr $af55			jsr 	CheckRightBracket
.b339	bd 00 04	lda $0400,x			lda 	NSStatus,x
.b33c	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.b33e	f0 04		beq $b344			beq 	_IUZero
.b340	20 02 b2	jsr $b202			jsr 	FloatFractionalPart
.b343	60		rts				rts
.b344					_IUZero:
.b344	20 12 a7	jsr $a712			jsr 	NSMSetZero
.b347	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/int.asm

.b348					IntUnary:
.b348	fa		plx				plx 								; restore stack pos
.b349	20 52 a6	jsr $a652			jsr 	EvaluateNumber 				; get a float or int
.b34c	20 55 af	jsr $af55			jsr 	CheckRightBracket
.b34f	bd 00 04	lda $0400,x			lda 	NSStatus,x
.b352	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.b354	f0 03		beq $b359			beq 	_IUExit
.b356	20 65 b2	jsr $b265			jsr 	FloatIntegerPart
.b359					_IUExit:
.b359	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/len.asm

.b35a					LenUnary:
.b35a	fa		plx				plx 								; restore stack pos
.b35b	20 5d a6	jsr $a65d			jsr 	EvaluateString 				; get a string
.b35e	5a		phy				phy
.b35f	a0 00		ldy #$00			ldy 	#0 							; find length
.b361					_LenFind:
.b361	b1 36		lda ($36),y			lda 	(zTemp0),y
.b363	f0 06		beq $b36b			beq 	_LenExit
.b365	c8		iny				iny
.b366	d0 f9		bne $b361			bne 	_LenFind
.b368	4c 48 b5	jmp $b548			jmp 	RangeError 					; string > 255
.b36b					_LenExit:
.b36b	98		tya				tya
.b36c	20 14 a7	jsr $a714			jsr 	NSMSetByte
.b36f	7a		ply				ply
.b370	20 55 af	jsr $af55			jsr 	CheckRightBracket
.b373	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/minmax.asm

.a3bf					Unary_Min:
.a3bf	a9 01		lda #$01			lda 	#1
.a3c1	80 02		bra $a3c5			bra 	UnaryMinMaxMain
.a3c3					Unary_Max:
.a3c3	a9 ff		lda #$ff			lda 	#$FF 						; value from comparator to cause a write
.a3c5					UnaryMinMaxMain:
.a3c5	fa		plx				plx 								; get index on number stack
.a3c6	48		pha				pha 								; save comparator
.a3c7	20 49 a6	jsr $a649			jsr 	EvaluateValue 				; get the first value.
.a3ca					_UMMMLoop:
.a3ca	b1 30		lda ($30),y			lda 	(codePtr),y
.a3cc	c9 29		cmp #$29			cmp 	#KWD_RPAREN 				; if right bracket then done.
.a3ce	f0 22		beq $a3f2			beq 	_UMMMDone
.a3d0	20 5d af	jsr $af5d			jsr 	CheckComma 					; must be a comma
.a3d3	e8		inx				inx
.a3d4	20 49 a6	jsr $a649			jsr 	EvaluateValue
.a3d7	ca		dex				dex
.a3d8	20 e9 a6	jsr $a6e9			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] (Compare is destructive)
.a3db	e8		inx				inx
.a3dc	20 e9 a6	jsr $a6e9			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2], original
.a3df	e8		inx				inx
.a3e0	20 8f 9b	jsr $9b8f			jsr 	CompareBaseCode 			; part of > = < etc. code, returns 255,0 or 1
.a3e3	ca		dex				dex
.a3e4	ca		dex				dex
.a3e5	85 36		sta $36				sta 	zTemp0 						; save required result
.a3e7	68		pla				pla 								; get and save comparator
.a3e8	48		pha				pha
.a3e9	c5 36		cmp $36				cmp 	zTemp0 						; if the comparator
.a3eb	d0 dd		bne $a3ca			bne 	_UMMMLoop
.a3ed	20 f5 a3	jsr $a3f5			jsr 	ExpCopyAboveDown 			; copy next up slot down
.a3f0	80 d8		bra $a3ca			bra 	_UMMMLoop
.a3f2					_UMMMDone:
.a3f2	68		pla				pla 								; throw the comparator
.a3f3	c8		iny				iny 								; skip )
.a3f4	60		rts				rts
.a3f5					ExpCopyAboveDown:
.a3f5	bd 01 04	lda $0401,x			lda 	NSStatus+1,x
.a3f8	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a3fb	bd 29 04	lda $0429,x			lda 	NSExponent+1,x
.a3fe	9d 28 04	sta $0428,x			sta 	NSExponent,x
.a401	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.a404	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a407	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.a40a	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a40d	bd 19 04	lda $0419,x			lda 	NSMantissa2+1,x
.a410	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.a413	bd 21 04	lda $0421,x			lda 	NSMantissa3+1,x
.a416	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.a419	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/not.asm

.a41a					Unary_Not:
.a41a	fa		plx				plx
.a41b	20 75 a6	jsr $a675			jsr 	EvaluateInteger 			; get integer
.a41e	20 55 af	jsr $af55			jsr 	CheckRightBracket
.a421	20 42 a7	jsr $a742			jsr 	NSMIsZero 					; zero mantissa ?
.a424	f0 04		beq $a42a			beq 	_NotZero
.a426	20 12 a7	jsr $a712			jsr 	NSMSetZero
.a429	60		rts				rts
.a42a					_NotZero:
.a42a	4c 44 9b	jmp $9b44			jmp 	ReturnTrue
.a42d					_UNBad:
.a42d	4c 52 b5	jmp $b552			jmp 	ArgumentError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/rnd.asm

.a430					Unary_Random:
.a430	fa		plx				plx
.a431	20 af a4	jsr $a4af			jsr 	Random32Bit 				; get a random number
.a434	20 94 a4	jsr $a494			jsr 	URCopyToMantissa  			; put in mantissa
.a437	b1 30		lda ($30),y			lda 	(codePtr),y
.a439	c9 29		cmp #$29			cmp 	#KWD_RPAREN
.a43b	f0 08		beq $a445			beq 	_URNoModulus
.a43d	e8		inx				inx
.a43e	20 8a a6	jsr $a68a			jsr 	Evaluate16BitInteger 		; put modulus value in +1
.a441	ca		dex				dex
.a442	20 d9 af	jsr $afd9			jsr 	IntegerModulusNoCheck 		; calculate modulus
.a445					_URNoModulus:
.a445	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; make it an integer positive
.a448	9e 28 04	stz $0428,x			stz 	NSExponent,x
.a44b	20 55 af	jsr $af55			jsr 	CheckRightBracket
.a44e	60		rts				rts
.a44f					Unary_Rnd:
.a44f	fa		plx				plx
.a450	20 52 a6	jsr $a652			jsr 	EvaluateNumber 				; number to use.
.a453	20 55 af	jsr $af55			jsr 	CheckRightBracket 			; closing bracket
.a456	20 42 a7	jsr $a742			jsr 	NSMIsZero 					; if zero, then don't generate a new number
.a459	f0 2b		beq $a486			beq 	_URCopySeed
.a45b	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; if -ve, then seed using parameter
.a45e	10 23		bpl $a483			bpl 	_URDontSeed
.a460	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy - value to seed butchering it.
.a463	49 17		eor #$17			eor 	#$17
.a465	8d 88 04	sta $0488			sta 	RandomSeed+0
.a468	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a46b	49 a5		eor #$a5			eor 	#$A5
.a46d	8d 89 04	sta $0489			sta 	RandomSeed+1
.a470	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.a473	49 c2		eor #$c2			eor 	#$C2
.a475	8d 8a 04	sta $048a			sta 	RandomSeed+2
.a478	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.a47b	49 9d		eor #$9d			eor 	#$9D
.a47d	8d 8b 04	sta $048b			sta 	RandomSeed+3
.a480	20 af a4	jsr $a4af			jsr 	Random32Bit
.a483					_URDontSeed:
.a483	20 af a4	jsr $a4af			jsr 	Random32Bit 				; generate a number.
.a486					_URCopySeed:
.a486	20 94 a4	jsr $a494			jsr 	URCopyToMantissa 			; copy into mantissa
.a489	a9 e1		lda #$e1			lda 	#-31 						; force into 0-1 range
.a48b	8d 28 04	sta $0428			sta 	NSExponent
.a48e	a9 08		lda #$08			lda 	#NSTFloat
.a490	8d 00 04	sta $0400			sta 	NSStatus 					; positive.
.a493	60		rts				rts
.a494					URCopyToMantissa:
.a494	ad 88 04	lda $0488			lda 	RandomSeed+0
.a497	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a49a	ad 89 04	lda $0489			lda 	RandomSeed+1
.a49d	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a4a0	ad 8a 04	lda $048a			lda 	RandomSeed+2
.a4a3	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.a4a6	ad 8b 04	lda $048b			lda 	RandomSeed+3
.a4a9	29 3f		and #$3f			and 	#$3F 						; make legal mantissa
.a4ab	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.a4ae	60		rts				rts
.a4af					Random32Bit:
.a4af	5a		phy				phy
.a4b0	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.a4b2	ad 88 04	lda $0488			lda 	RandomSeed+0 				; check the seed isn't zero
.a4b5	d0 03		bne $a4ba			bne 	_Random1
.a4b7	a8		tay				tay 								; if so do it 256 times
.a4b8	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.a4ba					_Random1:
.a4ba	0a		asl a				asl 	a 							; LSFR RNG
.a4bb	2e 89 04	rol $0489			rol 	RandomSeed+1
.a4be	2e 8a 04	rol $048a			rol 	RandomSeed+2
.a4c1	2e 8b 04	rol $048b			rol 	RandomSeed+3
.a4c4	90 02		bcc $a4c8			bcc 	_Random2
.a4c6	49 c5		eor #$c5			eor 	#$C5
.a4c8					_Random2:
.a4c8	88		dey				dey
.a4c9	d0 ef		bne $a4ba			bne 	_Random1
.a4cb	8d 88 04	sta $0488			sta 	RandomSeed+0
.a4ce	7a		ply				ply
.a4cf	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/sgn.asm

.b374					SgnUnary:
.b374	fa		plx				plx 								; restore stack pos
.b375	20 52 a6	jsr $a652			jsr 	EvaluateNumber 				; get a float or int
.b378	20 55 af	jsr $af55			jsr 	CheckRightBracket
.b37b	20 42 a7	jsr $a742			jsr 	NSMIsZero 					; if zero
.b37e	f0 10		beq $b390			beq 	_SGZero  					; return Int Zero
.b380	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get status w/sign
.b383	48		pha				pha
.b384	a9 01		lda #$01			lda 	#1 							; set to 1
.b386	20 14 a7	jsr $a714			jsr 	NSMSetByte
.b389	68		pla				pla
.b38a	29 80		and #$80			and		#$80 						; copy the sign byte out
.b38c	9d 00 04	sta $0400,x			sta 	NSStatus,x
.b38f	60		rts				rts
.b390	20 12 a7	jsr $a712	_SGZero:jsr 	NSMSetZero
.b393	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/val.asm

.b394					ValUnary:
.b394	fa		plx				plx 								; restore stack pos
.b395	20 aa b3	jsr $b3aa			jsr 	ValMainCode 				; do the main val() code
.b398	b0 01		bcs $b39b			bcs 	_VUError 					; couldn't convert
.b39a	60		rts				rts
.b39b					_VUError:
.b39b	4c 4d b5	jmp $b54d			jmp 	TypeError
.b39e					IsValUnary:
.b39e	fa		plx				plx 								; restore stack pos
.b39f	20 aa b3	jsr $b3aa			jsr 	ValMainCode 				; do the main val() code
.b3a2	b0 03		bcs $b3a7			bcs 	_VUBad
.b3a4	4c 44 9b	jmp $9b44			jmp 	ReturnTrue
.b3a7					_VUBad:
.b3a7	4c 50 9b	jmp $9b50			jmp 	ReturnFalse
.b3aa					ValMainCode:
.b3aa	20 5d a6	jsr $a65d			jsr 	EvaluateString 				; get a string
.b3ad	20 55 af	jsr $af55			jsr 	CheckRightBracket 			; check right bracket present
.b3b0	5a		phy				phy
.b3b1	b2 36		lda ($36)			lda 	(zTemp0) 					; check not empty string
.b3b3	f0 17		beq $b3cc			beq 	_VMCFail2
.b3b5	a0 ff		ldy #$ff			ldy 	#$FF 						; start position
.b3b7	48		pha				pha 								; save first character
.b3b8	c9 2d		cmp #$2d			cmp 	#"-"		 				; is it -
.b3ba	d0 01		bne $b3bd			bne 	_VMCStart
.b3bc	c8		iny				iny 								; skip over -
.b3bd					_VMCStart:
.b3bd	38		sec				sec 								; initialise first time round.
.b3be					_VMCNext:
.b3be	c8		iny				iny 								; pre-increment
.b3bf	b1 36		lda ($36),y			lda 	(zTemp0),y 					; next character
.b3c1	f0 0c		beq $b3cf			beq 	_VMCSuccess 				; successful.
.b3c3	20 9b a0	jsr $a09b			jsr 	EncodeNumber 				; send it to the number-builder
.b3c6	90 03		bcc $b3cb			bcc 	_VMCFail 					; if failed, give up.
.b3c8	18		clc				clc 								; next time round, countinue
.b3c9	80 f3		bra $b3be			bra 	_VMCNext
.b3cb					_VMCFail:
.b3cb	68		pla				pla
.b3cc					_VMCFail2:
.b3cc	7a		ply				ply
.b3cd	38		sec				sec
.b3ce	60		rts				rts
.b3cf					_VMCSuccess:
.b3cf	a9 00		lda #$00			lda 	#0 							; construct final
.b3d1	20 9b a0	jsr $a09b			jsr 	EncodeNumber
.b3d4	68		pla				pla
.b3d5	c9 2d		cmp #$2d			cmp 	#"-"
.b3d7	d0 03		bne $b3dc			bne 	_VMCNotNegative
.b3d9	20 be a6	jsr $a6be			jsr		NSMNegate
.b3dc					_VMCNotNegative:
.b3dc	7a		ply				ply
.b3dd	18		clc				clc
.b3de	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/chr.asm

.a4d0					ChrUnary:
.a4d0	fa		plx				plx 								; restore stack pos
.a4d1	20 aa a6	jsr $a6aa			jsr 	Evaluate8BitInteger			; get value
.a4d4	48		pha				pha
.a4d5	20 55 af	jsr $af55			jsr 	CheckRightBracket
.a4d8	a9 01		lda #$01			lda 	#1 							; allocate space for one char
.a4da	20 c4 b8	jsr $b8c4			jsr 	StringTempAllocate
.a4dd	68		pla				pla 								; write number to it
.a4de	20 02 b9	jsr $b902			jsr 	StringTempWrite
.a4e1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/spc.asm

.a4e2					SpcUnary:
.a4e2	fa		plx				plx 								; restore stack pos
.a4e3	20 aa a6	jsr $a6aa			jsr 	Evaluate8BitInteger			; get value
.a4e6	5a		phy				phy
.a4e7	48		pha				pha 								; save count
.a4e8	20 c4 b8	jsr $b8c4			jsr 	StringTempAllocate
.a4eb	7a		ply				ply 								; to do count in Y
.a4ec					_SpcLoop:
.a4ec	c0 00		cpy #$00			cpy 	#0
.a4ee	f0 08		beq $a4f8			beq 	_SpcExit
.a4f0	a9 20		lda #$20			lda 	#32
.a4f2	20 02 b9	jsr $b902			jsr 	StringTempWrite
.a4f5	88		dey				dey
.a4f6	80 f4		bra $a4ec			bra 	_SPCLoop
.a4f8					_SpcExit:
.a4f8	7a		ply				ply
.a4f9	20 55 af	jsr $af55			jsr 	CheckRightBracket
.a4fc	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/str.asm

.a4fd					Unary_Str:
.a4fd	fa		plx				plx
.a4fe	20 52 a6	jsr $a652			jsr 	EvaluateNumber  			; get number
.a501	20 55 af	jsr $af55			jsr 	CheckRightBracket 			; closing bracket
.a504	a9 05		lda #$05			lda 	#5 							; maximum decimals, from Basic816
.a506	20 1f a5	jsr $a51f			jsr 	ConvertNumberToString 		; do the conversion.
.a509	a9 21		lda #$21			lda		#33 						; create buffer
.a50b	20 c4 b8	jsr $b8c4			jsr 	StringTempAllocate 			; allocate memory
.a50e	da		phx				phx
.a50f	a2 00		ldx #$00			ldx 	#0
.a511					_USCopy:
.a511	bd 1a 06	lda $061a,x			lda 	DecimalBuffer,x
.a514	20 02 b9	jsr $b902			jsr 	StringTempWrite
.a517	e8		inx				inx
.a518	bd 1a 06	lda $061a,x			lda 	DecimalBuffer,x
.a51b	d0 f4		bne $a511			bne 	_USCopy
.a51d	fa		plx				plx
.a51e	60		rts				rts
.a51f					ConvertNumberToString:
.a51f	5a		phy				phy 								; save code position
.a520	8d 94 04	sta $0494			sta 	DecimalPlaces	 			; save number of DPs.
.a523	9c 95 04	stz $0495			stz 	dbOffset 					; offset into decimal buffer = start.
.a526	bd 00 04	lda $0400,x			lda 	NSStatus,x  				; is it -ve.
.a529	10 0a		bpl $a535			bpl 	_CNTSNotNegative
.a52b	29 7f		and #$7f			and 	#$7F 						; make +ve
.a52d	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a530	a9 2d		lda #$2d			lda 	#"-"
.a532	20 9b a5	jsr $a59b			jsr 	WriteDecimalBuffer
.a535					_CNTSNotNegative:
.a535	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if decimal
.a538	f0 15		beq $a54f			beq 	_CNTSNotFloat
.a53a	e8		inx				inx 								; round up
.a53b	a9 01		lda #$01			lda 	#1
.a53d	20 14 a7	jsr $a714			jsr 	NSMSetByte
.a540	ca		dex				dex
.a541	bd 28 04	lda $0428,x			lda		NSExponent,x
.a544	9d 29 04	sta $0429,x			sta 	NSExponent+1,x
.a547	a9 08		lda #$08			lda 	#NSTFloat
.a549	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.a54c	20 1c b1	jsr $b11c			jsr 	FloatAdd
.a54f					_CNTSNotFloat:
.a54f	20 7d a5	jsr $a57d			jsr 	MakePlusTwoString
.a552	20 02 b2	jsr $b202			jsr 	FloatFractionalPart 		; get the fractional part
.a555	20 c6 b2	jsr $b2c6			jsr 	NSNormalise					; normalise , exit if zero
.a558	f0 21		beq $a57b			beq 	_CNTSExit
.a55a	a9 2e		lda #$2e			lda 	#"."
.a55c	20 9b a5	jsr $a59b			jsr 	WriteDecimalBuffer 			; write decimal place
.a55f					_CNTSDecimal:
.a55f	ce 94 04	dec $0494			dec 	DecimalPlaces 				; done all the decimals
.a562	30 17		bmi $a57b			bmi 	_CNTSExit
.a564	e8		inx				inx 								; x 10.0
.a565	a9 0a		lda #$0a			lda 	#10
.a567	20 14 a7	jsr $a714			jsr 	NSMSetByte
.a56a	a9 08		lda #$08			lda 	#NSTFloat
.a56c	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a56f	ca		dex				dex
.a570	20 8f b2	jsr $b28f			jsr 	FloatMultiply
.a573	20 7d a5	jsr $a57d			jsr 	MakePlusTwoString
.a576	20 02 b2	jsr $b202			jsr 	FloatFractionalPart 		; get the fractional part
.a579	80 e4		bra $a55f			bra 	_CNTSDecimal 				; keep going.
.a57b					_CNTSExit:
.a57b	7a		ply				ply
.a57c	60		rts				rts
.a57d					MakePlusTwoString:
.a57d	da		phx				phx
.a57e	20 e9 a6	jsr $a6e9			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.a581	e8		inx				inx 								; access it
.a582	e8		inx				inx
.a583	20 65 b2	jsr $b265			jsr 	FloatIntegerPart 			; make it an integer
.a586	a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.a588	20 c6 b0	jsr $b0c6			jsr 	ConvertInt32
.a58b	a2 00		ldx #$00			ldx	 	#0
.a58d					_MPTSCopy:
.a58d	bd f8 05	lda $05f8,x			lda 	NumberBuffer,x
.a590	20 9b a5	jsr $a59b			jsr 	WriteDecimalBuffer
.a593	e8		inx				inx
.a594	bd f8 05	lda $05f8,x			lda 	NumberBuffer,x
.a597	d0 f4		bne $a58d			bne 	_MPTSCopy
.a599	fa		plx				plx
.a59a	60		rts				rts
.a59b					WriteDecimalBuffer:
.a59b	da		phx				phx
.a59c	ae 95 04	ldx $0495			ldx 	dbOffset
.a59f	9d 1a 06	sta $061a,x			sta 	DecimalBuffer,x
.a5a2	9e 1b 06	stz $061b,x			stz 	DecimalBuffer+1,x
.a5a5	ee 95 04	inc $0495			inc 	dbOffset
.a5a8	fa		plx				plx
.a5a9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/substring.asm

.a5aa					Unary_Left:
.a5aa	fa		plx				plx
.a5ab	18		clc				clc 								; only one parameter
.a5ac	20 21 a6	jsr $a621			jsr 	SubstringInitial 			; set up.
.a5af	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; Param #1 is the length
.a5b2	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.a5b5	9e 09 04	stz $0409,x			stz 	NSMantissa0+1,x 			; Start is zero.
.a5b8	80 2c		bra $a5e6			bra 	SubstringMain
.a5ba					Unary_Right:
.a5ba	fa		plx				plx
.a5bb	18		clc				clc 								; only one parameter
.a5bc	20 21 a6	jsr $a621			jsr 	SubstringInitial 			; set up.
.a5bf	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; length => param 2
.a5c2	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.a5c5	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; total length
.a5c8	fd 09 04	sbc $0409,x			sbc 	NSMantissa0+1,x 			; length - required.
.a5cb	b0 02		bcs $a5cf			bcs 	_URNotUnderflow
.a5cd	a9 00		lda #$00			lda 	#0 							; start from the beginning, as something like right$("AB",3)
.a5cf					_URNotUnderFlow:
.a5cf	9d 09 04	sta $0409,x			sta 	NSMantissa0+1,x 			; this is the start position
.a5d2	80 12		bra $a5e6			bra 	SubStringMain
.a5d4					Unary_Mid:
.a5d4	fa		plx				plx
.a5d5	38		sec				sec 								; two parameters
.a5d6	20 21 a6	jsr $a621			jsr 	SubstringInitial 			; set up.
.a5d9	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; first parameter is zero ?
.a5dc	f0 05		beq $a5e3			beq 	_UMError
.a5de	de 09 04	dec $0409,x			dec 	NSMantissa0+1,x				; reduce initial offset by 1 as MID$(a$,1..) is actually the first character
.a5e1	80 03		bra $a5e6			bra 	SubStringMain
.a5e3					_UMError:
.a5e3	4c 52 b5	jmp $b552			jmp 	ArgumentError
.a5e6					SubStringMain:
.a5e6	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; is the initial offset >= the length
.a5e9	dd 28 04	cmp $0428,x			cmp 	NSExponent,x
.a5ec	b0 2d		bcs $a61b			bcs 	_SSMNull 					; if so, return an empty string.
.a5ee	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; if copy count is zero
.a5f1	f0 28		beq $a61b			beq 	_SSMNull 					; return empty string.
.a5f3	18		clc				clc 								; add the offset +1 to the address and
.a5f4	bd 08 04	lda $0408,x			lda	 	NSMantissa0,x 				; put in zTemp
.a5f7	7d 09 04	adc $0409,x			adc 	NSMantissa0+1,x
.a5fa	85 36		sta $36				sta 	zTemp0
.a5fc	bd 10 04	lda $0410,x			lda	 	NSMantissa1,x
.a5ff	69 00		adc #$00			adc 	#0
.a601	85 37		sta $37				sta 	zTemp0+1
.a603					_SSMNoCarry:
.a603	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; characters required.
.a606	20 c4 b8	jsr $b8c4			jsr 	StringTempAllocate 			; allocate that many characters
.a609	5a		phy				phy 								; save Y
.a60a	a0 00		ldy #$00			ldy 	#0 							; start copying in.
.a60c					_SSMCopy:
.a60c	b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next character
.a60e	f0 09		beq $a619			beq 	_SSMEString 				; no more to copy
.a610	20 02 b9	jsr $b902			jsr 	StringTempWrite 			; and write it out.
.a613	c8		iny				iny
.a614	de 0a 04	dec $040a,x			dec 	NSMantissa0+2,x
.a617	d0 f3		bne $a60c			bne 	_SSMCopy
.a619					_SSMEString:
.a619	7a		ply				ply
.a61a					_SSMExit:
.a61a	60		rts				rts
.a61b					_SSMNull:
.a61b	a9 00		lda #$00			lda 	#0
.a61d	20 c4 b8	jsr $b8c4			jsr 	StringTempAllocate
.a620	60		rts				rts
.a621					SubstringInitial:
.a621	da		phx				phx 								; save initial stack position
.a622	08		php				php 								; save carry on stack indicating 2 parameters
.a623	20 5d a6	jsr $a65d			jsr 	EvaluateString 				; get a string
.a626	5a		phy				phy 								; calculate length to exponent.
.a627	a0 ff		ldy #$ff			ldy 	#$FF
.a629					_SIFindLength:
.a629	c8		iny				iny
.a62a	b1 36		lda ($36),y			lda 	(zTemp0),y
.a62c	d0 fb		bne $a629			bne 	_SIFindLength
.a62e	98		tya				tya
.a62f	9d 28 04	sta $0428,x			sta 	NSExponent,x
.a632	7a		ply				ply
.a633	e8		inx				inx
.a634	20 5d af	jsr $af5d			jsr 	CheckComma 					; comma next
.a637	20 aa a6	jsr $a6aa			jsr 	Evaluate8BitInteger 		; get next parameter
.a63a	28		plp				plp 								; is it the last parameter ?
.a63b	90 07		bcc $a644			bcc 	_SSIExit 					; if so, exit.
.a63d	e8		inx				inx
.a63e	20 5d af	jsr $af5d			jsr 	CheckComma 					; comma next
.a641	20 aa a6	jsr $a6aa			jsr 	Evaluate8BitInteger 		; get last parameter
.a644					_SSIExit:
.a644	fa		plx				plx
.a645	20 55 af	jsr $af55			jsr 	CheckRightBracket 			; check closing bracket
.a648	60		rts				rts 								; exit

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/exprhelper.asm

.a649					EvaluateValue:
.a649	48		pha				pha
.a64a	20 e8 9e	jsr $9ee8			jsr		EvaluateExpression 			; expression
.a64d	20 fd 9f	jsr $9ffd			jsr 	Dereference					; derefernce it
.a650	68		pla				pla
.a651	60		rts				rts
.a652					EvaluateNumber:
.a652	20 49 a6	jsr $a649			jsr 	EvaluateValue 				; get a value
.a655	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if string.
.a658	29 10		and #$10			and 	#NSBIsString
.a65a	d0 16		bne $a672			bne 	HelperTypeError
.a65c	60		rts				rts
.a65d					EvaluateString:
.a65d	20 49 a6	jsr $a649			jsr 	EvaluateValue 				; get a value
.a660	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if string.
.a663	29 10		and #$10			and 	#NSBIsString
.a665	f0 0b		beq $a672			beq 	HelperTypeError
.a667					CopyAddressToTemp0:
.a667	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address -> zTemp0
.a66a	85 36		sta $36				sta 	zTemp0
.a66c	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a66f	85 37		sta $37				sta 	zTemp0+1
.a671	60		rts				rts
.a672					HelperTypeError:
.a672	4c 4d b5	jmp $b54d			jmp 	TypeError
.a675					EvaluateInteger:
.a675	20 52 a6	jsr $a652			jsr 	EvaluateNumber
.a678	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check exponent is zero
.a67b	d0 0a		bne $a687			bne 	HelperValueError 			; if not, it's a float.
.a67d	60		rts				rts
.a67e					EvaluateUnsignedInteger:
.a67e	20 75 a6	jsr $a675			jsr 	EvaluateInteger 			; check integer is +ve
.a681	bd 00 04	lda $0400,x			lda 	NSStatus,x
.a684	30 01		bmi $a687			bmi 	HelperValueError
.a686	60		rts				rts
.a687					HelperValueError:
.a687	4c 52 b5	jmp $b552			jmp 	ArgumentError
.a68a					Evaluate16BitInteger:
.a68a	20 7e a6	jsr $a67e			jsr	 	EvaluateUnsignedInteger		; get integer
.a68d	bd 20 04	lda $0420,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.a690	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.a693	d0 f2		bne $a687			bne 	HelperValueError
.a695	60		rts				rts
.a696					Evaluate16BitIntegerSigned:
.a696	20 75 a6	jsr $a675			jsr	 	EvaluateInteger				; get integer
.a699	bd 20 04	lda $0420,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.a69c	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.a69f	d0 e6		bne $a687			bne 	HelperValueError
.a6a1	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; signed ?
.a6a4	10 03		bpl $a6a9			bpl 	_EISNotSigned
.a6a6	20 c7 a6	jsr $a6c7			jsr 	NSMNegateMantissa
.a6a9					_EISNotSigned:
.a6a9	60		rts				rts
.a6aa					Evaluate8BitInteger:
.a6aa	20 7e a6	jsr $a67e			jsr	 	EvaluateUnsignedInteger 	; get an integer
.a6ad	d0 d8		bne $a687			bne 	HelperValueError
.a6af	bd 20 04	lda $0420,x			lda 	NSMantissa3,x	 			; bytes 1, 2 & 3 must be zero
.a6b2	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.a6b5	1d 10 04	ora $0410,x			ora 	NSMantissa1,x
.a6b8	d0 cd		bne $a687			bne 	HelperValueError
.a6ba	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.a6bd	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/mult8x8.asm

.b3df					Multiply8x8:
.b3df	4a		lsr a		  		lsr 	a  							; prime the carry bit for the loop
.b3e0	85 36		sta $36			  	sta 	zTemp0
.b3e2	86 37		stx $37				stx 	zTemp0+1
.b3e4	a9 00		lda #$00			lda 	#0
.b3e6	a2 08		ldx #$08			ldx 	#8
.b3e8					_M88Loop:
.b3e8	90 03		bcc $b3ed			bcc 	_M88NoAdd
.b3ea	18		clc				clc
.b3eb	65 37		adc $37				adc 	zTemp0+1
.b3ed					_M88NoAdd:
.b3ed	6a		ror a				ror 	a
.b3ee	66 36		ror $36				ror 	zTemp0  					; pull another bit out for the next iteration
.b3f0	ca		dex				dex         						; inc/dec don't modify carry; only shifts and adds do
.b3f1	d0 f5		bne $b3e8			bne 	_M88Loop
.b3f3	85 37		sta $37				sta 	zTemp0+1 					; store high 8 bits.
.b3f5	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/utility.asm

.a6be					NSMNegate:
.a6be	bd 00 04	lda $0400,x			lda 	NSStatus,x
.a6c1	49 80		eor #$80			eor 	#NSBIsNegative
.a6c3	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a6c6	60		rts				rts
.a6c7					NSMNegateMantissa:
.a6c7	38		sec				sec
.a6c8	a9 00		lda #$00			lda 	#0
.a6ca	fd 08 04	sbc $0408,x			sbc 	NSMantissa0,x
.a6cd	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a6d0	a9 00		lda #$00			lda 	#0
.a6d2	fd 10 04	sbc $0410,x			sbc 	NSMantissa1,x
.a6d5	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a6d8	a9 00		lda #$00			lda 	#0
.a6da	fd 18 04	sbc $0418,x			sbc 	NSMantissa2,x
.a6dd	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.a6e0	a9 00		lda #$00			lda 	#0
.a6e2	fd 20 04	sbc $0420,x			sbc 	NSMantissa3,x
.a6e5	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.a6e8	60		rts				rts
.a6e9					NSMShiftUpTwo:
.a6e9	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.a6ec	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.a6ef	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a6f2	9d 12 04	sta $0412,x			sta 	NSMantissa1+2,x
.a6f5	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.a6f8	9d 1a 04	sta $041a,x			sta 	NSMantissa2+2,x
.a6fb	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.a6fe	9d 22 04	sta $0422,x			sta 	NSMantissa3+2,x
.a701	bd 28 04	lda $0428,x			lda 	NSExponent,x
.a704	9d 2a 04	sta $042a,x			sta 	NSExponent+2,x
.a707	bd 00 04	lda $0400,x			lda 	NSStatus,x
.a70a	9d 02 04	sta $0402,x			sta 	NSStatus+2,x
.a70d	60		rts				rts
.a70e					NSMSetZeroMantissaOnly:
.a70e	a9 00		lda #$00			lda 	#0
.a710	80 08		bra $a71a			bra 	NSMSetMantissa
.a712					NSMSetZero:
.a712	a9 00		lda #$00			lda 	#0
.a714					NSMSetByte:
.a714	9e 28 04	stz $0428,x			stz 	NSExponent,x 				; zero exponent, as integer.
.a717	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; status zero (integer)
.a71a					NSMSetMantissa:
.a71a	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; mantissa
.a71d	9e 10 04	stz $0410,x			stz 	NSMantissa1,x
.a720	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.a723	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.a726	60		rts				rts
.a727					NSMShiftLeft:
.a727	18		clc				clc
.a728					NSMRotateLeft:
.a728	3e 08 04	rol $0408,x			rol 	NSMantissa0,x
.a72b	3e 10 04	rol $0410,x			rol		NSMantissa1,x
.a72e	3e 18 04	rol $0418,x			rol		NSMantissa2,x
.a731	3e 20 04	rol $0420,x			rol		NSMantissa3,x
.a734	60		rts				rts
.a735					NSMShiftRight:
.a735	5e 20 04	lsr $0420,x			lsr 	NSMantissa3,x
.a738	7e 18 04	ror $0418,x			ror		NSMantissa2,x
.a73b	7e 10 04	ror $0410,x			ror		NSMantissa1,x
.a73e	7e 08 04	ror $0408,x			ror		NSMantissa0,x
.a741	60		rts				rts
.a742					NSMIsZero:
.a742	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.a745	1d 18 04	ora $0418,x			ora		NSMantissa2,x
.a748	1d 10 04	ora $0410,x			ora		NSMantissa1,x
.a74b	1d 08 04	ora $0408,x			ora		NSMantissa0,x
.a74e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/asmcore.asm

.b3f6					Assemble_ora:
.b3f6	20 c7 89	jsr $89c7		jsr	AssembleGroup1
>b3f9	01					.byte $01
.b3fa					Assemble_and:
.b3fa	20 c7 89	jsr $89c7		jsr	AssembleGroup1
>b3fd	21					.byte $21
.b3fe					Assemble_eor:
.b3fe	20 c7 89	jsr $89c7		jsr	AssembleGroup1
>b401	41					.byte $41
.b402					Assemble_adc:
.b402	20 c7 89	jsr $89c7		jsr	AssembleGroup1
>b405	61					.byte $61
.b406					Assemble_sta:
.b406	20 c7 89	jsr $89c7		jsr	AssembleGroup1
>b409	81					.byte $81
.b40a					Assemble_lda:
.b40a	20 c7 89	jsr $89c7		jsr	AssembleGroup1
>b40d	a1					.byte $a1
.b40e					Assemble_cmp:
.b40e	20 c7 89	jsr $89c7		jsr	AssembleGroup1
>b411	c1					.byte $c1
.b412					Assemble_sbc:
.b412	20 c7 89	jsr $89c7		jsr	AssembleGroup1
>b415	e1					.byte $e1
.b416					Assemble_asl:
.b416	20 ce 89	jsr $89ce		jsr	AssembleGroup2
>b419	02					.byte $02
>b41a	75					.byte $75
.b41b					Assemble_rol:
.b41b	20 ce 89	jsr $89ce		jsr	AssembleGroup2
>b41e	22					.byte $22
>b41f	75					.byte $75
.b420					Assemble_lsr:
.b420	20 ce 89	jsr $89ce		jsr	AssembleGroup2
>b423	42					.byte $42
>b424	75					.byte $75
.b425					Assemble_ror:
.b425	20 ce 89	jsr $89ce		jsr	AssembleGroup2
>b428	62					.byte $62
>b429	75					.byte $75
.b42a					Assemble_stx:
.b42a	20 ce 89	jsr $89ce		jsr	AssembleGroup2
>b42d	82					.byte $82
>b42e	50					.byte $50
.b42f					Assemble_ldx:
.b42f	20 ce 89	jsr $89ce		jsr	AssembleGroup2
>b432	a2					.byte $a2
>b433	d0					.byte $d0
.b434					Assemble_dec:
.b434	20 ce 89	jsr $89ce		jsr	AssembleGroup2
>b437	c2					.byte $c2
>b438	55					.byte $55
.b439					Assemble_inc:
.b439	20 ce 89	jsr $89ce		jsr	AssembleGroup2
>b43c	e2					.byte $e2
>b43d	55					.byte $55
.b43e					Assemble_stz:
.b43e	20 ce 89	jsr $89ce		jsr	AssembleGroup2
>b441	60					.byte $60
>b442	44					.byte $44
.b443					Assemble_bit:
.b443	20 ce 89	jsr $89ce		jsr	AssembleGroup2
>b446	20					.byte $20
>b447	55					.byte $55
.b448					Assemble_sty:
.b448	20 ce 89	jsr $89ce		jsr	AssembleGroup2
>b44b	80					.byte $80
>b44c	54					.byte $54
.b44d					Assemble_ldy:
.b44d	20 ce 89	jsr $89ce		jsr	AssembleGroup2
>b450	a0					.byte $a0
>b451	d5					.byte $d5
.b452					Assemble_cpy:
.b452	20 ce 89	jsr $89ce		jsr	AssembleGroup2
>b455	c0					.byte $c0
>b456	d4					.byte $d4
.b457					Assemble_cpx:
.b457	20 ce 89	jsr $89ce		jsr	AssembleGroup2
>b45a	e0					.byte $e0
>b45b	d0					.byte $d0
.b45c					Assemble_tsb:
.b45c	20 ce 89	jsr $89ce		jsr	AssembleGroup2
>b45f	00					.byte $00
>b460	50					.byte $50
.b461					Assemble_trb:
.b461	20 ce 89	jsr $89ce		jsr	AssembleGroup2
>b464	10					.byte $10
>b465	50					.byte $50
.b466					Assemble_jsr:
.b466	20 ce 89	jsr $89ce		jsr	AssembleGroup2
>b469	14					.byte $14
>b46a	10					.byte $10
.b46b					Assemble_jmp:
.b46b	20 ce 89	jsr $89ce		jsr	AssembleGroup2
>b46e	40					.byte $40
>b46f	10					.byte $10
.b470					Assemble_bpl:
.b470	20 1f 8a	jsr $8a1f		jsr	AssembleGroup3
>b473	10					.byte $10
.b474					Assemble_bmi:
.b474	20 1f 8a	jsr $8a1f		jsr	AssembleGroup3
>b477	30					.byte $30
.b478					Assemble_bvc:
.b478	20 1f 8a	jsr $8a1f		jsr	AssembleGroup3
>b47b	50					.byte $50
.b47c					Assemble_bvs:
.b47c	20 1f 8a	jsr $8a1f		jsr	AssembleGroup3
>b47f	70					.byte $70
.b480					Assemble_bcc:
.b480	20 1f 8a	jsr $8a1f		jsr	AssembleGroup3
>b483	90					.byte $90
.b484					Assemble_bcs:
.b484	20 1f 8a	jsr $8a1f		jsr	AssembleGroup3
>b487	b0					.byte $b0
.b488					Assemble_bne:
.b488	20 1f 8a	jsr $8a1f		jsr	AssembleGroup3
>b48b	d0					.byte $d0
.b48c					Assemble_beq:
.b48c	20 1f 8a	jsr $8a1f		jsr	AssembleGroup3
>b48f	f0					.byte $f0
.b490					Assemble_bra:
.b490	20 1f 8a	jsr $8a1f		jsr	AssembleGroup3
>b493	80					.byte $80
.b494					Assemble_brk:
.b494	20 55 8a	jsr $8a55		jsr	AssembleGroup4
>b497	00					.byte $00
.b498					Assemble_php:
.b498	20 55 8a	jsr $8a55		jsr	AssembleGroup4
>b49b	08					.byte $08
.b49c					Assemble_clc:
.b49c	20 55 8a	jsr $8a55		jsr	AssembleGroup4
>b49f	18					.byte $18
.b4a0					Assemble_plp:
.b4a0	20 55 8a	jsr $8a55		jsr	AssembleGroup4
>b4a3	28					.byte $28
.b4a4					Assemble_sec:
.b4a4	20 55 8a	jsr $8a55		jsr	AssembleGroup4
>b4a7	38					.byte $38
.b4a8					Assemble_rti:
.b4a8	20 55 8a	jsr $8a55		jsr	AssembleGroup4
>b4ab	40					.byte $40
.b4ac					Assemble_pha:
.b4ac	20 55 8a	jsr $8a55		jsr	AssembleGroup4
>b4af	48					.byte $48
.b4b0					Assemble_cli:
.b4b0	20 55 8a	jsr $8a55		jsr	AssembleGroup4
>b4b3	58					.byte $58
.b4b4					Assemble_phy:
.b4b4	20 55 8a	jsr $8a55		jsr	AssembleGroup4
>b4b7	5a					.byte $5a
.b4b8					Assemble_rts:
.b4b8	20 55 8a	jsr $8a55		jsr	AssembleGroup4
>b4bb	60					.byte $60
.b4bc					Assemble_pla:
.b4bc	20 55 8a	jsr $8a55		jsr	AssembleGroup4
>b4bf	68					.byte $68
.b4c0					Assemble_sei:
.b4c0	20 55 8a	jsr $8a55		jsr	AssembleGroup4
>b4c3	78					.byte $78
.b4c4					Assemble_ply:
.b4c4	20 55 8a	jsr $8a55		jsr	AssembleGroup4
>b4c7	7a					.byte $7a
.b4c8					Assemble_dey:
.b4c8	20 55 8a	jsr $8a55		jsr	AssembleGroup4
>b4cb	88					.byte $88
.b4cc					Assemble_txa:
.b4cc	20 55 8a	jsr $8a55		jsr	AssembleGroup4
>b4cf	8a					.byte $8a
.b4d0					Assemble_tya:
.b4d0	20 55 8a	jsr $8a55		jsr	AssembleGroup4
>b4d3	98					.byte $98
.b4d4					Assemble_txs:
.b4d4	20 55 8a	jsr $8a55		jsr	AssembleGroup4
>b4d7	9a					.byte $9a
.b4d8					Assemble_tay:
.b4d8	20 55 8a	jsr $8a55		jsr	AssembleGroup4
>b4db	a8					.byte $a8
.b4dc					Assemble_tax:
.b4dc	20 55 8a	jsr $8a55		jsr	AssembleGroup4
>b4df	aa					.byte $aa
.b4e0					Assemble_clv:
.b4e0	20 55 8a	jsr $8a55		jsr	AssembleGroup4
>b4e3	b8					.byte $b8
.b4e4					Assemble_tsx:
.b4e4	20 55 8a	jsr $8a55		jsr	AssembleGroup4
>b4e7	ba					.byte $ba
.b4e8					Assemble_iny:
.b4e8	20 55 8a	jsr $8a55		jsr	AssembleGroup4
>b4eb	c8					.byte $c8
.b4ec					Assemble_dex:
.b4ec	20 55 8a	jsr $8a55		jsr	AssembleGroup4
>b4ef	ca					.byte $ca
.b4f0					Assemble_cld:
.b4f0	20 55 8a	jsr $8a55		jsr	AssembleGroup4
>b4f3	d8					.byte $d8
.b4f4					Assemble_phx:
.b4f4	20 55 8a	jsr $8a55		jsr	AssembleGroup4
>b4f7	da					.byte $da
.b4f8					Assemble_stp:
.b4f8	20 55 8a	jsr $8a55		jsr	AssembleGroup4
>b4fb	db					.byte $db
.b4fc					Assemble_inx:
.b4fc	20 55 8a	jsr $8a55		jsr	AssembleGroup4
>b4ff	e8					.byte $e8
.b500					Assemble_nop:
.b500	20 55 8a	jsr $8a55		jsr	AssembleGroup4
>b503	ea					.byte $ea
.b504					Assemble_sed:
.b504	20 55 8a	jsr $8a55		jsr	AssembleGroup4
>b507	f8					.byte $f8
.b508					Assemble_plx:
.b508	20 55 8a	jsr $8a55		jsr	AssembleGroup4
>b50b	fa					.byte $fa

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/constants.asm

.b50c					DecimalScalarTable:
>b50c	66 66 66 66				.dword $66666666 ; 0.1
>b510	de					.byte $de
>b511	1f 85 eb 51				.dword $51eb851f ; 0.01
>b515	db					.byte $db
>b516	4c 37 89 41				.dword $4189374c ; 0.001
>b51a	d8					.byte $d8
>b51b	ac 8b db 68				.dword $68db8bac ; 0.0001
>b51f	d4					.byte $d4
>b520	24 d6 e2 53				.dword $53e2d624 ; 1e-05
>b524	d1					.byte $d1
>b525	83 de 1b 43				.dword $431bde83 ; 1e-06
>b529	ce					.byte $ce
>b52a	6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>b52e	ca					.byte $ca
>b52f	89 3b e6 55				.dword $55e63b89 ; 1e-08
>b533	c7					.byte $c7
>b534	a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>b538	c4					.byte $c4
>b539	67 7f f3 6d				.dword $6df37f67 ; 1e-10
>b53d	c0					.byte $c0
>b53e	86 ff f5 57				.dword $57f5ff86 ; 1e-11
>b542	bd					.byte $bd

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.asm

.b543					SyntaxError:
.b543	a9 02		lda #$02		lda	#2
.b545	4c d7 9a	jmp $9ad7		jmp	ErrorHandler
.b548					RangeError:
.b548	a9 04		lda #$04		lda	#4
.b54a	4c d7 9a	jmp $9ad7		jmp	ErrorHandler
.b54d					TypeError:
.b54d	a9 05		lda #$05		lda	#5
.b54f	4c d7 9a	jmp $9ad7		jmp	ErrorHandler
.b552					ArgumentError:
.b552	a9 07		lda #$07		lda	#7
.b554	4c d7 9a	jmp $9ad7		jmp	ErrorHandler
.b557					NotDoneError:
.b557	a9 0c		lda #$0c		lda	#12
.b559	4c d7 9a	jmp $9ad7		jmp	ErrorHandler
.b55c					ErrorText:
>b55c	42 72 65 61 6b 00			.text	"Break",0
>b562	53 79 6e 74 61 78 20 65			.text	"Syntax error",0
>b56a	72 72 6f 72 00
>b56f	44 69 76 69 73 69 6f 6e			.text	"Division by zero",0
>b577	20 62 79 20 7a 65 72 6f 00
>b580	4f 75 74 20 6f 66 20 52			.text	"Out of Range",0
>b588	61 6e 67 65 00
>b58d	54 79 70 65 20 6d 69 73			.text	"Type mismatch",0
>b595	6d 61 74 63 68 00
>b59b	4f 75 74 20 6f 66 20 6d			.text	"Out of memory",0
>b5a3	65 6d 6f 72 79 00
>b5a9	49 6c 6c 65 67 61 6c 20			.text	"Illegal argument",0
>b5b1	61 72 67 75 6d 65 6e 74 00
>b5ba	53 74 6f 70 00				.text	"Stop",0
>b5bf	53 74 72 69 6e 67 20 74			.text	"String too long",0
>b5c7	6f 6f 20 6c 6f 6e 67 00
>b5cf	41 73 73 65 72 74 69 6f			.text	"Assertion failed",0
>b5d7	6e 20 66 61 69 6c 65 64 00
>b5e0	4f 75 74 20 6f 66 20 64			.text	"Out of data",0
>b5e8	61 74 61 00
>b5ec	55 6e 69 6d 70 6c 65 6d			.text	"Unimplemented",0
>b5f4	65 6e 74 65 64 00
>b5fa	4e 6f 20 73 75 63 68 20			.text	"No such line number",0
>b602	6c 69 6e 65 20 6e 75 6d 62 65 72 00
>b60e	52 65 74 75 72 6e 20 77			.text	"Return without Gosub",0
>b616	69 74 68 6f 75 74 20 47 6f 73 75 62 00
>b623	55 6e 74 69 6c 20 77 69			.text	"Until without Repeat",0
>b62b	74 68 6f 75 74 20 52 65 70 65 61 74 00
>b638	57 65 6e 64 20 77 69 74			.text	"Wend without While",0
>b640	68 6f 75 74 20 57 68 69 6c 65 00
>b64b	4e 65 78 74 20 77 69 74			.text	"Next without For",0
>b653	68 6f 75 74 20 46 6f 72 00
>b65c	42 41 53 49 43 20 53 74			.text	"BASIC Stack full",0
>b664	61 63 6b 20 66 75 6c 6c 00
>b66d	4f 70 65 6e 20 53 74 72			.text	"Open Structure",0
>b675	75 63 74 75 72 65 00
>b67c	45 6e 64 50 72 6f 63 20			.text	"EndProc without call",0
>b684	77 69 74 68 6f 75 74 20 63 61 6c 6c 00
>b691	41 72 72 61 79 20 61 6c			.text	"Array already defined",0
>b699	72 65 61 64 79 20 64 65 66 69 6e 65 64 00
>b6a7	41 72 72 61 79 20 73 69			.text	"Array size",0
>b6af	7a 65 00
>b6b2	42 61 64 20 61 72 72 61			.text	"Bad array index",0
>b6ba	79 20 69 6e 64 65 78 00

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/timestamp.asm

>b6c2	42 75 69 6c 74 20 46 72			.text "Built Friday 04-Nov-2022. Build 2651."
>b6ca	69 64 61 79 20 30 34 2d 4e 6f 76 2d 32 30 32 32
>b6da	2e 20 42 75 69 6c 64 20 32 36 35 31 2e

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/hardware/junior/extern.asm

.b6e7					EXTInitialise:
.b6e7	64 01		stz $01				stz 	1 							; Access I/O
.b6e9	9c 04 d0	stz $d004			stz 	$D004 						; Disable border
.b6ec	9c 08 d0	stz $d008			stz 	$D008
.b6ef	9c 09 d0	stz $d009			stz 	$D009
.b6f2	a9 09		lda #$09			lda 	#1+8						; Timer On at 70Hz counting up.
.b6f4	8d 58 d6	sta $d658			sta 	$D658
.b6f7	60		rts				rts
.b6f8					EXTClearScreen:
.b6f8	4c ea ff	jmp $ffea			jmp 	$FFEA
.b6fb					EXTPrintCharacter:
.b6fb	48		pha				pha
.b6fc	da		phx				phx
.b6fd	5a		phy				phy
.b6fe	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.b701	7a		ply				ply
.b702	fa		plx				plx
.b703	68		pla				pla
.b704	60		rts				rts
.b705					EXTInputSingleCharacter:
.b705	da		phx				phx
.b706	5a		phy				phy
.b707					_EISCWait:
.b707	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.b70a	c9 00		cmp #$00			cmp 	#0
.b70c	f0 f9		beq $b707			beq 	_EISCWait
.b70e	7a		ply				ply
.b70f	fa		plx				plx
.b710	60		rts				rts
.b711					EXTInputLine:
.b711	a2 00		ldx #$00			ldx 	#0 							; position in line <- start of line
.b713					_ILLoop:
.b713	da		phx				phx 								; read character in
.b714	20 cf ff	jsr $ffcf			jsr 	$FFCF
.b717	fa		plx				plx
.b718	c9 08		cmp #$08			cmp 	#8 							; backspace, CBM doesn't need this.
.b71a	f0 12		beq $b72e			beq 	_ILBackspace
.b71c	c9 0d		cmp #$0d			cmp 	#13							; exit ?
.b71e	f0 15		beq $b735			beq 	_ILExit
.b720	c9 20		cmp #$20			cmp 	#32 						; ignore other control
.b722	90 ef		bcc $b713			bcc 	_ILLoop
.b724	e0 50		cpx #$50			cpx 	#MaxLineSize 				; already full buffer
.b726	f0 eb		beq $b713			beq 	_ILLoop
.b728	9d a7 05	sta $05a7,x			sta 	lineBuffer,x 				; save it
.b72b	e8		inx				inx
.b72c	80 e5		bra $b713			bra 	_ILLoop
.b72e					_ILBackspace:
.b72e	e0 00		cpx #$00			cpx 	#0  						; can't backspace, start of line.
.b730	f0 e1		beq $b713			beq 	_ILLoop
.b732	ca		dex				dex 								; back one.
.b733	80 de		bra $b713			bra 	_ILLoop
.b735					_ILExit:
.b735	20 fb b6	jsr $b6fb			jsr 	EXTPrintCharacter
.b738	9e a7 05	stz $05a7,x			stz 	lineBuffer,x 				; make ASCIIZ and exit with address in XA
.b73b	60		rts				rts
.b73c					EXTBreakCheck:
.b73c	4c e1 ff	jmp $ffe1			jmp		$FFE1
.b73f					EXTReadController:
.b73f	da		phx				phx
.b740	a2 00		ldx #$00			ldx 	#0
.b742	a9 05		lda #$05			lda 	#(($2D) >> 3)
.b744	20 e7 ff	jsr $ffe7			jsr 	$FFE7
.b747	29 20		and #$20			and 	#($01 << (($2D) & 7))
.b749	f0 04		beq $b74f			beq 	_NoSet1
.b74b	8a		txa				txa
.b74c	09 01		ora #$01			ora 	#1
.b74e	aa		tax				tax
.b74f					_NoSet1:
.b74f	a9 05		lda #$05			lda 	#(($2C) >> 3)
.b751	20 e7 ff	jsr $ffe7			jsr 	$FFE7
.b754	29 10		and #$10			and 	#($01 << (($2C) & 7))
.b756	f0 04		beq $b75c			beq 	_NoSet1
.b758	8a		txa				txa
.b759	09 02		ora #$02			ora 	#2
.b75b	aa		tax				tax
.b75c					_NoSet1:
.b75c	a9 06		lda #$06			lda 	#(($32) >> 3)
.b75e	20 e7 ff	jsr $ffe7			jsr 	$FFE7
.b761	29 04		and #$04			and 	#($01 << (($32) & 7))
.b763	f0 04		beq $b769			beq 	_NoSet1
.b765	8a		txa				txa
.b766	09 04		ora #$04			ora 	#4
.b768	aa		tax				tax
.b769					_NoSet1:
.b769	a9 04		lda #$04			lda 	#(($25) >> 3)
.b76b	20 e7 ff	jsr $ffe7			jsr 	$FFE7
.b76e	29 20		and #$20			and 	#($01 << (($25) & 7))
.b770	f0 04		beq $b776			beq 	_NoSet1
.b772	8a		txa				txa
.b773	09 08		ora #$08			ora 	#8
.b775	aa		tax				tax
.b776					_NoSet1:
.b776	a9 04		lda #$04			lda 	#(($26) >> 3)
.b778	20 e7 ff	jsr $ffe7			jsr 	$FFE7
.b77b	29 40		and #$40			and 	#($01 << (($26) & 7))
.b77d	f0 04		beq $b783			beq 	_NoSet1
.b77f	8a		txa				txa
.b780	09 10		ora #$10			ora 	#16
.b782	aa		tax				tax
.b783					_NoSet1:
.b783	8a		txa				txa
.b784	fa		plx				plx
.b785	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/delete.asm

.b786					MemoryDeleteLine:
.b786	20 a5 b7	jsr $b7a5			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.b789	b2 30		lda ($30)			lda 	(codePtr) 					; size to delete => y
.b78b	a8		tay				tay
.b78c					_MDDLLoop:
.b78c	b1 30		lda ($30),y			lda 	(codePtr),y 				; copy down
.b78e	92 30		sta ($30)			sta 	(codePtr)
.b790	a5 30		lda $30				lda 	codePtr 					; check done the lot.
.b792	c5 3a		cmp $3a				cmp 	zTemp2
.b794	d0 07		bne $b79d			bne 	_MDLDLNext
.b796	a5 31		lda $31				lda 	codePtr+1
.b798	c5 3b		cmp $3b				cmp 	zTemp2+1
.b79a	d0 01		bne $b79d			bne 	_MDLDLNext
.b79c					_MDDLExit:
.b79c	60		rts				rts
.b79d					_MDLDLNext:
.b79d	e6 30		inc $30				inc 	codePtr						; next byte
.b79f	d0 eb		bne $b78c			bne 	_MDDLLoop
.b7a1	e6 31		inc $31				inc 	codePtr+1
.b7a3	80 e7		bra $b78c			bra 	_MDDLLoop
.b7a5					IMemoryFindEnd:
.b7a5	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.b7a7	85 3a		sta $3a				sta 	0+zTemp2
.b7a9	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.b7ab	85 3b		sta $3b				sta 	1+zTemp2
.b7ad					_MDLFELoop:
.b7ad	b2 3a		lda ($3a)			lda 	(zTemp2)
.b7af	f0 0b		beq $b7bc			beq 	_MDLFEExit
.b7b1	18		clc				clc
.b7b2	65 3a		adc $3a				adc 	zTemp2
.b7b4	85 3a		sta $3a				sta 	zTemp2
.b7b6	90 f5		bcc $b7ad			bcc 	_MDLFELoop
.b7b8	e6 3b		inc $3b				inc 	zTemp2+1
.b7ba	80 f1		bra $b7ad			bra 	_MDLFELoop
.b7bc					_MDLFEExit:
.b7bc	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/insert.asm

.b7bd					MemoryInsertLine:
.b7bd	08		php				php
.b7be	20 a5 b7	jsr $b7a5			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.b7c1	a5 3b		lda $3b				lda 	zTemp2+1 					; space ?
.b7c3	1a		inc a				inc 	a
.b7c4	c9 7f		cmp #$7f			cmp 	#(BasicEnd >> 8)-1
.b7c6	b0 36		bcs $b7fe			bcs 	_MDLIError
.b7c8	28		plp				plp
.b7c9	90 08		bcc $b7d3			bcc 	_MDLIFound
.b7cb	a5 3a		lda $3a				lda 	zTemp2 						; if CS on entry append.
.b7cd	85 30		sta $30				sta 	codePtr
.b7cf	a5 3b		lda $3b				lda 	zTemp2+1
.b7d1	85 31		sta $31				sta 	codePtr+1
.b7d3					_MDLIFound:
.b7d3	ad a7 04	lda $04a7			lda 	tokenOffset 				; insert gap in Y, the offset, e.g. length of the new line
.b7d6	a8		tay				tay
.b7d7					_MDLIInsert:
.b7d7	b2 3a		lda ($3a)			lda 	(zTemp2) 					; shift one byte up , at least one covers end case.
.b7d9	91 3a		sta ($3a),y			sta 	(zTemp2),y 					; work from top down.
.b7db	a5 30		lda $30				lda 	codePtr 					; done insert point ?
.b7dd	c5 3a		cmp $3a				cmp 	zTemp2
.b7df	d0 06		bne $b7e7			bne 	_MDLINext
.b7e1	a5 31		lda $31				lda 	codePtr+1
.b7e3	c5 3b		cmp $3b				cmp 	zTemp2+1
.b7e5	f0 0a		beq $b7f1			beq 	_MDLIHaveSpace
.b7e7					_MDLINext:
.b7e7	a5 3a		lda $3a				lda 	zTemp2 						; if no, keep zTemp2 going backwards
.b7e9	d0 02		bne $b7ed			bne 	_MDLINoBorrow
.b7eb	c6 3b		dec $3b				dec 	zTemp2+1
.b7ed					_MDLINoBorrow:
.b7ed	c6 3a		dec $3a				dec 	zTemp2
.b7ef	80 e6		bra $b7d7			bra 	_MDLIInsert
.b7f1					_MDLIHaveSpace:
.b7f1	ac a7 04	ldy $04a7			ldy 	tokenOffset 				; bytes to copy
.b7f4	88		dey				dey 								; from offset-1 to 0
.b7f5					_MDLICopy:
.b7f5	b9 a7 04	lda $04a7,y			lda 	tokenOffset,y
.b7f8	91 30		sta ($30),y			sta 	(codePtr),y
.b7fa	88		dey				dey
.b7fb	10 f8		bpl $b7f5			bpl 	_MDLICopy
.b7fd	60		rts				rts
.b7fe					_MDLIError:
.b7fe	a9 06		lda #$06		lda	#6
.b800	4c d7 9a	jmp $9ad7		jmp	ErrorHandler
.b803					MDLAppendLine:
.b803	86 37		stx $37				stx 	zTemp0+1 					; save new line at zTemp0
.b805	85 36		sta $36				sta 	zTemp0
.b807	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.b809	85 38		sta $38				sta 	0+zTemp1
.b80b	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.b80d	85 39		sta $39				sta 	1+zTemp1
.b80f	b2 38		lda ($38)			lda 	(zTemp1)
.b811	d0 0a		bne $b81d			bne 	_MDLANoInitialise
.b813	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.b815	8d eb 06	sta $06eb			sta 	0+AppendPointer
.b818	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.b81a	8d ec 06	sta $06ec			sta 	1+AppendPointer
.b81d					_MDLANoInitialise:
.b81d	18		clc				clc
.b81e	ad eb 06	lda $06eb			lda 	AppendPointer 				; copy append pointer to zTemp1 adding the offset as you go
.b821	85 38		sta $38				sta 	zTemp1
.b823	72 36		adc ($36)			adc 	(zTemp0)
.b825	8d eb 06	sta $06eb			sta 	AppendPointer
.b828	ad ec 06	lda $06ec			lda 	AppendPointer+1
.b82b	85 39		sta $39				sta 	zTemp1+1
.b82d	69 00		adc #$00			adc 	#0
.b82f	8d ec 06	sta $06ec			sta 	AppendPointer+1
.b832	a0 00		ldy #$00			ldy 	#0
.b834					_MDLACopy:
.b834	b1 36		lda ($36),y			lda 	(zTemp0),y 					; copy new line in
.b836	91 38		sta ($38),y			sta 	(zTemp1),y
.b838	c8		iny				iny
.b839	98		tya				tya
.b83a	d2 36		cmp ($36)			cmp 	(zTemp0) 					; done whole line
.b83c	d0 f6		bne $b834			bne 	_MDLACopy
.b83e	a9 00		lda #$00			lda 	#0 							; end of program.
.b840	91 38		sta ($38),y			sta 	(zTemp1),y
.b842	60		rts				rts
.06eb					AppendPointer:
>06eb							.fill 	2

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/memory.asm

.a74f					MemoryNew:
.a74f	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a751	85 30		sta $30				sta 	codePtr
.a753	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a755	85 31		sta $31				sta 	codePtr+1
.a757	a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.a759	92 30		sta ($30)			sta 	(codePtr)
.a75b	60		rts				rts
.a75c					MemoryInline:
.a75c	98		tya				tya 								; put address into stack,x
.a75d	18		clc				clc
.a75e	65 30		adc $30				adc 	codePtr
.a760	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a763	a5 31		lda $31				lda 	codePtr+1
.a765	69 00		adc #$00			adc 	#0
.a767	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a76a	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.a76d	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.a770	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/search.asm

.a771					MemorySearch:
.a771	85 36		sta $36				sta 	zTemp0 						; save line number zTemp0
.a773	86 37		stx $37				stx 	zTemp0+1
.a775	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a777	85 30		sta $30				sta 	codePtr
.a779	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a77b	85 31		sta $31				sta 	codePtr+1
.a77d					_MTAXLoop:
.a77d	b2 30		lda ($30)			lda 	(codePtr)
.a77f	18		clc				clc
.a780	f0 21		beq $a7a3			beq 	_MTAXExit 					; reached end, exit with CC.
.a782	a0 01		ldy #$01			ldy 	#1 							; calculate current line# - requested line#
.a784	b1 30		lda ($30),y			lda 	(codePtr),y
.a786	38		sec				sec
.a787	e5 36		sbc $36				sbc 	zTemp0
.a789	85 38		sta $38				sta 	zTemp1 						; save interim to set Z
.a78b	c8		iny				iny 								; do the MSB
.a78c	b1 30		lda ($30),y			lda 	(codePtr),y
.a78e	e5 37		sbc $37				sbc 	zTemp0+1
.a790	05 38		ora $38				ora 	zTemp1
.a792	f0 0f		beq $a7a3			beq 	_MTAXExit	 				; found
.a794	b0 0d		bcs $a7a3			bcs 	_MTAXExit 					; current < required exit
.a796	18		clc				clc
.a797	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.a799	65 30		adc $30				adc 	codePtr
.a79b	85 30		sta $30				sta 	codePtr
.a79d	90 02		bcc $a7a1			bcc 	_CREExit
.a79f	e6 31		inc $31				inc 	codePtr+1
.a7a1					_CREExit:
.a7a1	80 da		bra $a77d			bra 	_MTAXLoop
.a7a3					_MTAXExit:
.a7a3	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/bytes.asm

.a7a4					StackPushByte:
.a7a4	48		pha				pha 								; save byte
.a7a5	a5 34		lda $34				lda 	BasicStack
.a7a7	d0 09		bne $a7b2			bne 	_SPBNoBorrow
.a7a9	c6 35		dec $35				dec 	BasicStack+1
.a7ab	48		pha				pha
.a7ac	a5 35		lda $35				lda 	BasicStack+1
.a7ae	c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.a7b0	90 06		bcc $a7b8			bcc 	_SPBMemory
.a7b2					_SPBNoBorrow:
.a7b2	c6 34		dec $34				dec 	BasicStack
.a7b4	68		pla				pla 								; get back and write
.a7b5	92 34		sta ($34)			sta 	(BasicStack)
.a7b7	60		rts				rts
.a7b8					_SPBMemory:
.a7b8	a9 12		lda #$12		lda	#18
.a7ba	4c d7 9a	jmp $9ad7		jmp	ErrorHandler
.a7bd					StackPopByte:
.a7bd	b2 34		lda ($34)			lda 	(BasicStack)
.a7bf	e6 34		inc $34				inc 	BasicStack
.a7c1	d0 02		bne $a7c5			bne 	_SPBNoCarry
.a7c3	e6 35		inc $35				inc 	BasicStack+1
.a7c5					_SPBNoCarry:
.a7c5	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/frames.asm

.a7c6					StackOpen:
.a7c6	48		pha				pha 								; save frame byte
.a7c7	29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.a7c9	0a		asl a				asl 	a 							; claim twice this for storage
.a7ca	49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.a7cc	38		sec				sec 								; so basically subtracting from
.a7cd	65 34		adc $34				adc 	basicStack 	 				; basicStack
.a7cf	85 34		sta $34				sta 	basicStack
.a7d1	b0 08		bcs $a7db			bcs 	_SONoBorrow
.a7d3	c6 35		dec $35				dec 	basicStack+1
.a7d5	a5 35		lda $35				lda 	basicStack+1 				; have we reached stack overflow
.a7d7	c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.a7d9	90 04		bcc $a7df			bcc 	_SOMemory
.a7db					_SONoBorrow:
.a7db	68		pla				pla 								; get marker back and write at TOS
.a7dc	92 34		sta ($34)			sta 	(basicStack)
.a7de	60		rts				rts
.a7df					_SOMemory:
.a7df	a9 12		lda #$12		lda	#18
.a7e1	4c d7 9a	jmp $9ad7		jmp	ErrorHandler
.a7e4					StackClose:
.a7e4	b2 34		lda ($34)			lda 	(basicStack) 				; get TOS marker
.a7e6	29 0f		and #$0f			and 	#$0F 						; bytes to add back
.a7e8	0a		asl a				asl 	a 							; claim twice this.
.a7e9	65 34		adc $34				adc 	basicStack 					; add to the stack pointer.
.a7eb	85 34		sta $34				sta 	basicStack
.a7ed	90 02		bcc $a7f1			bcc 	_SCExit
.a7ef	e6 35		inc $35				inc 	basicStack+1
.a7f1					_SCExit:
.a7f1	60		rts				rts
.a7f2					StackCheckFrame:
.a7f2	48		pha				pha
.a7f3					_StackRemoveLocals:
.a7f3	b2 34		lda ($34)			lda 	(basicStack) 				; check for local, keep popping them
.a7f5	c9 03		cmp #$03			cmp 	#STK_LOCALS+1
.a7f7	b0 05		bcs $a7fe			bcs 	_SCNoLocal
.a7f9	20 fc ae	jsr $aefc			jsr 	LocalPopValue
.a7fc	80 f5		bra $a7f3			bra 	_StackRemoveLocals
.a7fe					_SCNoLocal:
.a7fe	68		pla				pla
.a7ff	52 34		eor ($34)			eor 	(basicStack) 				; xor with toS marker
.a801	29 f0		and #$f0			and 	#$F0 						; check type bits
.a803	d0 01		bne $a806			bne 	_SCFError 					; different, we have structures mixed up
.a805	60		rts				rts
.a806					_SCFError:
.a806	8a		txa				txa 								; report error X
.a807	4c d7 9a	jmp $9ad7			jmp 	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/location.asm

.a80a					STKSaveCodePosition:
.a80a	5a		phy				phy
.a80b	98		tya				tya 								; save Y
.a80c	a0 05		ldy #$05			ldy 	#5
.a80e	91 34		sta ($34),y			sta 	(basicStack),y
.a810	88		dey				dey 								; save Code Pointer
.a811					_STKSaveLoop:
.a811	b9 2f 00	lda $002f,y			lda 	safePtr-1,y 				; allows us to access the pointer w/out issues.
.a814	91 34		sta ($34),y			sta 	(basicStack),y
.a816	88		dey				dey
.a817	d0 f8		bne $a811			bne 	_STKSaveLoop
.a819	7a		ply				ply
.a81a	60		rts				rts
.a81b					STKLoadCodePosition:
.a81b	a0 01		ldy #$01			ldy 	#1 							; load code pointer back
.a81d					_STKLoadLoop:
.a81d	b1 34		lda ($34),y			lda 	(basicStack),y
.a81f	99 2f 00	sta $002f,y			sta 	safePtr-1,y
.a822	c8		iny				iny
.a823	c0 05		cpy #$05			cpy 	#5
.a825	d0 f6		bne $a81d			bne 	_STKLoadLoop
.a827	b1 34		lda ($34),y			lda 	(basicStack),y 				; get Y offset
.a829	a8		tay				tay
.a82a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/setup.asm

.a82b					StackReset:
.a82b	a9 ff		lda #$ff			lda 	#((BasicStackBase+BasicStackSize-1) & $FF)
.a82d	85 34		sta $34				sta 	0+basicStack
.a82f	a9 0f		lda #$0f			lda 	#((BasicStackBase+BasicStackSize-1) >> 8)
.a831	85 35		sta $35				sta 	1+basicStack
.a833	a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.a835	92 34		sta ($34)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.a837	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/concrete.asm

.b843					StringConcrete:
.b843	5a		phy				phy 								; save position on stack
.b844	20 ac a3	jsr $a3ac			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.b847	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy target string to zTemp1
.b84a	85 38		sta $38				sta 	zTemp1
.b84c	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.b84f	85 39		sta $39				sta 	zTemp1+1
.b851	a0 ff		ldy #$ff			ldy 	#$FF	 					; calculate string length
.b853					_SALength:
.b853	c8		iny				iny
.b854	b1 38		lda ($38),y			lda 	(zTemp1),y
.b856	d0 fb		bne $b853			bne 	_SALength
.b858	c0 fd		cpy #$fd			cpy 	#253 						; string too long
.b85a	b0 3f		bcs $b89b			bcs 	_SALengthError
.b85c	98		tya				tya 				 				; length of the new string
.b85d	18		clc				clc
.b85e	69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.b860	90 02		bcc $b864			bcc 	_SAHaveLength
.b862	a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.b864					_SAHaveLength:
.b864	48		pha				pha 								; save length.
.b865	38		sec				sec
.b866	49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.b868	6d 8e 04	adc $048e			adc 	StringMemory
.b86b	8d 8e 04	sta $048e			sta 	StringMemory
.b86e	85 3a		sta $3a				sta 	zTemp2 						; update storage address
.b870	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; update mantissa address
.b873	a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.b875	6d 8f 04	adc $048f			adc 	StringMemory+1
.b878	8d 8f 04	sta $048f			sta 	StringMemory+1
.b87b	85 3b		sta $3b				sta 	zTemp2+1
.b87d	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.b880	68		pla				pla 								; save length-3 (chars allowed) in first byte
.b881	38		sec				sec
.b882	e9 03		sbc #$03			sbc 	#3
.b884	92 3a		sta ($3a)			sta 	(zTemp2)
.b886	a9 00		lda #$00			lda 	#0 							; clear the status byte.
.b888	a0 01		ldy #$01			ldy 	#1
.b88a	91 3a		sta ($3a),y			sta 	(zTemp2),y
.b88c					_SACopyNewString:
.b88c	a0 00		ldy #$00			ldy 	#0
.b88e					_SACopyNSLoop:
.b88e	b1 38		lda ($38),y			lda 	(zTemp1),y 					; get character
.b890	c8		iny				iny 								; write two on in string storage
.b891	c8		iny				iny
.b892	91 3a		sta ($3a),y			sta 	(zTemp2),y
.b894	88		dey				dey 								; this makes it one one.
.b895	c9 00		cmp #$00			cmp 	#0 							; until EOS copied
.b897	d0 f5		bne $b88e			bne 	_SACopyNSLoop
.b899	7a		ply				ply
.b89a	60		rts				rts
.b89b					_SALengthError:
.b89b	a9 09		lda #$09		lda	#9
.b89d	4c d7 9a	jmp $9ad7		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/stringalloc.asm

.b8a0					StringSystemInitialise:
.b8a0	a9 ff		lda #$ff			lda 	#((EndVariableSpace-1) & $FF)
.b8a2	8d 8e 04	sta $048e			sta 	0+StringMemory
.b8a5	a9 1f		lda #$1f			lda 	#((EndVariableSpace-1) >> 8)
.b8a7	8d 8f 04	sta $048f			sta 	1+StringMemory
.b8aa	9c ff 1f	stz $1fff			stz 	EndVariableSpace-1 			; put a zero at the end, so know end of string memory.
.b8ad	60		rts				rts
.b8ae					StringSpaceInitialise:
.b8ae	20 ac a3	jsr $a3ac			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.b8b1	a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.b8b3	8d 90 04	sta $0490			sta 	StringInitialised
.b8b6	ad 8e 04	lda $048e			lda 	StringMemory 				; allocate 256 bytes for one concreted string
.b8b9	8d 91 04	sta $0491			sta 	StringTempPointer
.b8bc	ad 8f 04	lda $048f			lda 	StringMemory+1
.b8bf	3a		dec a				dec 	a
.b8c0	8d 92 04	sta $0492			sta 	StringTempPointer+1
.b8c3	60		rts				rts
.b8c4					StringTempAllocate:
.b8c4	c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.b8c6	b0 35		bcs $b8fd			bcs 	_STALength
.b8c8	2c 90 04	bit $0490			bit 	StringInitialised 			; already initialised
.b8cb	30 05		bmi $b8d2			bmi 	_STAAllocate
.b8cd	48		pha				pha 								; save value to subtract.
.b8ce	20 ae b8	jsr $b8ae			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.b8d1	68		pla				pla 								; restore it
.b8d2					_STAAllocate:
.b8d2	49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.b8d4	18		clc				clc  								; deliberate allows one more
.b8d5	6d 91 04	adc $0491			adc 	StringTempPointer 			; subtract from temp pointer
.b8d8	8d 91 04	sta $0491			sta 	StringTempPointer
.b8db	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; address in mantissa
.b8de	85 3c		sta $3c				sta 	zsTemp 						; and zsTemp
.b8e0	ad 92 04	lda $0492			lda 	StringTempPointer+1
.b8e3	69 ff		adc #$ff			adc 	#$FF
.b8e5	8d 92 04	sta $0492			sta 	StringTempPointer+1
.b8e8	85 3d		sta $3d				sta 	zsTemp+1
.b8ea	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.b8ed	9e 18 04	stz $0418,x			stz 	NSMantissa2,x 				; set the typing data
.b8f0	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.b8f3	a9 10		lda #$10			lda 	#NSTString
.b8f5	9d 00 04	sta $0400,x			sta 	NSStatus,x
.b8f8	a9 00		lda #$00			lda 	#0 							; clear the target string
.b8fa	92 3c		sta ($3c)			sta 	(zsTemp)
.b8fc	60		rts				rts
.b8fd					_STALength:
.b8fd	a9 09		lda #$09		lda	#9
.b8ff	4c d7 9a	jmp $9ad7		jmp	ErrorHandler
.b902					StringTempWrite:
.b902	48		pha				pha
.b903	92 3c		sta ($3c)			sta 	(zsTemp)
.b905	e6 3c		inc $3c				inc 	zsTemp
.b907	d0 02		bne $b90b			bne 	_STWNoCarry
.b909	e6 3d		inc $3d				inc 	zsTemp+1
.b90b					_STWNoCarry:
.b90b	a9 00		lda #$00			lda 	#0
.b90d	92 3c		sta ($3c)			sta 	(zsTemp)
.b90f	68		pla				pla
.b910	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/backload.asm

.a838					BackloadProgram:
.a838	a2 ff		ldx #$ff			ldx 	#$FF
.a83a	8e fa ff	stx $fffa			stx 	$FFFA 						; fast mode (autorun only)
.a83d	20 67 a8	jsr $a867			jsr 	BLReadByte
.a840	30 1e		bmi $a860			bmi 	_BPExit
.a842					_BPCopy:
.a842	e8		inx				inx  								; copy byte in
.a843	9d a7 05	sta $05a7,x			sta 	lineBuffer,x
.a846	9e a8 05	stz $05a8,x			stz 	lineBuffer+1,x
.a849	20 67 a8	jsr $a867			jsr 	BLReadByte 					; read next byte
.a84c	30 0a		bmi $a858			bmi 	_BPEndLine 					; -ve = EOL
.a84e	c9 09		cmp #$09			cmp 	#9 							; handle TAB
.a850	d0 02		bne $a854			bne 	_BPNotTab
.a852	a9 20		lda #$20			lda 	#' '
.a854					_BPNotTab:
.a854	c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.a856	b0 ea		bcs $a842			bcs 	_BPCopy
.a858					_BPEndLine:
.a858	20 4d ac	jsr $ac4d			jsr 	TokeniseLine 				; tokenise the line.
.a85b	20 0f 8c	jsr $8c0f			jsr 	EditProgramCode
.a85e	80 d8		bra $a838			bra 	BackloadProgram
.a860					_BPExit:
.a860	9c fa ff	stz $fffa			stz 	$FFFA 						; clear fast mode (autorun only)
.a863	20 cd 8c	jsr $8ccd			jsr 	ClearCommand 				; clear variables etc.
.a866	60		rts				rts
.a867					BLReadByte:
.a867					_BLLoad:
.a867	ad 00 30	lda $3000			lda 	$3000 						; hardcoded in the makefile.
.a86a	ee 68 a8	inc $a868			inc 	_BLLoad+1
.a86d	d0 03		bne $a872			bne 	_BLNoCarry
.a86f	ee 69 a8	inc $a869			inc 	_BLLoad+2
.a872					_BLNoCarry:
.a872	c9 00		cmp #$00			cmp 	#0
.a874	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/searchtokens.asm

.a875					TokeniseSearchTable:
.a875	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token.
.a877	85 36		sta $36				sta 	zTemp0
.a879	a0 00		ldy #$00			ldy 	#0
.a87b	a9 80		lda #$80			lda 	#$80 						; token #
.a87d	85 38		sta $38				sta 	zTemp1
.a87f					_TSTLoop:
.a87f	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.a881	30 49		bmi $a8cc			bmi 	_TSTFail 					; -ve = end of table
.a883	f0 2e		beq $a8b3			beq 	_TSTNext 					; zero, check next it's a dummy
.a885	c8		iny				iny 								; get the hash
.a886	b1 36		lda ($36),y			lda 	(zTemp0),y
.a888	88		dey				dey
.a889	cd 83 04	cmp $0483			cmp 	identHash 					; check they match, if not go to next
.a88c	d0 25		bne $a8b3			bne 	_TSTNext
.a88e	ad 82 04	lda $0482			lda 	identTypeEnd 				; length of identifier
.a891	38		sec				sec
.a892	ed 80 04	sbc $0480			sbc 	identStart
.a895	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; no match, then return.
.a897	d0 1a		bne $a8b3			bne 	_TSTNext
.a899	5a		phy				phy 								; save Y , we might fail
.a89a	c8		iny				iny 								; point to text
.a89b	c8		iny				iny
.a89c	ae 80 04	ldx $0480			ldx 	identStart 					; offset in line buffer in X
.a89f					_TSTCompareName:
.a89f	bd a7 05	lda $05a7,x			lda 	lineBuffer,x 				; compare text.
.a8a2	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.a8a4	d0 0c		bne $a8b2			bne 	_TSTNextPullY 				; fail, pullY and do next
.a8a6	e8		inx				inx
.a8a7	c8		iny				iny
.a8a8	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; complete match.
.a8ab	d0 f2		bne $a89f			bne 	_TSTCompareName
.a8ad	7a		ply				ply 								; throw Y
.a8ae	a5 38		lda $38				lda 	zTemp1 						; get token #
.a8b0	38		sec				sec 								; return with CS = passed.
.a8b1	60		rts				rts
.a8b2					_TSTNextPullY:
.a8b2	7a		ply				ply 								; restore current, fall through.
.a8b3					_TSTNext:
.a8b3	e6 38		inc $38				inc 	zTemp1 						; token counter
.a8b5	98		tya				tya
.a8b6	18		clc				clc
.a8b7	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.a8b9	1a		inc a				inc 	a 							; +1
.a8ba	1a		inc a				inc 	a 							; +2
.a8bb	a8		tay				tay
.a8bc	10 c1		bpl $a87f			bpl 	_TSTLoop 					; if Y < $80 loop back
.a8be	98		tya				tya 								; add Y to zTemp0 and reset Y
.a8bf	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.a8c1	18		clc				clc  								; but have tables > 255 bytes
.a8c2	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.a8c4	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.a8c6	90 b7		bcc $a87f			bcc 	_TSTLoop
.a8c8	e6 37		inc $37				inc 	zTemp0+1
.a8ca	80 b3		bra $a87f			bra 	_TSTLoop
.a8cc					_TSTFail:
.a8cc	18		clc				clc
.a8cd	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/tokenise.asm


;******  Processing file: ./common/tokeniser/../generated/kwdtext.dat

.a8ce					KeywordSet0:
>a8ce	00 65					.text	0,$65,""               ; $80 !0:EOF
>a8d0	00 58					.text	0,$58,""               ; $81 !1:SH1
>a8d2	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>a8d4	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $83 ABS(
>a8da	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $84 ALLOC(
>a8e2	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $85 ASC(
>a8e8	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $86 CHR$(
>a8ef	06 aa 45 56 45 4e 54 28			.text	6,$aa,"EVENT("         ; $87 EVENT(
>a8f7	05 6b 46 41 4c 53 45			.text	5,$6b,"FALSE"          ; $88 FALSE
>a8fe	05 44 46 52 41 43 28			.text	5,$44,"FRAC("          ; $89 FRAC(
>a905	04 0d 48 49 54 28			.text	4,$0d,"HIT("           ; $8a HIT(
>a90b	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $8b INT(
>a911	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $8c ISVAL(
>a919	05 5c 4a 4f 59 42 28			.text	5,$5c,"JOYB("          ; $8d JOYB(
>a920	05 72 4a 4f 59 58 28			.text	5,$72,"JOYX("          ; $8e JOYX(
>a927	05 73 4a 4f 59 59 28			.text	5,$73,"JOYY("          ; $8f JOYY(
>a92e	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $90 LEFT$(
>a936	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $91 LEN(
>a93c	04 0e 4d 41 58 28			.text	4,$0e,"MAX("           ; $92 MAX(
>a942	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $93 MID$(
>a949	04 0c 4d 49 4e 28			.text	4,$0c,"MIN("           ; $94 MIN(
>a94f	04 19 4e 4f 54 28			.text	4,$19,"NOT("           ; $95 NOT(
>a955	07 e9 52 41 4e 44 4f 4d			.text	7,$e9,"RANDOM("        ; $96 RANDOM(
>a95d	28
>a95e	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $97 RIGHT$(
>a966	28
>a967	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $98 RND(
>a96d	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $99 SGN(
>a973	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $9a SPC(
>a979	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $9b STR$(
>a980	06 a9 54 49 4d 45 52 28			.text	6,$a9,"TIMER("         ; $9c TIMER(
>a988	04 40 54 52 55 45			.text	4,$40,"TRUE"           ; $9d TRUE
>a98e	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $9e VAL(
>a994	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $9f FOR
>a999	02 8f 49 46				.text	2,$8f,"IF"             ; $a0 IF
>a99d	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $a1 PROC
>a9a3	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $a2 REPEAT
>a9ab	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $a3 WHILE
>a9b2	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $a4 ENDIF
>a9b9	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $a5 ENDPROC
>a9c1	43
>a9c2	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $a6 NEXT
>a9c8	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $a7 THEN
>a9ce	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $a8 UNTIL
>a9d5	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $a9 WEND
>a9db	02 9b 42 59				.text	2,$9b,"BY"             ; $aa BY
>a9df	04 1c 43 41 4c 4c			.text	4,$1c,"CALL"           ; $ab CALL
>a9e5	06 b2 43 49 52 43 4c 45			.text	6,$b2,"CIRCLE"         ; $ac CIRCLE
>a9ed	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $ad CLEAR
>a9f4	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $ae CLS
>a9f9	05 7f 43 4f 4c 4f 52			.text	5,$7f,"COLOR"          ; $af COLOR
>aa00	06 d4 43 4f 4c 4f 55 52			.text	6,$d4,"COLOUR"         ; $b0 COLOUR
>aa08	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $b1 DATA
>aa0e	03 da 44 49 4d				.text	3,$da,"DIM"            ; $b2 DIM
>aa13	06 db 44 4f 57 4e 54 4f			.text	6,$db,"DOWNTO"         ; $b3 DOWNTO
>aa1b	04 29 45 4c 53 45			.text	4,$29,"ELSE"           ; $b4 ELSE
>aa21	04 34 46 52 4f 4d			.text	4,$34,"FROM"           ; $b5 FROM
>aa27	03 e5 47 46 58				.text	3,$e5,"GFX"            ; $b6 GFX
>aa2c	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $b7 GOSUB
>aa33	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $b8 GOTO
>aa39	04 24 48 45 52 45			.text	4,$24,"HERE"           ; $b9 HERE
>aa3f	05 63 49 4d 41 47 45			.text	5,$63,"IMAGE"          ; $ba IMAGE
>aa46	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $bb LET
>aa4b	04 28 4c 49 4e 45			.text	4,$28,"LINE"           ; $bc LINE
>aa51	05 6b 4c 4f 43 41 4c			.text	5,$6b,"LOCAL"          ; $bd LOCAL
>aa58	03 db 4f 46 46				.text	3,$db,"OFF"            ; $be OFF
>aa5d	02 9d 4f 4e				.text	2,$9d,"ON"             ; $bf ON
>aa61	07 20 4f 55 54 4c 49 4e			.text	7,$20,"OUTLINE"        ; $c0 OUTLINE
>aa69	45
>aa6a	07 0f 50 41 4c 45 54 54			.text	7,$0f,"PALETTE"        ; $c1 PALETTE
>aa72	45
>aa73	04 3f 50 4c 4f 54			.text	4,$3f,"PLOT"           ; $c2 PLOT
>aa79	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $c3 PRINT
>aa80	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $c4 READ
>aa86	04 2e 52 45 43 54			.text	4,$2e,"RECT"           ; $c5 RECT
>aa8c	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $c6 REM
>aa91	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $c7 RETURN
>aa99	05 7b 53 4f 4c 49 44			.text	5,$7b,"SOLID"          ; $c8 SOLID
>aaa0	06 d7 53 50 52 49 54 45			.text	6,$d7,"SPRITE"         ; $c9 SPRITE
>aaa8	04 45 54 45 58 54			.text	4,$45,"TEXT"           ; $ca TEXT
>aaae	02 a3 54 4f				.text	2,$a3,"TO"             ; $cb TO
>aab2	ff					.text	$FF
.aab3					KeywordSet1:
>aab3	00 65					.text	0,$65,""               ; $80 !0:EOF
>aab5	00 58					.text	0,$58,""               ; $81 !1:SH1
>aab7	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>aab9	08 4c 41 53 53 45 4d 42			.text	8,$4c,"ASSEMBLE"       ; $83 ASSEMBLE
>aac1	4c 45
>aac3	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $84 ASSERT
>aacb	06 bd 42 49 54 4d 41 50			.text	6,$bd,"BITMAP"         ; $85 BITMAP
>aad3	03 d7 45 4e 44				.text	3,$d7,"END"            ; $86 END
>aad8	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $87 LIST
>aade	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $88 NEW
>aae3	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $89 RESTORE
>aaeb	45
>aaec	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $8a RUN
>aaf1	07 2a 53 50 52 49 54 45			.text	7,$2a,"SPRITES"        ; $8b SPRITES
>aaf9	53
>aafa	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $8c STOP
>ab00	ff					.text	$FF
.ab01					KeywordSet2:
>ab01	00 65					.text	0,$65,""               ; $80 !0:EOF
>ab03	00 58					.text	0,$58,""               ; $81 !1:SH1
>ab05	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>ab07	03 c8 41 44 43				.text	3,$c8,"ADC"            ; $83 ADC
>ab0c	03 d3 41 4e 44				.text	3,$d3,"AND"            ; $84 AND
>ab11	03 e0 41 53 4c				.text	3,$e0,"ASL"            ; $85 ASL
>ab16	03 c8 42 43 43				.text	3,$c8,"BCC"            ; $86 BCC
>ab1b	03 d8 42 43 53				.text	3,$d8,"BCS"            ; $87 BCS
>ab20	03 d8 42 45 51				.text	3,$d8,"BEQ"            ; $88 BEQ
>ab25	03 df 42 49 54				.text	3,$df,"BIT"            ; $89 BIT
>ab2a	03 d8 42 4d 49				.text	3,$d8,"BMI"            ; $8a BMI
>ab2f	03 d5 42 4e 45				.text	3,$d5,"BNE"            ; $8b BNE
>ab34	03 de 42 50 4c				.text	3,$de,"BPL"            ; $8c BPL
>ab39	03 d5 42 52 41				.text	3,$d5,"BRA"            ; $8d BRA
>ab3e	03 df 42 52 4b				.text	3,$df,"BRK"            ; $8e BRK
>ab43	03 db 42 56 43				.text	3,$db,"BVC"            ; $8f BVC
>ab48	03 eb 42 56 53				.text	3,$eb,"BVS"            ; $90 BVS
>ab4d	03 d2 43 4c 43				.text	3,$d2,"CLC"            ; $91 CLC
>ab52	03 d3 43 4c 44				.text	3,$d3,"CLD"            ; $92 CLD
>ab57	03 d8 43 4c 49				.text	3,$d8,"CLI"            ; $93 CLI
>ab5c	03 e5 43 4c 56				.text	3,$e5,"CLV"            ; $94 CLV
>ab61	03 e0 43 4d 50				.text	3,$e0,"CMP"            ; $95 CMP
>ab66	03 eb 43 50 58				.text	3,$eb,"CPX"            ; $96 CPX
>ab6b	03 ec 43 50 59				.text	3,$ec,"CPY"            ; $97 CPY
>ab70	03 cc 44 45 43				.text	3,$cc,"DEC"            ; $98 DEC
>ab75	03 e1 44 45 58				.text	3,$e1,"DEX"            ; $99 DEX
>ab7a	03 e2 44 45 59				.text	3,$e2,"DEY"            ; $9a DEY
>ab7f	03 e6 45 4f 52				.text	3,$e6,"EOR"            ; $9b EOR
>ab84	03 da 49 4e 43				.text	3,$da,"INC"            ; $9c INC
>ab89	03 ef 49 4e 58				.text	3,$ef,"INX"            ; $9d INX
>ab8e	03 f0 49 4e 59				.text	3,$f0,"INY"            ; $9e INY
>ab93	03 e7 4a 4d 50				.text	3,$e7,"JMP"            ; $9f JMP
>ab98	03 ef 4a 53 52				.text	3,$ef,"JSR"            ; $a0 JSR
>ab9d	03 d1 4c 44 41				.text	3,$d1,"LDA"            ; $a1 LDA
>aba2	03 e8 4c 44 58				.text	3,$e8,"LDX"            ; $a2 LDX
>aba7	03 e9 4c 44 59				.text	3,$e9,"LDY"            ; $a3 LDY
>abac	03 f1 4c 53 52				.text	3,$f1,"LSR"            ; $a4 LSR
>abb1	03 ed 4e 4f 50				.text	3,$ed,"NOP"            ; $a5 NOP
>abb6	03 e2 4f 52 41				.text	3,$e2,"ORA"            ; $a6 ORA
>abbb	03 d9 50 48 41				.text	3,$d9,"PHA"            ; $a7 PHA
>abc0	03 e8 50 48 50				.text	3,$e8,"PHP"            ; $a8 PHP
>abc5	03 f0 50 48 58				.text	3,$f0,"PHX"            ; $a9 PHX
>abca	03 f1 50 48 59				.text	3,$f1,"PHY"            ; $aa PHY
>abcf	03 dd 50 4c 41				.text	3,$dd,"PLA"            ; $ab PLA
>abd4	03 ec 50 4c 50				.text	3,$ec,"PLP"            ; $ac PLP
>abd9	03 f4 50 4c 58				.text	3,$f4,"PLX"            ; $ad PLX
>abde	03 f5 50 4c 59				.text	3,$f5,"PLY"            ; $ae PLY
>abe3	03 ed 52 4f 4c				.text	3,$ed,"ROL"            ; $af ROL
>abe8	03 f3 52 4f 52				.text	3,$f3,"ROR"            ; $b0 ROR
>abed	03 ef 52 54 49				.text	3,$ef,"RTI"            ; $b1 RTI
>abf2	03 f9 52 54 53				.text	3,$f9,"RTS"            ; $b2 RTS
>abf7	03 d8 53 42 43				.text	3,$d8,"SBC"            ; $b3 SBC
>abfc	03 db 53 45 43				.text	3,$db,"SEC"            ; $b4 SEC
>ac01	03 dc 53 45 44				.text	3,$dc,"SED"            ; $b5 SED
>ac06	03 e1 53 45 49				.text	3,$e1,"SEI"            ; $b6 SEI
>ac0b	03 e8 53 54 41				.text	3,$e8,"STA"            ; $b7 STA
>ac10	03 f7 53 54 50				.text	3,$f7,"STP"            ; $b8 STP
>ac15	03 ff 53 54 58				.text	3,$ff,"STX"            ; $b9 STX
>ac1a	03 00 53 54 59				.text	3,$00,"STY"            ; $ba STY
>ac1f	03 01 53 54 5a				.text	3,$01,"STZ"            ; $bb STZ
>ac24	03 ed 54 41 58				.text	3,$ed,"TAX"            ; $bc TAX
>ac29	03 ee 54 41 59				.text	3,$ee,"TAY"            ; $bd TAY
>ac2e	03 e8 54 52 42				.text	3,$e8,"TRB"            ; $be TRB
>ac33	03 e9 54 53 42				.text	3,$e9,"TSB"            ; $bf TSB
>ac38	03 ff 54 53 58				.text	3,$ff,"TSX"            ; $c0 TSX
>ac3d	03 ed 54 58 41				.text	3,$ed,"TXA"            ; $c1 TXA
>ac42	03 ff 54 58 53				.text	3,$ff,"TXS"            ; $c2 TXS
>ac47	03 ee 54 59 41				.text	3,$ee,"TYA"            ; $c3 TYA
>ac4c	ff					.text	$FF

;******  Return to file: ./common/tokeniser/tokenise.asm

.ac4d					TokeniseLine:
.ac4d	20 d5 ad	jsr $add5			jsr 	FixLineBufferCase 			; fix line case
.ac50	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.ac52	8d a7 04	sta $04a7			sta 	tokenOffset
.ac55	9c a8 04	stz $04a8			stz 	tokenLineNumber
.ac58	9c a9 04	stz $04a9			stz 	tokenLineNumber+1
.ac5b	a2 ff		ldx #$ff			ldx 	#$FF
.ac5d					_TKFindFirst:
.ac5d	e8		inx				inx
.ac5e	bd a7 05	lda $05a7,x			lda 	lineBuffer,x
.ac61	f0 79		beq $acdc			beq 	_TKExit
.ac63	c9 20		cmp #$20			cmp 	#' '
.ac65	90 f6		bcc $ac5d			bcc 	_TKFindFirst
.ac67	c9 30		cmp #$30			cmp 	#'0'
.ac69	90 07		bcc $ac72			bcc 	_TKNoLineNumber
.ac6b	c9 3a		cmp #$3a			cmp 	#'9'+1
.ac6d	b0 03		bcs $ac72			bcs 	_TKNoLineNumber
.ac6f	20 ff ad	jsr $adff			jsr 	TokeniseExtractLineNumber
.ac72					_TKNoLineNumber:
.ac72					_TKTokeniseLoop:
.ac72	bd a7 05	lda $05a7,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.ac75	f0 65		beq $acdc			beq 	_TKExit
.ac77	e8		inx				inx
.ac78	c9 20		cmp #$20			cmp 	#' '
.ac7a	f0 f6		beq $ac72			beq 	_TKTokeniseLoop 			; keep looping if space found.
.ac7c	ca		dex				dex 								; undo last get, A contains character, X is position.
.ac7d	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.ac7f	f0 61		beq $ace2			beq 	_TKTokeniseIdentifier
.ac81	c9 41		cmp #$41			cmp 	#'A'
.ac83	90 04		bcc $ac89			bcc 	_TKTokenisePunctuation
.ac85	c9 5b		cmp #$5b			cmp 	#'Z'+1
.ac87	90 59		bcc $ace2			bcc 	_TKTokeniseIdentifier
.ac89					_TKTokenisePunctuation:
.ac89	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.ac8b	f0 27		beq $acb4			beq 	_TKString
.ac8d	c9 24		cmp #$24			cmp 	#'$'						; hexadecimal constant (# only appears at end of identifiers)
.ac8f	f0 28		beq $acb9			beq 	_TKHexConstant
.ac91	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers.
.ac93	f0 29		beq $acbe			beq 	_TKCheckDouble
.ac95	c9 3e		cmp #$3e			cmp 	#'>'
.ac97	f0 25		beq $acbe			beq 	_TKCheckDouble
.ac99					_TKStandardPunctuation:
.ac99	bd a7 05	lda $05a7,x			lda 	lineBuffer,x 				; get it back.
.ac9c	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.ac9e	90 0e		bcc $acae			bcc 	_TKNoShift
.aca0	48		pha				pha 								; save
.aca1	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.aca3	85 36		sta $36				sta 	zTemp0
.aca5	68		pla				pla
.aca6	29 20		and #$20			and 	#32 						; bit 5
.aca8	4a		lsr a				lsr 	a 							; shift into bit 3
.aca9	4a		lsr a				lsr 	a
.acaa	05 36		ora $36				ora 	zTemp0
.acac	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.acae					_TKNoShift:
.acae	20 44 ae	jsr $ae44			jsr 	TokeniseWriteByte 			; write the punctuation character
.acb1	e8		inx				inx 								; consume the character
.acb2	80 be		bra $ac72			bra 	_TKTokeniseLoop 			; and loop round again.
.acb4					_TKString:
.acb4	20 64 ad	jsr $ad64			jsr 	TokeniseString
.acb7	80 b9		bra $ac72			bra 	_TKTokeniseLoop
.acb9					_TKHexConstant:
.acb9	20 9f ad	jsr $ad9f			jsr 	TokeniseHexConstant
.acbc	80 b4		bra $ac72			bra 	_TKTokeniseLoop
.acbe					_TKCheckDouble:
.acbe	bd a8 05	lda $05a8,x			lda 	lineBuffer+1,x 				; get next character
.acc1	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.acc3	90 d4		bcc $ac99			bcc 	_TKStandardPunctuation
.acc5	c9 3f		cmp #$3f			cmp 	#'>'+1
.acc7	b0 d0		bcs $ac99			bcs 	_TKStandardPunctuation
.acc9	bd a7 05	lda $05a7,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.accc	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.acce	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.accf	7d a8 05	adc $05a8,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.acd2	38		sec				sec
.acd3	e9 3c		sbc #$3c			sbc 	#'<'
.acd5	20 44 ae	jsr $ae44			jsr 	TokeniseWriteByte 			; this is in the range 0-7
.acd8	e8		inx				inx 								; consume both
.acd9	e8		inx				inx
.acda	80 96		bra $ac72			bra 	_TKTokeniseLoop
.acdc	a9 80		lda #$80	_TKExit:lda 	#KWC_EOL 					; write end of line byte
.acde	20 44 ae	jsr $ae44			jsr 	TokeniseWriteByte
.ace1	60		rts				rts
.ace2					_TKTokeniseIdentifier:
.ace2	8e 80 04	stx $0480			stx 	identStart 					; save start
.ace5	9c 84 04	stz $0484			stz 	identTypeByte 				; zero the type byte
.ace8					_TKCheckLoop:
.ace8	e8		inx				inx 								; look at next, we know first is identifier.
.ace9	bd a7 05	lda $05a7,x			lda  	lineBuffer,x
.acec	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.acee	f0 f8		beq $ace8			beq 	_TKCheckLoop
.acf0	c9 30		cmp #$30			cmp	 	#"0"
.acf2	90 0c		bcc $ad00			bcc 	_TKEndIdentifier
.acf4	c9 3a		cmp #$3a			cmp 	#"9"+1
.acf6	90 f0		bcc $ace8			bcc 	_TKCheckLoop
.acf8	c9 41		cmp #$41			cmp	 	#"A"
.acfa	90 04		bcc $ad00			bcc 	_TKEndIdentifier
.acfc	c9 5b		cmp #$5b			cmp 	#"Z"+1
.acfe	90 e8		bcc $ace8			bcc 	_TKCheckLoop
.ad00					_TKEndIdentifier:
.ad00	8e 81 04	stx $0481			stx 	identTypeStart 				; save start of type text (if any !)
.ad03	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.ad05	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.ad07	f0 06		beq $ad0f			beq 	_TKHasTypeCharacter
.ad09	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.ad0b	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.ad0d	d0 07		bne $ad16			bne 	_TKNoTypeCharacter
.ad0f					_TKHasTypeCharacter:
.ad0f	8c 84 04	sty $0484			sty 	identTypeByte 				; has # or $, save the type
.ad12	e8		inx				inx 								; read next
.ad13	bd a7 05	lda $05a7,x			lda 	lineBuffer,x
.ad16					_TKNoTypeCharacter:
.ad16	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.ad18	d0 09		bne $ad23			bne 	_TKNoArray
.ad1a	e8		inx				inx 								; skip the (
.ad1b	ad 84 04	lda $0484			lda 	identTypeByte 				; set bit 2 (e.g. array)
.ad1e	09 04		ora #$04			ora 	#$04
.ad20	8d 84 04	sta $0484			sta 	identTypeByte
.ad23					_TKNoArray:
.ad23	8e 82 04	stx $0482			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.ad26	20 c0 ad	jsr $adc0			jsr 	TokeniseCalculateHash 		; calculate the has for those tokens
.ad29	a0 a8		ldy #$a8			ldy 	#(KeywordSet0) >> 8
.ad2b	a9 ce		lda #$ce			lda 	#(KeywordSet0) & $FF
.ad2d	20 75 a8	jsr $a875			jsr 	TokeniseSearchTable
.ad30	a2 00		ldx #$00			ldx 	#0
.ad32	b0 1f		bcs $ad53			bcs 	_TKFoundToken
.ad34	a0 aa		ldy #$aa			ldy 	#(KeywordSet1) >> 8
.ad36	a9 b3		lda #$b3			lda 	#(KeywordSet1) & $FF
.ad38	20 75 a8	jsr $a875			jsr 	TokeniseSearchTable
.ad3b	a2 81		ldx #$81			ldx 	#$81
.ad3d	b0 14		bcs $ad53			bcs 	_TKFoundToken
.ad3f	a0 ab		ldy #$ab			ldy 	#(KeywordSet2) >> 8
.ad41	a9 01		lda #$01			lda 	#(KeywordSet2) & $FF
.ad43	20 75 a8	jsr $a875			jsr 	TokeniseSearchTable
.ad46	a2 82		ldx #$82			ldx 	#$82
.ad48	b0 09		bcs $ad53			bcs 	_TKFoundToken
.ad4a	20 50 ae	jsr $ae50			jsr 	CheckCreateVariableRecord 	; failed all, it's a variable, create record if does not exist.
.ad4d	ae 82 04	ldx $0482			ldx 	identTypeEnd 				; X points to following byte
.ad50	4c 72 ac	jmp $ac72			jmp 	_TKTokeniseLoop 			; and go round again.
.ad53					_TKFoundToken:
.ad53	48		pha				pha 								; save token
.ad54	8a		txa				txa 								; shift in X, is there one ?
.ad55	f0 03		beq $ad5a			beq 	_TKNoTShift
.ad57	20 44 ae	jsr $ae44			jsr 	TokeniseWriteByte 			; if so, write it out
.ad5a					_TKNoTShift:
.ad5a	68		pla				pla 								; restore and write token
.ad5b	20 44 ae	jsr $ae44			jsr 	TokeniseWriteByte
.ad5e	ae 82 04	ldx $0482			ldx 	identTypeEnd 				; X points to following byte
.ad61	4c 72 ac	jmp $ac72			jmp 	_TKTokeniseLoop 			; and go round again.
.ad64					TokeniseString:
.ad64	a9 ff		lda #$ff			lda 	#KWC_STRING 				; string token.
.ad66	20 44 ae	jsr $ae44			jsr 	TokeniseWriteByte
.ad69	e8		inx				inx									; start of quoted string.
.ad6a	da		phx				phx 								; push start of string on top
.ad6b	ca		dex				dex
.ad6c					_TSFindEnd:
.ad6c	e8		inx				inx
.ad6d	bd a7 05	lda $05a7,x			lda 	lineBuffer,x 				; next character
.ad70	f0 04		beq $ad76			beq 	_TSEndOfString
.ad72	c9 22		cmp #$22			cmp 	#'"'
.ad74	d0 f6		bne $ad6c			bne 	_TSFindEnd
.ad76					_TSEndOfString:
.ad76	7a		ply				ply  								; so now Y is first character, X is character after end.
.ad77	48		pha				pha 								; save terminating character
.ad78	20 80 ad	jsr $ad80			jsr 	TOWriteBlockXY 				; write X to Y as a data block
.ad7b	68		pla				pla 								; terminating character
.ad7c	f0 01		beq $ad7f			beq 	_TSNotQuote					; if it wasn't EOS skip it
.ad7e	e8		inx				inx
.ad7f					_TSNotQuote:
.ad7f	60		rts				rts
.ad80					TOWriteBlockXY:
.ad80	86 36		stx $36				stx 	zTemp0 						; write end character
.ad82	98		tya				tya
.ad83	49 ff		eor #$ff			eor 	#$FF
.ad85	38		sec				sec
.ad86	65 36		adc $36				adc 	zTemp0
.ad88	1a		inc a				inc 	a 							; one extra for NULL
.ad89	20 44 ae	jsr $ae44			jsr 	TokeniseWriteByte
.ad8c					_TOBlockLoop:
.ad8c	c4 36		cpy $36				cpy 	zTemp0
.ad8e	f0 09		beq $ad99			beq 	_TOBlockExit
.ad90	b9 a7 05	lda $05a7,y			lda 	lineBuffer,y
.ad93	20 44 ae	jsr $ae44			jsr 	TokeniseWriteByte
.ad96	c8		iny				iny
.ad97	80 f3		bra $ad8c			bra 	_TOBlockLoop
.ad99					_TOBlockExit:
.ad99	a9 00		lda #$00			lda 	#0
.ad9b	20 44 ae	jsr $ae44			jsr 	TokeniseWriteByte
.ad9e	60		rts				rts
.ad9f					TokeniseHexConstant:
.ad9f	a9 fe		lda #$fe			lda 	#KWC_HEXCONST 				; hex constant token.
.ada1	20 44 ae	jsr $ae44			jsr 	TokeniseWriteByte
.ada4	e8		inx				inx									; start of quoted string.
.ada5	da		phx				phx 								; push start of constant on top
.ada6	ca		dex				dex
.ada7					_THFindLoop:
.ada7	e8		inx				inx
.ada8	bd a7 05	lda $05a7,x			lda 	lineBuffer,x
.adab	c9 30		cmp #$30			cmp 	#"0"
.adad	90 0c		bcc $adbb			bcc 	_THFoundEnd
.adaf	c9 3a		cmp #$3a			cmp 	#"9"+1
.adb1	90 f4		bcc $ada7			bcc 	_THFindLoop
.adb3	c9 41		cmp #$41			cmp 	#"A"
.adb5	90 04		bcc $adbb			bcc 	_THFoundEnd
.adb7	c9 47		cmp #$47			cmp 	#"F"+1
.adb9	90 ec		bcc $ada7			bcc 	_THFindLoop
.adbb					_THFoundEnd:
.adbb	7a		ply				ply 								; restore start
.adbc	20 80 ad	jsr $ad80			jsr 	TOWriteBlockXY 				; output the block
.adbf	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/utility.asm

.adc0					TokeniseCalculateHash:
.adc0	da		phx				phx
.adc1	ae 80 04	ldx $0480			ldx 	identStart 					; needs to be same as in tokens.py - simple sum
.adc4	a9 00		lda #$00			lda 	#0
.adc6					_TCHLoop:
.adc6	18		clc				clc
.adc7	7d a7 05	adc $05a7,x			adc 	lineBuffer,x
.adca	e8		inx				inx
.adcb	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.adce	d0 f6		bne $adc6			bne 	_TCHLoop
.add0	8d 83 04	sta $0483			sta 	identHash 					; save the hash
.add3	fa		plx				plx
.add4	60		rts				rts
.add5					FixLineBufferCase:
.add5	a2 00		ldx #$00			ldx 	#0
.add7					_FLBCLoop:
.add7	bd a7 05	lda $05a7,x			lda 	lineBuffer,x 				; get next character
.adda	f0 22		beq $adfe			beq 	_FLBCExit 					; end of string.
.addc	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.adde	f0 11		beq $adf1			beq 	_FLBCInQuotes
.ade0	e8		inx				inx
.ade1	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.ade3	90 f2		bcc $add7			bcc 	_FLBCLoop
.ade5	c9 7b		cmp #$7b			cmp 	#'z'+1
.ade7	b0 ee		bcs $add7			bcs 	_FLBCLoop
.ade9	38		sec				sec 								; make U/C
.adea	e9 20		sbc #$20			sbc 	#32
.adec	9d a6 05	sta $05a6,x			sta	 	lineBuffer-1,x 				; write back
.adef	80 e6		bra $add7			bra 	_FLBCLoop
.adf1					_FLBCInQuotes:
.adf1	e8		inx				inx 								; advance
.adf2	bd a7 05	lda $05a7,x			lda 	lineBuffer,x 				; get next
.adf5	f0 07		beq $adfe			beq 	_FLBCExit 					; exit on EOS
.adf7	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.adf9	d0 f6		bne $adf1			bne 	_FLBCInQuotes
.adfb	e8		inx				inx 								; skip over it
.adfc	80 d9		bra $add7			bra 	_FLBCLoop
.adfe					_FLBCExit:
.adfe	60		rts				rts
.adff					TokeniseExtractLineNumber:
.adff	ad a9 04	lda $04a9			lda 	tokenLineNumber+1 			; push current value on stack
.ae02	48		pha				pha
.ae03	ad a8 04	lda $04a8			lda 	tokenLineNumber
.ae06	48		pha				pha
.ae07	20 3d ae	jsr $ae3d			jsr 	_TELNTimes2 				; line # x 4
.ae0a	20 3d ae	jsr $ae3d			jsr 	_TELNTimes2 				; line # x 2
.ae0d	18		clc				clc 								; add stacked value
.ae0e	68		pla				pla
.ae0f	6d a8 04	adc $04a8			adc 	tokenLineNumber
.ae12	8d a8 04	sta $04a8			sta 	tokenLineNumber
.ae15	68		pla				pla
.ae16	6d a9 04	adc $04a9			adc 	tokenLineNumber+1
.ae19	8d a9 04	sta $04a9			sta 	tokenLineNumber+1 			; line # x 5
.ae1c	20 3d ae	jsr $ae3d			jsr 	_TELNTimes2 				; line # x 10
.ae1f	bd a7 05	lda $05a7,x			lda 	lineBuffer,x 				; get and consume character
.ae22	e8		inx				inx
.ae23	29 0f		and #$0f			and 	#15 						; add to line #
.ae25	18		clc				clc
.ae26	6d a8 04	adc $04a8			adc 	tokenLineNumber
.ae29	8d a8 04	sta $04a8			sta 	tokenLineNumber
.ae2c	90 03		bcc $ae31			bcc 	_TLENNoCarry
.ae2e	ee a9 04	inc $04a9			inc 	tokenLineNumber+1
.ae31					_TLENNoCarry:
.ae31	bd a7 05	lda $05a7,x			lda 	lineBuffer,x 				; more digits ?
.ae34	c9 30		cmp #$30			cmp 	#'0'
.ae36	90 04		bcc $ae3c			bcc 	_TLENExit
.ae38	c9 3a		cmp #$3a			cmp 	#'9'+1
.ae3a	90 c3		bcc $adff			bcc 	TokeniseExtractLineNumber
.ae3c					_TLENExit:
.ae3c	60		rts				rts
.ae3d					_TELNTimes2:
.ae3d	0e a8 04	asl $04a8			asl 	tokenLineNumber
.ae40	2e a9 04	rol $04a9			rol 	tokenLineNumber+1
.ae43	60		rts				rts
.ae44					TokeniseWriteByte:
.ae44	da		phx				phx
.ae45	ae a7 04	ldx $04a7			ldx 	tokenOffset 				; next slot to write to
.ae48	9d a7 04	sta $04a7,x			sta 	tokenOffset,x 				; write byte out
.ae4b	ee a7 04	inc $04a7			inc 	tokenOffset 				; advance slot.
.ae4e	fa		plx				plx
.ae4f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/variablerecord.asm

.ae50					CheckCreateVariableRecord:
.ae50	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.ae52	85 36		sta $36				sta 	0+zTemp0
.ae54	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.ae56	85 37		sta $37				sta 	1+zTemp0
.ae58					_CCVSearch:
.ae58	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.ae5a	f0 2c		beq $ae88			beq 	_CCVFail
.ae5c	a0 01		ldy #$01			ldy 	#1 							; read the hash
.ae5e	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.ae60	cd 83 04	cmp $0483			cmp 	identHash
.ae63	d0 16		bne $ae7b			bne 	_CCVNext
.ae65	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.ae67	ae 80 04	ldx $0480			ldx 	identStart
.ae6a					_CCVCompare:
.ae6a	bd a7 05	lda $05a7,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.ae6d	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.ae6f	e8		inx				inx 								; advance pointers
.ae70	c8		iny				iny
.ae71	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.ae72	d0 07		bne $ae7b			bne 	_CCVNext  					; didn't match go to next.
.ae74	90 f4		bcc $ae6a			bcc 	_CCVCompare 				; not finished yet.
.ae76	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; matched whole thing ?
.ae79	f0 41		beq $aebc			beq 	_CCVFound 					; yes, we were successful
.ae7b					_CCVNext:
.ae7b	18		clc				clc
.ae7c	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.ae7e	65 36		adc $36				adc 	zTemp0
.ae80	85 36		sta $36				sta 	zTemp0
.ae82	90 d4		bcc $ae58			bcc 	_CCVSearch
.ae84	e6 37		inc $37				inc 	zTemp0+1
.ae86	80 d0		bra $ae58			bra 	_CCVSearch
.ae88					_CCVFail:
.ae88	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.ae8a	ad 83 04	lda $0483			lda 	identHash
.ae8d	91 36		sta ($36),y			sta 	(zTemp0),y
.ae8f	c8		iny				iny 								; offset 2 is the type byte
.ae90	ad 84 04	lda $0484			lda 	identTypeByte
.ae93	91 36		sta ($36),y			sta 	(zTemp0),y
.ae95	c8		iny				iny
.ae96					_CCVData:
.ae96	a9 00		lda #$00			lda 	#0 							; erase data 3-7
.ae98	91 36		sta ($36),y			sta 	(zTemp0),y
.ae9a	c8		iny				iny
.ae9b	c0 08		cpy #$08			cpy 	#8
.ae9d	90 f7		bcc $ae96			bcc 	_CCVData
.ae9f	ae 80 04	ldx $0480			ldx 	identStart 					; copy name into 8 on.
.aea2					_CCVCopyName:
.aea2	bd a7 05	lda $05a7,x			lda 	lineBuffer,x
.aea5	91 36		sta ($36),y			sta 	(zTemp0),y
.aea7	e8		inx				inx
.aea8	c8		iny				iny
.aea9	ec 82 04	cpx $0482			cpx 	identTypeEnd
.aeac	d0 f4		bne $aea2			bne 	_CCVCopyName
.aeae	98		tya				tya 								; patch offset
.aeaf	92 36		sta ($36)			sta 	(zTemp0)
.aeb1	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.aeb3	91 36		sta ($36),y			sta 	(zTemp0),y
.aeb5	88		dey				dey
.aeb6	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.aeb8	09 80		ora #$80			ora 	#$80
.aeba	91 36		sta ($36),y			sta 	(zTemp0),y
.aebc					_CCVFound:
.aebc	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.aebe	38		sec				sec
.aebf	e9 10		sbc #$10			sbc 	#(VariableSpace >> 8) 		; offset from the start
.aec1	09 40		ora #$40			ora 	#$40 						; make it a writeable token
.aec3	20 44 ae	jsr $ae44			jsr 	TokeniseWriteByte
.aec6	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.aec8	20 44 ae	jsr $ae44			jsr 	TokeniseWriteByte
.aecb	60		rts				rts

;******  Return to file: _basic.asm


;******  End of listing
