
; 64tass Turbo Assembler Macro V1.58.2974? listing file
; 64tass -D AUTORUN=0 "-D MONITOR_ADDRESS=\$E000" "-D LOCKOUT_ADDRESS=\$F000" "-D BASIC_ADDRESS=\$34000" "-D SOURCE_ADDRESS=\$28000" "-D SPRITE_ADDRESS=\$30000" "-D TILEMAP_ADDRESS=\$24000" "-D TILEIMAGES_ADDRESS=\$26000" -q -b -Wall -c -C -D "HARDWARE=0 $'\x9'$'\x9'$'\x9'$'\x9'$'\x9'$'\x9'" -L output/basic.lst -l output/basic.lbl -Wall -o build/basic.rom _basic.asm
; Thu Feb 23 10:04:32 2023

;Offset	;PC	;Hex		;Monitor	;Source

;******  Command line definitions

=0						AUTORUN=0
=$e000						 MONITOR_ADDRESS=$E000
=$f000						 LOCKOUT_ADDRESS=$F000
=$34000						 BASIC_ADDRESS=$34000
=$28000						 SOURCE_ADDRESS=$28000
=$30000						 SPRITE_ADDRESS=$30000
=$24000						 TILEMAP_ADDRESS=$24000
=$26000						 TILEIMAGES_ADDRESS=$26000
=0						HARDWARE=0

;******  Processing input file: _basic.asm


;******  Processing file: ./common/aa.system/01common.inc

=$30						ZeroPageMandatory = $30
=$50						ZeroPagePreference = $50
=$400						MemoryStorage = $400
=$2000						BasicStart = $2000
=$8000						BasicEnd = $8000
=$8000						CodeStart = $8000
=$1000						VariableSpace = $1000
=$2000						EndVariableSpace = $2000
=8						MathStackSize = 8
=512						BasicStackSize = 512
=3584						BasicStackBase = $1000-BasicStackSize
=80						MaxLineSize = 80

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/04data.inc

.0030						codePtr:
>0030								.fill 	4
.0034						basicStack:
>0034								.fill 	2
.0036						zTemp0:
>0036								.fill 	2
.0038						zTemp1:
>0038								.fill 	2
.003a						zTemp2:
>003a								.fill 	2
.003c						zsTemp:
>003c								.fill 	2
.003e						zaTemp:
>003e								.fill 	2
=$30						safePtr = codePtr 							; minimise direct tinkering
=$80						NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20						NSBIsReference = $20 						; bit 5 : is a reference
=$10						NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18						NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03						NSBRefMask = $03 							; bits 0,1 : Bytes of reference, 00 = 4,01 = 1,10=2
=$04						NSBIsArray = $04
=$00						NSTInteger = $00 							; base types for bits 3..4
=$08						NSTFloat = $08
=$10						NSTString = $10
=$18						NSTProcedure = $18
.0050						NSStatus:
>0050								.fill 	MathStackSize
.0058						NSMantissa0:
>0058								.fill 	MathStackSize 				; (this is my integer mantissa system)
.0060						NSMantissa1:
>0060								.fill 	MathStackSize
.0068						NSMantissa2:
>0068								.fill 	MathStackSize
.0070						NSMantissa3:
>0070								.fill 	MathStackSize
.0078						NSExponent:
>0078								.fill 	MathStackSize
.0400						identStart:
>0400								.fill 	1
.0401						identTypeStart:
>0401								.fill 	1
.0402						identTypeEnd:
>0402								.fill 	1
.0403						identHash:
>0403								.fill 	1
.0404						identTypeByte:
>0404								.fill 	1	 						; (see tokenising.pdf)
.0405						encodeState:
>0405								.fill 	1
.0406						digitTemp:
>0406								.fill 	1
.0407						decimalCount:
>0407								.fill 	1
.0408						lowMemPtr:
>0408								.fill 	2
.040a						stringMemory:
>040a								.fill 	2
.040c						stringInitialised:
>040c								.fill 	1
.040d						stringTempPointer:
>040d								.fill 	2
.040f						breakCheck:
>040f								.fill 	1
.0410						decimalPlaces:
>0410								.fill 	1
.0411						dbOffset:
>0411								.fill 	1
.0412						lastParameter:
>0412								.fill 	1
.0413						dataPointer:
>0413								.fill 	5
.0418						inDataStatement:
>0418								.fill 	1
.0419						tbOffset:
>0419								.fill 	1
.041a						AssemblerAddress:
>041a								.fill 	2
.041c						AssemblerControl:
>041c								.fill 	1
.041d						ParamStart:
>041d								.fill 	2
.041f						IsGroup1:
>041f								.fill 	1
.0420						BaseOpcode:
>0420								.fill 	1
.0421						ModeMask:
>0421								.fill 	1
.0422						listIndent:
>0422								.fill 	1
.0423						lcLastCharacter:
>0423								.fill 	1
.0424						isPrintFlag:
>0424								.fill 	1
.0425						currentListColour:
>0425								.fill 	1
.0426						tokenOffset:
>0426								.fill 	1
.0427						tokenLineNumber:
>0427								.fill 	2
.0429						tokenBuffer:
>0429								.fill 	253
.0526						lineBuffer:
>0526								.fill 	253
.0623						numberBuffer:
>0623								.fill 	34
.0645						decimalBuffer:
>0645								.fill 	16

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/ab.system/macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/ab.system/ticktask.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/constants.inc

=$80						AM_ISZP = $80
=$40						AM_ISG1 = $40
=$20						AM_ISG2 = $20
=224						AM_IMMEDIATE = AM_ISZP+AM_ISG1+AM_ISG2+$00
=228						AM_ZEROPAGE = AM_ISZP+AM_ISG1+AM_ISG2+$04
=40						AM_ACC = AM_ISG2+$08
=108						AM_ABS = AM_ISG1+AM_ISG2+$0C
=208						AM_INDY = AM_ISZP+AM_ISG1+$10
=244						AM_ZEROX = AM_ISZP+AM_ISG1+AM_ISG2+$14
=120						AM_ABSY = AM_ISG1+AM_ISG2+$18
=124						AM_ABSX = AM_ISG1+AM_ISG2+$1C
=209						AM_IND = AM_ISZP+AM_ISG1+$11
=$80						AM_ZEROY = AM_ISZP
=$01						AM_INDABS = $01
=$02						AM_INDABSX = $02
=192						AM_INDX = AM_ISZP+AM_ISG1+$00

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/handlers.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.inc

=1						ERRID_BREAK = 1
=2						ERRID_SYNTAX = 2
=3						ERRID_DIVZERO = 3
=4						ERRID_RANGE = 4
=5						ERRID_TYPE = 5
=6						ERRID_MEMORY = 6
=7						ERRID_ARGUMENT = 7
=8						ERRID_STOP = 8
=9						ERRID_STRING = 9
=10						ERRID_ASSERT = 10
=11						ERRID_DATA = 11
=12						ERRID_NOTDONE = 12
=13						ERRID_LINE = 13
=14						ERRID_GOSUB = 14
=15						ERRID_REPEAT = 15
=16						ERRID_WHILE = 16
=17						ERRID_FOR = 17
=18						ERRID_STACK = 18
=19						ERRID_STRUCT = 19
=20						ERRID_PROC = 20
=21						ERRID_REDEFINE = 21
=22						ERRID_ARRAYSIZE = 22
=23						ERRID_ARRAYIDX = 23
=24						ERRID_ARRAYDEC = 24
=25						ERRID_NOTFOUND = 25
=26						ERRID_DRIVEIO = 26
=27						ERRID_VERIFY = 27

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst.inc

=$00						KWD_LESSLESS                         = $00; $00 <<
=$01						KWD_LESSEQUAL                        = $01; $01 <=
=$02						KWD_LESSGREATER                      = $02; $02 <>
=$03						KWD_PLINGPLING3                      = $03; $03 !!3
=$04						KWD_GREATERLESS                      = $04; $04 ><
=$05						KWD_GREATEREQUAL                     = $05; $05 >=
=$06						KWD_GREATERGREATER                   = $06; $06 >>
=$07						KWD_PLINGPLING7                      = $07; $07 !!7
=$08						KWD_PLINGPLING8                      = $08; $08 !!8
=$09						KWD_PLINGPLING9                      = $09; $09 !!9
=$0a						KWD_PLINGPLING10                     = $0a; $0a !!10
=$0b						KWD_PLINGPLING11                     = $0b; $0b !!11
=$0c						KWD_PLINGPLING12                     = $0c; $0c !!12
=$0d						KWD_PLINGPLING13                     = $0d; $0d !!13
=$0e						KWD_PLINGPLING14                     = $0e; $0e !!14
=$0f						KWD_PLINGPLING15                     = $0f; $0f !!15
=$10						KWD_ATCH                             = $10; $10 @
=$11						KWD_PLINGPLING17                     = $11; $11 !!17
=$12						KWD_PLINGPLING18                     = $12; $12 !!18
=$13						KWD_LSQPAREN                         = $13; $13 [
=$14						KWD_BACKSLASH                        = $14; $14 \
=$15						KWD_RSQPAREN                         = $15; $15 ]
=$16						KWD_HAT                              = $16; $16 ^
=$17						KWD_UNDERSCORE                       = $17; $17 _
=$18						KWD_BQUOTE                           = $18; $18 `
=$19						KWD_PLINGPLING25                     = $19; $19 !!25
=$1a						KWD_PLINGPLING26                     = $1a; $1a !!26
=$1b						KWD_LCURLY                           = $1b; $1b {
=$1c						KWD_BAR                              = $1c; $1c |
=$1d						KWD_RCURLY                           = $1d; $1d }
=$1e						KWD_TILDE                            = $1e; $1e ~
=$21						KWD_PLING                            = $21; $21 !
=$22						KWD_DQUOTE                           = $22; $22 "
=$23						KWD_HASH                             = $23; $23 #
=$24						KWD_DOLLAR                           = $24; $24 $
=$25						KWD_PERCENT                          = $25; $25 %
=$26						KWD_AMPERSAND                        = $26; $26 &
=$27						KWD_QUOTE                            = $27; $27 '
=$28						KWD_LPAREN                           = $28; $28 (
=$29						KWD_RPAREN                           = $29; $29 )
=$2a						KWD_STAR                             = $2a; $2a *
=$2b						KWD_PLUS                             = $2b; $2b +
=$2c						KWD_COMMA                            = $2c; $2c ,
=$2d						KWD_MINUS                            = $2d; $2d -
=$2e						KWD_PERIOD                           = $2e; $2e .
=$2f						KWD_SLASH                            = $2f; $2f /
=$30						KWD_0                                = $30; $30 0
=$31						KWD_1                                = $31; $31 1
=$32						KWD_2                                = $32; $32 2
=$33						KWD_3                                = $33; $33 3
=$34						KWD_4                                = $34; $34 4
=$35						KWD_5                                = $35; $35 5
=$36						KWD_6                                = $36; $36 6
=$37						KWD_7                                = $37; $37 7
=$38						KWD_8                                = $38; $38 8
=$39						KWD_9                                = $39; $39 9
=$3a						KWD_COLON                            = $3a; $3a :
=$3b						KWD_SEMICOLON                        = $3b; $3b ;
=$3c						KWD_LESS                             = $3c; $3c <
=$3d						KWD_EQUAL                            = $3d; $3d =
=$3e						KWD_GREATER                          = $3e; $3e >
=$3f						KWD_QMARK                            = $3f; $3f ?
=$83						KWD_ABSLPAREN                        = $83; $83 ABS(
=$84						KWD_ALLOCLPAREN                      = $84; $84 ALLOC(
=$85						KWD_ASCLPAREN                        = $85; $85 ASC(
=$86						KWD_CHRDOLLARLPAREN                  = $86; $86 CHR$(
=$87						KWD_EVENTLPAREN                      = $87; $87 EVENT(
=$88						KWD_FALSE                            = $88; $88 FALSE
=$89						KWD_FRACLPAREN                       = $89; $89 FRAC(
=$8a						KWD_GETDOLLARLPAREN                  = $8a; $8a GET$(
=$8b						KWD_GETLPAREN                        = $8b; $8b GET(
=$8c						KWD_GETDATEDOLLARLPAREN              = $8c; $8c GETDATE$(
=$8d						KWD_GETTIMEDOLLARLPAREN              = $8d; $8d GETTIME$(
=$8e						KWD_HITLPAREN                        = $8e; $8e HIT(
=$8f						KWD_INKEYDOLLARLPAREN                = $8f; $8f INKEY$(
=$90						KWD_INKEYLPAREN                      = $90; $90 INKEY(
=$91						KWD_INTLPAREN                        = $91; $91 INT(
=$92						KWD_ISVALLPAREN                      = $92; $92 ISVAL(
=$93						KWD_ITEMCOUNTLPAREN                  = $93; $93 ITEMCOUNT(
=$94						KWD_ITEMGETDOLLARLPAREN              = $94; $94 ITEMGET$(
=$95						KWD_JOYBLPAREN                       = $95; $95 JOYB(
=$96						KWD_JOYXLPAREN                       = $96; $96 JOYX(
=$97						KWD_JOYYLPAREN                       = $97; $97 JOYY(
=$98						KWD_KEYDOWNLPAREN                    = $98; $98 KEYDOWN(
=$99						KWD_LEFTDOLLARLPAREN                 = $99; $99 LEFT$(
=$9a						KWD_LENLPAREN                        = $9a; $9a LEN(
=$9b						KWD_MAXLPAREN                        = $9b; $9b MAX(
=$9c						KWD_MIDDOLLARLPAREN                  = $9c; $9c MID$(
=$9d						KWD_MINLPAREN                        = $9d; $9d MIN(
=$9e						KWD_NOTLPAREN                        = $9e; $9e NOT(
=$9f						KWD_PEEKLPAREN                       = $9f; $9f PEEK(
=$a0						KWD_PEEKDLPAREN                      = $a0; $a0 PEEKD(
=$a1						KWD_PEEKLLPAREN                      = $a1; $a1 PEEKL(
=$a2						KWD_PEEKWLPAREN                      = $a2; $a2 PEEKW(
=$a3						KWD_PLAYINGLPAREN                    = $a3; $a3 PLAYING(
=$a4						KWD_RANDOMLPAREN                     = $a4; $a4 RANDOM(
=$a5						KWD_RIGHTDOLLARLPAREN                = $a5; $a5 RIGHT$(
=$a6						KWD_RNDLPAREN                        = $a6; $a6 RND(
=$a7						KWD_SGNLPAREN                        = $a7; $a7 SGN(
=$a8						KWD_SPCLPAREN                        = $a8; $a8 SPC(
=$a9						KWD_STRDOLLARLPAREN                  = $a9; $a9 STR$(
=$aa						KWD_TILELPAREN                       = $aa; $aa TILE(
=$ab						KWD_TIMERLPAREN                      = $ab; $ab TIMER(
=$ac						KWD_TRUE                             = $ac; $ac TRUE
=$ad						KWD_VALLPAREN                        = $ad; $ad VAL(
=$ae						KWD_FOR                              = $ae; $ae FOR
=$af						KWD_IF                               = $af; $af IF
=$b0						KWD_PROC                             = $b0; $b0 PROC
=$b1						KWD_REPEAT                           = $b1; $b1 REPEAT
=$b2						KWD_WHILE                            = $b2; $b2 WHILE
=$b3						KWD_ENDIF                            = $b3; $b3 ENDIF
=$b4						KWD_ENDPROC                          = $b4; $b4 ENDPROC
=$b5						KWD_NEXT                             = $b5; $b5 NEXT
=$b6						KWD_THEN                             = $b6; $b6 THEN
=$b7						KWD_UNTIL                            = $b7; $b7 UNTIL
=$b8						KWD_WEND                             = $b8; $b8 WEND
=$b9						KWD_AT                               = $b9; $b9 AT
=$ba						KWD_BY                               = $ba; $ba BY
=$bb						KWD_CALL                             = $bb; $bb CALL
=$bc						KWD_CIRCLE                           = $bc; $bc CIRCLE
=$bd						KWD_CLEAR                            = $bd; $bd CLEAR
=$be						KWD_COLOR                            = $be; $be COLOR
=$bf						KWD_COLOUR                           = $bf; $bf COLOUR
=$c0						KWD_DATA                             = $c0; $c0 DATA
=$c1						KWD_DIM                              = $c1; $c1 DIM
=$c2						KWD_DOWNTO                           = $c2; $c2 DOWNTO
=$c3						KWD_ELSE                             = $c3; $c3 ELSE
=$c4						KWD_FROM                             = $c4; $c4 FROM
=$c5						KWD_GFX                              = $c5; $c5 GFX
=$c6						KWD_HERE                             = $c6; $c6 HERE
=$c7						KWD_IMAGE                            = $c7; $c7 IMAGE
=$c8						KWD_LET                              = $c8; $c8 LET
=$c9						KWD_LINE                             = $c9; $c9 LINE
=$ca						KWD_LOCAL                            = $ca; $ca LOCAL
=$cb						KWD_MEMCOPY                          = $cb; $cb MEMCOPY
=$cc						KWD_OFF                              = $cc; $cc OFF
=$cd						KWD_ON                               = $cd; $cd ON
=$ce						KWD_OUTLINE                          = $ce; $ce OUTLINE
=$cf						KWD_PALETTE                          = $cf; $cf PALETTE
=$d0						KWD_PLOT                             = $d0; $d0 PLOT
=$d1						KWD_POKE                             = $d1; $d1 POKE
=$d2						KWD_POKED                            = $d2; $d2 POKED
=$d3						KWD_POKEL                            = $d3; $d3 POKEL
=$d4						KWD_POKEW                            = $d4; $d4 POKEW
=$d5						KWD_READ                             = $d5; $d5 READ
=$d6						KWD_RECT                             = $d6; $d6 RECT
=$d7						KWD_REM                              = $d7; $d7 REM
=$d8						KWD_SOLID                            = $d8; $d8 SOLID
=$d9						KWD_SOUND                            = $d9; $d9 SOUND
=$da						KWD_SPRITE                           = $da; $da SPRITE
=$db						KWD_TEXT                             = $db; $db TEXT
=$dc						KWD_TO                               = $dc; $dc TO
=$83						KWD1_ASSEMBLE                         = $83; $83 ASSEMBLE
=$84						KWD1_ASSERT                           = $84; $84 ASSERT
=$85						KWD1_BITMAP                           = $85; $85 BITMAP
=$86						KWD1_BLOAD                            = $86; $86 BLOAD
=$87						KWD1_BSAVE                            = $87; $87 BSAVE
=$88						KWD1_CLS                              = $88; $88 CLS
=$89						KWD1_CPRINT                           = $89; $89 CPRINT
=$8a						KWD1_DIR                              = $8a; $8a DIR
=$8b						KWD1_DOS                              = $8b; $8b DOS
=$8c						KWD1_DRIVE                            = $8c; $8c DRIVE
=$8d						KWD1_END                              = $8d; $8d END
=$8e						KWD1_EXPLODE                          = $8e; $8e EXPLODE
=$8f						KWD1_GO                               = $8f; $8f GO
=$90						KWD1_GOSUB                            = $90; $90 GOSUB
=$91						KWD1_GOTO                             = $91; $91 GOTO
=$92						KWD1_HIMEM                            = $92; $92 HIMEM
=$93						KWD1_INPUT                            = $93; $93 INPUT
=$94						KWD1_LIST                             = $94; $94 LIST
=$95						KWD1_LOAD                             = $95; $95 LOAD
=$96						KWD1_MDELTA                           = $96; $96 MDELTA
=$97						KWD1_MOUSE                            = $97; $97 MOUSE
=$98						KWD1_NEW                              = $98; $98 NEW
=$99						KWD1_PING                             = $99; $99 PING
=$9a						KWD1_PRINT                            = $9a; $9a PRINT
=$9b						KWD1_RESTORE                          = $9b; $9b RESTORE
=$9c						KWD1_RETURN                           = $9c; $9c RETURN
=$9d						KWD1_RUN                              = $9d; $9d RUN
=$9e						KWD1_SAVE                             = $9e; $9e SAVE
=$9f						KWD1_SETDATE                          = $9f; $9f SETDATE
=$a0						KWD1_SETTIME                          = $a0; $a0 SETTIME
=$a1						KWD1_SHOOT                            = $a1; $a1 SHOOT
=$a2						KWD1_SPRITES                          = $a2; $a2 SPRITES
=$a3						KWD1_STOP                             = $a3; $a3 STOP
=$a4						KWD1_TILE                             = $a4; $a4 TILE
=$a5						KWD1_TILES                            = $a5; $a5 TILES
=$a6						KWD1_TRY                              = $a6; $a6 TRY
=$a7						KWD1_VERIFY                           = $a7; $a7 VERIFY
=$a8						KWD1_XGO                              = $a8; $a8 XGO
=$a9						KWD1_XLOAD                            = $a9; $a9 XLOAD
=$aa						KWD1_ZAP                              = $aa; $aa ZAP

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst0.inc

=$80						KWC_EOL = $80
=$81						KWC_SHIFT1 = $81
=$82						KWC_SHIFT2 = $82
=$ff						KWC_STRING = $FF
=$fe						KWC_HEXCONST = $FE
=$ae						KWC_FIRST_STRUCTURE = $ae
=$b3						KWC_FIRST_STRUCTURE_DEC = $b3
=$b8						KWC_LAST_STRUCTURE = $b8
=$83						KWC_FIRST_UNARY = $83
=$ad						KWC_LAST_UNARY = $ad

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/memory/memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/stack.inc

=$e0						STK_GOSUB = $E0
=$d0						STK_FOR = $D0
=$c0						STK_REPEAT = $C0
=$b0						STK_PROC = $B0
=$a0						STK_WHILE = $A0
=$01						STK_LOCALN = $01
=$02						STK_LOCALS = $02

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/00start.asm

.8000						F256Header:
>8000		f2 56						.text	$f2,$56         			; Signature
>8002		04						.byte   4               			; 4 blocks
>8003		04						.byte   4               			; mount at $8000
>8004		40 80						.word   Boot 	      				; Start here
>8006		00 00						.word   0 			               	; version
>8008		00 00						.word   0               			; kernel
>800a		53 75 70 65 72 42 41 53				.text   "SuperBASIC",0 				; name of program.
>8012		49 43 00
.8040		4c 93 80	jmp $8093	Boot:	jmp 	Start

;******  Processing file: ./common/aa.system/../../../modules/_build/_linker.module

=1						PagingEnabled = 1
.8043						EXTPrintCharacter:
.8043		e6 0d		inc $0d			inc 8+5
.8045		20 0b a0	jsr $a00b		jsr	Export_EXTPrintCharacter
.8048		08		php			php
.8049		c6 0d		dec $0d			dec 8+5
.804b		28		plp			plp
.804c		60		rts			rts
.804d						EXTPrintNoControl:
.804d		e6 0d		inc $0d			inc 8+5
.804f		20 00 a0	jsr $a000		jsr	Export_EXTPrintNoControl
.8052		08		php			php
.8053		c6 0d		dec $0d			dec 8+5
.8055		28		plp			plp
.8056		60		rts			rts
.8057						EXTInitialise:
.8057		e6 0d		inc $0d			inc 8+5
.8059		20 da a1	jsr $a1da		jsr	Export_EXTInitialise
.805c		08		php			php
.805d		c6 0d		dec $0d			dec 8+5
.805f		28		plp			plp
.8060		60		rts			rts
.8061						GXGraphicDraw:
.8061		e6 0d		inc $0d			inc 8+5
.8063		20 3b a3	jsr $a33b		jsr	Export_GXGraphicDraw
.8066		08		php			php
.8067		c6 0d		dec $0d			dec 8+5
.8069		28		plp			plp
.806a		60		rts			rts
.806b						SNDCommand:
.806b		e6 0d		inc $0d			inc 8+5
.806d		20 10 b9	jsr $b910		jsr	Export_SNDCommand
.8070		08		php			php
.8071		c6 0d		dec $0d			dec 8+5
.8073		28		plp			plp
.8074		60		rts			rts
.8075						SNDUpdate:
.8075		e6 0d		inc $0d			inc 8+5
.8077		20 43 b9	jsr $b943		jsr	Export_SNDUpdate
.807a		08		php			php
.807b		c6 0d		dec $0d			dec 8+5
.807d		28		plp			plp
.807e		60		rts			rts
.807f						TKListConvertLine:
.807f		e6 0d		inc $0d			inc 8+5
.8081		20 c1 b2	jsr $b2c1		jsr	Export_TKListConvertLine
.8084		08		php			php
.8085		c6 0d		dec $0d			dec 8+5
.8087		28		plp			plp
.8088		60		rts			rts
.8089						TKTokeniseLine:
.8089		e6 0d		inc $0d			inc 8+5
.808b		20 55 b5	jsr $b555		jsr	Export_TKTokeniseLine
.808e		08		php			php
.808f		c6 0d		dec $0d			dec 8+5
.8091		28		plp			plp
.8092		60		rts			rts

;******  Return to file: ./common/aa.system/00start.asm

.8093		a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.8095		9a		txs				txs
.8096		20 57 80	jsr $8057			jsr 	EXTInitialise 				; hardware initialise
.8099		a5 00		lda $00				lda 	0  							; turn on editing of MMU LUT
.809b		09 80		ora #$80			ora 	#$80
.809d		85 00		sta $00				sta 	0
.809f		ad 02 20	lda $2002			lda 	$2002 						; if $2002..5 is BT65 then jump to $2000
.80a2		c9 42		cmp #$42			cmp 	#"B"
.80a4		d0 18		bne $80be			bne 	_NoMachineCode
.80a6		ad 03 20	lda $2003			lda 	$2003
.80a9		c9 54		cmp #$54			cmp 	#"T"
.80ab		d0 11		bne $80be			bne 	_NoMachineCode
.80ad		ad 04 20	lda $2004			lda 	$2004
.80b0		c9 36		cmp #$36			cmp 	#"6"
.80b2		d0 0a		bne $80be			bne 	_NoMachineCode
.80b4		ad 05 20	lda $2005			lda 	$2005
.80b7		c9 35		cmp #$35			cmp 	#"5"
.80b9		d0 03		bne $80be			bne 	_NoMachineCode
.80bb		4c 00 20	jmp $2000			jmp 	$2000
.80be						_NoMachineCode:
.80be		a9 00		lda #$00			lda 	#0 							; zero the default drive.
.80c0		20 c0 83	jsr $83c0			jsr 	KNLSetDrive
.80c3		a9 00		lda #$00			lda 	#0 							; graphics system initialise.
.80c5		aa		tax				tax
.80c6		a8		tay				tay
.80c7		20 61 80	jsr $8061			jsr 	GXGraphicDraw
.80ca		a9 0f		lda #$0f			lda 	#$0F 						; initialise sound system
.80cc		20 6b 80	jsr $806b			jsr 	SNDCommand
.80cf		a9 8d		lda #$8d			lda 	#128+13 					; Display FPGA information.
.80d1		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.80d4		a9 09		lda #$09			lda 	#9
.80d6		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.80d9		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.80dc		64 01		stz $01				stz 	1
.80de		ad ad d6	lda $d6ad			lda 	$D6AD
.80e1		20 95 85	jsr $8595			jsr 	PrintHex
.80e4		ad ac d6	lda $d6ac			lda 	$D6AC
.80e7		20 95 85	jsr $8595			jsr 	PrintHex
.80ea		ad ab d6	lda $d6ab			lda 	$D6AB
.80ed		20 95 85	jsr $8595			jsr 	PrintHex
.80f0		ad aa d6	lda $d6aa			lda 	$D6AA
.80f3		20 95 85	jsr $8595			jsr 	PrintHex
.80f6		a9 20		lda #$20			lda 	#32
.80f8		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.80fb		ad a8 d6	lda $d6a8			lda 	$D6A8
.80fe		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.8101		ad a9 d6	lda $d6a9			lda 	$D6A9
.8104		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.8107		a9 0d		lda #$0d			lda 	#13 						; display Kernel information
.8109		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.810c		a9 09		lda #$09			lda 	#9
.810e		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.8111		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.8114		a9 08		lda #$08			lda 	#$08
.8116		a2 e0		ldx #$e0			ldx 	#$E0
.8118		20 fc 93	jsr $93fc			jsr 	PrintStringXA
.811b		a2 81		ldx #$81			ldx 	#Prompt >> 8 				; display prompt
.811d		a9 2e		lda #$2e			lda 	#Prompt & $FF
.811f		20 fc 93	jsr $93fc			jsr 	PrintStringXA
.8122		20 77 82	jsr $8277			jsr 	ResetIOTracking 			; reset the I/O tracking.
.8125		20 e7 8d	jsr $8de7			jsr 	NewProgram 					; erase current program
.8128		4c 01 88	jmp $8801			jmp 	WarmStart					; make same size.
.812b		4c 01 88	jmp $8801			jmp 	WarmStart
>812e		0d				Prompt:	.text 	13

;******  Processing file: ./common/aa.system/../generated/timestamp.asm

>812f		09 09 32 33 2f 30 32 2f			.text 9,9,"23/02/23 38"
>8137		32 33 20 33 38

;******  Return to file: ./common/aa.system/00start.asm

>813c		0d 0d 0d 00					.text 	13,13,13,0

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/ab.system/events.asm

.8140						ProcessEvents:
.8140		20 ff 83	jsr $83ff			jsr 	KNLSetEventPointer
.8143		20 80 82	jsr $8280			jsr     GetNextEvent 				; get next event
.8146		b0 36		bcs $817e			bcs 	_PEExitZ 					; nothing left to process.
.8148		ad 9b 07	lda $079b			lda 	KNLEvent.type 				; go back if event not key.pressed.
.814b		c9 08		cmp #$08			cmp 	#kernel.event.key.PRESSED
.814d		d0 f1		bne $8140			bne 	ProcessEvents
.814f		ad a1 07	lda $07a1			lda	 	KNLEvent.key.flags 			; is KNLEvent.key.flags = 0 ?
.8152		30 0b		bmi $815f			bmi 	_PEIsRaw
.8154		d0 ea		bne $8140			bne 	ProcessEvents
.8156		ad a0 07	lda $07a0			lda 	KNLEvent.key.ascii 			; is it Ctrl+C
.8159		c9 03		cmp #$03			cmp 	#3
.815b		f0 1e		beq $817b			beq 	_PEReturnBreak  			; no, keep going.
.815d		80 0b		bra $816a			bra 	_PEQueueA
.815f						_PEIsRaw:
.815f		ad 9f 07	lda $079f			lda 	KNLEvent.key.raw 			; return raw key if F1-F12
.8162		c9 81		cmp #$81			cmp 	#129
.8164		90 da		bcc $8140			bcc		ProcessEvents
.8166		c9 8d		cmp #$8d			cmp 	#140+1
.8168		b0 d6		bcs $8140			bcs 	ProcessEvents
.816a						_PEQueueA:
.816a		da		phx				phx
.816b		ae 5d 06	ldx $065d			ldx 	KeyboardQueueEntries 		; get keyboard queue size into X
.816e		e0 08		cpx #$08			cpx 	#KBDQueueSize 				; if full, then ignore
.8170		f0 06		beq $8178			beq 	_PENoQueue
.8172		9d 55 06	sta $0655,x			sta 	KeyboardQueue,x 			; write into queue
.8175		ee 5d 06	inc $065d			inc 	KeyboardQueueEntries 		; bump count
.8178						_PENoQueue:
.8178		fa		plx				plx
.8179		80 c5		bra $8140			bra 	ProcessEvents
.817b						_PEReturnBreak:
.817b		a9 ff		lda #$ff			lda 	#255 						; return with NZ state
.817d		60		rts				rts
.817e						_PEExitZ:
.817e		a9 00		lda #$00			lda 	#0
.8180		60		rts				rts
.8181						PopKeyboardQueue:
.8181		ad 5d 06	lda $065d			lda 	KeyboardQueueEntries 		; get keyboard queue entries.
.8184		f0 17		beq $819d			beq 	_PKQExit 					; zero, then exit.
.8186		ad 55 06	lda $0655			lda 	KeyboardQueue 				; save head of keyboard queue
.8189		48		pha				pha
.818a		da		phx				phx 								; drop head of queue
.818b		a2 00		ldx #$00			ldx 	#0
.818d						_PKQLoop:
.818d		bd 56 06	lda $0656,x			lda 	KeyboardQueue+1,x 			; shift everything back one.
.8190		9d 55 06	sta $0655,x			sta 	KeyboardQueue,x  			; not efficient but doesn't matter.
.8193		e8		inx				inx
.8194		e0 07		cpx #$07			cpx 	#7
.8196		d0 f5		bne $818d			bne 	_PKQLoop
.8198		fa		plx				plx
.8199		ce 5d 06	dec $065d			dec 	KeyboardQueueEntries 		; one fewer in queue.
.819c		68		pla				pla 								; restore head of queue.
.819d						_PKQExit:
.819d		60		rts				rts
.819e						KNLGetKeyPressed:
.819e		a5 01		lda $01				lda 	1 							; save I/O 0
.81a0		48		pha				pha
.81a1		64 01		stz $01				stz 	1 							; access I/O Page 0
.81a3		38		sec				sec 								; calculate timer - LastTick
.81a4		ad 59 d6	lda $d659			lda 	$D659
.81a7		cd 5e 06	cmp $065e			cmp 	LastTick
.81aa		f0 06		beq $81b2			beq 	_NoFireTick 				; if < 3 clocks don't fire.
.81ac		8d 5e 06	sta $065e			sta 	LastTick 					; update last timer
.81af		20 6f 82	jsr $826f			jsr 	TickHandler 							; go do the code.
.81b2						_NoFireTick:
.81b2		68		pla				pla 								; restore I/O 0
.81b3		85 01		sta $01				sta 	1
.81b5		ad 5d 06	lda $065d			lda 	KeyboardQueueEntries 		; something in the queue
.81b8		d0 c7		bne $8181			bne 	PopKeyboardQueue 			; if so, pop and return it
.81ba		20 40 81	jsr $8140			jsr 	ProcessEvents 				; process any outstanding events
.81bd		a9 00		lda #$00			lda 	#0
.81bf		60		rts				rts
.81c0						KNLGetSingleCharacter:
.81c0		20 9e 81	jsr $819e			jsr 	KNLGetKeyPressed
.81c3		c9 00		cmp #$00			cmp 	#0
.81c5		f0 f9		beq $81c0			beq 	KNLGetSingleCharacter
.81c7		60		rts				rts
=8						KBDQueueSize = 8
.0655						KeyboardQueue:
>0655								.fill 	KBDQueueSize
.065d						KeyboardQueueEntries:
>065d								.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/ab.system/input.asm

.81c8						EXTInputLine:
.81c8		48		pha				pha
.81c9		da		phx				phx
.81ca		5a		phy				phy
.81cb		a5 01		lda $01				lda 	1 							; save I/O page
.81cd		48		pha				pha
.81ce						_EILLoop:
.81ce		20 c0 81	jsr $81c0			jsr 	KNLGetSingleCharacter 		; get one single character
.81d1		c9 0d		cmp #$0d			cmp 	#13 						; scrape line if exit.
.81d3		f0 44		beq $8219			beq 	_EILExit
.81d5		c9 04		cmp #$04			cmp 	#4 							; Ctrl+D delete at cursor
.81d7		f0 2a		beq $8203			beq 	_EILDelete
.81d9		c9 08		cmp #$08			cmp 	#8 							; Ctrl+H backspace
.81db		f0 1c		beq $81f9			beq 	_EILBackspace
.81dd		c9 20		cmp #$20			cmp 	#' '						; < space, print it
.81df		90 12		bcc $81f3			bcc 	_EILPrintLoop
.81e1		c9 7f		cmp #$7f			cmp 	#$7F 						; if -ve print it
.81e3		b0 0e		bcs $81f3			bcs 	_EILPrintLoop
.81e5		48		pha				pha 								; save character
.81e6		a9 02		lda #$02			lda 	#2  						; insert a space
.81e8		85 01		sta $01				sta 	1
.81ea		20 5d 82	jsr $825d			jsr 	EXTILInsert 				; insert in text screen
.81ed		e6 01		inc $01				inc 	1
.81ef		20 5d 82	jsr $825d			jsr 	EXTILInsert 				; insert in colour screen
.81f2		68		pla				pla 								; get character back.
.81f3						_EILPrintLoop:
.81f3		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.81f6		80 d6		bra $81ce			bra 	_EILLoop
.81f8		60		rts				rts
.81f9						_EILBackspace:
.81f9		ad c4 07	lda $07c4			lda 	EXTColumn					; can we backspace ?
.81fc		f0 d0		beq $81ce			beq 	_EILLoop
.81fe		a9 02		lda #$02			lda 	#2 							; move cursor left
.8200		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.8203						_EILDelete
.8203		a9 02		lda #$02			lda 	#2 							; text block
.8205		85 01		sta $01				sta 	1
.8207		a9 20		lda #$20			lda 	#' ' 						; backspace text.
.8209		20 48 82	jsr $8248			jsr 	EXTILDelete
.820c		e6 01		inc $01				inc 	1 							; colour block
.820e		ac c4 07	ldy $07c4			ldy 	EXTColumn 					; get attribute of last character
.8211		88		dey				dey
.8212		b1 40		lda ($40),y			lda 	(EXTAddress),y
.8214		20 48 82	jsr $8248			jsr 	EXTILDelete 				; backspace attribute
.8217		80 b5		bra $81ce			bra 	_EILLoop 					; and go round.
.8219						_EILExit:
.8219		a9 02		lda #$02			lda 	#2 							; switch to page 2
.821b		85 01		sta $01				sta 	1
.821d		a0 00		ldy #$00			ldy 	#0 							; copy current line into buffer.
.821f						_EILScrapeLine:
.821f		b1 40		lda ($40),y			lda 	(EXTAddress),y
.8221		99 26 05	sta $0526,y			sta 	lineBuffer,y
.8224		c8		iny				iny
.8225		cc c6 07	cpy $07c6			cpy 	EXTScreenWidth
.8228		d0 f5		bne $821f			bne 	_EILScrapeLine
.822a						_EILTrimSpaces:
.822a		88		dey				dey
.822b		c0 ff		cpy #$ff			cpy 	#$FF 						; back past the start
.822d		f0 07		beq $8236			beq 	_EILEndTrim		 			; zero the input line.
.822f		b9 26 05	lda $0526,y			lda 	lineBuffer,y
.8232		c9 20		cmp #$20			cmp 	#' '
.8234		f0 f4		beq $822a			beq 	_EILTrimSpaces 				; if fail this found non space character
.8236						_EILEndTrim:
.8236		c8		iny				iny 								; trim after non space character.
.8237		a9 00		lda #$00			lda 	#0 							; trim here.
.8239		99 26 05	sta $0526,y			sta 	lineBuffer,y
.823c		a9 0d		lda #$0d			lda 	#13 						; echo the RETURN
.823e		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.8241		68		pla				pla 								; reset I/O page
.8242		85 01		sta $01				sta 	1
.8244		7a		ply				ply
.8245		fa		plx				plx
.8246		68		pla				pla
.8247		60		rts				rts
.8248						EXTILDelete:
.8248		48		pha				pha 								; save the new character
.8249		ac c4 07	ldy $07c4			ldy 	EXTColumn 					; start copying from here.
.824c						_EXTDLoop:
.824c		c8		iny				iny 								; copy one byte down.
.824d		b1 40		lda ($40),y			lda 	(EXTAddress),y
.824f		88		dey				dey
.8250		91 40		sta ($40),y			sta 	(EXTAddress),y
.8252		c8		iny				iny 								; do till end of line.
.8253		cc c6 07	cpy $07c6			cpy 	EXTScreenWidth
.8256		90 f4		bcc $824c			bcc 	_EXTDLoop
.8258		88		dey				dey 	 							; write in last slot.
.8259		68		pla				pla
.825a		91 40		sta ($40),y			sta 	(EXTAddress),y
.825c		60		rts				rts
.825d						EXTILInsert:
.825d		ac c6 07	ldy $07c6			ldy 	EXTScreenWidth 				; end position
.8260						_EXTILoop:
.8260		88		dey				dey 								; back one
.8261		cc c4 07	cpy $07c4			cpy 	EXTColumn 					; exit if reached insert point.
.8264		f0 08		beq $826e			beq 	_EXTIExit
.8266		88		dey				dey 								; copy one byte up.
.8267		b1 40		lda ($40),y			lda 	(EXTAddress),y
.8269		c8		iny				iny
.826a		91 40		sta ($40),y			sta 	(EXTAddress),y
.826c		80 f2		bra $8260			bra 	_EXTILoop
.826e						_EXTIExit:
.826e		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/ab.system/ticktask.asm

.826f						TickHandler:
.826f		da		phx				phx
.8270		5a		phy				phy 								; need to preserve Y
.8271		20 75 80	jsr $8075			jsr 	SNDUpdate 					; update sound
.8274		7a		ply				ply
.8275		fa		plx				plx
.8276		60		rts				rts
.065e						LastTick:
>065e								.fill 		1

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/ab.system/trackio.asm

.8277						ResetIOTracking:
.8277		a2 3a		ldx #$3a			ldx 	#GNEEnd-GNEBegin-1
.8279						_RIOLoop:
.8279		9e 5f 06	stz $065f,x			stz 	GNEBegin,x
.827c		ca		dex				dex
.827d		10 fa		bpl $8279			bpl 	_RIOLoop
.827f		60		rts				rts
.8280						GetNextEvent:
.8280		20 00 ff	jsr $ff00			jsr 	kernel.NextEvent 			; get event
.8283		08		php				php									; save yes/no flag.
.8284		b0 29		bcs $82af			bcs 	_GNEExit
.8286		48		pha				pha 								; save registers
.8287		da		phx				phx
.8288		5a		phy				phy
.8289		ad 9b 07	lda $079b			lda 	KNLEvent.type	 			; check for PRESSED or RELEASED
.828c		c9 08		cmp #$08			cmp 	#kernel.event.key.PRESSED
.828e		f0 04		beq $8294			beq 	_GNEKeyEvent
.8290		c9 0a		cmp #$0a			cmp 	#kernel.event.key.RELEASED
.8292		d0 08		bne $829c			bne 	_GNECheckMouseEvent
.8294						_GNEKeyEvent:
.8294		20 6e 83	jsr $836e			jsr 	ProcessKeyboardEvent 		; process keyboard up/down.
.8297		20 8b 83	jsr $838b			jsr 	UpdateKeyboardJoystick 		; update the keyboard-joystick.
.829a		80 10		bra $82ac			bra 	_GNEEventExit
.829c						_GNECheckMouseEvent:
.829c		c9 0c		cmp #$0c			cmp 	#kernel.event.mouse.DELTA 	; check for move events
.829e		d0 05		bne $82a5			bne 	_GNENotDelta
.82a0		20 b1 82	jsr $82b1			jsr 	ProcessMouseDeltaEvent 		; process them.
.82a3		80 07		bra $82ac			bra 	_GNEEventExit
.82a5						_GNENotDelta:
.82a5		c9 0e		cmp #$0e			cmp 	#kernel.event.mouse.CLICKS 	; check for click events
.82a7		d0 03		bne $82ac			bne 	_GNEEventExit
.82a9		20 e0 82	jsr $82e0			jsr 	ProcessMouseClickEvent 		; process them.
.82ac						_GNEEventExit:
.82ac		7a		ply				ply 								; restore registers
.82ad		fa		plx				plx
.82ae		68		pla				pla
.82af						_GNEExit:
.82af		28		plp				plp
.82b0		60		rts				rts
.82b1						ProcessMouseDeltaEvent:
.82b1		a2 23		ldx #$23			ldx 	#MouseDeltaX-GNEBegin
.82b3		ad 9e 07	lda $079e			lda 	KNLEvent.mouse.delta.x
.82b6		20 07 83	jsr $8307			jsr 	PMKAdjustTotal
.82b9		20 4a 83	jsr $834a			jsr 	PMKAddSubtract
.82bc		ad 9f 07	lda $079f			lda 	KNLEvent.mouse.delta.y
.82bf		20 07 83	jsr $8307			jsr 	PMKAdjustTotal
.82c2		20 4a 83	jsr $834a			jsr 	PMKAddSubtract
.82c5		ad a0 07	lda $07a0			lda 	KNLEvent.mouse.delta.z
.82c8		20 07 83	jsr $8307			jsr 	PMKAdjustTotal
.82cb		20 4a 83	jsr $834a			jsr 	PMKAddSubtract
.82ce		ad a1 07	lda $07a1			lda 	KNLEvent.mouse.delta.buttons
.82d1		a2 35		ldx #$35			ldx 	#MouseStatusX-GNEBegin
.82d3		20 f5 82	jsr $82f5			jsr 	PMKOutputButton
.82d6		20 f5 82	jsr $82f5			jsr 	PMKOutputButton
.82d9		20 f5 82	jsr $82f5			jsr 	PMKOutputButton
.82dc		20 16 83	jsr $8316			jsr 	PMKClipMouseCoord
.82df		60		rts				rts
.82e0						ProcessMouseClickEvent:
.82e0		a2 29		ldx #$29			ldx 	#MouseCountInner-GNEBegin
.82e2		ad 9e 07	lda $079e			lda 	KNLEvent.mouse.clicks.inner
.82e5		20 4e 83	jsr $834e			jsr 	PMKAdd
.82e8		ad 9f 07	lda $079f			lda 	KNLEvent.mouse.clicks.middle
.82eb		20 4e 83	jsr $834e			jsr 	PMKAdd
.82ee		ad a0 07	lda $07a0			lda 	KNLEvent.mouse.clicks.outer
.82f1		20 4e 83	jsr $834e			jsr 	PMKAdd
.82f4		60		rts				rts
.82f5						PMKOutputButton:
.82f5		9e 5f 06	stz $065f,x			stz 	GNEBegin,x 					; button to zero
.82f8		9e 60 06	stz $0660,x			stz 	GNEBegin+1,x
.82fb		6a		ror a				ror 	a 							; shift LSB into carry
.82fc		90 06		bcc $8304			bcc 	_PMKOBExit
.82fe		de 5f 06	dec $065f,x			dec 	GNEBegin,x 					; if set then set to -1
.8301		de 60 06	dec $0660,x			dec 	GNEBegin+1,x
.8304						_PMKOBExit:
.8304		e8		inx				inx  								; next button
.8305		e8		inx				inx
.8306		60		rts				rts
.8307						PMKAdjustTotal:
.8307		48		pha				pha 								; save offset A index X
.8308		da		phx				phx
.8309		48		pha				pha 								; point X to the position
.830a		8a		txa				txa
.830b		18		clc				clc
.830c		69 0c		adc #$0c			adc 	#MousePosX-MouseDeltaX
.830e		aa		tax				tax
.830f		68		pla				pla
.8310		20 4a 83	jsr $834a			jsr 	PMKAddSubtract 				; reuse the addition code.
.8313		fa		plx				plx 								; restore XA
.8314		68		pla				pla
.8315		60		rts				rts
.8316						PMKClipMouseCoord:
.8316		a2 00		ldx #$00			ldx 	#0
.8318						_PCMCLoop:
.8318		bd 8f 06	lda $068f,x			lda 	MousePosX+1,x 				; check if -ve
.831b		10 06		bpl $8323			bpl 	_PCMCNotNeg
.831d		9e 8e 06	stz $068e,x			stz 	MousePosX,x 				; if so zero position.
.8320		9e 8f 06	stz $068f,x			stz 	MousePosX+1,x
.8323						_PCMCNotNeg:
.8323		bd 8e 06	lda $068e,x			lda 	MousePosX,x 				; compare pos vs extent
.8326		dd 44 83	cmp $8344,x			cmp 	_PCMCExtent,x
.8329		bd 8f 06	lda $068f,x			lda 	MousePosX+1,x
.832c		fd 45 83	sbc $8345,x			sbc 	_PCMCExtent+1,x
.832f		90 0c		bcc $833d			bcc 	_PCMCNotOver 				; in range ?
.8331		bd 44 83	lda $8344,x			lda 	_PCMCExtent,x 				; no, set to X limit.
.8334		9d 8e 06	sta $068e,x			sta 	MousePosX,x
.8337		bd 45 83	lda $8345,x			lda 	_PCMCExtent+1,x
.833a		9d 8f 06	sta $068f,x			sta 	MousePosX+1,x
.833d						_PCMCNotOver:
.833d		e8		inx				inx
.833e		e8		inx				inx
.833f		e0 06		cpx #$06			cpx 	#3*2
.8341		d0 d5		bne $8318			bne 	_PCMCLoop
.8343		60		rts				rts
.8344						_PCMCExtent:
>8344		3f 01 ef 00 ff 00				.word 	319,239,255
.834a						PMKAddSubtract:
.834a		c9 00		cmp #$00			cmp 	#0 							; subtracting ?
.834c		30 0e		bmi $835c			bmi 	PMKSubtract
.834e						PMKAdd:
.834e		18		clc				clc
.834f		7d 5f 06	adc $065f,x			adc 	GNEBegin,x
.8352		9d 5f 06	sta $065f,x			sta 	GNEBegin,x
.8355		90 14		bcc $836b			bcc 	PMKExit
.8357		fe 60 06	inc $0660,x			inc 	GNEBegin+1,x
.835a		80 0f		bra $836b			bra 	PMKExit
.835c						PMKSubtract:
.835c		18		clc				clc
.835d		7d 5f 06	adc $065f,x			adc 	GNEBegin,x
.8360		9d 5f 06	sta $065f,x			sta 	GNEBegin,x
.8363		bd 60 06	lda $0660,x			lda 	GNEBegin+1,x
.8366		69 ff		adc #$ff			adc 	#$FF
.8368		9d 60 06	sta $0660,x			sta 	GNEBegin+1,x
.836b						PMKExit:
.836b		e8		inx				inx 								; next slot ?
.836c		e8		inx				inx
.836d		60		rts				rts
.836e						ProcessKeyboardEvent:
.836e		ad 9f 07	lda $079f			lda 	KNLEvent.key.raw 			; raw key code.
.8371		20 ac 83	jsr $83ac			jsr 	KeyboardConvertXA  			; convert to index in X, mask in A
.8374		ac 9b 07	ldy $079b			ldy 	KNLEvent.type
.8377		c0 0a		cpy #$0a			cpy 	#kernel.event.key.RELEASED 	; check if pressed/released
.8379		f0 07		beq $8382			beq 	_PKERelease
.837b		1d 60 06	ora $0660,x			ora 	KeyStatus,x 				; set bit
.837e		9d 60 06	sta $0660,x			sta 	KeyStatus,x
.8381		60		rts				rts
.8382						_PKERelease:
.8382		49 ff		eor #$ff			eor 	#$FF						; clear bit
.8384		3d 60 06	and $0660,x			and 	KeyStatus,x
.8387		9d 60 06	sta $0660,x			sta 	KeyStatus,x
.838a		60		rts				rts
.838b						UpdateKeyboardJoystick:
.838b		9c 81 06	stz $0681			stz 	KeyJoystick
.838e		a2 00		ldx #$00			ldx 	#0
.8390						_UKJLoop:
.8390		bd a7 83	lda $83a7,x			lda 	_UKJKeys,x 					; which key
.8393		29 1f		and #$1f			and 	#$1F
.8395		a8		tay				tay
.8396		b9 60 06	lda $0660,y			lda 	KeyStatus,y 				; get status
.8399		29 10		and #$10			and 	#$10 						; letters always bit 4 (actually ASCII of L/C)
.839b		18		clc				clc  								; set C if bit set
.839c		69 ff		adc #$ff			adc 	#$FF
.839e		2e 81 06	rol $0681			rol 	KeyJoystick 				; shift into place
.83a1		e8		inx				inx
.83a2		e0 05		cpx #$05			cpx 	#5 							; do all 5
.83a4		d0 ea		bne $8390			bne 	_UKJLoop
.83a6		60		rts				rts
.83a7						_UKJKeys:
>83a7		4c 58 5a 4d 4b					.byte	'L','X','Z','M','K'
.83ac						KeyboardConvertXA:
.83ac		a2 01		ldx #$01			ldx 	#1 							; set the mask temp to %00000001
.83ae		8e 80 06	stx $0680			stx 	KeyMaskTemp
.83b1						_KCCALoop:
.83b1		18		clc				clc
.83b2		69 20		adc #$20			adc 	#$20 						; upper 3 bits are the mask, if causes CS A will be in the range 00-1F
.83b4		b0 05		bcs $83bb			bcs 	_KCCADone
.83b6		0e 80 06	asl $0680			asl 	KeyMaskTemp 				; shift the mask temp
.83b9		80 f6		bra $83b1			bra 	_KCCALoop
.83bb						_KCCADone:
.83bb		aa		tax				tax 								; table entry in X
.83bc		ad 80 06	lda $0680			lda 	KeyMaskTemp 				; mask temp in A.
.83bf		60		rts				rts
.065f						GNEBegin:
.065f						CMDMouseFlag:
>065f								.fill 	1
.0660						KeyStatus:
>0660								.fill 	32
.0680						KeyMaskTemp:
>0680								.fill 	1
.0681						KeyJoystick:
>0681								.fill 	1
.0682						MouseDeltaX:
>0682								.fill 	2
.0684						MouseDeltaY:
>0684								.fill 	2
.0686						MouseDeltaZ:
>0686								.fill 	2
.0688						MouseCountInner:
>0688								.fill 	2
.068a						MouseCountMiddle:
>068a								.fill 	2
.068c						MouseCountOuter:
>068c								.fill 	2
.068e						MousePosX:
>068e								.fill 	2
.0690						MousePosY:
>0690								.fill 	2
.0692						MousePosZ:
>0692								.fill 	2
.0694						MouseStatusX:
>0694								.fill 	2
.0696						MouseStatusY:
>0696								.fill 	2
.0698						MouseStatusZ:
>0698								.fill 	2
.069a						GNEEnd:

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/ab.system/wrapper.asm

=56						KERR_GENERAL = kernel.event.file.ERROR 		; Event $38
=50						KERR_CLOSED = kernel.event.file.CLOSED 		; Event $32
=40						KERR_NOTFOUND = kernel.event.file.NOT_FOUND ; Event $28
=48						KERR_EOF = kernel.event.file.EOF 			; Event $30
=64						KNLReadBufferLen = 64 								; read buffer size.
.83c0						KNLSetDrive:
.83c0		8d 9a 07	sta $079a			sta 	KNLDefaultDrive
.83c3		60		rts				rts
.83c4						KNLOpenFileWrite:
.83c4		48		pha				pha
.83c5		a9 01		lda #$01			lda 	#kernel.args.file.open.WRITE
.83c7		80 03		bra $83cc			bra 	KNLOpenStart
.83c9						KNLOpenFileRead:
.83c9		48		pha				pha
.83ca		a9 00		lda #$00			lda     #kernel.args.file.open.READ ; set READ mode.
.83cc						KNLOpenStart:
.83cc		85 f5		sta $f5				sta     kernel.args.file.open.mode
.83ce		68		pla				pla
.83cf		20 0a 84	jsr $840a			jsr 	KNLSetupFileName
.83d2		20 ff 83	jsr $83ff			jsr 	KNLSetEventPointer
.83d5		ad 9a 07	lda $079a			lda 	KNLDefaultDrive 			; currently drive zero only.
.83d8		85 f3		sta $f3				sta 	kernel.args.file.open.drive
.83da		20 5c ff	jsr $ff5c			jsr     kernel.File.Open 			; open the file and exit.
.83dd		a9 38		lda #$38			lda     #kernel.event.file.ERROR
.83df		b0 1d		bcs $83fe			bcs     _out
.83e1						_loop
.83e1		20 0c ff	jsr $ff0c			jsr     kernel.Yield    			; event wait
.83e4		20 80 82	jsr $8280			jsr     GetNextEvent
.83e7		b0 f8		bcs $83e1			bcs     _loop
.83e9		ad 9b 07	lda $079b			lda 	KNLEvent.type
.83ec		c9 2a		cmp #$2a			cmp     #kernel.event.file.OPENED
.83ee		f0 0a		beq $83fa			beq 	_success
.83f0		c9 28		cmp #$28			cmp     #kernel.event.file.NOT_FOUND
.83f2		f0 0a		beq $83fe			beq 	_out
.83f4		c9 38		cmp #$38			cmp     #kernel.event.file.ERROR
.83f6		f0 06		beq $83fe			beq 	_out
.83f8		80 e7		bra $83e1			bra     _loop
.83fa						_success
.83fa		ad 9e 07	lda $079e			lda     KNLEvent.file.stream
.83fd		18		clc				clc
.83fe						_out
.83fe		60		rts				rts
.83ff						KNLSetEventPointer:
.83ff		48		pha				pha
.8400		a9 9b		lda #$9b			lda     #KNLEvent & $FF 			; tell kernel where to store event data
.8402		85 f0		sta $f0				sta     kernel.args.events+0
.8404		a9 07		lda #$07			lda     #KNLEvent >> 8
.8406		85 f1		sta $f1				sta     kernel.args.events+1
.8408		68		pla				pla
.8409		60		rts				rts
.840a						KNLSetupFileName:
.840a		5a		phy				phy 								; save Y on stack
.840b		85 36		sta $36				sta 	zTemp0 						; save filename position in temp, and in kenrel slot
.840d		86 37		stx $37				stx 	zTemp0+1
.840f		85 fb		sta $fb				sta     kernel.args.file.open.fname+0
.8411		86 fc		stx $fc				stx     kernel.args.file.open.fname+1
.8413		a0 ff		ldy #$ff			ldy 	#$FF 						; get the filename length => Kernel slot
.8415						_KNLGetLength:
.8415		c8		iny				iny
.8416		b1 36		lda ($36),y			lda 	(zTemp0),y
.8418		d0 fb		bne $8415			bne 	_KNLGetLength
.841a		84 fd		sty $fd				sty 	kernel.args.file.open.fname_len
.841c		7a		ply				ply
.841d		60		rts				rts
.841e						KNLReadBlock:
.841e		85 f3		sta $f3				sta     kernel.args.file.read.stream
.8420		86 f4		stx $f4				stx     kernel.args.file.read.buflen
.8422		20 60 ff	jsr $ff60			jsr     kernel.File.Read 			; read request
.8425		a9 38		lda #$38			lda     #kernel.event.file.ERROR    ; Kernel out of events/buffers; shouldn't happen
.8427		b0 2e		bcs $8457			bcs     _KGNBExitFail               ; report as general error
.8429						_KGRBEventLoop:
.8429		20 0c ff	jsr $ff0c			jsr     kernel.Yield    			; event wait
.842c		20 80 82	jsr $8280			jsr     GetNextEvent
.842f		b0 f8		bcs $8429			bcs     _KGRBEventLoop
.8431		ad 9b 07	lda $079b			lda 	KNLEvent.type 				; get event
.8434		c9 2c		cmp #$2c			cmp     #kernel.event.file.DATA 	; data, return data
.8436		f0 0a		beq $8442			beq     _KNLRBGetNextByte
.8438		c9 38		cmp #$38			cmp     #kernel.event.file.ERROR  	; errors on file i/o, return as appropriate.
.843a		f0 1b		beq $8457			beq 	_KGNBExitFail
.843c		c9 30		cmp #$30			cmp     #kernel.event.file.EOF
.843e		f0 17		beq $8457			beq 	_KGNBExitFail
.8440		80 e7		bra $8429			bra 	_KGRBEventLoop
.8442						_KNLRBGetNextByte:
.8442		a9 9a		lda #$9a			lda     #<KNLReadBuffer 			; Set the target buffer
.8444		85 fb		sta $fb				sta     kernel.args.recv.buf+0
.8446		a9 06		lda #$06			lda     #>KNLReadBuffer
.8448		85 fc		sta $fc				sta     kernel.args.recv.buf+1
.844a		ad a1 07	lda $07a1			lda     KNLEvent.file.data.read 	; Set the target length
.844d		85 fd		sta $fd				sta     kernel.args.recv.buflen
.844f		20 04 ff	jsr $ff04			jsr     kernel.ReadData		       	; Get the data from the kernel  (Synchronous call, no error)
.8452		ad a1 07	lda $07a1			lda     KNLEvent.file.data.read 	; Return # of bytes read (in A)
.8455		18		clc				clc
.8456		60		rts				rts
.8457						_KGNBExitFail:
.8457		38		sec				sec
.8458		60		rts				rts
.8459						KNLWriteBlock:
.8459		da		phx				phx
.845a		5a		phy				phy
.845b		85 f3		sta $f3				sta     kernel.args.file.write.stream ; save the stream.
.845d		a5 36		lda $36				lda     zTemp0 						; save the data location.
.845f		85 fb		sta $fb				sta     kernel.args.file.write.buf+0
.8461		a5 37		lda $37				lda     zTemp0+1
.8463		85 fc		sta $fc				sta     kernel.args.file.write.buf+1
.8465		86 fd		stx $fd				stx     kernel.args.file.write.buflen ; Set the buffer length
.8467		20 64 ff	jsr $ff64			jsr     kernel.File.Write 			; write it out.
.846a		a9 38		lda #$38			lda 	#kernel.event.file.ERROR 	; in case it fails.
.846c		b0 21		bcs $848f			bcs 	_KWBFailed
.846e						_KNLWLoop:
.846e		20 0c ff	jsr $ff0c			jsr     kernel.Yield
.8471		20 80 82	jsr $8280			jsr     GetNextEvent
.8474		b0 f8		bcs $846e			bcs     _KNLWLoop
.8476		ad 9b 07	lda $079b			lda     KNLEvent.type 				; various errors.
.8479		c9 32		cmp #$32			cmp     #kernel.event.file.CLOSED
.847b		f0 12		beq $848f			beq 	_KWBFailed
.847d		c9 38		cmp #$38			cmp     #kernel.event.file.ERROR
.847f		f0 0e		beq $848f			beq 	_KWBFailed
.8481		c9 30		cmp #$30			cmp     #kernel.event.file.EOF
.8483		f0 0a		beq $848f			beq 	_KWBFailed
.8485		c9 2e		cmp #$2e			cmp     #kernel.event.file.WROTE 	; wait until block write succeeds
.8487		d0 e5		bne $846e			bne 	_KNLWLoop
.8489		18		clc				clc
.848a		ad a1 07	lda $07a1			lda    KNLEvent.file.wrote.wrote 	; get bytes written.
.848d		80 01		bra $8490			bra 	_KWBExit
.848f						_KWBFailed:
.848f		38		sec				sec
.8490						_KWBExit:
.8490		7a		ply				ply
.8491		fa		plx				plx
.8492		60		rts				rts
.8493						KNLCloseFile:
.8493		85 f3		sta $f3				sta     kernel.args.file.close.stream
.8495		20 68 ff	jsr $ff68			jsr     kernel.File.Close
.8498		60		rts				rts
.8499						KNLReadController:
.8499		da		phx				phx
.849a		a6 01		ldx $01				ldx 	1 							; save current I/O in X
.849c		64 01		stz $01				stz 	1 							; switch to I/O 0
.849e		ad 00 dc	lda $dc00			lda 	$DC00  						; read VIA register
.84a1		49 ff		eor #$ff			eor 	#$FF 						; make active '1'
.84a3		0d 81 06	ora $0681			ora 	KeyJoystick 				; use key joystick.
.84a6		86 01		stx $01				stx 	1 							; repair old I/O and exit
.84a8		fa		plx				plx
.84a9		60		rts				rts
.069a						KNLReadBuffer:
>069a								.fill   256
.079a						KNLDefaultDrive:
>079a								.byte 	?
.079b						KNLEvent
>079b						type        .byte   ?   ; Enum above
>079c						buf         .byte   ?   ; page id or zero
>079d						ext         .byte   ?   ; page id or zero
.079e						key
>079e						keyboard    .byte   ?   ; Keyboard ID
>079f						raw         .byte   ?   ; Raw key ID
>07a0						ascii       .byte   ?   ; ASCII value
>07a1						flags       .byte   ?   ; Flags (META)
=$80						META        = $80       ; Meta key; no associated ASCII value.
.079e						mouse
.079e						delta
>079e						x           .byte   ?
>079f						y           .byte   ?
>07a0						z           .byte   ?
>07a1						buttons     .byte   ?
.079e						clicks
>079e						inner       .byte   ?
>079f						middle      .byte   ?
>07a0						outer       .byte   ?
.079e						joystick
>079e						joy0        .byte   ?
>079f						joy1        .byte   ?
.079e						udp
>079e						token       .byte   ?   ; TODO: break out into fields
.079e						tcp
>079e						len         .byte   ?   ; Raw packet length.
.079e						file
>079e						stream      .byte   ?
>079f						cookie      .byte   ?
.07a0						data
>07a0						requested   .byte   ?   ; Requested number of bytes to read
>07a1						read        .byte   ?   ; Number of bytes actually read
.07a0						wrote
>07a0						requested   .byte   ?   ; Requested number of bytes to read
>07a1						wrote       .byte   ?   ; Number of bytes actually read
.079e						directory
>079e						stream      .byte   ?
>079f						cookie      .byte   ?
.07a0						volume
>07a0						len         .byte   ?   ; Length of volname (in buf)
>07a1						flags       .byte   ?   ; block size, text encoding
.07a0						file
>07a0						len         .byte   ?
>07a1						flags       .byte   ?   ; block scale, text encoding, approx size
.07a0						free
>07a0						flags       .byte   ?   ; block scale, text encoding, approx size

;******  Return to file: _basic.asm


;******  Processing file: ./common/api/api.asm

>ff00						NextEvent   .fill   4   ; Copy the next event into user-space.
>ff04						ReadData    .fill   4   ; Copy primary bulk event data into user-space
>ff08						ReadExt     .fill   4   ; Copy secondary bolk event data into user-space
>ff0c						Yield       .fill   4   ; Give unused time to the kernel.
>ff10						Putch       .fill   4   ; deprecated
>ff14						RunBlock    .fill   4   ; Chain to resident program by block ID.
>ff18						RunNamed    .fill   4   ; Chain to resident program by name.
>ff1c						            .fill   4   ; reserved
>ff20						List        .fill   4   ; Returns a bit-set of available block-accessible devices.
>ff24						GetName     .fill   4   ; Gets the hardware level name of the given block device or media.
>ff28						GetSize     .fill   4   ; Get the number of raw sectors (48 bits) for the given device
>ff2c						Read        .fill   4   ; Read a raw sector (48 bit LBA)
>ff30						Write       .fill   4   ; Write a raw sector (48 bit LBA)
>ff34						Format      .fill   4   ; Perform a low-level format if the media support it.
>ff38						Export      .fill   4   ; Update the FileSystem table with the partition table (if present).
>ff3c						List        .fill   4   ; Returns a bit-set of available logical devices.
>ff40						GetSize     .fill   4   ; Get the size of the partition or logical device in sectors.
>ff44						MkFS        .fill   4   ; Creates a new file-system on the logical device.
>ff48						CheckFS     .fill   4   ; Checks the file-system for errors and corrects them.
>ff4c						Mount       .fill   4   ; Mark the file-system as available for File and Directory operations.
>ff50						Unmount     .fill   4   ; Mark the file-system as unavailable for File and Directory operations.
>ff54						ReadBlock   .fill   4   ; Read a partition-local raw sector on an unmounted device.
>ff58						WriteBlock  .fill   4   ; Write a partition-local raw sector on an unmounted device.
>ff5c						Open        .fill   4   ; Open the given file for read, create, or append.
>ff60						Read        .fill   4   ; Request bytes from a file opened for reading.
>ff64						Write       .fill   4   ; Write bytes to a file opened for create or append.
>ff68						Close       .fill   4   ; Close an open file.
>ff6c						Rename      .fill   4   ; Rename a closed file.
>ff70						Delete      .fill   4   ; Delete a closed file.
>ff74						Open        .fill   4   ; Open a directory for reading.
>ff78						Read        .fill   4   ; Read a directory entry; may also return VOLUME and FREE events.
>ff7c						Close       .fill   4   ; Close a directory once finished reading.
>ff80						MkDir       .fill   4   ; Create a directory
>ff84						RmDir       .fill   4   ; Delete a directory
>ff88						            .fill   4   ; call gate
>ff8c						GetIP       .fill   4   ; Get the local IP address.
>ff90						SetIP       .fill   4   ; Set the local IP address.
>ff94						GetDNS      .fill   4   ; Get the configured DNS IP address.
>ff98						SetDNS      .fill   4   ; Set the configured DNS IP address.
>ff9c						SendICMP    .fill   4
>ffa0						Match       .fill   4
>ffa4						Init        .fill   4
>ffa8						Send        .fill   4
>ffac						Recv        .fill   4
>ffb0						Open        .fill   4
>ffb4						Accept      .fill   4
>ffb8						Reject      .fill   4
>ffbc						Send        .fill   4
>ffc0						Recv        .fill   4
>ffc4						Close       .fill   4
>ffc8						Reset       .fill   4   ; Re-init the display
>ffcc						GetSize     .fill   4   ; Returns rows/cols in kernel args.
>ffd0						DrawRow     .fill   4   ; Draw text/color buffers left-to-right
>ffd4						DrawColumn  .fill   4   ; Draw text/color buffers top-to-bottom
>ffd8						GetTime     .fill   4
>ffdc						SetTime     .fill   4
>ffe0						GetSysInfo  .fill   4
>ffe4						SetBPS      .fill   4   ; Set the serial BPS (should match the SLIP router's speed).
.00f0						args
.00f0						events
>00f0						dest        .word       ?   ; GetNextEvent copies event data here
>00f2						pending     .byte       ?   ; Negative count of pending events
.00f3						end
.00f3						run
>00f3						block_id    .byte   ?
.00f3						recv
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.00f3						fs
.00f3						format
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.00f3						mkfs
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.00f3						file
.00f3						open
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>00f5						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.00f3						read
>00f3						stream      .byte       ?
>00f4						buflen      .byte       ?
.00f3						write
>00f3						stream      .byte       ?
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.00f3						close
>00f3						stream      .byte       ?
.00f3						rename
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						old         = args.buf
=$fd						old_len     = args.buflen
=$f8						new         = args.ext
=$fa						new_len     = args.extlen
.00f3						delete
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>00f5						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.00f3						directory
.00f3						open
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						path        = args.buf
=$fd						path_len    = args.buflen
.00f3						read
>00f3						stream      .byte       ?
>00f4						buflen      .byte       ?
.00f3						close
>00f3						stream      .byte       ?
.00f3						display
>00f3						x           .byte       ?   ; coordinate or size
>00f4						y           .byte       ?   ; coordinate or size
=$fb						text        = args.buf      ; text
=$f8						color       = args.ext      ; color
=$fb						buf         = args.buf      ; deprecated
=$f8						buf2        = args.ext      ; deprecated
=$fd						buflen      = args.buflen
.00f3						net
=$fb						socket      = args.buf
>00f3						src_port    .word       ?
>00f5						dest_port   .word       ?
>00f7						dest_ip     .fill       4
>00f3						accepted    .byte       ?
=$f8						buf         = args.ext
=$fa						buflen      = args.extlen
=$f8						ext         = $f8
=$fa						extlen      = $fa
=$fb						buf         = $fb
=$fd						buflen      = $fd
=$fe						ptr         = $fe
.0000						args_t
.0000						events
>0000						dest        .word       ?   ; GetNextEvent copies event data here
>0002						pending     .byte       ?   ; Negative count of pending events
.0003						end
.0003						run
>0003						block_id    .byte   ?
.0003						recv
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0003						fs
.0003						format
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0003						mkfs
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0003						file
.0003						open
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0005						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0003						read
>0003						stream      .byte       ?
>0004						buflen      .byte       ?
.0003						write
>0003						stream      .byte       ?
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0003						close
>0003						stream      .byte       ?
.0003						rename
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						old         = args.buf
=$fd						old_len     = args.buflen
=$f8						new         = args.ext
=$fa						new_len     = args.extlen
.0003						delete
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0005						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0003						directory
.0003						open
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						path        = args.buf
=$fd						path_len    = args.buflen
.0003						read
>0003						stream      .byte       ?
>0004						buflen      .byte       ?
.0003						close
>0003						stream      .byte       ?
.0003						display
>0003						x           .byte       ?   ; coordinate or size
>0004						y           .byte       ?   ; coordinate or size
=$fb						text        = args.buf      ; text
=$f8						color       = args.ext      ; color
=$fb						buf         = args.buf      ; deprecated
=$f8						buf2        = args.ext      ; deprecated
=$fd						buflen      = args.buflen
.0003						net
=$fb						socket      = args.buf
>0003						src_port    .word       ?
>0005						dest_port   .word       ?
>0007						dest_ip     .fill       4
>0003						accepted    .byte       ?
=$f8						buf         = args.ext
=$fa						buflen      = args.extlen
=$f8						ext         = $f8
=$fa						extlen      = $fa
=$fb						buf         = $fb
=$fd						buflen      = $fd
=$fe						ptr         = $fe
.0000						event_t
>0000						dest        .word       ?   ; GetNextEvent copies event data here
>0002						pending     .byte       ?   ; Negative count of pending events
.0003						end
.0000						recv_t
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0000						run_t
>0000						block_id    .byte   ?
.0000						fs_t
.0000						format
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0000						mkfs
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0000						fs_mkfs_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0000						file_t
.0000						open
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0002						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0000						read
>0000						stream      .byte       ?
>0001						buflen      .byte       ?
.0000						write
>0000						stream      .byte       ?
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0000						close
>0000						stream      .byte       ?
.0000						rename
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						old         = args.buf
=$fd						old_len     = args.buflen
=$f8						new         = args.ext
=$fa						new_len     = args.extlen
.0000						delete
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0002						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0000						fs_open_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0002						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0000						fs_read_t
>0000						stream      .byte       ?
>0001						buflen      .byte       ?
.0000						fs_write_t
>0000						stream      .byte       ?
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0000						fs_close_t
>0000						stream      .byte       ?
.0000						fs_rename_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						old         = args.buf
=$fd						old_len     = args.buflen
=$f8						new         = args.ext
=$fa						new_len     = args.extlen
.0000						fs_delete_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fnane       = args.buf
=$fd						fname_len   = args.buflen
.0000						dir_t
.0000						open
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						path        = args.buf
=$fd						path_len    = args.buflen
.0000						read
>0000						stream      .byte       ?
>0001						buflen      .byte       ?
.0000						close
>0000						stream      .byte       ?
.0000						dir_open_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						path        = args.buf
=$fd						path_len    = args.buflen
.0000						dir_read_t
>0000						stream      .byte       ?
>0001						buflen      .byte       ?
.0000						dir_close_t
>0000						stream      .byte       ?
.0000						display_t
>0000						x           .byte       ?   ; coordinate or size
>0001						y           .byte       ?   ; coordinate or size
=$fb						text        = args.buf      ; text
=$f8						color       = args.ext      ; color
=$fb						buf         = args.buf      ; deprecated
=$f8						buf2        = args.ext      ; deprecated
=$fd						buflen      = args.buflen
.0000						net_t
=$fb						socket      = args.buf
>0000						src_port    .word       ?
>0002						dest_port   .word       ?
>0004						dest_ip     .fill       4
>0000						accepted    .byte       ?
=$f8						buf         = args.ext
=$fa						buflen      = args.extlen
>0000						            .word   ?   ; Reserved
>0002						            .word   ?   ; Deprecated
>0004						JOYSTICK    .word   ?   ; Game Controller changes.
>0006						DEVICE      .word   ?   ; Device added/removed.
>0008						PRESSED     .word   ?   ; Key pressed
>000a						RELEASED    .word   ?   ; Key released.
>000c						DELTA       .word   ?   ; Regular mouse move and button state
>000e						CLICKS      .word   ?   ; Click counts
>0010						NAME        .word   ?
>0012						SIZE        .word   ?
>0014						DATA        .word   ?   ; The read request has succeeded.
>0016						WROTE       .word   ?   ; The write request has completed.
>0018						FORMATTED   .word   ?   ; The low-level format has completed.
>001a						ERROR       .word   ?
>001c						SIZE        .word   ?
>001e						CREATED     .word   ?
>0020						CHECKED     .word   ?
>0022						DATA        .word   ?   ; The read request has succeeded.
>0024						WROTE       .word   ?   ; The write request has completed.
>0026						ERROR       .word   ?
>0028						NOT_FOUND   .word   ?   ; The file file was not found.
>002a						OPENED      .word   ?   ; The file was successfully opened.
>002c						DATA        .word   ?   ; The read request has succeeded.
>002e						WROTE       .word   ?   ; The write request has completed.
>0030						EOF         .word   ?   ; All file data has been read.
>0032						CLOSED      .word   ?   ; The close request has completed.
>0034						RENAMED     .word   ?   ; The rename request has completed.
>0036						DELETED     .word   ?   ; The delete request has completed.
>0038						ERROR       .word   ?   ; An error occured; close the file if opened.
>003a						OPENED      .word   ?   ; The directory open request succeeded.
>003c						VOLUME      .word   ?   ; A volume record was found.
>003e						FILE        .word   ?   ; A file record was found.
>0040						FREE        .word   ?   ; A file-system free-space record was found.
>0042						EOF         .word   ?   ; All data has been read.
>0044						CLOSED      .word   ?   ; The directory file has been closed.
>0046						ERROR       .word   ?   ; An error occured; user should close.
>0048						CREATED     .word   ?   ; The directory has been created.
>004a						DELETED     .word   ?   ; The directory has been deleted.
>004c						TCP         .word   ?
>004e						UDP         .word   ?
.0000						event_t
>0000						type        .byte   ?   ; Enum above
>0001						buf         .byte   ?   ; page id or zero
>0002						ext         .byte   ?   ; page id or zero
.0003						key
>0003						keyboard    .byte   ?   ; Keyboard ID
>0004						raw         .byte   ?   ; Raw key ID
>0005						ascii       .byte   ?   ; ASCII value
>0006						flags       .byte   ?   ; Flags (META)
=$80						META        = $80       ; Meta key; no associated ASCII value.
.0003						mouse
.0003						delta
>0003						x           .byte   ?
>0004						y           .byte   ?
>0005						z           .byte   ?
>0006						buttons     .byte   ?
.0003						clicks
>0003						inner       .byte   ?
>0004						middle      .byte   ?
>0005						outer       .byte   ?
.0003						joystick
>0003						joy0        .byte   ?
>0004						joy1        .byte   ?
.0003						udp
>0003						token       .byte   ?   ; TODO: break out into fields
.0003						tcp
>0003						len         .byte   ?   ; Raw packet length.
.0003						file
>0003						stream      .byte   ?
>0004						cookie      .byte   ?
.0005						data
>0005						requested   .byte   ?   ; Requested number of bytes to read
>0006						read        .byte   ?   ; Number of bytes actually read
.0005						wrote
>0005						requested   .byte   ?   ; Requested number of bytes to read
>0006						wrote       .byte   ?   ; Number of bytes actually read
.0003						directory
>0003						stream      .byte   ?
>0004						cookie      .byte   ?
.0005						volume
>0005						len         .byte   ?   ; Length of volname (in buf)
>0006						flags       .byte   ?   ; block size, text encoding
.0005						file
>0005						len         .byte   ?
>0006						flags       .byte   ?   ; block scale, text encoding, approx size
.0005						free
>0005						flags       .byte   ?   ; block scale, text encoding, approx size
.0000						key_t
>0000						keyboard    .byte   ?   ; Keyboard ID
>0001						raw         .byte   ?   ; Raw key ID
>0002						ascii       .byte   ?   ; ASCII value
>0003						flags       .byte   ?   ; Flags (META)
=$80						META        = $80       ; Meta key; no associated ASCII value.
.0000						mouse_t
.0000						delta
>0000						x           .byte   ?
>0001						y           .byte   ?
>0002						z           .byte   ?
>0003						buttons     .byte   ?
.0000						clicks
>0000						inner       .byte   ?
>0001						middle      .byte   ?
>0002						outer       .byte   ?
.0000						m_delta_t
>0000						x           .byte   ?
>0001						y           .byte   ?
>0002						z           .byte   ?
>0003						buttons     .byte   ?
.0000						m_clicks_t
>0000						inner       .byte   ?
>0001						middle      .byte   ?
>0002						outer       .byte   ?
.0000						joystick_t
>0000						joy0        .byte   ?
>0001						joy1        .byte   ?
.0000						file_t
>0000						stream      .byte   ?
>0001						cookie      .byte   ?
.0002						data
>0002						requested   .byte   ?   ; Requested number of bytes to read
>0003						read        .byte   ?   ; Number of bytes actually read
.0002						wrote
>0002						requested   .byte   ?   ; Requested number of bytes to read
>0003						wrote       .byte   ?   ; Number of bytes actually read
.0000						fs_data_t
>0000						requested   .byte   ?   ; Requested number of bytes to read
>0001						read        .byte   ?   ; Number of bytes actually read
.0000						fs_wrote_t
>0000						requested   .byte   ?   ; Requested number of bytes to read
>0001						wrote       .byte   ?   ; Number of bytes actually read
.0000						dir_t
>0000						stream      .byte   ?
>0001						cookie      .byte   ?
.0002						volume
>0002						len         .byte   ?   ; Length of volname (in buf)
>0003						flags       .byte   ?   ; block size, text encoding
.0002						file
>0002						len         .byte   ?
>0003						flags       .byte   ?   ; block scale, text encoding, approx size
.0002						free
>0002						flags       .byte   ?   ; block scale, text encoding, approx size
.0000						dir_vol_t
>0000						len         .byte   ?   ; Length of volname (in buf)
>0001						flags       .byte   ?   ; block size, text encoding
.0000						dir_file_t
>0000						len         .byte   ?
>0001						flags       .byte   ?   ; block scale, text encoding, approx size
.0000						dir_free_t
>0000						flags       .byte   ?   ; block scale, text encoding, approx size
.0000						dir_ext_t
>0000						free        .fill   6   ; blocks used/free
.0000						udp_t
>0000						token       .byte   ?   ; TODO: break out into fields
.0000						tcp_t
>0000						len         .byte   ?   ; Raw packet length.

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/assembler.asm

.84aa						AssembleGroup1:
.84aa		a9 ff		lda #$ff			lda 	#$FF 						; flag for group 1 / mask.
.84ac		8d 21 04	sta $0421			sta 	ModeMask 					; initialise the mode mask - all for all
.84af		80 02		bra $84b3			bra 	AsmGroup12
.84b1						AssembleGroup2:
.84b1		a9 00		lda #$00			lda 	#$00 						; flag for group 2
.84b3						AsmGroup12:
.84b3		8d 1f 04	sta $041f			sta 	IsGroup1 					; save the 'group 1' flag
.84b6		68		pla				pla 								; pop the return address to access the information following.
.84b7		fa		plx				plx
.84b8		20 3f 85	jsr $853f			jsr 	AccessParameters 			; get opcode and save as base
.84bb		8d 20 04	sta $0420			sta 	BaseOpcode
.84be		ad 1f 04	lda $041f			lda 	IsGroup1 					; skip if group 1 as we don't have a complex mask.
.84c1		d0 08		bne $84cb			bne 	_AG12HaveMask
.84c3		a9 02		lda #$02			lda 	#2 							; if group 2 the second parameter is the mask
.84c5		20 47 85	jsr $8547			jsr 	GetParameter		 		; e.g. which modes are supported for this operand
.84c8		8d 21 04	sta $0421			sta 	ModeMask
.84cb						_AG12HaveMask:
.84cb		20 7b 86	jsr $867b			jsr 	TypeAndCalculateOperand 	; get zero page type
.84ce		da		phx				phx 								; save found address mode
.84cf		20 ab 85	jsr $85ab			jsr 	AssembleModeX
.84d2		fa		plx				plx  								; restore address mode
.84d3		b0 0b		bcs $84e0			bcs 	_AG12Exit
.84d5		20 e1 84	jsr $84e1			jsr 	PromoteToAbsolute  			; promote ZP to ABS and try that
.84d8		20 ab 85	jsr $85ab			jsr 	AssembleModeX
.84db		b0 03		bcs $84e0			bcs 	_AG12Exit
.84dd		4c 75 a4	jmp $a475			jmp 	SyntaxError 				; can't do either, so must be wrong mode/operand.
.84e0						_AG12Exit:
.84e0		60		rts				rts
.84e1						PromoteToAbsolute:
.84e1		a9 6c		lda #$6c			lda 	#AM_ABS 					; lda xx
.84e3		e0 e4		cpx #$e4			cpx 	#AM_ZEROPAGE
.84e5		f0 19		beq $8500			beq 	_PTADo
.84e7		a9 7c		lda #$7c			lda 	#AM_ABSX 					; lda xx,X
.84e9		e0 f4		cpx #$f4			cpx 	#AM_ZEROX
.84eb		f0 13		beq $8500			beq 	_PTADo
.84ed		a9 78		lda #$78			lda 	#AM_ABSY 					; lda xx,Y
.84ef		e0 80		cpx #$80			cpx 	#AM_ZEROY
.84f1		f0 0d		beq $8500			beq 	_PTADo
.84f3		a9 01		lda #$01			lda 	#AM_INDABS 					; lda (xx) (jump)
.84f5		e0 d1		cpx #$d1			cpx 	#AM_IND
.84f7		f0 07		beq $8500			beq 	_PTADo
.84f9		a9 02		lda #$02			lda 	#AM_INDABSX 				; lda (xx,x) (jump)
.84fb		e0 c0		cpx #$c0			cpx 	#AM_INDX
.84fd		f0 01		beq $8500			beq 	_PTADo
.84ff		60		rts				rts
.8500						_PTADo:
.8500		aa		tax				tax
.8501		60		rts				rts
.8502						AssembleGroup3:
.8502		68		pla				pla 								; get parameters, which is just the opcode.
.8503		fa		plx				plx
.8504		20 3f 85	jsr $853f			jsr 	AccessParameters 			; get and output opcode
.8507		20 57 85	jsr $8557			jsr 	AssemblerWriteByte
.850a		20 df 86	jsr $86df			jsr 	CalculateOperand 			; get a 16 bit operand
.850d		a5 58		lda $58				lda 	NSMantissa0 				; calculate the offset
.850f		38		sec				sec
.8510		ed 1a 04	sbc $041a			sbc 	AssemblerAddress
.8513		48		pha				pha 								; LSB in A
.8514		a5 60		lda $60				lda 	NSMantissa1
.8516		ed 1b 04	sbc $041b			sbc 	AssemblerAddress+1
.8519		aa		tax				tax 								; MSB in X
.851a		68		pla				pla
.851b		18		clc				clc 								; $80 to easy check $80-$7F, plus 1 for offset error
.851c		69 7f		adc #$7f			adc 	#$7F
.851e		90 01		bcc $8521			bcc 	_AG3NoCarry
.8520		e8		inx				inx
.8521						_AG3NoCarry:
.8521		38		sec				sec 								; fix back and write out anyways.
.8522		e9 80		sbc #$80			sbc 	#$80
.8524		20 57 85	jsr $8557			jsr 	AssemblerWriteByte
.8527		e0 00		cpx #$00			cpx 	#0 							; was it in range
.8529		f0 0a		beq $8535			beq 	_AG3Exit
.852b		ad 1c 04	lda $041c			lda 	AssemblerControl 			; are we allowing bad values ?
.852e		29 01		and #$01			and 	#1
.8530		f0 03		beq $8535			beq 	_AG3Exit
.8532		4c 7a a4	jmp $a47a			jmp 	RangeError 					; no, branch is out of range
.8535						_AG3Exit:
.8535		60		rts				rts
.8536						AssembleGroup4:
.8536		68		pla				pla 								; pop address
.8537		fa		plx				plx
.8538		20 3f 85	jsr $853f			jsr 	AccessParameters 			; access and get first
.853b		20 57 85	jsr $8557			jsr 	AssemblerWriteByte 			; output it.
.853e		60		rts				rts
.853f						AccessParameters:
.853f		8d 1d 04	sta $041d			sta 	ParamStart
.8542		8e 1e 04	stx $041e			stx 	ParamStart+1
.8545		a9 01		lda #$01			lda 	#1
.8547						GetParameter:
.8547		5a		phy				phy
.8548		a8		tay				tay
.8549		ad 1d 04	lda $041d			lda 	ParamStart
.854c		85 36		sta $36				sta 	zTemp0
.854e		ad 1e 04	lda $041e			lda 	ParamStart+1
.8551		85 37		sta $37				sta 	zTemp0+1
.8553		b1 36		lda ($36),y			lda 	(zTemp0),y
.8555		7a		ply				ply
.8556		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/aswrite.asm

.8557						AssemblerWriteByte:
.8557		48		pha			pha
.8558		ad 1c 04	lda $041c		lda 	AssemblerControl 				; check printing bytes ?
.855b		29 02		and #$02		and 	#2
.855d		f0 1b		beq $857a		beq 	_AWBNoPrint
.855f		ad 1b 04	lda $041b		lda		AssemblerAddress+1 				; print address
.8562		20 95 85	jsr $8595		jsr 	PrintHex
.8565		ad 1a 04	lda $041a		lda		AssemblerAddress
.8568		20 95 85	jsr $8595		jsr 	PrintHex
.856b		a9 20		lda #$20		lda 	#' '
.856d		20 43 80	jsr $8043		jsr 	EXTPrintCharacter
.8570		68		pla			pla 									; print byte
.8571		48		pha			pha
.8572		20 95 85	jsr $8595		jsr 	PrintHex
.8575		a9 0d		lda #$0d		lda 	#13
.8577		20 43 80	jsr $8043		jsr 	EXTPrintCharacter
.857a						_AWBNoPrint:
.857a		ad 1a 04	lda $041a		lda		AssemblerAddress				; copy address to zTemp0
.857d		85 36		sta $36			sta 	zTemp0
.857f		ad 1b 04	lda $041b		lda		AssemblerAddress+1
.8582		f0 0e		beq $8592		beq 	_AWBRange
.8584		85 37		sta $37			sta 	zTemp0+1
.8586		68		pla			pla 									; write byte out
.8587		92 36		sta ($36)		sta 	(zTemp0)
.8589		ee 1a 04	inc $041a		inc 	AssemblerAddress 				; bump address
.858c		d0 03		bne $8591		bne 	_AWBNoCarry
.858e		ee 1b 04	inc $041b		inc 	AssemblerAddress+1
.8591						_AWBNoCarry:
.8591		60		rts			rts
.8592						_AWBRange:
.8592		4c 7a a4	jmp $a47a		jmp 	RangeError
.8595						PrintHex:
.8595		48		pha				pha
.8596		4a		lsr a				lsr 	a
.8597		4a		lsr a				lsr 	a
.8598		4a		lsr a				lsr 	a
.8599		4a		lsr a				lsr 	a
.859a		20 9e 85	jsr $859e			jsr 	_PrintNibble
.859d		68		pla				pla
.859e						_PrintNibble:
.859e		29 0f		and #$0f			and 	#15
.85a0		c9 0a		cmp #$0a			cmp 	#10
.85a2		90 02		bcc $85a6			bcc 	_NoShift
.85a4		69 06		adc #$06			adc 	#6
.85a6						_NoShift:
.85a6		69 30		adc #$30			adc 	#48
.85a8		4c 43 80	jmp $8043			jmp 	EXTPrintCharacter

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/instruction.asm

.85ab						AssembleModeX:
.85ab		5a		phy				phy
.85ac		ad 1f 04	lda $041f			lda 	IsGroup1
.85af		f0 17		beq $85c8			beq 	_AMXGroup2
.85b1		8a		txa				txa 							; is it in group # 1
.85b2		29 40		and #$40			and 	#AM_ISG1
.85b4		f0 4d		beq $8603			beq 	_AMXFail 				; no, give up.
.85b6		8a		txa				txa 							; get back.
.85b7		29 1f		and #$1f			and 	#$1F 					; this is now the offset.
.85b9		e0 e0		cpx #$e0			cpx 	#AM_IMMEDIATE 			; if not immediate, we can continue.
.85bb		d0 22		bne $85df			bne 	_AMXHaveInfo
.85bd		ad 20 04	lda $0420			lda 	BaseOpcode 				; cannot store immediate.
.85c0		c9 81		cmp #$81			cmp 	#$81
.85c2		f0 3f		beq $8603			beq 	_AMXFail
.85c4		a9 08		lda #$08			lda 	#8 						; if immediate we use offset 8.
.85c6		80 17		bra $85df			bra 	_AMXHaveInfo 			; odd design decision there.
.85c8						_AMXGroup2:
.85c8		8a		txa				txa 							; is it in group 2 ?
.85c9		29 20		and #$20			and 	#AM_ISG2
.85cb		f0 36		beq $8603			beq 	_AMXFail 				; no, give up.
.85cd		8a		txa				txa 							; get the offset into Y
.85ce		29 1f		and #$1f			and 	#$1F
.85d0		4a		lsr a				lsr 	a 						; make it 0-7.
.85d1		4a		lsr a				lsr  	a
.85d2		a8		tay				tay
.85d3		ad 21 04	lda $0421			lda 	ModeMask 				; shift the modemask left so you can check it against the requested offset
.85d6						_AMXCheckOkay:
.85d6		0a		asl a				asl 	a 						; shift modemask left enough times to check legitimate.
.85d7		88		dey				dey
.85d8		10 fc		bpl $85d6			bpl 	_AMXCheckOkay
.85da		90 27		bcc $8603			bcc 	_AMXFail 				; not allowed.
.85dc		8a		txa				txa  							; get mask back
.85dd		29 1f		and #$1f			and 	#$1F
.85df						_AMXHaveInfo:
.85df		e0 00		cpx #$00			cpx 	#$00 					; does it *require* an 8 bit operand
.85e1		10 04		bpl $85e7			bpl 	_AMXAnySize 			; checking bit 7, the zero page opcode flag.
.85e3		a4 60		ldy $60				ldy 	NSMantissa1 			; fail if it is outside range, e.g. the MSB is set.
.85e5		d0 1c		bne $8603			bne 	_AMXFail
.85e7						_AMXAnySize:
.85e7		18		clc				clc 							; add offset to the base opcode
.85e8		6d 20 04	adc $0420			adc 	BaseOpcode
.85eb						_AMXOutputCode:
.85eb		20 57 85	jsr $8557			jsr 	AssemblerWriteByte 		; write the opcode out.
.85ee		e0 28		cpx #$28			cpx 	#AM_ACC 				; A mode (e.g. ASL)
.85f0		f0 0e		beq $8600			beq 	_AMXExit
.85f2		a5 58		lda $58				lda 	NSMantissa0 			; write LSB operand
.85f4		20 57 85	jsr $8557			jsr 	AssemblerWriteByte
.85f7		e0 00		cpx #$00			cpx 	#$00 					; zeropage ?
.85f9		30 05		bmi $8600			bmi 	_AMXExit
.85fb		a5 60		lda $60				lda 	NSMantissa1 			; write MSB operand
.85fd		20 57 85	jsr $8557			jsr 	AssemblerWriteByte
.8600						_AMXExit:
.8600		7a		ply				ply
.8601		38		sec				sec
.8602		60		rts				rts
.8603						_AMXFail:
.8603		a0 00		ldy #$00			ldy 	#0
.8605						_AMXCheckOddities:
.8605		8a		txa				txa
.8606		d9 2d 86	cmp $862d,y			cmp 	ExtraOpcode+2,y 		; match address mode
.8609		d0 15		bne $8620			bne 	_AMXCONext
.860b		b9 2b 86	lda $862b,y			lda 	ExtraOpcode+0,y 		; do the base opcodes match
.860e		cd 20 04	cmp $0420			cmp 	BaseOpcode
.8611		d0 0d		bne $8620			bne 	_AMXCONext
.8613		e0 00		cpx #$00			cpx 	#$00 					; requires zero page ?
.8615		10 04		bpl $861b			bpl 	_AMXCONotZero
.8617		a5 60		lda $60				lda 	NSMantissa1
.8619		d0 05		bne $8620			bne 	_AMXCONext
.861b						_AMXCONotZero:
.861b		b9 2c 86	lda $862c,y			lda 	ExtraOpcode+1,y 		; get new opcode
.861e		80 cb		bra $85eb			bra 	_AMXOutputCode 			; and assemble it
.8620						_AMXCONext:
.8620		c8		iny				iny
.8621		c8		iny				iny
.8622		c8		iny				iny
.8623		b9 2b 86	lda $862b,y			lda 	ExtraOpcode+0,y 		; end of table
.8626		d0 dd		bne $8605			bne 	_AMXCheckOddities
.8628						_AMXCOFail:
.8628		7a		ply				ply
.8629		18		clc				clc
.862a		60		rts				rts
.862b						ExtraOpcode:
>862b		40 6c 01					.byte $40,$6c,AM_INDABS 	; jump
>862e		40 7c 02					.byte $40,$7C,AM_INDABSX 	; jump
>8631		a2 be 78					.byte $a2,$BE,AM_ABSY 		; ldx
>8634		a2 b6 80					.byte $a2,$B6,AM_ZEROY 		; ldx
>8637		82 96 80					.byte $82,$96,AM_ZEROY 		; stx
>863a		e2 1a 28					.byte $e2,$1a,AM_ACC 		; inc
>863d		c2 3a 28					.byte $c2,$3a,AM_ACC 		; dec
>8640		20 89 e0					.byte $20,$89,AM_IMMEDIATE 	; bit
>8643		60 9c 6c					.byte $60,$9c,AM_ABS 		; stz
>8646		60 9e 7c					.byte $60,$9e,AM_ABSX 		; stz
>8649		00						.byte $00

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/label.asm

.864a						LabelHere:
.864a		c8		iny				iny 								; skip .
.864b		a2 00		ldx #$00			ldx 	#0 							; get a term
.864d		20 f1 9c	jsr $9cf1			jsr 	EvaluateTerm
.8650		a5 50		lda $50				lda 	NSStatus 					; needs to be an integer reference.
.8652		c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.8654		d0 22		bne $8678			bne 	_ALType 					; otherwise typing error
.8656		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy reference address to zTemp0
.8658		85 36		sta $36				sta 	zTemp0 						; (e.g. where we store the address)
.865a		b5 60		lda $60,x			lda 	NSMantissa1,x
.865c		85 37		sta $37				sta 	zTemp0+1
.865e		5a		phy				phy 								; copy address in (64k)
.865f		a0 01		ldy #$01			ldy 	#1
.8661		ad 1a 04	lda $041a			lda	 	AssemblerAddress
.8664		92 36		sta ($36)			sta 	(zTemp0)
.8666		ad 1b 04	lda $041b			lda	 	AssemblerAddress+1
.8669		91 36		sta ($36),y			sta 	(zTemp0),y
.866b		c8		iny				iny
.866c		a9 00		lda #$00			lda 	#0 							; zero the rest.
.866e		91 36		sta ($36),y			sta 	(zTemp0),y
.8670		c8		iny				iny
.8671		91 36		sta ($36),y			sta 	(zTemp0),y
.8673		c8		iny				iny
.8674		91 36		sta ($36),y			sta 	(zTemp0),y
.8676		7a		ply				ply
.8677		60		rts				rts
.8678						_ALType:
.8678		4c 7f a4	jmp $a47f			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/operands.asm

.867b						TypeAndCalculateOperand:
.867b		b1 30		lda ($30),y			lda 	(codePtr),y
.867d		a2 28		ldx #$28			ldx 	#AM_ACC 					; ACC if : or EOL
.867f		c9 3a		cmp #$3a			cmp 	#KWD_COLON
.8681		f0 5b		beq $86de			beq 	_TACOExit
.8683		c9 80		cmp #$80			cmp 	#KWC_EOL
.8685		f0 57		beq $86de			beq 	_TACOExit
.8687		c8		iny				iny
.8688		a2 e0		ldx #$e0			ldx 	#AM_IMMEDIATE
.868a		c9 23		cmp #$23			cmp 	#KWD_HASH 					; if hash, then immediate - constant.
.868c		f0 51		beq $86df			beq 	CalculateOperand
.868e		c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; if ( then check for indirection
.8690		f0 1f		beq $86b1			beq 	_TACOIndirect
.8692		88		dey				dey 								; undo get of first character
.8693		20 df 86	jsr $86df			jsr 	CalculateOperand 			; get operand
.8696		b1 30		lda ($30),y			lda 	(codePtr),y
.8698		a2 e4		ldx #$e4			ldx 	#AM_ZEROPAGE 				; if not, try zero page (then absolute)
.869a		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.869c		d0 40		bne $86de			bne 	_TACOExit
.869e		c8		iny				iny
.869f		20 e9 86	jsr $86e9			jsr 	TACOCheckXY 				; extract X,Y or 0 (neither) from the variable.
.86a2		a2 f4		ldx #$f4			ldx 	#AM_ZEROX 					; check for X
.86a4		c9 58		cmp #$58			cmp 	#'X'
.86a6		f0 36		beq $86de			beq 	_TACOExit
.86a8		a2 80		ldx #$80			ldx 	#AM_ZEROY 					; check for Y
.86aa		c9 59		cmp #$59			cmp 	#'Y'
.86ac		f0 30		beq $86de			beq 	_TACOExit
.86ae						_TACOSyntax:
.86ae		4c 75 a4	jmp $a475			jmp 	SyntaxError
.86b1						_TACOIndirect:
.86b1		20 df 86	jsr $86df			jsr 	CalculateOperand 			; get the operand
.86b4		b1 30		lda ($30),y			lda 	(codePtr),y
.86b6		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if , then it must be ,X)
.86b8		f0 17		beq $86d1			beq 	_TACOIndX
.86ba		20 84 93	jsr $9384			jsr 	CheckRightBracket  			; otherwise must be ) or ),Y
.86bd		b1 30		lda ($30),y			lda 	(codePtr),y
.86bf		a2 d1		ldx #$d1			ldx 	#AM_IND
.86c1		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not comma then exit with (xx)
.86c3		d0 19		bne $86de			bne 	_TACOExit
.86c5		c8		iny				iny
.86c6		20 e9 86	jsr $86e9			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.86c9		c9 59		cmp #$59			cmp 	#'Y' 						; check Y
.86cb		d0 e1		bne $86ae			bne 	_TACOSyntax
.86cd		a2 d0		ldx #$d0			ldx 	#AM_INDY
.86cf		80 0d		bra $86de			bra 	_TACOExit
.86d1						_TACOIndX:
.86d1		c8		iny				iny
.86d2		20 e9 86	jsr $86e9			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.86d5		c9 58		cmp #$58			cmp 	#'X' 						; check X
.86d7		d0 d5		bne $86ae			bne 	_TACOSyntax
.86d9		20 84 93	jsr $9384			jsr 	CheckRightBracket			; check )
.86dc		a2 c0		ldx #$c0			ldx 	#AM_INDX
.86de						_TACOExit:
.86de		60		rts				rts
.86df						CalculateOperand:
.86df		48		pha				pha
.86e0		da		phx				phx
.86e1		a2 00		ldx #$00			ldx 	#0 							; get 16 bit integer in Slot 0
.86e3		20 7d a2	jsr $a27d			jsr 	Evaluate16BitInteger
.86e6		fa		plx				plx
.86e7		68		pla				pla
.86e8		60		rts				rts
.86e9						TACOCheckXY:
.86e9		b1 30		lda ($30),y			lda 	(codePtr),y
.86eb		29 c0		and #$c0			and 	#$C0 						; check it is an identifier reference.
.86ed		c9 40		cmp #$40			cmp 	#$40
.86ef		d0 21		bne $8712			bne 	_TCXYFail
.86f1		b1 30		lda ($30),y			lda 	(codePtr),y
.86f3		18		clc				clc
.86f4		69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.86f6		85 37		sta $37				sta 	zTemp0+1
.86f8		c8		iny				iny
.86f9		b1 30		lda ($30),y			lda 	(codePtr),y
.86fb		c8		iny				iny
.86fc		85 36		sta $36				sta 	zTemp0
.86fe		5a		phy				phy 								; save position
.86ff		a0 02		ldy #$02			ldy 	#2 							; type is integer ?
.8701		b1 36		lda ($36),y			lda 	(zTemp0),y
.8703		d0 0c		bne $8711			bne 	_TCXYPopFail
.8705		a0 08		ldy #$08			ldy 	#8 							; get first character, should have bit 7 set as also last.
.8707		b1 36		lda ($36),y			lda 	(zTemp0),y
.8709		c9 d8		cmp #$d8			cmp 	#'X'+$80 					; should be X or Y
.870b		f0 08		beq $8715			beq 	_TCXYFound
.870d		c9 d9		cmp #$d9			cmp 	#'Y'+$80
.870f		f0 04		beq $8715			beq 	_TCXYFound
.8711						_TCXYPopFail:
.8711		7a		ply				ply
.8712						_TCXYFail:
.8712		a9 00		lda #$00			lda 	#0
.8714		60		rts				rts
.8715						_TCXYFound:
.8715		7a		ply				ply 								; restore position
.8716		29 7f		and #$7f			and 	#$7F 						; throw bit 7
.8718		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/backload.asm

.8719						BackloadProgram:
.8719		20 e7 8d	jsr $8de7			jsr 	NewProgram 					; does the actual NEW.
.871c		a2 87		ldx #$87			ldx 	#_BLLoad >> 8
.871e		a9 79		lda #$79			lda 	#_BLLoad & $FF
.8720		20 fc 93	jsr $93fc			jsr 	PrintStringXA
.8723		a9 14		lda #$14			lda 	#SOURCE_ADDRESS >> 13 		; start page
.8725		8d a2 07	sta $07a2			sta 	BackLoadPage
.8728		a9 00		lda #$00			lda 	#(($6000) & $FF)
.872a		8d a3 07	sta $07a3			sta 	0+BackLoadPointer
.872d		a9 60		lda #$60			lda 	#(($6000) >> 8)
.872f		8d a4 07	sta $07a4			sta 	1+BackLoadPointer
.8732		9c a5 07	stz $07a5			stz 	BackLoadLast 				; reset backload last.
.8735		9c a6 07	stz $07a6			stz 	BackLoadLast+1
.8738		a9 ff		lda #$ff			lda 	#$FF
.873a		8d fa ff	sta $fffa			sta 	$FFFA
.873d						_BPLoop:
.873d		a2 ff		ldx #$ff			ldx 	#$FF
.873f		20 ae 87	jsr $87ae			jsr 	BLReadByte 					; read a byte
.8742		c9 00		cmp #$00			cmp 	#0
.8744		f0 2c		beq $8772			beq 	_BPExit 					; if 0 exit
.8746		30 2a		bmi $8772			bmi 	_BPExit 					; if -ve exit
.8748						_BPCopy:
.8748		e8		inx				inx  								; copy byte into the lineBuffer
.8749		9d 26 05	sta $0526,x			sta 	lineBuffer,x
.874c		9e 27 05	stz $0527,x			stz 	lineBuffer+1,x
.874f		20 ae 87	jsr $87ae			jsr 	BLReadByte 					; read next byte
.8752		30 0a		bmi $875e			bmi 	_BPEndLine 					; -ve = EOL
.8754		c9 09		cmp #$09			cmp 	#9 							; handle TAB, make it space.
.8756		d0 02		bne $875a			bne 	_BPNotTab
.8758		a9 20		lda #$20			lda 	#' '
.875a						_BPNotTab:
.875a		c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.875c		b0 ea		bcs $8748			bcs 	_BPCopy 					; until a control character, should be 13 received.
.875e						_BPEndLine:
.875e		20 89 80	jsr $8089			jsr 	TKTokeniseLine 				; tokenise the line.
.8761		ad 27 04	lda $0427			lda 	tokenLineNumber 			; line number = 0
.8764		0d 28 04	ora $0428			ora 	tokenLineNumber+1
.8767		f0 d4		beq $873d			beq 	_BPLoop 					; not legal code, blank line or maybe a comment.
.8769		20 8e 87	jsr $878e			jsr 	BLCheckLast 				; check last backload okay.
.876c		38		sec				sec 								; append not insert
.876d		20 69 a6	jsr $a669			jsr 	MemoryInsertLine 			; append to current program
.8770		80 cb		bra $873d			bra 	_BPLoop
.8772						_BPExit:
.8772		9c fa ff	stz $fffa			stz 	$FFFA
.8775		20 29 92	jsr $9229			jsr 	ClearSystem 				; clear variables etc.
.8778		60		rts				rts
.8779						_BLLoad:
>8779		4c 6f 61 64 69 6e 67 20				.text 	"Loading from Memory",13,0
>8781		66 72 6f 6d 20 4d 65 6d 6f 72 79 0d 00
.878e						BLCheckLast:
.878e		ad a5 07	lda $07a5			lda 	BackLoadLast 				; check last < current
.8791		cd 27 04	cmp $0427			cmp 	tokenLineNumber
.8794		ad a6 07	lda $07a6			lda 	BackLoadLast+1
.8797		ed 28 04	sbc $0428			sbc 	tokenLineNumber+1
.879a		b0 0d		bcs $87a9			bcs 	_BLCheckFail
.879c		ad 27 04	lda $0427			lda 	tokenLineNumber 			; update
.879f		8d a5 07	sta $07a5			sta 	BackLoadLast
.87a2		ad 28 04	lda $0428			lda 	tokenLineNumber+1
.87a5		8d a6 07	sta $07a6			sta 	BackLoadLast+1
.87a8		60		rts				rts
.87a9						_BLCheckFail:
.87a9		a9 02		lda #$02		lda	#2
.87ab		4c 9d 93	jmp $939d		jmp	ErrorHandler
.87ae						BLReadByte:
.87ae		da		phx				phx
.87af		a6 0b		ldx $0b				ldx 	8+3 						; save current mapping for $6000 in X
.87b1		ad a2 07	lda $07a2			lda 	BackLoadPage	 			; set current page
.87b4		85 0b		sta $0b				sta 	8+3
.87b6		ad a3 07	lda $07a3			lda 	BackLoadPointer 			; copy pointer to zTemp0
.87b9		85 36		sta $36				sta 	zTemp0
.87bb		ad a4 07	lda $07a4			lda 	BackLoadPointer+1
.87be		85 37		sta $37				sta 	zTemp0+1
.87c0		b2 36		lda ($36)			lda 	(zTemp0) 					; read next byte
.87c2		ee a3 07	inc $07a3			inc 	BackLoadPointer 			; bump pointer
.87c5		d0 0f		bne $87d6			bne 	_BLNoCarry
.87c7		ee a4 07	inc $07a4			inc 	BackLoadPointer+1
.87ca		10 0a		bpl $87d6			bpl 	_BLNoCarry 					; need a new page
.87cc		48		pha				pha
.87cd		a9 60		lda #$60			lda 	#$60 						; reset pointer
.87cf		8d a4 07	sta $07a4			sta 	BackLoadPointer+1
.87d2		ee a2 07	inc $07a2			inc 	BackLoadPage 				; next page from source.
.87d5		68		pla				pla
.87d6						_BLNoCarry:
.87d6		86 0b		stx $0b				stx 	8+3 						; restore mapping, then X.
.87d8		fa		plx				plx
.87d9		c9 00		cmp #$00			cmp 	#0
.87db		60		rts				rts
.07a2						BackLoadPage:
>07a2								.fill  	1
.07a3						BackLoadPointer:
>07a3								.fill 	2
.07a5						BackLoadLast:
>07a5								.fill 	2

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/editor.asm

.87dc						EditProgramCode:
.87dc		ad 27 04	lda $0427			lda 	tokenLineNumber 			; try to find the line.
.87df		ae 28 04	ldx $0428			ldx 	tokenLineNumber+1
.87e2		20 0d a7	jsr $a70d			jsr 	MemorySearch
.87e5		90 05		bcc $87ec			bcc 	_EPCNoDelete 				; reached the end : don't delete
.87e7		d0 03		bne $87ec			bne 	_EPCNoDelete 				; found slot but didn't match : no delete
.87e9		20 32 a6	jsr $a632			jsr 	MemoryDeleteLine 			; delete the line
.87ec						_EPCNoDelete:
.87ec		ad 29 04	lda $0429			lda 	tokenBuffer 				; buffer empty - we just want to delete a line.
.87ef		c9 80		cmp #$80			cmp 	#KWC_EOL
.87f1		f0 0d		beq $8800			beq 	_EPCNoInsert
.87f3		ad 27 04	lda $0427			lda 	tokenLineNumber 			; find the line - it cannot exist as we've just deleted it.
.87f6		ae 28 04	ldx $0428			ldx 	tokenLineNumber+1 			; so this can't fail, it returns some point in the code.
.87f9		20 0d a7	jsr $a70d			jsr 	MemorySearch
.87fc		18		clc				clc 								; insert at this point.
.87fd		20 69 a6	jsr $a669			jsr 	MemoryInsertLine 			; insert the line
.8800						_EPCNoInsert:
.8800		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/warmstart.asm

.8801						WarmStart:
.8801		a2 ff		ldx #$ff			ldx 	#$FF
.8803		9a		txs				txs
.8804		a9 89		lda #$89			lda 	#CLICommandLine+$80 		; set console colour whatever the current colour is.
.8806		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.8809		20 c8 81	jsr $81c8			jsr 	EXTInputLine 				; get line to lineBuffer
.880c		20 89 80	jsr $8089			jsr 	TKTokeniseLine 				; tokenise the line
.880f		ad 27 04	lda $0427			lda 	tokenLineNumber 			; line number <> 0
.8812		0d 28 04	ora $0428			ora 	tokenLineNumber+1
.8815		d0 17		bne $882e			bne 	_WSEditCode 				; if so,edit code.
.8817		9c 26 04	stz $0426			stz 	tokenOffset 				; zero the "offset", meaning it only runs one line.
.881a		a9 26		lda #$26			lda 	#((tokenOffset) & $FF)
.881c		85 30		sta $30				sta 	codePtr
.881e		a9 04		lda #$04			lda 	#((tokenOffset) >> 8)
.8820		85 31		sta $31				sta 	codePtr+1
.8822		ad 29 04	lda $0429			lda 	tokenBuffer 				; nothing to run
.8825		c9 80		cmp #$80			cmp 	#KWC_EOL
.8827		f0 d8		beq $8801			beq 	WarmStart
.8829		20 84 8f	jsr $8f84			jsr 	RUNCodePointerLine 			; execute that line.
.882c		80 d3		bra $8801			bra 	WarmStart
.882e						_WSEditCode:
.882e		20 dc 87	jsr $87dc			jsr 	EditProgramCode 			; edit the program code
.8831		20 29 92	jsr $9229			jsr 	ClearSystem 				; clear all variables etc.
.8834		80 cb		bra $8801			bra 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assemble.asm

.8836						AssembleCommand:
.8836		a2 00		ldx #$00			ldx 	#0
.8838		20 7d a2	jsr $a27d			jsr 	Evaluate16BitInteger 		; start address
.883b		a5 58		lda $58				lda 	NSMantissa0
.883d		8d 1a 04	sta $041a			sta 	AssemblerAddress
.8840		a5 60		lda $60				lda 	NSMantissa1
.8842		8d 1b 04	sta $041b			sta 	AssemblerAddress+1
.8845		20 8c 93	jsr $938c			jsr 	CheckComma
.8848		20 98 a2	jsr $a298			jsr 	Evaluate8BitInteger 		; options 0-3
.884b		a5 58		lda $58				lda 	NSMantissa0
.884d		8d 1c 04	sta $041c			sta 	AssemblerControl
.8850		60		rts				rts
.8851		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assert.asm

.8852						AssertCommand:
.8852		a2 00		ldx #$00			ldx 	#0 							; bottom of stack
.8854		20 6a a2	jsr $a26a			jsr 	EvaluateInteger 			; the assert test
.8857		20 1f a3	jsr $a31f			jsr 	NSMIsZero 					; exit if result is non zero.
.885a		d0 05		bne $8861			bne 	_ACExit
.885c		a9 0a		lda #$0a		lda	#10
.885e		4c 9d 93	jmp $939d		jmp	ErrorHandler
.8861						_ACExit:
.8861		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/call.asm

.8862						CallCommand:
.8862		a2 00		ldx #$00			ldx 	#0 							; get the routine address to level 0
.8864		20 7d a2	jsr $a27d			jsr 	Evaluate16BitInteger
.8867						_CCClear
.8867		e8		inx				inx  								; clear 1,2 and 3 (for A X Y)
.8868		20 fd a2	jsr $a2fd			jsr 	NSMSetZero 					; these are optional sequentially.
.886b		e0 04		cpx #$04			cpx 	#4
.886d		d0 f8		bne $8867			bne 	_CCClear
.886f		a2 00		ldx #$00			ldx 	#0 							; and keep trying while there are more values.
.8871						_CCCParam:
.8871		b1 30		lda ($30),y			lda 	(codePtr),y
.8873		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8875		d0 09		bne $8880			bne 	_CCCRun6502
.8877		c8		iny				iny 								; skip comma
.8878		e8		inx				inx	 								; next level
.8879		20 98 a2	jsr $a298			jsr 	Evaluate8BitInteger 		; get A/X/Y
.887c		e0 03		cpx #$03			cpx 	#3
.887e		90 f1		bcc $8871			bcc 	_CCCParam 					; done all 3 ?
.8880						_CCCRun6502:
.8880		5a		phy				phy 								; save position
.8881		a5 60		lda $60				lda 	NSMantissa1 				; put address in zTemp0
.8883		85 37		sta $37				sta 	zTemp0+1
.8885		a5 58		lda $58				lda 	NSMantissa0
.8887		85 36		sta $36				sta 	zTemp0
.8889		a5 59		lda $59				lda 	NSMantissa0+1 				; get registers into A X Y
.888b		a6 5a		ldx $5a				ldx 	NSMantissa0+2
.888d		a4 5b		ldy $5b				ldy 	NSMantissa0+3
.888f		20 94 88	jsr $8894			jsr 	_CCCZTemp0 					; call zTemp0
.8892		7a		ply				ply 								; restore position and exit
.8893		60		rts				rts
.8894						_CCCZTemp0:
.8894		6c 36 00	jmp ($0036)			jmp 	(zTemp0)

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/data.asm

.8897						Command_Data:
.8897		a9 3a		lda #$3a			lda 	#KWD_COLON 					; advance to colon/EOL, e.g. ignore anything till then.
.8899		a2 80		ldx #$80			ldx 	#KWC_EOL
.889b		20 df 92	jsr $92df			jsr 	ScanForward
.889e		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/dim.asm

.889f						DimCommand:
.889f		b1 30		lda ($30),y			lda 	(codePtr),y
.88a1		29 c0		and #$c0			and 	#$C0
.88a3		c9 40		cmp #$40			cmp 	#$40
.88a5		d0 7a		bne $8921			bne 	_DCSyntax 				; n o, error.
.88a7		b1 30		lda ($30),y			lda 	(codePtr),y
.88a9		18		clc				clc
.88aa		69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.88ac		85 3f		sta $3f				sta 	zaTemp+1
.88ae		c8		iny				iny
.88af		b1 30		lda ($30),y			lda 	(codePtr),y
.88b1		c8		iny				iny
.88b2		85 3e		sta $3e				sta 	zaTemp
.88b4		5a		phy				phy
.88b5		a0 02		ldy #$02			ldy 	#2 						; read type byte
.88b7		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.88b9		29 18		and #$18			and 	#NSBTypeMask 			; check it's not a procedure
.88bb		c9 18		cmp #$18			cmp 	#NSTProcedure
.88bd		f0 62		beq $8921			beq 	_DCSyntax
.88bf		b1 3e		lda ($3e),y			lda 	(zaTemp),y 				; check it's an array
.88c1		29 04		and #$04			and 	#NSBIsArray
.88c3		f0 64		beq $8929			beq 	_DCType
.88c5		a0 04		ldy #$04			ldy 	#4 						; check not already defined
.88c7		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.88c9		d0 59		bne $8924			bne 	_DCRedefine
.88cb		7a		ply				ply
.88cc		20 2c 89	jsr $892c			jsr 	_DCGetSize 				; get array size, check it.
.88cf		5a		phy				phy
.88d0		a0 05		ldy #$05			ldy 	#5 						; store in first array size slot
.88d2		91 3e		sta ($3e),y			sta 	(zaTemp),y 				; second will be zero.
.88d4		7a		ply				ply 							; is there a second (e.g. ,x)
.88d5		b1 30		lda ($30),y			lda 	(codePtr),y
.88d7		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.88d9		d0 0a		bne $88e5			bne 	_DCOneDimension
.88db		c8		iny				iny 							; skip comma
.88dc		20 2c 89	jsr $892c			jsr 	_DCGetSize 				; get 2nd array size
.88df		5a		phy				phy
.88e0		a0 06		ldy #$06			ldy 	#6 						; store in 2nd array size
.88e2		91 3e		sta ($3e),y			sta 	(zaTemp),y
.88e4		7a		ply				ply
.88e5						_DCOneDimension:
.88e5		5a		phy				phy 							; save position
.88e6		a0 05		ldy #$05			ldy 	#5 						; dimensions + 1 in AX (as zero based)
.88e8		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.88ea		aa		tax				tax
.88eb		c8		iny				iny
.88ec		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.88ee		e8		inx				inx 							; bump them.
.88ef		1a		inc a				inc 	a
.88f0		20 a8 a2	jsr $a2a8			jsr 	Multiply8x8 			; work out the total number of elements -> zTemp0
.88f3		a5 37		lda $37				lda 	zTemp0+1 				; don't allow more than 8192 elements whatever
.88f5		29 e0		and #$e0			and 	#$E0
.88f7		d0 23		bne $891c			bne 	_DCSize
.88f9		a0 02		ldy #$02			ldy 	#2 						; get base type
.88fb		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.88fd		20 3a 89	jsr $893a			jsr 	ScaleByBaseType 		; scale by base type
.8900		a5 36		lda $36				lda 	zTemp0
.8902		a6 37		ldx $37				ldx 	zTemp0+1
.8904		20 9f 9e	jsr $9e9f			jsr 	AllocateXABytes 		; allocate memory
.8907		a0 03		ldy #$03			ldy 	#3 						; copy into the address.
.8909		91 3e		sta ($3e),y			sta 	(zaTemp),y
.890b		c8		iny				iny
.890c		8a		txa				txa
.890d		91 3e		sta ($3e),y			sta 	(zaTemp),y
.890f		7a		ply				ply 							; get position back
.8910		20 84 93	jsr $9384			jsr 	CheckRightBracket 		; check )
.8913		b1 30		lda ($30),y			lda 	(codePtr),y
.8915		c8		iny				iny 							; consume in case
.8916		c9 2c		cmp #$2c			cmp 	#KWD_COMMA		 		; if so do another DIM.
.8918		f0 85		beq $889f			beq 	DimCommand
.891a		88		dey				dey 							; undo consume
.891b		60		rts				rts
.891c						_DCSize:
.891c		a9 16		lda #$16		lda	#22
.891e		4c 9d 93	jmp $939d		jmp	ErrorHandler
.8921						_DCSyntax:
.8921		4c 75 a4	jmp $a475			jmp 	SyntaxError
.8924						_DCRedefine:
.8924		a9 15		lda #$15		lda	#21
.8926		4c 9d 93	jmp $939d		jmp	ErrorHandler
.8929						_DCType:
.8929		4c 7f a4	jmp $a47f			jmp 	TypeError
.892c						_DCGetSize:
.892c		a2 00		ldx #$00			ldx 	#0 						; get first index.
.892e		20 98 a2	jsr $a298			jsr 	Evaluate8BitInteger 	; get array dimension
.8931		c9 00		cmp #$00			cmp 	#0 						; must be 1-254
.8933		f0 e7		beq $891c			beq 	_DCSize
.8935		c9 fe		cmp #$fe			cmp 	#254
.8937		f0 e3		beq $891c			beq 	_DCSize
.8939		60		rts				rts
.893a						ScaleByBaseType:
.893a		29 10		and #$10			and 	#NSBIsString 			; is it string
.893c		d0 19		bne $8957			bne 	_SBBTString
.893e		a5 37		lda $37				lda 	zTemp0+1 				; push value on stack
.8940		48		pha				pha
.8941		a5 36		lda $36				lda 	zTemp0
.8943		48		pha				pha
.8944		06 36		asl $36				asl 	zTemp0 					; x 2
.8946		26 37		rol $37				rol 	zTemp0+1
.8948		06 36		asl $36				asl 	zTemp0 					; x 4
.894a		26 37		rol $37				rol 	zTemp0+1
.894c		68		pla				pla 							; add stacked value = x 5
.894d		65 36		adc $36				adc 	zTemp0
.894f		85 36		sta $36				sta 	zTemp0
.8951		68		pla				pla
.8952		65 37		adc $37				adc 	zTemp0+1
.8954		85 37		sta $37				sta 	zTemp0+1
.8956		60		rts				rts
.8957						_SBBTString:
.8957		06 36		asl $36				asl 	zTemp0
.8959		26 37		rol $37				rol 	zTemp0+1
.895b		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/end.asm

.895c						EndCommand:
.895c		4c 01 88	jmp $8801			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/for.asm

.895f						ForCommand:
.895f		a9 d9		lda #$d9			lda 	#STK_FOR+9 					; allocate 18 bytes on the return stack (see above).
.8961		20 21 b3	jsr $b321			jsr 	StackOpen
.8964		a2 00		ldx #$00			ldx 	#0
.8966		20 f1 9c	jsr $9cf1			jsr 	EvaluateTerm
.8969		b5 50		lda $50,x			lda 	NSStatus,x
.896b		c9 20		cmp #$20			cmp 	#NSBIsReference+NSTInteger 	; do we have an integer 4 byte reference.
.896d		d0 47		bne $89b6			bne		_FCError
.896f		a9 3d		lda #$3d			lda 	#KWD_EQUAL 					; =
.8971		20 94 93	jsr $9394			jsr 	CheckNextA
.8974		e8		inx				inx
.8975		20 6a a2	jsr $a26a			jsr 	EvaluateInteger 			; <from> in +1
.8978		b1 30		lda ($30),y			lda 	(codePtr),y
.897a		c8		iny				iny 								; consume it
.897b		48		pha				pha 								; save on stack for later
.897c		c9 c2		cmp #$c2			cmp 	#KWD_DOWNTO
.897e		f0 04		beq $8984			beq 	_FCNoSyntax
.8980		c9 dc		cmp #$dc			cmp 	#KWD_TO
.8982		d0 35		bne $89b9			bne 	_FCSyntaxError
.8984						_FCNoSyntax:
.8984		e8		inx				inx
.8985		20 6a a2	jsr $a26a			jsr 	EvaluateInteger
.8988		20 66 b3	jsr $b366			jsr 	STKSaveCodePosition 		; save loop back position
.898b		68		pla				pla 								; restore DOWNTO or TO
.898c		5a		phy				phy 								; save Y on the stack
.898d		49 c2		eor #$c2			eor 	#KWD_DOWNTO 				; 0 if DOWNTO, #0 if TO
.898f		f0 02		beq $8993			beq 	_FCNotDownTo
.8991		a9 02		lda #$02			lda 	#2
.8993						_FCNotDownTo:
.8993		3a		dec a				dec 	a 							; 255 if DOWNTO, 1 if TO
.8994		a0 10		ldy #$10			ldy 	#16
.8996		91 34		sta ($34),y			sta 	(basicStack),y 				; copy that out to the Basic Stack.
.8998		a0 06		ldy #$06			ldy 	#6 							; this is the address of the loop variable.
.899a		a5 58		lda $58				lda 	NSMantissa0
.899c		91 34		sta ($34),y			sta 	(basicStack),y
.899e		a5 60		lda $60				lda 	NSMantissa1
.89a0		c8		iny				iny
.89a1		91 34		sta ($34),y			sta 	(basicStack),y
.89a3		a0 08		ldy #$08			ldy 	#8 							; set initial index value
.89a5		a2 01		ldx #$01			ldx 	#1
.89a7		20 bc 89	jsr $89bc			jsr 	FCIntegerToStack
.89aa		a0 0c		ldy #$0c			ldy 	#12 						; set the terminal value
.89ac		a2 02		ldx #$02			ldx 	#2
.89ae		20 bc 89	jsr $89bc			jsr 	FCIntegerToStack
.89b1		20 d7 89	jsr $89d7			jsr 	CopyIndexToReference
.89b4		7a		ply				ply 								; restore position
.89b5		60		rts				rts
.89b6						_FCError:
.89b6		4c 7f a4	jmp $a47f			jmp 	TypeError
.89b9						_FCSyntaxError:
.89b9		4c 75 a4	jmp $a475			jmp 	SyntaxError
.89bc						FCIntegerToStack:
.89bc		34 50		bit $50,x			bit 	NSStatus,x 					; is the value negative
.89be		10 03		bpl $89c3			bpl	 	_FCNotNegative
.89c0		20 c6 a2	jsr $a2c6			jsr 	NSMNegateMantissa 			; if so 2's complement the mantissa
.89c3						_FCNotNegative:
.89c3		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy out to the basic stack
.89c5		91 34		sta ($34),y			sta 	(basicStack),y
.89c7		c8		iny				iny
.89c8		b5 60		lda $60,x			lda 	NSMantissa1,x
.89ca		91 34		sta ($34),y			sta 	(basicStack),y
.89cc		c8		iny				iny
.89cd		b5 68		lda $68,x			lda 	NSMantissa2,x
.89cf		91 34		sta ($34),y			sta 	(basicStack),y
.89d1		c8		iny				iny
.89d2		b5 70		lda $70,x			lda 	NSMantissa3,x
.89d4		91 34		sta ($34),y			sta 	(basicStack),y
.89d6		60		rts				rts
.89d7						CopyIndexToReference:
.89d7		5a		phy				phy
.89d8		a0 06		ldy #$06			ldy 	#6 							; copy address-8 to write to zTemp0
.89da		38		sec				sec 								; (because we copy from offset 8)
.89db		b1 34		lda ($34),y			lda 	(basicStack),y
.89dd		e9 08		sbc #$08			sbc 	#8
.89df		85 36		sta $36				sta 	zTemp0
.89e1		c8		iny				iny
.89e2		b1 34		lda ($34),y			lda 	(basicStack),y
.89e4		e9 00		sbc #$00			sbc 	#0
.89e6		85 37		sta $37				sta 	zTemp0+1
.89e8		a2 04		ldx #$04			ldx 	#4 							; this is the copy counter/
.89ea		a0 0b		ldy #$0b			ldy 	#8+3 		 				; the MSB of the mantissa
.89ec		b1 34		lda ($34),y			lda 	(basicStack),y
.89ee		0a		asl a				asl 	a 							; into carry
.89ef		a0 08		ldy #$08			ldy 	#8 							; where to copy from.
.89f1		90 14		bcc $8a07			bcc 	_CITRNormal
.89f3		38		sec				sec
.89f4						_CITRNegative:
.89f4		a9 00		lda #$00			lda 	#0
.89f6		f1 34		sbc ($34),y			sbc 	(basicStack),y
.89f8		91 36		sta ($36),y			sta 	(zTemp0),y
.89fa		c8		iny				iny
.89fb		ca		dex				dex
.89fc		d0 f6		bne $89f4			bne 	_CITRNegative
.89fe		88		dey				dey 								; look at MSB of mantissa
.89ff		b1 36		lda ($36),y			lda 	(zTemp0),y 					; set the MSB as negative packed.
.8a01		09 80		ora #$80			ora 	#$80
.8a03		91 36		sta ($36),y			sta 	(zTemp0),y
.8a05		7a		ply				ply
.8a06		60		rts				rts
.8a07						_CITRNormal:
.8a07		b1 34		lda ($34),y			lda 	(basicStack),y 				; copy without negation.
.8a09		91 36		sta ($36),y			sta 	(zTemp0),y
.8a0b		c8		iny				iny
.8a0c		ca		dex				dex
.8a0d		d0 f8		bne $8a07			bne 	_CITRNormal
.8a0f		7a		ply				ply 								; and exit.
.8a10		60		rts				rts
.8a11						NextCommand:
.8a11		a9 d9		lda #$d9			lda 	#STK_FOR+9 					; check FOR is TOS
.8a13		a2 11		ldx #$11			ldx 	#ERRID_FOR 					; this error
.8a15		20 4e b3	jsr $b34e			jsr 	StackCheckFrame
.8a18		5a		phy				phy
.8a19		a0 10		ldy #$10			ldy 	#16 						; get the step count
.8a1b		b1 34		lda ($34),y			lda 	(basicStack),y
.8a1d		85 36		sta $36				sta 	zTemp0 						; this is the sign extend
.8a1f		30 02		bmi $8a23			bmi 	_NCStepNeg
.8a21		64 36		stz $36				stz 	zTemp0 						; which is 0 or 255
.8a23						_NCStepNeg:
.8a23		a0 08		ldy #$08			ldy 	#8 							; offset to bump
.8a25		a2 04		ldx #$04			ldx 	#4 							; count to bump
.8a27		18		clc				clc
.8a28						_NCBump:
.8a28		71 34		adc ($34),y			adc 	(basicStack),y 				; add it
.8a2a		91 34		sta ($34),y			sta 	(basicStack),y
.8a2c		a5 36		lda $36				lda 	zTemp0 						; get sign extend for next time.
.8a2e		c8		iny				iny 								; next byte
.8a2f		ca		dex				dex 								; do four times
.8a30		d0 f6		bne $8a28			bne 	_NCBump
.8a32		20 d7 89	jsr $89d7			jsr		CopyIndexToReference		; copy it to the reference variable.
.8a35		a0 10		ldy #$10			ldy 	#16 						; get step count again
.8a37		b1 34		lda ($34),y			lda 	(basicStack),y
.8a39		0a		asl a				asl 	a 							; sign bit to carry
.8a3a		a9 0c		lda #$0c			lda 	#12 						; offset of LHS = terminal offset
.8a3c		85 38		sta $38				sta 	zTemp1
.8a3e		90 02		bcc $8a42			bcc 	_NCCompRev 					; use if step is +ve
.8a40		a9 08		lda #$08			lda 	#8 							; now the LHS = index value
.8a42						_NCCompRev:
.8a42		85 38		sta $38				sta 	zTemp1 						; so zTemp0 is the index for LHS
.8a44		49 04		eor #$04			eor 	#(8^12) 					; and zTemp0+1 is the index for RHS
.8a46		85 39		sta $39				sta 	zTemp1+1
.8a48		a2 04		ldx #$04			ldx 	#4 							; bytes to compare
.8a4a		38		sec				sec
.8a4b						_NCCompare:
.8a4b		a4 38		ldy $38				ldy 	zTemp1 						; do compare using the two indices
.8a4d		b1 34		lda ($34),y			lda 	(basicStack),y
.8a4f		a4 39		ldy $39				ldy 	zTemp1+1
.8a51		f1 34		sbc ($34),y			sbc 	(basicStack),y
.8a53		e6 38		inc $38				inc 	zTemp1 						; bump the indices (inc,dex do not change C or V)
.8a55		e6 39		inc $39				inc 	zTemp1+1
.8a57		ca		dex				dex 								; do it 4 times.
.8a58		d0 f1		bne $8a4b			bne 	_NCCompare
.8a5a		50 02		bvc $8a5e			bvc 	_NCNoOverflow 				; convert to signed comparison
.8a5c		49 80		eor #$80			eor 	#$80
.8a5e						_NCNoOverflow:
.8a5e		7a		ply				ply 								; restore Y position
.8a5f		0a		asl a				asl 	a 							; is bit 7 set.
.8a60		90 04		bcc $8a66			bcc 	_NCLoopBack 				; if no , >= so loop back
.8a62		20 40 b3	jsr $b340			jsr 	StackClose 					; exit the loop
.8a65		60		rts				rts
.8a66						_NCLoopBack:
.8a66		20 77 b3	jsr $b377			jsr 	STKLoadCodePosition 		; loop back
.8a69		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/gosub.asm

.8a6a						Command_GOSUB:
.8a6a		a2 00		ldx #$00			ldx 	#0
.8a6c		20 7d a2	jsr $a27d			jsr 	Evaluate16BitInteger 		; line number in Stack.0
.8a6f		a9 e3		lda #$e3			lda 	#STK_GOSUB+3
.8a71		20 21 b3	jsr $b321			jsr 	StackOpen 					; create frame
.8a74		20 66 b3	jsr $b366			jsr 	STKSaveCodePosition 		; save current position
.8a77		4c 8d 8a	jmp $8a8d			jmp 	GotoStackX
.8a7a						Command_RETURN:
.8a7a		a9 e0		lda #$e0			lda 	#STK_GOSUB 					; check TOS is this
.8a7c		a2 0e		ldx #$0e			ldx 	#ERRID_GOSUB 				; this error
.8a7e		20 4e b3	jsr $b34e			jsr 	StackCheckFrame
.8a81		20 77 b3	jsr $b377			jsr 	STKLoadCodePosition 		; restore code position
.8a84		20 40 b3	jsr $b340			jsr 	StackClose
.8a87		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/goto.asm

.8a88						GotoCommand:
.8a88		a2 00		ldx #$00			ldx 	#0 							; GOTO where
.8a8a		20 7d a2	jsr $a27d			jsr 	Evaluate16BitInteger
.8a8d						GotoStackX:
.8a8d		b5 60		lda $60,x			lda  	NSMantissa1,x 				; put line # in XA. I'll keep this even though
.8a8f		48		pha				pha 								; it is slightly inefficient, just in cases.
.8a90		b5 58		lda $58,x			lda 	NSMantissa0,x
.8a92		fa		plx				plx
.8a93		20 0d a7	jsr $a70d			jsr 	MemorySearch 				; transfer to line number AX.
.8a96		90 05		bcc $8a9d			bcc 	_GotoError 					; not found, off end.
.8a98		d0 03		bne $8a9d			bne 	_GotoError 					; not found exactly
.8a9a		4c 7d 8f	jmp $8f7d			jmp 	RunNewLine 					; and go straight to new line code.
.8a9d						_GotoError:
.8a9d		a9 0d		lda #$0d		lda	#13
.8a9f		4c 9d 93	jmp $939d		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/if.asm

.8aa2						IfCommand:
.8aa2		a2 00		ldx #$00			ldx 	#0 							; Get the if test.
.8aa4		20 4b a2	jsr $a24b			jsr 	EvaluateNumber
.8aa7		b1 30		lda ($30),y			lda 	(codePtr),y
.8aa9		c9 b6		cmp #$b6			cmp 	#KWD_THEN  					; could be THEN <stuff>
.8aab		d0 0a		bne $8ab7			bne 	_IfStructured 				; we still support it.
.8aad		c8		iny				iny 								; consume THEN
.8aae		20 1f a3	jsr $a31f			jsr 	NSMIsZero 					; is it zero
.8ab1		f0 01		beq $8ab4			beq 	_IfFail 					; if fail, go to next line
.8ab3		60		rts				rts 								; if THEN just continue
.8ab4						_IfFail:
.8ab4		4c 58 8f	jmp $8f58			jmp 	EOLCommand
.8ab7						_IfStructured:
.8ab7		20 1f a3	jsr $a31f			jsr 	NSMIsZero 					; is it zero
.8aba		d0 07		bne $8ac3			bne 	_IfExit 					; if not, then continue normally.
.8abc		a9 c3		lda #$c3			lda 	#KWD_ELSE 					; look for else/endif
.8abe		a2 b3		ldx #$b3			ldx 	#KWD_ENDIF
.8ac0		20 df 92	jsr $92df			jsr 	ScanForward 				; and run from there
.8ac3						_IfExit:
.8ac3		60		rts				rts
.8ac4						ElseCode:
.8ac4		a9 b3		lda #$b3			lda 	#KWD_ENDIF 					; else is only run after the if clause succeeds
.8ac6		aa		tax				tax 								; so just go to the structure exit
.8ac7		20 df 92	jsr $92df			jsr 	ScanForward
.8aca		60		rts				rts
.8acb						EndIf:
.8acb		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/inputprint.asm

.8acc						Command_Input:
.8acc		9c 24 04	stz $0424			stz 	isPrintFlag
.8acf		80 0c		bra $8add			bra 	Command_IP_Main
.8ad1						Command_CPrint:
.8ad1		a9 7f		lda #$7f			lda 	#$7F 						; set input flag to character mode
.8ad3		8d 24 04	sta $0424			sta 	isPrintFlag 				; clear input flag
.8ad6		80 05		bra $8add			bra 	Command_IP_Main
.8ad8						Command_Print:
.8ad8		a9 ff		lda #$ff			lda 	#$FF 						; set input flag
.8ada		8d 24 04	sta $0424			sta 	isPrintFlag 				; clear input flag
.8add						Command_IP_Main:
.8add		18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.8ade						_CPLoop:
.8ade		08		php				php 								; save last action flag
.8adf		b1 30		lda ($30),y			lda 	(codePtr),y
.8ae1		c9 80		cmp #$80			cmp  	#KWC_EOL 					; end of line or colon, exit now.
.8ae3		f0 54		beq $8b39			beq 	_CPExit
.8ae5		c9 3a		cmp #$3a			cmp 	#KWD_COLON
.8ae7		f0 50		beq $8b39			beq 	_CPExit
.8ae9		68		pla				pla 								; throw last action flag
.8aea		b1 30		lda ($30),y			lda 	(codePtr),y
.8aec		c8		iny				iny
.8aed		c9 3b		cmp #$3b			cmp 	#KWD_SEMICOLON				; is it a semicolon
.8aef		f0 45		beq $8b36			beq 	_CPContinueWithSameLine
.8af1		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; comma
.8af3		f0 3c		beq $8b31			beq 	_CPTab
.8af5		c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; apostrophe (new line)
.8af7		f0 34		beq $8b2d			beq 	_CPNewLine
.8af9		88		dey				dey 								; undo the get.
.8afa		20 a5 98	jsr $98a5			jsr 	EvaluateExpressionAt0 		; evaluate expression at 0.
.8afd		b5 50		lda $50,x			lda 	NSStatus,x 					; read the status
.8aff		29 20		and #$20			and 	#NSBIsReference 			; is it a reference
.8b01		f0 0d		beq $8b10			beq 	_CPIsValue 					; no, display it.
.8b03		ad 24 04	lda $0424			lda 	isPrintFlag 				; if print, dereference and print.
.8b06		d0 05		bne $8b0d			bne 	_CPIsPrint 					; otherwise display.
.8b08		20 42 8b	jsr $8b42			jsr 	CIInputValue 				; input a value to the reference
.8b0b		80 20		bra $8b2d			bra 	_CPNewLine
.8b0d						_CPIsPrint:
.8b0d		20 6a 9b	jsr $9b6a			jsr 	Dereference 				; dereference if required.
.8b10						_CPIsValue:
.8b10		b5 50		lda $50,x			lda 	NSStatus,x 					; is it a number
.8b12		29 10		and #$10			and 	#NSBIsString
.8b14		f0 09		beq $8b1f			beq 	_CPNumber
.8b16		a6 60		ldx $60				ldx 	NSMantissa1 				; string, print the text.
.8b18		a5 58		lda $58				lda 	NSMantissa0
.8b1a		20 a5 8b	jsr $8ba5			jsr 	CPPrintStringXA
.8b1d		80 be		bra $8add			bra 	Command_IP_Main 			; loop round clearing carry so NL if end
.8b1f						_CPNumber:
.8b1f		a9 05		lda #$05			lda 	#5 							; maximum decimals
.8b21		20 32 a1	jsr $a132			jsr 	ConvertNumberToString 		; convert to string (in unary str$() function)
.8b24		a2 06		ldx #$06			ldx 	#decimalBuffer >> 8
.8b26		a9 45		lda #$45			lda 	#decimalBuffer & $FF
.8b28		20 a5 8b	jsr $8ba5			jsr 	CPPrintStringXA 			; print it.
.8b2b		80 b0		bra $8add			bra 	Command_IP_Main				; loop round clearing carry so NL if end
.8b2d						_CPNewLine:
.8b2d		a9 0d		lda #$0d			lda 	#13
.8b2f		80 02		bra $8b33			bra 	_CPPrintCharDirect
.8b31						_CPTab:
.8b31		a9 09		lda #$09			lda 	#9 							; print TAB
.8b33						_CPPrintCharDirect:
.8b33		20 c0 8b	jsr $8bc0			jsr 	CPPVControl 				; print TAB/CR using the non PETSCII
.8b36						_CPContinueWithSameLine:
.8b36		38		sec				sec 								; loop round with carry set, which
.8b37		80 a5		bra $8ade			bra 	_CPLoop 					; will inhibit final CR
.8b39						_CPExit:
.8b39		28		plp				plp 								; get last action flag
.8b3a		b0 05		bcs $8b41			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.8b3c		a9 0d		lda #$0d			lda 	#13 						; print new line
.8b3e		20 c0 8b	jsr $8bc0			jsr 	CPPVControl
.8b41						_CPExit2:
.8b41		60		rts				rts
.8b42						CIInputValue:
.8b42		a2 00		ldx #$00			ldx 	#0 							; input a line.
.8b44						_CIInputLine:
.8b44		20 c3 8b	jsr $8bc3			jsr 	CPInputVector 				; get key
.8b47		c9 0d		cmp #$0d			cmp 	#13 						; 13 = End
.8b49		f0 1f		beq $8b6a			beq 	_CIHaveValue
.8b4b		c9 08		cmp #$08			cmp 	#8 							; 8 = BS
.8b4d		f0 11		beq $8b60			beq 	_CIBackspace
.8b4f		c9 20		cmp #$20			cmp 	#32 						; ignore other control characters
.8b51		90 f1		bcc $8b44			bcc 	_CIInputLine
.8b53		e0 50		cpx #$50			cpx 	#80 						; max length
.8b55		b0 ed		bcs $8b44			bcs 	_CIInputLine
.8b57		9d 26 05	sta $0526,x			sta 	lineBuffer,x
.8b5a		e8		inx				inx
.8b5b		20 43 80	jsr $8043			jsr 	EXTPrintCharacter 			; echo it.
.8b5e		80 e4		bra $8b44			bra 	_CIInputLine
.8b60						_CIBackspace:
.8b60		e0 00		cpx #$00			cpx 	#0 							; nothing to delete
.8b62		f0 e0		beq $8b44			beq 	_CIInputLine
.8b64		20 43 80	jsr $8043			jsr 	EXTPrintCharacter 			; echo it.
.8b67		ca		dex				dex
.8b68		80 da		bra $8b44			bra 	_CIInputLine
.8b6a						_CIHaveValue:
.8b6a		9e 26 05	stz $0526,x			stz 	lineBuffer,x 				; ASCIIZ string now in line buffer.
.8b6d		a5 50		lda $50				lda 	NSStatus 					; was it a string assignment
.8b6f		29 10		and #$10			and 	#NSBIsString
.8b71		f0 17		beq $8b8a			beq 	_CIAssignNumber 			; assign a number
.8b73		a2 01		ldx #$01			ldx 	#1
.8b75		a9 26		lda #$26			lda 	#lineBuffer & $FF 			; set up to point to new string
.8b77		95 58		sta $58,x			sta 	NSMantissa0,x
.8b79		a9 05		lda #$05			lda 	#lineBuffer >> 8
.8b7b		95 60		sta $60,x			sta 	NSMantissa1,x
.8b7d		74 68		stz $68,x			stz 	NSMantissa2,x
.8b7f		74 70		stz $70,x			stz 	NSMantissa3,x
.8b81		a9 10		lda #$10			lda 	#NSBIsString 				; so it becomes a string value
.8b83		95 50		sta $50,x			sta  	NSStatus,x
.8b85		ca		dex				dex 								; X = 0
.8b86		20 ff 8b	jsr $8bff			jsr 	AssignVariable
.8b89		60		rts				rts
.8b8a						_CIAssignNumber:
.8b8a		a9 26		lda #$26			lda 	#lineBuffer & $FF 			; set up to point to new string
.8b8c		85 36		sta $36				sta 	zTemp0
.8b8e		a9 05		lda #$05			lda 	#lineBuffer >> 8
.8b90		85 37		sta $37				sta 	zTemp0+1
.8b92		a2 01		ldx #$01			ldx 	#1 							; put in slot 1
.8b94		20 12 a0	jsr $a012			jsr 	ValEvaluateZTemp0 			; use the VAL() code
.8b97		90 07		bcc $8ba0			bcc 	_CIIsOkay
.8b99		a9 3f		lda #$3f			lda 	#"?" 						; error ?
.8b9b		20 b8 8b	jsr $8bb8			jsr 	CPPrintVector
.8b9e		80 a2		bra $8b42			bra 	CIInputValue
.8ba0						_CIIsOkay:
.8ba0		ca		dex				dex 								; X = 0
.8ba1		20 ff 8b	jsr $8bff			jsr 	AssignVariable
.8ba4		60		rts				rts
.8ba5						CPPrintStringXA:
.8ba5		5a		phy				phy
.8ba6		86 37		stx $37				stx 	zTemp0+1
.8ba8		85 36		sta $36				sta 	zTemp0
.8baa		a0 00		ldy #$00			ldy 	#0
.8bac						_PSXALoop:
.8bac		b1 36		lda ($36),y			lda 	(zTemp0),y
.8bae		f0 06		beq $8bb6			beq 	_PSXAExit
.8bb0		20 b8 8b	jsr $8bb8			jsr 	CPPrintVector
.8bb3		c8		iny				iny
.8bb4		80 f6		bra $8bac			bra 	_PSXALoop
.8bb6						_PSXAExit:
.8bb6		7a		ply				ply
.8bb7		60		rts				rts
.8bb8						CPPrintVector:
.8bb8		2c 24 04	bit $0424			bit 	isPrintFlag 				; check if char only mode and call appropriate handler.
.8bbb		30 03		bmi $8bc0			bmi 	CPPVControl
.8bbd		4c 4d 80	jmp $804d			jmp 	EXTPrintNoControl
.8bc0						CPPVControl:
.8bc0		4c 43 80	jmp $8043			jmp 	EXTPrintCharacter
.8bc3						CPInputVector:
.8bc3		4c c0 81	jmp $81c0			jmp 	KNLGetSingleCharacter

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/let.asm

.8bc6						LetCommand:
.8bc6		a2 00		ldx #$00			ldx 	#0
.8bc8		b1 30		lda ($30),y			lda 	(codePtr),y
.8bca		c9 b9		cmp #$b9			cmp 	#KWD_AT
.8bcc		d0 14		bne $8be2			bne 	_LCStandard
.8bce		c8		iny				iny 								; skip equal
.8bcf		20 f1 9c	jsr $9cf1			jsr 	EvaluateTerm 				; get a number (the address of the reference)
.8bd2		20 6a 9b	jsr $9b6a			jsr 	Dereference 				; dereference it to a value
.8bd5		b5 50		lda $50,x			lda 	NSStatus,x 					; check integer
.8bd7		49 20		eor #$20			eor 	#NSBIsReference	 			; toggle reference
.8bd9		95 50		sta $50,x			sta 	NSStatus,x
.8bdb		29 20		and #$20			and 	#NSBIsReference 			; if it is now a reference, continue
.8bdd		d0 0f		bne $8bee			bne 	_LCMain
.8bdf		4c 7f a4	jmp $a47f			jmp 	TypeError 					; was a reference before.
.8be2						_LCStandard:
.8be2		ad 8f 98	lda $988f			lda 	PrecedenceLevel+"*"			; precedence > this
.8be5		20 a9 98	jsr $98a9			jsr 	EvaluateExpressionAtPrecedence
.8be8		b5 50		lda $50,x			lda 	NSStatus,x 					; is it a reference to an array marked as procedure ?
.8bea		c9 38		cmp #$38			cmp		#NSTProcedure+NSBIsReference
.8bec		f0 0e		beq $8bfc			beq 	_LetGoProc 					; it's a procedure call.
.8bee						_LCMain:
.8bee		a9 3d		lda #$3d			lda 	#"=" 						; check =
.8bf0		20 94 93	jsr $9394			jsr 	CheckNextA
.8bf3		e8		inx				inx 								; RHS
.8bf4		20 42 a2	jsr $a242			jsr 	EvaluateValue
.8bf7		ca		dex				dex
.8bf8		20 ff 8b	jsr $8bff			jsr 	AssignVariable
.8bfb		60		rts				rts
.8bfc						_LetGoProc:
.8bfc		4c 2e 8e	jmp $8e2e			jmp 	CallProcedure
.8bff						AssignVariable:
.8bff		b5 50		lda $50,x			lda 	NSStatus,x 					; check the string/number type bits match
.8c01		48		pha				pha 								; save a copy
.8c02		55 51		eor $51,x			eor 	NSStatus+1,x
.8c04		29 10		and #$10			and 	#NSBIsString
.8c06		d0 0b		bne $8c13			bne 	_ASError
.8c08		68		pla				pla 								; get back
.8c09		29 10		and #$10			and 	#NSBIsString 				; check type
.8c0b		d0 03		bne $8c10			bne 	_ASString
.8c0d		4c a8 9a	jmp $9aa8			jmp 	AssignNumber
.8c10						_ASString:
.8c10		4c 06 9b	jmp $9b06			jmp 	AssignString
.8c13						_ASError:
.8c13		4c 7f a4	jmp $a47f			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/list.asm

.8c16						Command_List:
.8c16		9c 22 04	stz $0422			stz 	listIndent 					; reset indent.
.8c19		a9 3f		lda #$3f			lda 	#$3F 						; silence at list.
.8c1b		20 6b 80	jsr $806b			jsr 	SNDCommand
.8c1e		b1 30		lda ($30),y			lda 	(codePtr),y
.8c20		29 c0		and #$c0			and 	#$C0 				 		; if so, we are list procedure() which is a seperate block
.8c22		c9 40		cmp #$40			cmp 	#$40  						; of code.
.8c24		f0 72		beq $8c98			beq 	_CLListProcedure
.8c26		64 5c		stz $5c				stz		NSMantissa0+4				; set the lower (slot 4) to 0 and upper (slot 7) to $FFFF
.8c28		64 64		stz $64				stz 	NSMantissa1+4 				; these are the default top and bottom.
.8c2a		a9 ff		lda #$ff			lda 	#$FF
.8c2c		85 5f		sta $5f				sta 	NSMantissa0+7
.8c2e		85 67		sta $67				sta 	NSMantissa1+7
.8c30		b1 30		lda ($30),y			lda 	(codePtr),y
.8c32		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8c34		f0 1a		beq $8c50			beq 	_CLSecond
.8c36		20 15 8d	jsr $8d15			jsr 	CLIsDigit 					; if not digit, list all
.8c39		b0 20		bcs $8c5b			bcs 	_CLStart
.8c3b		a2 04		ldx #$04			ldx 	#4 							; get 1st range into slot 4
.8c3d		20 7d a2	jsr $a27d			jsr 	Evaluate16BitInteger
.8c40		b1 30		lda ($30),y			lda 	(codePtr),y
.8c42		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8c44		f0 0a		beq $8c50			beq 	_CLSecond 					; if so go get it
.8c46		a5 5c		lda $5c				lda 	NSMantissa0+4 				; copy 4->7
.8c48		85 5f		sta $5f				sta 	NSMantissa0+7
.8c4a		a5 64		lda $64				lda 	NSMantissa1+4
.8c4c		85 67		sta $67				sta 	NSMantissa1+7
.8c4e		80 0b		bra $8c5b			bra 	_CLStart
.8c50						_CLSecond:
.8c50		c8		iny				iny 								; consume comma
.8c51		20 15 8d	jsr $8d15			jsr 	CLIsDigit 					; digit found
.8c54		b0 05		bcs $8c5b			bcs 	_CLStart 					; if not, continue listing
.8c56		a2 07		ldx #$07			ldx 	#7 							; load 2nd range into slot 7
.8c58		20 7d a2	jsr $a27d			jsr 	Evaluate16BitInteger
.8c5b						_CLStart
.8c5b		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8c5d		85 30		sta $30				sta 	codePtr
.8c5f		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8c61		85 31		sta $31				sta 	codePtr+1
.8c63						_CLLoop:
.8c63		a5 f2		lda $f2				lda 	kernel.args.events.pending 	; load pending event count into accumulator
.8c65		f0 03		beq $8c6a			beq 	_NoEvents					; if zero, skip with Z flag set.
.8c67		20 40 81	jsr $8140			jsr 	ProcessEvents
.8c6a						_NoEvents:
.8c6a		d0 27		bne $8c93			bne 	_CLBreak
.8c6c		b2 30		lda ($30)			lda 	(codePtr)
.8c6e		f0 20		beq $8c90			beq 	_CLExit
.8c70		a2 04		ldx #$04			ldx 	#4 							; check range every time, line numbers aren't in order.
.8c72		20 04 8d	jsr $8d04			jsr 	CLCompareLineNo
.8c75		90 0c		bcc $8c83			bcc 	_CLNext
.8c77		a2 07		ldx #$07			ldx 	#7
.8c79		20 04 8d	jsr $8d04			jsr 	CLCompareLineNo
.8c7c		f0 02		beq $8c80			beq 	_CLDoThisOne
.8c7e		b0 03		bcs $8c83			bcs 	_CLNext
.8c80						_CLDoThisOne:
.8c80		20 f1 8c	jsr $8cf1			jsr 	CLListOneLine 				; routine to list the current line.
.8c83						_CLNext:
.8c83		18		clc				clc
.8c84		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8c86		65 30		adc $30				adc 	codePtr
.8c88		85 30		sta $30				sta 	codePtr
.8c8a		90 02		bcc $8c8e			bcc 	_CREExit
.8c8c		e6 31		inc $31				inc 	codePtr+1 					; carry
.8c8e						_CREExit:
.8c8e		80 d3		bra $8c63			bra 	_CLLoop
.8c90						_CLExit:
.8c90		4c 01 88	jmp $8801			jmp 	WarmStart
.8c93						_CLBreak:
.8c93		a9 01		lda #$01		lda	#1
.8c95		4c 9d 93	jmp $939d		jmp	ErrorHandler
.8c98						_CLListProcedure:
.8c98		b1 30		lda ($30),y			lda 	(codePtr),y
.8c9a		85 38		sta $38				sta 	zTemp1
.8c9c		c8		iny				iny
.8c9d		b1 30		lda ($30),y			lda 	(codePtr),y
.8c9f		85 39		sta $39				sta 	zTemp1+1
.8ca1		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8ca3		85 30		sta $30				sta 	codePtr
.8ca5		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8ca7		85 31		sta $31				sta 	codePtr+1
.8ca9						_CLLPSearch:
.8ca9		b2 30		lda ($30)			lda 	(codePtr)
.8cab		c9 00		cmp #$00			cmp 	#0 							; if zero, end
.8cad		f0 e1		beq $8c90			beq 	_CLExit
.8caf		a0 03		ldy #$03			ldy 	#3 							; check if PROC something
.8cb1		b1 30		lda ($30),y			lda 	(codePtr),y
.8cb3		c9 b0		cmp #$b0			cmp 	#KWD_PROC
.8cb5		d0 0e		bne $8cc5			bne 	_CLLPNext
.8cb7		c8		iny				iny 								; check if PROC this.
.8cb8		b1 30		lda ($30),y			lda 	(codePtr),y
.8cba		c5 38		cmp $38				cmp 	zTemp1 						; does it match ?
.8cbc		d0 07		bne $8cc5			bne 	_CLLPNext
.8cbe		c8		iny				iny
.8cbf		b1 30		lda ($30),y			lda 	(codePtr),y
.8cc1		c5 39		cmp $39				cmp 	zTemp1+1
.8cc3		f0 0d		beq $8cd2			beq 	_CLLPFound
.8cc5						_CLLPNext:
.8cc5		18		clc				clc
.8cc6		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8cc8		65 30		adc $30				adc 	codePtr
.8cca		85 30		sta $30				sta 	codePtr
.8ccc		90 02		bcc $8cd0			bcc 	_CREExit
.8cce		e6 31		inc $31				inc 	codePtr+1 					; carry
.8cd0						_CREExit:
.8cd0		80 d7		bra $8ca9			bra 	_CLLPSearch
.8cd2						_CLLPFound:
.8cd2		b2 30		lda ($30)			lda 	(codePtr)
.8cd4		f0 ba		beq $8c90			beq 	_CLExit
.8cd6		a0 03		ldy #$03			ldy 	#3 							; get first keyword
.8cd8		b1 30		lda ($30),y			lda 	(codePtr),y
.8cda		48		pha				pha
.8cdb		20 f1 8c	jsr $8cf1			jsr 	CLListOneLine 				; list line and go forward
.8cde		18		clc				clc
.8cdf		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8ce1		65 30		adc $30				adc 	codePtr
.8ce3		85 30		sta $30				sta 	codePtr
.8ce5		90 02		bcc $8ce9			bcc 	_CREExit
.8ce7		e6 31		inc $31				inc 	codePtr+1 					; carry
.8ce9						_CREExit:
.8ce9		68		pla				pla 								; reached ENDPROC ?
.8cea		c9 b4		cmp #$b4			cmp 	#KWD_ENDPROC
.8cec		d0 e4		bne $8cd2			bne 	_CLLPFound
.8cee		4c 01 88	jmp $8801			jmp 	WarmStart
.8cf1						CLListOneLine:
.8cf1		20 42 93	jsr $9342			jsr 	ScanGetCurrentLineStep 		; get indent adjust.
.8cf4		20 7f 80	jsr $807f			jsr 	TKListConvertLine 			; convert line into token Buffer
.8cf7		a2 04		ldx #$04			ldx 	#(tokenBuffer >> 8) 		; print that line
.8cf9		a9 29		lda #$29			lda 	#(tokenBuffer & $FF)
.8cfb		20 fc 93	jsr $93fc			jsr 	PrintStringXA
.8cfe		a9 0d		lda #$0d			lda 	#13 						; new line
.8d00		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.8d03		60		rts				rts
.8d04						CLCompareLineNo:
.8d04		38		sec				sec
.8d05		a0 01		ldy #$01			ldy 	#1
.8d07		b1 30		lda ($30),y			lda 	(codePtr),y
.8d09		f5 58		sbc $58,x			sbc 	NSMantissa0,x
.8d0b		85 36		sta $36				sta 	zTemp0
.8d0d		c8		iny				iny
.8d0e		b1 30		lda ($30),y			lda 	(codePtr),y
.8d10		f5 60		sbc $60,x			sbc 	NSMantissa1,x
.8d12		05 36		ora $36				ora 	zTemp0
.8d14		60		rts				rts
.8d15						CLIsDigit:
.8d15		b1 30		lda ($30),y			lda 	(codePtr),y
.8d17		c9 30		cmp #$30			cmp 	#"0"
.8d19		90 03		bcc $8d1e			bcc	 	_CLIDExitFalse
.8d1b		c9 3a		cmp #$3a			cmp 	#"9"+1
.8d1d		60		rts				rts
.8d1e						_CLIDExitFalse:
.8d1e		38		sec				sec
.8d1f		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/local.asm

.8d20						Command_LOCAL:
.8d20		a2 00		ldx #$00			ldx 	#0 							; at level 0
.8d22		20 2e 8d	jsr $8d2e			jsr 	LocaliseNextTerm 			; convert term to a local.
.8d25		b1 30		lda ($30),y			lda 	(codePtr),y
.8d27		c8		iny				iny
.8d28		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8d2a		f0 f4		beq $8d20			beq 	Command_LOCAL 				; if so, localise another variable.
.8d2c		88		dey				dey 								; unpick pre-get
.8d2d		60		rts				rts
.8d2e						LocaliseNextTerm:
.8d2e		20 f1 9c	jsr $9cf1			jsr 	EvaluateTerm 				; evaluate the term
.8d31		b5 50		lda $50,x			lda 	NSStatus,x
.8d33		29 20		and #$20			and 	#NSBIsReference 			; check it is a reference, must be a variable.
.8d35		f0 5c		beq $8d93			beq		_LNTError
.8d37		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy address of variable to zTemp0
.8d39		85 36		sta $36				sta 	zTemp0
.8d3b		b5 60		lda $60,x			lda 	NSMantissa1,x
.8d3d		85 37		sta $37				sta  	zTemp0+1
.8d3f		b5 50		lda $50,x			lda 	NSStatus,x 					; figure out what it is.
.8d41		29 10		and #$10			and 	#NSBIsString
.8d43		d0 1e		bne $8d63			bne 	_LNTPushString
.8d45		5a		phy				phy
.8d46		a0 00		ldy #$00			ldy 	#0 							; push 0 to 4 inclusive, the number values, on the stack, and zero them as you go.
.8d48						_LNTPushNumLoop:
.8d48		b1 36		lda ($36),y			lda		(zTemp0),y
.8d4a		20 00 b3	jsr $b300			jsr 	StackPushByte
.8d4d		c8		iny				iny
.8d4e		c0 05		cpy #$05			cpy 	#5
.8d50		d0 f6		bne $8d48			bne 	_LNTPushNumLoop
.8d52		a5 36		lda $36				lda 	zTemp0 						; push the actual target address to write on the stack
.8d54		20 00 b3	jsr $b300			jsr 	StackPushByte
.8d57		a5 37		lda $37				lda 	zTemp0+1
.8d59		20 00 b3	jsr $b300			jsr 	StackPushByte
.8d5c		a9 01		lda #$01			lda 	#STK_LOCALN 				; push local-number marker.
.8d5e		20 00 b3	jsr $b300			jsr 	StackPushByte
.8d61		7a		ply				ply
.8d62		60		rts				rts
.8d63						_LNTPushString:
.8d63		5a		phy				phy
.8d64		b2 36		lda ($36)			lda 	(zTemp0) 					; put address of string in zTemp1
.8d66		85 38		sta $38				sta 	zTemp1
.8d68		a0 01		ldy #$01			ldy 	#1
.8d6a		b1 36		lda ($36),y			lda 	(zTemp0),y
.8d6c		85 39		sta $39				sta 	zTemp1+1
.8d6e		a0 00		ldy #$00			ldy 	#0 							; output string
.8d70		c9 00		cmp #$00			cmp 	#0 							; if not assigned string
.8d72		f0 0a		beq $8d7e			beq 	_LNTStringOut
.8d74						_LNTPushStrLoop:
.8d74		b1 38		lda ($38),y			lda 	(zTemp1),y
.8d76		f0 06		beq $8d7e			beq 	_LNTStringOut
.8d78		20 00 b3	jsr $b300			jsr 	StackPushByte
.8d7b		c8		iny				iny
.8d7c		80 f6		bra $8d74			bra 	_LNTPushStrLoop
.8d7e						_LNTStringOut:
.8d7e		98		tya				tya									; output length (chars written).
.8d7f		20 00 b3	jsr $b300			jsr 	StackPushByte
.8d82		b5 58		lda $58,x			lda 	NSMantissa0,x 				; output address of the string record *not* the string itself
.8d84		20 00 b3	jsr $b300			jsr 	StackPushByte
.8d87		b5 60		lda $60,x			lda 	NSMantissa1,x
.8d89		20 00 b3	jsr $b300			jsr 	StackPushByte
.8d8c		a9 02		lda #$02			lda 	#STK_LOCALS 				; push local-string marker.
.8d8e		20 00 b3	jsr $b300			jsr 	StackPushByte
.8d91		7a		ply				ply
.8d92		60		rts				rts
.8d93						_LNTError:
.8d93		4c 75 a4	jmp $a475			jmp 	SyntaxError
.8d96						LocalPopValue:
.8d96		20 18 b3	jsr $b318			jsr 	StackPopByte
.8d99		c9 01		cmp #$01			cmp 	#STK_LOCALN 				; if not local-N
.8d9b		d0 17		bne $8db4			bne 	_LPVString
.8d9d		20 18 b3	jsr $b318			jsr 	StackPopByte 				; address
.8da0		85 37		sta $37				sta 	zTemp0+1
.8da2		20 18 b3	jsr $b318			jsr 	StackPopByte
.8da5		85 36		sta $36				sta 	zTemp0
.8da7		5a		phy				phy
.8da8		a0 04		ldy #$04			ldy 	#4 							; copy back
.8daa						_LPVNumberCopy:
.8daa		20 18 b3	jsr $b318			jsr 	StackPopByte
.8dad		91 36		sta ($36),y			sta 	(zTemp0),y
.8daf		88		dey				dey
.8db0		10 f8		bpl $8daa			bpl 	_LPVNumberCopy
.8db2		7a		ply				ply 								; and complete
.8db3		60		rts				rts
.8db4						_LPVString:
.8db4		20 18 b3	jsr $b318			jsr 	StackPopByte 				; address of record copied to zTemp0
.8db7		85 37		sta $37				sta 	zTemp0+1
.8db9		20 18 b3	jsr $b318			jsr 	StackPopByte
.8dbc		85 36		sta $36				sta 	zTemp0
.8dbe		5a		phy				phy
.8dbf		b2 36		lda ($36)			lda 	(zTemp0) 					; address to write string to copied to zTemp1
.8dc1		85 38		sta $38				sta 	zTemp1
.8dc3		a0 01		ldy #$01			ldy 	#1
.8dc5		b1 36		lda ($36),y			lda 	(zTemp0),y
.8dc7		85 39		sta $39				sta 	zTemp1+1
.8dc9		20 18 b3	jsr $b318			jsr 	StackPopByte 				; # chars to get => y
.8dcc		a8		tay				tay
.8dcd		a5 39		lda $39				lda 	zTemp1+1 					; if no target (e.g. was "" originally) exit
.8dcf		f0 0e		beq $8ddf			beq 	_LPVStringCopied
.8dd1		a9 00		lda #$00			lda 	#0 							; NULL on end
.8dd3		91 38		sta ($38),y			sta 	(zTemp1),y
.8dd5						_LPVStringCopy:
.8dd5		88		dey				dey
.8dd6		30 07		bmi $8ddf			bmi 	_LPVStringCopied
.8dd8		20 18 b3	jsr $b318			jsr 	StackPopByte
.8ddb		91 38		sta ($38),y			sta 	(zTemp1),y
.8ddd		80 f6		bra $8dd5			bra 	_LPVStringCopy
.8ddf						_LPVStringCopied:
.8ddf		fa		plx				plx
.8de0		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/new.asm

.8de1						NewCommand:
.8de1		20 e7 8d	jsr $8de7			jsr 	NewProgram 					; does the actual NEW.
.8de4		4c 01 88	jmp $8801			jmp 	WarmStart 					; and warm starts straight away.
.8de7						NewProgram:
.8de7		20 ef a6	jsr $a6ef			jsr 	MemoryNew
.8dea		9c 00 10	stz $1000			stz 	VariableSpace 				; erase all variables.
.8ded		20 29 92	jsr $9229			jsr 	ClearSystem					; clear everything.
.8df0		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/poke.asm

.8df1						PokeBCommand:
.8df1		a9 01		lda #$01			lda 	#1
.8df3		80 0c		bra $8e01			bra 	PokeCommand
.8df5						PokeWCommand:
.8df5		a9 02		lda #$02			lda 	#2
.8df7		80 08		bra $8e01			bra 	PokeCommand
.8df9						PokeLCommand:
.8df9		a9 03		lda #$03			lda 	#3
.8dfb		80 04		bra $8e01			bra 	PokeCommand
.8dfd						PokeDCommand:
.8dfd		a9 04		lda #$04			lda 	#4
.8dff		80 00		bra $8e01			bra 	PokeCommand
.8e01						PokeCommand:
.8e01		48		pha				pha 								; save count on stack
.8e02		a2 00		ldx #$00			ldx 	#0 							; bottom of stack
.8e04		20 7d a2	jsr $a27d			jsr		Evaluate16BitInteger 		; address
.8e07		20 8c 93	jsr $938c			jsr 	CheckComma
.8e0a		e8		inx				inx
.8e0b		20 6a a2	jsr $a26a			jsr		EvaluateInteger 			; data
.8e0e		a5 58		lda $58				lda 	NSMantissa0 				; copy address
.8e10		85 36		sta $36				sta 	zTemp0
.8e12		a5 60		lda $60				lda 	NSMantissa1
.8e14		85 37		sta $37				sta 	zTemp0+1
.8e16		68		pla				pla 								; count -> zTemp1
.8e17		85 38		sta $38				sta 	zTemp1
.8e19		5a		phy				phy 								; save Y position.
.8e1a		a0 00		ldy #$00			ldy 	#0 							; index to write
.8e1c		a2 00		ldx #$00			ldx 	#0 							; index to read
.8e1e						_PCLoop:
.8e1e		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; read byte from mantissa and copy out
.8e20		91 36		sta ($36),y			sta 	(zTemp0),y
.8e22		c8		iny				iny 								; next byte to write
.8e23		8a		txa				txa 								; next byte to read - stack layout in 04data.inc
.8e24		18		clc				clc
.8e25		69 08		adc #$08			adc 	#MathStackSize
.8e27		aa		tax				tax
.8e28		c6 38		dec $38				dec 	zTemp1 						; done them all
.8e2a		d0 f2		bne $8e1e			bne 	_PCLoop
.8e2c		7a		ply				ply 								; restore position.
.8e2d		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/procedure.asm

=2						ParameterStackPos = 2
.8e2e						CallProcedure:
.8e2e		a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start storing parameters at 2.
.8e30		b1 30		lda ($30),y			lda 	(codePtr),y
.8e32		c9 29		cmp #$29			cmp 	#KWD_RPAREN
.8e34		f0 0c		beq $8e42			beq 	_CPEndParam
.8e36						_CPParamLoop:
.8e36		20 42 a2	jsr $a242			jsr 	EvaluateValue 				; get parameter onto stack
.8e39		e8		inx				inx 								; bump next stack
.8e3a		b1 30		lda ($30),y			lda 	(codePtr),y
.8e3c		c8		iny				iny
.8e3d		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if comma, go back and try again.
.8e3f		f0 f5		beq $8e36			beq 	_CPParamLoop
.8e41		88		dey				dey 								; unpick.
.8e42						_CPEndParam:
.8e42		8e 12 04	stx $0412			stx 	lastParameter 				; save the last parameters index.
.8e45		c8		iny				iny									; skip right bracket
.8e46		a9 b3		lda #$b3			lda 	#STK_PROC+3 				; allocate 6 bytes on the return stack.
.8e48		20 21 b3	jsr $b321			jsr 	StackOpen
.8e4b		20 66 b3	jsr $b366			jsr 	STKSaveCodePosition 		; save loop position
.8e4e		a5 58		lda $58				lda 	NSMantissa0 				; copy variable (e.g. procedure) address to zTemp0
.8e50		85 36		sta $36				sta 	zTemp0 						; this is the DATA not the RECORD
.8e52		a5 60		lda $60				lda 	NSMantissa1
.8e54		85 37		sta $37				sta 	zTemp0+1
.8e56		a0 01		ldy #$01			ldy 	#1 							; copy code address back.
.8e58		b2 36		lda ($36)			lda 	(zTemp0)
.8e5a		85 30		sta $30				sta 	safePtr
.8e5c		b1 36		lda ($36),y			lda 	(zTemp0),y
.8e5e		85 31		sta $31				sta 	safePtr+1
.8e60		c8		iny				iny
.8e61		b1 36		lda ($36),y			lda 	(zTemp0),y
.8e63		85 32		sta $32				sta 	safePtr+2
.8e65		c8		iny				iny
.8e66		b1 36		lda ($36),y			lda 	(zTemp0),y
.8e68		85 33		sta $33				sta 	safePtr+3
.8e6a		c8		iny				iny 								; get Y offset -> Y
.8e6b		b1 36		lda ($36),y			lda 	(zTemp0),y
.8e6d		a8		tay				tay
.8e6e		a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start position of parameters
.8e70		ec 12 04	cpx $0412			cpx	 	lastParameter 				; check zero parameters at the start
.8e73		f0 13		beq $8e88			beq 	_ParamExit 					; if so, exit.
.8e75						_ParamExtract:
.8e75		ca		dex				dex 								; put a local term on the level before
.8e76		20 2e 8d	jsr $8d2e			jsr 	LocaliseNextTerm			; also pushes original param value to basic stack
.8e79		20 ff 8b	jsr $8bff			jsr 	AssignVariable 				; assign stacked value to the variable.
.8e7c		e8		inx				inx 								; advance to next parameter to do.
.8e7d		e8		inx				inx
.8e7e		ec 12 04	cpx $0412			cpx 	lastParameter 				; are we done ?
.8e81		f0 05		beq $8e88			beq 	_ParamExit
.8e83		20 8c 93	jsr $938c			jsr 	CheckComma 					; comma seperating parameters
.8e86		80 ed		bra $8e75			bra 	_ParamExtract
.8e88						_ParamExit:
.8e88		20 84 93	jsr $9384			jsr 	CheckRightBracket 			; check )
.8e8b		60		rts				rts 								; and continue from here
.8e8c						Command_ENDPROC:
.8e8c		a9 b0		lda #$b0			lda 	#STK_PROC 					; check TOS is this
.8e8e		a2 14		ldx #$14			ldx 	#ERRID_PROC
.8e90		20 4e b3	jsr $b34e			jsr 	StackCheckFrame
.8e93		20 77 b3	jsr $b377			jsr 	STKLoadCodePosition 		; restore code position
.8e96		20 40 b3	jsr $b340			jsr 	StackClose
.8e99		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/read.asm

.8e9a						Command_Read:
.8e9a		a2 00		ldx #$00			ldx 	#0 							; evaluate the term which is the var/array element to assign
.8e9c		20 f1 9c	jsr $9cf1			jsr 	EvaluateTerm
.8e9f		b5 50		lda $50,x			lda 	NSStatus,x
.8ea1		29 20		and #$20			and 	#NSBIsReference				; get status byte on stack, identifies int, float, string.
.8ea3		f0 4f		beq $8ef4			beq 	_CRSyntax 					; check reference (bit 0) fail if not a reference.
.8ea5		20 3d 8f	jsr $8f3d			jsr 	SwapDataCodePtrs 			; swap code and data
.8ea8		ad 18 04	lda $0418			lda 	inDataStatement 			; if in a data statement, we don't need to search
.8eab		d0 25		bne $8ed2			bne 	_CRContinueData  			; forward for the next one.
.8ead		b2 30		lda ($30)			lda 	(codePtr)
.8eaf		f0 1c		beq $8ecd			beq 	_CRNoData
.8eb1						_CRKeepSearching:
.8eb1		a9 c0		lda #$c0			lda 	#KWD_DATA 					; scan for instruction
.8eb3		a2 80		ldx #$80			ldx 	#KWC_EOL
.8eb5		20 df 92	jsr $92df			jsr 	ScanForward
.8eb8		c9 c0		cmp #$c0			cmp 	#KWD_DATA 					; found data ?
.8eba		f0 16		beq $8ed2			beq 	_CRHaveData 				; found it
.8ebc		18		clc				clc
.8ebd		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8ebf		65 30		adc $30				adc 	codePtr
.8ec1		85 30		sta $30				sta 	codePtr
.8ec3		90 02		bcc $8ec7			bcc 	_CREExit
.8ec5		e6 31		inc $31				inc 	codePtr+1 					; carry
.8ec7						_CREExit:
.8ec7		a0 03		ldy #$03			ldy 	#3 							; start of line.
.8ec9		b2 30		lda ($30)			lda 	(codePtr)
.8ecb		d0 e4		bne $8eb1			bne 	_CRKeepSearching
.8ecd						_CRNoData:
.8ecd		a9 0b		lda #$0b		lda	#11
.8ecf		4c 9d 93	jmp $939d		jmp	ErrorHandler
.8ed2						_CRHaveData:
.8ed2						_CRContinueData:
.8ed2		a2 01		ldx #$01			ldx 	#1
.8ed4		20 42 a2	jsr $a242			jsr 	EvaluateValue 				; evaluate value into slot # 1
.8ed7		ca		dex				dex
.8ed8		20 ff 8b	jsr $8bff			jsr		AssignVariable 				; do the assignment
.8edb		9c 18 04	stz $0418			stz 	inDataStatement 			; clear in data flag
.8ede		b1 30		lda ($30),y			lda 	(codePtr),y
.8ee0		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not, end of data statement and exit
.8ee2		d0 04		bne $8ee8			bne 	_CRSwapBack
.8ee4		c8		iny				iny 								; consume comma
.8ee5		ee 18 04	inc $0418			inc 	inDataStatement 			; set in data statement currently.
.8ee8						_CRSwapBack:
.8ee8		20 3d 8f	jsr $8f3d			jsr 	SwapDataCodePtrs			; swap them back.
.8eeb		b1 30		lda ($30),y			lda 	(codePtr),y
.8eed		c8		iny				iny
.8eee		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8ef0		f0 a8		beq $8e9a			beq 	Command_Read 				; if so go round again.
.8ef2		88		dey				dey 								; unpick get.
.8ef3		60		rts				rts
.8ef4						_CRSyntax:
.8ef4		4c 75 a4	jmp $a475			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/rem.asm

.8ef7						RemCommand:
.8ef7		b1 30		lda ($30),y			lda 	(codePtr),y
.8ef9		c9 ff		cmp #$ff			cmp 	#KWC_STRING
.8efb		d0 06		bne $8f03			bne 	_RMExit
.8efd		c8		iny				iny 								; point to offset
.8efe		98		tya				tya 								; A = offset position
.8eff		38		sec				sec 								; add size +1 hence SEC
.8f00		71 30		adc ($30),y			adc 	(codePtr),y
.8f02		a8		tay				tay 								; make current position.
.8f03						_RMExit:
.8f03		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/repeat.asm

.8f04						Command_REPEAT:
.8f04		a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; allocate 6 bytes on the return stack.
.8f06		20 21 b3	jsr $b321			jsr 	StackOpen
.8f09		20 66 b3	jsr $b366			jsr 	STKSaveCodePosition 		; save loop position
.8f0c		60		rts				rts
.8f0d						Command_UNTIL:
.8f0d		a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; check REPEAT is TOS
.8f0f		a2 0f		ldx #$0f			ldx 	#ERRID_REPEAT 				; this error
.8f11		20 4e b3	jsr $b34e			jsr 	StackCheckFrame
.8f14		a2 00		ldx #$00			ldx 	#0
.8f16		20 4b a2	jsr $a24b			jsr 	EvaluateNumber 				; work out the number
.8f19		20 1f a3	jsr $a31f			jsr 	NSMIsZero 					; check if zero
.8f1c		f0 04		beq $8f22			beq 	_CULoopBack 				; if so keep looping
.8f1e		20 40 b3	jsr $b340			jsr 	StackClose		 			; return
.8f21		60		rts				rts
.8f22						_CULoopBack:
.8f22		20 77 b3	jsr $b377			jsr 	STKLoadCodePosition 		; loop back
.8f25		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/restore.asm

.8f26						Command_Restore:
.8f26		20 3d 8f	jsr $8f3d			jsr 	SwapDataCodePtrs 			; swap code and data
.8f29		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8f2b		85 30		sta $30				sta 	codePtr
.8f2d		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8f2f		85 31		sta $31				sta 	codePtr+1
.8f31		20 3d 8f	jsr $8f3d			jsr 	SwapDataCodePtrs 			; put them back
.8f34		a9 03		lda #$03			lda 	#3 							; start at offset 3, e.g. first instruction of first line.
.8f36		8d 17 04	sta $0417			sta 	dataPointer+4   			; (read checks not EOF)
.8f39		9c 18 04	stz $0418			stz 	inDataStatement 			; not in data statement
.8f3c		60		rts				rts
.8f3d						SwapDataCodePtrs:
.8f3d		da		phx				phx
.8f3e		a2 03		ldx #$03			ldx 	#3 							; swap 32 bit code pointer over
.8f40						_SDCPLoop:
.8f40		b5 30		lda $30,x			lda 	safePtr,x
.8f42		48		pha				pha
.8f43		bd 13 04	lda $0413,x			lda 	dataPointer,x
.8f46		95 30		sta $30,x			sta 	safePtr,x
.8f48		68		pla				pla
.8f49		9d 13 04	sta $0413,x			sta 	dataPointer,x
.8f4c		ca		dex				dex
.8f4d		10 f1		bpl $8f40			bpl 	_SDCPLoop
.8f4f		ad 17 04	lda $0417			lda 	dataPointer+4 				; swap Y position over.
.8f52		8c 17 04	sty $0417			sty 	dataPointer+4
.8f55		a8		tay				tay
.8f56		fa		plx				plx
.8f57		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/run.asm

.8f58						EOLCommand:
.8f58		18		clc				clc
.8f59		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8f5b		65 30		adc $30				adc 	codePtr
.8f5d		85 30		sta $30				sta 	codePtr
.8f5f		90 02		bcc $8f63			bcc 	_CREExit
.8f61		e6 31		inc $31				inc 	codePtr+1 					; carry
.8f63						_CREExit:
.8f63		80 18		bra $8f7d			bra 	RunNewLine
.8f65						CommandRUNOptLoad:
.8f65		b1 30		lda ($30),y			lda 	(codePtr),y
.8f67		c9 80		cmp #$80			cmp 	#KWC_EOL 					; EOL / : just RUN
.8f69		f0 07		beq $8f72			beq 	RunCurrentProgram
.8f6b		c9 3a		cmp #$3a			cmp 	#KWD_COLON
.8f6d		f0 03		beq $8f72			beq 	RunCurrentProgram
.8f6f		20 d0 ac	jsr $acd0			jsr 	LoadFile 					; load expected name file.
.8f72						RunCurrentProgram:
.8f72		20 29 92	jsr $9229			jsr 	ClearSystem 				; clear variable/stacks/etc.
.8f75		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8f77		85 30		sta $30				sta 	codePtr
.8f79		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8f7b		85 31		sta $31				sta 	codePtr+1
.8f7d						RunNewLine:
.8f7d		b2 30		lda ($30)			lda 	(codePtr)
.8f7f		f0 74		beq $8ff5			beq 	CRNoProgram         		; no then END.
.8f81		a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack
.8f83		9a		txs				txs
.8f84						RUNCodePointerLine:
.8f84		a0 02		ldy #$02			ldy 	#2 							; start of program
.8f86						_CRIncMainLoop:
.8f86		a5 f2		lda $f2				lda 	kernel.args.events.pending 	; load pending event count into accumulator
.8f88		f0 03		beq $8f8d			beq 	_NoEvents					; if zero, skip with Z flag set.
.8f8a		20 40 81	jsr $8140			jsr 	ProcessEvents
.8f8d						_NoEvents:
.8f8d		d0 61		bne $8ff0			bne 	_CRBreak
.8f8f		a5 01		lda $01				lda 	1 							; save I/O 0
.8f91		48		pha				pha
.8f92		64 01		stz $01				stz 	1 							; access I/O Page 0
.8f94		38		sec				sec 								; calculate timer - LastTick
.8f95		ad 59 d6	lda $d659			lda 	$D659
.8f98		cd 5e 06	cmp $065e			cmp 	LastTick
.8f9b		f0 06		beq $8fa3			beq 	_NoFireTick 				; if < 3 clocks don't fire.
.8f9d		8d 5e 06	sta $065e			sta 	LastTick 					; update last timer
.8fa0		20 6f 82	jsr $826f			jsr 	TickHandler 							; go do the code.
.8fa3						_NoFireTick:
.8fa3		68		pla				pla 								; restore I/O 0
.8fa4		85 01		sta $01				sta 	1
.8fa6						_CRNoBreakCheck:
.8fa6		c8		iny				iny									; next token
.8fa7						_CRMainLoop:
.8fa7		9c 0c 04	stz $040c			stz 	stringInitialised 			; clear the temporary string initialised flag.
.8faa		b1 30		lda ($30),y			lda 	(codePtr),y
.8fac		10 10		bpl $8fbe			bpl 	_CRNotKeyword				; not a token.
.8fae		c9 ae		cmp #$ae			cmp 	#KWC_LAST_UNARY+1 			; if after unary, legitimate command
.8fb0		b0 04		bcs $8fb6			bcs 	_CRIsKeyword
.8fb2		c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if unary, syntax error.
.8fb4		b0 34		bcs $8fea			bcs		_CRSyntaxError
.8fb6						_CRIsKeyword:
.8fb6		c8		iny				iny 								; consume command
.8fb7		0a		asl a				asl 	a 							; double losing the MSB which is '1' as tokens are $80-$FF
.8fb8		aa		tax				tax 								; put in X for vector jump
.8fb9		20 ed 8f	jsr $8fed			jsr 	_CRCallVector0 				; call the vector - effectively jsr (vectortable,X)
.8fbc		80 e9		bra $8fa7			bra 	_CRMainLoop 				; and loop round
.8fbe						_CRNotKeyword:
.8fbe		c9 3a		cmp #$3a			cmp 	#KWD_COLON 					; if a :, consume it and go round.
.8fc0		f0 c4		beq $8f86			beq 	_CRIncMainLoop
.8fc2		c9 40		cmp #$40			cmp 	#$40 						; variable/call reference
.8fc4		90 05		bcc $8fcb			bcc 	_CRNotVariable
.8fc6						_CRGoLet:
.8fc6		20 c6 8b	jsr $8bc6			jsr 	LetCommand
.8fc9		80 dc		bra $8fa7			bra 	_CRMainLoop
.8fcb						_CRNotVariable:
.8fcb		c9 b9		cmp #$b9			cmp 	#KWD_AT 					; handle @
.8fcd		f0 f7		beq $8fc6			beq 	_CRGoLet
.8fcf		c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; handle ? !
.8fd1		f0 f3		beq $8fc6			beq 	_CRGoLet
.8fd3		c9 21		cmp #$21			cmp 	#KWD_PLING
.8fd5		f0 ef		beq $8fc6			beq 	_CRGoLet
.8fd7		c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; handle ' (comment)
.8fd9		f0 09		beq $8fe4			beq 	_CRGoRem
.8fdb		c9 2e		cmp #$2e			cmp 	#KWD_PERIOD 				; handle . (assembler label)
.8fdd		d0 0b		bne $8fea			bne 	_CRSyntaxError
.8fdf		20 4a 86	jsr $864a			jsr 	LabelHere
.8fe2		80 c3		bra $8fa7			bra 	_CRMainLoop
.8fe4						_CRGoRem:
.8fe4		c8		iny				iny
.8fe5		20 f7 8e	jsr $8ef7			jsr 	RemCommand
.8fe8		80 bd		bra $8fa7			bra 	_CRMainLoop
.8fea						_CRSyntaxError:
.8fea		4c 75 a4	jmp $a475			jmp 	SyntaxError
.8fed						_CRCallVector0:
.8fed		7c 8c 90	jmp ($908c,x)			jmp 	(VectorSet0,x)
.8ff0						_CRBreak:
.8ff0		a9 01		lda #$01		lda	#1
.8ff2		4c 9d 93	jmp $939d		jmp	ErrorHandler
.8ff5						CRNoProgram:
.8ff5		4c 5c 89	jmp $895c			jmp 	EndCommand
.8ff8						Shift1Command:
.8ff8		b1 30		lda ($30),y			lda 	(codePtr),y
.8ffa		c8		iny				iny
.8ffb		0a		asl a				asl 	a
.8ffc		aa		tax				tax
.8ffd		7c 46 91	jmp ($9146,x)			jmp 	(VectorSet1,x)
.9000						Shift2Command:
.9000		b1 30		lda ($30),y			lda 	(codePtr),y
.9002		c8		iny				iny
.9003		0a		asl a				asl 	a
.9004		aa		tax				tax
.9005		7c 9c 91	jmp ($919c,x)			jmp 	(VectorSet2,x)
.9008						Unused1:
.9008						Unused2:
.9008						Unused3:
.9008						Unused4:
.9008		4c 75 a4	jmp $a475			jmp 	SyntaxError
>900b								.align 2

;******  Processing file: ./common/commands/../generated/vectors.dat

.900c						VectorSetPunc:
>900c		5b 96					.word	ShiftLeft                        ; $00 <<
>900e		46 94					.word	BinaryCompareLessEqual           ; $01 <=
>9010		3c 94					.word	BinaryCompareNotEqual            ; $02 <>
>9012		75 a4					.word	SyntaxError                      ; $03 !!3
>9014		75 a4					.word	SyntaxError                      ; $04 ><
>9016		50 94					.word	BinaryCompareGreaterEqual        ; $05 >=
>9018		5e 96					.word	ShiftRight                       ; $06 >>
>901a		75 a4					.word	SyntaxError                      ; $07 !!7
>901c		75 a4					.word	SyntaxError                      ; $08 !!8
>901e		75 a4					.word	SyntaxError                      ; $09 !!9
>9020		75 a4					.word	SyntaxError                      ; $0a !!10
>9022		75 a4					.word	SyntaxError                      ; $0b !!11
>9024		75 a4					.word	SyntaxError                      ; $0c !!12
>9026		75 a4					.word	SyntaxError                      ; $0d !!13
>9028		75 a4					.word	SyntaxError                      ; $0e !!14
>902a		75 a4					.word	SyntaxError                      ; $0f !!15
>902c		75 a4					.word	SyntaxError                      ; $10 @
>902e		75 a4					.word	SyntaxError                      ; $11 !!17
>9030		75 a4					.word	SyntaxError                      ; $12 !!18
>9032		75 a4					.word	SyntaxError                      ; $13 [
>9034		07 95					.word	IntegerDivide                    ; $14 \
>9036		75 a4					.word	SyntaxError                      ; $15 ]
>9038		99 97					.word	EorInteger                       ; $16 ^
>903a		75 a4					.word	SyntaxError                      ; $17 _
>903c		75 a4					.word	SyntaxError                      ; $18 `
>903e		75 a4					.word	SyntaxError                      ; $19 !!25
>9040		75 a4					.word	SyntaxError                      ; $1a !!26
>9042		75 a4					.word	SyntaxError                      ; $1b {
>9044		64 97					.word	OraInteger                       ; $1c |
>9046		75 a4					.word	SyntaxError                      ; $1d }
>9048		75 a4					.word	SyntaxError                      ; $1e ~
>904a		75 a4					.word	SyntaxError                      ; $1f <7F>
>904c		75 a4					.word	SyntaxError                      ; $20
>904e		ce 97					.word	WordIndirect                     ; $21 !
>9050		75 a4					.word	SyntaxError                      ; $22 "
>9052		75 a4					.word	SyntaxError                      ; $23 #
>9054		75 a4					.word	SyntaxError                      ; $24 $
>9056		48 95					.word	IntegerModulus                   ; $25 %
>9058		2f 97					.word	AndInteger                       ; $26 &
>905a		75 a4					.word	SyntaxError                      ; $27 '
>905c		75 a4					.word	SyntaxError                      ; $28 (
>905e		75 a4					.word	SyntaxError                      ; $29 )
>9060		b6 95					.word	MulInteger                       ; $2a *
>9062		d1 96					.word	AddInteger                       ; $2b +
>9064		75 a4					.word	SyntaxError                      ; $2c ,
>9066		0a 97					.word	SubInteger                       ; $2d -
>9068		75 a4					.word	SyntaxError                      ; $2e .
>906a		88 99					.word	FDivideCommand                   ; $2f /
>906c		75 a4					.word	SyntaxError                      ; $30 0
>906e		75 a4					.word	SyntaxError                      ; $31 1
>9070		75 a4					.word	SyntaxError                      ; $32 2
>9072		75 a4					.word	SyntaxError                      ; $33 3
>9074		75 a4					.word	SyntaxError                      ; $34 4
>9076		75 a4					.word	SyntaxError                      ; $35 5
>9078		75 a4					.word	SyntaxError                      ; $36 6
>907a		75 a4					.word	SyntaxError                      ; $37 7
>907c		75 a4					.word	SyntaxError                      ; $38 8
>907e		75 a4					.word	SyntaxError                      ; $39 9
>9080		75 a4					.word	SyntaxError                      ; $3a :
>9082		75 a4					.word	SyntaxError                      ; $3b ;
>9084		28 94					.word	BinaryCompareLess                ; $3c <
>9086		1e 94					.word	BinaryCompareEqual               ; $3d =
>9088		32 94					.word	BinaryCompareGreater             ; $3e >
>908a		f0 97					.word	ByteIndirect                     ; $3f ?
.908c						VectorSet0:
>908c		58 8f					.word	EOLCommand                       ; $80 !0:EOF
>908e		f8 8f					.word	Shift1Command                    ; $81 !1:SH1
>9090		00 90					.word	Shift2Command                    ; $82 !2:SH2
>9092		72 9e					.word	AbsUnary                         ; $83 ABS(
>9094		80 9e					.word	AllocUnary                       ; $84 ALLOC(
>9096		f0 9e					.word	AscUnary                         ; $85 ASC(
>9098		41 a0					.word	ChrUnary                         ; $86 CHR$(
>909a		67 aa					.word	UnaryEvent                       ; $87 EVENT(
>909c		1a 94					.word	UnaryFalse                       ; $88 FALSE
>909e		fd 9e					.word	FracUnary                        ; $89 FRAC(
>90a0		7f b1					.word	ChrGet                           ; $8a GET$(
>90a2		64 b1					.word	AscGet                           ; $8b GET(
>90a4		0e b1					.word	UnaryGetDate                     ; $8c GETDATE$(
>90a6		0a b1					.word	UnaryGetTime                     ; $8d GETTIME$(
>90a8		d7 a9					.word	UnaryHit                         ; $8e HIT(
>90aa		86 b1					.word	ChrInkey                         ; $8f INKEY$(
>90ac		74 b1					.word	AscInkey                         ; $90 INKEY(
>90ae		12 9f					.word	IntUnary                         ; $91 INT(
>90b0		00 a0					.word	IsValUnary                       ; $92 ISVAL(
>90b2		53 a0					.word	ItemCountUnary                   ; $93 ITEMCOUNT(
>90b4		77 a0					.word	ItemGetUnary                     ; $94 ITEMGET$(
>90b6		e1 ae					.word	UnaryJoyB                        ; $95 JOYB(
>90b8		ba ae					.word	UnaryJoyX                        ; $96 JOYX(
>90ba		bd ae					.word	UnaryJoyY                        ; $97 JOYY(
>90bc		9f b1					.word	KeyDown                          ; $98 KEYDOWN(
>90be		b6 a1					.word	Unary_Left                       ; $99 LEFT$(
>90c0		23 9f					.word	LenUnary                         ; $9a LEN(
>90c2		41 9f					.word	Unary_Max                        ; $9b MAX(
>90c4		d8 a1					.word	Unary_Mid                        ; $9c MID$(
>90c6		3d 9f					.word	Unary_Min                        ; $9d MIN(
>90c8		8c 9f					.word	Unary_Not                        ; $9e NOT(
>90ca		9f 9f					.word	PeekByteUnary                    ; $9f PEEK(
>90cc		ab 9f					.word	PeekDUnary                       ; $a0 PEEKD(
>90ce		a7 9f					.word	PeekLUnary                       ; $a1 PEEKL(
>90d0		a3 9f					.word	PeekWUnary                       ; $a2 PEEKW(
>90d2		7e b2					.word	UnaryPlaying                     ; $a3 PLAYING(
>90d4		b9 b1					.word	Unary_Random                     ; $a4 RANDOM(
>90d6		c3 a1					.word	Unary_Right                      ; $a5 RIGHT$(
>90d8		d3 b1					.word	Unary_Rnd                        ; $a6 RND(
>90da		d8 9f					.word	SgnUnary                         ; $a7 SGN(
>90dc		f5 a0					.word	SpcUnary                         ; $a8 SPC(
>90de		10 a1					.word	Unary_Str                        ; $a9 STR$(
>90e0		75 a4					.word	SyntaxError                      ; $aa TILE(
>90e2		f1 b0					.word	UnaryTimer                       ; $ab TIMER(
>90e4		0f 94					.word	UnaryTrue                        ; $ac TRUE
>90e6		f6 9f					.word	ValUnary                         ; $ad VAL(
>90e8		5f 89					.word	ForCommand                       ; $ae FOR
>90ea		a2 8a					.word	IfCommand                        ; $af IF
>90ec		08 90					.word	Unused1                          ; $b0 PROC
>90ee		04 8f					.word	Command_REPEAT                   ; $b1 REPEAT
>90f0		55 93					.word	Command_WHILE                    ; $b2 WHILE
>90f2		cb 8a					.word	EndIf                            ; $b3 ENDIF
>90f4		8c 8e					.word	Command_ENDPROC                  ; $b4 ENDPROC
>90f6		11 8a					.word	NextCommand                      ; $b5 NEXT
>90f8		08 90					.word	Unused4                          ; $b6 THEN
>90fa		0d 8f					.word	Command_UNTIL                    ; $b7 UNTIL
>90fc		76 93					.word	Command_WEND                     ; $b8 WEND
>90fe		75 a4					.word	SyntaxError                      ; $b9 AT
>9100		75 a4					.word	SyntaxError                      ; $ba BY
>9102		62 88					.word	CallCommand                      ; $bb CALL
>9104		44 a7					.word	CircleCommand                    ; $bc CIRCLE
>9106		75 a4					.word	SyntaxError                      ; $bd CLEAR
>9108		75 a4					.word	SyntaxError                      ; $be COLOR
>910a		75 a4					.word	SyntaxError                      ; $bf COLOUR
>910c		97 88					.word	Command_Data                     ; $c0 DATA
>910e		9f 88					.word	DimCommand                       ; $c1 DIM
>9110		08 90					.word	Unused3                          ; $c2 DOWNTO
>9112		c4 8a					.word	ElseCode                         ; $c3 ELSE
>9114		75 a4					.word	SyntaxError                      ; $c4 FROM
>9116		aa a9					.word	GfxCommand                       ; $c5 GFX
>9118		75 a4					.word	SyntaxError                      ; $c6 HERE
>911a		6d a7					.word	ImageCommand                     ; $c7 IMAGE
>911c		c6 8b					.word	LetCommand                       ; $c8 LET
>911e		bf a7					.word	LineCommand                      ; $c9 LINE
>9120		20 8d					.word	Command_LOCAL                    ; $ca LOCAL
>9122		f3 ae					.word	MCCommand                        ; $cb MEMCOPY
>9124		75 a4					.word	SyntaxError                      ; $cc OFF
>9126		75 a4					.word	SyntaxError                      ; $cd ON
>9128		75 a4					.word	SyntaxError                      ; $ce OUTLINE
>912a		fb a9					.word	PaletteCommand                   ; $cf PALETTE
>912c		b8 a7					.word	PlotCommand                      ; $d0 PLOT
>912e		f1 8d					.word	PokeBCommand                     ; $d1 POKE
>9130		fd 8d					.word	PokeDCommand                     ; $d2 POKED
>9132		f9 8d					.word	PokeLCommand                     ; $d3 POKEL
>9134		f5 8d					.word	PokeWCommand                     ; $d4 POKEW
>9136		9a 8e					.word	Command_Read                     ; $d5 READ
>9138		40 a7					.word	RectangleCommand                 ; $d6 RECT
>913a		f7 8e					.word	RemCommand                       ; $d7 REM
>913c		75 a4					.word	SyntaxError                      ; $d8 SOLID
>913e		9a b2					.word	SoundCommand                     ; $d9 SOUND
>9140		4f a7					.word	SpriteCommand                    ; $da SPRITE
>9142		89 a7					.word	TextCommand                      ; $db TEXT
>9144		08 90					.word	Unused2                          ; $dc TO
.9146						VectorSet1:
>9146		75 a4					.word	SyntaxError                      ; $80 !0:EOF
>9148		75 a4					.word	SyntaxError                      ; $81 !1:SH1
>914a		75 a4					.word	SyntaxError                      ; $82 !2:SH2
>914c		36 88					.word	AssembleCommand                  ; $83 ASSEMBLE
>914e		52 88					.word	AssertCommand                    ; $84 ASSERT
>9150		0a a9					.word	BitmapCtrl                       ; $85 BITMAP
>9152		c4 aa					.word	Command_BLoad                    ; $86 BLOAD
>9154		70 ab					.word	Command_BSave                    ; $87 BSAVE
>9156		3b aa					.word	ClearScreen                      ; $88 CLS
>9158		d1 8a					.word	Command_CPrint                   ; $89 CPRINT
>915a		f3 ab					.word	Command_Dir                      ; $8a DIR
>915c		55 aa					.word	BootDOS                          ; $8b DOS
>915e		c3 ac					.word	Command_Drive                    ; $8c DRIVE
>9160		5c 89					.word	EndCommand                       ; $8d END
>9162		52 b2					.word	Explode                          ; $8e EXPLODE
>9164		75 a4					.word	SyntaxError                      ; $8f GO
>9166		6a 8a					.word	Command_GOSUB                    ; $90 GOSUB
>9168		88 8a					.word	GotoCommand                      ; $91 GOTO
>916a		75 a4					.word	SyntaxError                      ; $92 HIMEM
>916c		cc 8a					.word	Command_Input                    ; $93 INPUT
>916e		16 8c					.word	Command_List                     ; $94 LIST
>9170		ca ac					.word	Command_Load                     ; $95 LOAD
>9172		07 b0					.word	MouseDeltaStatus                 ; $96 MDELTA
>9174		03 b0					.word	MouseStatus                      ; $97 MOUSE
>9176		e1 8d					.word	NewCommand                       ; $98 NEW
>9178		2e b2					.word	PingCommand                      ; $99 PING
>917a		d8 8a					.word	Command_Print                    ; $9a PRINT
>917c		26 8f					.word	Command_Restore                  ; $9b RESTORE
>917e		7a 8a					.word	Command_RETURN                   ; $9c RETURN
>9180		65 8f					.word	CommandRUNOptLoad                ; $9d RUN
>9182		9c ad					.word	Command_Save                     ; $9e SAVE
>9184		7d b0					.word	CommandSetDate                   ; $9f SETDATE
>9186		81 b0					.word	CommandSetTime                   ; $a0 SETTIME
>9188		46 b2					.word	ShootCommand                     ; $a1 SHOOT
>918a		64 a9					.word	SpritesCtrl                      ; $a2 SPRITES
>918c		24 92					.word	StopCommand                      ; $a3 STOP
>918e		75 a4					.word	SyntaxError                      ; $a4 TILE
>9190		75 a4					.word	SyntaxError                      ; $a5 TILES
>9192		23 ae					.word	Command_Try                      ; $a6 TRY
>9194		60 ae					.word	Command_VERIFY                   ; $a7 VERIFY
>9196		4c aa					.word	XGoCommand                       ; $a8 XGO
>9198		43 aa					.word	XLoadCommand                     ; $a9 XLOAD
>919a		3a b2					.word	ZapCommand                       ; $aa ZAP
.919c						VectorSet2:
>919c		75 a4					.word	SyntaxError                      ; $80 !0:EOF
>919e		75 a4					.word	SyntaxError                      ; $81 !1:SH1
>91a0		75 a4					.word	SyntaxError                      ; $82 !2:SH2
>91a2		34 a3					.word	Assemble_adc                     ; $83 ADC
>91a4		2c a3					.word	Assemble_and                     ; $84 AND
>91a6		48 a3					.word	Assemble_asl                     ; $85 ASL
>91a8		b2 a3					.word	Assemble_bcc                     ; $86 BCC
>91aa		b6 a3					.word	Assemble_bcs                     ; $87 BCS
>91ac		be a3					.word	Assemble_beq                     ; $88 BEQ
>91ae		75 a3					.word	Assemble_bit                     ; $89 BIT
>91b0		a6 a3					.word	Assemble_bmi                     ; $8a BMI
>91b2		ba a3					.word	Assemble_bne                     ; $8b BNE
>91b4		a2 a3					.word	Assemble_bpl                     ; $8c BPL
>91b6		c2 a3					.word	Assemble_bra                     ; $8d BRA
>91b8		c6 a3					.word	Assemble_brk                     ; $8e BRK
>91ba		aa a3					.word	Assemble_bvc                     ; $8f BVC
>91bc		ae a3					.word	Assemble_bvs                     ; $90 BVS
>91be		ce a3					.word	Assemble_clc                     ; $91 CLC
>91c0		22 a4					.word	Assemble_cld                     ; $92 CLD
>91c2		e2 a3					.word	Assemble_cli                     ; $93 CLI
>91c4		12 a4					.word	Assemble_clv                     ; $94 CLV
>91c6		40 a3					.word	Assemble_cmp                     ; $95 CMP
>91c8		89 a3					.word	Assemble_cpx                     ; $96 CPX
>91ca		84 a3					.word	Assemble_cpy                     ; $97 CPY
>91cc		66 a3					.word	Assemble_dec                     ; $98 DEC
>91ce		1e a4					.word	Assemble_dex                     ; $99 DEX
>91d0		fa a3					.word	Assemble_dey                     ; $9a DEY
>91d2		30 a3					.word	Assemble_eor                     ; $9b EOR
>91d4		6b a3					.word	Assemble_inc                     ; $9c INC
>91d6		2e a4					.word	Assemble_inx                     ; $9d INX
>91d8		1a a4					.word	Assemble_iny                     ; $9e INY
>91da		9d a3					.word	Assemble_jmp                     ; $9f JMP
>91dc		98 a3					.word	Assemble_jsr                     ; $a0 JSR
>91de		3c a3					.word	Assemble_lda                     ; $a1 LDA
>91e0		61 a3					.word	Assemble_ldx                     ; $a2 LDX
>91e2		7f a3					.word	Assemble_ldy                     ; $a3 LDY
>91e4		52 a3					.word	Assemble_lsr                     ; $a4 LSR
>91e6		32 a4					.word	Assemble_nop                     ; $a5 NOP
>91e8		28 a3					.word	Assemble_ora                     ; $a6 ORA
>91ea		de a3					.word	Assemble_pha                     ; $a7 PHA
>91ec		ca a3					.word	Assemble_php                     ; $a8 PHP
>91ee		26 a4					.word	Assemble_phx                     ; $a9 PHX
>91f0		e6 a3					.word	Assemble_phy                     ; $aa PHY
>91f2		ee a3					.word	Assemble_pla                     ; $ab PLA
>91f4		d2 a3					.word	Assemble_plp                     ; $ac PLP
>91f6		3a a4					.word	Assemble_plx                     ; $ad PLX
>91f8		f6 a3					.word	Assemble_ply                     ; $ae PLY
>91fa		4d a3					.word	Assemble_rol                     ; $af ROL
>91fc		57 a3					.word	Assemble_ror                     ; $b0 ROR
>91fe		da a3					.word	Assemble_rti                     ; $b1 RTI
>9200		ea a3					.word	Assemble_rts                     ; $b2 RTS
>9202		44 a3					.word	Assemble_sbc                     ; $b3 SBC
>9204		d6 a3					.word	Assemble_sec                     ; $b4 SEC
>9206		36 a4					.word	Assemble_sed                     ; $b5 SED
>9208		f2 a3					.word	Assemble_sei                     ; $b6 SEI
>920a		38 a3					.word	Assemble_sta                     ; $b7 STA
>920c		2a a4					.word	Assemble_stp                     ; $b8 STP
>920e		5c a3					.word	Assemble_stx                     ; $b9 STX
>9210		7a a3					.word	Assemble_sty                     ; $ba STY
>9212		70 a3					.word	Assemble_stz                     ; $bb STZ
>9214		0e a4					.word	Assemble_tax                     ; $bc TAX
>9216		0a a4					.word	Assemble_tay                     ; $bd TAY
>9218		93 a3					.word	Assemble_trb                     ; $be TRB
>921a		8e a3					.word	Assemble_tsb                     ; $bf TSB
>921c		16 a4					.word	Assemble_tsx                     ; $c0 TSX
>921e		fe a3					.word	Assemble_txa                     ; $c1 TXA
>9220		06 a4					.word	Assemble_txs                     ; $c2 TXS
>9222		02 a4					.word	Assemble_tya                     ; $c3 TYA

;******  Return to file: ./common/commands/run.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/stop.asm

.9224						StopCommand:
.9224		a9 08		lda #$08		lda	#8
.9226		4c 9d 93	jmp $939d		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/clear.asm

.9229						ClearSystem:
.9229		a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.922b		85 36		sta $36				sta 	0+zTemp0
.922d		a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.922f		85 37		sta $37				sta 	1+zTemp0
.9231						_ClearZeroLoop:
.9231		b2 36		lda ($36)			lda 	(zTemp0) 					; end of variables if offset is zero.
.9233		f0 24		beq $9259			beq 	_ClearZeroEnd
.9235		a0 03		ldy #$03			ldy 	#3 							; erase the variables
.9237		a9 00		lda #$00			lda 	#0 							; set all the data to zero.
.9239						_ClearOneVariable:
.9239		91 36		sta ($36),y			sta 	(zTemp0),y
.923b		c8		iny				iny
.923c		c0 08		cpy #$08			cpy 	#8
.923e		d0 f9		bne $9239			bne 	_ClearOneVariable
.9240		a0 02		ldy #$02			ldy 	#2 							; has it been marked procedure
.9242		b1 36		lda ($36),y			lda 	(zTemp0),y
.9244		c9 18		cmp #$18			cmp 	#NSTProcedure
.9246		d0 04		bne $924c			bne 	_ClearNotProcedure
.9248		a9 04		lda #$04			lda 	#NSTInteger+NSBIsArray 		; if so set it back to an integer array
.924a		91 36		sta ($36),y			sta 	(zTemp0),y 					; will be fixed on the pre-run scan.
.924c						_ClearNotProcedure:
.924c		18		clc				clc 								; go to the next variable
.924d		b2 36		lda ($36)			lda 	(zTemp0) 					; offset to next, add to zTemp0
.924f		65 36		adc $36				adc 	zTemp0
.9251		85 36		sta $36				sta 	zTemp0
.9253		90 dc		bcc $9231			bcc 	_ClearZeroLoop
.9255		e6 37		inc $37				inc 	zTemp0+1
.9257		80 d8		bra $9231			bra 	_ClearZeroLoop
.9259						_ClearZeroEnd:
.9259		18		clc				clc
.925a		a5 36		lda $36				lda 	zTemp0
.925c		69 01		adc #$01			adc 	#1
.925e		8d 08 04	sta $0408			sta 	lowMemPtr
.9261		a5 37		lda $37				lda 	zTemp0+1
.9263		69 00		adc #$00			adc 	#0
.9265		8d 09 04	sta $0409			sta 	lowMemPtr+1
.9268		20 87 b3	jsr $b387			jsr 	StackReset
.926b		20 ed b3	jsr $b3ed			jsr 	StringSystemInitialise
.926e		20 87 92	jsr $9287			jsr 	ProcedureScan
.9271		20 26 8f	jsr $8f26			jsr 	Command_Restore
.9274		9c 1a 04	stz $041a			stz 	AssemblerAddress
.9277		9c 1b 04	stz $041b			stz 	AssemblerAddress+1
.927a		9c 1c 04	stz $041c			stz 	AssemblerControl
.927d		9c 5d 06	stz $065d			stz 	KeyboardQueueEntries
.9280		20 dd 9e	jsr $9edd			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.9283		20 03 a9	jsr $a903			jsr 	ResetBitmapSprites
.9286		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/procscan.asm

.9287						ProcedureScan:
.9287		20 3d 8f	jsr $8f3d			jsr 	SwapDataCodePtrs 			; swap code and data
.928a		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.928c		85 30		sta $30				sta 	codePtr
.928e		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.9290		85 31		sta $31				sta 	codePtr+1
.9292						_PSLoop:
.9292		b2 30		lda ($30)			lda 	(codePtr)
.9294		f0 42		beq $92d8			beq 	_PSExit
.9296		a0 03		ldy #$03			ldy 	#3 							; is it PROC at start of line ?
.9298		b1 30		lda ($30),y			lda 	(codePtr),y
.929a		c9 b0		cmp #$b0			cmp 	#KWD_PROC
.929c		d0 2d		bne $92cb			bne 	_PSNext
.929e		c8		iny				iny 								; get the address of the record to zTemp0 and
.929f		b1 30		lda ($30),y			lda 	(codePtr),y
.92a1		29 c0		and #$c0			and 	#$C0
.92a3		c9 40		cmp #$40			cmp 	#$40
.92a5		d0 35		bne $92dc			bne 	_PSSyntax
.92a7		b1 30		lda ($30),y			lda 	(codePtr),y
.92a9		18		clc				clc
.92aa		69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.92ac		85 37		sta $37				sta 	zTemp0+1
.92ae		c8		iny				iny 								; LSB
.92af		b1 30		lda ($30),y			lda 	(codePtr),y
.92b1		85 36		sta $36				sta 	zTemp0
.92b3		c8		iny				iny 								; character after variable call.
.92b4		98		tya				tya 								; save Y offset at +7 (exponent slot)
.92b5		a0 07		ldy #$07			ldy 	#7
.92b7		91 36		sta ($36),y			sta 	(zTemp0),y
.92b9		a9 18		lda #$18			lda 	#NSTProcedure 				; mark it as procedure
.92bb		a0 02		ldy #$02			ldy 	#2
.92bd		91 36		sta ($36),y			sta 	(zTemp0),y
.92bf		a2 00		ldx #$00			ldx 	#0 							; copy code-Ptr into offset 3-6 (mantissa)
.92c1						_PSCopy:
.92c1		b5 30		lda $30,x			lda 	safePtr,x
.92c3		c8		iny				iny
.92c4		91 36		sta ($36),y			sta 	(zTemp0),y
.92c6		e8		inx				inx
.92c7		e0 04		cpx #$04			cpx 	#4
.92c9		d0 f6		bne $92c1			bne 	_PSCopy
.92cb						_PSNext:
.92cb		18		clc				clc
.92cc		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.92ce		65 30		adc $30				adc 	codePtr
.92d0		85 30		sta $30				sta 	codePtr
.92d2		90 02		bcc $92d6			bcc 	_CREExit
.92d4		e6 31		inc $31				inc 	codePtr+1 					; carry
.92d6						_CREExit:
.92d6		80 ba		bra $9292			bra 	_PSLoop
.92d8						_PSExit:
.92d8		20 3d 8f	jsr $8f3d			jsr 	SwapDataCodePtrs 			; swap code and data
.92db		60		rts				rts
.92dc						_PSSyntax:
.92dc		4c 75 a4	jmp $a475			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/scanforward.asm

.92df						ScanForward:
.92df		64 38		stz $38				stz 	zTemp1 						; zero the structure count - goes up with WHILE/FOR down with WEND/NEXT etc.
.92e1		86 37		stx $37				stx 	zTemp0+1
.92e3		85 36		sta $36				sta 	zTemp0 						; save X & A as the two possible matches.
.92e5						_ScanLoop:
.92e5		b1 30		lda ($30),y			lda 	(codePtr),y
.92e7		c8		iny				iny
.92e8		a6 38		ldx $38				ldx 	zTemp1 						; if the count is > 0 cannot match as in substructure
.92ea		d0 0e		bne $92fa			bne 	_ScanGoNext
.92ec		c5 36		cmp $36				cmp 	zTemp0 						; see if either matches
.92ee		f0 04		beq $92f4			beq 	_ScanMatch
.92f0		c5 37		cmp $37				cmp 	zTemp0+1
.92f2		d0 06		bne $92fa			bne 	_ScanGoNext
.92f4						_ScanMatch:
.92f4		c9 80		cmp #$80			cmp 	#KWC_EOL 					; if asked for EOL, backtrack.
.92f6		d0 01		bne $92f9			bne 	_ScanNotEndEOL
.92f8		88		dey				dey
.92f9						_ScanNotEndEOL:
.92f9		60		rts				rts
.92fa						_ScanGoNext:
.92fa		20 ff 92	jsr $92ff			jsr  	ScanForwardOne 				; allows for shifts and so on.
.92fd		80 e6		bra $92e5			bra 	_ScanLoop
.92ff						ScanForwardOne:
.92ff		c9 40		cmp #$40			cmp 	#$40 						; if 00-3F, punctuation characters, already done.
.9301		90 3e		bcc $9341			bcc 	_SFWExit
.9303		c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if 40-82, skip one extra as these are 2 byte
.9305		90 18		bcc $931f			bcc 	_ScanSkipOne	 			; offsets into the identifier table or shifts.
.9307		c9 fc		cmp #$fc			cmp 	#$FC 						; FC-FF are data skips (hex consts, strings etc.)
.9309		b0 2f		bcs $933a			bcs 	_ScanSkipData
.930b		c9 ae		cmp #$ae			cmp 	#KWC_FIRST_STRUCTURE 		; structure keyword ?
.930d		90 32		bcc $9341			bcc 	_SFWExit 					; if not, ordinary keywords.
.930f		c9 b9		cmp #$b9			cmp 	#KWC_LAST_STRUCTURE+1
.9311		b0 2e		bcs $9341			bcs 	_SFWExit
.9313		c6 38		dec $38				dec 	zTemp1 						; decrement the sructure count
.9315		c9 b3		cmp #$b3			cmp 	#KWC_FIRST_STRUCTURE_DEC 	; back if it is a dec structure (e.g. WEND/NEXT)
.9317		b0 28		bcs $9341			bcs 	_SFWExit
.9319		e6 38		inc $38				inc 	zTemp1 						; so it's an increment structure
.931b		e6 38		inc $38				inc 	zTemp1 						; twice to undo the dec
.931d		80 22		bra $9341			bra 	_SFWExit
.931f						_ScanSkipOne:
.931f		c8		iny				iny 								; consume the extra one.
.9320		c9 80		cmp #$80			cmp 	#KWC_EOL 					; if not EOL loop back
.9322		d0 1d		bne $9341			bne 	_SFWExit
.9324		18		clc				clc
.9325		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.9327		65 30		adc $30				adc 	codePtr
.9329		85 30		sta $30				sta 	codePtr
.932b		90 02		bcc $932f			bcc 	_CREExit
.932d		e6 31		inc $31				inc 	codePtr+1 					; carry
.932f						_CREExit:
.932f		a0 03		ldy #$03			ldy 	#3 							; scan start position.
.9331		b2 30		lda ($30)			lda 	(codePtr)
.9333		d0 0c		bne $9341			bne 	_SFWExit 					; if not zero, more to scan
.9335		a9 13		lda #$13		lda	#19
.9337		4c 9d 93	jmp $939d		jmp	ErrorHandler
.933a						_ScanSkipData:
.933a		88		dey				dey 								; point at data token
.933b		c8		iny				iny 								; point to offset
.933c		98		tya				tya 								; A = offset position
.933d		38		sec				sec 								; add size +1 hence SEC
.933e		71 30		adc ($30),y			adc 	(codePtr),y
.9340		a8		tay				tay 								; make current position.
.9341						_SFWExit:
.9341		60		rts				rts
.9342						ScanGetCurrentLineStep:
.9342		64 38		stz $38				stz 	zTemp1
.9344		a0 03		ldy #$03			ldy 	#3
.9346						_SGCLSLoop:
.9346		b1 30		lda ($30),y			lda 	(codePtr),y
.9348		c8		iny				iny
.9349		c9 80		cmp #$80			cmp 	#KWC_EOL	 				; if EOL exit
.934b		f0 05		beq $9352			beq 	_SGCLSExit
.934d		20 ff 92	jsr $92ff			jsr 	ScanForwardOne
.9350		80 f4		bra $9346			bra 	_SGCLSLoop
.9352						_SGCLSExit:
.9352		a5 38		lda $38				lda 	zTemp1 						; return the adjustment
.9354		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/while.asm

.9355						Command_WHILE:
.9355		5a		phy				phy 								; save position of the test
.9356		a2 00		ldx #$00			ldx 	#0 							; work out the while test.
.9358		20 4b a2	jsr $a24b			jsr 	EvaluateNumber
.935b		20 1f a3	jsr $a31f			jsr 	NSMIsZero 					; check if zero
.935e		f0 0e		beq $936e			beq 	_WHExitLoop 				; if so exit the loop, while has failed.
.9360		98		tya				tya 								; position *after* test.
.9361		7a		ply				ply 								; restore position before test, at WHILE
.9362		88		dey				dey 								; so we execute the WHILE command again.
.9363		48		pha				pha 								; push after test on the stack
.9364		a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; allocate 6 bytes on the return stack.
.9366		20 21 b3	jsr $b321			jsr 	StackOpen
.9369		20 66 b3	jsr $b366			jsr 	STKSaveCodePosition 		; save loop position - where the test value expr is.
.936c		7a		ply				ply 								; restore the position *after* the test
.936d		60		rts				rts
.936e						_WHExitLoop:
.936e		68		pla				pla 								; throw post loop position
.936f		a9 b8		lda #$b8			lda 	#KWD_WEND 					; scan forward past WEND
.9371		aa		tax				tax
.9372		20 df 92	jsr $92df			jsr 	ScanForward
.9375		60		rts				rts
.9376						Command_WEND:
.9376		a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; check WHILE is TOS e.g. in a while loop :)
.9378		a2 10		ldx #$10			ldx 	#ERRID_WHILE 				; this error if not.
.937a		20 4e b3	jsr $b34e			jsr 	StackCheckFrame
.937d		20 77 b3	jsr $b377			jsr 	STKLoadCodePosition 		; loop back to the WHILE keyword.
.9380		20 40 b3	jsr $b340			jsr 	StackClose		 			; erase the frame
.9383		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/charcheck.asm

.9384						CheckRightBracket:
.9384		b1 30		lda ($30),y			lda 	(codePtr),y
.9386		c8		iny				iny
.9387		c9 29		cmp #$29			cmp 	#KWD_RPAREN 						; exit if matches
.9389		d0 0f		bne $939a			bne 	CNAFail
.938b		60		rts				rts
.938c						CheckComma:
.938c		b1 30		lda ($30),y			lda 	(codePtr),y
.938e		c8		iny				iny
.938f		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 						; exit if matches
.9391		d0 07		bne $939a			bne 	CNAFail
.9393		60		rts				rts
.9394						CheckNextA:
.9394		d1 30		cmp ($30),y			cmp 	(codePtr),y
.9396		d0 02		bne $939a			bne 	CNAFail
.9398		c8		iny				iny 								; skip character
.9399		60		rts				rts 								; and exit
.939a						CNAFail:
.939a		4c 75 a4	jmp $a475			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/errors.asm

.939d						ErrorHandler:
.939d		48		pha				pha 								; save error #
.939e		a8		tay				tay 								; find the error text
.939f		f0 4e		beq $93ef			beq 	_EHEnd
.93a1		a2 00		ldx #$00			ldx 	#0
.93a3		a9 8e		lda #$8e			lda 	#((ErrorText) & $FF)
.93a5		85 36		sta $36				sta 	0+zTemp0
.93a7		a9 a4		lda #$a4			lda 	#((ErrorText) >> 8)
.93a9		85 37		sta $37				sta 	1+zTemp0
.93ab						_EHFind:
.93ab		88		dey				dey 								; keep looking through text
.93ac		f0 0e		beq $93bc			beq 	_EHFound
.93ae						_EHFindZero:
.93ae		b2 36		lda ($36)			lda 	(zTemp0) 					; find the next error
.93b0		e6 36		inc $36				inc 	zTemp0
.93b2		d0 02		bne $93b6			bne 	_EHFNoCarry
.93b4		e6 37		inc $37				inc 	zTemp0+1
.93b6						_EHFNoCarry:
.93b6		c9 00		cmp #$00			cmp 	#0
.93b8		d0 f4		bne $93ae			bne 	_EHFindZero
.93ba		80 ef		bra $93ab			bra 	_EHFind
.93bc						_EHFound:
.93bc		a5 36		lda $36				lda 	zTemp0 						; print message
.93be		a6 37		ldx $37				ldx 	zTemp0+1
.93c0		20 fc 93	jsr $93fc			jsr 	PrintStringXA
.93c3		68		pla				pla  								; check if error is 'open structure'
.93c4		c9 13		cmp #$13			cmp 	#ERRID_STRUCT
.93c6		f0 22		beq $93ea			beq 	_EHCREnd
.93c8		a0 01		ldy #$01			ldy 	#1 							; if line number zero don't print it
.93ca		b1 30		lda ($30),y			lda 	(codePtr),y
.93cc		d0 05		bne $93d3			bne 	_EHAtMsg
.93ce		c8		iny				iny
.93cf		b1 30		lda ($30),y			lda 	(codePtr),y
.93d1		f0 17		beq $93ea			beq 	_EHCREnd
.93d3						_EHAtMsg:
.93d3		a2 93		ldx #$93			ldx 	#_AtMsg >> 8 				; print " at "
.93d5		a9 f2		lda #$f2			lda 	#_AtMsg & $FF
.93d7		20 fc 93	jsr $93fc			jsr 	PrintStringXA
.93da		a0 01		ldy #$01			ldy 	#1 							; line number into XA
.93dc		b1 30		lda ($30),y			lda 	(codePtr),y
.93de		48		pha				pha
.93df		c8		iny				iny
.93e0		b1 30		lda ($30),y			lda 	(codePtr),y
.93e2		aa		tax				tax
.93e3		68		pla				pla
.93e4		20 12 98	jsr $9812			jsr 	ConvertInt16 				; convert XA to string
.93e7		20 fc 93	jsr $93fc			jsr 	PrintStringXA 				; and print it.
.93ea						_EHCREnd:
.93ea		a9 0d		lda #$0d			lda 	#13 						; new line
.93ec		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.93ef						_EHEnd:
.93ef		4c 01 88	jmp $8801			jmp 	WarmStart
>93f2		20 61 74 20 6c 69 6e 65		_AtMsg:	.text 	" at line ",0
>93fa		20 00
.93fc						PrintStringXA:
.93fc		5a		phy				phy
.93fd		86 37		stx $37				stx 	zTemp0+1
.93ff		85 36		sta $36				sta 	zTemp0
.9401		a0 00		ldy #$00			ldy 	#0
.9403						_PSXALoop:
.9403		b1 36		lda ($36),y			lda 	(zTemp0),y
.9405		f0 06		beq $940d			beq 	_PSXAExit
.9407		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.940a		c8		iny				iny
.940b		80 f6		bra $9403			bra 	_PSXALoop
.940d						_PSXAExit:
.940d		7a		ply				ply
.940e		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/compare.asm

.940f						UnaryTrue:
.940f		fa		plx				plx
.9410						ReturnTrue:
.9410		a9 01		lda #$01			lda 	#1  						; set to 1
.9412		20 ff a2	jsr $a2ff			jsr 	NSMSetByte
.9415		a9 80		lda #$80			lda 	#$80 						; set sign flag, so it is -1
.9417		95 50		sta $50,x			sta 	NSStatus,x
.9419		60		rts				rts
.941a						UnaryFalse:
.941a		fa		plx				plx
.941b						ReturnFalse:
.941b		4c fd a2	jmp $a2fd			jmp 	NSMSetZero 					; set it all to zero
.941e						BinaryCompareEqual:
.941e		fa		plx				plx
.941f		20 5a 94	jsr $945a			jsr 	CompareBaseCode
.9422		c9 00		cmp #$00			cmp 	#0
.9424		f0 ea		beq $9410			beq 	ReturnTrue
.9426		80 f3		bra $941b			bra 	ReturnFalse
.9428						BinaryCompareLess:
.9428		fa		plx				plx
.9429		20 5a 94	jsr $945a			jsr 	CompareBaseCode
.942c		c9 ff		cmp #$ff			cmp 	#$FF
.942e		f0 e0		beq $9410			beq 	ReturnTrue
.9430		80 e9		bra $941b			bra 	ReturnFalse
.9432						BinaryCompareGreater:
.9432		fa		plx				plx
.9433		20 5a 94	jsr $945a			jsr 	CompareBaseCode
.9436		c9 01		cmp #$01			cmp 	#1
.9438		f0 d6		beq $9410			beq 	ReturnTrue
.943a		80 df		bra $941b			bra 	ReturnFalse
.943c						BinaryCompareNotEqual:
.943c		fa		plx				plx
.943d		20 5a 94	jsr $945a			jsr 	CompareBaseCode
.9440		c9 00		cmp #$00			cmp 	#0
.9442		d0 cc		bne $9410			bne 	ReturnTrue
.9444		80 d5		bra $941b			bra 	ReturnFalse
.9446						BinaryCompareLessEqual:
.9446		fa		plx				plx
.9447		20 5a 94	jsr $945a			jsr 	CompareBaseCode
.944a		c9 01		cmp #$01			cmp 	#1
.944c		d0 c2		bne $9410			bne 	ReturnTrue
.944e		80 cb		bra $941b			bra 	ReturnFalse
.9450						BinaryCompareGreaterEqual:
.9450		fa		plx				plx
.9451		20 5a 94	jsr $945a			jsr 	CompareBaseCode
.9454		c9 ff		cmp #$ff			cmp 	#$FF
.9456		d0 b8		bne $9410			bne 	ReturnTrue
.9458		80 c1		bra $941b			bra 	ReturnFalse
.945a						CompareBaseCode:
.945a		20 65 9b	jsr $9b65			jsr 	DereferenceTopTwo 			; make both values if references.
.945d		b5 50		lda $50,x			lda 	NSStatus,x 					; check if either is a string.
.945f		15 51		ora $51,x			ora 	NSStatus+1,x
.9461		29 10		and #$10			and 	#NSTString
.9463		d0 37		bne $949c			bne 	_CBCString 					; if so do string code, which will check if both.
.9465		b5 78		lda $78,x			lda 	NSExponent,x 				; check both are integers
.9467		15 79		ora $79,x			ora 	NSExponent+1,x
.9469		d0 34		bne $949f			bne 	_CBCFloat
.946b		b5 50		lda $50,x			lda 	NSStatus,x
.946d		15 51		ora $51,x			ora 	NSStatus+1,x
.946f		29 08		and #$08			and 	#NSTFloat
.9471		d0 2c		bne $949f			bne 	_CBCFloat
.9473		20 a2 94	jsr $94a2			jsr 	CompareFixMinusZero 		; fix up -0 just in cases.
.9476		e8		inx				inx
.9477		20 a2 94	jsr $94a2			jsr 	CompareFixMinusZero
.947a		ca		dex				dex
.947b		b5 50		lda $50,x			lda 	NSStatus,x 					; are the signs different ?
.947d		55 51		eor $51,x			eor 	NSStatus+1,x
.947f		10 0a		bpl $948b			bpl 	_CDCSameSign
.9481		b5 50		lda $50,x			lda 	NSStatus,x 					; if first one is -ve
.9483		30 14		bmi $9499			bmi 	_CBCLess 					; return $FF
.9485						_CBCGreater:
.9485		a9 01		lda #$01			lda 	#1
.9487		60		rts				rts
.9488						_CBCEqual:
.9488		a9 00		lda #$00			lda 	#0
.948a		60		rts				rts
.948b						_CDCSameSign:
.948b		20 b7 96	jsr $96b7			jsr 	SubTopTwoStack 				; unsigned subtract
.948e		20 1f a3	jsr $a31f			jsr 	NSMIsZero 					; or the mantissa together
.9491		f0 f5		beq $9488			beq 	_CBCEqual 					; -0 == 0
.9493		b5 70		lda $70,x			lda 	NSMantissa3,x 				; sign of the result. if +ve return $01 else return $FF
.9495		55 51		eor $51,x			eor 	NSStatus+1,x 				; however if both were -ve this is inverted
.9497		10 ec		bpl $9485			bpl 	_CBCGreater
.9499						_CBCLess:
.9499		a9 ff		lda #$ff			lda 	#$FF
.949b		60		rts				rts
.949c						_CBCString:
.949c		4c 28 96	jmp $9628			jmp 	CompareStrings
.949f						_CBCFloat:
.949f		4c 72 99	jmp $9972			jmp 	CompareFloat
.94a2						CompareFixMinusZero:
.94a2		20 1f a3	jsr $a31f			jsr 	NSMIsZero
.94a5		d0 02		bne $94a9			bne 	_CFXMZNotZero
.94a7		74 50		stz $50,x			stz 	NSStatus,x
.94a9						_CFXMZNotZero:
.94a9		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/concat.asm

.94aa						StringConcat:
.94aa		b5 50		lda $50,x			lda 	NSStatus,x 					; check both strings
.94ac		35 51		and $51,x			and 	NSStatus+1,x
.94ae		29 18		and #$18			and 	#NSBTypeMask
.94b0		c9 10		cmp #$10			cmp 	#NSTString
.94b2		d0 50		bne $9504			bne		_SCType
.94b4		64 38		stz $38				stz 	zTemp1 						; counting total length
.94b6		e8		inx				inx
.94b7		20 d5 94	jsr $94d5			jsr 	_SCSetupZ0 					; setup for second
.94ba		20 de 94	jsr $94de			jsr 	_SCLengthZ0 				; length for second
.94bd		ca		dex				dex
.94be		20 d5 94	jsr $94d5			jsr 	_SCSetupZ0 					; setup for first
.94c1		20 de 94	jsr $94de			jsr 	_SCLengthZ0 				; length for first
.94c4		a5 38		lda $38				lda 	zTemp1 						; allocate memory using total.
.94c6		20 11 b4	jsr $b411			jsr 	StringTempAllocate
.94c9		20 f5 94	jsr $94f5			jsr 	_SCCopy 					; copy first out, using zTemp0 from above
.94cc		e8		inx				inx
.94cd		20 d5 94	jsr $94d5			jsr 	_SCSetupZ0 					; copy second out
.94d0		20 f5 94	jsr $94f5			jsr 	_SCCopy
.94d3		ca		dex				dex
.94d4		60		rts				rts
.94d5						_SCSetupZ0:
.94d5		b5 58		lda $58,x			lda 	NSMantissa0,x
.94d7		85 36		sta $36				sta 	zTemp0
.94d9		b5 60		lda $60,x			lda 	NSMantissa1,x
.94db		85 37		sta $37				sta 	zTemp0+1
.94dd		60		rts				rts
.94de						_SCLengthZ0:
.94de		5a		phy				phy
.94df		a0 00		ldy #$00			ldy 	#0
.94e1						_SCLenLoop:
.94e1		b1 36		lda ($36),y			lda 	(zTemp0),y
.94e3		f0 0e		beq $94f3			beq 	_SCLExit
.94e5		c8		iny				iny
.94e6		e6 38		inc $38				inc 	zTemp1
.94e8		a5 38		lda $38				lda	 	zTemp1 						; check string too long.
.94ea		c9 fd		cmp #$fd			cmp 	#253
.94ec		d0 f3		bne $94e1			bne		_SCLenLoop
.94ee		a9 09		lda #$09		lda	#9
.94f0		4c 9d 93	jmp $939d		jmp	ErrorHandler
.94f3						_SCLExit:
.94f3		7a		ply				ply
.94f4		60		rts				rts
.94f5						_SCCopy:
.94f5		5a		phy				phy
.94f6		a0 00		ldy #$00			ldy 	#0
.94f8						_SCCopyLoop:
.94f8		b1 36		lda ($36),y			lda 	(zTemp0),y
.94fa		f0 06		beq $9502			beq 	_SCCExit
.94fc		20 4a b4	jsr $b44a			jsr 	StringTempWrite
.94ff		c8		iny				iny
.9500		80 f6		bra $94f8			bra 	_SCCopyLoop
.9502						_SCCExit:
.9502		7a		ply				ply
.9503		60		rts				rts
.9504						_SCType:
.9504		4c 7f a4	jmp $a47f			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/divide.asm

.9507						IntegerDivide:
.9507		fa		plx				plx
.9508		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.950a		15 51		ora $51,x			ora 	NSStatus+1,x
.950c		0a		asl a				asl 	a 							; shift reference bit into sign bit
.950d		0a		asl a				asl 	a
.950e		10 05		bpl $9515			bpl 	_NotRef
.9510		48		pha				pha
.9511		20 65 9b	jsr $9b65			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9514		68		pla				pla
.9515						_NotRef:
.9515		0a		asl a				asl 	a
.9516		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9518		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.951a		15 79		ora $79,x			ora 	NSExponent+1,x
.951c		f0 03		beq $9521			beq 	_IntegerCode 				; if clear, then we have two integers
.951e		4c 7f a4	jmp $a47f			jmp 	TypeError 					; anything else, type mismatch.
.9521						_IntegerCode:
.9521		20 3b 95	jsr $953b			jsr 	CheckDivideZero 			; do div zero check
.9524		20 6d 95	jsr $956d			jsr 	Int32Divide 				; do the division
.9527		20 1e 96	jsr $961e			jsr 	CalculateSign 				; calculate result sign
.952a						NSMCopyPlusTwoToZero:
.952a		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.952c		95 58		sta $58,x			sta 	NSMantissa0,x
.952e		b5 62		lda $62,x			lda 	NSMantissa1+2,x
.9530		95 60		sta $60,x			sta 	NSMantissa1,x
.9532		b5 6a		lda $6a,x			lda 	NSMantissa2+2,x
.9534		95 68		sta $68,x			sta 	NSMantissa2,x
.9536		b5 72		lda $72,x			lda 	NSMantissa3+2,x
.9538		95 70		sta $70,x			sta 	NSMantissa3,x
.953a		60		rts				rts
.953b						CheckDivideZero:
.953b		e8		inx				inx
.953c		20 1f a3	jsr $a31f			jsr 	NSMIsZero
.953f		f0 02		beq $9543			beq 	_CDVError
.9541		ca		dex				dex
.9542		60		rts				rts
.9543						_CDVError:
.9543		a9 03		lda #$03		lda	#3
.9545		4c 9d 93	jmp $939d		jmp	ErrorHandler
.9548						IntegerModulus:
.9548		fa		plx				plx
.9549		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.954b		15 51		ora $51,x			ora 	NSStatus+1,x
.954d		0a		asl a				asl 	a 							; shift reference bit into sign bit
.954e		0a		asl a				asl 	a
.954f		10 05		bpl $9556			bpl 	_NotRef
.9551		48		pha				pha
.9552		20 65 9b	jsr $9b65			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9555		68		pla				pla
.9556						_NotRef:
.9556		0a		asl a				asl 	a
.9557		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9559		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.955b		15 79		ora $79,x			ora 	NSExponent+1,x
.955d		f0 03		beq $9562			beq 	_IntegerCode 				; if clear, then we have two integers
.955f		4c 7f a4	jmp $a47f			jmp 	TypeError 					; anything else, type mismatch.
.9562						_IntegerCode:
.9562						IntegerModulusNoCheck:
.9562		20 3b 95	jsr $953b			jsr 	CheckDivideZero 			; do div zero check
.9565		20 6d 95	jsr $956d			jsr 	Int32Divide 				; do the division
.9568		16 50		asl $50,x			asl 	NSStatus,x 					; clear the sign bit.
.956a		56 50		lsr $50,x			lsr 	NSStatus,x
.956c		60		rts				rts
.956d						Int32Divide:
.956d		48		pha				pha 								; save AXY
.956e		5a		phy				phy
.956f		20 e0 a2	jsr $a2e0			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.9572		20 f9 a2	jsr $a2f9			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.9575		a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.9577						_I32DivideLoop:
.9577		e8		inx				inx
.9578		e8		inx				inx
.9579		20 0c a3	jsr $a30c			jsr 	NSMShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.957c		ca		dex				dex
.957d		ca		dex				dex
.957e		20 0d a3	jsr $a30d			jsr 	NSMRotateLeft
.9581		20 ac 95	jsr $95ac			jsr 	DivideCheckSubtract 		; check if subtract possible
.9584		90 02		bcc $9588			bcc 	_I32DivideNoCarryIn
.9586		f6 5a		inc $5a,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.9588						_I32DivideNoCarryIn:
.9588		88		dey				dey 								; loop round till division completed.
.9589		d0 ec		bne $9577			bne 	_I32DivideLoop
.958b		7a		ply				ply 								; restore AXY and exit
.958c		68		pla				pla
.958d		60		rts				rts
.958e						Int32ShiftDivide:
.958e		48		pha				pha 								; save AY
.958f		5a		phy				phy
.9590		e8		inx				inx 								; clear S[X+2]
.9591		e8		inx				inx
.9592		20 fd a2	jsr $a2fd			jsr 	NSMSetZero
.9595		ca		dex				dex
.9596		ca		dex				dex
.9597		a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.9599						_I32SDLoop:
.9599		20 ac 95	jsr $95ac			jsr 	DivideCheckSubtract 		; check if subtract possible
.959c		e8		inx				inx
.959d		e8		inx				inx
.959e		20 0d a3	jsr $a30d			jsr 	NSMRotateLeft				; shift 64 bit FPA left, rotating carry in
.95a1		ca		dex				dex
.95a2		ca		dex				dex
.95a3		20 0d a3	jsr $a30d			jsr 	NSMRotateLeft
.95a6		88		dey				dey 	 							; do 31 times
.95a7		d0 f0		bne $9599			bne 	_I32SDLoop
.95a9		7a		ply				ply 								; restore AY and exit
.95aa		68		pla				pla
.95ab		60		rts				rts
.95ac						DivideCheckSubtract:
.95ac		20 b7 96	jsr $96b7			jsr 	SubTopTwoStack 				; subtract Stack[X+1] from Stack[X+0]
.95af		b0 04		bcs $95b5			bcs 	_DCSExit 					; if carry set, then could do, exit
.95b1		20 9d 96	jsr $969d			jsr 	AddTopTwoStack 				; add it back in
.95b4		18		clc				clc 								; and return False
.95b5						_DCSExit:
.95b5		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/multiply.asm

.95b6						MulInteger:
.95b6		fa		plx				plx
.95b7		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.95b9		15 51		ora $51,x			ora 	NSStatus+1,x
.95bb		0a		asl a				asl 	a 							; shift reference bit into sign bit
.95bc		0a		asl a				asl 	a
.95bd		10 05		bpl $95c4			bpl 	_NotRef
.95bf		48		pha				pha
.95c0		20 65 9b	jsr $9b65			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.95c3		68		pla				pla
.95c4						_NotRef:
.95c4		0a		asl a				asl 	a 							; put MSB of type into A:7
.95c5		30 09		bmi $95d0			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.95c7		b5 78		lda $78,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.95c9		15 79		ora $79,x			ora 	NSExponent+1,x
.95cb		f0 06		beq $95d3			beq 	_IntegerCode 				; if clear, then we have two integers
.95cd		4c 34 9a	jmp $9a34			jmp 	FloatingPointMultiply 							; otherwise at least one float.
.95d0						_StringData:
.95d0		4c 89 a4	jmp $a489			jmp 	NotDoneError							; at least one string - don't know both are strings.
.95d3						_IntegerCode:
.95d3		20 e0 95	jsr $95e0			jsr 	MultiplyShort
.95d6		c9 00		cmp #$00			cmp 	#0
.95d8		f0 05		beq $95df			beq 	_MIExit
.95da		a9 04		lda #$04		lda	#4
.95dc		4c 9d 93	jmp $939d		jmp	ErrorHandler
.95df						_MIExit:
.95df		60		rts				rts
.95e0						MultiplyShort:
.95e0		5a		phy				phy 								; save Y
.95e1		20 e0 a2	jsr $a2e0			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.95e4		20 f9 a2	jsr $a2f9			jsr 	NSMSetZeroMantissaOnly 		; set mantissa S[X] to zero
.95e7		a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.95e9						_I32MLoop:
.95e9		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.95eb		15 62		ora $62,x			ora 	NSMantissa1+2,x
.95ed		15 6a		ora $6a,x			ora 	NSMantissa2+2,x
.95ef		15 72		ora $72,x			ora 	NSMantissa3+2,x
.95f1		f0 25		beq $9618			beq 	_I32MExit 					; exit if zero
.95f3		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.95f5		29 01		and #$01			and 	#1
.95f7		f0 0d		beq $9606			beq 	_I32MNoAdd
.95f9		20 9d 96	jsr $969d			jsr 	AddTopTwoStack 				; if so add S[X+1] to S[X+0]
.95fc		b5 70		lda $70,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.95fe		10 06		bpl $9606			bpl 	_I32MNoAdd
.9600						_I32ShiftRight:
.9600		20 16 a3	jsr $a316			jsr 	NSMShiftRight 				; shift S[X] right
.9603		c8		iny				iny 								; increment shift count
.9604		80 09		bra $960f			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.9606						_I32MNoAdd:
.9606		34 71		bit $71,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.9608		70 f6		bvs $9600			bvs 	_I32ShiftRight 				; instead.
.960a		e8		inx				inx
.960b		20 0c a3	jsr $a30c			jsr 	NSMShiftLeft 				; shift additive S[X+1] left
.960e		ca		dex				dex
.960f						_I32MShiftUpper:
.960f		e8		inx				inx 								; shift S[X+2] right
.9610		e8		inx				inx
.9611		20 16 a3	jsr $a316			jsr 	NSMShiftRight
.9614		ca		dex				dex
.9615		ca		dex				dex
.9616		80 d1		bra $95e9			bra 	_I32MLoop 					; try again.
.9618						_I32MExit:
.9618		20 1e 96	jsr $961e			jsr 	CalculateSign
.961b		98		tya				tya 								; shift in A
.961c		7a		ply				ply 								; restore Y and exit
.961d		60		rts				rts
.961e						CalculateSign:
.961e		b5 50		lda $50,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.9620		16 50		asl $50,x			asl 	NSStatus,x 					; shift result left
.9622		55 51		eor $51,x			eor 	NSStatus+1,x
.9624		0a		asl a				asl 	a 							; shift bit 7 into carry
.9625		76 50		ror $50,x			ror 	NSStatus,x 					; shift right into status byte.
.9627		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/scompare.asm

.9628						CompareStrings:
.9628		b5 50		lda $50,x			lda 	NSStatus,x 					; check both are strings
.962a		35 51		and $51,x			and 	NSStatus+1,x
.962c		29 10		and #$10			and 	#NSBIsString
.962e		f0 28		beq $9658			beq 	_CSTypeError
.9630		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy string addresses to zTemp0/1
.9632		85 36		sta $36				sta 	zTemp0
.9634		b5 60		lda $60,x			lda 	NSMantissa1,x
.9636		85 37		sta $37				sta 	zTemp0+1
.9638		b5 59		lda $59,x			lda 	NSMantissa0+1,x
.963a		85 38		sta $38				sta 	zTemp1
.963c		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.963e		85 39		sta $39				sta 	zTemp1+1
.9640		5a		phy				phy 								; save Y so we can access strings
.9641		a0 ff		ldy #$ff			ldy 	#$FF 						; -1 for pre increment.
.9643						_CSLoop:
.9643		c8		iny				iny
.9644		b1 36		lda ($36),y			lda 	(zTemp0),y 					; check if they are the same
.9646		d1 38		cmp ($38),y			cmp 	(zTemp1),y
.9648		d0 06		bne $9650			bne 	_CSDifferent
.964a		c9 00		cmp #$00			cmp 	#0 							; reached end ?
.964c		d0 f5		bne $9643			bne 	_CSLoop 					; still comparing
.964e						_CSExit:
.964e		7a		ply				ply 								; reached end, return zero in A from EOS
.964f		60		rts				rts
.9650						_CSDifferent:
.9650		a9 ff		lda #$ff			lda 	#255 						; if < return $FF
.9652		90 fa		bcc $964e			bcc		_CSExit
.9654		a9 01		lda #$01			lda 	#1 							; otherwise return 1.
.9656		80 f6		bra $964e			bra 	_CSExit
.9658						_CSTypeError:
.9658		4c 7f a4	jmp $a47f			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/shifts.asm

.965b						ShiftLeft:
.965b		38		sec				sec 								; common code, carry determines which way.
.965c		80 01		bra $965f			bra 	ShiftMain
.965e						ShiftRight:
.965e		18		clc				clc
.965f						ShiftMain:
.965f		fa		plx				plx 								; restore X
.9660		08		php				php 								; save direction
.9661		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9663		15 51		ora $51,x			ora 	NSStatus+1,x
.9665		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9666		0a		asl a				asl 	a
.9667		10 05		bpl $966e			bpl 	_NotRef
.9669		48		pha				pha
.966a		20 65 9b	jsr $9b65			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.966d		68		pla				pla
.966e						_NotRef:
.966e		0a		asl a				asl 	a
.966f		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9671		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9673		15 79		ora $79,x			ora 	NSExponent+1,x
.9675		f0 03		beq $967a			beq 	_IntegerCode 				; if clear, then we have two integers
.9677		4c 7f a4	jmp $a47f			jmp 	TypeError 					; anything else, type mismatch.
.967a						_IntegerCode:
.967a		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; check number < 32
.967c		29 e0		and #$e0			and 	#$E0
.967e		15 61		ora $61,x			ora 	NSMantissa1+1,x
.9680		15 69		ora $69,x			ora 	NSMantissa2+1,x
.9682		15 71		ora $71,x			ora 	NSMantissa3+1,x
.9684		d0 12		bne $9698			bne 	_SMExit0 					; if >= 32 it will always return zero.
.9686						_SMLoop:
.9686		d6 59		dec $59,x			dec 	NSMantissa0+1,x 			; predecrement, could do << 0
.9688		30 11		bmi $969b			bmi 	_SMExit 					; exit if done.
.968a		28		plp				plp 								; restore direction setting
.968b		08		php				php
.968c		90 05		bcc $9693			bcc 	_SMRight
.968e		20 0c a3	jsr $a30c			jsr 	NSMShiftLeft 				; shift left if CS
.9691		80 f3		bra $9686			bra 	_SMLoop
.9693						_SMRight:
.9693		20 16 a3	jsr $a316			jsr 	NSMShiftRight 				; shift right if CC
.9696		80 ee		bra $9686			bra 	_SMLoop
.9698						_SMExit0:
.9698		20 fd a2	jsr $a2fd			jsr 	NSMSetZero 					; return zero.
.969b						_SMExit:
.969b		28		plp				plp 								; throw direction
.969c		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/simple.asm

.969d						AddTopTwoStack:
.969d		18		clc				clc
.969e		b5 58		lda $58,x			lda		NSMantissa0,x
.96a0		75 59		adc $59,x			adc 		NSMantissa0+1,x
.96a2		95 58		sta $58,x			sta 	NSMantissa0,x
.96a4		b5 60		lda $60,x			lda		NSMantissa1,x
.96a6		75 61		adc $61,x			adc 		NSMantissa1+1,x
.96a8		95 60		sta $60,x			sta 	NSMantissa1,x
.96aa		b5 68		lda $68,x			lda		NSMantissa2,x
.96ac		75 69		adc $69,x			adc 		NSMantissa2+1,x
.96ae		95 68		sta $68,x			sta 	NSMantissa2,x
.96b0		b5 70		lda $70,x			lda		NSMantissa3,x
.96b2		75 71		adc $71,x			adc 		NSMantissa3+1,x
.96b4		95 70		sta $70,x			sta 	NSMantissa3,x
.96b6		60		rts				rts
.96b7						SubTopTwoStack:
.96b7		38		sec				sec
.96b8		b5 58		lda $58,x			lda		NSMantissa0,x
.96ba		f5 59		sbc $59,x			sbc 		NSMantissa0+1,x
.96bc		95 58		sta $58,x			sta 	NSMantissa0,x
.96be		b5 60		lda $60,x			lda		NSMantissa1,x
.96c0		f5 61		sbc $61,x			sbc 		NSMantissa1+1,x
.96c2		95 60		sta $60,x			sta 	NSMantissa1,x
.96c4		b5 68		lda $68,x			lda		NSMantissa2,x
.96c6		f5 69		sbc $69,x			sbc 		NSMantissa2+1,x
.96c8		95 68		sta $68,x			sta 	NSMantissa2,x
.96ca		b5 70		lda $70,x			lda		NSMantissa3,x
.96cc		f5 71		sbc $71,x			sbc 		NSMantissa3+1,x
.96ce		95 70		sta $70,x			sta 	NSMantissa3,x
.96d0		60		rts				rts
.96d1						AddInteger:
.96d1		fa		plx				plx
.96d2		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.96d4		15 51		ora $51,x			ora 	NSStatus+1,x
.96d6		0a		asl a				asl 	a 							; shift reference bit into sign bit
.96d7		0a		asl a				asl 	a
.96d8		10 05		bpl $96df			bpl 	_NotRef
.96da		48		pha				pha
.96db		20 65 9b	jsr $9b65			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.96de		68		pla				pla
.96df						_NotRef:
.96df		0a		asl a				asl 	a 							; put MSB of type into A:7
.96e0		30 09		bmi $96eb			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.96e2		b5 78		lda $78,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.96e4		15 79		ora $79,x			ora 	NSExponent+1,x
.96e6		f0 06		beq $96ee			beq 	_IntegerCode 				; if clear, then we have two integers
.96e8		4c e4 98	jmp $98e4			jmp 	FloatingPointAdd 							; otherwise at least one float.
.96eb						_StringData:
.96eb		4c aa 94	jmp $94aa			jmp 	StringConcat							; at least one string - don't know both are strings.
.96ee						_IntegerCode:
.96ee						AddCode:
.96ee		b5 50		lda $50,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.96f0		55 51		eor $51,x			eor 	NSStatus+1,x
.96f2		10 a9		bpl $969d			bpl 	AddTopTwoStack
.96f4		20 b7 96	jsr $96b7			jsr 	SubTopTwoStack 				; do a physical subtraction
.96f7		34 70		bit $70,x			bit 	NSMantissa3,x 				; result is +ve, okay
.96f9		10 07		bpl $9702			bpl 	_AddExit
.96fb		b5 51		lda $51,x			lda 	NSStatus+1,x 				; sign is that of 2nd value
.96fd		95 50		sta $50,x			sta 	NSStatus,x
.96ff		20 c6 a2	jsr $a2c6			jsr 	NSMNegateMantissa 			; negate the mantissa and exit
.9702						_AddExit:
.9702		20 1f a3	jsr $a31f			jsr 	NSMIsZero 					; check for -0
.9705		d0 02		bne $9709			bne 	_AddNonZero
.9707		74 50		stz $50,x			stz 	NSStatus,x
.9709						_AddNonZero:
.9709		60		rts				rts
.970a						SubInteger:
.970a		fa		plx				plx
.970b		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.970d		15 51		ora $51,x			ora 	NSStatus+1,x
.970f		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9710		0a		asl a				asl 	a
.9711		10 05		bpl $9718			bpl 	_NotRef
.9713		48		pha				pha
.9714		20 65 9b	jsr $9b65			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9717		68		pla				pla
.9718						_NotRef:
.9718		0a		asl a				asl 	a 							; put MSB of type into A:7
.9719		30 09		bmi $9724			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.971b		b5 78		lda $78,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.971d		15 79		ora $79,x			ora 	NSExponent+1,x
.971f		f0 06		beq $9727			beq 	_IntegerCode 				; if clear, then we have two integers
.9721		4c e9 98	jmp $98e9			jmp 	FloatingPointSub 							; otherwise at least one float.
.9724						_StringData:
.9724		4c 89 a4	jmp $a489			jmp 	NotDoneError							; at least one string - don't know both are strings.
.9727						_IntegerCode:
.9727		b5 51		lda $51,x			lda 	NSStatus+1,x 				; negate the second value.
.9729		49 80		eor #$80			eor 	#$80
.972b		95 51		sta $51,x			sta 	NSStatus+1,x
.972d		80 bf		bra $96ee			bra 	AddCode 					; and do the same code as add.
.972f						AndInteger:
.972f		fa		plx				plx
.9730		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9732		15 51		ora $51,x			ora 	NSStatus+1,x
.9734		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9735		0a		asl a				asl 	a
.9736		10 05		bpl $973d			bpl 	_NotRef
.9738		48		pha				pha
.9739		20 65 9b	jsr $9b65			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.973c		68		pla				pla
.973d						_NotRef:
.973d		0a		asl a				asl 	a
.973e		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9740		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9742		15 79		ora $79,x			ora 	NSExponent+1,x
.9744		f0 03		beq $9749			beq 	_IntegerCode 				; if clear, then we have two integers
.9746		4c 7f a4	jmp $a47f			jmp 	TypeError 					; anything else, type mismatch.
.9749						_IntegerCode:
.9749		b5 58		lda $58,x			lda		NSMantissa0,x
.974b		35 59		and $59,x			and 		NSMantissa0+1,x
.974d		95 58		sta $58,x			sta 	NSMantissa0,x
.974f		b5 60		lda $60,x			lda		NSMantissa1,x
.9751		35 61		and $61,x			and 		NSMantissa1+1,x
.9753		95 60		sta $60,x			sta 	NSMantissa1,x
.9755		b5 68		lda $68,x			lda		NSMantissa2,x
.9757		35 69		and $69,x			and 		NSMantissa2+1,x
.9759		95 68		sta $68,x			sta 	NSMantissa2,x
.975b		b5 70		lda $70,x			lda		NSMantissa3,x
.975d		35 71		and $71,x			and 		NSMantissa3+1,x
.975f		95 70		sta $70,x			sta 	NSMantissa3,x
.9761		74 50		stz $50,x			stz	 	NSStatus,x 					; ignore sign.
.9763		60		rts				rts
.9764						OraInteger:
.9764		fa		plx				plx
.9765		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9767		15 51		ora $51,x			ora 	NSStatus+1,x
.9769		0a		asl a				asl 	a 							; shift reference bit into sign bit
.976a		0a		asl a				asl 	a
.976b		10 05		bpl $9772			bpl 	_NotRef
.976d		48		pha				pha
.976e		20 65 9b	jsr $9b65			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9771		68		pla				pla
.9772						_NotRef:
.9772		0a		asl a				asl 	a
.9773		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9775		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9777		15 79		ora $79,x			ora 	NSExponent+1,x
.9779		f0 03		beq $977e			beq 	_IntegerCode 				; if clear, then we have two integers
.977b		4c 7f a4	jmp $a47f			jmp 	TypeError 					; anything else, type mismatch.
.977e						_IntegerCode:
.977e		b5 58		lda $58,x			lda		NSMantissa0,x
.9780		15 59		ora $59,x			ora 		NSMantissa0+1,x
.9782		95 58		sta $58,x			sta 	NSMantissa0,x
.9784		b5 60		lda $60,x			lda		NSMantissa1,x
.9786		15 61		ora $61,x			ora 		NSMantissa1+1,x
.9788		95 60		sta $60,x			sta 	NSMantissa1,x
.978a		b5 68		lda $68,x			lda		NSMantissa2,x
.978c		15 69		ora $69,x			ora 		NSMantissa2+1,x
.978e		95 68		sta $68,x			sta 	NSMantissa2,x
.9790		b5 70		lda $70,x			lda		NSMantissa3,x
.9792		15 71		ora $71,x			ora 		NSMantissa3+1,x
.9794		95 70		sta $70,x			sta 	NSMantissa3,x
.9796		74 50		stz $50,x			stz	 	NSStatus,x 					; ignore sign.
.9798		60		rts				rts
.9799						EorInteger:
.9799		fa		plx				plx
.979a		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.979c		15 51		ora $51,x			ora 	NSStatus+1,x
.979e		0a		asl a				asl 	a 							; shift reference bit into sign bit
.979f		0a		asl a				asl 	a
.97a0		10 05		bpl $97a7			bpl 	_NotRef
.97a2		48		pha				pha
.97a3		20 65 9b	jsr $9b65			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.97a6		68		pla				pla
.97a7						_NotRef:
.97a7		0a		asl a				asl 	a
.97a8		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.97aa		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.97ac		15 79		ora $79,x			ora 	NSExponent+1,x
.97ae		f0 03		beq $97b3			beq 	_IntegerCode 				; if clear, then we have two integers
.97b0		4c 7f a4	jmp $a47f			jmp 	TypeError 					; anything else, type mismatch.
.97b3						_IntegerCode:
.97b3		b5 58		lda $58,x			lda		NSMantissa0,x
.97b5		55 59		eor $59,x			eor 		NSMantissa0+1,x
.97b7		95 58		sta $58,x			sta 	NSMantissa0,x
.97b9		b5 60		lda $60,x			lda		NSMantissa1,x
.97bb		55 61		eor $61,x			eor 		NSMantissa1+1,x
.97bd		95 60		sta $60,x			sta 	NSMantissa1,x
.97bf		b5 68		lda $68,x			lda		NSMantissa2,x
.97c1		55 69		eor $69,x			eor 		NSMantissa2+1,x
.97c3		95 68		sta $68,x			sta 	NSMantissa2,x
.97c5		b5 70		lda $70,x			lda		NSMantissa3,x
.97c7		55 71		eor $71,x			eor 		NSMantissa3+1,x
.97c9		95 70		sta $70,x			sta 	NSMantissa3,x
.97cb		74 50		stz $50,x			stz	 	NSStatus,x 					; ignore sign.
.97cd		60		rts				rts
.97ce						WordIndirect:
.97ce		fa		plx				plx
.97cf		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.97d1		15 51		ora $51,x			ora 	NSStatus+1,x
.97d3		0a		asl a				asl 	a 							; shift reference bit into sign bit
.97d4		0a		asl a				asl 	a
.97d5		10 05		bpl $97dc			bpl 	_NotRef
.97d7		48		pha				pha
.97d8		20 65 9b	jsr $9b65			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.97db		68		pla				pla
.97dc						_NotRef:
.97dc		0a		asl a				asl 	a
.97dd		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.97df		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.97e1		15 79		ora $79,x			ora 	NSExponent+1,x
.97e3		f0 03		beq $97e8			beq 	_IntegerCode 				; if clear, then we have two integers
.97e5		4c 7f a4	jmp $a47f			jmp 	TypeError 					; anything else, type mismatch.
.97e8						_IntegerCode:
.97e8		20 ee 96	jsr $96ee			jsr 	AddCode 					; add the two values
.97eb		a9 22		lda #$22			lda 	#NSBIsReference+2 			; make a 2 byte reference
.97ed		95 50		sta $50,x			sta 	NSStatus,x
.97ef		60		rts				rts
.97f0						ByteIndirect:
.97f0		fa		plx				plx
.97f1		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.97f3		15 51		ora $51,x			ora 	NSStatus+1,x
.97f5		0a		asl a				asl 	a 							; shift reference bit into sign bit
.97f6		0a		asl a				asl 	a
.97f7		10 05		bpl $97fe			bpl 	_NotRef
.97f9		48		pha				pha
.97fa		20 65 9b	jsr $9b65			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.97fd		68		pla				pla
.97fe						_NotRef:
.97fe		0a		asl a				asl 	a
.97ff		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9801		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9803		15 79		ora $79,x			ora 	NSExponent+1,x
.9805		f0 03		beq $980a			beq 	_IntegerCode 				; if clear, then we have two integers
.9807		4c 7f a4	jmp $a47f			jmp 	TypeError 					; anything else, type mismatch.
.980a						_IntegerCode:
.980a		20 ee 96	jsr $96ee			jsr 	AddCode 					; add the two values
.980d		a9 21		lda #$21			lda 	#NSBIsReference+1 			; make a 1 byte reference
.980f		95 50		sta $50,x			sta 	NSStatus,x
.9811		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/tostring.asm

.9812						ConvertInt16:
.9812		85 58		sta $58				sta 	NSMantissa0 				; set up as 32 bit conversion
.9814		86 60		stx $60				stx 	NSMantissa1
.9816		64 68		stz $68				stz 	NSMantissa2
.9818		64 70		stz $70				stz 	NSMantissa3
.981a		64 50		stz $50				stz 	NSStatus 					; positive integer
.981c		a2 00		ldx #$00			ldx 	#0 							; stack level
.981e		a9 0a		lda #$0a			lda 	#10 						; base 10 decimal.
.9820		80 00		bra $9822			bra 	ConvertInt32
.9822						ConvertInt32:
.9822		5a		phy				phy
.9823		a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.9825		24 50		bit $50				bit 	NSStatus 					; output a - if not negative.
.9827		10 08		bpl $9831			bpl 	_CI32NotNeg
.9829		48		pha				pha
.982a		a9 2d		lda #$2d			lda 	#'-'
.982c		99 23 06	sta $0623,y			sta 	numberBuffer,y
.982f		c8		iny				iny
.9830		68		pla				pla
.9831						_CI32NotNeg:
.9831		20 3f 98	jsr $983f			jsr 	_CI32DivideConvert 			; recursive conversion
.9834		a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.9836		99 23 06	sta $0623,y			sta 	numberBuffer,y
.9839		7a		ply				ply
.983a		a2 06		ldx #$06			ldx 	#numberBuffer >> 8 			; return address in XA
.983c		a9 23		lda #$23			lda 	#numberBuffer & $FF
.983e		60		rts				rts
.983f						_CI32DivideConvert:
.983f		e8		inx				inx 								; write to next slot up
.9840		20 ff a2	jsr $a2ff			jsr 	NSMSetByte 		 			; write the base out.
.9843		ca		dex				dex
.9844		20 6d 95	jsr $956d			jsr 	Int32Divide 				; divide
.9847		b5 58		lda $58,x			lda 	NSMantissa0,x 				; save remainder
.9849		48		pha				pha
.984a		20 2a 95	jsr $952a			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.984d		20 1f a3	jsr $a31f			jsr 	NSMIsZero 					; is it zero ?
.9850		f0 05		beq $9857			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.9852		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.9854		20 3f 98	jsr $983f			jsr 	_CI32DivideConvert 			; and recusrively call.
.9857						_CI32NoRecurse:
.9857		68		pla				pla 								; remainder
.9858		c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII, allowing for hexadecimal.
.985a		90 02		bcc $985e			bcc 	_CI32NotHex
.985c		69 26		adc #$26			adc 	#6+32
.985e						_CI32NotHex:
.985e		69 30		adc #$30			adc 	#48
.9860		99 23 06	sta $0623,y			sta 	numberBuffer,y 				; write out and exit
.9863		c8		iny				iny
.9864		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/expression.asm


;******  Processing file: ./common/expressions/../generated/precedence.dat

.9865						PrecedenceLevel:
>9865		04					.byte	 4	; $00 <<
>9866		02					.byte	 2	; $01 <=
>9867		02					.byte	 2	; $02 <>
>9868		00					.byte	 0	; $03 !!3
>9869		00					.byte	 0	; $04 ><
>986a		02					.byte	 2	; $05 >=
>986b		04					.byte	 4	; $06 >>
>986c		00					.byte	 0	; $07 !!7
>986d		00					.byte	 0	; $08 !!8
>986e		00					.byte	 0	; $09 !!9
>986f		00					.byte	 0	; $0a !!10
>9870		00					.byte	 0	; $0b !!11
>9871		00					.byte	 0	; $0c !!12
>9872		00					.byte	 0	; $0d !!13
>9873		00					.byte	 0	; $0e !!14
>9874		00					.byte	 0	; $0f !!15
>9875		00					.byte	 0	; $10 @
>9876		00					.byte	 0	; $11 !!17
>9877		00					.byte	 0	; $12 !!18
>9878		00					.byte	 0	; $13 [
>9879		04					.byte	 4	; $14 \
>987a		00					.byte	 0	; $15 ]
>987b		01					.byte	 1	; $16 ^
>987c		00					.byte	 0	; $17 _
>987d		00					.byte	 0	; $18 `
>987e		00					.byte	 0	; $19 !!25
>987f		00					.byte	 0	; $1a !!26
>9880		00					.byte	 0	; $1b {
>9881		01					.byte	 1	; $1c |
>9882		00					.byte	 0	; $1d }
>9883		00					.byte	 0	; $1e ~
>9884		00					.byte	 0	; $1f <7F>
>9885		00					.byte	 0	; $20
>9886		05					.byte	 5	; $21 !
>9887		00					.byte	 0	; $22 "
>9888		00					.byte	 0	; $23 #
>9889		05					.byte	 5	; $24 $
>988a		04					.byte	 4	; $25 %
>988b		01					.byte	 1	; $26 &
>988c		00					.byte	 0	; $27 '
>988d		00					.byte	 0	; $28 (
>988e		00					.byte	 0	; $29 )
>988f		04					.byte	 4	; $2a *
>9890		03					.byte	 3	; $2b +
>9891		00					.byte	 0	; $2c ,
>9892		03					.byte	 3	; $2d -
>9893		00					.byte	 0	; $2e .
>9894		04					.byte	 4	; $2f /
>9895		00					.byte	 0	; $30 0
>9896		00					.byte	 0	; $31 1
>9897		00					.byte	 0	; $32 2
>9898		00					.byte	 0	; $33 3
>9899		00					.byte	 0	; $34 4
>989a		00					.byte	 0	; $35 5
>989b		00					.byte	 0	; $36 6
>989c		00					.byte	 0	; $37 7
>989d		00					.byte	 0	; $38 8
>989e		00					.byte	 0	; $39 9
>989f		00					.byte	 0	; $3a :
>98a0		00					.byte	 0	; $3b ;
>98a1		02					.byte	 2	; $3c <
>98a2		02					.byte	 2	; $3d =
>98a3		02					.byte	 2	; $3e >
>98a4		05					.byte	 5	; $3f ?

;******  Return to file: ./common/expressions/expression.asm

.98a5						EvaluateExpressionAt0:
.98a5		a2 00		ldx #$00			ldx 	#0 							; bottom stack level
.98a7						EvaluateExpression:
.98a7		a9 00		lda #$00			lda 	#0 							; lowest precedence level
.98a9						EvaluateExpressionAtPrecedence:
.98a9		48		pha				pha 								; save precedence level
.98aa		20 f1 9c	jsr $9cf1			jsr 	EvaluateTerm 				; evaluate term into level X.
.98ad		68		pla				pla 								; restore precedence level.
.98ae						_EXPRLoop:
.98ae		85 36		sta $36				sta 	zTemp0 						; save current precedence level.
.98b0		b1 30		lda ($30),y			lda 	(codePtr),y
.98b2		c9 40		cmp #$40			cmp		#$40 						; if >= $40 cannot be an operator
.98b4		b0 25		bcs $98db			bcs 	_EXPRExit
.98b6		da		phx				phx 								; read the operator precedence
.98b7		aa		tax				tax
.98b8		bd 65 98	lda $9865,x			lda 	PrecedenceLevel,x
.98bb		fa		plx				plx
.98bc		c9 00		cmp #$00			cmp 	#0							; if zero exit (not an operator)
.98be		f0 1b		beq $98db			beq 	_EXPRExit
.98c0		85 37		sta $37				sta 	zTemp0+1 					; save operator precedence level.
.98c2		a5 36		lda $36				lda 	zTemp0 						; compare current precedence vs. operator precedence
.98c4		c5 37		cmp $37				cmp 	zTemp0+1
.98c6		b0 13		bcs $98db			bcs		_EXPRExit 					; if current >= operator exit
.98c8		48		pha				pha 								; save current precedence.
.98c9		b1 30		lda ($30),y			lda 	(codePtr),y
.98cb		c8		iny				iny
.98cc		48		pha				pha
.98cd		a5 37		lda $37				lda 	zTemp0+1 					; get operator precedence level
.98cf		e8		inx				inx 								; work out the right hand side.
.98d0		20 a9 98	jsr $98a9			jsr 	EvaluateExpressionAtPrecedence
.98d3		ca		dex				dex
.98d4		68		pla				pla 								; get operator, call the code.
.98d5		20 de 98	jsr $98de			jsr 	_EXPRCaller
.98d8		68		pla				pla 								; restore precedence level
.98d9		80 d3		bra $98ae			bra 	_EXPRLoop 					; and go round.
.98db						_EXPRExit:
.98db		a5 36		lda $36				lda 	zTemp0 						; A = current precedence level.
.98dd		60		rts				rts
.98de						_EXPRCaller:
.98de		da		phx				phx 								; save on stack, first thing is to restore it
.98df		0a		asl a				asl 	a 							; double so can use vectors into X
.98e0		aa		tax				tax
.98e1		7c 0c 90	jmp ($900c,x)			jmp 	(VectorSetPunc,x) 			; and go to the code.

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/addsub.asm

.98e4						FloatingPointAdd:
.98e4		20 5a 9a	jsr $9a5a			jsr 	FloatPrepare 				; prepare for floats
.98e7		80 09		bra $98f2			bra 	FloatAdd
.98e9						FloatingPointSub:
.98e9		20 5a 9a	jsr $9a5a			jsr 	FloatPrepare 				; prepare for floats
.98ec						FloatSubtract:
.98ec		b5 51		lda $51,x			lda 	NSStatus+1,x 				; negate FPB
.98ee		49 80		eor #$80			eor 	#$80
.98f0		95 51		sta $51,x			sta 	NSStatus+1,x				; and fall through.
.98f2						FloatAdd:
.98f2		48		pha				pha
.98f3		5a		phy				phy
.98f4		20 69 9a	jsr $9a69			jsr 	NSNormalise 				; normalise S[X]
.98f7		f0 51		beq $994a			beq 	_FAReturn1
.98f9		e8		inx				inx 								; normalise S[X+1]
.98fa		20 69 9a	jsr $9a69			jsr 	NSNormalise
.98fd		ca		dex				dex
.98fe		c9 00		cmp #$00			cmp 	#0
.9900		f0 60		beq $9962			beq 	_FAExit 					; if so, just return A
.9902		b5 78		lda $78,x			lda 	NSExponent,x 				; are the exponents the same ?
.9904		d5 79		cmp $79,x			cmp 	NSExponent+1,x
.9906		f0 18		beq $9920			beq 	_FAExponentsEqual
.9908		b5 78		lda $78,x			lda 	NSExponent,x 				; work out the larger exponent
.990a		a8		tay				tay
.990b		38		sec				sec 								; do a signed comparison of the exponents.
.990c		f5 79		sbc $79,x			sbc 	NSExponent+1,x
.990e		50 02		bvc $9912			bvc 	_FANoSignedChange
.9910		49 80		eor #$80			eor 	#$80
.9912						_FANoSignedChange:
.9912		29 80		and #$80			and 	#$80
.9914		10 02		bpl $9918			bpl 	_FAHaveMax
.9916		b4 79		ldy $79,x			ldy 	NSExponent+1,x
.9918						_FAHaveMax:
.9918		20 65 99	jsr $9965			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.991b		e8		inx				inx
.991c		20 65 99	jsr $9965			jsr 	_FAShiftToExponent
.991f		ca		dex				dex
.9920						_FAExponentsEqual:
.9920		b5 50		lda $50,x			lda 	NSStatus,x 					; are the signs the same
.9922		55 51		eor $51,x			eor 	NSStatus+1,x
.9924		30 0e		bmi $9934			bmi 	_FADifferentSigns
.9926		20 9d 96	jsr $969d			jsr 	AddTopTwoStack 				; do the add of the mantissae
.9929		b5 70		lda $70,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.992b		10 35		bpl $9962			bpl 	_FAExit 					; if no, we are done.
.992d		20 16 a3	jsr $a316			jsr 	NSMShiftRight 				; shift A right, renormalising it.
.9930		f6 78		inc $78,x			inc 	NSExponent,x 				; bump the exponent and exit
.9932		80 2e		bra $9962			bra 	_FAExit
.9934						_FADifferentSigns:
.9934		20 b7 96	jsr $96b7			jsr 	SubTopTwoStack 				; subtract mantissa B from A
.9937		b5 70		lda $70,x			lda 	NSMantissa3,x 				; is the result negative ?
.9939		10 06		bpl $9941			bpl 	_FACheckZero 				; if no, check for -0
.993b		20 bf a2	jsr $a2bf			jsr 	NSMNegate 					; netate result
.993e		20 c6 a2	jsr $a2c6			jsr 	NSMNegateMantissa 			; negate (2'c) the mantissa
.9941						_FACheckZero:
.9941		20 1f a3	jsr $a31f			jsr 	NSMIsZero	 				; check for -0
.9944		d0 1c		bne $9962			bne 	_FAExit
.9946		74 50		stz $50,x			stz 	NSStatus,x
.9948		80 18		bra $9962			bra 	_FAExit
.994a						_FAReturn1:
.994a		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; called when S(X) is zero.
.994c		95 58		sta $58,x			sta 	NSMantissa0,x
.994e		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9950		95 60		sta $60,x			sta 	NSMantissa1,x
.9952		b5 69		lda $69,x			lda 	NSMantissa2+1,x
.9954		95 68		sta $68,x			sta 	NSMantissa2,x
.9956		b5 71		lda $71,x			lda 	NSMantissa3+1,x
.9958		95 70		sta $70,x			sta 	NSMantissa3,x
.995a		b5 79		lda $79,x			lda 	NSExponent+1,x
.995c		95 78		sta $78,x			sta 	NSExponent,x
.995e		b5 51		lda $51,x			lda 	NSStatus+1,x
.9960		95 50		sta $50,x			sta 	NSStatus,x
.9962						_FAExit:
.9962		7a		ply				ply
.9963		68		pla				pla
.9964		60		rts				rts
.9965						_FAShiftToExponent:
.9965						_FAShiftToExponent2:
.9965		98		tya				tya 								; compare Y to exponent
.9966		d5 78		cmp $78,x			cmp 	NSExponent,x 				; reached the exponent required ?
.9968		f0 07		beq $9971			beq 	_FASEExit 					; exit if so.
.996a		20 16 a3	jsr $a316			jsr 	NSMShiftRight	 			; shift the mantissa right
.996d		f6 78		inc $78,x			inc 	NSExponent,x 				; increment exponent
.996f		80 f4		bra $9965			bra 	_FAShiftToExponent2
.9971						_FASEExit:
.9971		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/compare.asm

.9972						CompareFloat:
.9972		20 ec 98	jsr $98ec			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.9975		b5 60		lda $60,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.9977		29 f8		and #$f8			and 	#$F8
.9979		15 68		ora $68,x			ora 	NSMantissa2,x
.997b		15 70		ora $70,x			ora 	NSMantissa3,x
.997d		f0 08		beq $9987			beq 	_FCExit 					; zero, so approximately identical
.997f		a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.9981		34 50		bit $50,x			bit 	NSStatus,x
.9983		10 02		bpl $9987			bpl 	_FCExit
.9985						_FCNegative:
.9985		a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.9987						_FCExit:
.9987		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/divide.asm

.9988						FDivideCommand:
.9988		fa		plx				plx	 								; restore stack position
.9989		20 5a 9a	jsr $9a5a			jsr 	FloatPrepare 				; prepare for floats
.998c						FloatDivide:
.998c		48		pha				pha
.998d		e8		inx				inx
.998e		20 69 9a	jsr $9a69			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.9991		ca		dex				dex
.9992		c9 00		cmp #$00			cmp 	#0
.9994		f0 1d		beq $99b3			beq 	_FDZero
.9996		20 69 9a	jsr $9a69			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.9999		f0 16		beq $99b1			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.999b		20 8e 95	jsr $958e			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.999e		20 2a 95	jsr $952a			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.99a1		20 69 9a	jsr $9a69			jsr		NSNormalise 				; renormalise
.99a4		20 1e 96	jsr $961e			jsr 	CalculateSign 				; calculate result sign
.99a7		b5 78		lda $78,x			lda 	NSExponent,x 				; calculate exponent
.99a9		38		sec				sec
.99aa		f5 79		sbc $79,x			sbc 	NSExponent+1,x
.99ac		38		sec				sec
.99ad		e9 1e		sbc #$1e			sbc 	#30
.99af		95 78		sta $78,x			sta 	NSExponent,x
.99b1						_FDExit:
.99b1		68		pla				pla
.99b2		60		rts				rts
.99b3						_FDZero:
.99b3		a9 03		lda #$03		lda	#3
.99b5		4c 9d 93	jmp $939d		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/fractional.asm

.99b8						FloatFractionalPart:
.99b8		5a		phy				phy
.99b9		b5 50		lda $50,x			lda 	NSStatus,x 					; take absolute value
.99bb		29 7f		and #$7f			and 	#$7F
.99bd		95 50		sta $50,x			sta 	NSStatus,x
.99bf		20 69 9a	jsr $9a69			jsr 	NSNormalise
.99c2		b5 78		lda $78,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.99c4		38		sec				sec
.99c5		e9 e0		sbc #$e0			sbc 	#$E0
.99c7		90 29		bcc $99f2			bcc 	_FFPExit 					; already fractional
.99c9		c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.99cb		b0 22		bcs $99ef			bcs 	_FFPZero
.99cd		a8		tay				tay 								; put count to do in Y
.99ce		b5 70		lda $70,x			lda 	NSMantissa3,x 				; do each in turn.
.99d0		20 f4 99	jsr $99f4			jsr 	_FFPPartial
.99d3		95 70		sta $70,x			sta 	NSMantissa3,x
.99d5		b5 68		lda $68,x			lda 	NSMantissa2,x
.99d7		20 f4 99	jsr $99f4			jsr 	_FFPPartial
.99da		95 68		sta $68,x			sta 	NSMantissa2,x
.99dc		b5 60		lda $60,x			lda 	NSMantissa1,x
.99de		20 f4 99	jsr $99f4			jsr 	_FFPPartial
.99e1		95 60		sta $60,x			sta 	NSMantissa1,x
.99e3		b5 58		lda $58,x			lda 	NSMantissa0,x
.99e5		20 f4 99	jsr $99f4			jsr 	_FFPPartial
.99e8		95 58		sta $58,x			sta 	NSMantissa0,x
.99ea		20 1f a3	jsr $a31f			jsr 	NSMIsZero 					; zeroed check.
.99ed		d0 03		bne $99f2			bne 	_FFPExit
.99ef						_FFPZero:
.99ef		20 fd a2	jsr $a2fd			jsr 	NSMSetZero
.99f2						_FFPExit:
.99f2		7a		ply				ply
.99f3		60		rts				rts
.99f4						_FFPPartial:
.99f4		c0 00		cpy #$00			cpy 	#0 							; no more to do
.99f6		f0 17		beq $9a0f			beq 	_FFFPPExit
.99f8		c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.99fa		b0 0c		bcs $9a08			bcs 	_FFFPPWholeByte
.99fc		5a		phy				phy
.99fd						_FFFPPLeft:
.99fd		0a		asl a				asl 	a
.99fe		88		dey				dey
.99ff		d0 fc		bne $99fd			bne 	_FFFPPLeft
.9a01		7a		ply				ply
.9a02						_FFFPPRight:
.9a02		4a		lsr a				lsr 	a
.9a03		88		dey				dey
.9a04		d0 fc		bne $9a02			bne 	_FFFPPRight
.9a06		80 07		bra $9a0f			bra 	_FFFPPExit
.9a08						_FFFPPWholeByte:
.9a08		98		tya				tya 								; subtract 8 from count
.9a09		38		sec				sec
.9a0a		e9 08		sbc #$08			sbc 	#8
.9a0c		a8		tay				tay
.9a0d		a9 00		lda #$00			lda 	#0 							; and clear all
.9a0f						_FFFPPExit:
.9a0f		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/integer.asm

.9a10						FloatIntegerPart:
.9a10		48		pha				pha
.9a11		b5 78		lda $78,x			lda 	NSExponent,x 				; is it integer already ?
.9a13		f0 1d		beq $9a32			beq 	_FIPExit 					; if so do nothing
.9a15		20 1f a3	jsr $a31f			jsr 	NSMIsZero 					; is it zero ?
.9a18		f0 15		beq $9a2f			beq 	_FIPZero 					; if so return zero.
.9a1a		20 69 9a	jsr $9a69			jsr 	NSNormalise 				; normalise
.9a1d		f0 10		beq $9a2f			beq 	_FIPZero 					; normalised to zero, exit zero
.9a1f						_FIPShift:
.9a1f		b5 78		lda $78,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.9a21		10 07		bpl $9a2a			bpl 	_FIPCheckZero
.9a23		20 16 a3	jsr $a316			jsr 	NSMShiftRight 				; shift mantissa right
.9a26		f6 78		inc $78,x			inc 	NSExponent,x 				; bump exponent
.9a28		80 f5		bra $9a1f			bra 	_FIPShift
.9a2a						_FIPCheckZero:
.9a2a		20 1f a3	jsr $a31f			jsr 	NSMIsZero 					; avoid -0 problem
.9a2d		d0 03		bne $9a32			bne 	_FIPExit 					; set to zero if mantissa zero.
.9a2f						_FIPZero:
.9a2f		20 fd a2	jsr $a2fd			jsr 	NSMSetZero
.9a32						_FIPExit:
.9a32		68		pla				pla
.9a33		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/multiply.asm

.9a34						FloatingPointMultiply:
.9a34		20 5a 9a	jsr $9a5a			jsr 	FloatPrepare 				; prepare for floats
.9a37						FloatMultiply:
.9a37		48		pha				pha
.9a38		20 69 9a	jsr $9a69			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.9a3b		f0 18		beq $9a55			beq 	_FDExit 					; return zero if zero (e.g. zero*something)
.9a3d		e8		inx				inx
.9a3e		20 69 9a	jsr $9a69			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.9a41		ca		dex				dex
.9a42		c9 00		cmp #$00			cmp 	#0
.9a44		f0 0c		beq $9a52			beq 	_FDSetZero
.9a46		20 e0 95	jsr $95e0			jsr 	MultiplyShort 				; calculate the result.
.9a49		75 78		adc $78,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.9a4b		18		clc				clc
.9a4c		75 79		adc $79,x			adc 	NSExponent+1,x
.9a4e		95 78		sta $78,x			sta 	NSExponent,x
.9a50		80 03		bra $9a55			bra 	_FDExit
.9a52						_FDSetZero:
.9a52		20 fd a2	jsr $a2fd			jsr 	NSMSetZero 					; return 0
.9a55						_FDExit:
.9a55		20 69 9a	jsr $9a69			jsr 	NSNormalise 				; normalise the result
.9a58		68		pla				pla
.9a59		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/utility.asm

.9a5a						FloatPrepare:
.9a5a		20 65 9b	jsr $9b65			jsr 	DereferenceTopTwo 			; dereference the top two values
.9a5d		b5 50		lda $50,x			lda 	NSStatus,x 					; check ints/floats, either will do.
.9a5f		15 51		ora $51,x			ora 	NSStatus+1,x
.9a61		29 10		and #$10			and 	#NSBIsString
.9a63		d0 01		bne $9a66			bne 	_FDType
.9a65		60		rts				rts
.9a66						_FDType:
.9a66		4c 7f a4	jmp $a47f			jmp 	TypeError
.9a69						NSNormalise:
.9a69		b5 50		lda $50,x			lda 	NSStatus,x 					; make float, keep sign
.9a6b		29 80		and #$80			and 	#$80
.9a6d		09 08		ora #$08			ora 	#NSTFloat
.9a6f		95 50		sta $50,x			sta 	NSStatus,x
.9a71		20 1f a3	jsr $a31f			jsr 	NSMIsZero 					; if zero exit
.9a74		d0 07		bne $9a7d			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.9a76		16 50		asl $50,x			asl 	NSStatus,x 					; clear the sign bit.
.9a78		76 50		ror $50,x			ror 	NSStatus,x 					; (no -0)
.9a7a		a9 00		lda #$00			lda 	#0 							; set Z flag
.9a7c		60		rts				rts
.9a7d						_NSNormaliseOptimise:
.9a7d		b5 70		lda $70,x			lda 	NSMantissa3,x 				; upper byte zero ?
.9a7f		d0 19		bne $9a9a			bne 	_NSNormaliseLoop
.9a81		b5 68		lda $68,x			lda 	NSMantissa2,x 				; byte normalise
.9a83		30 15		bmi $9a9a			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.9a85		95 70		sta $70,x			sta 	NSMantissa3,x
.9a87		b5 60		lda $60,x			lda 	NSMantissa1,x
.9a89		95 68		sta $68,x			sta 	NSMantissa2,x
.9a8b		b5 58		lda $58,x			lda 	NSMantissa0,x
.9a8d		95 60		sta $60,x			sta 	NSMantissa1,x
.9a8f		74 58		stz $58,x			stz 	NSMantissa0,x
.9a91		b5 78		lda $78,x			lda 	NSExponent,x
.9a93		38		sec				sec
.9a94		e9 08		sbc #$08			sbc 	#8
.9a96		95 78		sta $78,x			sta 	NSExponent,x
.9a98		80 e3		bra $9a7d			bra 	_NSNormaliseOptimise
.9a9a						_NSNormaliseLoop:
.9a9a		34 70		bit $70,x			bit 	NSMantissa3,x 				; bit 30 set ?
.9a9c		70 07		bvs $9aa5			bvs 	_NSNExit 					; exit if so with Z flag clear
.9a9e		20 0c a3	jsr $a30c			jsr 	NSMShiftLeft 				; shift mantissa left
.9aa1		d6 78		dec $78,x			dec 	NSExponent,x 				; adjust exponent
.9aa3		80 f5		bra $9a9a			bra 	_NSNormaliseLoop
.9aa5						_NSNExit:
.9aa5		a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.9aa7		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignnumber.asm

.9aa8						AssignNumber:
.9aa8		5a		phy				phy
.9aa9		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy mantissa0/1 to zTemp0
.9aab		85 36		sta $36				sta 	zTemp0
.9aad		b5 60		lda $60,x			lda 	NSMantissa1,x
.9aaf		85 37		sta $37				sta 	zTemp0+1
.9ab1		b5 50		lda $50,x			lda 	NSStatus,x 					; clear reference bits
.9ab3		29 df		and #$df			and 	#(NSBIsReference ^ $FF)
.9ab5		95 50		sta $50,x			sta 	NSStatus,x
.9ab7		29 18		and #$18			and 	#NSBTypeMask				; assigning to a float ?
.9ab9		c9 08		cmp #$08			cmp 	#NSTFloat
.9abb		f0 24		beq $9ae1			beq 	_ANFloat
.9abd		b5 79		lda $79,x			lda		NSExponent+1,x 				; is it a float
.9abf		f0 03		beq $9ac4			beq		_ANNotFloat
.9ac1		4c 7a a4	jmp $a47a			jmp 	RangeError					; if it is, report an error.
.9ac4						_ANNotFloat:
.9ac4		b5 50		lda $50,x			lda 	NSStatus,x 					; check if byte/word reference.
.9ac6		29 03		and #$03			and 	#3
.9ac8		d0 05		bne $9acf			bne 	_ANByteWord
.9aca		20 ec 9a	jsr $9aec			jsr 	_ANCopy4PackSign 			; copy all 4 bytes and sign
.9acd		80 1b		bra $9aea			bra 	_ANExit
.9acf						_ANByteWord:
.9acf		48		pha				pha 								; save count
.9ad0		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; do byte
.9ad2		92 36		sta ($36)			sta 	(zTemp0)
.9ad4		68		pla				pla
.9ad5		c9 01		cmp #$01			cmp	 	#1
.9ad7		f0 11		beq $9aea			beq 	_ANExit
.9ad9		b5 61		lda $61,x			lda 	NSMantissa1+1,x 			; do word
.9adb		a0 01		ldy #$01			ldy 	#1
.9add		91 36		sta ($36),y			sta 	(zTemp0),y
.9adf		80 09		bra $9aea			bra 	_ANExit
.9ae1						_ANFloat:
.9ae1		20 ec 9a	jsr $9aec			jsr 	_ANCopy4PackSign 			; write all 4 bytes and packed sign
.9ae4		b5 79		lda $79,x			lda 	NSExponent+1,x 				; copy exponent to slot 4
.9ae6		a0 04		ldy #$04			ldy 	#4
.9ae8		91 36		sta ($36),y			sta 	(zTemp0),y
.9aea						_ANExit:
.9aea		7a		ply				ply
.9aeb		60		rts				rts
.9aec						_ANCopy4PackSign:
.9aec		a0 03		ldy #$03			ldy 	#3
.9aee		b5 51		lda $51,x			lda 	NSStatus+1,x 				; sign bit into status
.9af0		29 80		and #$80			and 	#$80 						; put into high bit of mantissa 3
.9af2		15 71		ora $71,x			ora 	NSMantissa3+1,x
.9af4		91 36		sta ($36),y			sta 	(zTemp0),y
.9af6		88		dey				dey
.9af7		b5 69		lda $69,x			lda 	NSMantissa2+1,x
.9af9		91 36		sta ($36),y			sta 	(zTemp0),y
.9afb		88		dey				dey
.9afc		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9afe		91 36		sta ($36),y			sta 	(zTemp0),y
.9b00		88		dey				dey
.9b01		b5 59		lda $59,x			lda 	NSMantissa0+1,x
.9b03		91 36		sta ($36),y			sta 	(zTemp0),y
.9b05		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignstring.asm

.9b06						AssignString:
.9b06		5a		phy				phy
.9b07		b5 59		lda $59,x			lda 	NSMantissa0+1,x
.9b09		85 38		sta $38				sta 	zTemp1
.9b0b		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9b0d		85 39		sta $39				sta 	zTemp1+1
.9b0f		b5 58		lda $58,x			lda 	NSMantissa0,x
.9b11		85 36		sta $36				sta 	zTemp0
.9b13		b5 60		lda $60,x			lda 	NSMantissa1,x
.9b15		85 37		sta $37				sta 	zTemp0+1
.9b17		a0 01		ldy #$01			ldy 	#1 							; the high byte of the target address
.9b19		b1 36		lda ($36),y			lda 	(zTemp0),y
.9b1b		f0 23		beq $9b40			beq 	_ASNewStringRequired 		; if zero, a new string is required.
.9b1d		38		sec				sec 								; put Address-2 in zsTemp - this is the size/status/string record
.9b1e		b2 36		lda ($36)			lda 	(zTemp0) 					; of concreted strings
.9b20		e9 02		sbc #$02			sbc 	#2
.9b22		85 3c		sta $3c				sta 	zsTemp
.9b24		a0 01		ldy #$01			ldy 	#1
.9b26		b1 36		lda ($36),y			lda 	(zTemp0),y
.9b28		e9 00		sbc #$00			sbc 	#0
.9b2a		85 3d		sta $3d				sta 	zsTemp+1
.9b2c		a0 ff		ldy #$ff			ldy 	#$FF 						; get length of new string
.9b2e						_ASGetLength:
.9b2e		c8		iny				iny
.9b2f		b1 38		lda ($38),y			lda 	(zTemp1),y
.9b31		d0 fb		bne $9b2e			bne 	_ASGetLength
.9b33		98		tya				tya 								; is this length <= current length
.9b34		d2 3c		cmp ($3c)			cmp 	(zsTemp)
.9b36		90 1e		bcc $9b56			bcc 	_ASCopyString
.9b38		f0 1c		beq $9b56			beq 	_ASCopyString
.9b3a		a9 80		lda #$80			lda 	#$80 						; mark as unused.
.9b3c		a0 01		ldy #$01			ldy 	#1
.9b3e		91 3c		sta ($3c),y			sta 	(zsTemp),y
.9b40						_ASNewStringRequired:
.9b40		e8		inx				inx 								; concrete the new string.
.9b41		20 94 b3	jsr $b394			jsr 	StringConcrete				; (breaks zTemp1/2, not zTemp0 and zsTemp)
.9b44		ca		dex				dex
.9b45		18		clc				clc
.9b46		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; copy that new address to the reference.
.9b48		69 02		adc #$02			adc 	#2 							; add two to point at the data.
.9b4a		92 36		sta ($36)			sta 	(zTemp0)
.9b4c		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9b4e		69 00		adc #$00			adc 	#0
.9b50		a0 01		ldy #$01			ldy 	#1
.9b52		91 36		sta ($36),y			sta 	(zTemp0),y
.9b54		80 0d		bra $9b63			bra 	_ASExit
.9b56						_ASCopyString:
.9b56		a0 00		ldy #$00			ldy 	#0
.9b58						_ASCopyLoop:
.9b58		b1 38		lda ($38),y			lda 	(zTemp1),y
.9b5a		c8		iny				iny
.9b5b		c8		iny				iny
.9b5c		91 3c		sta ($3c),y			sta 	(zsTemp),y
.9b5e		88		dey				dey
.9b5f		c9 00		cmp #$00			cmp 	#0
.9b61		d0 f5		bne $9b58			bne 	_ASCopyLoop
.9b63						_ASExit:
.9b63		7a		ply				ply
.9b64		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/dereference.asm

.9b65						DereferenceTopTwo:
.9b65		e8		inx				inx
.9b66		20 6a 9b	jsr $9b6a			jsr 	Dereference 				; deref x+1
.9b69		ca		dex				dex  								; falls through to deref x
.9b6a						Dereference:
.9b6a		b5 50		lda $50,x			lda 	NSStatus,x 					; get the status byte
.9b6c		29 20		and #$20			and 	#NSBIsReference 			; is it a reference
.9b6e		f0 48		beq $9bb8			beq 	_DRFExit 					; not a reference, so exit.
.9b70		5a		phy				phy
.9b71		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy address to dereference into zTemp0
.9b73		85 36		sta $36				sta 	zTemp0
.9b75		b5 60		lda $60,x			lda 	NSMantissa1,x
.9b77		85 37		sta $37				sta 	zTemp0+1
.9b79		74 60		stz $60,x			stz 	NSMantissa1,x 				; clear second byte.
.9b7b		b2 36		lda ($36)			lda 	(zTemp0) 					; do the first byte
.9b7d		95 58		sta $58,x			sta 	NSMantissa0,x
.9b7f		b5 50		lda $50,x			lda 	NSStatus,x 					; get status byte.
.9b81		29 18		and #$18			and 	#NSBTypeMask 				; what type is it ?
.9b83		c9 10		cmp #$10			cmp 	#NSTString 					; if string, dereference two
.9b85		f0 0e		beq $9b95			beq 	_DRFDereferenceTwo
.9b87		c9 08		cmp #$08			cmp 	#NSTFloat 					; if float, do full dereference.
.9b89		f0 2f		beq $9bba			beq 	_DRFFull
.9b8b		b5 50		lda $50,x			lda 	NSStatus,x 					; must be integer - how many bytes ?
.9b8d		29 03		and #$03			and 	#3
.9b8f		f0 29		beq $9bba			beq 	_DRFFull 					; the whole word
.9b91		c9 01		cmp #$01			cmp 	#1 							; is it 10 (e.g. 2 bytes)
.9b93		f0 06		beq $9b9b			beq		_DRFClear23 				; no, one byte, clear 2 & 3 and exit
.9b95						_DRFDereferenceTwo:
.9b95		a0 01		ldy #$01			ldy 	#1
.9b97		b1 36		lda ($36),y			lda 	(zTemp0),y
.9b99		95 60		sta $60,x			sta 	NSMantissa1,x
.9b9b						_DRFClear23:
.9b9b		74 68		stz $68,x			stz 	NSMantissa2,x 				; clear upper bytes, only read 1 or 2 bytes
.9b9d		74 70		stz $70,x			stz 	NSMantissa3,x
.9b9f		b5 50		lda $50,x			lda 	NSStatus,x 					; make it a value of that type.
.9ba1		29 18		and #$18			and 	#NSBTypeMask
.9ba3		95 50		sta $50,x			sta 	NSStatus,x 					; and fall through.
.9ba5		c9 10		cmp #$10			cmp 	#NSTString  				; is it a string
.9ba7		d0 0e		bne $9bb7			bne 	_DRFNotString
.9ba9		b5 58		lda $58,x			lda 	NSMantissa0,x 				; check address is zero
.9bab		15 60		ora $60,x			ora 	NSMantissa1,x
.9bad		d0 08		bne $9bb7			bne 	_DRFNotString
.9baf		a9 b9		lda #$b9			lda 	#_DRFNullString & $FF 		; if so, return reference to ""
.9bb1		95 58		sta $58,x			sta 	NSMantissa0,x
.9bb3		a9 9b		lda #$9b			lda 	#_DRFNullString >> 8
.9bb5		95 60		sta $60,x			sta 	NSMantissa1,x
.9bb7						_DRFNotString
.9bb7		7a		ply				ply 								; restore Y and exit
.9bb8						_DRFExit:
.9bb8		60		rts				rts
.9bb9						_DRFNullString:
>9bb9		00						.byte 	0
.9bba						_DRFFull:
.9bba		a0 01		ldy #$01			ldy 	#1 							; get remaining 3 bytes.
.9bbc		b1 36		lda ($36),y			lda 	(zTemp0),y
.9bbe		95 60		sta $60,x			sta 	NSMantissa1,x
.9bc0		c8		iny				iny
.9bc1		b1 36		lda ($36),y			lda 	(zTemp0),y
.9bc3		95 68		sta $68,x			sta 	NSMantissa2,x
.9bc5		c8		iny				iny
.9bc6		b1 36		lda ($36),y			lda 	(zTemp0),y
.9bc8		95 70		sta $70,x			sta 	NSMantissa3,x
.9bca		74 78		stz $78,x			stz 	NSExponent,x 				; clear exponent.
.9bcc		b5 50		lda $50,x			lda		NSStatus,x 					; see if type is integer
.9bce		29 18		and #$18			and 	#NSBTypeMask  				; type information only
.9bd0		95 50		sta $50,x			sta 	NSStatus,x 					; update it back.
.9bd2		f0 05		beq $9bd9			beq 	_DRFNoExponent
.9bd4		c8		iny				iny 								; if not, read the exponent as well.
.9bd5		b1 36		lda ($36),y			lda 	(zTemp0),y
.9bd7		95 78		sta $78,x			sta 	NSExponent,x
.9bd9						_DRFNoExponent:
.9bd9		b5 70		lda $70,x			lda 	NSMantissa3,x 				; is the most significant bit set ?
.9bdb		10 0a		bpl $9be7			bpl 	_DRFExit2 					; if not, then exit.
.9bdd		29 7f		and #$7f			and 	#$7F 						; clear that bit.
.9bdf		95 70		sta $70,x			sta 	NSMantissa3,x
.9be1		b5 50		lda $50,x			lda 	NSStatus,x 					; set the sign flag
.9be3		09 80		ora #$80			ora 	#NSBIsNegative
.9be5		95 50		sta $50,x			sta 	NSStatus,x
.9be7						_DRFExit2:
.9be7		7a		ply				ply
.9be8		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/number.asm

=1						ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2						ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3						ESTA_Decimal = 3 							; fractional part.
.9be9						EncodeNumberStart:
.9be9		38		sec				sec
.9bea		80 01		bra $9bed			bra 	EncodeNumberContinue+1
.9bec						EncodeNumberContinue:
.9bec		18		clc				clc
.9bed						EncodeNumber:
.9bed		08		php				php 								; save reset flag.
.9bee		c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.9bf0		f0 12		beq $9c04			beq 	_ENIsOkay
.9bf2		c9 30		cmp #$30			cmp 	#"0"
.9bf4		90 04		bcc $9bfa			bcc 	_ENBadNumber
.9bf6		c9 3a		cmp #$3a			cmp 	#"9"+1
.9bf8		90 0a		bcc $9c04			bcc 	_ENIsOkay
.9bfa						_ENBadNumber:
.9bfa		28		plp				plp 								; throw saved reset
.9bfb		ad 05 04	lda $0405			lda 	encodeState 				; if in decimal mode, construct final number
.9bfe		c9 03		cmp #$03			cmp 	#ESTA_Decimal
.9c00		f0 7b		beq $9c7d			beq 	_ENConstructFinal
.9c02						_ENFail:
.9c02		18		clc				clc 								; not allowed
.9c03		60		rts				rts
.9c04						_ENIsOkay:
.9c04		28		plp				plp 								; are we restarting
.9c05		90 15		bcc $9c1c			bcc 	_ENNoRestart
.9c07						_ENStartEncode:
.9c07		c9 2e		cmp #$2e			cmp 	#'.'						; first is decimal place, go straight to that.
.9c09		f0 0c		beq $9c17			beq 	_ENFirstDP
.9c0b		29 0f		and #$0f			and 	#15 						; put digit in mantissa, initially a single digit constant
.9c0d		20 ff a2	jsr $a2ff			jsr 	NSMSetByte 					; in single byte mode.
.9c10		a9 01		lda #$01			lda 	#ESTA_Low
.9c12						_ENExitChange:
.9c12		8d 05 04	sta $0405			sta 	encodeState 				; save new state
.9c15		38		sec				sec
.9c16		60		rts				rts
.9c17						_ENFirstDP:
.9c17		20 fd a2	jsr $a2fd			jsr 	NSMSetZero 					; clear integer part
.9c1a		80 3c		bra $9c58			bra 	_ESTASwitchFloat			; go straight to float and exi
.9c1c						_ENNoRestart:
.9c1c		48		pha				pha 								; save digit or DP on stack.
.9c1d		ad 05 04	lda $0405			lda 	encodeState 				; get current state
.9c20		c9 01		cmp #$01			cmp 	#ESTA_Low
.9c22		f0 09		beq $9c2d			beq  	_ESTALowState
.9c24		c9 02		cmp #$02			cmp 	#ESTA_High
.9c26		f0 26		beq $9c4e			beq 	_ESTAHighState
.9c28		c9 03		cmp #$03			cmp 	#ESTA_Decimal
.9c2a		f0 38		beq $9c64			beq 	_ESTADecimalState
>9c2c		db						.byte 	$DB 						; causes a break in the emulator
.9c2d						_ESTALowState:
.9c2d		68		pla				pla 								; get value back
.9c2e		c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.9c30		f0 26		beq $9c58			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.9c32		29 0f		and #$0f			and 	#15 						; make digit
.9c34		8d 06 04	sta $0406			sta 	digitTemp 					; save it.
.9c37		b5 58		lda $58,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.9c39		0a		asl a				asl 	a
.9c3a		0a		asl a				asl 	a
.9c3b		75 58		adc $58,x			adc 	NSMantissa0,x
.9c3d		0a		asl a				asl 	a
.9c3e		6d 06 04	adc $0406			adc 	digitTemp
.9c41		95 58		sta $58,x			sta 	NSMantissa0,x
.9c43		c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.9c45		90 05		bcc $9c4c			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.9c47		a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.9c49		8d 05 04	sta $0405			sta 	encodeState
.9c4c						_ESTANoSwitch:
.9c4c		38		sec				sec
.9c4d		60		rts				rts
.9c4e						_ESTAHighState:
.9c4e		68		pla				pla 								; get value back
.9c4f		c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.9c51		f0 05		beq $9c58			beq 	_ESTASwitchFloat
.9c53		20 b1 9c	jsr $9cb1			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.9c56		38		sec				sec
.9c57		60		rts				rts
.9c58						_ESTASwitchFloat:
.9c58		9c 07 04	stz $0407			stz 	decimalCount 				; reset the count of digits - we divide by 10^n at the end.
.9c5b		e8		inx				inx 								; zero the decimal additive.
.9c5c		20 fd a2	jsr $a2fd			jsr 	NSMSetZero
.9c5f		ca		dex				dex
.9c60		a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.9c62		80 ae		bra $9c12			bra 	_ENExitChange
.9c64						_ESTADecimalState:
.9c64		68		pla				pla 								; digit.
.9c65		c9 2e		cmp #$2e			cmp 	#"." 						; fail on 2nd decimal point.
.9c67		f0 99		beq $9c02			beq 	_ENFail
.9c69		e8		inx				inx 								; put digit into fractional part of X+1
.9c6a		20 b1 9c	jsr $9cb1			jsr 	ESTAShiftDigitIntoMantissa
.9c6d		ca		dex				dex
.9c6e		ee 07 04	inc $0407			inc 	decimalCount 				; bump the count of decimals
.9c71		ad 07 04	lda $0407			lda 	decimalCount 				; too many decimal digits.
.9c74		c9 0b		cmp #$0b			cmp 	#11
.9c76		f0 02		beq $9c7a			beq 	_ESTADSFail
.9c78		38		sec				sec
.9c79		60		rts				rts
.9c7a						_ESTADSFail:
.9c7a		4c 7a a4	jmp $a47a			jmp 	RangeError
.9c7d						_ENConstructFinal:
.9c7d		ad 07 04	lda $0407			lda 	decimalCount 				; get decimal count
.9c80		f0 2d		beq $9caf			beq 	_ENCFExit 					; no decimals
.9c82		5a		phy				phy
.9c83		0a		asl a				asl 	a 							; x 4 and CLC
.9c84		0a		asl a				asl 	a
.9c85		6d 07 04	adc $0407			adc 	decimalCount
.9c88		a8		tay				tay
.9c89		b9 39 a4	lda $a439,y			lda 	DecimalScalarTable-5,y 		; copy decimal scalar to X+2
.9c8c		95 5a		sta $5a,x			sta 	NSMantissa0+2,x  			; this is 10^-n
.9c8e		b9 3a a4	lda $a43a,y			lda 	DecimalScalarTable-5+1,y
.9c91		95 62		sta $62,x			sta 	NSMantissa1+2,x
.9c93		b9 3b a4	lda $a43b,y			lda 	DecimalScalarTable-5+2,y
.9c96		95 6a		sta $6a,x			sta 	NSMantissa2+2,x
.9c98		b9 3c a4	lda $a43c,y			lda 	DecimalScalarTable-5+3,y
.9c9b		95 72		sta $72,x			sta 	NSMantissa3+2,x
.9c9d		b9 3d a4	lda $a43d,y			lda 	DecimalScalarTable-5+4,y
.9ca0		95 7a		sta $7a,x			sta 	NSExponent+2,x
.9ca2		a9 08		lda #$08			lda 	#NSTFloat
.9ca4		95 52		sta $52,x			sta 	NSStatus+2,x
.9ca6		7a		ply				ply
.9ca7		e8		inx				inx 								; multiply decimal const by decimal scalar
.9ca8		20 37 9a	jsr $9a37			jsr 	FloatMultiply
.9cab		ca		dex				dex
.9cac		20 f2 98	jsr $98f2			jsr 	FloatAdd 					; add to integer part.
.9caf						_ENCFExit:
.9caf		18		clc				clc 								; reject the digit.
.9cb0		60		rts				rts
.9cb1						ESTAShiftDigitIntoMantissa:
.9cb1		29 0f		and #$0f			and 	#15 						; save digit
.9cb3		48		pha				pha
.9cb4		b5 70		lda $70,x			lda 	NSMantissa3,x 				; push mantissa on stack
.9cb6		48		pha				pha
.9cb7		b5 68		lda $68,x			lda 	NSMantissa2,x
.9cb9		48		pha				pha
.9cba		b5 60		lda $60,x			lda 	NSMantissa1,x
.9cbc		48		pha				pha
.9cbd		b5 58		lda $58,x			lda 	NSMantissa0,x
.9cbf		48		pha				pha
.9cc0		20 0c a3	jsr $a30c			jsr 	NSMShiftLeft 				; x 2
.9cc3		20 0c a3	jsr $a30c			jsr 	NSMShiftLeft 				; x 4
.9cc6		18		clc				clc 								; pop mantissa and add
.9cc7		68		pla				pla
.9cc8		75 58		adc $58,x			adc 	NSMantissa0,x
.9cca		95 58		sta $58,x			sta 	NSMantissa0,x
.9ccc		68		pla				pla
.9ccd		75 60		adc $60,x			adc 	NSMantissa1,x
.9ccf		95 60		sta $60,x			sta 	NSMantissa1,x
.9cd1		68		pla				pla
.9cd2		75 68		adc $68,x			adc 	NSMantissa2,x
.9cd4		95 68		sta $68,x			sta 	NSMantissa2,x
.9cd6		68		pla				pla
.9cd7		75 70		adc $70,x			adc 	NSMantissa3,x
.9cd9		95 70		sta $70,x			sta 	NSMantissa3,x 				; x 5
.9cdb		20 0c a3	jsr $a30c			jsr 	NSMShiftLeft 				; x 10
.9cde		68		pla				pla 								; add digit
.9cdf		18		clc				clc
.9ce0		75 58		adc $58,x			adc 	NSMantissa0,x
.9ce2		95 58		sta $58,x			sta 	NSMantissa0,x
.9ce4		90 0a		bcc $9cf0			bcc 	_ESTASDExit
.9ce6		f6 60		inc $60,x			inc 	NSMantissa1,x
.9ce8		d0 06		bne $9cf0			bne 	_ESTASDExit
.9cea		f6 68		inc $68,x			inc 	NSMantissa2,x
.9cec		d0 02		bne $9cf0			bne 	_ESTASDExit
.9cee		f6 70		inc $70,x			inc 	NSMantissa3,x
.9cf0						_ESTASDExit:
.9cf0		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/term.asm

.9cf1						EvaluateTerm:
.9cf1		b1 30		lda ($30),y			lda 	(codePtr),y
.9cf3		30 18		bmi $9d0d			bmi 	_ETCheckUnary 				; unary function ? (text ones)
.9cf5		c9 40		cmp #$40			cmp 	#$40 						; 40-7F => identifier reference
.9cf7		b0 6c		bcs $9d65			bcs 	_ETVariable
.9cf9		c9 30		cmp #$30			cmp 	#'0' 						; is it a number
.9cfb		90 6b		bcc $9d68			bcc 	_ETPuncUnary 				; if not it might be a punctuation unary.
.9cfd		c9 3a		cmp #$3a			cmp 	#'9'+1
.9cff		b0 67		bcs $9d68			bcs 	_ETPuncUnary
.9d01		20 e9 9b	jsr $9be9			jsr 	EncodeNumberStart 			; can't fail as it's 0-9 !
.9d04						_ETNumber:
.9d04		c8		iny				iny 								; keep encoding until we have the numbers
.9d05		b1 30		lda ($30),y			lda 	(codePtr),y
.9d07		20 ec 9b	jsr $9bec			jsr 	EncodeNumberContinue
.9d0a		b0 f8		bcs $9d04			bcs 	_ETNumber 					; go back if accepted.
.9d0c		60		rts				rts
.9d0d						_ETCheckUnary:
.9d0d		c9 ff		cmp #$ff			cmp 	#KWC_STRING 				; string token
.9d0f		f0 3f		beq $9d50			beq 	_ETString
.9d11		c9 fe		cmp #$fe			cmp 	#KWC_HEXCONST 				; hex constant.
.9d13		f0 12		beq $9d27			beq 	_ETHexConstant
.9d15		c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; check it actually is a unary function
.9d17		90 0b		bcc $9d24			bcc 	_ETSyntaxError
.9d19		c9 ae		cmp #$ae			cmp 	#KWC_LAST_UNARY+1
.9d1b		b0 07		bcs $9d24			bcs 	_ETSyntaxError
.9d1d		da		phx				phx 								; push X on the stack
.9d1e		0a		asl a				asl 	a 							; put vector x 2 into X
.9d1f		aa		tax				tax
.9d20		c8		iny				iny 								; consume unary function token
.9d21		7c 8c 90	jmp ($908c,x)			jmp 	(VectorSet0,x) 				; and do it.
.9d24						_ETSyntaxError:
.9d24		4c 75 a4	jmp $a475			jmp 	SyntaxError
.9d27						_ETHexConstant:
.9d27		c8		iny				iny 								; skip #
.9d28		c8		iny				iny 								; skip count
.9d29		20 fd a2	jsr $a2fd			jsr 	NSMSetZero 					; clear result
.9d2c						_ETHLoop:
.9d2c		b1 30		lda ($30),y			lda 	(codePtr),y
.9d2e		c8		iny				iny 								; and consume
.9d2f		c9 00		cmp #$00			cmp 	#0 							; exit if zero
.9d31		f0 1c		beq $9d4f			beq 	_ETHExit
.9d33		48		pha				pha 								; save on stack.
.9d34		20 0c a3	jsr $a30c			jsr 	NSMShiftLeft 				; x 2
.9d37		20 0c a3	jsr $a30c			jsr 	NSMShiftLeft 				; x 4
.9d3a		20 0c a3	jsr $a30c			jsr 	NSMShiftLeft 				; x 8
.9d3d		20 0c a3	jsr $a30c			jsr 	NSMShiftLeft 				; x 16
.9d40		68		pla				pla 								; ASCII
.9d41		c9 41		cmp #$41			cmp 	#'A'
.9d43		90 02		bcc $9d47			bcc 	_ETHNotChar
.9d45		e9 07		sbc #$07			sbc 	#7
.9d47						_ETHNotChar:
.9d47		29 0f		and #$0f			and 	#15 						; digit now
.9d49		15 58		ora $58,x			ora 	NSMantissa0,x 				; put in LS Nibble
.9d4b		95 58		sta $58,x			sta 	NSMantissa0,x
.9d4d		80 dd		bra $9d2c			bra 	_ETHLoop 					; go round.
.9d4f						_ETHExit:
.9d4f		60		rts				rts
.9d50						_ETString:
.9d50		c8		iny				iny 								; look at length
.9d51		b1 30		lda ($30),y			lda 	(codePtr),y
.9d53		48		pha				pha
.9d54		c8		iny				iny 								; first character
.9d55		20 fc a6	jsr $a6fc			jsr 	MemoryInline 				; put address of string at (code-Ptr),y on stack
.9d58		68		pla				pla 								; restore count and save
.9d59		85 36		sta $36				sta 	zTemp0
.9d5b		98		tya				tya 								; add length to Y to skip it.
.9d5c		18		clc				clc
.9d5d		65 36		adc $36				adc 	zTemp0
.9d5f		a8		tay				tay
.9d60		a9 10		lda #$10			lda 	#NSTString 					; mark as string
.9d62		95 50		sta $50,x			sta 	NSStatus,x
.9d64		60		rts				rts
.9d65						_ETVariable:
.9d65		4c ba 9d	jmp $9dba			jmp 	VariableHandler
.9d68						_ETPuncUnary:
.9d68		c8		iny				iny 								; consume the unary character
.9d69		c9 2d		cmp #$2d			cmp 	#KWD_MINUS 					; unary minus
.9d6b		f0 2b		beq $9d98			beq 	_ETUnaryNegate
.9d6d		c9 b9		cmp #$b9			cmp 	#KWD_AT 					; @ reference -> constant
.9d6f		f0 36		beq $9da7			beq 	_ETDereference
.9d71		c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; parenthesis
.9d73		f0 3e		beq $9db3			beq 	_ETParenthesis
.9d75		64 36		stz $36				stz 	zTemp0 						; zTemp0 is the indirection level.
.9d77		c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; byte indirection (0) ?
.9d79		f0 06		beq $9d81			beq 	_ETIndirection
.9d7b		e6 36		inc $36				inc 	zTemp0
.9d7d		c9 21		cmp #$21			cmp 	#KWD_PLING					; word indirection (1) \
.9d7f		d0 a3		bne $9d24			bne 	_ETSyntaxError
.9d81						_ETIndirection:
.9d81		a5 36		lda $36				lda 	zTemp0 						; push indirection amount (0-1) => (1-2) on the stack
.9d83		1a		inc a				inc 	a
.9d84		48		pha				pha
.9d85		20 f1 9c	jsr $9cf1			jsr 	EvaluateTerm				; evaluate the term
.9d88		20 6a 9b	jsr $9b6a			jsr 	Dereference 				; dereference it.
.9d8b		b5 50		lda $50,x			lda 	NSStatus,x 					; must be a +ve integer.
.9d8d		d0 06		bne $9d95			bne 	_ETTypeMismatch
.9d8f		68		pla				pla 								; indirection 1-2
.9d90		09 20		ora #$20			ora 	#NSBIsReference 			; make it a reference.
.9d92		95 50		sta $50,x			sta 	NSStatus,x
.9d94		60		rts				rts
.9d95						_ETTypeMismatch:
.9d95		4c 7f a4	jmp $a47f			jmp 	TypeError
.9d98						_ETUnaryNegate:
.9d98		20 f1 9c	jsr $9cf1			jsr 	EvaluateTerm				; evaluate the term
.9d9b		20 6a 9b	jsr $9b6a			jsr 	Dereference 				; dereference it.
.9d9e		b5 50		lda $50,x			lda 	NSStatus,x 					; must be a number
.9da0		29 10		and #$10			and 	#NSTString
.9da2		d0 f1		bne $9d95			bne 	_ETTypeMismatch
.9da4		4c bf a2	jmp $a2bf			jmp 	NSMNegate  					; just toggles the sign bit.
.9da7						_ETDereference:
.9da7		20 f1 9c	jsr $9cf1			jsr 	EvaluateTerm				; evaluate the term
.9daa		b5 50		lda $50,x			lda 	NSStatus,x 					; must be a reference
.9dac		29 20		and #$20			and 	#NSBIsReference
.9dae		f0 e5		beq $9d95			beq 	_ETTypeMismatch
.9db0		74 50		stz $50,x			stz 	NSStatus,x 					; make it an integer address
.9db2		60		rts				rts
.9db3						_ETParenthesis:
.9db3		20 a7 98	jsr $98a7			jsr 	EvaluateExpression 			; evaluate here, from lowest precedence
.9db6		20 84 93	jsr $9384			jsr 	CheckRightBracket 			; check for )
.9db9		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/variable.asm

.9dba						VariableHandler:
.9dba		b1 30		lda ($30),y			lda 	(codePtr),y
.9dbc		18		clc				clc
.9dbd		69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.9dbf		85 37		sta $37				sta 	zTemp0+1
.9dc1		c8		iny				iny
.9dc2		b1 30		lda ($30),y			lda 	(codePtr),y
.9dc4		85 36		sta $36				sta 	zTemp0
.9dc6		c8		iny				iny
.9dc7		18		clc				clc									; copy variable address+3 to mantissa
.9dc8		69 03		adc #$03			adc 	#3 							; this is the address of the data.
.9dca		95 58		sta $58,x			sta 	NSMantissa0,x
.9dcc		a5 37		lda $37				lda 	zTemp0+1
.9dce		69 00		adc #$00			adc 	#0
.9dd0		95 60		sta $60,x			sta 	NSMantissa1,x
.9dd2		74 68		stz $68,x			stz 	NSMantissa2,x
.9dd4		74 70		stz $70,x			stz 	NSMantissa3,x
.9dd6		74 78		stz $78,x			stz 	NSExponent,x
.9dd8		5a		phy				phy
.9dd9		a0 02		ldy #$02			ldy 	#2 							; read type
.9ddb		b1 36		lda ($36),y			lda 	(zTemp0),y
.9ddd		7a		ply				ply
.9dde		29 1c		and #$1c			and 	#NSBTypeMask+NSBIsArray 	; get type information
.9de0		09 20		ora #$20			ora 	#NSBIsReference 			; make a reference.
.9de2		95 50		sta $50,x			sta 	NSStatus,x
.9de4		29 04		and #$04			and 	#NSBIsArray
.9de6		d0 01		bne $9de9			bne 	_VHArray
.9de8		60		rts				rts
.9de9						_VHArray:
.9de9		e8		inx				inx
.9dea		20 98 a2	jsr $a298			jsr 	Evaluate8BitInteger 		; get the 1st index.
.9ded		a9 ff		lda #$ff			lda 	#$FF 						; set Status of X+2 to a duff value so we know if we picked it up.
.9def		95 51		sta $51,x			sta 	NSStatus+1,x
.9df1		b1 30		lda ($30),y			lda 	(codePtr),y
.9df3		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.9df5		d0 06		bne $9dfd			bne 	_VHNoSecondIndex
.9df7		c8		iny				iny 								; skip the comma
.9df8		e8		inx				inx
.9df9		20 98 a2	jsr $a298			jsr 	Evaluate8BitInteger 		; get the 2nd index.
.9dfc		ca		dex				dex
.9dfd						_VHNoSecondIndex:
.9dfd		ca		dex				dex 								; set X back.
.9dfe		20 84 93	jsr $9384			jsr 	CheckRightBracket 			; and check the right bracket.
.9e01		5a		phy				phy 								; save position
.9e02		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy record address to zaTemp (moved 6/12/22)
.9e04		85 3e		sta $3e				sta 	zaTemp
.9e06		b5 60		lda $60,x			lda 	NSMantissa1,x
.9e08		85 3f		sta $3f				sta 	zaTemp+1
.9e0a		a0 02		ldy #$02			ldy 	#2 							; check first index is not-zero, e.g. array defined
.9e0c		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9e0e		f0 5d		beq $9e6d			beq 	_VHBadArray
.9e10		a0 03		ldy #$03			ldy 	#3 							; get the second index - which is 0 if there is one index.
.9e12		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9e14		f0 02		beq $9e18			beq 	_VHHas2Mask
.9e16		a9 ff		lda #$ff			lda 	#$FF
.9e18						_VHHas2Mask:
.9e18		d5 52		cmp $52,x			cmp 	NSStatus+2,x 				; so if they are the same there are the wrong number of indices
.9e1a		f0 4c		beq $9e68			beq 	_VHBadIndex
.9e1c		0a		asl a				asl 	a 							; carry will be set if a second index
.9e1d		90 08		bcc $9e27			bcc 	_VHCheckFirstIndex
.9e1f		a0 03		ldy #$03			ldy 	#3 			 				; check the 2nd size >= 2nd index
.9e21		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9e23		d5 5a		cmp $5a,x			cmp 	NSMantissa0+2,x
.9e25		90 41		bcc $9e68			bcc 	_VHBadIndex
.9e27						_VHCheckFirstIndex:
.9e27		a0 02		ldy #$02			ldy 	#2 			 				; check the 2nd size >= 2nd index
.9e29		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9e2b		d5 59		cmp $59,x			cmp 	NSMantissa0+1,x
.9e2d		90 39		bcc $9e68			bcc 	_VHBadIndex
.9e2f		64 36		stz $36				stz 	zTemp0 						; clear zTemp0 (if 1 index)
.9e31		64 37		stz $37				stz 	zTemp0+1
.9e33		b5 52		lda $52,x			lda 	NSStatus+2,x 				; if only one index provided, don't need to multiply
.9e35		30 0e		bmi $9e45			bmi 	_VHNoMultiply
.9e37		da		phx				phx
.9e38		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; get 2nd index on stack
.9e3a		48		pha				pha
.9e3b		a0 02		ldy #$02			ldy 	#2 							; get 1st size in A
.9e3d		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9e3f		1a		inc a				inc 	a 							; add 1 for zero base
.9e40		fa		plx				plx
.9e41		20 a8 a2	jsr $a2a8			jsr 	Multiply8x8 				; calculate -> Z0
.9e44		fa		plx				plx
.9e45						_VHNoMultiply:
.9e45		18		clc				clc
.9e46		a5 36		lda $36				lda 	zTemp0
.9e48		75 59		adc $59,x			adc 	NSMantissa0+1,x
.9e4a		85 36		sta $36				sta 	zTemp0
.9e4c		a5 37		lda $37				lda 	zTemp0+1
.9e4e		69 00		adc #$00			adc 	#0
.9e50		85 37		sta $37				sta 	zTemp0+1
.9e52		b5 50		lda $50,x			lda 	NSStatus,x
.9e54		20 3a 89	jsr $893a			jsr 	ScaleByBaseType
.9e57		18		clc				clc
.9e58		b2 3e		lda ($3e)			lda 	(zaTemp)
.9e5a		65 36		adc $36				adc 	zTemp0
.9e5c		95 58		sta $58,x			sta 	NSMantissa0,x
.9e5e		a0 01		ldy #$01			ldy 	#1
.9e60		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9e62		65 37		adc $37				adc 	zTemp0+1
.9e64		95 60		sta $60,x			sta 	NSMantissa1,x
.9e66		7a		ply				ply 								; restore position
.9e67		60		rts				rts
.9e68						_VHBadIndex:
.9e68		a9 17		lda #$17		lda	#23
.9e6a		4c 9d 93	jmp $939d		jmp	ErrorHandler
.9e6d						_VHBadArray:
.9e6d		a9 18		lda #$18		lda	#24
.9e6f		4c 9d 93	jmp $939d		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/abs.asm

.9e72						AbsUnary:
.9e72		fa		plx				plx 								; restore stack pos
.9e73		20 4b a2	jsr $a24b			jsr 	EvaluateNumber 				; get a float or int
.9e76		20 84 93	jsr $9384			jsr 	CheckRightBracket
.9e79		b5 50		lda $50,x			lda 	NSStatus,x 					; clear the sign bit
.9e7b		29 7f		and #$7f			and 	#$7F
.9e7d		95 50		sta $50,x			sta 	NSStatus,x
.9e7f		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/alloc.asm

.9e80						AllocUnary:
.9e80		fa		plx				plx 								; restore stack pos
.9e81		20 7d a2	jsr $a27d			jsr 	Evaluate16BitInteger		; get bytes required.
.9e84		20 84 93	jsr $9384			jsr 	CheckRightBracket
.9e87		da		phx				phx 								; save X/Y
.9e88		5a		phy				phy
.9e89		8a		txa				txa 								; copy X into Y
.9e8a		a8		tay				tay
.9e8b		b9 60 00	lda $0060,y			lda		NSMantissa1,y 				; get size into XA
.9e8e		aa		tax				tax
.9e8f		b9 58 00	lda $0058,y			lda 	NSMantissa0,y
.9e92		20 9f 9e	jsr $9e9f			jsr 	AllocateXABytes 			; allocate memory
.9e95		99 58 00	sta $0058,y			sta 	NSMantissa0,y 				; write address out.
.9e98		8a		txa				txa 	 							; typing is 16 bit integer.
.9e99		99 60 00	sta $0060,y			sta 	NSMantissa1,y
.9e9c		7a		ply				ply
.9e9d		fa		plx				plx
.9e9e		60		rts				rts
.9e9f						AllocateXABytes:
.9e9f		5a		phy				phy
.9ea0		ac 08 04	ldy $0408			ldy 	lowMemPtr 					; push current address on stack and to zTemp0
.9ea3		84 36		sty $36				sty 	zTemp0
.9ea5		5a		phy				phy
.9ea6		ac 09 04	ldy $0409			ldy 	lowMemPtr+1
.9ea9		84 37		sty $37				sty 	zTemp0+1
.9eab		5a		phy				phy
.9eac		18		clc				clc 								; add to low memory pointer
.9ead		6d 08 04	adc $0408			adc 	lowMemPtr
.9eb0		8d 08 04	sta $0408			sta 	lowMemPtr
.9eb3		8a		txa				txa
.9eb4		6d 09 04	adc $0409			adc 	lowMemPtr+1
.9eb7		8d 09 04	sta $0409			sta 	lowMemPtr+1
.9eba		b0 2f		bcs $9eeb			bcs 	CISSMemory
.9ebc		20 dd 9e	jsr $9edd			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.9ebf						_ClearMemory:
.9ebf		ad 08 04	lda $0408			lda 	lowMemPtr 					; cleared all memory allocated
.9ec2		c5 36		cmp $36				cmp 	zTemp0
.9ec4		d0 07		bne $9ecd			bne 	_CMClearNext
.9ec6		ad 09 04	lda $0409			lda 	lowMemPtr+1
.9ec9		c5 37		cmp $37				cmp 	zTemp0+1
.9ecb		f0 0c		beq $9ed9			beq 	_CMExit
.9ecd						_CMClearNext:
.9ecd		a9 00		lda #$00			lda 	#0 							; clear byte, advance to next.
.9ecf		92 36		sta ($36)			sta 	(zTemp0)
.9ed1		e6 36		inc $36				inc 	zTemp0
.9ed3		d0 ea		bne $9ebf			bne 	_ClearMemory
.9ed5		e6 37		inc $37				inc		zTemp0+1
.9ed7		80 e6		bra $9ebf			bra 	_ClearMemory
.9ed9						_CMExit:
.9ed9		fa		plx				plx
.9eda		68		pla				pla
.9edb		7a		ply				ply
.9edc		60		rts				rts
.9edd						CheckIdentifierStringSpace:
.9edd		48		pha				pha
.9ede		ad 09 04	lda $0409			lda 	lowMemPtr+1 				; get low memory pointer
.9ee1		18		clc				clc
.9ee2		69 02		adc #$02			adc 	#2 							; need at least 2 256 byte pages
.9ee4		cd 0b 04	cmp $040b			cmp 	stringMemory+1 				; is it >= StringMemory
.9ee7		b0 02		bcs $9eeb			bcs 	CISSMemory
.9ee9		68		pla				pla
.9eea		60		rts				rts
.9eeb						CISSMemory:
.9eeb		a9 06		lda #$06		lda	#6
.9eed		4c 9d 93	jmp $939d		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/asc.asm

.9ef0						AscUnary:
.9ef0		fa		plx				plx 								; restore stack pos
.9ef1		20 55 a2	jsr $a255			jsr 	EvaluateString 				; get a string
.9ef4		b2 36		lda ($36)			lda 	(zTemp0)					; get/return first character
.9ef6		20 ff a2	jsr $a2ff			jsr 	NSMSetByte 					; ASC("") will return zero.
.9ef9		20 84 93	jsr $9384			jsr 	CheckRightBracket
.9efc		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/frac.asm

.9efd						FracUnary:
.9efd		fa		plx				plx 								; restore stack pos
.9efe		20 4b a2	jsr $a24b			jsr 	EvaluateNumber 				; get a float or int
.9f01		20 84 93	jsr $9384			jsr 	CheckRightBracket
.9f04		b5 50		lda $50,x			lda 	NSStatus,x
.9f06		29 08		and #$08			and 	#NSTFloat 					; check it is a float
.9f08		f0 04		beq $9f0e			beq 	_IUZero
.9f0a		20 b8 99	jsr $99b8			jsr 	FloatFractionalPart 		; if so, get the fractional part.
.9f0d		60		rts				rts
.9f0e						_IUZero:
.9f0e		20 fd a2	jsr $a2fd			jsr 	NSMSetZero
.9f11		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/int.asm

.9f12						IntUnary:
.9f12		fa		plx				plx 								; restore stack pos
.9f13		20 4b a2	jsr $a24b			jsr 	EvaluateNumber 				; get a float or int
.9f16		20 84 93	jsr $9384			jsr 	CheckRightBracket
.9f19		b5 50		lda $50,x			lda 	NSStatus,x
.9f1b		29 08		and #$08			and 	#NSTFloat 					; check it is a float
.9f1d		f0 03		beq $9f22			beq 	_IUExit
.9f1f		20 10 9a	jsr $9a10			jsr 	FloatIntegerPart 			; if it is get the integer part.
.9f22						_IUExit:
.9f22		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/len.asm

.9f23						LenUnary:
.9f23		fa		plx				plx 								; restore stack pos
.9f24		20 55 a2	jsr $a255			jsr 	EvaluateString 				; get a string
.9f27		5a		phy				phy
.9f28		a0 00		ldy #$00			ldy 	#0 							; find length
.9f2a						_LenFind:
.9f2a		b1 36		lda ($36),y			lda 	(zTemp0),y 					; look for trailing NULL.
.9f2c		f0 06		beq $9f34			beq 	_LenExit
.9f2e		c8		iny				iny
.9f2f		d0 f9		bne $9f2a			bne 	_LenFind
.9f31		4c 7a a4	jmp $a47a			jmp 	RangeError 					; string > 255 - no trailing NULL.
.9f34						_LenExit:
.9f34		98		tya				tya		 							; return length
.9f35		20 ff a2	jsr $a2ff			jsr 	NSMSetByte
.9f38		7a		ply				ply
.9f39		20 84 93	jsr $9384			jsr 	CheckRightBracket
.9f3c		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/minmax.asm

.9f3d						Unary_Min:
.9f3d		a9 01		lda #$01			lda 	#1
.9f3f		80 02		bra $9f43			bra 	UnaryMinMaxMain
.9f41						Unary_Max:
.9f41		a9 ff		lda #$ff			lda 	#$FF 						; value from comparator to cause a write
.9f43						UnaryMinMaxMain:
.9f43		fa		plx				plx 								; get index on number stack
.9f44		48		pha				pha 								; save comparator
.9f45		20 42 a2	jsr $a242			jsr 	EvaluateValue 				; get the first value.
.9f48						_UMMMLoop:
.9f48		b1 30		lda ($30),y			lda 	(codePtr),y
.9f4a		c9 29		cmp #$29			cmp 	#KWD_RPAREN 				; if right bracket then done.
.9f4c		f0 22		beq $9f70			beq 	_UMMMDone
.9f4e		20 8c 93	jsr $938c			jsr 	CheckComma 					; must be a comma
.9f51		e8		inx				inx
.9f52		20 42 a2	jsr $a242			jsr 	EvaluateValue
.9f55		ca		dex				dex
.9f56		20 e0 a2	jsr $a2e0			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] (Compare is destructive)
.9f59		e8		inx				inx
.9f5a		20 e0 a2	jsr $a2e0			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2], original
.9f5d		e8		inx				inx
.9f5e		20 5a 94	jsr $945a			jsr 	CompareBaseCode 			; part of > = < etc. code, returns 255,0 or 1
.9f61		ca		dex				dex
.9f62		ca		dex				dex
.9f63		85 36		sta $36				sta 	zTemp0 						; save required result
.9f65		68		pla				pla 								; get and save comparator
.9f66		48		pha				pha
.9f67		c5 36		cmp $36				cmp 	zTemp0 						; if the comparator
.9f69		d0 dd		bne $9f48			bne 	_UMMMLoop
.9f6b		20 73 9f	jsr $9f73			jsr 	ExpCopyAboveDown 			; copy next up slot down
.9f6e		80 d8		bra $9f48			bra 	_UMMMLoop
.9f70						_UMMMDone:
.9f70		68		pla				pla 								; throw the comparator
.9f71		c8		iny				iny 								; skip )
.9f72		60		rts				rts
.9f73						ExpCopyAboveDown:
.9f73		b5 51		lda $51,x			lda 	NSStatus+1,x
.9f75		95 50		sta $50,x			sta 	NSStatus,x
.9f77		b5 79		lda $79,x			lda 	NSExponent+1,x
.9f79		95 78		sta $78,x			sta 	NSExponent,x
.9f7b		b5 59		lda $59,x			lda 	NSMantissa0+1,x
.9f7d		95 58		sta $58,x			sta 	NSMantissa0,x
.9f7f		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9f81		95 60		sta $60,x			sta 	NSMantissa1,x
.9f83		b5 69		lda $69,x			lda 	NSMantissa2+1,x
.9f85		95 68		sta $68,x			sta 	NSMantissa2,x
.9f87		b5 71		lda $71,x			lda 	NSMantissa3+1,x
.9f89		95 70		sta $70,x			sta 	NSMantissa3,x
.9f8b		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/not.asm

.9f8c						Unary_Not:
.9f8c		fa		plx				plx
.9f8d		20 6a a2	jsr $a26a			jsr 	EvaluateInteger 			; get integer
.9f90		20 84 93	jsr $9384			jsr 	CheckRightBracket
.9f93		20 1f a3	jsr $a31f			jsr 	NSMIsZero 					; zero mantissa ?
.9f96		f0 04		beq $9f9c			beq 	_NotZero
.9f98		20 fd a2	jsr $a2fd			jsr 	NSMSetZero
.9f9b		60		rts				rts
.9f9c						_NotZero:
.9f9c		4c 10 94	jmp $9410			jmp 	ReturnTrue

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/peek.asm

.9f9f						PeekByteUnary:
.9f9f		a9 01		lda #$01			lda 	#1
.9fa1		80 0a		bra $9fad			bra 	PeekUnary
.9fa3						PeekWUnary:
.9fa3		a9 02		lda #$02			lda 	#2
.9fa5		80 06		bra $9fad			bra 	PeekUnary
.9fa7						PeekLUnary:
.9fa7		a9 03		lda #$03			lda 	#3
.9fa9		80 02		bra $9fad			bra 	PeekUnary
.9fab						PeekDUnary:
.9fab		a9 04		lda #$04			lda 	#4
.9fad						PeekUnary:
.9fad		fa		plx				plx 								; restore position.
.9fae		48		pha				pha 								; save count to copy on stack
.9faf		20 7d a2	jsr $a27d			jsr		Evaluate16BitInteger 		; address as constant.
.9fb2		20 84 93	jsr $9384			jsr 	CheckRightBracket
.9fb5		b5 58		lda $58,x			lda 	NSMantissa0,x 				; save mantissa in zTemp0 as address
.9fb7		85 36		sta $36				sta 	zTemp0
.9fb9		b5 60		lda $60,x			lda 	NSMantissa1,x
.9fbb		85 37		sta $37				sta 	zTemp0+1
.9fbd		20 fd a2	jsr $a2fd			jsr 	NSMSetZero 					; clear the result to zero.
.9fc0		68		pla				pla 								; count in zTemp2
.9fc1		85 3a		sta $3a				sta 	zTemp2
.9fc3		da		phx				phx 								; save stack position and offset of read
.9fc4		5a		phy				phy
.9fc5		a0 00		ldy #$00			ldy 	#0 							; byte read offset.
.9fc7						_PULoop:
.9fc7		b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next byte, write to mantissa0,x
.9fc9		95 58		sta $58,x			sta 	NSMantissa0,x 				; we change X not the index before it.
.9fcb		c8		iny				iny 								; next byte to write
.9fcc		8a		txa				txa 								; next byte to read - stack layout in 04data.inc
.9fcd		18		clc				clc
.9fce		69 08		adc #$08			adc 	#MathStackSize
.9fd0		aa		tax				tax
.9fd1		c6 3a		dec $3a				dec 	zTemp2 						; done them all
.9fd3		d0 f2		bne $9fc7			bne 	_PULoop
.9fd5		7a		ply				ply 								; restore stack/code pos and exit.
.9fd6		fa		plx				plx
.9fd7		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/sgn.asm

.9fd8						SgnUnary:
.9fd8		fa		plx				plx 								; restore stack pos
.9fd9		20 4b a2	jsr $a24b			jsr 	EvaluateNumber 				; get a float or int
.9fdc		20 84 93	jsr $9384			jsr 	CheckRightBracket
.9fdf		20 1f a3	jsr $a31f			jsr 	NSMIsZero 					; if zero
.9fe2		f0 0e		beq $9ff2			beq 	_SGZero  					; return Int Zero
.9fe4		b5 50		lda $50,x			lda 	NSStatus,x 					; get status w/sign
.9fe6		48		pha				pha
.9fe7		a9 01		lda #$01			lda 	#1 							; set to 1
.9fe9		20 ff a2	jsr $a2ff			jsr 	NSMSetByte
.9fec		68		pla				pla
.9fed		29 80		and #$80			and		#$80 						; copy the sign byte out
.9fef		95 50		sta $50,x			sta 	NSStatus,x  				; so it will be -1 or 1
.9ff1		60		rts				rts
.9ff2		20 fd a2	jsr $a2fd	_SGZero:jsr 	NSMSetZero
.9ff5		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/val.asm

.9ff6						ValUnary:
.9ff6		fa		plx				plx 								; restore stack pos
.9ff7		20 0c a0	jsr $a00c			jsr 	ValMainCode 				; do the main val() code
.9ffa		b0 01		bcs $9ffd			bcs 	_VUError 					; couldn't convert
.9ffc		60		rts				rts
.9ffd						_VUError:
.9ffd		4c 7f a4	jmp $a47f			jmp 	TypeError
.a000						IsValUnary:
.a000		fa		plx				plx 								; restore stack pos
.a001		20 0c a0	jsr $a00c			jsr 	ValMainCode 				; do the main val() code
.a004		b0 03		bcs $a009			bcs 	_VUBad
.a006		4c 10 94	jmp $9410			jmp 	ReturnTrue
.a009						_VUBad:
.a009		4c 1b 94	jmp $941b			jmp 	ReturnFalse
.a00c						ValMainCode:
.a00c		20 55 a2	jsr $a255			jsr 	EvaluateString 				; get a string
.a00f		20 84 93	jsr $9384			jsr 	CheckRightBracket 			; check right bracket present
.a012						ValEvaluateZTemp0:
.a012		5a		phy				phy
.a013		b2 36		lda ($36)			lda 	(zTemp0) 					; check not empty string
.a015		f0 17		beq $a02e			beq 	_VMCFail2
.a017		a0 ff		ldy #$ff			ldy 	#$FF 						; start position
.a019		48		pha				pha 								; save first character
.a01a		c9 2d		cmp #$2d			cmp 	#"-"		 				; is it - ?
.a01c		d0 01		bne $a01f			bne 	_VMCStart
.a01e		c8		iny				iny 								; skip over -
.a01f						_VMCStart:
.a01f		38		sec				sec 								; initialise first time round.
.a020						_VMCNext:
.a020		c8		iny				iny 								; pre-increment
.a021		b1 36		lda ($36),y			lda 	(zTemp0),y 					; next character = EOS ?
.a023		f0 0c		beq $a031			beq 	_VMCSuccess 				; successful.
.a025		20 ed 9b	jsr $9bed			jsr 	EncodeNumber 				; send it to the number-builder
.a028		90 03		bcc $a02d			bcc 	_VMCFail 					; if failed, give up.
.a02a		18		clc				clc 								; next time round, countinue
.a02b		80 f3		bra $a020			bra 	_VMCNext
.a02d						_VMCFail:
.a02d		68		pla				pla
.a02e						_VMCFail2:
.a02e		7a		ply				ply
.a02f		38		sec				sec
.a030		60		rts				rts
.a031						_VMCSuccess:
.a031		a9 00		lda #$00			lda 	#0 							; construct final
.a033		20 ed 9b	jsr $9bed			jsr 	EncodeNumber 				; by sending a duff value.
.a036		68		pla				pla 								; if it was -ve
.a037		c9 2d		cmp #$2d			cmp 	#"-"
.a039		d0 03		bne $a03e			bne 	_VMCNotNegative
.a03b		20 bf a2	jsr $a2bf			jsr		NSMNegate 					; negate it.
.a03e						_VMCNotNegative:
.a03e		7a		ply				ply
.a03f		18		clc				clc
.a040		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/chr.asm

.a041						ChrUnary:
.a041		fa		plx				plx 								; restore stack pos
.a042		20 98 a2	jsr $a298			jsr 	Evaluate8BitInteger			; get value (chr$(0) returns an empty string)
.a045		48		pha				pha
.a046		20 84 93	jsr $9384			jsr 	CheckRightBracket
.a049		a9 01		lda #$01			lda 	#1 							; allocate space for one char
.a04b		20 11 b4	jsr $b411			jsr 	StringTempAllocate
.a04e		68		pla				pla 								; write number to it
.a04f		20 4a b4	jsr $b44a			jsr 	StringTempWrite
.a052		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/items.asm

.a053						ItemCountUnary:
.a053		fa		plx				plx
.a054		20 55 a2	jsr $a255			jsr 	EvaluateString
.a057		e8		inx				inx
.a058		20 cb a0	jsr $a0cb			jsr 	ICGetSeperator
.a05b		ca		dex				dex
.a05c		20 ec a0	jsr $a0ec			jsr 	ICSetPointer 				; zTemp0 = (string)
.a05f		20 fd a2	jsr $a2fd			jsr 	NSMSetZero 					; zero the result.
.a062		5a		phy				phy
.a063		a0 ff		ldy #$ff			ldy 	#$FF 						; loop counting seperators in mantissa
.a065						_ICULoop:
.a065		c8		iny				iny
.a066		b1 36		lda ($36),y			lda 	(zTemp0),y
.a068		cd a7 07	cmp $07a7			cmp 	ICSeperator
.a06b		d0 02		bne $a06f			bne 	_ICUNoMatch
.a06d		f6 58		inc $58,x			inc 	NSMantissa0,x
.a06f						_ICUNoMatch:
.a06f		c9 00		cmp #$00			cmp 	#0
.a071		d0 f2		bne $a065			bne 	_ICULoop
.a073		f6 58		inc $58,x			inc 	NSMantissa0,x 				; +1
.a075		7a		ply				ply
.a076		60		rts				rts
.a077						ItemGetUnary:
.a077		fa		plx				plx
.a078		20 55 a2	jsr $a255			jsr 	EvaluateString 				; search string
.a07b		20 8c 93	jsr $938c			jsr 	CheckComma
.a07e		e8		inx				inx 								; get count
.a07f		20 98 a2	jsr $a298			jsr 	Evaluate8BitInteger
.a082		c9 00		cmp #$00			cmp 	#0 							; must be > 0, index starts at 1.
.a084		f0 61		beq $a0e7			beq 	ICGSRange
.a086		e8		inx				inx 								; get seperator.
.a087		20 cb a0	jsr $a0cb			jsr 	ICGetSeperator
.a08a		ca		dex				dex
.a08b		ca		dex				dex
.a08c		5a		phy				phy
.a08d		20 ec a0	jsr $a0ec			jsr 	ICSetPointer 				; zTemp0 points to string.
.a090		a0 00		ldy #$00			ldy 	#0
.a092		d6 59		dec $59,x			dec 	NSMantissa0+1,x 			; first element.
.a094		f0 0e		beq $a0a4			beq 	_IGUFoundStart
.a096						_IGUFindNext:
.a096		b1 36		lda ($36),y			lda 	(zTemp0),y		 			; next
.a098		f0 4d		beq $a0e7			beq 	ICGSRange 					; eol, not found.
.a09a		c8		iny				iny
.a09b		cd a7 07	cmp $07a7			cmp 	ICSeperator 				; until found a seperator (or EOS)
.a09e		d0 f6		bne $a096			bne 	_IGUFindNext
.a0a0		d6 59		dec $59,x			dec 	NSMantissa0+1,x
.a0a2		d0 f2		bne $a096			bne 	_IGUFindNext
.a0a4						_IGUFoundStart:
.a0a4		84 38		sty $38				sty 	zTemp1 						; save start
.a0a6		88		dey				dey
.a0a7						_IGUFindLength:
.a0a7		c8		iny				iny 								; forward till seperator/EOS
.a0a8		b1 36		lda ($36),y			lda 	(zTemp0),y
.a0aa		f0 05		beq $a0b1			beq 	_IGUFoundLength
.a0ac		cd a7 07	cmp $07a7			cmp 	ICSeperator
.a0af		d0 f6		bne $a0a7			bne 	_IGUFindLength
.a0b1						_IGUFoundLength:
.a0b1		84 39		sty $39				sty 	zTemp1+1 					; save end of copy string
.a0b3		98		tya				tya 								; calculate length of new string.
.a0b4		38		sec				sec
.a0b5		e5 38		sbc $38				sbc 	zTemp1
.a0b7		20 11 b4	jsr $b411			jsr 	StringTempAllocate 			; allocate bytes for it.
.a0ba		a4 38		ldy $38				ldy 	zTemp1
.a0bc						_IGUCopySub:
.a0bc		c4 39		cpy $39				cpy 	zTemp1+1
.a0be		f0 08		beq $a0c8			beq 	_IGUCopyOver
.a0c0		b1 36		lda ($36),y			lda 	(zTemp0),y
.a0c2		20 4a b4	jsr $b44a			jsr 	StringTempWrite
.a0c5		c8		iny				iny
.a0c6		80 f4		bra $a0bc			bra 	_IGUCopySub
.a0c8						_IGUCopyOver:
.a0c8		7a		ply				ply
.a0c9		60		rts				rts
>a0ca		db						.byte 	$DB 						; causes a break in the emulator
.a0cb						ICGetSeperator:
.a0cb		20 8c 93	jsr $938c			jsr 	CheckComma 					; preceding comma
.a0ce		20 55 a2	jsr $a255			jsr 	EvaluateString 				; seperator string
.a0d1		20 ec a0	jsr $a0ec			jsr 	ICSetPointer 				; access it
.a0d4		b2 36		lda ($36)			lda 	(zTemp0) 					; get sep char
.a0d6		8d a7 07	sta $07a7			sta 	ICSeperator
.a0d9		f0 0c		beq $a0e7			beq 	ICGSRange 					; check LEN(seperator) = 1
.a0db		5a		phy				phy
.a0dc		a0 01		ldy #$01			ldy 	#1
.a0de		b1 36		lda ($36),y			lda 	(zTemp0),y
.a0e0		d0 05		bne $a0e7			bne 	ICGSRange
.a0e2		7a		ply				ply
.a0e3		20 84 93	jsr $9384			jsr 	CheckRightBracket 			; check following )
.a0e6		60		rts				rts
.a0e7						ICGSRange:
.a0e7		a9 04		lda #$04		lda	#4
.a0e9		4c 9d 93	jmp $939d		jmp	ErrorHandler
.a0ec						ICSetPointer:
.a0ec		b5 58		lda $58,x			lda 	NSMantissa0,x 				; set zTemp0 to point to it.
.a0ee		85 36		sta $36				sta 	zTemp0
.a0f0		b5 60		lda $60,x			lda 	NSMantissa1,x
.a0f2		85 37		sta $37				sta 	zTemp0+1
.a0f4		60		rts				rts
.07a7						ICSeperator:
>07a7								.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/spc.asm

.a0f5						SpcUnary:
.a0f5		fa		plx				plx 								; restore stack pos
.a0f6		20 98 a2	jsr $a298			jsr 	Evaluate8BitInteger			; get value
.a0f9		5a		phy				phy
.a0fa		48		pha				pha 								; save count
.a0fb		20 11 b4	jsr $b411			jsr 	StringTempAllocate
.a0fe		7a		ply				ply 								; to do count in Y
.a0ff						_SpcLoop:
.a0ff		c0 00		cpy #$00			cpy 	#0 							; copy Y spaces in.
.a101		f0 08		beq $a10b			beq 	_SpcExit
.a103		a9 20		lda #$20			lda 	#32
.a105		20 4a b4	jsr $b44a			jsr 	StringTempWrite
.a108		88		dey				dey
.a109		80 f4		bra $a0ff			bra 	_SpcLoop
.a10b						_SpcExit:
.a10b		7a		ply				ply
.a10c		20 84 93	jsr $9384			jsr 	CheckRightBracket
.a10f		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/str.asm

.a110						Unary_Str:
.a110		fa		plx				plx
.a111		20 4b a2	jsr $a24b			jsr 	EvaluateNumber  			; get number
.a114		20 84 93	jsr $9384			jsr 	CheckRightBracket 			; closing bracket
.a117		a9 05		lda #$05			lda 	#5 							; maximum decimals, from Basic816
.a119		20 32 a1	jsr $a132			jsr 	ConvertNumberToString 		; do the conversion.
.a11c		a9 21		lda #$21			lda		#33 						; create buffer
.a11e		20 11 b4	jsr $b411			jsr 	StringTempAllocate 			; allocate memory
.a121		da		phx				phx  								; copy the converted string into the buffer.
.a122		a2 00		ldx #$00			ldx 	#0
.a124						_USCopy:
.a124		bd 45 06	lda $0645,x			lda 	decimalBuffer,x
.a127		20 4a b4	jsr $b44a			jsr 	StringTempWrite
.a12a		e8		inx				inx
.a12b		bd 45 06	lda $0645,x			lda 	decimalBuffer,x
.a12e		d0 f4		bne $a124			bne 	_USCopy
.a130		fa		plx				plx
.a131		60		rts				rts
.a132						ConvertNumberToString:
.a132		5a		phy				phy 								; save code position
.a133		8d 10 04	sta $0410			sta 	decimalPlaces	 			; save number of DPs.
.a136		9c 11 04	stz $0411			stz 	dbOffset 					; offset into decimal buffer = start.
.a139		b5 50		lda $50,x			lda 	NSStatus,x  				; is it -ve.
.a13b		10 09		bpl $a146			bpl 	_CNTSNotNegative
.a13d		29 7f		and #$7f			and 	#$7F 						; make +ve
.a13f		95 50		sta $50,x			sta 	NSStatus,x
.a141		a9 2d		lda #$2d			lda 	#"-"
.a143		20 a7 a1	jsr $a1a7			jsr 	WriteDecimalBuffer
.a146						_CNTSNotNegative:
.a146		b5 78		lda $78,x			lda 	NSExponent,x 				; check if decimal
.a148		f0 12		beq $a15c			beq 	_CNTSNotFloat
.a14a		e8		inx				inx 								; round up so we don't get too many 6.999999
.a14b		a9 01		lda #$01			lda 	#1
.a14d		20 ff a2	jsr $a2ff			jsr 	NSMSetByte
.a150		ca		dex				dex
.a151		b5 78		lda $78,x			lda		NSExponent,x
.a153		95 79		sta $79,x			sta 	NSExponent+1,x
.a155		a9 08		lda #$08			lda 	#NSTFloat
.a157		95 51		sta $51,x			sta 	NSStatus+1,x
.a159		20 f2 98	jsr $98f2			jsr 	FloatAdd
.a15c						_CNTSNotFloat:
.a15c		20 89 a1	jsr $a189			jsr 	MakePlusTwoString 			; do the integer part.
.a15f		20 b8 99	jsr $99b8			jsr 	FloatFractionalPart 		; get the fractional part
.a162		20 69 9a	jsr $9a69			jsr 	NSNormalise					; normalise , exit if zero
.a165		f0 20		beq $a187			beq 	_CNTSExit
.a167		a9 2e		lda #$2e			lda 	#"."
.a169		20 a7 a1	jsr $a1a7			jsr 	WriteDecimalBuffer 			; write decimal place
.a16c						_CNTSDecimal:
.a16c		ce 10 04	dec $0410			dec 	decimalPlaces 				; done all the decimals
.a16f		30 16		bmi $a187			bmi 	_CNTSExit
.a171		e8		inx				inx 								; x 10.0
.a172		a9 0a		lda #$0a			lda 	#10
.a174		20 ff a2	jsr $a2ff			jsr 	NSMSetByte
.a177		a9 08		lda #$08			lda 	#NSTFloat
.a179		95 50		sta $50,x			sta 	NSStatus,x
.a17b		ca		dex				dex
.a17c		20 37 9a	jsr $9a37			jsr 	FloatMultiply
.a17f		20 89 a1	jsr $a189			jsr 	MakePlusTwoString 			; put the integer e.g. next digit out.
.a182		20 b8 99	jsr $99b8			jsr 	FloatFractionalPart 		; get the fractional part
.a185		80 e5		bra $a16c			bra 	_CNTSDecimal 				; keep going.
.a187						_CNTSExit:
.a187		7a		ply				ply
.a188		60		rts				rts
.a189						MakePlusTwoString:
.a189		da		phx				phx
.a18a		20 e0 a2	jsr $a2e0			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.a18d		e8		inx				inx 								; access it
.a18e		e8		inx				inx
.a18f		20 10 9a	jsr $9a10			jsr 	FloatIntegerPart 			; make it an integer
.a192		a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.a194		20 22 98	jsr $9822			jsr 	ConvertInt32
.a197		a2 00		ldx #$00			ldx	 	#0 							; write that to the decimal buffer.
.a199						_MPTSCopy:
.a199		bd 23 06	lda $0623,x			lda 	numberBuffer,x
.a19c		20 a7 a1	jsr $a1a7			jsr 	WriteDecimalBuffer
.a19f		e8		inx				inx
.a1a0		bd 23 06	lda $0623,x			lda 	numberBuffer,x
.a1a3		d0 f4		bne $a199			bne 	_MPTSCopy
.a1a5		fa		plx				plx
.a1a6		60		rts				rts
.a1a7						WriteDecimalBuffer:
.a1a7		da		phx				phx
.a1a8		ae 11 04	ldx $0411			ldx 	dbOffset
.a1ab		9d 45 06	sta $0645,x			sta 	decimalBuffer,x
.a1ae		9e 46 06	stz $0646,x			stz 	decimalBuffer+1,x
.a1b1		ee 11 04	inc $0411			inc 	dbOffset
.a1b4		fa		plx				plx
.a1b5		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/substring.asm

.a1b6						Unary_Left:
.a1b6		fa		plx				plx
.a1b7		18		clc				clc 								; only one parameter
.a1b8		20 1b a2	jsr $a21b			jsr 	SubstringInitial 			; set up.
.a1bb		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; Param #1 is the length
.a1bd		95 5a		sta $5a,x			sta 	NSMantissa0+2,x
.a1bf		74 59		stz $59,x			stz 	NSMantissa0+1,x 			; Start is zero.
.a1c1		80 25		bra $a1e8			bra 	SubstringMain
.a1c3						Unary_Right:
.a1c3		fa		plx				plx
.a1c4		18		clc				clc 								; only one parameter
.a1c5		20 1b a2	jsr $a21b			jsr 	SubstringInitial 			; set up.
.a1c8		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; length => param 2
.a1ca		95 5a		sta $5a,x			sta 	NSMantissa0+2,x
.a1cc		b5 78		lda $78,x			lda 	NSExponent,x 				; total length
.a1ce		f5 59		sbc $59,x			sbc 	NSMantissa0+1,x 			; length - required.
.a1d0		b0 02		bcs $a1d4			bcs 	_URNotUnderflow
.a1d2		a9 00		lda #$00			lda 	#0 							; start from the beginning, as something like right$("AB",3)
.a1d4						_URNotUnderflow:
.a1d4		95 59		sta $59,x			sta 	NSMantissa0+1,x 			; this is the start position
.a1d6		80 10		bra $a1e8			bra 	SubstringMain
.a1d8						Unary_Mid:
.a1d8		fa		plx				plx
.a1d9		38		sec				sec 								; two parameters
.a1da		20 1b a2	jsr $a21b			jsr 	SubstringInitial 			; set up.
.a1dd		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; first parameter is zero ?
.a1df		f0 04		beq $a1e5			beq 	_UMError
.a1e1		d6 59		dec $59,x			dec 	NSMantissa0+1,x				; reduce initial offset by 1 as MID$(a$,1..) is actually the first character
.a1e3		80 03		bra $a1e8			bra 	SubstringMain
.a1e5						_UMError:
.a1e5		4c 84 a4	jmp $a484			jmp 	ArgumentError
.a1e8						SubstringMain:
.a1e8		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; is the initial offset >= the length
.a1ea		d5 78		cmp $78,x			cmp 	NSExponent,x
.a1ec		b0 27		bcs $a215			bcs 	_SSMNull 					; if so, return an empty string.
.a1ee		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; if copy count is zero
.a1f0		f0 23		beq $a215			beq 	_SSMNull 					; return empty string.
.a1f2		18		clc				clc 								; add the offset +1 to the address and
.a1f3		b5 58		lda $58,x			lda	 	NSMantissa0,x 				; put in zTemp, this is the start of the substring to copy.
.a1f5		75 59		adc $59,x			adc 	NSMantissa0+1,x
.a1f7		85 36		sta $36				sta 	zTemp0
.a1f9		b5 60		lda $60,x			lda	 	NSMantissa1,x
.a1fb		69 00		adc #$00			adc 	#0
.a1fd		85 37		sta $37				sta 	zTemp0+1
.a1ff						_SSMNoCarry:
.a1ff		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; characters required.
.a201		20 11 b4	jsr $b411			jsr 	StringTempAllocate 			; allocate that many characters
.a204		5a		phy				phy 								; save Y
.a205		a0 00		ldy #$00			ldy 	#0 							; start copying in.
.a207						_SSMCopy:
.a207		b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next character
.a209		f0 08		beq $a213			beq 	_SSMEString 				; no more to copy
.a20b		20 4a b4	jsr $b44a			jsr 	StringTempWrite 			; and write it out.
.a20e		c8		iny				iny
.a20f		d6 5a		dec $5a,x			dec 	NSMantissa0+2,x
.a211		d0 f4		bne $a207			bne 	_SSMCopy
.a213						_SSMEString:
.a213		7a		ply				ply
.a214						_SSMExit:
.a214		60		rts				rts
.a215						_SSMNull:
.a215		a9 00		lda #$00			lda 	#0
.a217		20 11 b4	jsr $b411			jsr 	StringTempAllocate
.a21a		60		rts				rts
.a21b						SubstringInitial:
.a21b		da		phx				phx 								; save initial stack position
.a21c		08		php				php 								; save carry on stack indicating 2 parameters
.a21d		20 55 a2	jsr $a255			jsr 	EvaluateString 				; get a string
.a220		5a		phy				phy 								; calculate length to exponent.
.a221		a0 ff		ldy #$ff			ldy 	#$FF
.a223						_SIFindLength:
.a223		c8		iny				iny
.a224		b1 36		lda ($36),y			lda 	(zTemp0),y
.a226		d0 fb		bne $a223			bne 	_SIFindLength
.a228		98		tya				tya
.a229		95 78		sta $78,x			sta 	NSExponent,x
.a22b		7a		ply				ply
.a22c		e8		inx				inx
.a22d		20 8c 93	jsr $938c			jsr 	CheckComma 					; comma next
.a230		20 98 a2	jsr $a298			jsr 	Evaluate8BitInteger 		; get next parameter
.a233		28		plp				plp 								; is it the last parameter ?
.a234		90 07		bcc $a23d			bcc 	_SSIExit 					; if so, exit.
.a236		e8		inx				inx
.a237		20 8c 93	jsr $938c			jsr 	CheckComma 					; comma next
.a23a		20 98 a2	jsr $a298			jsr 	Evaluate8BitInteger 		; get last parameter
.a23d						_SSIExit:
.a23d		fa		plx				plx
.a23e		20 84 93	jsr $9384			jsr 	CheckRightBracket 			; check closing bracket
.a241		60		rts				rts 								; exit

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/exprhelper.asm

.a242						EvaluateValue:
.a242		48		pha				pha
.a243		20 a7 98	jsr $98a7			jsr		EvaluateExpression 			; expression
.a246		20 6a 9b	jsr $9b6a			jsr 	Dereference					; derefernce it
.a249		68		pla				pla
.a24a		60		rts				rts
.a24b						EvaluateNumber:
.a24b		20 42 a2	jsr $a242			jsr 	EvaluateValue 				; get a value
.a24e		b5 50		lda $50,x			lda 	NSStatus,x 					; check if string.
.a250		29 10		and #$10			and 	#NSBIsString
.a252		d0 13		bne $a267			bne 	HelperTypeError
.a254		60		rts				rts
.a255						EvaluateString:
.a255		20 42 a2	jsr $a242			jsr 	EvaluateValue 				; get a value
.a258		b5 50		lda $50,x			lda 	NSStatus,x 					; check if string.
.a25a		29 10		and #$10			and 	#NSBIsString
.a25c		f0 09		beq $a267			beq 	HelperTypeError
.a25e						CopyAddressToTemp0:
.a25e		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy address -> zTemp0
.a260		85 36		sta $36				sta 	zTemp0 						; (so we can do something with it)
.a262		b5 60		lda $60,x			lda 	NSMantissa1,x
.a264		85 37		sta $37				sta 	zTemp0+1
.a266		60		rts				rts
.a267						HelperTypeError:
.a267		4c 7f a4	jmp $a47f			jmp 	TypeError
.a26a						EvaluateInteger:
.a26a		20 4b a2	jsr $a24b			jsr 	EvaluateNumber
.a26d		b5 78		lda $78,x			lda 	NSExponent,x 				; check exponent is zero
.a26f		d0 09		bne $a27a			bne 	HelperValueError 			; if not, it's a float.
.a271		60		rts				rts
.a272						EvaluateUnsignedInteger:
.a272		20 6a a2	jsr $a26a			jsr 	EvaluateInteger 			; check integer is +ve
.a275		b5 50		lda $50,x			lda 	NSStatus,x
.a277		30 01		bmi $a27a			bmi 	HelperValueError
.a279		60		rts				rts
.a27a						HelperValueError:
.a27a		4c 84 a4	jmp $a484			jmp 	ArgumentError
.a27d						Evaluate16BitInteger:
.a27d		20 72 a2	jsr $a272			jsr	 	EvaluateUnsignedInteger		; get integer
.a280		b5 70		lda $70,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.a282		15 68		ora $68,x			ora 	NSMantissa2,x
.a284		d0 f4		bne $a27a			bne 	HelperValueError
.a286		60		rts				rts
.a287						Evaluate16BitIntegerSigned:
.a287		20 6a a2	jsr $a26a			jsr	 	EvaluateInteger				; get integer
.a28a		b5 70		lda $70,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.a28c		15 68		ora $68,x			ora 	NSMantissa2,x
.a28e		d0 ea		bne $a27a			bne 	HelperValueError
.a290		b5 50		lda $50,x			lda 	NSStatus,x 					; signed ?
.a292		10 03		bpl $a297			bpl 	_EISNotSigned
.a294		20 c6 a2	jsr $a2c6			jsr 	NSMNegateMantissa 			; makes it an actual 2's complement value.
.a297						_EISNotSigned:
.a297		60		rts				rts
.a298						Evaluate8BitInteger:
.a298		20 72 a2	jsr $a272			jsr	 	EvaluateUnsignedInteger 	; get an integer
.a29b		d0 dd		bne $a27a			bne 	HelperValueError
.a29d		b5 70		lda $70,x			lda 	NSMantissa3,x	 			; bytes 1, 2 & 3 must be zero
.a29f		15 68		ora $68,x			ora 	NSMantissa2,x
.a2a1		15 60		ora $60,x			ora 	NSMantissa1,x
.a2a3		d0 d5		bne $a27a			bne 	HelperValueError
.a2a5		b5 58		lda $58,x			lda 	NSMantissa0,x
.a2a7		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/mult8x8.asm

.a2a8						Multiply8x8:
.a2a8		4a		lsr a		  		lsr 	a  							; prime the carry bit for the loop
.a2a9		85 36		sta $36			  	sta 	zTemp0
.a2ab		86 37		stx $37				stx 	zTemp0+1
.a2ad		a9 00		lda #$00			lda 	#0
.a2af		a2 08		ldx #$08			ldx 	#8
.a2b1						_M88Loop:
.a2b1		90 03		bcc $a2b6			bcc 	_M88NoAdd
.a2b3		18		clc				clc
.a2b4		65 37		adc $37				adc 	zTemp0+1
.a2b6						_M88NoAdd:
.a2b6		6a		ror a				ror 	a
.a2b7		66 36		ror $36				ror 	zTemp0  					; pull another bit out for the next iteration
.a2b9		ca		dex				dex         						; inc/dec don't modify carry; only shifts and adds do
.a2ba		d0 f5		bne $a2b1			bne 	_M88Loop
.a2bc		85 37		sta $37				sta 	zTemp0+1 					; store high 8 bits.
.a2be		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/utility.asm

.a2bf						NSMNegate:
.a2bf		b5 50		lda $50,x			lda 	NSStatus,x 					; everything is sign/magnitude usually so just
.a2c1		49 80		eor #$80			eor 	#NSBIsNegative  			; toggle the negative flag
.a2c3		95 50		sta $50,x			sta 	NSStatus,x
.a2c5		60		rts				rts
.a2c6						NSMNegateMantissa:
.a2c6		38		sec				sec 								; when we want an actual 32 bit 2's complement value.
.a2c7		a9 00		lda #$00			lda 	#0
.a2c9		f5 58		sbc $58,x			sbc 	NSMantissa0,x
.a2cb		95 58		sta $58,x			sta 	NSMantissa0,x
.a2cd		a9 00		lda #$00			lda 	#0
.a2cf		f5 60		sbc $60,x			sbc 	NSMantissa1,x
.a2d1		95 60		sta $60,x			sta 	NSMantissa1,x
.a2d3		a9 00		lda #$00			lda 	#0
.a2d5		f5 68		sbc $68,x			sbc 	NSMantissa2,x
.a2d7		95 68		sta $68,x			sta 	NSMantissa2,x
.a2d9		a9 00		lda #$00			lda 	#0
.a2db		f5 70		sbc $70,x			sbc 	NSMantissa3,x
.a2dd		95 70		sta $70,x			sta 	NSMantissa3,x
.a2df		60		rts				rts
.a2e0						NSMShiftUpTwo:
.a2e0		b5 58		lda $58,x			lda 	NSMantissa0,x
.a2e2		95 5a		sta $5a,x			sta 	NSMantissa0+2,x
.a2e4		b5 60		lda $60,x			lda 	NSMantissa1,x
.a2e6		95 62		sta $62,x			sta 	NSMantissa1+2,x
.a2e8		b5 68		lda $68,x			lda 	NSMantissa2,x
.a2ea		95 6a		sta $6a,x			sta 	NSMantissa2+2,x
.a2ec		b5 70		lda $70,x			lda 	NSMantissa3,x
.a2ee		95 72		sta $72,x			sta 	NSMantissa3+2,x
.a2f0		b5 78		lda $78,x			lda 	NSExponent,x
.a2f2		95 7a		sta $7a,x			sta 	NSExponent+2,x
.a2f4		b5 50		lda $50,x			lda 	NSStatus,x
.a2f6		95 52		sta $52,x			sta 	NSStatus+2,x
.a2f8		60		rts				rts
.a2f9						NSMSetZeroMantissaOnly:
.a2f9		a9 00		lda #$00			lda 	#0
.a2fb		80 06		bra $a303			bra 	NSMSetMantissa
.a2fd						NSMSetZero:
.a2fd		a9 00		lda #$00			lda 	#0
.a2ff						NSMSetByte:
.a2ff		74 78		stz $78,x			stz 	NSExponent,x 				; zero exponent, as integer.
.a301		74 50		stz $50,x			stz 	NSStatus,x 					; status zero (integer)
.a303						NSMSetMantissa:
.a303		95 58		sta $58,x			sta 	NSMantissa0,x 				; mantissa
.a305		74 60		stz $60,x			stz 	NSMantissa1,x
.a307		74 68		stz $68,x			stz 	NSMantissa2,x
.a309		74 70		stz $70,x			stz 	NSMantissa3,x
.a30b		60		rts				rts
.a30c						NSMShiftLeft:
.a30c		18		clc				clc
.a30d						NSMRotateLeft:
.a30d		36 58		rol $58,x			rol 	NSMantissa0,x
.a30f		36 60		rol $60,x			rol		NSMantissa1,x
.a311		36 68		rol $68,x			rol		NSMantissa2,x
.a313		36 70		rol $70,x			rol		NSMantissa3,x
.a315		60		rts				rts
.a316						NSMShiftRight:
.a316		56 70		lsr $70,x			lsr 	NSMantissa3,x
.a318		76 68		ror $68,x			ror		NSMantissa2,x
.a31a		76 60		ror $60,x			ror		NSMantissa1,x
.a31c		76 58		ror $58,x			ror		NSMantissa0,x
.a31e		60		rts				rts
.a31f						NSMIsZero:
.a31f		b5 70		lda $70,x			lda 	NSMantissa3,x
.a321		15 68		ora $68,x			ora		NSMantissa2,x
.a323		15 60		ora $60,x			ora		NSMantissa1,x
.a325		15 58		ora $58,x			ora		NSMantissa0,x
.a327		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/asmcore.asm

.a328						Assemble_ora:
.a328		20 aa 84	jsr $84aa		jsr	AssembleGroup1
>a32b		01					.byte $01
.a32c						Assemble_and:
.a32c		20 aa 84	jsr $84aa		jsr	AssembleGroup1
>a32f		21					.byte $21
.a330						Assemble_eor:
.a330		20 aa 84	jsr $84aa		jsr	AssembleGroup1
>a333		41					.byte $41
.a334						Assemble_adc:
.a334		20 aa 84	jsr $84aa		jsr	AssembleGroup1
>a337		61					.byte $61
.a338						Assemble_sta:
.a338		20 aa 84	jsr $84aa		jsr	AssembleGroup1
>a33b		81					.byte $81
.a33c						Assemble_lda:
.a33c		20 aa 84	jsr $84aa		jsr	AssembleGroup1
>a33f		a1					.byte $a1
.a340						Assemble_cmp:
.a340		20 aa 84	jsr $84aa		jsr	AssembleGroup1
>a343		c1					.byte $c1
.a344						Assemble_sbc:
.a344		20 aa 84	jsr $84aa		jsr	AssembleGroup1
>a347		e1					.byte $e1
.a348						Assemble_asl:
.a348		20 b1 84	jsr $84b1		jsr	AssembleGroup2
>a34b		02					.byte $02
>a34c		75					.byte $75
.a34d						Assemble_rol:
.a34d		20 b1 84	jsr $84b1		jsr	AssembleGroup2
>a350		22					.byte $22
>a351		75					.byte $75
.a352						Assemble_lsr:
.a352		20 b1 84	jsr $84b1		jsr	AssembleGroup2
>a355		42					.byte $42
>a356		75					.byte $75
.a357						Assemble_ror:
.a357		20 b1 84	jsr $84b1		jsr	AssembleGroup2
>a35a		62					.byte $62
>a35b		75					.byte $75
.a35c						Assemble_stx:
.a35c		20 b1 84	jsr $84b1		jsr	AssembleGroup2
>a35f		82					.byte $82
>a360		50					.byte $50
.a361						Assemble_ldx:
.a361		20 b1 84	jsr $84b1		jsr	AssembleGroup2
>a364		a2					.byte $a2
>a365		d0					.byte $d0
.a366						Assemble_dec:
.a366		20 b1 84	jsr $84b1		jsr	AssembleGroup2
>a369		c2					.byte $c2
>a36a		55					.byte $55
.a36b						Assemble_inc:
.a36b		20 b1 84	jsr $84b1		jsr	AssembleGroup2
>a36e		e2					.byte $e2
>a36f		55					.byte $55
.a370						Assemble_stz:
.a370		20 b1 84	jsr $84b1		jsr	AssembleGroup2
>a373		60					.byte $60
>a374		44					.byte $44
.a375						Assemble_bit:
.a375		20 b1 84	jsr $84b1		jsr	AssembleGroup2
>a378		20					.byte $20
>a379		55					.byte $55
.a37a						Assemble_sty:
.a37a		20 b1 84	jsr $84b1		jsr	AssembleGroup2
>a37d		80					.byte $80
>a37e		54					.byte $54
.a37f						Assemble_ldy:
.a37f		20 b1 84	jsr $84b1		jsr	AssembleGroup2
>a382		a0					.byte $a0
>a383		d5					.byte $d5
.a384						Assemble_cpy:
.a384		20 b1 84	jsr $84b1		jsr	AssembleGroup2
>a387		c0					.byte $c0
>a388		d4					.byte $d4
.a389						Assemble_cpx:
.a389		20 b1 84	jsr $84b1		jsr	AssembleGroup2
>a38c		e0					.byte $e0
>a38d		d0					.byte $d0
.a38e						Assemble_tsb:
.a38e		20 b1 84	jsr $84b1		jsr	AssembleGroup2
>a391		00					.byte $00
>a392		50					.byte $50
.a393						Assemble_trb:
.a393		20 b1 84	jsr $84b1		jsr	AssembleGroup2
>a396		10					.byte $10
>a397		50					.byte $50
.a398						Assemble_jsr:
.a398		20 b1 84	jsr $84b1		jsr	AssembleGroup2
>a39b		14					.byte $14
>a39c		10					.byte $10
.a39d						Assemble_jmp:
.a39d		20 b1 84	jsr $84b1		jsr	AssembleGroup2
>a3a0		40					.byte $40
>a3a1		10					.byte $10
.a3a2						Assemble_bpl:
.a3a2		20 02 85	jsr $8502		jsr	AssembleGroup3
>a3a5		10					.byte $10
.a3a6						Assemble_bmi:
.a3a6		20 02 85	jsr $8502		jsr	AssembleGroup3
>a3a9		30					.byte $30
.a3aa						Assemble_bvc:
.a3aa		20 02 85	jsr $8502		jsr	AssembleGroup3
>a3ad		50					.byte $50
.a3ae						Assemble_bvs:
.a3ae		20 02 85	jsr $8502		jsr	AssembleGroup3
>a3b1		70					.byte $70
.a3b2						Assemble_bcc:
.a3b2		20 02 85	jsr $8502		jsr	AssembleGroup3
>a3b5		90					.byte $90
.a3b6						Assemble_bcs:
.a3b6		20 02 85	jsr $8502		jsr	AssembleGroup3
>a3b9		b0					.byte $b0
.a3ba						Assemble_bne:
.a3ba		20 02 85	jsr $8502		jsr	AssembleGroup3
>a3bd		d0					.byte $d0
.a3be						Assemble_beq:
.a3be		20 02 85	jsr $8502		jsr	AssembleGroup3
>a3c1		f0					.byte $f0
.a3c2						Assemble_bra:
.a3c2		20 02 85	jsr $8502		jsr	AssembleGroup3
>a3c5		80					.byte $80
.a3c6						Assemble_brk:
.a3c6		20 36 85	jsr $8536		jsr	AssembleGroup4
>a3c9		00					.byte $00
.a3ca						Assemble_php:
.a3ca		20 36 85	jsr $8536		jsr	AssembleGroup4
>a3cd		08					.byte $08
.a3ce						Assemble_clc:
.a3ce		20 36 85	jsr $8536		jsr	AssembleGroup4
>a3d1		18					.byte $18
.a3d2						Assemble_plp:
.a3d2		20 36 85	jsr $8536		jsr	AssembleGroup4
>a3d5		28					.byte $28
.a3d6						Assemble_sec:
.a3d6		20 36 85	jsr $8536		jsr	AssembleGroup4
>a3d9		38					.byte $38
.a3da						Assemble_rti:
.a3da		20 36 85	jsr $8536		jsr	AssembleGroup4
>a3dd		40					.byte $40
.a3de						Assemble_pha:
.a3de		20 36 85	jsr $8536		jsr	AssembleGroup4
>a3e1		48					.byte $48
.a3e2						Assemble_cli:
.a3e2		20 36 85	jsr $8536		jsr	AssembleGroup4
>a3e5		58					.byte $58
.a3e6						Assemble_phy:
.a3e6		20 36 85	jsr $8536		jsr	AssembleGroup4
>a3e9		5a					.byte $5a
.a3ea						Assemble_rts:
.a3ea		20 36 85	jsr $8536		jsr	AssembleGroup4
>a3ed		60					.byte $60
.a3ee						Assemble_pla:
.a3ee		20 36 85	jsr $8536		jsr	AssembleGroup4
>a3f1		68					.byte $68
.a3f2						Assemble_sei:
.a3f2		20 36 85	jsr $8536		jsr	AssembleGroup4
>a3f5		78					.byte $78
.a3f6						Assemble_ply:
.a3f6		20 36 85	jsr $8536		jsr	AssembleGroup4
>a3f9		7a					.byte $7a
.a3fa						Assemble_dey:
.a3fa		20 36 85	jsr $8536		jsr	AssembleGroup4
>a3fd		88					.byte $88
.a3fe						Assemble_txa:
.a3fe		20 36 85	jsr $8536		jsr	AssembleGroup4
>a401		8a					.byte $8a
.a402						Assemble_tya:
.a402		20 36 85	jsr $8536		jsr	AssembleGroup4
>a405		98					.byte $98
.a406						Assemble_txs:
.a406		20 36 85	jsr $8536		jsr	AssembleGroup4
>a409		9a					.byte $9a
.a40a						Assemble_tay:
.a40a		20 36 85	jsr $8536		jsr	AssembleGroup4
>a40d		a8					.byte $a8
.a40e						Assemble_tax:
.a40e		20 36 85	jsr $8536		jsr	AssembleGroup4
>a411		aa					.byte $aa
.a412						Assemble_clv:
.a412		20 36 85	jsr $8536		jsr	AssembleGroup4
>a415		b8					.byte $b8
.a416						Assemble_tsx:
.a416		20 36 85	jsr $8536		jsr	AssembleGroup4
>a419		ba					.byte $ba
.a41a						Assemble_iny:
.a41a		20 36 85	jsr $8536		jsr	AssembleGroup4
>a41d		c8					.byte $c8
.a41e						Assemble_dex:
.a41e		20 36 85	jsr $8536		jsr	AssembleGroup4
>a421		ca					.byte $ca
.a422						Assemble_cld:
.a422		20 36 85	jsr $8536		jsr	AssembleGroup4
>a425		d8					.byte $d8
.a426						Assemble_phx:
.a426		20 36 85	jsr $8536		jsr	AssembleGroup4
>a429		da					.byte $da
.a42a						Assemble_stp:
.a42a		20 36 85	jsr $8536		jsr	AssembleGroup4
>a42d		db					.byte $db
.a42e						Assemble_inx:
.a42e		20 36 85	jsr $8536		jsr	AssembleGroup4
>a431		e8					.byte $e8
.a432						Assemble_nop:
.a432		20 36 85	jsr $8536		jsr	AssembleGroup4
>a435		ea					.byte $ea
.a436						Assemble_sed:
.a436		20 36 85	jsr $8536		jsr	AssembleGroup4
>a439		f8					.byte $f8
.a43a						Assemble_plx:
.a43a		20 36 85	jsr $8536		jsr	AssembleGroup4
>a43d		fa					.byte $fa

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/constants.asm

.a43e						DecimalScalarTable:
>a43e		66 66 66 66				.dword $66666666 ; 0.1
>a442		de					.byte $de
>a443		1f 85 eb 51				.dword $51eb851f ; 0.01
>a447		db					.byte $db
>a448		4c 37 89 41				.dword $4189374c ; 0.001
>a44c		d8					.byte $d8
>a44d		ac 8b db 68				.dword $68db8bac ; 0.0001
>a451		d4					.byte $d4
>a452		24 d6 e2 53				.dword $53e2d624 ; 1e-05
>a456		d1					.byte $d1
>a457		83 de 1b 43				.dword $431bde83 ; 1e-06
>a45b		ce					.byte $ce
>a45c		6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>a460		ca					.byte $ca
>a461		89 3b e6 55				.dword $55e63b89 ; 1e-08
>a465		c7					.byte $c7
>a466		a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>a46a		c4					.byte $c4
>a46b		67 7f f3 6d				.dword $6df37f67 ; 1e-10
>a46f		c0					.byte $c0
>a470		86 ff f5 57				.dword $57f5ff86 ; 1e-11
>a474		bd					.byte $bd

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.asm

.a475						SyntaxError:
.a475		a9 02		lda #$02		lda	#2
.a477		4c 9d 93	jmp $939d		jmp	ErrorHandler
.a47a						RangeError:
.a47a		a9 04		lda #$04		lda	#4
.a47c		4c 9d 93	jmp $939d		jmp	ErrorHandler
.a47f						TypeError:
.a47f		a9 05		lda #$05		lda	#5
.a481		4c 9d 93	jmp $939d		jmp	ErrorHandler
.a484						ArgumentError:
.a484		a9 07		lda #$07		lda	#7
.a486		4c 9d 93	jmp $939d		jmp	ErrorHandler
.a489						NotDoneError:
.a489		a9 0c		lda #$0c		lda	#12
.a48b		4c 9d 93	jmp $939d		jmp	ErrorHandler
.a48e						ErrorText:
>a48e		42 72 65 61 6b 00			.text	"Break",0
>a494		53 79 6e 74 61 78 20 65			.text	"Syntax error",0
>a49c		72 72 6f 72 00
>a4a1		44 69 76 69 73 69 6f 6e			.text	"Division by zero",0
>a4a9		20 62 79 20 7a 65 72 6f 00
>a4b2		4f 75 74 20 6f 66 20 52			.text	"Out of Range",0
>a4ba		61 6e 67 65 00
>a4bf		54 79 70 65 20 6d 69 73			.text	"Type mismatch",0
>a4c7		6d 61 74 63 68 00
>a4cd		4f 75 74 20 6f 66 20 6d			.text	"Out of memory",0
>a4d5		65 6d 6f 72 79 00
>a4db		49 6c 6c 65 67 61 6c 20			.text	"Illegal argument",0
>a4e3		61 72 67 75 6d 65 6e 74 00
>a4ec		53 74 6f 70 00				.text	"Stop",0
>a4f1		53 74 72 69 6e 67 20 74			.text	"String too long",0
>a4f9		6f 6f 20 6c 6f 6e 67 00
>a501		41 73 73 65 72 74 69 6f			.text	"Assertion failed",0
>a509		6e 20 66 61 69 6c 65 64 00
>a512		4f 75 74 20 6f 66 20 64			.text	"Out of data",0
>a51a		61 74 61 00
>a51e		55 6e 69 6d 70 6c 65 6d			.text	"Unimplemented",0
>a526		65 6e 74 65 64 00
>a52c		4e 6f 20 73 75 63 68 20			.text	"No such line number",0
>a534		6c 69 6e 65 20 6e 75 6d 62 65 72 00
>a540		52 65 74 75 72 6e 20 77			.text	"Return without Gosub",0
>a548		69 74 68 6f 75 74 20 47 6f 73 75 62 00
>a555		55 6e 74 69 6c 20 77 69			.text	"Until without Repeat",0
>a55d		74 68 6f 75 74 20 52 65 70 65 61 74 00
>a56a		57 65 6e 64 20 77 69 74			.text	"Wend without While",0
>a572		68 6f 75 74 20 57 68 69 6c 65 00
>a57d		4e 65 78 74 20 77 69 74			.text	"Next without For",0
>a585		68 6f 75 74 20 46 6f 72 00
>a58e		42 41 53 49 43 20 53 74			.text	"BASIC Stack full",0
>a596		61 63 6b 20 66 75 6c 6c 00
>a59f		4f 70 65 6e 20 53 74 72			.text	"Open Structure",0
>a5a7		75 63 74 75 72 65 00
>a5ae		45 6e 64 50 72 6f 63 20			.text	"EndProc without call",0
>a5b6		77 69 74 68 6f 75 74 20 63 61 6c 6c 00
>a5c3		41 72 72 61 79 20 61 6c			.text	"Array already defined",0
>a5cb		72 65 61 64 79 20 64 65 66 69 6e 65 64 00
>a5d9		41 72 72 61 79 20 73 69			.text	"Array size",0
>a5e1		7a 65 00
>a5e4		42 61 64 20 61 72 72 61			.text	"Bad array index",0
>a5ec		79 20 69 6e 64 65 78 00
>a5f4		41 72 72 61 79 20 6e 6f			.text	"Array not declared",0
>a5fc		74 20 64 65 63 6c 61 72 65 64 00
>a607		46 69 6c 65 20 6e 6f 74			.text	"File not found",0
>a60f		20 66 6f 75 6e 64 00
>a616		53 74 6f 72 61 67 65 20			.text	"Storage error",0
>a61e		65 72 72 6f 72 00
>a624		56 65 72 69 66 79 20 66			.text	"Verify failed",0
>a62c		61 69 6c 65 64 00

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/timestamp.asm

>e76b		09 09 32 33 2f 30 32 2f			.text 9,9,"23/02/23 38"
>e773		32 33 20 33 38

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/memory/memory.flat/delete.asm

.a632						MemoryDeleteLine:
.a632		20 51 a6	jsr $a651			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.a635		b2 30		lda ($30)			lda 	(codePtr) 					; size to delete => y
.a637		a8		tay				tay
.a638						_MDDLLoop:
.a638		b1 30		lda ($30),y			lda 	(codePtr),y 				; copy down
.a63a		92 30		sta ($30)			sta 	(codePtr)
.a63c		a5 30		lda $30				lda 	codePtr 					; check done the lot.
.a63e		c5 3a		cmp $3a				cmp 	zTemp2 						; has codePtr (copyFrom) reached the last byte to copy.
.a640		d0 07		bne $a649			bne 	_MDLDLNext
.a642		a5 31		lda $31				lda 	codePtr+1
.a644		c5 3b		cmp $3b				cmp 	zTemp2+1
.a646		d0 01		bne $a649			bne 	_MDLDLNext
.a648						_MDDLExit:
.a648		60		rts				rts
.a649						_MDLDLNext:
.a649		e6 30		inc $30				inc 	codePtr						; next byte
.a64b		d0 eb		bne $a638			bne 	_MDDLLoop
.a64d		e6 31		inc $31				inc 	codePtr+1
.a64f		80 e7		bra $a638			bra 	_MDDLLoop
.a651						IMemoryFindEnd:
.a651		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a653		85 3a		sta $3a				sta 	0+zTemp2
.a655		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a657		85 3b		sta $3b				sta 	1+zTemp2
.a659						_MDLFELoop:
.a659		b2 3a		lda ($3a)			lda 	(zTemp2) 					; scan forward using offsets.
.a65b		f0 0b		beq $a668			beq 	_MDLFEExit
.a65d		18		clc				clc
.a65e		65 3a		adc $3a				adc 	zTemp2
.a660		85 3a		sta $3a				sta 	zTemp2
.a662		90 f5		bcc $a659			bcc 	_MDLFELoop
.a664		e6 3b		inc $3b				inc 	zTemp2+1
.a666		80 f1		bra $a659			bra 	_MDLFELoop
.a668						_MDLFEExit:
.a668		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/memory/memory.flat/insert.asm

.a669						MemoryInsertLine:
.a669		08		php				php
.a66a		20 51 a6	jsr $a651			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.a66d		a5 3b		lda $3b				lda 	zTemp2+1 					; is there space for the new line ?
.a66f		1a		inc a				inc 	a
.a670		c9 7f		cmp #$7f			cmp 	#(BasicEnd >> 8)-1
.a672		b0 36		bcs $a6aa			bcs 	_MDLIError 					; no, fail.
.a674		28		plp				plp 								; do at a specific point or the end ?
.a675		90 08		bcc $a67f			bcc 	_MDLIFound 					; if specific point already set.
.a677		a5 3a		lda $3a				lda 	zTemp2 						; if CS on entry append, so put on the
.a679		85 30		sta $30				sta 	codePtr 					; end.
.a67b		a5 3b		lda $3b				lda 	zTemp2+1
.a67d		85 31		sta $31				sta 	codePtr+1
.a67f						_MDLIFound:
.a67f		ad 26 04	lda $0426			lda 	tokenOffset 				; insert gap in Y, the offset, e.g. length of the new line
.a682		a8		tay				tay
.a683						_MDLIInsert:
.a683		b2 3a		lda ($3a)			lda 	(zTemp2) 					; shift one byte up , at least one covers end case (copying link 0)
.a685		91 3a		sta ($3a),y			sta 	(zTemp2),y 					; work from top down.
.a687		a5 30		lda $30				lda 	codePtr 					; reached insert point ?
.a689		c5 3a		cmp $3a				cmp 	zTemp2
.a68b		d0 06		bne $a693			bne 	_MDLINext
.a68d		a5 31		lda $31				lda 	codePtr+1
.a68f		c5 3b		cmp $3b				cmp 	zTemp2+1
.a691		f0 0a		beq $a69d			beq 	_MDLIHaveSpace
.a693						_MDLINext:
.a693		a5 3a		lda $3a				lda 	zTemp2 						; if no, keep zTemp2 going backwards opening up space.
.a695		d0 02		bne $a699			bne 	_MDLINoBorrow
.a697		c6 3b		dec $3b				dec 	zTemp2+1
.a699						_MDLINoBorrow:
.a699		c6 3a		dec $3a				dec 	zTemp2
.a69b		80 e6		bra $a683			bra 	_MDLIInsert
.a69d						_MDLIHaveSpace:
.a69d		ac 26 04	ldy $0426			ldy 	tokenOffset 				; bytes to copy
.a6a0		88		dey				dey 								; from offset-1 (last written) to the end of the buffer.
.a6a1						_MDLICopy:
.a6a1		b9 26 04	lda $0426,y			lda 	tokenOffset,y
.a6a4		91 30		sta ($30),y			sta 	(codePtr),y
.a6a6		88		dey				dey
.a6a7		10 f8		bpl $a6a1			bpl 	_MDLICopy
.a6a9		60		rts				rts
.a6aa						_MDLIError:
.a6aa		a9 06		lda #$06		lda	#6
.a6ac		4c 9d 93	jmp $939d		jmp	ErrorHandler
.a6af						MDLAppendLine:
.a6af		86 37		stx $37				stx 	zTemp0+1 					; save new line at zTemp0
.a6b1		85 36		sta $36				sta 	zTemp0
.a6b3		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a6b5		85 38		sta $38				sta 	0+zTemp1
.a6b7		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a6b9		85 39		sta $39				sta 	1+zTemp1
.a6bb		b2 38		lda ($38)			lda 	(zTemp1)
.a6bd		d0 0a		bne $a6c9			bne 	_MDLANoInitialise
.a6bf		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a6c1		8d a8 07	sta $07a8			sta 	0+AppendPointer
.a6c4		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a6c6		8d a9 07	sta $07a9			sta 	1+AppendPointer
.a6c9						_MDLANoInitialise:
.a6c9		18		clc				clc
.a6ca		ad a8 07	lda $07a8			lda 	AppendPointer 				; copy append pointer to zTemp1 adding the offset as you go
.a6cd		85 38		sta $38				sta 	zTemp1
.a6cf		72 36		adc ($36)			adc 	(zTemp0)
.a6d1		8d a8 07	sta $07a8			sta 	AppendPointer
.a6d4		ad a9 07	lda $07a9			lda 	AppendPointer+1
.a6d7		85 39		sta $39				sta 	zTemp1+1
.a6d9		69 00		adc #$00			adc 	#0
.a6db		8d a9 07	sta $07a9			sta 	AppendPointer+1
.a6de		a0 00		ldy #$00			ldy 	#0
.a6e0						_MDLACopy:
.a6e0		b1 36		lda ($36),y			lda 	(zTemp0),y 					; copy new line in
.a6e2		91 38		sta ($38),y			sta 	(zTemp1),y
.a6e4		c8		iny				iny
.a6e5		98		tya				tya
.a6e6		d2 36		cmp ($36)			cmp 	(zTemp0) 					; done whole line
.a6e8		d0 f6		bne $a6e0			bne 	_MDLACopy
.a6ea		a9 00		lda #$00			lda 	#0 							; end of program.
.a6ec		91 38		sta ($38),y			sta 	(zTemp1),y
.a6ee		60		rts				rts
.07a8						AppendPointer:
>07a8								.fill 	2

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/memory/memory.flat/memory.asm

.a6ef						MemoryNew:
.a6ef		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a6f1		85 30		sta $30				sta 	codePtr
.a6f3		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a6f5		85 31		sta $31				sta 	codePtr+1
.a6f7		a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.a6f9		92 30		sta ($30)			sta 	(codePtr)
.a6fb		60		rts				rts
.a6fc						MemoryInline:
.a6fc		98		tya				tya 								; put address into stack,x
.a6fd		18		clc				clc  								; get the offset, add codePtr
.a6fe		65 30		adc $30				adc 	codePtr
.a700		95 58		sta $58,x			sta 	NSMantissa0,x 				; store the result in the mantissa.
.a702		a5 31		lda $31				lda 	codePtr+1
.a704		69 00		adc #$00			adc 	#0
.a706		95 60		sta $60,x			sta 	NSMantissa1,x
.a708		74 68		stz $68,x			stz 	NSMantissa2,x
.a70a		74 70		stz $70,x			stz 	NSMantissa3,x
.a70c		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/memory/memory.flat/search.asm

.a70d						MemorySearch:
.a70d		85 36		sta $36				sta 	zTemp0 						; save line number in zTemp0
.a70f		86 37		stx $37				stx 	zTemp0+1
.a711		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a713		85 30		sta $30				sta 	codePtr
.a715		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a717		85 31		sta $31				sta 	codePtr+1
.a719						_MTAXLoop:
.a719		b2 30		lda ($30)			lda 	(codePtr)
.a71b		18		clc				clc
.a71c		f0 21		beq $a73f			beq 	_MTAXExit 					; reached end, exit with CC.
.a71e		a0 01		ldy #$01			ldy 	#1 							; calculate current line# - requested line#
.a720		b1 30		lda ($30),y			lda 	(codePtr),y
.a722		38		sec				sec
.a723		e5 36		sbc $36				sbc 	zTemp0
.a725		85 38		sta $38				sta 	zTemp1 						; save interim to set Z
.a727		c8		iny				iny 								; do the MSB
.a728		b1 30		lda ($30),y			lda 	(codePtr),y
.a72a		e5 37		sbc $37				sbc 	zTemp0+1
.a72c		05 38		ora $38				ora 	zTemp1 						; will set Z if result is zero, doesn't affect carry flag
.a72e		f0 0f		beq $a73f			beq 	_MTAXExit	 				; found so exit (CS will be set)
.a730		b0 0d		bcs $a73f			bcs 	_MTAXExit 					; current < required exit
.a732		18		clc				clc
.a733		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.a735		65 30		adc $30				adc 	codePtr
.a737		85 30		sta $30				sta 	codePtr
.a739		90 02		bcc $a73d			bcc 	_CREExit
.a73b		e6 31		inc $31				inc 	codePtr+1 					; carry
.a73d						_CREExit:
.a73d		80 da		bra $a719			bra 	_MTAXLoop
.a73f						_MTAXExit:
.a73f		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/graphics/gcommand.asm

.a740						RectangleCommand:
.a740		a9 44		lda #$44			lda 	#GCMD_FrameRect				; frame rectangle
.a742		80 02		bra $a746			bra 	ShapeDrawCmd
.a744						CircleCommand:
.a744		a9 48		lda #$48			lda 	#GCMD_FrameCircle 				; framed circle
.a746						ShapeDrawCmd:
.a746		20 d0 a7	jsr $a7d0			jsr 	RunGraphicsCommand
.a749						ShapeDraw:
.a749		0d ab 07	ora $07ab			ora 	gxFillSolid  				; adjust AXY for solid fill.
.a74c		4c c4 a7	jmp $a7c4			jmp 	ExecuteGraphicCommand	 	; and complete
.a74f						SpriteCommand:
.a74f		a2 00		ldx #$00			ldx 	#0
.a751		20 98 a2	jsr $a298			jsr 	Evaluate8BitInteger 		; get image number.
.a754		5a		phy				phy
.a755		a9 0e		lda #$0e			lda 	#GCMD_SpriteUse 			; use that image.
.a757		a6 58		ldx $58				ldx 	NSMantissa0
.a759		e0 40		cpx #$40			cpx 	#64 						; 0-63 only
.a75b		b0 0d		bcs $a76a			bcs 	_SCRange
.a75d		a0 ff		ldy #$ff			ldy 	#255
.a75f		20 61 80	jsr $8061			jsr 	GXGraphicDraw
.a762		a9 52		lda #$52			lda 	#GCMD_SpriteMove
.a764		7a		ply				ply
.a765		20 d0 a7	jsr $a7d0			jsr 	RunGraphicsCommand
.a768		80 5a		bra $a7c4			bra 	ExecuteGraphicCommand
.a76a						_SCRange:
.a76a		4c 7a a4	jmp $a47a			jmp 	RangeError
.a76d						ImageCommand:
.a76d		a2 00		ldx #$00			ldx 	#0
.a76f		20 98 a2	jsr $a298			jsr 	Evaluate8BitInteger 		; get image number.
.a772		20 d0 a7	jsr $a7d0			jsr 	RunGraphicsCommand
.a775						ImageRunDraw:
.a775		09 40		ora #$40			ora 	#GCMD_Move					; move cursor
.a777		20 61 80	jsr $8061			jsr 	GXGraphicDraw
.a77a		ad b1 07	lda $07b1			lda 	gxDrawScale
.a77d		0a		asl a				asl 	a
.a77e		0a		asl a				asl 	a
.a77f		0a		asl a				asl 	a
.a780		a8		tay				tay
.a781		a9 0c		lda #$0c			lda 	#GCMD_DrawSprite 			; image drawing
.a783		a6 58		ldx $58				ldx 	NSMantissa0
.a785		20 61 80	jsr $8061			jsr 	GXGraphicDraw
.a788		60		rts				rts
.a789						TextCommand:
.a789		a2 00		ldx #$00			ldx 	#0
.a78b		20 55 a2	jsr $a255			jsr 	EvaluateString 				; get text
.a78e		20 d0 a7	jsr $a7d0			jsr 	RunGraphicsCommand
.a791						TextRunDraw:
.a791		09 40		ora #$40			ora 	#GCMD_Move 					; move cursor
.a793		20 61 80	jsr $8061			jsr 	GXGraphicDraw
.a796		a0 00		ldy #$00			ldy 	#0
.a798						_IRDLoop:
.a798		a5 60		lda $60				lda 	NSMantissa1 				; access character
.a79a		85 37		sta $37				sta 	zTemp0+1
.a79c		a5 58		lda $58				lda 	NSMantissa0
.a79e		85 36		sta $36				sta 	zTemp0
.a7a0		b1 36		lda ($36),y			lda 	(zTemp0),y
.a7a2		f0 13		beq $a7b7			beq 	_IRDExit
.a7a4		5a		phy				phy									; save string pos
.a7a5		48		pha				pha 								; save char
.a7a6		ad b1 07	lda $07b1			lda 	gxDrawScale 				; get scale
.a7a9		0a		asl a				asl 	a
.a7aa		0a		asl a				asl 	a
.a7ab		0a		asl a				asl 	a
.a7ac		a8		tay				tay
.a7ad		a9 0a		lda #$0a			lda 	#GCMD_DrawFont 				; char drawing
.a7af		fa		plx				plx 								; char to draw
.a7b0		20 61 80	jsr $8061			jsr 	GXGraphicDraw
.a7b3		7a		ply				ply 								; restore string pos
.a7b4		c8		iny				iny
.a7b5		90 e1		bcc $a798			bcc 	_IRDLoop 					; go back if no error.
.a7b7						_IRDExit:
.a7b7		60		rts				rts
.a7b8						PlotCommand:
.a7b8		a9 50		lda #$50			lda 	#GCMD_Plot 					; command ID to use
.a7ba		20 d0 a7	jsr $a7d0			jsr 	RunGraphicsCommand
.a7bd		80 05		bra $a7c4			bra 	ExecuteGraphicCommand
.a7bf						LineCommand:
.a7bf		a9 42		lda #$42			lda 	#GCMD_Line 						; command ID to use
.a7c1		20 d0 a7	jsr $a7d0			jsr 	RunGraphicsCommand
.a7c4						ExecuteGraphicCommand:
.a7c4		0d aa 07	ora $07aa			ora 	gxCommandID 				; make a full command
.a7c7		20 61 80	jsr $8061			jsr 	GXGraphicDraw 				; draw it and exit
.a7ca		b0 01		bcs $a7cd			bcs 	_EGCError
.a7cc		60		rts				rts
.a7cd						_EGCError:
.a7cd		4c 75 a4	jmp $a475			jmp 	SyntaxError
.a7d0						RunGraphicsCommand:
.a7d0		8d aa 07	sta $07aa			sta 	gxCommandID					; save TODO graphics command.
.a7d3		68		pla				pla 								; pop handler address
.a7d4		fa		plx				plx
.a7d5		1a		inc a				inc 	a
.a7d6		d0 01		bne $a7d9			bne 	_RGINoCarry
.a7d8		e8		inx				inx
.a7d9						_RGINoCarry:
.a7d9		8d af 07	sta $07af			sta 	gxHandler
.a7dc		8e b0 07	stx $07b0			stx 	gxHandler+1
.a7df						_RGICommandLoop:
.a7df		b1 30		lda ($30),y			lda 	(codePtr),y
.a7e1		c8		iny				iny
.a7e2		c9 dc		cmp #$dc			cmp 	#KWD_TO						; is it TO x,y
.a7e4		f0 53		beq $a839			beq 	_RGI_To
.a7e6		c9 c6		cmp #$c6			cmp 	#KWD_HERE 					; do it here.
.a7e8		f0 55		beq $a83f			beq 	_RGI_Here
.a7ea		c9 80		cmp #$80			cmp 	#KWC_EOL 					; EOL or : , exit
.a7ec		f0 3d		beq $a82b			beq 	_RGI_Exit
.a7ee		c9 3a		cmp #$3a			cmp 	#KWD_COLON
.a7f0		f0 39		beq $a82b			beq 	_RGI_Exit
.a7f2		c9 ce		cmp #$ce			cmp 	#KWD_OUTLINE 				; solid or outline
.a7f4		f0 3e		beq $a834			beq 	_RGI_Frame
.a7f6		c9 d8		cmp #$d8			cmp 	#KWD_SOLID
.a7f8		f0 33		beq $a82d			beq 	_RGI_Solid
.a7fa		c9 ba		cmp #$ba			cmp 	#KWD_BY 					; by offset
.a7fc		f0 4b		beq $a849			beq 	_RGI_By
.a7fe		c9 c4		cmp #$c4			cmp 	#KWD_FROM 					; from
.a800		f0 17		beq $a819			beq 	_RGI_Move2
.a802		c9 c1		cmp #$c1			cmp 	#KWD_DIM 					; dim (set scale)
.a804		f0 62		beq $a868			beq 	_RGI_Dim
.a806		c9 bf		cmp #$bf			cmp 	#KWD_COLOUR 				; colour or Color
.a808		f0 74		beq $a87e			beq 	_RGI_Colour
.a80a		c9 be		cmp #$be			cmp 	#KWD_COLOR
.a80c		f0 70		beq $a87e			beq 	_RGI_Colour
.a80e		ae aa 07	ldx $07aa			ldx 	gxCommandID
.a811		e0 52		cpx #$52			cpx 	#GCMD_SpriteMove 			; if not sprite
.a813		d0 03		bne $a818			bne 	_RGI_Move 					; move
.a815		4c a6 a8	jmp $a8a6			jmp		_RGI_SpriteInstructions
.a818						_RGI_Move:
.a818		88		dey				dey 								; unpick get.
.a819						_RGI_Move2:
.a819		20 cc a8	jsr $a8cc			jsr 	GCGetCoordinatePair 		; move to here
.a81c		20 f3 a8	jsr $a8f3			jsr 	GCCopyPairToStore 			; save
.a81f		5a		phy				phy
.a820		20 e9 a8	jsr $a8e9			jsr 	GCLoadAXY 					; load in
.a823		09 40		ora #$40			ora 	#GCMD_Move 					; move there
.a825		20 61 80	jsr $8061			jsr 	GXGraphicDraw
.a828		7a		ply				ply
.a829		80 b4		bra $a7df			bra 	_RGICommandLoop 			; and go round
.a82b						_RGI_Exit:
.a82b		88		dey				dey 								; unpick : / EOL
.a82c		60		rts				rts
.a82d						_RGI_Solid:
.a82d		a9 02		lda #$02			lda 	#2
.a82f		8d ab 07	sta $07ab			sta 	gxFillSolid
.a832		80 ab		bra $a7df			bra 	_RGICommandLoop
.a834						_RGI_Frame:
.a834		9c ab 07	stz $07ab			stz 	gxFillSolid
.a837		80 a6		bra $a7df			bra 	_RGICommandLoop
.a839						_RGI_To:
.a839		20 cc a8	jsr $a8cc			jsr 	GCGetCoordinatePair 		; get coordinate pair into slot #1,#2
.a83c		20 f3 a8	jsr $a8f3			jsr 	GCCopyPairToStore
.a83f						_RGI_Here:
.a83f		5a		phy				phy
.a840		20 e9 a8	jsr $a8e9			jsr 	GCLoadAXY 					; load it into AXY
.a843		20 a3 a8	jsr $a8a3			jsr 	_RGICallHandler 			; go do whatever it is.
.a846		7a		ply				ply
.a847		80 96		bra $a7df			bra 	_RGICommandLoop 			; and go round
.a849						_RGI_By:
.a849		20 d9 a8	jsr $a8d9			jsr 	GCSignedCoordinatePair 		; get coordinate pair into slot #1,#2
.a84c		18		clc				clc
.a84d		a5 59		lda $59				lda 	NSMantissa0+1 				; copy it into space.
.a84f		6d ac 07	adc $07ac			adc 	gxXPos
.a852		8d ac 07	sta $07ac			sta 	gxXPos
.a855		a5 61		lda $61				lda 	NSMantissa1+1
.a857		6d ad 07	adc $07ad			adc 	gxXPos+1
.a85a		8d ad 07	sta $07ad			sta 	gxXPos+1
.a85d		a5 5a		lda $5a				lda 	NSMantissa0+2
.a85f		18		clc				clc
.a860		6d ae 07	adc $07ae			adc 	gxYPos
.a863		8d ae 07	sta $07ae			sta 	gxYPos
.a866		80 d7		bra $a83f			bra 	_RGI_Here
.a868						_RGI_Dim:
.a868		a2 01		ldx #$01			ldx	 	#1
.a86a		20 98 a2	jsr $a298			jsr 	Evaluate8BitInteger
.a86d		a5 59		lda $59				lda 	NSMantissa0+1
.a86f		c9 00		cmp #$00			cmp 	#0
.a871		f0 2d		beq $a8a0			beq 	_RGIRange
.a873		c9 09		cmp #$09			cmp 	#8+1
.a875		b0 29		bcs $a8a0			bcs		_RGIRange
.a877		3a		dec a				dec 	a
.a878		8d b1 07	sta $07b1			sta 	gxDrawScale
.a87b		4c df a7	jmp $a7df			jmp 	_RGICommandLoop
.a87e						_RGI_Colour:
.a87e		a2 01		ldx #$01			ldx 	#1 							; colour
.a880		20 98 a2	jsr $a298			jsr 	Evaluate8BitInteger
.a883		a2 02		ldx #$02			ldx 	#2 							; default zero for 2nd parameter
.a885		20 fd a2	jsr $a2fd			jsr 	NSMSetZero
.a888		b1 30		lda ($30),y			lda 	(codePtr),y
.a88a		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; check , => mode.
.a88c		d0 04		bne $a892			bne 	_RGICDefaultMode
.a88e		c8		iny				iny
.a88f		20 98 a2	jsr $a298			jsr 	Evaluate8BitInteger
.a892						_RGICDefaultMode:
.a892		5a		phy				phy
.a893		a9 08		lda #$08			lda 	#GCMD_Colour 				; set colour.
.a895		a6 59		ldx $59				ldx 	NSMantissa0+1
.a897		a4 5a		ldy $5a				ldy 	NSMantissa0+2
.a899		20 61 80	jsr $8061			jsr 	GXGraphicDraw
.a89c		7a		ply				ply
.a89d		4c df a7	jmp $a7df			jmp 	_RGICommandLoop 			; and go round
.a8a0						_RGIRange:
.a8a0		4c 7a a4	jmp $a47a			jmp 	RangeError
.a8a3						_RGICallHandler:
.a8a3		6c af 07	jmp ($07af)			jmp 	(gxHandler)
.a8a6						_RGI_SpriteInstructions:
.a8a6		c9 cc		cmp #$cc			cmp 	#KWD_OFF
.a8a8		f0 07		beq $a8b1			beq 	_RGISpriteOff
.a8aa		c9 c7		cmp #$c7			cmp 	#KWD_IMAGE
.a8ac		f0 13		beq $a8c1			beq 	_RGISetImage
.a8ae		4c 18 a8	jmp $a818			jmp 	_RGI_Move
.a8b1						_RGISpriteOff:
.a8b1		5a		phy				phy
.a8b2		a0 01		ldy #$01			ldy 	#1
.a8b4		a2 00		ldx #$00			ldx 	#0
.a8b6						_RGIDoCommandLoop:
.a8b6		a9 10		lda #$10			lda 	#GCMD_SpriteImage
.a8b8		20 61 80	jsr $8061			jsr 	GXGraphicDraw
.a8bb		7a		ply				ply
.a8bc		b0 e2		bcs $a8a0			bcs 	_RGIRange
.a8be		4c df a7	jmp $a7df			jmp 	_RGICommandLoop
.a8c1						_RGISetImage:
.a8c1		a2 01		ldx #$01			ldx 	#1
.a8c3		20 98 a2	jsr $a298			jsr 	Evaluate8BitInteger
.a8c6		5a		phy				phy
.a8c7		aa		tax				tax
.a8c8		a0 00		ldy #$00			ldy 	#0
.a8ca		80 ea		bra $a8b6			bra 	_RGIDoCommandLoop
.a8cc						GCGetCoordinatePair:
.a8cc		a2 01		ldx #$01			ldx 	#1
.a8ce		20 7d a2	jsr $a27d			jsr 	Evaluate16BitInteger
.a8d1		20 8c 93	jsr $938c			jsr 	CheckComma
.a8d4		e8		inx				inx
.a8d5		20 7d a2	jsr $a27d			jsr 	Evaluate16BitInteger
.a8d8		60		rts				rts
.a8d9						GCSignedCoordinatePair:
.a8d9		a2 01		ldx #$01			ldx 	#1
.a8db		20 87 a2	jsr $a287			jsr 	Evaluate16BitIntegerSigned
.a8de		20 8c 93	jsr $938c			jsr 	CheckComma
.a8e1		e8		inx				inx
.a8e2		20 87 a2	jsr $a287			jsr 	Evaluate16BitIntegerSigned
.a8e5		60		rts				rts
.a8e6						_GCCPRange:
.a8e6		4c 7a a4	jmp $a47a			jmp 	RangeError
.a8e9						GCLoadAXY:
.a8e9		ad ad 07	lda $07ad			lda 	gxXPos+1
.a8ec		ae ac 07	ldx $07ac			ldx 	gxXPos
.a8ef		ac ae 07	ldy $07ae			ldy 	gxYPos
.a8f2		60		rts				rts
.a8f3						GCCopyPairToStore:
.a8f3		a5 59		lda $59				lda 	NSMantissa0+1 				; copy it into space.
.a8f5		8d ac 07	sta $07ac			sta 	gxXPos
.a8f8		a5 61		lda $61				lda 	NSMantissa1+1
.a8fa		8d ad 07	sta $07ad			sta 	gxXPos+1
.a8fd		a5 5a		lda $5a				lda 	NSMantissa0+2
.a8ff		8d ae 07	sta $07ae			sta 	gxYPos
.a902		60		rts				rts
.07aa						gxCommandID:
>07aa								.fill 	1
.07ab						gxFillSolid:
>07ab								.fill 	1
.07ac						gxXPos:
>07ac								.fill 	2
.07ae						gxYPos:
>07ae								.fill 	1
.07af						gxHandler:
>07af								.fill 	2
.07b1						gxDrawScale:
>07b1								.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/graphics/gcontrol.asm

.a903						ResetBitmapSprites:
.a903		9c b2 07	stz $07b2			stz 	BitmapPageNumber
.a906		9c b3 07	stz $07b3			stz 	SpritePageNumber
.a909		60		rts				rts
.a90a						BitmapCtrl:
.a90a						BitmapCtrlLoop:
.a90a		b1 30		lda ($30),y			lda 	(codePtr),y
.a90c		c8		iny				iny
.a90d		a2 01		ldx #$01			ldx 	#1
.a90f		c9 cd		cmp #$cd			cmp 	#KWD_ON
.a911		f0 24		beq $a937			beq 	BitmapSwitch
.a913		ca		dex				dex
.a914		c9 cc		cmp #$cc			cmp 	#KWD_OFF
.a916		f0 1f		beq $a937			beq 	BitmapSwitch
.a918		c9 b9		cmp #$b9			cmp 	#KWD_AT  					; set address
.a91a		f0 13		beq $a92f			beq 	BitmapAddress
.a91c		c9 bd		cmp #$bd			cmp 	#KWD_CLEAR
.a91e		f0 02		beq $a922			beq 	BitmapClear
.a920		88		dey				dey
.a921		60		rts				rts
.a922						BitmapClear:
.a922		20 98 a2	jsr $a298			jsr 	Evaluate8BitInteger 		; get the colour
.a925		5a		phy				phy
.a926		aa		tax				tax
.a927		a9 06		lda #$06			lda 	#GCMD_Clear					; clear to that colour
.a929		20 61 80	jsr $8061			jsr 	GXGraphicDraw
.a92c		7a		ply				ply
.a92d		80 db		bra $a90a			bra 	BitmapCtrlLoop
.a92f						BitmapAddress:
.a92f		20 8c a9	jsr $a98c			jsr 	GetPageNumber
.a932		8d b2 07	sta $07b2			sta 	BitmapPageNumber
.a935		80 d3		bra $a90a			bra 	BitmapCtrlLoop
.a937						BitmapSwitch:
.a937		5a		phy				phy
.a938		ac b2 07	ldy $07b2			ldy 	BitmapPageNumber 			; gfx 1,on/off,0
.a93b		a9 02		lda #$02			lda 	#GCMD_BitmapCtl
.a93d		20 61 80	jsr $8061			jsr 	GXGraphicDraw
.a940		a9 08		lda #$08			lda 	#GCMD_Colour				; set colour to $FF
.a942		a0 00		ldy #$00			ldy 	#0
.a944		a2 ff		ldx #$ff			ldx 	#$FF
.a946		20 61 80	jsr $8061			jsr 	GXGraphicDraw
.a949		9c ab 07	stz $07ab			stz 	gxFillSolid
.a94c		9c ac 07	stz $07ac			stz 	gxXPos
.a94f		9c ad 07	stz $07ad			stz 	gxXPos+1
.a952		9c ae 07	stz $07ae			stz 	gxYPos
.a955		9c b1 07	stz $07b1			stz 	gxDrawScale
.a958		a9 40		lda #$40			lda 	#GCMD_Move 						; home cursor
.a95a		a2 00		ldx #$00			ldx 	#0
.a95c		a0 00		ldy #$00			ldy 	#0
.a95e		20 61 80	jsr $8061			jsr 	GXGraphicDraw
.a961		7a		ply				ply
.a962		80 a6		bra $a90a			bra 	BitmapCtrlLoop
.a964						SpritesCtrl:
.a964						SpritesCtrlLoop:
.a964		b1 30		lda ($30),y			lda 	(codePtr),y
.a966		c8		iny				iny
.a967		a2 01		ldx #$01			ldx 	#1
.a969		c9 cd		cmp #$cd			cmp 	#KWD_ON
.a96b		f0 13		beq $a980			beq 	SpriteSwitch
.a96d		ca		dex				dex
.a96e		c9 cc		cmp #$cc			cmp 	#KWD_OFF
.a970		f0 0e		beq $a980			beq 	SpriteSwitch
.a972		c9 b9		cmp #$b9			cmp 	#KWD_AT
.a974		f0 02		beq $a978			beq 	SpriteSetAddress
.a976		88		dey				dey
.a977		60		rts				rts
.a978						SpriteSetAddress:
.a978		20 8c a9	jsr $a98c			jsr 	GetPageNumber
.a97b		8d b3 07	sta $07b3			sta 	SpritePageNumber
.a97e		80 e4		bra $a964			bra 	SpritesCtrlLoop
.a980						SpriteSwitch:
.a980		5a		phy				phy
.a981		ac b3 07	ldy $07b3			ldy 	SpritePageNumber 			; gfx 2,on/off,0
.a984		a9 04		lda #$04			lda 	#GCMD_SpriteCtl
.a986		20 61 80	jsr $8061			jsr 	GXGraphicDraw
.a989		7a		ply				ply
.a98a		80 d8		bra $a964			bra 	SpritesCtrlLoop
.a98c						GetPageNumber:
.a98c		a2 00		ldx #$00			ldx 	#0
.a98e		20 72 a2	jsr $a272			jsr 	EvaluateUnsignedInteger 	; evaluate where to go.
.a991		a5 60		lda $60				lda 	NSMantissa1 				; check on page
.a993		29 1f		and #$1f			and 	#$1F
.a995		05 58		ora $58				ora 	NSMantissa0
.a997		d0 0c		bne $a9a5			bne 	_GPNError
.a999		a5 68		lda $68				lda 	NSMantissa2
.a99b		06 60		asl $60				asl 	NSMantissa1					; get page number
.a99d		2a		rol a				rol 	a
.a99e		06 60		asl $60				asl 	NSMantissa1
.a9a0		2a		rol a				rol 	a
.a9a1		06 60		asl $60				asl 	NSMantissa1
.a9a3		2a		rol a				rol 	a
.a9a4		60		rts				rts
.a9a5						_GPNError:
.a9a5		a9 07		lda #$07		lda	#7
.a9a7		4c 9d 93	jmp $939d		jmp	ErrorHandler
.07b2						BitmapPageNumber:
>07b2								.fill 	1
.07b3						SpritePageNumber:
>07b3								.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/graphics/gfx.asm

.a9aa						GfxCommand:
.a9aa		a2 00		ldx #$00			ldx 	#0
.a9ac		20 98 a2	jsr $a298			jsr 	Evaluate8BitInteger 		; command
.a9af		20 8c 93	jsr $938c			jsr 	CheckComma
.a9b2		e8		inx				inx
.a9b3		20 7d a2	jsr $a27d			jsr 	Evaluate16BitInteger 		; X
.a9b6		20 8c 93	jsr $938c			jsr 	CheckComma
.a9b9		e8		inx				inx
.a9ba		20 98 a2	jsr $a298			jsr 	Evaluate8BitInteger 		; Y
.a9bd		a5 61		lda $61				lda 	NSMantissa1+1  				; shift bit 0 of X into CS, should now be zero
.a9bf		4a		lsr a				lsr 	a
.a9c0		d0 12		bne $a9d4			bne 	_GfxError
.a9c2		26 58		rol $58				rol 	NSMantissa0 				; rotate into command
.a9c4		b0 0e		bcs $a9d4			bcs 	_GfxError 					; bit 7 should have been zero
.a9c6		5a		phy				phy 								; save pos
.a9c7		a5 58		lda $58				lda 	NSMantissa0 				; do the command
.a9c9		a6 59		ldx $59				ldx 	NSMantissa0+1
.a9cb		a4 5a		ldy $5a				ldy 	NSMantissa0+2
.a9cd		20 61 80	jsr $8061			jsr 	GXGraphicDraw
.a9d0		b0 02		bcs $a9d4			bcs 	_GfxError
.a9d2		7a		ply				ply 								; restore pos and exit.
.a9d3		60		rts				rts
.a9d4						_GfxError:
.a9d4		4c 7a a4	jmp $a47a			jmp 	RangeError

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/graphics/hit.asm

.a9d7						UnaryHit:
.a9d7		fa		plx				plx
.a9d8		a9 36		lda #$36			lda 	#zTemp0
.a9da		20 98 a2	jsr $a298			jsr 	Evaluate8BitInteger 		; get sprite number 0
.a9dd		20 8c 93	jsr $938c			jsr 	CheckComma
.a9e0		e8		inx				inx
.a9e1		20 98 a2	jsr $a298			jsr 	Evaluate8BitInteger 		; get sprite number 1
.a9e4		20 84 93	jsr $9384			jsr		CheckRightBracket
.a9e7		ca		dex				dex 								; fix back up again.
.a9e8		da		phx				phx 								; save X/Y
.a9e9		5a		phy				phy
.a9ea		b4 59		ldy $59,x			ldy 	NSMantissa0+1,x 			; get the sprite numbers into X/Y
.a9ec		b5 58		lda $58,x			lda 	NSMantissa0,x
.a9ee		aa		tax				tax
.a9ef		a9 12		lda #$12			lda 	#GCMD_SpriteCollide 		; command check collision.
.a9f1		20 61 80	jsr $8061			jsr 	GXGraphicDraw 				; calculate result
.a9f4		1a		inc a				inc 	a 							; so 255 (fail) -> 0, otherwise 1,2,3,4 pixels etc.
.a9f5		7a		ply				ply 								; restore XY
.a9f6		fa		plx				plx
.a9f7		20 ff a2	jsr $a2ff			jsr 	NSMSetByte 					; return the hit result
.a9fa		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/graphics/palette.asm

.a9fb						PaletteCommand:
.a9fb		a2 00		ldx #$00			ldx 	#0
.a9fd		20 98 a2	jsr $a298			jsr 	Evaluate8BitInteger 		; colour
.aa00		20 8c 93	jsr $938c			jsr 	CheckComma
.aa03		e8		inx				inx
.aa04		20 7d a2	jsr $a27d			jsr 	Evaluate16BitInteger 		; r
.aa07		20 8c 93	jsr $938c			jsr 	CheckComma
.aa0a		e8		inx				inx
.aa0b		20 98 a2	jsr $a298			jsr 	Evaluate8BitInteger 		; g
.aa0e		20 8c 93	jsr $938c			jsr 	CheckComma
.aa11		e8		inx				inx
.aa12		20 98 a2	jsr $a298			jsr 	Evaluate8BitInteger 		; b
.aa15		a5 58		lda $58				lda 	NSMantissa0 				; get colour #
.aa17		85 36		sta $36				sta 	zTemp0
.aa19		a9 34		lda #$34			lda 	#$D0 >> 2 					; MSB = D0/4
.aa1b		85 37		sta $37				sta 	zTemp0+1
.aa1d		06 36		asl $36				asl 	zTemp0 						; zTemp = $D000+Colour x 4
.aa1f		26 37		rol $37				rol	 	zTemp0+1
.aa21		06 36		asl $36				asl 	zTemp0
.aa23		26 37		rol $37				rol	 	zTemp0+1
.aa25		a9 01		lda #$01			lda 	#1 							; I/O Page 2
.aa27		85 01		sta $01				sta 	1
.aa29		5a		phy				phy
.aa2a		a5 5b		lda $5b				lda 	NSMantissa0+3 				; fix to r,g,b
.aa2c		92 36		sta ($36)			sta 	(zTemp0)
.aa2e		a0 01		ldy #$01			ldy 	#1
.aa30		a5 5a		lda $5a				lda 	NSMantissa0+2
.aa32		91 36		sta ($36),y			sta 	(zTemp0),y
.aa34		a5 59		lda $59				lda 	NSMantissa0+1
.aa36		c8		iny				iny
.aa37		91 36		sta ($36),y			sta 	(zTemp0),y
.aa39		7a		ply				ply
.aa3a		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/hardware/cls.asm

.aa3b						ClearScreen:
.aa3b		5a		phy				phy
.aa3c		a9 0c		lda #$0c			lda 	#12 						; char code 12 clears the screen.
.aa3e		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.aa41		7a		ply				ply
.aa42		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/kernel/commands/crossdev.asm

.aa43						XLoadCommand:
.aa43		20 e7 8d	jsr $8de7			jsr 	NewProgram
.aa46		20 19 87	jsr $8719			jsr 	BackloadProgram
.aa49		4c 01 88	jmp $8801			jmp 	WarmStart
.aa4c						XGoCommand:
.aa4c		20 e7 8d	jsr $8de7			jsr 	NewProgram
.aa4f		20 19 87	jsr $8719			jsr 	BackloadProgram
.aa52		4c 72 8f	jmp $8f72			jmp 	RunCurrentProgram

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/kernel/commands/dos.asm

.aa55						BootDOS:
.aa55		a9 63		lda #$63	            lda     #dosName & $FF
.aa57		85 fb		sta $fb		            sta     kernel.args.buf+0
.aa59		a9 aa		lda #$aa	            lda     #dosName >> 8
.aa5b		85 fc		sta $fc		            sta     kernel.args.buf+1
.aa5d		20 18 ff	jsr $ff18	            jsr     kernel.RunNamed
.aa60		4c 01 88	jmp $8801	            jmp 	WarmStart
>aa63		44 4f 53 00			dosName:	.text 	"DOS",0

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/kernel/commands/event.asm

.aa67						UnaryEvent:
.aa67		fa		plx				plx
.aa68		20 f5 b0	jsr $b0f5			jsr 	TimerToStackX 				; timer in +0
.aa6b		e8		inx				inx  								; put reference into +1
.aa6c		20 f1 9c	jsr $9cf1			jsr 	EvaluateTerm
.aa6f		b5 50		lda $50,x			lda 	NSStatus,x 					; check if is integer reference
.aa71		c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.aa73		d0 4c		bne $aac1			bne 	_UEType
.aa75		e8		inx				inx 								; put the step in +2
.aa76		20 8c 93	jsr $938c			jsr 	CheckComma
.aa79		20 7d a2	jsr $a27d			jsr 	Evaluate16BitInteger
.aa7c		20 84 93	jsr $9384			jsr 	CheckRightBracket
.aa7f		ca		dex				dex
.aa80		ca		dex				dex
.aa81		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; copy reference to zTemp0
.aa83		85 36		sta $36				sta 	zTemp0
.aa85		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.aa87		85 37		sta $37				sta 	zTemp0+1
.aa89		5a		phy				phy
.aa8a		a0 03		ldy #$03			ldy 	#3 							; check bit 7 of last bit, the packed sign bit
.aa8c		b1 36		lda ($36),y			lda 	(zTemp0),y
.aa8e		30 2d		bmi $aabd			bmi 	_UEFalse 					; exit if signed.
.aa90		a0 00		ldy #$00			ldy 	#0 							; has it timed out (24 bit)
.aa92		b5 58		lda $58,x			lda 	NSMantissa0,x
.aa94		d1 36		cmp ($36),y			cmp 	(zTemp0),y
.aa96		c8		iny				iny
.aa97		b5 60		lda $60,x			lda 	NSMantissa1,x
.aa99		f1 36		sbc ($36),y			sbc		(zTemp0),y
.aa9b		c8		iny				iny
.aa9c		b5 68		lda $68,x			lda 	NSMantissa2,x
.aa9e		f1 36		sbc ($36),y			sbc		(zTemp0),y
.aaa0		90 1b		bcc $aabd			bcc 	_UEFalse 					; no, return FALSE.
.aaa2		18		clc				clc
.aaa3		a0 00		ldy #$00			ldy 	#0 							; work out new value as timer() + step
.aaa5		b5 58		lda $58,x			lda 	NSMantissa0,x
.aaa7		75 5a		adc $5a,x			adc 	NSMantissa0+2,x
.aaa9		91 36		sta ($36),y			sta 	(zTemp0),y
.aaab		c8		iny				iny
.aaac		b5 60		lda $60,x			lda 	NSMantissa1,x
.aaae		75 62		adc $62,x			adc 	NSMantissa1+2,x
.aab0		91 36		sta ($36),y			sta 	(zTemp0),y
.aab2		c8		iny				iny
.aab3		b5 68		lda $68,x			lda 	NSMantissa2,x
.aab5		75 6a		adc $6a,x			adc 	NSMantissa2+2,x
.aab7		91 36		sta ($36),y			sta 	(zTemp0),y
.aab9		7a		ply				ply
.aaba		4c 10 94	jmp $9410			jmp 	ReturnTrue
.aabd						_UEFalse:
.aabd		7a		ply				ply 								; restore Y
.aabe		4c 1b 94	jmp $941b			jmp 	ReturnFalse 				; and return False
.aac1						_UEType:
.aac1		4c 7f a4	jmp $a47f			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/kernel/commands/files/bload.asm

.aac4						Command_BLoad:
.aac4		20 cf aa	jsr $aacf			jsr 	BLOADHandler
.aac7		c9 00		cmp #$00			cmp 	#0
.aac9		d0 01		bne $aacc			bne 	_BLError
.aacb		60		rts				rts
.aacc						_BLError:
.aacc		4c 1e ad	jmp $ad1e			jmp 	CLErrorHandler
.aacf						BLOADHandler:
.aacf		a2 00		ldx #$00			ldx 	#0
.aad1		20 55 a2	jsr $a255			jsr 	EvaluateString 				; file name to load
.aad4		20 8c 93	jsr $938c			jsr 	CheckComma 					; consume comma
.aad7		e8		inx				inx
.aad8		20 6a a2	jsr $a26a			jsr 	EvaluateInteger 			; load address (full physical address)
.aadb		5a		phy				phy
.aadc		a5 58		lda $58				lda 	NSMantissa0					; file name -> XA
.aade		a6 60		ldx $60				ldx 	NSMantissa1
.aae0		20 c9 83	jsr $83c9			jsr 	KNLOpenFileRead 			; open file for reading
.aae3		b0 50		bcs $ab35			bcs 	_BLErrorExit 				; error, so fail.
.aae5		8d b8 07	sta $07b8			sta 	BasicFileStream 			; save the reading stream.
.aae8		a2 01		ldx #$01			ldx 	#1 							; address is in slot # 1
.aaea		20 37 ab	jsr $ab37			jsr 	BLOpenPhysicalMemory 		; open for access.
.aaed						_BLReadFile:
.aaed		ad b8 07	lda $07b8			lda 	BasicFileStream
.aaf0		a2 40		ldx #$40			ldx     #KNLReadBufferLen 			; set bytes to read.
.aaf2		20 1e 84	jsr $841e			jsr 	KNLReadBlock 				; read next block
.aaf5		b0 22		bcs $ab19			bcs 	_BLFileError 				; file error, which might be EOF.
.aaf7		c9 00		cmp #$00			cmp 	#0 							; read nothing.
.aaf9		f0 f2		beq $aaed			beq 	_BLReadFile
.aafb		8d b6 07	sta $07b6			sta 	BLCopyCounter 				; counter.
.aafe		ac b5 07	ldy $07b5			ldy 	BLYOffset 					; copy the buffer out here
.ab01		a2 00		ldx #$00			ldx 	#0 							; offset in buffer.
.ab03						_BLCopyLoop:
.ab03		bd 9a 06	lda $069a,x			lda 	KNLReadBuffer,x 			; copy byte and advance
.ab06		91 3a		sta ($3a),y			sta 	(zTemp2),y
.ab08		c8		iny				iny
.ab09		d0 03		bne $ab0e			bne 	_BLNoAdjust 				; check changed 256 byte or 8k page.
.ab0b		20 5f ab	jsr $ab5f			jsr 	BLAdvancePhysicalMemory
.ab0e						_BLNoAdjust:
.ab0e		e8		inx				inx
.ab0f		ce b6 07	dec $07b6			dec 	BLCopyCounter
.ab12		d0 ef		bne $ab03			bne 	_BLCopyLoop
.ab14		8c b5 07	sty $07b5			sty 	BLYOffset 					; update Y offset
.ab17		80 d4		bra $aaed			bra 	_BLReadFile 				; go ask for more.
.ab19						_BLFileError:
.ab19		c9 30		cmp #$30			cmp 	#KERR_EOF 					; End of file
.ab1b		d0 0d		bne $ab2a			bne 	_BLErrorHandler				; no, it's an actual error
.ab1d		20 59 ab	jsr $ab59			jsr 	BLClosePhysicalMemory 		; close the access.
.ab20		ad b8 07	lda $07b8			lda 	BasicFileStream 			; close the file
.ab23		20 93 84	jsr $8493			jsr 	KNLCloseFile
.ab26		a9 00		lda #$00			lda 	#0 							; and return zero.
.ab28		7a		ply				ply
.ab29		60		rts				rts
.ab2a						_BLErrorHandler:
.ab2a		48		pha				pha 								; save code
.ab2b		20 59 ab	jsr $ab59			jsr 	BLClosePhysicalMemory 		; close access
.ab2e		ad b8 07	lda $07b8			lda 	BasicFileStream 			; close the open file
.ab31		20 93 84	jsr $8493			jsr 	KNLCloseFile
.ab34		68		pla				pla 								; get error code
.ab35						_BLErrorExit:
.ab35		7a		ply				ply 								; restore position and exit.
.ab36		60		rts				rts
=3						BLAccessPage = 3 							; page to use for actual memory.
.ab37						BLOpenPhysicalMemory:
.ab37		a5 0b		lda $0b				lda 	BLAccessPage+8 				; save current mapping
.ab39		8d b4 07	sta $07b4			sta 	BLNormalMapping
.ab3c		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy address, 13 bit adjusted for page -> (zTemp2),BLYOffset
.ab3e		8d b5 07	sta $07b5			sta 	BLYOffset 					; zTemp2 0 is *always* zero.
.ab41		64 3a		stz $3a				stz 	zTemp2
.ab43		b5 60		lda $60,x			lda 	NSMantissa1,x
.ab45		29 1f		and #$1f			and 	#$1F
.ab47		09 60		ora #$60			ora 	#BLAccessPage << 5
.ab49		85 3b		sta $3b				sta 	zTemp2+1
.ab4b		b5 68		lda $68,x			lda 	NSMantissa2,x 				; shift M2:M1 right 3 times to give page # required
.ab4d		16 60		asl $60,x			asl 	NSMantissa1,x
.ab4f		2a		rol a				rol 	a
.ab50		16 60		asl $60,x			asl 	NSMantissa1,x
.ab52		2a		rol a				rol 	a
.ab53		16 60		asl $60,x			asl 	NSMantissa1,x
.ab55		2a		rol a				rol 	a
.ab56		85 0b		sta $0b				sta 	BLAccessPage+8 				; access that page
.ab58		60		rts				rts
.ab59						BLClosePhysicalMemory:
.ab59		ad b4 07	lda $07b4			lda 	BLNormalMapping
.ab5c		85 0b		sta $0b				sta 	BLAccessPage+8
.ab5e		60		rts				rts
.ab5f						BLAdvancePhysicalMemory:
.ab5f		48		pha				pha
.ab60		e6 3b		inc $3b				inc		zTemp2+1 					; bump MSB
.ab62		a5 3b		lda $3b				lda 	zTemp2+1
.ab64		c9 80		cmp #$80			cmp 	#(BLAccessPage+1) << 5 		; reached next page ?
.ab66		d0 06		bne $ab6e			bne 	_BLAPMExit 					; (e.g. end of the mapped page.)
.ab68		e6 0b		inc $0b				inc 	BLAccessPage+8 				; next physical page
.ab6a		a9 60		lda #$60			lda 	#BLAccessPage << 5 			; page back to start of transfer page
.ab6c		85 3b		sta $3b				sta 	zTemp2+1
.ab6e						_BLAPMExit:
.ab6e		68		pla				pla
.ab6f		60		rts				rts
.07b4						BLNormalMapping:
>07b4								.fill 	1
.07b5						BLYOffset:
>07b5								.fill 	1
.07b6						BLCopyCounter:
>07b6								.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/kernel/commands/files/bsave.asm

.ab70						Command_BSave:
.ab70		20 7b ab	jsr $ab7b			jsr 	BSaveHandler
.ab73		c9 00		cmp #$00			cmp 	#0
.ab75		d0 01		bne $ab78			bne 	_BSError
.ab77		60		rts				rts
.ab78						_BSError:
.ab78		4c 1e ad	jmp $ad1e			jmp 	CLErrorHandler
.ab7b						BSaveHandler:
.ab7b		a2 00		ldx #$00			ldx 	#0
.ab7d		20 55 a2	jsr $a255			jsr 	EvaluateString 				; file name to load
.ab80		20 8c 93	jsr $938c			jsr 	CheckComma 					; consume comma
.ab83		e8		inx				inx
.ab84		20 6a a2	jsr $a26a			jsr 	EvaluateInteger 			; load address (full physical address)
.ab87		20 8c 93	jsr $938c			jsr 	CheckComma 					; consume comma
.ab8a		e8		inx				inx
.ab8b		20 6a a2	jsr $a26a			jsr 	EvaluateInteger 			; data length (3 bytes only)
.ab8e		5a		phy				phy
.ab8f		a5 58		lda $58				lda 	NSMantissa0					; file name -> XA
.ab91		a6 60		ldx $60				ldx 	NSMantissa1
.ab93		20 c4 83	jsr $83c4			jsr 	KNLOpenFileWrite 			; open file for reading
.ab96		b0 47		bcs $abdf			bcs 	_BSErrorExit 				; error, so fail.
.ab98		8d b8 07	sta $07b8			sta 	BasicFileStream 			; save the reading stream.
.ab9b		a2 01		ldx #$01			ldx 	#1 							; address is in slot # 1
.ab9d		20 37 ab	jsr $ab37			jsr 	BLOpenPhysicalMemory 		; open for access.
.aba0		a2 00		ldx #$00			ldx 	#0 							; number of bytes in kernel buffer
.aba2		ac b5 07	ldy $07b5			ldy 	BLYOffset 					; used for data offset.
.aba5						_BSWriteToFileLoop:
.aba5		38		sec				sec 								; pre decrement count.
.aba6		a5 5a		lda $5a				lda 	NSMantissa0+2
.aba8		e9 01		sbc #$01			sbc 	#1
.abaa		85 5a		sta $5a				sta 	NSMantissa0+2
.abac		a5 62		lda $62				lda 	NSMantissa1+2
.abae		e9 00		sbc #$00			sbc 	#0
.abb0		85 62		sta $62				sta 	NSMantissa1+2
.abb2		a5 6a		lda $6a				lda 	NSMantissa2+2
.abb4		e9 00		sbc #$00			sbc 	#0
.abb6		85 6a		sta $6a				sta 	NSMantissa2+2
.abb8		30 15		bmi $abcf			bmi 	_BSFileComplete 			; undercounted, so exit.
.abba		b1 3a		lda ($3a),y			lda 	(zTemp2),y 					; get byte to save
.abbc		9d 9a 06	sta $069a,x			sta 	KNLReadBuffer,x 			; save in the buffer and bump buffer index
.abbf		e8		inx				inx
.abc0		c8		iny				iny 								; next byte
.abc1		d0 03		bne $abc6			bne 	_BSNoCheck
.abc3		20 5f ab	jsr $ab5f			jsr 	BLAdvancePhysicalMemory 	; check not gone to next page.
.abc6						_BSNoCheck:
.abc6		e0 40		cpx #$40			cpx 	#KNLReadBufferLen 			; done the whole buffer
.abc8		d0 db		bne $aba5			bne 	_BSWriteToFileLoop 			; no , do the next byte.
.abca		20 e1 ab	jsr $abe1			jsr 	BSFlushBuffer 				; yes, flush the buffer
.abcd		80 d6		bra $aba5			bra 	_BSWriteToFileLoop 			; and keep on going
.abcf						_BSFileComplete:
.abcf		20 e1 ab	jsr $abe1			jsr 	BSFlushBuffer 				; write the buffer remainder.
.abd2		20 59 ab	jsr $ab59			jsr 	BLClosePhysicalMemory 		; close the access.
.abd5		ad b8 07	lda $07b8			lda 	BasicFileStream 			; close the file
.abd8		20 93 84	jsr $8493			jsr 	KNLCloseFile
.abdb		a9 00		lda #$00			lda 	#0
.abdd		7a		ply				ply
.abde		60		rts				rts
.abdf						_BSErrorExit:
.abdf		7a		ply				ply
.abe0		60		rts				rts
.abe1						BSFlushBuffer:
.abe1		e0 00		cpx #$00			cpx 	#0 							; buffer empty ?
.abe3		f0 0d		beq $abf2			beq 	_BSFBExit 					; if so, exit.
.abe5		a9 9a		lda #$9a			lda 	#KNLReadBuffer & $FF 		; where to write from.
.abe7		85 36		sta $36				sta 	zTemp0
.abe9		a9 06		lda #$06			lda 	#KNLReadBuffer >> 8
.abeb		85 37		sta $37				sta 	zTemp0+1 					; # of bytes in X
.abed		20 dd ad	jsr $addd			jsr 	CLWriteByteBlock 			; write it.
.abf0		a2 00		ldx #$00			ldx 	#0 							; buffer is empty.
.abf2						_BSFBExit:
.abf2		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/kernel/commands/files/dir.asm

.abf3						Command_Dir:
.abf3		ad 9a 07	lda $079a			lda     KNLDefaultDrive				; set drive to list.
.abf6		85 f3		sta $f3				sta     kernel.args.directory.open.drive
.abf8		64 fd		stz $fd				stz     kernel.args.directory.open.path_len
.abfa		20 74 ff	jsr $ff74			jsr     kernel.Directory.Open
.abfd		b0 4f		bcs $ac4e			bcs     _CDExit
.abff						_CDEventLoop:
.abff		20 0c ff	jsr $ff0c			jsr     kernel.Yield        		; Polite, not actually needed.
.ac02		20 80 82	jsr $8280			jsr     GetNextEvent
.ac05		b0 f8		bcs $abff			bcs     _CDEventLoop
.ac07		ad 9b 07	lda $079b			lda     KNLEvent.type
.ac0a		c9 44		cmp #$44			cmp     #kernel.event.directory.CLOSED
.ac0c		f0 40		beq $ac4e			beq    	_CDExit
.ac0e		20 13 ac	jsr $ac13			jsr     _CDMessages 				; handle various messages
.ac11		80 ec		bra $abff			bra     _CDEventLoop
.ac13						_CDMessages:
.ac13		c9 3a		cmp #$3a			cmp     #kernel.event.directory.OPENED
.ac15		f0 15		beq $ac2c			beq     _CDEVRead
.ac17		c9 3c		cmp #$3c			cmp     #kernel.event.directory.VOLUME
.ac19		f0 19		beq $ac34			beq     _CDEVVolume
.ac1b		c9 3e		cmp #$3e			cmp     #kernel.event.directory.FILE
.ac1d		f0 32		beq $ac51			beq     _CDEVFile
.ac1f		c9 40		cmp #$40			cmp     #kernel.event.directory.FREE
.ac21		f0 70		beq $ac93			beq     _CDEVFree
.ac23		c9 42		cmp #$42			cmp     #kernel.event.directory.EOF
.ac25		f0 6e		beq $ac95			beq     _CDEVEOF
.ac27		c9 46		cmp #$46			cmp     #kernel.event.directory.ERROR
.ac29		f0 6a		beq $ac95			beq     _CDEVEOF
.ac2b		60		rts				rts
.ac2c						_CDEVRead:
.ac2c		ad 9e 07	lda $079e			lda     KNLEvent.directory.stream
.ac2f		85 f3		sta $f3				sta     kernel.args.directory.read.stream
.ac31		4c 78 ff	jmp $ff78			jmp     kernel.Directory.Read
.ac34						_CDEVVolume:
.ac34		a9 5b		lda #$5b			lda 	#"["
.ac36		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.ac39		ad a0 07	lda $07a0			lda     KNLEvent.directory.volume.len
.ac3c		20 9d ac	jsr $ac9d			jsr     _CDReadData
.ac3f		20 fc 93	jsr $93fc			jsr 	PrintStringXA
.ac42		a9 5d		lda #$5d			lda 	#"]"
.ac44		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.ac47		a9 0d		lda #$0d			lda 	#13
.ac49		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.ac4c		80 de		bra $ac2c			bra     _CDEVRead
.ac4e						_CDExit:
.ac4e		4c 01 88	jmp $8801			jmp 	WarmStart
.ac51						_CDEVFile:
.ac51		a9 20		lda #$20			lda 	#32
.ac53		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.ac56		ad a0 07	lda $07a0			lda     KNLEvent.directory.file.len
.ac59		48		pha				pha
.ac5a		20 9d ac	jsr $ac9d			jsr     _CDReadData
.ac5d		20 fc 93	jsr $93fc			jsr 	PrintStringXA
.ac60		68		pla				pla
.ac61		49 ff		eor #$ff			eor 	#$FF
.ac63		38		sec				sec
.ac64		69 10		adc #$10			adc 	#16
.ac66		aa		tax				tax
.ac67						_CDEVTab:
.ac67		a9 20		lda #$20			lda 	#32
.ac69		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.ac6c		ca		dex				dex
.ac6d		10 f8		bpl $ac67			bpl 	_CDEVTab
.ac6f		20 b4 ac	jsr $acb4			jsr 	_CDReadExtended
.ac72		ad 26 05	lda $0526			lda 	lineBuffer
.ac75		ae 27 05	ldx $0527			ldx 	lineBuffer+1
.ac78		20 12 98	jsr $9812			jsr 	ConvertInt16
.ac7b		20 fc 93	jsr $93fc			jsr 	PrintStringXA
.ac7e		a2 ac		ldx #$ac			ldx 	#_CDEVFMessage >> 8
.ac80		a9 87		lda #$87			lda 	#_CDEVFMessage & $FF
.ac82		20 fc 93	jsr $93fc			jsr 	PrintStringXA
.ac85		80 a5		bra $ac2c			bra     _CDEVRead
.ac87						_CDEVFMessage:
>ac87		20 62 6c 6f 63 6b 28 73				.text 	" block(s).",13,0
>ac8f		29 2e 0d 00
.ac93						_CDEVFree:
.ac93		80 00		bra $ac95			bra     _CDEVEOF
.ac95						_CDEVEOF:
.ac95		ad 9e 07	lda $079e			lda     KNLEvent.directory.stream
.ac98		85 f3		sta $f3				sta     kernel.args.directory.close.stream
.ac9a		4c 7c ff	jmp $ff7c			jmp     kernel.Directory.Close
.ac9d						_CDReadData:
.ac9d		85 fd		sta $fd				sta     kernel.args.recv.buflen
.ac9f		a9 26		lda #$26			lda     #lineBuffer & $FF
.aca1		85 fb		sta $fb				sta     kernel.args.recv.buf+0
.aca3		a9 05		lda #$05			lda     #lineBuffer >> 8
.aca5		85 fc		sta $fc				sta     kernel.args.recv.buf+1
.aca7		20 04 ff	jsr $ff04			jsr     kernel.ReadData
.acaa		a6 fd		ldx $fd				ldx     kernel.args.recv.buflen
.acac		9e 26 05	stz $0526,x			stz     lineBuffer,x
.acaf		a9 26		lda #$26			lda 	#lineBuffer & $FF
.acb1		a2 05		ldx #$05			ldx 	#lineBuffer >> 8
.acb3		60		rts				rts
.acb4						_CDReadExtended:
.acb4		a9 02		lda #$02			lda     #2
.acb6		85 fd		sta $fd				sta     kernel.args.recv.buflen
.acb8		a9 26		lda #$26			lda     #lineBuffer & $FF
.acba		85 fb		sta $fb				sta     kernel.args.recv.buf+0
.acbc		a9 05		lda #$05			lda     #lineBuffer >> 8
.acbe		85 fc		sta $fc				sta     kernel.args.recv.buf+1
.acc0		4c 08 ff	jmp $ff08			jmp     kernel.ReadExt

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/kernel/commands/files/drive.asm

.acc3						Command_Drive:
.acc3		20 98 a2	jsr $a298			jsr 	Evaluate8BitInteger
.acc6		20 c0 83	jsr $83c0			jsr 	KNLSetDrive
.acc9		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/kernel/commands/files/load.asm

.acca						Command_Load:
.acca		20 d0 ac	jsr $acd0			jsr 	LoadFile
.accd		4c 01 88	jmp $8801			jmp 	WarmStart
.acd0						LoadFile:
.acd0		20 55 a2	jsr $a255			jsr 	EvaluateString 				; file name to load
.acd3		a6 37		ldx $37				ldx 	zTemp0+1					; zTemp0 -> XA
.acd5		a5 36		lda $36				lda 	zTemp0
.acd7		20 c9 83	jsr $83c9			jsr 	KNLOpenFileRead 			; open file for reading
.acda		b0 42		bcs $ad1e			bcs 	CLErrorHandler 				; error, so fail.
.acdc		8d b8 07	sta $07b8			sta 	BasicFileStream 			; save the reading stream.
.acdf		20 6e ad	jsr $ad6e			jsr     LoadReadByteInit            ; Init reader with the stream
.ace2		20 e7 8d	jsr $8de7			jsr 	NewProgram 					; does the actual NEW.
.ace5		9c b7 07	stz $07b7			stz 	LoadEOFFlag 				; clear EOF Flag.
.ace8						_CLLoop:
.ace8		20 2c ad	jsr $ad2c			jsr 	LoadReadLine 				; get next line.
.aceb		f0 10		beq $acfd			beq 	_CLExit 					; end, exit.
.aced		20 89 80	jsr $8089			jsr 	TKTokeniseLine 				; tokenise the line.
.acf0		ad 27 04	lda $0427			lda 	tokenLineNumber 			; line number = 0
.acf3		0d 28 04	ora $0428			ora 	tokenLineNumber+1
.acf6		f0 f0		beq $ace8			beq 	_CLLoop 					; not legal code, blank line or maybe a comment.
.acf8		20 dc 87	jsr $87dc			jsr 	EditProgramCode 			; do the editing etc.
.acfb		80 eb		bra $ace8			bra 	_CLLoop
.acfd						_CLExit:
.acfd		ad b8 07	lda $07b8			lda 	BasicFileStream
.ad00		20 93 84	jsr $8493			jsr 	KNLCloseFile
.ad03						CLComplete:
.ad03		a9 0b		lda #$0b			lda 	#_CLCMsg & $FF
.ad05		a2 ad		ldx #$ad			ldx 	#_CLCMsg >> 8
.ad07		20 fc 93	jsr $93fc			jsr 	PrintStringXA
.ad0a		60		rts				rts
.ad0b						_CLCMsg:
>ad0b		43 6f 6d 70 6c 65 74 65				.text 	"Complete.",13,0
>ad13		2e 0d 00
.ad16						CLCloseError:
.ad16		48		pha				pha
.ad17		ad b8 07	lda $07b8			lda 	BasicFileStream
.ad1a		20 93 84	jsr $8493			jsr 	KNLCloseFile
.ad1d		68		pla				pla
.ad1e						CLErrorHandler:
.ad1e		c9 28		cmp #$28			cmp 	#KERR_NOTFOUND
.ad20		f0 05		beq $ad27			beq 	_CLEHNotFound
.ad22		a9 1a		lda #$1a		lda	#26
.ad24		4c 9d 93	jmp $939d		jmp	ErrorHandler
.ad27						_CLEHNotFound:
.ad27		a9 19		lda #$19		lda	#25
.ad29		4c 9d 93	jmp $939d		jmp	ErrorHandler
.ad2c						LoadReadLine:
.ad2c		a2 00		ldx #$00			ldx 	#0 							; look for first character non space/ctl
.ad2e		20 48 ad	jsr $ad48			jsr 	LoadReadCharacter
.ad31		f0 14		beq $ad47			beq 	_LRLExit 					; eof ?
.ad33		c9 21		cmp #$21			cmp 	#' '+1 						; space control tab skip
.ad35		90 f5		bcc $ad2c			bcc 	LoadReadLine
.ad37						_LRLLoop:
.ad37		9d 26 05	sta $0526,x			sta 	lineBuffer,x 				; write into line buffer
.ad3a		9e 27 05	stz $0527,x			stz 	lineBuffer+1,x 				; make ASCIIZ
.ad3d		e8		inx				inx
.ad3e		20 48 ad	jsr $ad48			jsr 	LoadReadCharacter 			; next line
.ad41		c9 20		cmp #$20			cmp 	#32 						; until < space ctrl/eof.
.ad43		b0 f2		bcs $ad37			bcs 	_LRLLoop
.ad45		a9 01		lda #$01			lda 	#1 							; return code 1, okay.
.ad47						_LRLExit:
.ad47		60		rts				rts
.ad48						LoadReadCharacter:
.ad48		da		phx				phx
.ad49		5a		phy				phy
.ad4a		ad b7 07	lda $07b7			lda 	LoadEOFFlag 				; already done EOF.
.ad4d		d0 0c		bne $ad5b			bne 	_LRCIsEOF
.ad4f		20 78 ad	jsr $ad78			jsr 	LoadReadByte 				; read a byte
.ad52		90 09		bcc $ad5d			bcc		_LRCExit 					; read okay.
.ad54		c9 30		cmp #$30			cmp 	#KERR_EOF 					; if error not EOF it's an actual error.
.ad56		d0 be		bne $ad16			bne 	CLCloseError
.ad58		ce b7 07	dec $07b7			dec 	LoadEOFFlag
.ad5b						_LRCIsEOF:
.ad5b		a9 00		lda #$00			lda 	#0
.ad5d						_LRCExit:
.ad5d		c9 09		cmp #$09			cmp 	#9 							; convert tab to space
.ad5f		d0 02		bne $ad63			bne 	_LRCNotTab
.ad61		a9 20		lda #$20			lda 	#' '
.ad63						_LRCNotTab:
.ad63		c9 0a		cmp #$0a			cmp 	#$0A
.ad65		d0 02		bne $ad69			bne 	_LRCNotLF
.ad67		a9 0d		lda #$0d			lda 	#$0D
.ad69						_LRCNotLF:
.ad69		7a		ply				ply
.ad6a		fa		plx				plx
.ad6b		c9 00		cmp #$00			cmp 	#0 							; set Z flag if EOF.
.ad6d		60		rts				rts
.ad6e						LoadReadByteInit:
.ad6e		8d b9 07	sta $07b9			sta     LoadFileStream 				; save stream
.ad71		9c ba 07	stz $07ba			stz     LoadNextCharacter 			; reset buffer
.ad74		9c bb 07	stz $07bb			stz     LoadEndCharacter
.ad77		60		rts				rts
.ad78						LoadReadByte:
.ad78		da		phx				phx
.ad79		ae ba 07	ldx $07ba			ldx     LoadNextCharacter 					; all data consumed ?
.ad7c		ec bb 07	cpx $07bb			cpx     LoadEndCharacter
.ad7f		d0 12		bne $ad93			bne     _KNLRBGetNextByte
.ad81		ad b9 07	lda $07b9			lda     LoadFileStream
.ad84		a2 40		ldx #$40			ldx     #KNLReadBufferLen 			; set bytes to read.
.ad86		20 1e 84	jsr $841e			jsr     KNLReadBlock 				; read next chunk from the stream
.ad89		b0 0f		bcs $ad9a			bcs     _KNLRBError 				; error has occurred on read.
.ad8b		8d bb 07	sta $07bb			sta     LoadEndCharacter 						; # read is the number available
.ad8e		a2 00		ldx #$00			ldx     #0 							; reset the read pointer.
.ad90		8e ba 07	stx $07ba			stx     LoadNextCharacter
.ad93						_KNLRBGetNextByte:
.ad93		bd 9a 06	lda $069a,x			lda     KNLReadBuffer,x 			; get the next data item
.ad96		ee ba 07	inc $07ba			inc     LoadNextCharacter 					; and advance the index
.ad99		18		clc				clc 								; succeeded
.ad9a						_KNLRBError:
.ad9a		fa		plx				plx
.ad9b		60		rts				rts
.07b7						LoadEOFFlag:
>07b7								.fill 	1
.07b8						BasicFileStream:
>07b8								.fill 	1
.07b9						LoadFileStream:
>07b9								.byte   ?
.07ba						LoadNextCharacter:
>07ba								.byte   ?
.07bb						LoadEndCharacter:
>07bb								.byte   ?

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/kernel/commands/files/save.asm

.ad9c						Command_Save:
.ad9c		20 55 a2	jsr $a255			jsr 	EvaluateString 				; file name to load
.ad9f		a6 37		ldx $37				ldx 	zTemp0+1					; zTemp0 -> XA
.ada1		a5 36		lda $36				lda 	zTemp0
.ada3		20 c4 83	jsr $83c4			jsr 	KNLOpenFileWrite 			; open file for writing
.ada6		b0 32		bcs $adda			bcs 	CSErrorHandler 				; error, so fail.
.ada8		8d b8 07	sta $07b8			sta 	BasicFileStream 			; save the reading stream.
.adab		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.adad		85 30		sta $30				sta 	codePtr
.adaf		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.adb1		85 31		sta $31				sta 	codePtr+1
.adb3						_CSLoop:
.adb3		b2 30		lda ($30)			lda 	(codePtr)
.adb5		f0 17		beq $adce			beq 	_CSExit
.adb7		20 fe ad	jsr $adfe			jsr 	CSGetCleanLine
.adba		84 37		sty $37				sty 	zTemp0+1 					; save write address of data
.adbc		85 36		sta $36				sta 	zTemp0
.adbe		20 dd ad	jsr $addd			jsr 	CLWriteByteBlock 			; write the block out.
.adc1		18		clc				clc
.adc2		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.adc4		65 30		adc $30				adc 	codePtr
.adc6		85 30		sta $30				sta 	codePtr
.adc8		90 02		bcc $adcc			bcc 	_CREExit
.adca		e6 31		inc $31				inc 	codePtr+1 					; carry
.adcc						_CREExit:
.adcc		80 e5		bra $adb3			bra 	_CSLoop
.adce						_CSExit:
.adce		ad b8 07	lda $07b8			lda 	BasicFileStream 			; close file
.add1		20 93 84	jsr $8493			jsr 	KNLCloseFile
.add4		20 03 ad	jsr $ad03			jsr 	CLComplete 					; display complete message.
.add7		4c 01 88	jmp $8801			jmp 	WarmStart 					; and warm start
.adda						CSErrorHandler:
.adda		4c 1e ad	jmp $ad1e			jmp 	CLErrorHandler
.addd						CLWriteByteBlock:
.addd		e0 00		cpx #$00			cpx 	#0 							; written the lot ?
.addf		f0 1c		beq $adfd			beq 	_CLWBBExit					; if so, exit
.ade1		ad b8 07	lda $07b8			lda 	BasicFileStream 			; stream to write, count in X
.ade4		20 59 84	jsr $8459			jsr 	KNLWriteBlock 				; call one write attempt
.ade7		b0 f1		bcs $adda			bcs 	CSErrorHandler 				; error occurred
.ade9		85 38		sta $38				sta 	zTemp1 						; save bytes written.
.adeb		8a		txa				txa 								; subtract bytes written from X, total count.
.adec		38		sec				sec
.aded		e5 38		sbc $38				sbc 	zTemp1
.adef		aa		tax				tax
.adf0		18		clc				clc 								; advance zTemp0 pointer by bytes written.
.adf1		a5 36		lda $36				lda 	zTemp0
.adf3		65 38		adc $38				adc 	zTemp1
.adf5		85 36		sta $36				sta 	zTemp0
.adf7		90 e4		bcc $addd			bcc 	CLWriteByteBlock
.adf9		e6 37		inc $37				inc 	zTemp0+1
.adfb		80 e0		bra $addd			bra 	CLWriteByteBlock 			; and retry write out.
.adfd						_CLWBBExit:
.adfd		60		rts				rts
.adfe						CSGetCleanLine:
.adfe		a9 00		lda #$00			lda 	#0 							; no indent.
.ae00		20 7f 80	jsr $807f			jsr 	TKListConvertLine 			; convert line into token Buffer
.ae03		a2 00		ldx #$00			ldx 	#0 							; copy stripping controls.
.ae05		a0 00		ldy #$00			ldy 	#0
.ae07						_CSClean:
.ae07		b9 29 04	lda $0429,y			lda 	tokenBuffer,y
.ae0a		f0 09		beq $ae15			beq 	_CSDoneClean
.ae0c		30 04		bmi $ae12			bmi 	_CSIgnoreCharacter
.ae0e		9d 26 05	sta $0526,x			sta 	lineBuffer,x
.ae11		e8		inx				inx
.ae12						_CSIgnoreCharacter:
.ae12		c8		iny				iny
.ae13		80 f2		bra $ae07			bra 	_CSClean
.ae15						_CSDoneClean:
.ae15		a9 0d		lda #$0d			lda 	#13 						; add CR, length now in X and ASCIIZ.
.ae17		9d 26 05	sta $0526,x			sta 	lineBuffer,x
.ae1a		e8		inx				inx
.ae1b		9e 26 05	stz $0526,x			stz 	lineBuffer,x
.ae1e		a0 05		ldy #$05			ldy 	#(lineBuffer >> 8) 			; line address in YA
.ae20		a9 26		lda #$26			lda 	#(lineBuffer & $FF)
.ae22		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/kernel/commands/files/try.asm

.ae23						Command_Try:
.ae23		b1 30		lda ($30),y			lda 	(codePtr),y
.ae25		c9 81		cmp #$81			cmp 	#KWC_SHIFT1					; can only try in SHIFT_1
.ae27		d0 0c		bne $ae35			bne 	_TrySyntax
.ae29		c8		iny				iny 								; get second
.ae2a		b1 30		lda ($30),y			lda 	(codePtr),y
.ae2c		c8		iny				iny 								; and consume it.
.ae2d		c9 86		cmp #$86			cmp 	#KWD1_BLOAD
.ae2f		f0 09		beq $ae3a			beq 	_TryBLoad
.ae31		c9 87		cmp #$87			cmp	 	#KWD1_BSAVE
.ae33		f0 0a		beq $ae3f			beq 	_TryBSave
.ae35						_TrySyntax:
.ae35		a9 02		lda #$02		lda	#2
.ae37		4c 9d 93	jmp $939d		jmp	ErrorHandler
.ae3a						_TryBLoad:
.ae3a		20 cf aa	jsr $aacf			jsr 	BLOADHandler
.ae3d		80 03		bra $ae42			bra 	_TryExit
.ae3f						_TryBSave:
.ae3f		20 7b ab	jsr $ab7b			jsr 	BSaveHandler
.ae42						_TryExit:
.ae42		48		pha				pha 								; save result
.ae43		b1 30		lda ($30),y			lda 	(codePtr),y
.ae45		c8		iny				iny
.ae46		c9 dc		cmp #$dc			cmp 	#KWD_TO
.ae48		d0 eb		bne $ae35			bne 	_TrySyntax
.ae4a		a2 00		ldx #$00			ldx 	#0 							; get an integer reference.
.ae4c		20 f1 9c	jsr $9cf1			jsr 	EvaluateTerm
.ae4f		b5 50		lda $50,x			lda 	NSStatus,x
.ae51		c9 20		cmp #$20			cmp 	#NSBIsReference+NSTInteger 	; do we have an integer 4 byte reference.
.ae53		d0 e0		bne $ae35			bne		_TrySyntax
.ae55		68		pla				pla 								; error code.
.ae56		a2 01		ldx #$01			ldx	 	#1 							; address in 0, data in 1
.ae58		20 ff a2	jsr $a2ff			jsr 	NSMSetByte
.ae5b		ca		dex				dex
.ae5c		20 ff 8b	jsr $8bff			jsr 	AssignVariable 				; do the assign and exit
.ae5f		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/kernel/commands/files/verify.asm

.e778						m
.ae60						Command_VERIFY:
.ae60		20 55 a2	jsr $a255			jsr 	EvaluateString 				; file name to verify
.ae63		a6 37		ldx $37				ldx 	zTemp0+1					; zTemp0 -> XA
.ae65		a5 36		lda $36				lda 	zTemp0
.ae67		20 c9 83	jsr $83c9			jsr 	KNLOpenFileRead 			; open file for reading
.ae6a		b0 4b		bcs $aeb7			bcs 	_CVErrorHandler 			; error, so fail.
.ae6c		8d b8 07	sta $07b8			sta 	BasicFileStream 			; save the reading stream.
.ae6f		20 6e ad	jsr $ad6e			jsr     LoadReadByteInit            ; Init reader with the stream
.ae72		9c b7 07	stz $07b7			stz 	LoadEOFFlag 				; clear EOF Flag.
.ae75		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.ae77		85 30		sta $30				sta 	codePtr
.ae79		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.ae7b		85 31		sta $31				sta 	codePtr+1
.ae7d						_CVLoop:
.ae7d		20 2c ad	jsr $ad2c			jsr 	LoadReadLine 				; get next line.
.ae80		f0 27		beq $aea9			beq 	_CVExit 					; end, exit.
.ae82		20 89 80	jsr $8089			jsr 	TKTokeniseLine 				; tokenise the line.
.ae85		ad 27 04	lda $0427			lda 	tokenLineNumber 			; line number = 0
.ae88		0d 28 04	ora $0428			ora 	tokenLineNumber+1
.ae8b		f0 f0		beq $ae7d			beq 	_CVLoop 					; not legal code, blank line or maybe a comment.
.ae8d		a0 00		ldy #$00			ldy 	#0 							; start compare
.ae8f						_CVCompareLoop:
.ae8f		b1 30		lda ($30),y			lda 	(codePtr),y
.ae91		d9 26 04	cmp $0426,y			cmp 	tokenOffset,y 				; compare against actual code.
.ae94		d0 1c		bne $aeb2			bne 	_CVCompareError
.ae96		c8		iny				iny
.ae97		cc 26 04	cpy $0426			cpy 	tokenOffset 				; until done whole line of code
.ae9a		d0 f3		bne $ae8f			bne 	_CVCompareLoop
.ae9c		18		clc				clc
.ae9d		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.ae9f		65 30		adc $30				adc 	codePtr
.aea1		85 30		sta $30				sta 	codePtr
.aea3		90 02		bcc $aea7			bcc 	_CREExit
.aea5		e6 31		inc $31				inc 	codePtr+1 					; carry
.aea7						_CREExit:
.aea7		80 d4		bra $ae7d			bra 	_CVLoop
.aea9						_CVExit:
.aea9		ad b8 07	lda $07b8			lda 	BasicFileStream
.aeac		20 93 84	jsr $8493			jsr 	KNLCloseFile
.aeaf		4c 03 ad	jmp $ad03			jmp 	CLComplete
.aeb2						_CVCompareError:
.aeb2		a9 1b		lda #$1b		lda	#27
.aeb4		4c 9d 93	jmp $939d		jmp	ErrorHandler
.aeb7						_CVErrorHandler:
.aeb7		4c 1e ad	jmp $ad1e			jmp 	CLErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/kernel/commands/joy.asm

.aeba						UnaryJoyX:
.aeba		18		clc				clc
.aebb		80 01		bra $aebe			bra 	JoyMain
.aebd						UnaryJoyY:
.aebd		38		sec				sec
.aebe						JoyMain:
.aebe		fa		plx				plx 								; get pos
.aebf		08		php				php 								; save carry (set for Y)
.aec0		20 98 a2	jsr $a298			jsr 	Evaluate8BitInteger 		; ignore the parameter
.aec3		20 84 93	jsr $9384			jsr 	CheckRightBracket
.aec6		20 99 84	jsr $8499			jsr 	KNLReadController 			; read the controller.
.aec9		28		plp				plp
.aeca		b0 02		bcs $aece			bcs 	_JMNoShift 					; if X then shift bits 3,2 -> 1,0
.aecc		4a		lsr a				lsr 	a
.aecd		4a		lsr a				lsr 	a
.aece						_JMNoShift:
.aece		4a		lsr a				lsr 	a 							; if bit 0 set then left/up e.g. -1
.aecf		b0 07		bcs $aed8			bcs 	JMIsLeft
.aed1		4a		lsr a				lsr 	a 							; if bit 1 set then right/down e.g. +1
.aed2		b0 07		bcs $aedb			bcs 	JMIsRight
.aed4		20 fd a2	jsr $a2fd			jsr 	NSMSetZero 					; zero result
.aed7		60		rts				rts
.aed8						JMIsLeft:
.aed8		4c 10 94	jmp $9410			jmp 	ReturnTrue
.aedb						JMIsRight:
.aedb		a9 01		lda #$01			lda 	#1
.aedd		20 ff a2	jsr $a2ff			jsr 	NSMSetByte
.aee0		60		rts				rts
.aee1						UnaryJoyB:
.aee1		fa		plx				plx 								; get pos
.aee2		20 98 a2	jsr $a298			jsr 	Evaluate8BitInteger 		; ignore the parameter
.aee5		20 84 93	jsr $9384			jsr 	CheckRightBracket
.aee8		20 99 84	jsr $8499			jsr 	KNLReadController 			; read the controller.
.aeeb		29 10		and #$10			and 	#$10
.aeed		d0 e9		bne $aed8			bne 	JMIsLeft
.aeef		20 fd a2	jsr $a2fd			jsr 	NSMSetZero
.aef2		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/kernel/commands/memcopy.asm

.aef3						MCCommand:
.aef3		a5 01		lda $01				lda 	1 							; save current I/O ; switch to I/O 0
.aef5		48		pha				pha
.aef6		64 01		stz $01				stz 	1
.aef8		9c 00 df	stz $df00			stz 	$DF00 						; zero control byte.
.aefb		a9 81		lda #$81			lda 	#$81 						; standard start byte (DMA Enabled, Start set)
.aefd		8d bc 07	sta $07bc			sta 	DMAControlByte
.af00		20 ae af	jsr $afae			jsr 	MCPosition 					; start position
.af03		a2 04		ldx #$04			ldx 	#4 							; write to source AND $DF04 destination address $DF08
.af05		20 7f af	jsr $af7f			jsr 	MCCopyAddress
.af08		a2 08		ldx #$08			ldx 	#8
.af0a		20 7f af	jsr $af7f			jsr 	MCCopyAddress
.af0d		b1 30		lda ($30),y			lda 	(codePtr),y
.af0f		c8		iny				iny
.af10		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; , <size>
.af12		f0 09		beq $af1d			beq 	_MCSize1D
.af14		c9 d6		cmp #$d6			cmp 	#KWD_RECT 					; RECT <x>,<y>
.af16		f0 11		beq $af29			beq 	_MCRect2D
.af18						_MCSyntax:
.af18		a9 02		lda #$02		lda	#2
.af1a		4c 9d 93	jmp $939d		jmp	ErrorHandler
.af1d						_MCSize1D:
.af1d		a2 00		ldx #$00			ldx 	#0 							; get size
.af1f		20 6a a2	jsr $a26a			jsr 	EvaluateInteger
.af22		a2 0c		ldx #$0c			ldx 	#$C 						; copy to size $DF0C-E
.af24		20 7f af	jsr $af7f			jsr 	MCCopyAddress
.af27		80 24		bra $af4d			bra 	_MCDestination
.af29						_MCRect2D:
.af29		a2 0c		ldx #$0c			ldx 	#$C 						; width to $DF0C,D
.af2b		20 9c af	jsr $af9c			jsr 	MCEvalCopyData16
.af2e		20 8c 93	jsr $938c			jsr 	CheckComma
.af31		a2 0e		ldx #$0e			ldx 	#$E 						; height to $DF0E,F
.af33		20 9c af	jsr $af9c			jsr 	MCEvalCopyData16
.af36		a9 ba		lda #$ba			lda 	#KWD_BY 					; BY keyword.
.af38		20 94 93	jsr $9394			jsr 	CheckNextA
.af3b		a2 10		ldx #$10			ldx 	#$10 						; store source and destination stride
.af3d		20 9c af	jsr $af9c			jsr 	MCEvalCopyData16
.af40		a2 12		ldx #$12			ldx 	#$12
.af42		20 a3 af	jsr $afa3			jsr 	MCCopyData16
.af45		ad bc 07	lda $07bc			lda 	DMAControlByte 				; set bit 4 of DMA control indicating 2D.
.af48		09 02		ora #$02			ora 	#$02
.af4a		8d bc 07	sta $07bc			sta 	DMAControlByte
.af4d						_MCDestination:
.af4d		b1 30		lda ($30),y			lda 	(codePtr),y
.af4f		c8		iny				iny
.af50		c9 d1		cmp #$d1			cmp 	#KWD_POKE 					; is it POKE n
.af52		f0 0e		beq $af62			beq 	_MCDestPoke
.af54		c9 dc		cmp #$dc			cmp 	#KWD_TO 					; is it TO n
.af56		d0 c0		bne $af18			bne 	_MCSyntax
.af58		20 ae af	jsr $afae			jsr 	MCPosition 					; get target address
.af5b		a2 08		ldx #$08			ldx 	#8							; copy to target address at $DF08-A
.af5d		20 7f af	jsr $af7f			jsr 	MCCopyAddress
.af60		80 0e		bra $af70			bra 	_MCDoDMA 					; and we can go.
.af62						_MCDestPoke:
.af62		20 98 a2	jsr $a298			jsr 	Evaluate8BitInteger 		; POKE what
.af65		8d 01 df	sta $df01			sta 	$DF01 						; set the FILL register
.af68		ad bc 07	lda $07bc			lda 	DMAControlByte 				; set bit 2 of control byte indicating FILL.
.af6b		09 04		ora #$04			ora 	#$04
.af6d		8d bc 07	sta $07bc			sta 	DMAControlByte
.af70						_MCDoDMA:
.af70		ad bc 07	lda $07bc			lda 	DMAControlByte 				; set the DMA Control byte to go !
.af73		8d 00 df	sta $df00			sta 	$DF00
.af76						_MCWaitBUSD:
.af76		ad 01 df	lda $df01			lda 	$DF01
.af79		30 fb		bmi $af76			bmi 	_MCWaitBUSD
.af7b		68		pla				pla 								; restore I/O.
.af7c		85 01		sta $01				sta 	1
.af7e		60		rts				rts
.af7f						MCCopyAddress:
.af7f		a5 68		lda $68				lda 	NSMantissa2 				; check valid vlaue
.af81		29 fc		and #$fc			and 	#$FC
.af83		05 70		ora $70				ora 	NSMantissa3
.af85		d0 10		bne $af97			bne 	_MCRange
.af87		a5 58		lda $58				lda 	NSMantissa0
.af89		9d 00 df	sta $df00,x			sta 	$DF00,x
.af8c		a5 60		lda $60				lda 	NSMantissa1
.af8e		9d 01 df	sta $df01,x			sta 	$DF01,x
.af91		a5 68		lda $68				lda 	NSMantissa2
.af93		9d 02 df	sta $df02,x			sta 	$DF02,x
.af96		60		rts				rts
.af97						_MCRange:
.af97		a9 04		lda #$04		lda	#4
.af99		4c 9d 93	jmp $939d		jmp	ErrorHandler
.af9c						MCEvalCopyData16:
.af9c		da		phx				phx
.af9d		a2 00		ldx #$00			ldx 	#0
.af9f		20 7d a2	jsr $a27d			jsr 	Evaluate16BitInteger
.afa2		fa		plx				plx
.afa3						MCCopyData16:
.afa3		a5 58		lda $58				lda 	NSMantissa0
.afa5		9d 00 df	sta $df00,x			sta 	$DF00,x
.afa8		a5 60		lda $60				lda 	NSMantissa1
.afaa		9d 01 df	sta $df01,x			sta 	$DF01,x
.afad		60		rts				rts
.afae						MCPosition:
.afae		a2 00		ldx #$00			ldx 	#0 							; get start address.
.afb0		b1 30		lda ($30),y			lda 	(codePtr),y
.afb2		c9 b9		cmp #$b9			cmp 	#KWD_AT
.afb4		f0 04		beq $afba			beq 	_MCPAt
.afb6		20 6a a2	jsr $a26a			jsr 	EvaluateInteger
.afb9		60		rts				rts
.afba						_MCPAt:
.afba		c8		iny				iny
.afbb		20 98 a2	jsr $a298			jsr 	Evaluate8BitInteger 		; X position
.afbe		48		pha				pha
.afbf		20 8c 93	jsr $938c			jsr 	CheckComma
.afc2		e8		inx				inx
.afc3		20 98 a2	jsr $a298			jsr 	Evaluate8BitInteger 		; Y position
.afc6		ca		dex				dex
.afc7		85 60		sta $60				sta 	NSMantissa1 				; put Y x 64 in Mantissa.0
.afc9		64 58		stz $58				stz 	NSMantissa0
.afcb		64 68		stz $68				stz 	NSMantissa2
.afcd		64 70		stz $70				stz 	NSMantissa3
.afcf		46 60		lsr $60				lsr 	NSMantissa1
.afd1		66 58		ror $58				ror 	NSMantissa0
.afd3		46 60		lsr $60				lsr 	NSMantissa1
.afd5		66 58		ror $58				ror 	NSMantissa0
.afd7		68		pla				pla
.afd8		18		clc				clc
.afd9		65 58		adc $58				adc 	NSMantissa0 				; add X, Y * 256 and the
.afdb		85 58		sta $58				sta 	NSMantissa0
.afdd		a5 60		lda $60				lda 	NSMantissa1
.afdf		65 59		adc $59				adc 	NSMantissa0+1
.afe1		85 60		sta $60				sta 	NSMantissa1
.afe3		90 02		bcc $afe7			bcc 	_MCPNoCarry
.afe5		e6 68		inc $68				inc 	NSMantissa2
.afe7						_MCPNoCarry:
.afe7		ad db 07	lda $07db			lda 	gxBasePage
.afea		85 69		sta $69				sta 	NSMantissa2+1
.afec		64 59		stz $59				stz 	NSMantissa0+1
.afee		64 61		stz $61				stz 	NSMantissa1+1
.aff0		64 71		stz $71				stz 	NSMantissa3+1
.aff2		a2 01		ldx #$01			ldx 	#1
.aff4		20 16 a3	jsr $a316			jsr 	NSMShiftRight
.aff7		20 16 a3	jsr $a316			jsr 	NSMShiftRight
.affa		20 16 a3	jsr $a316			jsr 	NSMShiftRight
.affd		a2 00		ldx #$00			ldx 	#0
.afff		20 9d 96	jsr $969d			jsr 	AddTopTwoStack
.b002		60		rts				rts
.07bc						DMAControlByte:
>07bc								.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/kernel/commands/mouse.asm

.b003						MouseStatus:
.b003		a9 ff		lda #$ff	        lda     #255
.b005		80 02		bra $b009	        bra     MouseCommand
.b007						MouseDeltaStatus:
.b007		a9 00		lda #$00	        lda     #0
.b009						MouseCommand:
.b009		8d 5f 06	sta $065f	        sta     CMDMouseFlag
.b00c		a2 00		ldx #$00	        ldx     #0
.b00e						_MouseCommandLoop:
.b00e		da		phx		        phx                                 ; save slot.
.b00f		20 a5 98	jsr $98a5	        jsr     EvaluateExpressionAt0       ; evaluate a reference.
.b012		a5 50		lda $50		        lda     NSStatus                    ; check it's a reference.
.b014		c9 20		cmp #$20	        cmp     #NSBIsReference
.b016		d0 60		bne $b078	        bne     _MouseNotRef
.b018		b1 30		lda ($30),y			lda 	(codePtr),y
.b01a		c9 2c		cmp #$2c	        cmp     #KWD_COMMA
.b01c		d0 01		bne $b01f	        bne     _MouseNoSkipComma
.b01e		c8		iny		        iny
.b01f						_MouseNoSkipComma:
.b01f		fa		plx		        plx                                 ; restore X
.b020		5a		phy		        phy                                 ; save Y
.b021		a5 58		lda $58		        lda     NSMantissa0                 ; copy address to zTemp0
.b023		85 36		sta $36		        sta     zTemp0
.b025		a5 60		lda $60		        lda     NSMantissa1
.b027		85 37		sta $37		        sta     zTemp0+1
.b029		a0 04		ldy #$04	        ldy     #4                          ; set exponent, m3, m2 , m1 , m0
.b02b		a9 00		lda #$00	        lda     #0
.b02d		91 36		sta ($36),y	        sta     (zTemp0),y                  ; exponent
.b02f		88		dey		        dey
.b030		91 36		sta ($36),y	        sta     (zTemp0),y                  ; m3
.b032		88		dey		        dey
.b033		91 36		sta ($36),y	        sta     (zTemp0),y                  ; m2
.b035		88		dey		        dey
.b036		2c 5f 06	bit $065f	        bit     CMDMouseFlag                ; mouse or mdelta command
.b039		30 12		bmi $b04d	        bmi     _MouseMouseCommand
.b03b						_MouseMDeltaCommand:
.b03b		bd 82 06	lda $0682,x	        lda     MouseDeltaX,x
.b03e		92 36		sta ($36)	        sta     (zTemp0)                    ; m0
.b040		bd 83 06	lda $0683,x	        lda     MouseDeltaX+1,x
.b043		91 36		sta ($36),y	        sta     (zTemp0),y                  ; m1
.b045		9e 82 06	stz $0682,x	        stz     MouseDeltaX,x               ; clear entry in current table
.b048		9e 83 06	stz $0683,x	        stz     MouseDeltaX+1,x
.b04b		80 0a		bra $b057	        bra     _MouseProcessData
.b04d						_MouseMouseCommand:
.b04d		bd 8e 06	lda $068e,x	        lda     MousePosX,x
.b050		92 36		sta ($36)	        sta     (zTemp0)                    ; m0
.b052		bd 8f 06	lda $068f,x	        lda     MousePosX+1,x
.b055		91 36		sta ($36),y	        sta     (zTemp0),y                  ; m1
.b057						_MouseProcessData:
.b057		b1 36		lda ($36),y	        lda     (zTemp0),y
.b059		10 15		bpl $b070	        bpl     _MouseDataPos               ; signed 16 bit value, so fix up if -ve.
.b05b		38		sec		        sec                                 ; negate the mantissa 2 bytes
.b05c		a9 00		lda #$00	        lda     #0
.b05e		f2 36		sbc ($36)	        sbc     (zTemp0)
.b060		92 36		sta ($36)	        sta     (zTemp0)
.b062		a9 00		lda #$00	        lda     #0
.b064		f1 36		sbc ($36),y	        sbc     (zTemp0),y
.b066		91 36		sta ($36),y	        sta     (zTemp0),y
.b068		a0 03		ldy #$03	        ldy     #3
.b06a		b1 36		lda ($36),y	        lda     (zTemp0),y                  ; set upper bit of mantissa
.b06c		09 80		ora #$80	        ora     #$80
.b06e		91 36		sta ($36),y	        sta     (zTemp0),y
.b070						_MouseDataPos:
.b070		7a		ply		        ply                                 ; restore Y.
.b071		e8		inx		        inx                                 ; next entry
.b072		e8		inx		        inx
.b073		e0 0c		cpx #$0c	        cpx     #6*2                        ; done 6 reads to variables.
.b075		d0 97		bne $b00e	        bne     _MouseCommandLoop
.b077		60		rts		        rts
.b078						_MouseNotRef:
.b078		a9 07		lda #$07		lda	#7
.b07a		4c 9d 93	jmp $939d		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/kernel/commands/setdatetime.asm

.b07d						CommandSetDate:
.b07d		a9 03		lda #$03			lda 	#3
.b07f		80 02		bra $b083			bra 	CSDTMain
.b081						CommandSetTime:
.b081		a9 00		lda #$00			lda 	#0
.b083						CSDTMain:
.b083		48		pha				pha 								; save table offsets 0 or 3
.b084		a2 00		ldx #$00			ldx 	#0 							; input 3 values.
.b086		20 98 a2	jsr $a298			jsr 	Evaluate8BitInteger
.b089		20 8c 93	jsr $938c			jsr 	CheckComma
.b08c		e8		inx				inx
.b08d		20 98 a2	jsr $a298			jsr 	Evaluate8BitInteger
.b090		20 8c 93	jsr $938c			jsr 	CheckComma
.b093		e8		inx				inx
.b094		20 98 a2	jsr $a298			jsr 	Evaluate8BitInteger
.b097		68		pla				pla 								; table offset in Y, saving Y
.b098		5a		phy				phy
.b099		a8		tay				tay
.b09a		a2 00		ldx #$00			ldx 	#0 							; first number
.b09c		a5 01		lda $01				lda 	1 							; save I/O page, switch to zero
.b09e		48		pha				pha
.b09f		64 01		stz $01				stz 	1
.b0a1						_CSDTCopy:
.b0a1		b5 58		lda $58,x			lda 	NSMantissa0,x 				; get first number
.b0a3		d9 e5 b0	cmp $b0e5,y			cmp 	RTCWMinValues,y 			; check range
.b0a6		90 1b		bcc $b0c3			bcc 	_CSDTRange
.b0a8		d9 eb b0	cmp $b0eb,y			cmp 	RTCWMaxValues,y
.b0ab		b0 16		bcs $b0c3			bcs 	_CSDTRange
.b0ad		20 c8 b0	jsr $b0c8			jsr 	CSDTDecimalToBCD
.b0b0		da		phx				phx 								; save X
.b0b1		be df b0	ldx $b0df,y			ldx 	RTCWOffset,y 				; offset in RTC in X
.b0b4		9d 90 d6	sta $d690,x			sta 	$D690,x 					; write to RTC
.b0b7		fa		plx				plx 								; restore X
.b0b8		e8		inx				inx 								; next number
.b0b9		c8		iny				iny 								; next table entries
.b0ba		e0 03		cpx #$03			cpx 	#3 							; until done all 3.
.b0bc		d0 e3		bne $b0a1			bne 	_CSDTCopy
.b0be		68		pla				pla 								; restore I/O space
.b0bf		85 01		sta $01				sta 	1
.b0c1		7a		ply				ply 								; restore code pos and exit.
.b0c2		60		rts				rts
.b0c3						_CSDTRange:
.b0c3		a9 04		lda #$04		lda	#4
.b0c5		4c 9d 93	jmp $939d		jmp	ErrorHandler
.b0c8						CSDTDecimalToBCD:
.b0c8		da		phx				phx 								; 10 count in X
.b0c9		a2 00		ldx #$00			ldx 	#0
.b0cb						_CSDTDBLoop:
.b0cb		c9 0a		cmp #$0a			cmp 	#10 						; < 10 evaluate result.
.b0cd		90 05		bcc $b0d4			bcc 	_CSDTDBExit
.b0cf		e9 0a		sbc #$0a			sbc 	#10 						; 10 from value
.b0d1		e8		inx				inx 								; one more 10s.
.b0d2		80 f7		bra $b0cb			bra 	_CSDTDBLoop
.b0d4						_CSDTDBExit:
.b0d4		85 36		sta $36				sta 	zTemp0 						; units
.b0d6		8a		txa				txa 								; 10s x 16
.b0d7		0a		asl a				asl 	a
.b0d8		0a		asl a				asl 	a
.b0d9		0a		asl a				asl 	a
.b0da		0a		asl a				asl 	a
.b0db		05 36		ora $36				ora 	zTemp0 						; BCD result and exit
.b0dd		fa		plx				plx
.b0de		60		rts				rts
.b0df						RTCWOffset:
>b0df		04 02 00 06 09 0a				.byte 	4,2,0,6,9,10
.b0e5						RTCWMinValues:
>b0e5		00 00 00 01 01 00				.byte 	0,0,0,1,1,0
.b0eb						RTCWMaxValues:
>b0eb		18 3c 3c 20 0d 64				.byte 	24,60,60,32,13,100

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/kernel/commands/timer.asm

.b0f1						UnaryTimer:
.b0f1		fa		plx				plx
.b0f2		20 84 93	jsr $9384			jsr 	CheckRightBracket
.b0f5						TimerToStackX:
.b0f5		20 fd a2	jsr $a2fd			jsr 	NSMSetZero 					; zero result
.b0f8		64 01		stz $01				stz 	1 							; access I/O
.b0fa		ad 59 d6	lda $d659			lda 	$D659 						; copy timer in
.b0fd		95 58		sta $58,x			sta 	NSMantissa0,x
.b0ff		ad 5a d6	lda $d65a			lda 	$D65A
.b102		95 60		sta $60,x			sta 	NSMantissa1,x
.b104		ad 5b d6	lda $d65b			lda 	$D65B
.b107		95 68		sta $68,x			sta 	NSMantissa2,x
.b109		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/kernel/functions/getdatetime.asm

.b10a						UnaryGetTime:
.b10a		a9 00		lda #$00			lda 	#0
.b10c		80 02		bra $b110			bra 	UGDTMain
.b10e						UnaryGetDate:
.b10e		a9 03		lda #$03			lda 	#3
.b110						UGDTMain:
.b110		fa		plx				plx 								; get stack position back
.b111		48		pha				pha 								; save table offset
.b112		20 98 a2	jsr $a298			jsr 	Evaluate8BitInteger			; ignored parameter
.b115		20 84 93	jsr $9384			jsr 	CheckRightBracket 			; closing )
.b118		68		pla				pla 								; table offset in A
.b119		5a		phy				phy 								; saving Y
.b11a		a8		tay				tay 								; table offset in Y
.b11b		a9 08		lda #$08			lda 	#8							; allocate space for 8 chars DD:MM:YY
.b11d		20 11 b4	jsr $b411			jsr 	StringTempAllocate
.b120		a5 01		lda $01				lda 	1 							; save I/O table and switch to I/O page 0
.b122		48		pha				pha
.b123		64 01		stz $01				stz 	1
.b125		20 38 b1	jsr $b138			jsr 	UGDTDigit 					; do XX:YY:ZZ
.b128		20 33 b1	jsr $b133			jsr 	UGDTColonDigit
.b12b		20 33 b1	jsr $b133			jsr 	UGDTColonDigit
.b12e		68		pla				pla 								; restore I/O select
.b12f		85 01		sta $01				sta 	1
.b131		7a		ply				ply  								; restore code position
.b132		60		rts				rts
.b133						UGDTColonDigit:
.b133		a9 3a		lda #$3a			lda 	#':'
.b135		20 4a b4	jsr $b44a			jsr 	StringTempWrite
.b138						UGDTDigit:
.b138		da		phx				phx 								; save X
.b139		b9 58 b1	lda $b158,y			lda 	RTCROffset,y 				; get offset in RTC register
.b13c		aa		tax				tax
.b13d		bd 90 d6	lda $d690,x			lda 	$D690,x 					; read RTC register
.b140		39 5e b1	and $b15e,y			and 	RTCRMask,y 					; and with Mask.
.b143		fa		plx				plx
.b144		48		pha				pha 								; output in BCD
.b145		4a		lsr a				lsr 	a
.b146		4a		lsr a				lsr 	a
.b147		4a		lsr a				lsr 	a
.b148		4a		lsr a				lsr 	a
.b149		09 30		ora #$30			ora 	#48
.b14b		20 4a b4	jsr $b44a			jsr 	StringTempWrite
.b14e		68		pla				pla
.b14f		29 0f		and #$0f			and 	#15
.b151		09 30		ora #$30			ora 	#48
.b153		20 4a b4	jsr $b44a			jsr 	StringTempWrite
.b156		c8		iny				iny
.b157		60		rts				rts
.b158						RTCROffset:
>b158		04 02 00 06 09 0a				.byte 	4,2,0,6,9,10
.b15e						RTCRMask:
>b15e		3f 7f 7f 3f 1f 7f				.byte 	$3F,$7F,$7F,$3F,$1F,$7F

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/kernel/functions/getinkey.asm

.b164						AscGet:
.b164		fa		plx				plx 								; restore stack pos
.b165						AscGet2:
.b165		20 84 93	jsr $9384			jsr 	CheckRightBracket
.b168		20 c0 81	jsr $81c0			jsr 	KNLGetSingleCharacter
.b16b		20 ff a2	jsr $a2ff			jsr 	NSMSetByte
.b16e		60		rts				rts
.b16f						_AGBreak:
.b16f		a9 01		lda #$01		lda	#1
.b171		4c 9d 93	jmp $939d		jmp	ErrorHandler
.b174						AscInkey:
.b174		fa		plx				plx 								; restore stack pos
.b175						AscInkey2:
.b175		20 84 93	jsr $9384			jsr 	CheckRightBracket
.b178		20 9e 81	jsr $819e			jsr 	KNLGetKeyPressed
.b17b		20 ff a2	jsr $a2ff			jsr 	NSMSetByte
.b17e		60		rts				rts
.b17f						ChrGet:
.b17f		fa		plx				plx
.b180		20 65 b1	jsr $b165			jsr 	AscGet2
.b183		4c 8a b1	jmp $b18a			jmp 	GetInkeyToString
.b186						ChrInkey:
.b186		fa		plx				plx
.b187		20 75 b1	jsr $b175			jsr 	AscInkey2
.b18a						GetInkeyToString:
.b18a		c9 00		cmp #$00			cmp 	#0 							; if zero, return ""
.b18c		f0 0b		beq $b199			beq 	_GKISNull
.b18e		48		pha				pha
.b18f		a9 01		lda #$01			lda 	#1 							; allocate space for one char
.b191		20 11 b4	jsr $b411			jsr 	StringTempAllocate
.b194		68		pla				pla 								; write number to it
.b195		20 4a b4	jsr $b44a			jsr 	StringTempWrite
.b198		60		rts				rts
.b199						_GKISNull:
.b199		a9 00		lda #$00			lda 	#0
.b19b		20 11 b4	jsr $b411			jsr 	StringTempAllocate
.b19e		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/kernel/functions/keydown.asm

.b19f						KeyDown:
.b19f		20 40 81	jsr $8140			jsr 	ProcessEvents 				; process outstanding events.
.b1a2		fa		plx				plx 								; restore stack pos
.b1a3		20 98 a2	jsr $a298			jsr 	Evaluate8BitInteger 		; key to check.
.b1a6		48		pha				pha 								; check right bracket.
.b1a7		20 84 93	jsr $9384			jsr 	CheckRightBracket
.b1aa		68		pla				pla
.b1ab		20 ac 83	jsr $83ac			jsr 	KeyboardConvertXA 			; get offset and mask.
.b1ae		3d 60 06	and $0660,x			and 	KeyStatus,x 				; is it zero ?
.b1b1		f0 03		beq $b1b6			beq 	_KeyUp
.b1b3		4c 10 94	jmp $9410			jmp 	ReturnTrue
.b1b6		4c 1b 94	jmp $941b	_KeyUp:	jmp 	ReturnFalse

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/kernel/functions/rnd.asm

.b1b9						Unary_Random:
.b1b9		fa		plx				plx
.b1ba		20 0a b2	jsr $b20a			jsr 	URCopyToMantissa  			; put random # in mantissa
.b1bd		b1 30		lda ($30),y			lda 	(codePtr),y
.b1bf		c9 29		cmp #$29			cmp 	#KWD_RPAREN
.b1c1		f0 08		beq $b1cb			beq 	_URNoModulus 				; then we return a random 30 bit number.
.b1c3		e8		inx				inx
.b1c4		20 7d a2	jsr $a27d			jsr 	Evaluate16BitInteger 		; put modulus value in +1
.b1c7		ca		dex				dex
.b1c8		20 62 95	jsr $9562			jsr 	IntegerModulusNoCheck 		; calculate modulus, so now 0 .. n-1
.b1cb						_URNoModulus:
.b1cb		74 50		stz $50,x			stz 	NSStatus,x 					; make it an integer positive
.b1cd		74 78		stz $78,x			stz 	NSExponent,x
.b1cf		20 84 93	jsr $9384			jsr 	CheckRightBracket
.b1d2		60		rts				rts
.b1d3						Unary_Rnd:
.b1d3		fa		plx				plx
.b1d4		20 4b a2	jsr $a24b			jsr 	EvaluateNumber 				; number to use.
.b1d7		20 84 93	jsr $9384			jsr 	CheckRightBracket 			; closing bracket
.b1da		b5 50		lda $50,x			lda 	NSStatus,x 					; if -ve, then seed using parameter
.b1dc		10 20		bpl $b1fe			bpl 	_URDontSeed
.b1de		a5 01		lda $01				lda 	1 							; switch to page 0
.b1e0		48		pha				pha
.b1e1		64 01		stz $01				stz 	1
.b1e3		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy - value to seed butchering it.
.b1e5		49 17		eor #$17			eor 	#$17
.b1e7		8d a4 d6	sta $d6a4			sta 	$D6A4
.b1ea		b5 60		lda $60,x			lda 	NSMantissa1,x
.b1ec		49 a5		eor #$a5			eor 	#$A5
.b1ee		8d a5 d6	sta $d6a5			sta 	$D6A5
.b1f1		a9 03		lda #$03			lda 	#3 							; set bit 1 high/low to set seed.
.b1f3		8d a6 d6	sta $d6a6			sta 	$D6A6
.b1f6		a9 01		lda #$01			lda 	#1
.b1f8		8d a6 d6	sta $d6a6			sta 	$D6A6
.b1fb		68		pla				pla
.b1fc		85 01		sta $01				sta 	1
.b1fe						_URDontSeed:
.b1fe		20 0a b2	jsr $b20a			jsr 	URCopyToMantissa 			; copy into mantissa
.b201		a9 e2		lda #$e2			lda 	#-30 						; force into 0-1 range
.b203		95 78		sta $78,x			sta 	NSExponent,x
.b205		a9 08		lda #$08			lda 	#NSTFloat
.b207		95 50		sta $50,x			sta 	NSStatus,x 					; positive float
.b209		60		rts				rts
.b20a						URCopyToMantissa:
.b20a		a5 01		lda $01				lda 	1 							; switch to I/O page 1
.b20c		48		pha				pha
.b20d		64 01		stz $01				stz 	1
.b20f		a9 01		lda #$01			lda 	#1
.b211		8d a6 d6	sta $d6a6			sta 	$D6A6 						; enable LFSR
.b214		ad a4 d6	lda $d6a4			lda 	$D6A4
.b217		95 58		sta $58,x			sta 	NSMantissa0,x
.b219		ad a5 d6	lda $d6a5			lda 	$D6A5
.b21c		95 60		sta $60,x			sta 	NSMantissa1,x
.b21e		ad a4 d6	lda $d6a4			lda 	$D6A4
.b221		95 68		sta $68,x			sta 	NSMantissa2,x
.b223		ad a5 d6	lda $d6a5			lda 	$D6A5
.b226		29 3f		and #$3f			and 	#$3F 						; make legal mantissa
.b228		95 70		sta $70,x			sta 	NSMantissa3,x
.b22a		68		pla				pla
.b22b		85 01		sta $01				sta 	1
.b22d		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/sound/effects.asm

.b22e						PingCommand:
.b22e		5a		phy				phy 								; save pos
.b22f		a9 01		lda #$01			lda 	#1 						; push channel.
.b231		48		pha				pha
.b232		a9 c8		lda #$c8			lda 	#200 						; pitch LSB
.b234		a2 06		ldx #$06			ldx 	#6 						; length
.b236		a0 00		ldy #$00			ldy 	#0 						; slide LSB
.b238		80 24		bra $b25e			bra 	SoundEffectCommand
.b23a						ZapCommand:
.b23a		5a		phy				phy 								; save pos
.b23b		a9 01		lda #$01			lda 	#1 						; push channel.
.b23d		48		pha				pha
.b23e		a9 ff		lda #$ff			lda 	#255 						; pitch LSB
.b240		a2 0a		ldx #$0a			ldx 	#10 						; length
.b242		a0 0a		ldy #$0a			ldy 	#10 						; slide LSB
.b244		80 18		bra $b25e			bra 	SoundEffectCommand
.b246						ShootCommand:
.b246		5a		phy				phy 								; save pos
.b247		a9 03		lda #$03			lda 	#3 						; push channel.
.b249		48		pha				pha
.b24a		a9 20		lda #$20			lda 	#32 						; pitch LSB
.b24c		a2 04		ldx #$04			ldx 	#4 						; length
.b24e		a0 00		ldy #$00			ldy 	#0 						; slide LSB
.b250		80 0c		bra $b25e			bra 	SoundEffectCommand
.b252						Explode:
.b252		5a		phy				phy 								; save pos
.b253		a9 03		lda #$03			lda 	#3 						; push channel.
.b255		48		pha				pha
.b256		a9 50		lda #$50			lda 	#80 						; pitch LSB
.b258		a2 0a		ldx #$0a			ldx 	#10 						; length
.b25a		a0 00		ldy #$00			ldy 	#0 						; slide LSB
.b25c		80 00		bra $b25e			bra 	SoundEffectCommand
.b25e						SoundEffectCommand:
.b25e		8d bd 07	sta $07bd			sta 	SoundCommandBlock 			; set up the command block in sound.asm
.b261		9c be 07	stz $07be			stz 	SoundCommandBlock+1
.b264		a9 0f		lda #$0f			lda 	#15
.b266		8d bf 07	sta $07bf			sta 	SoundCommandBlock+2
.b269		8e c0 07	stx $07c0			stx 	SoundCommandBlock+3
.b26c		8c c1 07	sty $07c1			sty 	SoundCommandBlock+4
.b26f		9c c2 07	stz $07c2			stz 	SoundCommandBlock+5
.b272		68		pla				pla
.b273		09 10		ora #$10			ora 	#$10  						; execute command $11
.b275		a2 bd		ldx #$bd			ldx 	#(SoundCommandBlock & $FF)
.b277		a0 07		ldy #$07			ldy 	#(SoundCommandBlock >> 8)
.b279		20 6b 80	jsr $806b			jsr 	SNDCommand
.b27c		7a		ply				ply
.b27d		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/sound/playing.asm

.b27e						UnaryPlaying:
.b27e		fa		plx				plx
.b27f		20 98 a2	jsr $a298			jsr 	Evaluate8BitInteger 		; get channel #
.b282		48		pha				pha
.b283		20 84 93	jsr $9384			jsr		CheckRightBracket
.b286		68		pla				pla
.b287		c9 04		cmp #$04			cmp 	#4
.b289		b0 0c		bcs $b297			bcs 	_UPNotPlaying
.b28b		09 20		ora #$20			ora 	#$20 						; query playing ?
.b28d		20 6b 80	jsr $806b			jsr 	SNDCommand
.b290		c9 00		cmp #$00			cmp 	#0
.b292		f0 03		beq $b297			beq 	_UPNotPlaying
.b294		4c 10 94	jmp $9410			jmp 	ReturnTrue
.b297						_UPNotPlaying:
.b297		4c 1b 94	jmp $941b			jmp 	ReturnFalse

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/sound/sound.asm

.b29a						SoundCommand:
.b29a		b1 30		lda ($30),y			lda 	(codePtr),y
.b29c		c9 cc		cmp #$cc			cmp 	#KWD_OFF 					; SOUND OFF ?
.b29e		d0 09		bne $b2a9			bne 	_SNDMain
.b2a0		c8		iny				iny 								; skip OFF
.b2a1		a9 3f		lda #$3f			lda 	#$3F 						; call command $3F (silence)
.b2a3		5a		phy				phy
.b2a4		20 6b 80	jsr $806b			jsr 	SNDCommand
.b2a7		7a		ply				ply
.b2a8		60		rts				rts
.b2a9						_SNDMain:
.b2a9		a2 00		ldx #$00			ldx 	#0
.b2ab		20 98 a2	jsr $a298			jsr 	Evaluate8BitInteger 		; channel
.b2ae		c9 04		cmp #$04			cmp 	#4 							; must be 0-3
.b2b0		b0 4b		bcs $b2fd			bcs 	_SndError
.b2b2		e8		inx				inx 								; do the rest in slot 1.
.b2b3		20 8c 93	jsr $938c			jsr 	CheckComma
.b2b6		20 7d a2	jsr $a27d			jsr 	Evaluate16BitInteger 		; Pitch
.b2b9		b5 60		lda $60,x			lda 	NSMantissa1,x 				; must be 10 bit
.b2bb		c9 10		cmp #$10			cmp 	#16
.b2bd		b0 3e		bcs $b2fd			bcs 	_SndError
.b2bf		8d be 07	sta $07be			sta 	SoundCommandBlock+1 		; Pitch (2 bytes + 0)
.b2c2		b5 58		lda $58,x			lda 	NSMantissa0,x
.b2c4		8d bd 07	sta $07bd			sta 	SoundCommandBlock
.b2c7		20 8c 93	jsr $938c			jsr 	CheckComma
.b2ca		20 98 a2	jsr $a298			jsr 	Evaluate8BitInteger 		; Length (1 byte + 3)
.b2cd		8d c0 07	sta $07c0			sta 	SoundCommandBlock+3
.b2d0		a9 0f		lda #$0f			lda 	#15
.b2d2		8d bf 07	sta $07bf			sta 	SoundCommandBlock+2 		; Volume (1 byte + 2)
.b2d5		9c c1 07	stz $07c1			stz 	SoundCommandBlock+4 		; default slide (2 bytes +4)
.b2d8		9c c2 07	stz $07c2			stz 	SoundCommandBlock+5
.b2db		b1 30		lda ($30),y			lda 	(codePtr),y
.b2dd		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.b2df		d0 0e		bne $b2ef			bne 	_SNDPlay
.b2e1		c8		iny				iny
.b2e2		20 87 a2	jsr $a287			jsr 	Evaluate16BitIntegerSigned 	; Slide
.b2e5		b5 58		lda $58,x			lda 	NSMantissa0,x 				; Slide (2 bytes + 4)
.b2e7		8d c1 07	sta $07c1			sta 	SoundCommandBlock+4
.b2ea		b5 60		lda $60,x			lda 	NSMantissa1,x
.b2ec		8d c2 07	sta $07c2			sta 	SoundCommandBlock+5
.b2ef						_SNDPlay:
.b2ef		5a		phy				phy
.b2f0		a5 58		lda $58				lda 	NSMantissa0 				; channel.
.b2f2		09 10		ora #$10			ora 	#$10 						; 1x = Queue sound
.b2f4		a2 bd		ldx #$bd			ldx 	#(SoundCommandBlock & $FF)
.b2f6		a0 07		ldy #$07			ldy 	#(SoundCommandBlock >> 8)
.b2f8		20 6b 80	jsr $806b			jsr 	SNDCommand
.b2fb		7a		ply				ply
.b2fc		60		rts				rts
.b2fd						_SndError:
.b2fd		4c 7a a4	jmp $a47a			jmp 	RangeError
.07bd						SoundCommandBlock:
>07bd								.fill 	6

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/bytes.asm

.b300						StackPushByte:
.b300		48		pha				pha 								; save byte on stack
.b301		a5 34		lda $34				lda 	basicStack 					; decrement basic stack pointer
.b303		d0 08		bne $b30d			bne 	_SPBNoBorrow
.b305		c6 35		dec $35				dec 	basicStack+1 				; borrow
.b307		a5 35		lda $35				lda 	basicStack+1 				; check range.
.b309		c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.b30b		90 06		bcc $b313			bcc 	_SPBMemory
.b30d						_SPBNoBorrow:
.b30d		c6 34		dec $34				dec 	basicStack
.b30f		68		pla				pla 								; get back and write
.b310		92 34		sta ($34)			sta 	(basicStack)
.b312		60		rts				rts
.b313						_SPBMemory:
.b313		a9 12		lda #$12		lda	#18
.b315		4c 9d 93	jmp $939d		jmp	ErrorHandler
.b318						StackPopByte:
.b318		b2 34		lda ($34)			lda 	(basicStack) 				; bump the stack pointer.
.b31a		e6 34		inc $34				inc 	basicStack
.b31c		d0 02		bne $b320			bne 	_SPBNoCarry
.b31e		e6 35		inc $35				inc 	basicStack+1
.b320						_SPBNoCarry:
.b320		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/frames.asm

.b321						StackOpen:
.b321		48		pha				pha 								; save frame byte
.b322		29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.b324		0a		asl a				asl 	a 							; claim twice this for storage
.b325		49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.b327		38		sec				sec 								; so basically subtracting from
.b328		65 34		adc $34				adc 	basicStack 	 				; basicStack
.b32a		85 34		sta $34				sta 	basicStack
.b32c		b0 09		bcs $b337			bcs 	_SONoBorrow
>b32e		db						.byte 	$DB 						; causes a break in the emulator
.b32f		c6 35		dec $35				dec 	basicStack+1
.b331		a5 35		lda $35				lda 	basicStack+1 				; have we reached stack overflow
.b333		c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.b335		90 04		bcc $b33b			bcc 	_SOMemory
.b337						_SONoBorrow:
.b337		68		pla				pla 								; get marker back and write at TOS
.b338		92 34		sta ($34)			sta 	(basicStack)
.b33a		60		rts				rts
.b33b						_SOMemory:
.b33b		a9 12		lda #$12		lda	#18
.b33d		4c 9d 93	jmp $939d		jmp	ErrorHandler
.b340						StackClose:
.b340		b2 34		lda ($34)			lda 	(basicStack) 				; get TOS marker
.b342		29 0f		and #$0f			and 	#$0F 						; bytes to add back
.b344		0a		asl a				asl 	a 							; claim twice this.
.b345		65 34		adc $34				adc 	basicStack 					; add to the stack pointer.
.b347		85 34		sta $34				sta 	basicStack
.b349		90 02		bcc $b34d			bcc 	_SCExit
.b34b		e6 35		inc $35				inc 	basicStack+1
.b34d						_SCExit:
.b34d		60		rts				rts
.b34e						StackCheckFrame:
.b34e		48		pha				pha
.b34f						_StackRemoveLocals:
.b34f		b2 34		lda ($34)			lda 	(basicStack) 				; check for local, keep popping them
.b351		c9 03		cmp #$03			cmp 	#STK_LOCALS+1 				; is the frame a local ? S or N are 1/0
.b353		b0 05		bcs $b35a			bcs 	_SCNoLocal
.b355		20 96 8d	jsr $8d96			jsr 	LocalPopValue 				; restore the local value
.b358		80 f5		bra $b34f			bra 	_StackRemoveLocals 			; gr round again
.b35a						_SCNoLocal:
.b35a		68		pla				pla 								; get the frame check.
.b35b		52 34		eor ($34)			eor 	(basicStack) 				; xor with toS marker
.b35d		29 f0		and #$f0			and 	#$F0 						; check type bits
.b35f		d0 01		bne $b362			bne 	_SCFError 					; different, we have structures mixed up
.b361		60		rts				rts
.b362						_SCFError:
.b362		8a		txa				txa 								; report error X
.b363		4c 9d 93	jmp $939d			jmp 	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/location.asm

.b366						STKSaveCodePosition:
.b366		5a		phy				phy
.b367		98		tya				tya 								; save Y
.b368		a0 05		ldy #$05			ldy 	#5
.b36a		91 34		sta ($34),y			sta 	(basicStack),y
.b36c		88		dey				dey 								; save Code Pointer
.b36d						_STKSaveLoop:
.b36d		b9 2f 00	lda $002f,y			lda 	safePtr-1,y 				; allows us to access the pointer w/out issues.
.b370		91 34		sta ($34),y			sta 	(basicStack),y
.b372		88		dey				dey
.b373		d0 f8		bne $b36d			bne 	_STKSaveLoop
.b375		7a		ply				ply
.b376		60		rts				rts
.b377						STKLoadCodePosition:
.b377		a0 01		ldy #$01			ldy 	#1 							; load code pointer back
.b379						_STKLoadLoop:
.b379		b1 34		lda ($34),y			lda 	(basicStack),y
.b37b		99 2f 00	sta $002f,y			sta 	safePtr-1,y
.b37e		c8		iny				iny
.b37f		c0 05		cpy #$05			cpy 	#5
.b381		d0 f6		bne $b379			bne 	_STKLoadLoop
.b383		b1 34		lda ($34),y			lda 	(basicStack),y 				; get Y offset
.b385		a8		tay				tay
.b386		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/setup.asm

.b387						StackReset:
.b387		a9 ff		lda #$ff			lda 	#((BasicStackBase+BasicStackSize-1) & $FF)
.b389		85 34		sta $34				sta 	0+basicStack
.b38b		a9 0f		lda #$0f			lda 	#((BasicStackBase+BasicStackSize-1) >> 8)
.b38d		85 35		sta $35				sta 	1+basicStack
.b38f		a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.b391		92 34		sta ($34)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.b393		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/concrete.asm

.b394						StringConcrete:
.b394		5a		phy				phy 								; save position on stack
.b395		20 dd 9e	jsr $9edd			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.b398		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy target string to zTemp1
.b39a		85 38		sta $38				sta 	zTemp1
.b39c		b5 60		lda $60,x			lda 	NSMantissa1,x
.b39e		85 39		sta $39				sta 	zTemp1+1
.b3a0		a0 ff		ldy #$ff			ldy 	#$FF	 					; calculate string length
.b3a2						_SALength:
.b3a2		c8		iny				iny
.b3a3		b1 38		lda ($38),y			lda 	(zTemp1),y
.b3a5		d0 fb		bne $b3a2			bne 	_SALength
.b3a7		c0 fd		cpy #$fd			cpy 	#253 						; string too long - cannot concrete.
.b3a9		b0 3d		bcs $b3e8			bcs 	_SALengthError
.b3ab		98		tya				tya 				 				; length of the new string
.b3ac		18		clc				clc
.b3ad		69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.b3af		90 02		bcc $b3b3			bcc 	_SAHaveLength
.b3b1		a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.b3b3						_SAHaveLength:
.b3b3		48		pha				pha 								; save length.
.b3b4		38		sec				sec
.b3b5		49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.b3b7		6d 0a 04	adc $040a			adc 	stringMemory
.b3ba		8d 0a 04	sta $040a			sta 	stringMemory
.b3bd		85 3a		sta $3a				sta 	zTemp2 						; update storage address
.b3bf		95 58		sta $58,x			sta 	NSMantissa0,x 				; update mantissa address
.b3c1		a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.b3c3		6d 0b 04	adc $040b			adc 	stringMemory+1
.b3c6		8d 0b 04	sta $040b			sta 	stringMemory+1
.b3c9		85 3b		sta $3b				sta 	zTemp2+1
.b3cb		95 60		sta $60,x			sta 	NSMantissa1,x
.b3cd		68		pla				pla 								; save length-3 (chars allowed) in first byte
.b3ce		38		sec				sec
.b3cf		e9 03		sbc #$03			sbc 	#3
.b3d1		92 3a		sta ($3a)			sta 	(zTemp2)
.b3d3		a9 00		lda #$00			lda 	#0 							; clear the status byte.
.b3d5		a0 01		ldy #$01			ldy 	#1
.b3d7		91 3a		sta ($3a),y			sta 	(zTemp2),y
.b3d9						_SACopyNewString:
.b3d9		a0 00		ldy #$00			ldy 	#0
.b3db						_SACopyNSLoop:
.b3db		b1 38		lda ($38),y			lda 	(zTemp1),y 					; get character
.b3dd		c8		iny				iny 								; write two on in string storage
.b3de		c8		iny				iny
.b3df		91 3a		sta ($3a),y			sta 	(zTemp2),y
.b3e1		88		dey				dey 								; this makes it one one.
.b3e2		c9 00		cmp #$00			cmp 	#0 							; until EOS copied
.b3e4		d0 f5		bne $b3db			bne 	_SACopyNSLoop
.b3e6		7a		ply				ply
.b3e7		60		rts				rts
.b3e8						_SALengthError:
.b3e8		a9 09		lda #$09		lda	#9
.b3ea		4c 9d 93	jmp $939d		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/stringalloc.asm

.b3ed						StringSystemInitialise:
.b3ed		a9 ff		lda #$ff			lda 	#((EndVariableSpace-1) & $FF)
.b3ef		8d 0a 04	sta $040a			sta 	0+stringMemory
.b3f2		a9 1f		lda #$1f			lda 	#((EndVariableSpace-1) >> 8)
.b3f4		8d 0b 04	sta $040b			sta 	1+stringMemory
.b3f7		9c ff 1f	stz $1fff			stz 	EndVariableSpace-1 			; put a zero at the end, so know end of string memory.
.b3fa		60		rts				rts
.b3fb						StringSpaceInitialise:
.b3fb		20 dd 9e	jsr $9edd			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.b3fe		a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.b400		8d 0c 04	sta $040c			sta 	stringInitialised
.b403		ad 0a 04	lda $040a			lda 	stringMemory 				; allocate 256 bytes for one concreted string
.b406		8d 0d 04	sta $040d			sta 	stringTempPointer 			; so temporary string space is allocated below that.
.b409		ad 0b 04	lda $040b			lda 	stringMemory+1
.b40c		3a		dec a				dec 	a
.b40d		8d 0e 04	sta $040e			sta 	stringTempPointer+1
.b410		60		rts				rts
.b411						StringTempAllocate:
.b411		c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.b413		b0 30		bcs $b445			bcs 	_STALength
.b415		2c 0c 04	bit $040c			bit 	stringInitialised 			; already initialised
.b418		30 05		bmi $b41f			bmi 	_STAAllocate
.b41a		48		pha				pha 								; save value to subtract.
.b41b		20 fb b3	jsr $b3fb			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.b41e		68		pla				pla 								; restore it
.b41f						_STAAllocate:
.b41f		49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.b421		18		clc				clc  								; deliberate allows one more
.b422		6d 0d 04	adc $040d			adc 	stringTempPointer 			; subtract from temp pointer
.b425		8d 0d 04	sta $040d			sta 	stringTempPointer
.b428		95 58		sta $58,x			sta 	NSMantissa0,x 				; address in mantissa
.b42a		85 3c		sta $3c				sta 	zsTemp 						; and zsTemp
.b42c		ad 0e 04	lda $040e			lda 	stringTempPointer+1
.b42f		69 ff		adc #$ff			adc 	#$FF
.b431		8d 0e 04	sta $040e			sta 	stringTempPointer+1
.b434		85 3d		sta $3d				sta 	zsTemp+1
.b436		95 60		sta $60,x			sta 	NSMantissa1,x
.b438		74 68		stz $68,x			stz 	NSMantissa2,x 				; set the typing data and the upper address bytes.
.b43a		74 70		stz $70,x			stz 	NSMantissa3,x
.b43c		a9 10		lda #$10			lda 	#NSTString
.b43e		95 50		sta $50,x			sta 	NSStatus,x
.b440		a9 00		lda #$00			lda 	#0 							; clear the target string
.b442		92 3c		sta ($3c)			sta 	(zsTemp)
.b444		60		rts				rts
.b445						_STALength:
.b445		a9 09		lda #$09		lda	#9
.b447		4c 9d 93	jmp $939d		jmp	ErrorHandler
.b44a						StringTempWrite:
.b44a		48		pha				pha
.b44b		92 3c		sta ($3c)			sta 	(zsTemp) 					; write byte
.b44d		e6 3c		inc $3c				inc 	zsTemp 						; bump pointer
.b44f		d0 02		bne $b453			bne 	_STWNoCarry
.b451		e6 3d		inc $3d				inc 	zsTemp+1
.b453						_STWNoCarry:
.b453		a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.b455		92 3c		sta ($3c)			sta 	(zsTemp)
.b457		68		pla				pla
.b458		60		rts				rts

;******  Return to file: _basic.asm

.b459						StartModuleCode:

;******  Processing file: ../modules/_build/_hardware.module

=1						hardwareIntegrated=1
=0						CONBlack = 0
=1						CONGrey = 1
=2						CONDarkBlue = 2
=3						CONGreen = 3
=4						CONPurple = 4
=5						CONBrown = 5
=6						CONOrange = 6
=7						CONCyan = 7
=8						CONDarkGrey = 8
=9						CONLightGrey = 9
=10						CONLightBlue = 10
=11						CONLightGreen = 11
=12						CONPink = 12
=13						CONRed = 13
=14						CONYellow = 14
=15						CONWhite = 15
=9						CONForeground = CONLightGrey
=2						CONBackground = CONDarkBlue
=9						CLICommandLine = CONLightGrey
=5						CLIFComment = CONBrown
=14						CLIBComment = CONYellow
=13						CLILineNumber = CONRed
=6						CLIToken = CONOrange
=7						CLIConstant = CONCyan
=14						CLIIdentifier = CONYellow
=12						CLIPunctuation = CONPink
=15						CLIData = CONWhite
.c000	a000					Export_EXTPrintNoControl:
.c000	a000	48		pha				pha
.c001	a001	da		phx				phx
.c002	a002	5a		phy				phy
.c003	a003	a6 01		ldx $01				ldx 	1
.c005	a005	da		phx				phx
.c006	a006	ac c4 07	ldy $07c4			ldy 	EXTColumn 					; Y = Row, e.g. points to character.
.c009	a009	80 11		bra $a01c			bra 	PrintCharacterOnly
.c00b	a00b					Export_EXTPrintCharacter:
.c00b	a00b					PAGEDPrintCharacter:
.c00b	a00b	48		pha				pha
.c00c	a00c	da		phx				phx
.c00d	a00d	5a		phy				phy
.c00e	a00e	a6 01		ldx $01				ldx 	1
.c010	a010	da		phx				phx
.c011	a011	ac c4 07	ldy $07c4			ldy 	EXTColumn 					; Y = Row, e.g. points to character.
.c014	a014	09 00		ora #$00			ora 	#$00 						; check $80-$FF
.c016	a016	30 48		bmi $a060			bmi 	EXPCColour
.c018	a018	c9 20		cmp #$20			cmp 	#$20 						; check $00-$1F
.c01a	a01a	90 4d		bcc $a069			bcc 	EXPCControl
.c01c	a01c					PrintCharacterOnly:
.c01c	a01c	a2 02		ldx #$02			ldx 	#2 							; select char memory
.c01e	a01e	86 01		stx $01				stx 	1
.c020	a020	91 40		sta ($40),y			sta 	(EXTAddress),y
.c022	a022	e6 01		inc $01				inc 	1 							; select colour memory
.c024	a024	ad c5 07	lda $07c5			lda 	EXTTextColour
.c027	a027	91 40		sta ($40),y			sta 	(EXTAddress),y
.c029	a029	c8		iny				iny 								; advance horizontal position
.c02a	a02a	8c c4 07	sty $07c4			sty 	EXTColumn
.c02d	a02d	cc c6 07	cpy $07c6			cpy 	EXTScreenWidth 				; reached RHS ?
.c030	a030	90 63		bcc $a095			bcc 	EXPCExit 					; no, then exit.
.c032	a032					EXPCCRLF:
.c032	a032	ee c3 07	inc $07c3			inc 	EXTRow  					; bump row
.c035	a035	9c c4 07	stz $07c4			stz 	EXTColumn 					; back to column 0
.c038	a038	ad c3 07	lda $07c3			lda 	EXTRow 						; check if reached the bottom ?
.c03b	a03b	cd c7 07	cmp $07c7			cmp 	EXTScreenHeight 			; if so, then scroll.
.c03e	a03e	f0 18		beq $a058			beq 	EXPCScroll
.c040	a040	18		clc				clc 								; add width to address.
.c041	a041	a5 40		lda $40				lda 	EXTAddress
.c043	a043	6d c6 07	adc $07c6			adc 	EXTScreenWidth
.c046	a046	85 40		sta $40				sta 	EXTAddress
.c048	a048	90 4b		bcc $a095			bcc 	EXPCExit
.c04a	a04a	e6 41		inc $41				inc 	EXTAddress+1
.c04c	a04c	80 47		bra $a095			bra 	EXPCExit
.c04e	a04e					EXPCLeft:
.c04e	a04e	ce c4 07	dec $07c4			dec 	EXTColumn
.c051	a051	10 42		bpl $a095			bpl 	EXPCExit
.c053	a053					EXPCBegin:
.c053	a053	9c c4 07	stz $07c4			stz 	EXTColumn
.c056	a056	80 3d		bra $a095			bra 	EXPCExit
.c058	a058					EXPCScroll:
.c058	a058	ce c3 07	dec $07c3			dec 	EXTRow 						; the height-1 th line.
.c05b	a05b	20 46 a1	jsr $a146			jsr 	EXTScreenScroll 			; scroll the screen
.c05e	a05e	80 35		bra $a095			bra 	EXPCExit
.c060	a060					EXPCColour:
.c060	a060	c9 a0		cmp #$a0			cmp 	#$A0						; 80-9F set foreground/background
.c062	a062	b0 31		bcs $a095			bcs 	EXPCExit
.c064	a064	20 26 a1	jsr $a126			jsr 	EXPCHandleColour
.c067	a067	80 2c		bra $a095			bra 	EXPCExit
.c069	a069					EXPCControl:
.c069	a069	c9 11		cmp #$11			cmp 	#$11 						; only handle 00-10.
.c06b	a06b	b0 28		bcs $a095			bcs 	EXPCExit
.c06d	a06d	0a		asl a				asl 	a 							; double into X
.c06e	a06e	aa		tax				tax
.c06f	a06f	7c 04 a1	jmp ($a104,x)			jmp 	(EXPCActionTable,x) 		; and execute code.
.c072	a072					EXPCUp:
.c072	a072	ad c3 07	lda $07c3			lda 	EXTRow 						; already at top ?
.c075	a075	f0 1e		beq $a095			beq 	EXPCExit
.c077	a077	ce c3 07	dec $07c3			dec 	EXTRow 						; up one in position/address
.c07a	a07a	38		sec				sec
.c07b	a07b	a5 40		lda $40				lda 	EXTAddress
.c07d	a07d	ed c6 07	sbc $07c6			sbc 	EXTScreenWidth
.c080	a080	85 40		sta $40				sta 	EXTAddress
.c082	a082	b0 11		bcs $a095			bcs 	EXPCExit
.c084	a084	c6 41		dec $41				dec 	EXTAddress+1
.c086	a086	80 0d		bra $a095			bra 	EXPCExit
.c088	a088					EXPCRight:
.c088	a088	c8		iny				iny
.c089	a089	8c c4 07	sty $07c4			sty 	EXTColumn
.c08c	a08c	cc c6 07	cpy $07c6			cpy 	EXTScreenWidth
.c08f	a08f	d0 04		bne $a095			bne 	EXPCExit
.c091	a091	88		dey				dey
.c092	a092					EXPCSetColumnY:
.c092	a092	8c c4 07	sty $07c4			sty 	EXTColumn
.c095	a095					EXPCExit:
.c095	a095	20 bb a1	jsr $a1bb			jsr 	EXTSetHardwareCursor 		; place the physical cursor.
.c098	a098	68		pla				pla
.c099	a099	85 01		sta $01				sta 	1
.c09b	a09b	7a		ply				ply
.c09c	a09c	fa		plx				plx
.c09d	a09d	68		pla				pla
.c09e	a09e	60		rts				rts
.c09f	a09f					EXPCClearScreen:
.c09f	a09f	20 78 a1	jsr $a178			jsr		EXTClearScreenCode
.c0a2	a0a2	80 f1		bra $a095			bra 	EXPCExit
.c0a4	a0a4					EXPCDown:
.c0a4	a0a4	ad c7 07	lda $07c7			lda 	EXTScreenHeight 			; at the bottom
.c0a7	a0a7	3a		dec a				dec 	a
.c0a8	a0a8	cd c3 07	cmp $07c3			cmp 	EXTRow
.c0ab	a0ab	f0 e8		beq $a095			beq 	EXPCExit
.c0ad	a0ad	ee c3 07	inc $07c3			inc 	EXTRow 						; down one in position/address
.c0b0	a0b0	18		clc				clc
.c0b1	a0b1	a5 40		lda $40				lda 	EXTAddress
.c0b3	a0b3	6d c6 07	adc $07c6			adc 	EXTScreenWidth
.c0b6	a0b6	85 40		sta $40				sta 	EXTAddress
.c0b8	a0b8	90 db		bcc $a095			bcc 	EXPCExit
.c0ba	a0ba	e6 41		inc $41				inc 	EXTAddress+1
.c0bc	a0bc	80 d7		bra $a095			bra 	EXPCExit
.c0be	a0be					EXPCTab:
.c0be	a0be	ad c4 07	lda $07c4			lda 	EXTColumn 					; next tab stop
.c0c1	a0c1	29 f8		and #$f8			and 	#$F8
.c0c3	a0c3	18		clc				clc
.c0c4	a0c4	69 08		adc #$08			adc 	#8
.c0c6	a0c6	8d c4 07	sta $07c4			sta 	EXTColumn
.c0c9	a0c9	cd c6 07	cmp $07c6			cmp 	EXTScreenWidth 				; too far, stick end of line.
.c0cc	a0cc	90 c7		bcc $a095			bcc 	EXPCExit
.c0ce	a0ce	80 10		bra $a0e0			bra 	EXPCEnd
.c0d0	a0d0					EXPCBackSpace:
.c0d0	a0d0	88		dey				dey
.c0d1	a0d1	30 c2		bmi $a095			bmi 	EXPCExit
.c0d3	a0d3	ce c4 07	dec $07c4			dec 	EXTColumn
.c0d6	a0d6	a9 02		lda #$02			lda 	#2
.c0d8	a0d8	85 01		sta $01				sta 	1
.c0da	a0da	a9 20		lda #$20			lda 	#32
.c0dc	a0dc	91 40		sta ($40),y			sta 	(EXTAddress),y
.c0de	a0de	80 b5		bra $a095			bra 	EXPCExit
.c0e0	a0e0					EXPCEnd:
.c0e0	a0e0	a9 02		lda #$02			lda 	#2 							; access text screen
.c0e2	a0e2	85 01		sta $01				sta 	1
.c0e4	a0e4	ac c6 07	ldy $07c6			ldy 	EXTScreenWidth 				; point to last character
.c0e7	a0e7	88		dey				dey
.c0e8	a0e8					EXPCEndSearch:
.c0e8	a0e8	88		dey				dey 								; if past start, move to col 0.
.c0e9	a0e9	30 06		bmi $a0f1			bmi 	EXPCFound
.c0eb	a0eb	b1 40		lda ($40),y			lda 	(EXTAddress),y 				; keep going back till non space found
.c0ed	a0ed	c9 20		cmp #$20			cmp 	#' '
.c0ef	a0ef	f0 f7		beq $a0e8			beq 	EXPCEndSearch
.c0f1	a0f1					EXPCFound:
.c0f1	a0f1	c8		iny				iny 								; move to following cell.
.c0f2	a0f2	80 9e		bra $a092			bra 	EXPCSetColumnY
.c0f4	a0f4					EXPCClearEOL:
.c0f4	a0f4	a9 02		lda #$02			lda 	#2 							; access character RAM
.c0f6	a0f6	85 01		sta $01				sta 	1
.c0f8	a0f8	a9 20		lda #$20			lda 	#' ' 						; write space
.c0fa	a0fa	91 40		sta ($40),y			sta 	(EXTAddress),y
.c0fc	a0fc	c8		iny				iny
.c0fd	a0fd	cc c6 07	cpy $07c6			cpy 	EXTScreenWidth 				; until RHS of screen.
.c100	a100	90 f2		bcc $a0f4			bcc 	EXPCClearEOL
.c102	a102	80 91		bra $a095			bra 	EXPCExit
.c104	a104					EXPCActionTable:
>c104	a104	95 a0						.word 	EXPCExit 					; 00
>c106	a106	53 a0						.word 	EXPCBegin 					; 01 A Start of Line
>c108	a108	4e a0						.word 	EXPCLeft 					; 02 B Left
>c10a	a10a	95 a0						.word 	EXPCExit 					; 03 <Break>
>c10c	a10c	95 a0						.word 	EXPCExit 					; 04
>c10e	a10e	e0 a0						.word 	EXPCEnd 					; 05 E End of Line
>c110	a110	88 a0						.word 	EXPCRight 					; 06 F Right
>c112	a112	95 a0						.word 	EXPCExit 					; 07
>c114	a114	d0 a0						.word 	EXPCBackSpace 				; 08 H Backspace
>c116	a116	be a0						.word 	EXPCTab 					; 09 I Tab
>c118	a118	95 a0						.word 	EXPCExit 					; 0A
>c11a	a11a	f4 a0						.word 	EXPCClearEOL 				; 0B K Clear to EOL
>c11c	a11c	9f a0						.word 	EXPCClearScreen			; 0C L CLS
>c11e	a11e	32 a0						.word 	EXPCCRLF 					; 0D M CR/LF
>c120	a120	a4 a0						.word 	EXPCDown 					; 0E N Down
>c122	a122	95 a0						.word 	EXPCExit 					; 0F
>c124	a124	72 a0						.word 	EXPCUp 					; 10 P Up
.c126	a126					EXPCHandleColour:
.c126	a126	c9 90		cmp #$90			cmp 	#$90 						; 8x foreground 9x background
.c128	a128	b0 16		bcs $a140			bcs 	EXPCBackground
.c12a	a12a	0a		asl a				asl 	a 							; shift it 4 bits to the right.
.c12b	a12b	0a		asl a				asl 	a
.c12c	a12c	0a		asl a				asl 	a
.c12d	a12d	0a		asl a				asl 	a
.c12e	a12e	a2 0f		ldx #$0f			ldx 	#$0F 						; Mask in X
.c130	a130					EXPCUpdate:
.c130	a130	48		pha				pha 								; save new colour
.c131	a131	8a		txa				txa 								; get mask
.c132	a132	2d c5 07	and $07c5			and 	EXTTextColour 				; mask out old.
.c135	a135	8d c5 07	sta $07c5			sta 	EXTTextColour
.c138	a138	68		pla				pla 								; or in new colour
.c139	a139	0d c5 07	ora $07c5			ora 	EXTTextColour
.c13c	a13c	8d c5 07	sta $07c5			sta 	EXTTextColour
.c13f	a13f	60		rts				rts
.c140	a140					EXPCBackground:
.c140	a140	29 0f		and #$0f			and 	#$0F 						; get the colour
.c142	a142	a2 f0		ldx #$f0			ldx 	#$F0 						; mask
.c144	a144	80 ea		bra $a130			bra 	EXPCUpdate
.c146	a146					EXTScreenScroll:
.c146	a146	a9 02		lda #$02			lda 	#2 							; select text page
.c148	a148	85 01		sta $01				sta 	1
.c14a	a14a	a9 20		lda #$20			lda		#32 						; fill with space
.c14c	a14c	20 a2 a2	jsr $a2a2			jsr 	EXTScrollFill
.c14f	a14f	e6 01		inc $01				inc 	1 							; select colour page
.c151	a151	ad c5 07	lda $07c5			lda 	EXTTextColour
.c154	a154	20 a2 a2	jsr $a2a2			jsr 	EXTScrollFill
.c157	a157	60		rts				rts
.c158	a158					PAGEDPrintHex:
.c158	a158	48		pha				pha
.c159	a159	a9 20		lda #$20			lda 	#' '
.c15b	a15b	20 0b a0	jsr $a00b			jsr 	PAGEDPrintCharacter
.c15e	a15e	68		pla				pla
.c15f	a15f	48		pha				pha
.c160	a160	4a		lsr a				lsr 	a
.c161	a161	4a		lsr a				lsr 	a
.c162	a162	4a		lsr a				lsr 	a
.c163	a163	4a		lsr a				lsr 	a
.c164	a164	20 68 a1	jsr $a168			jsr 	_PPHNibble
.c167	a167	68		pla				pla
.c168	a168					_PPHNibble:
.c168	a168	48		pha				pha
.c169	a169	29 0f		and #$0f			and 	#15
.c16b	a16b	c9 0a		cmp #$0a			cmp 	#10
.c16d	a16d	90 02		bcc $a171			bcc 	_PPHOut
.c16f	a16f	69 06		adc #$06			adc 	#6
.c171	a171	69 30		adc #$30	_PPHOut:adc 	#48
.c173	a173	20 0b a0	jsr $a00b			jsr		PAGEDPrintCharacter
.c176	a176	68		pla				pla
.c177	a177	60		rts				rts
.c178	a178					EXTClearScreenCode:
.c178	a178	a9 02		lda #$02			lda 	#2 							; select text page
.c17a	a17a	85 01		sta $01				sta 	1
.c17c	a17c	a9 20		lda #$20			lda		#32 						; fill with space
.c17e	a17e	20 8b a1	jsr $a18b			jsr 	_EXTCSFill
.c181	a181	e6 01		inc $01				inc 	1 							; select colour page
.c183	a183	ad c5 07	lda $07c5			lda 	EXTTextColour
.c186	a186	20 8b a1	jsr $a18b			jsr 	_EXTCSFill
.c189	a189	80 22		bra $a1ad			bra 	EXTHomeCursor				; home cursor
.c18b	a18b					_EXTCSFill:
.c18b	a18b	aa		tax				tax
.c18c	a18c	a9 00		lda #$00			lda 	#EXTMemory & $FF
.c18e	a18e	85 40		sta $40				sta 	EXTAddress
.c190	a190	a9 c0		lda #$c0			lda 	#EXTMemory >> 8
.c192	a192	85 41		sta $41				sta 	EXTAddress+1
.c194	a194					_EXTCSFill1:
.c194	a194	a0 00		ldy #$00			ldy 	#0
.c196	a196	8a		txa				txa
.c197	a197					_EXTCSFill2:
.c197	a197	91 40		sta ($40),y			sta 	(EXTAddress),y
.c199	a199	c8		iny				iny
.c19a	a19a	d0 fb		bne $a197			bne 	_EXTCSFill2
.c19c	a19c	e6 41		inc $41				inc 	EXTAddress+1
.c19e	a19e	a5 41		lda $41				lda 	EXTAddress+1
.c1a0	a1a0	c9 d2		cmp #$d2			cmp 	#$D2
.c1a2	a1a2	d0 f0		bne $a194			bne 	_EXTCSFill1
.c1a4	a1a4	8a		txa				txa
.c1a5	a1a5					_EXTCSFill3:
.c1a5	a1a5	91 40		sta ($40),y			sta 	(EXTAddress),y
.c1a7	a1a7	c8		iny				iny
.c1a8	a1a8	c0 c0		cpy #$c0			cpy 	#$C0
.c1aa	a1aa	d0 f9		bne $a1a5			bne 	_EXTCSFill3
.c1ac	a1ac	60		rts				rts
.c1ad	a1ad					EXTHomeCursor:
.c1ad	a1ad	9c c3 07	stz $07c3			stz 	EXTRow 						; reset row & column
.c1b0	a1b0	9c c4 07	stz $07c4			stz 	EXTColumn
.c1b3	a1b3	a9 00		lda #$00			lda 	#EXTMemory & $FF 			; set address in I/O memory
.c1b5	a1b5	85 40		sta $40				sta 	EXTAddress
.c1b7	a1b7	a9 c0		lda #$c0			lda 	#EXTMemory >> 8
.c1b9	a1b9	85 41		sta $41				sta 	EXTAddress+1
.c1bb	a1bb					EXTSetHardwareCursor:
.c1bb	a1bb	64 01		stz $01				stz 	1 							; I/O Page zero
.c1bd	a1bd	a9 05		lda #$05			lda 	#1+4 						; enable cursor
.c1bf	a1bf	8d 10 d0	sta $d010			sta 	$D010
.c1c2	a1c2	a9 d6		lda #$d6			lda 	#214 						; cursor character
.c1c4	a1c4	8d 12 d0	sta $d012			sta 	$D012
.c1c7	a1c7	ad c4 07	lda $07c4			lda 	EXTColumn
.c1ca	a1ca	8d 14 d0	sta $d014			sta 	$D014 						; set cursor position
.c1cd	a1cd	9c 15 d0	stz $d015			stz 	$D015
.c1d0	a1d0	ad c3 07	lda $07c3			lda 	EXTRow
.c1d3	a1d3	8d 16 d0	sta $d016			sta 	$D016
.c1d6	a1d6	9c 17 d0	stz $d017			stz 	$D017
.c1d9	a1d9	60		rts				rts
=$c000						EXTMemory = $C000
=$02						EXTTextPage = $02
=$03						EXTColourPage = $03
=1						EXTDummySpace = 1 							; fake-space for CR character.
=0						EXTCBlack = 0
.07c3						EXTRow:
>07c3								.fill 	1
.07c4						EXTColumn:
>07c4								.fill 	1
.07c5						EXTTextColour:
>07c5								.fill 	1
.07c6						EXTScreenWidth:
>07c6								.fill 	1
.07c7						EXTScreenHeight:
>07c7								.fill 	1
.0040						EXTAddress:
>0040								.fill 	2
.c1da	a1da					Export_EXTInitialise:
.c1da	a1da	64 01		stz $01				stz 	1 							; Access I/O page 0
.c1dc	a1dc	9c 04 d0	stz $d004			stz 	$D004 						; Disable border
.c1df	a1df	9c 08 d0	stz $d008			stz 	$D008
.c1e2	a1e2	9c 09 d0	stz $d009			stz 	$D009
.c1e5	a1e5	a9 09		lda #$09			lda 	#1+8						; Timer On at 70Hz counting up.
.c1e7	a1e7	8d 58 d6	sta $d658			sta 	$D658
.c1ea	a1ea	a9 52		lda #$52			lda 	#$52
.c1ec	a1ec	8d c5 07	sta $07c5			sta 	EXTTextColour
.c1ef	a1ef	a9 50		lda #$50			lda 	#80 						; set screen dimensions.
.c1f1	a1f1	8d c6 07	sta $07c6			sta 	EXTScreenWidth
.c1f4	a1f4	a9 3c		lda #$3c			lda 	#60
.c1f6	a1f6	8d c7 07	sta $07c7			sta 	EXTScreenHeight
.c1f9	a1f9	20 78 a1	jsr $a178			jsr 	EXTClearScreenCode 			; clear the screen
.c1fc	a1fc					_EXMoveDown:
.c1fc	a1fc	a9 0d		lda #$0d			lda 	#13
.c1fe	a1fe	20 0b a0	jsr $a00b			jsr 	PAGEDPrintCharacter
.c201	a201	ad c3 07	lda $07c3			lda 	EXTRow
.c204	a204	c9 0a		cmp #$0a			cmp 	#Header_Height-4
.c206	a206	d0 f4		bne $a1fc			bne 	_EXMoveDown
.c208	a208	20 0e a2	jsr $a20e			jsr 	EXTShowHeader
.c20b	a20b	64 01		stz $01				stz 	1
.c20d	a20d	60		rts				rts
.c20e	a20e					EXTShowHeader:
.c20e	a20e	a5 01		lda $01				lda 	1
.c210	a210	48		pha				pha
.c211	a211	a5 0b		lda $0b				lda 	8+3
.c213	a213	48		pha				pha
.c214	a214	a5 0c		lda $0c				lda 	8+4
.c216	a216	18		clc				clc
.c217	a217	69 03		adc #$03			adc 	#3
.c219	a219	85 0b		sta $0b				sta 	8+3
.c21b	a21b	a2 92		ldx #$92			ldx 	#(Header_jchars & $FF)
.c21d	a21d	a0 61		ldy #$61			ldy 	#(Header_jchars >> 8)-$40
.c21f	a21f	64 01		stz $01				stz 	1
.c221	a221	ad a7 d6	lda $d6a7			lda 	$D6A7
.c224	a224	29 10		and #$10			and 	#$10
.c226	a226	f0 04		beq $a22c			beq 	_EXTSHNotK1
.c228	a228	a2 21		ldx #$21			ldx 	#(Header_kchars & $FF)
.c22a	a22a	a0 65		ldy #$65			ldy 	#(Header_kchars >> 8)-$40
.c22c	a22c					_EXTSHNotK1:
.c22c	a22c	a9 02		lda #$02			lda 	#2
.c22e	a22e	20 5c a2	jsr $a25c			jsr 	_ESHCopyBlock
.c231	a231	a2 00		ldx #$00			ldx 	#(Header_jattrs & $FF)
.c233	a233	a0 60		ldy #$60			ldy 	#(Header_jattrs >> 8)-$40
.c235	a235	64 01		stz $01				stz 	1
.c237	a237	ad a7 d6	lda $d6a7			lda 	$D6A7
.c23a	a23a	29 10		and #$10			and 	#$10
.c23c	a23c	f0 04		beq $a242			beq 	_EXTSHNotK2
.c23e	a23e	a2 c2		ldx #$c2			ldx 	#(Header_kattrs & $FF)
.c240	a240	a0 63		ldy #$63			ldy 	#(Header_kattrs >> 8)-$40
.c242	a242					_EXTSHNotK2:
.c242	a242	a9 03		lda #$03			lda 	#3
.c244	a244	20 5c a2	jsr $a25c			jsr 	_ESHCopyBlock
.c247	a247	64 01		stz $01				stz 	1
.c249	a249	a2 3f		ldx #$3f			ldx 	#16*4-1
.c24b	a24b					_EXTCopyLUT:
.c24b	a24b	bd 23 67	lda $6723,x			lda 	Header_Palette-$4000,x
.c24e	a24e	9d 00 d8	sta $d800,x			sta 	$D800,x
.c251	a251	9d 40 d8	sta $d840,x			sta 	$D840,x
.c254	a254	ca		dex				dex
.c255	a255	10 f4		bpl $a24b			bpl 	_EXTCopyLUT
.c257	a257	68		pla				pla
.c258	a258	85 0b		sta $0b				sta 	8+3
.c25a	a25a	68		pla				pla
.c25b	a25b	60		rts				rts
.c25c	a25c					_ESHCopyBlock:
.c25c	a25c	85 01		sta $01				sta 	1
.c25e	a25e	86 36		stx $36				stx 	zTemp0 						; zTemp0 is RLE packed data
.c260	a260	84 37		sty $37				sty 	zTemp0+1
.c262	a262	a9 00		lda #$00			lda 	#(($C000) & $FF)
.c264	a264	85 38		sta $38				sta 	0+zTemp1
.c266	a266	a9 c0		lda #$c0			lda 	#(($C000) >> 8)
.c268	a268	85 39		sta $39				sta 	1+zTemp1
.c26a	a26a					_ESHCopyLoop:
.c26a	a26a	b2 36		lda ($36)			lda 	(zTemp0) 					; get next character
.c26c	a26c	c9 ff		cmp #$ff			cmp 	#Header_RLE 				; packed ?
.c26e	a26e	f0 1b		beq $a28b			beq 	_ESHUnpack
.c270	a270	92 38		sta ($38)			sta 	(zTemp1) 					; copy it out.
.c272	a272	a9 01		lda #$01			lda 	#1 							; source add 1
.c274	a274	a0 01		ldy #$01			ldy 	#1 							; dest add 1
.c276	a276					_ESHNext:
.c276	a276	18		clc				clc 								; zTemp0 + A
.c277	a277	65 36		adc $36				adc 	zTemp0
.c279	a279	85 36		sta $36				sta 	zTemp0
.c27b	a27b	90 02		bcc $a27f			bcc 	_ESHNoCarry
.c27d	a27d	e6 37		inc $37				inc 	zTemp0+1
.c27f	a27f					_ESHNoCarry:
.c27f	a27f	98		tya				tya 								; zTemp1 + Y
.c280	a280	18		clc				clc
.c281	a281	65 38		adc $38				adc 	zTemp1
.c283	a283	85 38		sta $38				sta 	zTemp1
.c285	a285	90 e3		bcc $a26a			bcc 	_ESHCopyLoop
.c287	a287	e6 39		inc $39				inc 	zTemp1+1
.c289	a289	80 df		bra $a26a			bra 	_ESHCopyLoop
.c28b	a28b					_ESHUnpack:
.c28b	a28b	a0 02		ldy #$02			ldy 	#2 							; get count into X
.c28d	a28d	b1 36		lda ($36),y			lda 	(zTemp0),y
.c28f	a28f	aa		tax				tax
.c290	a290	88		dey				dey 								; byte into A
.c291	a291	b1 36		lda ($36),y			lda 	(zTemp0),y
.c293	a293	f0 0c		beq $a2a1			beq 	_ESHExit 					; exit if zero.
.c295	a295	a0 00		ldy #$00			ldy 	#0 							; copy start position
.c297	a297					_ESHCopyOut:
.c297	a297	91 38		sta ($38),y			sta 	(zTemp1),y
.c299	a299	c8		iny				iny
.c29a	a29a	ca		dex				dex
.c29b	a29b	d0 fa		bne $a297			bne 	_ESHCopyOut
.c29d	a29d	a9 03		lda #$03			lda 	#3 							; Y is bytes on screen, 3 bytes from source
.c29f	a29f	80 d5		bra $a276			bra 	_ESHNext
.c2a1	a2a1					_ESHExit:
.c2a1	a2a1	60		rts				rts
.c2a2	a2a2					EXTScrollFill:
.c2a2	a2a2	aa		tax				tax									; save value to fill with
.c2a3	a2a3	a5 36		lda $36				lda 	zTemp0 						; save zTemp0 (dest) zTemp1 (src)
.c2a5	a2a5	48		pha				pha
.c2a6	a2a6	a5 37		lda $37				lda 	zTemp0+1
.c2a8	a2a8	48		pha				pha
.c2a9	a2a9	a5 38		lda $38				lda 	zTemp1
.c2ab	a2ab	48		pha				pha
.c2ac	a2ac	a5 39		lda $39				lda 	zTemp1+1
.c2ae	a2ae	48		pha				pha
.c2af	a2af	a9 c0		lda #$c0			lda 	#$C0 						; copy from C000+length to C000
.c2b1	a2b1	85 37		sta $37				sta 	zTemp0+1
.c2b3	a2b3	85 39		sta $39				sta 	zTemp1+1
.c2b5	a2b5	64 36		stz $36				stz 	zTemp0
.c2b7	a2b7	ad c6 07	lda $07c6			lda 	EXTScreenWidth
.c2ba	a2ba	85 38		sta $38				sta 	zTemp1
.c2bc	a2bc	a0 00		ldy #$00			ldy 	#0
.c2be	a2be					_EXSFCopy1:
.c2be	a2be	b1 38		lda ($38),y			lda 	(zTemp1),y
.c2c0	a2c0	91 36		sta ($36),y			sta 	(zTemp0),y
.c2c2	a2c2	c8		iny				iny
.c2c3	a2c3	d0 f9		bne $a2be			bne 	_EXSFCopy1
.c2c5	a2c5	e6 37		inc $37				inc 	zTemp0+1 					; next page
.c2c7	a2c7	e6 39		inc $39				inc 	zTemp1+1
.c2c9	a2c9	a5 39		lda $39				lda 	zTemp1+1
.c2cb	a2cb	c9 d3		cmp #$d3			cmp 	#$D3
.c2cd	a2cd	d0 ef		bne $a2be			bne 	_EXSFCopy1
.c2cf	a2cf	ac c6 07	ldy $07c6			ldy 	EXTScreenWidth 				; blank the bottom line.
.c2d2	a2d2	8a		txa				txa
.c2d3	a2d3					_EXSFFill1:
.c2d3	a2d3	88		dey				dey
.c2d4	a2d4	91 40		sta ($40),y			sta 	(EXTAddress),y
.c2d6	a2d6	c0 00		cpy #$00			cpy 	#0
.c2d8	a2d8	10 f9		bpl $a2d3			bpl 	_EXSFFill1
.c2da	a2da	68		pla				pla
.c2db	a2db	85 39		sta $39				sta 	zTemp1+1
.c2dd	a2dd	68		pla				pla
.c2de	a2de	85 38		sta $38				sta 	zTemp1
.c2e0	a2e0	68		pla				pla
.c2e1	a2e1	85 37		sta $37				sta 	zTemp0+1
.c2e3	a2e3	68		pla				pla
.c2e4	a2e4	85 36		sta $36				sta 	zTemp0
.c2e6	a2e6	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_graphics.module

=1						graphicsIntegrated=1
=0						GCMD_Initialise = 0*2
=2						GCMD_BitmapCtl = 1*2
=4						GCMD_SpriteCtl = 2*2
=6						GCMD_Clear = 3*2
=8						GCMD_Colour = 4*2
=10						GCMD_DrawFont = 5*2
=12						GCMD_DrawSprite = 6*2
=14						GCMD_SpriteUse = 7*2
=16						GCMD_SpriteImage = 8*2
=18						GCMD_SpriteCollide = 9*2
=20						GCMD_TileCtl = 10*2
=22						GCMD_TILESZ = 11*2
=24						GCMD_TILESCLX = 12*2
=26						GCMD_TILESCLY = 13*2
=28						GCMD_TilePos = 14*2
=30						GCMD_TILEWRT = 15*2
=32						GCMD_TILERD = 16*2
=64						GCMD_Move = 32*2
=66						GCMD_Line = 33*2
=68						GCMD_FrameRect = 34*2
=70						GCMD_FillRect = 35*2
=72						GCMD_FrameCircle = 36*2
=74						GCMD_FillCircle = 37*2
=80						GCMD_Plot = 40*2
=82						GCMD_SpriteMove = 41*2
=42						GRFirstFreeCode = 42
.c2e7	a2e7					GRVectorTable:
>c2e7	a2e7	39 a5					.word	GXInitialise             ; $00 Initialise
>c2e9	a2e9	60 a5					.word	GXControlBitmap          ; $01 BitmapCtl
>c2eb	a2eb	a8 a5					.word	GXControlSprite          ; $02 SpriteCtl
>c2ed	a2ed	e9 a4					.word	GXClearBitmap            ; $03 Clear
>c2ef	a2ef	d9 a7					.word	GXSetColourMode          ; $04 Colour
>c2f1	a2f1	f8 a9					.word	GXFontHandler            ; $05 DrawFont
>c2f3	a2f3	40 aa					.word	GXSpriteHandler          ; $06 DrawSprite
>c2f5	a2f5	b1 aa					.word	GXSelect                 ; $07 SpriteUse
>c2f7	a2f7	da aa					.word	GXSelectImage            ; $08 SpriteImage
>c2f9	a2f9	ff ac					.word	GXCollide                ; $09 SpriteCollide
>c2fb	a2fb	e9 a5					.word	GXControlTilemap         ; $0a TileCtl
>c2fd	a2fd	71 a6					.word	GXControlTileSize        ; $0b TILESZ
>c2ff	a2ff	a1 a9					.word	GXControlTileScrollX     ; $0c TILESCLX
>c301	a301	b2 a9					.word	GXControlTileScrollY     ; $0d TILESCLY
>c303	a303	e0 ab					.word	GXSelectTile             ; $0e TilePos
>c305	a305	42 ac					.word	GXSTWriteTile            ; $0f TILEWRT
>c307	a307	45 ac					.word	GXSTReadTile             ; $10 TILERD
>c309	a309	9a a3					.word	GRUndefined              ; $11
>c30b	a30b	9a a3					.word	GRUndefined              ; $12
>c30d	a30d	9a a3					.word	GRUndefined              ; $13
>c30f	a30f	9a a3					.word	GRUndefined              ; $14
>c311	a311	9a a3					.word	GRUndefined              ; $15
>c313	a313	9a a3					.word	GRUndefined              ; $16
>c315	a315	9a a3					.word	GRUndefined              ; $17
>c317	a317	9a a3					.word	GRUndefined              ; $18
>c319	a319	9a a3					.word	GRUndefined              ; $19
>c31b	a31b	9a a3					.word	GRUndefined              ; $1a
>c31d	a31d	9a a3					.word	GRUndefined              ; $1b
>c31f	a31f	9a a3					.word	GRUndefined              ; $1c
>c321	a321	9a a3					.word	GRUndefined              ; $1d
>c323	a323	9a a3					.word	GRUndefined              ; $1e
>c325	a325	9a a3					.word	GRUndefined              ; $1f
>c327	a327	98 a3					.word	GXMove                   ; $20 Move
>c329	a329	a7 a6					.word	GXLine                   ; $21 Line
>c32b	a32b	22 a8					.word	GXFrameRectangle         ; $22 FrameRect
>c32d	a32d	1f a8					.word	GXFillRectangle          ; $23 FillRect
>c32f	a32f	a0 a3					.word	GXFrameCircle            ; $24 FrameCircle
>c331	a331	9c a3					.word	GXFillCircle             ; $25 FillCircle
>c333	a333	9a a3					.word	GRUndefined              ; $26
>c335	a335	9a a3					.word	GRUndefined              ; $27
>c337	a337	07 a8					.word	GXPlotPoint              ; $28 Plot
>c339	a339	70 ab					.word	GXMoveSprite             ; $29 SpriteMove
=3						GXMappingPage = 3
=24576						GXMappingAddress = ($2000 * GXMappingPage)
=11						GXEditSlot = 8 + GXMappingPage
=$36						gxzTemp0 = zTemp0
=$38						gxzTemp1 = zTemp1
=$3a						gxzTemp2 = zTemp2
=$3c						gxzScreen = zsTemp
=$623						gxPixelBuffer = numberBuffer
.07c8						gxCurrentX:
>07c8								.fill 	2
.07ca						gxCurrentY:
>07ca								.fill 	2
.07cc						gxLastX:
>07cc								.fill 	2
.07ce						gxLastY:
>07ce								.fill 	2
.07d0						gxX0:
>07d0								.fill 	2
.07d2						gxY0:
>07d2								.fill 	2
.07d4						gxX1:
>07d4								.fill 	2
.07d6						gxY1:
>07d6								.fill 	2
.07d8						gxSpritesOn:
>07d8								.fill 	1
.07d9						gxBitmapsOn:
>07d9								.fill 	1
.07da						gxTilesOn:
>07da								.fill 	1
.07db						gxBasePage:
>07db								.fill 	1
.07dc						gxSpritePage:
>07dc								.fill 	1
.07dd						gxTileImagePage:
>07dd								.fill 	1
.07de						gxTileMapPage:
>07de								.fill 	1
.07df						gxTileMapWidth:
>07df								.fill 	1
.07e0						gxTileMapHeight:
>07e0								.fill 	1
.07e1						gxHeight:
>07e1								.fill 	1
.07e2						gxMode:
>07e2								.fill 	1
.07e3						gxColour:
>07e3								.fill 	1
.07e4						gxEORValue:
>07e4								.fill 	1
.07e5						gxANDValue:
>07e5								.fill 	1
.07e6						gxOriginalLUTValue:
>07e6								.fill 	1
.07e7						gxOffset:
>07e7								.fill 	1
.07e8						GSCurrentSpriteID:
>07e8								.fill 	1
.07e9						GSCurrentSpriteAddr:
>07e9								.fill 	2
.07eb						gxSpriteOffsetBase:
>07eb								.fill 	2
.07ed						gxSpriteLow:
>07ed								.fill 	64
.082d						gxSpriteHigh:
>082d								.fill 	64
.086d						gxTileAccessPage:
>086d								.fill 	1
.086e						gxTileAccessAddress:
>086e								.fill 	2
.c33b	a33b					Export_GXGraphicDraw:
.c33b	a33b	c9 40		cmp #$40			cmp 	#GCMD_Move					; low value instructions don't use coordinates
.c33d	a33d	b0 06		bcs $a345			bcs 	_GDCoordinate 				; (see graphics.txt)
.c33f	a33f	86 36		stx $36				stx 	gxzTemp0 					; save X/Y
.c341	a341	84 37		sty $37				sty 	gxzTemp0+1
.c343	a343	80 4b		bra $a390			bra 	_GDExecuteA 				; and execute
.c345	a345					_GDCoordinate:
.c345	a345	48		pha				pha 								; save AXY
.c346	a346	da		phx				phx
.c347	a347	5a		phy				phy
.c348	a348	a2 03		ldx #$03			ldx 	#3 							; copy currentX to lastX
.c34a	a34a					_GDCopy1:
.c34a	a34a	bd c8 07	lda $07c8,x			lda 	gxCurrentX,x
.c34d	a34d	9d cc 07	sta $07cc,x			sta 	gxLastX,x
.c350	a350	ca		dex				dex
.c351	a351	10 f7		bpl $a34a			bpl 	_GDCopy1
.c353	a353	68		pla				pla
.c354	a354	8d ca 07	sta $07ca			sta 	gxCurrentY
.c357	a357	9c cb 07	stz $07cb			stz 	gxCurrentY+1
.c35a	a35a	68		pla				pla
.c35b	a35b	8d c8 07	sta $07c8			sta 	gxCurrentX
.c35e	a35e	68		pla				pla 								; get A (command+X.1) back
.c35f	a35f	48		pha				pha
.c360	a360	29 01		and #$01			and 	#1 							; put LSB as MSB of Current.X
.c362	a362	8d c9 07	sta $07c9			sta 	gxCurrentX+1
.c365	a365	68		pla				pla 								; get command back
.c366	a366	29 fe		and #$fe			and 	#$FE 						; lose LSB, chuck the stray X bit
.c368	a368	48		pha				pha 								; push back.
.c369	a369	c9 52		cmp #$52			cmp 	#GCMD_SpriteMove 			; move sprite does not clip.
.c36b	a36b	f0 17		beq $a384			beq 	_GDCopyToWorkArea
.c36d	a36d	ad c9 07	lda $07c9			lda 	gxCurrentX+1 				; X < 256 X okay
.c370	a370	f0 07		beq $a379			beq 	_GDCheckY
.c372	a372	ad c8 07	lda $07c8			lda 	gxCurrentX 					; otherwise X < 320 = 256 + 64
.c375	a375	c9 40		cmp #$40			cmp 	#64
.c377	a377	b0 08		bcs $a381			bcs 	_GDError1
.c379	a379					_GDCheckY:
.c379	a379	ad ca 07	lda $07ca			lda 	gxCurrentY 					; check Y < Height.
.c37c	a37c	cd e1 07	cmp $07e1			cmp 	gxHeight
.c37f	a37f	90 03		bcc $a384			bcc 	_GDCopyToWorkArea
.c381	a381					_GDError1:
.c381	a381	68		pla				pla
.c382	a382					_GDError2:
.c382	a382	38		sec				sec
.c383	a383	60		rts				rts
.c384	a384					_GDCopyToWorkArea:
.c384	a384	a2 07		ldx #$07			ldx 	#7 							; copy current and last to gxXY/12 work area
.c386	a386					_GDCopy2:
.c386	a386	bd c8 07	lda $07c8,x			lda 	gxCurrentX,x
.c389	a389	9d d0 07	sta $07d0,x			sta 	gxX0,x
.c38c	a38c	ca		dex				dex
.c38d	a38d	10 f7		bpl $a386			bpl 	_GDCopy2
.c38f	a38f	68		pla				pla 								; get command
.c390	a390					_GDExecuteA:
.c390	a390	c9 54		cmp #$54			cmp 	#GRFirstFreeCode*2 			; bad command ?
.c392	a392	b0 ee		bcs $a382			bcs 	_GDError2
.c394	a394	aa		tax				tax 								; go execute the command.
.c395	a395	7c e7 a2	jmp ($a2e7,x)			jmp 	(GRVectorTable,x)
.c398	a398					GXMove:
.c398	a398	18		clc				clc
.c399	a399	60		rts				rts
.c39a	a39a					GRUndefined:
.c39a	a39a	38		sec				sec
.c39b	a39b	60		rts				rts
.c39c	a39c					GXFillCircle:
.c39c	a39c	a9 ff		lda #$ff			lda 	#255 						; A determines fill or not
.c39e	a39e	80 02		bra $a3a2			bra 	GXCircle
.c3a0	a3a0					GXFrameCircle:
.c3a0	a3a0	a9 00		lda #$00			lda 	#0
.c3a2	a3a2					GXCircle:
.c3a2	a3a2	8d 73 08	sta $0873			sta 	gxIsFillMode				; save Fill flag
.c3a5	a3a5	ad d9 07	lda $07d9			lda 	gxBitmapsOn
.c3a8	a3a8	f0 26		beq $a3d0			beq 	_GXCFail
.c3aa	a3aa	20 a6 ad	jsr $ada6			jsr 	GXSortXY 					; topleft/bottomright
.c3ad	a3ad	20 7e ac	jsr $ac7e			jsr 	GXOpenBitmap 				; start drawing
.c3b0	a3b0	20 a2 a4	jsr $a4a2			jsr 	GXCircleSetup 				; set up for drawing
.c3b3	a3b3	9c 74 08	stz $0874			stz 	gxYChanged
.c3b6	a3b6					_GXCircleDraw:
.c3b6	a3b6	ad 71 08	lda $0871			lda 	gxxCentre					; while x <= y
.c3b9	a3b9	cd 72 08	cmp $0872			cmp 	gxYCentre
.c3bc	a3bc	90 0a		bcc $a3c8			bcc 	_GXCircleContinue
.c3be	a3be	d0 03		bne $a3c3			bne 	_GXNoLast  					; fix up if x < y
.c3c0	a3c0	20 d5 a3	jsr $a3d5			jsr 	GXPlot1
.c3c3	a3c3					_GXNoLast:
.c3c3	a3c3	20 86 ac	jsr $ac86			jsr 	GXCloseBitmap 				; close the bitmap
.c3c6	a3c6	18		clc				clc
.c3c7	a3c7	60		rts				rts
.c3c8	a3c8					_GXCircleContinue:
.c3c8	a3c8	20 d2 a3	jsr $a3d2			jsr 	GXPlot2 					; draw it
.c3cb	a3cb	20 4f a4	jsr $a44f			jsr 	GXCircleMove 				; adjust the coordinates
.c3ce	a3ce	80 e6		bra $a3b6			bra 	_GXCircleDraw
.c3d0	a3d0					_GXCFail:
.c3d0	a3d0	38		sec				sec
.c3d1	a3d1	60		rts				rts
.c3d2	a3d2					GXPlot2:
.c3d2	a3d2	20 d5 a3	jsr $a3d5			jsr 	GXPlot1 						; plot and swap, fall through does twice
.c3d5	a3d5					GXPlot1:
.c3d5	a3d5	ad 72 08	lda $0872			lda 	gxYCentre 						; if y = 0, don't do it twice (xor)
.c3d8	a3d8	f0 03		beq $a3dd			beq 	_GXPlot1Only
.c3da	a3da	20 f9 a3	jsr $a3f9			jsr 	GXPlot0 						; plot and negate
.c3dd	a3dd					_GXPlot1Only:
.c3dd	a3dd	20 f9 a3	jsr $a3f9			jsr 	GXPlot0 						; twice, undoing negation
.c3e0	a3e0	ad 71 08	lda $0871			lda 	gxxCentre 						; swap X and Y
.c3e3	a3e3	ae 72 08	ldx $0872			ldx	 	gxYCentre
.c3e6	a3e6	8d 72 08	sta $0872			sta 	gxYCentre
.c3e9	a3e9	8e 71 08	stx $0871			stx 	gxxCentre
.c3ec	a3ec	ad 74 08	lda $0874			lda 	gxYChanged 						; toggle Y Changed flag
.c3ef	a3ef	a9 ff		lda #$ff			lda 	#$FF
.c3f1	a3f1	8d 74 08	sta $0874			sta 	gxYChanged
.c3f4	a3f4	60		rts				rts
.c3f5	a3f5	20 f9 a3	jsr $a3f9			jsr 	GXPlot0 						; do once
.c3f8	a3f8	60		rts				rts
.c3f9	a3f9	ad 73 08	lda $0873	GXPlot0:lda 	gxIsFillMode 					; outline mode, always draw as X or Y will change
.c3fc	a3fc	f0 05		beq $a403			beq 	_GXPlot0Always
.c3fe	a3fe	ad 74 08	lda $0874			lda 	gxYChanged						; fill mode, only draw if changed.
.c401	a401	f0 2d		beq $a430			beq 	GXPlot0Exit
.c403	a403					_GXPlot0Always:
.c403	a403	a2 02		ldx #$02			ldx 	#2 								; copy Y1-A => Y0
.c405	a405	ad 72 08	lda $0872			lda 	gxYCentre
.c408	a408	20 31 a4	jsr $a431			jsr 	GXSubCopy
.c40b	a40b	a2 00		ldx #$00			ldx 	#0 								; copy X1-A => X0,
.c40d	a40d	ad 71 08	lda $0871			lda 	gxxCentre
.c410	a410	20 31 a4	jsr $a431			jsr 	GXSubCopy
.c413	a413	48		pha				pha 									; save last offset X
.c414	a414	20 8e ac	jsr $ac8e			jsr 	gxPositionCalc 					; calculate position/offset.
.c417	a417	68		pla				pla
.c418	a418	0a		asl a				asl 	a 								; store 2 x last offset in gxzTemp0
.c419	a419	85 36		sta $36				sta 	gxzTemp0
.c41b	a41b	64 37		stz $37				stz 	gxzTemp0+1
.c41d	a41d	26 37		rol $37				rol 	gxzTemp0+1
.c41f	a41f	ad 73 08	lda $0873			lda 	gxIsFillMode
.c422	a422	69 80		adc #$80			adc 	#128
.c424	a424	20 72 a8	jsr $a872			jsr 	GXDrawLineTemp0 				; routine from Rectangle.
.c427	a427	38		sec				sec 									; GY = -GY
.c428	a428	a9 00		lda #$00			lda 	#0
.c42a	a42a	ed 72 08	sbc $0872			sbc 	gxYCentre
.c42d	a42d	8d 72 08	sta $0872			sta 	gxYCentre
.c430	a430					GXPlot0Exit:
.c430	a430	60		rts				rts
.c431	a431					GXSubCopy:
.c431	a431	85 36		sta $36				sta 	gxzTemp0
.c433	a433	64 37		stz $37				stz 	gxzTemp0+1
.c435	a435	29 80		and #$80			and 	#$80
.c437	a437	f0 02		beq $a43b			beq 	_GXNoSx
.c439	a439	c6 37		dec $37				dec 	gxzTemp0+1
.c43b	a43b					_GXNoSx:
.c43b	a43b	38		sec				sec
.c43c	a43c	bd d4 07	lda $07d4,x			lda 	gxX1,x
.c43f	a43f	e5 36		sbc $36				sbc 	gxzTemp0
.c441	a441	9d d0 07	sta $07d0,x			sta 	gxX0,x
.c444	a444	bd d5 07	lda $07d5,x			lda 	gxX1+1,x
.c447	a447	e5 37		sbc $37				sbc 	gxzTemp0+1
.c449	a449	9d d1 07	sta $07d1,x			sta 	gxX0+1,x
.c44c	a44c	a5 36		lda $36				lda 	gxzTemp0 						; return A
.c44e	a44e	60		rts				rts
.c44f	a44f					GXCircleMove:
.c44f	a44f	9c 74 08	stz $0874			stz 	gxYChanged 					; clear Y changed flag
.c452	a452	a5 39		lda $39				lda 	gxzTemp1+1 					; check sign of D
.c454	a454	10 0d		bpl $a463			bpl 	_GXEMPositive
.c456	a456	ee 71 08	inc $0871			inc 	gxxCentre 					; X++
.c459	a459	ad 71 08	lda $0871			lda 	gxxCentre
.c45c	a45c	20 82 a4	jsr $a482			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.c45f	a45f	a9 06		lda #$06			lda 	#6  						; and add 6
.c461	a461	80 15		bra $a478			bra 	_GXEMAddD
.c463	a463					_GXEMPositive:
.c463	a463	ee 71 08	inc $0871			inc 	gxxCentre					; X++
.c466	a466	ce 72 08	dec $0872			dec 	gxYCentre 					; Y--
.c469	a469	38		sec				sec 								; calculate X-Y
.c46a	a46a	ad 71 08	lda $0871			lda 	gxxCentre
.c46d	a46d	ed 72 08	sbc $0872			sbc 	gxYCentre
.c470	a470	20 82 a4	jsr $a482			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.c473	a473	a9 0a		lda #$0a			lda 	#10  						; and add 10
.c475	a475	ce 74 08	dec $0874			dec 	gxYChanged
.c478	a478					_GXEMAddD:
.c478	a478	18		clc				clc
.c479	a479	65 38		adc $38				adc 	gxzTemp1
.c47b	a47b	85 38		sta $38				sta 	gxzTemp1
.c47d	a47d	90 02		bcc $a481			bcc 	_GXEMNoCarry
.c47f	a47f	e6 39		inc $39				inc 	gxzTemp1+1
.c481	a481					_GXEMNoCarry:
.c481	a481	60		rts				rts
.c482	a482					_GXAdd4TimesToD:
.c482	a482	85 36		sta $36				sta 	gxzTemp0 					; make 16 bit signed.
.c484	a484	29 80		and #$80			and 	#$80
.c486	a486	f0 02		beq $a48a			beq 	_GXA4Unsigned
.c488	a488	a9 ff		lda #$ff			lda 	#$FF
.c48a	a48a					_GXA4Unsigned:
.c48a	a48a	85 37		sta $37				sta 	gxzTemp0+1
.c48c	a48c	06 36		asl $36				asl 	gxzTemp0  					; x 4
.c48e	a48e	26 37		rol $37				rol 	gxzTemp0+1
.c490	a490	06 36		asl $36				asl 	gxzTemp0
.c492	a492	26 37		rol $37				rol 	gxzTemp0+1
.c494	a494	18		clc				clc 								; add
.c495	a495	a5 36		lda $36				lda		gxzTemp0
.c497	a497	65 38		adc $38				adc 	gxzTemp1
.c499	a499	85 38		sta $38				sta 	gxzTemp1
.c49b	a49b	a5 37		lda $37				lda		gxzTemp0+1
.c49d	a49d	65 39		adc $39				adc 	gxzTemp1+1
.c49f	a49f	85 39		sta $39				sta 	gxzTemp1+1
.c4a1	a4a1	60		rts				rts
.c4a2	a4a2					GXCircleSetup:
.c4a2	a4a2	38		sec				sec
.c4a3	a4a3	ad d6 07	lda $07d6			lda 	gxY1
.c4a6	a4a6	ed d2 07	sbc $07d2			sbc 	gxY0
.c4a9	a4a9	4a		lsr a				lsr 	a
.c4aa	a4aa	8d 70 08	sta $0870			sta 	gxRadius
.c4ad	a4ad	a2 00		ldx #$00			ldx 	#0
.c4af	a4af	20 d1 a4	jsr $a4d1			jsr 	_GXCalculateCentre
.c4b2	a4b2	a2 02		ldx #$02			ldx 	#2
.c4b4	a4b4	20 d1 a4	jsr $a4d1			jsr 	_GXCalculateCentre
.c4b7	a4b7	9c 71 08	stz $0871			stz 	gxxCentre
.c4ba	a4ba	ad 70 08	lda $0870			lda 	gxRadius
.c4bd	a4bd	8d 72 08	sta $0872			sta 	gxYCentre
.c4c0	a4c0	0a		asl a				asl 	a 							; R x 2
.c4c1	a4c1	85 36		sta $36				sta 	gxzTemp0
.c4c3	a4c3	38		sec				sec
.c4c4	a4c4	a9 03		lda #$03			lda 	#3
.c4c6	a4c6	e5 36		sbc $36				sbc 	gxzTemp0
.c4c8	a4c8	85 38		sta $38				sta 	gxzTemp1
.c4ca	a4ca	a9 00		lda #$00			lda 	#0
.c4cc	a4cc	e9 00		sbc #$00			sbc 	#0
.c4ce	a4ce	85 39		sta $39				sta 	gxzTemp1+1
.c4d0	a4d0	60		rts				rts
.c4d1	a4d1					_GXCalculateCentre:
.c4d1	a4d1	38		sec				sec
.c4d2	a4d2	bd d4 07	lda $07d4,x			lda 	gxX1,x
.c4d5	a4d5	7d d0 07	adc $07d0,x			adc 	gxX0,x
.c4d8	a4d8	9d d4 07	sta $07d4,x			sta 	gxX1,x
.c4db	a4db	bd d5 07	lda $07d5,x			lda 	gxX1+1,x
.c4de	a4de	7d d1 07	adc $07d1,x			adc 	gxX0+1,x
.c4e1	a4e1	4a		lsr a				lsr 	a
.c4e2	a4e2	9d d5 07	sta $07d5,x			sta 	gxX1+1,x
.c4e5	a4e5	7e d4 07	ror $07d4,x			ror 	gxX1,x
.c4e8	a4e8	60		rts				rts
.0870						gxRadius:
>0870								.fill 	1
.0871						gxxCentre:
>0871								.fill 	1
.0872						gxYCentre:
>0872								.fill 	1
.0873						gxIsFillMode:
>0873								.fill 	1
.0874						gxYChanged:
>0874								.fill  	1
=64000						ScreenSize200 = 320 * 200
=76800						ScreenSize240 = 320 * 240
.c4e9	a4e9					GXClearBitmap:
.c4e9	a4e9	ad d9 07	lda $07d9			lda 	gxBitmapsOn 				; check BMP turned on.
.c4ec	a4ec	f0 26		beq $a514			beq 	_GXCBFail
.c4ee	a4ee	20 7e ac	jsr $ac7e			jsr 	GXOpenBitmap 				; start access
.c4f1	a4f1	a0 07		ldy #$07			ldy 	#ScreenSize200 / 8192 		; X is pages to clear as 2 graphic heights.
.c4f3	a4f3	ad e1 07	lda $07e1			lda 	gxHeight
.c4f6	a4f6	c9 c8		cmp #$c8			cmp 	#200 						; 200 ?
.c4f8	a4f8	f0 02		beq $a4fc			beq 	_GXCalcLastPage
.c4fa	a4fa	a0 09		ldy #$09			ldy 	#ScreenSize240 / 8192
.c4fc	a4fc					_GXCalcLastPage:
.c4fc	a4fc	98		tya				tya 								; add to base page
.c4fd	a4fd	18		clc				clc
.c4fe	a4fe	6d db 07	adc $07db			adc 	gxBasePage
.c501	a501	85 0b		sta $0b				sta 	GXEditSlot  				; clear from this page back
.c503	a503					_GXClearAll:
.c503	a503	20 16 a5	jsr $a516			jsr 	_GXClearBlock 				; clear 8k block
.c506	a506	c6 0b		dec $0b				dec 	GXEditSlot  				; back to previous
.c508	a508	a5 0b		lda $0b				lda 	GXEditSlot
.c50a	a50a	cd db 07	cmp $07db			cmp 	gxBasePage 					; until before base page
.c50d	a50d	b0 f4		bcs $a503			bcs 	_GXClearAll
.c50f	a50f	20 86 ac	jsr $ac86			jsr 	GXCloseBitmap	 			; stop access
.c512	a512	18		clc				clc
.c513	a513	60		rts				rts
.c514	a514					_GXCBFail:
.c514	a514	38		sec				sec
.c515	a515	60		rts				rts
.c516	a516					_GXClearBlock:
.c516	a516	a9 00		lda #$00			lda 	#((GXMappingAddress) & $FF)
.c518	a518	85 38		sta $38				sta 	0+gxzTemp1
.c51a	a51a	a9 60		lda #$60			lda 	#((GXMappingAddress) >> 8)
.c51c	a51c	85 39		sta $39				sta 	1+gxzTemp1
.c51e	a51e					_GXCB0:
.c51e	a51e	a5 36		lda $36				lda 	gxzTemp0 					; clear colour
.c520	a520	a0 00		ldy #$00			ldy 	#0
.c522	a522					_GXCB1:
.c522	a522	91 38		sta ($38),y			sta 	(gxzTemp1),y
.c524	a524	c8		iny				iny
.c525	a525	91 38		sta ($38),y			sta 	(gxzTemp1),y
.c527	a527	c8		iny				iny
.c528	a528	91 38		sta ($38),y			sta 	(gxzTemp1),y
.c52a	a52a	c8		iny				iny
.c52b	a52b	91 38		sta ($38),y			sta 	(gxzTemp1),y
.c52d	a52d	c8		iny				iny
.c52e	a52e	d0 f2		bne $a522			bne 	_GXCB1
.c530	a530	e6 39		inc $39				inc 	gxzTemp1+1
.c532	a532	a5 39		lda $39				lda 	gxzTemp1+1
.c534	a534	c9 80		cmp #$80			cmp	 	#(GXMappingAddress >> 8)+$20
.c536	a536	d0 e6		bne $a51e			bne 	_GXCB0
.c538	a538	60		rts				rts
.c539	a539					GXInitialise:
.c539	a539	64 01		stz $01				stz 	1 							; access I/O
.c53b	a53b	a9 01		lda #$01			lda 	#1 							; reset bitmap address
.c53d	a53d	8d 00 d0	sta $d000			sta 	$D000
.c540	a540	18		clc				clc
.c541	a541	9c d8 07	stz $07d8			stz 	gxSpritesOn					; sprites/bitmaps/tiles off.
.c544	a544	9c d9 07	stz $07d9			stz 	gxBitmapsOn
.c547	a547	9c da 07	stz $07da			stz 	gxTilesOn
.c54a	a54a	a2 0f		ldx #$0f			ldx 	#15 						; erase work area
.c54c	a54c					_GXIClear:
.c54c	a54c	9e c8 07	stz $07c8,x			stz 	gxCurrentX,x
.c54f	a54f	ca		dex				dex
.c550	a550	10 fa		bpl $a54c			bpl 	_GXIClear
.c552	a552	20 99 a6	jsr $a699			jsr 	GXClearSpriteStore 			; clear sprite backup space.
.c555	a555	a9 40		lda #$40			lda 	#$40                   		; Layer 0 = Bitmap 0, Layer 1 = Tile map 0
.c557	a557	8d 02 d0	sta $d002			sta 	$D002
.c55a	a55a	a9 15		lda #$15			lda 	#$15                   		; Layer 2 = Tile Map 1
.c55c	a55c	8d 03 d0	sta $d003			sta 	$D003
.c55f	a55f	60		rts				rts
.c560	a560					GXControlBitmap:
.c560	a560	64 01		stz $01				stz 	1
.c562	a562	a5 36		lda $36				lda 	gxzTemp0 					; get control bits
.c564	a564	29 01		and #$01			and 	#1 							; get bitmap flag (is enabled)
.c566	a566	8d d9 07	sta $07d9			sta 	gxBitmapsOn
.c569	a569	4a		lsr a				lsr 	a 							; bit 0 into carry.
.c56a	a56a	ad 00 d0	lda $d000			lda 	$D000 						; read Vicky MCR
.c56d	a56d	09 07		ora #$07			ora 	#7 							; turn graphics, text, textoverlay on.
.c56f	a56f	29 f7		and #$f7			and 	#$F7 						; clear bitmap bit
.c571	a571	90 02		bcc $a575			bcc 	_CBNotOn
.c573	a573	09 08		ora #$08			ora 	#$08 						; bitmap on if 1 on 0 off
.c575	a575					_CBNotOn:
.c575	a575	8d 00 d0	sta $d000			sta 	$D000 						; update Vicky MCR
.c578	a578	a5 36		lda $36				lda 	gxzTemp0 					; get control settings (bits 0-2)
.c57a	a57a	29 07		and #$07			and 	#7
.c57c	a57c	8d 00 d1	sta $d100			sta 	$D100 						; write in Vicky Bitmap Control Register #0
.c57f	a57f	a5 37		lda $37				lda 	gxzTemp0+1 					; get the base page requested
.c581	a581	d0 02		bne $a585			bne 	_CBNotDefault
.c583	a583	a9 08		lda #$08			lda 	#8  						; if zero, use default 8 e.g. bitmap at $10000
.c585	a585					_CBNotDefault:
.c585	a585	8d db 07	sta $07db			sta 	gxBasePage 					; save as bitmap base page.
.c588	a588	20 8b a6	jsr $a68b			jsr 	GXCalculateBaseAddress 	 	; convert page# to address
.c58b	a58b	a5 37		lda $37				lda 	gxzTemp0+1 					; copy address into Bitmap address registers
.c58d	a58d	8d 03 d1	sta $d103			sta 	$D103
.c590	a590	a5 36		lda $36				lda 	gxzTemp0
.c592	a592	8d 02 d1	sta $d102			sta 	$D102
.c595	a595	9c 01 d1	stz $d101			stz 	$D101
.c598	a598	a2 f0		ldx #$f0			ldx 	#240 						; height is 240 or 200 ?
.c59a	a59a	ad 01 d0	lda $d001			lda 	$D001 						; read MCR bit 0
.c59d	a59d	29 01		and #$01			and 	#1
.c59f	a59f	f0 02		beq $a5a3			beq 	_CBHaveHeight
.c5a1	a5a1	a2 c8		ldx #$c8			ldx 	#200 						; if bit 0 set 320x200
.c5a3	a5a3					_CBHaveHeight
.c5a3	a5a3	8e e1 07	stx $07e1			stx 	gxHeight
.c5a6	a5a6	18		clc				clc
.c5a7	a5a7	60		rts				rts
.c5a8	a5a8					GXControlSprite:
.c5a8	a5a8	64 01		stz $01				stz 	1
.c5aa	a5aa	a5 36		lda $36				lda 	gxzTemp0 					; get control bits
.c5ac	a5ac	29 01		and #$01			and 	#1 							; set sprites flag
.c5ae	a5ae	8d d8 07	sta $07d8			sta 	gxSpritesOn
.c5b1	a5b1	4a		lsr a				lsr 	a 							; bit 0 into carry
.c5b2	a5b2	ad 00 d0	lda $d000			lda 	$D000 						; read Vicky MCR
.c5b5	a5b5	09 07		ora #$07			ora 	#7 							; turn graphics, text, textoverlay on.
.c5b7	a5b7	29 df		and #$df			and 	#$DF 						; clear sprite bit
.c5b9	a5b9	90 02		bcc $a5bd			bcc 	_CSNotOn
.c5bb	a5bb	09 20		ora #$20			ora 	#$20 						; sprite on if 1 on 0 off
.c5bd	a5bd					_CSNotOn:
.c5bd	a5bd	8d 00 d0	sta $d000			sta 	$D000 						; update Vicky MCR
.c5c0	a5c0	a5 37		lda $37				lda 	gxzTemp0+1 					; get the base page
.c5c2	a5c2	d0 02		bne $a5c6			bne 	_CSNotDefault
.c5c4	a5c4	a9 18		lda #$18			lda 	#24  						; if zero, use 24 e.g. sprites at $30000
.c5c6	a5c6					_CSNotDefault:
.c5c6	a5c6	8d dc 07	sta $07dc			sta 	gxSpritePage
.c5c9	a5c9	20 8b a6	jsr $a68b			jsr 	GXCalculateBaseAddress 	 	; convert page# to address
.c5cc	a5cc	a5 36		lda $36				lda 	gxzTemp0 					; save this so we know where the sprites are.
.c5ce	a5ce	8d eb 07	sta $07eb			sta 	gxSpriteOffsetBase
.c5d1	a5d1	a5 37		lda $37				lda 	gxzTemp0+1
.c5d3	a5d3	8d ec 07	sta $07ec			sta 	gxSpriteOffsetBase+1
.c5d6	a5d6	a2 00		ldx #$00			ldx 	#0 							; disable all sprites, clears all sprite memory.
.c5d8	a5d8					_CSClear:
.c5d8	a5d8	9e 00 d9	stz $d900,x			stz 	$D900,x
.c5db	a5db	9e 00 da	stz $da00,x			stz 	$DA00,x
.c5de	a5de	ca		dex				dex
.c5df	a5df	d0 f7		bne $a5d8			bne 	_CSClear
.c5e1	a5e1	9c ea 07	stz $07ea			stz 	GSCurrentSpriteAddr+1 		; no sprite selected.
.c5e4	a5e4	20 99 a6	jsr $a699			jsr 	GXClearSpriteStore
.c5e7	a5e7	18		clc				clc
.c5e8	a5e8	60		rts				rts
.c5e9	a5e9					GXControlTilemap:
.c5e9	a5e9	64 01		stz $01				stz 	1 							; access I/O
.c5eb	a5eb	a5 36		lda $36				lda 	gxzTemp0 					; get the Map Page/Enable
.c5ed	a5ed	30 0d		bmi $a5fc			bmi 	_GXCTOn
.c5ef	a5ef	ad 00 d0	lda $d000			lda 	$D000 						; turn off bitmap enable bit in MCR
.c5f2	a5f2	29 ef		and #$ef			and 	#$EF 						; clear bit 4
.c5f4	a5f4	8d 00 d0	sta $d000			sta 	$D000
.c5f7	a5f7	9c da 07	stz $07da			stz 	gxTilesOn 					; clear tiles on flag.
.c5fa	a5fa	18		clc				clc
.c5fb	a5fb	60		rts				rts
.c5fc	a5fc					_GXCTOn:
.c5fc	a5fc	8d da 07	sta $07da			sta 	gxTilesOn 					; set tiles on flag.
.c5ff	a5ff	ad 00 d0	lda $d000			lda 	$D000	 					; turn tilemap on
.c602	a602	09 17		ora #$17			ora 	#$17
.c604	a604	8d 00 d0	sta $d000			sta 	$D000
.c607	a607	9c c0 d2	stz $d2c0			stz 	$D2C0 						; turn off tilemap#1 and tilemap#2
.c60a	a60a	9c 18 d2	stz $d218			stz 	$D218
.c60d	a60d	a9 40		lda #$40			lda 	#64 						; default size of 64x32
.c60f	a60f	8d df 07	sta $07df			sta 	gxTileMapWidth
.c612	a612	a9 20		lda #$20			lda		#32
.c614	a614	8d e0 07	sta $07e0			sta 	gxTileMapHeight
.c617	a617	ad da 07	lda $07da			lda 	gxTilesOn 					; set the tile map page
.c61a	a61a	29 7f		and #$7f			and 	#$7F
.c61c	a61c	d0 02		bne $a620			bne	 	_GXCTNotMapDefault 			; check for default
.c61e	a61e	a9 12		lda #$12			lda 	#TILEMAP_ADDRESS >> 13
.c620	a620					_GXCTNotMapDefault:
.c620	a620	8d de 07	sta $07de			sta 	gxTileMapPage
.c623	a623	a5 37		lda $37				lda 	gxzTemp0+1 					; set the tile image page
.c625	a625	d0 02		bne $a629			bne 	_GXCTNotImgDefault 			; check for default
.c627	a627	a9 13		lda #$13			lda 	#TILEIMAGES_ADDRESS >> 13
.c629	a629					_GXCTNotImgDefault:
.c629	a629	8d dd 07	sta $07dd			sta 	gxTileImagePage
.c62c	a62c	a9 11		lda #$11			lda 	#$11 						; set tilemap#0 on and 8x8
.c62e	a62e	8d 00 d2	sta $d200			sta 	$D200
.c631	a631	ad de 07	lda $07de			lda 	gxTileMapPage 				; put tile map address in.
.c634	a634	20 8b a6	jsr $a68b			jsr		GXCalculateBaseAddress
.c637	a637	9c 01 d2	stz $d201			stz 	$D201
.c63a	a63a	a5 36		lda $36				lda 	gxzTemp0
.c63c	a63c	8d 02 d2	sta $d202			sta 	$D202
.c63f	a63f	a5 37		lda $37				lda 	gxzTemp0+1
.c641	a641	8d 03 d2	sta $d203			sta 	$D203
.c644	a644	ad df 07	lda $07df			lda 	gxTileMapWidth	 			; set tilemap size.
.c647	a647	8d 04 d2	sta $d204			sta 	$D204
.c64a	a64a	ad e0 07	lda $07e0			lda 	gxTileMapHeight
.c64d	a64d	8d 06 d2	sta $d206			sta 	$D206
.c650	a650	9c 08 d2	stz $d208			stz 	$D208 						; clear scrolling register
.c653	a653	9c 09 d2	stz $d209			stz 	$D209
.c656	a656	9c 0a d2	stz $d20a			stz 	$D20A
.c659	a659	9c 0b d2	stz $d20b			stz 	$D20B
.c65c	a65c	ad dd 07	lda $07dd			lda 	gxTileImagePage 			; set the tile image address
.c65f	a65f	20 8b a6	jsr $a68b			jsr 	GXCalculateBaseAddress
.c662	a662	9c 80 d2	stz $d280			stz 	$D280
.c665	a665	a5 36		lda $36				lda 	gxzTemp0
.c667	a667	8d 81 d2	sta $d281			sta 	$D281
.c66a	a66a	a5 37		lda $37				lda 	gxzTemp0+1
.c66c	a66c	8d 82 d2	sta $d282			sta 	$D282
.c66f	a66f	18		clc				clc
.c670	a670	60		rts				rts
.c671	a671					GXControlTileSize:
.c671	a671	ad da 07	lda $07da			lda 	gxTilesOn 					; check on
.c674	a674	38		sec				sec
.c675	a675	f0 13		beq $a68a			beq 	_GXCTSExit
.c677	a677	64 01		stz $01				stz 	1 							; access I/O 0
.c679	a679	a5 36		lda $36				lda 	gxzTemp0 					; save parameter to registes
.c67b	a67b	8d df 07	sta $07df			sta 	gxTileMapWidth
.c67e	a67e	8d 04 d2	sta $d204			sta 	$D204
.c681	a681	a5 37		lda $37				lda 	gxzTemp0+1
.c683	a683	8d e0 07	sta $07e0			sta 	gxTileMapHeight
.c686	a686	8d 06 d2	sta $d206			sta 	$D206
.c689	a689	18		clc				clc
.c68a	a68a					_GXCTSExit:
.c68a	a68a	60		rts				rts
.c68b	a68b					GXCalculateBaseAddress:
.c68b	a68b	85 36		sta $36				sta 	gxzTemp0
.c68d	a68d	64 37		stz $37				stz 	gxzTemp0+1
.c68f	a68f	a9 05		lda #$05			lda 	#5
.c691	a691					_GXShift:
.c691	a691	06 36		asl $36				asl 	gxzTemp0
.c693	a693	26 37		rol $37				rol 	gxzTemp0+1
.c695	a695	3a		dec a				dec		a
.c696	a696	d0 f9		bne $a691			bne 	_GXShift
.c698	a698	60		rts				rts
.c699	a699					GXClearSpriteStore:
.c699	a699	a2 3f		ldx #$3f			ldx 	#63 						; erase 64 sprite store elements
.c69b	a69b					_GXCSSLoop:
.c69b	a69b	9e 2d 08	stz $082d,x			stz 	gxSpriteHigh,x
.c69e	a69e	a9 80		lda #$80			lda 	#$80 						; set the 'hidden' bit.
.c6a0	a6a0	9d ed 07	sta $07ed,x			sta 	gxSpriteLow,x
.c6a3	a6a3	ca		dex				dex
.c6a4	a6a4	10 f5		bpl $a69b			bpl 	_GXCSSLoop
.c6a6	a6a6	60		rts				rts
.c6a7	a6a7					GXLine:
.c6a7	a6a7	ad d9 07	lda $07d9			lda 	gxBitmapsOn					; check bitmap on.
.c6aa	a6aa	f0 28		beq $a6d4			beq 	_GXLFail
.c6ac	a6ac	20 7e ac	jsr $ac7e			jsr 	GXOpenBitmap 				; access it.
.c6af	a6af	20 c4 ad	jsr $adc4			jsr 	GXSortY						; sort pairs so Y1 >= Y0 e.g. top to bottom.
.c6b2	a6b2	20 7a a7	jsr $a77a			jsr 	GXLineSetup 				; the calculations in the linescanner constructor
.c6b5	a6b5	20 8e ac	jsr $ac8e			jsr 	gxPositionCalc 				; calculate position/offset.
.c6b8	a6b8					_GXDrawLoop:
.c6b8	a6b8	ac e7 07	ldy $07e7			ldy 	gxOffset 					; draw the pixel
.c6bb	a6bb	b1 3c		lda ($3c),y			lda 	(gxzScreen),y
.c6bd	a6bd	2d e5 07	and $07e5			and 	gxANDValue
.c6c0	a6c0	4d e4 07	eor $07e4			eor 	gxEORValue
.c6c3	a6c3	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.c6c5	a6c5	20 d6 a6	jsr $a6d6			jsr 	GXLineIsComplete 			; is the line complete ?
.c6c8	a6c8	f0 05		beq $a6cf			beq 	_GXLExit
.c6ca	a6ca	20 f1 a6	jsr $a6f1			jsr 	GXLineAdvance 				; code as per advance method
.c6cd	a6cd	80 e9		bra $a6b8			bra 	_GXDrawLoop
.c6cf	a6cf					_GXLExit:
.c6cf	a6cf	20 86 ac	jsr $ac86			jsr 	GXCloseBitmap 				; restore and return success.
.c6d2	a6d2	18		clc				clc
.c6d3	a6d3	60		rts				rts
.c6d4	a6d4					_GXLFail:
.c6d4	a6d4	38		sec				sec
.c6d5	a6d5	60		rts				rts
.c6d6	a6d6					GXLineIsComplete:
.c6d6	a6d6	ad 77 08	lda $0877			lda 	gxIsDiffYLarger 			; is dy larger
.c6d9	a6d9	d0 0f		bne $a6ea			bne 	_GXLICCompareY 				; if so compare Y1 versus Y0
.c6db	a6db	ad d0 07	lda $07d0			lda 	gxX0 						; compare X, LSB and MSB
.c6de	a6de	4d d4 07	eor $07d4			eor 	gxX1
.c6e1	a6e1	d0 06		bne $a6e9			bne 	_GXLICExit
.c6e3	a6e3	ad d1 07	lda $07d1			lda 	gxX0+1
.c6e6	a6e6	4d d5 07	eor $07d5			eor 	gxX1+1
.c6e9	a6e9					_GXLICExit:
.c6e9	a6e9	60		rts				rts
.c6ea	a6ea					_GXLICCompareY:
.c6ea	a6ea	ad d6 07	lda $07d6			lda 	gxY1
.c6ed	a6ed	4d d2 07	eor $07d2			eor 	gxY0
.c6f0	a6f0	60		rts				rts
.c6f1	a6f1					GXLineAdvance:
.c6f1	a6f1	18		clc				clc 								; add adjust to position
.c6f2	a6f2	ad 79 08	lda $0879			lda 	gxPosition
.c6f5	a6f5	6d 7a 08	adc $087a			adc 	gxAdjust
.c6f8	a6f8	8d 79 08	sta $0879			sta 	gxPosition
.c6fb	a6fb	9c 7c 08	stz $087c			stz 	gxAddSelect 				; clear add select flag
.c6fe	a6fe	b0 05		bcs $a705			bcs 	_GXLAOverflow 				; if carry out, overflowed.
.c700	a700	cd 7b 08	cmp $087b			cmp 	gxTotal 					; if exceeded total
.c703	a703	90 0a		bcc $a70f			bcc 	_GXLANoExtra
.c705	a705					_GXLAOverflow:
.c705	a705	ce 7c 08	dec $087c			dec 	gxAddSelect 				; set addselect to $FF
.c708	a708	38		sec				sec 								; subtract total and write back
.c709	a709	ed 7b 08	sbc $087b			sbc 	gxTotal
.c70c	a70c	8d 79 08	sta $0879			sta 	gxPosition
.c70f	a70f					_GXLANoExtra:
.c70f	a70f	ad 77 08	lda $0877			lda 	gxIsDiffYLarger
.c712	a712	f0 0d		beq $a721			beq 	_GXDXLarger
.c714	a714	20 73 a7	jsr $a773			jsr 	GXIncrementY
.c717	a717	ad 7c 08	lda $087c			lda 	gxAddSelect
.c71a	a71a	f0 10		beq $a72c			beq 	_GXLAExit
.c71c	a71c	20 2d a7	jsr $a72d			jsr 	gxAdjustX
.c71f	a71f	80 0b		bra $a72c			bra 	_GXLAExit
.c721	a721					_GXDXLarger:
.c721	a721	20 2d a7	jsr $a72d			jsr 	gxAdjustX
.c724	a724	ad 7c 08	lda $087c			lda 	gxAddSelect
.c727	a727	f0 03		beq $a72c			beq 	_GXLAExit
.c729	a729	20 73 a7	jsr $a773			jsr 	GXIncrementY
.c72c	a72c					_GXLAExit:
.c72c	a72c	60		rts				rts
.c72d	a72d					gxAdjustX:
.c72d	a72d	ad 78 08	lda $0878			lda 	gxDXNegative
.c730	a730	10 25		bpl $a757			bpl 	_GXAXRight
.c732	a732	ad d0 07	lda $07d0			lda 	gxX0
.c735	a735	d0 03		bne $a73a			bne 	_GXAXNoBorrow
.c737	a737	ce d1 07	dec $07d1			dec 	gxX0+1
.c73a	a73a					_GXAXNoBorrow:
.c73a	a73a	ce d0 07	dec $07d0			dec 	gxX0
.c73d	a73d	ce e7 07	dec $07e7			dec 	gxOffset 					; pixel left
.c740	a740	ad e7 07	lda $07e7			lda 	gxOffset
.c743	a743	c9 ff		cmp #$ff			cmp 	#$FF
.c745	a745	d0 0f		bne $a756			bne 	_GXAYExit 					; underflow
.c747	a747	c6 3d		dec $3d				dec 	gxzScreen+1 					; borrow
.c749	a749	a5 3d		lda $3d				lda 	gxzScreen+1 					; gone off page
.c74b	a74b	c9 60		cmp #$60			cmp 	#GXMappingAddress >> 8
.c74d	a74d	b0 07		bcs $a756			bcs 	_GXAYExit
.c74f	a74f	18		clc				clc
.c750	a750	69 20		adc #$20			adc 	#$20 						; fix up
.c752	a752	85 3d		sta $3d				sta 	gxzScreen+1
.c754	a754	c6 0b		dec $0b				dec 	GXEditSlot 				; back one page
.c756	a756					_GXAYExit:
.c756	a756	60		rts				rts
.c757	a757					_GXAXRight:
.c757	a757	ee d0 07	inc $07d0			inc 	gxX0
.c75a	a75a	d0 03		bne $a75f			bne 	_GXAXNoCarry
.c75c	a75c	ee d1 07	inc $07d1			inc 	gxX0+1
.c75f	a75f					_GXAXNoCarry:
.c75f	a75f	ee e7 07	inc $07e7			inc 	gxOffset 					; pixel right
.c762	a762	d0 0e		bne $a772			bne 	_GXAXExit 					; if not overflowed, exit.
.c764	a764	e6 3d		inc $3d				inc 	gxzScreen+1 					; next line
.c766	a766	a5 3d		lda $3d				lda 	gxzScreen+1
.c768	a768	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page ?
.c76a	a76a	90 06		bcc $a772			bcc 	_GXAXExit
.c76c	a76c	e9 20		sbc #$20			sbc 	#$20 						; fix up
.c76e	a76e	85 3d		sta $3d				sta 	gxzScreen+1
.c770	a770	e6 0b		inc $0b				inc 	GXEditSlot 				; next page
.c772	a772					_GXAXExit:
.c772	a772	60		rts				rts
.c773	a773					GXIncrementY:
.c773	a773	ee d2 07	inc $07d2			inc 	gxY0
.c776	a776	20 e4 ac	jsr $ace4			jsr 	GXMovePositionDown
.c779	a779	60		rts				rts
.c77a	a77a					GXLineSetup:
.c77a	a77a	ad d6 07	lda $07d6			lda 	gxY1
.c77d	a77d	38		sec				sec
.c77e	a77e	ed d2 07	sbc $07d2			sbc 	gxY0
.c781	a781	4a		lsr a				lsr 	a
.c782	a782	8d 76 08	sta $0876			sta 	gxDiffY
.c785	a785	9c 78 08	stz $0878			stz 	gxDXNegative 				; clear -ve flag
.c788	a788	38		sec				sec
.c789	a789	ad d4 07	lda $07d4			lda 	gxX1
.c78c	a78c	ed d0 07	sbc $07d0			sbc 	gxX0
.c78f	a78f	8d 75 08	sta $0875			sta 	gxDiffX
.c792	a792	ad d5 07	lda $07d5			lda 	gxX1+1 						; calculate MSB
.c795	a795	ed d1 07	sbc $07d1			sbc 	gxX0+1
.c798	a798	6a		ror a				ror 	a 							; rotate bit into DiffX halving it
.c799	a799	6e 75 08	ror $0875			ror 	gxDiffX
.c79c	a79c	0a		asl a				asl 	a
.c79d	a79d	10 0c		bpl $a7ab			bpl 	_GDXNotNegative
.c79f	a79f	a9 00		lda #$00			lda 	#0 							; make absolute value of |dx|
.c7a1	a7a1	38		sec				sec
.c7a2	a7a2	ed 75 08	sbc $0875			sbc 	gxDiffX
.c7a5	a7a5	8d 75 08	sta $0875			sta 	gxDiffX
.c7a8	a7a8	ce 78 08	dec $0878			dec 	gxDXNegative 				; -ve flag = $FF.
.c7ab	a7ab					_GDXNotNegative:
.c7ab	a7ab	9c 77 08	stz $0877			stz 	gxIsDiffYLarger 			; clear larger flag
.c7ae	a7ae	ad 76 08	lda $0876			lda 	gxDiffY 					; set adjust and total.
.c7b1	a7b1	8d 7a 08	sta $087a			sta 	gxAdjust
.c7b4	a7b4	ad 75 08	lda $0875			lda 	gxDiffX
.c7b7	a7b7	8d 7b 08	sta $087b			sta 	gxTotal
.c7ba	a7ba	ad 76 08	lda $0876			lda 	gxDiffY 					; if dy > dx
.c7bd	a7bd	cd 75 08	cmp $0875			cmp 	gxDiffX
.c7c0	a7c0	90 0f		bcc $a7d1			bcc 	_GDXNotLarger
.c7c2	a7c2	ce 77 08	dec $0877			dec 	gxIsDiffYLarger 			; set the dy larger flag
.c7c5	a7c5	ad 75 08	lda $0875			lda 	gxDiffX 					; set adjust and total other way round
.c7c8	a7c8	8d 7a 08	sta $087a			sta 	gxAdjust
.c7cb	a7cb	ad 76 08	lda $0876			lda 	gxDiffY
.c7ce	a7ce	8d 7b 08	sta $087b			sta 	gxTotal
.c7d1	a7d1					_GDXNotLarger:
.c7d1	a7d1	ad 7b 08	lda $087b			lda 	gxTotal
.c7d4	a7d4	4a		lsr a				lsr 	a
.c7d5	a7d5	8d 79 08	sta $0879			sta 	gxPosition
.c7d8	a7d8	60		rts				rts
.0875						gxDiffX:
>0875								.fill 	1
.0876						gxDiffY:
>0876								.fill 	1
.0877						gxIsDiffYLarger:
>0877								.fill 	1
.0878						gxDXNegative:
>0878								.fill 	1
.0879						gxPosition:
>0879								.fill 	1
.087a						gxAdjust:
>087a								.fill 	1
.087b						gxTotal:
>087b								.fill 	1
.087c						gxAddSelect:
>087c								.fill 	1
.c7d9	a7d9					GXSetColourMode:
.c7d9	a7d9	a6 36		ldx $36				ldx 	gxzTemp0
.c7db	a7db	8e e3 07	stx $07e3			stx 	gxColour 								; set colour
.c7de	a7de	a5 37		lda $37				lda 	gxzTemp0+1 								;
.c7e0	a7e0	8d e2 07	sta $07e2			sta 	gxMode 									; set mode
.c7e3	a7e3	29 03		and #$03			and 	#3 										; only interested in bits 0-3
.c7e5	a7e5	9c e5 07	stz $07e5			stz 	gxANDValue 								; initially AND with 0, and EOR with Colour
.c7e8	a7e8	ae e3 07	ldx $07e3			ldx 	gxColour
.c7eb	a7eb	8e e4 07	stx $07e4			stx 	gxEORValue
.c7ee	a7ee	c9 02		cmp #$02			cmp 	#2 										; if mode 2/3 And with colour
.c7f0	a7f0	90 03		bcc $a7f5			bcc 	_GXSDCNotAndColour
.c7f2	a7f2	8e e5 07	stx $07e5			stx 	gxANDValue
.c7f5	a7f5					_GXSDCNotAndColour:
.c7f5	a7f5	d0 03		bne $a7fa			bne 	_GXSDCNotAnd 							; mode 2, Don't EOR with colour
.c7f7	a7f7	9c e4 07	stz $07e4			stz 	gxEORValue
.c7fa	a7fa					_GXSDCNotAnd:
.c7fa	a7fa	4a		lsr a				lsr 	a 										; if bit 0 set, 1's complement AND value
.c7fb	a7fb	90 08		bcc $a805			bcc 	_GXSDCNoFlip
.c7fd	a7fd	ad e5 07	lda $07e5			lda	 	gxANDValue
.c800	a800	49 ff		eor #$ff			eor 	#$FF
.c802	a802	8d e5 07	sta $07e5			sta 	gxANDValue
.c805	a805					_GXSDCNoFlip:
.c805	a805	18		clc				clc
.c806	a806	60		rts				rts
.c807	a807					GXPlotPoint:
.c807	a807	20 7e ac	jsr $ac7e			jsr 	GXOpenBitmap 				; start drawing
.c80a	a80a	20 8e ac	jsr $ac8e			jsr 	gxPositionCalc 				; setup gxzScreen, gxOffset and the position.
.c80d	a80d	ac e7 07	ldy $07e7			ldy 	gxOffset
.c810	a810	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 				; set pixel on the right
.c812	a812	2d e5 07	and $07e5			and 	gxANDValue
.c815	a815	4d e4 07	eor $07e4			eor 	gxEORValue
.c818	a818	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.c81a	a81a	20 86 ac	jsr $ac86			jsr 	GXCloseBitmap 				; stop drawing and exit
.c81d	a81d	18		clc				clc
.c81e	a81e	60		rts				rts
.c81f	a81f					GXFillRectangle:
.c81f	a81f	38		sec				sec 								; pass carry in for fill/frame
.c820	a820	80 01		bra $a823			bra 	GXRectangle
.c822	a822					GXFrameRectangle:
.c822	a822	18		clc				clc
.c823	a823					GXRectangle:
.c823	a823	ad d9 07	lda $07d9			lda 	gxBitmapsOn 				; exit if off.
.c826	a826	f0 35		beq $a85d			beq 	_GXRFail
.c828	a828	08		php				php 								; save Fill flag (CS)
.c829	a829	20 7e ac	jsr $ac7e			jsr 	GXOpenBitmap 				; start drawing
.c82c	a82c	20 a6 ad	jsr $ada6			jsr 	GXSortXY 					; sort both X and Y so top left/bottom right
.c82f	a82f	20 8e ac	jsr $ac8e			jsr 	gxPositionCalc 				; setup gxzScreen, gxOffset and the position.
.c832	a832	38		sec				sec 								; sec = Draw line
.c833	a833	20 5f a8	jsr $a85f			jsr 	GXDrawLineX1X0 				; draw a line length X1-X0
.c836	a836	ad d2 07	lda $07d2			lda 	gxY0 						; reached end of rectangle ?
.c839	a839	cd d6 07	cmp $07d6			cmp 	gxY1 						; e.g. 1 pixel high.
.c83c	a83c	f0 19		beq $a857			beq 	_GXRectangleExit
.c83e	a83e					_GXRectLoop:
.c83e	a83e	20 e4 ac	jsr $ace4			jsr 	GXMovePositionDown 			; down one.
.c841	a841	ee d2 07	inc $07d2			inc 	gxY0 						; change Y pos
.c844	a844	ad d2 07	lda $07d2			lda 	gxY0 						; reached last line
.c847	a847	cd d6 07	cmp $07d6			cmp 	gxY1
.c84a	a84a	f0 07		beq $a853			beq 	_GXLastLine
.c84c	a84c	28		plp				plp 								; get flag back for solid/edged
.c84d	a84d	08		php				php
.c84e	a84e	20 5f a8	jsr $a85f			jsr 	GXDrawLineX1X0 				; draw horizontal line
.c851	a851	80 eb		bra $a83e			bra 	_GXRectLoop
.c853	a853					_GXLastLine:
.c853	a853	38		sec				sec
.c854	a854	20 5f a8	jsr $a85f			jsr 	GXDrawLineX1X0
.c857	a857					_GXRectangleExit:
.c857	a857	68		pla				pla 								; throw fill flag.
.c858	a858	20 86 ac	jsr $ac86			jsr 	GXCloseBitmap 				; stop drawing and exit
.c85b	a85b	18		clc				clc
.c85c	a85c	60		rts				rts
.c85d	a85d					_GXRFail:
.c85d	a85d	38		sec				sec
.c85e	a85e	60		rts				rts
.c85f	a85f					GXDrawLineX1X0:
.c85f	a85f	08		php				php 								; save solid/either-end
.c860	a860	38		sec				sec 								; calculate x1-x0
.c861	a861	ad d4 07	lda $07d4			lda		gxX1
.c864	a864	ed d0 07	sbc $07d0			sbc 	gxX0
.c867	a867	85 36		sta $36				sta 	gxzTemp0
.c869	a869	ad d5 07	lda $07d5			lda 	gxX1+1
.c86c	a86c	ed d1 07	sbc $07d1			sbc 	gxX0+1
.c86f	a86f	85 37		sta $37				sta 	gxzTemp0+1
.c871	a871	28		plp				plp
.c872	a872					GXDrawLineTemp0:
.c872	a872	a5 3c		lda $3c				lda 	gxzScreen 					; push gxzScreen, gxOffset and GXEditSlot on stack
.c874	a874	48		pha				pha
.c875	a875	a5 3d		lda $3d				lda 	gxzScreen+1
.c877	a877	48		pha				pha
.c878	a878	ad e7 07	lda $07e7			lda 	gxOffset
.c87b	a87b	48		pha				pha
.c87c	a87c	a5 0b		lda $0b				lda 	GXEditSlot
.c87e	a87e	48		pha				pha
.c87f	a87f	ac e7 07	ldy $07e7			ldy 	gxOffset 					; Y offset
.c882	a882	90 1e		bcc $a8a2			bcc 	_GXDLTEndPoints 			; if CC draw end points only.
.c884	a884					_GXDLTLine:
.c884	a884	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 				; set pixel
.c886	a886	2d e5 07	and $07e5			and 	gxANDValue
.c889	a889	4d e4 07	eor $07e4			eor 	gxEORValue
.c88c	a88c	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.c88e	a88e	a5 36		lda $36				lda 	gxzTemp0 					; decrement counter
.c890	a890	d0 04		bne $a896			bne 	_GXDLTNoBorrow
.c892	a892	c6 37		dec $37				dec 	gxzTemp0+1 					; borrow, if goes -ve then exit
.c894	a894	30 2e		bmi $a8c4			bmi 	_GXDLTExit
.c896	a896					_GXDLTNoBorrow:
.c896	a896	c6 36		dec $36				dec 	gxzTemp0
.c898	a898	c8		iny				iny 								; next slot.
.c899	a899	d0 e9		bne $a884			bne 	_GXDLTLine
.c89b	a89b	e6 3d		inc $3d				inc 	gxzScreen+1 				; carry to next
.c89d	a89d	20 d2 a8	jsr $a8d2			jsr 	GXDLTCheckWrap				; check for new page.
.c8a0	a8a0	80 e2		bra $a884			bra 	_GXDLTLine
.c8a2	a8a2					_GXDLTEndPoints:
.c8a2	a8a2	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 				; set pixel
.c8a4	a8a4	2d e5 07	and $07e5			and 	gxANDValue
.c8a7	a8a7	4d e4 07	eor $07e4			eor 	gxEORValue
.c8aa	a8aa	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.c8ac	a8ac	98		tya				tya 								; advance to right side
.c8ad	a8ad	18		clc				clc
.c8ae	a8ae	65 36		adc $36				adc 	gxzTemp0
.c8b0	a8b0	a8		tay				tay
.c8b1	a8b1	a5 3d		lda $3d				lda 	gxzScreen+1
.c8b3	a8b3	65 37		adc $37				adc 	gxzTemp0+1
.c8b5	a8b5	85 3d		sta $3d				sta 	gxzScreen+1
.c8b7	a8b7	20 d2 a8	jsr $a8d2			jsr 	GXDLTCheckWrap 				; fix up.
.c8ba	a8ba	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 				; set pixel on the right
.c8bc	a8bc	2d e5 07	and $07e5			and 	gxANDValue
.c8bf	a8bf	4d e4 07	eor $07e4			eor 	gxEORValue
.c8c2	a8c2	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.c8c4	a8c4					_GXDLTExit:
.c8c4	a8c4	68		pla				pla
.c8c5	a8c5	85 0b		sta $0b				sta 	GXEditSlot
.c8c7	a8c7	68		pla				pla
.c8c8	a8c8	8d e7 07	sta $07e7			sta 	gxOffset
.c8cb	a8cb	68		pla				pla
.c8cc	a8cc	85 3d		sta $3d				sta 	gxzScreen+1
.c8ce	a8ce	68		pla				pla
.c8cf	a8cf	85 3c		sta $3c				sta 	gxzScreen
.c8d1	a8d1	60		rts				rts
.c8d2	a8d2					GXDLTCheckWrap:
.c8d2	a8d2	a5 3d		lda $3d				lda 	gxzScreen+1 				; check end of page
.c8d4	a8d4	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8)
.c8d6	a8d6	90 06		bcc $a8de			bcc 	_GXDLTCWExit
.c8d8	a8d8	e9 20		sbc #$20			sbc 	#$20 						; fix up
.c8da	a8da	85 3d		sta $3d				sta 	gxzScreen+1
.c8dc	a8dc	e6 0b		inc $0b				inc 	GXEditSlot 					; next bitmap vram page.
.c8de	a8de					_GXDLTCWExit:
.c8de	a8de	60		rts				rts
.c8df	a8df					GXDrawGraphicElement:
.c8df	a8df	8d 7d 08	sta $087d			sta 	gxSize 						; save size
.c8e2	a8e2	3a		dec a				dec 	a
.c8e3	a8e3	8d 7e 08	sta $087e			sta 	gxMask 						; and mask
.c8e6	a8e6	ad d9 07	lda $07d9			lda 	gxBitmapsOn 				; check BMP on
.c8e9	a8e9	f0 67		beq $a952			beq 	_GXSLFail
.c8eb	a8eb	ad d2 07	lda $07d2			lda 	gxY0 						; push Y on stack
.c8ee	a8ee	48		pha				pha
.c8ef	a8ef	8c 80 08	sty $0880			sty 	gxAcquireVector+1 			; and acquisition vector
.c8f2	a8f2	8e 7f 08	stx $087f			stx 	gxAcquireVector
.c8f5	a8f5	20 7e ac	jsr $ac7e			jsr 	GXOpenBitmap 				; open the bitmap.
.c8f8	a8f8	ad 82 08	lda $0882			lda 	gxUseMode 					; scale bits
.c8fb	a8fb	4a		lsr a				lsr 	a
.c8fc	a8fc	4a		lsr a				lsr 	a
.c8fd	a8fd	4a		lsr a				lsr 	a
.c8fe	a8fe	29 07		and #$07			and		#7
.c900	a900	1a		inc a				inc 	a
.c901	a901	8d 81 08	sta $0881			sta 	gxScale
.c904	a904	64 38		stz $38				stz 	gxzTemp1					; start first line
.c906	a906					_GXGELoop:
.c906	a906	a5 38		lda $38				lda 	gxzTemp1 					; current line number to read.
.c908	a908	2c 82 08	bit $0882			bit 	gxUseMode 					; check for flip.
.c90b	a90b	10 06		bpl $a913			bpl		_GXNoVFlip
.c90d	a90d	ad 7e 08	lda $087e			lda 	gxMask
.c910	a910	38		sec				sec
.c911	a911	e5 38		sbc $38				sbc 	gxzTemp1
.c913	a913					_GXNoVFlip:
.c913	a913	aa		tax				tax 								; get the Xth line.
.c914	a914	20 54 a9	jsr $a954			jsr 	_GXCallAcquire 				; get that data.
.c917	a917	ad 81 08	lda $0881			lda 	gxScale 					; do scale identical copies of that line.
.c91a	a91a	85 39		sta $39				sta 	gxzTemp1+1
.c91c	a91c					_GXGELoop2:
.c91c	a91c	ad d2 07	lda $07d2			lda 	gxY0 						; off screen
.c91f	a91f	cd e1 07	cmp $07e1			cmp 	gxHeight
.c922	a922	b0 10		bcs $a934			bcs 	_GXDGEExit
.c924	a924	20 57 a9	jsr $a957			jsr 	GXRenderOneLine 			; render line
.c927	a927	c6 39		dec $39				dec 	gxzTemp1+1 					; scale times.
.c929	a929	d0 f1		bne $a91c			bne 	_GXGELoop2
.c92b	a92b	e6 38		inc $38				inc 	gxzTemp1 					; done all lines.
.c92d	a92d	a5 38		lda $38				lda 	gxzTemp1
.c92f	a92f	cd 7d 08	cmp $087d			cmp 	gxSize
.c932	a932	d0 d2		bne $a906			bne 	_GXGELoop
.c934	a934					_GXDGEExit:
.c934	a934	68		pla				pla 								; restore Y for next time
.c935	a935	8d d2 07	sta $07d2			sta 	gxY0
.c938	a938	ae 81 08	ldx $0881			ldx 	gxScale 					; get scale (1-8)
.c93b	a93b					_GXShiftLeft:
.c93b	a93b	18		clc				clc
.c93c	a93c	ad 7d 08	lda $087d			lda 	gxSize
.c93f	a93f	6d d0 07	adc $07d0			adc 	gxX0
.c942	a942	8d d0 07	sta $07d0			sta 	gxX0
.c945	a945	90 03		bcc $a94a			bcc 	_GXSLNoCarry
.c947	a947	ee d1 07	inc $07d1			inc 	gxX0+1
.c94a	a94a					_GXSLNoCarry:
.c94a	a94a	ca		dex				dex
.c94b	a94b	d0 ee		bne $a93b			bne 	_GXShiftLeft
.c94d	a94d	20 86 ac	jsr $ac86			jsr 	GXCloseBitmap
.c950	a950	18		clc				clc
.c951	a951	60		rts				rts
.c952	a952					_GXSLFail:
.c952	a952	38		sec				sec
.c953	a953	60		rts				rts
.c954	a954					_GXCallAcquire:
.c954	a954	6c 7f 08	jmp ($087f)			jmp 	(gxAcquireVector)
.c957	a957					GXRenderOneLine:
.c957	a957	20 8e ac	jsr $ac8e			jsr 	gxPositionCalc 				; calculate position/offset.
.c95a	a95a	ac e7 07	ldy $07e7			ldy 	gxOffset 					; Y contains position.
.c95d	a95d	64 3a		stz $3a				stz 	gxzTemp2 					; do size pixels
.c95f	a95f					_GXROLLoop1:
.c95f	a95f	ad 81 08	lda $0881			lda 	gxScale 					; set to do 'scale' times
.c962	a962	85 3b		sta $3b				sta 	gxzTemp2+1
.c964	a964					_GXROLLoop2:
.c964	a964	a5 3a		lda $3a				lda 	gxzTemp2 					; get current pixel
.c966	a966	2c e2 07	bit $07e2			bit 	gxMode 						; check H Flip
.c969	a969	50 06		bvc $a971			bvc 	_GXNoHFlip
.c96b	a96b	ad 7e 08	lda $087e			lda 	gxMask
.c96e	a96e	38		sec				sec
.c96f	a96f	e5 3a		sbc $3a				sbc 	gxzTemp2
.c971	a971					_GXNoHFlip:
.c971	a971	aa		tax				tax 								; read from the pixel buffer
.c972	a972	bd 23 06	lda $0623,x			lda 	gxPixelBuffer,x
.c975	a975	d0 07		bne $a97e			bne 	_GXDraw 					; draw if non zero
.c977	a977	ad 82 08	lda $0882			lda 	gxUseMode 					; check to see if solid background
.c97a	a97a	29 04		and #$04			and 	#4
.c97c	a97c	f0 0a		beq $a988			beq 	_GXZeroPixel
.c97e	a97e					_GXDraw:
.c97e	a97e	b1 3c		lda ($3c),y			lda 	(gxzScreen),y
.c980	a980	2d e5 07	and $07e5			and 	gxANDValue
.c983	a983	5d 23 06	eor $0623,x			eor 	gxPixelBuffer,x
.c986	a986	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.c988	a988					_GXZeroPixel:
.c988	a988	c8		iny				iny 								; advance pointer
.c989	a989	d0 05		bne $a990			bne 	_GXNoShift
.c98b	a98b	e6 3d		inc $3d				inc 	gxzScreen+1 				; carry to next
.c98d	a98d	20 d2 a8	jsr $a8d2			jsr 	GXDLTCheckWrap				; check for new page.
.c990	a990					_GXNoShift:
.c990	a990	c6 3b		dec $3b				dec 	gxzTemp2+1 					; do the inner loop gxScale times.
.c992	a992	d0 d0		bne $a964			bne 	_GXROLLoop2
.c994	a994	e6 3a		inc $3a				inc 	gxzTemp2 					; next pixel.
.c996	a996	a5 3a		lda $3a				lda 	gxzTemp2
.c998	a998	cd 7d 08	cmp $087d			cmp 	gxSize
.c99b	a99b	d0 c2		bne $a95f			bne 	_GXROLLoop1
.c99d	a99d	ee d2 07	inc $07d2			inc 	gxY0
.c9a0	a9a0	60		rts				rts
.087d						gxSize:
>087d								.fill 	1
.087e						gxMask:
>087e								.fill 	1
.087f						gxAcquireVector:
>087f								.fill 	2
.0881						gxScale:
>0881								.fill 	1
.0882						gxUseMode:
>0882								.fill 	1
.c9a1	a9a1					GXControlTileScrollX:
.c9a1	a9a1	ad df 07	lda $07df			lda 	gxTileMapWidth 				; comparator value (max X tile)
.c9a4	a9a4	20 c3 a9	jsr $a9c3			jsr 	GXScrollProcessor 			; scroll processing.
.c9a7	a9a7	b0 08		bcs $a9b1			bcs 	_GXCTSExit
.c9a9	a9a9	64 01		stz $01				stz 	1 							; write it out.
.c9ab	a9ab	8e 08 d2	stx $d208			stx 	$D208
.c9ae	a9ae	8c 09 d2	sty $d209			sty 	$D209
.c9b1	a9b1					_GXCTSExit:
.c9b1	a9b1	60		rts				rts
.c9b2	a9b2					GXControlTileScrollY:
.c9b2	a9b2	ad e0 07	lda $07e0			lda 	gxTileMapHeight 			; comparator value (max X tile)
.c9b5	a9b5	20 c3 a9	jsr $a9c3			jsr 	GXScrollProcessor 			; scroll processing.
.c9b8	a9b8	b0 08		bcs $a9c2			bcs 	_GXCTSExit
.c9ba	a9ba	64 01		stz $01				stz 	1 							; write it out.
.c9bc	a9bc	8e 0a d2	stx $d20a			stx 	$D20A
.c9bf	a9bf	8c 0b d2	sty $d20b			sty 	$D20B
.c9c2	a9c2					_GXCTSExit:
.c9c2	a9c2	60		rts				rts
.c9c3	a9c3					GXScrollProcessor:
.c9c3	a9c3	85 38		sta $38				sta 	gxzTemp1 					; save max tile value.
.c9c5	a9c5	ad da 07	lda $07da			lda 	gxTilesOn 					; check tile map is on.
.c9c8	a9c8	38		sec				sec
.c9c9	a9c9	f0 2c		beq $a9f7			beq 	_GXSPExit
.c9cb	a9cb	64 39		stz $39				stz 	gxzTemp1+1 					; convert tile size to a pixel scroll.
.c9cd	a9cd	a2 03		ldx #$03			ldx 	#3
.c9cf	a9cf					_GXCalcMaxPixelScroll:
.c9cf	a9cf	06 38		asl $38				asl 	gxzTemp1
.c9d1	a9d1	26 39		rol $39				rol 	gxzTemp1+1
.c9d3	a9d3	ca		dex				dex
.c9d4	a9d4	d0 f9		bne $a9cf			bne 	_GXCalcMaxPixelScroll
.c9d6	a9d6	a5 36		lda $36				lda 	gxzTemp0 					; check scroll in range.
.c9d8	a9d8	c5 38		cmp $38				cmp 	gxzTemp1
.c9da	a9da	a5 37		lda $37				lda 	gxzTemp0+1
.c9dc	a9dc	e5 39		sbc $39				sbc 	gxzTemp1+1
.c9de	a9de	b0 17		bcs $a9f7			bcs		_GXSPExit
.c9e0	a9e0	a5 36		lda $36				lda 	gxzTemp0 	 				; save fine scroll.
.c9e2	a9e2	29 07		and #$07			and		#7
.c9e4	a9e4	85 38		sta $38				sta 	gxzTemp1
.c9e6	a9e6	06 36		asl $36				asl 	gxzTemp0 					; shift left one, as whole tiles are 8 pixels.
.c9e8	a9e8	26 37		rol $37				rol 	gxzTemp0+1
.c9ea	a9ea	a5 37		lda $37				lda 	gxzTemp0+1 					; MSB is the upper byte.
.c9ec	a9ec	29 0f		and #$0f			and 	#$0F
.c9ee	a9ee	a8		tay				tay
.c9ef	a9ef	a5 36		lda $36				lda 	gxzTemp0 					; get coarse scroll
.c9f1	a9f1	29 f0		and #$f0			and 	#$F0
.c9f3	a9f3	05 38		ora $38				ora 	gxzTemp1 					; OR in fine scroll.
.c9f5	a9f5	aa		tax				tax 								; return in X
.c9f6	a9f6	18		clc				clc
.c9f7	a9f7					_GXSPExit:
.c9f7	a9f7	60		rts				rts
.c9f8	a9f8					GXFontHandler:
.c9f8	a9f8	a5 37		lda $37				lda 	gxzTemp0+1 					; eor with mode
.c9fa	a9fa	4d e2 07	eor $07e2			eor 	gxMode
.c9fd	a9fd	8d 82 08	sta $0882			sta 	gxUseMode
.ca00	aa00	64 37		stz $37				stz 	gxzTemp0+1 					; gxzTemp0 is font #
.ca02	aa02	06 36		asl $36				asl	 	gxzTemp0 					; x 2
.ca04	aa04	26 37		rol $37				rol	 	gxzTemp0+1
.ca06	aa06	06 36		asl $36				asl	 	gxzTemp0 					; x 4
.ca08	aa08	26 37		rol $37				rol	 	gxzTemp0+1
.ca0a	aa0a	06 36		asl $36				asl	 	gxzTemp0 					; x 8
.ca0c	aa0c	26 37		rol $37				rol	 	gxzTemp0+1
.ca0e	aa0e	a5 37		lda $37				lda 	gxzTemp0+1 					; put in page C0
.ca10	aa10	09 c0		ora #$c0			ora 	#$C0
.ca12	aa12	85 37		sta $37				sta 	gxzTemp0+1
.ca14	aa14	a9 08		lda #$08			lda 	#8 							; size 8x8
.ca16	aa16	a2 1e		ldx #$1e			ldx 	#GXGetGraphicDataFont & $FF ; XY = Graphic Data retrieval routine
.ca18	aa18	a0 aa		ldy #$aa			ldy 	#GXGetGraphicDataFont >> 8
.ca1a	aa1a	20 df a8	jsr $a8df			jsr 	GXDrawGraphicElement
.ca1d	aa1d	60		rts				rts
.ca1e	aa1e					GXGetGraphicDataFont:
.ca1e	aa1e	8a		txa				txa 								; X->Y
.ca1f	aa1f	a8		tay				tay
.ca20	aa20	a6 01		ldx $01				ldx 	1 							; preserve old value
.ca22	aa22	a9 01		lda #$01			lda 	#1 							; access page 1 (font memory)
.ca24	aa24	85 01		sta $01				sta 	1
.ca26	aa26	b1 36		lda ($36),y			lda 	(gxzTemp0),y 				; read the font element.
.ca28	aa28	86 01		stx $01				stx 	1 							; put old value back.
.ca2a	aa2a	a2 00		ldx #$00			ldx 	#0 							; do 8 times
.ca2c	aa2c					_GXExpand:
.ca2c	aa2c	9e 23 06	stz $0623,x			stz 	gxPixelBuffer,x 			; zero in pixel buffer
.ca2f	aa2f	0a		asl a				asl 	a 							; shift bit 7 into C
.ca30	aa30	90 08		bcc $aa3a			bcc 	_GXNoPixel
.ca32	aa32	48		pha				pha 								; if set, set pixel buffer to current colour.
.ca33	aa33	ad e3 07	lda $07e3			lda 	gxColour
.ca36	aa36	9d 23 06	sta $0623,x			sta 	gxPixelBuffer,x
.ca39	aa39	68		pla				pla
.ca3a	aa3a					_GXNoPixel:
.ca3a	aa3a	e8		inx				inx 								; do the whole byte.
.ca3b	aa3b	e0 08		cpx #$08			cpx 	#8
.ca3d	aa3d	d0 ed		bne $aa2c			bne 	_GXExpand
.ca3f	aa3f	60		rts				rts
.ca40	aa40					GXSpriteHandler:
.ca40	aa40	ad d8 07	lda $07d8			lda 	gxSpritesOn 				; sprites on ?
.ca43	aa43	f0 23		beq $aa68			beq 	_GXSHExit
.ca45	aa45	a5 37		lda $37				lda 	gxzTemp0+1 					; eor with mode
.ca47	aa47	4d e2 07	eor $07e2			eor 	gxMode
.ca4a	aa4a	8d 82 08	sta $0882			sta 	gxUseMode
.ca4d	aa4d	a6 36		ldx $36				ldx 	gxzTemp0 					; sprite #
.ca4f	aa4f	da		phx				phx
.ca50	aa50	20 7e ac	jsr $ac7e			jsr 	GXOpenBitmap 				; can access sprite information
.ca53	aa53	68		pla				pla
.ca54	aa54	20 5f ad	jsr $ad5f			jsr 	GXFindSprite 				; get the sprite address
.ca57	aa57	08		php				php
.ca58	aa58	20 86 ac	jsr $ac86			jsr 	GXCloseBitmap
.ca5b	aa5b	28		plp				plp
.ca5c	aa5c	b0 0a		bcs $aa68			bcs		_GXSHExit 					; exit if find failed.
.ca5e	aa5e	ad 83 08	lda $0883			lda 	gxSizePixels 				; return size
.ca61	aa61	a2 69		ldx #$69			ldx 	#GXSpriteAcquire & $FF
.ca63	aa63	a0 aa		ldy #$aa			ldy 	#GXSpriteAcquire >> 8
.ca65	aa65	20 df a8	jsr $a8df			jsr 	GXDrawGraphicElement
.ca68	aa68					_GXSHExit:
.ca68	aa68	60		rts				rts
.ca69	aa69					GXSpriteAcquire:
.ca69	aa69	ad dc 07	lda $07dc			lda 	gxSpritePage				; point to base page
.ca6c	aa6c	85 0b		sta $0b				sta 	GXEditSlot
.ca6e	aa6e	86 36		stx $36				stx 	gxzTemp0 					; row number x 1,2,3,4
.ca70	aa70	a9 00		lda #$00			lda 	#0
.ca72	aa72	ae 84 08	ldx $0884			ldx 	gxSizeBits
.ca75	aa75					_GXTimesRowNumber:
.ca75	aa75	18		clc				clc
.ca76	aa76	65 36		adc $36				adc 	gxzTemp0
.ca78	aa78	ca		dex				dex
.ca79	aa79	10 fa		bpl $aa75			bpl 	_GXTimesRowNumber
.ca7b	aa7b	64 37		stz $37				stz 	gxzTemp0+1
.ca7d	aa7d	0a		asl a				asl 	a 							; row x 2,4,6,8
.ca7e	aa7e	26 37		rol $37				rol 	gxzTemp0+1
.ca80	aa80	0a		asl a				asl 	a 							; row x 4,8,12,16
.ca81	aa81	26 37		rol $37				rol 	gxzTemp0+1
.ca83	aa83	0a		asl a				asl 	a 							; row x 8,16,24,32
.ca84	aa84	26 37		rol $37				rol 	gxzTemp0+1
.ca86	aa86	85 36		sta $36				sta 	gxzTemp0
.ca88	aa88	18		clc				clc 								; add base address.
.ca89	aa89	a5 36		lda $36				lda 	gxzTemp0
.ca8b	aa8b	6d 86 08	adc $0886			adc 	gxSpriteOffset
.ca8e	aa8e	85 36		sta $36				sta 	gxzTemp0
.ca90	aa90	a5 37		lda $37				lda 	gxzTemp0+1
.ca92	aa92	6d 87 08	adc $0887			adc 	gxSpriteOffset+1
.ca95	aa95					_GXSAFindPage:
.ca95	aa95	c9 20		cmp #$20			cmp 	#$20 						; on this page
.ca97	aa97	90 06		bcc $aa9f			bcc 	_GXSAFoundPage
.ca99	aa99	e9 20		sbc #$20			sbc 	#$20 						; forward one page
.ca9b	aa9b	e6 0b		inc $0b				inc 	GXEditSlot
.ca9d	aa9d	80 f6		bra $aa95			bra 	_GXSAFindPage
.ca9f	aa9f					_GXSAFoundPage:
.ca9f	aa9f	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; physical address of page.
.caa1	aaa1	85 37		sta $37				sta 	gxzTemp0+1 					; gxzTemp0 now points to the page
.caa3	aaa3	a0 00		ldy #$00			ldy 	#0
.caa5	aaa5					_GXSACopyLoop:
.caa5	aaa5	b1 36		lda ($36),y			lda 	(gxzTemp0),y
.caa7	aaa7	99 23 06	sta $0623,y			sta 	gxPixelBuffer,y
.caaa	aaaa	c8		iny				iny
.caab	aaab	cc 83 08	cpy $0883			cpy 	gxSizePixels
.caae	aaae	d0 f5		bne $aaa5			bne 	_GXSACopyLoop
.cab0	aab0	60		rts				rts
.cab1	aab1					GXSelect:
.cab1	aab1	ad d8 07	lda $07d8			lda 	gxSpritesOn
.cab4	aab4	f0 22		beq $aad8			beq 	_GXSFail
.cab6	aab6	a5 36		lda $36				lda 	gxzTemp0 					; illegal sprite #
.cab8	aab8	c9 40		cmp #$40			cmp 	#64
.caba	aaba	b0 1c		bcs $aad8			bcs 	_GXSFail
.cabc	aabc	8d e8 07	sta $07e8			sta 	GSCurrentSpriteID
.cabf	aabf	a4 37		ldy $37				ldy 	gxzTemp0+1 					; control value.
.cac1	aac1	a9 00		lda #$00			lda  	#0 							; multiply sprite # x 8 => A
.cac3	aac3	06 36		asl $36				asl 	gxzTemp0
.cac5	aac5	06 36		asl $36				asl 	gxzTemp0
.cac7	aac7	06 36		asl $36				asl 	gxzTemp0
.cac9	aac9	2a		rol a				rol 	a
.caca	aaca	69 d9		adc #$d9			adc 	#$D9 						; sprite area
.cacc	aacc	8d ea 07	sta $07ea			sta 	GSCurrentSpriteAddr+1 		; address to GSCurrentSprite and gxzTemp
.cacf	aacf	85 37		sta $37				sta 	gxzTemp0+1
.cad1	aad1	a5 36		lda $36				lda 	gxzTemp0
.cad3	aad3	8d e9 07	sta $07e9			sta 	GSCurrentSpriteAddr
.cad6	aad6	18		clc				clc
.cad7	aad7	60		rts				rts
.cad8	aad8					_GXSFail:
.cad8	aad8	38		sec				sec
.cad9	aad9	60		rts				rts
.cada	aada					GXSelectImage:
.cada	aada	ad d8 07	lda $07d8			lda 	gxSpritesOn
.cadd	aadd	f0 74		beq $ab53			beq 	_GXSIFail
.cadf	aadf	ad ea 07	lda $07ea			lda 	GSCurrentSpriteAddr+1 		; check sprite selected
.cae2	aae2	f0 6f		beq $ab53			beq 	_GXSIFail 					; (checking the MSB)
.cae4	aae4	64 01		stz $01				stz 	1
.cae6	aae6	a5 37		lda $37				lda 	gxzTemp0+1 					; push show/hide on the stack.
.cae8	aae8	d0 6b		bne $ab55			bne 	_GXSIHide
.caea	aaea	a5 36		lda $36				lda 	gxzTemp0 					; sprite image
.caec	aaec	48		pha				pha
.caed	aaed	20 7e ac	jsr $ac7e			jsr 	GXOpenBitmap
.caf0	aaf0	68		pla				pla
.caf1	aaf1	20 5f ad	jsr $ad5f			jsr 	GXFindSprite
.caf4	aaf4	b0 5a		bcs $ab50			bcs 	_GXSICloseFail 				; no image
.caf6	aaf6	a0 01		ldy #$01			ldy 	#1
.caf8	aaf8	ad e9 07	lda $07e9			lda 	GSCurrentSpriteAddr
.cafb	aafb	85 36		sta $36				sta 	gxzTemp0
.cafd	aafd	ad ea 07	lda $07ea			lda 	GSCurrentSpriteAddr+1
.cb00	ab00	85 37		sta $37				sta 	gxzTemp0+1
.cb02	ab02	ad 86 08	lda $0886			lda 	gxSpriteOffset
.cb05	ab05	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.cb07	ab07	18		clc				clc
.cb08	ab08	ad 87 08	lda $0887			lda 	gxSpriteOffset+1
.cb0b	ab0b	6d eb 07	adc $07eb			adc 	gxSpriteOffsetBase
.cb0e	ab0e	c8		iny				iny
.cb0f	ab0f	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.cb11	ab11	ad ec 07	lda $07ec			lda 	gxSpriteOffsetBase+1
.cb14	ab14	69 00		adc #$00			adc 	#0
.cb16	ab16	c8		iny				iny
.cb17	ab17	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.cb19	ab19	ad 84 08	lda $0884			lda 	gxSizeBits 					; get raw size
.cb1c	ab1c	49 03		eor #$03			eor 	#3 							; make it right (00=32 etc.)
.cb1e	ab1e	2a		rol a				rol 	a 							; x 2
.cb1f	ab1f	0a		asl a				asl 	a 							; x 4
.cb20	ab20	0a		asl a				asl 	a 							; x 8
.cb21	ab21	0a		asl a				asl 	a 							; x 16
.cb22	ab22	0d 85 08	ora $0885			ora 	gxSpriteLUT 				; Or with LUT
.cb25	ab25	0a		asl a				asl 	a 							; 1 shift
.cb26	ab26	09 01		ora #$01			ora 	#1 							; enable sprite.
.cb28	ab28	92 36		sta ($36)			sta 	(gxzTemp0) 					; and write back
.cb2a	ab2a	20 86 ac	jsr $ac86			jsr 	GXCloseBitmap
.cb2d	ab2d	ae e8 07	ldx $07e8			ldx 	GSCurrentSpriteID 			; point to sprite entries.
.cb30	ab30	bd 2d 08	lda $082d,x			lda 	gxSpriteHigh,x 				; clear upper two bits of size
.cb33	ab33	29 3f		and #$3f			and 	#$3F
.cb35	ab35	9d 2d 08	sta $082d,x			sta 	gxSpriteHigh,x
.cb38	ab38	ad 84 08	lda $0884			lda 	gxSizeBits 					; get bit size
.cb3b	ab3b	6a		ror a				ror 	a 							; shift into bits 6/7
.cb3c	ab3c	6a		ror a				ror 	a
.cb3d	ab3d	6a		ror a				ror 	a
.cb3e	ab3e	29 c0		and #$c0			and 	#$C0
.cb40	ab40	1d 2d 08	ora $082d,x			ora 	gxSpriteHigh,x 				; put in  upper 2 bits of sprite data
.cb43	ab43	9d 2d 08	sta $082d,x			sta 	gxSpriteHigh,x
.cb46	ab46	bd ed 07	lda $07ed,x			lda 	gxSpriteLow,x 				; clear hidden flag.
.cb49	ab49	29 7f		and #$7f			and 	#$7F
.cb4b	ab4b	9d ed 07	sta $07ed,x			sta 	gxSpriteLow,x
.cb4e	ab4e	18		clc				clc
.cb4f	ab4f	60		rts				rts
.cb50	ab50					_GXSICloseFail:
.cb50	ab50	20 86 ac	jsr $ac86			jsr 	GXCloseBitmap
.cb53	ab53					_GXSIFail:
.cb53	ab53	38		sec				sec
.cb54	ab54	60		rts				rts
.cb55	ab55					_GXSIHide:
.cb55	ab55	ad e9 07	lda $07e9			lda 	GSCurrentSpriteAddr  		; get Sprite h/w address and write there
.cb58	ab58	85 36		sta $36				sta 	gxzTemp0
.cb5a	ab5a	ad ea 07	lda $07ea			lda 	GSCurrentSpriteAddr+1
.cb5d	ab5d	85 37		sta $37				sta 	gxzTemp0+1
.cb5f	ab5f	a9 00		lda #$00			lda 	#0
.cb61	ab61	92 36		sta ($36)			sta 	(gxzTemp0)
.cb63	ab63	ae e8 07	ldx $07e8			ldx 	GSCurrentSpriteID 			; get sprite ID
.cb66	ab66	bd ed 07	lda $07ed,x			lda 	gxSpriteLow,x 				; set the hidden bit.
.cb69	ab69	09 80		ora #$80			ora 	#$80
.cb6b	ab6b	9d ed 07	sta $07ed,x			sta 	gxSpriteLow,x
.cb6e	ab6e	18		clc				clc
.cb6f	ab6f	60		rts				rts
.cb70	ab70					GXMoveSprite:
.cb70	ab70	ad d8 07	lda $07d8			lda 	gxSpritesOn
.cb73	ab73	f0 65		beq $abda			beq 	_GXSIFail
.cb75	ab75	ad ea 07	lda $07ea			lda 	GSCurrentSpriteAddr+1 		; check sprite selected
.cb78	ab78	f0 60		beq $abda			beq 	_GXSIFail
.cb7a	ab7a	85 37		sta $37				sta 	gxzTemp0+1
.cb7c	ab7c	a0 04		ldy #$04			ldy 	#4
.cb7e	ab7e	ad e9 07	lda $07e9			lda 	GSCurrentSpriteAddr
.cb81	ab81	85 36		sta $36				sta 	gxzTemp0
.cb83	ab83	ae e8 07	ldx $07e8			ldx 	GSCurrentSpriteID 			; get the size from the upper two bits
.cb86	ab86	bd 2d 08	lda $082d,x			lda 	gxSpriteHigh,x
.cb89	ab89	2a		rol a				rol 	a	 						; into bits 0,1.
.cb8a	ab8a	2a		rol a				rol 	a
.cb8b	ab8b	2a		rol a				rol 	a
.cb8c	ab8c	29 03		and #$03			and 	#3
.cb8e	ab8e	aa		tax				tax
.cb8f	ab8f	bd dc ab	lda $abdc,x			lda 	_GXMSOffset,x 				; get 32-SpriteSize/2
.cb92	ab92	48		pha				pha
.cb93	ab93	18		clc				clc
.cb94	ab94	6d d0 07	adc $07d0			adc 	gxX0						; copy position.
.cb97	ab97	91 36		sta ($36),y			sta 	(gxzTemp0),y
.cb99	ab99	c8		iny				iny
.cb9a	ab9a	ad d1 07	lda $07d1			lda 	gxX0+1
.cb9d	ab9d	69 00		adc #$00			adc 	#0
.cb9f	ab9f	91 36		sta ($36),y			sta 	(gxzTemp0),y
.cba1	aba1	c8		iny				iny
.cba2	aba2	68		pla				pla
.cba3	aba3	18		clc				clc
.cba4	aba4	6d d2 07	adc $07d2			adc 	gxY0
.cba7	aba7	91 36		sta ($36),y			sta 	(gxzTemp0),y
.cba9	aba9	a9 00		lda #$00			lda 	#0
.cbab	abab	69 00		adc #$00			adc 	#0
.cbad	abad	c8		iny				iny
.cbae	abae	91 36		sta ($36),y			sta 	(gxzTemp0),y
.cbb0	abb0	4e d1 07	lsr $07d1			lsr 	gxX0+1 						; divide X by 4
.cbb3	abb3	6e d0 07	ror $07d0			ror 	gxX0
.cbb6	abb6	4e d0 07	lsr $07d0			lsr 	gxX0
.cbb9	abb9	4e d2 07	lsr $07d2			lsr 	gxY0 						; divide Y by 4
.cbbc	abbc	4e d2 07	lsr $07d2			lsr 	gxY0
.cbbf	abbf	ae e8 07	ldx $07e8			ldx 	GSCurrentSpriteID 			; copy X/4 and Y/4 into the status bytes
.cbc2	abc2	bd ed 07	lda $07ed,x			lda 	gxSpriteLow,x
.cbc5	abc5	29 80		and #$80			and 	#$80
.cbc7	abc7	0d d0 07	ora $07d0			ora 	gxX0
.cbca	abca	9d ed 07	sta $07ed,x			sta 	gxSpriteLow,x
.cbcd	abcd	bd 2d 08	lda $082d,x			lda 	gxSpriteHigh,x
.cbd0	abd0	29 c0		and #$c0			and 	#$C0
.cbd2	abd2	0d d2 07	ora $07d2			ora 	gxY0
.cbd5	abd5	9d 2d 08	sta $082d,x			sta 	gxSpriteHigh,x
.cbd8	abd8	18		clc				clc
.cbd9	abd9	60		rts				rts
.cbda	abda					_GXSIFail:
.cbda	abda	38		sec				sec
.cbdb	abdb	60		rts				rts
.cbdc	abdc					_GXMSOffset:
>cbdc	abdc	1c						.byte 	32-8/2
>cbdd	abdd	18						.byte 	32-16/2
>cbde	abde	14						.byte 	32-24/2
>cbdf	abdf	10						.byte 	32-32/2
.cbe0	abe0					GXSelectTile:
.cbe0	abe0	ad da 07	lda $07da			lda 	gxTilesOn 					; check tilemap in use
.cbe3	abe3	f0 4b		beq $ac30			beq 	_GXSFail
.cbe5	abe5	a5 36		lda $36				lda 	gxzTemp0 					; check X and Y in range
.cbe7	abe7	cd df 07	cmp $07df			cmp 	gxTileMapWidth
.cbea	abea	b0 44		bcs $ac30			bcs 	_GXSFail
.cbec	abec	a5 37		lda $37				lda 	gxzTemp0+1
.cbee	abee	cd e0 07	cmp $07e0			cmp 	gxTileMapHeight
.cbf1	abf1	b0 3d		bcs $ac30			bcs 	_GXSFail
.cbf3	abf3	ad de 07	lda $07de			lda 	gxTileMapPage 				; page to access = tile access page.
.cbf6	abf6	8d 6d 08	sta $086d			sta 	gxTileAccessPage
.cbf9	abf9	ae df 07	ldx $07df			ldx 	gxTileMapWidth 				; YX is the additive, e.g. shifted left. gxzTemp0+1 is shifted right.
.cbfc	abfc	a0 00		ldy #$00			ldy 	#0
.cbfe	abfe	a5 36		lda $36				lda 	gxzTemp0 					; initial result is X
.cc00	ac00	8d 6e 08	sta $086e			sta 	gxTileAccessAddress
.cc03	ac03	9c 6f 08	stz $086f			stz  	gxTileAccessAddress+1
.cc06	ac06					_GXSTMultiply:
.cc06	ac06	46 37		lsr $37				lsr 	gxzTemp0+1 					; shift Y right
.cc08	ac08	90 0f		bcc $ac19			bcc 	_GXSTNoAdd 					; add if CS
.cc0a	ac0a	18		clc				clc 								; add YX to result
.cc0b	ac0b	8a		txa				txa
.cc0c	ac0c	6d 6e 08	adc $086e			adc 	gxTileAccessAddress
.cc0f	ac0f	8d 6e 08	sta $086e			sta 	gxTileAccessAddress
.cc12	ac12	98		tya				tya
.cc13	ac13	6d 6f 08	adc $086f			adc 	gxTileAccessAddress+1
.cc16	ac16	8d 6f 08	sta $086f			sta 	gxTileAccessAddress+1
.cc19	ac19					_GXSTNoAdd:
.cc19	ac19	8a		txa				txa 								; shift YX left
.cc1a	ac1a	0a		asl a				asl 	a
.cc1b	ac1b	aa		tax				tax
.cc1c	ac1c	98		tya				tya
.cc1d	ac1d	2a		rol a				rol 	a
.cc1e	ac1e	a8		tay				tay
.cc1f	ac1f	a5 37		lda $37				lda 	gxzTemp0+1 					; multiply complete
.cc21	ac21	d0 e3		bne $ac06			bne 	_GXSTMultiply
.cc23	ac23	0e 6e 08	asl $086e			asl 	gxTileAccessAddress 		; double it, as it is a word array.
.cc26	ac26	2e 6f 08	rol $086f			rol 	gxTileAccessAddress+1
.cc29	ac29					_GXSTFixAddressLoop:
.cc29	ac29	20 32 ac	jsr $ac32			jsr 	GXSTFixAddress
.cc2c	ac2c	b0 fb		bcs $ac29			bcs 	_GXSTFixAddressLoop
.cc2e	ac2e	18		clc				clc
.cc2f	ac2f	60		rts				rts
.cc30	ac30					_GXSFail:
.cc30	ac30	38		sec				sec
.cc31	ac31	60		rts				rts
.cc32	ac32					GXSTFixAddress:
.cc32	ac32	48		pha				pha
.cc33	ac33	ad 6f 08	lda $086f			lda 	gxTileAccessAddress+1 		; in legal page range e.g. $0000-$1FFF
.cc36	ac36	c9 20		cmp #$20			cmp 	#$20
.cc38	ac38	90 06		bcc $ac40			bcc 	_GXSTFAExit
.cc3a	ac3a	e9 20		sbc #$20			sbc 	#$20 						; adjust address
.cc3c	ac3c	ee 6d 08	inc $086d			inc 	gxTileAccessPage 			; adjust page up.
.cc3f	ac3f	38		sec				sec
.cc40	ac40					_GXSTFAExit:
.cc40	ac40	68		pla				pla
.cc41	ac41	60		rts				rts
.cc42	ac42					GXSTWriteTile:
.cc42	ac42	38		sec				sec 								; CS = update flag
.cc43	ac43	80 01		bra $ac46			bra 	GXSTTileAccess
.cc45	ac45					GXSTReadTile:
.cc45	ac45	18		clc				clc
.cc46	ac46					GXSTTileAccess:
.cc46	ac46	a5 0b		lda $0b				lda 	GXEditSlot 					; save oroginal page
.cc48	ac48	48		pha				pha
.cc49	ac49	08		php				php 								; save update flag
.cc4a	ac4a	ad 6d 08	lda $086d			lda 	gxTileAccessPage 			; access the tile page.
.cc4d	ac4d	85 0b		sta $0b				sta 	GXEditSlot
.cc4f	ac4f	a6 36		ldx $36				ldx 	gxzTemp0 					; X = New value
.cc51	ac51	ad 6e 08	lda $086e			lda 	gxTileAccessAddress 		; set gxzTemp0 to point there
.cc54	ac54	85 36		sta $36				sta 	gxzTemp0
.cc56	ac56	ad 6f 08	lda $086f			lda 	gxTileAccessAddress+1
.cc59	ac59	09 60		ora #$60			ora 	#(GXMappingAddress >> 8)
.cc5b	ac5b	85 37		sta $37				sta 	gxzTemp0+1
.cc5d	ac5d	28		plp				plp 								; get flag
.cc5e	ac5e	90 09		bcc $ac69			bcc 	_GXSNoUpdate 				; updating the tile map ?
.cc60	ac60	8a		txa				txa 								; new value
.cc61	ac61	92 36		sta ($36)			sta 	(gxzTemp0) 					; write it out, as a word.
.cc63	ac63	a0 01		ldy #$01			ldy 	#1
.cc65	ac65	a9 00		lda #$00			lda 	#0
.cc67	ac67	91 36		sta ($36),y			sta 	(gxzTemp0),y
.cc69	ac69					_GXSNoUpdate:
.cc69	ac69	b2 36		lda ($36)			lda 	(gxzTemp0) 					; read the value
.cc6b	ac6b	fa		plx				plx 								; restore old page
.cc6c	ac6c	86 0b		stx $0b				stx 	GXEditSlot
.cc6e	ac6e	ee 6e 08	inc $086e			inc 	gxTileAccessAddress 		; advance tile ptr by 2 - will always be even.
.cc71	ac71	ee 6e 08	inc $086e			inc 	gxTileAccessAddress
.cc74	ac74	d0 03		bne $ac79			bne 	_GXSNoCarry
.cc76	ac76	ee 6f 08	inc $086f			inc 	gxTileAccessAddress+1
.cc79	ac79					_GXSNoCarry:
.cc79	ac79	20 32 ac	jsr $ac32			jsr 	GXSTFixAddress 				; fix address if required.
.cc7c	ac7c	18		clc				clc 								; return with ok flag.
.cc7d	ac7d	60		rts				rts
.cc7e	ac7e					GXOpenBitmap:
.cc7e	ac7e	78		sei				sei 								; no interrupts here
.cc7f	ac7f	a5 0b		lda $0b				lda 	GXEditSlot 					; Save the original LUT slot value
.cc81	ac81	8d e6 07	sta $07e6			sta 	gxOriginalLUTValue
.cc84	ac84	58		cli				cli
.cc85	ac85	60		rts				rts
.cc86	ac86					GXCloseBitmap:
.cc86	ac86	78		sei				sei
.cc87	ac87	ad e6 07	lda $07e6			lda 	gxOriginalLUTValue 			; restore LUT slot value
.cc8a	ac8a	85 0b		sta $0b				sta 	GXEditSlot
.cc8c	ac8c	58		cli				cli
.cc8d	ac8d	60		rts				rts
.cc8e	ac8e					gxPositionCalc:
.cc8e	ac8e	a5 36		lda $36				lda 	gxzTemp0 						; save temp memory slot
.cc90	ac90	48		pha				pha
.cc91	ac91	ad d2 07	lda $07d2			lda 	gxY0 							; gxzScreen = Y0
.cc94	ac94	85 3c		sta $3c				sta 	gxzScreen
.cc96	ac96	64 3d		stz $3d				stz 	gxzScreen+1
.cc98	ac98	06 3c		asl $3c				asl 	gxzScreen 						; gxzScreen = Y0 * 4
.cc9a	ac9a	26 3d		rol $3d				rol 	gxzScreen+1
.cc9c	ac9c	06 3c		asl $3c				asl 	gxzScreen
.cc9e	ac9e	26 3d		rol $3d				rol 	gxzScreen+1
.cca0	aca0	18		clc				clc 									; gxzScreen = Y0 * 5, as it's still in A
.cca1	aca1	65 3c		adc $3c				adc 	gxzScreen
.cca3	aca3	85 3c		sta $3c				sta 	gxzScreen
.cca5	aca5	90 02		bcc $aca9			bcc 	_GXPCNoCarry
.cca7	aca7	e6 3d		inc $3d				inc 	gxzScreen+1
.cca9	aca9					_GXPCNoCarry:
.cca9	aca9	06 3c		asl $3c				asl 	gxzScreen 						; now Y0 * 10
.ccab	acab	26 3d		rol $3d				rol 	gxzScreen+1
.ccad	acad	a5 3d		lda $3d				lda	 	gxzScreen+1
.ccaf	acaf	85 36		sta $36				sta 	gxzTemp0 						; the page offset.
.ccb1	acb1	64 3d		stz $3d				stz 	gxzScreen+1
.ccb3	acb3	a9 05		lda #$05			lda 	#5 								; now multiply by 32, this puts this in the range 0..8191
.ccb5	acb5					_GXPCMultiply32:
.ccb5	acb5	06 3c		asl $3c				asl 	gxzScreen
.ccb7	acb7	26 3d		rol $3d				rol 	gxzScreen+1
.ccb9	acb9	3a		dec a				dec 	a
.ccba	acba	d0 f9		bne $acb5			bne 	_GXPCMultiply32
.ccbc	acbc	18		clc				clc
.ccbd	acbd	ad d0 07	lda $07d0			lda 	gxX0 						; add X to this value, put the result in gxOffset, gxzScreen has to be on a page boundary
.ccc0	acc0	65 3c		adc $3c				adc 	gxzScreen
.ccc2	acc2	8d e7 07	sta $07e7			sta 	gxOffset
.ccc5	acc5	ad d1 07	lda $07d1			lda 	gxX0+1
.ccc8	acc8	65 3d		adc $3d				adc 	gxzScreen+1
.ccca	acca	c9 20		cmp #$20			cmp 	#$20 						; has it overflowed into the next one ?
.cccc	accc	90 04		bcc $acd2			bcc 	_GXPCNoOverflow
.ccce	acce	29 1f		and #$1f			and 	#$1F 						; fix it up
.ccd0	acd0	e6 36		inc $36				inc 	gxzTemp0 					; add 1 to the page number
.ccd2	acd2					_GXPCNoOverflow:
.ccd2	acd2	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; make it the address mapped in.
.ccd4	acd4	85 3d		sta $3d				sta 	gxzScreen+1
.ccd6	acd6	64 3c		stz $3c				stz 	gxzScreen
.ccd8	acd8	18		clc				clc
.ccd9	acd9	a5 36		lda $36				lda 	gxzTemp0 					; get the page number
.ccdb	acdb	6d db 07	adc $07db			adc 	gxBasePage 					; by adding the base page
.ccde	acde	85 0b		sta $0b				sta 	GXEditSlot 					; and map it into memory.
.cce0	ace0	68		pla				pla
.cce1	ace1	85 36		sta $36				sta 	gxzTemp0
.cce3	ace3	60		rts				rts
.cce4	ace4					GXMovePositionDown:
.cce4	ace4	18		clc				clc 								; add 320 to offset/temp+1
.cce5	ace5	ad e7 07	lda $07e7			lda 	gxOffset
.cce8	ace8	69 40		adc #$40			adc 	#64
.ccea	acea	8d e7 07	sta $07e7			sta 	gxOffset
.cced	aced	a5 3d		lda $3d				lda 	gxzScreen+1
.ccef	acef	69 01		adc #$01			adc 	#1
.ccf1	acf1	85 3d		sta $3d				sta 	gxzScreen+1
.ccf3	acf3	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page ?
.ccf5	acf5	90 07		bcc $acfe			bcc 	_GXMPDExit
.ccf7	acf7	38		sec				sec  								; next page, adjust address
.ccf8	acf8	e9 20		sbc #$20			sbc 	#$20
.ccfa	acfa	85 3d		sta $3d				sta 	gxzScreen+1
.ccfc	acfc	e6 0b		inc $0b				inc 	GXEditSlot 					; bump page
.ccfe	acfe					_GXMPDExit:
.ccfe	acfe	60		rts				rts
.ccff	acff					GXCollide:
.ccff	acff	a5 36		lda $36				lda 	gxzTemp0 					; check if sprite numbers are legal.
.cd01	ad01	aa		tax				tax
.cd02	ad02	05 37		ora $37				ora 	gxzTemp0+1
.cd04	ad04	29 c0		and #$c0			and 	#$C0
.cd06	ad06	38		sec				sec
.cd07	ad07	d0 53		bne $ad5c			bne 	_GXCollideFail 				; if either >= 64, fail.
.cd09	ad09	a4 37		ldy $37				ldy 	gxzTemp0+1 					; at this point X is 1st sprite and Y is 2nd sprite.
.cd0b	ad0b	b9 ed 07	lda $07ed,y			lda 	gxSpriteLow,y 				; check if either hidden bit is set
.cd0e	ad0e	1d ed 07	ora $07ed,x			ora 	gxSpriteLow,x
.cd11	ad11	30 48		bmi $ad5b			bmi 	_GXOkayFail 				; if either hidden, then they cannot collide.
.cd13	ad13	18		clc				clc 								; need to calculate sum of sizes.
.cd14	ad14	b9 2d 08	lda $082d,y			lda 	gxSpriteHigh,y
.cd17	ad17	7d 2d 08	adc $082d,x			adc 	gxSpriteHigh,x 				; at this point, CS, Bit 6 and 7 contain that sum.
.cd1a	ad1a	29 c0		and #$c0			and 	#$C0 					 	; mask off
.cd1c	ad1c	6a		ror a				ror 	a 							; 5/6/7
.cd1d	ad1d	4a		lsr a				lsr 	a 							; 4/5/6
.cd1e	ad1e	4a		lsr a				lsr 	a 							; 3/4/5
.cd1f	ad1f	4a		lsr a				lsr 	a 							; 2/3/4
.cd20	ad20	18		clc				clc
.cd21	ad21	69 08		adc #$08			adc 	#$08
.cd23	ad23	4a		lsr a				lsr 	a 							; adjust because all coordinates are divided by 4 to store.
.cd24	ad24	4a		lsr a				lsr 	a
.cd25	ad25	85 38		sta $38				sta 	gxzTemp1 					; so the difference between the centres has to be less than this.
.cd27	ad27	b9 2d 08	lda $082d,y			lda 	gxSpriteHigh,y 				; calculate y1-y0
.cd2a	ad2a	29 3f		and #$3f			and 	#$3F
.cd2c	ad2c	85 39		sta $39				sta 	gxzTemp1+1
.cd2e	ad2e	38		sec				sec
.cd2f	ad2f	bd 2d 08	lda $082d,x			lda 	gxSpriteHigh,x
.cd32	ad32	29 3f		and #$3f			and 	#$3F
.cd34	ad34	e5 39		sbc $39				sbc 	gxzTemp1+1
.cd36	ad36	b0 03		bcs $ad3b			bcs 	_GXCAbs1 					; calculate |y1-y0|
.cd38	ad38	49 ff		eor #$ff			eor 	#$FF
.cd3a	ad3a	1a		inc a				inc 	a
.cd3b	ad3b					_GXCAbs1:
.cd3b	ad3b	c5 38		cmp $38				cmp 	gxzTemp1 					; if >= difference then no overlap
.cd3d	ad3d	b0 1c		bcs $ad5b			bcs 	_GXOkayFail
.cd3f	ad3f	85 39		sta $39				sta 	gxzTemp1+1 					; save |y1-y0|
.cd41	ad41	38		sec				sec 								; calculate |x1-x0|
.cd42	ad42	b9 ed 07	lda $07ed,y			lda 	gxSpriteLow,y
.cd45	ad45	fd ed 07	sbc $07ed,x			sbc 	gxSpriteLow,x
.cd48	ad48	b0 03		bcs $ad4d			bcs 	_GXCAbs2
.cd4a	ad4a	49 ff		eor #$ff			eor 	#$FF
.cd4c	ad4c	1a		inc a				inc 	a
.cd4d	ad4d					_GXCAbs2:
.cd4d	ad4d	c5 38		cmp $38				cmp 	gxzTemp1 					; if >= difference then no overlap
.cd4f	ad4f	b0 0a		bcs $ad5b			bcs 	_GXOkayFail
.cd51	ad51	c5 39		cmp $39				cmp 	gxzTemp1+1 					; is it less than the previous one.
.cd53	ad53	90 02		bcc $ad57			bcc 	_GXCHaveLowest
.cd55	ad55	a5 39		lda $39				lda 	gxzTemp1+1 					; if not, that's the smallest difference.
.cd57	ad57					_GXCHaveLowest:
.cd57	ad57	0a		asl a				asl 	a 							; scale to allow for >> 2
.cd58	ad58	0a		asl a				asl 	a
.cd59	ad59	18		clc				clc
.cd5a	ad5a	60		rts				rts
.cd5b	ad5b					_GXOkayFail:
.cd5b	ad5b	18		clc				clc
.cd5c	ad5c					_GXCollideFail:
.cd5c	ad5c	a9 ff		lda #$ff			lda 	#$FF
.cd5e	ad5e	60		rts				rts
.cd5f	ad5f					GXFindSprite:
.cd5f	ad5f	aa		tax				tax
.cd60	ad60	ad dc 07	lda $07dc			lda 	gxSpritePage 				; access the base page of the sprite
.cd63	ad63	85 0b		sta $0b				sta 	GXEditSlot
.cd65	ad65	bd 00 61	lda $6100,x			lda 	GXMappingAddress+256,x 		; check a valid sprite
.cd68	ad68	1d 00 60	ora $6000,x			ora 	GXMappingAddress,x
.cd6b	ad6b	f0 33		beq $ada0			beq 	_GXFSFail
.cd6d	ad6d	bd 00 61	lda $6100,x			lda 	GXMappingAddress+256,x 		; MSB
.cd70	ad70	8d 87 08	sta $0887			sta 	gxSpriteOffset+1
.cd73	ad73	bd 00 60	lda $6000,x			lda 	GXMappingAddress,x 			; LSB
.cd76	ad76	48		pha				pha 								; save twice
.cd77	ad77	48		pha				pha
.cd78	ad78	29 03		and #$03			and 	#3 							; get sprite size
.cd7a	ad7a	8d 84 08	sta $0884			sta 	gxSizeBits 					; save raw (0-3)
.cd7d	ad7d	aa		tax				tax
.cd7e	ad7e	bd a2 ad	lda $ada2,x			lda 	_GXFXSSTTable,x 			; read sprite size
.cd81	ad81	8d 83 08	sta $0883			sta 	gxSizePixels 				; save (8/16/24/32)
.cd84	ad84	68		pla				pla 								; get LUT
.cd85	ad85	4a		lsr a				lsr		a
.cd86	ad86	4a		lsr a				lsr		a
.cd87	ad87	29 03		and #$03			and 	#3
.cd89	ad89	8d 85 08	sta $0885			sta 	gxSpriteLUT
.cd8c	ad8c	68		pla				pla 								; address, neeeds to be x 4
.cd8d	ad8d	29 f0		and #$f0			and 	#$F0
.cd8f	ad8f	8d 86 08	sta $0886			sta 	gxSpriteOffset
.cd92	ad92	0e 86 08	asl $0886			asl 	gxSpriteOffset
.cd95	ad95	2e 87 08	rol $0887			rol 	gxSpriteOffset+1
.cd98	ad98	0e 86 08	asl $0886			asl 	gxSpriteOffset
.cd9b	ad9b	2e 87 08	rol $0887			rol 	gxSpriteOffset+1
.cd9e	ad9e	18		clc				clc
.cd9f	ad9f	60		rts				rts
.cda0	ada0					_GXFSFail:
.cda0	ada0	38		sec				sec
.cda1	ada1	60		rts				rts
.cda2	ada2					_GXFXSSTTable:
>cda2	ada2	08 10 18 20					.byte 	8,16,24,32
.0883						gxSizePixels:
>0883								.fill 	1
.0884						gxSizeBits:
>0884								.fill 	1
.0885						gxSpriteLUT:
>0885								.fill 	1
.0886						gxSpriteOffset:
>0886								.fill 	2
.cda6	ada6					GXSortXY:
.cda6	ada6	20 c4 ad	jsr $adc4			jsr 	GXSortY 					; will be sorted on Y now
.cda9	ada9	ad d0 07	lda $07d0			lda 	gxX0 						; compare X0 v X1
.cdac	adac	cd d4 07	cmp $07d4			cmp 	gxX1
.cdaf	adaf	ad d1 07	lda $07d1			lda 	gxX0+1
.cdb2	adb2	ed d5 07	sbc $07d5			sbc 	gxX1+1
.cdb5	adb5	90 0c		bcc $adc3			bcc 	_GXSXYExit 					; X0 < X1 exit
.cdb7	adb7	a2 00		ldx #$00			ldx 	#0 							; swap them over
.cdb9	adb9	a0 04		ldy #$04			ldy 	#4
.cdbb	adbb	20 d8 ad	jsr $add8			jsr 	GXSwapXY
.cdbe	adbe	e8		inx				inx
.cdbf	adbf	c8		iny				iny
.cdc0	adc0	20 d8 ad	jsr $add8			jsr 	GXSwapXY
.cdc3	adc3					_GXSXYExit:
.cdc3	adc3	60		rts				rts
.cdc4	adc4					GXSortY:
.cdc4	adc4	ad d2 07	lda $07d2			lda 	gxY0 						; if Y0 >= Y1
.cdc7	adc7	cd d6 07	cmp $07d6			cmp 	gxY1
.cdca	adca	90 0b		bcc $add7			bcc 	_GXSYSorted
.cdcc	adcc	a2 03		ldx #$03			ldx 	#3 							; swap 3-0 - for lines we want to sort but keep lines together
.cdce	adce	a0 07		ldy #$07			ldy 	#7 							; with 4-7
.cdd0	add0					_GXSwap1:
.cdd0	add0	20 d8 ad	jsr $add8			jsr 	GXSwapXY
.cdd3	add3	88		dey				dey
.cdd4	add4	ca		dex				dex
.cdd5	add5	10 f9		bpl $add0			bpl 	_GXSwap1
.cdd7	add7					_GXSYSorted:
.cdd7	add7	60		rts				rts
.cdd8	add8					GXSwapXY:
.cdd8	add8	bd d0 07	lda $07d0,x			lda 	gxX0,x
.cddb	addb	48		pha				pha
.cddc	addc	b9 d0 07	lda $07d0,y			lda 	gxX0,y
.cddf	addf	9d d0 07	sta $07d0,x			sta 	gxX0,x
.cde2	ade2	68		pla				pla
.cde3	ade3	99 d0 07	sta $07d0,y			sta 	gxX0,y
.cde6	ade6	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_tokeniser.module

=1						tokeniserIntegrated=1
.cde7	ade7					KeywordSet0:
>cde7	ade7	00 65					.text	0,$65,""               ; $80 !0:EOF
>cde9	ade9	00 58					.text	0,$58,""               ; $81 !1:SH1
>cdeb	adeb	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>cded	aded	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $83 ABS(
>cdf3	adf3	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $84 ALLOC(
>cdfb	adfb	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $85 ASC(
>ce01	ae01	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $86 CHR$(
>ce08	ae08	06 aa 45 56 45 4e 54 28			.text	6,$aa,"EVENT("         ; $87 EVENT(
>ce10	ae10	05 6b 46 41 4c 53 45			.text	5,$6b,"FALSE"          ; $88 FALSE
>ce17	ae17	05 44 46 52 41 43 28			.text	5,$44,"FRAC("          ; $89 FRAC(
>ce1e	ae1e	05 2c 47 45 54 24 28			.text	5,$2c,"GET$("          ; $8a GET$(
>ce25	ae25	04 08 47 45 54 28			.text	4,$08,"GET("           ; $8b GET(
>ce2b	ae2b	09 4a 47 45 54 44 41 54			.text	9,$4a,"GETDATE$("      ; $8c GETDATE$(
>ce33	ae33	45 24 28
>ce36	ae36	09 5b 47 45 54 54 49 4d			.text	9,$5b,"GETTIME$("      ; $8d GETTIME$(
>ce3e	ae3e	45 24 28
>ce41	ae41	04 0d 48 49 54 28			.text	4,$0d,"HIT("           ; $8e HIT(
>ce47	ae47	07 cc 49 4e 4b 45 59 24			.text	7,$cc,"INKEY$("        ; $8f INKEY$(
>ce4f	ae4f	28
>ce50	ae50	06 a8 49 4e 4b 45 59 28			.text	6,$a8,"INKEY("         ; $90 INKEY(
>ce58	ae58	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $91 INT(
>ce5e	ae5e	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $92 ISVAL(
>ce66	ae66	0a e0 49 54 45 4d 43 4f			.text	10,$e0,"ITEMCOUNT("     ; $93 ITEMCOUNT(
>ce6e	ae6e	55 4e 54 28
>ce72	ae72	09 5b 49 54 45 4d 47 45			.text	9,$5b,"ITEMGET$("      ; $94 ITEMGET$(
>ce7a	ae7a	54 24 28
>ce7d	ae7d	05 5c 4a 4f 59 42 28			.text	5,$5c,"JOYB("          ; $95 JOYB(
>ce84	ae84	05 72 4a 4f 59 58 28			.text	5,$72,"JOYX("          ; $96 JOYX(
>ce8b	ae8b	05 73 4a 4f 59 59 28			.text	5,$73,"JOYY("          ; $97 JOYY(
>ce92	ae92	08 49 4b 45 59 44 4f 57			.text	8,$49,"KEYDOWN("       ; $98 KEYDOWN(
>ce9a	ae9a	4e 28
>ce9c	ae9c	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $99 LEFT$(
>cea4	aea4	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $9a LEN(
>ceaa	aeaa	04 0e 4d 41 58 28			.text	4,$0e,"MAX("           ; $9b MAX(
>ceb0	aeb0	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $9c MID$(
>ceb7	aeb7	04 0c 4d 49 4e 28			.text	4,$0c,"MIN("           ; $9d MIN(
>cebd	aebd	04 19 4e 4f 54 28			.text	4,$19,"NOT("           ; $9e NOT(
>cec3	aec3	05 4d 50 45 45 4b 28			.text	5,$4d,"PEEK("          ; $9f PEEK(
>ceca	aeca	06 91 50 45 45 4b 44 28			.text	6,$91,"PEEKD("         ; $a0 PEEKD(
>ced2	aed2	06 99 50 45 45 4b 4c 28			.text	6,$99,"PEEKL("         ; $a1 PEEKL(
>ceda	aeda	06 a4 50 45 45 4b 57 28			.text	6,$a4,"PEEKW("         ; $a2 PEEKW(
>cee2	aee2	08 3c 50 4c 41 59 49 4e			.text	8,$3c,"PLAYING("       ; $a3 PLAYING(
>ceea	aeea	47 28
>ceec	aeec	07 e9 52 41 4e 44 4f 4d			.text	7,$e9,"RANDOM("        ; $a4 RANDOM(
>cef4	aef4	28
>cef5	aef5	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $a5 RIGHT$(
>cefd	aefd	28
>cefe	aefe	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $a6 RND(
>cf04	af04	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $a7 SGN(
>cf0a	af0a	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $a8 SPC(
>cf10	af10	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $a9 STR$(
>cf17	af17	05 56 54 49 4c 45 28			.text	5,$56,"TILE("          ; $aa TILE(
>cf1e	af1e	06 a9 54 49 4d 45 52 28			.text	6,$a9,"TIMER("         ; $ab TIMER(
>cf26	af26	04 40 54 52 55 45			.text	4,$40,"TRUE"           ; $ac TRUE
>cf2c	af2c	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $ad VAL(
>cf32	af32	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $ae FOR
>cf37	af37	02 8f 49 46				.text	2,$8f,"IF"             ; $af IF
>cf3b	af3b	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $b0 PROC
>cf41	af41	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $b1 REPEAT
>cf49	af49	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $b2 WHILE
>cf50	af50	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $b3 ENDIF
>cf57	af57	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $b4 ENDPROC
>cf5f	af5f	43
>cf60	af60	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $b5 NEXT
>cf66	af66	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $b6 THEN
>cf6c	af6c	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $b7 UNTIL
>cf73	af73	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $b8 WEND
>cf79	af79	02 95 41 54				.text	2,$95,"AT"             ; $b9 AT
>cf7d	af7d	02 9b 42 59				.text	2,$9b,"BY"             ; $ba BY
>cf81	af81	04 1c 43 41 4c 4c			.text	4,$1c,"CALL"           ; $bb CALL
>cf87	af87	06 b2 43 49 52 43 4c 45			.text	6,$b2,"CIRCLE"         ; $bc CIRCLE
>cf8f	af8f	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $bd CLEAR
>cf96	af96	05 7f 43 4f 4c 4f 52			.text	5,$7f,"COLOR"          ; $be COLOR
>cf9d	af9d	06 d4 43 4f 4c 4f 55 52			.text	6,$d4,"COLOUR"         ; $bf COLOUR
>cfa5	afa5	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $c0 DATA
>cfab	afab	03 da 44 49 4d				.text	3,$da,"DIM"            ; $c1 DIM
>cfb0	afb0	06 db 44 4f 57 4e 54 4f			.text	6,$db,"DOWNTO"         ; $c2 DOWNTO
>cfb8	afb8	04 29 45 4c 53 45			.text	4,$29,"ELSE"           ; $c3 ELSE
>cfbe	afbe	04 34 46 52 4f 4d			.text	4,$34,"FROM"           ; $c4 FROM
>cfc4	afc4	03 e5 47 46 58				.text	3,$e5,"GFX"            ; $c5 GFX
>cfc9	afc9	04 24 48 45 52 45			.text	4,$24,"HERE"           ; $c6 HERE
>cfcf	afcf	05 63 49 4d 41 47 45			.text	5,$63,"IMAGE"          ; $c7 IMAGE
>cfd6	afd6	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $c8 LET
>cfdb	afdb	04 28 4c 49 4e 45			.text	4,$28,"LINE"           ; $c9 LINE
>cfe1	afe1	05 6b 4c 4f 43 41 4c			.text	5,$6b,"LOCAL"          ; $ca LOCAL
>cfe8	afe8	07 1a 4d 45 4d 43 4f 50			.text	7,$1a,"MEMCOPY"        ; $cb MEMCOPY
>cff0	aff0	59
>cff1	aff1	03 db 4f 46 46				.text	3,$db,"OFF"            ; $cc OFF
>cff6	aff6	02 9d 4f 4e				.text	2,$9d,"ON"             ; $cd ON
>cffa	affa	07 20 4f 55 54 4c 49 4e			.text	7,$20,"OUTLINE"        ; $ce OUTLINE
>d002	b002	45
>d003	b003	07 0f 50 41 4c 45 54 54			.text	7,$0f,"PALETTE"        ; $cf PALETTE
>d00b	b00b	45
>d00c	b00c	04 3f 50 4c 4f 54			.text	4,$3f,"PLOT"           ; $d0 PLOT
>d012	b012	04 2f 50 4f 4b 45			.text	4,$2f,"POKE"           ; $d1 POKE
>d018	b018	05 73 50 4f 4b 45 44			.text	5,$73,"POKED"          ; $d2 POKED
>d01f	b01f	05 7b 50 4f 4b 45 4c			.text	5,$7b,"POKEL"          ; $d3 POKEL
>d026	b026	05 86 50 4f 4b 45 57			.text	5,$86,"POKEW"          ; $d4 POKEW
>d02d	b02d	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $d5 READ
>d033	b033	04 2e 52 45 43 54			.text	4,$2e,"RECT"           ; $d6 RECT
>d039	b039	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $d7 REM
>d03e	b03e	05 7b 53 4f 4c 49 44			.text	5,$7b,"SOLID"          ; $d8 SOLID
>d045	b045	05 89 53 4f 55 4e 44			.text	5,$89,"SOUND"          ; $d9 SOUND
>d04c	b04c	06 d7 53 50 52 49 54 45			.text	6,$d7,"SPRITE"         ; $da SPRITE
>d054	b054	04 45 54 45 58 54			.text	4,$45,"TEXT"           ; $db TEXT
>d05a	b05a	02 a3 54 4f				.text	2,$a3,"TO"             ; $dc TO
>d05e	b05e	ff					.text	$FF
.d05f	b05f					KeywordSet1:
>d05f	b05f	00 65					.text	0,$65,""               ; $80 !0:EOF
>d061	b061	00 58					.text	0,$58,""               ; $81 !1:SH1
>d063	b063	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>d065	b065	08 4c 41 53 53 45 4d 42			.text	8,$4c,"ASSEMBLE"       ; $83 ASSEMBLE
>d06d	b06d	4c 45
>d06f	b06f	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $84 ASSERT
>d077	b077	06 bd 42 49 54 4d 41 50			.text	6,$bd,"BITMAP"         ; $85 BITMAP
>d07f	b07f	05 62 42 4c 4f 41 44			.text	5,$62,"BLOAD"          ; $86 BLOAD
>d086	b086	05 71 42 53 41 56 45			.text	5,$71,"BSAVE"          ; $87 BSAVE
>d08d	b08d	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $88 CLS
>d092	b092	06 d0 43 50 52 49 4e 54			.text	6,$d0,"CPRINT"         ; $89 CPRINT
>d09a	b09a	03 df 44 49 52				.text	3,$df,"DIR"            ; $8a DIR
>d09f	b09f	03 e6 44 4f 53				.text	3,$e6,"DOS"            ; $8b DOS
>d0a4	b0a4	05 7a 44 52 49 56 45			.text	5,$7a,"DRIVE"          ; $8c DRIVE
>d0ab	b0ab	03 d7 45 4e 44				.text	3,$d7,"END"            ; $8d END
>d0b0	b0b0	07 11 45 58 50 4c 4f 44			.text	7,$11,"EXPLODE"        ; $8e EXPLODE
>d0b8	b0b8	45
>d0b9	b0b9	02 96 47 4f				.text	2,$96,"GO"             ; $8f GO
>d0bd	b0bd	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $90 GOSUB
>d0c4	b0c4	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $91 GOTO
>d0ca	b0ca	05 70 48 49 4d 45 4d			.text	5,$70,"HIMEM"          ; $92 HIMEM
>d0d1	b0d1	05 90 49 4e 50 55 54			.text	5,$90,"INPUT"          ; $93 INPUT
>d0d8	b0d8	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $94 LIST
>d0de	b0de	04 20 4c 4f 41 44			.text	4,$20,"LOAD"           ; $95 LOAD
>d0e4	b0e4	06 b7 4d 44 45 4c 54 41			.text	6,$b7,"MDELTA"         ; $96 MDELTA
>d0ec	b0ec	05 89 4d 4f 55 53 45			.text	5,$89,"MOUSE"          ; $97 MOUSE
>d0f3	b0f3	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $98 NEW
>d0f8	b0f8	04 2e 50 49 4e 47			.text	4,$2e,"PING"           ; $99 PING
>d0fe	b0fe	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $9a PRINT
>d105	b105	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $9b RESTORE
>d10d	b10d	45
>d10e	b10e	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $9c RETURN
>d116	b116	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $9d RUN
>d11b	b11b	04 2f 53 41 56 45			.text	4,$2f,"SAVE"           ; $9e SAVE
>d121	b121	07 0a 53 45 54 44 41 54			.text	7,$0a,"SETDATE"        ; $9f SETDATE
>d129	b129	45
>d12a	b12a	07 1b 53 45 54 54 49 4d			.text	7,$1b,"SETTIME"        ; $a0 SETTIME
>d132	b132	45
>d133	b133	05 8d 53 48 4f 4f 54			.text	5,$8d,"SHOOT"          ; $a1 SHOOT
>d13a	b13a	07 2a 53 50 52 49 54 45			.text	7,$2a,"SPRITES"        ; $a2 SPRITES
>d142	b142	53
>d143	b143	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $a3 STOP
>d149	b149	04 2e 54 49 4c 45			.text	4,$2e,"TILE"           ; $a4 TILE
>d14f	b14f	05 81 54 49 4c 45 53			.text	5,$81,"TILES"          ; $a5 TILES
>d156	b156	03 ff 54 52 59				.text	3,$ff,"TRY"            ; $a6 TRY
>d15b	b15b	06 d5 56 45 52 49 46 59			.text	6,$d5,"VERIFY"         ; $a7 VERIFY
>d163	b163	03 ee 58 47 4f				.text	3,$ee,"XGO"            ; $a8 XGO
>d168	b168	05 78 58 4c 4f 41 44			.text	5,$78,"XLOAD"          ; $a9 XLOAD
>d16f	b16f	03 eb 5a 41 50				.text	3,$eb,"ZAP"            ; $aa ZAP
>d174	b174	ff					.text	$FF
.d175	b175					KeywordSet2:
>d175	b175	00 65					.text	0,$65,""               ; $80 !0:EOF
>d177	b177	00 58					.text	0,$58,""               ; $81 !1:SH1
>d179	b179	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>d17b	b17b	03 c8 41 44 43				.text	3,$c8,"ADC"            ; $83 ADC
>d180	b180	03 d3 41 4e 44				.text	3,$d3,"AND"            ; $84 AND
>d185	b185	03 e0 41 53 4c				.text	3,$e0,"ASL"            ; $85 ASL
>d18a	b18a	03 c8 42 43 43				.text	3,$c8,"BCC"            ; $86 BCC
>d18f	b18f	03 d8 42 43 53				.text	3,$d8,"BCS"            ; $87 BCS
>d194	b194	03 d8 42 45 51				.text	3,$d8,"BEQ"            ; $88 BEQ
>d199	b199	03 df 42 49 54				.text	3,$df,"BIT"            ; $89 BIT
>d19e	b19e	03 d8 42 4d 49				.text	3,$d8,"BMI"            ; $8a BMI
>d1a3	b1a3	03 d5 42 4e 45				.text	3,$d5,"BNE"            ; $8b BNE
>d1a8	b1a8	03 de 42 50 4c				.text	3,$de,"BPL"            ; $8c BPL
>d1ad	b1ad	03 d5 42 52 41				.text	3,$d5,"BRA"            ; $8d BRA
>d1b2	b1b2	03 df 42 52 4b				.text	3,$df,"BRK"            ; $8e BRK
>d1b7	b1b7	03 db 42 56 43				.text	3,$db,"BVC"            ; $8f BVC
>d1bc	b1bc	03 eb 42 56 53				.text	3,$eb,"BVS"            ; $90 BVS
>d1c1	b1c1	03 d2 43 4c 43				.text	3,$d2,"CLC"            ; $91 CLC
>d1c6	b1c6	03 d3 43 4c 44				.text	3,$d3,"CLD"            ; $92 CLD
>d1cb	b1cb	03 d8 43 4c 49				.text	3,$d8,"CLI"            ; $93 CLI
>d1d0	b1d0	03 e5 43 4c 56				.text	3,$e5,"CLV"            ; $94 CLV
>d1d5	b1d5	03 e0 43 4d 50				.text	3,$e0,"CMP"            ; $95 CMP
>d1da	b1da	03 eb 43 50 58				.text	3,$eb,"CPX"            ; $96 CPX
>d1df	b1df	03 ec 43 50 59				.text	3,$ec,"CPY"            ; $97 CPY
>d1e4	b1e4	03 cc 44 45 43				.text	3,$cc,"DEC"            ; $98 DEC
>d1e9	b1e9	03 e1 44 45 58				.text	3,$e1,"DEX"            ; $99 DEX
>d1ee	b1ee	03 e2 44 45 59				.text	3,$e2,"DEY"            ; $9a DEY
>d1f3	b1f3	03 e6 45 4f 52				.text	3,$e6,"EOR"            ; $9b EOR
>d1f8	b1f8	03 da 49 4e 43				.text	3,$da,"INC"            ; $9c INC
>d1fd	b1fd	03 ef 49 4e 58				.text	3,$ef,"INX"            ; $9d INX
>d202	b202	03 f0 49 4e 59				.text	3,$f0,"INY"            ; $9e INY
>d207	b207	03 e7 4a 4d 50				.text	3,$e7,"JMP"            ; $9f JMP
>d20c	b20c	03 ef 4a 53 52				.text	3,$ef,"JSR"            ; $a0 JSR
>d211	b211	03 d1 4c 44 41				.text	3,$d1,"LDA"            ; $a1 LDA
>d216	b216	03 e8 4c 44 58				.text	3,$e8,"LDX"            ; $a2 LDX
>d21b	b21b	03 e9 4c 44 59				.text	3,$e9,"LDY"            ; $a3 LDY
>d220	b220	03 f1 4c 53 52				.text	3,$f1,"LSR"            ; $a4 LSR
>d225	b225	03 ed 4e 4f 50				.text	3,$ed,"NOP"            ; $a5 NOP
>d22a	b22a	03 e2 4f 52 41				.text	3,$e2,"ORA"            ; $a6 ORA
>d22f	b22f	03 d9 50 48 41				.text	3,$d9,"PHA"            ; $a7 PHA
>d234	b234	03 e8 50 48 50				.text	3,$e8,"PHP"            ; $a8 PHP
>d239	b239	03 f0 50 48 58				.text	3,$f0,"PHX"            ; $a9 PHX
>d23e	b23e	03 f1 50 48 59				.text	3,$f1,"PHY"            ; $aa PHY
>d243	b243	03 dd 50 4c 41				.text	3,$dd,"PLA"            ; $ab PLA
>d248	b248	03 ec 50 4c 50				.text	3,$ec,"PLP"            ; $ac PLP
>d24d	b24d	03 f4 50 4c 58				.text	3,$f4,"PLX"            ; $ad PLX
>d252	b252	03 f5 50 4c 59				.text	3,$f5,"PLY"            ; $ae PLY
>d257	b257	03 ed 52 4f 4c				.text	3,$ed,"ROL"            ; $af ROL
>d25c	b25c	03 f3 52 4f 52				.text	3,$f3,"ROR"            ; $b0 ROR
>d261	b261	03 ef 52 54 49				.text	3,$ef,"RTI"            ; $b1 RTI
>d266	b266	03 f9 52 54 53				.text	3,$f9,"RTS"            ; $b2 RTS
>d26b	b26b	03 d8 53 42 43				.text	3,$d8,"SBC"            ; $b3 SBC
>d270	b270	03 db 53 45 43				.text	3,$db,"SEC"            ; $b4 SEC
>d275	b275	03 dc 53 45 44				.text	3,$dc,"SED"            ; $b5 SED
>d27a	b27a	03 e1 53 45 49				.text	3,$e1,"SEI"            ; $b6 SEI
>d27f	b27f	03 e8 53 54 41				.text	3,$e8,"STA"            ; $b7 STA
>d284	b284	03 f7 53 54 50				.text	3,$f7,"STP"            ; $b8 STP
>d289	b289	03 ff 53 54 58				.text	3,$ff,"STX"            ; $b9 STX
>d28e	b28e	03 00 53 54 59				.text	3,$00,"STY"            ; $ba STY
>d293	b293	03 01 53 54 5a				.text	3,$01,"STZ"            ; $bb STZ
>d298	b298	03 ed 54 41 58				.text	3,$ed,"TAX"            ; $bc TAX
>d29d	b29d	03 ee 54 41 59				.text	3,$ee,"TAY"            ; $bd TAY
>d2a2	b2a2	03 e8 54 52 42				.text	3,$e8,"TRB"            ; $be TRB
>d2a7	b2a7	03 e9 54 53 42				.text	3,$e9,"TSB"            ; $bf TSB
>d2ac	b2ac	03 ff 54 53 58				.text	3,$ff,"TSX"            ; $c0 TSX
>d2b1	b2b1	03 ed 54 58 41				.text	3,$ed,"TXA"            ; $c1 TXA
>d2b6	b2b6	03 ff 54 58 53				.text	3,$ff,"TXS"            ; $c2 TXS
>d2bb	b2bb	03 ee 54 59 41				.text	3,$ee,"TYA"            ; $c3 TYA
>d2c0	b2c0	ff					.text	$FF
.d2c1	b2c1					Export_TKListConvertLine:
.d2c1	b2c1	48		pha				pha 								; save indent on the stack
.d2c2	b2c2	9c 19 04	stz $0419			stz 	tbOffset
.d2c5	b2c5	9c 29 04	stz $0429			stz 	tokenBuffer
.d2c8	b2c8	9c 25 04	stz $0425			stz 	currentListColour
.d2cb	b2cb	a9 8d		lda #$8d			lda 	#CLILineNumber+$80
.d2cd	b2cd	20 4a b4	jsr $b44a			jsr 	LCLWriteColour
.d2d0	b2d0	a0 02		ldy #$02			ldy 	#2 							; convert line number to string
.d2d2	b2d2	b1 30		lda ($30),y			lda 	(codePtr),y
.d2d4	b2d4	aa		tax				tax
.d2d5	b2d5	88		dey				dey
.d2d6	b2d6	b1 30		lda ($30),y			lda 	(codePtr),y
.d2d8	b2d8	20 bb b4	jsr $b4bb			jsr 	LCLWriteNumberXA
.d2db	b2db	68		pla				pla 								; adjustment to indent
.d2dc	b2dc	48		pha				pha 								; save on stack
.d2dd	b2dd	10 0c		bpl $b2eb			bpl 	_LCNoAdjust 				; don't adjust indent if +ve, do after.
.d2df	b2df	18		clc				clc 								; add to list indent and make 0 if goes -ve.
.d2e0	b2e0	6d 22 04	adc $0422			adc 	listIndent
.d2e3	b2e3	8d 22 04	sta $0422			sta 	listIndent
.d2e6	b2e6	10 03		bpl $b2eb			bpl 	_LCNoAdjust
.d2e8	b2e8	9c 22 04	stz $0422			stz 	listIndent
.d2eb	b2eb					_LCNoAdjust:
.d2eb	b2eb	18		clc				clc		 							; work out actual indent.
.d2ec	b2ec	ad 22 04	lda $0422			lda 	listIndent
.d2ef	b2ef	0a		asl a				asl 	a
.d2f0	b2f0	69 07		adc #$07			adc 	#7
.d2f2	b2f2	85 36		sta $36				sta 	zTemp0
.d2f4	b2f4					_LCPadOut:
.d2f4	b2f4	a9 20		lda #$20			lda 	#' '						; pad out to 6+indent characters
.d2f6	b2f6	20 53 b4	jsr $b453			jsr 	LCLWrite
.d2f9	b2f9	ad 19 04	lda $0419			lda 	tbOffset
.d2fc	b2fc	c5 36		cmp $36				cmp 	zTemp0
.d2fe	b2fe	d0 f4		bne $b2f4			bne 	_LCPadOut
.d300	b300	a0 03		ldy #$03			ldy 	#3 							; start position.
.d302	b302					_LCMainLoop:
.d302	b302	a9 8c		lda #$8c			lda 	#CLIPunctuation+$80
.d304	b304	20 4a b4	jsr $b44a			jsr 	LCLWriteColour
.d307	b307	b1 30		lda ($30),y			lda 	(codePtr),y
.d309	b309	c9 80		cmp #$80			cmp 	#KWC_EOL 					; end of line ?
.d30b	b30b	f0 17		beq $b324			beq 	_LCExit
.d30d	b30d	c9 10		cmp #$10			cmp 	#16 						; 0-5 are the double punctuations
.d30f	b30f	90 1e		bcc $b32f			bcc 	_LCDoubles
.d311	b311	c9 20		cmp #$20			cmp 	#32 						; 16-31 are shifted punctuation from 64-91
.d313	b313	90 2a		bcc $b33f			bcc 	_LCShiftPunc
.d315	b315	c9 40		cmp #$40			cmp 	#64 						; 32-64 are as stored, punc and digits
.d317	b317	90 35		bcc $b34e			bcc 	_LCPunctuation
.d319	b319	c9 80		cmp #$80			cmp 	#128 						; 64-127 are variable identifiers.
.d31b	b31b	90 51		bcc $b36e			bcc 	_LCIdentifiers
.d31d	b31d	c9 fe		cmp #$fe			cmp 	#254 						; 128-253 are tokenised words
.d31f	b31f	90 73		bcc $b394			bcc 	_LCTokens
.d321	b321	4c f4 b3	jmp $b3f4			jmp 	_LCData 					; 254-5 are data objects
.d324	b324					_LCExit:
.d324	b324	68		pla				pla 								; get old indent adjust
.d325	b325	30 07		bmi $b32e			bmi 	_LCExit2
.d327	b327	18		clc				clc 								; add to indent if +ve
.d328	b328	6d 22 04	adc $0422			adc 	listIndent
.d32b	b32b	8d 22 04	sta $0422			sta 	listIndent
.d32e	b32e					_LCExit2:
.d32e	b32e	60		rts				rts
.d32f	b32f					_LCDoubles:
.d32f	b32f	48		pha				pha
.d330	b330	4a		lsr a				lsr 	a 							; put bit 2 into bit 1
.d331	b331	29 02		and #$02			and 	#2
.d333	b333	09 3c		ora #$3c			ora 	#60 						; make < >
.d335	b335	20 53 b4	jsr $b453			jsr 	LCLWrite
.d338	b338	68		pla				pla 								; restore, do lower bit
.d339	b339	29 03		and #$03			and 	#3
.d33b	b33b	09 3c		ora #$3c			ora 	#60
.d33d	b33d	80 0f		bra $b34e			bra		_LCPunctuation 				; print, increment, loop
.d33f	b33f					_LCShiftPunc:
.d33f	b33f	aa		tax				tax 								; save in X
.d340	b340	29 07		and #$07			and 	#7 							; lower 3 bits
.d342	b342	f0 02		beq $b346			beq 	_LCNoAdd
.d344	b344	09 18		ora #$18			ora 	#24 						; adds $18 to it.
.d346	b346					_LCNoAdd:
.d346	b346	e0 18		cpx #$18			cpx 	#24 						; if >= 24 add $20
.d348	b348	90 02		bcc $b34c			bcc 	_LCNoAdd2
.d34a	b34a	09 20		ora #$20			ora 	#32 						; adds $20
.d34c	b34c					_LCNoAdd2:
.d34c	b34c	09 40		ora #$40			ora 	#$40 						; shift into 64-127 range and fall through.
.d34e	b34e					_LCPunctuation:
.d34e	b34e	c9 3a		cmp #$3a			cmp 	#':' 						; check if :
.d350	b350	d0 03		bne $b355			bne 	_LCPContinue
.d352	b352	20 69 b4	jsr $b469			jsr 	LCLDeleteLastSpace 			; if so delete any preceding spaces
.d355	b355					_LCPContinue:
.d355	b355	c9 2e		cmp #$2e			cmp 	#'.'
.d357	b357	f0 08		beq $b361			beq 	_LCPIsConstant
.d359	b359	c9 30		cmp #$30			cmp 	#'0'
.d35b	b35b	90 0b		bcc $b368			bcc 	_LCPNotConstant
.d35d	b35d	c9 3a		cmp #$3a			cmp 	#'9'+1
.d35f	b35f	b0 07		bcs $b368			bcs 	_LCPNotConstant
.d361	b361					_LCPIsConstant:
.d361	b361	48		pha				pha
.d362	b362	a9 87		lda #$87			lda 	#CLIConstant+$80
.d364	b364	20 4a b4	jsr $b44a			jsr 	LCLWriteColour
.d367	b367	68		pla				pla
.d368	b368					_LCPNotConstant:
.d368	b368	c8		iny				iny 								; consume character
.d369	b369	20 53 b4	jsr $b453			jsr 	LCLWrite 					; write it out.
.d36c	b36c	80 94		bra $b302			bra 	_LCMainLoop 				; go round again.
.d36e	b36e					_LCIdentifiers:
.d36e	b36e	18		clc				clc 								; convert to physical address
.d36f	b36f	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.d371	b371	85 37		sta $37				sta 	zTemp0+1
.d373	b373	c8		iny				iny
.d374	b374	b1 30		lda ($30),y			lda 	(codePtr),y
.d376	b376	85 36		sta $36				sta 	zTemp0
.d378	b378	c8		iny				iny
.d379	b379	5a		phy				phy 								; save position
.d37a	b37a	a9 8e		lda #$8e			lda 	#CLIIdentifier+$80
.d37c	b37c	20 4a b4	jsr $b44a			jsr 	LCLWriteColour
.d37f	b37f	a0 07		ldy #$07			ldy 	#7 							; output the identifier at +8
.d381	b381					_LCOutIdentifier:
.d381	b381	c8		iny				iny
.d382	b382	b1 36		lda ($36),y			lda 	(zTemp0),y					; bit 7 set = end.
.d384	b384	29 7f		and #$7f			and 	#$7F
.d386	b386	20 a5 b4	jsr $b4a5			jsr 	LCLLowerCase
.d389	b389	20 53 b4	jsr $b453			jsr 	LCLWrite
.d38c	b38c	b1 36		lda ($36),y			lda 	(zTemp0),y				 	; ends when bit 7 set.
.d38e	b38e	10 f1		bpl $b381			bpl 	_LCOutIdentifier
.d390	b390	7a		ply				ply 								; restore position
.d391	b391	4c 02 b3	jmp $b302			jmp 	_LCMainLoop
.d394	b394					_LCTokens:
.d394	b394	aa		tax				tax 								; token in X
.d395	b395	a9 75		lda #$75			lda 	#((KeywordSet2) & $FF)
.d397	b397	85 36		sta $36				sta 	0+zTemp0
.d399	b399	a9 b1		lda #$b1			lda 	#((KeywordSet2) >> 8)
.d39b	b39b	85 37		sta $37				sta 	1+zTemp0
.d39d	b39d	e0 82		cpx #$82			cpx 	#$82
.d39f	b39f	f0 16		beq $b3b7			beq 	_LCUseShift
.d3a1	b3a1	a9 5f		lda #$5f			lda 	#((KeywordSet1) & $FF)
.d3a3	b3a3	85 36		sta $36				sta 	0+zTemp0
.d3a5	b3a5	a9 b0		lda #$b0			lda 	#((KeywordSet1) >> 8)
.d3a7	b3a7	85 37		sta $37				sta 	1+zTemp0
.d3a9	b3a9	e0 81		cpx #$81			cpx 	#$81
.d3ab	b3ab	f0 0a		beq $b3b7			beq 	_LCUseShift
.d3ad	b3ad	a9 e7		lda #$e7			lda 	#((KeywordSet0) & $FF)
.d3af	b3af	85 36		sta $36				sta 	0+zTemp0
.d3b1	b3b1	a9 ad		lda #$ad			lda 	#((KeywordSet0) >> 8)
.d3b3	b3b3	85 37		sta $37				sta 	1+zTemp0
.d3b5	b3b5	80 01		bra $b3b8			bra 	_LCNoShift
.d3b7	b3b7					_LCUseShift:
.d3b7	b3b7	c8		iny				iny
.d3b8	b3b8					_LCNoShift:
.d3b8	b3b8	20 7d b4	jsr $b47d			jsr 	LCLCheckSpaceRequired 		; do we need a space ?
.d3bb	b3bb	b1 30		lda ($30),y			lda 	(codePtr),y
.d3bd	b3bd	aa		tax				tax 								; into X
.d3be	b3be					_LCFindText:
.d3be	b3be	ca		dex				dex
.d3bf	b3bf	10 0e		bpl $b3cf			bpl 	_LCFoundText 				; found text.
.d3c1	b3c1	b2 36		lda ($36)			lda 	(zTemp0) 					; length of text
.d3c3	b3c3	1a		inc a				inc 	a 							; one extra for size
.d3c4	b3c4	38		sec				sec 								; one extra for checksum
.d3c5	b3c5	65 36		adc $36				adc 	zTemp0 						; go to next token
.d3c7	b3c7	85 36		sta $36				sta 	zTemp0
.d3c9	b3c9	90 f3		bcc $b3be			bcc 	_LCFindText
.d3cb	b3cb	e6 37		inc $37				inc 	zTemp0+1
.d3cd	b3cd	80 ef		bra $b3be			bra 	_LCFindText
.d3cf	b3cf					_LCFoundText:
.d3cf	b3cf	5a		phy				phy 								; save List position
.d3d0	b3d0	b2 36		lda ($36)			lda 	(zTemp0)					; count to print
.d3d2	b3d2	aa		tax				tax
.d3d3	b3d3	a9 86		lda #$86			lda 	#CLIToken+$80
.d3d5	b3d5	20 4a b4	jsr $b44a			jsr 	LCLWriteColour
.d3d8	b3d8	a0 02		ldy #$02			ldy 	#2
.d3da	b3da					_LCCopyToken:
.d3da	b3da	b1 36		lda ($36),y			lda 	(zTemp0),y
.d3dc	b3dc	20 a5 b4	jsr $b4a5			jsr 	LCLLowerCase
.d3df	b3df	20 53 b4	jsr $b453			jsr 	LCLWrite
.d3e2	b3e2	c8		iny				iny
.d3e3	b3e3	ca		dex				dex
.d3e4	b3e4	d0 f4		bne $b3da			bne 	_LCCopyToken
.d3e6	b3e6	c9 28		cmp #$28			cmp 	#"(" 						; if last char not ( print a space
.d3e8	b3e8	f0 05		beq $b3ef			beq 	_LCNoSpace
.d3ea	b3ea	a9 20		lda #$20			lda 	#' '
.d3ec	b3ec	20 53 b4	jsr $b453			jsr 	LCLWrite
.d3ef	b3ef					_LCNoSpace:
.d3ef	b3ef	7a		ply				ply 								; restore position.
.d3f0	b3f0	c8		iny				iny 								; consume token
.d3f1	b3f1	4c 02 b3	jmp $b302			jmp 	_LCMainLoop 				; and go around again.
.d3f4	b3f4					_LCData:
.d3f4	b3f4	48		pha				pha 								; save type $FE/$FF
.d3f5	b3f5	a2 24		ldx #$24			ldx 	#'$' 						; figure out $ or "
.d3f7	b3f7	c9 fe		cmp #$fe			cmp 	#$FE
.d3f9	b3f9	f0 22		beq $b41d			beq 	_LCHaveOpener
.d3fb	b3fb	a2 22		ldx #$22			ldx 	#'"'
.d3fd	b3fd	a9 8f		lda #$8f			lda 	#CLIData+$80
.d3ff	b3ff	20 4a b4	jsr $b44a			jsr 	LCLWriteColour
.d402	b402	c0 04		cpy #$04			cpy 	#4 							; must be 2nd thing on line
.d404	b404	d0 17		bne $b41d			bne 	_LCHaveOpener
.d406	b406	88		dey				dey 								; what precedes it ?
.d407	b407	b1 30		lda ($30),y			lda 	(codePtr),y
.d409	b409	c8		iny				iny
.d40a	b40a	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; if quote
.d40c	b40c	d0 0f		bne $b41d			bne 	_LCHaveOpener
.d40e	b40e	a9 09		lda #$09			lda 	#9 							; tab
.d410	b410	20 53 b4	jsr $b453			jsr 	LCLWrite
.d413	b413	a9 9e		lda #$9e			lda 	#$90+CLIBComment
.d415	b415	20 53 b4	jsr $b453			jsr 	LCLWrite
.d418	b418	a9 85		lda #$85			lda 	#CLIFComment+$80
.d41a	b41a	20 4a b4	jsr $b44a			jsr 	LCLWriteColour
.d41d	b41d					_LCHaveOpener:
.d41d	b41d	8a		txa				txa 								; output prefix (# or ")
.d41e	b41e	20 53 b4	jsr $b453			jsr 	LCLWrite
.d421	b421	c8		iny				iny 								; get count
.d422	b422	b1 30		lda ($30),y			lda 	(codePtr),y
.d424	b424	aa		tax				tax
.d425	b425	c8		iny				iny 								; point at first character
.d426	b426					_LCOutData:
.d426	b426	b1 30		lda ($30),y			lda 	(codePtr),y
.d428	b428	c9 00		cmp #$00			cmp 	#0
.d42a	b42a	f0 03		beq $b42f			beq 	_LCNoPrint
.d42c	b42c	20 53 b4	jsr $b453			jsr 	LCLWrite
.d42f	b42f					_LCNoPrint:
.d42f	b42f	c8		iny				iny
.d430	b430	ca		dex				dex
.d431	b431	d0 f3		bne $b426			bne 	_LCOutData
.d433	b433	68		pla				pla 								; closing " required ?
.d434	b434	c9 ff		cmp #$ff			cmp 	#$FF 						; not required for hex constant.
.d436	b436	d0 0f		bne $b447			bne 	_LCNoQuote
.d438	b438	a9 22		lda #$22			lda 	#'"'
.d43a	b43a	20 53 b4	jsr $b453			jsr 	LCLWrite
.d43d	b43d	ad c5 07	lda $07c5			lda 	EXTTextColour
.d440	b440	29 0f		and #$0f			and 	#$0F
.d442	b442	09 90		ora #$90			ora 	#$90
.d444	b444	20 53 b4	jsr $b453			jsr 	LCLWrite
.d447	b447					_LCNoQuote:
.d447	b447	4c 02 b3	jmp $b302			jmp 	_LCMainLoop
.d44a	b44a					LCLWriteColour:
.d44a	b44a	cd 25 04	cmp $0425			cmp 	currentListColour 			; has the colour changed
.d44d	b44d	8d 25 04	sta $0425			sta 	currentListColour 			; (update it anyway)
.d450	b450	d0 01		bne $b453			bne 	LCLWrite 					; if different, output it
.d452	b452	60		rts				rts
.d453	b453					LCLWrite:
.d453	b453	da		phx				phx
.d454	b454	ae 19 04	ldx $0419			ldx 	tbOffset 					; write out make ASCIIZ
.d457	b457	9d 29 04	sta $0429,x			sta 	tokenBuffer,x
.d45a	b45a	9e 2a 04	stz $042a,x			stz 	tokenBuffer+1,x
.d45d	b45d	ee 19 04	inc $0419			inc 	tbOffset 					; bump the position
.d460	b460	09 00		ora #$00			ora 	#0 							; don't update last character if colour data
.d462	b462	30 03		bmi $b467			bmi 	_LCLNoColour
.d464	b464	8d 23 04	sta $0423			sta 	lcLastCharacter
.d467	b467					_LCLNoColour:
.d467	b467	fa		plx				plx
.d468	b468	60		rts				rts
.d469	b469					LCLDeleteLastSpace:
.d469	b469	48		pha				pha
.d46a	b46a	da		phx				phx
.d46b	b46b	ae 19 04	ldx $0419			ldx 	tbOffset
.d46e	b46e	f0 0a		beq $b47a			beq 	_LCDLSExit
.d470	b470	bd 28 04	lda $0428,x			lda 	tokenBuffer-1,x
.d473	b473	c9 20		cmp #$20			cmp 	#' '
.d475	b475	d0 03		bne $b47a			bne 	_LCDLSExit
.d477	b477	ce 19 04	dec $0419			dec 	tbOffset
.d47a	b47a					_LCDLSExit:
.d47a	b47a	fa		plx				plx
.d47b	b47b	68		pla				pla
.d47c	b47c	60		rts				rts
.d47d	b47d					LCLCheckSpaceRequired:
.d47d	b47d	ad 23 04	lda $0423			lda 	lcLastCharacter 			; check last character
.d480	b480	c9 24		cmp #$24			cmp 	#'$' 						; $ # and ) require that token space.
.d482	b482	f0 1b		beq $b49f			beq 	_LCCSRSpace
.d484	b484	c9 29		cmp #$29			cmp 	#')'
.d486	b486	f0 17		beq $b49f			beq 	_LCCSRSpace
.d488	b488	c9 23		cmp #$23			cmp 	#'#'
.d48a	b48a	f0 13		beq $b49f			beq 	_LCCSRSpace
.d48c	b48c	20 a5 b4	jsr $b4a5			jsr 	LCLLowerCase 				; saves a little effort
.d48f	b48f	c9 30		cmp #$30			cmp 	#"0" 						; check if it was 0-9 A-Z a-z if so need space.
.d491	b491	90 11		bcc $b4a4			bcc 	_LCCSRExit
.d493	b493	c9 3a		cmp #$3a			cmp 	#"9"+1
.d495	b495	90 08		bcc $b49f			bcc 	_LCCSRSpace
.d497	b497	c9 61		cmp #$61			cmp 	#"a"
.d499	b499	90 09		bcc $b4a4			bcc 	_LCCSRExit
.d49b	b49b	c9 7b		cmp #$7b			cmp 	#"z"+1
.d49d	b49d	b0 05		bcs $b4a4			bcs 	_LCCSRExit
.d49f	b49f					_LCCSRSpace:
.d49f	b49f	a9 20		lda #$20			lda 	#' '
.d4a1	b4a1	20 53 b4	jsr $b453			jsr 	LCLWrite
.d4a4	b4a4					_LCCSRExit:
.d4a4	b4a4	60		rts				rts
.d4a5	b4a5					LCLLowerCase:
.d4a5	b4a5	c9 41		cmp #$41			cmp 	#"A"
.d4a7	b4a7	90 06		bcc $b4af			bcc 	_LCLLCOut
.d4a9	b4a9	c9 5b		cmp #$5b			cmp 	#"Z"+1
.d4ab	b4ab	b0 02		bcs $b4af			bcs 	_LCLLCOut
.d4ad	b4ad	69 20		adc #$20			adc 	#$20
.d4af	b4af					_LCLLCOut:
.d4af	b4af	60		rts				rts
.d4b0	b4b0					LCLUpperCase:
.d4b0	b4b0	c9 61		cmp #$61			cmp 	#"a"
.d4b2	b4b2	90 06		bcc $b4ba			bcc 	_LCLUCOut
.d4b4	b4b4	c9 7b		cmp #$7b			cmp 	#"z"+1
.d4b6	b4b6	b0 02		bcs $b4ba			bcs 	_LCLUCOut
.d4b8	b4b8	e9 1f		sbc #$1f			sbc 	#$1F
.d4ba	b4ba					_LCLUCOut:
.d4ba	b4ba	60		rts				rts
.d4bb	b4bb					LCLWriteNumberXA:
.d4bb	b4bb	64 37		stz $37				stz 	zTemp0+1 					; index into digit table.
.d4bd	b4bd					_LCLWNLoop1:
.d4bd	b4bd	64 36		stz $36				stz 	zTemp0 						; subtraction count.
.d4bf	b4bf					_LCLWNLoop2:
.d4bf	b4bf	48		pha				pha 								; save initial LSB
.d4c0	b4c0	38		sec				sec
.d4c1	b4c1	a4 37		ldy $37				ldy 	zTemp0+1 					; position in table.
.d4c3	b4c3	f9 f4 b4	sbc $b4f4,y			sbc 	_LCLWNTable,y
.d4c6	b4c6	48		pha				pha
.d4c7	b4c7	8a		txa				txa
.d4c8	b4c8	f9 f5 b4	sbc $b4f5,y			sbc 	_LCLWNTable+1,y
.d4cb	b4cb	90 07		bcc $b4d4			bcc 	_LCLWNUnderflow
.d4cd	b4cd	e6 36		inc $36				inc 	zTemp0  					; subtracted one without borrow.
.d4cf	b4cf	aa		tax				tax 								; update X
.d4d0	b4d0	68		pla				pla 								; restore A
.d4d1	b4d1	7a		ply				ply 								; throw original
.d4d2	b4d2	80 eb		bra $b4bf			bra 	_LCLWNLoop2 				; try again.
.d4d4	b4d4					_LCLWNUnderflow:
.d4d4	b4d4	a4 36		ldy $36				ldy 	zTemp0 						; count of subtractions.
.d4d6	b4d6	d0 06		bne $b4de			bne 	_LCLWNOut
.d4d8	b4d8	ad 19 04	lda $0419			lda 	tbOffset 					; suppress leading zeroes
.d4db	b4db	3a		dec a				dec 	a
.d4dc	b4dc	f0 04		beq $b4e2			beq 	_LCLWNNext
.d4de	b4de					_LCLWNOut:
.d4de	b4de	98		tya				tya
.d4df	b4df	20 ee b4	jsr $b4ee			jsr 	_LCLWNOutDigit
.d4e2	b4e2					_LCLWNNext:
.d4e2	b4e2	7a		ply				ply 							 	; restore original value.
.d4e3	b4e3	68		pla				pla
.d4e4	b4e4	a4 37		ldy $37				ldy 	zTemp0+1  					; bump the index
.d4e6	b4e6	c8		iny				iny
.d4e7	b4e7	c8		iny				iny
.d4e8	b4e8	84 37		sty $37				sty 	zTemp0+1
.d4ea	b4ea	c0 08		cpy #$08			cpy 	#8 							; done all 4
.d4ec	b4ec	d0 cf		bne $b4bd			bne 	_LCLWNLoop1
.d4ee	b4ee					_LCLWNOutDigit:
.d4ee	b4ee	09 30		ora #$30			ora 	#'0'
.d4f0	b4f0	20 53 b4	jsr $b453			jsr 	LCLWrite
.d4f3	b4f3	60		rts				rts
.d4f4	b4f4					_LCLWNTable:
>d4f4	b4f4	10 27						.word 	10000
>d4f6	b4f6	e8 03						.word 	1000
>d4f8	b4f8	64 00						.word 	100
>d4fa	b4fa	0a 00						.word 	10
.d4fc	b4fc					TOKSearchTable:
.d4fc	b4fc	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token being tested.
.d4fe	b4fe	85 36		sta $36				sta 	zTemp0
.d500	b500	a0 00		ldy #$00			ldy 	#0
.d502	b502	a9 80		lda #$80			lda 	#$80 						; token # so we know which one we are looking at
.d504	b504	85 38		sta $38				sta 	zTemp1
.d506	b506					_TSTLoop:
.d506	b506	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.d508	b508	30 49		bmi $b553			bmi 	_TSTFail 					; -ve = end of table, so fail.
.d50a	b50a	f0 2e		beq $b53a			beq 	_TSTNext 					; zero, check next as it's a dummy (e.g. EOL, SHIFT)
.d50c	b50c	c8		iny				iny 								; get the hash
.d50d	b50d	b1 36		lda ($36),y			lda 	(zTemp0),y
.d50f	b50f	88		dey				dey
.d510	b510	cd 03 04	cmp $0403			cmp 	identHash 					; check they match with the identifier hash, if not go to next
.d513	b513	d0 25		bne $b53a			bne 	_TSTNext
.d515	b515	ad 02 04	lda $0402			lda 	identTypeEnd 				; get length of identifier from end-start
.d518	b518	38		sec				sec
.d519	b519	ed 00 04	sbc $0400			sbc 	identStart
.d51c	b51c	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; compare against the length in the table, no match, then return.
.d51e	b51e	d0 1a		bne $b53a			bne 	_TSTNext
.d520	b520	5a		phy				phy 								; save Y , we might fail to match.
.d521	b521	c8		iny				iny 								; point to text
.d522	b522	c8		iny				iny
.d523	b523	ae 00 04	ldx $0400			ldx 	identStart 					; offset in line buffer in X
.d526	b526					_TSTCompareName:
.d526	b526	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; compare text.
.d529	b529	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.d52b	b52b	d0 0c		bne $b539			bne 	_TSTNextPullY 				; fail, pullY and do next
.d52d	b52d	e8		inx				inx
.d52e	b52e	c8		iny				iny
.d52f	b52f	ec 02 04	cpx $0402			cpx 	identTypeEnd 				; complete match.
.d532	b532	d0 f2		bne $b526			bne 	_TSTCompareName
.d534	b534	7a		ply				ply 								; throw Y
.d535	b535	a5 38		lda $38				lda 	zTemp1 						; get token #
.d537	b537	38		sec				sec 								; return with CS = passed.
.d538	b538	60		rts				rts
.d539	b539					_TSTNextPullY:
.d539	b539	7a		ply				ply 								; restore current, fall through.
.d53a	b53a					_TSTNext:
.d53a	b53a	e6 38		inc $38				inc 	zTemp1 						; token counter
.d53c	b53c	98		tya				tya
.d53d	b53d	18		clc				clc
.d53e	b53e	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.d540	b540	1a		inc a				inc 	a 							; +1
.d541	b541	1a		inc a				inc 	a 							; +2
.d542	b542	a8		tay				tay
.d543	b543	10 c1		bpl $b506			bpl 	_TSTLoop 					; if Y < $80 loop back
.d545	b545	98		tya				tya 								; add Y to zTemp0 and reset Y
.d546	b546	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.d548	b548	18		clc				clc  								; but have tables > 255 bytes
.d549	b549	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.d54b	b54b	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.d54d	b54d	90 b7		bcc $b506			bcc 	_TSTLoop
.d54f	b54f	e6 37		inc $37				inc 	zTemp0+1
.d551	b551	80 b3		bra $b506			bra 	_TSTLoop
.d553	b553					_TSTFail:
.d553	b553	18		clc				clc
.d554	b554	60		rts				rts
.d555	b555					Export_TKTokeniseLine:
.d555	b555	20 22 b7	jsr $b722			jsr 	LCLFixLineBufferCase 		; fix line case
.d558	b558	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.d55a	b55a	8d 26 04	sta $0426			sta 	tokenOffset 				; (3 bytes for line number & offset)
.d55d	b55d	9c 27 04	stz $0427			stz 	tokenLineNumber
.d560	b560	9c 28 04	stz $0428			stz 	tokenLineNumber+1
.d563	b563	a2 ff		ldx #$ff			ldx 	#$FF
.d565	b565					_TKFindFirst:
.d565	b565	e8		inx				inx
.d566	b566	bd 26 05	lda $0526,x			lda 	lineBuffer,x
.d569	b569	f0 62		beq $b5cd			beq 	_TKExit
.d56b	b56b	c9 20		cmp #$20			cmp 	#' '
.d56d	b56d	90 f6		bcc $b565			bcc 	_TKFindFirst
.d56f	b56f	c9 30		cmp #$30			cmp 	#'0'
.d571	b571	90 07		bcc $b57a			bcc 	_TKNoLineNumber
.d573	b573	c9 3a		cmp #$3a			cmp 	#'9'+1
.d575	b575	b0 03		bcs $b57a			bcs 	_TKNoLineNumber
.d577	b577	20 4c b7	jsr $b74c			jsr 	TOKExtractLineNumber
.d57a	b57a					_TKNoLineNumber:
.d57a	b57a					_TKTokeniseLoop:
.d57a	b57a	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.d57d	b57d	f0 4e		beq $b5cd			beq 	_TKExit
.d57f	b57f	e8		inx				inx
.d580	b580	c9 20		cmp #$20			cmp 	#' '
.d582	b582	f0 f6		beq $b57a			beq 	_TKTokeniseLoop 			; keep looping if space found.
.d584	b584	ca		dex				dex 								; undo last get, A contains character, X is position.
.d585	b585	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.d587	b587	f0 68		beq $b5f1			beq 	_TKTokeniseIdentifier 		; (already case converted outside string constants)
.d589	b589	c9 41		cmp #$41			cmp 	#'A'
.d58b	b58b	90 04		bcc $b591			bcc 	_TKTokenisePunctuation
.d58d	b58d	c9 5b		cmp #$5b			cmp 	#'Z'+1
.d58f	b58f	90 60		bcc $b5f1			bcc 	_TKTokeniseIdentifier
.d591	b591					_TKTokenisePunctuation:
.d591	b591	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.d593	b593	f0 2e		beq $b5c3			beq 	_TKString
.d595	b595	c9 24		cmp #$24			cmp 	#'$'						; hexadecimal constant ($ only appears at end of identifiers)
.d597	b597	f0 2f		beq $b5c8			beq 	_TKHexConstant
.d599	b599	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers - these are for <> <= >= >> <<
.d59b	b59b	f0 36		beq $b5d3			beq 	_TKCheckDouble
.d59d	b59d	c9 3e		cmp #$3e			cmp 	#'>'
.d59f	b59f	f0 32		beq $b5d3			beq 	_TKCheckDouble
.d5a1	b5a1					_TKStandardPunctuation:
.d5a1	b5a1	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; get the punctuation token back.
.d5a4	b5a4	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.d5a6	b5a6	90 0e		bcc $b5b6			bcc 	_TKNoShift
.d5a8	b5a8	48		pha				pha 								; save. we are about to convert this punctuation token from
.d5a9	b5a9	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.d5ab	b5ab	85 36		sta $36				sta 	zTemp0
.d5ad	b5ad	68		pla				pla
.d5ae	b5ae	29 20		and #$20			and 	#32 						; bit 5
.d5b0	b5b0	4a		lsr a				lsr 	a 							; shift into bit 3
.d5b1	b5b1	4a		lsr a				lsr 	a
.d5b2	b5b2	05 36		ora $36				ora 	zTemp0
.d5b4	b5b4	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.d5b6	b5b6					_TKNoShift:
.d5b6	b5b6	20 91 b7	jsr $b791			jsr 	TOKWriteByte 				; write the punctuation character
.d5b9	b5b9	e8		inx				inx 								; consume the character
.d5ba	b5ba	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; quote found ?
.d5bc	b5bc	d0 bc		bne $b57a			bne 	_TKTokeniseLoop 			; and loop round again.
.d5be	b5be	20 84 b6	jsr $b684			jsr 	TOKCheckComment 			; comment checl
.d5c1	b5c1	80 b7		bra $b57a			bra 	_TKTokeniseLoop
.d5c3	b5c3					_TKString:
.d5c3	b5c3	20 b1 b6	jsr $b6b1			jsr 	TOKTokenString
.d5c6	b5c6	80 b2		bra $b57a			bra 	_TKTokeniseLoop
.d5c8	b5c8					_TKHexConstant:
.d5c8	b5c8	20 ec b6	jsr $b6ec			jsr 	TOKHexConstant
.d5cb	b5cb	80 ad		bra $b57a			bra 	_TKTokeniseLoop
.d5cd	b5cd	a9 80		lda #$80	_TKExit:lda 	#KWC_EOL 					; write end of line byte
.d5cf	b5cf	20 91 b7	jsr $b791			jsr 	TOKWriteByte
.d5d2	b5d2	60		rts				rts
.d5d3	b5d3					_TKCheckDouble:
.d5d3	b5d3	bd 27 05	lda $0527,x			lda 	lineBuffer+1,x 				; get next character
.d5d6	b5d6	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.d5d8	b5d8	90 c7		bcc $b5a1			bcc 	_TKStandardPunctuation 		; and do the normal punctuation handler.
.d5da	b5da	c9 3f		cmp #$3f			cmp 	#'>'+1
.d5dc	b5dc	b0 c3		bcs $b5a1			bcs 	_TKStandardPunctuation
.d5de	b5de	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.d5e1	b5e1	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.d5e3	b5e3	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.d5e4	b5e4	7d 27 05	adc $0527,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.d5e7	b5e7	38		sec				sec
.d5e8	b5e8	e9 3c		sbc #$3c			sbc 	#'<'
.d5ea	b5ea	20 91 b7	jsr $b791			jsr 	TOKWriteByte 				; this is in the range 0-7
.d5ed	b5ed	e8		inx				inx 								; consume both
.d5ee	b5ee	e8		inx				inx
.d5ef	b5ef	80 89		bra $b57a			bra 	_TKTokeniseLoop
.d5f1	b5f1					_TKTokeniseIdentifier:
.d5f1	b5f1	8e 00 04	stx $0400			stx 	identStart 					; save start
.d5f4	b5f4	9c 04 04	stz $0404			stz 	identTypeByte 				; zero the type byte
.d5f7	b5f7					_TKCheckLoop:
.d5f7	b5f7	e8		inx				inx 								; look at next, we know first is identifier already.
.d5f8	b5f8	bd 26 05	lda $0526,x			lda  	lineBuffer,x
.d5fb	b5fb	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.d5fd	b5fd	f0 f8		beq $b5f7			beq 	_TKCheckLoop
.d5ff	b5ff	c9 30		cmp #$30			cmp	 	#"0"
.d601	b601	90 0c		bcc $b60f			bcc 	_TKEndIdentifier
.d603	b603	c9 3a		cmp #$3a			cmp 	#"9"+1
.d605	b605	90 f0		bcc $b5f7			bcc 	_TKCheckLoop
.d607	b607	c9 41		cmp #$41			cmp	 	#"A"
.d609	b609	90 04		bcc $b60f			bcc 	_TKEndIdentifier
.d60b	b60b	c9 5b		cmp #$5b			cmp 	#"Z"+1
.d60d	b60d	90 e8		bcc $b5f7			bcc 	_TKCheckLoop
.d60f	b60f					_TKEndIdentifier:
.d60f	b60f	8e 01 04	stx $0401			stx 	identTypeStart 				; save start of type text (if any !)
.d612	b612	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.d614	b614	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.d616	b616	f0 06		beq $b61e			beq 	_TKHasTypeCharacter
.d618	b618	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.d61a	b61a	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.d61c	b61c	d0 07		bne $b625			bne 	_TKNoTypeCharacter
.d61e	b61e					_TKHasTypeCharacter:
.d61e	b61e	8c 04 04	sty $0404			sty 	identTypeByte 				; has # or $, save the type
.d621	b621	e8		inx				inx 								; consume the type character
.d622	b622	bd 26 05	lda $0526,x			lda 	lineBuffer,x
.d625	b625					_TKNoTypeCharacter:
.d625	b625	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.d627	b627	d0 09		bne $b632			bne 	_TKNoArray
.d629	b629	e8		inx				inx 								; skip the (
.d62a	b62a	ad 04 04	lda $0404			lda 	identTypeByte 				; set bit 2 (e.g. array) in type byte
.d62d	b62d	09 04		ora #$04			ora 	#$04
.d62f	b62f	8d 04 04	sta $0404			sta 	identTypeByte
.d632	b632					_TKNoArray:
.d632	b632	8e 02 04	stx $0402			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.d635	b635	20 0d b7	jsr $b70d			jsr 	TOKCalculateHash 			; calculate the has for those tokens
.d638	b638	a0 ad		ldy #$ad			ldy 	#(KeywordSet0) >> 8
.d63a	b63a	a9 e7		lda #$e7			lda 	#(KeywordSet0) & $FF
.d63c	b63c	20 fc b4	jsr $b4fc			jsr 	TOKSearchTable
.d63f	b63f	a2 00		ldx #$00			ldx 	#0
.d641	b641	b0 1f		bcs $b662			bcs 	_TKFoundToken
.d643	b643	a0 b0		ldy #$b0			ldy 	#(KeywordSet1) >> 8
.d645	b645	a9 5f		lda #$5f			lda 	#(KeywordSet1) & $FF
.d647	b647	20 fc b4	jsr $b4fc			jsr 	TOKSearchTable
.d64a	b64a	a2 81		ldx #$81			ldx 	#$81
.d64c	b64c	b0 14		bcs $b662			bcs 	_TKFoundToken
.d64e	b64e	a0 b1		ldy #$b1			ldy 	#(KeywordSet2) >> 8
.d650	b650	a9 75		lda #$75			lda 	#(KeywordSet2) & $FF
.d652	b652	20 fc b4	jsr $b4fc			jsr 	TOKSearchTable
.d655	b655	a2 82		ldx #$82			ldx 	#$82
.d657	b657	b0 09		bcs $b662			bcs 	_TKFoundToken
.d659	b659	20 9d b7	jsr $b79d			jsr 	TOKCheckCreateVariableRecord ; failed all, it's a variable, create record if does not exist.
.d65c	b65c	ae 02 04	ldx $0402			ldx 	identTypeEnd 				; X points to following byte
.d65f	b65f	4c 7a b5	jmp $b57a			jmp 	_TKTokeniseLoop 			; and go round again.
.d662	b662					_TKFoundToken:
.d662	b662	48		pha				pha 								; save token
.d663	b663	8a		txa				txa 								; shift in X, is there one ?
.d664	b664	f0 03		beq $b669			beq 	_TKNoTShift
.d666	b666	20 91 b7	jsr $b791			jsr 	TOKWriteByte 				; if so, write it out
.d669	b669					_TKNoTShift:
.d669	b669	68		pla				pla 								; restore and write token
.d66a	b66a	20 91 b7	jsr $b791			jsr 	TOKWriteByte
.d66d	b66d	e0 00		cpx #$00			cpx 	#0 							; check for REM and '
.d66f	b66f	d0 0d		bne $b67e			bne 	_TKNotRem 			 		; not shifted ?
.d671	b671	c9 d7		cmp #$d7			cmp 	#KWD_REM
.d673	b673	d0 09		bne $b67e			bne 	_TKNotRem
.d675	b675	ae 02 04	ldx $0402			ldx 	identTypeEnd 				; check if comment follows.
.d678	b678	20 84 b6	jsr $b684			jsr 	TOKCheckComment
.d67b	b67b	4c 7a b5	jmp $b57a			jmp 	_TKTokeniseLoop
.d67e	b67e					_TKNotRem:
.d67e	b67e	ae 02 04	ldx $0402			ldx 	identTypeEnd 				; X points to following byte
.d681	b681	4c 7a b5	jmp $b57a			jmp 	_TKTokeniseLoop 			; and go round again.
.d684	b684					TOKCheckComment:
.d684	b684	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; skip over space
.d687	b687	e8		inx				inx
.d688	b688	c9 20		cmp #$20			cmp 	#' '
.d68a	b68a	f0 f8		beq $b684			beq 	TOKCheckComment
.d68c	b68c	ca		dex				dex 								; first non space character
.d68d	b68d	c9 22		cmp #$22			cmp 	#'"'						; quote mark
.d68f	b68f	f0 1f		beq $b6b0			beq 	_TOKCCExit 					; then we are okay
.d691	b691	c9 00		cmp #$00			cmp 	#0 							; EOL
.d693	b693	f0 1b		beq $b6b0			beq 	_TOKCCExit 					; then we are okay
.d695	b695	da		phx				phx
.d696	b696					_TOKCCLowerCase:
.d696	b696	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; about making it lower case it all, but I thought
.d699	b699	c9 41		cmp #$41			cmp 	#"A"		 				; that was a bit risky. So it's converted to L/C here.
.d69b	b69b	90 09		bcc $b6a6			bcc 	_TOKKCNotUC
.d69d	b69d	c9 5b		cmp #$5b			cmp 	#"Z"+1
.d69f	b69f	b0 05		bcs $b6a6			bcs 	_TOKKCNotUC
.d6a1	b6a1	49 20		eor #$20			eor 	#$20
.d6a3	b6a3	9d 26 05	sta $0526,x			sta 	lineBuffer,x
.d6a6	b6a6					_TOKKCNotUC:
.d6a6	b6a6	e8		inx				inx
.d6a7	b6a7	c9 00		cmp #$00			cmp 	#0
.d6a9	b6a9	d0 eb		bne $b696			bne 	_TOKCCLowerCase
.d6ab	b6ab	fa		plx				plx
.d6ac	b6ac	ca		dex				dex 								; tokenise string expects initial skip.
.d6ad	b6ad	20 b1 b6	jsr $b6b1			jsr 	TOKTokenString 				; tokenise rest of line as a string.
.d6b0	b6b0					_TOKCCExit:
.d6b0	b6b0	60		rts				rts
.d6b1	b6b1					TOKTokenString:
.d6b1	b6b1	a9 ff		lda #$ff			lda 	#KWC_STRING 				; string token.
.d6b3	b6b3	20 91 b7	jsr $b791			jsr 	TOKWriteByte
.d6b6	b6b6	e8		inx				inx									; start of quoted string.
.d6b7	b6b7	da		phx				phx 								; push start of string on top
.d6b8	b6b8	ca		dex				dex 								; because we pre-increment
.d6b9	b6b9					_TSFindEnd:
.d6b9	b6b9	e8		inx				inx
.d6ba	b6ba	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; next character
.d6bd	b6bd	f0 04		beq $b6c3			beq 	_TSEndOfString 				; no matching quote, we don't mind.
.d6bf	b6bf	c9 22		cmp #$22			cmp 	#'"' 						; go back if quote not found
.d6c1	b6c1	d0 f6		bne $b6b9			bne 	_TSFindEnd
.d6c3	b6c3					_TSEndOfString:
.d6c3	b6c3	7a		ply				ply  								; so now Y is first character, X is character after end.
.d6c4	b6c4	48		pha				pha 								; save terminating character
.d6c5	b6c5	20 cd b6	jsr $b6cd			jsr 	TOKWriteBlockXY 			; write X to Y as a data block
.d6c8	b6c8	68		pla				pla 								; terminating character
.d6c9	b6c9	f0 01		beq $b6cc			beq 	_TSNotQuote					; if it wasn't EOS skip it
.d6cb	b6cb	e8		inx				inx
.d6cc	b6cc					_TSNotQuote:
.d6cc	b6cc	60		rts				rts
.d6cd	b6cd					TOKWriteBlockXY:
.d6cd	b6cd	86 36		stx $36				stx 	zTemp0 						; save end character
.d6cf	b6cf	98		tya				tya 								; use 2's complement to work out the byte size
.d6d0	b6d0	49 ff		eor #$ff			eor 	#$FF
.d6d2	b6d2	38		sec				sec
.d6d3	b6d3	65 36		adc $36				adc 	zTemp0
.d6d5	b6d5	1a		inc a				inc 	a 							; one extra for NULL
.d6d6	b6d6	20 91 b7	jsr $b791			jsr 	TOKWriteByte
.d6d9	b6d9					_TOBlockLoop:
.d6d9	b6d9	c4 36		cpy $36				cpy 	zTemp0 						; exit if reached the end
.d6db	b6db	f0 09		beq $b6e6			beq 	_TOBlockExit
.d6dd	b6dd	b9 26 05	lda $0526,y			lda 	lineBuffer,y 				; write byte out.
.d6e0	b6e0	20 91 b7	jsr $b791			jsr 	TOKWriteByte
.d6e3	b6e3	c8		iny				iny
.d6e4	b6e4	80 f3		bra $b6d9			bra 	_TOBlockLoop
.d6e6	b6e6					_TOBlockExit:
.d6e6	b6e6	a9 00		lda #$00			lda 	#0 							; add NULL.
.d6e8	b6e8	20 91 b7	jsr $b791			jsr 	TOKWriteByte
.d6eb	b6eb	60		rts				rts
.d6ec	b6ec					TOKHexConstant:
.d6ec	b6ec	a9 fe		lda #$fe			lda 	#KWC_HEXCONST 				; hex constant token.
.d6ee	b6ee	20 91 b7	jsr $b791			jsr 	TOKWriteByte
.d6f1	b6f1	e8		inx				inx									; start of quoted string.
.d6f2	b6f2	da		phx				phx 								; push start of constant on top
.d6f3	b6f3	ca		dex				dex
.d6f4	b6f4					_THFindLoop:
.d6f4	b6f4	e8		inx				inx 	 							; this is stored in a block, so find out how long
.d6f5	b6f5	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; the hex constant is.
.d6f8	b6f8	c9 30		cmp #$30			cmp 	#"0"
.d6fa	b6fa	90 0c		bcc $b708			bcc 	_THFoundEnd
.d6fc	b6fc	c9 3a		cmp #$3a			cmp 	#"9"+1
.d6fe	b6fe	90 f4		bcc $b6f4			bcc 	_THFindLoop
.d700	b700	c9 41		cmp #$41			cmp 	#"A"
.d702	b702	90 04		bcc $b708			bcc 	_THFoundEnd
.d704	b704	c9 47		cmp #$47			cmp 	#"F"+1
.d706	b706	90 ec		bcc $b6f4			bcc 	_THFindLoop
.d708	b708					_THFoundEnd:
.d708	b708	7a		ply				ply 								; restore start
.d709	b709	20 cd b6	jsr $b6cd			jsr 	TOKWriteBlockXY 			; output the block
.d70c	b70c	60		rts				rts
.d70d	b70d					TOKCalculateHash:
.d70d	b70d	da		phx				phx
.d70e	b70e	ae 00 04	ldx $0400			ldx 	identStart 					; needs to be same as in tokens.py - simple sum at present.
.d711	b711	a9 00		lda #$00			lda 	#0
.d713	b713					_TCHLoop:
.d713	b713	18		clc				clc
.d714	b714	7d 26 05	adc $0526,x			adc 	lineBuffer,x
.d717	b717	e8		inx				inx
.d718	b718	ec 02 04	cpx $0402			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.d71b	b71b	d0 f6		bne $b713			bne 	_TCHLoop
.d71d	b71d	8d 03 04	sta $0403			sta 	identHash 					; save the hash
.d720	b720	fa		plx				plx
.d721	b721	60		rts				rts
.d722	b722					LCLFixLineBufferCase:
.d722	b722	a2 00		ldx #$00			ldx 	#0
.d724	b724					_FLBCLoop:
.d724	b724	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; get next character
.d727	b727	f0 22		beq $b74b			beq 	_FLBCExit 					; end of string.
.d729	b729	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.d72b	b72b	f0 11		beq $b73e			beq 	_FLBCInQuotes
.d72d	b72d	e8		inx				inx
.d72e	b72e	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.d730	b730	90 f2		bcc $b724			bcc 	_FLBCLoop
.d732	b732	c9 7b		cmp #$7b			cmp 	#'z'+1
.d734	b734	b0 ee		bcs $b724			bcs 	_FLBCLoop
.d736	b736	38		sec				sec 								; make U/C
.d737	b737	e9 20		sbc #$20			sbc 	#32
.d739	b739	9d 25 05	sta $0525,x			sta	 	lineBuffer-1,x 				; write back
.d73c	b73c	80 e6		bra $b724			bra 	_FLBCLoop
.d73e	b73e					_FLBCInQuotes:
.d73e	b73e	e8		inx				inx 								; advance
.d73f	b73f	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; get next
.d742	b742	f0 07		beq $b74b			beq 	_FLBCExit 					; exit on EOS
.d744	b744	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.d746	b746	d0 f6		bne $b73e			bne 	_FLBCInQuotes
.d748	b748	e8		inx				inx 								; skip over it
.d749	b749	80 d9		bra $b724			bra 	_FLBCLoop
.d74b	b74b					_FLBCExit:
.d74b	b74b	60		rts				rts
.d74c	b74c					TOKExtractLineNumber:
.d74c	b74c	ad 28 04	lda $0428			lda 	tokenLineNumber+1 			; push current value on stack
.d74f	b74f	48		pha				pha
.d750	b750	ad 27 04	lda $0427			lda 	tokenLineNumber
.d753	b753	48		pha				pha
.d754	b754	20 8a b7	jsr $b78a			jsr 	_LCLNTimes2 				; line # x 2
.d757	b757	20 8a b7	jsr $b78a			jsr 	_LCLNTimes2 				; line # x 4
.d75a	b75a	18		clc				clc 								; add stacked value
.d75b	b75b	68		pla				pla
.d75c	b75c	6d 27 04	adc $0427			adc 	tokenLineNumber
.d75f	b75f	8d 27 04	sta $0427			sta 	tokenLineNumber
.d762	b762	68		pla				pla
.d763	b763	6d 28 04	adc $0428			adc 	tokenLineNumber+1
.d766	b766	8d 28 04	sta $0428			sta 	tokenLineNumber+1 			; line # x 5
.d769	b769	20 8a b7	jsr $b78a			jsr 	_LCLNTimes2 				; line # x 10
.d76c	b76c	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; get and consume character
.d76f	b76f	e8		inx				inx
.d770	b770	29 0f		and #$0f			and 	#15 						; add to line #
.d772	b772	18		clc				clc
.d773	b773	6d 27 04	adc $0427			adc 	tokenLineNumber
.d776	b776	8d 27 04	sta $0427			sta 	tokenLineNumber
.d779	b779	90 03		bcc $b77e			bcc 	_TLENNoCarry
.d77b	b77b	ee 28 04	inc $0428			inc 	tokenLineNumber+1
.d77e	b77e					_TLENNoCarry:
.d77e	b77e	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; more digits ?
.d781	b781	c9 30		cmp #$30			cmp 	#'0'
.d783	b783	90 04		bcc $b789			bcc 	_TLENExit
.d785	b785	c9 3a		cmp #$3a			cmp 	#'9'+1
.d787	b787	90 c3		bcc $b74c			bcc 	TOKExtractLineNumber
.d789	b789					_TLENExit:
.d789	b789	60		rts				rts
.d78a	b78a					_LCLNTimes2:
.d78a	b78a	0e 27 04	asl $0427			asl 	tokenLineNumber 			; doubles tokenLineNumber.
.d78d	b78d	2e 28 04	rol $0428			rol 	tokenLineNumber+1
.d790	b790	60		rts				rts
.d791	b791					TOKWriteByte:
.d791	b791	da		phx				phx
.d792	b792	ae 26 04	ldx $0426			ldx 	tokenOffset 				; next slot to write to
.d795	b795	9d 26 04	sta $0426,x			sta 	tokenOffset,x 				; write byte out
.d798	b798	ee 26 04	inc $0426			inc 	tokenOffset 				; advance slot.
.d79b	b79b	fa		plx				plx
.d79c	b79c	60		rts				rts
.d79d	b79d					TOKCheckCreateVariableRecord:
.d79d	b79d	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.d79f	b79f	85 36		sta $36				sta 	0+zTemp0
.d7a1	b7a1	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.d7a3	b7a3	85 37		sta $37				sta 	1+zTemp0
.d7a5	b7a5					_CCVSearch:
.d7a5	b7a5	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.d7a7	b7a7	f0 2c		beq $b7d5			beq 	_CCVFail
.d7a9	b7a9	a0 01		ldy #$01			ldy 	#1 							; read the hash
.d7ab	b7ab	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.d7ad	b7ad	cd 03 04	cmp $0403			cmp 	identHash 	  				; if not, try the next.
.d7b0	b7b0	d0 16		bne $b7c8			bne 	_CCVNext
.d7b2	b7b2	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.d7b4	b7b4	ae 00 04	ldx $0400			ldx 	identStart
.d7b7	b7b7					_CCVCompare:
.d7b7	b7b7	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.d7ba	b7ba	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.d7bc	b7bc	e8		inx				inx 								; advance pointers
.d7bd	b7bd	c8		iny				iny
.d7be	b7be	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.d7bf	b7bf	d0 07		bne $b7c8			bne 	_CCVNext  					; didn't match go to next.
.d7c1	b7c1	90 f4		bcc $b7b7			bcc 	_CCVCompare 				; not finished yet.
.d7c3	b7c3	ec 02 04	cpx $0402			cpx 	identTypeEnd 				; matched whole thing ?
.d7c6	b7c6	f0 41		beq $b809			beq 	_CCVFound 					; yes, we were successful
.d7c8	b7c8					_CCVNext:
.d7c8	b7c8	18		clc				clc 								; go to next record.
.d7c9	b7c9	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.d7cb	b7cb	65 36		adc $36				adc 	zTemp0
.d7cd	b7cd	85 36		sta $36				sta 	zTemp0
.d7cf	b7cf	90 d4		bcc $b7a5			bcc 	_CCVSearch
.d7d1	b7d1	e6 37		inc $37				inc 	zTemp0+1
.d7d3	b7d3	80 d0		bra $b7a5			bra 	_CCVSearch
.d7d5	b7d5					_CCVFail:
.d7d5	b7d5	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.d7d7	b7d7	ad 03 04	lda $0403			lda 	identHash
.d7da	b7da	91 36		sta ($36),y			sta 	(zTemp0),y
.d7dc	b7dc	c8		iny				iny 								; offset 2 is the type byte
.d7dd	b7dd	ad 04 04	lda $0404			lda 	identTypeByte
.d7e0	b7e0	91 36		sta ($36),y			sta 	(zTemp0),y
.d7e2	b7e2	c8		iny				iny
.d7e3	b7e3					_CCVData:
.d7e3	b7e3	a9 00		lda #$00			lda 	#0 							; erase data 3-7 (the 5 value bytes)
.d7e5	b7e5	91 36		sta ($36),y			sta 	(zTemp0),y
.d7e7	b7e7	c8		iny				iny
.d7e8	b7e8	c0 08		cpy #$08			cpy 	#8
.d7ea	b7ea	90 f7		bcc $b7e3			bcc 	_CCVData
.d7ec	b7ec	ae 00 04	ldx $0400			ldx 	identStart 					; copy name into 8 on.
.d7ef	b7ef					_CCVCopyName:
.d7ef	b7ef	bd 26 05	lda $0526,x			lda 	lineBuffer,x
.d7f2	b7f2	91 36		sta ($36),y			sta 	(zTemp0),y
.d7f4	b7f4	e8		inx				inx
.d7f5	b7f5	c8		iny				iny
.d7f6	b7f6	ec 02 04	cpx $0402			cpx 	identTypeEnd
.d7f9	b7f9	d0 f4		bne $b7ef			bne 	_CCVCopyName
.d7fb	b7fb	98		tya				tya 								; patch offset
.d7fc	b7fc	92 36		sta ($36)			sta 	(zTemp0)
.d7fe	b7fe	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.d800	b800	91 36		sta ($36),y			sta 	(zTemp0),y
.d802	b802	88		dey				dey
.d803	b803	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.d805	b805	09 80		ora #$80			ora 	#$80
.d807	b807	91 36		sta ($36),y			sta 	(zTemp0),y
.d809	b809					_CCVFound:
.d809	b809	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.d80b	b80b	38		sec				sec
.d80c	b80c	e9 10		sbc #$10			sbc 	#(VariableSpace >> 8) 		; offset from the start of the variable token
.d80e	b80e	09 40		ora #$40			ora 	#$40 						; make it a writeable token $4000-$7FFF
.d810	b810	20 91 b7	jsr $b791			jsr 	TOKWriteByte
.d813	b813	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.d815	b815	20 91 b7	jsr $b791			jsr 	TOKWriteByte
.d818	b818	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_sound.module

=1						soundIntegrated=1
.d819	b819					SNDCheckChannel:
.d819	b819	aa		tax				tax
.d81a	b81a	bd 96 09	lda $0996,x			lda 	SNDTimeLeft,x 				; currently playing a note
.d81d	b81d	d0 38		bne $b857			bne 	_SNDCCExit
.d81f	b81f	da		phx				phx 								; save current channel
.d820	b820	8a		txa				txa 								; put in A
.d821	b821	20 9d b8	jsr $b89d			jsr 	SNDFindNextNoteForA 		; is there a note for A in the queue ?
.d824	b824	68		pla				pla 								; channel # in A
.d825	b825	90 30		bcc $b857			bcc 	_SNDCCExit  				; nothing in the queue for this channel, exit.
.d827	b827	a8		tay				tay 								; Y is the channel #
.d828	b828	bd 8b 08	lda $088b,x			lda 	SNDQueue+1,x 				; copy data into the slot.
.d82b	b82b	99 8a 09	sta $098a,y			sta 	SNDPitchLow,y
.d82e	b82e	bd 8c 08	lda $088c,x			lda 	SNDQueue+2,x
.d831	b831	99 8e 09	sta $098e,y			sta 	SNDPitchHigh,y
.d834	b834	bd 8d 08	lda $088d,x			lda 	SNDQueue+3,x
.d837	b837	99 92 09	sta $0992,y			sta 	SNDVolume,y
.d83a	b83a	bd 8e 08	lda $088e,x			lda 	SNDQueue+4,x
.d83d	b83d	99 96 09	sta $0996,y			sta 	SNDTimeLeft,y
.d840	b840	bd 8f 08	lda $088f,x			lda 	SNDQueue+5,x
.d843	b843	99 9a 09	sta $099a,y			sta 	SNDAdjustLow,y
.d846	b846	bd 90 08	lda $0890,x			lda 	SNDQueue+6,x
.d849	b849	99 9e 09	sta $099e,y			sta 	SNDAdjustHigh,y
.d84c	b84c	5a		phy				phy 								; save channel #
.d84d	b84d	20 b7 b8	jsr $b8b7			jsr 	SNDDeleteXFromQueue 		; delete record at X from queue
.d850	b850	ce 89 08	dec $0889			dec 	SNDLength 					; reduce the queue length.
.d853	b853	68		pla				pla
.d854	b854	20 58 b8	jsr $b858			jsr 	SNDUpdateNote 				; update channel A
.d857	b857					_SNDCCExit:
.d857	b857	60		rts				rts
.d858	b858					SNDUpdateNote:
.d858	b858	aa		tax				tax 								; so we can access records
.d859	b859	0a		asl a				asl 	a 							; convert it to a channel bit pair in 5,6
.d85a	b85a	0a		asl a				asl 	a
.d85b	b85b	0a		asl a				asl 	a
.d85c	b85c	0a		asl a				asl 	a
.d85d	b85d	0a		asl a				asl 	a
.d85e	b85e	8d 88 08	sta $0888			sta 	SNDChannelBits
.d861	b861	bd 96 09	lda $0996,x			lda 	SNDTimeLeft,x 				; are we silent
.d864	b864	f0 2e		beq $b894			beq 	_SNDUNIsSilent
.d866	b866	ad 88 08	lda $0888			lda 	SNDChannelBits 				; push channel bits on stack
.d869	b869	48		pha				pha
.d86a	b86a	bd 8a 09	lda $098a,x			lda 	SNDPitchLow,x 				; get 4 lowest bits of pitch.
.d86d	b86d	29 0f		and #$0f			and 	#$0F
.d86f	b86f	0d 88 08	ora $0888			ora 	SNDChannelBits 				; set channel bits
.d872	b872	09 80		ora #$80			ora 	#$80 						; write to pitch register
.d874	b874	20 01 b9	jsr $b901			jsr 	SNDWritePorts
.d877	b877	bd 8e 09	lda $098e,x			lda 	SNDPitchHigh,x 				; pitch high => channel temp.
.d87a	b87a	8d 88 08	sta $0888			sta 	SNDChannelBits
.d87d	b87d	bd 8a 09	lda $098a,x			lda 	SNDPitchLow,x
.d880	b880	4e 88 08	lsr $0888			lsr 	SNDChannelBits 				; shift 2 LSBs into MSB of A
.d883	b883	6a		ror a				ror 	a
.d884	b884	4e 88 08	lsr $0888			lsr 	SNDChannelBits
.d887	b887	6a		ror a				ror 	a
.d888	b888	4a		lsr a				lsr 	a 							; put in bits 0-5
.d889	b889	4a		lsr a				lsr 	a
.d88a	b88a	20 01 b9	jsr $b901			jsr 	SNDWritePorts 				; write as rest of pitch register
.d88d	b88d	68		pla				pla
.d88e	b88e	09 90		ora #$90			ora 	#$90 						; set to write minimum attentuation.
.d890	b890	20 01 b9	jsr $b901			jsr 	SNDWritePorts
.d893	b893	60		rts				rts
.d894	b894					_SNDUNIsSilent:
.d894	b894	ad 88 08	lda $0888			lda 	SNDChannelBits 				; channel bits
.d897	b897	09 9f		ora #$9f			ora 	#$9F 						; maximum attenuation
.d899	b899	20 01 b9	jsr $b901			jsr 	SNDWritePorts 				; write to the ports
.d89c	b89c	60		rts				rts
.d89d	b89d					SNDFindNextNoteForA:
.d89d	b89d	ac 89 08	ldy $0889			ldy 	SNDLength 					; queue size into Y
.d8a0	b8a0	f0 13		beq $b8b5			beq 	_SNDFNNFail 				; queue empty.
.d8a2	b8a2	a2 00		ldx #$00			ldx 	#0
.d8a4	b8a4					_SNDFNNSearch:
.d8a4	b8a4	dd 8a 08	cmp $088a,x			cmp 	SNDQueue,x 					; does it match the channel
.d8a7	b8a7	38		sec				sec
.d8a8	b8a8	f0 0c		beq $b8b6			beq 	_SNDFNNExit 				; if so exit with CS.
.d8aa	b8aa	e8		inx				inx 								; next queue slot.
.d8ab	b8ab	e8		inx				inx
.d8ac	b8ac	e8		inx				inx
.d8ad	b8ad	e8		inx				inx
.d8ae	b8ae	e8		inx				inx
.d8af	b8af	e8		inx				inx
.d8b0	b8b0	e8		inx				inx
.d8b1	b8b1	e8		inx				inx
.d8b2	b8b2	88		dey				dey 								; done the whole queue
.d8b3	b8b3	d0 ef		bne $b8a4			bne 	_SNDFNNSearch 				; no, go back.
.d8b5	b8b5					_SNDFNNFail:
.d8b5	b8b5	18		clc				clc
.d8b6	b8b6					_SNDFNNExit:
.d8b6	b8b6	60		rts				rts
.d8b7	b8b7					SNDDeleteXFromQueue:
.d8b7	b8b7	e0 f8		cpx #$f8			cpx 	#SNDQueueSize*8-8 			; reached the end.
.d8b9	b8b9	f0 09		beq $b8c4			beq 	_SNDDXExit
.d8bb	b8bb	bd 92 08	lda $0892,x			lda 	SNDQueue+8,x
.d8be	b8be	9d 8a 08	sta $088a,x			sta 	SNDQueue,x
.d8c1	b8c1	e8		inx				inx
.d8c2	b8c2	80 f3		bra $b8b7			bra 	SNDDeleteXFromQueue
.d8c4	b8c4					_SNDDXExit:
.d8c4	b8c4	60		rts				rts
.0888						SNDChannelBits:
>0888								.fill 	1
.d8c5	b8c5					SNDQueueRequest:
.d8c5	b8c5	86 36		stx $36				stx 	zTemp0						; save queue address
.d8c7	b8c7	84 37		sty $37				sty 	zTemp0+1
.d8c9	b8c9	ae 89 08	ldx $0889			ldx 	SNDLength 					; queue is full, can't take any more.
.d8cc	b8cc	e0 20		cpx #$20			cpx 	#SNDQueueSize
.d8ce	b8ce	f0 21		beq $b8f1			beq 	_SNDQRExit
.d8d0	b8d0	29 03		and #$03			and 	#3	 						; channel # and push on stack
.d8d2	b8d2	48		pha				pha
.d8d3	b8d3	8a		txa				txa  								; get offset in queue buffer/
.d8d4	b8d4	0a		asl a				asl 	a
.d8d5	b8d5	0a		asl a				asl 	a
.d8d6	b8d6	0a		asl a				asl 	a
.d8d7	b8d7	aa		tax				tax
.d8d8	b8d8	68		pla				pla 								; get back and push again
.d8d9	b8d9	48		pha				pha
.d8da	b8da	9d 8a 08	sta $088a,x			sta 	SNDQueue+0,x 				; save the channel #
.d8dd	b8dd	a0 00		ldy #$00			ldy 	#0 							; copy the rest in.
.d8df	b8df					_SNDQCopy:
.d8df	b8df	b1 36		lda ($36),y			lda 	(zTemp0),y
.d8e1	b8e1	e8		inx				inx
.d8e2	b8e2	c8		iny				iny
.d8e3	b8e3	9d 8a 08	sta $088a,x			sta 	SNDQueue,x
.d8e6	b8e6	c0 06		cpy #$06			cpy 	#6
.d8e8	b8e8	d0 f5		bne $b8df			bne 	_SNDQCopy
.d8ea	b8ea	ee 89 08	inc $0889			inc 	SNDLength 					; bump queue length.
.d8ed	b8ed	68		pla				pla 								; get channel # back
.d8ee	b8ee	20 19 b8	jsr $b819			jsr 	SNDCheckChannel 			; check if channel needs refreshing.
.d8f1	b8f1					_SNDQRExit:
.d8f1	b8f1	60		rts				rts
.d8f2	b8f2					SNDSilenceChannel:
.d8f2	b8f2	aa		tax				tax 								; zero time left.
.d8f3	b8f3	9e 96 09	stz $0996,x			stz 	SNDTimeLeft,x
.d8f6	b8f6	0a		asl a				asl 	a 							; shift into position
.d8f7	b8f7	0a		asl a				asl 	a
.d8f8	b8f8	0a		asl a				asl 	a
.d8f9	b8f9	0a		asl a				asl 	a
.d8fa	b8fa	0a		asl a				asl 	a
.d8fb	b8fb	09 9f		ora #$9f			ora 	#$9F 						; write register attenuation $F
.d8fd	b8fd	20 01 b9	jsr $b901			jsr 	SNDWritePorts
.d900	b900	60		rts				rts
.d901	b901					SNDWritePorts:
.d901	b901	da		phx				phx 								; save X
.d902	b902	a6 01		ldx $01				ldx 	1 							; save I/O status
.d904	b904	64 01		stz $01				stz 	1 							; access I/O page 0
.d906	b906	8d 00 d6	sta $d600			sta 	$D600 						; write to both
.d909	b909	8d 10 d6	sta $d610			sta 	$D610
.d90c	b90c	86 01		stx $01				stx 	1 							; restore I/O
.d90e	b90e	fa		plx				plx 								; restore X
.d90f	b90f	60		rts				rts
.d910	b910					Export_SNDCommand:
.d910	b910	da		phx				phx 								; save XY
.d911	b911	5a		phy				phy
.d912	b912	c9 0f		cmp #$0f			cmp 	#$0F 						; $0F is initialise
.d914	b914	f0 1d		beq $b933			beq 	_SNDInitialise
.d916	b916	90 28		bcc $b940			bcc 	_SNDExit
.d918	b918	c9 3f		cmp #$3f			cmp 	#$3F 						; $3F is silence all
.d91a	b91a	f0 17		beq $b933			beq 	_SNDSilence
.d91c	b91c	b0 22		bcs $b940			bcs 	_SNDExit
.d91e	b91e	c9 20		cmp #$20			cmp 	#$20 						; $2x is check playing => A
.d920	b920	b0 09		bcs $b92b			bcs 	_SNDQueryPlay
.d922	b922	c9 14		cmp #$14			cmp 	#$14 						; $10-$13 is queue sound
.d924	b924	b0 1a		bcs $b940			bcs 	_SNDExit
.d926	b926	20 c5 b8	jsr $b8c5			jsr 	SNDQueueRequest
.d929	b929	80 15		bra $b940			bra 	_SNDExit
.d92b	b92b					_SNDQueryPlay:
.d92b	b92b	29 03		and #$03			and 	#3 							; get channel #
.d92d	b92d	aa		tax				tax
.d92e	b92e	bd 96 09	lda $0996,x			lda 	SNDTimeLeft,x 				; read time left, if zero then silent
.d931	b931	80 0d		bra $b940			bra 	_SNDExit
.d933	b933					_SNDInitialise:
.d933	b933					_SNDSilence:
.d933	b933	9c 89 08	stz $0889			stz 	SNDLength 					; empty the queue.
.d936	b936	a9 03		lda #$03			lda 	#$3 						; silence channel 0-3.
.d938	b938					_SNDSilenceLoop:
.d938	b938	48		pha				pha
.d939	b939	20 f2 b8	jsr $b8f2			jsr 	SNDSilenceChannel
.d93c	b93c	68		pla				pla
.d93d	b93d	3a		dec a				dec 	a
.d93e	b93e	10 f8		bpl $b938			bpl 	_SNDSilenceLoop
.d940	b940					_SNDExit:
.d940	b940	7a		ply				ply
.d941	b941	fa		plx				plx
.d942	b942	60		rts				rts
=32						SNDQueueSize = 32 							; number of queue entries
.0889						SNDLength:
>0889								.fill 	1
.088a						SNDQueue:
>088a								.fill 	SNDQueueSize * 8
.098a						SNDPitchLow:
>098a								.fill 	4
.098e						SNDPitchHigh:
>098e								.fill 	4
.0992						SNDVolume:
>0992								.fill 	4
.0996						SNDTimeLeft:
>0996								.fill 	4
.099a						SNDAdjustLow:
>099a								.fill 	4
.099e						SNDAdjustHigh:
>099e								.fill 	4
.d943	b943					Export_SNDUpdate:
.d943	b943					PagedSNDUpdate:
.d943	b943	ad 96 09	lda $0996			lda 	SNDTimeLeft+0 				; look at time remaining
.d946	b946	f0 05		beq $b94d			beq 	_SNDUNot0 					; not playing
.d948	b948	a2 00		ldx #$00			ldx 	#0 							; so we know which channel to update
.d94a	b94a	20 6c b9	jsr $b96c			jsr 	SNDUpdateChannel 			; update it.
.d94d	b94d					_SNDUNot0:
.d94d	b94d	ad 97 09	lda $0997			lda 	SNDTimeLeft+1
.d950	b950	f0 05		beq $b957			beq 	_SNDUNot1
.d952	b952	a2 01		ldx #$01			ldx 	#1
.d954	b954	20 6c b9	jsr $b96c			jsr 	SNDUpdateChannel
.d957	b957					_SNDUNot1:
.d957	b957	ad 98 09	lda $0998			lda 	SNDTimeLeft+2
.d95a	b95a	f0 05		beq $b961			beq 	_SNDUNot2
.d95c	b95c	a2 02		ldx #$02			ldx 	#2
.d95e	b95e	20 6c b9	jsr $b96c			jsr 	SNDUpdateChannel
.d961	b961					_SNDUNot2:
.d961	b961	ad 99 09	lda $0999			lda 	SNDTimeLeft+3
.d964	b964	f0 05		beq $b96b			beq 	_SNDUNot3
.d966	b966	a2 03		ldx #$03			ldx 	#3
.d968	b968	20 6c b9	jsr $b96c			jsr 	SNDUpdateChannel
.d96b	b96b					_SNDUNot3:
.d96b	b96b	60		rts				rts
.d96c	b96c					SNDUpdateChannel:
.d96c	b96c	c9 ff		cmp #$ff			cmp 	#$FF 						; sound $FF play forever until turned off manually
.d96e	b96e	f0 2c		beq $b99c			beq 	_SNDUCExit
.d970	b970	3a		dec a				dec 	a 							; decrement and update timer
.d971	b971	9d 96 09	sta $0996,x			sta 	SNDTimeLeft,x
.d974	b974	f0 1d		beq $b993			beq 	_SNDUCUpdate 				; if zero, silence channel
.d976	b976	bd 9a 09	lda $099a,x			lda 	SNDAdjustLow,x 				; adjust ?
.d979	b979	1d 9e 09	ora $099e,x			ora 	SNDAdjustHigh,x
.d97c	b97c	f0 1e		beq $b99c			beq 	_SNDUCExit 					; if zero carry on at current tone.
.d97e	b97e	18		clc				clc 								; add adjust, forcing into a 10 bit range
.d97f	b97f	bd 8a 09	lda $098a,x			lda 	SNDPitchLow,x
.d982	b982	7d 9a 09	adc $099a,x			adc 	SNDAdjustLow,x
.d985	b985	9d 8a 09	sta $098a,x			sta 	SNDPitchLow,x
.d988	b988	bd 8e 09	lda $098e,x			lda 	SNDPitchHigh,x
.d98b	b98b	7d 9e 09	adc $099e,x			adc 	SNDAdjustHigh,x
.d98e	b98e	29 03		and #$03			and 	#3
.d990	b990	9d 8e 09	sta $098e,x			sta 	SNDPitchHigh,x
.d993	b993					_SNDUCUpdate:
.d993	b993	8a		txa				txa 								; which channel.
.d994	b994	48		pha				pha
.d995	b995	20 58 b8	jsr $b858			jsr 	SNDUpdateNote 				; update the current note
.d998	b998	68		pla				pla
.d999	b999	20 19 b8	jsr $b819			jsr 	SNDCheckChannel 			; more to do ?
.d99c	b99c					_SNDUCExit:
.d99c	b99c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_kernel.module

=1						kernelIntegrated=1

;******  Return to file: _basic.asm


;******  Processing file: ../modules/hardware/header/headerdata.dat

=14						Header_Height = 14
=255						Header_RLE = 255
.e000	a000					Header_jattrs:
>e000	a000	ff f2 58 f2 ff d8 07 d8			.byte	255,242,88,242,255,216,7,216,255,242,2,242,255,216,6,216,255,242,2,242,255,216,8,216,255,242,2,242,255,216,6,216,255,242,9,242,210,210,242,242,255,210,7,210,255,242,17,242,104,104,255,242,7,242,104,104,255,242,4,242,104,104,242,242,104,104,255,242,8,242,104,104,255,242,4,242,104,104,255,242,8,242,210,210,242,242,210,210,255,242,4,242,210,210,255,242,16,242,232,232,255,242,14,242,232,232,242,242,232,232,255,242,8,242,232,232,255,242,15,242,210,210,242,242,210,210,255,242,4,242,210,210,255,242,16,242,255,56,5,56,255,242,4,242,255,56,6,56,255,242,2,242,255,56,7,56,255,242,2,242,255,56,7,56,255,242,9,242,210,210,242,242,255,210,7,210,255,242,17,242,120,120,255,242,7,242,120,120,255,242,15,242,120,120,242,242,120,120,255,242,4,242,120,120,242,242,210,210,255,242,4,242,210,210,242,242,210,210,255,242,2,242,210,210,255,242,18,242,168,168,255,242,7,242,168,168,255,242,8,242,168,168,255,242,4,242,168,168,242,242,168,168,255,242,4,242,168,168,242,242,210,210,255,242,4,242,210,210,242,242,210,210,255,242,3,242,210,210,255,242,17,242,72,72,255,242,7,242,255,72,8,72,255,242,2,242,255,72,6,72,255,242,3,242,255,72,6,72,255,242,3,242,255,210,4,210,209,210,255,242,2,242,210,210,255,242,4,242,210,210,255,242,87,242,255,114,80,114,255,226,27,226,114,255,146,3,146,145,255,114,18,114,255,194,24,194,114,114,255,226,27,226,114,255,146,3,146,145,255,114,18,114,255,194,24,194,114,114,255,226,27,226,114,255,146,3,146,145,255,114,18,114,255,194,24,194,255,114,80,114,255,0
>e008	a008	ff f2 02 f2 ff d8 06 d8 ff f2 02 f2 ff d8 08 d8
>e018	a018	ff f2 02 f2 ff d8 06 d8 ff f2 09 f2 d2 d2 f2 f2
>e028	a028	ff d2 07 d2 ff f2 11 f2 68 68 ff f2 07 f2 68 68
>e038	a038	ff f2 04 f2 68 68 f2 f2 68 68 ff f2 08 f2 68 68
>e048	a048	ff f2 04 f2 68 68 ff f2 08 f2 d2 d2 f2 f2 d2 d2
>e058	a058	ff f2 04 f2 d2 d2 ff f2 10 f2 e8 e8 ff f2 0e f2
>e068	a068	e8 e8 f2 f2 e8 e8 ff f2 08 f2 e8 e8 ff f2 0f f2
>e078	a078	d2 d2 f2 f2 d2 d2 ff f2 04 f2 d2 d2 ff f2 10 f2
>e088	a088	ff 38 05 38 ff f2 04 f2 ff 38 06 38 ff f2 02 f2
>e098	a098	ff 38 07 38 ff f2 02 f2 ff 38 07 38 ff f2 09 f2
>e0a8	a0a8	d2 d2 f2 f2 ff d2 07 d2 ff f2 11 f2 78 78 ff f2
>e0b8	a0b8	07 f2 78 78 ff f2 0f f2 78 78 f2 f2 78 78 ff f2
>e0c8	a0c8	04 f2 78 78 f2 f2 d2 d2 ff f2 04 f2 d2 d2 f2 f2
>e0d8	a0d8	d2 d2 ff f2 02 f2 d2 d2 ff f2 12 f2 a8 a8 ff f2
>e0e8	a0e8	07 f2 a8 a8 ff f2 08 f2 a8 a8 ff f2 04 f2 a8 a8
>e0f8	a0f8	f2 f2 a8 a8 ff f2 04 f2 a8 a8 f2 f2 d2 d2 ff f2
>e108	a108	04 f2 d2 d2 f2 f2 d2 d2 ff f2 03 f2 d2 d2 ff f2
>e118	a118	11 f2 48 48 ff f2 07 f2 ff 48 08 48 ff f2 02 f2
>e128	a128	ff 48 06 48 ff f2 03 f2 ff 48 06 48 ff f2 03 f2
>e138	a138	ff d2 04 d2 d1 d2 ff f2 02 f2 d2 d2 ff f2 04 f2
>e148	a148	d2 d2 ff f2 57 f2 ff 72 50 72 ff e2 1b e2 72 ff
>e158	a158	92 03 92 91 ff 72 12 72 ff c2 18 c2 72 72 ff e2
>e168	a168	1b e2 72 ff 92 03 92 91 ff 72 12 72 ff c2 18 c2
>e178	a178	72 72 ff e2 1b e2 72 ff 92 03 92 91 ff 72 12 72
>e188	a188	ff c2 18 c2 ff 72 50 72 ff 00
.e192	a192					Header_jchars:
>e192	a192	ff 20 58 20 ff 08 07 08			.byte	255,32,88,32,255,8,7,8,255,32,2,32,255,8,6,8,255,32,2,32,255,8,8,8,255,32,2,32,255,8,6,8,255,32,9,32,252,252,32,32,255,252,7,252,255,32,17,32,8,8,255,32,7,32,8,8,255,32,4,32,8,8,32,32,8,8,255,32,8,32,8,8,255,32,4,32,8,8,255,32,8,32,252,252,32,32,252,252,255,32,4,32,252,252,255,32,16,32,8,8,255,32,14,32,8,8,32,32,8,8,255,32,8,32,8,8,255,32,15,32,252,252,32,32,252,252,255,32,4,32,252,252,255,32,16,32,255,8,5,8,255,32,4,32,255,8,6,8,255,32,2,32,255,8,7,8,255,32,2,32,255,8,7,8,255,32,9,32,252,252,32,32,255,252,7,252,255,32,17,32,8,8,255,32,7,32,8,8,255,32,15,32,8,8,32,32,8,8,255,32,4,32,8,8,32,32,252,252,255,32,4,32,252,252,32,32,252,252,255,32,2,32,252,252,255,32,18,32,8,8,255,32,7,32,8,8,255,32,8,32,8,8,255,32,4,32,8,8,32,32,8,8,255,32,4,32,8,8,32,32,252,252,255,32,4,32,252,252,32,32,252,252,255,32,3,32,252,252,255,32,17,32,8,8,255,32,7,32,255,8,8,8,255,32,2,32,255,8,6,8,255,32,3,32,255,8,6,8,255,32,3,32,255,252,6,252,255,32,2,32,252,252,255,32,4,32,252,252,255,32,87,32,160,255,150,27,150,155,255,150,22,150,155,255,150,24,150,161,130,72,97,114,100,119,97,114,101,255,32,19,32,130,215,50,48,50,51,32,83,116,101,102,97,110,121,32,65,108,108,97,105,114,101,32,32,130,99,50,53,54,102,111,101,110,105,120,46,99,111,109,47,102,50,53,54,45,106,114,255,32,2,32,130,130,77,105,99,114,111,75,101,114,110,101,108,255,32,16,32,130,215,50,48,50,51,32,74,101,115,115,105,101,32,79,98,101,114,114,101,117,116,101,114,130,71,97,100,103,101,116,64,72,97,99,107,119,114,101,110,99,104,76,97,98,115,46,99,111,109,130,130,83,117,112,101,114,66,65,83,73,67,255,32,17,32,130,215,50,48,50,51,32,80,97,117,108,32,82,111,98,115,111,110,255,32,5,32,130,80,97,117,108,64,82,111,98,115,111,110,115,46,111,114,103,46,117,107,255,32,5,32,130,162,255,150,27,150,157,255,150,22,150,157,255,150,24,150,163,255,0
>e19a	a19a	ff 20 02 20 ff 08 06 08 ff 20 02 20 ff 08 08 08
>e1aa	a1aa	ff 20 02 20 ff 08 06 08 ff 20 09 20 fc fc 20 20
>e1ba	a1ba	ff fc 07 fc ff 20 11 20 08 08 ff 20 07 20 08 08
>e1ca	a1ca	ff 20 04 20 08 08 20 20 08 08 ff 20 08 20 08 08
>e1da	a1da	ff 20 04 20 08 08 ff 20 08 20 fc fc 20 20 fc fc
>e1ea	a1ea	ff 20 04 20 fc fc ff 20 10 20 08 08 ff 20 0e 20
>e1fa	a1fa	08 08 20 20 08 08 ff 20 08 20 08 08 ff 20 0f 20
>e20a	a20a	fc fc 20 20 fc fc ff 20 04 20 fc fc ff 20 10 20
>e21a	a21a	ff 08 05 08 ff 20 04 20 ff 08 06 08 ff 20 02 20
>e22a	a22a	ff 08 07 08 ff 20 02 20 ff 08 07 08 ff 20 09 20
>e23a	a23a	fc fc 20 20 ff fc 07 fc ff 20 11 20 08 08 ff 20
>e24a	a24a	07 20 08 08 ff 20 0f 20 08 08 20 20 08 08 ff 20
>e25a	a25a	04 20 08 08 20 20 fc fc ff 20 04 20 fc fc 20 20
>e26a	a26a	fc fc ff 20 02 20 fc fc ff 20 12 20 08 08 ff 20
>e27a	a27a	07 20 08 08 ff 20 08 20 08 08 ff 20 04 20 08 08
>e28a	a28a	20 20 08 08 ff 20 04 20 08 08 20 20 fc fc ff 20
>e29a	a29a	04 20 fc fc 20 20 fc fc ff 20 03 20 fc fc ff 20
>e2aa	a2aa	11 20 08 08 ff 20 07 20 ff 08 08 08 ff 20 02 20
>e2ba	a2ba	ff 08 06 08 ff 20 03 20 ff 08 06 08 ff 20 03 20
>e2ca	a2ca	ff fc 06 fc ff 20 02 20 fc fc ff 20 04 20 fc fc
>e2da	a2da	ff 20 57 20 a0 ff 96 1b 96 9b ff 96 16 96 9b ff
>e2ea	a2ea	96 18 96 a1 82 48 61 72 64 77 61 72 65 ff 20 13
>e2fa	a2fa	20 82 d7 32 30 32 33 20 53 74 65 66 61 6e 79 20
>e30a	a30a	41 6c 6c 61 69 72 65 20 20 82 63 32 35 36 66 6f
>e31a	a31a	65 6e 69 78 2e 63 6f 6d 2f 66 32 35 36 2d 6a 72
>e32a	a32a	ff 20 02 20 82 82 4d 69 63 72 6f 4b 65 72 6e 65
>e33a	a33a	6c ff 20 10 20 82 d7 32 30 32 33 20 4a 65 73 73
>e34a	a34a	69 65 20 4f 62 65 72 72 65 75 74 65 72 82 47 61
>e35a	a35a	64 67 65 74 40 48 61 63 6b 77 72 65 6e 63 68 4c
>e36a	a36a	61 62 73 2e 63 6f 6d 82 82 53 75 70 65 72 42 41
>e37a	a37a	53 49 43 ff 20 11 20 82 d7 32 30 32 33 20 50 61
>e38a	a38a	75 6c 20 52 6f 62 73 6f 6e ff 20 05 20 82 50 61
>e39a	a39a	75 6c 40 52 6f 62 73 6f 6e 73 2e 6f 72 67 2e 75
>e3aa	a3aa	6b ff 20 05 20 82 a2 ff 96 1b 96 9d ff 96 16 96
>e3ba	a3ba	9d ff 96 18 96 a3 ff 00
.e3c2	a3c2					Header_kattrs:
>e3c2	a3c2	ff f2 5e f2 ff d8 07 d8			.byte	255,242,94,242,255,216,7,216,255,242,2,242,255,216,6,216,255,242,2,242,255,216,8,216,255,242,2,242,255,216,6,216,255,242,2,242,210,210,255,242,3,242,210,210,255,242,28,242,104,104,255,242,7,242,104,104,255,242,4,242,104,104,242,242,104,104,255,242,8,242,104,104,255,242,4,242,104,104,242,242,210,210,255,242,2,242,210,210,255,242,29,242,232,232,255,242,14,242,232,232,242,242,232,232,255,242,8,242,232,232,255,242,8,242,210,210,242,242,210,210,255,242,30,242,255,56,5,56,255,242,4,242,255,56,6,56,255,242,2,242,255,56,7,56,255,242,2,242,255,56,7,56,255,242,2,242,255,210,4,210,255,242,31,242,120,120,255,242,7,242,120,120,255,242,15,242,113,113,242,242,113,113,255,242,4,242,113,113,242,242,210,210,242,242,210,210,255,242,30,242,168,168,255,242,7,242,168,168,255,242,8,242,168,168,255,242,4,242,168,168,242,242,168,168,255,242,4,242,168,168,242,242,210,210,255,242,2,242,210,210,255,242,29,242,72,72,255,242,7,242,255,72,8,72,255,242,2,242,255,72,6,72,255,242,3,242,255,72,6,72,255,242,2,242,210,210,255,242,3,242,210,210,255,242,93,242,255,114,80,114,255,226,27,226,114,255,146,4,146,255,114,18,114,255,194,24,194,114,114,255,226,27,226,114,255,146,4,146,255,114,18,114,255,194,24,194,114,114,255,226,27,226,114,255,146,4,146,255,114,18,114,255,194,24,194,255,114,80,114,255,0
>e3ca	a3ca	ff f2 02 f2 ff d8 06 d8 ff f2 02 f2 ff d8 08 d8
>e3da	a3da	ff f2 02 f2 ff d8 06 d8 ff f2 02 f2 d2 d2 ff f2
>e3ea	a3ea	03 f2 d2 d2 ff f2 1c f2 68 68 ff f2 07 f2 68 68
>e3fa	a3fa	ff f2 04 f2 68 68 f2 f2 68 68 ff f2 08 f2 68 68
>e40a	a40a	ff f2 04 f2 68 68 f2 f2 d2 d2 ff f2 02 f2 d2 d2
>e41a	a41a	ff f2 1d f2 e8 e8 ff f2 0e f2 e8 e8 f2 f2 e8 e8
>e42a	a42a	ff f2 08 f2 e8 e8 ff f2 08 f2 d2 d2 f2 f2 d2 d2
>e43a	a43a	ff f2 1e f2 ff 38 05 38 ff f2 04 f2 ff 38 06 38
>e44a	a44a	ff f2 02 f2 ff 38 07 38 ff f2 02 f2 ff 38 07 38
>e45a	a45a	ff f2 02 f2 ff d2 04 d2 ff f2 1f f2 78 78 ff f2
>e46a	a46a	07 f2 78 78 ff f2 0f f2 71 71 f2 f2 71 71 ff f2
>e47a	a47a	04 f2 71 71 f2 f2 d2 d2 f2 f2 d2 d2 ff f2 1e f2
>e48a	a48a	a8 a8 ff f2 07 f2 a8 a8 ff f2 08 f2 a8 a8 ff f2
>e49a	a49a	04 f2 a8 a8 f2 f2 a8 a8 ff f2 04 f2 a8 a8 f2 f2
>e4aa	a4aa	d2 d2 ff f2 02 f2 d2 d2 ff f2 1d f2 48 48 ff f2
>e4ba	a4ba	07 f2 ff 48 08 48 ff f2 02 f2 ff 48 06 48 ff f2
>e4ca	a4ca	03 f2 ff 48 06 48 ff f2 02 f2 d2 d2 ff f2 03 f2
>e4da	a4da	d2 d2 ff f2 5d f2 ff 72 50 72 ff e2 1b e2 72 ff
>e4ea	a4ea	92 04 92 ff 72 12 72 ff c2 18 c2 72 72 ff e2 1b
>e4fa	a4fa	e2 72 ff 92 04 92 ff 72 12 72 ff c2 18 c2 72 72
>e50a	a50a	ff e2 1b e2 72 ff 92 04 92 ff 72 12 72 ff c2 18
>e51a	a51a	c2 ff 72 50 72 ff 00
.e521	a521					Header_kchars:
>e521	a521	ff 20 5e 20 ff 08 07 08			.byte	255,32,94,32,255,8,7,8,255,32,2,32,255,8,6,8,255,32,2,32,255,8,8,8,255,32,2,32,255,8,6,8,255,32,2,32,180,180,255,32,3,32,180,180,255,32,28,32,8,8,255,32,7,32,8,8,255,32,4,32,8,8,32,32,8,8,255,32,8,32,8,8,255,32,4,32,8,8,32,32,180,180,255,32,2,32,180,180,255,32,29,32,8,8,255,32,14,32,8,8,32,32,8,8,255,32,8,32,8,8,255,32,8,32,180,180,32,32,180,180,255,32,30,32,255,8,5,8,255,32,4,32,255,8,6,8,255,32,2,32,255,8,7,8,255,32,2,32,255,8,7,8,255,32,2,32,255,180,4,180,255,32,31,32,8,8,255,32,7,32,8,8,255,32,15,32,8,8,32,32,8,8,255,32,4,32,8,8,32,32,180,180,32,32,180,180,255,32,30,32,8,8,255,32,7,32,8,8,255,32,8,32,8,8,255,32,4,32,8,8,32,32,8,8,255,32,4,32,8,8,32,32,180,180,255,32,2,32,180,180,255,32,29,32,8,8,255,32,7,32,255,8,8,8,255,32,2,32,255,8,6,8,255,32,3,32,255,8,6,8,255,32,2,32,180,180,255,32,3,32,180,180,255,32,93,32,188,255,150,27,150,155,255,150,22,150,155,255,150,24,150,189,130,72,97,114,100,119,97,114,101,255,32,19,32,130,215,50,48,50,51,32,83,116,101,102,97,110,121,32,65,108,108,97,105,114,101,32,32,130,99,50,53,54,102,111,101,110,105,120,46,99,111,109,47,102,50,53,54,45,106,114,255,32,2,32,130,130,77,105,99,114,111,75,101,114,110,101,108,255,32,16,32,130,215,50,48,50,51,32,74,101,115,115,105,101,32,79,98,101,114,114,101,117,116,101,114,130,71,97,100,103,101,116,64,72,97,99,107,119,114,101,110,99,104,76,97,98,115,46,99,111,109,130,130,83,117,112,101,114,66,65,83,73,67,255,32,17,32,130,215,50,48,50,51,32,80,97,117,108,32,82,111,98,115,111,110,255,32,5,32,130,80,97,117,108,64,82,111,98,115,111,110,115,46,111,114,103,46,117,107,255,32,5,32,130,190,255,150,27,150,157,255,150,22,150,157,255,150,24,150,191,255,0
>e529	a529	ff 20 02 20 ff 08 06 08 ff 20 02 20 ff 08 08 08
>e539	a539	ff 20 02 20 ff 08 06 08 ff 20 02 20 b4 b4 ff 20
>e549	a549	03 20 b4 b4 ff 20 1c 20 08 08 ff 20 07 20 08 08
>e559	a559	ff 20 04 20 08 08 20 20 08 08 ff 20 08 20 08 08
>e569	a569	ff 20 04 20 08 08 20 20 b4 b4 ff 20 02 20 b4 b4
>e579	a579	ff 20 1d 20 08 08 ff 20 0e 20 08 08 20 20 08 08
>e589	a589	ff 20 08 20 08 08 ff 20 08 20 b4 b4 20 20 b4 b4
>e599	a599	ff 20 1e 20 ff 08 05 08 ff 20 04 20 ff 08 06 08
>e5a9	a5a9	ff 20 02 20 ff 08 07 08 ff 20 02 20 ff 08 07 08
>e5b9	a5b9	ff 20 02 20 ff b4 04 b4 ff 20 1f 20 08 08 ff 20
>e5c9	a5c9	07 20 08 08 ff 20 0f 20 08 08 20 20 08 08 ff 20
>e5d9	a5d9	04 20 08 08 20 20 b4 b4 20 20 b4 b4 ff 20 1e 20
>e5e9	a5e9	08 08 ff 20 07 20 08 08 ff 20 08 20 08 08 ff 20
>e5f9	a5f9	04 20 08 08 20 20 08 08 ff 20 04 20 08 08 20 20
>e609	a609	b4 b4 ff 20 02 20 b4 b4 ff 20 1d 20 08 08 ff 20
>e619	a619	07 20 ff 08 08 08 ff 20 02 20 ff 08 06 08 ff 20
>e629	a629	03 20 ff 08 06 08 ff 20 02 20 b4 b4 ff 20 03 20
>e639	a639	b4 b4 ff 20 5d 20 bc ff 96 1b 96 9b ff 96 16 96
>e649	a649	9b ff 96 18 96 bd 82 48 61 72 64 77 61 72 65 ff
>e659	a659	20 13 20 82 d7 32 30 32 33 20 53 74 65 66 61 6e
>e669	a669	79 20 41 6c 6c 61 69 72 65 20 20 82 63 32 35 36
>e679	a679	66 6f 65 6e 69 78 2e 63 6f 6d 2f 66 32 35 36 2d
>e689	a689	6a 72 ff 20 02 20 82 82 4d 69 63 72 6f 4b 65 72
>e699	a699	6e 65 6c ff 20 10 20 82 d7 32 30 32 33 20 4a 65
>e6a9	a6a9	73 73 69 65 20 4f 62 65 72 72 65 75 74 65 72 82
>e6b9	a6b9	47 61 64 67 65 74 40 48 61 63 6b 77 72 65 6e 63
>e6c9	a6c9	68 4c 61 62 73 2e 63 6f 6d 82 82 53 75 70 65 72
>e6d9	a6d9	42 41 53 49 43 ff 20 11 20 82 d7 32 30 32 33 20
>e6e9	a6e9	50 61 75 6c 20 52 6f 62 73 6f 6e ff 20 05 20 82
>e6f9	a6f9	50 61 75 6c 40 52 6f 62 73 6f 6e 73 2e 6f 72 67
>e709	a709	2e 75 6b ff 20 05 20 82 be ff 96 1b 96 9d ff 96
>e719	a719	16 96 9d ff 96 18 96 bf ff 00
.e723	a723					Header_Palette:
>e723	a723	00 00 00 00				.dword $000000
>e727	a727	66 66 66 00				.dword $666666
>e72b	a72b	aa 00 00 00				.dword $0000aa
>e72f	a72f	00 aa 00 00				.dword $00aa00
>e733	a733	ea 41 c0 00				.dword $c041ea
>e737	a737	00 48 87 00				.dword $874800
>e73b	a73b	00 9c ff 00				.dword $ff9c00
>e73f	a73f	ff db 57 00				.dword $57dbff
>e743	a743	28 3f 3f 00				.dword $3f3f28
>e747	a747	8a aa aa 00				.dword $aaaa8a
>e74b	a74b	ff 55 55 00				.dword $5555ff
>e74f	a74f	55 ff 55 00				.dword $55ff55
>e753	a753	ed 8d ff 00				.dword $ff8ded
>e757	a757	00 00 ff 00				.dword $ff0000
>e75b	a75b	55 ff ff 00				.dword $ffff55
>e75f	a75f	ff ff ff 00				.dword $ffffff
>e763	a763	ff ff ff 00				.dword $ffffff
>e767	a767	ff ff ff 00				.dword $ffffff

;******  Return to file: _basic.asm


;******  End of listing
