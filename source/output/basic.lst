
; 64tass Turbo Assembler Macro V1.56.2625 listing file
; 64tass -q -b -Wall -Wno-portable -c -L output/basic.lst -l output/basic.lbl -Wall -o basic.rom _basic.asm
; Fri Sep 30 18:57:08 2022

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: _basic.asm


;******  Processing file: ./common/aa_system/01common.inc

=$30					ZeroPageMandatory = $30
=$600					ZeroPagePreference = $600
=$700					MemoryStorage = $700
=$2000					BasicStart = $2000
=$8000					CodeStart = $8000
=$1000					VariableSpace = $1000
=$2000					EndVariableSpace = $2000
=8					MathStackSize = 8
=512					BasicStackSize = 512
=80					MaxLineSize = 80

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa_system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa_system/04data.inc

.0030					codePtr:
>0030							.fill 	4
.0034					basicStack:
>0034							.fill 	2
.0036					zTemp0:
>0036							.fill 	2
.0038					zTemp1:
>0038							.fill 	2
.003a					zTemp2:
>003a							.fill 	2
.003c					zsTemp:
>003c							.fill 	2
=$80					NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20					NSBIsReference = $20 						; bit 5 : is a reference
=$10					NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18					NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03					NSBRefMask = $03 							; bits 0,1 : Bytes of reference, -1 (e.g. 00 = 1 byte, 11 = 4 bytes)
=$04					NSBIsArray = $04
=$00					NSTInteger = $00 							; base types for bits 3..4
=$08					NSTFloat = $08
=$10					NSTString = $10
=$18					NSTProcedure = $18
.0600					NSStatus:
>0600							.fill 	MathStackSize
.0608					NSMantissa0:
>0608							.fill 	MathStackSize 				; (this is my integer mantissa system)
.0610					NSMantissa1:
>0610							.fill 	MathStackSize
.0618					NSMantissa2:
>0618							.fill 	MathStackSize
.0620					NSMantissa3:
>0620							.fill 	MathStackSize
.0628					NSExponent:
>0628							.fill 	MathStackSize
.0700					identStart:
>0700							.fill 	1
.0701					identTypeStart:
>0701							.fill 	1
.0702					identTypeEnd:
>0702							.fill 	1
.0703					identHash:
>0703							.fill 	1
.0704					identTypeByte:
>0704							.fill 	1	 						; (see tokenising.pdf)
.0705					encodeState:
>0705							.fill 	1
.0706					digitTemp:
>0706							.fill 	1
.0707					decimalCount:
>0707							.fill 	1
.0708					randomSeed:
>0708							.fill 	4
.070c					lowMemPtr:
>070c							.fill 	2
.070e					stringMemory:
>070e							.fill 	2
.0710					stringInitialised:
>0710							.fill 	1
.0711					stringTempPointer:
>0711							.fill 	2
.0713					decimalPlaces:
>0713							.fill 	1
.0714					dbOffset:
>0714							.fill 	1
.0715					tokenOffset:
>0715							.fill 	1
.0716					tokenLineNumber:
>0716							.fill 	2
.0718					tokenBuffer:
>0718							.fill 	253
.0815					lineBuffer:
>0815							.fill 	MaxLineSize+1
.0866					numberBuffer:
>0866							.fill 	34
.0888					decimalBuffer:
>0888							.fill 	16

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/handlers.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.inc

=1					ERRID_BREAK = 1
=2					ERRID_SYNTAX = 2
=3					ERRID_DIVZERO = 3
=4					ERRID_RANGE = 4
=5					ERRID_TYPE = 5
=6					ERRID_MEMORY = 6
=7					ERRID_ARGUMENT = 7
=8					ERRID_STOP = 8
=9					ERRID_STRING = 9
=10					ERRID_ASSERT = 10
=11					ERRID_DATA = 11
=12					ERRID_NOTDONE = 12

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst.inc

=$00					KWD_LESSLESS                         = $00; $00 <<
=$01					KWD_LESSEQUAL                        = $01; $01 <=
=$02					KWD_LESSGREATER                      = $02; $02 <>
=$03					KWD_PLINGPLING3                      = $03; $03 !!3
=$04					KWD_GREATERLESS                      = $04; $04 ><
=$05					KWD_GREATEREQUAL                     = $05; $05 >=
=$06					KWD_GREATERGREATER                   = $06; $06 >>
=$07					KWD_PLINGPLING7                      = $07; $07 !!7
=$08					KWD_PLINGPLING8                      = $08; $08 !!8
=$09					KWD_PLINGPLING9                      = $09; $09 !!9
=$0a					KWD_PLINGPLING10                     = $0a; $0a !!10
=$0b					KWD_PLINGPLING11                     = $0b; $0b !!11
=$0c					KWD_PLINGPLING12                     = $0c; $0c !!12
=$0d					KWD_PLINGPLING13                     = $0d; $0d !!13
=$0e					KWD_PLINGPLING14                     = $0e; $0e !!14
=$0f					KWD_PLINGPLING15                     = $0f; $0f !!15
=$10					KWD_AT                               = $10; $10 @
=$11					KWD_PLINGPLING17                     = $11; $11 !!17
=$12					KWD_PLINGPLING18                     = $12; $12 !!18
=$13					KWD_LSQPAREN                         = $13; $13 [
=$14					KWD_BACKSLASH                        = $14; $14 \
=$15					KWD_RSQPAREN                         = $15; $15 ]
=$16					KWD_HAT                              = $16; $16 ^
=$17					KWD_UNDERSCORE                       = $17; $17 _
=$18					KWD_BQUOTE                           = $18; $18 `
=$19					KWD_PLINGPLING25                     = $19; $19 !!25
=$1a					KWD_PLINGPLING26                     = $1a; $1a !!26
=$1b					KWD_LCURLY                           = $1b; $1b {
=$1c					KWD_BAR                              = $1c; $1c |
=$1d					KWD_RCURLY                           = $1d; $1d }
=$1e					KWD_TILDE                            = $1e; $1e ~
=$21					KWD_PLING                            = $21; $21 !
=$22					KWD_DQUOTE                           = $22; $22 "
=$23					KWD_HASH                             = $23; $23 #
=$24					KWD_DOLLAR                           = $24; $24 $
=$25					KWD_PERCENT                          = $25; $25 %
=$26					KWD_AMPERSAND                        = $26; $26 &
=$27					KWD_QUOTE                            = $27; $27 '
=$28					KWD_LPAREN                           = $28; $28 (
=$29					KWD_RPAREN                           = $29; $29 )
=$2a					KWD_STAR                             = $2a; $2a *
=$2b					KWD_PLUS                             = $2b; $2b +
=$2c					KWD_COMMA                            = $2c; $2c ,
=$2d					KWD_MINUS                            = $2d; $2d -
=$2e					KWD_PERIOD                           = $2e; $2e .
=$2f					KWD_SLASH                            = $2f; $2f /
=$30					KWD_0                                = $30; $30 0
=$31					KWD_1                                = $31; $31 1
=$32					KWD_2                                = $32; $32 2
=$33					KWD_3                                = $33; $33 3
=$34					KWD_4                                = $34; $34 4
=$35					KWD_5                                = $35; $35 5
=$36					KWD_6                                = $36; $36 6
=$37					KWD_7                                = $37; $37 7
=$38					KWD_8                                = $38; $38 8
=$39					KWD_9                                = $39; $39 9
=$3a					KWD_COLON                            = $3a; $3a :
=$3b					KWD_SEMICOLON                        = $3b; $3b ;
=$3c					KWD_LESS                             = $3c; $3c <
=$3d					KWD_EQUAL                            = $3d; $3d =
=$3e					KWD_GREATER                          = $3e; $3e >
=$3f					KWD_QMARK                            = $3f; $3f ?
=$83					KWD_ABSLPAREN                        = $83; $83 ABS(
=$84					KWD_ALLOCLPAREN                      = $84; $84 ALLOC(
=$85					KWD_ASCLPAREN                        = $85; $85 ASC(
=$86					KWD_CHRDOLLARLPAREN                  = $86; $86 CHR$(
=$87					KWD_FALSE                            = $87; $87 FALSE
=$88					KWD_FRACLPAREN                       = $88; $88 FRAC(
=$89					KWD_INTLPAREN                        = $89; $89 INT(
=$8a					KWD_ISVALLPAREN                      = $8a; $8a ISVAL(
=$8b					KWD_LEFTDOLLARLPAREN                 = $8b; $8b LEFT$(
=$8c					KWD_LENLPAREN                        = $8c; $8c LEN(
=$8d					KWD_MIDDOLLARLPAREN                  = $8d; $8d MID$(
=$8e					KWD_NOTLPAREN                        = $8e; $8e NOT(
=$8f					KWD_RIGHTDOLLARLPAREN                = $8f; $8f RIGHT$(
=$90					KWD_RNDLPAREN                        = $90; $90 RND(
=$91					KWD_SGNLPAREN                        = $91; $91 SGN(
=$92					KWD_SPCLPAREN                        = $92; $92 SPC(
=$93					KWD_STRDOLLARLPAREN                  = $93; $93 STR$(
=$94					KWD_TRUE                             = $94; $94 TRUE
=$95					KWD_VALLPAREN                        = $95; $95 VAL(
=$96					KWD_FOR                              = $96; $96 FOR
=$97					KWD_IF                               = $97; $97 IF
=$98					KWD_PROC                             = $98; $98 PROC
=$99					KWD_REPEAT                           = $99; $99 REPEAT
=$9a					KWD_WHILE                            = $9a; $9a WHILE
=$9b					KWD_ENDIF                            = $9b; $9b ENDIF
=$9c					KWD_ENDPROC                          = $9c; $9c ENDPROC
=$9d					KWD_NEXT                             = $9d; $9d NEXT
=$9e					KWD_UNTIL                            = $9e; $9e UNTIL
=$9f					KWD_WEND                             = $9f; $9f WEND
=$a0					KWD_CALL                             = $a0; $a0 CALL
=$a1					KWD_CLS                              = $a1; $a1 CLS
=$a2					KWD_DATA                             = $a2; $a2 DATA
=$a3					KWD_DIM                              = $a3; $a3 DIM
=$a4					KWD_GOSUB                            = $a4; $a4 GOSUB
=$a5					KWD_GOTO                             = $a5; $a5 GOTO
=$a6					KWD_LET                              = $a6; $a6 LET
=$a7					KWD_PRINT                            = $a7; $a7 PRINT
=$a8					KWD_READ                             = $a8; $a8 READ
=$a9					KWD_REM                              = $a9; $a9 REM
=$aa					KWD_RETURN                           = $aa; $aa RETURN
=$ab					KWD_THEN                             = $ab; $ab THEN
=$ac					KWD_TO                               = $ac; $ac TO

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst0.inc

=$80					KWC_EOL = $80
=$ff					KWC_STRING = $FF
=$fe					KWC_HEXCONST = $FE
=$96					KWC_FIRST_STRUCTURE = $96
=$9b					KWC_FIRST_STRUCTURE_DEC = $9b
=$9f					KWC_LAST_STRUCTURE = $9f
=$83					KWC_FIRST_UNARY = $83
=$95					KWC_LAST_UNARY = $95

;******  Return to file: _basic.asm


;******  Processing file: ./variants/memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa_system/00start.asm

.8000	a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.8002	9a		txs				txs
.8003	20 91 81	jsr $8191			jsr 	NewCommand 					; erase current program
.8006	20 e1 8c	jsr $8ce1			jsr 	BackloadProgram
.8009	4c ff 81	jmp $81ff			jmp 	CommandRun
.800c					WarmStart:
.800c	a9 57		lda #$57			lda 	#"W"
.800e	20 82 97	jsr $9782			jsr 	EXTPrintCharacter
.8011	80 fe		bra $8011	halt:	bra 	halt
>8013							.align 2

;******  Processing file: ./common/aa_system/../generated/vectors.dat

.8014					VectorSetPunc:
>8014	02 84					.word	ShiftLeft                        ; $00 <<
>8016	fc 82					.word	BinaryCompareLessEqual           ; $01 <=
>8018	f2 82					.word	BinaryCompareNotEqual            ; $02 <>
>801a	5a 96					.word	SyntaxError                      ; $03 !!3
>801c	5a 96					.word	SyntaxError                      ; $04 ><
>801e	06 83					.word	BinaryCompareGreaterEqual        ; $05 >=
>8020	05 84					.word	ShiftRight                       ; $06 >>
>8022	5a 96					.word	SyntaxError                      ; $07 !!7
>8024	5a 96					.word	SyntaxError                      ; $08 !!8
>8026	5a 96					.word	SyntaxError                      ; $09 !!9
>8028	5a 96					.word	SyntaxError                      ; $0a !!10
>802a	5a 96					.word	SyntaxError                      ; $0b !!11
>802c	5a 96					.word	SyntaxError                      ; $0c !!12
>802e	5a 96					.word	SyntaxError                      ; $0d !!13
>8030	5a 96					.word	SyntaxError                      ; $0e !!14
>8032	5a 96					.word	SyntaxError                      ; $0f !!15
>8034	5a 96					.word	SyntaxError                      ; $10 @
>8036	5a 96					.word	SyntaxError                      ; $11 !!17
>8038	5a 96					.word	SyntaxError                      ; $12 !!18
>803a	5a 96					.word	SyntaxError                      ; $13 [
>803c	ba 91					.word	IntegerDivide                    ; $14 \
>803e	5a 96					.word	SyntaxError                      ; $15 ]
>8040	8b 85					.word	EorInteger                       ; $16 ^
>8042	5a 96					.word	SyntaxError                      ; $17 _
>8044	5a 96					.word	SyntaxError                      ; $18 `
>8046	5a 96					.word	SyntaxError                      ; $19 !!25
>8048	5a 96					.word	SyntaxError                      ; $1a !!26
>804a	5a 96					.word	SyntaxError                      ; $1b {
>804c	45 85					.word	OraInteger                       ; $1c |
>804e	5a 96					.word	SyntaxError                      ; $1d }
>8050	5a 96					.word	SyntaxError                      ; $1e ~
>8052	5a 96					.word	SyntaxError                      ; $1f [7m<7F>[m
>8054	5a 96					.word	SyntaxError                      ; $20
>8056	d1 85					.word	WordIndirect                     ; $21 !
>8058	5a 96					.word	SyntaxError                      ; $22 "
>805a	5a 96					.word	SyntaxError                      ; $23 #
>805c	5a 96					.word	SyntaxError                      ; $24 $
>805e	07 92					.word	IntegerModulus                   ; $25 %
>8060	ff 84					.word	AndInteger                       ; $26 &
>8062	5a 96					.word	SyntaxError                      ; $27 '
>8064	5a 96					.word	SyntaxError                      ; $28 (
>8066	5a 96					.word	SyntaxError                      ; $29 )
>8068	7c 92					.word	MulInteger                       ; $2a *
>806a	99 84					.word	AddInteger                       ; $2b +
>806c	5a 96					.word	SyntaxError                      ; $2c ,
>806e	d4 84					.word	SubInteger                       ; $2d -
>8070	5a 96					.word	SyntaxError                      ; $2e .
>8072	13 94					.word	FDivideCommand                   ; $2f /
>8074	5a 96					.word	SyntaxError                      ; $30 0
>8076	5a 96					.word	SyntaxError                      ; $31 1
>8078	5a 96					.word	SyntaxError                      ; $32 2
>807a	5a 96					.word	SyntaxError                      ; $33 3
>807c	5a 96					.word	SyntaxError                      ; $34 4
>807e	5a 96					.word	SyntaxError                      ; $35 5
>8080	5a 96					.word	SyntaxError                      ; $36 6
>8082	5a 96					.word	SyntaxError                      ; $37 7
>8084	5a 96					.word	SyntaxError                      ; $38 8
>8086	5a 96					.word	SyntaxError                      ; $39 9
>8088	5a 96					.word	SyntaxError                      ; $3a :
>808a	5a 96					.word	SyntaxError                      ; $3b ;
>808c	de 82					.word	BinaryCompareLess                ; $3c <
>808e	d4 82					.word	BinaryCompareEqual               ; $3d =
>8090	e8 82					.word	BinaryCompareGreater             ; $3e >
>8092	f8 85					.word	ByteIndirect                     ; $3f ?
.8094					VectorSet0:
>8094	4a 82					.word	EOLCommand                       ; $80 !0:EOF
>8096	57 82					.word	Shift1Command                    ; $81 !1:SH1
>8098	5a 96					.word	SyntaxError                      ; $82 !2:SH2
>809a	59 95					.word	AbsUnary                         ; $83 ABS(
>809c	d9 89					.word	AllocUnary                       ; $84 ALLOC(
>809e	69 95					.word	AscUnary                         ; $85 ASC(
>80a0	76 8a					.word	ChrUnary                         ; $86 CHR$(
>80a2	d0 82					.word	UnaryFalse                       ; $87 FALSE
>80a4	76 95					.word	FracUnary                        ; $88 FRAC(
>80a6	8c 95					.word	IntUnary                         ; $89 INT(
>80a8	e2 95					.word	IsValUnary                       ; $8a ISVAL(
>80aa	50 8b					.word	Unary_Left                       ; $8b LEFT$(
>80ac	9e 95					.word	LenUnary                         ; $8c LEN(
>80ae	7a 8b					.word	Unary_Mid                        ; $8d MID$(
>80b0	13 8a					.word	Unary_Not                        ; $8e NOT(
>80b2	60 8b					.word	Unary_Right                      ; $8f RIGHT$(
>80b4	29 8a					.word	Unary_Rnd                        ; $90 RND(
>80b6	b8 95					.word	SgnUnary                         ; $91 SGN(
>80b8	88 8a					.word	SpcUnary                         ; $92 SPC(
>80ba	a3 8a					.word	Unary_Str                        ; $93 STR$(
>80bc	c4 82					.word	UnaryTrue                        ; $94 TRUE
>80be	d8 95					.word	ValUnary                         ; $95 VAL(
>80c0	5a 96					.word	SyntaxError                      ; $96 FOR
>80c2	5a 96					.word	SyntaxError                      ; $97 IF
>80c4	5a 96					.word	SyntaxError                      ; $98 PROC
>80c6	5a 96					.word	SyntaxError                      ; $99 REPEAT
>80c8	5a 96					.word	SyntaxError                      ; $9a WHILE
>80ca	5a 96					.word	SyntaxError                      ; $9b ENDIF
>80cc	5a 96					.word	SyntaxError                      ; $9c ENDPROC
>80ce	5a 96					.word	SyntaxError                      ; $9d NEXT
>80d0	5a 96					.word	SyntaxError                      ; $9e UNTIL
>80d2	5a 96					.word	SyntaxError                      ; $9f WEND
>80d4	1a 81					.word	CallCommand                      ; $a0 CALL
>80d6	5a 96					.word	SyntaxError                      ; $a1 CLS
>80d8	5a 96					.word	SyntaxError                      ; $a2 DATA
>80da	5a 96					.word	SyntaxError                      ; $a3 DIM
>80dc	5a 96					.word	SyntaxError                      ; $a4 GOSUB
>80de	5a 96					.word	SyntaxError                      ; $a5 GOTO
>80e0	62 81					.word	LetCommand                       ; $a6 LET
>80e2	9b 81					.word	Command_Print                    ; $a7 PRINT
>80e4	5a 96					.word	SyntaxError                      ; $a8 READ
>80e6	f2 81					.word	RemCommand                       ; $a9 REM
>80e8	5a 96					.word	SyntaxError                      ; $aa RETURN
>80ea	5a 96					.word	SyntaxError                      ; $ab THEN
>80ec	5a 96					.word	SyntaxError                      ; $ac TO
.80ee					VectorSet1:
>80ee	5a 96					.word	SyntaxError                      ; $80 !0:EOF
>80f0	5a 96					.word	SyntaxError                      ; $81 !1:SH1
>80f2	5a 96					.word	SyntaxError                      ; $82 !2:SH2
>80f4	0a 81					.word	AssertCommand                    ; $83 ASSERT
>80f6	28 81					.word	ClearCommand                     ; $84 CLEAR
>80f8	5f 81					.word	EndCommand                       ; $85 END
>80fa	5a 96					.word	SyntaxError                      ; $86 LIST
>80fc	91 81					.word	NewCommand                       ; $87 NEW
>80fe	5a 96					.word	SyntaxError                      ; $88 RESTORE
>8100	ff 81					.word	CommandRUN                       ; $89 RUN
>8102	5a 96					.word	SyntaxError                      ; $8a STOP
.8104					VectorSet2:
>8104	5a 96					.word	SyntaxError                      ; $80 !0:EOF
>8106	5a 96					.word	SyntaxError                      ; $81 !1:SH1
>8108	5a 96					.word	SyntaxError                      ; $82 !2:SH2

;******  Return to file: ./common/aa_system/00start.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assert.asm

.810a					AssertCommand:
.810a	a2 00		ldx #$00			ldx 	#0
.810c	20 1b 8c	jsr $8c1b			jsr 	EvaluateInteger 			; the assert test
.810f	20 d4 8c	jsr $8cd4			jsr 	NSMIsZero 					; exit if result is non zero.
.8112	d0 05		bne $8119			bne 	_ACExit
.8114	a9 0a		lda #$0a		lda	#10
.8116	4c 5f 82	jmp $825f		jmp	ErrorHandler
.8119					_ACExit:
.8119	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/call.asm

.811a					CallCommand:
.811a	a2 00		ldx #$00			ldx 	#0
.811c	20 30 8c	jsr $8c30			jsr 	Evaluate16BitInteger
.811f	ad 10 06	lda $0610			lda 	NSMantissa1
.8122	8d 09 06	sta $0609			sta 	NSMantissa0+1
.8125	6c 08 06	jmp ($0608)			jmp 	(NSMantissa0)

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/clear.asm

.8128					ClearCommand:
.8128	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.812a	85 36		sta $36				sta 	0+zTemp0
.812c	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.812e	85 37		sta $37				sta 	1+zTemp0
.8130					_ClearZeroLoop:
.8130	b2 36		lda ($36)			lda 	(zTemp0) 					; end of variables
.8132	f0 18		beq $814c			beq 	_ClearZeroEnd
.8134	a0 03		ldy #$03			ldy 	#3 							; erase the variables
.8136	a9 00		lda #$00			lda 	#0
.8138					_ClearOneVariable:
.8138	91 36		sta ($36),y			sta 	(zTemp0),y
.813a	c8		iny				iny
.813b	c0 08		cpy #$08			cpy 	#8
.813d	d0 f9		bne $8138			bne 	_ClearOneVariable
.813f	18		clc				clc 								; go to the next variable
.8140	b2 36		lda ($36)			lda 	(zTemp0)
.8142	65 36		adc $36				adc 	zTemp0
.8144	85 36		sta $36				sta 	zTemp0
.8146	90 e8		bcc $8130			bcc 	_ClearZeroLoop
.8148	e6 37		inc $37				inc 	zTemp0+1
.814a	80 e4		bra $8130			bra 	_ClearZeroLoop
.814c					_ClearZeroEnd:
.814c	18		clc				clc
.814d	a5 36		lda $36				lda 	zTemp0
.814f	69 01		adc #$01			adc 	#1
.8151	8d 0c 07	sta $070c			sta 	lowMemPtr
.8154	a5 37		lda $37				lda 	zTemp0+1
.8156	69 00		adc #$00			adc 	#0
.8158	8d 0d 07	sta $070d			sta 	lowMemPtr+1
.815b	20 11 97	jsr $9711			jsr 	StringSystemInitialise
.815e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/end.asm

.815f					EndCommand:
.815f	4c 0c 80	jmp $800c			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/let.asm

.8162					LetCommand:
.8162	a2 00		ldx #$00			ldx 	#0
.8164	ad 49 86	lda $8649			lda 	PrecedenceLevel+"*"			; precedence > this
.8167	20 63 86	jsr $8663			jsr 	EvaluateExpressionAtPrecedence
.816a	a9 3d		lda #$3d			lda 	#"=" 						; check =
.816c	20 b1 91	jsr $91b1			jsr 	CheckNextA
.816f	e8		inx				inx 								; RHS
.8170	20 61 86	jsr $8661			jsr 	EvaluateExpression
.8173	ca		dex				dex
.8174	20 78 81	jsr $8178			jsr 	AssignVariable
.8177	60		rts				rts
.8178					AssignVariable:
.8178	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check the string/number type bits match
.817b	48		pha				pha 								; save a copy
.817c	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.817f	29 10		and #$10			and 	#NSBIsString
.8181	d0 0b		bne $818e			bne 	_ASError
.8183	68		pla				pla 								; get back
.8184	29 10		and #$10			and 	#NSBIsString 				; check type
.8186	d0 03		bne $818b			bne 	_ASString
.8188	4c 9e 86	jmp $869e			jmp 	AssignNumber
.818b					_ASString:
.818b	4c 0c 87	jmp $870c			jmp 	AssignString
.818e					_ASError:
.818e	4c 64 96	jmp $9664			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/new.asm

.8191					NewCommand:
.8191	20 4e 91	jsr $914e			jsr 	MemoryNew
.8194	9c 00 10	stz $1000			stz 	VariableSpace 				; erase all variables.
.8197	20 28 81	jsr $8128			jsr 	ClearCommand 				; clear everything.
.819a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/print.asm

.819b					Command_Print:
.819b	18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.819c					_CPLoop:
.819c	08		php				php 								; save last action flag
.819d	b1 30		lda ($30),y			lda 	(codePtr),y
.819f	c9 80		cmp #$80			cmp  	#KWC_EOL 					; end of line or colon, exit now.
.81a1	f0 46		beq $81e9			beq 	_CPExit
.81a3	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.81a5	f0 42		beq $81e9			beq 	_CPExit
.81a7	68		pla				pla 								; throw last action flag
.81a8	b1 30		lda ($30),y			lda 	(codePtr),y
.81aa	c8		iny				iny
.81ab	c9 3b		cmp #$3b			cmp 	#KWD_SEMICOLON				; is it a semicolon
.81ad	f0 37		beq $81e6			beq 	_CPContinueWithSameLine
.81af	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; comma
.81b1	f0 2e		beq $81e1			beq 	_CPTab
.81b3	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; apostrophe (new line)
.81b5	f0 26		beq $81dd			beq 	_CPNewLine
.81b7	88		dey				dey 								; undo the get.
.81b8	a2 00		ldx #$00			ldx 	#0
.81ba	20 ef 8b	jsr $8bef			jsr 	EvaluateValue 				; get a value into slot 0
.81bd	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; is it a number
.81c0	29 10		and #$10			and 	#NSBIsString
.81c2	f0 0b		beq $81cf			beq 	_CPNumber
.81c4	ae 10 06	ldx $0610			ldx 	NSMantissa1 				; string, print the text.
.81c7	ad 08 06	lda $0608			lda 	NSMantissa0
.81ca	20 b1 82	jsr $82b1			jsr 	PrintStringXA
.81cd	80 cc		bra $819b			bra 	Command_Print 				; loop round clearing carry so NL if end
.81cf					_CPNumber:
.81cf	a9 05		lda #$05			lda 	#5 							; maximum decimals
.81d1	20 c5 8a	jsr $8ac5			jsr 	ConvertNumberToString 		; convert to string
.81d4	a2 08		ldx #$08			ldx 	#DecimalBuffer >> 8
.81d6	a9 88		lda #$88			lda 	#DecimalBuffer & $FF
.81d8	20 b1 82	jsr $82b1			jsr 	PrintStringXA
.81db	80 be		bra $819b			bra 	Command_Print 				; loop round clearing carry so NL if end
.81dd					_CPNewLine:
.81dd	a9 0d		lda #$0d			lda 	#13
.81df	80 02		bra $81e3			bra 	_CPPrintChar
.81e1					_CPTab:
.81e1	a9 09		lda #$09			lda 	#9 							; print TAB
.81e3					_CPPrintChar:
.81e3	20 82 97	jsr $9782			jsr 	EXTPrintCharacter
.81e6					_CPContinueWithSameLine:
.81e6	38		sec				sec 								; loop round with carry set, which
.81e7	80 b3		bra $819c			bra 	_CPLoop 					; will inhibit final CR
.81e9					_CPExit:
.81e9	28		plp				plp 								; get last action flag
.81ea	b0 05		bcs $81f1			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.81ec	a9 0d		lda #$0d			lda 	#13 						; print new line
.81ee	20 82 97	jsr $9782			jsr 	EXTPrintCharacter
.81f1					_CPExit2:
.81f1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/rem.asm

.81f2					RemCommand:
.81f2	b1 30		lda ($30),y			lda 	(codePtr),y
.81f4	c9 ff		cmp #$ff			cmp 	#KWC_STRING
.81f6	d0 06		bne $81fe			bne 	_RMExit
.81f8	c8		iny				iny
.81f9	98		tya				tya
.81fa	38		sec				sec
.81fb	71 30		adc ($30),y			adc 	(codePtr),y
.81fd	a8		tay				tay
.81fe					_RMExit:
.81fe	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/run.asm

.81ff					CommandRUN:
.81ff	20 28 81	jsr $8128			jsr 	ClearCommand 				; clear variable/stacks/etc.
.8202	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.8204	85 30		sta $30				sta 	codePtr
.8206	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.8208	85 31		sta $31				sta 	codePtr+1
.820a					RUNNewLine:
.820a	b2 30		lda ($30)			lda 	(codePtr)
.820c	f0 39		beq $8247			beq 	CRNoProgram         		; no then END.
.820e	a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack
.8210	9a		txs				txs
.8211					RUNCodePointerLine:
.8211	a0 02		ldy #$02			ldy 	#2 							; start of program
.8213					_CRIncMainLoop:
.8213	c8		iny				iny
.8214					_CRMainLoop:
.8214	9c 10 07	stz $0710			stz 	stringInitialised 			; clear the temporary string initialised flag.
.8217	b1 30		lda ($30),y			lda 	(codePtr),y
.8219	10 10		bpl $822b			bpl 	_CRNotKeyword
.821b	c9 96		cmp #$96			cmp 	#KWC_LAST_UNARY+1 			; if after unary, legitimate command
.821d	b0 04		bcs $8223			bcs 	_CRIsKeyword
.821f	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if unary, syntax error.
.8221	b0 1e		bcs $8241			bcs		_CRSyntaxError
.8223					_CRIsKeyword:
.8223	c8		iny				iny 								; consume command
.8224	0a		asl a				asl 	a 							; double losing the MSB which is '1' as tokens are $80-$FF
.8225	aa		tax				tax 								; put in X for vector jump
.8226	20 44 82	jsr $8244			jsr 	_CRCallVector0 				; call the vector - effectively jsr (vectortable,X)
.8229	80 e9		bra $8214			bra 	_CRMainLoop 				; and loop round
.822b					_CRNotKeyword:
.822b	c9 3a		cmp #$3a			cmp 	#KWD_COLON 					; if a :, consume it and go round.
.822d	f0 e4		beq $8213			beq 	_CRIncMainLoop
.822f	c9 40		cmp #$40			cmp 	#$40 						; variable/call reference
.8231	90 05		bcc $8238			bcc 	_CRNotVariable
.8233					_CRGoLet:
.8233	20 62 81	jsr $8162			jsr 	LetCommand
.8236	80 dc		bra $8214			bra 	_CRMainLoop
.8238					_CRNotVariable:
.8238	c9 3f		cmp #$3f			cmp 	#KWD_QMARK
.823a	f0 f7		beq $8233			beq 	_CRGoLet
.823c	c9 21		cmp #$21			cmp 	#KWD_PLING
.823e	f0 f3		beq $8233			beq 	_CRGoLet
>8240	db						.byte 	$DB 						; causes a break in the emulator
.8241					_CRSyntaxError:
.8241	4c 5a 96	jmp $965a			jmp 	SyntaxError
.8244					_CRCallVector0:
.8244	7c 94 80	jmp ($8094,x)			jmp 	(VectorSet0,x)
.8247					CRNoProgram:
.8247	4c 5f 81	jmp $815f			jmp 	EndCommand
.824a					EOLCommand:
.824a	18		clc				clc
.824b	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.824d	65 30		adc $30				adc 	codePtr
.824f	85 30		sta $30				sta 	codePtr
.8251	90 02		bcc $8255			bcc 	_CREExit
.8253	e6 31		inc $31				inc 	codePtr+1
.8255					_CREExit:
.8255	80 b3		bra $820a			bra 	RunNewLine
.8257					Shift1Command:
.8257	b1 30		lda ($30),y			lda 	(codePtr),y
.8259	c8		iny				iny
.825a	0a		asl a				asl 	a
.825b	aa		tax				tax
.825c	7c ee 80	jmp ($80ee,x)			jmp 	(VectorSet1,x)

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/charcheck.asm

.91a1					CheckRightBracket:
.91a1	b1 30		lda ($30),y			lda 	(codePtr),y
.91a3	c8		iny				iny
.91a4	c9 29		cmp #$29			cmp 	#KWD_RPAREN 						; exit if matches
.91a6	d0 0f		bne $91b7			bne 	CNAFail
.91a8	60		rts				rts
.91a9					CheckComma:
.91a9	b1 30		lda ($30),y			lda 	(codePtr),y
.91ab	c8		iny				iny
.91ac	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 						; exit if matches
.91ae	d0 07		bne $91b7			bne 	CNAFail
.91b0	60		rts				rts
.91b1					CheckNextA:
.91b1	d1 30		cmp ($30),y			cmp 	(codePtr),y
.91b3	d0 02		bne $91b7			bne 	CNAFail
.91b5	c8		iny				iny 								; skip character
.91b6	60		rts				rts 								; and exit
.91b7					CNAFail:
.91b7	4c 5a 96	jmp $965a			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/errors.asm

.825f					ErrorHandler:
.825f	a8		tay				tay 								; find the error text
.8260	f0 42		beq $82a4			beq 	_EHEnd
.8262	a2 00		ldx #$00			ldx 	#0
.8264					_EHFind:
.8264	88		dey				dey 								; found the error text ?
.8265	f0 0a		beq $8271			beq 	_EHFound
.8267					_EHFindZero:
.8267	bd 73 96	lda $9673,x			lda 	ErrorText,x 				; find the next error
.826a	e8		inx				inx
.826b	c9 00		cmp #$00			cmp 	#0
.826d	d0 f8		bne $8267			bne 	_EHFindZero
.826f	80 f3		bra $8264			bra 	_EHFind
.8271					_EHFound:
.8271	bd 73 96	lda $9673,x			lda 	ErrorText,x 				; print the message
.8274	20 82 97	jsr $9782			jsr 	EXTPrintCharacter
.8277	e8		inx				inx
.8278	bd 73 96	lda $9673,x			lda 	ErrorText,x
.827b	d0 f4		bne $8271			bne 	_EHFound
.827d	a0 01		ldy #$01			ldy 	#1 							; if line number zero don't print i
.827f	b1 30		lda ($30),y			lda 	(codePtr),y
.8281	d0 05		bne $8288			bne 	_EHAtMsg
.8283	c8		iny				iny
.8284	b1 30		lda ($30),y			lda 	(codePtr),y
.8286	f0 17		beq $829f			beq 	_EHCREnd
.8288					_EHAtMsg:
.8288	a2 82		ldx #$82			ldx 	#_AtMsg >> 8 				; print " at "
.828a	a9 a7		lda #$a7			lda 	#_AtMsg & $FF
.828c	20 b1 82	jsr $82b1			jsr 	PrintStringXA
.828f	a0 01		ldy #$01			ldy 	#1 							; line number into XA
.8291	b1 30		lda ($30),y			lda 	(codePtr),y
.8293	48		pha				pha
.8294	c8		iny				iny
.8295	b1 30		lda ($30),y			lda 	(codePtr),y
.8297	aa		tax				tax
.8298	68		pla				pla
.8299	20 fd 92	jsr $92fd			jsr 	ConvertInt16 				; convert XA to string
.829c	20 b1 82	jsr $82b1			jsr 	PrintStringXA 				; and print it.
.829f					_EHCREnd:
.829f	a9 0d		lda #$0d			lda 	#13 						; new line
.82a1	20 82 97	jsr $9782			jsr 	EXTPrintCharacter
.82a4					_EHEnd:
.82a4	4c 0c 80	jmp $800c			jmp 	WarmStart
>82a7	20 61 74 20 6c 69 6e 65		_AtMsg:	.text 	" at line ",0
>82af	20 00
.82b1					PrintStringXA:
.82b1	5a		phy				phy
.82b2	86 37		stx $37				stx 	zTemp0+1
.82b4	85 36		sta $36				sta 	zTemp0
.82b6	a0 00		ldy #$00			ldy 	#0
.82b8					_PSXALoop:
.82b8	b1 36		lda ($36),y			lda 	(zTemp0),y
.82ba	f0 06		beq $82c2			beq 	_PSXAExit
.82bc	20 82 97	jsr $9782			jsr 	EXTPrintCharacter
.82bf	c8		iny				iny
.82c0	80 f6		bra $82b8			bra 	_PSXALoop
.82c2					_PSXAExit:
.82c2	7a		ply				ply
.82c3	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/compare.asm

.82c4					UnaryTrue:
.82c4	fa		plx				plx
.82c5					ReturnTrue:
.82c5	a9 01		lda #$01			lda 	#1  						; set to 1
.82c7	20 a6 8c	jsr $8ca6			jsr 	NSMSetByte
.82ca	a9 80		lda #$80			lda 	#$80 						; set sign flag, so it is -1
.82cc	9d 00 06	sta $0600,x			sta 	NSStatus,x
.82cf	60		rts				rts
.82d0					UnaryFalse:
.82d0	fa		plx				plx
.82d1					ReturnFalse:
.82d1	4c a4 8c	jmp $8ca4			jmp 	NSMSetZero 					; set it all to zero
.82d4					BinaryCompareEqual:
.82d4	fa		plx				plx
.82d5	20 10 83	jsr $8310			jsr 	CompareBaseCode
.82d8	c9 00		cmp #$00			cmp 	#0
.82da	f0 e9		beq $82c5			beq 	ReturnTrue
.82dc	80 f3		bra $82d1			bra 	ReturnFalse
.82de					BinaryCompareLess:
.82de	fa		plx				plx
.82df	20 10 83	jsr $8310			jsr 	CompareBaseCode
.82e2	c9 ff		cmp #$ff			cmp 	#$FF
.82e4	f0 df		beq $82c5			beq 	ReturnTrue
.82e6	80 e9		bra $82d1			bra 	ReturnFalse
.82e8					BinaryCompareGreater:
.82e8	fa		plx				plx
.82e9	20 10 83	jsr $8310			jsr 	CompareBaseCode
.82ec	c9 01		cmp #$01			cmp 	#1
.82ee	f0 d5		beq $82c5			beq 	ReturnTrue
.82f0	80 df		bra $82d1			bra 	ReturnFalse
.82f2					BinaryCompareNotEqual:
.82f2	fa		plx				plx
.82f3	20 10 83	jsr $8310			jsr 	CompareBaseCode
.82f6	c9 00		cmp #$00			cmp 	#0
.82f8	d0 cb		bne $82c5			bne 	ReturnTrue
.82fa	80 d5		bra $82d1			bra 	ReturnFalse
.82fc					BinaryCompareLessEqual:
.82fc	fa		plx				plx
.82fd	20 10 83	jsr $8310			jsr 	CompareBaseCode
.8300	c9 01		cmp #$01			cmp 	#1
.8302	d0 c1		bne $82c5			bne 	ReturnTrue
.8304	80 cb		bra $82d1			bra 	ReturnFalse
.8306					BinaryCompareGreaterEqual:
.8306	fa		plx				plx
.8307	20 10 83	jsr $8310			jsr 	CompareBaseCode
.830a	c9 ff		cmp #$ff			cmp 	#$FF
.830c	d0 b7		bne $82c5			bne 	ReturnTrue
.830e	80 c1		bra $82d1			bra 	ReturnFalse
.8310					CompareBaseCode:
.8310	20 0f 87	jsr $870f			jsr 	DereferenceTopTwo 			; make both values if references.
.8313	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if either is a string.
.8316	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8319	29 10		and #$10			and 	#NSTString
.831b	d0 40		bne $835d			bne 	_CBCString
.831d	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check both are integers
.8320	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8323	d0 3b		bne $8360			bne 	_CBCFloat
.8325	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8328	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.832b	29 08		and #$08			and 	#NSTFloat
.832d	d0 31		bne $8360			bne 	_CBCFloat
.832f	20 63 83	jsr $8363			jsr 	CompareFixMinusZero
.8332	e8		inx				inx
.8333	20 63 83	jsr $8363			jsr 	CompareFixMinusZero
.8336	ca		dex				dex
.8337	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; are the signs different ?
.833a	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.833d	10 0b		bpl $834a			bpl 	_CDCSameSign
.833f	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; if first one is -ve
.8342	30 16		bmi $835a			bmi 	_CBCLess 					; return $FF
.8344					_CBCGreater:
.8344	a9 01		lda #$01			lda 	#1
.8346	60		rts				rts
.8347					_CBCEqual:
.8347	a9 00		lda #$00			lda 	#0
.8349	60		rts				rts
.834a					_CDCSameSign:
.834a	20 73 84	jsr $8473			jsr 	SubTopTwoStack 				; unsigned subtract
.834d	20 d4 8c	jsr $8cd4			jsr 	NSMIsZero 					; or the mantissa together
.8350	f0 f5		beq $8347			beq 	_CBCEqual 					; -0 == 0
.8352	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; sign of the result. if +ve return $01 else return $FF
.8355	5d 01 06	eor $0601,x			eor 	NSStatus+1,x 				; however if both were -ve this is inverted
.8358	10 ea		bpl $8344			bpl 	_CBCGreater
.835a					_CBCLess:
.835a	a9 ff		lda #$ff			lda 	#$FF
.835c	60		rts				rts
.835d					_CBCString:
.835d	4c c9 83	jmp $83c9			jmp 	CompareStrings
.8360					_CBCFloat:
.8360	4c f9 93	jmp $93f9			jmp 	CompareFloat
.8363					CompareFixMinusZero:
.8363	20 d4 8c	jsr $8cd4			jsr 	NSMIsZero
.8366	d0 03		bne $836b			bne 	_CFXMZNotZero
.8368	9e 00 06	stz $0600,x			stz 	NSStatus,x
.836b					_CFXMZNotZero:
.836b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/concat.asm

.836c					StringConcat:
.836c	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check both strings
.836f	3d 01 06	and $0601,x			and 	NSStatus+1,x
.8372	29 18		and #$18			and 	#NSBTypeMask
.8374	c9 10		cmp #$10			cmp 	#NSTString
.8376	d0 4e		bne $83c6			bne		_SCType
.8378	64 38		stz $38				stz 	zTemp1 						; counting total length
.837a	e8		inx				inx
.837b	20 99 83	jsr $8399			jsr 	_SCSetupZ0 					; setup for second
.837e	20 a4 83	jsr $83a4			jsr 	_SCLengthZ0 				; length for second
.8381	ca		dex				dex
.8382	20 99 83	jsr $8399			jsr 	_SCSetupZ0 					; setup for first
.8385	20 a4 83	jsr $83a4			jsr 	_SCLengthZ0 				; length for first
.8388	a5 38		lda $38				lda 	zTemp1 						; allocate memory
.838a	20 2f 97	jsr $972f			jsr 	StringTempAllocate
.838d	20 b7 83	jsr $83b7			jsr 	_SCCopy 					; copy first out, using zTemp0 from above
.8390	e8		inx				inx
.8391	20 99 83	jsr $8399			jsr 	_SCSetupZ0 					; copy second out
.8394	20 b7 83	jsr $83b7			jsr 	_SCCopy
.8397	ca		dex				dex
.8398	60		rts				rts
.8399					_SCSetupZ0:
.8399	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.839c	85 36		sta $36				sta 	zTemp0
.839e	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.83a1	85 37		sta $37				sta 	zTemp0+1
.83a3	60		rts				rts
.83a4					_SCLengthZ0:
.83a4	5a		phy				phy
.83a5	a0 00		ldy #$00			ldy 	#0
.83a7					_SCLenLoop:
.83a7	b1 36		lda ($36),y			lda 	(zTemp0),y
.83a9	f0 0a		beq $83b5			beq 	_SCLExit
.83ab	c8		iny				iny
.83ac	e6 38		inc $38				inc 	zTemp1
.83ae	10 f7		bpl $83a7			bpl		_SCLenLoop
.83b0	a9 09		lda #$09		lda	#9
.83b2	4c 5f 82	jmp $825f		jmp	ErrorHandler
.83b5					_SCLExit:
.83b5	7a		ply				ply
.83b6	60		rts				rts
.83b7					_SCCopy:
.83b7	5a		phy				phy
.83b8	a0 00		ldy #$00			ldy 	#0
.83ba					_SCCopyLoop:
.83ba	b1 36		lda ($36),y			lda 	(zTemp0),y
.83bc	f0 06		beq $83c4			beq 	_SCCExit
.83be	20 6d 97	jsr $976d			jsr 	StringTempWrite
.83c1	c8		iny				iny
.83c2	80 f6		bra $83ba			bra 	_SCCopyLoop
.83c4					_SCCExit:
.83c4	7a		ply				ply
.83c5	60		rts				rts
.83c6					_SCType:
.83c6	4c 64 96	jmp $9664			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/divide.asm

.91ba					IntegerDivide:
.91ba	fa		plx				plx
.91bb	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.91be	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.91c1	0a		asl a				asl 	a 							; shift reference bit into sign bit
.91c2	0a		asl a				asl 	a
.91c3	10 05		bpl $91ca			bpl 	_NotRef
.91c5	48		pha				pha
.91c6	20 0f 87	jsr $870f			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.91c9	68		pla				pla
.91ca					_NotRef:
.91ca	0a		asl a				asl 	a
.91cb	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.91cd	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.91d0	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.91d3	f0 03		beq $91d8			beq 	_IntegerCode 				; if clear, then we have two integers
.91d5	4c 64 96	jmp $9664			jmp 	TypeError 					; anything else, type mismatch.
.91d8					_IntegerCode:
.91d8	20 fa 91	jsr $91fa			jsr 	CheckDivideZero 			; do div zero check
.91db	20 32 92	jsr $9232			jsr 	Int32Divide 				; do the division
.91de	20 ef 92	jsr $92ef			jsr 	CalculateSign 				; calculate result sign
.91e1					NSMCopyPlusTwoToZero:
.91e1	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.91e4	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.91e7	bd 12 06	lda $0612,x			lda 	NSMantissa1+2,x
.91ea	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.91ed	bd 1a 06	lda $061a,x			lda 	NSMantissa2+2,x
.91f0	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.91f3	bd 22 06	lda $0622,x			lda 	NSMantissa3+2,x
.91f6	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.91f9	60		rts				rts
.91fa					CheckDivideZero:
.91fa	e8		inx				inx
.91fb	20 d4 8c	jsr $8cd4			jsr 	NSMIsZero
.91fe	f0 02		beq $9202			beq 	_CDVError
.9200	ca		dex				dex
.9201	60		rts				rts
.9202					_CDVError:
.9202	a9 03		lda #$03		lda	#3
.9204	4c 5f 82	jmp $825f		jmp	ErrorHandler
.9207					IntegerModulus:
.9207	fa		plx				plx
.9208	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.920b	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.920e	0a		asl a				asl 	a 							; shift reference bit into sign bit
.920f	0a		asl a				asl 	a
.9210	10 05		bpl $9217			bpl 	_NotRef
.9212	48		pha				pha
.9213	20 0f 87	jsr $870f			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9216	68		pla				pla
.9217					_NotRef:
.9217	0a		asl a				asl 	a
.9218	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.921a	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.921d	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.9220	f0 03		beq $9225			beq 	_IntegerCode 				; if clear, then we have two integers
.9222	4c 64 96	jmp $9664			jmp 	TypeError 					; anything else, type mismatch.
.9225					_IntegerCode:
.9225	20 fa 91	jsr $91fa			jsr 	CheckDivideZero 			; do div zero check
.9228	20 32 92	jsr $9232			jsr 	Int32Divide 				; do the division
.922b	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; clear the sign bit.
.922e	5e 00 06	lsr $0600,x			lsr 	NSStatus,x
.9231	60		rts				rts
.9232					Int32Divide:
.9232	48		pha				pha 								; save AXY
.9233	5a		phy				phy
.9234	20 7b 8c	jsr $8c7b			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.9237	20 a0 8c	jsr $8ca0			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.923a	a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.923c					_I32DivideLoop:
.923c	e8		inx				inx
.923d	e8		inx				inx
.923e	20 b9 8c	jsr $8cb9			jsr 	NSMShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.9241	ca		dex				dex
.9242	ca		dex				dex
.9243	20 ba 8c	jsr $8cba			jsr 	NSMRotateLeft
.9246	20 72 92	jsr $9272			jsr 	DivideCheckSubtract 		; check if subtract possible
.9249	90 03		bcc $924e			bcc 	_I32DivideNoCarryIn
.924b	fe 0a 06	inc $060a,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.924e					_I32DivideNoCarryIn:
.924e	88		dey				dey 								; loop round till division completed.
.924f	d0 eb		bne $923c			bne 	_I32DivideLoop
.9251	7a		ply				ply 								; restore AXY and exit
.9252	68		pla				pla
.9253	60		rts				rts
.9254					Int32ShiftDivide:
.9254	48		pha				pha 								; save AY
.9255	5a		phy				phy
.9256	e8		inx				inx 								; clear S[X+2]
.9257	e8		inx				inx
.9258	20 a4 8c	jsr $8ca4			jsr 	NSMSetZero
.925b	ca		dex				dex
.925c	ca		dex				dex
.925d	a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.925f					_I32SDLoop:
.925f	20 72 92	jsr $9272			jsr 	DivideCheckSubtract 		; check if subtract possible
.9262	e8		inx				inx
.9263	e8		inx				inx
.9264	20 ba 8c	jsr $8cba			jsr 	NSMRotateLeft				; shift 64 bit FPA left, rotating carry in
.9267	ca		dex				dex
.9268	ca		dex				dex
.9269	20 ba 8c	jsr $8cba			jsr 	NSMRotateLeft
.926c	88		dey				dey 	 							; do 31 times
.926d	d0 f0		bne $925f			bne 	_I32SDLoop
.926f	7a		ply				ply 								; restore AY and exit
.9270	68		pla				pla
.9271	60		rts				rts
.9272					DivideCheckSubtract:
.9272	20 73 84	jsr $8473			jsr 	SubTopTwoStack 				; subtract Stack[X+1] from Stack[X+0]
.9275	b0 04		bcs $927b			bcs 	_DCSExit 					; if carry set, then could do, exit
.9277	20 4d 84	jsr $844d			jsr 	AddTopTwoStack 				; add it back in
.927a	18		clc				clc 								; and return False
.927b					_DCSExit:
.927b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/multiply.asm

.927c					MulInteger:
.927c	fa		plx				plx
.927d	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.9280	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.9283	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9284	0a		asl a				asl 	a
.9285	10 05		bpl $928c			bpl 	_NotRef
.9287	48		pha				pha
.9288	20 0f 87	jsr $870f			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.928b	68		pla				pla
.928c					_NotRef:
.928c	0a		asl a				asl 	a 							; put MSB of type into A:7
.928d	30 0b		bmi $929a			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.928f	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9292	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.9295	f0 06		beq $929d			beq 	_IntegerCode 				; if clear, then we have two integers
.9297	4c d0 94	jmp $94d0			jmp 	FloatingPointMultiply 							; otherwise at least one float.
.929a					_StringData:
.929a	4c 6e 96	jmp $966e			jmp 	NotDoneError							; at least one string - don't know both are strings.
.929d					_IntegerCode:
.929d	20 aa 92	jsr $92aa			jsr 	MultiplyShort
.92a0	c9 00		cmp #$00			cmp 	#0
.92a2	f0 05		beq $92a9			beq 	_MIExit
.92a4	a9 04		lda #$04		lda	#4
.92a6	4c 5f 82	jmp $825f		jmp	ErrorHandler
.92a9					_MIExit:
.92a9	60		rts				rts
.92aa					MultiplyShort:
.92aa	5a		phy				phy 								; save Y
.92ab	20 7b 8c	jsr $8c7b			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.92ae	20 a0 8c	jsr $8ca0			jsr 	NSMSetZeroMantissaOnly 		; set mantissa S[X] to zero
.92b1	a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.92b3					_I32MLoop:
.92b3	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.92b6	1d 12 06	ora $0612,x			ora 	NSMantissa1+2,x
.92b9	1d 1a 06	ora $061a,x			ora 	NSMantissa2+2,x
.92bc	1d 22 06	ora $0622,x			ora 	NSMantissa3+2,x
.92bf	f0 28		beq $92e9			beq 	_I32MExit 					; exit if zero
.92c1	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.92c4	29 01		and #$01			and 	#1
.92c6	f0 0e		beq $92d6			beq 	_I32MNoAdd
.92c8	20 4d 84	jsr $844d			jsr 	AddTopTwoStack 				; if so add S[X+1] to S[X+0]
.92cb	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.92ce	10 06		bpl $92d6			bpl 	_I32MNoAdd
.92d0					_I32ShiftRight:
.92d0	20 c7 8c	jsr $8cc7			jsr 	NSMShiftRight 				; shift S[X] right
.92d3	c8		iny				iny 								; increment shift count
.92d4	80 0a		bra $92e0			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.92d6					_I32MNoAdd:
.92d6	3c 21 06	bit $0621,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.92d9	70 f5		bvs $92d0			bvs 	_I32ShiftRight 				; instead.
.92db	e8		inx				inx
.92dc	20 b9 8c	jsr $8cb9			jsr 	NSMShiftLeft 				; shift additive S[X+1] left
.92df	ca		dex				dex
.92e0					_I32MShiftUpper:
.92e0	e8		inx				inx 								; shift S[X+2] right
.92e1	e8		inx				inx
.92e2	20 c7 8c	jsr $8cc7			jsr 	NSMShiftRight
.92e5	ca		dex				dex
.92e6	ca		dex				dex
.92e7	80 ca		bra $92b3			bra 	_I32MLoop 					; try again.
.92e9					_I32MExit:
.92e9	20 ef 92	jsr $92ef			jsr 	CalculateSign
.92ec	98		tya				tya 								; shift in A
.92ed	7a		ply				ply 								; restore Y and exit
.92ee	60		rts				rts
.92ef					CalculateSign:
.92ef	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.92f2	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; shift result left
.92f5	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.92f8	0a		asl a				asl 	a 							; shift bit 7 into carry
.92f9	7e 00 06	ror $0600,x			ror 	NSStatus,x 					; shift right into status byte.
.92fc	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/scompare.asm

.83c9					CompareStrings:
.83c9	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check both are strings
.83cc	3d 01 06	and $0601,x			and 	NSStatus+1,x
.83cf	29 10		and #$10			and 	#NSBIsString
.83d1	f0 2c		beq $83ff			beq 	_CSTypeError
.83d3	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy string addresses to zTemp0/1
.83d6	85 36		sta $36				sta 	zTemp0
.83d8	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.83db	85 37		sta $37				sta 	zTemp0+1
.83dd	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.83e0	85 38		sta $38				sta 	zTemp1
.83e2	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.83e5	85 39		sta $39				sta 	zTemp1+1
.83e7	5a		phy				phy 								; save Y so we can access strings
.83e8	a0 ff		ldy #$ff			ldy 	#$FF 						; -1 for pre increment.
.83ea					_CSLoop:
.83ea	c8		iny				iny
.83eb	b1 36		lda ($36),y			lda 	(zTemp0),y 					; check if they are the same
.83ed	d1 38		cmp ($38),y			cmp 	(zTemp1),y
.83ef	d0 06		bne $83f7			bne 	_CSDifferent
.83f1	c9 00		cmp #$00			cmp 	#0 							; reached end ?
.83f3	d0 f5		bne $83ea			bne 	_CSLoop 					; still comparing
.83f5					_CSExit:
.83f5	7a		ply				ply 								; reached end, return zero in A from EOS
.83f6	60		rts				rts
.83f7					_CSDifferent:
.83f7	a9 ff		lda #$ff			lda 	#255 						; if < return $FF
.83f9	90 fa		bcc $83f5			bcc		_CSExit
.83fb	a9 01		lda #$01			lda 	#1 							; otherwise return 1.
.83fd	80 f6		bra $83f5			bra 	_CSExit
.83ff					_CSTypeError:
.83ff	4c 64 96	jmp $9664			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/shifts.asm

.8402					ShiftLeft:
.8402	38		sec				sec
.8403	80 01		bra $8406			bra 	ShiftMain
.8405					ShiftRight:
.8405	18		clc				clc
.8406					ShiftMain:
.8406	fa		plx				plx 								; restore X
.8407	08		php				php 								; save direction
.8408	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.840b	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.840e	0a		asl a				asl 	a 							; shift reference bit into sign bit
.840f	0a		asl a				asl 	a
.8410	10 05		bpl $8417			bpl 	_NotRef
.8412	48		pha				pha
.8413	20 0f 87	jsr $870f			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8416	68		pla				pla
.8417					_NotRef:
.8417	0a		asl a				asl 	a
.8418	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.841a	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.841d	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8420	f0 03		beq $8425			beq 	_IntegerCode 				; if clear, then we have two integers
.8422	4c 64 96	jmp $9664			jmp 	TypeError 					; anything else, type mismatch.
.8425					_IntegerCode:
.8425	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; check number < 32
.8428	29 e0		and #$e0			and 	#$E0
.842a	1d 11 06	ora $0611,x			ora 	NSMantissa1+1,x
.842d	1d 19 06	ora $0619,x			ora 	NSMantissa2+1,x
.8430	1d 21 06	ora $0621,x			ora 	NSMantissa3+1,x
.8433	d0 13		bne $8448			bne 	_SMExit0 					; if >= 32 it will always return zero.
.8435					_SMLoop:
.8435	de 09 06	dec $0609,x			dec 	NSMantissa0+1,x 			; predecrement, could do << 0
.8438	30 11		bmi $844b			bmi 	_SMExit 					; exit if done.
.843a	28		plp				plp 								; restore direcition setting
.843b	08		php				php
.843c	90 05		bcc $8443			bcc 	_SMRight
.843e	20 b9 8c	jsr $8cb9			jsr 	NSMShiftLeft 				; shift left if CS
.8441	80 f2		bra $8435			bra 	_SMLoop
.8443					_SMRight:
.8443	20 c7 8c	jsr $8cc7			jsr 	NSMShiftRight 				; shift right if CC
.8446	80 ed		bra $8435			bra 	_SMLoop
.8448					_SMExit0:
.8448	20 a4 8c	jsr $8ca4			jsr 	NSMSetZero 					; return zero.
.844b					_SMExit:
.844b	28		plp				plp 								; throw direction
.844c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/simple.asm

.844d					AddTopTwoStack:
.844d	18		clc				clc
.844e	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8451	7d 09 06	adc $0609,x			adc 		NSMantissa0+1,x
.8454	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8457	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.845a	7d 11 06	adc $0611,x			adc 		NSMantissa1+1,x
.845d	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8460	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8463	7d 19 06	adc $0619,x			adc 		NSMantissa2+1,x
.8466	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8469	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.846c	7d 21 06	adc $0621,x			adc 		NSMantissa3+1,x
.846f	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8472	60		rts				rts
.8473					SubTopTwoStack:
.8473	38		sec				sec
.8474	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8477	fd 09 06	sbc $0609,x			sbc 		NSMantissa0+1,x
.847a	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.847d	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8480	fd 11 06	sbc $0611,x			sbc 		NSMantissa1+1,x
.8483	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8486	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8489	fd 19 06	sbc $0619,x			sbc 		NSMantissa2+1,x
.848c	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.848f	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8492	fd 21 06	sbc $0621,x			sbc 		NSMantissa3+1,x
.8495	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8498	60		rts				rts
.8499					AddInteger:
.8499	fa		plx				plx
.849a	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.849d	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.84a0	0a		asl a				asl 	a 							; shift reference bit into sign bit
.84a1	0a		asl a				asl 	a
.84a2	10 05		bpl $84a9			bpl 	_NotRef
.84a4	48		pha				pha
.84a5	20 0f 87	jsr $870f			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.84a8	68		pla				pla
.84a9					_NotRef:
.84a9	0a		asl a				asl 	a 							; put MSB of type into A:7
.84aa	30 0b		bmi $84b7			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.84ac	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.84af	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.84b2	f0 06		beq $84ba			beq 	_IntegerCode 				; if clear, then we have two integers
.84b4	4c 58 93	jmp $9358			jmp 	FloatingPointAdd 							; otherwise at least one float.
.84b7					_StringData:
.84b7	4c 6c 83	jmp $836c			jmp 	StringConcat							; at least one string - don't know both are strings.
.84ba					_IntegerCode:
.84ba					AddCode:
.84ba	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.84bd	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.84c0	10 8b		bpl $844d			bpl 	AddTopTwoStack
.84c2	20 73 84	jsr $8473			jsr 	SubTopTwoStack 				; do a physical subtraction
.84c5	3c 20 06	bit $0620,x			bit 	NSMantissa3,x 				; result is +ve, okay
.84c8	10 09		bpl $84d3			bpl 	_AddExit
.84ca	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; sign is that of 2nd value
.84cd	9d 00 06	sta $0600,x			sta 	NSStatus,x
.84d0	20 59 8c	jsr $8c59			jsr 	NSMNegateMantissa 			; negate the mantissa and exit
.84d3					_AddExit:
.84d3	60		rts				rts
.84d4					SubInteger:
.84d4	fa		plx				plx
.84d5	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.84d8	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.84db	0a		asl a				asl 	a 							; shift reference bit into sign bit
.84dc	0a		asl a				asl 	a
.84dd	10 05		bpl $84e4			bpl 	_NotRef
.84df	48		pha				pha
.84e0	20 0f 87	jsr $870f			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.84e3	68		pla				pla
.84e4					_NotRef:
.84e4	0a		asl a				asl 	a 							; put MSB of type into A:7
.84e5	30 0b		bmi $84f2			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.84e7	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.84ea	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.84ed	f0 06		beq $84f5			beq 	_IntegerCode 				; if clear, then we have two integers
.84ef	4c 5d 93	jmp $935d			jmp 	FloatingPointSub 							; otherwise at least one float.
.84f2					_StringData:
.84f2	4c 6e 96	jmp $966e			jmp 	NotDoneError							; at least one string - don't know both are strings.
.84f5					_IntegerCode:
.84f5	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; negate the second value.
.84f8	49 80		eor #$80			eor 	#$80
.84fa	9d 01 06	sta $0601,x			sta 	NSStatus+1,x
.84fd	80 bb		bra $84ba			bra 	AddCode 					; and do the same code as add.
.84ff					AndInteger:
.84ff	fa		plx				plx
.8500	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8503	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8506	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8507	0a		asl a				asl 	a
.8508	10 05		bpl $850f			bpl 	_NotRef
.850a	48		pha				pha
.850b	20 0f 87	jsr $870f			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.850e	68		pla				pla
.850f					_NotRef:
.850f	0a		asl a				asl 	a
.8510	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8512	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8515	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8518	f0 03		beq $851d			beq 	_IntegerCode 				; if clear, then we have two integers
.851a	4c 64 96	jmp $9664			jmp 	TypeError 					; anything else, type mismatch.
.851d					_IntegerCode:
.851d	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8520	3d 09 06	and $0609,x			and 		NSMantissa0+1,x
.8523	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8526	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8529	3d 11 06	and $0611,x			and 		NSMantissa1+1,x
.852c	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.852f	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8532	3d 19 06	and $0619,x			and 		NSMantissa2+1,x
.8535	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8538	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.853b	3d 21 06	and $0621,x			and 		NSMantissa3+1,x
.853e	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8541	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.8544	60		rts				rts
.8545					OraInteger:
.8545	fa		plx				plx
.8546	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8549	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.854c	0a		asl a				asl 	a 							; shift reference bit into sign bit
.854d	0a		asl a				asl 	a
.854e	10 05		bpl $8555			bpl 	_NotRef
.8550	48		pha				pha
.8551	20 0f 87	jsr $870f			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8554	68		pla				pla
.8555					_NotRef:
.8555	0a		asl a				asl 	a
.8556	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8558	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.855b	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.855e	f0 03		beq $8563			beq 	_IntegerCode 				; if clear, then we have two integers
.8560	4c 64 96	jmp $9664			jmp 	TypeError 					; anything else, type mismatch.
.8563					_IntegerCode:
.8563	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8566	1d 09 06	ora $0609,x			ora 		NSMantissa0+1,x
.8569	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.856c	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.856f	1d 11 06	ora $0611,x			ora 		NSMantissa1+1,x
.8572	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8575	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8578	1d 19 06	ora $0619,x			ora 		NSMantissa2+1,x
.857b	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.857e	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8581	1d 21 06	ora $0621,x			ora 		NSMantissa3+1,x
.8584	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8587	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.858a	60		rts				rts
.858b					EorInteger:
.858b	fa		plx				plx
.858c	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.858f	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8592	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8593	0a		asl a				asl 	a
.8594	10 05		bpl $859b			bpl 	_NotRef
.8596	48		pha				pha
.8597	20 0f 87	jsr $870f			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.859a	68		pla				pla
.859b					_NotRef:
.859b	0a		asl a				asl 	a
.859c	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.859e	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.85a1	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.85a4	f0 03		beq $85a9			beq 	_IntegerCode 				; if clear, then we have two integers
.85a6	4c 64 96	jmp $9664			jmp 	TypeError 					; anything else, type mismatch.
.85a9					_IntegerCode:
.85a9	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.85ac	5d 09 06	eor $0609,x			eor 		NSMantissa0+1,x
.85af	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.85b2	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.85b5	5d 11 06	eor $0611,x			eor 		NSMantissa1+1,x
.85b8	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.85bb	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.85be	5d 19 06	eor $0619,x			eor 		NSMantissa2+1,x
.85c1	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.85c4	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.85c7	5d 21 06	eor $0621,x			eor 		NSMantissa3+1,x
.85ca	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.85cd	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.85d0	60		rts				rts
.85d1					WordIndirect:
.85d1	fa		plx				plx
.85d2	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.85d5	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.85d8	0a		asl a				asl 	a 							; shift reference bit into sign bit
.85d9	0a		asl a				asl 	a
.85da	10 05		bpl $85e1			bpl 	_NotRef
.85dc	48		pha				pha
.85dd	20 0f 87	jsr $870f			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.85e0	68		pla				pla
.85e1					_NotRef:
.85e1	0a		asl a				asl 	a
.85e2	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.85e4	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.85e7	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.85ea	f0 03		beq $85ef			beq 	_IntegerCode 				; if clear, then we have two integers
.85ec	4c 64 96	jmp $9664			jmp 	TypeError 					; anything else, type mismatch.
.85ef					_IntegerCode:
.85ef	20 ba 84	jsr $84ba			jsr 	AddCode 					; add the two values
.85f2	a9 22		lda #$22			lda 	#NSBIsReference+2 			; make a 2 byte reference
.85f4	9d 00 06	sta $0600,x			sta 	NSStatus,x
.85f7	60		rts				rts
.85f8					ByteIndirect:
.85f8	fa		plx				plx
.85f9	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.85fc	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.85ff	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8600	0a		asl a				asl 	a
.8601	10 05		bpl $8608			bpl 	_NotRef
.8603	48		pha				pha
.8604	20 0f 87	jsr $870f			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8607	68		pla				pla
.8608					_NotRef:
.8608	0a		asl a				asl 	a
.8609	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.860b	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.860e	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8611	f0 03		beq $8616			beq 	_IntegerCode 				; if clear, then we have two integers
.8613	4c 64 96	jmp $9664			jmp 	TypeError 					; anything else, type mismatch.
.8616					_IntegerCode:
.8616	20 ba 84	jsr $84ba			jsr 	AddCode 					; add the two values
.8619	a9 21		lda #$21			lda 	#NSBIsReference+1 			; make a 1 byte reference
.861b	9d 00 06	sta $0600,x			sta 	NSStatus,x
.861e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/tostring.asm

.92fd					ConvertInt16:
.92fd	8d 08 06	sta $0608			sta 	NSMantissa0 				; set up as 32 bit conversion
.9300	8e 10 06	stx $0610			stx 	NSMantissa1
.9303	9c 18 06	stz $0618			stz 	NSMantissa2
.9306	9c 20 06	stz $0620			stz 	NSMantissa3
.9309	9c 00 06	stz $0600			stz 	NSStatus 					; positive integer
.930c	a2 00		ldx #$00			ldx 	#0 							; stack level
.930e	a9 0a		lda #$0a			lda 	#10 						; base
.9310	80 00		bra $9312			bra 	ConvertInt32
.9312					ConvertInt32:
.9312	5a		phy				phy
.9313	a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.9315	2c 00 06	bit $0600			bit 	NSStatus 					; output a - if not negative.
.9318	10 08		bpl $9322			bpl 	_CI32NotNeg
.931a	48		pha				pha
.931b	a9 2d		lda #$2d			lda 	#'-'
.931d	99 66 08	sta $0866,y			sta 	NumberBuffer,y
.9320	c8		iny				iny
.9321	68		pla				pla
.9322					_CI32NotNeg:
.9322	20 30 93	jsr $9330			jsr 	_CI32DivideConvert 			; recursive conversion
.9325	a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.9327	99 66 08	sta $0866,y			sta 	NumberBuffer,y
.932a	7a		ply				ply
.932b	a2 08		ldx #$08			ldx 	#NumberBuffer >> 8
.932d	a9 66		lda #$66			lda 	#NumberBuffer & $FF
.932f	60		rts				rts
.9330					_CI32DivideConvert:
.9330	e8		inx				inx 								; write to next slot up
.9331	20 a6 8c	jsr $8ca6			jsr 	NSMSetByte
.9334	ca		dex				dex
.9335	20 32 92	jsr $9232			jsr 	Int32Divide 				; divide
.9338	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; save remainder
.933b	48		pha				pha
.933c	20 e1 91	jsr $91e1			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.933f	20 d4 8c	jsr $8cd4			jsr 	NSMIsZero 					; is it zero ?
.9342	f0 06		beq $934a			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.9344	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.9347	20 30 93	jsr $9330			jsr 	_CI32DivideConvert 			; and recusrively call.
.934a					_CI32NoRecurse:
.934a	68		pla				pla 								; remainder
.934b	c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII
.934d	90 02		bcc $9351			bcc 	_CI32NotHex
.934f	69 26		adc #$26			adc 	#6+32
.9351					_CI32NotHex:
.9351	69 30		adc #$30			adc 	#48
.9353	99 66 08	sta $0866,y			sta 	NumberBuffer,y 				; write out and exit
.9356	c8		iny				iny
.9357	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/expression.asm


;******  Processing file: ./common/expressions/../generated/precedence.dat

.861f					PrecedenceLevel:
>861f	04					.byte	 4	; $00 <<
>8620	02					.byte	 2	; $01 <=
>8621	02					.byte	 2	; $02 <>
>8622	00					.byte	 0	; $03 !!3
>8623	00					.byte	 0	; $04 ><
>8624	02					.byte	 2	; $05 >=
>8625	04					.byte	 4	; $06 >>
>8626	00					.byte	 0	; $07 !!7
>8627	00					.byte	 0	; $08 !!8
>8628	00					.byte	 0	; $09 !!9
>8629	00					.byte	 0	; $0a !!10
>862a	00					.byte	 0	; $0b !!11
>862b	00					.byte	 0	; $0c !!12
>862c	00					.byte	 0	; $0d !!13
>862d	00					.byte	 0	; $0e !!14
>862e	00					.byte	 0	; $0f !!15
>862f	00					.byte	 0	; $10 @
>8630	00					.byte	 0	; $11 !!17
>8631	00					.byte	 0	; $12 !!18
>8632	00					.byte	 0	; $13 [
>8633	04					.byte	 4	; $14 \
>8634	00					.byte	 0	; $15 ]
>8635	01					.byte	 1	; $16 ^
>8636	00					.byte	 0	; $17 _
>8637	00					.byte	 0	; $18 `
>8638	00					.byte	 0	; $19 !!25
>8639	00					.byte	 0	; $1a !!26
>863a	00					.byte	 0	; $1b {
>863b	01					.byte	 1	; $1c |
>863c	00					.byte	 0	; $1d }
>863d	00					.byte	 0	; $1e ~
>863e	00					.byte	 0	; $1f [7m<7F>[m
>863f	00					.byte	 0	; $20
>8640	05					.byte	 5	; $21 !
>8641	00					.byte	 0	; $22 "
>8642	00					.byte	 0	; $23 #
>8643	05					.byte	 5	; $24 $
>8644	04					.byte	 4	; $25 %
>8645	01					.byte	 1	; $26 &
>8646	00					.byte	 0	; $27 '
>8647	00					.byte	 0	; $28 (
>8648	00					.byte	 0	; $29 )
>8649	04					.byte	 4	; $2a *
>864a	03					.byte	 3	; $2b +
>864b	00					.byte	 0	; $2c ,
>864c	03					.byte	 3	; $2d -
>864d	00					.byte	 0	; $2e .
>864e	04					.byte	 4	; $2f /
>864f	00					.byte	 0	; $30 0
>8650	00					.byte	 0	; $31 1
>8651	00					.byte	 0	; $32 2
>8652	00					.byte	 0	; $33 3
>8653	00					.byte	 0	; $34 4
>8654	00					.byte	 0	; $35 5
>8655	00					.byte	 0	; $36 6
>8656	00					.byte	 0	; $37 7
>8657	00					.byte	 0	; $38 8
>8658	00					.byte	 0	; $39 9
>8659	00					.byte	 0	; $3a :
>865a	00					.byte	 0	; $3b ;
>865b	02					.byte	 2	; $3c <
>865c	02					.byte	 2	; $3d =
>865d	02					.byte	 2	; $3e >
>865e	05					.byte	 5	; $3f ?

;******  Return to file: ./common/expressions/expression.asm

.865f					EvaluateExpressionAt0:
.865f	a2 00		ldx #$00			ldx 	#0 							; bottom stack level
.8661					EvaluateExpression:
.8661	a9 00		lda #$00			lda 	#0 							; lowest precedence level
.8663					EvaluateExpressionAtPrecedence:
.8663	48		pha				pha 								; save precedence level
.8664	20 d0 88	jsr $88d0			jsr 	EvaluateTerm 				; evaluate term into level X.
.8667	68		pla				pla 								; restore precedence level.
.8668					_EXPRLoop:
.8668	85 36		sta $36				sta 	zTemp0 						; save current precedence level.
.866a	b1 30		lda ($30),y			lda 	(codePtr),y
.866c	c9 40		cmp #$40			cmp		#$40 						; if >= $40 cannot be an operator
.866e	b0 25		bcs $8695			bcs 	_EXPRExit
.8670	da		phx				phx 								; read the operator precedence
.8671	aa		tax				tax
.8672	bd 1f 86	lda $861f,x			lda 	PrecedenceLevel,x
.8675	fa		plx				plx
.8676	c9 00		cmp #$00			cmp 	#0							; if zero exit (not an operator)
.8678	f0 1b		beq $8695			beq 	_EXPRExit
.867a	85 37		sta $37				sta 	zTemp0+1 					; save operator precedence level.
.867c	a5 36		lda $36				lda 	zTemp0 						; compare current precedence vs. operator precedence
.867e	c5 37		cmp $37				cmp 	zTemp0+1
.8680	b0 13		bcs $8695			bcs		_EXPRExit 					; if current >= operator exit
.8682	48		pha				pha 								; save current precedence.
.8683	b1 30		lda ($30),y			lda 	(codePtr),y
.8685	c8		iny				iny
.8686	48		pha				pha
.8687	a5 37		lda $37				lda 	zTemp0+1 					; get operator precedence level
.8689	e8		inx				inx 								; work out the right hand side.
.868a	20 63 86	jsr $8663			jsr 	EvaluateExpressionAtPrecedence
.868d	ca		dex				dex
.868e	68		pla				pla 								; get operator, call the code.
.868f	20 98 86	jsr $8698			jsr 	_EXPRCaller
.8692	68		pla				pla 								; restore precedence level
.8693	80 d3		bra $8668			bra 	_EXPRLoop 					; and go round.
.8695					_EXPRExit:
.8695	a5 36		lda $36				lda 	zTemp0 						; A = current precedence level.
.8697	60		rts				rts
.8698					_EXPRCaller:
.8698	da		phx				phx 								; save on stack, first thing is to restore it
.8699	0a		asl a				asl 	a 							; double so can use vectors into X
.869a	aa		tax				tax
.869b	7c 14 80	jmp ($8014,x)			jmp 	(VectorSetPunc,x) 			; and go to the code.

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/addsub.asm

.9358					FloatingPointAdd:
.9358	20 f9 94	jsr $94f9			jsr 	FloatPrepare 				; prepare for floats
.935b	80 0b		bra $9368			bra 	FloatAdd
.935d					FloatingPointSub:
.935d	20 f9 94	jsr $94f9			jsr 	FloatPrepare 				; prepare for floats
.9360					FloatSubtract:
.9360	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; negate FPB
.9363	49 80		eor #$80			eor 	#$80
.9365	9d 01 06	sta $0601,x			sta 	NSStatus+1,x				; and fall through.
.9368					FloatAdd:
.9368	48		pha				pha
.9369	5a		phy				phy
.936a	20 0a 95	jsr $950a			jsr 	NSNormalise 				; normalise S[X]
.936d	f0 54		beq $93c3			beq 	_FAReturn1
.936f	e8		inx				inx 								; normalise S[X+1]
.9370	20 0a 95	jsr $950a			jsr 	NSNormalise
.9373	ca		dex				dex
.9374	c9 00		cmp #$00			cmp 	#0
.9376	f0 6f		beq $93e7			beq 	_FAExit 					; if so, just return A
.9378	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; are the exponents the same ?
.937b	dd 29 06	cmp $0629,x			cmp 	NSExponent+1,x
.937e	f0 1b		beq $939b			beq 	_FAExponentsEqual
.9380	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; work out the larger exponent
.9383	a8		tay				tay
.9384	38		sec				sec 								; do a signed comparison of the exponents.
.9385	fd 29 06	sbc $0629,x			sbc 	NSExponent+1,x
.9388	50 02		bvc $938c			bvc 	_FANoSignedChange
.938a	49 80		eor #$80			eor 	#$80
.938c					_FANoSignedChange:
.938c	29 80		and #$80			and 	#$80
.938e	10 03		bpl $9393			bpl 	_FAHaveMax
.9390	bc 29 06	ldy $0629,x			ldy 	NSExponent+1,x
.9393					_FAHaveMax:
.9393	20 ea 93	jsr $93ea			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.9396	e8		inx				inx
.9397	20 ea 93	jsr $93ea			jsr 	_FAShiftToExponent
.939a	ca		dex				dex
.939b					_FAExponentsEqual:
.939b	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; are the signs the same
.939e	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.93a1	30 10		bmi $93b3			bmi 	_FADifferentSigns
.93a3	20 4d 84	jsr $844d			jsr 	AddTopTwoStack 				; do the add of the mantissae
.93a6	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.93a9	10 3c		bpl $93e7			bpl 	_FAExit 					; if no, we are done.
.93ab	20 c7 8c	jsr $8cc7			jsr 	NSMShiftRight 				; shift A right, renormalising it.
.93ae	fe 28 06	inc $0628,x			inc 	NSExponent,x 				; bump the exponent and exit
.93b1	80 34		bra $93e7			bra 	_FAExit
.93b3					_FADifferentSigns:
.93b3	20 73 84	jsr $8473			jsr 	SubTopTwoStack 				; subtract mantissa B from A
.93b6	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; is the result negative ?
.93b9	10 2c		bpl $93e7			bpl 	_FAExit 					; if no, we are done.
.93bb	20 50 8c	jsr $8c50			jsr 	NSMNegate 					; netate result
.93be	20 59 8c	jsr $8c59			jsr 	NSMNegateMantissa 			; negate (2'c) the mantissa
.93c1	80 24		bra $93e7			bra 	_FAExit
.93c3					_FAReturn1:
.93c3	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.93c6	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.93c9	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.93cc	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.93cf	bd 19 06	lda $0619,x			lda 	NSMantissa2+1,x
.93d2	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.93d5	bd 21 06	lda $0621,x			lda 	NSMantissa3+1,x
.93d8	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.93db	bd 29 06	lda $0629,x			lda 	NSExponent+1,x
.93de	9d 28 06	sta $0628,x			sta 	NSExponent,x
.93e1	bd 01 06	lda $0601,x			lda 	NSStatus+1,x
.93e4	9d 00 06	sta $0600,x			sta 	NSStatus,x
.93e7					_FAExit:
.93e7	7a		ply				ply
.93e8	68		pla				pla
.93e9	60		rts				rts
.93ea					_FAShiftToExponent:
.93ea					_FAShiftToExponent2:
.93ea	98		tya				tya 								; compare Y to exponent
.93eb	dd 28 06	cmp $0628,x			cmp 	NSExponent,x 				; reached the exponent required ?
.93ee	f0 08		beq $93f8			beq 	_FASEExit 					; exit if so.
.93f0	20 c7 8c	jsr $8cc7			jsr 	NSMShiftRight	 			; shift the mantissa right
.93f3	fe 28 06	inc $0628,x			inc 	NSExponent,x 				; increment exponent
.93f6	80 f2		bra $93ea			bra 	_FAShiftToExponent2
.93f8					_FASEExit:
.93f8	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/compare.asm

.93f9					CompareFloat:
.93f9	20 60 93	jsr $9360			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.93fc	bd 10 06	lda $0610,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.93ff	29 f8		and #$f8			and 	#$F8
.9401	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.9404	1d 20 06	ora $0620,x			ora 	NSMantissa3,x
.9407	f0 09		beq $9412			beq 	_FCExit 					; zero, so approximately identical
.9409	a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.940b	3c 00 06	bit $0600,x			bit 	NSStatus,x
.940e	10 02		bpl $9412			bpl 	_FCExit
.9410					_FCNegative:
.9410	a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.9412					_FCExit:
.9412	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/divide.asm

.9413					FDivideCommand:
.9413	fa		plx				plx	 								; restore stack position
.9414	20 f9 94	jsr $94f9			jsr 	FloatPrepare 				; prepare for floats
.9417					FloatDivide:
.9417	48		pha				pha
.9418	e8		inx				inx
.9419	20 0a 95	jsr $950a			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.941c	ca		dex				dex
.941d	c9 00		cmp #$00			cmp 	#0
.941f	f0 20		beq $9441			beq 	_FDZero
.9421	20 0a 95	jsr $950a			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.9424	f0 19		beq $943f			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.9426	20 54 92	jsr $9254			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.9429	20 e1 91	jsr $91e1			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.942c	20 0a 95	jsr $950a			jsr		NSNormalise 				; renormalise
.942f	20 ef 92	jsr $92ef			jsr 	CalculateSign 				; calculate result sign
.9432	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; calculate exponent
.9435	38		sec				sec
.9436	fd 29 06	sbc $0629,x			sbc 	NSExponent+1,x
.9439	38		sec				sec
.943a	e9 1e		sbc #$1e			sbc 	#30
.943c	9d 28 06	sta $0628,x			sta 	NSExponent,x
.943f					_FDExit:
.943f	68		pla				pla
.9440	60		rts				rts
.9441					_FDZero:
.9441	a9 03		lda #$03		lda	#3
.9443	4c 5f 82	jmp $825f		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/fractional.asm

.9446					FloatFractionalPart:
.9446	5a		phy				phy
.9447	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; take absolute value
.944a	29 7f		and #$7f			and 	#$7F
.944c	9d 00 06	sta $0600,x			sta 	NSStatus,x
.944f	20 0a 95	jsr $950a			jsr 	NSNormalise
.9452	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.9455	38		sec				sec
.9456	e9 e0		sbc #$e0			sbc 	#$E0
.9458	90 31		bcc $948b			bcc 	_FFPExit 					; already fractional
.945a	c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.945c	b0 2a		bcs $9488			bcs 	_FFPZero
.945e	a8		tay				tay 								; put count to do in Y
.945f	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; do each in turn.
.9462	20 8d 94	jsr $948d			jsr 	_FFPPartial
.9465	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.9468	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.946b	20 8d 94	jsr $948d			jsr 	_FFPPartial
.946e	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.9471	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.9474	20 8d 94	jsr $948d			jsr 	_FFPPartial
.9477	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.947a	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.947d	20 8d 94	jsr $948d			jsr 	_FFPPartial
.9480	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.9483	20 d4 8c	jsr $8cd4			jsr 	NSMIsZero 					; zeroed check.
.9486	d0 03		bne $948b			bne 	_FFPExit
.9488					_FFPZero:
.9488	20 a4 8c	jsr $8ca4			jsr 	NSMSetZero
.948b					_FFPExit:
.948b	7a		ply				ply
.948c	60		rts				rts
.948d					_FFPPartial:
.948d	c0 00		cpy #$00			cpy 	#0 							; no more to do
.948f	f0 17		beq $94a8			beq 	_FFFPPExit
.9491	c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.9493	b0 0c		bcs $94a1			bcs 	_FFFPPWholeByte
.9495	5a		phy				phy
.9496					_FFFPPLeft:
.9496	0a		asl a				asl 	a
.9497	88		dey				dey
.9498	d0 fc		bne $9496			bne 	_FFFPPLeft
.949a	7a		ply				ply
.949b					_FFFPPRight:
.949b	4a		lsr a				lsr 	a
.949c	88		dey				dey
.949d	d0 fc		bne $949b			bne 	_FFFPPRight
.949f	80 07		bra $94a8			bra 	_FFFPPExit
.94a1					_FFFPPWholeByte:
.94a1	98		tya				tya 								; subtract 8 from count
.94a2	38		sec				sec
.94a3	e9 08		sbc #$08			sbc 	#8
.94a5	a8		tay				tay
.94a6	a9 00		lda #$00			lda 	#0 							; and clear all
.94a8					_FFFPPExit:
.94a8	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/integer.asm

.94a9					FloatIntegerPart:
.94a9	48		pha				pha
.94aa	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; is it integer already ?
.94ad	f0 1f		beq $94ce			beq 	_FIPExit 					; if so do nothing
.94af	20 d4 8c	jsr $8cd4			jsr 	NSMIsZero 					; is it zero ?
.94b2	f0 17		beq $94cb			beq 	_FIPZero 					; if so return zero.
.94b4	20 0a 95	jsr $950a			jsr 	NSNormalise 				; normalise
.94b7	f0 12		beq $94cb			beq 	_FIPZero 					; normalised to zero, exit zero
.94b9					_FIPShift:
.94b9	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.94bc	10 08		bpl $94c6			bpl 	_FIPCheckZero
.94be	20 c7 8c	jsr $8cc7			jsr 	NSMShiftRight 				; shift mantissa right
.94c1	fe 28 06	inc $0628,x			inc 	NSExponent,x 				; bump exponent
.94c4	80 f3		bra $94b9			bra 	_FIPShift
.94c6					_FIPCheckZero:
.94c6	20 d4 8c	jsr $8cd4			jsr 	NSMIsZero 					; avoid -0 problem
.94c9	d0 03		bne $94ce			bne 	_FIPExit 					; set to zero if mantissa zero.
.94cb					_FIPZero:
.94cb	20 a4 8c	jsr $8ca4			jsr 	NSMSetZero
.94ce					_FIPExit:
.94ce	68		pla				pla
.94cf	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/multiply.asm

.94d0					FloatingPointMultiply:
.94d0	20 f9 94	jsr $94f9			jsr 	FloatPrepare 				; prepare for floats
.94d3					FloatMultiply:
.94d3	48		pha				pha
.94d4	20 0a 95	jsr $950a			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.94d7	f0 1b		beq $94f4			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.94d9	e8		inx				inx
.94da	20 0a 95	jsr $950a			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.94dd	ca		dex				dex
.94de	c9 00		cmp #$00			cmp 	#0
.94e0	f0 0f		beq $94f1			beq 	_FDSetZero
.94e2	20 aa 92	jsr $92aa			jsr 	MultiplyShort 				; calculate the result.
.94e5	7d 28 06	adc $0628,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.94e8	18		clc				clc
.94e9	7d 29 06	adc $0629,x			adc 	NSExponent+1,x
.94ec	9d 28 06	sta $0628,x			sta 	NSExponent,x
.94ef	80 03		bra $94f4			bra 	_FDExit
.94f1					_FDSetZero:
.94f1	20 a4 8c	jsr $8ca4			jsr 	NSMSetZero 					; return 0
.94f4					_FDExit:
.94f4	20 0a 95	jsr $950a			jsr 	NSNormalise 				; normalise the result
.94f7	68		pla				pla
.94f8	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/utility.asm

.94f9					FloatPrepare:
.94f9	20 0f 87	jsr $870f			jsr 	DereferenceTopTwo 			; dereference the top two values
.94fc	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check ints/floats
.94ff	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.9502	29 10		and #$10			and 	#NSBIsString
.9504	d0 01		bne $9507			bne 	_FDType
.9506	60		rts				rts
.9507					_FDType:
.9507	4c 64 96	jmp $9664			jmp 	TypeError
.950a					NSNormalise:
.950a	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; make float, keep sign
.950d	29 80		and #$80			and 	#$80
.950f	09 08		ora #$08			ora 	#NSTFloat
.9511	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9514	20 d4 8c	jsr $8cd4			jsr 	NSMIsZero 					; if zero exit
.9517	d0 09		bne $9522			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.9519	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; clear the sign bit.
.951c	7e 00 06	ror $0600,x			ror 	NSStatus,x 					; (no -0)
.951f	a9 00		lda #$00			lda 	#0 							; set Z flag
.9521	60		rts				rts
.9522					_NSNormaliseOptimise:
.9522	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; upper byte zero ?
.9525	d0 22		bne $9549			bne 	_NSNormaliseLoop
.9527	bd 18 06	lda $0618,x			lda 	NSMantissa2,x 				; byte normalise
.952a	30 1d		bmi $9549			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.952c	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.952f	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.9532	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.9535	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.9538	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.953b	9e 08 06	stz $0608,x			stz 	NSMantissa0,x
.953e	bd 28 06	lda $0628,x			lda 	NSExponent,x
.9541	38		sec				sec
.9542	e9 08		sbc #$08			sbc 	#8
.9544	9d 28 06	sta $0628,x			sta 	NSExponent,x
.9547	80 d9		bra $9522			bra 	_NSNormaliseOptimise
.9549					_NSNormaliseLoop:
.9549	3c 20 06	bit $0620,x			bit 	NSMantissa3,x 				; bit 30 set ?
.954c	70 08		bvs $9556			bvs 	_NSNExit 					; exit if so with Z flag clear
.954e	20 b9 8c	jsr $8cb9			jsr 	NSMShiftLeft 				; shift mantissa left
.9551	de 28 06	dec $0628,x			dec 	NSExponent,x 				; adjust exponent
.9554	80 f3		bra $9549			bra 	_NSNormaliseLoop
.9556					_NSNExit:
.9556	a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.9558	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignnumber.asm

.869e					AssignNumber:
.869e	5a		phy				phy
.869f	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy mantissa0/1 to zTemp0
.86a2	85 36		sta $36				sta 	zTemp0
.86a4	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.86a7	85 37		sta $37				sta 	zTemp0+1
.86a9	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; clear reference bits
.86ac	29 df		and #$df			and 	#(NSBIsReference ^ $FF)
.86ae	9d 00 06	sta $0600,x			sta 	NSStatus,x
.86b1	29 18		and #$18			and 	#NSBTypeMask				; assigning to a float ?
.86b3	c9 08		cmp #$08			cmp 	#NSTFloat
.86b5	f0 2a		beq $86e1			beq 	_ANFloat
.86b7	bd 29 06	lda $0629,x			lda		NSExponent+1,x 				; is it a float
.86ba	f0 05		beq $86c1			beq		_ANNotFloat
.86bc	e8		inx				inx
.86bd	20 a9 94	jsr $94a9			jsr 	FloatIntegerPart 			; make it an integer
.86c0	ca		dex				dex
.86c1					_ANNotFloat:
.86c1	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if byte/word reference.
.86c4	29 03		and #$03			and 	#3
.86c6	d0 05		bne $86cd			bne 	_ANByteWord
.86c8	20 ed 86	jsr $86ed			jsr 	_ANCopy4PackSign 			; copy all 4 bytes and sign
.86cb	80 1e		bra $86eb			bra 	_ANExit
.86cd					_ANByteWord:
.86cd	48		pha				pha 								; save count
.86ce	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; do byte
.86d1	92 36		sta ($36)			sta 	(zTemp0)
.86d3	68		pla				pla
.86d4	c9 01		cmp #$01			cmp	 	#1
.86d6	f0 13		beq $86eb			beq 	_ANExit
.86d8	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x 			; do word
.86db	a0 01		ldy #$01			ldy 	#1
.86dd	91 36		sta ($36),y			sta 	(zTemp0),y
.86df	80 0a		bra $86eb			bra 	_ANExit
.86e1					_ANFloat:
.86e1	20 ed 86	jsr $86ed			jsr 	_ANCopy4PackSign 			; write all 4 bytes and packed sign
.86e4	bd 29 06	lda $0629,x			lda 	NSExponent+1,x 				; copy exponent to slot 4
.86e7	a0 04		ldy #$04			ldy 	#4
.86e9	91 36		sta ($36),y			sta 	(zTemp0),y
.86eb					_ANExit:
.86eb	7a		ply				ply
.86ec	60		rts				rts
.86ed					_ANCopy4PackSign:
.86ed	a0 03		ldy #$03			ldy 	#3
.86ef	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; sign bit into status
.86f2	29 80		and #$80			and 	#$80 						; put into high bit of mantissa 3
.86f4	1d 21 06	ora $0621,x			ora 	NSMantissa3+1,x
.86f7	91 36		sta ($36),y			sta 	(zTemp0),y
.86f9	88		dey				dey
.86fa	bd 19 06	lda $0619,x			lda 	NSMantissa2+1,x
.86fd	91 36		sta ($36),y			sta 	(zTemp0),y
.86ff	88		dey				dey
.8700	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.8703	91 36		sta ($36),y			sta 	(zTemp0),y
.8705	88		dey				dey
.8706	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.8709	91 36		sta ($36),y			sta 	(zTemp0),y
.870b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignstring.asm

.870c					AssignString:
>870c	db						.byte 	$DB 						; causes a break in the emulator
.870d	80 fd		bra $870c			bra 	AssignString

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/dereference.asm

.870f					DereferenceTopTwo:
.870f	e8		inx				inx
.8710	20 14 87	jsr $8714			jsr 	Dereference 				; deref x+1
.8713	ca		dex				dex  								; falls through to deref x
.8714					Dereference:
.8714	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get the status byte
.8717	29 20		and #$20			and 	#NSBIsReference 			; shift sign bit to carry, reference to bit 7
.8719	f0 57		beq $8772			beq 	_DRFExit 					; not a reference
.871b	5a		phy				phy
.871c	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy address to dereference into zTemp0
.871f	85 36		sta $36				sta 	zTemp0
.8721	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8724	85 37		sta $37				sta 	zTemp0+1
.8726	9e 10 06	stz $0610,x			stz 	NSMantissa1,x 				; clear second byte.
.8729	b2 36		lda ($36)			lda 	(zTemp0) 					; do the first byte
.872b	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.872e	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get status byte.
.8731	29 18		and #$18			and 	#NSBTypeMask 				; what type is it ?
.8733	c9 10		cmp #$10			cmp 	#NSTString 					; if string, dereference two
.8735	f0 0f		beq $8746			beq 	_DRFDereferenceTwo
.8737	c9 08		cmp #$08			cmp 	#NSTFloat 					; if float, do full dereference.
.8739	f0 39		beq $8774			beq 	_DRFFull
.873b	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be integer - how many bytes ?
.873e	29 03		and #$03			and 	#3
.8740	f0 32		beq $8774			beq 	_DRFFull 					; the whole word
.8742	c9 01		cmp #$01			cmp 	#1 							; is it 10 (e.g. 2 bytes)
.8744	f0 07		beq $874d			beq		_DRFClear23 				; no, one byte, clear 2 & 3 and exit
.8746					_DRFDereferenceTwo:
.8746	a0 01		ldy #$01			ldy 	#1
.8748	b1 36		lda ($36),y			lda 	(zTemp0),y
.874a	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.874d					_DRFClear23:
.874d	9e 18 06	stz $0618,x			stz 	NSMantissa2,x 				; clear upper bytes, only read 1 or 2 bytes
.8750	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.8753	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; make it a value of that type.
.8756	29 18		and #$18			and 	#NSBTypeMask
.8758	9d 00 06	sta $0600,x			sta 	NSStatus,x
.875b	c9 10		cmp #$10			cmp 	#NSTString  				; is it a string
.875d	d0 12		bne $8771			bne 	_DRFNotString
.875f	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; check address is zero
.8762	1d 10 06	ora $0610,x			ora 	NSMantissa1,x
.8765	d0 0a		bne $8771			bne 	_DRFNotString
.8767	a9 73		lda #$73			lda 	#_DRFNullString & $FF 		; if so, return reference to ""
.8769	9d 08 06	sta $0608,x			sta 	NSMantissa0,X
.876c	a9 87		lda #$87			lda 	#_DRFNullString >> 8
.876e	9d 10 06	sta $0610,x			sta 	NSMantissa1,X
.8771					_DRFNotString
.8771	7a		ply				ply 								; restore Y and exit
.8772					_DRFExit:
.8772	60		rts				rts
.8773					_DRFNullString:
>8773	00						.byte 	0
.8774					_DRFFull:
.8774	a0 01		ldy #$01			ldy 	#1 							; get remaining 3 bytes.
.8776	b1 36		lda ($36),y			lda 	(zTemp0),y
.8778	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.877b	c8		iny				iny
.877c	b1 36		lda ($36),y			lda 	(zTemp0),y
.877e	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8781	c8		iny				iny
.8782	b1 36		lda ($36),y			lda 	(zTemp0),y
.8784	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8787	9e 28 06	stz $0628,x			stz 	NSExponent,x 				; clear exponent.
.878a	bd 00 06	lda $0600,x			lda		NSStatus,x 					; see if type is integer
.878d	29 18		and #$18			and 	#NSBTypeMask  				; type information only
.878f	9d 00 06	sta $0600,x			sta 	NSStatus,x 					; update it back.
.8792	f0 06		beq $879a			beq 	_DRFNoExponent
.8794	c8		iny				iny 								; if not, read the exponent as well.
.8795	b1 36		lda ($36),y			lda 	(zTemp0),y
.8797	9d 28 06	sta $0628,x			sta 	NSExponent,x
.879a					_DRFNoExponent:
.879a	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; is the most significant bit set ?
.879d	10 0d		bpl $87ac			bpl 	_DRFExit2 					; if not, then exit.
.879f	29 7f		and #$7f			and 	#$7F 						; clear that bit.
.87a1	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.87a4	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; set the sign flag
.87a7	09 80		ora #$80			ora 	#NSBIsNegative
.87a9	9d 00 06	sta $0600,x			sta 	NSStatus,x
.87ac					_DRFExit2:
.87ac	7a		ply				ply
.87ad	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/number.asm

=1					ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2					ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3					ESTA_Decimal = 3 							; fractional part.
.87ae					EncodeNumberStart:
.87ae	38		sec				sec
.87af	80 01		bra $87b2			bra 	EncodeNumberContinue+1
.87b1					EncodeNumberContinue:
.87b1	18		clc				clc
.87b2					EncodeNumber:
.87b2	08		php				php 								; save reset.
.87b3	c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.87b5	f0 12		beq $87c9			beq 	_ENIsOkay
.87b7	c9 30		cmp #$30			cmp 	#"0"
.87b9	90 04		bcc $87bf			bcc 	_ENBadNumber
.87bb	c9 3a		cmp #$3a			cmp 	#"9"+1
.87bd	90 0a		bcc $87c9			bcc 	_ENIsOkay
.87bf					_ENBadNumber:
.87bf	28		plp				plp 								; throw saved reset
.87c0	ad 05 07	lda $0705			lda 	EncodeState 				; decimal mode, construct final number
.87c3	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.87c5	f0 7e		beq $8845			beq 	_ENConstructFinal
.87c7					_ENFail:
.87c7	18		clc				clc 								; not allowed
.87c8	60		rts				rts
.87c9					_ENIsOkay:
.87c9	28		plp				plp 								; are we restarting
.87ca	90 15		bcc $87e1			bcc 	_ENNoRestart
.87cc					_ENStartEncode:
.87cc	c9 2e		cmp #$2e			cmp 	#'.'						; first is DP
.87ce	f0 0c		beq $87dc			beq 	_ENFirstDP
.87d0	29 0f		and #$0f			and 	#15 						; put digit in mantissa
.87d2	20 a6 8c	jsr $8ca6			jsr 	NSMSetByte
.87d5	a9 01		lda #$01			lda 	#ESTA_Low
.87d7					_ENExitChange:
.87d7	8d 05 07	sta $0705			sta 	EncodeState 				; save new state
.87da	38		sec				sec
.87db	60		rts				rts
.87dc					_ENFirstDP:
.87dc	20 a4 8c	jsr $8ca4			jsr 	NSMSetZero 					; clear integer part
.87df	80 3f		bra $8820			bra 	_ESTASwitchFloat			; go straight to float and exi
.87e1					_ENNoRestart:
.87e1	48		pha				pha 								; save on stack.
.87e2	ad 05 07	lda $0705			lda 	EncodeState 				; get current state
.87e5	c9 01		cmp #$01			cmp 	#ESTA_Low
.87e7	f0 09		beq $87f2			beq  	_ESTALowState
.87e9	c9 02		cmp #$02			cmp 	#ESTA_High
.87eb	f0 29		beq $8816			beq 	_ESTAHighState
.87ed	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.87ef	f0 3b		beq $882c			beq 	_ESTADecimalState
>87f1	db						.byte 	$DB 						; causes a break in the emulator
.87f2					_ESTALowState:
.87f2	68		pla				pla 								; get value back
.87f3	c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.87f5	f0 29		beq $8820			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.87f7	29 0f		and #$0f			and 	#15 						; make digit
.87f9	8d 06 07	sta $0706			sta 	DigitTemp 					; save it.
.87fc	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.87ff	0a		asl a				asl 	a
.8800	0a		asl a				asl 	a
.8801	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.8804	0a		asl a				asl 	a
.8805	6d 06 07	adc $0706			adc 	DigitTemp
.8808	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.880b	c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.880d	90 05		bcc $8814			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.880f	a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.8811	8d 05 07	sta $0705			sta 	EncodeState
.8814					_ESTANoSwitch:
.8814	38		sec				sec
.8815	60		rts				rts
.8816					_ESTAHighState:
.8816	68		pla				pla 								; get value back
.8817	c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.8819	f0 05		beq $8820			beq 	_ESTASwitchFloat
.881b	20 7f 88	jsr $887f			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.881e	38		sec				sec
.881f	60		rts				rts
.8820					_ESTASwitchFloat:
.8820	9c 07 07	stz $0707			stz 	DecimalCount
.8823	e8		inx				inx 								; zero the decimal additive.
.8824	20 a4 8c	jsr $8ca4			jsr 	NSMSetZero
.8827	ca		dex				dex
.8828	a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.882a	80 ab		bra $87d7			bra 	_ENExitChange
.882c					_ESTADecimalState:
.882c	68		pla				pla 								; digit.
.882d	c9 2e		cmp #$2e			cmp 	#"." 						; fail on 2nd decimal point.
.882f	f0 96		beq $87c7			beq 	_ENFail
.8831	e8		inx				inx 								; put digit into fractional part of X+1
.8832	20 7f 88	jsr $887f			jsr 	ESTAShiftDigitIntoMantissa
.8835	ca		dex				dex
.8836	ee 07 07	inc $0707			inc 	DecimalCount 				; bump the count of decimals
.8839	ad 07 07	lda $0707			lda 	DecimalCount
.883c	c9 0b		cmp #$0b			cmp 	#11
.883e	f0 02		beq $8842			beq 	_ESTADSFail
.8840	38		sec				sec
.8841	60		rts				rts
.8842					_ESTADSFail:
.8842	4c 5f 96	jmp $965f			jmp 	RangeError
.8845					_ENConstructFinal:
.8845	ad 07 07	lda $0707			lda 	DecimalCount 				; get decimal count
.8848	f0 33		beq $887d			beq 	_ENCFExit 					; no decimals
.884a	5a		phy				phy
.884b	0a		asl a				asl 	a 							; x 4 and CLC
.884c	0a		asl a				asl 	a
.884d	6d 07 07	adc $0707			adc 	DecimalCount
.8850	a8		tay				tay
.8851	b9 1e 96	lda $961e,y			lda 	DecimalScalarTable-5,y 		; copy decimal scalar to X+2
.8854	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.8857	b9 1f 96	lda $961f,y			lda 	DecimalScalarTable-5+1,y
.885a	9d 12 06	sta $0612,x			sta 	NSMantissa1+2,x
.885d	b9 20 96	lda $9620,y			lda 	DecimalScalarTable-5+2,y
.8860	9d 1a 06	sta $061a,x			sta 	NSMantissa2+2,x
.8863	b9 21 96	lda $9621,y			lda 	DecimalScalarTable-5+3,y
.8866	9d 22 06	sta $0622,x			sta 	NSMantissa3+2,x
.8869	b9 22 96	lda $9622,y			lda 	DecimalScalarTable-5+4,y
.886c	9d 2a 06	sta $062a,x			sta 	NSExponent+2,x
.886f	a9 08		lda #$08			lda 	#NSTFloat
.8871	9d 02 06	sta $0602,x			sta 	NSStatus+2,x
.8874	7a		ply				ply
.8875	e8		inx				inx 								; multiply decimal const by decimal scalar
.8876	20 d3 94	jsr $94d3			jsr 	FloatMultiply
.8879	ca		dex				dex
.887a	20 68 93	jsr $9368			jsr 	FloatAdd 					; add to integer part.
.887d					_ENCFExit:
.887d	18		clc				clc 								; reject the digit.
.887e	60		rts				rts
.887f					ESTAShiftDigitIntoMantissa:
.887f	29 0f		and #$0f			and 	#15 						; save digit
.8881	48		pha				pha
.8882	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; push mantissa on stack
.8885	48		pha				pha
.8886	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.8889	48		pha				pha
.888a	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.888d	48		pha				pha
.888e	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.8891	48		pha				pha
.8892	20 b9 8c	jsr $8cb9			jsr 	NSMShiftLeft 				; x 2
.8895	20 b9 8c	jsr $8cb9			jsr 	NSMShiftLeft 				; x 4
.8898	18		clc				clc 								; pop mantissa and add
.8899	68		pla				pla
.889a	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.889d	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.88a0	68		pla				pla
.88a1	7d 10 06	adc $0610,x			adc 	NSMantissa1,x
.88a4	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.88a7	68		pla				pla
.88a8	7d 18 06	adc $0618,x			adc 	NSMantissa2,x
.88ab	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.88ae	68		pla				pla
.88af	7d 20 06	adc $0620,x			adc 	NSMantissa3,x
.88b2	9d 20 06	sta $0620,x			sta 	NSMantissa3,x 				; x 5
.88b5	20 b9 8c	jsr $8cb9			jsr 	NSMShiftLeft 				; x 10
.88b8	68		pla				pla 								; add digit
.88b9	18		clc				clc
.88ba	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.88bd	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.88c0	90 0d		bcc $88cf			bcc 	_ESTASDExit
.88c2	fe 10 06	inc $0610,x			inc 	NSMantissa1,x
.88c5	d0 08		bne $88cf			bne 	_ESTASDExit
.88c7	fe 18 06	inc $0618,x			inc 	NSMantissa2,x
.88ca	d0 03		bne $88cf			bne 	_ESTASDExit
.88cc	fe 20 06	inc $0620,x			inc 	NSMantissa3,x
.88cf					_ESTASDExit:
.88cf	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/term.asm

.88d0					EvaluateTerm:
.88d0	b1 30		lda ($30),y			lda 	(codePtr),y
.88d2	30 18		bmi $88ec			bmi 	_ETCheckUnary 				; unary function ? (text ones)
.88d4	c9 40		cmp #$40			cmp 	#$40 						; 40-7F => identifier reference
.88d6	b0 6f		bcs $8947			bcs 	_ETVariable
.88d8	c9 30		cmp #$30			cmp 	#'0' 						; is it a number
.88da	90 6e		bcc $894a			bcc 	_ETPuncUnary 				; if not it might be a punctuation unary.
.88dc	c9 3a		cmp #$3a			cmp 	#'9'+1
.88de	b0 6a		bcs $894a			bcs 	_ETPuncUnary
.88e0	20 ae 87	jsr $87ae			jsr 	EncodeNumberStart 			; can't fail as it's 0-9 !
.88e3					_ETNumber:
.88e3	c8		iny				iny 								; keep encoding until we have the numbers
.88e4	b1 30		lda ($30),y			lda 	(codePtr),y
.88e6	20 b1 87	jsr $87b1			jsr 	EncodeNumberContinue
.88e9	b0 f8		bcs $88e3			bcs 	_ETNumber 					; go back if accepted.
.88eb	60		rts				rts
.88ec					_ETCheckUnary:
.88ec	c9 ff		cmp #$ff			cmp 	#KWC_STRING 				; string token
.88ee	f0 41		beq $8931			beq 	_ETString
.88f0	c9 fe		cmp #$fe			cmp 	#KWC_HEXCONST 				; hex constant.
.88f2	f0 12		beq $8906			beq 	_ETHexConstant
.88f4	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; check it actually is a unary function
.88f6	90 0b		bcc $8903			bcc 	_ETSyntaxError
.88f8	c9 96		cmp #$96			cmp 	#KWC_LAST_UNARY+1
.88fa	b0 07		bcs $8903			bcs 	_ETSyntaxError
.88fc	da		phx				phx 								; push X on the stack
.88fd	0a		asl a				asl 	a 							; put vector x 2 into X
.88fe	aa		tax				tax
.88ff	c8		iny				iny 								; consume unary function token
.8900	7c 94 80	jmp ($8094,x)			jmp 	(VectorSet0,x) 				; and do it.
.8903					_ETSyntaxError:
.8903	4c 5a 96	jmp $965a			jmp 	SyntaxError
.8906					_ETHexConstant:
.8906	c8		iny				iny 								; skip #
.8907	c8		iny				iny 								; skip count
.8908	20 a4 8c	jsr $8ca4			jsr 	NSMSetZero 					; clear result
.890b					_ETHLoop:
.890b	b1 30		lda ($30),y			lda 	(codePtr),y
.890d	c8		iny				iny 								; and consume
.890e	c9 00		cmp #$00			cmp 	#0 							; exit if zero
.8910	f0 1e		beq $8930			beq 	_ETHExit
.8912	48		pha				pha 								; save on stack.
.8913	20 b9 8c	jsr $8cb9			jsr 	NSMShiftLeft 				; x 2
.8916	20 b9 8c	jsr $8cb9			jsr 	NSMShiftLeft 				; x 4
.8919	20 b9 8c	jsr $8cb9			jsr 	NSMShiftLeft 				; x 8
.891c	20 b9 8c	jsr $8cb9			jsr 	NSMShiftLeft 				; x 16
.891f	68		pla				pla 								; ASCII
.8920	c9 41		cmp #$41			cmp 	#'A'
.8922	90 02		bcc $8926			bcc 	_ETHNotChar
.8924	e9 07		sbc #$07			sbc 	#7
.8926					_ETHNotChar:
.8926	29 0f		and #$0f			and 	#15 						; digit now
.8928	1d 08 06	ora $0608,x			ora 	NSMantissa0,x 				; put in LS Nibble
.892b	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.892e	80 db		bra $890b			bra 	_ETHLoop 					; go round.
.8930					_ETHExit:
.8930	60		rts				rts
.8931					_ETString:
.8931	c8		iny				iny 								; look at length
.8932	b1 30		lda ($30),y			lda 	(codePtr),y
.8934	48		pha				pha
.8935	c8		iny				iny 								; first character
.8936	20 8a 91	jsr $918a			jsr 	MemoryInline 				; put address of string at (codePtr),y on stack
.8939	68		pla				pla 								; restore count and save
.893a	85 36		sta $36				sta 	zTemp0
.893c	98		tya				tya 								; add length to Y to skip it.
.893d	18		clc				clc
.893e	65 36		adc $36				adc 	zTemp0
.8940	a8		tay				tay
.8941	a9 10		lda #$10			lda 	#NSTString 					; mark as string
.8943	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8946	60		rts				rts
.8947					_ETVariable:
.8947	4c a1 89	jmp $89a1			jmp 	VariableHandler
.894a					_ETPuncUnary:
.894a	c8		iny				iny 								; consume the unary character
.894b	c9 2d		cmp #$2d			cmp 	#KWD_MINUS 					; unary minus
.894d	f0 2d		beq $897c			beq 	_ETUnaryNegate
.894f	c9 10		cmp #$10			cmp 	#KWD_AT 					; @ reference -> constant
.8951	f0 39		beq $898c			beq 	_ETDereference
.8953	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; parenthesis
.8955	f0 43		beq $899a			beq 	_ETParenthesis
.8957	64 36		stz $36				stz 	zTemp0 						; zTemp0 is the indirection level.
.8959	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; byte indirection (0) ?
.895b	f0 06		beq $8963			beq 	_ETIndirection
.895d	e6 36		inc $36				inc 	zTemp0
.895f	c9 21		cmp #$21			cmp 	#KWD_PLING					; word indirection (1) \
.8961	d0 a0		bne $8903			bne 	_ETSyntaxError
.8963					_ETIndirection:
.8963	a5 36		lda $36				lda 	zTemp0 						; push indirection amount (0-1) => (1-2) on the stack
.8965	1a		inc a				inc 	a
.8966	48		pha				pha
.8967	20 d0 88	jsr $88d0			jsr 	EvaluateTerm				; evaluate the term
.896a	20 14 87	jsr $8714			jsr 	Dereference 				; dereference it.
.896d	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a +ve integer.
.8970	d0 07		bne $8979			bne 	_ETTypeMismatch
.8972	68		pla				pla 								; indirection 1-2
.8973	09 20		ora #$20			ora 	#NSBIsReference 			; make it a reference.
.8975	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8978	60		rts				rts
.8979					_ETTypeMismatch:
.8979	4c 64 96	jmp $9664			jmp 	TypeError
.897c					_ETUnaryNegate:
.897c	20 d0 88	jsr $88d0			jsr 	EvaluateTerm				; evaluate the term
.897f	20 14 87	jsr $8714			jsr 	Dereference 				; dereference it.
.8982	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a number
.8985	29 10		and #$10			and 	#NSTString
.8987	d0 f0		bne $8979			bne 	_ETTypeMismatch
.8989	4c 50 8c	jmp $8c50			jmp 	NSMNegate  					; just toggles the sign bit.
.898c					_ETDereference:
.898c	20 d0 88	jsr $88d0			jsr 	EvaluateTerm				; evaluate the term
.898f	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a reference
.8992	29 20		and #$20			and 	#NSBIsReference
.8994	f0 e3		beq $8979			beq 	_ETTypeMismatch
.8996	9e 00 06	stz $0600,x			stz 	NSStatus,x 					; make it an integer address
.8999	60		rts				rts
.899a					_ETParenthesis:
.899a	20 61 86	jsr $8661			jsr 	EvaluateExpression 			; evaluate here, from lowest precedence
.899d	20 a1 91	jsr $91a1			jsr 	CheckRightBracket 			; check for )
.89a0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/variable.asm

.89a1					VariableHandler:
.89a1	b1 30		lda ($30),y			lda 	(codePtr),y
.89a3	18		clc				clc
.89a4	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.89a6	85 37		sta $37				sta 	zTemp0+1
.89a8	c8		iny				iny
.89a9	b1 30		lda ($30),y			lda 	(codePtr),y
.89ab	85 36		sta $36				sta 	zTemp0
.89ad	c8		iny				iny
.89ae	18		clc				clc									; copy variable address+3 to mantissa
.89af	69 03		adc #$03			adc 	#3
.89b1	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.89b4	a5 37		lda $37				lda 	zTemp0+1
.89b6	69 00		adc #$00			adc 	#0
.89b8	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.89bb	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.89be	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.89c1	9e 28 06	stz $0628,x			stz 	NSExponent,x
.89c4	5a		phy				phy
.89c5	a0 02		ldy #$02			ldy 	#2 							; read type
.89c7	b1 36		lda ($36),y			lda 	(zTemp0),y
.89c9	7a		ply				ply
.89ca	29 1c		and #$1c			and 	#NSBTypeMask+NSBIsArray 	; get type information
.89cc	09 20		ora #$20			ora 	#NSBIsReference 			; make a reference.
.89ce	9d 00 06	sta $0600,x			sta 	NSStatus,x
.89d1	29 04		and #$04			and 	#NSBIsArray
.89d3	d0 01		bne $89d6			bne 	_VHArray
.89d5	60		rts				rts
.89d6					_VHArray:
>89d6	db						.byte 	$DB 						; causes a break in the emulator
.89d7	80 fd		bra $89d6			bra 	_VHArray

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/abs.asm

.9559					AbsUnary:
.9559	fa		plx				plx 								; restore stack pos
.955a	20 f8 8b	jsr $8bf8			jsr 	EvaluateNumber 				; get a float or int
.955d	20 a1 91	jsr $91a1			jsr 	CheckRightBracket
.9560	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; clear the sign bit
.9563	29 7f		and #$7f			and 	#$7F
.9565	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9568	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/alloc.asm

.89d9					AllocUnary:
.89d9	fa		plx				plx 								; restore stack pos
.89da	20 30 8c	jsr $8c30			jsr 	Evaluate16BitInteger		; get bytes required.
.89dd	20 a1 91	jsr $91a1			jsr 	CheckRightBracket
.89e0	da		phx				phx 								; save X/Y
.89e1	5a		phy				phy
.89e2	8a		txa				txa 								; copy X into Y
.89e3	a8		tay				tay
.89e4	b9 10 06	lda $0610,y			lda		NSMantissa1,y 				; get size
.89e7	aa		tax				tax
.89e8	b9 08 06	lda $0608,y			lda 	NSMantissa0,y
.89eb	20 f8 89	jsr $89f8			jsr 	AllocateXABytes 			; allocate memory
.89ee	99 08 06	sta $0608,y			sta 	NSMantissa0,y 				; write address out.
.89f1	8a		txa				txa
.89f2	99 10 06	sta $0610,y			sta 	NSMantissa1,y
.89f5	7a		ply				ply
.89f6	fa		plx				plx
.89f7	60		rts				rts
.89f8					AllocateXABytes:
.89f8	5a		phy				phy
.89f9	ac 0c 07	ldy $070c			ldy 	lowMemPtr 					; push current address on stack
.89fc	5a		phy				phy
.89fd	ac 0d 07	ldy $070d			ldy 	lowMemPtr+1
.8a00	5a		phy				phy
.8a01	18		clc				clc
.8a02	6d 0c 07	adc $070c			adc 	lowMemPtr
.8a05	8d 0c 07	sta $070c			sta 	lowMemPtr
.8a08	8a		txa				txa
.8a09	6d 0d 07	adc $070d			adc 	lowMemPtr+1
.8a0c	8d 0d 07	sta $070d			sta 	lowMemPtr+1
.8a0f	fa		plx				plx
.8a10	68		pla				pla
.8a11	7a		ply				ply
.8a12	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/asc.asm

.9569					AscUnary:
.9569	fa		plx				plx 								; restore stack pos
.956a	20 03 8c	jsr $8c03			jsr 	EvaluateString 				; get a string
.956d	b2 36		lda ($36)			lda 	(zTemp0)					; get/return firs character
.956f	20 a6 8c	jsr $8ca6			jsr 	NSMSetByte
.9572	20 a1 91	jsr $91a1			jsr 	CheckRightBracket
.9575	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/frac.asm

.9576					FracUnary:
.9576	fa		plx				plx 								; restore stack pos
.9577	20 f8 8b	jsr $8bf8			jsr 	EvaluateNumber 				; get a float or int
.957a	20 a1 91	jsr $91a1			jsr 	CheckRightBracket
.957d	bd 00 06	lda $0600,x			lda 	NSStatus,x
.9580	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.9582	f0 04		beq $9588			beq 	_IUZero
.9584	20 46 94	jsr $9446			jsr 	FloatFractionalPart
.9587	60		rts				rts
.9588					_IUZero:
.9588	20 a4 8c	jsr $8ca4			jsr 	NSMSetZero
.958b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/int.asm

.958c					IntUnary:
.958c	fa		plx				plx 								; restore stack pos
.958d	20 f8 8b	jsr $8bf8			jsr 	EvaluateNumber 				; get a float or int
.9590	20 a1 91	jsr $91a1			jsr 	CheckRightBracket
.9593	bd 00 06	lda $0600,x			lda 	NSStatus,x
.9596	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.9598	f0 03		beq $959d			beq 	_IUExit
.959a	20 a9 94	jsr $94a9			jsr 	FloatIntegerPart
.959d					_IUExit:
.959d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/len.asm

.959e					LenUnary:
.959e	fa		plx				plx 								; restore stack pos
.959f	20 03 8c	jsr $8c03			jsr 	EvaluateString 				; get a string
.95a2	5a		phy				phy
.95a3	a0 00		ldy #$00			ldy 	#0 							; find length
.95a5					_LenFind:
.95a5	b1 36		lda ($36),y			lda 	(zTemp0),y
.95a7	f0 06		beq $95af			beq 	_LenExit
.95a9	c8		iny				iny
.95aa	d0 f9		bne $95a5			bne 	_LenFind
.95ac	4c 5f 96	jmp $965f			jmp 	RangeError 					; string > 255
.95af					_LenExit:
.95af	98		tya				tya
.95b0	20 a6 8c	jsr $8ca6			jsr 	NSMSetByte
.95b3	7a		ply				ply
.95b4	20 a1 91	jsr $91a1			jsr 	CheckRightBracket
.95b7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/not.asm

.8a13					Unary_Not:
.8a13	fa		plx				plx
.8a14	20 1b 8c	jsr $8c1b			jsr 	EvaluateInteger 			; get integer
.8a17	20 a1 91	jsr $91a1			jsr 	CheckRightBracket
.8a1a	20 d4 8c	jsr $8cd4			jsr 	NSMIsZero 					; zero mantissa ?
.8a1d	f0 04		beq $8a23			beq 	_NotZero
.8a1f	20 a4 8c	jsr $8ca4			jsr 	NSMSetZero
.8a22	60		rts				rts
.8a23					_NotZero:
.8a23	4c c5 82	jmp $82c5			jmp 	ReturnTrue
.8a26					_UNBad:
.8a26	4c 69 96	jmp $9669			jmp 	ArgumentError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/rnd.asm

.8a29					Unary_Rnd:
.8a29	20 f8 8b	jsr $8bf8			jsr 	EvaluateNumber 				; number to use.
.8a2c	20 a1 91	jsr $91a1			jsr 	CheckRightBracket 			; closing bracket
.8a2f	20 58 8a	jsr $8a58			jsr 	Random32Bit 				; generate a number.
.8a32	ad 08 07	lda $0708			lda 	RandomSeed+0
.8a35	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8a38	ad 09 07	lda $0709			lda 	RandomSeed+1
.8a3b	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8a3e	ad 0a 07	lda $070a			lda 	RandomSeed+2
.8a41	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8a44	ad 0b 07	lda $070b			lda 	RandomSeed+3
.8a47	29 7f		and #$7f			and 	#$7F 						; make legal mantissa
.8a49	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8a4c	a9 e1		lda #$e1			lda 	#-31 						; force into 0-1 range
.8a4e	8d 28 06	sta $0628			sta 	NSExponent
.8a51	a9 08		lda #$08			lda 	#NSTFloat
.8a53	8d 00 06	sta $0600			sta 	NSStatus 					; positive.
>8a56	db						.byte 	$DB 						; causes a break in the emulator
.8a57	60		rts				rts
.8a58					Random32Bit:
.8a58	5a		phy				phy
.8a59	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.8a5b	ad 08 07	lda $0708			lda 	RandomSeed+0 				; check the seed isn't zero
.8a5e	d0 03		bne $8a63			bne 	_Random1
.8a60	a8		tay				tay 								; if so do it 256 times
.8a61	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.8a63					_Random1:
.8a63	0a		asl a				asl 	a 							; LSFR RNG
.8a64	2e 09 07	rol $0709			rol 	RandomSeed+1
.8a67	2e 0a 07	rol $070a			rol 	RandomSeed+2
.8a6a	2e 0b 07	rol $070b			rol 	RandomSeed+3
.8a6d	90 02		bcc $8a71			bcc 	_Random2
.8a6f	49 c5		eor #$c5			eor 	#$C5
.8a71					_Random2:
.8a71	88		dey				dey
.8a72	d0 ef		bne $8a63			bne 	_Random1
.8a74	7a		ply				ply
.8a75	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/sgn.asm

.95b8					SgnUnary:
.95b8	fa		plx				plx 								; restore stack pos
.95b9	20 f8 8b	jsr $8bf8			jsr 	EvaluateNumber 				; get a float or int
.95bc	20 a1 91	jsr $91a1			jsr 	CheckRightBracket
.95bf	20 d4 8c	jsr $8cd4			jsr 	NSMIsZero 					; if zero
.95c2	f0 10		beq $95d4			beq 	_SGZero  					; return Int Zero
.95c4	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get status w/sign
.95c7	48		pha				pha
.95c8	a9 01		lda #$01			lda 	#1 							; set to 1
.95ca	20 a6 8c	jsr $8ca6			jsr 	NSMSetByte
.95cd	68		pla				pla
.95ce	29 80		and #$80			and		#$80 						; copy the sign byte out
.95d0	9d 00 06	sta $0600,x			sta 	NSStatus,x
.95d3	60		rts				rts
.95d4	20 a4 8c	jsr $8ca4	_SGZero:jsr 	NSMSetZero
.95d7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/val.asm

.95d8					ValUnary:
.95d8	fa		plx				plx 								; restore stack pos
.95d9	20 ee 95	jsr $95ee			jsr 	ValMainCode 				; do the main val() code
.95dc	b0 01		bcs $95df			bcs 	_VUError 					; couldn't convert
.95de	60		rts				rts
.95df					_VUError:
.95df	4c 64 96	jmp $9664			jmp 	TypeError
.95e2					IsValUnary:
.95e2	fa		plx				plx 								; restore stack pos
.95e3	20 ee 95	jsr $95ee			jsr 	ValMainCode 				; do the main val() code
.95e6	b0 03		bcs $95eb			bcs 	_VUBad
.95e8	4c c5 82	jmp $82c5			jmp 	ReturnTrue
.95eb					_VUBad:
.95eb	4c d1 82	jmp $82d1			jmp 	ReturnFalse
.95ee					ValMainCode:
.95ee	20 03 8c	jsr $8c03			jsr 	EvaluateString 				; get a string
.95f1	20 a1 91	jsr $91a1			jsr 	CheckRightBracket 			; check right bracket present
.95f4	5a		phy				phy
.95f5	b2 36		lda ($36)			lda 	(zTemp0) 					; check not empty string
.95f7	f0 17		beq $9610			beq 	_VMCFail2
.95f9	a0 ff		ldy #$ff			ldy 	#$FF 						; start position
.95fb	48		pha				pha 								; save first character
.95fc	c9 2d		cmp #$2d			cmp 	#"-"		 				; is it -
.95fe	d0 01		bne $9601			bne 	_VMCStart
.9600	c8		iny				iny 								; skip over -
.9601					_VMCStart:
.9601	38		sec				sec 								; initialise first time round.
.9602					_VMCNext:
.9602	c8		iny				iny 								; pre-increment
.9603	b1 36		lda ($36),y			lda 	(zTemp0),y 					; next character
.9605	f0 0c		beq $9613			beq 	_VMCSuccess 				; successful.
.9607	20 b2 87	jsr $87b2			jsr 	EncodeNumber 				; send it to the number-builder
.960a	90 03		bcc $960f			bcc 	_VMCFail 					; if failed, give up.
.960c	18		clc				clc 								; next time round, countinue
.960d	80 f3		bra $9602			bra 	_VMCNext
.960f					_VMCFail:
.960f	68		pla				pla
.9610					_VMCFail2:
.9610	7a		ply				ply
.9611	38		sec				sec
.9612	60		rts				rts
.9613					_VMCSuccess:
.9613	a9 00		lda #$00			lda 	#0 							; construct final
.9615	20 b2 87	jsr $87b2			jsr 	EncodeNumber
.9618	68		pla				pla
.9619	c9 2d		cmp #$2d			cmp 	#"-"
.961b	d0 03		bne $9620			bne 	_VMCNotNegative
.961d	20 50 8c	jsr $8c50			jsr		NSMNegate
.9620					_VMCNotNegative:
.9620	7a		ply				ply
.9621	18		clc				clc
.9622	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/chr.asm

.8a76					ChrUnary:
.8a76	fa		plx				plx 								; restore stack pos
.8a77	20 3c 8c	jsr $8c3c			jsr 	Evaluate8BitInteger			; get value
.8a7a	48		pha				pha
.8a7b	20 a1 91	jsr $91a1			jsr 	CheckRightBracket
.8a7e	a9 01		lda #$01			lda 	#1 							; allocate space for one char
.8a80	20 2f 97	jsr $972f			jsr 	StringTempAllocate
.8a83	68		pla				pla 								; write number to it
.8a84	20 6d 97	jsr $976d			jsr 	StringTempWrite
.8a87	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/spc.asm

.8a88					SpcUnary:
.8a88	fa		plx				plx 								; restore stack pos
.8a89	20 3c 8c	jsr $8c3c			jsr 	Evaluate8BitInteger			; get value
.8a8c	5a		phy				phy
.8a8d	48		pha				pha 								; save count
.8a8e	20 2f 97	jsr $972f			jsr 	StringTempAllocate
.8a91	7a		ply				ply 								; to do count in Y
.8a92					_SpcLoop:
.8a92	c0 00		cpy #$00			cpy 	#0
.8a94	f0 08		beq $8a9e			beq 	_SpcExit
.8a96	a9 20		lda #$20			lda 	#32
.8a98	20 6d 97	jsr $976d			jsr 	StringTempWrite
.8a9b	88		dey				dey
.8a9c	80 f4		bra $8a92			bra 	_SPCLoop
.8a9e					_SpcExit:
.8a9e	7a		ply				ply
.8a9f	20 a1 91	jsr $91a1			jsr 	CheckRightBracket
.8aa2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/str.asm

.8aa3					Unary_Str:
.8aa3	fa		plx				plx
.8aa4	20 f8 8b	jsr $8bf8			jsr 	EvaluateNumber  			; get number
.8aa7	20 a1 91	jsr $91a1			jsr 	CheckRightBracket 			; closing bracket
.8aaa	a9 05		lda #$05			lda 	#5 							; maximum decimals, from Basic816
.8aac	20 c5 8a	jsr $8ac5			jsr 	ConvertNumberToString 		; do the conversion.
.8aaf	a9 21		lda #$21			lda		#33 						; create buffer
.8ab1	20 2f 97	jsr $972f			jsr 	StringTempAllocate 			; allocate memory
.8ab4	da		phx				phx
.8ab5	a2 00		ldx #$00			ldx 	#0
.8ab7					_USCopy:
.8ab7	bd 88 08	lda $0888,x			lda 	DecimalBuffer,x
.8aba	20 6d 97	jsr $976d			jsr 	StringTempWrite
.8abd	e8		inx				inx
.8abe	bd 88 08	lda $0888,x			lda 	DecimalBuffer,x
.8ac1	d0 f4		bne $8ab7			bne 	_USCopy
.8ac3	fa		plx				plx
.8ac4	60		rts				rts
.8ac5					ConvertNumberToString:
.8ac5	5a		phy				phy 								; save code position
.8ac6	8d 13 07	sta $0713			sta 	DecimalPlaces	 			; save number of DPs.
.8ac9	9c 14 07	stz $0714			stz 	dbOffset 					; offset into decimal buffer = start.
.8acc	bd 00 06	lda $0600,x			lda 	NSStatus,x  				; is it -ve.
.8acf	10 0a		bpl $8adb			bpl 	_CNTSNotNegative
.8ad1	29 7f		and #$7f			and 	#$7F 						; make +ve
.8ad3	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8ad6	a9 2d		lda #$2d			lda 	#"-"
.8ad8	20 41 8b	jsr $8b41			jsr 	WriteDecimalBuffer
.8adb					_CNTSNotNegative:
.8adb	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if decimal
.8ade	f0 15		beq $8af5			beq 	_CNTSNotFloat
.8ae0	e8		inx				inx 								; round up
.8ae1	a9 01		lda #$01			lda 	#1
.8ae3	20 a6 8c	jsr $8ca6			jsr 	NSMSetByte
.8ae6	ca		dex				dex
.8ae7	bd 28 06	lda $0628,x			lda		NSExponent,x
.8aea	9d 29 06	sta $0629,x			sta 	NSExponent+1,x
.8aed	a9 08		lda #$08			lda 	#NSTFloat
.8aef	9d 01 06	sta $0601,x			sta 	NSStatus+1,x
.8af2	20 68 93	jsr $9368			jsr 	FloatAdd
.8af5					_CNTSNotFloat:
.8af5	20 23 8b	jsr $8b23			jsr 	MakePlusTwoString
.8af8	20 46 94	jsr $9446			jsr 	FloatFractionalPart 		; get the fractional part
.8afb	20 0a 95	jsr $950a			jsr 	NSNormalise					; normalise , exit if zero
.8afe	f0 21		beq $8b21			beq 	_CNTSExit
.8b00	a9 2e		lda #$2e			lda 	#"."
.8b02	20 41 8b	jsr $8b41			jsr 	WriteDecimalBuffer 			; write decimal place
.8b05					_CNTSDecimal:
.8b05	ce 13 07	dec $0713			dec 	DecimalPlaces 				; done all the decimals
.8b08	30 17		bmi $8b21			bmi 	_CNTSExit
.8b0a	e8		inx				inx 								; x 10.0
.8b0b	a9 0a		lda #$0a			lda 	#10
.8b0d	20 a6 8c	jsr $8ca6			jsr 	NSMSetByte
.8b10	a9 08		lda #$08			lda 	#NSTFloat
.8b12	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8b15	ca		dex				dex
.8b16	20 d3 94	jsr $94d3			jsr 	FloatMultiply
.8b19	20 23 8b	jsr $8b23			jsr 	MakePlusTwoString
.8b1c	20 46 94	jsr $9446			jsr 	FloatFractionalPart 		; get the fractional part
.8b1f	80 e4		bra $8b05			bra 	_CNTSDecimal 				; keep going.
.8b21					_CNTSExit:
.8b21	7a		ply				ply
.8b22	60		rts				rts
.8b23					MakePlusTwoString:
.8b23	da		phx				phx
.8b24	20 7b 8c	jsr $8c7b			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.8b27	e8		inx				inx 								; access it
.8b28	e8		inx				inx
.8b29	20 a9 94	jsr $94a9			jsr 	FloatIntegerPart 			; make it an integer
.8b2c	a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.8b2e	20 12 93	jsr $9312			jsr 	ConvertInt32
.8b31	a2 00		ldx #$00			ldx	 	#0
.8b33					_MPTSCopy:
.8b33	bd 66 08	lda $0866,x			lda 	NumberBuffer,x
.8b36	20 41 8b	jsr $8b41			jsr 	WriteDecimalBuffer
.8b39	e8		inx				inx
.8b3a	bd 66 08	lda $0866,x			lda 	NumberBuffer,x
.8b3d	d0 f4		bne $8b33			bne 	_MPTSCopy
.8b3f	fa		plx				plx
.8b40	60		rts				rts
.8b41					WriteDecimalBuffer:
.8b41	da		phx				phx
.8b42	ae 14 07	ldx $0714			ldx 	dbOffset
.8b45	9d 88 08	sta $0888,x			sta 	DecimalBuffer,x
.8b48	9e 89 08	stz $0889,x			stz 	DecimalBuffer+1,x
.8b4b	ee 14 07	inc $0714			inc 	dbOffset
.8b4e	fa		plx				plx
.8b4f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/substring.asm

.8b50					Unary_Left:
.8b50	fa		plx				plx
.8b51	18		clc				clc 								; only one parameter
.8b52	20 c7 8b	jsr $8bc7			jsr 	SubstringInitial 			; set up.
.8b55	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; Param #1 is the length
.8b58	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.8b5b	9e 09 06	stz $0609,x			stz 	NSMantissa0+1,x 			; Start is zero.
.8b5e	80 2c		bra $8b8c			bra 	SubstringMain
.8b60					Unary_Right:
.8b60	fa		plx				plx
.8b61	18		clc				clc 								; only one parameter
.8b62	20 c7 8b	jsr $8bc7			jsr 	SubstringInitial 			; set up.
.8b65	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; length => param 2
.8b68	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.8b6b	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; total length
.8b6e	fd 09 06	sbc $0609,x			sbc 	NSMantissa0+1,x 			; length - required.
.8b71	b0 02		bcs $8b75			bcs 	_URNotUnderflow
.8b73	a9 00		lda #$00			lda 	#0 							; start from the beginning, as something like right$("AB",3)
.8b75					_URNotUnderFlow:
.8b75	9d 09 06	sta $0609,x			sta 	NSMantissa0+1,x 			; this is the start position
.8b78	80 12		bra $8b8c			bra 	SubStringMain
.8b7a					Unary_Mid:
.8b7a	fa		plx				plx
.8b7b	38		sec				sec 								; two parameters
.8b7c	20 c7 8b	jsr $8bc7			jsr 	SubstringInitial 			; set up.
.8b7f	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; first parameter is zero ?
.8b82	f0 05		beq $8b89			beq 	_UMError
.8b84	de 09 06	dec $0609,x			dec 	NSMantissa0+1,x				; reduce initial offset by 1 as MID$(a$,1..) is actually the first character
.8b87	80 03		bra $8b8c			bra 	SubStringMain
.8b89					_UMError:
.8b89	4c 69 96	jmp $9669			jmp 	ArgumentError
.8b8c					SubStringMain:
.8b8c	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; is the initial offset >= the length
.8b8f	dd 28 06	cmp $0628,x			cmp 	NSExponent,x
.8b92	b0 2d		bcs $8bc1			bcs 	_SSMNull 					; if so, return an empty string.
.8b94	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; if copy count is zero
.8b97	f0 28		beq $8bc1			beq 	_SSMNull 					; return empty string.
.8b99	18		clc				clc 								; add the offset +1 to the address and
.8b9a	bd 08 06	lda $0608,x			lda	 	NSMantissa0,x 				; put in zTemp
.8b9d	7d 09 06	adc $0609,x			adc 	NSMantissa0+1,x
.8ba0	85 36		sta $36				sta 	zTemp0
.8ba2	bd 10 06	lda $0610,x			lda	 	NSMantissa1,x
.8ba5	69 00		adc #$00			adc 	#0
.8ba7	85 37		sta $37				sta 	zTemp0+1
.8ba9					_SSMNoCarry:
.8ba9	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; characters required.
.8bac	20 2f 97	jsr $972f			jsr 	StringTempAllocate 			; allocate that many characters
.8baf	5a		phy				phy 								; save Y
.8bb0	a0 00		ldy #$00			ldy 	#0 							; start copying in.
.8bb2					_SSMCopy:
.8bb2	b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next character
.8bb4	f0 09		beq $8bbf			beq 	_SSMEString 				; no more to copy
.8bb6	20 6d 97	jsr $976d			jsr 	StringTempWrite 			; and write it out.
.8bb9	c8		iny				iny
.8bba	de 0a 06	dec $060a,x			dec 	NSMantissa0+2,x
.8bbd	d0 f3		bne $8bb2			bne 	_SSMCopy
.8bbf					_SSMEString:
.8bbf	7a		ply				ply
.8bc0					_SSMExit:
.8bc0	60		rts				rts
.8bc1					_SSMNull:
.8bc1	a9 00		lda #$00			lda 	#0
.8bc3	20 2f 97	jsr $972f			jsr 	StringTempAllocate
.8bc6	60		rts				rts
.8bc7					SubstringInitial:
.8bc7	da		phx				phx 								; save initial stack position
.8bc8	08		php				php 								; save carry on stack indicating 2 parameters
.8bc9	20 03 8c	jsr $8c03			jsr 	EvaluateString 				; get a string
.8bcc	5a		phy				phy 								; calculate length to exponent.
.8bcd	a0 ff		ldy #$ff			ldy 	#$FF
.8bcf					_SIFindLength:
.8bcf	c8		iny				iny
.8bd0	b1 36		lda ($36),y			lda 	(zTemp0),y
.8bd2	d0 fb		bne $8bcf			bne 	_SIFindLength
.8bd4	98		tya				tya
.8bd5	9d 28 06	sta $0628,x			sta 	NSExponent,x
.8bd8	7a		ply				ply
.8bd9	e8		inx				inx
.8bda	20 a9 91	jsr $91a9			jsr 	CheckComma 					; comma next
.8bdd	20 3c 8c	jsr $8c3c			jsr 	Evaluate8BitInteger 		; get next parameter
.8be0	28		plp				plp 								; is it the last parameter ?
.8be1	90 07		bcc $8bea			bcc 	_SSIExit 					; if so, exit.
.8be3	e8		inx				inx
.8be4	20 a9 91	jsr $91a9			jsr 	CheckComma 					; comma next
.8be7	20 3c 8c	jsr $8c3c			jsr 	Evaluate8BitInteger 		; get last parameter
.8bea					_SSIExit:
.8bea	fa		plx				plx
.8beb	20 a1 91	jsr $91a1			jsr 	CheckRightBracket 			; check closing bracket
.8bee	60		rts				rts 								; exit

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/exprhelper.asm

.8bef					EvaluateValue:
.8bef	48		pha				pha
.8bf0	20 61 86	jsr $8661			jsr		EvaluateExpression 			; expression
.8bf3	20 14 87	jsr $8714			jsr 	Dereference					; derefernce it
.8bf6	68		pla				pla
.8bf7	60		rts				rts
.8bf8					EvaluateNumber:
.8bf8	20 ef 8b	jsr $8bef			jsr 	EvaluateValue 				; get a value
.8bfb	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if string.
.8bfe	29 10		and #$10			and 	#NSBIsString
.8c00	d0 16		bne $8c18			bne 	HelperTypeError
.8c02	60		rts				rts
.8c03					EvaluateString:
.8c03	20 ef 8b	jsr $8bef			jsr 	EvaluateValue 				; get a value
.8c06	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if string.
.8c09	29 10		and #$10			and 	#NSBIsString
.8c0b	f0 0b		beq $8c18			beq 	HelperTypeError
.8c0d					CopyAddressToTemp0:
.8c0d	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy address -> zTemp0
.8c10	85 36		sta $36				sta 	zTemp0
.8c12	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8c15	85 37		sta $37				sta 	zTemp0+1
.8c17	60		rts				rts
.8c18					HelperTypeError:
.8c18	4c 64 96	jmp $9664			jmp 	TypeError
.8c1b					EvaluateInteger:
.8c1b	20 f8 8b	jsr $8bf8			jsr 	EvaluateNumber
.8c1e	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check exponent is zero
.8c21	d0 0a		bne $8c2d			bne 	HelperValueError 			; if not, it's a float.
.8c23	60		rts				rts
.8c24					EvaluateUnsignedInteger:
.8c24	20 1b 8c	jsr $8c1b			jsr 	EvaluateInteger 			; check integer is +ve
.8c27	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8c2a	30 01		bmi $8c2d			bmi 	HelperValueError
.8c2c	60		rts				rts
.8c2d					HelperValueError:
.8c2d	4c 69 96	jmp $9669			jmp 	ArgumentError
.8c30					Evaluate16BitInteger:
.8c30	20 24 8c	jsr $8c24			jsr	 	EvaluateUnsignedInteger		; get integer
.8c33	bd 20 06	lda $0620,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.8c36	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.8c39	d0 f2		bne $8c2d			bne 	HelperValueError
.8c3b	60		rts				rts
.8c3c					Evaluate8BitInteger:
.8c3c	20 24 8c	jsr $8c24			jsr	 	EvaluateUnsignedInteger 	; get an integer
.8c3f	d0 ec		bne $8c2d			bne 	HelperValueError
.8c41	bd 20 06	lda $0620,x			lda 	NSMantissa3,x	 			; bytes 1, 2 & 3 must be zero
.8c44	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.8c47	1d 10 06	ora $0610,x			ora 	NSMantissa1,x
.8c4a	d0 e1		bne $8c2d			bne 	HelperValueError
.8c4c	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.8c4f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/utility.asm

.8c50					NSMNegate:
.8c50	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8c53	49 80		eor #$80			eor 	#NSBIsNegative
.8c55	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8c58	60		rts				rts
.8c59					NSMNegateMantissa:
.8c59	38		sec				sec
.8c5a	a9 00		lda #$00			lda 	#0
.8c5c	fd 08 06	sbc $0608,x			sbc 	NSMantissa0,x
.8c5f	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8c62	a9 00		lda #$00			lda 	#0
.8c64	fd 10 06	sbc $0610,x			sbc 	NSMantissa1,x
.8c67	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8c6a	a9 00		lda #$00			lda 	#0
.8c6c	fd 18 06	sbc $0618,x			sbc 	NSMantissa2,x
.8c6f	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8c72	a9 00		lda #$00			lda 	#0
.8c74	fd 20 06	sbc $0620,x			sbc 	NSMantissa3,x
.8c77	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8c7a	60		rts				rts
.8c7b					NSMShiftUpTwo:
.8c7b	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.8c7e	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.8c81	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8c84	9d 12 06	sta $0612,x			sta 	NSMantissa1+2,x
.8c87	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.8c8a	9d 1a 06	sta $061a,x			sta 	NSMantissa2+2,x
.8c8d	bd 20 06	lda $0620,x			lda 	NSMantissa3,x
.8c90	9d 22 06	sta $0622,x			sta 	NSMantissa3+2,x
.8c93	bd 28 06	lda $0628,x			lda 	NSExponent,x
.8c96	9d 2a 06	sta $062a,x			sta 	NSExponent+2,x
.8c99	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8c9c	9d 02 06	sta $0602,x			sta 	NSStatus+2,x
.8c9f	60		rts				rts
.8ca0					NSMSetZeroMantissaOnly:
.8ca0	a9 00		lda #$00			lda 	#0
.8ca2	80 08		bra $8cac			bra 	NSMSetMantissa
.8ca4					NSMSetZero:
.8ca4	a9 00		lda #$00			lda 	#0
.8ca6					NSMSetByte:
.8ca6	9e 28 06	stz $0628,x			stz 	NSExponent,x 				; zero exponent, as integer.
.8ca9	9e 00 06	stz $0600,x			stz 	NSStatus,x 					; status zero (integer)
.8cac					NSMSetMantissa:
.8cac	9d 08 06	sta $0608,x			sta 	NSMantissa0,x 				; mantissa
.8caf	9e 10 06	stz $0610,x			stz 	NSMantissa1,x
.8cb2	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.8cb5	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.8cb8	60		rts				rts
.8cb9					NSMShiftLeft:
.8cb9	18		clc				clc
.8cba					NSMRotateLeft:
.8cba	3e 08 06	rol $0608,x			rol 	NSMantissa0,x
.8cbd	3e 10 06	rol $0610,x			rol		NSMantissa1,x
.8cc0	3e 18 06	rol $0618,x			rol		NSMantissa2,x
.8cc3	3e 20 06	rol $0620,x			rol		NSMantissa3,x
.8cc6	60		rts				rts
.8cc7					NSMShiftRight:
.8cc7	5e 20 06	lsr $0620,x			lsr 	NSMantissa3,x
.8cca	7e 18 06	ror $0618,x			ror		NSMantissa2,x
.8ccd	7e 10 06	ror $0610,x			ror		NSMantissa1,x
.8cd0	7e 08 06	ror $0608,x			ror		NSMantissa0,x
.8cd3	60		rts				rts
.8cd4					NSMIsZero:
.8cd4	bd 20 06	lda $0620,x			lda 	NSMantissa3,x
.8cd7	1d 18 06	ora $0618,x			ora		NSMantissa2,x
.8cda	1d 10 06	ora $0610,x			ora		NSMantissa1,x
.8cdd	1d 08 06	ora $0608,x			ora		NSMantissa0,x
.8ce0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/constants.asm

.9623					DecimalScalarTable:
>9623	66 66 66 66				.dword $66666666 ; 0.1
>9627	de					.byte $de
>9628	1f 85 eb 51				.dword $51eb851f ; 0.01
>962c	db					.byte $db
>962d	4c 37 89 41				.dword $4189374c ; 0.001
>9631	d8					.byte $d8
>9632	ac 8b db 68				.dword $68db8bac ; 0.0001
>9636	d4					.byte $d4
>9637	24 d6 e2 53				.dword $53e2d624 ; 1e-05
>963b	d1					.byte $d1
>963c	83 de 1b 43				.dword $431bde83 ; 1e-06
>9640	ce					.byte $ce
>9641	6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>9645	ca					.byte $ca
>9646	89 3b e6 55				.dword $55e63b89 ; 1e-08
>964a	c7					.byte $c7
>964b	a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>964f	c4					.byte $c4
>9650	67 7f f3 6d				.dword $6df37f67 ; 1e-10
>9654	c0					.byte $c0
>9655	86 ff f5 57				.dword $57f5ff86 ; 1e-11
>9659	bd					.byte $bd

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.asm

.965a					SyntaxError:
.965a	a9 02		lda #$02		lda	#2
.965c	4c 5f 82	jmp $825f		jmp	ErrorHandler
.965f					RangeError:
.965f	a9 04		lda #$04		lda	#4
.9661	4c 5f 82	jmp $825f		jmp	ErrorHandler
.9664					TypeError:
.9664	a9 05		lda #$05		lda	#5
.9666	4c 5f 82	jmp $825f		jmp	ErrorHandler
.9669					ArgumentError:
.9669	a9 07		lda #$07		lda	#7
.966b	4c 5f 82	jmp $825f		jmp	ErrorHandler
.966e					NotDoneError:
.966e	a9 0c		lda #$0c		lda	#12
.9670	4c 5f 82	jmp $825f		jmp	ErrorHandler
.9673					ErrorText:
>9673	42 72 65 61 6b 00			.text	"Break",0
>9679	53 79 6e 74 61 78 20 65			.text	"Syntax error",0
>9681	72 72 6f 72 00
>9686	44 69 76 69 73 69 6f 6e			.text	"Division by zero",0
>968e	20 62 79 20 7a 65 72 6f 00
>9697	4f 75 74 20 6f 66 20 52			.text	"Out of Range",0
>969f	61 6e 67 65 00
>96a4	54 79 70 65 20 6d 69 73			.text	"Type mismatch",0
>96ac	6d 61 74 63 68 00
>96b2	4f 75 74 20 6f 66 20 6d			.text	"Out of memory",0
>96ba	65 6d 6f 72 79 00
>96c0	49 6c 6c 65 67 61 6c 20			.text	"Illegal argument",0
>96c8	61 72 67 75 6d 65 6e 74 00
>96d1	53 74 6f 70 00				.text	"Stop",0
>96d6	53 74 72 69 6e 67 20 74			.text	"String too long",0
>96de	6f 6f 20 6c 6f 6e 67 00
>96e6	41 73 73 65 72 74 69 6f			.text	"Assertion failed",0
>96ee	6e 20 66 61 69 6c 65 64 00
>96f7	4f 75 74 20 6f 66 20 64			.text	"Out of data",0
>96ff	61 74 61 00
>9703	55 6e 69 6d 70 6c 65 6d			.text	"Unimplemented",0
>970b	65 6e 74 65 64 00

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/stringalloc.asm

.9711					StringSystemInitialise:
.9711	a9 00		lda #$00			lda 	#((EndVariableSpace) & $FF)
.9713	8d 0e 07	sta $070e			sta 	0+StringMemory
.9716	a9 20		lda #$20			lda 	#((EndVariableSpace) >> 8)
.9718	8d 0f 07	sta $070f			sta 	1+StringMemory
.971b	60		rts				rts
.971c					StringSpaceInitialise:
.971c	a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.971e	8d 10 07	sta $0710			sta 	StringInitialised
.9721	ad 0e 07	lda $070e			lda 	StringMemory 				; allocate 256 bytes for one concreted string
.9724	8d 11 07	sta $0711			sta 	StringTempPointer
.9727	ad 0f 07	lda $070f			lda 	StringMemory+1
.972a	3a		dec a				dec 	a
.972b	8d 12 07	sta $0712			sta 	StringTempPointer+1
.972e	60		rts				rts
.972f					StringTempAllocate:
.972f	c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.9731	b0 35		bcs $9768			bcs 	_STALength
.9733	2c 10 07	bit $0710			bit 	StringInitialised 			; already initialised
.9736	30 05		bmi $973d			bmi 	_STAAllocate
.9738	48		pha				pha 								; save value to subtract.
.9739	20 1c 97	jsr $971c			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.973c	68		pla				pla 								; restore it
.973d					_STAAllocate:
.973d	49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.973f	18		clc				clc  								; deliberate allows one more
.9740	6d 11 07	adc $0711			adc 	StringTempPointer 			; subtract from temp pointer
.9743	8d 11 07	sta $0711			sta 	StringTempPointer
.9746	9d 08 06	sta $0608,x			sta 	NSMantissa0,x 				; address in mantissa
.9749	85 3c		sta $3c				sta 	zsTemp 						; and zsTemp
.974b	ad 12 07	lda $0712			lda 	StringTempPointer+1
.974e	69 ff		adc #$ff			adc 	#$FF
.9750	8d 12 07	sta $0712			sta 	StringTempPointer+1
.9753	85 3d		sta $3d				sta 	zsTemp+1
.9755	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9758	9e 18 06	stz $0618,x			stz 	NSMantissa2,x 				; set the typing data
.975b	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.975e	a9 10		lda #$10			lda 	#NSTString
.9760	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9763	a9 00		lda #$00			lda 	#0 							; clear the target string
.9765	92 3c		sta ($3c)			sta 	(zsTemp)
.9767	60		rts				rts
.9768					_STALength:
.9768	a9 09		lda #$09		lda	#9
.976a	4c 5f 82	jmp $825f		jmp	ErrorHandler
.976d					StringTempWrite:
.976d	48		pha				pha
.976e	92 3c		sta ($3c)			sta 	(zsTemp)
.9770	e6 3c		inc $3c				inc 	zsTemp
.9772	d0 02		bne $9776			bne 	_STWNoCarry
.9774	e6 3d		inc $3d				inc 	zsTemp+1
.9776					_STWNoCarry:
.9776	a9 00		lda #$00			lda 	#0
.9778	92 3c		sta ($3c)			sta 	(zsTemp)
.977a	68		pla				pla
.977b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/backload.asm

.8ce1					BackloadProgram:
.8ce1	a2 ff		ldx #$ff			ldx 	#$FF
.8ce3	8e fa ff	stx $fffa			stx 	$FFFA 						; fast mode
.8ce6	20 0d 8d	jsr $8d0d			jsr 	BLReadByte
.8ce9	30 1e		bmi $8d09			bmi 	_BPExit
.8ceb					_BPCopy:
.8ceb	e8		inx				inx  								; copy byte in
.8cec	9d 15 08	sta $0815,x			sta 	lineBuffer,x
.8cef	9e 16 08	stz $0816,x			stz 	lineBuffer+1,x
.8cf2	20 0d 8d	jsr $8d0d			jsr 	BLReadByte 					; read next byte
.8cf5	30 0a		bmi $8d01			bmi 	_BPEndLine 					; -ve = EOL
.8cf7	c9 09		cmp #$09			cmp 	#9 							; handle TAB
.8cf9	d0 02		bne $8cfd			bne 	_BPNotTab
.8cfb	a9 20		lda #$20			lda 	#' '
.8cfd					_BPNotTab:
.8cfd	c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.8cff	b0 ea		bcs $8ceb			bcs 	_BPCopy
.8d01					_BPEndLine:
.8d01	20 c9 8e	jsr $8ec9			jsr 	TokeniseLine 				; tokenise the line.
.8d04	20 5b 91	jsr $915b			jsr 	MemoryAppend 				; append to current program
.8d07	80 d8		bra $8ce1			bra 	BackloadProgram
.8d09					_BPExit:
.8d09	20 28 81	jsr $8128			jsr 	ClearCommand 				; clear variables etc.
.8d0c	60		rts				rts
.8d0d					BLReadByte:
.8d0d					_BLLoad:
.8d0d	ad 00 30	lda $3000			lda 	$3000 						; hardcoded in the makefile.
.8d10	ee 0e 8d	inc $8d0e			inc 	_BLLoad+1
.8d13	d0 03		bne $8d18			bne 	_BLNoCarry
.8d15	ee 0f 8d	inc $8d0f			inc 	_BLLoad+2
.8d18					_BLNoCarry:
.8d18	c9 00		cmp #$00			cmp 	#0
.8d1a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/searchtokens.asm

.8d1b					TokeniseSearchTable:
.8d1b	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token.
.8d1d	85 36		sta $36				sta 	zTemp0
.8d1f	a0 00		ldy #$00			ldy 	#0
.8d21	a9 80		lda #$80			lda 	#$80 						; token #
.8d23	85 38		sta $38				sta 	zTemp1
.8d25					_TSTLoop:
.8d25	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.8d27	30 49		bmi $8d72			bmi 	_TSTFail 					; -ve = end of table
.8d29	f0 2e		beq $8d59			beq 	_TSTNext 					; zero, check next it's a dummy
.8d2b	c8		iny				iny 								; get the hash
.8d2c	b1 36		lda ($36),y			lda 	(zTemp0),y
.8d2e	88		dey				dey
.8d2f	cd 03 07	cmp $0703			cmp 	identHash 					; check they match, if not go to next
.8d32	d0 25		bne $8d59			bne 	_TSTNext
.8d34	ad 02 07	lda $0702			lda 	identTypeEnd 				; length of identifier
.8d37	38		sec				sec
.8d38	ed 00 07	sbc $0700			sbc 	identStart
.8d3b	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; no match, then return.
.8d3d	d0 1a		bne $8d59			bne 	_TSTNext
.8d3f	5a		phy				phy 								; save Y , we might fail
.8d40	c8		iny				iny 								; point to text
.8d41	c8		iny				iny
.8d42	ae 00 07	ldx $0700			ldx 	identStart 					; offset in line buffer in X
.8d45					_TSTCompareName:
.8d45	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; compare text.
.8d48	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.8d4a	d0 0c		bne $8d58			bne 	_TSTNextPullY 				; fail, pullY and do next
.8d4c	e8		inx				inx
.8d4d	c8		iny				iny
.8d4e	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; complete match.
.8d51	d0 f2		bne $8d45			bne 	_TSTCompareName
.8d53	7a		ply				ply 								; throw Y
.8d54	a5 38		lda $38				lda 	zTemp1 						; get token #
.8d56	38		sec				sec 								; return with CS = passed.
.8d57	60		rts				rts
.8d58					_TSTNextPullY:
.8d58	7a		ply				ply 								; restore current, fall through.
.8d59					_TSTNext:
.8d59	e6 38		inc $38				inc 	zTemp1 						; token counter
.8d5b	98		tya				tya
.8d5c	18		clc				clc
.8d5d	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.8d5f	1a		inc a				inc 	a 							; +1
.8d60	1a		inc a				inc 	a 							; +2
.8d61	a8		tay				tay
.8d62	10 c1		bpl $8d25			bpl 	_TSTLoop 					; if Y < $80 loop back
.8d64	98		tya				tya 								; add Y to zTemp0 and reset Y
.8d65	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.8d67	18		clc				clc  								; but have tables > 255 bytes
.8d68	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.8d6a	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.8d6c	90 b7		bcc $8d25			bcc 	_TSTLoop
.8d6e	e6 37		inc $37				inc 	zTemp0+1
.8d70	80 b3		bra $8d25			bra 	_TSTLoop
.8d72					_TSTFail:
.8d72	18		clc				clc
.8d73	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/tokenise.asm


;******  Processing file: ./common/tokeniser/../generated/kwdtext.dat

.8d74					KeywordSet0:
>8d74	00 65					.text	0,$65,""               ; $80 !0:EOF
>8d76	00 58					.text	0,$58,""               ; $81 !1:SH1
>8d78	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>8d7a	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $83 ABS(
>8d80	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $84 ALLOC(
>8d88	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $85 ASC(
>8d8e	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $86 CHR$(
>8d95	05 6b 46 41 4c 53 45			.text	5,$6b,"FALSE"          ; $87 FALSE
>8d9c	05 44 46 52 41 43 28			.text	5,$44,"FRAC("          ; $88 FRAC(
>8da3	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $89 INT(
>8da9	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $8a ISVAL(
>8db1	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $8b LEFT$(
>8db9	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $8c LEN(
>8dbf	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $8d MID$(
>8dc6	04 19 4e 4f 54 28			.text	4,$19,"NOT("           ; $8e NOT(
>8dcc	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $8f RIGHT$(
>8dd4	28
>8dd5	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $90 RND(
>8ddb	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $91 SGN(
>8de1	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $92 SPC(
>8de7	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $93 STR$(
>8dee	04 40 54 52 55 45			.text	4,$40,"TRUE"           ; $94 TRUE
>8df4	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $95 VAL(
>8dfa	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $96 FOR
>8dff	02 8f 49 46				.text	2,$8f,"IF"             ; $97 IF
>8e03	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $98 PROC
>8e09	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $99 REPEAT
>8e11	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $9a WHILE
>8e18	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $9b ENDIF
>8e1f	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $9c ENDPROC
>8e27	43
>8e28	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $9d NEXT
>8e2e	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $9e UNTIL
>8e35	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $9f WEND
>8e3b	04 1c 43 41 4c 4c			.text	4,$1c,"CALL"           ; $a0 CALL
>8e41	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $a1 CLS
>8e46	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $a2 DATA
>8e4c	03 da 44 49 4d				.text	3,$da,"DIM"            ; $a3 DIM
>8e51	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $a4 GOSUB
>8e58	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $a5 GOTO
>8e5e	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $a6 LET
>8e63	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $a7 PRINT
>8e6a	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $a8 READ
>8e70	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $a9 REM
>8e75	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $aa RETURN
>8e7d	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $ab THEN
>8e83	02 a3 54 4f				.text	2,$a3,"TO"             ; $ac TO
>8e87	ff					.text	$FF
.8e88					KeywordSet1:
>8e88	00 65					.text	0,$65,""               ; $80 !0:EOF
>8e8a	00 58					.text	0,$58,""               ; $81 !1:SH1
>8e8c	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>8e8e	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $83 ASSERT
>8e96	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $84 CLEAR
>8e9d	03 d7 45 4e 44				.text	3,$d7,"END"            ; $85 END
>8ea2	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $86 LIST
>8ea8	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $87 NEW
>8ead	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $88 RESTORE
>8eb5	45
>8eb6	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $89 RUN
>8ebb	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $8a STOP
>8ec1	ff					.text	$FF
.8ec2					KeywordSet2:
>8ec2	00 65					.text	0,$65,""               ; $80 !0:EOF
>8ec4	00 58					.text	0,$58,""               ; $81 !1:SH1
>8ec6	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>8ec8	ff					.text	$FF

;******  Return to file: ./common/tokeniser/tokenise.asm

.8ec9					TokeniseLine:
.8ec9	20 51 90	jsr $9051			jsr 	FixLineBufferCase 			; fix line case
.8ecc	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.8ece	8d 15 07	sta $0715			sta 	tokenOffset
.8ed1	9c 16 07	stz $0716			stz 	tokenLineNumber
.8ed4	9c 17 07	stz $0717			stz 	tokenLineNumber+1
.8ed7	a2 ff		ldx #$ff			ldx 	#$FF
.8ed9					_TKFindFirst:
.8ed9	e8		inx				inx
.8eda	bd 15 08	lda $0815,x			lda 	lineBuffer,x
.8edd	f0 79		beq $8f58			beq 	_TKExit
.8edf	c9 20		cmp #$20			cmp 	#' '
.8ee1	90 f6		bcc $8ed9			bcc 	_TKFindFirst
.8ee3	c9 30		cmp #$30			cmp 	#'0'
.8ee5	90 07		bcc $8eee			bcc 	_TKNoLineNumber
.8ee7	c9 3a		cmp #$3a			cmp 	#'9'+1
.8ee9	b0 03		bcs $8eee			bcs 	_TKNoLineNumber
.8eeb	20 7b 90	jsr $907b			jsr 	TokeniseExtractLineNumber
.8eee					_TKNoLineNumber:
.8eee					_TKTokeniseLoop:
.8eee	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.8ef1	f0 65		beq $8f58			beq 	_TKExit
.8ef3	e8		inx				inx
.8ef4	c9 20		cmp #$20			cmp 	#' '
.8ef6	f0 f6		beq $8eee			beq 	_TKTokeniseLoop 			; keep looping if space found.
.8ef8	ca		dex				dex 								; undo last get, A contains character, X is position.
.8ef9	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.8efb	f0 61		beq $8f5e			beq 	_TKTokeniseIdentifier
.8efd	c9 41		cmp #$41			cmp 	#'A'
.8eff	90 04		bcc $8f05			bcc 	_TKTokenisePunctuation
.8f01	c9 5b		cmp #$5b			cmp 	#'Z'+1
.8f03	90 59		bcc $8f5e			bcc 	_TKTokeniseIdentifier
.8f05					_TKTokenisePunctuation:
.8f05	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.8f07	f0 27		beq $8f30			beq 	_TKString
.8f09	c9 23		cmp #$23			cmp 	#'#'						; hexadecimal constant (# only appears at end of identifiers)
.8f0b	f0 28		beq $8f35			beq 	_TKHexConstant
.8f0d	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers.
.8f0f	f0 29		beq $8f3a			beq 	_TKCheckDouble
.8f11	c9 3e		cmp #$3e			cmp 	#'>'
.8f13	f0 25		beq $8f3a			beq 	_TKCheckDouble
.8f15					_TKStandardPunctuation:
.8f15	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; get it back.
.8f18	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.8f1a	90 0e		bcc $8f2a			bcc 	_TKNoShift
.8f1c	48		pha				pha 								; save
.8f1d	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.8f1f	85 36		sta $36				sta 	zTemp0
.8f21	68		pla				pla
.8f22	29 20		and #$20			and 	#32 						; bit 5
.8f24	4a		lsr a				lsr 	a 							; shift into bit 3
.8f25	4a		lsr a				lsr 	a
.8f26	05 36		ora $36				ora 	zTemp0
.8f28	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.8f2a					_TKNoShift:
.8f2a	20 c0 90	jsr $90c0			jsr 	TokeniseWriteByte 			; write the punctuation character
.8f2d	e8		inx				inx 								; consume the character
.8f2e	80 be		bra $8eee			bra 	_TKTokeniseLoop 			; and loop round again.
.8f30					_TKString:
.8f30	20 e0 8f	jsr $8fe0			jsr 	TokeniseString
.8f33	80 b9		bra $8eee			bra 	_TKTokeniseLoop
.8f35					_TKHexConstant:
.8f35	20 1b 90	jsr $901b			jsr 	TokeniseHexConstant
.8f38	80 b4		bra $8eee			bra 	_TKTokeniseLoop
.8f3a					_TKCheckDouble:
.8f3a	bd 16 08	lda $0816,x			lda 	lineBuffer+1,x 				; get next character
.8f3d	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.8f3f	90 d4		bcc $8f15			bcc 	_TKStandardPunctuation
.8f41	c9 3f		cmp #$3f			cmp 	#'>'+1
.8f43	b0 d0		bcs $8f15			bcs 	_TKStandardPunctuation
.8f45	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.8f48	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.8f4a	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.8f4b	7d 16 08	adc $0816,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.8f4e	38		sec				sec
.8f4f	e9 3c		sbc #$3c			sbc 	#'<'
.8f51	20 c0 90	jsr $90c0			jsr 	TokeniseWriteByte 			; this is in the range 0-7
.8f54	e8		inx				inx 								; consume both
.8f55	e8		inx				inx
.8f56	80 96		bra $8eee			bra 	_TKTokeniseLoop
.8f58	a9 80		lda #$80	_TKExit:lda 	#KWC_EOL 					; write end of line byte
.8f5a	20 c0 90	jsr $90c0			jsr 	TokeniseWriteByte
.8f5d	60		rts				rts
.8f5e					_TKTokeniseIdentifier:
.8f5e	8e 00 07	stx $0700			stx 	identStart 					; save start
.8f61	9c 04 07	stz $0704			stz 	identTypeByte 				; zero the type byte
.8f64					_TKCheckLoop:
.8f64	e8		inx				inx 								; look at next, we know first is identifier.
.8f65	bd 15 08	lda $0815,x			lda  	lineBuffer,x
.8f68	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.8f6a	f0 f8		beq $8f64			beq 	_TKCheckLoop
.8f6c	c9 30		cmp #$30			cmp	 	#"0"
.8f6e	90 0c		bcc $8f7c			bcc 	_TKEndIdentifier
.8f70	c9 3a		cmp #$3a			cmp 	#"9"+1
.8f72	90 f0		bcc $8f64			bcc 	_TKCheckLoop
.8f74	c9 41		cmp #$41			cmp	 	#"A"
.8f76	90 04		bcc $8f7c			bcc 	_TKEndIdentifier
.8f78	c9 5b		cmp #$5b			cmp 	#"Z"+1
.8f7a	90 e8		bcc $8f64			bcc 	_TKCheckLoop
.8f7c					_TKEndIdentifier:
.8f7c	8e 01 07	stx $0701			stx 	identTypeStart 				; save start of type text (if any !)
.8f7f	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.8f81	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.8f83	f0 06		beq $8f8b			beq 	_TKHasTypeCharacter
.8f85	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.8f87	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.8f89	d0 07		bne $8f92			bne 	_TKNoTypeCharacter
.8f8b					_TKHasTypeCharacter:
.8f8b	8c 04 07	sty $0704			sty 	identTypeByte 				; has # or $, save the type
.8f8e	e8		inx				inx 								; read next
.8f8f	bd 15 08	lda $0815,x			lda 	lineBuffer,x
.8f92					_TKNoTypeCharacter:
.8f92	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.8f94	d0 09		bne $8f9f			bne 	_TKNoArray
.8f96	e8		inx				inx 								; skip the (
.8f97	ad 04 07	lda $0704			lda 	identTypeByte 				; set bit 2 (e.g. array)
.8f9a	09 04		ora #$04			ora 	#$04
.8f9c	8d 04 07	sta $0704			sta 	identTypeByte
.8f9f					_TKNoArray:
.8f9f	8e 02 07	stx $0702			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.8fa2	20 3c 90	jsr $903c			jsr 	TokeniseCalculateHash 		; calculate the has for those tokens
.8fa5	a0 8d		ldy #$8d			ldy 	#(KeywordSet0) >> 8
.8fa7	a9 74		lda #$74			lda 	#(KeywordSet0) & $FF
.8fa9	20 1b 8d	jsr $8d1b			jsr 	TokeniseSearchTable
.8fac	a2 00		ldx #$00			ldx 	#0
.8fae	b0 1f		bcs $8fcf			bcs 	_TKFoundToken
.8fb0	a0 8e		ldy #$8e			ldy 	#(KeywordSet1) >> 8
.8fb2	a9 88		lda #$88			lda 	#(KeywordSet1) & $FF
.8fb4	20 1b 8d	jsr $8d1b			jsr 	TokeniseSearchTable
.8fb7	a2 81		ldx #$81			ldx 	#$81
.8fb9	b0 14		bcs $8fcf			bcs 	_TKFoundToken
.8fbb	a0 8e		ldy #$8e			ldy 	#(KeywordSet1) >> 8
.8fbd	a9 88		lda #$88			lda 	#(KeywordSet1) & $FF
.8fbf	20 1b 8d	jsr $8d1b			jsr 	TokeniseSearchTable
.8fc2	a2 82		ldx #$82			ldx 	#$82
.8fc4	b0 09		bcs $8fcf			bcs 	_TKFoundToken
.8fc6	20 cc 90	jsr $90cc			jsr 	CheckCreateVariableRecord 	; failed all, it's a variable, create record if does not exist.
.8fc9	ae 02 07	ldx $0702			ldx 	identTypeEnd 				; X points to following byte
.8fcc	4c ee 8e	jmp $8eee			jmp 	_TKTokeniseLoop 			; and go round again.
.8fcf					_TKFoundToken:
.8fcf	48		pha				pha 								; save token
.8fd0	8a		txa				txa 								; shift in X, is there one ?
.8fd1	f0 03		beq $8fd6			beq 	_TKNoTShift
.8fd3	20 c0 90	jsr $90c0			jsr 	TokeniseWriteByte 			; if so, write it out
.8fd6					_TKNoTShift:
.8fd6	68		pla				pla 								; restore and write token
.8fd7	20 c0 90	jsr $90c0			jsr 	TokeniseWriteByte
.8fda	ae 02 07	ldx $0702			ldx 	identTypeEnd 				; X points to following byte
.8fdd	4c ee 8e	jmp $8eee			jmp 	_TKTokeniseLoop 			; and go round again.
.8fe0					TokeniseString:
.8fe0	a9 ff		lda #$ff			lda 	#KWC_STRING 				; string token.
.8fe2	20 c0 90	jsr $90c0			jsr 	TokeniseWriteByte
.8fe5	e8		inx				inx									; start of quoted string.
.8fe6	da		phx				phx 								; push start of string on top
.8fe7	ca		dex				dex
.8fe8					_TSFindEnd:
.8fe8	e8		inx				inx
.8fe9	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; next character
.8fec	f0 04		beq $8ff2			beq 	_TSEndOfString
.8fee	c9 22		cmp #$22			cmp 	#'"'
.8ff0	d0 f6		bne $8fe8			bne 	_TSFindEnd
.8ff2					_TSEndOfString:
.8ff2	7a		ply				ply  								; so now Y is first character, X is character after end.
.8ff3	48		pha				pha 								; save terminating character
.8ff4	20 fc 8f	jsr $8ffc			jsr 	TOWriteBlockXY 				; write X to Y as a data block
.8ff7	68		pla				pla 								; terminating character
.8ff8	f0 01		beq $8ffb			beq 	_TSNotQuote					; if it wasn't EOS skip it
.8ffa	e8		inx				inx
.8ffb					_TSNotQuote:
.8ffb	60		rts				rts
.8ffc					TOWriteBlockXY:
.8ffc	86 36		stx $36				stx 	zTemp0 						; write end character
.8ffe	98		tya				tya
.8fff	49 ff		eor #$ff			eor 	#$FF
.9001	38		sec				sec
.9002	65 36		adc $36				adc 	zTemp0
.9004	1a		inc a				inc 	a 							; one extra for NULL
.9005	20 c0 90	jsr $90c0			jsr 	TokeniseWriteByte
.9008					_TOBlockLoop:
.9008	c4 36		cpy $36				cpy 	zTemp0
.900a	f0 09		beq $9015			beq 	_TOBlockExit
.900c	b9 15 08	lda $0815,y			lda 	lineBuffer,y
.900f	20 c0 90	jsr $90c0			jsr 	TokeniseWriteByte
.9012	c8		iny				iny
.9013	80 f3		bra $9008			bra 	_TOBlockLoop
.9015					_TOBlockExit:
.9015	a9 00		lda #$00			lda 	#0
.9017	20 c0 90	jsr $90c0			jsr 	TokeniseWriteByte
.901a	60		rts				rts
.901b					TokeniseHexConstant:
.901b	a9 fe		lda #$fe			lda 	#KWC_HEXCONST 				; hex constant token.
.901d	20 c0 90	jsr $90c0			jsr 	TokeniseWriteByte
.9020	e8		inx				inx									; start of quoted string.
.9021	da		phx				phx 								; push start of constant on top
.9022	ca		dex				dex
.9023					_THFindLoop:
.9023	e8		inx				inx
.9024	bd 15 08	lda $0815,x			lda 	lineBuffer,x
.9027	c9 30		cmp #$30			cmp 	#"0"
.9029	90 0c		bcc $9037			bcc 	_THFoundEnd
.902b	c9 3a		cmp #$3a			cmp 	#"9"+1
.902d	90 f4		bcc $9023			bcc 	_THFindLoop
.902f	c9 41		cmp #$41			cmp 	#"A"
.9031	90 04		bcc $9037			bcc 	_THFoundEnd
.9033	c9 47		cmp #$47			cmp 	#"F"+1
.9035	90 ec		bcc $9023			bcc 	_THFindLoop
.9037					_THFoundEnd:
.9037	7a		ply				ply 								; restore start
.9038	20 fc 8f	jsr $8ffc			jsr 	TOWriteBlockXY 				; output the block
.903b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/utility.asm

.903c					TokeniseCalculateHash:
.903c	da		phx				phx
.903d	ae 00 07	ldx $0700			ldx 	identStart 					; needs to be same as in tokens.py - simple sum
.9040	a9 00		lda #$00			lda 	#0
.9042					_TCHLoop:
.9042	18		clc				clc
.9043	7d 15 08	adc $0815,x			adc 	lineBuffer,x
.9046	e8		inx				inx
.9047	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.904a	d0 f6		bne $9042			bne 	_TCHLoop
.904c	8d 03 07	sta $0703			sta 	identHash 					; save the hash
.904f	fa		plx				plx
.9050	60		rts				rts
.9051					FixLineBufferCase:
.9051	a2 00		ldx #$00			ldx 	#0
.9053					_FLBCLoop:
.9053	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; get next character
.9056	f0 22		beq $907a			beq 	_FLBCExit 					; end of string.
.9058	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.905a	f0 11		beq $906d			beq 	_FLBCInQuotes
.905c	e8		inx				inx
.905d	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.905f	90 f2		bcc $9053			bcc 	_FLBCLoop
.9061	c9 7b		cmp #$7b			cmp 	#'z'+1
.9063	b0 ee		bcs $9053			bcs 	_FLBCLoop
.9065	38		sec				sec 								; make U/C
.9066	e9 20		sbc #$20			sbc 	#32
.9068	9d 14 08	sta $0814,x			sta	 	lineBuffer-1,x 				; write back
.906b	80 e6		bra $9053			bra 	_FLBCLoop
.906d					_FLBCInQuotes:
.906d	e8		inx				inx 								; advance
.906e	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; get next
.9071	f0 07		beq $907a			beq 	_FLBCExit 					; exit on EOS
.9073	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.9075	d0 f6		bne $906d			bne 	_FLBCInQuotes
.9077	e8		inx				inx 								; skip over it
.9078	80 d9		bra $9053			bra 	_FLBCLoop
.907a					_FLBCExit:
.907a	60		rts				rts
.907b					TokeniseExtractLineNumber:
.907b	ad 17 07	lda $0717			lda 	tokenLineNumber+1 			; push current value on stack
.907e	48		pha				pha
.907f	ad 16 07	lda $0716			lda 	tokenLineNumber
.9082	48		pha				pha
.9083	20 b9 90	jsr $90b9			jsr 	_TELNTimes2 				; line # x 4
.9086	20 b9 90	jsr $90b9			jsr 	_TELNTimes2 				; line # x 2
.9089	18		clc				clc 								; add stacked value
.908a	68		pla				pla
.908b	6d 16 07	adc $0716			adc 	tokenLineNumber
.908e	8d 16 07	sta $0716			sta 	tokenLineNumber
.9091	68		pla				pla
.9092	6d 17 07	adc $0717			adc 	tokenLineNumber+1
.9095	8d 17 07	sta $0717			sta 	tokenLineNumber+1 			; line # x 5
.9098	20 b9 90	jsr $90b9			jsr 	_TELNTimes2 				; line # x 10
.909b	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; get and consume character
.909e	e8		inx				inx
.909f	29 0f		and #$0f			and 	#15 						; add to line #
.90a1	18		clc				clc
.90a2	6d 16 07	adc $0716			adc 	tokenLineNumber
.90a5	8d 16 07	sta $0716			sta 	tokenLineNumber
.90a8	90 03		bcc $90ad			bcc 	_TLENNoCarry
.90aa	ee 17 07	inc $0717			inc 	tokenLineNumber+1
.90ad					_TLENNoCarry:
.90ad	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; more digits ?
.90b0	c9 30		cmp #$30			cmp 	#'0'
.90b2	90 04		bcc $90b8			bcc 	_TLENExit
.90b4	c9 3a		cmp #$3a			cmp 	#'9'+1
.90b6	90 c3		bcc $907b			bcc 	TokeniseExtractLineNumber
.90b8					_TLENExit:
.90b8	60		rts				rts
.90b9					_TELNTimes2:
.90b9	0e 16 07	asl $0716			asl 	tokenLineNumber
.90bc	2e 17 07	rol $0717			rol 	tokenLineNumber+1
.90bf	60		rts				rts
.90c0					TokeniseWriteByte:
.90c0	da		phx				phx
.90c1	ae 15 07	ldx $0715			ldx 	tokenOffset 				; next slot to write to
.90c4	9d 15 07	sta $0715,x			sta 	tokenOffset,x 				; write byte out
.90c7	ee 15 07	inc $0715			inc 	tokenOffset 				; advance slot.
.90ca	fa		plx				plx
.90cb	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/variablerecord.asm

.90cc					CheckCreateVariableRecord:
.90cc	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.90ce	85 36		sta $36				sta 	0+zTemp0
.90d0	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.90d2	85 37		sta $37				sta 	1+zTemp0
.90d4	20 9f 91	jsr $919f			jsr 	VariableOpen 				; make variable space available
.90d7					_CCVSearch:
.90d7	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.90d9	f0 2c		beq $9107			beq 	_CCVFail
.90db	a0 01		ldy #$01			ldy 	#1 							; read the hash
.90dd	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.90df	cd 03 07	cmp $0703			cmp 	identHash
.90e2	d0 16		bne $90fa			bne 	_CCVNext
.90e4	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.90e6	ae 00 07	ldx $0700			ldx 	identStart
.90e9					_CCVCompare:
.90e9	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.90ec	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.90ee	e8		inx				inx 								; advance pointers
.90ef	c8		iny				iny
.90f0	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.90f1	d0 07		bne $90fa			bne 	_CCVNext  					; didn't match go to next.
.90f3	90 f4		bcc $90e9			bcc 	_CCVCompare 				; not finished yet.
.90f5	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; matched whole thing ?
.90f8	f0 41		beq $913b			beq 	_CCVFound 					; yes, we were successful
.90fa					_CCVNext:
.90fa	18		clc				clc
.90fb	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.90fd	65 36		adc $36				adc 	zTemp0
.90ff	85 36		sta $36				sta 	zTemp0
.9101	90 d4		bcc $90d7			bcc 	_CCVSearch
.9103	e6 37		inc $37				inc 	zTemp0+1
.9105	80 d0		bra $90d7			bra 	_CCVSearch
.9107					_CCVFail:
.9107	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.9109	ad 03 07	lda $0703			lda 	identHash
.910c	91 36		sta ($36),y			sta 	(zTemp0),y
.910e	c8		iny				iny 								; offset 2 is the type byte
.910f	ad 04 07	lda $0704			lda 	identTypeByte
.9112	91 36		sta ($36),y			sta 	(zTemp0),y
.9114	c8		iny				iny
.9115					_CCVData:
.9115	a9 00		lda #$00			lda 	#0 							; erase data 3-7
.9117	91 36		sta ($36),y			sta 	(zTemp0),y
.9119	c8		iny				iny
.911a	c0 08		cpy #$08			cpy 	#8
.911c	90 f7		bcc $9115			bcc 	_CCVData
.911e	ae 00 07	ldx $0700			ldx 	identStart 					; copy name into 8 on.
.9121					_CCVCopyName:
.9121	bd 15 08	lda $0815,x			lda 	lineBuffer,x
.9124	91 36		sta ($36),y			sta 	(zTemp0),y
.9126	e8		inx				inx
.9127	c8		iny				iny
.9128	ec 02 07	cpx $0702			cpx 	identTypeEnd
.912b	d0 f4		bne $9121			bne 	_CCVCopyName
.912d	98		tya				tya 								; patch offset
.912e	92 36		sta ($36)			sta 	(zTemp0)
.9130	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.9132	91 36		sta ($36),y			sta 	(zTemp0),y
.9134	88		dey				dey
.9135	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.9137	09 80		ora #$80			ora 	#$80
.9139	91 36		sta ($36),y			sta 	(zTemp0),y
.913b					_CCVFound:
.913b	20 a0 91	jsr $91a0			jsr 	VariableClose 				; map out variables, perhaps.
.913e	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.9140	38		sec				sec
.9141	e9 10		sbc #$10			sbc 	#(VariableSpace >> 8) 		; offset from the start
.9143	09 40		ora #$40			ora 	#$40 						; make it a writeable token
.9145	20 c0 90	jsr $90c0			jsr 	TokeniseWriteByte
.9148	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.914a	20 c0 90	jsr $90c0			jsr 	TokeniseWriteByte
.914d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./variants/hardware/junior/memory.asm

.977c					MemoryPeek:
.977c	b2 36		lda ($36)			lda 	(zTemp0)
.977e	60		rts				rts
.977f					MemoryPoke:
.977f	92 36		sta ($36)			sta 	(zTemp0)
.9781	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./variants/hardware/junior/vectors.asm

.9782					EXTPrintCharacter:
.9782	48		pha				pha
.9783	da		phx				phx
.9784	5a		phy				phy
.9785	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.9788	7a		ply				ply
.9789	fa		plx				plx
.978a	68		pla				pla
.978b	60		rts				rts
.978c					EXTInputSingleCharacter:
.978c	da		phx				phx
.978d	5a		phy				phy
.978e					_EISCWait:
.978e	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.9791	c9 00		cmp #$00			cmp 	#0
.9793	f0 f9		beq $978e			beq 	_EISCWait
.9795	7a		ply				ply
.9796	fa		plx				plx
.9797	60		rts				rts
.9798					EXTInputLine:
.9798	a2 00		ldx #$00			ldx 	#0 							; position in line <- start of line
.979a					_ILLoop:
.979a	da		phx				phx 								; read character in
.979b	20 cf ff	jsr $ffcf			jsr 	$FFCF
.979e	fa		plx				plx
.979f	c9 08		cmp #$08			cmp 	#8 							; backspace, CBM doesn't need this.
.97a1	f0 12		beq $97b5			beq 	_ILBackspace
.97a3	c9 0d		cmp #$0d			cmp 	#13							; exit ?
.97a5	f0 15		beq $97bc			beq 	_ILExit
.97a7	c9 20		cmp #$20			cmp 	#32 						; ignore other control
.97a9	90 ef		bcc $979a			bcc 	_ILLoop
.97ab	e0 50		cpx #$50			cpx 	#MaxLineSize 				; already full buffer
.97ad	f0 eb		beq $979a			beq 	_ILLoop
.97af	9d 15 08	sta $0815,x			sta 	lineBuffer,x 				; save it
.97b2	e8		inx				inx
.97b3	80 e5		bra $979a			bra 	_ILLoop
.97b5					_ILBackspace:
.97b5	e0 00		cpx #$00			cpx 	#0  						; can't backspace, start of line.
.97b7	f0 e1		beq $979a			beq 	_ILLoop
.97b9	ca		dex				dex 								; back one.
.97ba	80 de		bra $979a			bra 	_ILLoop
.97bc					_ILExit:
.97bc	20 82 97	jsr $9782			jsr 	EXTPrintCharacter
.97bf	9e 15 08	stz $0815,x			stz 	lineBuffer,x 				; make ASCIIZ and exit with address in XA
.97c2	60		rts				rts
.97c3					EXTBreakCheck:
.97c3	4c e1 ff	jmp $ffe1			jmp		$FFE1

;******  Return to file: _basic.asm


;******  Processing file: ./variants/memory.flat/memory.asm

.914e					MemoryNew:
.914e	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.9150	85 30		sta $30				sta 	codePtr
.9152	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.9154	85 31		sta $31				sta 	codePtr+1
.9156	a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.9158	92 30		sta ($30)			sta 	(codePtr)
.915a	60		rts				rts
.915b					MemoryAppend:
.915b	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.915d	85 30		sta $30				sta 	codePtr
.915f	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.9161	85 31		sta $31				sta 	codePtr+1
.9163					_MAFindEnd:
.9163	b2 30		lda ($30)			lda 	(codePtr)
.9165	f0 0d		beq $9174			beq 	_MAFoundEnd
.9167	18		clc				clc
.9168	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.916a	65 30		adc $30				adc 	codePtr
.916c	85 30		sta $30				sta 	codePtr
.916e	90 02		bcc $9172			bcc 	_CREExit
.9170	e6 31		inc $31				inc 	codePtr+1
.9172					_CREExit:
.9172	80 ef		bra $9163			bra 	_MAFindEnd
.9174					_MAFoundEnd:
.9174	ac 15 07	ldy $0715			ldy 	tokenOffset 				; bytes to copy
.9177	c0 04		cpy #$04			cpy 	#4 							; blank line
.9179	f0 0e		beq $9189			beq 	_MANoLine
.917b	a9 00		lda #$00			lda 	#0 							; end of program
.917d	91 30		sta ($30),y			sta 	(codePtr),y
.917f					_MACopy:
.917f	88		dey				dey
.9180	b9 15 07	lda $0715,y			lda 	tokenOffset,y
.9183	91 30		sta ($30),y			sta 	(codePtr),y
.9185	c0 00		cpy #$00			cpy 	#0
.9187	d0 f6		bne $917f			bne 	_MACopy
.9189					_MANoLine:
.9189	60		rts				rts
.918a					MemoryInline:
.918a	98		tya				tya 								; put address into stack,x
.918b	18		clc				clc
.918c	65 30		adc $30				adc 	codePtr
.918e	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.9191	a5 31		lda $31				lda 	codePtr+1
.9193	69 00		adc #$00			adc 	#0
.9195	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9198	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.919b	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.919e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./variants/memory.flat/variable.asm

.919f					VariableOpen:
.919f	60		rts				rts
.91a0					VariableClose:
.91a0	60		rts				rts

;******  Return to file: _basic.asm


;******  End of listing
