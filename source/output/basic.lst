
; 64tass Turbo Assembler Macro V1.58.2974? listing file
; 64tass -D AUTORUN=0 "-D MONITOR_ADDRESS=\$E000" "-D LOCKOUT_ADDRESS=\$F000" "-D BASIC_ADDRESS=\$38000" "-D SOURCE_ADDRESS=\$28000" "-D SPRITE_ADDRESS=\$30000" -q -b -Wall -c -C -D "HARDWARE=0 $'\x9'$'\x9'$'\x9'$'\x9'$'\x9'$'\x9'" -L output/basic.lst -l output/basic.lbl -Wall -o build/basic.rom _basic.asm
; Thu Jan 26 14:04:39 2023

;Offset	;PC	;Hex		;Monitor	;Source

;******  Command line definitions

=0						AUTORUN=0
=$e000						 MONITOR_ADDRESS=$E000
=$f000						 LOCKOUT_ADDRESS=$F000
=$38000						 BASIC_ADDRESS=$38000
=$28000						 SOURCE_ADDRESS=$28000
=$30000						 SPRITE_ADDRESS=$30000
=0						HARDWARE=0

;******  Processing input file: _basic.asm


;******  Processing file: ./common/aa.system/01common.inc

=$30						ZeroPageMandatory = $30
=$50						ZeroPagePreference = $50
=$400						MemoryStorage = $400
=$2000						BasicStart = $2000
=$8000						BasicEnd = $8000
=$8000						CodeStart = $8000
=$1000						VariableSpace = $1000
=$2000						EndVariableSpace = $2000
=8						MathStackSize = 8
=512						BasicStackSize = 512
=3584						BasicStackBase = $1000-BasicStackSize
=80						MaxLineSize = 80

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/04data.inc

.0030						codePtr:
>0030								.fill 	4
.0034						basicStack:
>0034								.fill 	2
.0036						zTemp0:
>0036								.fill 	2
.0038						zTemp1:
>0038								.fill 	2
.003a						zTemp2:
>003a								.fill 	2
.003c						zsTemp:
>003c								.fill 	2
.003e						zaTemp:
>003e								.fill 	2
=$30						safePtr = codePtr 							; minimise direct tinkering
=$80						NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20						NSBIsReference = $20 						; bit 5 : is a reference
=$10						NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18						NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03						NSBRefMask = $03 							; bits 0,1 : Bytes of reference, 00 = 4,01 = 1,10=2
=$04						NSBIsArray = $04
=$00						NSTInteger = $00 							; base types for bits 3..4
=$08						NSTFloat = $08
=$10						NSTString = $10
=$18						NSTProcedure = $18
.0050						NSStatus:
>0050								.fill 	MathStackSize
.0058						NSMantissa0:
>0058								.fill 	MathStackSize 				; (this is my integer mantissa system)
.0060						NSMantissa1:
>0060								.fill 	MathStackSize
.0068						NSMantissa2:
>0068								.fill 	MathStackSize
.0070						NSMantissa3:
>0070								.fill 	MathStackSize
.0078						NSExponent:
>0078								.fill 	MathStackSize
.0400						identStart:
>0400								.fill 	1
.0401						identTypeStart:
>0401								.fill 	1
.0402						identTypeEnd:
>0402								.fill 	1
.0403						identHash:
>0403								.fill 	1
.0404						identTypeByte:
>0404								.fill 	1	 						; (see tokenising.pdf)
.0405						encodeState:
>0405								.fill 	1
.0406						digitTemp:
>0406								.fill 	1
.0407						decimalCount:
>0407								.fill 	1
.0408						lowMemPtr:
>0408								.fill 	2
.040a						stringMemory:
>040a								.fill 	2
.040c						stringInitialised:
>040c								.fill 	1
.040d						stringTempPointer:
>040d								.fill 	2
.040f						breakCheck:
>040f								.fill 	1
.0410						decimalPlaces:
>0410								.fill 	1
.0411						dbOffset:
>0411								.fill 	1
.0412						lastParameter:
>0412								.fill 	1
.0413						dataPointer:
>0413								.fill 	5
.0418						inDataStatement:
>0418								.fill 	1
.0419						tbOffset:
>0419								.fill 	1
.041a						AssemblerAddress:
>041a								.fill 	2
.041c						AssemblerControl:
>041c								.fill 	1
.041d						ParamStart:
>041d								.fill 	2
.041f						IsGroup1:
>041f								.fill 	1
.0420						BaseOpcode:
>0420								.fill 	1
.0421						ModeMask:
>0421								.fill 	1
.0422						listIndent:
>0422								.fill 	1
.0423						lcLastCharacter:
>0423								.fill 	1
.0424						isPrintFlag:
>0424								.fill 	1
.0425						currentListColour:
>0425								.fill 	1
.0426						tokenOffset:
>0426								.fill 	1
.0427						tokenLineNumber:
>0427								.fill 	2
.0429						tokenBuffer:
>0429								.fill 	253
.0526						lineBuffer:
>0526								.fill 	253
.0623						numberBuffer:
>0623								.fill 	34
.0645						decimalBuffer:
>0645								.fill 	16

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/ab.system/macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/ab.system/ticktask.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/constants.inc

=$80						AM_ISZP = $80
=$40						AM_ISG1 = $40
=$20						AM_ISG2 = $20
=224						AM_IMMEDIATE = AM_ISZP+AM_ISG1+AM_ISG2+$00
=228						AM_ZEROPAGE = AM_ISZP+AM_ISG1+AM_ISG2+$04
=40						AM_ACC = AM_ISG2+$08
=108						AM_ABS = AM_ISG1+AM_ISG2+$0C
=208						AM_INDY = AM_ISZP+AM_ISG1+$10
=244						AM_ZEROX = AM_ISZP+AM_ISG1+AM_ISG2+$14
=120						AM_ABSY = AM_ISG1+AM_ISG2+$18
=124						AM_ABSX = AM_ISG1+AM_ISG2+$1C
=209						AM_IND = AM_ISZP+AM_ISG1+$11
=$80						AM_ZEROY = AM_ISZP
=$01						AM_INDABS = $01
=$02						AM_INDABSX = $02
=192						AM_INDX = AM_ISZP+AM_ISG1+$00

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/handlers.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.inc

=1						ERRID_BREAK = 1
=2						ERRID_SYNTAX = 2
=3						ERRID_DIVZERO = 3
=4						ERRID_RANGE = 4
=5						ERRID_TYPE = 5
=6						ERRID_MEMORY = 6
=7						ERRID_ARGUMENT = 7
=8						ERRID_STOP = 8
=9						ERRID_STRING = 9
=10						ERRID_ASSERT = 10
=11						ERRID_DATA = 11
=12						ERRID_NOTDONE = 12
=13						ERRID_LINE = 13
=14						ERRID_GOSUB = 14
=15						ERRID_REPEAT = 15
=16						ERRID_WHILE = 16
=17						ERRID_FOR = 17
=18						ERRID_STACK = 18
=19						ERRID_STRUCT = 19
=20						ERRID_PROC = 20
=21						ERRID_REDEFINE = 21
=22						ERRID_ARRAYSIZE = 22
=23						ERRID_ARRAYIDX = 23
=24						ERRID_ARRAYDEC = 24
=25						ERRID_NOTFOUND = 25
=26						ERRID_DRIVEIO = 26
=27						ERRID_VERIFY = 27

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst.inc

=$00						KWD_LESSLESS                         = $00; $00 <<
=$01						KWD_LESSEQUAL                        = $01; $01 <=
=$02						KWD_LESSGREATER                      = $02; $02 <>
=$03						KWD_PLINGPLING3                      = $03; $03 !!3
=$04						KWD_GREATERLESS                      = $04; $04 ><
=$05						KWD_GREATEREQUAL                     = $05; $05 >=
=$06						KWD_GREATERGREATER                   = $06; $06 >>
=$07						KWD_PLINGPLING7                      = $07; $07 !!7
=$08						KWD_PLINGPLING8                      = $08; $08 !!8
=$09						KWD_PLINGPLING9                      = $09; $09 !!9
=$0a						KWD_PLINGPLING10                     = $0a; $0a !!10
=$0b						KWD_PLINGPLING11                     = $0b; $0b !!11
=$0c						KWD_PLINGPLING12                     = $0c; $0c !!12
=$0d						KWD_PLINGPLING13                     = $0d; $0d !!13
=$0e						KWD_PLINGPLING14                     = $0e; $0e !!14
=$0f						KWD_PLINGPLING15                     = $0f; $0f !!15
=$10						KWD_ATCH                             = $10; $10 @
=$11						KWD_PLINGPLING17                     = $11; $11 !!17
=$12						KWD_PLINGPLING18                     = $12; $12 !!18
=$13						KWD_LSQPAREN                         = $13; $13 [
=$14						KWD_BACKSLASH                        = $14; $14 \
=$15						KWD_RSQPAREN                         = $15; $15 ]
=$16						KWD_HAT                              = $16; $16 ^
=$17						KWD_UNDERSCORE                       = $17; $17 _
=$18						KWD_BQUOTE                           = $18; $18 `
=$19						KWD_PLINGPLING25                     = $19; $19 !!25
=$1a						KWD_PLINGPLING26                     = $1a; $1a !!26
=$1b						KWD_LCURLY                           = $1b; $1b {
=$1c						KWD_BAR                              = $1c; $1c |
=$1d						KWD_RCURLY                           = $1d; $1d }
=$1e						KWD_TILDE                            = $1e; $1e ~
=$21						KWD_PLING                            = $21; $21 !
=$22						KWD_DQUOTE                           = $22; $22 "
=$23						KWD_HASH                             = $23; $23 #
=$24						KWD_DOLLAR                           = $24; $24 $
=$25						KWD_PERCENT                          = $25; $25 %
=$26						KWD_AMPERSAND                        = $26; $26 &
=$27						KWD_QUOTE                            = $27; $27 '
=$28						KWD_LPAREN                           = $28; $28 (
=$29						KWD_RPAREN                           = $29; $29 )
=$2a						KWD_STAR                             = $2a; $2a *
=$2b						KWD_PLUS                             = $2b; $2b +
=$2c						KWD_COMMA                            = $2c; $2c ,
=$2d						KWD_MINUS                            = $2d; $2d -
=$2e						KWD_PERIOD                           = $2e; $2e .
=$2f						KWD_SLASH                            = $2f; $2f /
=$30						KWD_0                                = $30; $30 0
=$31						KWD_1                                = $31; $31 1
=$32						KWD_2                                = $32; $32 2
=$33						KWD_3                                = $33; $33 3
=$34						KWD_4                                = $34; $34 4
=$35						KWD_5                                = $35; $35 5
=$36						KWD_6                                = $36; $36 6
=$37						KWD_7                                = $37; $37 7
=$38						KWD_8                                = $38; $38 8
=$39						KWD_9                                = $39; $39 9
=$3a						KWD_COLON                            = $3a; $3a :
=$3b						KWD_SEMICOLON                        = $3b; $3b ;
=$3c						KWD_LESS                             = $3c; $3c <
=$3d						KWD_EQUAL                            = $3d; $3d =
=$3e						KWD_GREATER                          = $3e; $3e >
=$3f						KWD_QMARK                            = $3f; $3f ?
=$83						KWD_ABSLPAREN                        = $83; $83 ABS(
=$84						KWD_ALLOCLPAREN                      = $84; $84 ALLOC(
=$85						KWD_ASCLPAREN                        = $85; $85 ASC(
=$86						KWD_CHRDOLLARLPAREN                  = $86; $86 CHR$(
=$87						KWD_EVENTLPAREN                      = $87; $87 EVENT(
=$88						KWD_FALSE                            = $88; $88 FALSE
=$89						KWD_FRACLPAREN                       = $89; $89 FRAC(
=$8a						KWD_GETDOLLARLPAREN                  = $8a; $8a GET$(
=$8b						KWD_GETLPAREN                        = $8b; $8b GET(
=$8c						KWD_GETDATEDOLLARLPAREN              = $8c; $8c GETDATE$(
=$8d						KWD_GETTIMEDOLLARLPAREN              = $8d; $8d GETTIME$(
=$8e						KWD_HITLPAREN                        = $8e; $8e HIT(
=$8f						KWD_INKEYDOLLARLPAREN                = $8f; $8f INKEY$(
=$90						KWD_INKEYLPAREN                      = $90; $90 INKEY(
=$91						KWD_INTLPAREN                        = $91; $91 INT(
=$92						KWD_ISVALLPAREN                      = $92; $92 ISVAL(
=$93						KWD_ITEMCOUNTLPAREN                  = $93; $93 ITEMCOUNT(
=$94						KWD_ITEMGETDOLLARLPAREN              = $94; $94 ITEMGET$(
=$95						KWD_JOYBLPAREN                       = $95; $95 JOYB(
=$96						KWD_JOYXLPAREN                       = $96; $96 JOYX(
=$97						KWD_JOYYLPAREN                       = $97; $97 JOYY(
=$98						KWD_KEYDOWNLPAREN                    = $98; $98 KEYDOWN(
=$99						KWD_LEFTDOLLARLPAREN                 = $99; $99 LEFT$(
=$9a						KWD_LENLPAREN                        = $9a; $9a LEN(
=$9b						KWD_MAXLPAREN                        = $9b; $9b MAX(
=$9c						KWD_MIDDOLLARLPAREN                  = $9c; $9c MID$(
=$9d						KWD_MINLPAREN                        = $9d; $9d MIN(
=$9e						KWD_NOTLPAREN                        = $9e; $9e NOT(
=$9f						KWD_PEEKLPAREN                       = $9f; $9f PEEK(
=$a0						KWD_PEEKDLPAREN                      = $a0; $a0 PEEKD(
=$a1						KWD_PEEKLLPAREN                      = $a1; $a1 PEEKL(
=$a2						KWD_PEEKWLPAREN                      = $a2; $a2 PEEKW(
=$a3						KWD_PLAYINGLPAREN                    = $a3; $a3 PLAYING(
=$a4						KWD_RANDOMLPAREN                     = $a4; $a4 RANDOM(
=$a5						KWD_RIGHTDOLLARLPAREN                = $a5; $a5 RIGHT$(
=$a6						KWD_RNDLPAREN                        = $a6; $a6 RND(
=$a7						KWD_SGNLPAREN                        = $a7; $a7 SGN(
=$a8						KWD_SPCLPAREN                        = $a8; $a8 SPC(
=$a9						KWD_STRDOLLARLPAREN                  = $a9; $a9 STR$(
=$aa						KWD_TIMERLPAREN                      = $aa; $aa TIMER(
=$ab						KWD_TRUE                             = $ab; $ab TRUE
=$ac						KWD_VALLPAREN                        = $ac; $ac VAL(
=$ad						KWD_FOR                              = $ad; $ad FOR
=$ae						KWD_IF                               = $ae; $ae IF
=$af						KWD_PROC                             = $af; $af PROC
=$b0						KWD_REPEAT                           = $b0; $b0 REPEAT
=$b1						KWD_WHILE                            = $b1; $b1 WHILE
=$b2						KWD_ENDIF                            = $b2; $b2 ENDIF
=$b3						KWD_ENDPROC                          = $b3; $b3 ENDPROC
=$b4						KWD_NEXT                             = $b4; $b4 NEXT
=$b5						KWD_THEN                             = $b5; $b5 THEN
=$b6						KWD_UNTIL                            = $b6; $b6 UNTIL
=$b7						KWD_WEND                             = $b7; $b7 WEND
=$b8						KWD_AT                               = $b8; $b8 AT
=$b9						KWD_BY                               = $b9; $b9 BY
=$ba						KWD_CALL                             = $ba; $ba CALL
=$bb						KWD_CIRCLE                           = $bb; $bb CIRCLE
=$bc						KWD_CLEAR                            = $bc; $bc CLEAR
=$bd						KWD_COLOR                            = $bd; $bd COLOR
=$be						KWD_COLOUR                           = $be; $be COLOUR
=$bf						KWD_DATA                             = $bf; $bf DATA
=$c0						KWD_DIM                              = $c0; $c0 DIM
=$c1						KWD_DOWNTO                           = $c1; $c1 DOWNTO
=$c2						KWD_ELSE                             = $c2; $c2 ELSE
=$c3						KWD_FROM                             = $c3; $c3 FROM
=$c4						KWD_GFX                              = $c4; $c4 GFX
=$c5						KWD_HERE                             = $c5; $c5 HERE
=$c6						KWD_IMAGE                            = $c6; $c6 IMAGE
=$c7						KWD_LET                              = $c7; $c7 LET
=$c8						KWD_LINE                             = $c8; $c8 LINE
=$c9						KWD_LOCAL                            = $c9; $c9 LOCAL
=$ca						KWD_MEMCOPY                          = $ca; $ca MEMCOPY
=$cb						KWD_OFF                              = $cb; $cb OFF
=$cc						KWD_ON                               = $cc; $cc ON
=$cd						KWD_OUTLINE                          = $cd; $cd OUTLINE
=$ce						KWD_PALETTE                          = $ce; $ce PALETTE
=$cf						KWD_PLOT                             = $cf; $cf PLOT
=$d0						KWD_POKE                             = $d0; $d0 POKE
=$d1						KWD_POKED                            = $d1; $d1 POKED
=$d2						KWD_POKEL                            = $d2; $d2 POKEL
=$d3						KWD_POKEW                            = $d3; $d3 POKEW
=$d4						KWD_READ                             = $d4; $d4 READ
=$d5						KWD_RECT                             = $d5; $d5 RECT
=$d6						KWD_REM                              = $d6; $d6 REM
=$d7						KWD_SOLID                            = $d7; $d7 SOLID
=$d8						KWD_SOUND                            = $d8; $d8 SOUND
=$d9						KWD_SPRITE                           = $d9; $d9 SPRITE
=$da						KWD_TEXT                             = $da; $da TEXT
=$db						KWD_TO                               = $db; $db TO

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst0.inc

=$80						KWC_EOL = $80
=$ff						KWC_STRING = $FF
=$fe						KWC_HEXCONST = $FE
=$ad						KWC_FIRST_STRUCTURE = $ad
=$b2						KWC_FIRST_STRUCTURE_DEC = $b2
=$b7						KWC_LAST_STRUCTURE = $b7
=$83						KWC_FIRST_UNARY = $83
=$ac						KWC_LAST_UNARY = $ac

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/memory/memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/stack.inc

=$e0						STK_GOSUB = $E0
=$d0						STK_FOR = $D0
=$c0						STK_REPEAT = $C0
=$b0						STK_PROC = $B0
=$a0						STK_WHILE = $A0
=$01						STK_LOCALN = $01
=$02						STK_LOCALS = $02

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/00start.asm

.8000						F256Header:
>8000		f2 56						.text	$f2,$56         			; Signature
>8002		03						.byte   3               			; 3 blocks
>8003		04						.byte   4               			; mount at $8000
>8004		40 80						.word   Boot 	      				; Start here
>8006		00 00						.word   0 			               	; version
>8008		00 00						.word   0               			; kernel
>800a		53 75 70 65 72 42 41 53				.text   "SuperBASIC",0 				; name of program.
>8012		49 43 00
.8040		4c 9d 80	jmp $809d	Boot:	jmp 	Start

;******  Processing file: ./common/aa.system/../../../modules/_build/_linker.module

=1						PagingEnabled = 1
.8043						EXTPrintCharacter:
.8043		e6 0d		inc $0d			inc 8+5
.8045		20 0b a0	jsr $a00b		jsr	Export_EXTPrintCharacter
.8048		08		php			php
.8049		c6 0d		dec $0d			dec 8+5
.804b		28		plp			plp
.804c		60		rts			rts
.804d						EXTPrintNoControl:
.804d		e6 0d		inc $0d			inc 8+5
.804f		20 00 a0	jsr $a000		jsr	Export_EXTPrintNoControl
.8052		08		php			php
.8053		c6 0d		dec $0d			dec 8+5
.8055		28		plp			plp
.8056		60		rts			rts
.8057						EXTInitialise:
.8057		e6 0d		inc $0d			inc 8+5
.8059		20 c6 a2	jsr $a2c6		jsr	Export_EXTInitialise
.805c		08		php			php
.805d		c6 0d		dec $0d			dec 8+5
.805f		28		plp			plp
.8060		60		rts			rts
.8061						EXTInputLine:
.8061		e6 0d		inc $0d			inc 8+5
.8063		20 da a1	jsr $a1da		jsr	Export_EXTInputLine
.8066		08		php			php
.8067		c6 0d		dec $0d			dec 8+5
.8069		28		plp			plp
.806a		60		rts			rts
.806b						GXGraphicDraw:
.806b		e6 0d		inc $0d			inc 8+5
.806d		20 cb a7	jsr $a7cb		jsr	Export_GXGraphicDraw
.8070		08		php			php
.8071		c6 0d		dec $0d			dec 8+5
.8073		28		plp			plp
.8074		60		rts			rts
.8075						SNDCommand:
.8075		e6 0d		inc $0d			inc 8+5
.8077		20 d8 bb	jsr $bbd8		jsr	Export_SNDCommand
.807a		08		php			php
.807b		c6 0d		dec $0d			dec 8+5
.807d		28		plp			plp
.807e		60		rts			rts
.807f						SNDUpdate:
.807f		e6 0d		inc $0d			inc 8+5
.8081		20 0b bc	jsr $bc0b		jsr	Export_SNDUpdate
.8084		08		php			php
.8085		c6 0d		dec $0d			dec 8+5
.8087		28		plp			plp
.8088		60		rts			rts
.8089						TKListConvertLine:
.8089		e6 0d		inc $0d			inc 8+5
.808b		20 89 b5	jsr $b589		jsr	Export_TKListConvertLine
.808e		08		php			php
.808f		c6 0d		dec $0d			dec 8+5
.8091		28		plp			plp
.8092		60		rts			rts
.8093						TKTokeniseLine:
.8093		e6 0d		inc $0d			inc 8+5
.8095		20 1d b8	jsr $b81d		jsr	Export_TKTokeniseLine
.8098		08		php			php
.8099		c6 0d		dec $0d			dec 8+5
.809b		28		plp			plp
.809c		60		rts			rts

;******  Return to file: ./common/aa.system/00start.asm

.809d		a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.809f		9a		txs				txs
.80a0		a5 00		lda $00				lda 	0  							; turn on editing of MMU LUT
.80a2		09 80		ora #$80			ora 	#$80
.80a4		85 00		sta $00				sta 	0
.80a6		ad 02 20	lda $2002			lda 	$2002 						; if $2002..5 is BT65 then jump to $2000
.80a9		c9 42		cmp #$42			cmp 	#"B"
.80ab		d0 18		bne $80c5			bne 	_NoMachineCode
.80ad		ad 03 20	lda $2003			lda 	$2003
.80b0		c9 54		cmp #$54			cmp 	#"T"
.80b2		d0 11		bne $80c5			bne 	_NoMachineCode
.80b4		ad 04 20	lda $2004			lda 	$2004
.80b7		c9 36		cmp #$36			cmp 	#"6"
.80b9		d0 0a		bne $80c5			bne 	_NoMachineCode
.80bb		ad 05 20	lda $2005			lda 	$2005
.80be		c9 35		cmp #$35			cmp 	#"5"
.80c0		d0 03		bne $80c5			bne 	_NoMachineCode
.80c2		4c 00 20	jmp $2000			jmp 	$2000
.80c5						_NoMachineCode:
.80c5		20 57 80	jsr $8057			jsr 	EXTInitialise 				; hardware initialise
.80c8		a9 00		lda #$00			lda 	#0 							; zero the default drive.
.80ca		20 58 82	jsr $8258			jsr 	KNLSetDrive
.80cd		a9 00		lda #$00			lda 	#0 							; graphics system initialise.
.80cf		aa		tax				tax
.80d0		a8		tay				tay
.80d1		20 6b 80	jsr $806b			jsr 	GXGraphicDraw
.80d4		a9 0f		lda #$0f			lda 	#$0F 						; initialise sound system
.80d6		20 75 80	jsr $8075			jsr 	SNDCommand
.80d9		a9 8d		lda #$8d			lda 	#128+13 					; Display FPGA information.
.80db		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.80de		a9 09		lda #$09			lda 	#9
.80e0		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.80e3		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.80e6		64 01		stz $01				stz 	1
.80e8		ad ad d6	lda $d6ad			lda 	$D6AD
.80eb		20 2d 84	jsr $842d			jsr 	PrintHex
.80ee		ad ac d6	lda $d6ac			lda 	$D6AC
.80f1		20 2d 84	jsr $842d			jsr 	PrintHex
.80f4		ad ab d6	lda $d6ab			lda 	$D6AB
.80f7		20 2d 84	jsr $842d			jsr 	PrintHex
.80fa		ad aa d6	lda $d6aa			lda 	$D6AA
.80fd		20 2d 84	jsr $842d			jsr 	PrintHex
.8100		a9 20		lda #$20			lda 	#32
.8102		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.8105		ad a8 d6	lda $d6a8			lda 	$D6A8
.8108		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.810b		ad a9 d6	lda $d6a9			lda 	$D6A9
.810e		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.8111		a2 81		ldx #$81			ldx 	#Prompt >> 8 				; display prompt
.8113		a9 21		lda #$21			lda 	#Prompt & $FF
.8115		20 55 98	jsr $9855			jsr 	PrintStringXA
.8118		20 27 92	jsr $9227			jsr 	NewProgram 					; erase current program
.811b		4c 70 86	jmp $8670			jmp 	WarmStart					; make same size.
.811e		4c 70 86	jmp $8670			jmp 	WarmStart
>8121		0d 0d				Prompt:	.text 	13,13

;******  Processing file: ./common/aa.system/../generated/timestamp.asm

>8123		09 09 32 36 2f 30 31 2f			.text 9,9,"26/01/23 32"
>812b		32 33 20 33 32

;******  Return to file: ./common/aa.system/00start.asm

>8130		0d 0d 0d 00					.text 	13,13,13,0

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/ab.system/events.asm

.8134						ProcessEvents:
.8134		20 97 82	jsr $8297			jsr 	KNLSetEventPointer
.8137		20 a5 81	jsr $81a5			jsr     GetNextEvent 				; get next event
.813a		b0 27		bcs $8163			bcs 	_PEExitZ 					; nothing left to process.
.813c		ad 82 07	lda $0782			lda 	KNLEvent.type 				; go back if event not key.pressed.
.813f		c9 08		cmp #$08			cmp 	#kernel.event.key.PRESSED
.8141		d0 f1		bne $8134			bne 	ProcessEvents
.8143		ad 88 07	lda $0788			lda	 	KNLEvent.key.flags 			; is KNLEvent.key.flags = 0 ?
.8146		d0 ec		bne $8134			bne 	ProcessEvents
.8148		ad 87 07	lda $0787			lda 	KNLEvent.key.ascii 			; is it Ctrl+C
.814b		c9 03		cmp #$03			cmp 	#3
.814d		f0 11		beq $8160			beq 	_PEReturnBreak  			; no, keep going.
.814f		da		phx				phx
.8150		ae 5d 06	ldx $065d			ldx 	KeyboardQueueEntries 		; get keyboard queue size into X
.8153		e0 08		cpx #$08			cpx 	#KBDQueueSize 				; if full, then ignore
.8155		f0 06		beq $815d			beq 	_PENoQueue
.8157		9d 55 06	sta $0655,x			sta 	KeyboardQueue,x 			; write into queue
.815a		ee 5d 06	inc $065d			inc 	KeyboardQueueEntries 		; bump count
.815d						_PENoQueue:
.815d		fa		plx				plx
.815e		80 d4		bra $8134			bra 	ProcessEvents
.8160						_PEReturnBreak:
.8160		a9 ff		lda #$ff			lda 	#255 						; return with NZ state
.8162		60		rts				rts
.8163						_PEExitZ:
.8163		a9 00		lda #$00			lda 	#0
.8165		60		rts				rts
.8166						PopKeyboardQueue:
.8166		ad 5d 06	lda $065d			lda 	KeyboardQueueEntries 		; get keyboard queue entries.
.8169		f0 17		beq $8182			beq 	_PKQExit 					; zero, then exit.
.816b		ad 55 06	lda $0655			lda 	KeyboardQueue 				; save head of keyboard queue
.816e		48		pha				pha
.816f		da		phx				phx 								; drop head of queue
.8170		a2 00		ldx #$00			ldx 	#0
.8172						_PKQLoop:
.8172		bd 56 06	lda $0656,x			lda 	KeyboardQueue+1,x 			; shift everything back one.
.8175		9d 55 06	sta $0655,x			sta 	KeyboardQueue,x  			; not efficient but doesn't matter.
.8178		e8		inx				inx
.8179		e0 07		cpx #$07			cpx 	#7
.817b		d0 f5		bne $8172			bne 	_PKQLoop
.817d		fa		plx				plx
.817e		ce 5d 06	dec $065d			dec 	KeyboardQueueEntries 		; one fewer in queue.
.8181		68		pla				pla 								; restore head of queue.
.8182						_PKQExit:
.8182		60		rts				rts
.8183						KNLGetKeyPressed:
.8183		ad 5d 06	lda $065d			lda 	KeyboardQueueEntries 		; something in the queue
.8186		d0 de		bne $8166			bne 	PopKeyboardQueue 			; if so, pop and return it
.8188		20 34 81	jsr $8134			jsr 	ProcessEvents 				; process any outstanding events
.818b		a9 00		lda #$00			lda 	#0
.818d		60		rts				rts
.818e						KNLGetSingleCharacter:
.818e		20 83 81	jsr $8183			jsr 	KNLGetKeyPressed
.8191		c9 00		cmp #$00			cmp 	#0
.8193		f0 f9		beq $818e			beq 	KNLGetSingleCharacter
.8195		60		rts				rts
=8						KBDQueueSize = 8
.0655						KeyboardQueue:
>0655								.fill 	KBDQueueSize
.065d						KeyboardQueueEntries:
>065d								.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/ab.system/ticktask.asm

.8196						TickHandler:
.8196		5a		phy				phy 								; need to preserve Y
.8197		20 7f 80	jsr $807f			jsr 	SNDUpdate 					; update sound
.819a		7a		ply				ply
.819b		60		rts				rts
.065e						LastTick:
>065e								.fill 		1

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/ab.system/trackio.asm

.819c						ResetIOTracking:
.819c		a2 21		ldx #$21			ldx 	#GNEEnd-GNEBegin-1
.819e						_RIOLoop:
.819e		9e 5f 06	stz $065f,x			stz 	GNEBegin,x
.81a1		ca		dex				dex
.81a2		10 fa		bpl $819e			bpl 	_RIOLoop
.81a4		60		rts				rts
.81a5						GetNextEvent:
.81a5		20 00 ff	jsr $ff00			jsr 	kernel.NextEvent 			; get event
.81a8		08		php				php									; save yes/no flag.
.81a9		b0 29		bcs $81d4			bcs 	_GNEExit
.81ab		48		pha				pha 								; save registers
.81ac		da		phx				phx
.81ad		5a		phy				phy
.81ae		ad 82 07	lda $0782			lda 	KNLEvent.type	 			; check for PRESSED or RELEASED
.81b1		c9 08		cmp #$08			cmp 	#kernel.event.key.PRESSED
.81b3		f0 04		beq $81b9			beq 	_GNEKeyEvent
.81b5		c9 0a		cmp #$0a			cmp 	#kernel.event.key.RELEASED
.81b7		d0 08		bne $81c1			bne 	_GNECheckMouseEvent
.81b9						_GNEKeyEvent:
.81b9		20 06 82	jsr $8206			jsr 	ProcessKeyboardEvent 		; process keyboard up/down.
.81bc		20 23 82	jsr $8223			jsr 	UpdateKeyboardJoystick 		; update the keyboard-joystick.
.81bf		80 10		bra $81d1			bra 	_GNEEventExit
.81c1						_GNECheckMouseEvent:
.81c1		c9 0c		cmp #$0c			cmp 	#kernel.event.mouse.DELTA 	; check for move events
.81c3		d0 05		bne $81ca			bne 	_GNENotDelta
.81c5		20 d6 81	jsr $81d6			jsr 	ProcessMouseDeltaEvent 		; process them.
.81c8		80 07		bra $81d1			bra 	_GNEEventExit
.81ca						_GNENotDelta:
.81ca		c9 0e		cmp #$0e			cmp 	#kernel.event.mouse.CLICKS 	; check for click events
.81cc		d0 03		bne $81d1			bne 	_GNEEventExit
.81ce		20 ee 81	jsr $81ee			jsr 	ProcessMouseClickEvent 		; process them.
.81d1						_GNEEventExit:
.81d1		7a		ply				ply 								; restore registers
.81d2		fa		plx				plx
.81d3		68		pla				pla
.81d4						_GNEExit:
.81d4		28		plp				plp
.81d5		60		rts				rts
.81d6						ProcessMouseDeltaEvent:
.81d6		ad 85 07	lda $0785			lda 	KNLEvent.mouse.delta.x
.81d9		20 2d 84	jsr $842d			jsr 	PrintHex
.81dc		ad 86 07	lda $0786			lda 	KNLEvent.mouse.delta.y
.81df		20 2d 84	jsr $842d			jsr 	PrintHex
.81e2		ad 87 07	lda $0787			lda 	KNLEvent.mouse.delta.z
.81e5		20 2d 84	jsr $842d			jsr 	PrintHex
.81e8		a9 20		lda #$20			lda 	#' '
.81ea		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.81ed		60		rts				rts
.81ee						ProcessMouseClickEvent:
.81ee		ad 85 07	lda $0785			lda 	KNLEvent.mouse.clicks.inner
.81f1		20 2d 84	jsr $842d			jsr 	PrintHex
.81f4		ad 86 07	lda $0786			lda 	KNLEvent.mouse.clicks.middle
.81f7		20 2d 84	jsr $842d			jsr 	PrintHex
.81fa		ad 87 07	lda $0787			lda 	KNLEvent.mouse.clicks.outer
.81fd		20 2d 84	jsr $842d			jsr 	PrintHex
.8200		a9 20		lda #$20			lda 	#' '
.8202		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.8205		60		rts				rts
.8206						ProcessKeyboardEvent:
.8206		ad 86 07	lda $0786			lda 	KNLEvent.key.raw 			; raw key code.
.8209		20 44 82	jsr $8244			jsr 	KeyboardConvertXA  			; convert to index in X, mask in A
.820c		ac 82 07	ldy $0782			ldy 	KNLEvent.type
.820f		c0 0a		cpy #$0a			cpy 	#kernel.event.key.RELEASED 	; check if pressed/released
.8211		f0 07		beq $821a			beq 	_PKERelease
.8213		1d 5f 06	ora $065f,x			ora 	KeyStatus,x 				; set bit
.8216		9d 5f 06	sta $065f,x			sta 	KeyStatus,x
.8219		60		rts				rts
.821a						_PKERelease:
.821a		49 ff		eor #$ff			eor 	#$FF						; clear bit
.821c		3d 5f 06	and $065f,x			and 	KeyStatus,x
.821f		9d 5f 06	sta $065f,x			sta 	KeyStatus,x
.8222		60		rts				rts
.8223						UpdateKeyboardJoystick:
.8223		9c 80 06	stz $0680			stz 	KeyJoystick
.8226		a2 00		ldx #$00			ldx 	#0
.8228						_UKJLoop:
.8228		bd 3f 82	lda $823f,x			lda 	_UKJKeys,x 					; which key
.822b		29 1f		and #$1f			and 	#$1F
.822d		a8		tay				tay
.822e		b9 5f 06	lda $065f,y			lda 	KeyStatus,y 				; get status
.8231		29 10		and #$10			and 	#$10 						; letters always bit 4 (actually ASCII of L/C)
.8233		18		clc				clc  								; set C if bit set
.8234		69 ff		adc #$ff			adc 	#$FF
.8236		2e 80 06	rol $0680			rol 	KeyJoystick 				; shift into place
.8239		e8		inx				inx
.823a		e0 05		cpx #$05			cpx 	#5 							; do all 5
.823c		d0 ea		bne $8228			bne 	_UKJLoop
.823e		60		rts				rts
.823f						_UKJKeys:
>823f		4c 58 5a 4d 4b					.byte	'L','X','Z','M','K'
.8244						KeyboardConvertXA:
.8244		a2 01		ldx #$01			ldx 	#1 							; set the mask temp to %00000001
.8246		8e 7f 06	stx $067f			stx 	KeyMaskTemp
.8249						_KCCALoop:
.8249		18		clc				clc
.824a		69 20		adc #$20			adc 	#$20 						; upper 3 bits are the mask, if causes CS A will be in the range 00-1F
.824c		b0 05		bcs $8253			bcs 	_KCCADone
.824e		0e 7f 06	asl $067f			asl 	KeyMaskTemp 				; shift the mask temp
.8251		80 f6		bra $8249			bra 	_KCCALoop
.8253						_KCCADone:
.8253		aa		tax				tax 								; table entry in X
.8254		ad 7f 06	lda $067f			lda 	KeyMaskTemp 				; mask temp in A.
.8257		60		rts				rts
.065f						GNEBegin:
.065f						KeyStatus:
>065f								.fill 	32
.067f						KeyMaskTemp:
>067f								.fill 	1
.0680						KeyJoystick:
>0680								.fill 	1
.0681						GNEEnd:

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/ab.system/wrapper.asm

=56						KERR_GENERAL = kernel.event.file.ERROR 		; Event $38
=50						KERR_CLOSED = kernel.event.file.CLOSED 		; Event $32
=40						KERR_NOTFOUND = kernel.event.file.NOT_FOUND ; Event $28
=48						KERR_EOF = kernel.event.file.EOF 			; Event $30
=64						KNLReadBufferLen = 64 								; read buffer size.
.8258						KNLSetDrive:
.8258		8d 81 07	sta $0781			sta 	KNLDefaultDrive
.825b		60		rts				rts
.825c						KNLOpenFileWrite:
.825c		48		pha				pha
.825d		a9 01		lda #$01			lda 	#kernel.args.file.open.WRITE
.825f		80 03		bra $8264			bra 	KNLOpenStart
.8261						KNLOpenFileRead:
.8261		48		pha				pha
.8262		a9 00		lda #$00			lda     #kernel.args.file.open.READ ; set READ mode.
.8264						KNLOpenStart:
.8264		85 f5		sta $f5				sta     kernel.args.file.open.mode
.8266		68		pla				pla
.8267		20 a2 82	jsr $82a2			jsr 	KNLSetupFileName
.826a		20 97 82	jsr $8297			jsr 	KNLSetEventPointer
.826d		ad 81 07	lda $0781			lda 	KNLDefaultDrive 			; currently drive zero only.
.8270		85 f3		sta $f3				sta 	kernel.args.file.open.drive
.8272		20 5c ff	jsr $ff5c			jsr     kernel.File.Open 			; open the file and exit.
.8275		a9 38		lda #$38			lda     #kernel.event.file.ERROR
.8277		b0 1d		bcs $8296			bcs     _out
.8279						_loop
.8279		20 0c ff	jsr $ff0c			jsr     kernel.Yield    			; event wait
.827c		20 a5 81	jsr $81a5			jsr     GetNextEvent
.827f		b0 f8		bcs $8279			bcs     _loop
.8281		ad 82 07	lda $0782			lda 	KNLEvent.type
.8284		c9 2a		cmp #$2a			cmp     #kernel.event.file.OPENED
.8286		f0 0a		beq $8292			beq 	_success
.8288		c9 28		cmp #$28			cmp     #kernel.event.file.NOT_FOUND
.828a		f0 0a		beq $8296			beq 	_out
.828c		c9 38		cmp #$38			cmp     #kernel.event.file.ERROR
.828e		f0 06		beq $8296			beq 	_out
.8290		80 e7		bra $8279			bra     _loop
.8292						_success
.8292		ad 85 07	lda $0785			lda     KNLEvent.file.stream
.8295		18		clc				clc
.8296						_out
.8296		60		rts				rts
.8297						KNLSetEventPointer:
.8297		48		pha				pha
.8298		a9 82		lda #$82			lda     #KNLEvent & $FF 			; tell kernel where to store event data
.829a		85 f0		sta $f0				sta     kernel.args.events+0
.829c		a9 07		lda #$07			lda     #KNLEvent >> 8
.829e		85 f1		sta $f1				sta     kernel.args.events+1
.82a0		68		pla				pla
.82a1		60		rts				rts
.82a2						KNLSetupFileName:
.82a2		5a		phy				phy 								; save Y on stack
.82a3		85 36		sta $36				sta 	zTemp0 						; save filename position in temp, and in kenrel slot
.82a5		86 37		stx $37				stx 	zTemp0+1
.82a7		85 fb		sta $fb				sta     kernel.args.file.open.fname+0
.82a9		86 fc		stx $fc				stx     kernel.args.file.open.fname+1
.82ab		a0 ff		ldy #$ff			ldy 	#$FF 						; get the filename length => Kernel slot
.82ad						_KNLGetLength:
.82ad		c8		iny				iny
.82ae		b1 36		lda ($36),y			lda 	(zTemp0),y
.82b0		d0 fb		bne $82ad			bne 	_KNLGetLength
.82b2		84 fd		sty $fd				sty 	kernel.args.file.open.fname_len
.82b4		7a		ply				ply
.82b5		60		rts				rts
.82b6						KNLReadBlock:
.82b6		85 f3		sta $f3				sta     kernel.args.file.read.stream
.82b8		86 f4		stx $f4				stx     kernel.args.file.read.buflen
.82ba		20 60 ff	jsr $ff60			jsr     kernel.File.Read 			; read request
.82bd		a9 38		lda #$38			lda     #kernel.event.file.ERROR    ; Kernel out of events/buffers; shouldn't happen
.82bf		b0 2e		bcs $82ef			bcs     _KGNBExitFail               ; report as general error
.82c1						_KGRBEventLoop:
.82c1		20 0c ff	jsr $ff0c			jsr     kernel.Yield    			; event wait
.82c4		20 a5 81	jsr $81a5			jsr     GetNextEvent
.82c7		b0 f8		bcs $82c1			bcs     _KGRBEventLoop
.82c9		ad 82 07	lda $0782			lda 	KNLEvent.type 				; get event
.82cc		c9 2c		cmp #$2c			cmp     #kernel.event.file.DATA 	; data, return data
.82ce		f0 0a		beq $82da			beq     _KNLRBGetNextByte
.82d0		c9 38		cmp #$38			cmp     #kernel.event.file.ERROR  	; errors on file i/o, return as appropriate.
.82d2		f0 1b		beq $82ef			beq 	_KGNBExitFail
.82d4		c9 30		cmp #$30			cmp     #kernel.event.file.EOF
.82d6		f0 17		beq $82ef			beq 	_KGNBExitFail
.82d8		80 e7		bra $82c1			bra 	_KGRBEventLoop
.82da						_KNLRBGetNextByte:
.82da		a9 81		lda #$81			lda     #<KNLReadBuffer 			; Set the target buffer
.82dc		85 fb		sta $fb				sta     kernel.args.recv.buf+0
.82de		a9 06		lda #$06			lda     #>KNLReadBuffer
.82e0		85 fc		sta $fc				sta     kernel.args.recv.buf+1
.82e2		ad 88 07	lda $0788			lda     KNLEvent.file.data.read 	; Set the target length
.82e5		85 fd		sta $fd				sta     kernel.args.recv.buflen
.82e7		20 04 ff	jsr $ff04			jsr     kernel.ReadData		       	; Get the data from the kernel  (Synchronous call, no error)
.82ea		ad 88 07	lda $0788			lda     KNLEvent.file.data.read 	; Return # of bytes read (in A)
.82ed		18		clc				clc
.82ee		60		rts				rts
.82ef						_KGNBExitFail:
.82ef		38		sec				sec
.82f0		60		rts				rts
.82f1						KNLWriteBlock:
.82f1		da		phx				phx
.82f2		5a		phy				phy
.82f3		85 f3		sta $f3				sta     kernel.args.file.write.stream ; save the stream.
.82f5		a5 36		lda $36				lda     zTemp0 						; save the data location.
.82f7		85 fb		sta $fb				sta     kernel.args.file.write.buf+0
.82f9		a5 37		lda $37				lda     zTemp0+1
.82fb		85 fc		sta $fc				sta     kernel.args.file.write.buf+1
.82fd		86 fd		stx $fd				stx     kernel.args.file.write.buflen ; Set the buffer length
.82ff		20 64 ff	jsr $ff64			jsr     kernel.File.Write 			; write it out.
.8302		a9 38		lda #$38			lda 	#kernel.event.file.ERROR 	; in case it fails.
.8304		b0 21		bcs $8327			bcs 	_KWBFailed
.8306						_KNLWLoop:
.8306		20 0c ff	jsr $ff0c			jsr     kernel.Yield
.8309		20 a5 81	jsr $81a5			jsr     GetNextEvent
.830c		b0 f8		bcs $8306			bcs     _KNLWLoop
.830e		ad 82 07	lda $0782			lda     KNLEvent.type 				; various errors.
.8311		c9 32		cmp #$32			cmp     #kernel.event.file.CLOSED
.8313		f0 12		beq $8327			beq 	_KWBFailed
.8315		c9 38		cmp #$38			cmp     #kernel.event.file.ERROR
.8317		f0 0e		beq $8327			beq 	_KWBFailed
.8319		c9 30		cmp #$30			cmp     #kernel.event.file.EOF
.831b		f0 0a		beq $8327			beq 	_KWBFailed
.831d		c9 2e		cmp #$2e			cmp     #kernel.event.file.WROTE 	; wait until block write succeeds
.831f		d0 e5		bne $8306			bne 	_KNLWLoop
.8321		18		clc				clc
.8322		ad 88 07	lda $0788			lda    KNLEvent.file.wrote.wrote 	; get bytes written.
.8325		80 01		bra $8328			bra 	_KWBExit
.8327						_KWBFailed:
.8327		38		sec				sec
.8328						_KWBExit:
.8328		7a		ply				ply
.8329		fa		plx				plx
.832a		60		rts				rts
.832b						KNLCloseFile:
.832b		85 f3		sta $f3				sta     kernel.args.file.close.stream
.832d		20 68 ff	jsr $ff68			jsr     kernel.File.Close
.8330		60		rts				rts
.8331						KNLReadController:
.8331		da		phx				phx
.8332		a6 01		ldx $01				ldx 	1 							; save current I/O in X
.8334		64 01		stz $01				stz 	1 							; switch to I/O 0
.8336		ad 00 dc	lda $dc00			lda 	$DC00  						; read VIA register
.8339		49 ff		eor #$ff			eor 	#$FF 						; make active '1'
.833b		0d 80 06	ora $0680			ora 	KeyJoystick 				; use key joystick.
.833e		86 01		stx $01				stx 	1 							; repair old I/O and exit
.8340		fa		plx				plx
.8341		60		rts				rts
.0681						KNLReadBuffer:
>0681								.fill   256
.0781						KNLDefaultDrive:
>0781								.byte 	?
.0782						KNLEvent
>0782						type        .byte   ?   ; Enum above
>0783						buf         .byte   ?   ; page id or zero
>0784						ext         .byte   ?   ; page id or zero
.0785						key
>0785						keyboard    .byte   ?   ; Keyboard ID
>0786						raw         .byte   ?   ; Raw key ID
>0787						ascii       .byte   ?   ; ASCII value
>0788						flags       .byte   ?   ; Flags (META)
=$80						META        = $80       ; Meta key; no associated ASCII value.
.0785						mouse
.0785						delta
>0785						x           .byte   ?
>0786						y           .byte   ?
>0787						z           .byte   ?
>0788						buttons     .byte   ?
.0785						clicks
>0785						inner       .byte   ?
>0786						middle      .byte   ?
>0787						outer       .byte   ?
.0785						joystick
>0785						joy0        .byte   ?
>0786						joy1        .byte   ?
.0785						udp
>0785						token       .byte   ?   ; TODO: break out into fields
.0785						file
>0785						stream      .byte   ?
>0786						cookie      .byte   ?
.0787						data
>0787						requested   .byte   ?   ; Requested number of bytes to read
>0788						read        .byte   ?   ; Number of bytes actually read
.0787						wrote
>0787						requested   .byte   ?   ; Requested number of bytes to read
>0788						wrote       .byte   ?   ; Number of bytes actually read
.0785						directory
>0785						stream      .byte   ?
>0786						cookie      .byte   ?
.0787						volume
>0787						len         .byte   ?   ; Length of volname (in buf)
>0788						flags       .byte   ?   ; block size, text encoding
.0787						file
>0787						len         .byte   ?
>0788						flags       .byte   ?   ; block scale, text encoding, approx size
.0787						free
>0787						flags       .byte   ?   ; block scale, text encoding, approx size

;******  Return to file: _basic.asm


;******  Processing file: ./common/api/api.asm

>ff00						NextEvent   .fill   4   ; Copy the next event into user-space.
>ff04						ReadData    .fill   4   ; Copy primary bulk event data into user-space
>ff08						ReadExt     .fill   4   ; Copy secondary bolk event data into user-space
>ff0c						Yield       .fill   4   ; Give unused time to the kernel.
>ff10						Putch       .fill   4   ; deprecated
>ff14						Basic       .fill   4   ; deprecated
>ff18						RunNamed    .fill   4   ; Chain to resident program by name.
>ff1c						            .fill   4   ; reserved
>ff20						List        .fill   4   ; Returns a bit-set of available block-accessible devices.
>ff24						GetName     .fill   4   ; Gets the hardware level name of the given block device or media.
>ff28						GetSize     .fill   4   ; Get the number of raw sectors (48 bits) for the given device
>ff2c						Read        .fill   4   ; Read a raw sector (48 bit LBA)
>ff30						Write       .fill   4   ; Write a raw sector (48 bit LBA)
>ff34						Format      .fill   4   ; Perform a low-level format if the media support it.
>ff38						Export      .fill   4   ; Update the FileSystem table with the partition table (if present).
>ff3c						List        .fill   4   ; Returns a bit-set of available logical devices.
>ff40						GetSize     .fill   4   ; Get the size of the partition or logical device in sectors.
>ff44						MkFS        .fill   4   ; Creates a new file-system on the logical device.
>ff48						CheckFS     .fill   4   ; Checks the file-system for errors and corrects them.
>ff4c						Mount       .fill   4   ; Mark the file-system as available for File and Directory operations.
>ff50						Unmount     .fill   4   ; Mark the file-system as unavailable for File and Directory operations.
>ff54						ReadBlock   .fill   4   ; Read a partition-local raw sector on an unmounted device.
>ff58						WriteBlock  .fill   4   ; Write a partition-local raw sector on an unmounted device.
>ff5c						Open        .fill   4   ; Open the given file for read, create, or append.
>ff60						Read        .fill   4   ; Request bytes from a file opened for reading.
>ff64						Write       .fill   4   ; Write bytes to a file opened for create or append.
>ff68						Close       .fill   4   ; Close an open file.
>ff6c						Rename      .fill   4   ; Rename a closed file.
>ff70						Delete      .fill   4   ; Delete a closed file.
>ff74						Open        .fill   4   ; Open a directory for reading.
>ff78						Read        .fill   4   ; Read a directory entry; may also return VOLUME and FREE events.
>ff7c						Close       .fill   4   ; Close a directory once finished reading.
>ff80						            .fill   4   ; call gate
>ff84						Reset       .fill   4   ; Re-init the display
>ff88						GetSize     .fill   4   ; Returns rows/cols in kernel args.
>ff8c						DrawRow     .fill   4   ; Draw text/color buffers left-to-right
>ff90						DrawColumn  .fill   4   ; Draw text/color buffers top-to-bottom
>ff94						GetIP       .fill   4   ; Get the local IP address.
>ff98						SetIP       .fill   4   ; Set the local IP address.
>ff9c						GetDNS      .fill   4   ; Get the configured DNS IP address.
>ffa0						SetDNS      .fill   4   ; Set the configured DNS IP address.
>ffa4						GetTime     .fill   4
>ffa8						SetTime     .fill   4
>ffac						GetSysInfo  .fill   4
>ffb0						SetBPS      .fill   4   ; Set the serial BPS (should match the SLIP router's speed).
>ffb4						InitUDP     .fill   4
>ffb8						SendUDP     .fill   4
>ffbc						RecvUDP     .fill   4
>ffc0						InitTCP     .fill   4
>ffc4						SendTCP     .fill   4
>ffc8						RecvTCP     .fill   4
>ffcc						SendICMP    .fill   4
>ffd0						RecvICMP    .fill   4
.00f0						args
.00f0						events
>00f0						dest        .word       ?   ; GetNextEvent copies event data here
>00f2						pending     .byte       ?   ; Negative count of pending events
.00f3						end
.00f3						recv
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.00f3						fs
.00f3						format
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.00f3						mkfs
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.00f3						file
.00f3						open
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>00f5						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.00f3						read
>00f3						stream      .byte       ?
>00f4						buflen      .byte       ?
.00f3						write
>00f3						stream      .byte       ?
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.00f3						close
>00f3						stream      .byte       ?
.00f3						rename
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						old         = args.buf
=$fd						old_len     = args.buflen
=$f8						new         = args.ext
=$fa						new_len     = args.extlen
.00f3						delete
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>00f5						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.00f3						directory
.00f3						open
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						path        = args.buf
=$fd						path_len    = args.buflen
.00f3						read
>00f3						stream      .byte       ?
>00f4						buflen      .byte       ?
.00f3						close
>00f3						stream      .byte       ?
.00f3						display
>00f3						x           .byte       ?   ; coordinate or size
>00f4						y           .byte       ?   ; coordinate or size
=$fb						text        = args.buf      ; text
=$f8						color       = args.ext      ; color
=$fb						buf         = args.buf      ; deprecated
=$f8						buf2        = args.ext      ; deprecated
=$fd						buflen      = args.buflen
.00f3						net
=$fb						socket      = args.buf
>00f3						src_port    .word       ?
>00f5						dest_port   .word       ?
>00f7						dest_ip     .fill       4
>00f3						accepted    .byte       ?
=$f8						buf         = args.ext
=$fa						buflen      = args.extlen
=$f8						ext         = $f8
=$fa						extlen      = $fa
=$fb						buf         = $fb
=$fd						buflen      = $fd
=$fe						ptr         = $fe
.0000						args_t
.0000						events
>0000						dest        .word       ?   ; GetNextEvent copies event data here
>0002						pending     .byte       ?   ; Negative count of pending events
.0003						end
.0003						recv
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0003						fs
.0003						format
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0003						mkfs
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0003						file
.0003						open
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0005						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0003						read
>0003						stream      .byte       ?
>0004						buflen      .byte       ?
.0003						write
>0003						stream      .byte       ?
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0003						close
>0003						stream      .byte       ?
.0003						rename
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						old         = args.buf
=$fd						old_len     = args.buflen
=$f8						new         = args.ext
=$fa						new_len     = args.extlen
.0003						delete
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0005						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0003						directory
.0003						open
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						path        = args.buf
=$fd						path_len    = args.buflen
.0003						read
>0003						stream      .byte       ?
>0004						buflen      .byte       ?
.0003						close
>0003						stream      .byte       ?
.0003						display
>0003						x           .byte       ?   ; coordinate or size
>0004						y           .byte       ?   ; coordinate or size
=$fb						text        = args.buf      ; text
=$f8						color       = args.ext      ; color
=$fb						buf         = args.buf      ; deprecated
=$f8						buf2        = args.ext      ; deprecated
=$fd						buflen      = args.buflen
.0003						net
=$fb						socket      = args.buf
>0003						src_port    .word       ?
>0005						dest_port   .word       ?
>0007						dest_ip     .fill       4
>0003						accepted    .byte       ?
=$f8						buf         = args.ext
=$fa						buflen      = args.extlen
=$f8						ext         = $f8
=$fa						extlen      = $fa
=$fb						buf         = $fb
=$fd						buflen      = $fd
=$fe						ptr         = $fe
.0000						event_t
>0000						dest        .word       ?   ; GetNextEvent copies event data here
>0002						pending     .byte       ?   ; Negative count of pending events
.0003						end
.0000						recv_t
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0000						fs_t
.0000						format
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0000						mkfs
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0000						fs_mkfs_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0000						file_t
.0000						open
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0002						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0000						read
>0000						stream      .byte       ?
>0001						buflen      .byte       ?
.0000						write
>0000						stream      .byte       ?
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0000						close
>0000						stream      .byte       ?
.0000						rename
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						old         = args.buf
=$fd						old_len     = args.buflen
=$f8						new         = args.ext
=$fa						new_len     = args.extlen
.0000						delete
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0002						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0000						fs_open_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0002						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0000						fs_read_t
>0000						stream      .byte       ?
>0001						buflen      .byte       ?
.0000						fs_write_t
>0000						stream      .byte       ?
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0000						fs_close_t
>0000						stream      .byte       ?
.0000						fs_rename_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						old         = args.buf
=$fd						old_len     = args.buflen
=$f8						new         = args.ext
=$fa						new_len     = args.extlen
.0000						fs_delete_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fnane       = args.buf
=$fd						fname_len   = args.buflen
.0000						dir_t
.0000						open
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						path        = args.buf
=$fd						path_len    = args.buflen
.0000						read
>0000						stream      .byte       ?
>0001						buflen      .byte       ?
.0000						close
>0000						stream      .byte       ?
.0000						dir_open_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						path        = args.buf
=$fd						path_len    = args.buflen
.0000						dir_read_t
>0000						stream      .byte       ?
>0001						buflen      .byte       ?
.0000						dir_close_t
>0000						stream      .byte       ?
.0000						display_t
>0000						x           .byte       ?   ; coordinate or size
>0001						y           .byte       ?   ; coordinate or size
=$fb						text        = args.buf      ; text
=$f8						color       = args.ext      ; color
=$fb						buf         = args.buf      ; deprecated
=$f8						buf2        = args.ext      ; deprecated
=$fd						buflen      = args.buflen
.0000						net_t
=$fb						socket      = args.buf
>0000						src_port    .word       ?
>0002						dest_port   .word       ?
>0004						dest_ip     .fill       4
>0000						accepted    .byte       ?
=$f8						buf         = args.ext
=$fa						buflen      = args.extlen
>0000						            .word   ?   ; Reserved
>0002						            .word   ?   ; Deprecated
>0004						JOYSTICK    .word   ?   ; Game Controller changes.
>0006						DEVICE      .word   ?   ; Device added/removed.
>0008						PRESSED     .word   ?   ; Key pressed
>000a						RELEASED    .word   ?   ; Key released.
>000c						DELTA       .word   ?   ; Regular mouse move and button state
>000e						CLICKS      .word   ?   ; Click counts
>0010						NAME        .word   ?
>0012						SIZE        .word   ?
>0014						DATA        .word   ?   ; The read request has succeeded.
>0016						WROTE       .word   ?   ; The write request has completed.
>0018						FORMATTED   .word   ?   ; The low-level format has completed.
>001a						ERROR       .word   ?
>001c						SIZE        .word   ?
>001e						CREATED     .word   ?
>0020						CHECKED     .word   ?
>0022						DATA        .word   ?   ; The read request has succeeded.
>0024						WROTE       .word   ?   ; The write request has completed.
>0026						ERROR       .word   ?
>0028						NOT_FOUND   .word   ?   ; The file file was not found.
>002a						OPENED      .word   ?   ; The file was successfully opened.
>002c						DATA        .word   ?   ; The read request has succeeded.
>002e						WROTE       .word   ?   ; The write request has completed.
>0030						EOF         .word   ?   ; All file data has been read.
>0032						CLOSED      .word   ?   ; The close request has completed.
>0034						RENAMED     .word   ?   ; The rename request has completed.
>0036						DELETED     .word   ?   ; The delete request has completed.
>0038						ERROR       .word   ?   ; An error occured; close the file if opened.
>003a						OPENED      .word   ?   ; The directory open request succeeded.
>003c						VOLUME      .word   ?   ; A volume record was found.
>003e						FILE        .word   ?   ; A file record was found.
>0040						FREE        .word   ?   ; A file-system free-space record was found.
>0042						EOF         .word   ?   ; All data has been read.
>0044						CLOSED      .word   ?   ; The directory file has been closed.
>0046						ERROR       .word   ?   ; An error occured; user should close.
>0048						TCP         .word   ?
>004a						UDP         .word   ?
.0000						event_t
>0000						type        .byte   ?   ; Enum above
>0001						buf         .byte   ?   ; page id or zero
>0002						ext         .byte   ?   ; page id or zero
.0003						key
>0003						keyboard    .byte   ?   ; Keyboard ID
>0004						raw         .byte   ?   ; Raw key ID
>0005						ascii       .byte   ?   ; ASCII value
>0006						flags       .byte   ?   ; Flags (META)
=$80						META        = $80       ; Meta key; no associated ASCII value.
.0003						mouse
.0003						delta
>0003						x           .byte   ?
>0004						y           .byte   ?
>0005						z           .byte   ?
>0006						buttons     .byte   ?
.0003						clicks
>0003						inner       .byte   ?
>0004						middle      .byte   ?
>0005						outer       .byte   ?
.0003						joystick
>0003						joy0        .byte   ?
>0004						joy1        .byte   ?
.0003						udp
>0003						token       .byte   ?   ; TODO: break out into fields
.0003						file
>0003						stream      .byte   ?
>0004						cookie      .byte   ?
.0005						data
>0005						requested   .byte   ?   ; Requested number of bytes to read
>0006						read        .byte   ?   ; Number of bytes actually read
.0005						wrote
>0005						requested   .byte   ?   ; Requested number of bytes to read
>0006						wrote       .byte   ?   ; Number of bytes actually read
.0003						directory
>0003						stream      .byte   ?
>0004						cookie      .byte   ?
.0005						volume
>0005						len         .byte   ?   ; Length of volname (in buf)
>0006						flags       .byte   ?   ; block size, text encoding
.0005						file
>0005						len         .byte   ?
>0006						flags       .byte   ?   ; block scale, text encoding, approx size
.0005						free
>0005						flags       .byte   ?   ; block scale, text encoding, approx size
.0000						key_t
>0000						keyboard    .byte   ?   ; Keyboard ID
>0001						raw         .byte   ?   ; Raw key ID
>0002						ascii       .byte   ?   ; ASCII value
>0003						flags       .byte   ?   ; Flags (META)
=$80						META        = $80       ; Meta key; no associated ASCII value.
.0000						mouse_t
.0000						delta
>0000						x           .byte   ?
>0001						y           .byte   ?
>0002						z           .byte   ?
>0003						buttons     .byte   ?
.0000						clicks
>0000						inner       .byte   ?
>0001						middle      .byte   ?
>0002						outer       .byte   ?
.0000						m_delta_t
>0000						x           .byte   ?
>0001						y           .byte   ?
>0002						z           .byte   ?
>0003						buttons     .byte   ?
.0000						m_clicks_t
>0000						inner       .byte   ?
>0001						middle      .byte   ?
>0002						outer       .byte   ?
.0000						joystick_t
>0000						joy0        .byte   ?
>0001						joy1        .byte   ?
.0000						file_t
>0000						stream      .byte   ?
>0001						cookie      .byte   ?
.0002						data
>0002						requested   .byte   ?   ; Requested number of bytes to read
>0003						read        .byte   ?   ; Number of bytes actually read
.0002						wrote
>0002						requested   .byte   ?   ; Requested number of bytes to read
>0003						wrote       .byte   ?   ; Number of bytes actually read
.0000						fs_data_t
>0000						requested   .byte   ?   ; Requested number of bytes to read
>0001						read        .byte   ?   ; Number of bytes actually read
.0000						fs_wrote_t
>0000						requested   .byte   ?   ; Requested number of bytes to read
>0001						wrote       .byte   ?   ; Number of bytes actually read
.0000						dir_t
>0000						stream      .byte   ?
>0001						cookie      .byte   ?
.0002						volume
>0002						len         .byte   ?   ; Length of volname (in buf)
>0003						flags       .byte   ?   ; block size, text encoding
.0002						file
>0002						len         .byte   ?
>0003						flags       .byte   ?   ; block scale, text encoding, approx size
.0002						free
>0002						flags       .byte   ?   ; block scale, text encoding, approx size
.0000						dir_vol_t
>0000						len         .byte   ?   ; Length of volname (in buf)
>0001						flags       .byte   ?   ; block size, text encoding
.0000						dir_file_t
>0000						len         .byte   ?
>0001						flags       .byte   ?   ; block scale, text encoding, approx size
.0000						dir_free_t
>0000						flags       .byte   ?   ; block scale, text encoding, approx size
.0000						dir_ext_t
>0000						free        .fill   6   ; blocks used/free
.0000						udp_t
>0000						token       .byte   ?   ; TODO: break out into fields

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/assembler.asm

.8342						AssembleGroup1:
.8342		a9 ff		lda #$ff			lda 	#$FF 						; flag for group 1 / mask.
.8344		8d 21 04	sta $0421			sta 	ModeMask 					; initialise the mode mask - all for all
.8347		80 02		bra $834b			bra 	AsmGroup12
.8349						AssembleGroup2:
.8349		a9 00		lda #$00			lda 	#$00 						; flag for group 2
.834b						AsmGroup12:
.834b		8d 1f 04	sta $041f			sta 	IsGroup1 					; save the 'group 1' flag
.834e		68		pla				pla 								; pop the return address to access the information following.
.834f		fa		plx				plx
.8350		20 d7 83	jsr $83d7			jsr 	AccessParameters 			; get opcode and save as base
.8353		8d 20 04	sta $0420			sta 	BaseOpcode
.8356		ad 1f 04	lda $041f			lda 	IsGroup1 					; skip if group 1 as we don't have a complex mask.
.8359		d0 08		bne $8363			bne 	_AG12HaveMask
.835b		a9 02		lda #$02			lda 	#2 							; if group 2 the second parameter is the mask
.835d		20 df 83	jsr $83df			jsr 	GetParameter		 		; e.g. which modes are supported for this operand
.8360		8d 21 04	sta $0421			sta 	ModeMask
.8363						_AG12HaveMask:
.8363		20 13 85	jsr $8513			jsr 	TypeAndCalculateOperand 	; get zero page type
.8366		da		phx				phx 								; save found address mode
.8367		20 43 84	jsr $8443			jsr 	AssembleModeX
.836a		fa		plx				plx  								; restore address mode
.836b		b0 0b		bcs $8378			bcs 	_AG12Exit
.836d		20 79 83	jsr $8379			jsr 	PromoteToAbsolute  			; promote ZP to ABS and try that
.8370		20 43 84	jsr $8443			jsr 	AssembleModeX
.8373		b0 03		bcs $8378			bcs 	_AG12Exit
.8375		4c fb a9	jmp $a9fb			jmp 	SyntaxError 				; can't do either, so must be wrong mode/operand.
.8378						_AG12Exit:
.8378		60		rts				rts
.8379						PromoteToAbsolute:
.8379		a9 6c		lda #$6c			lda 	#AM_ABS 					; lda xx
.837b		e0 e4		cpx #$e4			cpx 	#AM_ZEROPAGE
.837d		f0 19		beq $8398			beq 	_PTADo
.837f		a9 7c		lda #$7c			lda 	#AM_ABSX 					; lda xx,X
.8381		e0 f4		cpx #$f4			cpx 	#AM_ZEROX
.8383		f0 13		beq $8398			beq 	_PTADo
.8385		a9 78		lda #$78			lda 	#AM_ABSY 					; lda xx,Y
.8387		e0 80		cpx #$80			cpx 	#AM_ZEROY
.8389		f0 0d		beq $8398			beq 	_PTADo
.838b		a9 01		lda #$01			lda 	#AM_INDABS 					; lda (xx) (jump)
.838d		e0 d1		cpx #$d1			cpx 	#AM_IND
.838f		f0 07		beq $8398			beq 	_PTADo
.8391		a9 02		lda #$02			lda 	#AM_INDABSX 				; lda (xx,x) (jump)
.8393		e0 c0		cpx #$c0			cpx 	#AM_INDX
.8395		f0 01		beq $8398			beq 	_PTADo
.8397		60		rts				rts
.8398						_PTADo:
.8398		aa		tax				tax
.8399		60		rts				rts
.839a						AssembleGroup3:
.839a		68		pla				pla 								; get parameters, which is just the opcode.
.839b		fa		plx				plx
.839c		20 d7 83	jsr $83d7			jsr 	AccessParameters 			; get and output opcode
.839f		20 ef 83	jsr $83ef			jsr 	AssemblerWriteByte
.83a2		20 77 85	jsr $8577			jsr 	CalculateOperand 			; get a 16 bit operand
.83a5		a5 58		lda $58				lda 	NSMantissa0 				; calculate the offset
.83a7		38		sec				sec
.83a8		ed 1a 04	sbc $041a			sbc 	AssemblerAddress
.83ab		48		pha				pha 								; LSB in A
.83ac		a5 60		lda $60				lda 	NSMantissa1
.83ae		ed 1b 04	sbc $041b			sbc 	AssemblerAddress+1
.83b1		aa		tax				tax 								; MSB in X
.83b2		68		pla				pla
.83b3		18		clc				clc 								; $80 to easy check $80-$7F, plus 1 for offset error
.83b4		69 7f		adc #$7f			adc 	#$7F
.83b6		90 01		bcc $83b9			bcc 	_AG3NoCarry
.83b8		e8		inx				inx
.83b9						_AG3NoCarry:
.83b9		38		sec				sec 								; fix back and write out anyways.
.83ba		e9 80		sbc #$80			sbc 	#$80
.83bc		20 ef 83	jsr $83ef			jsr 	AssemblerWriteByte
.83bf		e0 00		cpx #$00			cpx 	#0 							; was it in range
.83c1		f0 0a		beq $83cd			beq 	_AG3Exit
.83c3		ad 1c 04	lda $041c			lda 	AssemblerControl 			; are we allowing bad values ?
.83c6		29 01		and #$01			and 	#1
.83c8		f0 03		beq $83cd			beq 	_AG3Exit
.83ca		4c 00 aa	jmp $aa00			jmp 	RangeError 					; no, branch is out of range
.83cd						_AG3Exit:
.83cd		60		rts				rts
.83ce						AssembleGroup4:
.83ce		68		pla				pla 								; pop address
.83cf		fa		plx				plx
.83d0		20 d7 83	jsr $83d7			jsr 	AccessParameters 			; access and get first
.83d3		20 ef 83	jsr $83ef			jsr 	AssemblerWriteByte 			; output it.
.83d6		60		rts				rts
.83d7						AccessParameters:
.83d7		8d 1d 04	sta $041d			sta 	ParamStart
.83da		8e 1e 04	stx $041e			stx 	ParamStart+1
.83dd		a9 01		lda #$01			lda 	#1
.83df						GetParameter:
.83df		5a		phy				phy
.83e0		a8		tay				tay
.83e1		ad 1d 04	lda $041d			lda 	ParamStart
.83e4		85 36		sta $36				sta 	zTemp0
.83e6		ad 1e 04	lda $041e			lda 	ParamStart+1
.83e9		85 37		sta $37				sta 	zTemp0+1
.83eb		b1 36		lda ($36),y			lda 	(zTemp0),y
.83ed		7a		ply				ply
.83ee		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/aswrite.asm

.83ef						AssemblerWriteByte:
.83ef		48		pha			pha
.83f0		ad 1c 04	lda $041c		lda 	AssemblerControl 				; check printing bytes ?
.83f3		29 02		and #$02		and 	#2
.83f5		f0 1b		beq $8412		beq 	_AWBNoPrint
.83f7		ad 1b 04	lda $041b		lda		AssemblerAddress+1 				; print address
.83fa		20 2d 84	jsr $842d		jsr 	PrintHex
.83fd		ad 1a 04	lda $041a		lda		AssemblerAddress
.8400		20 2d 84	jsr $842d		jsr 	PrintHex
.8403		a9 20		lda #$20		lda 	#' '
.8405		20 43 80	jsr $8043		jsr 	EXTPrintCharacter
.8408		68		pla			pla 									; print byte
.8409		48		pha			pha
.840a		20 2d 84	jsr $842d		jsr 	PrintHex
.840d		a9 0d		lda #$0d		lda 	#13
.840f		20 43 80	jsr $8043		jsr 	EXTPrintCharacter
.8412						_AWBNoPrint:
.8412		ad 1a 04	lda $041a		lda		AssemblerAddress				; copy address to zTemp0
.8415		85 36		sta $36			sta 	zTemp0
.8417		ad 1b 04	lda $041b		lda		AssemblerAddress+1
.841a		f0 0e		beq $842a		beq 	_AWBRange
.841c		85 37		sta $37			sta 	zTemp0+1
.841e		68		pla			pla 									; write byte out
.841f		92 36		sta ($36)		sta 	(zTemp0)
.8421		ee 1a 04	inc $041a		inc 	AssemblerAddress 				; bump address
.8424		d0 03		bne $8429		bne 	_AWBNoCarry
.8426		ee 1b 04	inc $041b		inc 	AssemblerAddress+1
.8429						_AWBNoCarry:
.8429		60		rts			rts
.842a						_AWBRange:
.842a		4c 00 aa	jmp $aa00		jmp 	RangeError
.842d						PrintHex:
.842d		48		pha				pha
.842e		4a		lsr a				lsr 	a
.842f		4a		lsr a				lsr 	a
.8430		4a		lsr a				lsr 	a
.8431		4a		lsr a				lsr 	a
.8432		20 36 84	jsr $8436			jsr 	_PrintNibble
.8435		68		pla				pla
.8436						_PrintNibble:
.8436		29 0f		and #$0f			and 	#15
.8438		c9 0a		cmp #$0a			cmp 	#10
.843a		90 02		bcc $843e			bcc 	_NoShift
.843c		69 06		adc #$06			adc 	#6
.843e						_NoShift:
.843e		69 30		adc #$30			adc 	#48
.8440		4c 43 80	jmp $8043			jmp 	EXTPrintCharacter

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/instruction.asm

.8443						AssembleModeX:
.8443		5a		phy				phy
.8444		ad 1f 04	lda $041f			lda 	IsGroup1
.8447		f0 17		beq $8460			beq 	_AMXGroup2
.8449		8a		txa				txa 							; is it in group # 1
.844a		29 40		and #$40			and 	#AM_ISG1
.844c		f0 4d		beq $849b			beq 	_AMXFail 				; no, give up.
.844e		8a		txa				txa 							; get back.
.844f		29 1f		and #$1f			and 	#$1F 					; this is now the offset.
.8451		e0 e0		cpx #$e0			cpx 	#AM_IMMEDIATE 			; if not immediate, we can continue.
.8453		d0 22		bne $8477			bne 	_AMXHaveInfo
.8455		ad 20 04	lda $0420			lda 	BaseOpcode 				; cannot store immediate.
.8458		c9 81		cmp #$81			cmp 	#$81
.845a		f0 3f		beq $849b			beq 	_AMXFail
.845c		a9 08		lda #$08			lda 	#8 						; if immediate we use offset 8.
.845e		80 17		bra $8477			bra 	_AMXHaveInfo 			; odd design decision there.
.8460						_AMXGroup2:
.8460		8a		txa				txa 							; is it in group 2 ?
.8461		29 20		and #$20			and 	#AM_ISG2
.8463		f0 36		beq $849b			beq 	_AMXFail 				; no, give up.
.8465		8a		txa				txa 							; get the offset into Y
.8466		29 1f		and #$1f			and 	#$1F
.8468		4a		lsr a				lsr 	a 						; make it 0-7.
.8469		4a		lsr a				lsr  	a
.846a		a8		tay				tay
.846b		ad 21 04	lda $0421			lda 	ModeMask 				; shift the modemask left so you can check it against the requested offset
.846e						_AMXCheckOkay:
.846e		0a		asl a				asl 	a 						; shift modemask left enough times to check legitimate.
.846f		88		dey				dey
.8470		10 fc		bpl $846e			bpl 	_AMXCheckOkay
.8472		90 27		bcc $849b			bcc 	_AMXFail 				; not allowed.
.8474		8a		txa				txa  							; get mask back
.8475		29 1f		and #$1f			and 	#$1F
.8477						_AMXHaveInfo:
.8477		e0 00		cpx #$00			cpx 	#$00 					; does it *require* an 8 bit operand
.8479		10 04		bpl $847f			bpl 	_AMXAnySize 			; checking bit 7, the zero page opcode flag.
.847b		a4 60		ldy $60				ldy 	NSMantissa1 			; fail if it is outside range, e.g. the MSB is set.
.847d		d0 1c		bne $849b			bne 	_AMXFail
.847f						_AMXAnySize:
.847f		18		clc				clc 							; add offset to the base opcode
.8480		6d 20 04	adc $0420			adc 	BaseOpcode
.8483						_AMXOutputCode:
.8483		20 ef 83	jsr $83ef			jsr 	AssemblerWriteByte 		; write the opcode out.
.8486		e0 28		cpx #$28			cpx 	#AM_ACC 				; A mode (e.g. ASL)
.8488		f0 0e		beq $8498			beq 	_AMXExit
.848a		a5 58		lda $58				lda 	NSMantissa0 			; write LSB operand
.848c		20 ef 83	jsr $83ef			jsr 	AssemblerWriteByte
.848f		e0 00		cpx #$00			cpx 	#$00 					; zeropage ?
.8491		30 05		bmi $8498			bmi 	_AMXExit
.8493		a5 60		lda $60				lda 	NSMantissa1 			; write MSB operand
.8495		20 ef 83	jsr $83ef			jsr 	AssemblerWriteByte
.8498						_AMXExit:
.8498		7a		ply				ply
.8499		38		sec				sec
.849a		60		rts				rts
.849b						_AMXFail:
.849b		a0 00		ldy #$00			ldy 	#0
.849d						_AMXCheckOddities:
.849d		8a		txa				txa
.849e		d9 c5 84	cmp $84c5,y			cmp 	ExtraOpcode+2,y 		; match address mode
.84a1		d0 15		bne $84b8			bne 	_AMXCONext
.84a3		b9 c3 84	lda $84c3,y			lda 	ExtraOpcode+0,y 		; do the base opcodes match
.84a6		cd 20 04	cmp $0420			cmp 	BaseOpcode
.84a9		d0 0d		bne $84b8			bne 	_AMXCONext
.84ab		e0 00		cpx #$00			cpx 	#$00 					; requires zero page ?
.84ad		10 04		bpl $84b3			bpl 	_AMXCONotZero
.84af		a5 60		lda $60				lda 	NSMantissa1
.84b1		d0 05		bne $84b8			bne 	_AMXCONext
.84b3						_AMXCONotZero:
.84b3		b9 c4 84	lda $84c4,y			lda 	ExtraOpcode+1,y 		; get new opcode
.84b6		80 cb		bra $8483			bra 	_AMXOutputCode 			; and assemble it
.84b8						_AMXCONext:
.84b8		c8		iny				iny
.84b9		c8		iny				iny
.84ba		c8		iny				iny
.84bb		b9 c3 84	lda $84c3,y			lda 	ExtraOpcode+0,y 		; end of table
.84be		d0 dd		bne $849d			bne 	_AMXCheckOddities
.84c0						_AMXCOFail:
.84c0		7a		ply				ply
.84c1		18		clc				clc
.84c2		60		rts				rts
.84c3						ExtraOpcode:
>84c3		40 6c 01					.byte $40,$6c,AM_INDABS 	; jump
>84c6		40 7c 02					.byte $40,$7C,AM_INDABSX 	; jump
>84c9		a2 be 78					.byte $a2,$BE,AM_ABSY 		; ldx
>84cc		a2 b6 80					.byte $a2,$B6,AM_ZEROY 		; ldx
>84cf		82 96 80					.byte $82,$96,AM_ZEROY 		; stx
>84d2		e2 1a 28					.byte $e2,$1a,AM_ACC 		; inc
>84d5		c2 3a 28					.byte $c2,$3a,AM_ACC 		; dec
>84d8		20 89 e0					.byte $20,$89,AM_IMMEDIATE 	; bit
>84db		60 9c 6c					.byte $60,$9c,AM_ABS 		; stz
>84de		60 9e 7c					.byte $60,$9e,AM_ABSX 		; stz
>84e1		00						.byte $00

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/label.asm

.84e2						LabelHere:
.84e2		c8		iny				iny 								; skip .
.84e3		a2 00		ldx #$00			ldx 	#0 							; get a term
.84e5		20 4a a1	jsr $a14a			jsr 	EvaluateTerm
.84e8		a5 50		lda $50				lda 	NSStatus 					; needs to be an integer reference.
.84ea		c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.84ec		d0 22		bne $8510			bne 	_ALType 					; otherwise typing error
.84ee		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy reference address to zTemp0
.84f0		85 36		sta $36				sta 	zTemp0 						; (e.g. where we store the address)
.84f2		b5 60		lda $60,x			lda 	NSMantissa1,x
.84f4		85 37		sta $37				sta 	zTemp0+1
.84f6		5a		phy				phy 								; copy address in (64k)
.84f7		a0 01		ldy #$01			ldy 	#1
.84f9		ad 1a 04	lda $041a			lda	 	AssemblerAddress
.84fc		92 36		sta ($36)			sta 	(zTemp0)
.84fe		ad 1b 04	lda $041b			lda	 	AssemblerAddress+1
.8501		91 36		sta ($36),y			sta 	(zTemp0),y
.8503		c8		iny				iny
.8504		a9 00		lda #$00			lda 	#0 							; zero the rest.
.8506		91 36		sta ($36),y			sta 	(zTemp0),y
.8508		c8		iny				iny
.8509		91 36		sta ($36),y			sta 	(zTemp0),y
.850b		c8		iny				iny
.850c		91 36		sta ($36),y			sta 	(zTemp0),y
.850e		7a		ply				ply
.850f		60		rts				rts
.8510						_ALType:
.8510		4c 05 aa	jmp $aa05			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/operands.asm

.8513						TypeAndCalculateOperand:
.8513		b1 30		lda ($30),y			lda 	(codePtr),y
.8515		a2 28		ldx #$28			ldx 	#AM_ACC 					; ACC if : or EOL
.8517		c9 3a		cmp #$3a			cmp 	#KWD_COLON
.8519		f0 5b		beq $8576			beq 	_TACOExit
.851b		c9 80		cmp #$80			cmp 	#KWC_EOL
.851d		f0 57		beq $8576			beq 	_TACOExit
.851f		c8		iny				iny
.8520		a2 e0		ldx #$e0			ldx 	#AM_IMMEDIATE
.8522		c9 23		cmp #$23			cmp 	#KWD_HASH 					; if hash, then immediate - constant.
.8524		f0 51		beq $8577			beq 	CalculateOperand
.8526		c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; if ( then check for indirection
.8528		f0 1f		beq $8549			beq 	_TACOIndirect
.852a		88		dey				dey 								; undo get of first character
.852b		20 77 85	jsr $8577			jsr 	CalculateOperand 			; get operand
.852e		b1 30		lda ($30),y			lda 	(codePtr),y
.8530		a2 e4		ldx #$e4			ldx 	#AM_ZEROPAGE 				; if not, try zero page (then absolute)
.8532		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8534		d0 40		bne $8576			bne 	_TACOExit
.8536		c8		iny				iny
.8537		20 81 85	jsr $8581			jsr 	TACOCheckXY 				; extract X,Y or 0 (neither) from the variable.
.853a		a2 f4		ldx #$f4			ldx 	#AM_ZEROX 					; check for X
.853c		c9 58		cmp #$58			cmp 	#'X'
.853e		f0 36		beq $8576			beq 	_TACOExit
.8540		a2 80		ldx #$80			ldx 	#AM_ZEROY 					; check for Y
.8542		c9 59		cmp #$59			cmp 	#'Y'
.8544		f0 30		beq $8576			beq 	_TACOExit
.8546						_TACOSyntax:
.8546		4c fb a9	jmp $a9fb			jmp 	SyntaxError
.8549						_TACOIndirect:
.8549		20 77 85	jsr $8577			jsr 	CalculateOperand 			; get the operand
.854c		b1 30		lda ($30),y			lda 	(codePtr),y
.854e		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if , then it must be ,X)
.8550		f0 17		beq $8569			beq 	_TACOIndX
.8552		20 e3 97	jsr $97e3			jsr 	CheckRightBracket  			; otherwise must be ) or ),Y
.8555		b1 30		lda ($30),y			lda 	(codePtr),y
.8557		a2 d1		ldx #$d1			ldx 	#AM_IND
.8559		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not comma then exit with (xx)
.855b		d0 19		bne $8576			bne 	_TACOExit
.855d		c8		iny				iny
.855e		20 81 85	jsr $8581			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.8561		c9 59		cmp #$59			cmp 	#'Y' 						; check Y
.8563		d0 e1		bne $8546			bne 	_TACOSyntax
.8565		a2 d0		ldx #$d0			ldx 	#AM_INDY
.8567		80 0d		bra $8576			bra 	_TACOExit
.8569						_TACOIndX:
.8569		c8		iny				iny
.856a		20 81 85	jsr $8581			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.856d		c9 58		cmp #$58			cmp 	#'X' 						; check X
.856f		d0 d5		bne $8546			bne 	_TACOSyntax
.8571		20 e3 97	jsr $97e3			jsr 	CheckRightBracket			; check )
.8574		a2 c0		ldx #$c0			ldx 	#AM_INDX
.8576						_TACOExit:
.8576		60		rts				rts
.8577						CalculateOperand:
.8577		48		pha				pha
.8578		da		phx				phx
.8579		a2 00		ldx #$00			ldx 	#0 							; get 16 bit integer in Slot 0
.857b		20 d6 a6	jsr $a6d6			jsr 	Evaluate16BitInteger
.857e		fa		plx				plx
.857f		68		pla				pla
.8580		60		rts				rts
.8581						TACOCheckXY:
.8581		b1 30		lda ($30),y			lda 	(codePtr),y
.8583		29 c0		and #$c0			and 	#$C0 						; check it is an identifier reference.
.8585		c9 40		cmp #$40			cmp 	#$40
.8587		d0 21		bne $85aa			bne 	_TCXYFail
.8589		b1 30		lda ($30),y			lda 	(codePtr),y
.858b		18		clc				clc
.858c		69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.858e		85 37		sta $37				sta 	zTemp0+1
.8590		c8		iny				iny
.8591		b1 30		lda ($30),y			lda 	(codePtr),y
.8593		c8		iny				iny
.8594		85 36		sta $36				sta 	zTemp0
.8596		5a		phy				phy 								; save position
.8597		a0 02		ldy #$02			ldy 	#2 							; type is integer ?
.8599		b1 36		lda ($36),y			lda 	(zTemp0),y
.859b		d0 0c		bne $85a9			bne 	_TCXYPopFail
.859d		a0 08		ldy #$08			ldy 	#8 							; get first character, should have bit 7 set as also last.
.859f		b1 36		lda ($36),y			lda 	(zTemp0),y
.85a1		c9 d8		cmp #$d8			cmp 	#'X'+$80 					; should be X or Y
.85a3		f0 08		beq $85ad			beq 	_TCXYFound
.85a5		c9 d9		cmp #$d9			cmp 	#'Y'+$80
.85a7		f0 04		beq $85ad			beq 	_TCXYFound
.85a9						_TCXYPopFail:
.85a9		7a		ply				ply
.85aa						_TCXYFail:
.85aa		a9 00		lda #$00			lda 	#0
.85ac		60		rts				rts
.85ad						_TCXYFound:
.85ad		7a		ply				ply 								; restore position
.85ae		29 7f		and #$7f			and 	#$7F 						; throw bit 7
.85b0		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/backload.asm

.85b1						BackloadProgram:
.85b1		20 27 92	jsr $9227			jsr 	NewProgram 					; does the actual NEW.
.85b4		a2 86		ldx #$86			ldx 	#_BLLoad >> 8
.85b6		a9 08		lda #$08			lda 	#_BLLoad & $FF
.85b8		20 55 98	jsr $9855			jsr 	PrintStringXA
.85bb		a9 14		lda #$14			lda 	#SOURCE_ADDRESS >> 13 		; start page
.85bd		8d 89 07	sta $0789			sta 	BackLoadPage
.85c0		a9 00		lda #$00			lda 	#(($6000) & $FF)
.85c2		8d 8a 07	sta $078a			sta 	0+BackLoadPointer
.85c5		a9 60		lda #$60			lda 	#(($6000) >> 8)
.85c7		8d 8b 07	sta $078b			sta 	1+BackLoadPointer
.85ca		a9 ff		lda #$ff			lda 	#$FF
.85cc		8d fa ff	sta $fffa			sta 	$FFFA
.85cf						_BPLoop:
.85cf		a2 ff		ldx #$ff			ldx 	#$FF
.85d1		20 1d 86	jsr $861d			jsr 	BLReadByte 					; read a byte
.85d4		c9 00		cmp #$00			cmp 	#0
.85d6		f0 29		beq $8601			beq 	_BPExit 					; if 0 exit
.85d8		30 27		bmi $8601			bmi 	_BPExit 					; if -ve exit
.85da						_BPCopy:
.85da		e8		inx				inx  								; copy byte into the lineBuffer
.85db		9d 26 05	sta $0526,x			sta 	lineBuffer,x
.85de		9e 27 05	stz $0527,x			stz 	lineBuffer+1,x
.85e1		20 1d 86	jsr $861d			jsr 	BLReadByte 					; read next byte
.85e4		30 0a		bmi $85f0			bmi 	_BPEndLine 					; -ve = EOL
.85e6		c9 09		cmp #$09			cmp 	#9 							; handle TAB, make it space.
.85e8		d0 02		bne $85ec			bne 	_BPNotTab
.85ea		a9 20		lda #$20			lda 	#' '
.85ec						_BPNotTab:
.85ec		c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.85ee		b0 ea		bcs $85da			bcs 	_BPCopy 					; until a control character, should be 13 received.
.85f0						_BPEndLine:
.85f0		20 93 80	jsr $8093			jsr 	TKTokeniseLine 				; tokenise the line.
.85f3		ad 27 04	lda $0427			lda 	tokenLineNumber 			; line number = 0
.85f6		0d 28 04	ora $0428			ora 	tokenLineNumber+1
.85f9		f0 d4		beq $85cf			beq 	_BPLoop 					; not legal code, blank line or maybe a comment.
.85fb		38		sec				sec 								; append not insert
.85fc		20 ef ab	jsr $abef			jsr 	MemoryInsertLine 			; append to current program
.85ff		80 ce		bra $85cf			bra 	_BPLoop
.8601						_BPExit:
.8601		9c fa ff	stz $fffa			stz 	$FFFA
.8604		20 09 87	jsr $8709			jsr 	ClearCommand 				; clear variables etc.
.8607		60		rts				rts
.8608						_BLLoad:
>8608		4c 6f 61 64 69 6e 67 20				.text 	"Loading from Memory",13,0
>8610		66 72 6f 6d 20 4d 65 6d 6f 72 79 0d 00
.861d						BLReadByte:
.861d		da		phx				phx
.861e		a6 0b		ldx $0b				ldx 	8+3 						; save current mapping for $6000 in X
.8620		ad 89 07	lda $0789			lda 	BackLoadPage	 			; set current page
.8623		85 0b		sta $0b				sta 	8+3
.8625		ad 8a 07	lda $078a			lda 	BackLoadPointer 			; copy pointer to zTemp0
.8628		85 36		sta $36				sta 	zTemp0
.862a		ad 8b 07	lda $078b			lda 	BackLoadPointer+1
.862d		85 37		sta $37				sta 	zTemp0+1
.862f		b2 36		lda ($36)			lda 	(zTemp0) 					; read next byte
.8631		ee 8a 07	inc $078a			inc 	BackLoadPointer 			; bump pointer
.8634		d0 0f		bne $8645			bne 	_BLNoCarry
.8636		ee 8b 07	inc $078b			inc 	BackLoadPointer+1
.8639		10 0a		bpl $8645			bpl 	_BLNoCarry 					; need a new page
.863b		48		pha				pha
.863c		a9 60		lda #$60			lda 	#$60 						; reset pointer
.863e		8d 8b 07	sta $078b			sta 	BackLoadPointer+1
.8641		ee 89 07	inc $0789			inc 	BackLoadPage 				; next page from source.
.8644		68		pla				pla
.8645						_BLNoCarry:
.8645		86 0b		stx $0b				stx 	8+3 						; restore mapping, then X.
.8647		fa		plx				plx
.8648		c9 00		cmp #$00			cmp 	#0
.864a		60		rts				rts
.0789						BackLoadPage:
>0789								.fill  	1
.078a						BackLoadPointer:
>078a								.fill 	2

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/editor.asm

.864b						EditProgramCode:
.864b		ad 27 04	lda $0427			lda 	tokenLineNumber 			; try to find the line.
.864e		ae 28 04	ldx $0428			ldx 	tokenLineNumber+1
.8651		20 93 ac	jsr $ac93			jsr 	MemorySearch
.8654		90 05		bcc $865b			bcc 	_EPCNoDelete 				; reached the end : don't delete
.8656		d0 03		bne $865b			bne 	_EPCNoDelete 				; found slot but didn't match : no delete
.8658		20 b8 ab	jsr $abb8			jsr 	MemoryDeleteLine 			; delete the line
.865b						_EPCNoDelete:
.865b		ad 29 04	lda $0429			lda 	tokenBuffer 				; buffer empty - we just want to delete a line.
.865e		c9 80		cmp #$80			cmp 	#KWC_EOL
.8660		f0 0d		beq $866f			beq 	_EPCNoInsert
.8662		ad 27 04	lda $0427			lda 	tokenLineNumber 			; find the line - it cannot exist as we've just deleted it.
.8665		ae 28 04	ldx $0428			ldx 	tokenLineNumber+1 			; so this can't fail, it returns some point in the code.
.8668		20 93 ac	jsr $ac93			jsr 	MemorySearch
.866b		18		clc				clc 								; insert at this point.
.866c		20 ef ab	jsr $abef			jsr 	MemoryInsertLine 			; insert the line
.866f						_EPCNoInsert:
.866f		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/warmstart.asm

.8670						WarmStart:
.8670		a2 ff		ldx #$ff			ldx 	#$FF
.8672		9a		txs				txs
.8673		a9 89		lda #$89			lda 	#CLICommandLine+$80 		; set console colour whatever the current colour is.
.8675		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.8678		20 9c 81	jsr $819c			jsr 	ResetIOTracking 			; reset the I/O tracking.
.867b		20 61 80	jsr $8061			jsr 	EXTInputLine 				; get line to lineBuffer
.867e		20 93 80	jsr $8093			jsr 	TKTokeniseLine 				; tokenise the line
.8681		ad 27 04	lda $0427			lda 	tokenLineNumber 			; line number <> 0
.8684		0d 28 04	ora $0428			ora 	tokenLineNumber+1
.8687		d0 17		bne $86a0			bne 	_WSEditCode 				; if so,edit code.
.8689		9c 26 04	stz $0426			stz 	tokenOffset 				; zero the "offset", meaning it only runs one line.
.868c		a9 26		lda #$26			lda 	#((tokenOffset) & $FF)
.868e		85 30		sta $30				sta 	codePtr
.8690		a9 04		lda #$04			lda 	#((tokenOffset) >> 8)
.8692		85 31		sta $31				sta 	codePtr+1
.8694		ad 29 04	lda $0429			lda 	tokenBuffer 				; nothing to run
.8697		c9 80		cmp #$80			cmp 	#KWC_EOL
.8699		f0 d5		beq $8670			beq 	WarmStart
.869b		20 c4 93	jsr $93c4			jsr 	RUNCodePointerLine 			; execute that line.
.869e		80 d0		bra $8670			bra 	WarmStart
.86a0						_WSEditCode:
.86a0		20 4b 86	jsr $864b			jsr 	EditProgramCode 			; edit the program code
.86a3		20 09 87	jsr $8709			jsr 	ClearCommand 				; clear all variables etc.
.86a6		80 c8		bra $8670			bra 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assemble.asm

.86a8						AssembleCommand:
.86a8		a2 00		ldx #$00			ldx 	#0
.86aa		20 d6 a6	jsr $a6d6			jsr 	Evaluate16BitInteger 		; start address
.86ad		a5 58		lda $58				lda 	NSMantissa0
.86af		8d 1a 04	sta $041a			sta 	AssemblerAddress
.86b2		a5 60		lda $60				lda 	NSMantissa1
.86b4		8d 1b 04	sta $041b			sta 	AssemblerAddress+1
.86b7		20 eb 97	jsr $97eb			jsr 	CheckComma
.86ba		20 f1 a6	jsr $a6f1			jsr 	Evaluate8BitInteger 		; options 0-3
.86bd		a5 58		lda $58				lda 	NSMantissa0
.86bf		8d 1c 04	sta $041c			sta 	AssemblerControl
.86c2		60		rts				rts
.86c3		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assert.asm

.86c4						AssertCommand:
.86c4		a2 00		ldx #$00			ldx 	#0 							; bottom of stack
.86c6		20 c3 a6	jsr $a6c3			jsr 	EvaluateInteger 			; the assert test
.86c9		20 78 a7	jsr $a778			jsr 	NSMIsZero 					; exit if result is non zero.
.86cc		d0 05		bne $86d3			bne 	_ACExit
.86ce		a9 0a		lda #$0a		lda	#10
.86d0		4c fc 97	jmp $97fc		jmp	ErrorHandler
.86d3						_ACExit:
.86d3		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/call.asm

.86d4						CallCommand:
.86d4		a2 00		ldx #$00			ldx 	#0 							; get the routine address to level 0
.86d6		20 d6 a6	jsr $a6d6			jsr 	Evaluate16BitInteger
.86d9						_CCClear
.86d9		e8		inx				inx  								; clear 1,2 and 3 (for A X Y)
.86da		20 56 a7	jsr $a756			jsr 	NSMSetZero 					; these are optional sequentially.
.86dd		e0 04		cpx #$04			cpx 	#4
.86df		d0 f8		bne $86d9			bne 	_CCClear
.86e1		a2 00		ldx #$00			ldx 	#0 							; and keep trying while there are more values.
.86e3						_CCCParam:
.86e3		b1 30		lda ($30),y			lda 	(codePtr),y
.86e5		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.86e7		d0 09		bne $86f2			bne 	_CCCRun6502
.86e9		c8		iny				iny 								; skip comma
.86ea		e8		inx				inx	 								; next level
.86eb		20 f1 a6	jsr $a6f1			jsr 	Evaluate8BitInteger 		; get A/X/Y
.86ee		e0 03		cpx #$03			cpx 	#3
.86f0		90 f1		bcc $86e3			bcc 	_CCCParam 					; done all 3 ?
.86f2						_CCCRun6502:
.86f2		5a		phy				phy 								; save position
.86f3		a5 60		lda $60				lda 	NSMantissa1 				; put address in zTemp0
.86f5		85 37		sta $37				sta 	zTemp0+1
.86f7		a5 58		lda $58				lda 	NSMantissa0
.86f9		85 36		sta $36				sta 	zTemp0
.86fb		a5 59		lda $59				lda 	NSMantissa0+1 				; get registers into A X Y
.86fd		a6 5a		ldx $5a				ldx 	NSMantissa0+2
.86ff		a4 5b		ldy $5b				ldy 	NSMantissa0+3
.8701		20 06 87	jsr $8706			jsr 	_CCCZTemp0 					; call zTemp0
.8704		7a		ply				ply 								; restore position and exit
.8705		60		rts				rts
.8706						_CCCZTemp0:
.8706		6c 36 00	jmp ($0036)			jmp 	(zTemp0)

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/clear.asm

.8709						ClearCommand:
.8709		a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.870b		85 36		sta $36				sta 	0+zTemp0
.870d		a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.870f		85 37		sta $37				sta 	1+zTemp0
.8711						_ClearZeroLoop:
.8711		b2 36		lda ($36)			lda 	(zTemp0) 					; end of variables if offset is zero.
.8713		f0 24		beq $8739			beq 	_ClearZeroEnd
.8715		a0 03		ldy #$03			ldy 	#3 							; erase the variables
.8717		a9 00		lda #$00			lda 	#0 							; set all the data to zero.
.8719						_ClearOneVariable:
.8719		91 36		sta ($36),y			sta 	(zTemp0),y
.871b		c8		iny				iny
.871c		c0 08		cpy #$08			cpy 	#8
.871e		d0 f9		bne $8719			bne 	_ClearOneVariable
.8720		a0 02		ldy #$02			ldy 	#2 							; has it been marked procedure
.8722		b1 36		lda ($36),y			lda 	(zTemp0),y
.8724		c9 18		cmp #$18			cmp 	#NSTProcedure
.8726		d0 04		bne $872c			bne 	_ClearNotProcedure
.8728		a9 04		lda #$04			lda 	#NSTInteger+NSBIsArray 		; if so set it back to an integer array
.872a		91 36		sta ($36),y			sta 	(zTemp0),y 					; will be fixed on the pre-run scan.
.872c						_ClearNotProcedure:
.872c		18		clc				clc 								; go to the next variable
.872d		b2 36		lda ($36)			lda 	(zTemp0) 					; offset to next, add to zTemp0
.872f		65 36		adc $36				adc 	zTemp0
.8731		85 36		sta $36				sta 	zTemp0
.8733		90 dc		bcc $8711			bcc 	_ClearZeroLoop
.8735		e6 37		inc $37				inc 	zTemp0+1
.8737		80 d8		bra $8711			bra 	_ClearZeroLoop
.8739						_ClearZeroEnd:
.8739		18		clc				clc
.873a		a5 36		lda $36				lda 	zTemp0
.873c		69 01		adc #$01			adc 	#1
.873e		8d 08 04	sta $0408			sta 	lowMemPtr
.8741		a5 37		lda $37				lda 	zTemp0+1
.8743		69 00		adc #$00			adc 	#0
.8745		8d 09 04	sta $0409			sta 	lowMemPtr+1
.8748		20 db b0	jsr $b0db			jsr 	StackReset
.874b		20 41 b1	jsr $b141			jsr 	StringSystemInitialise
.874e		20 ec 96	jsr $96ec			jsr 	ProcedureScan
.8751		20 66 93	jsr $9366			jsr 	Command_Restore
.8754		9c 1a 04	stz $041a			stz 	AssemblerAddress
.8757		9c 1b 04	stz $041b			stz 	AssemblerAddress+1
.875a		9c 1c 04	stz $041c			stz 	AssemblerControl
.875d		9c 5d 06	stz $065d			stz 	KeyboardQueueEntries
.8760		20 36 a3	jsr $a336			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.8763		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/commands/crossdev.asm

.8764						XLoadCommand:
.8764		20 27 92	jsr $9227			jsr 	NewProgram
.8767		20 b1 85	jsr $85b1			jsr 	BackloadProgram
.876a		4c 70 86	jmp $8670			jmp 	WarmStart
.876d						XGoCommand:
.876d		20 27 92	jsr $9227			jsr 	NewProgram
.8770		20 b1 85	jsr $85b1			jsr 	BackloadProgram
.8773		4c b2 93	jmp $93b2			jmp 	RunCurrentProgram

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/data.asm

.8776						Command_Data:
.8776		a9 3a		lda #$3a			lda 	#KWD_COLON 					; advance to colon/EOL, e.g. ignore anything till then.
.8778		a2 80		ldx #$80			ldx 	#KWC_EOL
.877a		20 3e 97	jsr $973e			jsr 	ScanForward
.877d		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/dim.asm

.877e						DimCommand:
.877e		b1 30		lda ($30),y			lda 	(codePtr),y
.8780		29 c0		and #$c0			and 	#$C0
.8782		c9 40		cmp #$40			cmp 	#$40
.8784		d0 7a		bne $8800			bne 	_DCSyntax 				; n o, error.
.8786		b1 30		lda ($30),y			lda 	(codePtr),y
.8788		18		clc				clc
.8789		69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.878b		85 3f		sta $3f				sta 	zaTemp+1
.878d		c8		iny				iny
.878e		b1 30		lda ($30),y			lda 	(codePtr),y
.8790		c8		iny				iny
.8791		85 3e		sta $3e				sta 	zaTemp
.8793		5a		phy				phy
.8794		a0 02		ldy #$02			ldy 	#2 						; read type byte
.8796		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8798		29 18		and #$18			and 	#NSBTypeMask 			; check it's not a procedure
.879a		c9 18		cmp #$18			cmp 	#NSTProcedure
.879c		f0 62		beq $8800			beq 	_DCSyntax
.879e		b1 3e		lda ($3e),y			lda 	(zaTemp),y 				; check it's an array
.87a0		29 04		and #$04			and 	#NSBIsArray
.87a2		f0 64		beq $8808			beq 	_DCType
.87a4		a0 04		ldy #$04			ldy 	#4 						; check not already defined
.87a6		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.87a8		d0 59		bne $8803			bne 	_DCRedefine
.87aa		7a		ply				ply
.87ab		20 0b 88	jsr $880b			jsr 	_DCGetSize 				; get array size, check it.
.87ae		5a		phy				phy
.87af		a0 05		ldy #$05			ldy 	#5 						; store in first array size slot
.87b1		91 3e		sta ($3e),y			sta 	(zaTemp),y 				; second will be zero.
.87b3		7a		ply				ply 							; is there a second (e.g. ,x)
.87b4		b1 30		lda ($30),y			lda 	(codePtr),y
.87b6		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.87b8		d0 0a		bne $87c4			bne 	_DCOneDimension
.87ba		c8		iny				iny 							; skip comma
.87bb		20 0b 88	jsr $880b			jsr 	_DCGetSize 				; get 2nd array size
.87be		5a		phy				phy
.87bf		a0 06		ldy #$06			ldy 	#6 						; store in 2nd array size
.87c1		91 3e		sta ($3e),y			sta 	(zaTemp),y
.87c3		7a		ply				ply
.87c4						_DCOneDimension:
.87c4		5a		phy				phy 							; save position
.87c5		a0 05		ldy #$05			ldy 	#5 						; dimensions + 1 in AX (as zero based)
.87c7		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.87c9		aa		tax				tax
.87ca		c8		iny				iny
.87cb		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.87cd		e8		inx				inx 							; bump them.
.87ce		1a		inc a				inc 	a
.87cf		20 01 a7	jsr $a701			jsr 	Multiply8x8 			; work out the total number of elements -> zTemp0
.87d2		a5 37		lda $37				lda 	zTemp0+1 				; don't allow more than 8192 elements whatever
.87d4		29 e0		and #$e0			and 	#$E0
.87d6		d0 23		bne $87fb			bne 	_DCSize
.87d8		a0 02		ldy #$02			ldy 	#2 						; get base type
.87da		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.87dc		20 19 88	jsr $8819			jsr 	ScaleByBaseType 		; scale by base type
.87df		a5 36		lda $36				lda 	zTemp0
.87e1		a6 37		ldx $37				ldx 	zTemp0+1
.87e3		20 f8 a2	jsr $a2f8			jsr 	AllocateXABytes 		; allocate memory
.87e6		a0 03		ldy #$03			ldy 	#3 						; copy into the address.
.87e8		91 3e		sta ($3e),y			sta 	(zaTemp),y
.87ea		c8		iny				iny
.87eb		8a		txa				txa
.87ec		91 3e		sta ($3e),y			sta 	(zaTemp),y
.87ee		7a		ply				ply 							; get position back
.87ef		20 e3 97	jsr $97e3			jsr 	CheckRightBracket 		; check )
.87f2		b1 30		lda ($30),y			lda 	(codePtr),y
.87f4		c8		iny				iny 							; consume in case
.87f5		c9 2c		cmp #$2c			cmp 	#KWD_COMMA		 		; if so do another DIM.
.87f7		f0 85		beq $877e			beq 	DimCommand
.87f9		88		dey				dey 							; undo consume
.87fa		60		rts				rts
.87fb						_DCSize:
.87fb		a9 16		lda #$16		lda	#22
.87fd		4c fc 97	jmp $97fc		jmp	ErrorHandler
.8800						_DCSyntax:
.8800		4c fb a9	jmp $a9fb			jmp 	SyntaxError
.8803						_DCRedefine:
.8803		a9 15		lda #$15		lda	#21
.8805		4c fc 97	jmp $97fc		jmp	ErrorHandler
.8808						_DCType:
.8808		4c 05 aa	jmp $aa05			jmp 	TypeError
.880b						_DCGetSize:
.880b		a2 00		ldx #$00			ldx 	#0 						; get first index.
.880d		20 f1 a6	jsr $a6f1			jsr 	Evaluate8BitInteger 	; get array dimension
.8810		c9 00		cmp #$00			cmp 	#0 						; must be 1-254
.8812		f0 e7		beq $87fb			beq 	_DCSize
.8814		c9 fe		cmp #$fe			cmp 	#254
.8816		f0 e3		beq $87fb			beq 	_DCSize
.8818		60		rts				rts
.8819						ScaleByBaseType:
.8819		29 10		and #$10			and 	#NSBIsString 			; is it string
.881b		d0 19		bne $8836			bne 	_SBBTString
.881d		a5 37		lda $37				lda 	zTemp0+1 				; push value on stack
.881f		48		pha				pha
.8820		a5 36		lda $36				lda 	zTemp0
.8822		48		pha				pha
.8823		06 36		asl $36				asl 	zTemp0 					; x 2
.8825		26 37		rol $37				rol 	zTemp0+1
.8827		06 36		asl $36				asl 	zTemp0 					; x 4
.8829		26 37		rol $37				rol 	zTemp0+1
.882b		68		pla				pla 							; add stacked value = x 5
.882c		65 36		adc $36				adc 	zTemp0
.882e		85 36		sta $36				sta 	zTemp0
.8830		68		pla				pla
.8831		65 37		adc $37				adc 	zTemp0+1
.8833		85 37		sta $37				sta 	zTemp0+1
.8835		60		rts				rts
.8836						_SBBTString:
.8836		06 36		asl $36				asl 	zTemp0
.8838		26 37		rol $37				rol 	zTemp0+1
.883a		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/commands/dos.asm

.883b						BootDOS:
.883b		a9 49		lda #$49	            lda     #dosName & $FF
.883d		85 fb		sta $fb		            sta     kernel.args.buf+0
.883f		a9 88		lda #$88	            lda     #dosName >> 8
.8841		85 fc		sta $fc		            sta     kernel.args.buf+1
.8843		20 18 ff	jsr $ff18	            jsr     kernel.RunNamed
.8846		4c 70 86	jmp $8670	            jmp 	WarmStart
>8849		44 4f 53 00			dosName:	.text 	"DOS",0

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/end.asm

.884d						EndCommand:
.884d		4c 70 86	jmp $8670			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/commands/event.asm

.8850						UnaryEvent:
.8850		fa		plx				plx
.8851		20 d7 96	jsr $96d7			jsr 	TimerToStackX 				; timer in +0
.8854		e8		inx				inx  								; put reference into +1
.8855		20 4a a1	jsr $a14a			jsr 	EvaluateTerm
.8858		b5 50		lda $50,x			lda 	NSStatus,x 					; check if is integer reference
.885a		c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.885c		d0 4c		bne $88aa			bne 	_UEType
.885e		e8		inx				inx 								; put the step in +2
.885f		20 eb 97	jsr $97eb			jsr 	CheckComma
.8862		20 d6 a6	jsr $a6d6			jsr 	Evaluate16BitInteger
.8865		20 e3 97	jsr $97e3			jsr 	CheckRightBracket
.8868		ca		dex				dex
.8869		ca		dex				dex
.886a		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; copy reference to zTemp0
.886c		85 36		sta $36				sta 	zTemp0
.886e		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.8870		85 37		sta $37				sta 	zTemp0+1
.8872		5a		phy				phy
.8873		a0 03		ldy #$03			ldy 	#3 							; check bit 7 of last bit, the packed sign bit
.8875		b1 36		lda ($36),y			lda 	(zTemp0),y
.8877		30 2d		bmi $88a6			bmi 	_UEFalse 					; exit if signed.
.8879		a0 00		ldy #$00			ldy 	#0 							; has it timed out (24 bit)
.887b		b5 58		lda $58,x			lda 	NSMantissa0,x
.887d		d1 36		cmp ($36),y			cmp 	(zTemp0),y
.887f		c8		iny				iny
.8880		b5 60		lda $60,x			lda 	NSMantissa1,x
.8882		f1 36		sbc ($36),y			sbc		(zTemp0),y
.8884		c8		iny				iny
.8885		b5 68		lda $68,x			lda 	NSMantissa2,x
.8887		f1 36		sbc ($36),y			sbc		(zTemp0),y
.8889		90 1b		bcc $88a6			bcc 	_UEFalse 					; no, return FALSE.
.888b		18		clc				clc
.888c		a0 00		ldy #$00			ldy 	#0 							; work out new value as timer() + step
.888e		b5 58		lda $58,x			lda 	NSMantissa0,x
.8890		75 5a		adc $5a,x			adc 	NSMantissa0+2,x
.8892		91 36		sta ($36),y			sta 	(zTemp0),y
.8894		c8		iny				iny
.8895		b5 60		lda $60,x			lda 	NSMantissa1,x
.8897		75 62		adc $62,x			adc 	NSMantissa1+2,x
.8899		91 36		sta ($36),y			sta 	(zTemp0),y
.889b		c8		iny				iny
.889c		b5 68		lda $68,x			lda 	NSMantissa2,x
.889e		75 6a		adc $6a,x			adc 	NSMantissa2+2,x
.88a0		91 36		sta ($36),y			sta 	(zTemp0),y
.88a2		7a		ply				ply
.88a3		4c 69 98	jmp $9869			jmp 	ReturnTrue
.88a6						_UEFalse:
.88a6		7a		ply				ply 								; restore Y
.88a7		4c 74 98	jmp $9874			jmp 	ReturnFalse 				; and return False
.88aa						_UEType:
.88aa		4c 05 aa	jmp $aa05			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/commands/files/bload.asm

.88ad						Command_BLoad:
.88ad		a2 00		ldx #$00			ldx 	#0
.88af		20 ae a6	jsr $a6ae			jsr 	EvaluateString 				; file name to load
.88b2		20 eb 97	jsr $97eb			jsr 	CheckComma 					; consume comma
.88b5		e8		inx				inx
.88b6		20 c3 a6	jsr $a6c3			jsr 	EvaluateInteger 			; load address (full physical address)
.88b9		5a		phy				phy
.88ba		a5 58		lda $58				lda 	NSMantissa0					; file name -> XA
.88bc		a6 60		ldx $60				ldx 	NSMantissa1
.88be		20 61 82	jsr $8261			jsr 	KNLOpenFileRead 			; open file for reading
.88c1		b0 4e		bcs $8911			bcs 	CBLErrorHandler 			; error, so fail.
.88c3		8d 90 07	sta $0790			sta 	BasicFileStream 			; save the reading stream.
.88c6		a2 01		ldx #$01			ldx 	#1 							; address is in slot # 1
.88c8		20 14 89	jsr $8914			jsr 	BLOpenPhysicalMemory 		; open for access.
.88cb						_BLReadFile:
.88cb		ad 90 07	lda $0790			lda 	BasicFileStream
.88ce		a2 40		ldx #$40			ldx     #KNLReadBufferLen 			; set bytes to read.
.88d0		20 b6 82	jsr $82b6			jsr 	KNLReadBlock 				; read next block
.88d3		b0 22		bcs $88f7			bcs 	_BLFileError 				; file error, which might be EOF.
.88d5		c9 00		cmp #$00			cmp 	#0 							; read nothing.
.88d7		f0 f2		beq $88cb			beq 	_BLReadFile
.88d9		8d 8e 07	sta $078e			sta 	BLCopyCounter 				; counter.
.88dc		ac 8d 07	ldy $078d			ldy 	BLYOffset 					; copy the buffer out here
.88df		a2 00		ldx #$00			ldx 	#0 							; offset in buffer.
.88e1						_BLCopyLoop:
.88e1		bd 81 06	lda $0681,x			lda 	KNLReadBuffer,x 			; copy byte and advance
.88e4		91 3a		sta ($3a),y			sta 	(zTemp2),y
.88e6		c8		iny				iny
.88e7		d0 03		bne $88ec			bne 	_BLNoAdjust 				; check changed 256 byte or 8k page.
.88e9		20 3c 89	jsr $893c			jsr 	BLAdvancePhysicalMemory
.88ec						_BLNoAdjust:
.88ec		e8		inx				inx
.88ed		ce 8e 07	dec $078e			dec 	BLCopyCounter
.88f0		d0 ef		bne $88e1			bne 	_BLCopyLoop
.88f2		8c 8d 07	sty $078d			sty 	BLYOffset 					; update Y offset
.88f5		80 d4		bra $88cb			bra 	_BLReadFile 				; go ask for more.
.88f7						_BLFileError:
.88f7		c9 30		cmp #$30			cmp 	#KERR_EOF 					; End of file
.88f9		d0 16		bne $8911			bne 	CBLErrorHandler				; no, it's an actual error
.88fb		20 36 89	jsr $8936			jsr 	BLClosePhysicalMemory 		; close the access.
.88fe		ad 90 07	lda $0790			lda 	BasicFileStream 			; close the file
.8901		20 2b 83	jsr $832b			jsr 	KNLCloseFile
.8904		7a		ply				ply
.8905		60		rts				rts
.8906						CBLCloseError:
.8906		48		pha				pha
.8907		20 36 89	jsr $8936			jsr 	BLClosePhysicalMemory
.890a		ad 90 07	lda $0790			lda 	BasicFileStream
.890d		20 2b 83	jsr $832b			jsr 	KNLCloseFile
.8910		68		pla				pla
.8911						CBLErrorHandler:
.8911		4c fa 8a	jmp $8afa			jmp 	CLErrorHandler
=3						BLAccessPage = 3 							; page to use for actual memory.
.8914						BLOpenPhysicalMemory:
.8914		a5 0b		lda $0b				lda 	BLAccessPage+8 				; save current mapping
.8916		8d 8c 07	sta $078c			sta 	BLNormalMapping
.8919		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy address, 13 bit adjusted for page -> (zTemp2),BLYOffset
.891b		8d 8d 07	sta $078d			sta 	BLYOffset 					; zTemp2 0 is *always* zero.
.891e		64 3a		stz $3a				stz 	zTemp2
.8920		b5 60		lda $60,x			lda 	NSMantissa1,x
.8922		29 1f		and #$1f			and 	#$1F
.8924		09 60		ora #$60			ora 	#BLAccessPage << 5
.8926		85 3b		sta $3b				sta 	zTemp2+1
.8928		b5 68		lda $68,x			lda 	NSMantissa2,x 				; shift M2:M1 right 3 times to give page # required
.892a		16 60		asl $60,x			asl 	NSMantissa1,x
.892c		2a		rol a				rol 	a
.892d		16 60		asl $60,x			asl 	NSMantissa1,x
.892f		2a		rol a				rol 	a
.8930		16 60		asl $60,x			asl 	NSMantissa1,x
.8932		2a		rol a				rol 	a
.8933		85 0b		sta $0b				sta 	BLAccessPage+8 				; access that page
.8935		60		rts				rts
.8936						BLClosePhysicalMemory:
.8936		ad 8c 07	lda $078c			lda 	BLNormalMapping
.8939		85 0b		sta $0b				sta 	BLAccessPage+8
.893b		60		rts				rts
.893c						BLAdvancePhysicalMemory:
.893c		48		pha				pha
.893d		e6 3b		inc $3b				inc		zTemp2+1 					; bump MSB
.893f		a5 3b		lda $3b				lda 	zTemp2+1
.8941		c9 80		cmp #$80			cmp 	#(BLAccessPage+1) << 5 		; reached next page ?
.8943		d0 06		bne $894b			bne 	_BLAPMExit 					; (e.g. end of the mapped page.)
.8945		e6 0b		inc $0b				inc 	BLAccessPage+8 				; next physical page
.8947		a9 60		lda #$60			lda 	#BLAccessPage << 5 			; page back to start of transfer page
.8949		85 3b		sta $3b				sta 	zTemp2+1
.894b						_BLAPMExit:
.894b		68		pla				pla
.894c		60		rts				rts
.078c						BLNormalMapping:
>078c								.fill 	1
.078d						BLYOffset:
>078d								.fill 	1
.078e						BLCopyCounter:
>078e								.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/commands/files/bsave.asm

.894d						Command_BSave:
.894d		a2 00		ldx #$00			ldx 	#0
.894f		20 ae a6	jsr $a6ae			jsr 	EvaluateString 				; file name to load
.8952		20 eb 97	jsr $97eb			jsr 	CheckComma 					; consume comma
.8955		e8		inx				inx
.8956		20 c3 a6	jsr $a6c3			jsr 	EvaluateInteger 			; load address (full physical address)
.8959		20 eb 97	jsr $97eb			jsr 	CheckComma 					; consume comma
.895c		e8		inx				inx
.895d		20 c3 a6	jsr $a6c3			jsr 	EvaluateInteger 			; data length (3 bytes only)
.8960		5a		phy				phy
.8961		a5 58		lda $58				lda 	NSMantissa0					; file name -> XA
.8963		a6 60		ldx $60				ldx 	NSMantissa1
.8965		20 5c 82	jsr $825c			jsr 	KNLOpenFileWrite 			; open file for reading
.8968		b0 62		bcs $89cc			bcs 	CBSErrorHandler 			; error, so fail.
.896a		8d 90 07	sta $0790			sta 	BasicFileStream 			; save the reading stream.
.896d		a2 01		ldx #$01			ldx 	#1 							; address is in slot # 1
.896f		20 14 89	jsr $8914			jsr 	BLOpenPhysicalMemory 		; open for access.
.8972		a2 00		ldx #$00			ldx 	#0 							; number of bytes in kernel buffer
.8974		ac 8d 07	ldy $078d			ldy 	BLYOffset 					; used for data offset.
.8977						_BSWriteToFileLoop:
.8977		38		sec				sec 								; pre decrement count.
.8978		a5 5a		lda $5a				lda 	NSMantissa0+2
.897a		e9 01		sbc #$01			sbc 	#1
.897c		85 5a		sta $5a				sta 	NSMantissa0+2
.897e		a5 62		lda $62				lda 	NSMantissa1+2
.8980		e9 00		sbc #$00			sbc 	#0
.8982		85 62		sta $62				sta 	NSMantissa1+2
.8984		a5 6a		lda $6a				lda 	NSMantissa2+2
.8986		e9 00		sbc #$00			sbc 	#0
.8988		85 6a		sta $6a				sta 	NSMantissa2+2
.898a		30 15		bmi $89a1			bmi 	_BSFileComplete 			; undercounted, so exit.
.898c		b1 3a		lda ($3a),y			lda 	(zTemp2),y 					; get byte to save
.898e		9d 81 06	sta $0681,x			sta 	KNLReadBuffer,x 			; save in the buffer and bump buffer index
.8991		e8		inx				inx
.8992		c8		iny				iny 								; next byte
.8993		d0 03		bne $8998			bne 	_BSNoCheck
.8995		20 3c 89	jsr $893c			jsr 	BLAdvancePhysicalMemory 	; check not gone to next page.
.8998						_BSNoCheck:
.8998		e0 40		cpx #$40			cpx 	#KNLReadBufferLen 			; done the whole buffer
.899a		d0 db		bne $8977			bne 	_BSWriteToFileLoop 			; no , do the next byte.
.899c		20 af 89	jsr $89af			jsr 	BSFlushBuffer 				; yes, flush the buffer
.899f		80 d6		bra $8977			bra 	_BSWriteToFileLoop 			; and keep on going
.89a1						_BSFileComplete:
.89a1		20 af 89	jsr $89af			jsr 	BSFlushBuffer 				; write the buffer remainder.
.89a4		20 36 89	jsr $8936			jsr 	BLClosePhysicalMemory 		; close the access.
.89a7		ad 90 07	lda $0790			lda 	BasicFileStream 			; close the file
.89aa		20 2b 83	jsr $832b			jsr 	KNLCloseFile
.89ad		7a		ply				ply
.89ae		60		rts				rts
.89af						BSFlushBuffer:
.89af		e0 00		cpx #$00			cpx 	#0 							; buffer empty ?
.89b1		f0 0d		beq $89c0			beq 	_BSFBExit 					; if so, exit.
.89b3		a9 81		lda #$81			lda 	#KNLReadBuffer & $FF 		; where to write from.
.89b5		85 36		sta $36				sta 	zTemp0
.89b7		a9 06		lda #$06			lda 	#KNLReadBuffer >> 8
.89b9		85 37		sta $37				sta 	zTemp0+1 					; # of bytes in X
.89bb		20 b6 8b	jsr $8bb6			jsr 	CLWriteByteBlock 			; write it.
.89be		a2 00		ldx #$00			ldx 	#0 							; buffer is empty.
.89c0						_BSFBExit:
.89c0		60		rts				rts
.89c1						CBSSCloseError:
.89c1		48		pha				pha
.89c2		20 36 89	jsr $8936			jsr 	BLClosePhysicalMemory
.89c5		ad 90 07	lda $0790			lda 	BasicFileStream
.89c8		20 2b 83	jsr $832b			jsr 	KNLCloseFile
.89cb		68		pla				pla
.89cc						CBSErrorHandler:
.89cc		4c fa 8a	jmp $8afa			jmp 	CLErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/commands/files/dir.asm

.89cf						Command_Dir:
.89cf		ad 81 07	lda $0781			lda     KNLDefaultDrive				; set drive to list.
.89d2		85 f3		sta $f3				sta     kernel.args.directory.open.drive
.89d4		64 fd		stz $fd				stz     kernel.args.directory.open.path_len
.89d6		20 74 ff	jsr $ff74			jsr     kernel.Directory.Open
.89d9		b0 4f		bcs $8a2a			bcs     _CDExit
.89db						_CDEventLoop:
.89db		20 0c ff	jsr $ff0c			jsr     kernel.Yield        		; Polite, not actually needed.
.89de		20 a5 81	jsr $81a5			jsr     GetNextEvent
.89e1		b0 f8		bcs $89db			bcs     _CDEventLoop
.89e3		ad 82 07	lda $0782			lda     KNLEvent.type
.89e6		c9 44		cmp #$44			cmp     #kernel.event.directory.CLOSED
.89e8		f0 40		beq $8a2a			beq    	_CDExit
.89ea		20 ef 89	jsr $89ef			jsr     _CDMessages 				; handle various messages
.89ed		80 ec		bra $89db			bra     _CDEventLoop
.89ef						_CDMessages:
.89ef		c9 3a		cmp #$3a			cmp     #kernel.event.directory.OPENED
.89f1		f0 15		beq $8a08			beq     _CDEVRead
.89f3		c9 3c		cmp #$3c			cmp     #kernel.event.directory.VOLUME
.89f5		f0 19		beq $8a10			beq     _CDEVVolume
.89f7		c9 3e		cmp #$3e			cmp     #kernel.event.directory.FILE
.89f9		f0 32		beq $8a2d			beq     _CDEVFile
.89fb		c9 40		cmp #$40			cmp     #kernel.event.directory.FREE
.89fd		f0 70		beq $8a6f			beq     _CDEVFree
.89ff		c9 42		cmp #$42			cmp     #kernel.event.directory.EOF
.8a01		f0 6e		beq $8a71			beq     _CDEVEOF
.8a03		c9 46		cmp #$46			cmp     #kernel.event.directory.ERROR
.8a05		f0 6a		beq $8a71			beq     _CDEVEOF
.8a07		60		rts				rts
.8a08						_CDEVRead:
.8a08		ad 85 07	lda $0785			lda     KNLEvent.directory.stream
.8a0b		85 f3		sta $f3				sta     kernel.args.directory.read.stream
.8a0d		4c 78 ff	jmp $ff78			jmp     kernel.Directory.Read
.8a10						_CDEVVolume:
.8a10		a9 5b		lda #$5b			lda 	#"["
.8a12		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.8a15		ad 87 07	lda $0787			lda     KNLEvent.directory.volume.len
.8a18		20 79 8a	jsr $8a79			jsr     _CDReadData
.8a1b		20 55 98	jsr $9855			jsr 	PrintStringXA
.8a1e		a9 5d		lda #$5d			lda 	#"]"
.8a20		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.8a23		a9 0d		lda #$0d			lda 	#13
.8a25		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.8a28		80 de		bra $8a08			bra     _CDEVRead
.8a2a						_CDExit:
.8a2a		4c 70 86	jmp $8670			jmp 	WarmStart
.8a2d						_CDEVFile:
.8a2d		a9 20		lda #$20			lda 	#32
.8a2f		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.8a32		ad 87 07	lda $0787			lda     KNLEvent.directory.file.len
.8a35		48		pha				pha
.8a36		20 79 8a	jsr $8a79			jsr     _CDReadData
.8a39		20 55 98	jsr $9855			jsr 	PrintStringXA
.8a3c		68		pla				pla
.8a3d		49 ff		eor #$ff			eor 	#$FF
.8a3f		38		sec				sec
.8a40		69 10		adc #$10			adc 	#16
.8a42		aa		tax				tax
.8a43						_CDEVTab:
.8a43		a9 20		lda #$20			lda 	#32
.8a45		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.8a48		ca		dex				dex
.8a49		10 f8		bpl $8a43			bpl 	_CDEVTab
.8a4b		20 90 8a	jsr $8a90			jsr 	_CDReadExtended
.8a4e		ad 26 05	lda $0526			lda 	lineBuffer
.8a51		ae 27 05	ldx $0527			ldx 	lineBuffer+1
.8a54		20 6b 9c	jsr $9c6b			jsr 	ConvertInt16
.8a57		20 55 98	jsr $9855			jsr 	PrintStringXA
.8a5a		a2 8a		ldx #$8a			ldx 	#_CDEVFMessage >> 8
.8a5c		a9 63		lda #$63			lda 	#_CDEVFMessage & $FF
.8a5e		20 55 98	jsr $9855			jsr 	PrintStringXA
.8a61		80 a5		bra $8a08			bra     _CDEVRead
.8a63						_CDEVFMessage:
>8a63		20 62 6c 6f 63 6b 28 73				.text 	" block(s).",13,0
>8a6b		29 2e 0d 00
.8a6f						_CDEVFree:
.8a6f		80 00		bra $8a71			bra     _CDEVEOF
.8a71						_CDEVEOF:
.8a71		ad 85 07	lda $0785			lda     KNLEvent.directory.stream
.8a74		85 f3		sta $f3				sta     kernel.args.directory.close.stream
.8a76		4c 7c ff	jmp $ff7c			jmp     kernel.Directory.Close
.8a79						_CDReadData:
.8a79		85 fd		sta $fd				sta     kernel.args.recv.buflen
.8a7b		a9 26		lda #$26			lda     #lineBuffer & $FF
.8a7d		85 fb		sta $fb				sta     kernel.args.recv.buf+0
.8a7f		a9 05		lda #$05			lda     #lineBuffer >> 8
.8a81		85 fc		sta $fc				sta     kernel.args.recv.buf+1
.8a83		20 04 ff	jsr $ff04			jsr     kernel.ReadData
.8a86		a6 fd		ldx $fd				ldx     kernel.args.recv.buflen
.8a88		9e 26 05	stz $0526,x			stz     lineBuffer,x
.8a8b		a9 26		lda #$26			lda 	#lineBuffer & $FF
.8a8d		a2 05		ldx #$05			ldx 	#lineBuffer >> 8
.8a8f		60		rts				rts
.8a90						_CDReadExtended:
.8a90		a9 02		lda #$02			lda     #2
.8a92		85 fd		sta $fd				sta     kernel.args.recv.buflen
.8a94		a9 26		lda #$26			lda     #lineBuffer & $FF
.8a96		85 fb		sta $fb				sta     kernel.args.recv.buf+0
.8a98		a9 05		lda #$05			lda     #lineBuffer >> 8
.8a9a		85 fc		sta $fc				sta     kernel.args.recv.buf+1
.8a9c		4c 08 ff	jmp $ff08			jmp     kernel.ReadExt

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/commands/files/drive.asm

.8a9f						Command_Drive:
.8a9f		20 f1 a6	jsr $a6f1			jsr 	Evaluate8BitInteger
.8aa2		20 58 82	jsr $8258			jsr 	KNLSetDrive
.8aa5		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/commands/files/load.asm

.8aa6						Command_Load:
.8aa6		20 ac 8a	jsr $8aac			jsr 	LoadFile
.8aa9		4c 70 86	jmp $8670			jmp 	WarmStart
.8aac						LoadFile:
.8aac		20 ae a6	jsr $a6ae			jsr 	EvaluateString 				; file name to load
.8aaf		a6 37		ldx $37				ldx 	zTemp0+1					; zTemp0 -> XA
.8ab1		a5 36		lda $36				lda 	zTemp0
.8ab3		20 61 82	jsr $8261			jsr 	KNLOpenFileRead 			; open file for reading
.8ab6		b0 42		bcs $8afa			bcs 	CLErrorHandler 				; error, so fail.
.8ab8		8d 90 07	sta $0790			sta 	BasicFileStream 			; save the reading stream.
.8abb		20 4a 8b	jsr $8b4a			jsr     LoadReadByteInit            ; Init reader with the stream
.8abe		20 27 92	jsr $9227			jsr 	NewProgram 					; does the actual NEW.
.8ac1		9c 8f 07	stz $078f			stz 	LoadEOFFlag 				; clear EOF Flag.
.8ac4						_CLLoop:
.8ac4		20 08 8b	jsr $8b08			jsr 	LoadReadLine 				; get next line.
.8ac7		f0 10		beq $8ad9			beq 	_CLExit 					; end, exit.
.8ac9		20 93 80	jsr $8093			jsr 	TKTokeniseLine 				; tokenise the line.
.8acc		ad 27 04	lda $0427			lda 	tokenLineNumber 			; line number = 0
.8acf		0d 28 04	ora $0428			ora 	tokenLineNumber+1
.8ad2		f0 f0		beq $8ac4			beq 	_CLLoop 					; not legal code, blank line or maybe a comment.
.8ad4		20 4b 86	jsr $864b			jsr 	EditProgramCode 			; do the editing etc.
.8ad7		80 eb		bra $8ac4			bra 	_CLLoop
.8ad9						_CLExit:
.8ad9		ad 90 07	lda $0790			lda 	BasicFileStream
.8adc		20 2b 83	jsr $832b			jsr 	KNLCloseFile
.8adf						CLComplete:
.8adf		a9 e7		lda #$e7			lda 	#_CLCMsg & $FF
.8ae1		a2 8a		ldx #$8a			ldx 	#_CLCMsg >> 8
.8ae3		20 55 98	jsr $9855			jsr 	PrintStringXA
.8ae6		60		rts				rts
.8ae7						_CLCMsg:
>8ae7		43 6f 6d 70 6c 65 74 65				.text 	"Complete.",13,0
>8aef		2e 0d 00
.8af2						CLCloseError:
.8af2		48		pha				pha
.8af3		ad 90 07	lda $0790			lda 	BasicFileStream
.8af6		20 2b 83	jsr $832b			jsr 	KNLCloseFile
.8af9		68		pla				pla
.8afa						CLErrorHandler:
.8afa		c9 28		cmp #$28			cmp 	#KERR_NOTFOUND
.8afc		f0 05		beq $8b03			beq 	_CLEHNotFound
.8afe		a9 1a		lda #$1a		lda	#26
.8b00		4c fc 97	jmp $97fc		jmp	ErrorHandler
.8b03						_CLEHNotFound:
.8b03		a9 19		lda #$19		lda	#25
.8b05		4c fc 97	jmp $97fc		jmp	ErrorHandler
.8b08						LoadReadLine:
.8b08		a2 00		ldx #$00			ldx 	#0 							; look for first character non space/ctl
.8b0a		20 24 8b	jsr $8b24			jsr 	LoadReadCharacter
.8b0d		f0 14		beq $8b23			beq 	_LRLExit 					; eof ?
.8b0f		c9 21		cmp #$21			cmp 	#' '+1 						; space control tab skip
.8b11		90 f5		bcc $8b08			bcc 	LoadReadLine
.8b13						_LRLLoop:
.8b13		9d 26 05	sta $0526,x			sta 	lineBuffer,x 				; write into line buffer
.8b16		9e 27 05	stz $0527,x			stz 	lineBuffer+1,x 				; make ASCIIZ
.8b19		e8		inx				inx
.8b1a		20 24 8b	jsr $8b24			jsr 	LoadReadCharacter 			; next line
.8b1d		c9 20		cmp #$20			cmp 	#32 						; until < space ctrl/eof.
.8b1f		b0 f2		bcs $8b13			bcs 	_LRLLoop
.8b21		a9 01		lda #$01			lda 	#1 							; return code 1, okay.
.8b23						_LRLExit:
.8b23		60		rts				rts
.8b24						LoadReadCharacter:
.8b24		da		phx				phx
.8b25		5a		phy				phy
.8b26		ad 8f 07	lda $078f			lda 	LoadEOFFlag 				; already done EOF.
.8b29		d0 0c		bne $8b37			bne 	_LRCIsEOF
.8b2b		20 54 8b	jsr $8b54			jsr 	LoadReadByte 				; read a byte
.8b2e		90 09		bcc $8b39			bcc		_LRCExit 					; read okay.
.8b30		c9 30		cmp #$30			cmp 	#KERR_EOF 					; if error not EOF it's an actual error.
.8b32		d0 be		bne $8af2			bne 	CLCloseError
.8b34		ce 8f 07	dec $078f			dec 	LoadEOFFlag
.8b37						_LRCIsEOF:
.8b37		a9 00		lda #$00			lda 	#0
.8b39						_LRCExit:
.8b39		c9 09		cmp #$09			cmp 	#9 							; convert tab to space
.8b3b		d0 02		bne $8b3f			bne 	_LRCNotTab
.8b3d		a9 20		lda #$20			lda 	#' '
.8b3f						_LRCNotTab:
.8b3f		c9 0a		cmp #$0a			cmp 	#$0A
.8b41		d0 02		bne $8b45			bne 	_LRCNotLF
.8b43		a9 0d		lda #$0d			lda 	#$0D
.8b45						_LRCNotLF:
.8b45		7a		ply				ply
.8b46		fa		plx				plx
.8b47		c9 00		cmp #$00			cmp 	#0 							; set Z flag if EOF.
.8b49		60		rts				rts
.8b4a						LoadReadByteInit:
.8b4a		8d 91 07	sta $0791			sta     LoadFileStream 				; save stream
.8b4d		9c 92 07	stz $0792			stz     LoadNextCharacter 			; reset buffer
.8b50		9c 93 07	stz $0793			stz     LoadEndCharacter
.8b53		60		rts				rts
.8b54						LoadReadByte:
.8b54		da		phx				phx
.8b55		ae 92 07	ldx $0792			ldx     LoadNextCharacter 					; all data consumed ?
.8b58		ec 93 07	cpx $0793			cpx     LoadEndCharacter
.8b5b		d0 12		bne $8b6f			bne     _KNLRBGetNextByte
.8b5d		ad 91 07	lda $0791			lda     LoadFileStream
.8b60		a2 40		ldx #$40			ldx     #KNLReadBufferLen 			; set bytes to read.
.8b62		20 b6 82	jsr $82b6			jsr     KNLReadBlock 				; read next chunk from the stream
.8b65		b0 0f		bcs $8b76			bcs     _KNLRBError 				; error has occurred on read.
.8b67		8d 93 07	sta $0793			sta     LoadEndCharacter 						; # read is the number available
.8b6a		a2 00		ldx #$00			ldx     #0 							; reset the read pointer.
.8b6c		8e 92 07	stx $0792			stx     LoadNextCharacter
.8b6f						_KNLRBGetNextByte:
.8b6f		bd 81 06	lda $0681,x			lda     KNLReadBuffer,x 			; get the next data item
.8b72		ee 92 07	inc $0792			inc     LoadNextCharacter 					; and advance the index
.8b75		18		clc				clc 								; succeeded
.8b76						_KNLRBError:
.8b76		fa		plx				plx
.8b77		60		rts				rts
.078f						LoadEOFFlag:
>078f								.fill 	1
.0790						BasicFileStream:
>0790								.fill 	1
.0791						LoadFileStream:
>0791								.byte   ?
.0792						LoadNextCharacter:
>0792								.byte   ?
.0793						LoadEndCharacter:
>0793								.byte   ?

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/commands/files/save.asm

.8b78						Command_Save:
.8b78		20 ae a6	jsr $a6ae			jsr 	EvaluateString 				; file name to load
.8b7b		a6 37		ldx $37				ldx 	zTemp0+1					; zTemp0 -> XA
.8b7d		a5 36		lda $36				lda 	zTemp0
.8b7f		20 5c 82	jsr $825c			jsr 	KNLOpenFileWrite 			; open file for writing
.8b82		b0 2f		bcs $8bb3			bcs 	CSErrorHandler 				; error, so fail.
.8b84		8d 90 07	sta $0790			sta 	BasicFileStream 			; save the reading stream.
.8b87		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8b89		85 30		sta $30				sta 	codePtr
.8b8b		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8b8d		85 31		sta $31				sta 	codePtr+1
.8b8f						_CSLoop:
.8b8f		b2 30		lda ($30)			lda 	(codePtr)
.8b91		f0 17		beq $8baa			beq 	_CSExit
.8b93		20 d7 8b	jsr $8bd7			jsr 	CSGetCleanLine
.8b96		84 37		sty $37				sty 	zTemp0+1 					; save write address of data
.8b98		85 36		sta $36				sta 	zTemp0
.8b9a		20 b6 8b	jsr $8bb6			jsr 	CLWriteByteBlock 			; write the block out.
.8b9d		18		clc				clc
.8b9e		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8ba0		65 30		adc $30				adc 	codePtr
.8ba2		85 30		sta $30				sta 	codePtr
.8ba4		90 02		bcc $8ba8			bcc 	_CREExit
.8ba6		e6 31		inc $31				inc 	codePtr+1 					; carry
.8ba8						_CREExit:
.8ba8		80 e5		bra $8b8f			bra 	_CSLoop
.8baa						_CSExit:
.8baa		ad 90 07	lda $0790			lda 	BasicFileStream 			; close file
.8bad		20 2b 83	jsr $832b			jsr 	KNLCloseFile
.8bb0		4c df 8a	jmp $8adf			jmp 	CLComplete 					; display complete message.
.8bb3						CSErrorHandler:
.8bb3		4c fa 8a	jmp $8afa			jmp 	CLErrorHandler
.8bb6						CLWriteByteBlock:
.8bb6		e0 00		cpx #$00			cpx 	#0 							; written the lot ?
.8bb8		f0 1c		beq $8bd6			beq 	_CLWBBExit					; if so, exit
.8bba		ad 90 07	lda $0790			lda 	BasicFileStream 			; stream to write, count in X
.8bbd		20 f1 82	jsr $82f1			jsr 	KNLWriteBlock 				; call one write attempt
.8bc0		b0 f1		bcs $8bb3			bcs 	CSErrorHandler 				; error occurred
.8bc2		85 38		sta $38				sta 	zTemp1 						; save bytes written.
.8bc4		8a		txa				txa 								; subtract bytes written from X, total count.
.8bc5		38		sec				sec
.8bc6		e5 38		sbc $38				sbc 	zTemp1
.8bc8		aa		tax				tax
.8bc9		18		clc				clc 								; advance zTemp0 pointer by bytes written.
.8bca		a5 36		lda $36				lda 	zTemp0
.8bcc		65 38		adc $38				adc 	zTemp1
.8bce		85 36		sta $36				sta 	zTemp0
.8bd0		90 e4		bcc $8bb6			bcc 	CLWriteByteBlock
.8bd2		e6 37		inc $37				inc 	zTemp0+1
.8bd4		80 e0		bra $8bb6			bra 	CLWriteByteBlock 			; and retry write out.
.8bd6						_CLWBBExit:
.8bd6		60		rts				rts
.8bd7						CSGetCleanLine:
.8bd7		a9 00		lda #$00			lda 	#0 							; no indent.
.8bd9		20 89 80	jsr $8089			jsr 	TKListConvertLine 			; convert line into token Buffer
.8bdc		a2 00		ldx #$00			ldx 	#0 							; copy stripping controls.
.8bde		a0 00		ldy #$00			ldy 	#0
.8be0						_CSClean:
.8be0		b9 29 04	lda $0429,y			lda 	tokenBuffer,y
.8be3		f0 09		beq $8bee			beq 	_CSDoneClean
.8be5		30 04		bmi $8beb			bmi 	_CSIgnoreCharacter
.8be7		9d 26 05	sta $0526,x			sta 	lineBuffer,x
.8bea		e8		inx				inx
.8beb						_CSIgnoreCharacter:
.8beb		c8		iny				iny
.8bec		80 f2		bra $8be0			bra 	_CSClean
.8bee						_CSDoneClean:
.8bee		a9 0d		lda #$0d			lda 	#13 						; add CR, length now in X and ASCIIZ.
.8bf0		9d 26 05	sta $0526,x			sta 	lineBuffer,x
.8bf3		e8		inx				inx
.8bf4		9e 26 05	stz $0526,x			stz 	lineBuffer,x
.8bf7		a0 05		ldy #$05			ldy 	#(lineBuffer >> 8) 			; line address in YA
.8bf9		a9 26		lda #$26			lda 	#(lineBuffer & $FF)
.8bfb		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/commands/files/verify.asm

.dc65						m
.8bfc						Command_VERIFY:
.8bfc		20 ae a6	jsr $a6ae			jsr 	EvaluateString 				; file name to verify
.8bff		a6 37		ldx $37				ldx 	zTemp0+1					; zTemp0 -> XA
.8c01		a5 36		lda $36				lda 	zTemp0
.8c03		20 61 82	jsr $8261			jsr 	KNLOpenFileRead 			; open file for reading
.8c06		b0 4b		bcs $8c53			bcs 	_CVErrorHandler 			; error, so fail.
.8c08		8d 90 07	sta $0790			sta 	BasicFileStream 			; save the reading stream.
.8c0b		20 4a 8b	jsr $8b4a			jsr     LoadReadByteInit            ; Init reader with the stream
.8c0e		9c 8f 07	stz $078f			stz 	LoadEOFFlag 				; clear EOF Flag.
.8c11		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8c13		85 30		sta $30				sta 	codePtr
.8c15		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8c17		85 31		sta $31				sta 	codePtr+1
.8c19						_CVLoop:
.8c19		20 08 8b	jsr $8b08			jsr 	LoadReadLine 				; get next line.
.8c1c		f0 27		beq $8c45			beq 	_CVExit 					; end, exit.
.8c1e		20 93 80	jsr $8093			jsr 	TKTokeniseLine 				; tokenise the line.
.8c21		ad 27 04	lda $0427			lda 	tokenLineNumber 			; line number = 0
.8c24		0d 28 04	ora $0428			ora 	tokenLineNumber+1
.8c27		f0 f0		beq $8c19			beq 	_CVLoop 					; not legal code, blank line or maybe a comment.
.8c29		a0 00		ldy #$00			ldy 	#0 							; start compare
.8c2b						_CVCompareLoop:
.8c2b		b1 30		lda ($30),y			lda 	(codePtr),y
.8c2d		d9 26 04	cmp $0426,y			cmp 	tokenOffset,y 				; compare against actual code.
.8c30		d0 1c		bne $8c4e			bne 	_CVCompareError
.8c32		c8		iny				iny
.8c33		cc 26 04	cpy $0426			cpy 	tokenOffset 				; until done whole line of code
.8c36		d0 f3		bne $8c2b			bne 	_CVCompareLoop
.8c38		18		clc				clc
.8c39		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8c3b		65 30		adc $30				adc 	codePtr
.8c3d		85 30		sta $30				sta 	codePtr
.8c3f		90 02		bcc $8c43			bcc 	_CREExit
.8c41		e6 31		inc $31				inc 	codePtr+1 					; carry
.8c43						_CREExit:
.8c43		80 d4		bra $8c19			bra 	_CVLoop
.8c45						_CVExit:
.8c45		ad 90 07	lda $0790			lda 	BasicFileStream
.8c48		20 2b 83	jsr $832b			jsr 	KNLCloseFile
.8c4b		4c df 8a	jmp $8adf			jmp 	CLComplete
.8c4e						_CVCompareError:
.8c4e		a9 1b		lda #$1b		lda	#27
.8c50		4c fc 97	jmp $97fc		jmp	ErrorHandler
.8c53						_CVErrorHandler:
.8c53		4c fa 8a	jmp $8afa			jmp 	CLErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/for.asm

.8c56						ForCommand:
.8c56		a9 d9		lda #$d9			lda 	#STK_FOR+9 					; allocate 18 bytes on the return stack (see above).
.8c58		20 75 b0	jsr $b075			jsr 	StackOpen
.8c5b		a2 00		ldx #$00			ldx 	#0
.8c5d		20 4a a1	jsr $a14a			jsr 	EvaluateTerm
.8c60		b5 50		lda $50,x			lda 	NSStatus,x
.8c62		c9 20		cmp #$20			cmp 	#NSBIsReference+NSTInteger 	; do we have an integer 4 byte reference.
.8c64		d0 47		bne $8cad			bne		_FCError
.8c66		a9 3d		lda #$3d			lda 	#KWD_EQUAL 					; =
.8c68		20 f3 97	jsr $97f3			jsr 	CheckNextA
.8c6b		e8		inx				inx
.8c6c		20 c3 a6	jsr $a6c3			jsr 	EvaluateInteger 			; <from> in +1
.8c6f		b1 30		lda ($30),y			lda 	(codePtr),y
.8c71		c8		iny				iny 								; consume it
.8c72		48		pha				pha 								; save on stack for later
.8c73		c9 c1		cmp #$c1			cmp 	#KWD_DOWNTO
.8c75		f0 04		beq $8c7b			beq 	_FCNoSyntax
.8c77		c9 db		cmp #$db			cmp 	#KWD_TO
.8c79		d0 35		bne $8cb0			bne 	_FCSyntaxError
.8c7b						_FCNoSyntax:
.8c7b		e8		inx				inx
.8c7c		20 c3 a6	jsr $a6c3			jsr 	EvaluateInteger
.8c7f		20 ba b0	jsr $b0ba			jsr 	STKSaveCodePosition 		; save loop back position
.8c82		68		pla				pla 								; restore DOWNTO or TO
.8c83		5a		phy				phy 								; save Y on the stack
.8c84		49 c1		eor #$c1			eor 	#KWD_DOWNTO 				; 0 if DOWNTO, #0 if TO
.8c86		f0 02		beq $8c8a			beq 	_FCNotDownTo
.8c88		a9 02		lda #$02			lda 	#2
.8c8a						_FCNotDownTo:
.8c8a		3a		dec a				dec 	a 							; 255 if DOWNTO, 1 if TO
.8c8b		a0 10		ldy #$10			ldy 	#16
.8c8d		91 34		sta ($34),y			sta 	(basicStack),y 				; copy that out to the Basic Stack.
.8c8f		a0 06		ldy #$06			ldy 	#6 							; this is the address of the loop variable.
.8c91		a5 58		lda $58				lda 	NSMantissa0
.8c93		91 34		sta ($34),y			sta 	(basicStack),y
.8c95		a5 60		lda $60				lda 	NSMantissa1
.8c97		c8		iny				iny
.8c98		91 34		sta ($34),y			sta 	(basicStack),y
.8c9a		a0 08		ldy #$08			ldy 	#8 							; set initial index value
.8c9c		a2 01		ldx #$01			ldx 	#1
.8c9e		20 b3 8c	jsr $8cb3			jsr 	FCIntegerToStack
.8ca1		a0 0c		ldy #$0c			ldy 	#12 						; set the terminal value
.8ca3		a2 02		ldx #$02			ldx 	#2
.8ca5		20 b3 8c	jsr $8cb3			jsr 	FCIntegerToStack
.8ca8		20 ce 8c	jsr $8cce			jsr 	CopyIndexToReference
.8cab		7a		ply				ply 								; restore position
.8cac		60		rts				rts
.8cad						_FCError:
.8cad		4c 05 aa	jmp $aa05			jmp 	TypeError
.8cb0						_FCSyntaxError:
.8cb0		4c fb a9	jmp $a9fb			jmp 	SyntaxError
.8cb3						FCIntegerToStack:
.8cb3		34 50		bit $50,x			bit 	NSStatus,x 					; is the value negative
.8cb5		10 03		bpl $8cba			bpl	 	_FCNotNegative
.8cb7		20 1f a7	jsr $a71f			jsr 	NSMNegateMantissa 			; if so 2's complement the mantissa
.8cba						_FCNotNegative:
.8cba		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy out to the basic stack
.8cbc		91 34		sta ($34),y			sta 	(basicStack),y
.8cbe		c8		iny				iny
.8cbf		b5 60		lda $60,x			lda 	NSMantissa1,x
.8cc1		91 34		sta ($34),y			sta 	(basicStack),y
.8cc3		c8		iny				iny
.8cc4		b5 68		lda $68,x			lda 	NSMantissa2,x
.8cc6		91 34		sta ($34),y			sta 	(basicStack),y
.8cc8		c8		iny				iny
.8cc9		b5 70		lda $70,x			lda 	NSMantissa3,x
.8ccb		91 34		sta ($34),y			sta 	(basicStack),y
.8ccd		60		rts				rts
.8cce						CopyIndexToReference:
.8cce		5a		phy				phy
.8ccf		a0 06		ldy #$06			ldy 	#6 							; copy address-8 to write to zTemp0
.8cd1		38		sec				sec 								; (because we copy from offset 8)
.8cd2		b1 34		lda ($34),y			lda 	(basicStack),y
.8cd4		e9 08		sbc #$08			sbc 	#8
.8cd6		85 36		sta $36				sta 	zTemp0
.8cd8		c8		iny				iny
.8cd9		b1 34		lda ($34),y			lda 	(basicStack),y
.8cdb		e9 00		sbc #$00			sbc 	#0
.8cdd		85 37		sta $37				sta 	zTemp0+1
.8cdf		a2 04		ldx #$04			ldx 	#4 							; this is the copy counter/
.8ce1		a0 0b		ldy #$0b			ldy 	#8+3 		 				; the MSB of the mantissa
.8ce3		b1 34		lda ($34),y			lda 	(basicStack),y
.8ce5		0a		asl a				asl 	a 							; into carry
.8ce6		a0 08		ldy #$08			ldy 	#8 							; where to copy from.
.8ce8		90 14		bcc $8cfe			bcc 	_CITRNormal
.8cea		38		sec				sec
.8ceb						_CITRNegative:
.8ceb		a9 00		lda #$00			lda 	#0
.8ced		f1 34		sbc ($34),y			sbc 	(basicStack),y
.8cef		91 36		sta ($36),y			sta 	(zTemp0),y
.8cf1		c8		iny				iny
.8cf2		ca		dex				dex
.8cf3		d0 f6		bne $8ceb			bne 	_CITRNegative
.8cf5		88		dey				dey 								; look at MSB of mantissa
.8cf6		b1 36		lda ($36),y			lda 	(zTemp0),y 					; set the MSB as negative packed.
.8cf8		09 80		ora #$80			ora 	#$80
.8cfa		91 36		sta ($36),y			sta 	(zTemp0),y
.8cfc		7a		ply				ply
.8cfd		60		rts				rts
.8cfe						_CITRNormal:
.8cfe		b1 34		lda ($34),y			lda 	(basicStack),y 				; copy without negation.
.8d00		91 36		sta ($36),y			sta 	(zTemp0),y
.8d02		c8		iny				iny
.8d03		ca		dex				dex
.8d04		d0 f8		bne $8cfe			bne 	_CITRNormal
.8d06		7a		ply				ply 								; and exit.
.8d07		60		rts				rts
.8d08						NextCommand:
.8d08		a9 d9		lda #$d9			lda 	#STK_FOR+9 					; check FOR is TOS
.8d0a		a2 11		ldx #$11			ldx 	#ERRID_FOR 					; this error
.8d0c		20 a2 b0	jsr $b0a2			jsr 	StackCheckFrame
.8d0f		5a		phy				phy
.8d10		a0 10		ldy #$10			ldy 	#16 						; get the step count
.8d12		b1 34		lda ($34),y			lda 	(basicStack),y
.8d14		85 36		sta $36				sta 	zTemp0 						; this is the sign extend
.8d16		30 02		bmi $8d1a			bmi 	_NCStepNeg
.8d18		64 36		stz $36				stz 	zTemp0 						; which is 0 or 255
.8d1a						_NCStepNeg:
.8d1a		a0 08		ldy #$08			ldy 	#8 							; offset to bump
.8d1c		a2 04		ldx #$04			ldx 	#4 							; count to bump
.8d1e		18		clc				clc
.8d1f						_NCBump:
.8d1f		71 34		adc ($34),y			adc 	(basicStack),y 				; add it
.8d21		91 34		sta ($34),y			sta 	(basicStack),y
.8d23		a5 36		lda $36				lda 	zTemp0 						; get sign extend for next time.
.8d25		c8		iny				iny 								; next byte
.8d26		ca		dex				dex 								; do four times
.8d27		d0 f6		bne $8d1f			bne 	_NCBump
.8d29		20 ce 8c	jsr $8cce			jsr		CopyIndexToReference		; copy it to the reference variable.
.8d2c		a0 10		ldy #$10			ldy 	#16 						; get step count again
.8d2e		b1 34		lda ($34),y			lda 	(basicStack),y
.8d30		0a		asl a				asl 	a 							; sign bit to carry
.8d31		a9 0c		lda #$0c			lda 	#12 						; offset of LHS = terminal offset
.8d33		85 38		sta $38				sta 	zTemp1
.8d35		90 02		bcc $8d39			bcc 	_NCCompRev 					; use if step is +ve
.8d37		a9 08		lda #$08			lda 	#8 							; now the LHS = index value
.8d39						_NCCompRev:
.8d39		85 38		sta $38				sta 	zTemp1 						; so zTemp0 is the index for LHS
.8d3b		49 04		eor #$04			eor 	#(8^12) 					; and zTemp0+1 is the index for RHS
.8d3d		85 39		sta $39				sta 	zTemp1+1
.8d3f		a2 04		ldx #$04			ldx 	#4 							; bytes to compare
.8d41		38		sec				sec
.8d42						_NCCompare:
.8d42		a4 38		ldy $38				ldy 	zTemp1 						; do compare using the two indices
.8d44		b1 34		lda ($34),y			lda 	(basicStack),y
.8d46		a4 39		ldy $39				ldy 	zTemp1+1
.8d48		f1 34		sbc ($34),y			sbc 	(basicStack),y
.8d4a		e6 38		inc $38				inc 	zTemp1 						; bump the indices (inc,dex do not change C or V)
.8d4c		e6 39		inc $39				inc 	zTemp1+1
.8d4e		ca		dex				dex 								; do it 4 times.
.8d4f		d0 f1		bne $8d42			bne 	_NCCompare
.8d51		50 02		bvc $8d55			bvc 	_NCNoOverflow 				; convert to signed comparison
.8d53		49 80		eor #$80			eor 	#$80
.8d55						_NCNoOverflow:
.8d55		7a		ply				ply 								; restore Y position
.8d56		0a		asl a				asl 	a 							; is bit 7 set.
.8d57		90 04		bcc $8d5d			bcc 	_NCLoopBack 				; if no , >= so loop back
.8d59		20 94 b0	jsr $b094			jsr 	StackClose 					; exit the loop
.8d5c		60		rts				rts
.8d5d						_NCLoopBack:
.8d5d		20 cb b0	jsr $b0cb			jsr 	STKLoadCodePosition 		; loop back
.8d60		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/gosub.asm

.8d61						Command_GOSUB:
.8d61		a2 00		ldx #$00			ldx 	#0
.8d63		20 d6 a6	jsr $a6d6			jsr 	Evaluate16BitInteger 		; line number in Stack.0
.8d66		a9 e3		lda #$e3			lda 	#STK_GOSUB+3
.8d68		20 75 b0	jsr $b075			jsr 	StackOpen 					; create frame
.8d6b		20 ba b0	jsr $b0ba			jsr 	STKSaveCodePosition 		; save current position
.8d6e		4c 84 8d	jmp $8d84			jmp 	GotoStackX
.8d71						Command_RETURN:
.8d71		a9 e0		lda #$e0			lda 	#STK_GOSUB 					; check TOS is this
.8d73		a2 0e		ldx #$0e			ldx 	#ERRID_GOSUB 				; this error
.8d75		20 a2 b0	jsr $b0a2			jsr 	StackCheckFrame
.8d78		20 cb b0	jsr $b0cb			jsr 	STKLoadCodePosition 		; restore code position
.8d7b		20 94 b0	jsr $b094			jsr 	StackClose
.8d7e		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/goto.asm

.8d7f						GotoCommand:
.8d7f		a2 00		ldx #$00			ldx 	#0 							; GOTO where
.8d81		20 d6 a6	jsr $a6d6			jsr 	Evaluate16BitInteger
.8d84						GotoStackX:
.8d84		b5 60		lda $60,x			lda  	NSMantissa1,x 				; put line # in XA. I'll keep this even though
.8d86		48		pha				pha 								; it is slightly inefficient, just in cases.
.8d87		b5 58		lda $58,x			lda 	NSMantissa0,x
.8d89		fa		plx				plx
.8d8a		20 93 ac	jsr $ac93			jsr 	MemorySearch 				; transfer to line number AX.
.8d8d		90 05		bcc $8d94			bcc 	_GotoError 					; not found, off end.
.8d8f		d0 03		bne $8d94			bne 	_GotoError 					; not found exactly
.8d91		4c bd 93	jmp $93bd			jmp 	RunNewLine 					; and go straight to new line code.
.8d94						_GotoError:
.8d94		a9 0d		lda #$0d		lda	#13
.8d96		4c fc 97	jmp $97fc		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/if.asm

.8d99						IfCommand:
.8d99		a2 00		ldx #$00			ldx 	#0 							; Get the if test.
.8d9b		20 a4 a6	jsr $a6a4			jsr 	EvaluateNumber
.8d9e		b1 30		lda ($30),y			lda 	(codePtr),y
.8da0		c9 b5		cmp #$b5			cmp 	#KWD_THEN  					; could be THEN <stuff>
.8da2		d0 0a		bne $8dae			bne 	_IfStructured 				; we still support it.
.8da4		c8		iny				iny 								; consume THEN
.8da5		20 78 a7	jsr $a778			jsr 	NSMIsZero 					; is it zero
.8da8		f0 01		beq $8dab			beq 	_IfFail 					; if fail, go to next line
.8daa		60		rts				rts 								; if THEN just continue
.8dab						_IfFail:
.8dab		4c 98 93	jmp $9398			jmp 	EOLCommand
.8dae						_IfStructured:
.8dae		20 78 a7	jsr $a778			jsr 	NSMIsZero 					; is it zero
.8db1		d0 07		bne $8dba			bne 	_IfExit 					; if not, then continue normally.
.8db3		a9 c2		lda #$c2			lda 	#KWD_ELSE 					; look for else/endif
.8db5		a2 b2		ldx #$b2			ldx 	#KWD_ENDIF
.8db7		20 3e 97	jsr $973e			jsr 	ScanForward 				; and run from there
.8dba						_IfExit:
.8dba		60		rts				rts
.8dbb						ElseCode:
.8dbb		a9 b2		lda #$b2			lda 	#KWD_ENDIF 					; else is only run after the if clause succeeds
.8dbd		aa		tax				tax 								; so just go to the structure exit
.8dbe		20 3e 97	jsr $973e			jsr 	ScanForward
.8dc1		60		rts				rts
.8dc2						EndIf:
.8dc2		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/inputprint.asm

.8dc3						Command_Input:
.8dc3		9c 24 04	stz $0424			stz 	isPrintFlag
.8dc6		80 0c		bra $8dd4			bra 	Command_IP_Main
.8dc8						Command_CPrint:
.8dc8		a9 7f		lda #$7f			lda 	#$7F 						; set input flag to character mode
.8dca		8d 24 04	sta $0424			sta 	isPrintFlag 				; clear input flag
.8dcd		80 05		bra $8dd4			bra 	Command_IP_Main
.8dcf						Command_Print:
.8dcf		a9 ff		lda #$ff			lda 	#$FF 						; set input flag
.8dd1		8d 24 04	sta $0424			sta 	isPrintFlag 				; clear input flag
.8dd4						Command_IP_Main:
.8dd4		18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.8dd5						_CPLoop:
.8dd5		08		php				php 								; save last action flag
.8dd6		b1 30		lda ($30),y			lda 	(codePtr),y
.8dd8		c9 80		cmp #$80			cmp  	#KWC_EOL 					; end of line or colon, exit now.
.8dda		f0 54		beq $8e30			beq 	_CPExit
.8ddc		c9 3a		cmp #$3a			cmp 	#KWD_COLON
.8dde		f0 50		beq $8e30			beq 	_CPExit
.8de0		68		pla				pla 								; throw last action flag
.8de1		b1 30		lda ($30),y			lda 	(codePtr),y
.8de3		c8		iny				iny
.8de4		c9 3b		cmp #$3b			cmp 	#KWD_SEMICOLON				; is it a semicolon
.8de6		f0 45		beq $8e2d			beq 	_CPContinueWithSameLine
.8de8		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; comma
.8dea		f0 3c		beq $8e28			beq 	_CPTab
.8dec		c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; apostrophe (new line)
.8dee		f0 34		beq $8e24			beq 	_CPNewLine
.8df0		88		dey				dey 								; undo the get.
.8df1		20 fe 9c	jsr $9cfe			jsr 	EvaluateExpressionAt0 		; evaluate expression at 0.
.8df4		b5 50		lda $50,x			lda 	NSStatus,x 					; read the status
.8df6		29 20		and #$20			and 	#NSBIsReference 			; is it a reference
.8df8		f0 0d		beq $8e07			beq 	_CPIsValue 					; no, display it.
.8dfa		ad 24 04	lda $0424			lda 	isPrintFlag 				; if print, dereference and print.
.8dfd		d0 05		bne $8e04			bne 	_CPIsPrint 					; otherwise display.
.8dff		20 39 8e	jsr $8e39			jsr 	CIInputValue 				; input a value to the reference
.8e02		80 20		bra $8e24			bra 	_CPNewLine
.8e04						_CPIsPrint:
.8e04		20 c3 9f	jsr $9fc3			jsr 	Dereference 				; dereference if required.
.8e07						_CPIsValue:
.8e07		b5 50		lda $50,x			lda 	NSStatus,x 					; is it a number
.8e09		29 10		and #$10			and 	#NSBIsString
.8e0b		f0 09		beq $8e16			beq 	_CPNumber
.8e0d		a6 60		ldx $60				ldx 	NSMantissa1 				; string, print the text.
.8e0f		a5 58		lda $58				lda 	NSMantissa0
.8e11		20 9c 8e	jsr $8e9c			jsr 	CPPrintStringXA
.8e14		80 be		bra $8dd4			bra 	Command_IP_Main 			; loop round clearing carry so NL if end
.8e16						_CPNumber:
.8e16		a9 05		lda #$05			lda 	#5 							; maximum decimals
.8e18		20 8b a5	jsr $a58b			jsr 	ConvertNumberToString 		; convert to string (in unary str$() function)
.8e1b		a2 06		ldx #$06			ldx 	#decimalBuffer >> 8
.8e1d		a9 45		lda #$45			lda 	#decimalBuffer & $FF
.8e1f		20 9c 8e	jsr $8e9c			jsr 	CPPrintStringXA 			; print it.
.8e22		80 b0		bra $8dd4			bra 	Command_IP_Main				; loop round clearing carry so NL if end
.8e24						_CPNewLine:
.8e24		a9 0d		lda #$0d			lda 	#13
.8e26		80 02		bra $8e2a			bra 	_CPPrintCharDirect
.8e28						_CPTab:
.8e28		a9 09		lda #$09			lda 	#9 							; print TAB
.8e2a						_CPPrintCharDirect:
.8e2a		20 b7 8e	jsr $8eb7			jsr 	CPPVControl 				; print TAB/CR using the non PETSCII
.8e2d						_CPContinueWithSameLine:
.8e2d		38		sec				sec 								; loop round with carry set, which
.8e2e		80 a5		bra $8dd5			bra 	_CPLoop 					; will inhibit final CR
.8e30						_CPExit:
.8e30		28		plp				plp 								; get last action flag
.8e31		b0 05		bcs $8e38			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.8e33		a9 0d		lda #$0d			lda 	#13 						; print new line
.8e35		20 b7 8e	jsr $8eb7			jsr 	CPPVControl
.8e38						_CPExit2:
.8e38		60		rts				rts
.8e39						CIInputValue:
.8e39		a2 00		ldx #$00			ldx 	#0 							; input a line.
.8e3b						_CIInputLine:
.8e3b		20 ba 8e	jsr $8eba			jsr 	CPInputVector 				; get key
.8e3e		c9 0d		cmp #$0d			cmp 	#13 						; 13 = End
.8e40		f0 1f		beq $8e61			beq 	_CIHaveValue
.8e42		c9 08		cmp #$08			cmp 	#8 							; 8 = BS
.8e44		f0 11		beq $8e57			beq 	_CIBackspace
.8e46		c9 20		cmp #$20			cmp 	#32 						; ignore other control characters
.8e48		90 f1		bcc $8e3b			bcc 	_CIInputLine
.8e4a		e0 50		cpx #$50			cpx 	#80 						; max length
.8e4c		b0 ed		bcs $8e3b			bcs 	_CIInputLine
.8e4e		9d 26 05	sta $0526,x			sta 	lineBuffer,x
.8e51		e8		inx				inx
.8e52		20 43 80	jsr $8043			jsr 	EXTPrintCharacter 			; echo it.
.8e55		80 e4		bra $8e3b			bra 	_CIInputLine
.8e57						_CIBackspace:
.8e57		e0 00		cpx #$00			cpx 	#0 							; nothing to delete
.8e59		f0 e0		beq $8e3b			beq 	_CIInputLine
.8e5b		20 43 80	jsr $8043			jsr 	EXTPrintCharacter 			; echo it.
.8e5e		ca		dex				dex
.8e5f		80 da		bra $8e3b			bra 	_CIInputLine
.8e61						_CIHaveValue:
.8e61		9e 26 05	stz $0526,x			stz 	lineBuffer,x 				; ASCIIZ string now in line buffer.
.8e64		a5 50		lda $50				lda 	NSStatus 					; was it a string assignment
.8e66		29 10		and #$10			and 	#NSBIsString
.8e68		f0 17		beq $8e81			beq 	_CIAssignNumber 			; assign a number
.8e6a		a2 01		ldx #$01			ldx 	#1
.8e6c		a9 26		lda #$26			lda 	#lineBuffer & $FF 			; set up to point to new string
.8e6e		95 58		sta $58,x			sta 	NSMantissa0,x
.8e70		a9 05		lda #$05			lda 	#lineBuffer >> 8
.8e72		95 60		sta $60,x			sta 	NSMantissa1,x
.8e74		74 68		stz $68,x			stz 	NSMantissa2,x
.8e76		74 70		stz $70,x			stz 	NSMantissa3,x
.8e78		a9 10		lda #$10			lda 	#NSBIsString 				; so it becomes a string value
.8e7a		95 50		sta $50,x			sta  	NSStatus,x
.8e7c		ca		dex				dex 								; X = 0
.8e7d		20 2f 8f	jsr $8f2f			jsr 	AssignVariable
.8e80		60		rts				rts
.8e81						_CIAssignNumber:
.8e81		a9 26		lda #$26			lda 	#lineBuffer & $FF 			; set up to point to new string
.8e83		85 36		sta $36				sta 	zTemp0
.8e85		a9 05		lda #$05			lda 	#lineBuffer >> 8
.8e87		85 37		sta $37				sta 	zTemp0+1
.8e89		a2 01		ldx #$01			ldx 	#1 							; put in slot 1
.8e8b		20 6b a4	jsr $a46b			jsr 	ValEvaluateZTemp0 			; use the VAL() code
.8e8e		90 07		bcc $8e97			bcc 	_CIIsOkay
.8e90		a9 3f		lda #$3f			lda 	#"?" 						; error ?
.8e92		20 af 8e	jsr $8eaf			jsr 	CPPrintVector
.8e95		80 a2		bra $8e39			bra 	CIInputValue
.8e97						_CIIsOkay:
.8e97		ca		dex				dex 								; X = 0
.8e98		20 2f 8f	jsr $8f2f			jsr 	AssignVariable
.8e9b		60		rts				rts
.8e9c						CPPrintStringXA:
.8e9c		5a		phy				phy
.8e9d		86 37		stx $37				stx 	zTemp0+1
.8e9f		85 36		sta $36				sta 	zTemp0
.8ea1		a0 00		ldy #$00			ldy 	#0
.8ea3						_PSXALoop:
.8ea3		b1 36		lda ($36),y			lda 	(zTemp0),y
.8ea5		f0 06		beq $8ead			beq 	_PSXAExit
.8ea7		20 af 8e	jsr $8eaf			jsr 	CPPrintVector
.8eaa		c8		iny				iny
.8eab		80 f6		bra $8ea3			bra 	_PSXALoop
.8ead						_PSXAExit:
.8ead		7a		ply				ply
.8eae		60		rts				rts
.8eaf						CPPrintVector:
.8eaf		2c 24 04	bit $0424			bit 	isPrintFlag 				; check if char only mode and call appropriate handler.
.8eb2		30 03		bmi $8eb7			bmi 	CPPVControl
.8eb4		4c 4d 80	jmp $804d			jmp 	EXTPrintNoControl
.8eb7						CPPVControl:
.8eb7		4c 43 80	jmp $8043			jmp 	EXTPrintCharacter
.8eba						CPInputVector:
.8eba		4c 8e 81	jmp $818e			jmp 	KNLGetSingleCharacter

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/commands/joy.asm

.8ebd						UnaryJoyX:
.8ebd		18		clc				clc
.8ebe		80 01		bra $8ec1			bra 	JoyMain
.8ec0						UnaryJoyY:
.8ec0		38		sec				sec
.8ec1						JoyMain:
.8ec1		fa		plx				plx 								; get pos
.8ec2		08		php				php 								; save carry (set for Y)
.8ec3		20 f1 a6	jsr $a6f1			jsr 	Evaluate8BitInteger 		; ignore the parameter
.8ec6		20 e3 97	jsr $97e3			jsr 	CheckRightBracket
.8ec9		20 31 83	jsr $8331			jsr 	KNLReadController 			; read the controller.
.8ecc		28		plp				plp
.8ecd		b0 02		bcs $8ed1			bcs 	_JMNoShift 					; if X then shift bits 3,2 -> 1,0
.8ecf		4a		lsr a				lsr 	a
.8ed0		4a		lsr a				lsr 	a
.8ed1						_JMNoShift:
.8ed1		4a		lsr a				lsr 	a 							; if bit 0 set then left/up e.g. -1
.8ed2		b0 07		bcs $8edb			bcs 	JMIsLeft
.8ed4		4a		lsr a				lsr 	a 							; if bit 1 set then right/down e.g. +1
.8ed5		b0 07		bcs $8ede			bcs 	JMIsRight
.8ed7		20 56 a7	jsr $a756			jsr 	NSMSetZero 					; zero result
.8eda		60		rts				rts
.8edb						JMIsLeft:
.8edb		4c 69 98	jmp $9869			jmp 	ReturnTrue
.8ede						JMIsRight:
.8ede		a9 01		lda #$01			lda 	#1
.8ee0		20 58 a7	jsr $a758			jsr 	NSMSetByte
.8ee3		60		rts				rts
.8ee4						UnaryJoyB:
.8ee4		fa		plx				plx 								; get pos
.8ee5		20 f1 a6	jsr $a6f1			jsr 	Evaluate8BitInteger 		; ignore the parameter
.8ee8		20 e3 97	jsr $97e3			jsr 	CheckRightBracket
.8eeb		20 31 83	jsr $8331			jsr 	KNLReadController 			; read the controller.
.8eee		29 10		and #$10			and 	#$10
.8ef0		d0 e9		bne $8edb			bne 	JMIsLeft
.8ef2		20 56 a7	jsr $a756			jsr 	NSMSetZero
.8ef5		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/let.asm

.8ef6						LetCommand:
.8ef6		a2 00		ldx #$00			ldx 	#0
.8ef8		b1 30		lda ($30),y			lda 	(codePtr),y
.8efa		c9 b8		cmp #$b8			cmp 	#KWD_AT
.8efc		d0 14		bne $8f12			bne 	_LCStandard
.8efe		c8		iny				iny 								; skip equal
.8eff		20 4a a1	jsr $a14a			jsr 	EvaluateTerm 				; get a number (the address of the reference)
.8f02		20 c3 9f	jsr $9fc3			jsr 	Dereference 				; dereference it to a value
.8f05		b5 50		lda $50,x			lda 	NSStatus,x 					; check integer
.8f07		49 20		eor #$20			eor 	#NSBIsReference	 			; toggle reference
.8f09		95 50		sta $50,x			sta 	NSStatus,x
.8f0b		29 20		and #$20			and 	#NSBIsReference 			; if it is now a reference, continue
.8f0d		d0 0f		bne $8f1e			bne 	_LCMain
.8f0f		4c 05 aa	jmp $aa05			jmp 	TypeError 					; was a reference before.
.8f12						_LCStandard:
.8f12		ad e8 9c	lda $9ce8			lda 	PrecedenceLevel+"*"			; precedence > this
.8f15		20 02 9d	jsr $9d02			jsr 	EvaluateExpressionAtPrecedence
.8f18		b5 50		lda $50,x			lda 	NSStatus,x 					; is it a reference to an array marked as procedure ?
.8f1a		c9 38		cmp #$38			cmp		#NSTProcedure+NSBIsReference
.8f1c		f0 0e		beq $8f2c			beq 	_LetGoProc 					; it's a procedure call.
.8f1e						_LCMain:
.8f1e		a9 3d		lda #$3d			lda 	#"=" 						; check =
.8f20		20 f3 97	jsr $97f3			jsr 	CheckNextA
.8f23		e8		inx				inx 								; RHS
.8f24		20 9b a6	jsr $a69b			jsr 	EvaluateValue
.8f27		ca		dex				dex
.8f28		20 2f 8f	jsr $8f2f			jsr 	AssignVariable
.8f2b		60		rts				rts
.8f2c						_LetGoProc:
.8f2c		4c 6e 92	jmp $926e			jmp 	CallProcedure
.8f2f						AssignVariable:
.8f2f		b5 50		lda $50,x			lda 	NSStatus,x 					; check the string/number type bits match
.8f31		48		pha				pha 								; save a copy
.8f32		55 51		eor $51,x			eor 	NSStatus+1,x
.8f34		29 10		and #$10			and 	#NSBIsString
.8f36		d0 0b		bne $8f43			bne 	_ASError
.8f38		68		pla				pla 								; get back
.8f39		29 10		and #$10			and 	#NSBIsString 				; check type
.8f3b		d0 03		bne $8f40			bne 	_ASString
.8f3d		4c 01 9f	jmp $9f01			jmp 	AssignNumber
.8f40						_ASString:
.8f40		4c 5f 9f	jmp $9f5f			jmp 	AssignString
.8f43						_ASError:
.8f43		4c 05 aa	jmp $aa05			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/list.asm

.8f46						Command_List:
.8f46		9c 22 04	stz $0422			stz 	listIndent 					; reset indent.
.8f49		a9 3f		lda #$3f			lda 	#$3F 						; silence at list.
.8f4b		20 75 80	jsr $8075			jsr 	SNDCommand
.8f4e		b1 30		lda ($30),y			lda 	(codePtr),y
.8f50		29 c0		and #$c0			and 	#$C0 				 		; if so, we are list procedure() which is a seperate block
.8f52		c9 40		cmp #$40			cmp 	#$40  						; of code.
.8f54		f0 72		beq $8fc8			beq 	_CLListProcedure
.8f56		64 5c		stz $5c				stz		NSMantissa0+4				; set the lower (slot 4) to 0 and upper (slot 7) to $FFFF
.8f58		64 64		stz $64				stz 	NSMantissa1+4 				; these are the default top and bottom.
.8f5a		a9 ff		lda #$ff			lda 	#$FF
.8f5c		85 5f		sta $5f				sta 	NSMantissa0+7
.8f5e		85 67		sta $67				sta 	NSMantissa1+7
.8f60		b1 30		lda ($30),y			lda 	(codePtr),y
.8f62		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8f64		f0 1a		beq $8f80			beq 	_CLSecond
.8f66		20 45 90	jsr $9045			jsr 	CLIsDigit 					; if not digit, list all
.8f69		b0 20		bcs $8f8b			bcs 	_CLStart
.8f6b		a2 04		ldx #$04			ldx 	#4 							; get 1st range into slot 4
.8f6d		20 d6 a6	jsr $a6d6			jsr 	Evaluate16BitInteger
.8f70		b1 30		lda ($30),y			lda 	(codePtr),y
.8f72		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8f74		f0 0a		beq $8f80			beq 	_CLSecond 					; if so go get it
.8f76		a5 5c		lda $5c				lda 	NSMantissa0+4 				; copy 4->7
.8f78		85 5f		sta $5f				sta 	NSMantissa0+7
.8f7a		a5 64		lda $64				lda 	NSMantissa1+4
.8f7c		85 67		sta $67				sta 	NSMantissa1+7
.8f7e		80 0b		bra $8f8b			bra 	_CLStart
.8f80						_CLSecond:
.8f80		c8		iny				iny 								; consume comma
.8f81		20 45 90	jsr $9045			jsr 	CLIsDigit 					; digit found
.8f84		b0 05		bcs $8f8b			bcs 	_CLStart 					; if not, continue listing
.8f86		a2 07		ldx #$07			ldx 	#7 							; load 2nd range into slot 7
.8f88		20 d6 a6	jsr $a6d6			jsr 	Evaluate16BitInteger
.8f8b						_CLStart
.8f8b		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8f8d		85 30		sta $30				sta 	codePtr
.8f8f		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8f91		85 31		sta $31				sta 	codePtr+1
.8f93						_CLLoop:
.8f93		a5 f2		lda $f2				lda 	kernel.args.events.pending 	; load pending event count into accumulator
.8f95		f0 03		beq $8f9a			beq 	_NoEvents					; if zero, skip with Z flag set.
.8f97		20 34 81	jsr $8134			jsr 	ProcessEvents
.8f9a						_NoEvents:
.8f9a		d0 27		bne $8fc3			bne 	_CLBreak
.8f9c		b2 30		lda ($30)			lda 	(codePtr)
.8f9e		f0 20		beq $8fc0			beq 	_CLExit
.8fa0		a2 04		ldx #$04			ldx 	#4 							; check range every time, line numbers aren't in order.
.8fa2		20 34 90	jsr $9034			jsr 	CLCompareLineNo
.8fa5		90 0c		bcc $8fb3			bcc 	_CLNext
.8fa7		a2 07		ldx #$07			ldx 	#7
.8fa9		20 34 90	jsr $9034			jsr 	CLCompareLineNo
.8fac		f0 02		beq $8fb0			beq 	_CLDoThisOne
.8fae		b0 03		bcs $8fb3			bcs 	_CLNext
.8fb0						_CLDoThisOne:
.8fb0		20 21 90	jsr $9021			jsr 	CLListOneLine 				; routine to list the current line.
.8fb3						_CLNext:
.8fb3		18		clc				clc
.8fb4		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8fb6		65 30		adc $30				adc 	codePtr
.8fb8		85 30		sta $30				sta 	codePtr
.8fba		90 02		bcc $8fbe			bcc 	_CREExit
.8fbc		e6 31		inc $31				inc 	codePtr+1 					; carry
.8fbe						_CREExit:
.8fbe		80 d3		bra $8f93			bra 	_CLLoop
.8fc0						_CLExit:
.8fc0		4c 70 86	jmp $8670			jmp 	WarmStart
.8fc3						_CLBreak:
.8fc3		a9 01		lda #$01		lda	#1
.8fc5		4c fc 97	jmp $97fc		jmp	ErrorHandler
.8fc8						_CLListProcedure:
.8fc8		b1 30		lda ($30),y			lda 	(codePtr),y
.8fca		85 38		sta $38				sta 	zTemp1
.8fcc		c8		iny				iny
.8fcd		b1 30		lda ($30),y			lda 	(codePtr),y
.8fcf		85 39		sta $39				sta 	zTemp1+1
.8fd1		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8fd3		85 30		sta $30				sta 	codePtr
.8fd5		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8fd7		85 31		sta $31				sta 	codePtr+1
.8fd9						_CLLPSearch:
.8fd9		b2 30		lda ($30)			lda 	(codePtr)
.8fdb		c9 00		cmp #$00			cmp 	#0 							; if zero, end
.8fdd		f0 e1		beq $8fc0			beq 	_CLExit
.8fdf		a0 03		ldy #$03			ldy 	#3 							; check if PROC something
.8fe1		b1 30		lda ($30),y			lda 	(codePtr),y
.8fe3		c9 af		cmp #$af			cmp 	#KWD_PROC
.8fe5		d0 0e		bne $8ff5			bne 	_CLLPNext
.8fe7		c8		iny				iny 								; check if PROC this.
.8fe8		b1 30		lda ($30),y			lda 	(codePtr),y
.8fea		c5 38		cmp $38				cmp 	zTemp1 						; does it match ?
.8fec		d0 07		bne $8ff5			bne 	_CLLPNext
.8fee		c8		iny				iny
.8fef		b1 30		lda ($30),y			lda 	(codePtr),y
.8ff1		c5 39		cmp $39				cmp 	zTemp1+1
.8ff3		f0 0d		beq $9002			beq 	_CLLPFound
.8ff5						_CLLPNext:
.8ff5		18		clc				clc
.8ff6		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8ff8		65 30		adc $30				adc 	codePtr
.8ffa		85 30		sta $30				sta 	codePtr
.8ffc		90 02		bcc $9000			bcc 	_CREExit
.8ffe		e6 31		inc $31				inc 	codePtr+1 					; carry
.9000						_CREExit:
.9000		80 d7		bra $8fd9			bra 	_CLLPSearch
.9002						_CLLPFound:
.9002		b2 30		lda ($30)			lda 	(codePtr)
.9004		f0 ba		beq $8fc0			beq 	_CLExit
.9006		a0 03		ldy #$03			ldy 	#3 							; get first keyword
.9008		b1 30		lda ($30),y			lda 	(codePtr),y
.900a		48		pha				pha
.900b		20 21 90	jsr $9021			jsr 	CLListOneLine 				; list line and go forward
.900e		18		clc				clc
.900f		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.9011		65 30		adc $30				adc 	codePtr
.9013		85 30		sta $30				sta 	codePtr
.9015		90 02		bcc $9019			bcc 	_CREExit
.9017		e6 31		inc $31				inc 	codePtr+1 					; carry
.9019						_CREExit:
.9019		68		pla				pla 								; reached ENDPROC ?
.901a		c9 b3		cmp #$b3			cmp 	#KWD_ENDPROC
.901c		d0 e4		bne $9002			bne 	_CLLPFound
.901e		4c 70 86	jmp $8670			jmp 	WarmStart
.9021						CLListOneLine:
.9021		20 a1 97	jsr $97a1			jsr 	ScanGetCurrentLineStep 		; get indent adjust.
.9024		20 89 80	jsr $8089			jsr 	TKListConvertLine 			; convert line into token Buffer
.9027		a2 04		ldx #$04			ldx 	#(tokenBuffer >> 8) 		; print that line
.9029		a9 29		lda #$29			lda 	#(tokenBuffer & $FF)
.902b		20 55 98	jsr $9855			jsr 	PrintStringXA
.902e		a9 0d		lda #$0d			lda 	#13 						; new line
.9030		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.9033		60		rts				rts
.9034						CLCompareLineNo:
.9034		38		sec				sec
.9035		a0 01		ldy #$01			ldy 	#1
.9037		b1 30		lda ($30),y			lda 	(codePtr),y
.9039		f5 58		sbc $58,x			sbc 	NSMantissa0,x
.903b		85 36		sta $36				sta 	zTemp0
.903d		c8		iny				iny
.903e		b1 30		lda ($30),y			lda 	(codePtr),y
.9040		f5 60		sbc $60,x			sbc 	NSMantissa1,x
.9042		05 36		ora $36				ora 	zTemp0
.9044		60		rts				rts
.9045						CLIsDigit:
.9045		b1 30		lda ($30),y			lda 	(codePtr),y
.9047		c9 30		cmp #$30			cmp 	#"0"
.9049		90 03		bcc $904e			bcc	 	_CLIDExitFalse
.904b		c9 3a		cmp #$3a			cmp 	#"9"+1
.904d		60		rts				rts
.904e						_CLIDExitFalse:
.904e		38		sec				sec
.904f		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/local.asm

.9050						Command_LOCAL:
.9050		a2 00		ldx #$00			ldx 	#0 							; at level 0
.9052		20 5e 90	jsr $905e			jsr 	LocaliseNextTerm 			; convert term to a local.
.9055		b1 30		lda ($30),y			lda 	(codePtr),y
.9057		c8		iny				iny
.9058		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.905a		f0 f4		beq $9050			beq 	Command_LOCAL 				; if so, localise another variable.
.905c		88		dey				dey 								; unpick pre-get
.905d		60		rts				rts
.905e						LocaliseNextTerm:
.905e		20 4a a1	jsr $a14a			jsr 	EvaluateTerm 				; evaluate the term
.9061		b5 50		lda $50,x			lda 	NSStatus,x
.9063		29 20		and #$20			and 	#NSBIsReference 			; check it is a reference, must be a variable.
.9065		f0 5c		beq $90c3			beq		_LNTError
.9067		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy address of variable to zTemp0
.9069		85 36		sta $36				sta 	zTemp0
.906b		b5 60		lda $60,x			lda 	NSMantissa1,x
.906d		85 37		sta $37				sta  	zTemp0+1
.906f		b5 50		lda $50,x			lda 	NSStatus,x 					; figure out what it is.
.9071		29 10		and #$10			and 	#NSBIsString
.9073		d0 1e		bne $9093			bne 	_LNTPushString
.9075		5a		phy				phy
.9076		a0 00		ldy #$00			ldy 	#0 							; push 0 to 4 inclusive, the number values, on the stack, and zero them as you go.
.9078						_LNTPushNumLoop:
.9078		b1 36		lda ($36),y			lda		(zTemp0),y
.907a		20 54 b0	jsr $b054			jsr 	StackPushByte
.907d		c8		iny				iny
.907e		c0 05		cpy #$05			cpy 	#5
.9080		d0 f6		bne $9078			bne 	_LNTPushNumLoop
.9082		a5 36		lda $36				lda 	zTemp0 						; push the actual target address to write on the stack
.9084		20 54 b0	jsr $b054			jsr 	StackPushByte
.9087		a5 37		lda $37				lda 	zTemp0+1
.9089		20 54 b0	jsr $b054			jsr 	StackPushByte
.908c		a9 01		lda #$01			lda 	#STK_LOCALN 				; push local-number marker.
.908e		20 54 b0	jsr $b054			jsr 	StackPushByte
.9091		7a		ply				ply
.9092		60		rts				rts
.9093						_LNTPushString:
.9093		5a		phy				phy
.9094		b2 36		lda ($36)			lda 	(zTemp0) 					; put address of string in zTemp1
.9096		85 38		sta $38				sta 	zTemp1
.9098		a0 01		ldy #$01			ldy 	#1
.909a		b1 36		lda ($36),y			lda 	(zTemp0),y
.909c		85 39		sta $39				sta 	zTemp1+1
.909e		a0 00		ldy #$00			ldy 	#0 							; output string
.90a0		c9 00		cmp #$00			cmp 	#0 							; if not assigned string
.90a2		f0 0a		beq $90ae			beq 	_LNTStringOut
.90a4						_LNTPushStrLoop:
.90a4		b1 38		lda ($38),y			lda 	(zTemp1),y
.90a6		f0 06		beq $90ae			beq 	_LNTStringOut
.90a8		20 54 b0	jsr $b054			jsr 	StackPushByte
.90ab		c8		iny				iny
.90ac		80 f6		bra $90a4			bra 	_LNTPushStrLoop
.90ae						_LNTStringOut:
.90ae		98		tya				tya									; output length (chars written).
.90af		20 54 b0	jsr $b054			jsr 	StackPushByte
.90b2		b5 58		lda $58,x			lda 	NSMantissa0,x 				; output address of the string record *not* the string itself
.90b4		20 54 b0	jsr $b054			jsr 	StackPushByte
.90b7		b5 60		lda $60,x			lda 	NSMantissa1,x
.90b9		20 54 b0	jsr $b054			jsr 	StackPushByte
.90bc		a9 02		lda #$02			lda 	#STK_LOCALS 				; push local-string marker.
.90be		20 54 b0	jsr $b054			jsr 	StackPushByte
.90c1		7a		ply				ply
.90c2		60		rts				rts
.90c3						_LNTError:
.90c3		4c fb a9	jmp $a9fb			jmp 	SyntaxError
.90c6						LocalPopValue:
.90c6		20 6c b0	jsr $b06c			jsr 	StackPopByte
.90c9		c9 01		cmp #$01			cmp 	#STK_LOCALN 				; if not local-N
.90cb		d0 17		bne $90e4			bne 	_LPVString
.90cd		20 6c b0	jsr $b06c			jsr 	StackPopByte 				; address
.90d0		85 37		sta $37				sta 	zTemp0+1
.90d2		20 6c b0	jsr $b06c			jsr 	StackPopByte
.90d5		85 36		sta $36				sta 	zTemp0
.90d7		5a		phy				phy
.90d8		a0 04		ldy #$04			ldy 	#4 							; copy back
.90da						_LPVNumberCopy:
.90da		20 6c b0	jsr $b06c			jsr 	StackPopByte
.90dd		91 36		sta ($36),y			sta 	(zTemp0),y
.90df		88		dey				dey
.90e0		10 f8		bpl $90da			bpl 	_LPVNumberCopy
.90e2		7a		ply				ply 								; and complete
.90e3		60		rts				rts
.90e4						_LPVString:
.90e4		20 6c b0	jsr $b06c			jsr 	StackPopByte 				; address of record copied to zTemp0
.90e7		85 37		sta $37				sta 	zTemp0+1
.90e9		20 6c b0	jsr $b06c			jsr 	StackPopByte
.90ec		85 36		sta $36				sta 	zTemp0
.90ee		5a		phy				phy
.90ef		b2 36		lda ($36)			lda 	(zTemp0) 					; address to write string to copied to zTemp1
.90f1		85 38		sta $38				sta 	zTemp1
.90f3		a0 01		ldy #$01			ldy 	#1
.90f5		b1 36		lda ($36),y			lda 	(zTemp0),y
.90f7		85 39		sta $39				sta 	zTemp1+1
.90f9		20 6c b0	jsr $b06c			jsr 	StackPopByte 				; # chars to get => y
.90fc		a8		tay				tay
.90fd		a5 39		lda $39				lda 	zTemp1+1 					; if no target (e.g. was "" originally) exit
.90ff		f0 0e		beq $910f			beq 	_LPVStringCopied
.9101		a9 00		lda #$00			lda 	#0 							; NULL on end
.9103		91 38		sta ($38),y			sta 	(zTemp1),y
.9105						_LPVStringCopy:
.9105		88		dey				dey
.9106		30 07		bmi $910f			bmi 	_LPVStringCopied
.9108		20 6c b0	jsr $b06c			jsr 	StackPopByte
.910b		91 38		sta ($38),y			sta 	(zTemp1),y
.910d		80 f6		bra $9105			bra 	_LPVStringCopy
.910f						_LPVStringCopied:
.910f		fa		plx				plx
.9110		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/commands/memcopy.asm

.9111						MCCommand:
.9111		a5 01		lda $01				lda 	1 							; save current I/O ; switch to I/O 0
.9113		48		pha				pha
.9114		64 01		stz $01				stz 	1
.9116		9c 00 df	stz $df00			stz 	$DF00 						; zero control byte.
.9119		a9 81		lda #$81			lda 	#$81 						; standard start byte (DMA Enabled, Start set)
.911b		8d 94 07	sta $0794			sta 	DMAControlByte
.911e		20 cc 91	jsr $91cc			jsr 	MCPosition 					; start position
.9121		a2 04		ldx #$04			ldx 	#4 							; write to source AND $DF04 destination address $DF08
.9123		20 9d 91	jsr $919d			jsr 	MCCopyAddress
.9126		a2 08		ldx #$08			ldx 	#8
.9128		20 9d 91	jsr $919d			jsr 	MCCopyAddress
.912b		b1 30		lda ($30),y			lda 	(codePtr),y
.912d		c8		iny				iny
.912e		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; , <size>
.9130		f0 09		beq $913b			beq 	_MCSize1D
.9132		c9 d5		cmp #$d5			cmp 	#KWD_RECT 					; RECT <x>,<y>
.9134		f0 11		beq $9147			beq 	_MCRect2D
.9136						_MCSyntax:
.9136		a9 02		lda #$02		lda	#2
.9138		4c fc 97	jmp $97fc		jmp	ErrorHandler
.913b						_MCSize1D:
.913b		a2 00		ldx #$00			ldx 	#0 							; get size
.913d		20 c3 a6	jsr $a6c3			jsr 	EvaluateInteger
.9140		a2 0c		ldx #$0c			ldx 	#$C 						; copy to size $DF0C-E
.9142		20 9d 91	jsr $919d			jsr 	MCCopyAddress
.9145		80 24		bra $916b			bra 	_MCDestination
.9147						_MCRect2D:
.9147		a2 0c		ldx #$0c			ldx 	#$C 						; width to $DF0C,D
.9149		20 ba 91	jsr $91ba			jsr 	MCEvalCopyData16
.914c		20 eb 97	jsr $97eb			jsr 	CheckComma
.914f		a2 0e		ldx #$0e			ldx 	#$E 						; height to $DF0E,F
.9151		20 ba 91	jsr $91ba			jsr 	MCEvalCopyData16
.9154		a9 b9		lda #$b9			lda 	#KWD_BY 					; BY keyword.
.9156		20 f3 97	jsr $97f3			jsr 	CheckNextA
.9159		a2 10		ldx #$10			ldx 	#$10 						; store source and destination stride
.915b		20 ba 91	jsr $91ba			jsr 	MCEvalCopyData16
.915e		a2 12		ldx #$12			ldx 	#$12
.9160		20 c1 91	jsr $91c1			jsr 	MCCopyData16
.9163		ad 94 07	lda $0794			lda 	DMAControlByte 				; set bit 4 of DMA control indicating 2D.
.9166		09 02		ora #$02			ora 	#$02
.9168		8d 94 07	sta $0794			sta 	DMAControlByte
.916b						_MCDestination:
.916b		b1 30		lda ($30),y			lda 	(codePtr),y
.916d		c8		iny				iny
.916e		c9 d0		cmp #$d0			cmp 	#KWD_POKE 					; is it POKE n
.9170		f0 0e		beq $9180			beq 	_MCDestPoke
.9172		c9 db		cmp #$db			cmp 	#KWD_TO 					; is it TO n
.9174		d0 c0		bne $9136			bne 	_MCSyntax
.9176		20 cc 91	jsr $91cc			jsr 	MCPosition 					; get target address
.9179		a2 08		ldx #$08			ldx 	#8							; copy to target address at $DF08-A
.917b		20 9d 91	jsr $919d			jsr 	MCCopyAddress
.917e		80 0e		bra $918e			bra 	_MCDoDMA 					; and we can go.
.9180						_MCDestPoke:
.9180		20 f1 a6	jsr $a6f1			jsr 	Evaluate8BitInteger 		; POKE what
.9183		8d 01 df	sta $df01			sta 	$DF01 						; set the FILL register
.9186		ad 94 07	lda $0794			lda 	DMAControlByte 				; set bit 2 of control byte indicating FILL.
.9189		09 04		ora #$04			ora 	#$04
.918b		8d 94 07	sta $0794			sta 	DMAControlByte
.918e						_MCDoDMA:
.918e		ad 94 07	lda $0794			lda 	DMAControlByte 				; set the DMA Control byte to go !
.9191		8d 00 df	sta $df00			sta 	$DF00
.9194						_MCWaitBUSD:
.9194		ad 01 df	lda $df01			lda 	$DF01
.9197		30 fb		bmi $9194			bmi 	_MCWaitBUSD
.9199		68		pla				pla 								; restore I/O.
.919a		85 01		sta $01				sta 	1
.919c		60		rts				rts
.919d						MCCopyAddress:
.919d		a5 68		lda $68				lda 	NSMantissa2 				; check valid vlaue
.919f		29 fc		and #$fc			and 	#$FC
.91a1		05 70		ora $70				ora 	NSMantissa3
.91a3		d0 10		bne $91b5			bne 	_MCRange
.91a5		a5 58		lda $58				lda 	NSMantissa0
.91a7		9d 00 df	sta $df00,x			sta 	$DF00,x
.91aa		a5 60		lda $60				lda 	NSMantissa1
.91ac		9d 01 df	sta $df01,x			sta 	$DF01,x
.91af		a5 68		lda $68				lda 	NSMantissa2
.91b1		9d 02 df	sta $df02,x			sta 	$DF02,x
.91b4		60		rts				rts
.91b5						_MCRange:
.91b5		a9 04		lda #$04		lda	#4
.91b7		4c fc 97	jmp $97fc		jmp	ErrorHandler
.91ba						MCEvalCopyData16:
.91ba		da		phx				phx
.91bb		a2 00		ldx #$00			ldx 	#0
.91bd		20 d6 a6	jsr $a6d6			jsr 	Evaluate16BitInteger
.91c0		fa		plx				plx
.91c1						MCCopyData16:
.91c1		a5 58		lda $58				lda 	NSMantissa0
.91c3		9d 00 df	sta $df00,x			sta 	$DF00,x
.91c6		a5 60		lda $60				lda 	NSMantissa1
.91c8		9d 01 df	sta $df01,x			sta 	$DF01,x
.91cb		60		rts				rts
.91cc						MCPosition:
.91cc		a2 00		ldx #$00			ldx 	#0 							; get start address.
.91ce		b1 30		lda ($30),y			lda 	(codePtr),y
.91d0		c9 b8		cmp #$b8			cmp 	#KWD_AT
.91d2		f0 04		beq $91d8			beq 	_MCPAt
.91d4		20 c3 a6	jsr $a6c3			jsr 	EvaluateInteger
.91d7		60		rts				rts
.91d8						_MCPAt:
.91d8		c8		iny				iny
.91d9		20 f1 a6	jsr $a6f1			jsr 	Evaluate8BitInteger 		; X position
.91dc		48		pha				pha
.91dd		20 eb 97	jsr $97eb			jsr 	CheckComma
.91e0		e8		inx				inx
.91e1		20 f1 a6	jsr $a6f1			jsr 	Evaluate8BitInteger 		; Y position
.91e4		ca		dex				dex
.91e5		85 60		sta $60				sta 	NSMantissa1 				; put Y x 64 in Mantissa.0
.91e7		64 58		stz $58				stz 	NSMantissa0
.91e9		64 68		stz $68				stz 	NSMantissa2
.91eb		64 70		stz $70				stz 	NSMantissa3
.91ed		46 60		lsr $60				lsr 	NSMantissa1
.91ef		66 58		ror $58				ror 	NSMantissa0
.91f1		46 60		lsr $60				lsr 	NSMantissa1
.91f3		66 58		ror $58				ror 	NSMantissa0
.91f5		68		pla				pla
.91f6		18		clc				clc
.91f7		65 58		adc $58				adc 	NSMantissa0 				; add X, Y * 256 and the
.91f9		85 58		sta $58				sta 	NSMantissa0
.91fb		a5 60		lda $60				lda 	NSMantissa1
.91fd		65 59		adc $59				adc 	NSMantissa0+1
.91ff		85 60		sta $60				sta 	NSMantissa1
.9201		90 02		bcc $9205			bcc 	_MCPNoCarry
.9203		e6 68		inc $68				inc 	NSMantissa2
.9205						_MCPNoCarry:
.9205		ad bd 07	lda $07bd			lda 	gxBasePage
.9208		85 69		sta $69				sta 	NSMantissa2+1
.920a		64 59		stz $59				stz 	NSMantissa0+1
.920c		64 61		stz $61				stz 	NSMantissa1+1
.920e		64 71		stz $71				stz 	NSMantissa3+1
.9210		a2 01		ldx #$01			ldx 	#1
.9212		20 6f a7	jsr $a76f			jsr 	NSMShiftRight
.9215		20 6f a7	jsr $a76f			jsr 	NSMShiftRight
.9218		20 6f a7	jsr $a76f			jsr 	NSMShiftRight
.921b		a2 00		ldx #$00			ldx 	#0
.921d		20 f6 9a	jsr $9af6			jsr 	AddTopTwoStack
.9220		60		rts				rts
.0794						DMAControlByte:
>0794								.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/new.asm

.9221						NewCommand:
.9221		20 27 92	jsr $9227			jsr 	NewProgram 					; does the actual NEW.
.9224		4c 70 86	jmp $8670			jmp 	WarmStart 					; and warm starts straight away.
.9227						NewProgram:
.9227		20 75 ac	jsr $ac75			jsr 	MemoryNew
.922a		9c 00 10	stz $1000			stz 	VariableSpace 				; erase all variables.
.922d		20 09 87	jsr $8709			jsr 	ClearCommand 				; clear everything.
.9230		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/poke.asm

.9231						PokeBCommand:
.9231		a9 01		lda #$01			lda 	#1
.9233		80 0c		bra $9241			bra 	PokeCommand
.9235						PokeWCommand:
.9235		a9 02		lda #$02			lda 	#2
.9237		80 08		bra $9241			bra 	PokeCommand
.9239						PokeLCommand:
.9239		a9 03		lda #$03			lda 	#3
.923b		80 04		bra $9241			bra 	PokeCommand
.923d						PokeDCommand:
.923d		a9 04		lda #$04			lda 	#4
.923f		80 00		bra $9241			bra 	PokeCommand
.9241						PokeCommand:
.9241		48		pha				pha 								; save count on stack
.9242		a2 00		ldx #$00			ldx 	#0 							; bottom of stack
.9244		20 d6 a6	jsr $a6d6			jsr		Evaluate16BitInteger 		; address
.9247		20 eb 97	jsr $97eb			jsr 	CheckComma
.924a		e8		inx				inx
.924b		20 c3 a6	jsr $a6c3			jsr		EvaluateInteger 			; data
.924e		a5 58		lda $58				lda 	NSMantissa0 				; copy address
.9250		85 36		sta $36				sta 	zTemp0
.9252		a5 60		lda $60				lda 	NSMantissa1
.9254		85 37		sta $37				sta 	zTemp0+1
.9256		68		pla				pla 								; count -> zTemp1
.9257		85 38		sta $38				sta 	zTemp1
.9259		5a		phy				phy 								; save Y position.
.925a		a0 00		ldy #$00			ldy 	#0 							; index to write
.925c		a2 00		ldx #$00			ldx 	#0 							; index to read
.925e						_PCLoop:
.925e		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; read byte from mantissa and copy out
.9260		91 36		sta ($36),y			sta 	(zTemp0),y
.9262		c8		iny				iny 								; next byte to write
.9263		8a		txa				txa 								; next byte to read - stack layout in 04data.inc
.9264		18		clc				clc
.9265		69 08		adc #$08			adc 	#MathStackSize
.9267		aa		tax				tax
.9268		c6 38		dec $38				dec 	zTemp1 						; done them all
.926a		d0 f2		bne $925e			bne 	_PCLoop
.926c		7a		ply				ply 								; restore position.
.926d		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/procedure.asm

=2						ParameterStackPos = 2
.926e						CallProcedure:
.926e		a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start storing parameters at 2.
.9270		b1 30		lda ($30),y			lda 	(codePtr),y
.9272		c9 29		cmp #$29			cmp 	#KWD_RPAREN
.9274		f0 0c		beq $9282			beq 	_CPEndParam
.9276						_CPParamLoop:
.9276		20 9b a6	jsr $a69b			jsr 	EvaluateValue 				; get parameter onto stack
.9279		e8		inx				inx 								; bump next stack
.927a		b1 30		lda ($30),y			lda 	(codePtr),y
.927c		c8		iny				iny
.927d		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if comma, go back and try again.
.927f		f0 f5		beq $9276			beq 	_CPParamLoop
.9281		88		dey				dey 								; unpick.
.9282						_CPEndParam:
.9282		8e 12 04	stx $0412			stx 	lastParameter 				; save the last parameters index.
.9285		c8		iny				iny									; skip right bracket
.9286		a9 b3		lda #$b3			lda 	#STK_PROC+3 				; allocate 6 bytes on the return stack.
.9288		20 75 b0	jsr $b075			jsr 	StackOpen
.928b		20 ba b0	jsr $b0ba			jsr 	STKSaveCodePosition 		; save loop position
.928e		a5 58		lda $58				lda 	NSMantissa0 				; copy variable (e.g. procedure) address to zTemp0
.9290		85 36		sta $36				sta 	zTemp0 						; this is the DATA not the RECORD
.9292		a5 60		lda $60				lda 	NSMantissa1
.9294		85 37		sta $37				sta 	zTemp0+1
.9296		a0 01		ldy #$01			ldy 	#1 							; copy code address back.
.9298		b2 36		lda ($36)			lda 	(zTemp0)
.929a		85 30		sta $30				sta 	safePtr
.929c		b1 36		lda ($36),y			lda 	(zTemp0),y
.929e		85 31		sta $31				sta 	safePtr+1
.92a0		c8		iny				iny
.92a1		b1 36		lda ($36),y			lda 	(zTemp0),y
.92a3		85 32		sta $32				sta 	safePtr+2
.92a5		c8		iny				iny
.92a6		b1 36		lda ($36),y			lda 	(zTemp0),y
.92a8		85 33		sta $33				sta 	safePtr+3
.92aa		c8		iny				iny 								; get Y offset -> Y
.92ab		b1 36		lda ($36),y			lda 	(zTemp0),y
.92ad		a8		tay				tay
.92ae		a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start position of parameters
.92b0		ec 12 04	cpx $0412			cpx	 	lastParameter 				; check zero parameters at the start
.92b3		f0 13		beq $92c8			beq 	_ParamExit 					; if so, exit.
.92b5						_ParamExtract:
.92b5		ca		dex				dex 								; put a local term on the level before
.92b6		20 5e 90	jsr $905e			jsr 	LocaliseNextTerm			; also pushes original param value to basic stack
.92b9		20 2f 8f	jsr $8f2f			jsr 	AssignVariable 				; assign stacked value to the variable.
.92bc		e8		inx				inx 								; advance to next parameter to do.
.92bd		e8		inx				inx
.92be		ec 12 04	cpx $0412			cpx 	lastParameter 				; are we done ?
.92c1		f0 05		beq $92c8			beq 	_ParamExit
.92c3		20 eb 97	jsr $97eb			jsr 	CheckComma 					; comma seperating parameters
.92c6		80 ed		bra $92b5			bra 	_ParamExtract
.92c8						_ParamExit:
.92c8		20 e3 97	jsr $97e3			jsr 	CheckRightBracket 			; check )
.92cb		60		rts				rts 								; and continue from here
.92cc						Command_ENDPROC:
.92cc		a9 b0		lda #$b0			lda 	#STK_PROC 					; check TOS is this
.92ce		a2 14		ldx #$14			ldx 	#ERRID_PROC
.92d0		20 a2 b0	jsr $b0a2			jsr 	StackCheckFrame
.92d3		20 cb b0	jsr $b0cb			jsr 	STKLoadCodePosition 		; restore code position
.92d6		20 94 b0	jsr $b094			jsr 	StackClose
.92d9		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/read.asm

.92da						Command_Read:
.92da		a2 00		ldx #$00			ldx 	#0 							; evaluate the term which is the var/array element to assign
.92dc		20 4a a1	jsr $a14a			jsr 	EvaluateTerm
.92df		b5 50		lda $50,x			lda 	NSStatus,x
.92e1		29 20		and #$20			and 	#NSBIsReference				; get status byte on stack, identifies int, float, string.
.92e3		f0 4f		beq $9334			beq 	_CRSyntax 					; check reference (bit 0) fail if not a reference.
.92e5		20 7d 93	jsr $937d			jsr 	SwapDataCodePtrs 			; swap code and data
.92e8		ad 18 04	lda $0418			lda 	inDataStatement 			; if in a data statement, we don't need to search
.92eb		d0 25		bne $9312			bne 	_CRContinueData  			; forward for the next one.
.92ed		b2 30		lda ($30)			lda 	(codePtr)
.92ef		f0 1c		beq $930d			beq 	_CRNoData
.92f1						_CRKeepSearching:
.92f1		a9 bf		lda #$bf			lda 	#KWD_DATA 					; scan for instruction
.92f3		a2 80		ldx #$80			ldx 	#KWC_EOL
.92f5		20 3e 97	jsr $973e			jsr 	ScanForward
.92f8		c9 bf		cmp #$bf			cmp 	#KWD_DATA 					; found data ?
.92fa		f0 16		beq $9312			beq 	_CRHaveData 				; found it
.92fc		18		clc				clc
.92fd		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.92ff		65 30		adc $30				adc 	codePtr
.9301		85 30		sta $30				sta 	codePtr
.9303		90 02		bcc $9307			bcc 	_CREExit
.9305		e6 31		inc $31				inc 	codePtr+1 					; carry
.9307						_CREExit:
.9307		a0 03		ldy #$03			ldy 	#3 							; start of line.
.9309		b2 30		lda ($30)			lda 	(codePtr)
.930b		d0 e4		bne $92f1			bne 	_CRKeepSearching
.930d						_CRNoData:
.930d		a9 0b		lda #$0b		lda	#11
.930f		4c fc 97	jmp $97fc		jmp	ErrorHandler
.9312						_CRHaveData:
.9312						_CRContinueData:
.9312		a2 01		ldx #$01			ldx 	#1
.9314		20 9b a6	jsr $a69b			jsr 	EvaluateValue 				; evaluate value into slot # 1
.9317		ca		dex				dex
.9318		20 2f 8f	jsr $8f2f			jsr		AssignVariable 				; do the assignment
.931b		9c 18 04	stz $0418			stz 	inDataStatement 			; clear in data flag
.931e		b1 30		lda ($30),y			lda 	(codePtr),y
.9320		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not, end of data statement and exit
.9322		d0 04		bne $9328			bne 	_CRSwapBack
.9324		c8		iny				iny 								; consume comma
.9325		ee 18 04	inc $0418			inc 	inDataStatement 			; set in data statement currently.
.9328						_CRSwapBack:
.9328		20 7d 93	jsr $937d			jsr 	SwapDataCodePtrs			; swap them back.
.932b		b1 30		lda ($30),y			lda 	(codePtr),y
.932d		c8		iny				iny
.932e		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.9330		f0 a8		beq $92da			beq 	Command_Read 				; if so go round again.
.9332		88		dey				dey 								; unpick get.
.9333		60		rts				rts
.9334						_CRSyntax:
.9334		4c fb a9	jmp $a9fb			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/rem.asm

.9337						RemCommand:
.9337		b1 30		lda ($30),y			lda 	(codePtr),y
.9339		c9 ff		cmp #$ff			cmp 	#KWC_STRING
.933b		d0 06		bne $9343			bne 	_RMExit
.933d		c8		iny				iny 								; point to offset
.933e		98		tya				tya 								; A = offset position
.933f		38		sec				sec 								; add size +1 hence SEC
.9340		71 30		adc ($30),y			adc 	(codePtr),y
.9342		a8		tay				tay 								; make current position.
.9343						_RMExit:
.9343		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/repeat.asm

.9344						Command_REPEAT:
.9344		a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; allocate 6 bytes on the return stack.
.9346		20 75 b0	jsr $b075			jsr 	StackOpen
.9349		20 ba b0	jsr $b0ba			jsr 	STKSaveCodePosition 		; save loop position
.934c		60		rts				rts
.934d						Command_UNTIL:
.934d		a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; check REPEAT is TOS
.934f		a2 0f		ldx #$0f			ldx 	#ERRID_REPEAT 				; this error
.9351		20 a2 b0	jsr $b0a2			jsr 	StackCheckFrame
.9354		a2 00		ldx #$00			ldx 	#0
.9356		20 a4 a6	jsr $a6a4			jsr 	EvaluateNumber 				; work out the number
.9359		20 78 a7	jsr $a778			jsr 	NSMIsZero 					; check if zero
.935c		f0 04		beq $9362			beq 	_CULoopBack 				; if so keep looping
.935e		20 94 b0	jsr $b094			jsr 	StackClose		 			; return
.9361		60		rts				rts
.9362						_CULoopBack:
.9362		20 cb b0	jsr $b0cb			jsr 	STKLoadCodePosition 		; loop back
.9365		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/restore.asm

.9366						Command_Restore:
.9366		20 7d 93	jsr $937d			jsr 	SwapDataCodePtrs 			; swap code and data
.9369		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.936b		85 30		sta $30				sta 	codePtr
.936d		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.936f		85 31		sta $31				sta 	codePtr+1
.9371		20 7d 93	jsr $937d			jsr 	SwapDataCodePtrs 			; put them back
.9374		a9 03		lda #$03			lda 	#3 							; start at offset 3, e.g. first instruction of first line.
.9376		8d 17 04	sta $0417			sta 	dataPointer+4   			; (read checks not EOF)
.9379		9c 18 04	stz $0418			stz 	inDataStatement 			; not in data statement
.937c		60		rts				rts
.937d						SwapDataCodePtrs:
.937d		da		phx				phx
.937e		a2 03		ldx #$03			ldx 	#3 							; swap 32 bit code pointer over
.9380						_SDCPLoop:
.9380		b5 30		lda $30,x			lda 	safePtr,x
.9382		48		pha				pha
.9383		bd 13 04	lda $0413,x			lda 	dataPointer,x
.9386		95 30		sta $30,x			sta 	safePtr,x
.9388		68		pla				pla
.9389		9d 13 04	sta $0413,x			sta 	dataPointer,x
.938c		ca		dex				dex
.938d		10 f1		bpl $9380			bpl 	_SDCPLoop
.938f		ad 17 04	lda $0417			lda 	dataPointer+4 				; swap Y position over.
.9392		8c 17 04	sty $0417			sty 	dataPointer+4
.9395		a8		tay				tay
.9396		fa		plx				plx
.9397		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/run.asm

.9398						EOLCommand:
.9398		18		clc				clc
.9399		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.939b		65 30		adc $30				adc 	codePtr
.939d		85 30		sta $30				sta 	codePtr
.939f		90 02		bcc $93a3			bcc 	_CREExit
.93a1		e6 31		inc $31				inc 	codePtr+1 					; carry
.93a3						_CREExit:
.93a3		80 18		bra $93bd			bra 	RunNewLine
.93a5						CommandRUNOptLoad:
.93a5		b1 30		lda ($30),y			lda 	(codePtr),y
.93a7		c9 80		cmp #$80			cmp 	#KWC_EOL 					; EOL / : just RUN
.93a9		f0 07		beq $93b2			beq 	RunCurrentProgram
.93ab		c9 3a		cmp #$3a			cmp 	#KWD_COLON
.93ad		f0 03		beq $93b2			beq 	RunCurrentProgram
.93af		20 ac 8a	jsr $8aac			jsr 	LoadFile 					; load expected name file.
.93b2						RunCurrentProgram:
.93b2		20 09 87	jsr $8709			jsr 	ClearCommand 				; clear variable/stacks/etc.
.93b5		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.93b7		85 30		sta $30				sta 	codePtr
.93b9		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.93bb		85 31		sta $31				sta 	codePtr+1
.93bd						RunNewLine:
.93bd		b2 30		lda ($30)			lda 	(codePtr)
.93bf		f0 74		beq $9435			beq 	CRNoProgram         		; no then END.
.93c1		a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack
.93c3		9a		txs				txs
.93c4						RUNCodePointerLine:
.93c4		a0 02		ldy #$02			ldy 	#2 							; start of program
.93c6						_CRIncMainLoop:
.93c6		a5 f2		lda $f2				lda 	kernel.args.events.pending 	; load pending event count into accumulator
.93c8		f0 03		beq $93cd			beq 	_NoEvents					; if zero, skip with Z flag set.
.93ca		20 34 81	jsr $8134			jsr 	ProcessEvents
.93cd						_NoEvents:
.93cd		d0 61		bne $9430			bne 	_CRBreak
.93cf		a5 01		lda $01				lda 	1 							; save I/O 0
.93d1		48		pha				pha
.93d2		64 01		stz $01				stz 	1 							; access I/O Page 0
.93d4		38		sec				sec 								; calculate timer - LastTick
.93d5		ad 59 d6	lda $d659			lda 	$D659
.93d8		cd 5e 06	cmp $065e			cmp 	LastTick
.93db		f0 06		beq $93e3			beq 	_NoFireTick 				; if < 3 clocks don't fire.
.93dd		8d 5e 06	sta $065e			sta 	LastTick 					; update last timer
.93e0		20 96 81	jsr $8196			jsr 	TickHandler 							; go do the code.
.93e3						_NoFireTick:
.93e3		68		pla				pla 								; restore I/O 0
.93e4		85 01		sta $01				sta 	1
.93e6						_CRNoBreakCheck:
.93e6		c8		iny				iny									; next token
.93e7						_CRMainLoop:
.93e7		9c 0c 04	stz $040c			stz 	stringInitialised 			; clear the temporary string initialised flag.
.93ea		b1 30		lda ($30),y			lda 	(codePtr),y
.93ec		10 10		bpl $93fe			bpl 	_CRNotKeyword				; not a token.
.93ee		c9 ad		cmp #$ad			cmp 	#KWC_LAST_UNARY+1 			; if after unary, legitimate command
.93f0		b0 04		bcs $93f6			bcs 	_CRIsKeyword
.93f2		c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if unary, syntax error.
.93f4		b0 34		bcs $942a			bcs		_CRSyntaxError
.93f6						_CRIsKeyword:
.93f6		c8		iny				iny 								; consume command
.93f7		0a		asl a				asl 	a 							; double losing the MSB which is '1' as tokens are $80-$FF
.93f8		aa		tax				tax 								; put in X for vector jump
.93f9		20 2d 94	jsr $942d			jsr 	_CRCallVector0 				; call the vector - effectively jsr (vectortable,X)
.93fc		80 e9		bra $93e7			bra 	_CRMainLoop 				; and loop round
.93fe						_CRNotKeyword:
.93fe		c9 3a		cmp #$3a			cmp 	#KWD_COLON 					; if a :, consume it and go round.
.9400		f0 c4		beq $93c6			beq 	_CRIncMainLoop
.9402		c9 40		cmp #$40			cmp 	#$40 						; variable/call reference
.9404		90 05		bcc $940b			bcc 	_CRNotVariable
.9406						_CRGoLet:
.9406		20 f6 8e	jsr $8ef6			jsr 	LetCommand
.9409		80 dc		bra $93e7			bra 	_CRMainLoop
.940b						_CRNotVariable:
.940b		c9 b8		cmp #$b8			cmp 	#KWD_AT 					; handle @
.940d		f0 f7		beq $9406			beq 	_CRGoLet
.940f		c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; handle ? !
.9411		f0 f3		beq $9406			beq 	_CRGoLet
.9413		c9 21		cmp #$21			cmp 	#KWD_PLING
.9415		f0 ef		beq $9406			beq 	_CRGoLet
.9417		c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; handle ' (comment)
.9419		f0 09		beq $9424			beq 	_CRGoRem
.941b		c9 2e		cmp #$2e			cmp 	#KWD_PERIOD 				; handle . (assembler label)
.941d		d0 0b		bne $942a			bne 	_CRSyntaxError
.941f		20 e2 84	jsr $84e2			jsr 	LabelHere
.9422		80 c3		bra $93e7			bra 	_CRMainLoop
.9424						_CRGoRem:
.9424		c8		iny				iny
.9425		20 37 93	jsr $9337			jsr 	RemCommand
.9428		80 bd		bra $93e7			bra 	_CRMainLoop
.942a						_CRSyntaxError:
.942a		4c fb a9	jmp $a9fb			jmp 	SyntaxError
.942d						_CRCallVector0:
.942d		7c cc 94	jmp ($94cc,x)			jmp 	(VectorSet0,x)
.9430						_CRBreak:
.9430		a9 01		lda #$01		lda	#1
.9432		4c fc 97	jmp $97fc		jmp	ErrorHandler
.9435						CRNoProgram:
.9435		4c 4d 88	jmp $884d			jmp 	EndCommand
.9438						Shift1Command:
.9438		b1 30		lda ($30),y			lda 	(codePtr),y
.943a		c8		iny				iny
.943b		0a		asl a				asl 	a
.943c		aa		tax				tax
.943d		7c 84 95	jmp ($9584,x)			jmp 	(VectorSet1,x)
.9440						Shift2Command:
.9440		b1 30		lda ($30),y			lda 	(codePtr),y
.9442		c8		iny				iny
.9443		0a		asl a				asl 	a
.9444		aa		tax				tax
.9445		7c d2 95	jmp ($95d2,x)			jmp 	(VectorSet2,x)
.9448						Unused1:
.9448						Unused2:
.9448						Unused3:
.9448						Unused4:
.9448		4c fb a9	jmp $a9fb			jmp 	SyntaxError
>944b								.align 2

;******  Processing file: ./common/commands/../generated/vectors.dat

.944c						VectorSetPunc:
>944c		b4 9a					.word	ShiftLeft                        ; $00 <<
>944e		9f 98					.word	BinaryCompareLessEqual           ; $01 <=
>9450		95 98					.word	BinaryCompareNotEqual            ; $02 <>
>9452		fb a9					.word	SyntaxError                      ; $03 !!3
>9454		fb a9					.word	SyntaxError                      ; $04 ><
>9456		a9 98					.word	BinaryCompareGreaterEqual        ; $05 >=
>9458		b7 9a					.word	ShiftRight                       ; $06 >>
>945a		fb a9					.word	SyntaxError                      ; $07 !!7
>945c		fb a9					.word	SyntaxError                      ; $08 !!8
>945e		fb a9					.word	SyntaxError                      ; $09 !!9
>9460		fb a9					.word	SyntaxError                      ; $0a !!10
>9462		fb a9					.word	SyntaxError                      ; $0b !!11
>9464		fb a9					.word	SyntaxError                      ; $0c !!12
>9466		fb a9					.word	SyntaxError                      ; $0d !!13
>9468		fb a9					.word	SyntaxError                      ; $0e !!14
>946a		fb a9					.word	SyntaxError                      ; $0f !!15
>946c		fb a9					.word	SyntaxError                      ; $10 @
>946e		fb a9					.word	SyntaxError                      ; $11 !!17
>9470		fb a9					.word	SyntaxError                      ; $12 !!18
>9472		fb a9					.word	SyntaxError                      ; $13 [
>9474		60 99					.word	IntegerDivide                    ; $14 \
>9476		fb a9					.word	SyntaxError                      ; $15 ]
>9478		f2 9b					.word	EorInteger                       ; $16 ^
>947a		fb a9					.word	SyntaxError                      ; $17 _
>947c		fb a9					.word	SyntaxError                      ; $18 `
>947e		fb a9					.word	SyntaxError                      ; $19 !!25
>9480		fb a9					.word	SyntaxError                      ; $1a !!26
>9482		fb a9					.word	SyntaxError                      ; $1b {
>9484		bd 9b					.word	OraInteger                       ; $1c |
>9486		fb a9					.word	SyntaxError                      ; $1d }
>9488		fb a9					.word	SyntaxError                      ; $1e ~
>948a		fb a9					.word	SyntaxError                      ; $1f <7F>
>948c		fb a9					.word	SyntaxError                      ; $20
>948e		27 9c					.word	WordIndirect                     ; $21 !
>9490		fb a9					.word	SyntaxError                      ; $22 "
>9492		fb a9					.word	SyntaxError                      ; $23 #
>9494		fb a9					.word	SyntaxError                      ; $24 $
>9496		a1 99					.word	IntegerModulus                   ; $25 %
>9498		88 9b					.word	AndInteger                       ; $26 &
>949a		fb a9					.word	SyntaxError                      ; $27 '
>949c		fb a9					.word	SyntaxError                      ; $28 (
>949e		fb a9					.word	SyntaxError                      ; $29 )
>94a0		0f 9a					.word	MulInteger                       ; $2a *
>94a2		2a 9b					.word	AddInteger                       ; $2b +
>94a4		fb a9					.word	SyntaxError                      ; $2c ,
>94a6		63 9b					.word	SubInteger                       ; $2d -
>94a8		fb a9					.word	SyntaxError                      ; $2e .
>94aa		e1 9d					.word	FDivideCommand                   ; $2f /
>94ac		fb a9					.word	SyntaxError                      ; $30 0
>94ae		fb a9					.word	SyntaxError                      ; $31 1
>94b0		fb a9					.word	SyntaxError                      ; $32 2
>94b2		fb a9					.word	SyntaxError                      ; $33 3
>94b4		fb a9					.word	SyntaxError                      ; $34 4
>94b6		fb a9					.word	SyntaxError                      ; $35 5
>94b8		fb a9					.word	SyntaxError                      ; $36 6
>94ba		fb a9					.word	SyntaxError                      ; $37 7
>94bc		fb a9					.word	SyntaxError                      ; $38 8
>94be		fb a9					.word	SyntaxError                      ; $39 9
>94c0		fb a9					.word	SyntaxError                      ; $3a :
>94c2		fb a9					.word	SyntaxError                      ; $3b ;
>94c4		81 98					.word	BinaryCompareLess                ; $3c <
>94c6		77 98					.word	BinaryCompareEqual               ; $3d =
>94c8		8b 98					.word	BinaryCompareGreater             ; $3e >
>94ca		49 9c					.word	ByteIndirect                     ; $3f ?
.94cc						VectorSet0:
>94cc		98 93					.word	EOLCommand                       ; $80 !0:EOF
>94ce		38 94					.word	Shift1Command                    ; $81 !1:SH1
>94d0		40 94					.word	Shift2Command                    ; $82 !2:SH2
>94d2		cb a2					.word	AbsUnary                         ; $83 ABS(
>94d4		d9 a2					.word	AllocUnary                       ; $84 ALLOC(
>94d6		49 a3					.word	AscUnary                         ; $85 ASC(
>94d8		9a a4					.word	ChrUnary                         ; $86 CHR$(
>94da		50 88					.word	UnaryEvent                       ; $87 EVENT(
>94dc		73 98					.word	UnaryFalse                       ; $88 FALSE
>94de		56 a3					.word	FracUnary                        ; $89 FRAC(
>94e0		ff a7					.word	ChrGet                           ; $8a GET$(
>94e2		db a7					.word	AscGet                           ; $8b GET(
>94e4		85 a7					.word	UnaryGetDate                     ; $8c GETDATE$(
>94e6		81 a7					.word	UnaryGetTime                     ; $8d GETTIME$(
>94e8		16 af					.word	UnaryHit                         ; $8e HIT(
>94ea		06 a8					.word	ChrInkey                         ; $8f INKEY$(
>94ec		f4 a7					.word	AscInkey                         ; $90 INKEY(
>94ee		6b a3					.word	IntUnary                         ; $91 INT(
>94f0		59 a4					.word	IsValUnary                       ; $92 ISVAL(
>94f2		ac a4					.word	ItemCountUnary                   ; $93 ITEMCOUNT(
>94f4		d0 a4					.word	ItemGetUnary                     ; $94 ITEMGET$(
>94f6		e4 8e					.word	UnaryJoyB                        ; $95 JOYB(
>94f8		bd 8e					.word	UnaryJoyX                        ; $96 JOYX(
>94fa		c0 8e					.word	UnaryJoyY                        ; $97 JOYY(
>94fc		1f a8					.word	KeyDown                          ; $98 KEYDOWN(
>94fe		0f a6					.word	Unary_Left                       ; $99 LEFT$(
>9500		7c a3					.word	LenUnary                         ; $9a LEN(
>9502		9a a3					.word	Unary_Max                        ; $9b MAX(
>9504		31 a6					.word	Unary_Mid                        ; $9c MID$(
>9506		96 a3					.word	Unary_Min                        ; $9d MIN(
>9508		e5 a3					.word	Unary_Not                        ; $9e NOT(
>950a		f8 a3					.word	PeekByteUnary                    ; $9f PEEK(
>950c		04 a4					.word	PeekDUnary                       ; $a0 PEEKD(
>950e		00 a4					.word	PeekLUnary                       ; $a1 PEEKL(
>9510		fc a3					.word	PeekWUnary                       ; $a2 PEEKW(
>9512		d2 af					.word	UnaryPlaying                     ; $a3 PLAYING(
>9514		39 a8					.word	Unary_Random                     ; $a4 RANDOM(
>9516		1c a6					.word	Unary_Right                      ; $a5 RIGHT$(
>9518		53 a8					.word	Unary_Rnd                        ; $a6 RND(
>951a		31 a4					.word	SgnUnary                         ; $a7 SGN(
>951c		4e a5					.word	SpcUnary                         ; $a8 SPC(
>951e		69 a5					.word	Unary_Str                        ; $a9 STR$(
>9520		d3 96					.word	UnaryTimer                       ; $aa TIMER(
>9522		68 98					.word	UnaryTrue                        ; $ab TRUE
>9524		4f a4					.word	ValUnary                         ; $ac VAL(
>9526		56 8c					.word	ForCommand                       ; $ad FOR
>9528		99 8d					.word	IfCommand                        ; $ae IF
>952a		48 94					.word	Unused1                          ; $af PROC
>952c		44 93					.word	Command_REPEAT                   ; $b0 REPEAT
>952e		b4 97					.word	Command_WHILE                    ; $b1 WHILE
>9530		c2 8d					.word	EndIf                            ; $b2 ENDIF
>9532		cc 92					.word	Command_ENDPROC                  ; $b3 ENDPROC
>9534		08 8d					.word	NextCommand                      ; $b4 NEXT
>9536		48 94					.word	Unused4                          ; $b5 THEN
>9538		4d 93					.word	Command_UNTIL                    ; $b6 UNTIL
>953a		d5 97					.word	Command_WEND                     ; $b7 WEND
>953c		fb a9					.word	SyntaxError                      ; $b8 AT
>953e		fb a9					.word	SyntaxError                      ; $b9 BY
>9540		d4 86					.word	CallCommand                      ; $ba CALL
>9542		ca ac					.word	CircleCommand                    ; $bb CIRCLE
>9544		09 87					.word	ClearCommand                     ; $bc CLEAR
>9546		fb a9					.word	SyntaxError                      ; $bd COLOR
>9548		fb a9					.word	SyntaxError                      ; $be COLOUR
>954a		76 87					.word	Command_Data                     ; $bf DATA
>954c		7e 87					.word	DimCommand                       ; $c0 DIM
>954e		48 94					.word	Unused3                          ; $c1 DOWNTO
>9550		bb 8d					.word	ElseCode                         ; $c2 ELSE
>9552		fb a9					.word	SyntaxError                      ; $c3 FROM
>9554		e9 ae					.word	GfxCommand                       ; $c4 GFX
>9556		fb a9					.word	SyntaxError                      ; $c5 HERE
>9558		f3 ac					.word	ImageCommand                     ; $c6 IMAGE
>955a		f6 8e					.word	LetCommand                       ; $c7 LET
>955c		45 ad					.word	LineCommand                      ; $c8 LINE
>955e		50 90					.word	Command_LOCAL                    ; $c9 LOCAL
>9560		11 91					.word	MCCommand                        ; $ca MEMCOPY
>9562		fb a9					.word	SyntaxError                      ; $cb OFF
>9564		fb a9					.word	SyntaxError                      ; $cc ON
>9566		fb a9					.word	SyntaxError                      ; $cd OUTLINE
>9568		3a af					.word	PaletteCommand                   ; $ce PALETTE
>956a		3e ad					.word	PlotCommand                      ; $cf PLOT
>956c		31 92					.word	PokeBCommand                     ; $d0 POKE
>956e		3d 92					.word	PokeDCommand                     ; $d1 POKED
>9570		39 92					.word	PokeLCommand                     ; $d2 POKEL
>9572		35 92					.word	PokeWCommand                     ; $d3 POKEW
>9574		da 92					.word	Command_Read                     ; $d4 READ
>9576		c6 ac					.word	RectangleCommand                 ; $d5 RECT
>9578		37 93					.word	RemCommand                       ; $d6 REM
>957a		fb a9					.word	SyntaxError                      ; $d7 SOLID
>957c		ee af					.word	SoundCommand                     ; $d8 SOUND
>957e		d5 ac					.word	SpriteCommand                    ; $d9 SPRITE
>9580		0f ad					.word	TextCommand                      ; $da TEXT
>9582		48 94					.word	Unused2                          ; $db TO
.9584						VectorSet1:
>9584		fb a9					.word	SyntaxError                      ; $80 !0:EOF
>9586		fb a9					.word	SyntaxError                      ; $81 !1:SH1
>9588		fb a9					.word	SyntaxError                      ; $82 !2:SH2
>958a		a8 86					.word	AssembleCommand                  ; $83 ASSEMBLE
>958c		c4 86					.word	AssertCommand                    ; $84 ASSERT
>958e		89 ae					.word	BitmapCtrl                       ; $85 BITMAP
>9590		ad 88					.word	Command_BLoad                    ; $86 BLOAD
>9592		4d 89					.word	Command_BSave                    ; $87 BSAVE
>9594		7a af					.word	ClearScreen                      ; $88 CLS
>9596		c8 8d					.word	Command_CPrint                   ; $89 CPRINT
>9598		cf 89					.word	Command_Dir                      ; $8a DIR
>959a		3b 88					.word	BootDOS                          ; $8b DOS
>959c		9f 8a					.word	Command_Drive                    ; $8c DRIVE
>959e		4d 88					.word	EndCommand                       ; $8d END
>95a0		a6 af					.word	Explode                          ; $8e EXPLODE
>95a2		fb a9					.word	SyntaxError                      ; $8f GO
>95a4		61 8d					.word	Command_GOSUB                    ; $90 GOSUB
>95a6		7f 8d					.word	GotoCommand                      ; $91 GOTO
>95a8		fb a9					.word	SyntaxError                      ; $92 HIMEM
>95aa		c3 8d					.word	Command_Input                    ; $93 INPUT
>95ac		46 8f					.word	Command_List                     ; $94 LIST
>95ae		a6 8a					.word	Command_Load                     ; $95 LOAD
>95b0		fb a9					.word	SyntaxError                      ; $96 MOUSE
>95b2		21 92					.word	NewCommand                       ; $97 NEW
>95b4		82 af					.word	PingCommand                      ; $98 PING
>95b6		cf 8d					.word	Command_Print                    ; $99 PRINT
>95b8		66 93					.word	Command_Restore                  ; $9a RESTORE
>95ba		71 8d					.word	Command_RETURN                   ; $9b RETURN
>95bc		a5 93					.word	CommandRUNOptLoad                ; $9c RUN
>95be		78 8b					.word	Command_Save                     ; $9d SAVE
>95c0		5a 96					.word	CommandSetDate                   ; $9e SETDATE
>95c2		5e 96					.word	CommandSetTime                   ; $9f SETTIME
>95c4		9a af					.word	ShootCommand                     ; $a0 SHOOT
>95c6		ce ae					.word	SpritesCtrl                      ; $a1 SPRITES
>95c8		ce 96					.word	StopCommand                      ; $a2 STOP
>95ca		fc 8b					.word	Command_VERIFY                   ; $a3 VERIFY
>95cc		6d 87					.word	XGoCommand                       ; $a4 XGO
>95ce		64 87					.word	XLoadCommand                     ; $a5 XLOAD
>95d0		8e af					.word	ZapCommand                       ; $a6 ZAP
.95d2						VectorSet2:
>95d2		fb a9					.word	SyntaxError                      ; $80 !0:EOF
>95d4		fb a9					.word	SyntaxError                      ; $81 !1:SH1
>95d6		fb a9					.word	SyntaxError                      ; $82 !2:SH2
>95d8		ba a8					.word	Assemble_adc                     ; $83 ADC
>95da		b2 a8					.word	Assemble_and                     ; $84 AND
>95dc		ce a8					.word	Assemble_asl                     ; $85 ASL
>95de		38 a9					.word	Assemble_bcc                     ; $86 BCC
>95e0		3c a9					.word	Assemble_bcs                     ; $87 BCS
>95e2		44 a9					.word	Assemble_beq                     ; $88 BEQ
>95e4		fb a8					.word	Assemble_bit                     ; $89 BIT
>95e6		2c a9					.word	Assemble_bmi                     ; $8a BMI
>95e8		40 a9					.word	Assemble_bne                     ; $8b BNE
>95ea		28 a9					.word	Assemble_bpl                     ; $8c BPL
>95ec		48 a9					.word	Assemble_bra                     ; $8d BRA
>95ee		4c a9					.word	Assemble_brk                     ; $8e BRK
>95f0		30 a9					.word	Assemble_bvc                     ; $8f BVC
>95f2		34 a9					.word	Assemble_bvs                     ; $90 BVS
>95f4		54 a9					.word	Assemble_clc                     ; $91 CLC
>95f6		a8 a9					.word	Assemble_cld                     ; $92 CLD
>95f8		68 a9					.word	Assemble_cli                     ; $93 CLI
>95fa		98 a9					.word	Assemble_clv                     ; $94 CLV
>95fc		c6 a8					.word	Assemble_cmp                     ; $95 CMP
>95fe		0f a9					.word	Assemble_cpx                     ; $96 CPX
>9600		0a a9					.word	Assemble_cpy                     ; $97 CPY
>9602		ec a8					.word	Assemble_dec                     ; $98 DEC
>9604		a4 a9					.word	Assemble_dex                     ; $99 DEX
>9606		80 a9					.word	Assemble_dey                     ; $9a DEY
>9608		b6 a8					.word	Assemble_eor                     ; $9b EOR
>960a		f1 a8					.word	Assemble_inc                     ; $9c INC
>960c		b4 a9					.word	Assemble_inx                     ; $9d INX
>960e		a0 a9					.word	Assemble_iny                     ; $9e INY
>9610		23 a9					.word	Assemble_jmp                     ; $9f JMP
>9612		1e a9					.word	Assemble_jsr                     ; $a0 JSR
>9614		c2 a8					.word	Assemble_lda                     ; $a1 LDA
>9616		e7 a8					.word	Assemble_ldx                     ; $a2 LDX
>9618		05 a9					.word	Assemble_ldy                     ; $a3 LDY
>961a		d8 a8					.word	Assemble_lsr                     ; $a4 LSR
>961c		b8 a9					.word	Assemble_nop                     ; $a5 NOP
>961e		ae a8					.word	Assemble_ora                     ; $a6 ORA
>9620		64 a9					.word	Assemble_pha                     ; $a7 PHA
>9622		50 a9					.word	Assemble_php                     ; $a8 PHP
>9624		ac a9					.word	Assemble_phx                     ; $a9 PHX
>9626		6c a9					.word	Assemble_phy                     ; $aa PHY
>9628		74 a9					.word	Assemble_pla                     ; $ab PLA
>962a		58 a9					.word	Assemble_plp                     ; $ac PLP
>962c		c0 a9					.word	Assemble_plx                     ; $ad PLX
>962e		7c a9					.word	Assemble_ply                     ; $ae PLY
>9630		d3 a8					.word	Assemble_rol                     ; $af ROL
>9632		dd a8					.word	Assemble_ror                     ; $b0 ROR
>9634		60 a9					.word	Assemble_rti                     ; $b1 RTI
>9636		70 a9					.word	Assemble_rts                     ; $b2 RTS
>9638		ca a8					.word	Assemble_sbc                     ; $b3 SBC
>963a		5c a9					.word	Assemble_sec                     ; $b4 SEC
>963c		bc a9					.word	Assemble_sed                     ; $b5 SED
>963e		78 a9					.word	Assemble_sei                     ; $b6 SEI
>9640		be a8					.word	Assemble_sta                     ; $b7 STA
>9642		b0 a9					.word	Assemble_stp                     ; $b8 STP
>9644		e2 a8					.word	Assemble_stx                     ; $b9 STX
>9646		00 a9					.word	Assemble_sty                     ; $ba STY
>9648		f6 a8					.word	Assemble_stz                     ; $bb STZ
>964a		94 a9					.word	Assemble_tax                     ; $bc TAX
>964c		90 a9					.word	Assemble_tay                     ; $bd TAY
>964e		19 a9					.word	Assemble_trb                     ; $be TRB
>9650		14 a9					.word	Assemble_tsb                     ; $bf TSB
>9652		9c a9					.word	Assemble_tsx                     ; $c0 TSX
>9654		84 a9					.word	Assemble_txa                     ; $c1 TXA
>9656		8c a9					.word	Assemble_txs                     ; $c2 TXS
>9658		88 a9					.word	Assemble_tya                     ; $c3 TYA

;******  Return to file: ./common/commands/run.asm


;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/commands/setdatetime.asm

.965a						CommandSetDate:
.965a		a9 03		lda #$03			lda 	#3
.965c		80 02		bra $9660			bra 	CSDTMain
.965e						CommandSetTime:
.965e		a9 00		lda #$00			lda 	#0
.9660						CSDTMain:
.9660		48		pha				pha 								; save table offsets 0 or 3
.9661		a2 00		ldx #$00			ldx 	#0 							; input 3 values.
.9663		20 f1 a6	jsr $a6f1			jsr 	Evaluate8BitInteger
.9666		20 eb 97	jsr $97eb			jsr 	CheckComma
.9669		e8		inx				inx
.966a		20 f1 a6	jsr $a6f1			jsr 	Evaluate8BitInteger
.966d		20 eb 97	jsr $97eb			jsr 	CheckComma
.9670		e8		inx				inx
.9671		20 f1 a6	jsr $a6f1			jsr 	Evaluate8BitInteger
.9674		68		pla				pla 								; table offset in Y, saving Y
.9675		5a		phy				phy
.9676		a8		tay				tay
.9677		a2 00		ldx #$00			ldx 	#0 							; first number
.9679		a5 01		lda $01				lda 	1 							; save I/O page, switch to zero
.967b		48		pha				pha
.967c		64 01		stz $01				stz 	1
.967e						_CSDTCopy:
.967e		b5 58		lda $58,x			lda 	NSMantissa0,x 				; get first number
.9680		d9 c2 96	cmp $96c2,y			cmp 	RTCWMinValues,y 			; check range
.9683		90 1b		bcc $96a0			bcc 	_CSDTRange
.9685		d9 c8 96	cmp $96c8,y			cmp 	RTCWMaxValues,y
.9688		b0 16		bcs $96a0			bcs 	_CSDTRange
.968a		20 a5 96	jsr $96a5			jsr 	CSDTDecimalToBCD
.968d		da		phx				phx 								; save X
.968e		be bc 96	ldx $96bc,y			ldx 	RTCWOffset,y 				; offset in RTC in X
.9691		9d 90 d6	sta $d690,x			sta 	$D690,x 					; write to RTC
.9694		fa		plx				plx 								; restore X
.9695		e8		inx				inx 								; next number
.9696		c8		iny				iny 								; next table entries
.9697		e0 03		cpx #$03			cpx 	#3 							; until done all 3.
.9699		d0 e3		bne $967e			bne 	_CSDTCopy
.969b		68		pla				pla 								; restore I/O space
.969c		85 01		sta $01				sta 	1
.969e		7a		ply				ply 								; restore code pos and exit.
.969f		60		rts				rts
.96a0						_CSDTRange:
.96a0		a9 04		lda #$04		lda	#4
.96a2		4c fc 97	jmp $97fc		jmp	ErrorHandler
.96a5						CSDTDecimalToBCD:
.96a5		da		phx				phx 								; 10 count in X
.96a6		a2 00		ldx #$00			ldx 	#0
.96a8						_CSDTDBLoop:
.96a8		c9 0a		cmp #$0a			cmp 	#10 						; < 10 evaluate result.
.96aa		90 05		bcc $96b1			bcc 	_CSDTDBExit
.96ac		e9 0a		sbc #$0a			sbc 	#10 						; 10 from value
.96ae		e8		inx				inx 								; one more 10s.
.96af		80 f7		bra $96a8			bra 	_CSDTDBLoop
.96b1						_CSDTDBExit:
.96b1		85 36		sta $36				sta 	zTemp0 						; units
.96b3		8a		txa				txa 								; 10s x 16
.96b4		0a		asl a				asl 	a
.96b5		0a		asl a				asl 	a
.96b6		0a		asl a				asl 	a
.96b7		0a		asl a				asl 	a
.96b8		05 36		ora $36				ora 	zTemp0 						; BCD result and exit
.96ba		fa		plx				plx
.96bb		60		rts				rts
.96bc						RTCWOffset:
>96bc		04 02 00 06 09 0a				.byte 	4,2,0,6,9,10
.96c2						RTCWMinValues:
>96c2		00 00 00 01 01 00				.byte 	0,0,0,1,1,0
.96c8						RTCWMaxValues:
>96c8		18 3c 3c 20 0d 64				.byte 	24,60,60,32,13,100

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/stop.asm

.96ce						StopCommand:
.96ce		a9 08		lda #$08		lda	#8
.96d0		4c fc 97	jmp $97fc		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/commands/timer.asm

.96d3						UnaryTimer:
.96d3		fa		plx				plx
.96d4		20 e3 97	jsr $97e3			jsr 	CheckRightBracket
.96d7						TimerToStackX:
.96d7		20 56 a7	jsr $a756			jsr 	NSMSetZero 					; zero result
.96da		64 01		stz $01				stz 	1 							; access I/O
.96dc		ad 59 d6	lda $d659			lda 	$D659 						; copy timer in
.96df		95 58		sta $58,x			sta 	NSMantissa0,x
.96e1		ad 5a d6	lda $d65a			lda 	$D65A
.96e4		95 60		sta $60,x			sta 	NSMantissa1,x
.96e6		ad 5b d6	lda $d65b			lda 	$D65B
.96e9		95 68		sta $68,x			sta 	NSMantissa2,x
.96eb		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/procscan.asm

.96ec						ProcedureScan:
.96ec		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.96ee		85 30		sta $30				sta 	codePtr
.96f0		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.96f2		85 31		sta $31				sta 	codePtr+1
.96f4						_PSLoop:
.96f4		b2 30		lda ($30)			lda 	(codePtr)
.96f6		f0 42		beq $973a			beq 	_PSExit
.96f8		a0 03		ldy #$03			ldy 	#3 							; is it PROC at start of line ?
.96fa		b1 30		lda ($30),y			lda 	(codePtr),y
.96fc		c9 af		cmp #$af			cmp 	#KWD_PROC
.96fe		d0 2d		bne $972d			bne 	_PSNext
.9700		c8		iny				iny 								; get the address of the record to zTemp0 and
.9701		b1 30		lda ($30),y			lda 	(codePtr),y
.9703		29 c0		and #$c0			and 	#$C0
.9705		c9 40		cmp #$40			cmp 	#$40
.9707		d0 32		bne $973b			bne 	_PSSyntax
.9709		b1 30		lda ($30),y			lda 	(codePtr),y
.970b		18		clc				clc
.970c		69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.970e		85 37		sta $37				sta 	zTemp0+1
.9710		c8		iny				iny 								; LSB
.9711		b1 30		lda ($30),y			lda 	(codePtr),y
.9713		85 36		sta $36				sta 	zTemp0
.9715		c8		iny				iny 								; character after variable call.
.9716		98		tya				tya 								; save Y offset at +7 (exponent slot)
.9717		a0 07		ldy #$07			ldy 	#7
.9719		91 36		sta ($36),y			sta 	(zTemp0),y
.971b		a9 18		lda #$18			lda 	#NSTProcedure 				; mark it as procedure
.971d		a0 02		ldy #$02			ldy 	#2
.971f		91 36		sta ($36),y			sta 	(zTemp0),y
.9721		a2 00		ldx #$00			ldx 	#0 							; copy code-Ptr into offset 3-6 (mantissa)
.9723						_PSCopy:
.9723		b5 30		lda $30,x			lda 	safePtr,x
.9725		c8		iny				iny
.9726		91 36		sta ($36),y			sta 	(zTemp0),y
.9728		e8		inx				inx
.9729		e0 04		cpx #$04			cpx 	#4
.972b		d0 f6		bne $9723			bne 	_PSCopy
.972d						_PSNext:
.972d		18		clc				clc
.972e		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.9730		65 30		adc $30				adc 	codePtr
.9732		85 30		sta $30				sta 	codePtr
.9734		90 02		bcc $9738			bcc 	_CREExit
.9736		e6 31		inc $31				inc 	codePtr+1 					; carry
.9738						_CREExit:
.9738		80 ba		bra $96f4			bra 	_PSLoop
.973a						_PSExit:
.973a		60		rts				rts
.973b						_PSSyntax:
.973b		4c fb a9	jmp $a9fb			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/scanforward.asm

.973e						ScanForward:
.973e		64 38		stz $38				stz 	zTemp1 						; zero the structure count - goes up with WHILE/FOR down with WEND/NEXT etc.
.9740		86 37		stx $37				stx 	zTemp0+1
.9742		85 36		sta $36				sta 	zTemp0 						; save X & A as the two possible matches.
.9744						_ScanLoop:
.9744		b1 30		lda ($30),y			lda 	(codePtr),y
.9746		c8		iny				iny
.9747		a6 38		ldx $38				ldx 	zTemp1 						; if the count is > 0 cannot match as in substructure
.9749		d0 0e		bne $9759			bne 	_ScanGoNext
.974b		c5 36		cmp $36				cmp 	zTemp0 						; see if either matches
.974d		f0 04		beq $9753			beq 	_ScanMatch
.974f		c5 37		cmp $37				cmp 	zTemp0+1
.9751		d0 06		bne $9759			bne 	_ScanGoNext
.9753						_ScanMatch:
.9753		c9 80		cmp #$80			cmp 	#KWC_EOL 					; if asked for EOL, backtrack.
.9755		d0 01		bne $9758			bne 	_ScanNotEndEOL
.9757		88		dey				dey
.9758						_ScanNotEndEOL:
.9758		60		rts				rts
.9759						_ScanGoNext:
.9759		20 5e 97	jsr $975e			jsr  	ScanForwardOne 				; allows for shifts and so on.
.975c		80 e6		bra $9744			bra 	_ScanLoop
.975e						ScanForwardOne:
.975e		c9 40		cmp #$40			cmp 	#$40 						; if 00-3F, punctuation characters, already done.
.9760		90 3e		bcc $97a0			bcc 	_SFWExit
.9762		c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if 40-82, skip one extra as these are 2 byte
.9764		90 18		bcc $977e			bcc 	_ScanSkipOne	 			; offsets into the identifier table or shifts.
.9766		c9 fc		cmp #$fc			cmp 	#$FC 						; FC-FF are data skips (hex consts, strings etc.)
.9768		b0 2f		bcs $9799			bcs 	_ScanSkipData
.976a		c9 ad		cmp #$ad			cmp 	#KWC_FIRST_STRUCTURE 		; structure keyword ?
.976c		90 32		bcc $97a0			bcc 	_SFWExit 					; if not, ordinary keywords.
.976e		c9 b8		cmp #$b8			cmp 	#KWC_LAST_STRUCTURE+1
.9770		b0 2e		bcs $97a0			bcs 	_SFWExit
.9772		c6 38		dec $38				dec 	zTemp1 						; decrement the sructure count
.9774		c9 b2		cmp #$b2			cmp 	#KWC_FIRST_STRUCTURE_DEC 	; back if it is a dec structure (e.g. WEND/NEXT)
.9776		b0 28		bcs $97a0			bcs 	_SFWExit
.9778		e6 38		inc $38				inc 	zTemp1 						; so it's an increment structure
.977a		e6 38		inc $38				inc 	zTemp1 						; twice to undo the dec
.977c		80 22		bra $97a0			bra 	_SFWExit
.977e						_ScanSkipOne:
.977e		c8		iny				iny 								; consume the extra one.
.977f		c9 80		cmp #$80			cmp 	#KWC_EOL 					; if not EOL loop back
.9781		d0 1d		bne $97a0			bne 	_SFWExit
.9783		18		clc				clc
.9784		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.9786		65 30		adc $30				adc 	codePtr
.9788		85 30		sta $30				sta 	codePtr
.978a		90 02		bcc $978e			bcc 	_CREExit
.978c		e6 31		inc $31				inc 	codePtr+1 					; carry
.978e						_CREExit:
.978e		a0 03		ldy #$03			ldy 	#3 							; scan start position.
.9790		b2 30		lda ($30)			lda 	(codePtr)
.9792		d0 0c		bne $97a0			bne 	_SFWExit 					; if not zero, more to scan
.9794		a9 13		lda #$13		lda	#19
.9796		4c fc 97	jmp $97fc		jmp	ErrorHandler
.9799						_ScanSkipData:
.9799		88		dey				dey 								; point at data token
.979a		c8		iny				iny 								; point to offset
.979b		98		tya				tya 								; A = offset position
.979c		38		sec				sec 								; add size +1 hence SEC
.979d		71 30		adc ($30),y			adc 	(codePtr),y
.979f		a8		tay				tay 								; make current position.
.97a0						_SFWExit:
.97a0		60		rts				rts
.97a1						ScanGetCurrentLineStep:
.97a1		64 38		stz $38				stz 	zTemp1
.97a3		a0 03		ldy #$03			ldy 	#3
.97a5						_SGCLSLoop:
.97a5		b1 30		lda ($30),y			lda 	(codePtr),y
.97a7		c8		iny				iny
.97a8		c9 80		cmp #$80			cmp 	#KWC_EOL	 				; if EOL exit
.97aa		f0 05		beq $97b1			beq 	_SGCLSExit
.97ac		20 5e 97	jsr $975e			jsr 	ScanForwardOne
.97af		80 f4		bra $97a5			bra 	_SGCLSLoop
.97b1						_SGCLSExit:
.97b1		a5 38		lda $38				lda 	zTemp1 						; return the adjustment
.97b3		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/while.asm

.97b4						Command_WHILE:
.97b4		5a		phy				phy 								; save position of the test
.97b5		a2 00		ldx #$00			ldx 	#0 							; work out the while test.
.97b7		20 a4 a6	jsr $a6a4			jsr 	EvaluateNumber
.97ba		20 78 a7	jsr $a778			jsr 	NSMIsZero 					; check if zero
.97bd		f0 0e		beq $97cd			beq 	_WHExitLoop 				; if so exit the loop, while has failed.
.97bf		98		tya				tya 								; position *after* test.
.97c0		7a		ply				ply 								; restore position before test, at WHILE
.97c1		88		dey				dey 								; so we execute the WHILE command again.
.97c2		48		pha				pha 								; push after test on the stack
.97c3		a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; allocate 6 bytes on the return stack.
.97c5		20 75 b0	jsr $b075			jsr 	StackOpen
.97c8		20 ba b0	jsr $b0ba			jsr 	STKSaveCodePosition 		; save loop position - where the test value expr is.
.97cb		7a		ply				ply 								; restore the position *after* the test
.97cc		60		rts				rts
.97cd						_WHExitLoop:
.97cd		68		pla				pla 								; throw post loop position
.97ce		a9 b7		lda #$b7			lda 	#KWD_WEND 					; scan forward past WEND
.97d0		aa		tax				tax
.97d1		20 3e 97	jsr $973e			jsr 	ScanForward
.97d4		60		rts				rts
.97d5						Command_WEND:
.97d5		a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; check WHILE is TOS e.g. in a while loop :)
.97d7		a2 10		ldx #$10			ldx 	#ERRID_WHILE 				; this error if not.
.97d9		20 a2 b0	jsr $b0a2			jsr 	StackCheckFrame
.97dc		20 cb b0	jsr $b0cb			jsr 	STKLoadCodePosition 		; loop back to the WHILE keyword.
.97df		20 94 b0	jsr $b094			jsr 	StackClose		 			; erase the frame
.97e2		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/charcheck.asm

.97e3						CheckRightBracket:
.97e3		b1 30		lda ($30),y			lda 	(codePtr),y
.97e5		c8		iny				iny
.97e6		c9 29		cmp #$29			cmp 	#KWD_RPAREN 						; exit if matches
.97e8		d0 0f		bne $97f9			bne 	CNAFail
.97ea		60		rts				rts
.97eb						CheckComma:
.97eb		b1 30		lda ($30),y			lda 	(codePtr),y
.97ed		c8		iny				iny
.97ee		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 						; exit if matches
.97f0		d0 07		bne $97f9			bne 	CNAFail
.97f2		60		rts				rts
.97f3						CheckNextA:
.97f3		d1 30		cmp ($30),y			cmp 	(codePtr),y
.97f5		d0 02		bne $97f9			bne 	CNAFail
.97f7		c8		iny				iny 								; skip character
.97f8		60		rts				rts 								; and exit
.97f9						CNAFail:
.97f9		4c fb a9	jmp $a9fb			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/errors.asm

.97fc						ErrorHandler:
.97fc		a8		tay				tay 								; find the error text
.97fd		f0 49		beq $9848			beq 	_EHEnd
.97ff		a2 00		ldx #$00			ldx 	#0
.9801		a9 14		lda #$14			lda 	#((ErrorText) & $FF)
.9803		85 36		sta $36				sta 	0+zTemp0
.9805		a9 aa		lda #$aa			lda 	#((ErrorText) >> 8)
.9807		85 37		sta $37				sta 	1+zTemp0
.9809						_EHFind:
.9809		88		dey				dey 								; keep looking through text
.980a		f0 0e		beq $981a			beq 	_EHFound
.980c						_EHFindZero:
.980c		b2 36		lda ($36)			lda 	(zTemp0) 					; find the next error
.980e		e6 36		inc $36				inc 	zTemp0
.9810		d0 02		bne $9814			bne 	_EHFNoCarry
.9812		e6 37		inc $37				inc 	zTemp0+1
.9814						_EHFNoCarry:
.9814		c9 00		cmp #$00			cmp 	#0
.9816		d0 f4		bne $980c			bne 	_EHFindZero
.9818		80 ef		bra $9809			bra 	_EHFind
.981a						_EHFound:
.981a		a5 36		lda $36				lda 	zTemp0 						; print message
.981c		a6 37		ldx $37				ldx 	zTemp0+1
.981e		20 55 98	jsr $9855			jsr 	PrintStringXA
.9821		a0 01		ldy #$01			ldy 	#1 							; if line number zero don't print it
.9823		b1 30		lda ($30),y			lda 	(codePtr),y
.9825		d0 05		bne $982c			bne 	_EHAtMsg
.9827		c8		iny				iny
.9828		b1 30		lda ($30),y			lda 	(codePtr),y
.982a		f0 17		beq $9843			beq 	_EHCREnd
.982c						_EHAtMsg:
.982c		a2 98		ldx #$98			ldx 	#_AtMsg >> 8 				; print " at "
.982e		a9 4b		lda #$4b			lda 	#_AtMsg & $FF
.9830		20 55 98	jsr $9855			jsr 	PrintStringXA
.9833		a0 01		ldy #$01			ldy 	#1 							; line number into XA
.9835		b1 30		lda ($30),y			lda 	(codePtr),y
.9837		48		pha				pha
.9838		c8		iny				iny
.9839		b1 30		lda ($30),y			lda 	(codePtr),y
.983b		aa		tax				tax
.983c		68		pla				pla
.983d		20 6b 9c	jsr $9c6b			jsr 	ConvertInt16 				; convert XA to string
.9840		20 55 98	jsr $9855			jsr 	PrintStringXA 				; and print it.
.9843						_EHCREnd:
.9843		a9 0d		lda #$0d			lda 	#13 						; new line
.9845		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.9848						_EHEnd:
.9848		4c 70 86	jmp $8670			jmp 	WarmStart
>984b		20 61 74 20 6c 69 6e 65		_AtMsg:	.text 	" at line ",0
>9853		20 00
.9855						PrintStringXA:
.9855		5a		phy				phy
.9856		86 37		stx $37				stx 	zTemp0+1
.9858		85 36		sta $36				sta 	zTemp0
.985a		a0 00		ldy #$00			ldy 	#0
.985c						_PSXALoop:
.985c		b1 36		lda ($36),y			lda 	(zTemp0),y
.985e		f0 06		beq $9866			beq 	_PSXAExit
.9860		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.9863		c8		iny				iny
.9864		80 f6		bra $985c			bra 	_PSXALoop
.9866						_PSXAExit:
.9866		7a		ply				ply
.9867		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/compare.asm

.9868						UnaryTrue:
.9868		fa		plx				plx
.9869						ReturnTrue:
.9869		a9 01		lda #$01			lda 	#1  						; set to 1
.986b		20 58 a7	jsr $a758			jsr 	NSMSetByte
.986e		a9 80		lda #$80			lda 	#$80 						; set sign flag, so it is -1
.9870		95 50		sta $50,x			sta 	NSStatus,x
.9872		60		rts				rts
.9873						UnaryFalse:
.9873		fa		plx				plx
.9874						ReturnFalse:
.9874		4c 56 a7	jmp $a756			jmp 	NSMSetZero 					; set it all to zero
.9877						BinaryCompareEqual:
.9877		fa		plx				plx
.9878		20 b3 98	jsr $98b3			jsr 	CompareBaseCode
.987b		c9 00		cmp #$00			cmp 	#0
.987d		f0 ea		beq $9869			beq 	ReturnTrue
.987f		80 f3		bra $9874			bra 	ReturnFalse
.9881						BinaryCompareLess:
.9881		fa		plx				plx
.9882		20 b3 98	jsr $98b3			jsr 	CompareBaseCode
.9885		c9 ff		cmp #$ff			cmp 	#$FF
.9887		f0 e0		beq $9869			beq 	ReturnTrue
.9889		80 e9		bra $9874			bra 	ReturnFalse
.988b						BinaryCompareGreater:
.988b		fa		plx				plx
.988c		20 b3 98	jsr $98b3			jsr 	CompareBaseCode
.988f		c9 01		cmp #$01			cmp 	#1
.9891		f0 d6		beq $9869			beq 	ReturnTrue
.9893		80 df		bra $9874			bra 	ReturnFalse
.9895						BinaryCompareNotEqual:
.9895		fa		plx				plx
.9896		20 b3 98	jsr $98b3			jsr 	CompareBaseCode
.9899		c9 00		cmp #$00			cmp 	#0
.989b		d0 cc		bne $9869			bne 	ReturnTrue
.989d		80 d5		bra $9874			bra 	ReturnFalse
.989f						BinaryCompareLessEqual:
.989f		fa		plx				plx
.98a0		20 b3 98	jsr $98b3			jsr 	CompareBaseCode
.98a3		c9 01		cmp #$01			cmp 	#1
.98a5		d0 c2		bne $9869			bne 	ReturnTrue
.98a7		80 cb		bra $9874			bra 	ReturnFalse
.98a9						BinaryCompareGreaterEqual:
.98a9		fa		plx				plx
.98aa		20 b3 98	jsr $98b3			jsr 	CompareBaseCode
.98ad		c9 ff		cmp #$ff			cmp 	#$FF
.98af		d0 b8		bne $9869			bne 	ReturnTrue
.98b1		80 c1		bra $9874			bra 	ReturnFalse
.98b3						CompareBaseCode:
.98b3		20 be 9f	jsr $9fbe			jsr 	DereferenceTopTwo 			; make both values if references.
.98b6		b5 50		lda $50,x			lda 	NSStatus,x 					; check if either is a string.
.98b8		15 51		ora $51,x			ora 	NSStatus+1,x
.98ba		29 10		and #$10			and 	#NSTString
.98bc		d0 37		bne $98f5			bne 	_CBCString 					; if so do string code, which will check if both.
.98be		b5 78		lda $78,x			lda 	NSExponent,x 				; check both are integers
.98c0		15 79		ora $79,x			ora 	NSExponent+1,x
.98c2		d0 34		bne $98f8			bne 	_CBCFloat
.98c4		b5 50		lda $50,x			lda 	NSStatus,x
.98c6		15 51		ora $51,x			ora 	NSStatus+1,x
.98c8		29 08		and #$08			and 	#NSTFloat
.98ca		d0 2c		bne $98f8			bne 	_CBCFloat
.98cc		20 fb 98	jsr $98fb			jsr 	CompareFixMinusZero 		; fix up -0 just in cases.
.98cf		e8		inx				inx
.98d0		20 fb 98	jsr $98fb			jsr 	CompareFixMinusZero
.98d3		ca		dex				dex
.98d4		b5 50		lda $50,x			lda 	NSStatus,x 					; are the signs different ?
.98d6		55 51		eor $51,x			eor 	NSStatus+1,x
.98d8		10 0a		bpl $98e4			bpl 	_CDCSameSign
.98da		b5 50		lda $50,x			lda 	NSStatus,x 					; if first one is -ve
.98dc		30 14		bmi $98f2			bmi 	_CBCLess 					; return $FF
.98de						_CBCGreater:
.98de		a9 01		lda #$01			lda 	#1
.98e0		60		rts				rts
.98e1						_CBCEqual:
.98e1		a9 00		lda #$00			lda 	#0
.98e3		60		rts				rts
.98e4						_CDCSameSign:
.98e4		20 10 9b	jsr $9b10			jsr 	SubTopTwoStack 				; unsigned subtract
.98e7		20 78 a7	jsr $a778			jsr 	NSMIsZero 					; or the mantissa together
.98ea		f0 f5		beq $98e1			beq 	_CBCEqual 					; -0 == 0
.98ec		b5 70		lda $70,x			lda 	NSMantissa3,x 				; sign of the result. if +ve return $01 else return $FF
.98ee		55 51		eor $51,x			eor 	NSStatus+1,x 				; however if both were -ve this is inverted
.98f0		10 ec		bpl $98de			bpl 	_CBCGreater
.98f2						_CBCLess:
.98f2		a9 ff		lda #$ff			lda 	#$FF
.98f4		60		rts				rts
.98f5						_CBCString:
.98f5		4c 81 9a	jmp $9a81			jmp 	CompareStrings
.98f8						_CBCFloat:
.98f8		4c cb 9d	jmp $9dcb			jmp 	CompareFloat
.98fb						CompareFixMinusZero:
.98fb		20 78 a7	jsr $a778			jsr 	NSMIsZero
.98fe		d0 02		bne $9902			bne 	_CFXMZNotZero
.9900		74 50		stz $50,x			stz 	NSStatus,x
.9902						_CFXMZNotZero:
.9902		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/concat.asm

.9903						StringConcat:
.9903		b5 50		lda $50,x			lda 	NSStatus,x 					; check both strings
.9905		35 51		and $51,x			and 	NSStatus+1,x
.9907		29 18		and #$18			and 	#NSBTypeMask
.9909		c9 10		cmp #$10			cmp 	#NSTString
.990b		d0 50		bne $995d			bne		_SCType
.990d		64 38		stz $38				stz 	zTemp1 						; counting total length
.990f		e8		inx				inx
.9910		20 2e 99	jsr $992e			jsr 	_SCSetupZ0 					; setup for second
.9913		20 37 99	jsr $9937			jsr 	_SCLengthZ0 				; length for second
.9916		ca		dex				dex
.9917		20 2e 99	jsr $992e			jsr 	_SCSetupZ0 					; setup for first
.991a		20 37 99	jsr $9937			jsr 	_SCLengthZ0 				; length for first
.991d		a5 38		lda $38				lda 	zTemp1 						; allocate memory using total.
.991f		20 65 b1	jsr $b165			jsr 	StringTempAllocate
.9922		20 4e 99	jsr $994e			jsr 	_SCCopy 					; copy first out, using zTemp0 from above
.9925		e8		inx				inx
.9926		20 2e 99	jsr $992e			jsr 	_SCSetupZ0 					; copy second out
.9929		20 4e 99	jsr $994e			jsr 	_SCCopy
.992c		ca		dex				dex
.992d		60		rts				rts
.992e						_SCSetupZ0:
.992e		b5 58		lda $58,x			lda 	NSMantissa0,x
.9930		85 36		sta $36				sta 	zTemp0
.9932		b5 60		lda $60,x			lda 	NSMantissa1,x
.9934		85 37		sta $37				sta 	zTemp0+1
.9936		60		rts				rts
.9937						_SCLengthZ0:
.9937		5a		phy				phy
.9938		a0 00		ldy #$00			ldy 	#0
.993a						_SCLenLoop:
.993a		b1 36		lda ($36),y			lda 	(zTemp0),y
.993c		f0 0e		beq $994c			beq 	_SCLExit
.993e		c8		iny				iny
.993f		e6 38		inc $38				inc 	zTemp1
.9941		a5 38		lda $38				lda	 	zTemp1 						; check string too long.
.9943		c9 fd		cmp #$fd			cmp 	#253
.9945		d0 f3		bne $993a			bne		_SCLenLoop
.9947		a9 09		lda #$09		lda	#9
.9949		4c fc 97	jmp $97fc		jmp	ErrorHandler
.994c						_SCLExit:
.994c		7a		ply				ply
.994d		60		rts				rts
.994e						_SCCopy:
.994e		5a		phy				phy
.994f		a0 00		ldy #$00			ldy 	#0
.9951						_SCCopyLoop:
.9951		b1 36		lda ($36),y			lda 	(zTemp0),y
.9953		f0 06		beq $995b			beq 	_SCCExit
.9955		20 9e b1	jsr $b19e			jsr 	StringTempWrite
.9958		c8		iny				iny
.9959		80 f6		bra $9951			bra 	_SCCopyLoop
.995b						_SCCExit:
.995b		7a		ply				ply
.995c		60		rts				rts
.995d						_SCType:
.995d		4c 05 aa	jmp $aa05			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/divide.asm

.9960						IntegerDivide:
.9960		fa		plx				plx
.9961		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9963		15 51		ora $51,x			ora 	NSStatus+1,x
.9965		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9966		0a		asl a				asl 	a
.9967		10 05		bpl $996e			bpl 	_NotRef
.9969		48		pha				pha
.996a		20 be 9f	jsr $9fbe			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.996d		68		pla				pla
.996e						_NotRef:
.996e		0a		asl a				asl 	a
.996f		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9971		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9973		15 79		ora $79,x			ora 	NSExponent+1,x
.9975		f0 03		beq $997a			beq 	_IntegerCode 				; if clear, then we have two integers
.9977		4c 05 aa	jmp $aa05			jmp 	TypeError 					; anything else, type mismatch.
.997a						_IntegerCode:
.997a		20 94 99	jsr $9994			jsr 	CheckDivideZero 			; do div zero check
.997d		20 c6 99	jsr $99c6			jsr 	Int32Divide 				; do the division
.9980		20 77 9a	jsr $9a77			jsr 	CalculateSign 				; calculate result sign
.9983						NSMCopyPlusTwoToZero:
.9983		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.9985		95 58		sta $58,x			sta 	NSMantissa0,x
.9987		b5 62		lda $62,x			lda 	NSMantissa1+2,x
.9989		95 60		sta $60,x			sta 	NSMantissa1,x
.998b		b5 6a		lda $6a,x			lda 	NSMantissa2+2,x
.998d		95 68		sta $68,x			sta 	NSMantissa2,x
.998f		b5 72		lda $72,x			lda 	NSMantissa3+2,x
.9991		95 70		sta $70,x			sta 	NSMantissa3,x
.9993		60		rts				rts
.9994						CheckDivideZero:
.9994		e8		inx				inx
.9995		20 78 a7	jsr $a778			jsr 	NSMIsZero
.9998		f0 02		beq $999c			beq 	_CDVError
.999a		ca		dex				dex
.999b		60		rts				rts
.999c						_CDVError:
.999c		a9 03		lda #$03		lda	#3
.999e		4c fc 97	jmp $97fc		jmp	ErrorHandler
.99a1						IntegerModulus:
.99a1		fa		plx				plx
.99a2		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.99a4		15 51		ora $51,x			ora 	NSStatus+1,x
.99a6		0a		asl a				asl 	a 							; shift reference bit into sign bit
.99a7		0a		asl a				asl 	a
.99a8		10 05		bpl $99af			bpl 	_NotRef
.99aa		48		pha				pha
.99ab		20 be 9f	jsr $9fbe			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.99ae		68		pla				pla
.99af						_NotRef:
.99af		0a		asl a				asl 	a
.99b0		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.99b2		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.99b4		15 79		ora $79,x			ora 	NSExponent+1,x
.99b6		f0 03		beq $99bb			beq 	_IntegerCode 				; if clear, then we have two integers
.99b8		4c 05 aa	jmp $aa05			jmp 	TypeError 					; anything else, type mismatch.
.99bb						_IntegerCode:
.99bb						IntegerModulusNoCheck:
.99bb		20 94 99	jsr $9994			jsr 	CheckDivideZero 			; do div zero check
.99be		20 c6 99	jsr $99c6			jsr 	Int32Divide 				; do the division
.99c1		16 50		asl $50,x			asl 	NSStatus,x 					; clear the sign bit.
.99c3		56 50		lsr $50,x			lsr 	NSStatus,x
.99c5		60		rts				rts
.99c6						Int32Divide:
.99c6		48		pha				pha 								; save AXY
.99c7		5a		phy				phy
.99c8		20 39 a7	jsr $a739			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.99cb		20 52 a7	jsr $a752			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.99ce		a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.99d0						_I32DivideLoop:
.99d0		e8		inx				inx
.99d1		e8		inx				inx
.99d2		20 65 a7	jsr $a765			jsr 	NSMShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.99d5		ca		dex				dex
.99d6		ca		dex				dex
.99d7		20 66 a7	jsr $a766			jsr 	NSMRotateLeft
.99da		20 05 9a	jsr $9a05			jsr 	DivideCheckSubtract 		; check if subtract possible
.99dd		90 02		bcc $99e1			bcc 	_I32DivideNoCarryIn
.99df		f6 5a		inc $5a,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.99e1						_I32DivideNoCarryIn:
.99e1		88		dey				dey 								; loop round till division completed.
.99e2		d0 ec		bne $99d0			bne 	_I32DivideLoop
.99e4		7a		ply				ply 								; restore AXY and exit
.99e5		68		pla				pla
.99e6		60		rts				rts
.99e7						Int32ShiftDivide:
.99e7		48		pha				pha 								; save AY
.99e8		5a		phy				phy
.99e9		e8		inx				inx 								; clear S[X+2]
.99ea		e8		inx				inx
.99eb		20 56 a7	jsr $a756			jsr 	NSMSetZero
.99ee		ca		dex				dex
.99ef		ca		dex				dex
.99f0		a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.99f2						_I32SDLoop:
.99f2		20 05 9a	jsr $9a05			jsr 	DivideCheckSubtract 		; check if subtract possible
.99f5		e8		inx				inx
.99f6		e8		inx				inx
.99f7		20 66 a7	jsr $a766			jsr 	NSMRotateLeft				; shift 64 bit FPA left, rotating carry in
.99fa		ca		dex				dex
.99fb		ca		dex				dex
.99fc		20 66 a7	jsr $a766			jsr 	NSMRotateLeft
.99ff		88		dey				dey 	 							; do 31 times
.9a00		d0 f0		bne $99f2			bne 	_I32SDLoop
.9a02		7a		ply				ply 								; restore AY and exit
.9a03		68		pla				pla
.9a04		60		rts				rts
.9a05						DivideCheckSubtract:
.9a05		20 10 9b	jsr $9b10			jsr 	SubTopTwoStack 				; subtract Stack[X+1] from Stack[X+0]
.9a08		b0 04		bcs $9a0e			bcs 	_DCSExit 					; if carry set, then could do, exit
.9a0a		20 f6 9a	jsr $9af6			jsr 	AddTopTwoStack 				; add it back in
.9a0d		18		clc				clc 								; and return False
.9a0e						_DCSExit:
.9a0e		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/multiply.asm

.9a0f						MulInteger:
.9a0f		fa		plx				plx
.9a10		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9a12		15 51		ora $51,x			ora 	NSStatus+1,x
.9a14		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9a15		0a		asl a				asl 	a
.9a16		10 05		bpl $9a1d			bpl 	_NotRef
.9a18		48		pha				pha
.9a19		20 be 9f	jsr $9fbe			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9a1c		68		pla				pla
.9a1d						_NotRef:
.9a1d		0a		asl a				asl 	a 							; put MSB of type into A:7
.9a1e		30 09		bmi $9a29			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.9a20		b5 78		lda $78,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9a22		15 79		ora $79,x			ora 	NSExponent+1,x
.9a24		f0 06		beq $9a2c			beq 	_IntegerCode 				; if clear, then we have two integers
.9a26		4c 8d 9e	jmp $9e8d			jmp 	FloatingPointMultiply 							; otherwise at least one float.
.9a29						_StringData:
.9a29		4c 0f aa	jmp $aa0f			jmp 	NotDoneError							; at least one string - don't know both are strings.
.9a2c						_IntegerCode:
.9a2c		20 39 9a	jsr $9a39			jsr 	MultiplyShort
.9a2f		c9 00		cmp #$00			cmp 	#0
.9a31		f0 05		beq $9a38			beq 	_MIExit
.9a33		a9 04		lda #$04		lda	#4
.9a35		4c fc 97	jmp $97fc		jmp	ErrorHandler
.9a38						_MIExit:
.9a38		60		rts				rts
.9a39						MultiplyShort:
.9a39		5a		phy				phy 								; save Y
.9a3a		20 39 a7	jsr $a739			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.9a3d		20 52 a7	jsr $a752			jsr 	NSMSetZeroMantissaOnly 		; set mantissa S[X] to zero
.9a40		a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.9a42						_I32MLoop:
.9a42		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.9a44		15 62		ora $62,x			ora 	NSMantissa1+2,x
.9a46		15 6a		ora $6a,x			ora 	NSMantissa2+2,x
.9a48		15 72		ora $72,x			ora 	NSMantissa3+2,x
.9a4a		f0 25		beq $9a71			beq 	_I32MExit 					; exit if zero
.9a4c		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.9a4e		29 01		and #$01			and 	#1
.9a50		f0 0d		beq $9a5f			beq 	_I32MNoAdd
.9a52		20 f6 9a	jsr $9af6			jsr 	AddTopTwoStack 				; if so add S[X+1] to S[X+0]
.9a55		b5 70		lda $70,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.9a57		10 06		bpl $9a5f			bpl 	_I32MNoAdd
.9a59						_I32ShiftRight:
.9a59		20 6f a7	jsr $a76f			jsr 	NSMShiftRight 				; shift S[X] right
.9a5c		c8		iny				iny 								; increment shift count
.9a5d		80 09		bra $9a68			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.9a5f						_I32MNoAdd:
.9a5f		34 71		bit $71,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.9a61		70 f6		bvs $9a59			bvs 	_I32ShiftRight 				; instead.
.9a63		e8		inx				inx
.9a64		20 65 a7	jsr $a765			jsr 	NSMShiftLeft 				; shift additive S[X+1] left
.9a67		ca		dex				dex
.9a68						_I32MShiftUpper:
.9a68		e8		inx				inx 								; shift S[X+2] right
.9a69		e8		inx				inx
.9a6a		20 6f a7	jsr $a76f			jsr 	NSMShiftRight
.9a6d		ca		dex				dex
.9a6e		ca		dex				dex
.9a6f		80 d1		bra $9a42			bra 	_I32MLoop 					; try again.
.9a71						_I32MExit:
.9a71		20 77 9a	jsr $9a77			jsr 	CalculateSign
.9a74		98		tya				tya 								; shift in A
.9a75		7a		ply				ply 								; restore Y and exit
.9a76		60		rts				rts
.9a77						CalculateSign:
.9a77		b5 50		lda $50,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.9a79		16 50		asl $50,x			asl 	NSStatus,x 					; shift result left
.9a7b		55 51		eor $51,x			eor 	NSStatus+1,x
.9a7d		0a		asl a				asl 	a 							; shift bit 7 into carry
.9a7e		76 50		ror $50,x			ror 	NSStatus,x 					; shift right into status byte.
.9a80		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/scompare.asm

.9a81						CompareStrings:
.9a81		b5 50		lda $50,x			lda 	NSStatus,x 					; check both are strings
.9a83		35 51		and $51,x			and 	NSStatus+1,x
.9a85		29 10		and #$10			and 	#NSBIsString
.9a87		f0 28		beq $9ab1			beq 	_CSTypeError
.9a89		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy string addresses to zTemp0/1
.9a8b		85 36		sta $36				sta 	zTemp0
.9a8d		b5 60		lda $60,x			lda 	NSMantissa1,x
.9a8f		85 37		sta $37				sta 	zTemp0+1
.9a91		b5 59		lda $59,x			lda 	NSMantissa0+1,x
.9a93		85 38		sta $38				sta 	zTemp1
.9a95		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9a97		85 39		sta $39				sta 	zTemp1+1
.9a99		5a		phy				phy 								; save Y so we can access strings
.9a9a		a0 ff		ldy #$ff			ldy 	#$FF 						; -1 for pre increment.
.9a9c						_CSLoop:
.9a9c		c8		iny				iny
.9a9d		b1 36		lda ($36),y			lda 	(zTemp0),y 					; check if they are the same
.9a9f		d1 38		cmp ($38),y			cmp 	(zTemp1),y
.9aa1		d0 06		bne $9aa9			bne 	_CSDifferent
.9aa3		c9 00		cmp #$00			cmp 	#0 							; reached end ?
.9aa5		d0 f5		bne $9a9c			bne 	_CSLoop 					; still comparing
.9aa7						_CSExit:
.9aa7		7a		ply				ply 								; reached end, return zero in A from EOS
.9aa8		60		rts				rts
.9aa9						_CSDifferent:
.9aa9		a9 ff		lda #$ff			lda 	#255 						; if < return $FF
.9aab		90 fa		bcc $9aa7			bcc		_CSExit
.9aad		a9 01		lda #$01			lda 	#1 							; otherwise return 1.
.9aaf		80 f6		bra $9aa7			bra 	_CSExit
.9ab1						_CSTypeError:
.9ab1		4c 05 aa	jmp $aa05			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/shifts.asm

.9ab4						ShiftLeft:
.9ab4		38		sec				sec 								; common code, carry determines which way.
.9ab5		80 01		bra $9ab8			bra 	ShiftMain
.9ab7						ShiftRight:
.9ab7		18		clc				clc
.9ab8						ShiftMain:
.9ab8		fa		plx				plx 								; restore X
.9ab9		08		php				php 								; save direction
.9aba		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9abc		15 51		ora $51,x			ora 	NSStatus+1,x
.9abe		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9abf		0a		asl a				asl 	a
.9ac0		10 05		bpl $9ac7			bpl 	_NotRef
.9ac2		48		pha				pha
.9ac3		20 be 9f	jsr $9fbe			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9ac6		68		pla				pla
.9ac7						_NotRef:
.9ac7		0a		asl a				asl 	a
.9ac8		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9aca		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9acc		15 79		ora $79,x			ora 	NSExponent+1,x
.9ace		f0 03		beq $9ad3			beq 	_IntegerCode 				; if clear, then we have two integers
.9ad0		4c 05 aa	jmp $aa05			jmp 	TypeError 					; anything else, type mismatch.
.9ad3						_IntegerCode:
.9ad3		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; check number < 32
.9ad5		29 e0		and #$e0			and 	#$E0
.9ad7		15 61		ora $61,x			ora 	NSMantissa1+1,x
.9ad9		15 69		ora $69,x			ora 	NSMantissa2+1,x
.9adb		15 71		ora $71,x			ora 	NSMantissa3+1,x
.9add		d0 12		bne $9af1			bne 	_SMExit0 					; if >= 32 it will always return zero.
.9adf						_SMLoop:
.9adf		d6 59		dec $59,x			dec 	NSMantissa0+1,x 			; predecrement, could do << 0
.9ae1		30 11		bmi $9af4			bmi 	_SMExit 					; exit if done.
.9ae3		28		plp				plp 								; restore direction setting
.9ae4		08		php				php
.9ae5		90 05		bcc $9aec			bcc 	_SMRight
.9ae7		20 65 a7	jsr $a765			jsr 	NSMShiftLeft 				; shift left if CS
.9aea		80 f3		bra $9adf			bra 	_SMLoop
.9aec						_SMRight:
.9aec		20 6f a7	jsr $a76f			jsr 	NSMShiftRight 				; shift right if CC
.9aef		80 ee		bra $9adf			bra 	_SMLoop
.9af1						_SMExit0:
.9af1		20 56 a7	jsr $a756			jsr 	NSMSetZero 					; return zero.
.9af4						_SMExit:
.9af4		28		plp				plp 								; throw direction
.9af5		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/simple.asm

.9af6						AddTopTwoStack:
.9af6		18		clc				clc
.9af7		b5 58		lda $58,x			lda		NSMantissa0,x
.9af9		75 59		adc $59,x			adc 		NSMantissa0+1,x
.9afb		95 58		sta $58,x			sta 	NSMantissa0,x
.9afd		b5 60		lda $60,x			lda		NSMantissa1,x
.9aff		75 61		adc $61,x			adc 		NSMantissa1+1,x
.9b01		95 60		sta $60,x			sta 	NSMantissa1,x
.9b03		b5 68		lda $68,x			lda		NSMantissa2,x
.9b05		75 69		adc $69,x			adc 		NSMantissa2+1,x
.9b07		95 68		sta $68,x			sta 	NSMantissa2,x
.9b09		b5 70		lda $70,x			lda		NSMantissa3,x
.9b0b		75 71		adc $71,x			adc 		NSMantissa3+1,x
.9b0d		95 70		sta $70,x			sta 	NSMantissa3,x
.9b0f		60		rts				rts
.9b10						SubTopTwoStack:
.9b10		38		sec				sec
.9b11		b5 58		lda $58,x			lda		NSMantissa0,x
.9b13		f5 59		sbc $59,x			sbc 		NSMantissa0+1,x
.9b15		95 58		sta $58,x			sta 	NSMantissa0,x
.9b17		b5 60		lda $60,x			lda		NSMantissa1,x
.9b19		f5 61		sbc $61,x			sbc 		NSMantissa1+1,x
.9b1b		95 60		sta $60,x			sta 	NSMantissa1,x
.9b1d		b5 68		lda $68,x			lda		NSMantissa2,x
.9b1f		f5 69		sbc $69,x			sbc 		NSMantissa2+1,x
.9b21		95 68		sta $68,x			sta 	NSMantissa2,x
.9b23		b5 70		lda $70,x			lda		NSMantissa3,x
.9b25		f5 71		sbc $71,x			sbc 		NSMantissa3+1,x
.9b27		95 70		sta $70,x			sta 	NSMantissa3,x
.9b29		60		rts				rts
.9b2a						AddInteger:
.9b2a		fa		plx				plx
.9b2b		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9b2d		15 51		ora $51,x			ora 	NSStatus+1,x
.9b2f		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9b30		0a		asl a				asl 	a
.9b31		10 05		bpl $9b38			bpl 	_NotRef
.9b33		48		pha				pha
.9b34		20 be 9f	jsr $9fbe			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9b37		68		pla				pla
.9b38						_NotRef:
.9b38		0a		asl a				asl 	a 							; put MSB of type into A:7
.9b39		30 09		bmi $9b44			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.9b3b		b5 78		lda $78,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9b3d		15 79		ora $79,x			ora 	NSExponent+1,x
.9b3f		f0 06		beq $9b47			beq 	_IntegerCode 				; if clear, then we have two integers
.9b41		4c 3d 9d	jmp $9d3d			jmp 	FloatingPointAdd 							; otherwise at least one float.
.9b44						_StringData:
.9b44		4c 03 99	jmp $9903			jmp 	StringConcat							; at least one string - don't know both are strings.
.9b47						_IntegerCode:
.9b47						AddCode:
.9b47		b5 50		lda $50,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.9b49		55 51		eor $51,x			eor 	NSStatus+1,x
.9b4b		10 a9		bpl $9af6			bpl 	AddTopTwoStack
.9b4d		20 10 9b	jsr $9b10			jsr 	SubTopTwoStack 				; do a physical subtraction
.9b50		34 70		bit $70,x			bit 	NSMantissa3,x 				; result is +ve, okay
.9b52		10 07		bpl $9b5b			bpl 	_AddExit
.9b54		b5 51		lda $51,x			lda 	NSStatus+1,x 				; sign is that of 2nd value
.9b56		95 50		sta $50,x			sta 	NSStatus,x
.9b58		20 1f a7	jsr $a71f			jsr 	NSMNegateMantissa 			; negate the mantissa and exit
.9b5b						_AddExit:
.9b5b		20 78 a7	jsr $a778			jsr 	NSMIsZero 					; check for -0
.9b5e		d0 02		bne $9b62			bne 	_AddNonZero
.9b60		74 50		stz $50,x			stz 	NSStatus,x
.9b62						_AddNonZero:
.9b62		60		rts				rts
.9b63						SubInteger:
.9b63		fa		plx				plx
.9b64		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9b66		15 51		ora $51,x			ora 	NSStatus+1,x
.9b68		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9b69		0a		asl a				asl 	a
.9b6a		10 05		bpl $9b71			bpl 	_NotRef
.9b6c		48		pha				pha
.9b6d		20 be 9f	jsr $9fbe			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9b70		68		pla				pla
.9b71						_NotRef:
.9b71		0a		asl a				asl 	a 							; put MSB of type into A:7
.9b72		30 09		bmi $9b7d			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.9b74		b5 78		lda $78,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9b76		15 79		ora $79,x			ora 	NSExponent+1,x
.9b78		f0 06		beq $9b80			beq 	_IntegerCode 				; if clear, then we have two integers
.9b7a		4c 42 9d	jmp $9d42			jmp 	FloatingPointSub 							; otherwise at least one float.
.9b7d						_StringData:
.9b7d		4c 0f aa	jmp $aa0f			jmp 	NotDoneError							; at least one string - don't know both are strings.
.9b80						_IntegerCode:
.9b80		b5 51		lda $51,x			lda 	NSStatus+1,x 				; negate the second value.
.9b82		49 80		eor #$80			eor 	#$80
.9b84		95 51		sta $51,x			sta 	NSStatus+1,x
.9b86		80 bf		bra $9b47			bra 	AddCode 					; and do the same code as add.
.9b88						AndInteger:
.9b88		fa		plx				plx
.9b89		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9b8b		15 51		ora $51,x			ora 	NSStatus+1,x
.9b8d		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9b8e		0a		asl a				asl 	a
.9b8f		10 05		bpl $9b96			bpl 	_NotRef
.9b91		48		pha				pha
.9b92		20 be 9f	jsr $9fbe			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9b95		68		pla				pla
.9b96						_NotRef:
.9b96		0a		asl a				asl 	a
.9b97		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9b99		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9b9b		15 79		ora $79,x			ora 	NSExponent+1,x
.9b9d		f0 03		beq $9ba2			beq 	_IntegerCode 				; if clear, then we have two integers
.9b9f		4c 05 aa	jmp $aa05			jmp 	TypeError 					; anything else, type mismatch.
.9ba2						_IntegerCode:
.9ba2		b5 58		lda $58,x			lda		NSMantissa0,x
.9ba4		35 59		and $59,x			and 		NSMantissa0+1,x
.9ba6		95 58		sta $58,x			sta 	NSMantissa0,x
.9ba8		b5 60		lda $60,x			lda		NSMantissa1,x
.9baa		35 61		and $61,x			and 		NSMantissa1+1,x
.9bac		95 60		sta $60,x			sta 	NSMantissa1,x
.9bae		b5 68		lda $68,x			lda		NSMantissa2,x
.9bb0		35 69		and $69,x			and 		NSMantissa2+1,x
.9bb2		95 68		sta $68,x			sta 	NSMantissa2,x
.9bb4		b5 70		lda $70,x			lda		NSMantissa3,x
.9bb6		35 71		and $71,x			and 		NSMantissa3+1,x
.9bb8		95 70		sta $70,x			sta 	NSMantissa3,x
.9bba		74 50		stz $50,x			stz	 	NSStatus,x 					; ignore sign.
.9bbc		60		rts				rts
.9bbd						OraInteger:
.9bbd		fa		plx				plx
.9bbe		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9bc0		15 51		ora $51,x			ora 	NSStatus+1,x
.9bc2		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9bc3		0a		asl a				asl 	a
.9bc4		10 05		bpl $9bcb			bpl 	_NotRef
.9bc6		48		pha				pha
.9bc7		20 be 9f	jsr $9fbe			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9bca		68		pla				pla
.9bcb						_NotRef:
.9bcb		0a		asl a				asl 	a
.9bcc		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9bce		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9bd0		15 79		ora $79,x			ora 	NSExponent+1,x
.9bd2		f0 03		beq $9bd7			beq 	_IntegerCode 				; if clear, then we have two integers
.9bd4		4c 05 aa	jmp $aa05			jmp 	TypeError 					; anything else, type mismatch.
.9bd7						_IntegerCode:
.9bd7		b5 58		lda $58,x			lda		NSMantissa0,x
.9bd9		15 59		ora $59,x			ora 		NSMantissa0+1,x
.9bdb		95 58		sta $58,x			sta 	NSMantissa0,x
.9bdd		b5 60		lda $60,x			lda		NSMantissa1,x
.9bdf		15 61		ora $61,x			ora 		NSMantissa1+1,x
.9be1		95 60		sta $60,x			sta 	NSMantissa1,x
.9be3		b5 68		lda $68,x			lda		NSMantissa2,x
.9be5		15 69		ora $69,x			ora 		NSMantissa2+1,x
.9be7		95 68		sta $68,x			sta 	NSMantissa2,x
.9be9		b5 70		lda $70,x			lda		NSMantissa3,x
.9beb		15 71		ora $71,x			ora 		NSMantissa3+1,x
.9bed		95 70		sta $70,x			sta 	NSMantissa3,x
.9bef		74 50		stz $50,x			stz	 	NSStatus,x 					; ignore sign.
.9bf1		60		rts				rts
.9bf2						EorInteger:
.9bf2		fa		plx				plx
.9bf3		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9bf5		15 51		ora $51,x			ora 	NSStatus+1,x
.9bf7		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9bf8		0a		asl a				asl 	a
.9bf9		10 05		bpl $9c00			bpl 	_NotRef
.9bfb		48		pha				pha
.9bfc		20 be 9f	jsr $9fbe			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9bff		68		pla				pla
.9c00						_NotRef:
.9c00		0a		asl a				asl 	a
.9c01		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9c03		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9c05		15 79		ora $79,x			ora 	NSExponent+1,x
.9c07		f0 03		beq $9c0c			beq 	_IntegerCode 				; if clear, then we have two integers
.9c09		4c 05 aa	jmp $aa05			jmp 	TypeError 					; anything else, type mismatch.
.9c0c						_IntegerCode:
.9c0c		b5 58		lda $58,x			lda		NSMantissa0,x
.9c0e		55 59		eor $59,x			eor 		NSMantissa0+1,x
.9c10		95 58		sta $58,x			sta 	NSMantissa0,x
.9c12		b5 60		lda $60,x			lda		NSMantissa1,x
.9c14		55 61		eor $61,x			eor 		NSMantissa1+1,x
.9c16		95 60		sta $60,x			sta 	NSMantissa1,x
.9c18		b5 68		lda $68,x			lda		NSMantissa2,x
.9c1a		55 69		eor $69,x			eor 		NSMantissa2+1,x
.9c1c		95 68		sta $68,x			sta 	NSMantissa2,x
.9c1e		b5 70		lda $70,x			lda		NSMantissa3,x
.9c20		55 71		eor $71,x			eor 		NSMantissa3+1,x
.9c22		95 70		sta $70,x			sta 	NSMantissa3,x
.9c24		74 50		stz $50,x			stz	 	NSStatus,x 					; ignore sign.
.9c26		60		rts				rts
.9c27						WordIndirect:
.9c27		fa		plx				plx
.9c28		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9c2a		15 51		ora $51,x			ora 	NSStatus+1,x
.9c2c		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9c2d		0a		asl a				asl 	a
.9c2e		10 05		bpl $9c35			bpl 	_NotRef
.9c30		48		pha				pha
.9c31		20 be 9f	jsr $9fbe			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9c34		68		pla				pla
.9c35						_NotRef:
.9c35		0a		asl a				asl 	a
.9c36		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9c38		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9c3a		15 79		ora $79,x			ora 	NSExponent+1,x
.9c3c		f0 03		beq $9c41			beq 	_IntegerCode 				; if clear, then we have two integers
.9c3e		4c 05 aa	jmp $aa05			jmp 	TypeError 					; anything else, type mismatch.
.9c41						_IntegerCode:
.9c41		20 47 9b	jsr $9b47			jsr 	AddCode 					; add the two values
.9c44		a9 22		lda #$22			lda 	#NSBIsReference+2 			; make a 2 byte reference
.9c46		95 50		sta $50,x			sta 	NSStatus,x
.9c48		60		rts				rts
.9c49						ByteIndirect:
.9c49		fa		plx				plx
.9c4a		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9c4c		15 51		ora $51,x			ora 	NSStatus+1,x
.9c4e		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9c4f		0a		asl a				asl 	a
.9c50		10 05		bpl $9c57			bpl 	_NotRef
.9c52		48		pha				pha
.9c53		20 be 9f	jsr $9fbe			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9c56		68		pla				pla
.9c57						_NotRef:
.9c57		0a		asl a				asl 	a
.9c58		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9c5a		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9c5c		15 79		ora $79,x			ora 	NSExponent+1,x
.9c5e		f0 03		beq $9c63			beq 	_IntegerCode 				; if clear, then we have two integers
.9c60		4c 05 aa	jmp $aa05			jmp 	TypeError 					; anything else, type mismatch.
.9c63						_IntegerCode:
.9c63		20 47 9b	jsr $9b47			jsr 	AddCode 					; add the two values
.9c66		a9 21		lda #$21			lda 	#NSBIsReference+1 			; make a 1 byte reference
.9c68		95 50		sta $50,x			sta 	NSStatus,x
.9c6a		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/tostring.asm

.9c6b						ConvertInt16:
.9c6b		85 58		sta $58				sta 	NSMantissa0 				; set up as 32 bit conversion
.9c6d		86 60		stx $60				stx 	NSMantissa1
.9c6f		64 68		stz $68				stz 	NSMantissa2
.9c71		64 70		stz $70				stz 	NSMantissa3
.9c73		64 50		stz $50				stz 	NSStatus 					; positive integer
.9c75		a2 00		ldx #$00			ldx 	#0 							; stack level
.9c77		a9 0a		lda #$0a			lda 	#10 						; base 10 decimal.
.9c79		80 00		bra $9c7b			bra 	ConvertInt32
.9c7b						ConvertInt32:
.9c7b		5a		phy				phy
.9c7c		a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.9c7e		24 50		bit $50				bit 	NSStatus 					; output a - if not negative.
.9c80		10 08		bpl $9c8a			bpl 	_CI32NotNeg
.9c82		48		pha				pha
.9c83		a9 2d		lda #$2d			lda 	#'-'
.9c85		99 23 06	sta $0623,y			sta 	numberBuffer,y
.9c88		c8		iny				iny
.9c89		68		pla				pla
.9c8a						_CI32NotNeg:
.9c8a		20 98 9c	jsr $9c98			jsr 	_CI32DivideConvert 			; recursive conversion
.9c8d		a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.9c8f		99 23 06	sta $0623,y			sta 	numberBuffer,y
.9c92		7a		ply				ply
.9c93		a2 06		ldx #$06			ldx 	#numberBuffer >> 8 			; return address in XA
.9c95		a9 23		lda #$23			lda 	#numberBuffer & $FF
.9c97		60		rts				rts
.9c98						_CI32DivideConvert:
.9c98		e8		inx				inx 								; write to next slot up
.9c99		20 58 a7	jsr $a758			jsr 	NSMSetByte 		 			; write the base out.
.9c9c		ca		dex				dex
.9c9d		20 c6 99	jsr $99c6			jsr 	Int32Divide 				; divide
.9ca0		b5 58		lda $58,x			lda 	NSMantissa0,x 				; save remainder
.9ca2		48		pha				pha
.9ca3		20 83 99	jsr $9983			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.9ca6		20 78 a7	jsr $a778			jsr 	NSMIsZero 					; is it zero ?
.9ca9		f0 05		beq $9cb0			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.9cab		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.9cad		20 98 9c	jsr $9c98			jsr 	_CI32DivideConvert 			; and recusrively call.
.9cb0						_CI32NoRecurse:
.9cb0		68		pla				pla 								; remainder
.9cb1		c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII, allowing for hexadecimal.
.9cb3		90 02		bcc $9cb7			bcc 	_CI32NotHex
.9cb5		69 26		adc #$26			adc 	#6+32
.9cb7						_CI32NotHex:
.9cb7		69 30		adc #$30			adc 	#48
.9cb9		99 23 06	sta $0623,y			sta 	numberBuffer,y 				; write out and exit
.9cbc		c8		iny				iny
.9cbd		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/expression.asm


;******  Processing file: ./common/expressions/../generated/precedence.dat

.9cbe						PrecedenceLevel:
>9cbe		04					.byte	 4	; $00 <<
>9cbf		02					.byte	 2	; $01 <=
>9cc0		02					.byte	 2	; $02 <>
>9cc1		00					.byte	 0	; $03 !!3
>9cc2		00					.byte	 0	; $04 ><
>9cc3		02					.byte	 2	; $05 >=
>9cc4		04					.byte	 4	; $06 >>
>9cc5		00					.byte	 0	; $07 !!7
>9cc6		00					.byte	 0	; $08 !!8
>9cc7		00					.byte	 0	; $09 !!9
>9cc8		00					.byte	 0	; $0a !!10
>9cc9		00					.byte	 0	; $0b !!11
>9cca		00					.byte	 0	; $0c !!12
>9ccb		00					.byte	 0	; $0d !!13
>9ccc		00					.byte	 0	; $0e !!14
>9ccd		00					.byte	 0	; $0f !!15
>9cce		00					.byte	 0	; $10 @
>9ccf		00					.byte	 0	; $11 !!17
>9cd0		00					.byte	 0	; $12 !!18
>9cd1		00					.byte	 0	; $13 [
>9cd2		04					.byte	 4	; $14 \
>9cd3		00					.byte	 0	; $15 ]
>9cd4		01					.byte	 1	; $16 ^
>9cd5		00					.byte	 0	; $17 _
>9cd6		00					.byte	 0	; $18 `
>9cd7		00					.byte	 0	; $19 !!25
>9cd8		00					.byte	 0	; $1a !!26
>9cd9		00					.byte	 0	; $1b {
>9cda		01					.byte	 1	; $1c |
>9cdb		00					.byte	 0	; $1d }
>9cdc		00					.byte	 0	; $1e ~
>9cdd		00					.byte	 0	; $1f <7F>
>9cde		00					.byte	 0	; $20
>9cdf		05					.byte	 5	; $21 !
>9ce0		00					.byte	 0	; $22 "
>9ce1		00					.byte	 0	; $23 #
>9ce2		05					.byte	 5	; $24 $
>9ce3		04					.byte	 4	; $25 %
>9ce4		01					.byte	 1	; $26 &
>9ce5		00					.byte	 0	; $27 '
>9ce6		00					.byte	 0	; $28 (
>9ce7		00					.byte	 0	; $29 )
>9ce8		04					.byte	 4	; $2a *
>9ce9		03					.byte	 3	; $2b +
>9cea		00					.byte	 0	; $2c ,
>9ceb		03					.byte	 3	; $2d -
>9cec		00					.byte	 0	; $2e .
>9ced		04					.byte	 4	; $2f /
>9cee		00					.byte	 0	; $30 0
>9cef		00					.byte	 0	; $31 1
>9cf0		00					.byte	 0	; $32 2
>9cf1		00					.byte	 0	; $33 3
>9cf2		00					.byte	 0	; $34 4
>9cf3		00					.byte	 0	; $35 5
>9cf4		00					.byte	 0	; $36 6
>9cf5		00					.byte	 0	; $37 7
>9cf6		00					.byte	 0	; $38 8
>9cf7		00					.byte	 0	; $39 9
>9cf8		00					.byte	 0	; $3a :
>9cf9		00					.byte	 0	; $3b ;
>9cfa		02					.byte	 2	; $3c <
>9cfb		02					.byte	 2	; $3d =
>9cfc		02					.byte	 2	; $3e >
>9cfd		05					.byte	 5	; $3f ?

;******  Return to file: ./common/expressions/expression.asm

.9cfe						EvaluateExpressionAt0:
.9cfe		a2 00		ldx #$00			ldx 	#0 							; bottom stack level
.9d00						EvaluateExpression:
.9d00		a9 00		lda #$00			lda 	#0 							; lowest precedence level
.9d02						EvaluateExpressionAtPrecedence:
.9d02		48		pha				pha 								; save precedence level
.9d03		20 4a a1	jsr $a14a			jsr 	EvaluateTerm 				; evaluate term into level X.
.9d06		68		pla				pla 								; restore precedence level.
.9d07						_EXPRLoop:
.9d07		85 36		sta $36				sta 	zTemp0 						; save current precedence level.
.9d09		b1 30		lda ($30),y			lda 	(codePtr),y
.9d0b		c9 40		cmp #$40			cmp		#$40 						; if >= $40 cannot be an operator
.9d0d		b0 25		bcs $9d34			bcs 	_EXPRExit
.9d0f		da		phx				phx 								; read the operator precedence
.9d10		aa		tax				tax
.9d11		bd be 9c	lda $9cbe,x			lda 	PrecedenceLevel,x
.9d14		fa		plx				plx
.9d15		c9 00		cmp #$00			cmp 	#0							; if zero exit (not an operator)
.9d17		f0 1b		beq $9d34			beq 	_EXPRExit
.9d19		85 37		sta $37				sta 	zTemp0+1 					; save operator precedence level.
.9d1b		a5 36		lda $36				lda 	zTemp0 						; compare current precedence vs. operator precedence
.9d1d		c5 37		cmp $37				cmp 	zTemp0+1
.9d1f		b0 13		bcs $9d34			bcs		_EXPRExit 					; if current >= operator exit
.9d21		48		pha				pha 								; save current precedence.
.9d22		b1 30		lda ($30),y			lda 	(codePtr),y
.9d24		c8		iny				iny
.9d25		48		pha				pha
.9d26		a5 37		lda $37				lda 	zTemp0+1 					; get operator precedence level
.9d28		e8		inx				inx 								; work out the right hand side.
.9d29		20 02 9d	jsr $9d02			jsr 	EvaluateExpressionAtPrecedence
.9d2c		ca		dex				dex
.9d2d		68		pla				pla 								; get operator, call the code.
.9d2e		20 37 9d	jsr $9d37			jsr 	_EXPRCaller
.9d31		68		pla				pla 								; restore precedence level
.9d32		80 d3		bra $9d07			bra 	_EXPRLoop 					; and go round.
.9d34						_EXPRExit:
.9d34		a5 36		lda $36				lda 	zTemp0 						; A = current precedence level.
.9d36		60		rts				rts
.9d37						_EXPRCaller:
.9d37		da		phx				phx 								; save on stack, first thing is to restore it
.9d38		0a		asl a				asl 	a 							; double so can use vectors into X
.9d39		aa		tax				tax
.9d3a		7c 4c 94	jmp ($944c,x)			jmp 	(VectorSetPunc,x) 			; and go to the code.

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/addsub.asm

.9d3d						FloatingPointAdd:
.9d3d		20 b3 9e	jsr $9eb3			jsr 	FloatPrepare 				; prepare for floats
.9d40		80 09		bra $9d4b			bra 	FloatAdd
.9d42						FloatingPointSub:
.9d42		20 b3 9e	jsr $9eb3			jsr 	FloatPrepare 				; prepare for floats
.9d45						FloatSubtract:
.9d45		b5 51		lda $51,x			lda 	NSStatus+1,x 				; negate FPB
.9d47		49 80		eor #$80			eor 	#$80
.9d49		95 51		sta $51,x			sta 	NSStatus+1,x				; and fall through.
.9d4b						FloatAdd:
.9d4b		48		pha				pha
.9d4c		5a		phy				phy
.9d4d		20 c2 9e	jsr $9ec2			jsr 	NSNormalise 				; normalise S[X]
.9d50		f0 51		beq $9da3			beq 	_FAReturn1
.9d52		e8		inx				inx 								; normalise S[X+1]
.9d53		20 c2 9e	jsr $9ec2			jsr 	NSNormalise
.9d56		ca		dex				dex
.9d57		c9 00		cmp #$00			cmp 	#0
.9d59		f0 60		beq $9dbb			beq 	_FAExit 					; if so, just return A
.9d5b		b5 78		lda $78,x			lda 	NSExponent,x 				; are the exponents the same ?
.9d5d		d5 79		cmp $79,x			cmp 	NSExponent+1,x
.9d5f		f0 18		beq $9d79			beq 	_FAExponentsEqual
.9d61		b5 78		lda $78,x			lda 	NSExponent,x 				; work out the larger exponent
.9d63		a8		tay				tay
.9d64		38		sec				sec 								; do a signed comparison of the exponents.
.9d65		f5 79		sbc $79,x			sbc 	NSExponent+1,x
.9d67		50 02		bvc $9d6b			bvc 	_FANoSignedChange
.9d69		49 80		eor #$80			eor 	#$80
.9d6b						_FANoSignedChange:
.9d6b		29 80		and #$80			and 	#$80
.9d6d		10 02		bpl $9d71			bpl 	_FAHaveMax
.9d6f		b4 79		ldy $79,x			ldy 	NSExponent+1,x
.9d71						_FAHaveMax:
.9d71		20 be 9d	jsr $9dbe			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.9d74		e8		inx				inx
.9d75		20 be 9d	jsr $9dbe			jsr 	_FAShiftToExponent
.9d78		ca		dex				dex
.9d79						_FAExponentsEqual:
.9d79		b5 50		lda $50,x			lda 	NSStatus,x 					; are the signs the same
.9d7b		55 51		eor $51,x			eor 	NSStatus+1,x
.9d7d		30 0e		bmi $9d8d			bmi 	_FADifferentSigns
.9d7f		20 f6 9a	jsr $9af6			jsr 	AddTopTwoStack 				; do the add of the mantissae
.9d82		b5 70		lda $70,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.9d84		10 35		bpl $9dbb			bpl 	_FAExit 					; if no, we are done.
.9d86		20 6f a7	jsr $a76f			jsr 	NSMShiftRight 				; shift A right, renormalising it.
.9d89		f6 78		inc $78,x			inc 	NSExponent,x 				; bump the exponent and exit
.9d8b		80 2e		bra $9dbb			bra 	_FAExit
.9d8d						_FADifferentSigns:
.9d8d		20 10 9b	jsr $9b10			jsr 	SubTopTwoStack 				; subtract mantissa B from A
.9d90		b5 70		lda $70,x			lda 	NSMantissa3,x 				; is the result negative ?
.9d92		10 06		bpl $9d9a			bpl 	_FACheckZero 				; if no, check for -0
.9d94		20 18 a7	jsr $a718			jsr 	NSMNegate 					; netate result
.9d97		20 1f a7	jsr $a71f			jsr 	NSMNegateMantissa 			; negate (2'c) the mantissa
.9d9a						_FACheckZero:
.9d9a		20 78 a7	jsr $a778			jsr 	NSMIsZero	 				; check for -0
.9d9d		d0 1c		bne $9dbb			bne 	_FAExit
.9d9f		74 50		stz $50,x			stz 	NSStatus,x
.9da1		80 18		bra $9dbb			bra 	_FAExit
.9da3						_FAReturn1:
.9da3		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; called when S(X) is zero.
.9da5		95 58		sta $58,x			sta 	NSMantissa0,x
.9da7		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9da9		95 60		sta $60,x			sta 	NSMantissa1,x
.9dab		b5 69		lda $69,x			lda 	NSMantissa2+1,x
.9dad		95 68		sta $68,x			sta 	NSMantissa2,x
.9daf		b5 71		lda $71,x			lda 	NSMantissa3+1,x
.9db1		95 70		sta $70,x			sta 	NSMantissa3,x
.9db3		b5 79		lda $79,x			lda 	NSExponent+1,x
.9db5		95 78		sta $78,x			sta 	NSExponent,x
.9db7		b5 51		lda $51,x			lda 	NSStatus+1,x
.9db9		95 50		sta $50,x			sta 	NSStatus,x
.9dbb						_FAExit:
.9dbb		7a		ply				ply
.9dbc		68		pla				pla
.9dbd		60		rts				rts
.9dbe						_FAShiftToExponent:
.9dbe						_FAShiftToExponent2:
.9dbe		98		tya				tya 								; compare Y to exponent
.9dbf		d5 78		cmp $78,x			cmp 	NSExponent,x 				; reached the exponent required ?
.9dc1		f0 07		beq $9dca			beq 	_FASEExit 					; exit if so.
.9dc3		20 6f a7	jsr $a76f			jsr 	NSMShiftRight	 			; shift the mantissa right
.9dc6		f6 78		inc $78,x			inc 	NSExponent,x 				; increment exponent
.9dc8		80 f4		bra $9dbe			bra 	_FAShiftToExponent2
.9dca						_FASEExit:
.9dca		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/compare.asm

.9dcb						CompareFloat:
.9dcb		20 45 9d	jsr $9d45			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.9dce		b5 60		lda $60,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.9dd0		29 f8		and #$f8			and 	#$F8
.9dd2		15 68		ora $68,x			ora 	NSMantissa2,x
.9dd4		15 70		ora $70,x			ora 	NSMantissa3,x
.9dd6		f0 08		beq $9de0			beq 	_FCExit 					; zero, so approximately identical
.9dd8		a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.9dda		34 50		bit $50,x			bit 	NSStatus,x
.9ddc		10 02		bpl $9de0			bpl 	_FCExit
.9dde						_FCNegative:
.9dde		a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.9de0						_FCExit:
.9de0		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/divide.asm

.9de1						FDivideCommand:
.9de1		fa		plx				plx	 								; restore stack position
.9de2		20 b3 9e	jsr $9eb3			jsr 	FloatPrepare 				; prepare for floats
.9de5						FloatDivide:
.9de5		48		pha				pha
.9de6		e8		inx				inx
.9de7		20 c2 9e	jsr $9ec2			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.9dea		ca		dex				dex
.9deb		c9 00		cmp #$00			cmp 	#0
.9ded		f0 1d		beq $9e0c			beq 	_FDZero
.9def		20 c2 9e	jsr $9ec2			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.9df2		f0 16		beq $9e0a			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.9df4		20 e7 99	jsr $99e7			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.9df7		20 83 99	jsr $9983			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.9dfa		20 c2 9e	jsr $9ec2			jsr		NSNormalise 				; renormalise
.9dfd		20 77 9a	jsr $9a77			jsr 	CalculateSign 				; calculate result sign
.9e00		b5 78		lda $78,x			lda 	NSExponent,x 				; calculate exponent
.9e02		38		sec				sec
.9e03		f5 79		sbc $79,x			sbc 	NSExponent+1,x
.9e05		38		sec				sec
.9e06		e9 1e		sbc #$1e			sbc 	#30
.9e08		95 78		sta $78,x			sta 	NSExponent,x
.9e0a						_FDExit:
.9e0a		68		pla				pla
.9e0b		60		rts				rts
.9e0c						_FDZero:
.9e0c		a9 03		lda #$03		lda	#3
.9e0e		4c fc 97	jmp $97fc		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/fractional.asm

.9e11						FloatFractionalPart:
.9e11		5a		phy				phy
.9e12		b5 50		lda $50,x			lda 	NSStatus,x 					; take absolute value
.9e14		29 7f		and #$7f			and 	#$7F
.9e16		95 50		sta $50,x			sta 	NSStatus,x
.9e18		20 c2 9e	jsr $9ec2			jsr 	NSNormalise
.9e1b		b5 78		lda $78,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.9e1d		38		sec				sec
.9e1e		e9 e0		sbc #$e0			sbc 	#$E0
.9e20		90 29		bcc $9e4b			bcc 	_FFPExit 					; already fractional
.9e22		c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.9e24		b0 22		bcs $9e48			bcs 	_FFPZero
.9e26		a8		tay				tay 								; put count to do in Y
.9e27		b5 70		lda $70,x			lda 	NSMantissa3,x 				; do each in turn.
.9e29		20 4d 9e	jsr $9e4d			jsr 	_FFPPartial
.9e2c		95 70		sta $70,x			sta 	NSMantissa3,x
.9e2e		b5 68		lda $68,x			lda 	NSMantissa2,x
.9e30		20 4d 9e	jsr $9e4d			jsr 	_FFPPartial
.9e33		95 68		sta $68,x			sta 	NSMantissa2,x
.9e35		b5 60		lda $60,x			lda 	NSMantissa1,x
.9e37		20 4d 9e	jsr $9e4d			jsr 	_FFPPartial
.9e3a		95 60		sta $60,x			sta 	NSMantissa1,x
.9e3c		b5 58		lda $58,x			lda 	NSMantissa0,x
.9e3e		20 4d 9e	jsr $9e4d			jsr 	_FFPPartial
.9e41		95 58		sta $58,x			sta 	NSMantissa0,x
.9e43		20 78 a7	jsr $a778			jsr 	NSMIsZero 					; zeroed check.
.9e46		d0 03		bne $9e4b			bne 	_FFPExit
.9e48						_FFPZero:
.9e48		20 56 a7	jsr $a756			jsr 	NSMSetZero
.9e4b						_FFPExit:
.9e4b		7a		ply				ply
.9e4c		60		rts				rts
.9e4d						_FFPPartial:
.9e4d		c0 00		cpy #$00			cpy 	#0 							; no more to do
.9e4f		f0 17		beq $9e68			beq 	_FFFPPExit
.9e51		c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.9e53		b0 0c		bcs $9e61			bcs 	_FFFPPWholeByte
.9e55		5a		phy				phy
.9e56						_FFFPPLeft:
.9e56		0a		asl a				asl 	a
.9e57		88		dey				dey
.9e58		d0 fc		bne $9e56			bne 	_FFFPPLeft
.9e5a		7a		ply				ply
.9e5b						_FFFPPRight:
.9e5b		4a		lsr a				lsr 	a
.9e5c		88		dey				dey
.9e5d		d0 fc		bne $9e5b			bne 	_FFFPPRight
.9e5f		80 07		bra $9e68			bra 	_FFFPPExit
.9e61						_FFFPPWholeByte:
.9e61		98		tya				tya 								; subtract 8 from count
.9e62		38		sec				sec
.9e63		e9 08		sbc #$08			sbc 	#8
.9e65		a8		tay				tay
.9e66		a9 00		lda #$00			lda 	#0 							; and clear all
.9e68						_FFFPPExit:
.9e68		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/integer.asm

.9e69						FloatIntegerPart:
.9e69		48		pha				pha
.9e6a		b5 78		lda $78,x			lda 	NSExponent,x 				; is it integer already ?
.9e6c		f0 1d		beq $9e8b			beq 	_FIPExit 					; if so do nothing
.9e6e		20 78 a7	jsr $a778			jsr 	NSMIsZero 					; is it zero ?
.9e71		f0 15		beq $9e88			beq 	_FIPZero 					; if so return zero.
.9e73		20 c2 9e	jsr $9ec2			jsr 	NSNormalise 				; normalise
.9e76		f0 10		beq $9e88			beq 	_FIPZero 					; normalised to zero, exit zero
.9e78						_FIPShift:
.9e78		b5 78		lda $78,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.9e7a		10 07		bpl $9e83			bpl 	_FIPCheckZero
.9e7c		20 6f a7	jsr $a76f			jsr 	NSMShiftRight 				; shift mantissa right
.9e7f		f6 78		inc $78,x			inc 	NSExponent,x 				; bump exponent
.9e81		80 f5		bra $9e78			bra 	_FIPShift
.9e83						_FIPCheckZero:
.9e83		20 78 a7	jsr $a778			jsr 	NSMIsZero 					; avoid -0 problem
.9e86		d0 03		bne $9e8b			bne 	_FIPExit 					; set to zero if mantissa zero.
.9e88						_FIPZero:
.9e88		20 56 a7	jsr $a756			jsr 	NSMSetZero
.9e8b						_FIPExit:
.9e8b		68		pla				pla
.9e8c		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/multiply.asm

.9e8d						FloatingPointMultiply:
.9e8d		20 b3 9e	jsr $9eb3			jsr 	FloatPrepare 				; prepare for floats
.9e90						FloatMultiply:
.9e90		48		pha				pha
.9e91		20 c2 9e	jsr $9ec2			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.9e94		f0 18		beq $9eae			beq 	_FDExit 					; return zero if zero (e.g. zero*something)
.9e96		e8		inx				inx
.9e97		20 c2 9e	jsr $9ec2			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.9e9a		ca		dex				dex
.9e9b		c9 00		cmp #$00			cmp 	#0
.9e9d		f0 0c		beq $9eab			beq 	_FDSetZero
.9e9f		20 39 9a	jsr $9a39			jsr 	MultiplyShort 				; calculate the result.
.9ea2		75 78		adc $78,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.9ea4		18		clc				clc
.9ea5		75 79		adc $79,x			adc 	NSExponent+1,x
.9ea7		95 78		sta $78,x			sta 	NSExponent,x
.9ea9		80 03		bra $9eae			bra 	_FDExit
.9eab						_FDSetZero:
.9eab		20 56 a7	jsr $a756			jsr 	NSMSetZero 					; return 0
.9eae						_FDExit:
.9eae		20 c2 9e	jsr $9ec2			jsr 	NSNormalise 				; normalise the result
.9eb1		68		pla				pla
.9eb2		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/utility.asm

.9eb3						FloatPrepare:
.9eb3		20 be 9f	jsr $9fbe			jsr 	DereferenceTopTwo 			; dereference the top two values
.9eb6		b5 50		lda $50,x			lda 	NSStatus,x 					; check ints/floats, either will do.
.9eb8		15 51		ora $51,x			ora 	NSStatus+1,x
.9eba		29 10		and #$10			and 	#NSBIsString
.9ebc		d0 01		bne $9ebf			bne 	_FDType
.9ebe		60		rts				rts
.9ebf						_FDType:
.9ebf		4c 05 aa	jmp $aa05			jmp 	TypeError
.9ec2						NSNormalise:
.9ec2		b5 50		lda $50,x			lda 	NSStatus,x 					; make float, keep sign
.9ec4		29 80		and #$80			and 	#$80
.9ec6		09 08		ora #$08			ora 	#NSTFloat
.9ec8		95 50		sta $50,x			sta 	NSStatus,x
.9eca		20 78 a7	jsr $a778			jsr 	NSMIsZero 					; if zero exit
.9ecd		d0 07		bne $9ed6			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.9ecf		16 50		asl $50,x			asl 	NSStatus,x 					; clear the sign bit.
.9ed1		76 50		ror $50,x			ror 	NSStatus,x 					; (no -0)
.9ed3		a9 00		lda #$00			lda 	#0 							; set Z flag
.9ed5		60		rts				rts
.9ed6						_NSNormaliseOptimise:
.9ed6		b5 70		lda $70,x			lda 	NSMantissa3,x 				; upper byte zero ?
.9ed8		d0 19		bne $9ef3			bne 	_NSNormaliseLoop
.9eda		b5 68		lda $68,x			lda 	NSMantissa2,x 				; byte normalise
.9edc		30 15		bmi $9ef3			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.9ede		95 70		sta $70,x			sta 	NSMantissa3,x
.9ee0		b5 60		lda $60,x			lda 	NSMantissa1,x
.9ee2		95 68		sta $68,x			sta 	NSMantissa2,x
.9ee4		b5 58		lda $58,x			lda 	NSMantissa0,x
.9ee6		95 60		sta $60,x			sta 	NSMantissa1,x
.9ee8		74 58		stz $58,x			stz 	NSMantissa0,x
.9eea		b5 78		lda $78,x			lda 	NSExponent,x
.9eec		38		sec				sec
.9eed		e9 08		sbc #$08			sbc 	#8
.9eef		95 78		sta $78,x			sta 	NSExponent,x
.9ef1		80 e3		bra $9ed6			bra 	_NSNormaliseOptimise
.9ef3						_NSNormaliseLoop:
.9ef3		34 70		bit $70,x			bit 	NSMantissa3,x 				; bit 30 set ?
.9ef5		70 07		bvs $9efe			bvs 	_NSNExit 					; exit if so with Z flag clear
.9ef7		20 65 a7	jsr $a765			jsr 	NSMShiftLeft 				; shift mantissa left
.9efa		d6 78		dec $78,x			dec 	NSExponent,x 				; adjust exponent
.9efc		80 f5		bra $9ef3			bra 	_NSNormaliseLoop
.9efe						_NSNExit:
.9efe		a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.9f00		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignnumber.asm

.9f01						AssignNumber:
.9f01		5a		phy				phy
.9f02		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy mantissa0/1 to zTemp0
.9f04		85 36		sta $36				sta 	zTemp0
.9f06		b5 60		lda $60,x			lda 	NSMantissa1,x
.9f08		85 37		sta $37				sta 	zTemp0+1
.9f0a		b5 50		lda $50,x			lda 	NSStatus,x 					; clear reference bits
.9f0c		29 df		and #$df			and 	#(NSBIsReference ^ $FF)
.9f0e		95 50		sta $50,x			sta 	NSStatus,x
.9f10		29 18		and #$18			and 	#NSBTypeMask				; assigning to a float ?
.9f12		c9 08		cmp #$08			cmp 	#NSTFloat
.9f14		f0 24		beq $9f3a			beq 	_ANFloat
.9f16		b5 79		lda $79,x			lda		NSExponent+1,x 				; is it a float
.9f18		f0 03		beq $9f1d			beq		_ANNotFloat
.9f1a		4c 00 aa	jmp $aa00			jmp 	RangeError					; if it is, report an error.
.9f1d						_ANNotFloat:
.9f1d		b5 50		lda $50,x			lda 	NSStatus,x 					; check if byte/word reference.
.9f1f		29 03		and #$03			and 	#3
.9f21		d0 05		bne $9f28			bne 	_ANByteWord
.9f23		20 45 9f	jsr $9f45			jsr 	_ANCopy4PackSign 			; copy all 4 bytes and sign
.9f26		80 1b		bra $9f43			bra 	_ANExit
.9f28						_ANByteWord:
.9f28		48		pha				pha 								; save count
.9f29		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; do byte
.9f2b		92 36		sta ($36)			sta 	(zTemp0)
.9f2d		68		pla				pla
.9f2e		c9 01		cmp #$01			cmp	 	#1
.9f30		f0 11		beq $9f43			beq 	_ANExit
.9f32		b5 61		lda $61,x			lda 	NSMantissa1+1,x 			; do word
.9f34		a0 01		ldy #$01			ldy 	#1
.9f36		91 36		sta ($36),y			sta 	(zTemp0),y
.9f38		80 09		bra $9f43			bra 	_ANExit
.9f3a						_ANFloat:
.9f3a		20 45 9f	jsr $9f45			jsr 	_ANCopy4PackSign 			; write all 4 bytes and packed sign
.9f3d		b5 79		lda $79,x			lda 	NSExponent+1,x 				; copy exponent to slot 4
.9f3f		a0 04		ldy #$04			ldy 	#4
.9f41		91 36		sta ($36),y			sta 	(zTemp0),y
.9f43						_ANExit:
.9f43		7a		ply				ply
.9f44		60		rts				rts
.9f45						_ANCopy4PackSign:
.9f45		a0 03		ldy #$03			ldy 	#3
.9f47		b5 51		lda $51,x			lda 	NSStatus+1,x 				; sign bit into status
.9f49		29 80		and #$80			and 	#$80 						; put into high bit of mantissa 3
.9f4b		15 71		ora $71,x			ora 	NSMantissa3+1,x
.9f4d		91 36		sta ($36),y			sta 	(zTemp0),y
.9f4f		88		dey				dey
.9f50		b5 69		lda $69,x			lda 	NSMantissa2+1,x
.9f52		91 36		sta ($36),y			sta 	(zTemp0),y
.9f54		88		dey				dey
.9f55		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9f57		91 36		sta ($36),y			sta 	(zTemp0),y
.9f59		88		dey				dey
.9f5a		b5 59		lda $59,x			lda 	NSMantissa0+1,x
.9f5c		91 36		sta ($36),y			sta 	(zTemp0),y
.9f5e		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignstring.asm

.9f5f						AssignString:
.9f5f		5a		phy				phy
.9f60		b5 59		lda $59,x			lda 	NSMantissa0+1,x
.9f62		85 38		sta $38				sta 	zTemp1
.9f64		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9f66		85 39		sta $39				sta 	zTemp1+1
.9f68		b5 58		lda $58,x			lda 	NSMantissa0,x
.9f6a		85 36		sta $36				sta 	zTemp0
.9f6c		b5 60		lda $60,x			lda 	NSMantissa1,x
.9f6e		85 37		sta $37				sta 	zTemp0+1
.9f70		a0 01		ldy #$01			ldy 	#1 							; the high byte of the target address
.9f72		b1 36		lda ($36),y			lda 	(zTemp0),y
.9f74		f0 23		beq $9f99			beq 	_ASNewStringRequired 		; if zero, a new string is required.
.9f76		38		sec				sec 								; put Address-2 in zsTemp - this is the size/status/string record
.9f77		b2 36		lda ($36)			lda 	(zTemp0) 					; of concreted strings
.9f79		e9 02		sbc #$02			sbc 	#2
.9f7b		85 3c		sta $3c				sta 	zsTemp
.9f7d		a0 01		ldy #$01			ldy 	#1
.9f7f		b1 36		lda ($36),y			lda 	(zTemp0),y
.9f81		e9 00		sbc #$00			sbc 	#0
.9f83		85 3d		sta $3d				sta 	zsTemp+1
.9f85		a0 ff		ldy #$ff			ldy 	#$FF 						; get length of new string
.9f87						_ASGetLength:
.9f87		c8		iny				iny
.9f88		b1 38		lda ($38),y			lda 	(zTemp1),y
.9f8a		d0 fb		bne $9f87			bne 	_ASGetLength
.9f8c		98		tya				tya 								; is this length <= current length
.9f8d		d2 3c		cmp ($3c)			cmp 	(zsTemp)
.9f8f		90 1e		bcc $9faf			bcc 	_ASCopyString
.9f91		f0 1c		beq $9faf			beq 	_ASCopyString
.9f93		a9 80		lda #$80			lda 	#$80 						; mark as unused.
.9f95		a0 01		ldy #$01			ldy 	#1
.9f97		91 3c		sta ($3c),y			sta 	(zsTemp),y
.9f99						_ASNewStringRequired:
.9f99		e8		inx				inx 								; concrete the new string.
.9f9a		20 e8 b0	jsr $b0e8			jsr 	StringConcrete				; (breaks zTemp1/2, not zTemp0 and zsTemp)
.9f9d		ca		dex				dex
.9f9e		18		clc				clc
.9f9f		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; copy that new address to the reference.
.9fa1		69 02		adc #$02			adc 	#2 							; add two to point at the data.
.9fa3		92 36		sta ($36)			sta 	(zTemp0)
.9fa5		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9fa7		69 00		adc #$00			adc 	#0
.9fa9		a0 01		ldy #$01			ldy 	#1
.9fab		91 36		sta ($36),y			sta 	(zTemp0),y
.9fad		80 0d		bra $9fbc			bra 	_ASExit
.9faf						_ASCopyString:
.9faf		a0 00		ldy #$00			ldy 	#0
.9fb1						_ASCopyLoop:
.9fb1		b1 38		lda ($38),y			lda 	(zTemp1),y
.9fb3		c8		iny				iny
.9fb4		c8		iny				iny
.9fb5		91 3c		sta ($3c),y			sta 	(zsTemp),y
.9fb7		88		dey				dey
.9fb8		c9 00		cmp #$00			cmp 	#0
.9fba		d0 f5		bne $9fb1			bne 	_ASCopyLoop
.9fbc						_ASExit:
.9fbc		7a		ply				ply
.9fbd		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/dereference.asm

.9fbe						DereferenceTopTwo:
.9fbe		e8		inx				inx
.9fbf		20 c3 9f	jsr $9fc3			jsr 	Dereference 				; deref x+1
.9fc2		ca		dex				dex  								; falls through to deref x
.9fc3						Dereference:
.9fc3		b5 50		lda $50,x			lda 	NSStatus,x 					; get the status byte
.9fc5		29 20		and #$20			and 	#NSBIsReference 			; is it a reference
.9fc7		f0 48		beq $a011			beq 	_DRFExit 					; not a reference, so exit.
.9fc9		5a		phy				phy
.9fca		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy address to dereference into zTemp0
.9fcc		85 36		sta $36				sta 	zTemp0
.9fce		b5 60		lda $60,x			lda 	NSMantissa1,x
.9fd0		85 37		sta $37				sta 	zTemp0+1
.9fd2		74 60		stz $60,x			stz 	NSMantissa1,x 				; clear second byte.
.9fd4		b2 36		lda ($36)			lda 	(zTemp0) 					; do the first byte
.9fd6		95 58		sta $58,x			sta 	NSMantissa0,x
.9fd8		b5 50		lda $50,x			lda 	NSStatus,x 					; get status byte.
.9fda		29 18		and #$18			and 	#NSBTypeMask 				; what type is it ?
.9fdc		c9 10		cmp #$10			cmp 	#NSTString 					; if string, dereference two
.9fde		f0 0e		beq $9fee			beq 	_DRFDereferenceTwo
.9fe0		c9 08		cmp #$08			cmp 	#NSTFloat 					; if float, do full dereference.
.9fe2		f0 2f		beq $a013			beq 	_DRFFull
.9fe4		b5 50		lda $50,x			lda 	NSStatus,x 					; must be integer - how many bytes ?
.9fe6		29 03		and #$03			and 	#3
.9fe8		f0 29		beq $a013			beq 	_DRFFull 					; the whole word
.9fea		c9 01		cmp #$01			cmp 	#1 							; is it 10 (e.g. 2 bytes)
.9fec		f0 06		beq $9ff4			beq		_DRFClear23 				; no, one byte, clear 2 & 3 and exit
.9fee						_DRFDereferenceTwo:
.9fee		a0 01		ldy #$01			ldy 	#1
.9ff0		b1 36		lda ($36),y			lda 	(zTemp0),y
.9ff2		95 60		sta $60,x			sta 	NSMantissa1,x
.9ff4						_DRFClear23:
.9ff4		74 68		stz $68,x			stz 	NSMantissa2,x 				; clear upper bytes, only read 1 or 2 bytes
.9ff6		74 70		stz $70,x			stz 	NSMantissa3,x
.9ff8		b5 50		lda $50,x			lda 	NSStatus,x 					; make it a value of that type.
.9ffa		29 18		and #$18			and 	#NSBTypeMask
.9ffc		95 50		sta $50,x			sta 	NSStatus,x 					; and fall through.
.9ffe		c9 10		cmp #$10			cmp 	#NSTString  				; is it a string
.a000		d0 0e		bne $a010			bne 	_DRFNotString
.a002		b5 58		lda $58,x			lda 	NSMantissa0,x 				; check address is zero
.a004		15 60		ora $60,x			ora 	NSMantissa1,x
.a006		d0 08		bne $a010			bne 	_DRFNotString
.a008		a9 12		lda #$12			lda 	#_DRFNullString & $FF 		; if so, return reference to ""
.a00a		95 58		sta $58,x			sta 	NSMantissa0,x
.a00c		a9 a0		lda #$a0			lda 	#_DRFNullString >> 8
.a00e		95 60		sta $60,x			sta 	NSMantissa1,x
.a010						_DRFNotString
.a010		7a		ply				ply 								; restore Y and exit
.a011						_DRFExit:
.a011		60		rts				rts
.a012						_DRFNullString:
>a012		00						.byte 	0
.a013						_DRFFull:
.a013		a0 01		ldy #$01			ldy 	#1 							; get remaining 3 bytes.
.a015		b1 36		lda ($36),y			lda 	(zTemp0),y
.a017		95 60		sta $60,x			sta 	NSMantissa1,x
.a019		c8		iny				iny
.a01a		b1 36		lda ($36),y			lda 	(zTemp0),y
.a01c		95 68		sta $68,x			sta 	NSMantissa2,x
.a01e		c8		iny				iny
.a01f		b1 36		lda ($36),y			lda 	(zTemp0),y
.a021		95 70		sta $70,x			sta 	NSMantissa3,x
.a023		74 78		stz $78,x			stz 	NSExponent,x 				; clear exponent.
.a025		b5 50		lda $50,x			lda		NSStatus,x 					; see if type is integer
.a027		29 18		and #$18			and 	#NSBTypeMask  				; type information only
.a029		95 50		sta $50,x			sta 	NSStatus,x 					; update it back.
.a02b		f0 05		beq $a032			beq 	_DRFNoExponent
.a02d		c8		iny				iny 								; if not, read the exponent as well.
.a02e		b1 36		lda ($36),y			lda 	(zTemp0),y
.a030		95 78		sta $78,x			sta 	NSExponent,x
.a032						_DRFNoExponent:
.a032		b5 70		lda $70,x			lda 	NSMantissa3,x 				; is the most significant bit set ?
.a034		10 0a		bpl $a040			bpl 	_DRFExit2 					; if not, then exit.
.a036		29 7f		and #$7f			and 	#$7F 						; clear that bit.
.a038		95 70		sta $70,x			sta 	NSMantissa3,x
.a03a		b5 50		lda $50,x			lda 	NSStatus,x 					; set the sign flag
.a03c		09 80		ora #$80			ora 	#NSBIsNegative
.a03e		95 50		sta $50,x			sta 	NSStatus,x
.a040						_DRFExit2:
.a040		7a		ply				ply
.a041		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/number.asm

=1						ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2						ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3						ESTA_Decimal = 3 							; fractional part.
.a042						EncodeNumberStart:
.a042		38		sec				sec
.a043		80 01		bra $a046			bra 	EncodeNumberContinue+1
.a045						EncodeNumberContinue:
.a045		18		clc				clc
.a046						EncodeNumber:
.a046		08		php				php 								; save reset flag.
.a047		c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.a049		f0 12		beq $a05d			beq 	_ENIsOkay
.a04b		c9 30		cmp #$30			cmp 	#"0"
.a04d		90 04		bcc $a053			bcc 	_ENBadNumber
.a04f		c9 3a		cmp #$3a			cmp 	#"9"+1
.a051		90 0a		bcc $a05d			bcc 	_ENIsOkay
.a053						_ENBadNumber:
.a053		28		plp				plp 								; throw saved reset
.a054		ad 05 04	lda $0405			lda 	encodeState 				; if in decimal mode, construct final number
.a057		c9 03		cmp #$03			cmp 	#ESTA_Decimal
.a059		f0 7b		beq $a0d6			beq 	_ENConstructFinal
.a05b						_ENFail:
.a05b		18		clc				clc 								; not allowed
.a05c		60		rts				rts
.a05d						_ENIsOkay:
.a05d		28		plp				plp 								; are we restarting
.a05e		90 15		bcc $a075			bcc 	_ENNoRestart
.a060						_ENStartEncode:
.a060		c9 2e		cmp #$2e			cmp 	#'.'						; first is decimal place, go straight to that.
.a062		f0 0c		beq $a070			beq 	_ENFirstDP
.a064		29 0f		and #$0f			and 	#15 						; put digit in mantissa, initially a single digit constant
.a066		20 58 a7	jsr $a758			jsr 	NSMSetByte 					; in single byte mode.
.a069		a9 01		lda #$01			lda 	#ESTA_Low
.a06b						_ENExitChange:
.a06b		8d 05 04	sta $0405			sta 	encodeState 				; save new state
.a06e		38		sec				sec
.a06f		60		rts				rts
.a070						_ENFirstDP:
.a070		20 56 a7	jsr $a756			jsr 	NSMSetZero 					; clear integer part
.a073		80 3c		bra $a0b1			bra 	_ESTASwitchFloat			; go straight to float and exi
.a075						_ENNoRestart:
.a075		48		pha				pha 								; save digit or DP on stack.
.a076		ad 05 04	lda $0405			lda 	encodeState 				; get current state
.a079		c9 01		cmp #$01			cmp 	#ESTA_Low
.a07b		f0 09		beq $a086			beq  	_ESTALowState
.a07d		c9 02		cmp #$02			cmp 	#ESTA_High
.a07f		f0 26		beq $a0a7			beq 	_ESTAHighState
.a081		c9 03		cmp #$03			cmp 	#ESTA_Decimal
.a083		f0 38		beq $a0bd			beq 	_ESTADecimalState
>a085		db						.byte 	$DB 						; causes a break in the emulator
.a086						_ESTALowState:
.a086		68		pla				pla 								; get value back
.a087		c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.a089		f0 26		beq $a0b1			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.a08b		29 0f		and #$0f			and 	#15 						; make digit
.a08d		8d 06 04	sta $0406			sta 	digitTemp 					; save it.
.a090		b5 58		lda $58,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.a092		0a		asl a				asl 	a
.a093		0a		asl a				asl 	a
.a094		75 58		adc $58,x			adc 	NSMantissa0,x
.a096		0a		asl a				asl 	a
.a097		6d 06 04	adc $0406			adc 	digitTemp
.a09a		95 58		sta $58,x			sta 	NSMantissa0,x
.a09c		c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.a09e		90 05		bcc $a0a5			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.a0a0		a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.a0a2		8d 05 04	sta $0405			sta 	encodeState
.a0a5						_ESTANoSwitch:
.a0a5		38		sec				sec
.a0a6		60		rts				rts
.a0a7						_ESTAHighState:
.a0a7		68		pla				pla 								; get value back
.a0a8		c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.a0aa		f0 05		beq $a0b1			beq 	_ESTASwitchFloat
.a0ac		20 0a a1	jsr $a10a			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.a0af		38		sec				sec
.a0b0		60		rts				rts
.a0b1						_ESTASwitchFloat:
.a0b1		9c 07 04	stz $0407			stz 	decimalCount 				; reset the count of digits - we divide by 10^n at the end.
.a0b4		e8		inx				inx 								; zero the decimal additive.
.a0b5		20 56 a7	jsr $a756			jsr 	NSMSetZero
.a0b8		ca		dex				dex
.a0b9		a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.a0bb		80 ae		bra $a06b			bra 	_ENExitChange
.a0bd						_ESTADecimalState:
.a0bd		68		pla				pla 								; digit.
.a0be		c9 2e		cmp #$2e			cmp 	#"." 						; fail on 2nd decimal point.
.a0c0		f0 99		beq $a05b			beq 	_ENFail
.a0c2		e8		inx				inx 								; put digit into fractional part of X+1
.a0c3		20 0a a1	jsr $a10a			jsr 	ESTAShiftDigitIntoMantissa
.a0c6		ca		dex				dex
.a0c7		ee 07 04	inc $0407			inc 	decimalCount 				; bump the count of decimals
.a0ca		ad 07 04	lda $0407			lda 	decimalCount 				; too many decimal digits.
.a0cd		c9 0b		cmp #$0b			cmp 	#11
.a0cf		f0 02		beq $a0d3			beq 	_ESTADSFail
.a0d1		38		sec				sec
.a0d2		60		rts				rts
.a0d3						_ESTADSFail:
.a0d3		4c 00 aa	jmp $aa00			jmp 	RangeError
.a0d6						_ENConstructFinal:
.a0d6		ad 07 04	lda $0407			lda 	decimalCount 				; get decimal count
.a0d9		f0 2d		beq $a108			beq 	_ENCFExit 					; no decimals
.a0db		5a		phy				phy
.a0dc		0a		asl a				asl 	a 							; x 4 and CLC
.a0dd		0a		asl a				asl 	a
.a0de		6d 07 04	adc $0407			adc 	decimalCount
.a0e1		a8		tay				tay
.a0e2		b9 bf a9	lda $a9bf,y			lda 	DecimalScalarTable-5,y 		; copy decimal scalar to X+2
.a0e5		95 5a		sta $5a,x			sta 	NSMantissa0+2,x  			; this is 10^-n
.a0e7		b9 c0 a9	lda $a9c0,y			lda 	DecimalScalarTable-5+1,y
.a0ea		95 62		sta $62,x			sta 	NSMantissa1+2,x
.a0ec		b9 c1 a9	lda $a9c1,y			lda 	DecimalScalarTable-5+2,y
.a0ef		95 6a		sta $6a,x			sta 	NSMantissa2+2,x
.a0f1		b9 c2 a9	lda $a9c2,y			lda 	DecimalScalarTable-5+3,y
.a0f4		95 72		sta $72,x			sta 	NSMantissa3+2,x
.a0f6		b9 c3 a9	lda $a9c3,y			lda 	DecimalScalarTable-5+4,y
.a0f9		95 7a		sta $7a,x			sta 	NSExponent+2,x
.a0fb		a9 08		lda #$08			lda 	#NSTFloat
.a0fd		95 52		sta $52,x			sta 	NSStatus+2,x
.a0ff		7a		ply				ply
.a100		e8		inx				inx 								; multiply decimal const by decimal scalar
.a101		20 90 9e	jsr $9e90			jsr 	FloatMultiply
.a104		ca		dex				dex
.a105		20 4b 9d	jsr $9d4b			jsr 	FloatAdd 					; add to integer part.
.a108						_ENCFExit:
.a108		18		clc				clc 								; reject the digit.
.a109		60		rts				rts
.a10a						ESTAShiftDigitIntoMantissa:
.a10a		29 0f		and #$0f			and 	#15 						; save digit
.a10c		48		pha				pha
.a10d		b5 70		lda $70,x			lda 	NSMantissa3,x 				; push mantissa on stack
.a10f		48		pha				pha
.a110		b5 68		lda $68,x			lda 	NSMantissa2,x
.a112		48		pha				pha
.a113		b5 60		lda $60,x			lda 	NSMantissa1,x
.a115		48		pha				pha
.a116		b5 58		lda $58,x			lda 	NSMantissa0,x
.a118		48		pha				pha
.a119		20 65 a7	jsr $a765			jsr 	NSMShiftLeft 				; x 2
.a11c		20 65 a7	jsr $a765			jsr 	NSMShiftLeft 				; x 4
.a11f		18		clc				clc 								; pop mantissa and add
.a120		68		pla				pla
.a121		75 58		adc $58,x			adc 	NSMantissa0,x
.a123		95 58		sta $58,x			sta 	NSMantissa0,x
.a125		68		pla				pla
.a126		75 60		adc $60,x			adc 	NSMantissa1,x
.a128		95 60		sta $60,x			sta 	NSMantissa1,x
.a12a		68		pla				pla
.a12b		75 68		adc $68,x			adc 	NSMantissa2,x
.a12d		95 68		sta $68,x			sta 	NSMantissa2,x
.a12f		68		pla				pla
.a130		75 70		adc $70,x			adc 	NSMantissa3,x
.a132		95 70		sta $70,x			sta 	NSMantissa3,x 				; x 5
.a134		20 65 a7	jsr $a765			jsr 	NSMShiftLeft 				; x 10
.a137		68		pla				pla 								; add digit
.a138		18		clc				clc
.a139		75 58		adc $58,x			adc 	NSMantissa0,x
.a13b		95 58		sta $58,x			sta 	NSMantissa0,x
.a13d		90 0a		bcc $a149			bcc 	_ESTASDExit
.a13f		f6 60		inc $60,x			inc 	NSMantissa1,x
.a141		d0 06		bne $a149			bne 	_ESTASDExit
.a143		f6 68		inc $68,x			inc 	NSMantissa2,x
.a145		d0 02		bne $a149			bne 	_ESTASDExit
.a147		f6 70		inc $70,x			inc 	NSMantissa3,x
.a149						_ESTASDExit:
.a149		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/term.asm

.a14a						EvaluateTerm:
.a14a		b1 30		lda ($30),y			lda 	(codePtr),y
.a14c		30 18		bmi $a166			bmi 	_ETCheckUnary 				; unary function ? (text ones)
.a14e		c9 40		cmp #$40			cmp 	#$40 						; 40-7F => identifier reference
.a150		b0 6c		bcs $a1be			bcs 	_ETVariable
.a152		c9 30		cmp #$30			cmp 	#'0' 						; is it a number
.a154		90 6b		bcc $a1c1			bcc 	_ETPuncUnary 				; if not it might be a punctuation unary.
.a156		c9 3a		cmp #$3a			cmp 	#'9'+1
.a158		b0 67		bcs $a1c1			bcs 	_ETPuncUnary
.a15a		20 42 a0	jsr $a042			jsr 	EncodeNumberStart 			; can't fail as it's 0-9 !
.a15d						_ETNumber:
.a15d		c8		iny				iny 								; keep encoding until we have the numbers
.a15e		b1 30		lda ($30),y			lda 	(codePtr),y
.a160		20 45 a0	jsr $a045			jsr 	EncodeNumberContinue
.a163		b0 f8		bcs $a15d			bcs 	_ETNumber 					; go back if accepted.
.a165		60		rts				rts
.a166						_ETCheckUnary:
.a166		c9 ff		cmp #$ff			cmp 	#KWC_STRING 				; string token
.a168		f0 3f		beq $a1a9			beq 	_ETString
.a16a		c9 fe		cmp #$fe			cmp 	#KWC_HEXCONST 				; hex constant.
.a16c		f0 12		beq $a180			beq 	_ETHexConstant
.a16e		c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; check it actually is a unary function
.a170		90 0b		bcc $a17d			bcc 	_ETSyntaxError
.a172		c9 ad		cmp #$ad			cmp 	#KWC_LAST_UNARY+1
.a174		b0 07		bcs $a17d			bcs 	_ETSyntaxError
.a176		da		phx				phx 								; push X on the stack
.a177		0a		asl a				asl 	a 							; put vector x 2 into X
.a178		aa		tax				tax
.a179		c8		iny				iny 								; consume unary function token
.a17a		7c cc 94	jmp ($94cc,x)			jmp 	(VectorSet0,x) 				; and do it.
.a17d						_ETSyntaxError:
.a17d		4c fb a9	jmp $a9fb			jmp 	SyntaxError
.a180						_ETHexConstant:
.a180		c8		iny				iny 								; skip #
.a181		c8		iny				iny 								; skip count
.a182		20 56 a7	jsr $a756			jsr 	NSMSetZero 					; clear result
.a185						_ETHLoop:
.a185		b1 30		lda ($30),y			lda 	(codePtr),y
.a187		c8		iny				iny 								; and consume
.a188		c9 00		cmp #$00			cmp 	#0 							; exit if zero
.a18a		f0 1c		beq $a1a8			beq 	_ETHExit
.a18c		48		pha				pha 								; save on stack.
.a18d		20 65 a7	jsr $a765			jsr 	NSMShiftLeft 				; x 2
.a190		20 65 a7	jsr $a765			jsr 	NSMShiftLeft 				; x 4
.a193		20 65 a7	jsr $a765			jsr 	NSMShiftLeft 				; x 8
.a196		20 65 a7	jsr $a765			jsr 	NSMShiftLeft 				; x 16
.a199		68		pla				pla 								; ASCII
.a19a		c9 41		cmp #$41			cmp 	#'A'
.a19c		90 02		bcc $a1a0			bcc 	_ETHNotChar
.a19e		e9 07		sbc #$07			sbc 	#7
.a1a0						_ETHNotChar:
.a1a0		29 0f		and #$0f			and 	#15 						; digit now
.a1a2		15 58		ora $58,x			ora 	NSMantissa0,x 				; put in LS Nibble
.a1a4		95 58		sta $58,x			sta 	NSMantissa0,x
.a1a6		80 dd		bra $a185			bra 	_ETHLoop 					; go round.
.a1a8						_ETHExit:
.a1a8		60		rts				rts
.a1a9						_ETString:
.a1a9		c8		iny				iny 								; look at length
.a1aa		b1 30		lda ($30),y			lda 	(codePtr),y
.a1ac		48		pha				pha
.a1ad		c8		iny				iny 								; first character
.a1ae		20 82 ac	jsr $ac82			jsr 	MemoryInline 				; put address of string at (code-Ptr),y on stack
.a1b1		68		pla				pla 								; restore count and save
.a1b2		85 36		sta $36				sta 	zTemp0
.a1b4		98		tya				tya 								; add length to Y to skip it.
.a1b5		18		clc				clc
.a1b6		65 36		adc $36				adc 	zTemp0
.a1b8		a8		tay				tay
.a1b9		a9 10		lda #$10			lda 	#NSTString 					; mark as string
.a1bb		95 50		sta $50,x			sta 	NSStatus,x
.a1bd		60		rts				rts
.a1be						_ETVariable:
.a1be		4c 13 a2	jmp $a213			jmp 	VariableHandler
.a1c1						_ETPuncUnary:
.a1c1		c8		iny				iny 								; consume the unary character
.a1c2		c9 2d		cmp #$2d			cmp 	#KWD_MINUS 					; unary minus
.a1c4		f0 2b		beq $a1f1			beq 	_ETUnaryNegate
.a1c6		c9 b8		cmp #$b8			cmp 	#KWD_AT 					; @ reference -> constant
.a1c8		f0 36		beq $a200			beq 	_ETDereference
.a1ca		c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; parenthesis
.a1cc		f0 3e		beq $a20c			beq 	_ETParenthesis
.a1ce		64 36		stz $36				stz 	zTemp0 						; zTemp0 is the indirection level.
.a1d0		c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; byte indirection (0) ?
.a1d2		f0 06		beq $a1da			beq 	_ETIndirection
.a1d4		e6 36		inc $36				inc 	zTemp0
.a1d6		c9 21		cmp #$21			cmp 	#KWD_PLING					; word indirection (1) \
.a1d8		d0 a3		bne $a17d			bne 	_ETSyntaxError
.a1da						_ETIndirection:
.a1da		a5 36		lda $36				lda 	zTemp0 						; push indirection amount (0-1) => (1-2) on the stack
.a1dc		1a		inc a				inc 	a
.a1dd		48		pha				pha
.a1de		20 4a a1	jsr $a14a			jsr 	EvaluateTerm				; evaluate the term
.a1e1		20 c3 9f	jsr $9fc3			jsr 	Dereference 				; dereference it.
.a1e4		b5 50		lda $50,x			lda 	NSStatus,x 					; must be a +ve integer.
.a1e6		d0 06		bne $a1ee			bne 	_ETTypeMismatch
.a1e8		68		pla				pla 								; indirection 1-2
.a1e9		09 20		ora #$20			ora 	#NSBIsReference 			; make it a reference.
.a1eb		95 50		sta $50,x			sta 	NSStatus,x
.a1ed		60		rts				rts
.a1ee						_ETTypeMismatch:
.a1ee		4c 05 aa	jmp $aa05			jmp 	TypeError
.a1f1						_ETUnaryNegate:
.a1f1		20 4a a1	jsr $a14a			jsr 	EvaluateTerm				; evaluate the term
.a1f4		20 c3 9f	jsr $9fc3			jsr 	Dereference 				; dereference it.
.a1f7		b5 50		lda $50,x			lda 	NSStatus,x 					; must be a number
.a1f9		29 10		and #$10			and 	#NSTString
.a1fb		d0 f1		bne $a1ee			bne 	_ETTypeMismatch
.a1fd		4c 18 a7	jmp $a718			jmp 	NSMNegate  					; just toggles the sign bit.
.a200						_ETDereference:
.a200		20 4a a1	jsr $a14a			jsr 	EvaluateTerm				; evaluate the term
.a203		b5 50		lda $50,x			lda 	NSStatus,x 					; must be a reference
.a205		29 20		and #$20			and 	#NSBIsReference
.a207		f0 e5		beq $a1ee			beq 	_ETTypeMismatch
.a209		74 50		stz $50,x			stz 	NSStatus,x 					; make it an integer address
.a20b		60		rts				rts
.a20c						_ETParenthesis:
.a20c		20 00 9d	jsr $9d00			jsr 	EvaluateExpression 			; evaluate here, from lowest precedence
.a20f		20 e3 97	jsr $97e3			jsr 	CheckRightBracket 			; check for )
.a212		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/variable.asm

.a213						VariableHandler:
.a213		b1 30		lda ($30),y			lda 	(codePtr),y
.a215		18		clc				clc
.a216		69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.a218		85 37		sta $37				sta 	zTemp0+1
.a21a		c8		iny				iny
.a21b		b1 30		lda ($30),y			lda 	(codePtr),y
.a21d		85 36		sta $36				sta 	zTemp0
.a21f		c8		iny				iny
.a220		18		clc				clc									; copy variable address+3 to mantissa
.a221		69 03		adc #$03			adc 	#3 							; this is the address of the data.
.a223		95 58		sta $58,x			sta 	NSMantissa0,x
.a225		a5 37		lda $37				lda 	zTemp0+1
.a227		69 00		adc #$00			adc 	#0
.a229		95 60		sta $60,x			sta 	NSMantissa1,x
.a22b		74 68		stz $68,x			stz 	NSMantissa2,x
.a22d		74 70		stz $70,x			stz 	NSMantissa3,x
.a22f		74 78		stz $78,x			stz 	NSExponent,x
.a231		5a		phy				phy
.a232		a0 02		ldy #$02			ldy 	#2 							; read type
.a234		b1 36		lda ($36),y			lda 	(zTemp0),y
.a236		7a		ply				ply
.a237		29 1c		and #$1c			and 	#NSBTypeMask+NSBIsArray 	; get type information
.a239		09 20		ora #$20			ora 	#NSBIsReference 			; make a reference.
.a23b		95 50		sta $50,x			sta 	NSStatus,x
.a23d		29 04		and #$04			and 	#NSBIsArray
.a23f		d0 01		bne $a242			bne 	_VHArray
.a241		60		rts				rts
.a242						_VHArray:
.a242		e8		inx				inx
.a243		20 f1 a6	jsr $a6f1			jsr 	Evaluate8BitInteger 		; get the 1st index.
.a246		a9 ff		lda #$ff			lda 	#$FF 						; set Status of X+2 to a duff value so we know if we picked it up.
.a248		95 51		sta $51,x			sta 	NSStatus+1,x
.a24a		b1 30		lda ($30),y			lda 	(codePtr),y
.a24c		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.a24e		d0 06		bne $a256			bne 	_VHNoSecondIndex
.a250		c8		iny				iny 								; skip the comma
.a251		e8		inx				inx
.a252		20 f1 a6	jsr $a6f1			jsr 	Evaluate8BitInteger 		; get the 2nd index.
.a255		ca		dex				dex
.a256						_VHNoSecondIndex:
.a256		ca		dex				dex 								; set X back.
.a257		20 e3 97	jsr $97e3			jsr 	CheckRightBracket 			; and check the right bracket.
.a25a		5a		phy				phy 								; save position
.a25b		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy record address to zaTemp (moved 6/12/22)
.a25d		85 3e		sta $3e				sta 	zaTemp
.a25f		b5 60		lda $60,x			lda 	NSMantissa1,x
.a261		85 3f		sta $3f				sta 	zaTemp+1
.a263		a0 02		ldy #$02			ldy 	#2 							; check first index is not-zero, e.g. array defined
.a265		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a267		f0 5d		beq $a2c6			beq 	_VHBadArray
.a269		a0 03		ldy #$03			ldy 	#3 							; get the second index - which is 0 if there is one index.
.a26b		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a26d		f0 02		beq $a271			beq 	_VHHas2Mask
.a26f		a9 ff		lda #$ff			lda 	#$FF
.a271						_VHHas2Mask:
.a271		d5 52		cmp $52,x			cmp 	NSStatus+2,x 				; so if they are the same there are the wrong number of indices
.a273		f0 4c		beq $a2c1			beq 	_VHBadIndex
.a275		0a		asl a				asl 	a 							; carry will be set if a second index
.a276		90 08		bcc $a280			bcc 	_VHCheckFirstIndex
.a278		a0 03		ldy #$03			ldy 	#3 			 				; check the 2nd size >= 2nd index
.a27a		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a27c		d5 5a		cmp $5a,x			cmp 	NSMantissa0+2,x
.a27e		90 41		bcc $a2c1			bcc 	_VHBadIndex
.a280						_VHCheckFirstIndex:
.a280		a0 02		ldy #$02			ldy 	#2 			 				; check the 2nd size >= 2nd index
.a282		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a284		d5 59		cmp $59,x			cmp 	NSMantissa0+1,x
.a286		90 39		bcc $a2c1			bcc 	_VHBadIndex
.a288		64 36		stz $36				stz 	zTemp0 						; clear zTemp0 (if 1 index)
.a28a		64 37		stz $37				stz 	zTemp0+1
.a28c		b5 52		lda $52,x			lda 	NSStatus+2,x 				; if only one index provided, don't need to multiply
.a28e		30 0e		bmi $a29e			bmi 	_VHNoMultiply
.a290		da		phx				phx
.a291		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; get 2nd index on stack
.a293		48		pha				pha
.a294		a0 02		ldy #$02			ldy 	#2 							; get 1st size in A
.a296		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a298		1a		inc a				inc 	a 							; add 1 for zero base
.a299		fa		plx				plx
.a29a		20 01 a7	jsr $a701			jsr 	Multiply8x8 				; calculate -> Z0
.a29d		fa		plx				plx
.a29e						_VHNoMultiply:
.a29e		18		clc				clc
.a29f		a5 36		lda $36				lda 	zTemp0
.a2a1		75 59		adc $59,x			adc 	NSMantissa0+1,x
.a2a3		85 36		sta $36				sta 	zTemp0
.a2a5		a5 37		lda $37				lda 	zTemp0+1
.a2a7		69 00		adc #$00			adc 	#0
.a2a9		85 37		sta $37				sta 	zTemp0+1
.a2ab		b5 50		lda $50,x			lda 	NSStatus,x
.a2ad		20 19 88	jsr $8819			jsr 	ScaleByBaseType
.a2b0		18		clc				clc
.a2b1		b2 3e		lda ($3e)			lda 	(zaTemp)
.a2b3		65 36		adc $36				adc 	zTemp0
.a2b5		95 58		sta $58,x			sta 	NSMantissa0,x
.a2b7		a0 01		ldy #$01			ldy 	#1
.a2b9		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a2bb		65 37		adc $37				adc 	zTemp0+1
.a2bd		95 60		sta $60,x			sta 	NSMantissa1,x
.a2bf		7a		ply				ply 								; restore position
.a2c0		60		rts				rts
.a2c1						_VHBadIndex:
.a2c1		a9 17		lda #$17		lda	#23
.a2c3		4c fc 97	jmp $97fc		jmp	ErrorHandler
.a2c6						_VHBadArray:
.a2c6		a9 18		lda #$18		lda	#24
.a2c8		4c fc 97	jmp $97fc		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/abs.asm

.a2cb						AbsUnary:
.a2cb		fa		plx				plx 								; restore stack pos
.a2cc		20 a4 a6	jsr $a6a4			jsr 	EvaluateNumber 				; get a float or int
.a2cf		20 e3 97	jsr $97e3			jsr 	CheckRightBracket
.a2d2		b5 50		lda $50,x			lda 	NSStatus,x 					; clear the sign bit
.a2d4		29 7f		and #$7f			and 	#$7F
.a2d6		95 50		sta $50,x			sta 	NSStatus,x
.a2d8		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/alloc.asm

.a2d9						AllocUnary:
.a2d9		fa		plx				plx 								; restore stack pos
.a2da		20 d6 a6	jsr $a6d6			jsr 	Evaluate16BitInteger		; get bytes required.
.a2dd		20 e3 97	jsr $97e3			jsr 	CheckRightBracket
.a2e0		da		phx				phx 								; save X/Y
.a2e1		5a		phy				phy
.a2e2		8a		txa				txa 								; copy X into Y
.a2e3		a8		tay				tay
.a2e4		b9 60 00	lda $0060,y			lda		NSMantissa1,y 				; get size into XA
.a2e7		aa		tax				tax
.a2e8		b9 58 00	lda $0058,y			lda 	NSMantissa0,y
.a2eb		20 f8 a2	jsr $a2f8			jsr 	AllocateXABytes 			; allocate memory
.a2ee		99 58 00	sta $0058,y			sta 	NSMantissa0,y 				; write address out.
.a2f1		8a		txa				txa 	 							; typing is 16 bit integer.
.a2f2		99 60 00	sta $0060,y			sta 	NSMantissa1,y
.a2f5		7a		ply				ply
.a2f6		fa		plx				plx
.a2f7		60		rts				rts
.a2f8						AllocateXABytes:
.a2f8		5a		phy				phy
.a2f9		ac 08 04	ldy $0408			ldy 	lowMemPtr 					; push current address on stack and to zTemp0
.a2fc		84 36		sty $36				sty 	zTemp0
.a2fe		5a		phy				phy
.a2ff		ac 09 04	ldy $0409			ldy 	lowMemPtr+1
.a302		84 37		sty $37				sty 	zTemp0+1
.a304		5a		phy				phy
.a305		18		clc				clc 								; add to low memory pointer
.a306		6d 08 04	adc $0408			adc 	lowMemPtr
.a309		8d 08 04	sta $0408			sta 	lowMemPtr
.a30c		8a		txa				txa
.a30d		6d 09 04	adc $0409			adc 	lowMemPtr+1
.a310		8d 09 04	sta $0409			sta 	lowMemPtr+1
.a313		b0 2f		bcs $a344			bcs 	CISSMemory
.a315		20 36 a3	jsr $a336			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.a318						_ClearMemory:
.a318		ad 08 04	lda $0408			lda 	lowMemPtr 					; cleared all memory allocated
.a31b		c5 36		cmp $36				cmp 	zTemp0
.a31d		d0 07		bne $a326			bne 	_CMClearNext
.a31f		ad 09 04	lda $0409			lda 	lowMemPtr+1
.a322		c5 37		cmp $37				cmp 	zTemp0+1
.a324		f0 0c		beq $a332			beq 	_CMExit
.a326						_CMClearNext:
.a326		a9 00		lda #$00			lda 	#0 							; clear byte, advance to next.
.a328		92 36		sta ($36)			sta 	(zTemp0)
.a32a		e6 36		inc $36				inc 	zTemp0
.a32c		d0 ea		bne $a318			bne 	_ClearMemory
.a32e		e6 37		inc $37				inc		zTemp0+1
.a330		80 e6		bra $a318			bra 	_ClearMemory
.a332						_CMExit:
.a332		fa		plx				plx
.a333		68		pla				pla
.a334		7a		ply				ply
.a335		60		rts				rts
.a336						CheckIdentifierStringSpace:
.a336		48		pha				pha
.a337		ad 09 04	lda $0409			lda 	lowMemPtr+1 				; get low memory pointer
.a33a		18		clc				clc
.a33b		69 02		adc #$02			adc 	#2 							; need at least 2 256 byte pages
.a33d		cd 0b 04	cmp $040b			cmp 	stringMemory+1 				; is it >= StringMemory
.a340		b0 02		bcs $a344			bcs 	CISSMemory
.a342		68		pla				pla
.a343		60		rts				rts
.a344						CISSMemory:
.a344		a9 06		lda #$06		lda	#6
.a346		4c fc 97	jmp $97fc		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/asc.asm

.a349						AscUnary:
.a349		fa		plx				plx 								; restore stack pos
.a34a		20 ae a6	jsr $a6ae			jsr 	EvaluateString 				; get a string
.a34d		b2 36		lda ($36)			lda 	(zTemp0)					; get/return first character
.a34f		20 58 a7	jsr $a758			jsr 	NSMSetByte 					; ASC("") will return zero.
.a352		20 e3 97	jsr $97e3			jsr 	CheckRightBracket
.a355		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/frac.asm

.a356						FracUnary:
.a356		fa		plx				plx 								; restore stack pos
.a357		20 a4 a6	jsr $a6a4			jsr 	EvaluateNumber 				; get a float or int
.a35a		20 e3 97	jsr $97e3			jsr 	CheckRightBracket
.a35d		b5 50		lda $50,x			lda 	NSStatus,x
.a35f		29 08		and #$08			and 	#NSTFloat 					; check it is a float
.a361		f0 04		beq $a367			beq 	_IUZero
.a363		20 11 9e	jsr $9e11			jsr 	FloatFractionalPart 		; if so, get the fractional part.
.a366		60		rts				rts
.a367						_IUZero:
.a367		20 56 a7	jsr $a756			jsr 	NSMSetZero
.a36a		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/int.asm

.a36b						IntUnary:
.a36b		fa		plx				plx 								; restore stack pos
.a36c		20 a4 a6	jsr $a6a4			jsr 	EvaluateNumber 				; get a float or int
.a36f		20 e3 97	jsr $97e3			jsr 	CheckRightBracket
.a372		b5 50		lda $50,x			lda 	NSStatus,x
.a374		29 08		and #$08			and 	#NSTFloat 					; check it is a float
.a376		f0 03		beq $a37b			beq 	_IUExit
.a378		20 69 9e	jsr $9e69			jsr 	FloatIntegerPart 			; if it is get the integer part.
.a37b						_IUExit:
.a37b		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/len.asm

.a37c						LenUnary:
.a37c		fa		plx				plx 								; restore stack pos
.a37d		20 ae a6	jsr $a6ae			jsr 	EvaluateString 				; get a string
.a380		5a		phy				phy
.a381		a0 00		ldy #$00			ldy 	#0 							; find length
.a383						_LenFind:
.a383		b1 36		lda ($36),y			lda 	(zTemp0),y 					; look for trailing NULL.
.a385		f0 06		beq $a38d			beq 	_LenExit
.a387		c8		iny				iny
.a388		d0 f9		bne $a383			bne 	_LenFind
.a38a		4c 00 aa	jmp $aa00			jmp 	RangeError 					; string > 255 - no trailing NULL.
.a38d						_LenExit:
.a38d		98		tya				tya		 							; return length
.a38e		20 58 a7	jsr $a758			jsr 	NSMSetByte
.a391		7a		ply				ply
.a392		20 e3 97	jsr $97e3			jsr 	CheckRightBracket
.a395		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/minmax.asm

.a396						Unary_Min:
.a396		a9 01		lda #$01			lda 	#1
.a398		80 02		bra $a39c			bra 	UnaryMinMaxMain
.a39a						Unary_Max:
.a39a		a9 ff		lda #$ff			lda 	#$FF 						; value from comparator to cause a write
.a39c						UnaryMinMaxMain:
.a39c		fa		plx				plx 								; get index on number stack
.a39d		48		pha				pha 								; save comparator
.a39e		20 9b a6	jsr $a69b			jsr 	EvaluateValue 				; get the first value.
.a3a1						_UMMMLoop:
.a3a1		b1 30		lda ($30),y			lda 	(codePtr),y
.a3a3		c9 29		cmp #$29			cmp 	#KWD_RPAREN 				; if right bracket then done.
.a3a5		f0 22		beq $a3c9			beq 	_UMMMDone
.a3a7		20 eb 97	jsr $97eb			jsr 	CheckComma 					; must be a comma
.a3aa		e8		inx				inx
.a3ab		20 9b a6	jsr $a69b			jsr 	EvaluateValue
.a3ae		ca		dex				dex
.a3af		20 39 a7	jsr $a739			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] (Compare is destructive)
.a3b2		e8		inx				inx
.a3b3		20 39 a7	jsr $a739			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2], original
.a3b6		e8		inx				inx
.a3b7		20 b3 98	jsr $98b3			jsr 	CompareBaseCode 			; part of > = < etc. code, returns 255,0 or 1
.a3ba		ca		dex				dex
.a3bb		ca		dex				dex
.a3bc		85 36		sta $36				sta 	zTemp0 						; save required result
.a3be		68		pla				pla 								; get and save comparator
.a3bf		48		pha				pha
.a3c0		c5 36		cmp $36				cmp 	zTemp0 						; if the comparator
.a3c2		d0 dd		bne $a3a1			bne 	_UMMMLoop
.a3c4		20 cc a3	jsr $a3cc			jsr 	ExpCopyAboveDown 			; copy next up slot down
.a3c7		80 d8		bra $a3a1			bra 	_UMMMLoop
.a3c9						_UMMMDone:
.a3c9		68		pla				pla 								; throw the comparator
.a3ca		c8		iny				iny 								; skip )
.a3cb		60		rts				rts
.a3cc						ExpCopyAboveDown:
.a3cc		b5 51		lda $51,x			lda 	NSStatus+1,x
.a3ce		95 50		sta $50,x			sta 	NSStatus,x
.a3d0		b5 79		lda $79,x			lda 	NSExponent+1,x
.a3d2		95 78		sta $78,x			sta 	NSExponent,x
.a3d4		b5 59		lda $59,x			lda 	NSMantissa0+1,x
.a3d6		95 58		sta $58,x			sta 	NSMantissa0,x
.a3d8		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.a3da		95 60		sta $60,x			sta 	NSMantissa1,x
.a3dc		b5 69		lda $69,x			lda 	NSMantissa2+1,x
.a3de		95 68		sta $68,x			sta 	NSMantissa2,x
.a3e0		b5 71		lda $71,x			lda 	NSMantissa3+1,x
.a3e2		95 70		sta $70,x			sta 	NSMantissa3,x
.a3e4		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/not.asm

.a3e5						Unary_Not:
.a3e5		fa		plx				plx
.a3e6		20 c3 a6	jsr $a6c3			jsr 	EvaluateInteger 			; get integer
.a3e9		20 e3 97	jsr $97e3			jsr 	CheckRightBracket
.a3ec		20 78 a7	jsr $a778			jsr 	NSMIsZero 					; zero mantissa ?
.a3ef		f0 04		beq $a3f5			beq 	_NotZero
.a3f1		20 56 a7	jsr $a756			jsr 	NSMSetZero
.a3f4		60		rts				rts
.a3f5						_NotZero:
.a3f5		4c 69 98	jmp $9869			jmp 	ReturnTrue

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/peek.asm

.a3f8						PeekByteUnary:
.a3f8		a9 01		lda #$01			lda 	#1
.a3fa		80 0a		bra $a406			bra 	PeekUnary
.a3fc						PeekWUnary:
.a3fc		a9 02		lda #$02			lda 	#2
.a3fe		80 06		bra $a406			bra 	PeekUnary
.a400						PeekLUnary:
.a400		a9 03		lda #$03			lda 	#3
.a402		80 02		bra $a406			bra 	PeekUnary
.a404						PeekDUnary:
.a404		a9 04		lda #$04			lda 	#4
.a406						PeekUnary:
.a406		fa		plx				plx 								; restore position.
.a407		48		pha				pha 								; save count to copy on stack
.a408		20 d6 a6	jsr $a6d6			jsr		Evaluate16BitInteger 		; address as constant.
.a40b		20 e3 97	jsr $97e3			jsr 	CheckRightBracket
.a40e		b5 58		lda $58,x			lda 	NSMantissa0,x 				; save mantissa in zTemp0 as address
.a410		85 36		sta $36				sta 	zTemp0
.a412		b5 60		lda $60,x			lda 	NSMantissa1,x
.a414		85 37		sta $37				sta 	zTemp0+1
.a416		20 56 a7	jsr $a756			jsr 	NSMSetZero 					; clear the result to zero.
.a419		68		pla				pla 								; count in zTemp2
.a41a		85 3a		sta $3a				sta 	zTemp2
.a41c		da		phx				phx 								; save stack position and offset of read
.a41d		5a		phy				phy
.a41e		a0 00		ldy #$00			ldy 	#0 							; byte read offset.
.a420						_PULoop:
.a420		b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next byte, write to mantissa0,x
.a422		95 58		sta $58,x			sta 	NSMantissa0,x 				; we change X not the index before it.
.a424		c8		iny				iny 								; next byte to write
.a425		8a		txa				txa 								; next byte to read - stack layout in 04data.inc
.a426		18		clc				clc
.a427		69 08		adc #$08			adc 	#MathStackSize
.a429		aa		tax				tax
.a42a		c6 3a		dec $3a				dec 	zTemp2 						; done them all
.a42c		d0 f2		bne $a420			bne 	_PULoop
.a42e		7a		ply				ply 								; restore stack/code pos and exit.
.a42f		fa		plx				plx
.a430		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/sgn.asm

.a431						SgnUnary:
.a431		fa		plx				plx 								; restore stack pos
.a432		20 a4 a6	jsr $a6a4			jsr 	EvaluateNumber 				; get a float or int
.a435		20 e3 97	jsr $97e3			jsr 	CheckRightBracket
.a438		20 78 a7	jsr $a778			jsr 	NSMIsZero 					; if zero
.a43b		f0 0e		beq $a44b			beq 	_SGZero  					; return Int Zero
.a43d		b5 50		lda $50,x			lda 	NSStatus,x 					; get status w/sign
.a43f		48		pha				pha
.a440		a9 01		lda #$01			lda 	#1 							; set to 1
.a442		20 58 a7	jsr $a758			jsr 	NSMSetByte
.a445		68		pla				pla
.a446		29 80		and #$80			and		#$80 						; copy the sign byte out
.a448		95 50		sta $50,x			sta 	NSStatus,x  				; so it will be -1 or 1
.a44a		60		rts				rts
.a44b		20 56 a7	jsr $a756	_SGZero:jsr 	NSMSetZero
.a44e		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/val.asm

.a44f						ValUnary:
.a44f		fa		plx				plx 								; restore stack pos
.a450		20 65 a4	jsr $a465			jsr 	ValMainCode 				; do the main val() code
.a453		b0 01		bcs $a456			bcs 	_VUError 					; couldn't convert
.a455		60		rts				rts
.a456						_VUError:
.a456		4c 05 aa	jmp $aa05			jmp 	TypeError
.a459						IsValUnary:
.a459		fa		plx				plx 								; restore stack pos
.a45a		20 65 a4	jsr $a465			jsr 	ValMainCode 				; do the main val() code
.a45d		b0 03		bcs $a462			bcs 	_VUBad
.a45f		4c 69 98	jmp $9869			jmp 	ReturnTrue
.a462						_VUBad:
.a462		4c 74 98	jmp $9874			jmp 	ReturnFalse
.a465						ValMainCode:
.a465		20 ae a6	jsr $a6ae			jsr 	EvaluateString 				; get a string
.a468		20 e3 97	jsr $97e3			jsr 	CheckRightBracket 			; check right bracket present
.a46b						ValEvaluateZTemp0:
.a46b		5a		phy				phy
.a46c		b2 36		lda ($36)			lda 	(zTemp0) 					; check not empty string
.a46e		f0 17		beq $a487			beq 	_VMCFail2
.a470		a0 ff		ldy #$ff			ldy 	#$FF 						; start position
.a472		48		pha				pha 								; save first character
.a473		c9 2d		cmp #$2d			cmp 	#"-"		 				; is it - ?
.a475		d0 01		bne $a478			bne 	_VMCStart
.a477		c8		iny				iny 								; skip over -
.a478						_VMCStart:
.a478		38		sec				sec 								; initialise first time round.
.a479						_VMCNext:
.a479		c8		iny				iny 								; pre-increment
.a47a		b1 36		lda ($36),y			lda 	(zTemp0),y 					; next character = EOS ?
.a47c		f0 0c		beq $a48a			beq 	_VMCSuccess 				; successful.
.a47e		20 46 a0	jsr $a046			jsr 	EncodeNumber 				; send it to the number-builder
.a481		90 03		bcc $a486			bcc 	_VMCFail 					; if failed, give up.
.a483		18		clc				clc 								; next time round, countinue
.a484		80 f3		bra $a479			bra 	_VMCNext
.a486						_VMCFail:
.a486		68		pla				pla
.a487						_VMCFail2:
.a487		7a		ply				ply
.a488		38		sec				sec
.a489		60		rts				rts
.a48a						_VMCSuccess:
.a48a		a9 00		lda #$00			lda 	#0 							; construct final
.a48c		20 46 a0	jsr $a046			jsr 	EncodeNumber 				; by sending a duff value.
.a48f		68		pla				pla 								; if it was -ve
.a490		c9 2d		cmp #$2d			cmp 	#"-"
.a492		d0 03		bne $a497			bne 	_VMCNotNegative
.a494		20 18 a7	jsr $a718			jsr		NSMNegate 					; negate it.
.a497						_VMCNotNegative:
.a497		7a		ply				ply
.a498		18		clc				clc
.a499		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/chr.asm

.a49a						ChrUnary:
.a49a		fa		plx				plx 								; restore stack pos
.a49b		20 f1 a6	jsr $a6f1			jsr 	Evaluate8BitInteger			; get value (chr$(0) returns an empty string)
.a49e		48		pha				pha
.a49f		20 e3 97	jsr $97e3			jsr 	CheckRightBracket
.a4a2		a9 01		lda #$01			lda 	#1 							; allocate space for one char
.a4a4		20 65 b1	jsr $b165			jsr 	StringTempAllocate
.a4a7		68		pla				pla 								; write number to it
.a4a8		20 9e b1	jsr $b19e			jsr 	StringTempWrite
.a4ab		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/items.asm

.a4ac						ItemCountUnary:
.a4ac		fa		plx				plx
.a4ad		20 ae a6	jsr $a6ae			jsr 	EvaluateString
.a4b0		e8		inx				inx
.a4b1		20 24 a5	jsr $a524			jsr 	ICGetSeperator
.a4b4		ca		dex				dex
.a4b5		20 45 a5	jsr $a545			jsr 	ICSetPointer 				; zTemp0 = (string)
.a4b8		20 56 a7	jsr $a756			jsr 	NSMSetZero 					; zero the result.
.a4bb		5a		phy				phy
.a4bc		a0 ff		ldy #$ff			ldy 	#$FF 						; loop counting seperators in mantissa
.a4be						_ICULoop:
.a4be		c8		iny				iny
.a4bf		b1 36		lda ($36),y			lda 	(zTemp0),y
.a4c1		cd 95 07	cmp $0795			cmp 	ICSeperator
.a4c4		d0 02		bne $a4c8			bne 	_ICUNoMatch
.a4c6		f6 58		inc $58,x			inc 	NSMantissa0,x
.a4c8						_ICUNoMatch:
.a4c8		c9 00		cmp #$00			cmp 	#0
.a4ca		d0 f2		bne $a4be			bne 	_ICULoop
.a4cc		f6 58		inc $58,x			inc 	NSMantissa0,x 				; +1
.a4ce		7a		ply				ply
.a4cf		60		rts				rts
.a4d0						ItemGetUnary:
.a4d0		fa		plx				plx
.a4d1		20 ae a6	jsr $a6ae			jsr 	EvaluateString 				; search string
.a4d4		20 eb 97	jsr $97eb			jsr 	CheckComma
.a4d7		e8		inx				inx 								; get count
.a4d8		20 f1 a6	jsr $a6f1			jsr 	Evaluate8BitInteger
.a4db		c9 00		cmp #$00			cmp 	#0 							; must be > 0, index starts at 1.
.a4dd		f0 61		beq $a540			beq 	ICGSRange
.a4df		e8		inx				inx 								; get seperator.
.a4e0		20 24 a5	jsr $a524			jsr 	ICGetSeperator
.a4e3		ca		dex				dex
.a4e4		ca		dex				dex
.a4e5		5a		phy				phy
.a4e6		20 45 a5	jsr $a545			jsr 	ICSetPointer 				; zTemp0 points to string.
.a4e9		a0 00		ldy #$00			ldy 	#0
.a4eb		d6 59		dec $59,x			dec 	NSMantissa0+1,x 			; first element.
.a4ed		f0 0e		beq $a4fd			beq 	_IGUFoundStart
.a4ef						_IGUFindNext:
.a4ef		b1 36		lda ($36),y			lda 	(zTemp0),y		 			; next
.a4f1		f0 4d		beq $a540			beq 	ICGSRange 					; eol, not found.
.a4f3		c8		iny				iny
.a4f4		cd 95 07	cmp $0795			cmp 	ICSeperator 				; until found a seperator (or EOS)
.a4f7		d0 f6		bne $a4ef			bne 	_IGUFindNext
.a4f9		d6 59		dec $59,x			dec 	NSMantissa0+1,x
.a4fb		d0 f2		bne $a4ef			bne 	_IGUFindNext
.a4fd						_IGUFoundStart:
.a4fd		84 38		sty $38				sty 	zTemp1 						; save start
.a4ff		88		dey				dey
.a500						_IGUFindLength:
.a500		c8		iny				iny 								; forward till seperator/EOS
.a501		b1 36		lda ($36),y			lda 	(zTemp0),y
.a503		f0 05		beq $a50a			beq 	_IGUFoundLength
.a505		cd 95 07	cmp $0795			cmp 	ICSeperator
.a508		d0 f6		bne $a500			bne 	_IGUFindLength
.a50a						_IGUFoundLength:
.a50a		84 39		sty $39				sty 	zTemp1+1 					; save end of copy string
.a50c		98		tya				tya 								; calculate length of new string.
.a50d		38		sec				sec
.a50e		e5 38		sbc $38				sbc 	zTemp1
.a510		20 65 b1	jsr $b165			jsr 	StringTempAllocate 			; allocate bytes for it.
.a513		a4 38		ldy $38				ldy 	zTemp1
.a515						_IGUCopySub:
.a515		c4 39		cpy $39				cpy 	zTemp1+1
.a517		f0 08		beq $a521			beq 	_IGUCopyOver
.a519		b1 36		lda ($36),y			lda 	(zTemp0),y
.a51b		20 9e b1	jsr $b19e			jsr 	StringTempWrite
.a51e		c8		iny				iny
.a51f		80 f4		bra $a515			bra 	_IGUCopySub
.a521						_IGUCopyOver:
.a521		7a		ply				ply
.a522		60		rts				rts
>a523		db						.byte 	$DB 						; causes a break in the emulator
.a524						ICGetSeperator:
.a524		20 eb 97	jsr $97eb			jsr 	CheckComma 					; preceding comma
.a527		20 ae a6	jsr $a6ae			jsr 	EvaluateString 				; seperator string
.a52a		20 45 a5	jsr $a545			jsr 	ICSetPointer 				; access it
.a52d		b2 36		lda ($36)			lda 	(zTemp0) 					; get sep char
.a52f		8d 95 07	sta $0795			sta 	ICSeperator
.a532		f0 0c		beq $a540			beq 	ICGSRange 					; check LEN(seperator) = 1
.a534		5a		phy				phy
.a535		a0 01		ldy #$01			ldy 	#1
.a537		b1 36		lda ($36),y			lda 	(zTemp0),y
.a539		d0 05		bne $a540			bne 	ICGSRange
.a53b		7a		ply				ply
.a53c		20 e3 97	jsr $97e3			jsr 	CheckRightBracket 			; check following )
.a53f		60		rts				rts
.a540						ICGSRange:
.a540		a9 04		lda #$04		lda	#4
.a542		4c fc 97	jmp $97fc		jmp	ErrorHandler
.a545						ICSetPointer:
.a545		b5 58		lda $58,x			lda 	NSMantissa0,x 				; set zTemp0 to point to it.
.a547		85 36		sta $36				sta 	zTemp0
.a549		b5 60		lda $60,x			lda 	NSMantissa1,x
.a54b		85 37		sta $37				sta 	zTemp0+1
.a54d		60		rts				rts
.0795						ICSeperator:
>0795								.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/spc.asm

.a54e						SpcUnary:
.a54e		fa		plx				plx 								; restore stack pos
.a54f		20 f1 a6	jsr $a6f1			jsr 	Evaluate8BitInteger			; get value
.a552		5a		phy				phy
.a553		48		pha				pha 								; save count
.a554		20 65 b1	jsr $b165			jsr 	StringTempAllocate
.a557		7a		ply				ply 								; to do count in Y
.a558						_SpcLoop:
.a558		c0 00		cpy #$00			cpy 	#0 							; copy Y spaces in.
.a55a		f0 08		beq $a564			beq 	_SpcExit
.a55c		a9 20		lda #$20			lda 	#32
.a55e		20 9e b1	jsr $b19e			jsr 	StringTempWrite
.a561		88		dey				dey
.a562		80 f4		bra $a558			bra 	_SpcLoop
.a564						_SpcExit:
.a564		7a		ply				ply
.a565		20 e3 97	jsr $97e3			jsr 	CheckRightBracket
.a568		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/str.asm

.a569						Unary_Str:
.a569		fa		plx				plx
.a56a		20 a4 a6	jsr $a6a4			jsr 	EvaluateNumber  			; get number
.a56d		20 e3 97	jsr $97e3			jsr 	CheckRightBracket 			; closing bracket
.a570		a9 05		lda #$05			lda 	#5 							; maximum decimals, from Basic816
.a572		20 8b a5	jsr $a58b			jsr 	ConvertNumberToString 		; do the conversion.
.a575		a9 21		lda #$21			lda		#33 						; create buffer
.a577		20 65 b1	jsr $b165			jsr 	StringTempAllocate 			; allocate memory
.a57a		da		phx				phx  								; copy the converted string into the buffer.
.a57b		a2 00		ldx #$00			ldx 	#0
.a57d						_USCopy:
.a57d		bd 45 06	lda $0645,x			lda 	decimalBuffer,x
.a580		20 9e b1	jsr $b19e			jsr 	StringTempWrite
.a583		e8		inx				inx
.a584		bd 45 06	lda $0645,x			lda 	decimalBuffer,x
.a587		d0 f4		bne $a57d			bne 	_USCopy
.a589		fa		plx				plx
.a58a		60		rts				rts
.a58b						ConvertNumberToString:
.a58b		5a		phy				phy 								; save code position
.a58c		8d 10 04	sta $0410			sta 	decimalPlaces	 			; save number of DPs.
.a58f		9c 11 04	stz $0411			stz 	dbOffset 					; offset into decimal buffer = start.
.a592		b5 50		lda $50,x			lda 	NSStatus,x  				; is it -ve.
.a594		10 09		bpl $a59f			bpl 	_CNTSNotNegative
.a596		29 7f		and #$7f			and 	#$7F 						; make +ve
.a598		95 50		sta $50,x			sta 	NSStatus,x
.a59a		a9 2d		lda #$2d			lda 	#"-"
.a59c		20 00 a6	jsr $a600			jsr 	WriteDecimalBuffer
.a59f						_CNTSNotNegative:
.a59f		b5 78		lda $78,x			lda 	NSExponent,x 				; check if decimal
.a5a1		f0 12		beq $a5b5			beq 	_CNTSNotFloat
.a5a3		e8		inx				inx 								; round up so we don't get too many 6.999999
.a5a4		a9 01		lda #$01			lda 	#1
.a5a6		20 58 a7	jsr $a758			jsr 	NSMSetByte
.a5a9		ca		dex				dex
.a5aa		b5 78		lda $78,x			lda		NSExponent,x
.a5ac		95 79		sta $79,x			sta 	NSExponent+1,x
.a5ae		a9 08		lda #$08			lda 	#NSTFloat
.a5b0		95 51		sta $51,x			sta 	NSStatus+1,x
.a5b2		20 4b 9d	jsr $9d4b			jsr 	FloatAdd
.a5b5						_CNTSNotFloat:
.a5b5		20 e2 a5	jsr $a5e2			jsr 	MakePlusTwoString 			; do the integer part.
.a5b8		20 11 9e	jsr $9e11			jsr 	FloatFractionalPart 		; get the fractional part
.a5bb		20 c2 9e	jsr $9ec2			jsr 	NSNormalise					; normalise , exit if zero
.a5be		f0 20		beq $a5e0			beq 	_CNTSExit
.a5c0		a9 2e		lda #$2e			lda 	#"."
.a5c2		20 00 a6	jsr $a600			jsr 	WriteDecimalBuffer 			; write decimal place
.a5c5						_CNTSDecimal:
.a5c5		ce 10 04	dec $0410			dec 	decimalPlaces 				; done all the decimals
.a5c8		30 16		bmi $a5e0			bmi 	_CNTSExit
.a5ca		e8		inx				inx 								; x 10.0
.a5cb		a9 0a		lda #$0a			lda 	#10
.a5cd		20 58 a7	jsr $a758			jsr 	NSMSetByte
.a5d0		a9 08		lda #$08			lda 	#NSTFloat
.a5d2		95 50		sta $50,x			sta 	NSStatus,x
.a5d4		ca		dex				dex
.a5d5		20 90 9e	jsr $9e90			jsr 	FloatMultiply
.a5d8		20 e2 a5	jsr $a5e2			jsr 	MakePlusTwoString 			; put the integer e.g. next digit out.
.a5db		20 11 9e	jsr $9e11			jsr 	FloatFractionalPart 		; get the fractional part
.a5de		80 e5		bra $a5c5			bra 	_CNTSDecimal 				; keep going.
.a5e0						_CNTSExit:
.a5e0		7a		ply				ply
.a5e1		60		rts				rts
.a5e2						MakePlusTwoString:
.a5e2		da		phx				phx
.a5e3		20 39 a7	jsr $a739			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.a5e6		e8		inx				inx 								; access it
.a5e7		e8		inx				inx
.a5e8		20 69 9e	jsr $9e69			jsr 	FloatIntegerPart 			; make it an integer
.a5eb		a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.a5ed		20 7b 9c	jsr $9c7b			jsr 	ConvertInt32
.a5f0		a2 00		ldx #$00			ldx	 	#0 							; write that to the decimal buffer.
.a5f2						_MPTSCopy:
.a5f2		bd 23 06	lda $0623,x			lda 	numberBuffer,x
.a5f5		20 00 a6	jsr $a600			jsr 	WriteDecimalBuffer
.a5f8		e8		inx				inx
.a5f9		bd 23 06	lda $0623,x			lda 	numberBuffer,x
.a5fc		d0 f4		bne $a5f2			bne 	_MPTSCopy
.a5fe		fa		plx				plx
.a5ff		60		rts				rts
.a600						WriteDecimalBuffer:
.a600		da		phx				phx
.a601		ae 11 04	ldx $0411			ldx 	dbOffset
.a604		9d 45 06	sta $0645,x			sta 	decimalBuffer,x
.a607		9e 46 06	stz $0646,x			stz 	decimalBuffer+1,x
.a60a		ee 11 04	inc $0411			inc 	dbOffset
.a60d		fa		plx				plx
.a60e		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/substring.asm

.a60f						Unary_Left:
.a60f		fa		plx				plx
.a610		18		clc				clc 								; only one parameter
.a611		20 74 a6	jsr $a674			jsr 	SubstringInitial 			; set up.
.a614		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; Param #1 is the length
.a616		95 5a		sta $5a,x			sta 	NSMantissa0+2,x
.a618		74 59		stz $59,x			stz 	NSMantissa0+1,x 			; Start is zero.
.a61a		80 25		bra $a641			bra 	SubstringMain
.a61c						Unary_Right:
.a61c		fa		plx				plx
.a61d		18		clc				clc 								; only one parameter
.a61e		20 74 a6	jsr $a674			jsr 	SubstringInitial 			; set up.
.a621		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; length => param 2
.a623		95 5a		sta $5a,x			sta 	NSMantissa0+2,x
.a625		b5 78		lda $78,x			lda 	NSExponent,x 				; total length
.a627		f5 59		sbc $59,x			sbc 	NSMantissa0+1,x 			; length - required.
.a629		b0 02		bcs $a62d			bcs 	_URNotUnderflow
.a62b		a9 00		lda #$00			lda 	#0 							; start from the beginning, as something like right$("AB",3)
.a62d						_URNotUnderflow:
.a62d		95 59		sta $59,x			sta 	NSMantissa0+1,x 			; this is the start position
.a62f		80 10		bra $a641			bra 	SubstringMain
.a631						Unary_Mid:
.a631		fa		plx				plx
.a632		38		sec				sec 								; two parameters
.a633		20 74 a6	jsr $a674			jsr 	SubstringInitial 			; set up.
.a636		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; first parameter is zero ?
.a638		f0 04		beq $a63e			beq 	_UMError
.a63a		d6 59		dec $59,x			dec 	NSMantissa0+1,x				; reduce initial offset by 1 as MID$(a$,1..) is actually the first character
.a63c		80 03		bra $a641			bra 	SubstringMain
.a63e						_UMError:
.a63e		4c 0a aa	jmp $aa0a			jmp 	ArgumentError
.a641						SubstringMain:
.a641		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; is the initial offset >= the length
.a643		d5 78		cmp $78,x			cmp 	NSExponent,x
.a645		b0 27		bcs $a66e			bcs 	_SSMNull 					; if so, return an empty string.
.a647		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; if copy count is zero
.a649		f0 23		beq $a66e			beq 	_SSMNull 					; return empty string.
.a64b		18		clc				clc 								; add the offset +1 to the address and
.a64c		b5 58		lda $58,x			lda	 	NSMantissa0,x 				; put in zTemp, this is the start of the substring to copy.
.a64e		75 59		adc $59,x			adc 	NSMantissa0+1,x
.a650		85 36		sta $36				sta 	zTemp0
.a652		b5 60		lda $60,x			lda	 	NSMantissa1,x
.a654		69 00		adc #$00			adc 	#0
.a656		85 37		sta $37				sta 	zTemp0+1
.a658						_SSMNoCarry:
.a658		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; characters required.
.a65a		20 65 b1	jsr $b165			jsr 	StringTempAllocate 			; allocate that many characters
.a65d		5a		phy				phy 								; save Y
.a65e		a0 00		ldy #$00			ldy 	#0 							; start copying in.
.a660						_SSMCopy:
.a660		b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next character
.a662		f0 08		beq $a66c			beq 	_SSMEString 				; no more to copy
.a664		20 9e b1	jsr $b19e			jsr 	StringTempWrite 			; and write it out.
.a667		c8		iny				iny
.a668		d6 5a		dec $5a,x			dec 	NSMantissa0+2,x
.a66a		d0 f4		bne $a660			bne 	_SSMCopy
.a66c						_SSMEString:
.a66c		7a		ply				ply
.a66d						_SSMExit:
.a66d		60		rts				rts
.a66e						_SSMNull:
.a66e		a9 00		lda #$00			lda 	#0
.a670		20 65 b1	jsr $b165			jsr 	StringTempAllocate
.a673		60		rts				rts
.a674						SubstringInitial:
.a674		da		phx				phx 								; save initial stack position
.a675		08		php				php 								; save carry on stack indicating 2 parameters
.a676		20 ae a6	jsr $a6ae			jsr 	EvaluateString 				; get a string
.a679		5a		phy				phy 								; calculate length to exponent.
.a67a		a0 ff		ldy #$ff			ldy 	#$FF
.a67c						_SIFindLength:
.a67c		c8		iny				iny
.a67d		b1 36		lda ($36),y			lda 	(zTemp0),y
.a67f		d0 fb		bne $a67c			bne 	_SIFindLength
.a681		98		tya				tya
.a682		95 78		sta $78,x			sta 	NSExponent,x
.a684		7a		ply				ply
.a685		e8		inx				inx
.a686		20 eb 97	jsr $97eb			jsr 	CheckComma 					; comma next
.a689		20 f1 a6	jsr $a6f1			jsr 	Evaluate8BitInteger 		; get next parameter
.a68c		28		plp				plp 								; is it the last parameter ?
.a68d		90 07		bcc $a696			bcc 	_SSIExit 					; if so, exit.
.a68f		e8		inx				inx
.a690		20 eb 97	jsr $97eb			jsr 	CheckComma 					; comma next
.a693		20 f1 a6	jsr $a6f1			jsr 	Evaluate8BitInteger 		; get last parameter
.a696						_SSIExit:
.a696		fa		plx				plx
.a697		20 e3 97	jsr $97e3			jsr 	CheckRightBracket 			; check closing bracket
.a69a		60		rts				rts 								; exit

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/exprhelper.asm

.a69b						EvaluateValue:
.a69b		48		pha				pha
.a69c		20 00 9d	jsr $9d00			jsr		EvaluateExpression 			; expression
.a69f		20 c3 9f	jsr $9fc3			jsr 	Dereference					; derefernce it
.a6a2		68		pla				pla
.a6a3		60		rts				rts
.a6a4						EvaluateNumber:
.a6a4		20 9b a6	jsr $a69b			jsr 	EvaluateValue 				; get a value
.a6a7		b5 50		lda $50,x			lda 	NSStatus,x 					; check if string.
.a6a9		29 10		and #$10			and 	#NSBIsString
.a6ab		d0 13		bne $a6c0			bne 	HelperTypeError
.a6ad		60		rts				rts
.a6ae						EvaluateString:
.a6ae		20 9b a6	jsr $a69b			jsr 	EvaluateValue 				; get a value
.a6b1		b5 50		lda $50,x			lda 	NSStatus,x 					; check if string.
.a6b3		29 10		and #$10			and 	#NSBIsString
.a6b5		f0 09		beq $a6c0			beq 	HelperTypeError
.a6b7						CopyAddressToTemp0:
.a6b7		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy address -> zTemp0
.a6b9		85 36		sta $36				sta 	zTemp0 						; (so we can do something with it)
.a6bb		b5 60		lda $60,x			lda 	NSMantissa1,x
.a6bd		85 37		sta $37				sta 	zTemp0+1
.a6bf		60		rts				rts
.a6c0						HelperTypeError:
.a6c0		4c 05 aa	jmp $aa05			jmp 	TypeError
.a6c3						EvaluateInteger:
.a6c3		20 a4 a6	jsr $a6a4			jsr 	EvaluateNumber
.a6c6		b5 78		lda $78,x			lda 	NSExponent,x 				; check exponent is zero
.a6c8		d0 09		bne $a6d3			bne 	HelperValueError 			; if not, it's a float.
.a6ca		60		rts				rts
.a6cb						EvaluateUnsignedInteger:
.a6cb		20 c3 a6	jsr $a6c3			jsr 	EvaluateInteger 			; check integer is +ve
.a6ce		b5 50		lda $50,x			lda 	NSStatus,x
.a6d0		30 01		bmi $a6d3			bmi 	HelperValueError
.a6d2		60		rts				rts
.a6d3						HelperValueError:
.a6d3		4c 0a aa	jmp $aa0a			jmp 	ArgumentError
.a6d6						Evaluate16BitInteger:
.a6d6		20 cb a6	jsr $a6cb			jsr	 	EvaluateUnsignedInteger		; get integer
.a6d9		b5 70		lda $70,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.a6db		15 68		ora $68,x			ora 	NSMantissa2,x
.a6dd		d0 f4		bne $a6d3			bne 	HelperValueError
.a6df		60		rts				rts
.a6e0						Evaluate16BitIntegerSigned:
.a6e0		20 c3 a6	jsr $a6c3			jsr	 	EvaluateInteger				; get integer
.a6e3		b5 70		lda $70,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.a6e5		15 68		ora $68,x			ora 	NSMantissa2,x
.a6e7		d0 ea		bne $a6d3			bne 	HelperValueError
.a6e9		b5 50		lda $50,x			lda 	NSStatus,x 					; signed ?
.a6eb		10 03		bpl $a6f0			bpl 	_EISNotSigned
.a6ed		20 1f a7	jsr $a71f			jsr 	NSMNegateMantissa 			; makes it an actual 2's complement value.
.a6f0						_EISNotSigned:
.a6f0		60		rts				rts
.a6f1						Evaluate8BitInteger:
.a6f1		20 cb a6	jsr $a6cb			jsr	 	EvaluateUnsignedInteger 	; get an integer
.a6f4		d0 dd		bne $a6d3			bne 	HelperValueError
.a6f6		b5 70		lda $70,x			lda 	NSMantissa3,x	 			; bytes 1, 2 & 3 must be zero
.a6f8		15 68		ora $68,x			ora 	NSMantissa2,x
.a6fa		15 60		ora $60,x			ora 	NSMantissa1,x
.a6fc		d0 d5		bne $a6d3			bne 	HelperValueError
.a6fe		b5 58		lda $58,x			lda 	NSMantissa0,x
.a700		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/mult8x8.asm

.a701						Multiply8x8:
.a701		4a		lsr a		  		lsr 	a  							; prime the carry bit for the loop
.a702		85 36		sta $36			  	sta 	zTemp0
.a704		86 37		stx $37				stx 	zTemp0+1
.a706		a9 00		lda #$00			lda 	#0
.a708		a2 08		ldx #$08			ldx 	#8
.a70a						_M88Loop:
.a70a		90 03		bcc $a70f			bcc 	_M88NoAdd
.a70c		18		clc				clc
.a70d		65 37		adc $37				adc 	zTemp0+1
.a70f						_M88NoAdd:
.a70f		6a		ror a				ror 	a
.a710		66 36		ror $36				ror 	zTemp0  					; pull another bit out for the next iteration
.a712		ca		dex				dex         						; inc/dec don't modify carry; only shifts and adds do
.a713		d0 f5		bne $a70a			bne 	_M88Loop
.a715		85 37		sta $37				sta 	zTemp0+1 					; store high 8 bits.
.a717		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/utility.asm

.a718						NSMNegate:
.a718		b5 50		lda $50,x			lda 	NSStatus,x 					; everything is sign/magnitude usually so just
.a71a		49 80		eor #$80			eor 	#NSBIsNegative  			; toggle the negative flag
.a71c		95 50		sta $50,x			sta 	NSStatus,x
.a71e		60		rts				rts
.a71f						NSMNegateMantissa:
.a71f		38		sec				sec 								; when we want an actual 32 bit 2's complement value.
.a720		a9 00		lda #$00			lda 	#0
.a722		f5 58		sbc $58,x			sbc 	NSMantissa0,x
.a724		95 58		sta $58,x			sta 	NSMantissa0,x
.a726		a9 00		lda #$00			lda 	#0
.a728		f5 60		sbc $60,x			sbc 	NSMantissa1,x
.a72a		95 60		sta $60,x			sta 	NSMantissa1,x
.a72c		a9 00		lda #$00			lda 	#0
.a72e		f5 68		sbc $68,x			sbc 	NSMantissa2,x
.a730		95 68		sta $68,x			sta 	NSMantissa2,x
.a732		a9 00		lda #$00			lda 	#0
.a734		f5 70		sbc $70,x			sbc 	NSMantissa3,x
.a736		95 70		sta $70,x			sta 	NSMantissa3,x
.a738		60		rts				rts
.a739						NSMShiftUpTwo:
.a739		b5 58		lda $58,x			lda 	NSMantissa0,x
.a73b		95 5a		sta $5a,x			sta 	NSMantissa0+2,x
.a73d		b5 60		lda $60,x			lda 	NSMantissa1,x
.a73f		95 62		sta $62,x			sta 	NSMantissa1+2,x
.a741		b5 68		lda $68,x			lda 	NSMantissa2,x
.a743		95 6a		sta $6a,x			sta 	NSMantissa2+2,x
.a745		b5 70		lda $70,x			lda 	NSMantissa3,x
.a747		95 72		sta $72,x			sta 	NSMantissa3+2,x
.a749		b5 78		lda $78,x			lda 	NSExponent,x
.a74b		95 7a		sta $7a,x			sta 	NSExponent+2,x
.a74d		b5 50		lda $50,x			lda 	NSStatus,x
.a74f		95 52		sta $52,x			sta 	NSStatus+2,x
.a751		60		rts				rts
.a752						NSMSetZeroMantissaOnly:
.a752		a9 00		lda #$00			lda 	#0
.a754		80 06		bra $a75c			bra 	NSMSetMantissa
.a756						NSMSetZero:
.a756		a9 00		lda #$00			lda 	#0
.a758						NSMSetByte:
.a758		74 78		stz $78,x			stz 	NSExponent,x 				; zero exponent, as integer.
.a75a		74 50		stz $50,x			stz 	NSStatus,x 					; status zero (integer)
.a75c						NSMSetMantissa:
.a75c		95 58		sta $58,x			sta 	NSMantissa0,x 				; mantissa
.a75e		74 60		stz $60,x			stz 	NSMantissa1,x
.a760		74 68		stz $68,x			stz 	NSMantissa2,x
.a762		74 70		stz $70,x			stz 	NSMantissa3,x
.a764		60		rts				rts
.a765						NSMShiftLeft:
.a765		18		clc				clc
.a766						NSMRotateLeft:
.a766		36 58		rol $58,x			rol 	NSMantissa0,x
.a768		36 60		rol $60,x			rol		NSMantissa1,x
.a76a		36 68		rol $68,x			rol		NSMantissa2,x
.a76c		36 70		rol $70,x			rol		NSMantissa3,x
.a76e		60		rts				rts
.a76f						NSMShiftRight:
.a76f		56 70		lsr $70,x			lsr 	NSMantissa3,x
.a771		76 68		ror $68,x			ror		NSMantissa2,x
.a773		76 60		ror $60,x			ror		NSMantissa1,x
.a775		76 58		ror $58,x			ror		NSMantissa0,x
.a777		60		rts				rts
.a778						NSMIsZero:
.a778		b5 70		lda $70,x			lda 	NSMantissa3,x
.a77a		15 68		ora $68,x			ora		NSMantissa2,x
.a77c		15 60		ora $60,x			ora		NSMantissa1,x
.a77e		15 58		ora $58,x			ora		NSMantissa0,x
.a780		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/functions/getdatetime.asm

.a781						UnaryGetTime:
.a781		a9 00		lda #$00			lda 	#0
.a783		80 02		bra $a787			bra 	UGDTMain
.a785						UnaryGetDate:
.a785		a9 03		lda #$03			lda 	#3
.a787						UGDTMain:
.a787		fa		plx				plx 								; get stack position back
.a788		48		pha				pha 								; save table offset
.a789		20 f1 a6	jsr $a6f1			jsr 	Evaluate8BitInteger			; ignored parameter
.a78c		20 e3 97	jsr $97e3			jsr 	CheckRightBracket 			; closing )
.a78f		68		pla				pla 								; table offset in A
.a790		5a		phy				phy 								; saving Y
.a791		a8		tay				tay 								; table offset in Y
.a792		a9 08		lda #$08			lda 	#8							; allocate space for 8 chars DD:MM:YY
.a794		20 65 b1	jsr $b165			jsr 	StringTempAllocate
.a797		a5 01		lda $01				lda 	1 							; save I/O table and switch to I/O page 0
.a799		48		pha				pha
.a79a		64 01		stz $01				stz 	1
.a79c		20 af a7	jsr $a7af			jsr 	UGDTDigit 					; do XX:YY:ZZ
.a79f		20 aa a7	jsr $a7aa			jsr 	UGDTColonDigit
.a7a2		20 aa a7	jsr $a7aa			jsr 	UGDTColonDigit
.a7a5		68		pla				pla 								; restore I/O select
.a7a6		85 01		sta $01				sta 	1
.a7a8		7a		ply				ply  								; restore code position
.a7a9		60		rts				rts
.a7aa						UGDTColonDigit:
.a7aa		a9 3a		lda #$3a			lda 	#':'
.a7ac		20 9e b1	jsr $b19e			jsr 	StringTempWrite
.a7af						UGDTDigit:
.a7af		da		phx				phx 								; save X
.a7b0		b9 cf a7	lda $a7cf,y			lda 	RTCROffset,y 				; get offset in RTC register
.a7b3		aa		tax				tax
.a7b4		bd 90 d6	lda $d690,x			lda 	$D690,x 					; read RTC register
.a7b7		39 d5 a7	and $a7d5,y			and 	RTCRMask,y 					; and with Mask.
.a7ba		fa		plx				plx
.a7bb		48		pha				pha 								; output in BCD
.a7bc		4a		lsr a				lsr 	a
.a7bd		4a		lsr a				lsr 	a
.a7be		4a		lsr a				lsr 	a
.a7bf		4a		lsr a				lsr 	a
.a7c0		09 30		ora #$30			ora 	#48
.a7c2		20 9e b1	jsr $b19e			jsr 	StringTempWrite
.a7c5		68		pla				pla
.a7c6		29 0f		and #$0f			and 	#15
.a7c8		09 30		ora #$30			ora 	#48
.a7ca		20 9e b1	jsr $b19e			jsr 	StringTempWrite
.a7cd		c8		iny				iny
.a7ce		60		rts				rts
.a7cf						RTCROffset:
>a7cf		04 02 00 06 09 0a				.byte 	4,2,0,6,9,10
.a7d5						RTCRMask:
>a7d5		3f 7f 7f 3f 1f 7f				.byte 	$3F,$7F,$7F,$3F,$1F,$7F

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/functions/getinkey.asm

.a7db						AscGet:
.a7db		fa		plx				plx 								; restore stack pos
.a7dc						AscGet2:
.a7dc		20 e3 97	jsr $97e3			jsr 	CheckRightBracket
.a7df		20 34 81	jsr $8134	_AGKey:	jsr 	ProcessEvents 				; any ongoing events.
.a7e2		d0 0b		bne $a7ef			bne 	_AGBreak
.a7e4		20 66 81	jsr $8166			jsr 	PopKeyboardQueue 			; wait for key.
.a7e7		c9 00		cmp #$00			cmp 	#0
.a7e9		f0 f4		beq $a7df			beq 	_AGKey
.a7eb		20 58 a7	jsr $a758			jsr 	NSMSetByte
.a7ee		60		rts				rts
.a7ef						_AGBreak:
.a7ef		a9 01		lda #$01		lda	#1
.a7f1		4c fc 97	jmp $97fc		jmp	ErrorHandler
.a7f4						AscInkey:
.a7f4		fa		plx				plx 								; restore stack pos
.a7f5						AscInkey2:
.a7f5		20 e3 97	jsr $97e3			jsr 	CheckRightBracket
.a7f8		20 66 81	jsr $8166			jsr 	PopKeyboardQueue 			; get key if any, non returns zero.
.a7fb		20 58 a7	jsr $a758			jsr 	NSMSetByte
.a7fe		60		rts				rts
.a7ff						ChrGet:
.a7ff		fa		plx				plx
.a800		20 dc a7	jsr $a7dc			jsr 	AscGet2
.a803		4c 0a a8	jmp $a80a			jmp 	GetInkeyToString
.a806						ChrInkey:
.a806		fa		plx				plx
.a807		20 f5 a7	jsr $a7f5			jsr 	AscInkey2
.a80a						GetInkeyToString:
.a80a		c9 00		cmp #$00			cmp 	#0 							; if zero, return ""
.a80c		f0 0b		beq $a819			beq 	_GKISNull
.a80e		48		pha				pha
.a80f		a9 01		lda #$01			lda 	#1 							; allocate space for one char
.a811		20 65 b1	jsr $b165			jsr 	StringTempAllocate
.a814		68		pla				pla 								; write number to it
.a815		20 9e b1	jsr $b19e			jsr 	StringTempWrite
.a818		60		rts				rts
.a819						_GKISNull:
.a819		a9 00		lda #$00			lda 	#0
.a81b		20 65 b1	jsr $b165			jsr 	StringTempAllocate
.a81e		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/functions/keydown.asm

.a81f						KeyDown:
.a81f		20 34 81	jsr $8134			jsr 	ProcessEvents 				; process outstanding events.
.a822		fa		plx				plx 								; restore stack pos
.a823		20 f1 a6	jsr $a6f1			jsr 	Evaluate8BitInteger 		; key to check.
.a826		48		pha				pha 								; check right bracket.
.a827		20 e3 97	jsr $97e3			jsr 	CheckRightBracket
.a82a		68		pla				pla
.a82b		20 44 82	jsr $8244			jsr 	KeyboardConvertXA 			; get offset and mask.
.a82e		3d 5f 06	and $065f,x			and 	KeyStatus,x 				; is it zero ?
.a831		f0 03		beq $a836			beq 	_KeyUp
.a833		4c 69 98	jmp $9869			jmp 	ReturnTrue
.a836		4c 74 98	jmp $9874	_KeyUp:	jmp 	ReturnFalse

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/functions/rnd.asm

.a839						Unary_Random:
.a839		fa		plx				plx
.a83a		20 8a a8	jsr $a88a			jsr 	URCopyToMantissa  			; put random # in mantissa
.a83d		b1 30		lda ($30),y			lda 	(codePtr),y
.a83f		c9 29		cmp #$29			cmp 	#KWD_RPAREN
.a841		f0 08		beq $a84b			beq 	_URNoModulus 				; then we return a random 30 bit number.
.a843		e8		inx				inx
.a844		20 d6 a6	jsr $a6d6			jsr 	Evaluate16BitInteger 		; put modulus value in +1
.a847		ca		dex				dex
.a848		20 bb 99	jsr $99bb			jsr 	IntegerModulusNoCheck 		; calculate modulus, so now 0 .. n-1
.a84b						_URNoModulus:
.a84b		74 50		stz $50,x			stz 	NSStatus,x 					; make it an integer positive
.a84d		74 78		stz $78,x			stz 	NSExponent,x
.a84f		20 e3 97	jsr $97e3			jsr 	CheckRightBracket
.a852		60		rts				rts
.a853						Unary_Rnd:
.a853		fa		plx				plx
.a854		20 a4 a6	jsr $a6a4			jsr 	EvaluateNumber 				; number to use.
.a857		20 e3 97	jsr $97e3			jsr 	CheckRightBracket 			; closing bracket
.a85a		b5 50		lda $50,x			lda 	NSStatus,x 					; if -ve, then seed using parameter
.a85c		10 20		bpl $a87e			bpl 	_URDontSeed
.a85e		a5 01		lda $01				lda 	1 							; switch to page 0
.a860		48		pha				pha
.a861		64 01		stz $01				stz 	1
.a863		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy - value to seed butchering it.
.a865		49 17		eor #$17			eor 	#$17
.a867		8d a4 d6	sta $d6a4			sta 	$D6A4
.a86a		b5 60		lda $60,x			lda 	NSMantissa1,x
.a86c		49 a5		eor #$a5			eor 	#$A5
.a86e		8d a5 d6	sta $d6a5			sta 	$D6A5
.a871		a9 03		lda #$03			lda 	#3 							; set bit 1 high/low to set seed.
.a873		8d a6 d6	sta $d6a6			sta 	$D6A6
.a876		a9 01		lda #$01			lda 	#1
.a878		8d a6 d6	sta $d6a6			sta 	$D6A6
.a87b		68		pla				pla
.a87c		85 01		sta $01				sta 	1
.a87e						_URDontSeed:
.a87e		20 8a a8	jsr $a88a			jsr 	URCopyToMantissa 			; copy into mantissa
.a881		a9 e2		lda #$e2			lda 	#-30 						; force into 0-1 range
.a883		95 78		sta $78,x			sta 	NSExponent,x
.a885		a9 08		lda #$08			lda 	#NSTFloat
.a887		95 50		sta $50,x			sta 	NSStatus,x 					; positive float
.a889		60		rts				rts
.a88a						URCopyToMantissa:
.a88a		a5 01		lda $01				lda 	1 							; switch to I/O page 1
.a88c		48		pha				pha
.a88d		64 01		stz $01				stz 	1
.a88f		a9 01		lda #$01			lda 	#1
.a891		8d a6 d6	sta $d6a6			sta 	$D6A6 						; enable LFSR
.a894		ad a4 d6	lda $d6a4			lda 	$D6A4
.a897		95 58		sta $58,x			sta 	NSMantissa0,x
.a899		ad a5 d6	lda $d6a5			lda 	$D6A5
.a89c		95 60		sta $60,x			sta 	NSMantissa1,x
.a89e		ad a4 d6	lda $d6a4			lda 	$D6A4
.a8a1		95 68		sta $68,x			sta 	NSMantissa2,x
.a8a3		ad a5 d6	lda $d6a5			lda 	$D6A5
.a8a6		29 3f		and #$3f			and 	#$3F 						; make legal mantissa
.a8a8		95 70		sta $70,x			sta 	NSMantissa3,x
.a8aa		68		pla				pla
.a8ab		85 01		sta $01				sta 	1
.a8ad		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/asmcore.asm

.a8ae						Assemble_ora:
.a8ae		20 42 83	jsr $8342		jsr	AssembleGroup1
>a8b1		01					.byte $01
.a8b2						Assemble_and:
.a8b2		20 42 83	jsr $8342		jsr	AssembleGroup1
>a8b5		21					.byte $21
.a8b6						Assemble_eor:
.a8b6		20 42 83	jsr $8342		jsr	AssembleGroup1
>a8b9		41					.byte $41
.a8ba						Assemble_adc:
.a8ba		20 42 83	jsr $8342		jsr	AssembleGroup1
>a8bd		61					.byte $61
.a8be						Assemble_sta:
.a8be		20 42 83	jsr $8342		jsr	AssembleGroup1
>a8c1		81					.byte $81
.a8c2						Assemble_lda:
.a8c2		20 42 83	jsr $8342		jsr	AssembleGroup1
>a8c5		a1					.byte $a1
.a8c6						Assemble_cmp:
.a8c6		20 42 83	jsr $8342		jsr	AssembleGroup1
>a8c9		c1					.byte $c1
.a8ca						Assemble_sbc:
.a8ca		20 42 83	jsr $8342		jsr	AssembleGroup1
>a8cd		e1					.byte $e1
.a8ce						Assemble_asl:
.a8ce		20 49 83	jsr $8349		jsr	AssembleGroup2
>a8d1		02					.byte $02
>a8d2		75					.byte $75
.a8d3						Assemble_rol:
.a8d3		20 49 83	jsr $8349		jsr	AssembleGroup2
>a8d6		22					.byte $22
>a8d7		75					.byte $75
.a8d8						Assemble_lsr:
.a8d8		20 49 83	jsr $8349		jsr	AssembleGroup2
>a8db		42					.byte $42
>a8dc		75					.byte $75
.a8dd						Assemble_ror:
.a8dd		20 49 83	jsr $8349		jsr	AssembleGroup2
>a8e0		62					.byte $62
>a8e1		75					.byte $75
.a8e2						Assemble_stx:
.a8e2		20 49 83	jsr $8349		jsr	AssembleGroup2
>a8e5		82					.byte $82
>a8e6		50					.byte $50
.a8e7						Assemble_ldx:
.a8e7		20 49 83	jsr $8349		jsr	AssembleGroup2
>a8ea		a2					.byte $a2
>a8eb		d0					.byte $d0
.a8ec						Assemble_dec:
.a8ec		20 49 83	jsr $8349		jsr	AssembleGroup2
>a8ef		c2					.byte $c2
>a8f0		55					.byte $55
.a8f1						Assemble_inc:
.a8f1		20 49 83	jsr $8349		jsr	AssembleGroup2
>a8f4		e2					.byte $e2
>a8f5		55					.byte $55
.a8f6						Assemble_stz:
.a8f6		20 49 83	jsr $8349		jsr	AssembleGroup2
>a8f9		60					.byte $60
>a8fa		44					.byte $44
.a8fb						Assemble_bit:
.a8fb		20 49 83	jsr $8349		jsr	AssembleGroup2
>a8fe		20					.byte $20
>a8ff		55					.byte $55
.a900						Assemble_sty:
.a900		20 49 83	jsr $8349		jsr	AssembleGroup2
>a903		80					.byte $80
>a904		54					.byte $54
.a905						Assemble_ldy:
.a905		20 49 83	jsr $8349		jsr	AssembleGroup2
>a908		a0					.byte $a0
>a909		d5					.byte $d5
.a90a						Assemble_cpy:
.a90a		20 49 83	jsr $8349		jsr	AssembleGroup2
>a90d		c0					.byte $c0
>a90e		d4					.byte $d4
.a90f						Assemble_cpx:
.a90f		20 49 83	jsr $8349		jsr	AssembleGroup2
>a912		e0					.byte $e0
>a913		d0					.byte $d0
.a914						Assemble_tsb:
.a914		20 49 83	jsr $8349		jsr	AssembleGroup2
>a917		00					.byte $00
>a918		50					.byte $50
.a919						Assemble_trb:
.a919		20 49 83	jsr $8349		jsr	AssembleGroup2
>a91c		10					.byte $10
>a91d		50					.byte $50
.a91e						Assemble_jsr:
.a91e		20 49 83	jsr $8349		jsr	AssembleGroup2
>a921		14					.byte $14
>a922		10					.byte $10
.a923						Assemble_jmp:
.a923		20 49 83	jsr $8349		jsr	AssembleGroup2
>a926		40					.byte $40
>a927		10					.byte $10
.a928						Assemble_bpl:
.a928		20 9a 83	jsr $839a		jsr	AssembleGroup3
>a92b		10					.byte $10
.a92c						Assemble_bmi:
.a92c		20 9a 83	jsr $839a		jsr	AssembleGroup3
>a92f		30					.byte $30
.a930						Assemble_bvc:
.a930		20 9a 83	jsr $839a		jsr	AssembleGroup3
>a933		50					.byte $50
.a934						Assemble_bvs:
.a934		20 9a 83	jsr $839a		jsr	AssembleGroup3
>a937		70					.byte $70
.a938						Assemble_bcc:
.a938		20 9a 83	jsr $839a		jsr	AssembleGroup3
>a93b		90					.byte $90
.a93c						Assemble_bcs:
.a93c		20 9a 83	jsr $839a		jsr	AssembleGroup3
>a93f		b0					.byte $b0
.a940						Assemble_bne:
.a940		20 9a 83	jsr $839a		jsr	AssembleGroup3
>a943		d0					.byte $d0
.a944						Assemble_beq:
.a944		20 9a 83	jsr $839a		jsr	AssembleGroup3
>a947		f0					.byte $f0
.a948						Assemble_bra:
.a948		20 9a 83	jsr $839a		jsr	AssembleGroup3
>a94b		80					.byte $80
.a94c						Assemble_brk:
.a94c		20 ce 83	jsr $83ce		jsr	AssembleGroup4
>a94f		00					.byte $00
.a950						Assemble_php:
.a950		20 ce 83	jsr $83ce		jsr	AssembleGroup4
>a953		08					.byte $08
.a954						Assemble_clc:
.a954		20 ce 83	jsr $83ce		jsr	AssembleGroup4
>a957		18					.byte $18
.a958						Assemble_plp:
.a958		20 ce 83	jsr $83ce		jsr	AssembleGroup4
>a95b		28					.byte $28
.a95c						Assemble_sec:
.a95c		20 ce 83	jsr $83ce		jsr	AssembleGroup4
>a95f		38					.byte $38
.a960						Assemble_rti:
.a960		20 ce 83	jsr $83ce		jsr	AssembleGroup4
>a963		40					.byte $40
.a964						Assemble_pha:
.a964		20 ce 83	jsr $83ce		jsr	AssembleGroup4
>a967		48					.byte $48
.a968						Assemble_cli:
.a968		20 ce 83	jsr $83ce		jsr	AssembleGroup4
>a96b		58					.byte $58
.a96c						Assemble_phy:
.a96c		20 ce 83	jsr $83ce		jsr	AssembleGroup4
>a96f		5a					.byte $5a
.a970						Assemble_rts:
.a970		20 ce 83	jsr $83ce		jsr	AssembleGroup4
>a973		60					.byte $60
.a974						Assemble_pla:
.a974		20 ce 83	jsr $83ce		jsr	AssembleGroup4
>a977		68					.byte $68
.a978						Assemble_sei:
.a978		20 ce 83	jsr $83ce		jsr	AssembleGroup4
>a97b		78					.byte $78
.a97c						Assemble_ply:
.a97c		20 ce 83	jsr $83ce		jsr	AssembleGroup4
>a97f		7a					.byte $7a
.a980						Assemble_dey:
.a980		20 ce 83	jsr $83ce		jsr	AssembleGroup4
>a983		88					.byte $88
.a984						Assemble_txa:
.a984		20 ce 83	jsr $83ce		jsr	AssembleGroup4
>a987		8a					.byte $8a
.a988						Assemble_tya:
.a988		20 ce 83	jsr $83ce		jsr	AssembleGroup4
>a98b		98					.byte $98
.a98c						Assemble_txs:
.a98c		20 ce 83	jsr $83ce		jsr	AssembleGroup4
>a98f		9a					.byte $9a
.a990						Assemble_tay:
.a990		20 ce 83	jsr $83ce		jsr	AssembleGroup4
>a993		a8					.byte $a8
.a994						Assemble_tax:
.a994		20 ce 83	jsr $83ce		jsr	AssembleGroup4
>a997		aa					.byte $aa
.a998						Assemble_clv:
.a998		20 ce 83	jsr $83ce		jsr	AssembleGroup4
>a99b		b8					.byte $b8
.a99c						Assemble_tsx:
.a99c		20 ce 83	jsr $83ce		jsr	AssembleGroup4
>a99f		ba					.byte $ba
.a9a0						Assemble_iny:
.a9a0		20 ce 83	jsr $83ce		jsr	AssembleGroup4
>a9a3		c8					.byte $c8
.a9a4						Assemble_dex:
.a9a4		20 ce 83	jsr $83ce		jsr	AssembleGroup4
>a9a7		ca					.byte $ca
.a9a8						Assemble_cld:
.a9a8		20 ce 83	jsr $83ce		jsr	AssembleGroup4
>a9ab		d8					.byte $d8
.a9ac						Assemble_phx:
.a9ac		20 ce 83	jsr $83ce		jsr	AssembleGroup4
>a9af		da					.byte $da
.a9b0						Assemble_stp:
.a9b0		20 ce 83	jsr $83ce		jsr	AssembleGroup4
>a9b3		db					.byte $db
.a9b4						Assemble_inx:
.a9b4		20 ce 83	jsr $83ce		jsr	AssembleGroup4
>a9b7		e8					.byte $e8
.a9b8						Assemble_nop:
.a9b8		20 ce 83	jsr $83ce		jsr	AssembleGroup4
>a9bb		ea					.byte $ea
.a9bc						Assemble_sed:
.a9bc		20 ce 83	jsr $83ce		jsr	AssembleGroup4
>a9bf		f8					.byte $f8
.a9c0						Assemble_plx:
.a9c0		20 ce 83	jsr $83ce		jsr	AssembleGroup4
>a9c3		fa					.byte $fa

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/constants.asm

.a9c4						DecimalScalarTable:
>a9c4		66 66 66 66				.dword $66666666 ; 0.1
>a9c8		de					.byte $de
>a9c9		1f 85 eb 51				.dword $51eb851f ; 0.01
>a9cd		db					.byte $db
>a9ce		4c 37 89 41				.dword $4189374c ; 0.001
>a9d2		d8					.byte $d8
>a9d3		ac 8b db 68				.dword $68db8bac ; 0.0001
>a9d7		d4					.byte $d4
>a9d8		24 d6 e2 53				.dword $53e2d624 ; 1e-05
>a9dc		d1					.byte $d1
>a9dd		83 de 1b 43				.dword $431bde83 ; 1e-06
>a9e1		ce					.byte $ce
>a9e2		6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>a9e6		ca					.byte $ca
>a9e7		89 3b e6 55				.dword $55e63b89 ; 1e-08
>a9eb		c7					.byte $c7
>a9ec		a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>a9f0		c4					.byte $c4
>a9f1		67 7f f3 6d				.dword $6df37f67 ; 1e-10
>a9f5		c0					.byte $c0
>a9f6		86 ff f5 57				.dword $57f5ff86 ; 1e-11
>a9fa		bd					.byte $bd

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.asm

.a9fb						SyntaxError:
.a9fb		a9 02		lda #$02		lda	#2
.a9fd		4c fc 97	jmp $97fc		jmp	ErrorHandler
.aa00						RangeError:
.aa00		a9 04		lda #$04		lda	#4
.aa02		4c fc 97	jmp $97fc		jmp	ErrorHandler
.aa05						TypeError:
.aa05		a9 05		lda #$05		lda	#5
.aa07		4c fc 97	jmp $97fc		jmp	ErrorHandler
.aa0a						ArgumentError:
.aa0a		a9 07		lda #$07		lda	#7
.aa0c		4c fc 97	jmp $97fc		jmp	ErrorHandler
.aa0f						NotDoneError:
.aa0f		a9 0c		lda #$0c		lda	#12
.aa11		4c fc 97	jmp $97fc		jmp	ErrorHandler
.aa14						ErrorText:
>aa14		42 72 65 61 6b 00			.text	"Break",0
>aa1a		53 79 6e 74 61 78 20 65			.text	"Syntax error",0
>aa22		72 72 6f 72 00
>aa27		44 69 76 69 73 69 6f 6e			.text	"Division by zero",0
>aa2f		20 62 79 20 7a 65 72 6f 00
>aa38		4f 75 74 20 6f 66 20 52			.text	"Out of Range",0
>aa40		61 6e 67 65 00
>aa45		54 79 70 65 20 6d 69 73			.text	"Type mismatch",0
>aa4d		6d 61 74 63 68 00
>aa53		4f 75 74 20 6f 66 20 6d			.text	"Out of memory",0
>aa5b		65 6d 6f 72 79 00
>aa61		49 6c 6c 65 67 61 6c 20			.text	"Illegal argument",0
>aa69		61 72 67 75 6d 65 6e 74 00
>aa72		53 74 6f 70 00				.text	"Stop",0
>aa77		53 74 72 69 6e 67 20 74			.text	"String too long",0
>aa7f		6f 6f 20 6c 6f 6e 67 00
>aa87		41 73 73 65 72 74 69 6f			.text	"Assertion failed",0
>aa8f		6e 20 66 61 69 6c 65 64 00
>aa98		4f 75 74 20 6f 66 20 64			.text	"Out of data",0
>aaa0		61 74 61 00
>aaa4		55 6e 69 6d 70 6c 65 6d			.text	"Unimplemented",0
>aaac		65 6e 74 65 64 00
>aab2		4e 6f 20 73 75 63 68 20			.text	"No such line number",0
>aaba		6c 69 6e 65 20 6e 75 6d 62 65 72 00
>aac6		52 65 74 75 72 6e 20 77			.text	"Return without Gosub",0
>aace		69 74 68 6f 75 74 20 47 6f 73 75 62 00
>aadb		55 6e 74 69 6c 20 77 69			.text	"Until without Repeat",0
>aae3		74 68 6f 75 74 20 52 65 70 65 61 74 00
>aaf0		57 65 6e 64 20 77 69 74			.text	"Wend without While",0
>aaf8		68 6f 75 74 20 57 68 69 6c 65 00
>ab03		4e 65 78 74 20 77 69 74			.text	"Next without For",0
>ab0b		68 6f 75 74 20 46 6f 72 00
>ab14		42 41 53 49 43 20 53 74			.text	"BASIC Stack full",0
>ab1c		61 63 6b 20 66 75 6c 6c 00
>ab25		4f 70 65 6e 20 53 74 72			.text	"Open Structure",0
>ab2d		75 63 74 75 72 65 00
>ab34		45 6e 64 50 72 6f 63 20			.text	"EndProc without call",0
>ab3c		77 69 74 68 6f 75 74 20 63 61 6c 6c 00
>ab49		41 72 72 61 79 20 61 6c			.text	"Array already defined",0
>ab51		72 65 61 64 79 20 64 65 66 69 6e 65 64 00
>ab5f		41 72 72 61 79 20 73 69			.text	"Array size",0
>ab67		7a 65 00
>ab6a		42 61 64 20 61 72 72 61			.text	"Bad array index",0
>ab72		79 20 69 6e 64 65 78 00
>ab7a		41 72 72 61 79 20 6e 6f			.text	"Array not declared",0
>ab82		74 20 64 65 63 6c 61 72 65 64 00
>ab8d		46 69 6c 65 20 6e 6f 74			.text	"File not found",0
>ab95		20 66 6f 75 6e 64 00
>ab9c		53 74 6f 72 61 67 65 20			.text	"Storage error",0
>aba4		65 72 72 6f 72 00
>abaa		56 65 72 69 66 79 20 66			.text	"Verify failed",0
>abb2		61 69 6c 65 64 00

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/timestamp.asm

>dc65		09 09 32 36 2f 30 31 2f			.text 9,9,"26/01/23 32"
>dc6d		32 33 20 33 32

;******  Return to file: _basic.asm


;******  Processing file: ./build/lockout.asm

.e000						StopCPU:
.e000		a9 02		lda #$02		lda 	#2
.e002		85 01		sta $01			sta 	1
.e004		80 fa		bra $e000		bra 	StopCPU
>fffa		00 e0					.word 	StopCPU
>fffc		00 e0					.word 	StopCPU
>fffe		00 e0					.word 	StopCPU

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/memory/memory.flat/delete.asm

.abb8						MemoryDeleteLine:
.abb8		20 d7 ab	jsr $abd7			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.abbb		b2 30		lda ($30)			lda 	(codePtr) 					; size to delete => y
.abbd		a8		tay				tay
.abbe						_MDDLLoop:
.abbe		b1 30		lda ($30),y			lda 	(codePtr),y 				; copy down
.abc0		92 30		sta ($30)			sta 	(codePtr)
.abc2		a5 30		lda $30				lda 	codePtr 					; check done the lot.
.abc4		c5 3a		cmp $3a				cmp 	zTemp2 						; has codePtr (copyFrom) reached the last byte to copy.
.abc6		d0 07		bne $abcf			bne 	_MDLDLNext
.abc8		a5 31		lda $31				lda 	codePtr+1
.abca		c5 3b		cmp $3b				cmp 	zTemp2+1
.abcc		d0 01		bne $abcf			bne 	_MDLDLNext
.abce						_MDDLExit:
.abce		60		rts				rts
.abcf						_MDLDLNext:
.abcf		e6 30		inc $30				inc 	codePtr						; next byte
.abd1		d0 eb		bne $abbe			bne 	_MDDLLoop
.abd3		e6 31		inc $31				inc 	codePtr+1
.abd5		80 e7		bra $abbe			bra 	_MDDLLoop
.abd7						IMemoryFindEnd:
.abd7		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.abd9		85 3a		sta $3a				sta 	0+zTemp2
.abdb		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.abdd		85 3b		sta $3b				sta 	1+zTemp2
.abdf						_MDLFELoop:
.abdf		b2 3a		lda ($3a)			lda 	(zTemp2) 					; scan forward using offsets.
.abe1		f0 0b		beq $abee			beq 	_MDLFEExit
.abe3		18		clc				clc
.abe4		65 3a		adc $3a				adc 	zTemp2
.abe6		85 3a		sta $3a				sta 	zTemp2
.abe8		90 f5		bcc $abdf			bcc 	_MDLFELoop
.abea		e6 3b		inc $3b				inc 	zTemp2+1
.abec		80 f1		bra $abdf			bra 	_MDLFELoop
.abee						_MDLFEExit:
.abee		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/memory/memory.flat/insert.asm

.abef						MemoryInsertLine:
.abef		08		php				php
.abf0		20 d7 ab	jsr $abd7			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.abf3		a5 3b		lda $3b				lda 	zTemp2+1 					; is there space for the new line ?
.abf5		1a		inc a				inc 	a
.abf6		c9 7f		cmp #$7f			cmp 	#(BasicEnd >> 8)-1
.abf8		b0 36		bcs $ac30			bcs 	_MDLIError 					; no, fail.
.abfa		28		plp				plp 								; do at a specific point or the end ?
.abfb		90 08		bcc $ac05			bcc 	_MDLIFound 					; if specific point already set.
.abfd		a5 3a		lda $3a				lda 	zTemp2 						; if CS on entry append, so put on the
.abff		85 30		sta $30				sta 	codePtr 					; end.
.ac01		a5 3b		lda $3b				lda 	zTemp2+1
.ac03		85 31		sta $31				sta 	codePtr+1
.ac05						_MDLIFound:
.ac05		ad 26 04	lda $0426			lda 	tokenOffset 				; insert gap in Y, the offset, e.g. length of the new line
.ac08		a8		tay				tay
.ac09						_MDLIInsert:
.ac09		b2 3a		lda ($3a)			lda 	(zTemp2) 					; shift one byte up , at least one covers end case (copying link 0)
.ac0b		91 3a		sta ($3a),y			sta 	(zTemp2),y 					; work from top down.
.ac0d		a5 30		lda $30				lda 	codePtr 					; reached insert point ?
.ac0f		c5 3a		cmp $3a				cmp 	zTemp2
.ac11		d0 06		bne $ac19			bne 	_MDLINext
.ac13		a5 31		lda $31				lda 	codePtr+1
.ac15		c5 3b		cmp $3b				cmp 	zTemp2+1
.ac17		f0 0a		beq $ac23			beq 	_MDLIHaveSpace
.ac19						_MDLINext:
.ac19		a5 3a		lda $3a				lda 	zTemp2 						; if no, keep zTemp2 going backwards opening up space.
.ac1b		d0 02		bne $ac1f			bne 	_MDLINoBorrow
.ac1d		c6 3b		dec $3b				dec 	zTemp2+1
.ac1f						_MDLINoBorrow:
.ac1f		c6 3a		dec $3a				dec 	zTemp2
.ac21		80 e6		bra $ac09			bra 	_MDLIInsert
.ac23						_MDLIHaveSpace:
.ac23		ac 26 04	ldy $0426			ldy 	tokenOffset 				; bytes to copy
.ac26		88		dey				dey 								; from offset-1 (last written) to the end of the buffer.
.ac27						_MDLICopy:
.ac27		b9 26 04	lda $0426,y			lda 	tokenOffset,y
.ac2a		91 30		sta ($30),y			sta 	(codePtr),y
.ac2c		88		dey				dey
.ac2d		10 f8		bpl $ac27			bpl 	_MDLICopy
.ac2f		60		rts				rts
.ac30						_MDLIError:
.ac30		a9 06		lda #$06		lda	#6
.ac32		4c fc 97	jmp $97fc		jmp	ErrorHandler
.ac35						MDLAppendLine:
.ac35		86 37		stx $37				stx 	zTemp0+1 					; save new line at zTemp0
.ac37		85 36		sta $36				sta 	zTemp0
.ac39		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.ac3b		85 38		sta $38				sta 	0+zTemp1
.ac3d		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.ac3f		85 39		sta $39				sta 	1+zTemp1
.ac41		b2 38		lda ($38)			lda 	(zTemp1)
.ac43		d0 0a		bne $ac4f			bne 	_MDLANoInitialise
.ac45		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.ac47		8d 96 07	sta $0796			sta 	0+AppendPointer
.ac4a		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.ac4c		8d 97 07	sta $0797			sta 	1+AppendPointer
.ac4f						_MDLANoInitialise:
.ac4f		18		clc				clc
.ac50		ad 96 07	lda $0796			lda 	AppendPointer 				; copy append pointer to zTemp1 adding the offset as you go
.ac53		85 38		sta $38				sta 	zTemp1
.ac55		72 36		adc ($36)			adc 	(zTemp0)
.ac57		8d 96 07	sta $0796			sta 	AppendPointer
.ac5a		ad 97 07	lda $0797			lda 	AppendPointer+1
.ac5d		85 39		sta $39				sta 	zTemp1+1
.ac5f		69 00		adc #$00			adc 	#0
.ac61		8d 97 07	sta $0797			sta 	AppendPointer+1
.ac64		a0 00		ldy #$00			ldy 	#0
.ac66						_MDLACopy:
.ac66		b1 36		lda ($36),y			lda 	(zTemp0),y 					; copy new line in
.ac68		91 38		sta ($38),y			sta 	(zTemp1),y
.ac6a		c8		iny				iny
.ac6b		98		tya				tya
.ac6c		d2 36		cmp ($36)			cmp 	(zTemp0) 					; done whole line
.ac6e		d0 f6		bne $ac66			bne 	_MDLACopy
.ac70		a9 00		lda #$00			lda 	#0 							; end of program.
.ac72		91 38		sta ($38),y			sta 	(zTemp1),y
.ac74		60		rts				rts
.0796						AppendPointer:
>0796								.fill 	2

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/memory/memory.flat/memory.asm

.ac75						MemoryNew:
.ac75		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.ac77		85 30		sta $30				sta 	codePtr
.ac79		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.ac7b		85 31		sta $31				sta 	codePtr+1
.ac7d		a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.ac7f		92 30		sta ($30)			sta 	(codePtr)
.ac81		60		rts				rts
.ac82						MemoryInline:
.ac82		98		tya				tya 								; put address into stack,x
.ac83		18		clc				clc  								; get the offset, add codePtr
.ac84		65 30		adc $30				adc 	codePtr
.ac86		95 58		sta $58,x			sta 	NSMantissa0,x 				; store the result in the mantissa.
.ac88		a5 31		lda $31				lda 	codePtr+1
.ac8a		69 00		adc #$00			adc 	#0
.ac8c		95 60		sta $60,x			sta 	NSMantissa1,x
.ac8e		74 68		stz $68,x			stz 	NSMantissa2,x
.ac90		74 70		stz $70,x			stz 	NSMantissa3,x
.ac92		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/memory/memory.flat/search.asm

.ac93						MemorySearch:
.ac93		85 36		sta $36				sta 	zTemp0 						; save line number in zTemp0
.ac95		86 37		stx $37				stx 	zTemp0+1
.ac97		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.ac99		85 30		sta $30				sta 	codePtr
.ac9b		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.ac9d		85 31		sta $31				sta 	codePtr+1
.ac9f						_MTAXLoop:
.ac9f		b2 30		lda ($30)			lda 	(codePtr)
.aca1		18		clc				clc
.aca2		f0 21		beq $acc5			beq 	_MTAXExit 					; reached end, exit with CC.
.aca4		a0 01		ldy #$01			ldy 	#1 							; calculate current line# - requested line#
.aca6		b1 30		lda ($30),y			lda 	(codePtr),y
.aca8		38		sec				sec
.aca9		e5 36		sbc $36				sbc 	zTemp0
.acab		85 38		sta $38				sta 	zTemp1 						; save interim to set Z
.acad		c8		iny				iny 								; do the MSB
.acae		b1 30		lda ($30),y			lda 	(codePtr),y
.acb0		e5 37		sbc $37				sbc 	zTemp0+1
.acb2		05 38		ora $38				ora 	zTemp1 						; will set Z if result is zero, doesn't affect carry flag
.acb4		f0 0f		beq $acc5			beq 	_MTAXExit	 				; found so exit (CS will be set)
.acb6		b0 0d		bcs $acc5			bcs 	_MTAXExit 					; current < required exit
.acb8		18		clc				clc
.acb9		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.acbb		65 30		adc $30				adc 	codePtr
.acbd		85 30		sta $30				sta 	codePtr
.acbf		90 02		bcc $acc3			bcc 	_CREExit
.acc1		e6 31		inc $31				inc 	codePtr+1 					; carry
.acc3						_CREExit:
.acc3		80 da		bra $ac9f			bra 	_MTAXLoop
.acc5						_MTAXExit:
.acc5		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/graphics/gcommand.asm

.acc6						RectangleCommand:
.acc6		a9 44		lda #$44			lda 	#GCMD_FrameRect				; frame rectangle
.acc8		80 02		bra $accc			bra 	ShapeDrawCmd
.acca						CircleCommand:
.acca		a9 48		lda #$48			lda 	#GCMD_FrameCircle 				; framed circle
.accc						ShapeDrawCmd:
.accc		20 56 ad	jsr $ad56			jsr 	RunGraphicsCommand
.accf						ShapeDraw:
.accf		0d 99 07	ora $0799			ora 	gxFillSolid  				; adjust AXY for solid fill.
.acd2		4c 4a ad	jmp $ad4a			jmp 	ExecuteGraphicCommand	 	; and complete
.acd5						SpriteCommand:
.acd5		a2 00		ldx #$00			ldx 	#0
.acd7		20 f1 a6	jsr $a6f1			jsr 	Evaluate8BitInteger 		; get image number.
.acda		5a		phy				phy
.acdb		a9 0e		lda #$0e			lda 	#GCMD_SpriteUse 			; use that image.
.acdd		a6 58		ldx $58				ldx 	NSMantissa0
.acdf		e0 40		cpx #$40			cpx 	#64 						; 0-63 only
.ace1		b0 0d		bcs $acf0			bcs 	_SCRange
.ace3		a0 ff		ldy #$ff			ldy 	#255
.ace5		20 6b 80	jsr $806b			jsr 	GXGraphicDraw
.ace8		a9 52		lda #$52			lda 	#GCMD_SpriteMove
.acea		7a		ply				ply
.aceb		20 56 ad	jsr $ad56			jsr 	RunGraphicsCommand
.acee		80 5a		bra $ad4a			bra 	ExecuteGraphicCommand
.acf0						_SCRange:
.acf0		4c 00 aa	jmp $aa00			jmp 	RangeError
.acf3						ImageCommand:
.acf3		a2 00		ldx #$00			ldx 	#0
.acf5		20 f1 a6	jsr $a6f1			jsr 	Evaluate8BitInteger 		; get image number.
.acf8		20 56 ad	jsr $ad56			jsr 	RunGraphicsCommand
.acfb						ImageRunDraw:
.acfb		09 40		ora #$40			ora 	#GCMD_Move					; move cursor
.acfd		20 6b 80	jsr $806b			jsr 	GXGraphicDraw
.ad00		ad 9f 07	lda $079f			lda 	gxDrawScale
.ad03		0a		asl a				asl 	a
.ad04		0a		asl a				asl 	a
.ad05		0a		asl a				asl 	a
.ad06		a8		tay				tay
.ad07		a9 0c		lda #$0c			lda 	#GCMD_DrawSprite 			; image drawing
.ad09		a6 58		ldx $58				ldx 	NSMantissa0
.ad0b		20 6b 80	jsr $806b			jsr 	GXGraphicDraw
.ad0e		60		rts				rts
.ad0f						TextCommand:
.ad0f		a2 00		ldx #$00			ldx 	#0
.ad11		20 ae a6	jsr $a6ae			jsr 	EvaluateString 				; get text
.ad14		20 56 ad	jsr $ad56			jsr 	RunGraphicsCommand
.ad17						TextRunDraw:
.ad17		09 40		ora #$40			ora 	#GCMD_Move 					; move cursor
.ad19		20 6b 80	jsr $806b			jsr 	GXGraphicDraw
.ad1c		a0 00		ldy #$00			ldy 	#0
.ad1e						_IRDLoop:
.ad1e		a5 60		lda $60				lda 	NSMantissa1 				; access character
.ad20		85 37		sta $37				sta 	zTemp0+1
.ad22		a5 58		lda $58				lda 	NSMantissa0
.ad24		85 36		sta $36				sta 	zTemp0
.ad26		b1 36		lda ($36),y			lda 	(zTemp0),y
.ad28		f0 13		beq $ad3d			beq 	_IRDExit
.ad2a		5a		phy				phy									; save string pos
.ad2b		48		pha				pha 								; save char
.ad2c		ad 9f 07	lda $079f			lda 	gxDrawScale 				; get scale
.ad2f		0a		asl a				asl 	a
.ad30		0a		asl a				asl 	a
.ad31		0a		asl a				asl 	a
.ad32		a8		tay				tay
.ad33		a9 0a		lda #$0a			lda 	#GCMD_DrawFont 				; char drawing
.ad35		fa		plx				plx 								; char to draw
.ad36		20 6b 80	jsr $806b			jsr 	GXGraphicDraw
.ad39		7a		ply				ply 								; restore string pos
.ad3a		c8		iny				iny
.ad3b		90 e1		bcc $ad1e			bcc 	_IRDLoop 					; go back if no error.
.ad3d						_IRDExit:
.ad3d		60		rts				rts
.ad3e						PlotCommand:
.ad3e		a9 50		lda #$50			lda 	#GCMD_Plot 					; command ID to use
.ad40		20 56 ad	jsr $ad56			jsr 	RunGraphicsCommand
.ad43		80 05		bra $ad4a			bra 	ExecuteGraphicCommand
.ad45						LineCommand:
.ad45		a9 42		lda #$42			lda 	#GCMD_Line 						; command ID to use
.ad47		20 56 ad	jsr $ad56			jsr 	RunGraphicsCommand
.ad4a						ExecuteGraphicCommand:
.ad4a		0d 98 07	ora $0798			ora 	gxCommandID 				; make a full command
.ad4d		20 6b 80	jsr $806b			jsr 	GXGraphicDraw 				; draw it and exit
.ad50		b0 01		bcs $ad53			bcs 	_EGCError
.ad52		60		rts				rts
.ad53						_EGCError:
.ad53		4c fb a9	jmp $a9fb			jmp 	SyntaxError
.ad56						RunGraphicsCommand:
.ad56		8d 98 07	sta $0798			sta 	gxCommandID					; save TODO graphics command.
.ad59		68		pla				pla 								; pop handler address
.ad5a		fa		plx				plx
.ad5b		1a		inc a				inc 	a
.ad5c		d0 01		bne $ad5f			bne 	_RGINoCarry
.ad5e		e8		inx				inx
.ad5f						_RGINoCarry:
.ad5f		8d 9d 07	sta $079d			sta 	gxHandler
.ad62		8e 9e 07	stx $079e			stx 	gxHandler+1
.ad65						_RGICommandLoop:
.ad65		b1 30		lda ($30),y			lda 	(codePtr),y
.ad67		c8		iny				iny
.ad68		c9 db		cmp #$db			cmp 	#KWD_TO						; is it TO x,y
.ad6a		f0 53		beq $adbf			beq 	_RGI_To
.ad6c		c9 c5		cmp #$c5			cmp 	#KWD_HERE 					; do it here.
.ad6e		f0 55		beq $adc5			beq 	_RGI_Here
.ad70		c9 80		cmp #$80			cmp 	#KWC_EOL 					; EOL or : , exit
.ad72		f0 3d		beq $adb1			beq 	_RGI_Exit
.ad74		c9 3a		cmp #$3a			cmp 	#KWD_COLON
.ad76		f0 39		beq $adb1			beq 	_RGI_Exit
.ad78		c9 cd		cmp #$cd			cmp 	#KWD_OUTLINE 				; solid or outline
.ad7a		f0 3e		beq $adba			beq 	_RGI_Frame
.ad7c		c9 d7		cmp #$d7			cmp 	#KWD_SOLID
.ad7e		f0 33		beq $adb3			beq 	_RGI_Solid
.ad80		c9 b9		cmp #$b9			cmp 	#KWD_BY 					; by offset
.ad82		f0 4b		beq $adcf			beq 	_RGI_By
.ad84		c9 c3		cmp #$c3			cmp 	#KWD_FROM 					; from
.ad86		f0 17		beq $ad9f			beq 	_RGI_Move2
.ad88		c9 c0		cmp #$c0			cmp 	#KWD_DIM 					; dim (set scale)
.ad8a		f0 62		beq $adee			beq 	_RGI_Dim
.ad8c		c9 be		cmp #$be			cmp 	#KWD_COLOUR 				; colour or Color
.ad8e		f0 74		beq $ae04			beq 	_RGI_Colour
.ad90		c9 bd		cmp #$bd			cmp 	#KWD_COLOR
.ad92		f0 70		beq $ae04			beq 	_RGI_Colour
.ad94		ae 98 07	ldx $0798			ldx 	gxCommandID
.ad97		e0 52		cpx #$52			cpx 	#GCMD_SpriteMove 			; if not sprite
.ad99		d0 03		bne $ad9e			bne 	_RGI_Move 					; move
.ad9b		4c 2c ae	jmp $ae2c			jmp		_RGI_SpriteInstructions
.ad9e						_RGI_Move:
.ad9e		88		dey				dey 								; unpick get.
.ad9f						_RGI_Move2:
.ad9f		20 52 ae	jsr $ae52			jsr 	GCGetCoordinatePair 		; move to here
.ada2		20 79 ae	jsr $ae79			jsr 	GCCopyPairToStore 			; save
.ada5		5a		phy				phy
.ada6		20 6f ae	jsr $ae6f			jsr 	GCLoadAXY 					; load in
.ada9		09 40		ora #$40			ora 	#GCMD_Move 					; move there
.adab		20 6b 80	jsr $806b			jsr 	GXGraphicDraw
.adae		7a		ply				ply
.adaf		80 b4		bra $ad65			bra 	_RGICommandLoop 			; and go round
.adb1						_RGI_Exit:
.adb1		88		dey				dey 								; unpick : / EOL
.adb2		60		rts				rts
.adb3						_RGI_Solid:
.adb3		a9 02		lda #$02			lda 	#2
.adb5		8d 99 07	sta $0799			sta 	gxFillSolid
.adb8		80 ab		bra $ad65			bra 	_RGICommandLoop
.adba						_RGI_Frame:
.adba		9c 99 07	stz $0799			stz 	gxFillSolid
.adbd		80 a6		bra $ad65			bra 	_RGICommandLoop
.adbf						_RGI_To:
.adbf		20 52 ae	jsr $ae52			jsr 	GCGetCoordinatePair 		; get coordinate pair into slot #1,#2
.adc2		20 79 ae	jsr $ae79			jsr 	GCCopyPairToStore
.adc5						_RGI_Here:
.adc5		5a		phy				phy
.adc6		20 6f ae	jsr $ae6f			jsr 	GCLoadAXY 					; load it into AXY
.adc9		20 29 ae	jsr $ae29			jsr 	_RGICallHandler 			; go do whatever it is.
.adcc		7a		ply				ply
.adcd		80 96		bra $ad65			bra 	_RGICommandLoop 			; and go round
.adcf						_RGI_By:
.adcf		20 5f ae	jsr $ae5f			jsr 	GCSignedCoordinatePair 		; get coordinate pair into slot #1,#2
.add2		18		clc				clc
.add3		a5 59		lda $59				lda 	NSMantissa0+1 				; copy it into space.
.add5		6d 9a 07	adc $079a			adc 	gxXPos
.add8		8d 9a 07	sta $079a			sta 	gxXPos
.addb		a5 61		lda $61				lda 	NSMantissa1+1
.addd		6d 9b 07	adc $079b			adc 	gxXPos+1
.ade0		8d 9b 07	sta $079b			sta 	gxXPos+1
.ade3		a5 5a		lda $5a				lda 	NSMantissa0+2
.ade5		18		clc				clc
.ade6		6d 9c 07	adc $079c			adc 	gxYPos
.ade9		8d 9c 07	sta $079c			sta 	gxYPos
.adec		80 d7		bra $adc5			bra 	_RGI_Here
.adee						_RGI_Dim:
.adee		a2 01		ldx #$01			ldx	 	#1
.adf0		20 f1 a6	jsr $a6f1			jsr 	Evaluate8BitInteger
.adf3		a5 59		lda $59				lda 	NSMantissa0+1
.adf5		c9 00		cmp #$00			cmp 	#0
.adf7		f0 2d		beq $ae26			beq 	_RGIRange
.adf9		c9 09		cmp #$09			cmp 	#8+1
.adfb		b0 29		bcs $ae26			bcs		_RGIRange
.adfd		3a		dec a				dec 	a
.adfe		8d 9f 07	sta $079f			sta 	gxDrawScale
.ae01		4c 65 ad	jmp $ad65			jmp 	_RGICommandLoop
.ae04						_RGI_Colour:
.ae04		a2 01		ldx #$01			ldx 	#1 							; colour
.ae06		20 f1 a6	jsr $a6f1			jsr 	Evaluate8BitInteger
.ae09		a2 02		ldx #$02			ldx 	#2 							; default zero for 2nd parameter
.ae0b		20 56 a7	jsr $a756			jsr 	NSMSetZero
.ae0e		b1 30		lda ($30),y			lda 	(codePtr),y
.ae10		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; check , => mode.
.ae12		d0 04		bne $ae18			bne 	_RGICDefaultMode
.ae14		c8		iny				iny
.ae15		20 f1 a6	jsr $a6f1			jsr 	Evaluate8BitInteger
.ae18						_RGICDefaultMode:
.ae18		5a		phy				phy
.ae19		a9 08		lda #$08			lda 	#GCMD_Colour 				; set colour.
.ae1b		a6 59		ldx $59				ldx 	NSMantissa0+1
.ae1d		a4 5a		ldy $5a				ldy 	NSMantissa0+2
.ae1f		20 6b 80	jsr $806b			jsr 	GXGraphicDraw
.ae22		7a		ply				ply
.ae23		4c 65 ad	jmp $ad65			jmp 	_RGICommandLoop 			; and go round
.ae26						_RGIRange:
.ae26		4c 00 aa	jmp $aa00			jmp 	RangeError
.ae29						_RGICallHandler:
.ae29		6c 9d 07	jmp ($079d)			jmp 	(gxHandler)
.ae2c						_RGI_SpriteInstructions:
.ae2c		c9 cb		cmp #$cb			cmp 	#KWD_OFF
.ae2e		f0 07		beq $ae37			beq 	_RGISpriteOff
.ae30		c9 c6		cmp #$c6			cmp 	#KWD_IMAGE
.ae32		f0 13		beq $ae47			beq 	_RGISetImage
.ae34		4c 9e ad	jmp $ad9e			jmp 	_RGI_Move
.ae37						_RGISpriteOff:
.ae37		5a		phy				phy
.ae38		a0 01		ldy #$01			ldy 	#1
.ae3a		a2 00		ldx #$00			ldx 	#0
.ae3c						_RGIDoCommandLoop:
.ae3c		a9 10		lda #$10			lda 	#GCMD_SpriteImage
.ae3e		20 6b 80	jsr $806b			jsr 	GXGraphicDraw
.ae41		7a		ply				ply
.ae42		b0 e2		bcs $ae26			bcs 	_RGIRange
.ae44		4c 65 ad	jmp $ad65			jmp 	_RGICommandLoop
.ae47						_RGISetImage:
.ae47		a2 01		ldx #$01			ldx 	#1
.ae49		20 f1 a6	jsr $a6f1			jsr 	Evaluate8BitInteger
.ae4c		5a		phy				phy
.ae4d		aa		tax				tax
.ae4e		a0 00		ldy #$00			ldy 	#0
.ae50		80 ea		bra $ae3c			bra 	_RGIDoCommandLoop
.ae52						GCGetCoordinatePair:
.ae52		a2 01		ldx #$01			ldx 	#1
.ae54		20 d6 a6	jsr $a6d6			jsr 	Evaluate16BitInteger
.ae57		20 eb 97	jsr $97eb			jsr 	CheckComma
.ae5a		e8		inx				inx
.ae5b		20 d6 a6	jsr $a6d6			jsr 	Evaluate16BitInteger
.ae5e		60		rts				rts
.ae5f						GCSignedCoordinatePair:
.ae5f		a2 01		ldx #$01			ldx 	#1
.ae61		20 e0 a6	jsr $a6e0			jsr 	Evaluate16BitIntegerSigned
.ae64		20 eb 97	jsr $97eb			jsr 	CheckComma
.ae67		e8		inx				inx
.ae68		20 e0 a6	jsr $a6e0			jsr 	Evaluate16BitIntegerSigned
.ae6b		60		rts				rts
.ae6c						_GCCPRange:
.ae6c		4c 00 aa	jmp $aa00			jmp 	RangeError
.ae6f						GCLoadAXY:
.ae6f		ad 9b 07	lda $079b			lda 	gxXPos+1
.ae72		ae 9a 07	ldx $079a			ldx 	gxXPos
.ae75		ac 9c 07	ldy $079c			ldy 	gxYPos
.ae78		60		rts				rts
.ae79						GCCopyPairToStore:
.ae79		a5 59		lda $59				lda 	NSMantissa0+1 				; copy it into space.
.ae7b		8d 9a 07	sta $079a			sta 	gxXPos
.ae7e		a5 61		lda $61				lda 	NSMantissa1+1
.ae80		8d 9b 07	sta $079b			sta 	gxXPos+1
.ae83		a5 5a		lda $5a				lda 	NSMantissa0+2
.ae85		8d 9c 07	sta $079c			sta 	gxYPos
.ae88		60		rts				rts
.0798						gxCommandID:
>0798								.fill 	1
.0799						gxFillSolid:
>0799								.fill 	1
.079a						gxXPos:
>079a								.fill 	2
.079c						gxYPos:
>079c								.fill 	1
.079d						gxHandler:
>079d								.fill 	2
.079f						gxDrawScale:
>079f								.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/graphics/gcontrol.asm

.ae89						BitmapCtrl:
.ae89		b1 30		lda ($30),y			lda 	(codePtr),y
.ae8b		c8		iny				iny
.ae8c		a2 01		ldx #$01			ldx 	#1
.ae8e		c9 cc		cmp #$cc			cmp 	#KWD_ON
.ae90		f0 11		beq $aea3			beq 	BitmapSwitch
.ae92		ca		dex				dex
.ae93		c9 cb		cmp #$cb			cmp 	#KWD_OFF
.ae95		f0 0c		beq $aea3			beq 	BitmapSwitch
.ae97		20 f1 a6	jsr $a6f1			jsr 	Evaluate8BitInteger 		; get the colour
.ae9a		5a		phy				phy
.ae9b		aa		tax				tax
.ae9c		a9 06		lda #$06			lda 	#GCMD_Clear					; clear to that colour
.ae9e		20 6b 80	jsr $806b			jsr 	GXGraphicDraw
.aea1		7a		ply				ply
.aea2		60		rts				rts
.aea3						BitmapSwitch:
.aea3		5a		phy				phy
.aea4		a0 00		ldy #$00			ldy 	#0 							; gfx 1,on/off,0
.aea6		a9 02		lda #$02			lda 	#GCMD_BitmapCtl
.aea8		20 6b 80	jsr $806b			jsr 	GXGraphicDraw
.aeab		a9 08		lda #$08			lda 	#GCMD_Colour				; set colour to $FF
.aead		a0 00		ldy #$00			ldy 	#0
.aeaf		a2 ff		ldx #$ff			ldx 	#$FF
.aeb1		20 6b 80	jsr $806b			jsr 	GXGraphicDraw
.aeb4		9c 99 07	stz $0799			stz 	gxFillSolid
.aeb7		9c 9a 07	stz $079a			stz 	gxXPos
.aeba		9c 9b 07	stz $079b			stz 	gxXPos+1
.aebd		9c 9c 07	stz $079c			stz 	gxYPos
.aec0		9c 9f 07	stz $079f			stz 	gxDrawScale
.aec3		a9 40		lda #$40			lda 	#GCMD_Move 						; home cursor
.aec5		a2 00		ldx #$00			ldx 	#0
.aec7		a0 00		ldy #$00			ldy 	#0
.aec9		20 6b 80	jsr $806b			jsr 	GXGraphicDraw
.aecc		7a		ply				ply
.aecd		60		rts				rts
.aece						SpritesCtrl:
.aece		b1 30		lda ($30),y			lda 	(codePtr),y
.aed0		c8		iny				iny
.aed1		a2 01		ldx #$01			ldx 	#1
.aed3		c9 cc		cmp #$cc			cmp 	#KWD_ON
.aed5		f0 08		beq $aedf			beq 	SpriteSwitch
.aed7		ca		dex				dex
.aed8		c9 cb		cmp #$cb			cmp 	#KWD_OFF
.aeda		f0 03		beq $aedf			beq 	SpriteSwitch
.aedc		4c fb a9	jmp $a9fb			jmp 	SyntaxError
.aedf						SpriteSwitch:
.aedf		5a		phy				phy
.aee0		a0 00		ldy #$00			ldy 	#0 							; gfx 2,on/off,0
.aee2		a9 04		lda #$04			lda 	#GCMD_SpriteCtl
.aee4		20 6b 80	jsr $806b			jsr 	GXGraphicDraw
.aee7		7a		ply				ply
.aee8		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/graphics/gfx.asm

.aee9						GfxCommand:
.aee9		a2 00		ldx #$00			ldx 	#0
.aeeb		20 f1 a6	jsr $a6f1			jsr 	Evaluate8BitInteger 		; command
.aeee		20 eb 97	jsr $97eb			jsr 	CheckComma
.aef1		e8		inx				inx
.aef2		20 d6 a6	jsr $a6d6			jsr 	Evaluate16BitInteger 		; X
.aef5		20 eb 97	jsr $97eb			jsr 	CheckComma
.aef8		e8		inx				inx
.aef9		20 f1 a6	jsr $a6f1			jsr 	Evaluate8BitInteger 		; Y
.aefc		a5 61		lda $61				lda 	NSMantissa1+1  				; shift bit 0 of X into CS, should now be zero
.aefe		4a		lsr a				lsr 	a
.aeff		d0 12		bne $af13			bne 	_GfxError
.af01		26 58		rol $58				rol 	NSMantissa0 				; rotate into command
.af03		b0 0e		bcs $af13			bcs 	_GfxError 					; bit 7 should have been zero
.af05		5a		phy				phy 								; save pos
.af06		a5 58		lda $58				lda 	NSMantissa0 				; do the command
.af08		a6 59		ldx $59				ldx 	NSMantissa0+1
.af0a		a4 5a		ldy $5a				ldy 	NSMantissa0+2
.af0c		20 6b 80	jsr $806b			jsr 	GXGraphicDraw
.af0f		b0 02		bcs $af13			bcs 	_GfxError
.af11		7a		ply				ply 								; restore pos and exit.
.af12		60		rts				rts
.af13						_GfxError:
.af13		4c 00 aa	jmp $aa00			jmp 	RangeError

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/graphics/hit.asm

.af16						UnaryHit:
.af16		fa		plx				plx
.af17		a9 36		lda #$36			lda 	#zTemp0
.af19		20 f1 a6	jsr $a6f1			jsr 	Evaluate8BitInteger 		; get sprite number 0
.af1c		20 eb 97	jsr $97eb			jsr 	CheckComma
.af1f		e8		inx				inx
.af20		20 f1 a6	jsr $a6f1			jsr 	Evaluate8BitInteger 		; get sprite number 1
.af23		20 e3 97	jsr $97e3			jsr		CheckRightBracket
.af26		ca		dex				dex 								; fix back up again.
.af27		da		phx				phx 								; save X/Y
.af28		5a		phy				phy
.af29		b4 59		ldy $59,x			ldy 	NSMantissa0+1,x 			; get the sprite numbers into X/Y
.af2b		b5 58		lda $58,x			lda 	NSMantissa0,x
.af2d		aa		tax				tax
.af2e		a9 12		lda #$12			lda 	#GCMD_SpriteCollide 		; command check collision.
.af30		20 6b 80	jsr $806b			jsr 	GXGraphicDraw 				; calculate result
.af33		1a		inc a				inc 	a 							; so 255 (fail) -> 0, otherwise 1,2,3,4 pixels etc.
.af34		7a		ply				ply 								; restore XY
.af35		fa		plx				plx
.af36		20 58 a7	jsr $a758			jsr 	NSMSetByte 					; return the hit result
.af39		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/graphics/palette.asm

.af3a						PaletteCommand:
.af3a		a2 00		ldx #$00			ldx 	#0
.af3c		20 f1 a6	jsr $a6f1			jsr 	Evaluate8BitInteger 		; colour
.af3f		20 eb 97	jsr $97eb			jsr 	CheckComma
.af42		e8		inx				inx
.af43		20 d6 a6	jsr $a6d6			jsr 	Evaluate16BitInteger 		; r
.af46		20 eb 97	jsr $97eb			jsr 	CheckComma
.af49		e8		inx				inx
.af4a		20 f1 a6	jsr $a6f1			jsr 	Evaluate8BitInteger 		; g
.af4d		20 eb 97	jsr $97eb			jsr 	CheckComma
.af50		e8		inx				inx
.af51		20 f1 a6	jsr $a6f1			jsr 	Evaluate8BitInteger 		; b
.af54		a5 58		lda $58				lda 	NSMantissa0 				; get colour #
.af56		85 36		sta $36				sta 	zTemp0
.af58		a9 34		lda #$34			lda 	#$D0 >> 2 					; MSB = D0/4
.af5a		85 37		sta $37				sta 	zTemp0+1
.af5c		06 36		asl $36				asl 	zTemp0 						; zTemp = $D000+Colour x 4
.af5e		26 37		rol $37				rol	 	zTemp0+1
.af60		06 36		asl $36				asl 	zTemp0
.af62		26 37		rol $37				rol	 	zTemp0+1
.af64		a9 01		lda #$01			lda 	#1 							; I/O Page 2
.af66		85 01		sta $01				sta 	1
.af68		5a		phy				phy
.af69		a5 5b		lda $5b				lda 	NSMantissa0+3 				; fix to r,g,b
.af6b		92 36		sta ($36)			sta 	(zTemp0)
.af6d		a0 01		ldy #$01			ldy 	#1
.af6f		a5 5a		lda $5a				lda 	NSMantissa0+2
.af71		91 36		sta ($36),y			sta 	(zTemp0),y
.af73		a5 59		lda $59				lda 	NSMantissa0+1
.af75		c8		iny				iny
.af76		91 36		sta ($36),y			sta 	(zTemp0),y
.af78		7a		ply				ply
.af79		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/hardware/cls.asm

.af7a						ClearScreen:
.af7a		5a		phy				phy
.af7b		a9 0c		lda #$0c			lda 	#12 						; char code 12 clears the screen.
.af7d		20 43 80	jsr $8043			jsr 	EXTPrintCharacter
.af80		7a		ply				ply
.af81		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/sound/effects.asm

.af82						PingCommand:
.af82		5a		phy				phy 								; save pos
.af83		a9 01		lda #$01			lda 	#1 						; push channel.
.af85		48		pha				pha
.af86		a9 c8		lda #$c8			lda 	#200 						; pitch LSB
.af88		a2 06		ldx #$06			ldx 	#6 						; length
.af8a		a0 00		ldy #$00			ldy 	#0 						; slide LSB
.af8c		80 24		bra $afb2			bra 	SoundEffectCommand
.af8e						ZapCommand:
.af8e		5a		phy				phy 								; save pos
.af8f		a9 01		lda #$01			lda 	#1 						; push channel.
.af91		48		pha				pha
.af92		a9 ff		lda #$ff			lda 	#255 						; pitch LSB
.af94		a2 0a		ldx #$0a			ldx 	#10 						; length
.af96		a0 0a		ldy #$0a			ldy 	#10 						; slide LSB
.af98		80 18		bra $afb2			bra 	SoundEffectCommand
.af9a						ShootCommand:
.af9a		5a		phy				phy 								; save pos
.af9b		a9 03		lda #$03			lda 	#3 						; push channel.
.af9d		48		pha				pha
.af9e		a9 20		lda #$20			lda 	#32 						; pitch LSB
.afa0		a2 04		ldx #$04			ldx 	#4 						; length
.afa2		a0 00		ldy #$00			ldy 	#0 						; slide LSB
.afa4		80 0c		bra $afb2			bra 	SoundEffectCommand
.afa6						Explode:
.afa6		5a		phy				phy 								; save pos
.afa7		a9 03		lda #$03			lda 	#3 						; push channel.
.afa9		48		pha				pha
.afaa		a9 50		lda #$50			lda 	#80 						; pitch LSB
.afac		a2 0a		ldx #$0a			ldx 	#10 						; length
.afae		a0 00		ldy #$00			ldy 	#0 						; slide LSB
.afb0		80 00		bra $afb2			bra 	SoundEffectCommand
.afb2						SoundEffectCommand:
.afb2		8d a0 07	sta $07a0			sta 	SoundCommandBlock 			; set up the command block in sound.asm
.afb5		9c a1 07	stz $07a1			stz 	SoundCommandBlock+1
.afb8		a9 0f		lda #$0f			lda 	#15
.afba		8d a2 07	sta $07a2			sta 	SoundCommandBlock+2
.afbd		8e a3 07	stx $07a3			stx 	SoundCommandBlock+3
.afc0		8c a4 07	sty $07a4			sty 	SoundCommandBlock+4
.afc3		9c a5 07	stz $07a5			stz 	SoundCommandBlock+5
.afc6		68		pla				pla
.afc7		09 10		ora #$10			ora 	#$10  						; execute command $11
.afc9		a2 a0		ldx #$a0			ldx 	#(SoundCommandBlock & $FF)
.afcb		a0 07		ldy #$07			ldy 	#(SoundCommandBlock >> 8)
.afcd		20 75 80	jsr $8075			jsr 	SNDCommand
.afd0		7a		ply				ply
.afd1		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/sound/playing.asm

.afd2						UnaryPlaying:
.afd2		fa		plx				plx
.afd3		20 f1 a6	jsr $a6f1			jsr 	Evaluate8BitInteger 		; get channel #
.afd6		48		pha				pha
.afd7		20 e3 97	jsr $97e3			jsr		CheckRightBracket
.afda		68		pla				pla
.afdb		c9 04		cmp #$04			cmp 	#4
.afdd		b0 0c		bcs $afeb			bcs 	_UPNotPlaying
.afdf		09 20		ora #$20			ora 	#$20 						; query playing ?
.afe1		20 75 80	jsr $8075			jsr 	SNDCommand
.afe4		c9 00		cmp #$00			cmp 	#0
.afe6		f0 03		beq $afeb			beq 	_UPNotPlaying
.afe8		4c 69 98	jmp $9869			jmp 	ReturnTrue
.afeb						_UPNotPlaying:
.afeb		4c 74 98	jmp $9874			jmp 	ReturnFalse

;******  Return to file: _basic.asm


;******  Processing file: ./system.f256/module.interfaces/sound/sound.asm

.afee						SoundCommand:
.afee		b1 30		lda ($30),y			lda 	(codePtr),y
.aff0		c9 cb		cmp #$cb			cmp 	#KWD_OFF 					; SOUND OFF ?
.aff2		d0 09		bne $affd			bne 	_SNDMain
.aff4		c8		iny				iny 								; skip OFF
.aff5		a9 3f		lda #$3f			lda 	#$3F 						; call command $3F (silence)
.aff7		5a		phy				phy
.aff8		20 75 80	jsr $8075			jsr 	SNDCommand
.affb		7a		ply				ply
.affc		60		rts				rts
.affd						_SNDMain:
.affd		a2 00		ldx #$00			ldx 	#0
.afff		20 f1 a6	jsr $a6f1			jsr 	Evaluate8BitInteger 		; channel
.b002		c9 04		cmp #$04			cmp 	#4 							; must be 0-3
.b004		b0 4b		bcs $b051			bcs 	_SndError
.b006		e8		inx				inx 								; do the rest in slot 1.
.b007		20 eb 97	jsr $97eb			jsr 	CheckComma
.b00a		20 d6 a6	jsr $a6d6			jsr 	Evaluate16BitInteger 		; Pitch
.b00d		b5 60		lda $60,x			lda 	NSMantissa1,x 				; must be 10 bit
.b00f		c9 10		cmp #$10			cmp 	#16
.b011		b0 3e		bcs $b051			bcs 	_SndError
.b013		8d a1 07	sta $07a1			sta 	SoundCommandBlock+1 		; Pitch (2 bytes + 0)
.b016		b5 58		lda $58,x			lda 	NSMantissa0,x
.b018		8d a0 07	sta $07a0			sta 	SoundCommandBlock
.b01b		20 eb 97	jsr $97eb			jsr 	CheckComma
.b01e		20 f1 a6	jsr $a6f1			jsr 	Evaluate8BitInteger 		; Length (1 byte + 3)
.b021		8d a3 07	sta $07a3			sta 	SoundCommandBlock+3
.b024		a9 0f		lda #$0f			lda 	#15
.b026		8d a2 07	sta $07a2			sta 	SoundCommandBlock+2 		; Volume (1 byte + 2)
.b029		9c a4 07	stz $07a4			stz 	SoundCommandBlock+4 		; default slide (2 bytes +4)
.b02c		9c a5 07	stz $07a5			stz 	SoundCommandBlock+5
.b02f		b1 30		lda ($30),y			lda 	(codePtr),y
.b031		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.b033		d0 0e		bne $b043			bne 	_SNDPlay
.b035		c8		iny				iny
.b036		20 e0 a6	jsr $a6e0			jsr 	Evaluate16BitIntegerSigned 	; Slide
.b039		b5 58		lda $58,x			lda 	NSMantissa0,x 				; Slide (2 bytes + 4)
.b03b		8d a4 07	sta $07a4			sta 	SoundCommandBlock+4
.b03e		b5 60		lda $60,x			lda 	NSMantissa1,x
.b040		8d a5 07	sta $07a5			sta 	SoundCommandBlock+5
.b043						_SNDPlay:
.b043		5a		phy				phy
.b044		a5 58		lda $58				lda 	NSMantissa0 				; channel.
.b046		09 10		ora #$10			ora 	#$10 						; 1x = Queue sound
.b048		a2 a0		ldx #$a0			ldx 	#(SoundCommandBlock & $FF)
.b04a		a0 07		ldy #$07			ldy 	#(SoundCommandBlock >> 8)
.b04c		20 75 80	jsr $8075			jsr 	SNDCommand
.b04f		7a		ply				ply
.b050		60		rts				rts
.b051						_SndError:
.b051		4c 00 aa	jmp $aa00			jmp 	RangeError
.07a0						SoundCommandBlock:
>07a0								.fill 	6

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/bytes.asm

.b054						StackPushByte:
.b054		48		pha				pha 								; save byte on stack
.b055		a5 34		lda $34				lda 	basicStack 					; decrement basic stack pointer
.b057		d0 08		bne $b061			bne 	_SPBNoBorrow
.b059		c6 35		dec $35				dec 	basicStack+1 				; borrow
.b05b		a5 35		lda $35				lda 	basicStack+1 				; check range.
.b05d		c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.b05f		90 06		bcc $b067			bcc 	_SPBMemory
.b061						_SPBNoBorrow:
.b061		c6 34		dec $34				dec 	basicStack
.b063		68		pla				pla 								; get back and write
.b064		92 34		sta ($34)			sta 	(basicStack)
.b066		60		rts				rts
.b067						_SPBMemory:
.b067		a9 12		lda #$12		lda	#18
.b069		4c fc 97	jmp $97fc		jmp	ErrorHandler
.b06c						StackPopByte:
.b06c		b2 34		lda ($34)			lda 	(basicStack) 				; bump the stack pointer.
.b06e		e6 34		inc $34				inc 	basicStack
.b070		d0 02		bne $b074			bne 	_SPBNoCarry
.b072		e6 35		inc $35				inc 	basicStack+1
.b074						_SPBNoCarry:
.b074		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/frames.asm

.b075						StackOpen:
.b075		48		pha				pha 								; save frame byte
.b076		29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.b078		0a		asl a				asl 	a 							; claim twice this for storage
.b079		49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.b07b		38		sec				sec 								; so basically subtracting from
.b07c		65 34		adc $34				adc 	basicStack 	 				; basicStack
.b07e		85 34		sta $34				sta 	basicStack
.b080		b0 09		bcs $b08b			bcs 	_SONoBorrow
>b082		db						.byte 	$DB 						; causes a break in the emulator
.b083		c6 35		dec $35				dec 	basicStack+1
.b085		a5 35		lda $35				lda 	basicStack+1 				; have we reached stack overflow
.b087		c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.b089		90 04		bcc $b08f			bcc 	_SOMemory
.b08b						_SONoBorrow:
.b08b		68		pla				pla 								; get marker back and write at TOS
.b08c		92 34		sta ($34)			sta 	(basicStack)
.b08e		60		rts				rts
.b08f						_SOMemory:
.b08f		a9 12		lda #$12		lda	#18
.b091		4c fc 97	jmp $97fc		jmp	ErrorHandler
.b094						StackClose:
.b094		b2 34		lda ($34)			lda 	(basicStack) 				; get TOS marker
.b096		29 0f		and #$0f			and 	#$0F 						; bytes to add back
.b098		0a		asl a				asl 	a 							; claim twice this.
.b099		65 34		adc $34				adc 	basicStack 					; add to the stack pointer.
.b09b		85 34		sta $34				sta 	basicStack
.b09d		90 02		bcc $b0a1			bcc 	_SCExit
.b09f		e6 35		inc $35				inc 	basicStack+1
.b0a1						_SCExit:
.b0a1		60		rts				rts
.b0a2						StackCheckFrame:
.b0a2		48		pha				pha
.b0a3						_StackRemoveLocals:
.b0a3		b2 34		lda ($34)			lda 	(basicStack) 				; check for local, keep popping them
.b0a5		c9 03		cmp #$03			cmp 	#STK_LOCALS+1 				; is the frame a local ? S or N are 1/0
.b0a7		b0 05		bcs $b0ae			bcs 	_SCNoLocal
.b0a9		20 c6 90	jsr $90c6			jsr 	LocalPopValue 				; restore the local value
.b0ac		80 f5		bra $b0a3			bra 	_StackRemoveLocals 			; gr round again
.b0ae						_SCNoLocal:
.b0ae		68		pla				pla 								; get the frame check.
.b0af		52 34		eor ($34)			eor 	(basicStack) 				; xor with toS marker
.b0b1		29 f0		and #$f0			and 	#$F0 						; check type bits
.b0b3		d0 01		bne $b0b6			bne 	_SCFError 					; different, we have structures mixed up
.b0b5		60		rts				rts
.b0b6						_SCFError:
.b0b6		8a		txa				txa 								; report error X
.b0b7		4c fc 97	jmp $97fc			jmp 	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/location.asm

.b0ba						STKSaveCodePosition:
.b0ba		5a		phy				phy
.b0bb		98		tya				tya 								; save Y
.b0bc		a0 05		ldy #$05			ldy 	#5
.b0be		91 34		sta ($34),y			sta 	(basicStack),y
.b0c0		88		dey				dey 								; save Code Pointer
.b0c1						_STKSaveLoop:
.b0c1		b9 2f 00	lda $002f,y			lda 	safePtr-1,y 				; allows us to access the pointer w/out issues.
.b0c4		91 34		sta ($34),y			sta 	(basicStack),y
.b0c6		88		dey				dey
.b0c7		d0 f8		bne $b0c1			bne 	_STKSaveLoop
.b0c9		7a		ply				ply
.b0ca		60		rts				rts
.b0cb						STKLoadCodePosition:
.b0cb		a0 01		ldy #$01			ldy 	#1 							; load code pointer back
.b0cd						_STKLoadLoop:
.b0cd		b1 34		lda ($34),y			lda 	(basicStack),y
.b0cf		99 2f 00	sta $002f,y			sta 	safePtr-1,y
.b0d2		c8		iny				iny
.b0d3		c0 05		cpy #$05			cpy 	#5
.b0d5		d0 f6		bne $b0cd			bne 	_STKLoadLoop
.b0d7		b1 34		lda ($34),y			lda 	(basicStack),y 				; get Y offset
.b0d9		a8		tay				tay
.b0da		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/setup.asm

.b0db						StackReset:
.b0db		a9 ff		lda #$ff			lda 	#((BasicStackBase+BasicStackSize-1) & $FF)
.b0dd		85 34		sta $34				sta 	0+basicStack
.b0df		a9 0f		lda #$0f			lda 	#((BasicStackBase+BasicStackSize-1) >> 8)
.b0e1		85 35		sta $35				sta 	1+basicStack
.b0e3		a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.b0e5		92 34		sta ($34)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.b0e7		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/concrete.asm

.b0e8						StringConcrete:
.b0e8		5a		phy				phy 								; save position on stack
.b0e9		20 36 a3	jsr $a336			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.b0ec		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy target string to zTemp1
.b0ee		85 38		sta $38				sta 	zTemp1
.b0f0		b5 60		lda $60,x			lda 	NSMantissa1,x
.b0f2		85 39		sta $39				sta 	zTemp1+1
.b0f4		a0 ff		ldy #$ff			ldy 	#$FF	 					; calculate string length
.b0f6						_SALength:
.b0f6		c8		iny				iny
.b0f7		b1 38		lda ($38),y			lda 	(zTemp1),y
.b0f9		d0 fb		bne $b0f6			bne 	_SALength
.b0fb		c0 fd		cpy #$fd			cpy 	#253 						; string too long - cannot concrete.
.b0fd		b0 3d		bcs $b13c			bcs 	_SALengthError
.b0ff		98		tya				tya 				 				; length of the new string
.b100		18		clc				clc
.b101		69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.b103		90 02		bcc $b107			bcc 	_SAHaveLength
.b105		a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.b107						_SAHaveLength:
.b107		48		pha				pha 								; save length.
.b108		38		sec				sec
.b109		49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.b10b		6d 0a 04	adc $040a			adc 	stringMemory
.b10e		8d 0a 04	sta $040a			sta 	stringMemory
.b111		85 3a		sta $3a				sta 	zTemp2 						; update storage address
.b113		95 58		sta $58,x			sta 	NSMantissa0,x 				; update mantissa address
.b115		a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.b117		6d 0b 04	adc $040b			adc 	stringMemory+1
.b11a		8d 0b 04	sta $040b			sta 	stringMemory+1
.b11d		85 3b		sta $3b				sta 	zTemp2+1
.b11f		95 60		sta $60,x			sta 	NSMantissa1,x
.b121		68		pla				pla 								; save length-3 (chars allowed) in first byte
.b122		38		sec				sec
.b123		e9 03		sbc #$03			sbc 	#3
.b125		92 3a		sta ($3a)			sta 	(zTemp2)
.b127		a9 00		lda #$00			lda 	#0 							; clear the status byte.
.b129		a0 01		ldy #$01			ldy 	#1
.b12b		91 3a		sta ($3a),y			sta 	(zTemp2),y
.b12d						_SACopyNewString:
.b12d		a0 00		ldy #$00			ldy 	#0
.b12f						_SACopyNSLoop:
.b12f		b1 38		lda ($38),y			lda 	(zTemp1),y 					; get character
.b131		c8		iny				iny 								; write two on in string storage
.b132		c8		iny				iny
.b133		91 3a		sta ($3a),y			sta 	(zTemp2),y
.b135		88		dey				dey 								; this makes it one one.
.b136		c9 00		cmp #$00			cmp 	#0 							; until EOS copied
.b138		d0 f5		bne $b12f			bne 	_SACopyNSLoop
.b13a		7a		ply				ply
.b13b		60		rts				rts
.b13c						_SALengthError:
.b13c		a9 09		lda #$09		lda	#9
.b13e		4c fc 97	jmp $97fc		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/stringalloc.asm

.b141						StringSystemInitialise:
.b141		a9 ff		lda #$ff			lda 	#((EndVariableSpace-1) & $FF)
.b143		8d 0a 04	sta $040a			sta 	0+stringMemory
.b146		a9 1f		lda #$1f			lda 	#((EndVariableSpace-1) >> 8)
.b148		8d 0b 04	sta $040b			sta 	1+stringMemory
.b14b		9c ff 1f	stz $1fff			stz 	EndVariableSpace-1 			; put a zero at the end, so know end of string memory.
.b14e		60		rts				rts
.b14f						StringSpaceInitialise:
.b14f		20 36 a3	jsr $a336			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.b152		a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.b154		8d 0c 04	sta $040c			sta 	stringInitialised
.b157		ad 0a 04	lda $040a			lda 	stringMemory 				; allocate 256 bytes for one concreted string
.b15a		8d 0d 04	sta $040d			sta 	stringTempPointer 			; so temporary string space is allocated below that.
.b15d		ad 0b 04	lda $040b			lda 	stringMemory+1
.b160		3a		dec a				dec 	a
.b161		8d 0e 04	sta $040e			sta 	stringTempPointer+1
.b164		60		rts				rts
.b165						StringTempAllocate:
.b165		c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.b167		b0 30		bcs $b199			bcs 	_STALength
.b169		2c 0c 04	bit $040c			bit 	stringInitialised 			; already initialised
.b16c		30 05		bmi $b173			bmi 	_STAAllocate
.b16e		48		pha				pha 								; save value to subtract.
.b16f		20 4f b1	jsr $b14f			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.b172		68		pla				pla 								; restore it
.b173						_STAAllocate:
.b173		49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.b175		18		clc				clc  								; deliberate allows one more
.b176		6d 0d 04	adc $040d			adc 	stringTempPointer 			; subtract from temp pointer
.b179		8d 0d 04	sta $040d			sta 	stringTempPointer
.b17c		95 58		sta $58,x			sta 	NSMantissa0,x 				; address in mantissa
.b17e		85 3c		sta $3c				sta 	zsTemp 						; and zsTemp
.b180		ad 0e 04	lda $040e			lda 	stringTempPointer+1
.b183		69 ff		adc #$ff			adc 	#$FF
.b185		8d 0e 04	sta $040e			sta 	stringTempPointer+1
.b188		85 3d		sta $3d				sta 	zsTemp+1
.b18a		95 60		sta $60,x			sta 	NSMantissa1,x
.b18c		74 68		stz $68,x			stz 	NSMantissa2,x 				; set the typing data and the upper address bytes.
.b18e		74 70		stz $70,x			stz 	NSMantissa3,x
.b190		a9 10		lda #$10			lda 	#NSTString
.b192		95 50		sta $50,x			sta 	NSStatus,x
.b194		a9 00		lda #$00			lda 	#0 							; clear the target string
.b196		92 3c		sta ($3c)			sta 	(zsTemp)
.b198		60		rts				rts
.b199						_STALength:
.b199		a9 09		lda #$09		lda	#9
.b19b		4c fc 97	jmp $97fc		jmp	ErrorHandler
.b19e						StringTempWrite:
.b19e		48		pha				pha
.b19f		92 3c		sta ($3c)			sta 	(zsTemp) 					; write byte
.b1a1		e6 3c		inc $3c				inc 	zsTemp 						; bump pointer
.b1a3		d0 02		bne $b1a7			bne 	_STWNoCarry
.b1a5		e6 3d		inc $3d				inc 	zsTemp+1
.b1a7						_STWNoCarry:
.b1a7		a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.b1a9		92 3c		sta ($3c)			sta 	(zsTemp)
.b1ab		68		pla				pla
.b1ac		60		rts				rts

;******  Return to file: _basic.asm

.b1ad						StartModuleCode:

;******  Processing file: ../modules/_build/_hardware.module

=1						hardwareIntegrated=1
=0						CONBlack = 0
=1						CONGrey = 1
=2						CONDarkBlue = 2
=3						CONGreen = 3
=4						CONPurple = 4
=5						CONBrown = 5
=6						CONOrange = 6
=7						CONCyan = 7
=8						CONDarkGrey = 8
=9						CONLightGrey = 9
=10						CONLightBlue = 10
=11						CONLightGreen = 11
=12						CONPink = 12
=13						CONRed = 13
=14						CONYellow = 14
=15						CONWhite = 15
=9						CONForeground = CONLightGrey
=2						CONBackground = CONDarkBlue
=9						CLICommandLine = CONLightGrey
=5						CLIFComment = CONBrown
=14						CLIBComment = CONYellow
=13						CLILineNumber = CONRed
=6						CLIToken = CONOrange
=7						CLIConstant = CONCyan
=14						CLIIdentifier = CONYellow
=12						CLIPunctuation = CONPink
=15						CLIData = CONWhite
.c000	a000					Export_EXTPrintNoControl:
.c000	a000	48		pha				pha
.c001	a001	da		phx				phx
.c002	a002	5a		phy				phy
.c003	a003	a6 01		ldx $01				ldx 	1
.c005	a005	da		phx				phx
.c006	a006	ac a7 07	ldy $07a7			ldy 	EXTColumn 					; Y = Row, e.g. points to character.
.c009	a009	80 11		bra $a01c			bra 	PrintCharacterOnly
.c00b	a00b					Export_EXTPrintCharacter:
.c00b	a00b					PAGEDPrintCharacter:
.c00b	a00b	48		pha				pha
.c00c	a00c	da		phx				phx
.c00d	a00d	5a		phy				phy
.c00e	a00e	a6 01		ldx $01				ldx 	1
.c010	a010	da		phx				phx
.c011	a011	ac a7 07	ldy $07a7			ldy 	EXTColumn 					; Y = Row, e.g. points to character.
.c014	a014	09 00		ora #$00			ora 	#$00 						; check $80-$FF
.c016	a016	30 48		bmi $a060			bmi 	EXPCColour
.c018	a018	c9 20		cmp #$20			cmp 	#$20 						; check $00-$1F
.c01a	a01a	90 4d		bcc $a069			bcc 	EXPCControl
.c01c	a01c					PrintCharacterOnly:
.c01c	a01c	a2 02		ldx #$02			ldx 	#2 							; select char memory
.c01e	a01e	86 01		stx $01				stx 	1
.c020	a020	91 40		sta ($40),y			sta 	(EXTAddress),y
.c022	a022	e6 01		inc $01				inc 	1 							; select colour memory
.c024	a024	ad a8 07	lda $07a8			lda 	EXTTextColour
.c027	a027	91 40		sta ($40),y			sta 	(EXTAddress),y
.c029	a029	c8		iny				iny 								; advance horizontal position
.c02a	a02a	8c a7 07	sty $07a7			sty 	EXTColumn
.c02d	a02d	cc a9 07	cpy $07a9			cpy 	EXTScreenWidth 				; reached RHS ?
.c030	a030	90 63		bcc $a095			bcc 	EXPCExit 					; no, then exit.
.c032	a032					EXPCCRLF:
.c032	a032	ee a6 07	inc $07a6			inc 	EXTRow  					; bump row
.c035	a035	9c a7 07	stz $07a7			stz 	EXTColumn 					; back to column 0
.c038	a038	ad a6 07	lda $07a6			lda 	EXTRow 						; check if reached the bottom ?
.c03b	a03b	cd aa 07	cmp $07aa			cmp 	EXTScreenHeight 			; if so, then scroll.
.c03e	a03e	f0 18		beq $a058			beq 	EXPCScroll
.c040	a040	18		clc				clc 								; add width to address.
.c041	a041	a5 40		lda $40				lda 	EXTAddress
.c043	a043	6d a9 07	adc $07a9			adc 	EXTScreenWidth
.c046	a046	85 40		sta $40				sta 	EXTAddress
.c048	a048	90 4b		bcc $a095			bcc 	EXPCExit
.c04a	a04a	e6 41		inc $41				inc 	EXTAddress+1
.c04c	a04c	80 47		bra $a095			bra 	EXPCExit
.c04e	a04e					EXPCLeft:
.c04e	a04e	ce a7 07	dec $07a7			dec 	EXTColumn
.c051	a051	10 42		bpl $a095			bpl 	EXPCExit
.c053	a053					EXPCBegin:
.c053	a053	9c a7 07	stz $07a7			stz 	EXTColumn
.c056	a056	80 3d		bra $a095			bra 	EXPCExit
.c058	a058					EXPCScroll:
.c058	a058	ce a6 07	dec $07a6			dec 	EXTRow 						; the height-1 th line.
.c05b	a05b	20 46 a1	jsr $a146			jsr 	EXTScreenScroll 			; scroll the screen
.c05e	a05e	80 35		bra $a095			bra 	EXPCExit
.c060	a060					EXPCColour:
.c060	a060	c9 a0		cmp #$a0			cmp 	#$A0						; 80-9F set foreground/background
.c062	a062	b0 31		bcs $a095			bcs 	EXPCExit
.c064	a064	20 26 a1	jsr $a126			jsr 	EXPCHandleColour
.c067	a067	80 2c		bra $a095			bra 	EXPCExit
.c069	a069					EXPCControl:
.c069	a069	c9 11		cmp #$11			cmp 	#$11 						; only handle 00-10.
.c06b	a06b	b0 28		bcs $a095			bcs 	EXPCExit
.c06d	a06d	0a		asl a				asl 	a 							; double into X
.c06e	a06e	aa		tax				tax
.c06f	a06f	7c 04 a1	jmp ($a104,x)			jmp 	(EXPCActionTable,x) 		; and execute code.
.c072	a072					EXPCUp:
.c072	a072	ad a6 07	lda $07a6			lda 	EXTRow 						; already at top ?
.c075	a075	f0 1e		beq $a095			beq 	EXPCExit
.c077	a077	ce a6 07	dec $07a6			dec 	EXTRow 						; up one in position/address
.c07a	a07a	38		sec				sec
.c07b	a07b	a5 40		lda $40				lda 	EXTAddress
.c07d	a07d	ed a9 07	sbc $07a9			sbc 	EXTScreenWidth
.c080	a080	85 40		sta $40				sta 	EXTAddress
.c082	a082	b0 11		bcs $a095			bcs 	EXPCExit
.c084	a084	c6 41		dec $41				dec 	EXTAddress+1
.c086	a086	80 0d		bra $a095			bra 	EXPCExit
.c088	a088					EXPCRight:
.c088	a088	c8		iny				iny
.c089	a089	8c a7 07	sty $07a7			sty 	EXTColumn
.c08c	a08c	cc a9 07	cpy $07a9			cpy 	EXTScreenWidth
.c08f	a08f	d0 04		bne $a095			bne 	EXPCExit
.c091	a091	88		dey				dey
.c092	a092					EXPCSetColumnY:
.c092	a092	8c a7 07	sty $07a7			sty 	EXTColumn
.c095	a095					EXPCExit:
.c095	a095	20 bb a1	jsr $a1bb			jsr 	EXTSetHardwareCursor 		; place the physical cursor.
.c098	a098	68		pla				pla
.c099	a099	85 01		sta $01				sta 	1
.c09b	a09b	7a		ply				ply
.c09c	a09c	fa		plx				plx
.c09d	a09d	68		pla				pla
.c09e	a09e	60		rts				rts
.c09f	a09f					EXPCClearScreen:
.c09f	a09f	20 78 a1	jsr $a178			jsr		EXTClearScreenCode
.c0a2	a0a2	80 f1		bra $a095			bra 	EXPCExit
.c0a4	a0a4					EXPCDown:
.c0a4	a0a4	ad aa 07	lda $07aa			lda 	EXTScreenHeight 			; at the bottom
.c0a7	a0a7	3a		dec a				dec 	a
.c0a8	a0a8	cd a6 07	cmp $07a6			cmp 	EXTRow
.c0ab	a0ab	f0 e8		beq $a095			beq 	EXPCExit
.c0ad	a0ad	ee a6 07	inc $07a6			inc 	EXTRow 						; down one in position/address
.c0b0	a0b0	18		clc				clc
.c0b1	a0b1	a5 40		lda $40				lda 	EXTAddress
.c0b3	a0b3	6d a9 07	adc $07a9			adc 	EXTScreenWidth
.c0b6	a0b6	85 40		sta $40				sta 	EXTAddress
.c0b8	a0b8	90 db		bcc $a095			bcc 	EXPCExit
.c0ba	a0ba	e6 41		inc $41				inc 	EXTAddress+1
.c0bc	a0bc	80 d7		bra $a095			bra 	EXPCExit
.c0be	a0be					EXPCTab:
.c0be	a0be	ad a7 07	lda $07a7			lda 	EXTColumn 					; next tab stop
.c0c1	a0c1	29 f8		and #$f8			and 	#$F8
.c0c3	a0c3	18		clc				clc
.c0c4	a0c4	69 08		adc #$08			adc 	#8
.c0c6	a0c6	8d a7 07	sta $07a7			sta 	EXTColumn
.c0c9	a0c9	cd a9 07	cmp $07a9			cmp 	EXTScreenWidth 				; too far, stick end of line.
.c0cc	a0cc	90 c7		bcc $a095			bcc 	EXPCExit
.c0ce	a0ce	80 10		bra $a0e0			bra 	EXPCEnd
.c0d0	a0d0					EXPCBackSpace:
.c0d0	a0d0	88		dey				dey
.c0d1	a0d1	30 c2		bmi $a095			bmi 	EXPCExit
.c0d3	a0d3	ce a7 07	dec $07a7			dec 	EXTColumn
.c0d6	a0d6	a9 02		lda #$02			lda 	#2
.c0d8	a0d8	85 01		sta $01				sta 	1
.c0da	a0da	a9 20		lda #$20			lda 	#32
.c0dc	a0dc	91 40		sta ($40),y			sta 	(EXTAddress),y
.c0de	a0de	80 b5		bra $a095			bra 	EXPCExit
.c0e0	a0e0					EXPCEnd:
.c0e0	a0e0	a9 02		lda #$02			lda 	#2 							; access text screen
.c0e2	a0e2	85 01		sta $01				sta 	1
.c0e4	a0e4	ac a9 07	ldy $07a9			ldy 	EXTScreenWidth 				; point to last character
.c0e7	a0e7	88		dey				dey
.c0e8	a0e8					EXPCEndSearch:
.c0e8	a0e8	88		dey				dey 								; if past start, move to col 0.
.c0e9	a0e9	30 06		bmi $a0f1			bmi 	EXPCFound
.c0eb	a0eb	b1 40		lda ($40),y			lda 	(EXTAddress),y 				; keep going back till non space found
.c0ed	a0ed	c9 20		cmp #$20			cmp 	#' '
.c0ef	a0ef	f0 f7		beq $a0e8			beq 	EXPCEndSearch
.c0f1	a0f1					EXPCFound:
.c0f1	a0f1	c8		iny				iny 								; move to following cell.
.c0f2	a0f2	80 9e		bra $a092			bra 	EXPCSetColumnY
.c0f4	a0f4					EXPCClearEOL:
.c0f4	a0f4	a9 02		lda #$02			lda 	#2 							; access character RAM
.c0f6	a0f6	85 01		sta $01				sta 	1
.c0f8	a0f8	a9 20		lda #$20			lda 	#' ' 						; write space
.c0fa	a0fa	91 40		sta ($40),y			sta 	(EXTAddress),y
.c0fc	a0fc	c8		iny				iny
.c0fd	a0fd	cc a9 07	cpy $07a9			cpy 	EXTScreenWidth 				; until RHS of screen.
.c100	a100	90 f2		bcc $a0f4			bcc 	EXPCClearEOL
.c102	a102	80 91		bra $a095			bra 	EXPCExit
.c104	a104					EXPCActionTable:
>c104	a104	95 a0						.word 	EXPCExit 					; 00
>c106	a106	53 a0						.word 	EXPCBegin 					; 01 A Start of Line
>c108	a108	4e a0						.word 	EXPCLeft 					; 02 B Left
>c10a	a10a	95 a0						.word 	EXPCExit 					; 03 <Break>
>c10c	a10c	95 a0						.word 	EXPCExit 					; 04
>c10e	a10e	e0 a0						.word 	EXPCEnd 					; 05 E End of Line
>c110	a110	88 a0						.word 	EXPCRight 					; 06 F Right
>c112	a112	95 a0						.word 	EXPCExit 					; 07
>c114	a114	d0 a0						.word 	EXPCBackSpace 				; 08 H Backspace
>c116	a116	be a0						.word 	EXPCTab 					; 09 I Tab
>c118	a118	95 a0						.word 	EXPCExit 					; 0A
>c11a	a11a	f4 a0						.word 	EXPCClearEOL 				; 0B K Clear to EOL
>c11c	a11c	9f a0						.word 	EXPCClearScreen			; 0C L CLS
>c11e	a11e	32 a0						.word 	EXPCCRLF 					; 0D M CR/LF
>c120	a120	a4 a0						.word 	EXPCDown 					; 0E N Down
>c122	a122	95 a0						.word 	EXPCExit 					; 0F
>c124	a124	72 a0						.word 	EXPCUp 					; 10 P Up
.c126	a126					EXPCHandleColour:
.c126	a126	c9 90		cmp #$90			cmp 	#$90 						; 8x foreground 9x background
.c128	a128	b0 16		bcs $a140			bcs 	EXPCBackground
.c12a	a12a	0a		asl a				asl 	a 							; shift it 4 bits to the right.
.c12b	a12b	0a		asl a				asl 	a
.c12c	a12c	0a		asl a				asl 	a
.c12d	a12d	0a		asl a				asl 	a
.c12e	a12e	a2 0f		ldx #$0f			ldx 	#$0F 						; Mask in X
.c130	a130					EXPCUpdate:
.c130	a130	48		pha				pha 								; save new colour
.c131	a131	8a		txa				txa 								; get mask
.c132	a132	2d a8 07	and $07a8			and 	EXTTextColour 				; mask out old.
.c135	a135	8d a8 07	sta $07a8			sta 	EXTTextColour
.c138	a138	68		pla				pla 								; or in new colour
.c139	a139	0d a8 07	ora $07a8			ora 	EXTTextColour
.c13c	a13c	8d a8 07	sta $07a8			sta 	EXTTextColour
.c13f	a13f	60		rts				rts
.c140	a140					EXPCBackground:
.c140	a140	29 0f		and #$0f			and 	#$0F 						; get the colour
.c142	a142	a2 f0		ldx #$f0			ldx 	#$F0 						; mask
.c144	a144	80 ea		bra $a130			bra 	EXPCUpdate
.c146	a146					EXTScreenScroll:
.c146	a146	a9 02		lda #$02			lda 	#2 							; select text page
.c148	a148	85 01		sta $01				sta 	1
.c14a	a14a	a9 20		lda #$20			lda		#32 						; fill with space
.c14c	a14c	20 81 a2	jsr $a281			jsr 	EXTScrollFill
.c14f	a14f	e6 01		inc $01				inc 	1 							; select colour page
.c151	a151	ad a8 07	lda $07a8			lda 	EXTTextColour
.c154	a154	20 81 a2	jsr $a281			jsr 	EXTScrollFill
.c157	a157	60		rts				rts
.c158	a158					PAGEDPrintHex:
.c158	a158	48		pha				pha
.c159	a159	a9 20		lda #$20			lda 	#' '
.c15b	a15b	20 0b a0	jsr $a00b			jsr 	PAGEDPrintCharacter
.c15e	a15e	68		pla				pla
.c15f	a15f	48		pha				pha
.c160	a160	4a		lsr a				lsr 	a
.c161	a161	4a		lsr a				lsr 	a
.c162	a162	4a		lsr a				lsr 	a
.c163	a163	4a		lsr a				lsr 	a
.c164	a164	20 68 a1	jsr $a168			jsr 	_PPHNibble
.c167	a167	68		pla				pla
.c168	a168					_PPHNibble:
.c168	a168	48		pha				pha
.c169	a169	29 0f		and #$0f			and 	#15
.c16b	a16b	c9 0a		cmp #$0a			cmp 	#10
.c16d	a16d	90 02		bcc $a171			bcc 	_PPHOut
.c16f	a16f	69 06		adc #$06			adc 	#6
.c171	a171	69 30		adc #$30	_PPHOut:adc 	#48
.c173	a173	20 0b a0	jsr $a00b			jsr		PAGEDPrintCharacter
.c176	a176	68		pla				pla
.c177	a177	60		rts				rts
.c178	a178					EXTClearScreenCode:
.c178	a178	a9 02		lda #$02			lda 	#2 							; select text page
.c17a	a17a	85 01		sta $01				sta 	1
.c17c	a17c	a9 20		lda #$20			lda		#32 						; fill with space
.c17e	a17e	20 8b a1	jsr $a18b			jsr 	_EXTCSFill
.c181	a181	e6 01		inc $01				inc 	1 							; select colour page
.c183	a183	ad a8 07	lda $07a8			lda 	EXTTextColour
.c186	a186	20 8b a1	jsr $a18b			jsr 	_EXTCSFill
.c189	a189	80 22		bra $a1ad			bra 	EXTHomeCursor
.c18b	a18b					_EXTCSFill:
.c18b	a18b	aa		tax				tax
.c18c	a18c	a9 00		lda #$00			lda 	#EXTMemory & $FF
.c18e	a18e	85 40		sta $40				sta 	EXTAddress
.c190	a190	a9 c0		lda #$c0			lda 	#EXTMemory >> 8
.c192	a192	85 41		sta $41				sta 	EXTAddress+1
.c194	a194					_EXTCSFill1:
.c194	a194	a0 00		ldy #$00			ldy 	#0
.c196	a196	8a		txa				txa
.c197	a197					_EXTCSFill2:
.c197	a197	91 40		sta ($40),y			sta 	(EXTAddress),y
.c199	a199	c8		iny				iny
.c19a	a19a	d0 fb		bne $a197			bne 	_EXTCSFill2
.c19c	a19c	e6 41		inc $41				inc 	EXTAddress+1
.c19e	a19e	a5 41		lda $41				lda 	EXTAddress+1
.c1a0	a1a0	c9 d2		cmp #$d2			cmp 	#$D2
.c1a2	a1a2	d0 f0		bne $a194			bne 	_EXTCSFill1
.c1a4	a1a4	8a		txa				txa
.c1a5	a1a5					_EXTCSFill3:
.c1a5	a1a5	91 40		sta ($40),y			sta 	(EXTAddress),y
.c1a7	a1a7	c8		iny				iny
.c1a8	a1a8	c0 c0		cpy #$c0			cpy 	#$C0
.c1aa	a1aa	d0 f9		bne $a1a5			bne 	_EXTCSFill3
.c1ac	a1ac	60		rts				rts
.c1ad	a1ad					EXTHomeCursor:
.c1ad	a1ad	9c a6 07	stz $07a6			stz 	EXTRow 						; reset row & column
.c1b0	a1b0	9c a7 07	stz $07a7			stz 	EXTColumn
.c1b3	a1b3	a9 00		lda #$00			lda 	#EXTMemory & $FF 			; set address
.c1b5	a1b5	85 40		sta $40				sta 	EXTAddress
.c1b7	a1b7	a9 c0		lda #$c0			lda 	#EXTMemory >> 8
.c1b9	a1b9	85 41		sta $41				sta 	EXTAddress+1
.c1bb	a1bb					EXTSetHardwareCursor:
.c1bb	a1bb	64 01		stz $01				stz 	1 							; I/O Page zero
.c1bd	a1bd	a9 05		lda #$05			lda 	#1+4 						; enable cursor
.c1bf	a1bf	8d 10 d0	sta $d010			sta 	$D010
.c1c2	a1c2	a9 d6		lda #$d6			lda 	#214
.c1c4	a1c4	8d 12 d0	sta $d012			sta 	$D012
.c1c7	a1c7	ad a7 07	lda $07a7			lda 	EXTColumn
.c1ca	a1ca	8d 14 d0	sta $d014			sta 	$D014 						; set cursor position
.c1cd	a1cd	9c 15 d0	stz $d015			stz 	$D015
.c1d0	a1d0	ad a6 07	lda $07a6			lda 	EXTRow
.c1d3	a1d3	8d 16 d0	sta $d016			sta 	$D016
.c1d6	a1d6	9c 17 d0	stz $d017			stz 	$D017
.c1d9	a1d9	60		rts				rts
.c1da	a1da					Export_EXTInputLine:
.c1da	a1da	48		pha				pha
.c1db	a1db	da		phx				phx
.c1dc	a1dc	5a		phy				phy
.c1dd	a1dd	a5 01		lda $01				lda 	1 							; save I/O page
.c1df	a1df	48		pha				pha
.c1e0	a1e0					_EILLoop:
.c1e0	a1e0	20 8e 81	jsr $818e			jsr 	KNLGetSingleCharacter 		; get one single character
.c1e3	a1e3	c9 0d		cmp #$0d			cmp 	#13 						; scrape line if exit.
.c1e5	a1e5	f0 44		beq $a22b			beq 	_EILExit
.c1e7	a1e7	c9 04		cmp #$04			cmp 	#4 							; Ctrl+D delete at cursor
.c1e9	a1e9	f0 2a		beq $a215			beq 	_EILDelete
.c1eb	a1eb	c9 08		cmp #$08			cmp 	#8 							; Ctrl+H backspace
.c1ed	a1ed	f0 1c		beq $a20b			beq 	_EILBackspace
.c1ef	a1ef	c9 20		cmp #$20			cmp 	#' '						; < space, print it
.c1f1	a1f1	90 12		bcc $a205			bcc 	_EILPrintLoop
.c1f3	a1f3	c9 7f		cmp #$7f			cmp 	#$7F 						; if -ve print it
.c1f5	a1f5	b0 0e		bcs $a205			bcs 	_EILPrintLoop
.c1f7	a1f7	48		pha				pha 								; save character
.c1f8	a1f8	a9 02		lda #$02			lda 	#2  						; insert a space
.c1fa	a1fa	85 01		sta $01				sta 	1
.c1fc	a1fc	20 6f a2	jsr $a26f			jsr 	EXTILInsert 				; insert in text screen
.c1ff	a1ff	e6 01		inc $01				inc 	1
.c201	a201	20 6f a2	jsr $a26f			jsr 	EXTILInsert 				; insert in colour screen
.c204	a204	68		pla				pla 								; get character back.
.c205	a205					_EILPrintLoop:
.c205	a205	20 0b a0	jsr $a00b			jsr 	PAGEDPrintCharacter
.c208	a208	80 d6		bra $a1e0			bra 	_EILLoop
.c20a	a20a	60		rts				rts
.c20b	a20b					_EILBackspace:
.c20b	a20b	ad a7 07	lda $07a7			lda 	EXTColumn					; can we backspace ?
.c20e	a20e	f0 d0		beq $a1e0			beq 	_EILLoop
.c210	a210	a9 02		lda #$02			lda 	#2 							; move cursor left
.c212	a212	20 0b a0	jsr $a00b			jsr 	PAGEDPrintCharacter
.c215	a215					_EILDelete
.c215	a215	a9 02		lda #$02			lda 	#2 							; text block
.c217	a217	85 01		sta $01				sta 	1
.c219	a219	a9 20		lda #$20			lda 	#' ' 						; backspace text.
.c21b	a21b	20 5a a2	jsr $a25a			jsr 	EXTILDelete
.c21e	a21e	e6 01		inc $01				inc 	1 							; colour block
.c220	a220	ac a7 07	ldy $07a7			ldy 	EXTColumn 					; get attribute of last character
.c223	a223	88		dey				dey
.c224	a224	b1 40		lda ($40),y			lda 	(EXTAddress),y
.c226	a226	20 5a a2	jsr $a25a			jsr 	EXTILDelete 				; backspace attribute
.c229	a229	80 b5		bra $a1e0			bra 	_EILLoop 					; and go round.
.c22b	a22b					_EILExit:
.c22b	a22b	a9 02		lda #$02			lda 	#2 							; switch to page 2
.c22d	a22d	85 01		sta $01				sta 	1
.c22f	a22f	a0 00		ldy #$00			ldy 	#0 							; copy current line into buffer.
.c231	a231					_EILScrapeLine:
.c231	a231	b1 40		lda ($40),y			lda 	(EXTAddress),y
.c233	a233	99 26 05	sta $0526,y			sta 	lineBuffer,y
.c236	a236	c8		iny				iny
.c237	a237	cc a9 07	cpy $07a9			cpy 	EXTScreenWidth
.c23a	a23a	d0 f5		bne $a231			bne 	_EILScrapeLine
.c23c	a23c					_EILTrimSpaces:
.c23c	a23c	88		dey				dey
.c23d	a23d	c0 ff		cpy #$ff			cpy 	#$FF 						; back past the start
.c23f	a23f	f0 07		beq $a248			beq 	_EILEndTrim		 			; zero the input line.
.c241	a241	b9 26 05	lda $0526,y			lda 	lineBuffer,y
.c244	a244	c9 20		cmp #$20			cmp 	#' '
.c246	a246	f0 f4		beq $a23c			beq 	_EILTrimSpaces 				; if fail this found non space character
.c248	a248					_EILEndTrim:
.c248	a248	c8		iny				iny 								; trim after non space character.
.c249	a249	a9 00		lda #$00			lda 	#0 							; trim here.
.c24b	a24b	99 26 05	sta $0526,y			sta 	lineBuffer,y
.c24e	a24e	a9 0d		lda #$0d			lda 	#13 						; echo the RETURN
.c250	a250	20 0b a0	jsr $a00b			jsr 	PAGEDPrintCharacter
.c253	a253	68		pla				pla 								; reset I/O page
.c254	a254	85 01		sta $01				sta 	1
.c256	a256	7a		ply				ply
.c257	a257	fa		plx				plx
.c258	a258	68		pla				pla
.c259	a259	60		rts				rts
.c25a	a25a					EXTILDelete:
.c25a	a25a	48		pha				pha 								; save the new character
.c25b	a25b	ac a7 07	ldy $07a7			ldy 	EXTColumn 					; start copying from here.
.c25e	a25e					_EXTDLoop:
.c25e	a25e	c8		iny				iny 								; copy one byte down.
.c25f	a25f	b1 40		lda ($40),y			lda 	(EXTAddress),y
.c261	a261	88		dey				dey
.c262	a262	91 40		sta ($40),y			sta 	(EXTAddress),y
.c264	a264	c8		iny				iny 								; do till end of line.
.c265	a265	cc a9 07	cpy $07a9			cpy 	EXTScreenWidth
.c268	a268	90 f4		bcc $a25e			bcc 	_EXTDLoop
.c26a	a26a	88		dey				dey 	 							; write in last slot.
.c26b	a26b	68		pla				pla
.c26c	a26c	91 40		sta ($40),y			sta 	(EXTAddress),y
.c26e	a26e	60		rts				rts
.c26f	a26f					EXTILInsert:
.c26f	a26f	ac a9 07	ldy $07a9			ldy 	EXTScreenWidth 				; end position
.c272	a272					_EXTILoop:
.c272	a272	88		dey				dey 								; back one
.c273	a273	cc a7 07	cpy $07a7			cpy 	EXTColumn 					; exit if reached insert point.
.c276	a276	f0 08		beq $a280			beq 	_EXTIExit
.c278	a278	88		dey				dey 								; copy one byte up.
.c279	a279	b1 40		lda ($40),y			lda 	(EXTAddress),y
.c27b	a27b	c8		iny				iny
.c27c	a27c	91 40		sta ($40),y			sta 	(EXTAddress),y
.c27e	a27e	80 f2		bra $a272			bra 	_EXTILoop
.c280	a280					_EXTIExit:
.c280	a280	60		rts				rts
.c281	a281					EXTScrollFill:
.c281	a281	aa		tax				tax									; save value to fill with
.c282	a282	a5 36		lda $36				lda 	zTemp0 						; save zTemp0 (dest) zTemp1 (src)
.c284	a284	48		pha				pha
.c285	a285	a5 37		lda $37				lda 	zTemp0+1
.c287	a287	48		pha				pha
.c288	a288	a5 38		lda $38				lda 	zTemp1
.c28a	a28a	48		pha				pha
.c28b	a28b	a5 39		lda $39				lda 	zTemp1+1
.c28d	a28d	48		pha				pha
.c28e	a28e	a9 c0		lda #$c0			lda 	#$C0 						; copy from C000+length to C000
.c290	a290	85 37		sta $37				sta 	zTemp0+1
.c292	a292	85 39		sta $39				sta 	zTemp1+1
.c294	a294	64 36		stz $36				stz 	zTemp0
.c296	a296	ad a9 07	lda $07a9			lda 	EXTScreenWidth
.c299	a299	85 38		sta $38				sta 	zTemp1
.c29b	a29b	a0 00		ldy #$00			ldy 	#0
.c29d	a29d					_EXSFCopy1:
.c29d	a29d	b1 38		lda ($38),y			lda 	(zTemp1),y
.c29f	a29f	91 36		sta ($36),y			sta 	(zTemp0),y
.c2a1	a2a1	c8		iny				iny
.c2a2	a2a2	d0 f9		bne $a29d			bne 	_EXSFCopy1
.c2a4	a2a4	e6 37		inc $37				inc 	zTemp0+1 					; next page
.c2a6	a2a6	e6 39		inc $39				inc 	zTemp1+1
.c2a8	a2a8	a5 39		lda $39				lda 	zTemp1+1
.c2aa	a2aa	c9 d3		cmp #$d3			cmp 	#$D3
.c2ac	a2ac	d0 ef		bne $a29d			bne 	_EXSFCopy1
.c2ae	a2ae	ac a9 07	ldy $07a9			ldy 	EXTScreenWidth 				; blank the bottom line.
.c2b1	a2b1	8a		txa				txa
.c2b2	a2b2					_EXSFFill1:
.c2b2	a2b2	88		dey				dey
.c2b3	a2b3	91 40		sta ($40),y			sta 	(EXTAddress),y
.c2b5	a2b5	c0 00		cpy #$00			cpy 	#0
.c2b7	a2b7	10 f9		bpl $a2b2			bpl 	_EXSFFill1
.c2b9	a2b9	68		pla				pla
.c2ba	a2ba	85 39		sta $39				sta 	zTemp1+1
.c2bc	a2bc	68		pla				pla
.c2bd	a2bd	85 38		sta $38				sta 	zTemp1
.c2bf	a2bf	68		pla				pla
.c2c0	a2c0	85 37		sta $37				sta 	zTemp0+1
.c2c2	a2c2	68		pla				pla
.c2c3	a2c3	85 36		sta $36				sta 	zTemp0
.c2c5	a2c5	60		rts				rts
=$c000						EXTMemory = $C000
=$02						EXTTextPage = $02
=$03						EXTColourPage = $03
=1						EXTDummySpace = 1 							; fake-space for CR character.
=0						EXTCBlack = 0
.07a6						EXTRow:
>07a6								.fill 	1
.07a7						EXTColumn:
>07a7								.fill 	1
.07a8						EXTTextColour:
>07a8								.fill 	1
.07a9						EXTScreenWidth:
>07a9								.fill 	1
.07aa						EXTScreenHeight:
>07aa								.fill 	1
.0040						EXTAddress:
>0040								.fill 	2
.c2c6	a2c6					Export_EXTInitialise:
.c2c6	a2c6	64 01		stz $01				stz 	1 							; Access I/O page 0
.c2c8	a2c8	9c 04 d0	stz $d004			stz 	$D004 						; Disable border
.c2cb	a2cb	9c 08 d0	stz $d008			stz 	$D008
.c2ce	a2ce	9c 09 d0	stz $d009			stz 	$D009
.c2d1	a2d1	a9 09		lda #$09			lda 	#1+8						; Timer On at 70Hz counting up.
.c2d3	a2d3	8d 58 d6	sta $d658			sta 	$D658
.c2d6	a2d6	a9 52		lda #$52			lda 	#$52
.c2d8	a2d8	8d a8 07	sta $07a8			sta 	EXTTextColour
.c2db	a2db	a9 50		lda #$50			lda 	#80 						; set screen dimensions.
.c2dd	a2dd	8d a9 07	sta $07a9			sta 	EXTScreenWidth
.c2e0	a2e0	a9 3c		lda #$3c			lda 	#60
.c2e2	a2e2	8d aa 07	sta $07aa			sta 	EXTScreenHeight
.c2e5	a2e5	20 78 a1	jsr $a178			jsr 	EXTClearScreenCode 			; clear the screen
.c2e8	a2e8					_EXMoveDown:
.c2e8	a2e8	a9 0d		lda #$0d			lda 	#13
.c2ea	a2ea	20 0b a0	jsr $a00b			jsr 	PAGEDPrintCharacter
.c2ed	a2ed	ad a6 07	lda $07a6			lda 	EXTRow
.c2f0	a2f0	c9 0a		cmp #$0a			cmp 	#Header_Height-4
.c2f2	a2f2	d0 f4		bne $a2e8			bne 	_EXMoveDown
.c2f4	a2f4	20 fa a2	jsr $a2fa			jsr 	EXTShowHeader
.c2f7	a2f7	64 01		stz $01				stz 	1
.c2f9	a2f9	60		rts				rts
.c2fa	a2fa					EXTShowHeader:
.c2fa	a2fa	a5 01		lda $01				lda 	1
.c2fc	a2fc	48		pha				pha
.c2fd	a2fd	a9 02		lda #$02			lda 	#2
.c2ff	a2ff	a2 ff		ldx #$ff			ldx 	#(Header_chars & $FF)
.c301	a301	a0 a4		ldy #$a4			ldy 	#(Header_chars >> 8)
.c303	a303	20 21 a3	jsr $a321			jsr 	_ESHCopyBlock
.c306	a306	a9 03		lda #$03			lda 	#3
.c308	a308	a2 67		ldx #$67			ldx 	#(Header_attrs & $FF)
.c30a	a30a	a0 a3		ldy #$a3			ldy 	#(Header_attrs >> 8)
.c30c	a30c	20 21 a3	jsr $a321			jsr 	_ESHCopyBlock
.c30f	a30f	64 01		stz $01				stz 	1
.c311	a311	a2 3f		ldx #$3f			ldx 	#16*4-1
.c313	a313					_EXTCopyLUT:
.c313	a313	bd 2f a7	lda $a72f,x			lda 	Header_Palette,x
.c316	a316	9d 00 d8	sta $d800,x			sta 	$D800,x
.c319	a319	9d 40 d8	sta $d840,x			sta 	$D840,x
.c31c	a31c	ca		dex				dex
.c31d	a31d	10 f4		bpl $a313			bpl 	_EXTCopyLUT
.c31f	a31f	68		pla				pla
.c320	a320	60		rts				rts
.c321	a321					_ESHCopyBlock:
.c321	a321	85 01		sta $01				sta 	1
.c323	a323	86 36		stx $36				stx 	zTemp0 						; zTemp0 is RLE packed data
.c325	a325	84 37		sty $37				sty 	zTemp0+1
.c327	a327	a9 00		lda #$00			lda 	#(($C000) & $FF)
.c329	a329	85 38		sta $38				sta 	0+zTemp1
.c32b	a32b	a9 c0		lda #$c0			lda 	#(($C000) >> 8)
.c32d	a32d	85 39		sta $39				sta 	1+zTemp1
.c32f	a32f					_ESHCopyLoop:
.c32f	a32f	b2 36		lda ($36)			lda 	(zTemp0) 					; get next character
.c331	a331	c9 ff		cmp #$ff			cmp 	#Header_RLE 				; packed ?
.c333	a333	f0 1b		beq $a350			beq 	_ESHUnpack
.c335	a335	92 38		sta ($38)			sta 	(zTemp1) 					; copy it out.
.c337	a337	a9 01		lda #$01			lda 	#1 							; source add 1
.c339	a339	a0 01		ldy #$01			ldy 	#1 							; dest add 1
.c33b	a33b					_ESHNext:
.c33b	a33b	18		clc				clc 								; zTemp0 + A
.c33c	a33c	65 36		adc $36				adc 	zTemp0
.c33e	a33e	85 36		sta $36				sta 	zTemp0
.c340	a340	90 02		bcc $a344			bcc 	_ESHNoCarry
.c342	a342	e6 37		inc $37				inc 	zTemp0+1
.c344	a344					_ESHNoCarry:
.c344	a344	98		tya				tya 								; zTemp1 + Y
.c345	a345	18		clc				clc
.c346	a346	65 38		adc $38				adc 	zTemp1
.c348	a348	85 38		sta $38				sta 	zTemp1
.c34a	a34a	90 e3		bcc $a32f			bcc 	_ESHCopyLoop
.c34c	a34c	e6 39		inc $39				inc 	zTemp1+1
.c34e	a34e	80 df		bra $a32f			bra 	_ESHCopyLoop
.c350	a350					_ESHUnpack:
.c350	a350	a0 02		ldy #$02			ldy 	#2 							; get count into X
.c352	a352	b1 36		lda ($36),y			lda 	(zTemp0),y
.c354	a354	aa		tax				tax
.c355	a355	88		dey				dey 								; byte into A
.c356	a356	b1 36		lda ($36),y			lda 	(zTemp0),y
.c358	a358	f0 0c		beq $a366			beq 	_ESHExit 					; exit if zero.
.c35a	a35a	a0 00		ldy #$00			ldy 	#0 							; copy start position
.c35c	a35c					_ESHCopyOut:
.c35c	a35c	91 38		sta ($38),y			sta 	(zTemp1),y
.c35e	a35e	c8		iny				iny
.c35f	a35f	ca		dex				dex
.c360	a360	d0 fa		bne $a35c			bne 	_ESHCopyOut
.c362	a362	a9 03		lda #$03			lda 	#3 							; Y is bytes on screen, 3 bytes from source
.c364	a364	80 d5		bra $a33b			bra 	_ESHNext
.c366	a366					_ESHExit:
.c366	a366	60		rts				rts
=14						Header_Height = 14
=255						Header_RLE = 255
.c367	a367					Header_attrs:
>c367	a367	ff 52 59 52 ff d8 07 d8			.byte	255,82,89,82,255,216,7,216,255,82,2,82,255,216,6,216,255,82,2,82,255,216,7,216,255,82,2,82,255,216,6,216,255,82,8,82,210,210,82,82,255,210,7,210,255,82,19,82,104,104,255,82,7,82,104,104,255,82,4,82,104,104,82,82,104,104,255,82,7,82,104,104,255,82,4,82,104,104,255,82,7,82,210,210,82,82,210,210,255,82,4,82,210,210,255,82,18,82,232,232,255,82,14,82,232,232,82,82,232,232,255,82,7,82,232,232,255,82,14,82,210,210,82,82,210,210,255,82,4,82,210,210,255,82,18,82,255,56,5,56,255,82,4,82,255,56,6,56,255,82,2,82,255,56,6,56,255,82,2,82,255,56,7,56,255,82,8,82,210,210,82,82,255,210,7,210,255,82,19,82,120,120,255,82,7,82,120,120,255,82,14,82,120,120,82,82,120,120,255,82,4,82,120,120,82,82,210,210,255,82,3,82,210,210,82,82,210,210,255,82,2,82,210,210,255,82,20,82,168,168,255,82,7,82,168,168,255,82,8,82,168,168,255,82,3,82,168,168,82,82,168,168,255,82,4,82,168,168,82,82,210,210,255,82,3,82,210,210,82,82,210,210,255,82,3,82,210,210,255,82,19,82,72,72,255,82,7,82,255,72,8,72,82,66,82,255,72,5,72,255,82,3,82,255,72,6,72,255,82,3,82,255,210,5,210,255,82,2,82,210,210,255,82,4,82,210,210,255,82,88,82,255,114,80,114,255,226,7,226,255,146,19,146,114,255,146,4,146,255,114,18,114,255,194,24,194,114,114,255,226,10,226,255,146,16,146,114,255,146,4,146,255,114,18,114,255,194,24,194,114,114,255,226,9,226,255,146,17,146,114,255,146,4,146,255,114,18,114,255,194,24,194,255,114,80,114,255,0
>c36f	a36f	ff 52 02 52 ff d8 06 d8 ff 52 02 52 ff d8 07 d8
>c37f	a37f	ff 52 02 52 ff d8 06 d8 ff 52 08 52 d2 d2 52 52
>c38f	a38f	ff d2 07 d2 ff 52 13 52 68 68 ff 52 07 52 68 68
>c39f	a39f	ff 52 04 52 68 68 52 52 68 68 ff 52 07 52 68 68
>c3af	a3af	ff 52 04 52 68 68 ff 52 07 52 d2 d2 52 52 d2 d2
>c3bf	a3bf	ff 52 04 52 d2 d2 ff 52 12 52 e8 e8 ff 52 0e 52
>c3cf	a3cf	e8 e8 52 52 e8 e8 ff 52 07 52 e8 e8 ff 52 0e 52
>c3df	a3df	d2 d2 52 52 d2 d2 ff 52 04 52 d2 d2 ff 52 12 52
>c3ef	a3ef	ff 38 05 38 ff 52 04 52 ff 38 06 38 ff 52 02 52
>c3ff	a3ff	ff 38 06 38 ff 52 02 52 ff 38 07 38 ff 52 08 52
>c40f	a40f	d2 d2 52 52 ff d2 07 d2 ff 52 13 52 78 78 ff 52
>c41f	a41f	07 52 78 78 ff 52 0e 52 78 78 52 52 78 78 ff 52
>c42f	a42f	04 52 78 78 52 52 d2 d2 ff 52 03 52 d2 d2 52 52
>c43f	a43f	d2 d2 ff 52 02 52 d2 d2 ff 52 14 52 a8 a8 ff 52
>c44f	a44f	07 52 a8 a8 ff 52 08 52 a8 a8 ff 52 03 52 a8 a8
>c45f	a45f	52 52 a8 a8 ff 52 04 52 a8 a8 52 52 d2 d2 ff 52
>c46f	a46f	03 52 d2 d2 52 52 d2 d2 ff 52 03 52 d2 d2 ff 52
>c47f	a47f	13 52 48 48 ff 52 07 52 ff 48 08 48 52 42 52 ff
>c48f	a48f	48 05 48 ff 52 03 52 ff 48 06 48 ff 52 03 52 ff
>c49f	a49f	d2 05 d2 ff 52 02 52 d2 d2 ff 52 04 52 d2 d2 ff
>c4af	a4af	52 58 52 ff 72 50 72 ff e2 07 e2 ff 92 13 92 72
>c4bf	a4bf	ff 92 04 92 ff 72 12 72 ff c2 18 c2 72 72 ff e2
>c4cf	a4cf	0a e2 ff 92 10 92 72 ff 92 04 92 ff 72 12 72 ff
>c4df	a4df	c2 18 c2 72 72 ff e2 09 e2 ff 92 11 92 72 ff 92
>c4ef	a4ef	04 92 ff 72 12 72 ff c2 18 c2 ff 72 50 72 ff 00
.c4ff	a4ff					Header_chars:
>c4ff	a4ff	ff 20 59 20 ff 08 07 08			.byte	255,32,89,32,255,8,7,8,255,32,2,32,255,8,6,8,255,32,2,32,255,8,7,8,255,32,2,32,255,8,6,8,255,32,8,32,252,252,32,32,255,252,7,252,255,32,19,32,8,8,255,32,7,32,8,8,255,32,4,32,8,8,32,32,8,8,255,32,7,32,8,8,255,32,4,32,8,8,255,32,7,32,252,252,32,32,252,252,255,32,4,32,252,252,255,32,18,32,8,8,255,32,14,32,8,8,32,32,8,8,255,32,7,32,8,8,255,32,14,32,252,252,32,32,252,252,255,32,4,32,252,252,255,32,18,32,255,8,5,8,255,32,4,32,255,8,6,8,255,32,2,32,255,8,6,8,255,32,2,32,255,8,7,8,255,32,8,32,252,252,32,32,255,252,7,252,255,32,19,32,8,8,255,32,7,32,8,8,255,32,14,32,8,8,32,32,8,8,255,32,4,32,8,8,32,32,252,252,255,32,3,32,252,252,32,32,252,252,255,32,2,32,252,252,255,32,20,32,8,8,255,32,7,32,8,8,255,32,8,32,8,8,255,32,3,32,8,8,32,32,8,8,255,32,4,32,8,8,32,32,252,252,255,32,3,32,252,252,32,32,252,252,255,32,3,32,252,252,255,32,19,32,8,8,255,32,7,32,255,8,8,8,255,32,2,32,255,8,5,8,255,32,3,32,255,8,6,8,255,32,3,32,255,252,5,252,255,32,2,32,252,252,255,32,4,32,252,252,255,32,88,32,160,255,150,27,150,155,255,150,22,150,155,255,150,24,150,161,130,72,97,114,100,119,97,114,101,255,32,19,32,130,221,50,48,50,50,32,83,116,101,102,97,110,121,32,65,108,108,97,105,114,101,32,32,130,99,50,53,54,102,111,101,110,105,120,46,99,111,109,47,102,50,53,54,45,106,114,255,32,2,32,130,130,77,105,99,114,111,75,101,114,110,101,108,255,32,16,32,130,221,50,48,50,50,32,74,101,115,115,105,101,32,79,98,101,114,114,101,117,116,101,114,130,71,97,100,103,101,116,64,72,97,99,107,119,114,101,110,99,104,76,97,98,115,46,99,111,109,130,130,83,117,112,101,114,66,65,83,73,67,255,32,17,32,130,221,50,48,50,50,32,80,97,117,108,32,82,111,98,115,111,110,255,32,5,32,130,80,97,117,108,64,82,111,98,115,111,110,115,46,111,114,103,46,117,107,255,32,5,32,130,162,255,150,27,150,157,255,150,22,150,157,255,150,24,150,163,255,0
>c507	a507	ff 20 02 20 ff 08 06 08 ff 20 02 20 ff 08 07 08
>c517	a517	ff 20 02 20 ff 08 06 08 ff 20 08 20 fc fc 20 20
>c527	a527	ff fc 07 fc ff 20 13 20 08 08 ff 20 07 20 08 08
>c537	a537	ff 20 04 20 08 08 20 20 08 08 ff 20 07 20 08 08
>c547	a547	ff 20 04 20 08 08 ff 20 07 20 fc fc 20 20 fc fc
>c557	a557	ff 20 04 20 fc fc ff 20 12 20 08 08 ff 20 0e 20
>c567	a567	08 08 20 20 08 08 ff 20 07 20 08 08 ff 20 0e 20
>c577	a577	fc fc 20 20 fc fc ff 20 04 20 fc fc ff 20 12 20
>c587	a587	ff 08 05 08 ff 20 04 20 ff 08 06 08 ff 20 02 20
>c597	a597	ff 08 06 08 ff 20 02 20 ff 08 07 08 ff 20 08 20
>c5a7	a5a7	fc fc 20 20 ff fc 07 fc ff 20 13 20 08 08 ff 20
>c5b7	a5b7	07 20 08 08 ff 20 0e 20 08 08 20 20 08 08 ff 20
>c5c7	a5c7	04 20 08 08 20 20 fc fc ff 20 03 20 fc fc 20 20
>c5d7	a5d7	fc fc ff 20 02 20 fc fc ff 20 14 20 08 08 ff 20
>c5e7	a5e7	07 20 08 08 ff 20 08 20 08 08 ff 20 03 20 08 08
>c5f7	a5f7	20 20 08 08 ff 20 04 20 08 08 20 20 fc fc ff 20
>c607	a607	03 20 fc fc 20 20 fc fc ff 20 03 20 fc fc ff 20
>c617	a617	13 20 08 08 ff 20 07 20 ff 08 08 08 ff 20 02 20
>c627	a627	ff 08 05 08 ff 20 03 20 ff 08 06 08 ff 20 03 20
>c637	a637	ff fc 05 fc ff 20 02 20 fc fc ff 20 04 20 fc fc
>c647	a647	ff 20 58 20 a0 ff 96 1b 96 9b ff 96 16 96 9b ff
>c657	a657	96 18 96 a1 82 48 61 72 64 77 61 72 65 ff 20 13
>c667	a667	20 82 dd 32 30 32 32 20 53 74 65 66 61 6e 79 20
>c677	a677	41 6c 6c 61 69 72 65 20 20 82 63 32 35 36 66 6f
>c687	a687	65 6e 69 78 2e 63 6f 6d 2f 66 32 35 36 2d 6a 72
>c697	a697	ff 20 02 20 82 82 4d 69 63 72 6f 4b 65 72 6e 65
>c6a7	a6a7	6c ff 20 10 20 82 dd 32 30 32 32 20 4a 65 73 73
>c6b7	a6b7	69 65 20 4f 62 65 72 72 65 75 74 65 72 82 47 61
>c6c7	a6c7	64 67 65 74 40 48 61 63 6b 77 72 65 6e 63 68 4c
>c6d7	a6d7	61 62 73 2e 63 6f 6d 82 82 53 75 70 65 72 42 41
>c6e7	a6e7	53 49 43 ff 20 11 20 82 dd 32 30 32 32 20 50 61
>c6f7	a6f7	75 6c 20 52 6f 62 73 6f 6e ff 20 05 20 82 50 61
>c707	a707	75 6c 40 52 6f 62 73 6f 6e 73 2e 6f 72 67 2e 75
>c717	a717	6b ff 20 05 20 82 a2 ff 96 1b 96 9d ff 96 16 96
>c727	a727	9d ff 96 18 96 a3 ff 00
.c72f	a72f					Header_Palette:
>c72f	a72f	00 00 00 00				.dword $000000
>c733	a733	66 66 66 00				.dword $666666
>c737	a737	aa 00 00 00				.dword $0000aa
>c73b	a73b	00 aa 00 00				.dword $00aa00
>c73f	a73f	ea 41 c0 00				.dword $c041ea
>c743	a743	00 48 87 00				.dword $874800
>c747	a747	00 9c ff 00				.dword $ff9c00
>c74b	a74b	ff db 57 00				.dword $57dbff
>c74f	a74f	28 3f 3f 00				.dword $3f3f28
>c753	a753	8a aa aa 00				.dword $aaaa8a
>c757	a757	ff 55 55 00				.dword $5555ff
>c75b	a75b	55 ff 55 00				.dword $55ff55
>c75f	a75f	ed 8d ff 00				.dword $ff8ded
>c763	a763	00 00 ff 00				.dword $ff0000
>c767	a767	55 ff ff 00				.dword $ffff55
>c76b	a76b	ff ff ff 00				.dword $ffffff
>c76f	a76f	ff ff ff 00				.dword $ffffff
>c773	a773	ff ff ff 00				.dword $ffffff

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_graphics.module

=1						graphicsIntegrated=1
=0						GCMD_Initialise = 0*2
=2						GCMD_BitmapCtl = 1*2
=4						GCMD_SpriteCtl = 2*2
=6						GCMD_Clear = 3*2
=8						GCMD_Colour = 4*2
=10						GCMD_DrawFont = 5*2
=12						GCMD_DrawSprite = 6*2
=14						GCMD_SpriteUse = 7*2
=16						GCMD_SpriteImage = 8*2
=18						GCMD_SpriteCollide = 9*2
=64						GCMD_Move = 32*2
=66						GCMD_Line = 33*2
=68						GCMD_FrameRect = 34*2
=70						GCMD_FillRect = 35*2
=72						GCMD_FrameCircle = 36*2
=74						GCMD_FillCircle = 37*2
=80						GCMD_Plot = 40*2
=82						GCMD_SpriteMove = 41*2
=42						GRFirstFreeCode = 42
.c777	a777					GRVectorTable:
>c777	a777	c6 a9					.word	GXInitialise             ; $00 Initialise
>c779	a779	e0 a9					.word	GXControlBitmap          ; $01 BitmapCtl
>c77b	a77b	28 aa					.word	GXControlSprite          ; $02 SpriteCtl
>c77d	a77d	78 a9					.word	GXClearBitmap            ; $03 Clear
>c77f	a77f	b7 ab					.word	GXSetColourMode          ; $04 Colour
>c781	a781	7f ad					.word	GXFontHandler            ; $05 DrawFont
>c783	a783	c7 ad					.word	GXSpriteHandler          ; $06 DrawSprite
>c785	a785	38 ae					.word	GXSelect                 ; $07 SpriteUse
>c787	a787	61 ae					.word	GXSelectImage            ; $08 SpriteImage
>c789	a789	e8 af					.word	GXCollide                ; $09 SpriteCollide
>c78b	a78b	2a a8					.word	GRUndefined              ; $0a
>c78d	a78d	2a a8					.word	GRUndefined              ; $0b
>c78f	a78f	2a a8					.word	GRUndefined              ; $0c
>c791	a791	2a a8					.word	GRUndefined              ; $0d
>c793	a793	2a a8					.word	GRUndefined              ; $0e
>c795	a795	2a a8					.word	GRUndefined              ; $0f
>c797	a797	2a a8					.word	GRUndefined              ; $10
>c799	a799	2a a8					.word	GRUndefined              ; $11
>c79b	a79b	2a a8					.word	GRUndefined              ; $12
>c79d	a79d	2a a8					.word	GRUndefined              ; $13
>c79f	a79f	2a a8					.word	GRUndefined              ; $14
>c7a1	a7a1	2a a8					.word	GRUndefined              ; $15
>c7a3	a7a3	2a a8					.word	GRUndefined              ; $16
>c7a5	a7a5	2a a8					.word	GRUndefined              ; $17
>c7a7	a7a7	2a a8					.word	GRUndefined              ; $18
>c7a9	a7a9	2a a8					.word	GRUndefined              ; $19
>c7ab	a7ab	2a a8					.word	GRUndefined              ; $1a
>c7ad	a7ad	2a a8					.word	GRUndefined              ; $1b
>c7af	a7af	2a a8					.word	GRUndefined              ; $1c
>c7b1	a7b1	2a a8					.word	GRUndefined              ; $1d
>c7b3	a7b3	2a a8					.word	GRUndefined              ; $1e
>c7b5	a7b5	2a a8					.word	GRUndefined              ; $1f
>c7b7	a7b7	28 a8					.word	GXMove                   ; $20 Move
>c7b9	a7b9	85 aa					.word	GXLine                   ; $21 Line
>c7bb	a7bb	00 ac					.word	GXFrameRectangle         ; $22 FrameRect
>c7bd	a7bd	fd ab					.word	GXFillRectangle          ; $23 FillRect
>c7bf	a7bf	2f a8					.word	GXFrameCircle            ; $24 FrameCircle
>c7c1	a7c1	2b a8					.word	GXFillCircle             ; $25 FillCircle
>c7c3	a7c3	2a a8					.word	GRUndefined              ; $26
>c7c5	a7c5	2a a8					.word	GRUndefined              ; $27
>c7c7	a7c7	e5 ab					.word	GXPlotPoint              ; $28 Plot
>c7c9	a7c9	f7 ae					.word	GXMoveSprite             ; $29 SpriteMove
=3						GXMappingPage = 3
=24576						GXMappingAddress = ($2000 * GXMappingPage)
=11						GXEditSlot = 8 + GXMappingPage
=$36						gxzTemp0 = zTemp0
=$38						gxzTemp1 = zTemp1
=$3a						gxzTemp2 = zTemp2
=$3c						gxzScreen = zsTemp
=$623						gxPixelBuffer = numberBuffer
.07ab						gxCurrentX:
>07ab								.fill 	2
.07ad						gxCurrentY:
>07ad								.fill 	2
.07af						gxLastX:
>07af								.fill 	2
.07b1						gxLastY:
>07b1								.fill 	2
.07b3						gxX0:
>07b3								.fill 	2
.07b5						gxY0:
>07b5								.fill 	2
.07b7						gxX1:
>07b7								.fill 	2
.07b9						gxY1:
>07b9								.fill 	2
.07bb						gxSpritesOn:
>07bb								.fill 	1
.07bc						gxBitmapsOn:
>07bc								.fill 	1
.07bd						gxBasePage:
>07bd								.fill 	1
.07be						gxSpritePage:
>07be								.fill 	1
.07bf						gxHeight:
>07bf								.fill 	1
.07c0						gxMode:
>07c0								.fill 	1
.07c1						gxColour:
>07c1								.fill 	1
.07c2						gxEORValue:
>07c2								.fill 	1
.07c3						gxANDValue:
>07c3								.fill 	1
.07c4						gxOriginalLUTValue:
>07c4								.fill 	1
.07c5						gxOffset:
>07c5								.fill 	1
.07c6						GSCurrentSpriteID:
>07c6								.fill 	1
.07c7						GSCurrentSpriteAddr:
>07c7								.fill 	2
.07c9						gxSpriteOffsetBase:
>07c9								.fill 	2
.07cb						gxSpriteLow:
>07cb								.fill 	64
.080b						gxSpriteHigh:
>080b								.fill 	64
.c7cb	a7cb					Export_GXGraphicDraw:
.c7cb	a7cb	c9 40		cmp #$40			cmp 	#GCMD_Move					; low instructions don't use coordinates
.c7cd	a7cd	b0 06		bcs $a7d5			bcs 	_GDCoordinate
.c7cf	a7cf	86 36		stx $36				stx 	gxzTemp0 					; save X/Y
.c7d1	a7d1	84 37		sty $37				sty 	gxzTemp0+1
.c7d3	a7d3	80 4b		bra $a820			bra 	_GDExecuteA 				; and execute
.c7d5	a7d5					_GDCoordinate:
.c7d5	a7d5	48		pha				pha 								; save AXY
.c7d6	a7d6	da		phx				phx
.c7d7	a7d7	5a		phy				phy
.c7d8	a7d8	a2 03		ldx #$03			ldx 	#3 							; copy currentX to lastX
.c7da	a7da					_GDCopy1:
.c7da	a7da	bd ab 07	lda $07ab,x			lda 	gxCurrentX,x
.c7dd	a7dd	9d af 07	sta $07af,x			sta 	gxLastX,x
.c7e0	a7e0	ca		dex				dex
.c7e1	a7e1	10 f7		bpl $a7da			bpl 	_GDCopy1
.c7e3	a7e3	68		pla				pla 								; update Y
.c7e4	a7e4	8d ad 07	sta $07ad			sta 	gxCurrentY
.c7e7	a7e7	9c ae 07	stz $07ae			stz 	gxCurrentY+1
.c7ea	a7ea	68		pla				pla
.c7eb	a7eb	8d ab 07	sta $07ab			sta 	gxCurrentX
.c7ee	a7ee	68		pla				pla 								; get A (command+X.1) back
.c7ef	a7ef	48		pha				pha
.c7f0	a7f0	29 01		and #$01			and 	#1 							; put LSB as MSB of Current.X
.c7f2	a7f2	8d ac 07	sta $07ac			sta 	gxCurrentX+1
.c7f5	a7f5	68		pla				pla 								; get command back
.c7f6	a7f6	29 fe		and #$fe			and 	#$FE 						; lose LSB, chuck the stray X bit
.c7f8	a7f8	48		pha				pha 								; push back.
.c7f9	a7f9	c9 52		cmp #$52			cmp 	#GCMD_SpriteMove 			; move sprite does not clip.
.c7fb	a7fb	f0 17		beq $a814			beq 	_GDCopyToWorkArea
.c7fd	a7fd	ad ac 07	lda $07ac			lda 	gxCurrentX+1 				; X < 256 X okay
.c800	a800	f0 07		beq $a809			beq 	_GDCheckY
.c802	a802	ad ab 07	lda $07ab			lda 	gxCurrentX 					; otherwise X < 320 = 256 + 64
.c805	a805	c9 40		cmp #$40			cmp 	#64
.c807	a807	b0 08		bcs $a811			bcs 	_GDError1
.c809	a809					_GDCheckY:
.c809	a809	ad ad 07	lda $07ad			lda 	gxCurrentY 					; check Y < Height.
.c80c	a80c	cd bf 07	cmp $07bf			cmp 	gxHeight
.c80f	a80f	90 03		bcc $a814			bcc 	_GDCopyToWorkArea
.c811	a811					_GDError1:
.c811	a811	68		pla				pla
.c812	a812					_GDError2:
.c812	a812	38		sec				sec
.c813	a813	60		rts				rts
.c814	a814					_GDCopyToWorkArea:
.c814	a814	a2 07		ldx #$07			ldx 	#7 							; copy current and last to gxXY/12 work area
.c816	a816					_GDCopy2:
.c816	a816	bd ab 07	lda $07ab,x			lda 	gxCurrentX,x
.c819	a819	9d b3 07	sta $07b3,x			sta 	gxX0,x
.c81c	a81c	ca		dex				dex
.c81d	a81d	10 f7		bpl $a816			bpl 	_GDCopy2
.c81f	a81f	68		pla				pla 								; get command
.c820	a820					_GDExecuteA:
.c820	a820	c9 54		cmp #$54			cmp 	#GRFirstFreeCode*2 			; bad ?
.c822	a822	b0 ee		bcs $a812			bcs 	_GDError2
.c824	a824	aa		tax				tax
.c825	a825	7c 77 a7	jmp ($a777,x)			jmp 	(GRVectorTable,x)
.c828	a828					GXMove:
.c828	a828	18		clc				clc
.c829	a829	60		rts				rts
.c82a	a82a					GRUndefined:
>c82a	a82a	db						.byte 	$DB 						; causes a break in the emulator
.c82b	a82b					GXFillCircle:
.c82b	a82b	a9 ff		lda #$ff			lda 	#255
.c82d	a82d	80 02		bra $a831			bra 	GXCircle
.c82f	a82f					GXFrameCircle:
.c82f	a82f	a9 00		lda #$00			lda 	#0
.c831	a831					GXCircle:
.c831	a831	8d 4e 08	sta $084e			sta 	gxIsFillMode					; save Fill flag
.c834	a834	ad bc 07	lda $07bc			lda 	gxBitmapsOn
.c837	a837	f0 26		beq $a85f			beq 	_GXCFail
.c839	a839	20 8f b0	jsr $b08f			jsr 	GXSortXY 					; topleft/bottomright
.c83c	a83c	20 67 af	jsr $af67			jsr 	GXOpenBitmap 				; start drawing
.c83f	a83f	20 31 a9	jsr $a931			jsr 	GXCircleSetup 				; set up for drawing
.c842	a842	9c 4f 08	stz $084f			stz 	gxYChanged
.c845	a845					_GXCircleDraw:
.c845	a845	ad 4c 08	lda $084c			lda 	gxxCentre					; while x <= y
.c848	a848	cd 4d 08	cmp $084d			cmp 	gxYCentre
.c84b	a84b	90 0a		bcc $a857			bcc 	_GXCircleContinue
.c84d	a84d	d0 03		bne $a852			bne 	_GXNoLast
.c84f	a84f	20 64 a8	jsr $a864			jsr 	GXPlot1
.c852	a852					_GXNoLast:
.c852	a852	20 6f af	jsr $af6f			jsr 	GXCloseBitmap 				; close the bitmap
.c855	a855	18		clc				clc
.c856	a856	60		rts				rts
.c857	a857					_GXCircleContinue:
.c857	a857	20 61 a8	jsr $a861			jsr 	GXPlot2 					; draw it
.c85a	a85a	20 de a8	jsr $a8de			jsr 	GXCircleMove 				; adjust the coordinates
.c85d	a85d	80 e6		bra $a845			bra 	_GXCircleDraw
.c85f	a85f					_GXCFail:
.c85f	a85f	38		sec				sec
.c860	a860	60		rts				rts
.c861	a861					GXPlot2:
.c861	a861	20 64 a8	jsr $a864			jsr 	GXPlot1 						; plot and swap, fall through does twice
.c864	a864					GXPlot1:
.c864	a864	ad 4d 08	lda $084d			lda 	gxYCentre 						; if y = 0, don't do it twice (xor)
.c867	a867	f0 03		beq $a86c			beq 	_GXPlot1Only
.c869	a869	20 88 a8	jsr $a888			jsr 	GXPlot0 						; plot and negate
.c86c	a86c					_GXPlot1Only:
.c86c	a86c	20 88 a8	jsr $a888			jsr 	GXPlot0 						; twice, undoing negation
.c86f	a86f	ad 4c 08	lda $084c			lda 	gxxCentre 						; swap X and Y
.c872	a872	ae 4d 08	ldx $084d			ldx	 	gxYCentre
.c875	a875	8d 4d 08	sta $084d			sta 	gxYCentre
.c878	a878	8e 4c 08	stx $084c			stx 	gxxCentre
.c87b	a87b	ad 4f 08	lda $084f			lda 	gxYChanged 						; toggle Y Changed flag
.c87e	a87e	a9 ff		lda #$ff			lda 	#$FF
.c880	a880	8d 4f 08	sta $084f			sta 	gxYChanged
.c883	a883	60		rts				rts
.c884	a884	20 88 a8	jsr $a888			jsr 	GXPlot0 						; do once
.c887	a887	60		rts				rts
.c888	a888	ad 4e 08	lda $084e	GXPlot0:lda 	gxIsFillMode 					; outline mode, always draw as X or Y will change
.c88b	a88b	f0 05		beq $a892			beq 	_GXPlot0Always
.c88d	a88d	ad 4f 08	lda $084f			lda 	gxYChanged						; fill mode, only draw if changed.
.c890	a890	f0 2d		beq $a8bf			beq 	GXPlot0Exit
.c892	a892					_GXPlot0Always:
.c892	a892	a2 02		ldx #$02			ldx 	#2 								; copy Y1-A => Y0
.c894	a894	ad 4d 08	lda $084d			lda 	gxYCentre
.c897	a897	20 c0 a8	jsr $a8c0			jsr 	GXSubCopy
.c89a	a89a	a2 00		ldx #$00			ldx 	#0 								; copy X1-A => X0,
.c89c	a89c	ad 4c 08	lda $084c			lda 	gxxCentre
.c89f	a89f	20 c0 a8	jsr $a8c0			jsr 	GXSubCopy
.c8a2	a8a2	48		pha				pha 									; save last offset X
.c8a3	a8a3	20 77 af	jsr $af77			jsr 	gxPositionCalc 					; calculate position/offset.
.c8a6	a8a6	68		pla				pla
.c8a7	a8a7	0a		asl a				asl 	a 								; store 2 x last offset in gxzTemp0
.c8a8	a8a8	85 36		sta $36				sta 	gxzTemp0
.c8aa	a8aa	64 37		stz $37				stz 	gxzTemp0+1
.c8ac	a8ac	26 37		rol $37				rol 	gxzTemp0+1
.c8ae	a8ae	ad 4e 08	lda $084e			lda 	gxIsFillMode
.c8b1	a8b1	69 80		adc #$80			adc 	#128
.c8b3	a8b3	20 50 ac	jsr $ac50			jsr 	GXDrawLineTemp0 				; routine from Rectangle.
.c8b6	a8b6	38		sec				sec 									; GY = -GY
.c8b7	a8b7	a9 00		lda #$00			lda 	#0
.c8b9	a8b9	ed 4d 08	sbc $084d			sbc 	gxYCentre
.c8bc	a8bc	8d 4d 08	sta $084d			sta 	gxYCentre
.c8bf	a8bf					GXPlot0Exit:
.c8bf	a8bf	60		rts				rts
.c8c0	a8c0					GXSubCopy:
.c8c0	a8c0	85 36		sta $36				sta 	gxzTemp0
.c8c2	a8c2	64 37		stz $37				stz 	gxzTemp0+1
.c8c4	a8c4	29 80		and #$80			and 	#$80
.c8c6	a8c6	f0 02		beq $a8ca			beq 	_GXNoSx
.c8c8	a8c8	c6 37		dec $37				dec 	gxzTemp0+1
.c8ca	a8ca					_GXNoSx:
.c8ca	a8ca	38		sec				sec
.c8cb	a8cb	bd b7 07	lda $07b7,x			lda 	gxX1,x
.c8ce	a8ce	e5 36		sbc $36				sbc 	gxzTemp0
.c8d0	a8d0	9d b3 07	sta $07b3,x			sta 	gxX0,x
.c8d3	a8d3	bd b8 07	lda $07b8,x			lda 	gxX1+1,x
.c8d6	a8d6	e5 37		sbc $37				sbc 	gxzTemp0+1
.c8d8	a8d8	9d b4 07	sta $07b4,x			sta 	gxX0+1,x
.c8db	a8db	a5 36		lda $36				lda 	gxzTemp0 						; return A
.c8dd	a8dd	60		rts				rts
.c8de	a8de					GXCircleMove:
.c8de	a8de	9c 4f 08	stz $084f			stz 	gxYChanged 					; clear Y changed flag
.c8e1	a8e1	a5 39		lda $39				lda 	gxzTemp1+1 					; check sign of D
.c8e3	a8e3	10 0d		bpl $a8f2			bpl 	_GXEMPositive
.c8e5	a8e5	ee 4c 08	inc $084c			inc 	gxxCentre 					; X++
.c8e8	a8e8	ad 4c 08	lda $084c			lda 	gxxCentre
.c8eb	a8eb	20 11 a9	jsr $a911			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.c8ee	a8ee	a9 06		lda #$06			lda 	#6  						; and add 6
.c8f0	a8f0	80 15		bra $a907			bra 	_GXEMAddD
.c8f2	a8f2					_GXEMPositive:
.c8f2	a8f2	ee 4c 08	inc $084c			inc 	gxxCentre					; X++
.c8f5	a8f5	ce 4d 08	dec $084d			dec 	gxYCentre 					; Y--
.c8f8	a8f8	38		sec				sec 								; calculate X-Y
.c8f9	a8f9	ad 4c 08	lda $084c			lda 	gxxCentre
.c8fc	a8fc	ed 4d 08	sbc $084d			sbc 	gxYCentre
.c8ff	a8ff	20 11 a9	jsr $a911			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.c902	a902	a9 0a		lda #$0a			lda 	#10  						; and add 10
.c904	a904	ce 4f 08	dec $084f			dec 	gxYChanged
.c907	a907					_GXEMAddD:
.c907	a907	18		clc				clc
.c908	a908	65 38		adc $38				adc 	gxzTemp1
.c90a	a90a	85 38		sta $38				sta 	gxzTemp1
.c90c	a90c	90 02		bcc $a910			bcc 	_GXEMNoCarry
.c90e	a90e	e6 39		inc $39				inc 	gxzTemp1+1
.c910	a910					_GXEMNoCarry:
.c910	a910	60		rts				rts
.c911	a911					_GXAdd4TimesToD:
.c911	a911	85 36		sta $36				sta 	gxzTemp0 					; make 16 bit signed.
.c913	a913	29 80		and #$80			and 	#$80
.c915	a915	f0 02		beq $a919			beq 	_GXA4Unsigned
.c917	a917	a9 ff		lda #$ff			lda 	#$FF
.c919	a919					_GXA4Unsigned:
.c919	a919	85 37		sta $37				sta 	gxzTemp0+1
.c91b	a91b	06 36		asl $36				asl 	gxzTemp0  					; x 4
.c91d	a91d	26 37		rol $37				rol 	gxzTemp0+1
.c91f	a91f	06 36		asl $36				asl 	gxzTemp0
.c921	a921	26 37		rol $37				rol 	gxzTemp0+1
.c923	a923	18		clc				clc 								; add
.c924	a924	a5 36		lda $36				lda		gxzTemp0
.c926	a926	65 38		adc $38				adc 	gxzTemp1
.c928	a928	85 38		sta $38				sta 	gxzTemp1
.c92a	a92a	a5 37		lda $37				lda		gxzTemp0+1
.c92c	a92c	65 39		adc $39				adc 	gxzTemp1+1
.c92e	a92e	85 39		sta $39				sta 	gxzTemp1+1
.c930	a930	60		rts				rts
.c931	a931					GXCircleSetup:
.c931	a931	38		sec				sec
.c932	a932	ad b9 07	lda $07b9			lda 	gxY1
.c935	a935	ed b5 07	sbc $07b5			sbc 	gxY0
.c938	a938	4a		lsr a				lsr 	a
.c939	a939	8d 4b 08	sta $084b			sta 	gxRadius
.c93c	a93c	a2 00		ldx #$00			ldx 	#0
.c93e	a93e	20 60 a9	jsr $a960			jsr 	_GXCalculateCentre
.c941	a941	a2 02		ldx #$02			ldx 	#2
.c943	a943	20 60 a9	jsr $a960			jsr 	_GXCalculateCentre
.c946	a946	9c 4c 08	stz $084c			stz 	gxxCentre
.c949	a949	ad 4b 08	lda $084b			lda 	gxRadius
.c94c	a94c	8d 4d 08	sta $084d			sta 	gxYCentre
.c94f	a94f	0a		asl a				asl 	a 							; R x 2
.c950	a950	85 36		sta $36				sta 	gxzTemp0
.c952	a952	38		sec				sec
.c953	a953	a9 03		lda #$03			lda 	#3
.c955	a955	e5 36		sbc $36				sbc 	gxzTemp0
.c957	a957	85 38		sta $38				sta 	gxzTemp1
.c959	a959	a9 00		lda #$00			lda 	#0
.c95b	a95b	e9 00		sbc #$00			sbc 	#0
.c95d	a95d	85 39		sta $39				sta 	gxzTemp1+1
.c95f	a95f	60		rts				rts
.c960	a960					_GXCalculateCentre:
.c960	a960	38		sec				sec
.c961	a961	bd b7 07	lda $07b7,x			lda 	gxX1,x
.c964	a964	7d b3 07	adc $07b3,x			adc 	gxX0,x
.c967	a967	9d b7 07	sta $07b7,x			sta 	gxX1,x
.c96a	a96a	bd b8 07	lda $07b8,x			lda 	gxX1+1,x
.c96d	a96d	7d b4 07	adc $07b4,x			adc 	gxX0+1,x
.c970	a970	4a		lsr a				lsr 	a
.c971	a971	9d b8 07	sta $07b8,x			sta 	gxX1+1,x
.c974	a974	7e b7 07	ror $07b7,x			ror 	gxX1,x
.c977	a977	60		rts				rts
.084b						gxRadius:
>084b								.fill 	1
.084c						gxxCentre:
>084c								.fill 	1
.084d						gxYCentre:
>084d								.fill 	1
.084e						gxIsFillMode:
>084e								.fill 	1
.084f						gxYChanged:
>084f								.fill  	1
=64000						ScreenSize200 = 320 * 200
=76800						ScreenSize240 = 320 * 240
.c978	a978					GXClearBitmap:
.c978	a978	ad bc 07	lda $07bc			lda 	gxBitmapsOn 				; check BMP running.
.c97b	a97b	f0 24		beq $a9a1			beq 	_GXCBFail
.c97d	a97d	20 67 af	jsr $af67			jsr 	GXOpenBitmap 				; start access
.c980	a980	a0 07		ldy #$07			ldy 	#ScreenSize200 / 8192 		; X is pages to clear
.c982	a982	ad bf 07	lda $07bf			lda 	gxHeight
.c985	a985	c9 c8		cmp #$c8			cmp 	#200 						; 200 ?
.c987	a987	a0 09		ldy #$09			ldy 	#ScreenSize240 / 8192
.c989	a989					_GXCalcLastPage:
.c989	a989	98		tya				tya 								; add to base page
.c98a	a98a	18		clc				clc
.c98b	a98b	6d bd 07	adc $07bd			adc 	gxBasePage
.c98e	a98e	85 0b		sta $0b				sta 	GXEditSlot  				; clear from this page back
.c990	a990					_GXClearAll:
.c990	a990	20 a3 a9	jsr $a9a3			jsr 	_GXClearBlock 				; clear 8k block
.c993	a993	c6 0b		dec $0b				dec 	GXEditSlot  				; back to previous
.c995	a995	a5 0b		lda $0b				lda 	GXEditSlot
.c997	a997	cd bd 07	cmp $07bd			cmp 	gxBasePage 					; until before base page
.c99a	a99a	b0 f4		bcs $a990			bcs 	_GXClearAll
.c99c	a99c	20 6f af	jsr $af6f			jsr 	GXCloseBitmap	 			; stop access
.c99f	a99f	18		clc				clc
.c9a0	a9a0	60		rts				rts
.c9a1	a9a1					_GXCBFail:
.c9a1	a9a1	38		sec				sec
.c9a2	a9a2	60		rts				rts
.c9a3	a9a3					_GXClearBlock:
.c9a3	a9a3	a9 00		lda #$00			lda 	#((GXMappingAddress) & $FF)
.c9a5	a9a5	85 38		sta $38				sta 	0+gxzTemp1
.c9a7	a9a7	a9 60		lda #$60			lda 	#((GXMappingAddress) >> 8)
.c9a9	a9a9	85 39		sta $39				sta 	1+gxzTemp1
.c9ab	a9ab					_GXCB0:
.c9ab	a9ab	a5 36		lda $36				lda 	gxzTemp0
.c9ad	a9ad	a0 00		ldy #$00			ldy 	#0
.c9af	a9af					_GXCB1:
.c9af	a9af	91 38		sta ($38),y			sta 	(gxzTemp1),y
.c9b1	a9b1	c8		iny				iny
.c9b2	a9b2	91 38		sta ($38),y			sta 	(gxzTemp1),y
.c9b4	a9b4	c8		iny				iny
.c9b5	a9b5	91 38		sta ($38),y			sta 	(gxzTemp1),y
.c9b7	a9b7	c8		iny				iny
.c9b8	a9b8	91 38		sta ($38),y			sta 	(gxzTemp1),y
.c9ba	a9ba	c8		iny				iny
.c9bb	a9bb	d0 f2		bne $a9af			bne 	_GXCB1
.c9bd	a9bd	e6 39		inc $39				inc 	gxzTemp1+1
.c9bf	a9bf	a5 39		lda $39				lda 	gxzTemp1+1
.c9c1	a9c1	c9 80		cmp #$80			cmp	 	#(GXMappingAddress >> 8)+$20
.c9c3	a9c3	d0 e6		bne $a9ab			bne 	_GXCB0
.c9c5	a9c5	60		rts				rts
.c9c6	a9c6					GXInitialise:
.c9c6	a9c6	64 01		stz $01				stz 	1
.c9c8	a9c8	a9 01		lda #$01			lda 	#1
.c9ca	a9ca	8d 00 d0	sta $d000			sta 	$D000
.c9cd	a9cd	18		clc				clc
.c9ce	a9ce	9c bb 07	stz $07bb			stz 	gxSpritesOn
.c9d1	a9d1	9c bc 07	stz $07bc			stz 	gxBitmapsOn
.c9d4	a9d4	a2 0f		ldx #$0f			ldx 	#15
.c9d6	a9d6					_GXIClear:
.c9d6	a9d6	9e ab 07	stz $07ab,x			stz 	gxCurrentX,x
.c9d9	a9d9	ca		dex				dex
.c9da	a9da	10 fa		bpl $a9d6			bpl 	_GXIClear
.c9dc	a9dc	20 77 aa	jsr $aa77			jsr 	GXClearSpriteStore
.c9df	a9df	60		rts				rts
.c9e0	a9e0					GXControlBitmap:
.c9e0	a9e0	64 01		stz $01				stz 	1
.c9e2	a9e2	a5 36		lda $36				lda 	gxzTemp0 					; get control bits
.c9e4	a9e4	29 01		and #$01			and 	#1 							; set bitmap flag
.c9e6	a9e6	8d bc 07	sta $07bc			sta 	gxBitmapsOn
.c9e9	a9e9	4a		lsr a				lsr 	a 							; bit 0 into carry.
.c9ea	a9ea	ad 00 d0	lda $d000			lda 	$D000 						; read Vicky MCR
.c9ed	a9ed	09 07		ora #$07			ora 	#7 							; turn graphics, text, textoverlay on.
.c9ef	a9ef	29 f7		and #$f7			and 	#$F7 						; clear bitmap bit
.c9f1	a9f1	90 02		bcc $a9f5			bcc 	_CBNotOn
.c9f3	a9f3	09 08		ora #$08			ora 	#$08 						; bitmap on if 1 on 0 off
.c9f5	a9f5					_CBNotOn:
.c9f5	a9f5	8d 00 d0	sta $d000			sta 	$D000 						; update Vicky MCR
.c9f8	a9f8	a5 36		lda $36				lda 	gxzTemp0 					; get control settings (bits 0-2)
.c9fa	a9fa	29 07		and #$07			and 	#7
.c9fc	a9fc	8d 00 d1	sta $d100			sta 	$D100 						; write in Vicky Bitmap Control Register #0
.c9ff	a9ff	a5 37		lda $37				lda 	gxzTemp0+1 					; get the base page
.ca01	aa01	d0 02		bne $aa05			bne 	_CBNotDefault
.ca03	aa03	a9 08		lda #$08			lda 	#8  						; if zero, use 8 e.g. bitmap at $10000
.ca05	aa05					_CBNotDefault:
.ca05	aa05	8d bd 07	sta $07bd			sta 	gxBasePage
.ca08	aa08	20 69 aa	jsr $aa69			jsr 	GXCalculateBaseAddress 	 	; convert page# to address
.ca0b	aa0b	a5 37		lda $37				lda 	gxzTemp0+1 					; copy address into Bitmap address registers
.ca0d	aa0d	8d 03 d1	sta $d103			sta 	$D103
.ca10	aa10	a5 36		lda $36				lda 	gxzTemp0
.ca12	aa12	8d 02 d1	sta $d102			sta 	$D102
.ca15	aa15	9c 01 d1	stz $d101			stz 	$D101
.ca18	aa18	a2 f0		ldx #$f0			ldx 	#240 						; height is 240
.ca1a	aa1a	ad 01 d0	lda $d001			lda 	$D001 						; read MCR bit 0
.ca1d	aa1d	29 01		and #$01			and 	#1
.ca1f	aa1f	f0 02		beq $aa23			beq 	_CBHaveHeight
.ca21	aa21	a2 c8		ldx #$c8			ldx 	#200 						; if bit 0 set 320x200
.ca23	aa23					_CBHaveHeight
.ca23	aa23	8e bf 07	stx $07bf			stx 	gxHeight
.ca26	aa26	18		clc				clc
.ca27	aa27	60		rts				rts
.ca28	aa28					GXControlSprite:
.ca28	aa28	64 01		stz $01				stz 	1
.ca2a	aa2a	a5 36		lda $36				lda 	gxzTemp0 					; get control bits
.ca2c	aa2c	29 01		and #$01			and 	#1 							; set sprites flag
.ca2e	aa2e	8d bb 07	sta $07bb			sta 	gxSpritesOn
.ca31	aa31	4a		lsr a				lsr 	a 							; bit 0 into carry.
.ca32	aa32	ad 00 d0	lda $d000			lda 	$D000 						; read Vicky MCR
.ca35	aa35	09 07		ora #$07			ora 	#7 							; turn graphics, text, textoverlay on.
.ca37	aa37	29 df		and #$df			and 	#$DF 						; clear sprite bit
.ca39	aa39	90 02		bcc $aa3d			bcc 	_CSNotOn
.ca3b	aa3b	09 20		ora #$20			ora 	#$20 						; sprite on if 1 on 0 off
.ca3d	aa3d					_CSNotOn:
.ca3d	aa3d	8d 00 d0	sta $d000			sta 	$D000 						; update Vicky MCR
.ca40	aa40	a5 37		lda $37				lda 	gxzTemp0+1 					; get the base page
.ca42	aa42	d0 02		bne $aa46			bne 	_CSNotDefault
.ca44	aa44	a9 18		lda #$18			lda 	#24  						; if zero, use 24 e.g. sprites at $30000
.ca46	aa46					_CSNotDefault:
.ca46	aa46	8d be 07	sta $07be			sta 	gxSpritePage
.ca49	aa49	20 69 aa	jsr $aa69			jsr 	GXCalculateBaseAddress 	 	; convert page# to address
.ca4c	aa4c	a5 36		lda $36				lda 	gxzTemp0
.ca4e	aa4e	8d c9 07	sta $07c9			sta 	gxSpriteOffsetBase
.ca51	aa51	a5 37		lda $37				lda 	gxzTemp0+1
.ca53	aa53	8d ca 07	sta $07ca			sta 	gxSpriteOffsetBase+1
.ca56	aa56	a2 00		ldx #$00			ldx 	#0 							; disable all sprites, clears all sprite memory.
.ca58	aa58					_CSClear:
.ca58	aa58	9e 00 d9	stz $d900,x			stz 	$D900,x
.ca5b	aa5b	9e 00 da	stz $da00,x			stz 	$DA00,x
.ca5e	aa5e	ca		dex				dex
.ca5f	aa5f	d0 f7		bne $aa58			bne 	_CSClear
.ca61	aa61	9c c8 07	stz $07c8			stz 	GSCurrentSpriteAddr+1 		; no sprite selected.
.ca64	aa64	20 77 aa	jsr $aa77			jsr 	GXClearSpriteStore
.ca67	aa67	18		clc				clc
.ca68	aa68	60		rts				rts
.ca69	aa69					GXCalculateBaseAddress:
.ca69	aa69	85 36		sta $36				sta 	gxzTemp0
.ca6b	aa6b	64 37		stz $37				stz 	gxzTemp0+1
.ca6d	aa6d	a9 05		lda #$05			lda 	#5
.ca6f	aa6f					_GXShift:
.ca6f	aa6f	06 36		asl $36				asl 	gxzTemp0
.ca71	aa71	26 37		rol $37				rol 	gxzTemp0+1
.ca73	aa73	3a		dec a				dec		a
.ca74	aa74	d0 f9		bne $aa6f			bne 	_GXShift
.ca76	aa76	60		rts				rts
.ca77	aa77					GXClearSpriteStore:
.ca77	aa77	a2 3f		ldx #$3f			ldx 	#63 						; erase 64 sprite store elements
.ca79	aa79					_GXCSSLoop:
.ca79	aa79	9e 0b 08	stz $080b,x			stz 	gxSpriteHigh,x
.ca7c	aa7c	a9 80		lda #$80			lda 	#$80 						; set the 'hidden' bit.
.ca7e	aa7e	9d cb 07	sta $07cb,x			sta 	gxSpriteLow,x
.ca81	aa81	ca		dex				dex
.ca82	aa82	10 f5		bpl $aa79			bpl 	_GXCSSLoop
.ca84	aa84	60		rts				rts
.ca85	aa85					GXLine:
.ca85	aa85	ad bc 07	lda $07bc			lda 	gxBitmapsOn
.ca88	aa88	f0 28		beq $aab2			beq 	_GXLFail
.ca8a	aa8a	20 67 af	jsr $af67			jsr 	GXOpenBitmap
.ca8d	aa8d	20 ad b0	jsr $b0ad			jsr 	GXSortY						; sort pairs so Y1 >= Y0 e.g. top to bottom.
.ca90	aa90	20 58 ab	jsr $ab58			jsr 	GXLineSetup 				; the calculations in the linescanner constructor
.ca93	aa93	20 77 af	jsr $af77			jsr 	gxPositionCalc 				; calculate position/offset.
.ca96	aa96					_GXDrawLoop:
.ca96	aa96	ac c5 07	ldy $07c5			ldy 	gxOffset 					; draw the pixel
.ca99	aa99	b1 3c		lda ($3c),y			lda 	(gxzScreen),y
.ca9b	aa9b	2d c3 07	and $07c3			and 	gxANDValue
.ca9e	aa9e	4d c2 07	eor $07c2			eor 	gxEORValue
.caa1	aaa1	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.caa3	aaa3	20 b4 aa	jsr $aab4			jsr 	GXLineIsComplete 			; is the line complete ?
.caa6	aaa6	f0 05		beq $aaad			beq 	_GXLExit
.caa8	aaa8	20 cf aa	jsr $aacf			jsr 	GXLineAdvance 				; code as per advance method
.caab	aaab	80 e9		bra $aa96			bra 	_GXDrawLoop
.caad	aaad					_GXLExit:
.caad	aaad	20 6f af	jsr $af6f			jsr 	GXCloseBitmap
.cab0	aab0	18		clc				clc
.cab1	aab1	60		rts				rts
.cab2	aab2					_GXLFail:
.cab2	aab2	38		sec				sec
.cab3	aab3	60		rts				rts
.cab4	aab4					GXLineIsComplete:
.cab4	aab4	ad 52 08	lda $0852			lda 	gxIsDiffYLarger 			; is dy larger
.cab7	aab7	d0 0f		bne $aac8			bne 	_GXLICCompareY 				; if so compare Y1/Y0
.cab9	aab9	ad b3 07	lda $07b3			lda 	gxX0 						; compare X, LSB and MSB
.cabc	aabc	4d b7 07	eor $07b7			eor 	gxX1
.cabf	aabf	d0 06		bne $aac7			bne 	_GXLICExit
.cac1	aac1	ad b4 07	lda $07b4			lda 	gxX0+1
.cac4	aac4	4d b8 07	eor $07b8			eor 	gxX1+1
.cac7	aac7					_GXLICExit:
.cac7	aac7	60		rts				rts
.cac8	aac8					_GXLICCompareY:
.cac8	aac8	ad b9 07	lda $07b9			lda 	gxY1
.cacb	aacb	4d b5 07	eor $07b5			eor 	gxY0
.cace	aace	60		rts				rts
.cacf	aacf					GXLineAdvance:
.cacf	aacf	18		clc				clc 								; add adjust to position
.cad0	aad0	ad 54 08	lda $0854			lda 	gxPosition
.cad3	aad3	6d 55 08	adc $0855			adc 	gxAdjust
.cad6	aad6	8d 54 08	sta $0854			sta 	gxPosition
.cad9	aad9	9c 57 08	stz $0857			stz 	gxAddSelect 				; clear add select flag
.cadc	aadc	b0 05		bcs $aae3			bcs 	_GXLAOverflow 				; if carry out, overflowed.
.cade	aade	cd 56 08	cmp $0856			cmp 	gxTotal 					; if exceeded total
.cae1	aae1	90 0a		bcc $aaed			bcc 	_GXLANoExtra
.cae3	aae3					_GXLAOverflow:
.cae3	aae3	ce 57 08	dec $0857			dec 	gxAddSelect 				; set addselect to $FF
.cae6	aae6	38		sec				sec 								; subtract total and write back
.cae7	aae7	ed 56 08	sbc $0856			sbc 	gxTotal
.caea	aaea	8d 54 08	sta $0854			sta 	gxPosition
.caed	aaed					_GXLANoExtra:
.caed	aaed	ad 52 08	lda $0852			lda 	gxIsDiffYLarger
.caf0	aaf0	f0 0d		beq $aaff			beq 	_GXDXLarger
.caf2	aaf2	20 51 ab	jsr $ab51			jsr 	GXIncrementY
.caf5	aaf5	ad 57 08	lda $0857			lda 	gxAddSelect
.caf8	aaf8	f0 10		beq $ab0a			beq 	_GXLAExit
.cafa	aafa	20 0b ab	jsr $ab0b			jsr 	gxAdjustX
.cafd	aafd	80 0b		bra $ab0a			bra 	_GXLAExit
.caff	aaff					_GXDXLarger:
.caff	aaff	20 0b ab	jsr $ab0b			jsr 	gxAdjustX
.cb02	ab02	ad 57 08	lda $0857			lda 	gxAddSelect
.cb05	ab05	f0 03		beq $ab0a			beq 	_GXLAExit
.cb07	ab07	20 51 ab	jsr $ab51			jsr 	GXIncrementY
.cb0a	ab0a					_GXLAExit:
.cb0a	ab0a	60		rts				rts
.cb0b	ab0b					gxAdjustX:
.cb0b	ab0b	ad 53 08	lda $0853			lda 	gxDXNegative
.cb0e	ab0e	10 25		bpl $ab35			bpl 	_GXAXRight
.cb10	ab10	ad b3 07	lda $07b3			lda 	gxX0
.cb13	ab13	d0 03		bne $ab18			bne 	_GXAXNoBorrow
.cb15	ab15	ce b4 07	dec $07b4			dec 	gxX0+1
.cb18	ab18					_GXAXNoBorrow:
.cb18	ab18	ce b3 07	dec $07b3			dec 	gxX0
.cb1b	ab1b	ce c5 07	dec $07c5			dec 	gxOffset 					; pixel left
.cb1e	ab1e	ad c5 07	lda $07c5			lda 	gxOffset
.cb21	ab21	c9 ff		cmp #$ff			cmp 	#$FF
.cb23	ab23	d0 0f		bne $ab34			bne 	_GXAYExit 					; underflow
.cb25	ab25	c6 3d		dec $3d				dec 	gxzScreen+1 					; borrow
.cb27	ab27	a5 3d		lda $3d				lda 	gxzScreen+1 					; gone off page
.cb29	ab29	c9 60		cmp #$60			cmp 	#GXMappingAddress >> 8
.cb2b	ab2b	b0 07		bcs $ab34			bcs 	_GXAYExit
.cb2d	ab2d	18		clc				clc
.cb2e	ab2e	69 20		adc #$20			adc 	#$20 						; fix up
.cb30	ab30	85 3d		sta $3d				sta 	gxzScreen+1
.cb32	ab32	c6 0b		dec $0b				dec 	GXEditSlot 				; back one page
.cb34	ab34					_GXAYExit:
.cb34	ab34	60		rts				rts
.cb35	ab35					_GXAXRight:
.cb35	ab35	ee b3 07	inc $07b3			inc 	gxX0
.cb38	ab38	d0 03		bne $ab3d			bne 	_GXAXNoCarry
.cb3a	ab3a	ee b4 07	inc $07b4			inc 	gxX0+1
.cb3d	ab3d					_GXAXNoCarry:
.cb3d	ab3d	ee c5 07	inc $07c5			inc 	gxOffset 					; pixel right
.cb40	ab40	d0 0e		bne $ab50			bne 	_GXAXExit 					; if not overflowed, exit.
.cb42	ab42	e6 3d		inc $3d				inc 	gxzScreen+1 					; next line
.cb44	ab44	a5 3d		lda $3d				lda 	gxzScreen+1
.cb46	ab46	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page ?
.cb48	ab48	90 06		bcc $ab50			bcc 	_GXAXExit
.cb4a	ab4a	e9 20		sbc #$20			sbc 	#$20 						; fix up
.cb4c	ab4c	85 3d		sta $3d				sta 	gxzScreen+1
.cb4e	ab4e	e6 0b		inc $0b				inc 	GXEditSlot 				; next page
.cb50	ab50					_GXAXExit:
.cb50	ab50	60		rts				rts
.cb51	ab51					GXIncrementY:
.cb51	ab51	ee b5 07	inc $07b5			inc 	gxY0
.cb54	ab54	20 cd af	jsr $afcd			jsr 	GXMovePositionDown
.cb57	ab57	60		rts				rts
.cb58	ab58					GXLineSetup:
.cb58	ab58	ad b9 07	lda $07b9			lda 	gxY1
.cb5b	ab5b	38		sec				sec
.cb5c	ab5c	ed b5 07	sbc $07b5			sbc 	gxY0
.cb5f	ab5f	4a		lsr a				lsr 	a
.cb60	ab60	8d 51 08	sta $0851			sta 	gxDiffY
.cb63	ab63	9c 53 08	stz $0853			stz 	gxDXNegative 				; clear -ve flag
.cb66	ab66	38		sec				sec
.cb67	ab67	ad b7 07	lda $07b7			lda 	gxX1
.cb6a	ab6a	ed b3 07	sbc $07b3			sbc 	gxX0
.cb6d	ab6d	8d 50 08	sta $0850			sta 	gxDiffX
.cb70	ab70	ad b8 07	lda $07b8			lda 	gxX1+1 						; calculate MSB
.cb73	ab73	ed b4 07	sbc $07b4			sbc 	gxX0+1
.cb76	ab76	6a		ror a				ror 	a 							; rotate bit into DiffX halving it
.cb77	ab77	6e 50 08	ror $0850			ror 	gxDiffX
.cb7a	ab7a	0a		asl a				asl 	a
.cb7b	ab7b	10 0c		bpl $ab89			bpl 	_GDXNotNegative
.cb7d	ab7d	a9 00		lda #$00			lda 	#0 							; make absolute value of |dx|
.cb7f	ab7f	38		sec				sec
.cb80	ab80	ed 50 08	sbc $0850			sbc 	gxDiffX
.cb83	ab83	8d 50 08	sta $0850			sta 	gxDiffX
.cb86	ab86	ce 53 08	dec $0853			dec 	gxDXNegative 				; -ve flag = $FF.
.cb89	ab89					_GDXNotNegative:
.cb89	ab89	9c 52 08	stz $0852			stz 	gxIsDiffYLarger 			; clear larger flag
.cb8c	ab8c	ad 51 08	lda $0851			lda 	gxDiffY 					; set adjust and total.
.cb8f	ab8f	8d 55 08	sta $0855			sta 	gxAdjust
.cb92	ab92	ad 50 08	lda $0850			lda 	gxDiffX
.cb95	ab95	8d 56 08	sta $0856			sta 	gxTotal
.cb98	ab98	ad 51 08	lda $0851			lda 	gxDiffY 					; if dy > dx
.cb9b	ab9b	cd 50 08	cmp $0850			cmp 	gxDiffX
.cb9e	ab9e	90 0f		bcc $abaf			bcc 	_GDXNotLarger
.cba0	aba0	ce 52 08	dec $0852			dec 	gxIsDiffYLarger 			; set the dy larger flag
.cba3	aba3	ad 50 08	lda $0850			lda 	gxDiffX 					; set adjust and total other way round
.cba6	aba6	8d 55 08	sta $0855			sta 	gxAdjust
.cba9	aba9	ad 51 08	lda $0851			lda 	gxDiffY
.cbac	abac	8d 56 08	sta $0856			sta 	gxTotal
.cbaf	abaf					_GDXNotLarger:
.cbaf	abaf	ad 56 08	lda $0856			lda 	gxTotal
.cbb2	abb2	4a		lsr a				lsr 	a
.cbb3	abb3	8d 54 08	sta $0854			sta 	gxPosition
.cbb6	abb6	60		rts				rts
.0850						gxDiffX:
>0850								.fill 	1
.0851						gxDiffY:
>0851								.fill 	1
.0852						gxIsDiffYLarger:
>0852								.fill 	1
.0853						gxDXNegative:
>0853								.fill 	1
.0854						gxPosition:
>0854								.fill 	1
.0855						gxAdjust:
>0855								.fill 	1
.0856						gxTotal:
>0856								.fill 	1
.0857						gxAddSelect:
>0857								.fill 	1
.cbb7	abb7					GXSetColourMode:
.cbb7	abb7	a6 36		ldx $36				ldx 	gxzTemp0
.cbb9	abb9	8e c1 07	stx $07c1			stx 	gxColour 								; set colour
.cbbc	abbc	a5 37		lda $37				lda 	gxzTemp0+1 								;
.cbbe	abbe	8d c0 07	sta $07c0			sta 	gxMode 									; set mode
.cbc1	abc1	29 03		and #$03			and 	#3 										; only interested in bits 0-3
.cbc3	abc3	9c c3 07	stz $07c3			stz 	gxANDValue 								; initially AND with 0, and EOR with Colour
.cbc6	abc6	ae c1 07	ldx $07c1			ldx 	gxColour
.cbc9	abc9	8e c2 07	stx $07c2			stx 	gxEORValue
.cbcc	abcc	c9 02		cmp #$02			cmp 	#2 										; if mode 2/3 And with colour
.cbce	abce	90 03		bcc $abd3			bcc 	_GXSDCNotAndColour
.cbd0	abd0	8e c3 07	stx $07c3			stx 	gxANDValue
.cbd3	abd3					_GXSDCNotAndColour:
.cbd3	abd3	d0 03		bne $abd8			bne 	_GXSDCNotAnd 							; mode 2, Don't EOR with colour
.cbd5	abd5	9c c2 07	stz $07c2			stz 	gxEORValue
.cbd8	abd8					_GXSDCNotAnd:
.cbd8	abd8	4a		lsr a				lsr 	a 										; if bit 0 set, 1's complement AND value
.cbd9	abd9	90 08		bcc $abe3			bcc 	_GXSDCNoFlip
.cbdb	abdb	ad c3 07	lda $07c3			lda	 	gxANDValue
.cbde	abde	49 ff		eor #$ff			eor 	#$FF
.cbe0	abe0	8d c3 07	sta $07c3			sta 	gxANDValue
.cbe3	abe3					_GXSDCNoFlip:
.cbe3	abe3	18		clc				clc
.cbe4	abe4	60		rts				rts
.cbe5	abe5					GXPlotPoint:
.cbe5	abe5	20 67 af	jsr $af67			jsr 	GXOpenBitmap 				; start drawing
.cbe8	abe8	20 77 af	jsr $af77			jsr 	gxPositionCalc 				; setup gxzScreen, gxOffset and the position.
.cbeb	abeb	ac c5 07	ldy $07c5			ldy 	gxOffset
.cbee	abee	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel on the right
.cbf0	abf0	2d c3 07	and $07c3			and 	gxANDValue
.cbf3	abf3	4d c2 07	eor $07c2			eor 	gxEORValue
.cbf6	abf6	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.cbf8	abf8	20 6f af	jsr $af6f			jsr 	GXCloseBitmap 				; stop drawing and exit
.cbfb	abfb	18		clc				clc
.cbfc	abfc	60		rts				rts
.cbfd	abfd					GXFillRectangle:
.cbfd	abfd	38		sec				sec
.cbfe	abfe	80 01		bra $ac01			bra 	GXRectangle
.cc00	ac00					GXFrameRectangle:
.cc00	ac00	18		clc				clc
.cc01	ac01					GXRectangle:
.cc01	ac01	ad bc 07	lda $07bc			lda 	gxBitmapsOn
.cc04	ac04	f0 35		beq $ac3b			beq 	_GXRFail
.cc06	ac06	08		php				php 								; save Fill flag (CS)
.cc07	ac07	20 67 af	jsr $af67			jsr 	GXOpenBitmap 				; start drawing
.cc0a	ac0a	20 8f b0	jsr $b08f			jsr 	GXSortXY 					; sort both X and Y so top left/bottom right
.cc0d	ac0d	20 77 af	jsr $af77			jsr 	gxPositionCalc 				; setup gxzScreen, gxOffset and the position.
.cc10	ac10	38		sec				sec 								; sec = Draw line
.cc11	ac11	20 3d ac	jsr $ac3d			jsr 	GXDrawLineX1X0 				; draw a line length X1-X0
.cc14	ac14	ad b5 07	lda $07b5			lda 	gxY0 						; reached end of rectangle ?
.cc17	ac17	cd b9 07	cmp $07b9			cmp 	gxY1
.cc1a	ac1a	f0 19		beq $ac35			beq 	_GXRectangleExit
.cc1c	ac1c					_GXRectLoop:
.cc1c	ac1c	20 cd af	jsr $afcd			jsr 	GXMovePositionDown 			; down one.
.cc1f	ac1f	ee b5 07	inc $07b5			inc 	gxY0 						; change Y pos
.cc22	ac22	ad b5 07	lda $07b5			lda 	gxY0 						; reached last line
.cc25	ac25	cd b9 07	cmp $07b9			cmp 	gxY1
.cc28	ac28	f0 07		beq $ac31			beq 	_GXLastLine
.cc2a	ac2a	28		plp				plp 								; get flag back
.cc2b	ac2b	08		php				php
.cc2c	ac2c	20 3d ac	jsr $ac3d			jsr 	GXDrawLineX1X0 				; draw horizontal line
.cc2f	ac2f	80 eb		bra $ac1c			bra 	_GXRectLoop
.cc31	ac31					_GXLastLine:
.cc31	ac31	38		sec				sec
.cc32	ac32	20 3d ac	jsr $ac3d			jsr 	GXDrawLineX1X0
.cc35	ac35					_GXRectangleExit:
.cc35	ac35	68		pla				pla 								; throw fill flag.
.cc36	ac36	20 6f af	jsr $af6f			jsr 	GXCloseBitmap 				; stop drawing and exit
.cc39	ac39	18		clc				clc
.cc3a	ac3a	60		rts				rts
.cc3b	ac3b					_GXRFail:
.cc3b	ac3b	38		sec				sec
.cc3c	ac3c	60		rts				rts
.cc3d	ac3d					GXDrawLineX1X0:
.cc3d	ac3d	08		php				php 								; save solid/either-end
.cc3e	ac3e	38		sec				sec
.cc3f	ac3f	ad b7 07	lda $07b7			lda		gxX1
.cc42	ac42	ed b3 07	sbc $07b3			sbc 	gxX0
.cc45	ac45	85 36		sta $36				sta 	gxzTemp0
.cc47	ac47	ad b8 07	lda $07b8			lda 	gxX1+1
.cc4a	ac4a	ed b4 07	sbc $07b4			sbc 	gxX0+1
.cc4d	ac4d	85 37		sta $37				sta 	gxzTemp0+1
.cc4f	ac4f	28		plp				plp
.cc50	ac50					GXDrawLineTemp0:
.cc50	ac50	a5 3c		lda $3c				lda 	gxzScreen 						; push gxzScreen, gxOffset and GXEditSlot on stack
.cc52	ac52	48		pha				pha
.cc53	ac53	a5 3d		lda $3d				lda 	gxzScreen+1
.cc55	ac55	48		pha				pha
.cc56	ac56	ad c5 07	lda $07c5			lda 	gxOffset
.cc59	ac59	48		pha				pha
.cc5a	ac5a	a5 0b		lda $0b				lda 	GXEditSlot
.cc5c	ac5c	48		pha				pha
.cc5d	ac5d	ac c5 07	ldy $07c5			ldy 	gxOffset 					; Y offset
.cc60	ac60	90 1e		bcc $ac80			bcc 	_GXDLTEndPoints 			; if CC draw end points only.
.cc62	ac62					_GXDLTLine:
.cc62	ac62	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel
.cc64	ac64	2d c3 07	and $07c3			and 	gxANDValue
.cc67	ac67	4d c2 07	eor $07c2			eor 	gxEORValue
.cc6a	ac6a	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.cc6c	ac6c	a5 36		lda $36				lda 	gxzTemp0 					; decrement counter
.cc6e	ac6e	d0 04		bne $ac74			bne 	_GXDLTNoBorrow
.cc70	ac70	c6 37		dec $37				dec 	gxzTemp0+1 					; borrow, if goes -ve then exit
.cc72	ac72	30 2e		bmi $aca2			bmi 	_GXDLTExit
.cc74	ac74					_GXDLTNoBorrow:
.cc74	ac74	c6 36		dec $36				dec 	gxzTemp0
.cc76	ac76	c8		iny				iny 								; next slot.
.cc77	ac77	d0 e9		bne $ac62			bne 	_GXDLTLine
.cc79	ac79	e6 3d		inc $3d				inc 	gxzScreen+1 					; carry to next
.cc7b	ac7b	20 b0 ac	jsr $acb0			jsr 	GXDLTCheckWrap				; check for new page.
.cc7e	ac7e	80 e2		bra $ac62			bra 	_GXDLTLine
.cc80	ac80					_GXDLTEndPoints:
.cc80	ac80	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel
.cc82	ac82	2d c3 07	and $07c3			and 	gxANDValue
.cc85	ac85	4d c2 07	eor $07c2			eor 	gxEORValue
.cc88	ac88	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.cc8a	ac8a	98		tya				tya 								; advance to right side
.cc8b	ac8b	18		clc				clc
.cc8c	ac8c	65 36		adc $36				adc 	gxzTemp0
.cc8e	ac8e	a8		tay				tay
.cc8f	ac8f	a5 3d		lda $3d				lda 	gxzScreen+1
.cc91	ac91	65 37		adc $37				adc 	gxzTemp0+1
.cc93	ac93	85 3d		sta $3d				sta 	gxzScreen+1
.cc95	ac95	20 b0 ac	jsr $acb0			jsr 	GXDLTCheckWrap 			; fix up.
.cc98	ac98	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel on the right
.cc9a	ac9a	2d c3 07	and $07c3			and 	gxANDValue
.cc9d	ac9d	4d c2 07	eor $07c2			eor 	gxEORValue
.cca0	aca0	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.cca2	aca2					_GXDLTExit:
.cca2	aca2	68		pla				pla
.cca3	aca3	85 0b		sta $0b				sta 	GXEditSlot
.cca5	aca5	68		pla				pla
.cca6	aca6	8d c5 07	sta $07c5			sta 	gxOffset
.cca9	aca9	68		pla				pla
.ccaa	acaa	85 3d		sta $3d				sta 	gxzScreen+1
.ccac	acac	68		pla				pla
.ccad	acad	85 3c		sta $3c				sta 	gxzScreen
.ccaf	acaf	60		rts				rts
.ccb0	acb0					GXDLTCheckWrap:
.ccb0	acb0	a5 3d		lda $3d				lda 	gxzScreen+1 					; check end of page
.ccb2	acb2	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8)
.ccb4	acb4	90 06		bcc $acbc			bcc 	_GXDLTCWExit
.ccb6	acb6	e9 20		sbc #$20			sbc 	#$20 						; fix up
.ccb8	acb8	85 3d		sta $3d				sta 	gxzScreen+1
.ccba	acba	e6 0b		inc $0b				inc 	GXEditSlot
.ccbc	acbc					_GXDLTCWExit:
.ccbc	acbc	60		rts				rts
.ccbd	acbd					GXDrawGraphicElement:
.ccbd	acbd	8d 58 08	sta $0858			sta 	gxSize 						; save size
.ccc0	acc0	3a		dec a				dec 	a
.ccc1	acc1	8d 59 08	sta $0859			sta 	gxMask 						; and mask
.ccc4	acc4	ad bc 07	lda $07bc			lda 	gxBitmapsOn 				; check BMP on
.ccc7	acc7	f0 67		beq $ad30			beq 	_GXSLFail
.ccc9	acc9	ad b5 07	lda $07b5			lda 	gxY0 						; push Y on stack
.cccc	accc	48		pha				pha
.cccd	accd	8c 5b 08	sty $085b			sty 	gxAcquireVector+1 			; and acquisition vector
.ccd0	acd0	8e 5a 08	stx $085a			stx 	gxAcquireVector
.ccd3	acd3	20 67 af	jsr $af67			jsr 	GXOpenBitmap 				; open the bitmap.
.ccd6	acd6	ad 5d 08	lda $085d			lda 	gxUseMode 					; scale bits
.ccd9	acd9	4a		lsr a				lsr 	a
.ccda	acda	4a		lsr a				lsr 	a
.ccdb	acdb	4a		lsr a				lsr 	a
.ccdc	acdc	29 07		and #$07			and		#7
.ccde	acde	1a		inc a				inc 	a
.ccdf	acdf	8d 5c 08	sta $085c			sta 	gxScale
.cce2	ace2	64 38		stz $38				stz 	gxzTemp1					; start first line
.cce4	ace4					_GXGELoop:
.cce4	ace4	a5 38		lda $38				lda 	gxzTemp1 					; current line number to read.
.cce6	ace6	2c 5d 08	bit $085d			bit 	gxUseMode 					; check for flip.
.cce9	ace9	10 06		bpl $acf1			bpl		_GXNoVFlip
.cceb	aceb	ad 59 08	lda $0859			lda 	gxMask
.ccee	acee	38		sec				sec
.ccef	acef	e5 38		sbc $38				sbc 	gxzTemp1
.ccf1	acf1					_GXNoVFlip:
.ccf1	acf1	aa		tax				tax 								; get the Xth line.
.ccf2	acf2	20 32 ad	jsr $ad32			jsr 	_GXCallAcquire 				; get that data.
.ccf5	acf5	ad 5c 08	lda $085c			lda 	gxScale 					; do scale identical copies of that line.
.ccf8	acf8	85 39		sta $39				sta 	gxzTemp1+1
.ccfa	acfa					_GXGELoop2:
.ccfa	acfa	ad b5 07	lda $07b5			lda 	gxY0 						; off screen
.ccfd	acfd	cd bf 07	cmp $07bf			cmp 	gxHeight
.cd00	ad00	b0 10		bcs $ad12			bcs 	_GXDGEExit
.cd02	ad02	20 35 ad	jsr $ad35			jsr 	GXRenderOneLine 			; render line
.cd05	ad05	c6 39		dec $39				dec 	gxzTemp1+1 					; scale times.
.cd07	ad07	d0 f1		bne $acfa			bne 	_GXGELoop2
.cd09	ad09	e6 38		inc $38				inc 	gxzTemp1 					; done all lines.
.cd0b	ad0b	a5 38		lda $38				lda 	gxzTemp1
.cd0d	ad0d	cd 58 08	cmp $0858			cmp 	gxSize
.cd10	ad10	d0 d2		bne $ace4			bne 	_GXGELoop
.cd12	ad12					_GXDGEExit:
.cd12	ad12	68		pla				pla 								; restore Y for next time
.cd13	ad13	8d b5 07	sta $07b5			sta 	gxY0
.cd16	ad16	ae 5c 08	ldx $085c			ldx 	gxScale 					; get scale (1-8)
.cd19	ad19					_GXShiftLeft:
.cd19	ad19	18		clc				clc
.cd1a	ad1a	ad 58 08	lda $0858			lda 	gxSize
.cd1d	ad1d	6d b3 07	adc $07b3			adc 	gxX0
.cd20	ad20	8d b3 07	sta $07b3			sta 	gxX0
.cd23	ad23	90 03		bcc $ad28			bcc 	_GXSLNoCarry
.cd25	ad25	ee b4 07	inc $07b4			inc 	gxX0+1
.cd28	ad28					_GXSLNoCarry:
.cd28	ad28	ca		dex				dex
.cd29	ad29	d0 ee		bne $ad19			bne 	_GXShiftLeft
.cd2b	ad2b	20 6f af	jsr $af6f			jsr 	GXCloseBitmap
.cd2e	ad2e	18		clc				clc
.cd2f	ad2f	60		rts				rts
.cd30	ad30					_GXSLFail:
.cd30	ad30	38		sec				sec
.cd31	ad31	60		rts				rts
.cd32	ad32					_GXCallAcquire:
.cd32	ad32	6c 5a 08	jmp ($085a)			jmp 	(gxAcquireVector)
.cd35	ad35					GXRenderOneLine:
.cd35	ad35	20 77 af	jsr $af77			jsr 	gxPositionCalc 				; calculate position/offset.
.cd38	ad38	ac c5 07	ldy $07c5			ldy 	gxOffset 					; Y contains position.
.cd3b	ad3b	64 3a		stz $3a				stz 	gxzTemp2 					; do size pixels
.cd3d	ad3d					_GXROLLoop1:
.cd3d	ad3d	ad 5c 08	lda $085c			lda 	gxScale 					; set to do 'scale' times
.cd40	ad40	85 3b		sta $3b				sta 	gxzTemp2+1
.cd42	ad42					_GXROLLoop2:
.cd42	ad42	a5 3a		lda $3a				lda 	gxzTemp2 					; get current pixel
.cd44	ad44	2c c0 07	bit $07c0			bit 	gxMode 						; check H Flip
.cd47	ad47	50 06		bvc $ad4f			bvc 	_GXNoHFlip
.cd49	ad49	ad 59 08	lda $0859			lda 	gxMask
.cd4c	ad4c	38		sec				sec
.cd4d	ad4d	e5 3a		sbc $3a				sbc 	gxzTemp2
.cd4f	ad4f					_GXNoHFlip:
.cd4f	ad4f	aa		tax				tax 								; read from the pixel buffer
.cd50	ad50	bd 23 06	lda $0623,x			lda 	gxPixelBuffer,x
.cd53	ad53	d0 07		bne $ad5c			bne 	_GXDraw 					; draw if non zero
.cd55	ad55	ad 5d 08	lda $085d			lda 	gxUseMode 					; check to see if solid background
.cd58	ad58	29 04		and #$04			and 	#4
.cd5a	ad5a	f0 0a		beq $ad66			beq 	_GXZeroPixel
.cd5c	ad5c					_GXDraw:
.cd5c	ad5c	b1 3c		lda ($3c),y			lda 	(gxzScreen),y
.cd5e	ad5e	2d c3 07	and $07c3			and 	gxANDValue
.cd61	ad61	5d 23 06	eor $0623,x			eor 	gxPixelBuffer,x
.cd64	ad64	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.cd66	ad66					_GXZeroPixel:
.cd66	ad66	c8		iny				iny 								; advance pointer
.cd67	ad67	d0 05		bne $ad6e			bne 	_GXNoShift
.cd69	ad69	e6 3d		inc $3d				inc 	gxzScreen+1 				; carry to next
.cd6b	ad6b	20 b0 ac	jsr $acb0			jsr 	GXDLTCheckWrap				; check for new page.
.cd6e	ad6e					_GXNoShift:
.cd6e	ad6e	c6 3b		dec $3b				dec 	gxzTemp2+1 					; do the inner loop gxScale times.
.cd70	ad70	d0 d0		bne $ad42			bne 	_GXROLLoop2
.cd72	ad72	e6 3a		inc $3a				inc 	gxzTemp2 					; next pixel.
.cd74	ad74	a5 3a		lda $3a				lda 	gxzTemp2
.cd76	ad76	cd 58 08	cmp $0858			cmp 	gxSize
.cd79	ad79	d0 c2		bne $ad3d			bne 	_GXROLLoop1
.cd7b	ad7b	ee b5 07	inc $07b5			inc 	gxY0
.cd7e	ad7e	60		rts				rts
.0858						gxSize:
>0858								.fill 	1
.0859						gxMask:
>0859								.fill 	1
.085a						gxAcquireVector:
>085a								.fill 	2
.085c						gxScale:
>085c								.fill 	1
.085d						gxUseMode:
>085d								.fill 	1
.cd7f	ad7f					GXFontHandler:
.cd7f	ad7f	a5 37		lda $37				lda 	gxzTemp0+1 					; eor with mode
.cd81	ad81	4d c0 07	eor $07c0			eor 	gxMode
.cd84	ad84	8d 5d 08	sta $085d			sta 	gxUseMode
.cd87	ad87	64 37		stz $37				stz 	gxzTemp0+1 					; gxzTemp0 is font #
.cd89	ad89	06 36		asl $36				asl	 	gxzTemp0 					; x 2
.cd8b	ad8b	26 37		rol $37				rol	 	gxzTemp0+1
.cd8d	ad8d	06 36		asl $36				asl	 	gxzTemp0 					; x 4
.cd8f	ad8f	26 37		rol $37				rol	 	gxzTemp0+1
.cd91	ad91	06 36		asl $36				asl	 	gxzTemp0 					; x 8
.cd93	ad93	26 37		rol $37				rol	 	gxzTemp0+1
.cd95	ad95	a5 37		lda $37				lda 	gxzTemp0+1 					; put in page C0
.cd97	ad97	09 c0		ora #$c0			ora 	#$C0
.cd99	ad99	85 37		sta $37				sta 	gxzTemp0+1
.cd9b	ad9b	a9 08		lda #$08			lda 	#8 							; size 8x8
.cd9d	ad9d	a2 a5		ldx #$a5			ldx 	#GXGetGraphicDataFont & $FF ; XY = Graphic Data retrieval routine
.cd9f	ad9f	a0 ad		ldy #$ad			ldy 	#GXGetGraphicDataFont >> 8
.cda1	ada1	20 bd ac	jsr $acbd			jsr 	GXDrawGraphicElement
.cda4	ada4	60		rts				rts
.cda5	ada5					GXGetGraphicDataFont:
.cda5	ada5	8a		txa				txa 								; X->Y
.cda6	ada6	a8		tay				tay
.cda7	ada7	a6 01		ldx $01				ldx 	1 							; preserve old value
.cda9	ada9	a9 01		lda #$01			lda 	#1 							; access page 1 (font memory)
.cdab	adab	85 01		sta $01				sta 	1
.cdad	adad	b1 36		lda ($36),y			lda 	(gxzTemp0),y 				; read the font element.
.cdaf	adaf	86 01		stx $01				stx 	1 							; put old value back.
.cdb1	adb1	a2 00		ldx #$00			ldx 	#0 							; do 8 times
.cdb3	adb3					_GXExpand:
.cdb3	adb3	9e 23 06	stz $0623,x			stz 	gxPixelBuffer,x 			; zero in pixel buffer
.cdb6	adb6	0a		asl a				asl 	a 							; shift bit 7 into C
.cdb7	adb7	90 08		bcc $adc1			bcc 	_GXNoPixel
.cdb9	adb9	48		pha				pha 								; if set, set pixel buffer to current colour.
.cdba	adba	ad c1 07	lda $07c1			lda 	gxColour
.cdbd	adbd	9d 23 06	sta $0623,x			sta 	gxPixelBuffer,x
.cdc0	adc0	68		pla				pla
.cdc1	adc1					_GXNoPixel:
.cdc1	adc1	e8		inx				inx 								; do the whole byte.
.cdc2	adc2	e0 08		cpx #$08			cpx 	#8
.cdc4	adc4	d0 ed		bne $adb3			bne 	_GXExpand
.cdc6	adc6	60		rts				rts
.cdc7	adc7					GXSpriteHandler:
.cdc7	adc7	ad bb 07	lda $07bb			lda 	gxSpritesOn 				; sprites on ?
.cdca	adca	f0 23		beq $adef			beq 	_GXSHExit
.cdcc	adcc	a5 37		lda $37				lda 	gxzTemp0+1 					; eor with mode
.cdce	adce	4d c0 07	eor $07c0			eor 	gxMode
.cdd1	add1	8d 5d 08	sta $085d			sta 	gxUseMode
.cdd4	add4	a6 36		ldx $36				ldx 	gxzTemp0 					; sprite #
.cdd6	add6	da		phx				phx
.cdd7	add7	20 67 af	jsr $af67			jsr 	GXOpenBitmap 				; can access sprite information
.cdda	adda	68		pla				pla
.cddb	addb	20 48 b0	jsr $b048			jsr 	GXFindSprite 				; get the sprite address
.cdde	adde	08		php				php
.cddf	addf	20 6f af	jsr $af6f			jsr 	GXCloseBitmap
.cde2	ade2	28		plp				plp
.cde3	ade3	b0 0a		bcs $adef			bcs		_GXSHExit 					; exit if find failed.
.cde5	ade5	ad 5e 08	lda $085e			lda 	gxSizePixels 				; return size
.cde8	ade8	a2 f0		ldx #$f0			ldx 	#GXSpriteAcquire & $FF
.cdea	adea	a0 ad		ldy #$ad			ldy 	#GXSpriteAcquire >> 8
.cdec	adec	20 bd ac	jsr $acbd			jsr 	GXDrawGraphicElement
.cdef	adef					_GXSHExit:
.cdef	adef	60		rts				rts
.cdf0	adf0					GXSpriteAcquire:
.cdf0	adf0	ad be 07	lda $07be			lda 	gxSpritePage				; point to base page
.cdf3	adf3	85 0b		sta $0b				sta 	GXEditSlot
.cdf5	adf5	86 36		stx $36				stx 	gxzTemp0 					; row number x 1,2,3,4
.cdf7	adf7	a9 00		lda #$00			lda 	#0
.cdf9	adf9	ae 5f 08	ldx $085f			ldx 	gxSizeBits
.cdfc	adfc					_GXTimesRowNumber:
.cdfc	adfc	18		clc				clc
.cdfd	adfd	65 36		adc $36				adc 	gxzTemp0
.cdff	adff	ca		dex				dex
.ce00	ae00	10 fa		bpl $adfc			bpl 	_GXTimesRowNumber
.ce02	ae02	64 37		stz $37				stz 	gxzTemp0+1
.ce04	ae04	0a		asl a				asl 	a 							; row x 2,4,6,8
.ce05	ae05	26 37		rol $37				rol 	gxzTemp0+1
.ce07	ae07	0a		asl a				asl 	a 							; row x 4,8,12,16
.ce08	ae08	26 37		rol $37				rol 	gxzTemp0+1
.ce0a	ae0a	0a		asl a				asl 	a 							; row x 8,16,24,32
.ce0b	ae0b	26 37		rol $37				rol 	gxzTemp0+1
.ce0d	ae0d	85 36		sta $36				sta 	gxzTemp0
.ce0f	ae0f	18		clc				clc 								; add base address.
.ce10	ae10	a5 36		lda $36				lda 	gxzTemp0
.ce12	ae12	6d 61 08	adc $0861			adc 	gxSpriteOffset
.ce15	ae15	85 36		sta $36				sta 	gxzTemp0
.ce17	ae17	a5 37		lda $37				lda 	gxzTemp0+1
.ce19	ae19	6d 62 08	adc $0862			adc 	gxSpriteOffset+1
.ce1c	ae1c					_GXSAFindPage:
.ce1c	ae1c	c9 20		cmp #$20			cmp 	#$20 						; on this page
.ce1e	ae1e	90 06		bcc $ae26			bcc 	_GXSAFoundPage
.ce20	ae20	e9 20		sbc #$20			sbc 	#$20 						; forward one page
.ce22	ae22	e6 0b		inc $0b				inc 	GXEditSlot
.ce24	ae24	80 f6		bra $ae1c			bra 	_GXSAFindPage
.ce26	ae26					_GXSAFoundPage:
.ce26	ae26	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; physical address of page.
.ce28	ae28	85 37		sta $37				sta 	gxzTemp0+1 					; gxzTemp0 now points to the page
.ce2a	ae2a	a0 00		ldy #$00			ldy 	#0
.ce2c	ae2c					_GXSACopyLoop:
.ce2c	ae2c	b1 36		lda ($36),y			lda 	(gxzTemp0),y
.ce2e	ae2e	99 23 06	sta $0623,y			sta 	gxPixelBuffer,y
.ce31	ae31	c8		iny				iny
.ce32	ae32	cc 5e 08	cpy $085e			cpy 	gxSizePixels
.ce35	ae35	d0 f5		bne $ae2c			bne 	_GXSACopyLoop
.ce37	ae37	60		rts				rts
.ce38	ae38					GXSelect:
.ce38	ae38	ad bb 07	lda $07bb			lda 	gxSpritesOn
.ce3b	ae3b	f0 22		beq $ae5f			beq 	_GXSFail
.ce3d	ae3d	a5 36		lda $36				lda 	gxzTemp0 					; illegal sprite #
.ce3f	ae3f	c9 40		cmp #$40			cmp 	#64
.ce41	ae41	b0 1c		bcs $ae5f			bcs 	_GXSFail
.ce43	ae43	8d c6 07	sta $07c6			sta 	GSCurrentSpriteID
.ce46	ae46	a4 37		ldy $37				ldy 	gxzTemp0+1 					; control value.
.ce48	ae48	a9 00		lda #$00			lda  	#0 							; multiply sprite # x 8 => A
.ce4a	ae4a	06 36		asl $36				asl 	gxzTemp0
.ce4c	ae4c	06 36		asl $36				asl 	gxzTemp0
.ce4e	ae4e	06 36		asl $36				asl 	gxzTemp0
.ce50	ae50	2a		rol a				rol 	a
.ce51	ae51	69 d9		adc #$d9			adc 	#$D9 						; sprite area
.ce53	ae53	8d c8 07	sta $07c8			sta 	GSCurrentSpriteAddr+1 		; address to GSCurrentSprite and gxzTemp
.ce56	ae56	85 37		sta $37				sta 	gxzTemp0+1
.ce58	ae58	a5 36		lda $36				lda 	gxzTemp0
.ce5a	ae5a	8d c7 07	sta $07c7			sta 	GSCurrentSpriteAddr
.ce5d	ae5d	18		clc				clc
.ce5e	ae5e	60		rts				rts
.ce5f	ae5f					_GXSFail:
.ce5f	ae5f	38		sec				sec
.ce60	ae60	60		rts				rts
.ce61	ae61					GXSelectImage:
.ce61	ae61	ad bb 07	lda $07bb			lda 	gxSpritesOn
.ce64	ae64	f0 74		beq $aeda			beq 	_GXSIFail
.ce66	ae66	ad c8 07	lda $07c8			lda 	GSCurrentSpriteAddr+1 		; check sprite selected
.ce69	ae69	f0 6f		beq $aeda			beq 	_GXSIFail 					; (checking the MSB)
.ce6b	ae6b	64 01		stz $01				stz 	1
.ce6d	ae6d	a5 37		lda $37				lda 	gxzTemp0+1 					; push show/hide on the stack.
.ce6f	ae6f	d0 6b		bne $aedc			bne 	_GXSIHide
.ce71	ae71	a5 36		lda $36				lda 	gxzTemp0 					; sprite image
.ce73	ae73	48		pha				pha
.ce74	ae74	20 67 af	jsr $af67			jsr 	GXOpenBitmap
.ce77	ae77	68		pla				pla
.ce78	ae78	20 48 b0	jsr $b048			jsr 	GXFindSprite
.ce7b	ae7b	b0 5a		bcs $aed7			bcs 	_GXSICloseFail 				; no image
.ce7d	ae7d	a0 01		ldy #$01			ldy 	#1
.ce7f	ae7f	ad c7 07	lda $07c7			lda 	GSCurrentSpriteAddr
.ce82	ae82	85 36		sta $36				sta 	gxzTemp0
.ce84	ae84	ad c8 07	lda $07c8			lda 	GSCurrentSpriteAddr+1
.ce87	ae87	85 37		sta $37				sta 	gxzTemp0+1
.ce89	ae89	ad 61 08	lda $0861			lda 	gxSpriteOffset
.ce8c	ae8c	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.ce8e	ae8e	18		clc				clc
.ce8f	ae8f	ad 62 08	lda $0862			lda 	gxSpriteOffset+1
.ce92	ae92	6d c9 07	adc $07c9			adc 	gxSpriteOffsetBase
.ce95	ae95	c8		iny				iny
.ce96	ae96	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.ce98	ae98	ad ca 07	lda $07ca			lda 	gxSpriteOffsetBase+1
.ce9b	ae9b	69 00		adc #$00			adc 	#0
.ce9d	ae9d	c8		iny				iny
.ce9e	ae9e	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.cea0	aea0	ad 5f 08	lda $085f			lda 	gxSizeBits 					; get raw size
.cea3	aea3	49 03		eor #$03			eor 	#3 							; make it right (00=32 etc.)
.cea5	aea5	2a		rol a				rol 	a 							; x 2
.cea6	aea6	0a		asl a				asl 	a 							; x 4
.cea7	aea7	0a		asl a				asl 	a 							; x 8
.cea8	aea8	0a		asl a				asl 	a 							; x 16
.cea9	aea9	0d 60 08	ora $0860			ora 	gxSpriteLUT 				; Or with LUT
.ceac	aeac	0a		asl a				asl 	a 							; 1 shift
.cead	aead	09 01		ora #$01			ora 	#1 							; enable sprite.
.ceaf	aeaf	92 36		sta ($36)			sta 	(gxzTemp0) 					; and write back
.ceb1	aeb1	20 6f af	jsr $af6f			jsr 	GXCloseBitmap
.ceb4	aeb4	ae c6 07	ldx $07c6			ldx 	GSCurrentSpriteID 			; point to sprite entries.
.ceb7	aeb7	bd 0b 08	lda $080b,x			lda 	gxSpriteHigh,x 				; clear upper two bits of size
.ceba	aeba	29 3f		and #$3f			and 	#$3F
.cebc	aebc	9d 0b 08	sta $080b,x			sta 	gxSpriteHigh,x
.cebf	aebf	ad 5f 08	lda $085f			lda 	gxSizeBits 					; get bit size
.cec2	aec2	6a		ror a				ror 	a 							; shift into bits 6/7
.cec3	aec3	6a		ror a				ror 	a
.cec4	aec4	6a		ror a				ror 	a
.cec5	aec5	29 c0		and #$c0			and 	#$C0
.cec7	aec7	1d 0b 08	ora $080b,x			ora 	gxSpriteHigh,x 				; put in  upper 2 bits of sprite data
.ceca	aeca	9d 0b 08	sta $080b,x			sta 	gxSpriteHigh,x
.cecd	aecd	bd cb 07	lda $07cb,x			lda 	gxSpriteLow,x 				; clear hidden flag.
.ced0	aed0	29 7f		and #$7f			and 	#$7F
.ced2	aed2	9d cb 07	sta $07cb,x			sta 	gxSpriteLow,x
.ced5	aed5	18		clc				clc
.ced6	aed6	60		rts				rts
.ced7	aed7					_GXSICloseFail:
.ced7	aed7	20 6f af	jsr $af6f			jsr 	GXCloseBitmap
.ceda	aeda					_GXSIFail:
.ceda	aeda	38		sec				sec
.cedb	aedb	60		rts				rts
.cedc	aedc					_GXSIHide:
.cedc	aedc	ad c7 07	lda $07c7			lda 	GSCurrentSpriteAddr  		; get Sprite h/w address and write there
.cedf	aedf	85 36		sta $36				sta 	gxzTemp0
.cee1	aee1	ad c8 07	lda $07c8			lda 	GSCurrentSpriteAddr+1
.cee4	aee4	85 37		sta $37				sta 	gxzTemp0+1
.cee6	aee6	a9 00		lda #$00			lda 	#0
.cee8	aee8	92 36		sta ($36)			sta 	(gxzTemp0)
.ceea	aeea	ae c6 07	ldx $07c6			ldx 	GSCurrentSpriteID 			; get sprite ID
.ceed	aeed	bd cb 07	lda $07cb,x			lda 	gxSpriteLow,x 				; set the hidden bit.
.cef0	aef0	09 80		ora #$80			ora 	#$80
.cef2	aef2	9d cb 07	sta $07cb,x			sta 	gxSpriteLow,x
.cef5	aef5	18		clc				clc
.cef6	aef6	60		rts				rts
.cef7	aef7					GXMoveSprite:
.cef7	aef7	ad bb 07	lda $07bb			lda 	gxSpritesOn
.cefa	aefa	f0 65		beq $af61			beq 	_GXSIFail
.cefc	aefc	ad c8 07	lda $07c8			lda 	GSCurrentSpriteAddr+1 		; check sprite selected
.ceff	aeff	f0 60		beq $af61			beq 	_GXSIFail
.cf01	af01	85 37		sta $37				sta 	gxzTemp0+1
.cf03	af03	a0 04		ldy #$04			ldy 	#4
.cf05	af05	ad c7 07	lda $07c7			lda 	GSCurrentSpriteAddr
.cf08	af08	85 36		sta $36				sta 	gxzTemp0
.cf0a	af0a	ae c6 07	ldx $07c6			ldx 	GSCurrentSpriteID 			; get the size from the upper two bits
.cf0d	af0d	bd 0b 08	lda $080b,x			lda 	gxSpriteHigh,x
.cf10	af10	2a		rol a				rol 	a	 						; into bits 0,1.
.cf11	af11	2a		rol a				rol 	a
.cf12	af12	2a		rol a				rol 	a
.cf13	af13	29 03		and #$03			and 	#3
.cf15	af15	aa		tax				tax
.cf16	af16	bd 63 af	lda $af63,x			lda 	_GXMSOffset,x 				; get 32-SpriteSize/2
.cf19	af19	48		pha				pha
.cf1a	af1a	18		clc				clc
.cf1b	af1b	6d b3 07	adc $07b3			adc 	gxX0						; copy position.
.cf1e	af1e	91 36		sta ($36),y			sta 	(gxzTemp0),y
.cf20	af20	c8		iny				iny
.cf21	af21	ad b4 07	lda $07b4			lda 	gxX0+1
.cf24	af24	69 00		adc #$00			adc 	#0
.cf26	af26	91 36		sta ($36),y			sta 	(gxzTemp0),y
.cf28	af28	c8		iny				iny
.cf29	af29	68		pla				pla
.cf2a	af2a	18		clc				clc
.cf2b	af2b	6d b5 07	adc $07b5			adc 	gxY0
.cf2e	af2e	91 36		sta ($36),y			sta 	(gxzTemp0),y
.cf30	af30	a9 00		lda #$00			lda 	#0
.cf32	af32	69 00		adc #$00			adc 	#0
.cf34	af34	c8		iny				iny
.cf35	af35	91 36		sta ($36),y			sta 	(gxzTemp0),y
.cf37	af37	4e b4 07	lsr $07b4			lsr 	gxX0+1 						; divide X by 4
.cf3a	af3a	6e b3 07	ror $07b3			ror 	gxX0
.cf3d	af3d	4e b3 07	lsr $07b3			lsr 	gxX0
.cf40	af40	4e b5 07	lsr $07b5			lsr 	gxY0 						; divide Y by 4
.cf43	af43	4e b5 07	lsr $07b5			lsr 	gxY0
.cf46	af46	ae c6 07	ldx $07c6			ldx 	GSCurrentSpriteID 			; copy X/4 and Y/4 into the status bytes
.cf49	af49	bd cb 07	lda $07cb,x			lda 	gxSpriteLow,x
.cf4c	af4c	29 80		and #$80			and 	#$80
.cf4e	af4e	0d b3 07	ora $07b3			ora 	gxX0
.cf51	af51	9d cb 07	sta $07cb,x			sta 	gxSpriteLow,x
.cf54	af54	bd 0b 08	lda $080b,x			lda 	gxSpriteHigh,x
.cf57	af57	29 c0		and #$c0			and 	#$C0
.cf59	af59	0d b5 07	ora $07b5			ora 	gxY0
.cf5c	af5c	9d 0b 08	sta $080b,x			sta 	gxSpriteHigh,x
.cf5f	af5f	18		clc				clc
.cf60	af60	60		rts				rts
.cf61	af61					_GXSIFail:
.cf61	af61	38		sec				sec
.cf62	af62	60		rts				rts
.cf63	af63					_GXMSOffset:
>cf63	af63	1c						.byte 	32-8/2
>cf64	af64	18						.byte 	32-16/2
>cf65	af65	14						.byte 	32-24/2
>cf66	af66	10						.byte 	32-32/2
.cf67	af67					GXOpenBitmap:
.cf67	af67	78		sei				sei 								; no interrupts here
.cf68	af68	a5 0b		lda $0b				lda 	GXEditSlot 					; Save the original LUT slot value
.cf6a	af6a	8d c4 07	sta $07c4			sta 	gxOriginalLUTValue
.cf6d	af6d	58		cli				cli
.cf6e	af6e	60		rts				rts
.cf6f	af6f					GXCloseBitmap:
.cf6f	af6f	78		sei				sei
.cf70	af70	ad c4 07	lda $07c4			lda 	gxOriginalLUTValue 			; restore LUT slot value
.cf73	af73	85 0b		sta $0b				sta 	GXEditSlot
.cf75	af75	58		cli				cli
.cf76	af76	60		rts				rts
.cf77	af77					gxPositionCalc:
.cf77	af77	a5 36		lda $36				lda 	gxzTemp0 					; save temp memory slot
.cf79	af79	48		pha				pha
.cf7a	af7a	ad b5 07	lda $07b5			lda 	gxY0 						; gxzScreen = Y0
.cf7d	af7d	85 3c		sta $3c				sta 	gxzScreen
.cf7f	af7f	64 3d		stz $3d				stz 	gxzScreen+1
.cf81	af81	06 3c		asl $3c				asl 	gxzScreen 						; gxzScreen = Y0 * 4
.cf83	af83	26 3d		rol $3d				rol 	gxzScreen+1
.cf85	af85	06 3c		asl $3c				asl 	gxzScreen
.cf87	af87	26 3d		rol $3d				rol 	gxzScreen+1
.cf89	af89	18		clc				clc 								; gxzScreen = Y0 * 5, as it's still in A
.cf8a	af8a	65 3c		adc $3c				adc 	gxzScreen
.cf8c	af8c	85 3c		sta $3c				sta 	gxzScreen
.cf8e	af8e	90 02		bcc $af92			bcc 	_GXPCNoCarry
.cf90	af90	e6 3d		inc $3d				inc 	gxzScreen+1
.cf92	af92					_GXPCNoCarry:
.cf92	af92	06 3c		asl $3c				asl 	gxzScreen 						; now Y0 * 10. Needs to be multiplied by another
.cf94	af94	26 3d		rol $3d				rol 	gxzScreen+1 					; 32. At this point the MSB contains the offset
.cf96	af96	a5 3d		lda $3d				lda	 	gxzScreen+1 					; so save this in zTemp0 and zero it.
.cf98	af98	85 36		sta $36				sta 	gxzTemp0
.cf9a	af9a	64 3d		stz $3d				stz 	gxzScreen+1
.cf9c	af9c	a9 05		lda #$05			lda 	#5 							; now multiply by 32, this puts this in the range 0..8191
.cf9e	af9e					_GXPCMultiply32:
.cf9e	af9e	06 3c		asl $3c				asl 	gxzScreen
.cfa0	afa0	26 3d		rol $3d				rol 	gxzScreen+1
.cfa2	afa2	3a		dec a				dec 	a
.cfa3	afa3	d0 f9		bne $af9e			bne 	_GXPCMultiply32
.cfa5	afa5	18		clc				clc
.cfa6	afa6	ad b3 07	lda $07b3			lda 	gxX0 						; add X to this value, put the result in gxOffset, gxzScreen has to be on a page boundary
.cfa9	afa9	65 3c		adc $3c				adc 	gxzScreen
.cfab	afab	8d c5 07	sta $07c5			sta 	gxOffset
.cfae	afae	ad b4 07	lda $07b4			lda 	gxX0+1
.cfb1	afb1	65 3d		adc $3d				adc 	gxzScreen+1
.cfb3	afb3	c9 20		cmp #$20			cmp 	#$20 						; has it overflowed into the next one ?
.cfb5	afb5	90 04		bcc $afbb			bcc 	_GXPCNoOverflow
.cfb7	afb7	29 1f		and #$1f			and 	#$1F 						; fix it up
.cfb9	afb9	e6 36		inc $36				inc 	gxzTemp0 					; add 1 to the page number
.cfbb	afbb					_GXPCNoOverflow:
.cfbb	afbb	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; make it the address mapped in.
.cfbd	afbd	85 3d		sta $3d				sta 	gxzScreen+1
.cfbf	afbf	64 3c		stz $3c				stz 	gxzScreen
.cfc1	afc1	18		clc				clc
.cfc2	afc2	a5 36		lda $36				lda 	gxzTemp0 					; get the page number
.cfc4	afc4	6d bd 07	adc $07bd			adc 	gxBasePage 					; by adding the base page
.cfc7	afc7	85 0b		sta $0b				sta 	GXEditSlot 				; and map it into memory.
.cfc9	afc9	68		pla				pla
.cfca	afca	85 36		sta $36				sta 	gxzTemp0
.cfcc	afcc	60		rts				rts
.cfcd	afcd					GXMovePositionDown:
.cfcd	afcd	18		clc				clc 								; add 320 to offset/temp+1
.cfce	afce	ad c5 07	lda $07c5			lda 	gxOffset
.cfd1	afd1	69 40		adc #$40			adc 	#64
.cfd3	afd3	8d c5 07	sta $07c5			sta 	gxOffset
.cfd6	afd6	a5 3d		lda $3d				lda 	gxzScreen+1
.cfd8	afd8	69 01		adc #$01			adc 	#1
.cfda	afda	85 3d		sta $3d				sta 	gxzScreen+1
.cfdc	afdc	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page
.cfde	afde	90 07		bcc $afe7			bcc 	_GXMPDExit
.cfe0	afe0	38		sec				sec  								; next page
.cfe1	afe1	e9 20		sbc #$20			sbc 	#$20
.cfe3	afe3	85 3d		sta $3d				sta 	gxzScreen+1
.cfe5	afe5	e6 0b		inc $0b				inc 	GXEditSlot
.cfe7	afe7					_GXMPDExit:
.cfe7	afe7	60		rts				rts
.cfe8	afe8					GXCollide:
.cfe8	afe8	a5 36		lda $36				lda 	gxzTemp0 					; check if sprite numbers are legal.
.cfea	afea	aa		tax				tax
.cfeb	afeb	05 37		ora $37				ora 	gxzTemp0+1
.cfed	afed	29 c0		and #$c0			and 	#$C0
.cfef	afef	38		sec				sec
.cff0	aff0	d0 53		bne $b045			bne 	_GXCollideFail 				; if either >= 64, fail.
.cff2	aff2	a4 37		ldy $37				ldy 	gxzTemp0+1 					; at this point X is 1st sprite and Y is 2nd sprite.
.cff4	aff4	b9 cb 07	lda $07cb,y			lda 	gxSpriteLow,y 				; check if either hidden bit is set
.cff7	aff7	1d cb 07	ora $07cb,x			ora 	gxSpriteLow,x
.cffa	affa	30 48		bmi $b044			bmi 	_GXOkayFail 				; if either hidden, then they cannot collide.
.cffc	affc	18		clc				clc 								; need to calculate sum of sizes.
.cffd	affd	b9 0b 08	lda $080b,y			lda 	gxSpriteHigh,y
.d000	b000	7d 0b 08	adc $080b,x			adc 	gxSpriteHigh,x 				; at this point, CS, Bit 6 and 7 contain that sum.
.d003	b003	29 c0		and #$c0			and 	#$C0 					 	; mask off
.d005	b005	6a		ror a				ror 	a 							; 5/6/7
.d006	b006	4a		lsr a				lsr 	a 							; 4/5/6
.d007	b007	4a		lsr a				lsr 	a 							; 3/4/5
.d008	b008	4a		lsr a				lsr 	a 							; 2/3/4
.d009	b009	18		clc				clc
.d00a	b00a	69 08		adc #$08			adc 	#$08
.d00c	b00c	4a		lsr a				lsr 	a 							; adjust because all coordinates are divided by 4 to store.
.d00d	b00d	4a		lsr a				lsr 	a
.d00e	b00e	85 38		sta $38				sta 	gxzTemp1 					; so the difference between the centres has to be less than this.
.d010	b010	b9 0b 08	lda $080b,y			lda 	gxSpriteHigh,y 				; calculate y1-y0
.d013	b013	29 3f		and #$3f			and 	#$3F
.d015	b015	85 39		sta $39				sta 	gxzTemp1+1
.d017	b017	38		sec				sec
.d018	b018	bd 0b 08	lda $080b,x			lda 	gxSpriteHigh,x
.d01b	b01b	29 3f		and #$3f			and 	#$3F
.d01d	b01d	e5 39		sbc $39				sbc 	gxzTemp1+1
.d01f	b01f	b0 03		bcs $b024			bcs 	_GXCAbs1 					; calculate |y1-y0|
.d021	b021	49 ff		eor #$ff			eor 	#$FF
.d023	b023	1a		inc a				inc 	a
.d024	b024					_GXCAbs1:
.d024	b024	c5 38		cmp $38				cmp 	gxzTemp1 					; if >= difference then no overlap
.d026	b026	b0 1c		bcs $b044			bcs 	_GXOkayFail
.d028	b028	85 39		sta $39				sta 	gxzTemp1+1 					; save |y1-y0|
.d02a	b02a	38		sec				sec 								; calculate |x1-x0|
.d02b	b02b	b9 cb 07	lda $07cb,y			lda 	gxSpriteLow,y
.d02e	b02e	fd cb 07	sbc $07cb,x			sbc 	gxSpriteLow,x
.d031	b031	b0 03		bcs $b036			bcs 	_GXCAbs2
.d033	b033	49 ff		eor #$ff			eor 	#$FF
.d035	b035	1a		inc a				inc 	a
.d036	b036					_GXCAbs2:
.d036	b036	c5 38		cmp $38				cmp 	gxzTemp1 					; if >= difference then no overlap
.d038	b038	b0 0a		bcs $b044			bcs 	_GXOkayFail
.d03a	b03a	c5 39		cmp $39				cmp 	gxzTemp1+1 					; is it less than the previous one.
.d03c	b03c	90 02		bcc $b040			bcc 	_GXCHaveLowest
.d03e	b03e	a5 39		lda $39				lda 	gxzTemp1+1 					; if not, that's the smallest difference.
.d040	b040					_GXCHaveLowest:
.d040	b040	0a		asl a				asl 	a 							; scale to allow for >> 2
.d041	b041	0a		asl a				asl 	a
.d042	b042	18		clc				clc
.d043	b043	60		rts				rts
.d044	b044					_GXOkayFail:
.d044	b044	18		clc				clc
.d045	b045					_GXCollideFail:
.d045	b045	a9 ff		lda #$ff			lda 	#$FF
.d047	b047	60		rts				rts
.d048	b048					GXFindSprite:
.d048	b048	aa		tax				tax
.d049	b049	ad be 07	lda $07be			lda 	gxSpritePage 				; access the base page of the sprite
.d04c	b04c	85 0b		sta $0b				sta 	GXEditSlot
.d04e	b04e	bd 00 61	lda $6100,x			lda 	GXMappingAddress+256,x 		; check a valid sprite
.d051	b051	1d 00 60	ora $6000,x			ora 	GXMappingAddress,x
.d054	b054	f0 33		beq $b089			beq 	_GXFSFail
.d056	b056	bd 00 61	lda $6100,x			lda 	GXMappingAddress+256,x 		; MSB
.d059	b059	8d 62 08	sta $0862			sta 	gxSpriteOffset+1
.d05c	b05c	bd 00 60	lda $6000,x			lda 	GXMappingAddress,x 			; LSB
.d05f	b05f	48		pha				pha 								; save twice
.d060	b060	48		pha				pha
.d061	b061	29 03		and #$03			and 	#3 							; get sprite size
.d063	b063	8d 5f 08	sta $085f			sta 	gxSizeBits 					; save raw (0-3)
.d066	b066	aa		tax				tax
.d067	b067	bd 8b b0	lda $b08b,x			lda 	_GXFXSSTTable,x 			; read sprite size
.d06a	b06a	8d 5e 08	sta $085e			sta 	gxSizePixels 					; save (8/16/24/32)
.d06d	b06d	68		pla				pla 								; get LUT
.d06e	b06e	4a		lsr a				lsr		a
.d06f	b06f	4a		lsr a				lsr		a
.d070	b070	29 03		and #$03			and 	#3
.d072	b072	8d 60 08	sta $0860			sta 	gxSpriteLUT
.d075	b075	68		pla				pla 								; address, neeeds to be x 4
.d076	b076	29 f0		and #$f0			and 	#$F0
.d078	b078	8d 61 08	sta $0861			sta 	gxSpriteOffset
.d07b	b07b	0e 61 08	asl $0861			asl 	gxSpriteOffset
.d07e	b07e	2e 62 08	rol $0862			rol 	gxSpriteOffset+1
.d081	b081	0e 61 08	asl $0861			asl 	gxSpriteOffset
.d084	b084	2e 62 08	rol $0862			rol 	gxSpriteOffset+1
.d087	b087	18		clc				clc
.d088	b088	60		rts				rts
.d089	b089					_GXFSFail:
.d089	b089	38		sec				sec
.d08a	b08a	60		rts				rts
.d08b	b08b					_GXFXSSTTable:
>d08b	b08b	08 10 18 20					.byte 	8,16,24,32
.085e						gxSizePixels:
>085e								.fill 	1
.085f						gxSizeBits:
>085f								.fill 	1
.0860						gxSpriteLUT:
>0860								.fill 	1
.0861						gxSpriteOffset:
>0861								.fill 	2
.d08f	b08f					GXSortXY:
.d08f	b08f	20 ad b0	jsr $b0ad			jsr 	GXSortY 					; will be sorted on Y now
.d092	b092	ad b3 07	lda $07b3			lda 	gxX0 						; compare X0 v X1
.d095	b095	cd b7 07	cmp $07b7			cmp 	gxX1
.d098	b098	ad b4 07	lda $07b4			lda 	gxX0+1
.d09b	b09b	ed b8 07	sbc $07b8			sbc 	gxX1+1
.d09e	b09e	90 0c		bcc $b0ac			bcc 	_GXSXYExit 					; X0 < X1 exit
.d0a0	b0a0	a2 00		ldx #$00			ldx 	#0 							; swap them over
.d0a2	b0a2	a0 04		ldy #$04			ldy 	#4
.d0a4	b0a4	20 c1 b0	jsr $b0c1			jsr 	GXSwapXY
.d0a7	b0a7	e8		inx				inx
.d0a8	b0a8	c8		iny				iny
.d0a9	b0a9	20 c1 b0	jsr $b0c1			jsr 	GXSwapXY
.d0ac	b0ac					_GXSXYExit:
.d0ac	b0ac	60		rts				rts
.d0ad	b0ad					GXSortY:
.d0ad	b0ad	ad b5 07	lda $07b5			lda 	gxY0 						; if Y0 >= Y1
.d0b0	b0b0	cd b9 07	cmp $07b9			cmp 	gxY1
.d0b3	b0b3	90 0b		bcc $b0c0			bcc 	_GXSYSorted
.d0b5	b0b5	a2 03		ldx #$03			ldx 	#3 							; swap 3-0
.d0b7	b0b7	a0 07		ldy #$07			ldy 	#7 							; with 4-7
.d0b9	b0b9					_GXSwap1:
.d0b9	b0b9	20 c1 b0	jsr $b0c1			jsr 	GXSwapXY
.d0bc	b0bc	88		dey				dey
.d0bd	b0bd	ca		dex				dex
.d0be	b0be	10 f9		bpl $b0b9			bpl 	_GXSwap1
.d0c0	b0c0					_GXSYSorted:
.d0c0	b0c0	60		rts				rts
.d0c1	b0c1					GXSwapXY:
.d0c1	b0c1	bd b3 07	lda $07b3,x			lda 	gxX0,x
.d0c4	b0c4	48		pha				pha
.d0c5	b0c5	b9 b3 07	lda $07b3,y			lda 	gxX0,y
.d0c8	b0c8	9d b3 07	sta $07b3,x			sta 	gxX0,x
.d0cb	b0cb	68		pla				pla
.d0cc	b0cc	99 b3 07	sta $07b3,y			sta 	gxX0,y
.d0cf	b0cf	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_tokeniser.module

=1						tokeniserIntegrated=1
.d0d0	b0d0					KeywordSet0:
>d0d0	b0d0	00 65					.text	0,$65,""               ; $80 !0:EOF
>d0d2	b0d2	00 58					.text	0,$58,""               ; $81 !1:SH1
>d0d4	b0d4	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>d0d6	b0d6	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $83 ABS(
>d0dc	b0dc	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $84 ALLOC(
>d0e4	b0e4	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $85 ASC(
>d0ea	b0ea	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $86 CHR$(
>d0f1	b0f1	06 aa 45 56 45 4e 54 28			.text	6,$aa,"EVENT("         ; $87 EVENT(
>d0f9	b0f9	05 6b 46 41 4c 53 45			.text	5,$6b,"FALSE"          ; $88 FALSE
>d100	b100	05 44 46 52 41 43 28			.text	5,$44,"FRAC("          ; $89 FRAC(
>d107	b107	05 2c 47 45 54 24 28			.text	5,$2c,"GET$("          ; $8a GET$(
>d10e	b10e	04 08 47 45 54 28			.text	4,$08,"GET("           ; $8b GET(
>d114	b114	09 4a 47 45 54 44 41 54			.text	9,$4a,"GETDATE$("      ; $8c GETDATE$(
>d11c	b11c	45 24 28
>d11f	b11f	09 5b 47 45 54 54 49 4d			.text	9,$5b,"GETTIME$("      ; $8d GETTIME$(
>d127	b127	45 24 28
>d12a	b12a	04 0d 48 49 54 28			.text	4,$0d,"HIT("           ; $8e HIT(
>d130	b130	07 cc 49 4e 4b 45 59 24			.text	7,$cc,"INKEY$("        ; $8f INKEY$(
>d138	b138	28
>d139	b139	06 a8 49 4e 4b 45 59 28			.text	6,$a8,"INKEY("         ; $90 INKEY(
>d141	b141	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $91 INT(
>d147	b147	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $92 ISVAL(
>d14f	b14f	0a e0 49 54 45 4d 43 4f			.text	10,$e0,"ITEMCOUNT("     ; $93 ITEMCOUNT(
>d157	b157	55 4e 54 28
>d15b	b15b	09 5b 49 54 45 4d 47 45			.text	9,$5b,"ITEMGET$("      ; $94 ITEMGET$(
>d163	b163	54 24 28
>d166	b166	05 5c 4a 4f 59 42 28			.text	5,$5c,"JOYB("          ; $95 JOYB(
>d16d	b16d	05 72 4a 4f 59 58 28			.text	5,$72,"JOYX("          ; $96 JOYX(
>d174	b174	05 73 4a 4f 59 59 28			.text	5,$73,"JOYY("          ; $97 JOYY(
>d17b	b17b	08 49 4b 45 59 44 4f 57			.text	8,$49,"KEYDOWN("       ; $98 KEYDOWN(
>d183	b183	4e 28
>d185	b185	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $99 LEFT$(
>d18d	b18d	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $9a LEN(
>d193	b193	04 0e 4d 41 58 28			.text	4,$0e,"MAX("           ; $9b MAX(
>d199	b199	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $9c MID$(
>d1a0	b1a0	04 0c 4d 49 4e 28			.text	4,$0c,"MIN("           ; $9d MIN(
>d1a6	b1a6	04 19 4e 4f 54 28			.text	4,$19,"NOT("           ; $9e NOT(
>d1ac	b1ac	05 4d 50 45 45 4b 28			.text	5,$4d,"PEEK("          ; $9f PEEK(
>d1b3	b1b3	06 91 50 45 45 4b 44 28			.text	6,$91,"PEEKD("         ; $a0 PEEKD(
>d1bb	b1bb	06 99 50 45 45 4b 4c 28			.text	6,$99,"PEEKL("         ; $a1 PEEKL(
>d1c3	b1c3	06 a4 50 45 45 4b 57 28			.text	6,$a4,"PEEKW("         ; $a2 PEEKW(
>d1cb	b1cb	08 3c 50 4c 41 59 49 4e			.text	8,$3c,"PLAYING("       ; $a3 PLAYING(
>d1d3	b1d3	47 28
>d1d5	b1d5	07 e9 52 41 4e 44 4f 4d			.text	7,$e9,"RANDOM("        ; $a4 RANDOM(
>d1dd	b1dd	28
>d1de	b1de	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $a5 RIGHT$(
>d1e6	b1e6	28
>d1e7	b1e7	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $a6 RND(
>d1ed	b1ed	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $a7 SGN(
>d1f3	b1f3	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $a8 SPC(
>d1f9	b1f9	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $a9 STR$(
>d200	b200	06 a9 54 49 4d 45 52 28			.text	6,$a9,"TIMER("         ; $aa TIMER(
>d208	b208	04 40 54 52 55 45			.text	4,$40,"TRUE"           ; $ab TRUE
>d20e	b20e	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $ac VAL(
>d214	b214	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $ad FOR
>d219	b219	02 8f 49 46				.text	2,$8f,"IF"             ; $ae IF
>d21d	b21d	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $af PROC
>d223	b223	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $b0 REPEAT
>d22b	b22b	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $b1 WHILE
>d232	b232	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $b2 ENDIF
>d239	b239	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $b3 ENDPROC
>d241	b241	43
>d242	b242	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $b4 NEXT
>d248	b248	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $b5 THEN
>d24e	b24e	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $b6 UNTIL
>d255	b255	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $b7 WEND
>d25b	b25b	02 95 41 54				.text	2,$95,"AT"             ; $b8 AT
>d25f	b25f	02 9b 42 59				.text	2,$9b,"BY"             ; $b9 BY
>d263	b263	04 1c 43 41 4c 4c			.text	4,$1c,"CALL"           ; $ba CALL
>d269	b269	06 b2 43 49 52 43 4c 45			.text	6,$b2,"CIRCLE"         ; $bb CIRCLE
>d271	b271	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $bc CLEAR
>d278	b278	05 7f 43 4f 4c 4f 52			.text	5,$7f,"COLOR"          ; $bd COLOR
>d27f	b27f	06 d4 43 4f 4c 4f 55 52			.text	6,$d4,"COLOUR"         ; $be COLOUR
>d287	b287	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $bf DATA
>d28d	b28d	03 da 44 49 4d				.text	3,$da,"DIM"            ; $c0 DIM
>d292	b292	06 db 44 4f 57 4e 54 4f			.text	6,$db,"DOWNTO"         ; $c1 DOWNTO
>d29a	b29a	04 29 45 4c 53 45			.text	4,$29,"ELSE"           ; $c2 ELSE
>d2a0	b2a0	04 34 46 52 4f 4d			.text	4,$34,"FROM"           ; $c3 FROM
>d2a6	b2a6	03 e5 47 46 58				.text	3,$e5,"GFX"            ; $c4 GFX
>d2ab	b2ab	04 24 48 45 52 45			.text	4,$24,"HERE"           ; $c5 HERE
>d2b1	b2b1	05 63 49 4d 41 47 45			.text	5,$63,"IMAGE"          ; $c6 IMAGE
>d2b8	b2b8	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $c7 LET
>d2bd	b2bd	04 28 4c 49 4e 45			.text	4,$28,"LINE"           ; $c8 LINE
>d2c3	b2c3	05 6b 4c 4f 43 41 4c			.text	5,$6b,"LOCAL"          ; $c9 LOCAL
>d2ca	b2ca	07 1a 4d 45 4d 43 4f 50			.text	7,$1a,"MEMCOPY"        ; $ca MEMCOPY
>d2d2	b2d2	59
>d2d3	b2d3	03 db 4f 46 46				.text	3,$db,"OFF"            ; $cb OFF
>d2d8	b2d8	02 9d 4f 4e				.text	2,$9d,"ON"             ; $cc ON
>d2dc	b2dc	07 20 4f 55 54 4c 49 4e			.text	7,$20,"OUTLINE"        ; $cd OUTLINE
>d2e4	b2e4	45
>d2e5	b2e5	07 0f 50 41 4c 45 54 54			.text	7,$0f,"PALETTE"        ; $ce PALETTE
>d2ed	b2ed	45
>d2ee	b2ee	04 3f 50 4c 4f 54			.text	4,$3f,"PLOT"           ; $cf PLOT
>d2f4	b2f4	04 2f 50 4f 4b 45			.text	4,$2f,"POKE"           ; $d0 POKE
>d2fa	b2fa	05 73 50 4f 4b 45 44			.text	5,$73,"POKED"          ; $d1 POKED
>d301	b301	05 7b 50 4f 4b 45 4c			.text	5,$7b,"POKEL"          ; $d2 POKEL
>d308	b308	05 86 50 4f 4b 45 57			.text	5,$86,"POKEW"          ; $d3 POKEW
>d30f	b30f	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $d4 READ
>d315	b315	04 2e 52 45 43 54			.text	4,$2e,"RECT"           ; $d5 RECT
>d31b	b31b	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $d6 REM
>d320	b320	05 7b 53 4f 4c 49 44			.text	5,$7b,"SOLID"          ; $d7 SOLID
>d327	b327	05 89 53 4f 55 4e 44			.text	5,$89,"SOUND"          ; $d8 SOUND
>d32e	b32e	06 d7 53 50 52 49 54 45			.text	6,$d7,"SPRITE"         ; $d9 SPRITE
>d336	b336	04 45 54 45 58 54			.text	4,$45,"TEXT"           ; $da TEXT
>d33c	b33c	02 a3 54 4f				.text	2,$a3,"TO"             ; $db TO
>d340	b340	ff					.text	$FF
.d341	b341					KeywordSet1:
>d341	b341	00 65					.text	0,$65,""               ; $80 !0:EOF
>d343	b343	00 58					.text	0,$58,""               ; $81 !1:SH1
>d345	b345	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>d347	b347	08 4c 41 53 53 45 4d 42			.text	8,$4c,"ASSEMBLE"       ; $83 ASSEMBLE
>d34f	b34f	4c 45
>d351	b351	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $84 ASSERT
>d359	b359	06 bd 42 49 54 4d 41 50			.text	6,$bd,"BITMAP"         ; $85 BITMAP
>d361	b361	05 62 42 4c 4f 41 44			.text	5,$62,"BLOAD"          ; $86 BLOAD
>d368	b368	05 71 42 53 41 56 45			.text	5,$71,"BSAVE"          ; $87 BSAVE
>d36f	b36f	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $88 CLS
>d374	b374	06 d0 43 50 52 49 4e 54			.text	6,$d0,"CPRINT"         ; $89 CPRINT
>d37c	b37c	03 df 44 49 52				.text	3,$df,"DIR"            ; $8a DIR
>d381	b381	03 e6 44 4f 53				.text	3,$e6,"DOS"            ; $8b DOS
>d386	b386	05 7a 44 52 49 56 45			.text	5,$7a,"DRIVE"          ; $8c DRIVE
>d38d	b38d	03 d7 45 4e 44				.text	3,$d7,"END"            ; $8d END
>d392	b392	07 11 45 58 50 4c 4f 44			.text	7,$11,"EXPLODE"        ; $8e EXPLODE
>d39a	b39a	45
>d39b	b39b	02 96 47 4f				.text	2,$96,"GO"             ; $8f GO
>d39f	b39f	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $90 GOSUB
>d3a6	b3a6	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $91 GOTO
>d3ac	b3ac	05 70 48 49 4d 45 4d			.text	5,$70,"HIMEM"          ; $92 HIMEM
>d3b3	b3b3	05 90 49 4e 50 55 54			.text	5,$90,"INPUT"          ; $93 INPUT
>d3ba	b3ba	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $94 LIST
>d3c0	b3c0	04 20 4c 4f 41 44			.text	4,$20,"LOAD"           ; $95 LOAD
>d3c6	b3c6	05 89 4d 4f 55 53 45			.text	5,$89,"MOUSE"          ; $96 MOUSE
>d3cd	b3cd	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $97 NEW
>d3d2	b3d2	04 2e 50 49 4e 47			.text	4,$2e,"PING"           ; $98 PING
>d3d8	b3d8	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $99 PRINT
>d3df	b3df	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $9a RESTORE
>d3e7	b3e7	45
>d3e8	b3e8	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $9b RETURN
>d3f0	b3f0	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $9c RUN
>d3f5	b3f5	04 2f 53 41 56 45			.text	4,$2f,"SAVE"           ; $9d SAVE
>d3fb	b3fb	07 0a 53 45 54 44 41 54			.text	7,$0a,"SETDATE"        ; $9e SETDATE
>d403	b403	45
>d404	b404	07 1b 53 45 54 54 49 4d			.text	7,$1b,"SETTIME"        ; $9f SETTIME
>d40c	b40c	45
>d40d	b40d	05 8d 53 48 4f 4f 54			.text	5,$8d,"SHOOT"          ; $a0 SHOOT
>d414	b414	07 2a 53 50 52 49 54 45			.text	7,$2a,"SPRITES"        ; $a1 SPRITES
>d41c	b41c	53
>d41d	b41d	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $a2 STOP
>d423	b423	06 d5 56 45 52 49 46 59			.text	6,$d5,"VERIFY"         ; $a3 VERIFY
>d42b	b42b	03 ee 58 47 4f				.text	3,$ee,"XGO"            ; $a4 XGO
>d430	b430	05 78 58 4c 4f 41 44			.text	5,$78,"XLOAD"          ; $a5 XLOAD
>d437	b437	03 eb 5a 41 50				.text	3,$eb,"ZAP"            ; $a6 ZAP
>d43c	b43c	ff					.text	$FF
.d43d	b43d					KeywordSet2:
>d43d	b43d	00 65					.text	0,$65,""               ; $80 !0:EOF
>d43f	b43f	00 58					.text	0,$58,""               ; $81 !1:SH1
>d441	b441	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>d443	b443	03 c8 41 44 43				.text	3,$c8,"ADC"            ; $83 ADC
>d448	b448	03 d3 41 4e 44				.text	3,$d3,"AND"            ; $84 AND
>d44d	b44d	03 e0 41 53 4c				.text	3,$e0,"ASL"            ; $85 ASL
>d452	b452	03 c8 42 43 43				.text	3,$c8,"BCC"            ; $86 BCC
>d457	b457	03 d8 42 43 53				.text	3,$d8,"BCS"            ; $87 BCS
>d45c	b45c	03 d8 42 45 51				.text	3,$d8,"BEQ"            ; $88 BEQ
>d461	b461	03 df 42 49 54				.text	3,$df,"BIT"            ; $89 BIT
>d466	b466	03 d8 42 4d 49				.text	3,$d8,"BMI"            ; $8a BMI
>d46b	b46b	03 d5 42 4e 45				.text	3,$d5,"BNE"            ; $8b BNE
>d470	b470	03 de 42 50 4c				.text	3,$de,"BPL"            ; $8c BPL
>d475	b475	03 d5 42 52 41				.text	3,$d5,"BRA"            ; $8d BRA
>d47a	b47a	03 df 42 52 4b				.text	3,$df,"BRK"            ; $8e BRK
>d47f	b47f	03 db 42 56 43				.text	3,$db,"BVC"            ; $8f BVC
>d484	b484	03 eb 42 56 53				.text	3,$eb,"BVS"            ; $90 BVS
>d489	b489	03 d2 43 4c 43				.text	3,$d2,"CLC"            ; $91 CLC
>d48e	b48e	03 d3 43 4c 44				.text	3,$d3,"CLD"            ; $92 CLD
>d493	b493	03 d8 43 4c 49				.text	3,$d8,"CLI"            ; $93 CLI
>d498	b498	03 e5 43 4c 56				.text	3,$e5,"CLV"            ; $94 CLV
>d49d	b49d	03 e0 43 4d 50				.text	3,$e0,"CMP"            ; $95 CMP
>d4a2	b4a2	03 eb 43 50 58				.text	3,$eb,"CPX"            ; $96 CPX
>d4a7	b4a7	03 ec 43 50 59				.text	3,$ec,"CPY"            ; $97 CPY
>d4ac	b4ac	03 cc 44 45 43				.text	3,$cc,"DEC"            ; $98 DEC
>d4b1	b4b1	03 e1 44 45 58				.text	3,$e1,"DEX"            ; $99 DEX
>d4b6	b4b6	03 e2 44 45 59				.text	3,$e2,"DEY"            ; $9a DEY
>d4bb	b4bb	03 e6 45 4f 52				.text	3,$e6,"EOR"            ; $9b EOR
>d4c0	b4c0	03 da 49 4e 43				.text	3,$da,"INC"            ; $9c INC
>d4c5	b4c5	03 ef 49 4e 58				.text	3,$ef,"INX"            ; $9d INX
>d4ca	b4ca	03 f0 49 4e 59				.text	3,$f0,"INY"            ; $9e INY
>d4cf	b4cf	03 e7 4a 4d 50				.text	3,$e7,"JMP"            ; $9f JMP
>d4d4	b4d4	03 ef 4a 53 52				.text	3,$ef,"JSR"            ; $a0 JSR
>d4d9	b4d9	03 d1 4c 44 41				.text	3,$d1,"LDA"            ; $a1 LDA
>d4de	b4de	03 e8 4c 44 58				.text	3,$e8,"LDX"            ; $a2 LDX
>d4e3	b4e3	03 e9 4c 44 59				.text	3,$e9,"LDY"            ; $a3 LDY
>d4e8	b4e8	03 f1 4c 53 52				.text	3,$f1,"LSR"            ; $a4 LSR
>d4ed	b4ed	03 ed 4e 4f 50				.text	3,$ed,"NOP"            ; $a5 NOP
>d4f2	b4f2	03 e2 4f 52 41				.text	3,$e2,"ORA"            ; $a6 ORA
>d4f7	b4f7	03 d9 50 48 41				.text	3,$d9,"PHA"            ; $a7 PHA
>d4fc	b4fc	03 e8 50 48 50				.text	3,$e8,"PHP"            ; $a8 PHP
>d501	b501	03 f0 50 48 58				.text	3,$f0,"PHX"            ; $a9 PHX
>d506	b506	03 f1 50 48 59				.text	3,$f1,"PHY"            ; $aa PHY
>d50b	b50b	03 dd 50 4c 41				.text	3,$dd,"PLA"            ; $ab PLA
>d510	b510	03 ec 50 4c 50				.text	3,$ec,"PLP"            ; $ac PLP
>d515	b515	03 f4 50 4c 58				.text	3,$f4,"PLX"            ; $ad PLX
>d51a	b51a	03 f5 50 4c 59				.text	3,$f5,"PLY"            ; $ae PLY
>d51f	b51f	03 ed 52 4f 4c				.text	3,$ed,"ROL"            ; $af ROL
>d524	b524	03 f3 52 4f 52				.text	3,$f3,"ROR"            ; $b0 ROR
>d529	b529	03 ef 52 54 49				.text	3,$ef,"RTI"            ; $b1 RTI
>d52e	b52e	03 f9 52 54 53				.text	3,$f9,"RTS"            ; $b2 RTS
>d533	b533	03 d8 53 42 43				.text	3,$d8,"SBC"            ; $b3 SBC
>d538	b538	03 db 53 45 43				.text	3,$db,"SEC"            ; $b4 SEC
>d53d	b53d	03 dc 53 45 44				.text	3,$dc,"SED"            ; $b5 SED
>d542	b542	03 e1 53 45 49				.text	3,$e1,"SEI"            ; $b6 SEI
>d547	b547	03 e8 53 54 41				.text	3,$e8,"STA"            ; $b7 STA
>d54c	b54c	03 f7 53 54 50				.text	3,$f7,"STP"            ; $b8 STP
>d551	b551	03 ff 53 54 58				.text	3,$ff,"STX"            ; $b9 STX
>d556	b556	03 00 53 54 59				.text	3,$00,"STY"            ; $ba STY
>d55b	b55b	03 01 53 54 5a				.text	3,$01,"STZ"            ; $bb STZ
>d560	b560	03 ed 54 41 58				.text	3,$ed,"TAX"            ; $bc TAX
>d565	b565	03 ee 54 41 59				.text	3,$ee,"TAY"            ; $bd TAY
>d56a	b56a	03 e8 54 52 42				.text	3,$e8,"TRB"            ; $be TRB
>d56f	b56f	03 e9 54 53 42				.text	3,$e9,"TSB"            ; $bf TSB
>d574	b574	03 ff 54 53 58				.text	3,$ff,"TSX"            ; $c0 TSX
>d579	b579	03 ed 54 58 41				.text	3,$ed,"TXA"            ; $c1 TXA
>d57e	b57e	03 ff 54 58 53				.text	3,$ff,"TXS"            ; $c2 TXS
>d583	b583	03 ee 54 59 41				.text	3,$ee,"TYA"            ; $c3 TYA
>d588	b588	ff					.text	$FF
.d589	b589					Export_TKListConvertLine:
.d589	b589	48		pha				pha 								; save indent on the stack
.d58a	b58a	9c 19 04	stz $0419			stz 	tbOffset
.d58d	b58d	9c 29 04	stz $0429			stz 	tokenBuffer
.d590	b590	9c 25 04	stz $0425			stz 	currentListColour
.d593	b593	a9 8d		lda #$8d			lda 	#CLILineNumber+$80
.d595	b595	20 12 b7	jsr $b712			jsr 	LCLWriteColour
.d598	b598	a0 02		ldy #$02			ldy 	#2 							; convert line number to string
.d59a	b59a	b1 30		lda ($30),y			lda 	(codePtr),y
.d59c	b59c	aa		tax				tax
.d59d	b59d	88		dey				dey
.d59e	b59e	b1 30		lda ($30),y			lda 	(codePtr),y
.d5a0	b5a0	20 83 b7	jsr $b783			jsr 	LCLWriteNumberXA
.d5a3	b5a3	68		pla				pla 								; adjustment to indent
.d5a4	b5a4	48		pha				pha 								; save on stack
.d5a5	b5a5	10 0c		bpl $b5b3			bpl 	_LCNoAdjust 				; don't adjust indent if +ve, do after.
.d5a7	b5a7	18		clc				clc 								; add to list indent and make 0 if goes -ve.
.d5a8	b5a8	6d 22 04	adc $0422			adc 	listIndent
.d5ab	b5ab	8d 22 04	sta $0422			sta 	listIndent
.d5ae	b5ae	10 03		bpl $b5b3			bpl 	_LCNoAdjust
.d5b0	b5b0	9c 22 04	stz $0422			stz 	listIndent
.d5b3	b5b3					_LCNoAdjust:
.d5b3	b5b3	18		clc				clc		 							; work out actual indent.
.d5b4	b5b4	ad 22 04	lda $0422			lda 	listIndent
.d5b7	b5b7	0a		asl a				asl 	a
.d5b8	b5b8	69 07		adc #$07			adc 	#7
.d5ba	b5ba	85 36		sta $36				sta 	zTemp0
.d5bc	b5bc					_LCPadOut:
.d5bc	b5bc	a9 20		lda #$20			lda 	#' '						; pad out to 6+indent characters
.d5be	b5be	20 1b b7	jsr $b71b			jsr 	LCLWrite
.d5c1	b5c1	ad 19 04	lda $0419			lda 	tbOffset
.d5c4	b5c4	c5 36		cmp $36				cmp 	zTemp0
.d5c6	b5c6	d0 f4		bne $b5bc			bne 	_LCPadOut
.d5c8	b5c8	a0 03		ldy #$03			ldy 	#3 							; start position.
.d5ca	b5ca					_LCMainLoop:
.d5ca	b5ca	a9 8c		lda #$8c			lda 	#CLIPunctuation+$80
.d5cc	b5cc	20 12 b7	jsr $b712			jsr 	LCLWriteColour
.d5cf	b5cf	b1 30		lda ($30),y			lda 	(codePtr),y
.d5d1	b5d1	c9 80		cmp #$80			cmp 	#KWC_EOL 					; end of line ?
.d5d3	b5d3	f0 17		beq $b5ec			beq 	_LCExit
.d5d5	b5d5	c9 10		cmp #$10			cmp 	#16 						; 0-5 are the double punctuations
.d5d7	b5d7	90 1e		bcc $b5f7			bcc 	_LCDoubles
.d5d9	b5d9	c9 20		cmp #$20			cmp 	#32 						; 16-31 are shifted punctuation from 64-91
.d5db	b5db	90 2a		bcc $b607			bcc 	_LCShiftPunc
.d5dd	b5dd	c9 40		cmp #$40			cmp 	#64 						; 32-64 are as stored, punc and digits
.d5df	b5df	90 35		bcc $b616			bcc 	_LCPunctuation
.d5e1	b5e1	c9 80		cmp #$80			cmp 	#128 						; 64-127 are variable identifiers.
.d5e3	b5e3	90 51		bcc $b636			bcc 	_LCIdentifiers
.d5e5	b5e5	c9 fe		cmp #$fe			cmp 	#254 						; 128-253 are tokenised words
.d5e7	b5e7	90 73		bcc $b65c			bcc 	_LCTokens
.d5e9	b5e9	4c bc b6	jmp $b6bc			jmp 	_LCData 					; 254-5 are data objects
.d5ec	b5ec					_LCExit:
.d5ec	b5ec	68		pla				pla 								; get old indent adjust
.d5ed	b5ed	30 07		bmi $b5f6			bmi 	_LCExit2
.d5ef	b5ef	18		clc				clc 								; add to indent if +ve
.d5f0	b5f0	6d 22 04	adc $0422			adc 	listIndent
.d5f3	b5f3	8d 22 04	sta $0422			sta 	listIndent
.d5f6	b5f6					_LCExit2:
.d5f6	b5f6	60		rts				rts
.d5f7	b5f7					_LCDoubles:
.d5f7	b5f7	48		pha				pha
.d5f8	b5f8	4a		lsr a				lsr 	a 							; put bit 2 into bit 1
.d5f9	b5f9	29 02		and #$02			and 	#2
.d5fb	b5fb	09 3c		ora #$3c			ora 	#60 						; make < >
.d5fd	b5fd	20 1b b7	jsr $b71b			jsr 	LCLWrite
.d600	b600	68		pla				pla 								; restore, do lower bit
.d601	b601	29 03		and #$03			and 	#3
.d603	b603	09 3c		ora #$3c			ora 	#60
.d605	b605	80 0f		bra $b616			bra		_LCPunctuation 				; print, increment, loop
.d607	b607					_LCShiftPunc:
.d607	b607	aa		tax				tax 								; save in X
.d608	b608	29 07		and #$07			and 	#7 							; lower 3 bits
.d60a	b60a	f0 02		beq $b60e			beq 	_LCNoAdd
.d60c	b60c	09 18		ora #$18			ora 	#24 						; adds $18 to it.
.d60e	b60e					_LCNoAdd:
.d60e	b60e	e0 18		cpx #$18			cpx 	#24 						; if >= 24 add $20
.d610	b610	90 02		bcc $b614			bcc 	_LCNoAdd2
.d612	b612	09 20		ora #$20			ora 	#32 						; adds $20
.d614	b614					_LCNoAdd2:
.d614	b614	09 40		ora #$40			ora 	#$40 						; shift into 64-127 range and fall through.
.d616	b616					_LCPunctuation:
.d616	b616	c9 3a		cmp #$3a			cmp 	#':' 						; check if :
.d618	b618	d0 03		bne $b61d			bne 	_LCPContinue
.d61a	b61a	20 31 b7	jsr $b731			jsr 	LCLDeleteLastSpace 			; if so delete any preceding spaces
.d61d	b61d					_LCPContinue:
.d61d	b61d	c9 2e		cmp #$2e			cmp 	#'.'
.d61f	b61f	f0 08		beq $b629			beq 	_LCPIsConstant
.d621	b621	c9 30		cmp #$30			cmp 	#'0'
.d623	b623	90 0b		bcc $b630			bcc 	_LCPNotConstant
.d625	b625	c9 3a		cmp #$3a			cmp 	#'9'+1
.d627	b627	b0 07		bcs $b630			bcs 	_LCPNotConstant
.d629	b629					_LCPIsConstant:
.d629	b629	48		pha				pha
.d62a	b62a	a9 87		lda #$87			lda 	#CLIConstant+$80
.d62c	b62c	20 12 b7	jsr $b712			jsr 	LCLWriteColour
.d62f	b62f	68		pla				pla
.d630	b630					_LCPNotConstant:
.d630	b630	c8		iny				iny 								; consume character
.d631	b631	20 1b b7	jsr $b71b			jsr 	LCLWrite 					; write it out.
.d634	b634	80 94		bra $b5ca			bra 	_LCMainLoop 				; go round again.
.d636	b636					_LCIdentifiers:
.d636	b636	18		clc				clc 								; convert to physical address
.d637	b637	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.d639	b639	85 37		sta $37				sta 	zTemp0+1
.d63b	b63b	c8		iny				iny
.d63c	b63c	b1 30		lda ($30),y			lda 	(codePtr),y
.d63e	b63e	85 36		sta $36				sta 	zTemp0
.d640	b640	c8		iny				iny
.d641	b641	5a		phy				phy 								; save position
.d642	b642	a9 8e		lda #$8e			lda 	#CLIIdentifier+$80
.d644	b644	20 12 b7	jsr $b712			jsr 	LCLWriteColour
.d647	b647	a0 07		ldy #$07			ldy 	#7 							; output the identifier at +8
.d649	b649					_LCOutIdentifier:
.d649	b649	c8		iny				iny
.d64a	b64a	b1 36		lda ($36),y			lda 	(zTemp0),y					; bit 7 set = end.
.d64c	b64c	29 7f		and #$7f			and 	#$7F
.d64e	b64e	20 6d b7	jsr $b76d			jsr 	LCLLowerCase
.d651	b651	20 1b b7	jsr $b71b			jsr 	LCLWrite
.d654	b654	b1 36		lda ($36),y			lda 	(zTemp0),y				 	; ends when bit 7 set.
.d656	b656	10 f1		bpl $b649			bpl 	_LCOutIdentifier
.d658	b658	7a		ply				ply 								; restore position
.d659	b659	4c ca b5	jmp $b5ca			jmp 	_LCMainLoop
.d65c	b65c					_LCTokens:
.d65c	b65c	aa		tax				tax 								; token in X
.d65d	b65d	a9 3d		lda #$3d			lda 	#((KeywordSet2) & $FF)
.d65f	b65f	85 36		sta $36				sta 	0+zTemp0
.d661	b661	a9 b4		lda #$b4			lda 	#((KeywordSet2) >> 8)
.d663	b663	85 37		sta $37				sta 	1+zTemp0
.d665	b665	e0 82		cpx #$82			cpx 	#$82
.d667	b667	f0 16		beq $b67f			beq 	_LCUseShift
.d669	b669	a9 41		lda #$41			lda 	#((KeywordSet1) & $FF)
.d66b	b66b	85 36		sta $36				sta 	0+zTemp0
.d66d	b66d	a9 b3		lda #$b3			lda 	#((KeywordSet1) >> 8)
.d66f	b66f	85 37		sta $37				sta 	1+zTemp0
.d671	b671	e0 81		cpx #$81			cpx 	#$81
.d673	b673	f0 0a		beq $b67f			beq 	_LCUseShift
.d675	b675	a9 d0		lda #$d0			lda 	#((KeywordSet0) & $FF)
.d677	b677	85 36		sta $36				sta 	0+zTemp0
.d679	b679	a9 b0		lda #$b0			lda 	#((KeywordSet0) >> 8)
.d67b	b67b	85 37		sta $37				sta 	1+zTemp0
.d67d	b67d	80 01		bra $b680			bra 	_LCNoShift
.d67f	b67f					_LCUseShift:
.d67f	b67f	c8		iny				iny
.d680	b680					_LCNoShift:
.d680	b680	20 45 b7	jsr $b745			jsr 	LCLCheckSpaceRequired 		; do we need a space ?
.d683	b683	b1 30		lda ($30),y			lda 	(codePtr),y
.d685	b685	aa		tax				tax 								; into X
.d686	b686					_LCFindText:
.d686	b686	ca		dex				dex
.d687	b687	10 0e		bpl $b697			bpl 	_LCFoundText 				; found text.
.d689	b689	b2 36		lda ($36)			lda 	(zTemp0) 					; length of text
.d68b	b68b	1a		inc a				inc 	a 							; one extra for size
.d68c	b68c	38		sec				sec 								; one extra for checksum
.d68d	b68d	65 36		adc $36				adc 	zTemp0 						; go to next token
.d68f	b68f	85 36		sta $36				sta 	zTemp0
.d691	b691	90 f3		bcc $b686			bcc 	_LCFindText
.d693	b693	e6 37		inc $37				inc 	zTemp0+1
.d695	b695	80 ef		bra $b686			bra 	_LCFindText
.d697	b697					_LCFoundText:
.d697	b697	5a		phy				phy 								; save List position
.d698	b698	b2 36		lda ($36)			lda 	(zTemp0)					; count to print
.d69a	b69a	aa		tax				tax
.d69b	b69b	a9 86		lda #$86			lda 	#CLIToken+$80
.d69d	b69d	20 12 b7	jsr $b712			jsr 	LCLWriteColour
.d6a0	b6a0	a0 02		ldy #$02			ldy 	#2
.d6a2	b6a2					_LCCopyToken:
.d6a2	b6a2	b1 36		lda ($36),y			lda 	(zTemp0),y
.d6a4	b6a4	20 6d b7	jsr $b76d			jsr 	LCLLowerCase
.d6a7	b6a7	20 1b b7	jsr $b71b			jsr 	LCLWrite
.d6aa	b6aa	c8		iny				iny
.d6ab	b6ab	ca		dex				dex
.d6ac	b6ac	d0 f4		bne $b6a2			bne 	_LCCopyToken
.d6ae	b6ae	c9 28		cmp #$28			cmp 	#"(" 						; if last char not ( print a space
.d6b0	b6b0	f0 05		beq $b6b7			beq 	_LCNoSpace
.d6b2	b6b2	a9 20		lda #$20			lda 	#' '
.d6b4	b6b4	20 1b b7	jsr $b71b			jsr 	LCLWrite
.d6b7	b6b7					_LCNoSpace:
.d6b7	b6b7	7a		ply				ply 								; restore position.
.d6b8	b6b8	c8		iny				iny 								; consume token
.d6b9	b6b9	4c ca b5	jmp $b5ca			jmp 	_LCMainLoop 				; and go around again.
.d6bc	b6bc					_LCData:
.d6bc	b6bc	48		pha				pha 								; save type $FE/$FF
.d6bd	b6bd	a2 24		ldx #$24			ldx 	#'$' 						; figure out $ or "
.d6bf	b6bf	c9 fe		cmp #$fe			cmp 	#$FE
.d6c1	b6c1	f0 22		beq $b6e5			beq 	_LCHaveOpener
.d6c3	b6c3	a2 22		ldx #$22			ldx 	#'"'
.d6c5	b6c5	a9 8f		lda #$8f			lda 	#CLIData+$80
.d6c7	b6c7	20 12 b7	jsr $b712			jsr 	LCLWriteColour
.d6ca	b6ca	c0 04		cpy #$04			cpy 	#4 							; must be 2nd thing on line
.d6cc	b6cc	d0 17		bne $b6e5			bne 	_LCHaveOpener
.d6ce	b6ce	88		dey				dey 								; what precedes it ?
.d6cf	b6cf	b1 30		lda ($30),y			lda 	(codePtr),y
.d6d1	b6d1	c8		iny				iny
.d6d2	b6d2	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; if quote
.d6d4	b6d4	d0 0f		bne $b6e5			bne 	_LCHaveOpener
.d6d6	b6d6	a9 09		lda #$09			lda 	#9 							; tab
.d6d8	b6d8	20 1b b7	jsr $b71b			jsr 	LCLWrite
.d6db	b6db	a9 9e		lda #$9e			lda 	#$90+CLIBComment
.d6dd	b6dd	20 1b b7	jsr $b71b			jsr 	LCLWrite
.d6e0	b6e0	a9 85		lda #$85			lda 	#CLIFComment+$80
.d6e2	b6e2	20 12 b7	jsr $b712			jsr 	LCLWriteColour
.d6e5	b6e5					_LCHaveOpener:
.d6e5	b6e5	8a		txa				txa 								; output prefix (# or ")
.d6e6	b6e6	20 1b b7	jsr $b71b			jsr 	LCLWrite
.d6e9	b6e9	c8		iny				iny 								; get count
.d6ea	b6ea	b1 30		lda ($30),y			lda 	(codePtr),y
.d6ec	b6ec	aa		tax				tax
.d6ed	b6ed	c8		iny				iny 								; point at first character
.d6ee	b6ee					_LCOutData:
.d6ee	b6ee	b1 30		lda ($30),y			lda 	(codePtr),y
.d6f0	b6f0	c9 00		cmp #$00			cmp 	#0
.d6f2	b6f2	f0 03		beq $b6f7			beq 	_LCNoPrint
.d6f4	b6f4	20 1b b7	jsr $b71b			jsr 	LCLWrite
.d6f7	b6f7					_LCNoPrint:
.d6f7	b6f7	c8		iny				iny
.d6f8	b6f8	ca		dex				dex
.d6f9	b6f9	d0 f3		bne $b6ee			bne 	_LCOutData
.d6fb	b6fb	68		pla				pla 								; closing " required ?
.d6fc	b6fc	c9 ff		cmp #$ff			cmp 	#$FF 						; not required for hex constant.
.d6fe	b6fe	d0 0f		bne $b70f			bne 	_LCNoQuote
.d700	b700	a9 22		lda #$22			lda 	#'"'
.d702	b702	20 1b b7	jsr $b71b			jsr 	LCLWrite
.d705	b705	ad a8 07	lda $07a8			lda 	EXTTextColour
.d708	b708	29 0f		and #$0f			and 	#$0F
.d70a	b70a	09 90		ora #$90			ora 	#$90
.d70c	b70c	20 1b b7	jsr $b71b			jsr 	LCLWrite
.d70f	b70f					_LCNoQuote:
.d70f	b70f	4c ca b5	jmp $b5ca			jmp 	_LCMainLoop
.d712	b712					LCLWriteColour:
.d712	b712	cd 25 04	cmp $0425			cmp 	currentListColour 			; has the colour changed
.d715	b715	8d 25 04	sta $0425			sta 	currentListColour 			; (update it anyway)
.d718	b718	d0 01		bne $b71b			bne 	LCLWrite 					; if different, output it
.d71a	b71a	60		rts				rts
.d71b	b71b					LCLWrite:
.d71b	b71b	da		phx				phx
.d71c	b71c	ae 19 04	ldx $0419			ldx 	tbOffset 					; write out make ASCIIZ
.d71f	b71f	9d 29 04	sta $0429,x			sta 	tokenBuffer,x
.d722	b722	9e 2a 04	stz $042a,x			stz 	tokenBuffer+1,x
.d725	b725	ee 19 04	inc $0419			inc 	tbOffset 					; bump the position
.d728	b728	09 00		ora #$00			ora 	#0 							; don't update last character if colour data
.d72a	b72a	30 03		bmi $b72f			bmi 	_LCLNoColour
.d72c	b72c	8d 23 04	sta $0423			sta 	lcLastCharacter
.d72f	b72f					_LCLNoColour:
.d72f	b72f	fa		plx				plx
.d730	b730	60		rts				rts
.d731	b731					LCLDeleteLastSpace:
.d731	b731	48		pha				pha
.d732	b732	da		phx				phx
.d733	b733	ae 19 04	ldx $0419			ldx 	tbOffset
.d736	b736	f0 0a		beq $b742			beq 	_LCDLSExit
.d738	b738	bd 28 04	lda $0428,x			lda 	tokenBuffer-1,x
.d73b	b73b	c9 20		cmp #$20			cmp 	#' '
.d73d	b73d	d0 03		bne $b742			bne 	_LCDLSExit
.d73f	b73f	ce 19 04	dec $0419			dec 	tbOffset
.d742	b742					_LCDLSExit:
.d742	b742	fa		plx				plx
.d743	b743	68		pla				pla
.d744	b744	60		rts				rts
.d745	b745					LCLCheckSpaceRequired:
.d745	b745	ad 23 04	lda $0423			lda 	lcLastCharacter 			; check last character
.d748	b748	c9 24		cmp #$24			cmp 	#'$' 						; $ # and ) require that token space.
.d74a	b74a	f0 1b		beq $b767			beq 	_LCCSRSpace
.d74c	b74c	c9 29		cmp #$29			cmp 	#')'
.d74e	b74e	f0 17		beq $b767			beq 	_LCCSRSpace
.d750	b750	c9 23		cmp #$23			cmp 	#'#'
.d752	b752	f0 13		beq $b767			beq 	_LCCSRSpace
.d754	b754	20 6d b7	jsr $b76d			jsr 	LCLLowerCase 				; saves a little effort
.d757	b757	c9 30		cmp #$30			cmp 	#"0" 						; check if it was 0-9 A-Z a-z if so need space.
.d759	b759	90 11		bcc $b76c			bcc 	_LCCSRExit
.d75b	b75b	c9 3a		cmp #$3a			cmp 	#"9"+1
.d75d	b75d	90 08		bcc $b767			bcc 	_LCCSRSpace
.d75f	b75f	c9 61		cmp #$61			cmp 	#"a"
.d761	b761	90 09		bcc $b76c			bcc 	_LCCSRExit
.d763	b763	c9 7b		cmp #$7b			cmp 	#"z"+1
.d765	b765	b0 05		bcs $b76c			bcs 	_LCCSRExit
.d767	b767					_LCCSRSpace:
.d767	b767	a9 20		lda #$20			lda 	#' '
.d769	b769	20 1b b7	jsr $b71b			jsr 	LCLWrite
.d76c	b76c					_LCCSRExit:
.d76c	b76c	60		rts				rts
.d76d	b76d					LCLLowerCase:
.d76d	b76d	c9 41		cmp #$41			cmp 	#"A"
.d76f	b76f	90 06		bcc $b777			bcc 	_LCLLCOut
.d771	b771	c9 5b		cmp #$5b			cmp 	#"Z"+1
.d773	b773	b0 02		bcs $b777			bcs 	_LCLLCOut
.d775	b775	69 20		adc #$20			adc 	#$20
.d777	b777					_LCLLCOut:
.d777	b777	60		rts				rts
.d778	b778					LCLUpperCase:
.d778	b778	c9 61		cmp #$61			cmp 	#"a"
.d77a	b77a	90 06		bcc $b782			bcc 	_LCLUCOut
.d77c	b77c	c9 7b		cmp #$7b			cmp 	#"z"+1
.d77e	b77e	b0 02		bcs $b782			bcs 	_LCLUCOut
.d780	b780	e9 1f		sbc #$1f			sbc 	#$1F
.d782	b782					_LCLUCOut:
.d782	b782	60		rts				rts
.d783	b783					LCLWriteNumberXA:
.d783	b783	64 37		stz $37				stz 	zTemp0+1 					; index into digit table.
.d785	b785					_LCLWNLoop1:
.d785	b785	64 36		stz $36				stz 	zTemp0 						; subtraction count.
.d787	b787					_LCLWNLoop2:
.d787	b787	48		pha				pha 								; save initial LSB
.d788	b788	38		sec				sec
.d789	b789	a4 37		ldy $37				ldy 	zTemp0+1 					; position in table.
.d78b	b78b	f9 bc b7	sbc $b7bc,y			sbc 	_LCLWNTable,y
.d78e	b78e	48		pha				pha
.d78f	b78f	8a		txa				txa
.d790	b790	f9 bd b7	sbc $b7bd,y			sbc 	_LCLWNTable+1,y
.d793	b793	90 07		bcc $b79c			bcc 	_LCLWNUnderflow
.d795	b795	e6 36		inc $36				inc 	zTemp0  					; subtracted one without borrow.
.d797	b797	aa		tax				tax 								; update X
.d798	b798	68		pla				pla 								; restore A
.d799	b799	7a		ply				ply 								; throw original
.d79a	b79a	80 eb		bra $b787			bra 	_LCLWNLoop2 				; try again.
.d79c	b79c					_LCLWNUnderflow:
.d79c	b79c	a4 36		ldy $36				ldy 	zTemp0 						; count of subtractions.
.d79e	b79e	d0 06		bne $b7a6			bne 	_LCLWNOut
.d7a0	b7a0	ad 19 04	lda $0419			lda 	tbOffset 					; suppress leading zeroes
.d7a3	b7a3	3a		dec a				dec 	a
.d7a4	b7a4	f0 04		beq $b7aa			beq 	_LCLWNNext
.d7a6	b7a6					_LCLWNOut:
.d7a6	b7a6	98		tya				tya
.d7a7	b7a7	20 b6 b7	jsr $b7b6			jsr 	_LCLWNOutDigit
.d7aa	b7aa					_LCLWNNext:
.d7aa	b7aa	7a		ply				ply 							 	; restore original value.
.d7ab	b7ab	68		pla				pla
.d7ac	b7ac	a4 37		ldy $37				ldy 	zTemp0+1  					; bump the index
.d7ae	b7ae	c8		iny				iny
.d7af	b7af	c8		iny				iny
.d7b0	b7b0	84 37		sty $37				sty 	zTemp0+1
.d7b2	b7b2	c0 08		cpy #$08			cpy 	#8 							; done all 4
.d7b4	b7b4	d0 cf		bne $b785			bne 	_LCLWNLoop1
.d7b6	b7b6					_LCLWNOutDigit:
.d7b6	b7b6	09 30		ora #$30			ora 	#'0'
.d7b8	b7b8	20 1b b7	jsr $b71b			jsr 	LCLWrite
.d7bb	b7bb	60		rts				rts
.d7bc	b7bc					_LCLWNTable:
>d7bc	b7bc	10 27						.word 	10000
>d7be	b7be	e8 03						.word 	1000
>d7c0	b7c0	64 00						.word 	100
>d7c2	b7c2	0a 00						.word 	10
.d7c4	b7c4					TOKSearchTable:
.d7c4	b7c4	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token being tested.
.d7c6	b7c6	85 36		sta $36				sta 	zTemp0
.d7c8	b7c8	a0 00		ldy #$00			ldy 	#0
.d7ca	b7ca	a9 80		lda #$80			lda 	#$80 						; token # so we know which one we are looking at
.d7cc	b7cc	85 38		sta $38				sta 	zTemp1
.d7ce	b7ce					_TSTLoop:
.d7ce	b7ce	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.d7d0	b7d0	30 49		bmi $b81b			bmi 	_TSTFail 					; -ve = end of table, so fail.
.d7d2	b7d2	f0 2e		beq $b802			beq 	_TSTNext 					; zero, check next as it's a dummy (e.g. EOL, SHIFT)
.d7d4	b7d4	c8		iny				iny 								; get the hash
.d7d5	b7d5	b1 36		lda ($36),y			lda 	(zTemp0),y
.d7d7	b7d7	88		dey				dey
.d7d8	b7d8	cd 03 04	cmp $0403			cmp 	identHash 					; check they match with the identifier hash, if not go to next
.d7db	b7db	d0 25		bne $b802			bne 	_TSTNext
.d7dd	b7dd	ad 02 04	lda $0402			lda 	identTypeEnd 				; get length of identifier from end-start
.d7e0	b7e0	38		sec				sec
.d7e1	b7e1	ed 00 04	sbc $0400			sbc 	identStart
.d7e4	b7e4	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; compare against the length in the table, no match, then return.
.d7e6	b7e6	d0 1a		bne $b802			bne 	_TSTNext
.d7e8	b7e8	5a		phy				phy 								; save Y , we might fail to match.
.d7e9	b7e9	c8		iny				iny 								; point to text
.d7ea	b7ea	c8		iny				iny
.d7eb	b7eb	ae 00 04	ldx $0400			ldx 	identStart 					; offset in line buffer in X
.d7ee	b7ee					_TSTCompareName:
.d7ee	b7ee	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; compare text.
.d7f1	b7f1	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.d7f3	b7f3	d0 0c		bne $b801			bne 	_TSTNextPullY 				; fail, pullY and do next
.d7f5	b7f5	e8		inx				inx
.d7f6	b7f6	c8		iny				iny
.d7f7	b7f7	ec 02 04	cpx $0402			cpx 	identTypeEnd 				; complete match.
.d7fa	b7fa	d0 f2		bne $b7ee			bne 	_TSTCompareName
.d7fc	b7fc	7a		ply				ply 								; throw Y
.d7fd	b7fd	a5 38		lda $38				lda 	zTemp1 						; get token #
.d7ff	b7ff	38		sec				sec 								; return with CS = passed.
.d800	b800	60		rts				rts
.d801	b801					_TSTNextPullY:
.d801	b801	7a		ply				ply 								; restore current, fall through.
.d802	b802					_TSTNext:
.d802	b802	e6 38		inc $38				inc 	zTemp1 						; token counter
.d804	b804	98		tya				tya
.d805	b805	18		clc				clc
.d806	b806	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.d808	b808	1a		inc a				inc 	a 							; +1
.d809	b809	1a		inc a				inc 	a 							; +2
.d80a	b80a	a8		tay				tay
.d80b	b80b	10 c1		bpl $b7ce			bpl 	_TSTLoop 					; if Y < $80 loop back
.d80d	b80d	98		tya				tya 								; add Y to zTemp0 and reset Y
.d80e	b80e	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.d810	b810	18		clc				clc  								; but have tables > 255 bytes
.d811	b811	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.d813	b813	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.d815	b815	90 b7		bcc $b7ce			bcc 	_TSTLoop
.d817	b817	e6 37		inc $37				inc 	zTemp0+1
.d819	b819	80 b3		bra $b7ce			bra 	_TSTLoop
.d81b	b81b					_TSTFail:
.d81b	b81b	18		clc				clc
.d81c	b81c	60		rts				rts
.d81d	b81d					Export_TKTokeniseLine:
.d81d	b81d	20 ea b9	jsr $b9ea			jsr 	LCLFixLineBufferCase 		; fix line case
.d820	b820	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.d822	b822	8d 26 04	sta $0426			sta 	tokenOffset 				; (3 bytes for line number & offset)
.d825	b825	9c 27 04	stz $0427			stz 	tokenLineNumber
.d828	b828	9c 28 04	stz $0428			stz 	tokenLineNumber+1
.d82b	b82b	a2 ff		ldx #$ff			ldx 	#$FF
.d82d	b82d					_TKFindFirst:
.d82d	b82d	e8		inx				inx
.d82e	b82e	bd 26 05	lda $0526,x			lda 	lineBuffer,x
.d831	b831	f0 62		beq $b895			beq 	_TKExit
.d833	b833	c9 20		cmp #$20			cmp 	#' '
.d835	b835	90 f6		bcc $b82d			bcc 	_TKFindFirst
.d837	b837	c9 30		cmp #$30			cmp 	#'0'
.d839	b839	90 07		bcc $b842			bcc 	_TKNoLineNumber
.d83b	b83b	c9 3a		cmp #$3a			cmp 	#'9'+1
.d83d	b83d	b0 03		bcs $b842			bcs 	_TKNoLineNumber
.d83f	b83f	20 14 ba	jsr $ba14			jsr 	TOKExtractLineNumber
.d842	b842					_TKNoLineNumber:
.d842	b842					_TKTokeniseLoop:
.d842	b842	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.d845	b845	f0 4e		beq $b895			beq 	_TKExit
.d847	b847	e8		inx				inx
.d848	b848	c9 20		cmp #$20			cmp 	#' '
.d84a	b84a	f0 f6		beq $b842			beq 	_TKTokeniseLoop 			; keep looping if space found.
.d84c	b84c	ca		dex				dex 								; undo last get, A contains character, X is position.
.d84d	b84d	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.d84f	b84f	f0 68		beq $b8b9			beq 	_TKTokeniseIdentifier 		; (already case converted outside string constants)
.d851	b851	c9 41		cmp #$41			cmp 	#'A'
.d853	b853	90 04		bcc $b859			bcc 	_TKTokenisePunctuation
.d855	b855	c9 5b		cmp #$5b			cmp 	#'Z'+1
.d857	b857	90 60		bcc $b8b9			bcc 	_TKTokeniseIdentifier
.d859	b859					_TKTokenisePunctuation:
.d859	b859	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.d85b	b85b	f0 2e		beq $b88b			beq 	_TKString
.d85d	b85d	c9 24		cmp #$24			cmp 	#'$'						; hexadecimal constant ($ only appears at end of identifiers)
.d85f	b85f	f0 2f		beq $b890			beq 	_TKHexConstant
.d861	b861	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers - these are for <> <= >= >> <<
.d863	b863	f0 36		beq $b89b			beq 	_TKCheckDouble
.d865	b865	c9 3e		cmp #$3e			cmp 	#'>'
.d867	b867	f0 32		beq $b89b			beq 	_TKCheckDouble
.d869	b869					_TKStandardPunctuation:
.d869	b869	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; get the punctuation token back.
.d86c	b86c	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.d86e	b86e	90 0e		bcc $b87e			bcc 	_TKNoShift
.d870	b870	48		pha				pha 								; save. we are about to convert this punctuation token from
.d871	b871	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.d873	b873	85 36		sta $36				sta 	zTemp0
.d875	b875	68		pla				pla
.d876	b876	29 20		and #$20			and 	#32 						; bit 5
.d878	b878	4a		lsr a				lsr 	a 							; shift into bit 3
.d879	b879	4a		lsr a				lsr 	a
.d87a	b87a	05 36		ora $36				ora 	zTemp0
.d87c	b87c	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.d87e	b87e					_TKNoShift:
.d87e	b87e	20 59 ba	jsr $ba59			jsr 	TOKWriteByte 				; write the punctuation character
.d881	b881	e8		inx				inx 								; consume the character
.d882	b882	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; quote found ?
.d884	b884	d0 bc		bne $b842			bne 	_TKTokeniseLoop 			; and loop round again.
.d886	b886	20 4c b9	jsr $b94c			jsr 	TOKCheckComment 			; comment checl
.d889	b889	80 b7		bra $b842			bra 	_TKTokeniseLoop
.d88b	b88b					_TKString:
.d88b	b88b	20 79 b9	jsr $b979			jsr 	TOKTokenString
.d88e	b88e	80 b2		bra $b842			bra 	_TKTokeniseLoop
.d890	b890					_TKHexConstant:
.d890	b890	20 b4 b9	jsr $b9b4			jsr 	TOKHexConstant
.d893	b893	80 ad		bra $b842			bra 	_TKTokeniseLoop
.d895	b895	a9 80		lda #$80	_TKExit:lda 	#KWC_EOL 					; write end of line byte
.d897	b897	20 59 ba	jsr $ba59			jsr 	TOKWriteByte
.d89a	b89a	60		rts				rts
.d89b	b89b					_TKCheckDouble:
.d89b	b89b	bd 27 05	lda $0527,x			lda 	lineBuffer+1,x 				; get next character
.d89e	b89e	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.d8a0	b8a0	90 c7		bcc $b869			bcc 	_TKStandardPunctuation 		; and do the normal punctuation handler.
.d8a2	b8a2	c9 3f		cmp #$3f			cmp 	#'>'+1
.d8a4	b8a4	b0 c3		bcs $b869			bcs 	_TKStandardPunctuation
.d8a6	b8a6	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.d8a9	b8a9	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.d8ab	b8ab	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.d8ac	b8ac	7d 27 05	adc $0527,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.d8af	b8af	38		sec				sec
.d8b0	b8b0	e9 3c		sbc #$3c			sbc 	#'<'
.d8b2	b8b2	20 59 ba	jsr $ba59			jsr 	TOKWriteByte 				; this is in the range 0-7
.d8b5	b8b5	e8		inx				inx 								; consume both
.d8b6	b8b6	e8		inx				inx
.d8b7	b8b7	80 89		bra $b842			bra 	_TKTokeniseLoop
.d8b9	b8b9					_TKTokeniseIdentifier:
.d8b9	b8b9	8e 00 04	stx $0400			stx 	identStart 					; save start
.d8bc	b8bc	9c 04 04	stz $0404			stz 	identTypeByte 				; zero the type byte
.d8bf	b8bf					_TKCheckLoop:
.d8bf	b8bf	e8		inx				inx 								; look at next, we know first is identifier already.
.d8c0	b8c0	bd 26 05	lda $0526,x			lda  	lineBuffer,x
.d8c3	b8c3	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.d8c5	b8c5	f0 f8		beq $b8bf			beq 	_TKCheckLoop
.d8c7	b8c7	c9 30		cmp #$30			cmp	 	#"0"
.d8c9	b8c9	90 0c		bcc $b8d7			bcc 	_TKEndIdentifier
.d8cb	b8cb	c9 3a		cmp #$3a			cmp 	#"9"+1
.d8cd	b8cd	90 f0		bcc $b8bf			bcc 	_TKCheckLoop
.d8cf	b8cf	c9 41		cmp #$41			cmp	 	#"A"
.d8d1	b8d1	90 04		bcc $b8d7			bcc 	_TKEndIdentifier
.d8d3	b8d3	c9 5b		cmp #$5b			cmp 	#"Z"+1
.d8d5	b8d5	90 e8		bcc $b8bf			bcc 	_TKCheckLoop
.d8d7	b8d7					_TKEndIdentifier:
.d8d7	b8d7	8e 01 04	stx $0401			stx 	identTypeStart 				; save start of type text (if any !)
.d8da	b8da	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.d8dc	b8dc	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.d8de	b8de	f0 06		beq $b8e6			beq 	_TKHasTypeCharacter
.d8e0	b8e0	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.d8e2	b8e2	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.d8e4	b8e4	d0 07		bne $b8ed			bne 	_TKNoTypeCharacter
.d8e6	b8e6					_TKHasTypeCharacter:
.d8e6	b8e6	8c 04 04	sty $0404			sty 	identTypeByte 				; has # or $, save the type
.d8e9	b8e9	e8		inx				inx 								; consume the type character
.d8ea	b8ea	bd 26 05	lda $0526,x			lda 	lineBuffer,x
.d8ed	b8ed					_TKNoTypeCharacter:
.d8ed	b8ed	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.d8ef	b8ef	d0 09		bne $b8fa			bne 	_TKNoArray
.d8f1	b8f1	e8		inx				inx 								; skip the (
.d8f2	b8f2	ad 04 04	lda $0404			lda 	identTypeByte 				; set bit 2 (e.g. array) in type byte
.d8f5	b8f5	09 04		ora #$04			ora 	#$04
.d8f7	b8f7	8d 04 04	sta $0404			sta 	identTypeByte
.d8fa	b8fa					_TKNoArray:
.d8fa	b8fa	8e 02 04	stx $0402			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.d8fd	b8fd	20 d5 b9	jsr $b9d5			jsr 	TOKCalculateHash 			; calculate the has for those tokens
.d900	b900	a0 b0		ldy #$b0			ldy 	#(KeywordSet0) >> 8
.d902	b902	a9 d0		lda #$d0			lda 	#(KeywordSet0) & $FF
.d904	b904	20 c4 b7	jsr $b7c4			jsr 	TOKSearchTable
.d907	b907	a2 00		ldx #$00			ldx 	#0
.d909	b909	b0 1f		bcs $b92a			bcs 	_TKFoundToken
.d90b	b90b	a0 b3		ldy #$b3			ldy 	#(KeywordSet1) >> 8
.d90d	b90d	a9 41		lda #$41			lda 	#(KeywordSet1) & $FF
.d90f	b90f	20 c4 b7	jsr $b7c4			jsr 	TOKSearchTable
.d912	b912	a2 81		ldx #$81			ldx 	#$81
.d914	b914	b0 14		bcs $b92a			bcs 	_TKFoundToken
.d916	b916	a0 b4		ldy #$b4			ldy 	#(KeywordSet2) >> 8
.d918	b918	a9 3d		lda #$3d			lda 	#(KeywordSet2) & $FF
.d91a	b91a	20 c4 b7	jsr $b7c4			jsr 	TOKSearchTable
.d91d	b91d	a2 82		ldx #$82			ldx 	#$82
.d91f	b91f	b0 09		bcs $b92a			bcs 	_TKFoundToken
.d921	b921	20 65 ba	jsr $ba65			jsr 	TOKCheckCreateVariableRecord ; failed all, it's a variable, create record if does not exist.
.d924	b924	ae 02 04	ldx $0402			ldx 	identTypeEnd 				; X points to following byte
.d927	b927	4c 42 b8	jmp $b842			jmp 	_TKTokeniseLoop 			; and go round again.
.d92a	b92a					_TKFoundToken:
.d92a	b92a	48		pha				pha 								; save token
.d92b	b92b	8a		txa				txa 								; shift in X, is there one ?
.d92c	b92c	f0 03		beq $b931			beq 	_TKNoTShift
.d92e	b92e	20 59 ba	jsr $ba59			jsr 	TOKWriteByte 				; if so, write it out
.d931	b931					_TKNoTShift:
.d931	b931	68		pla				pla 								; restore and write token
.d932	b932	20 59 ba	jsr $ba59			jsr 	TOKWriteByte
.d935	b935	e0 00		cpx #$00			cpx 	#0 							; check for REM and '
.d937	b937	d0 0d		bne $b946			bne 	_TKNotRem 			 		; not shifted ?
.d939	b939	c9 d6		cmp #$d6			cmp 	#KWD_REM
.d93b	b93b	d0 09		bne $b946			bne 	_TKNotRem
.d93d	b93d	ae 02 04	ldx $0402			ldx 	identTypeEnd 				; check if comment follows.
.d940	b940	20 4c b9	jsr $b94c			jsr 	TOKCheckComment
.d943	b943	4c 42 b8	jmp $b842			jmp 	_TKTokeniseLoop
.d946	b946					_TKNotRem:
.d946	b946	ae 02 04	ldx $0402			ldx 	identTypeEnd 				; X points to following byte
.d949	b949	4c 42 b8	jmp $b842			jmp 	_TKTokeniseLoop 			; and go round again.
.d94c	b94c					TOKCheckComment:
.d94c	b94c	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; skip over space
.d94f	b94f	e8		inx				inx
.d950	b950	c9 20		cmp #$20			cmp 	#' '
.d952	b952	f0 f8		beq $b94c			beq 	TOKCheckComment
.d954	b954	ca		dex				dex 								; first non space character
.d955	b955	c9 22		cmp #$22			cmp 	#'"'						; quote mark
.d957	b957	f0 1f		beq $b978			beq 	_TOKCCExit 					; then we are okay
.d959	b959	c9 00		cmp #$00			cmp 	#0 							; EOL
.d95b	b95b	f0 1b		beq $b978			beq 	_TOKCCExit 					; then we are okay
.d95d	b95d	da		phx				phx
.d95e	b95e					_TOKCCLowerCase:
.d95e	b95e	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; about making it lower case it all, but I thought
.d961	b961	c9 41		cmp #$41			cmp 	#"A"		 				; that was a bit risky. So it's converted to L/C here.
.d963	b963	90 09		bcc $b96e			bcc 	_TOKKCNotUC
.d965	b965	c9 5b		cmp #$5b			cmp 	#"Z"+1
.d967	b967	b0 05		bcs $b96e			bcs 	_TOKKCNotUC
.d969	b969	49 20		eor #$20			eor 	#$20
.d96b	b96b	9d 26 05	sta $0526,x			sta 	lineBuffer,x
.d96e	b96e					_TOKKCNotUC:
.d96e	b96e	e8		inx				inx
.d96f	b96f	c9 00		cmp #$00			cmp 	#0
.d971	b971	d0 eb		bne $b95e			bne 	_TOKCCLowerCase
.d973	b973	fa		plx				plx
.d974	b974	ca		dex				dex 								; tokenise string expects initial skip.
.d975	b975	20 79 b9	jsr $b979			jsr 	TOKTokenString 				; tokenise rest of line as a string.
.d978	b978					_TOKCCExit:
.d978	b978	60		rts				rts
.d979	b979					TOKTokenString:
.d979	b979	a9 ff		lda #$ff			lda 	#KWC_STRING 				; string token.
.d97b	b97b	20 59 ba	jsr $ba59			jsr 	TOKWriteByte
.d97e	b97e	e8		inx				inx									; start of quoted string.
.d97f	b97f	da		phx				phx 								; push start of string on top
.d980	b980	ca		dex				dex 								; because we pre-increment
.d981	b981					_TSFindEnd:
.d981	b981	e8		inx				inx
.d982	b982	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; next character
.d985	b985	f0 04		beq $b98b			beq 	_TSEndOfString 				; no matching quote, we don't mind.
.d987	b987	c9 22		cmp #$22			cmp 	#'"' 						; go back if quote not found
.d989	b989	d0 f6		bne $b981			bne 	_TSFindEnd
.d98b	b98b					_TSEndOfString:
.d98b	b98b	7a		ply				ply  								; so now Y is first character, X is character after end.
.d98c	b98c	48		pha				pha 								; save terminating character
.d98d	b98d	20 95 b9	jsr $b995			jsr 	TOKWriteBlockXY 			; write X to Y as a data block
.d990	b990	68		pla				pla 								; terminating character
.d991	b991	f0 01		beq $b994			beq 	_TSNotQuote					; if it wasn't EOS skip it
.d993	b993	e8		inx				inx
.d994	b994					_TSNotQuote:
.d994	b994	60		rts				rts
.d995	b995					TOKWriteBlockXY:
.d995	b995	86 36		stx $36				stx 	zTemp0 						; save end character
.d997	b997	98		tya				tya 								; use 2's complement to work out the byte size
.d998	b998	49 ff		eor #$ff			eor 	#$FF
.d99a	b99a	38		sec				sec
.d99b	b99b	65 36		adc $36				adc 	zTemp0
.d99d	b99d	1a		inc a				inc 	a 							; one extra for NULL
.d99e	b99e	20 59 ba	jsr $ba59			jsr 	TOKWriteByte
.d9a1	b9a1					_TOBlockLoop:
.d9a1	b9a1	c4 36		cpy $36				cpy 	zTemp0 						; exit if reached the end
.d9a3	b9a3	f0 09		beq $b9ae			beq 	_TOBlockExit
.d9a5	b9a5	b9 26 05	lda $0526,y			lda 	lineBuffer,y 				; write byte out.
.d9a8	b9a8	20 59 ba	jsr $ba59			jsr 	TOKWriteByte
.d9ab	b9ab	c8		iny				iny
.d9ac	b9ac	80 f3		bra $b9a1			bra 	_TOBlockLoop
.d9ae	b9ae					_TOBlockExit:
.d9ae	b9ae	a9 00		lda #$00			lda 	#0 							; add NULL.
.d9b0	b9b0	20 59 ba	jsr $ba59			jsr 	TOKWriteByte
.d9b3	b9b3	60		rts				rts
.d9b4	b9b4					TOKHexConstant:
.d9b4	b9b4	a9 fe		lda #$fe			lda 	#KWC_HEXCONST 				; hex constant token.
.d9b6	b9b6	20 59 ba	jsr $ba59			jsr 	TOKWriteByte
.d9b9	b9b9	e8		inx				inx									; start of quoted string.
.d9ba	b9ba	da		phx				phx 								; push start of constant on top
.d9bb	b9bb	ca		dex				dex
.d9bc	b9bc					_THFindLoop:
.d9bc	b9bc	e8		inx				inx 	 							; this is stored in a block, so find out how long
.d9bd	b9bd	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; the hex constant is.
.d9c0	b9c0	c9 30		cmp #$30			cmp 	#"0"
.d9c2	b9c2	90 0c		bcc $b9d0			bcc 	_THFoundEnd
.d9c4	b9c4	c9 3a		cmp #$3a			cmp 	#"9"+1
.d9c6	b9c6	90 f4		bcc $b9bc			bcc 	_THFindLoop
.d9c8	b9c8	c9 41		cmp #$41			cmp 	#"A"
.d9ca	b9ca	90 04		bcc $b9d0			bcc 	_THFoundEnd
.d9cc	b9cc	c9 47		cmp #$47			cmp 	#"F"+1
.d9ce	b9ce	90 ec		bcc $b9bc			bcc 	_THFindLoop
.d9d0	b9d0					_THFoundEnd:
.d9d0	b9d0	7a		ply				ply 								; restore start
.d9d1	b9d1	20 95 b9	jsr $b995			jsr 	TOKWriteBlockXY 			; output the block
.d9d4	b9d4	60		rts				rts
.d9d5	b9d5					TOKCalculateHash:
.d9d5	b9d5	da		phx				phx
.d9d6	b9d6	ae 00 04	ldx $0400			ldx 	identStart 					; needs to be same as in tokens.py - simple sum at present.
.d9d9	b9d9	a9 00		lda #$00			lda 	#0
.d9db	b9db					_TCHLoop:
.d9db	b9db	18		clc				clc
.d9dc	b9dc	7d 26 05	adc $0526,x			adc 	lineBuffer,x
.d9df	b9df	e8		inx				inx
.d9e0	b9e0	ec 02 04	cpx $0402			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.d9e3	b9e3	d0 f6		bne $b9db			bne 	_TCHLoop
.d9e5	b9e5	8d 03 04	sta $0403			sta 	identHash 					; save the hash
.d9e8	b9e8	fa		plx				plx
.d9e9	b9e9	60		rts				rts
.d9ea	b9ea					LCLFixLineBufferCase:
.d9ea	b9ea	a2 00		ldx #$00			ldx 	#0
.d9ec	b9ec					_FLBCLoop:
.d9ec	b9ec	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; get next character
.d9ef	b9ef	f0 22		beq $ba13			beq 	_FLBCExit 					; end of string.
.d9f1	b9f1	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.d9f3	b9f3	f0 11		beq $ba06			beq 	_FLBCInQuotes
.d9f5	b9f5	e8		inx				inx
.d9f6	b9f6	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.d9f8	b9f8	90 f2		bcc $b9ec			bcc 	_FLBCLoop
.d9fa	b9fa	c9 7b		cmp #$7b			cmp 	#'z'+1
.d9fc	b9fc	b0 ee		bcs $b9ec			bcs 	_FLBCLoop
.d9fe	b9fe	38		sec				sec 								; make U/C
.d9ff	b9ff	e9 20		sbc #$20			sbc 	#32
.da01	ba01	9d 25 05	sta $0525,x			sta	 	lineBuffer-1,x 				; write back
.da04	ba04	80 e6		bra $b9ec			bra 	_FLBCLoop
.da06	ba06					_FLBCInQuotes:
.da06	ba06	e8		inx				inx 								; advance
.da07	ba07	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; get next
.da0a	ba0a	f0 07		beq $ba13			beq 	_FLBCExit 					; exit on EOS
.da0c	ba0c	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.da0e	ba0e	d0 f6		bne $ba06			bne 	_FLBCInQuotes
.da10	ba10	e8		inx				inx 								; skip over it
.da11	ba11	80 d9		bra $b9ec			bra 	_FLBCLoop
.da13	ba13					_FLBCExit:
.da13	ba13	60		rts				rts
.da14	ba14					TOKExtractLineNumber:
.da14	ba14	ad 28 04	lda $0428			lda 	tokenLineNumber+1 			; push current value on stack
.da17	ba17	48		pha				pha
.da18	ba18	ad 27 04	lda $0427			lda 	tokenLineNumber
.da1b	ba1b	48		pha				pha
.da1c	ba1c	20 52 ba	jsr $ba52			jsr 	_LCLNTimes2 				; line # x 2
.da1f	ba1f	20 52 ba	jsr $ba52			jsr 	_LCLNTimes2 				; line # x 4
.da22	ba22	18		clc				clc 								; add stacked value
.da23	ba23	68		pla				pla
.da24	ba24	6d 27 04	adc $0427			adc 	tokenLineNumber
.da27	ba27	8d 27 04	sta $0427			sta 	tokenLineNumber
.da2a	ba2a	68		pla				pla
.da2b	ba2b	6d 28 04	adc $0428			adc 	tokenLineNumber+1
.da2e	ba2e	8d 28 04	sta $0428			sta 	tokenLineNumber+1 			; line # x 5
.da31	ba31	20 52 ba	jsr $ba52			jsr 	_LCLNTimes2 				; line # x 10
.da34	ba34	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; get and consume character
.da37	ba37	e8		inx				inx
.da38	ba38	29 0f		and #$0f			and 	#15 						; add to line #
.da3a	ba3a	18		clc				clc
.da3b	ba3b	6d 27 04	adc $0427			adc 	tokenLineNumber
.da3e	ba3e	8d 27 04	sta $0427			sta 	tokenLineNumber
.da41	ba41	90 03		bcc $ba46			bcc 	_TLENNoCarry
.da43	ba43	ee 28 04	inc $0428			inc 	tokenLineNumber+1
.da46	ba46					_TLENNoCarry:
.da46	ba46	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; more digits ?
.da49	ba49	c9 30		cmp #$30			cmp 	#'0'
.da4b	ba4b	90 04		bcc $ba51			bcc 	_TLENExit
.da4d	ba4d	c9 3a		cmp #$3a			cmp 	#'9'+1
.da4f	ba4f	90 c3		bcc $ba14			bcc 	TOKExtractLineNumber
.da51	ba51					_TLENExit:
.da51	ba51	60		rts				rts
.da52	ba52					_LCLNTimes2:
.da52	ba52	0e 27 04	asl $0427			asl 	tokenLineNumber 			; doubles tokenLineNumber.
.da55	ba55	2e 28 04	rol $0428			rol 	tokenLineNumber+1
.da58	ba58	60		rts				rts
.da59	ba59					TOKWriteByte:
.da59	ba59	da		phx				phx
.da5a	ba5a	ae 26 04	ldx $0426			ldx 	tokenOffset 				; next slot to write to
.da5d	ba5d	9d 26 04	sta $0426,x			sta 	tokenOffset,x 				; write byte out
.da60	ba60	ee 26 04	inc $0426			inc 	tokenOffset 				; advance slot.
.da63	ba63	fa		plx				plx
.da64	ba64	60		rts				rts
.da65	ba65					TOKCheckCreateVariableRecord:
.da65	ba65	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.da67	ba67	85 36		sta $36				sta 	0+zTemp0
.da69	ba69	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.da6b	ba6b	85 37		sta $37				sta 	1+zTemp0
.da6d	ba6d					_CCVSearch:
.da6d	ba6d	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.da6f	ba6f	f0 2c		beq $ba9d			beq 	_CCVFail
.da71	ba71	a0 01		ldy #$01			ldy 	#1 							; read the hash
.da73	ba73	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.da75	ba75	cd 03 04	cmp $0403			cmp 	identHash 	  				; if not, try the next.
.da78	ba78	d0 16		bne $ba90			bne 	_CCVNext
.da7a	ba7a	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.da7c	ba7c	ae 00 04	ldx $0400			ldx 	identStart
.da7f	ba7f					_CCVCompare:
.da7f	ba7f	bd 26 05	lda $0526,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.da82	ba82	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.da84	ba84	e8		inx				inx 								; advance pointers
.da85	ba85	c8		iny				iny
.da86	ba86	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.da87	ba87	d0 07		bne $ba90			bne 	_CCVNext  					; didn't match go to next.
.da89	ba89	90 f4		bcc $ba7f			bcc 	_CCVCompare 				; not finished yet.
.da8b	ba8b	ec 02 04	cpx $0402			cpx 	identTypeEnd 				; matched whole thing ?
.da8e	ba8e	f0 41		beq $bad1			beq 	_CCVFound 					; yes, we were successful
.da90	ba90					_CCVNext:
.da90	ba90	18		clc				clc 								; go to next record.
.da91	ba91	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.da93	ba93	65 36		adc $36				adc 	zTemp0
.da95	ba95	85 36		sta $36				sta 	zTemp0
.da97	ba97	90 d4		bcc $ba6d			bcc 	_CCVSearch
.da99	ba99	e6 37		inc $37				inc 	zTemp0+1
.da9b	ba9b	80 d0		bra $ba6d			bra 	_CCVSearch
.da9d	ba9d					_CCVFail:
.da9d	ba9d	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.da9f	ba9f	ad 03 04	lda $0403			lda 	identHash
.daa2	baa2	91 36		sta ($36),y			sta 	(zTemp0),y
.daa4	baa4	c8		iny				iny 								; offset 2 is the type byte
.daa5	baa5	ad 04 04	lda $0404			lda 	identTypeByte
.daa8	baa8	91 36		sta ($36),y			sta 	(zTemp0),y
.daaa	baaa	c8		iny				iny
.daab	baab					_CCVData:
.daab	baab	a9 00		lda #$00			lda 	#0 							; erase data 3-7 (the 5 value bytes)
.daad	baad	91 36		sta ($36),y			sta 	(zTemp0),y
.daaf	baaf	c8		iny				iny
.dab0	bab0	c0 08		cpy #$08			cpy 	#8
.dab2	bab2	90 f7		bcc $baab			bcc 	_CCVData
.dab4	bab4	ae 00 04	ldx $0400			ldx 	identStart 					; copy name into 8 on.
.dab7	bab7					_CCVCopyName:
.dab7	bab7	bd 26 05	lda $0526,x			lda 	lineBuffer,x
.daba	baba	91 36		sta ($36),y			sta 	(zTemp0),y
.dabc	babc	e8		inx				inx
.dabd	babd	c8		iny				iny
.dabe	babe	ec 02 04	cpx $0402			cpx 	identTypeEnd
.dac1	bac1	d0 f4		bne $bab7			bne 	_CCVCopyName
.dac3	bac3	98		tya				tya 								; patch offset
.dac4	bac4	92 36		sta ($36)			sta 	(zTemp0)
.dac6	bac6	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.dac8	bac8	91 36		sta ($36),y			sta 	(zTemp0),y
.daca	baca	88		dey				dey
.dacb	bacb	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.dacd	bacd	09 80		ora #$80			ora 	#$80
.dacf	bacf	91 36		sta ($36),y			sta 	(zTemp0),y
.dad1	bad1					_CCVFound:
.dad1	bad1	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.dad3	bad3	38		sec				sec
.dad4	bad4	e9 10		sbc #$10			sbc 	#(VariableSpace >> 8) 		; offset from the start of the variable token
.dad6	bad6	09 40		ora #$40			ora 	#$40 						; make it a writeable token $4000-$7FFF
.dad8	bad8	20 59 ba	jsr $ba59			jsr 	TOKWriteByte
.dadb	badb	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.dadd	badd	20 59 ba	jsr $ba59			jsr 	TOKWriteByte
.dae0	bae0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_sound.module

=1						soundIntegrated=1
.dae1	bae1					SNDCheckChannel:
.dae1	bae1	aa		tax				tax
.dae2	bae2	bd 71 09	lda $0971,x			lda 	SNDTimeLeft,x 				; currently playing a note
.dae5	bae5	d0 38		bne $bb1f			bne 	_SNDCCExit
.dae7	bae7	da		phx				phx 								; save current channel
.dae8	bae8	8a		txa				txa 								; put in A
.dae9	bae9	20 65 bb	jsr $bb65			jsr 	SNDFindNextNoteForA 		; is there a note for A in the queue ?
.daec	baec	68		pla				pla 								; channel # in A
.daed	baed	90 30		bcc $bb1f			bcc 	_SNDCCExit  				; nothing in the queue for this channel, exit.
.daef	baef	a8		tay				tay 								; Y is the channel #
.daf0	baf0	bd 66 08	lda $0866,x			lda 	SNDQueue+1,x 				; copy data into the slot.
.daf3	baf3	99 65 09	sta $0965,y			sta 	SNDPitchLow,y
.daf6	baf6	bd 67 08	lda $0867,x			lda 	SNDQueue+2,x
.daf9	baf9	99 69 09	sta $0969,y			sta 	SNDPitchHigh,y
.dafc	bafc	bd 68 08	lda $0868,x			lda 	SNDQueue+3,x
.daff	baff	99 6d 09	sta $096d,y			sta 	SNDVolume,y
.db02	bb02	bd 69 08	lda $0869,x			lda 	SNDQueue+4,x
.db05	bb05	99 71 09	sta $0971,y			sta 	SNDTimeLeft,y
.db08	bb08	bd 6a 08	lda $086a,x			lda 	SNDQueue+5,x
.db0b	bb0b	99 75 09	sta $0975,y			sta 	SNDAdjustLow,y
.db0e	bb0e	bd 6b 08	lda $086b,x			lda 	SNDQueue+6,x
.db11	bb11	99 79 09	sta $0979,y			sta 	SNDAdjustHigh,y
.db14	bb14	5a		phy				phy 								; save channel #
.db15	bb15	20 7f bb	jsr $bb7f			jsr 	SNDDeleteXFromQueue 		; delete record at X from queue
.db18	bb18	ce 64 08	dec $0864			dec 	SNDLength 					; reduce the queue length.
.db1b	bb1b	68		pla				pla
.db1c	bb1c	20 20 bb	jsr $bb20			jsr 	SNDUpdateNote 				; update channel A
.db1f	bb1f					_SNDCCExit:
.db1f	bb1f	60		rts				rts
.db20	bb20					SNDUpdateNote:
.db20	bb20	aa		tax				tax 								; so we can access records
.db21	bb21	0a		asl a				asl 	a 							; convert it to a channel bit pair in 5,6
.db22	bb22	0a		asl a				asl 	a
.db23	bb23	0a		asl a				asl 	a
.db24	bb24	0a		asl a				asl 	a
.db25	bb25	0a		asl a				asl 	a
.db26	bb26	8d 63 08	sta $0863			sta 	SNDChannelBits
.db29	bb29	bd 71 09	lda $0971,x			lda 	SNDTimeLeft,x 				; are we silent
.db2c	bb2c	f0 2e		beq $bb5c			beq 	_SNDUNIsSilent
.db2e	bb2e	ad 63 08	lda $0863			lda 	SNDChannelBits 				; push channel bits on stack
.db31	bb31	48		pha				pha
.db32	bb32	bd 65 09	lda $0965,x			lda 	SNDPitchLow,x 				; get 4 lowest bits of pitch.
.db35	bb35	29 0f		and #$0f			and 	#$0F
.db37	bb37	0d 63 08	ora $0863			ora 	SNDChannelBits 				; set channel bits
.db3a	bb3a	09 80		ora #$80			ora 	#$80 						; write to pitch register
.db3c	bb3c	20 c9 bb	jsr $bbc9			jsr 	SNDWritePorts
.db3f	bb3f	bd 69 09	lda $0969,x			lda 	SNDPitchHigh,x 				; pitch high => channel temp.
.db42	bb42	8d 63 08	sta $0863			sta 	SNDChannelBits
.db45	bb45	bd 65 09	lda $0965,x			lda 	SNDPitchLow,x
.db48	bb48	4e 63 08	lsr $0863			lsr 	SNDChannelBits 				; shift 2 LSBs into MSB of A
.db4b	bb4b	6a		ror a				ror 	a
.db4c	bb4c	4e 63 08	lsr $0863			lsr 	SNDChannelBits
.db4f	bb4f	6a		ror a				ror 	a
.db50	bb50	4a		lsr a				lsr 	a 							; put in bits 0-5
.db51	bb51	4a		lsr a				lsr 	a
.db52	bb52	20 c9 bb	jsr $bbc9			jsr 	SNDWritePorts 				; write as rest of pitch register
.db55	bb55	68		pla				pla
.db56	bb56	09 90		ora #$90			ora 	#$90 						; set to write minimum attentuation.
.db58	bb58	20 c9 bb	jsr $bbc9			jsr 	SNDWritePorts
.db5b	bb5b	60		rts				rts
.db5c	bb5c					_SNDUNIsSilent:
.db5c	bb5c	ad 63 08	lda $0863			lda 	SNDChannelBits 				; channel bits
.db5f	bb5f	09 9f		ora #$9f			ora 	#$9F 						; maximum attenuation
.db61	bb61	20 c9 bb	jsr $bbc9			jsr 	SNDWritePorts 				; write to the ports
.db64	bb64	60		rts				rts
.db65	bb65					SNDFindNextNoteForA:
.db65	bb65	ac 64 08	ldy $0864			ldy 	SNDLength 					; queue size into Y
.db68	bb68	f0 13		beq $bb7d			beq 	_SNDFNNFail 				; queue empty.
.db6a	bb6a	a2 00		ldx #$00			ldx 	#0
.db6c	bb6c					_SNDFNNSearch:
.db6c	bb6c	dd 65 08	cmp $0865,x			cmp 	SNDQueue,x 					; does it match the channel
.db6f	bb6f	38		sec				sec
.db70	bb70	f0 0c		beq $bb7e			beq 	_SNDFNNExit 				; if so exit with CS.
.db72	bb72	e8		inx				inx 								; next queue slot.
.db73	bb73	e8		inx				inx
.db74	bb74	e8		inx				inx
.db75	bb75	e8		inx				inx
.db76	bb76	e8		inx				inx
.db77	bb77	e8		inx				inx
.db78	bb78	e8		inx				inx
.db79	bb79	e8		inx				inx
.db7a	bb7a	88		dey				dey 								; done the whole queue
.db7b	bb7b	d0 ef		bne $bb6c			bne 	_SNDFNNSearch 				; no, go back.
.db7d	bb7d					_SNDFNNFail:
.db7d	bb7d	18		clc				clc
.db7e	bb7e					_SNDFNNExit:
.db7e	bb7e	60		rts				rts
.db7f	bb7f					SNDDeleteXFromQueue:
.db7f	bb7f	e0 f8		cpx #$f8			cpx 	#SNDQueueSize*8-8 			; reached the end.
.db81	bb81	f0 09		beq $bb8c			beq 	_SNDDXExit
.db83	bb83	bd 6d 08	lda $086d,x			lda 	SNDQueue+8,x
.db86	bb86	9d 65 08	sta $0865,x			sta 	SNDQueue,x
.db89	bb89	e8		inx				inx
.db8a	bb8a	80 f3		bra $bb7f			bra 	SNDDeleteXFromQueue
.db8c	bb8c					_SNDDXExit:
.db8c	bb8c	60		rts				rts
.0863						SNDChannelBits:
>0863								.fill 	1
.db8d	bb8d					SNDQueueRequest:
.db8d	bb8d	86 36		stx $36				stx 	zTemp0						; save queue address
.db8f	bb8f	84 37		sty $37				sty 	zTemp0+1
.db91	bb91	ae 64 08	ldx $0864			ldx 	SNDLength 					; queue is full, can't take any more.
.db94	bb94	e0 20		cpx #$20			cpx 	#SNDQueueSize
.db96	bb96	f0 21		beq $bbb9			beq 	_SNDQRExit
.db98	bb98	29 03		and #$03			and 	#3	 						; channel # and push on stack
.db9a	bb9a	48		pha				pha
.db9b	bb9b	8a		txa				txa  								; get offset in queue buffer/
.db9c	bb9c	0a		asl a				asl 	a
.db9d	bb9d	0a		asl a				asl 	a
.db9e	bb9e	0a		asl a				asl 	a
.db9f	bb9f	aa		tax				tax
.dba0	bba0	68		pla				pla 								; get back and push again
.dba1	bba1	48		pha				pha
.dba2	bba2	9d 65 08	sta $0865,x			sta 	SNDQueue+0,x 				; save the channel #
.dba5	bba5	a0 00		ldy #$00			ldy 	#0 							; copy the rest in.
.dba7	bba7					_SNDQCopy:
.dba7	bba7	b1 36		lda ($36),y			lda 	(zTemp0),y
.dba9	bba9	e8		inx				inx
.dbaa	bbaa	c8		iny				iny
.dbab	bbab	9d 65 08	sta $0865,x			sta 	SNDQueue,x
.dbae	bbae	c0 06		cpy #$06			cpy 	#6
.dbb0	bbb0	d0 f5		bne $bba7			bne 	_SNDQCopy
.dbb2	bbb2	ee 64 08	inc $0864			inc 	SNDLength 					; bump queue length.
.dbb5	bbb5	68		pla				pla 								; get channel # back
.dbb6	bbb6	20 e1 ba	jsr $bae1			jsr 	SNDCheckChannel 			; check if channel needs refreshing.
.dbb9	bbb9					_SNDQRExit:
.dbb9	bbb9	60		rts				rts
.dbba	bbba					SNDSilenceChannel:
.dbba	bbba	aa		tax				tax 								; zero time left.
.dbbb	bbbb	9e 71 09	stz $0971,x			stz 	SNDTimeLeft,x
.dbbe	bbbe	0a		asl a				asl 	a 							; shift into position
.dbbf	bbbf	0a		asl a				asl 	a
.dbc0	bbc0	0a		asl a				asl 	a
.dbc1	bbc1	0a		asl a				asl 	a
.dbc2	bbc2	0a		asl a				asl 	a
.dbc3	bbc3	09 9f		ora #$9f			ora 	#$9F 						; write register attenuation $F
.dbc5	bbc5	20 c9 bb	jsr $bbc9			jsr 	SNDWritePorts
.dbc8	bbc8	60		rts				rts
.dbc9	bbc9					SNDWritePorts:
.dbc9	bbc9	da		phx				phx 								; save X
.dbca	bbca	a6 01		ldx $01				ldx 	1 							; save I/O status
.dbcc	bbcc	64 01		stz $01				stz 	1 							; access I/O page 0
.dbce	bbce	8d 00 d6	sta $d600			sta 	$D600 						; write to both
.dbd1	bbd1	8d 10 d6	sta $d610			sta 	$D610
.dbd4	bbd4	86 01		stx $01				stx 	1 							; restore I/O
.dbd6	bbd6	fa		plx				plx 								; restore X
.dbd7	bbd7	60		rts				rts
.dbd8	bbd8					Export_SNDCommand:
.dbd8	bbd8	da		phx				phx 								; save XY
.dbd9	bbd9	5a		phy				phy
.dbda	bbda	c9 0f		cmp #$0f			cmp 	#$0F 						; $0F is initialise
.dbdc	bbdc	f0 1d		beq $bbfb			beq 	_SNDInitialise
.dbde	bbde	90 28		bcc $bc08			bcc 	_SNDExit
.dbe0	bbe0	c9 3f		cmp #$3f			cmp 	#$3F 						; $3F is silence all
.dbe2	bbe2	f0 17		beq $bbfb			beq 	_SNDSilence
.dbe4	bbe4	b0 22		bcs $bc08			bcs 	_SNDExit
.dbe6	bbe6	c9 20		cmp #$20			cmp 	#$20 						; $2x is check playing => A
.dbe8	bbe8	b0 09		bcs $bbf3			bcs 	_SNDQueryPlay
.dbea	bbea	c9 14		cmp #$14			cmp 	#$14 						; $10-$13 is queue sound
.dbec	bbec	b0 1a		bcs $bc08			bcs 	_SNDExit
.dbee	bbee	20 8d bb	jsr $bb8d			jsr 	SNDQueueRequest
.dbf1	bbf1	80 15		bra $bc08			bra 	_SNDExit
.dbf3	bbf3					_SNDQueryPlay:
.dbf3	bbf3	29 03		and #$03			and 	#3 							; get channel #
.dbf5	bbf5	aa		tax				tax
.dbf6	bbf6	bd 71 09	lda $0971,x			lda 	SNDTimeLeft,x 				; read time left, if zero then silent
.dbf9	bbf9	80 0d		bra $bc08			bra 	_SNDExit
.dbfb	bbfb					_SNDInitialise:
.dbfb	bbfb					_SNDSilence:
.dbfb	bbfb	9c 64 08	stz $0864			stz 	SNDLength 					; empty the queue.
.dbfe	bbfe	a9 03		lda #$03			lda 	#$3 						; silence channel 0-3.
.dc00	bc00					_SNDSilenceLoop:
.dc00	bc00	48		pha				pha
.dc01	bc01	20 ba bb	jsr $bbba			jsr 	SNDSilenceChannel
.dc04	bc04	68		pla				pla
.dc05	bc05	3a		dec a				dec 	a
.dc06	bc06	10 f8		bpl $bc00			bpl 	_SNDSilenceLoop
.dc08	bc08					_SNDExit:
.dc08	bc08	7a		ply				ply
.dc09	bc09	fa		plx				plx
.dc0a	bc0a	60		rts				rts
=32						SNDQueueSize = 32 							; number of queue entries
.0864						SNDLength:
>0864								.fill 	1
.0865						SNDQueue:
>0865								.fill 	SNDQueueSize * 8
.0965						SNDPitchLow:
>0965								.fill 	4
.0969						SNDPitchHigh:
>0969								.fill 	4
.096d						SNDVolume:
>096d								.fill 	4
.0971						SNDTimeLeft:
>0971								.fill 	4
.0975						SNDAdjustLow:
>0975								.fill 	4
.0979						SNDAdjustHigh:
>0979								.fill 	4
.dc0b	bc0b					Export_SNDUpdate:
.dc0b	bc0b					PagedSNDUpdate:
.dc0b	bc0b	ad 71 09	lda $0971			lda 	SNDTimeLeft+0 				; look at time remaining
.dc0e	bc0e	f0 05		beq $bc15			beq 	_SNDUNot0 					; not playing
.dc10	bc10	a2 00		ldx #$00			ldx 	#0 							; so we know which channel to update
.dc12	bc12	20 34 bc	jsr $bc34			jsr 	SNDUpdateChannel 			; update it.
.dc15	bc15					_SNDUNot0:
.dc15	bc15	ad 72 09	lda $0972			lda 	SNDTimeLeft+1
.dc18	bc18	f0 05		beq $bc1f			beq 	_SNDUNot1
.dc1a	bc1a	a2 01		ldx #$01			ldx 	#1
.dc1c	bc1c	20 34 bc	jsr $bc34			jsr 	SNDUpdateChannel
.dc1f	bc1f					_SNDUNot1:
.dc1f	bc1f	ad 73 09	lda $0973			lda 	SNDTimeLeft+2
.dc22	bc22	f0 05		beq $bc29			beq 	_SNDUNot2
.dc24	bc24	a2 02		ldx #$02			ldx 	#2
.dc26	bc26	20 34 bc	jsr $bc34			jsr 	SNDUpdateChannel
.dc29	bc29					_SNDUNot2:
.dc29	bc29	ad 74 09	lda $0974			lda 	SNDTimeLeft+3
.dc2c	bc2c	f0 05		beq $bc33			beq 	_SNDUNot3
.dc2e	bc2e	a2 03		ldx #$03			ldx 	#3
.dc30	bc30	20 34 bc	jsr $bc34			jsr 	SNDUpdateChannel
.dc33	bc33					_SNDUNot3:
.dc33	bc33	60		rts				rts
.dc34	bc34					SNDUpdateChannel:
.dc34	bc34	c9 ff		cmp #$ff			cmp 	#$FF 						; sound $FF play forever until turned off manually
.dc36	bc36	f0 2c		beq $bc64			beq 	_SNDUCExit
.dc38	bc38	3a		dec a				dec 	a 							; decrement and update timer
.dc39	bc39	9d 71 09	sta $0971,x			sta 	SNDTimeLeft,x
.dc3c	bc3c	f0 1d		beq $bc5b			beq 	_SNDUCUpdate 				; if zero, silence channel
.dc3e	bc3e	bd 75 09	lda $0975,x			lda 	SNDAdjustLow,x 				; adjust ?
.dc41	bc41	1d 79 09	ora $0979,x			ora 	SNDAdjustHigh,x
.dc44	bc44	f0 1e		beq $bc64			beq 	_SNDUCExit 					; if zero carry on at current tone.
.dc46	bc46	18		clc				clc 								; add adjust, forcing into a 10 bit range
.dc47	bc47	bd 65 09	lda $0965,x			lda 	SNDPitchLow,x
.dc4a	bc4a	7d 75 09	adc $0975,x			adc 	SNDAdjustLow,x
.dc4d	bc4d	9d 65 09	sta $0965,x			sta 	SNDPitchLow,x
.dc50	bc50	bd 69 09	lda $0969,x			lda 	SNDPitchHigh,x
.dc53	bc53	7d 79 09	adc $0979,x			adc 	SNDAdjustHigh,x
.dc56	bc56	29 03		and #$03			and 	#3
.dc58	bc58	9d 69 09	sta $0969,x			sta 	SNDPitchHigh,x
.dc5b	bc5b					_SNDUCUpdate:
.dc5b	bc5b	8a		txa				txa 								; which channel.
.dc5c	bc5c	48		pha				pha
.dc5d	bc5d	20 20 bb	jsr $bb20			jsr 	SNDUpdateNote 				; update the current note
.dc60	bc60	68		pla				pla
.dc61	bc61	20 e1 ba	jsr $bae1			jsr 	SNDCheckChannel 			; more to do ?
.dc64	bc64					_SNDUCExit:
.dc64	bc64	60		rts				rts

;******  Return to file: _basic.asm


;******  End of listing
