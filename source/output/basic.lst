
; 64tass Turbo Assembler Macro V1.56.2625 listing file
; 64tass -q -b -Wall -Wno-portable -c -L output/basic.lst -l output/basic.lbl -Wall -o basic.rom _basic.asm
; Thu Sep 22 10:43:50 2022

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: _basic.asm


;******  Processing file: ./aa_system/01common.inc

=$30					ZeroPageMandatory = $30
=$600					ZeroPagePreference = $600
=$700					MemoryStorage = $700
=$2000					BasicStart = $2000
=$8010					CodeStart = $8010
=$1000					VariableSpace = $1000
=$2000					EndVariableSpace = $2000
=8					MathStackSize = 8
=512					BasicStackSize = 512

;******  Return to file: _basic.asm


;******  Processing file: ./aa_system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./aa_system/04data.inc

.0030					codePtr:
>0030							.fill 	4
.0034					basicStack:
>0034							.fill 	2
.0036					zTemp0:
>0036							.fill 	2
.0038					zTemp1:
>0038							.fill 	2
.003a					zTemp2:
>003a							.fill 	2
=$80					NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20					NSBIsReference = $20 						; bit 5 : is a reference
=$10					NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18					NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03					NSBRefMask = $03 							; bits 0,1 : Bytes of reference, -1 (e.g. 00 = 1 byte, 11 = 4 bytes)
=$00					NSTInteger = $00 							; base types for bits 3..4
=$08					NSTFloat = $08
=$10					NSTString = $10
=$18					NSTProcedure = $18
.0600					NSStatus:
>0600							.fill 	MathStackSize
.0608					NSMantissa0:
>0608							.fill 	MathStackSize 				; (this is my integer mantissa system)
.0610					NSMantissa1:
>0610							.fill 	MathStackSize
.0618					NSMantissa2:
>0618							.fill 	MathStackSize
.0620					NSMantissa3:
>0620							.fill 	MathStackSize
.0628					NSExponent:
>0628							.fill 	MathStackSize
.0700					identStart:
>0700							.fill 	1
.0701					identTypeStart:
>0701							.fill 	1
.0702					identTypeEnd:
>0702							.fill 	1
.0703					identHash:
>0703							.fill 	1
.0704					identTypeByte:
>0704							.fill 	1	 						; (see tokenising.pdf)
.0705					encodeState:
>0705							.fill 	1
.0706					tokenOffset:
>0706							.fill 	1
.0707					tokenLineNumber:
>0707							.fill 	2
.0709					tokenBuffer:
>0709							.fill 	253
.0806					lineBuffer:
>0806							.fill 	256

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/binary/handlers.inc


;******  Return to file: _basic.asm


;******  Processing file: ./generated/errors.inc

=1					ERRID_BREAK = 1
=2					ERRID_SYNTAX = 2
=3					ERRID_DIVZERO = 3
=4					ERRID_RANGE = 4
=5					ERRID_TYPE = 5
=6					ERRID_MEMORY = 6
=7					ERRID_ARGUMENT = 7
=8					ERRID_STOP = 8
=9					ERRID_STRING = 9
=10					ERRID_ASSERT = 10
=11					ERRID_DATA = 11
=12					ERRID_NOTDONE = 12

;******  Return to file: _basic.asm


;******  Processing file: ./generated/kwdconst.inc

=$00					KWD_LESSLESS                         = $00; $00 <<
=$01					KWD_LESSEQUAL                        = $01; $01 <=
=$02					KWD_LESSGREATER                      = $02; $02 <>
=$03					KWD_PLINGPLING3                      = $03; $03 !!3
=$04					KWD_GREATERLESS                      = $04; $04 ><
=$05					KWD_GREATEREQUAL                     = $05; $05 >=
=$06					KWD_GREATERGREATER                   = $06; $06 >>
=$07					KWD_PLINGPLING7                      = $07; $07 !!7
=$08					KWD_PLINGPLING8                      = $08; $08 !!8
=$09					KWD_PLINGPLING9                      = $09; $09 !!9
=$0a					KWD_PLINGPLING10                     = $0a; $0a !!10
=$0b					KWD_PLINGPLING11                     = $0b; $0b !!11
=$0c					KWD_PLINGPLING12                     = $0c; $0c !!12
=$0d					KWD_PLINGPLING13                     = $0d; $0d !!13
=$0e					KWD_PLINGPLING14                     = $0e; $0e !!14
=$0f					KWD_PLINGPLING15                     = $0f; $0f !!15
=$10					KWD_AT                               = $10; $10 @
=$11					KWD_PLINGPLING17                     = $11; $11 !!17
=$12					KWD_PLINGPLING18                     = $12; $12 !!18
=$13					KWD_LSQPAREN                         = $13; $13 [
=$14					KWD_BACKSLASH                        = $14; $14 \
=$15					KWD_RSQPAREN                         = $15; $15 ]
=$16					KWD_HAT                              = $16; $16 ^
=$17					KWD_UNDERSCORE                       = $17; $17 _
=$18					KWD_BQUOTE                           = $18; $18 `
=$19					KWD_PLINGPLING25                     = $19; $19 !!25
=$1a					KWD_PLINGPLING26                     = $1a; $1a !!26
=$1b					KWD_LCURLY                           = $1b; $1b {
=$1c					KWD_BAR                              = $1c; $1c |
=$1d					KWD_RCURLY                           = $1d; $1d }
=$1e					KWD_TILDE                            = $1e; $1e ~
=$21					KWD_PLING                            = $21; $21 !
=$22					KWD_DQUOTE                           = $22; $22 "
=$23					KWD_HASH                             = $23; $23 #
=$24					KWD_DOLLAR                           = $24; $24 $
=$25					KWD_PERCENT                          = $25; $25 %
=$26					KWD_AMPERSAND                        = $26; $26 &
=$27					KWD_QUOTE                            = $27; $27 '
=$28					KWD_LPAREN                           = $28; $28 (
=$29					KWD_RPAREN                           = $29; $29 )
=$2a					KWD_STAR                             = $2a; $2a *
=$2b					KWD_PLUS                             = $2b; $2b +
=$2c					KWD_COMMA                            = $2c; $2c ,
=$2d					KWD_MINUS                            = $2d; $2d -
=$2e					KWD_PERIOD                           = $2e; $2e .
=$2f					KWD_SLASH                            = $2f; $2f /
=$30					KWD_0                                = $30; $30 0
=$31					KWD_1                                = $31; $31 1
=$32					KWD_2                                = $32; $32 2
=$33					KWD_3                                = $33; $33 3
=$34					KWD_4                                = $34; $34 4
=$35					KWD_5                                = $35; $35 5
=$36					KWD_6                                = $36; $36 6
=$37					KWD_7                                = $37; $37 7
=$38					KWD_8                                = $38; $38 8
=$39					KWD_9                                = $39; $39 9
=$3a					KWD_COLON                            = $3a; $3a :
=$3b					KWD_SEMICOLON                        = $3b; $3b ;
=$3c					KWD_LESS                             = $3c; $3c <
=$3d					KWD_EQUAL                            = $3d; $3d =
=$3e					KWD_GREATER                          = $3e; $3e >
=$3f					KWD_QMARK                            = $3f; $3f ?
=$83					KWD_ABSLPAREN                        = $83; $83 ABS(
=$84					KWD_ALLOCLPAREN                      = $84; $84 ALLOC(
=$85					KWD_ASCLPAREN                        = $85; $85 ASC(
=$86					KWD_CHRDOLLARLPAREN                  = $86; $86 CHR$(
=$87					KWD_DECLPAREN                        = $87; $87 DEC(
=$88					KWD_FALSE                            = $88; $88 FALSE
=$89					KWD_GETDATEDOLLARLPAREN              = $89; $89 GETDATE$(
=$8a					KWD_GETTIMEDOLLARLPAREN              = $8a; $8a GETTIME$(
=$8b					KWD_HEXDOLLARLPAREN                  = $8b; $8b HEX$(
=$8c					KWD_INTLPAREN                        = $8c; $8c INT(
=$8d					KWD_ISVALLPAREN                      = $8d; $8d ISVAL(
=$8e					KWD_LEFTDOLLARLPAREN                 = $8e; $8e LEFT$(
=$8f					KWD_LENLPAREN                        = $8f; $8f LEN(
=$90					KWD_MIDDOLLARLPAREN                  = $90; $90 MID$(
=$91					KWD_NOT                              = $91; $91 NOT
=$92					KWD_PAGE                             = $92; $92 PAGE
=$93					KWD_RIGHTDOLLARLPAREN                = $93; $93 RIGHT$(
=$94					KWD_RNDLPAREN                        = $94; $94 RND(
=$95					KWD_SGNLPAREN                        = $95; $95 SGN(
=$96					KWD_SPCLPAREN                        = $96; $96 SPC(
=$97					KWD_STRDOLLARLPAREN                  = $97; $97 STR$(
=$98					KWD_TRUE                             = $98; $98 TRUE
=$99					KWD_VALLPAREN                        = $99; $99 VAL(
=$9a					KWD_FOR                              = $9a; $9a FOR
=$9b					KWD_IF                               = $9b; $9b IF
=$9c					KWD_PROC                             = $9c; $9c PROC
=$9d					KWD_REPEAT                           = $9d; $9d REPEAT
=$9e					KWD_WHILE                            = $9e; $9e WHILE
=$9f					KWD_ENDIF                            = $9f; $9f ENDIF
=$a0					KWD_ENDPROC                          = $a0; $a0 ENDPROC
=$a1					KWD_NEXT                             = $a1; $a1 NEXT
=$a2					KWD_UNTIL                            = $a2; $a2 UNTIL
=$a3					KWD_WEND                             = $a3; $a3 WEND
=$a4					KWD_ASSERT                           = $a4; $a4 ASSERT
=$a5					KWD_CALL                             = $a5; $a5 CALL
=$a6					KWD_CLS                              = $a6; $a6 CLS
=$a7					KWD_DATA                             = $a7; $a7 DATA
=$a8					KWD_DIM                              = $a8; $a8 DIM
=$a9					KWD_GOSUB                            = $a9; $a9 GOSUB
=$aa					KWD_GOTO                             = $aa; $aa GOTO
=$ab					KWD_LET                              = $ab; $ab LET
=$ac					KWD_PRINT                            = $ac; $ac PRINT
=$ad					KWD_READ                             = $ad; $ad READ
=$ae					KWD_REM                              = $ae; $ae REM
=$af					KWD_RETURN                           = $af; $af RETURN
=$b0					KWD_THEN                             = $b0; $b0 THEN
=$b1					KWD_TO                               = $b1; $b1 TO

;******  Return to file: _basic.asm


;******  Processing file: ./generated/kwdconst0.inc

=$80					KWC_EOL = $80
=$ff					KWC_STRING = $FF
=$fe					KWC_HEXCONST = $FE
=$9a					KWC_FIRST_STRUCTURE = $9a
=$9f					KWC_FIRST_STRUCTURE_DEC = $9f
=$a3					KWC_LAST_STRUCTURE = $a3
=$83					KWC_FIRST_UNARY = $83
=$99					KWC_LAST_UNARY = $99

;******  Return to file: _basic.asm


;******  Processing file: ./memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./aa_system/00start.asm

.8010	a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.8012	9a		txs				txs
.8013	20 3f 81	jsr $813f			jsr 	NewCommand 					; erase current program
.8016	20 43 87	jsr $8743			jsr 	BackloadProgram
.8019	4c 49 81	jmp $8149			jmp 	CommandRun
.801c					WarmStart:
>801c	db						.byte 	$DB 						; causes a break in the emulator
.801d	80 fd		bra $801c			bra 	WarmStart
.801f					ErrorHandler:
>801f	db						.byte 	$DB 						; causes a break in the emulator
.8020	4c 1f 80	jmp $801f			jmp 	ErrorHandler

;******  Processing file: ./aa_system/../generated/vectors.dat

.8023					VectorSetPunc:
>8023	8d 81					.word	ShiftLeft                        ; $00 <<
>8025	0b 8c					.word	BinaryCompareLessEqual           ; $01 <=
>8027	02 8c					.word	BinaryCompareNotEqual            ; $02 <>
>8029	85 8d					.word	SyntaxError                      ; $03 !!3
>802b	85 8d					.word	SyntaxError                      ; $04 ><
>802d	14 8c					.word	BinaryCompareGreaterEqual        ; $05 >=
>802f	90 81					.word	ShiftRight                       ; $06 >>
>8031	85 8d					.word	SyntaxError                      ; $07 !!7
>8033	85 8d					.word	SyntaxError                      ; $08 !!8
>8035	85 8d					.word	SyntaxError                      ; $09 !!9
>8037	85 8d					.word	SyntaxError                      ; $0a !!10
>8039	85 8d					.word	SyntaxError                      ; $0b !!11
>803b	85 8d					.word	SyntaxError                      ; $0c !!12
>803d	85 8d					.word	SyntaxError                      ; $0d !!13
>803f	85 8d					.word	SyntaxError                      ; $0e !!14
>8041	85 8d					.word	SyntaxError                      ; $0f !!15
>8043	85 8d					.word	SyntaxError                      ; $10 @
>8045	85 8d					.word	SyntaxError                      ; $11 !!17
>8047	85 8d					.word	SyntaxError                      ; $12 !!18
>8049	85 8d					.word	SyntaxError                      ; $13 [
>804b	48 8c					.word	IntegerDivide                    ; $14 \
>804d	85 8d					.word	SyntaxError                      ; $15 ]
>804f	0d 83					.word	EorInteger                       ; $16 ^
>8051	85 8d					.word	SyntaxError                      ; $17 _
>8053	85 8d					.word	SyntaxError                      ; $18 `
>8055	85 8d					.word	SyntaxError                      ; $19 !!25
>8057	85 8d					.word	SyntaxError                      ; $1a !!26
>8059	85 8d					.word	SyntaxError                      ; $1b {
>805b	cb 82					.word	OraInteger                       ; $1c |
>805d	85 8d					.word	SyntaxError                      ; $1d }
>805f	85 8d					.word	SyntaxError                      ; $1e ~
>8061	85 8d					.word	SyntaxError                      ; $1f [7m<7F>[m
>8063	85 8d					.word	SyntaxError                      ; $20
>8065	85 8d					.word	SyntaxError                      ; $21 !
>8067	85 8d					.word	SyntaxError                      ; $22 "
>8069	85 8d					.word	SyntaxError                      ; $23 #
>806b	85 8d					.word	SyntaxError                      ; $24 $
>806d	94 8c					.word	IntegerModulus                   ; $25 %
>806f	89 82					.word	AndInteger                       ; $26 &
>8071	85 8d					.word	SyntaxError                      ; $27 '
>8073	85 8d					.word	SyntaxError                      ; $28 (
>8075	85 8d					.word	SyntaxError                      ; $29 )
>8077	04 8d					.word	MulInteger                       ; $2a *
>8079	23 82					.word	AddInteger                       ; $2b +
>807b	85 8d					.word	SyntaxError                      ; $2c ,
>807d	5e 82					.word	SubInteger                       ; $2d -
>807f	85 8d					.word	SyntaxError                      ; $2e .
>8081	85 8d					.word	SyntaxError                      ; $2f /
>8083	85 8d					.word	SyntaxError                      ; $30 0
>8085	85 8d					.word	SyntaxError                      ; $31 1
>8087	85 8d					.word	SyntaxError                      ; $32 2
>8089	85 8d					.word	SyntaxError                      ; $33 3
>808b	85 8d					.word	SyntaxError                      ; $34 4
>808d	85 8d					.word	SyntaxError                      ; $35 5
>808f	85 8d					.word	SyntaxError                      ; $36 6
>8091	85 8d					.word	SyntaxError                      ; $37 7
>8093	85 8d					.word	SyntaxError                      ; $38 8
>8095	85 8d					.word	SyntaxError                      ; $39 9
>8097	85 8d					.word	SyntaxError                      ; $3a :
>8099	85 8d					.word	SyntaxError                      ; $3b ;
>809b	ee 8b					.word	BinaryCompareLess                ; $3c <
>809d	e4 8b					.word	BinaryCompareEqual               ; $3d =
>809f	f8 8b					.word	BinaryCompareGreater             ; $3e >
>80a1	85 8d					.word	SyntaxError                      ; $3f ?
.80a3					VectorSet0:
>80a3	80 81					.word	EOLCommand                       ; $80 !0:EOF
>80a5	85 8d					.word	SyntaxError                      ; $81 !1:SH1
>80a7	85 8d					.word	SyntaxError                      ; $82 !2:SH2
>80a9	85 8d					.word	SyntaxError                      ; $83 ABS(
>80ab	85 8d					.word	SyntaxError                      ; $84 ALLOC(
>80ad	85 8d					.word	SyntaxError                      ; $85 ASC(
>80af	85 8d					.word	SyntaxError                      ; $86 CHR$(
>80b1	85 8d					.word	SyntaxError                      ; $87 DEC(
>80b3	e1 8b					.word	ReturnFalse                      ; $88 FALSE
>80b5	85 8d					.word	SyntaxError                      ; $89 GETDATE$(
>80b7	85 8d					.word	SyntaxError                      ; $8a GETTIME$(
>80b9	85 8d					.word	SyntaxError                      ; $8b HEX$(
>80bb	85 8d					.word	SyntaxError                      ; $8c INT(
>80bd	85 8d					.word	SyntaxError                      ; $8d ISVAL(
>80bf	85 8d					.word	SyntaxError                      ; $8e LEFT$(
>80c1	85 8d					.word	SyntaxError                      ; $8f LEN(
>80c3	85 8d					.word	SyntaxError                      ; $90 MID$(
>80c5	85 8d					.word	SyntaxError                      ; $91 NOT
>80c7	85 8d					.word	SyntaxError                      ; $92 PAGE
>80c9	85 8d					.word	SyntaxError                      ; $93 RIGHT$(
>80cb	85 8d					.word	SyntaxError                      ; $94 RND(
>80cd	85 8d					.word	SyntaxError                      ; $95 SGN(
>80cf	85 8d					.word	SyntaxError                      ; $96 SPC(
>80d1	85 8d					.word	SyntaxError                      ; $97 STR$(
>80d3	d6 8b					.word	ReturnTrue                       ; $98 TRUE
>80d5	85 8d					.word	SyntaxError                      ; $99 VAL(
>80d7	85 8d					.word	SyntaxError                      ; $9a FOR
>80d9	85 8d					.word	SyntaxError                      ; $9b IF
>80db	85 8d					.word	SyntaxError                      ; $9c PROC
>80dd	85 8d					.word	SyntaxError                      ; $9d REPEAT
>80df	85 8d					.word	SyntaxError                      ; $9e WHILE
>80e1	85 8d					.word	SyntaxError                      ; $9f ENDIF
>80e3	85 8d					.word	SyntaxError                      ; $a0 ENDPROC
>80e5	85 8d					.word	SyntaxError                      ; $a1 NEXT
>80e7	85 8d					.word	SyntaxError                      ; $a2 UNTIL
>80e9	85 8d					.word	SyntaxError                      ; $a3 WEND
>80eb	21 81					.word	AssertCommand                    ; $a4 ASSERT
>80ed	2f 81					.word	CallCommand                      ; $a5 CALL
>80ef	85 8d					.word	SyntaxError                      ; $a6 CLS
>80f1	85 8d					.word	SyntaxError                      ; $a7 DATA
>80f3	85 8d					.word	SyntaxError                      ; $a8 DIM
>80f5	85 8d					.word	SyntaxError                      ; $a9 GOSUB
>80f7	85 8d					.word	SyntaxError                      ; $aa GOTO
>80f9	85 8d					.word	SyntaxError                      ; $ab LET
>80fb	85 8d					.word	SyntaxError                      ; $ac PRINT
>80fd	85 8d					.word	SyntaxError                      ; $ad READ
>80ff	85 8d					.word	SyntaxError                      ; $ae REM
>8101	85 8d					.word	SyntaxError                      ; $af RETURN
>8103	85 8d					.word	SyntaxError                      ; $b0 THEN
>8105	85 8d					.word	SyntaxError                      ; $b1 TO
.8107					VectorSet1:
>8107	85 8d					.word	SyntaxError                      ; $80 !0:EOF
>8109	85 8d					.word	SyntaxError                      ; $81 !1:SH1
>810b	85 8d					.word	SyntaxError                      ; $82 !2:SH2
>810d	3b 81					.word	ClearCommand                     ; $83 CLEAR
>810f	3c 81					.word	EndCommand                       ; $84 END
>8111	85 8d					.word	SyntaxError                      ; $85 LIST
>8113	3f 81					.word	NewCommand                       ; $86 NEW
>8115	85 8d					.word	SyntaxError                      ; $87 RESTORE
>8117	49 81					.word	CommandRUN                       ; $88 RUN
>8119	85 8d					.word	SyntaxError                      ; $89 STOP
.811b					VectorSet2:
>811b	85 8d					.word	SyntaxError                      ; $80 !0:EOF
>811d	85 8d					.word	SyntaxError                      ; $81 !1:SH1
>811f	85 8d					.word	SyntaxError                      ; $82 !2:SH2

;******  Return to file: ./aa_system/00start.asm


;******  Return to file: _basic.asm


;******  Processing file: ./commands/assert.asm

.8121					AssertCommand:
.8121	20 2d 86	jsr $862d			jsr 	EvaluateInteger 			; the assert test
.8124	20 e3 86	jsr $86e3			jsr 	NSMIsZero 					; exit if result is non zero.
.8127	d0 05		bne $812e			bne 	_ACExit
.8129	a9 0a		lda #$0a		lda	#10
.812b	4c 1f 80	jmp $801f		jmp	ErrorHandler
.812e					_ACExit:
.812e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./commands/call.asm

.812f					CallCommand:
.812f	20 42 86	jsr $8642			jsr 	Evaluate16BitInteger
.8132	ad 10 06	lda $0610			lda 	NSMantissa1
.8135	8d 09 06	sta $0609			sta 	NSMantissa0+1
.8138	6c 08 06	jmp ($0608)			jmp 	(NSMantissa0)

;******  Return to file: _basic.asm


;******  Processing file: ./commands/clear.asm

.813b					ClearCommand:
.813b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./commands/end.asm

.813c					EndCommand:
.813c	4c 1c 80	jmp $801c			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./commands/new.asm

.813f					NewCommand:
.813f	20 f0 86	jsr $86f0			jsr 	MemoryNew
.8142	9c 00 10	stz $1000			stz 	VariableSpace 				; erase all variables.
.8145	20 3b 81	jsr $813b			jsr 	ClearCommand 				; clear everything.
.8148	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./commands/run.asm

.8149					CommandRUN:
.8149	20 3b 81	jsr $813b			jsr 	ClearCommand 				; clear variable/stacks/etc.
.814c	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.814e	85 30		sta $30				sta 	codePtr
.8150	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.8152	85 31		sta $31				sta 	codePtr+1
.8154					RUNNewLine:
.8154	b2 30		lda ($30)			lda 	(codePtr)
.8156	f0 25		beq $817d			beq 	CRNoProgram         		; no then END.
.8158	a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack
.815a	9a		txs				txs
.815b					RUNCodePointerLine:
.815b	a0 02		ldy #$02			ldy 	#2 							; start of program
.815d					_CRIncMainLoop:
.815d	c8		iny				iny
.815e					_CRMainLoop:
.815e	b1 30		lda ($30),y			lda 	(codePtr),y
.8160	10 10		bpl $8172			bpl 	_CRNotKeyword
.8162	c9 9a		cmp #$9a			cmp 	#KWC_LAST_UNARY+1 			; if after unary, legitimate command
.8164	b0 04		bcs $816a			bcs 	_CRIsKeyword
.8166	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if unary, syntax error.
.8168	b0 0d		bcs $8177			bcs		_CRSyntaxError
.816a					_CRIsKeyword:
.816a	c8		iny				iny 								; consume command
.816b	0a		asl a				asl 	a 							; double losing the MSB which is '1' as tokens are $80-$FF
.816c	aa		tax				tax 								; put in X for vector jump
.816d	20 7a 81	jsr $817a			jsr 	_CRCallVector0 				; call the vector - effectively jsr (vectortable,X)
.8170	80 ec		bra $815e			bra 	_CRMainLoop 				; and loop round
.8172					_CRNotKeyword:
.8172	c9 3a		cmp #$3a			cmp 	#KWD_COLON 					; if a :, consume it and go round.
.8174	f0 e7		beq $815d			beq 	_CRIncMainLoop
>8176	db						.byte 	$DB 						; causes a break in the emulator
.8177					_CRSyntaxError:
.8177	4c 85 8d	jmp $8d85			jmp 	SyntaxError
.817a					_CRCallVector0:
.817a	7c a3 80	jmp ($80a3,x)			jmp 	(VectorSet0,x)
.817d					CRNoProgram:
.817d	4c 3c 81	jmp $813c			jmp 	EndCommand
.8180					EOLCommand:
.8180	18		clc				clc
.8181	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8183	65 30		adc $30				adc 	codePtr
.8185	85 30		sta $30				sta 	codePtr
.8187	90 02		bcc $818b			bcc 	_CREExit
.8189	e6 31		inc $31				inc 	codePtr+1
.818b					_CREExit:
.818b	80 c7		bra $8154			bra 	RunNewLine

;******  Return to file: _basic.asm


;******  Processing file: ./errors/charcheck.asm

.8bbd					CheckRightBracket:
.8bbd	b1 30		lda ($30),y			lda 	(codePtr),y
.8bbf	c8		iny				iny
.8bc0	c9 29		cmp #$29			cmp 	#KWD_RPAREN 						; exit if matches
.8bc2	d0 0f		bne $8bd3			bne 	CNAFail
.8bc4	60		rts				rts
.8bc5					CheckComma:
.8bc5	b1 30		lda ($30),y			lda 	(codePtr),y
.8bc7	c8		iny				iny
.8bc8	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 						; exit if matches
.8bca	d0 07		bne $8bd3			bne 	CNAFail
.8bcc	60		rts				rts
.8bcd					CheckNextA:
.8bcd	d1 30		cmp ($30),y			cmp 	(codePtr),y
.8bcf	d0 02		bne $8bd3			bne 	CNAFail
.8bd1	c8		iny				iny 								; skip character
.8bd2	60		rts				rts 								; and exit
.8bd3					CNAFail:
.8bd3	4c 85 8d	jmp $8d85			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/binary/compare.asm

.8bd6					ReturnTrue:
.8bd6	a9 01		lda #$01			lda 	#1  						; set to 1
.8bd8	20 b5 86	jsr $86b5			jsr 	NSMSetByte
.8bdb	a9 80		lda #$80			lda 	#$80 						; set sign flag, so it is -1
.8bdd	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8be0	60		rts				rts
.8be1					ReturnFalse:
.8be1	4c b3 86	jmp $86b3			jmp 	NSMSetZero 					; set it all to zero
.8be4					BinaryCompareEqual:
.8be4	fa		plx				plx
.8be5	20 1d 8c	jsr $8c1d			jsr 	CompareBaseCode
.8be8	c9 00		cmp #$00			cmp 	#0
.8bea	f0 ea		beq $8bd6			beq 	ReturnTrue
.8bec	80 f3		bra $8be1			bra 	ReturnFalse
.8bee					BinaryCompareLess:
.8bee	fa		plx				plx
.8bef	20 1d 8c	jsr $8c1d			jsr 	CompareBaseCode
.8bf2	c9 ff		cmp #$ff			cmp 	#$FF
.8bf4	f0 e0		beq $8bd6			beq 	ReturnTrue
.8bf6	80 e9		bra $8be1			bra 	ReturnFalse
.8bf8					BinaryCompareGreater:
.8bf8	fa		plx				plx
.8bf9	20 1d 8c	jsr $8c1d			jsr 	CompareBaseCode
.8bfc	c9 01		cmp #$01			cmp 	#1
.8bfe	f0 d6		beq $8bd6			beq 	ReturnTrue
.8c00	80 df		bra $8be1			bra 	ReturnFalse
.8c02					BinaryCompareNotEqual:
.8c02	20 1d 8c	jsr $8c1d			jsr 	CompareBaseCode
.8c05	c9 00		cmp #$00			cmp 	#0
.8c07	d0 cd		bne $8bd6			bne 	ReturnTrue
.8c09	80 d6		bra $8be1			bra 	ReturnFalse
.8c0b					BinaryCompareLessEqual:
.8c0b	20 1d 8c	jsr $8c1d			jsr 	CompareBaseCode
.8c0e	c9 01		cmp #$01			cmp 	#1
.8c10	d0 c4		bne $8bd6			bne 	ReturnTrue
.8c12	80 cd		bra $8be1			bra 	ReturnFalse
.8c14					BinaryCompareGreaterEqual:
.8c14	20 1d 8c	jsr $8c1d			jsr 	CompareBaseCode
.8c17	c9 ff		cmp #$ff			cmp 	#$FF
.8c19	d0 bb		bne $8bd6			bne 	ReturnTrue
.8c1b	80 c4		bra $8be1			bra 	ReturnFalse
.8c1d					CompareBaseCode:
.8c1d	20 ce 83	jsr $83ce			jsr 	DereferenceTopTwo 			; make both values if references.
.8c20	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if either is a string.
.8c23	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8c26	29 10		and #$10			and 	#NSTString
.8c28	d0 1c		bne $8c46			bne 	_CBCString
.8c2a	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check both are integers
.8c2d	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8c30	d0 15		bne $8c47			bne 	_CBCFloat
.8c32	20 fd 81	jsr $81fd			jsr 	SubTopTwoStack 				; unsigned
.8c35	50 02		bvc $8c39			bvc 	_CBCNoOverflow 				; make signed
.8c37	49 80		eor #$80			eor 	#$80
.8c39					_CBCNoOverflow:
.8c39	30 08		bmi $8c43			bmi 	_CBCLess 					; if < return $FF
.8c3b	20 e3 86	jsr $86e3			jsr 	NSMIsZero 					; or the mantissa together
.8c3e	f0 02		beq $8c42			beq 	_CBCExit 					; if zero, return zero as equal
.8c40	a9 01		lda #$01			lda 	#1 							; return 1
.8c42					_CBCExit:
.8c42	60		rts				rts
.8c43					_CBCLess:
.8c43	a9 ff		lda #$ff			lda 	#$FF
.8c45	60		rts				rts
.8c46					_CBCString:
>8c46	db						.byte 	$DB 						; causes a break in the emulator
.8c47					_CBCFloat:
>8c47	db						.byte 	$DB 						; causes a break in the emulator

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/binary/divide.asm

.8c48					IntegerDivide:
.8c48	fa		plx				plx
.8c49	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8c4c	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8c4f	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8c50	0a		asl a				asl 	a
.8c51	10 05		bpl $8c58			bpl 	_NotRef
.8c53	48		pha				pha
.8c54	20 ce 83	jsr $83ce			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8c57	68		pla				pla
.8c58					_NotRef:
.8c58	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8c5a	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8c5d	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8c60	f0 03		beq $8c65			beq 	_IntegerCode 				; if clear, then we have two integers
.8c62	4c 8f 8d	jmp $8d8f			jmp 	TypeError 					; anything else, type mismatch.
.8c65					_IntegerCode:
.8c65	20 87 8c	jsr $8c87			jsr 	CheckDivideZero 			; do div zero check
.8c68	20 be 8c	jsr $8cbe			jsr 	Int32Divide 				; do the division
.8c6b	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.8c6e	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8c71	bd 12 06	lda $0612,x			lda 	NSMantissa1+2,x
.8c74	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8c77	bd 1a 06	lda $061a,x			lda 	NSMantissa2+2,x
.8c7a	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8c7d	bd 22 06	lda $0622,x			lda 	NSMantissa3+2,x
.8c80	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8c83	20 77 8d	jsr $8d77			jsr 	CalculateSign 				; calculate result sign
.8c86	60		rts				rts
.8c87					CheckDivideZero:
.8c87	e8		inx				inx
.8c88	20 e3 86	jsr $86e3			jsr 	NSMIsZero
.8c8b	f0 02		beq $8c8f			beq 	_CDVError
.8c8d	ca		dex				dex
.8c8e	60		rts				rts
.8c8f					_CDVError:
.8c8f	a9 03		lda #$03		lda	#3
.8c91	4c 1f 80	jmp $801f		jmp	ErrorHandler
.8c94					IntegerModulus:
.8c94	fa		plx				plx
.8c95	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8c98	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8c9b	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8c9c	0a		asl a				asl 	a
.8c9d	10 05		bpl $8ca4			bpl 	_NotRef
.8c9f	48		pha				pha
.8ca0	20 ce 83	jsr $83ce			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8ca3	68		pla				pla
.8ca4					_NotRef:
.8ca4	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8ca6	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8ca9	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8cac	f0 03		beq $8cb1			beq 	_IntegerCode 				; if clear, then we have two integers
.8cae	4c 8f 8d	jmp $8d8f			jmp 	TypeError 					; anything else, type mismatch.
.8cb1					_IntegerCode:
.8cb1	20 87 8c	jsr $8c87			jsr 	CheckDivideZero 			; do div zero check
.8cb4	20 be 8c	jsr $8cbe			jsr 	Int32Divide 				; do the division
.8cb7	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; clear the sign bit.
.8cba	5e 00 06	lsr $0600,x			lsr 	NSStatus,x
.8cbd	60		rts				rts
.8cbe					Int32Divide:
.8cbe	48		pha				pha 								; save AXY
.8cbf	5a		phy				phy
.8cc0	20 8a 86	jsr $868a			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.8cc3	20 af 86	jsr $86af			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.8cc6	a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.8cc8					_I32DivideLoop:
.8cc8	e8		inx				inx
.8cc9	e8		inx				inx
.8cca	20 c8 86	jsr $86c8			jsr 	NSMShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.8ccd	ca		dex				dex
.8cce	ca		dex				dex
.8ccf	20 c9 86	jsr $86c9			jsr 	NSMRotateLeft
.8cd2	20 fa 8c	jsr $8cfa			jsr 	DivideCheckSubtract 		; check if subtract possible
.8cd5	90 03		bcc $8cda			bcc 	_I32DivideNoCarryIn
.8cd7	fe 0a 06	inc $060a,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.8cda					_I32DivideNoCarryIn:
.8cda	88		dey				dey 								; loop round till division completed.
.8cdb	d0 eb		bne $8cc8			bne 	_I32DivideLoop
.8cdd	7a		ply				ply 								; restore AXY and exit
.8cde	68		pla				pla
.8cdf	60		rts				rts
.8ce0					Int32ShiftDivide:
.8ce0	48		pha				pha 								; save AXY
.8ce1	5a		phy				phy
.8ce2	20 8a 86	jsr $868a			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.8ce5	20 af 86	jsr $86af			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.8ce8	a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.8cea					_I32SDLoop:
.8cea	20 fa 8c	jsr $8cfa			jsr 	DivideCheckSubtract 		; check if subtract possible
.8ced	20 c9 86	jsr $86c9			jsr 	NSMRotateLeft				; shift 64 bit FPA left, rotating carry in
.8cf0	e8		inx				inx
.8cf1	20 c9 86	jsr $86c9			jsr 	NSMRotateLeft
.8cf4	88		dey				dey 	 							; do 31 times
.8cf5	d0 f3		bne $8cea			bne 	_I32SDLoop
.8cf7	7a		ply				ply 								; restore AXY and exit
.8cf8	68		pla				pla
.8cf9	60		rts				rts
.8cfa					DivideCheckSubtract:
.8cfa	20 fd 81	jsr $81fd			jsr 	SubTopTwoStack 				; subtract Stack[X+1] from Stack[X+0]
.8cfd	b0 04		bcs $8d03			bcs 	_DCSExit 					; if carry set, then could do, exit
.8cff	20 d7 81	jsr $81d7			jsr 	AddTopTwoStack 				; add it back in
.8d02	18		clc				clc 								; and return False
.8d03					_DCSExit:
.8d03	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/binary/multiply.asm

.8d04					MulInteger:
.8d04	fa		plx				plx
.8d05	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8d08	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8d0b	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8d0c	0a		asl a				asl 	a
.8d0d	10 05		bpl $8d14			bpl 	_NotRef
.8d0f	48		pha				pha
.8d10	20 ce 83	jsr $83ce			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8d13	68		pla				pla
.8d14					_NotRef:
.8d14	0a		asl a				asl 	a 							; put MSB of type into A:7
.8d15	30 0b		bmi $8d22			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.8d17	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8d1a	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8d1d	f0 06		beq $8d25			beq 	_IntegerCode 				; if clear, then we have two integers
.8d1f	4c 99 8d	jmp $8d99			jmp 	NotDoneError 							; otherwise at least one float.
.8d22					_StringData:
.8d22	4c 99 8d	jmp $8d99			jmp 	NotDoneError							; at least one string - don't know both are strings.
.8d25					_IntegerCode:
.8d25	20 32 8d	jsr $8d32			jsr 	MultiplyShort
.8d28	c9 00		cmp #$00			cmp 	#0
.8d2a	f0 05		beq $8d31			beq 	_MIExit
.8d2c	a9 04		lda #$04		lda	#4
.8d2e	4c 1f 80	jmp $801f		jmp	ErrorHandler
.8d31					_MIExit:
.8d31	60		rts				rts
.8d32					MultiplyShort:
.8d32	5a		phy				phy 								; save Y
.8d33	20 8a 86	jsr $868a			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.8d36	20 af 86	jsr $86af			jsr 	NSMSetZeroMantissaOnly 		; set mantissa S[X] to zero
.8d39	a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.8d3b					_I32MLoop:
.8d3b	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.8d3e	1d 12 06	ora $0612,x			ora 	NSMantissa1+2,x
.8d41	1d 1a 06	ora $061a,x			ora 	NSMantissa2+2,x
.8d44	1d 22 06	ora $0622,x			ora 	NSMantissa3+2,x
.8d47	f0 28		beq $8d71			beq 	_I32MExit 					; exit if zero
.8d49	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.8d4c	29 01		and #$01			and 	#1
.8d4e	f0 0e		beq $8d5e			beq 	_I32MNoAdd
.8d50	20 d7 81	jsr $81d7			jsr 	AddTopTwoStack 				; if so add S[X+1] to S[X+0]
.8d53	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.8d56	10 06		bpl $8d5e			bpl 	_I32MNoAdd
.8d58					_I32ShiftRight:
.8d58	20 d6 86	jsr $86d6			jsr 	NSMShiftRight 				; shift S[X] right
.8d5b	c8		iny				iny 								; increment shift count
.8d5c	80 0a		bra $8d68			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.8d5e					_I32MNoAdd:
.8d5e	3c 21 06	bit $0621,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.8d61	70 f5		bvs $8d58			bvs 	_I32ShiftRight 				; instead.
.8d63	e8		inx				inx
.8d64	20 c8 86	jsr $86c8			jsr 	NSMShiftLeft 				; shift additive S[X+1] left
.8d67	ca		dex				dex
.8d68					_I32MShiftUpper:
.8d68	e8		inx				inx 								; shift S[X+2] right
.8d69	e8		inx				inx
.8d6a	20 d6 86	jsr $86d6			jsr 	NSMShiftRight
.8d6d	ca		dex				dex
.8d6e	ca		dex				dex
.8d6f	80 ca		bra $8d3b			bra 	_I32MLoop 					; try again.
.8d71					_I32MExit:
.8d71	20 77 8d	jsr $8d77			jsr 	CalculateSign
.8d74	98		tya				tya 								; shift in A
.8d75	7a		ply				ply 								; restore Y and exit
.8d76	60		rts				rts
.8d77					CalculateSign:
.8d77	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.8d7a	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; shift result left
.8d7d	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.8d80	0a		asl a				asl 	a 							; shift bit 7 into carry
.8d81	7e 00 06	ror $0600,x			ror 	NSStatus,x 					; shift right into status byte.
.8d84	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/binary/shifts.asm

.818d					ShiftLeft:
.818d	38		sec				sec
.818e	80 01		bra $8191			bra 	ShiftMain
.8190					ShiftRight:
.8190	18		clc				clc
.8191					ShiftMain:
.8191	fa		plx				plx 								; restore X
.8192	08		php				php 								; save direction
.8193	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8196	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8199	0a		asl a				asl 	a 							; shift reference bit into sign bit
.819a	0a		asl a				asl 	a
.819b	10 05		bpl $81a2			bpl 	_NotRef
.819d	48		pha				pha
.819e	20 ce 83	jsr $83ce			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.81a1	68		pla				pla
.81a2					_NotRef:
.81a2	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.81a4	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.81a7	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.81aa	f0 03		beq $81af			beq 	_IntegerCode 				; if clear, then we have two integers
.81ac	4c 8f 8d	jmp $8d8f			jmp 	TypeError 					; anything else, type mismatch.
.81af					_IntegerCode:
.81af	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; check number < 32
.81b2	29 e0		and #$e0			and 	#$E0
.81b4	1d 11 06	ora $0611,x			ora 	NSMantissa1+1,x
.81b7	1d 19 06	ora $0619,x			ora 	NSMantissa2+1,x
.81ba	1d 21 06	ora $0621,x			ora 	NSMantissa3+1,x
.81bd	d0 13		bne $81d2			bne 	_SMExit0 					; if >= 32 it will always return zero.
.81bf					_SMLoop:
.81bf	de 09 06	dec $0609,x			dec 	NSMantissa0+1,x 			; predecrement, could do << 0
.81c2	30 11		bmi $81d5			bmi 	_SMExit 					; exit if done.
.81c4	28		plp				plp 								; restore direcition setting
.81c5	08		php				php
.81c6	90 05		bcc $81cd			bcc 	_SMRight
.81c8	20 c8 86	jsr $86c8			jsr 	NSMShiftLeft 				; shift left if CS
.81cb	80 f2		bra $81bf			bra 	_SMLoop
.81cd					_SMRight:
.81cd	20 d6 86	jsr $86d6			jsr 	NSMShiftRight 				; shift right if CC
.81d0	80 ed		bra $81bf			bra 	_SMLoop
.81d2					_SMExit0:
.81d2	20 b3 86	jsr $86b3			jsr 	NSMSetZero 					; return zero.
.81d5					_SMExit:
.81d5	28		plp				plp 								; throw direction
.81d6	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/binary/simple.asm

.81d7					AddTopTwoStack:
.81d7	18		clc				clc
.81d8	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.81db	7d 09 06	adc $0609,x			adc 		NSMantissa0+1,x
.81de	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.81e1	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.81e4	7d 11 06	adc $0611,x			adc 		NSMantissa1+1,x
.81e7	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.81ea	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.81ed	7d 19 06	adc $0619,x			adc 		NSMantissa2+1,x
.81f0	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.81f3	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.81f6	7d 21 06	adc $0621,x			adc 		NSMantissa3+1,x
.81f9	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.81fc	60		rts				rts
.81fd					SubTopTwoStack:
.81fd	38		sec				sec
.81fe	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8201	fd 09 06	sbc $0609,x			sbc 		NSMantissa0+1,x
.8204	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8207	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.820a	fd 11 06	sbc $0611,x			sbc 		NSMantissa1+1,x
.820d	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8210	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8213	fd 19 06	sbc $0619,x			sbc 		NSMantissa2+1,x
.8216	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8219	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.821c	fd 21 06	sbc $0621,x			sbc 		NSMantissa3+1,x
.821f	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8222	60		rts				rts
.8223					AddInteger:
.8223	fa		plx				plx
.8224	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8227	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.822a	0a		asl a				asl 	a 							; shift reference bit into sign bit
.822b	0a		asl a				asl 	a
.822c	10 05		bpl $8233			bpl 	_NotRef
.822e	48		pha				pha
.822f	20 ce 83	jsr $83ce			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8232	68		pla				pla
.8233					_NotRef:
.8233	0a		asl a				asl 	a 							; put MSB of type into A:7
.8234	30 0b		bmi $8241			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.8236	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8239	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.823c	f0 06		beq $8244			beq 	_IntegerCode 				; if clear, then we have two integers
.823e	4c 99 8d	jmp $8d99			jmp 	NotDoneError 							; otherwise at least one float.
.8241					_StringData:
.8241	4c 99 8d	jmp $8d99			jmp 	NotDoneError							; at least one string - don't know both are strings.
.8244					_IntegerCode:
.8244					AddCode:
.8244	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.8247	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.824a	10 8b		bpl $81d7			bpl 	AddTopTwoStack
.824c	20 fd 81	jsr $81fd			jsr 	SubTopTwoStack 				; do a physical subtraction
.824f	3c 20 06	bit $0620,x			bit 	NSMantissa3,x 				; result is +ve, okay
.8252	10 09		bpl $825d			bpl 	_AddExit
.8254	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; sign is that of 2nd value
.8257	9d 00 06	sta $0600,x			sta 	NSStatus,x
.825a	20 68 86	jsr $8668			jsr 	NSMNegateMantissa 			; negate the mantissa and exit
.825d					_AddExit:
.825d	60		rts				rts
.825e					SubInteger:
.825e	fa		plx				plx
.825f	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8262	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8265	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8266	0a		asl a				asl 	a
.8267	10 05		bpl $826e			bpl 	_NotRef
.8269	48		pha				pha
.826a	20 ce 83	jsr $83ce			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.826d	68		pla				pla
.826e					_NotRef:
.826e	0a		asl a				asl 	a 							; put MSB of type into A:7
.826f	30 0b		bmi $827c			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.8271	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8274	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8277	f0 06		beq $827f			beq 	_IntegerCode 				; if clear, then we have two integers
.8279	4c 99 8d	jmp $8d99			jmp 	NotDoneError 							; otherwise at least one float.
.827c					_StringData:
.827c	4c 99 8d	jmp $8d99			jmp 	NotDoneError							; at least one string - don't know both are strings.
.827f					_IntegerCode:
.827f	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; negate the second value.
.8282	49 80		eor #$80			eor 	#$80
.8284	9d 01 06	sta $0601,x			sta 	NSStatus+1,x
.8287	80 bb		bra $8244			bra 	AddCode 					; and do the same code as add.
.8289					AndInteger:
.8289	fa		plx				plx
.828a	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.828d	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8290	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8291	0a		asl a				asl 	a
.8292	10 05		bpl $8299			bpl 	_NotRef
.8294	48		pha				pha
.8295	20 ce 83	jsr $83ce			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8298	68		pla				pla
.8299					_NotRef:
.8299	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.829b	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.829e	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.82a1	f0 03		beq $82a6			beq 	_IntegerCode 				; if clear, then we have two integers
.82a3	4c 8f 8d	jmp $8d8f			jmp 	TypeError 					; anything else, type mismatch.
.82a6					_IntegerCode:
.82a6	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.82a9	3d 09 06	and $0609,x			and 		NSMantissa0+1,x
.82ac	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.82af	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.82b2	3d 11 06	and $0611,x			and 		NSMantissa1+1,x
.82b5	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.82b8	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.82bb	3d 19 06	and $0619,x			and 		NSMantissa2+1,x
.82be	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.82c1	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.82c4	3d 21 06	and $0621,x			and 		NSMantissa3+1,x
.82c7	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.82ca	60		rts				rts
.82cb					OraInteger:
.82cb	fa		plx				plx
.82cc	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.82cf	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.82d2	0a		asl a				asl 	a 							; shift reference bit into sign bit
.82d3	0a		asl a				asl 	a
.82d4	10 05		bpl $82db			bpl 	_NotRef
.82d6	48		pha				pha
.82d7	20 ce 83	jsr $83ce			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.82da	68		pla				pla
.82db					_NotRef:
.82db	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.82dd	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.82e0	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.82e3	f0 03		beq $82e8			beq 	_IntegerCode 				; if clear, then we have two integers
.82e5	4c 8f 8d	jmp $8d8f			jmp 	TypeError 					; anything else, type mismatch.
.82e8					_IntegerCode:
.82e8	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.82eb	1d 09 06	ora $0609,x			ora 		NSMantissa0+1,x
.82ee	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.82f1	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.82f4	1d 11 06	ora $0611,x			ora 		NSMantissa1+1,x
.82f7	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.82fa	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.82fd	1d 19 06	ora $0619,x			ora 		NSMantissa2+1,x
.8300	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8303	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8306	1d 21 06	ora $0621,x			ora 		NSMantissa3+1,x
.8309	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.830c	60		rts				rts
.830d					EorInteger:
.830d	fa		plx				plx
.830e	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8311	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8314	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8315	0a		asl a				asl 	a
.8316	10 05		bpl $831d			bpl 	_NotRef
.8318	48		pha				pha
.8319	20 ce 83	jsr $83ce			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.831c	68		pla				pla
.831d					_NotRef:
.831d	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.831f	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8322	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8325	f0 03		beq $832a			beq 	_IntegerCode 				; if clear, then we have two integers
.8327	4c 8f 8d	jmp $8d8f			jmp 	TypeError 					; anything else, type mismatch.
.832a					_IntegerCode:
.832a	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.832d	5d 09 06	eor $0609,x			eor 		NSMantissa0+1,x
.8330	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8333	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8336	5d 11 06	eor $0611,x			eor 		NSMantissa1+1,x
.8339	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.833c	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.833f	5d 19 06	eor $0619,x			eor 		NSMantissa2+1,x
.8342	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8345	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8348	5d 21 06	eor $0621,x			eor 		NSMantissa3+1,x
.834b	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.834e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/expression.asm


;******  Processing file: ./expressions/../generated/precedence.dat

.834f					PrecedenceLevel:
>834f	04					.byte	 4	; $00 <<
>8350	02					.byte	 2	; $01 <=
>8351	02					.byte	 2	; $02 <>
>8352	00					.byte	 0	; $03 !!3
>8353	00					.byte	 0	; $04 ><
>8354	02					.byte	 2	; $05 >=
>8355	04					.byte	 4	; $06 >>
>8356	00					.byte	 0	; $07 !!7
>8357	00					.byte	 0	; $08 !!8
>8358	00					.byte	 0	; $09 !!9
>8359	00					.byte	 0	; $0a !!10
>835a	00					.byte	 0	; $0b !!11
>835b	00					.byte	 0	; $0c !!12
>835c	00					.byte	 0	; $0d !!13
>835d	00					.byte	 0	; $0e !!14
>835e	00					.byte	 0	; $0f !!15
>835f	00					.byte	 0	; $10 @
>8360	00					.byte	 0	; $11 !!17
>8361	00					.byte	 0	; $12 !!18
>8362	00					.byte	 0	; $13 [
>8363	04					.byte	 4	; $14 \
>8364	00					.byte	 0	; $15 ]
>8365	01					.byte	 1	; $16 ^
>8366	00					.byte	 0	; $17 _
>8367	00					.byte	 0	; $18 `
>8368	00					.byte	 0	; $19 !!25
>8369	00					.byte	 0	; $1a !!26
>836a	00					.byte	 0	; $1b {
>836b	01					.byte	 1	; $1c |
>836c	00					.byte	 0	; $1d }
>836d	00					.byte	 0	; $1e ~
>836e	00					.byte	 0	; $1f [7m<7F>[m
>836f	00					.byte	 0	; $20
>8370	05					.byte	 5	; $21 !
>8371	00					.byte	 0	; $22 "
>8372	00					.byte	 0	; $23 #
>8373	05					.byte	 5	; $24 $
>8374	04					.byte	 4	; $25 %
>8375	01					.byte	 1	; $26 &
>8376	00					.byte	 0	; $27 '
>8377	00					.byte	 0	; $28 (
>8378	00					.byte	 0	; $29 )
>8379	04					.byte	 4	; $2a *
>837a	03					.byte	 3	; $2b +
>837b	00					.byte	 0	; $2c ,
>837c	03					.byte	 3	; $2d -
>837d	00					.byte	 0	; $2e .
>837e	04					.byte	 4	; $2f /
>837f	00					.byte	 0	; $30 0
>8380	00					.byte	 0	; $31 1
>8381	00					.byte	 0	; $32 2
>8382	00					.byte	 0	; $33 3
>8383	00					.byte	 0	; $34 4
>8384	00					.byte	 0	; $35 5
>8385	00					.byte	 0	; $36 6
>8386	00					.byte	 0	; $37 7
>8387	00					.byte	 0	; $38 8
>8388	00					.byte	 0	; $39 9
>8389	00					.byte	 0	; $3a :
>838a	00					.byte	 0	; $3b ;
>838b	02					.byte	 2	; $3c <
>838c	02					.byte	 2	; $3d =
>838d	02					.byte	 2	; $3e >
>838e	05					.byte	 5	; $3f ?

;******  Return to file: ./expressions/expression.asm

.838f					EvaluateExpressionAt0:
.838f	a2 00		ldx #$00			ldx 	#0 							; bottom stack level
.8391					EvaluateExpression:
.8391	a9 00		lda #$00			lda 	#0 							; lowest precedence level
.8393					EvaluateExpressionAtPrecedence:
.8393	48		pha				pha 								; save precedence level
.8394	20 1b 85	jsr $851b			jsr 	EvaluateTerm 				; evaluate term into level X.
.8397	68		pla				pla 								; restore precedence level.
.8398					_EXPRLoop:
.8398	85 36		sta $36				sta 	zTemp0 						; save current precedence level.
.839a	b1 30		lda ($30),y			lda 	(codePtr),y
.839c	c9 40		cmp #$40			cmp		#$40 						; if >= $40 cannot be an operator
.839e	b0 25		bcs $83c5			bcs 	_EXPRExit
.83a0	da		phx				phx 								; read the operator precedence
.83a1	aa		tax				tax
.83a2	bd 4f 83	lda $834f,x			lda 	PrecedenceLevel,x
.83a5	fa		plx				plx
.83a6	c9 00		cmp #$00			cmp 	#0							; if zero exit (not an operator)
.83a8	f0 1b		beq $83c5			beq 	_EXPRExit
.83aa	85 37		sta $37				sta 	zTemp0+1 					; save operator precedence level.
.83ac	a5 36		lda $36				lda 	zTemp0 						; compare current precedence vs. operator precedence
.83ae	c5 37		cmp $37				cmp 	zTemp0+1
.83b0	b0 13		bcs $83c5			bcs		_EXPRExit 					; if current >= operator exit
.83b2	48		pha				pha 								; save current precedence.
.83b3	b1 30		lda ($30),y			lda 	(codePtr),y
.83b5	c8		iny				iny
.83b6	48		pha				pha
.83b7	a5 37		lda $37				lda 	zTemp0+1 					; get operator precedence level
.83b9	e8		inx				inx 								; work out the right hand side.
.83ba	20 93 83	jsr $8393			jsr 	EvaluateExpressionAtPrecedence
.83bd	ca		dex				dex
.83be	68		pla				pla 								; get operator, call the code.
.83bf	20 c8 83	jsr $83c8			jsr 	_EXPRCaller
.83c2	68		pla				pla 								; restore precedence level
.83c3	80 d3		bra $8398			bra 	_EXPRLoop 					; and go round.
.83c5					_EXPRExit:
.83c5	a5 36		lda $36				lda 	zTemp0 						; A = current precedence level.
.83c7	60		rts				rts
.83c8					_EXPRCaller:
.83c8	da		phx				phx 								; save on stack, first thing is to restore it
.83c9	0a		asl a				asl 	a 							; double so can use vectors into X
.83ca	aa		tax				tax
.83cb	7c 23 80	jmp ($8023,x)			jmp 	(VectorSetPunc,x) 			; and go to the code.

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/term/dereference.asm

.83ce					DereferenceTopTwo:
.83ce	e8		inx				inx
.83cf	20 d3 83	jsr $83d3			jsr 	Dereference 				; deref x+1
.83d2	ca		dex				dex  								; falls through to deref x
.83d3					Dereference:
.83d3	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get the status byte
.83d6	29 20		and #$20			and 	#NSBIsReference 			; shift sign bit to carry, reference to bit 7
.83d8	f0 57		beq $8431			beq 	_DRFExit 					; not a reference
.83da	5a		phy				phy
.83db	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy address to dereference into zTemp0
.83de	85 36		sta $36				sta 	zTemp0
.83e0	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.83e3	85 37		sta $37				sta 	zTemp0+1
.83e5	9e 10 06	stz $0610,x			stz 	NSMantissa1,x 				; clear second byte.
.83e8	b2 36		lda ($36)			lda 	(zTemp0) 					; do the first byte
.83ea	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.83ed	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get status byte.
.83f0	29 18		and #$18			and 	#NSBTypeMask 				; what type is it ?
.83f2	c9 10		cmp #$10			cmp 	#NSTString 					; if string, dereference two
.83f4	f0 0f		beq $8405			beq 	_DRFDereferenceTwo
.83f6	c9 08		cmp #$08			cmp 	#NSTFloat 					; if float, do full dereference.
.83f8	f0 39		beq $8433			beq 	_DRFFull
.83fa	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be integer - how many bytes ?
.83fd	29 03		and #$03			and 	#3
.83ff	f0 32		beq $8433			beq 	_DRFFull 					; the whole word
.8401	c9 01		cmp #$01			cmp 	#1 							; is it 10 (e.g. 2 bytes)
.8403	f0 07		beq $840c			beq		_DRFClear23 				; no, one byte, clear 2 & 3 and exit
.8405					_DRFDereferenceTwo:
.8405	a0 01		ldy #$01			ldy 	#1
.8407	b1 36		lda ($36),y			lda 	(zTemp0),y
.8409	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.840c					_DRFClear23:
.840c	9e 18 06	stz $0618,x			stz 	NSMantissa2,x 				; clear upper bytes, only read 1 or 2 bytes
.840f	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.8412	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; make it a value of that type.
.8415	29 18		and #$18			and 	#NSBTypeMask
.8417	9d 00 06	sta $0600,x			sta 	NSStatus,x
.841a	c9 10		cmp #$10			cmp 	#NSTString  				; is it a string
.841c	d0 12		bne $8430			bne 	_DRFNotString
.841e	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; check address is zero
.8421	1d 10 06	ora $0610,x			ora 	NSMantissa1,x
.8424	d0 0a		bne $8430			bne 	_DRFNotString
.8426	a9 32		lda #$32			lda 	#_DRFNullString & $FF 		; if so, return reference to ""
.8428	9d 08 06	sta $0608,x			sta 	NSMantissa0,X
.842b	a9 84		lda #$84			lda 	#_DRFNullString >> 8
.842d	9d 10 06	sta $0610,x			sta 	NSMantissa1,X
.8430					_DRFNotString
.8430	7a		ply				ply 								; restore Y and exit
.8431					_DRFExit:
.8431	60		rts				rts
.8432					_DRFNullString:
>8432	00						.byte 	0
.8433					_DRFFull:
.8433	a0 01		ldy #$01			ldy 	#1 							; get remaining 3 bytes.
.8435	b1 36		lda ($36),y			lda 	(zTemp0),y
.8437	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.843a	c8		iny				iny
.843b	b1 36		lda ($36),y			lda 	(zTemp0),y
.843d	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8440	c8		iny				iny
.8441	b1 36		lda ($36),y			lda 	(zTemp0),y
.8443	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8446	9e 28 06	stz $0628,x			stz 	NSExponent,x 				; clear exponent.
.8449	bd 00 06	lda $0600,x			lda		NSStatus,x 					; see if type is integer
.844c	29 18		and #$18			and 	#NSBTypeMask  				; type information only
.844e	9d 00 06	sta $0600,x			sta 	NSStatus,x 					; update it back.
.8451	f0 06		beq $8459			beq 	_DRFNoExponent
.8453	c8		iny				iny 								; if not, read the exponent as well.
.8454	b1 36		lda ($36),y			lda 	(zTemp0),y
.8456	9d 28 06	sta $0628,x			sta 	NSExponent,x
.8459					_DRFNoExponent:
.8459	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; is the most significant bit set ?
.845c	10 0d		bpl $846b			bpl 	_DRFExit2 					; if not, then exit.
.845e	29 7f		and #$7f			and 	#$7F 						; clear that bit.
.8460	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8463	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; set the sign flag
.8466	09 80		ora #$80			ora 	#NSBIsNegative
.8468	9d 00 06	sta $0600,x			sta 	NSStatus,x
.846b					_DRFExit2:
.846b	7a		ply				ply
.846c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/term/number.asm

=1					ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2					ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
.846d					EncodeNumberStart:
.846d	38		sec				sec
.846e	80 01		bra $8471			bra 	EncodeNumberContinue+1
.8470					EncodeNumberContinue:
.8470	18		clc				clc
.8471	08		php				php 								; save reset.
.8472	c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.8474	f0 0b		beq $8481			beq 	_ENIsOkay
.8476	c9 30		cmp #$30			cmp 	#"0"
.8478	90 04		bcc $847e			bcc 	_ENBadNumber
.847a	c9 3a		cmp #$3a			cmp 	#"9"+1
.847c	90 03		bcc $8481			bcc 	_ENIsOkay
.847e					_ENBadNumber:
.847e	28		plp				plp 								; throw saved reset
.847f					_ENFail:
.847f	18		clc				clc 								; not allowed
.8480	60		rts				rts
.8481					_ENIsOkay:
.8481	28		plp				plp 								; are we restarting
.8482	90 0c		bcc $8490			bcc 	_ENNoRestart
.8484					_ENStartEncode:
.8484	29 0f		and #$0f			and 	#15 						; put digit in mantissa
.8486	20 b5 86	jsr $86b5			jsr 	NSMSetByte
.8489	a9 01		lda #$01			lda 	#ESTA_Low
.848b					_ENExitChange:
.848b	8d 05 07	sta $0705			sta 	EncodeState 				; save new state
.848e	38		sec				sec
.848f	60		rts				rts
.8490					_ENNoRestart:
.8490	48		pha				pha 								; save on stack.
.8491	ad 05 07	lda $0705			lda 	EncodeState 				; get current state
.8494	c9 01		cmp #$01			cmp 	#ESTA_Low
.8496	f0 05		beq $849d			beq  	_ESTALowState
.8498	c9 02		cmp #$02			cmp 	#ESTA_High
.849a	f0 23		beq $84bf			beq 	_ESTAHighState
>849c	db						.byte 	$DB 						; causes a break in the emulator
.849d					_ESTALowState:
.849d	68		pla				pla 								; get value back
.849e	c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.84a0	f0 27		beq $84c9			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.84a2	29 0f		and #$0f			and 	#15 						; make digit
.84a4	85 36		sta $36				sta 	zTemp0 						; save it.
.84a6	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.84a9	0a		asl a				asl 	a
.84aa	0a		asl a				asl 	a
.84ab	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.84ae	0a		asl a				asl 	a
.84af	65 36		adc $36				adc 	zTemp0
.84b1	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.84b4	c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.84b6	90 05		bcc $84bd			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.84b8	a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.84ba	8d 05 07	sta $0705			sta 	EncodeState
.84bd					_ESTANoSwitch:
.84bd	38		sec				sec
.84be	60		rts				rts
.84bf					_ESTAHighState:
.84bf	68		pla				pla 								; get value back
.84c0	c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.84c2	f0 05		beq $84c9			beq 	_ESTASwitchFloat
.84c4	20 ca 84	jsr $84ca			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.84c7	38		sec				sec
.84c8	60		rts				rts
.84c9					_ESTASwitchFloat:
>84c9	db						.byte 	$DB 						; causes a break in the emulator
.84ca					ESTAShiftDigitIntoMantissa:
.84ca	29 0f		and #$0f			and 	#15 						; save digit
.84cc	48		pha				pha
.84cd	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; push mantissa on stack
.84d0	48		pha				pha
.84d1	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.84d4	48		pha				pha
.84d5	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.84d8	48		pha				pha
.84d9	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.84dc	48		pha				pha
.84dd	20 c8 86	jsr $86c8			jsr 	NSMShiftLeft 				; x 2
.84e0	20 c8 86	jsr $86c8			jsr 	NSMShiftLeft 				; x 4
.84e3	18		clc				clc 								; pop mantissa and add
.84e4	68		pla				pla
.84e5	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.84e8	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.84eb	68		pla				pla
.84ec	7d 10 06	adc $0610,x			adc 	NSMantissa1,x
.84ef	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.84f2	68		pla				pla
.84f3	7d 18 06	adc $0618,x			adc 	NSMantissa2,x
.84f6	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.84f9	68		pla				pla
.84fa	7d 20 06	adc $0620,x			adc 	NSMantissa3,x
.84fd	9d 20 06	sta $0620,x			sta 	NSMantissa3,x 				; x 5
.8500	20 c8 86	jsr $86c8			jsr 	NSMShiftLeft 				; x 10
.8503	68		pla				pla 								; add digit
.8504	18		clc				clc
.8505	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.8508	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.850b	90 0d		bcc $851a			bcc 	_ESTASDExit
.850d	fe 10 06	inc $0610,x			inc 	NSMantissa1,x
.8510	d0 08		bne $851a			bne 	_ESTASDExit
.8512	fe 18 06	inc $0618,x			inc 	NSMantissa2,x
.8515	d0 03		bne $851a			bne 	_ESTASDExit
.8517	fe 20 06	inc $0620,x			inc 	NSMantissa3,x
.851a					_ESTASDExit:
.851a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/term/term.asm

.851b					EvaluateTerm:
.851b	b1 30		lda ($30),y			lda 	(codePtr),y
.851d	30 18		bmi $8537			bmi 	_ETCheckUnary 				; unary function ? (text ones)
.851f	c9 40		cmp #$40			cmp 	#$40 						; 40-7F => identifier reference
.8521	b0 6e		bcs $8591			bcs 	_ETVariable
.8523	c9 30		cmp #$30			cmp 	#'0' 						; is it a number
.8525	90 6e		bcc $8595			bcc 	_ETPuncUnary 				; if not it might be a punctuation unary.
.8527	c9 3a		cmp #$3a			cmp 	#'9'+1
.8529	b0 6a		bcs $8595			bcs 	_ETPuncUnary
.852b	20 6d 84	jsr $846d			jsr 	EncodeNumberStart 			; can't fail as it's 0-9 !
.852e					_ETNumber:
.852e	c8		iny				iny 								; keep encoding until we have the numbers
.852f	b1 30		lda ($30),y			lda 	(codePtr),y
.8531	20 70 84	jsr $8470			jsr 	EncodeNumberContinue
.8534	b0 f8		bcs $852e			bcs 	_ETNumber 					; go back if accepted.
.8536	60		rts				rts
.8537					_ETCheckUnary:
.8537	c9 ff		cmp #$ff			cmp 	#KWC_STRING 				; string token
.8539	f0 40		beq $857b			beq 	_ETString
.853b	c9 fe		cmp #$fe			cmp 	#KWC_HEXCONST 				; hex constant.
.853d	f0 11		beq $8550			beq 	_ETHexConstant
.853f	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; check it actually is a unary function
.8541	90 0a		bcc $854d			bcc 	_ETSyntaxError
.8543	c9 9a		cmp #$9a			cmp 	#KWC_LAST_UNARY+1
.8545	b0 06		bcs $854d			bcs 	_ETSyntaxError
.8547	da		phx				phx 								; push X on the stack
.8548	0a		asl a				asl 	a 							; put vector x 2 into X
.8549	aa		tax				tax
.854a	7c a3 80	jmp ($80a3,x)			jmp 	(VectorSet0,x) 				; and do it.
.854d					_ETSyntaxError:
.854d	4c 85 8d	jmp $8d85			jmp 	SyntaxError
.8550					_ETHexConstant:
.8550	c8		iny				iny 								; skip #
.8551	c8		iny				iny 								; skip count
.8552	20 b3 86	jsr $86b3			jsr 	NSMSetZero 					; clear result
.8555					_ETHLoop:
.8555	b1 30		lda ($30),y			lda 	(codePtr),y
.8557	c8		iny				iny 								; and consume
.8558	c9 00		cmp #$00			cmp 	#0 							; exit if zero
.855a	f0 1e		beq $857a			beq 	_ETHExit
.855c	48		pha				pha 								; save on stack.
.855d	20 c8 86	jsr $86c8			jsr 	NSMShiftLeft 				; x 2
.8560	20 c8 86	jsr $86c8			jsr 	NSMShiftLeft 				; x 4
.8563	20 c8 86	jsr $86c8			jsr 	NSMShiftLeft 				; x 8
.8566	20 c8 86	jsr $86c8			jsr 	NSMShiftLeft 				; x 16
.8569	68		pla				pla 								; ASCII
.856a	c9 41		cmp #$41			cmp 	#'A'
.856c	90 02		bcc $8570			bcc 	_ETHNotChar
.856e	e9 07		sbc #$07			sbc 	#7
.8570					_ETHNotChar:
.8570	29 0f		and #$0f			and 	#15 						; digit now
.8572	1d 08 06	ora $0608,x			ora 	NSMantissa0,x 				; put in LS Nibble
.8575	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8578	80 db		bra $8555			bra 	_ETHLoop 					; go round.
.857a					_ETHExit:
.857a	60		rts				rts
.857b					_ETString:
.857b	c8		iny				iny 								; look at length
.857c	b1 30		lda ($30),y			lda 	(codePtr),y
.857e	48		pha				pha
.857f	c8		iny				iny 								; first character
.8580	20 2c 87	jsr $872c			jsr 	MemoryInline 				; put address of string at (codePtr),y on stack
.8583	68		pla				pla 								; restore count and save
.8584	85 36		sta $36				sta 	zTemp0
.8586	98		tya				tya 								; add length to Y to skip it.
.8587	18		clc				clc
.8588	65 36		adc $36				adc 	zTemp0
.858a	a8		tay				tay
.858b	a9 10		lda #$10			lda 	#NSTString 					; mark as string
.858d	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8590	60		rts				rts
.8591					_ETVariable:
>8591	db						.byte 	$DB 						; causes a break in the emulator
.8592	4c ff ff	jmp $ffff			jmp 	$FFFF
.8595					_ETPuncUnary:
.8595	c8		iny				iny 								; consume the unary character
.8596	c9 2d		cmp #$2d			cmp 	#KWD_MINUS 					; unary minus
.8598	f0 31		beq $85cb			beq 	_ETUnaryNegate
.859a	c9 10		cmp #$10			cmp 	#KWD_AT 					; @ reference -> constant
.859c	f0 3d		beq $85db			beq 	_ETDereference
.859e	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; parenthesis
.85a0	f0 58		beq $85fa			beq 	_ETParenthesis
.85a2	c9 24		cmp #$24			cmp 	#KWD_DOLLAR
.85a4	f0 43		beq $85e9			beq 	_ETStringReference
.85a6	64 36		stz $36				stz 	zTemp0 						; zTemp0 is the indirection level.
.85a8	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; byte indirection (0) ?
.85aa	f0 06		beq $85b2			beq 	_ETIndirection
.85ac	e6 36		inc $36				inc 	zTemp0
.85ae	c9 21		cmp #$21			cmp 	#KWD_PLING					; word indirection (1) \
.85b0	d0 9b		bne $854d			bne 	_ETSyntaxError
.85b2					_ETIndirection:
.85b2	a5 36		lda $36				lda 	zTemp0 						; push indirection amount (0-1) => (1-2) on the stack
.85b4	1a		inc a				inc 	a
.85b5	48		pha				pha
.85b6	20 1b 85	jsr $851b			jsr 	EvaluateTerm				; evaluate the term
.85b9	20 d3 83	jsr $83d3			jsr 	Dereference 				; dereference it.
.85bc	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a +ve integer.
.85bf	d0 07		bne $85c8			bne 	_ETTypeMismatch
.85c1	68		pla				pla 								; indirection 1-2
.85c2	09 20		ora #$20			ora 	#NSBIsReference 			; make it a reference.
.85c4	9d 00 06	sta $0600,x			sta 	NSStatus,x
.85c7	60		rts				rts
.85c8					_ETTypeMismatch:
.85c8	4c 8f 8d	jmp $8d8f			jmp 	TypeError
.85cb					_ETUnaryNegate:
.85cb	20 1b 85	jsr $851b			jsr 	EvaluateTerm				; evaluate the term
.85ce	20 d3 83	jsr $83d3			jsr 	Dereference 				; dereference it.
.85d1	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a number
.85d4	29 10		and #$10			and 	#NSTString
.85d6	d0 f0		bne $85c8			bne 	_ETTypeMismatch
.85d8	4c 5f 86	jmp $865f			jmp 	NSMNegate  					; just toggles the sign bit.
.85db					_ETDereference:
.85db	20 1b 85	jsr $851b			jsr 	EvaluateTerm				; evaluate the term
.85de	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a reference
.85e1	29 20		and #$20			and 	#NSBIsReference
.85e3	f0 e3		beq $85c8			beq 	_ETTypeMismatch
.85e5	9e 00 06	stz $0600,x			stz 	NSStatus,x 					; make it an integer address
.85e8	60		rts				rts
.85e9					_ETStringReference:
.85e9	20 1b 85	jsr $851b			jsr 	EvaluateTerm				; evaluate the term
.85ec	20 d3 83	jsr $83d3			jsr 	Dereference 				; dereference it.
.85ef	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a +ve integer.
.85f2	d0 d4		bne $85c8			bne 	_ETTypeMismatch
.85f4	a9 10		lda #$10			lda 	#NSTString 					; make it a string
.85f6	9d 00 06	sta $0600,x			sta 	NSStatus,x
.85f9	60		rts				rts
.85fa					_ETParenthesis:
.85fa	20 91 83	jsr $8391			jsr 	EvaluateExpression 			; evaluate here, from lowest precedence
.85fd	20 bd 8b	jsr $8bbd			jsr 	CheckRightBracket 			; check for )
.8600	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/utility/exprhelper.asm

.8601					EvaluateValue:
.8601	48		pha				pha
.8602	20 8f 83	jsr $838f			jsr		EvaluateExpressionAt0 		; expression
.8605	20 d3 83	jsr $83d3			jsr 	Dereference					; derefernce it
.8608	68		pla				pla
.8609	60		rts				rts
.860a					EvaluateNumber:
.860a	20 01 86	jsr $8601			jsr 	EvaluateValue 				; get a value
.860d	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if string.
.8610	29 10		and #$10			and 	#NSBIsString
.8612	d0 16		bne $862a			bne 	HelperTypeError
.8614	60		rts				rts
.8615					EvaluateString:
.8615	20 01 86	jsr $8601			jsr 	EvaluateValue 				; get a value
.8618	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if string.
.861b	29 10		and #$10			and 	#NSBIsString
.861d	f0 0b		beq $862a			beq 	HelperTypeError
.861f					CopyAddressToTemp0:
.861f	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy address -> zTemp0
.8622	85 36		sta $36				sta 	zTemp0
.8624	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8627	85 37		sta $37				sta 	zTemp0+1
.8629	60		rts				rts
.862a					HelperTypeError:
.862a	4c 8f 8d	jmp $8d8f			jmp 	TypeError
.862d					EvaluateInteger:
.862d	20 0a 86	jsr $860a			jsr 	EvaluateNumber
.8630	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check exponent is zero
.8633	d0 0a		bne $863f			bne 	HelperValueError 			; if not, it's a float.
.8635	60		rts				rts
.8636					EvaluateUnsignedInteger:
.8636	20 2d 86	jsr $862d			jsr 	EvaluateInteger 			; check integer is +ve
.8639	bd 00 06	lda $0600,x			lda 	NSStatus,x
.863c	30 01		bmi $863f			bmi 	HelperValueError
.863e	60		rts				rts
.863f					HelperValueError:
.863f	4c 94 8d	jmp $8d94			jmp 	ArgumentError
.8642					Evaluate16BitInteger:
.8642	20 36 86	jsr $8636			jsr	 	EvaluateUnsignedInteger		; get integer
.8645	bd 20 06	lda $0620,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.8648	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.864b	d0 f2		bne $863f			bne 	HelperValueError
.864d	60		rts				rts
.864e					Evaluate8BitInteger:
.864e	20 36 86	jsr $8636			jsr	 	EvaluateUnsignedInteger 	; get an integer
.8651	d0 ec		bne $863f			bne 	HelperValueError
.8653	bd 20 06	lda $0620,x			lda 	NSMantissa3,x	 			; bytes 1, 2 & 3 must be zero
.8656	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.8659	1d 10 06	ora $0610,x			ora 	NSMantissa1,x
.865c	d0 e1		bne $863f			bne 	HelperValueError
.865e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/utility/utility.asm

.865f					NSMNegate:
.865f	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8662	49 80		eor #$80			eor 	#NSBIsNegative
.8664	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8667	60		rts				rts
.8668					NSMNegateMantissa:
.8668	38		sec				sec
.8669	a9 00		lda #$00			lda 	#0
.866b	fd 08 06	sbc $0608,x			sbc 	NSMantissa0,x
.866e	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8671	a9 00		lda #$00			lda 	#0
.8673	fd 10 06	sbc $0610,x			sbc 	NSMantissa1,x
.8676	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8679	a9 00		lda #$00			lda 	#0
.867b	fd 18 06	sbc $0618,x			sbc 	NSMantissa2,x
.867e	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8681	a9 00		lda #$00			lda 	#0
.8683	fd 20 06	sbc $0620,x			sbc 	NSMantissa3,x
.8686	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8689	60		rts				rts
.868a					NSMShiftUpTwo:
.868a	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.868d	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.8690	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8693	9d 12 06	sta $0612,x			sta 	NSMantissa1+2,x
.8696	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.8699	9d 1a 06	sta $061a,x			sta 	NSMantissa2+2,x
.869c	bd 20 06	lda $0620,x			lda 	NSMantissa3,x
.869f	9d 22 06	sta $0622,x			sta 	NSMantissa3+2,x
.86a2	bd 28 06	lda $0628,x			lda 	NSExponent,x
.86a5	9d 2a 06	sta $062a,x			sta 	NSExponent+2,x
.86a8	bd 00 06	lda $0600,x			lda 	NSStatus,x
.86ab	9d 02 06	sta $0602,x			sta 	NSStatus+2,x
.86ae	60		rts				rts
.86af					NSMSetZeroMantissaOnly:
.86af	a9 00		lda #$00			lda 	#0
.86b1	80 08		bra $86bb			bra 	NSMSetMantissa
.86b3					NSMSetZero:
.86b3	a9 00		lda #$00			lda 	#0
.86b5					NSMSetByte:
.86b5	9e 28 06	stz $0628,x			stz 	NSExponent,x 				; zero exponent, as integer.
.86b8	9e 00 06	stz $0600,x			stz 	NSStatus,x 					; status zero (integer)
.86bb					NSMSetMantissa:
.86bb	9d 08 06	sta $0608,x			sta 	NSMantissa0,x 				; mantissa
.86be	9e 10 06	stz $0610,x			stz 	NSMantissa1,x
.86c1	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.86c4	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.86c7	60		rts				rts
.86c8					NSMShiftLeft:
.86c8	18		clc				clc
.86c9					NSMRotateLeft:
.86c9	3e 08 06	rol $0608,x			rol 	NSMantissa0,x
.86cc	3e 10 06	rol $0610,x			rol		NSMantissa1,x
.86cf	3e 18 06	rol $0618,x			rol		NSMantissa2,x
.86d2	3e 20 06	rol $0620,x			rol		NSMantissa3,x
.86d5	60		rts				rts
.86d6					NSMShiftRight:
.86d6	5e 20 06	lsr $0620,x			lsr 	NSMantissa3,x
.86d9	7e 18 06	ror $0618,x			ror		NSMantissa2,x
.86dc	7e 10 06	ror $0610,x			ror		NSMantissa1,x
.86df	7e 08 06	ror $0608,x			ror		NSMantissa0,x
.86e2	60		rts				rts
.86e3					NSMIsZero:
.86e3	bd 20 06	lda $0620,x			lda 	NSMantissa3,x
.86e6	1d 18 06	ora $0618,x			ora		NSMantissa2,x
.86e9	1d 10 06	ora $0610,x			ora		NSMantissa1,x
.86ec	1d 08 06	ora $0608,x			ora		NSMantissa0,x
.86ef	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./generated/errors.asm

.8d85					SyntaxError:
.8d85	a9 02		lda #$02		lda	#2
.8d87	4c 1f 80	jmp $801f		jmp	ErrorHandler
.8d8a					RangeError:
.8d8a	a9 04		lda #$04		lda	#4
.8d8c	4c 1f 80	jmp $801f		jmp	ErrorHandler
.8d8f					TypeError:
.8d8f	a9 05		lda #$05		lda	#5
.8d91	4c 1f 80	jmp $801f		jmp	ErrorHandler
.8d94					ArgumentError:
.8d94	a9 07		lda #$07		lda	#7
.8d96	4c 1f 80	jmp $801f		jmp	ErrorHandler
.8d99					NotDoneError:
.8d99	a9 0c		lda #$0c		lda	#12
.8d9b	4c 1f 80	jmp $801f		jmp	ErrorHandler
.8d9e					ErrorText:
>8d9e	42 72 65 61 6b 00			.text	"Break",0
>8da4	53 79 6e 74 61 78 20 65			.text	"Syntax error",0
>8dac	72 72 6f 72 00
>8db1	44 69 76 69 73 69 6f 6e			.text	"Division by zero",0
>8db9	20 62 79 20 7a 65 72 6f 00
>8dc2	4f 75 74 20 6f 66 20 52			.text	"Out of Range",0
>8dca	61 6e 67 65 00
>8dcf	54 79 70 65 20 6d 69 73			.text	"Type mismatch",0
>8dd7	6d 61 74 63 68 00
>8ddd	4f 75 74 20 6f 66 20 6d			.text	"Out of memory",0
>8de5	65 6d 6f 72 79 00
>8deb	49 6c 6c 65 67 61 6c 20			.text	"Illegal argument",0
>8df3	61 72 67 75 6d 65 6e 74 00
>8dfc	53 74 6f 70 00				.text	"Stop",0
>8e01	53 74 72 69 6e 67 20 74			.text	"String too long",0
>8e09	6f 6f 20 6c 6f 6e 67 00
>8e11	41 73 73 65 72 74 69 6f			.text	"Assertion failed",0
>8e19	6e 20 66 61 69 6c 65 64 00
>8e22	4f 75 74 20 6f 66 20 64			.text	"Out of data",0
>8e2a	61 74 61 00
>8e2e	55 6e 69 6d 70 6c 65 6d			.text	"Unimplemented",0
>8e36	65 6e 74 65 64 00

;******  Return to file: _basic.asm


;******  Processing file: ./memory.flat/memory.asm

.86f0					MemoryNew:
.86f0	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.86f2	85 30		sta $30				sta 	codePtr
.86f4	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.86f6	85 31		sta $31				sta 	codePtr+1
.86f8	a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.86fa	92 30		sta ($30)			sta 	(codePtr)
.86fc	60		rts				rts
.86fd					MemoryAppend:
.86fd	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.86ff	85 30		sta $30				sta 	codePtr
.8701	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.8703	85 31		sta $31				sta 	codePtr+1
.8705					_MAFindEnd:
.8705	b2 30		lda ($30)			lda 	(codePtr)
.8707	f0 0d		beq $8716			beq 	_MAFoundEnd
.8709	18		clc				clc
.870a	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.870c	65 30		adc $30				adc 	codePtr
.870e	85 30		sta $30				sta 	codePtr
.8710	90 02		bcc $8714			bcc 	_CREExit
.8712	e6 31		inc $31				inc 	codePtr+1
.8714					_CREExit:
.8714	80 ef		bra $8705			bra 	_MAFindEnd
.8716					_MAFoundEnd:
.8716	ac 06 07	ldy $0706			ldy 	tokenOffset 				; bytes to copy
.8719	c0 04		cpy #$04			cpy 	#4 							; blank line
.871b	f0 0e		beq $872b			beq 	_MANoLine
.871d	a9 00		lda #$00			lda 	#0 							; end of program
.871f	91 30		sta ($30),y			sta 	(codePtr),y
.8721					_MACopy:
.8721	88		dey				dey
.8722	b9 06 07	lda $0706,y			lda 	tokenOffset,y
.8725	91 30		sta ($30),y			sta 	(codePtr),y
.8727	c0 00		cpy #$00			cpy 	#0
.8729	d0 f6		bne $8721			bne 	_MACopy
.872b					_MANoLine:
.872b	60		rts				rts
.872c					MemoryInline:
.872c	98		tya				tya 								; put address into stack,x
.872d	18		clc				clc
.872e	65 30		adc $30				adc 	codePtr
.8730	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8733	a5 31		lda $31				lda 	codePtr+1
.8735	69 00		adc #$00			adc 	#0
.8737	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.873a	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.873d	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.8740	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./memory.flat/variable.asm

.8741					VariableOpen:
.8741	60		rts				rts
.8742					VariableClose:
.8742	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./tokeniser/backload.asm

.8743					BackloadProgram:
.8743	a2 ff		ldx #$ff			ldx 	#$FF
.8745	ad fa ff	lda $fffa			lda 	$FFFA 						; read first byte
.8748	30 1e		bmi $8768			bmi 	_BPExit
.874a					_BPCopy:
.874a	e8		inx				inx  								; copy byte in
.874b	9d 06 08	sta $0806,x			sta 	lineBuffer,x
.874e	9e 07 08	stz $0807,x			stz 	lineBuffer+1,x
.8751	ad fa ff	lda $fffa			lda 	$FFFA 						; read next byte
.8754	30 0a		bmi $8760			bmi 	_BPEndLine 					; -ve = EOL
.8756	c9 09		cmp #$09			cmp 	#9 							; handle TAB
.8758	d0 02		bne $875c			bne 	_BPNotTab
.875a	a9 20		lda #$20			lda 	#' '
.875c					_BPNotTab:
.875c	c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.875e	b0 ea		bcs $874a			bcs 	_BPCopy
.8760					_BPEndLine:
.8760	20 38 89	jsr $8938			jsr 	TokeniseLine 				; tokenise the line.
.8763	20 fd 86	jsr $86fd			jsr 	MemoryAppend 				; append to current program
.8766	80 db		bra $8743			bra 	BackloadProgram
.8768					_BPExit:
.8768	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./tokeniser/searchtokens.asm

.8769					TokeniseSearchTable:
.8769	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token.
.876b	85 36		sta $36				sta 	zTemp0
.876d	a0 00		ldy #$00			ldy 	#0
.876f	a9 80		lda #$80			lda 	#$80 						; token #
.8771	85 38		sta $38				sta 	zTemp1
.8773					_TSTLoop:
.8773	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.8775	30 49		bmi $87c0			bmi 	_TSTFail 					; -ve = end of table
.8777	f0 2e		beq $87a7			beq 	_TSTNext 					; zero, check next it's a dummy
.8779	c8		iny				iny 								; get the hash
.877a	b1 36		lda ($36),y			lda 	(zTemp0),y
.877c	88		dey				dey
.877d	cd 03 07	cmp $0703			cmp 	identHash 					; check they match, if not go to next
.8780	d0 25		bne $87a7			bne 	_TSTNext
.8782	ad 02 07	lda $0702			lda 	identTypeEnd 				; length of identifier
.8785	38		sec				sec
.8786	ed 00 07	sbc $0700			sbc 	identStart
.8789	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; no match, then return.
.878b	d0 1a		bne $87a7			bne 	_TSTNext
.878d	5a		phy				phy 								; save Y , we might fail
.878e	c8		iny				iny 								; point to text
.878f	c8		iny				iny
.8790	ae 00 07	ldx $0700			ldx 	identStart 					; offset in line buffer in X
.8793					_TSTCompareName:
.8793	bd 06 08	lda $0806,x			lda 	lineBuffer,x 				; compare text.
.8796	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.8798	d0 0c		bne $87a6			bne 	_TSTNextPullY 				; fail, pullY and do next
.879a	e8		inx				inx
.879b	c8		iny				iny
.879c	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; complete match.
.879f	d0 f2		bne $8793			bne 	_TSTCompareName
.87a1	7a		ply				ply 								; throw Y
.87a2	a5 38		lda $38				lda 	zTemp1 						; get token #
.87a4	38		sec				sec 								; return with CS = passed.
.87a5	60		rts				rts
.87a6					_TSTNextPullY:
.87a6	7a		ply				ply 								; restore current, fall through.
.87a7					_TSTNext:
.87a7	e6 38		inc $38				inc 	zTemp1 						; token counter
.87a9	98		tya				tya
.87aa	18		clc				clc
.87ab	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.87ad	1a		inc a				inc 	a 							; +1
.87ae	1a		inc a				inc 	a 							; +2
.87af	a8		tay				tay
.87b0	10 c1		bpl $8773			bpl 	_TSTLoop 					; if Y < $80 loop back
.87b2	98		tya				tya 								; add Y to zTemp0 and reset Y
.87b3	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.87b5	18		clc				clc  								; but have tables > 255 bytes
.87b6	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.87b8	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.87ba	90 b7		bcc $8773			bcc 	_TSTLoop
.87bc	e6 37		inc $37				inc 	zTemp0+1
.87be	80 b3		bra $8773			bra 	_TSTLoop
.87c0					_TSTFail:
.87c0	18		clc				clc
.87c1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./tokeniser/tokenise.asm


;******  Processing file: ./tokeniser/../generated/kwdtext.dat

.87c2					KeywordSet0:
>87c2	00 65					.text	0,$65,""               ; $80 !0:EOF
>87c4	00 58					.text	0,$58,""               ; $81 !1:SH1
>87c6	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>87c8	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $83 ABS(
>87ce	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $84 ALLOC(
>87d6	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $85 ASC(
>87dc	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $86 CHR$(
>87e3	04 f4 44 45 43 28			.text	4,$f4,"DEC("           ; $87 DEC(
>87e9	05 6b 46 41 4c 53 45			.text	5,$6b,"FALSE"          ; $88 FALSE
>87f0	09 4a 47 45 54 44 41 54			.text	9,$4a,"GETDATE$("      ; $89 GETDATE$(
>87f8	45 24 28
>87fb	09 5b 47 45 54 54 49 4d			.text	9,$5b,"GETTIME$("      ; $8a GETTIME$(
>8803	45 24 28
>8806	05 31 48 45 58 24 28			.text	5,$31,"HEX$("          ; $8b HEX$(
>880d	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $8c INT(
>8813	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $8d ISVAL(
>881b	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $8e LEFT$(
>8823	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $8f LEN(
>8829	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $90 MID$(
>8830	03 f1 4e 4f 54				.text	3,$f1,"NOT"            ; $91 NOT
>8835	04 1d 50 41 47 45			.text	4,$1d,"PAGE"           ; $92 PAGE
>883b	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $93 RIGHT$(
>8843	28
>8844	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $94 RND(
>884a	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $95 SGN(
>8850	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $96 SPC(
>8856	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $97 STR$(
>885d	04 40 54 52 55 45			.text	4,$40,"TRUE"           ; $98 TRUE
>8863	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $99 VAL(
>8869	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $9a FOR
>886e	02 8f 49 46				.text	2,$8f,"IF"             ; $9b IF
>8872	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $9c PROC
>8878	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $9d REPEAT
>8880	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $9e WHILE
>8887	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $9f ENDIF
>888e	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $a0 ENDPROC
>8896	43
>8897	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $a1 NEXT
>889d	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $a2 UNTIL
>88a4	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $a3 WEND
>88aa	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $a4 ASSERT
>88b2	04 1c 43 41 4c 4c			.text	4,$1c,"CALL"           ; $a5 CALL
>88b8	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $a6 CLS
>88bd	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $a7 DATA
>88c3	03 da 44 49 4d				.text	3,$da,"DIM"            ; $a8 DIM
>88c8	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $a9 GOSUB
>88cf	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $aa GOTO
>88d5	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $ab LET
>88da	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $ac PRINT
>88e1	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $ad READ
>88e7	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $ae REM
>88ec	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $af RETURN
>88f4	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $b0 THEN
>88fa	02 a3 54 4f				.text	2,$a3,"TO"             ; $b1 TO
>88fe	ff					.text	$FF
.88ff					KeywordSet1:
>88ff	00 65					.text	0,$65,""               ; $80 !0:EOF
>8901	00 58					.text	0,$58,""               ; $81 !1:SH1
>8903	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>8905	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $83 CLEAR
>890c	03 d7 45 4e 44				.text	3,$d7,"END"            ; $84 END
>8911	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $85 LIST
>8917	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $86 NEW
>891c	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $87 RESTORE
>8924	45
>8925	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $88 RUN
>892a	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $89 STOP
>8930	ff					.text	$FF
.8931					KeywordSet2:
>8931	00 65					.text	0,$65,""               ; $80 !0:EOF
>8933	00 58					.text	0,$58,""               ; $81 !1:SH1
>8935	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>8937	ff					.text	$FF

;******  Return to file: ./tokeniser/tokenise.asm

.8938					TokeniseLine:
.8938	20 c0 8a	jsr $8ac0			jsr 	FixLineBufferCase 			; fix line case
.893b	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.893d	8d 06 07	sta $0706			sta 	tokenOffset
.8940	9c 07 07	stz $0707			stz 	tokenLineNumber
.8943	9c 08 07	stz $0708			stz 	tokenLineNumber+1
.8946	a2 ff		ldx #$ff			ldx 	#$FF
.8948					_TKFindFirst:
.8948	e8		inx				inx
.8949	bd 06 08	lda $0806,x			lda 	lineBuffer,x
.894c	f0 79		beq $89c7			beq 	_TKExit
.894e	c9 20		cmp #$20			cmp 	#' '
.8950	90 f6		bcc $8948			bcc 	_TKFindFirst
.8952	c9 30		cmp #$30			cmp 	#'0'
.8954	90 07		bcc $895d			bcc 	_TKNoLineNumber
.8956	c9 3a		cmp #$3a			cmp 	#'9'+1
.8958	b0 03		bcs $895d			bcs 	_TKNoLineNumber
.895a	20 ea 8a	jsr $8aea			jsr 	TokeniseExtractLineNumber
.895d					_TKNoLineNumber:
.895d					_TKTokeniseLoop:
.895d	bd 06 08	lda $0806,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.8960	f0 65		beq $89c7			beq 	_TKExit
.8962	e8		inx				inx
.8963	c9 20		cmp #$20			cmp 	#' '
.8965	f0 f6		beq $895d			beq 	_TKTokeniseLoop 			; keep looping if space found.
.8967	ca		dex				dex 								; undo last get, A contains character, X is position.
.8968	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.896a	f0 61		beq $89cd			beq 	_TKTokeniseIdentifier
.896c	c9 41		cmp #$41			cmp 	#'A'
.896e	90 04		bcc $8974			bcc 	_TKTokenisePunctuation
.8970	c9 5b		cmp #$5b			cmp 	#'Z'+1
.8972	90 59		bcc $89cd			bcc 	_TKTokeniseIdentifier
.8974					_TKTokenisePunctuation:
.8974	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.8976	f0 27		beq $899f			beq 	_TKString
.8978	c9 23		cmp #$23			cmp 	#'#'						; hexadecimal constant (# only appears at end of identifiers)
.897a	f0 28		beq $89a4			beq 	_TKHexConstant
.897c	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers.
.897e	f0 29		beq $89a9			beq 	_TKCheckDouble
.8980	c9 3e		cmp #$3e			cmp 	#'>'
.8982	f0 25		beq $89a9			beq 	_TKCheckDouble
.8984					_TKStandardPunctuation:
.8984	bd 06 08	lda $0806,x			lda 	lineBuffer,x 				; get it back.
.8987	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.8989	90 0e		bcc $8999			bcc 	_TKNoShift
.898b	48		pha				pha 								; save
.898c	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.898e	85 36		sta $36				sta 	zTemp0
.8990	68		pla				pla
.8991	29 20		and #$20			and 	#32 						; bit 5
.8993	4a		lsr a				lsr 	a 							; shift into bit 3
.8994	4a		lsr a				lsr 	a
.8995	05 36		ora $36				ora 	zTemp0
.8997	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.8999					_TKNoShift:
.8999	20 2f 8b	jsr $8b2f			jsr 	TokeniseWriteByte 			; write the punctuation character
.899c	e8		inx				inx 								; consume the character
.899d	80 be		bra $895d			bra 	_TKTokeniseLoop 			; and loop round again.
.899f					_TKString:
.899f	20 4f 8a	jsr $8a4f			jsr 	TokeniseString
.89a2	80 b9		bra $895d			bra 	_TKTokeniseLoop
.89a4					_TKHexConstant:
.89a4	20 8a 8a	jsr $8a8a			jsr 	TokeniseHexConstant
.89a7	80 b4		bra $895d			bra 	_TKTokeniseLoop
.89a9					_TKCheckDouble:
.89a9	bd 07 08	lda $0807,x			lda 	lineBuffer+1,x 				; get next character
.89ac	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.89ae	90 d4		bcc $8984			bcc 	_TKStandardPunctuation
.89b0	c9 3f		cmp #$3f			cmp 	#'>'+1
.89b2	b0 d0		bcs $8984			bcs 	_TKStandardPunctuation
.89b4	bd 06 08	lda $0806,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.89b7	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.89b9	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.89ba	7d 07 08	adc $0807,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.89bd	38		sec				sec
.89be	e9 3c		sbc #$3c			sbc 	#'<'
.89c0	20 2f 8b	jsr $8b2f			jsr 	TokeniseWriteByte 			; this is in the range 0-7
.89c3	e8		inx				inx 								; consume both
.89c4	e8		inx				inx
.89c5	80 96		bra $895d			bra 	_TKTokeniseLoop
.89c7	a9 80		lda #$80	_TKExit:lda 	#KWC_EOL 					; write end of line byte
.89c9	20 2f 8b	jsr $8b2f			jsr 	TokeniseWriteByte
.89cc	60		rts				rts
.89cd					_TKTokeniseIdentifier:
.89cd	8e 00 07	stx $0700			stx 	identStart 					; save start
.89d0	9c 04 07	stz $0704			stz 	identTypeByte 				; zero the type byte
.89d3					_TKCheckLoop:
.89d3	e8		inx				inx 								; look at next, we know first is identifier.
.89d4	bd 06 08	lda $0806,x			lda  	lineBuffer,x
.89d7	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.89d9	f0 f8		beq $89d3			beq 	_TKCheckLoop
.89db	c9 30		cmp #$30			cmp	 	#"0"
.89dd	90 0c		bcc $89eb			bcc 	_TKEndIdentifier
.89df	c9 3a		cmp #$3a			cmp 	#"9"+1
.89e1	90 f0		bcc $89d3			bcc 	_TKCheckLoop
.89e3	c9 41		cmp #$41			cmp	 	#"A"
.89e5	90 04		bcc $89eb			bcc 	_TKEndIdentifier
.89e7	c9 5b		cmp #$5b			cmp 	#"Z"+1
.89e9	90 e8		bcc $89d3			bcc 	_TKCheckLoop
.89eb					_TKEndIdentifier:
.89eb	8e 01 07	stx $0701			stx 	identTypeStart 				; save start of type text (if any !)
.89ee	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.89f0	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.89f2	f0 06		beq $89fa			beq 	_TKHasTypeCharacter
.89f4	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.89f6	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.89f8	d0 07		bne $8a01			bne 	_TKNoTypeCharacter
.89fa					_TKHasTypeCharacter:
.89fa	8c 04 07	sty $0704			sty 	identTypeByte 				; has # or $, save the type
.89fd	e8		inx				inx 								; read next
.89fe	bd 06 08	lda $0806,x			lda 	lineBuffer,x
.8a01					_TKNoTypeCharacter:
.8a01	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.8a03	d0 09		bne $8a0e			bne 	_TKNoArray
.8a05	e8		inx				inx 								; skip the (
.8a06	ad 04 07	lda $0704			lda 	identTypeByte 				; set bit 2 (e.g. array)
.8a09	09 04		ora #$04			ora 	#$04
.8a0b	8d 04 07	sta $0704			sta 	identTypeByte
.8a0e					_TKNoArray:
.8a0e	8e 02 07	stx $0702			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.8a11	20 ab 8a	jsr $8aab			jsr 	TokeniseCalculateHash 		; calculate the has for those tokens
.8a14	a0 87		ldy #$87			ldy 	#(KeywordSet0) >> 8
.8a16	a9 c2		lda #$c2			lda 	#(KeywordSet0) & $FF
.8a18	20 69 87	jsr $8769			jsr 	TokeniseSearchTable
.8a1b	a2 00		ldx #$00			ldx 	#0
.8a1d	b0 1f		bcs $8a3e			bcs 	_TKFoundToken
.8a1f	a0 88		ldy #$88			ldy 	#(KeywordSet1) >> 8
.8a21	a9 ff		lda #$ff			lda 	#(KeywordSet1) & $FF
.8a23	20 69 87	jsr $8769			jsr 	TokeniseSearchTable
.8a26	a2 81		ldx #$81			ldx 	#$81
.8a28	b0 14		bcs $8a3e			bcs 	_TKFoundToken
.8a2a	a0 88		ldy #$88			ldy 	#(KeywordSet1) >> 8
.8a2c	a9 ff		lda #$ff			lda 	#(KeywordSet1) & $FF
.8a2e	20 69 87	jsr $8769			jsr 	TokeniseSearchTable
.8a31	a2 82		ldx #$82			ldx 	#$82
.8a33	b0 09		bcs $8a3e			bcs 	_TKFoundToken
.8a35	20 3b 8b	jsr $8b3b			jsr 	CheckCreateVariableRecord 	; failed all, it's a variable, create record if does not exist.
.8a38	ae 02 07	ldx $0702			ldx 	identTypeEnd 				; X points to following byte
.8a3b	4c 5d 89	jmp $895d			jmp 	_TKTokeniseLoop 			; and go round again.
.8a3e					_TKFoundToken:
.8a3e	48		pha				pha 								; save token
.8a3f	8a		txa				txa 								; shift in X, is there one ?
.8a40	f0 03		beq $8a45			beq 	_TKNoTShift
.8a42	20 2f 8b	jsr $8b2f			jsr 	TokeniseWriteByte 			; if so, write it out
.8a45					_TKNoTShift:
.8a45	68		pla				pla 								; restore and write token
.8a46	20 2f 8b	jsr $8b2f			jsr 	TokeniseWriteByte
.8a49	ae 02 07	ldx $0702			ldx 	identTypeEnd 				; X points to following byte
.8a4c	4c 5d 89	jmp $895d			jmp 	_TKTokeniseLoop 			; and go round again.
.8a4f					TokeniseString:
.8a4f	a9 ff		lda #$ff			lda 	#KWC_STRING 				; string token.
.8a51	20 2f 8b	jsr $8b2f			jsr 	TokeniseWriteByte
.8a54	e8		inx				inx									; start of quoted string.
.8a55	da		phx				phx 								; push start of string on top
.8a56	ca		dex				dex
.8a57					_TSFindEnd:
.8a57	e8		inx				inx
.8a58	bd 06 08	lda $0806,x			lda 	lineBuffer,x 				; next character
.8a5b	f0 04		beq $8a61			beq 	_TSEndOfString
.8a5d	c9 22		cmp #$22			cmp 	#'"'
.8a5f	d0 f6		bne $8a57			bne 	_TSFindEnd
.8a61					_TSEndOfString:
.8a61	7a		ply				ply  								; so now Y is first character, X is character after end.
.8a62	48		pha				pha 								; save terminating character
.8a63	20 6b 8a	jsr $8a6b			jsr 	TOWriteBlockXY 				; write X to Y as a data block
.8a66	68		pla				pla 								; terminating character
.8a67	f0 01		beq $8a6a			beq 	_TSNotQuote					; if it wasn't EOS skip it
.8a69	e8		inx				inx
.8a6a					_TSNotQuote:
.8a6a	60		rts				rts
.8a6b					TOWriteBlockXY:
.8a6b	86 36		stx $36				stx 	zTemp0 						; write end character
.8a6d	98		tya				tya
.8a6e	49 ff		eor #$ff			eor 	#$FF
.8a70	38		sec				sec
.8a71	65 36		adc $36				adc 	zTemp0
.8a73	1a		inc a				inc 	a 							; one extra for NULL
.8a74	20 2f 8b	jsr $8b2f			jsr 	TokeniseWriteByte
.8a77					_TOBlockLoop:
.8a77	c4 36		cpy $36				cpy 	zTemp0
.8a79	f0 09		beq $8a84			beq 	_TOBlockExit
.8a7b	b9 06 08	lda $0806,y			lda 	lineBuffer,y
.8a7e	20 2f 8b	jsr $8b2f			jsr 	TokeniseWriteByte
.8a81	c8		iny				iny
.8a82	80 f3		bra $8a77			bra 	_TOBlockLoop
.8a84					_TOBlockExit:
.8a84	a9 00		lda #$00			lda 	#0
.8a86	20 2f 8b	jsr $8b2f			jsr 	TokeniseWriteByte
.8a89	60		rts				rts
.8a8a					TokeniseHexConstant:
.8a8a	a9 fe		lda #$fe			lda 	#KWC_HEXCONST 				; hex constant token.
.8a8c	20 2f 8b	jsr $8b2f			jsr 	TokeniseWriteByte
.8a8f	e8		inx				inx									; start of quoted string.
.8a90	da		phx				phx 								; push start of constant on top
.8a91	ca		dex				dex
.8a92					_THFindLoop:
.8a92	e8		inx				inx
.8a93	bd 06 08	lda $0806,x			lda 	lineBuffer,x
.8a96	c9 30		cmp #$30			cmp 	#"0"
.8a98	90 0c		bcc $8aa6			bcc 	_THFoundEnd
.8a9a	c9 3a		cmp #$3a			cmp 	#"9"+1
.8a9c	90 f4		bcc $8a92			bcc 	_THFindLoop
.8a9e	c9 41		cmp #$41			cmp 	#"A"
.8aa0	90 04		bcc $8aa6			bcc 	_THFoundEnd
.8aa2	c9 47		cmp #$47			cmp 	#"F"+1
.8aa4	90 ec		bcc $8a92			bcc 	_THFindLoop
.8aa6					_THFoundEnd:
.8aa6	7a		ply				ply 								; restore start
.8aa7	20 6b 8a	jsr $8a6b			jsr 	TOWriteBlockXY 				; output the block
.8aaa	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./tokeniser/utility.asm

.8aab					TokeniseCalculateHash:
.8aab	da		phx				phx
.8aac	ae 00 07	ldx $0700			ldx 	identStart 					; needs to be same as in tokens.py - simple sum
.8aaf	a9 00		lda #$00			lda 	#0
.8ab1					_TCHLoop:
.8ab1	18		clc				clc
.8ab2	7d 06 08	adc $0806,x			adc 	lineBuffer,x
.8ab5	e8		inx				inx
.8ab6	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.8ab9	d0 f6		bne $8ab1			bne 	_TCHLoop
.8abb	8d 03 07	sta $0703			sta 	identHash 					; save the hash
.8abe	fa		plx				plx
.8abf	60		rts				rts
.8ac0					FixLineBufferCase:
.8ac0	a2 00		ldx #$00			ldx 	#0
.8ac2					_FLBCLoop:
.8ac2	bd 06 08	lda $0806,x			lda 	lineBuffer,x 				; get next character
.8ac5	f0 22		beq $8ae9			beq 	_FLBCExit 					; end of string.
.8ac7	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.8ac9	f0 11		beq $8adc			beq 	_FLBCInQuotes
.8acb	e8		inx				inx
.8acc	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.8ace	90 f2		bcc $8ac2			bcc 	_FLBCLoop
.8ad0	c9 7b		cmp #$7b			cmp 	#'z'+1
.8ad2	b0 ee		bcs $8ac2			bcs 	_FLBCLoop
.8ad4	38		sec				sec 								; make U/C
.8ad5	e9 20		sbc #$20			sbc 	#32
.8ad7	9d 05 08	sta $0805,x			sta	 	lineBuffer-1,x 				; write back
.8ada	80 e6		bra $8ac2			bra 	_FLBCLoop
.8adc					_FLBCInQuotes:
.8adc	e8		inx				inx 								; advance
.8add	bd 06 08	lda $0806,x			lda 	lineBuffer,x 				; get next
.8ae0	f0 07		beq $8ae9			beq 	_FLBCExit 					; exit on EOS
.8ae2	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.8ae4	d0 f6		bne $8adc			bne 	_FLBCInQuotes
.8ae6	e8		inx				inx 								; skip over it
.8ae7	80 d9		bra $8ac2			bra 	_FLBCLoop
.8ae9					_FLBCExit:
.8ae9	60		rts				rts
.8aea					TokeniseExtractLineNumber:
.8aea	ad 08 07	lda $0708			lda 	tokenLineNumber+1 			; push current value on stack
.8aed	48		pha				pha
.8aee	ad 07 07	lda $0707			lda 	tokenLineNumber
.8af1	48		pha				pha
.8af2	20 28 8b	jsr $8b28			jsr 	_TELNTimes2 				; line # x 4
.8af5	20 28 8b	jsr $8b28			jsr 	_TELNTimes2 				; line # x 2
.8af8	18		clc				clc 								; add stacked value
.8af9	68		pla				pla
.8afa	6d 07 07	adc $0707			adc 	tokenLineNumber
.8afd	8d 07 07	sta $0707			sta 	tokenLineNumber
.8b00	68		pla				pla
.8b01	6d 08 07	adc $0708			adc 	tokenLineNumber+1
.8b04	8d 08 07	sta $0708			sta 	tokenLineNumber+1 			; line # x 5
.8b07	20 28 8b	jsr $8b28			jsr 	_TELNTimes2 				; line # x 10
.8b0a	bd 06 08	lda $0806,x			lda 	lineBuffer,x 				; get and consume character
.8b0d	e8		inx				inx
.8b0e	29 0f		and #$0f			and 	#15 						; add to line #
.8b10	18		clc				clc
.8b11	6d 07 07	adc $0707			adc 	tokenLineNumber
.8b14	8d 07 07	sta $0707			sta 	tokenLineNumber
.8b17	90 03		bcc $8b1c			bcc 	_TLENNoCarry
.8b19	ee 08 07	inc $0708			inc 	tokenLineNumber+1
.8b1c					_TLENNoCarry:
.8b1c	bd 06 08	lda $0806,x			lda 	lineBuffer,x 				; more digits ?
.8b1f	c9 30		cmp #$30			cmp 	#'0'
.8b21	90 04		bcc $8b27			bcc 	_TLENExit
.8b23	c9 3a		cmp #$3a			cmp 	#'9'+1
.8b25	90 c3		bcc $8aea			bcc 	TokeniseExtractLineNumber
.8b27					_TLENExit:
.8b27	60		rts				rts
.8b28					_TELNTimes2:
.8b28	0e 07 07	asl $0707			asl 	tokenLineNumber
.8b2b	2e 08 07	rol $0708			rol 	tokenLineNumber+1
.8b2e	60		rts				rts
.8b2f					TokeniseWriteByte:
.8b2f	da		phx				phx
.8b30	ae 06 07	ldx $0706			ldx 	tokenOffset 				; next slot to write to
.8b33	9d 06 07	sta $0706,x			sta 	tokenOffset,x 				; write byte out
.8b36	ee 06 07	inc $0706			inc 	tokenOffset 				; advance slot.
.8b39	fa		plx				plx
.8b3a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./tokeniser/variablerecord.asm

.8b3b					CheckCreateVariableRecord:
.8b3b	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.8b3d	85 36		sta $36				sta 	0+zTemp0
.8b3f	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.8b41	85 37		sta $37				sta 	1+zTemp0
.8b43	20 41 87	jsr $8741			jsr 	VariableOpen 				; make variable space available
.8b46					_CCVSearch:
.8b46	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.8b48	f0 2c		beq $8b76			beq 	_CCVFail
.8b4a	a0 01		ldy #$01			ldy 	#1 							; read the hash
.8b4c	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.8b4e	cd 03 07	cmp $0703			cmp 	identHash
.8b51	d0 16		bne $8b69			bne 	_CCVNext
.8b53	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.8b55	ae 00 07	ldx $0700			ldx 	identStart
.8b58					_CCVCompare:
.8b58	bd 06 08	lda $0806,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.8b5b	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.8b5d	e8		inx				inx 								; advance pointers
.8b5e	c8		iny				iny
.8b5f	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.8b60	d0 07		bne $8b69			bne 	_CCVNext  					; didn't match go to next.
.8b62	90 f4		bcc $8b58			bcc 	_CCVCompare 				; not finished yet.
.8b64	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; matched whole thing ?
.8b67	f0 41		beq $8baa			beq 	_CCVFound 					; yes, we were successful
.8b69					_CCVNext:
.8b69	18		clc				clc
.8b6a	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.8b6c	65 36		adc $36				adc 	zTemp0
.8b6e	85 36		sta $36				sta 	zTemp0
.8b70	90 d4		bcc $8b46			bcc 	_CCVSearch
.8b72	e6 37		inc $37				inc 	zTemp0+1
.8b74	80 d0		bra $8b46			bra 	_CCVSearch
.8b76					_CCVFail:
.8b76	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.8b78	ad 03 07	lda $0703			lda 	identHash
.8b7b	91 36		sta ($36),y			sta 	(zTemp0),y
.8b7d	c8		iny				iny 								; offset 2 is the type byte
.8b7e	ad 04 07	lda $0704			lda 	identTypeByte
.8b81	91 36		sta ($36),y			sta 	(zTemp0),y
.8b83	c8		iny				iny
.8b84					_CCVData:
.8b84	a9 00		lda #$00			lda 	#0 							; erase data 3-7
.8b86	91 36		sta ($36),y			sta 	(zTemp0),y
.8b88	c8		iny				iny
.8b89	c0 08		cpy #$08			cpy 	#8
.8b8b	90 f7		bcc $8b84			bcc 	_CCVData
.8b8d	ae 00 07	ldx $0700			ldx 	identStart 					; copy name into 8 on.
.8b90					_CCVCopyName:
.8b90	bd 06 08	lda $0806,x			lda 	lineBuffer,x
.8b93	91 36		sta ($36),y			sta 	(zTemp0),y
.8b95	e8		inx				inx
.8b96	c8		iny				iny
.8b97	ec 02 07	cpx $0702			cpx 	identTypeEnd
.8b9a	d0 f4		bne $8b90			bne 	_CCVCopyName
.8b9c	98		tya				tya 								; patch offset
.8b9d	92 36		sta ($36)			sta 	(zTemp0)
.8b9f	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.8ba1	91 36		sta ($36),y			sta 	(zTemp0),y
.8ba3	88		dey				dey
.8ba4	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.8ba6	09 80		ora #$80			ora 	#$80
.8ba8	91 36		sta ($36),y			sta 	(zTemp0),y
.8baa					_CCVFound:
.8baa	20 42 87	jsr $8742			jsr 	VariableClose 				; map out variables, perhaps.
.8bad	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.8baf	38		sec				sec
.8bb0	e9 10		sbc #$10			sbc 	#(VariableSpace >> 8) 		; offset from the start
.8bb2	09 40		ora #$40			ora 	#$40 						; make it a writeable token
.8bb4	20 2f 8b	jsr $8b2f			jsr 	TokeniseWriteByte
.8bb7	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.8bb9	20 2f 8b	jsr $8b2f			jsr 	TokeniseWriteByte
.8bbc	60		rts				rts

;******  Return to file: _basic.asm


;******  End of listing
