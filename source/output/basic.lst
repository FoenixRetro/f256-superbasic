
; 64tass Turbo Assembler Macro V1.56.2625 listing file
; 64tass -q -b -Wall -Wno-portable -c -L output/basic.lst -l output/basic.lbl -Wall -o basic.rom _basic.asm
; Thu Sep 29 16:20:32 2022

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: _basic.asm


;******  Processing file: ./aa_system/01common.inc

=$30					ZeroPageMandatory = $30
=$600					ZeroPagePreference = $600
=$700					MemoryStorage = $700
=$2000					BasicStart = $2000
=$8000					CodeStart = $8000
=$1000					VariableSpace = $1000
=$2000					EndVariableSpace = $2000
=8					MathStackSize = 8
=512					BasicStackSize = 512
=80					MaxLineSize = 80

;******  Return to file: _basic.asm


;******  Processing file: ./aa_system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./aa_system/04data.inc

.0030					codePtr:
>0030							.fill 	4
.0034					basicStack:
>0034							.fill 	2
.0036					zTemp0:
>0036							.fill 	2
.0038					zTemp1:
>0038							.fill 	2
.003a					zTemp2:
>003a							.fill 	2
=$80					NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20					NSBIsReference = $20 						; bit 5 : is a reference
=$10					NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18					NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03					NSBRefMask = $03 							; bits 0,1 : Bytes of reference, -1 (e.g. 00 = 1 byte, 11 = 4 bytes)
=$00					NSTInteger = $00 							; base types for bits 3..4
=$08					NSTFloat = $08
=$10					NSTString = $10
=$18					NSTProcedure = $18
.0600					NSStatus:
>0600							.fill 	MathStackSize
.0608					NSMantissa0:
>0608							.fill 	MathStackSize 				; (this is my integer mantissa system)
.0610					NSMantissa1:
>0610							.fill 	MathStackSize
.0618					NSMantissa2:
>0618							.fill 	MathStackSize
.0620					NSMantissa3:
>0620							.fill 	MathStackSize
.0628					NSExponent:
>0628							.fill 	MathStackSize
.0700					identStart:
>0700							.fill 	1
.0701					identTypeStart:
>0701							.fill 	1
.0702					identTypeEnd:
>0702							.fill 	1
.0703					identHash:
>0703							.fill 	1
.0704					identTypeByte:
>0704							.fill 	1	 						; (see tokenising.pdf)
.0705					encodeState:
>0705							.fill 	1
.0706					digitTemp:
>0706							.fill 	1
.0707					decimalCount:
>0707							.fill 	1
.0708					randomSeed:
>0708							.fill 	4
.070c					lowMemPtr:
>070c							.fill 	2
.070e					tokenOffset:
>070e							.fill 	1
.070f					tokenLineNumber:
>070f							.fill 	2
.0711					tokenBuffer:
>0711							.fill 	253
.080e					lineBuffer:
>080e							.fill 	MaxLineSize+1
.085f					numberBuffer:
>085f							.fill 	34

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/binary/handlers.inc


;******  Return to file: _basic.asm


;******  Processing file: ./generated/errors.inc

=1					ERRID_BREAK = 1
=2					ERRID_SYNTAX = 2
=3					ERRID_DIVZERO = 3
=4					ERRID_RANGE = 4
=5					ERRID_TYPE = 5
=6					ERRID_MEMORY = 6
=7					ERRID_ARGUMENT = 7
=8					ERRID_STOP = 8
=9					ERRID_STRING = 9
=10					ERRID_ASSERT = 10
=11					ERRID_DATA = 11
=12					ERRID_NOTDONE = 12

;******  Return to file: _basic.asm


;******  Processing file: ./generated/kwdconst.inc

=$00					KWD_LESSLESS                         = $00; $00 <<
=$01					KWD_LESSEQUAL                        = $01; $01 <=
=$02					KWD_LESSGREATER                      = $02; $02 <>
=$03					KWD_PLINGPLING3                      = $03; $03 !!3
=$04					KWD_GREATERLESS                      = $04; $04 ><
=$05					KWD_GREATEREQUAL                     = $05; $05 >=
=$06					KWD_GREATERGREATER                   = $06; $06 >>
=$07					KWD_PLINGPLING7                      = $07; $07 !!7
=$08					KWD_PLINGPLING8                      = $08; $08 !!8
=$09					KWD_PLINGPLING9                      = $09; $09 !!9
=$0a					KWD_PLINGPLING10                     = $0a; $0a !!10
=$0b					KWD_PLINGPLING11                     = $0b; $0b !!11
=$0c					KWD_PLINGPLING12                     = $0c; $0c !!12
=$0d					KWD_PLINGPLING13                     = $0d; $0d !!13
=$0e					KWD_PLINGPLING14                     = $0e; $0e !!14
=$0f					KWD_PLINGPLING15                     = $0f; $0f !!15
=$10					KWD_AT                               = $10; $10 @
=$11					KWD_PLINGPLING17                     = $11; $11 !!17
=$12					KWD_PLINGPLING18                     = $12; $12 !!18
=$13					KWD_LSQPAREN                         = $13; $13 [
=$14					KWD_BACKSLASH                        = $14; $14 \
=$15					KWD_RSQPAREN                         = $15; $15 ]
=$16					KWD_HAT                              = $16; $16 ^
=$17					KWD_UNDERSCORE                       = $17; $17 _
=$18					KWD_BQUOTE                           = $18; $18 `
=$19					KWD_PLINGPLING25                     = $19; $19 !!25
=$1a					KWD_PLINGPLING26                     = $1a; $1a !!26
=$1b					KWD_LCURLY                           = $1b; $1b {
=$1c					KWD_BAR                              = $1c; $1c |
=$1d					KWD_RCURLY                           = $1d; $1d }
=$1e					KWD_TILDE                            = $1e; $1e ~
=$21					KWD_PLING                            = $21; $21 !
=$22					KWD_DQUOTE                           = $22; $22 "
=$23					KWD_HASH                             = $23; $23 #
=$24					KWD_DOLLAR                           = $24; $24 $
=$25					KWD_PERCENT                          = $25; $25 %
=$26					KWD_AMPERSAND                        = $26; $26 &
=$27					KWD_QUOTE                            = $27; $27 '
=$28					KWD_LPAREN                           = $28; $28 (
=$29					KWD_RPAREN                           = $29; $29 )
=$2a					KWD_STAR                             = $2a; $2a *
=$2b					KWD_PLUS                             = $2b; $2b +
=$2c					KWD_COMMA                            = $2c; $2c ,
=$2d					KWD_MINUS                            = $2d; $2d -
=$2e					KWD_PERIOD                           = $2e; $2e .
=$2f					KWD_SLASH                            = $2f; $2f /
=$30					KWD_0                                = $30; $30 0
=$31					KWD_1                                = $31; $31 1
=$32					KWD_2                                = $32; $32 2
=$33					KWD_3                                = $33; $33 3
=$34					KWD_4                                = $34; $34 4
=$35					KWD_5                                = $35; $35 5
=$36					KWD_6                                = $36; $36 6
=$37					KWD_7                                = $37; $37 7
=$38					KWD_8                                = $38; $38 8
=$39					KWD_9                                = $39; $39 9
=$3a					KWD_COLON                            = $3a; $3a :
=$3b					KWD_SEMICOLON                        = $3b; $3b ;
=$3c					KWD_LESS                             = $3c; $3c <
=$3d					KWD_EQUAL                            = $3d; $3d =
=$3e					KWD_GREATER                          = $3e; $3e >
=$3f					KWD_QMARK                            = $3f; $3f ?
=$83					KWD_ABSLPAREN                        = $83; $83 ABS(
=$84					KWD_ALLOCLPAREN                      = $84; $84 ALLOC(
=$85					KWD_ASCLPAREN                        = $85; $85 ASC(
=$86					KWD_CHRDOLLARLPAREN                  = $86; $86 CHR$(
=$87					KWD_FALSE                            = $87; $87 FALSE
=$88					KWD_FRACLPAREN                       = $88; $88 FRAC(
=$89					KWD_INTLPAREN                        = $89; $89 INT(
=$8a					KWD_ISVALLPAREN                      = $8a; $8a ISVAL(
=$8b					KWD_LEFTDOLLARLPAREN                 = $8b; $8b LEFT$(
=$8c					KWD_LENLPAREN                        = $8c; $8c LEN(
=$8d					KWD_MIDDOLLARLPAREN                  = $8d; $8d MID$(
=$8e					KWD_NOTLPAREN                        = $8e; $8e NOT(
=$8f					KWD_RIGHTDOLLARLPAREN                = $8f; $8f RIGHT$(
=$90					KWD_RNDLPAREN                        = $90; $90 RND(
=$91					KWD_SGNLPAREN                        = $91; $91 SGN(
=$92					KWD_SPCLPAREN                        = $92; $92 SPC(
=$93					KWD_STRDOLLARLPAREN                  = $93; $93 STR$(
=$94					KWD_TRUE                             = $94; $94 TRUE
=$95					KWD_VALLPAREN                        = $95; $95 VAL(
=$96					KWD_FOR                              = $96; $96 FOR
=$97					KWD_IF                               = $97; $97 IF
=$98					KWD_PROC                             = $98; $98 PROC
=$99					KWD_REPEAT                           = $99; $99 REPEAT
=$9a					KWD_WHILE                            = $9a; $9a WHILE
=$9b					KWD_ENDIF                            = $9b; $9b ENDIF
=$9c					KWD_ENDPROC                          = $9c; $9c ENDPROC
=$9d					KWD_NEXT                             = $9d; $9d NEXT
=$9e					KWD_UNTIL                            = $9e; $9e UNTIL
=$9f					KWD_WEND                             = $9f; $9f WEND
=$a0					KWD_CALL                             = $a0; $a0 CALL
=$a1					KWD_CLS                              = $a1; $a1 CLS
=$a2					KWD_DATA                             = $a2; $a2 DATA
=$a3					KWD_DIM                              = $a3; $a3 DIM
=$a4					KWD_GOSUB                            = $a4; $a4 GOSUB
=$a5					KWD_GOTO                             = $a5; $a5 GOTO
=$a6					KWD_LET                              = $a6; $a6 LET
=$a7					KWD_PRINT                            = $a7; $a7 PRINT
=$a8					KWD_READ                             = $a8; $a8 READ
=$a9					KWD_REM                              = $a9; $a9 REM
=$aa					KWD_RETURN                           = $aa; $aa RETURN
=$ab					KWD_THEN                             = $ab; $ab THEN
=$ac					KWD_TO                               = $ac; $ac TO

;******  Return to file: _basic.asm


;******  Processing file: ./generated/kwdconst0.inc

=$80					KWC_EOL = $80
=$ff					KWC_STRING = $FF
=$fe					KWC_HEXCONST = $FE
=$96					KWC_FIRST_STRUCTURE = $96
=$9b					KWC_FIRST_STRUCTURE_DEC = $9b
=$9f					KWC_LAST_STRUCTURE = $9f
=$83					KWC_FIRST_UNARY = $83
=$95					KWC_LAST_UNARY = $95

;******  Return to file: _basic.asm


;******  Processing file: ./memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./aa_system/00start.asm

.8000	a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.8002	9a		txs				txs
.8003	20 5b 81	jsr $815b			jsr 	NewCommand 					; erase current program
.8006	20 2b 89	jsr $892b			jsr 	BackloadProgram
.8009	4c 72 81	jmp $8172			jmp 	CommandRun
.800c					WarmStart:
.800c	a9 57		lda #$57			lda 	#"W"
.800e	20 b4 93	jsr $93b4			jsr 	EXTPrintCharacter
.8011	80 fe		bra $8011	halt:	bra 	halt
>8013							.align 2

;******  Processing file: ./aa_system/../generated/vectors.dat

.8014					VectorSetPunc:
>8014	5a 82					.word	ShiftLeft                        ; $00 <<
>8016	e9 8d					.word	BinaryCompareLessEqual           ; $01 <=
>8018	df 8d					.word	BinaryCompareNotEqual            ; $02 <>
>801a	f7 92					.word	SyntaxError                      ; $03 !!3
>801c	f7 92					.word	SyntaxError                      ; $04 ><
>801e	f3 8d					.word	BinaryCompareGreaterEqual        ; $05 >=
>8020	5d 82					.word	ShiftRight                       ; $06 >>
>8022	f7 92					.word	SyntaxError                      ; $07 !!7
>8024	f7 92					.word	SyntaxError                      ; $08 !!8
>8026	f7 92					.word	SyntaxError                      ; $09 !!9
>8028	f7 92					.word	SyntaxError                      ; $0a !!10
>802a	f7 92					.word	SyntaxError                      ; $0b !!11
>802c	f7 92					.word	SyntaxError                      ; $0c !!12
>802e	f7 92					.word	SyntaxError                      ; $0d !!13
>8030	f7 92					.word	SyntaxError                      ; $0e !!14
>8032	f7 92					.word	SyntaxError                      ; $0f !!15
>8034	f7 92					.word	SyntaxError                      ; $10 @
>8036	f7 92					.word	SyntaxError                      ; $11 !!17
>8038	f7 92					.word	SyntaxError                      ; $12 !!18
>803a	f7 92					.word	SyntaxError                      ; $13 [
>803c	59 8e					.word	IntegerDivide                    ; $14 \
>803e	f7 92					.word	SyntaxError                      ; $15 ]
>8040	e0 83					.word	EorInteger                       ; $16 ^
>8042	f7 92					.word	SyntaxError                      ; $17 _
>8044	f7 92					.word	SyntaxError                      ; $18 `
>8046	f7 92					.word	SyntaxError                      ; $19 !!25
>8048	f7 92					.word	SyntaxError                      ; $1a !!26
>804a	f7 92					.word	SyntaxError                      ; $1b {
>804c	9b 83					.word	OraInteger                       ; $1c |
>804e	f7 92					.word	SyntaxError                      ; $1d }
>8050	f7 92					.word	SyntaxError                      ; $1e ~
>8052	f7 92					.word	SyntaxError                      ; $1f [7m<7F>[m
>8054	f7 92					.word	SyntaxError                      ; $20
>8056	f7 92					.word	SyntaxError                      ; $21 !
>8058	f7 92					.word	SyntaxError                      ; $22 "
>805a	f7 92					.word	SyntaxError                      ; $23 #
>805c	f7 92					.word	SyntaxError                      ; $24 $
>805e	a5 8e					.word	IntegerModulus                   ; $25 %
>8060	56 83					.word	AndInteger                       ; $26 &
>8062	f7 92					.word	SyntaxError                      ; $27 '
>8064	f7 92					.word	SyntaxError                      ; $28 (
>8066	f7 92					.word	SyntaxError                      ; $29 )
>8068	19 8f					.word	MulInteger                       ; $2a *
>806a	f0 82					.word	AddInteger                       ; $2b +
>806c	f7 92					.word	SyntaxError                      ; $2c ,
>806e	2b 83					.word	SubInteger                       ; $2d -
>8070	f7 92					.word	SyntaxError                      ; $2e .
>8072	b0 90					.word	FDivideCommand                   ; $2f /
>8074	f7 92					.word	SyntaxError                      ; $30 0
>8076	f7 92					.word	SyntaxError                      ; $31 1
>8078	f7 92					.word	SyntaxError                      ; $32 2
>807a	f7 92					.word	SyntaxError                      ; $33 3
>807c	f7 92					.word	SyntaxError                      ; $34 4
>807e	f7 92					.word	SyntaxError                      ; $35 5
>8080	f7 92					.word	SyntaxError                      ; $36 6
>8082	f7 92					.word	SyntaxError                      ; $37 7
>8084	f7 92					.word	SyntaxError                      ; $38 8
>8086	f7 92					.word	SyntaxError                      ; $39 9
>8088	f7 92					.word	SyntaxError                      ; $3a :
>808a	f7 92					.word	SyntaxError                      ; $3b ;
>808c	cb 8d					.word	BinaryCompareLess                ; $3c <
>808e	c1 8d					.word	BinaryCompareEqual               ; $3d =
>8090	d5 8d					.word	BinaryCompareGreater             ; $3e >
>8092	f7 92					.word	SyntaxError                      ; $3f ?
.8094					VectorSet0:
>8094	a9 81					.word	EOLCommand                       ; $80 !0:EOF
>8096	b6 81					.word	Shift1Command                    ; $81 !1:SH1
>8098	f7 92					.word	SyntaxError                      ; $82 !2:SH2
>809a	f6 91					.word	AbsUnary                         ; $83 ABS(
>809c	4c 87					.word	AllocUnary                       ; $84 ALLOC(
>809e	06 92					.word	AscUnary                         ; $85 ASC(
>80a0	f7 92					.word	SyntaxError                      ; $86 CHR$(
>80a2	bd 8d					.word	UnaryFalse                       ; $87 FALSE
>80a4	13 92					.word	FracUnary                        ; $88 FRAC(
>80a6	29 92					.word	IntUnary                         ; $89 INT(
>80a8	7f 92					.word	IsValUnary                       ; $8a ISVAL(
>80aa	f7 92					.word	SyntaxError                      ; $8b LEFT$(
>80ac	3b 92					.word	LenUnary                         ; $8c LEN(
>80ae	f7 92					.word	SyntaxError                      ; $8d MID$(
>80b0	86 87					.word	Unary_Not                        ; $8e NOT(
>80b2	f7 92					.word	SyntaxError                      ; $8f RIGHT$(
>80b4	9c 87					.word	Unary_Rnd                        ; $90 RND(
>80b6	55 92					.word	SgnUnary                         ; $91 SGN(
>80b8	f7 92					.word	SyntaxError                      ; $92 SPC(
>80ba	f7 92					.word	SyntaxError                      ; $93 STR$(
>80bc	b1 8d					.word	UnaryTrue                        ; $94 TRUE
>80be	75 92					.word	ValUnary                         ; $95 VAL(
>80c0	f7 92					.word	SyntaxError                      ; $96 FOR
>80c2	f7 92					.word	SyntaxError                      ; $97 IF
>80c4	f7 92					.word	SyntaxError                      ; $98 PROC
>80c6	f7 92					.word	SyntaxError                      ; $99 REPEAT
>80c8	f7 92					.word	SyntaxError                      ; $9a WHILE
>80ca	f7 92					.word	SyntaxError                      ; $9b ENDIF
>80cc	f7 92					.word	SyntaxError                      ; $9c ENDPROC
>80ce	f7 92					.word	SyntaxError                      ; $9d NEXT
>80d0	f7 92					.word	SyntaxError                      ; $9e UNTIL
>80d2	f7 92					.word	SyntaxError                      ; $9f WEND
>80d4	18 81					.word	CallCommand                      ; $a0 CALL
>80d6	f7 92					.word	SyntaxError                      ; $a1 CLS
>80d8	f7 92					.word	SyntaxError                      ; $a2 DATA
>80da	f7 92					.word	SyntaxError                      ; $a3 DIM
>80dc	f7 92					.word	SyntaxError                      ; $a4 GOSUB
>80de	f7 92					.word	SyntaxError                      ; $a5 GOTO
>80e0	f7 92					.word	SyntaxError                      ; $a6 LET
>80e2	f7 92					.word	SyntaxError                      ; $a7 PRINT
>80e4	f7 92					.word	SyntaxError                      ; $a8 READ
>80e6	65 81					.word	RemCommand                       ; $a9 REM
>80e8	f7 92					.word	SyntaxError                      ; $aa RETURN
>80ea	f7 92					.word	SyntaxError                      ; $ab THEN
>80ec	f7 92					.word	SyntaxError                      ; $ac TO
.80ee					VectorSet1:
>80ee	f7 92					.word	SyntaxError                      ; $80 !0:EOF
>80f0	f7 92					.word	SyntaxError                      ; $81 !1:SH1
>80f2	f7 92					.word	SyntaxError                      ; $82 !2:SH2
>80f4	0a 81					.word	AssertCommand                    ; $83 ASSERT
>80f6	24 81					.word	ClearCommand                     ; $84 CLEAR
>80f8	58 81					.word	EndCommand                       ; $85 END
>80fa	f7 92					.word	SyntaxError                      ; $86 LIST
>80fc	5b 81					.word	NewCommand                       ; $87 NEW
>80fe	f7 92					.word	SyntaxError                      ; $88 RESTORE
>8100	72 81					.word	CommandRUN                       ; $89 RUN
>8102	f7 92					.word	SyntaxError                      ; $8a STOP
.8104					VectorSet2:
>8104	f7 92					.word	SyntaxError                      ; $80 !0:EOF
>8106	f7 92					.word	SyntaxError                      ; $81 !1:SH1
>8108	f7 92					.word	SyntaxError                      ; $82 !2:SH2

;******  Return to file: ./aa_system/00start.asm


;******  Return to file: _basic.asm


;******  Processing file: ./commands/assert.asm

.810a					AssertCommand:
.810a	20 15 88	jsr $8815			jsr 	EvaluateInteger 			; the assert test
.810d	20 cb 88	jsr $88cb			jsr 	NSMIsZero 					; exit if result is non zero.
.8110	d0 05		bne $8117			bne 	_ACExit
.8112	a9 0a		lda #$0a		lda	#10
.8114	4c be 81	jmp $81be		jmp	ErrorHandler
.8117					_ACExit:
.8117	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./commands/call.asm

.8118					CallCommand:
.8118	20 2a 88	jsr $882a			jsr 	Evaluate16BitInteger
.811b	ad 10 06	lda $0610			lda 	NSMantissa1
.811e	8d 09 06	sta $0609			sta 	NSMantissa0+1
.8121	6c 08 06	jmp ($0608)			jmp 	(NSMantissa0)

;******  Return to file: _basic.asm


;******  Processing file: ./commands/clear.asm

.8124					ClearCommand:
.8124	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.8126	85 36		sta $36				sta 	0+zTemp0
.8128	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.812a	85 37		sta $37				sta 	1+zTemp0
.812c					_ClearZeroLoop:
.812c	b2 36		lda ($36)			lda 	(zTemp0) 					; end of variables
.812e	f0 18		beq $8148			beq 	_ClearZeroEnd
.8130	a0 03		ldy #$03			ldy 	#3 							; erase the variables
.8132	a9 00		lda #$00			lda 	#0
.8134					_ClearOneVariable:
.8134	91 36		sta ($36),y			sta 	(zTemp0),y
.8136	c8		iny				iny
.8137	c0 08		cpy #$08			cpy 	#8
.8139	d0 f9		bne $8134			bne 	_ClearOneVariable
.813b	18		clc				clc 								; go to the next variable
.813c	b2 36		lda ($36)			lda 	(zTemp0)
.813e	65 36		adc $36				adc 	zTemp0
.8140	85 36		sta $36				sta 	zTemp0
.8142	90 e8		bcc $812c			bcc 	_ClearZeroLoop
.8144	e6 37		inc $37				inc 	zTemp0+1
.8146	80 e4		bra $812c			bra 	_ClearZeroLoop
.8148					_ClearZeroEnd:
.8148	18		clc				clc
.8149	a5 36		lda $36				lda 	zTemp0
.814b	69 01		adc #$01			adc 	#1
.814d	8d 0c 07	sta $070c			sta 	lowMemPtr
.8150	a5 37		lda $37				lda 	zTemp0+1
.8152	69 00		adc #$00			adc 	#0
.8154	8d 0d 07	sta $070d			sta 	lowMemPtr+1
.8157	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./commands/end.asm

.8158					EndCommand:
.8158	4c 0c 80	jmp $800c			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./commands/new.asm

.815b					NewCommand:
.815b	20 d8 88	jsr $88d8			jsr 	MemoryNew
.815e	9c 00 10	stz $1000			stz 	VariableSpace 				; erase all variables.
.8161	20 24 81	jsr $8124			jsr 	ClearCommand 				; clear everything.
.8164	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./commands/rem.asm

.8165					RemCommand:
.8165	b1 30		lda ($30),y			lda 	(codePtr),y
.8167	c9 ff		cmp #$ff			cmp 	#KWC_STRING
.8169	d0 06		bne $8171			bne 	_RMExit
.816b	c8		iny				iny
.816c	98		tya				tya
.816d	38		sec				sec
.816e	71 30		adc ($30),y			adc 	(codePtr),y
.8170	a8		tay				tay
.8171					_RMExit:
.8171	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./commands/run.asm

.8172					CommandRUN:
.8172	20 24 81	jsr $8124			jsr 	ClearCommand 				; clear variable/stacks/etc.
.8175	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.8177	85 30		sta $30				sta 	codePtr
.8179	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.817b	85 31		sta $31				sta 	codePtr+1
.817d					RUNNewLine:
.817d	b2 30		lda ($30)			lda 	(codePtr)
.817f	f0 25		beq $81a6			beq 	CRNoProgram         		; no then END.
.8181	a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack
.8183	9a		txs				txs
.8184					RUNCodePointerLine:
.8184	a0 02		ldy #$02			ldy 	#2 							; start of program
.8186					_CRIncMainLoop:
.8186	c8		iny				iny
.8187					_CRMainLoop:
.8187	b1 30		lda ($30),y			lda 	(codePtr),y
.8189	10 10		bpl $819b			bpl 	_CRNotKeyword
.818b	c9 96		cmp #$96			cmp 	#KWC_LAST_UNARY+1 			; if after unary, legitimate command
.818d	b0 04		bcs $8193			bcs 	_CRIsKeyword
.818f	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if unary, syntax error.
.8191	b0 0d		bcs $81a0			bcs		_CRSyntaxError
.8193					_CRIsKeyword:
.8193	c8		iny				iny 								; consume command
.8194	0a		asl a				asl 	a 							; double losing the MSB which is '1' as tokens are $80-$FF
.8195	aa		tax				tax 								; put in X for vector jump
.8196	20 a3 81	jsr $81a3			jsr 	_CRCallVector0 				; call the vector - effectively jsr (vectortable,X)
.8199	80 ec		bra $8187			bra 	_CRMainLoop 				; and loop round
.819b					_CRNotKeyword:
.819b	c9 3a		cmp #$3a			cmp 	#KWD_COLON 					; if a :, consume it and go round.
.819d	f0 e7		beq $8186			beq 	_CRIncMainLoop
>819f	db						.byte 	$DB 						; causes a break in the emulator
.81a0					_CRSyntaxError:
.81a0	4c f7 92	jmp $92f7			jmp 	SyntaxError
.81a3					_CRCallVector0:
.81a3	7c 94 80	jmp ($8094,x)			jmp 	(VectorSet0,x)
.81a6					CRNoProgram:
.81a6	4c 58 81	jmp $8158			jmp 	EndCommand
.81a9					EOLCommand:
.81a9	18		clc				clc
.81aa	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.81ac	65 30		adc $30				adc 	codePtr
.81ae	85 30		sta $30				sta 	codePtr
.81b0	90 02		bcc $81b4			bcc 	_CREExit
.81b2	e6 31		inc $31				inc 	codePtr+1
.81b4					_CREExit:
.81b4	80 c7		bra $817d			bra 	RunNewLine
.81b6					Shift1Command:
.81b6	b1 30		lda ($30),y			lda 	(codePtr),y
.81b8	c8		iny				iny
.81b9	0a		asl a				asl 	a
.81ba	aa		tax				tax
.81bb	7c ee 80	jmp ($80ee,x)			jmp 	(VectorSet1,x)

;******  Return to file: _basic.asm


;******  Processing file: ./errors/charcheck.asm

.8d98					CheckRightBracket:
.8d98	b1 30		lda ($30),y			lda 	(codePtr),y
.8d9a	c8		iny				iny
.8d9b	c9 29		cmp #$29			cmp 	#KWD_RPAREN 						; exit if matches
.8d9d	d0 0f		bne $8dae			bne 	CNAFail
.8d9f	60		rts				rts
.8da0					CheckComma:
.8da0	b1 30		lda ($30),y			lda 	(codePtr),y
.8da2	c8		iny				iny
.8da3	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 						; exit if matches
.8da5	d0 07		bne $8dae			bne 	CNAFail
.8da7	60		rts				rts
.8da8					CheckNextA:
.8da8	d1 30		cmp ($30),y			cmp 	(codePtr),y
.8daa	d0 02		bne $8dae			bne 	CNAFail
.8dac	c8		iny				iny 								; skip character
.8dad	60		rts				rts 								; and exit
.8dae					CNAFail:
.8dae	4c f7 92	jmp $92f7			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./errors/errors.asm

.81be					ErrorHandler:
.81be	a8		tay				tay 								; find the error text
.81bf	f0 42		beq $8203			beq 	_EHEnd
.81c1	a2 00		ldx #$00			ldx 	#0
.81c3					_EHFind:
.81c3	88		dey				dey 								; found the error text ?
.81c4	f0 0a		beq $81d0			beq 	_EHFound
.81c6					_EHFindZero:
.81c6	bd 10 93	lda $9310,x			lda 	ErrorText,x 				; find the next error
.81c9	e8		inx				inx
.81ca	c9 00		cmp #$00			cmp 	#0
.81cc	d0 f8		bne $81c6			bne 	_EHFindZero
.81ce	80 f3		bra $81c3			bra 	_EHFind
.81d0					_EHFound:
.81d0	bd 10 93	lda $9310,x			lda 	ErrorText,x 				; print the message
.81d3	20 b4 93	jsr $93b4			jsr 	EXTPrintCharacter
.81d6	e8		inx				inx
.81d7	bd 10 93	lda $9310,x			lda 	ErrorText,x
.81da	d0 f4		bne $81d0			bne 	_EHFound
.81dc	a0 01		ldy #$01			ldy 	#1 							; if line number zero don't print i
.81de	b1 30		lda ($30),y			lda 	(codePtr),y
.81e0	d0 05		bne $81e7			bne 	_EHAtMsg
.81e2	c8		iny				iny
.81e3	b1 30		lda ($30),y			lda 	(codePtr),y
.81e5	f0 17		beq $81fe			beq 	_EHCREnd
.81e7					_EHAtMsg:
.81e7	a2 82		ldx #$82			ldx 	#_AtMsg >> 8 				; print " at "
.81e9	a9 06		lda #$06			lda 	#_AtMsg & $FF
.81eb	20 10 82	jsr $8210			jsr 	PrintStringXA
.81ee	a0 01		ldy #$01			ldy 	#1 							; line number into XA
.81f0	b1 30		lda ($30),y			lda 	(codePtr),y
.81f2	48		pha				pha
.81f3	c8		iny				iny
.81f4	b1 30		lda ($30),y			lda 	(codePtr),y
.81f6	aa		tax				tax
.81f7	68		pla				pla
.81f8	20 9a 8f	jsr $8f9a			jsr 	ConvertInt16 				; convert XA to string
.81fb	20 10 82	jsr $8210			jsr 	PrintStringXA 				; and print it.
.81fe					_EHCREnd:
.81fe	a9 0d		lda #$0d			lda 	#13 						; new line
.8200	20 b4 93	jsr $93b4			jsr 	EXTPrintCharacter
.8203					_EHEnd:
.8203	4c 0c 80	jmp $800c			jmp 	WarmStart
>8206	20 61 74 20 6c 69 6e 65		_AtMsg:	.text 	" at line ",0
>820e	20 00
.8210					PrintStringXA:
.8210	86 37		stx $37				stx 	zTemp0+1
.8212	85 36		sta $36				sta 	zTemp0
.8214	a0 00		ldy #$00			ldy 	#0
.8216					_PSXALoop:
.8216	b1 36		lda ($36),y			lda 	(zTemp0),y
.8218	f0 06		beq $8220			beq 	_PSXAExit
.821a	20 b4 93	jsr $93b4			jsr 	EXTPrintCharacter
.821d	c8		iny				iny
.821e	80 f6		bra $8216			bra 	_PSXALoop
.8220					_PSXAExit:
.8220	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/binary/compare.asm

.8db1					UnaryTrue:
.8db1	fa		plx				plx
.8db2					ReturnTrue:
.8db2	a9 01		lda #$01			lda 	#1  						; set to 1
.8db4	20 9d 88	jsr $889d			jsr 	NSMSetByte
.8db7	a9 80		lda #$80			lda 	#$80 						; set sign flag, so it is -1
.8db9	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8dbc	60		rts				rts
.8dbd					UnaryFalse:
.8dbd	fa		plx				plx
.8dbe					ReturnFalse:
.8dbe	4c 9b 88	jmp $889b			jmp 	NSMSetZero 					; set it all to zero
.8dc1					BinaryCompareEqual:
.8dc1	fa		plx				plx
.8dc2	20 fd 8d	jsr $8dfd			jsr 	CompareBaseCode
.8dc5	c9 00		cmp #$00			cmp 	#0
.8dc7	f0 e9		beq $8db2			beq 	ReturnTrue
.8dc9	80 f3		bra $8dbe			bra 	ReturnFalse
.8dcb					BinaryCompareLess:
.8dcb	fa		plx				plx
.8dcc	20 fd 8d	jsr $8dfd			jsr 	CompareBaseCode
.8dcf	c9 ff		cmp #$ff			cmp 	#$FF
.8dd1	f0 df		beq $8db2			beq 	ReturnTrue
.8dd3	80 e9		bra $8dbe			bra 	ReturnFalse
.8dd5					BinaryCompareGreater:
.8dd5	fa		plx				plx
.8dd6	20 fd 8d	jsr $8dfd			jsr 	CompareBaseCode
.8dd9	c9 01		cmp #$01			cmp 	#1
.8ddb	f0 d5		beq $8db2			beq 	ReturnTrue
.8ddd	80 df		bra $8dbe			bra 	ReturnFalse
.8ddf					BinaryCompareNotEqual:
.8ddf	fa		plx				plx
.8de0	20 fd 8d	jsr $8dfd			jsr 	CompareBaseCode
.8de3	c9 00		cmp #$00			cmp 	#0
.8de5	d0 cb		bne $8db2			bne 	ReturnTrue
.8de7	80 d5		bra $8dbe			bra 	ReturnFalse
.8de9					BinaryCompareLessEqual:
.8de9	fa		plx				plx
.8dea	20 fd 8d	jsr $8dfd			jsr 	CompareBaseCode
.8ded	c9 01		cmp #$01			cmp 	#1
.8def	d0 c1		bne $8db2			bne 	ReturnTrue
.8df1	80 cb		bra $8dbe			bra 	ReturnFalse
.8df3					BinaryCompareGreaterEqual:
.8df3	fa		plx				plx
.8df4	20 fd 8d	jsr $8dfd			jsr 	CompareBaseCode
.8df7	c9 ff		cmp #$ff			cmp 	#$FF
.8df9	d0 b7		bne $8db2			bne 	ReturnTrue
.8dfb	80 c1		bra $8dbe			bra 	ReturnFalse
.8dfd					CompareBaseCode:
.8dfd	20 a4 84	jsr $84a4			jsr 	DereferenceTopTwo 			; make both values if references.
.8e00	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if either is a string.
.8e03	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8e06	29 10		and #$10			and 	#NSTString
.8e08	d0 40		bne $8e4a			bne 	_CBCString
.8e0a	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check both are integers
.8e0d	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8e10	d0 3b		bne $8e4d			bne 	_CBCFloat
.8e12	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8e15	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8e18	29 08		and #$08			and 	#NSTFloat
.8e1a	d0 31		bne $8e4d			bne 	_CBCFloat
.8e1c	20 50 8e	jsr $8e50			jsr 	CompareFixMinusZero
.8e1f	e8		inx				inx
.8e20	20 50 8e	jsr $8e50			jsr 	CompareFixMinusZero
.8e23	ca		dex				dex
.8e24	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; are the signs different ?
.8e27	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.8e2a	10 0b		bpl $8e37			bpl 	_CDCSameSign
.8e2c	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; if first one is -ve
.8e2f	30 16		bmi $8e47			bmi 	_CBCLess 					; return $FF
.8e31					_CBCGreater:
.8e31	a9 01		lda #$01			lda 	#1
.8e33	60		rts				rts
.8e34					_CBCEqual:
.8e34	a9 00		lda #$00			lda 	#0
.8e36	60		rts				rts
.8e37					_CDCSameSign:
.8e37	20 ca 82	jsr $82ca			jsr 	SubTopTwoStack 				; unsigned subtract
.8e3a	20 cb 88	jsr $88cb			jsr 	NSMIsZero 					; or the mantissa together
.8e3d	f0 f5		beq $8e34			beq 	_CBCEqual 					; -0 == 0
.8e3f	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; sign of the result. if +ve return $01 else return $FF
.8e42	5d 01 06	eor $0601,x			eor 	NSStatus+1,x 				; however if both were -ve this is inverted
.8e45	10 ea		bpl $8e31			bpl 	_CBCGreater
.8e47					_CBCLess:
.8e47	a9 ff		lda #$ff			lda 	#$FF
.8e49	60		rts				rts
.8e4a					_CBCString:
.8e4a	4c 21 82	jmp $8221			jmp 	CompareStrings
.8e4d					_CBCFloat:
.8e4d	4c 96 90	jmp $9096			jmp 	CompareFloat
.8e50					CompareFixMinusZero:
.8e50	20 cb 88	jsr $88cb			jsr 	NSMIsZero
.8e53	d0 03		bne $8e58			bne 	_CFXMZNotZero
.8e55	9e 00 06	stz $0600,x			stz 	NSStatus,x
.8e58					_CFXMZNotZero:
.8e58	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/binary/divide.asm

.8e59					IntegerDivide:
.8e59	fa		plx				plx
.8e5a	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8e5d	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8e60	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8e61	0a		asl a				asl 	a
.8e62	10 05		bpl $8e69			bpl 	_NotRef
.8e64	48		pha				pha
.8e65	20 a4 84	jsr $84a4			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8e68	68		pla				pla
.8e69					_NotRef:
.8e69	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8e6b	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8e6e	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8e71	f0 03		beq $8e76			beq 	_IntegerCode 				; if clear, then we have two integers
.8e73	4c 01 93	jmp $9301			jmp 	TypeError 					; anything else, type mismatch.
.8e76					_IntegerCode:
.8e76	20 98 8e	jsr $8e98			jsr 	CheckDivideZero 			; do div zero check
.8e79	20 cf 8e	jsr $8ecf			jsr 	Int32Divide 				; do the division
.8e7c	20 8c 8f	jsr $8f8c			jsr 	CalculateSign 				; calculate result sign
.8e7f					NSMCopyPlusTwoToZero:
.8e7f	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.8e82	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8e85	bd 12 06	lda $0612,x			lda 	NSMantissa1+2,x
.8e88	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8e8b	bd 1a 06	lda $061a,x			lda 	NSMantissa2+2,x
.8e8e	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8e91	bd 22 06	lda $0622,x			lda 	NSMantissa3+2,x
.8e94	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8e97	60		rts				rts
.8e98					CheckDivideZero:
.8e98	e8		inx				inx
.8e99	20 cb 88	jsr $88cb			jsr 	NSMIsZero
.8e9c	f0 02		beq $8ea0			beq 	_CDVError
.8e9e	ca		dex				dex
.8e9f	60		rts				rts
.8ea0					_CDVError:
.8ea0	a9 03		lda #$03		lda	#3
.8ea2	4c be 81	jmp $81be		jmp	ErrorHandler
.8ea5					IntegerModulus:
.8ea5	fa		plx				plx
.8ea6	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8ea9	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8eac	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8ead	0a		asl a				asl 	a
.8eae	10 05		bpl $8eb5			bpl 	_NotRef
.8eb0	48		pha				pha
.8eb1	20 a4 84	jsr $84a4			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8eb4	68		pla				pla
.8eb5					_NotRef:
.8eb5	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8eb7	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8eba	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8ebd	f0 03		beq $8ec2			beq 	_IntegerCode 				; if clear, then we have two integers
.8ebf	4c 01 93	jmp $9301			jmp 	TypeError 					; anything else, type mismatch.
.8ec2					_IntegerCode:
.8ec2	20 98 8e	jsr $8e98			jsr 	CheckDivideZero 			; do div zero check
.8ec5	20 cf 8e	jsr $8ecf			jsr 	Int32Divide 				; do the division
.8ec8	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; clear the sign bit.
.8ecb	5e 00 06	lsr $0600,x			lsr 	NSStatus,x
.8ece	60		rts				rts
.8ecf					Int32Divide:
.8ecf	48		pha				pha 								; save AXY
.8ed0	5a		phy				phy
.8ed1	20 72 88	jsr $8872			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.8ed4	20 97 88	jsr $8897			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.8ed7	a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.8ed9					_I32DivideLoop:
.8ed9	e8		inx				inx
.8eda	e8		inx				inx
.8edb	20 b0 88	jsr $88b0			jsr 	NSMShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.8ede	ca		dex				dex
.8edf	ca		dex				dex
.8ee0	20 b1 88	jsr $88b1			jsr 	NSMRotateLeft
.8ee3	20 0f 8f	jsr $8f0f			jsr 	DivideCheckSubtract 		; check if subtract possible
.8ee6	90 03		bcc $8eeb			bcc 	_I32DivideNoCarryIn
.8ee8	fe 0a 06	inc $060a,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.8eeb					_I32DivideNoCarryIn:
.8eeb	88		dey				dey 								; loop round till division completed.
.8eec	d0 eb		bne $8ed9			bne 	_I32DivideLoop
.8eee	7a		ply				ply 								; restore AXY and exit
.8eef	68		pla				pla
.8ef0	60		rts				rts
.8ef1					Int32ShiftDivide:
.8ef1	48		pha				pha 								; save AY
.8ef2	5a		phy				phy
.8ef3	e8		inx				inx 								; clear S[X+2]
.8ef4	e8		inx				inx
.8ef5	20 9b 88	jsr $889b			jsr 	NSMSetZero
.8ef8	ca		dex				dex
.8ef9	ca		dex				dex
.8efa	a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.8efc					_I32SDLoop:
.8efc	20 0f 8f	jsr $8f0f			jsr 	DivideCheckSubtract 		; check if subtract possible
.8eff	e8		inx				inx
.8f00	e8		inx				inx
.8f01	20 b1 88	jsr $88b1			jsr 	NSMRotateLeft				; shift 64 bit FPA left, rotating carry in
.8f04	ca		dex				dex
.8f05	ca		dex				dex
.8f06	20 b1 88	jsr $88b1			jsr 	NSMRotateLeft
.8f09	88		dey				dey 	 							; do 31 times
.8f0a	d0 f0		bne $8efc			bne 	_I32SDLoop
.8f0c	7a		ply				ply 								; restore AY and exit
.8f0d	68		pla				pla
.8f0e	60		rts				rts
.8f0f					DivideCheckSubtract:
.8f0f	20 ca 82	jsr $82ca			jsr 	SubTopTwoStack 				; subtract Stack[X+1] from Stack[X+0]
.8f12	b0 04		bcs $8f18			bcs 	_DCSExit 					; if carry set, then could do, exit
.8f14	20 a4 82	jsr $82a4			jsr 	AddTopTwoStack 				; add it back in
.8f17	18		clc				clc 								; and return False
.8f18					_DCSExit:
.8f18	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/binary/multiply.asm

.8f19					MulInteger:
.8f19	fa		plx				plx
.8f1a	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8f1d	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8f20	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8f21	0a		asl a				asl 	a
.8f22	10 05		bpl $8f29			bpl 	_NotRef
.8f24	48		pha				pha
.8f25	20 a4 84	jsr $84a4			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8f28	68		pla				pla
.8f29					_NotRef:
.8f29	0a		asl a				asl 	a 							; put MSB of type into A:7
.8f2a	30 0b		bmi $8f37			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.8f2c	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8f2f	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8f32	f0 06		beq $8f3a			beq 	_IntegerCode 				; if clear, then we have two integers
.8f34	4c 6d 91	jmp $916d			jmp 	FloatingPointMultiply 							; otherwise at least one float.
.8f37					_StringData:
.8f37	4c 0b 93	jmp $930b			jmp 	NotDoneError							; at least one string - don't know both are strings.
.8f3a					_IntegerCode:
.8f3a	20 47 8f	jsr $8f47			jsr 	MultiplyShort
.8f3d	c9 00		cmp #$00			cmp 	#0
.8f3f	f0 05		beq $8f46			beq 	_MIExit
.8f41	a9 04		lda #$04		lda	#4
.8f43	4c be 81	jmp $81be		jmp	ErrorHandler
.8f46					_MIExit:
.8f46	60		rts				rts
.8f47					MultiplyShort:
.8f47	5a		phy				phy 								; save Y
.8f48	20 72 88	jsr $8872			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.8f4b	20 97 88	jsr $8897			jsr 	NSMSetZeroMantissaOnly 		; set mantissa S[X] to zero
.8f4e	a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.8f50					_I32MLoop:
.8f50	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.8f53	1d 12 06	ora $0612,x			ora 	NSMantissa1+2,x
.8f56	1d 1a 06	ora $061a,x			ora 	NSMantissa2+2,x
.8f59	1d 22 06	ora $0622,x			ora 	NSMantissa3+2,x
.8f5c	f0 28		beq $8f86			beq 	_I32MExit 					; exit if zero
.8f5e	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.8f61	29 01		and #$01			and 	#1
.8f63	f0 0e		beq $8f73			beq 	_I32MNoAdd
.8f65	20 a4 82	jsr $82a4			jsr 	AddTopTwoStack 				; if so add S[X+1] to S[X+0]
.8f68	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.8f6b	10 06		bpl $8f73			bpl 	_I32MNoAdd
.8f6d					_I32ShiftRight:
.8f6d	20 be 88	jsr $88be			jsr 	NSMShiftRight 				; shift S[X] right
.8f70	c8		iny				iny 								; increment shift count
.8f71	80 0a		bra $8f7d			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.8f73					_I32MNoAdd:
.8f73	3c 21 06	bit $0621,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.8f76	70 f5		bvs $8f6d			bvs 	_I32ShiftRight 				; instead.
.8f78	e8		inx				inx
.8f79	20 b0 88	jsr $88b0			jsr 	NSMShiftLeft 				; shift additive S[X+1] left
.8f7c	ca		dex				dex
.8f7d					_I32MShiftUpper:
.8f7d	e8		inx				inx 								; shift S[X+2] right
.8f7e	e8		inx				inx
.8f7f	20 be 88	jsr $88be			jsr 	NSMShiftRight
.8f82	ca		dex				dex
.8f83	ca		dex				dex
.8f84	80 ca		bra $8f50			bra 	_I32MLoop 					; try again.
.8f86					_I32MExit:
.8f86	20 8c 8f	jsr $8f8c			jsr 	CalculateSign
.8f89	98		tya				tya 								; shift in A
.8f8a	7a		ply				ply 								; restore Y and exit
.8f8b	60		rts				rts
.8f8c					CalculateSign:
.8f8c	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.8f8f	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; shift result left
.8f92	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.8f95	0a		asl a				asl 	a 							; shift bit 7 into carry
.8f96	7e 00 06	ror $0600,x			ror 	NSStatus,x 					; shift right into status byte.
.8f99	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/binary/scompare.asm

.8221					CompareStrings:
.8221	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check both are strings
.8224	3d 01 06	and $0601,x			and 	NSStatus+1,x
.8227	29 10		and #$10			and 	#NSBIsString
.8229	f0 2c		beq $8257			beq 	_CSTypeError
.822b	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy string addresses to zTemp0/1
.822e	85 36		sta $36				sta 	zTemp0
.8230	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8233	85 37		sta $37				sta 	zTemp0+1
.8235	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.8238	85 38		sta $38				sta 	zTemp1
.823a	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.823d	85 39		sta $39				sta 	zTemp1+1
.823f	5a		phy				phy 								; save Y so we can access strings
.8240	a0 ff		ldy #$ff			ldy 	#$FF 						; -1 for pre increment.
.8242					_CSLoop:
.8242	c8		iny				iny
.8243	b1 36		lda ($36),y			lda 	(zTemp0),y 					; check if they are the same
.8245	d1 38		cmp ($38),y			cmp 	(zTemp1),y
.8247	d0 06		bne $824f			bne 	_CSDifferent
.8249	c9 00		cmp #$00			cmp 	#0 							; reached end ?
.824b	d0 f5		bne $8242			bne 	_CSLoop 					; still comparing
.824d					_CSExit:
.824d	7a		ply				ply 								; reached end, return zero in A from EOS
.824e	60		rts				rts
.824f					_CSDifferent:
.824f	a9 ff		lda #$ff			lda 	#255 						; if < return $FF
.8251	90 fa		bcc $824d			bcc		_CSExit
.8253	a9 01		lda #$01			lda 	#1 							; otherwise return 1.
.8255	80 f6		bra $824d			bra 	_CSExit
.8257					_CSTypeError:
.8257	4c 01 93	jmp $9301			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/binary/shifts.asm

.825a					ShiftLeft:
.825a	38		sec				sec
.825b	80 01		bra $825e			bra 	ShiftMain
.825d					ShiftRight:
.825d	18		clc				clc
.825e					ShiftMain:
.825e	fa		plx				plx 								; restore X
.825f	08		php				php 								; save direction
.8260	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8263	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8266	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8267	0a		asl a				asl 	a
.8268	10 05		bpl $826f			bpl 	_NotRef
.826a	48		pha				pha
.826b	20 a4 84	jsr $84a4			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.826e	68		pla				pla
.826f					_NotRef:
.826f	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8271	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8274	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8277	f0 03		beq $827c			beq 	_IntegerCode 				; if clear, then we have two integers
.8279	4c 01 93	jmp $9301			jmp 	TypeError 					; anything else, type mismatch.
.827c					_IntegerCode:
.827c	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; check number < 32
.827f	29 e0		and #$e0			and 	#$E0
.8281	1d 11 06	ora $0611,x			ora 	NSMantissa1+1,x
.8284	1d 19 06	ora $0619,x			ora 	NSMantissa2+1,x
.8287	1d 21 06	ora $0621,x			ora 	NSMantissa3+1,x
.828a	d0 13		bne $829f			bne 	_SMExit0 					; if >= 32 it will always return zero.
.828c					_SMLoop:
.828c	de 09 06	dec $0609,x			dec 	NSMantissa0+1,x 			; predecrement, could do << 0
.828f	30 11		bmi $82a2			bmi 	_SMExit 					; exit if done.
.8291	28		plp				plp 								; restore direcition setting
.8292	08		php				php
.8293	90 05		bcc $829a			bcc 	_SMRight
.8295	20 b0 88	jsr $88b0			jsr 	NSMShiftLeft 				; shift left if CS
.8298	80 f2		bra $828c			bra 	_SMLoop
.829a					_SMRight:
.829a	20 be 88	jsr $88be			jsr 	NSMShiftRight 				; shift right if CC
.829d	80 ed		bra $828c			bra 	_SMLoop
.829f					_SMExit0:
.829f	20 9b 88	jsr $889b			jsr 	NSMSetZero 					; return zero.
.82a2					_SMExit:
.82a2	28		plp				plp 								; throw direction
.82a3	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/binary/simple.asm

.82a4					AddTopTwoStack:
.82a4	18		clc				clc
.82a5	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.82a8	7d 09 06	adc $0609,x			adc 		NSMantissa0+1,x
.82ab	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.82ae	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.82b1	7d 11 06	adc $0611,x			adc 		NSMantissa1+1,x
.82b4	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.82b7	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.82ba	7d 19 06	adc $0619,x			adc 		NSMantissa2+1,x
.82bd	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.82c0	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.82c3	7d 21 06	adc $0621,x			adc 		NSMantissa3+1,x
.82c6	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.82c9	60		rts				rts
.82ca					SubTopTwoStack:
.82ca	38		sec				sec
.82cb	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.82ce	fd 09 06	sbc $0609,x			sbc 		NSMantissa0+1,x
.82d1	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.82d4	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.82d7	fd 11 06	sbc $0611,x			sbc 		NSMantissa1+1,x
.82da	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.82dd	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.82e0	fd 19 06	sbc $0619,x			sbc 		NSMantissa2+1,x
.82e3	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.82e6	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.82e9	fd 21 06	sbc $0621,x			sbc 		NSMantissa3+1,x
.82ec	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.82ef	60		rts				rts
.82f0					AddInteger:
.82f0	fa		plx				plx
.82f1	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.82f4	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.82f7	0a		asl a				asl 	a 							; shift reference bit into sign bit
.82f8	0a		asl a				asl 	a
.82f9	10 05		bpl $8300			bpl 	_NotRef
.82fb	48		pha				pha
.82fc	20 a4 84	jsr $84a4			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.82ff	68		pla				pla
.8300					_NotRef:
.8300	0a		asl a				asl 	a 							; put MSB of type into A:7
.8301	30 0b		bmi $830e			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.8303	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8306	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8309	f0 06		beq $8311			beq 	_IntegerCode 				; if clear, then we have two integers
.830b	4c f5 8f	jmp $8ff5			jmp 	FloatingPointAdd 							; otherwise at least one float.
.830e					_StringData:
.830e	4c 0b 93	jmp $930b			jmp 	NotDoneError							; at least one string - don't know both are strings.
.8311					_IntegerCode:
.8311					AddCode:
.8311	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.8314	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.8317	10 8b		bpl $82a4			bpl 	AddTopTwoStack
.8319	20 ca 82	jsr $82ca			jsr 	SubTopTwoStack 				; do a physical subtraction
.831c	3c 20 06	bit $0620,x			bit 	NSMantissa3,x 				; result is +ve, okay
.831f	10 09		bpl $832a			bpl 	_AddExit
.8321	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; sign is that of 2nd value
.8324	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8327	20 50 88	jsr $8850			jsr 	NSMNegateMantissa 			; negate the mantissa and exit
.832a					_AddExit:
.832a	60		rts				rts
.832b					SubInteger:
.832b	fa		plx				plx
.832c	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.832f	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8332	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8333	0a		asl a				asl 	a
.8334	10 05		bpl $833b			bpl 	_NotRef
.8336	48		pha				pha
.8337	20 a4 84	jsr $84a4			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.833a	68		pla				pla
.833b					_NotRef:
.833b	0a		asl a				asl 	a 							; put MSB of type into A:7
.833c	30 0b		bmi $8349			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.833e	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8341	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8344	f0 06		beq $834c			beq 	_IntegerCode 				; if clear, then we have two integers
.8346	4c fa 8f	jmp $8ffa			jmp 	FloatingPointSub 							; otherwise at least one float.
.8349					_StringData:
.8349	4c 0b 93	jmp $930b			jmp 	NotDoneError							; at least one string - don't know both are strings.
.834c					_IntegerCode:
.834c	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; negate the second value.
.834f	49 80		eor #$80			eor 	#$80
.8351	9d 01 06	sta $0601,x			sta 	NSStatus+1,x
.8354	80 bb		bra $8311			bra 	AddCode 					; and do the same code as add.
.8356					AndInteger:
.8356	fa		plx				plx
.8357	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.835a	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.835d	0a		asl a				asl 	a 							; shift reference bit into sign bit
.835e	0a		asl a				asl 	a
.835f	10 05		bpl $8366			bpl 	_NotRef
.8361	48		pha				pha
.8362	20 a4 84	jsr $84a4			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8365	68		pla				pla
.8366					_NotRef:
.8366	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8368	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.836b	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.836e	f0 03		beq $8373			beq 	_IntegerCode 				; if clear, then we have two integers
.8370	4c 01 93	jmp $9301			jmp 	TypeError 					; anything else, type mismatch.
.8373					_IntegerCode:
.8373	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8376	3d 09 06	and $0609,x			and 		NSMantissa0+1,x
.8379	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.837c	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.837f	3d 11 06	and $0611,x			and 		NSMantissa1+1,x
.8382	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8385	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8388	3d 19 06	and $0619,x			and 		NSMantissa2+1,x
.838b	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.838e	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8391	3d 21 06	and $0621,x			and 		NSMantissa3+1,x
.8394	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8397	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.839a	60		rts				rts
.839b					OraInteger:
.839b	fa		plx				plx
.839c	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.839f	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.83a2	0a		asl a				asl 	a 							; shift reference bit into sign bit
.83a3	0a		asl a				asl 	a
.83a4	10 05		bpl $83ab			bpl 	_NotRef
.83a6	48		pha				pha
.83a7	20 a4 84	jsr $84a4			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.83aa	68		pla				pla
.83ab					_NotRef:
.83ab	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.83ad	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.83b0	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.83b3	f0 03		beq $83b8			beq 	_IntegerCode 				; if clear, then we have two integers
.83b5	4c 01 93	jmp $9301			jmp 	TypeError 					; anything else, type mismatch.
.83b8					_IntegerCode:
.83b8	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.83bb	1d 09 06	ora $0609,x			ora 		NSMantissa0+1,x
.83be	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.83c1	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.83c4	1d 11 06	ora $0611,x			ora 		NSMantissa1+1,x
.83c7	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.83ca	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.83cd	1d 19 06	ora $0619,x			ora 		NSMantissa2+1,x
.83d0	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.83d3	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.83d6	1d 21 06	ora $0621,x			ora 		NSMantissa3+1,x
.83d9	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.83dc	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.83df	60		rts				rts
.83e0					EorInteger:
.83e0	fa		plx				plx
.83e1	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.83e4	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.83e7	0a		asl a				asl 	a 							; shift reference bit into sign bit
.83e8	0a		asl a				asl 	a
.83e9	10 05		bpl $83f0			bpl 	_NotRef
.83eb	48		pha				pha
.83ec	20 a4 84	jsr $84a4			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.83ef	68		pla				pla
.83f0					_NotRef:
.83f0	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.83f2	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.83f5	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.83f8	f0 03		beq $83fd			beq 	_IntegerCode 				; if clear, then we have two integers
.83fa	4c 01 93	jmp $9301			jmp 	TypeError 					; anything else, type mismatch.
.83fd					_IntegerCode:
.83fd	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8400	5d 09 06	eor $0609,x			eor 		NSMantissa0+1,x
.8403	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8406	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8409	5d 11 06	eor $0611,x			eor 		NSMantissa1+1,x
.840c	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.840f	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8412	5d 19 06	eor $0619,x			eor 		NSMantissa2+1,x
.8415	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8418	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.841b	5d 21 06	eor $0621,x			eor 		NSMantissa3+1,x
.841e	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8421	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.8424	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/binary/tostring.asm

.8f9a					ConvertInt16:
.8f9a	8d 08 06	sta $0608			sta 	NSMantissa0 				; set up as 32 bit conversion
.8f9d	8e 10 06	stx $0610			stx 	NSMantissa1
.8fa0	9c 18 06	stz $0618			stz 	NSMantissa2
.8fa3	9c 20 06	stz $0620			stz 	NSMantissa3
.8fa6	9c 00 06	stz $0600			stz 	NSStatus 					; positive integer
.8fa9	a2 00		ldx #$00			ldx 	#0 							; stack level
.8fab	a9 0a		lda #$0a			lda 	#10 						; base
.8fad	80 00		bra $8faf			bra 	ConvertInt32
.8faf					ConvertInt32:
.8faf	5a		phy				phy
.8fb0	a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.8fb2	2c 00 06	bit $0600			bit 	NSStatus 					; output a - if not negative.
.8fb5	10 08		bpl $8fbf			bpl 	_CI32NotNeg
.8fb7	48		pha				pha
.8fb8	a9 2d		lda #$2d			lda 	#'-'
.8fba	99 5f 08	sta $085f,y			sta 	NumberBuffer,y
.8fbd	c8		iny				iny
.8fbe	68		pla				pla
.8fbf					_CI32NotNeg:
.8fbf	20 cd 8f	jsr $8fcd			jsr 	_CI32DivideConvert 			; recursive conversion
.8fc2	a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.8fc4	99 5f 08	sta $085f,y			sta 	NumberBuffer,y
.8fc7	7a		ply				ply
.8fc8	a2 08		ldx #$08			ldx 	#NumberBuffer >> 8
.8fca	a9 5f		lda #$5f			lda 	#NumberBuffer & $FF
.8fcc	60		rts				rts
.8fcd					_CI32DivideConvert:
.8fcd	e8		inx				inx 								; write to next slot up
.8fce	20 9d 88	jsr $889d			jsr 	NSMSetByte
.8fd1	ca		dex				dex
.8fd2	20 cf 8e	jsr $8ecf			jsr 	Int32Divide 				; divide
.8fd5	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; save remainder
.8fd8	48		pha				pha
.8fd9	20 7f 8e	jsr $8e7f			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.8fdc	20 cb 88	jsr $88cb			jsr 	NSMIsZero 					; is it zero ?
.8fdf	f0 06		beq $8fe7			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.8fe1	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.8fe4	20 cd 8f	jsr $8fcd			jsr 	_CI32DivideConvert 			; and recusrively call.
.8fe7					_CI32NoRecurse:
.8fe7	68		pla				pla 								; remainder
.8fe8	c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII
.8fea	90 02		bcc $8fee			bcc 	_CI32NotHex
.8fec	69 26		adc #$26			adc 	#6+32
.8fee					_CI32NotHex:
.8fee	69 30		adc #$30			adc 	#48
.8ff0	99 5f 08	sta $085f,y			sta 	NumberBuffer,y 				; write out and exit
.8ff3	c8		iny				iny
.8ff4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/expression.asm


;******  Processing file: ./expressions/../generated/precedence.dat

.8425					PrecedenceLevel:
>8425	04					.byte	 4	; $00 <<
>8426	02					.byte	 2	; $01 <=
>8427	02					.byte	 2	; $02 <>
>8428	00					.byte	 0	; $03 !!3
>8429	00					.byte	 0	; $04 ><
>842a	02					.byte	 2	; $05 >=
>842b	04					.byte	 4	; $06 >>
>842c	00					.byte	 0	; $07 !!7
>842d	00					.byte	 0	; $08 !!8
>842e	00					.byte	 0	; $09 !!9
>842f	00					.byte	 0	; $0a !!10
>8430	00					.byte	 0	; $0b !!11
>8431	00					.byte	 0	; $0c !!12
>8432	00					.byte	 0	; $0d !!13
>8433	00					.byte	 0	; $0e !!14
>8434	00					.byte	 0	; $0f !!15
>8435	00					.byte	 0	; $10 @
>8436	00					.byte	 0	; $11 !!17
>8437	00					.byte	 0	; $12 !!18
>8438	00					.byte	 0	; $13 [
>8439	04					.byte	 4	; $14 \
>843a	00					.byte	 0	; $15 ]
>843b	01					.byte	 1	; $16 ^
>843c	00					.byte	 0	; $17 _
>843d	00					.byte	 0	; $18 `
>843e	00					.byte	 0	; $19 !!25
>843f	00					.byte	 0	; $1a !!26
>8440	00					.byte	 0	; $1b {
>8441	01					.byte	 1	; $1c |
>8442	00					.byte	 0	; $1d }
>8443	00					.byte	 0	; $1e ~
>8444	00					.byte	 0	; $1f [7m<7F>[m
>8445	00					.byte	 0	; $20
>8446	05					.byte	 5	; $21 !
>8447	00					.byte	 0	; $22 "
>8448	00					.byte	 0	; $23 #
>8449	05					.byte	 5	; $24 $
>844a	04					.byte	 4	; $25 %
>844b	01					.byte	 1	; $26 &
>844c	00					.byte	 0	; $27 '
>844d	00					.byte	 0	; $28 (
>844e	00					.byte	 0	; $29 )
>844f	04					.byte	 4	; $2a *
>8450	03					.byte	 3	; $2b +
>8451	00					.byte	 0	; $2c ,
>8452	03					.byte	 3	; $2d -
>8453	00					.byte	 0	; $2e .
>8454	04					.byte	 4	; $2f /
>8455	00					.byte	 0	; $30 0
>8456	00					.byte	 0	; $31 1
>8457	00					.byte	 0	; $32 2
>8458	00					.byte	 0	; $33 3
>8459	00					.byte	 0	; $34 4
>845a	00					.byte	 0	; $35 5
>845b	00					.byte	 0	; $36 6
>845c	00					.byte	 0	; $37 7
>845d	00					.byte	 0	; $38 8
>845e	00					.byte	 0	; $39 9
>845f	00					.byte	 0	; $3a :
>8460	00					.byte	 0	; $3b ;
>8461	02					.byte	 2	; $3c <
>8462	02					.byte	 2	; $3d =
>8463	02					.byte	 2	; $3e >
>8464	05					.byte	 5	; $3f ?

;******  Return to file: ./expressions/expression.asm

.8465					EvaluateExpressionAt0:
.8465	a2 00		ldx #$00			ldx 	#0 							; bottom stack level
.8467					EvaluateExpression:
.8467	a9 00		lda #$00			lda 	#0 							; lowest precedence level
.8469					EvaluateExpressionAtPrecedence:
.8469	48		pha				pha 								; save precedence level
.846a	20 65 86	jsr $8665			jsr 	EvaluateTerm 				; evaluate term into level X.
.846d	68		pla				pla 								; restore precedence level.
.846e					_EXPRLoop:
.846e	85 36		sta $36				sta 	zTemp0 						; save current precedence level.
.8470	b1 30		lda ($30),y			lda 	(codePtr),y
.8472	c9 40		cmp #$40			cmp		#$40 						; if >= $40 cannot be an operator
.8474	b0 25		bcs $849b			bcs 	_EXPRExit
.8476	da		phx				phx 								; read the operator precedence
.8477	aa		tax				tax
.8478	bd 25 84	lda $8425,x			lda 	PrecedenceLevel,x
.847b	fa		plx				plx
.847c	c9 00		cmp #$00			cmp 	#0							; if zero exit (not an operator)
.847e	f0 1b		beq $849b			beq 	_EXPRExit
.8480	85 37		sta $37				sta 	zTemp0+1 					; save operator precedence level.
.8482	a5 36		lda $36				lda 	zTemp0 						; compare current precedence vs. operator precedence
.8484	c5 37		cmp $37				cmp 	zTemp0+1
.8486	b0 13		bcs $849b			bcs		_EXPRExit 					; if current >= operator exit
.8488	48		pha				pha 								; save current precedence.
.8489	b1 30		lda ($30),y			lda 	(codePtr),y
.848b	c8		iny				iny
.848c	48		pha				pha
.848d	a5 37		lda $37				lda 	zTemp0+1 					; get operator precedence level
.848f	e8		inx				inx 								; work out the right hand side.
.8490	20 69 84	jsr $8469			jsr 	EvaluateExpressionAtPrecedence
.8493	ca		dex				dex
.8494	68		pla				pla 								; get operator, call the code.
.8495	20 9e 84	jsr $849e			jsr 	_EXPRCaller
.8498	68		pla				pla 								; restore precedence level
.8499	80 d3		bra $846e			bra 	_EXPRLoop 					; and go round.
.849b					_EXPRExit:
.849b	a5 36		lda $36				lda 	zTemp0 						; A = current precedence level.
.849d	60		rts				rts
.849e					_EXPRCaller:
.849e	da		phx				phx 								; save on stack, first thing is to restore it
.849f	0a		asl a				asl 	a 							; double so can use vectors into X
.84a0	aa		tax				tax
.84a1	7c 14 80	jmp ($8014,x)			jmp 	(VectorSetPunc,x) 			; and go to the code.

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/float/addsub.asm

.8ff5					FloatingPointAdd:
.8ff5	20 96 91	jsr $9196			jsr 	FloatPrepare 				; prepare for floats
.8ff8	80 0b		bra $9005			bra 	FloatAdd
.8ffa					FloatingPointSub:
.8ffa	20 96 91	jsr $9196			jsr 	FloatPrepare 				; prepare for floats
.8ffd					FloatSubtract:
.8ffd	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; negate FPB
.9000	49 80		eor #$80			eor 	#$80
.9002	9d 01 06	sta $0601,x			sta 	NSStatus+1,x				; and fall through.
.9005					FloatAdd:
.9005	48		pha				pha
.9006	5a		phy				phy
.9007	20 a7 91	jsr $91a7			jsr 	NSNormalise 				; normalise S[X]
.900a	f0 54		beq $9060			beq 	_FAReturn1
.900c	e8		inx				inx 								; normalise S[X+1]
.900d	20 a7 91	jsr $91a7			jsr 	NSNormalise
.9010	ca		dex				dex
.9011	c9 00		cmp #$00			cmp 	#0
.9013	f0 6f		beq $9084			beq 	_FAExit 					; if so, just return A
.9015	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; are the exponents the same ?
.9018	dd 29 06	cmp $0629,x			cmp 	NSExponent+1,x
.901b	f0 1b		beq $9038			beq 	_FAExponentsEqual
.901d	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; work out the larger exponent
.9020	a8		tay				tay
.9021	38		sec				sec 								; do a signed comparison of the exponents.
.9022	fd 29 06	sbc $0629,x			sbc 	NSExponent+1,x
.9025	50 02		bvc $9029			bvc 	_FANoSignedChange
.9027	49 80		eor #$80			eor 	#$80
.9029					_FANoSignedChange:
.9029	29 80		and #$80			and 	#$80
.902b	10 03		bpl $9030			bpl 	_FAHaveMax
.902d	bc 29 06	ldy $0629,x			ldy 	NSExponent+1,x
.9030					_FAHaveMax:
.9030	20 87 90	jsr $9087			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.9033	e8		inx				inx
.9034	20 87 90	jsr $9087			jsr 	_FAShiftToExponent
.9037	ca		dex				dex
.9038					_FAExponentsEqual:
.9038	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; are the signs the same
.903b	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.903e	30 10		bmi $9050			bmi 	_FADifferentSigns
.9040	20 a4 82	jsr $82a4			jsr 	AddTopTwoStack 				; do the add of the mantissae
.9043	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.9046	10 3c		bpl $9084			bpl 	_FAExit 					; if no, we are done.
.9048	20 be 88	jsr $88be			jsr 	NSMShiftRight 				; shift A right, renormalising it.
.904b	fe 28 06	inc $0628,x			inc 	NSExponent,x 				; bump the exponent and exit
.904e	80 34		bra $9084			bra 	_FAExit
.9050					_FADifferentSigns:
.9050	20 ca 82	jsr $82ca			jsr 	SubTopTwoStack 				; subtract mantissa B from A
.9053	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; is the result negative ?
.9056	10 2c		bpl $9084			bpl 	_FAExit 					; if no, we are done.
.9058	20 47 88	jsr $8847			jsr 	NSMNegate 					; netate result
.905b	20 50 88	jsr $8850			jsr 	NSMNegateMantissa 			; negate (2'c) the mantissa
.905e	80 24		bra $9084			bra 	_FAExit
.9060					_FAReturn1:
.9060	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.9063	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.9066	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.9069	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.906c	bd 19 06	lda $0619,x			lda 	NSMantissa2+1,x
.906f	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.9072	bd 21 06	lda $0621,x			lda 	NSMantissa3+1,x
.9075	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.9078	bd 29 06	lda $0629,x			lda 	NSExponent+1,x
.907b	9d 28 06	sta $0628,x			sta 	NSExponent,x
.907e	bd 01 06	lda $0601,x			lda 	NSStatus+1,x
.9081	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9084					_FAExit:
.9084	7a		ply				ply
.9085	68		pla				pla
.9086	60		rts				rts
.9087					_FAShiftToExponent:
.9087					_FAShiftToExponent2:
.9087	98		tya				tya 								; compare Y to exponent
.9088	dd 28 06	cmp $0628,x			cmp 	NSExponent,x 				; reached the exponent required ?
.908b	f0 08		beq $9095			beq 	_FASEExit 					; exit if so.
.908d	20 be 88	jsr $88be			jsr 	NSMShiftRight	 			; shift the mantissa right
.9090	fe 28 06	inc $0628,x			inc 	NSExponent,x 				; increment exponent
.9093	80 f2		bra $9087			bra 	_FAShiftToExponent2
.9095					_FASEExit:
.9095	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/float/compare.asm

.9096					CompareFloat:
.9096	20 fd 8f	jsr $8ffd			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.9099	bd 10 06	lda $0610,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.909c	29 fc		and #$fc			and 	#$FC
.909e	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.90a1	1d 20 06	ora $0620,x			ora 	NSMantissa3,x
.90a4	f0 09		beq $90af			beq 	_FCExit 					; zero, so approximately identical
.90a6	a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.90a8	3c 00 06	bit $0600,x			bit 	NSStatus,x
.90ab	10 02		bpl $90af			bpl 	_FCExit
.90ad					_FCNegative:
.90ad	a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.90af					_FCExit:
.90af	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/float/divide.asm

.90b0					FDivideCommand:
.90b0	fa		plx				plx	 								; restore stack position
.90b1	20 96 91	jsr $9196			jsr 	FloatPrepare 				; prepare for floats
.90b4					FloatDivide:
.90b4	48		pha				pha
.90b5	e8		inx				inx
.90b6	20 a7 91	jsr $91a7			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.90b9	ca		dex				dex
.90ba	c9 00		cmp #$00			cmp 	#0
.90bc	f0 20		beq $90de			beq 	_FDZero
.90be	20 a7 91	jsr $91a7			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.90c1	f0 19		beq $90dc			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.90c3	20 f1 8e	jsr $8ef1			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.90c6	20 7f 8e	jsr $8e7f			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.90c9	20 a7 91	jsr $91a7			jsr		NSNormalise 				; renormalise
.90cc	20 8c 8f	jsr $8f8c			jsr 	CalculateSign 				; calculate result sign
.90cf	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; calculate exponent
.90d2	38		sec				sec
.90d3	fd 29 06	sbc $0629,x			sbc 	NSExponent+1,x
.90d6	38		sec				sec
.90d7	e9 1e		sbc #$1e			sbc 	#30
.90d9	9d 28 06	sta $0628,x			sta 	NSExponent,x
.90dc					_FDExit:
.90dc	68		pla				pla
.90dd	60		rts				rts
.90de					_FDZero:
.90de	a9 03		lda #$03		lda	#3
.90e0	4c be 81	jmp $81be		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/float/fractional.asm

.90e3					FloatFractionalPart:
.90e3	5a		phy				phy
.90e4	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; take absolute value
.90e7	29 7f		and #$7f			and 	#$7F
.90e9	9d 00 06	sta $0600,x			sta 	NSStatus,x
.90ec	20 a7 91	jsr $91a7			jsr 	NSNormalise
.90ef	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.90f2	38		sec				sec
.90f3	e9 e0		sbc #$e0			sbc 	#$E0
.90f5	90 31		bcc $9128			bcc 	_FFPExit 					; already fractional
.90f7	c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.90f9	b0 2a		bcs $9125			bcs 	_FFPZero
.90fb	a8		tay				tay 								; put count to do in Y
.90fc	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; do each in turn.
.90ff	20 2a 91	jsr $912a			jsr 	_FFPPartial
.9102	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.9105	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.9108	20 2a 91	jsr $912a			jsr 	_FFPPartial
.910b	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.910e	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.9111	20 2a 91	jsr $912a			jsr 	_FFPPartial
.9114	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9117	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.911a	20 2a 91	jsr $912a			jsr 	_FFPPartial
.911d	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.9120	20 cb 88	jsr $88cb			jsr 	NSMIsZero 					; zeroed check.
.9123	d0 03		bne $9128			bne 	_FFPExit
.9125					_FFPZero:
.9125	20 9b 88	jsr $889b			jsr 	NSMSetZero
.9128					_FFPExit:
.9128	7a		ply				ply
.9129	60		rts				rts
.912a					_FFPPartial:
.912a	c0 00		cpy #$00			cpy 	#0 							; no more to do
.912c	f0 17		beq $9145			beq 	_FFFPPExit
.912e	c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.9130	b0 0c		bcs $913e			bcs 	_FFFPPWholeByte
.9132	5a		phy				phy
.9133					_FFFPPLeft:
.9133	0a		asl a				asl 	a
.9134	88		dey				dey
.9135	d0 fc		bne $9133			bne 	_FFFPPLeft
.9137	7a		ply				ply
.9138					_FFFPPRight:
.9138	4a		lsr a				lsr 	a
.9139	88		dey				dey
.913a	d0 fc		bne $9138			bne 	_FFFPPRight
.913c	80 07		bra $9145			bra 	_FFFPPExit
.913e					_FFFPPWholeByte:
.913e	98		tya				tya 								; subtract 8 from count
.913f	38		sec				sec
.9140	e9 08		sbc #$08			sbc 	#8
.9142	a8		tay				tay
.9143	a9 00		lda #$00			lda 	#0 							; and clear all
.9145					_FFFPPExit:
.9145	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/float/integer.asm

.9146					FloatIntegerPart:
.9146	48		pha				pha
.9147	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; is it integer already ?
.914a	f0 1f		beq $916b			beq 	_FIPExit 					; if so do nothing
.914c	20 cb 88	jsr $88cb			jsr 	NSMIsZero 					; is it zero ?
.914f	f0 17		beq $9168			beq 	_FIPZero 					; if so return zero.
.9151	20 a7 91	jsr $91a7			jsr 	NSNormalise 				; normalise
.9154	f0 12		beq $9168			beq 	_FIPZero 					; normalised to zero, exit zero
.9156					_FIPShift:
.9156	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.9159	10 08		bpl $9163			bpl 	_FIPCheckZero
.915b	20 be 88	jsr $88be			jsr 	NSMShiftRight 				; shift mantissa right
.915e	fe 28 06	inc $0628,x			inc 	NSExponent,x 				; bump exponent
.9161	80 f3		bra $9156			bra 	_FIPShift
.9163					_FIPCheckZero:
.9163	20 cb 88	jsr $88cb			jsr 	NSMIsZero 					; avoid -0 problem
.9166	d0 03		bne $916b			bne 	_FIPExit 					; set to zero if mantissa zero.
.9168					_FIPZero:
.9168	20 9b 88	jsr $889b			jsr 	NSMSetZero
.916b					_FIPExit:
.916b	68		pla				pla
.916c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/float/multiply.asm

.916d					FloatingPointMultiply:
.916d	20 96 91	jsr $9196			jsr 	FloatPrepare 				; prepare for floats
.9170					FloatMultiply:
.9170	48		pha				pha
.9171	20 a7 91	jsr $91a7			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.9174	f0 1b		beq $9191			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.9176	e8		inx				inx
.9177	20 a7 91	jsr $91a7			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.917a	ca		dex				dex
.917b	c9 00		cmp #$00			cmp 	#0
.917d	f0 0f		beq $918e			beq 	_FDSetZero
.917f	20 47 8f	jsr $8f47			jsr 	MultiplyShort 				; calculate the result.
.9182	7d 28 06	adc $0628,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.9185	18		clc				clc
.9186	7d 29 06	adc $0629,x			adc 	NSExponent+1,x
.9189	9d 28 06	sta $0628,x			sta 	NSExponent,x
.918c	80 03		bra $9191			bra 	_FDExit
.918e					_FDSetZero:
.918e	20 9b 88	jsr $889b			jsr 	NSMSetZero 					; return 0
.9191					_FDExit:
.9191	20 a7 91	jsr $91a7			jsr 	NSNormalise 				; normalise the result
.9194	68		pla				pla
.9195	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/float/utility.asm

.9196					FloatPrepare:
.9196	20 a4 84	jsr $84a4			jsr 	DereferenceTopTwo 			; dereference the top two values
.9199	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check ints/floats
.919c	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.919f	29 10		and #$10			and 	#NSBIsString
.91a1	d0 01		bne $91a4			bne 	_FDType
.91a3	60		rts				rts
.91a4					_FDType:
.91a4	4c 01 93	jmp $9301			jmp 	TypeError
.91a7					NSNormalise:
.91a7	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; make float, keep sign
.91aa	29 80		and #$80			and 	#$80
.91ac	09 08		ora #$08			ora 	#NSTFloat
.91ae	9d 00 06	sta $0600,x			sta 	NSStatus,x
.91b1	20 cb 88	jsr $88cb			jsr 	NSMIsZero 					; if zero exit
.91b4	d0 09		bne $91bf			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.91b6	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; clear the sign bit.
.91b9	7e 00 06	ror $0600,x			ror 	NSStatus,x 					; (no -0)
.91bc	a9 00		lda #$00			lda 	#0 							; set Z flag
.91be	60		rts				rts
.91bf					_NSNormaliseOptimise:
.91bf	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; upper byte zero ?
.91c2	d0 22		bne $91e6			bne 	_NSNormaliseLoop
.91c4	bd 18 06	lda $0618,x			lda 	NSMantissa2,x 				; byte normalise
.91c7	30 1d		bmi $91e6			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.91c9	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.91cc	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.91cf	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.91d2	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.91d5	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.91d8	9e 08 06	stz $0608,x			stz 	NSMantissa0,x
.91db	bd 28 06	lda $0628,x			lda 	NSExponent,x
.91de	38		sec				sec
.91df	e9 08		sbc #$08			sbc 	#8
.91e1	9d 28 06	sta $0628,x			sta 	NSExponent,x
.91e4	80 d9		bra $91bf			bra 	_NSNormaliseOptimise
.91e6					_NSNormaliseLoop:
.91e6	3c 20 06	bit $0620,x			bit 	NSMantissa3,x 				; bit 30 set ?
.91e9	70 08		bvs $91f3			bvs 	_NSNExit 					; exit if so with Z flag clear
.91eb	20 b0 88	jsr $88b0			jsr 	NSMShiftLeft 				; shift mantissa left
.91ee	de 28 06	dec $0628,x			dec 	NSExponent,x 				; adjust exponent
.91f1	80 f3		bra $91e6			bra 	_NSNormaliseLoop
.91f3					_NSNExit:
.91f3	a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.91f5	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/term/dereference.asm

.84a4					DereferenceTopTwo:
.84a4	e8		inx				inx
.84a5	20 a9 84	jsr $84a9			jsr 	Dereference 				; deref x+1
.84a8	ca		dex				dex  								; falls through to deref x
.84a9					Dereference:
.84a9	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get the status byte
.84ac	29 20		and #$20			and 	#NSBIsReference 			; shift sign bit to carry, reference to bit 7
.84ae	f0 57		beq $8507			beq 	_DRFExit 					; not a reference
.84b0	5a		phy				phy
.84b1	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy address to dereference into zTemp0
.84b4	85 36		sta $36				sta 	zTemp0
.84b6	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.84b9	85 37		sta $37				sta 	zTemp0+1
.84bb	9e 10 06	stz $0610,x			stz 	NSMantissa1,x 				; clear second byte.
.84be	b2 36		lda ($36)			lda 	(zTemp0) 					; do the first byte
.84c0	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.84c3	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get status byte.
.84c6	29 18		and #$18			and 	#NSBTypeMask 				; what type is it ?
.84c8	c9 10		cmp #$10			cmp 	#NSTString 					; if string, dereference two
.84ca	f0 0f		beq $84db			beq 	_DRFDereferenceTwo
.84cc	c9 08		cmp #$08			cmp 	#NSTFloat 					; if float, do full dereference.
.84ce	f0 39		beq $8509			beq 	_DRFFull
.84d0	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be integer - how many bytes ?
.84d3	29 03		and #$03			and 	#3
.84d5	f0 32		beq $8509			beq 	_DRFFull 					; the whole word
.84d7	c9 01		cmp #$01			cmp 	#1 							; is it 10 (e.g. 2 bytes)
.84d9	f0 07		beq $84e2			beq		_DRFClear23 				; no, one byte, clear 2 & 3 and exit
.84db					_DRFDereferenceTwo:
.84db	a0 01		ldy #$01			ldy 	#1
.84dd	b1 36		lda ($36),y			lda 	(zTemp0),y
.84df	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.84e2					_DRFClear23:
.84e2	9e 18 06	stz $0618,x			stz 	NSMantissa2,x 				; clear upper bytes, only read 1 or 2 bytes
.84e5	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.84e8	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; make it a value of that type.
.84eb	29 18		and #$18			and 	#NSBTypeMask
.84ed	9d 00 06	sta $0600,x			sta 	NSStatus,x
.84f0	c9 10		cmp #$10			cmp 	#NSTString  				; is it a string
.84f2	d0 12		bne $8506			bne 	_DRFNotString
.84f4	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; check address is zero
.84f7	1d 10 06	ora $0610,x			ora 	NSMantissa1,x
.84fa	d0 0a		bne $8506			bne 	_DRFNotString
.84fc	a9 08		lda #$08			lda 	#_DRFNullString & $FF 		; if so, return reference to ""
.84fe	9d 08 06	sta $0608,x			sta 	NSMantissa0,X
.8501	a9 85		lda #$85			lda 	#_DRFNullString >> 8
.8503	9d 10 06	sta $0610,x			sta 	NSMantissa1,X
.8506					_DRFNotString
.8506	7a		ply				ply 								; restore Y and exit
.8507					_DRFExit:
.8507	60		rts				rts
.8508					_DRFNullString:
>8508	00						.byte 	0
.8509					_DRFFull:
.8509	a0 01		ldy #$01			ldy 	#1 							; get remaining 3 bytes.
.850b	b1 36		lda ($36),y			lda 	(zTemp0),y
.850d	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8510	c8		iny				iny
.8511	b1 36		lda ($36),y			lda 	(zTemp0),y
.8513	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8516	c8		iny				iny
.8517	b1 36		lda ($36),y			lda 	(zTemp0),y
.8519	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.851c	9e 28 06	stz $0628,x			stz 	NSExponent,x 				; clear exponent.
.851f	bd 00 06	lda $0600,x			lda		NSStatus,x 					; see if type is integer
.8522	29 18		and #$18			and 	#NSBTypeMask  				; type information only
.8524	9d 00 06	sta $0600,x			sta 	NSStatus,x 					; update it back.
.8527	f0 06		beq $852f			beq 	_DRFNoExponent
.8529	c8		iny				iny 								; if not, read the exponent as well.
.852a	b1 36		lda ($36),y			lda 	(zTemp0),y
.852c	9d 28 06	sta $0628,x			sta 	NSExponent,x
.852f					_DRFNoExponent:
.852f	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; is the most significant bit set ?
.8532	10 0d		bpl $8541			bpl 	_DRFExit2 					; if not, then exit.
.8534	29 7f		and #$7f			and 	#$7F 						; clear that bit.
.8536	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8539	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; set the sign flag
.853c	09 80		ora #$80			ora 	#NSBIsNegative
.853e	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8541					_DRFExit2:
.8541	7a		ply				ply
.8542	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/term/number.asm

=1					ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2					ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3					ESTA_Decimal = 3 							; fractional part.
.8543					EncodeNumberStart:
.8543	38		sec				sec
.8544	80 01		bra $8547			bra 	EncodeNumberContinue+1
.8546					EncodeNumberContinue:
.8546	18		clc				clc
.8547					EncodeNumber:
.8547	08		php				php 								; save reset.
.8548	c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.854a	f0 12		beq $855e			beq 	_ENIsOkay
.854c	c9 30		cmp #$30			cmp 	#"0"
.854e	90 04		bcc $8554			bcc 	_ENBadNumber
.8550	c9 3a		cmp #$3a			cmp 	#"9"+1
.8552	90 0a		bcc $855e			bcc 	_ENIsOkay
.8554					_ENBadNumber:
.8554	28		plp				plp 								; throw saved reset
.8555	ad 05 07	lda $0705			lda 	EncodeState 				; decimal mode, construct final number
.8558	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.855a	f0 7e		beq $85da			beq 	_ENConstructFinal
.855c					_ENFail:
.855c	18		clc				clc 								; not allowed
.855d	60		rts				rts
.855e					_ENIsOkay:
.855e	28		plp				plp 								; are we restarting
.855f	90 15		bcc $8576			bcc 	_ENNoRestart
.8561					_ENStartEncode:
.8561	c9 2e		cmp #$2e			cmp 	#'.'						; first is DP
.8563	f0 0c		beq $8571			beq 	_ENFirstDP
.8565	29 0f		and #$0f			and 	#15 						; put digit in mantissa
.8567	20 9d 88	jsr $889d			jsr 	NSMSetByte
.856a	a9 01		lda #$01			lda 	#ESTA_Low
.856c					_ENExitChange:
.856c	8d 05 07	sta $0705			sta 	EncodeState 				; save new state
.856f	38		sec				sec
.8570	60		rts				rts
.8571					_ENFirstDP:
.8571	20 9b 88	jsr $889b			jsr 	NSMSetZero 					; clear integer part
.8574	80 3f		bra $85b5			bra 	_ESTASwitchFloat			; go straight to float and exi
.8576					_ENNoRestart:
.8576	48		pha				pha 								; save on stack.
.8577	ad 05 07	lda $0705			lda 	EncodeState 				; get current state
.857a	c9 01		cmp #$01			cmp 	#ESTA_Low
.857c	f0 09		beq $8587			beq  	_ESTALowState
.857e	c9 02		cmp #$02			cmp 	#ESTA_High
.8580	f0 29		beq $85ab			beq 	_ESTAHighState
.8582	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.8584	f0 3b		beq $85c1			beq 	_ESTADecimalState
>8586	db						.byte 	$DB 						; causes a break in the emulator
.8587					_ESTALowState:
.8587	68		pla				pla 								; get value back
.8588	c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.858a	f0 29		beq $85b5			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.858c	29 0f		and #$0f			and 	#15 						; make digit
.858e	8d 06 07	sta $0706			sta 	DigitTemp 					; save it.
.8591	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.8594	0a		asl a				asl 	a
.8595	0a		asl a				asl 	a
.8596	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.8599	0a		asl a				asl 	a
.859a	6d 06 07	adc $0706			adc 	DigitTemp
.859d	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.85a0	c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.85a2	90 05		bcc $85a9			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.85a4	a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.85a6	8d 05 07	sta $0705			sta 	EncodeState
.85a9					_ESTANoSwitch:
.85a9	38		sec				sec
.85aa	60		rts				rts
.85ab					_ESTAHighState:
.85ab	68		pla				pla 								; get value back
.85ac	c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.85ae	f0 05		beq $85b5			beq 	_ESTASwitchFloat
.85b0	20 14 86	jsr $8614			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.85b3	38		sec				sec
.85b4	60		rts				rts
.85b5					_ESTASwitchFloat:
.85b5	9c 07 07	stz $0707			stz 	DecimalCount
.85b8	e8		inx				inx 								; zero the decimal additive.
.85b9	20 9b 88	jsr $889b			jsr 	NSMSetZero
.85bc	ca		dex				dex
.85bd	a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.85bf	80 ab		bra $856c			bra 	_ENExitChange
.85c1					_ESTADecimalState:
.85c1	68		pla				pla 								; digit.
.85c2	c9 2e		cmp #$2e			cmp 	#"." 						; fail on 2nd decimal point.
.85c4	f0 96		beq $855c			beq 	_ENFail
.85c6	e8		inx				inx 								; put digit into fractional part of X+1
.85c7	20 14 86	jsr $8614			jsr 	ESTAShiftDigitIntoMantissa
.85ca	ca		dex				dex
.85cb	ee 07 07	inc $0707			inc 	DecimalCount 				; bump the count of decimals
.85ce	ad 07 07	lda $0707			lda 	DecimalCount
.85d1	c9 0b		cmp #$0b			cmp 	#11
.85d3	f0 02		beq $85d7			beq 	_ESTADSFail
.85d5	38		sec				sec
.85d6	60		rts				rts
.85d7					_ESTADSFail:
.85d7	4c fc 92	jmp $92fc			jmp 	RangeError
.85da					_ENConstructFinal:
.85da	ad 07 07	lda $0707			lda 	DecimalCount 				; get decimal count
.85dd	f0 33		beq $8612			beq 	_ENCFExit 					; no decimals
.85df	5a		phy				phy
.85e0	0a		asl a				asl 	a 							; x 4 and CLC
.85e1	0a		asl a				asl 	a
.85e2	6d 07 07	adc $0707			adc 	DecimalCount
.85e5	a8		tay				tay
.85e6	b9 bb 92	lda $92bb,y			lda 	DecimalScalarTable-5,y 		; copy decimal scalar to X+2
.85e9	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.85ec	b9 bc 92	lda $92bc,y			lda 	DecimalScalarTable-5+1,y
.85ef	9d 12 06	sta $0612,x			sta 	NSMantissa1+2,x
.85f2	b9 bd 92	lda $92bd,y			lda 	DecimalScalarTable-5+2,y
.85f5	9d 1a 06	sta $061a,x			sta 	NSMantissa2+2,x
.85f8	b9 be 92	lda $92be,y			lda 	DecimalScalarTable-5+3,y
.85fb	9d 22 06	sta $0622,x			sta 	NSMantissa3+2,x
.85fe	b9 bf 92	lda $92bf,y			lda 	DecimalScalarTable-5+4,y
.8601	9d 2a 06	sta $062a,x			sta 	NSExponent+2,x
.8604	a9 08		lda #$08			lda 	#NSTFloat
.8606	9d 02 06	sta $0602,x			sta 	NSStatus+2,x
.8609	7a		ply				ply
.860a	e8		inx				inx 								; multiply decimal const by decimal scalar
.860b	20 70 91	jsr $9170			jsr 	FloatMultiply
.860e	ca		dex				dex
.860f	20 05 90	jsr $9005			jsr 	FloatAdd 					; add to integer part.
.8612					_ENCFExit:
.8612	18		clc				clc 								; reject the digit.
.8613	60		rts				rts
.8614					ESTAShiftDigitIntoMantissa:
.8614	29 0f		and #$0f			and 	#15 						; save digit
.8616	48		pha				pha
.8617	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; push mantissa on stack
.861a	48		pha				pha
.861b	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.861e	48		pha				pha
.861f	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8622	48		pha				pha
.8623	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.8626	48		pha				pha
.8627	20 b0 88	jsr $88b0			jsr 	NSMShiftLeft 				; x 2
.862a	20 b0 88	jsr $88b0			jsr 	NSMShiftLeft 				; x 4
.862d	18		clc				clc 								; pop mantissa and add
.862e	68		pla				pla
.862f	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.8632	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8635	68		pla				pla
.8636	7d 10 06	adc $0610,x			adc 	NSMantissa1,x
.8639	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.863c	68		pla				pla
.863d	7d 18 06	adc $0618,x			adc 	NSMantissa2,x
.8640	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8643	68		pla				pla
.8644	7d 20 06	adc $0620,x			adc 	NSMantissa3,x
.8647	9d 20 06	sta $0620,x			sta 	NSMantissa3,x 				; x 5
.864a	20 b0 88	jsr $88b0			jsr 	NSMShiftLeft 				; x 10
.864d	68		pla				pla 								; add digit
.864e	18		clc				clc
.864f	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.8652	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8655	90 0d		bcc $8664			bcc 	_ESTASDExit
.8657	fe 10 06	inc $0610,x			inc 	NSMantissa1,x
.865a	d0 08		bne $8664			bne 	_ESTASDExit
.865c	fe 18 06	inc $0618,x			inc 	NSMantissa2,x
.865f	d0 03		bne $8664			bne 	_ESTASDExit
.8661	fe 20 06	inc $0620,x			inc 	NSMantissa3,x
.8664					_ESTASDExit:
.8664	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/term/term.asm

.8665					EvaluateTerm:
.8665	b1 30		lda ($30),y			lda 	(codePtr),y
.8667	30 18		bmi $8681			bmi 	_ETCheckUnary 				; unary function ? (text ones)
.8669	c9 40		cmp #$40			cmp 	#$40 						; 40-7F => identifier reference
.866b	b0 6f		bcs $86dc			bcs 	_ETVariable
.866d	c9 30		cmp #$30			cmp 	#'0' 						; is it a number
.866f	90 6f		bcc $86e0			bcc 	_ETPuncUnary 				; if not it might be a punctuation unary.
.8671	c9 3a		cmp #$3a			cmp 	#'9'+1
.8673	b0 6b		bcs $86e0			bcs 	_ETPuncUnary
.8675	20 43 85	jsr $8543			jsr 	EncodeNumberStart 			; can't fail as it's 0-9 !
.8678					_ETNumber:
.8678	c8		iny				iny 								; keep encoding until we have the numbers
.8679	b1 30		lda ($30),y			lda 	(codePtr),y
.867b	20 46 85	jsr $8546			jsr 	EncodeNumberContinue
.867e	b0 f8		bcs $8678			bcs 	_ETNumber 					; go back if accepted.
.8680	60		rts				rts
.8681					_ETCheckUnary:
.8681	c9 ff		cmp #$ff			cmp 	#KWC_STRING 				; string token
.8683	f0 41		beq $86c6			beq 	_ETString
.8685	c9 fe		cmp #$fe			cmp 	#KWC_HEXCONST 				; hex constant.
.8687	f0 12		beq $869b			beq 	_ETHexConstant
.8689	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; check it actually is a unary function
.868b	90 0b		bcc $8698			bcc 	_ETSyntaxError
.868d	c9 96		cmp #$96			cmp 	#KWC_LAST_UNARY+1
.868f	b0 07		bcs $8698			bcs 	_ETSyntaxError
.8691	da		phx				phx 								; push X on the stack
.8692	0a		asl a				asl 	a 							; put vector x 2 into X
.8693	aa		tax				tax
.8694	c8		iny				iny 								; consume unary function token
.8695	7c 94 80	jmp ($8094,x)			jmp 	(VectorSet0,x) 				; and do it.
.8698					_ETSyntaxError:
.8698	4c f7 92	jmp $92f7			jmp 	SyntaxError
.869b					_ETHexConstant:
.869b	c8		iny				iny 								; skip #
.869c	c8		iny				iny 								; skip count
.869d	20 9b 88	jsr $889b			jsr 	NSMSetZero 					; clear result
.86a0					_ETHLoop:
.86a0	b1 30		lda ($30),y			lda 	(codePtr),y
.86a2	c8		iny				iny 								; and consume
.86a3	c9 00		cmp #$00			cmp 	#0 							; exit if zero
.86a5	f0 1e		beq $86c5			beq 	_ETHExit
.86a7	48		pha				pha 								; save on stack.
.86a8	20 b0 88	jsr $88b0			jsr 	NSMShiftLeft 				; x 2
.86ab	20 b0 88	jsr $88b0			jsr 	NSMShiftLeft 				; x 4
.86ae	20 b0 88	jsr $88b0			jsr 	NSMShiftLeft 				; x 8
.86b1	20 b0 88	jsr $88b0			jsr 	NSMShiftLeft 				; x 16
.86b4	68		pla				pla 								; ASCII
.86b5	c9 41		cmp #$41			cmp 	#'A'
.86b7	90 02		bcc $86bb			bcc 	_ETHNotChar
.86b9	e9 07		sbc #$07			sbc 	#7
.86bb					_ETHNotChar:
.86bb	29 0f		and #$0f			and 	#15 						; digit now
.86bd	1d 08 06	ora $0608,x			ora 	NSMantissa0,x 				; put in LS Nibble
.86c0	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.86c3	80 db		bra $86a0			bra 	_ETHLoop 					; go round.
.86c5					_ETHExit:
.86c5	60		rts				rts
.86c6					_ETString:
.86c6	c8		iny				iny 								; look at length
.86c7	b1 30		lda ($30),y			lda 	(codePtr),y
.86c9	48		pha				pha
.86ca	c8		iny				iny 								; first character
.86cb	20 14 89	jsr $8914			jsr 	MemoryInline 				; put address of string at (codePtr),y on stack
.86ce	68		pla				pla 								; restore count and save
.86cf	85 36		sta $36				sta 	zTemp0
.86d1	98		tya				tya 								; add length to Y to skip it.
.86d2	18		clc				clc
.86d3	65 36		adc $36				adc 	zTemp0
.86d5	a8		tay				tay
.86d6	a9 10		lda #$10			lda 	#NSTString 					; mark as string
.86d8	9d 00 06	sta $0600,x			sta 	NSStatus,x
.86db	60		rts				rts
.86dc					_ETVariable:
>86dc	db						.byte 	$DB 						; causes a break in the emulator
.86dd	4c ff ff	jmp $ffff			jmp 	$FFFF
.86e0					_ETPuncUnary:
.86e0	c8		iny				iny 								; consume the unary character
.86e1	c9 2d		cmp #$2d			cmp 	#KWD_MINUS 					; unary minus
.86e3	f0 31		beq $8716			beq 	_ETUnaryNegate
.86e5	c9 10		cmp #$10			cmp 	#KWD_AT 					; @ reference -> constant
.86e7	f0 3d		beq $8726			beq 	_ETDereference
.86e9	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; parenthesis
.86eb	f0 58		beq $8745			beq 	_ETParenthesis
.86ed	c9 24		cmp #$24			cmp 	#KWD_DOLLAR
.86ef	f0 43		beq $8734			beq 	_ETStringReference
.86f1	64 36		stz $36				stz 	zTemp0 						; zTemp0 is the indirection level.
.86f3	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; byte indirection (0) ?
.86f5	f0 06		beq $86fd			beq 	_ETIndirection
.86f7	e6 36		inc $36				inc 	zTemp0
.86f9	c9 21		cmp #$21			cmp 	#KWD_PLING					; word indirection (1) \
.86fb	d0 9b		bne $8698			bne 	_ETSyntaxError
.86fd					_ETIndirection:
.86fd	a5 36		lda $36				lda 	zTemp0 						; push indirection amount (0-1) => (1-2) on the stack
.86ff	1a		inc a				inc 	a
.8700	48		pha				pha
.8701	20 65 86	jsr $8665			jsr 	EvaluateTerm				; evaluate the term
.8704	20 a9 84	jsr $84a9			jsr 	Dereference 				; dereference it.
.8707	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a +ve integer.
.870a	d0 07		bne $8713			bne 	_ETTypeMismatch
.870c	68		pla				pla 								; indirection 1-2
.870d	09 20		ora #$20			ora 	#NSBIsReference 			; make it a reference.
.870f	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8712	60		rts				rts
.8713					_ETTypeMismatch:
.8713	4c 01 93	jmp $9301			jmp 	TypeError
.8716					_ETUnaryNegate:
.8716	20 65 86	jsr $8665			jsr 	EvaluateTerm				; evaluate the term
.8719	20 a9 84	jsr $84a9			jsr 	Dereference 				; dereference it.
.871c	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a number
.871f	29 10		and #$10			and 	#NSTString
.8721	d0 f0		bne $8713			bne 	_ETTypeMismatch
.8723	4c 47 88	jmp $8847			jmp 	NSMNegate  					; just toggles the sign bit.
.8726					_ETDereference:
.8726	20 65 86	jsr $8665			jsr 	EvaluateTerm				; evaluate the term
.8729	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a reference
.872c	29 20		and #$20			and 	#NSBIsReference
.872e	f0 e3		beq $8713			beq 	_ETTypeMismatch
.8730	9e 00 06	stz $0600,x			stz 	NSStatus,x 					; make it an integer address
.8733	60		rts				rts
.8734					_ETStringReference:
.8734	20 65 86	jsr $8665			jsr 	EvaluateTerm				; evaluate the term
.8737	20 a9 84	jsr $84a9			jsr 	Dereference 				; dereference it.
.873a	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a +ve integer.
.873d	d0 d4		bne $8713			bne 	_ETTypeMismatch
.873f	a9 10		lda #$10			lda 	#NSTString 					; make it a string
.8741	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8744	60		rts				rts
.8745					_ETParenthesis:
.8745	20 67 84	jsr $8467			jsr 	EvaluateExpression 			; evaluate here, from lowest precedence
.8748	20 98 8d	jsr $8d98			jsr 	CheckRightBracket 			; check for )
.874b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/unary/number/abs.asm

.91f6					AbsUnary:
.91f6	fa		plx				plx 								; restore stack pos
.91f7	20 f2 87	jsr $87f2			jsr 	EvaluateNumber 				; get a float or int
.91fa	20 98 8d	jsr $8d98			jsr 	CheckRightBracket
.91fd	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; clear the sign bit
.9200	29 7f		and #$7f			and 	#$7F
.9202	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9205	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/unary/number/alloc.asm

.874c					AllocUnary:
.874c	fa		plx				plx 								; restore stack pos
.874d	20 2a 88	jsr $882a			jsr 	Evaluate16BitInteger		; get bytes required.
.8750	20 98 8d	jsr $8d98			jsr 	CheckRightBracket
.8753	da		phx				phx 								; save X/Y
.8754	5a		phy				phy
.8755	8a		txa				txa 								; copy X into Y
.8756	a8		tay				tay
.8757	b9 10 06	lda $0610,y			lda		NSMantissa1,y 				; get size
.875a	aa		tax				tax
.875b	b9 08 06	lda $0608,y			lda 	NSMantissa0,y
.875e	20 6b 87	jsr $876b			jsr 	AllocateXABytes 			; allocate memory
.8761	99 08 06	sta $0608,y			sta 	NSMantissa0,y 				; write address out.
.8764	8a		txa				txa
.8765	99 10 06	sta $0610,y			sta 	NSMantissa1,y
.8768	7a		ply				ply
.8769	fa		plx				plx
.876a	60		rts				rts
.876b					AllocateXABytes:
.876b	5a		phy				phy
.876c	ac 0c 07	ldy $070c			ldy 	lowMemPtr 					; push current address on stack
.876f	5a		phy				phy
.8770	ac 0d 07	ldy $070d			ldy 	lowMemPtr+1
.8773	5a		phy				phy
.8774	18		clc				clc
.8775	6d 0c 07	adc $070c			adc 	lowMemPtr
.8778	8d 0c 07	sta $070c			sta 	lowMemPtr
.877b	8a		txa				txa
.877c	6d 0d 07	adc $070d			adc 	lowMemPtr+1
.877f	8d 0d 07	sta $070d			sta 	lowMemPtr+1
.8782	fa		plx				plx
.8783	68		pla				pla
.8784	7a		ply				ply
.8785	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/unary/number/asc.asm

.9206					AscUnary:
.9206	fa		plx				plx 								; restore stack pos
.9207	20 fd 87	jsr $87fd			jsr 	EvaluateString 				; get a string
.920a	b2 36		lda ($36)			lda 	(zTemp0)					; get/return firs character
.920c	20 9d 88	jsr $889d			jsr 	NSMSetByte
.920f	20 98 8d	jsr $8d98			jsr 	CheckRightBracket
.9212	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/unary/number/frac.asm

.9213					FracUnary:
.9213	fa		plx				plx 								; restore stack pos
.9214	20 f2 87	jsr $87f2			jsr 	EvaluateNumber 				; get a float or int
.9217	20 98 8d	jsr $8d98			jsr 	CheckRightBracket
.921a	bd 00 06	lda $0600,x			lda 	NSStatus,x
.921d	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.921f	f0 04		beq $9225			beq 	_IUZero
.9221	20 e3 90	jsr $90e3			jsr 	FloatFractionalPart
.9224	60		rts				rts
.9225					_IUZero:
.9225	20 9b 88	jsr $889b			jsr 	NSMSetZero
.9228	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/unary/number/int.asm

.9229					IntUnary:
.9229	fa		plx				plx 								; restore stack pos
.922a	20 f2 87	jsr $87f2			jsr 	EvaluateNumber 				; get a float or int
.922d	20 98 8d	jsr $8d98			jsr 	CheckRightBracket
.9230	bd 00 06	lda $0600,x			lda 	NSStatus,x
.9233	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.9235	f0 03		beq $923a			beq 	_IUExit
.9237	20 46 91	jsr $9146			jsr 	FloatIntegerPart
.923a					_IUExit:
.923a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/unary/number/len.asm

.923b					LenUnary:
.923b	fa		plx				plx 								; restore stack pos
.923c	20 fd 87	jsr $87fd			jsr 	EvaluateString 				; get a string
.923f	5a		phy				phy
.9240	a0 00		ldy #$00			ldy 	#0 							; find length
.9242					_LenFind:
.9242	b1 36		lda ($36),y			lda 	(zTemp0),y
.9244	f0 06		beq $924c			beq 	_LenExit
.9246	c8		iny				iny
.9247	d0 f9		bne $9242			bne 	_LenFind
.9249	4c fc 92	jmp $92fc			jmp 	RangeError 					; string > 255
.924c					_LenExit:
.924c	98		tya				tya
.924d	20 9d 88	jsr $889d			jsr 	NSMSetByte
.9250	7a		ply				ply
.9251	20 98 8d	jsr $8d98			jsr 	CheckRightBracket
.9254	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/unary/number/not.asm

.8786					Unary_Not:
.8786	fa		plx				plx
.8787	20 15 88	jsr $8815			jsr 	EvaluateInteger 			; get integer
.878a	20 98 8d	jsr $8d98			jsr 	CheckRightBracket
.878d	20 cb 88	jsr $88cb			jsr 	NSMIsZero 					; zero mantissa ?
.8790	f0 04		beq $8796			beq 	_NotZero
.8792	20 9b 88	jsr $889b			jsr 	NSMSetZero
.8795	60		rts				rts
.8796					_NotZero:
.8796	4c b2 8d	jmp $8db2			jmp 	ReturnTrue
.8799					_UNBad:
.8799	4c 06 93	jmp $9306			jmp 	ArgumentError

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/unary/number/rnd.asm

.879c					Unary_Rnd:
.879c	20 f2 87	jsr $87f2			jsr 	EvaluateNumber 				; number to use.
.879f	20 98 8d	jsr $8d98			jsr 	CheckRightBracket 			; closing bracket
.87a2	20 cb 87	jsr $87cb			jsr 	Random32Bit 				; generate a number.
.87a5	ad 08 07	lda $0708			lda 	RandomSeed+0
.87a8	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.87ab	ad 09 07	lda $0709			lda 	RandomSeed+1
.87ae	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.87b1	ad 0a 07	lda $070a			lda 	RandomSeed+2
.87b4	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.87b7	ad 0b 07	lda $070b			lda 	RandomSeed+3
.87ba	29 7f		and #$7f			and 	#$7F 						; make legal mantissa
.87bc	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.87bf	a9 e1		lda #$e1			lda 	#-31 						; force into 0-1 range
.87c1	8d 28 06	sta $0628			sta 	NSExponent
.87c4	a9 08		lda #$08			lda 	#NSTFloat
.87c6	8d 00 06	sta $0600			sta 	NSStatus 					; positive.
>87c9	db						.byte 	$DB 						; causes a break in the emulator
.87ca	60		rts				rts
.87cb					Random32Bit:
.87cb	5a		phy				phy
.87cc	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.87ce	ad 08 07	lda $0708			lda 	RandomSeed+0 				; check the seed isn't zero
.87d1	d0 03		bne $87d6			bne 	_Random1
.87d3	a8		tay				tay 								; if so do it 256 times
.87d4	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.87d6					_Random1:
.87d6	0a		asl a				asl 	a 							; LSFR RNG
.87d7	2e 09 07	rol $0709			rol 	RandomSeed+1
.87da	2e 0a 07	rol $070a			rol 	RandomSeed+2
.87dd	2e 0b 07	rol $070b			rol 	RandomSeed+3
.87e0	90 02		bcc $87e4			bcc 	_Random2
.87e2	49 c5		eor #$c5			eor 	#$C5
.87e4					_Random2:
.87e4	88		dey				dey
.87e5	d0 ef		bne $87d6			bne 	_Random1
.87e7	7a		ply				ply
.87e8	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/unary/number/sgn.asm

.9255					SgnUnary:
.9255	fa		plx				plx 								; restore stack pos
.9256	20 f2 87	jsr $87f2			jsr 	EvaluateNumber 				; get a float or int
.9259	20 98 8d	jsr $8d98			jsr 	CheckRightBracket
.925c	20 cb 88	jsr $88cb			jsr 	NSMIsZero 					; if zero
.925f	f0 10		beq $9271			beq 	_SGZero  					; return Int Zero
.9261	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get status w/sign
.9264	48		pha				pha
.9265	a9 01		lda #$01			lda 	#1 							; set to 1
.9267	20 9d 88	jsr $889d			jsr 	NSMSetByte
.926a	68		pla				pla
.926b	29 80		and #$80			and		#$80 						; copy the sign byte out
.926d	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9270	60		rts				rts
.9271	20 9b 88	jsr $889b	_SGZero:jsr 	NSMSetZero
.9274	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/unary/number/val.asm

.9275					ValUnary:
.9275	fa		plx				plx 								; restore stack pos
.9276	20 8b 92	jsr $928b			jsr 	ValMainCode 				; do the main val() code
.9279	b0 01		bcs $927c			bcs 	_VUError 					; couldn't convert
.927b	60		rts				rts
.927c					_VUError:
.927c	4c 01 93	jmp $9301			jmp 	TypeError
.927f					IsValUnary:
.927f	fa		plx				plx 								; restore stack pos
.9280	20 8b 92	jsr $928b			jsr 	ValMainCode 				; do the main val() code
.9283	b0 03		bcs $9288			bcs 	_VUBad
.9285	4c b2 8d	jmp $8db2			jmp 	ReturnTrue
.9288					_VUBad:
.9288	4c be 8d	jmp $8dbe			jmp 	ReturnFalse
.928b					ValMainCode:
.928b	20 fd 87	jsr $87fd			jsr 	EvaluateString 				; get a string
.928e	20 98 8d	jsr $8d98			jsr 	CheckRightBracket 			; check right bracket present
.9291	5a		phy				phy
.9292	b2 36		lda ($36)			lda 	(zTemp0) 					; check not empty string
.9294	f0 17		beq $92ad			beq 	_VMCFail2
.9296	a0 ff		ldy #$ff			ldy 	#$FF 						; start position
.9298	48		pha				pha 								; save first character
.9299	c9 2d		cmp #$2d			cmp 	#"-"		 				; is it -
.929b	d0 01		bne $929e			bne 	_VMCStart
.929d	c8		iny				iny 								; skip over -
.929e					_VMCStart:
.929e	38		sec				sec 								; initialise first time round.
.929f					_VMCNext:
.929f	c8		iny				iny 								; pre-increment
.92a0	b1 36		lda ($36),y			lda 	(zTemp0),y 					; next character
.92a2	f0 0c		beq $92b0			beq 	_VMCSuccess 				; successful.
.92a4	20 47 85	jsr $8547			jsr 	EncodeNumber 				; send it to the number-builder
.92a7	90 03		bcc $92ac			bcc 	_VMCFail 					; if failed, give up.
.92a9	18		clc				clc 								; next time round, countinue
.92aa	80 f3		bra $929f			bra 	_VMCNext
.92ac					_VMCFail:
.92ac	68		pla				pla
.92ad					_VMCFail2:
.92ad	7a		ply				ply
.92ae	38		sec				sec
.92af	60		rts				rts
.92b0					_VMCSuccess:
.92b0	a9 00		lda #$00			lda 	#0 							; construct final
.92b2	20 47 85	jsr $8547			jsr 	EncodeNumber
.92b5	68		pla				pla
.92b6	c9 2d		cmp #$2d			cmp 	#"-"
.92b8	d0 03		bne $92bd			bne 	_VMCNotNegative
.92ba	20 47 88	jsr $8847			jsr		NSMNegate
.92bd					_VMCNotNegative:
.92bd	7a		ply				ply
.92be	18		clc				clc
.92bf	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/utility/exprhelper.asm

.87e9					EvaluateValue:
.87e9	48		pha				pha
.87ea	20 65 84	jsr $8465			jsr		EvaluateExpressionAt0 		; expression
.87ed	20 a9 84	jsr $84a9			jsr 	Dereference					; derefernce it
.87f0	68		pla				pla
.87f1	60		rts				rts
.87f2					EvaluateNumber:
.87f2	20 e9 87	jsr $87e9			jsr 	EvaluateValue 				; get a value
.87f5	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if string.
.87f8	29 10		and #$10			and 	#NSBIsString
.87fa	d0 16		bne $8812			bne 	HelperTypeError
.87fc	60		rts				rts
.87fd					EvaluateString:
.87fd	20 e9 87	jsr $87e9			jsr 	EvaluateValue 				; get a value
.8800	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if string.
.8803	29 10		and #$10			and 	#NSBIsString
.8805	f0 0b		beq $8812			beq 	HelperTypeError
.8807					CopyAddressToTemp0:
.8807	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy address -> zTemp0
.880a	85 36		sta $36				sta 	zTemp0
.880c	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.880f	85 37		sta $37				sta 	zTemp0+1
.8811	60		rts				rts
.8812					HelperTypeError:
.8812	4c 01 93	jmp $9301			jmp 	TypeError
.8815					EvaluateInteger:
.8815	20 f2 87	jsr $87f2			jsr 	EvaluateNumber
.8818	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check exponent is zero
.881b	d0 0a		bne $8827			bne 	HelperValueError 			; if not, it's a float.
.881d	60		rts				rts
.881e					EvaluateUnsignedInteger:
.881e	20 15 88	jsr $8815			jsr 	EvaluateInteger 			; check integer is +ve
.8821	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8824	30 01		bmi $8827			bmi 	HelperValueError
.8826	60		rts				rts
.8827					HelperValueError:
.8827	4c 06 93	jmp $9306			jmp 	ArgumentError
.882a					Evaluate16BitInteger:
.882a	20 1e 88	jsr $881e			jsr	 	EvaluateUnsignedInteger		; get integer
.882d	bd 20 06	lda $0620,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.8830	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.8833	d0 f2		bne $8827			bne 	HelperValueError
.8835	60		rts				rts
.8836					Evaluate8BitInteger:
.8836	20 1e 88	jsr $881e			jsr	 	EvaluateUnsignedInteger 	; get an integer
.8839	d0 ec		bne $8827			bne 	HelperValueError
.883b	bd 20 06	lda $0620,x			lda 	NSMantissa3,x	 			; bytes 1, 2 & 3 must be zero
.883e	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.8841	1d 10 06	ora $0610,x			ora 	NSMantissa1,x
.8844	d0 e1		bne $8827			bne 	HelperValueError
.8846	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/utility/utility.asm

.8847					NSMNegate:
.8847	bd 00 06	lda $0600,x			lda 	NSStatus,x
.884a	49 80		eor #$80			eor 	#NSBIsNegative
.884c	9d 00 06	sta $0600,x			sta 	NSStatus,x
.884f	60		rts				rts
.8850					NSMNegateMantissa:
.8850	38		sec				sec
.8851	a9 00		lda #$00			lda 	#0
.8853	fd 08 06	sbc $0608,x			sbc 	NSMantissa0,x
.8856	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8859	a9 00		lda #$00			lda 	#0
.885b	fd 10 06	sbc $0610,x			sbc 	NSMantissa1,x
.885e	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8861	a9 00		lda #$00			lda 	#0
.8863	fd 18 06	sbc $0618,x			sbc 	NSMantissa2,x
.8866	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8869	a9 00		lda #$00			lda 	#0
.886b	fd 20 06	sbc $0620,x			sbc 	NSMantissa3,x
.886e	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8871	60		rts				rts
.8872					NSMShiftUpTwo:
.8872	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.8875	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.8878	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.887b	9d 12 06	sta $0612,x			sta 	NSMantissa1+2,x
.887e	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.8881	9d 1a 06	sta $061a,x			sta 	NSMantissa2+2,x
.8884	bd 20 06	lda $0620,x			lda 	NSMantissa3,x
.8887	9d 22 06	sta $0622,x			sta 	NSMantissa3+2,x
.888a	bd 28 06	lda $0628,x			lda 	NSExponent,x
.888d	9d 2a 06	sta $062a,x			sta 	NSExponent+2,x
.8890	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8893	9d 02 06	sta $0602,x			sta 	NSStatus+2,x
.8896	60		rts				rts
.8897					NSMSetZeroMantissaOnly:
.8897	a9 00		lda #$00			lda 	#0
.8899	80 08		bra $88a3			bra 	NSMSetMantissa
.889b					NSMSetZero:
.889b	a9 00		lda #$00			lda 	#0
.889d					NSMSetByte:
.889d	9e 28 06	stz $0628,x			stz 	NSExponent,x 				; zero exponent, as integer.
.88a0	9e 00 06	stz $0600,x			stz 	NSStatus,x 					; status zero (integer)
.88a3					NSMSetMantissa:
.88a3	9d 08 06	sta $0608,x			sta 	NSMantissa0,x 				; mantissa
.88a6	9e 10 06	stz $0610,x			stz 	NSMantissa1,x
.88a9	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.88ac	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.88af	60		rts				rts
.88b0					NSMShiftLeft:
.88b0	18		clc				clc
.88b1					NSMRotateLeft:
.88b1	3e 08 06	rol $0608,x			rol 	NSMantissa0,x
.88b4	3e 10 06	rol $0610,x			rol		NSMantissa1,x
.88b7	3e 18 06	rol $0618,x			rol		NSMantissa2,x
.88ba	3e 20 06	rol $0620,x			rol		NSMantissa3,x
.88bd	60		rts				rts
.88be					NSMShiftRight:
.88be	5e 20 06	lsr $0620,x			lsr 	NSMantissa3,x
.88c1	7e 18 06	ror $0618,x			ror		NSMantissa2,x
.88c4	7e 10 06	ror $0610,x			ror		NSMantissa1,x
.88c7	7e 08 06	ror $0608,x			ror		NSMantissa0,x
.88ca	60		rts				rts
.88cb					NSMIsZero:
.88cb	bd 20 06	lda $0620,x			lda 	NSMantissa3,x
.88ce	1d 18 06	ora $0618,x			ora		NSMantissa2,x
.88d1	1d 10 06	ora $0610,x			ora		NSMantissa1,x
.88d4	1d 08 06	ora $0608,x			ora		NSMantissa0,x
.88d7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./generated/constants.asm

.92c0					DecimalScalarTable:
>92c0	66 66 66 66				.dword $66666666 ; 0.1
>92c4	de					.byte $de
>92c5	1f 85 eb 51				.dword $51eb851f ; 0.01
>92c9	db					.byte $db
>92ca	4c 37 89 41				.dword $4189374c ; 0.001
>92ce	d8					.byte $d8
>92cf	ac 8b db 68				.dword $68db8bac ; 0.0001
>92d3	d4					.byte $d4
>92d4	24 d6 e2 53				.dword $53e2d624 ; 1e-05
>92d8	d1					.byte $d1
>92d9	83 de 1b 43				.dword $431bde83 ; 1e-06
>92dd	ce					.byte $ce
>92de	6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>92e2	ca					.byte $ca
>92e3	89 3b e6 55				.dword $55e63b89 ; 1e-08
>92e7	c7					.byte $c7
>92e8	a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>92ec	c4					.byte $c4
>92ed	67 7f f3 6d				.dword $6df37f67 ; 1e-10
>92f1	c0					.byte $c0
>92f2	86 ff f5 57				.dword $57f5ff86 ; 1e-11
>92f6	bd					.byte $bd

;******  Return to file: _basic.asm


;******  Processing file: ./generated/errors.asm

.92f7					SyntaxError:
.92f7	a9 02		lda #$02		lda	#2
.92f9	4c be 81	jmp $81be		jmp	ErrorHandler
.92fc					RangeError:
.92fc	a9 04		lda #$04		lda	#4
.92fe	4c be 81	jmp $81be		jmp	ErrorHandler
.9301					TypeError:
.9301	a9 05		lda #$05		lda	#5
.9303	4c be 81	jmp $81be		jmp	ErrorHandler
.9306					ArgumentError:
.9306	a9 07		lda #$07		lda	#7
.9308	4c be 81	jmp $81be		jmp	ErrorHandler
.930b					NotDoneError:
.930b	a9 0c		lda #$0c		lda	#12
.930d	4c be 81	jmp $81be		jmp	ErrorHandler
.9310					ErrorText:
>9310	42 72 65 61 6b 00			.text	"Break",0
>9316	53 79 6e 74 61 78 20 65			.text	"Syntax error",0
>931e	72 72 6f 72 00
>9323	44 69 76 69 73 69 6f 6e			.text	"Division by zero",0
>932b	20 62 79 20 7a 65 72 6f 00
>9334	4f 75 74 20 6f 66 20 52			.text	"Out of Range",0
>933c	61 6e 67 65 00
>9341	54 79 70 65 20 6d 69 73			.text	"Type mismatch",0
>9349	6d 61 74 63 68 00
>934f	4f 75 74 20 6f 66 20 6d			.text	"Out of memory",0
>9357	65 6d 6f 72 79 00
>935d	49 6c 6c 65 67 61 6c 20			.text	"Illegal argument",0
>9365	61 72 67 75 6d 65 6e 74 00
>936e	53 74 6f 70 00				.text	"Stop",0
>9373	53 74 72 69 6e 67 20 74			.text	"String too long",0
>937b	6f 6f 20 6c 6f 6e 67 00
>9383	41 73 73 65 72 74 69 6f			.text	"Assertion failed",0
>938b	6e 20 66 61 69 6c 65 64 00
>9394	4f 75 74 20 6f 66 20 64			.text	"Out of data",0
>939c	61 74 61 00
>93a0	55 6e 69 6d 70 6c 65 6d			.text	"Unimplemented",0
>93a8	65 6e 74 65 64 00

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/junior/memory.asm

.93ae					MemoryPeek:
.93ae	b2 36		lda ($36)			lda 	(zTemp0)
.93b0	60		rts				rts
.93b1					MemoryPoke:
.93b1	92 36		sta ($36)			sta 	(zTemp0)
.93b3	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/junior/vectors.asm

.93b4					EXTPrintCharacter:
.93b4	48		pha				pha
.93b5	da		phx				phx
.93b6	5a		phy				phy
.93b7	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.93ba	7a		ply				ply
.93bb	fa		plx				plx
.93bc	68		pla				pla
.93bd	60		rts				rts
.93be					EXTInputSingleCharacter:
.93be	da		phx				phx
.93bf	5a		phy				phy
.93c0					_EISCWait:
.93c0	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.93c3	c9 00		cmp #$00			cmp 	#0
.93c5	f0 f9		beq $93c0			beq 	_EISCWait
.93c7	7a		ply				ply
.93c8	fa		plx				plx
.93c9	60		rts				rts
.93ca					EXTInputLine:
.93ca	a2 00		ldx #$00			ldx 	#0 							; position in line <- start of line
.93cc					_ILLoop:
.93cc	da		phx				phx 								; read character in
.93cd	20 cf ff	jsr $ffcf			jsr 	$FFCF
.93d0	fa		plx				plx
.93d1	c9 08		cmp #$08			cmp 	#8 							; backspace, CBM doesn't need this.
.93d3	f0 12		beq $93e7			beq 	_ILBackspace
.93d5	c9 0d		cmp #$0d			cmp 	#13							; exit ?
.93d7	f0 15		beq $93ee			beq 	_ILExit
.93d9	c9 20		cmp #$20			cmp 	#32 						; ignore other control
.93db	90 ef		bcc $93cc			bcc 	_ILLoop
.93dd	e0 50		cpx #$50			cpx 	#MaxLineSize 				; already full buffer
.93df	f0 eb		beq $93cc			beq 	_ILLoop
.93e1	9d 0e 08	sta $080e,x			sta 	lineBuffer,x 				; save it
.93e4	e8		inx				inx
.93e5	80 e5		bra $93cc			bra 	_ILLoop
.93e7					_ILBackspace:
.93e7	e0 00		cpx #$00			cpx 	#0  						; can't backspace, start of line.
.93e9	f0 e1		beq $93cc			beq 	_ILLoop
.93eb	ca		dex				dex 								; back one.
.93ec	80 de		bra $93cc			bra 	_ILLoop
.93ee					_ILExit:
.93ee	20 b4 93	jsr $93b4			jsr 	EXTPrintCharacter
.93f1	9e 0e 08	stz $080e,x			stz 	lineBuffer,x 				; make ASCIIZ and exit with address in XA
.93f4	60		rts				rts
.93f5					EXTBreakCheck:
.93f5	4c e1 ff	jmp $ffe1			jmp		$FFE1

;******  Return to file: _basic.asm


;******  Processing file: ./memory.flat/memory.asm

.88d8					MemoryNew:
.88d8	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.88da	85 30		sta $30				sta 	codePtr
.88dc	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.88de	85 31		sta $31				sta 	codePtr+1
.88e0	a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.88e2	92 30		sta ($30)			sta 	(codePtr)
.88e4	60		rts				rts
.88e5					MemoryAppend:
.88e5	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.88e7	85 30		sta $30				sta 	codePtr
.88e9	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.88eb	85 31		sta $31				sta 	codePtr+1
.88ed					_MAFindEnd:
.88ed	b2 30		lda ($30)			lda 	(codePtr)
.88ef	f0 0d		beq $88fe			beq 	_MAFoundEnd
.88f1	18		clc				clc
.88f2	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.88f4	65 30		adc $30				adc 	codePtr
.88f6	85 30		sta $30				sta 	codePtr
.88f8	90 02		bcc $88fc			bcc 	_CREExit
.88fa	e6 31		inc $31				inc 	codePtr+1
.88fc					_CREExit:
.88fc	80 ef		bra $88ed			bra 	_MAFindEnd
.88fe					_MAFoundEnd:
.88fe	ac 0e 07	ldy $070e			ldy 	tokenOffset 				; bytes to copy
.8901	c0 04		cpy #$04			cpy 	#4 							; blank line
.8903	f0 0e		beq $8913			beq 	_MANoLine
.8905	a9 00		lda #$00			lda 	#0 							; end of program
.8907	91 30		sta ($30),y			sta 	(codePtr),y
.8909					_MACopy:
.8909	88		dey				dey
.890a	b9 0e 07	lda $070e,y			lda 	tokenOffset,y
.890d	91 30		sta ($30),y			sta 	(codePtr),y
.890f	c0 00		cpy #$00			cpy 	#0
.8911	d0 f6		bne $8909			bne 	_MACopy
.8913					_MANoLine:
.8913	60		rts				rts
.8914					MemoryInline:
.8914	98		tya				tya 								; put address into stack,x
.8915	18		clc				clc
.8916	65 30		adc $30				adc 	codePtr
.8918	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.891b	a5 31		lda $31				lda 	codePtr+1
.891d	69 00		adc #$00			adc 	#0
.891f	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8922	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.8925	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.8928	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./memory.flat/variable.asm

.8929					VariableOpen:
.8929	60		rts				rts
.892a					VariableClose:
.892a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./tokeniser/backload.asm

.892b					BackloadProgram:
.892b	a2 ff		ldx #$ff			ldx 	#$FF
.892d	8e fa ff	stx $fffa			stx 	$FFFA 						; fast mode
.8930	20 57 89	jsr $8957			jsr 	BLReadByte
.8933	30 1e		bmi $8953			bmi 	_BPExit
.8935					_BPCopy:
.8935	e8		inx				inx  								; copy byte in
.8936	9d 0e 08	sta $080e,x			sta 	lineBuffer,x
.8939	9e 0f 08	stz $080f,x			stz 	lineBuffer+1,x
.893c	20 57 89	jsr $8957			jsr 	BLReadByte 					; read next byte
.893f	30 0a		bmi $894b			bmi 	_BPEndLine 					; -ve = EOL
.8941	c9 09		cmp #$09			cmp 	#9 							; handle TAB
.8943	d0 02		bne $8947			bne 	_BPNotTab
.8945	a9 20		lda #$20			lda 	#' '
.8947					_BPNotTab:
.8947	c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.8949	b0 ea		bcs $8935			bcs 	_BPCopy
.894b					_BPEndLine:
.894b	20 13 8b	jsr $8b13			jsr 	TokeniseLine 				; tokenise the line.
.894e	20 e5 88	jsr $88e5			jsr 	MemoryAppend 				; append to current program
.8951	80 d8		bra $892b			bra 	BackloadProgram
.8953					_BPExit:
.8953	20 24 81	jsr $8124			jsr 	ClearCommand 				; clear variables etc.
.8956	60		rts				rts
.8957					BLReadByte:
.8957					_BLLoad:
.8957	ad 00 30	lda $3000			lda 	$3000 						; hardcoded in the makefile.
.895a	ee 58 89	inc $8958			inc 	_BLLoad+1
.895d	d0 03		bne $8962			bne 	_BLNoCarry
.895f	ee 59 89	inc $8959			inc 	_BLLoad+2
.8962					_BLNoCarry:
.8962	c9 00		cmp #$00			cmp 	#0
.8964	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./tokeniser/searchtokens.asm

.8965					TokeniseSearchTable:
.8965	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token.
.8967	85 36		sta $36				sta 	zTemp0
.8969	a0 00		ldy #$00			ldy 	#0
.896b	a9 80		lda #$80			lda 	#$80 						; token #
.896d	85 38		sta $38				sta 	zTemp1
.896f					_TSTLoop:
.896f	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.8971	30 49		bmi $89bc			bmi 	_TSTFail 					; -ve = end of table
.8973	f0 2e		beq $89a3			beq 	_TSTNext 					; zero, check next it's a dummy
.8975	c8		iny				iny 								; get the hash
.8976	b1 36		lda ($36),y			lda 	(zTemp0),y
.8978	88		dey				dey
.8979	cd 03 07	cmp $0703			cmp 	identHash 					; check they match, if not go to next
.897c	d0 25		bne $89a3			bne 	_TSTNext
.897e	ad 02 07	lda $0702			lda 	identTypeEnd 				; length of identifier
.8981	38		sec				sec
.8982	ed 00 07	sbc $0700			sbc 	identStart
.8985	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; no match, then return.
.8987	d0 1a		bne $89a3			bne 	_TSTNext
.8989	5a		phy				phy 								; save Y , we might fail
.898a	c8		iny				iny 								; point to text
.898b	c8		iny				iny
.898c	ae 00 07	ldx $0700			ldx 	identStart 					; offset in line buffer in X
.898f					_TSTCompareName:
.898f	bd 0e 08	lda $080e,x			lda 	lineBuffer,x 				; compare text.
.8992	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.8994	d0 0c		bne $89a2			bne 	_TSTNextPullY 				; fail, pullY and do next
.8996	e8		inx				inx
.8997	c8		iny				iny
.8998	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; complete match.
.899b	d0 f2		bne $898f			bne 	_TSTCompareName
.899d	7a		ply				ply 								; throw Y
.899e	a5 38		lda $38				lda 	zTemp1 						; get token #
.89a0	38		sec				sec 								; return with CS = passed.
.89a1	60		rts				rts
.89a2					_TSTNextPullY:
.89a2	7a		ply				ply 								; restore current, fall through.
.89a3					_TSTNext:
.89a3	e6 38		inc $38				inc 	zTemp1 						; token counter
.89a5	98		tya				tya
.89a6	18		clc				clc
.89a7	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.89a9	1a		inc a				inc 	a 							; +1
.89aa	1a		inc a				inc 	a 							; +2
.89ab	a8		tay				tay
.89ac	10 c1		bpl $896f			bpl 	_TSTLoop 					; if Y < $80 loop back
.89ae	98		tya				tya 								; add Y to zTemp0 and reset Y
.89af	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.89b1	18		clc				clc  								; but have tables > 255 bytes
.89b2	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.89b4	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.89b6	90 b7		bcc $896f			bcc 	_TSTLoop
.89b8	e6 37		inc $37				inc 	zTemp0+1
.89ba	80 b3		bra $896f			bra 	_TSTLoop
.89bc					_TSTFail:
.89bc	18		clc				clc
.89bd	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./tokeniser/tokenise.asm


;******  Processing file: ./tokeniser/../generated/kwdtext.dat

.89be					KeywordSet0:
>89be	00 65					.text	0,$65,""               ; $80 !0:EOF
>89c0	00 58					.text	0,$58,""               ; $81 !1:SH1
>89c2	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>89c4	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $83 ABS(
>89ca	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $84 ALLOC(
>89d2	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $85 ASC(
>89d8	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $86 CHR$(
>89df	05 6b 46 41 4c 53 45			.text	5,$6b,"FALSE"          ; $87 FALSE
>89e6	05 44 46 52 41 43 28			.text	5,$44,"FRAC("          ; $88 FRAC(
>89ed	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $89 INT(
>89f3	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $8a ISVAL(
>89fb	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $8b LEFT$(
>8a03	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $8c LEN(
>8a09	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $8d MID$(
>8a10	04 19 4e 4f 54 28			.text	4,$19,"NOT("           ; $8e NOT(
>8a16	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $8f RIGHT$(
>8a1e	28
>8a1f	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $90 RND(
>8a25	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $91 SGN(
>8a2b	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $92 SPC(
>8a31	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $93 STR$(
>8a38	04 40 54 52 55 45			.text	4,$40,"TRUE"           ; $94 TRUE
>8a3e	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $95 VAL(
>8a44	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $96 FOR
>8a49	02 8f 49 46				.text	2,$8f,"IF"             ; $97 IF
>8a4d	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $98 PROC
>8a53	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $99 REPEAT
>8a5b	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $9a WHILE
>8a62	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $9b ENDIF
>8a69	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $9c ENDPROC
>8a71	43
>8a72	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $9d NEXT
>8a78	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $9e UNTIL
>8a7f	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $9f WEND
>8a85	04 1c 43 41 4c 4c			.text	4,$1c,"CALL"           ; $a0 CALL
>8a8b	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $a1 CLS
>8a90	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $a2 DATA
>8a96	03 da 44 49 4d				.text	3,$da,"DIM"            ; $a3 DIM
>8a9b	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $a4 GOSUB
>8aa2	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $a5 GOTO
>8aa8	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $a6 LET
>8aad	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $a7 PRINT
>8ab4	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $a8 READ
>8aba	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $a9 REM
>8abf	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $aa RETURN
>8ac7	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $ab THEN
>8acd	02 a3 54 4f				.text	2,$a3,"TO"             ; $ac TO
>8ad1	ff					.text	$FF
.8ad2					KeywordSet1:
>8ad2	00 65					.text	0,$65,""               ; $80 !0:EOF
>8ad4	00 58					.text	0,$58,""               ; $81 !1:SH1
>8ad6	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>8ad8	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $83 ASSERT
>8ae0	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $84 CLEAR
>8ae7	03 d7 45 4e 44				.text	3,$d7,"END"            ; $85 END
>8aec	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $86 LIST
>8af2	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $87 NEW
>8af7	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $88 RESTORE
>8aff	45
>8b00	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $89 RUN
>8b05	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $8a STOP
>8b0b	ff					.text	$FF
.8b0c					KeywordSet2:
>8b0c	00 65					.text	0,$65,""               ; $80 !0:EOF
>8b0e	00 58					.text	0,$58,""               ; $81 !1:SH1
>8b10	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>8b12	ff					.text	$FF

;******  Return to file: ./tokeniser/tokenise.asm

.8b13					TokeniseLine:
.8b13	20 9b 8c	jsr $8c9b			jsr 	FixLineBufferCase 			; fix line case
.8b16	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.8b18	8d 0e 07	sta $070e			sta 	tokenOffset
.8b1b	9c 0f 07	stz $070f			stz 	tokenLineNumber
.8b1e	9c 10 07	stz $0710			stz 	tokenLineNumber+1
.8b21	a2 ff		ldx #$ff			ldx 	#$FF
.8b23					_TKFindFirst:
.8b23	e8		inx				inx
.8b24	bd 0e 08	lda $080e,x			lda 	lineBuffer,x
.8b27	f0 79		beq $8ba2			beq 	_TKExit
.8b29	c9 20		cmp #$20			cmp 	#' '
.8b2b	90 f6		bcc $8b23			bcc 	_TKFindFirst
.8b2d	c9 30		cmp #$30			cmp 	#'0'
.8b2f	90 07		bcc $8b38			bcc 	_TKNoLineNumber
.8b31	c9 3a		cmp #$3a			cmp 	#'9'+1
.8b33	b0 03		bcs $8b38			bcs 	_TKNoLineNumber
.8b35	20 c5 8c	jsr $8cc5			jsr 	TokeniseExtractLineNumber
.8b38					_TKNoLineNumber:
.8b38					_TKTokeniseLoop:
.8b38	bd 0e 08	lda $080e,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.8b3b	f0 65		beq $8ba2			beq 	_TKExit
.8b3d	e8		inx				inx
.8b3e	c9 20		cmp #$20			cmp 	#' '
.8b40	f0 f6		beq $8b38			beq 	_TKTokeniseLoop 			; keep looping if space found.
.8b42	ca		dex				dex 								; undo last get, A contains character, X is position.
.8b43	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.8b45	f0 61		beq $8ba8			beq 	_TKTokeniseIdentifier
.8b47	c9 41		cmp #$41			cmp 	#'A'
.8b49	90 04		bcc $8b4f			bcc 	_TKTokenisePunctuation
.8b4b	c9 5b		cmp #$5b			cmp 	#'Z'+1
.8b4d	90 59		bcc $8ba8			bcc 	_TKTokeniseIdentifier
.8b4f					_TKTokenisePunctuation:
.8b4f	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.8b51	f0 27		beq $8b7a			beq 	_TKString
.8b53	c9 23		cmp #$23			cmp 	#'#'						; hexadecimal constant (# only appears at end of identifiers)
.8b55	f0 28		beq $8b7f			beq 	_TKHexConstant
.8b57	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers.
.8b59	f0 29		beq $8b84			beq 	_TKCheckDouble
.8b5b	c9 3e		cmp #$3e			cmp 	#'>'
.8b5d	f0 25		beq $8b84			beq 	_TKCheckDouble
.8b5f					_TKStandardPunctuation:
.8b5f	bd 0e 08	lda $080e,x			lda 	lineBuffer,x 				; get it back.
.8b62	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.8b64	90 0e		bcc $8b74			bcc 	_TKNoShift
.8b66	48		pha				pha 								; save
.8b67	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.8b69	85 36		sta $36				sta 	zTemp0
.8b6b	68		pla				pla
.8b6c	29 20		and #$20			and 	#32 						; bit 5
.8b6e	4a		lsr a				lsr 	a 							; shift into bit 3
.8b6f	4a		lsr a				lsr 	a
.8b70	05 36		ora $36				ora 	zTemp0
.8b72	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.8b74					_TKNoShift:
.8b74	20 0a 8d	jsr $8d0a			jsr 	TokeniseWriteByte 			; write the punctuation character
.8b77	e8		inx				inx 								; consume the character
.8b78	80 be		bra $8b38			bra 	_TKTokeniseLoop 			; and loop round again.
.8b7a					_TKString:
.8b7a	20 2a 8c	jsr $8c2a			jsr 	TokeniseString
.8b7d	80 b9		bra $8b38			bra 	_TKTokeniseLoop
.8b7f					_TKHexConstant:
.8b7f	20 65 8c	jsr $8c65			jsr 	TokeniseHexConstant
.8b82	80 b4		bra $8b38			bra 	_TKTokeniseLoop
.8b84					_TKCheckDouble:
.8b84	bd 0f 08	lda $080f,x			lda 	lineBuffer+1,x 				; get next character
.8b87	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.8b89	90 d4		bcc $8b5f			bcc 	_TKStandardPunctuation
.8b8b	c9 3f		cmp #$3f			cmp 	#'>'+1
.8b8d	b0 d0		bcs $8b5f			bcs 	_TKStandardPunctuation
.8b8f	bd 0e 08	lda $080e,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.8b92	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.8b94	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.8b95	7d 0f 08	adc $080f,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.8b98	38		sec				sec
.8b99	e9 3c		sbc #$3c			sbc 	#'<'
.8b9b	20 0a 8d	jsr $8d0a			jsr 	TokeniseWriteByte 			; this is in the range 0-7
.8b9e	e8		inx				inx 								; consume both
.8b9f	e8		inx				inx
.8ba0	80 96		bra $8b38			bra 	_TKTokeniseLoop
.8ba2	a9 80		lda #$80	_TKExit:lda 	#KWC_EOL 					; write end of line byte
.8ba4	20 0a 8d	jsr $8d0a			jsr 	TokeniseWriteByte
.8ba7	60		rts				rts
.8ba8					_TKTokeniseIdentifier:
.8ba8	8e 00 07	stx $0700			stx 	identStart 					; save start
.8bab	9c 04 07	stz $0704			stz 	identTypeByte 				; zero the type byte
.8bae					_TKCheckLoop:
.8bae	e8		inx				inx 								; look at next, we know first is identifier.
.8baf	bd 0e 08	lda $080e,x			lda  	lineBuffer,x
.8bb2	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.8bb4	f0 f8		beq $8bae			beq 	_TKCheckLoop
.8bb6	c9 30		cmp #$30			cmp	 	#"0"
.8bb8	90 0c		bcc $8bc6			bcc 	_TKEndIdentifier
.8bba	c9 3a		cmp #$3a			cmp 	#"9"+1
.8bbc	90 f0		bcc $8bae			bcc 	_TKCheckLoop
.8bbe	c9 41		cmp #$41			cmp	 	#"A"
.8bc0	90 04		bcc $8bc6			bcc 	_TKEndIdentifier
.8bc2	c9 5b		cmp #$5b			cmp 	#"Z"+1
.8bc4	90 e8		bcc $8bae			bcc 	_TKCheckLoop
.8bc6					_TKEndIdentifier:
.8bc6	8e 01 07	stx $0701			stx 	identTypeStart 				; save start of type text (if any !)
.8bc9	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.8bcb	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.8bcd	f0 06		beq $8bd5			beq 	_TKHasTypeCharacter
.8bcf	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.8bd1	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.8bd3	d0 07		bne $8bdc			bne 	_TKNoTypeCharacter
.8bd5					_TKHasTypeCharacter:
.8bd5	8c 04 07	sty $0704			sty 	identTypeByte 				; has # or $, save the type
.8bd8	e8		inx				inx 								; read next
.8bd9	bd 0e 08	lda $080e,x			lda 	lineBuffer,x
.8bdc					_TKNoTypeCharacter:
.8bdc	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.8bde	d0 09		bne $8be9			bne 	_TKNoArray
.8be0	e8		inx				inx 								; skip the (
.8be1	ad 04 07	lda $0704			lda 	identTypeByte 				; set bit 2 (e.g. array)
.8be4	09 04		ora #$04			ora 	#$04
.8be6	8d 04 07	sta $0704			sta 	identTypeByte
.8be9					_TKNoArray:
.8be9	8e 02 07	stx $0702			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.8bec	20 86 8c	jsr $8c86			jsr 	TokeniseCalculateHash 		; calculate the has for those tokens
.8bef	a0 89		ldy #$89			ldy 	#(KeywordSet0) >> 8
.8bf1	a9 be		lda #$be			lda 	#(KeywordSet0) & $FF
.8bf3	20 65 89	jsr $8965			jsr 	TokeniseSearchTable
.8bf6	a2 00		ldx #$00			ldx 	#0
.8bf8	b0 1f		bcs $8c19			bcs 	_TKFoundToken
.8bfa	a0 8a		ldy #$8a			ldy 	#(KeywordSet1) >> 8
.8bfc	a9 d2		lda #$d2			lda 	#(KeywordSet1) & $FF
.8bfe	20 65 89	jsr $8965			jsr 	TokeniseSearchTable
.8c01	a2 81		ldx #$81			ldx 	#$81
.8c03	b0 14		bcs $8c19			bcs 	_TKFoundToken
.8c05	a0 8a		ldy #$8a			ldy 	#(KeywordSet1) >> 8
.8c07	a9 d2		lda #$d2			lda 	#(KeywordSet1) & $FF
.8c09	20 65 89	jsr $8965			jsr 	TokeniseSearchTable
.8c0c	a2 82		ldx #$82			ldx 	#$82
.8c0e	b0 09		bcs $8c19			bcs 	_TKFoundToken
.8c10	20 16 8d	jsr $8d16			jsr 	CheckCreateVariableRecord 	; failed all, it's a variable, create record if does not exist.
.8c13	ae 02 07	ldx $0702			ldx 	identTypeEnd 				; X points to following byte
.8c16	4c 38 8b	jmp $8b38			jmp 	_TKTokeniseLoop 			; and go round again.
.8c19					_TKFoundToken:
.8c19	48		pha				pha 								; save token
.8c1a	8a		txa				txa 								; shift in X, is there one ?
.8c1b	f0 03		beq $8c20			beq 	_TKNoTShift
.8c1d	20 0a 8d	jsr $8d0a			jsr 	TokeniseWriteByte 			; if so, write it out
.8c20					_TKNoTShift:
.8c20	68		pla				pla 								; restore and write token
.8c21	20 0a 8d	jsr $8d0a			jsr 	TokeniseWriteByte
.8c24	ae 02 07	ldx $0702			ldx 	identTypeEnd 				; X points to following byte
.8c27	4c 38 8b	jmp $8b38			jmp 	_TKTokeniseLoop 			; and go round again.
.8c2a					TokeniseString:
.8c2a	a9 ff		lda #$ff			lda 	#KWC_STRING 				; string token.
.8c2c	20 0a 8d	jsr $8d0a			jsr 	TokeniseWriteByte
.8c2f	e8		inx				inx									; start of quoted string.
.8c30	da		phx				phx 								; push start of string on top
.8c31	ca		dex				dex
.8c32					_TSFindEnd:
.8c32	e8		inx				inx
.8c33	bd 0e 08	lda $080e,x			lda 	lineBuffer,x 				; next character
.8c36	f0 04		beq $8c3c			beq 	_TSEndOfString
.8c38	c9 22		cmp #$22			cmp 	#'"'
.8c3a	d0 f6		bne $8c32			bne 	_TSFindEnd
.8c3c					_TSEndOfString:
.8c3c	7a		ply				ply  								; so now Y is first character, X is character after end.
.8c3d	48		pha				pha 								; save terminating character
.8c3e	20 46 8c	jsr $8c46			jsr 	TOWriteBlockXY 				; write X to Y as a data block
.8c41	68		pla				pla 								; terminating character
.8c42	f0 01		beq $8c45			beq 	_TSNotQuote					; if it wasn't EOS skip it
.8c44	e8		inx				inx
.8c45					_TSNotQuote:
.8c45	60		rts				rts
.8c46					TOWriteBlockXY:
.8c46	86 36		stx $36				stx 	zTemp0 						; write end character
.8c48	98		tya				tya
.8c49	49 ff		eor #$ff			eor 	#$FF
.8c4b	38		sec				sec
.8c4c	65 36		adc $36				adc 	zTemp0
.8c4e	1a		inc a				inc 	a 							; one extra for NULL
.8c4f	20 0a 8d	jsr $8d0a			jsr 	TokeniseWriteByte
.8c52					_TOBlockLoop:
.8c52	c4 36		cpy $36				cpy 	zTemp0
.8c54	f0 09		beq $8c5f			beq 	_TOBlockExit
.8c56	b9 0e 08	lda $080e,y			lda 	lineBuffer,y
.8c59	20 0a 8d	jsr $8d0a			jsr 	TokeniseWriteByte
.8c5c	c8		iny				iny
.8c5d	80 f3		bra $8c52			bra 	_TOBlockLoop
.8c5f					_TOBlockExit:
.8c5f	a9 00		lda #$00			lda 	#0
.8c61	20 0a 8d	jsr $8d0a			jsr 	TokeniseWriteByte
.8c64	60		rts				rts
.8c65					TokeniseHexConstant:
.8c65	a9 fe		lda #$fe			lda 	#KWC_HEXCONST 				; hex constant token.
.8c67	20 0a 8d	jsr $8d0a			jsr 	TokeniseWriteByte
.8c6a	e8		inx				inx									; start of quoted string.
.8c6b	da		phx				phx 								; push start of constant on top
.8c6c	ca		dex				dex
.8c6d					_THFindLoop:
.8c6d	e8		inx				inx
.8c6e	bd 0e 08	lda $080e,x			lda 	lineBuffer,x
.8c71	c9 30		cmp #$30			cmp 	#"0"
.8c73	90 0c		bcc $8c81			bcc 	_THFoundEnd
.8c75	c9 3a		cmp #$3a			cmp 	#"9"+1
.8c77	90 f4		bcc $8c6d			bcc 	_THFindLoop
.8c79	c9 41		cmp #$41			cmp 	#"A"
.8c7b	90 04		bcc $8c81			bcc 	_THFoundEnd
.8c7d	c9 47		cmp #$47			cmp 	#"F"+1
.8c7f	90 ec		bcc $8c6d			bcc 	_THFindLoop
.8c81					_THFoundEnd:
.8c81	7a		ply				ply 								; restore start
.8c82	20 46 8c	jsr $8c46			jsr 	TOWriteBlockXY 				; output the block
.8c85	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./tokeniser/utility.asm

.8c86					TokeniseCalculateHash:
.8c86	da		phx				phx
.8c87	ae 00 07	ldx $0700			ldx 	identStart 					; needs to be same as in tokens.py - simple sum
.8c8a	a9 00		lda #$00			lda 	#0
.8c8c					_TCHLoop:
.8c8c	18		clc				clc
.8c8d	7d 0e 08	adc $080e,x			adc 	lineBuffer,x
.8c90	e8		inx				inx
.8c91	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.8c94	d0 f6		bne $8c8c			bne 	_TCHLoop
.8c96	8d 03 07	sta $0703			sta 	identHash 					; save the hash
.8c99	fa		plx				plx
.8c9a	60		rts				rts
.8c9b					FixLineBufferCase:
.8c9b	a2 00		ldx #$00			ldx 	#0
.8c9d					_FLBCLoop:
.8c9d	bd 0e 08	lda $080e,x			lda 	lineBuffer,x 				; get next character
.8ca0	f0 22		beq $8cc4			beq 	_FLBCExit 					; end of string.
.8ca2	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.8ca4	f0 11		beq $8cb7			beq 	_FLBCInQuotes
.8ca6	e8		inx				inx
.8ca7	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.8ca9	90 f2		bcc $8c9d			bcc 	_FLBCLoop
.8cab	c9 7b		cmp #$7b			cmp 	#'z'+1
.8cad	b0 ee		bcs $8c9d			bcs 	_FLBCLoop
.8caf	38		sec				sec 								; make U/C
.8cb0	e9 20		sbc #$20			sbc 	#32
.8cb2	9d 0d 08	sta $080d,x			sta	 	lineBuffer-1,x 				; write back
.8cb5	80 e6		bra $8c9d			bra 	_FLBCLoop
.8cb7					_FLBCInQuotes:
.8cb7	e8		inx				inx 								; advance
.8cb8	bd 0e 08	lda $080e,x			lda 	lineBuffer,x 				; get next
.8cbb	f0 07		beq $8cc4			beq 	_FLBCExit 					; exit on EOS
.8cbd	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.8cbf	d0 f6		bne $8cb7			bne 	_FLBCInQuotes
.8cc1	e8		inx				inx 								; skip over it
.8cc2	80 d9		bra $8c9d			bra 	_FLBCLoop
.8cc4					_FLBCExit:
.8cc4	60		rts				rts
.8cc5					TokeniseExtractLineNumber:
.8cc5	ad 10 07	lda $0710			lda 	tokenLineNumber+1 			; push current value on stack
.8cc8	48		pha				pha
.8cc9	ad 0f 07	lda $070f			lda 	tokenLineNumber
.8ccc	48		pha				pha
.8ccd	20 03 8d	jsr $8d03			jsr 	_TELNTimes2 				; line # x 4
.8cd0	20 03 8d	jsr $8d03			jsr 	_TELNTimes2 				; line # x 2
.8cd3	18		clc				clc 								; add stacked value
.8cd4	68		pla				pla
.8cd5	6d 0f 07	adc $070f			adc 	tokenLineNumber
.8cd8	8d 0f 07	sta $070f			sta 	tokenLineNumber
.8cdb	68		pla				pla
.8cdc	6d 10 07	adc $0710			adc 	tokenLineNumber+1
.8cdf	8d 10 07	sta $0710			sta 	tokenLineNumber+1 			; line # x 5
.8ce2	20 03 8d	jsr $8d03			jsr 	_TELNTimes2 				; line # x 10
.8ce5	bd 0e 08	lda $080e,x			lda 	lineBuffer,x 				; get and consume character
.8ce8	e8		inx				inx
.8ce9	29 0f		and #$0f			and 	#15 						; add to line #
.8ceb	18		clc				clc
.8cec	6d 0f 07	adc $070f			adc 	tokenLineNumber
.8cef	8d 0f 07	sta $070f			sta 	tokenLineNumber
.8cf2	90 03		bcc $8cf7			bcc 	_TLENNoCarry
.8cf4	ee 10 07	inc $0710			inc 	tokenLineNumber+1
.8cf7					_TLENNoCarry:
.8cf7	bd 0e 08	lda $080e,x			lda 	lineBuffer,x 				; more digits ?
.8cfa	c9 30		cmp #$30			cmp 	#'0'
.8cfc	90 04		bcc $8d02			bcc 	_TLENExit
.8cfe	c9 3a		cmp #$3a			cmp 	#'9'+1
.8d00	90 c3		bcc $8cc5			bcc 	TokeniseExtractLineNumber
.8d02					_TLENExit:
.8d02	60		rts				rts
.8d03					_TELNTimes2:
.8d03	0e 0f 07	asl $070f			asl 	tokenLineNumber
.8d06	2e 10 07	rol $0710			rol 	tokenLineNumber+1
.8d09	60		rts				rts
.8d0a					TokeniseWriteByte:
.8d0a	da		phx				phx
.8d0b	ae 0e 07	ldx $070e			ldx 	tokenOffset 				; next slot to write to
.8d0e	9d 0e 07	sta $070e,x			sta 	tokenOffset,x 				; write byte out
.8d11	ee 0e 07	inc $070e			inc 	tokenOffset 				; advance slot.
.8d14	fa		plx				plx
.8d15	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./tokeniser/variablerecord.asm

.8d16					CheckCreateVariableRecord:
.8d16	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.8d18	85 36		sta $36				sta 	0+zTemp0
.8d1a	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.8d1c	85 37		sta $37				sta 	1+zTemp0
.8d1e	20 29 89	jsr $8929			jsr 	VariableOpen 				; make variable space available
.8d21					_CCVSearch:
.8d21	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.8d23	f0 2c		beq $8d51			beq 	_CCVFail
.8d25	a0 01		ldy #$01			ldy 	#1 							; read the hash
.8d27	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.8d29	cd 03 07	cmp $0703			cmp 	identHash
.8d2c	d0 16		bne $8d44			bne 	_CCVNext
.8d2e	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.8d30	ae 00 07	ldx $0700			ldx 	identStart
.8d33					_CCVCompare:
.8d33	bd 0e 08	lda $080e,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.8d36	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.8d38	e8		inx				inx 								; advance pointers
.8d39	c8		iny				iny
.8d3a	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.8d3b	d0 07		bne $8d44			bne 	_CCVNext  					; didn't match go to next.
.8d3d	90 f4		bcc $8d33			bcc 	_CCVCompare 				; not finished yet.
.8d3f	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; matched whole thing ?
.8d42	f0 41		beq $8d85			beq 	_CCVFound 					; yes, we were successful
.8d44					_CCVNext:
.8d44	18		clc				clc
.8d45	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.8d47	65 36		adc $36				adc 	zTemp0
.8d49	85 36		sta $36				sta 	zTemp0
.8d4b	90 d4		bcc $8d21			bcc 	_CCVSearch
.8d4d	e6 37		inc $37				inc 	zTemp0+1
.8d4f	80 d0		bra $8d21			bra 	_CCVSearch
.8d51					_CCVFail:
.8d51	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.8d53	ad 03 07	lda $0703			lda 	identHash
.8d56	91 36		sta ($36),y			sta 	(zTemp0),y
.8d58	c8		iny				iny 								; offset 2 is the type byte
.8d59	ad 04 07	lda $0704			lda 	identTypeByte
.8d5c	91 36		sta ($36),y			sta 	(zTemp0),y
.8d5e	c8		iny				iny
.8d5f					_CCVData:
.8d5f	a9 00		lda #$00			lda 	#0 							; erase data 3-7
.8d61	91 36		sta ($36),y			sta 	(zTemp0),y
.8d63	c8		iny				iny
.8d64	c0 08		cpy #$08			cpy 	#8
.8d66	90 f7		bcc $8d5f			bcc 	_CCVData
.8d68	ae 00 07	ldx $0700			ldx 	identStart 					; copy name into 8 on.
.8d6b					_CCVCopyName:
.8d6b	bd 0e 08	lda $080e,x			lda 	lineBuffer,x
.8d6e	91 36		sta ($36),y			sta 	(zTemp0),y
.8d70	e8		inx				inx
.8d71	c8		iny				iny
.8d72	ec 02 07	cpx $0702			cpx 	identTypeEnd
.8d75	d0 f4		bne $8d6b			bne 	_CCVCopyName
.8d77	98		tya				tya 								; patch offset
.8d78	92 36		sta ($36)			sta 	(zTemp0)
.8d7a	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.8d7c	91 36		sta ($36),y			sta 	(zTemp0),y
.8d7e	88		dey				dey
.8d7f	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.8d81	09 80		ora #$80			ora 	#$80
.8d83	91 36		sta ($36),y			sta 	(zTemp0),y
.8d85					_CCVFound:
.8d85	20 2a 89	jsr $892a			jsr 	VariableClose 				; map out variables, perhaps.
.8d88	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.8d8a	38		sec				sec
.8d8b	e9 10		sbc #$10			sbc 	#(VariableSpace >> 8) 		; offset from the start
.8d8d	09 40		ora #$40			ora 	#$40 						; make it a writeable token
.8d8f	20 0a 8d	jsr $8d0a			jsr 	TokeniseWriteByte
.8d92	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.8d94	20 0a 8d	jsr $8d0a			jsr 	TokeniseWriteByte
.8d97	60		rts				rts

;******  Return to file: _basic.asm


;******  End of listing
