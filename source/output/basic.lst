
; 64tass Turbo Assembler Macro V1.56.2625 listing file
; 64tass -D AUTORUN=0 -q -b -Wall -c -L output/basic.lst -l output/basic.lbl -Wall -o basic.rom _basic.asm
; Fri Oct  7 17:12:25 2022

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=0					AUTORUN=0

;******  Processing input file: _basic.asm


;******  Processing file: ./common/aa.system/01common.inc

=$30					ZeroPageMandatory = $30
=$400					ZeroPagePreference = $400
=$480					MemoryStorage = $480
=$2000					BasicStart = $2000
=$8000					BasicEnd = $8000
=$8000					CodeStart = $8000
=$1000					VariableSpace = $1000
=$2000					EndVariableSpace = $2000
=8					MathStackSize = 8
=512					BasicStackSize = 512
=3584					BasicStackBase = $1000-BasicStackSize
=80					MaxLineSize = 80

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/04data.inc

.0030					codePtr:
>0030							.fill 	4
.0034					basicStack:
>0034							.fill 	2
.0036					zTemp0:
>0036							.fill 	2
.0038					zTemp1:
>0038							.fill 	2
.003a					zTemp2:
>003a							.fill 	2
.003c					zsTemp:
>003c							.fill 	2
.003e					zaTemp:
>003e							.fill 	2
=$30					safePtr = codePtr 							; minimise direct tinkering
=$80					NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20					NSBIsReference = $20 						; bit 5 : is a reference
=$10					NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18					NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03					NSBRefMask = $03 							; bits 0,1 : Bytes of reference, -1 (e.g. 00 = 1 byte, 11 = 4 bytes)
=$04					NSBIsArray = $04
=$00					NSTInteger = $00 							; base types for bits 3..4
=$08					NSTFloat = $08
=$10					NSTString = $10
=$18					NSTProcedure = $18
.0400					NSStatus:
>0400							.fill 	MathStackSize
.0408					NSMantissa0:
>0408							.fill 	MathStackSize 				; (this is my integer mantissa system)
.0410					NSMantissa1:
>0410							.fill 	MathStackSize
.0418					NSMantissa2:
>0418							.fill 	MathStackSize
.0420					NSMantissa3:
>0420							.fill 	MathStackSize
.0428					NSExponent:
>0428							.fill 	MathStackSize
.0480					identStart:
>0480							.fill 	1
.0481					identTypeStart:
>0481							.fill 	1
.0482					identTypeEnd:
>0482							.fill 	1
.0483					identHash:
>0483							.fill 	1
.0484					identTypeByte:
>0484							.fill 	1	 						; (see tokenising.pdf)
.0485					encodeState:
>0485							.fill 	1
.0486					digitTemp:
>0486							.fill 	1
.0487					decimalCount:
>0487							.fill 	1
.0488					randomSeed:
>0488							.fill 	4
.048c					lowMemPtr:
>048c							.fill 	2
.048e					stringMemory:
>048e							.fill 	2
.0490					stringInitialised:
>0490							.fill 	1
.0491					stringTempPointer:
>0491							.fill 	2
.0493					breakCheck:
>0493							.fill 	1
.0494					decimalPlaces:
>0494							.fill 	1
.0495					dbOffset:
>0495							.fill 	1
.0496					lastParameter:
>0496							.fill 	1
.0497					dataPointer:
>0497							.fill 	5
.049c					inDataStatement:
>049c							.fill 	1
.049d					tbOffset:
>049d							.fill 	1
.049e					AssemblerAddress:
>049e							.fill 	2
.04a0					AssemblerControl:
>04a0							.fill 	1
.04a1					ParamStart:
>04a1							.fill 	2
.04a3					IsGroup1:
>04a3							.fill 	1
.04a4					BaseOpcode:
>04a4							.fill 	1
.04a5					ModeMask:
>04a5							.fill 	1
.04a6					tokenOffset:
>04a6							.fill 	1
.04a7					tokenLineNumber:
>04a7							.fill 	2
.04a9					tokenBuffer:
>04a9							.fill 	253
.05a6					lineBuffer:
>05a6							.fill 	MaxLineSize+1
.05f7					numberBuffer:
>05f7							.fill 	34
.0619					decimalBuffer:
>0619							.fill 	16

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/constants.inc

=$80					AM_ISZP = $80
=$40					AM_ISG1 = $40
=$20					AM_ISG2 = $20
=224					AM_IMMEDIATE = AM_ISZP+AM_ISG1+AM_ISG2+$00
=228					AM_ZEROPAGE = AM_ISZP+AM_ISG1+AM_ISG2+$04
=40					AM_ACC = AM_ISG2+$08
=108					AM_ABS = AM_ISG1+AM_ISG2+$0C
=208					AM_INDY = AM_ISZP+AM_ISG1+$10
=244					AM_ZEROX = AM_ISZP+AM_ISG1+AM_ISG2+$14
=120					AM_ABSY = AM_ISG1+AM_ISG2+$18
=124					AM_ABSX = AM_ISG1+AM_ISG2+$1C
=209					AM_IND = AM_ISZP+AM_ISG1+$11
=$80					AM_ZEROY = AM_ISZP
=$01					AM_INDABS = $01
=$02					AM_INDABSX = $02
=192					AM_INDX = AM_ISZP+AM_ISG1+$00

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/handlers.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.inc

=1					ERRID_BREAK = 1
=2					ERRID_SYNTAX = 2
=3					ERRID_DIVZERO = 3
=4					ERRID_RANGE = 4
=5					ERRID_TYPE = 5
=6					ERRID_MEMORY = 6
=7					ERRID_ARGUMENT = 7
=8					ERRID_STOP = 8
=9					ERRID_STRING = 9
=10					ERRID_ASSERT = 10
=11					ERRID_DATA = 11
=12					ERRID_NOTDONE = 12
=13					ERRID_LINE = 13
=14					ERRID_GOSUB = 14
=15					ERRID_REPEAT = 15
=16					ERRID_WHILE = 16
=17					ERRID_FOR = 17
=18					ERRID_STACK = 18
=19					ERRID_STRUCT = 19
=20					ERRID_PROC = 20
=21					ERRID_REDEFINE = 21
=22					ERRID_ARRAYSIZE = 22
=23					ERRID_ARRAYIDX = 23

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst.inc

=$00					KWD_LESSLESS                         = $00; $00 <<
=$01					KWD_LESSEQUAL                        = $01; $01 <=
=$02					KWD_LESSGREATER                      = $02; $02 <>
=$03					KWD_PLINGPLING3                      = $03; $03 !!3
=$04					KWD_GREATERLESS                      = $04; $04 ><
=$05					KWD_GREATEREQUAL                     = $05; $05 >=
=$06					KWD_GREATERGREATER                   = $06; $06 >>
=$07					KWD_PLINGPLING7                      = $07; $07 !!7
=$08					KWD_PLINGPLING8                      = $08; $08 !!8
=$09					KWD_PLINGPLING9                      = $09; $09 !!9
=$0a					KWD_PLINGPLING10                     = $0a; $0a !!10
=$0b					KWD_PLINGPLING11                     = $0b; $0b !!11
=$0c					KWD_PLINGPLING12                     = $0c; $0c !!12
=$0d					KWD_PLINGPLING13                     = $0d; $0d !!13
=$0e					KWD_PLINGPLING14                     = $0e; $0e !!14
=$0f					KWD_PLINGPLING15                     = $0f; $0f !!15
=$10					KWD_AT                               = $10; $10 @
=$11					KWD_PLINGPLING17                     = $11; $11 !!17
=$12					KWD_PLINGPLING18                     = $12; $12 !!18
=$13					KWD_LSQPAREN                         = $13; $13 [
=$14					KWD_BACKSLASH                        = $14; $14 \
=$15					KWD_RSQPAREN                         = $15; $15 ]
=$16					KWD_HAT                              = $16; $16 ^
=$17					KWD_UNDERSCORE                       = $17; $17 _
=$18					KWD_BQUOTE                           = $18; $18 `
=$19					KWD_PLINGPLING25                     = $19; $19 !!25
=$1a					KWD_PLINGPLING26                     = $1a; $1a !!26
=$1b					KWD_LCURLY                           = $1b; $1b {
=$1c					KWD_BAR                              = $1c; $1c |
=$1d					KWD_RCURLY                           = $1d; $1d }
=$1e					KWD_TILDE                            = $1e; $1e ~
=$21					KWD_PLING                            = $21; $21 !
=$22					KWD_DQUOTE                           = $22; $22 "
=$23					KWD_HASH                             = $23; $23 #
=$24					KWD_DOLLAR                           = $24; $24 $
=$25					KWD_PERCENT                          = $25; $25 %
=$26					KWD_AMPERSAND                        = $26; $26 &
=$27					KWD_QUOTE                            = $27; $27 '
=$28					KWD_LPAREN                           = $28; $28 (
=$29					KWD_RPAREN                           = $29; $29 )
=$2a					KWD_STAR                             = $2a; $2a *
=$2b					KWD_PLUS                             = $2b; $2b +
=$2c					KWD_COMMA                            = $2c; $2c ,
=$2d					KWD_MINUS                            = $2d; $2d -
=$2e					KWD_PERIOD                           = $2e; $2e .
=$2f					KWD_SLASH                            = $2f; $2f /
=$30					KWD_0                                = $30; $30 0
=$31					KWD_1                                = $31; $31 1
=$32					KWD_2                                = $32; $32 2
=$33					KWD_3                                = $33; $33 3
=$34					KWD_4                                = $34; $34 4
=$35					KWD_5                                = $35; $35 5
=$36					KWD_6                                = $36; $36 6
=$37					KWD_7                                = $37; $37 7
=$38					KWD_8                                = $38; $38 8
=$39					KWD_9                                = $39; $39 9
=$3a					KWD_COLON                            = $3a; $3a :
=$3b					KWD_SEMICOLON                        = $3b; $3b ;
=$3c					KWD_LESS                             = $3c; $3c <
=$3d					KWD_EQUAL                            = $3d; $3d =
=$3e					KWD_GREATER                          = $3e; $3e >
=$3f					KWD_QMARK                            = $3f; $3f ?
=$83					KWD_ABSLPAREN                        = $83; $83 ABS(
=$84					KWD_ALLOCLPAREN                      = $84; $84 ALLOC(
=$85					KWD_ASCLPAREN                        = $85; $85 ASC(
=$86					KWD_CHRDOLLARLPAREN                  = $86; $86 CHR$(
=$87					KWD_FALSE                            = $87; $87 FALSE
=$88					KWD_FRACLPAREN                       = $88; $88 FRAC(
=$89					KWD_INTLPAREN                        = $89; $89 INT(
=$8a					KWD_ISVALLPAREN                      = $8a; $8a ISVAL(
=$8b					KWD_LEFTDOLLARLPAREN                 = $8b; $8b LEFT$(
=$8c					KWD_LENLPAREN                        = $8c; $8c LEN(
=$8d					KWD_MIDDOLLARLPAREN                  = $8d; $8d MID$(
=$8e					KWD_NOTLPAREN                        = $8e; $8e NOT(
=$8f					KWD_RANDOMLPAREN                     = $8f; $8f RANDOM(
=$90					KWD_RIGHTDOLLARLPAREN                = $90; $90 RIGHT$(
=$91					KWD_RNDLPAREN                        = $91; $91 RND(
=$92					KWD_SGNLPAREN                        = $92; $92 SGN(
=$93					KWD_SPCLPAREN                        = $93; $93 SPC(
=$94					KWD_STRDOLLARLPAREN                  = $94; $94 STR$(
=$95					KWD_TRUE                             = $95; $95 TRUE
=$96					KWD_VALLPAREN                        = $96; $96 VAL(
=$97					KWD_FOR                              = $97; $97 FOR
=$98					KWD_IF                               = $98; $98 IF
=$99					KWD_PROC                             = $99; $99 PROC
=$9a					KWD_REPEAT                           = $9a; $9a REPEAT
=$9b					KWD_WHILE                            = $9b; $9b WHILE
=$9c					KWD_ENDIF                            = $9c; $9c ENDIF
=$9d					KWD_ENDPROC                          = $9d; $9d ENDPROC
=$9e					KWD_NEXT                             = $9e; $9e NEXT
=$9f					KWD_THEN                             = $9f; $9f THEN
=$a0					KWD_UNTIL                            = $a0; $a0 UNTIL
=$a1					KWD_WEND                             = $a1; $a1 WEND
=$a2					KWD_CALL                             = $a2; $a2 CALL
=$a3					KWD_CLS                              = $a3; $a3 CLS
=$a4					KWD_DATA                             = $a4; $a4 DATA
=$a5					KWD_DIM                              = $a5; $a5 DIM
=$a6					KWD_DOWNTO                           = $a6; $a6 DOWNTO
=$a7					KWD_ELSE                             = $a7; $a7 ELSE
=$a8					KWD_GOSUB                            = $a8; $a8 GOSUB
=$a9					KWD_GOTO                             = $a9; $a9 GOTO
=$aa					KWD_LET                              = $aa; $aa LET
=$ab					KWD_LOCAL                            = $ab; $ab LOCAL
=$ac					KWD_PRINT                            = $ac; $ac PRINT
=$ad					KWD_READ                             = $ad; $ad READ
=$ae					KWD_REM                              = $ae; $ae REM
=$af					KWD_RETURN                           = $af; $af RETURN
=$b0					KWD_TO                               = $b0; $b0 TO

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst0.inc

=$80					KWC_EOL = $80
=$ff					KWC_STRING = $FF
=$fe					KWC_HEXCONST = $FE
=$97					KWC_FIRST_STRUCTURE = $97
=$9c					KWC_FIRST_STRUCTURE_DEC = $9c
=$a1					KWC_LAST_STRUCTURE = $a1
=$83					KWC_FIRST_UNARY = $83
=$96					KWC_LAST_UNARY = $96

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/stack.inc

=$e0					STK_GOSUB = $E0
=$d0					STK_FOR = $D0
=$c0					STK_REPEAT = $C0
=$b0					STK_PROC = $B0
=$a0					STK_WHILE = $A0
=$01					STK_LOCALN = $01
=$02					STK_LOCALS = $02

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/00start.asm

.8000	a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.8002	9a		txs				txs
.8003	a2 80		ldx #$80			ldx 	#(Prompt >> 8) 				; prompt
.8005	a9 1c		lda #$1c			lda 	#(Prompt & $FF)
.8007	20 c8 8f	jsr $8fc8			jsr 	PrintStringXA
.800a	9c 08 d0	stz $d008			stz 	$D008 						; remove boundary.
.800d	9c 09 d0	stz $d009			stz 	$D009
.8010	20 11 82	jsr $8211			jsr 	RunDemos
.8013	20 aa 89	jsr $89aa			jsr 	NewCommand 					; erase current program
.8016	20 4d 9c	jsr $9c4d			jsr 	BackloadProgram
.8019	4c 06 85	jmp $8506			jmp 	WarmStart
>801c	0d 0d 2a 2a 2a 20 46 32		Prompt:	.text 	13,13,"*** F256 Junior SuperBASIC ***",13,13
>8024	35 36 20 4a 75 6e 69 6f 72 20 53 75 70 65 72 42
>8034	41 53 49 43 20 2a 2a 2a 0d 0d
>803e	57 72 69 74 74 65 6e 20				.text 	"Written by Paul Robson 2022.",13,13
>8046	62 79 20 50 61 75 6c 20 52 6f 62 73 6f 6e 20 32
>8056	30 32 32 2e 0d 0d

;******  Processing file: ./common/aa.system/../generated/timestamp.asm

>805c	42 75 69 6c 74 20 46 72			.text "Built Friday 07-Oct-2022. Build 588."
>8064	69 64 61 79 20 30 37 2d 4f 63 74 2d 32 30 32 32
>8074	2e 20 42 75 69 6c 64 20 35 38 38 2e

;******  Return to file: ./common/aa.system/00start.asm

>8080	0d 0d 00					.byte 	13,13,0

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/ab.graphics/data.asm

=5					GXMappingPage = 5
=40960					GXMappingAddress = ($2000 * GXMappingPage)
=0					GFXMappingLUT = 0
=13					GFXEditSlot = 8 + GXMappingPage
=$36					gzTemp0 = zTemp0
=$38					gzTemp1 = zTemp1
.0629					gxCurrentX:
>0629							.fill 	2
.062b					gxCurrentY:
>062b							.fill 	2
.062d					gxLastX:
>062d							.fill 	2
.062f					gxLastY:
>062f							.fill 	2
.0631					gxX0:
>0631							.fill 	2
.0633					gxY0:
>0633							.fill 	2
.0635					gxX1:
>0635							.fill 	2
.0637					gxY1:
>0637							.fill 	2
.0639					gxBasePage:
>0639							.fill 	1
.063a					gxHeight:
>063a							.fill 	1
.063b					gxForeground:
>063b							.fill 	1
.063c					gxBackground:
>063c							.fill 	1
.063d					gxOriginalLUTValue:
>063d							.fill 	1
.063e					gxOriginalMMUSetting:
>063e							.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/ab.graphics/drawing/clear.asm

=64000					ScreenSize200 = 320 * 200
=76800					ScreenSize240 = 320 * 240
.8083					GXClearBitmap:
.8083	48		pha				pha
.8084	5a		phy				phy
.8085	20 58 82	jsr $8258			jsr 	GXOpenBitmap 				; start access
.8088	a0 07		ldy #$07			ldy 	#ScreenSize200 / 8192 		; X is pages to clear
.808a	ad 3a 06	lda $063a			lda 	gxHeight
.808d	c9 c8		cmp #$c8			cmp 	#200 						; 200 ?
.808f	a0 09		ldy #$09			ldy 	#ScreenSize240 / 8192
.8091					_GXCalcLastPage:
.8091	98		tya				tya 								; add to base page
.8092	18		clc				clc
.8093	6d 39 06	adc $0639			adc 	gxBasePage
.8096	85 0d		sta $0d				sta 	GFXEditSlot  				; clear from this page back
.8098					_GXClearAll:
.8098	20 aa 80	jsr $80aa			jsr 	_GXClearBlock 				; clear 8k block
.809b	c6 0d		dec $0d				dec 	GFXEditSlot  				; back to previous
.809d	a5 0d		lda $0d				lda 	GFXEditSlot
.809f	cd 39 06	cmp $0639			cmp 	gxBasePage 					; until before base page
.80a2	b0 f4		bcs $8098			bcs 	_GXClearAll
.80a4	20 69 82	jsr $8269			jsr 	GXCloseBitmap	 			; stop access
.80a7	7a		ply				ply
.80a8	68		pla				pla
.80a9	60		rts				rts
.80aa					_GXClearBlock:
.80aa	a9 00		lda #$00			lda 	#((GXMappingAddress) & $FF)
.80ac	85 38		sta $38				sta 	0+gzTemp1
.80ae	a9 a0		lda #$a0			lda 	#((GXMappingAddress) >> 8)
.80b0	85 39		sta $39				sta 	1+gzTemp1
.80b2					_GXCB0:
.80b2	a5 36		lda $36				lda 	gzTemp0
.80b4	a0 00		ldy #$00			ldy 	#0
.80b6					_GXCB1:
.80b6	91 38		sta ($38),y			sta 	(gzTemp1),y
.80b8	c8		iny				iny
.80b9	91 38		sta ($38),y			sta 	(gzTemp1),y
.80bb	c8		iny				iny
.80bc	91 38		sta ($38),y			sta 	(gzTemp1),y
.80be	c8		iny				iny
.80bf	91 38		sta ($38),y			sta 	(gzTemp1),y
.80c1	c8		iny				iny
.80c2	d0 f2		bne $80b6			bne 	_GXCB1
.80c4	e6 39		inc $39				inc 	gzTemp1+1
.80c6	a5 39		lda $39				lda 	gzTemp1+1
.80c8	c9 c0		cmp #$c0			cmp	 	#(GXMappingAddress >> 8)+$20
.80ca	d0 e6		bne $80b2			bne 	_GXCB0
.80cc	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/ab.graphics/drawing/line.asm

.80cd					GXLine:
.80cd	20 76 82	jsr $8276			jsr 	GXSortY						; sort pairs so Y1 >= Y0 e.g. top to bottom.
.80d0	20 51 81	jsr $8151			jsr 	GXLineSetup 				; the calculations in the linescanner constructor
.80d3					_GXDrawLoop:
.80d3	20 de 80	jsr $80de			jsr 	GXLineIsComplete 			; is the line complete ?
.80d6	f0 05		beq $80dd			beq 	_GXLExit
.80d8	20 f9 80	jsr $80f9			jsr 	GXLineAdvance 				; code as per advance method
.80db	80 f6		bra $80d3			bra 	_GXDrawLoop
.80dd					_GXLExit:
.80dd	60		rts				rts
.80de					GXLineIsComplete:
.80de	ad 41 06	lda $0641			lda 	GXIsDiffYLarger 			; is dy larger
.80e1	d0 0f		bne $80f2			bne 	_GXLICCompareY 				; if so compare Y1/Y0
.80e3	ad 31 06	lda $0631			lda 	GXX0 						; compare X, LSB and MSB
.80e6	4d 35 06	eor $0635			eor 	GXX1
.80e9	d0 06		bne $80f1			bne 	_GXLICExit
.80eb	ad 32 06	lda $0632			lda 	GXX0+1
.80ee	4d 36 06	eor $0636			eor 	GXX1+1
.80f1					_GXLICExit:
.80f1	60		rts				rts
.80f2					_GXLICCompareY:
.80f2	ad 37 06	lda $0637			lda 	GXY1
.80f5	4d 33 06	eor $0633			eor 	GXY0
.80f8	60		rts				rts
.80f9					GXLineAdvance:
.80f9	18		clc				clc 								; add adjust to position
.80fa	ad 44 06	lda $0644			lda 	GXAdjust
.80fd	6d 43 06	adc $0643			adc 	GXPosition
.8100	8d 44 06	sta $0644			sta 	GXAdjust
.8103	9c 46 06	stz $0646			stz 	GXAddSelect 				; clear add select flag
.8106	cd 45 06	cmp $0645			cmp 	GXTotal 					; if exceeded total
.8109	90 0a		bcc $8115			bcc 	_GXLANoExtra
.810b	ce 46 06	dec $0646			dec 	GXAddSelect 				; set addselect to $FF
.810e	38		sec				sec 								; subtract total and write back
.810f	ed 45 06	sbc $0645			sbc 	GXTotal
.8112	8d 44 06	sta $0644			sta 	GXAdjust
.8115					_GXLANoExtra:
.8115	ad 41 06	lda $0641			lda 	GXIsDiffYLarger
.8118	f0 0d		beq $8127			beq 	_GXDXLarger
.811a	20 4d 81	jsr $814d			jsr 	GXIncrementY
.811d	ad 46 06	lda $0646			lda 	GXAddSelect
.8120	f0 10		beq $8132			beq 	_GXLAExit
.8122	20 33 81	jsr $8133			jsr 	GXAdjustX
.8125	80 0b		bra $8132			bra 	_GXLAExit
.8127					_GXDXLarger:
.8127	20 33 81	jsr $8133			jsr 	GXAdjustX
.812a	ad 46 06	lda $0646			lda 	GXAddSelect
.812d	f0 03		beq $8132			beq 	_GXLAExit
.812f	20 4d 81	jsr $814d			jsr 	GXIncrementY
.8132					_GXLAExit:
.8132	60		rts				rts
.8133					GXAdjustX:
.8133	ad 42 06	lda $0642			lda 	GXDXNegative
.8136	10 0c		bpl $8144			bpl 	_GXAXRight
.8138	ad 31 06	lda $0631			lda 	GXX0
.813b	d0 03		bne $8140			bne 	_GXAXNoBorrow
.813d	ce 32 06	dec $0632			dec 	GXX0+1
.8140					_GXAXNoBorrow:
.8140	ce 31 06	dec $0631			dec 	GXX0
.8143	60		rts				rts
.8144					_GXAXRight:
.8144	ee 31 06	inc $0631			inc 	GXX0
.8147	d0 03		bne $814c			bne 	_GXAXNoCarry
.8149	ee 32 06	inc $0632			inc 	GXX0+1
.814c					_GXAXNoCarry:
.814c	60		rts				rts
.814d					GXIncrementY:
.814d	ee 33 06	inc $0633			inc 	GXY0
.8150	60		rts				rts
.8151					GXLineSetup:
.8151	ad 37 06	lda $0637			lda 	GXY1
.8154	38		sec				sec
.8155	ed 33 06	sbc $0633			sbc 	GXY0
.8158	4a		lsr a				lsr 	a
.8159	8d 40 06	sta $0640			sta 	GXDiffY
.815c	9c 42 06	stz $0642			stz 	GXDXNegative 				; clear -ve flag
.815f	38		sec				sec
.8160	ad 35 06	lda $0635			lda 	GXX1
.8163	ed 31 06	sbc $0631			sbc 	GXX0
.8166	8d 3f 06	sta $063f			sta 	GXDiffX
.8169	ad 36 06	lda $0636			lda 	GXX1+1 						; calculate MSB
.816c	ed 32 06	sbc $0632			sbc 	GXX0+1
.816f	6a		ror a				ror 	a 							; rotate bit into DiffX halving it
.8170	6e 3f 06	ror $063f			ror 	GXDiffX
.8173	0a		asl a				asl 	a
.8174	10 0c		bpl $8182			bpl 	_GDXNotNegative
.8176	a9 00		lda #$00			lda 	#0 							; make absolute value of |dx|
.8178	38		sec				sec
.8179	ed 3f 06	sbc $063f			sbc 	GXDiffX
.817c	8d 3f 06	sta $063f			sta 	GXDiffX
.817f	ce 42 06	dec $0642			dec 	GXDXNegative 				; -ve flag = $FF.
.8182					_GDXNotNegative:
.8182	9c 41 06	stz $0641			stz 	GXIsDiffYLarger 			; clear larger flag
.8185	ad 40 06	lda $0640			lda 	GXDiffY 					; set adjust and total.
.8188	8d 44 06	sta $0644			sta 	GXAdjust
.818b	ad 3f 06	lda $063f			lda 	GXDiffX
.818e	8d 45 06	sta $0645			sta 	GXTotal
.8191	ad 40 06	lda $0640			lda 	GXDiffY 					; if dy > dx
.8194	cd 3f 06	cmp $063f			cmp 	GXDiffX
.8197	90 0f		bcc $81a8			bcc 	_GDXNotLarger
.8199	ce 41 06	dec $0641			dec 	GXIsDiffYLarger 			; set the dy larger flag
.819c	ad 3f 06	lda $063f			lda 	GXDiffX 					; set adjust and total other way round
.819f	8d 44 06	sta $0644			sta 	GXAdjust
.81a2	ad 40 06	lda $0640			lda 	GXDiffY
.81a5	8d 45 06	sta $0645			sta 	GXTotal
.81a8					_GDXNotLarger:
.81a8	ad 45 06	lda $0645			lda 	GXTotal
.81ab	4a		lsr a				lsr 	a
.81ac	8d 43 06	sta $0643			sta 	GXPosition
.81af	60		rts				rts
.063f					GXDiffX:
>063f							.fill 	1
.0640					GXDiffY:
>0640							.fill 	1
.0641					GXIsDiffYLarger:
>0641							.fill 	1
.0642					GXDXNegative:
>0642							.fill 	1
.0643					GXPosition:
>0643							.fill 	1
.0644					GXAdjust:
>0644							.fill 	1
.0645					GXTotal:
>0645							.fill 	1
.0646					GXAddSelect:
>0646							.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/ab.graphics/graphics.asm

.81b0					GraphicDraw:
.81b0	c9 20		cmp #$20			cmp 	#$10*2 						; instructions 00-0F don't use
.81b2	b0 06		bcs $81ba			bcs 	_GDCoordinate
.81b4	86 36		stx $36				stx 	gzTemp0 					; save X/Y
.81b6	84 37		sty $37				sty 	gzTemp0+1
.81b8	80 2c		bra $81e6			bra 	_GDExecuteA 				; and execute
.81ba					_GDCoordinate:
.81ba	48		pha				pha 								; save AXY
.81bb	da		phx				phx
.81bc	5a		phy				phy
.81bd	a2 03		ldx #$03			ldx 	#3 							; copy currentX to lastX
.81bf					_GDCopy1:
.81bf	bd 29 06	lda $0629,x			lda 	gxCurrentX,x
.81c2	9d 2d 06	sta $062d,x			sta 	gxLastX,x
.81c5	ca		dex				dex
.81c6	10 f7		bpl $81bf			bpl 	_GDCopy1
.81c8	68		pla				pla 								; update Y
.81c9	8d 2b 06	sta $062b			sta 	gxCurrentY
.81cc	9c 2c 06	stz $062c			stz 	gxCurrentY+1
.81cf	68		pla				pla
.81d0	8d 29 06	sta $0629			sta 	gxCurrentX
.81d3	68		pla				pla 								; get A (command+X.1) back
.81d4	48		pha				pha
.81d5	29 01		and #$01			and 	#1 							; put LSB as MSB of Current.X
.81d7	8d 2a 06	sta $062a			sta 	gxCurrentX+1
.81da	a2 07		ldx #$07			ldx 	#7 								; copy current and last to gxXY/12 work area
.81dc					_GDCopy2:
.81dc	bd 29 06	lda $0629,x			lda 	gxCurrentX,x
.81df	9d 31 06	sta $0631,x			sta 	gxX0,x
.81e2	ca		dex				dex
.81e3	10 f7		bpl $81dc			bpl 	_GDCopy2
.81e5	68		pla				pla 								; get command back
.81e6					_GDExecuteA:
.81e6	29 fe		and #$fe			and 	#$FE 						; lose LSB
.81e8	aa		tax				tax
.81e9	7c ed 81	jmp ($81ed,x)			jmp 	(GDVectors,x)
.81ec					GXMove:
.81ec	60		rts				rts
.81ed					GDVectors:
>81ed	83 80						.word 	GXClearBitmap 				; $00 	  	: Clear Bitmap to X
>81ef							.fill 	15*2 						; $01-$0F 	: Reserved
>820d	ec 81						.word 	GXMove 						; $10     	: Move (does nothing other than update coords)
>820f	cd 80						.word 	GXLine 						; $11 		: Draw line

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/ab.graphics/grtest.asm

.8211					RunDemos:
.8211	64 01		stz $01				stz 	1
.8213	a9 0f		lda #$0f			lda 	#$0F
.8215	8d 00 d0	sta $d000			sta 	$D000
.8218	a9 01		lda #$01			lda 	#1
.821a	8d 00 d1	sta $d100			sta 	$D100
.821d	9c 01 d1	stz $d101			stz 	$D101
.8220	9c 02 d1	stz $d102			stz 	$D102
.8223	a9 02		lda #$02			lda 	#2
.8225	8d 03 d1	sta $d103			sta 	$D103
.8228	a9 10		lda #$10			lda 	#16
.822a	8d 39 06	sta $0639			sta 	gxBasePage
.822d	a9 f0		lda #$f0			lda 	#240
.822f	8d 3a 06	sta $063a			sta 	gxHeight
.8232	a9 fc		lda #$fc			lda 	#$FC
.8234	8d 3b 06	sta $063b			sta 	gxForeground
.8237	a9 01		lda #$01			lda 	#1
.8239	8d 3c 06	sta $063c			sta 	gxBackground
.823c	a9 00		lda #$00			lda 	#((0)*2)+((($E0) >> 8) & 1)
.823e	a2 e0		ldx #$e0			ldx 	#(($E0) & $FF)
.8240	a0 00		ldy #$00			ldy 	#(0)
.8242	20 b0 81	jsr $81b0			jsr 	GraphicDraw
.8245	a9 20		lda #$20			lda 	#((16)*2)+(((30) >> 8) & 1)
.8247	a2 1e		ldx #$1e			ldx 	#((30) & $FF)
.8249	a0 1e		ldy #$1e			ldy 	#(30)
.824b	20 b0 81	jsr $81b0			jsr 	GraphicDraw
.824e	a9 22		lda #$22			lda 	#((17)*2)+(((10) >> 8) & 1)
.8250	a2 0a		ldx #$0a			ldx 	#((10) & $FF)
.8252	a0 14		ldy #$14			ldy 	#(20)
.8254	20 b0 81	jsr $81b0			jsr 	GraphicDraw
.8257	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/ab.graphics/utility/access.asm

.8258					GXOpenBitmap:
.8258	78		sei				sei 								; no interrupts here
.8259	a5 00		lda $00				lda 	0 							; save original MMU Control register
.825b	8d 3e 06	sta $063e			sta 	gxOriginalMMUSetting
.825e	a9 80		lda #$80			lda 	#GFXMappingLUT*16+$80+GFXMappingLUT
.8260	85 00		sta $00				sta 	0
.8262	a5 0d		lda $0d				lda 	GFXEditSlot 				; Save the original LUT slot value
.8264	8d 3d 06	sta $063d			sta 	gxOriginalLUTValue
.8267	58		cli				cli
.8268	60		rts				rts
.8269					GXCloseBitmap:
.8269	78		sei				sei
.826a	ad 3d 06	lda $063d			lda 	gxOriginalLUTValue 			; restore LUT slot value
.826d	85 0d		sta $0d				sta 	GFXEditSlot
.826f	ad 3e 06	lda $063e			lda 	gxOriginalMMUSetting 		; restore MMU Control register
.8272	85 00		sta $00				sta 	0
.8274	58		cli				cli
.8275	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/ab.graphics/utility/sort.asm

.8276					GXSortY:
.8276	ad 33 06	lda $0633			lda 	gxY0 						; if Y0 >= Y1
.8279	cd 37 06	cmp $0637			cmp 	gxY1
.827c	90 0b		bcc $8289			bcc 	_GXSYSorted
.827e	a2 03		ldx #$03			ldx 	#3 							; swap 3-0
.8280	a0 07		ldy #$07			ldy 	#7 							; with 4-7
.8282					_GXSwap1:
.8282	20 8a 82	jsr $828a			jsr 	GXSwapXY
.8285	88		dey				dey
.8286	ca		dex				dex
.8287	10 f9		bpl $8282			bpl 	_GXSwap1
.8289					_GXSYSorted:
.8289	60		rts				rts
.828a					GXSwapXY:
.828a	bd 31 06	lda $0631,x			lda 	gxX0,x
.828d	48		pha				pha
.828e	b9 31 06	lda $0631,y			lda 	gxX0,y
.8291	9d 31 06	sta $0631,x			sta 	gxX0,x
.8294	68		pla				pla
.8295	99 31 06	sta $0631,y			sta 	gxX0,y
.8298	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/assembler.asm

.8299					AssembleGroup1:
.8299	a9 ff		lda #$ff			lda 	#$FF
.829b	8d a5 04	sta $04a5			sta 	ModeMask 					; initialise the mode mask - all for all
.829e	80 02		bra $82a2			bra 	AsmGroup12
.82a0					AssembleGroup2:
.82a0	a5 00		lda $00				lda 	$00
.82a2					AsmGroup12:
.82a2	8d a3 04	sta $04a3			sta 	IsGroup1 					; save the 'group 1' flag
.82a5	68		pla				pla 								; pop the return address to access the information following.
.82a6	fa		plx				plx
.82a7	20 30 83	jsr $8330			jsr 	AccessParameters 			; get opcode and save as base
.82aa	8d a4 04	sta $04a4			sta 	BaseOpcode
.82ad	ad a3 04	lda $04a3			lda 	IsGroup1 					; skip if group 1 as we don't have a complex mask.
.82b0	d0 08		bne $82ba			bne 	_AG12HaveMask
.82b2	a9 02		lda #$02			lda 	#2 							; if group 2 the second parameter is the mask
.82b4	20 38 83	jsr $8338			jsr 	GetParameter		 		; e.g. which modes are supported for this operand
.82b7	8d a5 04	sta $04a5			sta 	ModeMask
.82ba					_AG12HaveMask:
.82ba	20 73 84	jsr $8473			jsr 	TypeAndCalculateOperand 	; get zero page type
.82bd	da		phx				phx 								; save found address mode
.82be	20 9c 83	jsr $839c			jsr 	AssembleModeX
.82c1	fa		plx				plx  								; restore address mode
.82c2	b0 0b		bcs $82cf			bcs 	_AG12Exit
.82c4	20 d0 82	jsr $82d0			jsr 	PromoteToAbsolute  			; promote ZP to ABS and try that
.82c7	20 9c 83	jsr $839c			jsr 	AssembleModeX
.82ca	b0 03		bcs $82cf			bcs 	_AG12Exit
.82cc	4c 8e a8	jmp $a88e			jmp 	SyntaxError 				; can't do either, so must be wrong mode/operand.
.82cf					_AG12Exit:
.82cf	60		rts				rts
.82d0					PromoteToAbsolute:
.82d0	a9 6c		lda #$6c			lda 	#AM_ABS 					; lda xx
.82d2	e0 e4		cpx #$e4			cpx 	#AM_ZEROPAGE
.82d4	f0 19		beq $82ef			beq 	_PTADo
.82d6	a9 7c		lda #$7c			lda 	#AM_ABSX 					; lda xx,X
.82d8	e0 f4		cpx #$f4			cpx 	#AM_ZEROX
.82da	f0 13		beq $82ef			beq 	_PTADo
.82dc	a9 78		lda #$78			lda 	#AM_ABSY 					; lda xx,Y
.82de	e0 80		cpx #$80			cpx 	#AM_ZEROY
.82e0	f0 0d		beq $82ef			beq 	_PTADo
.82e2	a9 01		lda #$01			lda 	#AM_INDABS 					; lda (xx) (jump)
.82e4	e0 d1		cpx #$d1			cpx 	#AM_IND
.82e6	f0 07		beq $82ef			beq 	_PTADo
.82e8	a9 02		lda #$02			lda 	#AM_INDABSX 				; lda (xx,x) (jump)
.82ea	e0 c0		cpx #$c0			cpx 	#AM_INDX
.82ec	f0 01		beq $82ef			beq 	_PTADo
.82ee	60		rts				rts
.82ef					_PTADo:
.82ef	aa		tax				tax
.82f0	60		rts				rts
.82f1					AssembleGroup3:
.82f1	68		pla				pla 								; get parameters, which is just the opcode.
.82f2	fa		plx				plx
.82f3	20 30 83	jsr $8330			jsr 	AccessParameters 			; get and output opcode
.82f6	20 48 83	jsr $8348			jsr 	AssemblerWriteByte
.82f9	20 d7 84	jsr $84d7			jsr 	CalculateOperand 			; get a 16 bit operand
.82fc	ad 08 04	lda $0408			lda 	NSMantissa0 				; calculate the offset
.82ff	38		sec				sec
.8300	ed 9e 04	sbc $049e			sbc 	AssemblerAddress
.8303	48		pha				pha 								; LSB in A
.8304	ad 10 04	lda $0410			lda 	NSMantissa1
.8307	ed 9f 04	sbc $049f			sbc 	AssemblerAddress+1
.830a	aa		tax				tax 								; MSB in X
.830b	68		pla				pla
.830c	18		clc				clc 								; $80 to easy check $80-$7F, plus 1 for offset error
.830d	69 7f		adc #$7f			adc 	#$7F
.830f	90 01		bcc $8312			bcc 	_AG3NoCarry
.8311	e8		inx				inx
.8312					_AG3NoCarry:
.8312	38		sec				sec 								; fix back and write out anyways.
.8313	e9 80		sbc #$80			sbc 	#$80
.8315	20 48 83	jsr $8348			jsr 	AssemblerWriteByte
.8318	e0 00		cpx #$00			cpx 	#0 							; was it in range
.831a	f0 0a		beq $8326			beq 	_AG3Exit
.831c	ad a0 04	lda $04a0			lda 	AssemblerControl 			; are we allowing bad values ?
.831f	29 01		and #$01			and 	#1
.8321	f0 03		beq $8326			beq 	_AG3Exit
.8323	4c 93 a8	jmp $a893			jmp 	RangeError 					; no, branch is out of range
.8326					_AG3Exit:
.8326	60		rts				rts
.8327					AssembleGroup4:
.8327	68		pla				pla 								; pop address
.8328	fa		plx				plx
.8329	20 30 83	jsr $8330			jsr 	AccessParameters 			; access and get first
.832c	20 48 83	jsr $8348			jsr 	AssemblerWriteByte 			; output it.
.832f	60		rts				rts
.8330					AccessParameters:
.8330	8d a1 04	sta $04a1			sta 	ParamStart
.8333	8e a2 04	stx $04a2			stx 	ParamStart+1
.8336	a9 01		lda #$01			lda 	#1
.8338					GetParameter:
.8338	5a		phy				phy
.8339	a8		tay				tay
.833a	ad a1 04	lda $04a1			lda 	ParamStart
.833d	85 36		sta $36				sta 	zTemp0
.833f	ad a2 04	lda $04a2			lda 	ParamStart+1
.8342	85 37		sta $37				sta 	zTemp0+1
.8344	b1 36		lda ($36),y			lda 	(zTemp0),y
.8346	7a		ply				ply
.8347	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/aswrite.asm

.8348					AssemblerWriteByte:
.8348	48		pha			pha
.8349	ad a0 04	lda $04a0		lda 	AssemblerControl 				; check printing bytes ?
.834c	29 02		and #$02		and 	#2
.834e	f0 1b		beq $836b		beq 	_AWBNoPrint
.8350	ad 9f 04	lda $049f		lda		AssemblerAddress+1 				; print address
.8353	20 86 83	jsr $8386		jsr 	PrintHex
.8356	ad 9e 04	lda $049e		lda		AssemblerAddress
.8359	20 86 83	jsr $8386		jsr 	PrintHex
.835c	a9 20		lda #$20		lda 	#' '
.835e	20 31 aa	jsr $aa31		jsr 	EXTPrintCharacter
.8361	68		pla			pla 									; print byte
.8362	48		pha			pha
.8363	20 86 83	jsr $8386		jsr 	PrintHex
.8366	a9 0d		lda #$0d		lda 	#13
.8368	20 31 aa	jsr $aa31		jsr 	EXTPrintCharacter
.836b					_AWBNoPrint:
.836b	ad 9e 04	lda $049e		lda		AssemblerAddress				; copy address to zTemp0
.836e	85 36		sta $36			sta 	zTemp0
.8370	ad 9f 04	lda $049f		lda		AssemblerAddress+1
.8373	f0 0e		beq $8383		beq 	_AWBRange
.8375	85 37		sta $37			sta 	zTemp0+1
.8377	68		pla			pla 									; write byte out
.8378	92 36		sta ($36)		sta 	(zTemp0)
.837a	ee 9e 04	inc $049e		inc 	AssemblerAddress 				; bump address
.837d	d0 03		bne $8382		bne 	_AWBNoCarry
.837f	ee 9f 04	inc $049f		inc 	AssemblerAddress+1
.8382					_AWBNoCarry:
.8382	60		rts			rts
.8383					_AWBRange:
.8383	4c 93 a8	jmp $a893		jmp 	RangeError
.8386					PrintHex:
.8386	48		pha				pha
.8387	4a		lsr a				lsr 	a
.8388	4a		lsr a				lsr 	a
.8389	4a		lsr a				lsr 	a
.838a	4a		lsr a				lsr 	a
.838b	20 8f 83	jsr $838f			jsr 	_PrintNibble
.838e	68		pla				pla
.838f					_PrintNibble:
.838f	29 0f		and #$0f			and 	#15
.8391	c9 0a		cmp #$0a			cmp 	#10
.8393	90 02		bcc $8397			bcc 	_NoShift
.8395	69 06		adc #$06			adc 	#6
.8397					_NoShift:
.8397	69 30		adc #$30			adc 	#48
.8399	4c 31 aa	jmp $aa31			jmp 	EXTPrintCharacter

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/instruction.asm

.839c					AssembleModeX:
.839c	5a		phy				phy
.839d	ad a3 04	lda $04a3			lda 	IsGroup1
.83a0	f0 17		beq $83b9			beq 	_AMXGroup2
.83a2	8a		txa				txa 							; is it in group # 1
.83a3	29 40		and #$40			and 	#AM_ISG1
.83a5	f0 50		beq $83f7			beq 	_AMXFail 				; no, give up.
.83a7	8a		txa				txa 							; get back.
.83a8	29 1f		and #$1f			and 	#$1F 					; this is now the offset.
.83aa	e0 e0		cpx #$e0			cpx 	#AM_IMMEDIATE 			; if not immediate, we can continue.
.83ac	d0 22		bne $83d0			bne 	_AMXHaveInfo
.83ae	ad a4 04	lda $04a4			lda 	BaseOpcode 				; cannot store immediate.
.83b1	c9 81		cmp #$81			cmp 	#$81
.83b3	f0 42		beq $83f7			beq 	_AMXFail
.83b5	a9 08		lda #$08			lda 	#8 						; if immediate we use offset 8.
.83b7	80 17		bra $83d0			bra 	_AMXHaveInfo 			; odd design decision there.
.83b9					_AMXGroup2:
.83b9	8a		txa				txa 							; is it in group 2 ?
.83ba	29 20		and #$20			and 	#AM_ISG2
.83bc	f0 39		beq $83f7			beq 	_AMXFail 				; no, give up.
.83be	8a		txa				txa 							; get the offset into Y
.83bf	29 1f		and #$1f			and 	#$1F
.83c1	4a		lsr a				lsr 	a 						; make it 0-7.
.83c2	4a		lsr a				lsr  	a
.83c3	a8		tay				tay
.83c4	ad a5 04	lda $04a5			lda 	ModeMask 				; shift the modemask left so you can check it against the requested offset
.83c7					_AMXCheckOkay:
.83c7	0a		asl a				asl 	a 						; shift modemask left enough times to check legitimate.
.83c8	88		dey				dey
.83c9	10 fc		bpl $83c7			bpl 	_AMXCheckOkay
.83cb	90 2a		bcc $83f7			bcc 	_AMXFail 				; not allowed.
.83cd	8a		txa				txa  							; get mask back
.83ce	29 1f		and #$1f			and 	#$1F
.83d0					_AMXHaveInfo:
.83d0	e0 00		cpx #$00			cpx 	#$00 					; does it *require* an 8 bit operand
.83d2	10 05		bpl $83d9			bpl 	_AMXAnySize 			; checking bit 7, the zero page opcode flag.
.83d4	ac 10 04	ldy $0410			ldy 	NSMantissa1 			; fail if it is outside range, e.g. the MSB is set.
.83d7	d0 1e		bne $83f7			bne 	_AMXFail
.83d9					_AMXAnySize:
.83d9	18		clc				clc 							; add offset to the base opcode
.83da	6d a4 04	adc $04a4			adc 	BaseOpcode
.83dd					_AMXOutputCode:
.83dd	20 48 83	jsr $8348			jsr 	AssemblerWriteByte 		; write the opcode out.
.83e0	e0 28		cpx #$28			cpx 	#AM_ACC 				; A mode (e.g. ASL A)
.83e2	f0 10		beq $83f4			beq 	_AMXExit
.83e4	ad 08 04	lda $0408			lda 	NSMantissa0 				; write LSB operand
.83e7	20 48 83	jsr $8348			jsr 	AssemblerWriteByte
.83ea	e0 00		cpx #$00			cpx 	#$00 					; zeropage ?
.83ec	30 06		bmi $83f4			bmi 	_AMXExit
.83ee	ad 10 04	lda $0410			lda 	NSMantissa1 			; write MSB operand
.83f1	20 48 83	jsr $8348			jsr 	AssemblerWriteByte
.83f4					_AMXExit:
.83f4	7a		ply				ply
.83f5	38		sec				sec
.83f6	60		rts				rts
.83f7					_AMXFail:
.83f7	a0 00		ldy #$00			ldy 	#0
.83f9					_AMXCheckOddities:
.83f9	8a		txa				txa
.83fa	d9 22 84	cmp $8422,y			cmp 	ExtraOpcode+2,y 		; match address mode
.83fd	d0 16		bne $8415			bne 	_AMXCONext
.83ff	b9 20 84	lda $8420,y			lda 	ExtraOpcode+0,y 		; do the base opcodes match
.8402	cd a4 04	cmp $04a4			cmp 	BaseOpcode
.8405	d0 0e		bne $8415			bne 	_AMXCONext
.8407	e0 00		cpx #$00			cpx 	#$00 					; requires zero page ?
.8409	10 05		bpl $8410			bpl 	_AMXCONotZero
.840b	ad 10 04	lda $0410			lda 	NSMantissa1
.840e	d0 05		bne $8415			bne 	_AMXCONext
.8410					_AMXCONotZero:
.8410	b9 21 84	lda $8421,y			lda 	ExtraOpcode+1,y 		; get new opcode
.8413	80 c8		bra $83dd			bra 	_AMXOutputCode 			; and assemble it
.8415					_AMXCONext:
.8415	c8		iny				iny
.8416	c8		iny				iny
.8417	c8		iny				iny
.8418	b9 20 84	lda $8420,y			lda 	ExtraOpcode+0,y 		; end of table
.841b	d0 dc		bne $83f9			bne 	_AMXCheckOddities
.841d					_AMXCOFail:
.841d	7a		ply				ply
.841e	18		clc				clc
.841f	60		rts				rts
.8420					ExtraOpcode:
>8420	40 6c 01					.byte $40,$6c,AM_INDABS 	; jmp
>8423	40 7c 02					.byte $40,$7C,AM_INDABSX 	; jmp
>8426	a2 be 78					.byte $a2,$BE,AM_ABSY 		; ldx
>8429	a2 b6 80					.byte $a2,$B6,AM_ZEROY 		; ldx
>842c	82 96 80					.byte $82,$96,AM_ZEROY 		; stx
>842f	e2 1a 28					.byte $e2,$1a,AM_ACC 		; inc
>8432	c2 3a 28					.byte $c2,$3a,AM_ACC 		; dec
>8435	20 89 e0					.byte $20,$89,AM_IMMEDIATE 	; bit
>8438	60 9c 6c					.byte $60,$9c,AM_ABS 		; stz
>843b	60 9e 7c					.byte $60,$9e,AM_ABSX 		; stz
>843e	00						.byte $00

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/label.asm

.843f					LabelHere:
.843f	c8		iny				iny 								; skip .
.8440	a2 00		ldx #$00			ldx 	#0 							; get a term
.8442	20 49 96	jsr $9649			jsr 	EvaluateTerm 				; get a term
.8445	ad 00 04	lda $0400			lda 	NSStatus 					; needs to be an integer reference.
.8448	c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.844a	d0 24		bne $8470			bne 	_ALType
.844c	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy reference address to zTemp0
.844f	85 36		sta $36				sta 	zTemp0
.8451	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8454	85 37		sta $37				sta 	zTemp0+1
.8456	5a		phy				phy 								; copy address in.
.8457	a0 01		ldy #$01			ldy 	#1
.8459	ad 9e 04	lda $049e			lda	 	AssemblerAddress
.845c	92 36		sta ($36)			sta 	(zTemp0)
.845e	ad 9f 04	lda $049f			lda	 	AssemblerAddress+1
.8461	91 36		sta ($36),y			sta 	(zTemp0),y
.8463	c8		iny				iny
.8464	a9 00		lda #$00			lda 	#0
.8466	91 36		sta ($36),y			sta 	(zTemp0),y
.8468	c8		iny				iny
.8469	91 36		sta ($36),y			sta 	(zTemp0),y
.846b	c8		iny				iny
.846c	91 36		sta ($36),y			sta 	(zTemp0),y
.846e	7a		ply				ply
.846f	60		rts				rts
.8470					_ALType:
.8470	4c 98 a8	jmp $a898			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/operands.asm

.8473					TypeAndCalculateOperand:
.8473	b1 30		lda ($30),y			lda 	(codePtr),y
.8475	a2 28		ldx #$28			ldx 	#AM_ACC 					; ACC if : or EOL
.8477	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.8479	f0 5b		beq $84d6			beq 	_TACOExit
.847b	c9 80		cmp #$80			cmp 	#KWC_EOL
.847d	f0 57		beq $84d6			beq 	_TACOExit
.847f	c8		iny				iny
.8480	a2 e0		ldx #$e0			ldx 	#AM_IMMEDIATE
.8482	c9 23		cmp #$23			cmp 	#KWD_HASH 					; if hash, then immediate - constant.
.8484	f0 51		beq $84d7			beq 	CalculateOperand
.8486	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; if ( then check for indirection
.8488	f0 1f		beq $84a9			beq 	_TACOIndirect
.848a	88		dey				dey 								; undo get of first character
.848b	20 d7 84	jsr $84d7			jsr 	CalculateOperand 			; get operand
.848e	b1 30		lda ($30),y			lda 	(codePtr),y
.8490	a2 e4		ldx #$e4			ldx 	#AM_ZEROPAGE 				; if not, try zero page (then absolute)
.8492	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8494	d0 40		bne $84d6			bne 	_TACOExit
.8496	c8		iny				iny
.8497	20 1f a2	jsr $a21f			jsr 	TACOCheckXY 				; extract X,Y or 0 (neither) from the variable.
.849a	a2 f4		ldx #$f4			ldx 	#AM_ZEROX 					; check for X
.849c	c9 58		cmp #$58			cmp 	#'X'
.849e	f0 36		beq $84d6			beq 	_TACOExit
.84a0	a2 80		ldx #$80			ldx 	#AM_ZEROY 					; check for Y
.84a2	c9 59		cmp #$59			cmp 	#'Y'
.84a4	f0 30		beq $84d6			beq 	_TACOExit
.84a6					_TACOSyntax:
.84a6	4c 8e a8	jmp $a88e			jmp 	SyntaxError
.84a9					_TACOIndirect:
.84a9	20 d7 84	jsr $84d7			jsr 	CalculateOperand 			; get the operand
.84ac	b1 30		lda ($30),y			lda 	(codePtr),y
.84ae	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if , then it must be ,X)
.84b0	f0 17		beq $84c9			beq 	_TACOIndX
.84b2	20 a8 a2	jsr $a2a8			jsr 	CheckRightBracket  			; otherwise must be ) or ),Y
.84b5	b1 30		lda ($30),y			lda 	(codePtr),y
.84b7	a2 d1		ldx #$d1			ldx 	#AM_IND
.84b9	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not comma then exit with (xx)
.84bb	d0 19		bne $84d6			bne 	_TACOExit
.84bd	c8		iny				iny
.84be	20 1f a2	jsr $a21f			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.84c1	c9 59		cmp #$59			cmp 	#'Y' 						; check Y
.84c3	d0 e1		bne $84a6			bne 	_TACOSyntax
.84c5	a2 d0		ldx #$d0			ldx 	#AM_INDY
.84c7	80 0d		bra $84d6			bra 	_TACOExit
.84c9					_TACOIndX:
.84c9	c8		iny				iny
.84ca	20 1f a2	jsr $a21f			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.84cd	c9 58		cmp #$58			cmp 	#'X' 						; check X
.84cf	d0 d5		bne $84a6			bne 	_TACOSyntax
.84d1	20 a8 a2	jsr $a2a8			jsr 	CheckRightBracket			; check )
.84d4	a2 c0		ldx #$c0			ldx 	#AM_INDX
.84d6					_TACOExit:
.84d6	60		rts				rts
.84d7					CalculateOperand:
.84d7	48		pha				pha
.84d8	da		phx				phx
.84d9	a2 00		ldx #$00			ldx 	#0 							; get 16 bit integer in Slot 0
.84db	20 b3 9a	jsr $9ab3			jsr 	Evaluate16BitInteger
.84de	fa		plx				plx
.84df	68		pla				pla
.84e0	60		rts				rts
.a21f					TACOCheckXY:
.a21f	b1 30		lda ($30),y			lda 	(codePtr),y
.a221	29 c0		and #$c0			and 	#$C0 						; check it is an identifier reference.
.a223	c9 40		cmp #$40			cmp 	#$40
.a225	d0 21		bne $a248			bne 	_TCXYFail
.a227	b1 30		lda ($30),y			lda 	(codePtr),y
.a229	18		clc				clc
.a22a	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.a22c	85 37		sta $37				sta 	zTemp0+1
.a22e	c8		iny				iny
.a22f	b1 30		lda ($30),y			lda 	(codePtr),y
.a231	c8		iny				iny
.a232	85 36		sta $36				sta 	zTemp0
.a234	5a		phy				phy 								; save position
.a235	a0 02		ldy #$02			ldy 	#2 							; type is integer ?
.a237	b1 36		lda ($36),y			lda 	(zTemp0),y
.a239	d0 0c		bne $a247			bne 	_TCXYPopFail
.a23b	a0 08		ldy #$08			ldy 	#8 							; get first character, should have bit 7 set as also last.
.a23d	b1 36		lda ($36),y			lda 	(zTemp0),y
.a23f	c9 d8		cmp #$d8			cmp 	#'X'+$80 					; should be X or Y
.a241	f0 08		beq $a24b			beq 	_TCXYFound
.a243	c9 d9		cmp #$d9			cmp 	#'Y'+$80
.a245	f0 04		beq $a24b			beq 	_TCXYFound
.a247					_TCXYPopFail:
.a247	7a		ply				ply
.a248					_TCXYFail:
.a248	a9 00		lda #$00			lda 	#0
.a24a	60		rts				rts
.a24b					_TCXYFound:
.a24b	7a		ply				ply 								; restore position
.a24c	29 7f		and #$7f			and 	#$7F 						; throw bit 7
.a24e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/editor.asm

.84e1					EditProgramCode:
.84e1	ad a7 04	lda $04a7			lda 	TokenLineNumber 			; find the line.
.84e4	ae a8 04	ldx $04a8			ldx 	TokenLineNumber+1
.84e7	20 86 9b	jsr $9b86			jsr 	MemorySearch
.84ea	90 05		bcc $84f1			bcc 	_EPCNoDelete 				; reached the end don't delete
.84ec	d0 03		bne $84f1			bne 	_EPCNoDelete 				; found slot but didn't match, no delete
.84ee	20 75 aa	jsr $aa75			jsr 	MemoryDeleteLine 			; delete the line
.84f1					_EPCNoDelete:
.84f1	ad a9 04	lda $04a9			lda 	TokenBuffer 				; buffer empty
.84f4	c9 80		cmp #$80			cmp 	#KWC_EOL
.84f6	f0 0d		beq $8505			beq 	_EPCNoInsert
.84f8	ad a7 04	lda $04a7			lda 	TokenLineNumber 			; find the line - it cannot exist.
.84fb	ae a8 04	ldx $04a8			ldx 	TokenLineNumber+1 			; so this can't fail, it returns some point in the code.
.84fe	20 86 9b	jsr $9b86			jsr 	MemorySearch
.8501	18		clc				clc 								; insert at this point.
.8502	20 ac aa	jsr $aaac			jsr 	MemoryInsertLine 			; insert the line
.8505					_EPCNoInsert:
.8505	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/warmstart.asm

.8506					WarmStart:
.8506	a2 ff		ldx #$ff			ldx 	#$FF
.8508	9a		txs				txs
.8509	20 47 aa	jsr $aa47			jsr 	EXTInputLine 				; get line to lineBuffer
.850c	20 a0 9f	jsr $9fa0			jsr 	TokeniseLine 				; tokenise the line
.850f	ad a7 04	lda $04a7			lda 	TokenLineNumber 			; line number ?
.8512	0d a8 04	ora $04a8			ora 	TokenLineNumber+1
.8515	d0 17		bne $852e			bne 	_WSEditCode 				; if so,edit code.
.8517	9c a6 04	stz $04a6			stz 	TokenOffset 				; zero offset, meaning it only runs one line.
.851a	a9 a6		lda #$a6			lda 	#((TokenOffset) & $FF)
.851c	85 30		sta $30				sta 	codePtr
.851e	a9 04		lda #$04			lda 	#((TokenOffset) >> 8)
.8520	85 31		sta $31				sta 	codePtr+1
.8522	ad a9 04	lda $04a9			lda 	TokenBuffer 				; nothing to run
.8525	c9 80		cmp #$80			cmp 	#KWC_EOL
.8527	f0 dd		beq $8506			beq 	WarmStart
.8529	20 37 8b	jsr $8b37			jsr 	RUNCodePointerLine 			; execute that line.
.852c	80 d8		bra $8506			bra 	WarmStart
.852e					_WSEditCode:
.852e	20 e1 84	jsr $84e1			jsr 	EditProgramCode
.8531	20 9f 85	jsr $859f			jsr 	ClearCommand
.8534	80 d0		bra $8506			bra 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assemble.asm

.8536					AssembleCommand:
.8536	a2 00		ldx #$00			ldx 	#0
.8538	20 b3 9a	jsr $9ab3			jsr 	Evaluate16BitInteger 		; start address
.853b	ad 08 04	lda $0408			lda 	NSMantissa0
.853e	8d 9e 04	sta $049e			sta 	AssemblerAddress
.8541	ad 10 04	lda $0410			lda 	NSMantissa1
.8544	8d 9f 04	sta $049f			sta 	AssemblerAddress+1
.8547	20 b0 a2	jsr $a2b0			jsr 	CheckComma
.854a	20 bf 9a	jsr $9abf			jsr 	Evaluate8BitInteger 		; options
.854d	ad 08 04	lda $0408			lda 	NSMantissa0
.8550	8d a0 04	sta $04a0			sta 	AssemblerControl
.8553	60		rts				rts
.8554	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assert.asm

.8555					AssertCommand:
.8555	a2 00		ldx #$00			ldx 	#0
.8557	20 9e 9a	jsr $9a9e			jsr 	EvaluateInteger 			; the assert test
.855a	20 57 9b	jsr $9b57			jsr 	NSMIsZero 					; exit if result is non zero.
.855d	d0 05		bne $8564			bne 	_ACExit
.855f	a9 0a		lda #$0a		lda	#10
.8561	4c 6f 8f	jmp $8f6f		jmp	ErrorHandler
.8564					_ACExit:
.8564	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/call.asm

.8565					CallCommand:
.8565	a2 00		ldx #$00			ldx 	#0
.8567	20 b3 9a	jsr $9ab3			jsr 	Evaluate16BitInteger
.856a					_CCClear
.856a	e8		inx				inx  								; clear 1,2 and 3 (for A X Y)
.856b	20 27 9b	jsr $9b27			jsr 	NSMSetZero
.856e	e0 04		cpx #$04			cpx 	#4
.8570	d0 f8		bne $856a			bne 	_CCClear
.8572	a2 00		ldx #$00			ldx 	#0 							; and keep trying
.8574					_CCCParam:
.8574	b1 30		lda ($30),y			lda 	(codePtr),y
.8576	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8578	d0 09		bne $8583			bne 	_CCCRun6502
.857a	c8		iny				iny 								; skip comma
.857b	e8		inx				inx	 								; next level
.857c	20 bf 9a	jsr $9abf			jsr 	Evaluate8BitInteger 		; get A/X/Y
.857f	e0 03		cpx #$03			cpx 	#3
.8581	90 f1		bcc $8574			bcc 	_CCCParam 					; done all 3 ?
.8583					_CCCRun6502:
.8583	5a		phy				phy 								; save position
.8584	ad 10 04	lda $0410			lda 	NSMantissa1 				; put address in zTemp0
.8587	85 37		sta $37				sta 	zTemp0+1
.8589	ad 08 04	lda $0408			lda 	NSMantissa0
.858c	85 36		sta $36				sta 	zTemp0
.858e	ad 09 04	lda $0409			lda 	NSMantissa0+1 				; get registers
.8591	ae 0a 04	ldx $040a			ldx 	NSMantissa0+2
.8594	ac 0b 04	ldy $040b			ldy 	NSMantissa0+3
.8597	20 9c 85	jsr $859c			jsr 	_CCCZTemp0 					; call zTemp0
.859a	7a		ply				ply 								; restore position and exit
.859b	60		rts				rts
.859c					_CCCZTemp0:
.859c	6c 36 00	jmp ($0036)			jmp 	(zTemp0)

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/clear.asm

.859f					ClearCommand:
.859f	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.85a1	85 36		sta $36				sta 	0+zTemp0
.85a3	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.85a5	85 37		sta $37				sta 	1+zTemp0
.85a7					_ClearZeroLoop:
.85a7	b2 36		lda ($36)			lda 	(zTemp0) 					; end of variables
.85a9	f0 24		beq $85cf			beq 	_ClearZeroEnd
.85ab	a0 03		ldy #$03			ldy 	#3 							; erase the variables
.85ad	a9 00		lda #$00			lda 	#0
.85af					_ClearOneVariable:
.85af	91 36		sta ($36),y			sta 	(zTemp0),y
.85b1	c8		iny				iny
.85b2	c0 08		cpy #$08			cpy 	#8
.85b4	d0 f9		bne $85af			bne 	_ClearOneVariable
.85b6	a0 02		ldy #$02			ldy 	#2 							; has it been marked procedure
.85b8	b1 36		lda ($36),y			lda 	(zTemp0),y
.85ba	c9 18		cmp #$18			cmp 	#NSTProcedure
.85bc	d0 04		bne $85c2			bne 	_ClearNotProcedure
.85be	a9 04		lda #$04			lda 	#NSTInteger+NSBIsArray 		; set it back to an integer array
.85c0	91 36		sta ($36),y			sta 	(zTemp0),y
.85c2					_ClearNotProcedure:
.85c2	18		clc				clc 								; go to the next variable
.85c3	b2 36		lda ($36)			lda 	(zTemp0)
.85c5	65 36		adc $36				adc 	zTemp0
.85c7	85 36		sta $36				sta 	zTemp0
.85c9	90 dc		bcc $85a7			bcc 	_ClearZeroLoop
.85cb	e6 37		inc $37				inc 	zTemp0+1
.85cd	80 d8		bra $85a7			bra 	_ClearZeroLoop
.85cf					_ClearZeroEnd:
.85cf	18		clc				clc
.85d0	a5 36		lda $36				lda 	zTemp0
.85d2	69 01		adc #$01			adc 	#1
.85d4	8d 8c 04	sta $048c			sta 	lowMemPtr
.85d7	a5 37		lda $37				lda 	zTemp0+1
.85d9	69 00		adc #$00			adc 	#0
.85db	8d 8d 04	sta $048d			sta 	lowMemPtr+1
.85de	20 40 9c	jsr $9c40			jsr 	StackReset
.85e1	20 8f ab	jsr $ab8f			jsr 	StringSystemInitialise
.85e4	20 8f 8e	jsr $8e8f			jsr 	ProcedureScan
.85e7	20 f3 8a	jsr $8af3			jsr 	Command_Restore
.85ea	9c 9e 04	stz $049e			stz 	AssemblerAddress
.85ed	9c 9f 04	stz $049f			stz 	AssemblerAddress+1
.85f0	9c a0 04	stz $04a0			stz 	AssemblerControl
.85f3	20 36 98	jsr $9836			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.85f6	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/data.asm

.85f7					Command_Data:
.85f7	a9 3a		lda #$3a			lda 	#KWD_COLON 					; advance to colon/EOL
.85f9	a2 80		ldx #$80			ldx 	#KWC_EOL
.85fb	20 e1 8e	jsr $8ee1			jsr 	ScanForward
.85fe	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/dim.asm

.85ff					DimCommand:
.85ff	b1 30		lda ($30),y			lda 	(codePtr),y
.8601	29 c0		and #$c0			and 	#$C0
.8603	c9 40		cmp #$40			cmp 	#$40
.8605	d0 7a		bne $8681			bne 	_DCSyntax
.8607	b1 30		lda ($30),y			lda 	(codePtr),y
.8609	18		clc				clc
.860a	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.860c	85 3f		sta $3f				sta 	zaTemp+1
.860e	c8		iny				iny
.860f	b1 30		lda ($30),y			lda 	(codePtr),y
.8611	c8		iny				iny
.8612	85 3e		sta $3e				sta 	zaTemp
.8614	5a		phy				phy
.8615	a0 02		ldy #$02			ldy 	#2 						; read type byte
.8617	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8619	29 18		and #$18			and 	#NSBTypeMask 			; check it's not a procedure
.861b	c9 18		cmp #$18			cmp 	#NSTProcedure
.861d	f0 62		beq $8681			beq 	_DCSyntax
.861f	b1 3e		lda ($3e),y			lda 	(zaTemp),y 				; check it's an array
.8621	29 04		and #$04			and 	#NSBIsArray
.8623	f0 64		beq $8689			beq 	_DCType
.8625	a0 04		ldy #$04			ldy 	#4 						; check not already defined
.8627	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8629	d0 59		bne $8684			bne 	_DCRedefine
.862b	7a		ply				ply
.862c	20 8c 86	jsr $868c			jsr 	_DCGetSize 				; get array size, check it.
.862f	5a		phy				phy
.8630	a0 05		ldy #$05			ldy 	#5 						; store in first array size slot
.8632	91 3e		sta ($3e),y			sta 	(zaTemp),y 				; second will be zero.
.8634	7a		ply				ply 							; is there a second (e.g. ,x)
.8635	b1 30		lda ($30),y			lda 	(codePtr),y
.8637	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8639	d0 0a		bne $8645			bne 	_DCOneDimension
.863b	c8		iny				iny 							; skip comma
.863c	20 8c 86	jsr $868c			jsr 	_DCGetSize 				; get 2nd array size
.863f	5a		phy				phy
.8640	a0 06		ldy #$06			ldy 	#6 						; store in 2nd array size
.8642	91 3e		sta ($3e),y			sta 	(zaTemp),y
.8644	7a		ply				ply
.8645					_DCOneDimension:
.8645	5a		phy				phy 							; save position
.8646	a0 05		ldy #$05			ldy 	#5 						; dimensions + 1 in AX (as zero based)
.8648	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.864a	aa		tax				tax
.864b	c8		iny				iny
.864c	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.864e	e8		inx				inx 							; bump them.
.864f	1a		inc a				inc 	a
.8650	20 2a a7	jsr $a72a			jsr 	Multiply8x8 			; work out the total number of elements -> zTemp0
.8653	a5 37		lda $37				lda 	zTemp0+1 				; don't allow more than 8192 elements whatever
.8655	29 e0		and #$e0			and 	#$E0
.8657	d0 23		bne $867c			bne 	_DCSize
.8659	a0 02		ldy #$02			ldy 	#2 						; get base type
.865b	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.865d	20 9a 86	jsr $869a			jsr 	ScaleByBaseType 		; scale by base type
.8660	a5 36		lda $36				lda 	zTemp0
.8662	a6 37		ldx $37				ldx 	zTemp0+1
.8664	20 f8 97	jsr $97f8			jsr 	AllocateXABytes 		; allocate memory
.8667	a0 03		ldy #$03			ldy 	#3 						; copy into the address.
.8669	91 3e		sta ($3e),y			sta 	(zaTemp),y
.866b	c8		iny				iny
.866c	8a		txa				txa
.866d	91 3e		sta ($3e),y			sta 	(zaTemp),y
.866f	7a		ply				ply 							; get position back
.8670	20 a8 a2	jsr $a2a8			jsr 	CheckRightBracket 		; check )
.8673	b1 30		lda ($30),y			lda 	(codePtr),y
.8675	c8		iny				iny 							; consume in case
.8676	c9 2c		cmp #$2c			cmp 	#KWD_COMMA		 		; if so do another DIM.
.8678	f0 85		beq $85ff			beq 	DimCommand
.867a	88		dey				dey 							; undo consume
.867b	60		rts				rts
.867c					_DCSize:
.867c	a9 16		lda #$16		lda	#22
.867e	4c 6f 8f	jmp $8f6f		jmp	ErrorHandler
.8681					_DCSyntax:
.8681	4c 8e a8	jmp $a88e			jmp 	SyntaxError
.8684					_DCRedefine:
.8684	a9 15		lda #$15		lda	#21
.8686	4c 6f 8f	jmp $8f6f		jmp	ErrorHandler
.8689					_DCType:
.8689	4c 98 a8	jmp $a898			jmp 	TypeError
.868c					_DCGetSize:
.868c	a2 00		ldx #$00			ldx 	#0 						; get first index.
.868e	20 bf 9a	jsr $9abf			jsr 	Evaluate8BitInteger 	; get array dimension
.8691	c9 00		cmp #$00			cmp 	#0 						; must be 1-254
.8693	f0 e7		beq $867c			beq 	_DCSize
.8695	c9 fe		cmp #$fe			cmp 	#254
.8697	f0 e3		beq $867c			beq 	_DCSize
.8699	60		rts				rts
.869a					ScaleByBaseType:
.869a	29 10		and #$10			and 	#NSBIsString 			; is it string
.869c	d0 19		bne $86b7			bne 	_SBBTString
.869e	a5 37		lda $37				lda 	zTemp0+1 				; push value on stack
.86a0	48		pha				pha
.86a1	a5 36		lda $36				lda 	zTemp0
.86a3	48		pha				pha
.86a4	06 36		asl $36				asl 	zTemp0 					; x 2
.86a6	26 37		rol $37				rol 	zTemp0+1
.86a8	06 36		asl $36				asl 	zTemp0 					; x 4
.86aa	26 37		rol $37				rol 	zTemp0+1
.86ac	68		pla				pla 							; add stacked value = x 5
.86ad	65 36		adc $36				adc 	zTemp0
.86af	85 36		sta $36				sta 	zTemp0
.86b1	68		pla				pla
.86b2	65 37		adc $37				adc 	zTemp0+1
.86b4	85 37		sta $37				sta 	zTemp0+1
.86b6	60		rts				rts
.86b7					_SBBTString:
.86b7	06 36		asl $36				asl 	zTemp0
.86b9	26 37		rol $37				rol 	zTemp0+1
.86bb	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/end.asm

.86bc					EndCommand:
.86bc	4c 06 85	jmp $8506			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/for.asm

.86bf					ForCommand:
.86bf	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; allocate 18 bytes on the return stack.
.86c1	20 db 9b	jsr $9bdb			jsr 	StackOpen
.86c4	a2 00		ldx #$00			ldx 	#0
.86c6	20 49 96	jsr $9649			jsr 	EvaluateTerm
.86c9	bd 00 04	lda $0400,x			lda 	NSStatus,x
.86cc	c9 20		cmp #$20			cmp 	#NSBIsReference+NSTInteger 	; do we have an integer 4 byte reference.
.86ce	d0 49		bne $8719			bne		_FCError
.86d0	a9 3d		lda #$3d			lda 	#KWD_EQUAL 					; =
.86d2	20 b8 a2	jsr $a2b8			jsr 	CheckNextA
.86d5	e8		inx				inx
.86d6	20 9e 9a	jsr $9a9e			jsr 	EvaluateInteger 			; <from> in +1
.86d9	b1 30		lda ($30),y			lda 	(codePtr),y
.86db	c8		iny				iny 								; consume it
.86dc	48		pha				pha 								; save on stack for later
.86dd	c9 a6		cmp #$a6			cmp 	#KWD_DOWNTO
.86df	f0 04		beq $86e5			beq 	_FCNoSyntax
.86e1	c9 b0		cmp #$b0			cmp 	#KWD_TO
.86e3	d0 37		bne $871c			bne 	_FCSyntaxError
.86e5					_FCNoSyntax:
.86e5	e8		inx				inx
.86e6	20 9e 9a	jsr $9a9e			jsr 	EvaluateInteger
.86e9	20 1f 9c	jsr $9c1f			jsr 	STKSaveCodePosition 		; save loop back position
.86ec	68		pla				pla 								; restore DOWNTO or TO
.86ed	5a		phy				phy 								; save Y on the stack
.86ee	49 a6		eor #$a6			eor 	#KWD_DOWNTO 				; 0 if DOWNTO, #0 if TO
.86f0	f0 02		beq $86f4			beq 	_FCNotDownTo
.86f2	a9 02		lda #$02			lda 	#2
.86f4					_FCNotDownTo:
.86f4	3a		dec a				dec 	a 							; 255 if DOWNTO, 1 if TO
.86f5	a0 10		ldy #$10			ldy 	#16
.86f7	91 34		sta ($34),y			sta 	(basicStack),y 				; copy that out to the Basic Stack.
.86f9	a0 06		ldy #$06			ldy 	#6
.86fb	ad 08 04	lda $0408			lda 	NSMantissa0
.86fe	91 34		sta ($34),y			sta 	(basicStack),y
.8700	ad 10 04	lda $0410			lda 	NSMantissa1
.8703	c8		iny				iny
.8704	91 34		sta ($34),y			sta 	(basicStack),y
.8706	a0 08		ldy #$08			ldy 	#8 							; set initial index value
.8708	a2 01		ldx #$01			ldx 	#1
.870a	20 1f 87	jsr $871f			jsr 	FCIntegerToStack
.870d	a0 0c		ldy #$0c			ldy 	#12 						; set the terminal value
.870f	a2 02		ldx #$02			ldx 	#2
.8711	20 1f 87	jsr $871f			jsr 	FCIntegerToStack
.8714	20 3f 87	jsr $873f			jsr 	CopyIndexToReference
.8717	7a		ply				ply 								; restore position
.8718	60		rts				rts
.8719					_FCError:
.8719	4c 98 a8	jmp $a898			jmp 	TypeError
.871c					_FCSyntaxError:
.871c	4c 8e a8	jmp $a88e			jmp 	SyntaxError
.871f					FCIntegerToStack:
.871f	3c 00 04	bit $0400,x			bit 	NSStatus,x 					; is the value negative
.8722	10 03		bpl $8727			bpl	 	_FCNotNegative
.8724	20 dc 9a	jsr $9adc			jsr 	NSMNegateMantissa 			; if so 2's complement the mantissa
.8727					_FCNotNegative:
.8727	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy out to the basic stack
.872a	91 34		sta ($34),y			sta 	(basicStack),y
.872c	c8		iny				iny
.872d	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8730	91 34		sta ($34),y			sta 	(basicStack),y
.8732	c8		iny				iny
.8733	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.8736	91 34		sta ($34),y			sta 	(basicStack),y
.8738	c8		iny				iny
.8739	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.873c	91 34		sta ($34),y			sta 	(basicStack),y
.873e	60		rts				rts
.873f					CopyIndexToReference:
.873f	5a		phy				phy
.8740	a0 06		ldy #$06			ldy 	#6 							; copy address-8 to write to zTemp0
.8742	38		sec				sec 								; (because we copy from offset 8)
.8743	b1 34		lda ($34),y			lda 	(basicStack),y
.8745	e9 08		sbc #$08			sbc 	#8
.8747	85 36		sta $36				sta 	zTemp0
.8749	c8		iny				iny
.874a	b1 34		lda ($34),y			lda 	(basicStack),y
.874c	e9 00		sbc #$00			sbc 	#0
.874e	85 37		sta $37				sta 	zTemp0+1
.8750	a2 04		ldx #$04			ldx 	#4 							; this is the copy counter/
.8752	a0 0b		ldy #$0b			ldy 	#8+3 		 				; the MSB of the mantissa
.8754	b1 34		lda ($34),y			lda 	(basicStack),y
.8756	0a		asl a				asl 	a 							; into carry
.8757	a0 08		ldy #$08			ldy 	#8 							; where to copy from.
.8759	90 14		bcc $876f			bcc 	_CITRNormal
.875b	38		sec				sec
.875c					_CITRNegative:
.875c	a9 00		lda #$00			lda 	#0
.875e	f1 34		sbc ($34),y			sbc 	(basicStack),y
.8760	91 36		sta ($36),y			sta 	(zTemp0),y
.8762	c8		iny				iny
.8763	ca		dex				dex
.8764	d0 f6		bne $875c			bne 	_CITRNegative
.8766	88		dey				dey 								; look at MSB of mantissa
.8767	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set the MSB as negative packed.
.8769	09 80		ora #$80			ora 	#$80
.876b	91 36		sta ($36),y			sta 	(zTemp0),y
.876d	7a		ply				ply
.876e	60		rts				rts
.876f					_CITRNormal:
.876f	b1 34		lda ($34),y			lda 	(basicStack),y 				; copy without negation.
.8771	91 36		sta ($36),y			sta 	(zTemp0),y
.8773	c8		iny				iny
.8774	ca		dex				dex
.8775	d0 f8		bne $876f			bne 	_CITRNormal
.8777	7a		ply				ply 								; and exit.
.8778	60		rts				rts
.8779					NextCommand:
.8779	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; check FOR is TOS
.877b	a2 11		ldx #$11			ldx 	#ERRID_FOR 					; this error
.877d	20 07 9c	jsr $9c07			jsr 	StackCheckFrame
.8780	5a		phy				phy
.8781	a0 10		ldy #$10			ldy 	#16 						; get the step count
.8783	b1 34		lda ($34),y			lda 	(basicStack),y
.8785	85 36		sta $36				sta 	zTemp0 						; this is the sign extend
.8787	30 02		bmi $878b			bmi 	_NCStepNeg
.8789	64 36		stz $36				stz 	zTemp0 						; which is 0 or 255
.878b					_NCStepNeg:
.878b	a0 08		ldy #$08			ldy 	#8 							; offset to bump
.878d	a2 04		ldx #$04			ldx 	#4 							; count to bump
.878f	18		clc				clc
.8790					_NCBump:
.8790	71 34		adc ($34),y			adc 	(basicStack),y 				; add it
.8792	91 34		sta ($34),y			sta 	(basicStack),y
.8794	a5 36		lda $36				lda 	zTemp0 						; get sign extend for next time.
.8796	c8		iny				iny 								; next byte
.8797	ca		dex				dex 								; do four times
.8798	d0 f6		bne $8790			bne 	_NCBump
.879a	20 3f 87	jsr $873f			jsr		CopyIndexToReference		; copy it to the reference variable.
.879d	a0 10		ldy #$10			ldy 	#16 						; get step count again
.879f	b1 34		lda ($34),y			lda 	(basicStack),y
.87a1	0a		asl a				asl 	a 							; sign bit to carry
.87a2	a9 0c		lda #$0c			lda 	#12 						; offset of LHS = terminal offset
.87a4	85 38		sta $38				sta 	zTemp1
.87a6	90 02		bcc $87aa			bcc 	_NCCompRev 					; use if step is +ve
.87a8	a9 08		lda #$08			lda 	#8 							; now the LHS = index value
.87aa					_NCCompRev:
.87aa	85 38		sta $38				sta 	zTemp1 						; so zTemp0 is the index for LHS
.87ac	49 04		eor #$04			eor 	#(8^12) 					; and zTemp0+1 is the index for RHS
.87ae	85 39		sta $39				sta 	zTemp1+1
.87b0	a2 04		ldx #$04			ldx 	#4 							; bytes to compare
.87b2	38		sec				sec
.87b3					_NCCompare:
.87b3	a4 38		ldy $38				ldy 	zTemp1 						; do compare using the two indices
.87b5	b1 34		lda ($34),y			lda 	(basicStack),y
.87b7	a4 39		ldy $39				ldy 	zTemp1+1
.87b9	f1 34		sbc ($34),y			sbc 	(basicStack),y
.87bb	e6 38		inc $38				inc 	zTemp1 						; bump the indices (inc,dex do not change C or V)
.87bd	e6 39		inc $39				inc 	zTemp1+1
.87bf	ca		dex				dex 								; do it 4 times.
.87c0	d0 f1		bne $87b3			bne 	_NCCompare
.87c2	50 02		bvc $87c6			bvc 	_NCNoOverflow 				; convert to signed comparison
.87c4	49 80		eor #$80			eor 	#$80
.87c6					_NCNoOverflow:
.87c6	7a		ply				ply 								; restore Y position
.87c7	0a		asl a				asl 	a 							; is bit 7 set.
.87c8	90 04		bcc $87ce			bcc 	_NCLoopback 				; if no , >= so loop back
.87ca	20 f9 9b	jsr $9bf9			jsr 	StackClose 					; exit the loop
.87cd	60		rts				rts
.87ce					_NCLoopBack:
.87ce	20 30 9c	jsr $9c30			jsr 	STKLoadCodePosition 		; loop back
.87d1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/gosub.asm

.87d2					Command_GOSUB:
.87d2	a2 00		ldx #$00			ldx 	#0
.87d4	20 b3 9a	jsr $9ab3			jsr 	Evaluate16BitInteger 		; line number in Stack.0
.87d7	a9 e3		lda #$e3			lda 	#STK_GOSUB+3
.87d9	20 db 9b	jsr $9bdb			jsr 	StackOpen 					; create frame
.87dc	20 1f 9c	jsr $9c1f			jsr 	STKSaveCodePosition 		; save current position
.87df	4c f5 87	jmp $87f5			jmp 	GotoStackX
.87e2					Command_RETURN:
.87e2	a9 e0		lda #$e0			lda 	#STK_GOSUB 					; check TOS is this
.87e4	a2 0e		ldx #$0e			ldx 	#ERRID_GOSUB 				; this error
.87e6	20 07 9c	jsr $9c07			jsr 	StackCheckFrame
.87e9	20 30 9c	jsr $9c30			jsr 	STKLoadCodePosition 		; restore code position
.87ec	20 f9 9b	jsr $9bf9			jsr 	StackClose
.87ef	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/goto.asm

.87f0					GotoCommand:
.87f0	a2 00		ldx #$00			ldx 	#0 							; GOTO where
.87f2	20 b3 9a	jsr $9ab3			jsr 	Evaluate16BitInteger
.87f5					GotoStackX:
.87f5	bd 10 04	lda $0410,x			lda  	NSMantissa1,x 				; put line # in XA. I'll keep this even though
.87f8	48		pha				pha 								; it is slightly inefficient, just in cases.
.87f9	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.87fc	fa		plx				plx
.87fd	20 86 9b	jsr $9b86			jsr 	MemorySearch 				; transfer to line number AX.
.8800	90 05		bcc $8807			bcc 	_GotoError 					; not found, off end.
.8802	d0 03		bne $8807			bne 	_GotoError 					; not found exactly
.8804	4c 30 8b	jmp $8b30			jmp 	RunNewLine 					; and go straight to new line code.
.8807					_GotoError:
.8807	a9 0d		lda #$0d		lda	#13
.8809	4c 6f 8f	jmp $8f6f		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/if.asm

.880c					IfCommand:
.880c	a2 00		ldx #$00			ldx 	#0 							; If what.
.880e	20 7b 9a	jsr $9a7b			jsr 	EvaluateNumber
.8811	b1 30		lda ($30),y			lda 	(codePtr),y
.8813	c9 9f		cmp #$9f			cmp 	#KWD_THEN  					; could be THEN <stuff> or GOTO
.8815	d0 0a		bne $8821			bne 	_IFStructured
.8817	c8		iny				iny 								; consume THEN
.8818	20 57 9b	jsr $9b57			jsr 	NSMIsZero 					; is it zero
.881b	f0 01		beq $881e			beq 	_IfFail 					; if fail, go to next line
.881d	60		rts				rts 								; if THEN just continue
.881e					_IfFail:
.881e	4c 95 8b	jmp $8b95			jmp 	EOLCommand
.8821					_IfStructured:
.8821	20 57 9b	jsr $9b57			jsr 	NSMIsZero 					; is it zero
.8824	d0 07		bne $882d			bne 	_IfExit 					; if not, then continue normally.
.8826	a9 a7		lda #$a7			lda 	#KWD_ELSE 					; look for else/endif
.8828	a2 9c		ldx #$9c			ldx 	#KWD_ENDIF
.882a	20 e1 8e	jsr $8ee1			jsr 	ScanForward 				; and run from there/
.882d					_IfExit:
.882d	60		rts				rts
.882e					ElseCode:
.882e	a9 9c		lda #$9c			lda 	#KWD_ENDIF 					; else is only run after the if clause succeeds
.8830	aa		tax				tax 								; so just go to the structure exit
.8831	20 e1 8e	jsr $8ee1			jsr 	ScanForward
.8834	60		rts				rts
.8835					EndIf:
.8835	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/let.asm

.8836					LetCommand:
.8836	a2 00		ldx #$00			ldx 	#0
.8838	b1 30		lda ($30),y			lda 	(codePtr),y
.883a	c9 10		cmp #$10			cmp 	#KWD_AT
.883c	d0 16		bne $8854			bne 	_LCStandard
.883e	c8		iny				iny 								; skip equal
.883f	20 49 96	jsr $9649			jsr 	EvaluateTerm 				; get a number
.8842	20 8d 94	jsr $948d			jsr 	Dereference 				; dereference it
.8845	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check integer
.8848	49 20		eor #$20			eor 	#NSBIsReference	 			; toggle reference
.884a	9d 00 04	sta $0400,x			sta 	NSStatus,x
.884d	29 20		and #$20			and 	#NSBIsReference 			; if it is now a reference, continue
.884f	d0 10		bne $8861			bne 	_LCMain
.8851	4c 98 a8	jmp $a898			jmp 	TypeError 					; was a reference before.
.8854					_LCStandard:
.8854	ad 60 93	lda $9360			lda 	PrecedenceLevel+"*"			; precedence > this
.8857	20 7a 93	jsr $937a			jsr 	EvaluateExpressionAtPrecedence
.885a	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; is it a reference to an array
.885d	c9 38		cmp #$38			cmp		#NSTProcedure+NSBIsReference
.885f	f0 0e		beq $886f			beq 	_LetGoProc 					; it's a procedure call.
.8861					_LCMain:
.8861	a9 3d		lda #$3d			lda 	#"=" 						; check =
.8863	20 b8 a2	jsr $a2b8			jsr 	CheckNextA
.8866	e8		inx				inx 								; RHS
.8867	20 72 9a	jsr $9a72			jsr 	EvaluateValue
.886a	ca		dex				dex
.886b	20 72 88	jsr $8872			jsr 	AssignVariable
.886e	60		rts				rts
.886f					_LetGoProc:
.886f	4c 0b 8a	jmp $8a0b			jmp 	CallProcedure
.8872					AssignVariable:
.8872	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check the string/number type bits match
.8875	48		pha				pha 								; save a copy
.8876	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.8879	29 10		and #$10			and 	#NSBIsString
.887b	d0 0b		bne $8888			bne 	_ASError
.887d	68		pla				pla 								; get back
.887e	29 10		and #$10			and 	#NSBIsString 				; check type
.8880	d0 03		bne $8885			bne 	_ASString
.8882	4c b5 93	jmp $93b5			jmp 	AssignNumber
.8885					_ASString:
.8885	4c 23 94	jmp $9423			jmp 	AssignString
.8888					_ASError:
.8888	4c 98 a8	jmp $a898			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/list.asm

.888b					Command_List:
.888b	9c 0c 04	stz $040c			stz		NSMantissa0+4				; set the lower (slot 4) to 0 and upper (slot 7) to $FFFF
.888e	9c 14 04	stz $0414			stz 	NSMantissa1+4
.8891	a9 ff		lda #$ff			lda 	#$FF
.8893	8d 0f 04	sta $040f			sta 	NSMantissa0+7
.8896	8d 17 04	sta $0417			sta 	NSMantissa1+7
.8899	b1 30		lda ($30),y			lda 	(codePtr),y
.889b	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.889d	f0 1e		beq $88bd			beq 	_CLSecond
.889f	20 1b 89	jsr $891b			jsr 	CLIsDigit 					; if not digit, list all
.88a2	b0 24		bcs $88c8			bcs 	_CLStart
.88a4	a2 04		ldx #$04			ldx 	#4 							; get 1st range into slot 4
.88a6	20 b3 9a	jsr $9ab3			jsr 	Evaluate16BitInteger
.88a9	b1 30		lda ($30),y			lda 	(codePtr),y
.88ab	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.88ad	f0 0e		beq $88bd			beq 	_CLSecond 					; if so go get it
.88af	ad 0c 04	lda $040c			lda 	NSMantissa0+4 				; copy 4->7
.88b2	8d 0f 04	sta $040f			sta 	NSMantissa0+7
.88b5	ad 14 04	lda $0414			lda 	NSMantissa1+4
.88b8	8d 17 04	sta $0417			sta 	NSMantissa1+7
.88bb	80 0b		bra $88c8			bra 	_CLStart
.88bd					_CLSecond:
.88bd	c8		iny				iny 								; consume comma
.88be	20 1b 89	jsr $891b			jsr 	CLIsDigit 					; digit found
.88c1	b0 05		bcs $88c8			bcs 	_CLStart 					; if not, continue listing
.88c3	a2 07		ldx #$07			ldx 	#7 							; load 2nd range into slot 7
.88c5	20 b3 9a	jsr $9ab3			jsr 	Evaluate16BitInteger
.88c8					_CLStart
.88c8	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.88ca	85 30		sta $30				sta 	codePtr
.88cc	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.88ce	85 31		sta $31				sta 	codePtr+1
.88d0					_CLLoop:
.88d0	20 72 aa	jsr $aa72			jsr 	EXTBreakCheck 				; break check
.88d3	f0 30		beq $8905			beq 	_CLExit
.88d5	b2 30		lda ($30)			lda 	(codePtr)
.88d7	f0 2c		beq $8905			beq 	_CLExit
.88d9	a2 04		ldx #$04			ldx 	#4 							; check range every time, line numbers aren't in order.
.88db	20 08 89	jsr $8908			jsr 	CLCompareLineNo
.88de	90 18		bcc $88f8			bcc 	_CLNext
.88e0	a2 07		ldx #$07			ldx 	#7
.88e2	20 08 89	jsr $8908			jsr 	CLCompareLineNo
.88e5	f0 02		beq $88e9			beq 	_CLDoThisOne
.88e7	b0 0f		bcs $88f8			bcs 	_CLNext
.88e9					_CLDoThisOne:
.88e9	20 3d 8d	jsr $8d3d			jsr 	ListConvertLine 			; convert line into token Buffer
.88ec	a2 04		ldx #$04			ldx 	#(tokenBuffer >> 8) 		; print that line
.88ee	a9 a9		lda #$a9			lda 	#(tokenBuffer & $FF)
.88f0	20 c8 8f	jsr $8fc8			jsr 	PrintStringXA
.88f3	a9 0d		lda #$0d			lda 	#13 						; new line
.88f5	20 31 aa	jsr $aa31			jsr 	EXTPrintCharacter
.88f8					_CLNext:
.88f8	18		clc				clc
.88f9	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.88fb	65 30		adc $30				adc 	codePtr
.88fd	85 30		sta $30				sta 	codePtr
.88ff	90 02		bcc $8903			bcc 	_CREExit
.8901	e6 31		inc $31				inc 	codePtr+1
.8903					_CREExit:
.8903	80 cb		bra $88d0			bra 	_CLLoop
.8905					_CLExit:
.8905	4c 06 85	jmp $8506			jmp 	WarmStart
.8908					CLCompareLineNo:
.8908	38		sec				sec
.8909	a0 01		ldy #$01			ldy 	#1
.890b	b1 30		lda ($30),y			lda 	(codePtr),y
.890d	fd 08 04	sbc $0408,x			sbc 	NSMantissa0,x
.8910	85 36		sta $36				sta 	zTemp0
.8912	c8		iny				iny
.8913	b1 30		lda ($30),y			lda 	(codePtr),y
.8915	fd 10 04	sbc $0410,x			sbc 	NSMantissa1,x
.8918	05 36		ora $36				ora 	zTemp0
.891a	60		rts				rts
.891b					CLIsDigit:
.891b	b1 30		lda ($30),y			lda 	(codePtr),y
.891d	c9 30		cmp #$30			cmp 	#"0"
.891f	90 03		bcc $8924			bcc	 	_CLIDExitFalse
.8921	c9 3a		cmp #$3a			cmp 	#"9"+1
.8923	60		rts				rts
.8924					_CLIDExitFalse:
.8924	38		sec				sec
.8925	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/local.asm

.8926					Command_LOCAL:
.8926	a2 00		ldx #$00			ldx 	#0 							; at level 0
.8928	20 34 89	jsr $8934			jsr 	LocaliseNextTerm 			; convert term to a local.
.892b	b1 30		lda ($30),y			lda 	(codePtr),y
.892d	c8		iny				iny
.892e	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8930	f0 f4		beq $8926			beq 	Command_LOCAL
.8932	88		dey				dey 								; unpick pre-get
.8933	60		rts				rts
.8934					LocaliseNextTerm:
.8934	20 49 96	jsr $9649			jsr 	EvaluateTerm 				; evaluate the term
.8937	bd 00 04	lda $0400,x			lda 	NSStatus,x
.893a	29 20		and #$20			and 	#NSBIsReference 			; check it is a reference
.893c	f0 69		beq $89a7			beq		_LNTError
.893e	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address of variable to zTemp0
.8941	85 36		sta $36				sta 	zTemp0
.8943	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8946	85 37		sta $37				sta  	zTemp0+1
.8948	bd 00 04	lda $0400,x			lda 	NSStatus,x
.894b	29 10		and #$10			and 	#NSBIsString
.894d	d0 22		bne $8971			bne 	_LNTPushString
.894f	5a		phy				phy
.8950	a0 00		ldy #$00			ldy 	#0 							; push 0 to 4 inclusive, the number values, on the stack, and zero them as you go.
.8952					_LNTPushNumLoop:
.8952	b1 36		lda ($36),y			lda		(zTemp0),y
.8954	20 b9 9b	jsr $9bb9			jsr 	StackPushByte
.8957	a9 00		lda #$00			lda 	#0
.8959	91 36		sta ($36),y			sta 	(zTemp0),y
.895b	c8		iny				iny
.895c	c0 05		cpy #$05			cpy 	#5
.895e	d0 f2		bne $8952			bne 	_LNTPushNumLoop
.8960	a5 36		lda $36				lda 	zTemp0 						; push the actual target address to write on the stack
.8962	20 b9 9b	jsr $9bb9			jsr 	StackPushByte
.8965	a5 37		lda $37				lda 	zTemp0+1
.8967	20 b9 9b	jsr $9bb9			jsr 	StackPushByte
.896a	a9 01		lda #$01			lda 	#STK_LOCALN 				; push local-number marker.
.896c	20 b9 9b	jsr $9bb9			jsr 	StackPushByte
.896f	7a		ply				ply
.8970	60		rts				rts
.8971					_LNTPushString:
.8971	5a		phy				phy
.8972	b2 36		lda ($36)			lda 	(zTemp0) 					; put address of string in zTemp1
.8974	85 38		sta $38				sta 	zTemp1
.8976	a0 01		ldy #$01			ldy 	#1
.8978	b1 36		lda ($36),y			lda 	(zTemp0),y
.897a	85 39		sta $39				sta 	zTemp1+1
.897c	a0 00		ldy #$00			ldy 	#0 							; output string
.897e	c9 00		cmp #$00			cmp 	#0 							; if not assigned strin
.8980	f0 0a		beq $898c			beq 	_LNTStringOut
.8982					_LNTPushStrLoop:
.8982	b1 38		lda ($38),y			lda 	(zTemp1),y
.8984	f0 06		beq $898c			beq 	_LNTStringOut
.8986	20 b9 9b	jsr $9bb9			jsr 	StackPushByte
.8989	c8		iny				iny
.898a	80 f6		bra $8982			bra 	_LNTPushStrLoop
.898c					_LNTStringOut:
.898c	98		tya				tya									; output length
.898d	20 b9 9b	jsr $9bb9			jsr 	StackPushByte
.8990	a9 00		lda #$00			lda 	#0 							; clear original string.
.8992	92 38		sta ($38)			sta 	(zTemp1)
.8994	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; output address of the string record *not* the string itself
.8997	20 b9 9b	jsr $9bb9			jsr 	StackPushByte
.899a	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.899d	20 b9 9b	jsr $9bb9			jsr 	StackPushByte
.89a0	a9 02		lda #$02			lda 	#STK_LOCALS 				; push local-string marker.
.89a2	20 b9 9b	jsr $9bb9			jsr 	StackPushByte
.89a5	7a		ply				ply
.89a6	60		rts				rts
.89a7					_LNTError:
.89a7	4c 8e a8	jmp $a88e			jmp 	SyntaxError
.a24f					LocalPopValue:
.a24f	20 d2 9b	jsr $9bd2			jsr 	StackPopByte
.a252	c9 01		cmp #$01			cmp 	#STK_LOCALN 				; if not local-N
.a254	d0 17		bne $a26d			bne 	_LPVString
.a256	20 d2 9b	jsr $9bd2			jsr 	StackPopByte 				; address
.a259	85 37		sta $37				sta 	zTemp0+1
.a25b	20 d2 9b	jsr $9bd2			jsr 	StackPopByte
.a25e	85 36		sta $36				sta 	zTemp0
.a260	5a		phy				phy
.a261	a0 04		ldy #$04			ldy 	#4 							; copy back
.a263					_LPVNumberCopy:
.a263	20 d2 9b	jsr $9bd2			jsr 	StackPopByte
.a266	91 36		sta ($36),y			sta 	(zTemp0),y
.a268	88		dey				dey
.a269	10 f8		bpl $a263			bpl 	_LPVNumberCopy
.a26b	7a		ply				ply 								; and complete
.a26c	60		rts				rts
.a26d					_LPVString:
.a26d	20 d2 9b	jsr $9bd2			jsr 	StackPopByte 				; address of record => zTemp0
.a270	85 37		sta $37				sta 	zTemp0+1
.a272	20 d2 9b	jsr $9bd2			jsr 	StackPopByte
.a275	85 36		sta $36				sta 	zTemp0
.a277	5a		phy				phy
.a278	b2 36		lda ($36)			lda 	(zTemp0) 					; address to write string to => zTemp1
.a27a	85 38		sta $38				sta 	zTemp1
.a27c	a0 01		ldy #$01			ldy 	#1
.a27e	b1 36		lda ($36),y			lda 	(zTemp0),y
.a280	85 39		sta $39				sta 	zTemp1+1
.a282	20 d2 9b	jsr $9bd2			jsr 	StackPopByte 				; # to get => y
.a285	a8		tay				tay
.a286	a5 39		lda $39				lda 	zTemp1+1 					; if no target (e.g. was "" originally) exit
.a288	f0 0e		beq $a298			beq 	_LPVStringCopied
.a28a	a9 00		lda #$00			lda 	#0 							; NULL on end
.a28c	91 38		sta ($38),y			sta 	(zTemp1),y
.a28e					_LPVStringCopy:
.a28e	88		dey				dey
.a28f	30 07		bmi $a298			bmi 	_LPVStringCopied
.a291	20 d2 9b	jsr $9bd2			jsr 	StackPopByte
.a294	91 38		sta ($38),y			sta 	(zTemp1),y
.a296	80 f6		bra $a28e			bra 	_LPVStringCopy
.a298					_LPVStringCopied:
.a298	fa		plx				plx
.a299	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/new.asm

.89aa					NewCommand:
.89aa	20 64 9b	jsr $9b64			jsr 	MemoryNew
.89ad	9c 00 10	stz $1000			stz 	VariableSpace 				; erase all variables.
.89b0	20 9f 85	jsr $859f			jsr 	ClearCommand 				; clear everything.
.89b3	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/print.asm

.89b4					Command_Print:
.89b4	18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.89b5					_CPLoop:
.89b5	08		php				php 								; save last action flag
.89b6	b1 30		lda ($30),y			lda 	(codePtr),y
.89b8	c9 80		cmp #$80			cmp  	#KWC_EOL 					; end of line or colon, exit now.
.89ba	f0 46		beq $8a02			beq 	_CPExit
.89bc	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.89be	f0 42		beq $8a02			beq 	_CPExit
.89c0	68		pla				pla 								; throw last action flag
.89c1	b1 30		lda ($30),y			lda 	(codePtr),y
.89c3	c8		iny				iny
.89c4	c9 3b		cmp #$3b			cmp 	#KWD_SEMICOLON				; is it a semicolon
.89c6	f0 37		beq $89ff			beq 	_CPContinueWithSameLine
.89c8	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; comma
.89ca	f0 2e		beq $89fa			beq 	_CPTab
.89cc	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; apostrophe (new line)
.89ce	f0 26		beq $89f6			beq 	_CPNewLine
.89d0	88		dey				dey 								; undo the get.
.89d1	a2 00		ldx #$00			ldx 	#0
.89d3	20 72 9a	jsr $9a72			jsr 	EvaluateValue 				; get a value into slot 0
.89d6	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; is it a number
.89d9	29 10		and #$10			and 	#NSBIsString
.89db	f0 0b		beq $89e8			beq 	_CPNumber
.89dd	ae 10 04	ldx $0410			ldx 	NSMantissa1 				; string, print the text.
.89e0	ad 08 04	lda $0408			lda 	NSMantissa0
.89e3	20 c8 8f	jsr $8fc8			jsr 	PrintStringXA
.89e6	80 cc		bra $89b4			bra 	Command_Print 				; loop round clearing carry so NL if end
.89e8					_CPNumber:
.89e8	a9 05		lda #$05			lda 	#5 							; maximum decimals
.89ea	20 48 99	jsr $9948			jsr 	ConvertNumberToString 		; convert to string
.89ed	a2 06		ldx #$06			ldx 	#DecimalBuffer >> 8
.89ef	a9 19		lda #$19			lda 	#DecimalBuffer & $FF
.89f1	20 c8 8f	jsr $8fc8			jsr 	PrintStringXA
.89f4	80 be		bra $89b4			bra 	Command_Print 				; loop round clearing carry so NL if end
.89f6					_CPNewLine:
.89f6	a9 0d		lda #$0d			lda 	#13
.89f8	80 02		bra $89fc			bra 	_CPPrintChar
.89fa					_CPTab:
.89fa	a9 09		lda #$09			lda 	#9 							; print TAB
.89fc					_CPPrintChar:
.89fc	20 31 aa	jsr $aa31			jsr 	EXTPrintCharacter
.89ff					_CPContinueWithSameLine:
.89ff	38		sec				sec 								; loop round with carry set, which
.8a00	80 b3		bra $89b5			bra 	_CPLoop 					; will inhibit final CR
.8a02					_CPExit:
.8a02	28		plp				plp 								; get last action flag
.8a03	b0 05		bcs $8a0a			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.8a05	a9 0d		lda #$0d			lda 	#13 						; print new line
.8a07	20 31 aa	jsr $aa31			jsr 	EXTPrintCharacter
.8a0a					_CPExit2:
.8a0a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/procedure.asm

=2					ParameterStackPos = 2
.8a0b					CallProcedure:
.8a0b	a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start storing parameters at 2.
.8a0d	b1 30		lda ($30),y			lda 	(codePtr),y
.8a0f	c9 29		cmp #$29			cmp 	#KWD_RPAREN
.8a11	f0 0c		beq $8a1f			beq 	_CPEndParam
.8a13					_CPParamLoop:
.8a13	20 78 93	jsr $9378			jsr 	EvaluateExpression 			; get parameter onto stack
.8a16	e8		inx				inx 								; bump next stack
.8a17	b1 30		lda ($30),y			lda 	(codePtr),y
.8a19	c8		iny				iny
.8a1a	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if comma, go back and try again.
.8a1c	f0 f5		beq $8a13			beq 	_CPParamLoop
.8a1e	88		dey				dey 								; unpick.
.8a1f					_CPEndParam:
.8a1f	8e 96 04	stx $0496			stx 	LastParameter 				; save the last parameters index.
.8a22	c8		iny				iny									; skip right bracket
.8a23	a9 b3		lda #$b3			lda 	#STK_PROC+3 				; allocate 6 bytes on the return stack.
.8a25	20 db 9b	jsr $9bdb			jsr 	StackOpen
.8a28	20 1f 9c	jsr $9c1f			jsr 	STKSaveCodePosition 		; save loop position
.8a2b	ad 08 04	lda $0408			lda 	NSMantissa0 				; copy variable (e.g. procedure) address to zTemp0
.8a2e	85 36		sta $36				sta 	zTemp0 						; this is the DATA not the RECORD
.8a30	ad 10 04	lda $0410			lda 	NSMantissa1
.8a33	85 37		sta $37				sta 	zTemp0+1
.8a35	a0 01		ldy #$01			ldy 	#1 							; copy code address back.
.8a37	b2 36		lda ($36)			lda 	(zTemp0)
.8a39	85 30		sta $30				sta 	safePtr
.8a3b	b1 36		lda ($36),y			lda 	(zTemp0),y
.8a3d	85 31		sta $31				sta 	safePtr+1
.8a3f	c8		iny				iny
.8a40	b1 36		lda ($36),y			lda 	(zTemp0),y
.8a42	85 32		sta $32				sta 	safePtr+2
.8a44	c8		iny				iny
.8a45	b1 36		lda ($36),y			lda 	(zTemp0),y
.8a47	85 33		sta $33				sta 	safePtr+3
.8a49	c8		iny				iny 								; get Y offset -> Y
.8a4a	b1 36		lda ($36),y			lda 	(zTemp0),y
.8a4c	a8		tay				tay
.8a4d	a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start position of parameters
.8a4f	ec 96 04	cpx $0496			cpx	 	LastParameter 				; check no parameters at the start
.8a52	f0 13		beq $8a67			beq 	_ParamExit 					; if so, exit.
.8a54					_ParamExtract:
.8a54	ca		dex				dex 								; put a local term on the level before
.8a55	20 34 89	jsr $8934			jsr 	LocaliseNextTerm			; also pushes original param value to basic stack
.8a58	20 72 88	jsr $8872			jsr 	AssignVariable 				; assign stacked value to the variable.
.8a5b	e8		inx				inx 								; advance to next parameter to do.
.8a5c	e8		inx				inx
.8a5d	ec 96 04	cpx $0496			cpx 	LastParameter 				; are we done ?
.8a60	f0 05		beq $8a67			beq 	_ParamExit
.8a62	20 b0 a2	jsr $a2b0			jsr 	CheckComma 					; comma seperating parameters
.8a65	80 ed		bra $8a54			bra 	_ParamExtract
.8a67					_ParamExit:
.8a67	20 a8 a2	jsr $a2a8			jsr 	CheckRightBracket 			; check )
.8a6a	60		rts				rts 								; and continue from here
.a29a					Command_ENDPROC:
.a29a	a9 b0		lda #$b0			lda 	#STK_PROC 					; check TOS is this
.a29c	a2 14		ldx #$14			ldx 	#ERRID_PROC
.a29e	20 07 9c	jsr $9c07			jsr 	StackCheckFrame
.a2a1	20 30 9c	jsr $9c30			jsr 	STKLoadCodePosition 		; restore code position
.a2a4	20 f9 9b	jsr $9bf9			jsr 	StackClose
.a2a7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/read.asm

.8a6b					Command_Read:
.8a6b	a2 00		ldx #$00			ldx 	#0 							; evaluate the term which is the var/array element to assign
.8a6d	20 49 96	jsr $9649			jsr 	EvaluateTerm
.8a70	bd 00 04	lda $0400,x			lda 	NSStatus,x
.8a73	29 20		and #$20			and 	#NSBIsReference				; get status byte on stack, identifies int, float, string.
.8a75	f0 4a		beq $8ac1			beq 	_CRSyntax 					; check reference (bit 0)
.8a77	20 0a 8b	jsr $8b0a			jsr 	SwapDataCodePtrs 			; swap code and data
.8a7a	ad 9c 04	lda $049c			lda 	inDataStatement 			; if in a data statement, we don't need to search
.8a7d	d0 20		bne $8a9f			bne 	_CRContinueData
.8a7f					_CRKeepSearching:
.8a7f	a9 a4		lda #$a4			lda 	#KWD_DATA 					; scan for instruction
.8a81	aa		tax				tax
.8a82	20 e1 8e	jsr $8ee1			jsr 	ScanForward
.8a85	c9 a4		cmp #$a4			cmp 	#KWD_DATA 					; found data ?
.8a87	f0 16		beq $8a9f			beq 	_CRHaveData 				; found it
.8a89	18		clc				clc
.8a8a	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8a8c	65 30		adc $30				adc 	codePtr
.8a8e	85 30		sta $30				sta 	codePtr
.8a90	90 02		bcc $8a94			bcc 	_CREExit
.8a92	e6 31		inc $31				inc 	codePtr+1
.8a94					_CREExit:
.8a94	a0 03		ldy #$03			ldy 	#3 							; start of line.
.8a96	b2 30		lda ($30)			lda 	(codePtr)
.8a98	d0 e5		bne $8a7f			bne 	_CRKeepSearching
.8a9a	a9 0b		lda #$0b		lda	#11
.8a9c	4c 6f 8f	jmp $8f6f		jmp	ErrorHandler
.8a9f					_CRHaveData:
.8a9f					_CRContinueData:
.8a9f	a2 01		ldx #$01			ldx 	#1
.8aa1	20 72 9a	jsr $9a72			jsr 	EvaluateValue 				; evaluate value into slot # 1
.8aa4	ca		dex				dex
.8aa5	20 72 88	jsr $8872			jsr		AssignVariable 				; do the assignment
.8aa8	9c 9c 04	stz $049c			stz 	inDataStatement 			; clear in data
.8aab	b1 30		lda ($30),y			lda 	(codePtr),y
.8aad	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not, end of data statement
.8aaf	d0 04		bne $8ab5			bne 	_CRSwapBack
.8ab1	c8		iny				iny 								; consume comma
.8ab2	ee 9c 04	inc $049c			inc 	inDataStatement 			; set in data statement currently.
.8ab5					_CRSwapBack:
.8ab5	20 0a 8b	jsr $8b0a			jsr 	SwapDataCodePtrs			; swap them back.
.8ab8	b1 30		lda ($30),y			lda 	(codePtr),y
.8aba	c8		iny				iny
.8abb	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8abd	f0 ac		beq $8a6b			beq 	Command_Read 				; if so go round again.
.8abf	88		dey				dey 								; unpick get.
.8ac0	60		rts				rts
.8ac1					_CRSyntax:
.8ac1	4c 8e a8	jmp $a88e			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/rem.asm

.8ac4					RemCommand:
.8ac4	b1 30		lda ($30),y			lda 	(codePtr),y
.8ac6	c9 ff		cmp #$ff			cmp 	#KWC_STRING
.8ac8	d0 06		bne $8ad0			bne 	_RMExit
.8aca	c8		iny				iny
.8acb	98		tya				tya
.8acc	38		sec				sec
.8acd	71 30		adc ($30),y			adc 	(codePtr),y
.8acf	a8		tay				tay
.8ad0					_RMExit:
.8ad0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/repeat.asm

.8ad1					Command_REPEAT:
.8ad1	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; allocate 6 bytes on the return stack.
.8ad3	20 db 9b	jsr $9bdb			jsr 	StackOpen
.8ad6	20 1f 9c	jsr $9c1f			jsr 	STKSaveCodePosition 		; save loop position
.8ad9	60		rts				rts
.8ada					Command_UNTIL:
.8ada	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; check REPEAT is TOS
.8adc	a2 0f		ldx #$0f			ldx 	#ERRID_REPEAT 				; this error
.8ade	20 07 9c	jsr $9c07			jsr 	StackCheckFrame
.8ae1	a2 00		ldx #$00			ldx 	#0
.8ae3	20 7b 9a	jsr $9a7b			jsr 	EvaluateNumber 				; work out the number
.8ae6	20 57 9b	jsr $9b57			jsr 	NSMIsZero 					; check if zero
.8ae9	f0 04		beq $8aef			beq 	_CULoopBack 				; if so keep looping
.8aeb	20 f9 9b	jsr $9bf9			jsr 	StackClose		 			; return
.8aee	60		rts				rts
.8aef					_CULoopBack:
.8aef	20 30 9c	jsr $9c30			jsr 	STKLoadCodePosition 		; loop back
.8af2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/restore.asm

.8af3					Command_Restore:
.8af3	20 0a 8b	jsr $8b0a			jsr 	SwapDataCodePtrs 			; swap code and data
.8af6	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8af8	85 30		sta $30				sta 	codePtr
.8afa	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8afc	85 31		sta $31				sta 	codePtr+1
.8afe	20 0a 8b	jsr $8b0a			jsr 	SwapDataCodePtrs 			; put them back
.8b01	a9 03		lda #$03			lda 	#3 							; start at offset 3, e.g. first instruction of first line.
.8b03	8d 9b 04	sta $049b			sta 	dataPointer+4
.8b06	9c 9c 04	stz $049c			stz 	inDataStatement 			; not in data statement
.8b09	60		rts				rts
.8b0a					SwapDataCodePtrs:
.8b0a	da		phx				phx
.8b0b	a2 03		ldx #$03			ldx 	#3 							; swap 32 bit code pointer over
.8b0d					_SDCPLoop:
.8b0d	b5 30		lda $30,x			lda 	safePtr,x
.8b0f	48		pha				pha
.8b10	bd 97 04	lda $0497,x			lda 	dataPointer,x
.8b13	95 30		sta $30,x			sta 	safePtr,x
.8b15	68		pla				pla
.8b16	9d 97 04	sta $0497,x			sta 	dataPointer,x
.8b19	ca		dex				dex
.8b1a	10 f1		bpl $8b0d			bpl 	_SDCPLoop
.8b1c	ad 9b 04	lda $049b			lda 	dataPointer+4 				; swap Y position over.
.8b1f	8c 9b 04	sty $049b			sty 	dataPointer+4
.8b22	a8		tay				tay
.8b23	fa		plx				plx
.8b24	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/run.asm

.8b25					CommandRUN:
.8b25	20 9f 85	jsr $859f			jsr 	ClearCommand 				; clear variable/stacks/etc.
.8b28	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8b2a	85 30		sta $30				sta 	codePtr
.8b2c	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8b2e	85 31		sta $31				sta 	codePtr+1
.8b30					RUNNewLine:
.8b30	b2 30		lda ($30)			lda 	(codePtr)
.8b32	f0 5e		beq $8b92			beq 	CRNoProgram         		; no then END.
.8b34	a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack
.8b36	9a		txs				txs
.8b37					RUNCodePointerLine:
.8b37	a0 02		ldy #$02			ldy 	#2 							; start of program
.8b39					_CRIncMainLoop:
.8b39	0e 93 04	asl $0493			asl 	breakCheck 					; clears 1 time in 8
.8b3c	d0 05		bne $8b43			bne 	_CRNoBreakCheck
.8b3e	20 72 aa	jsr $aa72			jsr 	EXTBreakCheck 				; break check
.8b41	f0 4a		beq $8b8d			beq 	_CRBreak
.8b43					_CRNoBreakCheck:
.8b43	c8		iny				iny
.8b44					_CRMainLoop:
.8b44	9c 90 04	stz $0490			stz 	stringInitialised 			; clear the temporary string initialised flag.
.8b47	b1 30		lda ($30),y			lda 	(codePtr),y
.8b49	10 10		bpl $8b5b			bpl 	_CRNotKeyword
.8b4b	c9 97		cmp #$97			cmp 	#KWC_LAST_UNARY+1 			; if after unary, legitimate command
.8b4d	b0 04		bcs $8b53			bcs 	_CRIsKeyword
.8b4f	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if unary, syntax error.
.8b51	b0 34		bcs $8b87			bcs		_CRSyntaxError
.8b53					_CRIsKeyword:
.8b53	c8		iny				iny 								; consume command
.8b54	0a		asl a				asl 	a 							; double losing the MSB which is '1' as tokens are $80-$FF
.8b55	aa		tax				tax 								; put in X for vector jump
.8b56	20 8a 8b	jsr $8b8a			jsr 	_CRCallVector0 				; call the vector - effectively jsr (vectortable,X)
.8b59	80 e9		bra $8b44			bra 	_CRMainLoop 				; and loop round
.8b5b					_CRNotKeyword:
.8b5b	c9 3a		cmp #$3a			cmp 	#KWD_COLON 					; if a :, consume it and go round.
.8b5d	f0 da		beq $8b39			beq 	_CRIncMainLoop
.8b5f	c9 40		cmp #$40			cmp 	#$40 						; variable/call reference
.8b61	90 05		bcc $8b68			bcc 	_CRNotVariable
.8b63					_CRGoLet:
.8b63	20 36 88	jsr $8836			jsr 	LetCommand
.8b66	80 dc		bra $8b44			bra 	_CRMainLoop
.8b68					_CRNotVariable:
.8b68	c9 10		cmp #$10			cmp 	#KWD_AT 					; handle @
.8b6a	f0 f7		beq $8b63			beq 	_CRGoLet
.8b6c	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; handle ? !
.8b6e	f0 f3		beq $8b63			beq 	_CRGoLet
.8b70	c9 21		cmp #$21			cmp 	#KWD_PLING
.8b72	f0 ef		beq $8b63			beq 	_CRGoLet
.8b74	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; handle ' (comment)
.8b76	f0 09		beq $8b81			beq 	_CRGoRem
.8b78	c9 2e		cmp #$2e			cmp 	#KWD_PERIOD 				; handle . (assembler label)
.8b7a	d0 0b		bne $8b87			bne 	_CRSyntaxError
.8b7c	20 3f 84	jsr $843f			jsr 	LabelHere
.8b7f	80 c3		bra $8b44			bra 	_CRMainLoop
.8b81					_CRGoRem:
.8b81	c8		iny				iny
.8b82	20 c4 8a	jsr $8ac4			jsr 	RemCommand
.8b85	80 bd		bra $8b44			bra 	_CRMainLoop
.8b87					_CRSyntaxError:
.8b87	4c 8e a8	jmp $a88e			jmp 	SyntaxError
.8b8a					_CRCallVector0:
.8b8a	7c 36 8c	jmp ($8c36,x)			jmp 	(VectorSet0,x)
.8b8d					_CRBreak:
.8b8d	a9 01		lda #$01		lda	#1
.8b8f	4c 6f 8f	jmp $8f6f		jmp	ErrorHandler
.8b92					CRNoProgram:
.8b92	4c bc 86	jmp $86bc			jmp 	EndCommand
.8b95					EOLCommand:
.8b95	18		clc				clc
.8b96	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8b98	65 30		adc $30				adc 	codePtr
.8b9a	85 30		sta $30				sta 	codePtr
.8b9c	90 02		bcc $8ba0			bcc 	_CREExit
.8b9e	e6 31		inc $31				inc 	codePtr+1
.8ba0					_CREExit:
.8ba0	80 8e		bra $8b30			bra 	RunNewLine
.8ba2					Shift1Command:
.8ba2	b1 30		lda ($30),y			lda 	(codePtr),y
.8ba4	c8		iny				iny
.8ba5	0a		asl a				asl 	a
.8ba6	aa		tax				tax
.8ba7	7c 98 8c	jmp ($8c98,x)			jmp 	(VectorSet1,x)
.8baa					Shift2Command:
.8baa	b1 30		lda ($30),y			lda 	(codePtr),y
.8bac	c8		iny				iny
.8bad	0a		asl a				asl 	a
.8bae	aa		tax				tax
.8baf	7c b0 8c	jmp ($8cb0,x)			jmp 	(VectorSet2,x)
.8bb2					Unused1:
.8bb2					Unused2:
.8bb2					Unused3:
.8bb2					Unused4:
.8bb2	4c 8e a8	jmp $a88e			jmp 	SyntaxError
>8bb5							.align 2

;******  Processing file: ./common/commands/../generated/vectors.dat

.8bb6					VectorSetPunc:
>8bb6	19 91					.word	ShiftLeft                        ; $00 <<
>8bb8	13 90					.word	BinaryCompareLessEqual           ; $01 <=
>8bba	09 90					.word	BinaryCompareNotEqual            ; $02 <>
>8bbc	8e a8					.word	SyntaxError                      ; $03 !!3
>8bbe	8e a8					.word	SyntaxError                      ; $04 ><
>8bc0	1d 90					.word	BinaryCompareGreaterEqual        ; $05 >=
>8bc2	1c 91					.word	ShiftRight                       ; $06 >>
>8bc4	8e a8					.word	SyntaxError                      ; $07 !!7
>8bc6	8e a8					.word	SyntaxError                      ; $08 !!8
>8bc8	8e a8					.word	SyntaxError                      ; $09 !!9
>8bca	8e a8					.word	SyntaxError                      ; $0a !!10
>8bcc	8e a8					.word	SyntaxError                      ; $0b !!11
>8bce	8e a8					.word	SyntaxError                      ; $0c !!12
>8bd0	8e a8					.word	SyntaxError                      ; $0d !!13
>8bd2	8e a8					.word	SyntaxError                      ; $0e !!14
>8bd4	8e a8					.word	SyntaxError                      ; $0f !!15
>8bd6	8e a8					.word	SyntaxError                      ; $10 @
>8bd8	8e a8					.word	SyntaxError                      ; $11 !!17
>8bda	8e a8					.word	SyntaxError                      ; $12 !!18
>8bdc	8e a8					.word	SyntaxError                      ; $13 [
>8bde	c1 a2					.word	IntegerDivide                    ; $14 \
>8be0	8e a8					.word	SyntaxError                      ; $15 ]
>8be2	a2 92					.word	EorInteger                       ; $16 ^
>8be4	8e a8					.word	SyntaxError                      ; $17 _
>8be6	8e a8					.word	SyntaxError                      ; $18 `
>8be8	8e a8					.word	SyntaxError                      ; $19 !!25
>8bea	8e a8					.word	SyntaxError                      ; $1a !!26
>8bec	8e a8					.word	SyntaxError                      ; $1b {
>8bee	5c 92					.word	OraInteger                       ; $1c |
>8bf0	8e a8					.word	SyntaxError                      ; $1d }
>8bf2	8e a8					.word	SyntaxError                      ; $1e ~
>8bf4	8e a8					.word	SyntaxError                      ; $1f [7m<7F>[m
>8bf6	8e a8					.word	SyntaxError                      ; $20
>8bf8	e8 92					.word	WordIndirect                     ; $21 !
>8bfa	8e a8					.word	SyntaxError                      ; $22 "
>8bfc	8e a8					.word	SyntaxError                      ; $23 #
>8bfe	8e a8					.word	SyntaxError                      ; $24 $
>8c00	0e a3					.word	IntegerModulus                   ; $25 %
>8c02	16 92					.word	AndInteger                       ; $26 &
>8c04	8e a8					.word	SyntaxError                      ; $27 '
>8c06	8e a8					.word	SyntaxError                      ; $28 (
>8c08	8e a8					.word	SyntaxError                      ; $29 )
>8c0a	83 a3					.word	MulInteger                       ; $2a *
>8c0c	b0 91					.word	AddInteger                       ; $2b +
>8c0e	8e a8					.word	SyntaxError                      ; $2c ,
>8c10	eb 91					.word	SubInteger                       ; $2d -
>8c12	8e a8					.word	SyntaxError                      ; $2e .
>8c14	1a a5					.word	FDivideCommand                   ; $2f /
>8c16	8e a8					.word	SyntaxError                      ; $30 0
>8c18	8e a8					.word	SyntaxError                      ; $31 1
>8c1a	8e a8					.word	SyntaxError                      ; $32 2
>8c1c	8e a8					.word	SyntaxError                      ; $33 3
>8c1e	8e a8					.word	SyntaxError                      ; $34 4
>8c20	8e a8					.word	SyntaxError                      ; $35 5
>8c22	8e a8					.word	SyntaxError                      ; $36 6
>8c24	8e a8					.word	SyntaxError                      ; $37 7
>8c26	8e a8					.word	SyntaxError                      ; $38 8
>8c28	8e a8					.word	SyntaxError                      ; $39 9
>8c2a	8e a8					.word	SyntaxError                      ; $3a :
>8c2c	8e a8					.word	SyntaxError                      ; $3b ;
>8c2e	f5 8f					.word	BinaryCompareLess                ; $3c <
>8c30	eb 8f					.word	BinaryCompareEqual               ; $3d =
>8c32	ff 8f					.word	BinaryCompareGreater             ; $3e >
>8c34	0f 93					.word	ByteIndirect                     ; $3f ?
.8c36					VectorSet0:
>8c36	95 8b					.word	EOLCommand                       ; $80 !0:EOF
>8c38	a2 8b					.word	Shift1Command                    ; $81 !1:SH1
>8c3a	aa 8b					.word	Shift2Command                    ; $82 !2:SH2
>8c3c	60 a6					.word	AbsUnary                         ; $83 ABS(
>8c3e	d9 97					.word	AllocUnary                       ; $84 ALLOC(
>8c40	70 a6					.word	AscUnary                         ; $85 ASC(
>8c42	f9 98					.word	ChrUnary                         ; $86 CHR$(
>8c44	e7 8f					.word	UnaryFalse                       ; $87 FALSE
>8c46	7d a6					.word	FracUnary                        ; $88 FRAC(
>8c48	93 a6					.word	IntUnary                         ; $89 INT(
>8c4a	e9 a6					.word	IsValUnary                       ; $8a ISVAL(
>8c4c	d3 99					.word	Unary_Left                       ; $8b LEFT$(
>8c4e	a5 a6					.word	LenUnary                         ; $8c LEN(
>8c50	fd 99					.word	Unary_Mid                        ; $8d MID$(
>8c52	49 98					.word	Unary_Not                        ; $8e NOT(
>8c54	5f 98					.word	Unary_Random                     ; $8f RANDOM(
>8c56	e3 99					.word	Unary_Right                      ; $90 RIGHT$(
>8c58	78 98					.word	Unary_Rnd                        ; $91 RND(
>8c5a	bf a6					.word	SgnUnary                         ; $92 SGN(
>8c5c	0b 99					.word	SpcUnary                         ; $93 SPC(
>8c5e	26 99					.word	Unary_Str                        ; $94 STR$(
>8c60	db 8f					.word	UnaryTrue                        ; $95 TRUE
>8c62	df a6					.word	ValUnary                         ; $96 VAL(
>8c64	bf 86					.word	ForCommand                       ; $97 FOR
>8c66	0c 88					.word	IfCommand                        ; $98 IF
>8c68	b2 8b					.word	Unused1                          ; $99 PROC
>8c6a	d1 8a					.word	Command_REPEAT                   ; $9a REPEAT
>8c6c	40 8f					.word	Command_WHILE                    ; $9b WHILE
>8c6e	35 88					.word	EndIf                            ; $9c ENDIF
>8c70	9a a2					.word	Command_ENDPROC                  ; $9d ENDPROC
>8c72	79 87					.word	NextCommand                      ; $9e NEXT
>8c74	b2 8b					.word	Unused4                          ; $9f THEN
>8c76	da 8a					.word	Command_UNTIL                    ; $a0 UNTIL
>8c78	61 8f					.word	Command_WEND                     ; $a1 WEND
>8c7a	65 85					.word	CallCommand                      ; $a2 CALL
>8c7c	8e a8					.word	SyntaxError                      ; $a3 CLS
>8c7e	f7 85					.word	Command_Data                     ; $a4 DATA
>8c80	ff 85					.word	DimCommand                       ; $a5 DIM
>8c82	b2 8b					.word	Unused3                          ; $a6 DOWNTO
>8c84	2e 88					.word	ElseCode                         ; $a7 ELSE
>8c86	d2 87					.word	Command_GOSUB                    ; $a8 GOSUB
>8c88	f0 87					.word	GotoCommand                      ; $a9 GOTO
>8c8a	36 88					.word	LetCommand                       ; $aa LET
>8c8c	26 89					.word	Command_LOCAL                    ; $ab LOCAL
>8c8e	b4 89					.word	Command_Print                    ; $ac PRINT
>8c90	6b 8a					.word	Command_Read                     ; $ad READ
>8c92	c4 8a					.word	RemCommand                       ; $ae REM
>8c94	e2 87					.word	Command_RETURN                   ; $af RETURN
>8c96	b2 8b					.word	Unused2                          ; $b0 TO
.8c98					VectorSet1:
>8c98	8e a8					.word	SyntaxError                      ; $80 !0:EOF
>8c9a	8e a8					.word	SyntaxError                      ; $81 !1:SH1
>8c9c	8e a8					.word	SyntaxError                      ; $82 !2:SH2
>8c9e	36 85					.word	AssembleCommand                  ; $83 ASSEMBLE
>8ca0	55 85					.word	AssertCommand                    ; $84 ASSERT
>8ca2	9f 85					.word	ClearCommand                     ; $85 CLEAR
>8ca4	bc 86					.word	EndCommand                       ; $86 END
>8ca6	8b 88					.word	Command_List                     ; $87 LIST
>8ca8	aa 89					.word	NewCommand                       ; $88 NEW
>8caa	f3 8a					.word	Command_Restore                  ; $89 RESTORE
>8cac	25 8b					.word	CommandRUN                       ; $8a RUN
>8cae	38 8d					.word	StopCommand                      ; $8b STOP
.8cb0					VectorSet2:
>8cb0	8e a8					.word	SyntaxError                      ; $80 !0:EOF
>8cb2	8e a8					.word	SyntaxError                      ; $81 !1:SH1
>8cb4	8e a8					.word	SyntaxError                      ; $82 !2:SH2
>8cb6	4d a7					.word	Assemble_adc                     ; $83 ADC
>8cb8	45 a7					.word	Assemble_and                     ; $84 AND
>8cba	61 a7					.word	Assemble_asl                     ; $85 ASL
>8cbc	cb a7					.word	Assemble_bcc                     ; $86 BCC
>8cbe	cf a7					.word	Assemble_bcs                     ; $87 BCS
>8cc0	d7 a7					.word	Assemble_beq                     ; $88 BEQ
>8cc2	8e a7					.word	Assemble_bit                     ; $89 BIT
>8cc4	bf a7					.word	Assemble_bmi                     ; $8a BMI
>8cc6	d3 a7					.word	Assemble_bne                     ; $8b BNE
>8cc8	bb a7					.word	Assemble_bpl                     ; $8c BPL
>8cca	db a7					.word	Assemble_bra                     ; $8d BRA
>8ccc	df a7					.word	Assemble_brk                     ; $8e BRK
>8cce	c3 a7					.word	Assemble_bvc                     ; $8f BVC
>8cd0	c7 a7					.word	Assemble_bvs                     ; $90 BVS
>8cd2	e7 a7					.word	Assemble_clc                     ; $91 CLC
>8cd4	3b a8					.word	Assemble_cld                     ; $92 CLD
>8cd6	fb a7					.word	Assemble_cli                     ; $93 CLI
>8cd8	2b a8					.word	Assemble_clv                     ; $94 CLV
>8cda	59 a7					.word	Assemble_cmp                     ; $95 CMP
>8cdc	a2 a7					.word	Assemble_cpx                     ; $96 CPX
>8cde	9d a7					.word	Assemble_cpy                     ; $97 CPY
>8ce0	7f a7					.word	Assemble_dec                     ; $98 DEC
>8ce2	37 a8					.word	Assemble_dex                     ; $99 DEX
>8ce4	13 a8					.word	Assemble_dey                     ; $9a DEY
>8ce6	49 a7					.word	Assemble_eor                     ; $9b EOR
>8ce8	84 a7					.word	Assemble_inc                     ; $9c INC
>8cea	47 a8					.word	Assemble_inx                     ; $9d INX
>8cec	33 a8					.word	Assemble_iny                     ; $9e INY
>8cee	b6 a7					.word	Assemble_jmp                     ; $9f JMP
>8cf0	b1 a7					.word	Assemble_jsr                     ; $a0 JSR
>8cf2	55 a7					.word	Assemble_lda                     ; $a1 LDA
>8cf4	7a a7					.word	Assemble_ldx                     ; $a2 LDX
>8cf6	98 a7					.word	Assemble_ldy                     ; $a3 LDY
>8cf8	6b a7					.word	Assemble_lsr                     ; $a4 LSR
>8cfa	4b a8					.word	Assemble_nop                     ; $a5 NOP
>8cfc	41 a7					.word	Assemble_ora                     ; $a6 ORA
>8cfe	f7 a7					.word	Assemble_pha                     ; $a7 PHA
>8d00	e3 a7					.word	Assemble_php                     ; $a8 PHP
>8d02	3f a8					.word	Assemble_phx                     ; $a9 PHX
>8d04	ff a7					.word	Assemble_phy                     ; $aa PHY
>8d06	07 a8					.word	Assemble_pla                     ; $ab PLA
>8d08	eb a7					.word	Assemble_plp                     ; $ac PLP
>8d0a	53 a8					.word	Assemble_plx                     ; $ad PLX
>8d0c	0f a8					.word	Assemble_ply                     ; $ae PLY
>8d0e	66 a7					.word	Assemble_rol                     ; $af ROL
>8d10	70 a7					.word	Assemble_ror                     ; $b0 ROR
>8d12	f3 a7					.word	Assemble_rti                     ; $b1 RTI
>8d14	03 a8					.word	Assemble_rts                     ; $b2 RTS
>8d16	5d a7					.word	Assemble_sbc                     ; $b3 SBC
>8d18	ef a7					.word	Assemble_sec                     ; $b4 SEC
>8d1a	4f a8					.word	Assemble_sed                     ; $b5 SED
>8d1c	0b a8					.word	Assemble_sei                     ; $b6 SEI
>8d1e	51 a7					.word	Assemble_sta                     ; $b7 STA
>8d20	43 a8					.word	Assemble_stp                     ; $b8 STP
>8d22	75 a7					.word	Assemble_stx                     ; $b9 STX
>8d24	93 a7					.word	Assemble_sty                     ; $ba STY
>8d26	89 a7					.word	Assemble_stz                     ; $bb STZ
>8d28	27 a8					.word	Assemble_tax                     ; $bc TAX
>8d2a	23 a8					.word	Assemble_tay                     ; $bd TAY
>8d2c	ac a7					.word	Assemble_trb                     ; $be TRB
>8d2e	a7 a7					.word	Assemble_tsb                     ; $bf TSB
>8d30	2f a8					.word	Assemble_tsx                     ; $c0 TSX
>8d32	17 a8					.word	Assemble_txa                     ; $c1 TXA
>8d34	1f a8					.word	Assemble_txs                     ; $c2 TXS
>8d36	1b a8					.word	Assemble_tya                     ; $c3 TYA

;******  Return to file: ./common/commands/run.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/stop.asm

.8d38					StopCommand:
.8d38	a9 08		lda #$08		lda	#8
.8d3a	4c 6f 8f	jmp $8f6f		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/expandline.asm

.8d3d					ListConvertLine:
.8d3d	9c 9d 04	stz $049d			stz 	tbOffset
.8d40	9c a9 04	stz $04a9			stz 	tokenBuffer
.8d43	a0 02		ldy #$02			ldy 	#2 							; convert line number to string
.8d45	b1 30		lda ($30),y			lda 	(codePtr),y
.8d47	aa		tax				tax
.8d48	88		dey				dey
.8d49	b1 30		lda ($30),y			lda 	(codePtr),y
.8d4b	20 04 a4	jsr $a404			jsr 	ConvertInt16
.8d4e	85 36		sta $36				sta 	zTemp0 						; copy number into buffer
.8d50	86 37		stx $37				stx 	zTemp0+1
.8d52	a0 00		ldy #$00			ldy 	#0
.8d54					_LCCopyNumber:
.8d54	b1 36		lda ($36),y			lda 	(zTemp0),y
.8d56	20 56 8e	jsr $8e56			jsr 	LCLWrite
.8d59	c8		iny				iny
.8d5a	b1 36		lda ($36),y			lda 	(zTemp0),y
.8d5c	d0 f6		bne $8d54			bne 	_LCCopyNumber
.8d5e					_LCPadOut:
.8d5e	a9 20		lda #$20			lda 	#' '						; pad out to 6 characters
.8d60	20 56 8e	jsr $8e56			jsr 	LCLWrite
.8d63	ad 9d 04	lda $049d			lda 	tbOffset
.8d66	c9 06		cmp #$06			cmp 	#6
.8d68	d0 f4		bne $8d5e			bne 	_LCPadOut
.8d6a	a0 03		ldy #$03			ldy 	#3 							; start position.
.8d6c					_LCMainLoop:
.8d6c	b1 30		lda ($30),y			lda 	(codePtr),y
.8d6e	c9 80		cmp #$80			cmp 	#KWC_EOL 					; end of line ?
.8d70	f0 17		beq $8d89			beq 	_LCExit
.8d72	c9 10		cmp #$10			cmp 	#16 						; 0-5 are the double punctuations
.8d74	90 14		bcc $8d8a			bcc 	_LCDoubles
.8d76	c9 20		cmp #$20			cmp 	#32 						; 16-31 are shifted punctuation from 64-91
.8d78	90 20		bcc $8d9a			bcc 	_LCShiftPunc
.8d7a	c9 40		cmp #$40			cmp 	#64 						; 32-64 are as stored, punc and digits
.8d7c	90 2b		bcc $8da9			bcc 	_LCPunctuation
.8d7e	c9 80		cmp #$80			cmp 	#128 						; 64-127 are variable identifiers.
.8d80	90 2d		bcc $8daf			bcc 	_LCIdentifiers
.8d82	c9 fe		cmp #$fe			cmp 	#254 						; 128-253 are tokenised words
.8d84	90 49		bcc $8dcf			bcc 	_LCTokens
.8d86	4c 2a 8e	jmp $8e2a			jmp 	_LCData 					; 254-5 are data objects
.8d89					_LCExit:
.8d89	60		rts				rts
.8d8a					_LCDoubles:
.8d8a	48		pha				pha
.8d8b	4a		lsr a				lsr 	a 							; put bit 2 into bit 1
.8d8c	29 02		and #$02			and 	#2
.8d8e	09 3c		ora #$3c			ora 	#60 						; make < >
.8d90	20 56 8e	jsr $8e56			jsr 	LCLWrite
.8d93	68		pla				pla 								; restore, do lower bit
.8d94	29 03		and #$03			and 	#3
.8d96	09 3c		ora #$3c			ora 	#60
.8d98	80 0f		bra $8da9			bra		_LCPunctuation 				; print, increment, loop
.8d9a					_LCShiftPunc:
.8d9a	aa		tax				tax 								; save in X
.8d9b	29 07		and #$07			and 	#7 							; lower 3 bits
.8d9d	f0 02		beq $8da1			beq 	_LCNoAdd
.8d9f	09 18		ora #$18			ora 	#24 						; adds $18 to it.
.8da1					_LCNoAdd:
.8da1	e0 18		cpx #$18			cpx 	#24 						; if >= 24 add $20
.8da3	90 02		bcc $8da7			bcc 	_LCNoAdd2
.8da5	09 20		ora #$20			ora 	#32 						; adds $20
.8da7					_LCNoAdd2:
.8da7	09 40		ora #$40			ora 	#$40 						; shift into 64-127 range and fall through.
.8da9					_LCPunctuation:
.8da9	c8		iny				iny 								; consume character
.8daa	20 56 8e	jsr $8e56			jsr 	LCLWrite 					; write it out.
.8dad	80 bd		bra $8d6c			bra 	_LCMainLoop 				; go round again.
.8daf					_LCIdentifiers:
.8daf	18		clc				clc 								; convert to physical address
.8db0	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8db2	85 37		sta $37				sta 	zTemp0+1
.8db4	c8		iny				iny
.8db5	b1 30		lda ($30),y			lda 	(codePtr),y
.8db7	85 36		sta $36				sta 	zTemp0
.8db9	c8		iny				iny
.8dba	5a		phy				phy 								; save position
.8dbb	a0 07		ldy #$07			ldy 	#7 							; output the identifier.
.8dbd					_LCOutIdentifier:
.8dbd	c8		iny				iny
.8dbe	b1 36		lda ($36),y			lda 	(zTemp0),y
.8dc0	29 7f		and #$7f			and 	#$7F
.8dc2	20 84 8e	jsr $8e84			jsr 	LCLLowerCase
.8dc5	20 56 8e	jsr $8e56			jsr 	LCLWrite
.8dc8	b1 36		lda ($36),y			lda 	(zTemp0),y				 	; ends when bit 7 set.
.8dca	10 f1		bpl $8dbd			bpl 	_LCOutIdentifier
.8dcc	7a		ply				ply 								; restore position
.8dcd	80 9d		bra $8d6c			bra 	_LCMainLoop
.8dcf					_LCTokens:
.8dcf	aa		tax				tax 								; token in X
.8dd0	a9 54		lda #$54			lda 	#((KeywordSet2) & $FF)
.8dd2	85 36		sta $36				sta 	0+zTemp0
.8dd4	a9 9e		lda #$9e			lda 	#((KeywordSet2) >> 8)
.8dd6	85 37		sta $37				sta 	1+zTemp0
.8dd8	e0 82		cpx #$82			cpx 	#$82
.8dda	f0 16		beq $8df2			beq 	_LCUseShift
.8ddc	a9 10		lda #$10			lda 	#((KeywordSet1) & $FF)
.8dde	85 36		sta $36				sta 	0+zTemp0
.8de0	a9 9e		lda #$9e			lda 	#((KeywordSet1) >> 8)
.8de2	85 37		sta $37				sta 	1+zTemp0
.8de4	e0 81		cpx #$81			cpx 	#$81
.8de6	f0 0a		beq $8df2			beq 	_LCUseShift
.8de8	a9 de		lda #$de			lda 	#((KeywordSet0) & $FF)
.8dea	85 36		sta $36				sta 	0+zTemp0
.8dec	a9 9c		lda #$9c			lda 	#((KeywordSet0) >> 8)
.8dee	85 37		sta $37				sta 	1+zTemp0
.8df0	80 01		bra $8df3			bra 	_LCNoShift
.8df2					_LCUseShift:
.8df2	c8		iny				iny
.8df3					_LCNoShift:
.8df3	20 65 8e	jsr $8e65			jsr 	LCCheckSpaceRequired 		; do we need a space ?
.8df6	b1 30		lda ($30),y			lda 	(codePtr),y
.8df8	aa		tax				tax 								; into X
.8df9					_LCFindText:
.8df9	ca		dex				dex
.8dfa	10 0e		bpl $8e0a			bpl 	_LCFoundText 				; found text.
.8dfc	b2 36		lda ($36)			lda 	(zTemp0) 					; length of text
.8dfe	1a		inc a				inc 	a 							; one extra for size
.8dff	38		sec				sec 								; one extra for checksum
.8e00	65 36		adc $36				adc 	zTemp0 						; go to next token
.8e02	85 36		sta $36				sta 	zTemp0
.8e04	90 f3		bcc $8df9			bcc 	_LCFindText
.8e06	e6 37		inc $37				inc 	zTemp0+1
.8e08	80 ef		bra $8df9			bra 	_LCFindText
.8e0a					_LCFoundText:
.8e0a	5a		phy				phy 								; save List position
.8e0b	b2 36		lda ($36)			lda 	(zTemp0)					; count to print
.8e0d	aa		tax				tax
.8e0e	a0 02		ldy #$02			ldy 	#2
.8e10					_LCCopyToken:
.8e10	b1 36		lda ($36),y			lda 	(zTemp0),y
.8e12	20 84 8e	jsr $8e84			jsr 	LCLLowerCase
.8e15	20 56 8e	jsr $8e56			jsr 	LCLWrite
.8e18	c8		iny				iny
.8e19	ca		dex				dex
.8e1a	d0 f4		bne $8e10			bne 	_LCCopyToken
.8e1c	c9 28		cmp #$28			cmp 	#"(" 						; if last char not ( print a space
.8e1e	f0 05		beq $8e25			beq 	_LCNoSpace
.8e20	a9 20		lda #$20			lda 	#' '
.8e22	20 56 8e	jsr $8e56			jsr 	LCLWrite
.8e25					_LCNoSpace:
.8e25	7a		ply				ply 								; restore position.
.8e26	c8		iny				iny 								; consume token
.8e27	4c 6c 8d	jmp $8d6c			jmp 	_LCMainLoop 				; and go around again.
.8e2a					_LCData:
.8e2a	48		pha				pha 								; save type $FE/$FF
.8e2b	a2 24		ldx #$24			ldx 	#'$' 						; figure out $ or "
.8e2d	c9 fe		cmp #$fe			cmp 	#$FE
.8e2f	f0 02		beq $8e33			beq 	_LCHaveOpener
.8e31	a2 22		ldx #$22			ldx 	#'"'
.8e33					_LCHaveOpener:
.8e33	8a		txa				txa 								; output prefix (# or ")
.8e34	20 56 8e	jsr $8e56			jsr 	LCLWrite
.8e37	c8		iny				iny 								; get count
.8e38	b1 30		lda ($30),y			lda 	(codePtr),y
.8e3a	aa		tax				tax
.8e3b	c8		iny				iny 								; point at first character
.8e3c					_LCOutData:
.8e3c	b1 30		lda ($30),y			lda 	(codePtr),y
.8e3e	c9 00		cmp #$00			cmp 	#0
.8e40	f0 03		beq $8e45			beq 	_LCNoPrint
.8e42	20 56 8e	jsr $8e56			jsr 	LCLWrite
.8e45					_LCNoPrint:
.8e45	c8		iny				iny
.8e46	ca		dex				dex
.8e47	d0 f3		bne $8e3c			bne 	_LCOutData
.8e49	68		pla				pla 								; closing " required ?
.8e4a	c9 ff		cmp #$ff			cmp 	#$FF
.8e4c	d0 05		bne $8e53			bne 	_LCNoQuote
.8e4e	a9 22		lda #$22			lda 	#'"'
.8e50	20 56 8e	jsr $8e56			jsr 	LCLWrite
.8e53					_LCNoQuote:
.8e53	4c 6c 8d	jmp $8d6c			jmp 	_LCMainLoop
.8e56					LCLWrite:
.8e56	da		phx				phx
.8e57	ae 9d 04	ldx $049d			ldx 	tbOffset
.8e5a	9d a9 04	sta $04a9,x			sta 	tokenBuffer,x
.8e5d	9e aa 04	stz $04aa,x			stz 	tokenBuffer+1,x
.8e60	ee 9d 04	inc $049d			inc 	tbOffset
.8e63	fa		plx				plx
.8e64	60		rts				rts
.8e65					LCCheckSpaceRequired:
.8e65	ae 9d 04	ldx $049d			ldx 	tbOffset
.8e68	bd a8 04	lda $04a8,x			lda 	tokenBuffer-1,x 			; previous character
.8e6b	20 84 8e	jsr $8e84			jsr 	LCLLowerCase 				; saves a little effort
.8e6e	c9 30		cmp #$30			cmp 	#"0" 						; check if it was 0-9 A-Z a-z if so need space.
.8e70	90 11		bcc $8e83			bcc 	_LCCSRExit
.8e72	c9 3a		cmp #$3a			cmp 	#"9"+1
.8e74	90 08		bcc $8e7e			bcc 	_LCCSRSpace
.8e76	c9 61		cmp #$61			cmp 	#"a"
.8e78	90 09		bcc $8e83			bcc 	_LCCSRExit
.8e7a	c9 7b		cmp #$7b			cmp 	#"z"+1
.8e7c	b0 05		bcs $8e83			bcs 	_LCCSRExit
.8e7e					_LCCSRSpace:
.8e7e	a9 20		lda #$20			lda 	#' '
.8e80	20 56 8e	jsr $8e56			jsr 	LCLWrite
.8e83					_LCCSRExit:
.8e83	60		rts				rts
.8e84					LCLLowerCase:
.8e84	c9 41		cmp #$41			cmp 	#"A"
.8e86	90 06		bcc $8e8e			bcc 	_LCLLCOut
.8e88	c9 5b		cmp #$5b			cmp 	#"Z"+1
.8e8a	b0 02		bcs $8e8e			bcs 	_LCLLCOut
.8e8c	69 20		adc #$20			adc 	#$20
.8e8e					_LCLLCOut:
.8e8e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/procscan.asm

.8e8f					ProcedureScan:
.8e8f	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8e91	85 30		sta $30				sta 	codePtr
.8e93	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8e95	85 31		sta $31				sta 	codePtr+1
.8e97					_PSLoop:
.8e97	b2 30		lda ($30)			lda 	(codePtr)
.8e99	f0 42		beq $8edd			beq 	_PSExit
.8e9b	a0 03		ldy #$03			ldy 	#3 							; is it PROC ?
.8e9d	b1 30		lda ($30),y			lda 	(codePtr),y
.8e9f	c9 99		cmp #$99			cmp 	#KWD_PROC
.8ea1	d0 2d		bne $8ed0			bne 	_PSNext
.8ea3	c8		iny				iny 								; get the address of the record to zTemp0 and
.8ea4	b1 30		lda ($30),y			lda 	(codePtr),y
.8ea6	29 c0		and #$c0			and 	#$C0
.8ea8	c9 40		cmp #$40			cmp 	#$40
.8eaa	d0 32		bne $8ede			bne 	_PSSyntax
.8eac	b1 30		lda ($30),y			lda 	(codePtr),y
.8eae	18		clc				clc
.8eaf	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8eb1	85 37		sta $37				sta 	zTemp0+1
.8eb3	c8		iny				iny 								; LSB
.8eb4	b1 30		lda ($30),y			lda 	(codePtr),y
.8eb6	85 36		sta $36				sta 	zTemp0
.8eb8	c8		iny				iny 								; character after variable call.
.8eb9	98		tya				tya 								; save Y offset at +7
.8eba	a0 07		ldy #$07			ldy 	#7
.8ebc	91 36		sta ($36),y			sta 	(zTemp0),y
.8ebe	a9 18		lda #$18			lda 	#NSTProcedure 				; mark it as procedure
.8ec0	a0 02		ldy #$02			ldy 	#2
.8ec2	91 36		sta ($36),y			sta 	(zTemp0),y
.8ec4	a2 00		ldx #$00			ldx 	#0 							; copy code-Ptr in
.8ec6					_PSCopy:
.8ec6	b5 30		lda $30,x			lda 	safePtr,x
.8ec8	c8		iny				iny
.8ec9	91 36		sta ($36),y			sta 	(zTemp0),y
.8ecb	e8		inx				inx
.8ecc	e0 04		cpx #$04			cpx 	#4
.8ece	d0 f6		bne $8ec6			bne 	_PSCopy
.8ed0					_PSNext:
.8ed0	18		clc				clc
.8ed1	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8ed3	65 30		adc $30				adc 	codePtr
.8ed5	85 30		sta $30				sta 	codePtr
.8ed7	90 02		bcc $8edb			bcc 	_CREExit
.8ed9	e6 31		inc $31				inc 	codePtr+1
.8edb					_CREExit:
.8edb	80 ba		bra $8e97			bra 	_PSLoop
.8edd					_PSExit:
.8edd	60		rts				rts
.8ede					_PSSyntax:
.8ede	4c 8e a8	jmp $a88e			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/scanforward.asm

.8ee1					ScanForward:
.8ee1	85 36		sta $36				sta 	zTemp0 						; save XA as the two possible matches.
.8ee3	86 37		stx $37				stx 	zTemp0+1
.8ee5	64 38		stz $38				stz 	zTemp1 						; this is the structure count - goes up with WHILE/FOR
.8ee7					_ScanLoop:
.8ee7	b1 30		lda ($30),y			lda 	(codePtr),y
.8ee9	c8		iny				iny
.8eea	a6 38		ldx $38				ldx 	zTemp1 						; if the count is > 0 cannot match as in substructure
.8eec	d0 0e		bne $8efc			bne 	_ScanGoNext
.8eee	c5 36		cmp $36				cmp 	zTemp0 						; see if either matches
.8ef0	f0 04		beq $8ef6			beq 	_ScanMatch
.8ef2	c5 37		cmp $37				cmp 	zTemp0+1
.8ef4	d0 06		bne $8efc			bne 	_ScanGoNext
.8ef6					_ScanMatch:
.8ef6	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if asked for EOL, backtrack.
.8ef8	d0 01		bne $8efb			bne 	_ScanNotEndEOL
.8efa	88		dey				dey
.8efb					_ScanNotEndEOL:
.8efb	60		rts				rts
.8efc					_ScanGoNext:
.8efc	c9 40		cmp #$40			cmp 	#$40 						; if 00-3F, punctuation characters, loop back
.8efe	90 e7		bcc $8ee7			bcc 	_ScanLoop
.8f00	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if 40-82, skip one extra.
.8f02	90 18		bcc $8f1c			bcc 	_ScanSkipOne
.8f04	c9 fc		cmp #$fc			cmp 	#$FC 						; FC-FF are data skips
.8f06	b0 2f		bcs $8f37			bcs 	_ScanSkipData
.8f08	c9 97		cmp #$97			cmp 	#KWC_FIRST_STRUCTURE 		; structure keyword ?
.8f0a	90 db		bcc $8ee7			bcc 	_ScanLoop 					; if not, ordinary keywords.
.8f0c	c9 a2		cmp #$a2			cmp 	#KWC_LAST_STRUCTURE+1
.8f0e	b0 d7		bcs $8ee7			bcs 	_ScanLoop
.8f10	c6 38		dec $38				dec 	zTemp1 						; decrement the sructure count
.8f12	c9 9c		cmp #$9c			cmp 	#KWC_FIRST_STRUCTURE_DEC 	; back if it is a dec structure (e.g. WEND/NEXT)
.8f14	b0 d1		bcs $8ee7			bcs 	_ScanLoop
.8f16	e6 38		inc $38				inc 	zTemp1 						; so it's an increment structure
.8f18	e6 38		inc $38				inc 	zTemp1 						; twice to undo the dec
.8f1a	80 cb		bra $8ee7			bra 	_ScanLoop
.8f1c					_ScanSkipOne:
.8f1c	c8		iny				iny 								; consume the extra one.
.8f1d	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if not EOL loop back
.8f1f	d0 c6		bne $8ee7			bne 	_ScanLoop
.8f21	18		clc				clc
.8f22	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8f24	65 30		adc $30				adc 	codePtr
.8f26	85 30		sta $30				sta 	codePtr
.8f28	90 02		bcc $8f2c			bcc 	_CREExit
.8f2a	e6 31		inc $31				inc 	codePtr+1
.8f2c					_CREExit:
.8f2c	a0 03		ldy #$03			ldy 	#3 							; scan start position.
.8f2e	b2 30		lda ($30)			lda 	(codePtr)
.8f30	d0 b5		bne $8ee7			bne 	_ScanLoop 					; if not zero, more to scan
.8f32	a9 13		lda #$13		lda	#19
.8f34	4c 6f 8f	jmp $8f6f		jmp	ErrorHandler
.8f37					_ScanSkipData:
.8f37	88		dey				dey 								; point at data token
.8f38	c8		iny				iny
.8f39	98		tya				tya
.8f3a	38		sec				sec
.8f3b	71 30		adc ($30),y			adc 	(codePtr),y
.8f3d	a8		tay				tay
.8f3e	80 a7		bra $8ee7			bra 	_ScanLoop

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/while.asm

.8f40					Command_WHILE:
.8f40	5a		phy				phy 								; save position of the test
.8f41	a2 00		ldx #$00			ldx 	#0
.8f43	20 7b 9a	jsr $9a7b			jsr 	EvaluateNumber 				; work out the number
.8f46	20 57 9b	jsr $9b57			jsr 	NSMIsZero 					; check if zero
.8f49	f0 0e		beq $8f59			beq 	_WHExitLoop 				; if so exit the loop
.8f4b	98		tya				tya 								; position *after* test.
.8f4c	7a		ply				ply 								; restore position before test, at WHILE
.8f4d	88		dey				dey
.8f4e	48		pha				pha 								; push after test on the stack
.8f4f	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; allocate 6 bytes on the return stack.
.8f51	20 db 9b	jsr $9bdb			jsr 	StackOpen
.8f54	20 1f 9c	jsr $9c1f			jsr 	STKSaveCodePosition 		; save loop position - where the test value is.
.8f57	7a		ply				ply 								; restore the position *after* the test
.8f58	60		rts				rts
.8f59					_WHExitLoop:
.8f59	68		pla				pla 								; throw post loop position
.8f5a	a9 a1		lda #$a1			lda 	#KWD_WEND 					; scan forward past WEND
.8f5c	aa		tax				tax
.8f5d	20 e1 8e	jsr $8ee1			jsr 	ScanForward
.8f60	60		rts				rts
.8f61					Command_WEND:
.8f61	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; check WHILE is TOS
.8f63	a2 10		ldx #$10			ldx 	#ERRID_WHILE 				; this error
.8f65	20 07 9c	jsr $9c07			jsr 	StackCheckFrame
.8f68	20 30 9c	jsr $9c30			jsr 	STKLoadCodePosition 		; loop back
.8f6b	20 f9 9b	jsr $9bf9			jsr 	StackClose		 			; erase the frame
.8f6e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/charcheck.asm

.a2a8					CheckRightBracket:
.a2a8	b1 30		lda ($30),y			lda 	(codePtr),y
.a2aa	c8		iny				iny
.a2ab	c9 29		cmp #$29			cmp 	#KWD_RPAREN 						; exit if matches
.a2ad	d0 0f		bne $a2be			bne 	CNAFail
.a2af	60		rts				rts
.a2b0					CheckComma:
.a2b0	b1 30		lda ($30),y			lda 	(codePtr),y
.a2b2	c8		iny				iny
.a2b3	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 						; exit if matches
.a2b5	d0 07		bne $a2be			bne 	CNAFail
.a2b7	60		rts				rts
.a2b8					CheckNextA:
.a2b8	d1 30		cmp ($30),y			cmp 	(codePtr),y
.a2ba	d0 02		bne $a2be			bne 	CNAFail
.a2bc	c8		iny				iny 								; skip character
.a2bd	60		rts				rts 								; and exit
.a2be					CNAFail:
.a2be	4c 8e a8	jmp $a88e			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/errors.asm

.8f6f					ErrorHandler:
.8f6f	a8		tay				tay 								; find the error text
.8f70	f0 49		beq $8fbb			beq 	_EHEnd
.8f72	a2 00		ldx #$00			ldx 	#0
.8f74	a9 a7		lda #$a7			lda 	#((ErrorText) & $FF)
.8f76	85 36		sta $36				sta 	0+zTemp0
.8f78	a9 a8		lda #$a8			lda 	#((ErrorText) >> 8)
.8f7a	85 37		sta $37				sta 	1+zTemp0
.8f7c					_EHFind:
.8f7c	88		dey				dey 								; found the error text ?
.8f7d	f0 0e		beq $8f8d			beq 	_EHFound
.8f7f					_EHFindZero:
.8f7f	b2 36		lda ($36)			lda 	(zTemp0) 					; find the next error
.8f81	e6 36		inc $36				inc 	zTemp0
.8f83	d0 02		bne $8f87			bne 	_EHFNoCarry
.8f85	e6 37		inc $37				inc 	zTemp0+1
.8f87					_EHFNoCarry:
.8f87	c9 00		cmp #$00			cmp 	#0
.8f89	d0 f4		bne $8f7f			bne 	_EHFindZero
.8f8b	80 ef		bra $8f7c			bra 	_EHFind
.8f8d					_EHFound:
.8f8d	a5 36		lda $36				lda 	zTemp0 						; print message
.8f8f	a6 37		ldx $37				ldx 	zTemp0+1
.8f91	20 c8 8f	jsr $8fc8			jsr 	PrintStringXA
.8f94	a0 01		ldy #$01			ldy 	#1 							; if line number zero don't print i
.8f96	b1 30		lda ($30),y			lda 	(codePtr),y
.8f98	d0 05		bne $8f9f			bne 	_EHAtMsg
.8f9a	c8		iny				iny
.8f9b	b1 30		lda ($30),y			lda 	(codePtr),y
.8f9d	f0 17		beq $8fb6			beq 	_EHCREnd
.8f9f					_EHAtMsg:
.8f9f	a2 8f		ldx #$8f			ldx 	#_AtMsg >> 8 				; print " at "
.8fa1	a9 be		lda #$be			lda 	#_AtMsg & $FF
.8fa3	20 c8 8f	jsr $8fc8			jsr 	PrintStringXA
.8fa6	a0 01		ldy #$01			ldy 	#1 							; line number into XA
.8fa8	b1 30		lda ($30),y			lda 	(codePtr),y
.8faa	48		pha				pha
.8fab	c8		iny				iny
.8fac	b1 30		lda ($30),y			lda 	(codePtr),y
.8fae	aa		tax				tax
.8faf	68		pla				pla
.8fb0	20 04 a4	jsr $a404			jsr 	ConvertInt16 				; convert XA to string
.8fb3	20 c8 8f	jsr $8fc8			jsr 	PrintStringXA 				; and print it.
.8fb6					_EHCREnd:
.8fb6	a9 0d		lda #$0d			lda 	#13 						; new line
.8fb8	20 31 aa	jsr $aa31			jsr 	EXTPrintCharacter
.8fbb					_EHEnd:
.8fbb	4c 06 85	jmp $8506			jmp 	WarmStart
>8fbe	20 61 74 20 6c 69 6e 65		_AtMsg:	.text 	" at line ",0
>8fc6	20 00
.8fc8					PrintStringXA:
.8fc8	5a		phy				phy
.8fc9	86 37		stx $37				stx 	zTemp0+1
.8fcb	85 36		sta $36				sta 	zTemp0
.8fcd	a0 00		ldy #$00			ldy 	#0
.8fcf					_PSXALoop:
.8fcf	b1 36		lda ($36),y			lda 	(zTemp0),y
.8fd1	f0 06		beq $8fd9			beq 	_PSXAExit
.8fd3	20 31 aa	jsr $aa31			jsr 	EXTPrintCharacter
.8fd6	c8		iny				iny
.8fd7	80 f6		bra $8fcf			bra 	_PSXALoop
.8fd9					_PSXAExit:
.8fd9	7a		ply				ply
.8fda	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/compare.asm

.8fdb					UnaryTrue:
.8fdb	fa		plx				plx
.8fdc					ReturnTrue:
.8fdc	a9 01		lda #$01			lda 	#1  						; set to 1
.8fde	20 29 9b	jsr $9b29			jsr 	NSMSetByte
.8fe1	a9 80		lda #$80			lda 	#$80 						; set sign flag, so it is -1
.8fe3	9d 00 04	sta $0400,x			sta 	NSStatus,x
.8fe6	60		rts				rts
.8fe7					UnaryFalse:
.8fe7	fa		plx				plx
.8fe8					ReturnFalse:
.8fe8	4c 27 9b	jmp $9b27			jmp 	NSMSetZero 					; set it all to zero
.8feb					BinaryCompareEqual:
.8feb	fa		plx				plx
.8fec	20 27 90	jsr $9027			jsr 	CompareBaseCode
.8fef	c9 00		cmp #$00			cmp 	#0
.8ff1	f0 e9		beq $8fdc			beq 	ReturnTrue
.8ff3	80 f3		bra $8fe8			bra 	ReturnFalse
.8ff5					BinaryCompareLess:
.8ff5	fa		plx				plx
.8ff6	20 27 90	jsr $9027			jsr 	CompareBaseCode
.8ff9	c9 ff		cmp #$ff			cmp 	#$FF
.8ffb	f0 df		beq $8fdc			beq 	ReturnTrue
.8ffd	80 e9		bra $8fe8			bra 	ReturnFalse
.8fff					BinaryCompareGreater:
.8fff	fa		plx				plx
.9000	20 27 90	jsr $9027			jsr 	CompareBaseCode
.9003	c9 01		cmp #$01			cmp 	#1
.9005	f0 d5		beq $8fdc			beq 	ReturnTrue
.9007	80 df		bra $8fe8			bra 	ReturnFalse
.9009					BinaryCompareNotEqual:
.9009	fa		plx				plx
.900a	20 27 90	jsr $9027			jsr 	CompareBaseCode
.900d	c9 00		cmp #$00			cmp 	#0
.900f	d0 cb		bne $8fdc			bne 	ReturnTrue
.9011	80 d5		bra $8fe8			bra 	ReturnFalse
.9013					BinaryCompareLessEqual:
.9013	fa		plx				plx
.9014	20 27 90	jsr $9027			jsr 	CompareBaseCode
.9017	c9 01		cmp #$01			cmp 	#1
.9019	d0 c1		bne $8fdc			bne 	ReturnTrue
.901b	80 cb		bra $8fe8			bra 	ReturnFalse
.901d					BinaryCompareGreaterEqual:
.901d	fa		plx				plx
.901e	20 27 90	jsr $9027			jsr 	CompareBaseCode
.9021	c9 ff		cmp #$ff			cmp 	#$FF
.9023	d0 b7		bne $8fdc			bne 	ReturnTrue
.9025	80 c1		bra $8fe8			bra 	ReturnFalse
.9027					CompareBaseCode:
.9027	20 88 94	jsr $9488			jsr 	DereferenceTopTwo 			; make both values if references.
.902a	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if either is a string.
.902d	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9030	29 10		and #$10			and 	#NSTString
.9032	d0 40		bne $9074			bne 	_CBCString
.9034	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check both are integers
.9037	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.903a	d0 3b		bne $9077			bne 	_CBCFloat
.903c	bd 00 04	lda $0400,x			lda 	NSStatus,x
.903f	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9042	29 08		and #$08			and 	#NSTFloat
.9044	d0 31		bne $9077			bne 	_CBCFloat
.9046	20 7a 90	jsr $907a			jsr 	CompareFixMinusZero
.9049	e8		inx				inx
.904a	20 7a 90	jsr $907a			jsr 	CompareFixMinusZero
.904d	ca		dex				dex
.904e	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; are the signs different ?
.9051	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.9054	10 0b		bpl $9061			bpl 	_CDCSameSign
.9056	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; if first one is -ve
.9059	30 16		bmi $9071			bmi 	_CBCLess 					; return $FF
.905b					_CBCGreater:
.905b	a9 01		lda #$01			lda 	#1
.905d	60		rts				rts
.905e					_CBCEqual:
.905e	a9 00		lda #$00			lda 	#0
.9060	60		rts				rts
.9061					_CDCSameSign:
.9061	20 8a 91	jsr $918a			jsr 	SubTopTwoStack 				; unsigned subtract
.9064	20 57 9b	jsr $9b57			jsr 	NSMIsZero 					; or the mantissa together
.9067	f0 f5		beq $905e			beq 	_CBCEqual 					; -0 == 0
.9069	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; sign of the result. if +ve return $01 else return $FF
.906c	5d 01 04	eor $0401,x			eor 	NSStatus+1,x 				; however if both were -ve this is inverted
.906f	10 ea		bpl $905b			bpl 	_CBCGreater
.9071					_CBCLess:
.9071	a9 ff		lda #$ff			lda 	#$FF
.9073	60		rts				rts
.9074					_CBCString:
.9074	4c e0 90	jmp $90e0			jmp 	CompareStrings
.9077					_CBCFloat:
.9077	4c 00 a5	jmp $a500			jmp 	CompareFloat
.907a					CompareFixMinusZero:
.907a	20 57 9b	jsr $9b57			jsr 	NSMIsZero
.907d	d0 03		bne $9082			bne 	_CFXMZNotZero
.907f	9e 00 04	stz $0400,x			stz 	NSStatus,x
.9082					_CFXMZNotZero:
.9082	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/concat.asm

.9083					StringConcat:
.9083	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check both strings
.9086	3d 01 04	and $0401,x			and 	NSStatus+1,x
.9089	29 18		and #$18			and 	#NSBTypeMask
.908b	c9 10		cmp #$10			cmp 	#NSTString
.908d	d0 4e		bne $90dd			bne		_SCType
.908f	64 38		stz $38				stz 	zTemp1 						; counting total length
.9091	e8		inx				inx
.9092	20 b0 90	jsr $90b0			jsr 	_SCSetupZ0 					; setup for second
.9095	20 bb 90	jsr $90bb			jsr 	_SCLengthZ0 				; length for second
.9098	ca		dex				dex
.9099	20 b0 90	jsr $90b0			jsr 	_SCSetupZ0 					; setup for first
.909c	20 bb 90	jsr $90bb			jsr 	_SCLengthZ0 				; length for first
.909f	a5 38		lda $38				lda 	zTemp1 						; allocate memory
.90a1	20 b3 ab	jsr $abb3			jsr 	StringTempAllocate
.90a4	20 ce 90	jsr $90ce			jsr 	_SCCopy 					; copy first out, using zTemp0 from above
.90a7	e8		inx				inx
.90a8	20 b0 90	jsr $90b0			jsr 	_SCSetupZ0 					; copy second out
.90ab	20 ce 90	jsr $90ce			jsr 	_SCCopy
.90ae	ca		dex				dex
.90af	60		rts				rts
.90b0					_SCSetupZ0:
.90b0	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.90b3	85 36		sta $36				sta 	zTemp0
.90b5	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.90b8	85 37		sta $37				sta 	zTemp0+1
.90ba	60		rts				rts
.90bb					_SCLengthZ0:
.90bb	5a		phy				phy
.90bc	a0 00		ldy #$00			ldy 	#0
.90be					_SCLenLoop:
.90be	b1 36		lda ($36),y			lda 	(zTemp0),y
.90c0	f0 0a		beq $90cc			beq 	_SCLExit
.90c2	c8		iny				iny
.90c3	e6 38		inc $38				inc 	zTemp1
.90c5	10 f7		bpl $90be			bpl		_SCLenLoop
.90c7	a9 09		lda #$09		lda	#9
.90c9	4c 6f 8f	jmp $8f6f		jmp	ErrorHandler
.90cc					_SCLExit:
.90cc	7a		ply				ply
.90cd	60		rts				rts
.90ce					_SCCopy:
.90ce	5a		phy				phy
.90cf	a0 00		ldy #$00			ldy 	#0
.90d1					_SCCopyLoop:
.90d1	b1 36		lda ($36),y			lda 	(zTemp0),y
.90d3	f0 06		beq $90db			beq 	_SCCExit
.90d5	20 f1 ab	jsr $abf1			jsr 	StringTempWrite
.90d8	c8		iny				iny
.90d9	80 f6		bra $90d1			bra 	_SCCopyLoop
.90db					_SCCExit:
.90db	7a		ply				ply
.90dc	60		rts				rts
.90dd					_SCType:
.90dd	4c 98 a8	jmp $a898			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/divide.asm

.a2c1					IntegerDivide:
.a2c1	fa		plx				plx
.a2c2	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.a2c5	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.a2c8	0a		asl a				asl 	a 							; shift reference bit into sign bit
.a2c9	0a		asl a				asl 	a
.a2ca	10 05		bpl $a2d1			bpl 	_NotRef
.a2cc	48		pha				pha
.a2cd	20 88 94	jsr $9488			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.a2d0	68		pla				pla
.a2d1					_NotRef:
.a2d1	0a		asl a				asl 	a
.a2d2	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.a2d4	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.a2d7	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.a2da	f0 03		beq $a2df			beq 	_IntegerCode 				; if clear, then we have two integers
.a2dc	4c 98 a8	jmp $a898			jmp 	TypeError 					; anything else, type mismatch.
.a2df					_IntegerCode:
.a2df	20 01 a3	jsr $a301			jsr 	CheckDivideZero 			; do div zero check
.a2e2	20 39 a3	jsr $a339			jsr 	Int32Divide 				; do the division
.a2e5	20 f6 a3	jsr $a3f6			jsr 	CalculateSign 				; calculate result sign
.a2e8					NSMCopyPlusTwoToZero:
.a2e8	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.a2eb	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a2ee	bd 12 04	lda $0412,x			lda 	NSMantissa1+2,x
.a2f1	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a2f4	bd 1a 04	lda $041a,x			lda 	NSMantissa2+2,x
.a2f7	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.a2fa	bd 22 04	lda $0422,x			lda 	NSMantissa3+2,x
.a2fd	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.a300	60		rts				rts
.a301					CheckDivideZero:
.a301	e8		inx				inx
.a302	20 57 9b	jsr $9b57			jsr 	NSMIsZero
.a305	f0 02		beq $a309			beq 	_CDVError
.a307	ca		dex				dex
.a308	60		rts				rts
.a309					_CDVError:
.a309	a9 03		lda #$03		lda	#3
.a30b	4c 6f 8f	jmp $8f6f		jmp	ErrorHandler
.a30e					IntegerModulus:
.a30e	fa		plx				plx
.a30f	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.a312	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.a315	0a		asl a				asl 	a 							; shift reference bit into sign bit
.a316	0a		asl a				asl 	a
.a317	10 05		bpl $a31e			bpl 	_NotRef
.a319	48		pha				pha
.a31a	20 88 94	jsr $9488			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.a31d	68		pla				pla
.a31e					_NotRef:
.a31e	0a		asl a				asl 	a
.a31f	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.a321	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.a324	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.a327	f0 03		beq $a32c			beq 	_IntegerCode 				; if clear, then we have two integers
.a329	4c 98 a8	jmp $a898			jmp 	TypeError 					; anything else, type mismatch.
.a32c					_IntegerCode:
.a32c					IntegerModulusNoCheck:
.a32c	20 01 a3	jsr $a301			jsr 	CheckDivideZero 			; do div zero check
.a32f	20 39 a3	jsr $a339			jsr 	Int32Divide 				; do the division
.a332	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; clear the sign bit.
.a335	5e 00 04	lsr $0400,x			lsr 	NSStatus,x
.a338	60		rts				rts
.a339					Int32Divide:
.a339	48		pha				pha 								; save AXY
.a33a	5a		phy				phy
.a33b	20 fe 9a	jsr $9afe			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.a33e	20 23 9b	jsr $9b23			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.a341	a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.a343					_I32DivideLoop:
.a343	e8		inx				inx
.a344	e8		inx				inx
.a345	20 3c 9b	jsr $9b3c			jsr 	NSMShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.a348	ca		dex				dex
.a349	ca		dex				dex
.a34a	20 3d 9b	jsr $9b3d			jsr 	NSMRotateLeft
.a34d	20 79 a3	jsr $a379			jsr 	DivideCheckSubtract 		; check if subtract possible
.a350	90 03		bcc $a355			bcc 	_I32DivideNoCarryIn
.a352	fe 0a 04	inc $040a,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.a355					_I32DivideNoCarryIn:
.a355	88		dey				dey 								; loop round till division completed.
.a356	d0 eb		bne $a343			bne 	_I32DivideLoop
.a358	7a		ply				ply 								; restore AXY and exit
.a359	68		pla				pla
.a35a	60		rts				rts
.a35b					Int32ShiftDivide:
.a35b	48		pha				pha 								; save AY
.a35c	5a		phy				phy
.a35d	e8		inx				inx 								; clear S[X+2]
.a35e	e8		inx				inx
.a35f	20 27 9b	jsr $9b27			jsr 	NSMSetZero
.a362	ca		dex				dex
.a363	ca		dex				dex
.a364	a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.a366					_I32SDLoop:
.a366	20 79 a3	jsr $a379			jsr 	DivideCheckSubtract 		; check if subtract possible
.a369	e8		inx				inx
.a36a	e8		inx				inx
.a36b	20 3d 9b	jsr $9b3d			jsr 	NSMRotateLeft				; shift 64 bit FPA left, rotating carry in
.a36e	ca		dex				dex
.a36f	ca		dex				dex
.a370	20 3d 9b	jsr $9b3d			jsr 	NSMRotateLeft
.a373	88		dey				dey 	 							; do 31 times
.a374	d0 f0		bne $a366			bne 	_I32SDLoop
.a376	7a		ply				ply 								; restore AY and exit
.a377	68		pla				pla
.a378	60		rts				rts
.a379					DivideCheckSubtract:
.a379	20 8a 91	jsr $918a			jsr 	SubTopTwoStack 				; subtract Stack[X+1] from Stack[X+0]
.a37c	b0 04		bcs $a382			bcs 	_DCSExit 					; if carry set, then could do, exit
.a37e	20 64 91	jsr $9164			jsr 	AddTopTwoStack 				; add it back in
.a381	18		clc				clc 								; and return False
.a382					_DCSExit:
.a382	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/multiply.asm

.a383					MulInteger:
.a383	fa		plx				plx
.a384	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.a387	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.a38a	0a		asl a				asl 	a 							; shift reference bit into sign bit
.a38b	0a		asl a				asl 	a
.a38c	10 05		bpl $a393			bpl 	_NotRef
.a38e	48		pha				pha
.a38f	20 88 94	jsr $9488			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.a392	68		pla				pla
.a393					_NotRef:
.a393	0a		asl a				asl 	a 							; put MSB of type into A:7
.a394	30 0b		bmi $a3a1			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.a396	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.a399	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.a39c	f0 06		beq $a3a4			beq 	_IntegerCode 				; if clear, then we have two integers
.a39e	4c d7 a5	jmp $a5d7			jmp 	FloatingPointMultiply 							; otherwise at least one float.
.a3a1					_StringData:
.a3a1	4c a2 a8	jmp $a8a2			jmp 	NotDoneError							; at least one string - don't know both are strings.
.a3a4					_IntegerCode:
.a3a4	20 b1 a3	jsr $a3b1			jsr 	MultiplyShort
.a3a7	c9 00		cmp #$00			cmp 	#0
.a3a9	f0 05		beq $a3b0			beq 	_MIExit
.a3ab	a9 04		lda #$04		lda	#4
.a3ad	4c 6f 8f	jmp $8f6f		jmp	ErrorHandler
.a3b0					_MIExit:
.a3b0	60		rts				rts
.a3b1					MultiplyShort:
.a3b1	5a		phy				phy 								; save Y
.a3b2	20 fe 9a	jsr $9afe			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.a3b5	20 23 9b	jsr $9b23			jsr 	NSMSetZeroMantissaOnly 		; set mantissa S[X] to zero
.a3b8	a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.a3ba					_I32MLoop:
.a3ba	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.a3bd	1d 12 04	ora $0412,x			ora 	NSMantissa1+2,x
.a3c0	1d 1a 04	ora $041a,x			ora 	NSMantissa2+2,x
.a3c3	1d 22 04	ora $0422,x			ora 	NSMantissa3+2,x
.a3c6	f0 28		beq $a3f0			beq 	_I32MExit 					; exit if zero
.a3c8	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.a3cb	29 01		and #$01			and 	#1
.a3cd	f0 0e		beq $a3dd			beq 	_I32MNoAdd
.a3cf	20 64 91	jsr $9164			jsr 	AddTopTwoStack 				; if so add S[X+1] to S[X+0]
.a3d2	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.a3d5	10 06		bpl $a3dd			bpl 	_I32MNoAdd
.a3d7					_I32ShiftRight:
.a3d7	20 4a 9b	jsr $9b4a			jsr 	NSMShiftRight 				; shift S[X] right
.a3da	c8		iny				iny 								; increment shift count
.a3db	80 0a		bra $a3e7			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.a3dd					_I32MNoAdd:
.a3dd	3c 21 04	bit $0421,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.a3e0	70 f5		bvs $a3d7			bvs 	_I32ShiftRight 				; instead.
.a3e2	e8		inx				inx
.a3e3	20 3c 9b	jsr $9b3c			jsr 	NSMShiftLeft 				; shift additive S[X+1] left
.a3e6	ca		dex				dex
.a3e7					_I32MShiftUpper:
.a3e7	e8		inx				inx 								; shift S[X+2] right
.a3e8	e8		inx				inx
.a3e9	20 4a 9b	jsr $9b4a			jsr 	NSMShiftRight
.a3ec	ca		dex				dex
.a3ed	ca		dex				dex
.a3ee	80 ca		bra $a3ba			bra 	_I32MLoop 					; try again.
.a3f0					_I32MExit:
.a3f0	20 f6 a3	jsr $a3f6			jsr 	CalculateSign
.a3f3	98		tya				tya 								; shift in A
.a3f4	7a		ply				ply 								; restore Y and exit
.a3f5	60		rts				rts
.a3f6					CalculateSign:
.a3f6	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.a3f9	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; shift result left
.a3fc	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.a3ff	0a		asl a				asl 	a 							; shift bit 7 into carry
.a400	7e 00 04	ror $0400,x			ror 	NSStatus,x 					; shift right into status byte.
.a403	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/scompare.asm

.90e0					CompareStrings:
.90e0	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check both are strings
.90e3	3d 01 04	and $0401,x			and 	NSStatus+1,x
.90e6	29 10		and #$10			and 	#NSBIsString
.90e8	f0 2c		beq $9116			beq 	_CSTypeError
.90ea	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy string addresses to zTemp0/1
.90ed	85 36		sta $36				sta 	zTemp0
.90ef	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.90f2	85 37		sta $37				sta 	zTemp0+1
.90f4	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.90f7	85 38		sta $38				sta 	zTemp1
.90f9	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.90fc	85 39		sta $39				sta 	zTemp1+1
.90fe	5a		phy				phy 								; save Y so we can access strings
.90ff	a0 ff		ldy #$ff			ldy 	#$FF 						; -1 for pre increment.
.9101					_CSLoop:
.9101	c8		iny				iny
.9102	b1 36		lda ($36),y			lda 	(zTemp0),y 					; check if they are the same
.9104	d1 38		cmp ($38),y			cmp 	(zTemp1),y
.9106	d0 06		bne $910e			bne 	_CSDifferent
.9108	c9 00		cmp #$00			cmp 	#0 							; reached end ?
.910a	d0 f5		bne $9101			bne 	_CSLoop 					; still comparing
.910c					_CSExit:
.910c	7a		ply				ply 								; reached end, return zero in A from EOS
.910d	60		rts				rts
.910e					_CSDifferent:
.910e	a9 ff		lda #$ff			lda 	#255 						; if < return $FF
.9110	90 fa		bcc $910c			bcc		_CSExit
.9112	a9 01		lda #$01			lda 	#1 							; otherwise return 1.
.9114	80 f6		bra $910c			bra 	_CSExit
.9116					_CSTypeError:
.9116	4c 98 a8	jmp $a898			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/shifts.asm

.9119					ShiftLeft:
.9119	38		sec				sec
.911a	80 01		bra $911d			bra 	ShiftMain
.911c					ShiftRight:
.911c	18		clc				clc
.911d					ShiftMain:
.911d	fa		plx				plx 								; restore X
.911e	08		php				php 								; save direction
.911f	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9122	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9125	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9126	0a		asl a				asl 	a
.9127	10 05		bpl $912e			bpl 	_NotRef
.9129	48		pha				pha
.912a	20 88 94	jsr $9488			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.912d	68		pla				pla
.912e					_NotRef:
.912e	0a		asl a				asl 	a
.912f	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9131	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9134	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9137	f0 03		beq $913c			beq 	_IntegerCode 				; if clear, then we have two integers
.9139	4c 98 a8	jmp $a898			jmp 	TypeError 					; anything else, type mismatch.
.913c					_IntegerCode:
.913c	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; check number < 32
.913f	29 e0		and #$e0			and 	#$E0
.9141	1d 11 04	ora $0411,x			ora 	NSMantissa1+1,x
.9144	1d 19 04	ora $0419,x			ora 	NSMantissa2+1,x
.9147	1d 21 04	ora $0421,x			ora 	NSMantissa3+1,x
.914a	d0 13		bne $915f			bne 	_SMExit0 					; if >= 32 it will always return zero.
.914c					_SMLoop:
.914c	de 09 04	dec $0409,x			dec 	NSMantissa0+1,x 			; predecrement, could do << 0
.914f	30 11		bmi $9162			bmi 	_SMExit 					; exit if done.
.9151	28		plp				plp 								; restore direcition setting
.9152	08		php				php
.9153	90 05		bcc $915a			bcc 	_SMRight
.9155	20 3c 9b	jsr $9b3c			jsr 	NSMShiftLeft 				; shift left if CS
.9158	80 f2		bra $914c			bra 	_SMLoop
.915a					_SMRight:
.915a	20 4a 9b	jsr $9b4a			jsr 	NSMShiftRight 				; shift right if CC
.915d	80 ed		bra $914c			bra 	_SMLoop
.915f					_SMExit0:
.915f	20 27 9b	jsr $9b27			jsr 	NSMSetZero 					; return zero.
.9162					_SMExit:
.9162	28		plp				plp 								; throw direction
.9163	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/simple.asm

.9164					AddTopTwoStack:
.9164	18		clc				clc
.9165	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9168	7d 09 04	adc $0409,x			adc 		NSMantissa0+1,x
.916b	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.916e	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9171	7d 11 04	adc $0411,x			adc 		NSMantissa1+1,x
.9174	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9177	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.917a	7d 19 04	adc $0419,x			adc 		NSMantissa2+1,x
.917d	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9180	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9183	7d 21 04	adc $0421,x			adc 		NSMantissa3+1,x
.9186	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9189	60		rts				rts
.918a					SubTopTwoStack:
.918a	38		sec				sec
.918b	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.918e	fd 09 04	sbc $0409,x			sbc 		NSMantissa0+1,x
.9191	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9194	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9197	fd 11 04	sbc $0411,x			sbc 		NSMantissa1+1,x
.919a	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.919d	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.91a0	fd 19 04	sbc $0419,x			sbc 		NSMantissa2+1,x
.91a3	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.91a6	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.91a9	fd 21 04	sbc $0421,x			sbc 		NSMantissa3+1,x
.91ac	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.91af	60		rts				rts
.91b0					AddInteger:
.91b0	fa		plx				plx
.91b1	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.91b4	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.91b7	0a		asl a				asl 	a 							; shift reference bit into sign bit
.91b8	0a		asl a				asl 	a
.91b9	10 05		bpl $91c0			bpl 	_NotRef
.91bb	48		pha				pha
.91bc	20 88 94	jsr $9488			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.91bf	68		pla				pla
.91c0					_NotRef:
.91c0	0a		asl a				asl 	a 							; put MSB of type into A:7
.91c1	30 0b		bmi $91ce			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.91c3	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.91c6	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.91c9	f0 06		beq $91d1			beq 	_IntegerCode 				; if clear, then we have two integers
.91cb	4c 5f a4	jmp $a45f			jmp 	FloatingPointAdd 							; otherwise at least one float.
.91ce					_StringData:
.91ce	4c 83 90	jmp $9083			jmp 	StringConcat							; at least one string - don't know both are strings.
.91d1					_IntegerCode:
.91d1					AddCode:
.91d1	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.91d4	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.91d7	10 8b		bpl $9164			bpl 	AddTopTwoStack
.91d9	20 8a 91	jsr $918a			jsr 	SubTopTwoStack 				; do a physical subtraction
.91dc	3c 20 04	bit $0420,x			bit 	NSMantissa3,x 				; result is +ve, okay
.91df	10 09		bpl $91ea			bpl 	_AddExit
.91e1	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; sign is that of 2nd value
.91e4	9d 00 04	sta $0400,x			sta 	NSStatus,x
.91e7	20 dc 9a	jsr $9adc			jsr 	NSMNegateMantissa 			; negate the mantissa and exit
.91ea					_AddExit:
.91ea	60		rts				rts
.91eb					SubInteger:
.91eb	fa		plx				plx
.91ec	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.91ef	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.91f2	0a		asl a				asl 	a 							; shift reference bit into sign bit
.91f3	0a		asl a				asl 	a
.91f4	10 05		bpl $91fb			bpl 	_NotRef
.91f6	48		pha				pha
.91f7	20 88 94	jsr $9488			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.91fa	68		pla				pla
.91fb					_NotRef:
.91fb	0a		asl a				asl 	a 							; put MSB of type into A:7
.91fc	30 0b		bmi $9209			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.91fe	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9201	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9204	f0 06		beq $920c			beq 	_IntegerCode 				; if clear, then we have two integers
.9206	4c 64 a4	jmp $a464			jmp 	FloatingPointSub 							; otherwise at least one float.
.9209					_StringData:
.9209	4c a2 a8	jmp $a8a2			jmp 	NotDoneError							; at least one string - don't know both are strings.
.920c					_IntegerCode:
.920c	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; negate the second value.
.920f	49 80		eor #$80			eor 	#$80
.9211	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.9214	80 bb		bra $91d1			bra 	AddCode 					; and do the same code as add.
.9216					AndInteger:
.9216	fa		plx				plx
.9217	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.921a	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.921d	0a		asl a				asl 	a 							; shift reference bit into sign bit
.921e	0a		asl a				asl 	a
.921f	10 05		bpl $9226			bpl 	_NotRef
.9221	48		pha				pha
.9222	20 88 94	jsr $9488			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9225	68		pla				pla
.9226					_NotRef:
.9226	0a		asl a				asl 	a
.9227	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9229	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.922c	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.922f	f0 03		beq $9234			beq 	_IntegerCode 				; if clear, then we have two integers
.9231	4c 98 a8	jmp $a898			jmp 	TypeError 					; anything else, type mismatch.
.9234					_IntegerCode:
.9234	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9237	3d 09 04	and $0409,x			and 		NSMantissa0+1,x
.923a	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.923d	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9240	3d 11 04	and $0411,x			and 		NSMantissa1+1,x
.9243	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9246	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9249	3d 19 04	and $0419,x			and 		NSMantissa2+1,x
.924c	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.924f	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9252	3d 21 04	and $0421,x			and 		NSMantissa3+1,x
.9255	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9258	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.925b	60		rts				rts
.925c					OraInteger:
.925c	fa		plx				plx
.925d	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9260	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9263	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9264	0a		asl a				asl 	a
.9265	10 05		bpl $926c			bpl 	_NotRef
.9267	48		pha				pha
.9268	20 88 94	jsr $9488			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.926b	68		pla				pla
.926c					_NotRef:
.926c	0a		asl a				asl 	a
.926d	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.926f	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9272	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9275	f0 03		beq $927a			beq 	_IntegerCode 				; if clear, then we have two integers
.9277	4c 98 a8	jmp $a898			jmp 	TypeError 					; anything else, type mismatch.
.927a					_IntegerCode:
.927a	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.927d	1d 09 04	ora $0409,x			ora 		NSMantissa0+1,x
.9280	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9283	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9286	1d 11 04	ora $0411,x			ora 		NSMantissa1+1,x
.9289	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.928c	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.928f	1d 19 04	ora $0419,x			ora 		NSMantissa2+1,x
.9292	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9295	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9298	1d 21 04	ora $0421,x			ora 		NSMantissa3+1,x
.929b	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.929e	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.92a1	60		rts				rts
.92a2					EorInteger:
.92a2	fa		plx				plx
.92a3	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.92a6	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.92a9	0a		asl a				asl 	a 							; shift reference bit into sign bit
.92aa	0a		asl a				asl 	a
.92ab	10 05		bpl $92b2			bpl 	_NotRef
.92ad	48		pha				pha
.92ae	20 88 94	jsr $9488			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.92b1	68		pla				pla
.92b2					_NotRef:
.92b2	0a		asl a				asl 	a
.92b3	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.92b5	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.92b8	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.92bb	f0 03		beq $92c0			beq 	_IntegerCode 				; if clear, then we have two integers
.92bd	4c 98 a8	jmp $a898			jmp 	TypeError 					; anything else, type mismatch.
.92c0					_IntegerCode:
.92c0	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.92c3	5d 09 04	eor $0409,x			eor 		NSMantissa0+1,x
.92c6	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.92c9	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.92cc	5d 11 04	eor $0411,x			eor 		NSMantissa1+1,x
.92cf	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.92d2	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.92d5	5d 19 04	eor $0419,x			eor 		NSMantissa2+1,x
.92d8	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.92db	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.92de	5d 21 04	eor $0421,x			eor 		NSMantissa3+1,x
.92e1	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.92e4	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.92e7	60		rts				rts
.92e8					WordIndirect:
.92e8	fa		plx				plx
.92e9	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.92ec	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.92ef	0a		asl a				asl 	a 							; shift reference bit into sign bit
.92f0	0a		asl a				asl 	a
.92f1	10 05		bpl $92f8			bpl 	_NotRef
.92f3	48		pha				pha
.92f4	20 88 94	jsr $9488			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.92f7	68		pla				pla
.92f8					_NotRef:
.92f8	0a		asl a				asl 	a
.92f9	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.92fb	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.92fe	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9301	f0 03		beq $9306			beq 	_IntegerCode 				; if clear, then we have two integers
.9303	4c 98 a8	jmp $a898			jmp 	TypeError 					; anything else, type mismatch.
.9306					_IntegerCode:
.9306	20 d1 91	jsr $91d1			jsr 	AddCode 					; add the two values
.9309	a9 22		lda #$22			lda 	#NSBIsReference+2 			; make a 2 byte reference
.930b	9d 00 04	sta $0400,x			sta 	NSStatus,x
.930e	60		rts				rts
.930f					ByteIndirect:
.930f	fa		plx				plx
.9310	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9313	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9316	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9317	0a		asl a				asl 	a
.9318	10 05		bpl $931f			bpl 	_NotRef
.931a	48		pha				pha
.931b	20 88 94	jsr $9488			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.931e	68		pla				pla
.931f					_NotRef:
.931f	0a		asl a				asl 	a
.9320	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9322	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9325	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9328	f0 03		beq $932d			beq 	_IntegerCode 				; if clear, then we have two integers
.932a	4c 98 a8	jmp $a898			jmp 	TypeError 					; anything else, type mismatch.
.932d					_IntegerCode:
.932d	20 d1 91	jsr $91d1			jsr 	AddCode 					; add the two values
.9330	a9 21		lda #$21			lda 	#NSBIsReference+1 			; make a 1 byte reference
.9332	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9335	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/tostring.asm

.a404					ConvertInt16:
.a404	8d 08 04	sta $0408			sta 	NSMantissa0 				; set up as 32 bit conversion
.a407	8e 10 04	stx $0410			stx 	NSMantissa1
.a40a	9c 18 04	stz $0418			stz 	NSMantissa2
.a40d	9c 20 04	stz $0420			stz 	NSMantissa3
.a410	9c 00 04	stz $0400			stz 	NSStatus 					; positive integer
.a413	a2 00		ldx #$00			ldx 	#0 							; stack level
.a415	a9 0a		lda #$0a			lda 	#10 						; base
.a417	80 00		bra $a419			bra 	ConvertInt32
.a419					ConvertInt32:
.a419	5a		phy				phy
.a41a	a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.a41c	2c 00 04	bit $0400			bit 	NSStatus 					; output a - if not negative.
.a41f	10 08		bpl $a429			bpl 	_CI32NotNeg
.a421	48		pha				pha
.a422	a9 2d		lda #$2d			lda 	#'-'
.a424	99 f7 05	sta $05f7,y			sta 	NumberBuffer,y
.a427	c8		iny				iny
.a428	68		pla				pla
.a429					_CI32NotNeg:
.a429	20 37 a4	jsr $a437			jsr 	_CI32DivideConvert 			; recursive conversion
.a42c	a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.a42e	99 f7 05	sta $05f7,y			sta 	NumberBuffer,y
.a431	7a		ply				ply
.a432	a2 05		ldx #$05			ldx 	#NumberBuffer >> 8
.a434	a9 f7		lda #$f7			lda 	#NumberBuffer & $FF
.a436	60		rts				rts
.a437					_CI32DivideConvert:
.a437	e8		inx				inx 								; write to next slot up
.a438	20 29 9b	jsr $9b29			jsr 	NSMSetByte
.a43b	ca		dex				dex
.a43c	20 39 a3	jsr $a339			jsr 	Int32Divide 				; divide
.a43f	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; save remainder
.a442	48		pha				pha
.a443	20 e8 a2	jsr $a2e8			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.a446	20 57 9b	jsr $9b57			jsr 	NSMIsZero 					; is it zero ?
.a449	f0 06		beq $a451			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.a44b	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.a44e	20 37 a4	jsr $a437			jsr 	_CI32DivideConvert 			; and recusrively call.
.a451					_CI32NoRecurse:
.a451	68		pla				pla 								; remainder
.a452	c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII
.a454	90 02		bcc $a458			bcc 	_CI32NotHex
.a456	69 26		adc #$26			adc 	#6+32
.a458					_CI32NotHex:
.a458	69 30		adc #$30			adc 	#48
.a45a	99 f7 05	sta $05f7,y			sta 	NumberBuffer,y 				; write out and exit
.a45d	c8		iny				iny
.a45e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/expression.asm


;******  Processing file: ./common/expressions/../generated/precedence.dat

.9336					PrecedenceLevel:
>9336	04					.byte	 4	; $00 <<
>9337	02					.byte	 2	; $01 <=
>9338	02					.byte	 2	; $02 <>
>9339	00					.byte	 0	; $03 !!3
>933a	00					.byte	 0	; $04 ><
>933b	02					.byte	 2	; $05 >=
>933c	04					.byte	 4	; $06 >>
>933d	00					.byte	 0	; $07 !!7
>933e	00					.byte	 0	; $08 !!8
>933f	00					.byte	 0	; $09 !!9
>9340	00					.byte	 0	; $0a !!10
>9341	00					.byte	 0	; $0b !!11
>9342	00					.byte	 0	; $0c !!12
>9343	00					.byte	 0	; $0d !!13
>9344	00					.byte	 0	; $0e !!14
>9345	00					.byte	 0	; $0f !!15
>9346	00					.byte	 0	; $10 @
>9347	00					.byte	 0	; $11 !!17
>9348	00					.byte	 0	; $12 !!18
>9349	00					.byte	 0	; $13 [
>934a	04					.byte	 4	; $14 \
>934b	00					.byte	 0	; $15 ]
>934c	01					.byte	 1	; $16 ^
>934d	00					.byte	 0	; $17 _
>934e	00					.byte	 0	; $18 `
>934f	00					.byte	 0	; $19 !!25
>9350	00					.byte	 0	; $1a !!26
>9351	00					.byte	 0	; $1b {
>9352	01					.byte	 1	; $1c |
>9353	00					.byte	 0	; $1d }
>9354	00					.byte	 0	; $1e ~
>9355	00					.byte	 0	; $1f [7m<7F>[m
>9356	00					.byte	 0	; $20
>9357	05					.byte	 5	; $21 !
>9358	00					.byte	 0	; $22 "
>9359	00					.byte	 0	; $23 #
>935a	05					.byte	 5	; $24 $
>935b	04					.byte	 4	; $25 %
>935c	01					.byte	 1	; $26 &
>935d	00					.byte	 0	; $27 '
>935e	00					.byte	 0	; $28 (
>935f	00					.byte	 0	; $29 )
>9360	04					.byte	 4	; $2a *
>9361	03					.byte	 3	; $2b +
>9362	00					.byte	 0	; $2c ,
>9363	03					.byte	 3	; $2d -
>9364	00					.byte	 0	; $2e .
>9365	04					.byte	 4	; $2f /
>9366	00					.byte	 0	; $30 0
>9367	00					.byte	 0	; $31 1
>9368	00					.byte	 0	; $32 2
>9369	00					.byte	 0	; $33 3
>936a	00					.byte	 0	; $34 4
>936b	00					.byte	 0	; $35 5
>936c	00					.byte	 0	; $36 6
>936d	00					.byte	 0	; $37 7
>936e	00					.byte	 0	; $38 8
>936f	00					.byte	 0	; $39 9
>9370	00					.byte	 0	; $3a :
>9371	00					.byte	 0	; $3b ;
>9372	02					.byte	 2	; $3c <
>9373	02					.byte	 2	; $3d =
>9374	02					.byte	 2	; $3e >
>9375	05					.byte	 5	; $3f ?

;******  Return to file: ./common/expressions/expression.asm

.9376					EvaluateExpressionAt0:
.9376	a2 00		ldx #$00			ldx 	#0 							; bottom stack level
.9378					EvaluateExpression:
.9378	a9 00		lda #$00			lda 	#0 							; lowest precedence level
.937a					EvaluateExpressionAtPrecedence:
.937a	48		pha				pha 								; save precedence level
.937b	20 49 96	jsr $9649			jsr 	EvaluateTerm 				; evaluate term into level X.
.937e	68		pla				pla 								; restore precedence level.
.937f					_EXPRLoop:
.937f	85 36		sta $36				sta 	zTemp0 						; save current precedence level.
.9381	b1 30		lda ($30),y			lda 	(codePtr),y
.9383	c9 40		cmp #$40			cmp		#$40 						; if >= $40 cannot be an operator
.9385	b0 25		bcs $93ac			bcs 	_EXPRExit
.9387	da		phx				phx 								; read the operator precedence
.9388	aa		tax				tax
.9389	bd 36 93	lda $9336,x			lda 	PrecedenceLevel,x
.938c	fa		plx				plx
.938d	c9 00		cmp #$00			cmp 	#0							; if zero exit (not an operator)
.938f	f0 1b		beq $93ac			beq 	_EXPRExit
.9391	85 37		sta $37				sta 	zTemp0+1 					; save operator precedence level.
.9393	a5 36		lda $36				lda 	zTemp0 						; compare current precedence vs. operator precedence
.9395	c5 37		cmp $37				cmp 	zTemp0+1
.9397	b0 13		bcs $93ac			bcs		_EXPRExit 					; if current >= operator exit
.9399	48		pha				pha 								; save current precedence.
.939a	b1 30		lda ($30),y			lda 	(codePtr),y
.939c	c8		iny				iny
.939d	48		pha				pha
.939e	a5 37		lda $37				lda 	zTemp0+1 					; get operator precedence level
.93a0	e8		inx				inx 								; work out the right hand side.
.93a1	20 7a 93	jsr $937a			jsr 	EvaluateExpressionAtPrecedence
.93a4	ca		dex				dex
.93a5	68		pla				pla 								; get operator, call the code.
.93a6	20 af 93	jsr $93af			jsr 	_EXPRCaller
.93a9	68		pla				pla 								; restore precedence level
.93aa	80 d3		bra $937f			bra 	_EXPRLoop 					; and go round.
.93ac					_EXPRExit:
.93ac	a5 36		lda $36				lda 	zTemp0 						; A = current precedence level.
.93ae	60		rts				rts
.93af					_EXPRCaller:
.93af	da		phx				phx 								; save on stack, first thing is to restore it
.93b0	0a		asl a				asl 	a 							; double so can use vectors into X
.93b1	aa		tax				tax
.93b2	7c b6 8b	jmp ($8bb6,x)			jmp 	(VectorSetPunc,x) 			; and go to the code.

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/addsub.asm

.a45f					FloatingPointAdd:
.a45f	20 00 a6	jsr $a600			jsr 	FloatPrepare 				; prepare for floats
.a462	80 0b		bra $a46f			bra 	FloatAdd
.a464					FloatingPointSub:
.a464	20 00 a6	jsr $a600			jsr 	FloatPrepare 				; prepare for floats
.a467					FloatSubtract:
.a467	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; negate FPB
.a46a	49 80		eor #$80			eor 	#$80
.a46c	9d 01 04	sta $0401,x			sta 	NSStatus+1,x				; and fall through.
.a46f					FloatAdd:
.a46f	48		pha				pha
.a470	5a		phy				phy
.a471	20 11 a6	jsr $a611			jsr 	NSNormalise 				; normalise S[X]
.a474	f0 54		beq $a4ca			beq 	_FAReturn1
.a476	e8		inx				inx 								; normalise S[X+1]
.a477	20 11 a6	jsr $a611			jsr 	NSNormalise
.a47a	ca		dex				dex
.a47b	c9 00		cmp #$00			cmp 	#0
.a47d	f0 6f		beq $a4ee			beq 	_FAExit 					; if so, just return A
.a47f	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; are the exponents the same ?
.a482	dd 29 04	cmp $0429,x			cmp 	NSExponent+1,x
.a485	f0 1b		beq $a4a2			beq 	_FAExponentsEqual
.a487	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; work out the larger exponent
.a48a	a8		tay				tay
.a48b	38		sec				sec 								; do a signed comparison of the exponents.
.a48c	fd 29 04	sbc $0429,x			sbc 	NSExponent+1,x
.a48f	50 02		bvc $a493			bvc 	_FANoSignedChange
.a491	49 80		eor #$80			eor 	#$80
.a493					_FANoSignedChange:
.a493	29 80		and #$80			and 	#$80
.a495	10 03		bpl $a49a			bpl 	_FAHaveMax
.a497	bc 29 04	ldy $0429,x			ldy 	NSExponent+1,x
.a49a					_FAHaveMax:
.a49a	20 f1 a4	jsr $a4f1			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.a49d	e8		inx				inx
.a49e	20 f1 a4	jsr $a4f1			jsr 	_FAShiftToExponent
.a4a1	ca		dex				dex
.a4a2					_FAExponentsEqual:
.a4a2	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; are the signs the same
.a4a5	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.a4a8	30 10		bmi $a4ba			bmi 	_FADifferentSigns
.a4aa	20 64 91	jsr $9164			jsr 	AddTopTwoStack 				; do the add of the mantissae
.a4ad	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.a4b0	10 3c		bpl $a4ee			bpl 	_FAExit 					; if no, we are done.
.a4b2	20 4a 9b	jsr $9b4a			jsr 	NSMShiftRight 				; shift A right, renormalising it.
.a4b5	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; bump the exponent and exit
.a4b8	80 34		bra $a4ee			bra 	_FAExit
.a4ba					_FADifferentSigns:
.a4ba	20 8a 91	jsr $918a			jsr 	SubTopTwoStack 				; subtract mantissa B from A
.a4bd	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; is the result negative ?
.a4c0	10 2c		bpl $a4ee			bpl 	_FAExit 					; if no, we are done.
.a4c2	20 d3 9a	jsr $9ad3			jsr 	NSMNegate 					; netate result
.a4c5	20 dc 9a	jsr $9adc			jsr 	NSMNegateMantissa 			; negate (2'c) the mantissa
.a4c8	80 24		bra $a4ee			bra 	_FAExit
.a4ca					_FAReturn1:
.a4ca	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.a4cd	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a4d0	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.a4d3	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a4d6	bd 19 04	lda $0419,x			lda 	NSMantissa2+1,x
.a4d9	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.a4dc	bd 21 04	lda $0421,x			lda 	NSMantissa3+1,x
.a4df	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.a4e2	bd 29 04	lda $0429,x			lda 	NSExponent+1,x
.a4e5	9d 28 04	sta $0428,x			sta 	NSExponent,x
.a4e8	bd 01 04	lda $0401,x			lda 	NSStatus+1,x
.a4eb	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a4ee					_FAExit:
.a4ee	7a		ply				ply
.a4ef	68		pla				pla
.a4f0	60		rts				rts
.a4f1					_FAShiftToExponent:
.a4f1					_FAShiftToExponent2:
.a4f1	98		tya				tya 								; compare Y to exponent
.a4f2	dd 28 04	cmp $0428,x			cmp 	NSExponent,x 				; reached the exponent required ?
.a4f5	f0 08		beq $a4ff			beq 	_FASEExit 					; exit if so.
.a4f7	20 4a 9b	jsr $9b4a			jsr 	NSMShiftRight	 			; shift the mantissa right
.a4fa	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; increment exponent
.a4fd	80 f2		bra $a4f1			bra 	_FAShiftToExponent2
.a4ff					_FASEExit:
.a4ff	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/compare.asm

.a500					CompareFloat:
.a500	20 67 a4	jsr $a467			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.a503	bd 10 04	lda $0410,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.a506	29 f8		and #$f8			and 	#$F8
.a508	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.a50b	1d 20 04	ora $0420,x			ora 	NSMantissa3,x
.a50e	f0 09		beq $a519			beq 	_FCExit 					; zero, so approximately identical
.a510	a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.a512	3c 00 04	bit $0400,x			bit 	NSStatus,x
.a515	10 02		bpl $a519			bpl 	_FCExit
.a517					_FCNegative:
.a517	a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.a519					_FCExit:
.a519	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/divide.asm

.a51a					FDivideCommand:
.a51a	fa		plx				plx	 								; restore stack position
.a51b	20 00 a6	jsr $a600			jsr 	FloatPrepare 				; prepare for floats
.a51e					FloatDivide:
.a51e	48		pha				pha
.a51f	e8		inx				inx
.a520	20 11 a6	jsr $a611			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.a523	ca		dex				dex
.a524	c9 00		cmp #$00			cmp 	#0
.a526	f0 20		beq $a548			beq 	_FDZero
.a528	20 11 a6	jsr $a611			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.a52b	f0 19		beq $a546			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.a52d	20 5b a3	jsr $a35b			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.a530	20 e8 a2	jsr $a2e8			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.a533	20 11 a6	jsr $a611			jsr		NSNormalise 				; renormalise
.a536	20 f6 a3	jsr $a3f6			jsr 	CalculateSign 				; calculate result sign
.a539	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; calculate exponent
.a53c	38		sec				sec
.a53d	fd 29 04	sbc $0429,x			sbc 	NSExponent+1,x
.a540	38		sec				sec
.a541	e9 1e		sbc #$1e			sbc 	#30
.a543	9d 28 04	sta $0428,x			sta 	NSExponent,x
.a546					_FDExit:
.a546	68		pla				pla
.a547	60		rts				rts
.a548					_FDZero:
.a548	a9 03		lda #$03		lda	#3
.a54a	4c 6f 8f	jmp $8f6f		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/fractional.asm

.a54d					FloatFractionalPart:
.a54d	5a		phy				phy
.a54e	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; take absolute value
.a551	29 7f		and #$7f			and 	#$7F
.a553	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a556	20 11 a6	jsr $a611			jsr 	NSNormalise
.a559	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.a55c	38		sec				sec
.a55d	e9 e0		sbc #$e0			sbc 	#$E0
.a55f	90 31		bcc $a592			bcc 	_FFPExit 					; already fractional
.a561	c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.a563	b0 2a		bcs $a58f			bcs 	_FFPZero
.a565	a8		tay				tay 								; put count to do in Y
.a566	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; do each in turn.
.a569	20 94 a5	jsr $a594			jsr 	_FFPPartial
.a56c	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.a56f	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.a572	20 94 a5	jsr $a594			jsr 	_FFPPartial
.a575	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.a578	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a57b	20 94 a5	jsr $a594			jsr 	_FFPPartial
.a57e	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a581	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.a584	20 94 a5	jsr $a594			jsr 	_FFPPartial
.a587	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a58a	20 57 9b	jsr $9b57			jsr 	NSMIsZero 					; zeroed check.
.a58d	d0 03		bne $a592			bne 	_FFPExit
.a58f					_FFPZero:
.a58f	20 27 9b	jsr $9b27			jsr 	NSMSetZero
.a592					_FFPExit:
.a592	7a		ply				ply
.a593	60		rts				rts
.a594					_FFPPartial:
.a594	c0 00		cpy #$00			cpy 	#0 							; no more to do
.a596	f0 17		beq $a5af			beq 	_FFFPPExit
.a598	c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.a59a	b0 0c		bcs $a5a8			bcs 	_FFFPPWholeByte
.a59c	5a		phy				phy
.a59d					_FFFPPLeft:
.a59d	0a		asl a				asl 	a
.a59e	88		dey				dey
.a59f	d0 fc		bne $a59d			bne 	_FFFPPLeft
.a5a1	7a		ply				ply
.a5a2					_FFFPPRight:
.a5a2	4a		lsr a				lsr 	a
.a5a3	88		dey				dey
.a5a4	d0 fc		bne $a5a2			bne 	_FFFPPRight
.a5a6	80 07		bra $a5af			bra 	_FFFPPExit
.a5a8					_FFFPPWholeByte:
.a5a8	98		tya				tya 								; subtract 8 from count
.a5a9	38		sec				sec
.a5aa	e9 08		sbc #$08			sbc 	#8
.a5ac	a8		tay				tay
.a5ad	a9 00		lda #$00			lda 	#0 							; and clear all
.a5af					_FFFPPExit:
.a5af	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/integer.asm

.a5b0					FloatIntegerPart:
.a5b0	48		pha				pha
.a5b1	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; is it integer already ?
.a5b4	f0 1f		beq $a5d5			beq 	_FIPExit 					; if so do nothing
.a5b6	20 57 9b	jsr $9b57			jsr 	NSMIsZero 					; is it zero ?
.a5b9	f0 17		beq $a5d2			beq 	_FIPZero 					; if so return zero.
.a5bb	20 11 a6	jsr $a611			jsr 	NSNormalise 				; normalise
.a5be	f0 12		beq $a5d2			beq 	_FIPZero 					; normalised to zero, exit zero
.a5c0					_FIPShift:
.a5c0	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.a5c3	10 08		bpl $a5cd			bpl 	_FIPCheckZero
.a5c5	20 4a 9b	jsr $9b4a			jsr 	NSMShiftRight 				; shift mantissa right
.a5c8	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; bump exponent
.a5cb	80 f3		bra $a5c0			bra 	_FIPShift
.a5cd					_FIPCheckZero:
.a5cd	20 57 9b	jsr $9b57			jsr 	NSMIsZero 					; avoid -0 problem
.a5d0	d0 03		bne $a5d5			bne 	_FIPExit 					; set to zero if mantissa zero.
.a5d2					_FIPZero:
.a5d2	20 27 9b	jsr $9b27			jsr 	NSMSetZero
.a5d5					_FIPExit:
.a5d5	68		pla				pla
.a5d6	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/multiply.asm

.a5d7					FloatingPointMultiply:
.a5d7	20 00 a6	jsr $a600			jsr 	FloatPrepare 				; prepare for floats
.a5da					FloatMultiply:
.a5da	48		pha				pha
.a5db	20 11 a6	jsr $a611			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.a5de	f0 1b		beq $a5fb			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.a5e0	e8		inx				inx
.a5e1	20 11 a6	jsr $a611			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.a5e4	ca		dex				dex
.a5e5	c9 00		cmp #$00			cmp 	#0
.a5e7	f0 0f		beq $a5f8			beq 	_FDSetZero
.a5e9	20 b1 a3	jsr $a3b1			jsr 	MultiplyShort 				; calculate the result.
.a5ec	7d 28 04	adc $0428,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.a5ef	18		clc				clc
.a5f0	7d 29 04	adc $0429,x			adc 	NSExponent+1,x
.a5f3	9d 28 04	sta $0428,x			sta 	NSExponent,x
.a5f6	80 03		bra $a5fb			bra 	_FDExit
.a5f8					_FDSetZero:
.a5f8	20 27 9b	jsr $9b27			jsr 	NSMSetZero 					; return 0
.a5fb					_FDExit:
.a5fb	20 11 a6	jsr $a611			jsr 	NSNormalise 				; normalise the result
.a5fe	68		pla				pla
.a5ff	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/utility.asm

.a600					FloatPrepare:
.a600	20 88 94	jsr $9488			jsr 	DereferenceTopTwo 			; dereference the top two values
.a603	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check ints/floats
.a606	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.a609	29 10		and #$10			and 	#NSBIsString
.a60b	d0 01		bne $a60e			bne 	_FDType
.a60d	60		rts				rts
.a60e					_FDType:
.a60e	4c 98 a8	jmp $a898			jmp 	TypeError
.a611					NSNormalise:
.a611	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; make float, keep sign
.a614	29 80		and #$80			and 	#$80
.a616	09 08		ora #$08			ora 	#NSTFloat
.a618	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a61b	20 57 9b	jsr $9b57			jsr 	NSMIsZero 					; if zero exit
.a61e	d0 09		bne $a629			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.a620	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; clear the sign bit.
.a623	7e 00 04	ror $0400,x			ror 	NSStatus,x 					; (no -0)
.a626	a9 00		lda #$00			lda 	#0 							; set Z flag
.a628	60		rts				rts
.a629					_NSNormaliseOptimise:
.a629	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; upper byte zero ?
.a62c	d0 22		bne $a650			bne 	_NSNormaliseLoop
.a62e	bd 18 04	lda $0418,x			lda 	NSMantissa2,x 				; byte normalise
.a631	30 1d		bmi $a650			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.a633	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.a636	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a639	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.a63c	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.a63f	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a642	9e 08 04	stz $0408,x			stz 	NSMantissa0,x
.a645	bd 28 04	lda $0428,x			lda 	NSExponent,x
.a648	38		sec				sec
.a649	e9 08		sbc #$08			sbc 	#8
.a64b	9d 28 04	sta $0428,x			sta 	NSExponent,x
.a64e	80 d9		bra $a629			bra 	_NSNormaliseOptimise
.a650					_NSNormaliseLoop:
.a650	3c 20 04	bit $0420,x			bit 	NSMantissa3,x 				; bit 30 set ?
.a653	70 08		bvs $a65d			bvs 	_NSNExit 					; exit if so with Z flag clear
.a655	20 3c 9b	jsr $9b3c			jsr 	NSMShiftLeft 				; shift mantissa left
.a658	de 28 04	dec $0428,x			dec 	NSExponent,x 				; adjust exponent
.a65b	80 f3		bra $a650			bra 	_NSNormaliseLoop
.a65d					_NSNExit:
.a65d	a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.a65f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignnumber.asm

.93b5					AssignNumber:
.93b5	5a		phy				phy
.93b6	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy mantissa0/1 to zTemp0
.93b9	85 36		sta $36				sta 	zTemp0
.93bb	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.93be	85 37		sta $37				sta 	zTemp0+1
.93c0	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; clear reference bits
.93c3	29 df		and #$df			and 	#(NSBIsReference ^ $FF)
.93c5	9d 00 04	sta $0400,x			sta 	NSStatus,x
.93c8	29 18		and #$18			and 	#NSBTypeMask				; assigning to a float ?
.93ca	c9 08		cmp #$08			cmp 	#NSTFloat
.93cc	f0 2a		beq $93f8			beq 	_ANFloat
.93ce	bd 29 04	lda $0429,x			lda		NSExponent+1,x 				; is it a float
.93d1	f0 05		beq $93d8			beq		_ANNotFloat
.93d3	e8		inx				inx
.93d4	20 b0 a5	jsr $a5b0			jsr 	FloatIntegerPart 			; make it an integer
.93d7	ca		dex				dex
.93d8					_ANNotFloat:
.93d8	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if byte/word reference.
.93db	29 03		and #$03			and 	#3
.93dd	d0 05		bne $93e4			bne 	_ANByteWord
.93df	20 04 94	jsr $9404			jsr 	_ANCopy4PackSign 			; copy all 4 bytes and sign
.93e2	80 1e		bra $9402			bra 	_ANExit
.93e4					_ANByteWord:
.93e4	48		pha				pha 								; save count
.93e5	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; do byte
.93e8	92 36		sta ($36)			sta 	(zTemp0)
.93ea	68		pla				pla
.93eb	c9 01		cmp #$01			cmp	 	#1
.93ed	f0 13		beq $9402			beq 	_ANExit
.93ef	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x 			; do word
.93f2	a0 01		ldy #$01			ldy 	#1
.93f4	91 36		sta ($36),y			sta 	(zTemp0),y
.93f6	80 0a		bra $9402			bra 	_ANExit
.93f8					_ANFloat:
.93f8	20 04 94	jsr $9404			jsr 	_ANCopy4PackSign 			; write all 4 bytes and packed sign
.93fb	bd 29 04	lda $0429,x			lda 	NSExponent+1,x 				; copy exponent to slot 4
.93fe	a0 04		ldy #$04			ldy 	#4
.9400	91 36		sta ($36),y			sta 	(zTemp0),y
.9402					_ANExit:
.9402	7a		ply				ply
.9403	60		rts				rts
.9404					_ANCopy4PackSign:
.9404	a0 03		ldy #$03			ldy 	#3
.9406	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; sign bit into status
.9409	29 80		and #$80			and 	#$80 						; put into high bit of mantissa 3
.940b	1d 21 04	ora $0421,x			ora 	NSMantissa3+1,x
.940e	91 36		sta ($36),y			sta 	(zTemp0),y
.9410	88		dey				dey
.9411	bd 19 04	lda $0419,x			lda 	NSMantissa2+1,x
.9414	91 36		sta ($36),y			sta 	(zTemp0),y
.9416	88		dey				dey
.9417	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.941a	91 36		sta ($36),y			sta 	(zTemp0),y
.941c	88		dey				dey
.941d	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.9420	91 36		sta ($36),y			sta 	(zTemp0),y
.9422	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignstring.asm

.9423					AssignString:
.9423	5a		phy				phy
.9424	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.9427	85 38		sta $38				sta 	zTemp1
.9429	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.942c	85 39		sta $39				sta 	zTemp1+1
.942e	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9431	85 36		sta $36				sta 	zTemp0
.9433	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9436	85 37		sta $37				sta 	zTemp0+1
.9438	a0 01		ldy #$01			ldy 	#1 							; the high byte of the target address
.943a	b1 36		lda ($36),y			lda 	(zTemp0),y
.943c	f0 23		beq $9461			beq 	_ASNewStringRequired 		; if zero, a new string is required.
.943e	38		sec				sec 								; put Address-2 in zsTemp - this is the size/status/string record
.943f	b2 36		lda ($36)			lda 	(zTemp0) 					; of concreted strings
.9441	e9 02		sbc #$02			sbc 	#2
.9443	85 3c		sta $3c				sta 	zsTemp
.9445	a0 01		ldy #$01			ldy 	#1
.9447	b1 36		lda ($36),y			lda 	(zTemp0),y
.9449	e9 00		sbc #$00			sbc 	#0
.944b	85 3d		sta $3d				sta 	zsTemp+1
.944d	a0 ff		ldy #$ff			ldy 	#$FF 						; get length of new string
.944f					_ASGetLength:
.944f	c8		iny				iny
.9450	b1 38		lda ($38),y			lda 	(zTemp1),y
.9452	d0 fb		bne $944f			bne 	_ASGetLength
.9454	98		tya				tya 								; is this length <= current length
.9455	d2 3c		cmp ($3c)			cmp 	(zsTemp)
.9457	90 20		bcc $9479			bcc 	_ASCopyString
.9459	f0 1e		beq $9479			beq 	_ASCopyString
.945b	a9 80		lda #$80			lda 	#$80 						; mark as unused.
.945d	a0 01		ldy #$01			ldy 	#1
.945f	91 3c		sta ($3c),y			sta 	(zsTemp),y
.9461					_ASNewStringRequired:
.9461	e8		inx				inx 								; concrete the new string.
.9462	20 32 ab	jsr $ab32			jsr 	StringConcrete				; (breaks zTemp1/2, not zTemp0 and zsTemp)
.9465	ca		dex				dex
.9466	18		clc				clc
.9467	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; copy that new address to the reference.
.946a	69 02		adc #$02			adc 	#2 							; add two to point at the data.
.946c	92 36		sta ($36)			sta 	(zTemp0)
.946e	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9471	69 00		adc #$00			adc 	#0
.9473	a0 01		ldy #$01			ldy 	#1
.9475	91 36		sta ($36),y			sta 	(zTemp0),y
.9477	80 0d		bra $9486			bra 	_ASExit
.9479					_ASCopyString:
.9479	a0 00		ldy #$00			ldy 	#0
.947b					_ASCopyLoop:
.947b	b1 38		lda ($38),y			lda 	(zTemp1),y
.947d	c8		iny				iny
.947e	c8		iny				iny
.947f	91 3c		sta ($3c),y			sta 	(zsTemp),y
.9481	88		dey				dey
.9482	c9 00		cmp #$00			cmp 	#0
.9484	d0 f5		bne $947b			bne 	_ASCopyLoop
.9486					_ASExit:
.9486	7a		ply				ply
.9487	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/dereference.asm

.9488					DereferenceTopTwo:
.9488	e8		inx				inx
.9489	20 8d 94	jsr $948d			jsr 	Dereference 				; deref x+1
.948c	ca		dex				dex  								; falls through to deref x
.948d					Dereference:
.948d	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get the status byte
.9490	29 20		and #$20			and 	#NSBIsReference 			; shift sign bit to carry, reference to bit 7
.9492	f0 57		beq $94eb			beq 	_DRFExit 					; not a reference
.9494	5a		phy				phy
.9495	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address to dereference into zTemp0
.9498	85 36		sta $36				sta 	zTemp0
.949a	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.949d	85 37		sta $37				sta 	zTemp0+1
.949f	9e 10 04	stz $0410,x			stz 	NSMantissa1,x 				; clear second byte.
.94a2	b2 36		lda ($36)			lda 	(zTemp0) 					; do the first byte
.94a4	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.94a7	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get status byte.
.94aa	29 18		and #$18			and 	#NSBTypeMask 				; what type is it ?
.94ac	c9 10		cmp #$10			cmp 	#NSTString 					; if string, dereference two
.94ae	f0 0f		beq $94bf			beq 	_DRFDereferenceTwo
.94b0	c9 08		cmp #$08			cmp 	#NSTFloat 					; if float, do full dereference.
.94b2	f0 39		beq $94ed			beq 	_DRFFull
.94b4	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be integer - how many bytes ?
.94b7	29 03		and #$03			and 	#3
.94b9	f0 32		beq $94ed			beq 	_DRFFull 					; the whole word
.94bb	c9 01		cmp #$01			cmp 	#1 							; is it 10 (e.g. 2 bytes)
.94bd	f0 07		beq $94c6			beq		_DRFClear23 				; no, one byte, clear 2 & 3 and exit
.94bf					_DRFDereferenceTwo:
.94bf	a0 01		ldy #$01			ldy 	#1
.94c1	b1 36		lda ($36),y			lda 	(zTemp0),y
.94c3	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.94c6					_DRFClear23:
.94c6	9e 18 04	stz $0418,x			stz 	NSMantissa2,x 				; clear upper bytes, only read 1 or 2 bytes
.94c9	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.94cc	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; make it a value of that type.
.94cf	29 18		and #$18			and 	#NSBTypeMask
.94d1	9d 00 04	sta $0400,x			sta 	NSStatus,x
.94d4	c9 10		cmp #$10			cmp 	#NSTString  				; is it a string
.94d6	d0 12		bne $94ea			bne 	_DRFNotString
.94d8	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; check address is zero
.94db	1d 10 04	ora $0410,x			ora 	NSMantissa1,x
.94de	d0 0a		bne $94ea			bne 	_DRFNotString
.94e0	a9 ec		lda #$ec			lda 	#_DRFNullString & $FF 		; if so, return reference to ""
.94e2	9d 08 04	sta $0408,x			sta 	NSMantissa0,X
.94e5	a9 94		lda #$94			lda 	#_DRFNullString >> 8
.94e7	9d 10 04	sta $0410,x			sta 	NSMantissa1,X
.94ea					_DRFNotString
.94ea	7a		ply				ply 								; restore Y and exit
.94eb					_DRFExit:
.94eb	60		rts				rts
.94ec					_DRFNullString:
>94ec	00						.byte 	0
.94ed					_DRFFull:
.94ed	a0 01		ldy #$01			ldy 	#1 							; get remaining 3 bytes.
.94ef	b1 36		lda ($36),y			lda 	(zTemp0),y
.94f1	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.94f4	c8		iny				iny
.94f5	b1 36		lda ($36),y			lda 	(zTemp0),y
.94f7	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.94fa	c8		iny				iny
.94fb	b1 36		lda ($36),y			lda 	(zTemp0),y
.94fd	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9500	9e 28 04	stz $0428,x			stz 	NSExponent,x 				; clear exponent.
.9503	bd 00 04	lda $0400,x			lda		NSStatus,x 					; see if type is integer
.9506	29 18		and #$18			and 	#NSBTypeMask  				; type information only
.9508	9d 00 04	sta $0400,x			sta 	NSStatus,x 					; update it back.
.950b	f0 06		beq $9513			beq 	_DRFNoExponent
.950d	c8		iny				iny 								; if not, read the exponent as well.
.950e	b1 36		lda ($36),y			lda 	(zTemp0),y
.9510	9d 28 04	sta $0428,x			sta 	NSExponent,x
.9513					_DRFNoExponent:
.9513	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; is the most significant bit set ?
.9516	10 0d		bpl $9525			bpl 	_DRFExit2 					; if not, then exit.
.9518	29 7f		and #$7f			and 	#$7F 						; clear that bit.
.951a	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.951d	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; set the sign flag
.9520	09 80		ora #$80			ora 	#NSBIsNegative
.9522	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9525					_DRFExit2:
.9525	7a		ply				ply
.9526	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/number.asm

=1					ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2					ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3					ESTA_Decimal = 3 							; fractional part.
.9527					EncodeNumberStart:
.9527	38		sec				sec
.9528	80 01		bra $952b			bra 	EncodeNumberContinue+1
.952a					EncodeNumberContinue:
.952a	18		clc				clc
.952b					EncodeNumber:
.952b	08		php				php 								; save reset.
.952c	c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.952e	f0 12		beq $9542			beq 	_ENIsOkay
.9530	c9 30		cmp #$30			cmp 	#"0"
.9532	90 04		bcc $9538			bcc 	_ENBadNumber
.9534	c9 3a		cmp #$3a			cmp 	#"9"+1
.9536	90 0a		bcc $9542			bcc 	_ENIsOkay
.9538					_ENBadNumber:
.9538	28		plp				plp 								; throw saved reset
.9539	ad 85 04	lda $0485			lda 	EncodeState 				; decimal mode, construct final number
.953c	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.953e	f0 7e		beq $95be			beq 	_ENConstructFinal
.9540					_ENFail:
.9540	18		clc				clc 								; not allowed
.9541	60		rts				rts
.9542					_ENIsOkay:
.9542	28		plp				plp 								; are we restarting
.9543	90 15		bcc $955a			bcc 	_ENNoRestart
.9545					_ENStartEncode:
.9545	c9 2e		cmp #$2e			cmp 	#'.'						; first is DP
.9547	f0 0c		beq $9555			beq 	_ENFirstDP
.9549	29 0f		and #$0f			and 	#15 						; put digit in mantissa
.954b	20 29 9b	jsr $9b29			jsr 	NSMSetByte
.954e	a9 01		lda #$01			lda 	#ESTA_Low
.9550					_ENExitChange:
.9550	8d 85 04	sta $0485			sta 	EncodeState 				; save new state
.9553	38		sec				sec
.9554	60		rts				rts
.9555					_ENFirstDP:
.9555	20 27 9b	jsr $9b27			jsr 	NSMSetZero 					; clear integer part
.9558	80 3f		bra $9599			bra 	_ESTASwitchFloat			; go straight to float and exi
.955a					_ENNoRestart:
.955a	48		pha				pha 								; save on stack.
.955b	ad 85 04	lda $0485			lda 	EncodeState 				; get current state
.955e	c9 01		cmp #$01			cmp 	#ESTA_Low
.9560	f0 09		beq $956b			beq  	_ESTALowState
.9562	c9 02		cmp #$02			cmp 	#ESTA_High
.9564	f0 29		beq $958f			beq 	_ESTAHighState
.9566	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.9568	f0 3b		beq $95a5			beq 	_ESTADecimalState
>956a	db						.byte 	$DB 						; causes a break in the emulator
.956b					_ESTALowState:
.956b	68		pla				pla 								; get value back
.956c	c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.956e	f0 29		beq $9599			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.9570	29 0f		and #$0f			and 	#15 						; make digit
.9572	8d 86 04	sta $0486			sta 	DigitTemp 					; save it.
.9575	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.9578	0a		asl a				asl 	a
.9579	0a		asl a				asl 	a
.957a	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.957d	0a		asl a				asl 	a
.957e	6d 86 04	adc $0486			adc 	DigitTemp
.9581	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9584	c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.9586	90 05		bcc $958d			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.9588	a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.958a	8d 85 04	sta $0485			sta 	EncodeState
.958d					_ESTANoSwitch:
.958d	38		sec				sec
.958e	60		rts				rts
.958f					_ESTAHighState:
.958f	68		pla				pla 								; get value back
.9590	c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.9592	f0 05		beq $9599			beq 	_ESTASwitchFloat
.9594	20 f8 95	jsr $95f8			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.9597	38		sec				sec
.9598	60		rts				rts
.9599					_ESTASwitchFloat:
.9599	9c 87 04	stz $0487			stz 	DecimalCount
.959c	e8		inx				inx 								; zero the decimal additive.
.959d	20 27 9b	jsr $9b27			jsr 	NSMSetZero
.95a0	ca		dex				dex
.95a1	a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.95a3	80 ab		bra $9550			bra 	_ENExitChange
.95a5					_ESTADecimalState:
.95a5	68		pla				pla 								; digit.
.95a6	c9 2e		cmp #$2e			cmp 	#"." 						; fail on 2nd decimal point.
.95a8	f0 96		beq $9540			beq 	_ENFail
.95aa	e8		inx				inx 								; put digit into fractional part of X+1
.95ab	20 f8 95	jsr $95f8			jsr 	ESTAShiftDigitIntoMantissa
.95ae	ca		dex				dex
.95af	ee 87 04	inc $0487			inc 	DecimalCount 				; bump the count of decimals
.95b2	ad 87 04	lda $0487			lda 	DecimalCount
.95b5	c9 0b		cmp #$0b			cmp 	#11
.95b7	f0 02		beq $95bb			beq 	_ESTADSFail
.95b9	38		sec				sec
.95ba	60		rts				rts
.95bb					_ESTADSFail:
.95bb	4c 93 a8	jmp $a893			jmp 	RangeError
.95be					_ENConstructFinal:
.95be	ad 87 04	lda $0487			lda 	DecimalCount 				; get decimal count
.95c1	f0 33		beq $95f6			beq 	_ENCFExit 					; no decimals
.95c3	5a		phy				phy
.95c4	0a		asl a				asl 	a 							; x 4 and CLC
.95c5	0a		asl a				asl 	a
.95c6	6d 87 04	adc $0487			adc 	DecimalCount
.95c9	a8		tay				tay
.95ca	b9 52 a8	lda $a852,y			lda 	DecimalScalarTable-5,y 		; copy decimal scalar to X+2
.95cd	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.95d0	b9 53 a8	lda $a853,y			lda 	DecimalScalarTable-5+1,y
.95d3	9d 12 04	sta $0412,x			sta 	NSMantissa1+2,x
.95d6	b9 54 a8	lda $a854,y			lda 	DecimalScalarTable-5+2,y
.95d9	9d 1a 04	sta $041a,x			sta 	NSMantissa2+2,x
.95dc	b9 55 a8	lda $a855,y			lda 	DecimalScalarTable-5+3,y
.95df	9d 22 04	sta $0422,x			sta 	NSMantissa3+2,x
.95e2	b9 56 a8	lda $a856,y			lda 	DecimalScalarTable-5+4,y
.95e5	9d 2a 04	sta $042a,x			sta 	NSExponent+2,x
.95e8	a9 08		lda #$08			lda 	#NSTFloat
.95ea	9d 02 04	sta $0402,x			sta 	NSStatus+2,x
.95ed	7a		ply				ply
.95ee	e8		inx				inx 								; multiply decimal const by decimal scalar
.95ef	20 da a5	jsr $a5da			jsr 	FloatMultiply
.95f2	ca		dex				dex
.95f3	20 6f a4	jsr $a46f			jsr 	FloatAdd 					; add to integer part.
.95f6					_ENCFExit:
.95f6	18		clc				clc 								; reject the digit.
.95f7	60		rts				rts
.95f8					ESTAShiftDigitIntoMantissa:
.95f8	29 0f		and #$0f			and 	#15 						; save digit
.95fa	48		pha				pha
.95fb	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; push mantissa on stack
.95fe	48		pha				pha
.95ff	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.9602	48		pha				pha
.9603	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9606	48		pha				pha
.9607	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.960a	48		pha				pha
.960b	20 3c 9b	jsr $9b3c			jsr 	NSMShiftLeft 				; x 2
.960e	20 3c 9b	jsr $9b3c			jsr 	NSMShiftLeft 				; x 4
.9611	18		clc				clc 								; pop mantissa and add
.9612	68		pla				pla
.9613	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.9616	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9619	68		pla				pla
.961a	7d 10 04	adc $0410,x			adc 	NSMantissa1,x
.961d	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9620	68		pla				pla
.9621	7d 18 04	adc $0418,x			adc 	NSMantissa2,x
.9624	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9627	68		pla				pla
.9628	7d 20 04	adc $0420,x			adc 	NSMantissa3,x
.962b	9d 20 04	sta $0420,x			sta 	NSMantissa3,x 				; x 5
.962e	20 3c 9b	jsr $9b3c			jsr 	NSMShiftLeft 				; x 10
.9631	68		pla				pla 								; add digit
.9632	18		clc				clc
.9633	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.9636	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9639	90 0d		bcc $9648			bcc 	_ESTASDExit
.963b	fe 10 04	inc $0410,x			inc 	NSMantissa1,x
.963e	d0 08		bne $9648			bne 	_ESTASDExit
.9640	fe 18 04	inc $0418,x			inc 	NSMantissa2,x
.9643	d0 03		bne $9648			bne 	_ESTASDExit
.9645	fe 20 04	inc $0420,x			inc 	NSMantissa3,x
.9648					_ESTASDExit:
.9648	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/term.asm

.9649					EvaluateTerm:
.9649	b1 30		lda ($30),y			lda 	(codePtr),y
.964b	30 18		bmi $9665			bmi 	_ETCheckUnary 				; unary function ? (text ones)
.964d	c9 40		cmp #$40			cmp 	#$40 						; 40-7F => identifier reference
.964f	b0 6f		bcs $96c0			bcs 	_ETVariable
.9651	c9 30		cmp #$30			cmp 	#'0' 						; is it a number
.9653	90 6e		bcc $96c3			bcc 	_ETPuncUnary 				; if not it might be a punctuation unary.
.9655	c9 3a		cmp #$3a			cmp 	#'9'+1
.9657	b0 6a		bcs $96c3			bcs 	_ETPuncUnary
.9659	20 27 95	jsr $9527			jsr 	EncodeNumberStart 			; can't fail as it's 0-9 !
.965c					_ETNumber:
.965c	c8		iny				iny 								; keep encoding until we have the numbers
.965d	b1 30		lda ($30),y			lda 	(codePtr),y
.965f	20 2a 95	jsr $952a			jsr 	EncodeNumberContinue
.9662	b0 f8		bcs $965c			bcs 	_ETNumber 					; go back if accepted.
.9664	60		rts				rts
.9665					_ETCheckUnary:
.9665	c9 ff		cmp #$ff			cmp 	#KWC_STRING 				; string token
.9667	f0 41		beq $96aa			beq 	_ETString
.9669	c9 fe		cmp #$fe			cmp 	#KWC_HEXCONST 				; hex constant.
.966b	f0 12		beq $967f			beq 	_ETHexConstant
.966d	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; check it actually is a unary function
.966f	90 0b		bcc $967c			bcc 	_ETSyntaxError
.9671	c9 97		cmp #$97			cmp 	#KWC_LAST_UNARY+1
.9673	b0 07		bcs $967c			bcs 	_ETSyntaxError
.9675	da		phx				phx 								; push X on the stack
.9676	0a		asl a				asl 	a 							; put vector x 2 into X
.9677	aa		tax				tax
.9678	c8		iny				iny 								; consume unary function token
.9679	7c 36 8c	jmp ($8c36,x)			jmp 	(VectorSet0,x) 				; and do it.
.967c					_ETSyntaxError:
.967c	4c 8e a8	jmp $a88e			jmp 	SyntaxError
.967f					_ETHexConstant:
.967f	c8		iny				iny 								; skip #
.9680	c8		iny				iny 								; skip count
.9681	20 27 9b	jsr $9b27			jsr 	NSMSetZero 					; clear result
.9684					_ETHLoop:
.9684	b1 30		lda ($30),y			lda 	(codePtr),y
.9686	c8		iny				iny 								; and consume
.9687	c9 00		cmp #$00			cmp 	#0 							; exit if zero
.9689	f0 1e		beq $96a9			beq 	_ETHExit
.968b	48		pha				pha 								; save on stack.
.968c	20 3c 9b	jsr $9b3c			jsr 	NSMShiftLeft 				; x 2
.968f	20 3c 9b	jsr $9b3c			jsr 	NSMShiftLeft 				; x 4
.9692	20 3c 9b	jsr $9b3c			jsr 	NSMShiftLeft 				; x 8
.9695	20 3c 9b	jsr $9b3c			jsr 	NSMShiftLeft 				; x 16
.9698	68		pla				pla 								; ASCII
.9699	c9 41		cmp #$41			cmp 	#'A'
.969b	90 02		bcc $969f			bcc 	_ETHNotChar
.969d	e9 07		sbc #$07			sbc 	#7
.969f					_ETHNotChar:
.969f	29 0f		and #$0f			and 	#15 						; digit now
.96a1	1d 08 04	ora $0408,x			ora 	NSMantissa0,x 				; put in LS Nibble
.96a4	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.96a7	80 db		bra $9684			bra 	_ETHLoop 					; go round.
.96a9					_ETHExit:
.96a9	60		rts				rts
.96aa					_ETString:
.96aa	c8		iny				iny 								; look at length
.96ab	b1 30		lda ($30),y			lda 	(codePtr),y
.96ad	48		pha				pha
.96ae	c8		iny				iny 								; first character
.96af	20 71 9b	jsr $9b71			jsr 	MemoryInline 				; put address of string at (code-Ptr),y on stack
.96b2	68		pla				pla 								; restore count and save
.96b3	85 36		sta $36				sta 	zTemp0
.96b5	98		tya				tya 								; add length to Y to skip it.
.96b6	18		clc				clc
.96b7	65 36		adc $36				adc 	zTemp0
.96b9	a8		tay				tay
.96ba	a9 10		lda #$10			lda 	#NSTString 					; mark as string
.96bc	9d 00 04	sta $0400,x			sta 	NSStatus,x
.96bf	60		rts				rts
.96c0					_ETVariable:
.96c0	4c 1a 97	jmp $971a			jmp 	VariableHandler
.96c3					_ETPuncUnary:
.96c3	c8		iny				iny 								; consume the unary character
.96c4	c9 2d		cmp #$2d			cmp 	#KWD_MINUS 					; unary minus
.96c6	f0 2d		beq $96f5			beq 	_ETUnaryNegate
.96c8	c9 10		cmp #$10			cmp 	#KWD_AT 					; @ reference -> constant
.96ca	f0 39		beq $9705			beq 	_ETDereference
.96cc	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; parenthesis
.96ce	f0 43		beq $9713			beq 	_ETParenthesis
.96d0	64 36		stz $36				stz 	zTemp0 						; zTemp0 is the indirection level.
.96d2	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; byte indirection (0) ?
.96d4	f0 06		beq $96dc			beq 	_ETIndirection
.96d6	e6 36		inc $36				inc 	zTemp0
.96d8	c9 21		cmp #$21			cmp 	#KWD_PLING					; word indirection (1) \
.96da	d0 a0		bne $967c			bne 	_ETSyntaxError
.96dc					_ETIndirection:
.96dc	a5 36		lda $36				lda 	zTemp0 						; push indirection amount (0-1) => (1-2) on the stack
.96de	1a		inc a				inc 	a
.96df	48		pha				pha
.96e0	20 49 96	jsr $9649			jsr 	EvaluateTerm				; evaluate the term
.96e3	20 8d 94	jsr $948d			jsr 	Dereference 				; dereference it.
.96e6	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a +ve integer.
.96e9	d0 07		bne $96f2			bne 	_ETTypeMismatch
.96eb	68		pla				pla 								; indirection 1-2
.96ec	09 20		ora #$20			ora 	#NSBIsReference 			; make it a reference.
.96ee	9d 00 04	sta $0400,x			sta 	NSStatus,x
.96f1	60		rts				rts
.96f2					_ETTypeMismatch:
.96f2	4c 98 a8	jmp $a898			jmp 	TypeError
.96f5					_ETUnaryNegate:
.96f5	20 49 96	jsr $9649			jsr 	EvaluateTerm				; evaluate the term
.96f8	20 8d 94	jsr $948d			jsr 	Dereference 				; dereference it.
.96fb	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a number
.96fe	29 10		and #$10			and 	#NSTString
.9700	d0 f0		bne $96f2			bne 	_ETTypeMismatch
.9702	4c d3 9a	jmp $9ad3			jmp 	NSMNegate  					; just toggles the sign bit.
.9705					_ETDereference:
.9705	20 49 96	jsr $9649			jsr 	EvaluateTerm				; evaluate the term
.9708	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a reference
.970b	29 20		and #$20			and 	#NSBIsReference
.970d	f0 e3		beq $96f2			beq 	_ETTypeMismatch
.970f	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; make it an integer address
.9712	60		rts				rts
.9713					_ETParenthesis:
.9713	20 78 93	jsr $9378			jsr 	EvaluateExpression 			; evaluate here, from lowest precedence
.9716	20 a8 a2	jsr $a2a8			jsr 	CheckRightBracket 			; check for )
.9719	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/variable.asm

.971a					VariableHandler:
.971a	b1 30		lda ($30),y			lda 	(codePtr),y
.971c	18		clc				clc
.971d	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.971f	85 37		sta $37				sta 	zTemp0+1
.9721	c8		iny				iny
.9722	b1 30		lda ($30),y			lda 	(codePtr),y
.9724	85 36		sta $36				sta 	zTemp0
.9726	c8		iny				iny
.9727	18		clc				clc									; copy variable address+3 to mantissa
.9728	69 03		adc #$03			adc 	#3
.972a	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.972d	a5 37		lda $37				lda 	zTemp0+1
.972f	69 00		adc #$00			adc 	#0
.9731	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9734	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.9737	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.973a	9e 28 04	stz $0428,x			stz 	NSExponent,x
.973d	5a		phy				phy
.973e	a0 02		ldy #$02			ldy 	#2 							; read type
.9740	b1 36		lda ($36),y			lda 	(zTemp0),y
.9742	7a		ply				ply
.9743	29 1c		and #$1c			and 	#NSBTypeMask+NSBIsArray 	; get type information
.9745	09 20		ora #$20			ora 	#NSBIsReference 			; make a reference.
.9747	9d 00 04	sta $0400,x			sta 	NSStatus,x
.974a	29 04		and #$04			and 	#NSBIsArray
.974c	d0 01		bne $974f			bne 	_VHArray
.974e	60		rts				rts
.974f					_VHArray:
.974f	e8		inx				inx
.9750	20 bf 9a	jsr $9abf			jsr 	Evaluate8BitInteger 		; get the 1st index.
.9753	a9 ff		lda #$ff			lda 	#$FF 						; set Status of X+2 to a duff value so we know if we picked it up.
.9755	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.9758	b1 30		lda ($30),y			lda 	(codePtr),y
.975a	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.975c	d0 06		bne $9764			bne 	_VHNoSecondIndex
.975e	c8		iny				iny 								; skip the comma
.975f	e8		inx				inx
.9760	20 bf 9a	jsr $9abf			jsr 	Evaluate8BitInteger 		; get the 2nd index.
.9763	ca		dex				dex
.9764					_VHNoSecondIndex:
.9764	ca		dex				dex 								; set X back.
.9765	20 a8 a2	jsr $a2a8			jsr 	CheckRightBracket 			; and check the right bracket.
.9768	5a		phy				phy 								; save position
.9769	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy record address to zaTemp
.976c	85 3e		sta $3e				sta 	zaTemp
.976e	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9771	85 3f		sta $3f				sta 	zaTemp+1
.9773	a0 03		ldy #$03			ldy 	#3 							; get the second index - which is 0 if there is one index.
.9775	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9777	f0 02		beq $977b			beq 	_VHHas2Mask
.9779	a9 ff		lda #$ff			lda 	#$FF
.977b					_VHHas2Mask:
.977b	dd 02 04	cmp $0402,x			cmp 	NSStatus+2,x 				; so if they are the same there are the wrong number of indices
.977e	f0 54		beq $97d4			beq 	_VHBadIndex
.9780	0a		asl a				asl 	a 							; carry will be set if a second index
.9781	90 09		bcc $978c			bcc 	_VHCheckFirstIndex
.9783	a0 03		ldy #$03			ldy 	#3 			 				; check the 2nd size >= 2nd index
.9785	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9787	dd 0a 04	cmp $040a,x			cmp 	NSMantissa0+2,x
.978a	90 48		bcc $97d4			bcc 	_VHBadIndex
.978c					_VHCheckFirstIndex:
.978c	a0 02		ldy #$02			ldy 	#2 			 				; check the 2nd size >= 2nd index
.978e	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9790	dd 09 04	cmp $0409,x			cmp 	NSMantissa0+1,x
.9793	90 3f		bcc $97d4			bcc 	_VHBadIndex
.9795	64 36		stz $36				stz 	zTemp0 						; clear zTemp0 (if 1 index)
.9797	64 37		stz $37				stz 	zTemp0+1
.9799	bd 02 04	lda $0402,x			lda 	NSStatus+2,x 				; if only one index provided, don't need to multiply
.979c	30 0f		bmi $97ad			bmi 	_VHNoMultiply
.979e	da		phx				phx
.979f	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; get 2nd index on stack
.97a2	48		pha				pha
.97a3	a0 02		ldy #$02			ldy 	#2 							; get 1st size in A
.97a5	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.97a7	1a		inc a				inc 	a 							; add 1 for zero base
.97a8	fa		plx				plx
.97a9	20 2a a7	jsr $a72a			jsr 	Multiply8x8 				; calculate -> Z0
.97ac	fa		plx				plx
.97ad					_VHNoMultiply:
.97ad	18		clc				clc
.97ae	a5 36		lda $36				lda 	zTemp0
.97b0	7d 09 04	adc $0409,x			adc 	NSMantissa0+1,x
.97b3	85 36		sta $36				sta 	zTemp0
.97b5	a5 37		lda $37				lda 	zTemp0+1
.97b7	69 00		adc #$00			adc 	#0
.97b9	85 37		sta $37				sta 	zTemp0+1
.97bb	bd 00 04	lda $0400,x			lda 	NSStatus,x
.97be	20 9a 86	jsr $869a			jsr 	ScaleByBaseType
.97c1	18		clc				clc
.97c2	b2 3e		lda ($3e)			lda 	(zaTemp)
.97c4	65 36		adc $36				adc 	zTemp0
.97c6	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.97c9	a0 01		ldy #$01			ldy 	#1
.97cb	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.97cd	65 37		adc $37				adc 	zTemp0+1
.97cf	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.97d2	7a		ply				ply 								; restore position
.97d3	60		rts				rts
.97d4					_VHBadIndex:
.97d4	a9 17		lda #$17		lda	#23
.97d6	4c 6f 8f	jmp $8f6f		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/abs.asm

.a660					AbsUnary:
.a660	fa		plx				plx 								; restore stack pos
.a661	20 7b 9a	jsr $9a7b			jsr 	EvaluateNumber 				; get a float or int
.a664	20 a8 a2	jsr $a2a8			jsr 	CheckRightBracket
.a667	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; clear the sign bit
.a66a	29 7f		and #$7f			and 	#$7F
.a66c	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a66f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/alloc.asm

.97d9					AllocUnary:
.97d9	fa		plx				plx 								; restore stack pos
.97da	20 b3 9a	jsr $9ab3			jsr 	Evaluate16BitInteger		; get bytes required.
.97dd	20 a8 a2	jsr $a2a8			jsr 	CheckRightBracket
.97e0	da		phx				phx 								; save X/Y
.97e1	5a		phy				phy
.97e2	8a		txa				txa 								; copy X into Y
.97e3	a8		tay				tay
.97e4	b9 10 04	lda $0410,y			lda		NSMantissa1,y 				; get size
.97e7	aa		tax				tax
.97e8	b9 08 04	lda $0408,y			lda 	NSMantissa0,y
.97eb	20 f8 97	jsr $97f8			jsr 	AllocateXABytes 			; allocate memory
.97ee	99 08 04	sta $0408,y			sta 	NSMantissa0,y 				; write address out.
.97f1	8a		txa				txa
.97f2	99 10 04	sta $0410,y			sta 	NSMantissa1,y
.97f5	7a		ply				ply
.97f6	fa		plx				plx
.97f7	60		rts				rts
.97f8					AllocateXABytes:
.97f8	5a		phy				phy
.97f9	ac 8c 04	ldy $048c			ldy 	lowMemPtr 					; push current address on stack and to zTemp0
.97fc	84 36		sty $36				sty 	zTemp0
.97fe	5a		phy				phy
.97ff	ac 8d 04	ldy $048d			ldy 	lowMemPtr+1
.9802	84 37		sty $37				sty 	zTemp0+1
.9804	5a		phy				phy
.9805	18		clc				clc 								; add to low memory pointer
.9806	6d 8c 04	adc $048c			adc 	lowMemPtr
.9809	8d 8c 04	sta $048c			sta 	lowMemPtr
.980c	8a		txa				txa
.980d	6d 8d 04	adc $048d			adc 	lowMemPtr+1
.9810	8d 8d 04	sta $048d			sta 	lowMemPtr+1
.9813	b0 2f		bcs $9844			bcs 	CISSMemory
.9815	20 36 98	jsr $9836			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.9818					_ClearMemory:
.9818	ad 8c 04	lda $048c			lda 	lowMemPtr 					; cleared all memory allocated
.981b	c5 36		cmp $36				cmp 	zTemp0
.981d	d0 07		bne $9826			bne 	_CMClearNext
.981f	ad 8d 04	lda $048d			lda 	lowMemPtr+1
.9822	c5 37		cmp $37				cmp 	zTemp0+1
.9824	f0 0c		beq $9832			beq 	_CMExit
.9826					_CMClearNext:
.9826	a9 00		lda #$00			lda 	#0 							; clear byte, advance to next.
.9828	92 36		sta ($36)			sta 	(zTemp0)
.982a	e6 36		inc $36				inc 	zTemp0
.982c	d0 ea		bne $9818			bne 	_ClearMemory
.982e	e6 37		inc $37				inc		zTemp0+1
.9830	80 e6		bra $9818			bra 	_ClearMemory
.9832					_CMExit:
.9832	fa		plx				plx
.9833	68		pla				pla
.9834	7a		ply				ply
.9835	60		rts				rts
.9836					CheckIdentifierStringSpace:
.9836	48		pha				pha
.9837	ad 8d 04	lda $048d			lda 	lowMemPtr+1 				; get low memory pointer
.983a	18		clc				clc
.983b	69 02		adc #$02			adc 	#2 							; need at least 2 256 byte pages
.983d	cd 8f 04	cmp $048f			cmp 	StringMemory+1 				; is it >= StringMemory
.9840	b0 02		bcs $9844			bcs 	CISSMemory
.9842	68		pla				pla
.9843	60		rts				rts
.9844					CISSMemory:
.9844	a9 06		lda #$06		lda	#6
.9846	4c 6f 8f	jmp $8f6f		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/asc.asm

.a670					AscUnary:
.a670	fa		plx				plx 								; restore stack pos
.a671	20 86 9a	jsr $9a86			jsr 	EvaluateString 				; get a string
.a674	b2 36		lda ($36)			lda 	(zTemp0)					; get/return firs character
.a676	20 29 9b	jsr $9b29			jsr 	NSMSetByte
.a679	20 a8 a2	jsr $a2a8			jsr 	CheckRightBracket
.a67c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/frac.asm

.a67d					FracUnary:
.a67d	fa		plx				plx 								; restore stack pos
.a67e	20 7b 9a	jsr $9a7b			jsr 	EvaluateNumber 				; get a float or int
.a681	20 a8 a2	jsr $a2a8			jsr 	CheckRightBracket
.a684	bd 00 04	lda $0400,x			lda 	NSStatus,x
.a687	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.a689	f0 04		beq $a68f			beq 	_IUZero
.a68b	20 4d a5	jsr $a54d			jsr 	FloatFractionalPart
.a68e	60		rts				rts
.a68f					_IUZero:
.a68f	20 27 9b	jsr $9b27			jsr 	NSMSetZero
.a692	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/int.asm

.a693					IntUnary:
.a693	fa		plx				plx 								; restore stack pos
.a694	20 7b 9a	jsr $9a7b			jsr 	EvaluateNumber 				; get a float or int
.a697	20 a8 a2	jsr $a2a8			jsr 	CheckRightBracket
.a69a	bd 00 04	lda $0400,x			lda 	NSStatus,x
.a69d	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.a69f	f0 03		beq $a6a4			beq 	_IUExit
.a6a1	20 b0 a5	jsr $a5b0			jsr 	FloatIntegerPart
.a6a4					_IUExit:
.a6a4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/len.asm

.a6a5					LenUnary:
.a6a5	fa		plx				plx 								; restore stack pos
.a6a6	20 86 9a	jsr $9a86			jsr 	EvaluateString 				; get a string
.a6a9	5a		phy				phy
.a6aa	a0 00		ldy #$00			ldy 	#0 							; find length
.a6ac					_LenFind:
.a6ac	b1 36		lda ($36),y			lda 	(zTemp0),y
.a6ae	f0 06		beq $a6b6			beq 	_LenExit
.a6b0	c8		iny				iny
.a6b1	d0 f9		bne $a6ac			bne 	_LenFind
.a6b3	4c 93 a8	jmp $a893			jmp 	RangeError 					; string > 255
.a6b6					_LenExit:
.a6b6	98		tya				tya
.a6b7	20 29 9b	jsr $9b29			jsr 	NSMSetByte
.a6ba	7a		ply				ply
.a6bb	20 a8 a2	jsr $a2a8			jsr 	CheckRightBracket
.a6be	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/not.asm

.9849					Unary_Not:
.9849	fa		plx				plx
.984a	20 9e 9a	jsr $9a9e			jsr 	EvaluateInteger 			; get integer
.984d	20 a8 a2	jsr $a2a8			jsr 	CheckRightBracket
.9850	20 57 9b	jsr $9b57			jsr 	NSMIsZero 					; zero mantissa ?
.9853	f0 04		beq $9859			beq 	_NotZero
.9855	20 27 9b	jsr $9b27			jsr 	NSMSetZero
.9858	60		rts				rts
.9859					_NotZero:
.9859	4c dc 8f	jmp $8fdc			jmp 	ReturnTrue
.985c					_UNBad:
.985c	4c 9d a8	jmp $a89d			jmp 	ArgumentError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/rnd.asm

.985f					Unary_Random:
.985f	fa		plx				plx
.9860	20 d8 98	jsr $98d8			jsr 	Random32Bit 				; get a random number
.9863	20 bd 98	jsr $98bd			jsr 	URCopyToMantissa  			; put in mantissa
.9866	e8		inx				inx
.9867	20 b3 9a	jsr $9ab3			jsr 	Evaluate16BitInteger 		; put modulus value in +1
.986a	ca		dex				dex
.986b	20 2c a3	jsr $a32c			jsr 	IntegerModulusNoCheck 		; calculate modulus
.986e	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; make it an integer positive
.9871	9e 28 04	stz $0428,x			stz 	NSExponent,x
.9874	20 a8 a2	jsr $a2a8			jsr 	CheckRightBracket
.9877	60		rts				rts
.9878					Unary_Rnd:
.9878	fa		plx				plx
.9879	20 7b 9a	jsr $9a7b			jsr 	EvaluateNumber 				; number to use.
.987c	20 a8 a2	jsr $a2a8			jsr 	CheckRightBracket 			; closing bracket
.987f	20 57 9b	jsr $9b57			jsr 	NSMIsZero 					; if zero, then don't generate a new number
.9882	f0 2b		beq $98af			beq 	_URCopySeed
.9884	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; if -ve, then seed using parameter
.9887	10 23		bpl $98ac			bpl 	_URDontSeed
.9889	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy - value to seed butchering it.
.988c	49 17		eor #$17			eor 	#$17
.988e	8d 88 04	sta $0488			sta 	RandomSeed+0
.9891	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9894	49 a5		eor #$a5			eor 	#$A5
.9896	8d 89 04	sta $0489			sta 	RandomSeed+1
.9899	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.989c	49 c2		eor #$c2			eor 	#$C2
.989e	8d 8a 04	sta $048a			sta 	RandomSeed+2
.98a1	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.98a4	49 9d		eor #$9d			eor 	#$9D
.98a6	8d 8b 04	sta $048b			sta 	RandomSeed+3
.98a9	20 d8 98	jsr $98d8			jsr 	Random32Bit
.98ac					_URDontSeed:
.98ac	20 d8 98	jsr $98d8			jsr 	Random32Bit 				; generate a number.
.98af					_URCopySeed:
.98af	20 bd 98	jsr $98bd			jsr 	URCopyToMantissa 			; copy into mantissa
.98b2	a9 e1		lda #$e1			lda 	#-31 						; force into 0-1 range
.98b4	8d 28 04	sta $0428			sta 	NSExponent
.98b7	a9 08		lda #$08			lda 	#NSTFloat
.98b9	8d 00 04	sta $0400			sta 	NSStatus 					; positive.
.98bc	60		rts				rts
.98bd					URCopyToMantissa:
.98bd	ad 88 04	lda $0488			lda 	RandomSeed+0
.98c0	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.98c3	ad 89 04	lda $0489			lda 	RandomSeed+1
.98c6	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.98c9	ad 8a 04	lda $048a			lda 	RandomSeed+2
.98cc	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.98cf	ad 8b 04	lda $048b			lda 	RandomSeed+3
.98d2	29 7f		and #$7f			and 	#$7F 						; make legal mantissa
.98d4	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.98d7	60		rts				rts
.98d8					Random32Bit:
.98d8	5a		phy				phy
.98d9	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.98db	ad 88 04	lda $0488			lda 	RandomSeed+0 				; check the seed isn't zero
.98de	d0 03		bne $98e3			bne 	_Random1
.98e0	a8		tay				tay 								; if so do it 256 times
.98e1	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.98e3					_Random1:
.98e3	0a		asl a				asl 	a 							; LSFR RNG
.98e4	2e 89 04	rol $0489			rol 	RandomSeed+1
.98e7	2e 8a 04	rol $048a			rol 	RandomSeed+2
.98ea	2e 8b 04	rol $048b			rol 	RandomSeed+3
.98ed	90 02		bcc $98f1			bcc 	_Random2
.98ef	49 c5		eor #$c5			eor 	#$C5
.98f1					_Random2:
.98f1	88		dey				dey
.98f2	d0 ef		bne $98e3			bne 	_Random1
.98f4	8d 88 04	sta $0488			sta 	RandomSeed+0
.98f7	7a		ply				ply
.98f8	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/sgn.asm

.a6bf					SgnUnary:
.a6bf	fa		plx				plx 								; restore stack pos
.a6c0	20 7b 9a	jsr $9a7b			jsr 	EvaluateNumber 				; get a float or int
.a6c3	20 a8 a2	jsr $a2a8			jsr 	CheckRightBracket
.a6c6	20 57 9b	jsr $9b57			jsr 	NSMIsZero 					; if zero
.a6c9	f0 10		beq $a6db			beq 	_SGZero  					; return Int Zero
.a6cb	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get status w/sign
.a6ce	48		pha				pha
.a6cf	a9 01		lda #$01			lda 	#1 							; set to 1
.a6d1	20 29 9b	jsr $9b29			jsr 	NSMSetByte
.a6d4	68		pla				pla
.a6d5	29 80		and #$80			and		#$80 						; copy the sign byte out
.a6d7	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a6da	60		rts				rts
.a6db	20 27 9b	jsr $9b27	_SGZero:jsr 	NSMSetZero
.a6de	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/val.asm

.a6df					ValUnary:
.a6df	fa		plx				plx 								; restore stack pos
.a6e0	20 f5 a6	jsr $a6f5			jsr 	ValMainCode 				; do the main val() code
.a6e3	b0 01		bcs $a6e6			bcs 	_VUError 					; couldn't convert
.a6e5	60		rts				rts
.a6e6					_VUError:
.a6e6	4c 98 a8	jmp $a898			jmp 	TypeError
.a6e9					IsValUnary:
.a6e9	fa		plx				plx 								; restore stack pos
.a6ea	20 f5 a6	jsr $a6f5			jsr 	ValMainCode 				; do the main val() code
.a6ed	b0 03		bcs $a6f2			bcs 	_VUBad
.a6ef	4c dc 8f	jmp $8fdc			jmp 	ReturnTrue
.a6f2					_VUBad:
.a6f2	4c e8 8f	jmp $8fe8			jmp 	ReturnFalse
.a6f5					ValMainCode:
.a6f5	20 86 9a	jsr $9a86			jsr 	EvaluateString 				; get a string
.a6f8	20 a8 a2	jsr $a2a8			jsr 	CheckRightBracket 			; check right bracket present
.a6fb	5a		phy				phy
.a6fc	b2 36		lda ($36)			lda 	(zTemp0) 					; check not empty string
.a6fe	f0 17		beq $a717			beq 	_VMCFail2
.a700	a0 ff		ldy #$ff			ldy 	#$FF 						; start position
.a702	48		pha				pha 								; save first character
.a703	c9 2d		cmp #$2d			cmp 	#"-"		 				; is it -
.a705	d0 01		bne $a708			bne 	_VMCStart
.a707	c8		iny				iny 								; skip over -
.a708					_VMCStart:
.a708	38		sec				sec 								; initialise first time round.
.a709					_VMCNext:
.a709	c8		iny				iny 								; pre-increment
.a70a	b1 36		lda ($36),y			lda 	(zTemp0),y 					; next character
.a70c	f0 0c		beq $a71a			beq 	_VMCSuccess 				; successful.
.a70e	20 2b 95	jsr $952b			jsr 	EncodeNumber 				; send it to the number-builder
.a711	90 03		bcc $a716			bcc 	_VMCFail 					; if failed, give up.
.a713	18		clc				clc 								; next time round, countinue
.a714	80 f3		bra $a709			bra 	_VMCNext
.a716					_VMCFail:
.a716	68		pla				pla
.a717					_VMCFail2:
.a717	7a		ply				ply
.a718	38		sec				sec
.a719	60		rts				rts
.a71a					_VMCSuccess:
.a71a	a9 00		lda #$00			lda 	#0 							; construct final
.a71c	20 2b 95	jsr $952b			jsr 	EncodeNumber
.a71f	68		pla				pla
.a720	c9 2d		cmp #$2d			cmp 	#"-"
.a722	d0 03		bne $a727			bne 	_VMCNotNegative
.a724	20 d3 9a	jsr $9ad3			jsr		NSMNegate
.a727					_VMCNotNegative:
.a727	7a		ply				ply
.a728	18		clc				clc
.a729	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/chr.asm

.98f9					ChrUnary:
.98f9	fa		plx				plx 								; restore stack pos
.98fa	20 bf 9a	jsr $9abf			jsr 	Evaluate8BitInteger			; get value
.98fd	48		pha				pha
.98fe	20 a8 a2	jsr $a2a8			jsr 	CheckRightBracket
.9901	a9 01		lda #$01			lda 	#1 							; allocate space for one char
.9903	20 b3 ab	jsr $abb3			jsr 	StringTempAllocate
.9906	68		pla				pla 								; write number to it
.9907	20 f1 ab	jsr $abf1			jsr 	StringTempWrite
.990a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/spc.asm

.990b					SpcUnary:
.990b	fa		plx				plx 								; restore stack pos
.990c	20 bf 9a	jsr $9abf			jsr 	Evaluate8BitInteger			; get value
.990f	5a		phy				phy
.9910	48		pha				pha 								; save count
.9911	20 b3 ab	jsr $abb3			jsr 	StringTempAllocate
.9914	7a		ply				ply 								; to do count in Y
.9915					_SpcLoop:
.9915	c0 00		cpy #$00			cpy 	#0
.9917	f0 08		beq $9921			beq 	_SpcExit
.9919	a9 20		lda #$20			lda 	#32
.991b	20 f1 ab	jsr $abf1			jsr 	StringTempWrite
.991e	88		dey				dey
.991f	80 f4		bra $9915			bra 	_SPCLoop
.9921					_SpcExit:
.9921	7a		ply				ply
.9922	20 a8 a2	jsr $a2a8			jsr 	CheckRightBracket
.9925	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/str.asm

.9926					Unary_Str:
.9926	fa		plx				plx
.9927	20 7b 9a	jsr $9a7b			jsr 	EvaluateNumber  			; get number
.992a	20 a8 a2	jsr $a2a8			jsr 	CheckRightBracket 			; closing bracket
.992d	a9 05		lda #$05			lda 	#5 							; maximum decimals, from Basic816
.992f	20 48 99	jsr $9948			jsr 	ConvertNumberToString 		; do the conversion.
.9932	a9 21		lda #$21			lda		#33 						; create buffer
.9934	20 b3 ab	jsr $abb3			jsr 	StringTempAllocate 			; allocate memory
.9937	da		phx				phx
.9938	a2 00		ldx #$00			ldx 	#0
.993a					_USCopy:
.993a	bd 19 06	lda $0619,x			lda 	DecimalBuffer,x
.993d	20 f1 ab	jsr $abf1			jsr 	StringTempWrite
.9940	e8		inx				inx
.9941	bd 19 06	lda $0619,x			lda 	DecimalBuffer,x
.9944	d0 f4		bne $993a			bne 	_USCopy
.9946	fa		plx				plx
.9947	60		rts				rts
.9948					ConvertNumberToString:
.9948	5a		phy				phy 								; save code position
.9949	8d 94 04	sta $0494			sta 	DecimalPlaces	 			; save number of DPs.
.994c	9c 95 04	stz $0495			stz 	dbOffset 					; offset into decimal buffer = start.
.994f	bd 00 04	lda $0400,x			lda 	NSStatus,x  				; is it -ve.
.9952	10 0a		bpl $995e			bpl 	_CNTSNotNegative
.9954	29 7f		and #$7f			and 	#$7F 						; make +ve
.9956	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9959	a9 2d		lda #$2d			lda 	#"-"
.995b	20 c4 99	jsr $99c4			jsr 	WriteDecimalBuffer
.995e					_CNTSNotNegative:
.995e	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if decimal
.9961	f0 15		beq $9978			beq 	_CNTSNotFloat
.9963	e8		inx				inx 								; round up
.9964	a9 01		lda #$01			lda 	#1
.9966	20 29 9b	jsr $9b29			jsr 	NSMSetByte
.9969	ca		dex				dex
.996a	bd 28 04	lda $0428,x			lda		NSExponent,x
.996d	9d 29 04	sta $0429,x			sta 	NSExponent+1,x
.9970	a9 08		lda #$08			lda 	#NSTFloat
.9972	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.9975	20 6f a4	jsr $a46f			jsr 	FloatAdd
.9978					_CNTSNotFloat:
.9978	20 a6 99	jsr $99a6			jsr 	MakePlusTwoString
.997b	20 4d a5	jsr $a54d			jsr 	FloatFractionalPart 		; get the fractional part
.997e	20 11 a6	jsr $a611			jsr 	NSNormalise					; normalise , exit if zero
.9981	f0 21		beq $99a4			beq 	_CNTSExit
.9983	a9 2e		lda #$2e			lda 	#"."
.9985	20 c4 99	jsr $99c4			jsr 	WriteDecimalBuffer 			; write decimal place
.9988					_CNTSDecimal:
.9988	ce 94 04	dec $0494			dec 	DecimalPlaces 				; done all the decimals
.998b	30 17		bmi $99a4			bmi 	_CNTSExit
.998d	e8		inx				inx 								; x 10.0
.998e	a9 0a		lda #$0a			lda 	#10
.9990	20 29 9b	jsr $9b29			jsr 	NSMSetByte
.9993	a9 08		lda #$08			lda 	#NSTFloat
.9995	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9998	ca		dex				dex
.9999	20 da a5	jsr $a5da			jsr 	FloatMultiply
.999c	20 a6 99	jsr $99a6			jsr 	MakePlusTwoString
.999f	20 4d a5	jsr $a54d			jsr 	FloatFractionalPart 		; get the fractional part
.99a2	80 e4		bra $9988			bra 	_CNTSDecimal 				; keep going.
.99a4					_CNTSExit:
.99a4	7a		ply				ply
.99a5	60		rts				rts
.99a6					MakePlusTwoString:
.99a6	da		phx				phx
.99a7	20 fe 9a	jsr $9afe			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.99aa	e8		inx				inx 								; access it
.99ab	e8		inx				inx
.99ac	20 b0 a5	jsr $a5b0			jsr 	FloatIntegerPart 			; make it an integer
.99af	a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.99b1	20 19 a4	jsr $a419			jsr 	ConvertInt32
.99b4	a2 00		ldx #$00			ldx	 	#0
.99b6					_MPTSCopy:
.99b6	bd f7 05	lda $05f7,x			lda 	NumberBuffer,x
.99b9	20 c4 99	jsr $99c4			jsr 	WriteDecimalBuffer
.99bc	e8		inx				inx
.99bd	bd f7 05	lda $05f7,x			lda 	NumberBuffer,x
.99c0	d0 f4		bne $99b6			bne 	_MPTSCopy
.99c2	fa		plx				plx
.99c3	60		rts				rts
.99c4					WriteDecimalBuffer:
.99c4	da		phx				phx
.99c5	ae 95 04	ldx $0495			ldx 	dbOffset
.99c8	9d 19 06	sta $0619,x			sta 	DecimalBuffer,x
.99cb	9e 1a 06	stz $061a,x			stz 	DecimalBuffer+1,x
.99ce	ee 95 04	inc $0495			inc 	dbOffset
.99d1	fa		plx				plx
.99d2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/substring.asm

.99d3					Unary_Left:
.99d3	fa		plx				plx
.99d4	18		clc				clc 								; only one parameter
.99d5	20 4a 9a	jsr $9a4a			jsr 	SubstringInitial 			; set up.
.99d8	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; Param #1 is the length
.99db	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.99de	9e 09 04	stz $0409,x			stz 	NSMantissa0+1,x 			; Start is zero.
.99e1	80 2c		bra $9a0f			bra 	SubstringMain
.99e3					Unary_Right:
.99e3	fa		plx				plx
.99e4	18		clc				clc 								; only one parameter
.99e5	20 4a 9a	jsr $9a4a			jsr 	SubstringInitial 			; set up.
.99e8	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; length => param 2
.99eb	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.99ee	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; total length
.99f1	fd 09 04	sbc $0409,x			sbc 	NSMantissa0+1,x 			; length - required.
.99f4	b0 02		bcs $99f8			bcs 	_URNotUnderflow
.99f6	a9 00		lda #$00			lda 	#0 							; start from the beginning, as something like right$("AB",3)
.99f8					_URNotUnderFlow:
.99f8	9d 09 04	sta $0409,x			sta 	NSMantissa0+1,x 			; this is the start position
.99fb	80 12		bra $9a0f			bra 	SubStringMain
.99fd					Unary_Mid:
.99fd	fa		plx				plx
.99fe	38		sec				sec 								; two parameters
.99ff	20 4a 9a	jsr $9a4a			jsr 	SubstringInitial 			; set up.
.9a02	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; first parameter is zero ?
.9a05	f0 05		beq $9a0c			beq 	_UMError
.9a07	de 09 04	dec $0409,x			dec 	NSMantissa0+1,x				; reduce initial offset by 1 as MID$(a$,1..) is actually the first character
.9a0a	80 03		bra $9a0f			bra 	SubStringMain
.9a0c					_UMError:
.9a0c	4c 9d a8	jmp $a89d			jmp 	ArgumentError
.9a0f					SubStringMain:
.9a0f	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; is the initial offset >= the length
.9a12	dd 28 04	cmp $0428,x			cmp 	NSExponent,x
.9a15	b0 2d		bcs $9a44			bcs 	_SSMNull 					; if so, return an empty string.
.9a17	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; if copy count is zero
.9a1a	f0 28		beq $9a44			beq 	_SSMNull 					; return empty string.
.9a1c	18		clc				clc 								; add the offset +1 to the address and
.9a1d	bd 08 04	lda $0408,x			lda	 	NSMantissa0,x 				; put in zTemp
.9a20	7d 09 04	adc $0409,x			adc 	NSMantissa0+1,x
.9a23	85 36		sta $36				sta 	zTemp0
.9a25	bd 10 04	lda $0410,x			lda	 	NSMantissa1,x
.9a28	69 00		adc #$00			adc 	#0
.9a2a	85 37		sta $37				sta 	zTemp0+1
.9a2c					_SSMNoCarry:
.9a2c	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; characters required.
.9a2f	20 b3 ab	jsr $abb3			jsr 	StringTempAllocate 			; allocate that many characters
.9a32	5a		phy				phy 								; save Y
.9a33	a0 00		ldy #$00			ldy 	#0 							; start copying in.
.9a35					_SSMCopy:
.9a35	b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next character
.9a37	f0 09		beq $9a42			beq 	_SSMEString 				; no more to copy
.9a39	20 f1 ab	jsr $abf1			jsr 	StringTempWrite 			; and write it out.
.9a3c	c8		iny				iny
.9a3d	de 0a 04	dec $040a,x			dec 	NSMantissa0+2,x
.9a40	d0 f3		bne $9a35			bne 	_SSMCopy
.9a42					_SSMEString:
.9a42	7a		ply				ply
.9a43					_SSMExit:
.9a43	60		rts				rts
.9a44					_SSMNull:
.9a44	a9 00		lda #$00			lda 	#0
.9a46	20 b3 ab	jsr $abb3			jsr 	StringTempAllocate
.9a49	60		rts				rts
.9a4a					SubstringInitial:
.9a4a	da		phx				phx 								; save initial stack position
.9a4b	08		php				php 								; save carry on stack indicating 2 parameters
.9a4c	20 86 9a	jsr $9a86			jsr 	EvaluateString 				; get a string
.9a4f	5a		phy				phy 								; calculate length to exponent.
.9a50	a0 ff		ldy #$ff			ldy 	#$FF
.9a52					_SIFindLength:
.9a52	c8		iny				iny
.9a53	b1 36		lda ($36),y			lda 	(zTemp0),y
.9a55	d0 fb		bne $9a52			bne 	_SIFindLength
.9a57	98		tya				tya
.9a58	9d 28 04	sta $0428,x			sta 	NSExponent,x
.9a5b	7a		ply				ply
.9a5c	e8		inx				inx
.9a5d	20 b0 a2	jsr $a2b0			jsr 	CheckComma 					; comma next
.9a60	20 bf 9a	jsr $9abf			jsr 	Evaluate8BitInteger 		; get next parameter
.9a63	28		plp				plp 								; is it the last parameter ?
.9a64	90 07		bcc $9a6d			bcc 	_SSIExit 					; if so, exit.
.9a66	e8		inx				inx
.9a67	20 b0 a2	jsr $a2b0			jsr 	CheckComma 					; comma next
.9a6a	20 bf 9a	jsr $9abf			jsr 	Evaluate8BitInteger 		; get last parameter
.9a6d					_SSIExit:
.9a6d	fa		plx				plx
.9a6e	20 a8 a2	jsr $a2a8			jsr 	CheckRightBracket 			; check closing bracket
.9a71	60		rts				rts 								; exit

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/exprhelper.asm

.9a72					EvaluateValue:
.9a72	48		pha				pha
.9a73	20 78 93	jsr $9378			jsr		EvaluateExpression 			; expression
.9a76	20 8d 94	jsr $948d			jsr 	Dereference					; derefernce it
.9a79	68		pla				pla
.9a7a	60		rts				rts
.9a7b					EvaluateNumber:
.9a7b	20 72 9a	jsr $9a72			jsr 	EvaluateValue 				; get a value
.9a7e	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if string.
.9a81	29 10		and #$10			and 	#NSBIsString
.9a83	d0 16		bne $9a9b			bne 	HelperTypeError
.9a85	60		rts				rts
.9a86					EvaluateString:
.9a86	20 72 9a	jsr $9a72			jsr 	EvaluateValue 				; get a value
.9a89	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if string.
.9a8c	29 10		and #$10			and 	#NSBIsString
.9a8e	f0 0b		beq $9a9b			beq 	HelperTypeError
.9a90					CopyAddressToTemp0:
.9a90	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address -> zTemp0
.9a93	85 36		sta $36				sta 	zTemp0
.9a95	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9a98	85 37		sta $37				sta 	zTemp0+1
.9a9a	60		rts				rts
.9a9b					HelperTypeError:
.9a9b	4c 98 a8	jmp $a898			jmp 	TypeError
.9a9e					EvaluateInteger:
.9a9e	20 7b 9a	jsr $9a7b			jsr 	EvaluateNumber
.9aa1	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check exponent is zero
.9aa4	d0 0a		bne $9ab0			bne 	HelperValueError 			; if not, it's a float.
.9aa6	60		rts				rts
.9aa7					EvaluateUnsignedInteger:
.9aa7	20 9e 9a	jsr $9a9e			jsr 	EvaluateInteger 			; check integer is +ve
.9aaa	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9aad	30 01		bmi $9ab0			bmi 	HelperValueError
.9aaf	60		rts				rts
.9ab0					HelperValueError:
.9ab0	4c 9d a8	jmp $a89d			jmp 	ArgumentError
.9ab3					Evaluate16BitInteger:
.9ab3	20 a7 9a	jsr $9aa7			jsr	 	EvaluateUnsignedInteger		; get integer
.9ab6	bd 20 04	lda $0420,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.9ab9	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.9abc	d0 f2		bne $9ab0			bne 	HelperValueError
.9abe	60		rts				rts
.9abf					Evaluate8BitInteger:
.9abf	20 a7 9a	jsr $9aa7			jsr	 	EvaluateUnsignedInteger 	; get an integer
.9ac2	d0 ec		bne $9ab0			bne 	HelperValueError
.9ac4	bd 20 04	lda $0420,x			lda 	NSMantissa3,x	 			; bytes 1, 2 & 3 must be zero
.9ac7	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.9aca	1d 10 04	ora $0410,x			ora 	NSMantissa1,x
.9acd	d0 e1		bne $9ab0			bne 	HelperValueError
.9acf	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9ad2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/mult8x8.asm

.a72a					Multiply8x8:
.a72a	4a		lsr a		  		lsr 	a  							; prime the carry bit for the loop
.a72b	85 36		sta $36			  	sta 	zTemp0
.a72d	86 37		stx $37				stx 	zTemp0+1
.a72f	a9 00		lda #$00			lda 	#0
.a731	a2 08		ldx #$08			ldx 	#8
.a733					_M88Loop:
.a733	90 03		bcc $a738			bcc 	_M88NoAdd
.a735	18		clc				clc
.a736	65 37		adc $37				adc 	zTemp0+1
.a738					_M88NoAdd:
.a738	6a		ror a				ror 	a
.a739	66 36		ror $36				ror 	zTemp0  					; pull another bit out for the next iteration
.a73b	ca		dex				dex         						; inc/dec don't modify carry; only shifts and adds do
.a73c	d0 f5		bne $a733			bne 	_M88Loop
.a73e	85 37		sta $37				sta 	zTemp0+1 					; store high 8 bits.
.a740	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/utility.asm

.9ad3					NSMNegate:
.9ad3	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9ad6	49 80		eor #$80			eor 	#NSBIsNegative
.9ad8	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9adb	60		rts				rts
.9adc					NSMNegateMantissa:
.9adc	38		sec				sec
.9add	a9 00		lda #$00			lda 	#0
.9adf	fd 08 04	sbc $0408,x			sbc 	NSMantissa0,x
.9ae2	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9ae5	a9 00		lda #$00			lda 	#0
.9ae7	fd 10 04	sbc $0410,x			sbc 	NSMantissa1,x
.9aea	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9aed	a9 00		lda #$00			lda 	#0
.9aef	fd 18 04	sbc $0418,x			sbc 	NSMantissa2,x
.9af2	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9af5	a9 00		lda #$00			lda 	#0
.9af7	fd 20 04	sbc $0420,x			sbc 	NSMantissa3,x
.9afa	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9afd	60		rts				rts
.9afe					NSMShiftUpTwo:
.9afe	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9b01	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.9b04	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9b07	9d 12 04	sta $0412,x			sta 	NSMantissa1+2,x
.9b0a	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.9b0d	9d 1a 04	sta $041a,x			sta 	NSMantissa2+2,x
.9b10	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.9b13	9d 22 04	sta $0422,x			sta 	NSMantissa3+2,x
.9b16	bd 28 04	lda $0428,x			lda 	NSExponent,x
.9b19	9d 2a 04	sta $042a,x			sta 	NSExponent+2,x
.9b1c	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9b1f	9d 02 04	sta $0402,x			sta 	NSStatus+2,x
.9b22	60		rts				rts
.9b23					NSMSetZeroMantissaOnly:
.9b23	a9 00		lda #$00			lda 	#0
.9b25	80 08		bra $9b2f			bra 	NSMSetMantissa
.9b27					NSMSetZero:
.9b27	a9 00		lda #$00			lda 	#0
.9b29					NSMSetByte:
.9b29	9e 28 04	stz $0428,x			stz 	NSExponent,x 				; zero exponent, as integer.
.9b2c	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; status zero (integer)
.9b2f					NSMSetMantissa:
.9b2f	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; mantissa
.9b32	9e 10 04	stz $0410,x			stz 	NSMantissa1,x
.9b35	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.9b38	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.9b3b	60		rts				rts
.9b3c					NSMShiftLeft:
.9b3c	18		clc				clc
.9b3d					NSMRotateLeft:
.9b3d	3e 08 04	rol $0408,x			rol 	NSMantissa0,x
.9b40	3e 10 04	rol $0410,x			rol		NSMantissa1,x
.9b43	3e 18 04	rol $0418,x			rol		NSMantissa2,x
.9b46	3e 20 04	rol $0420,x			rol		NSMantissa3,x
.9b49	60		rts				rts
.9b4a					NSMShiftRight:
.9b4a	5e 20 04	lsr $0420,x			lsr 	NSMantissa3,x
.9b4d	7e 18 04	ror $0418,x			ror		NSMantissa2,x
.9b50	7e 10 04	ror $0410,x			ror		NSMantissa1,x
.9b53	7e 08 04	ror $0408,x			ror		NSMantissa0,x
.9b56	60		rts				rts
.9b57					NSMIsZero:
.9b57	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.9b5a	1d 18 04	ora $0418,x			ora		NSMantissa2,x
.9b5d	1d 10 04	ora $0410,x			ora		NSMantissa1,x
.9b60	1d 08 04	ora $0408,x			ora		NSMantissa0,x
.9b63	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/asmcore.asm

.a741					Assemble_ora:
.a741	20 99 82	jsr $8299		jsr	AssembleGroup1
>a744	01					.byte $01
.a745					Assemble_and:
.a745	20 99 82	jsr $8299		jsr	AssembleGroup1
>a748	21					.byte $21
.a749					Assemble_eor:
.a749	20 99 82	jsr $8299		jsr	AssembleGroup1
>a74c	41					.byte $41
.a74d					Assemble_adc:
.a74d	20 99 82	jsr $8299		jsr	AssembleGroup1
>a750	61					.byte $61
.a751					Assemble_sta:
.a751	20 99 82	jsr $8299		jsr	AssembleGroup1
>a754	81					.byte $81
.a755					Assemble_lda:
.a755	20 99 82	jsr $8299		jsr	AssembleGroup1
>a758	a1					.byte $a1
.a759					Assemble_cmp:
.a759	20 99 82	jsr $8299		jsr	AssembleGroup1
>a75c	c1					.byte $c1
.a75d					Assemble_sbc:
.a75d	20 99 82	jsr $8299		jsr	AssembleGroup1
>a760	e1					.byte $e1
.a761					Assemble_asl:
.a761	20 a0 82	jsr $82a0		jsr	AssembleGroup2
>a764	02					.byte $02
>a765	75					.byte $75
.a766					Assemble_rol:
.a766	20 a0 82	jsr $82a0		jsr	AssembleGroup2
>a769	22					.byte $22
>a76a	75					.byte $75
.a76b					Assemble_lsr:
.a76b	20 a0 82	jsr $82a0		jsr	AssembleGroup2
>a76e	42					.byte $42
>a76f	75					.byte $75
.a770					Assemble_ror:
.a770	20 a0 82	jsr $82a0		jsr	AssembleGroup2
>a773	62					.byte $62
>a774	75					.byte $75
.a775					Assemble_stx:
.a775	20 a0 82	jsr $82a0		jsr	AssembleGroup2
>a778	82					.byte $82
>a779	50					.byte $50
.a77a					Assemble_ldx:
.a77a	20 a0 82	jsr $82a0		jsr	AssembleGroup2
>a77d	a2					.byte $a2
>a77e	d0					.byte $d0
.a77f					Assemble_dec:
.a77f	20 a0 82	jsr $82a0		jsr	AssembleGroup2
>a782	c2					.byte $c2
>a783	55					.byte $55
.a784					Assemble_inc:
.a784	20 a0 82	jsr $82a0		jsr	AssembleGroup2
>a787	e2					.byte $e2
>a788	55					.byte $55
.a789					Assemble_stz:
.a789	20 a0 82	jsr $82a0		jsr	AssembleGroup2
>a78c	60					.byte $60
>a78d	44					.byte $44
.a78e					Assemble_bit:
.a78e	20 a0 82	jsr $82a0		jsr	AssembleGroup2
>a791	20					.byte $20
>a792	55					.byte $55
.a793					Assemble_sty:
.a793	20 a0 82	jsr $82a0		jsr	AssembleGroup2
>a796	80					.byte $80
>a797	54					.byte $54
.a798					Assemble_ldy:
.a798	20 a0 82	jsr $82a0		jsr	AssembleGroup2
>a79b	a0					.byte $a0
>a79c	d5					.byte $d5
.a79d					Assemble_cpy:
.a79d	20 a0 82	jsr $82a0		jsr	AssembleGroup2
>a7a0	c0					.byte $c0
>a7a1	d4					.byte $d4
.a7a2					Assemble_cpx:
.a7a2	20 a0 82	jsr $82a0		jsr	AssembleGroup2
>a7a5	e0					.byte $e0
>a7a6	d0					.byte $d0
.a7a7					Assemble_tsb:
.a7a7	20 a0 82	jsr $82a0		jsr	AssembleGroup2
>a7aa	00					.byte $00
>a7ab	50					.byte $50
.a7ac					Assemble_trb:
.a7ac	20 a0 82	jsr $82a0		jsr	AssembleGroup2
>a7af	10					.byte $10
>a7b0	50					.byte $50
.a7b1					Assemble_jsr:
.a7b1	20 a0 82	jsr $82a0		jsr	AssembleGroup2
>a7b4	14					.byte $14
>a7b5	10					.byte $10
.a7b6					Assemble_jmp:
.a7b6	20 a0 82	jsr $82a0		jsr	AssembleGroup2
>a7b9	40					.byte $40
>a7ba	10					.byte $10
.a7bb					Assemble_bpl:
.a7bb	20 f1 82	jsr $82f1		jsr	AssembleGroup3
>a7be	10					.byte $10
.a7bf					Assemble_bmi:
.a7bf	20 f1 82	jsr $82f1		jsr	AssembleGroup3
>a7c2	30					.byte $30
.a7c3					Assemble_bvc:
.a7c3	20 f1 82	jsr $82f1		jsr	AssembleGroup3
>a7c6	50					.byte $50
.a7c7					Assemble_bvs:
.a7c7	20 f1 82	jsr $82f1		jsr	AssembleGroup3
>a7ca	70					.byte $70
.a7cb					Assemble_bcc:
.a7cb	20 f1 82	jsr $82f1		jsr	AssembleGroup3
>a7ce	90					.byte $90
.a7cf					Assemble_bcs:
.a7cf	20 f1 82	jsr $82f1		jsr	AssembleGroup3
>a7d2	b0					.byte $b0
.a7d3					Assemble_bne:
.a7d3	20 f1 82	jsr $82f1		jsr	AssembleGroup3
>a7d6	d0					.byte $d0
.a7d7					Assemble_beq:
.a7d7	20 f1 82	jsr $82f1		jsr	AssembleGroup3
>a7da	f0					.byte $f0
.a7db					Assemble_bra:
.a7db	20 f1 82	jsr $82f1		jsr	AssembleGroup3
>a7de	80					.byte $80
.a7df					Assemble_brk:
.a7df	20 27 83	jsr $8327		jsr	AssembleGroup4
>a7e2	00					.byte $00
.a7e3					Assemble_php:
.a7e3	20 27 83	jsr $8327		jsr	AssembleGroup4
>a7e6	08					.byte $08
.a7e7					Assemble_clc:
.a7e7	20 27 83	jsr $8327		jsr	AssembleGroup4
>a7ea	18					.byte $18
.a7eb					Assemble_plp:
.a7eb	20 27 83	jsr $8327		jsr	AssembleGroup4
>a7ee	28					.byte $28
.a7ef					Assemble_sec:
.a7ef	20 27 83	jsr $8327		jsr	AssembleGroup4
>a7f2	38					.byte $38
.a7f3					Assemble_rti:
.a7f3	20 27 83	jsr $8327		jsr	AssembleGroup4
>a7f6	40					.byte $40
.a7f7					Assemble_pha:
.a7f7	20 27 83	jsr $8327		jsr	AssembleGroup4
>a7fa	48					.byte $48
.a7fb					Assemble_cli:
.a7fb	20 27 83	jsr $8327		jsr	AssembleGroup4
>a7fe	58					.byte $58
.a7ff					Assemble_phy:
.a7ff	20 27 83	jsr $8327		jsr	AssembleGroup4
>a802	5a					.byte $5a
.a803					Assemble_rts:
.a803	20 27 83	jsr $8327		jsr	AssembleGroup4
>a806	60					.byte $60
.a807					Assemble_pla:
.a807	20 27 83	jsr $8327		jsr	AssembleGroup4
>a80a	68					.byte $68
.a80b					Assemble_sei:
.a80b	20 27 83	jsr $8327		jsr	AssembleGroup4
>a80e	78					.byte $78
.a80f					Assemble_ply:
.a80f	20 27 83	jsr $8327		jsr	AssembleGroup4
>a812	7a					.byte $7a
.a813					Assemble_dey:
.a813	20 27 83	jsr $8327		jsr	AssembleGroup4
>a816	88					.byte $88
.a817					Assemble_txa:
.a817	20 27 83	jsr $8327		jsr	AssembleGroup4
>a81a	8a					.byte $8a
.a81b					Assemble_tya:
.a81b	20 27 83	jsr $8327		jsr	AssembleGroup4
>a81e	98					.byte $98
.a81f					Assemble_txs:
.a81f	20 27 83	jsr $8327		jsr	AssembleGroup4
>a822	9a					.byte $9a
.a823					Assemble_tay:
.a823	20 27 83	jsr $8327		jsr	AssembleGroup4
>a826	a8					.byte $a8
.a827					Assemble_tax:
.a827	20 27 83	jsr $8327		jsr	AssembleGroup4
>a82a	aa					.byte $aa
.a82b					Assemble_clv:
.a82b	20 27 83	jsr $8327		jsr	AssembleGroup4
>a82e	b8					.byte $b8
.a82f					Assemble_tsx:
.a82f	20 27 83	jsr $8327		jsr	AssembleGroup4
>a832	ba					.byte $ba
.a833					Assemble_iny:
.a833	20 27 83	jsr $8327		jsr	AssembleGroup4
>a836	c8					.byte $c8
.a837					Assemble_dex:
.a837	20 27 83	jsr $8327		jsr	AssembleGroup4
>a83a	ca					.byte $ca
.a83b					Assemble_cld:
.a83b	20 27 83	jsr $8327		jsr	AssembleGroup4
>a83e	d8					.byte $d8
.a83f					Assemble_phx:
.a83f	20 27 83	jsr $8327		jsr	AssembleGroup4
>a842	da					.byte $da
.a843					Assemble_stp:
.a843	20 27 83	jsr $8327		jsr	AssembleGroup4
>a846	db					.byte $db
.a847					Assemble_inx:
.a847	20 27 83	jsr $8327		jsr	AssembleGroup4
>a84a	e8					.byte $e8
.a84b					Assemble_nop:
.a84b	20 27 83	jsr $8327		jsr	AssembleGroup4
>a84e	ea					.byte $ea
.a84f					Assemble_sed:
.a84f	20 27 83	jsr $8327		jsr	AssembleGroup4
>a852	f8					.byte $f8
.a853					Assemble_plx:
.a853	20 27 83	jsr $8327		jsr	AssembleGroup4
>a856	fa					.byte $fa

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/constants.asm

.a857					DecimalScalarTable:
>a857	66 66 66 66				.dword $66666666 ; 0.1
>a85b	de					.byte $de
>a85c	1f 85 eb 51				.dword $51eb851f ; 0.01
>a860	db					.byte $db
>a861	4c 37 89 41				.dword $4189374c ; 0.001
>a865	d8					.byte $d8
>a866	ac 8b db 68				.dword $68db8bac ; 0.0001
>a86a	d4					.byte $d4
>a86b	24 d6 e2 53				.dword $53e2d624 ; 1e-05
>a86f	d1					.byte $d1
>a870	83 de 1b 43				.dword $431bde83 ; 1e-06
>a874	ce					.byte $ce
>a875	6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>a879	ca					.byte $ca
>a87a	89 3b e6 55				.dword $55e63b89 ; 1e-08
>a87e	c7					.byte $c7
>a87f	a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>a883	c4					.byte $c4
>a884	67 7f f3 6d				.dword $6df37f67 ; 1e-10
>a888	c0					.byte $c0
>a889	86 ff f5 57				.dword $57f5ff86 ; 1e-11
>a88d	bd					.byte $bd

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.asm

.a88e					SyntaxError:
.a88e	a9 02		lda #$02		lda	#2
.a890	4c 6f 8f	jmp $8f6f		jmp	ErrorHandler
.a893					RangeError:
.a893	a9 04		lda #$04		lda	#4
.a895	4c 6f 8f	jmp $8f6f		jmp	ErrorHandler
.a898					TypeError:
.a898	a9 05		lda #$05		lda	#5
.a89a	4c 6f 8f	jmp $8f6f		jmp	ErrorHandler
.a89d					ArgumentError:
.a89d	a9 07		lda #$07		lda	#7
.a89f	4c 6f 8f	jmp $8f6f		jmp	ErrorHandler
.a8a2					NotDoneError:
.a8a2	a9 0c		lda #$0c		lda	#12
.a8a4	4c 6f 8f	jmp $8f6f		jmp	ErrorHandler
.a8a7					ErrorText:
>a8a7	42 72 65 61 6b 00			.text	"Break",0
>a8ad	53 79 6e 74 61 78 20 65			.text	"Syntax error",0
>a8b5	72 72 6f 72 00
>a8ba	44 69 76 69 73 69 6f 6e			.text	"Division by zero",0
>a8c2	20 62 79 20 7a 65 72 6f 00
>a8cb	4f 75 74 20 6f 66 20 52			.text	"Out of Range",0
>a8d3	61 6e 67 65 00
>a8d8	54 79 70 65 20 6d 69 73			.text	"Type mismatch",0
>a8e0	6d 61 74 63 68 00
>a8e6	4f 75 74 20 6f 66 20 6d			.text	"Out of memory",0
>a8ee	65 6d 6f 72 79 00
>a8f4	49 6c 6c 65 67 61 6c 20			.text	"Illegal argument",0
>a8fc	61 72 67 75 6d 65 6e 74 00
>a905	53 74 6f 70 00				.text	"Stop",0
>a90a	53 74 72 69 6e 67 20 74			.text	"String too long",0
>a912	6f 6f 20 6c 6f 6e 67 00
>a91a	41 73 73 65 72 74 69 6f			.text	"Assertion failed",0
>a922	6e 20 66 61 69 6c 65 64 00
>a92b	4f 75 74 20 6f 66 20 64			.text	"Out of data",0
>a933	61 74 61 00
>a937	55 6e 69 6d 70 6c 65 6d			.text	"Unimplemented",0
>a93f	65 6e 74 65 64 00
>a945	4e 6f 20 73 75 63 68 20			.text	"No such line number",0
>a94d	6c 69 6e 65 20 6e 75 6d 62 65 72 00
>a959	52 65 74 75 72 6e 20 77			.text	"Return without Gosub",0
>a961	69 74 68 6f 75 74 20 47 6f 73 75 62 00
>a96e	55 6e 74 69 6c 20 77 69			.text	"Until without Repeat",0
>a976	74 68 6f 75 74 20 52 65 70 65 61 74 00
>a983	57 65 6e 64 20 77 69 74			.text	"Wend without While",0
>a98b	68 6f 75 74 20 57 68 69 6c 65 00
>a996	4e 65 78 74 20 77 69 74			.text	"Next without For",0
>a99e	68 6f 75 74 20 46 6f 72 00
>a9a7	42 41 53 49 43 20 53 74			.text	"BASIC Stack full",0
>a9af	61 63 6b 20 66 75 6c 6c 00
>a9b8	4f 70 65 6e 20 53 74 72			.text	"Open Structure",0
>a9c0	75 63 74 75 72 65 00
>a9c7	45 6e 64 50 72 6f 63 20			.text	"EndProc without call",0
>a9cf	77 69 74 68 6f 75 74 20 63 61 6c 6c 00
>a9dc	41 72 72 61 79 20 61 6c			.text	"Array already defined",0
>a9e4	72 65 61 64 79 20 64 65 66 69 6e 65 64 00
>a9f2	41 72 72 61 79 20 73 69			.text	"Array size",0
>a9fa	7a 65 00
>a9fd	42 61 64 20 61 72 72 61			.text	"Bad array index",0
>aa05	79 20 69 6e 64 65 78 00

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/timestamp.asm

>aa0d	42 75 69 6c 74 20 46 72			.text "Built Friday 07-Oct-2022. Build 588."
>aa15	69 64 61 79 20 30 37 2d 4f 63 74 2d 32 30 32 32
>aa25	2e 20 42 75 69 6c 64 20 35 38 38 2e

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/hardware/junior/extern.asm

.aa31					EXTPrintCharacter:
.aa31	48		pha				pha
.aa32	da		phx				phx
.aa33	5a		phy				phy
.aa34	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.aa37	7a		ply				ply
.aa38	fa		plx				plx
.aa39	68		pla				pla
.aa3a	60		rts				rts
.aa3b					EXTInputSingleCharacter:
.aa3b	da		phx				phx
.aa3c	5a		phy				phy
.aa3d					_EISCWait:
.aa3d	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.aa40	c9 00		cmp #$00			cmp 	#0
.aa42	f0 f9		beq $aa3d			beq 	_EISCWait
.aa44	7a		ply				ply
.aa45	fa		plx				plx
.aa46	60		rts				rts
.aa47					EXTInputLine:
.aa47	a2 00		ldx #$00			ldx 	#0 							; position in line <- start of line
.aa49					_ILLoop:
.aa49	da		phx				phx 								; read character in
.aa4a	20 cf ff	jsr $ffcf			jsr 	$FFCF
.aa4d	fa		plx				plx
.aa4e	c9 08		cmp #$08			cmp 	#8 							; backspace, CBM doesn't need this.
.aa50	f0 12		beq $aa64			beq 	_ILBackspace
.aa52	c9 0d		cmp #$0d			cmp 	#13							; exit ?
.aa54	f0 15		beq $aa6b			beq 	_ILExit
.aa56	c9 20		cmp #$20			cmp 	#32 						; ignore other control
.aa58	90 ef		bcc $aa49			bcc 	_ILLoop
.aa5a	e0 50		cpx #$50			cpx 	#MaxLineSize 				; already full buffer
.aa5c	f0 eb		beq $aa49			beq 	_ILLoop
.aa5e	9d a6 05	sta $05a6,x			sta 	lineBuffer,x 				; save it
.aa61	e8		inx				inx
.aa62	80 e5		bra $aa49			bra 	_ILLoop
.aa64					_ILBackspace:
.aa64	e0 00		cpx #$00			cpx 	#0  						; can't backspace, start of line.
.aa66	f0 e1		beq $aa49			beq 	_ILLoop
.aa68	ca		dex				dex 								; back one.
.aa69	80 de		bra $aa49			bra 	_ILLoop
.aa6b					_ILExit:
.aa6b	20 31 aa	jsr $aa31			jsr 	EXTPrintCharacter
.aa6e	9e a6 05	stz $05a6,x			stz 	lineBuffer,x 				; make ASCIIZ and exit with address in XA
.aa71	60		rts				rts
.aa72					EXTBreakCheck:
.aa72	4c e1 ff	jmp $ffe1			jmp		$FFE1

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/delete.asm

.aa75					MemoryDeleteLine:
.aa75	20 94 aa	jsr $aa94			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.aa78	b2 30		lda ($30)			lda 	(codePtr) 					; size to delete => y
.aa7a	a8		tay				tay
.aa7b					_MDDLLoop:
.aa7b	b1 30		lda ($30),y			lda 	(codePtr),y 				; copy down
.aa7d	92 30		sta ($30)			sta 	(codePtr)
.aa7f	a5 30		lda $30				lda 	codePtr 					; check done the lot.
.aa81	c5 3a		cmp $3a				cmp 	zTemp2
.aa83	d0 07		bne $aa8c			bne 	_MDLDLNext
.aa85	a5 31		lda $31				lda 	codePtr+1
.aa87	c5 3b		cmp $3b				cmp 	zTemp2+1
.aa89	d0 01		bne $aa8c			bne 	_MDLDLNext
.aa8b					_MDDLExit:
.aa8b	60		rts				rts
.aa8c					_MDLDLNext:
.aa8c	e6 30		inc $30				inc 	codePtr						; next byte
.aa8e	d0 eb		bne $aa7b			bne 	_MDDLLoop
.aa90	e6 31		inc $31				inc 	codePtr+1
.aa92	80 e7		bra $aa7b			bra 	_MDDLLoop
.aa94					IMemoryFindEnd:
.aa94	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.aa96	85 3a		sta $3a				sta 	0+zTemp2
.aa98	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.aa9a	85 3b		sta $3b				sta 	1+zTemp2
.aa9c					_MDLFELoop:
.aa9c	b2 3a		lda ($3a)			lda 	(zTemp2)
.aa9e	f0 0b		beq $aaab			beq 	_MDLFEExit
.aaa0	18		clc				clc
.aaa1	65 3a		adc $3a				adc 	zTemp2
.aaa3	85 3a		sta $3a				sta 	zTemp2
.aaa5	90 f5		bcc $aa9c			bcc 	_MDLFELoop
.aaa7	e6 3b		inc $3b				inc 	zTemp2+1
.aaa9	80 f1		bra $aa9c			bra 	_MDLFELoop
.aaab					_MDLFEExit:
.aaab	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/insert.asm

.aaac					MemoryInsertLine:
.aaac	08		php				php
.aaad	20 94 aa	jsr $aa94			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.aab0	a5 3b		lda $3b				lda 	zTemp2+1 					; space ?
.aab2	1a		inc a				inc 	a
.aab3	c9 7f		cmp #$7f			cmp 	#(BasicEnd >> 8)-1
.aab5	b0 36		bcs $aaed			bcs 	_MDLIError
.aab7	28		plp				plp
.aab8	90 08		bcc $aac2			bcc 	_MDLIFound
.aaba	a5 3a		lda $3a				lda 	zTemp2 						; if CS on entry append.
.aabc	85 30		sta $30				sta 	codePtr
.aabe	a5 3b		lda $3b				lda 	zTemp2+1
.aac0	85 31		sta $31				sta 	codePtr+1
.aac2					_MDLIFound:
.aac2	ad a6 04	lda $04a6			lda 	tokenOffset 				; insert gap in Y, the offset, e.g. length of the new line
.aac5	a8		tay				tay
.aac6					_MDLIInsert:
.aac6	b2 3a		lda ($3a)			lda 	(zTemp2) 					; shift one byte up , at least one covers end case.
.aac8	91 3a		sta ($3a),y			sta 	(zTemp2),y 					; work from top down.
.aaca	a5 30		lda $30				lda 	codePtr 					; done insert point ?
.aacc	c5 3a		cmp $3a				cmp 	zTemp2
.aace	d0 06		bne $aad6			bne 	_MDLINext
.aad0	a5 31		lda $31				lda 	codePtr+1
.aad2	c5 3b		cmp $3b				cmp 	zTemp2+1
.aad4	f0 0a		beq $aae0			beq 	_MDLIHaveSpace
.aad6					_MDLINext:
.aad6	a5 3a		lda $3a				lda 	zTemp2 						; if no, keep zTemp2 going backwards
.aad8	d0 02		bne $aadc			bne 	_MDLINoBorrow
.aada	c6 3b		dec $3b				dec 	zTemp2+1
.aadc					_MDLINoBorrow:
.aadc	c6 3a		dec $3a				dec 	zTemp2
.aade	80 e6		bra $aac6			bra 	_MDLIInsert
.aae0					_MDLIHaveSpace:
.aae0	ac a6 04	ldy $04a6			ldy 	tokenOffset 				; bytes to copy
.aae3	88		dey				dey 								; from offset-1 to 0
.aae4					_MDLICopy:
.aae4	b9 a6 04	lda $04a6,y			lda 	tokenOffset,y
.aae7	91 30		sta ($30),y			sta 	(codePtr),y
.aae9	88		dey				dey
.aaea	10 f8		bpl $aae4			bpl 	_MDLICopy
.aaec	60		rts				rts
.aaed					_MDLIError:
.aaed	a9 06		lda #$06		lda	#6
.aaef	4c 6f 8f	jmp $8f6f		jmp	ErrorHandler
.aaf2					MDLAppendLine:
.aaf2	86 37		stx $37				stx 	zTemp0+1 					; save new line at zTemp0
.aaf4	85 36		sta $36				sta 	zTemp0
.aaf6	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.aaf8	85 38		sta $38				sta 	0+zTemp1
.aafa	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.aafc	85 39		sta $39				sta 	1+zTemp1
.aafe	b2 38		lda ($38)			lda 	(zTemp1)
.ab00	d0 0a		bne $ab0c			bne 	_MDLANoInitialise
.ab02	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.ab04	8d 47 06	sta $0647			sta 	0+AppendPointer
.ab07	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.ab09	8d 48 06	sta $0648			sta 	1+AppendPointer
.ab0c					_MDLANoInitialise:
.ab0c	18		clc				clc
.ab0d	ad 47 06	lda $0647			lda 	AppendPointer 				; copy append pointer to zTemp1 adding the offset as you go
.ab10	85 38		sta $38				sta 	zTemp1
.ab12	72 36		adc ($36)			adc 	(zTemp0)
.ab14	8d 47 06	sta $0647			sta 	AppendPointer
.ab17	ad 48 06	lda $0648			lda 	AppendPointer+1
.ab1a	85 39		sta $39				sta 	zTemp1+1
.ab1c	69 00		adc #$00			adc 	#0
.ab1e	8d 48 06	sta $0648			sta 	AppendPointer+1
.ab21	a0 00		ldy #$00			ldy 	#0
.ab23					_MDLACopy:
.ab23	b1 36		lda ($36),y			lda 	(zTemp0),y 					; copy new line in
.ab25	91 38		sta ($38),y			sta 	(zTemp1),y
.ab27	c8		iny				iny
.ab28	98		tya				tya
.ab29	d2 36		cmp ($36)			cmp 	(zTemp0) 					; done whole line
.ab2b	d0 f6		bne $ab23			bne 	_MDLACopy
.ab2d	a9 00		lda #$00			lda 	#0 							; end of program.
.ab2f	91 38		sta ($38),y			sta 	(zTemp1),y
.ab31	60		rts				rts
.0647					AppendPointer:
>0647							.fill 	2

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/memory.asm

.9b64					MemoryNew:
.9b64	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.9b66	85 30		sta $30				sta 	codePtr
.9b68	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.9b6a	85 31		sta $31				sta 	codePtr+1
.9b6c	a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.9b6e	92 30		sta ($30)			sta 	(codePtr)
.9b70	60		rts				rts
.9b71					MemoryInline:
.9b71	98		tya				tya 								; put address into stack,x
.9b72	18		clc				clc
.9b73	65 30		adc $30				adc 	codePtr
.9b75	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9b78	a5 31		lda $31				lda 	codePtr+1
.9b7a	69 00		adc #$00			adc 	#0
.9b7c	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9b7f	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.9b82	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.9b85	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/search.asm

.9b86					MemorySearch:
.9b86	85 36		sta $36				sta 	zTemp0 						; save line number zTemp0
.9b88	86 37		stx $37				stx 	zTemp0+1
.9b8a	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.9b8c	85 30		sta $30				sta 	codePtr
.9b8e	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.9b90	85 31		sta $31				sta 	codePtr+1
.9b92					_MTAXLoop:
.9b92	b2 30		lda ($30)			lda 	(codePtr)
.9b94	18		clc				clc
.9b95	f0 21		beq $9bb8			beq 	_MTAXExit 					; reached end, exit with CC.
.9b97	a0 01		ldy #$01			ldy 	#1 							; calculate current line# - requested line#
.9b99	b1 30		lda ($30),y			lda 	(codePtr),y
.9b9b	38		sec				sec
.9b9c	e5 36		sbc $36				sbc 	zTemp0
.9b9e	85 38		sta $38				sta 	zTemp1 						; save interim to set Z
.9ba0	c8		iny				iny 								; do the MSB
.9ba1	b1 30		lda ($30),y			lda 	(codePtr),y
.9ba3	e5 37		sbc $37				sbc 	zTemp0+1
.9ba5	05 38		ora $38				ora 	zTemp1
.9ba7	f0 0f		beq $9bb8			beq 	_MTAXExit	 				; found
.9ba9	b0 0d		bcs $9bb8			bcs 	_MTAXExit 					; current < required exit
.9bab	18		clc				clc
.9bac	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.9bae	65 30		adc $30				adc 	codePtr
.9bb0	85 30		sta $30				sta 	codePtr
.9bb2	90 02		bcc $9bb6			bcc 	_CREExit
.9bb4	e6 31		inc $31				inc 	codePtr+1
.9bb6					_CREExit:
.9bb6	80 da		bra $9b92			bra 	_MTAXLoop
.9bb8					_MTAXExit:
.9bb8	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/bytes.asm

.9bb9					StackPushByte:
.9bb9	48		pha				pha 								; save byte
.9bba	a5 34		lda $34				lda 	BasicStack
.9bbc	d0 09		bne $9bc7			bne 	_SPBNoBorrow
.9bbe	c6 35		dec $35				dec 	BasicStack+1
.9bc0	48		pha				pha
.9bc1	a5 35		lda $35				lda 	BasicStack+1
.9bc3	c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.9bc5	90 06		bcc $9bcd			bcc 	_SPBMemory
.9bc7					_SPBNoBorrow:
.9bc7	c6 34		dec $34				dec 	BasicStack
.9bc9	68		pla				pla 								; get back and write
.9bca	92 34		sta ($34)			sta 	(BasicStack)
.9bcc	60		rts				rts
.9bcd					_SPBMemory:
.9bcd	a9 12		lda #$12		lda	#18
.9bcf	4c 6f 8f	jmp $8f6f		jmp	ErrorHandler
.9bd2					StackPopByte:
.9bd2	b2 34		lda ($34)			lda 	(BasicStack)
.9bd4	e6 34		inc $34				inc 	BasicStack
.9bd6	d0 02		bne $9bda			bne 	_SPBNoCarry
.9bd8	e6 35		inc $35				inc 	BasicStack+1
.9bda					_SPBNoCarry:
.9bda	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/frames.asm

.9bdb					StackOpen:
.9bdb	48		pha				pha 								; save frame byte
.9bdc	29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.9bde	0a		asl a				asl 	a 							; claim twice this for storage
.9bdf	49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.9be1	38		sec				sec 								; so basically subtracting from
.9be2	65 34		adc $34				adc 	basicStack 	 				; basicStack
.9be4	85 34		sta $34				sta 	basicStack
.9be6	b0 08		bcs $9bf0			bcs 	_SONoBorrow
.9be8	c6 35		dec $35				dec 	basicStack+1
.9bea	a5 35		lda $35				lda 	basicStack+1 				; have we reached stack overflow
.9bec	c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.9bee	90 04		bcc $9bf4			bcc 	_SOMemory
.9bf0					_SONoBorrow:
.9bf0	68		pla				pla 								; get marker back and write at TOS
.9bf1	92 34		sta ($34)			sta 	(basicStack)
.9bf3	60		rts				rts
.9bf4					_SOMemory:
.9bf4	a9 12		lda #$12		lda	#18
.9bf6	4c 6f 8f	jmp $8f6f		jmp	ErrorHandler
.9bf9					StackClose:
.9bf9	b2 34		lda ($34)			lda 	(basicStack) 				; get TOS marker
.9bfb	29 0f		and #$0f			and 	#$0F 						; bytes to add back
.9bfd	0a		asl a				asl 	a 							; claim twice this.
.9bfe	65 34		adc $34				adc 	basicStack 					; add to the stack pointer.
.9c00	85 34		sta $34				sta 	basicStack
.9c02	90 02		bcc $9c06			bcc 	_SCExit
.9c04	e6 35		inc $35				inc 	basicStack+1
.9c06					_SCExit:
.9c06	60		rts				rts
.9c07					StackCheckFrame:
.9c07	48		pha				pha
.9c08					_StackRemoveLocals:
.9c08	b2 34		lda ($34)			lda 	(basicStack) 				; check for local, keep popping them
.9c0a	c9 03		cmp #$03			cmp 	#STK_LOCALS+1
.9c0c	b0 05		bcs $9c13			bcs 	_SCNoLocal
.9c0e	20 4f a2	jsr $a24f			jsr 	LocalPopValue
.9c11	80 f5		bra $9c08			bra 	_StackRemoveLocals
.9c13					_SCNoLocal:
.9c13	68		pla				pla
.9c14	52 34		eor ($34)			eor 	(basicStack) 				; xor with toS marker
.9c16	29 f0		and #$f0			and 	#$F0 						; check type bits
.9c18	d0 01		bne $9c1b			bne 	_SCFError 					; different, we have structures mixed up
.9c1a	60		rts				rts
.9c1b					_SCFError:
.9c1b	8a		txa				txa 								; report error X
.9c1c	4c 6f 8f	jmp $8f6f			jmp 	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/location.asm

.9c1f					STKSaveCodePosition:
.9c1f	5a		phy				phy
.9c20	98		tya				tya 								; save Y
.9c21	a0 05		ldy #$05			ldy 	#5
.9c23	91 34		sta ($34),y			sta 	(basicStack),y
.9c25	88		dey				dey 								; save Code Pointer
.9c26					_STKSaveLoop:
.9c26	b9 2f 00	lda $002f,y			lda 	safePtr-1,y 				; allows us to access the pointer w/out issues.
.9c29	91 34		sta ($34),y			sta 	(basicStack),y
.9c2b	88		dey				dey
.9c2c	d0 f8		bne $9c26			bne 	_STKSaveLoop
.9c2e	7a		ply				ply
.9c2f	60		rts				rts
.9c30					STKLoadCodePosition:
.9c30	a0 01		ldy #$01			ldy 	#1 							; load code pointer back
.9c32					_STKLoadLoop:
.9c32	b1 34		lda ($34),y			lda 	(basicStack),y
.9c34	99 2f 00	sta $002f,y			sta 	safePtr-1,y
.9c37	c8		iny				iny
.9c38	c0 05		cpy #$05			cpy 	#5
.9c3a	d0 f6		bne $9c32			bne 	_STKLoadLoop
.9c3c	b1 34		lda ($34),y			lda 	(basicStack),y 				; get Y offset
.9c3e	a8		tay				tay
.9c3f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/setup.asm

.9c40					StackReset:
.9c40	a9 ff		lda #$ff			lda 	#((BasicStackBase+BasicStackSize-1) & $FF)
.9c42	85 34		sta $34				sta 	0+basicStack
.9c44	a9 0f		lda #$0f			lda 	#((BasicStackBase+BasicStackSize-1) >> 8)
.9c46	85 35		sta $35				sta 	1+basicStack
.9c48	a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.9c4a	92 34		sta ($34)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.9c4c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/concrete.asm

.ab32					StringConcrete:
.ab32	5a		phy				phy 								; save position on stack
.ab33	20 36 98	jsr $9836			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.ab36	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy target string to zTemp1
.ab39	85 38		sta $38				sta 	zTemp1
.ab3b	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.ab3e	85 39		sta $39				sta 	zTemp1+1
.ab40	a0 ff		ldy #$ff			ldy 	#$FF	 					; calculate string length
.ab42					_SALength:
.ab42	c8		iny				iny
.ab43	b1 38		lda ($38),y			lda 	(zTemp1),y
.ab45	d0 fb		bne $ab42			bne 	_SALength
.ab47	c0 fd		cpy #$fd			cpy 	#253 						; string too long
.ab49	b0 3f		bcs $ab8a			bcs 	_SALengthError
.ab4b	98		tya				tya 				 				; length of the new string
.ab4c	18		clc				clc
.ab4d	69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.ab4f	90 02		bcc $ab53			bcc 	_SAHaveLength
.ab51	a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.ab53					_SAHaveLength:
.ab53	48		pha				pha 								; save length.
.ab54	38		sec				sec
.ab55	49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.ab57	6d 8e 04	adc $048e			adc 	StringMemory
.ab5a	8d 8e 04	sta $048e			sta 	StringMemory
.ab5d	85 3a		sta $3a				sta 	zTemp2 						; update storage address
.ab5f	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; update mantissa address
.ab62	a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.ab64	6d 8f 04	adc $048f			adc 	StringMemory+1
.ab67	8d 8f 04	sta $048f			sta 	StringMemory+1
.ab6a	85 3b		sta $3b				sta 	zTemp2+1
.ab6c	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.ab6f	68		pla				pla 								; save length-3 (chars allowed) in first byte
.ab70	38		sec				sec
.ab71	e9 03		sbc #$03			sbc 	#3
.ab73	92 3a		sta ($3a)			sta 	(zTemp2)
.ab75	a9 00		lda #$00			lda 	#0 							; clear the status byte.
.ab77	a0 01		ldy #$01			ldy 	#1
.ab79	91 3a		sta ($3a),y			sta 	(zTemp2),y
.ab7b					_SACopyNewString:
.ab7b	a0 00		ldy #$00			ldy 	#0
.ab7d					_SACopyNSLoop:
.ab7d	b1 38		lda ($38),y			lda 	(zTemp1),y 					; get character
.ab7f	c8		iny				iny 								; write two on in string storage
.ab80	c8		iny				iny
.ab81	91 3a		sta ($3a),y			sta 	(zTemp2),y
.ab83	88		dey				dey 								; this makes it one one.
.ab84	c9 00		cmp #$00			cmp 	#0 							; until EOS copied
.ab86	d0 f5		bne $ab7d			bne 	_SACopyNSLoop
.ab88	7a		ply				ply
.ab89	60		rts				rts
.ab8a					_SALengthError:
.ab8a	a9 09		lda #$09		lda	#9
.ab8c	4c 6f 8f	jmp $8f6f		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/stringalloc.asm

.ab8f					StringSystemInitialise:
.ab8f	a9 ff		lda #$ff			lda 	#((EndVariableSpace-1) & $FF)
.ab91	8d 8e 04	sta $048e			sta 	0+StringMemory
.ab94	a9 1f		lda #$1f			lda 	#((EndVariableSpace-1) >> 8)
.ab96	8d 8f 04	sta $048f			sta 	1+StringMemory
.ab99	9c ff 1f	stz $1fff			stz 	EndVariableSpace-1 			; put a zero at the end, so know end of string memory.
.ab9c	60		rts				rts
.ab9d					StringSpaceInitialise:
.ab9d	20 36 98	jsr $9836			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.aba0	a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.aba2	8d 90 04	sta $0490			sta 	StringInitialised
.aba5	ad 8e 04	lda $048e			lda 	StringMemory 				; allocate 256 bytes for one concreted string
.aba8	8d 91 04	sta $0491			sta 	StringTempPointer
.abab	ad 8f 04	lda $048f			lda 	StringMemory+1
.abae	3a		dec a				dec 	a
.abaf	8d 92 04	sta $0492			sta 	StringTempPointer+1
.abb2	60		rts				rts
.abb3					StringTempAllocate:
.abb3	c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.abb5	b0 35		bcs $abec			bcs 	_STALength
.abb7	2c 90 04	bit $0490			bit 	StringInitialised 			; already initialised
.abba	30 05		bmi $abc1			bmi 	_STAAllocate
.abbc	48		pha				pha 								; save value to subtract.
.abbd	20 9d ab	jsr $ab9d			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.abc0	68		pla				pla 								; restore it
.abc1					_STAAllocate:
.abc1	49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.abc3	18		clc				clc  								; deliberate allows one more
.abc4	6d 91 04	adc $0491			adc 	StringTempPointer 			; subtract from temp pointer
.abc7	8d 91 04	sta $0491			sta 	StringTempPointer
.abca	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; address in mantissa
.abcd	85 3c		sta $3c				sta 	zsTemp 						; and zsTemp
.abcf	ad 92 04	lda $0492			lda 	StringTempPointer+1
.abd2	69 ff		adc #$ff			adc 	#$FF
.abd4	8d 92 04	sta $0492			sta 	StringTempPointer+1
.abd7	85 3d		sta $3d				sta 	zsTemp+1
.abd9	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.abdc	9e 18 04	stz $0418,x			stz 	NSMantissa2,x 				; set the typing data
.abdf	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.abe2	a9 10		lda #$10			lda 	#NSTString
.abe4	9d 00 04	sta $0400,x			sta 	NSStatus,x
.abe7	a9 00		lda #$00			lda 	#0 							; clear the target string
.abe9	92 3c		sta ($3c)			sta 	(zsTemp)
.abeb	60		rts				rts
.abec					_STALength:
.abec	a9 09		lda #$09		lda	#9
.abee	4c 6f 8f	jmp $8f6f		jmp	ErrorHandler
.abf1					StringTempWrite:
.abf1	48		pha				pha
.abf2	92 3c		sta ($3c)			sta 	(zsTemp)
.abf4	e6 3c		inc $3c				inc 	zsTemp
.abf6	d0 02		bne $abfa			bne 	_STWNoCarry
.abf8	e6 3d		inc $3d				inc 	zsTemp+1
.abfa					_STWNoCarry:
.abfa	a9 00		lda #$00			lda 	#0
.abfc	92 3c		sta ($3c)			sta 	(zsTemp)
.abfe	68		pla				pla
.abff	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/backload.asm

.9c4d					BackloadProgram:
.9c4d	a2 ff		ldx #$ff			ldx 	#$FF
.9c4f	20 77 9c	jsr $9c77			jsr 	BLReadByte
.9c52	30 1f		bmi $9c73			bmi 	_BPExit
.9c54					_BPCopy:
.9c54	e8		inx				inx  								; copy byte in
.9c55	9d a6 05	sta $05a6,x			sta 	lineBuffer,x
.9c58	9e a7 05	stz $05a7,x			stz 	lineBuffer+1,x
.9c5b	20 77 9c	jsr $9c77			jsr 	BLReadByte 					; read next byte
.9c5e	30 0a		bmi $9c6a			bmi 	_BPEndLine 					; -ve = EOL
.9c60	c9 09		cmp #$09			cmp 	#9 							; handle TAB
.9c62	d0 02		bne $9c66			bne 	_BPNotTab
.9c64	a9 20		lda #$20			lda 	#' '
.9c66					_BPNotTab:
.9c66	c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.9c68	b0 ea		bcs $9c54			bcs 	_BPCopy
.9c6a					_BPEndLine:
.9c6a	20 a0 9f	jsr $9fa0			jsr 	TokeniseLine 				; tokenise the line.
.9c6d	38		sec				sec 								; append not insert
.9c6e	20 ac aa	jsr $aaac			jsr 	MemoryInsertLine 			; append to current program
.9c71	80 da		bra $9c4d			bra 	BackloadProgram
.9c73					_BPExit:
.9c73	20 9f 85	jsr $859f			jsr 	ClearCommand 				; clear variables etc.
.9c76	60		rts				rts
.9c77					BLReadByte:
.9c77					_BLLoad:
.9c77	ad 00 30	lda $3000			lda 	$3000 						; hardcoded in the makefile.
.9c7a	ee 78 9c	inc $9c78			inc 	_BLLoad+1
.9c7d	d0 03		bne $9c82			bne 	_BLNoCarry
.9c7f	ee 79 9c	inc $9c79			inc 	_BLLoad+2
.9c82					_BLNoCarry:
.9c82	c9 00		cmp #$00			cmp 	#0
.9c84	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/searchtokens.asm

.9c85					TokeniseSearchTable:
.9c85	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token.
.9c87	85 36		sta $36				sta 	zTemp0
.9c89	a0 00		ldy #$00			ldy 	#0
.9c8b	a9 80		lda #$80			lda 	#$80 						; token #
.9c8d	85 38		sta $38				sta 	zTemp1
.9c8f					_TSTLoop:
.9c8f	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.9c91	30 49		bmi $9cdc			bmi 	_TSTFail 					; -ve = end of table
.9c93	f0 2e		beq $9cc3			beq 	_TSTNext 					; zero, check next it's a dummy
.9c95	c8		iny				iny 								; get the hash
.9c96	b1 36		lda ($36),y			lda 	(zTemp0),y
.9c98	88		dey				dey
.9c99	cd 83 04	cmp $0483			cmp 	identHash 					; check they match, if not go to next
.9c9c	d0 25		bne $9cc3			bne 	_TSTNext
.9c9e	ad 82 04	lda $0482			lda 	identTypeEnd 				; length of identifier
.9ca1	38		sec				sec
.9ca2	ed 80 04	sbc $0480			sbc 	identStart
.9ca5	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; no match, then return.
.9ca7	d0 1a		bne $9cc3			bne 	_TSTNext
.9ca9	5a		phy				phy 								; save Y , we might fail
.9caa	c8		iny				iny 								; point to text
.9cab	c8		iny				iny
.9cac	ae 80 04	ldx $0480			ldx 	identStart 					; offset in line buffer in X
.9caf					_TSTCompareName:
.9caf	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; compare text.
.9cb2	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.9cb4	d0 0c		bne $9cc2			bne 	_TSTNextPullY 				; fail, pullY and do next
.9cb6	e8		inx				inx
.9cb7	c8		iny				iny
.9cb8	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; complete match.
.9cbb	d0 f2		bne $9caf			bne 	_TSTCompareName
.9cbd	7a		ply				ply 								; throw Y
.9cbe	a5 38		lda $38				lda 	zTemp1 						; get token #
.9cc0	38		sec				sec 								; return with CS = passed.
.9cc1	60		rts				rts
.9cc2					_TSTNextPullY:
.9cc2	7a		ply				ply 								; restore current, fall through.
.9cc3					_TSTNext:
.9cc3	e6 38		inc $38				inc 	zTemp1 						; token counter
.9cc5	98		tya				tya
.9cc6	18		clc				clc
.9cc7	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.9cc9	1a		inc a				inc 	a 							; +1
.9cca	1a		inc a				inc 	a 							; +2
.9ccb	a8		tay				tay
.9ccc	10 c1		bpl $9c8f			bpl 	_TSTLoop 					; if Y < $80 loop back
.9cce	98		tya				tya 								; add Y to zTemp0 and reset Y
.9ccf	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.9cd1	18		clc				clc  								; but have tables > 255 bytes
.9cd2	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.9cd4	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.9cd6	90 b7		bcc $9c8f			bcc 	_TSTLoop
.9cd8	e6 37		inc $37				inc 	zTemp0+1
.9cda	80 b3		bra $9c8f			bra 	_TSTLoop
.9cdc					_TSTFail:
.9cdc	18		clc				clc
.9cdd	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/tokenise.asm


;******  Processing file: ./common/tokeniser/../generated/kwdtext.dat

.9cde					KeywordSet0:
>9cde	00 65					.text	0,$65,""               ; $80 !0:EOF
>9ce0	00 58					.text	0,$58,""               ; $81 !1:SH1
>9ce2	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>9ce4	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $83 ABS(
>9cea	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $84 ALLOC(
>9cf2	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $85 ASC(
>9cf8	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $86 CHR$(
>9cff	05 6b 46 41 4c 53 45			.text	5,$6b,"FALSE"          ; $87 FALSE
>9d06	05 44 46 52 41 43 28			.text	5,$44,"FRAC("          ; $88 FRAC(
>9d0d	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $89 INT(
>9d13	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $8a ISVAL(
>9d1b	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $8b LEFT$(
>9d23	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $8c LEN(
>9d29	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $8d MID$(
>9d30	04 19 4e 4f 54 28			.text	4,$19,"NOT("           ; $8e NOT(
>9d36	07 e9 52 41 4e 44 4f 4d			.text	7,$e9,"RANDOM("        ; $8f RANDOM(
>9d3e	28
>9d3f	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $90 RIGHT$(
>9d47	28
>9d48	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $91 RND(
>9d4e	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $92 SGN(
>9d54	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $93 SPC(
>9d5a	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $94 STR$(
>9d61	04 40 54 52 55 45			.text	4,$40,"TRUE"           ; $95 TRUE
>9d67	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $96 VAL(
>9d6d	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $97 FOR
>9d72	02 8f 49 46				.text	2,$8f,"IF"             ; $98 IF
>9d76	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $99 PROC
>9d7c	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $9a REPEAT
>9d84	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $9b WHILE
>9d8b	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $9c ENDIF
>9d92	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $9d ENDPROC
>9d9a	43
>9d9b	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $9e NEXT
>9da1	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $9f THEN
>9da7	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $a0 UNTIL
>9dae	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $a1 WEND
>9db4	04 1c 43 41 4c 4c			.text	4,$1c,"CALL"           ; $a2 CALL
>9dba	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $a3 CLS
>9dbf	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $a4 DATA
>9dc5	03 da 44 49 4d				.text	3,$da,"DIM"            ; $a5 DIM
>9dca	06 db 44 4f 57 4e 54 4f			.text	6,$db,"DOWNTO"         ; $a6 DOWNTO
>9dd2	04 29 45 4c 53 45			.text	4,$29,"ELSE"           ; $a7 ELSE
>9dd8	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $a8 GOSUB
>9ddf	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $a9 GOTO
>9de5	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $aa LET
>9dea	05 6b 4c 4f 43 41 4c			.text	5,$6b,"LOCAL"          ; $ab LOCAL
>9df1	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $ac PRINT
>9df8	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $ad READ
>9dfe	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $ae REM
>9e03	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $af RETURN
>9e0b	02 a3 54 4f				.text	2,$a3,"TO"             ; $b0 TO
>9e0f	ff					.text	$FF
.9e10					KeywordSet1:
>9e10	00 65					.text	0,$65,""               ; $80 !0:EOF
>9e12	00 58					.text	0,$58,""               ; $81 !1:SH1
>9e14	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>9e16	08 4c 41 53 53 45 4d 42			.text	8,$4c,"ASSEMBLE"       ; $83 ASSEMBLE
>9e1e	4c 45
>9e20	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $84 ASSERT
>9e28	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $85 CLEAR
>9e2f	03 d7 45 4e 44				.text	3,$d7,"END"            ; $86 END
>9e34	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $87 LIST
>9e3a	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $88 NEW
>9e3f	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $89 RESTORE
>9e47	45
>9e48	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $8a RUN
>9e4d	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $8b STOP
>9e53	ff					.text	$FF
.9e54					KeywordSet2:
>9e54	00 65					.text	0,$65,""               ; $80 !0:EOF
>9e56	00 58					.text	0,$58,""               ; $81 !1:SH1
>9e58	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>9e5a	03 c8 41 44 43				.text	3,$c8,"ADC"            ; $83 ADC
>9e5f	03 d3 41 4e 44				.text	3,$d3,"AND"            ; $84 AND
>9e64	03 e0 41 53 4c				.text	3,$e0,"ASL"            ; $85 ASL
>9e69	03 c8 42 43 43				.text	3,$c8,"BCC"            ; $86 BCC
>9e6e	03 d8 42 43 53				.text	3,$d8,"BCS"            ; $87 BCS
>9e73	03 d8 42 45 51				.text	3,$d8,"BEQ"            ; $88 BEQ
>9e78	03 df 42 49 54				.text	3,$df,"BIT"            ; $89 BIT
>9e7d	03 d8 42 4d 49				.text	3,$d8,"BMI"            ; $8a BMI
>9e82	03 d5 42 4e 45				.text	3,$d5,"BNE"            ; $8b BNE
>9e87	03 de 42 50 4c				.text	3,$de,"BPL"            ; $8c BPL
>9e8c	03 d5 42 52 41				.text	3,$d5,"BRA"            ; $8d BRA
>9e91	03 df 42 52 4b				.text	3,$df,"BRK"            ; $8e BRK
>9e96	03 db 42 56 43				.text	3,$db,"BVC"            ; $8f BVC
>9e9b	03 eb 42 56 53				.text	3,$eb,"BVS"            ; $90 BVS
>9ea0	03 d2 43 4c 43				.text	3,$d2,"CLC"            ; $91 CLC
>9ea5	03 d3 43 4c 44				.text	3,$d3,"CLD"            ; $92 CLD
>9eaa	03 d8 43 4c 49				.text	3,$d8,"CLI"            ; $93 CLI
>9eaf	03 e5 43 4c 56				.text	3,$e5,"CLV"            ; $94 CLV
>9eb4	03 e0 43 4d 50				.text	3,$e0,"CMP"            ; $95 CMP
>9eb9	03 eb 43 50 58				.text	3,$eb,"CPX"            ; $96 CPX
>9ebe	03 ec 43 50 59				.text	3,$ec,"CPY"            ; $97 CPY
>9ec3	03 cc 44 45 43				.text	3,$cc,"DEC"            ; $98 DEC
>9ec8	03 e1 44 45 58				.text	3,$e1,"DEX"            ; $99 DEX
>9ecd	03 e2 44 45 59				.text	3,$e2,"DEY"            ; $9a DEY
>9ed2	03 e6 45 4f 52				.text	3,$e6,"EOR"            ; $9b EOR
>9ed7	03 da 49 4e 43				.text	3,$da,"INC"            ; $9c INC
>9edc	03 ef 49 4e 58				.text	3,$ef,"INX"            ; $9d INX
>9ee1	03 f0 49 4e 59				.text	3,$f0,"INY"            ; $9e INY
>9ee6	03 e7 4a 4d 50				.text	3,$e7,"JMP"            ; $9f JMP
>9eeb	03 ef 4a 53 52				.text	3,$ef,"JSR"            ; $a0 JSR
>9ef0	03 d1 4c 44 41				.text	3,$d1,"LDA"            ; $a1 LDA
>9ef5	03 e8 4c 44 58				.text	3,$e8,"LDX"            ; $a2 LDX
>9efa	03 e9 4c 44 59				.text	3,$e9,"LDY"            ; $a3 LDY
>9eff	03 f1 4c 53 52				.text	3,$f1,"LSR"            ; $a4 LSR
>9f04	03 ed 4e 4f 50				.text	3,$ed,"NOP"            ; $a5 NOP
>9f09	03 e2 4f 52 41				.text	3,$e2,"ORA"            ; $a6 ORA
>9f0e	03 d9 50 48 41				.text	3,$d9,"PHA"            ; $a7 PHA
>9f13	03 e8 50 48 50				.text	3,$e8,"PHP"            ; $a8 PHP
>9f18	03 f0 50 48 58				.text	3,$f0,"PHX"            ; $a9 PHX
>9f1d	03 f1 50 48 59				.text	3,$f1,"PHY"            ; $aa PHY
>9f22	03 dd 50 4c 41				.text	3,$dd,"PLA"            ; $ab PLA
>9f27	03 ec 50 4c 50				.text	3,$ec,"PLP"            ; $ac PLP
>9f2c	03 f4 50 4c 58				.text	3,$f4,"PLX"            ; $ad PLX
>9f31	03 f5 50 4c 59				.text	3,$f5,"PLY"            ; $ae PLY
>9f36	03 ed 52 4f 4c				.text	3,$ed,"ROL"            ; $af ROL
>9f3b	03 f3 52 4f 52				.text	3,$f3,"ROR"            ; $b0 ROR
>9f40	03 ef 52 54 49				.text	3,$ef,"RTI"            ; $b1 RTI
>9f45	03 f9 52 54 53				.text	3,$f9,"RTS"            ; $b2 RTS
>9f4a	03 d8 53 42 43				.text	3,$d8,"SBC"            ; $b3 SBC
>9f4f	03 db 53 45 43				.text	3,$db,"SEC"            ; $b4 SEC
>9f54	03 dc 53 45 44				.text	3,$dc,"SED"            ; $b5 SED
>9f59	03 e1 53 45 49				.text	3,$e1,"SEI"            ; $b6 SEI
>9f5e	03 e8 53 54 41				.text	3,$e8,"STA"            ; $b7 STA
>9f63	03 f7 53 54 50				.text	3,$f7,"STP"            ; $b8 STP
>9f68	03 ff 53 54 58				.text	3,$ff,"STX"            ; $b9 STX
>9f6d	03 00 53 54 59				.text	3,$00,"STY"            ; $ba STY
>9f72	03 01 53 54 5a				.text	3,$01,"STZ"            ; $bb STZ
>9f77	03 ed 54 41 58				.text	3,$ed,"TAX"            ; $bc TAX
>9f7c	03 ee 54 41 59				.text	3,$ee,"TAY"            ; $bd TAY
>9f81	03 e8 54 52 42				.text	3,$e8,"TRB"            ; $be TRB
>9f86	03 e9 54 53 42				.text	3,$e9,"TSB"            ; $bf TSB
>9f8b	03 ff 54 53 58				.text	3,$ff,"TSX"            ; $c0 TSX
>9f90	03 ed 54 58 41				.text	3,$ed,"TXA"            ; $c1 TXA
>9f95	03 ff 54 58 53				.text	3,$ff,"TXS"            ; $c2 TXS
>9f9a	03 ee 54 59 41				.text	3,$ee,"TYA"            ; $c3 TYA
>9f9f	ff					.text	$FF

;******  Return to file: ./common/tokeniser/tokenise.asm

.9fa0					TokeniseLine:
.9fa0	20 28 a1	jsr $a128			jsr 	FixLineBufferCase 			; fix line case
.9fa3	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.9fa5	8d a6 04	sta $04a6			sta 	tokenOffset
.9fa8	9c a7 04	stz $04a7			stz 	tokenLineNumber
.9fab	9c a8 04	stz $04a8			stz 	tokenLineNumber+1
.9fae	a2 ff		ldx #$ff			ldx 	#$FF
.9fb0					_TKFindFirst:
.9fb0	e8		inx				inx
.9fb1	bd a6 05	lda $05a6,x			lda 	lineBuffer,x
.9fb4	f0 79		beq $a02f			beq 	_TKExit
.9fb6	c9 20		cmp #$20			cmp 	#' '
.9fb8	90 f6		bcc $9fb0			bcc 	_TKFindFirst
.9fba	c9 30		cmp #$30			cmp 	#'0'
.9fbc	90 07		bcc $9fc5			bcc 	_TKNoLineNumber
.9fbe	c9 3a		cmp #$3a			cmp 	#'9'+1
.9fc0	b0 03		bcs $9fc5			bcs 	_TKNoLineNumber
.9fc2	20 52 a1	jsr $a152			jsr 	TokeniseExtractLineNumber
.9fc5					_TKNoLineNumber:
.9fc5					_TKTokeniseLoop:
.9fc5	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.9fc8	f0 65		beq $a02f			beq 	_TKExit
.9fca	e8		inx				inx
.9fcb	c9 20		cmp #$20			cmp 	#' '
.9fcd	f0 f6		beq $9fc5			beq 	_TKTokeniseLoop 			; keep looping if space found.
.9fcf	ca		dex				dex 								; undo last get, A contains character, X is position.
.9fd0	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.9fd2	f0 61		beq $a035			beq 	_TKTokeniseIdentifier
.9fd4	c9 41		cmp #$41			cmp 	#'A'
.9fd6	90 04		bcc $9fdc			bcc 	_TKTokenisePunctuation
.9fd8	c9 5b		cmp #$5b			cmp 	#'Z'+1
.9fda	90 59		bcc $a035			bcc 	_TKTokeniseIdentifier
.9fdc					_TKTokenisePunctuation:
.9fdc	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.9fde	f0 27		beq $a007			beq 	_TKString
.9fe0	c9 24		cmp #$24			cmp 	#'$'						; hexadecimal constant (# only appears at end of identifiers)
.9fe2	f0 28		beq $a00c			beq 	_TKHexConstant
.9fe4	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers.
.9fe6	f0 29		beq $a011			beq 	_TKCheckDouble
.9fe8	c9 3e		cmp #$3e			cmp 	#'>'
.9fea	f0 25		beq $a011			beq 	_TKCheckDouble
.9fec					_TKStandardPunctuation:
.9fec	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; get it back.
.9fef	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.9ff1	90 0e		bcc $a001			bcc 	_TKNoShift
.9ff3	48		pha				pha 								; save
.9ff4	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.9ff6	85 36		sta $36				sta 	zTemp0
.9ff8	68		pla				pla
.9ff9	29 20		and #$20			and 	#32 						; bit 5
.9ffb	4a		lsr a				lsr 	a 							; shift into bit 3
.9ffc	4a		lsr a				lsr 	a
.9ffd	05 36		ora $36				ora 	zTemp0
.9fff	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.a001					_TKNoShift:
.a001	20 97 a1	jsr $a197			jsr 	TokeniseWriteByte 			; write the punctuation character
.a004	e8		inx				inx 								; consume the character
.a005	80 be		bra $9fc5			bra 	_TKTokeniseLoop 			; and loop round again.
.a007					_TKString:
.a007	20 b7 a0	jsr $a0b7			jsr 	TokeniseString
.a00a	80 b9		bra $9fc5			bra 	_TKTokeniseLoop
.a00c					_TKHexConstant:
.a00c	20 f2 a0	jsr $a0f2			jsr 	TokeniseHexConstant
.a00f	80 b4		bra $9fc5			bra 	_TKTokeniseLoop
.a011					_TKCheckDouble:
.a011	bd a7 05	lda $05a7,x			lda 	lineBuffer+1,x 				; get next character
.a014	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.a016	90 d4		bcc $9fec			bcc 	_TKStandardPunctuation
.a018	c9 3f		cmp #$3f			cmp 	#'>'+1
.a01a	b0 d0		bcs $9fec			bcs 	_TKStandardPunctuation
.a01c	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.a01f	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.a021	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.a022	7d a7 05	adc $05a7,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.a025	38		sec				sec
.a026	e9 3c		sbc #$3c			sbc 	#'<'
.a028	20 97 a1	jsr $a197			jsr 	TokeniseWriteByte 			; this is in the range 0-7
.a02b	e8		inx				inx 								; consume both
.a02c	e8		inx				inx
.a02d	80 96		bra $9fc5			bra 	_TKTokeniseLoop
.a02f	a9 80		lda #$80	_TKExit:lda 	#KWC_EOL 					; write end of line byte
.a031	20 97 a1	jsr $a197			jsr 	TokeniseWriteByte
.a034	60		rts				rts
.a035					_TKTokeniseIdentifier:
.a035	8e 80 04	stx $0480			stx 	identStart 					; save start
.a038	9c 84 04	stz $0484			stz 	identTypeByte 				; zero the type byte
.a03b					_TKCheckLoop:
.a03b	e8		inx				inx 								; look at next, we know first is identifier.
.a03c	bd a6 05	lda $05a6,x			lda  	lineBuffer,x
.a03f	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.a041	f0 f8		beq $a03b			beq 	_TKCheckLoop
.a043	c9 30		cmp #$30			cmp	 	#"0"
.a045	90 0c		bcc $a053			bcc 	_TKEndIdentifier
.a047	c9 3a		cmp #$3a			cmp 	#"9"+1
.a049	90 f0		bcc $a03b			bcc 	_TKCheckLoop
.a04b	c9 41		cmp #$41			cmp	 	#"A"
.a04d	90 04		bcc $a053			bcc 	_TKEndIdentifier
.a04f	c9 5b		cmp #$5b			cmp 	#"Z"+1
.a051	90 e8		bcc $a03b			bcc 	_TKCheckLoop
.a053					_TKEndIdentifier:
.a053	8e 81 04	stx $0481			stx 	identTypeStart 				; save start of type text (if any !)
.a056	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.a058	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.a05a	f0 06		beq $a062			beq 	_TKHasTypeCharacter
.a05c	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.a05e	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.a060	d0 07		bne $a069			bne 	_TKNoTypeCharacter
.a062					_TKHasTypeCharacter:
.a062	8c 84 04	sty $0484			sty 	identTypeByte 				; has # or $, save the type
.a065	e8		inx				inx 								; read next
.a066	bd a6 05	lda $05a6,x			lda 	lineBuffer,x
.a069					_TKNoTypeCharacter:
.a069	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.a06b	d0 09		bne $a076			bne 	_TKNoArray
.a06d	e8		inx				inx 								; skip the (
.a06e	ad 84 04	lda $0484			lda 	identTypeByte 				; set bit 2 (e.g. array)
.a071	09 04		ora #$04			ora 	#$04
.a073	8d 84 04	sta $0484			sta 	identTypeByte
.a076					_TKNoArray:
.a076	8e 82 04	stx $0482			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.a079	20 13 a1	jsr $a113			jsr 	TokeniseCalculateHash 		; calculate the has for those tokens
.a07c	a0 9c		ldy #$9c			ldy 	#(KeywordSet0) >> 8
.a07e	a9 de		lda #$de			lda 	#(KeywordSet0) & $FF
.a080	20 85 9c	jsr $9c85			jsr 	TokeniseSearchTable
.a083	a2 00		ldx #$00			ldx 	#0
.a085	b0 1f		bcs $a0a6			bcs 	_TKFoundToken
.a087	a0 9e		ldy #$9e			ldy 	#(KeywordSet1) >> 8
.a089	a9 10		lda #$10			lda 	#(KeywordSet1) & $FF
.a08b	20 85 9c	jsr $9c85			jsr 	TokeniseSearchTable
.a08e	a2 81		ldx #$81			ldx 	#$81
.a090	b0 14		bcs $a0a6			bcs 	_TKFoundToken
.a092	a0 9e		ldy #$9e			ldy 	#(KeywordSet2) >> 8
.a094	a9 54		lda #$54			lda 	#(KeywordSet2) & $FF
.a096	20 85 9c	jsr $9c85			jsr 	TokeniseSearchTable
.a099	a2 82		ldx #$82			ldx 	#$82
.a09b	b0 09		bcs $a0a6			bcs 	_TKFoundToken
.a09d	20 a3 a1	jsr $a1a3			jsr 	CheckCreateVariableRecord 	; failed all, it's a variable, create record if does not exist.
.a0a0	ae 82 04	ldx $0482			ldx 	identTypeEnd 				; X points to following byte
.a0a3	4c c5 9f	jmp $9fc5			jmp 	_TKTokeniseLoop 			; and go round again.
.a0a6					_TKFoundToken:
.a0a6	48		pha				pha 								; save token
.a0a7	8a		txa				txa 								; shift in X, is there one ?
.a0a8	f0 03		beq $a0ad			beq 	_TKNoTShift
.a0aa	20 97 a1	jsr $a197			jsr 	TokeniseWriteByte 			; if so, write it out
.a0ad					_TKNoTShift:
.a0ad	68		pla				pla 								; restore and write token
.a0ae	20 97 a1	jsr $a197			jsr 	TokeniseWriteByte
.a0b1	ae 82 04	ldx $0482			ldx 	identTypeEnd 				; X points to following byte
.a0b4	4c c5 9f	jmp $9fc5			jmp 	_TKTokeniseLoop 			; and go round again.
.a0b7					TokeniseString:
.a0b7	a9 ff		lda #$ff			lda 	#KWC_STRING 				; string token.
.a0b9	20 97 a1	jsr $a197			jsr 	TokeniseWriteByte
.a0bc	e8		inx				inx									; start of quoted string.
.a0bd	da		phx				phx 								; push start of string on top
.a0be	ca		dex				dex
.a0bf					_TSFindEnd:
.a0bf	e8		inx				inx
.a0c0	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; next character
.a0c3	f0 04		beq $a0c9			beq 	_TSEndOfString
.a0c5	c9 22		cmp #$22			cmp 	#'"'
.a0c7	d0 f6		bne $a0bf			bne 	_TSFindEnd
.a0c9					_TSEndOfString:
.a0c9	7a		ply				ply  								; so now Y is first character, X is character after end.
.a0ca	48		pha				pha 								; save terminating character
.a0cb	20 d3 a0	jsr $a0d3			jsr 	TOWriteBlockXY 				; write X to Y as a data block
.a0ce	68		pla				pla 								; terminating character
.a0cf	f0 01		beq $a0d2			beq 	_TSNotQuote					; if it wasn't EOS skip it
.a0d1	e8		inx				inx
.a0d2					_TSNotQuote:
.a0d2	60		rts				rts
.a0d3					TOWriteBlockXY:
.a0d3	86 36		stx $36				stx 	zTemp0 						; write end character
.a0d5	98		tya				tya
.a0d6	49 ff		eor #$ff			eor 	#$FF
.a0d8	38		sec				sec
.a0d9	65 36		adc $36				adc 	zTemp0
.a0db	1a		inc a				inc 	a 							; one extra for NULL
.a0dc	20 97 a1	jsr $a197			jsr 	TokeniseWriteByte
.a0df					_TOBlockLoop:
.a0df	c4 36		cpy $36				cpy 	zTemp0
.a0e1	f0 09		beq $a0ec			beq 	_TOBlockExit
.a0e3	b9 a6 05	lda $05a6,y			lda 	lineBuffer,y
.a0e6	20 97 a1	jsr $a197			jsr 	TokeniseWriteByte
.a0e9	c8		iny				iny
.a0ea	80 f3		bra $a0df			bra 	_TOBlockLoop
.a0ec					_TOBlockExit:
.a0ec	a9 00		lda #$00			lda 	#0
.a0ee	20 97 a1	jsr $a197			jsr 	TokeniseWriteByte
.a0f1	60		rts				rts
.a0f2					TokeniseHexConstant:
.a0f2	a9 fe		lda #$fe			lda 	#KWC_HEXCONST 				; hex constant token.
.a0f4	20 97 a1	jsr $a197			jsr 	TokeniseWriteByte
.a0f7	e8		inx				inx									; start of quoted string.
.a0f8	da		phx				phx 								; push start of constant on top
.a0f9	ca		dex				dex
.a0fa					_THFindLoop:
.a0fa	e8		inx				inx
.a0fb	bd a6 05	lda $05a6,x			lda 	lineBuffer,x
.a0fe	c9 30		cmp #$30			cmp 	#"0"
.a100	90 0c		bcc $a10e			bcc 	_THFoundEnd
.a102	c9 3a		cmp #$3a			cmp 	#"9"+1
.a104	90 f4		bcc $a0fa			bcc 	_THFindLoop
.a106	c9 41		cmp #$41			cmp 	#"A"
.a108	90 04		bcc $a10e			bcc 	_THFoundEnd
.a10a	c9 47		cmp #$47			cmp 	#"F"+1
.a10c	90 ec		bcc $a0fa			bcc 	_THFindLoop
.a10e					_THFoundEnd:
.a10e	7a		ply				ply 								; restore start
.a10f	20 d3 a0	jsr $a0d3			jsr 	TOWriteBlockXY 				; output the block
.a112	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/utility.asm

.a113					TokeniseCalculateHash:
.a113	da		phx				phx
.a114	ae 80 04	ldx $0480			ldx 	identStart 					; needs to be same as in tokens.py - simple sum
.a117	a9 00		lda #$00			lda 	#0
.a119					_TCHLoop:
.a119	18		clc				clc
.a11a	7d a6 05	adc $05a6,x			adc 	lineBuffer,x
.a11d	e8		inx				inx
.a11e	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.a121	d0 f6		bne $a119			bne 	_TCHLoop
.a123	8d 83 04	sta $0483			sta 	identHash 					; save the hash
.a126	fa		plx				plx
.a127	60		rts				rts
.a128					FixLineBufferCase:
.a128	a2 00		ldx #$00			ldx 	#0
.a12a					_FLBCLoop:
.a12a	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; get next character
.a12d	f0 22		beq $a151			beq 	_FLBCExit 					; end of string.
.a12f	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.a131	f0 11		beq $a144			beq 	_FLBCInQuotes
.a133	e8		inx				inx
.a134	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.a136	90 f2		bcc $a12a			bcc 	_FLBCLoop
.a138	c9 7b		cmp #$7b			cmp 	#'z'+1
.a13a	b0 ee		bcs $a12a			bcs 	_FLBCLoop
.a13c	38		sec				sec 								; make U/C
.a13d	e9 20		sbc #$20			sbc 	#32
.a13f	9d a5 05	sta $05a5,x			sta	 	lineBuffer-1,x 				; write back
.a142	80 e6		bra $a12a			bra 	_FLBCLoop
.a144					_FLBCInQuotes:
.a144	e8		inx				inx 								; advance
.a145	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; get next
.a148	f0 07		beq $a151			beq 	_FLBCExit 					; exit on EOS
.a14a	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.a14c	d0 f6		bne $a144			bne 	_FLBCInQuotes
.a14e	e8		inx				inx 								; skip over it
.a14f	80 d9		bra $a12a			bra 	_FLBCLoop
.a151					_FLBCExit:
.a151	60		rts				rts
.a152					TokeniseExtractLineNumber:
.a152	ad a8 04	lda $04a8			lda 	tokenLineNumber+1 			; push current value on stack
.a155	48		pha				pha
.a156	ad a7 04	lda $04a7			lda 	tokenLineNumber
.a159	48		pha				pha
.a15a	20 90 a1	jsr $a190			jsr 	_TELNTimes2 				; line # x 4
.a15d	20 90 a1	jsr $a190			jsr 	_TELNTimes2 				; line # x 2
.a160	18		clc				clc 								; add stacked value
.a161	68		pla				pla
.a162	6d a7 04	adc $04a7			adc 	tokenLineNumber
.a165	8d a7 04	sta $04a7			sta 	tokenLineNumber
.a168	68		pla				pla
.a169	6d a8 04	adc $04a8			adc 	tokenLineNumber+1
.a16c	8d a8 04	sta $04a8			sta 	tokenLineNumber+1 			; line # x 5
.a16f	20 90 a1	jsr $a190			jsr 	_TELNTimes2 				; line # x 10
.a172	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; get and consume character
.a175	e8		inx				inx
.a176	29 0f		and #$0f			and 	#15 						; add to line #
.a178	18		clc				clc
.a179	6d a7 04	adc $04a7			adc 	tokenLineNumber
.a17c	8d a7 04	sta $04a7			sta 	tokenLineNumber
.a17f	90 03		bcc $a184			bcc 	_TLENNoCarry
.a181	ee a8 04	inc $04a8			inc 	tokenLineNumber+1
.a184					_TLENNoCarry:
.a184	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; more digits ?
.a187	c9 30		cmp #$30			cmp 	#'0'
.a189	90 04		bcc $a18f			bcc 	_TLENExit
.a18b	c9 3a		cmp #$3a			cmp 	#'9'+1
.a18d	90 c3		bcc $a152			bcc 	TokeniseExtractLineNumber
.a18f					_TLENExit:
.a18f	60		rts				rts
.a190					_TELNTimes2:
.a190	0e a7 04	asl $04a7			asl 	tokenLineNumber
.a193	2e a8 04	rol $04a8			rol 	tokenLineNumber+1
.a196	60		rts				rts
.a197					TokeniseWriteByte:
.a197	da		phx				phx
.a198	ae a6 04	ldx $04a6			ldx 	tokenOffset 				; next slot to write to
.a19b	9d a6 04	sta $04a6,x			sta 	tokenOffset,x 				; write byte out
.a19e	ee a6 04	inc $04a6			inc 	tokenOffset 				; advance slot.
.a1a1	fa		plx				plx
.a1a2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/variablerecord.asm

.a1a3					CheckCreateVariableRecord:
.a1a3	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.a1a5	85 36		sta $36				sta 	0+zTemp0
.a1a7	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.a1a9	85 37		sta $37				sta 	1+zTemp0
.a1ab					_CCVSearch:
.a1ab	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.a1ad	f0 2c		beq $a1db			beq 	_CCVFail
.a1af	a0 01		ldy #$01			ldy 	#1 							; read the hash
.a1b1	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.a1b3	cd 83 04	cmp $0483			cmp 	identHash
.a1b6	d0 16		bne $a1ce			bne 	_CCVNext
.a1b8	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.a1ba	ae 80 04	ldx $0480			ldx 	identStart
.a1bd					_CCVCompare:
.a1bd	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.a1c0	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.a1c2	e8		inx				inx 								; advance pointers
.a1c3	c8		iny				iny
.a1c4	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.a1c5	d0 07		bne $a1ce			bne 	_CCVNext  					; didn't match go to next.
.a1c7	90 f4		bcc $a1bd			bcc 	_CCVCompare 				; not finished yet.
.a1c9	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; matched whole thing ?
.a1cc	f0 41		beq $a20f			beq 	_CCVFound 					; yes, we were successful
.a1ce					_CCVNext:
.a1ce	18		clc				clc
.a1cf	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.a1d1	65 36		adc $36				adc 	zTemp0
.a1d3	85 36		sta $36				sta 	zTemp0
.a1d5	90 d4		bcc $a1ab			bcc 	_CCVSearch
.a1d7	e6 37		inc $37				inc 	zTemp0+1
.a1d9	80 d0		bra $a1ab			bra 	_CCVSearch
.a1db					_CCVFail:
.a1db	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.a1dd	ad 83 04	lda $0483			lda 	identHash
.a1e0	91 36		sta ($36),y			sta 	(zTemp0),y
.a1e2	c8		iny				iny 								; offset 2 is the type byte
.a1e3	ad 84 04	lda $0484			lda 	identTypeByte
.a1e6	91 36		sta ($36),y			sta 	(zTemp0),y
.a1e8	c8		iny				iny
.a1e9					_CCVData:
.a1e9	a9 00		lda #$00			lda 	#0 							; erase data 3-7
.a1eb	91 36		sta ($36),y			sta 	(zTemp0),y
.a1ed	c8		iny				iny
.a1ee	c0 08		cpy #$08			cpy 	#8
.a1f0	90 f7		bcc $a1e9			bcc 	_CCVData
.a1f2	ae 80 04	ldx $0480			ldx 	identStart 					; copy name into 8 on.
.a1f5					_CCVCopyName:
.a1f5	bd a6 05	lda $05a6,x			lda 	lineBuffer,x
.a1f8	91 36		sta ($36),y			sta 	(zTemp0),y
.a1fa	e8		inx				inx
.a1fb	c8		iny				iny
.a1fc	ec 82 04	cpx $0482			cpx 	identTypeEnd
.a1ff	d0 f4		bne $a1f5			bne 	_CCVCopyName
.a201	98		tya				tya 								; patch offset
.a202	92 36		sta ($36)			sta 	(zTemp0)
.a204	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.a206	91 36		sta ($36),y			sta 	(zTemp0),y
.a208	88		dey				dey
.a209	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.a20b	09 80		ora #$80			ora 	#$80
.a20d	91 36		sta ($36),y			sta 	(zTemp0),y
.a20f					_CCVFound:
.a20f	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.a211	38		sec				sec
.a212	e9 10		sbc #$10			sbc 	#(VariableSpace >> 8) 		; offset from the start
.a214	09 40		ora #$40			ora 	#$40 						; make it a writeable token
.a216	20 97 a1	jsr $a197			jsr 	TokeniseWriteByte
.a219	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.a21b	20 97 a1	jsr $a197			jsr 	TokeniseWriteByte
.a21e	60		rts				rts

;******  Return to file: _basic.asm


;******  End of listing
