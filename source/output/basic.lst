
; 64tass Turbo Assembler Macro V1.56.2625 listing file
; 64tass -D AUTORUN=0 -q -b -Wall -c -L output/basic.lst -l output/basic.lbl -Wall -o basic.rom _basic.asm
; Fri Oct  7 20:38:09 2022

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=0					AUTORUN=0

;******  Processing input file: _basic.asm


;******  Processing file: ./common/aa.system/01common.inc

=$30					ZeroPageMandatory = $30
=$400					ZeroPagePreference = $400
=$480					MemoryStorage = $480
=$2000					BasicStart = $2000
=$8000					BasicEnd = $8000
=$8000					CodeStart = $8000
=$1000					VariableSpace = $1000
=$2000					EndVariableSpace = $2000
=8					MathStackSize = 8
=512					BasicStackSize = 512
=3584					BasicStackBase = $1000-BasicStackSize
=80					MaxLineSize = 80

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/04data.inc

.0030					codePtr:
>0030							.fill 	4
.0034					basicStack:
>0034							.fill 	2
.0036					zTemp0:
>0036							.fill 	2
.0038					zTemp1:
>0038							.fill 	2
.003a					zTemp2:
>003a							.fill 	2
.003c					zsTemp:
>003c							.fill 	2
.003e					zaTemp:
>003e							.fill 	2
=$30					safePtr = codePtr 							; minimise direct tinkering
=$80					NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20					NSBIsReference = $20 						; bit 5 : is a reference
=$10					NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18					NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03					NSBRefMask = $03 							; bits 0,1 : Bytes of reference, -1 (e.g. 00 = 1 byte, 11 = 4 bytes)
=$04					NSBIsArray = $04
=$00					NSTInteger = $00 							; base types for bits 3..4
=$08					NSTFloat = $08
=$10					NSTString = $10
=$18					NSTProcedure = $18
.0400					NSStatus:
>0400							.fill 	MathStackSize
.0408					NSMantissa0:
>0408							.fill 	MathStackSize 				; (this is my integer mantissa system)
.0410					NSMantissa1:
>0410							.fill 	MathStackSize
.0418					NSMantissa2:
>0418							.fill 	MathStackSize
.0420					NSMantissa3:
>0420							.fill 	MathStackSize
.0428					NSExponent:
>0428							.fill 	MathStackSize
.0480					identStart:
>0480							.fill 	1
.0481					identTypeStart:
>0481							.fill 	1
.0482					identTypeEnd:
>0482							.fill 	1
.0483					identHash:
>0483							.fill 	1
.0484					identTypeByte:
>0484							.fill 	1	 						; (see tokenising.pdf)
.0485					encodeState:
>0485							.fill 	1
.0486					digitTemp:
>0486							.fill 	1
.0487					decimalCount:
>0487							.fill 	1
.0488					randomSeed:
>0488							.fill 	4
.048c					lowMemPtr:
>048c							.fill 	2
.048e					stringMemory:
>048e							.fill 	2
.0490					stringInitialised:
>0490							.fill 	1
.0491					stringTempPointer:
>0491							.fill 	2
.0493					breakCheck:
>0493							.fill 	1
.0494					decimalPlaces:
>0494							.fill 	1
.0495					dbOffset:
>0495							.fill 	1
.0496					lastParameter:
>0496							.fill 	1
.0497					dataPointer:
>0497							.fill 	5
.049c					inDataStatement:
>049c							.fill 	1
.049d					tbOffset:
>049d							.fill 	1
.049e					AssemblerAddress:
>049e							.fill 	2
.04a0					AssemblerControl:
>04a0							.fill 	1
.04a1					ParamStart:
>04a1							.fill 	2
.04a3					IsGroup1:
>04a3							.fill 	1
.04a4					BaseOpcode:
>04a4							.fill 	1
.04a5					ModeMask:
>04a5							.fill 	1
.04a6					tokenOffset:
>04a6							.fill 	1
.04a7					tokenLineNumber:
>04a7							.fill 	2
.04a9					tokenBuffer:
>04a9							.fill 	253
.05a6					lineBuffer:
>05a6							.fill 	MaxLineSize+1
.05f7					numberBuffer:
>05f7							.fill 	34
.0619					decimalBuffer:
>0619							.fill 	16

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/constants.inc

=$80					AM_ISZP = $80
=$40					AM_ISG1 = $40
=$20					AM_ISG2 = $20
=224					AM_IMMEDIATE = AM_ISZP+AM_ISG1+AM_ISG2+$00
=228					AM_ZEROPAGE = AM_ISZP+AM_ISG1+AM_ISG2+$04
=40					AM_ACC = AM_ISG2+$08
=108					AM_ABS = AM_ISG1+AM_ISG2+$0C
=208					AM_INDY = AM_ISZP+AM_ISG1+$10
=244					AM_ZEROX = AM_ISZP+AM_ISG1+AM_ISG2+$14
=120					AM_ABSY = AM_ISG1+AM_ISG2+$18
=124					AM_ABSX = AM_ISG1+AM_ISG2+$1C
=209					AM_IND = AM_ISZP+AM_ISG1+$11
=$80					AM_ZEROY = AM_ISZP
=$01					AM_INDABS = $01
=$02					AM_INDABSX = $02
=192					AM_INDX = AM_ISZP+AM_ISG1+$00

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/handlers.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.inc

=1					ERRID_BREAK = 1
=2					ERRID_SYNTAX = 2
=3					ERRID_DIVZERO = 3
=4					ERRID_RANGE = 4
=5					ERRID_TYPE = 5
=6					ERRID_MEMORY = 6
=7					ERRID_ARGUMENT = 7
=8					ERRID_STOP = 8
=9					ERRID_STRING = 9
=10					ERRID_ASSERT = 10
=11					ERRID_DATA = 11
=12					ERRID_NOTDONE = 12
=13					ERRID_LINE = 13
=14					ERRID_GOSUB = 14
=15					ERRID_REPEAT = 15
=16					ERRID_WHILE = 16
=17					ERRID_FOR = 17
=18					ERRID_STACK = 18
=19					ERRID_STRUCT = 19
=20					ERRID_PROC = 20
=21					ERRID_REDEFINE = 21
=22					ERRID_ARRAYSIZE = 22
=23					ERRID_ARRAYIDX = 23

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst.inc

=$00					KWD_LESSLESS                         = $00; $00 <<
=$01					KWD_LESSEQUAL                        = $01; $01 <=
=$02					KWD_LESSGREATER                      = $02; $02 <>
=$03					KWD_PLINGPLING3                      = $03; $03 !!3
=$04					KWD_GREATERLESS                      = $04; $04 ><
=$05					KWD_GREATEREQUAL                     = $05; $05 >=
=$06					KWD_GREATERGREATER                   = $06; $06 >>
=$07					KWD_PLINGPLING7                      = $07; $07 !!7
=$08					KWD_PLINGPLING8                      = $08; $08 !!8
=$09					KWD_PLINGPLING9                      = $09; $09 !!9
=$0a					KWD_PLINGPLING10                     = $0a; $0a !!10
=$0b					KWD_PLINGPLING11                     = $0b; $0b !!11
=$0c					KWD_PLINGPLING12                     = $0c; $0c !!12
=$0d					KWD_PLINGPLING13                     = $0d; $0d !!13
=$0e					KWD_PLINGPLING14                     = $0e; $0e !!14
=$0f					KWD_PLINGPLING15                     = $0f; $0f !!15
=$10					KWD_AT                               = $10; $10 @
=$11					KWD_PLINGPLING17                     = $11; $11 !!17
=$12					KWD_PLINGPLING18                     = $12; $12 !!18
=$13					KWD_LSQPAREN                         = $13; $13 [
=$14					KWD_BACKSLASH                        = $14; $14 \
=$15					KWD_RSQPAREN                         = $15; $15 ]
=$16					KWD_HAT                              = $16; $16 ^
=$17					KWD_UNDERSCORE                       = $17; $17 _
=$18					KWD_BQUOTE                           = $18; $18 `
=$19					KWD_PLINGPLING25                     = $19; $19 !!25
=$1a					KWD_PLINGPLING26                     = $1a; $1a !!26
=$1b					KWD_LCURLY                           = $1b; $1b {
=$1c					KWD_BAR                              = $1c; $1c |
=$1d					KWD_RCURLY                           = $1d; $1d }
=$1e					KWD_TILDE                            = $1e; $1e ~
=$21					KWD_PLING                            = $21; $21 !
=$22					KWD_DQUOTE                           = $22; $22 "
=$23					KWD_HASH                             = $23; $23 #
=$24					KWD_DOLLAR                           = $24; $24 $
=$25					KWD_PERCENT                          = $25; $25 %
=$26					KWD_AMPERSAND                        = $26; $26 &
=$27					KWD_QUOTE                            = $27; $27 '
=$28					KWD_LPAREN                           = $28; $28 (
=$29					KWD_RPAREN                           = $29; $29 )
=$2a					KWD_STAR                             = $2a; $2a *
=$2b					KWD_PLUS                             = $2b; $2b +
=$2c					KWD_COMMA                            = $2c; $2c ,
=$2d					KWD_MINUS                            = $2d; $2d -
=$2e					KWD_PERIOD                           = $2e; $2e .
=$2f					KWD_SLASH                            = $2f; $2f /
=$30					KWD_0                                = $30; $30 0
=$31					KWD_1                                = $31; $31 1
=$32					KWD_2                                = $32; $32 2
=$33					KWD_3                                = $33; $33 3
=$34					KWD_4                                = $34; $34 4
=$35					KWD_5                                = $35; $35 5
=$36					KWD_6                                = $36; $36 6
=$37					KWD_7                                = $37; $37 7
=$38					KWD_8                                = $38; $38 8
=$39					KWD_9                                = $39; $39 9
=$3a					KWD_COLON                            = $3a; $3a :
=$3b					KWD_SEMICOLON                        = $3b; $3b ;
=$3c					KWD_LESS                             = $3c; $3c <
=$3d					KWD_EQUAL                            = $3d; $3d =
=$3e					KWD_GREATER                          = $3e; $3e >
=$3f					KWD_QMARK                            = $3f; $3f ?
=$83					KWD_ABSLPAREN                        = $83; $83 ABS(
=$84					KWD_ALLOCLPAREN                      = $84; $84 ALLOC(
=$85					KWD_ASCLPAREN                        = $85; $85 ASC(
=$86					KWD_CHRDOLLARLPAREN                  = $86; $86 CHR$(
=$87					KWD_FALSE                            = $87; $87 FALSE
=$88					KWD_FRACLPAREN                       = $88; $88 FRAC(
=$89					KWD_INTLPAREN                        = $89; $89 INT(
=$8a					KWD_ISVALLPAREN                      = $8a; $8a ISVAL(
=$8b					KWD_LEFTDOLLARLPAREN                 = $8b; $8b LEFT$(
=$8c					KWD_LENLPAREN                        = $8c; $8c LEN(
=$8d					KWD_MIDDOLLARLPAREN                  = $8d; $8d MID$(
=$8e					KWD_NOTLPAREN                        = $8e; $8e NOT(
=$8f					KWD_RANDOMLPAREN                     = $8f; $8f RANDOM(
=$90					KWD_RIGHTDOLLARLPAREN                = $90; $90 RIGHT$(
=$91					KWD_RNDLPAREN                        = $91; $91 RND(
=$92					KWD_SGNLPAREN                        = $92; $92 SGN(
=$93					KWD_SPCLPAREN                        = $93; $93 SPC(
=$94					KWD_STRDOLLARLPAREN                  = $94; $94 STR$(
=$95					KWD_TRUE                             = $95; $95 TRUE
=$96					KWD_VALLPAREN                        = $96; $96 VAL(
=$97					KWD_FOR                              = $97; $97 FOR
=$98					KWD_IF                               = $98; $98 IF
=$99					KWD_PROC                             = $99; $99 PROC
=$9a					KWD_REPEAT                           = $9a; $9a REPEAT
=$9b					KWD_WHILE                            = $9b; $9b WHILE
=$9c					KWD_ENDIF                            = $9c; $9c ENDIF
=$9d					KWD_ENDPROC                          = $9d; $9d ENDPROC
=$9e					KWD_NEXT                             = $9e; $9e NEXT
=$9f					KWD_THEN                             = $9f; $9f THEN
=$a0					KWD_UNTIL                            = $a0; $a0 UNTIL
=$a1					KWD_WEND                             = $a1; $a1 WEND
=$a2					KWD_CALL                             = $a2; $a2 CALL
=$a3					KWD_CLS                              = $a3; $a3 CLS
=$a4					KWD_DATA                             = $a4; $a4 DATA
=$a5					KWD_DIM                              = $a5; $a5 DIM
=$a6					KWD_DOWNTO                           = $a6; $a6 DOWNTO
=$a7					KWD_ELSE                             = $a7; $a7 ELSE
=$a8					KWD_GOSUB                            = $a8; $a8 GOSUB
=$a9					KWD_GOTO                             = $a9; $a9 GOTO
=$aa					KWD_LET                              = $aa; $aa LET
=$ab					KWD_LOCAL                            = $ab; $ab LOCAL
=$ac					KWD_PRINT                            = $ac; $ac PRINT
=$ad					KWD_READ                             = $ad; $ad READ
=$ae					KWD_REM                              = $ae; $ae REM
=$af					KWD_RETURN                           = $af; $af RETURN
=$b0					KWD_TO                               = $b0; $b0 TO

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst0.inc

=$80					KWC_EOL = $80
=$ff					KWC_STRING = $FF
=$fe					KWC_HEXCONST = $FE
=$97					KWC_FIRST_STRUCTURE = $97
=$9c					KWC_FIRST_STRUCTURE_DEC = $9c
=$a1					KWC_LAST_STRUCTURE = $a1
=$83					KWC_FIRST_UNARY = $83
=$96					KWC_LAST_UNARY = $96

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/stack.inc

=$e0					STK_GOSUB = $E0
=$d0					STK_FOR = $D0
=$c0					STK_REPEAT = $C0
=$b0					STK_PROC = $B0
=$a0					STK_WHILE = $A0
=$01					STK_LOCALN = $01
=$02					STK_LOCALS = $02

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/00start.asm

.8000	a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.8002	9a		txs				txs
.8003	a2 80		ldx #$80			ldx 	#(Prompt >> 8) 				; prompt
.8005	a9 1c		lda #$1c			lda 	#(Prompt & $FF)
.8007	20 80 90	jsr $9080			jsr 	PrintStringXA
.800a	9c 08 d0	stz $d008			stz 	$D008 						; remove boundary.
.800d	9c 09 d0	stz $d009			stz 	$D009
.8010	20 58 82	jsr $8258			jsr 	RunDemos
.8013	20 63 8a	jsr $8a63			jsr 	NewCommand 					; erase current program
.8016	20 05 9d	jsr $9d05			jsr 	BackloadProgram
.8019	4c bf 85	jmp $85bf			jmp 	WarmStart
>801c	0d 0d 2a 2a 2a 20 46 32		Prompt:	.text 	13,13,"*** F256 Junior SuperBASIC ***",13,13
>8024	35 36 20 4a 75 6e 69 6f 72 20 53 75 70 65 72 42
>8034	41 53 49 43 20 2a 2a 2a 0d 0d
>803e	57 72 69 74 74 65 6e 20				.text 	"Written by Paul Robson 2022.",13,13
>8046	62 79 20 50 61 75 6c 20 52 6f 62 73 6f 6e 20 32
>8056	30 32 32 2e 0d 0d

;******  Processing file: ./common/aa.system/../generated/timestamp.asm

>805c	42 75 69 6c 74 20 46 72			.text "Built Friday 07-Oct-2022. Build 706."
>8064	69 64 61 79 20 30 37 2d 4f 63 74 2d 32 30 32 32
>8074	2e 20 42 75 69 6c 64 20 37 30 36 2e

;******  Return to file: ./common/aa.system/00start.asm

>8080	0d 0d 00					.byte 	13,13,0

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/ab.graphics/data.asm

=5					GXMappingPage = 5
=40960					GXMappingAddress = ($2000 * GXMappingPage)
=0					GFXMappingLUT = 0
=13					GFXEditSlot = 8 + GXMappingPage
=$36					gzTemp0 = zTemp0
=$38					gzTemp1 = zTemp1
=$3a					gsTemp = zTemp2
.0629					gxCurrentX:
>0629							.fill 	2
.062b					gxCurrentY:
>062b							.fill 	2
.062d					gxLastX:
>062d							.fill 	2
.062f					gxLastY:
>062f							.fill 	2
.0631					gxX0:
>0631							.fill 	2
.0633					gxY0:
>0633							.fill 	2
.0635					gxX1:
>0635							.fill 	2
.0637					gxY1:
>0637							.fill 	2
.0639					gxBasePage:
>0639							.fill 	1
.063a					gxHeight:
>063a							.fill 	1
.063b					gxEORValue:
>063b							.fill 	1
.063c					gxANDValue:
>063c							.fill 	1
.063d					gxOriginalLUTValue:
>063d							.fill 	1
.063e					gxOriginalMMUSetting:
>063e							.fill 	1
.063f					gsOffset:
>063f							.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/ab.graphics/drawing/clear.asm

=64000					ScreenSize200 = 320 * 200
=76800					ScreenSize240 = 320 * 240
.8083					GXClearBitmap:
.8083	48		pha				pha
.8084	5a		phy				phy
.8085	20 a6 82	jsr $82a6			jsr 	GXOpenBitmap 				; start access
.8088	a0 07		ldy #$07			ldy 	#ScreenSize200 / 8192 		; X is pages to clear
.808a	ad 3a 06	lda $063a			lda 	gxHeight
.808d	c9 c8		cmp #$c8			cmp 	#200 						; 200 ?
.808f	a0 09		ldy #$09			ldy 	#ScreenSize240 / 8192
.8091					_GXCalcLastPage:
.8091	98		tya				tya 								; add to base page
.8092	18		clc				clc
.8093	6d 39 06	adc $0639			adc 	gxBasePage
.8096	85 0d		sta $0d				sta 	GFXEditSlot  				; clear from this page back
.8098					_GXClearAll:
.8098	20 aa 80	jsr $80aa			jsr 	_GXClearBlock 				; clear 8k block
.809b	c6 0d		dec $0d				dec 	GFXEditSlot  				; back to previous
.809d	a5 0d		lda $0d				lda 	GFXEditSlot
.809f	cd 39 06	cmp $0639			cmp 	gxBasePage 					; until before base page
.80a2	b0 f4		bcs $8098			bcs 	_GXClearAll
.80a4	20 b7 82	jsr $82b7			jsr 	GXCloseBitmap	 			; stop access
.80a7	7a		ply				ply
.80a8	68		pla				pla
.80a9	60		rts				rts
.80aa					_GXClearBlock:
.80aa	a9 00		lda #$00			lda 	#((GXMappingAddress) & $FF)
.80ac	85 38		sta $38				sta 	0+gzTemp1
.80ae	a9 a0		lda #$a0			lda 	#((GXMappingAddress) >> 8)
.80b0	85 39		sta $39				sta 	1+gzTemp1
.80b2					_GXCB0:
.80b2	a5 36		lda $36				lda 	gzTemp0
.80b4	a0 00		ldy #$00			ldy 	#0
.80b6					_GXCB1:
.80b6	91 38		sta ($38),y			sta 	(gzTemp1),y
.80b8	c8		iny				iny
.80b9	91 38		sta ($38),y			sta 	(gzTemp1),y
.80bb	c8		iny				iny
.80bc	91 38		sta ($38),y			sta 	(gzTemp1),y
.80be	c8		iny				iny
.80bf	91 38		sta ($38),y			sta 	(gzTemp1),y
.80c1	c8		iny				iny
.80c2	d0 f2		bne $80b6			bne 	_GXCB1
.80c4	e6 39		inc $39				inc 	gzTemp1+1
.80c6	a5 39		lda $39				lda 	gzTemp1+1
.80c8	c9 c0		cmp #$c0			cmp	 	#(GXMappingAddress >> 8)+$20
.80ca	d0 e6		bne $80b2			bne 	_GXCB0
.80cc	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/ab.graphics/drawing/line.asm

.80cd					GXLine:
.80cd	20 a6 82	jsr $82a6			jsr 	GXOpenBitmap
.80d0	20 2f 83	jsr $832f			jsr 	GXSortY						; sort pairs so Y1 >= Y0 e.g. top to bottom.
.80d3	20 98 81	jsr $8198			jsr 	GXLineSetup 				; the calculations in the linescanner constructor
.80d6	20 c4 82	jsr $82c4			jsr 	GXPositionCalc 				; calculate position/offset.
.80d9					_GXDrawLoop:
.80d9	ac 3f 06	ldy $063f			ldy 	gsOffset 					; draw the pixel
.80dc	b1 3a		lda ($3a),y			lda 	(gsTemp),y
.80de	2d 3c 06	and $063c			and 	gxANDValue
.80e1	4d 3b 06	eor $063b			eor 	gxEORValue
.80e4	91 3a		sta ($3a),y			sta 	(gsTemp),y
.80e6	20 f4 80	jsr $80f4			jsr 	GXLineIsComplete 			; is the line complete ?
.80e9	f0 05		beq $80f0			beq 	_GXLExit
.80eb	20 0f 81	jsr $810f			jsr 	GXLineAdvance 				; code as per advance method
.80ee	80 e9		bra $80d9			bra 	_GXDrawLoop
.80f0					_GXLExit:
.80f0	20 b7 82	jsr $82b7			jsr 	GXCloseBitmap
.80f3	60		rts				rts
.80f4					GXLineIsComplete:
.80f4	ad 42 06	lda $0642			lda 	GXIsDiffYLarger 			; is dy larger
.80f7	d0 0f		bne $8108			bne 	_GXLICCompareY 				; if so compare Y1/Y0
.80f9	ad 31 06	lda $0631			lda 	GXX0 						; compare X, LSB and MSB
.80fc	4d 35 06	eor $0635			eor 	GXX1
.80ff	d0 06		bne $8107			bne 	_GXLICExit
.8101	ad 32 06	lda $0632			lda 	GXX0+1
.8104	4d 36 06	eor $0636			eor 	GXX1+1
.8107					_GXLICExit:
.8107	60		rts				rts
.8108					_GXLICCompareY:
.8108	ad 37 06	lda $0637			lda 	GXY1
.810b	4d 33 06	eor $0633			eor 	GXY0
.810e	60		rts				rts
.810f					GXLineAdvance:
.810f	18		clc				clc 								; add adjust to position
.8110	ad 44 06	lda $0644			lda 	GXPosition
.8113	6d 45 06	adc $0645			adc 	GXAdjust
.8116	8d 44 06	sta $0644			sta 	GXPosition
.8119	9c 47 06	stz $0647			stz 	GXAddSelect 				; clear add select flag
.811c	b0 05		bcs $8123			bcs 	_GXLAOverflow 				; if carry out, overflowed.
.811e	cd 46 06	cmp $0646			cmp 	GXTotal 					; if exceeded total
.8121	90 0a		bcc $812d			bcc 	_GXLANoExtra
.8123					_GXLAOverflow:
.8123	ce 47 06	dec $0647			dec 	GXAddSelect 				; set addselect to $FF
.8126	38		sec				sec 								; subtract total and write back
.8127	ed 46 06	sbc $0646			sbc 	GXTotal
.812a	8d 44 06	sta $0644			sta 	GXPosition
.812d					_GXLANoExtra:
.812d	ad 42 06	lda $0642			lda 	GXIsDiffYLarger
.8130	f0 0d		beq $813f			beq 	_GXDXLarger
.8132	20 91 81	jsr $8191			jsr 	GXIncrementY
.8135	ad 47 06	lda $0647			lda 	GXAddSelect
.8138	f0 10		beq $814a			beq 	_GXLAExit
.813a	20 4b 81	jsr $814b			jsr 	GXAdjustX
.813d	80 0b		bra $814a			bra 	_GXLAExit
.813f					_GXDXLarger:
.813f	20 4b 81	jsr $814b			jsr 	GXAdjustX
.8142	ad 47 06	lda $0647			lda 	GXAddSelect
.8145	f0 03		beq $814a			beq 	_GXLAExit
.8147	20 91 81	jsr $8191			jsr 	GXIncrementY
.814a					_GXLAExit:
.814a	60		rts				rts
.814b					GXAdjustX:
.814b	ad 43 06	lda $0643			lda 	GXDXNegative
.814e	10 25		bpl $8175			bpl 	_GXAXRight
.8150	ad 31 06	lda $0631			lda 	GXX0
.8153	d0 03		bne $8158			bne 	_GXAXNoBorrow
.8155	ce 32 06	dec $0632			dec 	GXX0+1
.8158					_GXAXNoBorrow:
.8158	ce 31 06	dec $0631			dec 	GXX0
.815b	ce 3f 06	dec $063f			dec 	gsOffset 					; pixel left
.815e	ad 3f 06	lda $063f			lda 	gsOffset
.8161	c9 ff		cmp #$ff			cmp 	#$FF
.8163	d0 0f		bne $8174			bne 	_GXAYExit 					; underflow
.8165	c6 3b		dec $3b				dec 	gsTemp+1 					; borrow
.8167	a5 3b		lda $3b				lda 	gsTemp+1 					; gone off page
.8169	c9 a0		cmp #$a0			cmp 	#GXMappingAddress >> 8
.816b	b0 07		bcs $8174			bcs 	_GXAYExit
.816d	18		clc				clc
.816e	69 20		adc #$20			adc 	#$20 						; fix up
.8170	85 3b		sta $3b				sta 	gsTemp+1
.8172	c6 0d		dec $0d				dec 	GFXEditSlot 				; back one page
.8174					_GXAYExit:
.8174	60		rts				rts
.8175					_GXAXRight:
.8175	ee 31 06	inc $0631			inc 	GXX0
.8178	d0 03		bne $817d			bne 	_GXAXNoCarry
.817a	ee 32 06	inc $0632			inc 	GXX0+1
.817d					_GXAXNoCarry:
.817d	ee 3f 06	inc $063f			inc 	gsOffset 					; pixel right
.8180	d0 0e		bne $8190			bne 	_GXAXExit 					; if not overflowed, exit.
.8182	e6 3b		inc $3b				inc 	gsTemp+1 					; next line
.8184	a5 3b		lda $3b				lda 	gsTemp+1
.8186	c9 c0		cmp #$c0			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page ?
.8188	90 06		bcc $8190			bcc 	_GXAXExit
.818a	e9 20		sbc #$20			sbc 	#$20 						; fix up
.818c	85 3b		sta $3b				sta 	gsTemp+1
.818e	e6 0d		inc $0d				inc 	GFXEditSlot 				; next page
.8190					_GXAXExit:
.8190	60		rts				rts
.8191					GXIncrementY:
.8191	ee 33 06	inc $0633			inc 	GXY0
.8194	20 14 83	jsr $8314			jsr 	GXMovePositionDown
.8197	60		rts				rts
.8198					GXLineSetup:
.8198	ad 37 06	lda $0637			lda 	GXY1
.819b	38		sec				sec
.819c	ed 33 06	sbc $0633			sbc 	GXY0
.819f	4a		lsr a				lsr 	a
.81a0	8d 41 06	sta $0641			sta 	GXDiffY
.81a3	9c 43 06	stz $0643			stz 	GXDXNegative 				; clear -ve flag
.81a6	38		sec				sec
.81a7	ad 35 06	lda $0635			lda 	GXX1
.81aa	ed 31 06	sbc $0631			sbc 	GXX0
.81ad	8d 40 06	sta $0640			sta 	GXDiffX
.81b0	ad 36 06	lda $0636			lda 	GXX1+1 						; calculate MSB
.81b3	ed 32 06	sbc $0632			sbc 	GXX0+1
.81b6	6a		ror a				ror 	a 							; rotate bit into DiffX halving it
.81b7	6e 40 06	ror $0640			ror 	GXDiffX
.81ba	0a		asl a				asl 	a
.81bb	10 0c		bpl $81c9			bpl 	_GDXNotNegative
.81bd	a9 00		lda #$00			lda 	#0 							; make absolute value of |dx|
.81bf	38		sec				sec
.81c0	ed 40 06	sbc $0640			sbc 	GXDiffX
.81c3	8d 40 06	sta $0640			sta 	GXDiffX
.81c6	ce 43 06	dec $0643			dec 	GXDXNegative 				; -ve flag = $FF.
.81c9					_GDXNotNegative:
.81c9	9c 42 06	stz $0642			stz 	GXIsDiffYLarger 			; clear larger flag
.81cc	ad 41 06	lda $0641			lda 	GXDiffY 					; set adjust and total.
.81cf	8d 45 06	sta $0645			sta 	GXAdjust
.81d2	ad 40 06	lda $0640			lda 	GXDiffX
.81d5	8d 46 06	sta $0646			sta 	GXTotal
.81d8	ad 41 06	lda $0641			lda 	GXDiffY 					; if dy > dx
.81db	cd 40 06	cmp $0640			cmp 	GXDiffX
.81de	90 0f		bcc $81ef			bcc 	_GDXNotLarger
.81e0	ce 42 06	dec $0642			dec 	GXIsDiffYLarger 			; set the dy larger flag
.81e3	ad 40 06	lda $0640			lda 	GXDiffX 					; set adjust and total other way round
.81e6	8d 45 06	sta $0645			sta 	GXAdjust
.81e9	ad 41 06	lda $0641			lda 	GXDiffY
.81ec	8d 46 06	sta $0646			sta 	GXTotal
.81ef					_GDXNotLarger:
.81ef	ad 46 06	lda $0646			lda 	GXTotal
.81f2	4a		lsr a				lsr 	a
.81f3	8d 44 06	sta $0644			sta 	GXPosition
.81f6	60		rts				rts
.0640					GXDiffX:
>0640							.fill 	1
.0641					GXDiffY:
>0641							.fill 	1
.0642					GXIsDiffYLarger:
>0642							.fill 	1
.0643					GXDXNegative:
>0643							.fill 	1
.0644					GXPosition:
>0644							.fill 	1
.0645					GXAdjust:
>0645							.fill 	1
.0646					GXTotal:
>0646							.fill 	1
.0647					GXAddSelect:
>0647							.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/ab.graphics/graphics.asm

.81f7					GraphicDraw:
.81f7	c9 20		cmp #$20			cmp 	#$10*2 						; instructions 00-0F don't use
.81f9	b0 06		bcs $8201			bcs 	_GDCoordinate
.81fb	86 36		stx $36				stx 	gzTemp0 					; save X/Y
.81fd	84 37		sty $37				sty 	gzTemp0+1
.81ff	80 2c		bra $822d			bra 	_GDExecuteA 				; and execute
.8201					_GDCoordinate:
.8201	48		pha				pha 								; save AXY
.8202	da		phx				phx
.8203	5a		phy				phy
.8204	a2 03		ldx #$03			ldx 	#3 							; copy currentX to lastX
.8206					_GDCopy1:
.8206	bd 29 06	lda $0629,x			lda 	gxCurrentX,x
.8209	9d 2d 06	sta $062d,x			sta 	gxLastX,x
.820c	ca		dex				dex
.820d	10 f7		bpl $8206			bpl 	_GDCopy1
.820f	68		pla				pla 								; update Y
.8210	8d 2b 06	sta $062b			sta 	gxCurrentY
.8213	9c 2c 06	stz $062c			stz 	gxCurrentY+1
.8216	68		pla				pla
.8217	8d 29 06	sta $0629			sta 	gxCurrentX
.821a	68		pla				pla 								; get A (command+X.1) back
.821b	48		pha				pha
.821c	29 01		and #$01			and 	#1 							; put LSB as MSB of Current.X
.821e	8d 2a 06	sta $062a			sta 	gxCurrentX+1
.8221	a2 07		ldx #$07			ldx 	#7 								; copy current and last to gxXY/12 work area
.8223					_GDCopy2:
.8223	bd 29 06	lda $0629,x			lda 	gxCurrentX,x
.8226	9d 31 06	sta $0631,x			sta 	gxX0,x
.8229	ca		dex				dex
.822a	10 f7		bpl $8223			bpl 	_GDCopy2
.822c	68		pla				pla 								; get command back
.822d					_GDExecuteA:
.822d	29 fe		and #$fe			and 	#$FE 						; lose LSB
.822f	aa		tax				tax
.8230	7c 34 82	jmp ($8234,x)			jmp 	(GDVectors,x)
.8233					GXMove:
.8233	60		rts				rts
.8234					GDVectors:
>8234	83 80						.word 	GXClearBitmap 				; $00 	  	: Clear Bitmap to X
>8236							.fill 	15*2 						; $01-$0F 	: Reserved
>8254	33 82						.word 	GXMove 						; $10     	: Move (does nothing other than update coords)
>8256	cd 80						.word 	GXLine 						; $11 		: Draw line

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/ab.graphics/grtest.asm

.8258					RunDemos:
.8258	64 01		stz $01				stz 	1
.825a	a9 0f		lda #$0f			lda 	#$0F
.825c	8d 00 d0	sta $d000			sta 	$D000
.825f	a9 01		lda #$01			lda 	#1
.8261	8d 00 d1	sta $d100			sta 	$D100
.8264	9c 01 d1	stz $d101			stz 	$D101
.8267	9c 02 d1	stz $d102			stz 	$D102
.826a	a9 02		lda #$02			lda 	#2
.826c	8d 03 d1	sta $d103			sta 	$D103
.826f	a9 10		lda #$10			lda 	#16
.8271	8d 39 06	sta $0639			sta 	gxBasePage
.8274	a9 f0		lda #$f0			lda 	#240
.8276	8d 3a 06	sta $063a			sta 	gxHeight
.8279	a9 fc		lda #$fc			lda 	#$FC
.827b	8d 3b 06	sta $063b			sta 	gxEORValue
.827e	a9 ff		lda #$ff			lda 	#$FF
.8280	8d 3c 06	sta $063c			sta 	gxANDValue
.8283	a9 00		lda #$00			lda 	#((0)*2)+(((4) >> 8) & 1)
.8285	a2 04		ldx #$04			ldx 	#((4) & $FF)
.8287	a0 00		ldy #$00			ldy 	#(0)
.8289	20 f7 81	jsr $81f7			jsr 	GraphicDraw
.828c					loop:
.828c	ae ff 7f	ldx $7fff			ldx 	$7FFF
.828f	a0 00		ldy #$00			ldy 	#0
.8291	a9 20		lda #$20			lda 	#16*2
.8293	20 f7 81	jsr $81f7			jsr 	GraphicDraw
.8296	ae ff 7f	ldx $7fff			ldx 	$7FFF
.8299	a0 ef		ldy #$ef			ldy 	#239
.829b	a9 22		lda #$22			lda 	#17*2
.829d	20 f7 81	jsr $81f7			jsr 	GraphicDraw
.82a0	ee ff 7f	inc $7fff			inc 	$7FFF
.82a3	80 e7		bra $828c			bra 	loop
.82a5	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/ab.graphics/utility/access.asm

.82a6					GXOpenBitmap:
.82a6	78		sei				sei 								; no interrupts here
.82a7	a5 00		lda $00				lda 	0 							; save original MMU Control register
.82a9	8d 3e 06	sta $063e			sta 	gxOriginalMMUSetting
.82ac	a9 80		lda #$80			lda 	#GFXMappingLUT*16+$80+GFXMappingLUT
.82ae	85 00		sta $00				sta 	0
.82b0	a5 0d		lda $0d				lda 	GFXEditSlot 				; Save the original LUT slot value
.82b2	8d 3d 06	sta $063d			sta 	gxOriginalLUTValue
.82b5	58		cli				cli
.82b6	60		rts				rts
.82b7					GXCloseBitmap:
.82b7	78		sei				sei
.82b8	ad 3d 06	lda $063d			lda 	gxOriginalLUTValue 			; restore LUT slot value
.82bb	85 0d		sta $0d				sta 	GFXEditSlot
.82bd	ad 3e 06	lda $063e			lda 	gxOriginalMMUSetting 		; restore MMU Control register
.82c0	85 00		sta $00				sta 	0
.82c2	58		cli				cli
.82c3	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/ab.graphics/utility/calculate.asm

.82c4					GXPositionCalc:
.82c4	ad 33 06	lda $0633			lda 	GXY0 						; gsTemp = Y0
.82c7	85 3a		sta $3a				sta 	gsTemp
.82c9	64 3b		stz $3b				stz 	gsTemp+1
.82cb	06 3a		asl $3a				asl 	gsTemp 						; gsTemp = Y0 * 4
.82cd	26 3b		rol $3b				rol 	gsTemp+1
.82cf	06 3a		asl $3a				asl 	gsTemp
.82d1	26 3b		rol $3b				rol 	gsTemp+1
.82d3	18		clc				clc 								; gsTemp = Y0 * 5, as it's still in A
.82d4	65 3a		adc $3a				adc 	gsTemp
.82d6	85 3a		sta $3a				sta 	gsTemp
.82d8	90 02		bcc $82dc			bcc 	_GXPCNoCarry
.82da	e6 3b		inc $3b				inc 	gsTemp+1
.82dc					_GXPCNoCarry:
.82dc	06 3a		asl $3a				asl 	gsTemp 						; now Y0 * 10. Needs to be multiplied by another
.82de	26 3b		rol $3b				rol 	gsTemp+1 					; 32. At this point the MSB contains the offset
.82e0	a5 3b		lda $3b				lda	 	gsTemp+1 					; so save this in zTemp0 and zero it.
.82e2	85 36		sta $36				sta 	gzTemp0
.82e4	64 3b		stz $3b				stz 	gsTemp+1
.82e6	a9 05		lda #$05			lda 	#5 							; now multiply by 32, this puts this in the range 0..8191
.82e8					_GXPCMultiply32:
.82e8	06 3a		asl $3a				asl 	gsTemp
.82ea	26 3b		rol $3b				rol 	gsTemp+1
.82ec	3a		dec a				dec 	a
.82ed	d0 f9		bne $82e8			bne 	_GXPCMultiply32
.82ef	18		clc				clc
.82f0	ad 31 06	lda $0631			lda 	GXX0 						; add X to this value, put the result in gsOffset, gsTemp has to be on a page boundary
.82f3	65 3a		adc $3a				adc 	gsTemp
.82f5	8d 3f 06	sta $063f			sta 	gsOffset
.82f8	ad 32 06	lda $0632			lda 	GXX0+1
.82fb	65 3b		adc $3b				adc 	gsTemp+1
.82fd	c9 20		cmp #$20			cmp 	#$20 						; has it overflowed into the next one ?
.82ff	90 04		bcc $8305			bcc 	_GXPCNoOverflow
.8301	29 1f		and #$1f			and 	#$1F 						; fix it up
.8303	e6 36		inc $36				inc 	gzTemp0 					; add 1 to the page number
.8305					_GXPCNoOverflow:
.8305	09 a0		ora #$a0			ora 	#(GXMappingAddress >> 8) 	; make it the address mapped in.
.8307	85 3b		sta $3b				sta 	gsTemp+1
.8309	64 3a		stz $3a				stz 	gsTemp
.830b	18		clc				clc
.830c	a5 36		lda $36				lda 	gzTemp0 					; get the page number
.830e	6d 39 06	adc $0639			adc 	gxBasePage 					; by adding the base page
.8311	85 0d		sta $0d				sta 	GFXEditSlot 				; and map it into memory.
.8313	60		rts				rts
.8314					GXMovePositionDown:
.8314	18		clc				clc 								; add 320 to offset/temp+1
.8315	ad 3f 06	lda $063f			lda 	gsOffset
.8318	69 40		adc #$40			adc 	#64
.831a	8d 3f 06	sta $063f			sta 	gsOffset
.831d	a5 3b		lda $3b				lda 	gsTemp+1
.831f	69 01		adc #$01			adc 	#1
.8321	85 3b		sta $3b				sta 	gsTemp+1
.8323	c9 c0		cmp #$c0			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page
.8325	90 07		bcc $832e			bcc 	_GXMPDExit
.8327	38		sec				sec  								; next page
.8328	e9 20		sbc #$20			sbc 	#$20
.832a	85 3b		sta $3b				sta 	gsTemp+1
.832c	e6 0d		inc $0d				inc 	GFXEditSlot
.832e					_GXMPDExit:
.832e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/ab.graphics/utility/sort.asm

.832f					GXSortY:
.832f	ad 33 06	lda $0633			lda 	gxY0 						; if Y0 >= Y1
.8332	cd 37 06	cmp $0637			cmp 	gxY1
.8335	90 0b		bcc $8342			bcc 	_GXSYSorted
.8337	a2 03		ldx #$03			ldx 	#3 							; swap 3-0
.8339	a0 07		ldy #$07			ldy 	#7 							; with 4-7
.833b					_GXSwap1:
.833b	20 43 83	jsr $8343			jsr 	GXSwapXY
.833e	88		dey				dey
.833f	ca		dex				dex
.8340	10 f9		bpl $833b			bpl 	_GXSwap1
.8342					_GXSYSorted:
.8342	60		rts				rts
.8343					GXSwapXY:
.8343	bd 31 06	lda $0631,x			lda 	gxX0,x
.8346	48		pha				pha
.8347	b9 31 06	lda $0631,y			lda 	gxX0,y
.834a	9d 31 06	sta $0631,x			sta 	gxX0,x
.834d	68		pla				pla
.834e	99 31 06	sta $0631,y			sta 	gxX0,y
.8351	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/assembler.asm

.8352					AssembleGroup1:
.8352	a9 ff		lda #$ff			lda 	#$FF
.8354	8d a5 04	sta $04a5			sta 	ModeMask 					; initialise the mode mask - all for all
.8357	80 02		bra $835b			bra 	AsmGroup12
.8359					AssembleGroup2:
.8359	a5 00		lda $00				lda 	$00
.835b					AsmGroup12:
.835b	8d a3 04	sta $04a3			sta 	IsGroup1 					; save the 'group 1' flag
.835e	68		pla				pla 								; pop the return address to access the information following.
.835f	fa		plx				plx
.8360	20 e9 83	jsr $83e9			jsr 	AccessParameters 			; get opcode and save as base
.8363	8d a4 04	sta $04a4			sta 	BaseOpcode
.8366	ad a3 04	lda $04a3			lda 	IsGroup1 					; skip if group 1 as we don't have a complex mask.
.8369	d0 08		bne $8373			bne 	_AG12HaveMask
.836b	a9 02		lda #$02			lda 	#2 							; if group 2 the second parameter is the mask
.836d	20 f1 83	jsr $83f1			jsr 	GetParameter		 		; e.g. which modes are supported for this operand
.8370	8d a5 04	sta $04a5			sta 	ModeMask
.8373					_AG12HaveMask:
.8373	20 2c 85	jsr $852c			jsr 	TypeAndCalculateOperand 	; get zero page type
.8376	da		phx				phx 								; save found address mode
.8377	20 55 84	jsr $8455			jsr 	AssembleModeX
.837a	fa		plx				plx  								; restore address mode
.837b	b0 0b		bcs $8388			bcs 	_AG12Exit
.837d	20 89 83	jsr $8389			jsr 	PromoteToAbsolute  			; promote ZP to ABS and try that
.8380	20 55 84	jsr $8455			jsr 	AssembleModeX
.8383	b0 03		bcs $8388			bcs 	_AG12Exit
.8385	4c 46 a9	jmp $a946			jmp 	SyntaxError 				; can't do either, so must be wrong mode/operand.
.8388					_AG12Exit:
.8388	60		rts				rts
.8389					PromoteToAbsolute:
.8389	a9 6c		lda #$6c			lda 	#AM_ABS 					; lda xx
.838b	e0 e4		cpx #$e4			cpx 	#AM_ZEROPAGE
.838d	f0 19		beq $83a8			beq 	_PTADo
.838f	a9 7c		lda #$7c			lda 	#AM_ABSX 					; lda xx,X
.8391	e0 f4		cpx #$f4			cpx 	#AM_ZEROX
.8393	f0 13		beq $83a8			beq 	_PTADo
.8395	a9 78		lda #$78			lda 	#AM_ABSY 					; lda xx,Y
.8397	e0 80		cpx #$80			cpx 	#AM_ZEROY
.8399	f0 0d		beq $83a8			beq 	_PTADo
.839b	a9 01		lda #$01			lda 	#AM_INDABS 					; lda (xx) (jump)
.839d	e0 d1		cpx #$d1			cpx 	#AM_IND
.839f	f0 07		beq $83a8			beq 	_PTADo
.83a1	a9 02		lda #$02			lda 	#AM_INDABSX 				; lda (xx,x) (jump)
.83a3	e0 c0		cpx #$c0			cpx 	#AM_INDX
.83a5	f0 01		beq $83a8			beq 	_PTADo
.83a7	60		rts				rts
.83a8					_PTADo:
.83a8	aa		tax				tax
.83a9	60		rts				rts
.83aa					AssembleGroup3:
.83aa	68		pla				pla 								; get parameters, which is just the opcode.
.83ab	fa		plx				plx
.83ac	20 e9 83	jsr $83e9			jsr 	AccessParameters 			; get and output opcode
.83af	20 01 84	jsr $8401			jsr 	AssemblerWriteByte
.83b2	20 90 85	jsr $8590			jsr 	CalculateOperand 			; get a 16 bit operand
.83b5	ad 08 04	lda $0408			lda 	NSMantissa0 				; calculate the offset
.83b8	38		sec				sec
.83b9	ed 9e 04	sbc $049e			sbc 	AssemblerAddress
.83bc	48		pha				pha 								; LSB in A
.83bd	ad 10 04	lda $0410			lda 	NSMantissa1
.83c0	ed 9f 04	sbc $049f			sbc 	AssemblerAddress+1
.83c3	aa		tax				tax 								; MSB in X
.83c4	68		pla				pla
.83c5	18		clc				clc 								; $80 to easy check $80-$7F, plus 1 for offset error
.83c6	69 7f		adc #$7f			adc 	#$7F
.83c8	90 01		bcc $83cb			bcc 	_AG3NoCarry
.83ca	e8		inx				inx
.83cb					_AG3NoCarry:
.83cb	38		sec				sec 								; fix back and write out anyways.
.83cc	e9 80		sbc #$80			sbc 	#$80
.83ce	20 01 84	jsr $8401			jsr 	AssemblerWriteByte
.83d1	e0 00		cpx #$00			cpx 	#0 							; was it in range
.83d3	f0 0a		beq $83df			beq 	_AG3Exit
.83d5	ad a0 04	lda $04a0			lda 	AssemblerControl 			; are we allowing bad values ?
.83d8	29 01		and #$01			and 	#1
.83da	f0 03		beq $83df			beq 	_AG3Exit
.83dc	4c 4b a9	jmp $a94b			jmp 	RangeError 					; no, branch is out of range
.83df					_AG3Exit:
.83df	60		rts				rts
.83e0					AssembleGroup4:
.83e0	68		pla				pla 								; pop address
.83e1	fa		plx				plx
.83e2	20 e9 83	jsr $83e9			jsr 	AccessParameters 			; access and get first
.83e5	20 01 84	jsr $8401			jsr 	AssemblerWriteByte 			; output it.
.83e8	60		rts				rts
.83e9					AccessParameters:
.83e9	8d a1 04	sta $04a1			sta 	ParamStart
.83ec	8e a2 04	stx $04a2			stx 	ParamStart+1
.83ef	a9 01		lda #$01			lda 	#1
.83f1					GetParameter:
.83f1	5a		phy				phy
.83f2	a8		tay				tay
.83f3	ad a1 04	lda $04a1			lda 	ParamStart
.83f6	85 36		sta $36				sta 	zTemp0
.83f8	ad a2 04	lda $04a2			lda 	ParamStart+1
.83fb	85 37		sta $37				sta 	zTemp0+1
.83fd	b1 36		lda ($36),y			lda 	(zTemp0),y
.83ff	7a		ply				ply
.8400	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/aswrite.asm

.8401					AssemblerWriteByte:
.8401	48		pha			pha
.8402	ad a0 04	lda $04a0		lda 	AssemblerControl 				; check printing bytes ?
.8405	29 02		and #$02		and 	#2
.8407	f0 1b		beq $8424		beq 	_AWBNoPrint
.8409	ad 9f 04	lda $049f		lda		AssemblerAddress+1 				; print address
.840c	20 3f 84	jsr $843f		jsr 	PrintHex
.840f	ad 9e 04	lda $049e		lda		AssemblerAddress
.8412	20 3f 84	jsr $843f		jsr 	PrintHex
.8415	a9 20		lda #$20		lda 	#' '
.8417	20 e9 aa	jsr $aae9		jsr 	EXTPrintCharacter
.841a	68		pla			pla 									; print byte
.841b	48		pha			pha
.841c	20 3f 84	jsr $843f		jsr 	PrintHex
.841f	a9 0d		lda #$0d		lda 	#13
.8421	20 e9 aa	jsr $aae9		jsr 	EXTPrintCharacter
.8424					_AWBNoPrint:
.8424	ad 9e 04	lda $049e		lda		AssemblerAddress				; copy address to zTemp0
.8427	85 36		sta $36			sta 	zTemp0
.8429	ad 9f 04	lda $049f		lda		AssemblerAddress+1
.842c	f0 0e		beq $843c		beq 	_AWBRange
.842e	85 37		sta $37			sta 	zTemp0+1
.8430	68		pla			pla 									; write byte out
.8431	92 36		sta ($36)		sta 	(zTemp0)
.8433	ee 9e 04	inc $049e		inc 	AssemblerAddress 				; bump address
.8436	d0 03		bne $843b		bne 	_AWBNoCarry
.8438	ee 9f 04	inc $049f		inc 	AssemblerAddress+1
.843b					_AWBNoCarry:
.843b	60		rts			rts
.843c					_AWBRange:
.843c	4c 4b a9	jmp $a94b		jmp 	RangeError
.843f					PrintHex:
.843f	48		pha				pha
.8440	4a		lsr a				lsr 	a
.8441	4a		lsr a				lsr 	a
.8442	4a		lsr a				lsr 	a
.8443	4a		lsr a				lsr 	a
.8444	20 48 84	jsr $8448			jsr 	_PrintNibble
.8447	68		pla				pla
.8448					_PrintNibble:
.8448	29 0f		and #$0f			and 	#15
.844a	c9 0a		cmp #$0a			cmp 	#10
.844c	90 02		bcc $8450			bcc 	_NoShift
.844e	69 06		adc #$06			adc 	#6
.8450					_NoShift:
.8450	69 30		adc #$30			adc 	#48
.8452	4c e9 aa	jmp $aae9			jmp 	EXTPrintCharacter

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/instruction.asm

.8455					AssembleModeX:
.8455	5a		phy				phy
.8456	ad a3 04	lda $04a3			lda 	IsGroup1
.8459	f0 17		beq $8472			beq 	_AMXGroup2
.845b	8a		txa				txa 							; is it in group # 1
.845c	29 40		and #$40			and 	#AM_ISG1
.845e	f0 50		beq $84b0			beq 	_AMXFail 				; no, give up.
.8460	8a		txa				txa 							; get back.
.8461	29 1f		and #$1f			and 	#$1F 					; this is now the offset.
.8463	e0 e0		cpx #$e0			cpx 	#AM_IMMEDIATE 			; if not immediate, we can continue.
.8465	d0 22		bne $8489			bne 	_AMXHaveInfo
.8467	ad a4 04	lda $04a4			lda 	BaseOpcode 				; cannot store immediate.
.846a	c9 81		cmp #$81			cmp 	#$81
.846c	f0 42		beq $84b0			beq 	_AMXFail
.846e	a9 08		lda #$08			lda 	#8 						; if immediate we use offset 8.
.8470	80 17		bra $8489			bra 	_AMXHaveInfo 			; odd design decision there.
.8472					_AMXGroup2:
.8472	8a		txa				txa 							; is it in group 2 ?
.8473	29 20		and #$20			and 	#AM_ISG2
.8475	f0 39		beq $84b0			beq 	_AMXFail 				; no, give up.
.8477	8a		txa				txa 							; get the offset into Y
.8478	29 1f		and #$1f			and 	#$1F
.847a	4a		lsr a				lsr 	a 						; make it 0-7.
.847b	4a		lsr a				lsr  	a
.847c	a8		tay				tay
.847d	ad a5 04	lda $04a5			lda 	ModeMask 				; shift the modemask left so you can check it against the requested offset
.8480					_AMXCheckOkay:
.8480	0a		asl a				asl 	a 						; shift modemask left enough times to check legitimate.
.8481	88		dey				dey
.8482	10 fc		bpl $8480			bpl 	_AMXCheckOkay
.8484	90 2a		bcc $84b0			bcc 	_AMXFail 				; not allowed.
.8486	8a		txa				txa  							; get mask back
.8487	29 1f		and #$1f			and 	#$1F
.8489					_AMXHaveInfo:
.8489	e0 00		cpx #$00			cpx 	#$00 					; does it *require* an 8 bit operand
.848b	10 05		bpl $8492			bpl 	_AMXAnySize 			; checking bit 7, the zero page opcode flag.
.848d	ac 10 04	ldy $0410			ldy 	NSMantissa1 			; fail if it is outside range, e.g. the MSB is set.
.8490	d0 1e		bne $84b0			bne 	_AMXFail
.8492					_AMXAnySize:
.8492	18		clc				clc 							; add offset to the base opcode
.8493	6d a4 04	adc $04a4			adc 	BaseOpcode
.8496					_AMXOutputCode:
.8496	20 01 84	jsr $8401			jsr 	AssemblerWriteByte 		; write the opcode out.
.8499	e0 28		cpx #$28			cpx 	#AM_ACC 				; A mode (e.g. ASL A)
.849b	f0 10		beq $84ad			beq 	_AMXExit
.849d	ad 08 04	lda $0408			lda 	NSMantissa0 				; write LSB operand
.84a0	20 01 84	jsr $8401			jsr 	AssemblerWriteByte
.84a3	e0 00		cpx #$00			cpx 	#$00 					; zeropage ?
.84a5	30 06		bmi $84ad			bmi 	_AMXExit
.84a7	ad 10 04	lda $0410			lda 	NSMantissa1 			; write MSB operand
.84aa	20 01 84	jsr $8401			jsr 	AssemblerWriteByte
.84ad					_AMXExit:
.84ad	7a		ply				ply
.84ae	38		sec				sec
.84af	60		rts				rts
.84b0					_AMXFail:
.84b0	a0 00		ldy #$00			ldy 	#0
.84b2					_AMXCheckOddities:
.84b2	8a		txa				txa
.84b3	d9 db 84	cmp $84db,y			cmp 	ExtraOpcode+2,y 		; match address mode
.84b6	d0 16		bne $84ce			bne 	_AMXCONext
.84b8	b9 d9 84	lda $84d9,y			lda 	ExtraOpcode+0,y 		; do the base opcodes match
.84bb	cd a4 04	cmp $04a4			cmp 	BaseOpcode
.84be	d0 0e		bne $84ce			bne 	_AMXCONext
.84c0	e0 00		cpx #$00			cpx 	#$00 					; requires zero page ?
.84c2	10 05		bpl $84c9			bpl 	_AMXCONotZero
.84c4	ad 10 04	lda $0410			lda 	NSMantissa1
.84c7	d0 05		bne $84ce			bne 	_AMXCONext
.84c9					_AMXCONotZero:
.84c9	b9 da 84	lda $84da,y			lda 	ExtraOpcode+1,y 		; get new opcode
.84cc	80 c8		bra $8496			bra 	_AMXOutputCode 			; and assemble it
.84ce					_AMXCONext:
.84ce	c8		iny				iny
.84cf	c8		iny				iny
.84d0	c8		iny				iny
.84d1	b9 d9 84	lda $84d9,y			lda 	ExtraOpcode+0,y 		; end of table
.84d4	d0 dc		bne $84b2			bne 	_AMXCheckOddities
.84d6					_AMXCOFail:
.84d6	7a		ply				ply
.84d7	18		clc				clc
.84d8	60		rts				rts
.84d9					ExtraOpcode:
>84d9	40 6c 01					.byte $40,$6c,AM_INDABS 	; jmp
>84dc	40 7c 02					.byte $40,$7C,AM_INDABSX 	; jmp
>84df	a2 be 78					.byte $a2,$BE,AM_ABSY 		; ldx
>84e2	a2 b6 80					.byte $a2,$B6,AM_ZEROY 		; ldx
>84e5	82 96 80					.byte $82,$96,AM_ZEROY 		; stx
>84e8	e2 1a 28					.byte $e2,$1a,AM_ACC 		; inc
>84eb	c2 3a 28					.byte $c2,$3a,AM_ACC 		; dec
>84ee	20 89 e0					.byte $20,$89,AM_IMMEDIATE 	; bit
>84f1	60 9c 6c					.byte $60,$9c,AM_ABS 		; stz
>84f4	60 9e 7c					.byte $60,$9e,AM_ABSX 		; stz
>84f7	00						.byte $00

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/label.asm

.84f8					LabelHere:
.84f8	c8		iny				iny 								; skip .
.84f9	a2 00		ldx #$00			ldx 	#0 							; get a term
.84fb	20 01 97	jsr $9701			jsr 	EvaluateTerm 				; get a term
.84fe	ad 00 04	lda $0400			lda 	NSStatus 					; needs to be an integer reference.
.8501	c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.8503	d0 24		bne $8529			bne 	_ALType
.8505	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy reference address to zTemp0
.8508	85 36		sta $36				sta 	zTemp0
.850a	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.850d	85 37		sta $37				sta 	zTemp0+1
.850f	5a		phy				phy 								; copy address in.
.8510	a0 01		ldy #$01			ldy 	#1
.8512	ad 9e 04	lda $049e			lda	 	AssemblerAddress
.8515	92 36		sta ($36)			sta 	(zTemp0)
.8517	ad 9f 04	lda $049f			lda	 	AssemblerAddress+1
.851a	91 36		sta ($36),y			sta 	(zTemp0),y
.851c	c8		iny				iny
.851d	a9 00		lda #$00			lda 	#0
.851f	91 36		sta ($36),y			sta 	(zTemp0),y
.8521	c8		iny				iny
.8522	91 36		sta ($36),y			sta 	(zTemp0),y
.8524	c8		iny				iny
.8525	91 36		sta ($36),y			sta 	(zTemp0),y
.8527	7a		ply				ply
.8528	60		rts				rts
.8529					_ALType:
.8529	4c 50 a9	jmp $a950			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/operands.asm

.852c					TypeAndCalculateOperand:
.852c	b1 30		lda ($30),y			lda 	(codePtr),y
.852e	a2 28		ldx #$28			ldx 	#AM_ACC 					; ACC if : or EOL
.8530	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.8532	f0 5b		beq $858f			beq 	_TACOExit
.8534	c9 80		cmp #$80			cmp 	#KWC_EOL
.8536	f0 57		beq $858f			beq 	_TACOExit
.8538	c8		iny				iny
.8539	a2 e0		ldx #$e0			ldx 	#AM_IMMEDIATE
.853b	c9 23		cmp #$23			cmp 	#KWD_HASH 					; if hash, then immediate - constant.
.853d	f0 51		beq $8590			beq 	CalculateOperand
.853f	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; if ( then check for indirection
.8541	f0 1f		beq $8562			beq 	_TACOIndirect
.8543	88		dey				dey 								; undo get of first character
.8544	20 90 85	jsr $8590			jsr 	CalculateOperand 			; get operand
.8547	b1 30		lda ($30),y			lda 	(codePtr),y
.8549	a2 e4		ldx #$e4			ldx 	#AM_ZEROPAGE 				; if not, try zero page (then absolute)
.854b	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.854d	d0 40		bne $858f			bne 	_TACOExit
.854f	c8		iny				iny
.8550	20 d7 a2	jsr $a2d7			jsr 	TACOCheckXY 				; extract X,Y or 0 (neither) from the variable.
.8553	a2 f4		ldx #$f4			ldx 	#AM_ZEROX 					; check for X
.8555	c9 58		cmp #$58			cmp 	#'X'
.8557	f0 36		beq $858f			beq 	_TACOExit
.8559	a2 80		ldx #$80			ldx 	#AM_ZEROY 					; check for Y
.855b	c9 59		cmp #$59			cmp 	#'Y'
.855d	f0 30		beq $858f			beq 	_TACOExit
.855f					_TACOSyntax:
.855f	4c 46 a9	jmp $a946			jmp 	SyntaxError
.8562					_TACOIndirect:
.8562	20 90 85	jsr $8590			jsr 	CalculateOperand 			; get the operand
.8565	b1 30		lda ($30),y			lda 	(codePtr),y
.8567	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if , then it must be ,X)
.8569	f0 17		beq $8582			beq 	_TACOIndX
.856b	20 60 a3	jsr $a360			jsr 	CheckRightBracket  			; otherwise must be ) or ),Y
.856e	b1 30		lda ($30),y			lda 	(codePtr),y
.8570	a2 d1		ldx #$d1			ldx 	#AM_IND
.8572	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not comma then exit with (xx)
.8574	d0 19		bne $858f			bne 	_TACOExit
.8576	c8		iny				iny
.8577	20 d7 a2	jsr $a2d7			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.857a	c9 59		cmp #$59			cmp 	#'Y' 						; check Y
.857c	d0 e1		bne $855f			bne 	_TACOSyntax
.857e	a2 d0		ldx #$d0			ldx 	#AM_INDY
.8580	80 0d		bra $858f			bra 	_TACOExit
.8582					_TACOIndX:
.8582	c8		iny				iny
.8583	20 d7 a2	jsr $a2d7			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.8586	c9 58		cmp #$58			cmp 	#'X' 						; check X
.8588	d0 d5		bne $855f			bne 	_TACOSyntax
.858a	20 60 a3	jsr $a360			jsr 	CheckRightBracket			; check )
.858d	a2 c0		ldx #$c0			ldx 	#AM_INDX
.858f					_TACOExit:
.858f	60		rts				rts
.8590					CalculateOperand:
.8590	48		pha				pha
.8591	da		phx				phx
.8592	a2 00		ldx #$00			ldx 	#0 							; get 16 bit integer in Slot 0
.8594	20 6b 9b	jsr $9b6b			jsr 	Evaluate16BitInteger
.8597	fa		plx				plx
.8598	68		pla				pla
.8599	60		rts				rts
.a2d7					TACOCheckXY:
.a2d7	b1 30		lda ($30),y			lda 	(codePtr),y
.a2d9	29 c0		and #$c0			and 	#$C0 						; check it is an identifier reference.
.a2db	c9 40		cmp #$40			cmp 	#$40
.a2dd	d0 21		bne $a300			bne 	_TCXYFail
.a2df	b1 30		lda ($30),y			lda 	(codePtr),y
.a2e1	18		clc				clc
.a2e2	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.a2e4	85 37		sta $37				sta 	zTemp0+1
.a2e6	c8		iny				iny
.a2e7	b1 30		lda ($30),y			lda 	(codePtr),y
.a2e9	c8		iny				iny
.a2ea	85 36		sta $36				sta 	zTemp0
.a2ec	5a		phy				phy 								; save position
.a2ed	a0 02		ldy #$02			ldy 	#2 							; type is integer ?
.a2ef	b1 36		lda ($36),y			lda 	(zTemp0),y
.a2f1	d0 0c		bne $a2ff			bne 	_TCXYPopFail
.a2f3	a0 08		ldy #$08			ldy 	#8 							; get first character, should have bit 7 set as also last.
.a2f5	b1 36		lda ($36),y			lda 	(zTemp0),y
.a2f7	c9 d8		cmp #$d8			cmp 	#'X'+$80 					; should be X or Y
.a2f9	f0 08		beq $a303			beq 	_TCXYFound
.a2fb	c9 d9		cmp #$d9			cmp 	#'Y'+$80
.a2fd	f0 04		beq $a303			beq 	_TCXYFound
.a2ff					_TCXYPopFail:
.a2ff	7a		ply				ply
.a300					_TCXYFail:
.a300	a9 00		lda #$00			lda 	#0
.a302	60		rts				rts
.a303					_TCXYFound:
.a303	7a		ply				ply 								; restore position
.a304	29 7f		and #$7f			and 	#$7F 						; throw bit 7
.a306	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/editor.asm

.859a					EditProgramCode:
.859a	ad a7 04	lda $04a7			lda 	TokenLineNumber 			; find the line.
.859d	ae a8 04	ldx $04a8			ldx 	TokenLineNumber+1
.85a0	20 3e 9c	jsr $9c3e			jsr 	MemorySearch
.85a3	90 05		bcc $85aa			bcc 	_EPCNoDelete 				; reached the end don't delete
.85a5	d0 03		bne $85aa			bne 	_EPCNoDelete 				; found slot but didn't match, no delete
.85a7	20 2d ab	jsr $ab2d			jsr 	MemoryDeleteLine 			; delete the line
.85aa					_EPCNoDelete:
.85aa	ad a9 04	lda $04a9			lda 	TokenBuffer 				; buffer empty
.85ad	c9 80		cmp #$80			cmp 	#KWC_EOL
.85af	f0 0d		beq $85be			beq 	_EPCNoInsert
.85b1	ad a7 04	lda $04a7			lda 	TokenLineNumber 			; find the line - it cannot exist.
.85b4	ae a8 04	ldx $04a8			ldx 	TokenLineNumber+1 			; so this can't fail, it returns some point in the code.
.85b7	20 3e 9c	jsr $9c3e			jsr 	MemorySearch
.85ba	18		clc				clc 								; insert at this point.
.85bb	20 64 ab	jsr $ab64			jsr 	MemoryInsertLine 			; insert the line
.85be					_EPCNoInsert:
.85be	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/warmstart.asm

.85bf					WarmStart:
.85bf	a2 ff		ldx #$ff			ldx 	#$FF
.85c1	9a		txs				txs
.85c2	20 ff aa	jsr $aaff			jsr 	EXTInputLine 				; get line to lineBuffer
.85c5	20 58 a0	jsr $a058			jsr 	TokeniseLine 				; tokenise the line
.85c8	ad a7 04	lda $04a7			lda 	TokenLineNumber 			; line number ?
.85cb	0d a8 04	ora $04a8			ora 	TokenLineNumber+1
.85ce	d0 17		bne $85e7			bne 	_WSEditCode 				; if so,edit code.
.85d0	9c a6 04	stz $04a6			stz 	TokenOffset 				; zero offset, meaning it only runs one line.
.85d3	a9 a6		lda #$a6			lda 	#((TokenOffset) & $FF)
.85d5	85 30		sta $30				sta 	codePtr
.85d7	a9 04		lda #$04			lda 	#((TokenOffset) >> 8)
.85d9	85 31		sta $31				sta 	codePtr+1
.85db	ad a9 04	lda $04a9			lda 	TokenBuffer 				; nothing to run
.85de	c9 80		cmp #$80			cmp 	#KWC_EOL
.85e0	f0 dd		beq $85bf			beq 	WarmStart
.85e2	20 f0 8b	jsr $8bf0			jsr 	RUNCodePointerLine 			; execute that line.
.85e5	80 d8		bra $85bf			bra 	WarmStart
.85e7					_WSEditCode:
.85e7	20 9a 85	jsr $859a			jsr 	EditProgramCode
.85ea	20 58 86	jsr $8658			jsr 	ClearCommand
.85ed	80 d0		bra $85bf			bra 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assemble.asm

.85ef					AssembleCommand:
.85ef	a2 00		ldx #$00			ldx 	#0
.85f1	20 6b 9b	jsr $9b6b			jsr 	Evaluate16BitInteger 		; start address
.85f4	ad 08 04	lda $0408			lda 	NSMantissa0
.85f7	8d 9e 04	sta $049e			sta 	AssemblerAddress
.85fa	ad 10 04	lda $0410			lda 	NSMantissa1
.85fd	8d 9f 04	sta $049f			sta 	AssemblerAddress+1
.8600	20 68 a3	jsr $a368			jsr 	CheckComma
.8603	20 77 9b	jsr $9b77			jsr 	Evaluate8BitInteger 		; options
.8606	ad 08 04	lda $0408			lda 	NSMantissa0
.8609	8d a0 04	sta $04a0			sta 	AssemblerControl
.860c	60		rts				rts
.860d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assert.asm

.860e					AssertCommand:
.860e	a2 00		ldx #$00			ldx 	#0
.8610	20 56 9b	jsr $9b56			jsr 	EvaluateInteger 			; the assert test
.8613	20 0f 9c	jsr $9c0f			jsr 	NSMIsZero 					; exit if result is non zero.
.8616	d0 05		bne $861d			bne 	_ACExit
.8618	a9 0a		lda #$0a		lda	#10
.861a	4c 27 90	jmp $9027		jmp	ErrorHandler
.861d					_ACExit:
.861d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/call.asm

.861e					CallCommand:
.861e	a2 00		ldx #$00			ldx 	#0
.8620	20 6b 9b	jsr $9b6b			jsr 	Evaluate16BitInteger
.8623					_CCClear
.8623	e8		inx				inx  								; clear 1,2 and 3 (for A X Y)
.8624	20 df 9b	jsr $9bdf			jsr 	NSMSetZero
.8627	e0 04		cpx #$04			cpx 	#4
.8629	d0 f8		bne $8623			bne 	_CCClear
.862b	a2 00		ldx #$00			ldx 	#0 							; and keep trying
.862d					_CCCParam:
.862d	b1 30		lda ($30),y			lda 	(codePtr),y
.862f	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8631	d0 09		bne $863c			bne 	_CCCRun6502
.8633	c8		iny				iny 								; skip comma
.8634	e8		inx				inx	 								; next level
.8635	20 77 9b	jsr $9b77			jsr 	Evaluate8BitInteger 		; get A/X/Y
.8638	e0 03		cpx #$03			cpx 	#3
.863a	90 f1		bcc $862d			bcc 	_CCCParam 					; done all 3 ?
.863c					_CCCRun6502:
.863c	5a		phy				phy 								; save position
.863d	ad 10 04	lda $0410			lda 	NSMantissa1 				; put address in zTemp0
.8640	85 37		sta $37				sta 	zTemp0+1
.8642	ad 08 04	lda $0408			lda 	NSMantissa0
.8645	85 36		sta $36				sta 	zTemp0
.8647	ad 09 04	lda $0409			lda 	NSMantissa0+1 				; get registers
.864a	ae 0a 04	ldx $040a			ldx 	NSMantissa0+2
.864d	ac 0b 04	ldy $040b			ldy 	NSMantissa0+3
.8650	20 55 86	jsr $8655			jsr 	_CCCZTemp0 					; call zTemp0
.8653	7a		ply				ply 								; restore position and exit
.8654	60		rts				rts
.8655					_CCCZTemp0:
.8655	6c 36 00	jmp ($0036)			jmp 	(zTemp0)

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/clear.asm

.8658					ClearCommand:
.8658	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.865a	85 36		sta $36				sta 	0+zTemp0
.865c	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.865e	85 37		sta $37				sta 	1+zTemp0
.8660					_ClearZeroLoop:
.8660	b2 36		lda ($36)			lda 	(zTemp0) 					; end of variables
.8662	f0 24		beq $8688			beq 	_ClearZeroEnd
.8664	a0 03		ldy #$03			ldy 	#3 							; erase the variables
.8666	a9 00		lda #$00			lda 	#0
.8668					_ClearOneVariable:
.8668	91 36		sta ($36),y			sta 	(zTemp0),y
.866a	c8		iny				iny
.866b	c0 08		cpy #$08			cpy 	#8
.866d	d0 f9		bne $8668			bne 	_ClearOneVariable
.866f	a0 02		ldy #$02			ldy 	#2 							; has it been marked procedure
.8671	b1 36		lda ($36),y			lda 	(zTemp0),y
.8673	c9 18		cmp #$18			cmp 	#NSTProcedure
.8675	d0 04		bne $867b			bne 	_ClearNotProcedure
.8677	a9 04		lda #$04			lda 	#NSTInteger+NSBIsArray 		; set it back to an integer array
.8679	91 36		sta ($36),y			sta 	(zTemp0),y
.867b					_ClearNotProcedure:
.867b	18		clc				clc 								; go to the next variable
.867c	b2 36		lda ($36)			lda 	(zTemp0)
.867e	65 36		adc $36				adc 	zTemp0
.8680	85 36		sta $36				sta 	zTemp0
.8682	90 dc		bcc $8660			bcc 	_ClearZeroLoop
.8684	e6 37		inc $37				inc 	zTemp0+1
.8686	80 d8		bra $8660			bra 	_ClearZeroLoop
.8688					_ClearZeroEnd:
.8688	18		clc				clc
.8689	a5 36		lda $36				lda 	zTemp0
.868b	69 01		adc #$01			adc 	#1
.868d	8d 8c 04	sta $048c			sta 	lowMemPtr
.8690	a5 37		lda $37				lda 	zTemp0+1
.8692	69 00		adc #$00			adc 	#0
.8694	8d 8d 04	sta $048d			sta 	lowMemPtr+1
.8697	20 f8 9c	jsr $9cf8			jsr 	StackReset
.869a	20 47 ac	jsr $ac47			jsr 	StringSystemInitialise
.869d	20 47 8f	jsr $8f47			jsr 	ProcedureScan
.86a0	20 ac 8b	jsr $8bac			jsr 	Command_Restore
.86a3	9c 9e 04	stz $049e			stz 	AssemblerAddress
.86a6	9c 9f 04	stz $049f			stz 	AssemblerAddress+1
.86a9	9c a0 04	stz $04a0			stz 	AssemblerControl
.86ac	20 ee 98	jsr $98ee			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.86af	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/data.asm

.86b0					Command_Data:
.86b0	a9 3a		lda #$3a			lda 	#KWD_COLON 					; advance to colon/EOL
.86b2	a2 80		ldx #$80			ldx 	#KWC_EOL
.86b4	20 99 8f	jsr $8f99			jsr 	ScanForward
.86b7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/dim.asm

.86b8					DimCommand:
.86b8	b1 30		lda ($30),y			lda 	(codePtr),y
.86ba	29 c0		and #$c0			and 	#$C0
.86bc	c9 40		cmp #$40			cmp 	#$40
.86be	d0 7a		bne $873a			bne 	_DCSyntax
.86c0	b1 30		lda ($30),y			lda 	(codePtr),y
.86c2	18		clc				clc
.86c3	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.86c5	85 3f		sta $3f				sta 	zaTemp+1
.86c7	c8		iny				iny
.86c8	b1 30		lda ($30),y			lda 	(codePtr),y
.86ca	c8		iny				iny
.86cb	85 3e		sta $3e				sta 	zaTemp
.86cd	5a		phy				phy
.86ce	a0 02		ldy #$02			ldy 	#2 						; read type byte
.86d0	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.86d2	29 18		and #$18			and 	#NSBTypeMask 			; check it's not a procedure
.86d4	c9 18		cmp #$18			cmp 	#NSTProcedure
.86d6	f0 62		beq $873a			beq 	_DCSyntax
.86d8	b1 3e		lda ($3e),y			lda 	(zaTemp),y 				; check it's an array
.86da	29 04		and #$04			and 	#NSBIsArray
.86dc	f0 64		beq $8742			beq 	_DCType
.86de	a0 04		ldy #$04			ldy 	#4 						; check not already defined
.86e0	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.86e2	d0 59		bne $873d			bne 	_DCRedefine
.86e4	7a		ply				ply
.86e5	20 45 87	jsr $8745			jsr 	_DCGetSize 				; get array size, check it.
.86e8	5a		phy				phy
.86e9	a0 05		ldy #$05			ldy 	#5 						; store in first array size slot
.86eb	91 3e		sta ($3e),y			sta 	(zaTemp),y 				; second will be zero.
.86ed	7a		ply				ply 							; is there a second (e.g. ,x)
.86ee	b1 30		lda ($30),y			lda 	(codePtr),y
.86f0	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.86f2	d0 0a		bne $86fe			bne 	_DCOneDimension
.86f4	c8		iny				iny 							; skip comma
.86f5	20 45 87	jsr $8745			jsr 	_DCGetSize 				; get 2nd array size
.86f8	5a		phy				phy
.86f9	a0 06		ldy #$06			ldy 	#6 						; store in 2nd array size
.86fb	91 3e		sta ($3e),y			sta 	(zaTemp),y
.86fd	7a		ply				ply
.86fe					_DCOneDimension:
.86fe	5a		phy				phy 							; save position
.86ff	a0 05		ldy #$05			ldy 	#5 						; dimensions + 1 in AX (as zero based)
.8701	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8703	aa		tax				tax
.8704	c8		iny				iny
.8705	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8707	e8		inx				inx 							; bump them.
.8708	1a		inc a				inc 	a
.8709	20 e2 a7	jsr $a7e2			jsr 	Multiply8x8 			; work out the total number of elements -> zTemp0
.870c	a5 37		lda $37				lda 	zTemp0+1 				; don't allow more than 8192 elements whatever
.870e	29 e0		and #$e0			and 	#$E0
.8710	d0 23		bne $8735			bne 	_DCSize
.8712	a0 02		ldy #$02			ldy 	#2 						; get base type
.8714	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8716	20 53 87	jsr $8753			jsr 	ScaleByBaseType 		; scale by base type
.8719	a5 36		lda $36				lda 	zTemp0
.871b	a6 37		ldx $37				ldx 	zTemp0+1
.871d	20 b0 98	jsr $98b0			jsr 	AllocateXABytes 		; allocate memory
.8720	a0 03		ldy #$03			ldy 	#3 						; copy into the address.
.8722	91 3e		sta ($3e),y			sta 	(zaTemp),y
.8724	c8		iny				iny
.8725	8a		txa				txa
.8726	91 3e		sta ($3e),y			sta 	(zaTemp),y
.8728	7a		ply				ply 							; get position back
.8729	20 60 a3	jsr $a360			jsr 	CheckRightBracket 		; check )
.872c	b1 30		lda ($30),y			lda 	(codePtr),y
.872e	c8		iny				iny 							; consume in case
.872f	c9 2c		cmp #$2c			cmp 	#KWD_COMMA		 		; if so do another DIM.
.8731	f0 85		beq $86b8			beq 	DimCommand
.8733	88		dey				dey 							; undo consume
.8734	60		rts				rts
.8735					_DCSize:
.8735	a9 16		lda #$16		lda	#22
.8737	4c 27 90	jmp $9027		jmp	ErrorHandler
.873a					_DCSyntax:
.873a	4c 46 a9	jmp $a946			jmp 	SyntaxError
.873d					_DCRedefine:
.873d	a9 15		lda #$15		lda	#21
.873f	4c 27 90	jmp $9027		jmp	ErrorHandler
.8742					_DCType:
.8742	4c 50 a9	jmp $a950			jmp 	TypeError
.8745					_DCGetSize:
.8745	a2 00		ldx #$00			ldx 	#0 						; get first index.
.8747	20 77 9b	jsr $9b77			jsr 	Evaluate8BitInteger 	; get array dimension
.874a	c9 00		cmp #$00			cmp 	#0 						; must be 1-254
.874c	f0 e7		beq $8735			beq 	_DCSize
.874e	c9 fe		cmp #$fe			cmp 	#254
.8750	f0 e3		beq $8735			beq 	_DCSize
.8752	60		rts				rts
.8753					ScaleByBaseType:
.8753	29 10		and #$10			and 	#NSBIsString 			; is it string
.8755	d0 19		bne $8770			bne 	_SBBTString
.8757	a5 37		lda $37				lda 	zTemp0+1 				; push value on stack
.8759	48		pha				pha
.875a	a5 36		lda $36				lda 	zTemp0
.875c	48		pha				pha
.875d	06 36		asl $36				asl 	zTemp0 					; x 2
.875f	26 37		rol $37				rol 	zTemp0+1
.8761	06 36		asl $36				asl 	zTemp0 					; x 4
.8763	26 37		rol $37				rol 	zTemp0+1
.8765	68		pla				pla 							; add stacked value = x 5
.8766	65 36		adc $36				adc 	zTemp0
.8768	85 36		sta $36				sta 	zTemp0
.876a	68		pla				pla
.876b	65 37		adc $37				adc 	zTemp0+1
.876d	85 37		sta $37				sta 	zTemp0+1
.876f	60		rts				rts
.8770					_SBBTString:
.8770	06 36		asl $36				asl 	zTemp0
.8772	26 37		rol $37				rol 	zTemp0+1
.8774	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/end.asm

.8775					EndCommand:
.8775	4c bf 85	jmp $85bf			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/for.asm

.8778					ForCommand:
.8778	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; allocate 18 bytes on the return stack.
.877a	20 93 9c	jsr $9c93			jsr 	StackOpen
.877d	a2 00		ldx #$00			ldx 	#0
.877f	20 01 97	jsr $9701			jsr 	EvaluateTerm
.8782	bd 00 04	lda $0400,x			lda 	NSStatus,x
.8785	c9 20		cmp #$20			cmp 	#NSBIsReference+NSTInteger 	; do we have an integer 4 byte reference.
.8787	d0 49		bne $87d2			bne		_FCError
.8789	a9 3d		lda #$3d			lda 	#KWD_EQUAL 					; =
.878b	20 70 a3	jsr $a370			jsr 	CheckNextA
.878e	e8		inx				inx
.878f	20 56 9b	jsr $9b56			jsr 	EvaluateInteger 			; <from> in +1
.8792	b1 30		lda ($30),y			lda 	(codePtr),y
.8794	c8		iny				iny 								; consume it
.8795	48		pha				pha 								; save on stack for later
.8796	c9 a6		cmp #$a6			cmp 	#KWD_DOWNTO
.8798	f0 04		beq $879e			beq 	_FCNoSyntax
.879a	c9 b0		cmp #$b0			cmp 	#KWD_TO
.879c	d0 37		bne $87d5			bne 	_FCSyntaxError
.879e					_FCNoSyntax:
.879e	e8		inx				inx
.879f	20 56 9b	jsr $9b56			jsr 	EvaluateInteger
.87a2	20 d7 9c	jsr $9cd7			jsr 	STKSaveCodePosition 		; save loop back position
.87a5	68		pla				pla 								; restore DOWNTO or TO
.87a6	5a		phy				phy 								; save Y on the stack
.87a7	49 a6		eor #$a6			eor 	#KWD_DOWNTO 				; 0 if DOWNTO, #0 if TO
.87a9	f0 02		beq $87ad			beq 	_FCNotDownTo
.87ab	a9 02		lda #$02			lda 	#2
.87ad					_FCNotDownTo:
.87ad	3a		dec a				dec 	a 							; 255 if DOWNTO, 1 if TO
.87ae	a0 10		ldy #$10			ldy 	#16
.87b0	91 34		sta ($34),y			sta 	(basicStack),y 				; copy that out to the Basic Stack.
.87b2	a0 06		ldy #$06			ldy 	#6
.87b4	ad 08 04	lda $0408			lda 	NSMantissa0
.87b7	91 34		sta ($34),y			sta 	(basicStack),y
.87b9	ad 10 04	lda $0410			lda 	NSMantissa1
.87bc	c8		iny				iny
.87bd	91 34		sta ($34),y			sta 	(basicStack),y
.87bf	a0 08		ldy #$08			ldy 	#8 							; set initial index value
.87c1	a2 01		ldx #$01			ldx 	#1
.87c3	20 d8 87	jsr $87d8			jsr 	FCIntegerToStack
.87c6	a0 0c		ldy #$0c			ldy 	#12 						; set the terminal value
.87c8	a2 02		ldx #$02			ldx 	#2
.87ca	20 d8 87	jsr $87d8			jsr 	FCIntegerToStack
.87cd	20 f8 87	jsr $87f8			jsr 	CopyIndexToReference
.87d0	7a		ply				ply 								; restore position
.87d1	60		rts				rts
.87d2					_FCError:
.87d2	4c 50 a9	jmp $a950			jmp 	TypeError
.87d5					_FCSyntaxError:
.87d5	4c 46 a9	jmp $a946			jmp 	SyntaxError
.87d8					FCIntegerToStack:
.87d8	3c 00 04	bit $0400,x			bit 	NSStatus,x 					; is the value negative
.87db	10 03		bpl $87e0			bpl	 	_FCNotNegative
.87dd	20 94 9b	jsr $9b94			jsr 	NSMNegateMantissa 			; if so 2's complement the mantissa
.87e0					_FCNotNegative:
.87e0	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy out to the basic stack
.87e3	91 34		sta ($34),y			sta 	(basicStack),y
.87e5	c8		iny				iny
.87e6	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.87e9	91 34		sta ($34),y			sta 	(basicStack),y
.87eb	c8		iny				iny
.87ec	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.87ef	91 34		sta ($34),y			sta 	(basicStack),y
.87f1	c8		iny				iny
.87f2	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.87f5	91 34		sta ($34),y			sta 	(basicStack),y
.87f7	60		rts				rts
.87f8					CopyIndexToReference:
.87f8	5a		phy				phy
.87f9	a0 06		ldy #$06			ldy 	#6 							; copy address-8 to write to zTemp0
.87fb	38		sec				sec 								; (because we copy from offset 8)
.87fc	b1 34		lda ($34),y			lda 	(basicStack),y
.87fe	e9 08		sbc #$08			sbc 	#8
.8800	85 36		sta $36				sta 	zTemp0
.8802	c8		iny				iny
.8803	b1 34		lda ($34),y			lda 	(basicStack),y
.8805	e9 00		sbc #$00			sbc 	#0
.8807	85 37		sta $37				sta 	zTemp0+1
.8809	a2 04		ldx #$04			ldx 	#4 							; this is the copy counter/
.880b	a0 0b		ldy #$0b			ldy 	#8+3 		 				; the MSB of the mantissa
.880d	b1 34		lda ($34),y			lda 	(basicStack),y
.880f	0a		asl a				asl 	a 							; into carry
.8810	a0 08		ldy #$08			ldy 	#8 							; where to copy from.
.8812	90 14		bcc $8828			bcc 	_CITRNormal
.8814	38		sec				sec
.8815					_CITRNegative:
.8815	a9 00		lda #$00			lda 	#0
.8817	f1 34		sbc ($34),y			sbc 	(basicStack),y
.8819	91 36		sta ($36),y			sta 	(zTemp0),y
.881b	c8		iny				iny
.881c	ca		dex				dex
.881d	d0 f6		bne $8815			bne 	_CITRNegative
.881f	88		dey				dey 								; look at MSB of mantissa
.8820	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set the MSB as negative packed.
.8822	09 80		ora #$80			ora 	#$80
.8824	91 36		sta ($36),y			sta 	(zTemp0),y
.8826	7a		ply				ply
.8827	60		rts				rts
.8828					_CITRNormal:
.8828	b1 34		lda ($34),y			lda 	(basicStack),y 				; copy without negation.
.882a	91 36		sta ($36),y			sta 	(zTemp0),y
.882c	c8		iny				iny
.882d	ca		dex				dex
.882e	d0 f8		bne $8828			bne 	_CITRNormal
.8830	7a		ply				ply 								; and exit.
.8831	60		rts				rts
.8832					NextCommand:
.8832	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; check FOR is TOS
.8834	a2 11		ldx #$11			ldx 	#ERRID_FOR 					; this error
.8836	20 bf 9c	jsr $9cbf			jsr 	StackCheckFrame
.8839	5a		phy				phy
.883a	a0 10		ldy #$10			ldy 	#16 						; get the step count
.883c	b1 34		lda ($34),y			lda 	(basicStack),y
.883e	85 36		sta $36				sta 	zTemp0 						; this is the sign extend
.8840	30 02		bmi $8844			bmi 	_NCStepNeg
.8842	64 36		stz $36				stz 	zTemp0 						; which is 0 or 255
.8844					_NCStepNeg:
.8844	a0 08		ldy #$08			ldy 	#8 							; offset to bump
.8846	a2 04		ldx #$04			ldx 	#4 							; count to bump
.8848	18		clc				clc
.8849					_NCBump:
.8849	71 34		adc ($34),y			adc 	(basicStack),y 				; add it
.884b	91 34		sta ($34),y			sta 	(basicStack),y
.884d	a5 36		lda $36				lda 	zTemp0 						; get sign extend for next time.
.884f	c8		iny				iny 								; next byte
.8850	ca		dex				dex 								; do four times
.8851	d0 f6		bne $8849			bne 	_NCBump
.8853	20 f8 87	jsr $87f8			jsr		CopyIndexToReference		; copy it to the reference variable.
.8856	a0 10		ldy #$10			ldy 	#16 						; get step count again
.8858	b1 34		lda ($34),y			lda 	(basicStack),y
.885a	0a		asl a				asl 	a 							; sign bit to carry
.885b	a9 0c		lda #$0c			lda 	#12 						; offset of LHS = terminal offset
.885d	85 38		sta $38				sta 	zTemp1
.885f	90 02		bcc $8863			bcc 	_NCCompRev 					; use if step is +ve
.8861	a9 08		lda #$08			lda 	#8 							; now the LHS = index value
.8863					_NCCompRev:
.8863	85 38		sta $38				sta 	zTemp1 						; so zTemp0 is the index for LHS
.8865	49 04		eor #$04			eor 	#(8^12) 					; and zTemp0+1 is the index for RHS
.8867	85 39		sta $39				sta 	zTemp1+1
.8869	a2 04		ldx #$04			ldx 	#4 							; bytes to compare
.886b	38		sec				sec
.886c					_NCCompare:
.886c	a4 38		ldy $38				ldy 	zTemp1 						; do compare using the two indices
.886e	b1 34		lda ($34),y			lda 	(basicStack),y
.8870	a4 39		ldy $39				ldy 	zTemp1+1
.8872	f1 34		sbc ($34),y			sbc 	(basicStack),y
.8874	e6 38		inc $38				inc 	zTemp1 						; bump the indices (inc,dex do not change C or V)
.8876	e6 39		inc $39				inc 	zTemp1+1
.8878	ca		dex				dex 								; do it 4 times.
.8879	d0 f1		bne $886c			bne 	_NCCompare
.887b	50 02		bvc $887f			bvc 	_NCNoOverflow 				; convert to signed comparison
.887d	49 80		eor #$80			eor 	#$80
.887f					_NCNoOverflow:
.887f	7a		ply				ply 								; restore Y position
.8880	0a		asl a				asl 	a 							; is bit 7 set.
.8881	90 04		bcc $8887			bcc 	_NCLoopback 				; if no , >= so loop back
.8883	20 b1 9c	jsr $9cb1			jsr 	StackClose 					; exit the loop
.8886	60		rts				rts
.8887					_NCLoopBack:
.8887	20 e8 9c	jsr $9ce8			jsr 	STKLoadCodePosition 		; loop back
.888a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/gosub.asm

.888b					Command_GOSUB:
.888b	a2 00		ldx #$00			ldx 	#0
.888d	20 6b 9b	jsr $9b6b			jsr 	Evaluate16BitInteger 		; line number in Stack.0
.8890	a9 e3		lda #$e3			lda 	#STK_GOSUB+3
.8892	20 93 9c	jsr $9c93			jsr 	StackOpen 					; create frame
.8895	20 d7 9c	jsr $9cd7			jsr 	STKSaveCodePosition 		; save current position
.8898	4c ae 88	jmp $88ae			jmp 	GotoStackX
.889b					Command_RETURN:
.889b	a9 e0		lda #$e0			lda 	#STK_GOSUB 					; check TOS is this
.889d	a2 0e		ldx #$0e			ldx 	#ERRID_GOSUB 				; this error
.889f	20 bf 9c	jsr $9cbf			jsr 	StackCheckFrame
.88a2	20 e8 9c	jsr $9ce8			jsr 	STKLoadCodePosition 		; restore code position
.88a5	20 b1 9c	jsr $9cb1			jsr 	StackClose
.88a8	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/goto.asm

.88a9					GotoCommand:
.88a9	a2 00		ldx #$00			ldx 	#0 							; GOTO where
.88ab	20 6b 9b	jsr $9b6b			jsr 	Evaluate16BitInteger
.88ae					GotoStackX:
.88ae	bd 10 04	lda $0410,x			lda  	NSMantissa1,x 				; put line # in XA. I'll keep this even though
.88b1	48		pha				pha 								; it is slightly inefficient, just in cases.
.88b2	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.88b5	fa		plx				plx
.88b6	20 3e 9c	jsr $9c3e			jsr 	MemorySearch 				; transfer to line number AX.
.88b9	90 05		bcc $88c0			bcc 	_GotoError 					; not found, off end.
.88bb	d0 03		bne $88c0			bne 	_GotoError 					; not found exactly
.88bd	4c e9 8b	jmp $8be9			jmp 	RunNewLine 					; and go straight to new line code.
.88c0					_GotoError:
.88c0	a9 0d		lda #$0d		lda	#13
.88c2	4c 27 90	jmp $9027		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/if.asm

.88c5					IfCommand:
.88c5	a2 00		ldx #$00			ldx 	#0 							; If what.
.88c7	20 33 9b	jsr $9b33			jsr 	EvaluateNumber
.88ca	b1 30		lda ($30),y			lda 	(codePtr),y
.88cc	c9 9f		cmp #$9f			cmp 	#KWD_THEN  					; could be THEN <stuff> or GOTO
.88ce	d0 0a		bne $88da			bne 	_IFStructured
.88d0	c8		iny				iny 								; consume THEN
.88d1	20 0f 9c	jsr $9c0f			jsr 	NSMIsZero 					; is it zero
.88d4	f0 01		beq $88d7			beq 	_IfFail 					; if fail, go to next line
.88d6	60		rts				rts 								; if THEN just continue
.88d7					_IfFail:
.88d7	4c 4e 8c	jmp $8c4e			jmp 	EOLCommand
.88da					_IfStructured:
.88da	20 0f 9c	jsr $9c0f			jsr 	NSMIsZero 					; is it zero
.88dd	d0 07		bne $88e6			bne 	_IfExit 					; if not, then continue normally.
.88df	a9 a7		lda #$a7			lda 	#KWD_ELSE 					; look for else/endif
.88e1	a2 9c		ldx #$9c			ldx 	#KWD_ENDIF
.88e3	20 99 8f	jsr $8f99			jsr 	ScanForward 				; and run from there/
.88e6					_IfExit:
.88e6	60		rts				rts
.88e7					ElseCode:
.88e7	a9 9c		lda #$9c			lda 	#KWD_ENDIF 					; else is only run after the if clause succeeds
.88e9	aa		tax				tax 								; so just go to the structure exit
.88ea	20 99 8f	jsr $8f99			jsr 	ScanForward
.88ed	60		rts				rts
.88ee					EndIf:
.88ee	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/let.asm

.88ef					LetCommand:
.88ef	a2 00		ldx #$00			ldx 	#0
.88f1	b1 30		lda ($30),y			lda 	(codePtr),y
.88f3	c9 10		cmp #$10			cmp 	#KWD_AT
.88f5	d0 16		bne $890d			bne 	_LCStandard
.88f7	c8		iny				iny 								; skip equal
.88f8	20 01 97	jsr $9701			jsr 	EvaluateTerm 				; get a number
.88fb	20 45 95	jsr $9545			jsr 	Dereference 				; dereference it
.88fe	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check integer
.8901	49 20		eor #$20			eor 	#NSBIsReference	 			; toggle reference
.8903	9d 00 04	sta $0400,x			sta 	NSStatus,x
.8906	29 20		and #$20			and 	#NSBIsReference 			; if it is now a reference, continue
.8908	d0 10		bne $891a			bne 	_LCMain
.890a	4c 50 a9	jmp $a950			jmp 	TypeError 					; was a reference before.
.890d					_LCStandard:
.890d	ad 18 94	lda $9418			lda 	PrecedenceLevel+"*"			; precedence > this
.8910	20 32 94	jsr $9432			jsr 	EvaluateExpressionAtPrecedence
.8913	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; is it a reference to an array
.8916	c9 38		cmp #$38			cmp		#NSTProcedure+NSBIsReference
.8918	f0 0e		beq $8928			beq 	_LetGoProc 					; it's a procedure call.
.891a					_LCMain:
.891a	a9 3d		lda #$3d			lda 	#"=" 						; check =
.891c	20 70 a3	jsr $a370			jsr 	CheckNextA
.891f	e8		inx				inx 								; RHS
.8920	20 2a 9b	jsr $9b2a			jsr 	EvaluateValue
.8923	ca		dex				dex
.8924	20 2b 89	jsr $892b			jsr 	AssignVariable
.8927	60		rts				rts
.8928					_LetGoProc:
.8928	4c c4 8a	jmp $8ac4			jmp 	CallProcedure
.892b					AssignVariable:
.892b	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check the string/number type bits match
.892e	48		pha				pha 								; save a copy
.892f	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.8932	29 10		and #$10			and 	#NSBIsString
.8934	d0 0b		bne $8941			bne 	_ASError
.8936	68		pla				pla 								; get back
.8937	29 10		and #$10			and 	#NSBIsString 				; check type
.8939	d0 03		bne $893e			bne 	_ASString
.893b	4c 6d 94	jmp $946d			jmp 	AssignNumber
.893e					_ASString:
.893e	4c db 94	jmp $94db			jmp 	AssignString
.8941					_ASError:
.8941	4c 50 a9	jmp $a950			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/list.asm

.8944					Command_List:
.8944	9c 0c 04	stz $040c			stz		NSMantissa0+4				; set the lower (slot 4) to 0 and upper (slot 7) to $FFFF
.8947	9c 14 04	stz $0414			stz 	NSMantissa1+4
.894a	a9 ff		lda #$ff			lda 	#$FF
.894c	8d 0f 04	sta $040f			sta 	NSMantissa0+7
.894f	8d 17 04	sta $0417			sta 	NSMantissa1+7
.8952	b1 30		lda ($30),y			lda 	(codePtr),y
.8954	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8956	f0 1e		beq $8976			beq 	_CLSecond
.8958	20 d4 89	jsr $89d4			jsr 	CLIsDigit 					; if not digit, list all
.895b	b0 24		bcs $8981			bcs 	_CLStart
.895d	a2 04		ldx #$04			ldx 	#4 							; get 1st range into slot 4
.895f	20 6b 9b	jsr $9b6b			jsr 	Evaluate16BitInteger
.8962	b1 30		lda ($30),y			lda 	(codePtr),y
.8964	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8966	f0 0e		beq $8976			beq 	_CLSecond 					; if so go get it
.8968	ad 0c 04	lda $040c			lda 	NSMantissa0+4 				; copy 4->7
.896b	8d 0f 04	sta $040f			sta 	NSMantissa0+7
.896e	ad 14 04	lda $0414			lda 	NSMantissa1+4
.8971	8d 17 04	sta $0417			sta 	NSMantissa1+7
.8974	80 0b		bra $8981			bra 	_CLStart
.8976					_CLSecond:
.8976	c8		iny				iny 								; consume comma
.8977	20 d4 89	jsr $89d4			jsr 	CLIsDigit 					; digit found
.897a	b0 05		bcs $8981			bcs 	_CLStart 					; if not, continue listing
.897c	a2 07		ldx #$07			ldx 	#7 							; load 2nd range into slot 7
.897e	20 6b 9b	jsr $9b6b			jsr 	Evaluate16BitInteger
.8981					_CLStart
.8981	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8983	85 30		sta $30				sta 	codePtr
.8985	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8987	85 31		sta $31				sta 	codePtr+1
.8989					_CLLoop:
.8989	20 2a ab	jsr $ab2a			jsr 	EXTBreakCheck 				; break check
.898c	f0 30		beq $89be			beq 	_CLExit
.898e	b2 30		lda ($30)			lda 	(codePtr)
.8990	f0 2c		beq $89be			beq 	_CLExit
.8992	a2 04		ldx #$04			ldx 	#4 							; check range every time, line numbers aren't in order.
.8994	20 c1 89	jsr $89c1			jsr 	CLCompareLineNo
.8997	90 18		bcc $89b1			bcc 	_CLNext
.8999	a2 07		ldx #$07			ldx 	#7
.899b	20 c1 89	jsr $89c1			jsr 	CLCompareLineNo
.899e	f0 02		beq $89a2			beq 	_CLDoThisOne
.89a0	b0 0f		bcs $89b1			bcs 	_CLNext
.89a2					_CLDoThisOne:
.89a2	20 f5 8d	jsr $8df5			jsr 	ListConvertLine 			; convert line into token Buffer
.89a5	a2 04		ldx #$04			ldx 	#(tokenBuffer >> 8) 		; print that line
.89a7	a9 a9		lda #$a9			lda 	#(tokenBuffer & $FF)
.89a9	20 80 90	jsr $9080			jsr 	PrintStringXA
.89ac	a9 0d		lda #$0d			lda 	#13 						; new line
.89ae	20 e9 aa	jsr $aae9			jsr 	EXTPrintCharacter
.89b1					_CLNext:
.89b1	18		clc				clc
.89b2	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.89b4	65 30		adc $30				adc 	codePtr
.89b6	85 30		sta $30				sta 	codePtr
.89b8	90 02		bcc $89bc			bcc 	_CREExit
.89ba	e6 31		inc $31				inc 	codePtr+1
.89bc					_CREExit:
.89bc	80 cb		bra $8989			bra 	_CLLoop
.89be					_CLExit:
.89be	4c bf 85	jmp $85bf			jmp 	WarmStart
.89c1					CLCompareLineNo:
.89c1	38		sec				sec
.89c2	a0 01		ldy #$01			ldy 	#1
.89c4	b1 30		lda ($30),y			lda 	(codePtr),y
.89c6	fd 08 04	sbc $0408,x			sbc 	NSMantissa0,x
.89c9	85 36		sta $36				sta 	zTemp0
.89cb	c8		iny				iny
.89cc	b1 30		lda ($30),y			lda 	(codePtr),y
.89ce	fd 10 04	sbc $0410,x			sbc 	NSMantissa1,x
.89d1	05 36		ora $36				ora 	zTemp0
.89d3	60		rts				rts
.89d4					CLIsDigit:
.89d4	b1 30		lda ($30),y			lda 	(codePtr),y
.89d6	c9 30		cmp #$30			cmp 	#"0"
.89d8	90 03		bcc $89dd			bcc	 	_CLIDExitFalse
.89da	c9 3a		cmp #$3a			cmp 	#"9"+1
.89dc	60		rts				rts
.89dd					_CLIDExitFalse:
.89dd	38		sec				sec
.89de	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/local.asm

.89df					Command_LOCAL:
.89df	a2 00		ldx #$00			ldx 	#0 							; at level 0
.89e1	20 ed 89	jsr $89ed			jsr 	LocaliseNextTerm 			; convert term to a local.
.89e4	b1 30		lda ($30),y			lda 	(codePtr),y
.89e6	c8		iny				iny
.89e7	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.89e9	f0 f4		beq $89df			beq 	Command_LOCAL
.89eb	88		dey				dey 								; unpick pre-get
.89ec	60		rts				rts
.89ed					LocaliseNextTerm:
.89ed	20 01 97	jsr $9701			jsr 	EvaluateTerm 				; evaluate the term
.89f0	bd 00 04	lda $0400,x			lda 	NSStatus,x
.89f3	29 20		and #$20			and 	#NSBIsReference 			; check it is a reference
.89f5	f0 69		beq $8a60			beq		_LNTError
.89f7	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address of variable to zTemp0
.89fa	85 36		sta $36				sta 	zTemp0
.89fc	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.89ff	85 37		sta $37				sta  	zTemp0+1
.8a01	bd 00 04	lda $0400,x			lda 	NSStatus,x
.8a04	29 10		and #$10			and 	#NSBIsString
.8a06	d0 22		bne $8a2a			bne 	_LNTPushString
.8a08	5a		phy				phy
.8a09	a0 00		ldy #$00			ldy 	#0 							; push 0 to 4 inclusive, the number values, on the stack, and zero them as you go.
.8a0b					_LNTPushNumLoop:
.8a0b	b1 36		lda ($36),y			lda		(zTemp0),y
.8a0d	20 71 9c	jsr $9c71			jsr 	StackPushByte
.8a10	a9 00		lda #$00			lda 	#0
.8a12	91 36		sta ($36),y			sta 	(zTemp0),y
.8a14	c8		iny				iny
.8a15	c0 05		cpy #$05			cpy 	#5
.8a17	d0 f2		bne $8a0b			bne 	_LNTPushNumLoop
.8a19	a5 36		lda $36				lda 	zTemp0 						; push the actual target address to write on the stack
.8a1b	20 71 9c	jsr $9c71			jsr 	StackPushByte
.8a1e	a5 37		lda $37				lda 	zTemp0+1
.8a20	20 71 9c	jsr $9c71			jsr 	StackPushByte
.8a23	a9 01		lda #$01			lda 	#STK_LOCALN 				; push local-number marker.
.8a25	20 71 9c	jsr $9c71			jsr 	StackPushByte
.8a28	7a		ply				ply
.8a29	60		rts				rts
.8a2a					_LNTPushString:
.8a2a	5a		phy				phy
.8a2b	b2 36		lda ($36)			lda 	(zTemp0) 					; put address of string in zTemp1
.8a2d	85 38		sta $38				sta 	zTemp1
.8a2f	a0 01		ldy #$01			ldy 	#1
.8a31	b1 36		lda ($36),y			lda 	(zTemp0),y
.8a33	85 39		sta $39				sta 	zTemp1+1
.8a35	a0 00		ldy #$00			ldy 	#0 							; output string
.8a37	c9 00		cmp #$00			cmp 	#0 							; if not assigned strin
.8a39	f0 0a		beq $8a45			beq 	_LNTStringOut
.8a3b					_LNTPushStrLoop:
.8a3b	b1 38		lda ($38),y			lda 	(zTemp1),y
.8a3d	f0 06		beq $8a45			beq 	_LNTStringOut
.8a3f	20 71 9c	jsr $9c71			jsr 	StackPushByte
.8a42	c8		iny				iny
.8a43	80 f6		bra $8a3b			bra 	_LNTPushStrLoop
.8a45					_LNTStringOut:
.8a45	98		tya				tya									; output length
.8a46	20 71 9c	jsr $9c71			jsr 	StackPushByte
.8a49	a9 00		lda #$00			lda 	#0 							; clear original string.
.8a4b	92 38		sta ($38)			sta 	(zTemp1)
.8a4d	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; output address of the string record *not* the string itself
.8a50	20 71 9c	jsr $9c71			jsr 	StackPushByte
.8a53	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8a56	20 71 9c	jsr $9c71			jsr 	StackPushByte
.8a59	a9 02		lda #$02			lda 	#STK_LOCALS 				; push local-string marker.
.8a5b	20 71 9c	jsr $9c71			jsr 	StackPushByte
.8a5e	7a		ply				ply
.8a5f	60		rts				rts
.8a60					_LNTError:
.8a60	4c 46 a9	jmp $a946			jmp 	SyntaxError
.a307					LocalPopValue:
.a307	20 8a 9c	jsr $9c8a			jsr 	StackPopByte
.a30a	c9 01		cmp #$01			cmp 	#STK_LOCALN 				; if not local-N
.a30c	d0 17		bne $a325			bne 	_LPVString
.a30e	20 8a 9c	jsr $9c8a			jsr 	StackPopByte 				; address
.a311	85 37		sta $37				sta 	zTemp0+1
.a313	20 8a 9c	jsr $9c8a			jsr 	StackPopByte
.a316	85 36		sta $36				sta 	zTemp0
.a318	5a		phy				phy
.a319	a0 04		ldy #$04			ldy 	#4 							; copy back
.a31b					_LPVNumberCopy:
.a31b	20 8a 9c	jsr $9c8a			jsr 	StackPopByte
.a31e	91 36		sta ($36),y			sta 	(zTemp0),y
.a320	88		dey				dey
.a321	10 f8		bpl $a31b			bpl 	_LPVNumberCopy
.a323	7a		ply				ply 								; and complete
.a324	60		rts				rts
.a325					_LPVString:
.a325	20 8a 9c	jsr $9c8a			jsr 	StackPopByte 				; address of record => zTemp0
.a328	85 37		sta $37				sta 	zTemp0+1
.a32a	20 8a 9c	jsr $9c8a			jsr 	StackPopByte
.a32d	85 36		sta $36				sta 	zTemp0
.a32f	5a		phy				phy
.a330	b2 36		lda ($36)			lda 	(zTemp0) 					; address to write string to => zTemp1
.a332	85 38		sta $38				sta 	zTemp1
.a334	a0 01		ldy #$01			ldy 	#1
.a336	b1 36		lda ($36),y			lda 	(zTemp0),y
.a338	85 39		sta $39				sta 	zTemp1+1
.a33a	20 8a 9c	jsr $9c8a			jsr 	StackPopByte 				; # to get => y
.a33d	a8		tay				tay
.a33e	a5 39		lda $39				lda 	zTemp1+1 					; if no target (e.g. was "" originally) exit
.a340	f0 0e		beq $a350			beq 	_LPVStringCopied
.a342	a9 00		lda #$00			lda 	#0 							; NULL on end
.a344	91 38		sta ($38),y			sta 	(zTemp1),y
.a346					_LPVStringCopy:
.a346	88		dey				dey
.a347	30 07		bmi $a350			bmi 	_LPVStringCopied
.a349	20 8a 9c	jsr $9c8a			jsr 	StackPopByte
.a34c	91 38		sta ($38),y			sta 	(zTemp1),y
.a34e	80 f6		bra $a346			bra 	_LPVStringCopy
.a350					_LPVStringCopied:
.a350	fa		plx				plx
.a351	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/new.asm

.8a63					NewCommand:
.8a63	20 1c 9c	jsr $9c1c			jsr 	MemoryNew
.8a66	9c 00 10	stz $1000			stz 	VariableSpace 				; erase all variables.
.8a69	20 58 86	jsr $8658			jsr 	ClearCommand 				; clear everything.
.8a6c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/print.asm

.8a6d					Command_Print:
.8a6d	18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.8a6e					_CPLoop:
.8a6e	08		php				php 								; save last action flag
.8a6f	b1 30		lda ($30),y			lda 	(codePtr),y
.8a71	c9 80		cmp #$80			cmp  	#KWC_EOL 					; end of line or colon, exit now.
.8a73	f0 46		beq $8abb			beq 	_CPExit
.8a75	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.8a77	f0 42		beq $8abb			beq 	_CPExit
.8a79	68		pla				pla 								; throw last action flag
.8a7a	b1 30		lda ($30),y			lda 	(codePtr),y
.8a7c	c8		iny				iny
.8a7d	c9 3b		cmp #$3b			cmp 	#KWD_SEMICOLON				; is it a semicolon
.8a7f	f0 37		beq $8ab8			beq 	_CPContinueWithSameLine
.8a81	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; comma
.8a83	f0 2e		beq $8ab3			beq 	_CPTab
.8a85	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; apostrophe (new line)
.8a87	f0 26		beq $8aaf			beq 	_CPNewLine
.8a89	88		dey				dey 								; undo the get.
.8a8a	a2 00		ldx #$00			ldx 	#0
.8a8c	20 2a 9b	jsr $9b2a			jsr 	EvaluateValue 				; get a value into slot 0
.8a8f	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; is it a number
.8a92	29 10		and #$10			and 	#NSBIsString
.8a94	f0 0b		beq $8aa1			beq 	_CPNumber
.8a96	ae 10 04	ldx $0410			ldx 	NSMantissa1 				; string, print the text.
.8a99	ad 08 04	lda $0408			lda 	NSMantissa0
.8a9c	20 80 90	jsr $9080			jsr 	PrintStringXA
.8a9f	80 cc		bra $8a6d			bra 	Command_Print 				; loop round clearing carry so NL if end
.8aa1					_CPNumber:
.8aa1	a9 05		lda #$05			lda 	#5 							; maximum decimals
.8aa3	20 00 9a	jsr $9a00			jsr 	ConvertNumberToString 		; convert to string
.8aa6	a2 06		ldx #$06			ldx 	#DecimalBuffer >> 8
.8aa8	a9 19		lda #$19			lda 	#DecimalBuffer & $FF
.8aaa	20 80 90	jsr $9080			jsr 	PrintStringXA
.8aad	80 be		bra $8a6d			bra 	Command_Print 				; loop round clearing carry so NL if end
.8aaf					_CPNewLine:
.8aaf	a9 0d		lda #$0d			lda 	#13
.8ab1	80 02		bra $8ab5			bra 	_CPPrintChar
.8ab3					_CPTab:
.8ab3	a9 09		lda #$09			lda 	#9 							; print TAB
.8ab5					_CPPrintChar:
.8ab5	20 e9 aa	jsr $aae9			jsr 	EXTPrintCharacter
.8ab8					_CPContinueWithSameLine:
.8ab8	38		sec				sec 								; loop round with carry set, which
.8ab9	80 b3		bra $8a6e			bra 	_CPLoop 					; will inhibit final CR
.8abb					_CPExit:
.8abb	28		plp				plp 								; get last action flag
.8abc	b0 05		bcs $8ac3			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.8abe	a9 0d		lda #$0d			lda 	#13 						; print new line
.8ac0	20 e9 aa	jsr $aae9			jsr 	EXTPrintCharacter
.8ac3					_CPExit2:
.8ac3	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/procedure.asm

=2					ParameterStackPos = 2
.8ac4					CallProcedure:
.8ac4	a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start storing parameters at 2.
.8ac6	b1 30		lda ($30),y			lda 	(codePtr),y
.8ac8	c9 29		cmp #$29			cmp 	#KWD_RPAREN
.8aca	f0 0c		beq $8ad8			beq 	_CPEndParam
.8acc					_CPParamLoop:
.8acc	20 30 94	jsr $9430			jsr 	EvaluateExpression 			; get parameter onto stack
.8acf	e8		inx				inx 								; bump next stack
.8ad0	b1 30		lda ($30),y			lda 	(codePtr),y
.8ad2	c8		iny				iny
.8ad3	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if comma, go back and try again.
.8ad5	f0 f5		beq $8acc			beq 	_CPParamLoop
.8ad7	88		dey				dey 								; unpick.
.8ad8					_CPEndParam:
.8ad8	8e 96 04	stx $0496			stx 	LastParameter 				; save the last parameters index.
.8adb	c8		iny				iny									; skip right bracket
.8adc	a9 b3		lda #$b3			lda 	#STK_PROC+3 				; allocate 6 bytes on the return stack.
.8ade	20 93 9c	jsr $9c93			jsr 	StackOpen
.8ae1	20 d7 9c	jsr $9cd7			jsr 	STKSaveCodePosition 		; save loop position
.8ae4	ad 08 04	lda $0408			lda 	NSMantissa0 				; copy variable (e.g. procedure) address to zTemp0
.8ae7	85 36		sta $36				sta 	zTemp0 						; this is the DATA not the RECORD
.8ae9	ad 10 04	lda $0410			lda 	NSMantissa1
.8aec	85 37		sta $37				sta 	zTemp0+1
.8aee	a0 01		ldy #$01			ldy 	#1 							; copy code address back.
.8af0	b2 36		lda ($36)			lda 	(zTemp0)
.8af2	85 30		sta $30				sta 	safePtr
.8af4	b1 36		lda ($36),y			lda 	(zTemp0),y
.8af6	85 31		sta $31				sta 	safePtr+1
.8af8	c8		iny				iny
.8af9	b1 36		lda ($36),y			lda 	(zTemp0),y
.8afb	85 32		sta $32				sta 	safePtr+2
.8afd	c8		iny				iny
.8afe	b1 36		lda ($36),y			lda 	(zTemp0),y
.8b00	85 33		sta $33				sta 	safePtr+3
.8b02	c8		iny				iny 								; get Y offset -> Y
.8b03	b1 36		lda ($36),y			lda 	(zTemp0),y
.8b05	a8		tay				tay
.8b06	a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start position of parameters
.8b08	ec 96 04	cpx $0496			cpx	 	LastParameter 				; check no parameters at the start
.8b0b	f0 13		beq $8b20			beq 	_ParamExit 					; if so, exit.
.8b0d					_ParamExtract:
.8b0d	ca		dex				dex 								; put a local term on the level before
.8b0e	20 ed 89	jsr $89ed			jsr 	LocaliseNextTerm			; also pushes original param value to basic stack
.8b11	20 2b 89	jsr $892b			jsr 	AssignVariable 				; assign stacked value to the variable.
.8b14	e8		inx				inx 								; advance to next parameter to do.
.8b15	e8		inx				inx
.8b16	ec 96 04	cpx $0496			cpx 	LastParameter 				; are we done ?
.8b19	f0 05		beq $8b20			beq 	_ParamExit
.8b1b	20 68 a3	jsr $a368			jsr 	CheckComma 					; comma seperating parameters
.8b1e	80 ed		bra $8b0d			bra 	_ParamExtract
.8b20					_ParamExit:
.8b20	20 60 a3	jsr $a360			jsr 	CheckRightBracket 			; check )
.8b23	60		rts				rts 								; and continue from here
.a352					Command_ENDPROC:
.a352	a9 b0		lda #$b0			lda 	#STK_PROC 					; check TOS is this
.a354	a2 14		ldx #$14			ldx 	#ERRID_PROC
.a356	20 bf 9c	jsr $9cbf			jsr 	StackCheckFrame
.a359	20 e8 9c	jsr $9ce8			jsr 	STKLoadCodePosition 		; restore code position
.a35c	20 b1 9c	jsr $9cb1			jsr 	StackClose
.a35f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/read.asm

.8b24					Command_Read:
.8b24	a2 00		ldx #$00			ldx 	#0 							; evaluate the term which is the var/array element to assign
.8b26	20 01 97	jsr $9701			jsr 	EvaluateTerm
.8b29	bd 00 04	lda $0400,x			lda 	NSStatus,x
.8b2c	29 20		and #$20			and 	#NSBIsReference				; get status byte on stack, identifies int, float, string.
.8b2e	f0 4a		beq $8b7a			beq 	_CRSyntax 					; check reference (bit 0)
.8b30	20 c3 8b	jsr $8bc3			jsr 	SwapDataCodePtrs 			; swap code and data
.8b33	ad 9c 04	lda $049c			lda 	inDataStatement 			; if in a data statement, we don't need to search
.8b36	d0 20		bne $8b58			bne 	_CRContinueData
.8b38					_CRKeepSearching:
.8b38	a9 a4		lda #$a4			lda 	#KWD_DATA 					; scan for instruction
.8b3a	aa		tax				tax
.8b3b	20 99 8f	jsr $8f99			jsr 	ScanForward
.8b3e	c9 a4		cmp #$a4			cmp 	#KWD_DATA 					; found data ?
.8b40	f0 16		beq $8b58			beq 	_CRHaveData 				; found it
.8b42	18		clc				clc
.8b43	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8b45	65 30		adc $30				adc 	codePtr
.8b47	85 30		sta $30				sta 	codePtr
.8b49	90 02		bcc $8b4d			bcc 	_CREExit
.8b4b	e6 31		inc $31				inc 	codePtr+1
.8b4d					_CREExit:
.8b4d	a0 03		ldy #$03			ldy 	#3 							; start of line.
.8b4f	b2 30		lda ($30)			lda 	(codePtr)
.8b51	d0 e5		bne $8b38			bne 	_CRKeepSearching
.8b53	a9 0b		lda #$0b		lda	#11
.8b55	4c 27 90	jmp $9027		jmp	ErrorHandler
.8b58					_CRHaveData:
.8b58					_CRContinueData:
.8b58	a2 01		ldx #$01			ldx 	#1
.8b5a	20 2a 9b	jsr $9b2a			jsr 	EvaluateValue 				; evaluate value into slot # 1
.8b5d	ca		dex				dex
.8b5e	20 2b 89	jsr $892b			jsr		AssignVariable 				; do the assignment
.8b61	9c 9c 04	stz $049c			stz 	inDataStatement 			; clear in data
.8b64	b1 30		lda ($30),y			lda 	(codePtr),y
.8b66	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not, end of data statement
.8b68	d0 04		bne $8b6e			bne 	_CRSwapBack
.8b6a	c8		iny				iny 								; consume comma
.8b6b	ee 9c 04	inc $049c			inc 	inDataStatement 			; set in data statement currently.
.8b6e					_CRSwapBack:
.8b6e	20 c3 8b	jsr $8bc3			jsr 	SwapDataCodePtrs			; swap them back.
.8b71	b1 30		lda ($30),y			lda 	(codePtr),y
.8b73	c8		iny				iny
.8b74	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8b76	f0 ac		beq $8b24			beq 	Command_Read 				; if so go round again.
.8b78	88		dey				dey 								; unpick get.
.8b79	60		rts				rts
.8b7a					_CRSyntax:
.8b7a	4c 46 a9	jmp $a946			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/rem.asm

.8b7d					RemCommand:
.8b7d	b1 30		lda ($30),y			lda 	(codePtr),y
.8b7f	c9 ff		cmp #$ff			cmp 	#KWC_STRING
.8b81	d0 06		bne $8b89			bne 	_RMExit
.8b83	c8		iny				iny
.8b84	98		tya				tya
.8b85	38		sec				sec
.8b86	71 30		adc ($30),y			adc 	(codePtr),y
.8b88	a8		tay				tay
.8b89					_RMExit:
.8b89	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/repeat.asm

.8b8a					Command_REPEAT:
.8b8a	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; allocate 6 bytes on the return stack.
.8b8c	20 93 9c	jsr $9c93			jsr 	StackOpen
.8b8f	20 d7 9c	jsr $9cd7			jsr 	STKSaveCodePosition 		; save loop position
.8b92	60		rts				rts
.8b93					Command_UNTIL:
.8b93	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; check REPEAT is TOS
.8b95	a2 0f		ldx #$0f			ldx 	#ERRID_REPEAT 				; this error
.8b97	20 bf 9c	jsr $9cbf			jsr 	StackCheckFrame
.8b9a	a2 00		ldx #$00			ldx 	#0
.8b9c	20 33 9b	jsr $9b33			jsr 	EvaluateNumber 				; work out the number
.8b9f	20 0f 9c	jsr $9c0f			jsr 	NSMIsZero 					; check if zero
.8ba2	f0 04		beq $8ba8			beq 	_CULoopBack 				; if so keep looping
.8ba4	20 b1 9c	jsr $9cb1			jsr 	StackClose		 			; return
.8ba7	60		rts				rts
.8ba8					_CULoopBack:
.8ba8	20 e8 9c	jsr $9ce8			jsr 	STKLoadCodePosition 		; loop back
.8bab	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/restore.asm

.8bac					Command_Restore:
.8bac	20 c3 8b	jsr $8bc3			jsr 	SwapDataCodePtrs 			; swap code and data
.8baf	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8bb1	85 30		sta $30				sta 	codePtr
.8bb3	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8bb5	85 31		sta $31				sta 	codePtr+1
.8bb7	20 c3 8b	jsr $8bc3			jsr 	SwapDataCodePtrs 			; put them back
.8bba	a9 03		lda #$03			lda 	#3 							; start at offset 3, e.g. first instruction of first line.
.8bbc	8d 9b 04	sta $049b			sta 	dataPointer+4
.8bbf	9c 9c 04	stz $049c			stz 	inDataStatement 			; not in data statement
.8bc2	60		rts				rts
.8bc3					SwapDataCodePtrs:
.8bc3	da		phx				phx
.8bc4	a2 03		ldx #$03			ldx 	#3 							; swap 32 bit code pointer over
.8bc6					_SDCPLoop:
.8bc6	b5 30		lda $30,x			lda 	safePtr,x
.8bc8	48		pha				pha
.8bc9	bd 97 04	lda $0497,x			lda 	dataPointer,x
.8bcc	95 30		sta $30,x			sta 	safePtr,x
.8bce	68		pla				pla
.8bcf	9d 97 04	sta $0497,x			sta 	dataPointer,x
.8bd2	ca		dex				dex
.8bd3	10 f1		bpl $8bc6			bpl 	_SDCPLoop
.8bd5	ad 9b 04	lda $049b			lda 	dataPointer+4 				; swap Y position over.
.8bd8	8c 9b 04	sty $049b			sty 	dataPointer+4
.8bdb	a8		tay				tay
.8bdc	fa		plx				plx
.8bdd	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/run.asm

.8bde					CommandRUN:
.8bde	20 58 86	jsr $8658			jsr 	ClearCommand 				; clear variable/stacks/etc.
.8be1	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8be3	85 30		sta $30				sta 	codePtr
.8be5	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8be7	85 31		sta $31				sta 	codePtr+1
.8be9					RUNNewLine:
.8be9	b2 30		lda ($30)			lda 	(codePtr)
.8beb	f0 5e		beq $8c4b			beq 	CRNoProgram         		; no then END.
.8bed	a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack
.8bef	9a		txs				txs
.8bf0					RUNCodePointerLine:
.8bf0	a0 02		ldy #$02			ldy 	#2 							; start of program
.8bf2					_CRIncMainLoop:
.8bf2	0e 93 04	asl $0493			asl 	breakCheck 					; clears 1 time in 8
.8bf5	d0 05		bne $8bfc			bne 	_CRNoBreakCheck
.8bf7	20 2a ab	jsr $ab2a			jsr 	EXTBreakCheck 				; break check
.8bfa	f0 4a		beq $8c46			beq 	_CRBreak
.8bfc					_CRNoBreakCheck:
.8bfc	c8		iny				iny
.8bfd					_CRMainLoop:
.8bfd	9c 90 04	stz $0490			stz 	stringInitialised 			; clear the temporary string initialised flag.
.8c00	b1 30		lda ($30),y			lda 	(codePtr),y
.8c02	10 10		bpl $8c14			bpl 	_CRNotKeyword
.8c04	c9 97		cmp #$97			cmp 	#KWC_LAST_UNARY+1 			; if after unary, legitimate command
.8c06	b0 04		bcs $8c0c			bcs 	_CRIsKeyword
.8c08	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if unary, syntax error.
.8c0a	b0 34		bcs $8c40			bcs		_CRSyntaxError
.8c0c					_CRIsKeyword:
.8c0c	c8		iny				iny 								; consume command
.8c0d	0a		asl a				asl 	a 							; double losing the MSB which is '1' as tokens are $80-$FF
.8c0e	aa		tax				tax 								; put in X for vector jump
.8c0f	20 43 8c	jsr $8c43			jsr 	_CRCallVector0 				; call the vector - effectively jsr (vectortable,X)
.8c12	80 e9		bra $8bfd			bra 	_CRMainLoop 				; and loop round
.8c14					_CRNotKeyword:
.8c14	c9 3a		cmp #$3a			cmp 	#KWD_COLON 					; if a :, consume it and go round.
.8c16	f0 da		beq $8bf2			beq 	_CRIncMainLoop
.8c18	c9 40		cmp #$40			cmp 	#$40 						; variable/call reference
.8c1a	90 05		bcc $8c21			bcc 	_CRNotVariable
.8c1c					_CRGoLet:
.8c1c	20 ef 88	jsr $88ef			jsr 	LetCommand
.8c1f	80 dc		bra $8bfd			bra 	_CRMainLoop
.8c21					_CRNotVariable:
.8c21	c9 10		cmp #$10			cmp 	#KWD_AT 					; handle @
.8c23	f0 f7		beq $8c1c			beq 	_CRGoLet
.8c25	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; handle ? !
.8c27	f0 f3		beq $8c1c			beq 	_CRGoLet
.8c29	c9 21		cmp #$21			cmp 	#KWD_PLING
.8c2b	f0 ef		beq $8c1c			beq 	_CRGoLet
.8c2d	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; handle ' (comment)
.8c2f	f0 09		beq $8c3a			beq 	_CRGoRem
.8c31	c9 2e		cmp #$2e			cmp 	#KWD_PERIOD 				; handle . (assembler label)
.8c33	d0 0b		bne $8c40			bne 	_CRSyntaxError
.8c35	20 f8 84	jsr $84f8			jsr 	LabelHere
.8c38	80 c3		bra $8bfd			bra 	_CRMainLoop
.8c3a					_CRGoRem:
.8c3a	c8		iny				iny
.8c3b	20 7d 8b	jsr $8b7d			jsr 	RemCommand
.8c3e	80 bd		bra $8bfd			bra 	_CRMainLoop
.8c40					_CRSyntaxError:
.8c40	4c 46 a9	jmp $a946			jmp 	SyntaxError
.8c43					_CRCallVector0:
.8c43	7c ee 8c	jmp ($8cee,x)			jmp 	(VectorSet0,x)
.8c46					_CRBreak:
.8c46	a9 01		lda #$01		lda	#1
.8c48	4c 27 90	jmp $9027		jmp	ErrorHandler
.8c4b					CRNoProgram:
.8c4b	4c 75 87	jmp $8775			jmp 	EndCommand
.8c4e					EOLCommand:
.8c4e	18		clc				clc
.8c4f	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8c51	65 30		adc $30				adc 	codePtr
.8c53	85 30		sta $30				sta 	codePtr
.8c55	90 02		bcc $8c59			bcc 	_CREExit
.8c57	e6 31		inc $31				inc 	codePtr+1
.8c59					_CREExit:
.8c59	80 8e		bra $8be9			bra 	RunNewLine
.8c5b					Shift1Command:
.8c5b	b1 30		lda ($30),y			lda 	(codePtr),y
.8c5d	c8		iny				iny
.8c5e	0a		asl a				asl 	a
.8c5f	aa		tax				tax
.8c60	7c 50 8d	jmp ($8d50,x)			jmp 	(VectorSet1,x)
.8c63					Shift2Command:
.8c63	b1 30		lda ($30),y			lda 	(codePtr),y
.8c65	c8		iny				iny
.8c66	0a		asl a				asl 	a
.8c67	aa		tax				tax
.8c68	7c 68 8d	jmp ($8d68,x)			jmp 	(VectorSet2,x)
.8c6b					Unused1:
.8c6b					Unused2:
.8c6b					Unused3:
.8c6b					Unused4:
.8c6b	4c 46 a9	jmp $a946			jmp 	SyntaxError
>8c6e							.align 2

;******  Processing file: ./common/commands/../generated/vectors.dat

.8c6e					VectorSetPunc:
>8c6e	d1 91					.word	ShiftLeft                        ; $00 <<
>8c70	cb 90					.word	BinaryCompareLessEqual           ; $01 <=
>8c72	c1 90					.word	BinaryCompareNotEqual            ; $02 <>
>8c74	46 a9					.word	SyntaxError                      ; $03 !!3
>8c76	46 a9					.word	SyntaxError                      ; $04 ><
>8c78	d5 90					.word	BinaryCompareGreaterEqual        ; $05 >=
>8c7a	d4 91					.word	ShiftRight                       ; $06 >>
>8c7c	46 a9					.word	SyntaxError                      ; $07 !!7
>8c7e	46 a9					.word	SyntaxError                      ; $08 !!8
>8c80	46 a9					.word	SyntaxError                      ; $09 !!9
>8c82	46 a9					.word	SyntaxError                      ; $0a !!10
>8c84	46 a9					.word	SyntaxError                      ; $0b !!11
>8c86	46 a9					.word	SyntaxError                      ; $0c !!12
>8c88	46 a9					.word	SyntaxError                      ; $0d !!13
>8c8a	46 a9					.word	SyntaxError                      ; $0e !!14
>8c8c	46 a9					.word	SyntaxError                      ; $0f !!15
>8c8e	46 a9					.word	SyntaxError                      ; $10 @
>8c90	46 a9					.word	SyntaxError                      ; $11 !!17
>8c92	46 a9					.word	SyntaxError                      ; $12 !!18
>8c94	46 a9					.word	SyntaxError                      ; $13 [
>8c96	79 a3					.word	IntegerDivide                    ; $14 \
>8c98	46 a9					.word	SyntaxError                      ; $15 ]
>8c9a	5a 93					.word	EorInteger                       ; $16 ^
>8c9c	46 a9					.word	SyntaxError                      ; $17 _
>8c9e	46 a9					.word	SyntaxError                      ; $18 `
>8ca0	46 a9					.word	SyntaxError                      ; $19 !!25
>8ca2	46 a9					.word	SyntaxError                      ; $1a !!26
>8ca4	46 a9					.word	SyntaxError                      ; $1b {
>8ca6	14 93					.word	OraInteger                       ; $1c |
>8ca8	46 a9					.word	SyntaxError                      ; $1d }
>8caa	46 a9					.word	SyntaxError                      ; $1e ~
>8cac	46 a9					.word	SyntaxError                      ; $1f [7m<7F>[m
>8cae	46 a9					.word	SyntaxError                      ; $20
>8cb0	a0 93					.word	WordIndirect                     ; $21 !
>8cb2	46 a9					.word	SyntaxError                      ; $22 "
>8cb4	46 a9					.word	SyntaxError                      ; $23 #
>8cb6	46 a9					.word	SyntaxError                      ; $24 $
>8cb8	c6 a3					.word	IntegerModulus                   ; $25 %
>8cba	ce 92					.word	AndInteger                       ; $26 &
>8cbc	46 a9					.word	SyntaxError                      ; $27 '
>8cbe	46 a9					.word	SyntaxError                      ; $28 (
>8cc0	46 a9					.word	SyntaxError                      ; $29 )
>8cc2	3b a4					.word	MulInteger                       ; $2a *
>8cc4	68 92					.word	AddInteger                       ; $2b +
>8cc6	46 a9					.word	SyntaxError                      ; $2c ,
>8cc8	a3 92					.word	SubInteger                       ; $2d -
>8cca	46 a9					.word	SyntaxError                      ; $2e .
>8ccc	d2 a5					.word	FDivideCommand                   ; $2f /
>8cce	46 a9					.word	SyntaxError                      ; $30 0
>8cd0	46 a9					.word	SyntaxError                      ; $31 1
>8cd2	46 a9					.word	SyntaxError                      ; $32 2
>8cd4	46 a9					.word	SyntaxError                      ; $33 3
>8cd6	46 a9					.word	SyntaxError                      ; $34 4
>8cd8	46 a9					.word	SyntaxError                      ; $35 5
>8cda	46 a9					.word	SyntaxError                      ; $36 6
>8cdc	46 a9					.word	SyntaxError                      ; $37 7
>8cde	46 a9					.word	SyntaxError                      ; $38 8
>8ce0	46 a9					.word	SyntaxError                      ; $39 9
>8ce2	46 a9					.word	SyntaxError                      ; $3a :
>8ce4	46 a9					.word	SyntaxError                      ; $3b ;
>8ce6	ad 90					.word	BinaryCompareLess                ; $3c <
>8ce8	a3 90					.word	BinaryCompareEqual               ; $3d =
>8cea	b7 90					.word	BinaryCompareGreater             ; $3e >
>8cec	c7 93					.word	ByteIndirect                     ; $3f ?
.8cee					VectorSet0:
>8cee	4e 8c					.word	EOLCommand                       ; $80 !0:EOF
>8cf0	5b 8c					.word	Shift1Command                    ; $81 !1:SH1
>8cf2	63 8c					.word	Shift2Command                    ; $82 !2:SH2
>8cf4	18 a7					.word	AbsUnary                         ; $83 ABS(
>8cf6	91 98					.word	AllocUnary                       ; $84 ALLOC(
>8cf8	28 a7					.word	AscUnary                         ; $85 ASC(
>8cfa	b1 99					.word	ChrUnary                         ; $86 CHR$(
>8cfc	9f 90					.word	UnaryFalse                       ; $87 FALSE
>8cfe	35 a7					.word	FracUnary                        ; $88 FRAC(
>8d00	4b a7					.word	IntUnary                         ; $89 INT(
>8d02	a1 a7					.word	IsValUnary                       ; $8a ISVAL(
>8d04	8b 9a					.word	Unary_Left                       ; $8b LEFT$(
>8d06	5d a7					.word	LenUnary                         ; $8c LEN(
>8d08	b5 9a					.word	Unary_Mid                        ; $8d MID$(
>8d0a	01 99					.word	Unary_Not                        ; $8e NOT(
>8d0c	17 99					.word	Unary_Random                     ; $8f RANDOM(
>8d0e	9b 9a					.word	Unary_Right                      ; $90 RIGHT$(
>8d10	30 99					.word	Unary_Rnd                        ; $91 RND(
>8d12	77 a7					.word	SgnUnary                         ; $92 SGN(
>8d14	c3 99					.word	SpcUnary                         ; $93 SPC(
>8d16	de 99					.word	Unary_Str                        ; $94 STR$(
>8d18	93 90					.word	UnaryTrue                        ; $95 TRUE
>8d1a	97 a7					.word	ValUnary                         ; $96 VAL(
>8d1c	78 87					.word	ForCommand                       ; $97 FOR
>8d1e	c5 88					.word	IfCommand                        ; $98 IF
>8d20	6b 8c					.word	Unused1                          ; $99 PROC
>8d22	8a 8b					.word	Command_REPEAT                   ; $9a REPEAT
>8d24	f8 8f					.word	Command_WHILE                    ; $9b WHILE
>8d26	ee 88					.word	EndIf                            ; $9c ENDIF
>8d28	52 a3					.word	Command_ENDPROC                  ; $9d ENDPROC
>8d2a	32 88					.word	NextCommand                      ; $9e NEXT
>8d2c	6b 8c					.word	Unused4                          ; $9f THEN
>8d2e	93 8b					.word	Command_UNTIL                    ; $a0 UNTIL
>8d30	19 90					.word	Command_WEND                     ; $a1 WEND
>8d32	1e 86					.word	CallCommand                      ; $a2 CALL
>8d34	46 a9					.word	SyntaxError                      ; $a3 CLS
>8d36	b0 86					.word	Command_Data                     ; $a4 DATA
>8d38	b8 86					.word	DimCommand                       ; $a5 DIM
>8d3a	6b 8c					.word	Unused3                          ; $a6 DOWNTO
>8d3c	e7 88					.word	ElseCode                         ; $a7 ELSE
>8d3e	8b 88					.word	Command_GOSUB                    ; $a8 GOSUB
>8d40	a9 88					.word	GotoCommand                      ; $a9 GOTO
>8d42	ef 88					.word	LetCommand                       ; $aa LET
>8d44	df 89					.word	Command_LOCAL                    ; $ab LOCAL
>8d46	6d 8a					.word	Command_Print                    ; $ac PRINT
>8d48	24 8b					.word	Command_Read                     ; $ad READ
>8d4a	7d 8b					.word	RemCommand                       ; $ae REM
>8d4c	9b 88					.word	Command_RETURN                   ; $af RETURN
>8d4e	6b 8c					.word	Unused2                          ; $b0 TO
.8d50					VectorSet1:
>8d50	46 a9					.word	SyntaxError                      ; $80 !0:EOF
>8d52	46 a9					.word	SyntaxError                      ; $81 !1:SH1
>8d54	46 a9					.word	SyntaxError                      ; $82 !2:SH2
>8d56	ef 85					.word	AssembleCommand                  ; $83 ASSEMBLE
>8d58	0e 86					.word	AssertCommand                    ; $84 ASSERT
>8d5a	58 86					.word	ClearCommand                     ; $85 CLEAR
>8d5c	75 87					.word	EndCommand                       ; $86 END
>8d5e	44 89					.word	Command_List                     ; $87 LIST
>8d60	63 8a					.word	NewCommand                       ; $88 NEW
>8d62	ac 8b					.word	Command_Restore                  ; $89 RESTORE
>8d64	de 8b					.word	CommandRUN                       ; $8a RUN
>8d66	f0 8d					.word	StopCommand                      ; $8b STOP
.8d68					VectorSet2:
>8d68	46 a9					.word	SyntaxError                      ; $80 !0:EOF
>8d6a	46 a9					.word	SyntaxError                      ; $81 !1:SH1
>8d6c	46 a9					.word	SyntaxError                      ; $82 !2:SH2
>8d6e	05 a8					.word	Assemble_adc                     ; $83 ADC
>8d70	fd a7					.word	Assemble_and                     ; $84 AND
>8d72	19 a8					.word	Assemble_asl                     ; $85 ASL
>8d74	83 a8					.word	Assemble_bcc                     ; $86 BCC
>8d76	87 a8					.word	Assemble_bcs                     ; $87 BCS
>8d78	8f a8					.word	Assemble_beq                     ; $88 BEQ
>8d7a	46 a8					.word	Assemble_bit                     ; $89 BIT
>8d7c	77 a8					.word	Assemble_bmi                     ; $8a BMI
>8d7e	8b a8					.word	Assemble_bne                     ; $8b BNE
>8d80	73 a8					.word	Assemble_bpl                     ; $8c BPL
>8d82	93 a8					.word	Assemble_bra                     ; $8d BRA
>8d84	97 a8					.word	Assemble_brk                     ; $8e BRK
>8d86	7b a8					.word	Assemble_bvc                     ; $8f BVC
>8d88	7f a8					.word	Assemble_bvs                     ; $90 BVS
>8d8a	9f a8					.word	Assemble_clc                     ; $91 CLC
>8d8c	f3 a8					.word	Assemble_cld                     ; $92 CLD
>8d8e	b3 a8					.word	Assemble_cli                     ; $93 CLI
>8d90	e3 a8					.word	Assemble_clv                     ; $94 CLV
>8d92	11 a8					.word	Assemble_cmp                     ; $95 CMP
>8d94	5a a8					.word	Assemble_cpx                     ; $96 CPX
>8d96	55 a8					.word	Assemble_cpy                     ; $97 CPY
>8d98	37 a8					.word	Assemble_dec                     ; $98 DEC
>8d9a	ef a8					.word	Assemble_dex                     ; $99 DEX
>8d9c	cb a8					.word	Assemble_dey                     ; $9a DEY
>8d9e	01 a8					.word	Assemble_eor                     ; $9b EOR
>8da0	3c a8					.word	Assemble_inc                     ; $9c INC
>8da2	ff a8					.word	Assemble_inx                     ; $9d INX
>8da4	eb a8					.word	Assemble_iny                     ; $9e INY
>8da6	6e a8					.word	Assemble_jmp                     ; $9f JMP
>8da8	69 a8					.word	Assemble_jsr                     ; $a0 JSR
>8daa	0d a8					.word	Assemble_lda                     ; $a1 LDA
>8dac	32 a8					.word	Assemble_ldx                     ; $a2 LDX
>8dae	50 a8					.word	Assemble_ldy                     ; $a3 LDY
>8db0	23 a8					.word	Assemble_lsr                     ; $a4 LSR
>8db2	03 a9					.word	Assemble_nop                     ; $a5 NOP
>8db4	f9 a7					.word	Assemble_ora                     ; $a6 ORA
>8db6	af a8					.word	Assemble_pha                     ; $a7 PHA
>8db8	9b a8					.word	Assemble_php                     ; $a8 PHP
>8dba	f7 a8					.word	Assemble_phx                     ; $a9 PHX
>8dbc	b7 a8					.word	Assemble_phy                     ; $aa PHY
>8dbe	bf a8					.word	Assemble_pla                     ; $ab PLA
>8dc0	a3 a8					.word	Assemble_plp                     ; $ac PLP
>8dc2	0b a9					.word	Assemble_plx                     ; $ad PLX
>8dc4	c7 a8					.word	Assemble_ply                     ; $ae PLY
>8dc6	1e a8					.word	Assemble_rol                     ; $af ROL
>8dc8	28 a8					.word	Assemble_ror                     ; $b0 ROR
>8dca	ab a8					.word	Assemble_rti                     ; $b1 RTI
>8dcc	bb a8					.word	Assemble_rts                     ; $b2 RTS
>8dce	15 a8					.word	Assemble_sbc                     ; $b3 SBC
>8dd0	a7 a8					.word	Assemble_sec                     ; $b4 SEC
>8dd2	07 a9					.word	Assemble_sed                     ; $b5 SED
>8dd4	c3 a8					.word	Assemble_sei                     ; $b6 SEI
>8dd6	09 a8					.word	Assemble_sta                     ; $b7 STA
>8dd8	fb a8					.word	Assemble_stp                     ; $b8 STP
>8dda	2d a8					.word	Assemble_stx                     ; $b9 STX
>8ddc	4b a8					.word	Assemble_sty                     ; $ba STY
>8dde	41 a8					.word	Assemble_stz                     ; $bb STZ
>8de0	df a8					.word	Assemble_tax                     ; $bc TAX
>8de2	db a8					.word	Assemble_tay                     ; $bd TAY
>8de4	64 a8					.word	Assemble_trb                     ; $be TRB
>8de6	5f a8					.word	Assemble_tsb                     ; $bf TSB
>8de8	e7 a8					.word	Assemble_tsx                     ; $c0 TSX
>8dea	cf a8					.word	Assemble_txa                     ; $c1 TXA
>8dec	d7 a8					.word	Assemble_txs                     ; $c2 TXS
>8dee	d3 a8					.word	Assemble_tya                     ; $c3 TYA

;******  Return to file: ./common/commands/run.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/stop.asm

.8df0					StopCommand:
.8df0	a9 08		lda #$08		lda	#8
.8df2	4c 27 90	jmp $9027		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/expandline.asm

.8df5					ListConvertLine:
.8df5	9c 9d 04	stz $049d			stz 	tbOffset
.8df8	9c a9 04	stz $04a9			stz 	tokenBuffer
.8dfb	a0 02		ldy #$02			ldy 	#2 							; convert line number to string
.8dfd	b1 30		lda ($30),y			lda 	(codePtr),y
.8dff	aa		tax				tax
.8e00	88		dey				dey
.8e01	b1 30		lda ($30),y			lda 	(codePtr),y
.8e03	20 bc a4	jsr $a4bc			jsr 	ConvertInt16
.8e06	85 36		sta $36				sta 	zTemp0 						; copy number into buffer
.8e08	86 37		stx $37				stx 	zTemp0+1
.8e0a	a0 00		ldy #$00			ldy 	#0
.8e0c					_LCCopyNumber:
.8e0c	b1 36		lda ($36),y			lda 	(zTemp0),y
.8e0e	20 0e 8f	jsr $8f0e			jsr 	LCLWrite
.8e11	c8		iny				iny
.8e12	b1 36		lda ($36),y			lda 	(zTemp0),y
.8e14	d0 f6		bne $8e0c			bne 	_LCCopyNumber
.8e16					_LCPadOut:
.8e16	a9 20		lda #$20			lda 	#' '						; pad out to 6 characters
.8e18	20 0e 8f	jsr $8f0e			jsr 	LCLWrite
.8e1b	ad 9d 04	lda $049d			lda 	tbOffset
.8e1e	c9 06		cmp #$06			cmp 	#6
.8e20	d0 f4		bne $8e16			bne 	_LCPadOut
.8e22	a0 03		ldy #$03			ldy 	#3 							; start position.
.8e24					_LCMainLoop:
.8e24	b1 30		lda ($30),y			lda 	(codePtr),y
.8e26	c9 80		cmp #$80			cmp 	#KWC_EOL 					; end of line ?
.8e28	f0 17		beq $8e41			beq 	_LCExit
.8e2a	c9 10		cmp #$10			cmp 	#16 						; 0-5 are the double punctuations
.8e2c	90 14		bcc $8e42			bcc 	_LCDoubles
.8e2e	c9 20		cmp #$20			cmp 	#32 						; 16-31 are shifted punctuation from 64-91
.8e30	90 20		bcc $8e52			bcc 	_LCShiftPunc
.8e32	c9 40		cmp #$40			cmp 	#64 						; 32-64 are as stored, punc and digits
.8e34	90 2b		bcc $8e61			bcc 	_LCPunctuation
.8e36	c9 80		cmp #$80			cmp 	#128 						; 64-127 are variable identifiers.
.8e38	90 2d		bcc $8e67			bcc 	_LCIdentifiers
.8e3a	c9 fe		cmp #$fe			cmp 	#254 						; 128-253 are tokenised words
.8e3c	90 49		bcc $8e87			bcc 	_LCTokens
.8e3e	4c e2 8e	jmp $8ee2			jmp 	_LCData 					; 254-5 are data objects
.8e41					_LCExit:
.8e41	60		rts				rts
.8e42					_LCDoubles:
.8e42	48		pha				pha
.8e43	4a		lsr a				lsr 	a 							; put bit 2 into bit 1
.8e44	29 02		and #$02			and 	#2
.8e46	09 3c		ora #$3c			ora 	#60 						; make < >
.8e48	20 0e 8f	jsr $8f0e			jsr 	LCLWrite
.8e4b	68		pla				pla 								; restore, do lower bit
.8e4c	29 03		and #$03			and 	#3
.8e4e	09 3c		ora #$3c			ora 	#60
.8e50	80 0f		bra $8e61			bra		_LCPunctuation 				; print, increment, loop
.8e52					_LCShiftPunc:
.8e52	aa		tax				tax 								; save in X
.8e53	29 07		and #$07			and 	#7 							; lower 3 bits
.8e55	f0 02		beq $8e59			beq 	_LCNoAdd
.8e57	09 18		ora #$18			ora 	#24 						; adds $18 to it.
.8e59					_LCNoAdd:
.8e59	e0 18		cpx #$18			cpx 	#24 						; if >= 24 add $20
.8e5b	90 02		bcc $8e5f			bcc 	_LCNoAdd2
.8e5d	09 20		ora #$20			ora 	#32 						; adds $20
.8e5f					_LCNoAdd2:
.8e5f	09 40		ora #$40			ora 	#$40 						; shift into 64-127 range and fall through.
.8e61					_LCPunctuation:
.8e61	c8		iny				iny 								; consume character
.8e62	20 0e 8f	jsr $8f0e			jsr 	LCLWrite 					; write it out.
.8e65	80 bd		bra $8e24			bra 	_LCMainLoop 				; go round again.
.8e67					_LCIdentifiers:
.8e67	18		clc				clc 								; convert to physical address
.8e68	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8e6a	85 37		sta $37				sta 	zTemp0+1
.8e6c	c8		iny				iny
.8e6d	b1 30		lda ($30),y			lda 	(codePtr),y
.8e6f	85 36		sta $36				sta 	zTemp0
.8e71	c8		iny				iny
.8e72	5a		phy				phy 								; save position
.8e73	a0 07		ldy #$07			ldy 	#7 							; output the identifier.
.8e75					_LCOutIdentifier:
.8e75	c8		iny				iny
.8e76	b1 36		lda ($36),y			lda 	(zTemp0),y
.8e78	29 7f		and #$7f			and 	#$7F
.8e7a	20 3c 8f	jsr $8f3c			jsr 	LCLLowerCase
.8e7d	20 0e 8f	jsr $8f0e			jsr 	LCLWrite
.8e80	b1 36		lda ($36),y			lda 	(zTemp0),y				 	; ends when bit 7 set.
.8e82	10 f1		bpl $8e75			bpl 	_LCOutIdentifier
.8e84	7a		ply				ply 								; restore position
.8e85	80 9d		bra $8e24			bra 	_LCMainLoop
.8e87					_LCTokens:
.8e87	aa		tax				tax 								; token in X
.8e88	a9 0c		lda #$0c			lda 	#((KeywordSet2) & $FF)
.8e8a	85 36		sta $36				sta 	0+zTemp0
.8e8c	a9 9f		lda #$9f			lda 	#((KeywordSet2) >> 8)
.8e8e	85 37		sta $37				sta 	1+zTemp0
.8e90	e0 82		cpx #$82			cpx 	#$82
.8e92	f0 16		beq $8eaa			beq 	_LCUseShift
.8e94	a9 c8		lda #$c8			lda 	#((KeywordSet1) & $FF)
.8e96	85 36		sta $36				sta 	0+zTemp0
.8e98	a9 9e		lda #$9e			lda 	#((KeywordSet1) >> 8)
.8e9a	85 37		sta $37				sta 	1+zTemp0
.8e9c	e0 81		cpx #$81			cpx 	#$81
.8e9e	f0 0a		beq $8eaa			beq 	_LCUseShift
.8ea0	a9 96		lda #$96			lda 	#((KeywordSet0) & $FF)
.8ea2	85 36		sta $36				sta 	0+zTemp0
.8ea4	a9 9d		lda #$9d			lda 	#((KeywordSet0) >> 8)
.8ea6	85 37		sta $37				sta 	1+zTemp0
.8ea8	80 01		bra $8eab			bra 	_LCNoShift
.8eaa					_LCUseShift:
.8eaa	c8		iny				iny
.8eab					_LCNoShift:
.8eab	20 1d 8f	jsr $8f1d			jsr 	LCCheckSpaceRequired 		; do we need a space ?
.8eae	b1 30		lda ($30),y			lda 	(codePtr),y
.8eb0	aa		tax				tax 								; into X
.8eb1					_LCFindText:
.8eb1	ca		dex				dex
.8eb2	10 0e		bpl $8ec2			bpl 	_LCFoundText 				; found text.
.8eb4	b2 36		lda ($36)			lda 	(zTemp0) 					; length of text
.8eb6	1a		inc a				inc 	a 							; one extra for size
.8eb7	38		sec				sec 								; one extra for checksum
.8eb8	65 36		adc $36				adc 	zTemp0 						; go to next token
.8eba	85 36		sta $36				sta 	zTemp0
.8ebc	90 f3		bcc $8eb1			bcc 	_LCFindText
.8ebe	e6 37		inc $37				inc 	zTemp0+1
.8ec0	80 ef		bra $8eb1			bra 	_LCFindText
.8ec2					_LCFoundText:
.8ec2	5a		phy				phy 								; save List position
.8ec3	b2 36		lda ($36)			lda 	(zTemp0)					; count to print
.8ec5	aa		tax				tax
.8ec6	a0 02		ldy #$02			ldy 	#2
.8ec8					_LCCopyToken:
.8ec8	b1 36		lda ($36),y			lda 	(zTemp0),y
.8eca	20 3c 8f	jsr $8f3c			jsr 	LCLLowerCase
.8ecd	20 0e 8f	jsr $8f0e			jsr 	LCLWrite
.8ed0	c8		iny				iny
.8ed1	ca		dex				dex
.8ed2	d0 f4		bne $8ec8			bne 	_LCCopyToken
.8ed4	c9 28		cmp #$28			cmp 	#"(" 						; if last char not ( print a space
.8ed6	f0 05		beq $8edd			beq 	_LCNoSpace
.8ed8	a9 20		lda #$20			lda 	#' '
.8eda	20 0e 8f	jsr $8f0e			jsr 	LCLWrite
.8edd					_LCNoSpace:
.8edd	7a		ply				ply 								; restore position.
.8ede	c8		iny				iny 								; consume token
.8edf	4c 24 8e	jmp $8e24			jmp 	_LCMainLoop 				; and go around again.
.8ee2					_LCData:
.8ee2	48		pha				pha 								; save type $FE/$FF
.8ee3	a2 24		ldx #$24			ldx 	#'$' 						; figure out $ or "
.8ee5	c9 fe		cmp #$fe			cmp 	#$FE
.8ee7	f0 02		beq $8eeb			beq 	_LCHaveOpener
.8ee9	a2 22		ldx #$22			ldx 	#'"'
.8eeb					_LCHaveOpener:
.8eeb	8a		txa				txa 								; output prefix (# or ")
.8eec	20 0e 8f	jsr $8f0e			jsr 	LCLWrite
.8eef	c8		iny				iny 								; get count
.8ef0	b1 30		lda ($30),y			lda 	(codePtr),y
.8ef2	aa		tax				tax
.8ef3	c8		iny				iny 								; point at first character
.8ef4					_LCOutData:
.8ef4	b1 30		lda ($30),y			lda 	(codePtr),y
.8ef6	c9 00		cmp #$00			cmp 	#0
.8ef8	f0 03		beq $8efd			beq 	_LCNoPrint
.8efa	20 0e 8f	jsr $8f0e			jsr 	LCLWrite
.8efd					_LCNoPrint:
.8efd	c8		iny				iny
.8efe	ca		dex				dex
.8eff	d0 f3		bne $8ef4			bne 	_LCOutData
.8f01	68		pla				pla 								; closing " required ?
.8f02	c9 ff		cmp #$ff			cmp 	#$FF
.8f04	d0 05		bne $8f0b			bne 	_LCNoQuote
.8f06	a9 22		lda #$22			lda 	#'"'
.8f08	20 0e 8f	jsr $8f0e			jsr 	LCLWrite
.8f0b					_LCNoQuote:
.8f0b	4c 24 8e	jmp $8e24			jmp 	_LCMainLoop
.8f0e					LCLWrite:
.8f0e	da		phx				phx
.8f0f	ae 9d 04	ldx $049d			ldx 	tbOffset
.8f12	9d a9 04	sta $04a9,x			sta 	tokenBuffer,x
.8f15	9e aa 04	stz $04aa,x			stz 	tokenBuffer+1,x
.8f18	ee 9d 04	inc $049d			inc 	tbOffset
.8f1b	fa		plx				plx
.8f1c	60		rts				rts
.8f1d					LCCheckSpaceRequired:
.8f1d	ae 9d 04	ldx $049d			ldx 	tbOffset
.8f20	bd a8 04	lda $04a8,x			lda 	tokenBuffer-1,x 			; previous character
.8f23	20 3c 8f	jsr $8f3c			jsr 	LCLLowerCase 				; saves a little effort
.8f26	c9 30		cmp #$30			cmp 	#"0" 						; check if it was 0-9 A-Z a-z if so need space.
.8f28	90 11		bcc $8f3b			bcc 	_LCCSRExit
.8f2a	c9 3a		cmp #$3a			cmp 	#"9"+1
.8f2c	90 08		bcc $8f36			bcc 	_LCCSRSpace
.8f2e	c9 61		cmp #$61			cmp 	#"a"
.8f30	90 09		bcc $8f3b			bcc 	_LCCSRExit
.8f32	c9 7b		cmp #$7b			cmp 	#"z"+1
.8f34	b0 05		bcs $8f3b			bcs 	_LCCSRExit
.8f36					_LCCSRSpace:
.8f36	a9 20		lda #$20			lda 	#' '
.8f38	20 0e 8f	jsr $8f0e			jsr 	LCLWrite
.8f3b					_LCCSRExit:
.8f3b	60		rts				rts
.8f3c					LCLLowerCase:
.8f3c	c9 41		cmp #$41			cmp 	#"A"
.8f3e	90 06		bcc $8f46			bcc 	_LCLLCOut
.8f40	c9 5b		cmp #$5b			cmp 	#"Z"+1
.8f42	b0 02		bcs $8f46			bcs 	_LCLLCOut
.8f44	69 20		adc #$20			adc 	#$20
.8f46					_LCLLCOut:
.8f46	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/procscan.asm

.8f47					ProcedureScan:
.8f47	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8f49	85 30		sta $30				sta 	codePtr
.8f4b	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8f4d	85 31		sta $31				sta 	codePtr+1
.8f4f					_PSLoop:
.8f4f	b2 30		lda ($30)			lda 	(codePtr)
.8f51	f0 42		beq $8f95			beq 	_PSExit
.8f53	a0 03		ldy #$03			ldy 	#3 							; is it PROC ?
.8f55	b1 30		lda ($30),y			lda 	(codePtr),y
.8f57	c9 99		cmp #$99			cmp 	#KWD_PROC
.8f59	d0 2d		bne $8f88			bne 	_PSNext
.8f5b	c8		iny				iny 								; get the address of the record to zTemp0 and
.8f5c	b1 30		lda ($30),y			lda 	(codePtr),y
.8f5e	29 c0		and #$c0			and 	#$C0
.8f60	c9 40		cmp #$40			cmp 	#$40
.8f62	d0 32		bne $8f96			bne 	_PSSyntax
.8f64	b1 30		lda ($30),y			lda 	(codePtr),y
.8f66	18		clc				clc
.8f67	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8f69	85 37		sta $37				sta 	zTemp0+1
.8f6b	c8		iny				iny 								; LSB
.8f6c	b1 30		lda ($30),y			lda 	(codePtr),y
.8f6e	85 36		sta $36				sta 	zTemp0
.8f70	c8		iny				iny 								; character after variable call.
.8f71	98		tya				tya 								; save Y offset at +7
.8f72	a0 07		ldy #$07			ldy 	#7
.8f74	91 36		sta ($36),y			sta 	(zTemp0),y
.8f76	a9 18		lda #$18			lda 	#NSTProcedure 				; mark it as procedure
.8f78	a0 02		ldy #$02			ldy 	#2
.8f7a	91 36		sta ($36),y			sta 	(zTemp0),y
.8f7c	a2 00		ldx #$00			ldx 	#0 							; copy code-Ptr in
.8f7e					_PSCopy:
.8f7e	b5 30		lda $30,x			lda 	safePtr,x
.8f80	c8		iny				iny
.8f81	91 36		sta ($36),y			sta 	(zTemp0),y
.8f83	e8		inx				inx
.8f84	e0 04		cpx #$04			cpx 	#4
.8f86	d0 f6		bne $8f7e			bne 	_PSCopy
.8f88					_PSNext:
.8f88	18		clc				clc
.8f89	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8f8b	65 30		adc $30				adc 	codePtr
.8f8d	85 30		sta $30				sta 	codePtr
.8f8f	90 02		bcc $8f93			bcc 	_CREExit
.8f91	e6 31		inc $31				inc 	codePtr+1
.8f93					_CREExit:
.8f93	80 ba		bra $8f4f			bra 	_PSLoop
.8f95					_PSExit:
.8f95	60		rts				rts
.8f96					_PSSyntax:
.8f96	4c 46 a9	jmp $a946			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/scanforward.asm

.8f99					ScanForward:
.8f99	85 36		sta $36				sta 	zTemp0 						; save XA as the two possible matches.
.8f9b	86 37		stx $37				stx 	zTemp0+1
.8f9d	64 38		stz $38				stz 	zTemp1 						; this is the structure count - goes up with WHILE/FOR
.8f9f					_ScanLoop:
.8f9f	b1 30		lda ($30),y			lda 	(codePtr),y
.8fa1	c8		iny				iny
.8fa2	a6 38		ldx $38				ldx 	zTemp1 						; if the count is > 0 cannot match as in substructure
.8fa4	d0 0e		bne $8fb4			bne 	_ScanGoNext
.8fa6	c5 36		cmp $36				cmp 	zTemp0 						; see if either matches
.8fa8	f0 04		beq $8fae			beq 	_ScanMatch
.8faa	c5 37		cmp $37				cmp 	zTemp0+1
.8fac	d0 06		bne $8fb4			bne 	_ScanGoNext
.8fae					_ScanMatch:
.8fae	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if asked for EOL, backtrack.
.8fb0	d0 01		bne $8fb3			bne 	_ScanNotEndEOL
.8fb2	88		dey				dey
.8fb3					_ScanNotEndEOL:
.8fb3	60		rts				rts
.8fb4					_ScanGoNext:
.8fb4	c9 40		cmp #$40			cmp 	#$40 						; if 00-3F, punctuation characters, loop back
.8fb6	90 e7		bcc $8f9f			bcc 	_ScanLoop
.8fb8	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if 40-82, skip one extra.
.8fba	90 18		bcc $8fd4			bcc 	_ScanSkipOne
.8fbc	c9 fc		cmp #$fc			cmp 	#$FC 						; FC-FF are data skips
.8fbe	b0 2f		bcs $8fef			bcs 	_ScanSkipData
.8fc0	c9 97		cmp #$97			cmp 	#KWC_FIRST_STRUCTURE 		; structure keyword ?
.8fc2	90 db		bcc $8f9f			bcc 	_ScanLoop 					; if not, ordinary keywords.
.8fc4	c9 a2		cmp #$a2			cmp 	#KWC_LAST_STRUCTURE+1
.8fc6	b0 d7		bcs $8f9f			bcs 	_ScanLoop
.8fc8	c6 38		dec $38				dec 	zTemp1 						; decrement the sructure count
.8fca	c9 9c		cmp #$9c			cmp 	#KWC_FIRST_STRUCTURE_DEC 	; back if it is a dec structure (e.g. WEND/NEXT)
.8fcc	b0 d1		bcs $8f9f			bcs 	_ScanLoop
.8fce	e6 38		inc $38				inc 	zTemp1 						; so it's an increment structure
.8fd0	e6 38		inc $38				inc 	zTemp1 						; twice to undo the dec
.8fd2	80 cb		bra $8f9f			bra 	_ScanLoop
.8fd4					_ScanSkipOne:
.8fd4	c8		iny				iny 								; consume the extra one.
.8fd5	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if not EOL loop back
.8fd7	d0 c6		bne $8f9f			bne 	_ScanLoop
.8fd9	18		clc				clc
.8fda	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8fdc	65 30		adc $30				adc 	codePtr
.8fde	85 30		sta $30				sta 	codePtr
.8fe0	90 02		bcc $8fe4			bcc 	_CREExit
.8fe2	e6 31		inc $31				inc 	codePtr+1
.8fe4					_CREExit:
.8fe4	a0 03		ldy #$03			ldy 	#3 							; scan start position.
.8fe6	b2 30		lda ($30)			lda 	(codePtr)
.8fe8	d0 b5		bne $8f9f			bne 	_ScanLoop 					; if not zero, more to scan
.8fea	a9 13		lda #$13		lda	#19
.8fec	4c 27 90	jmp $9027		jmp	ErrorHandler
.8fef					_ScanSkipData:
.8fef	88		dey				dey 								; point at data token
.8ff0	c8		iny				iny
.8ff1	98		tya				tya
.8ff2	38		sec				sec
.8ff3	71 30		adc ($30),y			adc 	(codePtr),y
.8ff5	a8		tay				tay
.8ff6	80 a7		bra $8f9f			bra 	_ScanLoop

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/while.asm

.8ff8					Command_WHILE:
.8ff8	5a		phy				phy 								; save position of the test
.8ff9	a2 00		ldx #$00			ldx 	#0
.8ffb	20 33 9b	jsr $9b33			jsr 	EvaluateNumber 				; work out the number
.8ffe	20 0f 9c	jsr $9c0f			jsr 	NSMIsZero 					; check if zero
.9001	f0 0e		beq $9011			beq 	_WHExitLoop 				; if so exit the loop
.9003	98		tya				tya 								; position *after* test.
.9004	7a		ply				ply 								; restore position before test, at WHILE
.9005	88		dey				dey
.9006	48		pha				pha 								; push after test on the stack
.9007	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; allocate 6 bytes on the return stack.
.9009	20 93 9c	jsr $9c93			jsr 	StackOpen
.900c	20 d7 9c	jsr $9cd7			jsr 	STKSaveCodePosition 		; save loop position - where the test value is.
.900f	7a		ply				ply 								; restore the position *after* the test
.9010	60		rts				rts
.9011					_WHExitLoop:
.9011	68		pla				pla 								; throw post loop position
.9012	a9 a1		lda #$a1			lda 	#KWD_WEND 					; scan forward past WEND
.9014	aa		tax				tax
.9015	20 99 8f	jsr $8f99			jsr 	ScanForward
.9018	60		rts				rts
.9019					Command_WEND:
.9019	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; check WHILE is TOS
.901b	a2 10		ldx #$10			ldx 	#ERRID_WHILE 				; this error
.901d	20 bf 9c	jsr $9cbf			jsr 	StackCheckFrame
.9020	20 e8 9c	jsr $9ce8			jsr 	STKLoadCodePosition 		; loop back
.9023	20 b1 9c	jsr $9cb1			jsr 	StackClose		 			; erase the frame
.9026	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/charcheck.asm

.a360					CheckRightBracket:
.a360	b1 30		lda ($30),y			lda 	(codePtr),y
.a362	c8		iny				iny
.a363	c9 29		cmp #$29			cmp 	#KWD_RPAREN 						; exit if matches
.a365	d0 0f		bne $a376			bne 	CNAFail
.a367	60		rts				rts
.a368					CheckComma:
.a368	b1 30		lda ($30),y			lda 	(codePtr),y
.a36a	c8		iny				iny
.a36b	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 						; exit if matches
.a36d	d0 07		bne $a376			bne 	CNAFail
.a36f	60		rts				rts
.a370					CheckNextA:
.a370	d1 30		cmp ($30),y			cmp 	(codePtr),y
.a372	d0 02		bne $a376			bne 	CNAFail
.a374	c8		iny				iny 								; skip character
.a375	60		rts				rts 								; and exit
.a376					CNAFail:
.a376	4c 46 a9	jmp $a946			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/errors.asm

.9027					ErrorHandler:
.9027	a8		tay				tay 								; find the error text
.9028	f0 49		beq $9073			beq 	_EHEnd
.902a	a2 00		ldx #$00			ldx 	#0
.902c	a9 5f		lda #$5f			lda 	#((ErrorText) & $FF)
.902e	85 36		sta $36				sta 	0+zTemp0
.9030	a9 a9		lda #$a9			lda 	#((ErrorText) >> 8)
.9032	85 37		sta $37				sta 	1+zTemp0
.9034					_EHFind:
.9034	88		dey				dey 								; found the error text ?
.9035	f0 0e		beq $9045			beq 	_EHFound
.9037					_EHFindZero:
.9037	b2 36		lda ($36)			lda 	(zTemp0) 					; find the next error
.9039	e6 36		inc $36				inc 	zTemp0
.903b	d0 02		bne $903f			bne 	_EHFNoCarry
.903d	e6 37		inc $37				inc 	zTemp0+1
.903f					_EHFNoCarry:
.903f	c9 00		cmp #$00			cmp 	#0
.9041	d0 f4		bne $9037			bne 	_EHFindZero
.9043	80 ef		bra $9034			bra 	_EHFind
.9045					_EHFound:
.9045	a5 36		lda $36				lda 	zTemp0 						; print message
.9047	a6 37		ldx $37				ldx 	zTemp0+1
.9049	20 80 90	jsr $9080			jsr 	PrintStringXA
.904c	a0 01		ldy #$01			ldy 	#1 							; if line number zero don't print i
.904e	b1 30		lda ($30),y			lda 	(codePtr),y
.9050	d0 05		bne $9057			bne 	_EHAtMsg
.9052	c8		iny				iny
.9053	b1 30		lda ($30),y			lda 	(codePtr),y
.9055	f0 17		beq $906e			beq 	_EHCREnd
.9057					_EHAtMsg:
.9057	a2 90		ldx #$90			ldx 	#_AtMsg >> 8 				; print " at "
.9059	a9 76		lda #$76			lda 	#_AtMsg & $FF
.905b	20 80 90	jsr $9080			jsr 	PrintStringXA
.905e	a0 01		ldy #$01			ldy 	#1 							; line number into XA
.9060	b1 30		lda ($30),y			lda 	(codePtr),y
.9062	48		pha				pha
.9063	c8		iny				iny
.9064	b1 30		lda ($30),y			lda 	(codePtr),y
.9066	aa		tax				tax
.9067	68		pla				pla
.9068	20 bc a4	jsr $a4bc			jsr 	ConvertInt16 				; convert XA to string
.906b	20 80 90	jsr $9080			jsr 	PrintStringXA 				; and print it.
.906e					_EHCREnd:
.906e	a9 0d		lda #$0d			lda 	#13 						; new line
.9070	20 e9 aa	jsr $aae9			jsr 	EXTPrintCharacter
.9073					_EHEnd:
.9073	4c bf 85	jmp $85bf			jmp 	WarmStart
>9076	20 61 74 20 6c 69 6e 65		_AtMsg:	.text 	" at line ",0
>907e	20 00
.9080					PrintStringXA:
.9080	5a		phy				phy
.9081	86 37		stx $37				stx 	zTemp0+1
.9083	85 36		sta $36				sta 	zTemp0
.9085	a0 00		ldy #$00			ldy 	#0
.9087					_PSXALoop:
.9087	b1 36		lda ($36),y			lda 	(zTemp0),y
.9089	f0 06		beq $9091			beq 	_PSXAExit
.908b	20 e9 aa	jsr $aae9			jsr 	EXTPrintCharacter
.908e	c8		iny				iny
.908f	80 f6		bra $9087			bra 	_PSXALoop
.9091					_PSXAExit:
.9091	7a		ply				ply
.9092	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/compare.asm

.9093					UnaryTrue:
.9093	fa		plx				plx
.9094					ReturnTrue:
.9094	a9 01		lda #$01			lda 	#1  						; set to 1
.9096	20 e1 9b	jsr $9be1			jsr 	NSMSetByte
.9099	a9 80		lda #$80			lda 	#$80 						; set sign flag, so it is -1
.909b	9d 00 04	sta $0400,x			sta 	NSStatus,x
.909e	60		rts				rts
.909f					UnaryFalse:
.909f	fa		plx				plx
.90a0					ReturnFalse:
.90a0	4c df 9b	jmp $9bdf			jmp 	NSMSetZero 					; set it all to zero
.90a3					BinaryCompareEqual:
.90a3	fa		plx				plx
.90a4	20 df 90	jsr $90df			jsr 	CompareBaseCode
.90a7	c9 00		cmp #$00			cmp 	#0
.90a9	f0 e9		beq $9094			beq 	ReturnTrue
.90ab	80 f3		bra $90a0			bra 	ReturnFalse
.90ad					BinaryCompareLess:
.90ad	fa		plx				plx
.90ae	20 df 90	jsr $90df			jsr 	CompareBaseCode
.90b1	c9 ff		cmp #$ff			cmp 	#$FF
.90b3	f0 df		beq $9094			beq 	ReturnTrue
.90b5	80 e9		bra $90a0			bra 	ReturnFalse
.90b7					BinaryCompareGreater:
.90b7	fa		plx				plx
.90b8	20 df 90	jsr $90df			jsr 	CompareBaseCode
.90bb	c9 01		cmp #$01			cmp 	#1
.90bd	f0 d5		beq $9094			beq 	ReturnTrue
.90bf	80 df		bra $90a0			bra 	ReturnFalse
.90c1					BinaryCompareNotEqual:
.90c1	fa		plx				plx
.90c2	20 df 90	jsr $90df			jsr 	CompareBaseCode
.90c5	c9 00		cmp #$00			cmp 	#0
.90c7	d0 cb		bne $9094			bne 	ReturnTrue
.90c9	80 d5		bra $90a0			bra 	ReturnFalse
.90cb					BinaryCompareLessEqual:
.90cb	fa		plx				plx
.90cc	20 df 90	jsr $90df			jsr 	CompareBaseCode
.90cf	c9 01		cmp #$01			cmp 	#1
.90d1	d0 c1		bne $9094			bne 	ReturnTrue
.90d3	80 cb		bra $90a0			bra 	ReturnFalse
.90d5					BinaryCompareGreaterEqual:
.90d5	fa		plx				plx
.90d6	20 df 90	jsr $90df			jsr 	CompareBaseCode
.90d9	c9 ff		cmp #$ff			cmp 	#$FF
.90db	d0 b7		bne $9094			bne 	ReturnTrue
.90dd	80 c1		bra $90a0			bra 	ReturnFalse
.90df					CompareBaseCode:
.90df	20 40 95	jsr $9540			jsr 	DereferenceTopTwo 			; make both values if references.
.90e2	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if either is a string.
.90e5	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.90e8	29 10		and #$10			and 	#NSTString
.90ea	d0 40		bne $912c			bne 	_CBCString
.90ec	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check both are integers
.90ef	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.90f2	d0 3b		bne $912f			bne 	_CBCFloat
.90f4	bd 00 04	lda $0400,x			lda 	NSStatus,x
.90f7	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.90fa	29 08		and #$08			and 	#NSTFloat
.90fc	d0 31		bne $912f			bne 	_CBCFloat
.90fe	20 32 91	jsr $9132			jsr 	CompareFixMinusZero
.9101	e8		inx				inx
.9102	20 32 91	jsr $9132			jsr 	CompareFixMinusZero
.9105	ca		dex				dex
.9106	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; are the signs different ?
.9109	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.910c	10 0b		bpl $9119			bpl 	_CDCSameSign
.910e	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; if first one is -ve
.9111	30 16		bmi $9129			bmi 	_CBCLess 					; return $FF
.9113					_CBCGreater:
.9113	a9 01		lda #$01			lda 	#1
.9115	60		rts				rts
.9116					_CBCEqual:
.9116	a9 00		lda #$00			lda 	#0
.9118	60		rts				rts
.9119					_CDCSameSign:
.9119	20 42 92	jsr $9242			jsr 	SubTopTwoStack 				; unsigned subtract
.911c	20 0f 9c	jsr $9c0f			jsr 	NSMIsZero 					; or the mantissa together
.911f	f0 f5		beq $9116			beq 	_CBCEqual 					; -0 == 0
.9121	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; sign of the result. if +ve return $01 else return $FF
.9124	5d 01 04	eor $0401,x			eor 	NSStatus+1,x 				; however if both were -ve this is inverted
.9127	10 ea		bpl $9113			bpl 	_CBCGreater
.9129					_CBCLess:
.9129	a9 ff		lda #$ff			lda 	#$FF
.912b	60		rts				rts
.912c					_CBCString:
.912c	4c 98 91	jmp $9198			jmp 	CompareStrings
.912f					_CBCFloat:
.912f	4c b8 a5	jmp $a5b8			jmp 	CompareFloat
.9132					CompareFixMinusZero:
.9132	20 0f 9c	jsr $9c0f			jsr 	NSMIsZero
.9135	d0 03		bne $913a			bne 	_CFXMZNotZero
.9137	9e 00 04	stz $0400,x			stz 	NSStatus,x
.913a					_CFXMZNotZero:
.913a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/concat.asm

.913b					StringConcat:
.913b	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check both strings
.913e	3d 01 04	and $0401,x			and 	NSStatus+1,x
.9141	29 18		and #$18			and 	#NSBTypeMask
.9143	c9 10		cmp #$10			cmp 	#NSTString
.9145	d0 4e		bne $9195			bne		_SCType
.9147	64 38		stz $38				stz 	zTemp1 						; counting total length
.9149	e8		inx				inx
.914a	20 68 91	jsr $9168			jsr 	_SCSetupZ0 					; setup for second
.914d	20 73 91	jsr $9173			jsr 	_SCLengthZ0 				; length for second
.9150	ca		dex				dex
.9151	20 68 91	jsr $9168			jsr 	_SCSetupZ0 					; setup for first
.9154	20 73 91	jsr $9173			jsr 	_SCLengthZ0 				; length for first
.9157	a5 38		lda $38				lda 	zTemp1 						; allocate memory
.9159	20 6b ac	jsr $ac6b			jsr 	StringTempAllocate
.915c	20 86 91	jsr $9186			jsr 	_SCCopy 					; copy first out, using zTemp0 from above
.915f	e8		inx				inx
.9160	20 68 91	jsr $9168			jsr 	_SCSetupZ0 					; copy second out
.9163	20 86 91	jsr $9186			jsr 	_SCCopy
.9166	ca		dex				dex
.9167	60		rts				rts
.9168					_SCSetupZ0:
.9168	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.916b	85 36		sta $36				sta 	zTemp0
.916d	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9170	85 37		sta $37				sta 	zTemp0+1
.9172	60		rts				rts
.9173					_SCLengthZ0:
.9173	5a		phy				phy
.9174	a0 00		ldy #$00			ldy 	#0
.9176					_SCLenLoop:
.9176	b1 36		lda ($36),y			lda 	(zTemp0),y
.9178	f0 0a		beq $9184			beq 	_SCLExit
.917a	c8		iny				iny
.917b	e6 38		inc $38				inc 	zTemp1
.917d	10 f7		bpl $9176			bpl		_SCLenLoop
.917f	a9 09		lda #$09		lda	#9
.9181	4c 27 90	jmp $9027		jmp	ErrorHandler
.9184					_SCLExit:
.9184	7a		ply				ply
.9185	60		rts				rts
.9186					_SCCopy:
.9186	5a		phy				phy
.9187	a0 00		ldy #$00			ldy 	#0
.9189					_SCCopyLoop:
.9189	b1 36		lda ($36),y			lda 	(zTemp0),y
.918b	f0 06		beq $9193			beq 	_SCCExit
.918d	20 a9 ac	jsr $aca9			jsr 	StringTempWrite
.9190	c8		iny				iny
.9191	80 f6		bra $9189			bra 	_SCCopyLoop
.9193					_SCCExit:
.9193	7a		ply				ply
.9194	60		rts				rts
.9195					_SCType:
.9195	4c 50 a9	jmp $a950			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/divide.asm

.a379					IntegerDivide:
.a379	fa		plx				plx
.a37a	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.a37d	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.a380	0a		asl a				asl 	a 							; shift reference bit into sign bit
.a381	0a		asl a				asl 	a
.a382	10 05		bpl $a389			bpl 	_NotRef
.a384	48		pha				pha
.a385	20 40 95	jsr $9540			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.a388	68		pla				pla
.a389					_NotRef:
.a389	0a		asl a				asl 	a
.a38a	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.a38c	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.a38f	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.a392	f0 03		beq $a397			beq 	_IntegerCode 				; if clear, then we have two integers
.a394	4c 50 a9	jmp $a950			jmp 	TypeError 					; anything else, type mismatch.
.a397					_IntegerCode:
.a397	20 b9 a3	jsr $a3b9			jsr 	CheckDivideZero 			; do div zero check
.a39a	20 f1 a3	jsr $a3f1			jsr 	Int32Divide 				; do the division
.a39d	20 ae a4	jsr $a4ae			jsr 	CalculateSign 				; calculate result sign
.a3a0					NSMCopyPlusTwoToZero:
.a3a0	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.a3a3	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a3a6	bd 12 04	lda $0412,x			lda 	NSMantissa1+2,x
.a3a9	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a3ac	bd 1a 04	lda $041a,x			lda 	NSMantissa2+2,x
.a3af	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.a3b2	bd 22 04	lda $0422,x			lda 	NSMantissa3+2,x
.a3b5	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.a3b8	60		rts				rts
.a3b9					CheckDivideZero:
.a3b9	e8		inx				inx
.a3ba	20 0f 9c	jsr $9c0f			jsr 	NSMIsZero
.a3bd	f0 02		beq $a3c1			beq 	_CDVError
.a3bf	ca		dex				dex
.a3c0	60		rts				rts
.a3c1					_CDVError:
.a3c1	a9 03		lda #$03		lda	#3
.a3c3	4c 27 90	jmp $9027		jmp	ErrorHandler
.a3c6					IntegerModulus:
.a3c6	fa		plx				plx
.a3c7	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.a3ca	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.a3cd	0a		asl a				asl 	a 							; shift reference bit into sign bit
.a3ce	0a		asl a				asl 	a
.a3cf	10 05		bpl $a3d6			bpl 	_NotRef
.a3d1	48		pha				pha
.a3d2	20 40 95	jsr $9540			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.a3d5	68		pla				pla
.a3d6					_NotRef:
.a3d6	0a		asl a				asl 	a
.a3d7	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.a3d9	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.a3dc	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.a3df	f0 03		beq $a3e4			beq 	_IntegerCode 				; if clear, then we have two integers
.a3e1	4c 50 a9	jmp $a950			jmp 	TypeError 					; anything else, type mismatch.
.a3e4					_IntegerCode:
.a3e4					IntegerModulusNoCheck:
.a3e4	20 b9 a3	jsr $a3b9			jsr 	CheckDivideZero 			; do div zero check
.a3e7	20 f1 a3	jsr $a3f1			jsr 	Int32Divide 				; do the division
.a3ea	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; clear the sign bit.
.a3ed	5e 00 04	lsr $0400,x			lsr 	NSStatus,x
.a3f0	60		rts				rts
.a3f1					Int32Divide:
.a3f1	48		pha				pha 								; save AXY
.a3f2	5a		phy				phy
.a3f3	20 b6 9b	jsr $9bb6			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.a3f6	20 db 9b	jsr $9bdb			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.a3f9	a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.a3fb					_I32DivideLoop:
.a3fb	e8		inx				inx
.a3fc	e8		inx				inx
.a3fd	20 f4 9b	jsr $9bf4			jsr 	NSMShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.a400	ca		dex				dex
.a401	ca		dex				dex
.a402	20 f5 9b	jsr $9bf5			jsr 	NSMRotateLeft
.a405	20 31 a4	jsr $a431			jsr 	DivideCheckSubtract 		; check if subtract possible
.a408	90 03		bcc $a40d			bcc 	_I32DivideNoCarryIn
.a40a	fe 0a 04	inc $040a,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.a40d					_I32DivideNoCarryIn:
.a40d	88		dey				dey 								; loop round till division completed.
.a40e	d0 eb		bne $a3fb			bne 	_I32DivideLoop
.a410	7a		ply				ply 								; restore AXY and exit
.a411	68		pla				pla
.a412	60		rts				rts
.a413					Int32ShiftDivide:
.a413	48		pha				pha 								; save AY
.a414	5a		phy				phy
.a415	e8		inx				inx 								; clear S[X+2]
.a416	e8		inx				inx
.a417	20 df 9b	jsr $9bdf			jsr 	NSMSetZero
.a41a	ca		dex				dex
.a41b	ca		dex				dex
.a41c	a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.a41e					_I32SDLoop:
.a41e	20 31 a4	jsr $a431			jsr 	DivideCheckSubtract 		; check if subtract possible
.a421	e8		inx				inx
.a422	e8		inx				inx
.a423	20 f5 9b	jsr $9bf5			jsr 	NSMRotateLeft				; shift 64 bit FPA left, rotating carry in
.a426	ca		dex				dex
.a427	ca		dex				dex
.a428	20 f5 9b	jsr $9bf5			jsr 	NSMRotateLeft
.a42b	88		dey				dey 	 							; do 31 times
.a42c	d0 f0		bne $a41e			bne 	_I32SDLoop
.a42e	7a		ply				ply 								; restore AY and exit
.a42f	68		pla				pla
.a430	60		rts				rts
.a431					DivideCheckSubtract:
.a431	20 42 92	jsr $9242			jsr 	SubTopTwoStack 				; subtract Stack[X+1] from Stack[X+0]
.a434	b0 04		bcs $a43a			bcs 	_DCSExit 					; if carry set, then could do, exit
.a436	20 1c 92	jsr $921c			jsr 	AddTopTwoStack 				; add it back in
.a439	18		clc				clc 								; and return False
.a43a					_DCSExit:
.a43a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/multiply.asm

.a43b					MulInteger:
.a43b	fa		plx				plx
.a43c	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.a43f	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.a442	0a		asl a				asl 	a 							; shift reference bit into sign bit
.a443	0a		asl a				asl 	a
.a444	10 05		bpl $a44b			bpl 	_NotRef
.a446	48		pha				pha
.a447	20 40 95	jsr $9540			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.a44a	68		pla				pla
.a44b					_NotRef:
.a44b	0a		asl a				asl 	a 							; put MSB of type into A:7
.a44c	30 0b		bmi $a459			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.a44e	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.a451	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.a454	f0 06		beq $a45c			beq 	_IntegerCode 				; if clear, then we have two integers
.a456	4c 8f a6	jmp $a68f			jmp 	FloatingPointMultiply 							; otherwise at least one float.
.a459					_StringData:
.a459	4c 5a a9	jmp $a95a			jmp 	NotDoneError							; at least one string - don't know both are strings.
.a45c					_IntegerCode:
.a45c	20 69 a4	jsr $a469			jsr 	MultiplyShort
.a45f	c9 00		cmp #$00			cmp 	#0
.a461	f0 05		beq $a468			beq 	_MIExit
.a463	a9 04		lda #$04		lda	#4
.a465	4c 27 90	jmp $9027		jmp	ErrorHandler
.a468					_MIExit:
.a468	60		rts				rts
.a469					MultiplyShort:
.a469	5a		phy				phy 								; save Y
.a46a	20 b6 9b	jsr $9bb6			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.a46d	20 db 9b	jsr $9bdb			jsr 	NSMSetZeroMantissaOnly 		; set mantissa S[X] to zero
.a470	a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.a472					_I32MLoop:
.a472	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.a475	1d 12 04	ora $0412,x			ora 	NSMantissa1+2,x
.a478	1d 1a 04	ora $041a,x			ora 	NSMantissa2+2,x
.a47b	1d 22 04	ora $0422,x			ora 	NSMantissa3+2,x
.a47e	f0 28		beq $a4a8			beq 	_I32MExit 					; exit if zero
.a480	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.a483	29 01		and #$01			and 	#1
.a485	f0 0e		beq $a495			beq 	_I32MNoAdd
.a487	20 1c 92	jsr $921c			jsr 	AddTopTwoStack 				; if so add S[X+1] to S[X+0]
.a48a	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.a48d	10 06		bpl $a495			bpl 	_I32MNoAdd
.a48f					_I32ShiftRight:
.a48f	20 02 9c	jsr $9c02			jsr 	NSMShiftRight 				; shift S[X] right
.a492	c8		iny				iny 								; increment shift count
.a493	80 0a		bra $a49f			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.a495					_I32MNoAdd:
.a495	3c 21 04	bit $0421,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.a498	70 f5		bvs $a48f			bvs 	_I32ShiftRight 				; instead.
.a49a	e8		inx				inx
.a49b	20 f4 9b	jsr $9bf4			jsr 	NSMShiftLeft 				; shift additive S[X+1] left
.a49e	ca		dex				dex
.a49f					_I32MShiftUpper:
.a49f	e8		inx				inx 								; shift S[X+2] right
.a4a0	e8		inx				inx
.a4a1	20 02 9c	jsr $9c02			jsr 	NSMShiftRight
.a4a4	ca		dex				dex
.a4a5	ca		dex				dex
.a4a6	80 ca		bra $a472			bra 	_I32MLoop 					; try again.
.a4a8					_I32MExit:
.a4a8	20 ae a4	jsr $a4ae			jsr 	CalculateSign
.a4ab	98		tya				tya 								; shift in A
.a4ac	7a		ply				ply 								; restore Y and exit
.a4ad	60		rts				rts
.a4ae					CalculateSign:
.a4ae	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.a4b1	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; shift result left
.a4b4	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.a4b7	0a		asl a				asl 	a 							; shift bit 7 into carry
.a4b8	7e 00 04	ror $0400,x			ror 	NSStatus,x 					; shift right into status byte.
.a4bb	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/scompare.asm

.9198					CompareStrings:
.9198	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check both are strings
.919b	3d 01 04	and $0401,x			and 	NSStatus+1,x
.919e	29 10		and #$10			and 	#NSBIsString
.91a0	f0 2c		beq $91ce			beq 	_CSTypeError
.91a2	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy string addresses to zTemp0/1
.91a5	85 36		sta $36				sta 	zTemp0
.91a7	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.91aa	85 37		sta $37				sta 	zTemp0+1
.91ac	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.91af	85 38		sta $38				sta 	zTemp1
.91b1	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.91b4	85 39		sta $39				sta 	zTemp1+1
.91b6	5a		phy				phy 								; save Y so we can access strings
.91b7	a0 ff		ldy #$ff			ldy 	#$FF 						; -1 for pre increment.
.91b9					_CSLoop:
.91b9	c8		iny				iny
.91ba	b1 36		lda ($36),y			lda 	(zTemp0),y 					; check if they are the same
.91bc	d1 38		cmp ($38),y			cmp 	(zTemp1),y
.91be	d0 06		bne $91c6			bne 	_CSDifferent
.91c0	c9 00		cmp #$00			cmp 	#0 							; reached end ?
.91c2	d0 f5		bne $91b9			bne 	_CSLoop 					; still comparing
.91c4					_CSExit:
.91c4	7a		ply				ply 								; reached end, return zero in A from EOS
.91c5	60		rts				rts
.91c6					_CSDifferent:
.91c6	a9 ff		lda #$ff			lda 	#255 						; if < return $FF
.91c8	90 fa		bcc $91c4			bcc		_CSExit
.91ca	a9 01		lda #$01			lda 	#1 							; otherwise return 1.
.91cc	80 f6		bra $91c4			bra 	_CSExit
.91ce					_CSTypeError:
.91ce	4c 50 a9	jmp $a950			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/shifts.asm

.91d1					ShiftLeft:
.91d1	38		sec				sec
.91d2	80 01		bra $91d5			bra 	ShiftMain
.91d4					ShiftRight:
.91d4	18		clc				clc
.91d5					ShiftMain:
.91d5	fa		plx				plx 								; restore X
.91d6	08		php				php 								; save direction
.91d7	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.91da	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.91dd	0a		asl a				asl 	a 							; shift reference bit into sign bit
.91de	0a		asl a				asl 	a
.91df	10 05		bpl $91e6			bpl 	_NotRef
.91e1	48		pha				pha
.91e2	20 40 95	jsr $9540			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.91e5	68		pla				pla
.91e6					_NotRef:
.91e6	0a		asl a				asl 	a
.91e7	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.91e9	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.91ec	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.91ef	f0 03		beq $91f4			beq 	_IntegerCode 				; if clear, then we have two integers
.91f1	4c 50 a9	jmp $a950			jmp 	TypeError 					; anything else, type mismatch.
.91f4					_IntegerCode:
.91f4	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; check number < 32
.91f7	29 e0		and #$e0			and 	#$E0
.91f9	1d 11 04	ora $0411,x			ora 	NSMantissa1+1,x
.91fc	1d 19 04	ora $0419,x			ora 	NSMantissa2+1,x
.91ff	1d 21 04	ora $0421,x			ora 	NSMantissa3+1,x
.9202	d0 13		bne $9217			bne 	_SMExit0 					; if >= 32 it will always return zero.
.9204					_SMLoop:
.9204	de 09 04	dec $0409,x			dec 	NSMantissa0+1,x 			; predecrement, could do << 0
.9207	30 11		bmi $921a			bmi 	_SMExit 					; exit if done.
.9209	28		plp				plp 								; restore direcition setting
.920a	08		php				php
.920b	90 05		bcc $9212			bcc 	_SMRight
.920d	20 f4 9b	jsr $9bf4			jsr 	NSMShiftLeft 				; shift left if CS
.9210	80 f2		bra $9204			bra 	_SMLoop
.9212					_SMRight:
.9212	20 02 9c	jsr $9c02			jsr 	NSMShiftRight 				; shift right if CC
.9215	80 ed		bra $9204			bra 	_SMLoop
.9217					_SMExit0:
.9217	20 df 9b	jsr $9bdf			jsr 	NSMSetZero 					; return zero.
.921a					_SMExit:
.921a	28		plp				plp 								; throw direction
.921b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/simple.asm

.921c					AddTopTwoStack:
.921c	18		clc				clc
.921d	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9220	7d 09 04	adc $0409,x			adc 		NSMantissa0+1,x
.9223	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9226	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9229	7d 11 04	adc $0411,x			adc 		NSMantissa1+1,x
.922c	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.922f	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9232	7d 19 04	adc $0419,x			adc 		NSMantissa2+1,x
.9235	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9238	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.923b	7d 21 04	adc $0421,x			adc 		NSMantissa3+1,x
.923e	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9241	60		rts				rts
.9242					SubTopTwoStack:
.9242	38		sec				sec
.9243	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9246	fd 09 04	sbc $0409,x			sbc 		NSMantissa0+1,x
.9249	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.924c	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.924f	fd 11 04	sbc $0411,x			sbc 		NSMantissa1+1,x
.9252	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9255	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9258	fd 19 04	sbc $0419,x			sbc 		NSMantissa2+1,x
.925b	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.925e	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9261	fd 21 04	sbc $0421,x			sbc 		NSMantissa3+1,x
.9264	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9267	60		rts				rts
.9268					AddInteger:
.9268	fa		plx				plx
.9269	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.926c	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.926f	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9270	0a		asl a				asl 	a
.9271	10 05		bpl $9278			bpl 	_NotRef
.9273	48		pha				pha
.9274	20 40 95	jsr $9540			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9277	68		pla				pla
.9278					_NotRef:
.9278	0a		asl a				asl 	a 							; put MSB of type into A:7
.9279	30 0b		bmi $9286			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.927b	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.927e	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9281	f0 06		beq $9289			beq 	_IntegerCode 				; if clear, then we have two integers
.9283	4c 17 a5	jmp $a517			jmp 	FloatingPointAdd 							; otherwise at least one float.
.9286					_StringData:
.9286	4c 3b 91	jmp $913b			jmp 	StringConcat							; at least one string - don't know both are strings.
.9289					_IntegerCode:
.9289					AddCode:
.9289	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.928c	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.928f	10 8b		bpl $921c			bpl 	AddTopTwoStack
.9291	20 42 92	jsr $9242			jsr 	SubTopTwoStack 				; do a physical subtraction
.9294	3c 20 04	bit $0420,x			bit 	NSMantissa3,x 				; result is +ve, okay
.9297	10 09		bpl $92a2			bpl 	_AddExit
.9299	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; sign is that of 2nd value
.929c	9d 00 04	sta $0400,x			sta 	NSStatus,x
.929f	20 94 9b	jsr $9b94			jsr 	NSMNegateMantissa 			; negate the mantissa and exit
.92a2					_AddExit:
.92a2	60		rts				rts
.92a3					SubInteger:
.92a3	fa		plx				plx
.92a4	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.92a7	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.92aa	0a		asl a				asl 	a 							; shift reference bit into sign bit
.92ab	0a		asl a				asl 	a
.92ac	10 05		bpl $92b3			bpl 	_NotRef
.92ae	48		pha				pha
.92af	20 40 95	jsr $9540			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.92b2	68		pla				pla
.92b3					_NotRef:
.92b3	0a		asl a				asl 	a 							; put MSB of type into A:7
.92b4	30 0b		bmi $92c1			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.92b6	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.92b9	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.92bc	f0 06		beq $92c4			beq 	_IntegerCode 				; if clear, then we have two integers
.92be	4c 1c a5	jmp $a51c			jmp 	FloatingPointSub 							; otherwise at least one float.
.92c1					_StringData:
.92c1	4c 5a a9	jmp $a95a			jmp 	NotDoneError							; at least one string - don't know both are strings.
.92c4					_IntegerCode:
.92c4	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; negate the second value.
.92c7	49 80		eor #$80			eor 	#$80
.92c9	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.92cc	80 bb		bra $9289			bra 	AddCode 					; and do the same code as add.
.92ce					AndInteger:
.92ce	fa		plx				plx
.92cf	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.92d2	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.92d5	0a		asl a				asl 	a 							; shift reference bit into sign bit
.92d6	0a		asl a				asl 	a
.92d7	10 05		bpl $92de			bpl 	_NotRef
.92d9	48		pha				pha
.92da	20 40 95	jsr $9540			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.92dd	68		pla				pla
.92de					_NotRef:
.92de	0a		asl a				asl 	a
.92df	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.92e1	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.92e4	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.92e7	f0 03		beq $92ec			beq 	_IntegerCode 				; if clear, then we have two integers
.92e9	4c 50 a9	jmp $a950			jmp 	TypeError 					; anything else, type mismatch.
.92ec					_IntegerCode:
.92ec	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.92ef	3d 09 04	and $0409,x			and 		NSMantissa0+1,x
.92f2	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.92f5	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.92f8	3d 11 04	and $0411,x			and 		NSMantissa1+1,x
.92fb	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.92fe	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9301	3d 19 04	and $0419,x			and 		NSMantissa2+1,x
.9304	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9307	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.930a	3d 21 04	and $0421,x			and 		NSMantissa3+1,x
.930d	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9310	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.9313	60		rts				rts
.9314					OraInteger:
.9314	fa		plx				plx
.9315	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9318	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.931b	0a		asl a				asl 	a 							; shift reference bit into sign bit
.931c	0a		asl a				asl 	a
.931d	10 05		bpl $9324			bpl 	_NotRef
.931f	48		pha				pha
.9320	20 40 95	jsr $9540			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9323	68		pla				pla
.9324					_NotRef:
.9324	0a		asl a				asl 	a
.9325	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9327	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.932a	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.932d	f0 03		beq $9332			beq 	_IntegerCode 				; if clear, then we have two integers
.932f	4c 50 a9	jmp $a950			jmp 	TypeError 					; anything else, type mismatch.
.9332					_IntegerCode:
.9332	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9335	1d 09 04	ora $0409,x			ora 		NSMantissa0+1,x
.9338	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.933b	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.933e	1d 11 04	ora $0411,x			ora 		NSMantissa1+1,x
.9341	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9344	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9347	1d 19 04	ora $0419,x			ora 		NSMantissa2+1,x
.934a	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.934d	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9350	1d 21 04	ora $0421,x			ora 		NSMantissa3+1,x
.9353	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9356	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.9359	60		rts				rts
.935a					EorInteger:
.935a	fa		plx				plx
.935b	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.935e	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9361	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9362	0a		asl a				asl 	a
.9363	10 05		bpl $936a			bpl 	_NotRef
.9365	48		pha				pha
.9366	20 40 95	jsr $9540			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9369	68		pla				pla
.936a					_NotRef:
.936a	0a		asl a				asl 	a
.936b	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.936d	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9370	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9373	f0 03		beq $9378			beq 	_IntegerCode 				; if clear, then we have two integers
.9375	4c 50 a9	jmp $a950			jmp 	TypeError 					; anything else, type mismatch.
.9378					_IntegerCode:
.9378	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.937b	5d 09 04	eor $0409,x			eor 		NSMantissa0+1,x
.937e	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9381	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9384	5d 11 04	eor $0411,x			eor 		NSMantissa1+1,x
.9387	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.938a	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.938d	5d 19 04	eor $0419,x			eor 		NSMantissa2+1,x
.9390	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9393	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9396	5d 21 04	eor $0421,x			eor 		NSMantissa3+1,x
.9399	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.939c	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.939f	60		rts				rts
.93a0					WordIndirect:
.93a0	fa		plx				plx
.93a1	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.93a4	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.93a7	0a		asl a				asl 	a 							; shift reference bit into sign bit
.93a8	0a		asl a				asl 	a
.93a9	10 05		bpl $93b0			bpl 	_NotRef
.93ab	48		pha				pha
.93ac	20 40 95	jsr $9540			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.93af	68		pla				pla
.93b0					_NotRef:
.93b0	0a		asl a				asl 	a
.93b1	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.93b3	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.93b6	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.93b9	f0 03		beq $93be			beq 	_IntegerCode 				; if clear, then we have two integers
.93bb	4c 50 a9	jmp $a950			jmp 	TypeError 					; anything else, type mismatch.
.93be					_IntegerCode:
.93be	20 89 92	jsr $9289			jsr 	AddCode 					; add the two values
.93c1	a9 22		lda #$22			lda 	#NSBIsReference+2 			; make a 2 byte reference
.93c3	9d 00 04	sta $0400,x			sta 	NSStatus,x
.93c6	60		rts				rts
.93c7					ByteIndirect:
.93c7	fa		plx				plx
.93c8	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.93cb	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.93ce	0a		asl a				asl 	a 							; shift reference bit into sign bit
.93cf	0a		asl a				asl 	a
.93d0	10 05		bpl $93d7			bpl 	_NotRef
.93d2	48		pha				pha
.93d3	20 40 95	jsr $9540			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.93d6	68		pla				pla
.93d7					_NotRef:
.93d7	0a		asl a				asl 	a
.93d8	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.93da	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.93dd	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.93e0	f0 03		beq $93e5			beq 	_IntegerCode 				; if clear, then we have two integers
.93e2	4c 50 a9	jmp $a950			jmp 	TypeError 					; anything else, type mismatch.
.93e5					_IntegerCode:
.93e5	20 89 92	jsr $9289			jsr 	AddCode 					; add the two values
.93e8	a9 21		lda #$21			lda 	#NSBIsReference+1 			; make a 1 byte reference
.93ea	9d 00 04	sta $0400,x			sta 	NSStatus,x
.93ed	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/tostring.asm

.a4bc					ConvertInt16:
.a4bc	8d 08 04	sta $0408			sta 	NSMantissa0 				; set up as 32 bit conversion
.a4bf	8e 10 04	stx $0410			stx 	NSMantissa1
.a4c2	9c 18 04	stz $0418			stz 	NSMantissa2
.a4c5	9c 20 04	stz $0420			stz 	NSMantissa3
.a4c8	9c 00 04	stz $0400			stz 	NSStatus 					; positive integer
.a4cb	a2 00		ldx #$00			ldx 	#0 							; stack level
.a4cd	a9 0a		lda #$0a			lda 	#10 						; base
.a4cf	80 00		bra $a4d1			bra 	ConvertInt32
.a4d1					ConvertInt32:
.a4d1	5a		phy				phy
.a4d2	a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.a4d4	2c 00 04	bit $0400			bit 	NSStatus 					; output a - if not negative.
.a4d7	10 08		bpl $a4e1			bpl 	_CI32NotNeg
.a4d9	48		pha				pha
.a4da	a9 2d		lda #$2d			lda 	#'-'
.a4dc	99 f7 05	sta $05f7,y			sta 	NumberBuffer,y
.a4df	c8		iny				iny
.a4e0	68		pla				pla
.a4e1					_CI32NotNeg:
.a4e1	20 ef a4	jsr $a4ef			jsr 	_CI32DivideConvert 			; recursive conversion
.a4e4	a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.a4e6	99 f7 05	sta $05f7,y			sta 	NumberBuffer,y
.a4e9	7a		ply				ply
.a4ea	a2 05		ldx #$05			ldx 	#NumberBuffer >> 8
.a4ec	a9 f7		lda #$f7			lda 	#NumberBuffer & $FF
.a4ee	60		rts				rts
.a4ef					_CI32DivideConvert:
.a4ef	e8		inx				inx 								; write to next slot up
.a4f0	20 e1 9b	jsr $9be1			jsr 	NSMSetByte
.a4f3	ca		dex				dex
.a4f4	20 f1 a3	jsr $a3f1			jsr 	Int32Divide 				; divide
.a4f7	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; save remainder
.a4fa	48		pha				pha
.a4fb	20 a0 a3	jsr $a3a0			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.a4fe	20 0f 9c	jsr $9c0f			jsr 	NSMIsZero 					; is it zero ?
.a501	f0 06		beq $a509			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.a503	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.a506	20 ef a4	jsr $a4ef			jsr 	_CI32DivideConvert 			; and recusrively call.
.a509					_CI32NoRecurse:
.a509	68		pla				pla 								; remainder
.a50a	c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII
.a50c	90 02		bcc $a510			bcc 	_CI32NotHex
.a50e	69 26		adc #$26			adc 	#6+32
.a510					_CI32NotHex:
.a510	69 30		adc #$30			adc 	#48
.a512	99 f7 05	sta $05f7,y			sta 	NumberBuffer,y 				; write out and exit
.a515	c8		iny				iny
.a516	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/expression.asm


;******  Processing file: ./common/expressions/../generated/precedence.dat

.93ee					PrecedenceLevel:
>93ee	04					.byte	 4	; $00 <<
>93ef	02					.byte	 2	; $01 <=
>93f0	02					.byte	 2	; $02 <>
>93f1	00					.byte	 0	; $03 !!3
>93f2	00					.byte	 0	; $04 ><
>93f3	02					.byte	 2	; $05 >=
>93f4	04					.byte	 4	; $06 >>
>93f5	00					.byte	 0	; $07 !!7
>93f6	00					.byte	 0	; $08 !!8
>93f7	00					.byte	 0	; $09 !!9
>93f8	00					.byte	 0	; $0a !!10
>93f9	00					.byte	 0	; $0b !!11
>93fa	00					.byte	 0	; $0c !!12
>93fb	00					.byte	 0	; $0d !!13
>93fc	00					.byte	 0	; $0e !!14
>93fd	00					.byte	 0	; $0f !!15
>93fe	00					.byte	 0	; $10 @
>93ff	00					.byte	 0	; $11 !!17
>9400	00					.byte	 0	; $12 !!18
>9401	00					.byte	 0	; $13 [
>9402	04					.byte	 4	; $14 \
>9403	00					.byte	 0	; $15 ]
>9404	01					.byte	 1	; $16 ^
>9405	00					.byte	 0	; $17 _
>9406	00					.byte	 0	; $18 `
>9407	00					.byte	 0	; $19 !!25
>9408	00					.byte	 0	; $1a !!26
>9409	00					.byte	 0	; $1b {
>940a	01					.byte	 1	; $1c |
>940b	00					.byte	 0	; $1d }
>940c	00					.byte	 0	; $1e ~
>940d	00					.byte	 0	; $1f [7m<7F>[m
>940e	00					.byte	 0	; $20
>940f	05					.byte	 5	; $21 !
>9410	00					.byte	 0	; $22 "
>9411	00					.byte	 0	; $23 #
>9412	05					.byte	 5	; $24 $
>9413	04					.byte	 4	; $25 %
>9414	01					.byte	 1	; $26 &
>9415	00					.byte	 0	; $27 '
>9416	00					.byte	 0	; $28 (
>9417	00					.byte	 0	; $29 )
>9418	04					.byte	 4	; $2a *
>9419	03					.byte	 3	; $2b +
>941a	00					.byte	 0	; $2c ,
>941b	03					.byte	 3	; $2d -
>941c	00					.byte	 0	; $2e .
>941d	04					.byte	 4	; $2f /
>941e	00					.byte	 0	; $30 0
>941f	00					.byte	 0	; $31 1
>9420	00					.byte	 0	; $32 2
>9421	00					.byte	 0	; $33 3
>9422	00					.byte	 0	; $34 4
>9423	00					.byte	 0	; $35 5
>9424	00					.byte	 0	; $36 6
>9425	00					.byte	 0	; $37 7
>9426	00					.byte	 0	; $38 8
>9427	00					.byte	 0	; $39 9
>9428	00					.byte	 0	; $3a :
>9429	00					.byte	 0	; $3b ;
>942a	02					.byte	 2	; $3c <
>942b	02					.byte	 2	; $3d =
>942c	02					.byte	 2	; $3e >
>942d	05					.byte	 5	; $3f ?

;******  Return to file: ./common/expressions/expression.asm

.942e					EvaluateExpressionAt0:
.942e	a2 00		ldx #$00			ldx 	#0 							; bottom stack level
.9430					EvaluateExpression:
.9430	a9 00		lda #$00			lda 	#0 							; lowest precedence level
.9432					EvaluateExpressionAtPrecedence:
.9432	48		pha				pha 								; save precedence level
.9433	20 01 97	jsr $9701			jsr 	EvaluateTerm 				; evaluate term into level X.
.9436	68		pla				pla 								; restore precedence level.
.9437					_EXPRLoop:
.9437	85 36		sta $36				sta 	zTemp0 						; save current precedence level.
.9439	b1 30		lda ($30),y			lda 	(codePtr),y
.943b	c9 40		cmp #$40			cmp		#$40 						; if >= $40 cannot be an operator
.943d	b0 25		bcs $9464			bcs 	_EXPRExit
.943f	da		phx				phx 								; read the operator precedence
.9440	aa		tax				tax
.9441	bd ee 93	lda $93ee,x			lda 	PrecedenceLevel,x
.9444	fa		plx				plx
.9445	c9 00		cmp #$00			cmp 	#0							; if zero exit (not an operator)
.9447	f0 1b		beq $9464			beq 	_EXPRExit
.9449	85 37		sta $37				sta 	zTemp0+1 					; save operator precedence level.
.944b	a5 36		lda $36				lda 	zTemp0 						; compare current precedence vs. operator precedence
.944d	c5 37		cmp $37				cmp 	zTemp0+1
.944f	b0 13		bcs $9464			bcs		_EXPRExit 					; if current >= operator exit
.9451	48		pha				pha 								; save current precedence.
.9452	b1 30		lda ($30),y			lda 	(codePtr),y
.9454	c8		iny				iny
.9455	48		pha				pha
.9456	a5 37		lda $37				lda 	zTemp0+1 					; get operator precedence level
.9458	e8		inx				inx 								; work out the right hand side.
.9459	20 32 94	jsr $9432			jsr 	EvaluateExpressionAtPrecedence
.945c	ca		dex				dex
.945d	68		pla				pla 								; get operator, call the code.
.945e	20 67 94	jsr $9467			jsr 	_EXPRCaller
.9461	68		pla				pla 								; restore precedence level
.9462	80 d3		bra $9437			bra 	_EXPRLoop 					; and go round.
.9464					_EXPRExit:
.9464	a5 36		lda $36				lda 	zTemp0 						; A = current precedence level.
.9466	60		rts				rts
.9467					_EXPRCaller:
.9467	da		phx				phx 								; save on stack, first thing is to restore it
.9468	0a		asl a				asl 	a 							; double so can use vectors into X
.9469	aa		tax				tax
.946a	7c 6e 8c	jmp ($8c6e,x)			jmp 	(VectorSetPunc,x) 			; and go to the code.

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/addsub.asm

.a517					FloatingPointAdd:
.a517	20 b8 a6	jsr $a6b8			jsr 	FloatPrepare 				; prepare for floats
.a51a	80 0b		bra $a527			bra 	FloatAdd
.a51c					FloatingPointSub:
.a51c	20 b8 a6	jsr $a6b8			jsr 	FloatPrepare 				; prepare for floats
.a51f					FloatSubtract:
.a51f	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; negate FPB
.a522	49 80		eor #$80			eor 	#$80
.a524	9d 01 04	sta $0401,x			sta 	NSStatus+1,x				; and fall through.
.a527					FloatAdd:
.a527	48		pha				pha
.a528	5a		phy				phy
.a529	20 c9 a6	jsr $a6c9			jsr 	NSNormalise 				; normalise S[X]
.a52c	f0 54		beq $a582			beq 	_FAReturn1
.a52e	e8		inx				inx 								; normalise S[X+1]
.a52f	20 c9 a6	jsr $a6c9			jsr 	NSNormalise
.a532	ca		dex				dex
.a533	c9 00		cmp #$00			cmp 	#0
.a535	f0 6f		beq $a5a6			beq 	_FAExit 					; if so, just return A
.a537	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; are the exponents the same ?
.a53a	dd 29 04	cmp $0429,x			cmp 	NSExponent+1,x
.a53d	f0 1b		beq $a55a			beq 	_FAExponentsEqual
.a53f	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; work out the larger exponent
.a542	a8		tay				tay
.a543	38		sec				sec 								; do a signed comparison of the exponents.
.a544	fd 29 04	sbc $0429,x			sbc 	NSExponent+1,x
.a547	50 02		bvc $a54b			bvc 	_FANoSignedChange
.a549	49 80		eor #$80			eor 	#$80
.a54b					_FANoSignedChange:
.a54b	29 80		and #$80			and 	#$80
.a54d	10 03		bpl $a552			bpl 	_FAHaveMax
.a54f	bc 29 04	ldy $0429,x			ldy 	NSExponent+1,x
.a552					_FAHaveMax:
.a552	20 a9 a5	jsr $a5a9			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.a555	e8		inx				inx
.a556	20 a9 a5	jsr $a5a9			jsr 	_FAShiftToExponent
.a559	ca		dex				dex
.a55a					_FAExponentsEqual:
.a55a	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; are the signs the same
.a55d	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.a560	30 10		bmi $a572			bmi 	_FADifferentSigns
.a562	20 1c 92	jsr $921c			jsr 	AddTopTwoStack 				; do the add of the mantissae
.a565	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.a568	10 3c		bpl $a5a6			bpl 	_FAExit 					; if no, we are done.
.a56a	20 02 9c	jsr $9c02			jsr 	NSMShiftRight 				; shift A right, renormalising it.
.a56d	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; bump the exponent and exit
.a570	80 34		bra $a5a6			bra 	_FAExit
.a572					_FADifferentSigns:
.a572	20 42 92	jsr $9242			jsr 	SubTopTwoStack 				; subtract mantissa B from A
.a575	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; is the result negative ?
.a578	10 2c		bpl $a5a6			bpl 	_FAExit 					; if no, we are done.
.a57a	20 8b 9b	jsr $9b8b			jsr 	NSMNegate 					; netate result
.a57d	20 94 9b	jsr $9b94			jsr 	NSMNegateMantissa 			; negate (2'c) the mantissa
.a580	80 24		bra $a5a6			bra 	_FAExit
.a582					_FAReturn1:
.a582	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.a585	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a588	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.a58b	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a58e	bd 19 04	lda $0419,x			lda 	NSMantissa2+1,x
.a591	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.a594	bd 21 04	lda $0421,x			lda 	NSMantissa3+1,x
.a597	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.a59a	bd 29 04	lda $0429,x			lda 	NSExponent+1,x
.a59d	9d 28 04	sta $0428,x			sta 	NSExponent,x
.a5a0	bd 01 04	lda $0401,x			lda 	NSStatus+1,x
.a5a3	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a5a6					_FAExit:
.a5a6	7a		ply				ply
.a5a7	68		pla				pla
.a5a8	60		rts				rts
.a5a9					_FAShiftToExponent:
.a5a9					_FAShiftToExponent2:
.a5a9	98		tya				tya 								; compare Y to exponent
.a5aa	dd 28 04	cmp $0428,x			cmp 	NSExponent,x 				; reached the exponent required ?
.a5ad	f0 08		beq $a5b7			beq 	_FASEExit 					; exit if so.
.a5af	20 02 9c	jsr $9c02			jsr 	NSMShiftRight	 			; shift the mantissa right
.a5b2	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; increment exponent
.a5b5	80 f2		bra $a5a9			bra 	_FAShiftToExponent2
.a5b7					_FASEExit:
.a5b7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/compare.asm

.a5b8					CompareFloat:
.a5b8	20 1f a5	jsr $a51f			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.a5bb	bd 10 04	lda $0410,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.a5be	29 f8		and #$f8			and 	#$F8
.a5c0	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.a5c3	1d 20 04	ora $0420,x			ora 	NSMantissa3,x
.a5c6	f0 09		beq $a5d1			beq 	_FCExit 					; zero, so approximately identical
.a5c8	a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.a5ca	3c 00 04	bit $0400,x			bit 	NSStatus,x
.a5cd	10 02		bpl $a5d1			bpl 	_FCExit
.a5cf					_FCNegative:
.a5cf	a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.a5d1					_FCExit:
.a5d1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/divide.asm

.a5d2					FDivideCommand:
.a5d2	fa		plx				plx	 								; restore stack position
.a5d3	20 b8 a6	jsr $a6b8			jsr 	FloatPrepare 				; prepare for floats
.a5d6					FloatDivide:
.a5d6	48		pha				pha
.a5d7	e8		inx				inx
.a5d8	20 c9 a6	jsr $a6c9			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.a5db	ca		dex				dex
.a5dc	c9 00		cmp #$00			cmp 	#0
.a5de	f0 20		beq $a600			beq 	_FDZero
.a5e0	20 c9 a6	jsr $a6c9			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.a5e3	f0 19		beq $a5fe			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.a5e5	20 13 a4	jsr $a413			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.a5e8	20 a0 a3	jsr $a3a0			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.a5eb	20 c9 a6	jsr $a6c9			jsr		NSNormalise 				; renormalise
.a5ee	20 ae a4	jsr $a4ae			jsr 	CalculateSign 				; calculate result sign
.a5f1	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; calculate exponent
.a5f4	38		sec				sec
.a5f5	fd 29 04	sbc $0429,x			sbc 	NSExponent+1,x
.a5f8	38		sec				sec
.a5f9	e9 1e		sbc #$1e			sbc 	#30
.a5fb	9d 28 04	sta $0428,x			sta 	NSExponent,x
.a5fe					_FDExit:
.a5fe	68		pla				pla
.a5ff	60		rts				rts
.a600					_FDZero:
.a600	a9 03		lda #$03		lda	#3
.a602	4c 27 90	jmp $9027		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/fractional.asm

.a605					FloatFractionalPart:
.a605	5a		phy				phy
.a606	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; take absolute value
.a609	29 7f		and #$7f			and 	#$7F
.a60b	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a60e	20 c9 a6	jsr $a6c9			jsr 	NSNormalise
.a611	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.a614	38		sec				sec
.a615	e9 e0		sbc #$e0			sbc 	#$E0
.a617	90 31		bcc $a64a			bcc 	_FFPExit 					; already fractional
.a619	c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.a61b	b0 2a		bcs $a647			bcs 	_FFPZero
.a61d	a8		tay				tay 								; put count to do in Y
.a61e	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; do each in turn.
.a621	20 4c a6	jsr $a64c			jsr 	_FFPPartial
.a624	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.a627	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.a62a	20 4c a6	jsr $a64c			jsr 	_FFPPartial
.a62d	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.a630	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a633	20 4c a6	jsr $a64c			jsr 	_FFPPartial
.a636	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a639	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.a63c	20 4c a6	jsr $a64c			jsr 	_FFPPartial
.a63f	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a642	20 0f 9c	jsr $9c0f			jsr 	NSMIsZero 					; zeroed check.
.a645	d0 03		bne $a64a			bne 	_FFPExit
.a647					_FFPZero:
.a647	20 df 9b	jsr $9bdf			jsr 	NSMSetZero
.a64a					_FFPExit:
.a64a	7a		ply				ply
.a64b	60		rts				rts
.a64c					_FFPPartial:
.a64c	c0 00		cpy #$00			cpy 	#0 							; no more to do
.a64e	f0 17		beq $a667			beq 	_FFFPPExit
.a650	c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.a652	b0 0c		bcs $a660			bcs 	_FFFPPWholeByte
.a654	5a		phy				phy
.a655					_FFFPPLeft:
.a655	0a		asl a				asl 	a
.a656	88		dey				dey
.a657	d0 fc		bne $a655			bne 	_FFFPPLeft
.a659	7a		ply				ply
.a65a					_FFFPPRight:
.a65a	4a		lsr a				lsr 	a
.a65b	88		dey				dey
.a65c	d0 fc		bne $a65a			bne 	_FFFPPRight
.a65e	80 07		bra $a667			bra 	_FFFPPExit
.a660					_FFFPPWholeByte:
.a660	98		tya				tya 								; subtract 8 from count
.a661	38		sec				sec
.a662	e9 08		sbc #$08			sbc 	#8
.a664	a8		tay				tay
.a665	a9 00		lda #$00			lda 	#0 							; and clear all
.a667					_FFFPPExit:
.a667	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/integer.asm

.a668					FloatIntegerPart:
.a668	48		pha				pha
.a669	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; is it integer already ?
.a66c	f0 1f		beq $a68d			beq 	_FIPExit 					; if so do nothing
.a66e	20 0f 9c	jsr $9c0f			jsr 	NSMIsZero 					; is it zero ?
.a671	f0 17		beq $a68a			beq 	_FIPZero 					; if so return zero.
.a673	20 c9 a6	jsr $a6c9			jsr 	NSNormalise 				; normalise
.a676	f0 12		beq $a68a			beq 	_FIPZero 					; normalised to zero, exit zero
.a678					_FIPShift:
.a678	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.a67b	10 08		bpl $a685			bpl 	_FIPCheckZero
.a67d	20 02 9c	jsr $9c02			jsr 	NSMShiftRight 				; shift mantissa right
.a680	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; bump exponent
.a683	80 f3		bra $a678			bra 	_FIPShift
.a685					_FIPCheckZero:
.a685	20 0f 9c	jsr $9c0f			jsr 	NSMIsZero 					; avoid -0 problem
.a688	d0 03		bne $a68d			bne 	_FIPExit 					; set to zero if mantissa zero.
.a68a					_FIPZero:
.a68a	20 df 9b	jsr $9bdf			jsr 	NSMSetZero
.a68d					_FIPExit:
.a68d	68		pla				pla
.a68e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/multiply.asm

.a68f					FloatingPointMultiply:
.a68f	20 b8 a6	jsr $a6b8			jsr 	FloatPrepare 				; prepare for floats
.a692					FloatMultiply:
.a692	48		pha				pha
.a693	20 c9 a6	jsr $a6c9			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.a696	f0 1b		beq $a6b3			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.a698	e8		inx				inx
.a699	20 c9 a6	jsr $a6c9			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.a69c	ca		dex				dex
.a69d	c9 00		cmp #$00			cmp 	#0
.a69f	f0 0f		beq $a6b0			beq 	_FDSetZero
.a6a1	20 69 a4	jsr $a469			jsr 	MultiplyShort 				; calculate the result.
.a6a4	7d 28 04	adc $0428,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.a6a7	18		clc				clc
.a6a8	7d 29 04	adc $0429,x			adc 	NSExponent+1,x
.a6ab	9d 28 04	sta $0428,x			sta 	NSExponent,x
.a6ae	80 03		bra $a6b3			bra 	_FDExit
.a6b0					_FDSetZero:
.a6b0	20 df 9b	jsr $9bdf			jsr 	NSMSetZero 					; return 0
.a6b3					_FDExit:
.a6b3	20 c9 a6	jsr $a6c9			jsr 	NSNormalise 				; normalise the result
.a6b6	68		pla				pla
.a6b7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/utility.asm

.a6b8					FloatPrepare:
.a6b8	20 40 95	jsr $9540			jsr 	DereferenceTopTwo 			; dereference the top two values
.a6bb	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check ints/floats
.a6be	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.a6c1	29 10		and #$10			and 	#NSBIsString
.a6c3	d0 01		bne $a6c6			bne 	_FDType
.a6c5	60		rts				rts
.a6c6					_FDType:
.a6c6	4c 50 a9	jmp $a950			jmp 	TypeError
.a6c9					NSNormalise:
.a6c9	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; make float, keep sign
.a6cc	29 80		and #$80			and 	#$80
.a6ce	09 08		ora #$08			ora 	#NSTFloat
.a6d0	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a6d3	20 0f 9c	jsr $9c0f			jsr 	NSMIsZero 					; if zero exit
.a6d6	d0 09		bne $a6e1			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.a6d8	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; clear the sign bit.
.a6db	7e 00 04	ror $0400,x			ror 	NSStatus,x 					; (no -0)
.a6de	a9 00		lda #$00			lda 	#0 							; set Z flag
.a6e0	60		rts				rts
.a6e1					_NSNormaliseOptimise:
.a6e1	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; upper byte zero ?
.a6e4	d0 22		bne $a708			bne 	_NSNormaliseLoop
.a6e6	bd 18 04	lda $0418,x			lda 	NSMantissa2,x 				; byte normalise
.a6e9	30 1d		bmi $a708			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.a6eb	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.a6ee	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a6f1	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.a6f4	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.a6f7	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a6fa	9e 08 04	stz $0408,x			stz 	NSMantissa0,x
.a6fd	bd 28 04	lda $0428,x			lda 	NSExponent,x
.a700	38		sec				sec
.a701	e9 08		sbc #$08			sbc 	#8
.a703	9d 28 04	sta $0428,x			sta 	NSExponent,x
.a706	80 d9		bra $a6e1			bra 	_NSNormaliseOptimise
.a708					_NSNormaliseLoop:
.a708	3c 20 04	bit $0420,x			bit 	NSMantissa3,x 				; bit 30 set ?
.a70b	70 08		bvs $a715			bvs 	_NSNExit 					; exit if so with Z flag clear
.a70d	20 f4 9b	jsr $9bf4			jsr 	NSMShiftLeft 				; shift mantissa left
.a710	de 28 04	dec $0428,x			dec 	NSExponent,x 				; adjust exponent
.a713	80 f3		bra $a708			bra 	_NSNormaliseLoop
.a715					_NSNExit:
.a715	a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.a717	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignnumber.asm

.946d					AssignNumber:
.946d	5a		phy				phy
.946e	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy mantissa0/1 to zTemp0
.9471	85 36		sta $36				sta 	zTemp0
.9473	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9476	85 37		sta $37				sta 	zTemp0+1
.9478	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; clear reference bits
.947b	29 df		and #$df			and 	#(NSBIsReference ^ $FF)
.947d	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9480	29 18		and #$18			and 	#NSBTypeMask				; assigning to a float ?
.9482	c9 08		cmp #$08			cmp 	#NSTFloat
.9484	f0 2a		beq $94b0			beq 	_ANFloat
.9486	bd 29 04	lda $0429,x			lda		NSExponent+1,x 				; is it a float
.9489	f0 05		beq $9490			beq		_ANNotFloat
.948b	e8		inx				inx
.948c	20 68 a6	jsr $a668			jsr 	FloatIntegerPart 			; make it an integer
.948f	ca		dex				dex
.9490					_ANNotFloat:
.9490	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if byte/word reference.
.9493	29 03		and #$03			and 	#3
.9495	d0 05		bne $949c			bne 	_ANByteWord
.9497	20 bc 94	jsr $94bc			jsr 	_ANCopy4PackSign 			; copy all 4 bytes and sign
.949a	80 1e		bra $94ba			bra 	_ANExit
.949c					_ANByteWord:
.949c	48		pha				pha 								; save count
.949d	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; do byte
.94a0	92 36		sta ($36)			sta 	(zTemp0)
.94a2	68		pla				pla
.94a3	c9 01		cmp #$01			cmp	 	#1
.94a5	f0 13		beq $94ba			beq 	_ANExit
.94a7	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x 			; do word
.94aa	a0 01		ldy #$01			ldy 	#1
.94ac	91 36		sta ($36),y			sta 	(zTemp0),y
.94ae	80 0a		bra $94ba			bra 	_ANExit
.94b0					_ANFloat:
.94b0	20 bc 94	jsr $94bc			jsr 	_ANCopy4PackSign 			; write all 4 bytes and packed sign
.94b3	bd 29 04	lda $0429,x			lda 	NSExponent+1,x 				; copy exponent to slot 4
.94b6	a0 04		ldy #$04			ldy 	#4
.94b8	91 36		sta ($36),y			sta 	(zTemp0),y
.94ba					_ANExit:
.94ba	7a		ply				ply
.94bb	60		rts				rts
.94bc					_ANCopy4PackSign:
.94bc	a0 03		ldy #$03			ldy 	#3
.94be	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; sign bit into status
.94c1	29 80		and #$80			and 	#$80 						; put into high bit of mantissa 3
.94c3	1d 21 04	ora $0421,x			ora 	NSMantissa3+1,x
.94c6	91 36		sta ($36),y			sta 	(zTemp0),y
.94c8	88		dey				dey
.94c9	bd 19 04	lda $0419,x			lda 	NSMantissa2+1,x
.94cc	91 36		sta ($36),y			sta 	(zTemp0),y
.94ce	88		dey				dey
.94cf	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.94d2	91 36		sta ($36),y			sta 	(zTemp0),y
.94d4	88		dey				dey
.94d5	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.94d8	91 36		sta ($36),y			sta 	(zTemp0),y
.94da	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignstring.asm

.94db					AssignString:
.94db	5a		phy				phy
.94dc	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.94df	85 38		sta $38				sta 	zTemp1
.94e1	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.94e4	85 39		sta $39				sta 	zTemp1+1
.94e6	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.94e9	85 36		sta $36				sta 	zTemp0
.94eb	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.94ee	85 37		sta $37				sta 	zTemp0+1
.94f0	a0 01		ldy #$01			ldy 	#1 							; the high byte of the target address
.94f2	b1 36		lda ($36),y			lda 	(zTemp0),y
.94f4	f0 23		beq $9519			beq 	_ASNewStringRequired 		; if zero, a new string is required.
.94f6	38		sec				sec 								; put Address-2 in zsTemp - this is the size/status/string record
.94f7	b2 36		lda ($36)			lda 	(zTemp0) 					; of concreted strings
.94f9	e9 02		sbc #$02			sbc 	#2
.94fb	85 3c		sta $3c				sta 	zsTemp
.94fd	a0 01		ldy #$01			ldy 	#1
.94ff	b1 36		lda ($36),y			lda 	(zTemp0),y
.9501	e9 00		sbc #$00			sbc 	#0
.9503	85 3d		sta $3d				sta 	zsTemp+1
.9505	a0 ff		ldy #$ff			ldy 	#$FF 						; get length of new string
.9507					_ASGetLength:
.9507	c8		iny				iny
.9508	b1 38		lda ($38),y			lda 	(zTemp1),y
.950a	d0 fb		bne $9507			bne 	_ASGetLength
.950c	98		tya				tya 								; is this length <= current length
.950d	d2 3c		cmp ($3c)			cmp 	(zsTemp)
.950f	90 20		bcc $9531			bcc 	_ASCopyString
.9511	f0 1e		beq $9531			beq 	_ASCopyString
.9513	a9 80		lda #$80			lda 	#$80 						; mark as unused.
.9515	a0 01		ldy #$01			ldy 	#1
.9517	91 3c		sta ($3c),y			sta 	(zsTemp),y
.9519					_ASNewStringRequired:
.9519	e8		inx				inx 								; concrete the new string.
.951a	20 ea ab	jsr $abea			jsr 	StringConcrete				; (breaks zTemp1/2, not zTemp0 and zsTemp)
.951d	ca		dex				dex
.951e	18		clc				clc
.951f	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; copy that new address to the reference.
.9522	69 02		adc #$02			adc 	#2 							; add two to point at the data.
.9524	92 36		sta ($36)			sta 	(zTemp0)
.9526	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9529	69 00		adc #$00			adc 	#0
.952b	a0 01		ldy #$01			ldy 	#1
.952d	91 36		sta ($36),y			sta 	(zTemp0),y
.952f	80 0d		bra $953e			bra 	_ASExit
.9531					_ASCopyString:
.9531	a0 00		ldy #$00			ldy 	#0
.9533					_ASCopyLoop:
.9533	b1 38		lda ($38),y			lda 	(zTemp1),y
.9535	c8		iny				iny
.9536	c8		iny				iny
.9537	91 3c		sta ($3c),y			sta 	(zsTemp),y
.9539	88		dey				dey
.953a	c9 00		cmp #$00			cmp 	#0
.953c	d0 f5		bne $9533			bne 	_ASCopyLoop
.953e					_ASExit:
.953e	7a		ply				ply
.953f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/dereference.asm

.9540					DereferenceTopTwo:
.9540	e8		inx				inx
.9541	20 45 95	jsr $9545			jsr 	Dereference 				; deref x+1
.9544	ca		dex				dex  								; falls through to deref x
.9545					Dereference:
.9545	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get the status byte
.9548	29 20		and #$20			and 	#NSBIsReference 			; shift sign bit to carry, reference to bit 7
.954a	f0 57		beq $95a3			beq 	_DRFExit 					; not a reference
.954c	5a		phy				phy
.954d	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address to dereference into zTemp0
.9550	85 36		sta $36				sta 	zTemp0
.9552	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9555	85 37		sta $37				sta 	zTemp0+1
.9557	9e 10 04	stz $0410,x			stz 	NSMantissa1,x 				; clear second byte.
.955a	b2 36		lda ($36)			lda 	(zTemp0) 					; do the first byte
.955c	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.955f	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get status byte.
.9562	29 18		and #$18			and 	#NSBTypeMask 				; what type is it ?
.9564	c9 10		cmp #$10			cmp 	#NSTString 					; if string, dereference two
.9566	f0 0f		beq $9577			beq 	_DRFDereferenceTwo
.9568	c9 08		cmp #$08			cmp 	#NSTFloat 					; if float, do full dereference.
.956a	f0 39		beq $95a5			beq 	_DRFFull
.956c	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be integer - how many bytes ?
.956f	29 03		and #$03			and 	#3
.9571	f0 32		beq $95a5			beq 	_DRFFull 					; the whole word
.9573	c9 01		cmp #$01			cmp 	#1 							; is it 10 (e.g. 2 bytes)
.9575	f0 07		beq $957e			beq		_DRFClear23 				; no, one byte, clear 2 & 3 and exit
.9577					_DRFDereferenceTwo:
.9577	a0 01		ldy #$01			ldy 	#1
.9579	b1 36		lda ($36),y			lda 	(zTemp0),y
.957b	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.957e					_DRFClear23:
.957e	9e 18 04	stz $0418,x			stz 	NSMantissa2,x 				; clear upper bytes, only read 1 or 2 bytes
.9581	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.9584	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; make it a value of that type.
.9587	29 18		and #$18			and 	#NSBTypeMask
.9589	9d 00 04	sta $0400,x			sta 	NSStatus,x
.958c	c9 10		cmp #$10			cmp 	#NSTString  				; is it a string
.958e	d0 12		bne $95a2			bne 	_DRFNotString
.9590	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; check address is zero
.9593	1d 10 04	ora $0410,x			ora 	NSMantissa1,x
.9596	d0 0a		bne $95a2			bne 	_DRFNotString
.9598	a9 a4		lda #$a4			lda 	#_DRFNullString & $FF 		; if so, return reference to ""
.959a	9d 08 04	sta $0408,x			sta 	NSMantissa0,X
.959d	a9 95		lda #$95			lda 	#_DRFNullString >> 8
.959f	9d 10 04	sta $0410,x			sta 	NSMantissa1,X
.95a2					_DRFNotString
.95a2	7a		ply				ply 								; restore Y and exit
.95a3					_DRFExit:
.95a3	60		rts				rts
.95a4					_DRFNullString:
>95a4	00						.byte 	0
.95a5					_DRFFull:
.95a5	a0 01		ldy #$01			ldy 	#1 							; get remaining 3 bytes.
.95a7	b1 36		lda ($36),y			lda 	(zTemp0),y
.95a9	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.95ac	c8		iny				iny
.95ad	b1 36		lda ($36),y			lda 	(zTemp0),y
.95af	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.95b2	c8		iny				iny
.95b3	b1 36		lda ($36),y			lda 	(zTemp0),y
.95b5	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.95b8	9e 28 04	stz $0428,x			stz 	NSExponent,x 				; clear exponent.
.95bb	bd 00 04	lda $0400,x			lda		NSStatus,x 					; see if type is integer
.95be	29 18		and #$18			and 	#NSBTypeMask  				; type information only
.95c0	9d 00 04	sta $0400,x			sta 	NSStatus,x 					; update it back.
.95c3	f0 06		beq $95cb			beq 	_DRFNoExponent
.95c5	c8		iny				iny 								; if not, read the exponent as well.
.95c6	b1 36		lda ($36),y			lda 	(zTemp0),y
.95c8	9d 28 04	sta $0428,x			sta 	NSExponent,x
.95cb					_DRFNoExponent:
.95cb	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; is the most significant bit set ?
.95ce	10 0d		bpl $95dd			bpl 	_DRFExit2 					; if not, then exit.
.95d0	29 7f		and #$7f			and 	#$7F 						; clear that bit.
.95d2	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.95d5	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; set the sign flag
.95d8	09 80		ora #$80			ora 	#NSBIsNegative
.95da	9d 00 04	sta $0400,x			sta 	NSStatus,x
.95dd					_DRFExit2:
.95dd	7a		ply				ply
.95de	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/number.asm

=1					ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2					ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3					ESTA_Decimal = 3 							; fractional part.
.95df					EncodeNumberStart:
.95df	38		sec				sec
.95e0	80 01		bra $95e3			bra 	EncodeNumberContinue+1
.95e2					EncodeNumberContinue:
.95e2	18		clc				clc
.95e3					EncodeNumber:
.95e3	08		php				php 								; save reset.
.95e4	c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.95e6	f0 12		beq $95fa			beq 	_ENIsOkay
.95e8	c9 30		cmp #$30			cmp 	#"0"
.95ea	90 04		bcc $95f0			bcc 	_ENBadNumber
.95ec	c9 3a		cmp #$3a			cmp 	#"9"+1
.95ee	90 0a		bcc $95fa			bcc 	_ENIsOkay
.95f0					_ENBadNumber:
.95f0	28		plp				plp 								; throw saved reset
.95f1	ad 85 04	lda $0485			lda 	EncodeState 				; decimal mode, construct final number
.95f4	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.95f6	f0 7e		beq $9676			beq 	_ENConstructFinal
.95f8					_ENFail:
.95f8	18		clc				clc 								; not allowed
.95f9	60		rts				rts
.95fa					_ENIsOkay:
.95fa	28		plp				plp 								; are we restarting
.95fb	90 15		bcc $9612			bcc 	_ENNoRestart
.95fd					_ENStartEncode:
.95fd	c9 2e		cmp #$2e			cmp 	#'.'						; first is DP
.95ff	f0 0c		beq $960d			beq 	_ENFirstDP
.9601	29 0f		and #$0f			and 	#15 						; put digit in mantissa
.9603	20 e1 9b	jsr $9be1			jsr 	NSMSetByte
.9606	a9 01		lda #$01			lda 	#ESTA_Low
.9608					_ENExitChange:
.9608	8d 85 04	sta $0485			sta 	EncodeState 				; save new state
.960b	38		sec				sec
.960c	60		rts				rts
.960d					_ENFirstDP:
.960d	20 df 9b	jsr $9bdf			jsr 	NSMSetZero 					; clear integer part
.9610	80 3f		bra $9651			bra 	_ESTASwitchFloat			; go straight to float and exi
.9612					_ENNoRestart:
.9612	48		pha				pha 								; save on stack.
.9613	ad 85 04	lda $0485			lda 	EncodeState 				; get current state
.9616	c9 01		cmp #$01			cmp 	#ESTA_Low
.9618	f0 09		beq $9623			beq  	_ESTALowState
.961a	c9 02		cmp #$02			cmp 	#ESTA_High
.961c	f0 29		beq $9647			beq 	_ESTAHighState
.961e	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.9620	f0 3b		beq $965d			beq 	_ESTADecimalState
>9622	db						.byte 	$DB 						; causes a break in the emulator
.9623					_ESTALowState:
.9623	68		pla				pla 								; get value back
.9624	c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.9626	f0 29		beq $9651			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.9628	29 0f		and #$0f			and 	#15 						; make digit
.962a	8d 86 04	sta $0486			sta 	DigitTemp 					; save it.
.962d	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.9630	0a		asl a				asl 	a
.9631	0a		asl a				asl 	a
.9632	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.9635	0a		asl a				asl 	a
.9636	6d 86 04	adc $0486			adc 	DigitTemp
.9639	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.963c	c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.963e	90 05		bcc $9645			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.9640	a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.9642	8d 85 04	sta $0485			sta 	EncodeState
.9645					_ESTANoSwitch:
.9645	38		sec				sec
.9646	60		rts				rts
.9647					_ESTAHighState:
.9647	68		pla				pla 								; get value back
.9648	c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.964a	f0 05		beq $9651			beq 	_ESTASwitchFloat
.964c	20 b0 96	jsr $96b0			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.964f	38		sec				sec
.9650	60		rts				rts
.9651					_ESTASwitchFloat:
.9651	9c 87 04	stz $0487			stz 	DecimalCount
.9654	e8		inx				inx 								; zero the decimal additive.
.9655	20 df 9b	jsr $9bdf			jsr 	NSMSetZero
.9658	ca		dex				dex
.9659	a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.965b	80 ab		bra $9608			bra 	_ENExitChange
.965d					_ESTADecimalState:
.965d	68		pla				pla 								; digit.
.965e	c9 2e		cmp #$2e			cmp 	#"." 						; fail on 2nd decimal point.
.9660	f0 96		beq $95f8			beq 	_ENFail
.9662	e8		inx				inx 								; put digit into fractional part of X+1
.9663	20 b0 96	jsr $96b0			jsr 	ESTAShiftDigitIntoMantissa
.9666	ca		dex				dex
.9667	ee 87 04	inc $0487			inc 	DecimalCount 				; bump the count of decimals
.966a	ad 87 04	lda $0487			lda 	DecimalCount
.966d	c9 0b		cmp #$0b			cmp 	#11
.966f	f0 02		beq $9673			beq 	_ESTADSFail
.9671	38		sec				sec
.9672	60		rts				rts
.9673					_ESTADSFail:
.9673	4c 4b a9	jmp $a94b			jmp 	RangeError
.9676					_ENConstructFinal:
.9676	ad 87 04	lda $0487			lda 	DecimalCount 				; get decimal count
.9679	f0 33		beq $96ae			beq 	_ENCFExit 					; no decimals
.967b	5a		phy				phy
.967c	0a		asl a				asl 	a 							; x 4 and CLC
.967d	0a		asl a				asl 	a
.967e	6d 87 04	adc $0487			adc 	DecimalCount
.9681	a8		tay				tay
.9682	b9 0a a9	lda $a90a,y			lda 	DecimalScalarTable-5,y 		; copy decimal scalar to X+2
.9685	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.9688	b9 0b a9	lda $a90b,y			lda 	DecimalScalarTable-5+1,y
.968b	9d 12 04	sta $0412,x			sta 	NSMantissa1+2,x
.968e	b9 0c a9	lda $a90c,y			lda 	DecimalScalarTable-5+2,y
.9691	9d 1a 04	sta $041a,x			sta 	NSMantissa2+2,x
.9694	b9 0d a9	lda $a90d,y			lda 	DecimalScalarTable-5+3,y
.9697	9d 22 04	sta $0422,x			sta 	NSMantissa3+2,x
.969a	b9 0e a9	lda $a90e,y			lda 	DecimalScalarTable-5+4,y
.969d	9d 2a 04	sta $042a,x			sta 	NSExponent+2,x
.96a0	a9 08		lda #$08			lda 	#NSTFloat
.96a2	9d 02 04	sta $0402,x			sta 	NSStatus+2,x
.96a5	7a		ply				ply
.96a6	e8		inx				inx 								; multiply decimal const by decimal scalar
.96a7	20 92 a6	jsr $a692			jsr 	FloatMultiply
.96aa	ca		dex				dex
.96ab	20 27 a5	jsr $a527			jsr 	FloatAdd 					; add to integer part.
.96ae					_ENCFExit:
.96ae	18		clc				clc 								; reject the digit.
.96af	60		rts				rts
.96b0					ESTAShiftDigitIntoMantissa:
.96b0	29 0f		and #$0f			and 	#15 						; save digit
.96b2	48		pha				pha
.96b3	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; push mantissa on stack
.96b6	48		pha				pha
.96b7	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.96ba	48		pha				pha
.96bb	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.96be	48		pha				pha
.96bf	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.96c2	48		pha				pha
.96c3	20 f4 9b	jsr $9bf4			jsr 	NSMShiftLeft 				; x 2
.96c6	20 f4 9b	jsr $9bf4			jsr 	NSMShiftLeft 				; x 4
.96c9	18		clc				clc 								; pop mantissa and add
.96ca	68		pla				pla
.96cb	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.96ce	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.96d1	68		pla				pla
.96d2	7d 10 04	adc $0410,x			adc 	NSMantissa1,x
.96d5	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.96d8	68		pla				pla
.96d9	7d 18 04	adc $0418,x			adc 	NSMantissa2,x
.96dc	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.96df	68		pla				pla
.96e0	7d 20 04	adc $0420,x			adc 	NSMantissa3,x
.96e3	9d 20 04	sta $0420,x			sta 	NSMantissa3,x 				; x 5
.96e6	20 f4 9b	jsr $9bf4			jsr 	NSMShiftLeft 				; x 10
.96e9	68		pla				pla 								; add digit
.96ea	18		clc				clc
.96eb	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.96ee	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.96f1	90 0d		bcc $9700			bcc 	_ESTASDExit
.96f3	fe 10 04	inc $0410,x			inc 	NSMantissa1,x
.96f6	d0 08		bne $9700			bne 	_ESTASDExit
.96f8	fe 18 04	inc $0418,x			inc 	NSMantissa2,x
.96fb	d0 03		bne $9700			bne 	_ESTASDExit
.96fd	fe 20 04	inc $0420,x			inc 	NSMantissa3,x
.9700					_ESTASDExit:
.9700	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/term.asm

.9701					EvaluateTerm:
.9701	b1 30		lda ($30),y			lda 	(codePtr),y
.9703	30 18		bmi $971d			bmi 	_ETCheckUnary 				; unary function ? (text ones)
.9705	c9 40		cmp #$40			cmp 	#$40 						; 40-7F => identifier reference
.9707	b0 6f		bcs $9778			bcs 	_ETVariable
.9709	c9 30		cmp #$30			cmp 	#'0' 						; is it a number
.970b	90 6e		bcc $977b			bcc 	_ETPuncUnary 				; if not it might be a punctuation unary.
.970d	c9 3a		cmp #$3a			cmp 	#'9'+1
.970f	b0 6a		bcs $977b			bcs 	_ETPuncUnary
.9711	20 df 95	jsr $95df			jsr 	EncodeNumberStart 			; can't fail as it's 0-9 !
.9714					_ETNumber:
.9714	c8		iny				iny 								; keep encoding until we have the numbers
.9715	b1 30		lda ($30),y			lda 	(codePtr),y
.9717	20 e2 95	jsr $95e2			jsr 	EncodeNumberContinue
.971a	b0 f8		bcs $9714			bcs 	_ETNumber 					; go back if accepted.
.971c	60		rts				rts
.971d					_ETCheckUnary:
.971d	c9 ff		cmp #$ff			cmp 	#KWC_STRING 				; string token
.971f	f0 41		beq $9762			beq 	_ETString
.9721	c9 fe		cmp #$fe			cmp 	#KWC_HEXCONST 				; hex constant.
.9723	f0 12		beq $9737			beq 	_ETHexConstant
.9725	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; check it actually is a unary function
.9727	90 0b		bcc $9734			bcc 	_ETSyntaxError
.9729	c9 97		cmp #$97			cmp 	#KWC_LAST_UNARY+1
.972b	b0 07		bcs $9734			bcs 	_ETSyntaxError
.972d	da		phx				phx 								; push X on the stack
.972e	0a		asl a				asl 	a 							; put vector x 2 into X
.972f	aa		tax				tax
.9730	c8		iny				iny 								; consume unary function token
.9731	7c ee 8c	jmp ($8cee,x)			jmp 	(VectorSet0,x) 				; and do it.
.9734					_ETSyntaxError:
.9734	4c 46 a9	jmp $a946			jmp 	SyntaxError
.9737					_ETHexConstant:
.9737	c8		iny				iny 								; skip #
.9738	c8		iny				iny 								; skip count
.9739	20 df 9b	jsr $9bdf			jsr 	NSMSetZero 					; clear result
.973c					_ETHLoop:
.973c	b1 30		lda ($30),y			lda 	(codePtr),y
.973e	c8		iny				iny 								; and consume
.973f	c9 00		cmp #$00			cmp 	#0 							; exit if zero
.9741	f0 1e		beq $9761			beq 	_ETHExit
.9743	48		pha				pha 								; save on stack.
.9744	20 f4 9b	jsr $9bf4			jsr 	NSMShiftLeft 				; x 2
.9747	20 f4 9b	jsr $9bf4			jsr 	NSMShiftLeft 				; x 4
.974a	20 f4 9b	jsr $9bf4			jsr 	NSMShiftLeft 				; x 8
.974d	20 f4 9b	jsr $9bf4			jsr 	NSMShiftLeft 				; x 16
.9750	68		pla				pla 								; ASCII
.9751	c9 41		cmp #$41			cmp 	#'A'
.9753	90 02		bcc $9757			bcc 	_ETHNotChar
.9755	e9 07		sbc #$07			sbc 	#7
.9757					_ETHNotChar:
.9757	29 0f		and #$0f			and 	#15 						; digit now
.9759	1d 08 04	ora $0408,x			ora 	NSMantissa0,x 				; put in LS Nibble
.975c	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.975f	80 db		bra $973c			bra 	_ETHLoop 					; go round.
.9761					_ETHExit:
.9761	60		rts				rts
.9762					_ETString:
.9762	c8		iny				iny 								; look at length
.9763	b1 30		lda ($30),y			lda 	(codePtr),y
.9765	48		pha				pha
.9766	c8		iny				iny 								; first character
.9767	20 29 9c	jsr $9c29			jsr 	MemoryInline 				; put address of string at (code-Ptr),y on stack
.976a	68		pla				pla 								; restore count and save
.976b	85 36		sta $36				sta 	zTemp0
.976d	98		tya				tya 								; add length to Y to skip it.
.976e	18		clc				clc
.976f	65 36		adc $36				adc 	zTemp0
.9771	a8		tay				tay
.9772	a9 10		lda #$10			lda 	#NSTString 					; mark as string
.9774	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9777	60		rts				rts
.9778					_ETVariable:
.9778	4c d2 97	jmp $97d2			jmp 	VariableHandler
.977b					_ETPuncUnary:
.977b	c8		iny				iny 								; consume the unary character
.977c	c9 2d		cmp #$2d			cmp 	#KWD_MINUS 					; unary minus
.977e	f0 2d		beq $97ad			beq 	_ETUnaryNegate
.9780	c9 10		cmp #$10			cmp 	#KWD_AT 					; @ reference -> constant
.9782	f0 39		beq $97bd			beq 	_ETDereference
.9784	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; parenthesis
.9786	f0 43		beq $97cb			beq 	_ETParenthesis
.9788	64 36		stz $36				stz 	zTemp0 						; zTemp0 is the indirection level.
.978a	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; byte indirection (0) ?
.978c	f0 06		beq $9794			beq 	_ETIndirection
.978e	e6 36		inc $36				inc 	zTemp0
.9790	c9 21		cmp #$21			cmp 	#KWD_PLING					; word indirection (1) \
.9792	d0 a0		bne $9734			bne 	_ETSyntaxError
.9794					_ETIndirection:
.9794	a5 36		lda $36				lda 	zTemp0 						; push indirection amount (0-1) => (1-2) on the stack
.9796	1a		inc a				inc 	a
.9797	48		pha				pha
.9798	20 01 97	jsr $9701			jsr 	EvaluateTerm				; evaluate the term
.979b	20 45 95	jsr $9545			jsr 	Dereference 				; dereference it.
.979e	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a +ve integer.
.97a1	d0 07		bne $97aa			bne 	_ETTypeMismatch
.97a3	68		pla				pla 								; indirection 1-2
.97a4	09 20		ora #$20			ora 	#NSBIsReference 			; make it a reference.
.97a6	9d 00 04	sta $0400,x			sta 	NSStatus,x
.97a9	60		rts				rts
.97aa					_ETTypeMismatch:
.97aa	4c 50 a9	jmp $a950			jmp 	TypeError
.97ad					_ETUnaryNegate:
.97ad	20 01 97	jsr $9701			jsr 	EvaluateTerm				; evaluate the term
.97b0	20 45 95	jsr $9545			jsr 	Dereference 				; dereference it.
.97b3	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a number
.97b6	29 10		and #$10			and 	#NSTString
.97b8	d0 f0		bne $97aa			bne 	_ETTypeMismatch
.97ba	4c 8b 9b	jmp $9b8b			jmp 	NSMNegate  					; just toggles the sign bit.
.97bd					_ETDereference:
.97bd	20 01 97	jsr $9701			jsr 	EvaluateTerm				; evaluate the term
.97c0	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a reference
.97c3	29 20		and #$20			and 	#NSBIsReference
.97c5	f0 e3		beq $97aa			beq 	_ETTypeMismatch
.97c7	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; make it an integer address
.97ca	60		rts				rts
.97cb					_ETParenthesis:
.97cb	20 30 94	jsr $9430			jsr 	EvaluateExpression 			; evaluate here, from lowest precedence
.97ce	20 60 a3	jsr $a360			jsr 	CheckRightBracket 			; check for )
.97d1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/variable.asm

.97d2					VariableHandler:
.97d2	b1 30		lda ($30),y			lda 	(codePtr),y
.97d4	18		clc				clc
.97d5	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.97d7	85 37		sta $37				sta 	zTemp0+1
.97d9	c8		iny				iny
.97da	b1 30		lda ($30),y			lda 	(codePtr),y
.97dc	85 36		sta $36				sta 	zTemp0
.97de	c8		iny				iny
.97df	18		clc				clc									; copy variable address+3 to mantissa
.97e0	69 03		adc #$03			adc 	#3
.97e2	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.97e5	a5 37		lda $37				lda 	zTemp0+1
.97e7	69 00		adc #$00			adc 	#0
.97e9	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.97ec	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.97ef	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.97f2	9e 28 04	stz $0428,x			stz 	NSExponent,x
.97f5	5a		phy				phy
.97f6	a0 02		ldy #$02			ldy 	#2 							; read type
.97f8	b1 36		lda ($36),y			lda 	(zTemp0),y
.97fa	7a		ply				ply
.97fb	29 1c		and #$1c			and 	#NSBTypeMask+NSBIsArray 	; get type information
.97fd	09 20		ora #$20			ora 	#NSBIsReference 			; make a reference.
.97ff	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9802	29 04		and #$04			and 	#NSBIsArray
.9804	d0 01		bne $9807			bne 	_VHArray
.9806	60		rts				rts
.9807					_VHArray:
.9807	e8		inx				inx
.9808	20 77 9b	jsr $9b77			jsr 	Evaluate8BitInteger 		; get the 1st index.
.980b	a9 ff		lda #$ff			lda 	#$FF 						; set Status of X+2 to a duff value so we know if we picked it up.
.980d	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.9810	b1 30		lda ($30),y			lda 	(codePtr),y
.9812	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.9814	d0 06		bne $981c			bne 	_VHNoSecondIndex
.9816	c8		iny				iny 								; skip the comma
.9817	e8		inx				inx
.9818	20 77 9b	jsr $9b77			jsr 	Evaluate8BitInteger 		; get the 2nd index.
.981b	ca		dex				dex
.981c					_VHNoSecondIndex:
.981c	ca		dex				dex 								; set X back.
.981d	20 60 a3	jsr $a360			jsr 	CheckRightBracket 			; and check the right bracket.
.9820	5a		phy				phy 								; save position
.9821	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy record address to zaTemp
.9824	85 3e		sta $3e				sta 	zaTemp
.9826	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9829	85 3f		sta $3f				sta 	zaTemp+1
.982b	a0 03		ldy #$03			ldy 	#3 							; get the second index - which is 0 if there is one index.
.982d	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.982f	f0 02		beq $9833			beq 	_VHHas2Mask
.9831	a9 ff		lda #$ff			lda 	#$FF
.9833					_VHHas2Mask:
.9833	dd 02 04	cmp $0402,x			cmp 	NSStatus+2,x 				; so if they are the same there are the wrong number of indices
.9836	f0 54		beq $988c			beq 	_VHBadIndex
.9838	0a		asl a				asl 	a 							; carry will be set if a second index
.9839	90 09		bcc $9844			bcc 	_VHCheckFirstIndex
.983b	a0 03		ldy #$03			ldy 	#3 			 				; check the 2nd size >= 2nd index
.983d	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.983f	dd 0a 04	cmp $040a,x			cmp 	NSMantissa0+2,x
.9842	90 48		bcc $988c			bcc 	_VHBadIndex
.9844					_VHCheckFirstIndex:
.9844	a0 02		ldy #$02			ldy 	#2 			 				; check the 2nd size >= 2nd index
.9846	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9848	dd 09 04	cmp $0409,x			cmp 	NSMantissa0+1,x
.984b	90 3f		bcc $988c			bcc 	_VHBadIndex
.984d	64 36		stz $36				stz 	zTemp0 						; clear zTemp0 (if 1 index)
.984f	64 37		stz $37				stz 	zTemp0+1
.9851	bd 02 04	lda $0402,x			lda 	NSStatus+2,x 				; if only one index provided, don't need to multiply
.9854	30 0f		bmi $9865			bmi 	_VHNoMultiply
.9856	da		phx				phx
.9857	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; get 2nd index on stack
.985a	48		pha				pha
.985b	a0 02		ldy #$02			ldy 	#2 							; get 1st size in A
.985d	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.985f	1a		inc a				inc 	a 							; add 1 for zero base
.9860	fa		plx				plx
.9861	20 e2 a7	jsr $a7e2			jsr 	Multiply8x8 				; calculate -> Z0
.9864	fa		plx				plx
.9865					_VHNoMultiply:
.9865	18		clc				clc
.9866	a5 36		lda $36				lda 	zTemp0
.9868	7d 09 04	adc $0409,x			adc 	NSMantissa0+1,x
.986b	85 36		sta $36				sta 	zTemp0
.986d	a5 37		lda $37				lda 	zTemp0+1
.986f	69 00		adc #$00			adc 	#0
.9871	85 37		sta $37				sta 	zTemp0+1
.9873	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9876	20 53 87	jsr $8753			jsr 	ScaleByBaseType
.9879	18		clc				clc
.987a	b2 3e		lda ($3e)			lda 	(zaTemp)
.987c	65 36		adc $36				adc 	zTemp0
.987e	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9881	a0 01		ldy #$01			ldy 	#1
.9883	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9885	65 37		adc $37				adc 	zTemp0+1
.9887	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.988a	7a		ply				ply 								; restore position
.988b	60		rts				rts
.988c					_VHBadIndex:
.988c	a9 17		lda #$17		lda	#23
.988e	4c 27 90	jmp $9027		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/abs.asm

.a718					AbsUnary:
.a718	fa		plx				plx 								; restore stack pos
.a719	20 33 9b	jsr $9b33			jsr 	EvaluateNumber 				; get a float or int
.a71c	20 60 a3	jsr $a360			jsr 	CheckRightBracket
.a71f	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; clear the sign bit
.a722	29 7f		and #$7f			and 	#$7F
.a724	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a727	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/alloc.asm

.9891					AllocUnary:
.9891	fa		plx				plx 								; restore stack pos
.9892	20 6b 9b	jsr $9b6b			jsr 	Evaluate16BitInteger		; get bytes required.
.9895	20 60 a3	jsr $a360			jsr 	CheckRightBracket
.9898	da		phx				phx 								; save X/Y
.9899	5a		phy				phy
.989a	8a		txa				txa 								; copy X into Y
.989b	a8		tay				tay
.989c	b9 10 04	lda $0410,y			lda		NSMantissa1,y 				; get size
.989f	aa		tax				tax
.98a0	b9 08 04	lda $0408,y			lda 	NSMantissa0,y
.98a3	20 b0 98	jsr $98b0			jsr 	AllocateXABytes 			; allocate memory
.98a6	99 08 04	sta $0408,y			sta 	NSMantissa0,y 				; write address out.
.98a9	8a		txa				txa
.98aa	99 10 04	sta $0410,y			sta 	NSMantissa1,y
.98ad	7a		ply				ply
.98ae	fa		plx				plx
.98af	60		rts				rts
.98b0					AllocateXABytes:
.98b0	5a		phy				phy
.98b1	ac 8c 04	ldy $048c			ldy 	lowMemPtr 					; push current address on stack and to zTemp0
.98b4	84 36		sty $36				sty 	zTemp0
.98b6	5a		phy				phy
.98b7	ac 8d 04	ldy $048d			ldy 	lowMemPtr+1
.98ba	84 37		sty $37				sty 	zTemp0+1
.98bc	5a		phy				phy
.98bd	18		clc				clc 								; add to low memory pointer
.98be	6d 8c 04	adc $048c			adc 	lowMemPtr
.98c1	8d 8c 04	sta $048c			sta 	lowMemPtr
.98c4	8a		txa				txa
.98c5	6d 8d 04	adc $048d			adc 	lowMemPtr+1
.98c8	8d 8d 04	sta $048d			sta 	lowMemPtr+1
.98cb	b0 2f		bcs $98fc			bcs 	CISSMemory
.98cd	20 ee 98	jsr $98ee			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.98d0					_ClearMemory:
.98d0	ad 8c 04	lda $048c			lda 	lowMemPtr 					; cleared all memory allocated
.98d3	c5 36		cmp $36				cmp 	zTemp0
.98d5	d0 07		bne $98de			bne 	_CMClearNext
.98d7	ad 8d 04	lda $048d			lda 	lowMemPtr+1
.98da	c5 37		cmp $37				cmp 	zTemp0+1
.98dc	f0 0c		beq $98ea			beq 	_CMExit
.98de					_CMClearNext:
.98de	a9 00		lda #$00			lda 	#0 							; clear byte, advance to next.
.98e0	92 36		sta ($36)			sta 	(zTemp0)
.98e2	e6 36		inc $36				inc 	zTemp0
.98e4	d0 ea		bne $98d0			bne 	_ClearMemory
.98e6	e6 37		inc $37				inc		zTemp0+1
.98e8	80 e6		bra $98d0			bra 	_ClearMemory
.98ea					_CMExit:
.98ea	fa		plx				plx
.98eb	68		pla				pla
.98ec	7a		ply				ply
.98ed	60		rts				rts
.98ee					CheckIdentifierStringSpace:
.98ee	48		pha				pha
.98ef	ad 8d 04	lda $048d			lda 	lowMemPtr+1 				; get low memory pointer
.98f2	18		clc				clc
.98f3	69 02		adc #$02			adc 	#2 							; need at least 2 256 byte pages
.98f5	cd 8f 04	cmp $048f			cmp 	StringMemory+1 				; is it >= StringMemory
.98f8	b0 02		bcs $98fc			bcs 	CISSMemory
.98fa	68		pla				pla
.98fb	60		rts				rts
.98fc					CISSMemory:
.98fc	a9 06		lda #$06		lda	#6
.98fe	4c 27 90	jmp $9027		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/asc.asm

.a728					AscUnary:
.a728	fa		plx				plx 								; restore stack pos
.a729	20 3e 9b	jsr $9b3e			jsr 	EvaluateString 				; get a string
.a72c	b2 36		lda ($36)			lda 	(zTemp0)					; get/return firs character
.a72e	20 e1 9b	jsr $9be1			jsr 	NSMSetByte
.a731	20 60 a3	jsr $a360			jsr 	CheckRightBracket
.a734	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/frac.asm

.a735					FracUnary:
.a735	fa		plx				plx 								; restore stack pos
.a736	20 33 9b	jsr $9b33			jsr 	EvaluateNumber 				; get a float or int
.a739	20 60 a3	jsr $a360			jsr 	CheckRightBracket
.a73c	bd 00 04	lda $0400,x			lda 	NSStatus,x
.a73f	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.a741	f0 04		beq $a747			beq 	_IUZero
.a743	20 05 a6	jsr $a605			jsr 	FloatFractionalPart
.a746	60		rts				rts
.a747					_IUZero:
.a747	20 df 9b	jsr $9bdf			jsr 	NSMSetZero
.a74a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/int.asm

.a74b					IntUnary:
.a74b	fa		plx				plx 								; restore stack pos
.a74c	20 33 9b	jsr $9b33			jsr 	EvaluateNumber 				; get a float or int
.a74f	20 60 a3	jsr $a360			jsr 	CheckRightBracket
.a752	bd 00 04	lda $0400,x			lda 	NSStatus,x
.a755	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.a757	f0 03		beq $a75c			beq 	_IUExit
.a759	20 68 a6	jsr $a668			jsr 	FloatIntegerPart
.a75c					_IUExit:
.a75c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/len.asm

.a75d					LenUnary:
.a75d	fa		plx				plx 								; restore stack pos
.a75e	20 3e 9b	jsr $9b3e			jsr 	EvaluateString 				; get a string
.a761	5a		phy				phy
.a762	a0 00		ldy #$00			ldy 	#0 							; find length
.a764					_LenFind:
.a764	b1 36		lda ($36),y			lda 	(zTemp0),y
.a766	f0 06		beq $a76e			beq 	_LenExit
.a768	c8		iny				iny
.a769	d0 f9		bne $a764			bne 	_LenFind
.a76b	4c 4b a9	jmp $a94b			jmp 	RangeError 					; string > 255
.a76e					_LenExit:
.a76e	98		tya				tya
.a76f	20 e1 9b	jsr $9be1			jsr 	NSMSetByte
.a772	7a		ply				ply
.a773	20 60 a3	jsr $a360			jsr 	CheckRightBracket
.a776	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/not.asm

.9901					Unary_Not:
.9901	fa		plx				plx
.9902	20 56 9b	jsr $9b56			jsr 	EvaluateInteger 			; get integer
.9905	20 60 a3	jsr $a360			jsr 	CheckRightBracket
.9908	20 0f 9c	jsr $9c0f			jsr 	NSMIsZero 					; zero mantissa ?
.990b	f0 04		beq $9911			beq 	_NotZero
.990d	20 df 9b	jsr $9bdf			jsr 	NSMSetZero
.9910	60		rts				rts
.9911					_NotZero:
.9911	4c 94 90	jmp $9094			jmp 	ReturnTrue
.9914					_UNBad:
.9914	4c 55 a9	jmp $a955			jmp 	ArgumentError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/rnd.asm

.9917					Unary_Random:
.9917	fa		plx				plx
.9918	20 90 99	jsr $9990			jsr 	Random32Bit 				; get a random number
.991b	20 75 99	jsr $9975			jsr 	URCopyToMantissa  			; put in mantissa
.991e	e8		inx				inx
.991f	20 6b 9b	jsr $9b6b			jsr 	Evaluate16BitInteger 		; put modulus value in +1
.9922	ca		dex				dex
.9923	20 e4 a3	jsr $a3e4			jsr 	IntegerModulusNoCheck 		; calculate modulus
.9926	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; make it an integer positive
.9929	9e 28 04	stz $0428,x			stz 	NSExponent,x
.992c	20 60 a3	jsr $a360			jsr 	CheckRightBracket
.992f	60		rts				rts
.9930					Unary_Rnd:
.9930	fa		plx				plx
.9931	20 33 9b	jsr $9b33			jsr 	EvaluateNumber 				; number to use.
.9934	20 60 a3	jsr $a360			jsr 	CheckRightBracket 			; closing bracket
.9937	20 0f 9c	jsr $9c0f			jsr 	NSMIsZero 					; if zero, then don't generate a new number
.993a	f0 2b		beq $9967			beq 	_URCopySeed
.993c	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; if -ve, then seed using parameter
.993f	10 23		bpl $9964			bpl 	_URDontSeed
.9941	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy - value to seed butchering it.
.9944	49 17		eor #$17			eor 	#$17
.9946	8d 88 04	sta $0488			sta 	RandomSeed+0
.9949	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.994c	49 a5		eor #$a5			eor 	#$A5
.994e	8d 89 04	sta $0489			sta 	RandomSeed+1
.9951	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.9954	49 c2		eor #$c2			eor 	#$C2
.9956	8d 8a 04	sta $048a			sta 	RandomSeed+2
.9959	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.995c	49 9d		eor #$9d			eor 	#$9D
.995e	8d 8b 04	sta $048b			sta 	RandomSeed+3
.9961	20 90 99	jsr $9990			jsr 	Random32Bit
.9964					_URDontSeed:
.9964	20 90 99	jsr $9990			jsr 	Random32Bit 				; generate a number.
.9967					_URCopySeed:
.9967	20 75 99	jsr $9975			jsr 	URCopyToMantissa 			; copy into mantissa
.996a	a9 e1		lda #$e1			lda 	#-31 						; force into 0-1 range
.996c	8d 28 04	sta $0428			sta 	NSExponent
.996f	a9 08		lda #$08			lda 	#NSTFloat
.9971	8d 00 04	sta $0400			sta 	NSStatus 					; positive.
.9974	60		rts				rts
.9975					URCopyToMantissa:
.9975	ad 88 04	lda $0488			lda 	RandomSeed+0
.9978	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.997b	ad 89 04	lda $0489			lda 	RandomSeed+1
.997e	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9981	ad 8a 04	lda $048a			lda 	RandomSeed+2
.9984	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9987	ad 8b 04	lda $048b			lda 	RandomSeed+3
.998a	29 7f		and #$7f			and 	#$7F 						; make legal mantissa
.998c	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.998f	60		rts				rts
.9990					Random32Bit:
.9990	5a		phy				phy
.9991	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.9993	ad 88 04	lda $0488			lda 	RandomSeed+0 				; check the seed isn't zero
.9996	d0 03		bne $999b			bne 	_Random1
.9998	a8		tay				tay 								; if so do it 256 times
.9999	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.999b					_Random1:
.999b	0a		asl a				asl 	a 							; LSFR RNG
.999c	2e 89 04	rol $0489			rol 	RandomSeed+1
.999f	2e 8a 04	rol $048a			rol 	RandomSeed+2
.99a2	2e 8b 04	rol $048b			rol 	RandomSeed+3
.99a5	90 02		bcc $99a9			bcc 	_Random2
.99a7	49 c5		eor #$c5			eor 	#$C5
.99a9					_Random2:
.99a9	88		dey				dey
.99aa	d0 ef		bne $999b			bne 	_Random1
.99ac	8d 88 04	sta $0488			sta 	RandomSeed+0
.99af	7a		ply				ply
.99b0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/sgn.asm

.a777					SgnUnary:
.a777	fa		plx				plx 								; restore stack pos
.a778	20 33 9b	jsr $9b33			jsr 	EvaluateNumber 				; get a float or int
.a77b	20 60 a3	jsr $a360			jsr 	CheckRightBracket
.a77e	20 0f 9c	jsr $9c0f			jsr 	NSMIsZero 					; if zero
.a781	f0 10		beq $a793			beq 	_SGZero  					; return Int Zero
.a783	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get status w/sign
.a786	48		pha				pha
.a787	a9 01		lda #$01			lda 	#1 							; set to 1
.a789	20 e1 9b	jsr $9be1			jsr 	NSMSetByte
.a78c	68		pla				pla
.a78d	29 80		and #$80			and		#$80 						; copy the sign byte out
.a78f	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a792	60		rts				rts
.a793	20 df 9b	jsr $9bdf	_SGZero:jsr 	NSMSetZero
.a796	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/val.asm

.a797					ValUnary:
.a797	fa		plx				plx 								; restore stack pos
.a798	20 ad a7	jsr $a7ad			jsr 	ValMainCode 				; do the main val() code
.a79b	b0 01		bcs $a79e			bcs 	_VUError 					; couldn't convert
.a79d	60		rts				rts
.a79e					_VUError:
.a79e	4c 50 a9	jmp $a950			jmp 	TypeError
.a7a1					IsValUnary:
.a7a1	fa		plx				plx 								; restore stack pos
.a7a2	20 ad a7	jsr $a7ad			jsr 	ValMainCode 				; do the main val() code
.a7a5	b0 03		bcs $a7aa			bcs 	_VUBad
.a7a7	4c 94 90	jmp $9094			jmp 	ReturnTrue
.a7aa					_VUBad:
.a7aa	4c a0 90	jmp $90a0			jmp 	ReturnFalse
.a7ad					ValMainCode:
.a7ad	20 3e 9b	jsr $9b3e			jsr 	EvaluateString 				; get a string
.a7b0	20 60 a3	jsr $a360			jsr 	CheckRightBracket 			; check right bracket present
.a7b3	5a		phy				phy
.a7b4	b2 36		lda ($36)			lda 	(zTemp0) 					; check not empty string
.a7b6	f0 17		beq $a7cf			beq 	_VMCFail2
.a7b8	a0 ff		ldy #$ff			ldy 	#$FF 						; start position
.a7ba	48		pha				pha 								; save first character
.a7bb	c9 2d		cmp #$2d			cmp 	#"-"		 				; is it -
.a7bd	d0 01		bne $a7c0			bne 	_VMCStart
.a7bf	c8		iny				iny 								; skip over -
.a7c0					_VMCStart:
.a7c0	38		sec				sec 								; initialise first time round.
.a7c1					_VMCNext:
.a7c1	c8		iny				iny 								; pre-increment
.a7c2	b1 36		lda ($36),y			lda 	(zTemp0),y 					; next character
.a7c4	f0 0c		beq $a7d2			beq 	_VMCSuccess 				; successful.
.a7c6	20 e3 95	jsr $95e3			jsr 	EncodeNumber 				; send it to the number-builder
.a7c9	90 03		bcc $a7ce			bcc 	_VMCFail 					; if failed, give up.
.a7cb	18		clc				clc 								; next time round, countinue
.a7cc	80 f3		bra $a7c1			bra 	_VMCNext
.a7ce					_VMCFail:
.a7ce	68		pla				pla
.a7cf					_VMCFail2:
.a7cf	7a		ply				ply
.a7d0	38		sec				sec
.a7d1	60		rts				rts
.a7d2					_VMCSuccess:
.a7d2	a9 00		lda #$00			lda 	#0 							; construct final
.a7d4	20 e3 95	jsr $95e3			jsr 	EncodeNumber
.a7d7	68		pla				pla
.a7d8	c9 2d		cmp #$2d			cmp 	#"-"
.a7da	d0 03		bne $a7df			bne 	_VMCNotNegative
.a7dc	20 8b 9b	jsr $9b8b			jsr		NSMNegate
.a7df					_VMCNotNegative:
.a7df	7a		ply				ply
.a7e0	18		clc				clc
.a7e1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/chr.asm

.99b1					ChrUnary:
.99b1	fa		plx				plx 								; restore stack pos
.99b2	20 77 9b	jsr $9b77			jsr 	Evaluate8BitInteger			; get value
.99b5	48		pha				pha
.99b6	20 60 a3	jsr $a360			jsr 	CheckRightBracket
.99b9	a9 01		lda #$01			lda 	#1 							; allocate space for one char
.99bb	20 6b ac	jsr $ac6b			jsr 	StringTempAllocate
.99be	68		pla				pla 								; write number to it
.99bf	20 a9 ac	jsr $aca9			jsr 	StringTempWrite
.99c2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/spc.asm

.99c3					SpcUnary:
.99c3	fa		plx				plx 								; restore stack pos
.99c4	20 77 9b	jsr $9b77			jsr 	Evaluate8BitInteger			; get value
.99c7	5a		phy				phy
.99c8	48		pha				pha 								; save count
.99c9	20 6b ac	jsr $ac6b			jsr 	StringTempAllocate
.99cc	7a		ply				ply 								; to do count in Y
.99cd					_SpcLoop:
.99cd	c0 00		cpy #$00			cpy 	#0
.99cf	f0 08		beq $99d9			beq 	_SpcExit
.99d1	a9 20		lda #$20			lda 	#32
.99d3	20 a9 ac	jsr $aca9			jsr 	StringTempWrite
.99d6	88		dey				dey
.99d7	80 f4		bra $99cd			bra 	_SPCLoop
.99d9					_SpcExit:
.99d9	7a		ply				ply
.99da	20 60 a3	jsr $a360			jsr 	CheckRightBracket
.99dd	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/str.asm

.99de					Unary_Str:
.99de	fa		plx				plx
.99df	20 33 9b	jsr $9b33			jsr 	EvaluateNumber  			; get number
.99e2	20 60 a3	jsr $a360			jsr 	CheckRightBracket 			; closing bracket
.99e5	a9 05		lda #$05			lda 	#5 							; maximum decimals, from Basic816
.99e7	20 00 9a	jsr $9a00			jsr 	ConvertNumberToString 		; do the conversion.
.99ea	a9 21		lda #$21			lda		#33 						; create buffer
.99ec	20 6b ac	jsr $ac6b			jsr 	StringTempAllocate 			; allocate memory
.99ef	da		phx				phx
.99f0	a2 00		ldx #$00			ldx 	#0
.99f2					_USCopy:
.99f2	bd 19 06	lda $0619,x			lda 	DecimalBuffer,x
.99f5	20 a9 ac	jsr $aca9			jsr 	StringTempWrite
.99f8	e8		inx				inx
.99f9	bd 19 06	lda $0619,x			lda 	DecimalBuffer,x
.99fc	d0 f4		bne $99f2			bne 	_USCopy
.99fe	fa		plx				plx
.99ff	60		rts				rts
.9a00					ConvertNumberToString:
.9a00	5a		phy				phy 								; save code position
.9a01	8d 94 04	sta $0494			sta 	DecimalPlaces	 			; save number of DPs.
.9a04	9c 95 04	stz $0495			stz 	dbOffset 					; offset into decimal buffer = start.
.9a07	bd 00 04	lda $0400,x			lda 	NSStatus,x  				; is it -ve.
.9a0a	10 0a		bpl $9a16			bpl 	_CNTSNotNegative
.9a0c	29 7f		and #$7f			and 	#$7F 						; make +ve
.9a0e	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9a11	a9 2d		lda #$2d			lda 	#"-"
.9a13	20 7c 9a	jsr $9a7c			jsr 	WriteDecimalBuffer
.9a16					_CNTSNotNegative:
.9a16	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if decimal
.9a19	f0 15		beq $9a30			beq 	_CNTSNotFloat
.9a1b	e8		inx				inx 								; round up
.9a1c	a9 01		lda #$01			lda 	#1
.9a1e	20 e1 9b	jsr $9be1			jsr 	NSMSetByte
.9a21	ca		dex				dex
.9a22	bd 28 04	lda $0428,x			lda		NSExponent,x
.9a25	9d 29 04	sta $0429,x			sta 	NSExponent+1,x
.9a28	a9 08		lda #$08			lda 	#NSTFloat
.9a2a	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.9a2d	20 27 a5	jsr $a527			jsr 	FloatAdd
.9a30					_CNTSNotFloat:
.9a30	20 5e 9a	jsr $9a5e			jsr 	MakePlusTwoString
.9a33	20 05 a6	jsr $a605			jsr 	FloatFractionalPart 		; get the fractional part
.9a36	20 c9 a6	jsr $a6c9			jsr 	NSNormalise					; normalise , exit if zero
.9a39	f0 21		beq $9a5c			beq 	_CNTSExit
.9a3b	a9 2e		lda #$2e			lda 	#"."
.9a3d	20 7c 9a	jsr $9a7c			jsr 	WriteDecimalBuffer 			; write decimal place
.9a40					_CNTSDecimal:
.9a40	ce 94 04	dec $0494			dec 	DecimalPlaces 				; done all the decimals
.9a43	30 17		bmi $9a5c			bmi 	_CNTSExit
.9a45	e8		inx				inx 								; x 10.0
.9a46	a9 0a		lda #$0a			lda 	#10
.9a48	20 e1 9b	jsr $9be1			jsr 	NSMSetByte
.9a4b	a9 08		lda #$08			lda 	#NSTFloat
.9a4d	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9a50	ca		dex				dex
.9a51	20 92 a6	jsr $a692			jsr 	FloatMultiply
.9a54	20 5e 9a	jsr $9a5e			jsr 	MakePlusTwoString
.9a57	20 05 a6	jsr $a605			jsr 	FloatFractionalPart 		; get the fractional part
.9a5a	80 e4		bra $9a40			bra 	_CNTSDecimal 				; keep going.
.9a5c					_CNTSExit:
.9a5c	7a		ply				ply
.9a5d	60		rts				rts
.9a5e					MakePlusTwoString:
.9a5e	da		phx				phx
.9a5f	20 b6 9b	jsr $9bb6			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.9a62	e8		inx				inx 								; access it
.9a63	e8		inx				inx
.9a64	20 68 a6	jsr $a668			jsr 	FloatIntegerPart 			; make it an integer
.9a67	a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.9a69	20 d1 a4	jsr $a4d1			jsr 	ConvertInt32
.9a6c	a2 00		ldx #$00			ldx	 	#0
.9a6e					_MPTSCopy:
.9a6e	bd f7 05	lda $05f7,x			lda 	NumberBuffer,x
.9a71	20 7c 9a	jsr $9a7c			jsr 	WriteDecimalBuffer
.9a74	e8		inx				inx
.9a75	bd f7 05	lda $05f7,x			lda 	NumberBuffer,x
.9a78	d0 f4		bne $9a6e			bne 	_MPTSCopy
.9a7a	fa		plx				plx
.9a7b	60		rts				rts
.9a7c					WriteDecimalBuffer:
.9a7c	da		phx				phx
.9a7d	ae 95 04	ldx $0495			ldx 	dbOffset
.9a80	9d 19 06	sta $0619,x			sta 	DecimalBuffer,x
.9a83	9e 1a 06	stz $061a,x			stz 	DecimalBuffer+1,x
.9a86	ee 95 04	inc $0495			inc 	dbOffset
.9a89	fa		plx				plx
.9a8a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/substring.asm

.9a8b					Unary_Left:
.9a8b	fa		plx				plx
.9a8c	18		clc				clc 								; only one parameter
.9a8d	20 02 9b	jsr $9b02			jsr 	SubstringInitial 			; set up.
.9a90	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; Param #1 is the length
.9a93	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.9a96	9e 09 04	stz $0409,x			stz 	NSMantissa0+1,x 			; Start is zero.
.9a99	80 2c		bra $9ac7			bra 	SubstringMain
.9a9b					Unary_Right:
.9a9b	fa		plx				plx
.9a9c	18		clc				clc 								; only one parameter
.9a9d	20 02 9b	jsr $9b02			jsr 	SubstringInitial 			; set up.
.9aa0	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; length => param 2
.9aa3	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.9aa6	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; total length
.9aa9	fd 09 04	sbc $0409,x			sbc 	NSMantissa0+1,x 			; length - required.
.9aac	b0 02		bcs $9ab0			bcs 	_URNotUnderflow
.9aae	a9 00		lda #$00			lda 	#0 							; start from the beginning, as something like right$("AB",3)
.9ab0					_URNotUnderFlow:
.9ab0	9d 09 04	sta $0409,x			sta 	NSMantissa0+1,x 			; this is the start position
.9ab3	80 12		bra $9ac7			bra 	SubStringMain
.9ab5					Unary_Mid:
.9ab5	fa		plx				plx
.9ab6	38		sec				sec 								; two parameters
.9ab7	20 02 9b	jsr $9b02			jsr 	SubstringInitial 			; set up.
.9aba	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; first parameter is zero ?
.9abd	f0 05		beq $9ac4			beq 	_UMError
.9abf	de 09 04	dec $0409,x			dec 	NSMantissa0+1,x				; reduce initial offset by 1 as MID$(a$,1..) is actually the first character
.9ac2	80 03		bra $9ac7			bra 	SubStringMain
.9ac4					_UMError:
.9ac4	4c 55 a9	jmp $a955			jmp 	ArgumentError
.9ac7					SubStringMain:
.9ac7	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; is the initial offset >= the length
.9aca	dd 28 04	cmp $0428,x			cmp 	NSExponent,x
.9acd	b0 2d		bcs $9afc			bcs 	_SSMNull 					; if so, return an empty string.
.9acf	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; if copy count is zero
.9ad2	f0 28		beq $9afc			beq 	_SSMNull 					; return empty string.
.9ad4	18		clc				clc 								; add the offset +1 to the address and
.9ad5	bd 08 04	lda $0408,x			lda	 	NSMantissa0,x 				; put in zTemp
.9ad8	7d 09 04	adc $0409,x			adc 	NSMantissa0+1,x
.9adb	85 36		sta $36				sta 	zTemp0
.9add	bd 10 04	lda $0410,x			lda	 	NSMantissa1,x
.9ae0	69 00		adc #$00			adc 	#0
.9ae2	85 37		sta $37				sta 	zTemp0+1
.9ae4					_SSMNoCarry:
.9ae4	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; characters required.
.9ae7	20 6b ac	jsr $ac6b			jsr 	StringTempAllocate 			; allocate that many characters
.9aea	5a		phy				phy 								; save Y
.9aeb	a0 00		ldy #$00			ldy 	#0 							; start copying in.
.9aed					_SSMCopy:
.9aed	b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next character
.9aef	f0 09		beq $9afa			beq 	_SSMEString 				; no more to copy
.9af1	20 a9 ac	jsr $aca9			jsr 	StringTempWrite 			; and write it out.
.9af4	c8		iny				iny
.9af5	de 0a 04	dec $040a,x			dec 	NSMantissa0+2,x
.9af8	d0 f3		bne $9aed			bne 	_SSMCopy
.9afa					_SSMEString:
.9afa	7a		ply				ply
.9afb					_SSMExit:
.9afb	60		rts				rts
.9afc					_SSMNull:
.9afc	a9 00		lda #$00			lda 	#0
.9afe	20 6b ac	jsr $ac6b			jsr 	StringTempAllocate
.9b01	60		rts				rts
.9b02					SubstringInitial:
.9b02	da		phx				phx 								; save initial stack position
.9b03	08		php				php 								; save carry on stack indicating 2 parameters
.9b04	20 3e 9b	jsr $9b3e			jsr 	EvaluateString 				; get a string
.9b07	5a		phy				phy 								; calculate length to exponent.
.9b08	a0 ff		ldy #$ff			ldy 	#$FF
.9b0a					_SIFindLength:
.9b0a	c8		iny				iny
.9b0b	b1 36		lda ($36),y			lda 	(zTemp0),y
.9b0d	d0 fb		bne $9b0a			bne 	_SIFindLength
.9b0f	98		tya				tya
.9b10	9d 28 04	sta $0428,x			sta 	NSExponent,x
.9b13	7a		ply				ply
.9b14	e8		inx				inx
.9b15	20 68 a3	jsr $a368			jsr 	CheckComma 					; comma next
.9b18	20 77 9b	jsr $9b77			jsr 	Evaluate8BitInteger 		; get next parameter
.9b1b	28		plp				plp 								; is it the last parameter ?
.9b1c	90 07		bcc $9b25			bcc 	_SSIExit 					; if so, exit.
.9b1e	e8		inx				inx
.9b1f	20 68 a3	jsr $a368			jsr 	CheckComma 					; comma next
.9b22	20 77 9b	jsr $9b77			jsr 	Evaluate8BitInteger 		; get last parameter
.9b25					_SSIExit:
.9b25	fa		plx				plx
.9b26	20 60 a3	jsr $a360			jsr 	CheckRightBracket 			; check closing bracket
.9b29	60		rts				rts 								; exit

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/exprhelper.asm

.9b2a					EvaluateValue:
.9b2a	48		pha				pha
.9b2b	20 30 94	jsr $9430			jsr		EvaluateExpression 			; expression
.9b2e	20 45 95	jsr $9545			jsr 	Dereference					; derefernce it
.9b31	68		pla				pla
.9b32	60		rts				rts
.9b33					EvaluateNumber:
.9b33	20 2a 9b	jsr $9b2a			jsr 	EvaluateValue 				; get a value
.9b36	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if string.
.9b39	29 10		and #$10			and 	#NSBIsString
.9b3b	d0 16		bne $9b53			bne 	HelperTypeError
.9b3d	60		rts				rts
.9b3e					EvaluateString:
.9b3e	20 2a 9b	jsr $9b2a			jsr 	EvaluateValue 				; get a value
.9b41	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if string.
.9b44	29 10		and #$10			and 	#NSBIsString
.9b46	f0 0b		beq $9b53			beq 	HelperTypeError
.9b48					CopyAddressToTemp0:
.9b48	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address -> zTemp0
.9b4b	85 36		sta $36				sta 	zTemp0
.9b4d	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9b50	85 37		sta $37				sta 	zTemp0+1
.9b52	60		rts				rts
.9b53					HelperTypeError:
.9b53	4c 50 a9	jmp $a950			jmp 	TypeError
.9b56					EvaluateInteger:
.9b56	20 33 9b	jsr $9b33			jsr 	EvaluateNumber
.9b59	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check exponent is zero
.9b5c	d0 0a		bne $9b68			bne 	HelperValueError 			; if not, it's a float.
.9b5e	60		rts				rts
.9b5f					EvaluateUnsignedInteger:
.9b5f	20 56 9b	jsr $9b56			jsr 	EvaluateInteger 			; check integer is +ve
.9b62	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9b65	30 01		bmi $9b68			bmi 	HelperValueError
.9b67	60		rts				rts
.9b68					HelperValueError:
.9b68	4c 55 a9	jmp $a955			jmp 	ArgumentError
.9b6b					Evaluate16BitInteger:
.9b6b	20 5f 9b	jsr $9b5f			jsr	 	EvaluateUnsignedInteger		; get integer
.9b6e	bd 20 04	lda $0420,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.9b71	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.9b74	d0 f2		bne $9b68			bne 	HelperValueError
.9b76	60		rts				rts
.9b77					Evaluate8BitInteger:
.9b77	20 5f 9b	jsr $9b5f			jsr	 	EvaluateUnsignedInteger 	; get an integer
.9b7a	d0 ec		bne $9b68			bne 	HelperValueError
.9b7c	bd 20 04	lda $0420,x			lda 	NSMantissa3,x	 			; bytes 1, 2 & 3 must be zero
.9b7f	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.9b82	1d 10 04	ora $0410,x			ora 	NSMantissa1,x
.9b85	d0 e1		bne $9b68			bne 	HelperValueError
.9b87	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9b8a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/mult8x8.asm

.a7e2					Multiply8x8:
.a7e2	4a		lsr a		  		lsr 	a  							; prime the carry bit for the loop
.a7e3	85 36		sta $36			  	sta 	zTemp0
.a7e5	86 37		stx $37				stx 	zTemp0+1
.a7e7	a9 00		lda #$00			lda 	#0
.a7e9	a2 08		ldx #$08			ldx 	#8
.a7eb					_M88Loop:
.a7eb	90 03		bcc $a7f0			bcc 	_M88NoAdd
.a7ed	18		clc				clc
.a7ee	65 37		adc $37				adc 	zTemp0+1
.a7f0					_M88NoAdd:
.a7f0	6a		ror a				ror 	a
.a7f1	66 36		ror $36				ror 	zTemp0  					; pull another bit out for the next iteration
.a7f3	ca		dex				dex         						; inc/dec don't modify carry; only shifts and adds do
.a7f4	d0 f5		bne $a7eb			bne 	_M88Loop
.a7f6	85 37		sta $37				sta 	zTemp0+1 					; store high 8 bits.
.a7f8	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/utility.asm

.9b8b					NSMNegate:
.9b8b	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9b8e	49 80		eor #$80			eor 	#NSBIsNegative
.9b90	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9b93	60		rts				rts
.9b94					NSMNegateMantissa:
.9b94	38		sec				sec
.9b95	a9 00		lda #$00			lda 	#0
.9b97	fd 08 04	sbc $0408,x			sbc 	NSMantissa0,x
.9b9a	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9b9d	a9 00		lda #$00			lda 	#0
.9b9f	fd 10 04	sbc $0410,x			sbc 	NSMantissa1,x
.9ba2	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9ba5	a9 00		lda #$00			lda 	#0
.9ba7	fd 18 04	sbc $0418,x			sbc 	NSMantissa2,x
.9baa	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9bad	a9 00		lda #$00			lda 	#0
.9baf	fd 20 04	sbc $0420,x			sbc 	NSMantissa3,x
.9bb2	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9bb5	60		rts				rts
.9bb6					NSMShiftUpTwo:
.9bb6	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9bb9	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.9bbc	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9bbf	9d 12 04	sta $0412,x			sta 	NSMantissa1+2,x
.9bc2	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.9bc5	9d 1a 04	sta $041a,x			sta 	NSMantissa2+2,x
.9bc8	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.9bcb	9d 22 04	sta $0422,x			sta 	NSMantissa3+2,x
.9bce	bd 28 04	lda $0428,x			lda 	NSExponent,x
.9bd1	9d 2a 04	sta $042a,x			sta 	NSExponent+2,x
.9bd4	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9bd7	9d 02 04	sta $0402,x			sta 	NSStatus+2,x
.9bda	60		rts				rts
.9bdb					NSMSetZeroMantissaOnly:
.9bdb	a9 00		lda #$00			lda 	#0
.9bdd	80 08		bra $9be7			bra 	NSMSetMantissa
.9bdf					NSMSetZero:
.9bdf	a9 00		lda #$00			lda 	#0
.9be1					NSMSetByte:
.9be1	9e 28 04	stz $0428,x			stz 	NSExponent,x 				; zero exponent, as integer.
.9be4	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; status zero (integer)
.9be7					NSMSetMantissa:
.9be7	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; mantissa
.9bea	9e 10 04	stz $0410,x			stz 	NSMantissa1,x
.9bed	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.9bf0	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.9bf3	60		rts				rts
.9bf4					NSMShiftLeft:
.9bf4	18		clc				clc
.9bf5					NSMRotateLeft:
.9bf5	3e 08 04	rol $0408,x			rol 	NSMantissa0,x
.9bf8	3e 10 04	rol $0410,x			rol		NSMantissa1,x
.9bfb	3e 18 04	rol $0418,x			rol		NSMantissa2,x
.9bfe	3e 20 04	rol $0420,x			rol		NSMantissa3,x
.9c01	60		rts				rts
.9c02					NSMShiftRight:
.9c02	5e 20 04	lsr $0420,x			lsr 	NSMantissa3,x
.9c05	7e 18 04	ror $0418,x			ror		NSMantissa2,x
.9c08	7e 10 04	ror $0410,x			ror		NSMantissa1,x
.9c0b	7e 08 04	ror $0408,x			ror		NSMantissa0,x
.9c0e	60		rts				rts
.9c0f					NSMIsZero:
.9c0f	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.9c12	1d 18 04	ora $0418,x			ora		NSMantissa2,x
.9c15	1d 10 04	ora $0410,x			ora		NSMantissa1,x
.9c18	1d 08 04	ora $0408,x			ora		NSMantissa0,x
.9c1b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/asmcore.asm

.a7f9					Assemble_ora:
.a7f9	20 52 83	jsr $8352		jsr	AssembleGroup1
>a7fc	01					.byte $01
.a7fd					Assemble_and:
.a7fd	20 52 83	jsr $8352		jsr	AssembleGroup1
>a800	21					.byte $21
.a801					Assemble_eor:
.a801	20 52 83	jsr $8352		jsr	AssembleGroup1
>a804	41					.byte $41
.a805					Assemble_adc:
.a805	20 52 83	jsr $8352		jsr	AssembleGroup1
>a808	61					.byte $61
.a809					Assemble_sta:
.a809	20 52 83	jsr $8352		jsr	AssembleGroup1
>a80c	81					.byte $81
.a80d					Assemble_lda:
.a80d	20 52 83	jsr $8352		jsr	AssembleGroup1
>a810	a1					.byte $a1
.a811					Assemble_cmp:
.a811	20 52 83	jsr $8352		jsr	AssembleGroup1
>a814	c1					.byte $c1
.a815					Assemble_sbc:
.a815	20 52 83	jsr $8352		jsr	AssembleGroup1
>a818	e1					.byte $e1
.a819					Assemble_asl:
.a819	20 59 83	jsr $8359		jsr	AssembleGroup2
>a81c	02					.byte $02
>a81d	75					.byte $75
.a81e					Assemble_rol:
.a81e	20 59 83	jsr $8359		jsr	AssembleGroup2
>a821	22					.byte $22
>a822	75					.byte $75
.a823					Assemble_lsr:
.a823	20 59 83	jsr $8359		jsr	AssembleGroup2
>a826	42					.byte $42
>a827	75					.byte $75
.a828					Assemble_ror:
.a828	20 59 83	jsr $8359		jsr	AssembleGroup2
>a82b	62					.byte $62
>a82c	75					.byte $75
.a82d					Assemble_stx:
.a82d	20 59 83	jsr $8359		jsr	AssembleGroup2
>a830	82					.byte $82
>a831	50					.byte $50
.a832					Assemble_ldx:
.a832	20 59 83	jsr $8359		jsr	AssembleGroup2
>a835	a2					.byte $a2
>a836	d0					.byte $d0
.a837					Assemble_dec:
.a837	20 59 83	jsr $8359		jsr	AssembleGroup2
>a83a	c2					.byte $c2
>a83b	55					.byte $55
.a83c					Assemble_inc:
.a83c	20 59 83	jsr $8359		jsr	AssembleGroup2
>a83f	e2					.byte $e2
>a840	55					.byte $55
.a841					Assemble_stz:
.a841	20 59 83	jsr $8359		jsr	AssembleGroup2
>a844	60					.byte $60
>a845	44					.byte $44
.a846					Assemble_bit:
.a846	20 59 83	jsr $8359		jsr	AssembleGroup2
>a849	20					.byte $20
>a84a	55					.byte $55
.a84b					Assemble_sty:
.a84b	20 59 83	jsr $8359		jsr	AssembleGroup2
>a84e	80					.byte $80
>a84f	54					.byte $54
.a850					Assemble_ldy:
.a850	20 59 83	jsr $8359		jsr	AssembleGroup2
>a853	a0					.byte $a0
>a854	d5					.byte $d5
.a855					Assemble_cpy:
.a855	20 59 83	jsr $8359		jsr	AssembleGroup2
>a858	c0					.byte $c0
>a859	d4					.byte $d4
.a85a					Assemble_cpx:
.a85a	20 59 83	jsr $8359		jsr	AssembleGroup2
>a85d	e0					.byte $e0
>a85e	d0					.byte $d0
.a85f					Assemble_tsb:
.a85f	20 59 83	jsr $8359		jsr	AssembleGroup2
>a862	00					.byte $00
>a863	50					.byte $50
.a864					Assemble_trb:
.a864	20 59 83	jsr $8359		jsr	AssembleGroup2
>a867	10					.byte $10
>a868	50					.byte $50
.a869					Assemble_jsr:
.a869	20 59 83	jsr $8359		jsr	AssembleGroup2
>a86c	14					.byte $14
>a86d	10					.byte $10
.a86e					Assemble_jmp:
.a86e	20 59 83	jsr $8359		jsr	AssembleGroup2
>a871	40					.byte $40
>a872	10					.byte $10
.a873					Assemble_bpl:
.a873	20 aa 83	jsr $83aa		jsr	AssembleGroup3
>a876	10					.byte $10
.a877					Assemble_bmi:
.a877	20 aa 83	jsr $83aa		jsr	AssembleGroup3
>a87a	30					.byte $30
.a87b					Assemble_bvc:
.a87b	20 aa 83	jsr $83aa		jsr	AssembleGroup3
>a87e	50					.byte $50
.a87f					Assemble_bvs:
.a87f	20 aa 83	jsr $83aa		jsr	AssembleGroup3
>a882	70					.byte $70
.a883					Assemble_bcc:
.a883	20 aa 83	jsr $83aa		jsr	AssembleGroup3
>a886	90					.byte $90
.a887					Assemble_bcs:
.a887	20 aa 83	jsr $83aa		jsr	AssembleGroup3
>a88a	b0					.byte $b0
.a88b					Assemble_bne:
.a88b	20 aa 83	jsr $83aa		jsr	AssembleGroup3
>a88e	d0					.byte $d0
.a88f					Assemble_beq:
.a88f	20 aa 83	jsr $83aa		jsr	AssembleGroup3
>a892	f0					.byte $f0
.a893					Assemble_bra:
.a893	20 aa 83	jsr $83aa		jsr	AssembleGroup3
>a896	80					.byte $80
.a897					Assemble_brk:
.a897	20 e0 83	jsr $83e0		jsr	AssembleGroup4
>a89a	00					.byte $00
.a89b					Assemble_php:
.a89b	20 e0 83	jsr $83e0		jsr	AssembleGroup4
>a89e	08					.byte $08
.a89f					Assemble_clc:
.a89f	20 e0 83	jsr $83e0		jsr	AssembleGroup4
>a8a2	18					.byte $18
.a8a3					Assemble_plp:
.a8a3	20 e0 83	jsr $83e0		jsr	AssembleGroup4
>a8a6	28					.byte $28
.a8a7					Assemble_sec:
.a8a7	20 e0 83	jsr $83e0		jsr	AssembleGroup4
>a8aa	38					.byte $38
.a8ab					Assemble_rti:
.a8ab	20 e0 83	jsr $83e0		jsr	AssembleGroup4
>a8ae	40					.byte $40
.a8af					Assemble_pha:
.a8af	20 e0 83	jsr $83e0		jsr	AssembleGroup4
>a8b2	48					.byte $48
.a8b3					Assemble_cli:
.a8b3	20 e0 83	jsr $83e0		jsr	AssembleGroup4
>a8b6	58					.byte $58
.a8b7					Assemble_phy:
.a8b7	20 e0 83	jsr $83e0		jsr	AssembleGroup4
>a8ba	5a					.byte $5a
.a8bb					Assemble_rts:
.a8bb	20 e0 83	jsr $83e0		jsr	AssembleGroup4
>a8be	60					.byte $60
.a8bf					Assemble_pla:
.a8bf	20 e0 83	jsr $83e0		jsr	AssembleGroup4
>a8c2	68					.byte $68
.a8c3					Assemble_sei:
.a8c3	20 e0 83	jsr $83e0		jsr	AssembleGroup4
>a8c6	78					.byte $78
.a8c7					Assemble_ply:
.a8c7	20 e0 83	jsr $83e0		jsr	AssembleGroup4
>a8ca	7a					.byte $7a
.a8cb					Assemble_dey:
.a8cb	20 e0 83	jsr $83e0		jsr	AssembleGroup4
>a8ce	88					.byte $88
.a8cf					Assemble_txa:
.a8cf	20 e0 83	jsr $83e0		jsr	AssembleGroup4
>a8d2	8a					.byte $8a
.a8d3					Assemble_tya:
.a8d3	20 e0 83	jsr $83e0		jsr	AssembleGroup4
>a8d6	98					.byte $98
.a8d7					Assemble_txs:
.a8d7	20 e0 83	jsr $83e0		jsr	AssembleGroup4
>a8da	9a					.byte $9a
.a8db					Assemble_tay:
.a8db	20 e0 83	jsr $83e0		jsr	AssembleGroup4
>a8de	a8					.byte $a8
.a8df					Assemble_tax:
.a8df	20 e0 83	jsr $83e0		jsr	AssembleGroup4
>a8e2	aa					.byte $aa
.a8e3					Assemble_clv:
.a8e3	20 e0 83	jsr $83e0		jsr	AssembleGroup4
>a8e6	b8					.byte $b8
.a8e7					Assemble_tsx:
.a8e7	20 e0 83	jsr $83e0		jsr	AssembleGroup4
>a8ea	ba					.byte $ba
.a8eb					Assemble_iny:
.a8eb	20 e0 83	jsr $83e0		jsr	AssembleGroup4
>a8ee	c8					.byte $c8
.a8ef					Assemble_dex:
.a8ef	20 e0 83	jsr $83e0		jsr	AssembleGroup4
>a8f2	ca					.byte $ca
.a8f3					Assemble_cld:
.a8f3	20 e0 83	jsr $83e0		jsr	AssembleGroup4
>a8f6	d8					.byte $d8
.a8f7					Assemble_phx:
.a8f7	20 e0 83	jsr $83e0		jsr	AssembleGroup4
>a8fa	da					.byte $da
.a8fb					Assemble_stp:
.a8fb	20 e0 83	jsr $83e0		jsr	AssembleGroup4
>a8fe	db					.byte $db
.a8ff					Assemble_inx:
.a8ff	20 e0 83	jsr $83e0		jsr	AssembleGroup4
>a902	e8					.byte $e8
.a903					Assemble_nop:
.a903	20 e0 83	jsr $83e0		jsr	AssembleGroup4
>a906	ea					.byte $ea
.a907					Assemble_sed:
.a907	20 e0 83	jsr $83e0		jsr	AssembleGroup4
>a90a	f8					.byte $f8
.a90b					Assemble_plx:
.a90b	20 e0 83	jsr $83e0		jsr	AssembleGroup4
>a90e	fa					.byte $fa

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/constants.asm

.a90f					DecimalScalarTable:
>a90f	66 66 66 66				.dword $66666666 ; 0.1
>a913	de					.byte $de
>a914	1f 85 eb 51				.dword $51eb851f ; 0.01
>a918	db					.byte $db
>a919	4c 37 89 41				.dword $4189374c ; 0.001
>a91d	d8					.byte $d8
>a91e	ac 8b db 68				.dword $68db8bac ; 0.0001
>a922	d4					.byte $d4
>a923	24 d6 e2 53				.dword $53e2d624 ; 1e-05
>a927	d1					.byte $d1
>a928	83 de 1b 43				.dword $431bde83 ; 1e-06
>a92c	ce					.byte $ce
>a92d	6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>a931	ca					.byte $ca
>a932	89 3b e6 55				.dword $55e63b89 ; 1e-08
>a936	c7					.byte $c7
>a937	a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>a93b	c4					.byte $c4
>a93c	67 7f f3 6d				.dword $6df37f67 ; 1e-10
>a940	c0					.byte $c0
>a941	86 ff f5 57				.dword $57f5ff86 ; 1e-11
>a945	bd					.byte $bd

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.asm

.a946					SyntaxError:
.a946	a9 02		lda #$02		lda	#2
.a948	4c 27 90	jmp $9027		jmp	ErrorHandler
.a94b					RangeError:
.a94b	a9 04		lda #$04		lda	#4
.a94d	4c 27 90	jmp $9027		jmp	ErrorHandler
.a950					TypeError:
.a950	a9 05		lda #$05		lda	#5
.a952	4c 27 90	jmp $9027		jmp	ErrorHandler
.a955					ArgumentError:
.a955	a9 07		lda #$07		lda	#7
.a957	4c 27 90	jmp $9027		jmp	ErrorHandler
.a95a					NotDoneError:
.a95a	a9 0c		lda #$0c		lda	#12
.a95c	4c 27 90	jmp $9027		jmp	ErrorHandler
.a95f					ErrorText:
>a95f	42 72 65 61 6b 00			.text	"Break",0
>a965	53 79 6e 74 61 78 20 65			.text	"Syntax error",0
>a96d	72 72 6f 72 00
>a972	44 69 76 69 73 69 6f 6e			.text	"Division by zero",0
>a97a	20 62 79 20 7a 65 72 6f 00
>a983	4f 75 74 20 6f 66 20 52			.text	"Out of Range",0
>a98b	61 6e 67 65 00
>a990	54 79 70 65 20 6d 69 73			.text	"Type mismatch",0
>a998	6d 61 74 63 68 00
>a99e	4f 75 74 20 6f 66 20 6d			.text	"Out of memory",0
>a9a6	65 6d 6f 72 79 00
>a9ac	49 6c 6c 65 67 61 6c 20			.text	"Illegal argument",0
>a9b4	61 72 67 75 6d 65 6e 74 00
>a9bd	53 74 6f 70 00				.text	"Stop",0
>a9c2	53 74 72 69 6e 67 20 74			.text	"String too long",0
>a9ca	6f 6f 20 6c 6f 6e 67 00
>a9d2	41 73 73 65 72 74 69 6f			.text	"Assertion failed",0
>a9da	6e 20 66 61 69 6c 65 64 00
>a9e3	4f 75 74 20 6f 66 20 64			.text	"Out of data",0
>a9eb	61 74 61 00
>a9ef	55 6e 69 6d 70 6c 65 6d			.text	"Unimplemented",0
>a9f7	65 6e 74 65 64 00
>a9fd	4e 6f 20 73 75 63 68 20			.text	"No such line number",0
>aa05	6c 69 6e 65 20 6e 75 6d 62 65 72 00
>aa11	52 65 74 75 72 6e 20 77			.text	"Return without Gosub",0
>aa19	69 74 68 6f 75 74 20 47 6f 73 75 62 00
>aa26	55 6e 74 69 6c 20 77 69			.text	"Until without Repeat",0
>aa2e	74 68 6f 75 74 20 52 65 70 65 61 74 00
>aa3b	57 65 6e 64 20 77 69 74			.text	"Wend without While",0
>aa43	68 6f 75 74 20 57 68 69 6c 65 00
>aa4e	4e 65 78 74 20 77 69 74			.text	"Next without For",0
>aa56	68 6f 75 74 20 46 6f 72 00
>aa5f	42 41 53 49 43 20 53 74			.text	"BASIC Stack full",0
>aa67	61 63 6b 20 66 75 6c 6c 00
>aa70	4f 70 65 6e 20 53 74 72			.text	"Open Structure",0
>aa78	75 63 74 75 72 65 00
>aa7f	45 6e 64 50 72 6f 63 20			.text	"EndProc without call",0
>aa87	77 69 74 68 6f 75 74 20 63 61 6c 6c 00
>aa94	41 72 72 61 79 20 61 6c			.text	"Array already defined",0
>aa9c	72 65 61 64 79 20 64 65 66 69 6e 65 64 00
>aaaa	41 72 72 61 79 20 73 69			.text	"Array size",0
>aab2	7a 65 00
>aab5	42 61 64 20 61 72 72 61			.text	"Bad array index",0
>aabd	79 20 69 6e 64 65 78 00

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/timestamp.asm

>aac5	42 75 69 6c 74 20 46 72			.text "Built Friday 07-Oct-2022. Build 706."
>aacd	69 64 61 79 20 30 37 2d 4f 63 74 2d 32 30 32 32
>aadd	2e 20 42 75 69 6c 64 20 37 30 36 2e

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/hardware/junior/extern.asm

.aae9					EXTPrintCharacter:
.aae9	48		pha				pha
.aaea	da		phx				phx
.aaeb	5a		phy				phy
.aaec	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.aaef	7a		ply				ply
.aaf0	fa		plx				plx
.aaf1	68		pla				pla
.aaf2	60		rts				rts
.aaf3					EXTInputSingleCharacter:
.aaf3	da		phx				phx
.aaf4	5a		phy				phy
.aaf5					_EISCWait:
.aaf5	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.aaf8	c9 00		cmp #$00			cmp 	#0
.aafa	f0 f9		beq $aaf5			beq 	_EISCWait
.aafc	7a		ply				ply
.aafd	fa		plx				plx
.aafe	60		rts				rts
.aaff					EXTInputLine:
.aaff	a2 00		ldx #$00			ldx 	#0 							; position in line <- start of line
.ab01					_ILLoop:
.ab01	da		phx				phx 								; read character in
.ab02	20 cf ff	jsr $ffcf			jsr 	$FFCF
.ab05	fa		plx				plx
.ab06	c9 08		cmp #$08			cmp 	#8 							; backspace, CBM doesn't need this.
.ab08	f0 12		beq $ab1c			beq 	_ILBackspace
.ab0a	c9 0d		cmp #$0d			cmp 	#13							; exit ?
.ab0c	f0 15		beq $ab23			beq 	_ILExit
.ab0e	c9 20		cmp #$20			cmp 	#32 						; ignore other control
.ab10	90 ef		bcc $ab01			bcc 	_ILLoop
.ab12	e0 50		cpx #$50			cpx 	#MaxLineSize 				; already full buffer
.ab14	f0 eb		beq $ab01			beq 	_ILLoop
.ab16	9d a6 05	sta $05a6,x			sta 	lineBuffer,x 				; save it
.ab19	e8		inx				inx
.ab1a	80 e5		bra $ab01			bra 	_ILLoop
.ab1c					_ILBackspace:
.ab1c	e0 00		cpx #$00			cpx 	#0  						; can't backspace, start of line.
.ab1e	f0 e1		beq $ab01			beq 	_ILLoop
.ab20	ca		dex				dex 								; back one.
.ab21	80 de		bra $ab01			bra 	_ILLoop
.ab23					_ILExit:
.ab23	20 e9 aa	jsr $aae9			jsr 	EXTPrintCharacter
.ab26	9e a6 05	stz $05a6,x			stz 	lineBuffer,x 				; make ASCIIZ and exit with address in XA
.ab29	60		rts				rts
.ab2a					EXTBreakCheck:
.ab2a	4c e1 ff	jmp $ffe1			jmp		$FFE1

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/delete.asm

.ab2d					MemoryDeleteLine:
.ab2d	20 4c ab	jsr $ab4c			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.ab30	b2 30		lda ($30)			lda 	(codePtr) 					; size to delete => y
.ab32	a8		tay				tay
.ab33					_MDDLLoop:
.ab33	b1 30		lda ($30),y			lda 	(codePtr),y 				; copy down
.ab35	92 30		sta ($30)			sta 	(codePtr)
.ab37	a5 30		lda $30				lda 	codePtr 					; check done the lot.
.ab39	c5 3a		cmp $3a				cmp 	zTemp2
.ab3b	d0 07		bne $ab44			bne 	_MDLDLNext
.ab3d	a5 31		lda $31				lda 	codePtr+1
.ab3f	c5 3b		cmp $3b				cmp 	zTemp2+1
.ab41	d0 01		bne $ab44			bne 	_MDLDLNext
.ab43					_MDDLExit:
.ab43	60		rts				rts
.ab44					_MDLDLNext:
.ab44	e6 30		inc $30				inc 	codePtr						; next byte
.ab46	d0 eb		bne $ab33			bne 	_MDDLLoop
.ab48	e6 31		inc $31				inc 	codePtr+1
.ab4a	80 e7		bra $ab33			bra 	_MDDLLoop
.ab4c					IMemoryFindEnd:
.ab4c	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.ab4e	85 3a		sta $3a				sta 	0+zTemp2
.ab50	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.ab52	85 3b		sta $3b				sta 	1+zTemp2
.ab54					_MDLFELoop:
.ab54	b2 3a		lda ($3a)			lda 	(zTemp2)
.ab56	f0 0b		beq $ab63			beq 	_MDLFEExit
.ab58	18		clc				clc
.ab59	65 3a		adc $3a				adc 	zTemp2
.ab5b	85 3a		sta $3a				sta 	zTemp2
.ab5d	90 f5		bcc $ab54			bcc 	_MDLFELoop
.ab5f	e6 3b		inc $3b				inc 	zTemp2+1
.ab61	80 f1		bra $ab54			bra 	_MDLFELoop
.ab63					_MDLFEExit:
.ab63	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/insert.asm

.ab64					MemoryInsertLine:
.ab64	08		php				php
.ab65	20 4c ab	jsr $ab4c			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.ab68	a5 3b		lda $3b				lda 	zTemp2+1 					; space ?
.ab6a	1a		inc a				inc 	a
.ab6b	c9 7f		cmp #$7f			cmp 	#(BasicEnd >> 8)-1
.ab6d	b0 36		bcs $aba5			bcs 	_MDLIError
.ab6f	28		plp				plp
.ab70	90 08		bcc $ab7a			bcc 	_MDLIFound
.ab72	a5 3a		lda $3a				lda 	zTemp2 						; if CS on entry append.
.ab74	85 30		sta $30				sta 	codePtr
.ab76	a5 3b		lda $3b				lda 	zTemp2+1
.ab78	85 31		sta $31				sta 	codePtr+1
.ab7a					_MDLIFound:
.ab7a	ad a6 04	lda $04a6			lda 	tokenOffset 				; insert gap in Y, the offset, e.g. length of the new line
.ab7d	a8		tay				tay
.ab7e					_MDLIInsert:
.ab7e	b2 3a		lda ($3a)			lda 	(zTemp2) 					; shift one byte up , at least one covers end case.
.ab80	91 3a		sta ($3a),y			sta 	(zTemp2),y 					; work from top down.
.ab82	a5 30		lda $30				lda 	codePtr 					; done insert point ?
.ab84	c5 3a		cmp $3a				cmp 	zTemp2
.ab86	d0 06		bne $ab8e			bne 	_MDLINext
.ab88	a5 31		lda $31				lda 	codePtr+1
.ab8a	c5 3b		cmp $3b				cmp 	zTemp2+1
.ab8c	f0 0a		beq $ab98			beq 	_MDLIHaveSpace
.ab8e					_MDLINext:
.ab8e	a5 3a		lda $3a				lda 	zTemp2 						; if no, keep zTemp2 going backwards
.ab90	d0 02		bne $ab94			bne 	_MDLINoBorrow
.ab92	c6 3b		dec $3b				dec 	zTemp2+1
.ab94					_MDLINoBorrow:
.ab94	c6 3a		dec $3a				dec 	zTemp2
.ab96	80 e6		bra $ab7e			bra 	_MDLIInsert
.ab98					_MDLIHaveSpace:
.ab98	ac a6 04	ldy $04a6			ldy 	tokenOffset 				; bytes to copy
.ab9b	88		dey				dey 								; from offset-1 to 0
.ab9c					_MDLICopy:
.ab9c	b9 a6 04	lda $04a6,y			lda 	tokenOffset,y
.ab9f	91 30		sta ($30),y			sta 	(codePtr),y
.aba1	88		dey				dey
.aba2	10 f8		bpl $ab9c			bpl 	_MDLICopy
.aba4	60		rts				rts
.aba5					_MDLIError:
.aba5	a9 06		lda #$06		lda	#6
.aba7	4c 27 90	jmp $9027		jmp	ErrorHandler
.abaa					MDLAppendLine:
.abaa	86 37		stx $37				stx 	zTemp0+1 					; save new line at zTemp0
.abac	85 36		sta $36				sta 	zTemp0
.abae	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.abb0	85 38		sta $38				sta 	0+zTemp1
.abb2	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.abb4	85 39		sta $39				sta 	1+zTemp1
.abb6	b2 38		lda ($38)			lda 	(zTemp1)
.abb8	d0 0a		bne $abc4			bne 	_MDLANoInitialise
.abba	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.abbc	8d 48 06	sta $0648			sta 	0+AppendPointer
.abbf	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.abc1	8d 49 06	sta $0649			sta 	1+AppendPointer
.abc4					_MDLANoInitialise:
.abc4	18		clc				clc
.abc5	ad 48 06	lda $0648			lda 	AppendPointer 				; copy append pointer to zTemp1 adding the offset as you go
.abc8	85 38		sta $38				sta 	zTemp1
.abca	72 36		adc ($36)			adc 	(zTemp0)
.abcc	8d 48 06	sta $0648			sta 	AppendPointer
.abcf	ad 49 06	lda $0649			lda 	AppendPointer+1
.abd2	85 39		sta $39				sta 	zTemp1+1
.abd4	69 00		adc #$00			adc 	#0
.abd6	8d 49 06	sta $0649			sta 	AppendPointer+1
.abd9	a0 00		ldy #$00			ldy 	#0
.abdb					_MDLACopy:
.abdb	b1 36		lda ($36),y			lda 	(zTemp0),y 					; copy new line in
.abdd	91 38		sta ($38),y			sta 	(zTemp1),y
.abdf	c8		iny				iny
.abe0	98		tya				tya
.abe1	d2 36		cmp ($36)			cmp 	(zTemp0) 					; done whole line
.abe3	d0 f6		bne $abdb			bne 	_MDLACopy
.abe5	a9 00		lda #$00			lda 	#0 							; end of program.
.abe7	91 38		sta ($38),y			sta 	(zTemp1),y
.abe9	60		rts				rts
.0648					AppendPointer:
>0648							.fill 	2

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/memory.asm

.9c1c					MemoryNew:
.9c1c	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.9c1e	85 30		sta $30				sta 	codePtr
.9c20	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.9c22	85 31		sta $31				sta 	codePtr+1
.9c24	a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.9c26	92 30		sta ($30)			sta 	(codePtr)
.9c28	60		rts				rts
.9c29					MemoryInline:
.9c29	98		tya				tya 								; put address into stack,x
.9c2a	18		clc				clc
.9c2b	65 30		adc $30				adc 	codePtr
.9c2d	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9c30	a5 31		lda $31				lda 	codePtr+1
.9c32	69 00		adc #$00			adc 	#0
.9c34	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9c37	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.9c3a	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.9c3d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/search.asm

.9c3e					MemorySearch:
.9c3e	85 36		sta $36				sta 	zTemp0 						; save line number zTemp0
.9c40	86 37		stx $37				stx 	zTemp0+1
.9c42	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.9c44	85 30		sta $30				sta 	codePtr
.9c46	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.9c48	85 31		sta $31				sta 	codePtr+1
.9c4a					_MTAXLoop:
.9c4a	b2 30		lda ($30)			lda 	(codePtr)
.9c4c	18		clc				clc
.9c4d	f0 21		beq $9c70			beq 	_MTAXExit 					; reached end, exit with CC.
.9c4f	a0 01		ldy #$01			ldy 	#1 							; calculate current line# - requested line#
.9c51	b1 30		lda ($30),y			lda 	(codePtr),y
.9c53	38		sec				sec
.9c54	e5 36		sbc $36				sbc 	zTemp0
.9c56	85 38		sta $38				sta 	zTemp1 						; save interim to set Z
.9c58	c8		iny				iny 								; do the MSB
.9c59	b1 30		lda ($30),y			lda 	(codePtr),y
.9c5b	e5 37		sbc $37				sbc 	zTemp0+1
.9c5d	05 38		ora $38				ora 	zTemp1
.9c5f	f0 0f		beq $9c70			beq 	_MTAXExit	 				; found
.9c61	b0 0d		bcs $9c70			bcs 	_MTAXExit 					; current < required exit
.9c63	18		clc				clc
.9c64	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.9c66	65 30		adc $30				adc 	codePtr
.9c68	85 30		sta $30				sta 	codePtr
.9c6a	90 02		bcc $9c6e			bcc 	_CREExit
.9c6c	e6 31		inc $31				inc 	codePtr+1
.9c6e					_CREExit:
.9c6e	80 da		bra $9c4a			bra 	_MTAXLoop
.9c70					_MTAXExit:
.9c70	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/bytes.asm

.9c71					StackPushByte:
.9c71	48		pha				pha 								; save byte
.9c72	a5 34		lda $34				lda 	BasicStack
.9c74	d0 09		bne $9c7f			bne 	_SPBNoBorrow
.9c76	c6 35		dec $35				dec 	BasicStack+1
.9c78	48		pha				pha
.9c79	a5 35		lda $35				lda 	BasicStack+1
.9c7b	c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.9c7d	90 06		bcc $9c85			bcc 	_SPBMemory
.9c7f					_SPBNoBorrow:
.9c7f	c6 34		dec $34				dec 	BasicStack
.9c81	68		pla				pla 								; get back and write
.9c82	92 34		sta ($34)			sta 	(BasicStack)
.9c84	60		rts				rts
.9c85					_SPBMemory:
.9c85	a9 12		lda #$12		lda	#18
.9c87	4c 27 90	jmp $9027		jmp	ErrorHandler
.9c8a					StackPopByte:
.9c8a	b2 34		lda ($34)			lda 	(BasicStack)
.9c8c	e6 34		inc $34				inc 	BasicStack
.9c8e	d0 02		bne $9c92			bne 	_SPBNoCarry
.9c90	e6 35		inc $35				inc 	BasicStack+1
.9c92					_SPBNoCarry:
.9c92	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/frames.asm

.9c93					StackOpen:
.9c93	48		pha				pha 								; save frame byte
.9c94	29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.9c96	0a		asl a				asl 	a 							; claim twice this for storage
.9c97	49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.9c99	38		sec				sec 								; so basically subtracting from
.9c9a	65 34		adc $34				adc 	basicStack 	 				; basicStack
.9c9c	85 34		sta $34				sta 	basicStack
.9c9e	b0 08		bcs $9ca8			bcs 	_SONoBorrow
.9ca0	c6 35		dec $35				dec 	basicStack+1
.9ca2	a5 35		lda $35				lda 	basicStack+1 				; have we reached stack overflow
.9ca4	c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.9ca6	90 04		bcc $9cac			bcc 	_SOMemory
.9ca8					_SONoBorrow:
.9ca8	68		pla				pla 								; get marker back and write at TOS
.9ca9	92 34		sta ($34)			sta 	(basicStack)
.9cab	60		rts				rts
.9cac					_SOMemory:
.9cac	a9 12		lda #$12		lda	#18
.9cae	4c 27 90	jmp $9027		jmp	ErrorHandler
.9cb1					StackClose:
.9cb1	b2 34		lda ($34)			lda 	(basicStack) 				; get TOS marker
.9cb3	29 0f		and #$0f			and 	#$0F 						; bytes to add back
.9cb5	0a		asl a				asl 	a 							; claim twice this.
.9cb6	65 34		adc $34				adc 	basicStack 					; add to the stack pointer.
.9cb8	85 34		sta $34				sta 	basicStack
.9cba	90 02		bcc $9cbe			bcc 	_SCExit
.9cbc	e6 35		inc $35				inc 	basicStack+1
.9cbe					_SCExit:
.9cbe	60		rts				rts
.9cbf					StackCheckFrame:
.9cbf	48		pha				pha
.9cc0					_StackRemoveLocals:
.9cc0	b2 34		lda ($34)			lda 	(basicStack) 				; check for local, keep popping them
.9cc2	c9 03		cmp #$03			cmp 	#STK_LOCALS+1
.9cc4	b0 05		bcs $9ccb			bcs 	_SCNoLocal
.9cc6	20 07 a3	jsr $a307			jsr 	LocalPopValue
.9cc9	80 f5		bra $9cc0			bra 	_StackRemoveLocals
.9ccb					_SCNoLocal:
.9ccb	68		pla				pla
.9ccc	52 34		eor ($34)			eor 	(basicStack) 				; xor with toS marker
.9cce	29 f0		and #$f0			and 	#$F0 						; check type bits
.9cd0	d0 01		bne $9cd3			bne 	_SCFError 					; different, we have structures mixed up
.9cd2	60		rts				rts
.9cd3					_SCFError:
.9cd3	8a		txa				txa 								; report error X
.9cd4	4c 27 90	jmp $9027			jmp 	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/location.asm

.9cd7					STKSaveCodePosition:
.9cd7	5a		phy				phy
.9cd8	98		tya				tya 								; save Y
.9cd9	a0 05		ldy #$05			ldy 	#5
.9cdb	91 34		sta ($34),y			sta 	(basicStack),y
.9cdd	88		dey				dey 								; save Code Pointer
.9cde					_STKSaveLoop:
.9cde	b9 2f 00	lda $002f,y			lda 	safePtr-1,y 				; allows us to access the pointer w/out issues.
.9ce1	91 34		sta ($34),y			sta 	(basicStack),y
.9ce3	88		dey				dey
.9ce4	d0 f8		bne $9cde			bne 	_STKSaveLoop
.9ce6	7a		ply				ply
.9ce7	60		rts				rts
.9ce8					STKLoadCodePosition:
.9ce8	a0 01		ldy #$01			ldy 	#1 							; load code pointer back
.9cea					_STKLoadLoop:
.9cea	b1 34		lda ($34),y			lda 	(basicStack),y
.9cec	99 2f 00	sta $002f,y			sta 	safePtr-1,y
.9cef	c8		iny				iny
.9cf0	c0 05		cpy #$05			cpy 	#5
.9cf2	d0 f6		bne $9cea			bne 	_STKLoadLoop
.9cf4	b1 34		lda ($34),y			lda 	(basicStack),y 				; get Y offset
.9cf6	a8		tay				tay
.9cf7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/setup.asm

.9cf8					StackReset:
.9cf8	a9 ff		lda #$ff			lda 	#((BasicStackBase+BasicStackSize-1) & $FF)
.9cfa	85 34		sta $34				sta 	0+basicStack
.9cfc	a9 0f		lda #$0f			lda 	#((BasicStackBase+BasicStackSize-1) >> 8)
.9cfe	85 35		sta $35				sta 	1+basicStack
.9d00	a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.9d02	92 34		sta ($34)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.9d04	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/concrete.asm

.abea					StringConcrete:
.abea	5a		phy				phy 								; save position on stack
.abeb	20 ee 98	jsr $98ee			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.abee	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy target string to zTemp1
.abf1	85 38		sta $38				sta 	zTemp1
.abf3	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.abf6	85 39		sta $39				sta 	zTemp1+1
.abf8	a0 ff		ldy #$ff			ldy 	#$FF	 					; calculate string length
.abfa					_SALength:
.abfa	c8		iny				iny
.abfb	b1 38		lda ($38),y			lda 	(zTemp1),y
.abfd	d0 fb		bne $abfa			bne 	_SALength
.abff	c0 fd		cpy #$fd			cpy 	#253 						; string too long
.ac01	b0 3f		bcs $ac42			bcs 	_SALengthError
.ac03	98		tya				tya 				 				; length of the new string
.ac04	18		clc				clc
.ac05	69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.ac07	90 02		bcc $ac0b			bcc 	_SAHaveLength
.ac09	a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.ac0b					_SAHaveLength:
.ac0b	48		pha				pha 								; save length.
.ac0c	38		sec				sec
.ac0d	49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.ac0f	6d 8e 04	adc $048e			adc 	StringMemory
.ac12	8d 8e 04	sta $048e			sta 	StringMemory
.ac15	85 3a		sta $3a				sta 	zTemp2 						; update storage address
.ac17	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; update mantissa address
.ac1a	a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.ac1c	6d 8f 04	adc $048f			adc 	StringMemory+1
.ac1f	8d 8f 04	sta $048f			sta 	StringMemory+1
.ac22	85 3b		sta $3b				sta 	zTemp2+1
.ac24	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.ac27	68		pla				pla 								; save length-3 (chars allowed) in first byte
.ac28	38		sec				sec
.ac29	e9 03		sbc #$03			sbc 	#3
.ac2b	92 3a		sta ($3a)			sta 	(zTemp2)
.ac2d	a9 00		lda #$00			lda 	#0 							; clear the status byte.
.ac2f	a0 01		ldy #$01			ldy 	#1
.ac31	91 3a		sta ($3a),y			sta 	(zTemp2),y
.ac33					_SACopyNewString:
.ac33	a0 00		ldy #$00			ldy 	#0
.ac35					_SACopyNSLoop:
.ac35	b1 38		lda ($38),y			lda 	(zTemp1),y 					; get character
.ac37	c8		iny				iny 								; write two on in string storage
.ac38	c8		iny				iny
.ac39	91 3a		sta ($3a),y			sta 	(zTemp2),y
.ac3b	88		dey				dey 								; this makes it one one.
.ac3c	c9 00		cmp #$00			cmp 	#0 							; until EOS copied
.ac3e	d0 f5		bne $ac35			bne 	_SACopyNSLoop
.ac40	7a		ply				ply
.ac41	60		rts				rts
.ac42					_SALengthError:
.ac42	a9 09		lda #$09		lda	#9
.ac44	4c 27 90	jmp $9027		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/stringalloc.asm

.ac47					StringSystemInitialise:
.ac47	a9 ff		lda #$ff			lda 	#((EndVariableSpace-1) & $FF)
.ac49	8d 8e 04	sta $048e			sta 	0+StringMemory
.ac4c	a9 1f		lda #$1f			lda 	#((EndVariableSpace-1) >> 8)
.ac4e	8d 8f 04	sta $048f			sta 	1+StringMemory
.ac51	9c ff 1f	stz $1fff			stz 	EndVariableSpace-1 			; put a zero at the end, so know end of string memory.
.ac54	60		rts				rts
.ac55					StringSpaceInitialise:
.ac55	20 ee 98	jsr $98ee			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.ac58	a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.ac5a	8d 90 04	sta $0490			sta 	StringInitialised
.ac5d	ad 8e 04	lda $048e			lda 	StringMemory 				; allocate 256 bytes for one concreted string
.ac60	8d 91 04	sta $0491			sta 	StringTempPointer
.ac63	ad 8f 04	lda $048f			lda 	StringMemory+1
.ac66	3a		dec a				dec 	a
.ac67	8d 92 04	sta $0492			sta 	StringTempPointer+1
.ac6a	60		rts				rts
.ac6b					StringTempAllocate:
.ac6b	c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.ac6d	b0 35		bcs $aca4			bcs 	_STALength
.ac6f	2c 90 04	bit $0490			bit 	StringInitialised 			; already initialised
.ac72	30 05		bmi $ac79			bmi 	_STAAllocate
.ac74	48		pha				pha 								; save value to subtract.
.ac75	20 55 ac	jsr $ac55			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.ac78	68		pla				pla 								; restore it
.ac79					_STAAllocate:
.ac79	49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.ac7b	18		clc				clc  								; deliberate allows one more
.ac7c	6d 91 04	adc $0491			adc 	StringTempPointer 			; subtract from temp pointer
.ac7f	8d 91 04	sta $0491			sta 	StringTempPointer
.ac82	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; address in mantissa
.ac85	85 3c		sta $3c				sta 	zsTemp 						; and zsTemp
.ac87	ad 92 04	lda $0492			lda 	StringTempPointer+1
.ac8a	69 ff		adc #$ff			adc 	#$FF
.ac8c	8d 92 04	sta $0492			sta 	StringTempPointer+1
.ac8f	85 3d		sta $3d				sta 	zsTemp+1
.ac91	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.ac94	9e 18 04	stz $0418,x			stz 	NSMantissa2,x 				; set the typing data
.ac97	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.ac9a	a9 10		lda #$10			lda 	#NSTString
.ac9c	9d 00 04	sta $0400,x			sta 	NSStatus,x
.ac9f	a9 00		lda #$00			lda 	#0 							; clear the target string
.aca1	92 3c		sta ($3c)			sta 	(zsTemp)
.aca3	60		rts				rts
.aca4					_STALength:
.aca4	a9 09		lda #$09		lda	#9
.aca6	4c 27 90	jmp $9027		jmp	ErrorHandler
.aca9					StringTempWrite:
.aca9	48		pha				pha
.acaa	92 3c		sta ($3c)			sta 	(zsTemp)
.acac	e6 3c		inc $3c				inc 	zsTemp
.acae	d0 02		bne $acb2			bne 	_STWNoCarry
.acb0	e6 3d		inc $3d				inc 	zsTemp+1
.acb2					_STWNoCarry:
.acb2	a9 00		lda #$00			lda 	#0
.acb4	92 3c		sta ($3c)			sta 	(zsTemp)
.acb6	68		pla				pla
.acb7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/backload.asm

.9d05					BackloadProgram:
.9d05	a2 ff		ldx #$ff			ldx 	#$FF
.9d07	20 2f 9d	jsr $9d2f			jsr 	BLReadByte
.9d0a	30 1f		bmi $9d2b			bmi 	_BPExit
.9d0c					_BPCopy:
.9d0c	e8		inx				inx  								; copy byte in
.9d0d	9d a6 05	sta $05a6,x			sta 	lineBuffer,x
.9d10	9e a7 05	stz $05a7,x			stz 	lineBuffer+1,x
.9d13	20 2f 9d	jsr $9d2f			jsr 	BLReadByte 					; read next byte
.9d16	30 0a		bmi $9d22			bmi 	_BPEndLine 					; -ve = EOL
.9d18	c9 09		cmp #$09			cmp 	#9 							; handle TAB
.9d1a	d0 02		bne $9d1e			bne 	_BPNotTab
.9d1c	a9 20		lda #$20			lda 	#' '
.9d1e					_BPNotTab:
.9d1e	c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.9d20	b0 ea		bcs $9d0c			bcs 	_BPCopy
.9d22					_BPEndLine:
.9d22	20 58 a0	jsr $a058			jsr 	TokeniseLine 				; tokenise the line.
.9d25	38		sec				sec 								; append not insert
.9d26	20 64 ab	jsr $ab64			jsr 	MemoryInsertLine 			; append to current program
.9d29	80 da		bra $9d05			bra 	BackloadProgram
.9d2b					_BPExit:
.9d2b	20 58 86	jsr $8658			jsr 	ClearCommand 				; clear variables etc.
.9d2e	60		rts				rts
.9d2f					BLReadByte:
.9d2f					_BLLoad:
.9d2f	ad 00 30	lda $3000			lda 	$3000 						; hardcoded in the makefile.
.9d32	ee 30 9d	inc $9d30			inc 	_BLLoad+1
.9d35	d0 03		bne $9d3a			bne 	_BLNoCarry
.9d37	ee 31 9d	inc $9d31			inc 	_BLLoad+2
.9d3a					_BLNoCarry:
.9d3a	c9 00		cmp #$00			cmp 	#0
.9d3c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/searchtokens.asm

.9d3d					TokeniseSearchTable:
.9d3d	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token.
.9d3f	85 36		sta $36				sta 	zTemp0
.9d41	a0 00		ldy #$00			ldy 	#0
.9d43	a9 80		lda #$80			lda 	#$80 						; token #
.9d45	85 38		sta $38				sta 	zTemp1
.9d47					_TSTLoop:
.9d47	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.9d49	30 49		bmi $9d94			bmi 	_TSTFail 					; -ve = end of table
.9d4b	f0 2e		beq $9d7b			beq 	_TSTNext 					; zero, check next it's a dummy
.9d4d	c8		iny				iny 								; get the hash
.9d4e	b1 36		lda ($36),y			lda 	(zTemp0),y
.9d50	88		dey				dey
.9d51	cd 83 04	cmp $0483			cmp 	identHash 					; check they match, if not go to next
.9d54	d0 25		bne $9d7b			bne 	_TSTNext
.9d56	ad 82 04	lda $0482			lda 	identTypeEnd 				; length of identifier
.9d59	38		sec				sec
.9d5a	ed 80 04	sbc $0480			sbc 	identStart
.9d5d	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; no match, then return.
.9d5f	d0 1a		bne $9d7b			bne 	_TSTNext
.9d61	5a		phy				phy 								; save Y , we might fail
.9d62	c8		iny				iny 								; point to text
.9d63	c8		iny				iny
.9d64	ae 80 04	ldx $0480			ldx 	identStart 					; offset in line buffer in X
.9d67					_TSTCompareName:
.9d67	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; compare text.
.9d6a	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.9d6c	d0 0c		bne $9d7a			bne 	_TSTNextPullY 				; fail, pullY and do next
.9d6e	e8		inx				inx
.9d6f	c8		iny				iny
.9d70	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; complete match.
.9d73	d0 f2		bne $9d67			bne 	_TSTCompareName
.9d75	7a		ply				ply 								; throw Y
.9d76	a5 38		lda $38				lda 	zTemp1 						; get token #
.9d78	38		sec				sec 								; return with CS = passed.
.9d79	60		rts				rts
.9d7a					_TSTNextPullY:
.9d7a	7a		ply				ply 								; restore current, fall through.
.9d7b					_TSTNext:
.9d7b	e6 38		inc $38				inc 	zTemp1 						; token counter
.9d7d	98		tya				tya
.9d7e	18		clc				clc
.9d7f	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.9d81	1a		inc a				inc 	a 							; +1
.9d82	1a		inc a				inc 	a 							; +2
.9d83	a8		tay				tay
.9d84	10 c1		bpl $9d47			bpl 	_TSTLoop 					; if Y < $80 loop back
.9d86	98		tya				tya 								; add Y to zTemp0 and reset Y
.9d87	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.9d89	18		clc				clc  								; but have tables > 255 bytes
.9d8a	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.9d8c	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.9d8e	90 b7		bcc $9d47			bcc 	_TSTLoop
.9d90	e6 37		inc $37				inc 	zTemp0+1
.9d92	80 b3		bra $9d47			bra 	_TSTLoop
.9d94					_TSTFail:
.9d94	18		clc				clc
.9d95	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/tokenise.asm


;******  Processing file: ./common/tokeniser/../generated/kwdtext.dat

.9d96					KeywordSet0:
>9d96	00 65					.text	0,$65,""               ; $80 !0:EOF
>9d98	00 58					.text	0,$58,""               ; $81 !1:SH1
>9d9a	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>9d9c	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $83 ABS(
>9da2	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $84 ALLOC(
>9daa	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $85 ASC(
>9db0	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $86 CHR$(
>9db7	05 6b 46 41 4c 53 45			.text	5,$6b,"FALSE"          ; $87 FALSE
>9dbe	05 44 46 52 41 43 28			.text	5,$44,"FRAC("          ; $88 FRAC(
>9dc5	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $89 INT(
>9dcb	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $8a ISVAL(
>9dd3	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $8b LEFT$(
>9ddb	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $8c LEN(
>9de1	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $8d MID$(
>9de8	04 19 4e 4f 54 28			.text	4,$19,"NOT("           ; $8e NOT(
>9dee	07 e9 52 41 4e 44 4f 4d			.text	7,$e9,"RANDOM("        ; $8f RANDOM(
>9df6	28
>9df7	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $90 RIGHT$(
>9dff	28
>9e00	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $91 RND(
>9e06	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $92 SGN(
>9e0c	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $93 SPC(
>9e12	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $94 STR$(
>9e19	04 40 54 52 55 45			.text	4,$40,"TRUE"           ; $95 TRUE
>9e1f	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $96 VAL(
>9e25	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $97 FOR
>9e2a	02 8f 49 46				.text	2,$8f,"IF"             ; $98 IF
>9e2e	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $99 PROC
>9e34	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $9a REPEAT
>9e3c	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $9b WHILE
>9e43	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $9c ENDIF
>9e4a	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $9d ENDPROC
>9e52	43
>9e53	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $9e NEXT
>9e59	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $9f THEN
>9e5f	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $a0 UNTIL
>9e66	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $a1 WEND
>9e6c	04 1c 43 41 4c 4c			.text	4,$1c,"CALL"           ; $a2 CALL
>9e72	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $a3 CLS
>9e77	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $a4 DATA
>9e7d	03 da 44 49 4d				.text	3,$da,"DIM"            ; $a5 DIM
>9e82	06 db 44 4f 57 4e 54 4f			.text	6,$db,"DOWNTO"         ; $a6 DOWNTO
>9e8a	04 29 45 4c 53 45			.text	4,$29,"ELSE"           ; $a7 ELSE
>9e90	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $a8 GOSUB
>9e97	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $a9 GOTO
>9e9d	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $aa LET
>9ea2	05 6b 4c 4f 43 41 4c			.text	5,$6b,"LOCAL"          ; $ab LOCAL
>9ea9	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $ac PRINT
>9eb0	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $ad READ
>9eb6	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $ae REM
>9ebb	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $af RETURN
>9ec3	02 a3 54 4f				.text	2,$a3,"TO"             ; $b0 TO
>9ec7	ff					.text	$FF
.9ec8					KeywordSet1:
>9ec8	00 65					.text	0,$65,""               ; $80 !0:EOF
>9eca	00 58					.text	0,$58,""               ; $81 !1:SH1
>9ecc	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>9ece	08 4c 41 53 53 45 4d 42			.text	8,$4c,"ASSEMBLE"       ; $83 ASSEMBLE
>9ed6	4c 45
>9ed8	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $84 ASSERT
>9ee0	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $85 CLEAR
>9ee7	03 d7 45 4e 44				.text	3,$d7,"END"            ; $86 END
>9eec	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $87 LIST
>9ef2	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $88 NEW
>9ef7	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $89 RESTORE
>9eff	45
>9f00	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $8a RUN
>9f05	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $8b STOP
>9f0b	ff					.text	$FF
.9f0c					KeywordSet2:
>9f0c	00 65					.text	0,$65,""               ; $80 !0:EOF
>9f0e	00 58					.text	0,$58,""               ; $81 !1:SH1
>9f10	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>9f12	03 c8 41 44 43				.text	3,$c8,"ADC"            ; $83 ADC
>9f17	03 d3 41 4e 44				.text	3,$d3,"AND"            ; $84 AND
>9f1c	03 e0 41 53 4c				.text	3,$e0,"ASL"            ; $85 ASL
>9f21	03 c8 42 43 43				.text	3,$c8,"BCC"            ; $86 BCC
>9f26	03 d8 42 43 53				.text	3,$d8,"BCS"            ; $87 BCS
>9f2b	03 d8 42 45 51				.text	3,$d8,"BEQ"            ; $88 BEQ
>9f30	03 df 42 49 54				.text	3,$df,"BIT"            ; $89 BIT
>9f35	03 d8 42 4d 49				.text	3,$d8,"BMI"            ; $8a BMI
>9f3a	03 d5 42 4e 45				.text	3,$d5,"BNE"            ; $8b BNE
>9f3f	03 de 42 50 4c				.text	3,$de,"BPL"            ; $8c BPL
>9f44	03 d5 42 52 41				.text	3,$d5,"BRA"            ; $8d BRA
>9f49	03 df 42 52 4b				.text	3,$df,"BRK"            ; $8e BRK
>9f4e	03 db 42 56 43				.text	3,$db,"BVC"            ; $8f BVC
>9f53	03 eb 42 56 53				.text	3,$eb,"BVS"            ; $90 BVS
>9f58	03 d2 43 4c 43				.text	3,$d2,"CLC"            ; $91 CLC
>9f5d	03 d3 43 4c 44				.text	3,$d3,"CLD"            ; $92 CLD
>9f62	03 d8 43 4c 49				.text	3,$d8,"CLI"            ; $93 CLI
>9f67	03 e5 43 4c 56				.text	3,$e5,"CLV"            ; $94 CLV
>9f6c	03 e0 43 4d 50				.text	3,$e0,"CMP"            ; $95 CMP
>9f71	03 eb 43 50 58				.text	3,$eb,"CPX"            ; $96 CPX
>9f76	03 ec 43 50 59				.text	3,$ec,"CPY"            ; $97 CPY
>9f7b	03 cc 44 45 43				.text	3,$cc,"DEC"            ; $98 DEC
>9f80	03 e1 44 45 58				.text	3,$e1,"DEX"            ; $99 DEX
>9f85	03 e2 44 45 59				.text	3,$e2,"DEY"            ; $9a DEY
>9f8a	03 e6 45 4f 52				.text	3,$e6,"EOR"            ; $9b EOR
>9f8f	03 da 49 4e 43				.text	3,$da,"INC"            ; $9c INC
>9f94	03 ef 49 4e 58				.text	3,$ef,"INX"            ; $9d INX
>9f99	03 f0 49 4e 59				.text	3,$f0,"INY"            ; $9e INY
>9f9e	03 e7 4a 4d 50				.text	3,$e7,"JMP"            ; $9f JMP
>9fa3	03 ef 4a 53 52				.text	3,$ef,"JSR"            ; $a0 JSR
>9fa8	03 d1 4c 44 41				.text	3,$d1,"LDA"            ; $a1 LDA
>9fad	03 e8 4c 44 58				.text	3,$e8,"LDX"            ; $a2 LDX
>9fb2	03 e9 4c 44 59				.text	3,$e9,"LDY"            ; $a3 LDY
>9fb7	03 f1 4c 53 52				.text	3,$f1,"LSR"            ; $a4 LSR
>9fbc	03 ed 4e 4f 50				.text	3,$ed,"NOP"            ; $a5 NOP
>9fc1	03 e2 4f 52 41				.text	3,$e2,"ORA"            ; $a6 ORA
>9fc6	03 d9 50 48 41				.text	3,$d9,"PHA"            ; $a7 PHA
>9fcb	03 e8 50 48 50				.text	3,$e8,"PHP"            ; $a8 PHP
>9fd0	03 f0 50 48 58				.text	3,$f0,"PHX"            ; $a9 PHX
>9fd5	03 f1 50 48 59				.text	3,$f1,"PHY"            ; $aa PHY
>9fda	03 dd 50 4c 41				.text	3,$dd,"PLA"            ; $ab PLA
>9fdf	03 ec 50 4c 50				.text	3,$ec,"PLP"            ; $ac PLP
>9fe4	03 f4 50 4c 58				.text	3,$f4,"PLX"            ; $ad PLX
>9fe9	03 f5 50 4c 59				.text	3,$f5,"PLY"            ; $ae PLY
>9fee	03 ed 52 4f 4c				.text	3,$ed,"ROL"            ; $af ROL
>9ff3	03 f3 52 4f 52				.text	3,$f3,"ROR"            ; $b0 ROR
>9ff8	03 ef 52 54 49				.text	3,$ef,"RTI"            ; $b1 RTI
>9ffd	03 f9 52 54 53				.text	3,$f9,"RTS"            ; $b2 RTS
>a002	03 d8 53 42 43				.text	3,$d8,"SBC"            ; $b3 SBC
>a007	03 db 53 45 43				.text	3,$db,"SEC"            ; $b4 SEC
>a00c	03 dc 53 45 44				.text	3,$dc,"SED"            ; $b5 SED
>a011	03 e1 53 45 49				.text	3,$e1,"SEI"            ; $b6 SEI
>a016	03 e8 53 54 41				.text	3,$e8,"STA"            ; $b7 STA
>a01b	03 f7 53 54 50				.text	3,$f7,"STP"            ; $b8 STP
>a020	03 ff 53 54 58				.text	3,$ff,"STX"            ; $b9 STX
>a025	03 00 53 54 59				.text	3,$00,"STY"            ; $ba STY
>a02a	03 01 53 54 5a				.text	3,$01,"STZ"            ; $bb STZ
>a02f	03 ed 54 41 58				.text	3,$ed,"TAX"            ; $bc TAX
>a034	03 ee 54 41 59				.text	3,$ee,"TAY"            ; $bd TAY
>a039	03 e8 54 52 42				.text	3,$e8,"TRB"            ; $be TRB
>a03e	03 e9 54 53 42				.text	3,$e9,"TSB"            ; $bf TSB
>a043	03 ff 54 53 58				.text	3,$ff,"TSX"            ; $c0 TSX
>a048	03 ed 54 58 41				.text	3,$ed,"TXA"            ; $c1 TXA
>a04d	03 ff 54 58 53				.text	3,$ff,"TXS"            ; $c2 TXS
>a052	03 ee 54 59 41				.text	3,$ee,"TYA"            ; $c3 TYA
>a057	ff					.text	$FF

;******  Return to file: ./common/tokeniser/tokenise.asm

.a058					TokeniseLine:
.a058	20 e0 a1	jsr $a1e0			jsr 	FixLineBufferCase 			; fix line case
.a05b	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.a05d	8d a6 04	sta $04a6			sta 	tokenOffset
.a060	9c a7 04	stz $04a7			stz 	tokenLineNumber
.a063	9c a8 04	stz $04a8			stz 	tokenLineNumber+1
.a066	a2 ff		ldx #$ff			ldx 	#$FF
.a068					_TKFindFirst:
.a068	e8		inx				inx
.a069	bd a6 05	lda $05a6,x			lda 	lineBuffer,x
.a06c	f0 79		beq $a0e7			beq 	_TKExit
.a06e	c9 20		cmp #$20			cmp 	#' '
.a070	90 f6		bcc $a068			bcc 	_TKFindFirst
.a072	c9 30		cmp #$30			cmp 	#'0'
.a074	90 07		bcc $a07d			bcc 	_TKNoLineNumber
.a076	c9 3a		cmp #$3a			cmp 	#'9'+1
.a078	b0 03		bcs $a07d			bcs 	_TKNoLineNumber
.a07a	20 0a a2	jsr $a20a			jsr 	TokeniseExtractLineNumber
.a07d					_TKNoLineNumber:
.a07d					_TKTokeniseLoop:
.a07d	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.a080	f0 65		beq $a0e7			beq 	_TKExit
.a082	e8		inx				inx
.a083	c9 20		cmp #$20			cmp 	#' '
.a085	f0 f6		beq $a07d			beq 	_TKTokeniseLoop 			; keep looping if space found.
.a087	ca		dex				dex 								; undo last get, A contains character, X is position.
.a088	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.a08a	f0 61		beq $a0ed			beq 	_TKTokeniseIdentifier
.a08c	c9 41		cmp #$41			cmp 	#'A'
.a08e	90 04		bcc $a094			bcc 	_TKTokenisePunctuation
.a090	c9 5b		cmp #$5b			cmp 	#'Z'+1
.a092	90 59		bcc $a0ed			bcc 	_TKTokeniseIdentifier
.a094					_TKTokenisePunctuation:
.a094	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.a096	f0 27		beq $a0bf			beq 	_TKString
.a098	c9 24		cmp #$24			cmp 	#'$'						; hexadecimal constant (# only appears at end of identifiers)
.a09a	f0 28		beq $a0c4			beq 	_TKHexConstant
.a09c	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers.
.a09e	f0 29		beq $a0c9			beq 	_TKCheckDouble
.a0a0	c9 3e		cmp #$3e			cmp 	#'>'
.a0a2	f0 25		beq $a0c9			beq 	_TKCheckDouble
.a0a4					_TKStandardPunctuation:
.a0a4	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; get it back.
.a0a7	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.a0a9	90 0e		bcc $a0b9			bcc 	_TKNoShift
.a0ab	48		pha				pha 								; save
.a0ac	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.a0ae	85 36		sta $36				sta 	zTemp0
.a0b0	68		pla				pla
.a0b1	29 20		and #$20			and 	#32 						; bit 5
.a0b3	4a		lsr a				lsr 	a 							; shift into bit 3
.a0b4	4a		lsr a				lsr 	a
.a0b5	05 36		ora $36				ora 	zTemp0
.a0b7	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.a0b9					_TKNoShift:
.a0b9	20 4f a2	jsr $a24f			jsr 	TokeniseWriteByte 			; write the punctuation character
.a0bc	e8		inx				inx 								; consume the character
.a0bd	80 be		bra $a07d			bra 	_TKTokeniseLoop 			; and loop round again.
.a0bf					_TKString:
.a0bf	20 6f a1	jsr $a16f			jsr 	TokeniseString
.a0c2	80 b9		bra $a07d			bra 	_TKTokeniseLoop
.a0c4					_TKHexConstant:
.a0c4	20 aa a1	jsr $a1aa			jsr 	TokeniseHexConstant
.a0c7	80 b4		bra $a07d			bra 	_TKTokeniseLoop
.a0c9					_TKCheckDouble:
.a0c9	bd a7 05	lda $05a7,x			lda 	lineBuffer+1,x 				; get next character
.a0cc	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.a0ce	90 d4		bcc $a0a4			bcc 	_TKStandardPunctuation
.a0d0	c9 3f		cmp #$3f			cmp 	#'>'+1
.a0d2	b0 d0		bcs $a0a4			bcs 	_TKStandardPunctuation
.a0d4	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.a0d7	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.a0d9	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.a0da	7d a7 05	adc $05a7,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.a0dd	38		sec				sec
.a0de	e9 3c		sbc #$3c			sbc 	#'<'
.a0e0	20 4f a2	jsr $a24f			jsr 	TokeniseWriteByte 			; this is in the range 0-7
.a0e3	e8		inx				inx 								; consume both
.a0e4	e8		inx				inx
.a0e5	80 96		bra $a07d			bra 	_TKTokeniseLoop
.a0e7	a9 80		lda #$80	_TKExit:lda 	#KWC_EOL 					; write end of line byte
.a0e9	20 4f a2	jsr $a24f			jsr 	TokeniseWriteByte
.a0ec	60		rts				rts
.a0ed					_TKTokeniseIdentifier:
.a0ed	8e 80 04	stx $0480			stx 	identStart 					; save start
.a0f0	9c 84 04	stz $0484			stz 	identTypeByte 				; zero the type byte
.a0f3					_TKCheckLoop:
.a0f3	e8		inx				inx 								; look at next, we know first is identifier.
.a0f4	bd a6 05	lda $05a6,x			lda  	lineBuffer,x
.a0f7	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.a0f9	f0 f8		beq $a0f3			beq 	_TKCheckLoop
.a0fb	c9 30		cmp #$30			cmp	 	#"0"
.a0fd	90 0c		bcc $a10b			bcc 	_TKEndIdentifier
.a0ff	c9 3a		cmp #$3a			cmp 	#"9"+1
.a101	90 f0		bcc $a0f3			bcc 	_TKCheckLoop
.a103	c9 41		cmp #$41			cmp	 	#"A"
.a105	90 04		bcc $a10b			bcc 	_TKEndIdentifier
.a107	c9 5b		cmp #$5b			cmp 	#"Z"+1
.a109	90 e8		bcc $a0f3			bcc 	_TKCheckLoop
.a10b					_TKEndIdentifier:
.a10b	8e 81 04	stx $0481			stx 	identTypeStart 				; save start of type text (if any !)
.a10e	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.a110	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.a112	f0 06		beq $a11a			beq 	_TKHasTypeCharacter
.a114	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.a116	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.a118	d0 07		bne $a121			bne 	_TKNoTypeCharacter
.a11a					_TKHasTypeCharacter:
.a11a	8c 84 04	sty $0484			sty 	identTypeByte 				; has # or $, save the type
.a11d	e8		inx				inx 								; read next
.a11e	bd a6 05	lda $05a6,x			lda 	lineBuffer,x
.a121					_TKNoTypeCharacter:
.a121	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.a123	d0 09		bne $a12e			bne 	_TKNoArray
.a125	e8		inx				inx 								; skip the (
.a126	ad 84 04	lda $0484			lda 	identTypeByte 				; set bit 2 (e.g. array)
.a129	09 04		ora #$04			ora 	#$04
.a12b	8d 84 04	sta $0484			sta 	identTypeByte
.a12e					_TKNoArray:
.a12e	8e 82 04	stx $0482			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.a131	20 cb a1	jsr $a1cb			jsr 	TokeniseCalculateHash 		; calculate the has for those tokens
.a134	a0 9d		ldy #$9d			ldy 	#(KeywordSet0) >> 8
.a136	a9 96		lda #$96			lda 	#(KeywordSet0) & $FF
.a138	20 3d 9d	jsr $9d3d			jsr 	TokeniseSearchTable
.a13b	a2 00		ldx #$00			ldx 	#0
.a13d	b0 1f		bcs $a15e			bcs 	_TKFoundToken
.a13f	a0 9e		ldy #$9e			ldy 	#(KeywordSet1) >> 8
.a141	a9 c8		lda #$c8			lda 	#(KeywordSet1) & $FF
.a143	20 3d 9d	jsr $9d3d			jsr 	TokeniseSearchTable
.a146	a2 81		ldx #$81			ldx 	#$81
.a148	b0 14		bcs $a15e			bcs 	_TKFoundToken
.a14a	a0 9f		ldy #$9f			ldy 	#(KeywordSet2) >> 8
.a14c	a9 0c		lda #$0c			lda 	#(KeywordSet2) & $FF
.a14e	20 3d 9d	jsr $9d3d			jsr 	TokeniseSearchTable
.a151	a2 82		ldx #$82			ldx 	#$82
.a153	b0 09		bcs $a15e			bcs 	_TKFoundToken
.a155	20 5b a2	jsr $a25b			jsr 	CheckCreateVariableRecord 	; failed all, it's a variable, create record if does not exist.
.a158	ae 82 04	ldx $0482			ldx 	identTypeEnd 				; X points to following byte
.a15b	4c 7d a0	jmp $a07d			jmp 	_TKTokeniseLoop 			; and go round again.
.a15e					_TKFoundToken:
.a15e	48		pha				pha 								; save token
.a15f	8a		txa				txa 								; shift in X, is there one ?
.a160	f0 03		beq $a165			beq 	_TKNoTShift
.a162	20 4f a2	jsr $a24f			jsr 	TokeniseWriteByte 			; if so, write it out
.a165					_TKNoTShift:
.a165	68		pla				pla 								; restore and write token
.a166	20 4f a2	jsr $a24f			jsr 	TokeniseWriteByte
.a169	ae 82 04	ldx $0482			ldx 	identTypeEnd 				; X points to following byte
.a16c	4c 7d a0	jmp $a07d			jmp 	_TKTokeniseLoop 			; and go round again.
.a16f					TokeniseString:
.a16f	a9 ff		lda #$ff			lda 	#KWC_STRING 				; string token.
.a171	20 4f a2	jsr $a24f			jsr 	TokeniseWriteByte
.a174	e8		inx				inx									; start of quoted string.
.a175	da		phx				phx 								; push start of string on top
.a176	ca		dex				dex
.a177					_TSFindEnd:
.a177	e8		inx				inx
.a178	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; next character
.a17b	f0 04		beq $a181			beq 	_TSEndOfString
.a17d	c9 22		cmp #$22			cmp 	#'"'
.a17f	d0 f6		bne $a177			bne 	_TSFindEnd
.a181					_TSEndOfString:
.a181	7a		ply				ply  								; so now Y is first character, X is character after end.
.a182	48		pha				pha 								; save terminating character
.a183	20 8b a1	jsr $a18b			jsr 	TOWriteBlockXY 				; write X to Y as a data block
.a186	68		pla				pla 								; terminating character
.a187	f0 01		beq $a18a			beq 	_TSNotQuote					; if it wasn't EOS skip it
.a189	e8		inx				inx
.a18a					_TSNotQuote:
.a18a	60		rts				rts
.a18b					TOWriteBlockXY:
.a18b	86 36		stx $36				stx 	zTemp0 						; write end character
.a18d	98		tya				tya
.a18e	49 ff		eor #$ff			eor 	#$FF
.a190	38		sec				sec
.a191	65 36		adc $36				adc 	zTemp0
.a193	1a		inc a				inc 	a 							; one extra for NULL
.a194	20 4f a2	jsr $a24f			jsr 	TokeniseWriteByte
.a197					_TOBlockLoop:
.a197	c4 36		cpy $36				cpy 	zTemp0
.a199	f0 09		beq $a1a4			beq 	_TOBlockExit
.a19b	b9 a6 05	lda $05a6,y			lda 	lineBuffer,y
.a19e	20 4f a2	jsr $a24f			jsr 	TokeniseWriteByte
.a1a1	c8		iny				iny
.a1a2	80 f3		bra $a197			bra 	_TOBlockLoop
.a1a4					_TOBlockExit:
.a1a4	a9 00		lda #$00			lda 	#0
.a1a6	20 4f a2	jsr $a24f			jsr 	TokeniseWriteByte
.a1a9	60		rts				rts
.a1aa					TokeniseHexConstant:
.a1aa	a9 fe		lda #$fe			lda 	#KWC_HEXCONST 				; hex constant token.
.a1ac	20 4f a2	jsr $a24f			jsr 	TokeniseWriteByte
.a1af	e8		inx				inx									; start of quoted string.
.a1b0	da		phx				phx 								; push start of constant on top
.a1b1	ca		dex				dex
.a1b2					_THFindLoop:
.a1b2	e8		inx				inx
.a1b3	bd a6 05	lda $05a6,x			lda 	lineBuffer,x
.a1b6	c9 30		cmp #$30			cmp 	#"0"
.a1b8	90 0c		bcc $a1c6			bcc 	_THFoundEnd
.a1ba	c9 3a		cmp #$3a			cmp 	#"9"+1
.a1bc	90 f4		bcc $a1b2			bcc 	_THFindLoop
.a1be	c9 41		cmp #$41			cmp 	#"A"
.a1c0	90 04		bcc $a1c6			bcc 	_THFoundEnd
.a1c2	c9 47		cmp #$47			cmp 	#"F"+1
.a1c4	90 ec		bcc $a1b2			bcc 	_THFindLoop
.a1c6					_THFoundEnd:
.a1c6	7a		ply				ply 								; restore start
.a1c7	20 8b a1	jsr $a18b			jsr 	TOWriteBlockXY 				; output the block
.a1ca	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/utility.asm

.a1cb					TokeniseCalculateHash:
.a1cb	da		phx				phx
.a1cc	ae 80 04	ldx $0480			ldx 	identStart 					; needs to be same as in tokens.py - simple sum
.a1cf	a9 00		lda #$00			lda 	#0
.a1d1					_TCHLoop:
.a1d1	18		clc				clc
.a1d2	7d a6 05	adc $05a6,x			adc 	lineBuffer,x
.a1d5	e8		inx				inx
.a1d6	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.a1d9	d0 f6		bne $a1d1			bne 	_TCHLoop
.a1db	8d 83 04	sta $0483			sta 	identHash 					; save the hash
.a1de	fa		plx				plx
.a1df	60		rts				rts
.a1e0					FixLineBufferCase:
.a1e0	a2 00		ldx #$00			ldx 	#0
.a1e2					_FLBCLoop:
.a1e2	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; get next character
.a1e5	f0 22		beq $a209			beq 	_FLBCExit 					; end of string.
.a1e7	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.a1e9	f0 11		beq $a1fc			beq 	_FLBCInQuotes
.a1eb	e8		inx				inx
.a1ec	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.a1ee	90 f2		bcc $a1e2			bcc 	_FLBCLoop
.a1f0	c9 7b		cmp #$7b			cmp 	#'z'+1
.a1f2	b0 ee		bcs $a1e2			bcs 	_FLBCLoop
.a1f4	38		sec				sec 								; make U/C
.a1f5	e9 20		sbc #$20			sbc 	#32
.a1f7	9d a5 05	sta $05a5,x			sta	 	lineBuffer-1,x 				; write back
.a1fa	80 e6		bra $a1e2			bra 	_FLBCLoop
.a1fc					_FLBCInQuotes:
.a1fc	e8		inx				inx 								; advance
.a1fd	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; get next
.a200	f0 07		beq $a209			beq 	_FLBCExit 					; exit on EOS
.a202	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.a204	d0 f6		bne $a1fc			bne 	_FLBCInQuotes
.a206	e8		inx				inx 								; skip over it
.a207	80 d9		bra $a1e2			bra 	_FLBCLoop
.a209					_FLBCExit:
.a209	60		rts				rts
.a20a					TokeniseExtractLineNumber:
.a20a	ad a8 04	lda $04a8			lda 	tokenLineNumber+1 			; push current value on stack
.a20d	48		pha				pha
.a20e	ad a7 04	lda $04a7			lda 	tokenLineNumber
.a211	48		pha				pha
.a212	20 48 a2	jsr $a248			jsr 	_TELNTimes2 				; line # x 4
.a215	20 48 a2	jsr $a248			jsr 	_TELNTimes2 				; line # x 2
.a218	18		clc				clc 								; add stacked value
.a219	68		pla				pla
.a21a	6d a7 04	adc $04a7			adc 	tokenLineNumber
.a21d	8d a7 04	sta $04a7			sta 	tokenLineNumber
.a220	68		pla				pla
.a221	6d a8 04	adc $04a8			adc 	tokenLineNumber+1
.a224	8d a8 04	sta $04a8			sta 	tokenLineNumber+1 			; line # x 5
.a227	20 48 a2	jsr $a248			jsr 	_TELNTimes2 				; line # x 10
.a22a	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; get and consume character
.a22d	e8		inx				inx
.a22e	29 0f		and #$0f			and 	#15 						; add to line #
.a230	18		clc				clc
.a231	6d a7 04	adc $04a7			adc 	tokenLineNumber
.a234	8d a7 04	sta $04a7			sta 	tokenLineNumber
.a237	90 03		bcc $a23c			bcc 	_TLENNoCarry
.a239	ee a8 04	inc $04a8			inc 	tokenLineNumber+1
.a23c					_TLENNoCarry:
.a23c	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; more digits ?
.a23f	c9 30		cmp #$30			cmp 	#'0'
.a241	90 04		bcc $a247			bcc 	_TLENExit
.a243	c9 3a		cmp #$3a			cmp 	#'9'+1
.a245	90 c3		bcc $a20a			bcc 	TokeniseExtractLineNumber
.a247					_TLENExit:
.a247	60		rts				rts
.a248					_TELNTimes2:
.a248	0e a7 04	asl $04a7			asl 	tokenLineNumber
.a24b	2e a8 04	rol $04a8			rol 	tokenLineNumber+1
.a24e	60		rts				rts
.a24f					TokeniseWriteByte:
.a24f	da		phx				phx
.a250	ae a6 04	ldx $04a6			ldx 	tokenOffset 				; next slot to write to
.a253	9d a6 04	sta $04a6,x			sta 	tokenOffset,x 				; write byte out
.a256	ee a6 04	inc $04a6			inc 	tokenOffset 				; advance slot.
.a259	fa		plx				plx
.a25a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/variablerecord.asm

.a25b					CheckCreateVariableRecord:
.a25b	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.a25d	85 36		sta $36				sta 	0+zTemp0
.a25f	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.a261	85 37		sta $37				sta 	1+zTemp0
.a263					_CCVSearch:
.a263	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.a265	f0 2c		beq $a293			beq 	_CCVFail
.a267	a0 01		ldy #$01			ldy 	#1 							; read the hash
.a269	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.a26b	cd 83 04	cmp $0483			cmp 	identHash
.a26e	d0 16		bne $a286			bne 	_CCVNext
.a270	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.a272	ae 80 04	ldx $0480			ldx 	identStart
.a275					_CCVCompare:
.a275	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.a278	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.a27a	e8		inx				inx 								; advance pointers
.a27b	c8		iny				iny
.a27c	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.a27d	d0 07		bne $a286			bne 	_CCVNext  					; didn't match go to next.
.a27f	90 f4		bcc $a275			bcc 	_CCVCompare 				; not finished yet.
.a281	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; matched whole thing ?
.a284	f0 41		beq $a2c7			beq 	_CCVFound 					; yes, we were successful
.a286					_CCVNext:
.a286	18		clc				clc
.a287	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.a289	65 36		adc $36				adc 	zTemp0
.a28b	85 36		sta $36				sta 	zTemp0
.a28d	90 d4		bcc $a263			bcc 	_CCVSearch
.a28f	e6 37		inc $37				inc 	zTemp0+1
.a291	80 d0		bra $a263			bra 	_CCVSearch
.a293					_CCVFail:
.a293	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.a295	ad 83 04	lda $0483			lda 	identHash
.a298	91 36		sta ($36),y			sta 	(zTemp0),y
.a29a	c8		iny				iny 								; offset 2 is the type byte
.a29b	ad 84 04	lda $0484			lda 	identTypeByte
.a29e	91 36		sta ($36),y			sta 	(zTemp0),y
.a2a0	c8		iny				iny
.a2a1					_CCVData:
.a2a1	a9 00		lda #$00			lda 	#0 							; erase data 3-7
.a2a3	91 36		sta ($36),y			sta 	(zTemp0),y
.a2a5	c8		iny				iny
.a2a6	c0 08		cpy #$08			cpy 	#8
.a2a8	90 f7		bcc $a2a1			bcc 	_CCVData
.a2aa	ae 80 04	ldx $0480			ldx 	identStart 					; copy name into 8 on.
.a2ad					_CCVCopyName:
.a2ad	bd a6 05	lda $05a6,x			lda 	lineBuffer,x
.a2b0	91 36		sta ($36),y			sta 	(zTemp0),y
.a2b2	e8		inx				inx
.a2b3	c8		iny				iny
.a2b4	ec 82 04	cpx $0482			cpx 	identTypeEnd
.a2b7	d0 f4		bne $a2ad			bne 	_CCVCopyName
.a2b9	98		tya				tya 								; patch offset
.a2ba	92 36		sta ($36)			sta 	(zTemp0)
.a2bc	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.a2be	91 36		sta ($36),y			sta 	(zTemp0),y
.a2c0	88		dey				dey
.a2c1	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.a2c3	09 80		ora #$80			ora 	#$80
.a2c5	91 36		sta ($36),y			sta 	(zTemp0),y
.a2c7					_CCVFound:
.a2c7	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.a2c9	38		sec				sec
.a2ca	e9 10		sbc #$10			sbc 	#(VariableSpace >> 8) 		; offset from the start
.a2cc	09 40		ora #$40			ora 	#$40 						; make it a writeable token
.a2ce	20 4f a2	jsr $a24f			jsr 	TokeniseWriteByte
.a2d1	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.a2d3	20 4f a2	jsr $a24f			jsr 	TokeniseWriteByte
.a2d6	60		rts				rts

;******  Return to file: _basic.asm


;******  End of listing
