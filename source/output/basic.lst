
; 64tass Turbo Assembler Macro V1.57.2900 listing file
; 64tass -D AUTORUN=0 "-D MONITOR_ADDRESS=\$E000" "-D LOCKOUT_ADDRESS=\$F000" "-D BASIC_ADDRESS=\$38000" "-D SOURCE_ADDRESS=\$28000" "-D SPRITE_ADDRESS=\$30000" -q -b -Wall -c -C -D "HARDWARE=0 $'\x9'$'\x9'$'\x9'$'\x9'$'\x9'$'\x9'" -L output/basic.lst -l output/basic.lbl -Wall -o build/basic.rom _basic.asm
; Wed Jan 11 14:49:22 2023

;Offset	;PC	;Hex		;Monitor	;Source

;******  Command line definitions

=0						AUTORUN=0
=$e000						 MONITOR_ADDRESS=$E000
=$f000						 LOCKOUT_ADDRESS=$F000
=$38000						 BASIC_ADDRESS=$38000
=$28000						 SOURCE_ADDRESS=$28000
=$30000						 SPRITE_ADDRESS=$30000
=0						HARDWARE=0

;******  Processing input file: _basic.asm


;******  Processing file: ./common/aa.system/01common.inc

=$30						ZeroPageMandatory = $30
=$50						ZeroPagePreference = $50
=$400						MemoryStorage = $400
=$2000						BasicStart = $2000
=$8000						BasicEnd = $8000
=$8000						CodeStart = $8000
=$1000						VariableSpace = $1000
=$2000						EndVariableSpace = $2000
=8						MathStackSize = 8
=512						BasicStackSize = 512
=3584						BasicStackBase = $1000-BasicStackSize
=80						MaxLineSize = 80

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/04data.inc

.0030						codePtr:
>0030								.fill 	4
.0034						basicStack:
>0034								.fill 	2
.0036						zTemp0:
>0036								.fill 	2
.0038						zTemp1:
>0038								.fill 	2
.003a						zTemp2:
>003a								.fill 	2
.003c						zsTemp:
>003c								.fill 	2
.003e						zaTemp:
>003e								.fill 	2
=$30						safePtr = codePtr 							; minimise direct tinkering
=$80						NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20						NSBIsReference = $20 						; bit 5 : is a reference
=$10						NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18						NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03						NSBRefMask = $03 							; bits 0,1 : Bytes of reference, 00 = 4,01 = 1,10=2
=$04						NSBIsArray = $04
=$00						NSTInteger = $00 							; base types for bits 3..4
=$08						NSTFloat = $08
=$10						NSTString = $10
=$18						NSTProcedure = $18
.0050						NSStatus:
>0050								.fill 	MathStackSize
.0058						NSMantissa0:
>0058								.fill 	MathStackSize 				; (this is my integer mantissa system)
.0060						NSMantissa1:
>0060								.fill 	MathStackSize
.0068						NSMantissa2:
>0068								.fill 	MathStackSize
.0070						NSMantissa3:
>0070								.fill 	MathStackSize
.0078						NSExponent:
>0078								.fill 	MathStackSize
.0400						identStart:
>0400								.fill 	1
.0401						identTypeStart:
>0401								.fill 	1
.0402						identTypeEnd:
>0402								.fill 	1
.0403						identHash:
>0403								.fill 	1
.0404						identTypeByte:
>0404								.fill 	1	 						; (see tokenising.pdf)
.0405						encodeState:
>0405								.fill 	1
.0406						digitTemp:
>0406								.fill 	1
.0407						decimalCount:
>0407								.fill 	1
.0408						randomSeed:
>0408								.fill 	4
.040c						lowMemPtr:
>040c								.fill 	2
.040e						stringMemory:
>040e								.fill 	2
.0410						stringInitialised:
>0410								.fill 	1
.0411						stringTempPointer:
>0411								.fill 	2
.0413						breakCheck:
>0413								.fill 	1
.0414						decimalPlaces:
>0414								.fill 	1
.0415						dbOffset:
>0415								.fill 	1
.0416						lastParameter:
>0416								.fill 	1
.0417						dataPointer:
>0417								.fill 	5
.041c						inDataStatement:
>041c								.fill 	1
.041d						tbOffset:
>041d								.fill 	1
.041e						AssemblerAddress:
>041e								.fill 	2
.0420						AssemblerControl:
>0420								.fill 	1
.0421						ParamStart:
>0421								.fill 	2
.0423						IsGroup1:
>0423								.fill 	1
.0424						BaseOpcode:
>0424								.fill 	1
.0425						ModeMask:
>0425								.fill 	1
.0426						listIndent:
>0426								.fill 	1
.0427						lcLastCharacter:
>0427								.fill 	1
.0428						isPrintFlag:
>0428								.fill 	1
.0429						currentListColour:
>0429								.fill 	1
.042a						tokenOffset:
>042a								.fill 	1
.042b						tokenLineNumber:
>042b								.fill 	2
.042d						tokenBuffer:
>042d								.fill 	253
.052a						lineBuffer:
>052a								.fill 	253
.0627						numberBuffer:
>0627								.fill 	34
.0649						decimalBuffer:
>0649								.fill 	16

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/constants.inc

=$80						AM_ISZP = $80
=$40						AM_ISG1 = $40
=$20						AM_ISG2 = $20
=224						AM_IMMEDIATE = AM_ISZP+AM_ISG1+AM_ISG2+$00
=228						AM_ZEROPAGE = AM_ISZP+AM_ISG1+AM_ISG2+$04
=40						AM_ACC = AM_ISG2+$08
=108						AM_ABS = AM_ISG1+AM_ISG2+$0C
=208						AM_INDY = AM_ISZP+AM_ISG1+$10
=244						AM_ZEROX = AM_ISZP+AM_ISG1+AM_ISG2+$14
=120						AM_ABSY = AM_ISG1+AM_ISG2+$18
=124						AM_ABSX = AM_ISG1+AM_ISG2+$1C
=209						AM_IND = AM_ISZP+AM_ISG1+$11
=$80						AM_ZEROY = AM_ISZP
=$01						AM_INDABS = $01
=$02						AM_INDABSX = $02
=192						AM_INDX = AM_ISZP+AM_ISG1+$00

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/handlers.inc


;******  Return to file: _basic.asm


;******  Processing file: ./tick.task/f256/ticktask.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.inc

=1						ERRID_BREAK = 1
=2						ERRID_SYNTAX = 2
=3						ERRID_DIVZERO = 3
=4						ERRID_RANGE = 4
=5						ERRID_TYPE = 5
=6						ERRID_MEMORY = 6
=7						ERRID_ARGUMENT = 7
=8						ERRID_STOP = 8
=9						ERRID_STRING = 9
=10						ERRID_ASSERT = 10
=11						ERRID_DATA = 11
=12						ERRID_NOTDONE = 12
=13						ERRID_LINE = 13
=14						ERRID_GOSUB = 14
=15						ERRID_REPEAT = 15
=16						ERRID_WHILE = 16
=17						ERRID_FOR = 17
=18						ERRID_STACK = 18
=19						ERRID_STRUCT = 19
=20						ERRID_PROC = 20
=21						ERRID_REDEFINE = 21
=22						ERRID_ARRAYSIZE = 22
=23						ERRID_ARRAYIDX = 23
=24						ERRID_ARRAYDEC = 24
=25						ERRID_NOTFOUND = 25
=26						ERRID_DRIVEIO = 26
=27						ERRID_VERIFY = 27

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst.inc

=$00						KWD_LESSLESS                         = $00; $00 <<
=$01						KWD_LESSEQUAL                        = $01; $01 <=
=$02						KWD_LESSGREATER                      = $02; $02 <>
=$03						KWD_PLINGPLING3                      = $03; $03 !!3
=$04						KWD_GREATERLESS                      = $04; $04 ><
=$05						KWD_GREATEREQUAL                     = $05; $05 >=
=$06						KWD_GREATERGREATER                   = $06; $06 >>
=$07						KWD_PLINGPLING7                      = $07; $07 !!7
=$08						KWD_PLINGPLING8                      = $08; $08 !!8
=$09						KWD_PLINGPLING9                      = $09; $09 !!9
=$0a						KWD_PLINGPLING10                     = $0a; $0a !!10
=$0b						KWD_PLINGPLING11                     = $0b; $0b !!11
=$0c						KWD_PLINGPLING12                     = $0c; $0c !!12
=$0d						KWD_PLINGPLING13                     = $0d; $0d !!13
=$0e						KWD_PLINGPLING14                     = $0e; $0e !!14
=$0f						KWD_PLINGPLING15                     = $0f; $0f !!15
=$10						KWD_AT                               = $10; $10 @
=$11						KWD_PLINGPLING17                     = $11; $11 !!17
=$12						KWD_PLINGPLING18                     = $12; $12 !!18
=$13						KWD_LSQPAREN                         = $13; $13 [
=$14						KWD_BACKSLASH                        = $14; $14 \
=$15						KWD_RSQPAREN                         = $15; $15 ]
=$16						KWD_HAT                              = $16; $16 ^
=$17						KWD_UNDERSCORE                       = $17; $17 _
=$18						KWD_BQUOTE                           = $18; $18 `
=$19						KWD_PLINGPLING25                     = $19; $19 !!25
=$1a						KWD_PLINGPLING26                     = $1a; $1a !!26
=$1b						KWD_LCURLY                           = $1b; $1b {
=$1c						KWD_BAR                              = $1c; $1c |
=$1d						KWD_RCURLY                           = $1d; $1d }
=$1e						KWD_TILDE                            = $1e; $1e ~
=$21						KWD_PLING                            = $21; $21 !
=$22						KWD_DQUOTE                           = $22; $22 "
=$23						KWD_HASH                             = $23; $23 #
=$24						KWD_DOLLAR                           = $24; $24 $
=$25						KWD_PERCENT                          = $25; $25 %
=$26						KWD_AMPERSAND                        = $26; $26 &
=$27						KWD_QUOTE                            = $27; $27 '
=$28						KWD_LPAREN                           = $28; $28 (
=$29						KWD_RPAREN                           = $29; $29 )
=$2a						KWD_STAR                             = $2a; $2a *
=$2b						KWD_PLUS                             = $2b; $2b +
=$2c						KWD_COMMA                            = $2c; $2c ,
=$2d						KWD_MINUS                            = $2d; $2d -
=$2e						KWD_PERIOD                           = $2e; $2e .
=$2f						KWD_SLASH                            = $2f; $2f /
=$30						KWD_0                                = $30; $30 0
=$31						KWD_1                                = $31; $31 1
=$32						KWD_2                                = $32; $32 2
=$33						KWD_3                                = $33; $33 3
=$34						KWD_4                                = $34; $34 4
=$35						KWD_5                                = $35; $35 5
=$36						KWD_6                                = $36; $36 6
=$37						KWD_7                                = $37; $37 7
=$38						KWD_8                                = $38; $38 8
=$39						KWD_9                                = $39; $39 9
=$3a						KWD_COLON                            = $3a; $3a :
=$3b						KWD_SEMICOLON                        = $3b; $3b ;
=$3c						KWD_LESS                             = $3c; $3c <
=$3d						KWD_EQUAL                            = $3d; $3d =
=$3e						KWD_GREATER                          = $3e; $3e >
=$3f						KWD_QMARK                            = $3f; $3f ?
=$83						KWD_ABSLPAREN                        = $83; $83 ABS(
=$84						KWD_ALLOCLPAREN                      = $84; $84 ALLOC(
=$85						KWD_ASCLPAREN                        = $85; $85 ASC(
=$86						KWD_CHRDOLLARLPAREN                  = $86; $86 CHR$(
=$87						KWD_EVENTLPAREN                      = $87; $87 EVENT(
=$88						KWD_FALSE                            = $88; $88 FALSE
=$89						KWD_FRACLPAREN                       = $89; $89 FRAC(
=$8a						KWD_GETDOLLARLPAREN                  = $8a; $8a GET$(
=$8b						KWD_GETLPAREN                        = $8b; $8b GET(
=$8c						KWD_GETDATEDOLLARLPAREN              = $8c; $8c GETDATE$(
=$8d						KWD_GETTIMEDOLLARLPAREN              = $8d; $8d GETTIME$(
=$8e						KWD_HITLPAREN                        = $8e; $8e HIT(
=$8f						KWD_INKEYDOLLARLPAREN                = $8f; $8f INKEY$(
=$90						KWD_INKEYLPAREN                      = $90; $90 INKEY(
=$91						KWD_INTLPAREN                        = $91; $91 INT(
=$92						KWD_ISVALLPAREN                      = $92; $92 ISVAL(
=$93						KWD_JOYBLPAREN                       = $93; $93 JOYB(
=$94						KWD_JOYXLPAREN                       = $94; $94 JOYX(
=$95						KWD_JOYYLPAREN                       = $95; $95 JOYY(
=$96						KWD_LEFTDOLLARLPAREN                 = $96; $96 LEFT$(
=$97						KWD_LENLPAREN                        = $97; $97 LEN(
=$98						KWD_MAXLPAREN                        = $98; $98 MAX(
=$99						KWD_MIDDOLLARLPAREN                  = $99; $99 MID$(
=$9a						KWD_MINLPAREN                        = $9a; $9a MIN(
=$9b						KWD_NOTLPAREN                        = $9b; $9b NOT(
=$9c						KWD_PEEKLPAREN                       = $9c; $9c PEEK(
=$9d						KWD_PEEKDLPAREN                      = $9d; $9d PEEKD(
=$9e						KWD_PEEKLLPAREN                      = $9e; $9e PEEKL(
=$9f						KWD_PEEKWLPAREN                      = $9f; $9f PEEKW(
=$a0						KWD_PLAYINGLPAREN                    = $a0; $a0 PLAYING(
=$a1						KWD_RANDOMLPAREN                     = $a1; $a1 RANDOM(
=$a2						KWD_RIGHTDOLLARLPAREN                = $a2; $a2 RIGHT$(
=$a3						KWD_RNDLPAREN                        = $a3; $a3 RND(
=$a4						KWD_SGNLPAREN                        = $a4; $a4 SGN(
=$a5						KWD_SPCLPAREN                        = $a5; $a5 SPC(
=$a6						KWD_STRDOLLARLPAREN                  = $a6; $a6 STR$(
=$a7						KWD_TIMERLPAREN                      = $a7; $a7 TIMER(
=$a8						KWD_TRUE                             = $a8; $a8 TRUE
=$a9						KWD_VALLPAREN                        = $a9; $a9 VAL(
=$aa						KWD_FOR                              = $aa; $aa FOR
=$ab						KWD_IF                               = $ab; $ab IF
=$ac						KWD_PROC                             = $ac; $ac PROC
=$ad						KWD_REPEAT                           = $ad; $ad REPEAT
=$ae						KWD_WHILE                            = $ae; $ae WHILE
=$af						KWD_ENDIF                            = $af; $af ENDIF
=$b0						KWD_ENDPROC                          = $b0; $b0 ENDPROC
=$b1						KWD_NEXT                             = $b1; $b1 NEXT
=$b2						KWD_THEN                             = $b2; $b2 THEN
=$b3						KWD_UNTIL                            = $b3; $b3 UNTIL
=$b4						KWD_WEND                             = $b4; $b4 WEND
=$b5						KWD_BY                               = $b5; $b5 BY
=$b6						KWD_CALL                             = $b6; $b6 CALL
=$b7						KWD_CIRCLE                           = $b7; $b7 CIRCLE
=$b8						KWD_CLEAR                            = $b8; $b8 CLEAR
=$b9						KWD_COLOR                            = $b9; $b9 COLOR
=$ba						KWD_COLOUR                           = $ba; $ba COLOUR
=$bb						KWD_DATA                             = $bb; $bb DATA
=$bc						KWD_DIM                              = $bc; $bc DIM
=$bd						KWD_DOWNTO                           = $bd; $bd DOWNTO
=$be						KWD_ELSE                             = $be; $be ELSE
=$bf						KWD_FROM                             = $bf; $bf FROM
=$c0						KWD_GFX                              = $c0; $c0 GFX
=$c1						KWD_HERE                             = $c1; $c1 HERE
=$c2						KWD_IMAGE                            = $c2; $c2 IMAGE
=$c3						KWD_LET                              = $c3; $c3 LET
=$c4						KWD_LINE                             = $c4; $c4 LINE
=$c5						KWD_LOCAL                            = $c5; $c5 LOCAL
=$c6						KWD_MEMCOPY                          = $c6; $c6 MEMCOPY
=$c7						KWD_OFF                              = $c7; $c7 OFF
=$c8						KWD_ON                               = $c8; $c8 ON
=$c9						KWD_OUTLINE                          = $c9; $c9 OUTLINE
=$ca						KWD_PALETTE                          = $ca; $ca PALETTE
=$cb						KWD_PLOT                             = $cb; $cb PLOT
=$cc						KWD_POKE                             = $cc; $cc POKE
=$cd						KWD_POKED                            = $cd; $cd POKED
=$ce						KWD_POKEL                            = $ce; $ce POKEL
=$cf						KWD_POKEW                            = $cf; $cf POKEW
=$d0						KWD_READ                             = $d0; $d0 READ
=$d1						KWD_RECT                             = $d1; $d1 RECT
=$d2						KWD_REM                              = $d2; $d2 REM
=$d3						KWD_SOLID                            = $d3; $d3 SOLID
=$d4						KWD_SOUND                            = $d4; $d4 SOUND
=$d5						KWD_SPRITE                           = $d5; $d5 SPRITE
=$d6						KWD_TEXT                             = $d6; $d6 TEXT
=$d7						KWD_TO                               = $d7; $d7 TO

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst0.inc

=$80						KWC_EOL = $80
=$ff						KWC_STRING = $FF
=$fe						KWC_HEXCONST = $FE
=$aa						KWC_FIRST_STRUCTURE = $aa
=$af						KWC_FIRST_STRUCTURE_DEC = $af
=$b4						KWC_LAST_STRUCTURE = $b4
=$83						KWC_FIRST_UNARY = $83
=$a9						KWC_LAST_UNARY = $a9

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/stack.inc

=$e0						STK_GOSUB = $E0
=$d0						STK_FOR = $D0
=$c0						STK_REPEAT = $C0
=$b0						STK_PROC = $B0
=$a0						STK_WHILE = $A0
=$01						STK_LOCALN = $01
=$02						STK_LOCALS = $02

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/00start.asm

.8000		4c 67 80	jmp $8067	Boot:	jmp 	Start

;******  Processing file: ./common/aa.system/../../../modules/_build/_linker.module

=1						PagingEnabled = 1
.8003						EXTPrintCharacter:
.8003		e6 0d		inc $0d			inc 8+5
.8005		20 0b a0	jsr $a00b		jsr	Export_EXTPrintCharacter
.8008		08		php			php
.8009		c6 0d		dec $0d			dec 8+5
.800b		28		plp			plp
.800c		60		rts			rts
.800d						EXTPrintNoControl:
.800d		e6 0d		inc $0d			inc 8+5
.800f		20 00 a0	jsr $a000		jsr	Export_EXTPrintNoControl
.8012		08		php			php
.8013		c6 0d		dec $0d			dec 8+5
.8015		28		plp			plp
.8016		60		rts			rts
.8017						EXTInitialise:
.8017		e6 0d		inc $0d			inc 8+5
.8019		20 e9 a2	jsr $a2e9		jsr	Export_EXTInitialise
.801c		08		php			php
.801d		c6 0d		dec $0d			dec 8+5
.801f		28		plp			plp
.8020		60		rts			rts
.8021						EXTInputLine:
.8021		e6 0d		inc $0d			inc 8+5
.8023		20 fd a1	jsr $a1fd		jsr	Export_EXTInputLine
.8026		08		php			php
.8027		c6 0d		dec $0d			dec 8+5
.8029		28		plp			plp
.802a		60		rts			rts
.802b						EXTInputSingleCharacter:
.802b		e6 0d		inc $0d			inc 8+5
.802d		20 da a1	jsr $a1da		jsr	Export_EXTInputSingleCharacter
.8030		08		php			php
.8031		c6 0d		dec $0d			dec 8+5
.8033		28		plp			plp
.8034		60		rts			rts
.8035						GXGraphicDraw:
.8035		e6 0d		inc $0d			inc 8+5
.8037		20 ee a7	jsr $a7ee		jsr	Export_GXGraphicDraw
.803a		08		php			php
.803b		c6 0d		dec $0d			dec 8+5
.803d		28		plp			plp
.803e		60		rts			rts
.803f						SNDCommand:
.803f		e6 0d		inc $0d			inc 8+5
.8041		20 ca bb	jsr $bbca		jsr	Export_SNDCommand
.8044		08		php			php
.8045		c6 0d		dec $0d			dec 8+5
.8047		28		plp			plp
.8048		60		rts			rts
.8049						SNDUpdate:
.8049		e6 0d		inc $0d			inc 8+5
.804b		20 fd bb	jsr $bbfd		jsr	Export_SNDUpdate
.804e		08		php			php
.804f		c6 0d		dec $0d			dec 8+5
.8051		28		plp			plp
.8052		60		rts			rts
.8053						TKListConvertLine:
.8053		e6 0d		inc $0d			inc 8+5
.8055		20 7b b5	jsr $b57b		jsr	Export_TKListConvertLine
.8058		08		php			php
.8059		c6 0d		dec $0d			dec 8+5
.805b		28		plp			plp
.805c		60		rts			rts
.805d						TKTokeniseLine:
.805d		e6 0d		inc $0d			inc 8+5
.805f		20 0f b8	jsr $b80f		jsr	Export_TKTokeniseLine
.8062		08		php			php
.8063		c6 0d		dec $0d			dec 8+5
.8065		28		plp			plp
.8066		60		rts			rts

;******  Return to file: ./common/aa.system/00start.asm

.8067		a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.8069		9a		txs				txs
.806a		a5 00		lda $00				lda 	0  							; turn on editing of MMU LUT
.806c		09 80		ora #$80			ora 	#$80
.806e		85 00		sta $00				sta 	0
.8070		20 06 ad	jsr $ad06			jsr		UpdateFont 					; update font if between FPGA updates.
.8073		20 17 80	jsr $8017			jsr 	EXTInitialise 				; hardware initialise
.8076		a9 00		lda #$00			lda 	#0 							; zero the default drive.
.8078		20 40 81	jsr $8140			jsr 	KNLSetDrive
.807b		a9 00		lda #$00			lda 	#0 							; graphics system initialise.
.807d		aa		tax				tax
.807e		a8		tay				tay
.807f		20 35 80	jsr $8035			jsr 	GXGraphicDraw
.8082		a9 0f		lda #$0f			lda 	#$0F 						; initialise sound system
.8084		20 3f 80	jsr $803f			jsr 	SNDCommand
.8087		a9 8d		lda #$8d			lda 	#128+13 					; Display FPGA information.
.8089		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.808c		a9 09		lda #$09			lda 	#9
.808e		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.8091		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.8094		64 01		stz $01				stz 	1
.8096		ad ad d6	lda $d6ad			lda 	$D6AD
.8099		20 6a 83	jsr $836a			jsr 	PrintHex
.809c		ad ac d6	lda $d6ac			lda 	$D6AC
.809f		20 6a 83	jsr $836a			jsr 	PrintHex
.80a2		ad ab d6	lda $d6ab			lda 	$D6AB
.80a5		20 6a 83	jsr $836a			jsr 	PrintHex
.80a8		ad aa d6	lda $d6aa			lda 	$D6AA
.80ab		20 6a 83	jsr $836a			jsr 	PrintHex
.80ae		a9 20		lda #$20			lda 	#32
.80b0		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.80b3		ad a8 d6	lda $d6a8			lda 	$D6A8
.80b6		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.80b9		ad a9 d6	lda $d6a9			lda 	$D6A9
.80bc		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.80bf		a2 80		ldx #$80			ldx 	#Prompt >> 8 				; display prompt
.80c1		a9 cf		lda #$cf			lda 	#Prompt & $FF
.80c3		20 fc 95	jsr $95fc			jsr 	PrintStringXA
.80c6		20 22 8f	jsr $8f22			jsr 	NewProgram 					; erase current program
.80c9		4c ad 85	jmp $85ad			jmp 	WarmStart					; make same size.
.80cc		4c ad 85	jmp $85ad			jmp 	WarmStart
>80cf		0d 09 09 47 6f 20 67 6f		Prompt:	.text 	13,9,9,"Go go Gadget!",13
>80d7		20 47 61 64 67 65 74 21 0d

;******  Processing file: ./common/aa.system/../generated/timestamp.asm

>80e0		09 09 31 31 2f 30 31 2f			.text 9,9,"11/01/23 27"
>80e8		32 33 20 32 37

;******  Return to file: ./common/aa.system/00start.asm

>80ed		0d 0d 0d 00					.text 	13,13,13,0

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/05events.asm

.80f1						ProcessEvents:
.80f1		20 7f 81	jsr $817f			jsr 	KNLSetEventPointer
.80f4		20 00 ff	jsr $ff00			jsr     kernel.NextEvent 			; get next event
.80f7		b0 27		bcs $8120			bcs 	_PEExitZ 					; nothing left to process.
.80f9		ad 63 07	lda $0763			lda 	KNLEvent.type 				; go back if event not key.pressed.
.80fc		c9 08		cmp #$08			cmp 	#kernel.event.key.PRESSED
.80fe		d0 f1		bne $80f1			bne 	ProcessEvents
.8100		ad 69 07	lda $0769			lda	 	KNLEvent.key.flags 			; is KNLEvent.key.flags = 0 ?
.8103		d0 ec		bne $80f1			bne 	ProcessEvents
.8105		ad 68 07	lda $0768			lda 	KNLEvent.key.ascii 			; is it Ctrl+C
.8108		c9 03		cmp #$03			cmp 	#3
.810a		f0 11		beq $811d			beq 	_PEReturnBreak  			; no, keep going.
.810c		da		phx				phx
.810d		ae 61 06	ldx $0661			ldx 	KeyboardQueueEntries 		; get keyboard queue size into X
.8110		e0 08		cpx #$08			cpx 	#KBDQueueSize 				; if full, then ignore
.8112		f0 06		beq $811a			beq 	_PENoQueue
.8114		9d 59 06	sta $0659,x			sta 	KeyboardQueue,x 			; write into queue
.8117		ee 61 06	inc $0661			inc 	KeyboardQueueEntries 		; bump count
.811a						_PENoQueue:
.811a		fa		plx				plx
.811b		80 d4		bra $80f1			bra 	ProcessEvents
.811d						_PEReturnBreak:
.811d		a9 ff		lda #$ff			lda 	#255 						; return with NZ state
.811f		60		rts				rts
.8120						_PEExitZ:
.8120		a9 00		lda #$00			lda 	#0
.8122		60		rts				rts
.8123						PopKeyboardQueue:
.8123		ad 61 06	lda $0661			lda 	KeyboardQueueEntries 		; get keyboard queue entries.
.8126		f0 17		beq $813f			beq 	_PKQExit 					; zero, then exit.
.8128		ad 59 06	lda $0659			lda 	KeyboardQueue 				; save head of keyboard queue
.812b		48		pha				pha
.812c		da		phx				phx 								; drop head of queue
.812d		a2 00		ldx #$00			ldx 	#0
.812f						_PKQLoop:
.812f		bd 5a 06	lda $065a,x			lda 	KeyboardQueue+1,x 			; shift everything back one.
.8132		9d 59 06	sta $0659,x			sta 	KeyboardQueue,x  			; not efficient but doesn't matter.
.8135		e8		inx				inx
.8136		e0 07		cpx #$07			cpx 	#7
.8138		d0 f5		bne $812f			bne 	_PKQLoop
.813a		fa		plx				plx
.813b		ce 61 06	dec $0661			dec 	KeyboardQueueEntries 		; one fewer in queue.
.813e		68		pla				pla 								; restore head of queue.
.813f						_PKQExit:
.813f		60		rts				rts
=8						KBDQueueSize = 8
.0659						KeyboardQueue:
>0659								.fill 	KBDQueueSize
.0661						KeyboardQueueEntries:
>0661								.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/06wrapper.asm

=56						KERR_GENERAL = kernel.event.file.ERROR 		; Event $38
=50						KERR_CLOSED = kernel.event.file.CLOSED 		; Event $32
=40						KERR_NOTFOUND = kernel.event.file.NOT_FOUND ; Event $28
=48						KERR_EOF = kernel.event.file.EOF 			; Event $30
=64						KNLReadBufferLen = 64 								; read buffer size.
.8140						KNLSetDrive:
.8140		8d 62 07	sta $0762			sta 	KNLDefaultDrive
.8143		60		rts				rts
.8144						KNLOpenFileWrite:
.8144		48		pha				pha
.8145		a9 01		lda #$01			lda 	#kernel.args.file.open.WRITE
.8147		80 03		bra $814c			bra 	KNLOpenStart
.8149						KNLOpenFileRead:
.8149		48		pha				pha
.814a		a9 00		lda #$00			lda     #kernel.args.file.open.READ ; set READ mode.
.814c						KNLOpenStart:
.814c		85 f5		sta $f5				sta     kernel.args.file.open.mode
.814e		68		pla				pla
.814f		20 8a 81	jsr $818a			jsr 	KNLSetupFileName
.8152		20 7f 81	jsr $817f			jsr 	KNLSetEventPointer
.8155		ad 62 07	lda $0762			lda 	KNLDefaultDrive 			; currently drive zero only.
.8158		85 f3		sta $f3				sta 	kernel.args.file.open.drive
.815a		20 5c ff	jsr $ff5c			jsr     kernel.File.Open 			; open the file and exit.
.815d		a9 38		lda #$38			lda     #kernel.event.file.ERROR
.815f		b0 1d		bcs $817e			bcs     _out
.8161						_loop
.8161		20 0c ff	jsr $ff0c			jsr     kernel.Yield    			; event wait
.8164		20 00 ff	jsr $ff00			jsr     kernel.NextEvent
.8167		b0 f8		bcs $8161			bcs     _loop
.8169		ad 63 07	lda $0763			lda 	KNLEvent.type
.816c		c9 2a		cmp #$2a			cmp     #kernel.event.file.OPENED
.816e		f0 0a		beq $817a			beq 	_success
.8170		c9 28		cmp #$28			cmp     #kernel.event.file.NOT_FOUND
.8172		f0 0a		beq $817e			beq 	_out
.8174		c9 38		cmp #$38			cmp     #kernel.event.file.ERROR
.8176		f0 06		beq $817e			beq 	_out
.8178		80 e7		bra $8161			bra     _loop
.817a						_success
.817a		ad 66 07	lda $0766			lda     KNLEvent.file.stream
.817d		18		clc				clc
.817e						_out
.817e		60		rts				rts
.817f						KNLSetEventPointer:
.817f		48		pha				pha
.8180		a9 63		lda #$63			lda     #KNLEvent & $FF 			; tell kernel where to store event data
.8182		85 f0		sta $f0				sta     kernel.args.events+0
.8184		a9 07		lda #$07			lda     #KNLEvent >> 8
.8186		85 f1		sta $f1				sta     kernel.args.events+1
.8188		68		pla				pla
.8189		60		rts				rts
.818a						KNLSetupFileName:
.818a		5a		phy				phy 								; save Y on stack
.818b		85 36		sta $36				sta 	zTemp0 						; save filename position in temp, and in kenrel slot
.818d		86 37		stx $37				stx 	zTemp0+1
.818f		85 fb		sta $fb				sta     kernel.args.file.open.fname+0
.8191		86 fc		stx $fc				stx     kernel.args.file.open.fname+1
.8193		a0 ff		ldy #$ff			ldy 	#$FF 						; get the filename length => Kernel slot
.8195						_KNLGetLength:
.8195		c8		iny				iny
.8196		b1 36		lda ($36),y			lda 	(zTemp0),y
.8198		d0 fb		bne $8195			bne 	_KNLGetLength
.819a		84 fd		sty $fd				sty 	kernel.args.file.open.fname_len
.819c		7a		ply				ply
.819d		60		rts				rts
.819e						KNLReadBlock:
.819e		85 f3		sta $f3				sta     kernel.args.file.read.stream
.81a0		86 f4		stx $f4				stx     kernel.args.file.read.buflen
.81a2		20 60 ff	jsr $ff60			jsr     kernel.File.Read 			; read request
.81a5		a9 38		lda #$38			lda     #kernel.event.file.ERROR    ; Kernel out of events/buffers; shouldn't happen
.81a7		b0 2e		bcs $81d7			bcs     _KGNBExitFail               ; report as general error
.81a9						_KGRBEventLoop:
.81a9		20 0c ff	jsr $ff0c			jsr     kernel.Yield    			; event wait
.81ac		20 00 ff	jsr $ff00			jsr     kernel.NextEvent
.81af		b0 f8		bcs $81a9			bcs     _KGRBEventLoop
.81b1		ad 63 07	lda $0763			lda 	KNLEvent.type 				; get event
.81b4		c9 2c		cmp #$2c			cmp     #kernel.event.file.DATA 	; data, return data
.81b6		f0 0a		beq $81c2			beq     _KNLRBGetNextByte
.81b8		c9 38		cmp #$38			cmp     #kernel.event.file.ERROR  	; errors on file i/o, return as appropriate.
.81ba		f0 1b		beq $81d7			beq 	_KGNBExitFail
.81bc		c9 30		cmp #$30			cmp     #kernel.event.file.EOF
.81be		f0 17		beq $81d7			beq 	_KGNBExitFail
.81c0		80 e7		bra $81a9			bra 	_KGRBEventLoop
.81c2						_KNLRBGetNextByte:
.81c2		a9 62		lda #$62			lda     #<KNLReadBuffer 			; Set the target buffer
.81c4		85 fb		sta $fb				sta     kernel.args.recv.buf+0
.81c6		a9 06		lda #$06			lda     #>KNLReadBuffer
.81c8		85 fc		sta $fc				sta     kernel.args.recv.buf+1
.81ca		ad 69 07	lda $0769			lda     KNLEvent.file.data.read 	; Set the target length
.81cd		85 fd		sta $fd				sta     kernel.args.recv.buflen
.81cf		20 04 ff	jsr $ff04			jsr     kernel.ReadData		       	; Get the data from the kernel  (Synchronous call, no error)
.81d2		ad 69 07	lda $0769			lda     KNLEvent.file.data.read 	; Return # of bytes read (in A)
.81d5		18		clc				clc
.81d6		60		rts				rts
.81d7						_KGNBExitFail:
.81d7		38		sec				sec
.81d8		60		rts				rts
.81d9						KNLWriteBlock:
.81d9		da		phx				phx
.81da		5a		phy				phy
.81db		85 f3		sta $f3				sta     kernel.args.file.write.stream ; save the stream.
.81dd		a5 36		lda $36				lda     zTemp0 						; save the data location.
.81df		85 fb		sta $fb				sta     kernel.args.file.write.buf+0
.81e1		a5 37		lda $37				lda     zTemp0+1
.81e3		85 fc		sta $fc				sta     kernel.args.file.write.buf+1
.81e5		86 fd		stx $fd				stx     kernel.args.file.write.buflen ; Set the buffer length
.81e7		20 64 ff	jsr $ff64			jsr     kernel.File.Write 			; write it out.
.81ea		a9 38		lda #$38			lda 	#kernel.event.file.ERROR 	; in case it fails.
.81ec		b0 21		bcs $820f			bcs 	_KWBFailed
.81ee						_KNLWLoop:
.81ee		20 0c ff	jsr $ff0c			jsr     kernel.Yield
.81f1		20 00 ff	jsr $ff00			jsr     kernel.NextEvent
.81f4		b0 f8		bcs $81ee			bcs     _KNLWLoop
.81f6		ad 63 07	lda $0763			lda     KNLEvent.type 				; various errors.
.81f9		c9 32		cmp #$32			cmp     #kernel.event.file.CLOSED
.81fb		f0 12		beq $820f			beq 	_KWBFailed
.81fd		c9 38		cmp #$38			cmp     #kernel.event.file.ERROR
.81ff		f0 0e		beq $820f			beq 	_KWBFailed
.8201		c9 30		cmp #$30			cmp     #kernel.event.file.EOF
.8203		f0 0a		beq $820f			beq 	_KWBFailed
.8205		c9 2e		cmp #$2e			cmp     #kernel.event.file.WROTE 	; wait until block write succeeds
.8207		d0 e5		bne $81ee			bne 	_KNLWLoop
.8209		18		clc				clc
.820a		ad 69 07	lda $0769			lda    KNLEvent.file.wrote.wrote 	; get bytes written.
.820d		80 01		bra $8210			bra 	_KWBExit
.820f						_KWBFailed:
.820f		38		sec				sec
.8210						_KWBExit:
.8210		7a		ply				ply
.8211		fa		plx				plx
.8212		60		rts				rts
.8213						KNLCloseFile:
.8213		85 f3		sta $f3				sta     kernel.args.file.close.stream
.8215		20 68 ff	jsr $ff68			jsr     kernel.File.Close
.8218		60		rts				rts
.8219						KNLCheckKeyPressed:
.8219		20 7f 81	jsr $817f			jsr 	KNLSetEventPointer
.821c		20 00 ff	jsr $ff00			jsr     kernel.NextEvent 			; get next event
.821f		b0 0b		bcs $822c			bcs 	_CKPNoEvent 				; no event
.8221		ad 63 07	lda $0763			lda     KNLEvent.type
.8224		c9 08		cmp #$08			cmp     #kernel.event.key.PRESSED 	; must be a pressed event.
.8226		d0 04		bne $822c			bne 	_CKPNoEvent
.8228		ad 68 07	lda $0768			lda     KNLEvent.key.ascii
.822b		60		rts				rts
.822c						_CKPNoEvent:
.822c		a9 00		lda #$00			lda 	#0
.822e		60		rts				rts
.822f						EXTReadController:
.822f		da		phx				phx
.8230		a6 01		ldx $01				ldx 	1 							; save current I/O in X
.8232		64 01		stz $01				stz 	1 							; switch to I/O 0
.8234		ad 00 dc	lda $dc00			lda 	$DC00  						; read VIA register
.8237		86 01		stx $01				stx 	1 							; repair old I/O and exit
.8239		fa		plx				plx
.823a		60		rts				rts
.0662						KNLReadBuffer:
>0662								.fill   256
.0762						KNLDefaultDrive:
>0762								.byte 	?
.0763						KNLEvent
>0763						type        .byte   ?   ; Enum above
>0764						buf         .byte   ?   ; page id or zero
>0765						ext         .byte   ?   ; page id or zero
.0766						key
>0766						keyboard    .byte   ?   ; Keyboard ID
>0767						raw         .byte   ?   ; Raw key ID
>0768						ascii       .byte   ?   ; ASCII value
>0769						flags       .byte   ?   ; Flags (META)
=$80						META        = $80       ; Meta key; no associated ASCII value.
.0766						mouse
.0766						delta
>0766						x           .byte   ?
>0767						y           .byte   ?
>0768						z           .byte   ?
>0769						buttons     .byte   ?
.0766						clicks
>0766						inner       .byte   ?
>0767						middle      .byte   ?
>0768						outer       .byte   ?
.0766						joystick
>0766						joy0        .byte   ?
>0767						joy1        .byte   ?
.0766						udp
>0766						token       .byte   ?   ; TODO: break out into fields
.0766						file
>0766						stream      .byte   ?
>0767						cookie      .byte   ?
.0768						data
>0768						requested   .byte   ?   ; Requested number of bytes to read
>0769						read        .byte   ?   ; Number of bytes actually read
.0768						wrote
>0768						requested   .byte   ?   ; Requested number of bytes to read
>0769						wrote       .byte   ?   ; Number of bytes actually read
.0766						directory
>0766						stream      .byte   ?
>0767						cookie      .byte   ?
.0768						volume
>0768						len         .byte   ?   ; Length of volname (in buf)
>0769						flags       .byte   ?   ; block size, text encoding
.0768						file
>0768						len         .byte   ?
>0769						flags       .byte   ?   ; block scale, text encoding, approx size
.0768						free
>0768						flags       .byte   ?   ; block scale, text encoding, approx size

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/getinkey.asm

.823b						AscGet:
.823b		fa		plx				plx 								; restore stack pos
.823c						AscGet2:
.823c		20 8a 95	jsr $958a			jsr 	CheckRightBracket
.823f		20 f1 80	jsr $80f1	_AGKey:	jsr 	ProcessEvents 				; any ongoing events.
.8242		d0 0b		bne $824f			bne 	_AGBreak
.8244		20 23 81	jsr $8123			jsr 	PopKeyboardQueue 			; wait for key.
.8247		c9 00		cmp #$00			cmp 	#0
.8249		f0 f4		beq $823f			beq 	_AGKey
.824b		20 4a a5	jsr $a54a			jsr 	NSMSetByte
.824e		60		rts				rts
.824f						_AGBreak:
.824f		a9 01		lda #$01		lda	#1
.8251		4c a3 95	jmp $95a3		jmp	ErrorHandler
.8254						AscInkey:
.8254		fa		plx				plx 								; restore stack pos
.8255						AscInkey2:
.8255		20 8a 95	jsr $958a			jsr 	CheckRightBracket
.8258		20 23 81	jsr $8123			jsr 	PopKeyboardQueue 			; get key if any, non returns zero.
.825b		20 4a a5	jsr $a54a			jsr 	NSMSetByte
.825e		60		rts				rts
.825f						ChrGet:
.825f		fa		plx				plx
.8260		20 3c 82	jsr $823c			jsr 	AscGet2
.8263		4c 6a 82	jmp $826a			jmp 	GetInkeyToString
.8266						ChrInkey:
.8266		fa		plx				plx
.8267		20 55 82	jsr $8255			jsr 	AscInkey2
.826a						GetInkeyToString:
.826a		c9 00		cmp #$00			cmp 	#0 							; if zero, return ""
.826c		f0 0b		beq $8279			beq 	_GKISNull
.826e		48		pha				pha
.826f		a9 01		lda #$01			lda 	#1 							; allocate space for one char
.8271		20 17 b7	jsr $b717			jsr 	StringTempAllocate
.8274		68		pla				pla 								; write number to it
.8275		20 50 b7	jsr $b750			jsr 	StringTempWrite
.8278		60		rts				rts
.8279						_GKISNull:
.8279		a9 00		lda #$00			lda 	#0
.827b		20 17 b7	jsr $b717			jsr 	StringTempAllocate
.827e		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/api/api.asm

>ff00						NextEvent   .fill   4   ; Copy the next event into user-space.
>ff04						ReadData    .fill   4   ; Copy primary bulk event data into user-space
>ff08						ReadExt     .fill   4   ; Copy secondary bolk event data into user-space
>ff0c						Yield       .fill   4   ; Give unused time to the kernel.
>ff10						Putch       .fill   4   ; deprecated
>ff14						Basic       .fill   4   ; deprecated
>ff18						            .fill   4   ; reserved
>ff1c						            .fill   4   ; reserved
>ff20						List        .fill   4   ; Returns a bit-set of available block-accessible devices.
>ff24						GetName     .fill   4   ; Gets the hardware level name of the given block device or media.
>ff28						GetSize     .fill   4   ; Get the number of raw sectors (48 bits) for the given device
>ff2c						Read        .fill   4   ; Read a raw sector (48 bit LBA)
>ff30						Write       .fill   4   ; Write a raw sector (48 bit LBA)
>ff34						Format      .fill   4   ; Perform a low-level format if the media support it.
>ff38						Export      .fill   4   ; Update the FileSystem table with the partition table (if present).
>ff3c						List        .fill   4   ; Returns a bit-set of available logical devices.
>ff40						GetSize     .fill   4   ; Get the size of the partition or logical device in sectors.
>ff44						MkFS        .fill   4   ; Creates a new file-system on the logical device.
>ff48						CheckFS     .fill   4   ; Checks the file-system for errors and corrects them.
>ff4c						Mount       .fill   4   ; Mark the file-system as available for File and Directory operations.
>ff50						Unmount     .fill   4   ; Mark the file-system as unavailable for File and Directory operations.
>ff54						ReadBlock   .fill   4   ; Read a partition-local raw sector on an unmounted device.
>ff58						WriteBlock  .fill   4   ; Write a partition-local raw sector on an unmounted device.
>ff5c						Open        .fill   4   ; Open the given file for read, create, or append.
>ff60						Read        .fill   4   ; Request bytes from a file opened for reading.
>ff64						Write       .fill   4   ; Write bytes to a file opened for create or append.
>ff68						Close       .fill   4   ; Close an open file.
>ff6c						Rename      .fill   4   ; Rename a closed file.
>ff70						Delete      .fill   4   ; Delete a closed file.
>ff74						Open        .fill   4   ; Open a directory for reading.
>ff78						Read        .fill   4   ; Read a directory entry; may also return VOLUME and FREE events.
>ff7c						Close       .fill   4   ; Close a directory once finished reading.
>ff80						            .fill   4   ; call gate
>ff84						GetSize     .fill   4   ; Returns rows/cols in kernel args.
>ff88						DrawRow     .fill   4   ; Draw text/color buffers left-to-right
>ff8c						DrawColumn  .fill   4   ; Draw text/color buffers top-to-bottom
>ff90						GetIP       .fill   4   ; Get the local IP address.
>ff94						SetIP       .fill   4   ; Set the local IP address.
>ff98						GetDNS      .fill   4   ; Get the configured DNS IP address.
>ff9c						SetDNS      .fill   4   ; Set the configured DNS IP address.
>ffa0						GetTime     .fill   4
>ffa4						SetTime     .fill   4
>ffa8						GetSysInfo  .fill   4
>ffac						SetBPS      .fill   4   ; Set the serial BPS (should match the SLIP router's speed).
>ffb0						InitUDP     .fill   4
>ffb4						SendUDP     .fill   4
>ffb8						RecvUDP     .fill   4
>ffbc						InitTCP     .fill   4
>ffc0						SendTCP     .fill   4
>ffc4						RecvTCP     .fill   4
>ffc8						SendICMP    .fill   4
>ffcc						RecvICMP    .fill   4
.00f0						args
.00f0						events
>00f0						dest        .word       ?   ; GetNextEvent copies event data here
>00f2						pending     .byte       ?   ; Negative count of pending events
.00f3						end
.00f3						recv
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.00f3						fs
.00f3						format
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.00f3						mkfs
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.00f3						file
.00f3						open
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>00f5						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.00f3						read
>00f3						stream      .byte       ?
>00f4						buflen      .byte       ?
.00f3						write
>00f3						stream      .byte       ?
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.00f3						close
>00f3						stream      .byte       ?
.00f3						rename
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						old         = args.buf
=$fd						old_len     = args.buflen
=$f8						new         = args.ext
=$fa						new_len     = args.extlen
.00f3						delete
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>00f5						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.00f3						directory
.00f3						open
>00f3						drive       .byte       ?
>00f4						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
.00f3						read
>00f3						stream      .byte       ?
>00f4						buflen      .byte       ?
.00f3						close
>00f3						stream      .byte       ?
.00f3						display
>00f3						x           .byte       ?   ; coordinate or size
>00f4						y           .byte       ?   ; coordinate or size
=$fb						text        = args.buf      ; text
=$f8						color       = args.ext      ; color
=$fb						buf         = args.buf      ; deprecated
=$f8						buf2        = args.ext      ; deprecated
=$fd						buflen      = args.buflen
.00f3						net
>00f3						socket      .word       ?
>00f5						src_port    .word       ?
>00f7						dest_port   .word       ?
>00f9						dest_ip     .fill       4
>00f5						buf         .word       ?
>00f7						buflen      .byte       ?
>00f8						ext         .word       ?
>00fa						extlen      .byte       ?
=$f8						ext         = $f8
=$fa						extlen      = $fa
=$fb						buf         = $fb
=$fd						buflen      = $fd
=$fe						ptr         = $fe
.0000						args_t
.0000						events
>0000						dest        .word       ?   ; GetNextEvent copies event data here
>0002						pending     .byte       ?   ; Negative count of pending events
.0003						end
.0003						recv
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0003						fs
.0003						format
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0003						mkfs
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0003						file
.0003						open
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0005						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0003						read
>0003						stream      .byte       ?
>0004						buflen      .byte       ?
.0003						write
>0003						stream      .byte       ?
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0003						close
>0003						stream      .byte       ?
.0003						rename
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						old         = args.buf
=$fd						old_len     = args.buflen
=$f8						new         = args.ext
=$fa						new_len     = args.extlen
.0003						delete
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0005						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0003						directory
.0003						open
>0003						drive       .byte       ?
>0004						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
.0003						read
>0003						stream      .byte       ?
>0004						buflen      .byte       ?
.0003						close
>0003						stream      .byte       ?
.0003						display
>0003						x           .byte       ?   ; coordinate or size
>0004						y           .byte       ?   ; coordinate or size
=$fb						text        = args.buf      ; text
=$f8						color       = args.ext      ; color
=$fb						buf         = args.buf      ; deprecated
=$f8						buf2        = args.ext      ; deprecated
=$fd						buflen      = args.buflen
.0003						net
>0003						socket      .word       ?
>0005						src_port    .word       ?
>0007						dest_port   .word       ?
>0009						dest_ip     .fill       4
>0005						buf         .word       ?
>0007						buflen      .byte       ?
>0008						ext         .word       ?
>000a						extlen      .byte       ?
=$f8						ext         = $f8
=$fa						extlen      = $fa
=$fb						buf         = $fb
=$fd						buflen      = $fd
=$fe						ptr         = $fe
.0000						event_t
>0000						dest        .word       ?   ; GetNextEvent copies event data here
>0002						pending     .byte       ?   ; Negative count of pending events
.0003						end
.0000						recv_t
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0000						fs_t
.0000						format
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0000						mkfs
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0000						fs_mkfs_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						label       = args.buf
=$fd						label_len   = args.buflen
.0000						file_t
.0000						open
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0002						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0000						read
>0000						stream      .byte       ?
>0001						buflen      .byte       ?
.0000						write
>0000						stream      .byte       ?
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0000						close
>0000						stream      .byte       ?
.0000						rename
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						old         = args.buf
=$fd						old_len     = args.buflen
=$f8						new         = args.ext
=$fa						new_len     = args.extlen
.0000						delete
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0002						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0000						fs_open_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
>0002						mode        .byte       ?
=0						READ        = 0
=1						WRITE       = 1
=2						END         = 2
.0000						fs_read_t
>0000						stream      .byte       ?
>0001						buflen      .byte       ?
.0000						fs_write_t
>0000						stream      .byte       ?
=$fb						buf         = args.buf
=$fd						buflen      = args.buflen
.0000						fs_close_t
>0000						stream      .byte       ?
.0000						fs_rename_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						old         = args.buf
=$fd						old_len     = args.buflen
=$f8						new         = args.ext
=$fa						new_len     = args.extlen
.0000						fs_delete_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fnane       = args.buf
=$fd						fname_len   = args.buflen
.0000						dir_t
.0000						open
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
.0000						read
>0000						stream      .byte       ?
>0001						buflen      .byte       ?
.0000						close
>0000						stream      .byte       ?
.0000						dir_open_t
>0000						drive       .byte       ?
>0001						cookie      .byte       ?
=$fb						fname       = args.buf
=$fd						fname_len   = args.buflen
.0000						dir_read_t
>0000						stream      .byte       ?
>0001						buflen      .byte       ?
.0000						dir_close_t
>0000						stream      .byte       ?
.0000						display_t
>0000						x           .byte       ?   ; coordinate or size
>0001						y           .byte       ?   ; coordinate or size
=$fb						text        = args.buf      ; text
=$f8						color       = args.ext      ; color
=$fb						buf         = args.buf      ; deprecated
=$f8						buf2        = args.ext      ; deprecated
=$fd						buflen      = args.buflen
.0000						net_t
>0000						socket      .word       ?
>0002						src_port    .word       ?
>0004						dest_port   .word       ?
>0006						dest_ip     .fill       4
>0002						buf         .word       ?
>0004						buflen      .byte       ?
>0005						ext         .word       ?
>0007						extlen      .byte       ?
>0000						            .word   ?   ; Reserved
>0002						            .word   ?   ; Deprecated
>0004						JOYSTICK    .word   ?   ; Game Controller changes.
>0006						DEVICE      .word   ?   ; Device added/removed.
>0008						PRESSED     .word   ?   ; Key pressed
>000a						RELEASED    .word   ?   ; Key released.
>000c						DELTA       .word   ?   ; Regular mouse move and button state
>000e						CLICKS      .word   ?   ; Click counts
>0010						NAME        .word   ?
>0012						SIZE        .word   ?
>0014						DATA        .word   ?   ; The read request has succeeded.
>0016						WROTE       .word   ?   ; The write request has completed.
>0018						FORMATTED   .word   ?   ; The low-level format has completed.
>001a						ERROR       .word   ?
>001c						SIZE        .word   ?
>001e						CREATED     .word   ?
>0020						CHECKED     .word   ?
>0022						DATA        .word   ?   ; The read request has succeeded.
>0024						WROTE       .word   ?   ; The write request has completed.
>0026						ERROR       .word   ?
>0028						NOT_FOUND   .word   ?   ; The file file was not found.
>002a						OPENED      .word   ?   ; The file was successfully opened.
>002c						DATA        .word   ?   ; The read request has succeeded.
>002e						WROTE       .word   ?   ; The write request has completed.
>0030						EOF         .word   ?   ; All file data has been read.
>0032						CLOSED      .word   ?   ; The close request has completed.
>0034						RENAMED     .word   ?   ; The rename request has completed.
>0036						DELETED     .word   ?   ; The delete request has completed.
>0038						ERROR       .word   ?   ; An error occured; close the file if opened.
>003a						OPENED      .word   ?   ; The directory open request succeeded.
>003c						VOLUME      .word   ?   ; A volume record was found.
>003e						FILE        .word   ?   ; A file record was found.
>0040						FREE        .word   ?   ; A file-system free-space record was found.
>0042						EOF         .word   ?   ; All data has been read.
>0044						CLOSED      .word   ?   ; The directory file has been closed.
>0046						ERROR       .word   ?   ; An error occured; user should close.
>0048						TCP         .word   ?
>004a						UDP         .word   ?
.0000						event_t
>0000						type        .byte   ?   ; Enum above
>0001						buf         .byte   ?   ; page id or zero
>0002						ext         .byte   ?   ; page id or zero
.0003						key
>0003						keyboard    .byte   ?   ; Keyboard ID
>0004						raw         .byte   ?   ; Raw key ID
>0005						ascii       .byte   ?   ; ASCII value
>0006						flags       .byte   ?   ; Flags (META)
=$80						META        = $80       ; Meta key; no associated ASCII value.
.0003						mouse
.0003						delta
>0003						x           .byte   ?
>0004						y           .byte   ?
>0005						z           .byte   ?
>0006						buttons     .byte   ?
.0003						clicks
>0003						inner       .byte   ?
>0004						middle      .byte   ?
>0005						outer       .byte   ?
.0003						joystick
>0003						joy0        .byte   ?
>0004						joy1        .byte   ?
.0003						udp
>0003						token       .byte   ?   ; TODO: break out into fields
.0003						file
>0003						stream      .byte   ?
>0004						cookie      .byte   ?
.0005						data
>0005						requested   .byte   ?   ; Requested number of bytes to read
>0006						read        .byte   ?   ; Number of bytes actually read
.0005						wrote
>0005						requested   .byte   ?   ; Requested number of bytes to read
>0006						wrote       .byte   ?   ; Number of bytes actually read
.0003						directory
>0003						stream      .byte   ?
>0004						cookie      .byte   ?
.0005						volume
>0005						len         .byte   ?   ; Length of volname (in buf)
>0006						flags       .byte   ?   ; block size, text encoding
.0005						file
>0005						len         .byte   ?
>0006						flags       .byte   ?   ; block scale, text encoding, approx size
.0005						free
>0005						flags       .byte   ?   ; block scale, text encoding, approx size
.0000						key_t
>0000						keyboard    .byte   ?   ; Keyboard ID
>0001						raw         .byte   ?   ; Raw key ID
>0002						ascii       .byte   ?   ; ASCII value
>0003						flags       .byte   ?   ; Flags (META)
=$80						META        = $80       ; Meta key; no associated ASCII value.
.0000						mouse_t
.0000						delta
>0000						x           .byte   ?
>0001						y           .byte   ?
>0002						z           .byte   ?
>0003						buttons     .byte   ?
.0000						clicks
>0000						inner       .byte   ?
>0001						middle      .byte   ?
>0002						outer       .byte   ?
.0000						m_delta_t
>0000						x           .byte   ?
>0001						y           .byte   ?
>0002						z           .byte   ?
>0003						buttons     .byte   ?
.0000						m_clicks_t
>0000						inner       .byte   ?
>0001						middle      .byte   ?
>0002						outer       .byte   ?
.0000						joystick_t
>0000						joy0        .byte   ?
>0001						joy1        .byte   ?
.0000						file_t
>0000						stream      .byte   ?
>0001						cookie      .byte   ?
.0002						data
>0002						requested   .byte   ?   ; Requested number of bytes to read
>0003						read        .byte   ?   ; Number of bytes actually read
.0002						wrote
>0002						requested   .byte   ?   ; Requested number of bytes to read
>0003						wrote       .byte   ?   ; Number of bytes actually read
.0000						fs_data_t
>0000						requested   .byte   ?   ; Requested number of bytes to read
>0001						read        .byte   ?   ; Number of bytes actually read
.0000						fs_wrote_t
>0000						requested   .byte   ?   ; Requested number of bytes to read
>0001						wrote       .byte   ?   ; Number of bytes actually read
.0000						dir_t
>0000						stream      .byte   ?
>0001						cookie      .byte   ?
.0002						volume
>0002						len         .byte   ?   ; Length of volname (in buf)
>0003						flags       .byte   ?   ; block size, text encoding
.0002						file
>0002						len         .byte   ?
>0003						flags       .byte   ?   ; block scale, text encoding, approx size
.0002						free
>0002						flags       .byte   ?   ; block scale, text encoding, approx size
.0000						dir_vol_t
>0000						len         .byte   ?   ; Length of volname (in buf)
>0001						flags       .byte   ?   ; block size, text encoding
.0000						dir_file_t
>0000						len         .byte   ?
>0001						flags       .byte   ?   ; block scale, text encoding, approx size
.0000						dir_free_t
>0000						flags       .byte   ?   ; block scale, text encoding, approx size
.0000						dir_ext_t
>0000						free        .fill   6   ; blocks used/free
.0000						udp_t
>0000						token       .byte   ?   ; TODO: break out into fields

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/assembler.asm

.827f						AssembleGroup1:
.827f		a9 ff		lda #$ff			lda 	#$FF 						; flag for group 1 / mask.
.8281		8d 25 04	sta $0425			sta 	ModeMask 					; initialise the mode mask - all for all
.8284		80 02		bra $8288			bra 	AsmGroup12
.8286						AssembleGroup2:
.8286		a9 00		lda #$00			lda 	#$00 						; flag for group 2
.8288						AsmGroup12:
.8288		8d 23 04	sta $0423			sta 	IsGroup1 					; save the 'group 1' flag
.828b		68		pla				pla 								; pop the return address to access the information following.
.828c		fa		plx				plx
.828d		20 14 83	jsr $8314			jsr 	AccessParameters 			; get opcode and save as base
.8290		8d 24 04	sta $0424			sta 	BaseOpcode
.8293		ad 23 04	lda $0423			lda 	IsGroup1 					; skip if group 1 as we don't have a complex mask.
.8296		d0 08		bne $82a0			bne 	_AG12HaveMask
.8298		a9 02		lda #$02			lda 	#2 							; if group 2 the second parameter is the mask
.829a		20 1c 83	jsr $831c			jsr 	GetParameter		 		; e.g. which modes are supported for this operand
.829d		8d 25 04	sta $0425			sta 	ModeMask
.82a0						_AG12HaveMask:
.82a0		20 50 84	jsr $8450			jsr 	TypeAndCalculateOperand 	; get zero page type
.82a3		da		phx				phx 								; save found address mode
.82a4		20 80 83	jsr $8380			jsr 	AssembleModeX
.82a7		fa		plx				plx  								; restore address mode
.82a8		b0 0b		bcs $82b5			bcs 	_AG12Exit
.82aa		20 b6 82	jsr $82b6			jsr 	PromoteToAbsolute  			; promote ZP to ABS and try that
.82ad		20 80 83	jsr $8380			jsr 	AssembleModeX
.82b0		b0 03		bcs $82b5			bcs 	_AG12Exit
.82b2		4c c6 a6	jmp $a6c6			jmp 	SyntaxError 				; can't do either, so must be wrong mode/operand.
.82b5						_AG12Exit:
.82b5		60		rts				rts
.82b6						PromoteToAbsolute:
.82b6		a9 6c		lda #$6c			lda 	#AM_ABS 					; lda xx
.82b8		e0 e4		cpx #$e4			cpx 	#AM_ZEROPAGE
.82ba		f0 19		beq $82d5			beq 	_PTADo
.82bc		a9 7c		lda #$7c			lda 	#AM_ABSX 					; lda xx,X
.82be		e0 f4		cpx #$f4			cpx 	#AM_ZEROX
.82c0		f0 13		beq $82d5			beq 	_PTADo
.82c2		a9 78		lda #$78			lda 	#AM_ABSY 					; lda xx,Y
.82c4		e0 80		cpx #$80			cpx 	#AM_ZEROY
.82c6		f0 0d		beq $82d5			beq 	_PTADo
.82c8		a9 01		lda #$01			lda 	#AM_INDABS 					; lda (xx) (jump)
.82ca		e0 d1		cpx #$d1			cpx 	#AM_IND
.82cc		f0 07		beq $82d5			beq 	_PTADo
.82ce		a9 02		lda #$02			lda 	#AM_INDABSX 				; lda (xx,x) (jump)
.82d0		e0 c0		cpx #$c0			cpx 	#AM_INDX
.82d2		f0 01		beq $82d5			beq 	_PTADo
.82d4		60		rts				rts
.82d5						_PTADo:
.82d5		aa		tax				tax
.82d6		60		rts				rts
.82d7						AssembleGroup3:
.82d7		68		pla				pla 								; get parameters, which is just the opcode.
.82d8		fa		plx				plx
.82d9		20 14 83	jsr $8314			jsr 	AccessParameters 			; get and output opcode
.82dc		20 2c 83	jsr $832c			jsr 	AssemblerWriteByte
.82df		20 b4 84	jsr $84b4			jsr 	CalculateOperand 			; get a 16 bit operand
.82e2		a5 58		lda $58				lda 	NSMantissa0 				; calculate the offset
.82e4		38		sec				sec
.82e5		ed 1e 04	sbc $041e			sbc 	AssemblerAddress
.82e8		48		pha				pha 								; LSB in A
.82e9		a5 60		lda $60				lda 	NSMantissa1
.82eb		ed 1f 04	sbc $041f			sbc 	AssemblerAddress+1
.82ee		aa		tax				tax 								; MSB in X
.82ef		68		pla				pla
.82f0		18		clc				clc 								; $80 to easy check $80-$7F, plus 1 for offset error
.82f1		69 7f		adc #$7f			adc 	#$7F
.82f3		90 01		bcc $82f6			bcc 	_AG3NoCarry
.82f5		e8		inx				inx
.82f6						_AG3NoCarry:
.82f6		38		sec				sec 								; fix back and write out anyways.
.82f7		e9 80		sbc #$80			sbc 	#$80
.82f9		20 2c 83	jsr $832c			jsr 	AssemblerWriteByte
.82fc		e0 00		cpx #$00			cpx 	#0 							; was it in range
.82fe		f0 0a		beq $830a			beq 	_AG3Exit
.8300		ad 20 04	lda $0420			lda 	AssemblerControl 			; are we allowing bad values ?
.8303		29 01		and #$01			and 	#1
.8305		f0 03		beq $830a			beq 	_AG3Exit
.8307		4c cb a6	jmp $a6cb			jmp 	RangeError 					; no, branch is out of range
.830a						_AG3Exit:
.830a		60		rts				rts
.830b						AssembleGroup4:
.830b		68		pla				pla 								; pop address
.830c		fa		plx				plx
.830d		20 14 83	jsr $8314			jsr 	AccessParameters 			; access and get first
.8310		20 2c 83	jsr $832c			jsr 	AssemblerWriteByte 			; output it.
.8313		60		rts				rts
.8314						AccessParameters:
.8314		8d 21 04	sta $0421			sta 	ParamStart
.8317		8e 22 04	stx $0422			stx 	ParamStart+1
.831a		a9 01		lda #$01			lda 	#1
.831c						GetParameter:
.831c		5a		phy				phy
.831d		a8		tay				tay
.831e		ad 21 04	lda $0421			lda 	ParamStart
.8321		85 36		sta $36				sta 	zTemp0
.8323		ad 22 04	lda $0422			lda 	ParamStart+1
.8326		85 37		sta $37				sta 	zTemp0+1
.8328		b1 36		lda ($36),y			lda 	(zTemp0),y
.832a		7a		ply				ply
.832b		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/aswrite.asm

.832c						AssemblerWriteByte:
.832c		48		pha			pha
.832d		ad 20 04	lda $0420		lda 	AssemblerControl 				; check printing bytes ?
.8330		29 02		and #$02		and 	#2
.8332		f0 1b		beq $834f		beq 	_AWBNoPrint
.8334		ad 1f 04	lda $041f		lda		AssemblerAddress+1 				; print address
.8337		20 6a 83	jsr $836a		jsr 	PrintHex
.833a		ad 1e 04	lda $041e		lda		AssemblerAddress
.833d		20 6a 83	jsr $836a		jsr 	PrintHex
.8340		a9 20		lda #$20		lda 	#' '
.8342		20 03 80	jsr $8003		jsr 	EXTPrintCharacter
.8345		68		pla			pla 									; print byte
.8346		48		pha			pha
.8347		20 6a 83	jsr $836a		jsr 	PrintHex
.834a		a9 0d		lda #$0d		lda 	#13
.834c		20 03 80	jsr $8003		jsr 	EXTPrintCharacter
.834f						_AWBNoPrint:
.834f		ad 1e 04	lda $041e		lda		AssemblerAddress				; copy address to zTemp0
.8352		85 36		sta $36			sta 	zTemp0
.8354		ad 1f 04	lda $041f		lda		AssemblerAddress+1
.8357		f0 0e		beq $8367		beq 	_AWBRange
.8359		85 37		sta $37			sta 	zTemp0+1
.835b		68		pla			pla 									; write byte out
.835c		92 36		sta ($36)		sta 	(zTemp0)
.835e		ee 1e 04	inc $041e		inc 	AssemblerAddress 				; bump address
.8361		d0 03		bne $8366		bne 	_AWBNoCarry
.8363		ee 1f 04	inc $041f		inc 	AssemblerAddress+1
.8366						_AWBNoCarry:
.8366		60		rts			rts
.8367						_AWBRange:
.8367		4c cb a6	jmp $a6cb		jmp 	RangeError
.836a						PrintHex:
.836a		48		pha				pha
.836b		4a		lsr a				lsr 	a
.836c		4a		lsr a				lsr 	a
.836d		4a		lsr a				lsr 	a
.836e		4a		lsr a				lsr 	a
.836f		20 73 83	jsr $8373			jsr 	_PrintNibble
.8372		68		pla				pla
.8373						_PrintNibble:
.8373		29 0f		and #$0f			and 	#15
.8375		c9 0a		cmp #$0a			cmp 	#10
.8377		90 02		bcc $837b			bcc 	_NoShift
.8379		69 06		adc #$06			adc 	#6
.837b						_NoShift:
.837b		69 30		adc #$30			adc 	#48
.837d		4c 03 80	jmp $8003			jmp 	EXTPrintCharacter

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/instruction.asm

.8380						AssembleModeX:
.8380		5a		phy				phy
.8381		ad 23 04	lda $0423			lda 	IsGroup1
.8384		f0 17		beq $839d			beq 	_AMXGroup2
.8386		8a		txa				txa 							; is it in group # 1
.8387		29 40		and #$40			and 	#AM_ISG1
.8389		f0 4d		beq $83d8			beq 	_AMXFail 				; no, give up.
.838b		8a		txa				txa 							; get back.
.838c		29 1f		and #$1f			and 	#$1F 					; this is now the offset.
.838e		e0 e0		cpx #$e0			cpx 	#AM_IMMEDIATE 			; if not immediate, we can continue.
.8390		d0 22		bne $83b4			bne 	_AMXHaveInfo
.8392		ad 24 04	lda $0424			lda 	BaseOpcode 				; cannot store immediate.
.8395		c9 81		cmp #$81			cmp 	#$81
.8397		f0 3f		beq $83d8			beq 	_AMXFail
.8399		a9 08		lda #$08			lda 	#8 						; if immediate we use offset 8.
.839b		80 17		bra $83b4			bra 	_AMXHaveInfo 			; odd design decision there.
.839d						_AMXGroup2:
.839d		8a		txa				txa 							; is it in group 2 ?
.839e		29 20		and #$20			and 	#AM_ISG2
.83a0		f0 36		beq $83d8			beq 	_AMXFail 				; no, give up.
.83a2		8a		txa				txa 							; get the offset into Y
.83a3		29 1f		and #$1f			and 	#$1F
.83a5		4a		lsr a				lsr 	a 						; make it 0-7.
.83a6		4a		lsr a				lsr  	a
.83a7		a8		tay				tay
.83a8		ad 25 04	lda $0425			lda 	ModeMask 				; shift the modemask left so you can check it against the requested offset
.83ab						_AMXCheckOkay:
.83ab		0a		asl a				asl 	a 						; shift modemask left enough times to check legitimate.
.83ac		88		dey				dey
.83ad		10 fc		bpl $83ab			bpl 	_AMXCheckOkay
.83af		90 27		bcc $83d8			bcc 	_AMXFail 				; not allowed.
.83b1		8a		txa				txa  							; get mask back
.83b2		29 1f		and #$1f			and 	#$1F
.83b4						_AMXHaveInfo:
.83b4		e0 00		cpx #$00			cpx 	#$00 					; does it *require* an 8 bit operand
.83b6		10 04		bpl $83bc			bpl 	_AMXAnySize 			; checking bit 7, the zero page opcode flag.
.83b8		a4 60		ldy $60				ldy 	NSMantissa1 			; fail if it is outside range, e.g. the MSB is set.
.83ba		d0 1c		bne $83d8			bne 	_AMXFail
.83bc						_AMXAnySize:
.83bc		18		clc				clc 							; add offset to the base opcode
.83bd		6d 24 04	adc $0424			adc 	BaseOpcode
.83c0						_AMXOutputCode:
.83c0		20 2c 83	jsr $832c			jsr 	AssemblerWriteByte 		; write the opcode out.
.83c3		e0 28		cpx #$28			cpx 	#AM_ACC 				; A mode (e.g. ASL)
.83c5		f0 0e		beq $83d5			beq 	_AMXExit
.83c7		a5 58		lda $58				lda 	NSMantissa0 			; write LSB operand
.83c9		20 2c 83	jsr $832c			jsr 	AssemblerWriteByte
.83cc		e0 00		cpx #$00			cpx 	#$00 					; zeropage ?
.83ce		30 05		bmi $83d5			bmi 	_AMXExit
.83d0		a5 60		lda $60				lda 	NSMantissa1 			; write MSB operand
.83d2		20 2c 83	jsr $832c			jsr 	AssemblerWriteByte
.83d5						_AMXExit:
.83d5		7a		ply				ply
.83d6		38		sec				sec
.83d7		60		rts				rts
.83d8						_AMXFail:
.83d8		a0 00		ldy #$00			ldy 	#0
.83da						_AMXCheckOddities:
.83da		8a		txa				txa
.83db		d9 02 84	cmp $8402,y			cmp 	ExtraOpcode+2,y 		; match address mode
.83de		d0 15		bne $83f5			bne 	_AMXCONext
.83e0		b9 00 84	lda $8400,y			lda 	ExtraOpcode+0,y 		; do the base opcodes match
.83e3		cd 24 04	cmp $0424			cmp 	BaseOpcode
.83e6		d0 0d		bne $83f5			bne 	_AMXCONext
.83e8		e0 00		cpx #$00			cpx 	#$00 					; requires zero page ?
.83ea		10 04		bpl $83f0			bpl 	_AMXCONotZero
.83ec		a5 60		lda $60				lda 	NSMantissa1
.83ee		d0 05		bne $83f5			bne 	_AMXCONext
.83f0						_AMXCONotZero:
.83f0		b9 01 84	lda $8401,y			lda 	ExtraOpcode+1,y 		; get new opcode
.83f3		80 cb		bra $83c0			bra 	_AMXOutputCode 			; and assemble it
.83f5						_AMXCONext:
.83f5		c8		iny				iny
.83f6		c8		iny				iny
.83f7		c8		iny				iny
.83f8		b9 00 84	lda $8400,y			lda 	ExtraOpcode+0,y 		; end of table
.83fb		d0 dd		bne $83da			bne 	_AMXCheckOddities
.83fd						_AMXCOFail:
.83fd		7a		ply				ply
.83fe		18		clc				clc
.83ff		60		rts				rts
.8400						ExtraOpcode:
>8400		40 6c 01					.byte $40,$6c,AM_INDABS 	; jump
>8403		40 7c 02					.byte $40,$7C,AM_INDABSX 	; jump
>8406		a2 be 78					.byte $a2,$BE,AM_ABSY 		; ldx
>8409		a2 b6 80					.byte $a2,$B6,AM_ZEROY 		; ldx
>840c		82 96 80					.byte $82,$96,AM_ZEROY 		; stx
>840f		e2 1a 28					.byte $e2,$1a,AM_ACC 		; inc
>8412		c2 3a 28					.byte $c2,$3a,AM_ACC 		; dec
>8415		20 89 e0					.byte $20,$89,AM_IMMEDIATE 	; bit
>8418		60 9c 6c					.byte $60,$9c,AM_ABS 		; stz
>841b		60 9e 7c					.byte $60,$9e,AM_ABSX 		; stz
>841e		00						.byte $00

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/label.asm

.841f						LabelHere:
.841f		c8		iny				iny 								; skip .
.8420		a2 00		ldx #$00			ldx 	#0 							; get a term
.8422		20 f1 9e	jsr $9ef1			jsr 	EvaluateTerm
.8425		a5 50		lda $50				lda 	NSStatus 					; needs to be an integer reference.
.8427		c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.8429		d0 22		bne $844d			bne 	_ALType 					; otherwise typing error
.842b		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy reference address to zTemp0
.842d		85 36		sta $36				sta 	zTemp0 						; (e.g. where we store the address)
.842f		b5 60		lda $60,x			lda 	NSMantissa1,x
.8431		85 37		sta $37				sta 	zTemp0+1
.8433		5a		phy				phy 								; copy address in (64k)
.8434		a0 01		ldy #$01			ldy 	#1
.8436		ad 1e 04	lda $041e			lda	 	AssemblerAddress
.8439		92 36		sta ($36)			sta 	(zTemp0)
.843b		ad 1f 04	lda $041f			lda	 	AssemblerAddress+1
.843e		91 36		sta ($36),y			sta 	(zTemp0),y
.8440		c8		iny				iny
.8441		a9 00		lda #$00			lda 	#0 							; zero the rest.
.8443		91 36		sta ($36),y			sta 	(zTemp0),y
.8445		c8		iny				iny
.8446		91 36		sta ($36),y			sta 	(zTemp0),y
.8448		c8		iny				iny
.8449		91 36		sta ($36),y			sta 	(zTemp0),y
.844b		7a		ply				ply
.844c		60		rts				rts
.844d						_ALType:
.844d		4c d0 a6	jmp $a6d0			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/operands.asm

.8450						TypeAndCalculateOperand:
.8450		b1 30		lda ($30),y			lda 	(codePtr),y
.8452		a2 28		ldx #$28			ldx 	#AM_ACC 					; ACC if : or EOL
.8454		c9 3a		cmp #$3a			cmp 	#KWD_COLON
.8456		f0 5b		beq $84b3			beq 	_TACOExit
.8458		c9 80		cmp #$80			cmp 	#KWC_EOL
.845a		f0 57		beq $84b3			beq 	_TACOExit
.845c		c8		iny				iny
.845d		a2 e0		ldx #$e0			ldx 	#AM_IMMEDIATE
.845f		c9 23		cmp #$23			cmp 	#KWD_HASH 					; if hash, then immediate - constant.
.8461		f0 51		beq $84b4			beq 	CalculateOperand
.8463		c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; if ( then check for indirection
.8465		f0 1f		beq $8486			beq 	_TACOIndirect
.8467		88		dey				dey 								; undo get of first character
.8468		20 b4 84	jsr $84b4			jsr 	CalculateOperand 			; get operand
.846b		b1 30		lda ($30),y			lda 	(codePtr),y
.846d		a2 e4		ldx #$e4			ldx 	#AM_ZEROPAGE 				; if not, try zero page (then absolute)
.846f		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8471		d0 40		bne $84b3			bne 	_TACOExit
.8473		c8		iny				iny
.8474		20 be 84	jsr $84be			jsr 	TACOCheckXY 				; extract X,Y or 0 (neither) from the variable.
.8477		a2 f4		ldx #$f4			ldx 	#AM_ZEROX 					; check for X
.8479		c9 58		cmp #$58			cmp 	#'X'
.847b		f0 36		beq $84b3			beq 	_TACOExit
.847d		a2 80		ldx #$80			ldx 	#AM_ZEROY 					; check for Y
.847f		c9 59		cmp #$59			cmp 	#'Y'
.8481		f0 30		beq $84b3			beq 	_TACOExit
.8483						_TACOSyntax:
.8483		4c c6 a6	jmp $a6c6			jmp 	SyntaxError
.8486						_TACOIndirect:
.8486		20 b4 84	jsr $84b4			jsr 	CalculateOperand 			; get the operand
.8489		b1 30		lda ($30),y			lda 	(codePtr),y
.848b		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if , then it must be ,X)
.848d		f0 17		beq $84a6			beq 	_TACOIndX
.848f		20 8a 95	jsr $958a			jsr 	CheckRightBracket  			; otherwise must be ) or ),Y
.8492		b1 30		lda ($30),y			lda 	(codePtr),y
.8494		a2 d1		ldx #$d1			ldx 	#AM_IND
.8496		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not comma then exit with (xx)
.8498		d0 19		bne $84b3			bne 	_TACOExit
.849a		c8		iny				iny
.849b		20 be 84	jsr $84be			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.849e		c9 59		cmp #$59			cmp 	#'Y' 						; check Y
.84a0		d0 e1		bne $8483			bne 	_TACOSyntax
.84a2		a2 d0		ldx #$d0			ldx 	#AM_INDY
.84a4		80 0d		bra $84b3			bra 	_TACOExit
.84a6						_TACOIndX:
.84a6		c8		iny				iny
.84a7		20 be 84	jsr $84be			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.84aa		c9 58		cmp #$58			cmp 	#'X' 						; check X
.84ac		d0 d5		bne $8483			bne 	_TACOSyntax
.84ae		20 8a 95	jsr $958a			jsr 	CheckRightBracket			; check )
.84b1		a2 c0		ldx #$c0			ldx 	#AM_INDX
.84b3						_TACOExit:
.84b3		60		rts				rts
.84b4						CalculateOperand:
.84b4		48		pha				pha
.84b5		da		phx				phx
.84b6		a2 00		ldx #$00			ldx 	#0 							; get 16 bit integer in Slot 0
.84b8		20 c8 a4	jsr $a4c8			jsr 	Evaluate16BitInteger
.84bb		fa		plx				plx
.84bc		68		pla				pla
.84bd		60		rts				rts
.84be						TACOCheckXY:
.84be		b1 30		lda ($30),y			lda 	(codePtr),y
.84c0		29 c0		and #$c0			and 	#$C0 						; check it is an identifier reference.
.84c2		c9 40		cmp #$40			cmp 	#$40
.84c4		d0 21		bne $84e7			bne 	_TCXYFail
.84c6		b1 30		lda ($30),y			lda 	(codePtr),y
.84c8		18		clc				clc
.84c9		69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.84cb		85 37		sta $37				sta 	zTemp0+1
.84cd		c8		iny				iny
.84ce		b1 30		lda ($30),y			lda 	(codePtr),y
.84d0		c8		iny				iny
.84d1		85 36		sta $36				sta 	zTemp0
.84d3		5a		phy				phy 								; save position
.84d4		a0 02		ldy #$02			ldy 	#2 							; type is integer ?
.84d6		b1 36		lda ($36),y			lda 	(zTemp0),y
.84d8		d0 0c		bne $84e6			bne 	_TCXYPopFail
.84da		a0 08		ldy #$08			ldy 	#8 							; get first character, should have bit 7 set as also last.
.84dc		b1 36		lda ($36),y			lda 	(zTemp0),y
.84de		c9 d8		cmp #$d8			cmp 	#'X'+$80 					; should be X or Y
.84e0		f0 08		beq $84ea			beq 	_TCXYFound
.84e2		c9 d9		cmp #$d9			cmp 	#'Y'+$80
.84e4		f0 04		beq $84ea			beq 	_TCXYFound
.84e6						_TCXYPopFail:
.84e6		7a		ply				ply
.84e7						_TCXYFail:
.84e7		a9 00		lda #$00			lda 	#0
.84e9		60		rts				rts
.84ea						_TCXYFound:
.84ea		7a		ply				ply 								; restore position
.84eb		29 7f		and #$7f			and 	#$7F 						; throw bit 7
.84ed		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/backload.asm

.84ee						BackloadProgram:
.84ee		20 22 8f	jsr $8f22			jsr 	NewProgram 					; does the actual NEW.
.84f1		a2 85		ldx #$85			ldx 	#_BLLoad >> 8
.84f3		a9 45		lda #$45			lda 	#_BLLoad & $FF
.84f5		20 fc 95	jsr $95fc			jsr 	PrintStringXA
.84f8		a9 14		lda #$14			lda 	#SOURCE_ADDRESS >> 13 		; start page
.84fa		8d 6a 07	sta $076a			sta 	BackLoadPage
.84fd		a9 00		lda #$00			lda 	#(($6000) & $FF)
.84ff		8d 6b 07	sta $076b			sta 	0+BackLoadPointer
.8502		a9 60		lda #$60			lda 	#(($6000) >> 8)
.8504		8d 6c 07	sta $076c			sta 	1+BackLoadPointer
.8507		a9 ff		lda #$ff			lda 	#$FF
.8509		8d fa ff	sta $fffa			sta 	$FFFA
.850c						_BPLoop:
.850c		a2 ff		ldx #$ff			ldx 	#$FF
.850e		20 5a 85	jsr $855a			jsr 	BLReadByte 					; read a byte
.8511		c9 00		cmp #$00			cmp 	#0
.8513		f0 29		beq $853e			beq 	_BPExit 					; if 0 exit
.8515		30 27		bmi $853e			bmi 	_BPExit 					; if -ve exit
.8517						_BPCopy:
.8517		e8		inx				inx  								; copy byte into the lineBuffer
.8518		9d 2a 05	sta $052a,x			sta 	lineBuffer,x
.851b		9e 2b 05	stz $052b,x			stz 	lineBuffer+1,x
.851e		20 5a 85	jsr $855a			jsr 	BLReadByte 					; read next byte
.8521		30 0a		bmi $852d			bmi 	_BPEndLine 					; -ve = EOL
.8523		c9 09		cmp #$09			cmp 	#9 							; handle TAB, make it space.
.8525		d0 02		bne $8529			bne 	_BPNotTab
.8527		a9 20		lda #$20			lda 	#' '
.8529						_BPNotTab:
.8529		c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.852b		b0 ea		bcs $8517			bcs 	_BPCopy 					; until a control character, should be 13 received.
.852d						_BPEndLine:
.852d		20 5d 80	jsr $805d			jsr 	TKTokeniseLine 				; tokenise the line.
.8530		ad 2b 04	lda $042b			lda 	tokenLineNumber 			; line number = 0
.8533		0d 2c 04	ora $042c			ora 	tokenLineNumber+1
.8536		f0 d4		beq $850c			beq 	_BPLoop 					; not legal code, blank line or maybe a comment.
.8538		38		sec				sec 								; append not insert
.8539		20 2f ac	jsr $ac2f			jsr 	MemoryInsertLine 			; append to current program
.853c		80 ce		bra $850c			bra 	_BPLoop
.853e						_BPExit:
.853e		9c fa ff	stz $fffa			stz 	$FFFA
.8541		20 65 87	jsr $8765			jsr 	ClearCommand 				; clear variables etc.
.8544		60		rts				rts
.8545						_BLLoad:
>8545		4c 6f 61 64 69 6e 67 20				.text 	"Loading from Memory",13,0
>854d		66 72 6f 6d 20 4d 65 6d 6f 72 79 0d 00
.855a						BLReadByte:
.855a		da		phx				phx
.855b		a6 0b		ldx $0b				ldx 	8+3 						; save current mapping for $6000 in X
.855d		ad 6a 07	lda $076a			lda 	BackLoadPage	 			; set current page
.8560		85 0b		sta $0b				sta 	8+3
.8562		ad 6b 07	lda $076b			lda 	BackLoadPointer 			; copy pointer to zTemp0
.8565		85 36		sta $36				sta 	zTemp0
.8567		ad 6c 07	lda $076c			lda 	BackLoadPointer+1
.856a		85 37		sta $37				sta 	zTemp0+1
.856c		b2 36		lda ($36)			lda 	(zTemp0) 					; read next byte
.856e		ee 6b 07	inc $076b			inc 	BackLoadPointer 			; bump pointer
.8571		d0 0f		bne $8582			bne 	_BLNoCarry
.8573		ee 6c 07	inc $076c			inc 	BackLoadPointer+1
.8576		10 0a		bpl $8582			bpl 	_BLNoCarry 					; need a new page
.8578		48		pha				pha
.8579		a9 60		lda #$60			lda 	#$60 						; reset pointer
.857b		8d 6c 07	sta $076c			sta 	BackLoadPointer+1
.857e		ee 6a 07	inc $076a			inc 	BackLoadPage 				; next page from source.
.8581		68		pla				pla
.8582						_BLNoCarry:
.8582		86 0b		stx $0b				stx 	8+3 						; restore mapping, then X.
.8584		fa		plx				plx
.8585		c9 00		cmp #$00			cmp 	#0
.8587		60		rts				rts
.076a						BackLoadPage:
>076a								.fill  	1
.076b						BackLoadPointer:
>076b								.fill 	2

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/editor.asm

.8588						EditProgramCode:
.8588		ad 2b 04	lda $042b			lda 	tokenLineNumber 			; try to find the line.
.858b		ae 2c 04	ldx $042c			ldx 	tokenLineNumber+1
.858e		20 d3 ac	jsr $acd3			jsr 	MemorySearch
.8591		90 05		bcc $8598			bcc 	_EPCNoDelete 				; reached the end : don't delete
.8593		d0 03		bne $8598			bne 	_EPCNoDelete 				; found slot but didn't match : no delete
.8595		20 f8 ab	jsr $abf8			jsr 	MemoryDeleteLine 			; delete the line
.8598						_EPCNoDelete:
.8598		ad 2d 04	lda $042d			lda 	tokenBuffer 				; buffer empty - we just want to delete a line.
.859b		c9 80		cmp #$80			cmp 	#KWC_EOL
.859d		f0 0d		beq $85ac			beq 	_EPCNoInsert
.859f		ad 2b 04	lda $042b			lda 	tokenLineNumber 			; find the line - it cannot exist as we've just deleted it.
.85a2		ae 2c 04	ldx $042c			ldx 	tokenLineNumber+1 			; so this can't fail, it returns some point in the code.
.85a5		20 d3 ac	jsr $acd3			jsr 	MemorySearch
.85a8		18		clc				clc 								; insert at this point.
.85a9		20 2f ac	jsr $ac2f			jsr 	MemoryInsertLine 			; insert the line
.85ac						_EPCNoInsert:
.85ac		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/warmstart.asm

.85ad						WarmStart:
.85ad		a2 ff		ldx #$ff			ldx 	#$FF
.85af		9a		txs				txs
.85b0		a9 89		lda #$89			lda 	#CLICommandLine+$80 		; set console colour whatever the current colour is.
.85b2		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.85b5		20 21 80	jsr $8021			jsr 	EXTInputLine 				; get line to lineBuffer
.85b8		20 5d 80	jsr $805d			jsr 	TKTokeniseLine 				; tokenise the line
.85bb		ad 2b 04	lda $042b			lda 	tokenLineNumber 			; line number <> 0
.85be		0d 2c 04	ora $042c			ora 	tokenLineNumber+1
.85c1		d0 17		bne $85da			bne 	_WSEditCode 				; if so,edit code.
.85c3		9c 2a 04	stz $042a			stz 	tokenOffset 				; zero the "offset", meaning it only runs one line.
.85c6		a9 2a		lda #$2a			lda 	#((tokenOffset) & $FF)
.85c8		85 30		sta $30				sta 	codePtr
.85ca		a9 04		lda #$04			lda 	#((tokenOffset) >> 8)
.85cc		85 31		sta $31				sta 	codePtr+1
.85ce		ad 2d 04	lda $042d			lda 	tokenBuffer 				; nothing to run
.85d1		c9 80		cmp #$80			cmp 	#KWC_EOL
.85d3		f0 d8		beq $85ad			beq 	WarmStart
.85d5		20 b2 90	jsr $90b2			jsr 	RUNCodePointerLine 			; execute that line.
.85d8		80 d3		bra $85ad			bra 	WarmStart
.85da						_WSEditCode:
.85da		20 88 85	jsr $8588			jsr 	EditProgramCode 			; edit the program code
.85dd		20 65 87	jsr $8765			jsr 	ClearCommand 				; clear all variables etc.
.85e0		80 cb		bra $85ad			bra 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assemble.asm

.85e2						AssembleCommand:
.85e2		a2 00		ldx #$00			ldx 	#0
.85e4		20 c8 a4	jsr $a4c8			jsr 	Evaluate16BitInteger 		; start address
.85e7		a5 58		lda $58				lda 	NSMantissa0
.85e9		8d 1e 04	sta $041e			sta 	AssemblerAddress
.85ec		a5 60		lda $60				lda 	NSMantissa1
.85ee		8d 1f 04	sta $041f			sta 	AssemblerAddress+1
.85f1		20 92 95	jsr $9592			jsr 	CheckComma
.85f4		20 e3 a4	jsr $a4e3			jsr 	Evaluate8BitInteger 		; options 0-3
.85f7		a5 58		lda $58				lda 	NSMantissa0
.85f9		8d 20 04	sta $0420			sta 	AssemblerControl
.85fc		60		rts				rts
.85fd		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assert.asm

.85fe						AssertCommand:
.85fe		a2 00		ldx #$00			ldx 	#0 							; bottom of stack
.8600		20 b5 a4	jsr $a4b5			jsr 	EvaluateInteger 			; the assert test
.8603		20 6a a5	jsr $a56a			jsr 	NSMIsZero 					; exit if result is non zero.
.8606		d0 05		bne $860d			bne 	_ACExit
.8608		a9 0a		lda #$0a		lda	#10
.860a		4c a3 95	jmp $95a3		jmp	ErrorHandler
.860d						_ACExit:
.860d		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/bload.asm

.860e						Command_BLoad:
.860e		a2 00		ldx #$00			ldx 	#0
.8610		20 a0 a4	jsr $a4a0			jsr 	EvaluateString 				; file name to load
.8613		20 92 95	jsr $9592			jsr 	CheckComma 					; consume comma
.8616		e8		inx				inx
.8617		20 b5 a4	jsr $a4b5			jsr 	EvaluateInteger 			; load address (full physical address)
.861a		5a		phy				phy
.861b		a5 58		lda $58				lda 	NSMantissa0					; file name -> XA
.861d		a6 60		ldx $60				ldx 	NSMantissa1
.861f		20 49 81	jsr $8149			jsr 	KNLOpenFileRead 			; open file for reading
.8622		b0 4e		bcs $8672			bcs 	CBLErrorHandler 			; error, so fail.
.8624		8d 71 07	sta $0771			sta 	BasicFileStream 			; save the reading stream.
.8627		a2 01		ldx #$01			ldx 	#1 							; address is in slot # 1
.8629		20 75 86	jsr $8675			jsr 	BLOpenPhysicalMemory 		; open for access.
.862c						_BLReadFile:
.862c		ad 71 07	lda $0771			lda 	BasicFileStream
.862f		a2 40		ldx #$40			ldx     #KNLReadBufferLen 			; set bytes to read.
.8631		20 9e 81	jsr $819e			jsr 	KNLReadBlock 				; read next block
.8634		b0 22		bcs $8658			bcs 	_BLFileError 				; file error, which might be EOF.
.8636		c9 00		cmp #$00			cmp 	#0 							; read nothing.
.8638		f0 f2		beq $862c			beq 	_BLReadFile
.863a		8d 6f 07	sta $076f			sta 	BLCopyCounter 				; counter.
.863d		ac 6e 07	ldy $076e			ldy 	BLYOffset 					; copy the buffer out here
.8640		a2 00		ldx #$00			ldx 	#0 							; offset in buffer.
.8642						_BLCopyLoop:
.8642		bd 62 06	lda $0662,x			lda 	KNLReadBuffer,x 			; copy byte and advance
.8645		91 3a		sta ($3a),y			sta 	(zTemp2),y
.8647		c8		iny				iny
.8648		d0 03		bne $864d			bne 	_BLNoAdjust 				; check changed 256 byte or 8k page.
.864a		20 9d 86	jsr $869d			jsr 	BLAdvancePhysicalMemory
.864d						_BLNoAdjust:
.864d		e8		inx				inx
.864e		ce 6f 07	dec $076f			dec 	BLCopyCounter
.8651		d0 ef		bne $8642			bne 	_BLCopyLoop
.8653		8c 6e 07	sty $076e			sty 	BLYOffset 					; update Y offset
.8656		80 d4		bra $862c			bra 	_BLReadFile 				; go ask for more.
.8658						_BLFileError:
.8658		c9 30		cmp #$30			cmp 	#KERR_EOF 					; End of file
.865a		d0 16		bne $8672			bne 	CBLErrorHandler				; no, it's an actual error
.865c		20 97 86	jsr $8697			jsr 	BLClosePhysicalMemory 		; close the access.
.865f		ad 71 07	lda $0771			lda 	BasicFileStream 			; close the file
.8662		20 13 82	jsr $8213			jsr 	KNLCloseFile
.8665		7a		ply				ply
.8666		60		rts				rts
.8667						CBLCloseError:
.8667		48		pha				pha
.8668		20 97 86	jsr $8697			jsr 	BLClosePhysicalMemory
.866b		ad 71 07	lda $0771			lda 	BasicFileStream
.866e		20 13 82	jsr $8213			jsr 	KNLCloseFile
.8671		68		pla				pla
.8672						CBLErrorHandler:
.8672		4c 24 8d	jmp $8d24			jmp 	CLErrorHandler
=3						BLAccessPage = 3 							; page to use for actual memory.
.8675						BLOpenPhysicalMemory:
.8675		a5 0b		lda $0b				lda 	BLAccessPage+8 				; save current mapping
.8677		8d 6d 07	sta $076d			sta 	BLNormalMapping
.867a		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy address, 13 bit adjusted for page -> (zTemp2),BLYOffset
.867c		8d 6e 07	sta $076e			sta 	BLYOffset 					; zTemp2 0 is *always* zero.
.867f		64 3a		stz $3a				stz 	zTemp2
.8681		b5 60		lda $60,x			lda 	NSMantissa1,x
.8683		29 1f		and #$1f			and 	#$1F
.8685		09 60		ora #$60			ora 	#BLAccessPage << 5
.8687		85 3b		sta $3b				sta 	zTemp2+1
.8689		b5 68		lda $68,x			lda 	NSMantissa2,x 				; shift M2:M1 right 3 times to give page # required
.868b		16 60		asl $60,x			asl 	NSMantissa1,x
.868d		2a		rol a				rol 	a
.868e		16 60		asl $60,x			asl 	NSMantissa1,x
.8690		2a		rol a				rol 	a
.8691		16 60		asl $60,x			asl 	NSMantissa1,x
.8693		2a		rol a				rol 	a
.8694		85 0b		sta $0b				sta 	BLAccessPage+8 				; access that page
.8696		60		rts				rts
.8697						BLClosePhysicalMemory:
.8697		ad 6d 07	lda $076d			lda 	BLNormalMapping
.869a		85 0b		sta $0b				sta 	BLAccessPage+8
.869c		60		rts				rts
.869d						BLAdvancePhysicalMemory:
.869d		48		pha				pha
.869e		e6 3b		inc $3b				inc		zTemp2+1 					; bump MSB
.86a0		a5 3b		lda $3b				lda 	zTemp2+1
.86a2		c9 80		cmp #$80			cmp 	#(BLAccessPage+1) << 5 		; reached next page ?
.86a4		d0 06		bne $86ac			bne 	_BLAPMExit 					; (e.g. end of the mapped page.)
.86a6		e6 0b		inc $0b				inc 	BLAccessPage+8 				; next physical page
.86a8		a9 60		lda #$60			lda 	#BLAccessPage << 5 			; page back to start of transfer page
.86aa		85 3b		sta $3b				sta 	zTemp2+1
.86ac						_BLAPMExit:
.86ac		68		pla				pla
.86ad		60		rts				rts
.076d						BLNormalMapping:
>076d								.fill 	1
.076e						BLYOffset:
>076e								.fill 	1
.076f						BLCopyCounter:
>076f								.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/bsave.asm

.86ae						Command_BSave:
.86ae		a2 00		ldx #$00			ldx 	#0
.86b0		20 a0 a4	jsr $a4a0			jsr 	EvaluateString 				; file name to load
.86b3		20 92 95	jsr $9592			jsr 	CheckComma 					; consume comma
.86b6		e8		inx				inx
.86b7		20 b5 a4	jsr $a4b5			jsr 	EvaluateInteger 			; load address (full physical address)
.86ba		20 92 95	jsr $9592			jsr 	CheckComma 					; consume comma
.86bd		e8		inx				inx
.86be		20 b5 a4	jsr $a4b5			jsr 	EvaluateInteger 			; data length (3 bytes only)
.86c1		5a		phy				phy
.86c2		a5 58		lda $58				lda 	NSMantissa0					; file name -> XA
.86c4		a6 60		ldx $60				ldx 	NSMantissa1
.86c6		20 44 81	jsr $8144			jsr 	KNLOpenFileWrite 			; open file for reading
.86c9		b0 62		bcs $872d			bcs 	CBSErrorHandler 			; error, so fail.
.86cb		8d 71 07	sta $0771			sta 	BasicFileStream 			; save the reading stream.
.86ce		a2 01		ldx #$01			ldx 	#1 							; address is in slot # 1
.86d0		20 75 86	jsr $8675			jsr 	BLOpenPhysicalMemory 		; open for access.
.86d3		a2 00		ldx #$00			ldx 	#0 							; number of bytes in kernel buffer
.86d5		ac 6e 07	ldy $076e			ldy 	BLYOffset 					; used for data offset.
.86d8						_BSWriteToFileLoop:
.86d8		38		sec				sec 								; pre decrement count.
.86d9		a5 5a		lda $5a				lda 	NSMantissa0+2
.86db		e9 01		sbc #$01			sbc 	#1
.86dd		85 5a		sta $5a				sta 	NSMantissa0+2
.86df		a5 62		lda $62				lda 	NSMantissa1+2
.86e1		e9 00		sbc #$00			sbc 	#0
.86e3		85 62		sta $62				sta 	NSMantissa1+2
.86e5		a5 6a		lda $6a				lda 	NSMantissa2+2
.86e7		e9 00		sbc #$00			sbc 	#0
.86e9		85 6a		sta $6a				sta 	NSMantissa2+2
.86eb		30 15		bmi $8702			bmi 	_BSFileComplete 			; undercounted, so exit.
.86ed		b1 3a		lda ($3a),y			lda 	(zTemp2),y 					; get byte to save
.86ef		9d 62 06	sta $0662,x			sta 	KNLReadBuffer,x 			; save in the buffer and bump buffer index
.86f2		e8		inx				inx
.86f3		c8		iny				iny 								; next byte
.86f4		d0 03		bne $86f9			bne 	_BSNoCheck
.86f6		20 9d 86	jsr $869d			jsr 	BLAdvancePhysicalMemory 	; check not gone to next page.
.86f9						_BSNoCheck:
.86f9		e0 40		cpx #$40			cpx 	#KNLReadBufferLen 			; done the whole buffer
.86fb		d0 db		bne $86d8			bne 	_BSWriteToFileLoop 			; no , do the next byte.
.86fd		20 10 87	jsr $8710			jsr 	BSFlushBuffer 				; yes, flush the buffer
.8700		80 d6		bra $86d8			bra 	_BSWriteToFileLoop 			; and keep on going
.8702						_BSFileComplete:
.8702		20 10 87	jsr $8710			jsr 	BSFlushBuffer 				; write the buffer remainder.
.8705		20 97 86	jsr $8697			jsr 	BLClosePhysicalMemory 		; close the access.
.8708		ad 71 07	lda $0771			lda 	BasicFileStream 			; close the file
.870b		20 13 82	jsr $8213			jsr 	KNLCloseFile
.870e		7a		ply				ply
.870f		60		rts				rts
.8710						BSFlushBuffer:
.8710		e0 00		cpx #$00			cpx 	#0 							; buffer empty ?
.8712		f0 0d		beq $8721			beq 	_BSFBExit 					; if so, exit.
.8714		a9 62		lda #$62			lda 	#KNLReadBuffer & $FF 		; where to write from.
.8716		85 36		sta $36				sta 	zTemp0
.8718		a9 06		lda #$06			lda 	#KNLReadBuffer >> 8
.871a		85 37		sta $37				sta 	zTemp0+1 					; # of bytes in X
.871c		20 7a 93	jsr $937a			jsr 	CLWriteByteBlock 			; write it.
.871f		a2 00		ldx #$00			ldx 	#0 							; buffer is empty.
.8721						_BSFBExit:
.8721		60		rts				rts
.8722						CBSSCloseError:
.8722		48		pha				pha
.8723		20 97 86	jsr $8697			jsr 	BLClosePhysicalMemory
.8726		ad 71 07	lda $0771			lda 	BasicFileStream
.8729		20 13 82	jsr $8213			jsr 	KNLCloseFile
.872c		68		pla				pla
.872d						CBSErrorHandler:
.872d		4c 24 8d	jmp $8d24			jmp 	CLErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/call.asm

.8730						CallCommand:
.8730		a2 00		ldx #$00			ldx 	#0 							; get the routine address to level 0
.8732		20 c8 a4	jsr $a4c8			jsr 	Evaluate16BitInteger
.8735						_CCClear
.8735		e8		inx				inx  								; clear 1,2 and 3 (for A X Y)
.8736		20 48 a5	jsr $a548			jsr 	NSMSetZero 					; these are optional sequentially.
.8739		e0 04		cpx #$04			cpx 	#4
.873b		d0 f8		bne $8735			bne 	_CCClear
.873d		a2 00		ldx #$00			ldx 	#0 							; and keep trying while there are more values.
.873f						_CCCParam:
.873f		b1 30		lda ($30),y			lda 	(codePtr),y
.8741		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8743		d0 09		bne $874e			bne 	_CCCRun6502
.8745		c8		iny				iny 								; skip comma
.8746		e8		inx				inx	 								; next level
.8747		20 e3 a4	jsr $a4e3			jsr 	Evaluate8BitInteger 		; get A/X/Y
.874a		e0 03		cpx #$03			cpx 	#3
.874c		90 f1		bcc $873f			bcc 	_CCCParam 					; done all 3 ?
.874e						_CCCRun6502:
.874e		5a		phy				phy 								; save position
.874f		a5 60		lda $60				lda 	NSMantissa1 				; put address in zTemp0
.8751		85 37		sta $37				sta 	zTemp0+1
.8753		a5 58		lda $58				lda 	NSMantissa0
.8755		85 36		sta $36				sta 	zTemp0
.8757		a5 59		lda $59				lda 	NSMantissa0+1 				; get registers into A X Y
.8759		a6 5a		ldx $5a				ldx 	NSMantissa0+2
.875b		a4 5b		ldy $5b				ldy 	NSMantissa0+3
.875d		20 62 87	jsr $8762			jsr 	_CCCZTemp0 					; call zTemp0
.8760		7a		ply				ply 								; restore position and exit
.8761		60		rts				rts
.8762						_CCCZTemp0:
.8762		6c 36 00	jmp ($0036)			jmp 	(zTemp0)

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/clear.asm

.8765						ClearCommand:
.8765		a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.8767		85 36		sta $36				sta 	0+zTemp0
.8769		a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.876b		85 37		sta $37				sta 	1+zTemp0
.876d						_ClearZeroLoop:
.876d		b2 36		lda ($36)			lda 	(zTemp0) 					; end of variables if offset is zero.
.876f		f0 24		beq $8795			beq 	_ClearZeroEnd
.8771		a0 03		ldy #$03			ldy 	#3 							; erase the variables
.8773		a9 00		lda #$00			lda 	#0 							; set all the data to zero.
.8775						_ClearOneVariable:
.8775		91 36		sta ($36),y			sta 	(zTemp0),y
.8777		c8		iny				iny
.8778		c0 08		cpy #$08			cpy 	#8
.877a		d0 f9		bne $8775			bne 	_ClearOneVariable
.877c		a0 02		ldy #$02			ldy 	#2 							; has it been marked procedure
.877e		b1 36		lda ($36),y			lda 	(zTemp0),y
.8780		c9 18		cmp #$18			cmp 	#NSTProcedure
.8782		d0 04		bne $8788			bne 	_ClearNotProcedure
.8784		a9 04		lda #$04			lda 	#NSTInteger+NSBIsArray 		; if so set it back to an integer array
.8786		91 36		sta ($36),y			sta 	(zTemp0),y 					; will be fixed on the pre-run scan.
.8788						_ClearNotProcedure:
.8788		18		clc				clc 								; go to the next variable
.8789		b2 36		lda ($36)			lda 	(zTemp0) 					; offset to next, add to zTemp0
.878b		65 36		adc $36				adc 	zTemp0
.878d		85 36		sta $36				sta 	zTemp0
.878f		90 dc		bcc $876d			bcc 	_ClearZeroLoop
.8791		e6 37		inc $37				inc 	zTemp0+1
.8793		80 d8		bra $876d			bra 	_ClearZeroLoop
.8795						_ClearZeroEnd:
.8795		18		clc				clc
.8796		a5 36		lda $36				lda 	zTemp0
.8798		69 01		adc #$01			adc 	#1
.879a		8d 0c 04	sta $040c			sta 	lowMemPtr
.879d		a5 37		lda $37				lda 	zTemp0+1
.879f		69 00		adc #$00			adc 	#0
.87a1		8d 0d 04	sta $040d			sta 	lowMemPtr+1
.87a4		20 8d b6	jsr $b68d			jsr 	StackReset
.87a7		20 f3 b6	jsr $b6f3			jsr 	StringSystemInitialise
.87aa		20 39 94	jsr $9439			jsr 	ProcedureScan
.87ad		20 61 90	jsr $9061			jsr 	Command_Restore
.87b0		9c 1e 04	stz $041e			stz 	AssemblerAddress
.87b3		9c 1f 04	stz $041f			stz 	AssemblerAddress+1
.87b6		9c 20 04	stz $0420			stz 	AssemblerControl
.87b9		9c 61 06	stz $0661			stz 	KeyboardQueueEntries
.87bc		20 dd a0	jsr $a0dd			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.87bf		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/cls.asm

.87c0						ClearScreen:
.87c0		5a		phy				phy
.87c1		a9 0c		lda #$0c			lda 	#12 						; char code 12 clears the screen.
.87c3		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.87c6		7a		ply				ply
.87c7		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/data.asm

.87c8						Command_Data:
.87c8		a9 3a		lda #$3a			lda 	#KWD_COLON 					; advance to colon/EOL, e.g. ignore anything till then.
.87ca		a2 80		ldx #$80			ldx 	#KWC_EOL
.87cc		20 8b 94	jsr $948b			jsr 	ScanForward
.87cf		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/dim.asm

.87d0						DimCommand:
.87d0		b1 30		lda ($30),y			lda 	(codePtr),y
.87d2		29 c0		and #$c0			and 	#$C0
.87d4		c9 40		cmp #$40			cmp 	#$40
.87d6		d0 7a		bne $8852			bne 	_DCSyntax 				; n o, error.
.87d8		b1 30		lda ($30),y			lda 	(codePtr),y
.87da		18		clc				clc
.87db		69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.87dd		85 3f		sta $3f				sta 	zaTemp+1
.87df		c8		iny				iny
.87e0		b1 30		lda ($30),y			lda 	(codePtr),y
.87e2		c8		iny				iny
.87e3		85 3e		sta $3e				sta 	zaTemp
.87e5		5a		phy				phy
.87e6		a0 02		ldy #$02			ldy 	#2 						; read type byte
.87e8		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.87ea		29 18		and #$18			and 	#NSBTypeMask 			; check it's not a procedure
.87ec		c9 18		cmp #$18			cmp 	#NSTProcedure
.87ee		f0 62		beq $8852			beq 	_DCSyntax
.87f0		b1 3e		lda ($3e),y			lda 	(zaTemp),y 				; check it's an array
.87f2		29 04		and #$04			and 	#NSBIsArray
.87f4		f0 64		beq $885a			beq 	_DCType
.87f6		a0 04		ldy #$04			ldy 	#4 						; check not already defined
.87f8		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.87fa		d0 59		bne $8855			bne 	_DCRedefine
.87fc		7a		ply				ply
.87fd		20 5d 88	jsr $885d			jsr 	_DCGetSize 				; get array size, check it.
.8800		5a		phy				phy
.8801		a0 05		ldy #$05			ldy 	#5 						; store in first array size slot
.8803		91 3e		sta ($3e),y			sta 	(zaTemp),y 				; second will be zero.
.8805		7a		ply				ply 							; is there a second (e.g. ,x)
.8806		b1 30		lda ($30),y			lda 	(codePtr),y
.8808		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.880a		d0 0a		bne $8816			bne 	_DCOneDimension
.880c		c8		iny				iny 							; skip comma
.880d		20 5d 88	jsr $885d			jsr 	_DCGetSize 				; get 2nd array size
.8810		5a		phy				phy
.8811		a0 06		ldy #$06			ldy 	#6 						; store in 2nd array size
.8813		91 3e		sta ($3e),y			sta 	(zaTemp),y
.8815		7a		ply				ply
.8816						_DCOneDimension:
.8816		5a		phy				phy 							; save position
.8817		a0 05		ldy #$05			ldy 	#5 						; dimensions + 1 in AX (as zero based)
.8819		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.881b		aa		tax				tax
.881c		c8		iny				iny
.881d		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.881f		e8		inx				inx 							; bump them.
.8820		1a		inc a				inc 	a
.8821		20 f3 a4	jsr $a4f3			jsr 	Multiply8x8 			; work out the total number of elements -> zTemp0
.8824		a5 37		lda $37				lda 	zTemp0+1 				; don't allow more than 8192 elements whatever
.8826		29 e0		and #$e0			and 	#$E0
.8828		d0 23		bne $884d			bne 	_DCSize
.882a		a0 02		ldy #$02			ldy 	#2 						; get base type
.882c		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.882e		20 6b 88	jsr $886b			jsr 	ScaleByBaseType 		; scale by base type
.8831		a5 36		lda $36				lda 	zTemp0
.8833		a6 37		ldx $37				ldx 	zTemp0+1
.8835		20 9f a0	jsr $a09f			jsr 	AllocateXABytes 		; allocate memory
.8838		a0 03		ldy #$03			ldy 	#3 						; copy into the address.
.883a		91 3e		sta ($3e),y			sta 	(zaTemp),y
.883c		c8		iny				iny
.883d		8a		txa				txa
.883e		91 3e		sta ($3e),y			sta 	(zaTemp),y
.8840		7a		ply				ply 							; get position back
.8841		20 8a 95	jsr $958a			jsr 	CheckRightBracket 		; check )
.8844		b1 30		lda ($30),y			lda 	(codePtr),y
.8846		c8		iny				iny 							; consume in case
.8847		c9 2c		cmp #$2c			cmp 	#KWD_COMMA		 		; if so do another DIM.
.8849		f0 85		beq $87d0			beq 	DimCommand
.884b		88		dey				dey 							; undo consume
.884c		60		rts				rts
.884d						_DCSize:
.884d		a9 16		lda #$16		lda	#22
.884f		4c a3 95	jmp $95a3		jmp	ErrorHandler
.8852						_DCSyntax:
.8852		4c c6 a6	jmp $a6c6			jmp 	SyntaxError
.8855						_DCRedefine:
.8855		a9 15		lda #$15		lda	#21
.8857		4c a3 95	jmp $95a3		jmp	ErrorHandler
.885a						_DCType:
.885a		4c d0 a6	jmp $a6d0			jmp 	TypeError
.885d						_DCGetSize:
.885d		a2 00		ldx #$00			ldx 	#0 						; get first index.
.885f		20 e3 a4	jsr $a4e3			jsr 	Evaluate8BitInteger 	; get array dimension
.8862		c9 00		cmp #$00			cmp 	#0 						; must be 1-254
.8864		f0 e7		beq $884d			beq 	_DCSize
.8866		c9 fe		cmp #$fe			cmp 	#254
.8868		f0 e3		beq $884d			beq 	_DCSize
.886a		60		rts				rts
.886b						ScaleByBaseType:
.886b		29 10		and #$10			and 	#NSBIsString 			; is it string
.886d		d0 19		bne $8888			bne 	_SBBTString
.886f		a5 37		lda $37				lda 	zTemp0+1 				; push value on stack
.8871		48		pha				pha
.8872		a5 36		lda $36				lda 	zTemp0
.8874		48		pha				pha
.8875		06 36		asl $36				asl 	zTemp0 					; x 2
.8877		26 37		rol $37				rol 	zTemp0+1
.8879		06 36		asl $36				asl 	zTemp0 					; x 4
.887b		26 37		rol $37				rol 	zTemp0+1
.887d		68		pla				pla 							; add stacked value = x 5
.887e		65 36		adc $36				adc 	zTemp0
.8880		85 36		sta $36				sta 	zTemp0
.8882		68		pla				pla
.8883		65 37		adc $37				adc 	zTemp0+1
.8885		85 37		sta $37				sta 	zTemp0+1
.8887		60		rts				rts
.8888						_SBBTString:
.8888		06 36		asl $36				asl 	zTemp0
.888a		26 37		rol $37				rol 	zTemp0+1
.888c		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/dir.asm

.888d						Command_Dir:
.888d		ad 62 07	lda $0762			lda     KNLDefaultDrive				; set drive to list.
.8890		85 f3		sta $f3				sta     kernel.args.directory.open.drive
.8892		64 fd		stz $fd				stz     kernel.args.directory.open.fname_len
.8894		20 74 ff	jsr $ff74			jsr     kernel.Directory.Open
.8897		b0 56		bcs $88ef			bcs     _CDExit
.8899						_CDEventLoop:
.8899		20 0c ff	jsr $ff0c			jsr     kernel.Yield        		; Polite, not actually needed.
.889c		20 00 ff	jsr $ff00			jsr     kernel.NextEvent
.889f		b0 f8		bcs $8899			bcs     _CDEventLoop
.88a1		ad 63 07	lda $0763			lda     KNLEvent.type
.88a4		c9 44		cmp #$44			cmp     #kernel.event.directory.CLOSED
.88a6		f0 47		beq $88ef			beq    	_CDExit
.88a8		20 ad 88	jsr $88ad			jsr     _CDMessages 				; handle various messages
.88ab		80 ec		bra $8899			bra     _CDEventLoop
.88ad						_CDMessages:
.88ad		c9 3a		cmp #$3a			cmp     #kernel.event.directory.OPENED
.88af		f0 15		beq $88c6			beq     _CDEVRead
.88b1		c9 3c		cmp #$3c			cmp     #kernel.event.directory.VOLUME
.88b3		f0 19		beq $88ce			beq     _CDEVVolume
.88b5		c9 3e		cmp #$3e			cmp     #kernel.event.directory.FILE
.88b7		f0 17		beq $88d0			beq     _CDEVFile
.88b9		c9 40		cmp #$40			cmp     #kernel.event.directory.FREE
.88bb		f0 28		beq $88e5			beq     _CDEVFree
.88bd		c9 42		cmp #$42			cmp     #kernel.event.directory.EOF
.88bf		f0 26		beq $88e7			beq     _CDEVEOF
.88c1		c9 46		cmp #$46			cmp     #kernel.event.directory.ERROR
.88c3		f0 22		beq $88e7			beq     _CDEVEOF
.88c5		60		rts				rts
.88c6						_CDEVRead:
.88c6		ad 66 07	lda $0766			lda     KNLEvent.directory.stream
.88c9		85 f3		sta $f3				sta     kernel.args.directory.read.stream
.88cb		4c 78 ff	jmp $ff78			jmp     kernel.Directory.Read
.88ce						_CDEVVolume:
.88ce		80 f6		bra $88c6			bra     _CDEVRead
.88d0						_CDEVFile:
.88d0		a9 20		lda #$20			lda 	#32
.88d2		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.88d5		ad 68 07	lda $0768			lda     KNLEvent.directory.file.len
.88d8		20 f2 88	jsr $88f2			jsr     _CDReadData
.88db		20 fc 95	jsr $95fc			jsr 	PrintStringXA
.88de		a9 0d		lda #$0d			lda 	#13
.88e0		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.88e3		80 e1		bra $88c6			bra     _CDEVRead
.88e5						_CDEVFree:
.88e5		80 00		bra $88e7			bra     _CDEVEOF
.88e7						_CDEVEOF:
.88e7		ad 66 07	lda $0766			lda     KNLEvent.directory.stream
.88ea		85 f3		sta $f3				sta     kernel.args.directory.close.stream
.88ec		4c 7c ff	jmp $ff7c			jmp     kernel.Directory.Close
.88ef						_CDExit:
.88ef		4c ad 85	jmp $85ad			jmp 	WarmStart
.88f2						_CDReadData:
.88f2		85 fd		sta $fd				sta     kernel.args.recv.buflen
.88f4		a9 2a		lda #$2a			lda     #lineBuffer & $FF
.88f6		85 fb		sta $fb				sta     kernel.args.recv.buf+0
.88f8		a9 05		lda #$05			lda     #lineBuffer >> 8
.88fa		85 fc		sta $fc				sta     kernel.args.recv.buf+1
.88fc		20 04 ff	jsr $ff04			jsr     kernel.ReadData
.88ff		a6 fd		ldx $fd				ldx     kernel.args.recv.buflen
.8901		9e 2a 05	stz $052a,x			stz     lineBuffer,x
.8904		a9 2a		lda #$2a			lda 	#lineBuffer & $FF
.8906		a2 05		ldx #$05			ldx 	#lineBuffer >> 8
.8908		60		rts				rts
.8909						print_ext

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/drive.asm

.8909						Command_Drive:
.8909		20 e3 a4	jsr $a4e3			jsr 	Evaluate8BitInteger
.890c		20 40 81	jsr $8140			jsr 	KNLSetDrive
.890f		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/end.asm

.8910						EndCommand:
.8910		4c ad 85	jmp $85ad			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/for.asm

.8913						ForCommand:
.8913		a9 d9		lda #$d9			lda 	#STK_FOR+9 					; allocate 18 bytes on the return stack (see above).
.8915		20 27 b6	jsr $b627			jsr 	StackOpen
.8918		a2 00		ldx #$00			ldx 	#0
.891a		20 f1 9e	jsr $9ef1			jsr 	EvaluateTerm
.891d		b5 50		lda $50,x			lda 	NSStatus,x
.891f		c9 20		cmp #$20			cmp 	#NSBIsReference+NSTInteger 	; do we have an integer 4 byte reference.
.8921		d0 47		bne $896a			bne		_FCError
.8923		a9 3d		lda #$3d			lda 	#KWD_EQUAL 					; =
.8925		20 9a 95	jsr $959a			jsr 	CheckNextA
.8928		e8		inx				inx
.8929		20 b5 a4	jsr $a4b5			jsr 	EvaluateInteger 			; <from> in +1
.892c		b1 30		lda ($30),y			lda 	(codePtr),y
.892e		c8		iny				iny 								; consume it
.892f		48		pha				pha 								; save on stack for later
.8930		c9 bd		cmp #$bd			cmp 	#KWD_DOWNTO
.8932		f0 04		beq $8938			beq 	_FCNoSyntax
.8934		c9 d7		cmp #$d7			cmp 	#KWD_TO
.8936		d0 35		bne $896d			bne 	_FCSyntaxError
.8938						_FCNoSyntax:
.8938		e8		inx				inx
.8939		20 b5 a4	jsr $a4b5			jsr 	EvaluateInteger
.893c		20 6c b6	jsr $b66c			jsr 	STKSaveCodePosition 		; save loop back position
.893f		68		pla				pla 								; restore DOWNTO or TO
.8940		5a		phy				phy 								; save Y on the stack
.8941		49 bd		eor #$bd			eor 	#KWD_DOWNTO 				; 0 if DOWNTO, #0 if TO
.8943		f0 02		beq $8947			beq 	_FCNotDownTo
.8945		a9 02		lda #$02			lda 	#2
.8947						_FCNotDownTo:
.8947		3a		dec a				dec 	a 							; 255 if DOWNTO, 1 if TO
.8948		a0 10		ldy #$10			ldy 	#16
.894a		91 34		sta ($34),y			sta 	(basicStack),y 				; copy that out to the Basic Stack.
.894c		a0 06		ldy #$06			ldy 	#6 							; this is the address of the loop variable.
.894e		a5 58		lda $58				lda 	NSMantissa0
.8950		91 34		sta ($34),y			sta 	(basicStack),y
.8952		a5 60		lda $60				lda 	NSMantissa1
.8954		c8		iny				iny
.8955		91 34		sta ($34),y			sta 	(basicStack),y
.8957		a0 08		ldy #$08			ldy 	#8 							; set initial index value
.8959		a2 01		ldx #$01			ldx 	#1
.895b		20 70 89	jsr $8970			jsr 	FCIntegerToStack
.895e		a0 0c		ldy #$0c			ldy 	#12 						; set the terminal value
.8960		a2 02		ldx #$02			ldx 	#2
.8962		20 70 89	jsr $8970			jsr 	FCIntegerToStack
.8965		20 8b 89	jsr $898b			jsr 	CopyIndexToReference
.8968		7a		ply				ply 								; restore position
.8969		60		rts				rts
.896a						_FCError:
.896a		4c d0 a6	jmp $a6d0			jmp 	TypeError
.896d						_FCSyntaxError:
.896d		4c c6 a6	jmp $a6c6			jmp 	SyntaxError
.8970						FCIntegerToStack:
.8970		34 50		bit $50,x			bit 	NSStatus,x 					; is the value negative
.8972		10 03		bpl $8977			bpl	 	_FCNotNegative
.8974		20 11 a5	jsr $a511			jsr 	NSMNegateMantissa 			; if so 2's complement the mantissa
.8977						_FCNotNegative:
.8977		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy out to the basic stack
.8979		91 34		sta ($34),y			sta 	(basicStack),y
.897b		c8		iny				iny
.897c		b5 60		lda $60,x			lda 	NSMantissa1,x
.897e		91 34		sta ($34),y			sta 	(basicStack),y
.8980		c8		iny				iny
.8981		b5 68		lda $68,x			lda 	NSMantissa2,x
.8983		91 34		sta ($34),y			sta 	(basicStack),y
.8985		c8		iny				iny
.8986		b5 70		lda $70,x			lda 	NSMantissa3,x
.8988		91 34		sta ($34),y			sta 	(basicStack),y
.898a		60		rts				rts
.898b						CopyIndexToReference:
.898b		5a		phy				phy
.898c		a0 06		ldy #$06			ldy 	#6 							; copy address-8 to write to zTemp0
.898e		38		sec				sec 								; (because we copy from offset 8)
.898f		b1 34		lda ($34),y			lda 	(basicStack),y
.8991		e9 08		sbc #$08			sbc 	#8
.8993		85 36		sta $36				sta 	zTemp0
.8995		c8		iny				iny
.8996		b1 34		lda ($34),y			lda 	(basicStack),y
.8998		e9 00		sbc #$00			sbc 	#0
.899a		85 37		sta $37				sta 	zTemp0+1
.899c		a2 04		ldx #$04			ldx 	#4 							; this is the copy counter/
.899e		a0 0b		ldy #$0b			ldy 	#8+3 		 				; the MSB of the mantissa
.89a0		b1 34		lda ($34),y			lda 	(basicStack),y
.89a2		0a		asl a				asl 	a 							; into carry
.89a3		a0 08		ldy #$08			ldy 	#8 							; where to copy from.
.89a5		90 14		bcc $89bb			bcc 	_CITRNormal
.89a7		38		sec				sec
.89a8						_CITRNegative:
.89a8		a9 00		lda #$00			lda 	#0
.89aa		f1 34		sbc ($34),y			sbc 	(basicStack),y
.89ac		91 36		sta ($36),y			sta 	(zTemp0),y
.89ae		c8		iny				iny
.89af		ca		dex				dex
.89b0		d0 f6		bne $89a8			bne 	_CITRNegative
.89b2		88		dey				dey 								; look at MSB of mantissa
.89b3		b1 36		lda ($36),y			lda 	(zTemp0),y 					; set the MSB as negative packed.
.89b5		09 80		ora #$80			ora 	#$80
.89b7		91 36		sta ($36),y			sta 	(zTemp0),y
.89b9		7a		ply				ply
.89ba		60		rts				rts
.89bb						_CITRNormal:
.89bb		b1 34		lda ($34),y			lda 	(basicStack),y 				; copy without negation.
.89bd		91 36		sta ($36),y			sta 	(zTemp0),y
.89bf		c8		iny				iny
.89c0		ca		dex				dex
.89c1		d0 f8		bne $89bb			bne 	_CITRNormal
.89c3		7a		ply				ply 								; and exit.
.89c4		60		rts				rts
.89c5						NextCommand:
.89c5		a9 d9		lda #$d9			lda 	#STK_FOR+9 					; check FOR is TOS
.89c7		a2 11		ldx #$11			ldx 	#ERRID_FOR 					; this error
.89c9		20 54 b6	jsr $b654			jsr 	StackCheckFrame
.89cc		5a		phy				phy
.89cd		a0 10		ldy #$10			ldy 	#16 						; get the step count
.89cf		b1 34		lda ($34),y			lda 	(basicStack),y
.89d1		85 36		sta $36				sta 	zTemp0 						; this is the sign extend
.89d3		30 02		bmi $89d7			bmi 	_NCStepNeg
.89d5		64 36		stz $36				stz 	zTemp0 						; which is 0 or 255
.89d7						_NCStepNeg:
.89d7		a0 08		ldy #$08			ldy 	#8 							; offset to bump
.89d9		a2 04		ldx #$04			ldx 	#4 							; count to bump
.89db		18		clc				clc
.89dc						_NCBump:
.89dc		71 34		adc ($34),y			adc 	(basicStack),y 				; add it
.89de		91 34		sta ($34),y			sta 	(basicStack),y
.89e0		a5 36		lda $36				lda 	zTemp0 						; get sign extend for next time.
.89e2		c8		iny				iny 								; next byte
.89e3		ca		dex				dex 								; do four times
.89e4		d0 f6		bne $89dc			bne 	_NCBump
.89e6		20 8b 89	jsr $898b			jsr		CopyIndexToReference		; copy it to the reference variable.
.89e9		a0 10		ldy #$10			ldy 	#16 						; get step count again
.89eb		b1 34		lda ($34),y			lda 	(basicStack),y
.89ed		0a		asl a				asl 	a 							; sign bit to carry
.89ee		a9 0c		lda #$0c			lda 	#12 						; offset of LHS = terminal offset
.89f0		85 38		sta $38				sta 	zTemp1
.89f2		90 02		bcc $89f6			bcc 	_NCCompRev 					; use if step is +ve
.89f4		a9 08		lda #$08			lda 	#8 							; now the LHS = index value
.89f6						_NCCompRev:
.89f6		85 38		sta $38				sta 	zTemp1 						; so zTemp0 is the index for LHS
.89f8		49 04		eor #$04			eor 	#(8^12) 					; and zTemp0+1 is the index for RHS
.89fa		85 39		sta $39				sta 	zTemp1+1
.89fc		a2 04		ldx #$04			ldx 	#4 							; bytes to compare
.89fe		38		sec				sec
.89ff						_NCCompare:
.89ff		a4 38		ldy $38				ldy 	zTemp1 						; do compare using the two indices
.8a01		b1 34		lda ($34),y			lda 	(basicStack),y
.8a03		a4 39		ldy $39				ldy 	zTemp1+1
.8a05		f1 34		sbc ($34),y			sbc 	(basicStack),y
.8a07		e6 38		inc $38				inc 	zTemp1 						; bump the indices (inc,dex do not change C or V)
.8a09		e6 39		inc $39				inc 	zTemp1+1
.8a0b		ca		dex				dex 								; do it 4 times.
.8a0c		d0 f1		bne $89ff			bne 	_NCCompare
.8a0e		50 02		bvc $8a12			bvc 	_NCNoOverflow 				; convert to signed comparison
.8a10		49 80		eor #$80			eor 	#$80
.8a12						_NCNoOverflow:
.8a12		7a		ply				ply 								; restore Y position
.8a13		0a		asl a				asl 	a 							; is bit 7 set.
.8a14		90 04		bcc $8a1a			bcc 	_NCLoopBack 				; if no , >= so loop back
.8a16		20 46 b6	jsr $b646			jsr 	StackClose 					; exit the loop
.8a19		60		rts				rts
.8a1a						_NCLoopBack:
.8a1a		20 7d b6	jsr $b67d			jsr 	STKLoadCodePosition 		; loop back
.8a1d		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/gosub.asm

.8a1e						Command_GOSUB:
.8a1e		a2 00		ldx #$00			ldx 	#0
.8a20		20 c8 a4	jsr $a4c8			jsr 	Evaluate16BitInteger 		; line number in Stack.0
.8a23		a9 e3		lda #$e3			lda 	#STK_GOSUB+3
.8a25		20 27 b6	jsr $b627			jsr 	StackOpen 					; create frame
.8a28		20 6c b6	jsr $b66c			jsr 	STKSaveCodePosition 		; save current position
.8a2b		4c 41 8a	jmp $8a41			jmp 	GotoStackX
.8a2e						Command_RETURN:
.8a2e		a9 e0		lda #$e0			lda 	#STK_GOSUB 					; check TOS is this
.8a30		a2 0e		ldx #$0e			ldx 	#ERRID_GOSUB 				; this error
.8a32		20 54 b6	jsr $b654			jsr 	StackCheckFrame
.8a35		20 7d b6	jsr $b67d			jsr 	STKLoadCodePosition 		; restore code position
.8a38		20 46 b6	jsr $b646			jsr 	StackClose
.8a3b		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/goto.asm

.8a3c						GotoCommand:
.8a3c		a2 00		ldx #$00			ldx 	#0 							; GOTO where
.8a3e		20 c8 a4	jsr $a4c8			jsr 	Evaluate16BitInteger
.8a41						GotoStackX:
.8a41		b5 60		lda $60,x			lda  	NSMantissa1,x 				; put line # in XA. I'll keep this even though
.8a43		48		pha				pha 								; it is slightly inefficient, just in cases.
.8a44		b5 58		lda $58,x			lda 	NSMantissa0,x
.8a46		fa		plx				plx
.8a47		20 d3 ac	jsr $acd3			jsr 	MemorySearch 				; transfer to line number AX.
.8a4a		90 05		bcc $8a51			bcc 	_GotoError 					; not found, off end.
.8a4c		d0 03		bne $8a51			bne 	_GotoError 					; not found exactly
.8a4e		4c ab 90	jmp $90ab			jmp 	RunNewLine 					; and go straight to new line code.
.8a51						_GotoError:
.8a51		a9 0d		lda #$0d		lda	#13
.8a53		4c a3 95	jmp $95a3		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/if.asm

.8a56						IfCommand:
.8a56		a2 00		ldx #$00			ldx 	#0 							; Get the if test.
.8a58		20 96 a4	jsr $a496			jsr 	EvaluateNumber
.8a5b		b1 30		lda ($30),y			lda 	(codePtr),y
.8a5d		c9 b2		cmp #$b2			cmp 	#KWD_THEN  					; could be THEN <stuff>
.8a5f		d0 0a		bne $8a6b			bne 	_IfStructured 				; we still support it.
.8a61		c8		iny				iny 								; consume THEN
.8a62		20 6a a5	jsr $a56a			jsr 	NSMIsZero 					; is it zero
.8a65		f0 01		beq $8a68			beq 	_IfFail 					; if fail, go to next line
.8a67		60		rts				rts 								; if THEN just continue
.8a68						_IfFail:
.8a68		4c 93 90	jmp $9093			jmp 	EOLCommand
.8a6b						_IfStructured:
.8a6b		20 6a a5	jsr $a56a			jsr 	NSMIsZero 					; is it zero
.8a6e		d0 07		bne $8a77			bne 	_IfExit 					; if not, then continue normally.
.8a70		a9 be		lda #$be			lda 	#KWD_ELSE 					; look for else/endif
.8a72		a2 af		ldx #$af			ldx 	#KWD_ENDIF
.8a74		20 8b 94	jsr $948b			jsr 	ScanForward 				; and run from there
.8a77						_IfExit:
.8a77		60		rts				rts
.8a78						ElseCode:
.8a78		a9 af		lda #$af			lda 	#KWD_ENDIF 					; else is only run after the if clause succeeds
.8a7a		aa		tax				tax 								; so just go to the structure exit
.8a7b		20 8b 94	jsr $948b			jsr 	ScanForward
.8a7e		60		rts				rts
.8a7f						EndIf:
.8a7f		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/inputprint.asm

.8a80						Command_Input:
.8a80		9c 28 04	stz $0428			stz 	isPrintFlag
.8a83		80 0c		bra $8a91			bra 	Command_IP_Main
.8a85						Command_CPrint:
.8a85		a9 7f		lda #$7f			lda 	#$7F 						; set input flag to character mode
.8a87		8d 28 04	sta $0428			sta 	isPrintFlag 				; clear input flag
.8a8a		80 05		bra $8a91			bra 	Command_IP_Main
.8a8c						Command_Print:
.8a8c		a9 ff		lda #$ff			lda 	#$FF 						; set input flag
.8a8e		8d 28 04	sta $0428			sta 	isPrintFlag 				; clear input flag
.8a91						Command_IP_Main:
.8a91		18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.8a92						_CPLoop:
.8a92		08		php				php 								; save last action flag
.8a93		b1 30		lda ($30),y			lda 	(codePtr),y
.8a95		c9 80		cmp #$80			cmp  	#KWC_EOL 					; end of line or colon, exit now.
.8a97		f0 54		beq $8aed			beq 	_CPExit
.8a99		c9 3a		cmp #$3a			cmp 	#KWD_COLON
.8a9b		f0 50		beq $8aed			beq 	_CPExit
.8a9d		68		pla				pla 								; throw last action flag
.8a9e		b1 30		lda ($30),y			lda 	(codePtr),y
.8aa0		c8		iny				iny
.8aa1		c9 3b		cmp #$3b			cmp 	#KWD_SEMICOLON				; is it a semicolon
.8aa3		f0 45		beq $8aea			beq 	_CPContinueWithSameLine
.8aa5		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; comma
.8aa7		f0 3c		beq $8ae5			beq 	_CPTab
.8aa9		c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; apostrophe (new line)
.8aab		f0 34		beq $8ae1			beq 	_CPNewLine
.8aad		88		dey				dey 								; undo the get.
.8aae		20 a5 9a	jsr $9aa5			jsr 	EvaluateExpressionAt0 		; evaluate expression at 0.
.8ab1		b5 50		lda $50,x			lda 	NSStatus,x 					; read the status
.8ab3		29 20		and #$20			and 	#NSBIsReference 			; is it a reference
.8ab5		f0 0d		beq $8ac4			beq 	_CPIsValue 					; no, display it.
.8ab7		ad 28 04	lda $0428			lda 	isPrintFlag 				; if print, dereference and print.
.8aba		d0 05		bne $8ac1			bne 	_CPIsPrint 					; otherwise display.
.8abc		20 f6 8a	jsr $8af6			jsr 	CIInputValue 				; input a value to the reference
.8abf		80 20		bra $8ae1			bra 	_CPNewLine
.8ac1						_CPIsPrint:
.8ac1		20 6a 9d	jsr $9d6a			jsr 	Dereference 				; dereference if required.
.8ac4						_CPIsValue:
.8ac4		b5 50		lda $50,x			lda 	NSStatus,x 					; is it a number
.8ac6		29 10		and #$10			and 	#NSBIsString
.8ac8		f0 09		beq $8ad3			beq 	_CPNumber
.8aca		a6 60		ldx $60				ldx 	NSMantissa1 				; string, print the text.
.8acc		a5 58		lda $58				lda 	NSMantissa0
.8ace		20 59 8b	jsr $8b59			jsr 	CPPrintStringXA
.8ad1		80 be		bra $8a91			bra 	Command_IP_Main 			; loop round clearing carry so NL if end
.8ad3						_CPNumber:
.8ad3		a9 05		lda #$05			lda 	#5 							; maximum decimals
.8ad5		20 7d a3	jsr $a37d			jsr 	ConvertNumberToString 		; convert to string (in unary str$() function)
.8ad8		a2 06		ldx #$06			ldx 	#decimalBuffer >> 8
.8ada		a9 49		lda #$49			lda 	#decimalBuffer & $FF
.8adc		20 59 8b	jsr $8b59			jsr 	CPPrintStringXA 			; print it.
.8adf		80 b0		bra $8a91			bra 	Command_IP_Main				; loop round clearing carry so NL if end
.8ae1						_CPNewLine:
.8ae1		a9 0d		lda #$0d			lda 	#13
.8ae3		80 02		bra $8ae7			bra 	_CPPrintCharDirect
.8ae5						_CPTab:
.8ae5		a9 09		lda #$09			lda 	#9 							; print TAB
.8ae7						_CPPrintCharDirect:
.8ae7		20 74 8b	jsr $8b74			jsr 	CPPVControl 				; print TAB/CR using the non PETSCII
.8aea						_CPContinueWithSameLine:
.8aea		38		sec				sec 								; loop round with carry set, which
.8aeb		80 a5		bra $8a92			bra 	_CPLoop 					; will inhibit final CR
.8aed						_CPExit:
.8aed		28		plp				plp 								; get last action flag
.8aee		b0 05		bcs $8af5			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.8af0		a9 0d		lda #$0d			lda 	#13 						; print new line
.8af2		20 74 8b	jsr $8b74			jsr 	CPPVControl
.8af5						_CPExit2:
.8af5		60		rts				rts
.8af6						CIInputValue:
.8af6		a2 00		ldx #$00			ldx 	#0 							; input a line.
.8af8						_CIInputLine:
.8af8		20 77 8b	jsr $8b77			jsr 	CPInputVector 				; get key
.8afb		c9 0d		cmp #$0d			cmp 	#13 						; 13 = End
.8afd		f0 1f		beq $8b1e			beq 	_CIHaveValue
.8aff		c9 08		cmp #$08			cmp 	#8 							; 8 = BS
.8b01		f0 11		beq $8b14			beq 	_CIBackspace
.8b03		c9 20		cmp #$20			cmp 	#32 						; ignore other control characters
.8b05		90 f1		bcc $8af8			bcc 	_CIInputLine
.8b07		e0 50		cpx #$50			cpx 	#80 						; max length
.8b09		b0 ed		bcs $8af8			bcs 	_CIInputLine
.8b0b		9d 2a 05	sta $052a,x			sta 	lineBuffer,x
.8b0e		e8		inx				inx
.8b0f		20 03 80	jsr $8003			jsr 	EXTPrintCharacter 			; echo it.
.8b12		80 e4		bra $8af8			bra 	_CIInputLine
.8b14						_CIBackspace:
.8b14		e0 00		cpx #$00			cpx 	#0 							; nothing to delete
.8b16		f0 e0		beq $8af8			beq 	_CIInputLine
.8b18		20 03 80	jsr $8003			jsr 	EXTPrintCharacter 			; echo it.
.8b1b		ca		dex				dex
.8b1c		80 da		bra $8af8			bra 	_CIInputLine
.8b1e						_CIHaveValue:
.8b1e		9e 2a 05	stz $052a,x			stz 	lineBuffer,x 				; ASCIIZ string now in line buffer.
.8b21		a5 50		lda $50				lda 	NSStatus 					; was it a string assignment
.8b23		29 10		and #$10			and 	#NSBIsString
.8b25		f0 17		beq $8b3e			beq 	_CIAssignNumber 			; assign a number
.8b27		a2 01		ldx #$01			ldx 	#1
.8b29		a9 2a		lda #$2a			lda 	#lineBuffer & $FF 			; set up to point to new string
.8b2b		95 58		sta $58,x			sta 	NSMantissa0,x
.8b2d		a9 05		lda #$05			lda 	#lineBuffer >> 8
.8b2f		95 60		sta $60,x			sta 	NSMantissa1,x
.8b31		74 68		stz $68,x			stz 	NSMantissa2,x
.8b33		74 70		stz $70,x			stz 	NSMantissa3,x
.8b35		a9 10		lda #$10			lda 	#NSBIsString 				; so it becomes a string value
.8b37		95 50		sta $50,x			sta  	NSStatus,x
.8b39		ca		dex				dex 								; X = 0
.8b3a		20 b3 8b	jsr $8bb3			jsr 	AssignVariable
.8b3d		60		rts				rts
.8b3e						_CIAssignNumber:
.8b3e		a9 2a		lda #$2a			lda 	#lineBuffer & $FF 			; set up to point to new string
.8b40		85 36		sta $36				sta 	zTemp0
.8b42		a9 05		lda #$05			lda 	#lineBuffer >> 8
.8b44		85 37		sta $37				sta 	zTemp0+1
.8b46		a2 01		ldx #$01			ldx 	#1 							; put in slot 1
.8b48		20 a5 a2	jsr $a2a5			jsr 	ValEvaluateZTemp0 			; use the VAL() code
.8b4b		90 07		bcc $8b54			bcc 	_CIIsOkay
.8b4d		a9 3f		lda #$3f			lda 	#"?" 						; error ?
.8b4f		20 6c 8b	jsr $8b6c			jsr 	CPPrintVector
.8b52		80 a2		bra $8af6			bra 	CIInputValue
.8b54						_CIIsOkay:
.8b54		ca		dex				dex 								; X = 0
.8b55		20 b3 8b	jsr $8bb3			jsr 	AssignVariable
.8b58		60		rts				rts
.8b59						CPPrintStringXA:
.8b59		5a		phy				phy
.8b5a		86 37		stx $37				stx 	zTemp0+1
.8b5c		85 36		sta $36				sta 	zTemp0
.8b5e		a0 00		ldy #$00			ldy 	#0
.8b60						_PSXALoop:
.8b60		b1 36		lda ($36),y			lda 	(zTemp0),y
.8b62		f0 06		beq $8b6a			beq 	_PSXAExit
.8b64		20 6c 8b	jsr $8b6c			jsr 	CPPrintVector
.8b67		c8		iny				iny
.8b68		80 f6		bra $8b60			bra 	_PSXALoop
.8b6a						_PSXAExit:
.8b6a		7a		ply				ply
.8b6b		60		rts				rts
.8b6c						CPPrintVector:
.8b6c		2c 28 04	bit $0428			bit 	isPrintFlag 				; check if char only mode and call appropriate handler.
.8b6f		30 03		bmi $8b74			bmi 	CPPVControl
.8b71		4c 0d 80	jmp $800d			jmp 	EXTPrintNoControl
.8b74						CPPVControl:
.8b74		4c 03 80	jmp $8003			jmp 	EXTPrintCharacter
.8b77						CPInputVector:
.8b77		4c 2b 80	jmp $802b			jmp 	EXTInputSingleCharacter

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/let.asm

.8b7a						LetCommand:
.8b7a		a2 00		ldx #$00			ldx 	#0
.8b7c		b1 30		lda ($30),y			lda 	(codePtr),y
.8b7e		c9 10		cmp #$10			cmp 	#KWD_AT
.8b80		d0 14		bne $8b96			bne 	_LCStandard
.8b82		c8		iny				iny 								; skip equal
.8b83		20 f1 9e	jsr $9ef1			jsr 	EvaluateTerm 				; get a number (the address of the reference)
.8b86		20 6a 9d	jsr $9d6a			jsr 	Dereference 				; dereference it to a value
.8b89		b5 50		lda $50,x			lda 	NSStatus,x 					; check integer
.8b8b		49 20		eor #$20			eor 	#NSBIsReference	 			; toggle reference
.8b8d		95 50		sta $50,x			sta 	NSStatus,x
.8b8f		29 20		and #$20			and 	#NSBIsReference 			; if it is now a reference, continue
.8b91		d0 0f		bne $8ba2			bne 	_LCMain
.8b93		4c d0 a6	jmp $a6d0			jmp 	TypeError 					; was a reference before.
.8b96						_LCStandard:
.8b96		ad 8f 9a	lda $9a8f			lda 	PrecedenceLevel+"*"			; precedence > this
.8b99		20 a9 9a	jsr $9aa9			jsr 	EvaluateExpressionAtPrecedence
.8b9c		b5 50		lda $50,x			lda 	NSStatus,x 					; is it a reference to an array marked as procedure ?
.8b9e		c9 38		cmp #$38			cmp		#NSTProcedure+NSBIsReference
.8ba0		f0 0e		beq $8bb0			beq 	_LetGoProc 					; it's a procedure call.
.8ba2						_LCMain:
.8ba2		a9 3d		lda #$3d			lda 	#"=" 						; check =
.8ba4		20 9a 95	jsr $959a			jsr 	CheckNextA
.8ba7		e8		inx				inx 								; RHS
.8ba8		20 8d a4	jsr $a48d			jsr 	EvaluateValue
.8bab		ca		dex				dex
.8bac		20 b3 8b	jsr $8bb3			jsr 	AssignVariable
.8baf		60		rts				rts
.8bb0						_LetGoProc:
.8bb0		4c 69 8f	jmp $8f69			jmp 	CallProcedure
.8bb3						AssignVariable:
.8bb3		b5 50		lda $50,x			lda 	NSStatus,x 					; check the string/number type bits match
.8bb5		48		pha				pha 								; save a copy
.8bb6		55 51		eor $51,x			eor 	NSStatus+1,x
.8bb8		29 10		and #$10			and 	#NSBIsString
.8bba		d0 0b		bne $8bc7			bne 	_ASError
.8bbc		68		pla				pla 								; get back
.8bbd		29 10		and #$10			and 	#NSBIsString 				; check type
.8bbf		d0 03		bne $8bc4			bne 	_ASString
.8bc1		4c a8 9c	jmp $9ca8			jmp 	AssignNumber
.8bc4						_ASString:
.8bc4		4c 06 9d	jmp $9d06			jmp 	AssignString
.8bc7						_ASError:
.8bc7		4c d0 a6	jmp $a6d0			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/list.asm

.8bca						Command_List:
.8bca		9c 26 04	stz $0426			stz 	listIndent 					; reset indent.
.8bcd		a9 3f		lda #$3f			lda 	#$3F 						; silence at list.
.8bcf		20 3f 80	jsr $803f			jsr 	SNDCommand
.8bd2		b1 30		lda ($30),y			lda 	(codePtr),y
.8bd4		29 c0		and #$c0			and 	#$C0 				 		; if so, we are list procedure() which is a seperate block
.8bd6		c9 40		cmp #$40			cmp 	#$40  						; of code.
.8bd8		f0 72		beq $8c4c			beq 	_CLListProcedure
.8bda		64 5c		stz $5c				stz		NSMantissa0+4				; set the lower (slot 4) to 0 and upper (slot 7) to $FFFF
.8bdc		64 64		stz $64				stz 	NSMantissa1+4 				; these are the default top and bottom.
.8bde		a9 ff		lda #$ff			lda 	#$FF
.8be0		85 5f		sta $5f				sta 	NSMantissa0+7
.8be2		85 67		sta $67				sta 	NSMantissa1+7
.8be4		b1 30		lda ($30),y			lda 	(codePtr),y
.8be6		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8be8		f0 1a		beq $8c04			beq 	_CLSecond
.8bea		20 c9 8c	jsr $8cc9			jsr 	CLIsDigit 					; if not digit, list all
.8bed		b0 20		bcs $8c0f			bcs 	_CLStart
.8bef		a2 04		ldx #$04			ldx 	#4 							; get 1st range into slot 4
.8bf1		20 c8 a4	jsr $a4c8			jsr 	Evaluate16BitInteger
.8bf4		b1 30		lda ($30),y			lda 	(codePtr),y
.8bf6		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8bf8		f0 0a		beq $8c04			beq 	_CLSecond 					; if so go get it
.8bfa		a5 5c		lda $5c				lda 	NSMantissa0+4 				; copy 4->7
.8bfc		85 5f		sta $5f				sta 	NSMantissa0+7
.8bfe		a5 64		lda $64				lda 	NSMantissa1+4
.8c00		85 67		sta $67				sta 	NSMantissa1+7
.8c02		80 0b		bra $8c0f			bra 	_CLStart
.8c04						_CLSecond:
.8c04		c8		iny				iny 								; consume comma
.8c05		20 c9 8c	jsr $8cc9			jsr 	CLIsDigit 					; digit found
.8c08		b0 05		bcs $8c0f			bcs 	_CLStart 					; if not, continue listing
.8c0a		a2 07		ldx #$07			ldx 	#7 							; load 2nd range into slot 7
.8c0c		20 c8 a4	jsr $a4c8			jsr 	Evaluate16BitInteger
.8c0f						_CLStart
.8c0f		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8c11		85 30		sta $30				sta 	codePtr
.8c13		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8c15		85 31		sta $31				sta 	codePtr+1
.8c17						_CLLoop:
.8c17		a5 f2		lda $f2				lda 	kernel.args.events.pending 	; load pending event count into accumulator
.8c19		f0 03		beq $8c1e			beq 	_NoEvents					; if zero, skip with Z flag set.
.8c1b		20 f1 80	jsr $80f1			jsr 	ProcessEvents
.8c1e						_NoEvents:
.8c1e		d0 27		bne $8c47			bne 	_CLBreak
.8c20		b2 30		lda ($30)			lda 	(codePtr)
.8c22		f0 20		beq $8c44			beq 	_CLExit
.8c24		a2 04		ldx #$04			ldx 	#4 							; check range every time, line numbers aren't in order.
.8c26		20 b8 8c	jsr $8cb8			jsr 	CLCompareLineNo
.8c29		90 0c		bcc $8c37			bcc 	_CLNext
.8c2b		a2 07		ldx #$07			ldx 	#7
.8c2d		20 b8 8c	jsr $8cb8			jsr 	CLCompareLineNo
.8c30		f0 02		beq $8c34			beq 	_CLDoThisOne
.8c32		b0 03		bcs $8c37			bcs 	_CLNext
.8c34						_CLDoThisOne:
.8c34		20 a5 8c	jsr $8ca5			jsr 	CLListOneLine 				; routine to list the current line.
.8c37						_CLNext:
.8c37		18		clc				clc
.8c38		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8c3a		65 30		adc $30				adc 	codePtr
.8c3c		85 30		sta $30				sta 	codePtr
.8c3e		90 02		bcc $8c42			bcc 	_CREExit
.8c40		e6 31		inc $31				inc 	codePtr+1 					; carry
.8c42						_CREExit:
.8c42		80 d3		bra $8c17			bra 	_CLLoop
.8c44						_CLExit:
.8c44		4c ad 85	jmp $85ad			jmp 	WarmStart
.8c47						_CLBreak:
.8c47		a9 01		lda #$01		lda	#1
.8c49		4c a3 95	jmp $95a3		jmp	ErrorHandler
.8c4c						_CLListProcedure:
.8c4c		b1 30		lda ($30),y			lda 	(codePtr),y
.8c4e		85 38		sta $38				sta 	zTemp1
.8c50		c8		iny				iny
.8c51		b1 30		lda ($30),y			lda 	(codePtr),y
.8c53		85 39		sta $39				sta 	zTemp1+1
.8c55		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8c57		85 30		sta $30				sta 	codePtr
.8c59		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8c5b		85 31		sta $31				sta 	codePtr+1
.8c5d						_CLLPSearch:
.8c5d		b2 30		lda ($30)			lda 	(codePtr)
.8c5f		c9 00		cmp #$00			cmp 	#0 							; if zero, end
.8c61		f0 e1		beq $8c44			beq 	_CLExit
.8c63		a0 03		ldy #$03			ldy 	#3 							; check if PROC something
.8c65		b1 30		lda ($30),y			lda 	(codePtr),y
.8c67		c9 ac		cmp #$ac			cmp 	#KWD_PROC
.8c69		d0 0e		bne $8c79			bne 	_CLLPNext
.8c6b		c8		iny				iny 								; check if PROC this.
.8c6c		b1 30		lda ($30),y			lda 	(codePtr),y
.8c6e		c5 38		cmp $38				cmp 	zTemp1 						; does it match ?
.8c70		d0 07		bne $8c79			bne 	_CLLPNext
.8c72		c8		iny				iny
.8c73		b1 30		lda ($30),y			lda 	(codePtr),y
.8c75		c5 39		cmp $39				cmp 	zTemp1+1
.8c77		f0 0d		beq $8c86			beq 	_CLLPFound
.8c79						_CLLPNext:
.8c79		18		clc				clc
.8c7a		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8c7c		65 30		adc $30				adc 	codePtr
.8c7e		85 30		sta $30				sta 	codePtr
.8c80		90 02		bcc $8c84			bcc 	_CREExit
.8c82		e6 31		inc $31				inc 	codePtr+1 					; carry
.8c84						_CREExit:
.8c84		80 d7		bra $8c5d			bra 	_CLLPSearch
.8c86						_CLLPFound:
.8c86		b2 30		lda ($30)			lda 	(codePtr)
.8c88		f0 ba		beq $8c44			beq 	_CLExit
.8c8a		a0 03		ldy #$03			ldy 	#3 							; get first keyword
.8c8c		b1 30		lda ($30),y			lda 	(codePtr),y
.8c8e		48		pha				pha
.8c8f		20 a5 8c	jsr $8ca5			jsr 	CLListOneLine 				; list line and go forward
.8c92		18		clc				clc
.8c93		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8c95		65 30		adc $30				adc 	codePtr
.8c97		85 30		sta $30				sta 	codePtr
.8c99		90 02		bcc $8c9d			bcc 	_CREExit
.8c9b		e6 31		inc $31				inc 	codePtr+1 					; carry
.8c9d						_CREExit:
.8c9d		68		pla				pla 								; reached ENDPROC ?
.8c9e		c9 b0		cmp #$b0			cmp 	#KWD_ENDPROC
.8ca0		d0 e4		bne $8c86			bne 	_CLLPFound
.8ca2		4c ad 85	jmp $85ad			jmp 	WarmStart
.8ca5						CLListOneLine:
.8ca5		20 ee 94	jsr $94ee			jsr 	ScanGetCurrentLineStep 		; get indent adjust.
.8ca8		20 53 80	jsr $8053			jsr 	TKListConvertLine 			; convert line into token Buffer
.8cab		a2 04		ldx #$04			ldx 	#(tokenBuffer >> 8) 		; print that line
.8cad		a9 2d		lda #$2d			lda 	#(tokenBuffer & $FF)
.8caf		20 fc 95	jsr $95fc			jsr 	PrintStringXA
.8cb2		a9 0d		lda #$0d			lda 	#13 						; new line
.8cb4		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.8cb7		60		rts				rts
.8cb8						CLCompareLineNo:
.8cb8		38		sec				sec
.8cb9		a0 01		ldy #$01			ldy 	#1
.8cbb		b1 30		lda ($30),y			lda 	(codePtr),y
.8cbd		f5 58		sbc $58,x			sbc 	NSMantissa0,x
.8cbf		85 36		sta $36				sta 	zTemp0
.8cc1		c8		iny				iny
.8cc2		b1 30		lda ($30),y			lda 	(codePtr),y
.8cc4		f5 60		sbc $60,x			sbc 	NSMantissa1,x
.8cc6		05 36		ora $36				ora 	zTemp0
.8cc8		60		rts				rts
.8cc9						CLIsDigit:
.8cc9		b1 30		lda ($30),y			lda 	(codePtr),y
.8ccb		c9 30		cmp #$30			cmp 	#"0"
.8ccd		90 03		bcc $8cd2			bcc	 	_CLIDExitFalse
.8ccf		c9 3a		cmp #$3a			cmp 	#"9"+1
.8cd1		60		rts				rts
.8cd2						_CLIDExitFalse:
.8cd2		38		sec				sec
.8cd3		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/load.asm

.8cd4						Command_Load:
.8cd4		20 a0 a4	jsr $a4a0			jsr 	EvaluateString 				; file name to load
.8cd7		a6 37		ldx $37				ldx 	zTemp0+1					; zTemp0 -> XA
.8cd9		a5 36		lda $36				lda 	zTemp0
.8cdb		20 49 81	jsr $8149			jsr 	KNLOpenFileRead 			; open file for reading
.8cde		b0 44		bcs $8d24			bcs 	CLErrorHandler 				; error, so fail.
.8ce0		8d 71 07	sta $0771			sta 	BasicFileStream 			; save the reading stream.
.8ce3		20 74 8d	jsr $8d74			jsr     LoadReadByteInit            ; Init reader with the stream
.8ce6		20 22 8f	jsr $8f22			jsr 	NewProgram 					; does the actual NEW.
.8ce9		9c 70 07	stz $0770			stz 	LoadEOFFlag 				; clear EOF Flag.
.8cec						_CLLoop:
.8cec		20 32 8d	jsr $8d32			jsr 	LoadReadLine 				; get next line.
.8cef		f0 10		beq $8d01			beq 	_CLExit 					; end, exit.
.8cf1		20 5d 80	jsr $805d			jsr 	TKTokeniseLine 				; tokenise the line.
.8cf4		ad 2b 04	lda $042b			lda 	tokenLineNumber 			; line number = 0
.8cf7		0d 2c 04	ora $042c			ora 	tokenLineNumber+1
.8cfa		f0 f0		beq $8cec			beq 	_CLLoop 					; not legal code, blank line or maybe a comment.
.8cfc		20 88 85	jsr $8588			jsr 	EditProgramCode 			; do the editing etc.
.8cff		80 eb		bra $8cec			bra 	_CLLoop
.8d01						_CLExit:
.8d01		ad 71 07	lda $0771			lda 	BasicFileStream
.8d04		20 13 82	jsr $8213			jsr 	KNLCloseFile
.8d07						CLComplete:
.8d07		a9 11		lda #$11			lda 	#_CLCMsg & $FF
.8d09		a2 8d		ldx #$8d			ldx 	#_CLCMsg >> 8
.8d0b		20 fc 95	jsr $95fc			jsr 	PrintStringXA
.8d0e		4c ad 85	jmp $85ad			jmp 	WarmStart
.8d11						_CLCMsg:
>8d11		43 6f 6d 70 6c 65 74 65				.text 	"Complete.",13,0
>8d19		2e 0d 00
.8d1c						CLCloseError:
.8d1c		48		pha				pha
.8d1d		ad 71 07	lda $0771			lda 	BasicFileStream
.8d20		20 13 82	jsr $8213			jsr 	KNLCloseFile
.8d23		68		pla				pla
.8d24						CLErrorHandler:
.8d24		c9 28		cmp #$28			cmp 	#KERR_NOTFOUND
.8d26		f0 05		beq $8d2d			beq 	_CLEHNotFound
.8d28		a9 1a		lda #$1a		lda	#26
.8d2a		4c a3 95	jmp $95a3		jmp	ErrorHandler
.8d2d						_CLEHNotFound:
.8d2d		a9 19		lda #$19		lda	#25
.8d2f		4c a3 95	jmp $95a3		jmp	ErrorHandler
.8d32						LoadReadLine:
.8d32		a2 00		ldx #$00			ldx 	#0 							; look for first character non space/ctl
.8d34		20 4e 8d	jsr $8d4e			jsr 	LoadReadCharacter
.8d37		f0 14		beq $8d4d			beq 	_LRLExit 					; eof ?
.8d39		c9 21		cmp #$21			cmp 	#' '+1 						; space control tab skip
.8d3b		90 f5		bcc $8d32			bcc 	LoadReadLine
.8d3d						_LRLLoop:
.8d3d		9d 2a 05	sta $052a,x			sta 	lineBuffer,x 				; write into line buffer
.8d40		9e 2b 05	stz $052b,x			stz 	lineBuffer+1,x 				; make ASCIIZ
.8d43		e8		inx				inx
.8d44		20 4e 8d	jsr $8d4e			jsr 	LoadReadCharacter 			; next line
.8d47		c9 20		cmp #$20			cmp 	#32 						; until < space ctrl/eof.
.8d49		b0 f2		bcs $8d3d			bcs 	_LRLLoop
.8d4b		a9 01		lda #$01			lda 	#1 							; return code 1, okay.
.8d4d						_LRLExit:
.8d4d		60		rts				rts
.8d4e						LoadReadCharacter:
.8d4e		da		phx				phx
.8d4f		5a		phy				phy
.8d50		ad 70 07	lda $0770			lda 	LoadEOFFlag 				; already done EOF.
.8d53		d0 0c		bne $8d61			bne 	_LRCIsEOF
.8d55		20 7e 8d	jsr $8d7e			jsr 	LoadReadByte 				; read a byte
.8d58		90 09		bcc $8d63			bcc		_LRCExit 					; read okay.
.8d5a		c9 30		cmp #$30			cmp 	#KERR_EOF 					; if error not EOF it's an actual error.
.8d5c		d0 be		bne $8d1c			bne 	CLCloseError
.8d5e		ce 70 07	dec $0770			dec 	LoadEOFFlag
.8d61						_LRCIsEOF:
.8d61		a9 00		lda #$00			lda 	#0
.8d63						_LRCExit:
.8d63		c9 09		cmp #$09			cmp 	#9 							; convert tab to space
.8d65		d0 02		bne $8d69			bne 	_LRCNotTab
.8d67		a9 20		lda #$20			lda 	#' '
.8d69						_LRCNotTab:
.8d69		c9 0a		cmp #$0a			cmp 	#$0A
.8d6b		d0 02		bne $8d6f			bne 	_LRCNotLF
.8d6d		a9 0d		lda #$0d			lda 	#$0D
.8d6f						_LRCNotLF:
.8d6f		7a		ply				ply
.8d70		fa		plx				plx
.8d71		c9 00		cmp #$00			cmp 	#0 							; set Z flag if EOF.
.8d73		60		rts				rts
.8d74						LoadReadByteInit:
.8d74		8d 72 07	sta $0772			sta     LoadFileStream 				; save stream
.8d77		9c 73 07	stz $0773			stz     LoadNextCharacter 			; reset buffer
.8d7a		9c 74 07	stz $0774			stz     LoadEndCharacter
.8d7d		60		rts				rts
.8d7e						LoadReadByte:
.8d7e		da		phx				phx
.8d7f		ae 73 07	ldx $0773			ldx     LoadNextCharacter 					; all data consumed ?
.8d82		ec 74 07	cpx $0774			cpx     LoadEndCharacter
.8d85		d0 12		bne $8d99			bne     _KNLRBGetNextByte
.8d87		ad 72 07	lda $0772			lda     LoadFileStream
.8d8a		a2 40		ldx #$40			ldx     #KNLReadBufferLen 			; set bytes to read.
.8d8c		20 9e 81	jsr $819e			jsr     KNLReadBlock 				; read next chunk from the stream
.8d8f		b0 0f		bcs $8da0			bcs     _KNLRBError 				; error has occurred on read.
.8d91		8d 74 07	sta $0774			sta     LoadEndCharacter 						; # read is the number available
.8d94		a2 00		ldx #$00			ldx     #0 							; reset the read pointer.
.8d96		8e 73 07	stx $0773			stx     LoadNextCharacter
.8d99						_KNLRBGetNextByte:
.8d99		bd 62 06	lda $0662,x			lda     KNLReadBuffer,x 			; get the next data item
.8d9c		ee 73 07	inc $0773			inc     LoadNextCharacter 					; and advance the index
.8d9f		18		clc				clc 								; succeeded
.8da0						_KNLRBError:
.8da0		fa		plx				plx
.8da1		60		rts				rts
.0770						LoadEOFFlag:
>0770								.fill 	1
.0771						BasicFileStream:
>0771								.fill 	1
.0772						LoadFileStream:
>0772								.byte   ?
.0773						LoadNextCharacter:
>0773								.byte   ?
.0774						LoadEndCharacter:
>0774								.byte   ?

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/local.asm

.8da2						Command_LOCAL:
.8da2		a2 00		ldx #$00			ldx 	#0 							; at level 0
.8da4		20 b0 8d	jsr $8db0			jsr 	LocaliseNextTerm 			; convert term to a local.
.8da7		b1 30		lda ($30),y			lda 	(codePtr),y
.8da9		c8		iny				iny
.8daa		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8dac		f0 f4		beq $8da2			beq 	Command_LOCAL 				; if so, localise another variable.
.8dae		88		dey				dey 								; unpick pre-get
.8daf		60		rts				rts
.8db0						LocaliseNextTerm:
.8db0		20 f1 9e	jsr $9ef1			jsr 	EvaluateTerm 				; evaluate the term
.8db3		b5 50		lda $50,x			lda 	NSStatus,x
.8db5		29 20		and #$20			and 	#NSBIsReference 			; check it is a reference, must be a variable.
.8db7		f0 5c		beq $8e15			beq		_LNTError
.8db9		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy address of variable to zTemp0
.8dbb		85 36		sta $36				sta 	zTemp0
.8dbd		b5 60		lda $60,x			lda 	NSMantissa1,x
.8dbf		85 37		sta $37				sta  	zTemp0+1
.8dc1		b5 50		lda $50,x			lda 	NSStatus,x 					; figure out what it is.
.8dc3		29 10		and #$10			and 	#NSBIsString
.8dc5		d0 1e		bne $8de5			bne 	_LNTPushString
.8dc7		5a		phy				phy
.8dc8		a0 00		ldy #$00			ldy 	#0 							; push 0 to 4 inclusive, the number values, on the stack, and zero them as you go.
.8dca						_LNTPushNumLoop:
.8dca		b1 36		lda ($36),y			lda		(zTemp0),y
.8dcc		20 06 b6	jsr $b606			jsr 	StackPushByte
.8dcf		c8		iny				iny
.8dd0		c0 05		cpy #$05			cpy 	#5
.8dd2		d0 f6		bne $8dca			bne 	_LNTPushNumLoop
.8dd4		a5 36		lda $36				lda 	zTemp0 						; push the actual target address to write on the stack
.8dd6		20 06 b6	jsr $b606			jsr 	StackPushByte
.8dd9		a5 37		lda $37				lda 	zTemp0+1
.8ddb		20 06 b6	jsr $b606			jsr 	StackPushByte
.8dde		a9 01		lda #$01			lda 	#STK_LOCALN 				; push local-number marker.
.8de0		20 06 b6	jsr $b606			jsr 	StackPushByte
.8de3		7a		ply				ply
.8de4		60		rts				rts
.8de5						_LNTPushString:
.8de5		5a		phy				phy
.8de6		b2 36		lda ($36)			lda 	(zTemp0) 					; put address of string in zTemp1
.8de8		85 38		sta $38				sta 	zTemp1
.8dea		a0 01		ldy #$01			ldy 	#1
.8dec		b1 36		lda ($36),y			lda 	(zTemp0),y
.8dee		85 39		sta $39				sta 	zTemp1+1
.8df0		a0 00		ldy #$00			ldy 	#0 							; output string
.8df2		c9 00		cmp #$00			cmp 	#0 							; if not assigned string
.8df4		f0 0a		beq $8e00			beq 	_LNTStringOut
.8df6						_LNTPushStrLoop:
.8df6		b1 38		lda ($38),y			lda 	(zTemp1),y
.8df8		f0 06		beq $8e00			beq 	_LNTStringOut
.8dfa		20 06 b6	jsr $b606			jsr 	StackPushByte
.8dfd		c8		iny				iny
.8dfe		80 f6		bra $8df6			bra 	_LNTPushStrLoop
.8e00						_LNTStringOut:
.8e00		98		tya				tya									; output length (chars written).
.8e01		20 06 b6	jsr $b606			jsr 	StackPushByte
.8e04		b5 58		lda $58,x			lda 	NSMantissa0,x 				; output address of the string record *not* the string itself
.8e06		20 06 b6	jsr $b606			jsr 	StackPushByte
.8e09		b5 60		lda $60,x			lda 	NSMantissa1,x
.8e0b		20 06 b6	jsr $b606			jsr 	StackPushByte
.8e0e		a9 02		lda #$02			lda 	#STK_LOCALS 				; push local-string marker.
.8e10		20 06 b6	jsr $b606			jsr 	StackPushByte
.8e13		7a		ply				ply
.8e14		60		rts				rts
.8e15						_LNTError:
.8e15		4c c6 a6	jmp $a6c6			jmp 	SyntaxError
.8e18						LocalPopValue:
.8e18		20 1e b6	jsr $b61e			jsr 	StackPopByte
.8e1b		c9 01		cmp #$01			cmp 	#STK_LOCALN 				; if not local-N
.8e1d		d0 17		bne $8e36			bne 	_LPVString
.8e1f		20 1e b6	jsr $b61e			jsr 	StackPopByte 				; address
.8e22		85 37		sta $37				sta 	zTemp0+1
.8e24		20 1e b6	jsr $b61e			jsr 	StackPopByte
.8e27		85 36		sta $36				sta 	zTemp0
.8e29		5a		phy				phy
.8e2a		a0 04		ldy #$04			ldy 	#4 							; copy back
.8e2c						_LPVNumberCopy:
.8e2c		20 1e b6	jsr $b61e			jsr 	StackPopByte
.8e2f		91 36		sta ($36),y			sta 	(zTemp0),y
.8e31		88		dey				dey
.8e32		10 f8		bpl $8e2c			bpl 	_LPVNumberCopy
.8e34		7a		ply				ply 								; and complete
.8e35		60		rts				rts
.8e36						_LPVString:
.8e36		20 1e b6	jsr $b61e			jsr 	StackPopByte 				; address of record copied to zTemp0
.8e39		85 37		sta $37				sta 	zTemp0+1
.8e3b		20 1e b6	jsr $b61e			jsr 	StackPopByte
.8e3e		85 36		sta $36				sta 	zTemp0
.8e40		5a		phy				phy
.8e41		b2 36		lda ($36)			lda 	(zTemp0) 					; address to write string to copied to zTemp1
.8e43		85 38		sta $38				sta 	zTemp1
.8e45		a0 01		ldy #$01			ldy 	#1
.8e47		b1 36		lda ($36),y			lda 	(zTemp0),y
.8e49		85 39		sta $39				sta 	zTemp1+1
.8e4b		20 1e b6	jsr $b61e			jsr 	StackPopByte 				; # chars to get => y
.8e4e		a8		tay				tay
.8e4f		a5 39		lda $39				lda 	zTemp1+1 					; if no target (e.g. was "" originally) exit
.8e51		f0 0e		beq $8e61			beq 	_LPVStringCopied
.8e53		a9 00		lda #$00			lda 	#0 							; NULL on end
.8e55		91 38		sta ($38),y			sta 	(zTemp1),y
.8e57						_LPVStringCopy:
.8e57		88		dey				dey
.8e58		30 07		bmi $8e61			bmi 	_LPVStringCopied
.8e5a		20 1e b6	jsr $b61e			jsr 	StackPopByte
.8e5d		91 38		sta ($38),y			sta 	(zTemp1),y
.8e5f		80 f6		bra $8e57			bra 	_LPVStringCopy
.8e61						_LPVStringCopied:
.8e61		fa		plx				plx
.8e62		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/memcopy.asm

.8e63						MCCommand:
>8e63		db						.byte 	$DB 						; causes a break in the emulator
.8e64		a5 01		lda $01				lda 	1 							; save current I/O ; switch to I/O 0
.8e66		48		pha				pha
.8e67		64 01		stz $01				stz 	1
.8e69		9c 00 df	stz $df00			stz 	$DF00 						; zero control byte.
.8e6c		a9 81		lda #$81			lda 	#$81 						; standard start byte (DMA Enabled, Start set)
.8e6e		8d 75 07	sta $0775			sta 	DMAControlByte
.8e71		a2 00		ldx #$00			ldx 	#0 							; get start address.
.8e73		20 b5 a4	jsr $a4b5			jsr 	EvaluateInteger
.8e76		a2 04		ldx #$04			ldx 	#4 							; write to source AND $DF04 destination address $DF08
.8e78		20 ed 8e	jsr $8eed			jsr 	MCCopyAddress
.8e7b		a2 08		ldx #$08			ldx 	#8
.8e7d		20 ed 8e	jsr $8eed			jsr 	MCCopyAddress
.8e80		b1 30		lda ($30),y			lda 	(codePtr),y
.8e82		c8		iny				iny
.8e83		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; , <size>
.8e85		f0 09		beq $8e90			beq 	_MCSize1D
.8e87		c9 d1		cmp #$d1			cmp 	#KWD_RECT 					; RECT <x>,<y>
.8e89		f0 0f		beq $8e9a			beq 	_MCRect2D
.8e8b						_MCSyntax:
.8e8b		a9 02		lda #$02		lda	#2
.8e8d		4c a3 95	jmp $95a3		jmp	ErrorHandler
.8e90						_MCSize1D:
.8e90		a2 00		ldx #$00			ldx 	#0 							; get size
.8e92		20 b5 a4	jsr $a4b5			jsr 	EvaluateInteger
.8e95		a2 0c		ldx #$0c			ldx 	#$C 						; copy to size $DF0C-E
.8e97		20 ed 8e	jsr $8eed			jsr 	MCCopyAddress
.8e9a						_MCRect2D:
.8e9a		a2 0c		ldx #$0c			ldx 	#$C 						; width to $DF0C,D
.8e9c		20 0a 8f	jsr $8f0a			jsr 	MCEvalCopyData16
.8e9f		20 92 95	jsr $9592			jsr 	CheckComma
.8ea2		a2 0e		ldx #$0e			ldx 	#$E 						; height to $DF0E,F
.8ea4		20 0a 8f	jsr $8f0a			jsr 	MCEvalCopyData16
.8ea7		a9 b5		lda #$b5			lda 	#KWD_BY 					; BY keyword.
.8ea9		20 9a 95	jsr $959a			jsr 	CheckNextA
.8eac		a2 10		ldx #$10			ldx 	#$10 						; store source and destination stride
.8eae		20 0a 8f	jsr $8f0a			jsr 	MCEvalCopyData16
.8eb1		a2 12		ldx #$12			ldx 	#$12
.8eb3		20 11 8f	jsr $8f11			jsr 	MCCopyData16
.8eb6		ad 75 07	lda $0775			lda 	DMAControlByte 				; set bit 4 of DMA control indicating 2D.
.8eb9		09 02		ora #$02			ora 	#$02
.8ebb		8d 75 07	sta $0775			sta 	DMAControlByte
.8ebe						_MCDestination:
.8ebe		b1 30		lda ($30),y			lda 	(codePtr),y
.8ec0		c8		iny				iny
.8ec1		c9 cc		cmp #$cc			cmp 	#KWD_POKE 					; is it POKE n
.8ec3		f0 10		beq $8ed5			beq 	_MCDestPoke
.8ec5		c9 d7		cmp #$d7			cmp 	#KWD_TO 					; is it TO n
.8ec7		d0 c2		bne $8e8b			bne 	_MCSyntax
.8ec9		a2 00		ldx #$00			ldx 	#0 							; get target address
.8ecb		20 b5 a4	jsr $a4b5			jsr 	EvaluateInteger
.8ece		a2 08		ldx #$08			ldx 	#8							; copy to target address at $DF08-A
.8ed0		20 ed 8e	jsr $8eed			jsr 	MCCopyAddress
.8ed3		80 0e		bra $8ee3			bra 	_MCDoDMA 					; and we can go.
.8ed5						_MCDestPoke:
.8ed5		20 e3 a4	jsr $a4e3			jsr 	Evaluate8BitInteger 		; POKE what
.8ed8		8d 01 df	sta $df01			sta 	$DF01 						; set the FILL register
.8edb		ad 75 07	lda $0775			lda 	DMAControlByte 				; set bit 2 of control byte indicating FILL.
.8ede		09 04		ora #$04			ora 	#$04
.8ee0		8d 75 07	sta $0775			sta 	DMAControlByte
.8ee3						_MCDoDMA:
.8ee3		ad 75 07	lda $0775			lda 	DMAControlByte 				; set the DMA Control byte to go !
.8ee6		8d 00 df	sta $df00			sta 	$DF00
.8ee9		68		pla				pla 								; restore I/O.
.8eea		85 01		sta $01				sta 	1
.8eec		60		rts				rts
.8eed						MCCopyAddress:
.8eed		a5 68		lda $68				lda 	NSMantissa2 				; check valid vlaue
.8eef		29 fc		and #$fc			and 	#$FC
.8ef1		05 70		ora $70				ora 	NSMantissa3
.8ef3		d0 10		bne $8f05			bne 	_MCRange
.8ef5		a5 58		lda $58				lda 	NSMantissa0
.8ef7		9d 00 df	sta $df00,x			sta 	$DF00,x
.8efa		a5 60		lda $60				lda 	NSMantissa1
.8efc		9d 01 df	sta $df01,x			sta 	$DF01,x
.8eff		a5 68		lda $68				lda 	NSMantissa2
.8f01		9d 02 df	sta $df02,x			sta 	$DF02,x
.8f04		60		rts				rts
.8f05						_MCRange:
.8f05		a9 04		lda #$04		lda	#4
.8f07		4c a3 95	jmp $95a3		jmp	ErrorHandler
.8f0a						MCEvalCopyData16:
.8f0a		da		phx				phx
.8f0b		a2 00		ldx #$00			ldx 	#0
.8f0d		20 c8 a4	jsr $a4c8			jsr 	Evaluate16BitInteger
.8f10		fa		plx				plx
.8f11						MCCopyData16:
.8f11		a5 58		lda $58				lda 	NSMantissa0
.8f13		9d 00 df	sta $df00,x			sta 	$DF00,x
.8f16		a5 60		lda $60				lda 	NSMantissa1
.8f18		9d 01 df	sta $df01,x			sta 	$DF01,x
.8f1b		60		rts				rts
.0775						DMAControlByte:
>0775								.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/new.asm

.8f1c						NewCommand:
.8f1c		20 22 8f	jsr $8f22			jsr 	NewProgram 					; does the actual NEW.
.8f1f		4c ad 85	jmp $85ad			jmp 	WarmStart 					; and warm starts straight away.
.8f22						NewProgram:
.8f22		20 b5 ac	jsr $acb5			jsr 	MemoryNew
.8f25		9c 00 10	stz $1000			stz 	VariableSpace 				; erase all variables.
.8f28		20 65 87	jsr $8765			jsr 	ClearCommand 				; clear everything.
.8f2b		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/poke.asm

.8f2c						PokeBCommand:
.8f2c		a9 01		lda #$01			lda 	#1
.8f2e		80 0c		bra $8f3c			bra 	PokeCommand
.8f30						PokeWCommand:
.8f30		a9 02		lda #$02			lda 	#2
.8f32		80 08		bra $8f3c			bra 	PokeCommand
.8f34						PokeLCommand:
.8f34		a9 03		lda #$03			lda 	#3
.8f36		80 04		bra $8f3c			bra 	PokeCommand
.8f38						PokeDCommand:
.8f38		a9 04		lda #$04			lda 	#4
.8f3a		80 00		bra $8f3c			bra 	PokeCommand
.8f3c						PokeCommand:
.8f3c		48		pha				pha 								; save count on stack
.8f3d		a2 00		ldx #$00			ldx 	#0 							; bottom of stack
.8f3f		20 c8 a4	jsr $a4c8			jsr		Evaluate16BitInteger 		; address
.8f42		20 92 95	jsr $9592			jsr 	CheckComma
.8f45		e8		inx				inx
.8f46		20 b5 a4	jsr $a4b5			jsr		EvaluateInteger 			; data
.8f49		a5 58		lda $58				lda 	NSMantissa0 				; copy address
.8f4b		85 36		sta $36				sta 	zTemp0
.8f4d		a5 60		lda $60				lda 	NSMantissa1
.8f4f		85 37		sta $37				sta 	zTemp0+1
.8f51		68		pla				pla 								; count -> zTemp1
.8f52		85 38		sta $38				sta 	zTemp1
.8f54		5a		phy				phy 								; save Y position.
.8f55		a0 00		ldy #$00			ldy 	#0 							; index to write
.8f57		a2 00		ldx #$00			ldx 	#0 							; index to read
.8f59						_PCLoop:
.8f59		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; read byte from mantissa and copy out
.8f5b		91 36		sta ($36),y			sta 	(zTemp0),y
.8f5d		c8		iny				iny 								; next byte to write
.8f5e		8a		txa				txa 								; next byte to read - stack layout in 04data.inc
.8f5f		18		clc				clc
.8f60		69 08		adc #$08			adc 	#MathStackSize
.8f62		aa		tax				tax
.8f63		c6 38		dec $38				dec 	zTemp1 						; done them all
.8f65		d0 f2		bne $8f59			bne 	_PCLoop
.8f67		7a		ply				ply 								; restore position.
.8f68		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/procedure.asm

=2						ParameterStackPos = 2
.8f69						CallProcedure:
.8f69		a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start storing parameters at 2.
.8f6b		b1 30		lda ($30),y			lda 	(codePtr),y
.8f6d		c9 29		cmp #$29			cmp 	#KWD_RPAREN
.8f6f		f0 0c		beq $8f7d			beq 	_CPEndParam
.8f71						_CPParamLoop:
.8f71		20 8d a4	jsr $a48d			jsr 	EvaluateValue 				; get parameter onto stack
.8f74		e8		inx				inx 								; bump next stack
.8f75		b1 30		lda ($30),y			lda 	(codePtr),y
.8f77		c8		iny				iny
.8f78		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if comma, go back and try again.
.8f7a		f0 f5		beq $8f71			beq 	_CPParamLoop
.8f7c		88		dey				dey 								; unpick.
.8f7d						_CPEndParam:
.8f7d		8e 16 04	stx $0416			stx 	lastParameter 				; save the last parameters index.
.8f80		c8		iny				iny									; skip right bracket
.8f81		a9 b3		lda #$b3			lda 	#STK_PROC+3 				; allocate 6 bytes on the return stack.
.8f83		20 27 b6	jsr $b627			jsr 	StackOpen
.8f86		20 6c b6	jsr $b66c			jsr 	STKSaveCodePosition 		; save loop position
.8f89		a5 58		lda $58				lda 	NSMantissa0 				; copy variable (e.g. procedure) address to zTemp0
.8f8b		85 36		sta $36				sta 	zTemp0 						; this is the DATA not the RECORD
.8f8d		a5 60		lda $60				lda 	NSMantissa1
.8f8f		85 37		sta $37				sta 	zTemp0+1
.8f91		a0 01		ldy #$01			ldy 	#1 							; copy code address back.
.8f93		b2 36		lda ($36)			lda 	(zTemp0)
.8f95		85 30		sta $30				sta 	safePtr
.8f97		b1 36		lda ($36),y			lda 	(zTemp0),y
.8f99		85 31		sta $31				sta 	safePtr+1
.8f9b		c8		iny				iny
.8f9c		b1 36		lda ($36),y			lda 	(zTemp0),y
.8f9e		85 32		sta $32				sta 	safePtr+2
.8fa0		c8		iny				iny
.8fa1		b1 36		lda ($36),y			lda 	(zTemp0),y
.8fa3		85 33		sta $33				sta 	safePtr+3
.8fa5		c8		iny				iny 								; get Y offset -> Y
.8fa6		b1 36		lda ($36),y			lda 	(zTemp0),y
.8fa8		a8		tay				tay
.8fa9		a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start position of parameters
.8fab		ec 16 04	cpx $0416			cpx	 	lastParameter 				; check zero parameters at the start
.8fae		f0 13		beq $8fc3			beq 	_ParamExit 					; if so, exit.
.8fb0						_ParamExtract:
.8fb0		ca		dex				dex 								; put a local term on the level before
.8fb1		20 b0 8d	jsr $8db0			jsr 	LocaliseNextTerm			; also pushes original param value to basic stack
.8fb4		20 b3 8b	jsr $8bb3			jsr 	AssignVariable 				; assign stacked value to the variable.
.8fb7		e8		inx				inx 								; advance to next parameter to do.
.8fb8		e8		inx				inx
.8fb9		ec 16 04	cpx $0416			cpx 	lastParameter 				; are we done ?
.8fbc		f0 05		beq $8fc3			beq 	_ParamExit
.8fbe		20 92 95	jsr $9592			jsr 	CheckComma 					; comma seperating parameters
.8fc1		80 ed		bra $8fb0			bra 	_ParamExtract
.8fc3						_ParamExit:
.8fc3		20 8a 95	jsr $958a			jsr 	CheckRightBracket 			; check )
.8fc6		60		rts				rts 								; and continue from here
.8fc7						Command_ENDPROC:
.8fc7		a9 b0		lda #$b0			lda 	#STK_PROC 					; check TOS is this
.8fc9		a2 14		ldx #$14			ldx 	#ERRID_PROC
.8fcb		20 54 b6	jsr $b654			jsr 	StackCheckFrame
.8fce		20 7d b6	jsr $b67d			jsr 	STKLoadCodePosition 		; restore code position
.8fd1		20 46 b6	jsr $b646			jsr 	StackClose
.8fd4		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/read.asm

.8fd5						Command_Read:
.8fd5		a2 00		ldx #$00			ldx 	#0 							; evaluate the term which is the var/array element to assign
.8fd7		20 f1 9e	jsr $9ef1			jsr 	EvaluateTerm
.8fda		b5 50		lda $50,x			lda 	NSStatus,x
.8fdc		29 20		and #$20			and 	#NSBIsReference				; get status byte on stack, identifies int, float, string.
.8fde		f0 4f		beq $902f			beq 	_CRSyntax 					; check reference (bit 0) fail if not a reference.
.8fe0		20 78 90	jsr $9078			jsr 	SwapDataCodePtrs 			; swap code and data
.8fe3		ad 1c 04	lda $041c			lda 	inDataStatement 			; if in a data statement, we don't need to search
.8fe6		d0 25		bne $900d			bne 	_CRContinueData  			; forward for the next one.
.8fe8		b2 30		lda ($30)			lda 	(codePtr)
.8fea		f0 1c		beq $9008			beq 	_CRNoData
.8fec						_CRKeepSearching:
.8fec		a9 bb		lda #$bb			lda 	#KWD_DATA 					; scan for instruction
.8fee		a2 80		ldx #$80			ldx 	#KWC_EOL
.8ff0		20 8b 94	jsr $948b			jsr 	ScanForward
.8ff3		c9 bb		cmp #$bb			cmp 	#KWD_DATA 					; found data ?
.8ff5		f0 16		beq $900d			beq 	_CRHaveData 				; found it
.8ff7		18		clc				clc
.8ff8		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.8ffa		65 30		adc $30				adc 	codePtr
.8ffc		85 30		sta $30				sta 	codePtr
.8ffe		90 02		bcc $9002			bcc 	_CREExit
.9000		e6 31		inc $31				inc 	codePtr+1 					; carry
.9002						_CREExit:
.9002		a0 03		ldy #$03			ldy 	#3 							; start of line.
.9004		b2 30		lda ($30)			lda 	(codePtr)
.9006		d0 e4		bne $8fec			bne 	_CRKeepSearching
.9008						_CRNoData:
.9008		a9 0b		lda #$0b		lda	#11
.900a		4c a3 95	jmp $95a3		jmp	ErrorHandler
.900d						_CRHaveData:
.900d						_CRContinueData:
.900d		a2 01		ldx #$01			ldx 	#1
.900f		20 8d a4	jsr $a48d			jsr 	EvaluateValue 				; evaluate value into slot # 1
.9012		ca		dex				dex
.9013		20 b3 8b	jsr $8bb3			jsr		AssignVariable 				; do the assignment
.9016		9c 1c 04	stz $041c			stz 	inDataStatement 			; clear in data flag
.9019		b1 30		lda ($30),y			lda 	(codePtr),y
.901b		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not, end of data statement and exit
.901d		d0 04		bne $9023			bne 	_CRSwapBack
.901f		c8		iny				iny 								; consume comma
.9020		ee 1c 04	inc $041c			inc 	inDataStatement 			; set in data statement currently.
.9023						_CRSwapBack:
.9023		20 78 90	jsr $9078			jsr 	SwapDataCodePtrs			; swap them back.
.9026		b1 30		lda ($30),y			lda 	(codePtr),y
.9028		c8		iny				iny
.9029		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.902b		f0 a8		beq $8fd5			beq 	Command_Read 				; if so go round again.
.902d		88		dey				dey 								; unpick get.
.902e		60		rts				rts
.902f						_CRSyntax:
.902f		4c c6 a6	jmp $a6c6			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/rem.asm

.9032						RemCommand:
.9032		b1 30		lda ($30),y			lda 	(codePtr),y
.9034		c9 ff		cmp #$ff			cmp 	#KWC_STRING
.9036		d0 06		bne $903e			bne 	_RMExit
.9038		c8		iny				iny 								; point to offset
.9039		98		tya				tya 								; A = offset position
.903a		38		sec				sec 								; add size +1 hence SEC
.903b		71 30		adc ($30),y			adc 	(codePtr),y
.903d		a8		tay				tay 								; make current position.
.903e						_RMExit:
.903e		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/repeat.asm

.903f						Command_REPEAT:
.903f		a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; allocate 6 bytes on the return stack.
.9041		20 27 b6	jsr $b627			jsr 	StackOpen
.9044		20 6c b6	jsr $b66c			jsr 	STKSaveCodePosition 		; save loop position
.9047		60		rts				rts
.9048						Command_UNTIL:
.9048		a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; check REPEAT is TOS
.904a		a2 0f		ldx #$0f			ldx 	#ERRID_REPEAT 				; this error
.904c		20 54 b6	jsr $b654			jsr 	StackCheckFrame
.904f		a2 00		ldx #$00			ldx 	#0
.9051		20 96 a4	jsr $a496			jsr 	EvaluateNumber 				; work out the number
.9054		20 6a a5	jsr $a56a			jsr 	NSMIsZero 					; check if zero
.9057		f0 04		beq $905d			beq 	_CULoopBack 				; if so keep looping
.9059		20 46 b6	jsr $b646			jsr 	StackClose		 			; return
.905c		60		rts				rts
.905d						_CULoopBack:
.905d		20 7d b6	jsr $b67d			jsr 	STKLoadCodePosition 		; loop back
.9060		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/restore.asm

.9061						Command_Restore:
.9061		20 78 90	jsr $9078			jsr 	SwapDataCodePtrs 			; swap code and data
.9064		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.9066		85 30		sta $30				sta 	codePtr
.9068		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.906a		85 31		sta $31				sta 	codePtr+1
.906c		20 78 90	jsr $9078			jsr 	SwapDataCodePtrs 			; put them back
.906f		a9 03		lda #$03			lda 	#3 							; start at offset 3, e.g. first instruction of first line.
.9071		8d 1b 04	sta $041b			sta 	dataPointer+4   			; (read checks not EOF)
.9074		9c 1c 04	stz $041c			stz 	inDataStatement 			; not in data statement
.9077		60		rts				rts
.9078						SwapDataCodePtrs:
.9078		da		phx				phx
.9079		a2 03		ldx #$03			ldx 	#3 							; swap 32 bit code pointer over
.907b						_SDCPLoop:
.907b		b5 30		lda $30,x			lda 	safePtr,x
.907d		48		pha				pha
.907e		bd 17 04	lda $0417,x			lda 	dataPointer,x
.9081		95 30		sta $30,x			sta 	safePtr,x
.9083		68		pla				pla
.9084		9d 17 04	sta $0417,x			sta 	dataPointer,x
.9087		ca		dex				dex
.9088		10 f1		bpl $907b			bpl 	_SDCPLoop
.908a		ad 1b 04	lda $041b			lda 	dataPointer+4 				; swap Y position over.
.908d		8c 1b 04	sty $041b			sty 	dataPointer+4
.9090		a8		tay				tay
.9091		fa		plx				plx
.9092		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/run.asm

.9093						EOLCommand:
.9093		18		clc				clc
.9094		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.9096		65 30		adc $30				adc 	codePtr
.9098		85 30		sta $30				sta 	codePtr
.909a		90 02		bcc $909e			bcc 	_CREExit
.909c		e6 31		inc $31				inc 	codePtr+1 					; carry
.909e						_CREExit:
.909e		80 0b		bra $90ab			bra 	RunNewLine
.90a0						CommandRUN:
.90a0		20 65 87	jsr $8765			jsr 	ClearCommand 				; clear variable/stacks/etc.
.90a3		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.90a5		85 30		sta $30				sta 	codePtr
.90a7		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.90a9		85 31		sta $31				sta 	codePtr+1
.90ab						RunNewLine:
.90ab		b2 30		lda ($30)			lda 	(codePtr)
.90ad		f0 74		beq $9123			beq 	CRNoProgram         		; no then END.
.90af		a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack
.90b1		9a		txs				txs
.90b2						RUNCodePointerLine:
.90b2		a0 02		ldy #$02			ldy 	#2 							; start of program
.90b4						_CRIncMainLoop:
.90b4		a5 f2		lda $f2				lda 	kernel.args.events.pending 	; load pending event count into accumulator
.90b6		f0 03		beq $90bb			beq 	_NoEvents					; if zero, skip with Z flag set.
.90b8		20 f1 80	jsr $80f1			jsr 	ProcessEvents
.90bb						_NoEvents:
.90bb		d0 61		bne $911e			bne 	_CRBreak
.90bd		a5 01		lda $01				lda 	1 							; save I/O 0
.90bf		48		pha				pha
.90c0		64 01		stz $01				stz 	1 							; access I/O Page 0
.90c2		38		sec				sec 								; calculate timer - LastTick
.90c3		ad 59 d6	lda $d659			lda 	$D659
.90c6		cd 76 07	cmp $0776			cmp 	LastTick
.90c9		f0 06		beq $90d1			beq 	_NoFireTick 				; if < 3 clocks don't fire.
.90cb		8d 76 07	sta $0776			sta 	LastTick 					; update last timer
.90ce		20 73 a5	jsr $a573			jsr 	TickHandler 							; go do the code.
.90d1						_NoFireTick:
.90d1		68		pla				pla 								; restore I/O 0
.90d2		85 01		sta $01				sta 	1
.90d4						_CRNoBreakCheck:
.90d4		c8		iny				iny									; next token
.90d5						_CRMainLoop:
.90d5		9c 10 04	stz $0410			stz 	stringInitialised 			; clear the temporary string initialised flag.
.90d8		b1 30		lda ($30),y			lda 	(codePtr),y
.90da		10 10		bpl $90ec			bpl 	_CRNotKeyword				; not a token.
.90dc		c9 aa		cmp #$aa			cmp 	#KWC_LAST_UNARY+1 			; if after unary, legitimate command
.90de		b0 04		bcs $90e4			bcs 	_CRIsKeyword
.90e0		c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if unary, syntax error.
.90e2		b0 34		bcs $9118			bcs		_CRSyntaxError
.90e4						_CRIsKeyword:
.90e4		c8		iny				iny 								; consume command
.90e5		0a		asl a				asl 	a 							; double losing the MSB which is '1' as tokens are $80-$FF
.90e6		aa		tax				tax 								; put in X for vector jump
.90e7		20 1b 91	jsr $911b			jsr 	_CRCallVector0 				; call the vector - effectively jsr (vectortable,X)
.90ea		80 e9		bra $90d5			bra 	_CRMainLoop 				; and loop round
.90ec						_CRNotKeyword:
.90ec		c9 3a		cmp #$3a			cmp 	#KWD_COLON 					; if a :, consume it and go round.
.90ee		f0 c4		beq $90b4			beq 	_CRIncMainLoop
.90f0		c9 40		cmp #$40			cmp 	#$40 						; variable/call reference
.90f2		90 05		bcc $90f9			bcc 	_CRNotVariable
.90f4						_CRGoLet:
.90f4		20 7a 8b	jsr $8b7a			jsr 	LetCommand
.90f7		80 dc		bra $90d5			bra 	_CRMainLoop
.90f9						_CRNotVariable:
.90f9		c9 10		cmp #$10			cmp 	#KWD_AT 					; handle @
.90fb		f0 f7		beq $90f4			beq 	_CRGoLet
.90fd		c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; handle ? !
.90ff		f0 f3		beq $90f4			beq 	_CRGoLet
.9101		c9 21		cmp #$21			cmp 	#KWD_PLING
.9103		f0 ef		beq $90f4			beq 	_CRGoLet
.9105		c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; handle ' (comment)
.9107		f0 09		beq $9112			beq 	_CRGoRem
.9109		c9 2e		cmp #$2e			cmp 	#KWD_PERIOD 				; handle . (assembler label)
.910b		d0 0b		bne $9118			bne 	_CRSyntaxError
.910d		20 1f 84	jsr $841f			jsr 	LabelHere
.9110		80 c3		bra $90d5			bra 	_CRMainLoop
.9112						_CRGoRem:
.9112		c8		iny				iny
.9113		20 32 90	jsr $9032			jsr 	RemCommand
.9116		80 bd		bra $90d5			bra 	_CRMainLoop
.9118						_CRSyntaxError:
.9118		4c c6 a6	jmp $a6c6			jmp 	SyntaxError
.911b						_CRCallVector0:
.911b		7c ba 91	jmp ($91ba,x)			jmp 	(VectorSet0,x)
.911e						_CRBreak:
.911e		a9 01		lda #$01		lda	#1
.9120		4c a3 95	jmp $95a3		jmp	ErrorHandler
.9123						CRNoProgram:
.9123		4c 10 89	jmp $8910			jmp 	EndCommand
.9126						Shift1Command:
.9126		b1 30		lda ($30),y			lda 	(codePtr),y
.9128		c8		iny				iny
.9129		0a		asl a				asl 	a
.912a		aa		tax				tax
.912b		7c 6a 92	jmp ($926a,x)			jmp 	(VectorSet1,x)
.912e						Shift2Command:
.912e		b1 30		lda ($30),y			lda 	(codePtr),y
.9130		c8		iny				iny
.9131		0a		asl a				asl 	a
.9132		aa		tax				tax
.9133		7c b4 92	jmp ($92b4,x)			jmp 	(VectorSet2,x)
.9136						Unused1:
.9136						Unused2:
.9136						Unused3:
.9136						Unused4:
.9136		4c c6 a6	jmp $a6c6			jmp 	SyntaxError
>9139								.align 2

;******  Processing file: ./common/commands/../generated/vectors.dat

.913a						VectorSetPunc:
>913a		5b 98					.word	ShiftLeft                        ; $00 <<
>913c		46 96					.word	BinaryCompareLessEqual           ; $01 <=
>913e		3c 96					.word	BinaryCompareNotEqual            ; $02 <>
>9140		c6 a6					.word	SyntaxError                      ; $03 !!3
>9142		c6 a6					.word	SyntaxError                      ; $04 ><
>9144		50 96					.word	BinaryCompareGreaterEqual        ; $05 >=
>9146		5e 98					.word	ShiftRight                       ; $06 >>
>9148		c6 a6					.word	SyntaxError                      ; $07 !!7
>914a		c6 a6					.word	SyntaxError                      ; $08 !!8
>914c		c6 a6					.word	SyntaxError                      ; $09 !!9
>914e		c6 a6					.word	SyntaxError                      ; $0a !!10
>9150		c6 a6					.word	SyntaxError                      ; $0b !!11
>9152		c6 a6					.word	SyntaxError                      ; $0c !!12
>9154		c6 a6					.word	SyntaxError                      ; $0d !!13
>9156		c6 a6					.word	SyntaxError                      ; $0e !!14
>9158		c6 a6					.word	SyntaxError                      ; $0f !!15
>915a		c6 a6					.word	SyntaxError                      ; $10 @
>915c		c6 a6					.word	SyntaxError                      ; $11 !!17
>915e		c6 a6					.word	SyntaxError                      ; $12 !!18
>9160		c6 a6					.word	SyntaxError                      ; $13 [
>9162		07 97					.word	IntegerDivide                    ; $14 \
>9164		c6 a6					.word	SyntaxError                      ; $15 ]
>9166		99 99					.word	EorInteger                       ; $16 ^
>9168		c6 a6					.word	SyntaxError                      ; $17 _
>916a		c6 a6					.word	SyntaxError                      ; $18 `
>916c		c6 a6					.word	SyntaxError                      ; $19 !!25
>916e		c6 a6					.word	SyntaxError                      ; $1a !!26
>9170		c6 a6					.word	SyntaxError                      ; $1b {
>9172		64 99					.word	OraInteger                       ; $1c |
>9174		c6 a6					.word	SyntaxError                      ; $1d }
>9176		c6 a6					.word	SyntaxError                      ; $1e ~
>9178		c6 a6					.word	SyntaxError                      ; $1f [7m<7F>[m
>917a		c6 a6					.word	SyntaxError                      ; $20
>917c		ce 99					.word	WordIndirect                     ; $21 !
>917e		c6 a6					.word	SyntaxError                      ; $22 "
>9180		c6 a6					.word	SyntaxError                      ; $23 #
>9182		c6 a6					.word	SyntaxError                      ; $24 $
>9184		48 97					.word	IntegerModulus                   ; $25 %
>9186		2f 99					.word	AndInteger                       ; $26 &
>9188		c6 a6					.word	SyntaxError                      ; $27 '
>918a		c6 a6					.word	SyntaxError                      ; $28 (
>918c		c6 a6					.word	SyntaxError                      ; $29 )
>918e		b6 97					.word	MulInteger                       ; $2a *
>9190		d1 98					.word	AddInteger                       ; $2b +
>9192		c6 a6					.word	SyntaxError                      ; $2c ,
>9194		0a 99					.word	SubInteger                       ; $2d -
>9196		c6 a6					.word	SyntaxError                      ; $2e .
>9198		88 9b					.word	FDivideCommand                   ; $2f /
>919a		c6 a6					.word	SyntaxError                      ; $30 0
>919c		c6 a6					.word	SyntaxError                      ; $31 1
>919e		c6 a6					.word	SyntaxError                      ; $32 2
>91a0		c6 a6					.word	SyntaxError                      ; $33 3
>91a2		c6 a6					.word	SyntaxError                      ; $34 4
>91a4		c6 a6					.word	SyntaxError                      ; $35 5
>91a6		c6 a6					.word	SyntaxError                      ; $36 6
>91a8		c6 a6					.word	SyntaxError                      ; $37 7
>91aa		c6 a6					.word	SyntaxError                      ; $38 8
>91ac		c6 a6					.word	SyntaxError                      ; $39 9
>91ae		c6 a6					.word	SyntaxError                      ; $3a :
>91b0		c6 a6					.word	SyntaxError                      ; $3b ;
>91b2		28 96					.word	BinaryCompareLess                ; $3c <
>91b4		1e 96					.word	BinaryCompareEqual               ; $3d =
>91b6		32 96					.word	BinaryCompareGreater             ; $3e >
>91b8		f0 99					.word	ByteIndirect                     ; $3f ?
.91ba						VectorSet0:
>91ba		93 90					.word	EOLCommand                       ; $80 !0:EOF
>91bc		26 91					.word	Shift1Command                    ; $81 !1:SH1
>91be		2e 91					.word	Shift2Command                    ; $82 !2:SH2
>91c0		72 a0					.word	AbsUnary                         ; $83 ABS(
>91c2		80 a0					.word	AllocUnary                       ; $84 ALLOC(
>91c4		f0 a0					.word	AscUnary                         ; $85 ASC(
>91c6		d4 a2					.word	ChrUnary                         ; $86 CHR$(
>91c8		49 ab					.word	UnaryEvent                       ; $87 EVENT(
>91ca		1a 96					.word	UnaryFalse                       ; $88 FALSE
>91cc		fd a0					.word	FracUnary                        ; $89 FRAC(
>91ce		5f 82					.word	ChrGet                           ; $8a GET$(
>91d0		3b 82					.word	AscGet                           ; $8b GET(
>91d2		ea a2					.word	UnaryGetDate                     ; $8c GETDATE$(
>91d4		e6 a2					.word	UnaryGetTime                     ; $8d GETTIME$(
>91d6		d3 aa					.word	UnaryHit                         ; $8e HIT(
>91d8		66 82					.word	ChrInkey                         ; $8f INKEY$(
>91da		54 82					.word	AscInkey                         ; $90 INKEY(
>91dc		12 a1					.word	IntUnary                         ; $91 INT(
>91de		93 a2					.word	IsValUnary                       ; $92 ISVAL(
>91e0		cd ab					.word	UnaryJoyB                        ; $93 JOYB(
>91e2		a6 ab					.word	UnaryJoyX                        ; $94 JOYX(
>91e4		a9 ab					.word	UnaryJoyY                        ; $95 JOYY(
>91e6		01 a4					.word	Unary_Left                       ; $96 LEFT$(
>91e8		23 a1					.word	LenUnary                         ; $97 LEN(
>91ea		41 a1					.word	Unary_Max                        ; $98 MAX(
>91ec		23 a4					.word	Unary_Mid                        ; $99 MID$(
>91ee		3d a1					.word	Unary_Min                        ; $9a MIN(
>91f0		8c a1					.word	Unary_Not                        ; $9b NOT(
>91f2		9f a1					.word	PeekByteUnary                    ; $9c PEEK(
>91f4		ab a1					.word	PeekDUnary                       ; $9d PEEKD(
>91f6		a7 a1					.word	PeekLUnary                       ; $9e PEEKL(
>91f8		a3 a1					.word	PeekWUnary                       ; $9f PEEKW(
>91fa		84 b5					.word	UnaryPlaying                     ; $a0 PLAYING(
>91fc		d8 a1					.word	Unary_Random                     ; $a1 RANDOM(
>91fe		0e a4					.word	Unary_Right                      ; $a2 RIGHT$(
>9200		f5 a1					.word	Unary_Rnd                        ; $a3 RND(
>9202		6b a2					.word	SgnUnary                         ; $a4 SGN(
>9204		40 a3					.word	SpcUnary                         ; $a5 SPC(
>9206		5b a3					.word	Unary_Str                        ; $a6 STR$(
>9208		df ab					.word	UnaryTimer                       ; $a7 TIMER(
>920a		0f 96					.word	UnaryTrue                        ; $a8 TRUE
>920c		89 a2					.word	ValUnary                         ; $a9 VAL(
>920e		13 89					.word	ForCommand                       ; $aa FOR
>9210		56 8a					.word	IfCommand                        ; $ab IF
>9212		36 91					.word	Unused1                          ; $ac PROC
>9214		3f 90					.word	Command_REPEAT                   ; $ad REPEAT
>9216		5b 95					.word	Command_WHILE                    ; $ae WHILE
>9218		7f 8a					.word	EndIf                            ; $af ENDIF
>921a		c7 8f					.word	Command_ENDPROC                  ; $b0 ENDPROC
>921c		c5 89					.word	NextCommand                      ; $b1 NEXT
>921e		36 91					.word	Unused4                          ; $b2 THEN
>9220		48 90					.word	Command_UNTIL                    ; $b3 UNTIL
>9222		7c 95					.word	Command_WEND                     ; $b4 WEND
>9224		c6 a6					.word	SyntaxError                      ; $b5 BY
>9226		30 87					.word	CallCommand                      ; $b6 CALL
>9228		87 a8					.word	CircleCommand                    ; $b7 CIRCLE
>922a		65 87					.word	ClearCommand                     ; $b8 CLEAR
>922c		c6 a6					.word	SyntaxError                      ; $b9 COLOR
>922e		c6 a6					.word	SyntaxError                      ; $ba COLOUR
>9230		c8 87					.word	Command_Data                     ; $bb DATA
>9232		d0 87					.word	DimCommand                       ; $bc DIM
>9234		36 91					.word	Unused3                          ; $bd DOWNTO
>9236		78 8a					.word	ElseCode                         ; $be ELSE
>9238		c6 a6					.word	SyntaxError                      ; $bf FROM
>923a		a6 aa					.word	GfxCommand                       ; $c0 GFX
>923c		c6 a6					.word	SyntaxError                      ; $c1 HERE
>923e		b0 a8					.word	ImageCommand                     ; $c2 IMAGE
>9240		7a 8b					.word	LetCommand                       ; $c3 LET
>9242		02 a9					.word	LineCommand                      ; $c4 LINE
>9244		a2 8d					.word	Command_LOCAL                    ; $c5 LOCAL
>9246		63 8e					.word	MCCommand                        ; $c6 MEMCOPY
>9248		c6 a6					.word	SyntaxError                      ; $c7 OFF
>924a		c6 a6					.word	SyntaxError                      ; $c8 ON
>924c		c6 a6					.word	SyntaxError                      ; $c9 OUTLINE
>924e		f7 aa					.word	PaletteCommand                   ; $ca PALETTE
>9250		fb a8					.word	PlotCommand                      ; $cb PLOT
>9252		2c 8f					.word	PokeBCommand                     ; $cc POKE
>9254		38 8f					.word	PokeDCommand                     ; $cd POKED
>9256		34 8f					.word	PokeLCommand                     ; $ce POKEL
>9258		30 8f					.word	PokeWCommand                     ; $cf POKEW
>925a		d5 8f					.word	Command_Read                     ; $d0 READ
>925c		83 a8					.word	RectangleCommand                 ; $d1 RECT
>925e		32 90					.word	RemCommand                       ; $d2 REM
>9260		c6 a6					.word	SyntaxError                      ; $d3 SOLID
>9262		a0 b5					.word	SoundCommand                     ; $d4 SOUND
>9264		92 a8					.word	SpriteCommand                    ; $d5 SPRITE
>9266		cc a8					.word	TextCommand                      ; $d6 TEXT
>9268		36 91					.word	Unused2                          ; $d7 TO
.926a						VectorSet1:
>926a		c6 a6					.word	SyntaxError                      ; $80 !0:EOF
>926c		c6 a6					.word	SyntaxError                      ; $81 !1:SH1
>926e		c6 a6					.word	SyntaxError                      ; $82 !2:SH2
>9270		e2 85					.word	AssembleCommand                  ; $83 ASSEMBLE
>9272		fe 85					.word	AssertCommand                    ; $84 ASSERT
>9274		46 aa					.word	BitmapCtrl                       ; $85 BITMAP
>9276		0e 86					.word	Command_BLoad                    ; $86 BLOAD
>9278		ae 86					.word	Command_BSave                    ; $87 BSAVE
>927a		c0 87					.word	ClearScreen                      ; $88 CLS
>927c		85 8a					.word	Command_CPrint                   ; $89 CPRINT
>927e		8d 88					.word	Command_Dir                      ; $8a DIR
>9280		09 89					.word	Command_Drive                    ; $8b DRIVE
>9282		10 89					.word	EndCommand                       ; $8c END
>9284		58 b5					.word	Explode                          ; $8d EXPLODE
>9286		c6 a6					.word	SyntaxError                      ; $8e GO
>9288		1e 8a					.word	Command_GOSUB                    ; $8f GOSUB
>928a		3c 8a					.word	GotoCommand                      ; $90 GOTO
>928c		c6 a6					.word	SyntaxError                      ; $91 HIMEM
>928e		80 8a					.word	Command_Input                    ; $92 INPUT
>9290		ca 8b					.word	Command_List                     ; $93 LIST
>9292		d4 8c					.word	Command_Load                     ; $94 LOAD
>9294		1c 8f					.word	NewCommand                       ; $95 NEW
>9296		34 b5					.word	PingCommand                      ; $96 PING
>9298		8c 8a					.word	Command_Print                    ; $97 PRINT
>929a		61 90					.word	Command_Restore                  ; $98 RESTORE
>929c		2e 8a					.word	Command_RETURN                   ; $99 RETURN
>929e		a0 90					.word	CommandRUN                       ; $9a RUN
>92a0		3c 93					.word	Command_Save                     ; $9b SAVE
>92a2		c0 93					.word	CommandSetDate                   ; $9c SETDATE
>92a4		c4 93					.word	CommandSetTime                   ; $9d SETTIME
>92a6		4c b5					.word	ShootCommand                     ; $9e SHOOT
>92a8		8b aa					.word	SpritesCtrl                      ; $9f SPRITES
>92aa		34 94					.word	StopCommand                      ; $a0 STOP
>92ac		01 95					.word	Command_VERIFY                   ; $a1 VERIFY
>92ae		40 ab					.word	XGoCommand                       ; $a2 XGO
>92b0		37 ab					.word	XLoadCommand                     ; $a3 XLOAD
>92b2		40 b5					.word	ZapCommand                       ; $a4 ZAP
.92b4						VectorSet2:
>92b4		c6 a6					.word	SyntaxError                      ; $80 !0:EOF
>92b6		c6 a6					.word	SyntaxError                      ; $81 !1:SH1
>92b8		c6 a6					.word	SyntaxError                      ; $82 !2:SH2
>92ba		85 a5					.word	Assemble_adc                     ; $83 ADC
>92bc		7d a5					.word	Assemble_and                     ; $84 AND
>92be		99 a5					.word	Assemble_asl                     ; $85 ASL
>92c0		03 a6					.word	Assemble_bcc                     ; $86 BCC
>92c2		07 a6					.word	Assemble_bcs                     ; $87 BCS
>92c4		0f a6					.word	Assemble_beq                     ; $88 BEQ
>92c6		c6 a5					.word	Assemble_bit                     ; $89 BIT
>92c8		f7 a5					.word	Assemble_bmi                     ; $8a BMI
>92ca		0b a6					.word	Assemble_bne                     ; $8b BNE
>92cc		f3 a5					.word	Assemble_bpl                     ; $8c BPL
>92ce		13 a6					.word	Assemble_bra                     ; $8d BRA
>92d0		17 a6					.word	Assemble_brk                     ; $8e BRK
>92d2		fb a5					.word	Assemble_bvc                     ; $8f BVC
>92d4		ff a5					.word	Assemble_bvs                     ; $90 BVS
>92d6		1f a6					.word	Assemble_clc                     ; $91 CLC
>92d8		73 a6					.word	Assemble_cld                     ; $92 CLD
>92da		33 a6					.word	Assemble_cli                     ; $93 CLI
>92dc		63 a6					.word	Assemble_clv                     ; $94 CLV
>92de		91 a5					.word	Assemble_cmp                     ; $95 CMP
>92e0		da a5					.word	Assemble_cpx                     ; $96 CPX
>92e2		d5 a5					.word	Assemble_cpy                     ; $97 CPY
>92e4		b7 a5					.word	Assemble_dec                     ; $98 DEC
>92e6		6f a6					.word	Assemble_dex                     ; $99 DEX
>92e8		4b a6					.word	Assemble_dey                     ; $9a DEY
>92ea		81 a5					.word	Assemble_eor                     ; $9b EOR
>92ec		bc a5					.word	Assemble_inc                     ; $9c INC
>92ee		7f a6					.word	Assemble_inx                     ; $9d INX
>92f0		6b a6					.word	Assemble_iny                     ; $9e INY
>92f2		ee a5					.word	Assemble_jmp                     ; $9f JMP
>92f4		e9 a5					.word	Assemble_jsr                     ; $a0 JSR
>92f6		8d a5					.word	Assemble_lda                     ; $a1 LDA
>92f8		b2 a5					.word	Assemble_ldx                     ; $a2 LDX
>92fa		d0 a5					.word	Assemble_ldy                     ; $a3 LDY
>92fc		a3 a5					.word	Assemble_lsr                     ; $a4 LSR
>92fe		83 a6					.word	Assemble_nop                     ; $a5 NOP
>9300		79 a5					.word	Assemble_ora                     ; $a6 ORA
>9302		2f a6					.word	Assemble_pha                     ; $a7 PHA
>9304		1b a6					.word	Assemble_php                     ; $a8 PHP
>9306		77 a6					.word	Assemble_phx                     ; $a9 PHX
>9308		37 a6					.word	Assemble_phy                     ; $aa PHY
>930a		3f a6					.word	Assemble_pla                     ; $ab PLA
>930c		23 a6					.word	Assemble_plp                     ; $ac PLP
>930e		8b a6					.word	Assemble_plx                     ; $ad PLX
>9310		47 a6					.word	Assemble_ply                     ; $ae PLY
>9312		9e a5					.word	Assemble_rol                     ; $af ROL
>9314		a8 a5					.word	Assemble_ror                     ; $b0 ROR
>9316		2b a6					.word	Assemble_rti                     ; $b1 RTI
>9318		3b a6					.word	Assemble_rts                     ; $b2 RTS
>931a		95 a5					.word	Assemble_sbc                     ; $b3 SBC
>931c		27 a6					.word	Assemble_sec                     ; $b4 SEC
>931e		87 a6					.word	Assemble_sed                     ; $b5 SED
>9320		43 a6					.word	Assemble_sei                     ; $b6 SEI
>9322		89 a5					.word	Assemble_sta                     ; $b7 STA
>9324		7b a6					.word	Assemble_stp                     ; $b8 STP
>9326		ad a5					.word	Assemble_stx                     ; $b9 STX
>9328		cb a5					.word	Assemble_sty                     ; $ba STY
>932a		c1 a5					.word	Assemble_stz                     ; $bb STZ
>932c		5f a6					.word	Assemble_tax                     ; $bc TAX
>932e		5b a6					.word	Assemble_tay                     ; $bd TAY
>9330		e4 a5					.word	Assemble_trb                     ; $be TRB
>9332		df a5					.word	Assemble_tsb                     ; $bf TSB
>9334		67 a6					.word	Assemble_tsx                     ; $c0 TSX
>9336		4f a6					.word	Assemble_txa                     ; $c1 TXA
>9338		57 a6					.word	Assemble_txs                     ; $c2 TXS
>933a		53 a6					.word	Assemble_tya                     ; $c3 TYA

;******  Return to file: ./common/commands/run.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/save.asm

.933c						Command_Save:
.933c		20 a0 a4	jsr $a4a0			jsr 	EvaluateString 				; file name to load
.933f		a6 37		ldx $37				ldx 	zTemp0+1					; zTemp0 -> XA
.9341		a5 36		lda $36				lda 	zTemp0
.9343		20 44 81	jsr $8144			jsr 	KNLOpenFileWrite 			; open file for writing
.9346		b0 2f		bcs $9377			bcs 	CSErrorHandler 				; error, so fail.
.9348		8d 71 07	sta $0771			sta 	BasicFileStream 			; save the reading stream.
.934b		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.934d		85 30		sta $30				sta 	codePtr
.934f		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.9351		85 31		sta $31				sta 	codePtr+1
.9353						_CSLoop:
.9353		b2 30		lda ($30)			lda 	(codePtr)
.9355		f0 17		beq $936e			beq 	_CSExit
.9357		20 9b 93	jsr $939b			jsr 	CSGetCleanLine
.935a		84 37		sty $37				sty 	zTemp0+1 					; save write address of data
.935c		85 36		sta $36				sta 	zTemp0
.935e		20 7a 93	jsr $937a			jsr 	CLWriteByteBlock 			; write the block out.
.9361		18		clc				clc
.9362		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.9364		65 30		adc $30				adc 	codePtr
.9366		85 30		sta $30				sta 	codePtr
.9368		90 02		bcc $936c			bcc 	_CREExit
.936a		e6 31		inc $31				inc 	codePtr+1 					; carry
.936c						_CREExit:
.936c		80 e5		bra $9353			bra 	_CSLoop
.936e						_CSExit:
.936e		ad 71 07	lda $0771			lda 	BasicFileStream 			; close file
.9371		20 13 82	jsr $8213			jsr 	KNLCloseFile
.9374		4c 07 8d	jmp $8d07			jmp 	CLComplete 					; display complete message.
.9377						CSErrorHandler:
.9377		4c 24 8d	jmp $8d24			jmp 	CLErrorHandler
.937a						CLWriteByteBlock:
.937a		e0 00		cpx #$00			cpx 	#0 							; written the lot ?
.937c		f0 1c		beq $939a			beq 	_CLWBBExit					; if so, exit
.937e		ad 71 07	lda $0771			lda 	BasicFileStream 			; stream to write, count in X
.9381		20 d9 81	jsr $81d9			jsr 	KNLWriteBlock 				; call one write attempt
.9384		b0 f1		bcs $9377			bcs 	CSErrorHandler 				; error occurred
.9386		85 38		sta $38				sta 	zTemp1 						; save bytes written.
.9388		8a		txa				txa 								; subtract bytes written from X, total count.
.9389		38		sec				sec
.938a		e5 38		sbc $38				sbc 	zTemp1
.938c		aa		tax				tax
.938d		18		clc				clc 								; advance zTemp0 pointer by bytes written.
.938e		a5 36		lda $36				lda 	zTemp0
.9390		65 38		adc $38				adc 	zTemp1
.9392		85 36		sta $36				sta 	zTemp0
.9394		90 e4		bcc $937a			bcc 	CLWriteByteBlock
.9396		e6 37		inc $37				inc 	zTemp0+1
.9398		80 e0		bra $937a			bra 	CLWriteByteBlock 			; and retry write out.
.939a						_CLWBBExit:
.939a		60		rts				rts
.939b						CSGetCleanLine:
.939b		a9 00		lda #$00			lda 	#0 							; no indent.
.939d		20 53 80	jsr $8053			jsr 	TKListConvertLine 			; convert line into token Buffer
.93a0		a2 00		ldx #$00			ldx 	#0 							; copy stripping controls.
.93a2		a0 00		ldy #$00			ldy 	#0
.93a4						_CSClean:
.93a4		b9 2d 04	lda $042d,y			lda 	tokenBuffer,y
.93a7		f0 09		beq $93b2			beq 	_CSDoneClean
.93a9		30 04		bmi $93af			bmi 	_CSIgnoreCharacter
.93ab		9d 2a 05	sta $052a,x			sta 	lineBuffer,x
.93ae		e8		inx				inx
.93af						_CSIgnoreCharacter:
.93af		c8		iny				iny
.93b0		80 f2		bra $93a4			bra 	_CSClean
.93b2						_CSDoneClean:
.93b2		a9 0d		lda #$0d			lda 	#13 						; add CR, length now in X and ASCIIZ.
.93b4		9d 2a 05	sta $052a,x			sta 	lineBuffer,x
.93b7		e8		inx				inx
.93b8		9e 2a 05	stz $052a,x			stz 	lineBuffer,x
.93bb		a0 05		ldy #$05			ldy 	#(lineBuffer >> 8) 			; line address in YA
.93bd		a9 2a		lda #$2a			lda 	#(lineBuffer & $FF)
.93bf		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/setdatetime.asm

.93c0						CommandSetDate:
.93c0		a9 03		lda #$03			lda 	#3
.93c2		80 02		bra $93c6			bra 	CSDTMain
.93c4						CommandSetTime:
.93c4		a9 00		lda #$00			lda 	#0
.93c6						CSDTMain:
.93c6		48		pha				pha 								; save table offsets 0 or 3
.93c7		a2 00		ldx #$00			ldx 	#0 							; input 3 values.
.93c9		20 e3 a4	jsr $a4e3			jsr 	Evaluate8BitInteger
.93cc		20 92 95	jsr $9592			jsr 	CheckComma
.93cf		e8		inx				inx
.93d0		20 e3 a4	jsr $a4e3			jsr 	Evaluate8BitInteger
.93d3		20 92 95	jsr $9592			jsr 	CheckComma
.93d6		e8		inx				inx
.93d7		20 e3 a4	jsr $a4e3			jsr 	Evaluate8BitInteger
.93da		68		pla				pla 								; table offset in Y, saving Y
.93db		5a		phy				phy
.93dc		a8		tay				tay
.93dd		a2 00		ldx #$00			ldx 	#0 							; first number
.93df		a5 01		lda $01				lda 	1 							; save I/O page, switch to zero
.93e1		48		pha				pha
.93e2		64 01		stz $01				stz 	1
.93e4						_CSDTCopy:
.93e4		b5 58		lda $58,x			lda 	NSMantissa0,x 				; get first number
.93e6		d9 28 94	cmp $9428,y			cmp 	RTCWMinValues,y 			; check range
.93e9		90 1b		bcc $9406			bcc 	_CSDTRange
.93eb		d9 2e 94	cmp $942e,y			cmp 	RTCWMaxValues,y
.93ee		b0 16		bcs $9406			bcs 	_CSDTRange
.93f0		20 0b 94	jsr $940b			jsr 	CSDTDecimalToBCD
.93f3		da		phx				phx 								; save X
.93f4		be 22 94	ldx $9422,y			ldx 	RTCWOffset,y 				; offset in RTC in X
.93f7		9d 90 d6	sta $d690,x			sta 	$D690,x 					; write to RTC
.93fa		fa		plx				plx 								; restore X
.93fb		e8		inx				inx 								; next number
.93fc		c8		iny				iny 								; next table entries
.93fd		e0 03		cpx #$03			cpx 	#3 							; until done all 3.
.93ff		d0 e3		bne $93e4			bne 	_CSDTCopy
.9401		68		pla				pla 								; restore I/O space
.9402		85 01		sta $01				sta 	1
.9404		7a		ply				ply 								; restore code pos and exit.
.9405		60		rts				rts
.9406						_CSDTRange:
.9406		a9 04		lda #$04		lda	#4
.9408		4c a3 95	jmp $95a3		jmp	ErrorHandler
.940b						CSDTDecimalToBCD:
.940b		da		phx				phx 								; 10 count in X
.940c		a2 00		ldx #$00			ldx 	#0
.940e						_CSDTDBLoop:
.940e		c9 0a		cmp #$0a			cmp 	#10 						; < 10 evaluate result.
.9410		90 05		bcc $9417			bcc 	_CSDTDBExit
.9412		e9 0a		sbc #$0a			sbc 	#10 						; 10 from value
.9414		e8		inx				inx 								; one more 10s.
.9415		80 f7		bra $940e			bra 	_CSDTDBLoop
.9417						_CSDTDBExit:
.9417		85 36		sta $36				sta 	zTemp0 						; units
.9419		8a		txa				txa 								; 10s x 16
.941a		0a		asl a				asl 	a
.941b		0a		asl a				asl 	a
.941c		0a		asl a				asl 	a
.941d		0a		asl a				asl 	a
.941e		05 36		ora $36				ora 	zTemp0 						; BCD result and exit
.9420		fa		plx				plx
.9421		60		rts				rts
.9422						RTCWOffset:
>9422		04 02 00 06 09 0a				.byte 	4,2,0,6,9,10
.9428						RTCWMinValues:
>9428		00 00 00 01 01 00				.byte 	0,0,0,1,1,0
.942e						RTCWMaxValues:
>942e		18 3c 3c 20 0d 64				.byte 	24,60,60,32,13,100

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/stop.asm

.9434						StopCommand:
.9434		a9 08		lda #$08		lda	#8
.9436		4c a3 95	jmp $95a3		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/procscan.asm

.9439						ProcedureScan:
.9439		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.943b		85 30		sta $30				sta 	codePtr
.943d		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.943f		85 31		sta $31				sta 	codePtr+1
.9441						_PSLoop:
.9441		b2 30		lda ($30)			lda 	(codePtr)
.9443		f0 42		beq $9487			beq 	_PSExit
.9445		a0 03		ldy #$03			ldy 	#3 							; is it PROC at start of line ?
.9447		b1 30		lda ($30),y			lda 	(codePtr),y
.9449		c9 ac		cmp #$ac			cmp 	#KWD_PROC
.944b		d0 2d		bne $947a			bne 	_PSNext
.944d		c8		iny				iny 								; get the address of the record to zTemp0 and
.944e		b1 30		lda ($30),y			lda 	(codePtr),y
.9450		29 c0		and #$c0			and 	#$C0
.9452		c9 40		cmp #$40			cmp 	#$40
.9454		d0 32		bne $9488			bne 	_PSSyntax
.9456		b1 30		lda ($30),y			lda 	(codePtr),y
.9458		18		clc				clc
.9459		69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.945b		85 37		sta $37				sta 	zTemp0+1
.945d		c8		iny				iny 								; LSB
.945e		b1 30		lda ($30),y			lda 	(codePtr),y
.9460		85 36		sta $36				sta 	zTemp0
.9462		c8		iny				iny 								; character after variable call.
.9463		98		tya				tya 								; save Y offset at +7 (exponent slot)
.9464		a0 07		ldy #$07			ldy 	#7
.9466		91 36		sta ($36),y			sta 	(zTemp0),y
.9468		a9 18		lda #$18			lda 	#NSTProcedure 				; mark it as procedure
.946a		a0 02		ldy #$02			ldy 	#2
.946c		91 36		sta ($36),y			sta 	(zTemp0),y
.946e		a2 00		ldx #$00			ldx 	#0 							; copy code-Ptr into offset 3-6 (mantissa)
.9470						_PSCopy:
.9470		b5 30		lda $30,x			lda 	safePtr,x
.9472		c8		iny				iny
.9473		91 36		sta ($36),y			sta 	(zTemp0),y
.9475		e8		inx				inx
.9476		e0 04		cpx #$04			cpx 	#4
.9478		d0 f6		bne $9470			bne 	_PSCopy
.947a						_PSNext:
.947a		18		clc				clc
.947b		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.947d		65 30		adc $30				adc 	codePtr
.947f		85 30		sta $30				sta 	codePtr
.9481		90 02		bcc $9485			bcc 	_CREExit
.9483		e6 31		inc $31				inc 	codePtr+1 					; carry
.9485						_CREExit:
.9485		80 ba		bra $9441			bra 	_PSLoop
.9487						_PSExit:
.9487		60		rts				rts
.9488						_PSSyntax:
.9488		4c c6 a6	jmp $a6c6			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/scanforward.asm

.948b						ScanForward:
.948b		64 38		stz $38				stz 	zTemp1 						; zero the structure count - goes up with WHILE/FOR down with WEND/NEXT etc.
.948d		86 37		stx $37				stx 	zTemp0+1
.948f		85 36		sta $36				sta 	zTemp0 						; save X & A as the two possible matches.
.9491						_ScanLoop:
.9491		b1 30		lda ($30),y			lda 	(codePtr),y
.9493		c8		iny				iny
.9494		a6 38		ldx $38				ldx 	zTemp1 						; if the count is > 0 cannot match as in substructure
.9496		d0 0e		bne $94a6			bne 	_ScanGoNext
.9498		c5 36		cmp $36				cmp 	zTemp0 						; see if either matches
.949a		f0 04		beq $94a0			beq 	_ScanMatch
.949c		c5 37		cmp $37				cmp 	zTemp0+1
.949e		d0 06		bne $94a6			bne 	_ScanGoNext
.94a0						_ScanMatch:
.94a0		c9 80		cmp #$80			cmp 	#KWC_EOL 					; if asked for EOL, backtrack.
.94a2		d0 01		bne $94a5			bne 	_ScanNotEndEOL
.94a4		88		dey				dey
.94a5						_ScanNotEndEOL:
.94a5		60		rts				rts
.94a6						_ScanGoNext:
.94a6		20 ab 94	jsr $94ab			jsr  	ScanForwardOne 				; allows for shifts and so on.
.94a9		80 e6		bra $9491			bra 	_ScanLoop
.94ab						ScanForwardOne:
.94ab		c9 40		cmp #$40			cmp 	#$40 						; if 00-3F, punctuation characters, already done.
.94ad		90 3e		bcc $94ed			bcc 	_SFWExit
.94af		c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if 40-82, skip one extra as these are 2 byte
.94b1		90 18		bcc $94cb			bcc 	_ScanSkipOne	 			; offsets into the identifier table or shifts.
.94b3		c9 fc		cmp #$fc			cmp 	#$FC 						; FC-FF are data skips (hex consts, strings etc.)
.94b5		b0 2f		bcs $94e6			bcs 	_ScanSkipData
.94b7		c9 aa		cmp #$aa			cmp 	#KWC_FIRST_STRUCTURE 		; structure keyword ?
.94b9		90 32		bcc $94ed			bcc 	_SFWExit 					; if not, ordinary keywords.
.94bb		c9 b5		cmp #$b5			cmp 	#KWC_LAST_STRUCTURE+1
.94bd		b0 2e		bcs $94ed			bcs 	_SFWExit
.94bf		c6 38		dec $38				dec 	zTemp1 						; decrement the sructure count
.94c1		c9 af		cmp #$af			cmp 	#KWC_FIRST_STRUCTURE_DEC 	; back if it is a dec structure (e.g. WEND/NEXT)
.94c3		b0 28		bcs $94ed			bcs 	_SFWExit
.94c5		e6 38		inc $38				inc 	zTemp1 						; so it's an increment structure
.94c7		e6 38		inc $38				inc 	zTemp1 						; twice to undo the dec
.94c9		80 22		bra $94ed			bra 	_SFWExit
.94cb						_ScanSkipOne:
.94cb		c8		iny				iny 								; consume the extra one.
.94cc		c9 80		cmp #$80			cmp 	#KWC_EOL 					; if not EOL loop back
.94ce		d0 1d		bne $94ed			bne 	_SFWExit
.94d0		18		clc				clc
.94d1		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.94d3		65 30		adc $30				adc 	codePtr
.94d5		85 30		sta $30				sta 	codePtr
.94d7		90 02		bcc $94db			bcc 	_CREExit
.94d9		e6 31		inc $31				inc 	codePtr+1 					; carry
.94db						_CREExit:
.94db		a0 03		ldy #$03			ldy 	#3 							; scan start position.
.94dd		b2 30		lda ($30)			lda 	(codePtr)
.94df		d0 0c		bne $94ed			bne 	_SFWExit 					; if not zero, more to scan
.94e1		a9 13		lda #$13		lda	#19
.94e3		4c a3 95	jmp $95a3		jmp	ErrorHandler
.94e6						_ScanSkipData:
.94e6		88		dey				dey 								; point at data token
.94e7		c8		iny				iny 								; point to offset
.94e8		98		tya				tya 								; A = offset position
.94e9		38		sec				sec 								; add size +1 hence SEC
.94ea		71 30		adc ($30),y			adc 	(codePtr),y
.94ec		a8		tay				tay 								; make current position.
.94ed						_SFWExit:
.94ed		60		rts				rts
.94ee						ScanGetCurrentLineStep:
.94ee		64 38		stz $38				stz 	zTemp1
.94f0		a0 03		ldy #$03			ldy 	#3
.94f2						_SGCLSLoop:
.94f2		b1 30		lda ($30),y			lda 	(codePtr),y
.94f4		c8		iny				iny
.94f5		c9 80		cmp #$80			cmp 	#KWC_EOL	 				; if EOL exit
.94f7		f0 05		beq $94fe			beq 	_SGCLSExit
.94f9		20 ab 94	jsr $94ab			jsr 	ScanForwardOne
.94fc		80 f4		bra $94f2			bra 	_SGCLSLoop
.94fe						_SGCLSExit:
.94fe		a5 38		lda $38				lda 	zTemp1 						; return the adjustment
.9500		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/verify.asm

.dc57						m
.9501						Command_VERIFY:
.9501		20 a0 a4	jsr $a4a0			jsr 	EvaluateString 				; file name to verify
.9504		a6 37		ldx $37				ldx 	zTemp0+1					; zTemp0 -> XA
.9506		a5 36		lda $36				lda 	zTemp0
.9508		20 49 81	jsr $8149			jsr 	KNLOpenFileRead 			; open file for reading
.950b		b0 4b		bcs $9558			bcs 	_CVErrorHandler 			; error, so fail.
.950d		8d 71 07	sta $0771			sta 	BasicFileStream 			; save the reading stream.
.9510		20 74 8d	jsr $8d74			jsr     LoadReadByteInit            ; Init reader with the stream
.9513		9c 70 07	stz $0770			stz 	LoadEOFFlag 				; clear EOF Flag.
.9516		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.9518		85 30		sta $30				sta 	codePtr
.951a		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.951c		85 31		sta $31				sta 	codePtr+1
.951e						_CVLoop:
.951e		20 32 8d	jsr $8d32			jsr 	LoadReadLine 				; get next line.
.9521		f0 27		beq $954a			beq 	_CVExit 					; end, exit.
.9523		20 5d 80	jsr $805d			jsr 	TKTokeniseLine 				; tokenise the line.
.9526		ad 2b 04	lda $042b			lda 	tokenLineNumber 			; line number = 0
.9529		0d 2c 04	ora $042c			ora 	tokenLineNumber+1
.952c		f0 f0		beq $951e			beq 	_CVLoop 					; not legal code, blank line or maybe a comment.
.952e		a0 00		ldy #$00			ldy 	#0 							; start compare
.9530						_CVCompareLoop:
.9530		b1 30		lda ($30),y			lda 	(codePtr),y
.9532		d9 2a 04	cmp $042a,y			cmp 	tokenOffset,y 				; compare against actual code.
.9535		d0 1c		bne $9553			bne 	_CVCompareError
.9537		c8		iny				iny
.9538		cc 2a 04	cpy $042a			cpy 	tokenOffset 				; until done whole line of code
.953b		d0 f3		bne $9530			bne 	_CVCompareLoop
.953d		18		clc				clc
.953e		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.9540		65 30		adc $30				adc 	codePtr
.9542		85 30		sta $30				sta 	codePtr
.9544		90 02		bcc $9548			bcc 	_CREExit
.9546		e6 31		inc $31				inc 	codePtr+1 					; carry
.9548						_CREExit:
.9548		80 d4		bra $951e			bra 	_CVLoop
.954a						_CVExit:
.954a		ad 71 07	lda $0771			lda 	BasicFileStream
.954d		20 13 82	jsr $8213			jsr 	KNLCloseFile
.9550		4c 07 8d	jmp $8d07			jmp 	CLComplete
.9553						_CVCompareError:
.9553		a9 1b		lda #$1b		lda	#27
.9555		4c a3 95	jmp $95a3		jmp	ErrorHandler
.9558						_CVErrorHandler:
.9558		4c 24 8d	jmp $8d24			jmp 	CLErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/while.asm

.955b						Command_WHILE:
.955b		5a		phy				phy 								; save position of the test
.955c		a2 00		ldx #$00			ldx 	#0 							; work out the while test.
.955e		20 96 a4	jsr $a496			jsr 	EvaluateNumber
.9561		20 6a a5	jsr $a56a			jsr 	NSMIsZero 					; check if zero
.9564		f0 0e		beq $9574			beq 	_WHExitLoop 				; if so exit the loop, while has failed.
.9566		98		tya				tya 								; position *after* test.
.9567		7a		ply				ply 								; restore position before test, at WHILE
.9568		88		dey				dey 								; so we execute the WHILE command again.
.9569		48		pha				pha 								; push after test on the stack
.956a		a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; allocate 6 bytes on the return stack.
.956c		20 27 b6	jsr $b627			jsr 	StackOpen
.956f		20 6c b6	jsr $b66c			jsr 	STKSaveCodePosition 		; save loop position - where the test value expr is.
.9572		7a		ply				ply 								; restore the position *after* the test
.9573		60		rts				rts
.9574						_WHExitLoop:
.9574		68		pla				pla 								; throw post loop position
.9575		a9 b4		lda #$b4			lda 	#KWD_WEND 					; scan forward past WEND
.9577		aa		tax				tax
.9578		20 8b 94	jsr $948b			jsr 	ScanForward
.957b		60		rts				rts
.957c						Command_WEND:
.957c		a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; check WHILE is TOS e.g. in a while loop :)
.957e		a2 10		ldx #$10			ldx 	#ERRID_WHILE 				; this error if not.
.9580		20 54 b6	jsr $b654			jsr 	StackCheckFrame
.9583		20 7d b6	jsr $b67d			jsr 	STKLoadCodePosition 		; loop back to the WHILE keyword.
.9586		20 46 b6	jsr $b646			jsr 	StackClose		 			; erase the frame
.9589		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/charcheck.asm

.958a						CheckRightBracket:
.958a		b1 30		lda ($30),y			lda 	(codePtr),y
.958c		c8		iny				iny
.958d		c9 29		cmp #$29			cmp 	#KWD_RPAREN 						; exit if matches
.958f		d0 0f		bne $95a0			bne 	CNAFail
.9591		60		rts				rts
.9592						CheckComma:
.9592		b1 30		lda ($30),y			lda 	(codePtr),y
.9594		c8		iny				iny
.9595		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 						; exit if matches
.9597		d0 07		bne $95a0			bne 	CNAFail
.9599		60		rts				rts
.959a						CheckNextA:
.959a		d1 30		cmp ($30),y			cmp 	(codePtr),y
.959c		d0 02		bne $95a0			bne 	CNAFail
.959e		c8		iny				iny 								; skip character
.959f		60		rts				rts 								; and exit
.95a0						CNAFail:
.95a0		4c c6 a6	jmp $a6c6			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/errors.asm

.95a3						ErrorHandler:
.95a3		a8		tay				tay 								; find the error text
.95a4		f0 49		beq $95ef			beq 	_EHEnd
.95a6		a2 00		ldx #$00			ldx 	#0
.95a8		a9 df		lda #$df			lda 	#((ErrorText) & $FF)
.95aa		85 36		sta $36				sta 	0+zTemp0
.95ac		a9 a6		lda #$a6			lda 	#((ErrorText) >> 8)
.95ae		85 37		sta $37				sta 	1+zTemp0
.95b0						_EHFind:
.95b0		88		dey				dey 								; keep looking through text
.95b1		f0 0e		beq $95c1			beq 	_EHFound
.95b3						_EHFindZero:
.95b3		b2 36		lda ($36)			lda 	(zTemp0) 					; find the next error
.95b5		e6 36		inc $36				inc 	zTemp0
.95b7		d0 02		bne $95bb			bne 	_EHFNoCarry
.95b9		e6 37		inc $37				inc 	zTemp0+1
.95bb						_EHFNoCarry:
.95bb		c9 00		cmp #$00			cmp 	#0
.95bd		d0 f4		bne $95b3			bne 	_EHFindZero
.95bf		80 ef		bra $95b0			bra 	_EHFind
.95c1						_EHFound:
.95c1		a5 36		lda $36				lda 	zTemp0 						; print message
.95c3		a6 37		ldx $37				ldx 	zTemp0+1
.95c5		20 fc 95	jsr $95fc			jsr 	PrintStringXA
.95c8		a0 01		ldy #$01			ldy 	#1 							; if line number zero don't print it
.95ca		b1 30		lda ($30),y			lda 	(codePtr),y
.95cc		d0 05		bne $95d3			bne 	_EHAtMsg
.95ce		c8		iny				iny
.95cf		b1 30		lda ($30),y			lda 	(codePtr),y
.95d1		f0 17		beq $95ea			beq 	_EHCREnd
.95d3						_EHAtMsg:
.95d3		a2 95		ldx #$95			ldx 	#_AtMsg >> 8 				; print " at "
.95d5		a9 f2		lda #$f2			lda 	#_AtMsg & $FF
.95d7		20 fc 95	jsr $95fc			jsr 	PrintStringXA
.95da		a0 01		ldy #$01			ldy 	#1 							; line number into XA
.95dc		b1 30		lda ($30),y			lda 	(codePtr),y
.95de		48		pha				pha
.95df		c8		iny				iny
.95e0		b1 30		lda ($30),y			lda 	(codePtr),y
.95e2		aa		tax				tax
.95e3		68		pla				pla
.95e4		20 12 9a	jsr $9a12			jsr 	ConvertInt16 				; convert XA to string
.95e7		20 fc 95	jsr $95fc			jsr 	PrintStringXA 				; and print it.
.95ea						_EHCREnd:
.95ea		a9 0d		lda #$0d			lda 	#13 						; new line
.95ec		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.95ef						_EHEnd:
.95ef		4c ad 85	jmp $85ad			jmp 	WarmStart
>95f2		20 61 74 20 6c 69 6e 65		_AtMsg:	.text 	" at line ",0
>95fa		20 00
.95fc						PrintStringXA:
.95fc		5a		phy				phy
.95fd		86 37		stx $37				stx 	zTemp0+1
.95ff		85 36		sta $36				sta 	zTemp0
.9601		a0 00		ldy #$00			ldy 	#0
.9603						_PSXALoop:
.9603		b1 36		lda ($36),y			lda 	(zTemp0),y
.9605		f0 06		beq $960d			beq 	_PSXAExit
.9607		20 03 80	jsr $8003			jsr 	EXTPrintCharacter
.960a		c8		iny				iny
.960b		80 f6		bra $9603			bra 	_PSXALoop
.960d						_PSXAExit:
.960d		7a		ply				ply
.960e		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/compare.asm

.960f						UnaryTrue:
.960f		fa		plx				plx
.9610						ReturnTrue:
.9610		a9 01		lda #$01			lda 	#1  						; set to 1
.9612		20 4a a5	jsr $a54a			jsr 	NSMSetByte
.9615		a9 80		lda #$80			lda 	#$80 						; set sign flag, so it is -1
.9617		95 50		sta $50,x			sta 	NSStatus,x
.9619		60		rts				rts
.961a						UnaryFalse:
.961a		fa		plx				plx
.961b						ReturnFalse:
.961b		4c 48 a5	jmp $a548			jmp 	NSMSetZero 					; set it all to zero
.961e						BinaryCompareEqual:
.961e		fa		plx				plx
.961f		20 5a 96	jsr $965a			jsr 	CompareBaseCode
.9622		c9 00		cmp #$00			cmp 	#0
.9624		f0 ea		beq $9610			beq 	ReturnTrue
.9626		80 f3		bra $961b			bra 	ReturnFalse
.9628						BinaryCompareLess:
.9628		fa		plx				plx
.9629		20 5a 96	jsr $965a			jsr 	CompareBaseCode
.962c		c9 ff		cmp #$ff			cmp 	#$FF
.962e		f0 e0		beq $9610			beq 	ReturnTrue
.9630		80 e9		bra $961b			bra 	ReturnFalse
.9632						BinaryCompareGreater:
.9632		fa		plx				plx
.9633		20 5a 96	jsr $965a			jsr 	CompareBaseCode
.9636		c9 01		cmp #$01			cmp 	#1
.9638		f0 d6		beq $9610			beq 	ReturnTrue
.963a		80 df		bra $961b			bra 	ReturnFalse
.963c						BinaryCompareNotEqual:
.963c		fa		plx				plx
.963d		20 5a 96	jsr $965a			jsr 	CompareBaseCode
.9640		c9 00		cmp #$00			cmp 	#0
.9642		d0 cc		bne $9610			bne 	ReturnTrue
.9644		80 d5		bra $961b			bra 	ReturnFalse
.9646						BinaryCompareLessEqual:
.9646		fa		plx				plx
.9647		20 5a 96	jsr $965a			jsr 	CompareBaseCode
.964a		c9 01		cmp #$01			cmp 	#1
.964c		d0 c2		bne $9610			bne 	ReturnTrue
.964e		80 cb		bra $961b			bra 	ReturnFalse
.9650						BinaryCompareGreaterEqual:
.9650		fa		plx				plx
.9651		20 5a 96	jsr $965a			jsr 	CompareBaseCode
.9654		c9 ff		cmp #$ff			cmp 	#$FF
.9656		d0 b8		bne $9610			bne 	ReturnTrue
.9658		80 c1		bra $961b			bra 	ReturnFalse
.965a						CompareBaseCode:
.965a		20 65 9d	jsr $9d65			jsr 	DereferenceTopTwo 			; make both values if references.
.965d		b5 50		lda $50,x			lda 	NSStatus,x 					; check if either is a string.
.965f		15 51		ora $51,x			ora 	NSStatus+1,x
.9661		29 10		and #$10			and 	#NSTString
.9663		d0 37		bne $969c			bne 	_CBCString 					; if so do string code, which will check if both.
.9665		b5 78		lda $78,x			lda 	NSExponent,x 				; check both are integers
.9667		15 79		ora $79,x			ora 	NSExponent+1,x
.9669		d0 34		bne $969f			bne 	_CBCFloat
.966b		b5 50		lda $50,x			lda 	NSStatus,x
.966d		15 51		ora $51,x			ora 	NSStatus+1,x
.966f		29 08		and #$08			and 	#NSTFloat
.9671		d0 2c		bne $969f			bne 	_CBCFloat
.9673		20 a2 96	jsr $96a2			jsr 	CompareFixMinusZero 		; fix up -0 just in cases.
.9676		e8		inx				inx
.9677		20 a2 96	jsr $96a2			jsr 	CompareFixMinusZero
.967a		ca		dex				dex
.967b		b5 50		lda $50,x			lda 	NSStatus,x 					; are the signs different ?
.967d		55 51		eor $51,x			eor 	NSStatus+1,x
.967f		10 0a		bpl $968b			bpl 	_CDCSameSign
.9681		b5 50		lda $50,x			lda 	NSStatus,x 					; if first one is -ve
.9683		30 14		bmi $9699			bmi 	_CBCLess 					; return $FF
.9685						_CBCGreater:
.9685		a9 01		lda #$01			lda 	#1
.9687		60		rts				rts
.9688						_CBCEqual:
.9688		a9 00		lda #$00			lda 	#0
.968a		60		rts				rts
.968b						_CDCSameSign:
.968b		20 b7 98	jsr $98b7			jsr 	SubTopTwoStack 				; unsigned subtract
.968e		20 6a a5	jsr $a56a			jsr 	NSMIsZero 					; or the mantissa together
.9691		f0 f5		beq $9688			beq 	_CBCEqual 					; -0 == 0
.9693		b5 70		lda $70,x			lda 	NSMantissa3,x 				; sign of the result. if +ve return $01 else return $FF
.9695		55 51		eor $51,x			eor 	NSStatus+1,x 				; however if both were -ve this is inverted
.9697		10 ec		bpl $9685			bpl 	_CBCGreater
.9699						_CBCLess:
.9699		a9 ff		lda #$ff			lda 	#$FF
.969b		60		rts				rts
.969c						_CBCString:
.969c		4c 28 98	jmp $9828			jmp 	CompareStrings
.969f						_CBCFloat:
.969f		4c 72 9b	jmp $9b72			jmp 	CompareFloat
.96a2						CompareFixMinusZero:
.96a2		20 6a a5	jsr $a56a			jsr 	NSMIsZero
.96a5		d0 02		bne $96a9			bne 	_CFXMZNotZero
.96a7		74 50		stz $50,x			stz 	NSStatus,x
.96a9						_CFXMZNotZero:
.96a9		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/concat.asm

.96aa						StringConcat:
.96aa		b5 50		lda $50,x			lda 	NSStatus,x 					; check both strings
.96ac		35 51		and $51,x			and 	NSStatus+1,x
.96ae		29 18		and #$18			and 	#NSBTypeMask
.96b0		c9 10		cmp #$10			cmp 	#NSTString
.96b2		d0 50		bne $9704			bne		_SCType
.96b4		64 38		stz $38				stz 	zTemp1 						; counting total length
.96b6		e8		inx				inx
.96b7		20 d5 96	jsr $96d5			jsr 	_SCSetupZ0 					; setup for second
.96ba		20 de 96	jsr $96de			jsr 	_SCLengthZ0 				; length for second
.96bd		ca		dex				dex
.96be		20 d5 96	jsr $96d5			jsr 	_SCSetupZ0 					; setup for first
.96c1		20 de 96	jsr $96de			jsr 	_SCLengthZ0 				; length for first
.96c4		a5 38		lda $38				lda 	zTemp1 						; allocate memory using total.
.96c6		20 17 b7	jsr $b717			jsr 	StringTempAllocate
.96c9		20 f5 96	jsr $96f5			jsr 	_SCCopy 					; copy first out, using zTemp0 from above
.96cc		e8		inx				inx
.96cd		20 d5 96	jsr $96d5			jsr 	_SCSetupZ0 					; copy second out
.96d0		20 f5 96	jsr $96f5			jsr 	_SCCopy
.96d3		ca		dex				dex
.96d4		60		rts				rts
.96d5						_SCSetupZ0:
.96d5		b5 58		lda $58,x			lda 	NSMantissa0,x
.96d7		85 36		sta $36				sta 	zTemp0
.96d9		b5 60		lda $60,x			lda 	NSMantissa1,x
.96db		85 37		sta $37				sta 	zTemp0+1
.96dd		60		rts				rts
.96de						_SCLengthZ0:
.96de		5a		phy				phy
.96df		a0 00		ldy #$00			ldy 	#0
.96e1						_SCLenLoop:
.96e1		b1 36		lda ($36),y			lda 	(zTemp0),y
.96e3		f0 0e		beq $96f3			beq 	_SCLExit
.96e5		c8		iny				iny
.96e6		e6 38		inc $38				inc 	zTemp1
.96e8		a5 38		lda $38				lda	 	zTemp1 						; check string too long.
.96ea		c9 fd		cmp #$fd			cmp 	#253
.96ec		d0 f3		bne $96e1			bne		_SCLenLoop
.96ee		a9 09		lda #$09		lda	#9
.96f0		4c a3 95	jmp $95a3		jmp	ErrorHandler
.96f3						_SCLExit:
.96f3		7a		ply				ply
.96f4		60		rts				rts
.96f5						_SCCopy:
.96f5		5a		phy				phy
.96f6		a0 00		ldy #$00			ldy 	#0
.96f8						_SCCopyLoop:
.96f8		b1 36		lda ($36),y			lda 	(zTemp0),y
.96fa		f0 06		beq $9702			beq 	_SCCExit
.96fc		20 50 b7	jsr $b750			jsr 	StringTempWrite
.96ff		c8		iny				iny
.9700		80 f6		bra $96f8			bra 	_SCCopyLoop
.9702						_SCCExit:
.9702		7a		ply				ply
.9703		60		rts				rts
.9704						_SCType:
.9704		4c d0 a6	jmp $a6d0			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/divide.asm

.9707						IntegerDivide:
.9707		fa		plx				plx
.9708		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.970a		15 51		ora $51,x			ora 	NSStatus+1,x
.970c		0a		asl a				asl 	a 							; shift reference bit into sign bit
.970d		0a		asl a				asl 	a
.970e		10 05		bpl $9715			bpl 	_NotRef
.9710		48		pha				pha
.9711		20 65 9d	jsr $9d65			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9714		68		pla				pla
.9715						_NotRef:
.9715		0a		asl a				asl 	a
.9716		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9718		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.971a		15 79		ora $79,x			ora 	NSExponent+1,x
.971c		f0 03		beq $9721			beq 	_IntegerCode 				; if clear, then we have two integers
.971e		4c d0 a6	jmp $a6d0			jmp 	TypeError 					; anything else, type mismatch.
.9721						_IntegerCode:
.9721		20 3b 97	jsr $973b			jsr 	CheckDivideZero 			; do div zero check
.9724		20 6d 97	jsr $976d			jsr 	Int32Divide 				; do the division
.9727		20 1e 98	jsr $981e			jsr 	CalculateSign 				; calculate result sign
.972a						NSMCopyPlusTwoToZero:
.972a		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.972c		95 58		sta $58,x			sta 	NSMantissa0,x
.972e		b5 62		lda $62,x			lda 	NSMantissa1+2,x
.9730		95 60		sta $60,x			sta 	NSMantissa1,x
.9732		b5 6a		lda $6a,x			lda 	NSMantissa2+2,x
.9734		95 68		sta $68,x			sta 	NSMantissa2,x
.9736		b5 72		lda $72,x			lda 	NSMantissa3+2,x
.9738		95 70		sta $70,x			sta 	NSMantissa3,x
.973a		60		rts				rts
.973b						CheckDivideZero:
.973b		e8		inx				inx
.973c		20 6a a5	jsr $a56a			jsr 	NSMIsZero
.973f		f0 02		beq $9743			beq 	_CDVError
.9741		ca		dex				dex
.9742		60		rts				rts
.9743						_CDVError:
.9743		a9 03		lda #$03		lda	#3
.9745		4c a3 95	jmp $95a3		jmp	ErrorHandler
.9748						IntegerModulus:
.9748		fa		plx				plx
.9749		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.974b		15 51		ora $51,x			ora 	NSStatus+1,x
.974d		0a		asl a				asl 	a 							; shift reference bit into sign bit
.974e		0a		asl a				asl 	a
.974f		10 05		bpl $9756			bpl 	_NotRef
.9751		48		pha				pha
.9752		20 65 9d	jsr $9d65			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9755		68		pla				pla
.9756						_NotRef:
.9756		0a		asl a				asl 	a
.9757		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9759		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.975b		15 79		ora $79,x			ora 	NSExponent+1,x
.975d		f0 03		beq $9762			beq 	_IntegerCode 				; if clear, then we have two integers
.975f		4c d0 a6	jmp $a6d0			jmp 	TypeError 					; anything else, type mismatch.
.9762						_IntegerCode:
.9762						IntegerModulusNoCheck:
.9762		20 3b 97	jsr $973b			jsr 	CheckDivideZero 			; do div zero check
.9765		20 6d 97	jsr $976d			jsr 	Int32Divide 				; do the division
.9768		16 50		asl $50,x			asl 	NSStatus,x 					; clear the sign bit.
.976a		56 50		lsr $50,x			lsr 	NSStatus,x
.976c		60		rts				rts
.976d						Int32Divide:
.976d		48		pha				pha 								; save AXY
.976e		5a		phy				phy
.976f		20 2b a5	jsr $a52b			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.9772		20 44 a5	jsr $a544			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.9775		a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.9777						_I32DivideLoop:
.9777		e8		inx				inx
.9778		e8		inx				inx
.9779		20 57 a5	jsr $a557			jsr 	NSMShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.977c		ca		dex				dex
.977d		ca		dex				dex
.977e		20 58 a5	jsr $a558			jsr 	NSMRotateLeft
.9781		20 ac 97	jsr $97ac			jsr 	DivideCheckSubtract 		; check if subtract possible
.9784		90 02		bcc $9788			bcc 	_I32DivideNoCarryIn
.9786		f6 5a		inc $5a,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.9788						_I32DivideNoCarryIn:
.9788		88		dey				dey 								; loop round till division completed.
.9789		d0 ec		bne $9777			bne 	_I32DivideLoop
.978b		7a		ply				ply 								; restore AXY and exit
.978c		68		pla				pla
.978d		60		rts				rts
.978e						Int32ShiftDivide:
.978e		48		pha				pha 								; save AY
.978f		5a		phy				phy
.9790		e8		inx				inx 								; clear S[X+2]
.9791		e8		inx				inx
.9792		20 48 a5	jsr $a548			jsr 	NSMSetZero
.9795		ca		dex				dex
.9796		ca		dex				dex
.9797		a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.9799						_I32SDLoop:
.9799		20 ac 97	jsr $97ac			jsr 	DivideCheckSubtract 		; check if subtract possible
.979c		e8		inx				inx
.979d		e8		inx				inx
.979e		20 58 a5	jsr $a558			jsr 	NSMRotateLeft				; shift 64 bit FPA left, rotating carry in
.97a1		ca		dex				dex
.97a2		ca		dex				dex
.97a3		20 58 a5	jsr $a558			jsr 	NSMRotateLeft
.97a6		88		dey				dey 	 							; do 31 times
.97a7		d0 f0		bne $9799			bne 	_I32SDLoop
.97a9		7a		ply				ply 								; restore AY and exit
.97aa		68		pla				pla
.97ab		60		rts				rts
.97ac						DivideCheckSubtract:
.97ac		20 b7 98	jsr $98b7			jsr 	SubTopTwoStack 				; subtract Stack[X+1] from Stack[X+0]
.97af		b0 04		bcs $97b5			bcs 	_DCSExit 					; if carry set, then could do, exit
.97b1		20 9d 98	jsr $989d			jsr 	AddTopTwoStack 				; add it back in
.97b4		18		clc				clc 								; and return False
.97b5						_DCSExit:
.97b5		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/multiply.asm

.97b6						MulInteger:
.97b6		fa		plx				plx
.97b7		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.97b9		15 51		ora $51,x			ora 	NSStatus+1,x
.97bb		0a		asl a				asl 	a 							; shift reference bit into sign bit
.97bc		0a		asl a				asl 	a
.97bd		10 05		bpl $97c4			bpl 	_NotRef
.97bf		48		pha				pha
.97c0		20 65 9d	jsr $9d65			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.97c3		68		pla				pla
.97c4						_NotRef:
.97c4		0a		asl a				asl 	a 							; put MSB of type into A:7
.97c5		30 09		bmi $97d0			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.97c7		b5 78		lda $78,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.97c9		15 79		ora $79,x			ora 	NSExponent+1,x
.97cb		f0 06		beq $97d3			beq 	_IntegerCode 				; if clear, then we have two integers
.97cd		4c 34 9c	jmp $9c34			jmp 	FloatingPointMultiply 							; otherwise at least one float.
.97d0						_StringData:
.97d0		4c da a6	jmp $a6da			jmp 	NotDoneError							; at least one string - don't know both are strings.
.97d3						_IntegerCode:
.97d3		20 e0 97	jsr $97e0			jsr 	MultiplyShort
.97d6		c9 00		cmp #$00			cmp 	#0
.97d8		f0 05		beq $97df			beq 	_MIExit
.97da		a9 04		lda #$04		lda	#4
.97dc		4c a3 95	jmp $95a3		jmp	ErrorHandler
.97df						_MIExit:
.97df		60		rts				rts
.97e0						MultiplyShort:
.97e0		5a		phy				phy 								; save Y
.97e1		20 2b a5	jsr $a52b			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.97e4		20 44 a5	jsr $a544			jsr 	NSMSetZeroMantissaOnly 		; set mantissa S[X] to zero
.97e7		a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.97e9						_I32MLoop:
.97e9		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.97eb		15 62		ora $62,x			ora 	NSMantissa1+2,x
.97ed		15 6a		ora $6a,x			ora 	NSMantissa2+2,x
.97ef		15 72		ora $72,x			ora 	NSMantissa3+2,x
.97f1		f0 25		beq $9818			beq 	_I32MExit 					; exit if zero
.97f3		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.97f5		29 01		and #$01			and 	#1
.97f7		f0 0d		beq $9806			beq 	_I32MNoAdd
.97f9		20 9d 98	jsr $989d			jsr 	AddTopTwoStack 				; if so add S[X+1] to S[X+0]
.97fc		b5 70		lda $70,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.97fe		10 06		bpl $9806			bpl 	_I32MNoAdd
.9800						_I32ShiftRight:
.9800		20 61 a5	jsr $a561			jsr 	NSMShiftRight 				; shift S[X] right
.9803		c8		iny				iny 								; increment shift count
.9804		80 09		bra $980f			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.9806						_I32MNoAdd:
.9806		34 71		bit $71,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.9808		70 f6		bvs $9800			bvs 	_I32ShiftRight 				; instead.
.980a		e8		inx				inx
.980b		20 57 a5	jsr $a557			jsr 	NSMShiftLeft 				; shift additive S[X+1] left
.980e		ca		dex				dex
.980f						_I32MShiftUpper:
.980f		e8		inx				inx 								; shift S[X+2] right
.9810		e8		inx				inx
.9811		20 61 a5	jsr $a561			jsr 	NSMShiftRight
.9814		ca		dex				dex
.9815		ca		dex				dex
.9816		80 d1		bra $97e9			bra 	_I32MLoop 					; try again.
.9818						_I32MExit:
.9818		20 1e 98	jsr $981e			jsr 	CalculateSign
.981b		98		tya				tya 								; shift in A
.981c		7a		ply				ply 								; restore Y and exit
.981d		60		rts				rts
.981e						CalculateSign:
.981e		b5 50		lda $50,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.9820		16 50		asl $50,x			asl 	NSStatus,x 					; shift result left
.9822		55 51		eor $51,x			eor 	NSStatus+1,x
.9824		0a		asl a				asl 	a 							; shift bit 7 into carry
.9825		76 50		ror $50,x			ror 	NSStatus,x 					; shift right into status byte.
.9827		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/scompare.asm

.9828						CompareStrings:
.9828		b5 50		lda $50,x			lda 	NSStatus,x 					; check both are strings
.982a		35 51		and $51,x			and 	NSStatus+1,x
.982c		29 10		and #$10			and 	#NSBIsString
.982e		f0 28		beq $9858			beq 	_CSTypeError
.9830		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy string addresses to zTemp0/1
.9832		85 36		sta $36				sta 	zTemp0
.9834		b5 60		lda $60,x			lda 	NSMantissa1,x
.9836		85 37		sta $37				sta 	zTemp0+1
.9838		b5 59		lda $59,x			lda 	NSMantissa0+1,x
.983a		85 38		sta $38				sta 	zTemp1
.983c		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.983e		85 39		sta $39				sta 	zTemp1+1
.9840		5a		phy				phy 								; save Y so we can access strings
.9841		a0 ff		ldy #$ff			ldy 	#$FF 						; -1 for pre increment.
.9843						_CSLoop:
.9843		c8		iny				iny
.9844		b1 36		lda ($36),y			lda 	(zTemp0),y 					; check if they are the same
.9846		d1 38		cmp ($38),y			cmp 	(zTemp1),y
.9848		d0 06		bne $9850			bne 	_CSDifferent
.984a		c9 00		cmp #$00			cmp 	#0 							; reached end ?
.984c		d0 f5		bne $9843			bne 	_CSLoop 					; still comparing
.984e						_CSExit:
.984e		7a		ply				ply 								; reached end, return zero in A from EOS
.984f		60		rts				rts
.9850						_CSDifferent:
.9850		a9 ff		lda #$ff			lda 	#255 						; if < return $FF
.9852		90 fa		bcc $984e			bcc		_CSExit
.9854		a9 01		lda #$01			lda 	#1 							; otherwise return 1.
.9856		80 f6		bra $984e			bra 	_CSExit
.9858						_CSTypeError:
.9858		4c d0 a6	jmp $a6d0			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/shifts.asm

.985b						ShiftLeft:
.985b		38		sec				sec 								; common code, carry determines which way.
.985c		80 01		bra $985f			bra 	ShiftMain
.985e						ShiftRight:
.985e		18		clc				clc
.985f						ShiftMain:
.985f		fa		plx				plx 								; restore X
.9860		08		php				php 								; save direction
.9861		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9863		15 51		ora $51,x			ora 	NSStatus+1,x
.9865		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9866		0a		asl a				asl 	a
.9867		10 05		bpl $986e			bpl 	_NotRef
.9869		48		pha				pha
.986a		20 65 9d	jsr $9d65			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.986d		68		pla				pla
.986e						_NotRef:
.986e		0a		asl a				asl 	a
.986f		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9871		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9873		15 79		ora $79,x			ora 	NSExponent+1,x
.9875		f0 03		beq $987a			beq 	_IntegerCode 				; if clear, then we have two integers
.9877		4c d0 a6	jmp $a6d0			jmp 	TypeError 					; anything else, type mismatch.
.987a						_IntegerCode:
.987a		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; check number < 32
.987c		29 e0		and #$e0			and 	#$E0
.987e		15 61		ora $61,x			ora 	NSMantissa1+1,x
.9880		15 69		ora $69,x			ora 	NSMantissa2+1,x
.9882		15 71		ora $71,x			ora 	NSMantissa3+1,x
.9884		d0 12		bne $9898			bne 	_SMExit0 					; if >= 32 it will always return zero.
.9886						_SMLoop:
.9886		d6 59		dec $59,x			dec 	NSMantissa0+1,x 			; predecrement, could do << 0
.9888		30 11		bmi $989b			bmi 	_SMExit 					; exit if done.
.988a		28		plp				plp 								; restore direction setting
.988b		08		php				php
.988c		90 05		bcc $9893			bcc 	_SMRight
.988e		20 57 a5	jsr $a557			jsr 	NSMShiftLeft 				; shift left if CS
.9891		80 f3		bra $9886			bra 	_SMLoop
.9893						_SMRight:
.9893		20 61 a5	jsr $a561			jsr 	NSMShiftRight 				; shift right if CC
.9896		80 ee		bra $9886			bra 	_SMLoop
.9898						_SMExit0:
.9898		20 48 a5	jsr $a548			jsr 	NSMSetZero 					; return zero.
.989b						_SMExit:
.989b		28		plp				plp 								; throw direction
.989c		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/simple.asm

.989d						AddTopTwoStack:
.989d		18		clc				clc
.989e		b5 58		lda $58,x			lda		NSMantissa0,x
.98a0		75 59		adc $59,x			adc 		NSMantissa0+1,x
.98a2		95 58		sta $58,x			sta 	NSMantissa0,x
.98a4		b5 60		lda $60,x			lda		NSMantissa1,x
.98a6		75 61		adc $61,x			adc 		NSMantissa1+1,x
.98a8		95 60		sta $60,x			sta 	NSMantissa1,x
.98aa		b5 68		lda $68,x			lda		NSMantissa2,x
.98ac		75 69		adc $69,x			adc 		NSMantissa2+1,x
.98ae		95 68		sta $68,x			sta 	NSMantissa2,x
.98b0		b5 70		lda $70,x			lda		NSMantissa3,x
.98b2		75 71		adc $71,x			adc 		NSMantissa3+1,x
.98b4		95 70		sta $70,x			sta 	NSMantissa3,x
.98b6		60		rts				rts
.98b7						SubTopTwoStack:
.98b7		38		sec				sec
.98b8		b5 58		lda $58,x			lda		NSMantissa0,x
.98ba		f5 59		sbc $59,x			sbc 		NSMantissa0+1,x
.98bc		95 58		sta $58,x			sta 	NSMantissa0,x
.98be		b5 60		lda $60,x			lda		NSMantissa1,x
.98c0		f5 61		sbc $61,x			sbc 		NSMantissa1+1,x
.98c2		95 60		sta $60,x			sta 	NSMantissa1,x
.98c4		b5 68		lda $68,x			lda		NSMantissa2,x
.98c6		f5 69		sbc $69,x			sbc 		NSMantissa2+1,x
.98c8		95 68		sta $68,x			sta 	NSMantissa2,x
.98ca		b5 70		lda $70,x			lda		NSMantissa3,x
.98cc		f5 71		sbc $71,x			sbc 		NSMantissa3+1,x
.98ce		95 70		sta $70,x			sta 	NSMantissa3,x
.98d0		60		rts				rts
.98d1						AddInteger:
.98d1		fa		plx				plx
.98d2		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.98d4		15 51		ora $51,x			ora 	NSStatus+1,x
.98d6		0a		asl a				asl 	a 							; shift reference bit into sign bit
.98d7		0a		asl a				asl 	a
.98d8		10 05		bpl $98df			bpl 	_NotRef
.98da		48		pha				pha
.98db		20 65 9d	jsr $9d65			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.98de		68		pla				pla
.98df						_NotRef:
.98df		0a		asl a				asl 	a 							; put MSB of type into A:7
.98e0		30 09		bmi $98eb			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.98e2		b5 78		lda $78,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.98e4		15 79		ora $79,x			ora 	NSExponent+1,x
.98e6		f0 06		beq $98ee			beq 	_IntegerCode 				; if clear, then we have two integers
.98e8		4c e4 9a	jmp $9ae4			jmp 	FloatingPointAdd 							; otherwise at least one float.
.98eb						_StringData:
.98eb		4c aa 96	jmp $96aa			jmp 	StringConcat							; at least one string - don't know both are strings.
.98ee						_IntegerCode:
.98ee						AddCode:
.98ee		b5 50		lda $50,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.98f0		55 51		eor $51,x			eor 	NSStatus+1,x
.98f2		10 a9		bpl $989d			bpl 	AddTopTwoStack
.98f4		20 b7 98	jsr $98b7			jsr 	SubTopTwoStack 				; do a physical subtraction
.98f7		34 70		bit $70,x			bit 	NSMantissa3,x 				; result is +ve, okay
.98f9		10 07		bpl $9902			bpl 	_AddExit
.98fb		b5 51		lda $51,x			lda 	NSStatus+1,x 				; sign is that of 2nd value
.98fd		95 50		sta $50,x			sta 	NSStatus,x
.98ff		20 11 a5	jsr $a511			jsr 	NSMNegateMantissa 			; negate the mantissa and exit
.9902						_AddExit:
.9902		20 6a a5	jsr $a56a			jsr 	NSMIsZero 					; check for -0
.9905		d0 02		bne $9909			bne 	_AddNonZero
.9907		74 50		stz $50,x			stz 	NSStatus,x
.9909						_AddNonZero:
.9909		60		rts				rts
.990a						SubInteger:
.990a		fa		plx				plx
.990b		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.990d		15 51		ora $51,x			ora 	NSStatus+1,x
.990f		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9910		0a		asl a				asl 	a
.9911		10 05		bpl $9918			bpl 	_NotRef
.9913		48		pha				pha
.9914		20 65 9d	jsr $9d65			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9917		68		pla				pla
.9918						_NotRef:
.9918		0a		asl a				asl 	a 							; put MSB of type into A:7
.9919		30 09		bmi $9924			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.991b		b5 78		lda $78,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.991d		15 79		ora $79,x			ora 	NSExponent+1,x
.991f		f0 06		beq $9927			beq 	_IntegerCode 				; if clear, then we have two integers
.9921		4c e9 9a	jmp $9ae9			jmp 	FloatingPointSub 							; otherwise at least one float.
.9924						_StringData:
.9924		4c da a6	jmp $a6da			jmp 	NotDoneError							; at least one string - don't know both are strings.
.9927						_IntegerCode:
.9927		b5 51		lda $51,x			lda 	NSStatus+1,x 				; negate the second value.
.9929		49 80		eor #$80			eor 	#$80
.992b		95 51		sta $51,x			sta 	NSStatus+1,x
.992d		80 bf		bra $98ee			bra 	AddCode 					; and do the same code as add.
.992f						AndInteger:
.992f		fa		plx				plx
.9930		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9932		15 51		ora $51,x			ora 	NSStatus+1,x
.9934		0a		asl a				asl 	a 							; shift reference bit into sign bit
.9935		0a		asl a				asl 	a
.9936		10 05		bpl $993d			bpl 	_NotRef
.9938		48		pha				pha
.9939		20 65 9d	jsr $9d65			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.993c		68		pla				pla
.993d						_NotRef:
.993d		0a		asl a				asl 	a
.993e		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9940		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9942		15 79		ora $79,x			ora 	NSExponent+1,x
.9944		f0 03		beq $9949			beq 	_IntegerCode 				; if clear, then we have two integers
.9946		4c d0 a6	jmp $a6d0			jmp 	TypeError 					; anything else, type mismatch.
.9949						_IntegerCode:
.9949		b5 58		lda $58,x			lda		NSMantissa0,x
.994b		35 59		and $59,x			and 		NSMantissa0+1,x
.994d		95 58		sta $58,x			sta 	NSMantissa0,x
.994f		b5 60		lda $60,x			lda		NSMantissa1,x
.9951		35 61		and $61,x			and 		NSMantissa1+1,x
.9953		95 60		sta $60,x			sta 	NSMantissa1,x
.9955		b5 68		lda $68,x			lda		NSMantissa2,x
.9957		35 69		and $69,x			and 		NSMantissa2+1,x
.9959		95 68		sta $68,x			sta 	NSMantissa2,x
.995b		b5 70		lda $70,x			lda		NSMantissa3,x
.995d		35 71		and $71,x			and 		NSMantissa3+1,x
.995f		95 70		sta $70,x			sta 	NSMantissa3,x
.9961		74 50		stz $50,x			stz	 	NSStatus,x 					; ignore sign.
.9963		60		rts				rts
.9964						OraInteger:
.9964		fa		plx				plx
.9965		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.9967		15 51		ora $51,x			ora 	NSStatus+1,x
.9969		0a		asl a				asl 	a 							; shift reference bit into sign bit
.996a		0a		asl a				asl 	a
.996b		10 05		bpl $9972			bpl 	_NotRef
.996d		48		pha				pha
.996e		20 65 9d	jsr $9d65			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9971		68		pla				pla
.9972						_NotRef:
.9972		0a		asl a				asl 	a
.9973		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9975		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9977		15 79		ora $79,x			ora 	NSExponent+1,x
.9979		f0 03		beq $997e			beq 	_IntegerCode 				; if clear, then we have two integers
.997b		4c d0 a6	jmp $a6d0			jmp 	TypeError 					; anything else, type mismatch.
.997e						_IntegerCode:
.997e		b5 58		lda $58,x			lda		NSMantissa0,x
.9980		15 59		ora $59,x			ora 		NSMantissa0+1,x
.9982		95 58		sta $58,x			sta 	NSMantissa0,x
.9984		b5 60		lda $60,x			lda		NSMantissa1,x
.9986		15 61		ora $61,x			ora 		NSMantissa1+1,x
.9988		95 60		sta $60,x			sta 	NSMantissa1,x
.998a		b5 68		lda $68,x			lda		NSMantissa2,x
.998c		15 69		ora $69,x			ora 		NSMantissa2+1,x
.998e		95 68		sta $68,x			sta 	NSMantissa2,x
.9990		b5 70		lda $70,x			lda		NSMantissa3,x
.9992		15 71		ora $71,x			ora 		NSMantissa3+1,x
.9994		95 70		sta $70,x			sta 	NSMantissa3,x
.9996		74 50		stz $50,x			stz	 	NSStatus,x 					; ignore sign.
.9998		60		rts				rts
.9999						EorInteger:
.9999		fa		plx				plx
.999a		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.999c		15 51		ora $51,x			ora 	NSStatus+1,x
.999e		0a		asl a				asl 	a 							; shift reference bit into sign bit
.999f		0a		asl a				asl 	a
.99a0		10 05		bpl $99a7			bpl 	_NotRef
.99a2		48		pha				pha
.99a3		20 65 9d	jsr $9d65			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.99a6		68		pla				pla
.99a7						_NotRef:
.99a7		0a		asl a				asl 	a
.99a8		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.99aa		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.99ac		15 79		ora $79,x			ora 	NSExponent+1,x
.99ae		f0 03		beq $99b3			beq 	_IntegerCode 				; if clear, then we have two integers
.99b0		4c d0 a6	jmp $a6d0			jmp 	TypeError 					; anything else, type mismatch.
.99b3						_IntegerCode:
.99b3		b5 58		lda $58,x			lda		NSMantissa0,x
.99b5		55 59		eor $59,x			eor 		NSMantissa0+1,x
.99b7		95 58		sta $58,x			sta 	NSMantissa0,x
.99b9		b5 60		lda $60,x			lda		NSMantissa1,x
.99bb		55 61		eor $61,x			eor 		NSMantissa1+1,x
.99bd		95 60		sta $60,x			sta 	NSMantissa1,x
.99bf		b5 68		lda $68,x			lda		NSMantissa2,x
.99c1		55 69		eor $69,x			eor 		NSMantissa2+1,x
.99c3		95 68		sta $68,x			sta 	NSMantissa2,x
.99c5		b5 70		lda $70,x			lda		NSMantissa3,x
.99c7		55 71		eor $71,x			eor 		NSMantissa3+1,x
.99c9		95 70		sta $70,x			sta 	NSMantissa3,x
.99cb		74 50		stz $50,x			stz	 	NSStatus,x 					; ignore sign.
.99cd		60		rts				rts
.99ce						WordIndirect:
.99ce		fa		plx				plx
.99cf		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.99d1		15 51		ora $51,x			ora 	NSStatus+1,x
.99d3		0a		asl a				asl 	a 							; shift reference bit into sign bit
.99d4		0a		asl a				asl 	a
.99d5		10 05		bpl $99dc			bpl 	_NotRef
.99d7		48		pha				pha
.99d8		20 65 9d	jsr $9d65			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.99db		68		pla				pla
.99dc						_NotRef:
.99dc		0a		asl a				asl 	a
.99dd		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.99df		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.99e1		15 79		ora $79,x			ora 	NSExponent+1,x
.99e3		f0 03		beq $99e8			beq 	_IntegerCode 				; if clear, then we have two integers
.99e5		4c d0 a6	jmp $a6d0			jmp 	TypeError 					; anything else, type mismatch.
.99e8						_IntegerCode:
.99e8		20 ee 98	jsr $98ee			jsr 	AddCode 					; add the two values
.99eb		a9 22		lda #$22			lda 	#NSBIsReference+2 			; make a 2 byte reference
.99ed		95 50		sta $50,x			sta 	NSStatus,x
.99ef		60		rts				rts
.99f0						ByteIndirect:
.99f0		fa		plx				plx
.99f1		b5 50		lda $50,x			lda 	NSStatus,x 					; OR the type data together
.99f3		15 51		ora $51,x			ora 	NSStatus+1,x
.99f5		0a		asl a				asl 	a 							; shift reference bit into sign bit
.99f6		0a		asl a				asl 	a
.99f7		10 05		bpl $99fe			bpl 	_NotRef
.99f9		48		pha				pha
.99fa		20 65 9d	jsr $9d65			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.99fd		68		pla				pla
.99fe						_NotRef:
.99fe		0a		asl a				asl 	a
.99ff		29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9a01		15 78		ora $78,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9a03		15 79		ora $79,x			ora 	NSExponent+1,x
.9a05		f0 03		beq $9a0a			beq 	_IntegerCode 				; if clear, then we have two integers
.9a07		4c d0 a6	jmp $a6d0			jmp 	TypeError 					; anything else, type mismatch.
.9a0a						_IntegerCode:
.9a0a		20 ee 98	jsr $98ee			jsr 	AddCode 					; add the two values
.9a0d		a9 21		lda #$21			lda 	#NSBIsReference+1 			; make a 1 byte reference
.9a0f		95 50		sta $50,x			sta 	NSStatus,x
.9a11		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/tostring.asm

.9a12						ConvertInt16:
.9a12		85 58		sta $58				sta 	NSMantissa0 				; set up as 32 bit conversion
.9a14		86 60		stx $60				stx 	NSMantissa1
.9a16		64 68		stz $68				stz 	NSMantissa2
.9a18		64 70		stz $70				stz 	NSMantissa3
.9a1a		64 50		stz $50				stz 	NSStatus 					; positive integer
.9a1c		a2 00		ldx #$00			ldx 	#0 							; stack level
.9a1e		a9 0a		lda #$0a			lda 	#10 						; base 10 decimal.
.9a20		80 00		bra $9a22			bra 	ConvertInt32
.9a22						ConvertInt32:
.9a22		5a		phy				phy
.9a23		a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.9a25		24 50		bit $50				bit 	NSStatus 					; output a - if not negative.
.9a27		10 08		bpl $9a31			bpl 	_CI32NotNeg
.9a29		48		pha				pha
.9a2a		a9 2d		lda #$2d			lda 	#'-'
.9a2c		99 27 06	sta $0627,y			sta 	numberBuffer,y
.9a2f		c8		iny				iny
.9a30		68		pla				pla
.9a31						_CI32NotNeg:
.9a31		20 3f 9a	jsr $9a3f			jsr 	_CI32DivideConvert 			; recursive conversion
.9a34		a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.9a36		99 27 06	sta $0627,y			sta 	numberBuffer,y
.9a39		7a		ply				ply
.9a3a		a2 06		ldx #$06			ldx 	#numberBuffer >> 8 			; return address in XA
.9a3c		a9 27		lda #$27			lda 	#numberBuffer & $FF
.9a3e		60		rts				rts
.9a3f						_CI32DivideConvert:
.9a3f		e8		inx				inx 								; write to next slot up
.9a40		20 4a a5	jsr $a54a			jsr 	NSMSetByte 		 			; write the base out.
.9a43		ca		dex				dex
.9a44		20 6d 97	jsr $976d			jsr 	Int32Divide 				; divide
.9a47		b5 58		lda $58,x			lda 	NSMantissa0,x 				; save remainder
.9a49		48		pha				pha
.9a4a		20 2a 97	jsr $972a			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.9a4d		20 6a a5	jsr $a56a			jsr 	NSMIsZero 					; is it zero ?
.9a50		f0 05		beq $9a57			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.9a52		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.9a54		20 3f 9a	jsr $9a3f			jsr 	_CI32DivideConvert 			; and recusrively call.
.9a57						_CI32NoRecurse:
.9a57		68		pla				pla 								; remainder
.9a58		c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII, allowing for hexadecimal.
.9a5a		90 02		bcc $9a5e			bcc 	_CI32NotHex
.9a5c		69 26		adc #$26			adc 	#6+32
.9a5e						_CI32NotHex:
.9a5e		69 30		adc #$30			adc 	#48
.9a60		99 27 06	sta $0627,y			sta 	numberBuffer,y 				; write out and exit
.9a63		c8		iny				iny
.9a64		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/expression.asm


;******  Processing file: ./common/expressions/../generated/precedence.dat

.9a65						PrecedenceLevel:
>9a65		04					.byte	 4	; $00 <<
>9a66		02					.byte	 2	; $01 <=
>9a67		02					.byte	 2	; $02 <>
>9a68		00					.byte	 0	; $03 !!3
>9a69		00					.byte	 0	; $04 ><
>9a6a		02					.byte	 2	; $05 >=
>9a6b		04					.byte	 4	; $06 >>
>9a6c		00					.byte	 0	; $07 !!7
>9a6d		00					.byte	 0	; $08 !!8
>9a6e		00					.byte	 0	; $09 !!9
>9a6f		00					.byte	 0	; $0a !!10
>9a70		00					.byte	 0	; $0b !!11
>9a71		00					.byte	 0	; $0c !!12
>9a72		00					.byte	 0	; $0d !!13
>9a73		00					.byte	 0	; $0e !!14
>9a74		00					.byte	 0	; $0f !!15
>9a75		00					.byte	 0	; $10 @
>9a76		00					.byte	 0	; $11 !!17
>9a77		00					.byte	 0	; $12 !!18
>9a78		00					.byte	 0	; $13 [
>9a79		04					.byte	 4	; $14 \
>9a7a		00					.byte	 0	; $15 ]
>9a7b		01					.byte	 1	; $16 ^
>9a7c		00					.byte	 0	; $17 _
>9a7d		00					.byte	 0	; $18 `
>9a7e		00					.byte	 0	; $19 !!25
>9a7f		00					.byte	 0	; $1a !!26
>9a80		00					.byte	 0	; $1b {
>9a81		01					.byte	 1	; $1c |
>9a82		00					.byte	 0	; $1d }
>9a83		00					.byte	 0	; $1e ~
>9a84		00					.byte	 0	; $1f [7m<7F>[m
>9a85		00					.byte	 0	; $20
>9a86		05					.byte	 5	; $21 !
>9a87		00					.byte	 0	; $22 "
>9a88		00					.byte	 0	; $23 #
>9a89		05					.byte	 5	; $24 $
>9a8a		04					.byte	 4	; $25 %
>9a8b		01					.byte	 1	; $26 &
>9a8c		00					.byte	 0	; $27 '
>9a8d		00					.byte	 0	; $28 (
>9a8e		00					.byte	 0	; $29 )
>9a8f		04					.byte	 4	; $2a *
>9a90		03					.byte	 3	; $2b +
>9a91		00					.byte	 0	; $2c ,
>9a92		03					.byte	 3	; $2d -
>9a93		00					.byte	 0	; $2e .
>9a94		04					.byte	 4	; $2f /
>9a95		00					.byte	 0	; $30 0
>9a96		00					.byte	 0	; $31 1
>9a97		00					.byte	 0	; $32 2
>9a98		00					.byte	 0	; $33 3
>9a99		00					.byte	 0	; $34 4
>9a9a		00					.byte	 0	; $35 5
>9a9b		00					.byte	 0	; $36 6
>9a9c		00					.byte	 0	; $37 7
>9a9d		00					.byte	 0	; $38 8
>9a9e		00					.byte	 0	; $39 9
>9a9f		00					.byte	 0	; $3a :
>9aa0		00					.byte	 0	; $3b ;
>9aa1		02					.byte	 2	; $3c <
>9aa2		02					.byte	 2	; $3d =
>9aa3		02					.byte	 2	; $3e >
>9aa4		05					.byte	 5	; $3f ?

;******  Return to file: ./common/expressions/expression.asm

.9aa5						EvaluateExpressionAt0:
.9aa5		a2 00		ldx #$00			ldx 	#0 							; bottom stack level
.9aa7						EvaluateExpression:
.9aa7		a9 00		lda #$00			lda 	#0 							; lowest precedence level
.9aa9						EvaluateExpressionAtPrecedence:
.9aa9		48		pha				pha 								; save precedence level
.9aaa		20 f1 9e	jsr $9ef1			jsr 	EvaluateTerm 				; evaluate term into level X.
.9aad		68		pla				pla 								; restore precedence level.
.9aae						_EXPRLoop:
.9aae		85 36		sta $36				sta 	zTemp0 						; save current precedence level.
.9ab0		b1 30		lda ($30),y			lda 	(codePtr),y
.9ab2		c9 40		cmp #$40			cmp		#$40 						; if >= $40 cannot be an operator
.9ab4		b0 25		bcs $9adb			bcs 	_EXPRExit
.9ab6		da		phx				phx 								; read the operator precedence
.9ab7		aa		tax				tax
.9ab8		bd 65 9a	lda $9a65,x			lda 	PrecedenceLevel,x
.9abb		fa		plx				plx
.9abc		c9 00		cmp #$00			cmp 	#0							; if zero exit (not an operator)
.9abe		f0 1b		beq $9adb			beq 	_EXPRExit
.9ac0		85 37		sta $37				sta 	zTemp0+1 					; save operator precedence level.
.9ac2		a5 36		lda $36				lda 	zTemp0 						; compare current precedence vs. operator precedence
.9ac4		c5 37		cmp $37				cmp 	zTemp0+1
.9ac6		b0 13		bcs $9adb			bcs		_EXPRExit 					; if current >= operator exit
.9ac8		48		pha				pha 								; save current precedence.
.9ac9		b1 30		lda ($30),y			lda 	(codePtr),y
.9acb		c8		iny				iny
.9acc		48		pha				pha
.9acd		a5 37		lda $37				lda 	zTemp0+1 					; get operator precedence level
.9acf		e8		inx				inx 								; work out the right hand side.
.9ad0		20 a9 9a	jsr $9aa9			jsr 	EvaluateExpressionAtPrecedence
.9ad3		ca		dex				dex
.9ad4		68		pla				pla 								; get operator, call the code.
.9ad5		20 de 9a	jsr $9ade			jsr 	_EXPRCaller
.9ad8		68		pla				pla 								; restore precedence level
.9ad9		80 d3		bra $9aae			bra 	_EXPRLoop 					; and go round.
.9adb						_EXPRExit:
.9adb		a5 36		lda $36				lda 	zTemp0 						; A = current precedence level.
.9add		60		rts				rts
.9ade						_EXPRCaller:
.9ade		da		phx				phx 								; save on stack, first thing is to restore it
.9adf		0a		asl a				asl 	a 							; double so can use vectors into X
.9ae0		aa		tax				tax
.9ae1		7c 3a 91	jmp ($913a,x)			jmp 	(VectorSetPunc,x) 			; and go to the code.

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/addsub.asm

.9ae4						FloatingPointAdd:
.9ae4		20 5a 9c	jsr $9c5a			jsr 	FloatPrepare 				; prepare for floats
.9ae7		80 09		bra $9af2			bra 	FloatAdd
.9ae9						FloatingPointSub:
.9ae9		20 5a 9c	jsr $9c5a			jsr 	FloatPrepare 				; prepare for floats
.9aec						FloatSubtract:
.9aec		b5 51		lda $51,x			lda 	NSStatus+1,x 				; negate FPB
.9aee		49 80		eor #$80			eor 	#$80
.9af0		95 51		sta $51,x			sta 	NSStatus+1,x				; and fall through.
.9af2						FloatAdd:
.9af2		48		pha				pha
.9af3		5a		phy				phy
.9af4		20 69 9c	jsr $9c69			jsr 	NSNormalise 				; normalise S[X]
.9af7		f0 51		beq $9b4a			beq 	_FAReturn1
.9af9		e8		inx				inx 								; normalise S[X+1]
.9afa		20 69 9c	jsr $9c69			jsr 	NSNormalise
.9afd		ca		dex				dex
.9afe		c9 00		cmp #$00			cmp 	#0
.9b00		f0 60		beq $9b62			beq 	_FAExit 					; if so, just return A
.9b02		b5 78		lda $78,x			lda 	NSExponent,x 				; are the exponents the same ?
.9b04		d5 79		cmp $79,x			cmp 	NSExponent+1,x
.9b06		f0 18		beq $9b20			beq 	_FAExponentsEqual
.9b08		b5 78		lda $78,x			lda 	NSExponent,x 				; work out the larger exponent
.9b0a		a8		tay				tay
.9b0b		38		sec				sec 								; do a signed comparison of the exponents.
.9b0c		f5 79		sbc $79,x			sbc 	NSExponent+1,x
.9b0e		50 02		bvc $9b12			bvc 	_FANoSignedChange
.9b10		49 80		eor #$80			eor 	#$80
.9b12						_FANoSignedChange:
.9b12		29 80		and #$80			and 	#$80
.9b14		10 02		bpl $9b18			bpl 	_FAHaveMax
.9b16		b4 79		ldy $79,x			ldy 	NSExponent+1,x
.9b18						_FAHaveMax:
.9b18		20 65 9b	jsr $9b65			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.9b1b		e8		inx				inx
.9b1c		20 65 9b	jsr $9b65			jsr 	_FAShiftToExponent
.9b1f		ca		dex				dex
.9b20						_FAExponentsEqual:
.9b20		b5 50		lda $50,x			lda 	NSStatus,x 					; are the signs the same
.9b22		55 51		eor $51,x			eor 	NSStatus+1,x
.9b24		30 0e		bmi $9b34			bmi 	_FADifferentSigns
.9b26		20 9d 98	jsr $989d			jsr 	AddTopTwoStack 				; do the add of the mantissae
.9b29		b5 70		lda $70,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.9b2b		10 35		bpl $9b62			bpl 	_FAExit 					; if no, we are done.
.9b2d		20 61 a5	jsr $a561			jsr 	NSMShiftRight 				; shift A right, renormalising it.
.9b30		f6 78		inc $78,x			inc 	NSExponent,x 				; bump the exponent and exit
.9b32		80 2e		bra $9b62			bra 	_FAExit
.9b34						_FADifferentSigns:
.9b34		20 b7 98	jsr $98b7			jsr 	SubTopTwoStack 				; subtract mantissa B from A
.9b37		b5 70		lda $70,x			lda 	NSMantissa3,x 				; is the result negative ?
.9b39		10 06		bpl $9b41			bpl 	_FACheckZero 				; if no, check for -0
.9b3b		20 0a a5	jsr $a50a			jsr 	NSMNegate 					; netate result
.9b3e		20 11 a5	jsr $a511			jsr 	NSMNegateMantissa 			; negate (2'c) the mantissa
.9b41						_FACheckZero:
.9b41		20 6a a5	jsr $a56a			jsr 	NSMIsZero	 				; check for -0
.9b44		d0 1c		bne $9b62			bne 	_FAExit
.9b46		74 50		stz $50,x			stz 	NSStatus,x
.9b48		80 18		bra $9b62			bra 	_FAExit
.9b4a						_FAReturn1:
.9b4a		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; called when S(X) is zero.
.9b4c		95 58		sta $58,x			sta 	NSMantissa0,x
.9b4e		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9b50		95 60		sta $60,x			sta 	NSMantissa1,x
.9b52		b5 69		lda $69,x			lda 	NSMantissa2+1,x
.9b54		95 68		sta $68,x			sta 	NSMantissa2,x
.9b56		b5 71		lda $71,x			lda 	NSMantissa3+1,x
.9b58		95 70		sta $70,x			sta 	NSMantissa3,x
.9b5a		b5 79		lda $79,x			lda 	NSExponent+1,x
.9b5c		95 78		sta $78,x			sta 	NSExponent,x
.9b5e		b5 51		lda $51,x			lda 	NSStatus+1,x
.9b60		95 50		sta $50,x			sta 	NSStatus,x
.9b62						_FAExit:
.9b62		7a		ply				ply
.9b63		68		pla				pla
.9b64		60		rts				rts
.9b65						_FAShiftToExponent:
.9b65						_FAShiftToExponent2:
.9b65		98		tya				tya 								; compare Y to exponent
.9b66		d5 78		cmp $78,x			cmp 	NSExponent,x 				; reached the exponent required ?
.9b68		f0 07		beq $9b71			beq 	_FASEExit 					; exit if so.
.9b6a		20 61 a5	jsr $a561			jsr 	NSMShiftRight	 			; shift the mantissa right
.9b6d		f6 78		inc $78,x			inc 	NSExponent,x 				; increment exponent
.9b6f		80 f4		bra $9b65			bra 	_FAShiftToExponent2
.9b71						_FASEExit:
.9b71		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/compare.asm

.9b72						CompareFloat:
.9b72		20 ec 9a	jsr $9aec			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.9b75		b5 60		lda $60,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.9b77		29 f8		and #$f8			and 	#$F8
.9b79		15 68		ora $68,x			ora 	NSMantissa2,x
.9b7b		15 70		ora $70,x			ora 	NSMantissa3,x
.9b7d		f0 08		beq $9b87			beq 	_FCExit 					; zero, so approximately identical
.9b7f		a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.9b81		34 50		bit $50,x			bit 	NSStatus,x
.9b83		10 02		bpl $9b87			bpl 	_FCExit
.9b85						_FCNegative:
.9b85		a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.9b87						_FCExit:
.9b87		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/divide.asm

.9b88						FDivideCommand:
.9b88		fa		plx				plx	 								; restore stack position
.9b89		20 5a 9c	jsr $9c5a			jsr 	FloatPrepare 				; prepare for floats
.9b8c						FloatDivide:
.9b8c		48		pha				pha
.9b8d		e8		inx				inx
.9b8e		20 69 9c	jsr $9c69			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.9b91		ca		dex				dex
.9b92		c9 00		cmp #$00			cmp 	#0
.9b94		f0 1d		beq $9bb3			beq 	_FDZero
.9b96		20 69 9c	jsr $9c69			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.9b99		f0 16		beq $9bb1			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.9b9b		20 8e 97	jsr $978e			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.9b9e		20 2a 97	jsr $972a			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.9ba1		20 69 9c	jsr $9c69			jsr		NSNormalise 				; renormalise
.9ba4		20 1e 98	jsr $981e			jsr 	CalculateSign 				; calculate result sign
.9ba7		b5 78		lda $78,x			lda 	NSExponent,x 				; calculate exponent
.9ba9		38		sec				sec
.9baa		f5 79		sbc $79,x			sbc 	NSExponent+1,x
.9bac		38		sec				sec
.9bad		e9 1e		sbc #$1e			sbc 	#30
.9baf		95 78		sta $78,x			sta 	NSExponent,x
.9bb1						_FDExit:
.9bb1		68		pla				pla
.9bb2		60		rts				rts
.9bb3						_FDZero:
.9bb3		a9 03		lda #$03		lda	#3
.9bb5		4c a3 95	jmp $95a3		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/fractional.asm

.9bb8						FloatFractionalPart:
.9bb8		5a		phy				phy
.9bb9		b5 50		lda $50,x			lda 	NSStatus,x 					; take absolute value
.9bbb		29 7f		and #$7f			and 	#$7F
.9bbd		95 50		sta $50,x			sta 	NSStatus,x
.9bbf		20 69 9c	jsr $9c69			jsr 	NSNormalise
.9bc2		b5 78		lda $78,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.9bc4		38		sec				sec
.9bc5		e9 e0		sbc #$e0			sbc 	#$E0
.9bc7		90 29		bcc $9bf2			bcc 	_FFPExit 					; already fractional
.9bc9		c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.9bcb		b0 22		bcs $9bef			bcs 	_FFPZero
.9bcd		a8		tay				tay 								; put count to do in Y
.9bce		b5 70		lda $70,x			lda 	NSMantissa3,x 				; do each in turn.
.9bd0		20 f4 9b	jsr $9bf4			jsr 	_FFPPartial
.9bd3		95 70		sta $70,x			sta 	NSMantissa3,x
.9bd5		b5 68		lda $68,x			lda 	NSMantissa2,x
.9bd7		20 f4 9b	jsr $9bf4			jsr 	_FFPPartial
.9bda		95 68		sta $68,x			sta 	NSMantissa2,x
.9bdc		b5 60		lda $60,x			lda 	NSMantissa1,x
.9bde		20 f4 9b	jsr $9bf4			jsr 	_FFPPartial
.9be1		95 60		sta $60,x			sta 	NSMantissa1,x
.9be3		b5 58		lda $58,x			lda 	NSMantissa0,x
.9be5		20 f4 9b	jsr $9bf4			jsr 	_FFPPartial
.9be8		95 58		sta $58,x			sta 	NSMantissa0,x
.9bea		20 6a a5	jsr $a56a			jsr 	NSMIsZero 					; zeroed check.
.9bed		d0 03		bne $9bf2			bne 	_FFPExit
.9bef						_FFPZero:
.9bef		20 48 a5	jsr $a548			jsr 	NSMSetZero
.9bf2						_FFPExit:
.9bf2		7a		ply				ply
.9bf3		60		rts				rts
.9bf4						_FFPPartial:
.9bf4		c0 00		cpy #$00			cpy 	#0 							; no more to do
.9bf6		f0 17		beq $9c0f			beq 	_FFFPPExit
.9bf8		c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.9bfa		b0 0c		bcs $9c08			bcs 	_FFFPPWholeByte
.9bfc		5a		phy				phy
.9bfd						_FFFPPLeft:
.9bfd		0a		asl a				asl 	a
.9bfe		88		dey				dey
.9bff		d0 fc		bne $9bfd			bne 	_FFFPPLeft
.9c01		7a		ply				ply
.9c02						_FFFPPRight:
.9c02		4a		lsr a				lsr 	a
.9c03		88		dey				dey
.9c04		d0 fc		bne $9c02			bne 	_FFFPPRight
.9c06		80 07		bra $9c0f			bra 	_FFFPPExit
.9c08						_FFFPPWholeByte:
.9c08		98		tya				tya 								; subtract 8 from count
.9c09		38		sec				sec
.9c0a		e9 08		sbc #$08			sbc 	#8
.9c0c		a8		tay				tay
.9c0d		a9 00		lda #$00			lda 	#0 							; and clear all
.9c0f						_FFFPPExit:
.9c0f		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/integer.asm

.9c10						FloatIntegerPart:
.9c10		48		pha				pha
.9c11		b5 78		lda $78,x			lda 	NSExponent,x 				; is it integer already ?
.9c13		f0 1d		beq $9c32			beq 	_FIPExit 					; if so do nothing
.9c15		20 6a a5	jsr $a56a			jsr 	NSMIsZero 					; is it zero ?
.9c18		f0 15		beq $9c2f			beq 	_FIPZero 					; if so return zero.
.9c1a		20 69 9c	jsr $9c69			jsr 	NSNormalise 				; normalise
.9c1d		f0 10		beq $9c2f			beq 	_FIPZero 					; normalised to zero, exit zero
.9c1f						_FIPShift:
.9c1f		b5 78		lda $78,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.9c21		10 07		bpl $9c2a			bpl 	_FIPCheckZero
.9c23		20 61 a5	jsr $a561			jsr 	NSMShiftRight 				; shift mantissa right
.9c26		f6 78		inc $78,x			inc 	NSExponent,x 				; bump exponent
.9c28		80 f5		bra $9c1f			bra 	_FIPShift
.9c2a						_FIPCheckZero:
.9c2a		20 6a a5	jsr $a56a			jsr 	NSMIsZero 					; avoid -0 problem
.9c2d		d0 03		bne $9c32			bne 	_FIPExit 					; set to zero if mantissa zero.
.9c2f						_FIPZero:
.9c2f		20 48 a5	jsr $a548			jsr 	NSMSetZero
.9c32						_FIPExit:
.9c32		68		pla				pla
.9c33		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/multiply.asm

.9c34						FloatingPointMultiply:
.9c34		20 5a 9c	jsr $9c5a			jsr 	FloatPrepare 				; prepare for floats
.9c37						FloatMultiply:
.9c37		48		pha				pha
.9c38		20 69 9c	jsr $9c69			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.9c3b		f0 18		beq $9c55			beq 	_FDExit 					; return zero if zero (e.g. zero*something)
.9c3d		e8		inx				inx
.9c3e		20 69 9c	jsr $9c69			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.9c41		ca		dex				dex
.9c42		c9 00		cmp #$00			cmp 	#0
.9c44		f0 0c		beq $9c52			beq 	_FDSetZero
.9c46		20 e0 97	jsr $97e0			jsr 	MultiplyShort 				; calculate the result.
.9c49		75 78		adc $78,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.9c4b		18		clc				clc
.9c4c		75 79		adc $79,x			adc 	NSExponent+1,x
.9c4e		95 78		sta $78,x			sta 	NSExponent,x
.9c50		80 03		bra $9c55			bra 	_FDExit
.9c52						_FDSetZero:
.9c52		20 48 a5	jsr $a548			jsr 	NSMSetZero 					; return 0
.9c55						_FDExit:
.9c55		20 69 9c	jsr $9c69			jsr 	NSNormalise 				; normalise the result
.9c58		68		pla				pla
.9c59		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/utility.asm

.9c5a						FloatPrepare:
.9c5a		20 65 9d	jsr $9d65			jsr 	DereferenceTopTwo 			; dereference the top two values
.9c5d		b5 50		lda $50,x			lda 	NSStatus,x 					; check ints/floats, either will do.
.9c5f		15 51		ora $51,x			ora 	NSStatus+1,x
.9c61		29 10		and #$10			and 	#NSBIsString
.9c63		d0 01		bne $9c66			bne 	_FDType
.9c65		60		rts				rts
.9c66						_FDType:
.9c66		4c d0 a6	jmp $a6d0			jmp 	TypeError
.9c69						NSNormalise:
.9c69		b5 50		lda $50,x			lda 	NSStatus,x 					; make float, keep sign
.9c6b		29 80		and #$80			and 	#$80
.9c6d		09 08		ora #$08			ora 	#NSTFloat
.9c6f		95 50		sta $50,x			sta 	NSStatus,x
.9c71		20 6a a5	jsr $a56a			jsr 	NSMIsZero 					; if zero exit
.9c74		d0 07		bne $9c7d			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.9c76		16 50		asl $50,x			asl 	NSStatus,x 					; clear the sign bit.
.9c78		76 50		ror $50,x			ror 	NSStatus,x 					; (no -0)
.9c7a		a9 00		lda #$00			lda 	#0 							; set Z flag
.9c7c		60		rts				rts
.9c7d						_NSNormaliseOptimise:
.9c7d		b5 70		lda $70,x			lda 	NSMantissa3,x 				; upper byte zero ?
.9c7f		d0 19		bne $9c9a			bne 	_NSNormaliseLoop
.9c81		b5 68		lda $68,x			lda 	NSMantissa2,x 				; byte normalise
.9c83		30 15		bmi $9c9a			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.9c85		95 70		sta $70,x			sta 	NSMantissa3,x
.9c87		b5 60		lda $60,x			lda 	NSMantissa1,x
.9c89		95 68		sta $68,x			sta 	NSMantissa2,x
.9c8b		b5 58		lda $58,x			lda 	NSMantissa0,x
.9c8d		95 60		sta $60,x			sta 	NSMantissa1,x
.9c8f		74 58		stz $58,x			stz 	NSMantissa0,x
.9c91		b5 78		lda $78,x			lda 	NSExponent,x
.9c93		38		sec				sec
.9c94		e9 08		sbc #$08			sbc 	#8
.9c96		95 78		sta $78,x			sta 	NSExponent,x
.9c98		80 e3		bra $9c7d			bra 	_NSNormaliseOptimise
.9c9a						_NSNormaliseLoop:
.9c9a		34 70		bit $70,x			bit 	NSMantissa3,x 				; bit 30 set ?
.9c9c		70 07		bvs $9ca5			bvs 	_NSNExit 					; exit if so with Z flag clear
.9c9e		20 57 a5	jsr $a557			jsr 	NSMShiftLeft 				; shift mantissa left
.9ca1		d6 78		dec $78,x			dec 	NSExponent,x 				; adjust exponent
.9ca3		80 f5		bra $9c9a			bra 	_NSNormaliseLoop
.9ca5						_NSNExit:
.9ca5		a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.9ca7		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignnumber.asm

.9ca8						AssignNumber:
.9ca8		5a		phy				phy
.9ca9		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy mantissa0/1 to zTemp0
.9cab		85 36		sta $36				sta 	zTemp0
.9cad		b5 60		lda $60,x			lda 	NSMantissa1,x
.9caf		85 37		sta $37				sta 	zTemp0+1
.9cb1		b5 50		lda $50,x			lda 	NSStatus,x 					; clear reference bits
.9cb3		29 df		and #$df			and 	#(NSBIsReference ^ $FF)
.9cb5		95 50		sta $50,x			sta 	NSStatus,x
.9cb7		29 18		and #$18			and 	#NSBTypeMask				; assigning to a float ?
.9cb9		c9 08		cmp #$08			cmp 	#NSTFloat
.9cbb		f0 24		beq $9ce1			beq 	_ANFloat
.9cbd		b5 79		lda $79,x			lda		NSExponent+1,x 				; is it a float
.9cbf		f0 03		beq $9cc4			beq		_ANNotFloat
.9cc1		4c cb a6	jmp $a6cb			jmp 	RangeError					; if it is, report an error.
.9cc4						_ANNotFloat:
.9cc4		b5 50		lda $50,x			lda 	NSStatus,x 					; check if byte/word reference.
.9cc6		29 03		and #$03			and 	#3
.9cc8		d0 05		bne $9ccf			bne 	_ANByteWord
.9cca		20 ec 9c	jsr $9cec			jsr 	_ANCopy4PackSign 			; copy all 4 bytes and sign
.9ccd		80 1b		bra $9cea			bra 	_ANExit
.9ccf						_ANByteWord:
.9ccf		48		pha				pha 								; save count
.9cd0		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; do byte
.9cd2		92 36		sta ($36)			sta 	(zTemp0)
.9cd4		68		pla				pla
.9cd5		c9 01		cmp #$01			cmp	 	#1
.9cd7		f0 11		beq $9cea			beq 	_ANExit
.9cd9		b5 61		lda $61,x			lda 	NSMantissa1+1,x 			; do word
.9cdb		a0 01		ldy #$01			ldy 	#1
.9cdd		91 36		sta ($36),y			sta 	(zTemp0),y
.9cdf		80 09		bra $9cea			bra 	_ANExit
.9ce1						_ANFloat:
.9ce1		20 ec 9c	jsr $9cec			jsr 	_ANCopy4PackSign 			; write all 4 bytes and packed sign
.9ce4		b5 79		lda $79,x			lda 	NSExponent+1,x 				; copy exponent to slot 4
.9ce6		a0 04		ldy #$04			ldy 	#4
.9ce8		91 36		sta ($36),y			sta 	(zTemp0),y
.9cea						_ANExit:
.9cea		7a		ply				ply
.9ceb		60		rts				rts
.9cec						_ANCopy4PackSign:
.9cec		a0 03		ldy #$03			ldy 	#3
.9cee		b5 51		lda $51,x			lda 	NSStatus+1,x 				; sign bit into status
.9cf0		29 80		and #$80			and 	#$80 						; put into high bit of mantissa 3
.9cf2		15 71		ora $71,x			ora 	NSMantissa3+1,x
.9cf4		91 36		sta ($36),y			sta 	(zTemp0),y
.9cf6		88		dey				dey
.9cf7		b5 69		lda $69,x			lda 	NSMantissa2+1,x
.9cf9		91 36		sta ($36),y			sta 	(zTemp0),y
.9cfb		88		dey				dey
.9cfc		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9cfe		91 36		sta ($36),y			sta 	(zTemp0),y
.9d00		88		dey				dey
.9d01		b5 59		lda $59,x			lda 	NSMantissa0+1,x
.9d03		91 36		sta ($36),y			sta 	(zTemp0),y
.9d05		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignstring.asm

.9d06						AssignString:
.9d06		5a		phy				phy
.9d07		b5 59		lda $59,x			lda 	NSMantissa0+1,x
.9d09		85 38		sta $38				sta 	zTemp1
.9d0b		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9d0d		85 39		sta $39				sta 	zTemp1+1
.9d0f		b5 58		lda $58,x			lda 	NSMantissa0,x
.9d11		85 36		sta $36				sta 	zTemp0
.9d13		b5 60		lda $60,x			lda 	NSMantissa1,x
.9d15		85 37		sta $37				sta 	zTemp0+1
.9d17		a0 01		ldy #$01			ldy 	#1 							; the high byte of the target address
.9d19		b1 36		lda ($36),y			lda 	(zTemp0),y
.9d1b		f0 23		beq $9d40			beq 	_ASNewStringRequired 		; if zero, a new string is required.
.9d1d		38		sec				sec 								; put Address-2 in zsTemp - this is the size/status/string record
.9d1e		b2 36		lda ($36)			lda 	(zTemp0) 					; of concreted strings
.9d20		e9 02		sbc #$02			sbc 	#2
.9d22		85 3c		sta $3c				sta 	zsTemp
.9d24		a0 01		ldy #$01			ldy 	#1
.9d26		b1 36		lda ($36),y			lda 	(zTemp0),y
.9d28		e9 00		sbc #$00			sbc 	#0
.9d2a		85 3d		sta $3d				sta 	zsTemp+1
.9d2c		a0 ff		ldy #$ff			ldy 	#$FF 						; get length of new string
.9d2e						_ASGetLength:
.9d2e		c8		iny				iny
.9d2f		b1 38		lda ($38),y			lda 	(zTemp1),y
.9d31		d0 fb		bne $9d2e			bne 	_ASGetLength
.9d33		98		tya				tya 								; is this length <= current length
.9d34		d2 3c		cmp ($3c)			cmp 	(zsTemp)
.9d36		90 1e		bcc $9d56			bcc 	_ASCopyString
.9d38		f0 1c		beq $9d56			beq 	_ASCopyString
.9d3a		a9 80		lda #$80			lda 	#$80 						; mark as unused.
.9d3c		a0 01		ldy #$01			ldy 	#1
.9d3e		91 3c		sta ($3c),y			sta 	(zsTemp),y
.9d40						_ASNewStringRequired:
.9d40		e8		inx				inx 								; concrete the new string.
.9d41		20 9a b6	jsr $b69a			jsr 	StringConcrete				; (breaks zTemp1/2, not zTemp0 and zsTemp)
.9d44		ca		dex				dex
.9d45		18		clc				clc
.9d46		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; copy that new address to the reference.
.9d48		69 02		adc #$02			adc 	#2 							; add two to point at the data.
.9d4a		92 36		sta ($36)			sta 	(zTemp0)
.9d4c		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.9d4e		69 00		adc #$00			adc 	#0
.9d50		a0 01		ldy #$01			ldy 	#1
.9d52		91 36		sta ($36),y			sta 	(zTemp0),y
.9d54		80 0d		bra $9d63			bra 	_ASExit
.9d56						_ASCopyString:
.9d56		a0 00		ldy #$00			ldy 	#0
.9d58						_ASCopyLoop:
.9d58		b1 38		lda ($38),y			lda 	(zTemp1),y
.9d5a		c8		iny				iny
.9d5b		c8		iny				iny
.9d5c		91 3c		sta ($3c),y			sta 	(zsTemp),y
.9d5e		88		dey				dey
.9d5f		c9 00		cmp #$00			cmp 	#0
.9d61		d0 f5		bne $9d58			bne 	_ASCopyLoop
.9d63						_ASExit:
.9d63		7a		ply				ply
.9d64		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/dereference.asm

.9d65						DereferenceTopTwo:
.9d65		e8		inx				inx
.9d66		20 6a 9d	jsr $9d6a			jsr 	Dereference 				; deref x+1
.9d69		ca		dex				dex  								; falls through to deref x
.9d6a						Dereference:
.9d6a		b5 50		lda $50,x			lda 	NSStatus,x 					; get the status byte
.9d6c		29 20		and #$20			and 	#NSBIsReference 			; is it a reference
.9d6e		f0 48		beq $9db8			beq 	_DRFExit 					; not a reference, so exit.
.9d70		5a		phy				phy
.9d71		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy address to dereference into zTemp0
.9d73		85 36		sta $36				sta 	zTemp0
.9d75		b5 60		lda $60,x			lda 	NSMantissa1,x
.9d77		85 37		sta $37				sta 	zTemp0+1
.9d79		74 60		stz $60,x			stz 	NSMantissa1,x 				; clear second byte.
.9d7b		b2 36		lda ($36)			lda 	(zTemp0) 					; do the first byte
.9d7d		95 58		sta $58,x			sta 	NSMantissa0,x
.9d7f		b5 50		lda $50,x			lda 	NSStatus,x 					; get status byte.
.9d81		29 18		and #$18			and 	#NSBTypeMask 				; what type is it ?
.9d83		c9 10		cmp #$10			cmp 	#NSTString 					; if string, dereference two
.9d85		f0 0e		beq $9d95			beq 	_DRFDereferenceTwo
.9d87		c9 08		cmp #$08			cmp 	#NSTFloat 					; if float, do full dereference.
.9d89		f0 2f		beq $9dba			beq 	_DRFFull
.9d8b		b5 50		lda $50,x			lda 	NSStatus,x 					; must be integer - how many bytes ?
.9d8d		29 03		and #$03			and 	#3
.9d8f		f0 29		beq $9dba			beq 	_DRFFull 					; the whole word
.9d91		c9 01		cmp #$01			cmp 	#1 							; is it 10 (e.g. 2 bytes)
.9d93		f0 06		beq $9d9b			beq		_DRFClear23 				; no, one byte, clear 2 & 3 and exit
.9d95						_DRFDereferenceTwo:
.9d95		a0 01		ldy #$01			ldy 	#1
.9d97		b1 36		lda ($36),y			lda 	(zTemp0),y
.9d99		95 60		sta $60,x			sta 	NSMantissa1,x
.9d9b						_DRFClear23:
.9d9b		74 68		stz $68,x			stz 	NSMantissa2,x 				; clear upper bytes, only read 1 or 2 bytes
.9d9d		74 70		stz $70,x			stz 	NSMantissa3,x
.9d9f		b5 50		lda $50,x			lda 	NSStatus,x 					; make it a value of that type.
.9da1		29 18		and #$18			and 	#NSBTypeMask
.9da3		95 50		sta $50,x			sta 	NSStatus,x 					; and fall through.
.9da5		c9 10		cmp #$10			cmp 	#NSTString  				; is it a string
.9da7		d0 0e		bne $9db7			bne 	_DRFNotString
.9da9		b5 58		lda $58,x			lda 	NSMantissa0,x 				; check address is zero
.9dab		15 60		ora $60,x			ora 	NSMantissa1,x
.9dad		d0 08		bne $9db7			bne 	_DRFNotString
.9daf		a9 b9		lda #$b9			lda 	#_DRFNullString & $FF 		; if so, return reference to ""
.9db1		95 58		sta $58,x			sta 	NSMantissa0,x
.9db3		a9 9d		lda #$9d			lda 	#_DRFNullString >> 8
.9db5		95 60		sta $60,x			sta 	NSMantissa1,x
.9db7						_DRFNotString
.9db7		7a		ply				ply 								; restore Y and exit
.9db8						_DRFExit:
.9db8		60		rts				rts
.9db9						_DRFNullString:
>9db9		00						.byte 	0
.9dba						_DRFFull:
.9dba		a0 01		ldy #$01			ldy 	#1 							; get remaining 3 bytes.
.9dbc		b1 36		lda ($36),y			lda 	(zTemp0),y
.9dbe		95 60		sta $60,x			sta 	NSMantissa1,x
.9dc0		c8		iny				iny
.9dc1		b1 36		lda ($36),y			lda 	(zTemp0),y
.9dc3		95 68		sta $68,x			sta 	NSMantissa2,x
.9dc5		c8		iny				iny
.9dc6		b1 36		lda ($36),y			lda 	(zTemp0),y
.9dc8		95 70		sta $70,x			sta 	NSMantissa3,x
.9dca		74 78		stz $78,x			stz 	NSExponent,x 				; clear exponent.
.9dcc		b5 50		lda $50,x			lda		NSStatus,x 					; see if type is integer
.9dce		29 18		and #$18			and 	#NSBTypeMask  				; type information only
.9dd0		95 50		sta $50,x			sta 	NSStatus,x 					; update it back.
.9dd2		f0 05		beq $9dd9			beq 	_DRFNoExponent
.9dd4		c8		iny				iny 								; if not, read the exponent as well.
.9dd5		b1 36		lda ($36),y			lda 	(zTemp0),y
.9dd7		95 78		sta $78,x			sta 	NSExponent,x
.9dd9						_DRFNoExponent:
.9dd9		b5 70		lda $70,x			lda 	NSMantissa3,x 				; is the most significant bit set ?
.9ddb		10 0a		bpl $9de7			bpl 	_DRFExit2 					; if not, then exit.
.9ddd		29 7f		and #$7f			and 	#$7F 						; clear that bit.
.9ddf		95 70		sta $70,x			sta 	NSMantissa3,x
.9de1		b5 50		lda $50,x			lda 	NSStatus,x 					; set the sign flag
.9de3		09 80		ora #$80			ora 	#NSBIsNegative
.9de5		95 50		sta $50,x			sta 	NSStatus,x
.9de7						_DRFExit2:
.9de7		7a		ply				ply
.9de8		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/number.asm

=1						ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2						ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3						ESTA_Decimal = 3 							; fractional part.
.9de9						EncodeNumberStart:
.9de9		38		sec				sec
.9dea		80 01		bra $9ded			bra 	EncodeNumberContinue+1
.9dec						EncodeNumberContinue:
.9dec		18		clc				clc
.9ded						EncodeNumber:
.9ded		08		php				php 								; save reset flag.
.9dee		c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.9df0		f0 12		beq $9e04			beq 	_ENIsOkay
.9df2		c9 30		cmp #$30			cmp 	#"0"
.9df4		90 04		bcc $9dfa			bcc 	_ENBadNumber
.9df6		c9 3a		cmp #$3a			cmp 	#"9"+1
.9df8		90 0a		bcc $9e04			bcc 	_ENIsOkay
.9dfa						_ENBadNumber:
.9dfa		28		plp				plp 								; throw saved reset
.9dfb		ad 05 04	lda $0405			lda 	encodeState 				; if in decimal mode, construct final number
.9dfe		c9 03		cmp #$03			cmp 	#ESTA_Decimal
.9e00		f0 7b		beq $9e7d			beq 	_ENConstructFinal
.9e02						_ENFail:
.9e02		18		clc				clc 								; not allowed
.9e03		60		rts				rts
.9e04						_ENIsOkay:
.9e04		28		plp				plp 								; are we restarting
.9e05		90 15		bcc $9e1c			bcc 	_ENNoRestart
.9e07						_ENStartEncode:
.9e07		c9 2e		cmp #$2e			cmp 	#'.'						; first is decimal place, go straight to that.
.9e09		f0 0c		beq $9e17			beq 	_ENFirstDP
.9e0b		29 0f		and #$0f			and 	#15 						; put digit in mantissa, initially a single digit constant
.9e0d		20 4a a5	jsr $a54a			jsr 	NSMSetByte 					; in single byte mode.
.9e10		a9 01		lda #$01			lda 	#ESTA_Low
.9e12						_ENExitChange:
.9e12		8d 05 04	sta $0405			sta 	encodeState 				; save new state
.9e15		38		sec				sec
.9e16		60		rts				rts
.9e17						_ENFirstDP:
.9e17		20 48 a5	jsr $a548			jsr 	NSMSetZero 					; clear integer part
.9e1a		80 3c		bra $9e58			bra 	_ESTASwitchFloat			; go straight to float and exi
.9e1c						_ENNoRestart:
.9e1c		48		pha				pha 								; save digit or DP on stack.
.9e1d		ad 05 04	lda $0405			lda 	encodeState 				; get current state
.9e20		c9 01		cmp #$01			cmp 	#ESTA_Low
.9e22		f0 09		beq $9e2d			beq  	_ESTALowState
.9e24		c9 02		cmp #$02			cmp 	#ESTA_High
.9e26		f0 26		beq $9e4e			beq 	_ESTAHighState
.9e28		c9 03		cmp #$03			cmp 	#ESTA_Decimal
.9e2a		f0 38		beq $9e64			beq 	_ESTADecimalState
>9e2c		db						.byte 	$DB 						; causes a break in the emulator
.9e2d						_ESTALowState:
.9e2d		68		pla				pla 								; get value back
.9e2e		c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.9e30		f0 26		beq $9e58			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.9e32		29 0f		and #$0f			and 	#15 						; make digit
.9e34		8d 06 04	sta $0406			sta 	digitTemp 					; save it.
.9e37		b5 58		lda $58,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.9e39		0a		asl a				asl 	a
.9e3a		0a		asl a				asl 	a
.9e3b		75 58		adc $58,x			adc 	NSMantissa0,x
.9e3d		0a		asl a				asl 	a
.9e3e		6d 06 04	adc $0406			adc 	digitTemp
.9e41		95 58		sta $58,x			sta 	NSMantissa0,x
.9e43		c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.9e45		90 05		bcc $9e4c			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.9e47		a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.9e49		8d 05 04	sta $0405			sta 	encodeState
.9e4c						_ESTANoSwitch:
.9e4c		38		sec				sec
.9e4d		60		rts				rts
.9e4e						_ESTAHighState:
.9e4e		68		pla				pla 								; get value back
.9e4f		c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.9e51		f0 05		beq $9e58			beq 	_ESTASwitchFloat
.9e53		20 b1 9e	jsr $9eb1			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.9e56		38		sec				sec
.9e57		60		rts				rts
.9e58						_ESTASwitchFloat:
.9e58		9c 07 04	stz $0407			stz 	decimalCount 				; reset the count of digits - we divide by 10^n at the end.
.9e5b		e8		inx				inx 								; zero the decimal additive.
.9e5c		20 48 a5	jsr $a548			jsr 	NSMSetZero
.9e5f		ca		dex				dex
.9e60		a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.9e62		80 ae		bra $9e12			bra 	_ENExitChange
.9e64						_ESTADecimalState:
.9e64		68		pla				pla 								; digit.
.9e65		c9 2e		cmp #$2e			cmp 	#"." 						; fail on 2nd decimal point.
.9e67		f0 99		beq $9e02			beq 	_ENFail
.9e69		e8		inx				inx 								; put digit into fractional part of X+1
.9e6a		20 b1 9e	jsr $9eb1			jsr 	ESTAShiftDigitIntoMantissa
.9e6d		ca		dex				dex
.9e6e		ee 07 04	inc $0407			inc 	decimalCount 				; bump the count of decimals
.9e71		ad 07 04	lda $0407			lda 	decimalCount 				; too many decimal digits.
.9e74		c9 0b		cmp #$0b			cmp 	#11
.9e76		f0 02		beq $9e7a			beq 	_ESTADSFail
.9e78		38		sec				sec
.9e79		60		rts				rts
.9e7a						_ESTADSFail:
.9e7a		4c cb a6	jmp $a6cb			jmp 	RangeError
.9e7d						_ENConstructFinal:
.9e7d		ad 07 04	lda $0407			lda 	decimalCount 				; get decimal count
.9e80		f0 2d		beq $9eaf			beq 	_ENCFExit 					; no decimals
.9e82		5a		phy				phy
.9e83		0a		asl a				asl 	a 							; x 4 and CLC
.9e84		0a		asl a				asl 	a
.9e85		6d 07 04	adc $0407			adc 	decimalCount
.9e88		a8		tay				tay
.9e89		b9 8a a6	lda $a68a,y			lda 	DecimalScalarTable-5,y 		; copy decimal scalar to X+2
.9e8c		95 5a		sta $5a,x			sta 	NSMantissa0+2,x  			; this is 10^-n
.9e8e		b9 8b a6	lda $a68b,y			lda 	DecimalScalarTable-5+1,y
.9e91		95 62		sta $62,x			sta 	NSMantissa1+2,x
.9e93		b9 8c a6	lda $a68c,y			lda 	DecimalScalarTable-5+2,y
.9e96		95 6a		sta $6a,x			sta 	NSMantissa2+2,x
.9e98		b9 8d a6	lda $a68d,y			lda 	DecimalScalarTable-5+3,y
.9e9b		95 72		sta $72,x			sta 	NSMantissa3+2,x
.9e9d		b9 8e a6	lda $a68e,y			lda 	DecimalScalarTable-5+4,y
.9ea0		95 7a		sta $7a,x			sta 	NSExponent+2,x
.9ea2		a9 08		lda #$08			lda 	#NSTFloat
.9ea4		95 52		sta $52,x			sta 	NSStatus+2,x
.9ea6		7a		ply				ply
.9ea7		e8		inx				inx 								; multiply decimal const by decimal scalar
.9ea8		20 37 9c	jsr $9c37			jsr 	FloatMultiply
.9eab		ca		dex				dex
.9eac		20 f2 9a	jsr $9af2			jsr 	FloatAdd 					; add to integer part.
.9eaf						_ENCFExit:
.9eaf		18		clc				clc 								; reject the digit.
.9eb0		60		rts				rts
.9eb1						ESTAShiftDigitIntoMantissa:
.9eb1		29 0f		and #$0f			and 	#15 						; save digit
.9eb3		48		pha				pha
.9eb4		b5 70		lda $70,x			lda 	NSMantissa3,x 				; push mantissa on stack
.9eb6		48		pha				pha
.9eb7		b5 68		lda $68,x			lda 	NSMantissa2,x
.9eb9		48		pha				pha
.9eba		b5 60		lda $60,x			lda 	NSMantissa1,x
.9ebc		48		pha				pha
.9ebd		b5 58		lda $58,x			lda 	NSMantissa0,x
.9ebf		48		pha				pha
.9ec0		20 57 a5	jsr $a557			jsr 	NSMShiftLeft 				; x 2
.9ec3		20 57 a5	jsr $a557			jsr 	NSMShiftLeft 				; x 4
.9ec6		18		clc				clc 								; pop mantissa and add
.9ec7		68		pla				pla
.9ec8		75 58		adc $58,x			adc 	NSMantissa0,x
.9eca		95 58		sta $58,x			sta 	NSMantissa0,x
.9ecc		68		pla				pla
.9ecd		75 60		adc $60,x			adc 	NSMantissa1,x
.9ecf		95 60		sta $60,x			sta 	NSMantissa1,x
.9ed1		68		pla				pla
.9ed2		75 68		adc $68,x			adc 	NSMantissa2,x
.9ed4		95 68		sta $68,x			sta 	NSMantissa2,x
.9ed6		68		pla				pla
.9ed7		75 70		adc $70,x			adc 	NSMantissa3,x
.9ed9		95 70		sta $70,x			sta 	NSMantissa3,x 				; x 5
.9edb		20 57 a5	jsr $a557			jsr 	NSMShiftLeft 				; x 10
.9ede		68		pla				pla 								; add digit
.9edf		18		clc				clc
.9ee0		75 58		adc $58,x			adc 	NSMantissa0,x
.9ee2		95 58		sta $58,x			sta 	NSMantissa0,x
.9ee4		90 0a		bcc $9ef0			bcc 	_ESTASDExit
.9ee6		f6 60		inc $60,x			inc 	NSMantissa1,x
.9ee8		d0 06		bne $9ef0			bne 	_ESTASDExit
.9eea		f6 68		inc $68,x			inc 	NSMantissa2,x
.9eec		d0 02		bne $9ef0			bne 	_ESTASDExit
.9eee		f6 70		inc $70,x			inc 	NSMantissa3,x
.9ef0						_ESTASDExit:
.9ef0		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/term.asm

.9ef1						EvaluateTerm:
.9ef1		b1 30		lda ($30),y			lda 	(codePtr),y
.9ef3		30 18		bmi $9f0d			bmi 	_ETCheckUnary 				; unary function ? (text ones)
.9ef5		c9 40		cmp #$40			cmp 	#$40 						; 40-7F => identifier reference
.9ef7		b0 6c		bcs $9f65			bcs 	_ETVariable
.9ef9		c9 30		cmp #$30			cmp 	#'0' 						; is it a number
.9efb		90 6b		bcc $9f68			bcc 	_ETPuncUnary 				; if not it might be a punctuation unary.
.9efd		c9 3a		cmp #$3a			cmp 	#'9'+1
.9eff		b0 67		bcs $9f68			bcs 	_ETPuncUnary
.9f01		20 e9 9d	jsr $9de9			jsr 	EncodeNumberStart 			; can't fail as it's 0-9 !
.9f04						_ETNumber:
.9f04		c8		iny				iny 								; keep encoding until we have the numbers
.9f05		b1 30		lda ($30),y			lda 	(codePtr),y
.9f07		20 ec 9d	jsr $9dec			jsr 	EncodeNumberContinue
.9f0a		b0 f8		bcs $9f04			bcs 	_ETNumber 					; go back if accepted.
.9f0c		60		rts				rts
.9f0d						_ETCheckUnary:
.9f0d		c9 ff		cmp #$ff			cmp 	#KWC_STRING 				; string token
.9f0f		f0 3f		beq $9f50			beq 	_ETString
.9f11		c9 fe		cmp #$fe			cmp 	#KWC_HEXCONST 				; hex constant.
.9f13		f0 12		beq $9f27			beq 	_ETHexConstant
.9f15		c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; check it actually is a unary function
.9f17		90 0b		bcc $9f24			bcc 	_ETSyntaxError
.9f19		c9 aa		cmp #$aa			cmp 	#KWC_LAST_UNARY+1
.9f1b		b0 07		bcs $9f24			bcs 	_ETSyntaxError
.9f1d		da		phx				phx 								; push X on the stack
.9f1e		0a		asl a				asl 	a 							; put vector x 2 into X
.9f1f		aa		tax				tax
.9f20		c8		iny				iny 								; consume unary function token
.9f21		7c ba 91	jmp ($91ba,x)			jmp 	(VectorSet0,x) 				; and do it.
.9f24						_ETSyntaxError:
.9f24		4c c6 a6	jmp $a6c6			jmp 	SyntaxError
.9f27						_ETHexConstant:
.9f27		c8		iny				iny 								; skip #
.9f28		c8		iny				iny 								; skip count
.9f29		20 48 a5	jsr $a548			jsr 	NSMSetZero 					; clear result
.9f2c						_ETHLoop:
.9f2c		b1 30		lda ($30),y			lda 	(codePtr),y
.9f2e		c8		iny				iny 								; and consume
.9f2f		c9 00		cmp #$00			cmp 	#0 							; exit if zero
.9f31		f0 1c		beq $9f4f			beq 	_ETHExit
.9f33		48		pha				pha 								; save on stack.
.9f34		20 57 a5	jsr $a557			jsr 	NSMShiftLeft 				; x 2
.9f37		20 57 a5	jsr $a557			jsr 	NSMShiftLeft 				; x 4
.9f3a		20 57 a5	jsr $a557			jsr 	NSMShiftLeft 				; x 8
.9f3d		20 57 a5	jsr $a557			jsr 	NSMShiftLeft 				; x 16
.9f40		68		pla				pla 								; ASCII
.9f41		c9 41		cmp #$41			cmp 	#'A'
.9f43		90 02		bcc $9f47			bcc 	_ETHNotChar
.9f45		e9 07		sbc #$07			sbc 	#7
.9f47						_ETHNotChar:
.9f47		29 0f		and #$0f			and 	#15 						; digit now
.9f49		15 58		ora $58,x			ora 	NSMantissa0,x 				; put in LS Nibble
.9f4b		95 58		sta $58,x			sta 	NSMantissa0,x
.9f4d		80 dd		bra $9f2c			bra 	_ETHLoop 					; go round.
.9f4f						_ETHExit:
.9f4f		60		rts				rts
.9f50						_ETString:
.9f50		c8		iny				iny 								; look at length
.9f51		b1 30		lda ($30),y			lda 	(codePtr),y
.9f53		48		pha				pha
.9f54		c8		iny				iny 								; first character
.9f55		20 c2 ac	jsr $acc2			jsr 	MemoryInline 				; put address of string at (code-Ptr),y on stack
.9f58		68		pla				pla 								; restore count and save
.9f59		85 36		sta $36				sta 	zTemp0
.9f5b		98		tya				tya 								; add length to Y to skip it.
.9f5c		18		clc				clc
.9f5d		65 36		adc $36				adc 	zTemp0
.9f5f		a8		tay				tay
.9f60		a9 10		lda #$10			lda 	#NSTString 					; mark as string
.9f62		95 50		sta $50,x			sta 	NSStatus,x
.9f64		60		rts				rts
.9f65						_ETVariable:
.9f65		4c ba 9f	jmp $9fba			jmp 	VariableHandler
.9f68						_ETPuncUnary:
.9f68		c8		iny				iny 								; consume the unary character
.9f69		c9 2d		cmp #$2d			cmp 	#KWD_MINUS 					; unary minus
.9f6b		f0 2b		beq $9f98			beq 	_ETUnaryNegate
.9f6d		c9 10		cmp #$10			cmp 	#KWD_AT 					; @ reference -> constant
.9f6f		f0 36		beq $9fa7			beq 	_ETDereference
.9f71		c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; parenthesis
.9f73		f0 3e		beq $9fb3			beq 	_ETParenthesis
.9f75		64 36		stz $36				stz 	zTemp0 						; zTemp0 is the indirection level.
.9f77		c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; byte indirection (0) ?
.9f79		f0 06		beq $9f81			beq 	_ETIndirection
.9f7b		e6 36		inc $36				inc 	zTemp0
.9f7d		c9 21		cmp #$21			cmp 	#KWD_PLING					; word indirection (1) \
.9f7f		d0 a3		bne $9f24			bne 	_ETSyntaxError
.9f81						_ETIndirection:
.9f81		a5 36		lda $36				lda 	zTemp0 						; push indirection amount (0-1) => (1-2) on the stack
.9f83		1a		inc a				inc 	a
.9f84		48		pha				pha
.9f85		20 f1 9e	jsr $9ef1			jsr 	EvaluateTerm				; evaluate the term
.9f88		20 6a 9d	jsr $9d6a			jsr 	Dereference 				; dereference it.
.9f8b		b5 50		lda $50,x			lda 	NSStatus,x 					; must be a +ve integer.
.9f8d		d0 06		bne $9f95			bne 	_ETTypeMismatch
.9f8f		68		pla				pla 								; indirection 1-2
.9f90		09 20		ora #$20			ora 	#NSBIsReference 			; make it a reference.
.9f92		95 50		sta $50,x			sta 	NSStatus,x
.9f94		60		rts				rts
.9f95						_ETTypeMismatch:
.9f95		4c d0 a6	jmp $a6d0			jmp 	TypeError
.9f98						_ETUnaryNegate:
.9f98		20 f1 9e	jsr $9ef1			jsr 	EvaluateTerm				; evaluate the term
.9f9b		20 6a 9d	jsr $9d6a			jsr 	Dereference 				; dereference it.
.9f9e		b5 50		lda $50,x			lda 	NSStatus,x 					; must be a number
.9fa0		29 10		and #$10			and 	#NSTString
.9fa2		d0 f1		bne $9f95			bne 	_ETTypeMismatch
.9fa4		4c 0a a5	jmp $a50a			jmp 	NSMNegate  					; just toggles the sign bit.
.9fa7						_ETDereference:
.9fa7		20 f1 9e	jsr $9ef1			jsr 	EvaluateTerm				; evaluate the term
.9faa		b5 50		lda $50,x			lda 	NSStatus,x 					; must be a reference
.9fac		29 20		and #$20			and 	#NSBIsReference
.9fae		f0 e5		beq $9f95			beq 	_ETTypeMismatch
.9fb0		74 50		stz $50,x			stz 	NSStatus,x 					; make it an integer address
.9fb2		60		rts				rts
.9fb3						_ETParenthesis:
.9fb3		20 a7 9a	jsr $9aa7			jsr 	EvaluateExpression 			; evaluate here, from lowest precedence
.9fb6		20 8a 95	jsr $958a			jsr 	CheckRightBracket 			; check for )
.9fb9		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/variable.asm

.9fba						VariableHandler:
.9fba		b1 30		lda ($30),y			lda 	(codePtr),y
.9fbc		18		clc				clc
.9fbd		69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.9fbf		85 37		sta $37				sta 	zTemp0+1
.9fc1		c8		iny				iny
.9fc2		b1 30		lda ($30),y			lda 	(codePtr),y
.9fc4		85 36		sta $36				sta 	zTemp0
.9fc6		c8		iny				iny
.9fc7		18		clc				clc									; copy variable address+3 to mantissa
.9fc8		69 03		adc #$03			adc 	#3 							; this is the address of the data.
.9fca		95 58		sta $58,x			sta 	NSMantissa0,x
.9fcc		a5 37		lda $37				lda 	zTemp0+1
.9fce		69 00		adc #$00			adc 	#0
.9fd0		95 60		sta $60,x			sta 	NSMantissa1,x
.9fd2		74 68		stz $68,x			stz 	NSMantissa2,x
.9fd4		74 70		stz $70,x			stz 	NSMantissa3,x
.9fd6		74 78		stz $78,x			stz 	NSExponent,x
.9fd8		5a		phy				phy
.9fd9		a0 02		ldy #$02			ldy 	#2 							; read type
.9fdb		b1 36		lda ($36),y			lda 	(zTemp0),y
.9fdd		7a		ply				ply
.9fde		29 1c		and #$1c			and 	#NSBTypeMask+NSBIsArray 	; get type information
.9fe0		09 20		ora #$20			ora 	#NSBIsReference 			; make a reference.
.9fe2		95 50		sta $50,x			sta 	NSStatus,x
.9fe4		29 04		and #$04			and 	#NSBIsArray
.9fe6		d0 01		bne $9fe9			bne 	_VHArray
.9fe8		60		rts				rts
.9fe9						_VHArray:
.9fe9		e8		inx				inx
.9fea		20 e3 a4	jsr $a4e3			jsr 	Evaluate8BitInteger 		; get the 1st index.
.9fed		a9 ff		lda #$ff			lda 	#$FF 						; set Status of X+2 to a duff value so we know if we picked it up.
.9fef		95 51		sta $51,x			sta 	NSStatus+1,x
.9ff1		b1 30		lda ($30),y			lda 	(codePtr),y
.9ff3		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.9ff5		d0 06		bne $9ffd			bne 	_VHNoSecondIndex
.9ff7		c8		iny				iny 								; skip the comma
.9ff8		e8		inx				inx
.9ff9		20 e3 a4	jsr $a4e3			jsr 	Evaluate8BitInteger 		; get the 2nd index.
.9ffc		ca		dex				dex
.9ffd						_VHNoSecondIndex:
.9ffd		ca		dex				dex 								; set X back.
.9ffe		20 8a 95	jsr $958a			jsr 	CheckRightBracket 			; and check the right bracket.
.a001		5a		phy				phy 								; save position
.a002		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy record address to zaTemp (moved 6/12/22)
.a004		85 3e		sta $3e				sta 	zaTemp
.a006		b5 60		lda $60,x			lda 	NSMantissa1,x
.a008		85 3f		sta $3f				sta 	zaTemp+1
.a00a		a0 02		ldy #$02			ldy 	#2 							; check first index is not-zero, e.g. array defined
.a00c		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a00e		f0 5d		beq $a06d			beq 	_VHBadArray
.a010		a0 03		ldy #$03			ldy 	#3 							; get the second index - which is 0 if there is one index.
.a012		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a014		f0 02		beq $a018			beq 	_VHHas2Mask
.a016		a9 ff		lda #$ff			lda 	#$FF
.a018						_VHHas2Mask:
.a018		d5 52		cmp $52,x			cmp 	NSStatus+2,x 				; so if they are the same there are the wrong number of indices
.a01a		f0 4c		beq $a068			beq 	_VHBadIndex
.a01c		0a		asl a				asl 	a 							; carry will be set if a second index
.a01d		90 08		bcc $a027			bcc 	_VHCheckFirstIndex
.a01f		a0 03		ldy #$03			ldy 	#3 			 				; check the 2nd size >= 2nd index
.a021		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a023		d5 5a		cmp $5a,x			cmp 	NSMantissa0+2,x
.a025		90 41		bcc $a068			bcc 	_VHBadIndex
.a027						_VHCheckFirstIndex:
.a027		a0 02		ldy #$02			ldy 	#2 			 				; check the 2nd size >= 2nd index
.a029		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a02b		d5 59		cmp $59,x			cmp 	NSMantissa0+1,x
.a02d		90 39		bcc $a068			bcc 	_VHBadIndex
.a02f		64 36		stz $36				stz 	zTemp0 						; clear zTemp0 (if 1 index)
.a031		64 37		stz $37				stz 	zTemp0+1
.a033		b5 52		lda $52,x			lda 	NSStatus+2,x 				; if only one index provided, don't need to multiply
.a035		30 0e		bmi $a045			bmi 	_VHNoMultiply
.a037		da		phx				phx
.a038		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; get 2nd index on stack
.a03a		48		pha				pha
.a03b		a0 02		ldy #$02			ldy 	#2 							; get 1st size in A
.a03d		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a03f		1a		inc a				inc 	a 							; add 1 for zero base
.a040		fa		plx				plx
.a041		20 f3 a4	jsr $a4f3			jsr 	Multiply8x8 				; calculate -> Z0
.a044		fa		plx				plx
.a045						_VHNoMultiply:
.a045		18		clc				clc
.a046		a5 36		lda $36				lda 	zTemp0
.a048		75 59		adc $59,x			adc 	NSMantissa0+1,x
.a04a		85 36		sta $36				sta 	zTemp0
.a04c		a5 37		lda $37				lda 	zTemp0+1
.a04e		69 00		adc #$00			adc 	#0
.a050		85 37		sta $37				sta 	zTemp0+1
.a052		b5 50		lda $50,x			lda 	NSStatus,x
.a054		20 6b 88	jsr $886b			jsr 	ScaleByBaseType
.a057		18		clc				clc
.a058		b2 3e		lda ($3e)			lda 	(zaTemp)
.a05a		65 36		adc $36				adc 	zTemp0
.a05c		95 58		sta $58,x			sta 	NSMantissa0,x
.a05e		a0 01		ldy #$01			ldy 	#1
.a060		b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a062		65 37		adc $37				adc 	zTemp0+1
.a064		95 60		sta $60,x			sta 	NSMantissa1,x
.a066		7a		ply				ply 								; restore position
.a067		60		rts				rts
.a068						_VHBadIndex:
.a068		a9 17		lda #$17		lda	#23
.a06a		4c a3 95	jmp $95a3		jmp	ErrorHandler
.a06d						_VHBadArray:
.a06d		a9 18		lda #$18		lda	#24
.a06f		4c a3 95	jmp $95a3		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/abs.asm

.a072						AbsUnary:
.a072		fa		plx				plx 								; restore stack pos
.a073		20 96 a4	jsr $a496			jsr 	EvaluateNumber 				; get a float or int
.a076		20 8a 95	jsr $958a			jsr 	CheckRightBracket
.a079		b5 50		lda $50,x			lda 	NSStatus,x 					; clear the sign bit
.a07b		29 7f		and #$7f			and 	#$7F
.a07d		95 50		sta $50,x			sta 	NSStatus,x
.a07f		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/alloc.asm

.a080						AllocUnary:
.a080		fa		plx				plx 								; restore stack pos
.a081		20 c8 a4	jsr $a4c8			jsr 	Evaluate16BitInteger		; get bytes required.
.a084		20 8a 95	jsr $958a			jsr 	CheckRightBracket
.a087		da		phx				phx 								; save X/Y
.a088		5a		phy				phy
.a089		8a		txa				txa 								; copy X into Y
.a08a		a8		tay				tay
.a08b		b9 60 00	lda $0060,y			lda		NSMantissa1,y 				; get size into XA
.a08e		aa		tax				tax
.a08f		b9 58 00	lda $0058,y			lda 	NSMantissa0,y
.a092		20 9f a0	jsr $a09f			jsr 	AllocateXABytes 			; allocate memory
.a095		99 58 00	sta $0058,y			sta 	NSMantissa0,y 				; write address out.
.a098		8a		txa				txa 	 							; typing is 16 bit integer.
.a099		99 60 00	sta $0060,y			sta 	NSMantissa1,y
.a09c		7a		ply				ply
.a09d		fa		plx				plx
.a09e		60		rts				rts
.a09f						AllocateXABytes:
.a09f		5a		phy				phy
.a0a0		ac 0c 04	ldy $040c			ldy 	lowMemPtr 					; push current address on stack and to zTemp0
.a0a3		84 36		sty $36				sty 	zTemp0
.a0a5		5a		phy				phy
.a0a6		ac 0d 04	ldy $040d			ldy 	lowMemPtr+1
.a0a9		84 37		sty $37				sty 	zTemp0+1
.a0ab		5a		phy				phy
.a0ac		18		clc				clc 								; add to low memory pointer
.a0ad		6d 0c 04	adc $040c			adc 	lowMemPtr
.a0b0		8d 0c 04	sta $040c			sta 	lowMemPtr
.a0b3		8a		txa				txa
.a0b4		6d 0d 04	adc $040d			adc 	lowMemPtr+1
.a0b7		8d 0d 04	sta $040d			sta 	lowMemPtr+1
.a0ba		b0 2f		bcs $a0eb			bcs 	CISSMemory
.a0bc		20 dd a0	jsr $a0dd			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.a0bf						_ClearMemory:
.a0bf		ad 0c 04	lda $040c			lda 	lowMemPtr 					; cleared all memory allocated
.a0c2		c5 36		cmp $36				cmp 	zTemp0
.a0c4		d0 07		bne $a0cd			bne 	_CMClearNext
.a0c6		ad 0d 04	lda $040d			lda 	lowMemPtr+1
.a0c9		c5 37		cmp $37				cmp 	zTemp0+1
.a0cb		f0 0c		beq $a0d9			beq 	_CMExit
.a0cd						_CMClearNext:
.a0cd		a9 00		lda #$00			lda 	#0 							; clear byte, advance to next.
.a0cf		92 36		sta ($36)			sta 	(zTemp0)
.a0d1		e6 36		inc $36				inc 	zTemp0
.a0d3		d0 ea		bne $a0bf			bne 	_ClearMemory
.a0d5		e6 37		inc $37				inc		zTemp0+1
.a0d7		80 e6		bra $a0bf			bra 	_ClearMemory
.a0d9						_CMExit:
.a0d9		fa		plx				plx
.a0da		68		pla				pla
.a0db		7a		ply				ply
.a0dc		60		rts				rts
.a0dd						CheckIdentifierStringSpace:
.a0dd		48		pha				pha
.a0de		ad 0d 04	lda $040d			lda 	lowMemPtr+1 				; get low memory pointer
.a0e1		18		clc				clc
.a0e2		69 02		adc #$02			adc 	#2 							; need at least 2 256 byte pages
.a0e4		cd 0f 04	cmp $040f			cmp 	stringMemory+1 				; is it >= StringMemory
.a0e7		b0 02		bcs $a0eb			bcs 	CISSMemory
.a0e9		68		pla				pla
.a0ea		60		rts				rts
.a0eb						CISSMemory:
.a0eb		a9 06		lda #$06		lda	#6
.a0ed		4c a3 95	jmp $95a3		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/asc.asm

.a0f0						AscUnary:
.a0f0		fa		plx				plx 								; restore stack pos
.a0f1		20 a0 a4	jsr $a4a0			jsr 	EvaluateString 				; get a string
.a0f4		b2 36		lda ($36)			lda 	(zTemp0)					; get/return first character
.a0f6		20 4a a5	jsr $a54a			jsr 	NSMSetByte 					; ASC("") will return zero.
.a0f9		20 8a 95	jsr $958a			jsr 	CheckRightBracket
.a0fc		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/frac.asm

.a0fd						FracUnary:
.a0fd		fa		plx				plx 								; restore stack pos
.a0fe		20 96 a4	jsr $a496			jsr 	EvaluateNumber 				; get a float or int
.a101		20 8a 95	jsr $958a			jsr 	CheckRightBracket
.a104		b5 50		lda $50,x			lda 	NSStatus,x
.a106		29 08		and #$08			and 	#NSTFloat 					; check it is a float
.a108		f0 04		beq $a10e			beq 	_IUZero
.a10a		20 b8 9b	jsr $9bb8			jsr 	FloatFractionalPart 		; if so, get the fractional part.
.a10d		60		rts				rts
.a10e						_IUZero:
.a10e		20 48 a5	jsr $a548			jsr 	NSMSetZero
.a111		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/int.asm

.a112						IntUnary:
.a112		fa		plx				plx 								; restore stack pos
.a113		20 96 a4	jsr $a496			jsr 	EvaluateNumber 				; get a float or int
.a116		20 8a 95	jsr $958a			jsr 	CheckRightBracket
.a119		b5 50		lda $50,x			lda 	NSStatus,x
.a11b		29 08		and #$08			and 	#NSTFloat 					; check it is a float
.a11d		f0 03		beq $a122			beq 	_IUExit
.a11f		20 10 9c	jsr $9c10			jsr 	FloatIntegerPart 			; if it is get the integer part.
.a122						_IUExit:
.a122		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/len.asm

.a123						LenUnary:
.a123		fa		plx				plx 								; restore stack pos
.a124		20 a0 a4	jsr $a4a0			jsr 	EvaluateString 				; get a string
.a127		5a		phy				phy
.a128		a0 00		ldy #$00			ldy 	#0 							; find length
.a12a						_LenFind:
.a12a		b1 36		lda ($36),y			lda 	(zTemp0),y 					; look for trailing NULL.
.a12c		f0 06		beq $a134			beq 	_LenExit
.a12e		c8		iny				iny
.a12f		d0 f9		bne $a12a			bne 	_LenFind
.a131		4c cb a6	jmp $a6cb			jmp 	RangeError 					; string > 255 - no trailing NULL.
.a134						_LenExit:
.a134		98		tya				tya		 							; return length
.a135		20 4a a5	jsr $a54a			jsr 	NSMSetByte
.a138		7a		ply				ply
.a139		20 8a 95	jsr $958a			jsr 	CheckRightBracket
.a13c		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/minmax.asm

.a13d						Unary_Min:
.a13d		a9 01		lda #$01			lda 	#1
.a13f		80 02		bra $a143			bra 	UnaryMinMaxMain
.a141						Unary_Max:
.a141		a9 ff		lda #$ff			lda 	#$FF 						; value from comparator to cause a write
.a143						UnaryMinMaxMain:
.a143		fa		plx				plx 								; get index on number stack
.a144		48		pha				pha 								; save comparator
.a145		20 8d a4	jsr $a48d			jsr 	EvaluateValue 				; get the first value.
.a148						_UMMMLoop:
.a148		b1 30		lda ($30),y			lda 	(codePtr),y
.a14a		c9 29		cmp #$29			cmp 	#KWD_RPAREN 				; if right bracket then done.
.a14c		f0 22		beq $a170			beq 	_UMMMDone
.a14e		20 92 95	jsr $9592			jsr 	CheckComma 					; must be a comma
.a151		e8		inx				inx
.a152		20 8d a4	jsr $a48d			jsr 	EvaluateValue
.a155		ca		dex				dex
.a156		20 2b a5	jsr $a52b			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] (Compare is destructive)
.a159		e8		inx				inx
.a15a		20 2b a5	jsr $a52b			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2], original
.a15d		e8		inx				inx
.a15e		20 5a 96	jsr $965a			jsr 	CompareBaseCode 			; part of > = < etc. code, returns 255,0 or 1
.a161		ca		dex				dex
.a162		ca		dex				dex
.a163		85 36		sta $36				sta 	zTemp0 						; save required result
.a165		68		pla				pla 								; get and save comparator
.a166		48		pha				pha
.a167		c5 36		cmp $36				cmp 	zTemp0 						; if the comparator
.a169		d0 dd		bne $a148			bne 	_UMMMLoop
.a16b		20 73 a1	jsr $a173			jsr 	ExpCopyAboveDown 			; copy next up slot down
.a16e		80 d8		bra $a148			bra 	_UMMMLoop
.a170						_UMMMDone:
.a170		68		pla				pla 								; throw the comparator
.a171		c8		iny				iny 								; skip )
.a172		60		rts				rts
.a173						ExpCopyAboveDown:
.a173		b5 51		lda $51,x			lda 	NSStatus+1,x
.a175		95 50		sta $50,x			sta 	NSStatus,x
.a177		b5 79		lda $79,x			lda 	NSExponent+1,x
.a179		95 78		sta $78,x			sta 	NSExponent,x
.a17b		b5 59		lda $59,x			lda 	NSMantissa0+1,x
.a17d		95 58		sta $58,x			sta 	NSMantissa0,x
.a17f		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.a181		95 60		sta $60,x			sta 	NSMantissa1,x
.a183		b5 69		lda $69,x			lda 	NSMantissa2+1,x
.a185		95 68		sta $68,x			sta 	NSMantissa2,x
.a187		b5 71		lda $71,x			lda 	NSMantissa3+1,x
.a189		95 70		sta $70,x			sta 	NSMantissa3,x
.a18b		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/not.asm

.a18c						Unary_Not:
.a18c		fa		plx				plx
.a18d		20 b5 a4	jsr $a4b5			jsr 	EvaluateInteger 			; get integer
.a190		20 8a 95	jsr $958a			jsr 	CheckRightBracket
.a193		20 6a a5	jsr $a56a			jsr 	NSMIsZero 					; zero mantissa ?
.a196		f0 04		beq $a19c			beq 	_NotZero
.a198		20 48 a5	jsr $a548			jsr 	NSMSetZero
.a19b		60		rts				rts
.a19c						_NotZero:
.a19c		4c 10 96	jmp $9610			jmp 	ReturnTrue

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/peek.asm

.a19f						PeekByteUnary:
.a19f		a9 01		lda #$01			lda 	#1
.a1a1		80 0a		bra $a1ad			bra 	PeekUnary
.a1a3						PeekWUnary:
.a1a3		a9 02		lda #$02			lda 	#2
.a1a5		80 06		bra $a1ad			bra 	PeekUnary
.a1a7						PeekLUnary:
.a1a7		a9 03		lda #$03			lda 	#3
.a1a9		80 02		bra $a1ad			bra 	PeekUnary
.a1ab						PeekDUnary:
.a1ab		a9 04		lda #$04			lda 	#4
.a1ad						PeekUnary:
.a1ad		fa		plx				plx 								; restore position.
.a1ae		48		pha				pha 								; save count to copy on stack
.a1af		20 c8 a4	jsr $a4c8			jsr		Evaluate16BitInteger 		; address as constant.
.a1b2		20 8a 95	jsr $958a			jsr 	CheckRightBracket
.a1b5		b5 58		lda $58,x			lda 	NSMantissa0,x 				; save mantissa in zTemp0 as address
.a1b7		85 36		sta $36				sta 	zTemp0
.a1b9		b5 60		lda $60,x			lda 	NSMantissa1,x
.a1bb		85 37		sta $37				sta 	zTemp0+1
.a1bd		20 48 a5	jsr $a548			jsr 	NSMSetZero 					; clear the result to zero.
.a1c0		68		pla				pla 								; count in zTemp2
.a1c1		85 3a		sta $3a				sta 	zTemp2
.a1c3		da		phx				phx 								; save stack position and offset of read
.a1c4		5a		phy				phy
.a1c5		a0 00		ldy #$00			ldy 	#0 							; byte read offset.
.a1c7						_PULoop:
.a1c7		b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next byte, write to mantissa0,x
.a1c9		95 58		sta $58,x			sta 	NSMantissa0,x 				; we change X not the index before it.
.a1cb		c8		iny				iny 								; next byte to write
.a1cc		8a		txa				txa 								; next byte to read - stack layout in 04data.inc
.a1cd		18		clc				clc
.a1ce		69 08		adc #$08			adc 	#MathStackSize
.a1d0		aa		tax				tax
.a1d1		c6 3a		dec $3a				dec 	zTemp2 						; done them all
.a1d3		d0 f2		bne $a1c7			bne 	_PULoop
.a1d5		7a		ply				ply 								; restore stack/code pos and exit.
.a1d6		fa		plx				plx
.a1d7		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/rnd.asm

.a1d8						Unary_Random:
.a1d8		fa		plx				plx
.a1d9		20 4a a2	jsr $a24a			jsr 	Random32Bit 				; get a random number
.a1dc		20 33 a2	jsr $a233			jsr 	URCopyToMantissa  			; put in mantissa
.a1df		b1 30		lda ($30),y			lda 	(codePtr),y
.a1e1		c9 29		cmp #$29			cmp 	#KWD_RPAREN
.a1e3		f0 08		beq $a1ed			beq 	_URNoModulus 				; then we return a random 30 bit number.
.a1e5		e8		inx				inx
.a1e6		20 c8 a4	jsr $a4c8			jsr 	Evaluate16BitInteger 		; put modulus value in +1
.a1e9		ca		dex				dex
.a1ea		20 62 97	jsr $9762			jsr 	IntegerModulusNoCheck 		; calculate modulus, so now 0 .. n-1
.a1ed						_URNoModulus:
.a1ed		74 50		stz $50,x			stz 	NSStatus,x 					; make it an integer positive
.a1ef		74 78		stz $78,x			stz 	NSExponent,x
.a1f1		20 8a 95	jsr $958a			jsr 	CheckRightBracket
.a1f4		60		rts				rts
.a1f5						Unary_Rnd:
.a1f5		fa		plx				plx
.a1f6		20 96 a4	jsr $a496			jsr 	EvaluateNumber 				; number to use.
.a1f9		20 8a 95	jsr $958a			jsr 	CheckRightBracket 			; closing bracket
.a1fc		20 6a a5	jsr $a56a			jsr 	NSMIsZero 					; if zero, then don't generate a new number
.a1ff		f0 26		beq $a227			beq 	_URCopySeed
.a201		b5 50		lda $50,x			lda 	NSStatus,x 					; if -ve, then seed using parameter
.a203		10 1f		bpl $a224			bpl 	_URDontSeed
.a205		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy - value to seed butchering it.
.a207		49 17		eor #$17			eor 	#$17
.a209		8d 08 04	sta $0408			sta 	randomSeed+0
.a20c		b5 60		lda $60,x			lda 	NSMantissa1,x
.a20e		49 a5		eor #$a5			eor 	#$A5
.a210		8d 09 04	sta $0409			sta 	randomSeed+1
.a213		b5 68		lda $68,x			lda 	NSMantissa2,x
.a215		49 c2		eor #$c2			eor 	#$C2
.a217		8d 0a 04	sta $040a			sta 	randomSeed+2
.a21a		b5 70		lda $70,x			lda 	NSMantissa3,x
.a21c		49 9d		eor #$9d			eor 	#$9D
.a21e		8d 0b 04	sta $040b			sta 	randomSeed+3
.a221		20 4a a2	jsr $a24a			jsr 	Random32Bit
.a224						_URDontSeed:
.a224		20 4a a2	jsr $a24a			jsr 	Random32Bit 				; generate a number
.a227						_URCopySeed:
.a227		20 33 a2	jsr $a233			jsr 	URCopyToMantissa 			; copy into mantissa
.a22a		a9 e2		lda #$e2			lda 	#-30 						; force into 0-1 range
.a22c		95 78		sta $78,x			sta 	NSExponent,x
.a22e		a9 08		lda #$08			lda 	#NSTFloat
.a230		95 50		sta $50,x			sta 	NSStatus,x 					; positive float
.a232		60		rts				rts
.a233						URCopyToMantissa:
.a233		ad 08 04	lda $0408			lda 	randomSeed+0
.a236		95 58		sta $58,x			sta 	NSMantissa0,x
.a238		ad 09 04	lda $0409			lda 	randomSeed+1
.a23b		95 60		sta $60,x			sta 	NSMantissa1,x
.a23d		ad 0a 04	lda $040a			lda 	randomSeed+2
.a240		95 68		sta $68,x			sta 	NSMantissa2,x
.a242		ad 0b 04	lda $040b			lda 	randomSeed+3
.a245		29 3f		and #$3f			and 	#$3F 						; make legal mantissa
.a247		95 70		sta $70,x			sta 	NSMantissa3,x
.a249		60		rts				rts
.a24a						Random32Bit:
.a24a		5a		phy				phy
.a24b		a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.a24d		ad 08 04	lda $0408			lda 	randomSeed+0 				; check the seed isn't zero
.a250		d0 03		bne $a255			bne 	_Random1
.a252		a8		tay				tay 								; if so do it 256 times
.a253		a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.a255						_Random1:
.a255		0a		asl a				asl 	a 							; LSFR RNG
.a256		2e 09 04	rol $0409			rol 	randomSeed+1
.a259		2e 0a 04	rol $040a			rol 	randomSeed+2
.a25c		2e 0b 04	rol $040b			rol 	randomSeed+3
.a25f		90 02		bcc $a263			bcc 	_Random2
.a261		49 c5		eor #$c5			eor 	#$C5
.a263						_Random2:
.a263		88		dey				dey
.a264		d0 ef		bne $a255			bne 	_Random1
.a266		8d 08 04	sta $0408			sta 	randomSeed+0
.a269		7a		ply				ply
.a26a		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/sgn.asm

.a26b						SgnUnary:
.a26b		fa		plx				plx 								; restore stack pos
.a26c		20 96 a4	jsr $a496			jsr 	EvaluateNumber 				; get a float or int
.a26f		20 8a 95	jsr $958a			jsr 	CheckRightBracket
.a272		20 6a a5	jsr $a56a			jsr 	NSMIsZero 					; if zero
.a275		f0 0e		beq $a285			beq 	_SGZero  					; return Int Zero
.a277		b5 50		lda $50,x			lda 	NSStatus,x 					; get status w/sign
.a279		48		pha				pha
.a27a		a9 01		lda #$01			lda 	#1 							; set to 1
.a27c		20 4a a5	jsr $a54a			jsr 	NSMSetByte
.a27f		68		pla				pla
.a280		29 80		and #$80			and		#$80 						; copy the sign byte out
.a282		95 50		sta $50,x			sta 	NSStatus,x  				; so it will be -1 or 1
.a284		60		rts				rts
.a285		20 48 a5	jsr $a548	_SGZero:jsr 	NSMSetZero
.a288		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/val.asm

.a289						ValUnary:
.a289		fa		plx				plx 								; restore stack pos
.a28a		20 9f a2	jsr $a29f			jsr 	ValMainCode 				; do the main val() code
.a28d		b0 01		bcs $a290			bcs 	_VUError 					; couldn't convert
.a28f		60		rts				rts
.a290						_VUError:
.a290		4c d0 a6	jmp $a6d0			jmp 	TypeError
.a293						IsValUnary:
.a293		fa		plx				plx 								; restore stack pos
.a294		20 9f a2	jsr $a29f			jsr 	ValMainCode 				; do the main val() code
.a297		b0 03		bcs $a29c			bcs 	_VUBad
.a299		4c 10 96	jmp $9610			jmp 	ReturnTrue
.a29c						_VUBad:
.a29c		4c 1b 96	jmp $961b			jmp 	ReturnFalse
.a29f						ValMainCode:
.a29f		20 a0 a4	jsr $a4a0			jsr 	EvaluateString 				; get a string
.a2a2		20 8a 95	jsr $958a			jsr 	CheckRightBracket 			; check right bracket present
.a2a5						ValEvaluateZTemp0:
.a2a5		5a		phy				phy
.a2a6		b2 36		lda ($36)			lda 	(zTemp0) 					; check not empty string
.a2a8		f0 17		beq $a2c1			beq 	_VMCFail2
.a2aa		a0 ff		ldy #$ff			ldy 	#$FF 						; start position
.a2ac		48		pha				pha 								; save first character
.a2ad		c9 2d		cmp #$2d			cmp 	#"-"		 				; is it - ?
.a2af		d0 01		bne $a2b2			bne 	_VMCStart
.a2b1		c8		iny				iny 								; skip over -
.a2b2						_VMCStart:
.a2b2		38		sec				sec 								; initialise first time round.
.a2b3						_VMCNext:
.a2b3		c8		iny				iny 								; pre-increment
.a2b4		b1 36		lda ($36),y			lda 	(zTemp0),y 					; next character = EOS ?
.a2b6		f0 0c		beq $a2c4			beq 	_VMCSuccess 				; successful.
.a2b8		20 ed 9d	jsr $9ded			jsr 	EncodeNumber 				; send it to the number-builder
.a2bb		90 03		bcc $a2c0			bcc 	_VMCFail 					; if failed, give up.
.a2bd		18		clc				clc 								; next time round, countinue
.a2be		80 f3		bra $a2b3			bra 	_VMCNext
.a2c0						_VMCFail:
.a2c0		68		pla				pla
.a2c1						_VMCFail2:
.a2c1		7a		ply				ply
.a2c2		38		sec				sec
.a2c3		60		rts				rts
.a2c4						_VMCSuccess:
.a2c4		a9 00		lda #$00			lda 	#0 							; construct final
.a2c6		20 ed 9d	jsr $9ded			jsr 	EncodeNumber 				; by sending a duff value.
.a2c9		68		pla				pla 								; if it was -ve
.a2ca		c9 2d		cmp #$2d			cmp 	#"-"
.a2cc		d0 03		bne $a2d1			bne 	_VMCNotNegative
.a2ce		20 0a a5	jsr $a50a			jsr		NSMNegate 					; negate it.
.a2d1						_VMCNotNegative:
.a2d1		7a		ply				ply
.a2d2		18		clc				clc
.a2d3		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/chr.asm

.a2d4						ChrUnary:
.a2d4		fa		plx				plx 								; restore stack pos
.a2d5		20 e3 a4	jsr $a4e3			jsr 	Evaluate8BitInteger			; get value (chr$(0) returns an empty string)
.a2d8		48		pha				pha
.a2d9		20 8a 95	jsr $958a			jsr 	CheckRightBracket
.a2dc		a9 01		lda #$01			lda 	#1 							; allocate space for one char
.a2de		20 17 b7	jsr $b717			jsr 	StringTempAllocate
.a2e1		68		pla				pla 								; write number to it
.a2e2		20 50 b7	jsr $b750			jsr 	StringTempWrite
.a2e5		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/getdatetime.asm

.a2e6						UnaryGetTime:
.a2e6		a9 00		lda #$00			lda 	#0
.a2e8		80 02		bra $a2ec			bra 	UGDTMain
.a2ea						UnaryGetDate:
.a2ea		a9 03		lda #$03			lda 	#3
.a2ec						UGDTMain:
.a2ec		fa		plx				plx 								; get stack position back
.a2ed		48		pha				pha 								; save table offset
.a2ee		20 e3 a4	jsr $a4e3			jsr 	Evaluate8BitInteger			; ignored parameter
.a2f1		20 8a 95	jsr $958a			jsr 	CheckRightBracket 			; closing )
.a2f4		68		pla				pla 								; table offset in A
.a2f5		5a		phy				phy 								; saving Y
.a2f6		a8		tay				tay 								; table offset in Y
.a2f7		a9 08		lda #$08			lda 	#8							; allocate space for 8 chars DD:MM:YY
.a2f9		20 17 b7	jsr $b717			jsr 	StringTempAllocate
.a2fc		a5 01		lda $01				lda 	1 							; save I/O table and switch to I/O page 0
.a2fe		48		pha				pha
.a2ff		64 01		stz $01				stz 	1
.a301		20 14 a3	jsr $a314			jsr 	UGDTDigit 					; do XX:YY:ZZ
.a304		20 0f a3	jsr $a30f			jsr 	UGDTColonDigit
.a307		20 0f a3	jsr $a30f			jsr 	UGDTColonDigit
.a30a		68		pla				pla 								; restore I/O select
.a30b		85 01		sta $01				sta 	1
.a30d		7a		ply				ply  								; restore code position
.a30e		60		rts				rts
.a30f						UGDTColonDigit:
.a30f		a9 3a		lda #$3a			lda 	#':'
.a311		20 50 b7	jsr $b750			jsr 	StringTempWrite
.a314						UGDTDigit:
.a314		da		phx				phx 								; save X
.a315		b9 34 a3	lda $a334,y			lda 	RTCROffset,y 				; get offset in RTC register
.a318		aa		tax				tax
.a319		bd 90 d6	lda $d690,x			lda 	$D690,x 					; read RTC register
.a31c		39 3a a3	and $a33a,y			and 	RTCRMask,y 					; and with Mask.
.a31f		fa		plx				plx
.a320		48		pha				pha 								; output in BCD
.a321		4a		lsr a				lsr 	a
.a322		4a		lsr a				lsr 	a
.a323		4a		lsr a				lsr 	a
.a324		4a		lsr a				lsr 	a
.a325		09 30		ora #$30			ora 	#48
.a327		20 50 b7	jsr $b750			jsr 	StringTempWrite
.a32a		68		pla				pla
.a32b		29 0f		and #$0f			and 	#15
.a32d		09 30		ora #$30			ora 	#48
.a32f		20 50 b7	jsr $b750			jsr 	StringTempWrite
.a332		c8		iny				iny
.a333		60		rts				rts
.a334						RTCROffset:
>a334		04 02 00 06 09 0a				.byte 	4,2,0,6,9,10
.a33a						RTCRMask:
>a33a		3f 7f 7f 3f 1f 7f				.byte 	$3F,$7F,$7F,$3F,$1F,$7F

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/spc.asm

.a340						SpcUnary:
.a340		fa		plx				plx 								; restore stack pos
.a341		20 e3 a4	jsr $a4e3			jsr 	Evaluate8BitInteger			; get value
.a344		5a		phy				phy
.a345		48		pha				pha 								; save count
.a346		20 17 b7	jsr $b717			jsr 	StringTempAllocate
.a349		7a		ply				ply 								; to do count in Y
.a34a						_SpcLoop:
.a34a		c0 00		cpy #$00			cpy 	#0 							; copy Y spaces in.
.a34c		f0 08		beq $a356			beq 	_SpcExit
.a34e		a9 20		lda #$20			lda 	#32
.a350		20 50 b7	jsr $b750			jsr 	StringTempWrite
.a353		88		dey				dey
.a354		80 f4		bra $a34a			bra 	_SpcLoop
.a356						_SpcExit:
.a356		7a		ply				ply
.a357		20 8a 95	jsr $958a			jsr 	CheckRightBracket
.a35a		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/str.asm

.a35b						Unary_Str:
.a35b		fa		plx				plx
.a35c		20 96 a4	jsr $a496			jsr 	EvaluateNumber  			; get number
.a35f		20 8a 95	jsr $958a			jsr 	CheckRightBracket 			; closing bracket
.a362		a9 05		lda #$05			lda 	#5 							; maximum decimals, from Basic816
.a364		20 7d a3	jsr $a37d			jsr 	ConvertNumberToString 		; do the conversion.
.a367		a9 21		lda #$21			lda		#33 						; create buffer
.a369		20 17 b7	jsr $b717			jsr 	StringTempAllocate 			; allocate memory
.a36c		da		phx				phx  								; copy the converted string into the buffer.
.a36d		a2 00		ldx #$00			ldx 	#0
.a36f						_USCopy:
.a36f		bd 49 06	lda $0649,x			lda 	decimalBuffer,x
.a372		20 50 b7	jsr $b750			jsr 	StringTempWrite
.a375		e8		inx				inx
.a376		bd 49 06	lda $0649,x			lda 	decimalBuffer,x
.a379		d0 f4		bne $a36f			bne 	_USCopy
.a37b		fa		plx				plx
.a37c		60		rts				rts
.a37d						ConvertNumberToString:
.a37d		5a		phy				phy 								; save code position
.a37e		8d 14 04	sta $0414			sta 	decimalPlaces	 			; save number of DPs.
.a381		9c 15 04	stz $0415			stz 	dbOffset 					; offset into decimal buffer = start.
.a384		b5 50		lda $50,x			lda 	NSStatus,x  				; is it -ve.
.a386		10 09		bpl $a391			bpl 	_CNTSNotNegative
.a388		29 7f		and #$7f			and 	#$7F 						; make +ve
.a38a		95 50		sta $50,x			sta 	NSStatus,x
.a38c		a9 2d		lda #$2d			lda 	#"-"
.a38e		20 f2 a3	jsr $a3f2			jsr 	WriteDecimalBuffer
.a391						_CNTSNotNegative:
.a391		b5 78		lda $78,x			lda 	NSExponent,x 				; check if decimal
.a393		f0 12		beq $a3a7			beq 	_CNTSNotFloat
.a395		e8		inx				inx 								; round up so we don't get too many 6.999999
.a396		a9 01		lda #$01			lda 	#1
.a398		20 4a a5	jsr $a54a			jsr 	NSMSetByte
.a39b		ca		dex				dex
.a39c		b5 78		lda $78,x			lda		NSExponent,x
.a39e		95 79		sta $79,x			sta 	NSExponent+1,x
.a3a0		a9 08		lda #$08			lda 	#NSTFloat
.a3a2		95 51		sta $51,x			sta 	NSStatus+1,x
.a3a4		20 f2 9a	jsr $9af2			jsr 	FloatAdd
.a3a7						_CNTSNotFloat:
.a3a7		20 d4 a3	jsr $a3d4			jsr 	MakePlusTwoString 			; do the integer part.
.a3aa		20 b8 9b	jsr $9bb8			jsr 	FloatFractionalPart 		; get the fractional part
.a3ad		20 69 9c	jsr $9c69			jsr 	NSNormalise					; normalise , exit if zero
.a3b0		f0 20		beq $a3d2			beq 	_CNTSExit
.a3b2		a9 2e		lda #$2e			lda 	#"."
.a3b4		20 f2 a3	jsr $a3f2			jsr 	WriteDecimalBuffer 			; write decimal place
.a3b7						_CNTSDecimal:
.a3b7		ce 14 04	dec $0414			dec 	decimalPlaces 				; done all the decimals
.a3ba		30 16		bmi $a3d2			bmi 	_CNTSExit
.a3bc		e8		inx				inx 								; x 10.0
.a3bd		a9 0a		lda #$0a			lda 	#10
.a3bf		20 4a a5	jsr $a54a			jsr 	NSMSetByte
.a3c2		a9 08		lda #$08			lda 	#NSTFloat
.a3c4		95 50		sta $50,x			sta 	NSStatus,x
.a3c6		ca		dex				dex
.a3c7		20 37 9c	jsr $9c37			jsr 	FloatMultiply
.a3ca		20 d4 a3	jsr $a3d4			jsr 	MakePlusTwoString 			; put the integer e.g. next digit out.
.a3cd		20 b8 9b	jsr $9bb8			jsr 	FloatFractionalPart 		; get the fractional part
.a3d0		80 e5		bra $a3b7			bra 	_CNTSDecimal 				; keep going.
.a3d2						_CNTSExit:
.a3d2		7a		ply				ply
.a3d3		60		rts				rts
.a3d4						MakePlusTwoString:
.a3d4		da		phx				phx
.a3d5		20 2b a5	jsr $a52b			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.a3d8		e8		inx				inx 								; access it
.a3d9		e8		inx				inx
.a3da		20 10 9c	jsr $9c10			jsr 	FloatIntegerPart 			; make it an integer
.a3dd		a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.a3df		20 22 9a	jsr $9a22			jsr 	ConvertInt32
.a3e2		a2 00		ldx #$00			ldx	 	#0 							; write that to the decimal buffer.
.a3e4						_MPTSCopy:
.a3e4		bd 27 06	lda $0627,x			lda 	numberBuffer,x
.a3e7		20 f2 a3	jsr $a3f2			jsr 	WriteDecimalBuffer
.a3ea		e8		inx				inx
.a3eb		bd 27 06	lda $0627,x			lda 	numberBuffer,x
.a3ee		d0 f4		bne $a3e4			bne 	_MPTSCopy
.a3f0		fa		plx				plx
.a3f1		60		rts				rts
.a3f2						WriteDecimalBuffer:
.a3f2		da		phx				phx
.a3f3		ae 15 04	ldx $0415			ldx 	dbOffset
.a3f6		9d 49 06	sta $0649,x			sta 	decimalBuffer,x
.a3f9		9e 4a 06	stz $064a,x			stz 	decimalBuffer+1,x
.a3fc		ee 15 04	inc $0415			inc 	dbOffset
.a3ff		fa		plx				plx
.a400		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/substring.asm

.a401						Unary_Left:
.a401		fa		plx				plx
.a402		18		clc				clc 								; only one parameter
.a403		20 66 a4	jsr $a466			jsr 	SubstringInitial 			; set up.
.a406		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; Param #1 is the length
.a408		95 5a		sta $5a,x			sta 	NSMantissa0+2,x
.a40a		74 59		stz $59,x			stz 	NSMantissa0+1,x 			; Start is zero.
.a40c		80 25		bra $a433			bra 	SubstringMain
.a40e						Unary_Right:
.a40e		fa		plx				plx
.a40f		18		clc				clc 								; only one parameter
.a410		20 66 a4	jsr $a466			jsr 	SubstringInitial 			; set up.
.a413		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; length => param 2
.a415		95 5a		sta $5a,x			sta 	NSMantissa0+2,x
.a417		b5 78		lda $78,x			lda 	NSExponent,x 				; total length
.a419		f5 59		sbc $59,x			sbc 	NSMantissa0+1,x 			; length - required.
.a41b		b0 02		bcs $a41f			bcs 	_URNotUnderflow
.a41d		a9 00		lda #$00			lda 	#0 							; start from the beginning, as something like right$("AB",3)
.a41f						_URNotUnderflow:
.a41f		95 59		sta $59,x			sta 	NSMantissa0+1,x 			; this is the start position
.a421		80 10		bra $a433			bra 	SubstringMain
.a423						Unary_Mid:
.a423		fa		plx				plx
.a424		38		sec				sec 								; two parameters
.a425		20 66 a4	jsr $a466			jsr 	SubstringInitial 			; set up.
.a428		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; first parameter is zero ?
.a42a		f0 04		beq $a430			beq 	_UMError
.a42c		d6 59		dec $59,x			dec 	NSMantissa0+1,x				; reduce initial offset by 1 as MID$(a$,1..) is actually the first character
.a42e		80 03		bra $a433			bra 	SubstringMain
.a430						_UMError:
.a430		4c d5 a6	jmp $a6d5			jmp 	ArgumentError
.a433						SubstringMain:
.a433		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; is the initial offset >= the length
.a435		d5 78		cmp $78,x			cmp 	NSExponent,x
.a437		b0 27		bcs $a460			bcs 	_SSMNull 					; if so, return an empty string.
.a439		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; if copy count is zero
.a43b		f0 23		beq $a460			beq 	_SSMNull 					; return empty string.
.a43d		18		clc				clc 								; add the offset +1 to the address and
.a43e		b5 58		lda $58,x			lda	 	NSMantissa0,x 				; put in zTemp, this is the start of the substring to copy.
.a440		75 59		adc $59,x			adc 	NSMantissa0+1,x
.a442		85 36		sta $36				sta 	zTemp0
.a444		b5 60		lda $60,x			lda	 	NSMantissa1,x
.a446		69 00		adc #$00			adc 	#0
.a448		85 37		sta $37				sta 	zTemp0+1
.a44a						_SSMNoCarry:
.a44a		b5 5a		lda $5a,x			lda 	NSMantissa0+2,x 			; characters required.
.a44c		20 17 b7	jsr $b717			jsr 	StringTempAllocate 			; allocate that many characters
.a44f		5a		phy				phy 								; save Y
.a450		a0 00		ldy #$00			ldy 	#0 							; start copying in.
.a452						_SSMCopy:
.a452		b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next character
.a454		f0 08		beq $a45e			beq 	_SSMEString 				; no more to copy
.a456		20 50 b7	jsr $b750			jsr 	StringTempWrite 			; and write it out.
.a459		c8		iny				iny
.a45a		d6 5a		dec $5a,x			dec 	NSMantissa0+2,x
.a45c		d0 f4		bne $a452			bne 	_SSMCopy
.a45e						_SSMEString:
.a45e		7a		ply				ply
.a45f						_SSMExit:
.a45f		60		rts				rts
.a460						_SSMNull:
.a460		a9 00		lda #$00			lda 	#0
.a462		20 17 b7	jsr $b717			jsr 	StringTempAllocate
.a465		60		rts				rts
.a466						SubstringInitial:
.a466		da		phx				phx 								; save initial stack position
.a467		08		php				php 								; save carry on stack indicating 2 parameters
.a468		20 a0 a4	jsr $a4a0			jsr 	EvaluateString 				; get a string
.a46b		5a		phy				phy 								; calculate length to exponent.
.a46c		a0 ff		ldy #$ff			ldy 	#$FF
.a46e						_SIFindLength:
.a46e		c8		iny				iny
.a46f		b1 36		lda ($36),y			lda 	(zTemp0),y
.a471		d0 fb		bne $a46e			bne 	_SIFindLength
.a473		98		tya				tya
.a474		95 78		sta $78,x			sta 	NSExponent,x
.a476		7a		ply				ply
.a477		e8		inx				inx
.a478		20 92 95	jsr $9592			jsr 	CheckComma 					; comma next
.a47b		20 e3 a4	jsr $a4e3			jsr 	Evaluate8BitInteger 		; get next parameter
.a47e		28		plp				plp 								; is it the last parameter ?
.a47f		90 07		bcc $a488			bcc 	_SSIExit 					; if so, exit.
.a481		e8		inx				inx
.a482		20 92 95	jsr $9592			jsr 	CheckComma 					; comma next
.a485		20 e3 a4	jsr $a4e3			jsr 	Evaluate8BitInteger 		; get last parameter
.a488						_SSIExit:
.a488		fa		plx				plx
.a489		20 8a 95	jsr $958a			jsr 	CheckRightBracket 			; check closing bracket
.a48c		60		rts				rts 								; exit

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/exprhelper.asm

.a48d						EvaluateValue:
.a48d		48		pha				pha
.a48e		20 a7 9a	jsr $9aa7			jsr		EvaluateExpression 			; expression
.a491		20 6a 9d	jsr $9d6a			jsr 	Dereference					; derefernce it
.a494		68		pla				pla
.a495		60		rts				rts
.a496						EvaluateNumber:
.a496		20 8d a4	jsr $a48d			jsr 	EvaluateValue 				; get a value
.a499		b5 50		lda $50,x			lda 	NSStatus,x 					; check if string.
.a49b		29 10		and #$10			and 	#NSBIsString
.a49d		d0 13		bne $a4b2			bne 	HelperTypeError
.a49f		60		rts				rts
.a4a0						EvaluateString:
.a4a0		20 8d a4	jsr $a48d			jsr 	EvaluateValue 				; get a value
.a4a3		b5 50		lda $50,x			lda 	NSStatus,x 					; check if string.
.a4a5		29 10		and #$10			and 	#NSBIsString
.a4a7		f0 09		beq $a4b2			beq 	HelperTypeError
.a4a9						CopyAddressToTemp0:
.a4a9		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy address -> zTemp0
.a4ab		85 36		sta $36				sta 	zTemp0 						; (so we can do something with it)
.a4ad		b5 60		lda $60,x			lda 	NSMantissa1,x
.a4af		85 37		sta $37				sta 	zTemp0+1
.a4b1		60		rts				rts
.a4b2						HelperTypeError:
.a4b2		4c d0 a6	jmp $a6d0			jmp 	TypeError
.a4b5						EvaluateInteger:
.a4b5		20 96 a4	jsr $a496			jsr 	EvaluateNumber
.a4b8		b5 78		lda $78,x			lda 	NSExponent,x 				; check exponent is zero
.a4ba		d0 09		bne $a4c5			bne 	HelperValueError 			; if not, it's a float.
.a4bc		60		rts				rts
.a4bd						EvaluateUnsignedInteger:
.a4bd		20 b5 a4	jsr $a4b5			jsr 	EvaluateInteger 			; check integer is +ve
.a4c0		b5 50		lda $50,x			lda 	NSStatus,x
.a4c2		30 01		bmi $a4c5			bmi 	HelperValueError
.a4c4		60		rts				rts
.a4c5						HelperValueError:
.a4c5		4c d5 a6	jmp $a6d5			jmp 	ArgumentError
.a4c8						Evaluate16BitInteger:
.a4c8		20 bd a4	jsr $a4bd			jsr	 	EvaluateUnsignedInteger		; get integer
.a4cb		b5 70		lda $70,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.a4cd		15 68		ora $68,x			ora 	NSMantissa2,x
.a4cf		d0 f4		bne $a4c5			bne 	HelperValueError
.a4d1		60		rts				rts
.a4d2						Evaluate16BitIntegerSigned:
.a4d2		20 b5 a4	jsr $a4b5			jsr	 	EvaluateInteger				; get integer
.a4d5		b5 70		lda $70,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.a4d7		15 68		ora $68,x			ora 	NSMantissa2,x
.a4d9		d0 ea		bne $a4c5			bne 	HelperValueError
.a4db		b5 50		lda $50,x			lda 	NSStatus,x 					; signed ?
.a4dd		10 03		bpl $a4e2			bpl 	_EISNotSigned
.a4df		20 11 a5	jsr $a511			jsr 	NSMNegateMantissa 			; makes it an actual 2's complement value.
.a4e2						_EISNotSigned:
.a4e2		60		rts				rts
.a4e3						Evaluate8BitInteger:
.a4e3		20 bd a4	jsr $a4bd			jsr	 	EvaluateUnsignedInteger 	; get an integer
.a4e6		d0 dd		bne $a4c5			bne 	HelperValueError
.a4e8		b5 70		lda $70,x			lda 	NSMantissa3,x	 			; bytes 1, 2 & 3 must be zero
.a4ea		15 68		ora $68,x			ora 	NSMantissa2,x
.a4ec		15 60		ora $60,x			ora 	NSMantissa1,x
.a4ee		d0 d5		bne $a4c5			bne 	HelperValueError
.a4f0		b5 58		lda $58,x			lda 	NSMantissa0,x
.a4f2		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/mult8x8.asm

.a4f3						Multiply8x8:
.a4f3		4a		lsr a		  		lsr 	a  							; prime the carry bit for the loop
.a4f4		85 36		sta $36			  	sta 	zTemp0
.a4f6		86 37		stx $37				stx 	zTemp0+1
.a4f8		a9 00		lda #$00			lda 	#0
.a4fa		a2 08		ldx #$08			ldx 	#8
.a4fc						_M88Loop:
.a4fc		90 03		bcc $a501			bcc 	_M88NoAdd
.a4fe		18		clc				clc
.a4ff		65 37		adc $37				adc 	zTemp0+1
.a501						_M88NoAdd:
.a501		6a		ror a				ror 	a
.a502		66 36		ror $36				ror 	zTemp0  					; pull another bit out for the next iteration
.a504		ca		dex				dex         						; inc/dec don't modify carry; only shifts and adds do
.a505		d0 f5		bne $a4fc			bne 	_M88Loop
.a507		85 37		sta $37				sta 	zTemp0+1 					; store high 8 bits.
.a509		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/utility.asm

.a50a						NSMNegate:
.a50a		b5 50		lda $50,x			lda 	NSStatus,x 					; everything is sign/magnitude usually so just
.a50c		49 80		eor #$80			eor 	#NSBIsNegative  			; toggle the negative flag
.a50e		95 50		sta $50,x			sta 	NSStatus,x
.a510		60		rts				rts
.a511						NSMNegateMantissa:
.a511		38		sec				sec 								; when we want an actual 32 bit 2's complement value.
.a512		a9 00		lda #$00			lda 	#0
.a514		f5 58		sbc $58,x			sbc 	NSMantissa0,x
.a516		95 58		sta $58,x			sta 	NSMantissa0,x
.a518		a9 00		lda #$00			lda 	#0
.a51a		f5 60		sbc $60,x			sbc 	NSMantissa1,x
.a51c		95 60		sta $60,x			sta 	NSMantissa1,x
.a51e		a9 00		lda #$00			lda 	#0
.a520		f5 68		sbc $68,x			sbc 	NSMantissa2,x
.a522		95 68		sta $68,x			sta 	NSMantissa2,x
.a524		a9 00		lda #$00			lda 	#0
.a526		f5 70		sbc $70,x			sbc 	NSMantissa3,x
.a528		95 70		sta $70,x			sta 	NSMantissa3,x
.a52a		60		rts				rts
.a52b						NSMShiftUpTwo:
.a52b		b5 58		lda $58,x			lda 	NSMantissa0,x
.a52d		95 5a		sta $5a,x			sta 	NSMantissa0+2,x
.a52f		b5 60		lda $60,x			lda 	NSMantissa1,x
.a531		95 62		sta $62,x			sta 	NSMantissa1+2,x
.a533		b5 68		lda $68,x			lda 	NSMantissa2,x
.a535		95 6a		sta $6a,x			sta 	NSMantissa2+2,x
.a537		b5 70		lda $70,x			lda 	NSMantissa3,x
.a539		95 72		sta $72,x			sta 	NSMantissa3+2,x
.a53b		b5 78		lda $78,x			lda 	NSExponent,x
.a53d		95 7a		sta $7a,x			sta 	NSExponent+2,x
.a53f		b5 50		lda $50,x			lda 	NSStatus,x
.a541		95 52		sta $52,x			sta 	NSStatus+2,x
.a543		60		rts				rts
.a544						NSMSetZeroMantissaOnly:
.a544		a9 00		lda #$00			lda 	#0
.a546		80 06		bra $a54e			bra 	NSMSetMantissa
.a548						NSMSetZero:
.a548		a9 00		lda #$00			lda 	#0
.a54a						NSMSetByte:
.a54a		74 78		stz $78,x			stz 	NSExponent,x 				; zero exponent, as integer.
.a54c		74 50		stz $50,x			stz 	NSStatus,x 					; status zero (integer)
.a54e						NSMSetMantissa:
.a54e		95 58		sta $58,x			sta 	NSMantissa0,x 				; mantissa
.a550		74 60		stz $60,x			stz 	NSMantissa1,x
.a552		74 68		stz $68,x			stz 	NSMantissa2,x
.a554		74 70		stz $70,x			stz 	NSMantissa3,x
.a556		60		rts				rts
.a557						NSMShiftLeft:
.a557		18		clc				clc
.a558						NSMRotateLeft:
.a558		36 58		rol $58,x			rol 	NSMantissa0,x
.a55a		36 60		rol $60,x			rol		NSMantissa1,x
.a55c		36 68		rol $68,x			rol		NSMantissa2,x
.a55e		36 70		rol $70,x			rol		NSMantissa3,x
.a560		60		rts				rts
.a561						NSMShiftRight:
.a561		56 70		lsr $70,x			lsr 	NSMantissa3,x
.a563		76 68		ror $68,x			ror		NSMantissa2,x
.a565		76 60		ror $60,x			ror		NSMantissa1,x
.a567		76 58		ror $58,x			ror		NSMantissa0,x
.a569		60		rts				rts
.a56a						NSMIsZero:
.a56a		b5 70		lda $70,x			lda 	NSMantissa3,x
.a56c		15 68		ora $68,x			ora		NSMantissa2,x
.a56e		15 60		ora $60,x			ora		NSMantissa1,x
.a570		15 58		ora $58,x			ora		NSMantissa0,x
.a572		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./tick.task/f256/ticktask.asm

.a573						TickHandler:
.a573		5a		phy				phy 								; need to preserve Y
.a574		20 49 80	jsr $8049			jsr 	SNDUpdate 					; update sound
.a577		7a		ply				ply
.a578		60		rts				rts
.0776						LastTick:
>0776								.fill 		1

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/asmcore.asm

.a579						Assemble_ora:
.a579		20 7f 82	jsr $827f		jsr	AssembleGroup1
>a57c		01					.byte $01
.a57d						Assemble_and:
.a57d		20 7f 82	jsr $827f		jsr	AssembleGroup1
>a580		21					.byte $21
.a581						Assemble_eor:
.a581		20 7f 82	jsr $827f		jsr	AssembleGroup1
>a584		41					.byte $41
.a585						Assemble_adc:
.a585		20 7f 82	jsr $827f		jsr	AssembleGroup1
>a588		61					.byte $61
.a589						Assemble_sta:
.a589		20 7f 82	jsr $827f		jsr	AssembleGroup1
>a58c		81					.byte $81
.a58d						Assemble_lda:
.a58d		20 7f 82	jsr $827f		jsr	AssembleGroup1
>a590		a1					.byte $a1
.a591						Assemble_cmp:
.a591		20 7f 82	jsr $827f		jsr	AssembleGroup1
>a594		c1					.byte $c1
.a595						Assemble_sbc:
.a595		20 7f 82	jsr $827f		jsr	AssembleGroup1
>a598		e1					.byte $e1
.a599						Assemble_asl:
.a599		20 86 82	jsr $8286		jsr	AssembleGroup2
>a59c		02					.byte $02
>a59d		75					.byte $75
.a59e						Assemble_rol:
.a59e		20 86 82	jsr $8286		jsr	AssembleGroup2
>a5a1		22					.byte $22
>a5a2		75					.byte $75
.a5a3						Assemble_lsr:
.a5a3		20 86 82	jsr $8286		jsr	AssembleGroup2
>a5a6		42					.byte $42
>a5a7		75					.byte $75
.a5a8						Assemble_ror:
.a5a8		20 86 82	jsr $8286		jsr	AssembleGroup2
>a5ab		62					.byte $62
>a5ac		75					.byte $75
.a5ad						Assemble_stx:
.a5ad		20 86 82	jsr $8286		jsr	AssembleGroup2
>a5b0		82					.byte $82
>a5b1		50					.byte $50
.a5b2						Assemble_ldx:
.a5b2		20 86 82	jsr $8286		jsr	AssembleGroup2
>a5b5		a2					.byte $a2
>a5b6		d0					.byte $d0
.a5b7						Assemble_dec:
.a5b7		20 86 82	jsr $8286		jsr	AssembleGroup2
>a5ba		c2					.byte $c2
>a5bb		55					.byte $55
.a5bc						Assemble_inc:
.a5bc		20 86 82	jsr $8286		jsr	AssembleGroup2
>a5bf		e2					.byte $e2
>a5c0		55					.byte $55
.a5c1						Assemble_stz:
.a5c1		20 86 82	jsr $8286		jsr	AssembleGroup2
>a5c4		60					.byte $60
>a5c5		44					.byte $44
.a5c6						Assemble_bit:
.a5c6		20 86 82	jsr $8286		jsr	AssembleGroup2
>a5c9		20					.byte $20
>a5ca		55					.byte $55
.a5cb						Assemble_sty:
.a5cb		20 86 82	jsr $8286		jsr	AssembleGroup2
>a5ce		80					.byte $80
>a5cf		54					.byte $54
.a5d0						Assemble_ldy:
.a5d0		20 86 82	jsr $8286		jsr	AssembleGroup2
>a5d3		a0					.byte $a0
>a5d4		d5					.byte $d5
.a5d5						Assemble_cpy:
.a5d5		20 86 82	jsr $8286		jsr	AssembleGroup2
>a5d8		c0					.byte $c0
>a5d9		d4					.byte $d4
.a5da						Assemble_cpx:
.a5da		20 86 82	jsr $8286		jsr	AssembleGroup2
>a5dd		e0					.byte $e0
>a5de		d0					.byte $d0
.a5df						Assemble_tsb:
.a5df		20 86 82	jsr $8286		jsr	AssembleGroup2
>a5e2		00					.byte $00
>a5e3		50					.byte $50
.a5e4						Assemble_trb:
.a5e4		20 86 82	jsr $8286		jsr	AssembleGroup2
>a5e7		10					.byte $10
>a5e8		50					.byte $50
.a5e9						Assemble_jsr:
.a5e9		20 86 82	jsr $8286		jsr	AssembleGroup2
>a5ec		14					.byte $14
>a5ed		10					.byte $10
.a5ee						Assemble_jmp:
.a5ee		20 86 82	jsr $8286		jsr	AssembleGroup2
>a5f1		40					.byte $40
>a5f2		10					.byte $10
.a5f3						Assemble_bpl:
.a5f3		20 d7 82	jsr $82d7		jsr	AssembleGroup3
>a5f6		10					.byte $10
.a5f7						Assemble_bmi:
.a5f7		20 d7 82	jsr $82d7		jsr	AssembleGroup3
>a5fa		30					.byte $30
.a5fb						Assemble_bvc:
.a5fb		20 d7 82	jsr $82d7		jsr	AssembleGroup3
>a5fe		50					.byte $50
.a5ff						Assemble_bvs:
.a5ff		20 d7 82	jsr $82d7		jsr	AssembleGroup3
>a602		70					.byte $70
.a603						Assemble_bcc:
.a603		20 d7 82	jsr $82d7		jsr	AssembleGroup3
>a606		90					.byte $90
.a607						Assemble_bcs:
.a607		20 d7 82	jsr $82d7		jsr	AssembleGroup3
>a60a		b0					.byte $b0
.a60b						Assemble_bne:
.a60b		20 d7 82	jsr $82d7		jsr	AssembleGroup3
>a60e		d0					.byte $d0
.a60f						Assemble_beq:
.a60f		20 d7 82	jsr $82d7		jsr	AssembleGroup3
>a612		f0					.byte $f0
.a613						Assemble_bra:
.a613		20 d7 82	jsr $82d7		jsr	AssembleGroup3
>a616		80					.byte $80
.a617						Assemble_brk:
.a617		20 0b 83	jsr $830b		jsr	AssembleGroup4
>a61a		00					.byte $00
.a61b						Assemble_php:
.a61b		20 0b 83	jsr $830b		jsr	AssembleGroup4
>a61e		08					.byte $08
.a61f						Assemble_clc:
.a61f		20 0b 83	jsr $830b		jsr	AssembleGroup4
>a622		18					.byte $18
.a623						Assemble_plp:
.a623		20 0b 83	jsr $830b		jsr	AssembleGroup4
>a626		28					.byte $28
.a627						Assemble_sec:
.a627		20 0b 83	jsr $830b		jsr	AssembleGroup4
>a62a		38					.byte $38
.a62b						Assemble_rti:
.a62b		20 0b 83	jsr $830b		jsr	AssembleGroup4
>a62e		40					.byte $40
.a62f						Assemble_pha:
.a62f		20 0b 83	jsr $830b		jsr	AssembleGroup4
>a632		48					.byte $48
.a633						Assemble_cli:
.a633		20 0b 83	jsr $830b		jsr	AssembleGroup4
>a636		58					.byte $58
.a637						Assemble_phy:
.a637		20 0b 83	jsr $830b		jsr	AssembleGroup4
>a63a		5a					.byte $5a
.a63b						Assemble_rts:
.a63b		20 0b 83	jsr $830b		jsr	AssembleGroup4
>a63e		60					.byte $60
.a63f						Assemble_pla:
.a63f		20 0b 83	jsr $830b		jsr	AssembleGroup4
>a642		68					.byte $68
.a643						Assemble_sei:
.a643		20 0b 83	jsr $830b		jsr	AssembleGroup4
>a646		78					.byte $78
.a647						Assemble_ply:
.a647		20 0b 83	jsr $830b		jsr	AssembleGroup4
>a64a		7a					.byte $7a
.a64b						Assemble_dey:
.a64b		20 0b 83	jsr $830b		jsr	AssembleGroup4
>a64e		88					.byte $88
.a64f						Assemble_txa:
.a64f		20 0b 83	jsr $830b		jsr	AssembleGroup4
>a652		8a					.byte $8a
.a653						Assemble_tya:
.a653		20 0b 83	jsr $830b		jsr	AssembleGroup4
>a656		98					.byte $98
.a657						Assemble_txs:
.a657		20 0b 83	jsr $830b		jsr	AssembleGroup4
>a65a		9a					.byte $9a
.a65b						Assemble_tay:
.a65b		20 0b 83	jsr $830b		jsr	AssembleGroup4
>a65e		a8					.byte $a8
.a65f						Assemble_tax:
.a65f		20 0b 83	jsr $830b		jsr	AssembleGroup4
>a662		aa					.byte $aa
.a663						Assemble_clv:
.a663		20 0b 83	jsr $830b		jsr	AssembleGroup4
>a666		b8					.byte $b8
.a667						Assemble_tsx:
.a667		20 0b 83	jsr $830b		jsr	AssembleGroup4
>a66a		ba					.byte $ba
.a66b						Assemble_iny:
.a66b		20 0b 83	jsr $830b		jsr	AssembleGroup4
>a66e		c8					.byte $c8
.a66f						Assemble_dex:
.a66f		20 0b 83	jsr $830b		jsr	AssembleGroup4
>a672		ca					.byte $ca
.a673						Assemble_cld:
.a673		20 0b 83	jsr $830b		jsr	AssembleGroup4
>a676		d8					.byte $d8
.a677						Assemble_phx:
.a677		20 0b 83	jsr $830b		jsr	AssembleGroup4
>a67a		da					.byte $da
.a67b						Assemble_stp:
.a67b		20 0b 83	jsr $830b		jsr	AssembleGroup4
>a67e		db					.byte $db
.a67f						Assemble_inx:
.a67f		20 0b 83	jsr $830b		jsr	AssembleGroup4
>a682		e8					.byte $e8
.a683						Assemble_nop:
.a683		20 0b 83	jsr $830b		jsr	AssembleGroup4
>a686		ea					.byte $ea
.a687						Assemble_sed:
.a687		20 0b 83	jsr $830b		jsr	AssembleGroup4
>a68a		f8					.byte $f8
.a68b						Assemble_plx:
.a68b		20 0b 83	jsr $830b		jsr	AssembleGroup4
>a68e		fa					.byte $fa

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/constants.asm

.a68f						DecimalScalarTable:
>a68f		66 66 66 66				.dword $66666666 ; 0.1
>a693		de					.byte $de
>a694		1f 85 eb 51				.dword $51eb851f ; 0.01
>a698		db					.byte $db
>a699		4c 37 89 41				.dword $4189374c ; 0.001
>a69d		d8					.byte $d8
>a69e		ac 8b db 68				.dword $68db8bac ; 0.0001
>a6a2		d4					.byte $d4
>a6a3		24 d6 e2 53				.dword $53e2d624 ; 1e-05
>a6a7		d1					.byte $d1
>a6a8		83 de 1b 43				.dword $431bde83 ; 1e-06
>a6ac		ce					.byte $ce
>a6ad		6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>a6b1		ca					.byte $ca
>a6b2		89 3b e6 55				.dword $55e63b89 ; 1e-08
>a6b6		c7					.byte $c7
>a6b7		a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>a6bb		c4					.byte $c4
>a6bc		67 7f f3 6d				.dword $6df37f67 ; 1e-10
>a6c0		c0					.byte $c0
>a6c1		86 ff f5 57				.dword $57f5ff86 ; 1e-11
>a6c5		bd					.byte $bd

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.asm

.a6c6						SyntaxError:
.a6c6		a9 02		lda #$02		lda	#2
.a6c8		4c a3 95	jmp $95a3		jmp	ErrorHandler
.a6cb						RangeError:
.a6cb		a9 04		lda #$04		lda	#4
.a6cd		4c a3 95	jmp $95a3		jmp	ErrorHandler
.a6d0						TypeError:
.a6d0		a9 05		lda #$05		lda	#5
.a6d2		4c a3 95	jmp $95a3		jmp	ErrorHandler
.a6d5						ArgumentError:
.a6d5		a9 07		lda #$07		lda	#7
.a6d7		4c a3 95	jmp $95a3		jmp	ErrorHandler
.a6da						NotDoneError:
.a6da		a9 0c		lda #$0c		lda	#12
.a6dc		4c a3 95	jmp $95a3		jmp	ErrorHandler
.a6df						ErrorText:
>a6df		42 72 65 61 6b 00			.text	"Break",0
>a6e5		53 79 6e 74 61 78 20 65			.text	"Syntax error",0
>a6ed		72 72 6f 72 00
>a6f2		44 69 76 69 73 69 6f 6e			.text	"Division by zero",0
>a6fa		20 62 79 20 7a 65 72 6f 00
>a703		4f 75 74 20 6f 66 20 52			.text	"Out of Range",0
>a70b		61 6e 67 65 00
>a710		54 79 70 65 20 6d 69 73			.text	"Type mismatch",0
>a718		6d 61 74 63 68 00
>a71e		4f 75 74 20 6f 66 20 6d			.text	"Out of memory",0
>a726		65 6d 6f 72 79 00
>a72c		49 6c 6c 65 67 61 6c 20			.text	"Illegal argument",0
>a734		61 72 67 75 6d 65 6e 74 00
>a73d		53 74 6f 70 00				.text	"Stop",0
>a742		53 74 72 69 6e 67 20 74			.text	"String too long",0
>a74a		6f 6f 20 6c 6f 6e 67 00
>a752		41 73 73 65 72 74 69 6f			.text	"Assertion failed",0
>a75a		6e 20 66 61 69 6c 65 64 00
>a763		4f 75 74 20 6f 66 20 64			.text	"Out of data",0
>a76b		61 74 61 00
>a76f		55 6e 69 6d 70 6c 65 6d			.text	"Unimplemented",0
>a777		65 6e 74 65 64 00
>a77d		4e 6f 20 73 75 63 68 20			.text	"No such line number",0
>a785		6c 69 6e 65 20 6e 75 6d 62 65 72 00
>a791		52 65 74 75 72 6e 20 77			.text	"Return without Gosub",0
>a799		69 74 68 6f 75 74 20 47 6f 73 75 62 00
>a7a6		55 6e 74 69 6c 20 77 69			.text	"Until without Repeat",0
>a7ae		74 68 6f 75 74 20 52 65 70 65 61 74 00
>a7bb		57 65 6e 64 20 77 69 74			.text	"Wend without While",0
>a7c3		68 6f 75 74 20 57 68 69 6c 65 00
>a7ce		4e 65 78 74 20 77 69 74			.text	"Next without For",0
>a7d6		68 6f 75 74 20 46 6f 72 00
>a7df		42 41 53 49 43 20 53 74			.text	"BASIC Stack full",0
>a7e7		61 63 6b 20 66 75 6c 6c 00
>a7f0		4f 70 65 6e 20 53 74 72			.text	"Open Structure",0
>a7f8		75 63 74 75 72 65 00
>a7ff		45 6e 64 50 72 6f 63 20			.text	"EndProc without call",0
>a807		77 69 74 68 6f 75 74 20 63 61 6c 6c 00
>a814		41 72 72 61 79 20 61 6c			.text	"Array already defined",0
>a81c		72 65 61 64 79 20 64 65 66 69 6e 65 64 00
>a82a		41 72 72 61 79 20 73 69			.text	"Array size",0
>a832		7a 65 00
>a835		42 61 64 20 61 72 72 61			.text	"Bad array index",0
>a83d		79 20 69 6e 64 65 78 00
>a845		41 72 72 61 79 20 6e 6f			.text	"Array not declared",0
>a84d		74 20 64 65 63 6c 61 72 65 64 00
>a858		46 69 6c 65 20 6e 6f 74			.text	"File not found",0
>a860		20 66 6f 75 6e 64 00
>a867		53 74 6f 72 61 67 65 20			.text	"Storage error",0
>a86f		65 72 72 6f 72 00
>a875		56 65 72 69 66 79 20 66			.text	"Verify failed",0
>a87d		61 69 6c 65 64 00

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/timestamp.asm

>dc57		09 09 31 31 2f 30 31 2f			.text 9,9,"11/01/23 27"
>dc5f		32 33 20 32 37

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/graphics/gcommand.asm

.a883						RectangleCommand:
.a883		a9 44		lda #$44			lda 	#GCMD_FrameRect				; frame rectangle
.a885		80 02		bra $a889			bra 	ShapeDrawCmd
.a887						CircleCommand:
.a887		a9 48		lda #$48			lda 	#GCMD_FrameCircle 				; framed circle
.a889						ShapeDrawCmd:
.a889		20 13 a9	jsr $a913			jsr 	RunGraphicsCommand
.a88c						ShapeDraw:
.a88c		0d 78 07	ora $0778			ora 	gxFillSolid  				; adjust AXY for solid fill.
.a88f		4c 07 a9	jmp $a907			jmp 	ExecuteGraphicCommand	 	; and complete
.a892						SpriteCommand:
.a892		a2 00		ldx #$00			ldx 	#0
.a894		20 e3 a4	jsr $a4e3			jsr 	Evaluate8BitInteger 		; get image number.
.a897		5a		phy				phy
.a898		a9 0e		lda #$0e			lda 	#GCMD_SpriteUse 			; use that image.
.a89a		a6 58		ldx $58				ldx 	NSMantissa0
.a89c		e0 40		cpx #$40			cpx 	#64 						; 0-63 only
.a89e		b0 0d		bcs $a8ad			bcs 	_SCRange
.a8a0		a0 ff		ldy #$ff			ldy 	#255
.a8a2		20 35 80	jsr $8035			jsr 	GXGraphicDraw
.a8a5		a9 52		lda #$52			lda 	#GCMD_SpriteMove
.a8a7		7a		ply				ply
.a8a8		20 13 a9	jsr $a913			jsr 	RunGraphicsCommand
.a8ab		80 5a		bra $a907			bra 	ExecuteGraphicCommand
.a8ad						_SCRange:
.a8ad		4c cb a6	jmp $a6cb			jmp 	RangeError
.a8b0						ImageCommand:
.a8b0		a2 00		ldx #$00			ldx 	#0
.a8b2		20 e3 a4	jsr $a4e3			jsr 	Evaluate8BitInteger 		; get image number.
.a8b5		20 13 a9	jsr $a913			jsr 	RunGraphicsCommand
.a8b8						ImageRunDraw:
.a8b8		09 40		ora #$40			ora 	#GCMD_Move					; move cursor
.a8ba		20 35 80	jsr $8035			jsr 	GXGraphicDraw
.a8bd		ad 7e 07	lda $077e			lda 	gxDrawScale
.a8c0		0a		asl a				asl 	a
.a8c1		0a		asl a				asl 	a
.a8c2		0a		asl a				asl 	a
.a8c3		a8		tay				tay
.a8c4		a9 0c		lda #$0c			lda 	#GCMD_DrawSprite 			; image drawing
.a8c6		a6 58		ldx $58				ldx 	NSMantissa0
.a8c8		20 35 80	jsr $8035			jsr 	GXGraphicDraw
.a8cb		60		rts				rts
.a8cc						TextCommand:
.a8cc		a2 00		ldx #$00			ldx 	#0
.a8ce		20 a0 a4	jsr $a4a0			jsr 	EvaluateString 				; get text
.a8d1		20 13 a9	jsr $a913			jsr 	RunGraphicsCommand
.a8d4						TextRunDraw:
.a8d4		09 40		ora #$40			ora 	#GCMD_Move 					; move cursor
.a8d6		20 35 80	jsr $8035			jsr 	GXGraphicDraw
.a8d9		a0 00		ldy #$00			ldy 	#0
.a8db						_IRDLoop:
.a8db		a5 60		lda $60				lda 	NSMantissa1 				; access character
.a8dd		85 37		sta $37				sta 	zTemp0+1
.a8df		a5 58		lda $58				lda 	NSMantissa0
.a8e1		85 36		sta $36				sta 	zTemp0
.a8e3		b1 36		lda ($36),y			lda 	(zTemp0),y
.a8e5		f0 13		beq $a8fa			beq 	_IRDExit
.a8e7		5a		phy				phy									; save string pos
.a8e8		48		pha				pha 								; save char
.a8e9		ad 7e 07	lda $077e			lda 	gxDrawScale 				; get scale
.a8ec		0a		asl a				asl 	a
.a8ed		0a		asl a				asl 	a
.a8ee		0a		asl a				asl 	a
.a8ef		a8		tay				tay
.a8f0		a9 0a		lda #$0a			lda 	#GCMD_DrawFont 				; char drawing
.a8f2		fa		plx				plx 								; char to draw
.a8f3		20 35 80	jsr $8035			jsr 	GXGraphicDraw
.a8f6		7a		ply				ply 								; restore string pos
.a8f7		c8		iny				iny
.a8f8		90 e1		bcc $a8db			bcc 	_IRDLoop 					; go back if no error.
.a8fa						_IRDExit:
.a8fa		60		rts				rts
.a8fb						PlotCommand:
.a8fb		a9 50		lda #$50			lda 	#GCMD_Plot 					; command ID to use
.a8fd		20 13 a9	jsr $a913			jsr 	RunGraphicsCommand
.a900		80 05		bra $a907			bra 	ExecuteGraphicCommand
.a902						LineCommand:
.a902		a9 42		lda #$42			lda 	#GCMD_Line 						; command ID to use
.a904		20 13 a9	jsr $a913			jsr 	RunGraphicsCommand
.a907						ExecuteGraphicCommand:
.a907		0d 77 07	ora $0777			ora 	gxCommandID 				; make a full command
.a90a		20 35 80	jsr $8035			jsr 	GXGraphicDraw 				; draw it and exit
.a90d		b0 01		bcs $a910			bcs 	_EGCError
.a90f		60		rts				rts
.a910						_EGCError:
.a910		4c c6 a6	jmp $a6c6			jmp 	SyntaxError
.a913						RunGraphicsCommand:
.a913		8d 77 07	sta $0777			sta 	gxCommandID					; save TODO graphics command.
.a916		68		pla				pla 								; pop handler address
.a917		fa		plx				plx
.a918		1a		inc a				inc 	a
.a919		d0 01		bne $a91c			bne 	_RGINoCarry
.a91b		e8		inx				inx
.a91c						_RGINoCarry:
.a91c		8d 7c 07	sta $077c			sta 	gxHandler
.a91f		8e 7d 07	stx $077d			stx 	gxHandler+1
.a922						_RGICommandLoop:
.a922		b1 30		lda ($30),y			lda 	(codePtr),y
.a924		c8		iny				iny
.a925		c9 d7		cmp #$d7			cmp 	#KWD_TO						; is it TO x,y
.a927		f0 53		beq $a97c			beq 	_RGI_To
.a929		c9 c1		cmp #$c1			cmp 	#KWD_HERE 					; do it here.
.a92b		f0 55		beq $a982			beq 	_RGI_Here
.a92d		c9 80		cmp #$80			cmp 	#KWC_EOL 					; EOL or : , exit
.a92f		f0 3d		beq $a96e			beq 	_RGI_Exit
.a931		c9 3a		cmp #$3a			cmp 	#KWD_COLON
.a933		f0 39		beq $a96e			beq 	_RGI_Exit
.a935		c9 c9		cmp #$c9			cmp 	#KWD_OUTLINE 				; solid or outline
.a937		f0 3e		beq $a977			beq 	_RGI_Frame
.a939		c9 d3		cmp #$d3			cmp 	#KWD_SOLID
.a93b		f0 33		beq $a970			beq 	_RGI_Solid
.a93d		c9 b5		cmp #$b5			cmp 	#KWD_BY 					; by offset
.a93f		f0 4b		beq $a98c			beq 	_RGI_By
.a941		c9 bf		cmp #$bf			cmp 	#KWD_FROM 					; from
.a943		f0 17		beq $a95c			beq 	_RGI_Move2
.a945		c9 bc		cmp #$bc			cmp 	#KWD_DIM 					; dim (set scale)
.a947		f0 62		beq $a9ab			beq 	_RGI_Dim
.a949		c9 ba		cmp #$ba			cmp 	#KWD_COLOUR 				; colour or Color
.a94b		f0 74		beq $a9c1			beq 	_RGI_Colour
.a94d		c9 b9		cmp #$b9			cmp 	#KWD_COLOR
.a94f		f0 70		beq $a9c1			beq 	_RGI_Colour
.a951		ae 77 07	ldx $0777			ldx 	gxCommandID
.a954		e0 52		cpx #$52			cpx 	#GCMD_SpriteMove 			; if not sprite
.a956		d0 03		bne $a95b			bne 	_RGI_Move 					; move
.a958		4c e9 a9	jmp $a9e9			jmp		_RGI_SpriteInstructions
.a95b						_RGI_Move:
.a95b		88		dey				dey 								; unpick get.
.a95c						_RGI_Move2:
.a95c		20 0f aa	jsr $aa0f			jsr 	GCGetCoordinatePair 		; move to here
.a95f		20 36 aa	jsr $aa36			jsr 	GCCopyPairToStore 			; save
.a962		5a		phy				phy
.a963		20 2c aa	jsr $aa2c			jsr 	GCLoadAXY 					; load in
.a966		09 40		ora #$40			ora 	#GCMD_Move 					; move there
.a968		20 35 80	jsr $8035			jsr 	GXGraphicDraw
.a96b		7a		ply				ply
.a96c		80 b4		bra $a922			bra 	_RGICommandLoop 			; and go round
.a96e						_RGI_Exit:
.a96e		88		dey				dey 								; unpick : / EOL
.a96f		60		rts				rts
.a970						_RGI_Solid:
.a970		a9 02		lda #$02			lda 	#2
.a972		8d 78 07	sta $0778			sta 	gxFillSolid
.a975		80 ab		bra $a922			bra 	_RGICommandLoop
.a977						_RGI_Frame:
.a977		9c 78 07	stz $0778			stz 	gxFillSolid
.a97a		80 a6		bra $a922			bra 	_RGICommandLoop
.a97c						_RGI_To:
.a97c		20 0f aa	jsr $aa0f			jsr 	GCGetCoordinatePair 		; get coordinate pair into slot #1,#2
.a97f		20 36 aa	jsr $aa36			jsr 	GCCopyPairToStore
.a982						_RGI_Here:
.a982		5a		phy				phy
.a983		20 2c aa	jsr $aa2c			jsr 	GCLoadAXY 					; load it into AXY
.a986		20 e6 a9	jsr $a9e6			jsr 	_RGICallHandler 			; go do whatever it is.
.a989		7a		ply				ply
.a98a		80 96		bra $a922			bra 	_RGICommandLoop 			; and go round
.a98c						_RGI_By:
.a98c		20 1c aa	jsr $aa1c			jsr 	GCSignedCoordinatePair 		; get coordinate pair into slot #1,#2
.a98f		18		clc				clc
.a990		a5 59		lda $59				lda 	NSMantissa0+1 				; copy it into space.
.a992		6d 79 07	adc $0779			adc 	gxXPos
.a995		8d 79 07	sta $0779			sta 	gxXPos
.a998		a5 61		lda $61				lda 	NSMantissa1+1
.a99a		6d 7a 07	adc $077a			adc 	gxXPos+1
.a99d		8d 7a 07	sta $077a			sta 	gxXPos+1
.a9a0		a5 5a		lda $5a				lda 	NSMantissa0+2
.a9a2		18		clc				clc
.a9a3		6d 7b 07	adc $077b			adc 	gxYPos
.a9a6		8d 7b 07	sta $077b			sta 	gxYPos
.a9a9		80 d7		bra $a982			bra 	_RGI_Here
.a9ab						_RGI_Dim:
.a9ab		a2 01		ldx #$01			ldx	 	#1
.a9ad		20 e3 a4	jsr $a4e3			jsr 	Evaluate8BitInteger
.a9b0		a5 59		lda $59				lda 	NSMantissa0+1
.a9b2		c9 00		cmp #$00			cmp 	#0
.a9b4		f0 2d		beq $a9e3			beq 	_RGIRange
.a9b6		c9 09		cmp #$09			cmp 	#8+1
.a9b8		b0 29		bcs $a9e3			bcs		_RGIRange
.a9ba		3a		dec a				dec 	a
.a9bb		8d 7e 07	sta $077e			sta 	gxDrawScale
.a9be		4c 22 a9	jmp $a922			jmp 	_RGICommandLoop
.a9c1						_RGI_Colour:
.a9c1		a2 01		ldx #$01			ldx 	#1 							; colour
.a9c3		20 e3 a4	jsr $a4e3			jsr 	Evaluate8BitInteger
.a9c6		a2 02		ldx #$02			ldx 	#2 							; default zero for 2nd parameter
.a9c8		20 48 a5	jsr $a548			jsr 	NSMSetZero
.a9cb		b1 30		lda ($30),y			lda 	(codePtr),y
.a9cd		c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; check , => mode.
.a9cf		d0 04		bne $a9d5			bne 	_RGICDefaultMode
.a9d1		c8		iny				iny
.a9d2		20 e3 a4	jsr $a4e3			jsr 	Evaluate8BitInteger
.a9d5						_RGICDefaultMode:
.a9d5		5a		phy				phy
.a9d6		a9 08		lda #$08			lda 	#GCMD_Colour 				; set colour.
.a9d8		a6 59		ldx $59				ldx 	NSMantissa0+1
.a9da		a4 5a		ldy $5a				ldy 	NSMantissa0+2
.a9dc		20 35 80	jsr $8035			jsr 	GXGraphicDraw
.a9df		7a		ply				ply
.a9e0		4c 22 a9	jmp $a922			jmp 	_RGICommandLoop 			; and go round
.a9e3						_RGIRange:
.a9e3		4c cb a6	jmp $a6cb			jmp 	RangeError
.a9e6						_RGICallHandler:
.a9e6		6c 7c 07	jmp ($077c)			jmp 	(gxHandler)
.a9e9						_RGI_SpriteInstructions:
.a9e9		c9 c7		cmp #$c7			cmp 	#KWD_OFF
.a9eb		f0 07		beq $a9f4			beq 	_RGISpriteOff
.a9ed		c9 c2		cmp #$c2			cmp 	#KWD_IMAGE
.a9ef		f0 13		beq $aa04			beq 	_RGISetImage
.a9f1		4c 5b a9	jmp $a95b			jmp 	_RGI_Move
.a9f4						_RGISpriteOff:
.a9f4		5a		phy				phy
.a9f5		a0 01		ldy #$01			ldy 	#1
.a9f7		a2 00		ldx #$00			ldx 	#0
.a9f9						_RGIDoCommandLoop:
.a9f9		a9 10		lda #$10			lda 	#GCMD_SpriteImage
.a9fb		20 35 80	jsr $8035			jsr 	GXGraphicDraw
.a9fe		7a		ply				ply
.a9ff		b0 e2		bcs $a9e3			bcs 	_RGIRange
.aa01		4c 22 a9	jmp $a922			jmp 	_RGICommandLoop
.aa04						_RGISetImage:
.aa04		a2 01		ldx #$01			ldx 	#1
.aa06		20 e3 a4	jsr $a4e3			jsr 	Evaluate8BitInteger
.aa09		5a		phy				phy
.aa0a		aa		tax				tax
.aa0b		a0 00		ldy #$00			ldy 	#0
.aa0d		80 ea		bra $a9f9			bra 	_RGIDoCommandLoop
.aa0f						GCGetCoordinatePair:
.aa0f		a2 01		ldx #$01			ldx 	#1
.aa11		20 c8 a4	jsr $a4c8			jsr 	Evaluate16BitInteger
.aa14		20 92 95	jsr $9592			jsr 	CheckComma
.aa17		e8		inx				inx
.aa18		20 c8 a4	jsr $a4c8			jsr 	Evaluate16BitInteger
.aa1b		60		rts				rts
.aa1c						GCSignedCoordinatePair:
.aa1c		a2 01		ldx #$01			ldx 	#1
.aa1e		20 d2 a4	jsr $a4d2			jsr 	Evaluate16BitIntegerSigned
.aa21		20 92 95	jsr $9592			jsr 	CheckComma
.aa24		e8		inx				inx
.aa25		20 d2 a4	jsr $a4d2			jsr 	Evaluate16BitIntegerSigned
.aa28		60		rts				rts
.aa29						_GCCPRange:
.aa29		4c cb a6	jmp $a6cb			jmp 	RangeError
.aa2c						GCLoadAXY:
.aa2c		ad 7a 07	lda $077a			lda 	gxXPos+1
.aa2f		ae 79 07	ldx $0779			ldx 	gxXPos
.aa32		ac 7b 07	ldy $077b			ldy 	gxYPos
.aa35		60		rts				rts
.aa36						GCCopyPairToStore:
.aa36		a5 59		lda $59				lda 	NSMantissa0+1 				; copy it into space.
.aa38		8d 79 07	sta $0779			sta 	gxXPos
.aa3b		a5 61		lda $61				lda 	NSMantissa1+1
.aa3d		8d 7a 07	sta $077a			sta 	gxXPos+1
.aa40		a5 5a		lda $5a				lda 	NSMantissa0+2
.aa42		8d 7b 07	sta $077b			sta 	gxYPos
.aa45		60		rts				rts
.0777						gxCommandID:
>0777								.fill 	1
.0778						gxFillSolid:
>0778								.fill 	1
.0779						gxXPos:
>0779								.fill 	2
.077b						gxYPos:
>077b								.fill 	1
.077c						gxHandler:
>077c								.fill 	2
.077e						gxDrawScale:
>077e								.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/graphics/gcontrol.asm

.aa46						BitmapCtrl:
.aa46		b1 30		lda ($30),y			lda 	(codePtr),y
.aa48		c8		iny				iny
.aa49		a2 01		ldx #$01			ldx 	#1
.aa4b		c9 c8		cmp #$c8			cmp 	#KWD_ON
.aa4d		f0 11		beq $aa60			beq 	BitmapSwitch
.aa4f		ca		dex				dex
.aa50		c9 c7		cmp #$c7			cmp 	#KWD_OFF
.aa52		f0 0c		beq $aa60			beq 	BitmapSwitch
.aa54		20 e3 a4	jsr $a4e3			jsr 	Evaluate8BitInteger 		; get the colour
.aa57		5a		phy				phy
.aa58		aa		tax				tax
.aa59		a9 06		lda #$06			lda 	#GCMD_Clear					; clear to that colour
.aa5b		20 35 80	jsr $8035			jsr 	GXGraphicDraw
.aa5e		7a		ply				ply
.aa5f		60		rts				rts
.aa60						BitmapSwitch:
.aa60		5a		phy				phy
.aa61		a0 00		ldy #$00			ldy 	#0 							; gfx 1,on/off,0
.aa63		a9 02		lda #$02			lda 	#GCMD_BitmapCtl
.aa65		20 35 80	jsr $8035			jsr 	GXGraphicDraw
.aa68		a9 08		lda #$08			lda 	#GCMD_Colour				; set colour to $FF
.aa6a		a0 00		ldy #$00			ldy 	#0
.aa6c		a2 ff		ldx #$ff			ldx 	#$FF
.aa6e		20 35 80	jsr $8035			jsr 	GXGraphicDraw
.aa71		9c 78 07	stz $0778			stz 	gxFillSolid
.aa74		9c 79 07	stz $0779			stz 	gxXPos
.aa77		9c 7a 07	stz $077a			stz 	gxXPos+1
.aa7a		9c 7b 07	stz $077b			stz 	gxYPos
.aa7d		9c 7e 07	stz $077e			stz 	gxDrawScale
.aa80		a9 40		lda #$40			lda 	#GCMD_Move 						; home cursor
.aa82		a2 00		ldx #$00			ldx 	#0
.aa84		a0 00		ldy #$00			ldy 	#0
.aa86		20 35 80	jsr $8035			jsr 	GXGraphicDraw
.aa89		7a		ply				ply
.aa8a		60		rts				rts
.aa8b						SpritesCtrl:
.aa8b		b1 30		lda ($30),y			lda 	(codePtr),y
.aa8d		c8		iny				iny
.aa8e		a2 01		ldx #$01			ldx 	#1
.aa90		c9 c8		cmp #$c8			cmp 	#KWD_ON
.aa92		f0 08		beq $aa9c			beq 	SpriteSwitch
.aa94		ca		dex				dex
.aa95		c9 c7		cmp #$c7			cmp 	#KWD_OFF
.aa97		f0 03		beq $aa9c			beq 	SpriteSwitch
.aa99		4c c6 a6	jmp $a6c6			jmp 	SyntaxError
.aa9c						SpriteSwitch:
.aa9c		5a		phy				phy
.aa9d		a0 00		ldy #$00			ldy 	#0 							; gfx 2,on/off,0
.aa9f		a9 04		lda #$04			lda 	#GCMD_SpriteCtl
.aaa1		20 35 80	jsr $8035			jsr 	GXGraphicDraw
.aaa4		7a		ply				ply
.aaa5		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/graphics/gfx.asm

.aaa6						GfxCommand:
.aaa6		a2 00		ldx #$00			ldx 	#0
.aaa8		20 e3 a4	jsr $a4e3			jsr 	Evaluate8BitInteger 		; command
.aaab		20 92 95	jsr $9592			jsr 	CheckComma
.aaae		e8		inx				inx
.aaaf		20 c8 a4	jsr $a4c8			jsr 	Evaluate16BitInteger 		; X
.aab2		20 92 95	jsr $9592			jsr 	CheckComma
.aab5		e8		inx				inx
.aab6		20 e3 a4	jsr $a4e3			jsr 	Evaluate8BitInteger 		; Y
.aab9		a5 61		lda $61				lda 	NSMantissa1+1  				; shift bit 0 of X into CS, should now be zero
.aabb		4a		lsr a				lsr 	a
.aabc		d0 12		bne $aad0			bne 	_GfxError
.aabe		26 58		rol $58				rol 	NSMantissa0 				; rotate into command
.aac0		b0 0e		bcs $aad0			bcs 	_GfxError 					; bit 7 should have been zero
.aac2		5a		phy				phy 								; save pos
.aac3		a5 58		lda $58				lda 	NSMantissa0 				; do the command
.aac5		a6 59		ldx $59				ldx 	NSMantissa0+1
.aac7		a4 5a		ldy $5a				ldy 	NSMantissa0+2
.aac9		20 35 80	jsr $8035			jsr 	GXGraphicDraw
.aacc		b0 02		bcs $aad0			bcs 	_GfxError
.aace		7a		ply				ply 								; restore pos and exit.
.aacf		60		rts				rts
.aad0						_GfxError:
.aad0		4c cb a6	jmp $a6cb			jmp 	RangeError

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/graphics/hit.asm

.aad3						UnaryHit:
.aad3		fa		plx				plx
.aad4		a9 36		lda #$36			lda 	#zTemp0
.aad6		20 e3 a4	jsr $a4e3			jsr 	Evaluate8BitInteger 		; get sprite number 0
.aad9		20 92 95	jsr $9592			jsr 	CheckComma
.aadc		e8		inx				inx
.aadd		20 e3 a4	jsr $a4e3			jsr 	Evaluate8BitInteger 		; get sprite number 1
.aae0		20 8a 95	jsr $958a			jsr		CheckRightBracket
.aae3		ca		dex				dex 								; fix back up again.
.aae4		da		phx				phx 								; save X/Y
.aae5		5a		phy				phy
.aae6		b4 59		ldy $59,x			ldy 	NSMantissa0+1,x 			; get the sprite numbers into X/Y
.aae8		b5 58		lda $58,x			lda 	NSMantissa0,x
.aaea		aa		tax				tax
.aaeb		a9 12		lda #$12			lda 	#GCMD_SpriteCollide 		; command check collision.
.aaed		20 35 80	jsr $8035			jsr 	GXGraphicDraw 				; calculate result
.aaf0		1a		inc a				inc 	a 							; so 255 (fail) -> 0, otherwise 1,2,3,4 pixels etc.
.aaf1		7a		ply				ply 								; restore XY
.aaf2		fa		plx				plx
.aaf3		20 4a a5	jsr $a54a			jsr 	NSMSetByte 					; return the hit result
.aaf6		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/graphics/palette.asm

.aaf7						PaletteCommand:
.aaf7		a2 00		ldx #$00			ldx 	#0
.aaf9		20 e3 a4	jsr $a4e3			jsr 	Evaluate8BitInteger 		; colour
.aafc		20 92 95	jsr $9592			jsr 	CheckComma
.aaff		e8		inx				inx
.ab00		20 c8 a4	jsr $a4c8			jsr 	Evaluate16BitInteger 		; r
.ab03		20 92 95	jsr $9592			jsr 	CheckComma
.ab06		e8		inx				inx
.ab07		20 e3 a4	jsr $a4e3			jsr 	Evaluate8BitInteger 		; g
.ab0a		20 92 95	jsr $9592			jsr 	CheckComma
.ab0d		e8		inx				inx
.ab0e		20 e3 a4	jsr $a4e3			jsr 	Evaluate8BitInteger 		; b
.ab11		a5 58		lda $58				lda 	NSMantissa0 				; get colour #
.ab13		85 36		sta $36				sta 	zTemp0
.ab15		a9 34		lda #$34			lda 	#$D0 >> 2 					; MSB = D0/4
.ab17		85 37		sta $37				sta 	zTemp0+1
.ab19		06 36		asl $36				asl 	zTemp0 						; zTemp = $D000+Colour x 4
.ab1b		26 37		rol $37				rol	 	zTemp0+1
.ab1d		06 36		asl $36				asl 	zTemp0
.ab1f		26 37		rol $37				rol	 	zTemp0+1
.ab21		a9 01		lda #$01			lda 	#1 							; I/O Page 2
.ab23		85 01		sta $01				sta 	1
.ab25		5a		phy				phy
.ab26		a5 5b		lda $5b				lda 	NSMantissa0+3 				; fix to r,g,b
.ab28		92 36		sta ($36)			sta 	(zTemp0)
.ab2a		a0 01		ldy #$01			ldy 	#1
.ab2c		a5 5a		lda $5a				lda 	NSMantissa0+2
.ab2e		91 36		sta ($36),y			sta 	(zTemp0),y
.ab30		a5 59		lda $59				lda 	NSMantissa0+1
.ab32		c8		iny				iny
.ab33		91 36		sta ($36),y			sta 	(zTemp0),y
.ab35		7a		ply				ply
.ab36		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/hardware/crossdev.asm

.ab37						XLoadCommand:
.ab37		20 22 8f	jsr $8f22			jsr 	NewProgram
.ab3a		20 ee 84	jsr $84ee			jsr 	BackloadProgram
.ab3d		4c ad 85	jmp $85ad			jmp 	WarmStart
.ab40						XGoCommand:
.ab40		20 22 8f	jsr $8f22			jsr 	NewProgram
.ab43		20 ee 84	jsr $84ee			jsr 	BackloadProgram
.ab46		4c a0 90	jmp $90a0			jmp 	CommandRUN

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/hardware/event.asm

.ab49						UnaryEvent:
.ab49		fa		plx				plx
.ab4a		20 e3 ab	jsr $abe3			jsr 	TimerToStackX 				; timer in +0
.ab4d		e8		inx				inx  								; put reference into +1
.ab4e		20 f1 9e	jsr $9ef1			jsr 	EvaluateTerm
.ab51		b5 50		lda $50,x			lda 	NSStatus,x 					; check if is integer reference
.ab53		c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.ab55		d0 4c		bne $aba3			bne 	_UEType
.ab57		e8		inx				inx 								; put the step in +2
.ab58		20 92 95	jsr $9592			jsr 	CheckComma
.ab5b		20 c8 a4	jsr $a4c8			jsr 	Evaluate16BitInteger
.ab5e		20 8a 95	jsr $958a			jsr 	CheckRightBracket
.ab61		ca		dex				dex
.ab62		ca		dex				dex
.ab63		b5 59		lda $59,x			lda 	NSMantissa0+1,x 			; copy reference to zTemp0
.ab65		85 36		sta $36				sta 	zTemp0
.ab67		b5 61		lda $61,x			lda 	NSMantissa1+1,x
.ab69		85 37		sta $37				sta 	zTemp0+1
.ab6b		5a		phy				phy
.ab6c		a0 03		ldy #$03			ldy 	#3 							; check bit 7 of last bit, the packed sign bit
.ab6e		b1 36		lda ($36),y			lda 	(zTemp0),y
.ab70		30 2d		bmi $ab9f			bmi 	_UEFalse 					; exit if signed.
.ab72		a0 00		ldy #$00			ldy 	#0 							; has it timed out (24 bit)
.ab74		b5 58		lda $58,x			lda 	NSMantissa0,x
.ab76		d1 36		cmp ($36),y			cmp 	(zTemp0),y
.ab78		c8		iny				iny
.ab79		b5 60		lda $60,x			lda 	NSMantissa1,x
.ab7b		f1 36		sbc ($36),y			sbc		(zTemp0),y
.ab7d		c8		iny				iny
.ab7e		b5 68		lda $68,x			lda 	NSMantissa2,x
.ab80		f1 36		sbc ($36),y			sbc		(zTemp0),y
.ab82		90 1b		bcc $ab9f			bcc 	_UEFalse 					; no, return FALSE.
.ab84		18		clc				clc
.ab85		a0 00		ldy #$00			ldy 	#0 							; work out new value as timer() + step
.ab87		b5 58		lda $58,x			lda 	NSMantissa0,x
.ab89		75 5a		adc $5a,x			adc 	NSMantissa0+2,x
.ab8b		91 36		sta ($36),y			sta 	(zTemp0),y
.ab8d		c8		iny				iny
.ab8e		b5 60		lda $60,x			lda 	NSMantissa1,x
.ab90		75 62		adc $62,x			adc 	NSMantissa1+2,x
.ab92		91 36		sta ($36),y			sta 	(zTemp0),y
.ab94		c8		iny				iny
.ab95		b5 68		lda $68,x			lda 	NSMantissa2,x
.ab97		75 6a		adc $6a,x			adc 	NSMantissa2+2,x
.ab99		91 36		sta ($36),y			sta 	(zTemp0),y
.ab9b		7a		ply				ply
.ab9c		4c 10 96	jmp $9610			jmp 	ReturnTrue
.ab9f						_UEFalse:
.ab9f		7a		ply				ply 								; restore Y
.aba0		4c 1b 96	jmp $961b			jmp 	ReturnFalse 				; and return False
.aba3						_UEType:
.aba3		4c d0 a6	jmp $a6d0			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/hardware/joy.asm

.aba6						UnaryJoyX:
.aba6		18		clc				clc
.aba7		80 01		bra $abaa			bra 	JoyMain
.aba9						UnaryJoyY:
.aba9		38		sec				sec
.abaa						JoyMain:
.abaa		fa		plx				plx 								; get pos
.abab		08		php				php 								; save carry (set for Y)
.abac		20 e3 a4	jsr $a4e3			jsr 	Evaluate8BitInteger 		; ignore the parameter
.abaf		20 8a 95	jsr $958a			jsr 	CheckRightBracket
.abb2		20 2f 82	jsr $822f			jsr 	EXTReadController 			; read the controller.
.abb5		28		plp				plp
.abb6		b0 02		bcs $abba			bcs 	_JMNoShift 					; if X then shift bits 3,2 -> 1,0
.abb8		4a		lsr a				lsr 	a
.abb9		4a		lsr a				lsr 	a
.abba						_JMNoShift:
.abba		4a		lsr a				lsr 	a 							; if bit 0 set then left/up e.g. -1
.abbb		b0 07		bcs $abc4			bcs 	JMIsLeft
.abbd		4a		lsr a				lsr 	a 							; if bit 1 set then right/down e.g. +1
.abbe		b0 07		bcs $abc7			bcs 	JMIsRight
.abc0		20 48 a5	jsr $a548			jsr 	NSMSetZero 					; zero result
.abc3		60		rts				rts
.abc4						JMIsLeft:
.abc4		4c 10 96	jmp $9610			jmp 	ReturnTrue
.abc7						JMIsRight:
.abc7		a9 01		lda #$01			lda 	#1
.abc9		20 4a a5	jsr $a54a			jsr 	NSMSetByte
.abcc		60		rts				rts
.abcd						UnaryJoyB:
.abcd		fa		plx				plx 								; get pos
.abce		20 e3 a4	jsr $a4e3			jsr 	Evaluate8BitInteger 		; ignore the parameter
.abd1		20 8a 95	jsr $958a			jsr 	CheckRightBracket
.abd4		20 2f 82	jsr $822f			jsr 	EXTReadController 			; read the controller.
.abd7		29 10		and #$10			and 	#$10
.abd9		d0 e9		bne $abc4			bne 	JMIsLeft
.abdb		20 48 a5	jsr $a548			jsr 	NSMSetZero
.abde		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/hardware/timer.asm

.abdf						UnaryTimer:
.abdf		fa		plx				plx
.abe0		20 8a 95	jsr $958a			jsr 	CheckRightBracket
.abe3						TimerToStackX:
.abe3		20 48 a5	jsr $a548			jsr 	NSMSetZero 					; zero result
.abe6		64 01		stz $01				stz 	1 							; access I/O
.abe8		ad 59 d6	lda $d659			lda 	$D659 						; copy timer in
.abeb		95 58		sta $58,x			sta 	NSMantissa0,x
.abed		ad 5a d6	lda $d65a			lda 	$D65A
.abf0		95 60		sta $60,x			sta 	NSMantissa1,x
.abf2		ad 5b d6	lda $d65b			lda 	$D65B
.abf5		95 68		sta $68,x			sta 	NSMantissa2,x
.abf7		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/delete.asm

.abf8						MemoryDeleteLine:
.abf8		20 17 ac	jsr $ac17			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.abfb		b2 30		lda ($30)			lda 	(codePtr) 					; size to delete => y
.abfd		a8		tay				tay
.abfe						_MDDLLoop:
.abfe		b1 30		lda ($30),y			lda 	(codePtr),y 				; copy down
.ac00		92 30		sta ($30)			sta 	(codePtr)
.ac02		a5 30		lda $30				lda 	codePtr 					; check done the lot.
.ac04		c5 3a		cmp $3a				cmp 	zTemp2 						; has codePtr (copyFrom) reached the last byte to copy.
.ac06		d0 07		bne $ac0f			bne 	_MDLDLNext
.ac08		a5 31		lda $31				lda 	codePtr+1
.ac0a		c5 3b		cmp $3b				cmp 	zTemp2+1
.ac0c		d0 01		bne $ac0f			bne 	_MDLDLNext
.ac0e						_MDDLExit:
.ac0e		60		rts				rts
.ac0f						_MDLDLNext:
.ac0f		e6 30		inc $30				inc 	codePtr						; next byte
.ac11		d0 eb		bne $abfe			bne 	_MDDLLoop
.ac13		e6 31		inc $31				inc 	codePtr+1
.ac15		80 e7		bra $abfe			bra 	_MDDLLoop
.ac17						IMemoryFindEnd:
.ac17		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.ac19		85 3a		sta $3a				sta 	0+zTemp2
.ac1b		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.ac1d		85 3b		sta $3b				sta 	1+zTemp2
.ac1f						_MDLFELoop:
.ac1f		b2 3a		lda ($3a)			lda 	(zTemp2) 					; scan forward using offsets.
.ac21		f0 0b		beq $ac2e			beq 	_MDLFEExit
.ac23		18		clc				clc
.ac24		65 3a		adc $3a				adc 	zTemp2
.ac26		85 3a		sta $3a				sta 	zTemp2
.ac28		90 f5		bcc $ac1f			bcc 	_MDLFELoop
.ac2a		e6 3b		inc $3b				inc 	zTemp2+1
.ac2c		80 f1		bra $ac1f			bra 	_MDLFELoop
.ac2e						_MDLFEExit:
.ac2e		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/insert.asm

.ac2f						MemoryInsertLine:
.ac2f		08		php				php
.ac30		20 17 ac	jsr $ac17			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.ac33		a5 3b		lda $3b				lda 	zTemp2+1 					; is there space for the new line ?
.ac35		1a		inc a				inc 	a
.ac36		c9 7f		cmp #$7f			cmp 	#(BasicEnd >> 8)-1
.ac38		b0 36		bcs $ac70			bcs 	_MDLIError 					; no, fail.
.ac3a		28		plp				plp 								; do at a specific point or the end ?
.ac3b		90 08		bcc $ac45			bcc 	_MDLIFound 					; if specific point already set.
.ac3d		a5 3a		lda $3a				lda 	zTemp2 						; if CS on entry append, so put on the
.ac3f		85 30		sta $30				sta 	codePtr 					; end.
.ac41		a5 3b		lda $3b				lda 	zTemp2+1
.ac43		85 31		sta $31				sta 	codePtr+1
.ac45						_MDLIFound:
.ac45		ad 2a 04	lda $042a			lda 	tokenOffset 				; insert gap in Y, the offset, e.g. length of the new line
.ac48		a8		tay				tay
.ac49						_MDLIInsert:
.ac49		b2 3a		lda ($3a)			lda 	(zTemp2) 					; shift one byte up , at least one covers end case (copying link 0)
.ac4b		91 3a		sta ($3a),y			sta 	(zTemp2),y 					; work from top down.
.ac4d		a5 30		lda $30				lda 	codePtr 					; reached insert point ?
.ac4f		c5 3a		cmp $3a				cmp 	zTemp2
.ac51		d0 06		bne $ac59			bne 	_MDLINext
.ac53		a5 31		lda $31				lda 	codePtr+1
.ac55		c5 3b		cmp $3b				cmp 	zTemp2+1
.ac57		f0 0a		beq $ac63			beq 	_MDLIHaveSpace
.ac59						_MDLINext:
.ac59		a5 3a		lda $3a				lda 	zTemp2 						; if no, keep zTemp2 going backwards opening up space.
.ac5b		d0 02		bne $ac5f			bne 	_MDLINoBorrow
.ac5d		c6 3b		dec $3b				dec 	zTemp2+1
.ac5f						_MDLINoBorrow:
.ac5f		c6 3a		dec $3a				dec 	zTemp2
.ac61		80 e6		bra $ac49			bra 	_MDLIInsert
.ac63						_MDLIHaveSpace:
.ac63		ac 2a 04	ldy $042a			ldy 	tokenOffset 				; bytes to copy
.ac66		88		dey				dey 								; from offset-1 (last written) to the end of the buffer.
.ac67						_MDLICopy:
.ac67		b9 2a 04	lda $042a,y			lda 	tokenOffset,y
.ac6a		91 30		sta ($30),y			sta 	(codePtr),y
.ac6c		88		dey				dey
.ac6d		10 f8		bpl $ac67			bpl 	_MDLICopy
.ac6f		60		rts				rts
.ac70						_MDLIError:
.ac70		a9 06		lda #$06		lda	#6
.ac72		4c a3 95	jmp $95a3		jmp	ErrorHandler
.ac75						MDLAppendLine:
.ac75		86 37		stx $37				stx 	zTemp0+1 					; save new line at zTemp0
.ac77		85 36		sta $36				sta 	zTemp0
.ac79		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.ac7b		85 38		sta $38				sta 	0+zTemp1
.ac7d		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.ac7f		85 39		sta $39				sta 	1+zTemp1
.ac81		b2 38		lda ($38)			lda 	(zTemp1)
.ac83		d0 0a		bne $ac8f			bne 	_MDLANoInitialise
.ac85		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.ac87		8d 7f 07	sta $077f			sta 	0+AppendPointer
.ac8a		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.ac8c		8d 80 07	sta $0780			sta 	1+AppendPointer
.ac8f						_MDLANoInitialise:
.ac8f		18		clc				clc
.ac90		ad 7f 07	lda $077f			lda 	AppendPointer 				; copy append pointer to zTemp1 adding the offset as you go
.ac93		85 38		sta $38				sta 	zTemp1
.ac95		72 36		adc ($36)			adc 	(zTemp0)
.ac97		8d 7f 07	sta $077f			sta 	AppendPointer
.ac9a		ad 80 07	lda $0780			lda 	AppendPointer+1
.ac9d		85 39		sta $39				sta 	zTemp1+1
.ac9f		69 00		adc #$00			adc 	#0
.aca1		8d 80 07	sta $0780			sta 	AppendPointer+1
.aca4		a0 00		ldy #$00			ldy 	#0
.aca6						_MDLACopy:
.aca6		b1 36		lda ($36),y			lda 	(zTemp0),y 					; copy new line in
.aca8		91 38		sta ($38),y			sta 	(zTemp1),y
.acaa		c8		iny				iny
.acab		98		tya				tya
.acac		d2 36		cmp ($36)			cmp 	(zTemp0) 					; done whole line
.acae		d0 f6		bne $aca6			bne 	_MDLACopy
.acb0		a9 00		lda #$00			lda 	#0 							; end of program.
.acb2		91 38		sta ($38),y			sta 	(zTemp1),y
.acb4		60		rts				rts
.077f						AppendPointer:
>077f								.fill 	2

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/memory.asm

.acb5						MemoryNew:
.acb5		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.acb7		85 30		sta $30				sta 	codePtr
.acb9		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.acbb		85 31		sta $31				sta 	codePtr+1
.acbd		a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.acbf		92 30		sta ($30)			sta 	(codePtr)
.acc1		60		rts				rts
.acc2						MemoryInline:
.acc2		98		tya				tya 								; put address into stack,x
.acc3		18		clc				clc  								; get the offset, add codePtr
.acc4		65 30		adc $30				adc 	codePtr
.acc6		95 58		sta $58,x			sta 	NSMantissa0,x 				; store the result in the mantissa.
.acc8		a5 31		lda $31				lda 	codePtr+1
.acca		69 00		adc #$00			adc 	#0
.accc		95 60		sta $60,x			sta 	NSMantissa1,x
.acce		74 68		stz $68,x			stz 	NSMantissa2,x
.acd0		74 70		stz $70,x			stz 	NSMantissa3,x
.acd2		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./memory/memory.flat/search.asm

.acd3						MemorySearch:
.acd3		85 36		sta $36				sta 	zTemp0 						; save line number in zTemp0
.acd5		86 37		stx $37				stx 	zTemp0+1
.acd7		a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.acd9		85 30		sta $30				sta 	codePtr
.acdb		a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.acdd		85 31		sta $31				sta 	codePtr+1
.acdf						_MTAXLoop:
.acdf		b2 30		lda ($30)			lda 	(codePtr)
.ace1		18		clc				clc
.ace2		f0 21		beq $ad05			beq 	_MTAXExit 					; reached end, exit with CC.
.ace4		a0 01		ldy #$01			ldy 	#1 							; calculate current line# - requested line#
.ace6		b1 30		lda ($30),y			lda 	(codePtr),y
.ace8		38		sec				sec
.ace9		e5 36		sbc $36				sbc 	zTemp0
.aceb		85 38		sta $38				sta 	zTemp1 						; save interim to set Z
.aced		c8		iny				iny 								; do the MSB
.acee		b1 30		lda ($30),y			lda 	(codePtr),y
.acf0		e5 37		sbc $37				sbc 	zTemp0+1
.acf2		05 38		ora $38				ora 	zTemp1 						; will set Z if result is zero, doesn't affect carry flag
.acf4		f0 0f		beq $ad05			beq 	_MTAXExit	 				; found so exit (CS will be set)
.acf6		b0 0d		bcs $ad05			bcs 	_MTAXExit 					; current < required exit
.acf8		18		clc				clc
.acf9		b2 30		lda ($30)			lda 	(codePtr)					; get offset and add
.acfb		65 30		adc $30				adc 	codePtr
.acfd		85 30		sta $30				sta 	codePtr
.acff		90 02		bcc $ad03			bcc 	_CREExit
.ad01		e6 31		inc $31				inc 	codePtr+1 					; carry
.ad03						_CREExit:
.ad03		80 da		bra $acdf			bra 	_MTAXLoop
.ad05						_MTAXExit:
.ad05		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./font_update/newfont.asm

.ad06						UpdateFont:
.ad06		a5 01		lda $01				lda 	1 							; save position
.ad08		48		pha				pha
.ad09		a9 01		lda #$01			lda 	#1 							; switch to I/O block 1
.ad0b		85 01		sta $01				sta 	1
.ad0d		a9 34		lda #$34			lda 	#((FontBinary) & $FF)
.ad0f		85 36		sta $36				sta 	0+zTemp0
.ad11		a9 ad		lda #$ad			lda 	#((FontBinary) >> 8)
.ad13		85 37		sta $37				sta 	1+zTemp0
.ad15		a9 00		lda #$00			lda 	#(($C000) & $FF)
.ad17		85 38		sta $38				sta 	0+zTemp1
.ad19		a9 c0		lda #$c0			lda 	#(($C000) >> 8)
.ad1b		85 39		sta $39				sta 	1+zTemp1
.ad1d						_UFCopy1:
.ad1d		a0 00		ldy #$00			ldy 	#0
.ad1f						_UFCopy2:
.ad1f		b1 36		lda ($36),y			lda 	(zTemp0),y
.ad21		91 38		sta ($38),y			sta 	(zTemp1),y
.ad23		c8		iny				iny
.ad24		d0 f9		bne $ad1f			bne 	_UFCopy2
.ad26		e6 37		inc $37				inc 	zTemp0+1
.ad28		e6 39		inc $39				inc 	zTemp1+1
.ad2a		a5 39		lda $39				lda 	zTemp1+1
.ad2c		c9 c8		cmp #$c8			cmp 	#$C8
.ad2e		d0 ed		bne $ad1d			bne 	_UFCopy1
.ad30		68		pla				pla 								; restore.
.ad31		85 01		sta $01				sta 	1
.ad33		60		rts				rts
.ad34						FontBinary:
>ad34		06 09 10 3c 10 21 7e 00				.binary 	"../common/generated/font.bin"
>ad3c		00 00 00 00 00 00 ff ff 00 00 00 00 00 ff ff ff
>ad4c		00 00 00 00 ff ff ff ff 00 00 00 ff ff ff ff ff
>ad5c		00 00 ff ff ff ff ff ff 00 ff ff ff ff ff ff ff
>ad6c		ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff 00
>ad7c		ff ff ff ff ff ff 00 00 ff ff ff ff ff 00 00 00
>ad8c		ff ff ff ff 00 00 00 00 ff ff ff 00 00 00 00 00
>ad9c		ff ff 00 00 00 00 00 00 ff 00 00 00 00 00 00 00
>adac		08 00 22 00 08 00 02 00 88 00 22 00 88 00 22 00
>adbc		8a 00 2a 00 8a 00 2a 00 aa 00 aa 00 aa 00 aa 00
>adcc		aa 05 aa 11 aa 05 aa 11 aa 5f aa 77 aa 5f aa 77
>addc		aa ff aa ff aa ff aa ff af ff bb ff af ff bb ff
>adec		77 ff dd ff 77 ff dd ff 7f ff df ff 77 ff df ff
>adfc		ff ff df ff 77 ff dd ff bb ff ee ff aa ff aa ff
>ae0c		aa ff aa 77 aa dd aa 55 aa 55 22 55 88 55 00 55
>ae1c		aa 00 aa 00 88 00 22 00 33 99 cc 66 33 99 cc 66
>ae2c		cc 99 33 66 cc 99 33 66 00 00 00 00 00 00 00 00
>ae3c		08 08 08 08 00 00 08 00 24 24 24 00 00 00 00 00
>ae4c		24 24 7e 24 7e 24 24 00 08 1e 28 1c 0a 3c 08 00
>ae5c		00 62 64 08 10 26 46 00 30 48 48 30 4a 44 3a 00
>ae6c		08 08 08 00 00 00 00 00 04 08 10 10 10 08 04 00
>ae7c		20 10 08 08 08 10 20 00 00 2a 1c 3e 1c 2a 00 00
>ae8c		00 08 08 3e 08 08 00 00 00 00 00 00 00 08 08 10
>ae9c		00 00 00 7e 00 00 00 00 00 00 00 00 00 18 18 00
>aeac		00 02 04 08 10 20 40 00 3c 42 46 5a 62 42 3c 00
>aebc		08 18 08 08 08 08 1c 00 3c 42 02 3c 40 40 7e 00
>aecc		3c 42 02 1c 02 42 3c 00 04 44 44 44 7e 04 04 00
>aedc		7e 40 40 7c 02 02 7c 00 3c 40 40 7c 42 42 3c 00
>aeec		7e 42 04 08 10 10 10 00 3c 42 42 3c 42 42 3c 00
>aefc		3c 42 42 3e 02 02 3c 00 00 00 08 00 00 08 00 00
>af0c		00 00 08 00 00 08 08 10 08 10 20 40 20 10 08 00
>af1c		00 00 7e 00 7e 00 00 00 10 08 04 02 04 08 10 00
>af2c		3c 42 02 0c 10 00 10 00 3c 42 4e 52 4e 40 3c 00
>af3c		3c 42 42 7e 42 42 42 00 7c 42 42 7c 42 42 7c 00
>af4c		3c 42 40 40 40 42 3c 00 7c 42 42 42 42 42 7c 00
>af5c		7e 40 40 78 40 40 7e 00 7e 40 40 78 40 40 40 00
>af6c		3c 42 40 4e 42 42 3c 00 42 42 42 7e 42 42 42 00
>af7c		1c 08 08 08 08 08 1c 00 0e 04 04 04 04 44 38 00
>af8c		42 44 48 70 48 44 42 00 40 40 40 40 40 40 7e 00
>af9c		41 63 55 49 41 41 41 00 42 62 52 4a 46 42 42 00
>afac		3c 42 42 42 42 42 3c 00 7c 42 42 7c 40 40 40 00
>afbc		3c 42 42 42 4a 44 3a 00 7c 42 42 7c 48 44 42 00
>afcc		3c 42 40 3c 02 42 3c 00 3e 08 08 08 08 08 08 00
>afdc		42 42 42 42 42 42 3c 00 41 41 41 22 22 14 08 00
>afec		41 41 41 49 55 63 41 00 42 42 24 18 24 42 42 00
>affc		41 22 14 08 08 08 08 00 7f 02 04 08 10 20 7f 00
>b00c		3c 20 20 20 20 20 3c 00 00 40 20 10 08 04 02 00
>b01c		3c 04 04 04 04 04 3c 00 00 08 14 22 00 00 00 00
>b02c		00 00 00 00 00 00 00 ff 10 08 04 00 00 00 00 00
>b03c		00 00 3c 02 3e 42 3e 00 40 40 7c 42 42 42 7c 00
>b04c		00 00 3c 40 40 40 3c 00 02 02 3e 42 42 42 3e 00
>b05c		00 00 3c 42 7e 40 3c 00 0c 10 10 7c 10 10 10 00
>b06c		00 00 3e 42 42 3e 02 3c 40 40 7c 42 42 42 42 00
>b07c		08 00 18 08 08 08 08 00 04 00 0c 04 04 04 04 38
>b08c		40 40 44 48 50 68 44 00 18 08 08 08 08 08 1c 00
>b09c		00 00 76 49 49 49 49 00 00 00 7c 42 42 42 42 00
>b0ac		00 00 3c 42 42 42 3c 00 00 00 7c 42 42 7c 40 40
>b0bc		00 00 3e 42 42 3e 02 02 00 00 5c 60 40 40 40 00
>b0cc		00 00 3e 40 3c 02 7c 00 10 10 7c 10 10 10 0c 00
>b0dc		00 00 42 42 42 42 3e 00 00 00 42 42 42 24 18 00
>b0ec		00 00 41 49 49 49 36 00 00 00 42 24 18 24 42 00
>b0fc		00 00 42 42 42 3e 02 3c 00 00 7e 04 18 20 7e 00
>b10c		0c 10 10 20 10 10 0c 00 10 10 10 10 10 10 10 00
>b11c		30 08 08 04 08 08 30 00 00 00 30 49 06 00 00 00
>b12c		08 04 04 08 10 10 08 00 02 02 02 02 02 02 02 02
>b13c		04 04 04 04 04 04 04 04 08 08 08 08 08 08 08 08
>b14c		10 10 10 10 10 10 10 10 20 20 20 20 20 20 20 20
>b15c		40 40 40 40 40 40 40 40 80 80 80 80 80 80 80 80
>b16c		c0 c0 c0 c0 c0 c0 c0 c0 e0 e0 e0 e0 e0 e0 e0 e0
>b17c		f0 f0 f0 f0 f0 f0 f0 f0 f8 f8 f8 f8 f8 f8 f8 f8
>b18c		fc fc fc fc fc fc fc fc fe fe fe fe fe fe fe fe
>b19c		7f 7f 7f 7f 7f 7f 7f 7f 3f 3f 3f 3f 3f 3f 3f 3f
>b1ac		1f 1f 1f 1f 1f 1f 1f 1f 0f 0f 0f 0f 0f 0f 0f 0f
>b1bc		07 07 07 07 07 07 07 07 03 03 03 03 03 03 03 03
>b1cc		01 01 01 01 01 01 01 01 00 00 00 00 00 00 ff 00
>b1dc		00 00 00 00 00 ff 00 00 00 00 00 00 ff 00 00 00
>b1ec		00 00 00 ff 00 00 00 00 00 00 ff 00 00 00 00 00
>b1fc		00 ff 00 00 00 00 00 00 08 08 08 08 0f 08 08 08
>b20c		00 00 00 00 ff 08 08 08 08 08 08 08 ff 08 08 08
>b21c		08 08 08 08 ff 00 00 00 08 08 08 08 f8 08 08 08
>b22c		81 42 24 18 18 24 42 81 00 00 00 00 0f 08 08 08
>b23c		00 00 00 00 f8 08 08 08 08 08 08 08 0f 00 00 00
>b24c		08 08 08 08 f8 00 00 00 18 18 18 1f 1f 18 18 18
>b25c		00 00 00 ff ff 18 18 18 18 18 18 ff ff 18 18 18
>b26c		18 18 18 ff ff 00 00 00 18 18 18 f8 f8 18 18 18
>b27c		00 00 00 1f 1f 18 18 18 00 00 00 f8 f8 18 18 18
>b28c		18 18 18 1f 1f 00 00 00 18 18 18 f8 f8 00 00 00
>b29c		00 00 00 ff ff 00 00 00 18 18 18 18 18 18 18 18
>b2ac		00 00 00 00 03 07 0f 0f 00 00 00 00 c0 e0 f0 f0
>b2bc		0f 0f 07 03 00 00 00 00 f0 f0 e0 c0 00 00 00 00
>b2cc		00 3c 42 42 42 42 3c 00 00 3c 7e 7e 7e 7e 3c 00
>b2dc		00 7e 7e 7e 7e 7e 7e 00 00 00 00 18 18 00 00 00
>b2ec		00 00 00 00 08 00 00 00 ff 7f 3f 1f 0f 07 03 01
>b2fc		ff fe fc f8 f0 e0 c0 80 80 40 20 10 08 04 02 01
>b30c		01 02 04 08 10 20 40 80 00 00 00 00 03 04 08 08
>b31c		00 00 00 00 e0 10 08 08 08 08 08 04 03 00 00 00
>b32c		08 08 08 10 e0 00 00 00 00 00 00 00 00 00 00 55
>b33c		00 00 00 00 00 00 aa 55 00 00 00 00 00 55 aa 55
>b34c		00 00 00 00 aa 55 aa 55 00 00 00 55 aa 55 aa 55
>b35c		00 00 aa 55 aa 55 aa 55 00 55 aa 55 aa 55 aa 55
>b36c		aa 55 aa 55 aa 55 aa 55 aa 55 aa 55 aa 55 aa 00
>b37c		aa 55 aa 55 aa 55 00 00 aa 55 aa 55 aa 00 00 00
>b38c		aa 55 aa 55 00 00 00 00 aa 55 aa 00 00 00 00 00
>b39c		aa 55 00 00 00 00 00 00 aa 00 00 00 00 00 00 00
>b3ac		80 00 80 00 80 00 80 00 80 40 80 40 80 40 80 40
>b3bc		a0 40 a0 40 a0 40 a0 40 a0 50 a0 50 a0 50 a0 50
>b3cc		a8 50 a8 50 a8 50 a8 50 a8 54 a8 54 a8 54 a8 54
>b3dc		aa 54 aa 54 aa 54 aa 54 2a 55 2a 55 2a 55 2a 55
>b3ec		7e 81 9d a1 a1 9d 81 7e 2a 15 2a 15 2a 15 2a 15
>b3fc		0a 15 0a 15 0a 15 0a 15 0a 05 0a 05 0a 05 0a 05
>b40c		02 05 02 05 02 05 02 05 02 01 02 01 02 01 02 01
>b41c		00 01 00 01 00 01 00 01 00 00 03 06 6c 38 10 00
>b42c		7e 81 bd a1 b9 a1 a1 7e 00 00 3c 3c 3c 3c 00 00
>b43c		00 3c 42 5a 5a 42 3c 00 00 00 18 3c 3c 18 00 00
>b44c		ff 81 81 81 81 81 81 ff 01 03 07 0f 1f 3f 7f ff
>b45c		80 c0 e0 f0 f8 fc fe ff 3f 1f 0f 07 03 01 00 00
>b46c		fc f8 f0 e0 c0 80 00 00 00 00 01 03 07 0f 1f 3f
>b47c		00 00 80 c0 e0 f0 f8 fc 0f 07 03 01 00 00 00 00
>b48c		f0 e0 c0 80 00 00 00 00 00 00 00 00 01 03 07 0f
>b49c		00 00 00 00 80 c0 e0 f0 03 01 00 00 00 00 00 00
>b4ac		c0 80 00 00 00 00 00 00 00 00 00 00 00 00 01 03
>b4bc		00 00 00 00 00 00 80 c0 00 00 00 00 0f 0f 0f 0f
>b4cc		00 00 00 00 f0 f0 f0 f0 0f 0f 0f 0f 00 00 00 00
>b4dc		f0 f0 f0 f0 00 00 00 00 f0 f0 f0 f0 0f 0f 0f 0f
>b4ec		0f 0f 0f 0f f0 f0 f0 f0 00 00 00 3e 1c 08 00 00
>b4fc		00 00 08 18 38 18 08 00 00 00 10 18 1c 18 10 00
>b50c		00 00 08 1c 3e 00 00 00 36 7f 7f 7f 3e 1c 08 00
>b51c		08 1c 3e 7f 3e 1c 08 00 08 1c 3e 7f 7f 1c 3e 00
>b52c		08 1c 2a 77 2a 08 1c 00

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/sound/effects.asm

.b534						PingCommand:
.b534		5a		phy				phy 								; save pos
.b535		a9 01		lda #$01			lda 	#1 						; push channel.
.b537		48		pha				pha
.b538		a9 c8		lda #$c8			lda 	#200 						; pitch LSB
.b53a		a2 06		ldx #$06			ldx 	#6 						; length
.b53c		a0 00		ldy #$00			ldy 	#0 						; slide LSB
.b53e		80 24		bra $b564			bra 	SoundEffectCommand
.b540						ZapCommand:
.b540		5a		phy				phy 								; save pos
.b541		a9 01		lda #$01			lda 	#1 						; push channel.
.b543		48		pha				pha
.b544		a9 ff		lda #$ff			lda 	#255 						; pitch LSB
.b546		a2 0a		ldx #$0a			ldx 	#10 						; length
.b548		a0 0a		ldy #$0a			ldy 	#10 						; slide LSB
.b54a		80 18		bra $b564			bra 	SoundEffectCommand
.b54c						ShootCommand:
.b54c		5a		phy				phy 								; save pos
.b54d		a9 03		lda #$03			lda 	#3 						; push channel.
.b54f		48		pha				pha
.b550		a9 20		lda #$20			lda 	#32 						; pitch LSB
.b552		a2 04		ldx #$04			ldx 	#4 						; length
.b554		a0 00		ldy #$00			ldy 	#0 						; slide LSB
.b556		80 0c		bra $b564			bra 	SoundEffectCommand
.b558						Explode:
.b558		5a		phy				phy 								; save pos
.b559		a9 03		lda #$03			lda 	#3 						; push channel.
.b55b		48		pha				pha
.b55c		a9 50		lda #$50			lda 	#80 						; pitch LSB
.b55e		a2 0a		ldx #$0a			ldx 	#10 						; length
.b560		a0 00		ldy #$00			ldy 	#0 						; slide LSB
.b562		80 00		bra $b564			bra 	SoundEffectCommand
.b564						SoundEffectCommand:
.b564		8d 81 07	sta $0781			sta 	SoundCommandBlock 			; set up the command block in sound.asm
.b567		9c 82 07	stz $0782			stz 	SoundCommandBlock+1
.b56a		a9 0f		lda #$0f			lda 	#15
.b56c		8d 83 07	sta $0783			sta 	SoundCommandBlock+2
.b56f		8e 84 07	stx $0784			stx 	SoundCommandBlock+3
.b572		8c 85 07	sty $0785			sty 	SoundCommandBlock+4
.b575		9c 86 07	stz $0786			stz 	SoundCommandBlock+5
.b578		68		pla				pla
.b579		09 10		ora #$10			ora 	#$10  						; execute command $11
.b57b		a2 81		ldx #$81			ldx 	#(SoundCommandBlock & $FF)
.b57d		a0 07		ldy #$07			ldy 	#(SoundCommandBlock >> 8)
.b57f		20 3f 80	jsr $803f			jsr 	SNDCommand
.b582		7a		ply				ply
.b583		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/sound/playing.asm

.b584						UnaryPlaying:
.b584		fa		plx				plx
.b585		20 e3 a4	jsr $a4e3			jsr 	Evaluate8BitInteger 		; get channel #
.b588		48		pha				pha
.b589		20 8a 95	jsr $958a			jsr		CheckRightBracket
.b58c		68		pla				pla
.b58d		c9 04		cmp #$04			cmp 	#4
.b58f		b0 0c		bcs $b59d			bcs 	_UPNotPlaying
.b591		09 20		ora #$20			ora 	#$20 						; query playing ?
.b593		20 3f 80	jsr $803f			jsr 	SNDCommand
.b596		c9 00		cmp #$00			cmp 	#0
.b598		f0 03		beq $b59d			beq 	_UPNotPlaying
.b59a		4c 10 96	jmp $9610			jmp 	ReturnTrue
.b59d						_UPNotPlaying:
.b59d		4c 1b 96	jmp $961b			jmp 	ReturnFalse

;******  Return to file: _basic.asm


;******  Processing file: ./module.interface/sound/sound.asm

.b5a0						SoundCommand:
.b5a0		b1 30		lda ($30),y			lda 	(codePtr),y
.b5a2		c9 c7		cmp #$c7			cmp 	#KWD_OFF 					; SOUND OFF ?
.b5a4		d0 09		bne $b5af			bne 	_SNDMain
.b5a6		c8		iny				iny 								; skip OFF
.b5a7		a9 3f		lda #$3f			lda 	#$3F 						; call command $3F (silence)
.b5a9		5a		phy				phy
.b5aa		20 3f 80	jsr $803f			jsr 	SNDCommand
.b5ad		7a		ply				ply
.b5ae		60		rts				rts
.b5af						_SNDMain:
.b5af		a2 00		ldx #$00			ldx 	#0
.b5b1		20 e3 a4	jsr $a4e3			jsr 	Evaluate8BitInteger 		; channel
.b5b4		c9 04		cmp #$04			cmp 	#4 							; must be 0-3
.b5b6		b0 4b		bcs $b603			bcs 	_SndError
.b5b8		e8		inx				inx 								; do the rest in slot 1.
.b5b9		20 92 95	jsr $9592			jsr 	CheckComma
.b5bc		20 c8 a4	jsr $a4c8			jsr 	Evaluate16BitInteger 		; Pitch
.b5bf		b5 60		lda $60,x			lda 	NSMantissa1,x 				; must be 10 bit
.b5c1		c9 10		cmp #$10			cmp 	#16
.b5c3		b0 3e		bcs $b603			bcs 	_SndError
.b5c5		8d 82 07	sta $0782			sta 	SoundCommandBlock+1 		; Pitch (2 bytes + 0)
.b5c8		b5 58		lda $58,x			lda 	NSMantissa0,x
.b5ca		8d 81 07	sta $0781			sta 	SoundCommandBlock
.b5cd		20 92 95	jsr $9592			jsr 	CheckComma
.b5d0		20 e3 a4	jsr $a4e3			jsr 	Evaluate8BitInteger 		; Length (1 byte + 3)
.b5d3		8d 84 07	sta $0784			sta 	SoundCommandBlock+3
.b5d6		a9 0f		lda #$0f			lda 	#15
.b5d8		8d 83 07	sta $0783			sta 	SoundCommandBlock+2 		; Volume (1 byte + 2)
.b5db		9c 85 07	stz $0785			stz 	SoundCommandBlock+4 		; default slide (2 bytes +4)
.b5de		9c 86 07	stz $0786			stz 	SoundCommandBlock+5
.b5e1		b1 30		lda ($30),y			lda 	(codePtr),y
.b5e3		c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.b5e5		d0 0e		bne $b5f5			bne 	_SNDPlay
.b5e7		c8		iny				iny
.b5e8		20 d2 a4	jsr $a4d2			jsr 	Evaluate16BitIntegerSigned 	; Slide
.b5eb		b5 58		lda $58,x			lda 	NSMantissa0,x 				; Slide (2 bytes + 4)
.b5ed		8d 85 07	sta $0785			sta 	SoundCommandBlock+4
.b5f0		b5 60		lda $60,x			lda 	NSMantissa1,x
.b5f2		8d 86 07	sta $0786			sta 	SoundCommandBlock+5
.b5f5						_SNDPlay:
.b5f5		5a		phy				phy
.b5f6		a5 58		lda $58				lda 	NSMantissa0 				; channel.
.b5f8		09 10		ora #$10			ora 	#$10 						; 1x = Queue sound
.b5fa		a2 81		ldx #$81			ldx 	#(SoundCommandBlock & $FF)
.b5fc		a0 07		ldy #$07			ldy 	#(SoundCommandBlock >> 8)
.b5fe		20 3f 80	jsr $803f			jsr 	SNDCommand
.b601		7a		ply				ply
.b602		60		rts				rts
.b603						_SndError:
.b603		4c cb a6	jmp $a6cb			jmp 	RangeError
.0781						SoundCommandBlock:
>0781								.fill 	6

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/bytes.asm

.b606						StackPushByte:
.b606		48		pha				pha 								; save byte on stack
.b607		a5 34		lda $34				lda 	basicStack 					; decrement basic stack pointer
.b609		d0 08		bne $b613			bne 	_SPBNoBorrow
.b60b		c6 35		dec $35				dec 	basicStack+1 				; borrow
.b60d		a5 35		lda $35				lda 	basicStack+1 				; check range.
.b60f		c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.b611		90 06		bcc $b619			bcc 	_SPBMemory
.b613						_SPBNoBorrow:
.b613		c6 34		dec $34				dec 	basicStack
.b615		68		pla				pla 								; get back and write
.b616		92 34		sta ($34)			sta 	(basicStack)
.b618		60		rts				rts
.b619						_SPBMemory:
.b619		a9 12		lda #$12		lda	#18
.b61b		4c a3 95	jmp $95a3		jmp	ErrorHandler
.b61e						StackPopByte:
.b61e		b2 34		lda ($34)			lda 	(basicStack) 				; bump the stack pointer.
.b620		e6 34		inc $34				inc 	basicStack
.b622		d0 02		bne $b626			bne 	_SPBNoCarry
.b624		e6 35		inc $35				inc 	basicStack+1
.b626						_SPBNoCarry:
.b626		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/frames.asm

.b627						StackOpen:
.b627		48		pha				pha 								; save frame byte
.b628		29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.b62a		0a		asl a				asl 	a 							; claim twice this for storage
.b62b		49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.b62d		38		sec				sec 								; so basically subtracting from
.b62e		65 34		adc $34				adc 	basicStack 	 				; basicStack
.b630		85 34		sta $34				sta 	basicStack
.b632		b0 09		bcs $b63d			bcs 	_SONoBorrow
>b634		db						.byte 	$DB 						; causes a break in the emulator
.b635		c6 35		dec $35				dec 	basicStack+1
.b637		a5 35		lda $35				lda 	basicStack+1 				; have we reached stack overflow
.b639		c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.b63b		90 04		bcc $b641			bcc 	_SOMemory
.b63d						_SONoBorrow:
.b63d		68		pla				pla 								; get marker back and write at TOS
.b63e		92 34		sta ($34)			sta 	(basicStack)
.b640		60		rts				rts
.b641						_SOMemory:
.b641		a9 12		lda #$12		lda	#18
.b643		4c a3 95	jmp $95a3		jmp	ErrorHandler
.b646						StackClose:
.b646		b2 34		lda ($34)			lda 	(basicStack) 				; get TOS marker
.b648		29 0f		and #$0f			and 	#$0F 						; bytes to add back
.b64a		0a		asl a				asl 	a 							; claim twice this.
.b64b		65 34		adc $34				adc 	basicStack 					; add to the stack pointer.
.b64d		85 34		sta $34				sta 	basicStack
.b64f		90 02		bcc $b653			bcc 	_SCExit
.b651		e6 35		inc $35				inc 	basicStack+1
.b653						_SCExit:
.b653		60		rts				rts
.b654						StackCheckFrame:
.b654		48		pha				pha
.b655						_StackRemoveLocals:
.b655		b2 34		lda ($34)			lda 	(basicStack) 				; check for local, keep popping them
.b657		c9 03		cmp #$03			cmp 	#STK_LOCALS+1 				; is the frame a local ? S or N are 1/0
.b659		b0 05		bcs $b660			bcs 	_SCNoLocal
.b65b		20 18 8e	jsr $8e18			jsr 	LocalPopValue 				; restore the local value
.b65e		80 f5		bra $b655			bra 	_StackRemoveLocals 			; gr round again
.b660						_SCNoLocal:
.b660		68		pla				pla 								; get the frame check.
.b661		52 34		eor ($34)			eor 	(basicStack) 				; xor with toS marker
.b663		29 f0		and #$f0			and 	#$F0 						; check type bits
.b665		d0 01		bne $b668			bne 	_SCFError 					; different, we have structures mixed up
.b667		60		rts				rts
.b668						_SCFError:
.b668		8a		txa				txa 								; report error X
.b669		4c a3 95	jmp $95a3			jmp 	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/location.asm

.b66c						STKSaveCodePosition:
.b66c		5a		phy				phy
.b66d		98		tya				tya 								; save Y
.b66e		a0 05		ldy #$05			ldy 	#5
.b670		91 34		sta ($34),y			sta 	(basicStack),y
.b672		88		dey				dey 								; save Code Pointer
.b673						_STKSaveLoop:
.b673		b9 2f 00	lda $002f,y			lda 	safePtr-1,y 				; allows us to access the pointer w/out issues.
.b676		91 34		sta ($34),y			sta 	(basicStack),y
.b678		88		dey				dey
.b679		d0 f8		bne $b673			bne 	_STKSaveLoop
.b67b		7a		ply				ply
.b67c		60		rts				rts
.b67d						STKLoadCodePosition:
.b67d		a0 01		ldy #$01			ldy 	#1 							; load code pointer back
.b67f						_STKLoadLoop:
.b67f		b1 34		lda ($34),y			lda 	(basicStack),y
.b681		99 2f 00	sta $002f,y			sta 	safePtr-1,y
.b684		c8		iny				iny
.b685		c0 05		cpy #$05			cpy 	#5
.b687		d0 f6		bne $b67f			bne 	_STKLoadLoop
.b689		b1 34		lda ($34),y			lda 	(basicStack),y 				; get Y offset
.b68b		a8		tay				tay
.b68c		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/setup.asm

.b68d						StackReset:
.b68d		a9 ff		lda #$ff			lda 	#((BasicStackBase+BasicStackSize-1) & $FF)
.b68f		85 34		sta $34				sta 	0+basicStack
.b691		a9 0f		lda #$0f			lda 	#((BasicStackBase+BasicStackSize-1) >> 8)
.b693		85 35		sta $35				sta 	1+basicStack
.b695		a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.b697		92 34		sta ($34)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.b699		60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/concrete.asm

.b69a						StringConcrete:
.b69a		5a		phy				phy 								; save position on stack
.b69b		20 dd a0	jsr $a0dd			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.b69e		b5 58		lda $58,x			lda 	NSMantissa0,x 				; copy target string to zTemp1
.b6a0		85 38		sta $38				sta 	zTemp1
.b6a2		b5 60		lda $60,x			lda 	NSMantissa1,x
.b6a4		85 39		sta $39				sta 	zTemp1+1
.b6a6		a0 ff		ldy #$ff			ldy 	#$FF	 					; calculate string length
.b6a8						_SALength:
.b6a8		c8		iny				iny
.b6a9		b1 38		lda ($38),y			lda 	(zTemp1),y
.b6ab		d0 fb		bne $b6a8			bne 	_SALength
.b6ad		c0 fd		cpy #$fd			cpy 	#253 						; string too long - cannot concrete.
.b6af		b0 3d		bcs $b6ee			bcs 	_SALengthError
.b6b1		98		tya				tya 				 				; length of the new string
.b6b2		18		clc				clc
.b6b3		69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.b6b5		90 02		bcc $b6b9			bcc 	_SAHaveLength
.b6b7		a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.b6b9						_SAHaveLength:
.b6b9		48		pha				pha 								; save length.
.b6ba		38		sec				sec
.b6bb		49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.b6bd		6d 0e 04	adc $040e			adc 	stringMemory
.b6c0		8d 0e 04	sta $040e			sta 	stringMemory
.b6c3		85 3a		sta $3a				sta 	zTemp2 						; update storage address
.b6c5		95 58		sta $58,x			sta 	NSMantissa0,x 				; update mantissa address
.b6c7		a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.b6c9		6d 0f 04	adc $040f			adc 	stringMemory+1
.b6cc		8d 0f 04	sta $040f			sta 	stringMemory+1
.b6cf		85 3b		sta $3b				sta 	zTemp2+1
.b6d1		95 60		sta $60,x			sta 	NSMantissa1,x
.b6d3		68		pla				pla 								; save length-3 (chars allowed) in first byte
.b6d4		38		sec				sec
.b6d5		e9 03		sbc #$03			sbc 	#3
.b6d7		92 3a		sta ($3a)			sta 	(zTemp2)
.b6d9		a9 00		lda #$00			lda 	#0 							; clear the status byte.
.b6db		a0 01		ldy #$01			ldy 	#1
.b6dd		91 3a		sta ($3a),y			sta 	(zTemp2),y
.b6df						_SACopyNewString:
.b6df		a0 00		ldy #$00			ldy 	#0
.b6e1						_SACopyNSLoop:
.b6e1		b1 38		lda ($38),y			lda 	(zTemp1),y 					; get character
.b6e3		c8		iny				iny 								; write two on in string storage
.b6e4		c8		iny				iny
.b6e5		91 3a		sta ($3a),y			sta 	(zTemp2),y
.b6e7		88		dey				dey 								; this makes it one one.
.b6e8		c9 00		cmp #$00			cmp 	#0 							; until EOS copied
.b6ea		d0 f5		bne $b6e1			bne 	_SACopyNSLoop
.b6ec		7a		ply				ply
.b6ed		60		rts				rts
.b6ee						_SALengthError:
.b6ee		a9 09		lda #$09		lda	#9
.b6f0		4c a3 95	jmp $95a3		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/stringalloc.asm

.b6f3						StringSystemInitialise:
.b6f3		a9 ff		lda #$ff			lda 	#((EndVariableSpace-1) & $FF)
.b6f5		8d 0e 04	sta $040e			sta 	0+stringMemory
.b6f8		a9 1f		lda #$1f			lda 	#((EndVariableSpace-1) >> 8)
.b6fa		8d 0f 04	sta $040f			sta 	1+stringMemory
.b6fd		9c ff 1f	stz $1fff			stz 	EndVariableSpace-1 			; put a zero at the end, so know end of string memory.
.b700		60		rts				rts
.b701						StringSpaceInitialise:
.b701		20 dd a0	jsr $a0dd			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.b704		a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.b706		8d 10 04	sta $0410			sta 	stringInitialised
.b709		ad 0e 04	lda $040e			lda 	stringMemory 				; allocate 256 bytes for one concreted string
.b70c		8d 11 04	sta $0411			sta 	stringTempPointer 			; so temporary string space is allocated below that.
.b70f		ad 0f 04	lda $040f			lda 	stringMemory+1
.b712		3a		dec a				dec 	a
.b713		8d 12 04	sta $0412			sta 	stringTempPointer+1
.b716		60		rts				rts
.b717						StringTempAllocate:
.b717		c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.b719		b0 30		bcs $b74b			bcs 	_STALength
.b71b		2c 10 04	bit $0410			bit 	stringInitialised 			; already initialised
.b71e		30 05		bmi $b725			bmi 	_STAAllocate
.b720		48		pha				pha 								; save value to subtract.
.b721		20 01 b7	jsr $b701			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.b724		68		pla				pla 								; restore it
.b725						_STAAllocate:
.b725		49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.b727		18		clc				clc  								; deliberate allows one more
.b728		6d 11 04	adc $0411			adc 	stringTempPointer 			; subtract from temp pointer
.b72b		8d 11 04	sta $0411			sta 	stringTempPointer
.b72e		95 58		sta $58,x			sta 	NSMantissa0,x 				; address in mantissa
.b730		85 3c		sta $3c				sta 	zsTemp 						; and zsTemp
.b732		ad 12 04	lda $0412			lda 	stringTempPointer+1
.b735		69 ff		adc #$ff			adc 	#$FF
.b737		8d 12 04	sta $0412			sta 	stringTempPointer+1
.b73a		85 3d		sta $3d				sta 	zsTemp+1
.b73c		95 60		sta $60,x			sta 	NSMantissa1,x
.b73e		74 68		stz $68,x			stz 	NSMantissa2,x 				; set the typing data and the upper address bytes.
.b740		74 70		stz $70,x			stz 	NSMantissa3,x
.b742		a9 10		lda #$10			lda 	#NSTString
.b744		95 50		sta $50,x			sta 	NSStatus,x
.b746		a9 00		lda #$00			lda 	#0 							; clear the target string
.b748		92 3c		sta ($3c)			sta 	(zsTemp)
.b74a		60		rts				rts
.b74b						_STALength:
.b74b		a9 09		lda #$09		lda	#9
.b74d		4c a3 95	jmp $95a3		jmp	ErrorHandler
.b750						StringTempWrite:
.b750		48		pha				pha
.b751		92 3c		sta ($3c)			sta 	(zsTemp) 					; write byte
.b753		e6 3c		inc $3c				inc 	zsTemp 						; bump pointer
.b755		d0 02		bne $b759			bne 	_STWNoCarry
.b757		e6 3d		inc $3d				inc 	zsTemp+1
.b759						_STWNoCarry:
.b759		a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.b75b		92 3c		sta ($3c)			sta 	(zsTemp)
.b75d		68		pla				pla
.b75e		60		rts				rts

;******  Return to file: _basic.asm

.b75f						StartModuleCode:

;******  Processing file: ../modules/_build/_hardware.module

=1						hardwareIntegrated=1
=0						CONBlack = 0
=1						CONGrey = 1
=2						CONDarkBlue = 2
=3						CONGreen = 3
=4						CONPurple = 4
=5						CONBrown = 5
=6						CONOrange = 6
=7						CONCyan = 7
=8						CONDarkGrey = 8
=9						CONLightGrey = 9
=10						CONLightBlue = 10
=11						CONLightGreen = 11
=12						CONPink = 12
=13						CONRed = 13
=14						CONYellow = 14
=15						CONWhite = 15
=9						CONForeground = CONLightGrey
=2						CONBackground = CONDarkBlue
=9						CLICommandLine = CONLightGrey
=5						CLIFComment = CONBrown
=14						CLIBComment = CONYellow
=13						CLILineNumber = CONRed
=6						CLIToken = CONOrange
=7						CLIConstant = CONCyan
=14						CLIIdentifier = CONYellow
=12						CLIPunctuation = CONPink
=15						CLIData = CONWhite
.c000	a000					Export_EXTPrintNoControl:
.c000	a000	48		pha				pha
.c001	a001	da		phx				phx
.c002	a002	5a		phy				phy
.c003	a003	a6 01		ldx $01				ldx 	1
.c005	a005	da		phx				phx
.c006	a006	ac 88 07	ldy $0788			ldy 	EXTColumn 					; Y = Row, e.g. points to character.
.c009	a009	80 11		bra $a01c			bra 	PrintCharacterOnly
.c00b	a00b					Export_EXTPrintCharacter:
.c00b	a00b					PAGEDPrintCharacter:
.c00b	a00b	48		pha				pha
.c00c	a00c	da		phx				phx
.c00d	a00d	5a		phy				phy
.c00e	a00e	a6 01		ldx $01				ldx 	1
.c010	a010	da		phx				phx
.c011	a011	ac 88 07	ldy $0788			ldy 	EXTColumn 					; Y = Row, e.g. points to character.
.c014	a014	09 00		ora #$00			ora 	#$00 						; check $80-$FF
.c016	a016	30 48		bmi $a060			bmi 	EXPCColour
.c018	a018	c9 20		cmp #$20			cmp 	#$20 						; check $00-$1F
.c01a	a01a	90 4d		bcc $a069			bcc 	EXPCControl
.c01c	a01c					PrintCharacterOnly:
.c01c	a01c	a2 02		ldx #$02			ldx 	#2 							; select char memory
.c01e	a01e	86 01		stx $01				stx 	1
.c020	a020	91 40		sta ($40),y			sta 	(EXTAddress),y
.c022	a022	e6 01		inc $01				inc 	1 							; select colour memory
.c024	a024	ad 89 07	lda $0789			lda 	EXTTextColour
.c027	a027	91 40		sta ($40),y			sta 	(EXTAddress),y
.c029	a029	c8		iny				iny 								; advance horizontal position
.c02a	a02a	8c 88 07	sty $0788			sty 	EXTColumn
.c02d	a02d	cc 8a 07	cpy $078a			cpy 	EXTScreenWidth 				; reached RHS ?
.c030	a030	90 63		bcc $a095			bcc 	EXPCExit 					; no, then exit.
.c032	a032					EXPCCRLF:
.c032	a032	ee 87 07	inc $0787			inc 	EXTRow  					; bump row
.c035	a035	9c 88 07	stz $0788			stz 	EXTColumn 					; back to column 0
.c038	a038	ad 87 07	lda $0787			lda 	EXTRow 						; check if reached the bottom ?
.c03b	a03b	cd 8b 07	cmp $078b			cmp 	EXTScreenHeight 			; if so, then scroll.
.c03e	a03e	f0 18		beq $a058			beq 	EXPCScroll
.c040	a040	18		clc				clc 								; add width to address.
.c041	a041	a5 40		lda $40				lda 	EXTAddress
.c043	a043	6d 8a 07	adc $078a			adc 	EXTScreenWidth
.c046	a046	85 40		sta $40				sta 	EXTAddress
.c048	a048	90 4b		bcc $a095			bcc 	EXPCExit
.c04a	a04a	e6 41		inc $41				inc 	EXTAddress+1
.c04c	a04c	80 47		bra $a095			bra 	EXPCExit
.c04e	a04e					EXPCLeft:
.c04e	a04e	ce 88 07	dec $0788			dec 	EXTColumn
.c051	a051	10 42		bpl $a095			bpl 	EXPCExit
.c053	a053					EXPCBegin:
.c053	a053	9c 88 07	stz $0788			stz 	EXTColumn
.c056	a056	80 3d		bra $a095			bra 	EXPCExit
.c058	a058					EXPCScroll:
.c058	a058	ce 87 07	dec $0787			dec 	EXTRow 						; the height-1 th line.
.c05b	a05b	20 46 a1	jsr $a146			jsr 	EXTScreenScroll 			; scroll the screen
.c05e	a05e	80 35		bra $a095			bra 	EXPCExit
.c060	a060					EXPCColour:
.c060	a060	c9 a0		cmp #$a0			cmp 	#$A0						; 80-9F set foreground/background
.c062	a062	b0 31		bcs $a095			bcs 	EXPCExit
.c064	a064	20 26 a1	jsr $a126			jsr 	EXPCHandleColour
.c067	a067	80 2c		bra $a095			bra 	EXPCExit
.c069	a069					EXPCControl:
.c069	a069	c9 11		cmp #$11			cmp 	#$11 						; only handle 00-10.
.c06b	a06b	b0 28		bcs $a095			bcs 	EXPCExit
.c06d	a06d	0a		asl a				asl 	a 							; double into X
.c06e	a06e	aa		tax				tax
.c06f	a06f	7c 04 a1	jmp ($a104,x)			jmp 	(EXPCActionTable,x) 		; and execute code.
.c072	a072					EXPCUp:
.c072	a072	ad 87 07	lda $0787			lda 	EXTRow 						; already at top ?
.c075	a075	f0 1e		beq $a095			beq 	EXPCExit
.c077	a077	ce 87 07	dec $0787			dec 	EXTRow 						; up one in position/address
.c07a	a07a	38		sec				sec
.c07b	a07b	a5 40		lda $40				lda 	EXTAddress
.c07d	a07d	ed 8a 07	sbc $078a			sbc 	EXTScreenWidth
.c080	a080	85 40		sta $40				sta 	EXTAddress
.c082	a082	b0 11		bcs $a095			bcs 	EXPCExit
.c084	a084	c6 41		dec $41				dec 	EXTAddress+1
.c086	a086	80 0d		bra $a095			bra 	EXPCExit
.c088	a088					EXPCRight:
.c088	a088	c8		iny				iny
.c089	a089	8c 88 07	sty $0788			sty 	EXTColumn
.c08c	a08c	cc 8a 07	cpy $078a			cpy 	EXTScreenWidth
.c08f	a08f	d0 04		bne $a095			bne 	EXPCExit
.c091	a091	88		dey				dey
.c092	a092					EXPCSetColumnY:
.c092	a092	8c 88 07	sty $0788			sty 	EXTColumn
.c095	a095					EXPCExit:
.c095	a095	20 bb a1	jsr $a1bb			jsr 	EXTSetHardwareCursor 		; place the physical cursor.
.c098	a098	68		pla				pla
.c099	a099	85 01		sta $01				sta 	1
.c09b	a09b	7a		ply				ply
.c09c	a09c	fa		plx				plx
.c09d	a09d	68		pla				pla
.c09e	a09e	60		rts				rts
.c09f	a09f					EXPCClearScreen:
.c09f	a09f	20 78 a1	jsr $a178			jsr		EXTClearScreenCode
.c0a2	a0a2	80 f1		bra $a095			bra 	EXPCExit
.c0a4	a0a4					EXPCDown:
.c0a4	a0a4	ad 8b 07	lda $078b			lda 	EXTScreenHeight 			; at the bottom
.c0a7	a0a7	3a		dec a				dec 	a
.c0a8	a0a8	cd 87 07	cmp $0787			cmp 	EXTRow
.c0ab	a0ab	f0 e8		beq $a095			beq 	EXPCExit
.c0ad	a0ad	ee 87 07	inc $0787			inc 	EXTRow 						; down one in position/address
.c0b0	a0b0	18		clc				clc
.c0b1	a0b1	a5 40		lda $40				lda 	EXTAddress
.c0b3	a0b3	6d 8a 07	adc $078a			adc 	EXTScreenWidth
.c0b6	a0b6	85 40		sta $40				sta 	EXTAddress
.c0b8	a0b8	90 db		bcc $a095			bcc 	EXPCExit
.c0ba	a0ba	e6 41		inc $41				inc 	EXTAddress+1
.c0bc	a0bc	80 d7		bra $a095			bra 	EXPCExit
.c0be	a0be					EXPCTab:
.c0be	a0be	ad 88 07	lda $0788			lda 	EXTColumn 					; next tab stop
.c0c1	a0c1	29 f8		and #$f8			and 	#$F8
.c0c3	a0c3	18		clc				clc
.c0c4	a0c4	69 08		adc #$08			adc 	#8
.c0c6	a0c6	8d 88 07	sta $0788			sta 	EXTColumn
.c0c9	a0c9	cd 8a 07	cmp $078a			cmp 	EXTScreenWidth 				; too far, stick end of line.
.c0cc	a0cc	90 c7		bcc $a095			bcc 	EXPCExit
.c0ce	a0ce	80 10		bra $a0e0			bra 	EXPCEnd
.c0d0	a0d0					EXPCBackSpace:
.c0d0	a0d0	88		dey				dey
.c0d1	a0d1	30 c2		bmi $a095			bmi 	EXPCExit
.c0d3	a0d3	ce 88 07	dec $0788			dec 	EXTColumn
.c0d6	a0d6	a9 02		lda #$02			lda 	#2
.c0d8	a0d8	85 01		sta $01				sta 	1
.c0da	a0da	a9 20		lda #$20			lda 	#32
.c0dc	a0dc	91 40		sta ($40),y			sta 	(EXTAddress),y
.c0de	a0de	80 b5		bra $a095			bra 	EXPCExit
.c0e0	a0e0					EXPCEnd:
.c0e0	a0e0	a9 02		lda #$02			lda 	#2 							; access text screen
.c0e2	a0e2	85 01		sta $01				sta 	1
.c0e4	a0e4	ac 8a 07	ldy $078a			ldy 	EXTScreenWidth 				; point to last character
.c0e7	a0e7	88		dey				dey
.c0e8	a0e8					EXPCEndSearch:
.c0e8	a0e8	88		dey				dey 								; if past start, move to col 0.
.c0e9	a0e9	30 06		bmi $a0f1			bmi 	EXPCFound
.c0eb	a0eb	b1 40		lda ($40),y			lda 	(EXTAddress),y 				; keep going back till non space found
.c0ed	a0ed	c9 20		cmp #$20			cmp 	#' '
.c0ef	a0ef	f0 f7		beq $a0e8			beq 	EXPCEndSearch
.c0f1	a0f1					EXPCFound:
.c0f1	a0f1	c8		iny				iny 								; move to following cell.
.c0f2	a0f2	80 9e		bra $a092			bra 	EXPCSetColumnY
.c0f4	a0f4					EXPCClearEOL:
.c0f4	a0f4	a9 02		lda #$02			lda 	#2 							; access character RAM
.c0f6	a0f6	85 01		sta $01				sta 	1
.c0f8	a0f8	a9 20		lda #$20			lda 	#' ' 						; write space
.c0fa	a0fa	91 40		sta ($40),y			sta 	(EXTAddress),y
.c0fc	a0fc	c8		iny				iny
.c0fd	a0fd	cc 8a 07	cpy $078a			cpy 	EXTScreenWidth 				; until RHS of screen.
.c100	a100	90 f2		bcc $a0f4			bcc 	EXPCClearEOL
.c102	a102	80 91		bra $a095			bra 	EXPCExit
.c104	a104					EXPCActionTable:
>c104	a104	95 a0						.word 	EXPCExit 					; 00
>c106	a106	53 a0						.word 	EXPCBegin 					; 01 A Start of Line
>c108	a108	4e a0						.word 	EXPCLeft 					; 02 B Left
>c10a	a10a	95 a0						.word 	EXPCExit 					; 03 <Break>
>c10c	a10c	95 a0						.word 	EXPCExit 					; 04
>c10e	a10e	e0 a0						.word 	EXPCEnd 					; 05 E End of Line
>c110	a110	88 a0						.word 	EXPCRight 					; 06 F Right
>c112	a112	95 a0						.word 	EXPCExit 					; 07
>c114	a114	d0 a0						.word 	EXPCBackSpace 				; 08 H Backspace
>c116	a116	be a0						.word 	EXPCTab 					; 09 I Tab
>c118	a118	95 a0						.word 	EXPCExit 					; 0A
>c11a	a11a	f4 a0						.word 	EXPCClearEOL 				; 0B K Clear to EOL
>c11c	a11c	9f a0						.word 	EXPCClearScreen			; 0C L CLS
>c11e	a11e	32 a0						.word 	EXPCCRLF 					; 0D M CR/LF
>c120	a120	a4 a0						.word 	EXPCDown 					; 0E N Down
>c122	a122	95 a0						.word 	EXPCExit 					; 0F
>c124	a124	72 a0						.word 	EXPCUp 					; 10 P Up
.c126	a126					EXPCHandleColour:
.c126	a126	c9 90		cmp #$90			cmp 	#$90 						; 8x foreground 9x background
.c128	a128	b0 16		bcs $a140			bcs 	EXPCBackground
.c12a	a12a	0a		asl a				asl 	a 							; shift it 4 bits to the right.
.c12b	a12b	0a		asl a				asl 	a
.c12c	a12c	0a		asl a				asl 	a
.c12d	a12d	0a		asl a				asl 	a
.c12e	a12e	a2 0f		ldx #$0f			ldx 	#$0F 						; Mask in X
.c130	a130					EXPCUpdate:
.c130	a130	48		pha				pha 								; save new colour
.c131	a131	8a		txa				txa 								; get mask
.c132	a132	2d 89 07	and $0789			and 	EXTTextColour 				; mask out old.
.c135	a135	8d 89 07	sta $0789			sta 	EXTTextColour
.c138	a138	68		pla				pla 								; or in new colour
.c139	a139	0d 89 07	ora $0789			ora 	EXTTextColour
.c13c	a13c	8d 89 07	sta $0789			sta 	EXTTextColour
.c13f	a13f	60		rts				rts
.c140	a140					EXPCBackground:
.c140	a140	29 0f		and #$0f			and 	#$0F 						; get the colour
.c142	a142	a2 f0		ldx #$f0			ldx 	#$F0 						; mask
.c144	a144	80 ea		bra $a130			bra 	EXPCUpdate
.c146	a146					EXTScreenScroll:
.c146	a146	a9 02		lda #$02			lda 	#2 							; select text page
.c148	a148	85 01		sta $01				sta 	1
.c14a	a14a	a9 20		lda #$20			lda		#32 						; fill with space
.c14c	a14c	20 a4 a2	jsr $a2a4			jsr 	EXTScrollFill
.c14f	a14f	e6 01		inc $01				inc 	1 							; select colour page
.c151	a151	ad 89 07	lda $0789			lda 	EXTTextColour
.c154	a154	20 a4 a2	jsr $a2a4			jsr 	EXTScrollFill
.c157	a157	60		rts				rts
.c158	a158					PAGEDPrintHex:
.c158	a158	48		pha				pha
.c159	a159	a9 20		lda #$20			lda 	#' '
.c15b	a15b	20 0b a0	jsr $a00b			jsr 	PAGEDPrintCharacter
.c15e	a15e	68		pla				pla
.c15f	a15f	48		pha				pha
.c160	a160	4a		lsr a				lsr 	a
.c161	a161	4a		lsr a				lsr 	a
.c162	a162	4a		lsr a				lsr 	a
.c163	a163	4a		lsr a				lsr 	a
.c164	a164	20 68 a1	jsr $a168			jsr 	_PPHNibble
.c167	a167	68		pla				pla
.c168	a168					_PPHNibble:
.c168	a168	48		pha				pha
.c169	a169	29 0f		and #$0f			and 	#15
.c16b	a16b	c9 0a		cmp #$0a			cmp 	#10
.c16d	a16d	90 02		bcc $a171			bcc 	_PPHOut
.c16f	a16f	69 06		adc #$06			adc 	#6
.c171	a171	69 30		adc #$30	_PPHOut:adc 	#48
.c173	a173	20 0b a0	jsr $a00b			jsr		PAGEDPrintCharacter
.c176	a176	68		pla				pla
.c177	a177	60		rts				rts
.c178	a178					EXTClearScreenCode:
.c178	a178	a9 02		lda #$02			lda 	#2 							; select text page
.c17a	a17a	85 01		sta $01				sta 	1
.c17c	a17c	a9 20		lda #$20			lda		#32 						; fill with space
.c17e	a17e	20 8b a1	jsr $a18b			jsr 	_EXTCSFill
.c181	a181	e6 01		inc $01				inc 	1 							; select colour page
.c183	a183	ad 89 07	lda $0789			lda 	EXTTextColour
.c186	a186	20 8b a1	jsr $a18b			jsr 	_EXTCSFill
.c189	a189	80 22		bra $a1ad			bra 	EXTHomeCursor
.c18b	a18b					_EXTCSFill:
.c18b	a18b	aa		tax				tax
.c18c	a18c	a9 00		lda #$00			lda 	#EXTMemory & $FF
.c18e	a18e	85 40		sta $40				sta 	EXTAddress
.c190	a190	a9 c0		lda #$c0			lda 	#EXTMemory >> 8
.c192	a192	85 41		sta $41				sta 	EXTAddress+1
.c194	a194					_EXTCSFill1:
.c194	a194	a0 00		ldy #$00			ldy 	#0
.c196	a196	8a		txa				txa
.c197	a197					_EXTCSFill2:
.c197	a197	91 40		sta ($40),y			sta 	(EXTAddress),y
.c199	a199	c8		iny				iny
.c19a	a19a	d0 fb		bne $a197			bne 	_EXTCSFill2
.c19c	a19c	e6 41		inc $41				inc 	EXTAddress+1
.c19e	a19e	a5 41		lda $41				lda 	EXTAddress+1
.c1a0	a1a0	c9 d2		cmp #$d2			cmp 	#$D2
.c1a2	a1a2	d0 f0		bne $a194			bne 	_EXTCSFill1
.c1a4	a1a4	8a		txa				txa
.c1a5	a1a5					_EXTCSFill3:
.c1a5	a1a5	91 40		sta ($40),y			sta 	(EXTAddress),y
.c1a7	a1a7	c8		iny				iny
.c1a8	a1a8	c0 c0		cpy #$c0			cpy 	#$C0
.c1aa	a1aa	d0 f9		bne $a1a5			bne 	_EXTCSFill3
.c1ac	a1ac	60		rts				rts
.c1ad	a1ad					EXTHomeCursor:
.c1ad	a1ad	9c 87 07	stz $0787			stz 	EXTRow 						; reset row & column
.c1b0	a1b0	9c 88 07	stz $0788			stz 	EXTColumn
.c1b3	a1b3	a9 00		lda #$00			lda 	#EXTMemory & $FF 			; set address
.c1b5	a1b5	85 40		sta $40				sta 	EXTAddress
.c1b7	a1b7	a9 c0		lda #$c0			lda 	#EXTMemory >> 8
.c1b9	a1b9	85 41		sta $41				sta 	EXTAddress+1
.c1bb	a1bb					EXTSetHardwareCursor:
.c1bb	a1bb	64 01		stz $01				stz 	1 							; I/O Page zero
.c1bd	a1bd	a9 05		lda #$05			lda 	#1+4 						; enable cursor
.c1bf	a1bf	8d 10 d0	sta $d010			sta 	$D010
.c1c2	a1c2	a9 d6		lda #$d6			lda 	#214
.c1c4	a1c4	8d 12 d0	sta $d012			sta 	$D012
.c1c7	a1c7	ad 88 07	lda $0788			lda 	EXTColumn
.c1ca	a1ca	8d 14 d0	sta $d014			sta 	$D014 						; set cursor position
.c1cd	a1cd	9c 15 d0	stz $d015			stz 	$D015
.c1d0	a1d0	ad 87 07	lda $0787			lda 	EXTRow
.c1d3	a1d3	8d 16 d0	sta $d016			sta 	$D016
.c1d6	a1d6	9c 17 d0	stz $d017			stz 	$D017
.c1d9	a1d9	60		rts				rts
.c1da	a1da					Export_EXTInputSingleCharacter:
.c1da	a1da					PagedInputSingleCharacter:
.c1da	a1da	da		phx				phx
.c1db	a1db	5a		phy				phy
.c1dc	a1dc					_EISCWait:
.c1dc	a1dc	a5 01		lda $01				lda 	1 							; save I/O 0
.c1de	a1de	48		pha				pha
.c1df	a1df	64 01		stz $01				stz 	1 							; access I/O Page 0
.c1e1	a1e1	38		sec				sec 								; calculate timer - LastTick
.c1e2	a1e2	ad 59 d6	lda $d659			lda 	$D659
.c1e5	a1e5	cd 76 07	cmp $0776			cmp 	LastTick
.c1e8	a1e8	f0 06		beq $a1f0			beq 	_NoFireTick 				; if < 3 clocks don't fire.
.c1ea	a1ea	8d 76 07	sta $0776			sta 	LastTick 					; update last timer
.c1ed	a1ed	20 fd bb	jsr $bbfd			jsr 	PagedSNDUpdate 							; go do the code.
.c1f0	a1f0					_NoFireTick:
.c1f0	a1f0	68		pla				pla 								; restore I/O 0
.c1f1	a1f1	85 01		sta $01				sta 	1
.c1f3	a1f3	20 19 82	jsr $8219			jsr 	KNLCheckKeyPressed
.c1f6	a1f6	c9 00		cmp #$00			cmp 	#0 							; loop back if none pressed.
.c1f8	a1f8	f0 e2		beq $a1dc			beq 	_EISCWait
.c1fa	a1fa	7a		ply				ply
.c1fb	a1fb	fa		plx				plx
.c1fc	a1fc	60		rts				rts
.c1fd	a1fd					Export_EXTInputLine:
.c1fd	a1fd	48		pha				pha
.c1fe	a1fe	da		phx				phx
.c1ff	a1ff	5a		phy				phy
.c200	a200	a5 01		lda $01				lda 	1 							; save I/O page
.c202	a202	48		pha				pha
.c203	a203					_EILLoop:
.c203	a203	20 da a1	jsr $a1da			jsr 	PagedInputSingleCharacter
.c206	a206	c9 0d		cmp #$0d			cmp 	#13 						; scrape line if exit.
.c208	a208	f0 44		beq $a24e			beq 	_EILExit
.c20a	a20a	c9 04		cmp #$04			cmp 	#4 							; Ctrl+D delete at cursor
.c20c	a20c	f0 2a		beq $a238			beq 	_EILDelete
.c20e	a20e	c9 08		cmp #$08			cmp 	#8 							; Ctrl+H backspace
.c210	a210	f0 1c		beq $a22e			beq 	_EILBackspace
.c212	a212	c9 20		cmp #$20			cmp 	#' '						; < space, print it
.c214	a214	90 12		bcc $a228			bcc 	_EILPrintLoop
.c216	a216	c9 7f		cmp #$7f			cmp 	#$7F 						; if -ve print it
.c218	a218	b0 0e		bcs $a228			bcs 	_EILPrintLoop
.c21a	a21a	48		pha				pha 								; save character
.c21b	a21b	a9 02		lda #$02			lda 	#2  						; insert a space
.c21d	a21d	85 01		sta $01				sta 	1
.c21f	a21f	20 92 a2	jsr $a292			jsr 	EXTILInsert 				; insert in text screen
.c222	a222	e6 01		inc $01				inc 	1
.c224	a224	20 92 a2	jsr $a292			jsr 	EXTILInsert 				; insert in colour screen
.c227	a227	68		pla				pla 								; get character back.
.c228	a228					_EILPrintLoop:
.c228	a228	20 0b a0	jsr $a00b			jsr 	PAGEDPrintCharacter
.c22b	a22b	80 d6		bra $a203			bra 	_EILLoop
.c22d	a22d	60		rts				rts
.c22e	a22e					_EILBackspace:
.c22e	a22e	ad 88 07	lda $0788			lda 	EXTColumn					; can we backspace ?
.c231	a231	f0 d0		beq $a203			beq 	_EILLoop
.c233	a233	a9 02		lda #$02			lda 	#2 							; move cursor left
.c235	a235	20 0b a0	jsr $a00b			jsr 	PAGEDPrintCharacter
.c238	a238					_EILDelete
.c238	a238	a9 02		lda #$02			lda 	#2 							; text block
.c23a	a23a	85 01		sta $01				sta 	1
.c23c	a23c	a9 20		lda #$20			lda 	#' ' 						; backspace text.
.c23e	a23e	20 7d a2	jsr $a27d			jsr 	EXTILDelete
.c241	a241	e6 01		inc $01				inc 	1 							; colour block
.c243	a243	ac 88 07	ldy $0788			ldy 	EXTColumn 					; get attribute of last character
.c246	a246	88		dey				dey
.c247	a247	b1 40		lda ($40),y			lda 	(EXTAddress),y
.c249	a249	20 7d a2	jsr $a27d			jsr 	EXTILDelete 				; backspace attribute
.c24c	a24c	80 b5		bra $a203			bra 	_EILLoop 					; and go round.
.c24e	a24e					_EILExit:
.c24e	a24e	a9 02		lda #$02			lda 	#2 							; switch to page 2
.c250	a250	85 01		sta $01				sta 	1
.c252	a252	a0 00		ldy #$00			ldy 	#0 							; copy current line into buffer.
.c254	a254					_EILScrapeLine:
.c254	a254	b1 40		lda ($40),y			lda 	(EXTAddress),y
.c256	a256	99 2a 05	sta $052a,y			sta 	lineBuffer,y
.c259	a259	c8		iny				iny
.c25a	a25a	cc 8a 07	cpy $078a			cpy 	EXTScreenWidth
.c25d	a25d	d0 f5		bne $a254			bne 	_EILScrapeLine
.c25f	a25f					_EILTrimSpaces:
.c25f	a25f	88		dey				dey
.c260	a260	c0 ff		cpy #$ff			cpy 	#$FF 						; back past the start
.c262	a262	f0 07		beq $a26b			beq 	_EILEndTrim		 			; zero the input line.
.c264	a264	b9 2a 05	lda $052a,y			lda 	lineBuffer,y
.c267	a267	c9 20		cmp #$20			cmp 	#' '
.c269	a269	f0 f4		beq $a25f			beq 	_EILTrimSpaces 				; if fail this found non space character
.c26b	a26b					_EILEndTrim:
.c26b	a26b	c8		iny				iny 								; trim after non space character.
.c26c	a26c	a9 00		lda #$00			lda 	#0 							; trim here.
.c26e	a26e	99 2a 05	sta $052a,y			sta 	lineBuffer,y
.c271	a271	a9 0d		lda #$0d			lda 	#13 						; echo the RETURN
.c273	a273	20 0b a0	jsr $a00b			jsr 	PAGEDPrintCharacter
.c276	a276	68		pla				pla 								; reset I/O page
.c277	a277	85 01		sta $01				sta 	1
.c279	a279	7a		ply				ply
.c27a	a27a	fa		plx				plx
.c27b	a27b	68		pla				pla
.c27c	a27c	60		rts				rts
.c27d	a27d					EXTILDelete:
.c27d	a27d	48		pha				pha 								; save the new character
.c27e	a27e	ac 88 07	ldy $0788			ldy 	EXTColumn 					; start copying from here.
.c281	a281					_EXTDLoop:
.c281	a281	c8		iny				iny 								; copy one byte down.
.c282	a282	b1 40		lda ($40),y			lda 	(EXTAddress),y
.c284	a284	88		dey				dey
.c285	a285	91 40		sta ($40),y			sta 	(EXTAddress),y
.c287	a287	c8		iny				iny 								; do till end of line.
.c288	a288	cc 8a 07	cpy $078a			cpy 	EXTScreenWidth
.c28b	a28b	90 f4		bcc $a281			bcc 	_EXTDLoop
.c28d	a28d	88		dey				dey 	 							; write in last slot.
.c28e	a28e	68		pla				pla
.c28f	a28f	91 40		sta ($40),y			sta 	(EXTAddress),y
.c291	a291	60		rts				rts
.c292	a292					EXTILInsert:
.c292	a292	ac 8a 07	ldy $078a			ldy 	EXTScreenWidth 				; end position
.c295	a295					_EXTILoop:
.c295	a295	88		dey				dey 								; back one
.c296	a296	cc 88 07	cpy $0788			cpy 	EXTColumn 					; exit if reached insert point.
.c299	a299	f0 08		beq $a2a3			beq 	_EXTIExit
.c29b	a29b	88		dey				dey 								; copy one byte up.
.c29c	a29c	b1 40		lda ($40),y			lda 	(EXTAddress),y
.c29e	a29e	c8		iny				iny
.c29f	a29f	91 40		sta ($40),y			sta 	(EXTAddress),y
.c2a1	a2a1	80 f2		bra $a295			bra 	_EXTILoop
.c2a3	a2a3					_EXTIExit:
.c2a3	a2a3	60		rts				rts
.c2a4	a2a4					EXTScrollFill:
.c2a4	a2a4	aa		tax				tax									; save value to fill with
.c2a5	a2a5	a5 36		lda $36				lda 	zTemp0 						; save zTemp0 (dest) zTemp1 (src)
.c2a7	a2a7	48		pha				pha
.c2a8	a2a8	a5 37		lda $37				lda 	zTemp0+1
.c2aa	a2aa	48		pha				pha
.c2ab	a2ab	a5 38		lda $38				lda 	zTemp1
.c2ad	a2ad	48		pha				pha
.c2ae	a2ae	a5 39		lda $39				lda 	zTemp1+1
.c2b0	a2b0	48		pha				pha
.c2b1	a2b1	a9 c0		lda #$c0			lda 	#$C0 						; copy from C000+length to C000
.c2b3	a2b3	85 37		sta $37				sta 	zTemp0+1
.c2b5	a2b5	85 39		sta $39				sta 	zTemp1+1
.c2b7	a2b7	64 36		stz $36				stz 	zTemp0
.c2b9	a2b9	ad 8a 07	lda $078a			lda 	EXTScreenWidth
.c2bc	a2bc	85 38		sta $38				sta 	zTemp1
.c2be	a2be	a0 00		ldy #$00			ldy 	#0
.c2c0	a2c0					_EXSFCopy1:
.c2c0	a2c0	b1 38		lda ($38),y			lda 	(zTemp1),y
.c2c2	a2c2	91 36		sta ($36),y			sta 	(zTemp0),y
.c2c4	a2c4	c8		iny				iny
.c2c5	a2c5	d0 f9		bne $a2c0			bne 	_EXSFCopy1
.c2c7	a2c7	e6 37		inc $37				inc 	zTemp0+1 					; next page
.c2c9	a2c9	e6 39		inc $39				inc 	zTemp1+1
.c2cb	a2cb	a5 39		lda $39				lda 	zTemp1+1
.c2cd	a2cd	c9 d3		cmp #$d3			cmp 	#$D3
.c2cf	a2cf	d0 ef		bne $a2c0			bne 	_EXSFCopy1
.c2d1	a2d1	ac 8a 07	ldy $078a			ldy 	EXTScreenWidth 				; blank the bottom line.
.c2d4	a2d4	8a		txa				txa
.c2d5	a2d5					_EXSFFill1:
.c2d5	a2d5	88		dey				dey
.c2d6	a2d6	91 40		sta ($40),y			sta 	(EXTAddress),y
.c2d8	a2d8	c0 00		cpy #$00			cpy 	#0
.c2da	a2da	10 f9		bpl $a2d5			bpl 	_EXSFFill1
.c2dc	a2dc	68		pla				pla
.c2dd	a2dd	85 39		sta $39				sta 	zTemp1+1
.c2df	a2df	68		pla				pla
.c2e0	a2e0	85 38		sta $38				sta 	zTemp1
.c2e2	a2e2	68		pla				pla
.c2e3	a2e3	85 37		sta $37				sta 	zTemp0+1
.c2e5	a2e5	68		pla				pla
.c2e6	a2e6	85 36		sta $36				sta 	zTemp0
.c2e8	a2e8	60		rts				rts
=$c000						EXTMemory = $C000
=$02						EXTTextPage = $02
=$03						EXTColourPage = $03
=1						EXTDummySpace = 1 							; fake-space for CR character.
=0						EXTCBlack = 0
.0787						EXTRow:
>0787								.fill 	1
.0788						EXTColumn:
>0788								.fill 	1
.0789						EXTTextColour:
>0789								.fill 	1
.078a						EXTScreenWidth:
>078a								.fill 	1
.078b						EXTScreenHeight:
>078b								.fill 	1
.0040						EXTAddress:
>0040								.fill 	2
.c2e9	a2e9					Export_EXTInitialise:
.c2e9	a2e9	64 01		stz $01				stz 	1 							; Access I/O page 0
.c2eb	a2eb	9c 04 d0	stz $d004			stz 	$D004 						; Disable border
.c2ee	a2ee	9c 08 d0	stz $d008			stz 	$D008
.c2f1	a2f1	9c 09 d0	stz $d009			stz 	$D009
.c2f4	a2f4	a9 09		lda #$09			lda 	#1+8						; Timer On at 70Hz counting up.
.c2f6	a2f6	8d 58 d6	sta $d658			sta 	$D658
.c2f9	a2f9	a9 52		lda #$52			lda 	#$52
.c2fb	a2fb	8d 89 07	sta $0789			sta 	EXTTextColour
.c2fe	a2fe	a9 50		lda #$50			lda 	#80 						; set screen dimensions.
.c300	a300	8d 8a 07	sta $078a			sta 	EXTScreenWidth
.c303	a303	a9 3c		lda #$3c			lda 	#60
.c305	a305	8d 8b 07	sta $078b			sta 	EXTScreenHeight
.c308	a308	20 78 a1	jsr $a178			jsr 	EXTClearScreenCode 			; clear the screen
.c30b	a30b					_EXMoveDown:
.c30b	a30b	a9 0d		lda #$0d			lda 	#13
.c30d	a30d	20 0b a0	jsr $a00b			jsr 	PAGEDPrintCharacter
.c310	a310	ad 87 07	lda $0787			lda 	EXTRow
.c313	a313	c9 0a		cmp #$0a			cmp 	#Header_Height-4
.c315	a315	d0 f4		bne $a30b			bne 	_EXMoveDown
.c317	a317	20 1d a3	jsr $a31d			jsr 	EXTShowHeader
.c31a	a31a	64 01		stz $01				stz 	1
.c31c	a31c	60		rts				rts
.c31d	a31d					EXTShowHeader:
.c31d	a31d	a5 01		lda $01				lda 	1
.c31f	a31f	48		pha				pha
.c320	a320	a9 02		lda #$02			lda 	#2
.c322	a322	a2 22		ldx #$22			ldx 	#(Header_chars & $FF)
.c324	a324	a0 a5		ldy #$a5			ldy 	#(Header_chars >> 8)
.c326	a326	20 44 a3	jsr $a344			jsr 	_ESHCopyBlock
.c329	a329	a9 03		lda #$03			lda 	#3
.c32b	a32b	a2 8a		ldx #$8a			ldx 	#(Header_attrs & $FF)
.c32d	a32d	a0 a3		ldy #$a3			ldy 	#(Header_attrs >> 8)
.c32f	a32f	20 44 a3	jsr $a344			jsr 	_ESHCopyBlock
.c332	a332	64 01		stz $01				stz 	1
.c334	a334	a2 3f		ldx #$3f			ldx 	#16*4-1
.c336	a336					_EXTCopyLUT:
.c336	a336	bd 52 a7	lda $a752,x			lda 	Header_Palette,x
.c339	a339	9d 00 d8	sta $d800,x			sta 	$D800,x
.c33c	a33c	9d 40 d8	sta $d840,x			sta 	$D840,x
.c33f	a33f	ca		dex				dex
.c340	a340	10 f4		bpl $a336			bpl 	_EXTCopyLUT
.c342	a342	68		pla				pla
.c343	a343	60		rts				rts
.c344	a344					_ESHCopyBlock:
.c344	a344	85 01		sta $01				sta 	1
.c346	a346	86 36		stx $36				stx 	zTemp0 						; zTemp0 is RLE packed data
.c348	a348	84 37		sty $37				sty 	zTemp0+1
.c34a	a34a	a9 00		lda #$00			lda 	#(($C000) & $FF)
.c34c	a34c	85 38		sta $38				sta 	0+zTemp1
.c34e	a34e	a9 c0		lda #$c0			lda 	#(($C000) >> 8)
.c350	a350	85 39		sta $39				sta 	1+zTemp1
.c352	a352					_ESHCopyLoop:
.c352	a352	b2 36		lda ($36)			lda 	(zTemp0) 					; get next character
.c354	a354	c9 ff		cmp #$ff			cmp 	#Header_RLE 				; packed ?
.c356	a356	f0 1b		beq $a373			beq 	_ESHUnpack
.c358	a358	92 38		sta ($38)			sta 	(zTemp1) 					; copy it out.
.c35a	a35a	a9 01		lda #$01			lda 	#1 							; source add 1
.c35c	a35c	a0 01		ldy #$01			ldy 	#1 							; dest add 1
.c35e	a35e					_ESHNext:
.c35e	a35e	18		clc				clc 								; zTemp0 + A
.c35f	a35f	65 36		adc $36				adc 	zTemp0
.c361	a361	85 36		sta $36				sta 	zTemp0
.c363	a363	90 02		bcc $a367			bcc 	_ESHNoCarry
.c365	a365	e6 37		inc $37				inc 	zTemp0+1
.c367	a367					_ESHNoCarry:
.c367	a367	98		tya				tya 								; zTemp1 + Y
.c368	a368	18		clc				clc
.c369	a369	65 38		adc $38				adc 	zTemp1
.c36b	a36b	85 38		sta $38				sta 	zTemp1
.c36d	a36d	90 e3		bcc $a352			bcc 	_ESHCopyLoop
.c36f	a36f	e6 39		inc $39				inc 	zTemp1+1
.c371	a371	80 df		bra $a352			bra 	_ESHCopyLoop
.c373	a373					_ESHUnpack:
.c373	a373	a0 02		ldy #$02			ldy 	#2 							; get count into X
.c375	a375	b1 36		lda ($36),y			lda 	(zTemp0),y
.c377	a377	aa		tax				tax
.c378	a378	88		dey				dey 								; byte into A
.c379	a379	b1 36		lda ($36),y			lda 	(zTemp0),y
.c37b	a37b	f0 0c		beq $a389			beq 	_ESHExit 					; exit if zero.
.c37d	a37d	a0 00		ldy #$00			ldy 	#0 							; copy start position
.c37f	a37f					_ESHCopyOut:
.c37f	a37f	91 38		sta ($38),y			sta 	(zTemp1),y
.c381	a381	c8		iny				iny
.c382	a382	ca		dex				dex
.c383	a383	d0 fa		bne $a37f			bne 	_ESHCopyOut
.c385	a385	a9 03		lda #$03			lda 	#3 							; Y is bytes on screen, 3 bytes from source
.c387	a387	80 d5		bra $a35e			bra 	_ESHNext
.c389	a389					_ESHExit:
.c389	a389	60		rts				rts
=14						Header_Height = 14
=255						Header_RLE = 255
.c38a	a38a					Header_attrs:
>c38a	a38a	ff 52 59 52 ff d8 07 d8			.byte	255,82,89,82,255,216,7,216,255,82,2,82,255,216,6,216,255,82,2,82,255,216,7,216,255,82,2,82,255,216,6,216,255,82,8,82,210,210,82,82,255,210,7,210,255,82,19,82,104,104,255,82,7,82,104,104,255,82,4,82,104,104,82,82,104,104,255,82,7,82,104,104,255,82,4,82,104,104,255,82,7,82,210,210,82,82,210,210,255,82,4,82,210,210,255,82,18,82,232,232,255,82,14,82,232,232,82,82,232,232,255,82,7,82,232,232,255,82,14,82,210,210,82,82,210,210,255,82,4,82,210,210,255,82,18,82,255,56,5,56,255,82,4,82,255,56,6,56,255,82,2,82,255,56,6,56,255,82,2,82,255,56,7,56,255,82,8,82,210,210,82,82,255,210,7,210,255,82,19,82,120,120,255,82,7,82,120,120,255,82,14,82,120,120,82,82,120,120,255,82,4,82,120,120,82,82,210,210,255,82,3,82,210,210,82,82,210,210,255,82,2,82,210,210,255,82,20,82,168,168,255,82,7,82,168,168,255,82,8,82,168,168,255,82,3,82,168,168,82,82,168,168,255,82,4,82,168,168,82,82,210,210,255,82,3,82,210,210,82,82,210,210,255,82,3,82,210,210,255,82,19,82,72,72,255,82,7,82,255,72,8,72,82,66,82,255,72,5,72,255,82,3,82,255,72,6,72,255,82,3,82,255,210,5,210,255,82,2,82,210,210,255,82,4,82,210,210,255,82,88,82,255,114,80,114,255,226,7,226,255,146,19,146,114,255,146,4,146,255,114,18,114,255,194,24,194,114,114,255,226,10,226,255,146,16,146,114,255,146,4,146,255,114,18,114,255,194,24,194,114,114,255,226,9,226,255,146,17,146,114,255,146,4,146,255,114,18,114,255,194,24,194,255,114,80,114,255,0
>c392	a392	ff 52 02 52 ff d8 06 d8 ff 52 02 52 ff d8 07 d8
>c3a2	a3a2	ff 52 02 52 ff d8 06 d8 ff 52 08 52 d2 d2 52 52
>c3b2	a3b2	ff d2 07 d2 ff 52 13 52 68 68 ff 52 07 52 68 68
>c3c2	a3c2	ff 52 04 52 68 68 52 52 68 68 ff 52 07 52 68 68
>c3d2	a3d2	ff 52 04 52 68 68 ff 52 07 52 d2 d2 52 52 d2 d2
>c3e2	a3e2	ff 52 04 52 d2 d2 ff 52 12 52 e8 e8 ff 52 0e 52
>c3f2	a3f2	e8 e8 52 52 e8 e8 ff 52 07 52 e8 e8 ff 52 0e 52
>c402	a402	d2 d2 52 52 d2 d2 ff 52 04 52 d2 d2 ff 52 12 52
>c412	a412	ff 38 05 38 ff 52 04 52 ff 38 06 38 ff 52 02 52
>c422	a422	ff 38 06 38 ff 52 02 52 ff 38 07 38 ff 52 08 52
>c432	a432	d2 d2 52 52 ff d2 07 d2 ff 52 13 52 78 78 ff 52
>c442	a442	07 52 78 78 ff 52 0e 52 78 78 52 52 78 78 ff 52
>c452	a452	04 52 78 78 52 52 d2 d2 ff 52 03 52 d2 d2 52 52
>c462	a462	d2 d2 ff 52 02 52 d2 d2 ff 52 14 52 a8 a8 ff 52
>c472	a472	07 52 a8 a8 ff 52 08 52 a8 a8 ff 52 03 52 a8 a8
>c482	a482	52 52 a8 a8 ff 52 04 52 a8 a8 52 52 d2 d2 ff 52
>c492	a492	03 52 d2 d2 52 52 d2 d2 ff 52 03 52 d2 d2 ff 52
>c4a2	a4a2	13 52 48 48 ff 52 07 52 ff 48 08 48 52 42 52 ff
>c4b2	a4b2	48 05 48 ff 52 03 52 ff 48 06 48 ff 52 03 52 ff
>c4c2	a4c2	d2 05 d2 ff 52 02 52 d2 d2 ff 52 04 52 d2 d2 ff
>c4d2	a4d2	52 58 52 ff 72 50 72 ff e2 07 e2 ff 92 13 92 72
>c4e2	a4e2	ff 92 04 92 ff 72 12 72 ff c2 18 c2 72 72 ff e2
>c4f2	a4f2	0a e2 ff 92 10 92 72 ff 92 04 92 ff 72 12 72 ff
>c502	a502	c2 18 c2 72 72 ff e2 09 e2 ff 92 11 92 72 ff 92
>c512	a512	04 92 ff 72 12 72 ff c2 18 c2 ff 72 50 72 ff 00
.c522	a522					Header_chars:
>c522	a522	ff 20 59 20 ff 08 07 08			.byte	255,32,89,32,255,8,7,8,255,32,2,32,255,8,6,8,255,32,2,32,255,8,7,8,255,32,2,32,255,8,6,8,255,32,8,32,252,252,32,32,255,252,7,252,255,32,19,32,8,8,255,32,7,32,8,8,255,32,4,32,8,8,32,32,8,8,255,32,7,32,8,8,255,32,4,32,8,8,255,32,7,32,252,252,32,32,252,252,255,32,4,32,252,252,255,32,18,32,8,8,255,32,14,32,8,8,32,32,8,8,255,32,7,32,8,8,255,32,14,32,252,252,32,32,252,252,255,32,4,32,252,252,255,32,18,32,255,8,5,8,255,32,4,32,255,8,6,8,255,32,2,32,255,8,6,8,255,32,2,32,255,8,7,8,255,32,8,32,252,252,32,32,255,252,7,252,255,32,19,32,8,8,255,32,7,32,8,8,255,32,14,32,8,8,32,32,8,8,255,32,4,32,8,8,32,32,252,252,255,32,3,32,252,252,32,32,252,252,255,32,2,32,252,252,255,32,20,32,8,8,255,32,7,32,8,8,255,32,8,32,8,8,255,32,3,32,8,8,32,32,8,8,255,32,4,32,8,8,32,32,252,252,255,32,3,32,252,252,32,32,252,252,255,32,3,32,252,252,255,32,19,32,8,8,255,32,7,32,255,8,8,8,255,32,2,32,255,8,5,8,255,32,3,32,255,8,6,8,255,32,3,32,255,252,5,252,255,32,2,32,252,252,255,32,4,32,252,252,255,32,88,32,160,255,150,27,150,155,255,150,22,150,155,255,150,24,150,161,130,72,97,114,100,119,97,114,101,255,32,19,32,130,221,50,48,50,50,32,83,116,101,102,97,110,121,32,65,108,108,97,105,114,101,32,32,130,99,50,53,54,102,111,101,110,105,120,46,99,111,109,47,102,50,53,54,45,106,114,255,32,2,32,130,130,77,105,99,114,111,75,101,114,110,101,108,255,32,16,32,130,221,50,48,50,50,32,74,101,115,115,105,101,32,79,98,101,114,114,101,117,116,101,114,130,71,97,100,103,101,116,64,72,97,99,107,119,114,101,110,99,104,76,97,98,115,46,99,111,109,130,130,83,117,112,101,114,66,65,83,73,67,255,32,17,32,130,221,50,48,50,50,32,80,97,117,108,32,82,111,98,115,111,110,255,32,5,32,130,80,97,117,108,64,82,111,98,115,111,110,115,46,111,114,103,46,117,107,255,32,5,32,130,162,255,150,27,150,157,255,150,22,150,157,255,150,24,150,163,255,0
>c52a	a52a	ff 20 02 20 ff 08 06 08 ff 20 02 20 ff 08 07 08
>c53a	a53a	ff 20 02 20 ff 08 06 08 ff 20 08 20 fc fc 20 20
>c54a	a54a	ff fc 07 fc ff 20 13 20 08 08 ff 20 07 20 08 08
>c55a	a55a	ff 20 04 20 08 08 20 20 08 08 ff 20 07 20 08 08
>c56a	a56a	ff 20 04 20 08 08 ff 20 07 20 fc fc 20 20 fc fc
>c57a	a57a	ff 20 04 20 fc fc ff 20 12 20 08 08 ff 20 0e 20
>c58a	a58a	08 08 20 20 08 08 ff 20 07 20 08 08 ff 20 0e 20
>c59a	a59a	fc fc 20 20 fc fc ff 20 04 20 fc fc ff 20 12 20
>c5aa	a5aa	ff 08 05 08 ff 20 04 20 ff 08 06 08 ff 20 02 20
>c5ba	a5ba	ff 08 06 08 ff 20 02 20 ff 08 07 08 ff 20 08 20
>c5ca	a5ca	fc fc 20 20 ff fc 07 fc ff 20 13 20 08 08 ff 20
>c5da	a5da	07 20 08 08 ff 20 0e 20 08 08 20 20 08 08 ff 20
>c5ea	a5ea	04 20 08 08 20 20 fc fc ff 20 03 20 fc fc 20 20
>c5fa	a5fa	fc fc ff 20 02 20 fc fc ff 20 14 20 08 08 ff 20
>c60a	a60a	07 20 08 08 ff 20 08 20 08 08 ff 20 03 20 08 08
>c61a	a61a	20 20 08 08 ff 20 04 20 08 08 20 20 fc fc ff 20
>c62a	a62a	03 20 fc fc 20 20 fc fc ff 20 03 20 fc fc ff 20
>c63a	a63a	13 20 08 08 ff 20 07 20 ff 08 08 08 ff 20 02 20
>c64a	a64a	ff 08 05 08 ff 20 03 20 ff 08 06 08 ff 20 03 20
>c65a	a65a	ff fc 05 fc ff 20 02 20 fc fc ff 20 04 20 fc fc
>c66a	a66a	ff 20 58 20 a0 ff 96 1b 96 9b ff 96 16 96 9b ff
>c67a	a67a	96 18 96 a1 82 48 61 72 64 77 61 72 65 ff 20 13
>c68a	a68a	20 82 dd 32 30 32 32 20 53 74 65 66 61 6e 79 20
>c69a	a69a	41 6c 6c 61 69 72 65 20 20 82 63 32 35 36 66 6f
>c6aa	a6aa	65 6e 69 78 2e 63 6f 6d 2f 66 32 35 36 2d 6a 72
>c6ba	a6ba	ff 20 02 20 82 82 4d 69 63 72 6f 4b 65 72 6e 65
>c6ca	a6ca	6c ff 20 10 20 82 dd 32 30 32 32 20 4a 65 73 73
>c6da	a6da	69 65 20 4f 62 65 72 72 65 75 74 65 72 82 47 61
>c6ea	a6ea	64 67 65 74 40 48 61 63 6b 77 72 65 6e 63 68 4c
>c6fa	a6fa	61 62 73 2e 63 6f 6d 82 82 53 75 70 65 72 42 41
>c70a	a70a	53 49 43 ff 20 11 20 82 dd 32 30 32 32 20 50 61
>c71a	a71a	75 6c 20 52 6f 62 73 6f 6e ff 20 05 20 82 50 61
>c72a	a72a	75 6c 40 52 6f 62 73 6f 6e 73 2e 6f 72 67 2e 75
>c73a	a73a	6b ff 20 05 20 82 a2 ff 96 1b 96 9d ff 96 16 96
>c74a	a74a	9d ff 96 18 96 a3 ff 00
.c752	a752					Header_Palette:
>c752	a752	00 00 00 00				.dword $000000
>c756	a756	66 66 66 00				.dword $666666
>c75a	a75a	aa 00 00 00				.dword $0000aa
>c75e	a75e	00 aa 00 00				.dword $00aa00
>c762	a762	ea 41 c0 00				.dword $c041ea
>c766	a766	00 48 87 00				.dword $874800
>c76a	a76a	00 9c ff 00				.dword $ff9c00
>c76e	a76e	ff db 57 00				.dword $57dbff
>c772	a772	28 3f 3f 00				.dword $3f3f28
>c776	a776	8a aa aa 00				.dword $aaaa8a
>c77a	a77a	ff 55 55 00				.dword $5555ff
>c77e	a77e	55 ff 55 00				.dword $55ff55
>c782	a782	ed 8d ff 00				.dword $ff8ded
>c786	a786	00 00 ff 00				.dword $ff0000
>c78a	a78a	55 ff ff 00				.dword $ffff55
>c78e	a78e	ff ff ff 00				.dword $ffffff
>c792	a792	ff ff ff 00				.dword $ffffff
>c796	a796	ff ff ff 00				.dword $ffffff

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_graphics.module

=1						graphicsIntegrated=1
=0						GCMD_Initialise = 0*2
=2						GCMD_BitmapCtl = 1*2
=4						GCMD_SpriteCtl = 2*2
=6						GCMD_Clear = 3*2
=8						GCMD_Colour = 4*2
=10						GCMD_DrawFont = 5*2
=12						GCMD_DrawSprite = 6*2
=14						GCMD_SpriteUse = 7*2
=16						GCMD_SpriteImage = 8*2
=18						GCMD_SpriteCollide = 9*2
=64						GCMD_Move = 32*2
=66						GCMD_Line = 33*2
=68						GCMD_FrameRect = 34*2
=70						GCMD_FillRect = 35*2
=72						GCMD_FrameCircle = 36*2
=74						GCMD_FillCircle = 37*2
=80						GCMD_Plot = 40*2
=82						GCMD_SpriteMove = 41*2
=42						GRFirstFreeCode = 42
.c79a	a79a					GRVectorTable:
>c79a	a79a	e9 a9					.word	GXInitialise             ; $00 Initialise
>c79c	a79c	03 aa					.word	GXControlBitmap          ; $01 BitmapCtl
>c79e	a79e	4b aa					.word	GXControlSprite          ; $02 SpriteCtl
>c7a0	a7a0	9b a9					.word	GXClearBitmap            ; $03 Clear
>c7a2	a7a2	da ab					.word	GXSetColourMode          ; $04 Colour
>c7a4	a7a4	a2 ad					.word	GXFontHandler            ; $05 DrawFont
>c7a6	a7a6	ea ad					.word	GXSpriteHandler          ; $06 DrawSprite
>c7a8	a7a8	5b ae					.word	GXSelect                 ; $07 SpriteUse
>c7aa	a7aa	84 ae					.word	GXSelectImage            ; $08 SpriteImage
>c7ac	a7ac	0b b0					.word	GXCollide                ; $09 SpriteCollide
>c7ae	a7ae	4d a8					.word	GRUndefined              ; $0a
>c7b0	a7b0	4d a8					.word	GRUndefined              ; $0b
>c7b2	a7b2	4d a8					.word	GRUndefined              ; $0c
>c7b4	a7b4	4d a8					.word	GRUndefined              ; $0d
>c7b6	a7b6	4d a8					.word	GRUndefined              ; $0e
>c7b8	a7b8	4d a8					.word	GRUndefined              ; $0f
>c7ba	a7ba	4d a8					.word	GRUndefined              ; $10
>c7bc	a7bc	4d a8					.word	GRUndefined              ; $11
>c7be	a7be	4d a8					.word	GRUndefined              ; $12
>c7c0	a7c0	4d a8					.word	GRUndefined              ; $13
>c7c2	a7c2	4d a8					.word	GRUndefined              ; $14
>c7c4	a7c4	4d a8					.word	GRUndefined              ; $15
>c7c6	a7c6	4d a8					.word	GRUndefined              ; $16
>c7c8	a7c8	4d a8					.word	GRUndefined              ; $17
>c7ca	a7ca	4d a8					.word	GRUndefined              ; $18
>c7cc	a7cc	4d a8					.word	GRUndefined              ; $19
>c7ce	a7ce	4d a8					.word	GRUndefined              ; $1a
>c7d0	a7d0	4d a8					.word	GRUndefined              ; $1b
>c7d2	a7d2	4d a8					.word	GRUndefined              ; $1c
>c7d4	a7d4	4d a8					.word	GRUndefined              ; $1d
>c7d6	a7d6	4d a8					.word	GRUndefined              ; $1e
>c7d8	a7d8	4d a8					.word	GRUndefined              ; $1f
>c7da	a7da	4b a8					.word	GXMove                   ; $20 Move
>c7dc	a7dc	a8 aa					.word	GXLine                   ; $21 Line
>c7de	a7de	23 ac					.word	GXFrameRectangle         ; $22 FrameRect
>c7e0	a7e0	20 ac					.word	GXFillRectangle          ; $23 FillRect
>c7e2	a7e2	52 a8					.word	GXFrameCircle            ; $24 FrameCircle
>c7e4	a7e4	4e a8					.word	GXFillCircle             ; $25 FillCircle
>c7e6	a7e6	4d a8					.word	GRUndefined              ; $26
>c7e8	a7e8	4d a8					.word	GRUndefined              ; $27
>c7ea	a7ea	08 ac					.word	GXPlotPoint              ; $28 Plot
>c7ec	a7ec	1a af					.word	GXMoveSprite             ; $29 SpriteMove
=3						GXMappingPage = 3
=24576						GXMappingAddress = ($2000 * GXMappingPage)
=11						GXEditSlot = 8 + GXMappingPage
=$36						gxzTemp0 = zTemp0
=$38						gxzTemp1 = zTemp1
=$3a						gxzTemp2 = zTemp2
=$3c						gxzScreen = zsTemp
=$627						gxPixelBuffer = numberBuffer
.078c						gxCurrentX:
>078c								.fill 	2
.078e						gxCurrentY:
>078e								.fill 	2
.0790						gxLastX:
>0790								.fill 	2
.0792						gxLastY:
>0792								.fill 	2
.0794						gxX0:
>0794								.fill 	2
.0796						gxY0:
>0796								.fill 	2
.0798						gxX1:
>0798								.fill 	2
.079a						gxY1:
>079a								.fill 	2
.079c						gxSpritesOn:
>079c								.fill 	1
.079d						gxBitmapsOn:
>079d								.fill 	1
.079e						gxBasePage:
>079e								.fill 	1
.079f						gxSpritePage:
>079f								.fill 	1
.07a0						gxHeight:
>07a0								.fill 	1
.07a1						gxMode:
>07a1								.fill 	1
.07a2						gxColour:
>07a2								.fill 	1
.07a3						gxEORValue:
>07a3								.fill 	1
.07a4						gxANDValue:
>07a4								.fill 	1
.07a5						gxOriginalLUTValue:
>07a5								.fill 	1
.07a6						gxOffset:
>07a6								.fill 	1
.07a7						GSCurrentSpriteID:
>07a7								.fill 	1
.07a8						GSCurrentSpriteAddr:
>07a8								.fill 	2
.07aa						gxSpriteOffsetBase:
>07aa								.fill 	2
.07ac						gxSpriteLow:
>07ac								.fill 	64
.07ec						gxSpriteHigh:
>07ec								.fill 	64
.c7ee	a7ee					Export_GXGraphicDraw:
.c7ee	a7ee	c9 40		cmp #$40			cmp 	#GCMD_Move					; low instructions don't use coordinates
.c7f0	a7f0	b0 06		bcs $a7f8			bcs 	_GDCoordinate
.c7f2	a7f2	86 36		stx $36				stx 	gxzTemp0 					; save X/Y
.c7f4	a7f4	84 37		sty $37				sty 	gxzTemp0+1
.c7f6	a7f6	80 4b		bra $a843			bra 	_GDExecuteA 				; and execute
.c7f8	a7f8					_GDCoordinate:
.c7f8	a7f8	48		pha				pha 								; save AXY
.c7f9	a7f9	da		phx				phx
.c7fa	a7fa	5a		phy				phy
.c7fb	a7fb	a2 03		ldx #$03			ldx 	#3 							; copy currentX to lastX
.c7fd	a7fd					_GDCopy1:
.c7fd	a7fd	bd 8c 07	lda $078c,x			lda 	gxCurrentX,x
.c800	a800	9d 90 07	sta $0790,x			sta 	gxLastX,x
.c803	a803	ca		dex				dex
.c804	a804	10 f7		bpl $a7fd			bpl 	_GDCopy1
.c806	a806	68		pla				pla 								; update Y
.c807	a807	8d 8e 07	sta $078e			sta 	gxCurrentY
.c80a	a80a	9c 8f 07	stz $078f			stz 	gxCurrentY+1
.c80d	a80d	68		pla				pla
.c80e	a80e	8d 8c 07	sta $078c			sta 	gxCurrentX
.c811	a811	68		pla				pla 								; get A (command+X.1) back
.c812	a812	48		pha				pha
.c813	a813	29 01		and #$01			and 	#1 							; put LSB as MSB of Current.X
.c815	a815	8d 8d 07	sta $078d			sta 	gxCurrentX+1
.c818	a818	68		pla				pla 								; get command back
.c819	a819	29 fe		and #$fe			and 	#$FE 						; lose LSB, chuck the stray X bit
.c81b	a81b	48		pha				pha 								; push back.
.c81c	a81c	c9 52		cmp #$52			cmp 	#GCMD_SpriteMove 			; move sprite does not clip.
.c81e	a81e	f0 17		beq $a837			beq 	_GDCopyToWorkArea
.c820	a820	ad 8d 07	lda $078d			lda 	gxCurrentX+1 				; X < 256 X okay
.c823	a823	f0 07		beq $a82c			beq 	_GDCheckY
.c825	a825	ad 8c 07	lda $078c			lda 	gxCurrentX 					; otherwise X < 320 = 256 + 64
.c828	a828	c9 40		cmp #$40			cmp 	#64
.c82a	a82a	b0 08		bcs $a834			bcs 	_GDError1
.c82c	a82c					_GDCheckY:
.c82c	a82c	ad 8e 07	lda $078e			lda 	gxCurrentY 					; check Y < Height.
.c82f	a82f	cd a0 07	cmp $07a0			cmp 	gxHeight
.c832	a832	90 03		bcc $a837			bcc 	_GDCopyToWorkArea
.c834	a834					_GDError1:
.c834	a834	68		pla				pla
.c835	a835					_GDError2:
.c835	a835	38		sec				sec
.c836	a836	60		rts				rts
.c837	a837					_GDCopyToWorkArea:
.c837	a837	a2 07		ldx #$07			ldx 	#7 							; copy current and last to gxXY/12 work area
.c839	a839					_GDCopy2:
.c839	a839	bd 8c 07	lda $078c,x			lda 	gxCurrentX,x
.c83c	a83c	9d 94 07	sta $0794,x			sta 	gxX0,x
.c83f	a83f	ca		dex				dex
.c840	a840	10 f7		bpl $a839			bpl 	_GDCopy2
.c842	a842	68		pla				pla 								; get command
.c843	a843					_GDExecuteA:
.c843	a843	c9 54		cmp #$54			cmp 	#GRFirstFreeCode*2 			; bad ?
.c845	a845	b0 ee		bcs $a835			bcs 	_GDError2
.c847	a847	aa		tax				tax
.c848	a848	7c 9a a7	jmp ($a79a,x)			jmp 	(GRVectorTable,x)
.c84b	a84b					GXMove:
.c84b	a84b	18		clc				clc
.c84c	a84c	60		rts				rts
.c84d	a84d					GRUndefined:
>c84d	a84d	db						.byte 	$DB 						; causes a break in the emulator
.c84e	a84e					GXFillCircle:
.c84e	a84e	a9 ff		lda #$ff			lda 	#255
.c850	a850	80 02		bra $a854			bra 	GXCircle
.c852	a852					GXFrameCircle:
.c852	a852	a9 00		lda #$00			lda 	#0
.c854	a854					GXCircle:
.c854	a854	8d 2f 08	sta $082f			sta 	gxIsFillMode					; save Fill flag
.c857	a857	ad 9d 07	lda $079d			lda 	gxBitmapsOn
.c85a	a85a	f0 26		beq $a882			beq 	_GXCFail
.c85c	a85c	20 b2 b0	jsr $b0b2			jsr 	GXSortXY 					; topleft/bottomright
.c85f	a85f	20 8a af	jsr $af8a			jsr 	GXOpenBitmap 				; start drawing
.c862	a862	20 54 a9	jsr $a954			jsr 	GXCircleSetup 				; set up for drawing
.c865	a865	9c 30 08	stz $0830			stz 	gxYChanged
.c868	a868					_GXCircleDraw:
.c868	a868	ad 2d 08	lda $082d			lda 	gxxCentre					; while x <= y
.c86b	a86b	cd 2e 08	cmp $082e			cmp 	gxYCentre
.c86e	a86e	90 0a		bcc $a87a			bcc 	_GXCircleContinue
.c870	a870	d0 03		bne $a875			bne 	_GXNoLast
.c872	a872	20 87 a8	jsr $a887			jsr 	GXPlot1
.c875	a875					_GXNoLast:
.c875	a875	20 92 af	jsr $af92			jsr 	GXCloseBitmap 				; close the bitmap
.c878	a878	18		clc				clc
.c879	a879	60		rts				rts
.c87a	a87a					_GXCircleContinue:
.c87a	a87a	20 84 a8	jsr $a884			jsr 	GXPlot2 					; draw it
.c87d	a87d	20 01 a9	jsr $a901			jsr 	GXCircleMove 				; adjust the coordinates
.c880	a880	80 e6		bra $a868			bra 	_GXCircleDraw
.c882	a882					_GXCFail:
.c882	a882	38		sec				sec
.c883	a883	60		rts				rts
.c884	a884					GXPlot2:
.c884	a884	20 87 a8	jsr $a887			jsr 	GXPlot1 						; plot and swap, fall through does twice
.c887	a887					GXPlot1:
.c887	a887	ad 2e 08	lda $082e			lda 	gxYCentre 						; if y = 0, don't do it twice (xor)
.c88a	a88a	f0 03		beq $a88f			beq 	_GXPlot1Only
.c88c	a88c	20 ab a8	jsr $a8ab			jsr 	GXPlot0 						; plot and negate
.c88f	a88f					_GXPlot1Only:
.c88f	a88f	20 ab a8	jsr $a8ab			jsr 	GXPlot0 						; twice, undoing negation
.c892	a892	ad 2d 08	lda $082d			lda 	gxxCentre 						; swap X and Y
.c895	a895	ae 2e 08	ldx $082e			ldx	 	gxYCentre
.c898	a898	8d 2e 08	sta $082e			sta 	gxYCentre
.c89b	a89b	8e 2d 08	stx $082d			stx 	gxxCentre
.c89e	a89e	ad 30 08	lda $0830			lda 	gxYChanged 						; toggle Y Changed flag
.c8a1	a8a1	a9 ff		lda #$ff			lda 	#$FF
.c8a3	a8a3	8d 30 08	sta $0830			sta 	gxYChanged
.c8a6	a8a6	60		rts				rts
.c8a7	a8a7	20 ab a8	jsr $a8ab			jsr 	GXPlot0 						; do once
.c8aa	a8aa	60		rts				rts
.c8ab	a8ab	ad 2f 08	lda $082f	GXPlot0:lda 	gxIsFillMode 					; outline mode, always draw as X or Y will change
.c8ae	a8ae	f0 05		beq $a8b5			beq 	_GXPlot0Always
.c8b0	a8b0	ad 30 08	lda $0830			lda 	gxYChanged						; fill mode, only draw if changed.
.c8b3	a8b3	f0 2d		beq $a8e2			beq 	GXPlot0Exit
.c8b5	a8b5					_GXPlot0Always:
.c8b5	a8b5	a2 02		ldx #$02			ldx 	#2 								; copy Y1-A => Y0
.c8b7	a8b7	ad 2e 08	lda $082e			lda 	gxYCentre
.c8ba	a8ba	20 e3 a8	jsr $a8e3			jsr 	GXSubCopy
.c8bd	a8bd	a2 00		ldx #$00			ldx 	#0 								; copy X1-A => X0,
.c8bf	a8bf	ad 2d 08	lda $082d			lda 	gxxCentre
.c8c2	a8c2	20 e3 a8	jsr $a8e3			jsr 	GXSubCopy
.c8c5	a8c5	48		pha				pha 									; save last offset X
.c8c6	a8c6	20 9a af	jsr $af9a			jsr 	gxPositionCalc 					; calculate position/offset.
.c8c9	a8c9	68		pla				pla
.c8ca	a8ca	0a		asl a				asl 	a 								; store 2 x last offset in gxzTemp0
.c8cb	a8cb	85 36		sta $36				sta 	gxzTemp0
.c8cd	a8cd	64 37		stz $37				stz 	gxzTemp0+1
.c8cf	a8cf	26 37		rol $37				rol 	gxzTemp0+1
.c8d1	a8d1	ad 2f 08	lda $082f			lda 	gxIsFillMode
.c8d4	a8d4	69 80		adc #$80			adc 	#128
.c8d6	a8d6	20 73 ac	jsr $ac73			jsr 	GXDrawLineTemp0 				; routine from Rectangle.
.c8d9	a8d9	38		sec				sec 									; GY = -GY
.c8da	a8da	a9 00		lda #$00			lda 	#0
.c8dc	a8dc	ed 2e 08	sbc $082e			sbc 	gxYCentre
.c8df	a8df	8d 2e 08	sta $082e			sta 	gxYCentre
.c8e2	a8e2					GXPlot0Exit:
.c8e2	a8e2	60		rts				rts
.c8e3	a8e3					GXSubCopy:
.c8e3	a8e3	85 36		sta $36				sta 	gxzTemp0
.c8e5	a8e5	64 37		stz $37				stz 	gxzTemp0+1
.c8e7	a8e7	29 80		and #$80			and 	#$80
.c8e9	a8e9	f0 02		beq $a8ed			beq 	_GXNoSx
.c8eb	a8eb	c6 37		dec $37				dec 	gxzTemp0+1
.c8ed	a8ed					_GXNoSx:
.c8ed	a8ed	38		sec				sec
.c8ee	a8ee	bd 98 07	lda $0798,x			lda 	gxX1,x
.c8f1	a8f1	e5 36		sbc $36				sbc 	gxzTemp0
.c8f3	a8f3	9d 94 07	sta $0794,x			sta 	gxX0,x
.c8f6	a8f6	bd 99 07	lda $0799,x			lda 	gxX1+1,x
.c8f9	a8f9	e5 37		sbc $37				sbc 	gxzTemp0+1
.c8fb	a8fb	9d 95 07	sta $0795,x			sta 	gxX0+1,x
.c8fe	a8fe	a5 36		lda $36				lda 	gxzTemp0 						; return A
.c900	a900	60		rts				rts
.c901	a901					GXCircleMove:
.c901	a901	9c 30 08	stz $0830			stz 	gxYChanged 					; clear Y changed flag
.c904	a904	a5 39		lda $39				lda 	gxzTemp1+1 					; check sign of D
.c906	a906	10 0d		bpl $a915			bpl 	_GXEMPositive
.c908	a908	ee 2d 08	inc $082d			inc 	gxxCentre 					; X++
.c90b	a90b	ad 2d 08	lda $082d			lda 	gxxCentre
.c90e	a90e	20 34 a9	jsr $a934			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.c911	a911	a9 06		lda #$06			lda 	#6  						; and add 6
.c913	a913	80 15		bra $a92a			bra 	_GXEMAddD
.c915	a915					_GXEMPositive:
.c915	a915	ee 2d 08	inc $082d			inc 	gxxCentre					; X++
.c918	a918	ce 2e 08	dec $082e			dec 	gxYCentre 					; Y--
.c91b	a91b	38		sec				sec 								; calculate X-Y
.c91c	a91c	ad 2d 08	lda $082d			lda 	gxxCentre
.c91f	a91f	ed 2e 08	sbc $082e			sbc 	gxYCentre
.c922	a922	20 34 a9	jsr $a934			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.c925	a925	a9 0a		lda #$0a			lda 	#10  						; and add 10
.c927	a927	ce 30 08	dec $0830			dec 	gxYChanged
.c92a	a92a					_GXEMAddD:
.c92a	a92a	18		clc				clc
.c92b	a92b	65 38		adc $38				adc 	gxzTemp1
.c92d	a92d	85 38		sta $38				sta 	gxzTemp1
.c92f	a92f	90 02		bcc $a933			bcc 	_GXEMNoCarry
.c931	a931	e6 39		inc $39				inc 	gxzTemp1+1
.c933	a933					_GXEMNoCarry:
.c933	a933	60		rts				rts
.c934	a934					_GXAdd4TimesToD:
.c934	a934	85 36		sta $36				sta 	gxzTemp0 					; make 16 bit signed.
.c936	a936	29 80		and #$80			and 	#$80
.c938	a938	f0 02		beq $a93c			beq 	_GXA4Unsigned
.c93a	a93a	a9 ff		lda #$ff			lda 	#$FF
.c93c	a93c					_GXA4Unsigned:
.c93c	a93c	85 37		sta $37				sta 	gxzTemp0+1
.c93e	a93e	06 36		asl $36				asl 	gxzTemp0  					; x 4
.c940	a940	26 37		rol $37				rol 	gxzTemp0+1
.c942	a942	06 36		asl $36				asl 	gxzTemp0
.c944	a944	26 37		rol $37				rol 	gxzTemp0+1
.c946	a946	18		clc				clc 								; add
.c947	a947	a5 36		lda $36				lda		gxzTemp0
.c949	a949	65 38		adc $38				adc 	gxzTemp1
.c94b	a94b	85 38		sta $38				sta 	gxzTemp1
.c94d	a94d	a5 37		lda $37				lda		gxzTemp0+1
.c94f	a94f	65 39		adc $39				adc 	gxzTemp1+1
.c951	a951	85 39		sta $39				sta 	gxzTemp1+1
.c953	a953	60		rts				rts
.c954	a954					GXCircleSetup:
.c954	a954	38		sec				sec
.c955	a955	ad 9a 07	lda $079a			lda 	gxY1
.c958	a958	ed 96 07	sbc $0796			sbc 	gxY0
.c95b	a95b	4a		lsr a				lsr 	a
.c95c	a95c	8d 2c 08	sta $082c			sta 	gxRadius
.c95f	a95f	a2 00		ldx #$00			ldx 	#0
.c961	a961	20 83 a9	jsr $a983			jsr 	_GXCalculateCentre
.c964	a964	a2 02		ldx #$02			ldx 	#2
.c966	a966	20 83 a9	jsr $a983			jsr 	_GXCalculateCentre
.c969	a969	9c 2d 08	stz $082d			stz 	gxxCentre
.c96c	a96c	ad 2c 08	lda $082c			lda 	gxRadius
.c96f	a96f	8d 2e 08	sta $082e			sta 	gxYCentre
.c972	a972	0a		asl a				asl 	a 							; R x 2
.c973	a973	85 36		sta $36				sta 	gxzTemp0
.c975	a975	38		sec				sec
.c976	a976	a9 03		lda #$03			lda 	#3
.c978	a978	e5 36		sbc $36				sbc 	gxzTemp0
.c97a	a97a	85 38		sta $38				sta 	gxzTemp1
.c97c	a97c	a9 00		lda #$00			lda 	#0
.c97e	a97e	e9 00		sbc #$00			sbc 	#0
.c980	a980	85 39		sta $39				sta 	gxzTemp1+1
.c982	a982	60		rts				rts
.c983	a983					_GXCalculateCentre:
.c983	a983	38		sec				sec
.c984	a984	bd 98 07	lda $0798,x			lda 	gxX1,x
.c987	a987	7d 94 07	adc $0794,x			adc 	gxX0,x
.c98a	a98a	9d 98 07	sta $0798,x			sta 	gxX1,x
.c98d	a98d	bd 99 07	lda $0799,x			lda 	gxX1+1,x
.c990	a990	7d 95 07	adc $0795,x			adc 	gxX0+1,x
.c993	a993	4a		lsr a				lsr 	a
.c994	a994	9d 99 07	sta $0799,x			sta 	gxX1+1,x
.c997	a997	7e 98 07	ror $0798,x			ror 	gxX1,x
.c99a	a99a	60		rts				rts
.082c						gxRadius:
>082c								.fill 	1
.082d						gxxCentre:
>082d								.fill 	1
.082e						gxYCentre:
>082e								.fill 	1
.082f						gxIsFillMode:
>082f								.fill 	1
.0830						gxYChanged:
>0830								.fill  	1
=64000						ScreenSize200 = 320 * 200
=76800						ScreenSize240 = 320 * 240
.c99b	a99b					GXClearBitmap:
.c99b	a99b	ad 9d 07	lda $079d			lda 	gxBitmapsOn 				; check BMP running.
.c99e	a99e	f0 24		beq $a9c4			beq 	_GXCBFail
.c9a0	a9a0	20 8a af	jsr $af8a			jsr 	GXOpenBitmap 				; start access
.c9a3	a9a3	a0 07		ldy #$07			ldy 	#ScreenSize200 / 8192 		; X is pages to clear
.c9a5	a9a5	ad a0 07	lda $07a0			lda 	gxHeight
.c9a8	a9a8	c9 c8		cmp #$c8			cmp 	#200 						; 200 ?
.c9aa	a9aa	a0 09		ldy #$09			ldy 	#ScreenSize240 / 8192
.c9ac	a9ac					_GXCalcLastPage:
.c9ac	a9ac	98		tya				tya 								; add to base page
.c9ad	a9ad	18		clc				clc
.c9ae	a9ae	6d 9e 07	adc $079e			adc 	gxBasePage
.c9b1	a9b1	85 0b		sta $0b				sta 	GXEditSlot  				; clear from this page back
.c9b3	a9b3					_GXClearAll:
.c9b3	a9b3	20 c6 a9	jsr $a9c6			jsr 	_GXClearBlock 				; clear 8k block
.c9b6	a9b6	c6 0b		dec $0b				dec 	GXEditSlot  				; back to previous
.c9b8	a9b8	a5 0b		lda $0b				lda 	GXEditSlot
.c9ba	a9ba	cd 9e 07	cmp $079e			cmp 	gxBasePage 					; until before base page
.c9bd	a9bd	b0 f4		bcs $a9b3			bcs 	_GXClearAll
.c9bf	a9bf	20 92 af	jsr $af92			jsr 	GXCloseBitmap	 			; stop access
.c9c2	a9c2	18		clc				clc
.c9c3	a9c3	60		rts				rts
.c9c4	a9c4					_GXCBFail:
.c9c4	a9c4	38		sec				sec
.c9c5	a9c5	60		rts				rts
.c9c6	a9c6					_GXClearBlock:
.c9c6	a9c6	a9 00		lda #$00			lda 	#((GXMappingAddress) & $FF)
.c9c8	a9c8	85 38		sta $38				sta 	0+gxzTemp1
.c9ca	a9ca	a9 60		lda #$60			lda 	#((GXMappingAddress) >> 8)
.c9cc	a9cc	85 39		sta $39				sta 	1+gxzTemp1
.c9ce	a9ce					_GXCB0:
.c9ce	a9ce	a5 36		lda $36				lda 	gxzTemp0
.c9d0	a9d0	a0 00		ldy #$00			ldy 	#0
.c9d2	a9d2					_GXCB1:
.c9d2	a9d2	91 38		sta ($38),y			sta 	(gxzTemp1),y
.c9d4	a9d4	c8		iny				iny
.c9d5	a9d5	91 38		sta ($38),y			sta 	(gxzTemp1),y
.c9d7	a9d7	c8		iny				iny
.c9d8	a9d8	91 38		sta ($38),y			sta 	(gxzTemp1),y
.c9da	a9da	c8		iny				iny
.c9db	a9db	91 38		sta ($38),y			sta 	(gxzTemp1),y
.c9dd	a9dd	c8		iny				iny
.c9de	a9de	d0 f2		bne $a9d2			bne 	_GXCB1
.c9e0	a9e0	e6 39		inc $39				inc 	gxzTemp1+1
.c9e2	a9e2	a5 39		lda $39				lda 	gxzTemp1+1
.c9e4	a9e4	c9 80		cmp #$80			cmp	 	#(GXMappingAddress >> 8)+$20
.c9e6	a9e6	d0 e6		bne $a9ce			bne 	_GXCB0
.c9e8	a9e8	60		rts				rts
.c9e9	a9e9					GXInitialise:
.c9e9	a9e9	64 01		stz $01				stz 	1
.c9eb	a9eb	a9 01		lda #$01			lda 	#1
.c9ed	a9ed	8d 00 d0	sta $d000			sta 	$D000
.c9f0	a9f0	18		clc				clc
.c9f1	a9f1	9c 9c 07	stz $079c			stz 	gxSpritesOn
.c9f4	a9f4	9c 9d 07	stz $079d			stz 	gxBitmapsOn
.c9f7	a9f7	a2 0f		ldx #$0f			ldx 	#15
.c9f9	a9f9					_GXIClear:
.c9f9	a9f9	9e 8c 07	stz $078c,x			stz 	gxCurrentX,x
.c9fc	a9fc	ca		dex				dex
.c9fd	a9fd	10 fa		bpl $a9f9			bpl 	_GXIClear
.c9ff	a9ff	20 9a aa	jsr $aa9a			jsr 	GXClearSpriteStore
.ca02	aa02	60		rts				rts
.ca03	aa03					GXControlBitmap:
.ca03	aa03	64 01		stz $01				stz 	1
.ca05	aa05	a5 36		lda $36				lda 	gxzTemp0 					; get control bits
.ca07	aa07	29 01		and #$01			and 	#1 							; set bitmap flag
.ca09	aa09	8d 9d 07	sta $079d			sta 	gxBitmapsOn
.ca0c	aa0c	4a		lsr a				lsr 	a 							; bit 0 into carry.
.ca0d	aa0d	ad 00 d0	lda $d000			lda 	$D000 						; read Vicky MCR
.ca10	aa10	09 07		ora #$07			ora 	#7 							; turn graphics, text, textoverlay on.
.ca12	aa12	29 f7		and #$f7			and 	#$F7 						; clear bitmap bit
.ca14	aa14	90 02		bcc $aa18			bcc 	_CBNotOn
.ca16	aa16	09 08		ora #$08			ora 	#$08 						; bitmap on if 1 on 0 off
.ca18	aa18					_CBNotOn:
.ca18	aa18	8d 00 d0	sta $d000			sta 	$D000 						; update Vicky MCR
.ca1b	aa1b	a5 36		lda $36				lda 	gxzTemp0 					; get control settings (bits 0-2)
.ca1d	aa1d	29 07		and #$07			and 	#7
.ca1f	aa1f	8d 00 d1	sta $d100			sta 	$D100 						; write in Vicky Bitmap Control Register #0
.ca22	aa22	a5 37		lda $37				lda 	gxzTemp0+1 					; get the base page
.ca24	aa24	d0 02		bne $aa28			bne 	_CBNotDefault
.ca26	aa26	a9 08		lda #$08			lda 	#8  						; if zero, use 8 e.g. bitmap at $10000
.ca28	aa28					_CBNotDefault:
.ca28	aa28	8d 9e 07	sta $079e			sta 	gxBasePage
.ca2b	aa2b	20 8c aa	jsr $aa8c			jsr 	GXCalculateBaseAddress 	 	; convert page# to address
.ca2e	aa2e	a5 37		lda $37				lda 	gxzTemp0+1 					; copy address into Bitmap address registers
.ca30	aa30	8d 03 d1	sta $d103			sta 	$D103
.ca33	aa33	a5 36		lda $36				lda 	gxzTemp0
.ca35	aa35	8d 02 d1	sta $d102			sta 	$D102
.ca38	aa38	9c 01 d1	stz $d101			stz 	$D101
.ca3b	aa3b	a2 f0		ldx #$f0			ldx 	#240 						; height is 240
.ca3d	aa3d	ad 01 d0	lda $d001			lda 	$D001 						; read MCR bit 0
.ca40	aa40	29 01		and #$01			and 	#1
.ca42	aa42	f0 02		beq $aa46			beq 	_CBHaveHeight
.ca44	aa44	a2 c8		ldx #$c8			ldx 	#200 						; if bit 0 set 320x200
.ca46	aa46					_CBHaveHeight
.ca46	aa46	8e a0 07	stx $07a0			stx 	gxHeight
.ca49	aa49	18		clc				clc
.ca4a	aa4a	60		rts				rts
.ca4b	aa4b					GXControlSprite:
.ca4b	aa4b	64 01		stz $01				stz 	1
.ca4d	aa4d	a5 36		lda $36				lda 	gxzTemp0 					; get control bits
.ca4f	aa4f	29 01		and #$01			and 	#1 							; set sprites flag
.ca51	aa51	8d 9c 07	sta $079c			sta 	gxSpritesOn
.ca54	aa54	4a		lsr a				lsr 	a 							; bit 0 into carry.
.ca55	aa55	ad 00 d0	lda $d000			lda 	$D000 						; read Vicky MCR
.ca58	aa58	09 07		ora #$07			ora 	#7 							; turn graphics, text, textoverlay on.
.ca5a	aa5a	29 df		and #$df			and 	#$DF 						; clear sprite bit
.ca5c	aa5c	90 02		bcc $aa60			bcc 	_CSNotOn
.ca5e	aa5e	09 20		ora #$20			ora 	#$20 						; sprite on if 1 on 0 off
.ca60	aa60					_CSNotOn:
.ca60	aa60	8d 00 d0	sta $d000			sta 	$D000 						; update Vicky MCR
.ca63	aa63	a5 37		lda $37				lda 	gxzTemp0+1 					; get the base page
.ca65	aa65	d0 02		bne $aa69			bne 	_CSNotDefault
.ca67	aa67	a9 18		lda #$18			lda 	#24  						; if zero, use 24 e.g. sprites at $30000
.ca69	aa69					_CSNotDefault:
.ca69	aa69	8d 9f 07	sta $079f			sta 	gxSpritePage
.ca6c	aa6c	20 8c aa	jsr $aa8c			jsr 	GXCalculateBaseAddress 	 	; convert page# to address
.ca6f	aa6f	a5 36		lda $36				lda 	gxzTemp0
.ca71	aa71	8d aa 07	sta $07aa			sta 	gxSpriteOffsetBase
.ca74	aa74	a5 37		lda $37				lda 	gxzTemp0+1
.ca76	aa76	8d ab 07	sta $07ab			sta 	gxSpriteOffsetBase+1
.ca79	aa79	a2 00		ldx #$00			ldx 	#0 							; disable all sprites, clears all sprite memory.
.ca7b	aa7b					_CSClear:
.ca7b	aa7b	9e 00 d9	stz $d900,x			stz 	$D900,x
.ca7e	aa7e	9e 00 da	stz $da00,x			stz 	$DA00,x
.ca81	aa81	ca		dex				dex
.ca82	aa82	d0 f7		bne $aa7b			bne 	_CSClear
.ca84	aa84	9c a9 07	stz $07a9			stz 	GSCurrentSpriteAddr+1 		; no sprite selected.
.ca87	aa87	20 9a aa	jsr $aa9a			jsr 	GXClearSpriteStore
.ca8a	aa8a	18		clc				clc
.ca8b	aa8b	60		rts				rts
.ca8c	aa8c					GXCalculateBaseAddress:
.ca8c	aa8c	85 36		sta $36				sta 	gxzTemp0
.ca8e	aa8e	64 37		stz $37				stz 	gxzTemp0+1
.ca90	aa90	a9 05		lda #$05			lda 	#5
.ca92	aa92					_GXShift:
.ca92	aa92	06 36		asl $36				asl 	gxzTemp0
.ca94	aa94	26 37		rol $37				rol 	gxzTemp0+1
.ca96	aa96	3a		dec a				dec		a
.ca97	aa97	d0 f9		bne $aa92			bne 	_GXShift
.ca99	aa99	60		rts				rts
.ca9a	aa9a					GXClearSpriteStore:
.ca9a	aa9a	a2 3f		ldx #$3f			ldx 	#63 						; erase 64 sprite store elements
.ca9c	aa9c					_GXCSSLoop:
.ca9c	aa9c	9e ec 07	stz $07ec,x			stz 	gxSpriteHigh,x
.ca9f	aa9f	a9 80		lda #$80			lda 	#$80 						; set the 'hidden' bit.
.caa1	aaa1	9d ac 07	sta $07ac,x			sta 	gxSpriteLow,x
.caa4	aaa4	ca		dex				dex
.caa5	aaa5	10 f5		bpl $aa9c			bpl 	_GXCSSLoop
.caa7	aaa7	60		rts				rts
.caa8	aaa8					GXLine:
.caa8	aaa8	ad 9d 07	lda $079d			lda 	gxBitmapsOn
.caab	aaab	f0 28		beq $aad5			beq 	_GXLFail
.caad	aaad	20 8a af	jsr $af8a			jsr 	GXOpenBitmap
.cab0	aab0	20 d0 b0	jsr $b0d0			jsr 	GXSortY						; sort pairs so Y1 >= Y0 e.g. top to bottom.
.cab3	aab3	20 7b ab	jsr $ab7b			jsr 	GXLineSetup 				; the calculations in the linescanner constructor
.cab6	aab6	20 9a af	jsr $af9a			jsr 	gxPositionCalc 				; calculate position/offset.
.cab9	aab9					_GXDrawLoop:
.cab9	aab9	ac a6 07	ldy $07a6			ldy 	gxOffset 					; draw the pixel
.cabc	aabc	b1 3c		lda ($3c),y			lda 	(gxzScreen),y
.cabe	aabe	2d a4 07	and $07a4			and 	gxANDValue
.cac1	aac1	4d a3 07	eor $07a3			eor 	gxEORValue
.cac4	aac4	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.cac6	aac6	20 d7 aa	jsr $aad7			jsr 	GXLineIsComplete 			; is the line complete ?
.cac9	aac9	f0 05		beq $aad0			beq 	_GXLExit
.cacb	aacb	20 f2 aa	jsr $aaf2			jsr 	GXLineAdvance 				; code as per advance method
.cace	aace	80 e9		bra $aab9			bra 	_GXDrawLoop
.cad0	aad0					_GXLExit:
.cad0	aad0	20 92 af	jsr $af92			jsr 	GXCloseBitmap
.cad3	aad3	18		clc				clc
.cad4	aad4	60		rts				rts
.cad5	aad5					_GXLFail:
.cad5	aad5	38		sec				sec
.cad6	aad6	60		rts				rts
.cad7	aad7					GXLineIsComplete:
.cad7	aad7	ad 33 08	lda $0833			lda 	gxIsDiffYLarger 			; is dy larger
.cada	aada	d0 0f		bne $aaeb			bne 	_GXLICCompareY 				; if so compare Y1/Y0
.cadc	aadc	ad 94 07	lda $0794			lda 	gxX0 						; compare X, LSB and MSB
.cadf	aadf	4d 98 07	eor $0798			eor 	gxX1
.cae2	aae2	d0 06		bne $aaea			bne 	_GXLICExit
.cae4	aae4	ad 95 07	lda $0795			lda 	gxX0+1
.cae7	aae7	4d 99 07	eor $0799			eor 	gxX1+1
.caea	aaea					_GXLICExit:
.caea	aaea	60		rts				rts
.caeb	aaeb					_GXLICCompareY:
.caeb	aaeb	ad 9a 07	lda $079a			lda 	gxY1
.caee	aaee	4d 96 07	eor $0796			eor 	gxY0
.caf1	aaf1	60		rts				rts
.caf2	aaf2					GXLineAdvance:
.caf2	aaf2	18		clc				clc 								; add adjust to position
.caf3	aaf3	ad 35 08	lda $0835			lda 	gxPosition
.caf6	aaf6	6d 36 08	adc $0836			adc 	gxAdjust
.caf9	aaf9	8d 35 08	sta $0835			sta 	gxPosition
.cafc	aafc	9c 38 08	stz $0838			stz 	gxAddSelect 				; clear add select flag
.caff	aaff	b0 05		bcs $ab06			bcs 	_GXLAOverflow 				; if carry out, overflowed.
.cb01	ab01	cd 37 08	cmp $0837			cmp 	gxTotal 					; if exceeded total
.cb04	ab04	90 0a		bcc $ab10			bcc 	_GXLANoExtra
.cb06	ab06					_GXLAOverflow:
.cb06	ab06	ce 38 08	dec $0838			dec 	gxAddSelect 				; set addselect to $FF
.cb09	ab09	38		sec				sec 								; subtract total and write back
.cb0a	ab0a	ed 37 08	sbc $0837			sbc 	gxTotal
.cb0d	ab0d	8d 35 08	sta $0835			sta 	gxPosition
.cb10	ab10					_GXLANoExtra:
.cb10	ab10	ad 33 08	lda $0833			lda 	gxIsDiffYLarger
.cb13	ab13	f0 0d		beq $ab22			beq 	_GXDXLarger
.cb15	ab15	20 74 ab	jsr $ab74			jsr 	GXIncrementY
.cb18	ab18	ad 38 08	lda $0838			lda 	gxAddSelect
.cb1b	ab1b	f0 10		beq $ab2d			beq 	_GXLAExit
.cb1d	ab1d	20 2e ab	jsr $ab2e			jsr 	gxAdjustX
.cb20	ab20	80 0b		bra $ab2d			bra 	_GXLAExit
.cb22	ab22					_GXDXLarger:
.cb22	ab22	20 2e ab	jsr $ab2e			jsr 	gxAdjustX
.cb25	ab25	ad 38 08	lda $0838			lda 	gxAddSelect
.cb28	ab28	f0 03		beq $ab2d			beq 	_GXLAExit
.cb2a	ab2a	20 74 ab	jsr $ab74			jsr 	GXIncrementY
.cb2d	ab2d					_GXLAExit:
.cb2d	ab2d	60		rts				rts
.cb2e	ab2e					gxAdjustX:
.cb2e	ab2e	ad 34 08	lda $0834			lda 	gxDXNegative
.cb31	ab31	10 25		bpl $ab58			bpl 	_GXAXRight
.cb33	ab33	ad 94 07	lda $0794			lda 	gxX0
.cb36	ab36	d0 03		bne $ab3b			bne 	_GXAXNoBorrow
.cb38	ab38	ce 95 07	dec $0795			dec 	gxX0+1
.cb3b	ab3b					_GXAXNoBorrow:
.cb3b	ab3b	ce 94 07	dec $0794			dec 	gxX0
.cb3e	ab3e	ce a6 07	dec $07a6			dec 	gxOffset 					; pixel left
.cb41	ab41	ad a6 07	lda $07a6			lda 	gxOffset
.cb44	ab44	c9 ff		cmp #$ff			cmp 	#$FF
.cb46	ab46	d0 0f		bne $ab57			bne 	_GXAYExit 					; underflow
.cb48	ab48	c6 3d		dec $3d				dec 	gxzScreen+1 					; borrow
.cb4a	ab4a	a5 3d		lda $3d				lda 	gxzScreen+1 					; gone off page
.cb4c	ab4c	c9 60		cmp #$60			cmp 	#GXMappingAddress >> 8
.cb4e	ab4e	b0 07		bcs $ab57			bcs 	_GXAYExit
.cb50	ab50	18		clc				clc
.cb51	ab51	69 20		adc #$20			adc 	#$20 						; fix up
.cb53	ab53	85 3d		sta $3d				sta 	gxzScreen+1
.cb55	ab55	c6 0b		dec $0b				dec 	GXEditSlot 				; back one page
.cb57	ab57					_GXAYExit:
.cb57	ab57	60		rts				rts
.cb58	ab58					_GXAXRight:
.cb58	ab58	ee 94 07	inc $0794			inc 	gxX0
.cb5b	ab5b	d0 03		bne $ab60			bne 	_GXAXNoCarry
.cb5d	ab5d	ee 95 07	inc $0795			inc 	gxX0+1
.cb60	ab60					_GXAXNoCarry:
.cb60	ab60	ee a6 07	inc $07a6			inc 	gxOffset 					; pixel right
.cb63	ab63	d0 0e		bne $ab73			bne 	_GXAXExit 					; if not overflowed, exit.
.cb65	ab65	e6 3d		inc $3d				inc 	gxzScreen+1 					; next line
.cb67	ab67	a5 3d		lda $3d				lda 	gxzScreen+1
.cb69	ab69	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page ?
.cb6b	ab6b	90 06		bcc $ab73			bcc 	_GXAXExit
.cb6d	ab6d	e9 20		sbc #$20			sbc 	#$20 						; fix up
.cb6f	ab6f	85 3d		sta $3d				sta 	gxzScreen+1
.cb71	ab71	e6 0b		inc $0b				inc 	GXEditSlot 				; next page
.cb73	ab73					_GXAXExit:
.cb73	ab73	60		rts				rts
.cb74	ab74					GXIncrementY:
.cb74	ab74	ee 96 07	inc $0796			inc 	gxY0
.cb77	ab77	20 f0 af	jsr $aff0			jsr 	GXMovePositionDown
.cb7a	ab7a	60		rts				rts
.cb7b	ab7b					GXLineSetup:
.cb7b	ab7b	ad 9a 07	lda $079a			lda 	gxY1
.cb7e	ab7e	38		sec				sec
.cb7f	ab7f	ed 96 07	sbc $0796			sbc 	gxY0
.cb82	ab82	4a		lsr a				lsr 	a
.cb83	ab83	8d 32 08	sta $0832			sta 	gxDiffY
.cb86	ab86	9c 34 08	stz $0834			stz 	gxDXNegative 				; clear -ve flag
.cb89	ab89	38		sec				sec
.cb8a	ab8a	ad 98 07	lda $0798			lda 	gxX1
.cb8d	ab8d	ed 94 07	sbc $0794			sbc 	gxX0
.cb90	ab90	8d 31 08	sta $0831			sta 	gxDiffX
.cb93	ab93	ad 99 07	lda $0799			lda 	gxX1+1 						; calculate MSB
.cb96	ab96	ed 95 07	sbc $0795			sbc 	gxX0+1
.cb99	ab99	6a		ror a				ror 	a 							; rotate bit into DiffX halving it
.cb9a	ab9a	6e 31 08	ror $0831			ror 	gxDiffX
.cb9d	ab9d	0a		asl a				asl 	a
.cb9e	ab9e	10 0c		bpl $abac			bpl 	_GDXNotNegative
.cba0	aba0	a9 00		lda #$00			lda 	#0 							; make absolute value of |dx|
.cba2	aba2	38		sec				sec
.cba3	aba3	ed 31 08	sbc $0831			sbc 	gxDiffX
.cba6	aba6	8d 31 08	sta $0831			sta 	gxDiffX
.cba9	aba9	ce 34 08	dec $0834			dec 	gxDXNegative 				; -ve flag = $FF.
.cbac	abac					_GDXNotNegative:
.cbac	abac	9c 33 08	stz $0833			stz 	gxIsDiffYLarger 			; clear larger flag
.cbaf	abaf	ad 32 08	lda $0832			lda 	gxDiffY 					; set adjust and total.
.cbb2	abb2	8d 36 08	sta $0836			sta 	gxAdjust
.cbb5	abb5	ad 31 08	lda $0831			lda 	gxDiffX
.cbb8	abb8	8d 37 08	sta $0837			sta 	gxTotal
.cbbb	abbb	ad 32 08	lda $0832			lda 	gxDiffY 					; if dy > dx
.cbbe	abbe	cd 31 08	cmp $0831			cmp 	gxDiffX
.cbc1	abc1	90 0f		bcc $abd2			bcc 	_GDXNotLarger
.cbc3	abc3	ce 33 08	dec $0833			dec 	gxIsDiffYLarger 			; set the dy larger flag
.cbc6	abc6	ad 31 08	lda $0831			lda 	gxDiffX 					; set adjust and total other way round
.cbc9	abc9	8d 36 08	sta $0836			sta 	gxAdjust
.cbcc	abcc	ad 32 08	lda $0832			lda 	gxDiffY
.cbcf	abcf	8d 37 08	sta $0837			sta 	gxTotal
.cbd2	abd2					_GDXNotLarger:
.cbd2	abd2	ad 37 08	lda $0837			lda 	gxTotal
.cbd5	abd5	4a		lsr a				lsr 	a
.cbd6	abd6	8d 35 08	sta $0835			sta 	gxPosition
.cbd9	abd9	60		rts				rts
.0831						gxDiffX:
>0831								.fill 	1
.0832						gxDiffY:
>0832								.fill 	1
.0833						gxIsDiffYLarger:
>0833								.fill 	1
.0834						gxDXNegative:
>0834								.fill 	1
.0835						gxPosition:
>0835								.fill 	1
.0836						gxAdjust:
>0836								.fill 	1
.0837						gxTotal:
>0837								.fill 	1
.0838						gxAddSelect:
>0838								.fill 	1
.cbda	abda					GXSetColourMode:
.cbda	abda	a6 36		ldx $36				ldx 	gxzTemp0
.cbdc	abdc	8e a2 07	stx $07a2			stx 	gxColour 								; set colour
.cbdf	abdf	a5 37		lda $37				lda 	gxzTemp0+1 								;
.cbe1	abe1	8d a1 07	sta $07a1			sta 	gxMode 									; set mode
.cbe4	abe4	29 03		and #$03			and 	#3 										; only interested in bits 0-3
.cbe6	abe6	9c a4 07	stz $07a4			stz 	gxANDValue 								; initially AND with 0, and EOR with Colour
.cbe9	abe9	ae a2 07	ldx $07a2			ldx 	gxColour
.cbec	abec	8e a3 07	stx $07a3			stx 	gxEORValue
.cbef	abef	c9 02		cmp #$02			cmp 	#2 										; if mode 2/3 And with colour
.cbf1	abf1	90 03		bcc $abf6			bcc 	_GXSDCNotAndColour
.cbf3	abf3	8e a4 07	stx $07a4			stx 	gxANDValue
.cbf6	abf6					_GXSDCNotAndColour:
.cbf6	abf6	d0 03		bne $abfb			bne 	_GXSDCNotAnd 							; mode 2, Don't EOR with colour
.cbf8	abf8	9c a3 07	stz $07a3			stz 	gxEORValue
.cbfb	abfb					_GXSDCNotAnd:
.cbfb	abfb	4a		lsr a				lsr 	a 										; if bit 0 set, 1's complement AND value
.cbfc	abfc	90 08		bcc $ac06			bcc 	_GXSDCNoFlip
.cbfe	abfe	ad a4 07	lda $07a4			lda	 	gxANDValue
.cc01	ac01	49 ff		eor #$ff			eor 	#$FF
.cc03	ac03	8d a4 07	sta $07a4			sta 	gxANDValue
.cc06	ac06					_GXSDCNoFlip:
.cc06	ac06	18		clc				clc
.cc07	ac07	60		rts				rts
.cc08	ac08					GXPlotPoint:
.cc08	ac08	20 8a af	jsr $af8a			jsr 	GXOpenBitmap 				; start drawing
.cc0b	ac0b	20 9a af	jsr $af9a			jsr 	gxPositionCalc 				; setup gxzScreen, gxOffset and the position.
.cc0e	ac0e	ac a6 07	ldy $07a6			ldy 	gxOffset
.cc11	ac11	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel on the right
.cc13	ac13	2d a4 07	and $07a4			and 	gxANDValue
.cc16	ac16	4d a3 07	eor $07a3			eor 	gxEORValue
.cc19	ac19	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.cc1b	ac1b	20 92 af	jsr $af92			jsr 	GXCloseBitmap 				; stop drawing and exit
.cc1e	ac1e	18		clc				clc
.cc1f	ac1f	60		rts				rts
.cc20	ac20					GXFillRectangle:
.cc20	ac20	38		sec				sec
.cc21	ac21	80 01		bra $ac24			bra 	GXRectangle
.cc23	ac23					GXFrameRectangle:
.cc23	ac23	18		clc				clc
.cc24	ac24					GXRectangle:
.cc24	ac24	ad 9d 07	lda $079d			lda 	gxBitmapsOn
.cc27	ac27	f0 35		beq $ac5e			beq 	_GXRFail
.cc29	ac29	08		php				php 								; save Fill flag (CS)
.cc2a	ac2a	20 8a af	jsr $af8a			jsr 	GXOpenBitmap 				; start drawing
.cc2d	ac2d	20 b2 b0	jsr $b0b2			jsr 	GXSortXY 					; sort both X and Y so top left/bottom right
.cc30	ac30	20 9a af	jsr $af9a			jsr 	gxPositionCalc 				; setup gxzScreen, gxOffset and the position.
.cc33	ac33	38		sec				sec 								; sec = Draw line
.cc34	ac34	20 60 ac	jsr $ac60			jsr 	GXDrawLineX1X0 				; draw a line length X1-X0
.cc37	ac37	ad 96 07	lda $0796			lda 	gxY0 						; reached end of rectangle ?
.cc3a	ac3a	cd 9a 07	cmp $079a			cmp 	gxY1
.cc3d	ac3d	f0 19		beq $ac58			beq 	_GXRectangleExit
.cc3f	ac3f					_GXRectLoop:
.cc3f	ac3f	20 f0 af	jsr $aff0			jsr 	GXMovePositionDown 			; down one.
.cc42	ac42	ee 96 07	inc $0796			inc 	gxY0 						; change Y pos
.cc45	ac45	ad 96 07	lda $0796			lda 	gxY0 						; reached last line
.cc48	ac48	cd 9a 07	cmp $079a			cmp 	gxY1
.cc4b	ac4b	f0 07		beq $ac54			beq 	_GXLastLine
.cc4d	ac4d	28		plp				plp 								; get flag back
.cc4e	ac4e	08		php				php
.cc4f	ac4f	20 60 ac	jsr $ac60			jsr 	GXDrawLineX1X0 				; draw horizontal line
.cc52	ac52	80 eb		bra $ac3f			bra 	_GXRectLoop
.cc54	ac54					_GXLastLine:
.cc54	ac54	38		sec				sec
.cc55	ac55	20 60 ac	jsr $ac60			jsr 	GXDrawLineX1X0
.cc58	ac58					_GXRectangleExit:
.cc58	ac58	68		pla				pla 								; throw fill flag.
.cc59	ac59	20 92 af	jsr $af92			jsr 	GXCloseBitmap 				; stop drawing and exit
.cc5c	ac5c	18		clc				clc
.cc5d	ac5d	60		rts				rts
.cc5e	ac5e					_GXRFail:
.cc5e	ac5e	38		sec				sec
.cc5f	ac5f	60		rts				rts
.cc60	ac60					GXDrawLineX1X0:
.cc60	ac60	08		php				php 								; save solid/either-end
.cc61	ac61	38		sec				sec
.cc62	ac62	ad 98 07	lda $0798			lda		gxX1
.cc65	ac65	ed 94 07	sbc $0794			sbc 	gxX0
.cc68	ac68	85 36		sta $36				sta 	gxzTemp0
.cc6a	ac6a	ad 99 07	lda $0799			lda 	gxX1+1
.cc6d	ac6d	ed 95 07	sbc $0795			sbc 	gxX0+1
.cc70	ac70	85 37		sta $37				sta 	gxzTemp0+1
.cc72	ac72	28		plp				plp
.cc73	ac73					GXDrawLineTemp0:
.cc73	ac73	a5 3c		lda $3c				lda 	gxzScreen 						; push gxzScreen, gxOffset and GXEditSlot on stack
.cc75	ac75	48		pha				pha
.cc76	ac76	a5 3d		lda $3d				lda 	gxzScreen+1
.cc78	ac78	48		pha				pha
.cc79	ac79	ad a6 07	lda $07a6			lda 	gxOffset
.cc7c	ac7c	48		pha				pha
.cc7d	ac7d	a5 0b		lda $0b				lda 	GXEditSlot
.cc7f	ac7f	48		pha				pha
.cc80	ac80	ac a6 07	ldy $07a6			ldy 	gxOffset 					; Y offset
.cc83	ac83	90 1e		bcc $aca3			bcc 	_GXDLTEndPoints 			; if CC draw end points only.
.cc85	ac85					_GXDLTLine:
.cc85	ac85	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel
.cc87	ac87	2d a4 07	and $07a4			and 	gxANDValue
.cc8a	ac8a	4d a3 07	eor $07a3			eor 	gxEORValue
.cc8d	ac8d	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.cc8f	ac8f	a5 36		lda $36				lda 	gxzTemp0 					; decrement counter
.cc91	ac91	d0 04		bne $ac97			bne 	_GXDLTNoBorrow
.cc93	ac93	c6 37		dec $37				dec 	gxzTemp0+1 					; borrow, if goes -ve then exit
.cc95	ac95	30 2e		bmi $acc5			bmi 	_GXDLTExit
.cc97	ac97					_GXDLTNoBorrow:
.cc97	ac97	c6 36		dec $36				dec 	gxzTemp0
.cc99	ac99	c8		iny				iny 								; next slot.
.cc9a	ac9a	d0 e9		bne $ac85			bne 	_GXDLTLine
.cc9c	ac9c	e6 3d		inc $3d				inc 	gxzScreen+1 					; carry to next
.cc9e	ac9e	20 d3 ac	jsr $acd3			jsr 	GXDLTCheckWrap				; check for new page.
.cca1	aca1	80 e2		bra $ac85			bra 	_GXDLTLine
.cca3	aca3					_GXDLTEndPoints:
.cca3	aca3	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel
.cca5	aca5	2d a4 07	and $07a4			and 	gxANDValue
.cca8	aca8	4d a3 07	eor $07a3			eor 	gxEORValue
.ccab	acab	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.ccad	acad	98		tya				tya 								; advance to right side
.ccae	acae	18		clc				clc
.ccaf	acaf	65 36		adc $36				adc 	gxzTemp0
.ccb1	acb1	a8		tay				tay
.ccb2	acb2	a5 3d		lda $3d				lda 	gxzScreen+1
.ccb4	acb4	65 37		adc $37				adc 	gxzTemp0+1
.ccb6	acb6	85 3d		sta $3d				sta 	gxzScreen+1
.ccb8	acb8	20 d3 ac	jsr $acd3			jsr 	GXDLTCheckWrap 			; fix up.
.ccbb	acbb	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel on the right
.ccbd	acbd	2d a4 07	and $07a4			and 	gxANDValue
.ccc0	acc0	4d a3 07	eor $07a3			eor 	gxEORValue
.ccc3	acc3	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.ccc5	acc5					_GXDLTExit:
.ccc5	acc5	68		pla				pla
.ccc6	acc6	85 0b		sta $0b				sta 	GXEditSlot
.ccc8	acc8	68		pla				pla
.ccc9	acc9	8d a6 07	sta $07a6			sta 	gxOffset
.cccc	accc	68		pla				pla
.cccd	accd	85 3d		sta $3d				sta 	gxzScreen+1
.cccf	accf	68		pla				pla
.ccd0	acd0	85 3c		sta $3c				sta 	gxzScreen
.ccd2	acd2	60		rts				rts
.ccd3	acd3					GXDLTCheckWrap:
.ccd3	acd3	a5 3d		lda $3d				lda 	gxzScreen+1 					; check end of page
.ccd5	acd5	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8)
.ccd7	acd7	90 06		bcc $acdf			bcc 	_GXDLTCWExit
.ccd9	acd9	e9 20		sbc #$20			sbc 	#$20 						; fix up
.ccdb	acdb	85 3d		sta $3d				sta 	gxzScreen+1
.ccdd	acdd	e6 0b		inc $0b				inc 	GXEditSlot
.ccdf	acdf					_GXDLTCWExit:
.ccdf	acdf	60		rts				rts
.cce0	ace0					GXDrawGraphicElement:
.cce0	ace0	8d 39 08	sta $0839			sta 	gxSize 						; save size
.cce3	ace3	3a		dec a				dec 	a
.cce4	ace4	8d 3a 08	sta $083a			sta 	gxMask 						; and mask
.cce7	ace7	ad 9d 07	lda $079d			lda 	gxBitmapsOn 				; check BMP on
.ccea	acea	f0 67		beq $ad53			beq 	_GXSLFail
.ccec	acec	ad 96 07	lda $0796			lda 	gxY0 						; push Y on stack
.ccef	acef	48		pha				pha
.ccf0	acf0	8c 3c 08	sty $083c			sty 	gxAcquireVector+1 			; and acquisition vector
.ccf3	acf3	8e 3b 08	stx $083b			stx 	gxAcquireVector
.ccf6	acf6	20 8a af	jsr $af8a			jsr 	GXOpenBitmap 				; open the bitmap.
.ccf9	acf9	ad 3e 08	lda $083e			lda 	gxUseMode 					; scale bits
.ccfc	acfc	4a		lsr a				lsr 	a
.ccfd	acfd	4a		lsr a				lsr 	a
.ccfe	acfe	4a		lsr a				lsr 	a
.ccff	acff	29 07		and #$07			and		#7
.cd01	ad01	1a		inc a				inc 	a
.cd02	ad02	8d 3d 08	sta $083d			sta 	gxScale
.cd05	ad05	64 38		stz $38				stz 	gxzTemp1					; start first line
.cd07	ad07					_GXGELoop:
.cd07	ad07	a5 38		lda $38				lda 	gxzTemp1 					; current line number to read.
.cd09	ad09	2c 3e 08	bit $083e			bit 	gxUseMode 					; check for flip.
.cd0c	ad0c	10 06		bpl $ad14			bpl		_GXNoVFlip
.cd0e	ad0e	ad 3a 08	lda $083a			lda 	gxMask
.cd11	ad11	38		sec				sec
.cd12	ad12	e5 38		sbc $38				sbc 	gxzTemp1
.cd14	ad14					_GXNoVFlip:
.cd14	ad14	aa		tax				tax 								; get the Xth line.
.cd15	ad15	20 55 ad	jsr $ad55			jsr 	_GXCallAcquire 				; get that data.
.cd18	ad18	ad 3d 08	lda $083d			lda 	gxScale 					; do scale identical copies of that line.
.cd1b	ad1b	85 39		sta $39				sta 	gxzTemp1+1
.cd1d	ad1d					_GXGELoop2:
.cd1d	ad1d	ad 96 07	lda $0796			lda 	gxY0 						; off screen
.cd20	ad20	cd a0 07	cmp $07a0			cmp 	gxHeight
.cd23	ad23	b0 10		bcs $ad35			bcs 	_GXDGEExit
.cd25	ad25	20 58 ad	jsr $ad58			jsr 	GXRenderOneLine 			; render line
.cd28	ad28	c6 39		dec $39				dec 	gxzTemp1+1 					; scale times.
.cd2a	ad2a	d0 f1		bne $ad1d			bne 	_GXGELoop2
.cd2c	ad2c	e6 38		inc $38				inc 	gxzTemp1 					; done all lines.
.cd2e	ad2e	a5 38		lda $38				lda 	gxzTemp1
.cd30	ad30	cd 39 08	cmp $0839			cmp 	gxSize
.cd33	ad33	d0 d2		bne $ad07			bne 	_GXGELoop
.cd35	ad35					_GXDGEExit:
.cd35	ad35	68		pla				pla 								; restore Y for next time
.cd36	ad36	8d 96 07	sta $0796			sta 	gxY0
.cd39	ad39	ae 3d 08	ldx $083d			ldx 	gxScale 					; get scale (1-8)
.cd3c	ad3c					_GXShiftLeft:
.cd3c	ad3c	18		clc				clc
.cd3d	ad3d	ad 39 08	lda $0839			lda 	gxSize
.cd40	ad40	6d 94 07	adc $0794			adc 	gxX0
.cd43	ad43	8d 94 07	sta $0794			sta 	gxX0
.cd46	ad46	90 03		bcc $ad4b			bcc 	_GXSLNoCarry
.cd48	ad48	ee 95 07	inc $0795			inc 	gxX0+1
.cd4b	ad4b					_GXSLNoCarry:
.cd4b	ad4b	ca		dex				dex
.cd4c	ad4c	d0 ee		bne $ad3c			bne 	_GXShiftLeft
.cd4e	ad4e	20 92 af	jsr $af92			jsr 	GXCloseBitmap
.cd51	ad51	18		clc				clc
.cd52	ad52	60		rts				rts
.cd53	ad53					_GXSLFail:
.cd53	ad53	38		sec				sec
.cd54	ad54	60		rts				rts
.cd55	ad55					_GXCallAcquire:
.cd55	ad55	6c 3b 08	jmp ($083b)			jmp 	(gxAcquireVector)
.cd58	ad58					GXRenderOneLine:
.cd58	ad58	20 9a af	jsr $af9a			jsr 	gxPositionCalc 				; calculate position/offset.
.cd5b	ad5b	ac a6 07	ldy $07a6			ldy 	gxOffset 					; Y contains position.
.cd5e	ad5e	64 3a		stz $3a				stz 	gxzTemp2 					; do size pixels
.cd60	ad60					_GXROLLoop1:
.cd60	ad60	ad 3d 08	lda $083d			lda 	gxScale 					; set to do 'scale' times
.cd63	ad63	85 3b		sta $3b				sta 	gxzTemp2+1
.cd65	ad65					_GXROLLoop2:
.cd65	ad65	a5 3a		lda $3a				lda 	gxzTemp2 					; get current pixel
.cd67	ad67	2c a1 07	bit $07a1			bit 	gxMode 						; check H Flip
.cd6a	ad6a	50 06		bvc $ad72			bvc 	_GXNoHFlip
.cd6c	ad6c	ad 3a 08	lda $083a			lda 	gxMask
.cd6f	ad6f	38		sec				sec
.cd70	ad70	e5 3a		sbc $3a				sbc 	gxzTemp2
.cd72	ad72					_GXNoHFlip:
.cd72	ad72	aa		tax				tax 								; read from the pixel buffer
.cd73	ad73	bd 27 06	lda $0627,x			lda 	gxPixelBuffer,x
.cd76	ad76	d0 07		bne $ad7f			bne 	_GXDraw 					; draw if non zero
.cd78	ad78	ad 3e 08	lda $083e			lda 	gxUseMode 					; check to see if solid background
.cd7b	ad7b	29 04		and #$04			and 	#4
.cd7d	ad7d	f0 0a		beq $ad89			beq 	_GXZeroPixel
.cd7f	ad7f					_GXDraw:
.cd7f	ad7f	b1 3c		lda ($3c),y			lda 	(gxzScreen),y
.cd81	ad81	2d a4 07	and $07a4			and 	gxANDValue
.cd84	ad84	5d 27 06	eor $0627,x			eor 	gxPixelBuffer,x
.cd87	ad87	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.cd89	ad89					_GXZeroPixel:
.cd89	ad89	c8		iny				iny 								; advance pointer
.cd8a	ad8a	d0 05		bne $ad91			bne 	_GXNoShift
.cd8c	ad8c	e6 3d		inc $3d				inc 	gxzScreen+1 				; carry to next
.cd8e	ad8e	20 d3 ac	jsr $acd3			jsr 	GXDLTCheckWrap				; check for new page.
.cd91	ad91					_GXNoShift:
.cd91	ad91	c6 3b		dec $3b				dec 	gxzTemp2+1 					; do the inner loop gxScale times.
.cd93	ad93	d0 d0		bne $ad65			bne 	_GXROLLoop2
.cd95	ad95	e6 3a		inc $3a				inc 	gxzTemp2 					; next pixel.
.cd97	ad97	a5 3a		lda $3a				lda 	gxzTemp2
.cd99	ad99	cd 39 08	cmp $0839			cmp 	gxSize
.cd9c	ad9c	d0 c2		bne $ad60			bne 	_GXROLLoop1
.cd9e	ad9e	ee 96 07	inc $0796			inc 	gxY0
.cda1	ada1	60		rts				rts
.0839						gxSize:
>0839								.fill 	1
.083a						gxMask:
>083a								.fill 	1
.083b						gxAcquireVector:
>083b								.fill 	2
.083d						gxScale:
>083d								.fill 	1
.083e						gxUseMode:
>083e								.fill 	1
.cda2	ada2					GXFontHandler:
.cda2	ada2	a5 37		lda $37				lda 	gxzTemp0+1 					; eor with mode
.cda4	ada4	4d a1 07	eor $07a1			eor 	gxMode
.cda7	ada7	8d 3e 08	sta $083e			sta 	gxUseMode
.cdaa	adaa	64 37		stz $37				stz 	gxzTemp0+1 					; gxzTemp0 is font #
.cdac	adac	06 36		asl $36				asl	 	gxzTemp0 					; x 2
.cdae	adae	26 37		rol $37				rol	 	gxzTemp0+1
.cdb0	adb0	06 36		asl $36				asl	 	gxzTemp0 					; x 4
.cdb2	adb2	26 37		rol $37				rol	 	gxzTemp0+1
.cdb4	adb4	06 36		asl $36				asl	 	gxzTemp0 					; x 8
.cdb6	adb6	26 37		rol $37				rol	 	gxzTemp0+1
.cdb8	adb8	a5 37		lda $37				lda 	gxzTemp0+1 					; put in page C0
.cdba	adba	09 c0		ora #$c0			ora 	#$C0
.cdbc	adbc	85 37		sta $37				sta 	gxzTemp0+1
.cdbe	adbe	a9 08		lda #$08			lda 	#8 							; size 8x8
.cdc0	adc0	a2 c8		ldx #$c8			ldx 	#GXGetGraphicDataFont & $FF ; XY = Graphic Data retrieval routine
.cdc2	adc2	a0 ad		ldy #$ad			ldy 	#GXGetGraphicDataFont >> 8
.cdc4	adc4	20 e0 ac	jsr $ace0			jsr 	GXDrawGraphicElement
.cdc7	adc7	60		rts				rts
.cdc8	adc8					GXGetGraphicDataFont:
.cdc8	adc8	8a		txa				txa 								; X->Y
.cdc9	adc9	a8		tay				tay
.cdca	adca	a6 01		ldx $01				ldx 	1 							; preserve old value
.cdcc	adcc	a9 01		lda #$01			lda 	#1 							; access page 1 (font memory)
.cdce	adce	85 01		sta $01				sta 	1
.cdd0	add0	b1 36		lda ($36),y			lda 	(gxzTemp0),y 				; read the font element.
.cdd2	add2	86 01		stx $01				stx 	1 							; put old value back.
.cdd4	add4	a2 00		ldx #$00			ldx 	#0 							; do 8 times
.cdd6	add6					_GXExpand:
.cdd6	add6	9e 27 06	stz $0627,x			stz 	gxPixelBuffer,x 			; zero in pixel buffer
.cdd9	add9	0a		asl a				asl 	a 							; shift bit 7 into C
.cdda	adda	90 08		bcc $ade4			bcc 	_GXNoPixel
.cddc	addc	48		pha				pha 								; if set, set pixel buffer to current colour.
.cddd	addd	ad a2 07	lda $07a2			lda 	gxColour
.cde0	ade0	9d 27 06	sta $0627,x			sta 	gxPixelBuffer,x
.cde3	ade3	68		pla				pla
.cde4	ade4					_GXNoPixel:
.cde4	ade4	e8		inx				inx 								; do the whole byte.
.cde5	ade5	e0 08		cpx #$08			cpx 	#8
.cde7	ade7	d0 ed		bne $add6			bne 	_GXExpand
.cde9	ade9	60		rts				rts
.cdea	adea					GXSpriteHandler:
.cdea	adea	ad 9c 07	lda $079c			lda 	gxSpritesOn 				; sprites on ?
.cded	aded	f0 23		beq $ae12			beq 	_GXSHExit
.cdef	adef	a5 37		lda $37				lda 	gxzTemp0+1 					; eor with mode
.cdf1	adf1	4d a1 07	eor $07a1			eor 	gxMode
.cdf4	adf4	8d 3e 08	sta $083e			sta 	gxUseMode
.cdf7	adf7	a6 36		ldx $36				ldx 	gxzTemp0 					; sprite #
.cdf9	adf9	da		phx				phx
.cdfa	adfa	20 8a af	jsr $af8a			jsr 	GXOpenBitmap 				; can access sprite information
.cdfd	adfd	68		pla				pla
.cdfe	adfe	20 6b b0	jsr $b06b			jsr 	GXFindSprite 				; get the sprite address
.ce01	ae01	08		php				php
.ce02	ae02	20 92 af	jsr $af92			jsr 	GXCloseBitmap
.ce05	ae05	28		plp				plp
.ce06	ae06	b0 0a		bcs $ae12			bcs		_GXSHExit 					; exit if find failed.
.ce08	ae08	ad 3f 08	lda $083f			lda 	gxSizePixels 				; return size
.ce0b	ae0b	a2 13		ldx #$13			ldx 	#GXSpriteAcquire & $FF
.ce0d	ae0d	a0 ae		ldy #$ae			ldy 	#GXSpriteAcquire >> 8
.ce0f	ae0f	20 e0 ac	jsr $ace0			jsr 	GXDrawGraphicElement
.ce12	ae12					_GXSHExit:
.ce12	ae12	60		rts				rts
.ce13	ae13					GXSpriteAcquire:
.ce13	ae13	ad 9f 07	lda $079f			lda 	gxSpritePage				; point to base page
.ce16	ae16	85 0b		sta $0b				sta 	GXEditSlot
.ce18	ae18	86 36		stx $36				stx 	gxzTemp0 					; row number x 1,2,3,4
.ce1a	ae1a	a9 00		lda #$00			lda 	#0
.ce1c	ae1c	ae 40 08	ldx $0840			ldx 	gxSizeBits
.ce1f	ae1f					_GXTimesRowNumber:
.ce1f	ae1f	18		clc				clc
.ce20	ae20	65 36		adc $36				adc 	gxzTemp0
.ce22	ae22	ca		dex				dex
.ce23	ae23	10 fa		bpl $ae1f			bpl 	_GXTimesRowNumber
.ce25	ae25	64 37		stz $37				stz 	gxzTemp0+1
.ce27	ae27	0a		asl a				asl 	a 							; row x 2,4,6,8
.ce28	ae28	26 37		rol $37				rol 	gxzTemp0+1
.ce2a	ae2a	0a		asl a				asl 	a 							; row x 4,8,12,16
.ce2b	ae2b	26 37		rol $37				rol 	gxzTemp0+1
.ce2d	ae2d	0a		asl a				asl 	a 							; row x 8,16,24,32
.ce2e	ae2e	26 37		rol $37				rol 	gxzTemp0+1
.ce30	ae30	85 36		sta $36				sta 	gxzTemp0
.ce32	ae32	18		clc				clc 								; add base address.
.ce33	ae33	a5 36		lda $36				lda 	gxzTemp0
.ce35	ae35	6d 42 08	adc $0842			adc 	gxSpriteOffset
.ce38	ae38	85 36		sta $36				sta 	gxzTemp0
.ce3a	ae3a	a5 37		lda $37				lda 	gxzTemp0+1
.ce3c	ae3c	6d 43 08	adc $0843			adc 	gxSpriteOffset+1
.ce3f	ae3f					_GXSAFindPage:
.ce3f	ae3f	c9 20		cmp #$20			cmp 	#$20 						; on this page
.ce41	ae41	90 06		bcc $ae49			bcc 	_GXSAFoundPage
.ce43	ae43	e9 20		sbc #$20			sbc 	#$20 						; forward one page
.ce45	ae45	e6 0b		inc $0b				inc 	GXEditSlot
.ce47	ae47	80 f6		bra $ae3f			bra 	_GXSAFindPage
.ce49	ae49					_GXSAFoundPage:
.ce49	ae49	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; physical address of page.
.ce4b	ae4b	85 37		sta $37				sta 	gxzTemp0+1 					; gxzTemp0 now points to the page
.ce4d	ae4d	a0 00		ldy #$00			ldy 	#0
.ce4f	ae4f					_GXSACopyLoop:
.ce4f	ae4f	b1 36		lda ($36),y			lda 	(gxzTemp0),y
.ce51	ae51	99 27 06	sta $0627,y			sta 	gxPixelBuffer,y
.ce54	ae54	c8		iny				iny
.ce55	ae55	cc 3f 08	cpy $083f			cpy 	gxSizePixels
.ce58	ae58	d0 f5		bne $ae4f			bne 	_GXSACopyLoop
.ce5a	ae5a	60		rts				rts
.ce5b	ae5b					GXSelect:
.ce5b	ae5b	ad 9c 07	lda $079c			lda 	gxSpritesOn
.ce5e	ae5e	f0 22		beq $ae82			beq 	_GXSFail
.ce60	ae60	a5 36		lda $36				lda 	gxzTemp0 					; illegal sprite #
.ce62	ae62	c9 40		cmp #$40			cmp 	#64
.ce64	ae64	b0 1c		bcs $ae82			bcs 	_GXSFail
.ce66	ae66	8d a7 07	sta $07a7			sta 	GSCurrentSpriteID
.ce69	ae69	a4 37		ldy $37				ldy 	gxzTemp0+1 					; control value.
.ce6b	ae6b	a9 00		lda #$00			lda  	#0 							; multiply sprite # x 8 => A
.ce6d	ae6d	06 36		asl $36				asl 	gxzTemp0
.ce6f	ae6f	06 36		asl $36				asl 	gxzTemp0
.ce71	ae71	06 36		asl $36				asl 	gxzTemp0
.ce73	ae73	2a		rol a				rol 	a
.ce74	ae74	69 d9		adc #$d9			adc 	#$D9 						; sprite area
.ce76	ae76	8d a9 07	sta $07a9			sta 	GSCurrentSpriteAddr+1 		; address to GSCurrentSprite and gxzTemp
.ce79	ae79	85 37		sta $37				sta 	gxzTemp0+1
.ce7b	ae7b	a5 36		lda $36				lda 	gxzTemp0
.ce7d	ae7d	8d a8 07	sta $07a8			sta 	GSCurrentSpriteAddr
.ce80	ae80	18		clc				clc
.ce81	ae81	60		rts				rts
.ce82	ae82					_GXSFail:
.ce82	ae82	38		sec				sec
.ce83	ae83	60		rts				rts
.ce84	ae84					GXSelectImage:
.ce84	ae84	ad 9c 07	lda $079c			lda 	gxSpritesOn
.ce87	ae87	f0 74		beq $aefd			beq 	_GXSIFail
.ce89	ae89	ad a9 07	lda $07a9			lda 	GSCurrentSpriteAddr+1 		; check sprite selected
.ce8c	ae8c	f0 6f		beq $aefd			beq 	_GXSIFail 					; (checking the MSB)
.ce8e	ae8e	64 01		stz $01				stz 	1
.ce90	ae90	a5 37		lda $37				lda 	gxzTemp0+1 					; push show/hide on the stack.
.ce92	ae92	d0 6b		bne $aeff			bne 	_GXSIHide
.ce94	ae94	a5 36		lda $36				lda 	gxzTemp0 					; sprite image
.ce96	ae96	48		pha				pha
.ce97	ae97	20 8a af	jsr $af8a			jsr 	GXOpenBitmap
.ce9a	ae9a	68		pla				pla
.ce9b	ae9b	20 6b b0	jsr $b06b			jsr 	GXFindSprite
.ce9e	ae9e	b0 5a		bcs $aefa			bcs 	_GXSICloseFail 				; no image
.cea0	aea0	a0 01		ldy #$01			ldy 	#1
.cea2	aea2	ad a8 07	lda $07a8			lda 	GSCurrentSpriteAddr
.cea5	aea5	85 36		sta $36				sta 	gxzTemp0
.cea7	aea7	ad a9 07	lda $07a9			lda 	GSCurrentSpriteAddr+1
.ceaa	aeaa	85 37		sta $37				sta 	gxzTemp0+1
.ceac	aeac	ad 42 08	lda $0842			lda 	gxSpriteOffset
.ceaf	aeaf	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.ceb1	aeb1	18		clc				clc
.ceb2	aeb2	ad 43 08	lda $0843			lda 	gxSpriteOffset+1
.ceb5	aeb5	6d aa 07	adc $07aa			adc 	gxSpriteOffsetBase
.ceb8	aeb8	c8		iny				iny
.ceb9	aeb9	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.cebb	aebb	ad ab 07	lda $07ab			lda 	gxSpriteOffsetBase+1
.cebe	aebe	69 00		adc #$00			adc 	#0
.cec0	aec0	c8		iny				iny
.cec1	aec1	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.cec3	aec3	ad 40 08	lda $0840			lda 	gxSizeBits 					; get raw size
.cec6	aec6	49 03		eor #$03			eor 	#3 							; make it right (00=32 etc.)
.cec8	aec8	2a		rol a				rol 	a 							; x 2
.cec9	aec9	0a		asl a				asl 	a 							; x 4
.ceca	aeca	0a		asl a				asl 	a 							; x 8
.cecb	aecb	0a		asl a				asl 	a 							; x 16
.cecc	aecc	0d 41 08	ora $0841			ora 	gxSpriteLUT 				; Or with LUT
.cecf	aecf	0a		asl a				asl 	a 							; 1 shift
.ced0	aed0	09 01		ora #$01			ora 	#1 							; enable sprite.
.ced2	aed2	92 36		sta ($36)			sta 	(gxzTemp0) 					; and write back
.ced4	aed4	20 92 af	jsr $af92			jsr 	GXCloseBitmap
.ced7	aed7	ae a7 07	ldx $07a7			ldx 	GSCurrentSpriteID 			; point to sprite entries.
.ceda	aeda	bd ec 07	lda $07ec,x			lda 	gxSpriteHigh,x 				; clear upper two bits of size
.cedd	aedd	29 3f		and #$3f			and 	#$3F
.cedf	aedf	9d ec 07	sta $07ec,x			sta 	gxSpriteHigh,x
.cee2	aee2	ad 40 08	lda $0840			lda 	gxSizeBits 					; get bit size
.cee5	aee5	6a		ror a				ror 	a 							; shift into bits 6/7
.cee6	aee6	6a		ror a				ror 	a
.cee7	aee7	6a		ror a				ror 	a
.cee8	aee8	29 c0		and #$c0			and 	#$C0
.ceea	aeea	1d ec 07	ora $07ec,x			ora 	gxSpriteHigh,x 				; put in  upper 2 bits of sprite data
.ceed	aeed	9d ec 07	sta $07ec,x			sta 	gxSpriteHigh,x
.cef0	aef0	bd ac 07	lda $07ac,x			lda 	gxSpriteLow,x 				; clear hidden flag.
.cef3	aef3	29 7f		and #$7f			and 	#$7F
.cef5	aef5	9d ac 07	sta $07ac,x			sta 	gxSpriteLow,x
.cef8	aef8	18		clc				clc
.cef9	aef9	60		rts				rts
.cefa	aefa					_GXSICloseFail:
.cefa	aefa	20 92 af	jsr $af92			jsr 	GXCloseBitmap
.cefd	aefd					_GXSIFail:
.cefd	aefd	38		sec				sec
.cefe	aefe	60		rts				rts
.ceff	aeff					_GXSIHide:
.ceff	aeff	ad a8 07	lda $07a8			lda 	GSCurrentSpriteAddr  		; get Sprite h/w address and write there
.cf02	af02	85 36		sta $36				sta 	gxzTemp0
.cf04	af04	ad a9 07	lda $07a9			lda 	GSCurrentSpriteAddr+1
.cf07	af07	85 37		sta $37				sta 	gxzTemp0+1
.cf09	af09	a9 00		lda #$00			lda 	#0
.cf0b	af0b	92 36		sta ($36)			sta 	(gxzTemp0)
.cf0d	af0d	ae a7 07	ldx $07a7			ldx 	GSCurrentSpriteID 			; get sprite ID
.cf10	af10	bd ac 07	lda $07ac,x			lda 	gxSpriteLow,x 				; set the hidden bit.
.cf13	af13	09 80		ora #$80			ora 	#$80
.cf15	af15	9d ac 07	sta $07ac,x			sta 	gxSpriteLow,x
.cf18	af18	18		clc				clc
.cf19	af19	60		rts				rts
.cf1a	af1a					GXMoveSprite:
.cf1a	af1a	ad 9c 07	lda $079c			lda 	gxSpritesOn
.cf1d	af1d	f0 65		beq $af84			beq 	_GXSIFail
.cf1f	af1f	ad a9 07	lda $07a9			lda 	GSCurrentSpriteAddr+1 		; check sprite selected
.cf22	af22	f0 60		beq $af84			beq 	_GXSIFail
.cf24	af24	85 37		sta $37				sta 	gxzTemp0+1
.cf26	af26	a0 04		ldy #$04			ldy 	#4
.cf28	af28	ad a8 07	lda $07a8			lda 	GSCurrentSpriteAddr
.cf2b	af2b	85 36		sta $36				sta 	gxzTemp0
.cf2d	af2d	ae a7 07	ldx $07a7			ldx 	GSCurrentSpriteID 			; get the size from the upper two bits
.cf30	af30	bd ec 07	lda $07ec,x			lda 	gxSpriteHigh,x
.cf33	af33	2a		rol a				rol 	a	 						; into bits 0,1.
.cf34	af34	2a		rol a				rol 	a
.cf35	af35	2a		rol a				rol 	a
.cf36	af36	29 03		and #$03			and 	#3
.cf38	af38	aa		tax				tax
.cf39	af39	bd 86 af	lda $af86,x			lda 	_GXMSOffset,x 				; get 32-SpriteSize/2
.cf3c	af3c	48		pha				pha
.cf3d	af3d	18		clc				clc
.cf3e	af3e	6d 94 07	adc $0794			adc 	gxX0						; copy position.
.cf41	af41	91 36		sta ($36),y			sta 	(gxzTemp0),y
.cf43	af43	c8		iny				iny
.cf44	af44	ad 95 07	lda $0795			lda 	gxX0+1
.cf47	af47	69 00		adc #$00			adc 	#0
.cf49	af49	91 36		sta ($36),y			sta 	(gxzTemp0),y
.cf4b	af4b	c8		iny				iny
.cf4c	af4c	68		pla				pla
.cf4d	af4d	18		clc				clc
.cf4e	af4e	6d 96 07	adc $0796			adc 	gxY0
.cf51	af51	91 36		sta ($36),y			sta 	(gxzTemp0),y
.cf53	af53	a9 00		lda #$00			lda 	#0
.cf55	af55	69 00		adc #$00			adc 	#0
.cf57	af57	c8		iny				iny
.cf58	af58	91 36		sta ($36),y			sta 	(gxzTemp0),y
.cf5a	af5a	4e 95 07	lsr $0795			lsr 	gxX0+1 						; divide X by 4
.cf5d	af5d	6e 94 07	ror $0794			ror 	gxX0
.cf60	af60	4e 94 07	lsr $0794			lsr 	gxX0
.cf63	af63	4e 96 07	lsr $0796			lsr 	gxY0 						; divide Y by 4
.cf66	af66	4e 96 07	lsr $0796			lsr 	gxY0
.cf69	af69	ae a7 07	ldx $07a7			ldx 	GSCurrentSpriteID 			; copy X/4 and Y/4 into the status bytes
.cf6c	af6c	bd ac 07	lda $07ac,x			lda 	gxSpriteLow,x
.cf6f	af6f	29 80		and #$80			and 	#$80
.cf71	af71	0d 94 07	ora $0794			ora 	gxX0
.cf74	af74	9d ac 07	sta $07ac,x			sta 	gxSpriteLow,x
.cf77	af77	bd ec 07	lda $07ec,x			lda 	gxSpriteHigh,x
.cf7a	af7a	29 c0		and #$c0			and 	#$C0
.cf7c	af7c	0d 96 07	ora $0796			ora 	gxY0
.cf7f	af7f	9d ec 07	sta $07ec,x			sta 	gxSpriteHigh,x
.cf82	af82	18		clc				clc
.cf83	af83	60		rts				rts
.cf84	af84					_GXSIFail:
.cf84	af84	38		sec				sec
.cf85	af85	60		rts				rts
.cf86	af86					_GXMSOffset:
>cf86	af86	1c						.byte 	32-8/2
>cf87	af87	18						.byte 	32-16/2
>cf88	af88	14						.byte 	32-24/2
>cf89	af89	10						.byte 	32-32/2
.cf8a	af8a					GXOpenBitmap:
.cf8a	af8a	78		sei				sei 								; no interrupts here
.cf8b	af8b	a5 0b		lda $0b				lda 	GXEditSlot 					; Save the original LUT slot value
.cf8d	af8d	8d a5 07	sta $07a5			sta 	gxOriginalLUTValue
.cf90	af90	58		cli				cli
.cf91	af91	60		rts				rts
.cf92	af92					GXCloseBitmap:
.cf92	af92	78		sei				sei
.cf93	af93	ad a5 07	lda $07a5			lda 	gxOriginalLUTValue 			; restore LUT slot value
.cf96	af96	85 0b		sta $0b				sta 	GXEditSlot
.cf98	af98	58		cli				cli
.cf99	af99	60		rts				rts
.cf9a	af9a					gxPositionCalc:
.cf9a	af9a	a5 36		lda $36				lda 	gxzTemp0 					; save temp memory slot
.cf9c	af9c	48		pha				pha
.cf9d	af9d	ad 96 07	lda $0796			lda 	gxY0 						; gxzScreen = Y0
.cfa0	afa0	85 3c		sta $3c				sta 	gxzScreen
.cfa2	afa2	64 3d		stz $3d				stz 	gxzScreen+1
.cfa4	afa4	06 3c		asl $3c				asl 	gxzScreen 						; gxzScreen = Y0 * 4
.cfa6	afa6	26 3d		rol $3d				rol 	gxzScreen+1
.cfa8	afa8	06 3c		asl $3c				asl 	gxzScreen
.cfaa	afaa	26 3d		rol $3d				rol 	gxzScreen+1
.cfac	afac	18		clc				clc 								; gxzScreen = Y0 * 5, as it's still in A
.cfad	afad	65 3c		adc $3c				adc 	gxzScreen
.cfaf	afaf	85 3c		sta $3c				sta 	gxzScreen
.cfb1	afb1	90 02		bcc $afb5			bcc 	_GXPCNoCarry
.cfb3	afb3	e6 3d		inc $3d				inc 	gxzScreen+1
.cfb5	afb5					_GXPCNoCarry:
.cfb5	afb5	06 3c		asl $3c				asl 	gxzScreen 						; now Y0 * 10. Needs to be multiplied by another
.cfb7	afb7	26 3d		rol $3d				rol 	gxzScreen+1 					; 32. At this point the MSB contains the offset
.cfb9	afb9	a5 3d		lda $3d				lda	 	gxzScreen+1 					; so save this in zTemp0 and zero it.
.cfbb	afbb	85 36		sta $36				sta 	gxzTemp0
.cfbd	afbd	64 3d		stz $3d				stz 	gxzScreen+1
.cfbf	afbf	a9 05		lda #$05			lda 	#5 							; now multiply by 32, this puts this in the range 0..8191
.cfc1	afc1					_GXPCMultiply32:
.cfc1	afc1	06 3c		asl $3c				asl 	gxzScreen
.cfc3	afc3	26 3d		rol $3d				rol 	gxzScreen+1
.cfc5	afc5	3a		dec a				dec 	a
.cfc6	afc6	d0 f9		bne $afc1			bne 	_GXPCMultiply32
.cfc8	afc8	18		clc				clc
.cfc9	afc9	ad 94 07	lda $0794			lda 	gxX0 						; add X to this value, put the result in gxOffset, gxzScreen has to be on a page boundary
.cfcc	afcc	65 3c		adc $3c				adc 	gxzScreen
.cfce	afce	8d a6 07	sta $07a6			sta 	gxOffset
.cfd1	afd1	ad 95 07	lda $0795			lda 	gxX0+1
.cfd4	afd4	65 3d		adc $3d				adc 	gxzScreen+1
.cfd6	afd6	c9 20		cmp #$20			cmp 	#$20 						; has it overflowed into the next one ?
.cfd8	afd8	90 04		bcc $afde			bcc 	_GXPCNoOverflow
.cfda	afda	29 1f		and #$1f			and 	#$1F 						; fix it up
.cfdc	afdc	e6 36		inc $36				inc 	gxzTemp0 					; add 1 to the page number
.cfde	afde					_GXPCNoOverflow:
.cfde	afde	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; make it the address mapped in.
.cfe0	afe0	85 3d		sta $3d				sta 	gxzScreen+1
.cfe2	afe2	64 3c		stz $3c				stz 	gxzScreen
.cfe4	afe4	18		clc				clc
.cfe5	afe5	a5 36		lda $36				lda 	gxzTemp0 					; get the page number
.cfe7	afe7	6d 9e 07	adc $079e			adc 	gxBasePage 					; by adding the base page
.cfea	afea	85 0b		sta $0b				sta 	GXEditSlot 				; and map it into memory.
.cfec	afec	68		pla				pla
.cfed	afed	85 36		sta $36				sta 	gxzTemp0
.cfef	afef	60		rts				rts
.cff0	aff0					GXMovePositionDown:
.cff0	aff0	18		clc				clc 								; add 320 to offset/temp+1
.cff1	aff1	ad a6 07	lda $07a6			lda 	gxOffset
.cff4	aff4	69 40		adc #$40			adc 	#64
.cff6	aff6	8d a6 07	sta $07a6			sta 	gxOffset
.cff9	aff9	a5 3d		lda $3d				lda 	gxzScreen+1
.cffb	affb	69 01		adc #$01			adc 	#1
.cffd	affd	85 3d		sta $3d				sta 	gxzScreen+1
.cfff	afff	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page
.d001	b001	90 07		bcc $b00a			bcc 	_GXMPDExit
.d003	b003	38		sec				sec  								; next page
.d004	b004	e9 20		sbc #$20			sbc 	#$20
.d006	b006	85 3d		sta $3d				sta 	gxzScreen+1
.d008	b008	e6 0b		inc $0b				inc 	GXEditSlot
.d00a	b00a					_GXMPDExit:
.d00a	b00a	60		rts				rts
.d00b	b00b					GXCollide:
.d00b	b00b	a5 36		lda $36				lda 	gxzTemp0 					; check if sprite numbers are legal.
.d00d	b00d	aa		tax				tax
.d00e	b00e	05 37		ora $37				ora 	gxzTemp0+1
.d010	b010	29 c0		and #$c0			and 	#$C0
.d012	b012	38		sec				sec
.d013	b013	d0 53		bne $b068			bne 	_GXCollideFail 				; if either >= 64, fail.
.d015	b015	a4 37		ldy $37				ldy 	gxzTemp0+1 					; at this point X is 1st sprite and Y is 2nd sprite.
.d017	b017	b9 ac 07	lda $07ac,y			lda 	gxSpriteLow,y 				; check if either hidden bit is set
.d01a	b01a	1d ac 07	ora $07ac,x			ora 	gxSpriteLow,x
.d01d	b01d	30 48		bmi $b067			bmi 	_GXOkayFail 				; if either hidden, then they cannot collide.
.d01f	b01f	18		clc				clc 								; need to calculate sum of sizes.
.d020	b020	b9 ec 07	lda $07ec,y			lda 	gxSpriteHigh,y
.d023	b023	7d ec 07	adc $07ec,x			adc 	gxSpriteHigh,x 				; at this point, CS, Bit 6 and 7 contain that sum.
.d026	b026	29 c0		and #$c0			and 	#$C0 					 	; mask off
.d028	b028	6a		ror a				ror 	a 							; 5/6/7
.d029	b029	4a		lsr a				lsr 	a 							; 4/5/6
.d02a	b02a	4a		lsr a				lsr 	a 							; 3/4/5
.d02b	b02b	4a		lsr a				lsr 	a 							; 2/3/4
.d02c	b02c	18		clc				clc
.d02d	b02d	69 08		adc #$08			adc 	#$08
.d02f	b02f	4a		lsr a				lsr 	a 							; adjust because all coordinates are divided by 4 to store.
.d030	b030	4a		lsr a				lsr 	a
.d031	b031	85 38		sta $38				sta 	gxzTemp1 					; so the difference between the centres has to be less than this.
.d033	b033	b9 ec 07	lda $07ec,y			lda 	gxSpriteHigh,y 				; calculate y1-y0
.d036	b036	29 3f		and #$3f			and 	#$3F
.d038	b038	85 39		sta $39				sta 	gxzTemp1+1
.d03a	b03a	38		sec				sec
.d03b	b03b	bd ec 07	lda $07ec,x			lda 	gxSpriteHigh,x
.d03e	b03e	29 3f		and #$3f			and 	#$3F
.d040	b040	e5 39		sbc $39				sbc 	gxzTemp1+1
.d042	b042	b0 03		bcs $b047			bcs 	_GXCAbs1 					; calculate |y1-y0|
.d044	b044	49 ff		eor #$ff			eor 	#$FF
.d046	b046	1a		inc a				inc 	a
.d047	b047					_GXCAbs1:
.d047	b047	c5 38		cmp $38				cmp 	gxzTemp1 					; if >= difference then no overlap
.d049	b049	b0 1c		bcs $b067			bcs 	_GXOkayFail
.d04b	b04b	85 39		sta $39				sta 	gxzTemp1+1 					; save |y1-y0|
.d04d	b04d	38		sec				sec 								; calculate |x1-x0|
.d04e	b04e	b9 ac 07	lda $07ac,y			lda 	gxSpriteLow,y
.d051	b051	fd ac 07	sbc $07ac,x			sbc 	gxSpriteLow,x
.d054	b054	b0 03		bcs $b059			bcs 	_GXCAbs2
.d056	b056	49 ff		eor #$ff			eor 	#$FF
.d058	b058	1a		inc a				inc 	a
.d059	b059					_GXCAbs2:
.d059	b059	c5 38		cmp $38				cmp 	gxzTemp1 					; if >= difference then no overlap
.d05b	b05b	b0 0a		bcs $b067			bcs 	_GXOkayFail
.d05d	b05d	c5 39		cmp $39				cmp 	gxzTemp1+1 					; is it less than the previous one.
.d05f	b05f	90 02		bcc $b063			bcc 	_GXCHaveLowest
.d061	b061	a5 39		lda $39				lda 	gxzTemp1+1 					; if not, that's the smallest difference.
.d063	b063					_GXCHaveLowest:
.d063	b063	0a		asl a				asl 	a 							; scale to allow for >> 2
.d064	b064	0a		asl a				asl 	a
.d065	b065	18		clc				clc
.d066	b066	60		rts				rts
.d067	b067					_GXOkayFail:
.d067	b067	18		clc				clc
.d068	b068					_GXCollideFail:
.d068	b068	a9 ff		lda #$ff			lda 	#$FF
.d06a	b06a	60		rts				rts
.d06b	b06b					GXFindSprite:
.d06b	b06b	aa		tax				tax
.d06c	b06c	ad 9f 07	lda $079f			lda 	gxSpritePage 				; access the base page of the sprite
.d06f	b06f	85 0b		sta $0b				sta 	GXEditSlot
.d071	b071	bd 00 61	lda $6100,x			lda 	GXMappingAddress+256,x 		; check a valid sprite
.d074	b074	1d 00 60	ora $6000,x			ora 	GXMappingAddress,x
.d077	b077	f0 33		beq $b0ac			beq 	_GXFSFail
.d079	b079	bd 00 61	lda $6100,x			lda 	GXMappingAddress+256,x 		; MSB
.d07c	b07c	8d 43 08	sta $0843			sta 	gxSpriteOffset+1
.d07f	b07f	bd 00 60	lda $6000,x			lda 	GXMappingAddress,x 			; LSB
.d082	b082	48		pha				pha 								; save twice
.d083	b083	48		pha				pha
.d084	b084	29 03		and #$03			and 	#3 							; get sprite size
.d086	b086	8d 40 08	sta $0840			sta 	gxSizeBits 					; save raw (0-3)
.d089	b089	aa		tax				tax
.d08a	b08a	bd ae b0	lda $b0ae,x			lda 	_GXFXSSTTable,x 			; read sprite size
.d08d	b08d	8d 3f 08	sta $083f			sta 	gxSizePixels 					; save (8/16/24/32)
.d090	b090	68		pla				pla 								; get LUT
.d091	b091	4a		lsr a				lsr		a
.d092	b092	4a		lsr a				lsr		a
.d093	b093	29 03		and #$03			and 	#3
.d095	b095	8d 41 08	sta $0841			sta 	gxSpriteLUT
.d098	b098	68		pla				pla 								; address, neeeds to be x 4
.d099	b099	29 f0		and #$f0			and 	#$F0
.d09b	b09b	8d 42 08	sta $0842			sta 	gxSpriteOffset
.d09e	b09e	0e 42 08	asl $0842			asl 	gxSpriteOffset
.d0a1	b0a1	2e 43 08	rol $0843			rol 	gxSpriteOffset+1
.d0a4	b0a4	0e 42 08	asl $0842			asl 	gxSpriteOffset
.d0a7	b0a7	2e 43 08	rol $0843			rol 	gxSpriteOffset+1
.d0aa	b0aa	18		clc				clc
.d0ab	b0ab	60		rts				rts
.d0ac	b0ac					_GXFSFail:
.d0ac	b0ac	38		sec				sec
.d0ad	b0ad	60		rts				rts
.d0ae	b0ae					_GXFXSSTTable:
>d0ae	b0ae	08 10 18 20					.byte 	8,16,24,32
.083f						gxSizePixels:
>083f								.fill 	1
.0840						gxSizeBits:
>0840								.fill 	1
.0841						gxSpriteLUT:
>0841								.fill 	1
.0842						gxSpriteOffset:
>0842								.fill 	2
.d0b2	b0b2					GXSortXY:
.d0b2	b0b2	20 d0 b0	jsr $b0d0			jsr 	GXSortY 					; will be sorted on Y now
.d0b5	b0b5	ad 94 07	lda $0794			lda 	gxX0 						; compare X0 v X1
.d0b8	b0b8	cd 98 07	cmp $0798			cmp 	gxX1
.d0bb	b0bb	ad 95 07	lda $0795			lda 	gxX0+1
.d0be	b0be	ed 99 07	sbc $0799			sbc 	gxX1+1
.d0c1	b0c1	90 0c		bcc $b0cf			bcc 	_GXSXYExit 					; X0 < X1 exit
.d0c3	b0c3	a2 00		ldx #$00			ldx 	#0 							; swap them over
.d0c5	b0c5	a0 04		ldy #$04			ldy 	#4
.d0c7	b0c7	20 e4 b0	jsr $b0e4			jsr 	GXSwapXY
.d0ca	b0ca	e8		inx				inx
.d0cb	b0cb	c8		iny				iny
.d0cc	b0cc	20 e4 b0	jsr $b0e4			jsr 	GXSwapXY
.d0cf	b0cf					_GXSXYExit:
.d0cf	b0cf	60		rts				rts
.d0d0	b0d0					GXSortY:
.d0d0	b0d0	ad 96 07	lda $0796			lda 	gxY0 						; if Y0 >= Y1
.d0d3	b0d3	cd 9a 07	cmp $079a			cmp 	gxY1
.d0d6	b0d6	90 0b		bcc $b0e3			bcc 	_GXSYSorted
.d0d8	b0d8	a2 03		ldx #$03			ldx 	#3 							; swap 3-0
.d0da	b0da	a0 07		ldy #$07			ldy 	#7 							; with 4-7
.d0dc	b0dc					_GXSwap1:
.d0dc	b0dc	20 e4 b0	jsr $b0e4			jsr 	GXSwapXY
.d0df	b0df	88		dey				dey
.d0e0	b0e0	ca		dex				dex
.d0e1	b0e1	10 f9		bpl $b0dc			bpl 	_GXSwap1
.d0e3	b0e3					_GXSYSorted:
.d0e3	b0e3	60		rts				rts
.d0e4	b0e4					GXSwapXY:
.d0e4	b0e4	bd 94 07	lda $0794,x			lda 	gxX0,x
.d0e7	b0e7	48		pha				pha
.d0e8	b0e8	b9 94 07	lda $0794,y			lda 	gxX0,y
.d0eb	b0eb	9d 94 07	sta $0794,x			sta 	gxX0,x
.d0ee	b0ee	68		pla				pla
.d0ef	b0ef	99 94 07	sta $0794,y			sta 	gxX0,y
.d0f2	b0f2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_tokeniser.module

=1						tokeniserIntegrated=1
.d0f3	b0f3					KeywordSet0:
>d0f3	b0f3	00 65					.text	0,$65,""               ; $80 !0:EOF
>d0f5	b0f5	00 58					.text	0,$58,""               ; $81 !1:SH1
>d0f7	b0f7	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>d0f9	b0f9	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $83 ABS(
>d0ff	b0ff	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $84 ALLOC(
>d107	b107	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $85 ASC(
>d10d	b10d	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $86 CHR$(
>d114	b114	06 aa 45 56 45 4e 54 28			.text	6,$aa,"EVENT("         ; $87 EVENT(
>d11c	b11c	05 6b 46 41 4c 53 45			.text	5,$6b,"FALSE"          ; $88 FALSE
>d123	b123	05 44 46 52 41 43 28			.text	5,$44,"FRAC("          ; $89 FRAC(
>d12a	b12a	05 2c 47 45 54 24 28			.text	5,$2c,"GET$("          ; $8a GET$(
>d131	b131	04 08 47 45 54 28			.text	4,$08,"GET("           ; $8b GET(
>d137	b137	09 4a 47 45 54 44 41 54			.text	9,$4a,"GETDATE$("      ; $8c GETDATE$(
>d13f	b13f	45 24 28
>d142	b142	09 5b 47 45 54 54 49 4d			.text	9,$5b,"GETTIME$("      ; $8d GETTIME$(
>d14a	b14a	45 24 28
>d14d	b14d	04 0d 48 49 54 28			.text	4,$0d,"HIT("           ; $8e HIT(
>d153	b153	07 cc 49 4e 4b 45 59 24			.text	7,$cc,"INKEY$("        ; $8f INKEY$(
>d15b	b15b	28
>d15c	b15c	06 a8 49 4e 4b 45 59 28			.text	6,$a8,"INKEY("         ; $90 INKEY(
>d164	b164	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $91 INT(
>d16a	b16a	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $92 ISVAL(
>d172	b172	05 5c 4a 4f 59 42 28			.text	5,$5c,"JOYB("          ; $93 JOYB(
>d179	b179	05 72 4a 4f 59 58 28			.text	5,$72,"JOYX("          ; $94 JOYX(
>d180	b180	05 73 4a 4f 59 59 28			.text	5,$73,"JOYY("          ; $95 JOYY(
>d187	b187	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $96 LEFT$(
>d18f	b18f	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $97 LEN(
>d195	b195	04 0e 4d 41 58 28			.text	4,$0e,"MAX("           ; $98 MAX(
>d19b	b19b	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $99 MID$(
>d1a2	b1a2	04 0c 4d 49 4e 28			.text	4,$0c,"MIN("           ; $9a MIN(
>d1a8	b1a8	04 19 4e 4f 54 28			.text	4,$19,"NOT("           ; $9b NOT(
>d1ae	b1ae	05 4d 50 45 45 4b 28			.text	5,$4d,"PEEK("          ; $9c PEEK(
>d1b5	b1b5	06 91 50 45 45 4b 44 28			.text	6,$91,"PEEKD("         ; $9d PEEKD(
>d1bd	b1bd	06 99 50 45 45 4b 4c 28			.text	6,$99,"PEEKL("         ; $9e PEEKL(
>d1c5	b1c5	06 a4 50 45 45 4b 57 28			.text	6,$a4,"PEEKW("         ; $9f PEEKW(
>d1cd	b1cd	08 3c 50 4c 41 59 49 4e			.text	8,$3c,"PLAYING("       ; $a0 PLAYING(
>d1d5	b1d5	47 28
>d1d7	b1d7	07 e9 52 41 4e 44 4f 4d			.text	7,$e9,"RANDOM("        ; $a1 RANDOM(
>d1df	b1df	28
>d1e0	b1e0	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $a2 RIGHT$(
>d1e8	b1e8	28
>d1e9	b1e9	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $a3 RND(
>d1ef	b1ef	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $a4 SGN(
>d1f5	b1f5	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $a5 SPC(
>d1fb	b1fb	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $a6 STR$(
>d202	b202	06 a9 54 49 4d 45 52 28			.text	6,$a9,"TIMER("         ; $a7 TIMER(
>d20a	b20a	04 40 54 52 55 45			.text	4,$40,"TRUE"           ; $a8 TRUE
>d210	b210	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $a9 VAL(
>d216	b216	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $aa FOR
>d21b	b21b	02 8f 49 46				.text	2,$8f,"IF"             ; $ab IF
>d21f	b21f	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $ac PROC
>d225	b225	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $ad REPEAT
>d22d	b22d	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $ae WHILE
>d234	b234	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $af ENDIF
>d23b	b23b	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $b0 ENDPROC
>d243	b243	43
>d244	b244	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $b1 NEXT
>d24a	b24a	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $b2 THEN
>d250	b250	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $b3 UNTIL
>d257	b257	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $b4 WEND
>d25d	b25d	02 9b 42 59				.text	2,$9b,"BY"             ; $b5 BY
>d261	b261	04 1c 43 41 4c 4c			.text	4,$1c,"CALL"           ; $b6 CALL
>d267	b267	06 b2 43 49 52 43 4c 45			.text	6,$b2,"CIRCLE"         ; $b7 CIRCLE
>d26f	b26f	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $b8 CLEAR
>d276	b276	05 7f 43 4f 4c 4f 52			.text	5,$7f,"COLOR"          ; $b9 COLOR
>d27d	b27d	06 d4 43 4f 4c 4f 55 52			.text	6,$d4,"COLOUR"         ; $ba COLOUR
>d285	b285	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $bb DATA
>d28b	b28b	03 da 44 49 4d				.text	3,$da,"DIM"            ; $bc DIM
>d290	b290	06 db 44 4f 57 4e 54 4f			.text	6,$db,"DOWNTO"         ; $bd DOWNTO
>d298	b298	04 29 45 4c 53 45			.text	4,$29,"ELSE"           ; $be ELSE
>d29e	b29e	04 34 46 52 4f 4d			.text	4,$34,"FROM"           ; $bf FROM
>d2a4	b2a4	03 e5 47 46 58				.text	3,$e5,"GFX"            ; $c0 GFX
>d2a9	b2a9	04 24 48 45 52 45			.text	4,$24,"HERE"           ; $c1 HERE
>d2af	b2af	05 63 49 4d 41 47 45			.text	5,$63,"IMAGE"          ; $c2 IMAGE
>d2b6	b2b6	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $c3 LET
>d2bb	b2bb	04 28 4c 49 4e 45			.text	4,$28,"LINE"           ; $c4 LINE
>d2c1	b2c1	05 6b 4c 4f 43 41 4c			.text	5,$6b,"LOCAL"          ; $c5 LOCAL
>d2c8	b2c8	07 1a 4d 45 4d 43 4f 50			.text	7,$1a,"MEMCOPY"        ; $c6 MEMCOPY
>d2d0	b2d0	59
>d2d1	b2d1	03 db 4f 46 46				.text	3,$db,"OFF"            ; $c7 OFF
>d2d6	b2d6	02 9d 4f 4e				.text	2,$9d,"ON"             ; $c8 ON
>d2da	b2da	07 20 4f 55 54 4c 49 4e			.text	7,$20,"OUTLINE"        ; $c9 OUTLINE
>d2e2	b2e2	45
>d2e3	b2e3	07 0f 50 41 4c 45 54 54			.text	7,$0f,"PALETTE"        ; $ca PALETTE
>d2eb	b2eb	45
>d2ec	b2ec	04 3f 50 4c 4f 54			.text	4,$3f,"PLOT"           ; $cb PLOT
>d2f2	b2f2	04 2f 50 4f 4b 45			.text	4,$2f,"POKE"           ; $cc POKE
>d2f8	b2f8	05 73 50 4f 4b 45 44			.text	5,$73,"POKED"          ; $cd POKED
>d2ff	b2ff	05 7b 50 4f 4b 45 4c			.text	5,$7b,"POKEL"          ; $ce POKEL
>d306	b306	05 86 50 4f 4b 45 57			.text	5,$86,"POKEW"          ; $cf POKEW
>d30d	b30d	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $d0 READ
>d313	b313	04 2e 52 45 43 54			.text	4,$2e,"RECT"           ; $d1 RECT
>d319	b319	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $d2 REM
>d31e	b31e	05 7b 53 4f 4c 49 44			.text	5,$7b,"SOLID"          ; $d3 SOLID
>d325	b325	05 89 53 4f 55 4e 44			.text	5,$89,"SOUND"          ; $d4 SOUND
>d32c	b32c	06 d7 53 50 52 49 54 45			.text	6,$d7,"SPRITE"         ; $d5 SPRITE
>d334	b334	04 45 54 45 58 54			.text	4,$45,"TEXT"           ; $d6 TEXT
>d33a	b33a	02 a3 54 4f				.text	2,$a3,"TO"             ; $d7 TO
>d33e	b33e	ff					.text	$FF
.d33f	b33f					KeywordSet1:
>d33f	b33f	00 65					.text	0,$65,""               ; $80 !0:EOF
>d341	b341	00 58					.text	0,$58,""               ; $81 !1:SH1
>d343	b343	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>d345	b345	08 4c 41 53 53 45 4d 42			.text	8,$4c,"ASSEMBLE"       ; $83 ASSEMBLE
>d34d	b34d	4c 45
>d34f	b34f	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $84 ASSERT
>d357	b357	06 bd 42 49 54 4d 41 50			.text	6,$bd,"BITMAP"         ; $85 BITMAP
>d35f	b35f	05 62 42 4c 4f 41 44			.text	5,$62,"BLOAD"          ; $86 BLOAD
>d366	b366	05 71 42 53 41 56 45			.text	5,$71,"BSAVE"          ; $87 BSAVE
>d36d	b36d	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $88 CLS
>d372	b372	06 d0 43 50 52 49 4e 54			.text	6,$d0,"CPRINT"         ; $89 CPRINT
>d37a	b37a	03 df 44 49 52				.text	3,$df,"DIR"            ; $8a DIR
>d37f	b37f	05 7a 44 52 49 56 45			.text	5,$7a,"DRIVE"          ; $8b DRIVE
>d386	b386	03 d7 45 4e 44				.text	3,$d7,"END"            ; $8c END
>d38b	b38b	07 11 45 58 50 4c 4f 44			.text	7,$11,"EXPLODE"        ; $8d EXPLODE
>d393	b393	45
>d394	b394	02 96 47 4f				.text	2,$96,"GO"             ; $8e GO
>d398	b398	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $8f GOSUB
>d39f	b39f	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $90 GOTO
>d3a5	b3a5	05 70 48 49 4d 45 4d			.text	5,$70,"HIMEM"          ; $91 HIMEM
>d3ac	b3ac	05 90 49 4e 50 55 54			.text	5,$90,"INPUT"          ; $92 INPUT
>d3b3	b3b3	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $93 LIST
>d3b9	b3b9	04 20 4c 4f 41 44			.text	4,$20,"LOAD"           ; $94 LOAD
>d3bf	b3bf	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $95 NEW
>d3c4	b3c4	04 2e 50 49 4e 47			.text	4,$2e,"PING"           ; $96 PING
>d3ca	b3ca	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $97 PRINT
>d3d1	b3d1	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $98 RESTORE
>d3d9	b3d9	45
>d3da	b3da	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $99 RETURN
>d3e2	b3e2	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $9a RUN
>d3e7	b3e7	04 2f 53 41 56 45			.text	4,$2f,"SAVE"           ; $9b SAVE
>d3ed	b3ed	07 0a 53 45 54 44 41 54			.text	7,$0a,"SETDATE"        ; $9c SETDATE
>d3f5	b3f5	45
>d3f6	b3f6	07 1b 53 45 54 54 49 4d			.text	7,$1b,"SETTIME"        ; $9d SETTIME
>d3fe	b3fe	45
>d3ff	b3ff	05 8d 53 48 4f 4f 54			.text	5,$8d,"SHOOT"          ; $9e SHOOT
>d406	b406	07 2a 53 50 52 49 54 45			.text	7,$2a,"SPRITES"        ; $9f SPRITES
>d40e	b40e	53
>d40f	b40f	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $a0 STOP
>d415	b415	06 d5 56 45 52 49 46 59			.text	6,$d5,"VERIFY"         ; $a1 VERIFY
>d41d	b41d	03 ee 58 47 4f				.text	3,$ee,"XGO"            ; $a2 XGO
>d422	b422	05 78 58 4c 4f 41 44			.text	5,$78,"XLOAD"          ; $a3 XLOAD
>d429	b429	03 eb 5a 41 50				.text	3,$eb,"ZAP"            ; $a4 ZAP
>d42e	b42e	ff					.text	$FF
.d42f	b42f					KeywordSet2:
>d42f	b42f	00 65					.text	0,$65,""               ; $80 !0:EOF
>d431	b431	00 58					.text	0,$58,""               ; $81 !1:SH1
>d433	b433	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>d435	b435	03 c8 41 44 43				.text	3,$c8,"ADC"            ; $83 ADC
>d43a	b43a	03 d3 41 4e 44				.text	3,$d3,"AND"            ; $84 AND
>d43f	b43f	03 e0 41 53 4c				.text	3,$e0,"ASL"            ; $85 ASL
>d444	b444	03 c8 42 43 43				.text	3,$c8,"BCC"            ; $86 BCC
>d449	b449	03 d8 42 43 53				.text	3,$d8,"BCS"            ; $87 BCS
>d44e	b44e	03 d8 42 45 51				.text	3,$d8,"BEQ"            ; $88 BEQ
>d453	b453	03 df 42 49 54				.text	3,$df,"BIT"            ; $89 BIT
>d458	b458	03 d8 42 4d 49				.text	3,$d8,"BMI"            ; $8a BMI
>d45d	b45d	03 d5 42 4e 45				.text	3,$d5,"BNE"            ; $8b BNE
>d462	b462	03 de 42 50 4c				.text	3,$de,"BPL"            ; $8c BPL
>d467	b467	03 d5 42 52 41				.text	3,$d5,"BRA"            ; $8d BRA
>d46c	b46c	03 df 42 52 4b				.text	3,$df,"BRK"            ; $8e BRK
>d471	b471	03 db 42 56 43				.text	3,$db,"BVC"            ; $8f BVC
>d476	b476	03 eb 42 56 53				.text	3,$eb,"BVS"            ; $90 BVS
>d47b	b47b	03 d2 43 4c 43				.text	3,$d2,"CLC"            ; $91 CLC
>d480	b480	03 d3 43 4c 44				.text	3,$d3,"CLD"            ; $92 CLD
>d485	b485	03 d8 43 4c 49				.text	3,$d8,"CLI"            ; $93 CLI
>d48a	b48a	03 e5 43 4c 56				.text	3,$e5,"CLV"            ; $94 CLV
>d48f	b48f	03 e0 43 4d 50				.text	3,$e0,"CMP"            ; $95 CMP
>d494	b494	03 eb 43 50 58				.text	3,$eb,"CPX"            ; $96 CPX
>d499	b499	03 ec 43 50 59				.text	3,$ec,"CPY"            ; $97 CPY
>d49e	b49e	03 cc 44 45 43				.text	3,$cc,"DEC"            ; $98 DEC
>d4a3	b4a3	03 e1 44 45 58				.text	3,$e1,"DEX"            ; $99 DEX
>d4a8	b4a8	03 e2 44 45 59				.text	3,$e2,"DEY"            ; $9a DEY
>d4ad	b4ad	03 e6 45 4f 52				.text	3,$e6,"EOR"            ; $9b EOR
>d4b2	b4b2	03 da 49 4e 43				.text	3,$da,"INC"            ; $9c INC
>d4b7	b4b7	03 ef 49 4e 58				.text	3,$ef,"INX"            ; $9d INX
>d4bc	b4bc	03 f0 49 4e 59				.text	3,$f0,"INY"            ; $9e INY
>d4c1	b4c1	03 e7 4a 4d 50				.text	3,$e7,"JMP"            ; $9f JMP
>d4c6	b4c6	03 ef 4a 53 52				.text	3,$ef,"JSR"            ; $a0 JSR
>d4cb	b4cb	03 d1 4c 44 41				.text	3,$d1,"LDA"            ; $a1 LDA
>d4d0	b4d0	03 e8 4c 44 58				.text	3,$e8,"LDX"            ; $a2 LDX
>d4d5	b4d5	03 e9 4c 44 59				.text	3,$e9,"LDY"            ; $a3 LDY
>d4da	b4da	03 f1 4c 53 52				.text	3,$f1,"LSR"            ; $a4 LSR
>d4df	b4df	03 ed 4e 4f 50				.text	3,$ed,"NOP"            ; $a5 NOP
>d4e4	b4e4	03 e2 4f 52 41				.text	3,$e2,"ORA"            ; $a6 ORA
>d4e9	b4e9	03 d9 50 48 41				.text	3,$d9,"PHA"            ; $a7 PHA
>d4ee	b4ee	03 e8 50 48 50				.text	3,$e8,"PHP"            ; $a8 PHP
>d4f3	b4f3	03 f0 50 48 58				.text	3,$f0,"PHX"            ; $a9 PHX
>d4f8	b4f8	03 f1 50 48 59				.text	3,$f1,"PHY"            ; $aa PHY
>d4fd	b4fd	03 dd 50 4c 41				.text	3,$dd,"PLA"            ; $ab PLA
>d502	b502	03 ec 50 4c 50				.text	3,$ec,"PLP"            ; $ac PLP
>d507	b507	03 f4 50 4c 58				.text	3,$f4,"PLX"            ; $ad PLX
>d50c	b50c	03 f5 50 4c 59				.text	3,$f5,"PLY"            ; $ae PLY
>d511	b511	03 ed 52 4f 4c				.text	3,$ed,"ROL"            ; $af ROL
>d516	b516	03 f3 52 4f 52				.text	3,$f3,"ROR"            ; $b0 ROR
>d51b	b51b	03 ef 52 54 49				.text	3,$ef,"RTI"            ; $b1 RTI
>d520	b520	03 f9 52 54 53				.text	3,$f9,"RTS"            ; $b2 RTS
>d525	b525	03 d8 53 42 43				.text	3,$d8,"SBC"            ; $b3 SBC
>d52a	b52a	03 db 53 45 43				.text	3,$db,"SEC"            ; $b4 SEC
>d52f	b52f	03 dc 53 45 44				.text	3,$dc,"SED"            ; $b5 SED
>d534	b534	03 e1 53 45 49				.text	3,$e1,"SEI"            ; $b6 SEI
>d539	b539	03 e8 53 54 41				.text	3,$e8,"STA"            ; $b7 STA
>d53e	b53e	03 f7 53 54 50				.text	3,$f7,"STP"            ; $b8 STP
>d543	b543	03 ff 53 54 58				.text	3,$ff,"STX"            ; $b9 STX
>d548	b548	03 00 53 54 59				.text	3,$00,"STY"            ; $ba STY
>d54d	b54d	03 01 53 54 5a				.text	3,$01,"STZ"            ; $bb STZ
>d552	b552	03 ed 54 41 58				.text	3,$ed,"TAX"            ; $bc TAX
>d557	b557	03 ee 54 41 59				.text	3,$ee,"TAY"            ; $bd TAY
>d55c	b55c	03 e8 54 52 42				.text	3,$e8,"TRB"            ; $be TRB
>d561	b561	03 e9 54 53 42				.text	3,$e9,"TSB"            ; $bf TSB
>d566	b566	03 ff 54 53 58				.text	3,$ff,"TSX"            ; $c0 TSX
>d56b	b56b	03 ed 54 58 41				.text	3,$ed,"TXA"            ; $c1 TXA
>d570	b570	03 ff 54 58 53				.text	3,$ff,"TXS"            ; $c2 TXS
>d575	b575	03 ee 54 59 41				.text	3,$ee,"TYA"            ; $c3 TYA
>d57a	b57a	ff					.text	$FF
.d57b	b57b					Export_TKListConvertLine:
.d57b	b57b	48		pha				pha 								; save indent on the stack
.d57c	b57c	9c 1d 04	stz $041d			stz 	tbOffset
.d57f	b57f	9c 2d 04	stz $042d			stz 	tokenBuffer
.d582	b582	9c 29 04	stz $0429			stz 	currentListColour
.d585	b585	a9 8d		lda #$8d			lda 	#CLILineNumber+$80
.d587	b587	20 04 b7	jsr $b704			jsr 	LCLWriteColour
.d58a	b58a	a0 02		ldy #$02			ldy 	#2 							; convert line number to string
.d58c	b58c	b1 30		lda ($30),y			lda 	(codePtr),y
.d58e	b58e	aa		tax				tax
.d58f	b58f	88		dey				dey
.d590	b590	b1 30		lda ($30),y			lda 	(codePtr),y
.d592	b592	20 75 b7	jsr $b775			jsr 	LCLWriteNumberXA
.d595	b595	68		pla				pla 								; adjustment to indent
.d596	b596	48		pha				pha 								; save on stack
.d597	b597	10 0c		bpl $b5a5			bpl 	_LCNoAdjust 				; don't adjust indent if +ve, do after.
.d599	b599	18		clc				clc 								; add to list indent and make 0 if goes -ve.
.d59a	b59a	6d 26 04	adc $0426			adc 	listIndent
.d59d	b59d	8d 26 04	sta $0426			sta 	listIndent
.d5a0	b5a0	10 03		bpl $b5a5			bpl 	_LCNoAdjust
.d5a2	b5a2	9c 26 04	stz $0426			stz 	listIndent
.d5a5	b5a5					_LCNoAdjust:
.d5a5	b5a5	18		clc				clc		 							; work out actual indent.
.d5a6	b5a6	ad 26 04	lda $0426			lda 	listIndent
.d5a9	b5a9	0a		asl a				asl 	a
.d5aa	b5aa	69 07		adc #$07			adc 	#7
.d5ac	b5ac	85 36		sta $36				sta 	zTemp0
.d5ae	b5ae					_LCPadOut:
.d5ae	b5ae	a9 20		lda #$20			lda 	#' '						; pad out to 6+indent characters
.d5b0	b5b0	20 0d b7	jsr $b70d			jsr 	LCLWrite
.d5b3	b5b3	ad 1d 04	lda $041d			lda 	tbOffset
.d5b6	b5b6	c5 36		cmp $36				cmp 	zTemp0
.d5b8	b5b8	d0 f4		bne $b5ae			bne 	_LCPadOut
.d5ba	b5ba	a0 03		ldy #$03			ldy 	#3 							; start position.
.d5bc	b5bc					_LCMainLoop:
.d5bc	b5bc	a9 8c		lda #$8c			lda 	#CLIPunctuation+$80
.d5be	b5be	20 04 b7	jsr $b704			jsr 	LCLWriteColour
.d5c1	b5c1	b1 30		lda ($30),y			lda 	(codePtr),y
.d5c3	b5c3	c9 80		cmp #$80			cmp 	#KWC_EOL 					; end of line ?
.d5c5	b5c5	f0 17		beq $b5de			beq 	_LCExit
.d5c7	b5c7	c9 10		cmp #$10			cmp 	#16 						; 0-5 are the double punctuations
.d5c9	b5c9	90 1e		bcc $b5e9			bcc 	_LCDoubles
.d5cb	b5cb	c9 20		cmp #$20			cmp 	#32 						; 16-31 are shifted punctuation from 64-91
.d5cd	b5cd	90 2a		bcc $b5f9			bcc 	_LCShiftPunc
.d5cf	b5cf	c9 40		cmp #$40			cmp 	#64 						; 32-64 are as stored, punc and digits
.d5d1	b5d1	90 35		bcc $b608			bcc 	_LCPunctuation
.d5d3	b5d3	c9 80		cmp #$80			cmp 	#128 						; 64-127 are variable identifiers.
.d5d5	b5d5	90 51		bcc $b628			bcc 	_LCIdentifiers
.d5d7	b5d7	c9 fe		cmp #$fe			cmp 	#254 						; 128-253 are tokenised words
.d5d9	b5d9	90 73		bcc $b64e			bcc 	_LCTokens
.d5db	b5db	4c ae b6	jmp $b6ae			jmp 	_LCData 					; 254-5 are data objects
.d5de	b5de					_LCExit:
.d5de	b5de	68		pla				pla 								; get old indent adjust
.d5df	b5df	30 07		bmi $b5e8			bmi 	_LCExit2
.d5e1	b5e1	18		clc				clc 								; add to indent if +ve
.d5e2	b5e2	6d 26 04	adc $0426			adc 	listIndent
.d5e5	b5e5	8d 26 04	sta $0426			sta 	listIndent
.d5e8	b5e8					_LCExit2:
.d5e8	b5e8	60		rts				rts
.d5e9	b5e9					_LCDoubles:
.d5e9	b5e9	48		pha				pha
.d5ea	b5ea	4a		lsr a				lsr 	a 							; put bit 2 into bit 1
.d5eb	b5eb	29 02		and #$02			and 	#2
.d5ed	b5ed	09 3c		ora #$3c			ora 	#60 						; make < >
.d5ef	b5ef	20 0d b7	jsr $b70d			jsr 	LCLWrite
.d5f2	b5f2	68		pla				pla 								; restore, do lower bit
.d5f3	b5f3	29 03		and #$03			and 	#3
.d5f5	b5f5	09 3c		ora #$3c			ora 	#60
.d5f7	b5f7	80 0f		bra $b608			bra		_LCPunctuation 				; print, increment, loop
.d5f9	b5f9					_LCShiftPunc:
.d5f9	b5f9	aa		tax				tax 								; save in X
.d5fa	b5fa	29 07		and #$07			and 	#7 							; lower 3 bits
.d5fc	b5fc	f0 02		beq $b600			beq 	_LCNoAdd
.d5fe	b5fe	09 18		ora #$18			ora 	#24 						; adds $18 to it.
.d600	b600					_LCNoAdd:
.d600	b600	e0 18		cpx #$18			cpx 	#24 						; if >= 24 add $20
.d602	b602	90 02		bcc $b606			bcc 	_LCNoAdd2
.d604	b604	09 20		ora #$20			ora 	#32 						; adds $20
.d606	b606					_LCNoAdd2:
.d606	b606	09 40		ora #$40			ora 	#$40 						; shift into 64-127 range and fall through.
.d608	b608					_LCPunctuation:
.d608	b608	c9 3a		cmp #$3a			cmp 	#':' 						; check if :
.d60a	b60a	d0 03		bne $b60f			bne 	_LCPContinue
.d60c	b60c	20 23 b7	jsr $b723			jsr 	LCLDeleteLastSpace 			; if so delete any preceding spaces
.d60f	b60f					_LCPContinue:
.d60f	b60f	c9 2e		cmp #$2e			cmp 	#'.'
.d611	b611	f0 08		beq $b61b			beq 	_LCPIsConstant
.d613	b613	c9 30		cmp #$30			cmp 	#'0'
.d615	b615	90 0b		bcc $b622			bcc 	_LCPNotConstant
.d617	b617	c9 3a		cmp #$3a			cmp 	#'9'+1
.d619	b619	b0 07		bcs $b622			bcs 	_LCPNotConstant
.d61b	b61b					_LCPIsConstant:
.d61b	b61b	48		pha				pha
.d61c	b61c	a9 87		lda #$87			lda 	#CLIConstant+$80
.d61e	b61e	20 04 b7	jsr $b704			jsr 	LCLWriteColour
.d621	b621	68		pla				pla
.d622	b622					_LCPNotConstant:
.d622	b622	c8		iny				iny 								; consume character
.d623	b623	20 0d b7	jsr $b70d			jsr 	LCLWrite 					; write it out.
.d626	b626	80 94		bra $b5bc			bra 	_LCMainLoop 				; go round again.
.d628	b628					_LCIdentifiers:
.d628	b628	18		clc				clc 								; convert to physical address
.d629	b629	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.d62b	b62b	85 37		sta $37				sta 	zTemp0+1
.d62d	b62d	c8		iny				iny
.d62e	b62e	b1 30		lda ($30),y			lda 	(codePtr),y
.d630	b630	85 36		sta $36				sta 	zTemp0
.d632	b632	c8		iny				iny
.d633	b633	5a		phy				phy 								; save position
.d634	b634	a9 8e		lda #$8e			lda 	#CLIIdentifier+$80
.d636	b636	20 04 b7	jsr $b704			jsr 	LCLWriteColour
.d639	b639	a0 07		ldy #$07			ldy 	#7 							; output the identifier at +8
.d63b	b63b					_LCOutIdentifier:
.d63b	b63b	c8		iny				iny
.d63c	b63c	b1 36		lda ($36),y			lda 	(zTemp0),y					; bit 7 set = end.
.d63e	b63e	29 7f		and #$7f			and 	#$7F
.d640	b640	20 5f b7	jsr $b75f			jsr 	LCLLowerCase
.d643	b643	20 0d b7	jsr $b70d			jsr 	LCLWrite
.d646	b646	b1 36		lda ($36),y			lda 	(zTemp0),y				 	; ends when bit 7 set.
.d648	b648	10 f1		bpl $b63b			bpl 	_LCOutIdentifier
.d64a	b64a	7a		ply				ply 								; restore position
.d64b	b64b	4c bc b5	jmp $b5bc			jmp 	_LCMainLoop
.d64e	b64e					_LCTokens:
.d64e	b64e	aa		tax				tax 								; token in X
.d64f	b64f	a9 2f		lda #$2f			lda 	#((KeywordSet2) & $FF)
.d651	b651	85 36		sta $36				sta 	0+zTemp0
.d653	b653	a9 b4		lda #$b4			lda 	#((KeywordSet2) >> 8)
.d655	b655	85 37		sta $37				sta 	1+zTemp0
.d657	b657	e0 82		cpx #$82			cpx 	#$82
.d659	b659	f0 16		beq $b671			beq 	_LCUseShift
.d65b	b65b	a9 3f		lda #$3f			lda 	#((KeywordSet1) & $FF)
.d65d	b65d	85 36		sta $36				sta 	0+zTemp0
.d65f	b65f	a9 b3		lda #$b3			lda 	#((KeywordSet1) >> 8)
.d661	b661	85 37		sta $37				sta 	1+zTemp0
.d663	b663	e0 81		cpx #$81			cpx 	#$81
.d665	b665	f0 0a		beq $b671			beq 	_LCUseShift
.d667	b667	a9 f3		lda #$f3			lda 	#((KeywordSet0) & $FF)
.d669	b669	85 36		sta $36				sta 	0+zTemp0
.d66b	b66b	a9 b0		lda #$b0			lda 	#((KeywordSet0) >> 8)
.d66d	b66d	85 37		sta $37				sta 	1+zTemp0
.d66f	b66f	80 01		bra $b672			bra 	_LCNoShift
.d671	b671					_LCUseShift:
.d671	b671	c8		iny				iny
.d672	b672					_LCNoShift:
.d672	b672	20 37 b7	jsr $b737			jsr 	LCLCheckSpaceRequired 		; do we need a space ?
.d675	b675	b1 30		lda ($30),y			lda 	(codePtr),y
.d677	b677	aa		tax				tax 								; into X
.d678	b678					_LCFindText:
.d678	b678	ca		dex				dex
.d679	b679	10 0e		bpl $b689			bpl 	_LCFoundText 				; found text.
.d67b	b67b	b2 36		lda ($36)			lda 	(zTemp0) 					; length of text
.d67d	b67d	1a		inc a				inc 	a 							; one extra for size
.d67e	b67e	38		sec				sec 								; one extra for checksum
.d67f	b67f	65 36		adc $36				adc 	zTemp0 						; go to next token
.d681	b681	85 36		sta $36				sta 	zTemp0
.d683	b683	90 f3		bcc $b678			bcc 	_LCFindText
.d685	b685	e6 37		inc $37				inc 	zTemp0+1
.d687	b687	80 ef		bra $b678			bra 	_LCFindText
.d689	b689					_LCFoundText:
.d689	b689	5a		phy				phy 								; save List position
.d68a	b68a	b2 36		lda ($36)			lda 	(zTemp0)					; count to print
.d68c	b68c	aa		tax				tax
.d68d	b68d	a9 86		lda #$86			lda 	#CLIToken+$80
.d68f	b68f	20 04 b7	jsr $b704			jsr 	LCLWriteColour
.d692	b692	a0 02		ldy #$02			ldy 	#2
.d694	b694					_LCCopyToken:
.d694	b694	b1 36		lda ($36),y			lda 	(zTemp0),y
.d696	b696	20 5f b7	jsr $b75f			jsr 	LCLLowerCase
.d699	b699	20 0d b7	jsr $b70d			jsr 	LCLWrite
.d69c	b69c	c8		iny				iny
.d69d	b69d	ca		dex				dex
.d69e	b69e	d0 f4		bne $b694			bne 	_LCCopyToken
.d6a0	b6a0	c9 28		cmp #$28			cmp 	#"(" 						; if last char not ( print a space
.d6a2	b6a2	f0 05		beq $b6a9			beq 	_LCNoSpace
.d6a4	b6a4	a9 20		lda #$20			lda 	#' '
.d6a6	b6a6	20 0d b7	jsr $b70d			jsr 	LCLWrite
.d6a9	b6a9					_LCNoSpace:
.d6a9	b6a9	7a		ply				ply 								; restore position.
.d6aa	b6aa	c8		iny				iny 								; consume token
.d6ab	b6ab	4c bc b5	jmp $b5bc			jmp 	_LCMainLoop 				; and go around again.
.d6ae	b6ae					_LCData:
.d6ae	b6ae	48		pha				pha 								; save type $FE/$FF
.d6af	b6af	a2 24		ldx #$24			ldx 	#'$' 						; figure out $ or "
.d6b1	b6b1	c9 fe		cmp #$fe			cmp 	#$FE
.d6b3	b6b3	f0 22		beq $b6d7			beq 	_LCHaveOpener
.d6b5	b6b5	a2 22		ldx #$22			ldx 	#'"'
.d6b7	b6b7	a9 8f		lda #$8f			lda 	#CLIData+$80
.d6b9	b6b9	20 04 b7	jsr $b704			jsr 	LCLWriteColour
.d6bc	b6bc	c0 04		cpy #$04			cpy 	#4 							; must be 2nd thing on line
.d6be	b6be	d0 17		bne $b6d7			bne 	_LCHaveOpener
.d6c0	b6c0	88		dey				dey 								; what precedes it ?
.d6c1	b6c1	b1 30		lda ($30),y			lda 	(codePtr),y
.d6c3	b6c3	c8		iny				iny
.d6c4	b6c4	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; if quote
.d6c6	b6c6	d0 0f		bne $b6d7			bne 	_LCHaveOpener
.d6c8	b6c8	a9 09		lda #$09			lda 	#9 							; tab
.d6ca	b6ca	20 0d b7	jsr $b70d			jsr 	LCLWrite
.d6cd	b6cd	a9 9e		lda #$9e			lda 	#$90+CLIBComment
.d6cf	b6cf	20 0d b7	jsr $b70d			jsr 	LCLWrite
.d6d2	b6d2	a9 85		lda #$85			lda 	#CLIFComment+$80
.d6d4	b6d4	20 04 b7	jsr $b704			jsr 	LCLWriteColour
.d6d7	b6d7					_LCHaveOpener:
.d6d7	b6d7	8a		txa				txa 								; output prefix (# or ")
.d6d8	b6d8	20 0d b7	jsr $b70d			jsr 	LCLWrite
.d6db	b6db	c8		iny				iny 								; get count
.d6dc	b6dc	b1 30		lda ($30),y			lda 	(codePtr),y
.d6de	b6de	aa		tax				tax
.d6df	b6df	c8		iny				iny 								; point at first character
.d6e0	b6e0					_LCOutData:
.d6e0	b6e0	b1 30		lda ($30),y			lda 	(codePtr),y
.d6e2	b6e2	c9 00		cmp #$00			cmp 	#0
.d6e4	b6e4	f0 03		beq $b6e9			beq 	_LCNoPrint
.d6e6	b6e6	20 0d b7	jsr $b70d			jsr 	LCLWrite
.d6e9	b6e9					_LCNoPrint:
.d6e9	b6e9	c8		iny				iny
.d6ea	b6ea	ca		dex				dex
.d6eb	b6eb	d0 f3		bne $b6e0			bne 	_LCOutData
.d6ed	b6ed	68		pla				pla 								; closing " required ?
.d6ee	b6ee	c9 ff		cmp #$ff			cmp 	#$FF 						; not required for hex constant.
.d6f0	b6f0	d0 0f		bne $b701			bne 	_LCNoQuote
.d6f2	b6f2	a9 22		lda #$22			lda 	#'"'
.d6f4	b6f4	20 0d b7	jsr $b70d			jsr 	LCLWrite
.d6f7	b6f7	ad 89 07	lda $0789			lda 	EXTTextColour
.d6fa	b6fa	29 0f		and #$0f			and 	#$0F
.d6fc	b6fc	09 90		ora #$90			ora 	#$90
.d6fe	b6fe	20 0d b7	jsr $b70d			jsr 	LCLWrite
.d701	b701					_LCNoQuote:
.d701	b701	4c bc b5	jmp $b5bc			jmp 	_LCMainLoop
.d704	b704					LCLWriteColour:
.d704	b704	cd 29 04	cmp $0429			cmp 	currentListColour 			; has the colour changed
.d707	b707	8d 29 04	sta $0429			sta 	currentListColour 			; (update it anyway)
.d70a	b70a	d0 01		bne $b70d			bne 	LCLWrite 					; if different, output it
.d70c	b70c	60		rts				rts
.d70d	b70d					LCLWrite:
.d70d	b70d	da		phx				phx
.d70e	b70e	ae 1d 04	ldx $041d			ldx 	tbOffset 					; write out make ASCIIZ
.d711	b711	9d 2d 04	sta $042d,x			sta 	tokenBuffer,x
.d714	b714	9e 2e 04	stz $042e,x			stz 	tokenBuffer+1,x
.d717	b717	ee 1d 04	inc $041d			inc 	tbOffset 					; bump the position
.d71a	b71a	09 00		ora #$00			ora 	#0 							; don't update last character if colour data
.d71c	b71c	30 03		bmi $b721			bmi 	_LCLNoColour
.d71e	b71e	8d 27 04	sta $0427			sta 	lcLastCharacter
.d721	b721					_LCLNoColour:
.d721	b721	fa		plx				plx
.d722	b722	60		rts				rts
.d723	b723					LCLDeleteLastSpace:
.d723	b723	48		pha				pha
.d724	b724	da		phx				phx
.d725	b725	ae 1d 04	ldx $041d			ldx 	tbOffset
.d728	b728	f0 0a		beq $b734			beq 	_LCDLSExit
.d72a	b72a	bd 2c 04	lda $042c,x			lda 	tokenBuffer-1,x
.d72d	b72d	c9 20		cmp #$20			cmp 	#' '
.d72f	b72f	d0 03		bne $b734			bne 	_LCDLSExit
.d731	b731	ce 1d 04	dec $041d			dec 	tbOffset
.d734	b734					_LCDLSExit:
.d734	b734	fa		plx				plx
.d735	b735	68		pla				pla
.d736	b736	60		rts				rts
.d737	b737					LCLCheckSpaceRequired:
.d737	b737	ad 27 04	lda $0427			lda 	lcLastCharacter 			; check last character
.d73a	b73a	c9 24		cmp #$24			cmp 	#'$' 						; $ # and ) require that token space.
.d73c	b73c	f0 1b		beq $b759			beq 	_LCCSRSpace
.d73e	b73e	c9 29		cmp #$29			cmp 	#')'
.d740	b740	f0 17		beq $b759			beq 	_LCCSRSpace
.d742	b742	c9 23		cmp #$23			cmp 	#'#'
.d744	b744	f0 13		beq $b759			beq 	_LCCSRSpace
.d746	b746	20 5f b7	jsr $b75f			jsr 	LCLLowerCase 				; saves a little effort
.d749	b749	c9 30		cmp #$30			cmp 	#"0" 						; check if it was 0-9 A-Z a-z if so need space.
.d74b	b74b	90 11		bcc $b75e			bcc 	_LCCSRExit
.d74d	b74d	c9 3a		cmp #$3a			cmp 	#"9"+1
.d74f	b74f	90 08		bcc $b759			bcc 	_LCCSRSpace
.d751	b751	c9 61		cmp #$61			cmp 	#"a"
.d753	b753	90 09		bcc $b75e			bcc 	_LCCSRExit
.d755	b755	c9 7b		cmp #$7b			cmp 	#"z"+1
.d757	b757	b0 05		bcs $b75e			bcs 	_LCCSRExit
.d759	b759					_LCCSRSpace:
.d759	b759	a9 20		lda #$20			lda 	#' '
.d75b	b75b	20 0d b7	jsr $b70d			jsr 	LCLWrite
.d75e	b75e					_LCCSRExit:
.d75e	b75e	60		rts				rts
.d75f	b75f					LCLLowerCase:
.d75f	b75f	c9 41		cmp #$41			cmp 	#"A"
.d761	b761	90 06		bcc $b769			bcc 	_LCLLCOut
.d763	b763	c9 5b		cmp #$5b			cmp 	#"Z"+1
.d765	b765	b0 02		bcs $b769			bcs 	_LCLLCOut
.d767	b767	69 20		adc #$20			adc 	#$20
.d769	b769					_LCLLCOut:
.d769	b769	60		rts				rts
.d76a	b76a					LCLUpperCase:
.d76a	b76a	c9 61		cmp #$61			cmp 	#"a"
.d76c	b76c	90 06		bcc $b774			bcc 	_LCLUCOut
.d76e	b76e	c9 7b		cmp #$7b			cmp 	#"z"+1
.d770	b770	b0 02		bcs $b774			bcs 	_LCLUCOut
.d772	b772	e9 1f		sbc #$1f			sbc 	#$1F
.d774	b774					_LCLUCOut:
.d774	b774	60		rts				rts
.d775	b775					LCLWriteNumberXA:
.d775	b775	64 37		stz $37				stz 	zTemp0+1 					; index into digit table.
.d777	b777					_LCLWNLoop1:
.d777	b777	64 36		stz $36				stz 	zTemp0 						; subtraction count.
.d779	b779					_LCLWNLoop2:
.d779	b779	48		pha				pha 								; save initial LSB
.d77a	b77a	38		sec				sec
.d77b	b77b	a4 37		ldy $37				ldy 	zTemp0+1 					; position in table.
.d77d	b77d	f9 ae b7	sbc $b7ae,y			sbc 	_LCLWNTable,y
.d780	b780	48		pha				pha
.d781	b781	8a		txa				txa
.d782	b782	f9 af b7	sbc $b7af,y			sbc 	_LCLWNTable+1,y
.d785	b785	90 07		bcc $b78e			bcc 	_LCLWNUnderflow
.d787	b787	e6 36		inc $36				inc 	zTemp0  					; subtracted one without borrow.
.d789	b789	aa		tax				tax 								; update X
.d78a	b78a	68		pla				pla 								; restore A
.d78b	b78b	7a		ply				ply 								; throw original
.d78c	b78c	80 eb		bra $b779			bra 	_LCLWNLoop2 				; try again.
.d78e	b78e					_LCLWNUnderflow:
.d78e	b78e	a4 36		ldy $36				ldy 	zTemp0 						; count of subtractions.
.d790	b790	d0 06		bne $b798			bne 	_LCLWNOut
.d792	b792	ad 1d 04	lda $041d			lda 	tbOffset 					; suppress leading zeroes
.d795	b795	3a		dec a				dec 	a
.d796	b796	f0 04		beq $b79c			beq 	_LCLWNNext
.d798	b798					_LCLWNOut:
.d798	b798	98		tya				tya
.d799	b799	20 a8 b7	jsr $b7a8			jsr 	_LCLWNOutDigit
.d79c	b79c					_LCLWNNext:
.d79c	b79c	7a		ply				ply 							 	; restore original value.
.d79d	b79d	68		pla				pla
.d79e	b79e	a4 37		ldy $37				ldy 	zTemp0+1  					; bump the index
.d7a0	b7a0	c8		iny				iny
.d7a1	b7a1	c8		iny				iny
.d7a2	b7a2	84 37		sty $37				sty 	zTemp0+1
.d7a4	b7a4	c0 08		cpy #$08			cpy 	#8 							; done all 4
.d7a6	b7a6	d0 cf		bne $b777			bne 	_LCLWNLoop1
.d7a8	b7a8					_LCLWNOutDigit:
.d7a8	b7a8	09 30		ora #$30			ora 	#'0'
.d7aa	b7aa	20 0d b7	jsr $b70d			jsr 	LCLWrite
.d7ad	b7ad	60		rts				rts
.d7ae	b7ae					_LCLWNTable:
>d7ae	b7ae	10 27						.word 	10000
>d7b0	b7b0	e8 03						.word 	1000
>d7b2	b7b2	64 00						.word 	100
>d7b4	b7b4	0a 00						.word 	10
.d7b6	b7b6					TOKSearchTable:
.d7b6	b7b6	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token being tested.
.d7b8	b7b8	85 36		sta $36				sta 	zTemp0
.d7ba	b7ba	a0 00		ldy #$00			ldy 	#0
.d7bc	b7bc	a9 80		lda #$80			lda 	#$80 						; token # so we know which one we are looking at
.d7be	b7be	85 38		sta $38				sta 	zTemp1
.d7c0	b7c0					_TSTLoop:
.d7c0	b7c0	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.d7c2	b7c2	30 49		bmi $b80d			bmi 	_TSTFail 					; -ve = end of table, so fail.
.d7c4	b7c4	f0 2e		beq $b7f4			beq 	_TSTNext 					; zero, check next as it's a dummy (e.g. EOL, SHIFT)
.d7c6	b7c6	c8		iny				iny 								; get the hash
.d7c7	b7c7	b1 36		lda ($36),y			lda 	(zTemp0),y
.d7c9	b7c9	88		dey				dey
.d7ca	b7ca	cd 03 04	cmp $0403			cmp 	identHash 					; check they match with the identifier hash, if not go to next
.d7cd	b7cd	d0 25		bne $b7f4			bne 	_TSTNext
.d7cf	b7cf	ad 02 04	lda $0402			lda 	identTypeEnd 				; get length of identifier from end-start
.d7d2	b7d2	38		sec				sec
.d7d3	b7d3	ed 00 04	sbc $0400			sbc 	identStart
.d7d6	b7d6	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; compare against the length in the table, no match, then return.
.d7d8	b7d8	d0 1a		bne $b7f4			bne 	_TSTNext
.d7da	b7da	5a		phy				phy 								; save Y , we might fail to match.
.d7db	b7db	c8		iny				iny 								; point to text
.d7dc	b7dc	c8		iny				iny
.d7dd	b7dd	ae 00 04	ldx $0400			ldx 	identStart 					; offset in line buffer in X
.d7e0	b7e0					_TSTCompareName:
.d7e0	b7e0	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; compare text.
.d7e3	b7e3	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.d7e5	b7e5	d0 0c		bne $b7f3			bne 	_TSTNextPullY 				; fail, pullY and do next
.d7e7	b7e7	e8		inx				inx
.d7e8	b7e8	c8		iny				iny
.d7e9	b7e9	ec 02 04	cpx $0402			cpx 	identTypeEnd 				; complete match.
.d7ec	b7ec	d0 f2		bne $b7e0			bne 	_TSTCompareName
.d7ee	b7ee	7a		ply				ply 								; throw Y
.d7ef	b7ef	a5 38		lda $38				lda 	zTemp1 						; get token #
.d7f1	b7f1	38		sec				sec 								; return with CS = passed.
.d7f2	b7f2	60		rts				rts
.d7f3	b7f3					_TSTNextPullY:
.d7f3	b7f3	7a		ply				ply 								; restore current, fall through.
.d7f4	b7f4					_TSTNext:
.d7f4	b7f4	e6 38		inc $38				inc 	zTemp1 						; token counter
.d7f6	b7f6	98		tya				tya
.d7f7	b7f7	18		clc				clc
.d7f8	b7f8	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.d7fa	b7fa	1a		inc a				inc 	a 							; +1
.d7fb	b7fb	1a		inc a				inc 	a 							; +2
.d7fc	b7fc	a8		tay				tay
.d7fd	b7fd	10 c1		bpl $b7c0			bpl 	_TSTLoop 					; if Y < $80 loop back
.d7ff	b7ff	98		tya				tya 								; add Y to zTemp0 and reset Y
.d800	b800	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.d802	b802	18		clc				clc  								; but have tables > 255 bytes
.d803	b803	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.d805	b805	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.d807	b807	90 b7		bcc $b7c0			bcc 	_TSTLoop
.d809	b809	e6 37		inc $37				inc 	zTemp0+1
.d80b	b80b	80 b3		bra $b7c0			bra 	_TSTLoop
.d80d	b80d					_TSTFail:
.d80d	b80d	18		clc				clc
.d80e	b80e	60		rts				rts
.d80f	b80f					Export_TKTokeniseLine:
.d80f	b80f	20 dc b9	jsr $b9dc			jsr 	LCLFixLineBufferCase 		; fix line case
.d812	b812	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.d814	b814	8d 2a 04	sta $042a			sta 	tokenOffset 				; (3 bytes for line number & offset)
.d817	b817	9c 2b 04	stz $042b			stz 	tokenLineNumber
.d81a	b81a	9c 2c 04	stz $042c			stz 	tokenLineNumber+1
.d81d	b81d	a2 ff		ldx #$ff			ldx 	#$FF
.d81f	b81f					_TKFindFirst:
.d81f	b81f	e8		inx				inx
.d820	b820	bd 2a 05	lda $052a,x			lda 	lineBuffer,x
.d823	b823	f0 62		beq $b887			beq 	_TKExit
.d825	b825	c9 20		cmp #$20			cmp 	#' '
.d827	b827	90 f6		bcc $b81f			bcc 	_TKFindFirst
.d829	b829	c9 30		cmp #$30			cmp 	#'0'
.d82b	b82b	90 07		bcc $b834			bcc 	_TKNoLineNumber
.d82d	b82d	c9 3a		cmp #$3a			cmp 	#'9'+1
.d82f	b82f	b0 03		bcs $b834			bcs 	_TKNoLineNumber
.d831	b831	20 06 ba	jsr $ba06			jsr 	TOKExtractLineNumber
.d834	b834					_TKNoLineNumber:
.d834	b834					_TKTokeniseLoop:
.d834	b834	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.d837	b837	f0 4e		beq $b887			beq 	_TKExit
.d839	b839	e8		inx				inx
.d83a	b83a	c9 20		cmp #$20			cmp 	#' '
.d83c	b83c	f0 f6		beq $b834			beq 	_TKTokeniseLoop 			; keep looping if space found.
.d83e	b83e	ca		dex				dex 								; undo last get, A contains character, X is position.
.d83f	b83f	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.d841	b841	f0 68		beq $b8ab			beq 	_TKTokeniseIdentifier 		; (already case converted outside string constants)
.d843	b843	c9 41		cmp #$41			cmp 	#'A'
.d845	b845	90 04		bcc $b84b			bcc 	_TKTokenisePunctuation
.d847	b847	c9 5b		cmp #$5b			cmp 	#'Z'+1
.d849	b849	90 60		bcc $b8ab			bcc 	_TKTokeniseIdentifier
.d84b	b84b					_TKTokenisePunctuation:
.d84b	b84b	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.d84d	b84d	f0 2e		beq $b87d			beq 	_TKString
.d84f	b84f	c9 24		cmp #$24			cmp 	#'$'						; hexadecimal constant ($ only appears at end of identifiers)
.d851	b851	f0 2f		beq $b882			beq 	_TKHexConstant
.d853	b853	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers - these are for <> <= >= >> <<
.d855	b855	f0 36		beq $b88d			beq 	_TKCheckDouble
.d857	b857	c9 3e		cmp #$3e			cmp 	#'>'
.d859	b859	f0 32		beq $b88d			beq 	_TKCheckDouble
.d85b	b85b					_TKStandardPunctuation:
.d85b	b85b	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; get the punctuation token back.
.d85e	b85e	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.d860	b860	90 0e		bcc $b870			bcc 	_TKNoShift
.d862	b862	48		pha				pha 								; save. we are about to convert this punctuation token from
.d863	b863	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.d865	b865	85 36		sta $36				sta 	zTemp0
.d867	b867	68		pla				pla
.d868	b868	29 20		and #$20			and 	#32 						; bit 5
.d86a	b86a	4a		lsr a				lsr 	a 							; shift into bit 3
.d86b	b86b	4a		lsr a				lsr 	a
.d86c	b86c	05 36		ora $36				ora 	zTemp0
.d86e	b86e	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.d870	b870					_TKNoShift:
.d870	b870	20 4b ba	jsr $ba4b			jsr 	TOKWriteByte 				; write the punctuation character
.d873	b873	e8		inx				inx 								; consume the character
.d874	b874	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; quote found ?
.d876	b876	d0 bc		bne $b834			bne 	_TKTokeniseLoop 			; and loop round again.
.d878	b878	20 3e b9	jsr $b93e			jsr 	TOKCheckComment 			; comment checl
.d87b	b87b	80 b7		bra $b834			bra 	_TKTokeniseLoop
.d87d	b87d					_TKString:
.d87d	b87d	20 6b b9	jsr $b96b			jsr 	TOKTokenString
.d880	b880	80 b2		bra $b834			bra 	_TKTokeniseLoop
.d882	b882					_TKHexConstant:
.d882	b882	20 a6 b9	jsr $b9a6			jsr 	TOKHexConstant
.d885	b885	80 ad		bra $b834			bra 	_TKTokeniseLoop
.d887	b887	a9 80		lda #$80	_TKExit:lda 	#KWC_EOL 					; write end of line byte
.d889	b889	20 4b ba	jsr $ba4b			jsr 	TOKWriteByte
.d88c	b88c	60		rts				rts
.d88d	b88d					_TKCheckDouble:
.d88d	b88d	bd 2b 05	lda $052b,x			lda 	lineBuffer+1,x 				; get next character
.d890	b890	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.d892	b892	90 c7		bcc $b85b			bcc 	_TKStandardPunctuation 		; and do the normal punctuation handler.
.d894	b894	c9 3f		cmp #$3f			cmp 	#'>'+1
.d896	b896	b0 c3		bcs $b85b			bcs 	_TKStandardPunctuation
.d898	b898	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.d89b	b89b	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.d89d	b89d	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.d89e	b89e	7d 2b 05	adc $052b,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.d8a1	b8a1	38		sec				sec
.d8a2	b8a2	e9 3c		sbc #$3c			sbc 	#'<'
.d8a4	b8a4	20 4b ba	jsr $ba4b			jsr 	TOKWriteByte 				; this is in the range 0-7
.d8a7	b8a7	e8		inx				inx 								; consume both
.d8a8	b8a8	e8		inx				inx
.d8a9	b8a9	80 89		bra $b834			bra 	_TKTokeniseLoop
.d8ab	b8ab					_TKTokeniseIdentifier:
.d8ab	b8ab	8e 00 04	stx $0400			stx 	identStart 					; save start
.d8ae	b8ae	9c 04 04	stz $0404			stz 	identTypeByte 				; zero the type byte
.d8b1	b8b1					_TKCheckLoop:
.d8b1	b8b1	e8		inx				inx 								; look at next, we know first is identifier already.
.d8b2	b8b2	bd 2a 05	lda $052a,x			lda  	lineBuffer,x
.d8b5	b8b5	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.d8b7	b8b7	f0 f8		beq $b8b1			beq 	_TKCheckLoop
.d8b9	b8b9	c9 30		cmp #$30			cmp	 	#"0"
.d8bb	b8bb	90 0c		bcc $b8c9			bcc 	_TKEndIdentifier
.d8bd	b8bd	c9 3a		cmp #$3a			cmp 	#"9"+1
.d8bf	b8bf	90 f0		bcc $b8b1			bcc 	_TKCheckLoop
.d8c1	b8c1	c9 41		cmp #$41			cmp	 	#"A"
.d8c3	b8c3	90 04		bcc $b8c9			bcc 	_TKEndIdentifier
.d8c5	b8c5	c9 5b		cmp #$5b			cmp 	#"Z"+1
.d8c7	b8c7	90 e8		bcc $b8b1			bcc 	_TKCheckLoop
.d8c9	b8c9					_TKEndIdentifier:
.d8c9	b8c9	8e 01 04	stx $0401			stx 	identTypeStart 				; save start of type text (if any !)
.d8cc	b8cc	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.d8ce	b8ce	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.d8d0	b8d0	f0 06		beq $b8d8			beq 	_TKHasTypeCharacter
.d8d2	b8d2	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.d8d4	b8d4	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.d8d6	b8d6	d0 07		bne $b8df			bne 	_TKNoTypeCharacter
.d8d8	b8d8					_TKHasTypeCharacter:
.d8d8	b8d8	8c 04 04	sty $0404			sty 	identTypeByte 				; has # or $, save the type
.d8db	b8db	e8		inx				inx 								; consume the type character
.d8dc	b8dc	bd 2a 05	lda $052a,x			lda 	lineBuffer,x
.d8df	b8df					_TKNoTypeCharacter:
.d8df	b8df	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.d8e1	b8e1	d0 09		bne $b8ec			bne 	_TKNoArray
.d8e3	b8e3	e8		inx				inx 								; skip the (
.d8e4	b8e4	ad 04 04	lda $0404			lda 	identTypeByte 				; set bit 2 (e.g. array) in type byte
.d8e7	b8e7	09 04		ora #$04			ora 	#$04
.d8e9	b8e9	8d 04 04	sta $0404			sta 	identTypeByte
.d8ec	b8ec					_TKNoArray:
.d8ec	b8ec	8e 02 04	stx $0402			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.d8ef	b8ef	20 c7 b9	jsr $b9c7			jsr 	TOKCalculateHash 			; calculate the has for those tokens
.d8f2	b8f2	a0 b0		ldy #$b0			ldy 	#(KeywordSet0) >> 8
.d8f4	b8f4	a9 f3		lda #$f3			lda 	#(KeywordSet0) & $FF
.d8f6	b8f6	20 b6 b7	jsr $b7b6			jsr 	TOKSearchTable
.d8f9	b8f9	a2 00		ldx #$00			ldx 	#0
.d8fb	b8fb	b0 1f		bcs $b91c			bcs 	_TKFoundToken
.d8fd	b8fd	a0 b3		ldy #$b3			ldy 	#(KeywordSet1) >> 8
.d8ff	b8ff	a9 3f		lda #$3f			lda 	#(KeywordSet1) & $FF
.d901	b901	20 b6 b7	jsr $b7b6			jsr 	TOKSearchTable
.d904	b904	a2 81		ldx #$81			ldx 	#$81
.d906	b906	b0 14		bcs $b91c			bcs 	_TKFoundToken
.d908	b908	a0 b4		ldy #$b4			ldy 	#(KeywordSet2) >> 8
.d90a	b90a	a9 2f		lda #$2f			lda 	#(KeywordSet2) & $FF
.d90c	b90c	20 b6 b7	jsr $b7b6			jsr 	TOKSearchTable
.d90f	b90f	a2 82		ldx #$82			ldx 	#$82
.d911	b911	b0 09		bcs $b91c			bcs 	_TKFoundToken
.d913	b913	20 57 ba	jsr $ba57			jsr 	TOKCheckCreateVariableRecord ; failed all, it's a variable, create record if does not exist.
.d916	b916	ae 02 04	ldx $0402			ldx 	identTypeEnd 				; X points to following byte
.d919	b919	4c 34 b8	jmp $b834			jmp 	_TKTokeniseLoop 			; and go round again.
.d91c	b91c					_TKFoundToken:
.d91c	b91c	48		pha				pha 								; save token
.d91d	b91d	8a		txa				txa 								; shift in X, is there one ?
.d91e	b91e	f0 03		beq $b923			beq 	_TKNoTShift
.d920	b920	20 4b ba	jsr $ba4b			jsr 	TOKWriteByte 				; if so, write it out
.d923	b923					_TKNoTShift:
.d923	b923	68		pla				pla 								; restore and write token
.d924	b924	20 4b ba	jsr $ba4b			jsr 	TOKWriteByte
.d927	b927	e0 00		cpx #$00			cpx 	#0 							; check for REM and '
.d929	b929	d0 0d		bne $b938			bne 	_TKNotRem 			 		; not shifted ?
.d92b	b92b	c9 d2		cmp #$d2			cmp 	#KWD_REM
.d92d	b92d	d0 09		bne $b938			bne 	_TKNotRem
.d92f	b92f	ae 02 04	ldx $0402			ldx 	identTypeEnd 				; check if comment follows.
.d932	b932	20 3e b9	jsr $b93e			jsr 	TOKCheckComment
.d935	b935	4c 34 b8	jmp $b834			jmp 	_TKTokeniseLoop
.d938	b938					_TKNotRem:
.d938	b938	ae 02 04	ldx $0402			ldx 	identTypeEnd 				; X points to following byte
.d93b	b93b	4c 34 b8	jmp $b834			jmp 	_TKTokeniseLoop 			; and go round again.
.d93e	b93e					TOKCheckComment:
.d93e	b93e	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; skip over space
.d941	b941	e8		inx				inx
.d942	b942	c9 20		cmp #$20			cmp 	#' '
.d944	b944	f0 f8		beq $b93e			beq 	TOKCheckComment
.d946	b946	ca		dex				dex 								; first non space character
.d947	b947	c9 22		cmp #$22			cmp 	#'"'						; quote mark
.d949	b949	f0 1f		beq $b96a			beq 	_TOKCCExit 					; then we are okay
.d94b	b94b	c9 00		cmp #$00			cmp 	#0 							; EOL
.d94d	b94d	f0 1b		beq $b96a			beq 	_TOKCCExit 					; then we are okay
.d94f	b94f	da		phx				phx
.d950	b950					_TOKCCLowerCase:
.d950	b950	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; about making it lower case it all, but I thought
.d953	b953	c9 41		cmp #$41			cmp 	#"A"		 				; that was a bit risky. So it's converted to L/C here.
.d955	b955	90 09		bcc $b960			bcc 	_TOKKCNotUC
.d957	b957	c9 5b		cmp #$5b			cmp 	#"Z"+1
.d959	b959	b0 05		bcs $b960			bcs 	_TOKKCNotUC
.d95b	b95b	49 20		eor #$20			eor 	#$20
.d95d	b95d	9d 2a 05	sta $052a,x			sta 	lineBuffer,x
.d960	b960					_TOKKCNotUC:
.d960	b960	e8		inx				inx
.d961	b961	c9 00		cmp #$00			cmp 	#0
.d963	b963	d0 eb		bne $b950			bne 	_TOKCCLowerCase
.d965	b965	fa		plx				plx
.d966	b966	ca		dex				dex 								; tokenise string expects initial skip.
.d967	b967	20 6b b9	jsr $b96b			jsr 	TOKTokenString 				; tokenise rest of line as a string.
.d96a	b96a					_TOKCCExit:
.d96a	b96a	60		rts				rts
.d96b	b96b					TOKTokenString:
.d96b	b96b	a9 ff		lda #$ff			lda 	#KWC_STRING 				; string token.
.d96d	b96d	20 4b ba	jsr $ba4b			jsr 	TOKWriteByte
.d970	b970	e8		inx				inx									; start of quoted string.
.d971	b971	da		phx				phx 								; push start of string on top
.d972	b972	ca		dex				dex 								; because we pre-increment
.d973	b973					_TSFindEnd:
.d973	b973	e8		inx				inx
.d974	b974	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; next character
.d977	b977	f0 04		beq $b97d			beq 	_TSEndOfString 				; no matching quote, we don't mind.
.d979	b979	c9 22		cmp #$22			cmp 	#'"' 						; go back if quote not found
.d97b	b97b	d0 f6		bne $b973			bne 	_TSFindEnd
.d97d	b97d					_TSEndOfString:
.d97d	b97d	7a		ply				ply  								; so now Y is first character, X is character after end.
.d97e	b97e	48		pha				pha 								; save terminating character
.d97f	b97f	20 87 b9	jsr $b987			jsr 	TOKWriteBlockXY 			; write X to Y as a data block
.d982	b982	68		pla				pla 								; terminating character
.d983	b983	f0 01		beq $b986			beq 	_TSNotQuote					; if it wasn't EOS skip it
.d985	b985	e8		inx				inx
.d986	b986					_TSNotQuote:
.d986	b986	60		rts				rts
.d987	b987					TOKWriteBlockXY:
.d987	b987	86 36		stx $36				stx 	zTemp0 						; save end character
.d989	b989	98		tya				tya 								; use 2's complement to work out the byte size
.d98a	b98a	49 ff		eor #$ff			eor 	#$FF
.d98c	b98c	38		sec				sec
.d98d	b98d	65 36		adc $36				adc 	zTemp0
.d98f	b98f	1a		inc a				inc 	a 							; one extra for NULL
.d990	b990	20 4b ba	jsr $ba4b			jsr 	TOKWriteByte
.d993	b993					_TOBlockLoop:
.d993	b993	c4 36		cpy $36				cpy 	zTemp0 						; exit if reached the end
.d995	b995	f0 09		beq $b9a0			beq 	_TOBlockExit
.d997	b997	b9 2a 05	lda $052a,y			lda 	lineBuffer,y 				; write byte out.
.d99a	b99a	20 4b ba	jsr $ba4b			jsr 	TOKWriteByte
.d99d	b99d	c8		iny				iny
.d99e	b99e	80 f3		bra $b993			bra 	_TOBlockLoop
.d9a0	b9a0					_TOBlockExit:
.d9a0	b9a0	a9 00		lda #$00			lda 	#0 							; add NULL.
.d9a2	b9a2	20 4b ba	jsr $ba4b			jsr 	TOKWriteByte
.d9a5	b9a5	60		rts				rts
.d9a6	b9a6					TOKHexConstant:
.d9a6	b9a6	a9 fe		lda #$fe			lda 	#KWC_HEXCONST 				; hex constant token.
.d9a8	b9a8	20 4b ba	jsr $ba4b			jsr 	TOKWriteByte
.d9ab	b9ab	e8		inx				inx									; start of quoted string.
.d9ac	b9ac	da		phx				phx 								; push start of constant on top
.d9ad	b9ad	ca		dex				dex
.d9ae	b9ae					_THFindLoop:
.d9ae	b9ae	e8		inx				inx 	 							; this is stored in a block, so find out how long
.d9af	b9af	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; the hex constant is.
.d9b2	b9b2	c9 30		cmp #$30			cmp 	#"0"
.d9b4	b9b4	90 0c		bcc $b9c2			bcc 	_THFoundEnd
.d9b6	b9b6	c9 3a		cmp #$3a			cmp 	#"9"+1
.d9b8	b9b8	90 f4		bcc $b9ae			bcc 	_THFindLoop
.d9ba	b9ba	c9 41		cmp #$41			cmp 	#"A"
.d9bc	b9bc	90 04		bcc $b9c2			bcc 	_THFoundEnd
.d9be	b9be	c9 47		cmp #$47			cmp 	#"F"+1
.d9c0	b9c0	90 ec		bcc $b9ae			bcc 	_THFindLoop
.d9c2	b9c2					_THFoundEnd:
.d9c2	b9c2	7a		ply				ply 								; restore start
.d9c3	b9c3	20 87 b9	jsr $b987			jsr 	TOKWriteBlockXY 			; output the block
.d9c6	b9c6	60		rts				rts
.d9c7	b9c7					TOKCalculateHash:
.d9c7	b9c7	da		phx				phx
.d9c8	b9c8	ae 00 04	ldx $0400			ldx 	identStart 					; needs to be same as in tokens.py - simple sum at present.
.d9cb	b9cb	a9 00		lda #$00			lda 	#0
.d9cd	b9cd					_TCHLoop:
.d9cd	b9cd	18		clc				clc
.d9ce	b9ce	7d 2a 05	adc $052a,x			adc 	lineBuffer,x
.d9d1	b9d1	e8		inx				inx
.d9d2	b9d2	ec 02 04	cpx $0402			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.d9d5	b9d5	d0 f6		bne $b9cd			bne 	_TCHLoop
.d9d7	b9d7	8d 03 04	sta $0403			sta 	identHash 					; save the hash
.d9da	b9da	fa		plx				plx
.d9db	b9db	60		rts				rts
.d9dc	b9dc					LCLFixLineBufferCase:
.d9dc	b9dc	a2 00		ldx #$00			ldx 	#0
.d9de	b9de					_FLBCLoop:
.d9de	b9de	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; get next character
.d9e1	b9e1	f0 22		beq $ba05			beq 	_FLBCExit 					; end of string.
.d9e3	b9e3	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.d9e5	b9e5	f0 11		beq $b9f8			beq 	_FLBCInQuotes
.d9e7	b9e7	e8		inx				inx
.d9e8	b9e8	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.d9ea	b9ea	90 f2		bcc $b9de			bcc 	_FLBCLoop
.d9ec	b9ec	c9 7b		cmp #$7b			cmp 	#'z'+1
.d9ee	b9ee	b0 ee		bcs $b9de			bcs 	_FLBCLoop
.d9f0	b9f0	38		sec				sec 								; make U/C
.d9f1	b9f1	e9 20		sbc #$20			sbc 	#32
.d9f3	b9f3	9d 29 05	sta $0529,x			sta	 	lineBuffer-1,x 				; write back
.d9f6	b9f6	80 e6		bra $b9de			bra 	_FLBCLoop
.d9f8	b9f8					_FLBCInQuotes:
.d9f8	b9f8	e8		inx				inx 								; advance
.d9f9	b9f9	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; get next
.d9fc	b9fc	f0 07		beq $ba05			beq 	_FLBCExit 					; exit on EOS
.d9fe	b9fe	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.da00	ba00	d0 f6		bne $b9f8			bne 	_FLBCInQuotes
.da02	ba02	e8		inx				inx 								; skip over it
.da03	ba03	80 d9		bra $b9de			bra 	_FLBCLoop
.da05	ba05					_FLBCExit:
.da05	ba05	60		rts				rts
.da06	ba06					TOKExtractLineNumber:
.da06	ba06	ad 2c 04	lda $042c			lda 	tokenLineNumber+1 			; push current value on stack
.da09	ba09	48		pha				pha
.da0a	ba0a	ad 2b 04	lda $042b			lda 	tokenLineNumber
.da0d	ba0d	48		pha				pha
.da0e	ba0e	20 44 ba	jsr $ba44			jsr 	_LCLNTimes2 				; line # x 2
.da11	ba11	20 44 ba	jsr $ba44			jsr 	_LCLNTimes2 				; line # x 4
.da14	ba14	18		clc				clc 								; add stacked value
.da15	ba15	68		pla				pla
.da16	ba16	6d 2b 04	adc $042b			adc 	tokenLineNumber
.da19	ba19	8d 2b 04	sta $042b			sta 	tokenLineNumber
.da1c	ba1c	68		pla				pla
.da1d	ba1d	6d 2c 04	adc $042c			adc 	tokenLineNumber+1
.da20	ba20	8d 2c 04	sta $042c			sta 	tokenLineNumber+1 			; line # x 5
.da23	ba23	20 44 ba	jsr $ba44			jsr 	_LCLNTimes2 				; line # x 10
.da26	ba26	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; get and consume character
.da29	ba29	e8		inx				inx
.da2a	ba2a	29 0f		and #$0f			and 	#15 						; add to line #
.da2c	ba2c	18		clc				clc
.da2d	ba2d	6d 2b 04	adc $042b			adc 	tokenLineNumber
.da30	ba30	8d 2b 04	sta $042b			sta 	tokenLineNumber
.da33	ba33	90 03		bcc $ba38			bcc 	_TLENNoCarry
.da35	ba35	ee 2c 04	inc $042c			inc 	tokenLineNumber+1
.da38	ba38					_TLENNoCarry:
.da38	ba38	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; more digits ?
.da3b	ba3b	c9 30		cmp #$30			cmp 	#'0'
.da3d	ba3d	90 04		bcc $ba43			bcc 	_TLENExit
.da3f	ba3f	c9 3a		cmp #$3a			cmp 	#'9'+1
.da41	ba41	90 c3		bcc $ba06			bcc 	TOKExtractLineNumber
.da43	ba43					_TLENExit:
.da43	ba43	60		rts				rts
.da44	ba44					_LCLNTimes2:
.da44	ba44	0e 2b 04	asl $042b			asl 	tokenLineNumber 			; doubles tokenLineNumber.
.da47	ba47	2e 2c 04	rol $042c			rol 	tokenLineNumber+1
.da4a	ba4a	60		rts				rts
.da4b	ba4b					TOKWriteByte:
.da4b	ba4b	da		phx				phx
.da4c	ba4c	ae 2a 04	ldx $042a			ldx 	tokenOffset 				; next slot to write to
.da4f	ba4f	9d 2a 04	sta $042a,x			sta 	tokenOffset,x 				; write byte out
.da52	ba52	ee 2a 04	inc $042a			inc 	tokenOffset 				; advance slot.
.da55	ba55	fa		plx				plx
.da56	ba56	60		rts				rts
.da57	ba57					TOKCheckCreateVariableRecord:
.da57	ba57	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.da59	ba59	85 36		sta $36				sta 	0+zTemp0
.da5b	ba5b	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.da5d	ba5d	85 37		sta $37				sta 	1+zTemp0
.da5f	ba5f					_CCVSearch:
.da5f	ba5f	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.da61	ba61	f0 2c		beq $ba8f			beq 	_CCVFail
.da63	ba63	a0 01		ldy #$01			ldy 	#1 							; read the hash
.da65	ba65	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.da67	ba67	cd 03 04	cmp $0403			cmp 	identHash 	  				; if not, try the next.
.da6a	ba6a	d0 16		bne $ba82			bne 	_CCVNext
.da6c	ba6c	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.da6e	ba6e	ae 00 04	ldx $0400			ldx 	identStart
.da71	ba71					_CCVCompare:
.da71	ba71	bd 2a 05	lda $052a,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.da74	ba74	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.da76	ba76	e8		inx				inx 								; advance pointers
.da77	ba77	c8		iny				iny
.da78	ba78	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.da79	ba79	d0 07		bne $ba82			bne 	_CCVNext  					; didn't match go to next.
.da7b	ba7b	90 f4		bcc $ba71			bcc 	_CCVCompare 				; not finished yet.
.da7d	ba7d	ec 02 04	cpx $0402			cpx 	identTypeEnd 				; matched whole thing ?
.da80	ba80	f0 41		beq $bac3			beq 	_CCVFound 					; yes, we were successful
.da82	ba82					_CCVNext:
.da82	ba82	18		clc				clc 								; go to next record.
.da83	ba83	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.da85	ba85	65 36		adc $36				adc 	zTemp0
.da87	ba87	85 36		sta $36				sta 	zTemp0
.da89	ba89	90 d4		bcc $ba5f			bcc 	_CCVSearch
.da8b	ba8b	e6 37		inc $37				inc 	zTemp0+1
.da8d	ba8d	80 d0		bra $ba5f			bra 	_CCVSearch
.da8f	ba8f					_CCVFail:
.da8f	ba8f	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.da91	ba91	ad 03 04	lda $0403			lda 	identHash
.da94	ba94	91 36		sta ($36),y			sta 	(zTemp0),y
.da96	ba96	c8		iny				iny 								; offset 2 is the type byte
.da97	ba97	ad 04 04	lda $0404			lda 	identTypeByte
.da9a	ba9a	91 36		sta ($36),y			sta 	(zTemp0),y
.da9c	ba9c	c8		iny				iny
.da9d	ba9d					_CCVData:
.da9d	ba9d	a9 00		lda #$00			lda 	#0 							; erase data 3-7 (the 5 value bytes)
.da9f	ba9f	91 36		sta ($36),y			sta 	(zTemp0),y
.daa1	baa1	c8		iny				iny
.daa2	baa2	c0 08		cpy #$08			cpy 	#8
.daa4	baa4	90 f7		bcc $ba9d			bcc 	_CCVData
.daa6	baa6	ae 00 04	ldx $0400			ldx 	identStart 					; copy name into 8 on.
.daa9	baa9					_CCVCopyName:
.daa9	baa9	bd 2a 05	lda $052a,x			lda 	lineBuffer,x
.daac	baac	91 36		sta ($36),y			sta 	(zTemp0),y
.daae	baae	e8		inx				inx
.daaf	baaf	c8		iny				iny
.dab0	bab0	ec 02 04	cpx $0402			cpx 	identTypeEnd
.dab3	bab3	d0 f4		bne $baa9			bne 	_CCVCopyName
.dab5	bab5	98		tya				tya 								; patch offset
.dab6	bab6	92 36		sta ($36)			sta 	(zTemp0)
.dab8	bab8	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.daba	baba	91 36		sta ($36),y			sta 	(zTemp0),y
.dabc	babc	88		dey				dey
.dabd	babd	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.dabf	babf	09 80		ora #$80			ora 	#$80
.dac1	bac1	91 36		sta ($36),y			sta 	(zTemp0),y
.dac3	bac3					_CCVFound:
.dac3	bac3	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.dac5	bac5	38		sec				sec
.dac6	bac6	e9 10		sbc #$10			sbc 	#(VariableSpace >> 8) 		; offset from the start of the variable token
.dac8	bac8	09 40		ora #$40			ora 	#$40 						; make it a writeable token $4000-$7FFF
.daca	baca	20 4b ba	jsr $ba4b			jsr 	TOKWriteByte
.dacd	bacd	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.dacf	bacf	20 4b ba	jsr $ba4b			jsr 	TOKWriteByte
.dad2	bad2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ../modules/_build/_sound.module

=1						soundIntegrated=1
.dad3	bad3					SNDCheckChannel:
.dad3	bad3	aa		tax				tax
.dad4	bad4	bd 52 09	lda $0952,x			lda 	SNDTimeLeft,x 				; currently playing a note
.dad7	bad7	d0 38		bne $bb11			bne 	_SNDCCExit
.dad9	bad9	da		phx				phx 								; save current channel
.dada	bada	8a		txa				txa 								; put in A
.dadb	badb	20 57 bb	jsr $bb57			jsr 	SNDFindNextNoteForA 		; is there a note for A in the queue ?
.dade	bade	68		pla				pla 								; channel # in A
.dadf	badf	90 30		bcc $bb11			bcc 	_SNDCCExit  				; nothing in the queue for this channel, exit.
.dae1	bae1	a8		tay				tay 								; Y is the channel #
.dae2	bae2	bd 47 08	lda $0847,x			lda 	SNDQueue+1,x 				; copy data into the slot.
.dae5	bae5	99 46 09	sta $0946,y			sta 	SNDPitchLow,y
.dae8	bae8	bd 48 08	lda $0848,x			lda 	SNDQueue+2,x
.daeb	baeb	99 4a 09	sta $094a,y			sta 	SNDPitchHigh,y
.daee	baee	bd 49 08	lda $0849,x			lda 	SNDQueue+3,x
.daf1	baf1	99 4e 09	sta $094e,y			sta 	SNDVolume,y
.daf4	baf4	bd 4a 08	lda $084a,x			lda 	SNDQueue+4,x
.daf7	baf7	99 52 09	sta $0952,y			sta 	SNDTimeLeft,y
.dafa	bafa	bd 4b 08	lda $084b,x			lda 	SNDQueue+5,x
.dafd	bafd	99 56 09	sta $0956,y			sta 	SNDAdjustLow,y
.db00	bb00	bd 4c 08	lda $084c,x			lda 	SNDQueue+6,x
.db03	bb03	99 5a 09	sta $095a,y			sta 	SNDAdjustHigh,y
.db06	bb06	5a		phy				phy 								; save channel #
.db07	bb07	20 71 bb	jsr $bb71			jsr 	SNDDeleteXFromQueue 		; delete record at X from queue
.db0a	bb0a	ce 45 08	dec $0845			dec 	SNDLength 					; reduce the queue length.
.db0d	bb0d	68		pla				pla
.db0e	bb0e	20 12 bb	jsr $bb12			jsr 	SNDUpdateNote 				; update channel A
.db11	bb11					_SNDCCExit:
.db11	bb11	60		rts				rts
.db12	bb12					SNDUpdateNote:
.db12	bb12	aa		tax				tax 								; so we can access records
.db13	bb13	0a		asl a				asl 	a 							; convert it to a channel bit pair in 5,6
.db14	bb14	0a		asl a				asl 	a
.db15	bb15	0a		asl a				asl 	a
.db16	bb16	0a		asl a				asl 	a
.db17	bb17	0a		asl a				asl 	a
.db18	bb18	8d 44 08	sta $0844			sta 	SNDChannelBits
.db1b	bb1b	bd 52 09	lda $0952,x			lda 	SNDTimeLeft,x 				; are we silent
.db1e	bb1e	f0 2e		beq $bb4e			beq 	_SNDUNIsSilent
.db20	bb20	ad 44 08	lda $0844			lda 	SNDChannelBits 				; push channel bits on stack
.db23	bb23	48		pha				pha
.db24	bb24	bd 46 09	lda $0946,x			lda 	SNDPitchLow,x 				; get 4 lowest bits of pitch.
.db27	bb27	29 0f		and #$0f			and 	#$0F
.db29	bb29	0d 44 08	ora $0844			ora 	SNDChannelBits 				; set channel bits
.db2c	bb2c	09 80		ora #$80			ora 	#$80 						; write to pitch register
.db2e	bb2e	20 bb bb	jsr $bbbb			jsr 	SNDWritePorts
.db31	bb31	bd 4a 09	lda $094a,x			lda 	SNDPitchHigh,x 				; pitch high => channel temp.
.db34	bb34	8d 44 08	sta $0844			sta 	SNDChannelBits
.db37	bb37	bd 46 09	lda $0946,x			lda 	SNDPitchLow,x
.db3a	bb3a	4e 44 08	lsr $0844			lsr 	SNDChannelBits 				; shift 2 LSBs into MSB of A
.db3d	bb3d	6a		ror a				ror 	a
.db3e	bb3e	4e 44 08	lsr $0844			lsr 	SNDChannelBits
.db41	bb41	6a		ror a				ror 	a
.db42	bb42	4a		lsr a				lsr 	a 							; put in bits 0-5
.db43	bb43	4a		lsr a				lsr 	a
.db44	bb44	20 bb bb	jsr $bbbb			jsr 	SNDWritePorts 				; write as rest of pitch register
.db47	bb47	68		pla				pla
.db48	bb48	09 90		ora #$90			ora 	#$90 						; set to write minimum attentuation.
.db4a	bb4a	20 bb bb	jsr $bbbb			jsr 	SNDWritePorts
.db4d	bb4d	60		rts				rts
.db4e	bb4e					_SNDUNIsSilent:
.db4e	bb4e	ad 44 08	lda $0844			lda 	SNDChannelBits 				; channel bits
.db51	bb51	09 9f		ora #$9f			ora 	#$9F 						; maximum attenuation
.db53	bb53	20 bb bb	jsr $bbbb			jsr 	SNDWritePorts 				; write to the ports
.db56	bb56	60		rts				rts
.db57	bb57					SNDFindNextNoteForA:
.db57	bb57	ac 45 08	ldy $0845			ldy 	SNDLength 					; queue size into Y
.db5a	bb5a	f0 13		beq $bb6f			beq 	_SNDFNNFail 				; queue empty.
.db5c	bb5c	a2 00		ldx #$00			ldx 	#0
.db5e	bb5e					_SNDFNNSearch:
.db5e	bb5e	dd 46 08	cmp $0846,x			cmp 	SNDQueue,x 					; does it match the channel
.db61	bb61	38		sec				sec
.db62	bb62	f0 0c		beq $bb70			beq 	_SNDFNNExit 				; if so exit with CS.
.db64	bb64	e8		inx				inx 								; next queue slot.
.db65	bb65	e8		inx				inx
.db66	bb66	e8		inx				inx
.db67	bb67	e8		inx				inx
.db68	bb68	e8		inx				inx
.db69	bb69	e8		inx				inx
.db6a	bb6a	e8		inx				inx
.db6b	bb6b	e8		inx				inx
.db6c	bb6c	88		dey				dey 								; done the whole queue
.db6d	bb6d	d0 ef		bne $bb5e			bne 	_SNDFNNSearch 				; no, go back.
.db6f	bb6f					_SNDFNNFail:
.db6f	bb6f	18		clc				clc
.db70	bb70					_SNDFNNExit:
.db70	bb70	60		rts				rts
.db71	bb71					SNDDeleteXFromQueue:
.db71	bb71	e0 f8		cpx #$f8			cpx 	#SNDQueueSize*8-8 			; reached the end.
.db73	bb73	f0 09		beq $bb7e			beq 	_SNDDXExit
.db75	bb75	bd 4e 08	lda $084e,x			lda 	SNDQueue+8,x
.db78	bb78	9d 46 08	sta $0846,x			sta 	SNDQueue,x
.db7b	bb7b	e8		inx				inx
.db7c	bb7c	80 f3		bra $bb71			bra 	SNDDeleteXFromQueue
.db7e	bb7e					_SNDDXExit:
.db7e	bb7e	60		rts				rts
.0844						SNDChannelBits:
>0844								.fill 	1
.db7f	bb7f					SNDQueueRequest:
.db7f	bb7f	86 36		stx $36				stx 	zTemp0						; save queue address
.db81	bb81	84 37		sty $37				sty 	zTemp0+1
.db83	bb83	ae 45 08	ldx $0845			ldx 	SNDLength 					; queue is full, can't take any more.
.db86	bb86	e0 20		cpx #$20			cpx 	#SNDQueueSize
.db88	bb88	f0 21		beq $bbab			beq 	_SNDQRExit
.db8a	bb8a	29 03		and #$03			and 	#3	 						; channel # and push on stack
.db8c	bb8c	48		pha				pha
.db8d	bb8d	8a		txa				txa  								; get offset in queue buffer/
.db8e	bb8e	0a		asl a				asl 	a
.db8f	bb8f	0a		asl a				asl 	a
.db90	bb90	0a		asl a				asl 	a
.db91	bb91	aa		tax				tax
.db92	bb92	68		pla				pla 								; get back and push again
.db93	bb93	48		pha				pha
.db94	bb94	9d 46 08	sta $0846,x			sta 	SNDQueue+0,x 				; save the channel #
.db97	bb97	a0 00		ldy #$00			ldy 	#0 							; copy the rest in.
.db99	bb99					_SNDQCopy:
.db99	bb99	b1 36		lda ($36),y			lda 	(zTemp0),y
.db9b	bb9b	e8		inx				inx
.db9c	bb9c	c8		iny				iny
.db9d	bb9d	9d 46 08	sta $0846,x			sta 	SNDQueue,x
.dba0	bba0	c0 06		cpy #$06			cpy 	#6
.dba2	bba2	d0 f5		bne $bb99			bne 	_SNDQCopy
.dba4	bba4	ee 45 08	inc $0845			inc 	SNDLength 					; bump queue length.
.dba7	bba7	68		pla				pla 								; get channel # back
.dba8	bba8	20 d3 ba	jsr $bad3			jsr 	SNDCheckChannel 			; check if channel needs refreshing.
.dbab	bbab					_SNDQRExit:
.dbab	bbab	60		rts				rts
.dbac	bbac					SNDSilenceChannel:
.dbac	bbac	aa		tax				tax 								; zero time left.
.dbad	bbad	9e 52 09	stz $0952,x			stz 	SNDTimeLeft,x
.dbb0	bbb0	0a		asl a				asl 	a 							; shift into position
.dbb1	bbb1	0a		asl a				asl 	a
.dbb2	bbb2	0a		asl a				asl 	a
.dbb3	bbb3	0a		asl a				asl 	a
.dbb4	bbb4	0a		asl a				asl 	a
.dbb5	bbb5	09 9f		ora #$9f			ora 	#$9F 						; write register attenuation $F
.dbb7	bbb7	20 bb bb	jsr $bbbb			jsr 	SNDWritePorts
.dbba	bbba	60		rts				rts
.dbbb	bbbb					SNDWritePorts:
.dbbb	bbbb	da		phx				phx 								; save X
.dbbc	bbbc	a6 01		ldx $01				ldx 	1 							; save I/O status
.dbbe	bbbe	64 01		stz $01				stz 	1 							; access I/O page 0
.dbc0	bbc0	8d 00 d6	sta $d600			sta 	$D600 						; write to both
.dbc3	bbc3	8d 10 d6	sta $d610			sta 	$D610
.dbc6	bbc6	86 01		stx $01				stx 	1 							; restore I/O
.dbc8	bbc8	fa		plx				plx 								; restore X
.dbc9	bbc9	60		rts				rts
.dbca	bbca					Export_SNDCommand:
.dbca	bbca	da		phx				phx 								; save XY
.dbcb	bbcb	5a		phy				phy
.dbcc	bbcc	c9 0f		cmp #$0f			cmp 	#$0F 						; $0F is initialise
.dbce	bbce	f0 1d		beq $bbed			beq 	_SNDInitialise
.dbd0	bbd0	90 28		bcc $bbfa			bcc 	_SNDExit
.dbd2	bbd2	c9 3f		cmp #$3f			cmp 	#$3F 						; $3F is silence all
.dbd4	bbd4	f0 17		beq $bbed			beq 	_SNDSilence
.dbd6	bbd6	b0 22		bcs $bbfa			bcs 	_SNDExit
.dbd8	bbd8	c9 20		cmp #$20			cmp 	#$20 						; $2x is check playing => A
.dbda	bbda	b0 09		bcs $bbe5			bcs 	_SNDQueryPlay
.dbdc	bbdc	c9 14		cmp #$14			cmp 	#$14 						; $10-$13 is queue sound
.dbde	bbde	b0 1a		bcs $bbfa			bcs 	_SNDExit
.dbe0	bbe0	20 7f bb	jsr $bb7f			jsr 	SNDQueueRequest
.dbe3	bbe3	80 15		bra $bbfa			bra 	_SNDExit
.dbe5	bbe5					_SNDQueryPlay:
.dbe5	bbe5	29 03		and #$03			and 	#3 							; get channel #
.dbe7	bbe7	aa		tax				tax
.dbe8	bbe8	bd 52 09	lda $0952,x			lda 	SNDTimeLeft,x 				; read time left, if zero then silent
.dbeb	bbeb	80 0d		bra $bbfa			bra 	_SNDExit
.dbed	bbed					_SNDInitialise:
.dbed	bbed					_SNDSilence:
.dbed	bbed	9c 45 08	stz $0845			stz 	SNDLength 					; empty the queue.
.dbf0	bbf0	a9 03		lda #$03			lda 	#$3 						; silence channel 0-3.
.dbf2	bbf2					_SNDSilenceLoop:
.dbf2	bbf2	48		pha				pha
.dbf3	bbf3	20 ac bb	jsr $bbac			jsr 	SNDSilenceChannel
.dbf6	bbf6	68		pla				pla
.dbf7	bbf7	3a		dec a				dec 	a
.dbf8	bbf8	10 f8		bpl $bbf2			bpl 	_SNDSilenceLoop
.dbfa	bbfa					_SNDExit:
.dbfa	bbfa	7a		ply				ply
.dbfb	bbfb	fa		plx				plx
.dbfc	bbfc	60		rts				rts
=32						SNDQueueSize = 32 							; number of queue entries
.0845						SNDLength:
>0845								.fill 	1
.0846						SNDQueue:
>0846								.fill 	SNDQueueSize * 8
.0946						SNDPitchLow:
>0946								.fill 	4
.094a						SNDPitchHigh:
>094a								.fill 	4
.094e						SNDVolume:
>094e								.fill 	4
.0952						SNDTimeLeft:
>0952								.fill 	4
.0956						SNDAdjustLow:
>0956								.fill 	4
.095a						SNDAdjustHigh:
>095a								.fill 	4
.dbfd	bbfd					Export_SNDUpdate:
.dbfd	bbfd					PagedSNDUpdate:
.dbfd	bbfd	ad 52 09	lda $0952			lda 	SNDTimeLeft+0 				; look at time remaining
.dc00	bc00	f0 05		beq $bc07			beq 	_SNDUNot0 					; not playing
.dc02	bc02	a2 00		ldx #$00			ldx 	#0 							; so we know which channel to update
.dc04	bc04	20 26 bc	jsr $bc26			jsr 	SNDUpdateChannel 			; update it.
.dc07	bc07					_SNDUNot0:
.dc07	bc07	ad 53 09	lda $0953			lda 	SNDTimeLeft+1
.dc0a	bc0a	f0 05		beq $bc11			beq 	_SNDUNot1
.dc0c	bc0c	a2 01		ldx #$01			ldx 	#1
.dc0e	bc0e	20 26 bc	jsr $bc26			jsr 	SNDUpdateChannel
.dc11	bc11					_SNDUNot1:
.dc11	bc11	ad 54 09	lda $0954			lda 	SNDTimeLeft+2
.dc14	bc14	f0 05		beq $bc1b			beq 	_SNDUNot2
.dc16	bc16	a2 02		ldx #$02			ldx 	#2
.dc18	bc18	20 26 bc	jsr $bc26			jsr 	SNDUpdateChannel
.dc1b	bc1b					_SNDUNot2:
.dc1b	bc1b	ad 55 09	lda $0955			lda 	SNDTimeLeft+3
.dc1e	bc1e	f0 05		beq $bc25			beq 	_SNDUNot3
.dc20	bc20	a2 03		ldx #$03			ldx 	#3
.dc22	bc22	20 26 bc	jsr $bc26			jsr 	SNDUpdateChannel
.dc25	bc25					_SNDUNot3:
.dc25	bc25	60		rts				rts
.dc26	bc26					SNDUpdateChannel:
.dc26	bc26	c9 ff		cmp #$ff			cmp 	#$FF 						; sound $FF play forever until turned off manually
.dc28	bc28	f0 2c		beq $bc56			beq 	_SNDUCExit
.dc2a	bc2a	3a		dec a				dec 	a 							; decrement and update timer
.dc2b	bc2b	9d 52 09	sta $0952,x			sta 	SNDTimeLeft,x
.dc2e	bc2e	f0 1d		beq $bc4d			beq 	_SNDUCUpdate 				; if zero, silence channel
.dc30	bc30	bd 56 09	lda $0956,x			lda 	SNDAdjustLow,x 				; adjust ?
.dc33	bc33	1d 5a 09	ora $095a,x			ora 	SNDAdjustHigh,x
.dc36	bc36	f0 1e		beq $bc56			beq 	_SNDUCExit 					; if zero carry on at current tone.
.dc38	bc38	18		clc				clc 								; add adjust, forcing into a 10 bit range
.dc39	bc39	bd 46 09	lda $0946,x			lda 	SNDPitchLow,x
.dc3c	bc3c	7d 56 09	adc $0956,x			adc 	SNDAdjustLow,x
.dc3f	bc3f	9d 46 09	sta $0946,x			sta 	SNDPitchLow,x
.dc42	bc42	bd 4a 09	lda $094a,x			lda 	SNDPitchHigh,x
.dc45	bc45	7d 5a 09	adc $095a,x			adc 	SNDAdjustHigh,x
.dc48	bc48	29 03		and #$03			and 	#3
.dc4a	bc4a	9d 4a 09	sta $094a,x			sta 	SNDPitchHigh,x
.dc4d	bc4d					_SNDUCUpdate:
.dc4d	bc4d	8a		txa				txa 								; which channel.
.dc4e	bc4e	48		pha				pha
.dc4f	bc4f	20 12 bb	jsr $bb12			jsr 	SNDUpdateNote 				; update the current note
.dc52	bc52	68		pla				pla
.dc53	bc53	20 d3 ba	jsr $bad3			jsr 	SNDCheckChannel 			; more to do ?
.dc56	bc56					_SNDUCExit:
.dc56	bc56	60		rts				rts

;******  Return to file: _basic.asm


;******  End of listing
