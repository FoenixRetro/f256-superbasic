
; 64tass Turbo Assembler Macro V1.56.2625 listing file
; 64tass -b -Wall -Wno-portable -c -L output/basic.lst -l output/basic.lbl -Wall -q -o basic.rom _basic.asm
; Thu Sep 22 07:14:10 2022

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: _basic.asm


;******  Processing file: ./aa_system/01common.inc

=$30					ZeroPageMandatory = $30
=$600					ZeroPagePreference = $600
=$700					MemoryStorage = $700
=$2000					BasicStart = $2000
=$8010					CodeStart = $8010
=$1000					VariableSpace = $1000
=$2000					EndVariableSpace = $2000
=8					MathStackSize = 8
=512					BasicStackSize = 512

;******  Return to file: _basic.asm


;******  Processing file: ./aa_system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./aa_system/04data.inc

.0030					codePtr:
>0030							.fill 	4
.0034					basicStack:
>0034							.fill 	2
.0036					zTemp0:
>0036							.fill 	2
.0038					zTemp1:
>0038							.fill 	2
.003a					zTemp2:
>003a							.fill 	2
=$80					NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20					NSBIsReference = $20 						; bit 5 : is a reference
=$10					NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18					NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03					NSBRefMask = $03 							; bits 0,1 : Bytes of reference, -1 (e.g. 00 = 1 byte, 11 = 4 bytes)
=$00					NSTInteger = $00 							; base types for bits 3..4
=$08					NSTFloat = $08
=$10					NSTString = $10
=$18					NSTProcedure = $18
.0600					NSStatus:
>0600							.fill 	MathStackSize
.0608					NSMantissa0:
>0608							.fill 	MathStackSize 				; (this is my integer mantissa system)
.0610					NSMantissa1:
>0610							.fill 	MathStackSize
.0618					NSMantissa2:
>0618							.fill 	MathStackSize
.0620					NSMantissa3:
>0620							.fill 	MathStackSize
.0628					NSExponent:
>0628							.fill 	MathStackSize
.0700					identStart:
>0700							.fill 	1
.0701					identTypeStart:
>0701							.fill 	1
.0702					identTypeEnd:
>0702							.fill 	1
.0703					identHash:
>0703							.fill 	1
.0704					identTypeByte:
>0704							.fill 	1	 						; (see tokenising.pdf)
.0705					encodeState:
>0705							.fill 	1
.0706					tokenOffset:
>0706							.fill 	1
.0707					tokenLineNumber:
>0707							.fill 	2
.0709					tokenBuffer:
>0709							.fill 	253
.0806					lineBuffer:
>0806							.fill 	256

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/binary/handlers.inc


;******  Return to file: _basic.asm


;******  Processing file: ./generated/errors.inc

=1					ERRID_BREAK = 1
=2					ERRID_SYNTAX = 2
=3					ERRID_DIVZERO = 3
=4					ERRID_RANGE = 4
=5					ERRID_TYPE = 5
=6					ERRID_MEMORY = 6
=7					ERRID_ARGUMENT = 7
=8					ERRID_STOP = 8
=9					ERRID_STRING = 9
=10					ERRID_ASSERT = 10
=11					ERRID_DATA = 11
=12					ERRID_NOTDONE = 12

;******  Return to file: _basic.asm


;******  Processing file: ./generated/kwdconst.inc

=$00					KWD_LESSLESS                         = $00; $00 <<
=$01					KWD_LESSEQUAL                        = $01; $01 <=
=$02					KWD_LESSGREATER                      = $02; $02 <>
=$03					KWD_PLINGPLING3                      = $03; $03 !!3
=$04					KWD_GREATERLESS                      = $04; $04 ><
=$05					KWD_GREATEREQUAL                     = $05; $05 >=
=$06					KWD_GREATERGREATER                   = $06; $06 >>
=$07					KWD_PLINGPLING7                      = $07; $07 !!7
=$08					KWD_PLINGPLING8                      = $08; $08 !!8
=$09					KWD_PLINGPLING9                      = $09; $09 !!9
=$0a					KWD_PLINGPLING10                     = $0a; $0a !!10
=$0b					KWD_PLINGPLING11                     = $0b; $0b !!11
=$0c					KWD_PLINGPLING12                     = $0c; $0c !!12
=$0d					KWD_PLINGPLING13                     = $0d; $0d !!13
=$0e					KWD_PLINGPLING14                     = $0e; $0e !!14
=$0f					KWD_PLINGPLING15                     = $0f; $0f !!15
=$10					KWD_AT                               = $10; $10 @
=$11					KWD_PLINGPLING17                     = $11; $11 !!17
=$12					KWD_PLINGPLING18                     = $12; $12 !!18
=$13					KWD_LSQPAREN                         = $13; $13 [
=$14					KWD_BACKSLASH                        = $14; $14 \
=$15					KWD_RSQPAREN                         = $15; $15 ]
=$16					KWD_HAT                              = $16; $16 ^
=$17					KWD_UNDERSCORE                       = $17; $17 _
=$18					KWD_BQUOTE                           = $18; $18 `
=$19					KWD_PLINGPLING25                     = $19; $19 !!25
=$1a					KWD_PLINGPLING26                     = $1a; $1a !!26
=$1b					KWD_LCURLY                           = $1b; $1b {
=$1c					KWD_BAR                              = $1c; $1c |
=$1d					KWD_RCURLY                           = $1d; $1d }
=$1e					KWD_TILDE                            = $1e; $1e ~
=$21					KWD_PLING                            = $21; $21 !
=$22					KWD_DQUOTE                           = $22; $22 "
=$23					KWD_HASH                             = $23; $23 #
=$24					KWD_DOLLAR                           = $24; $24 $
=$25					KWD_PERCENT                          = $25; $25 %
=$26					KWD_AMPERSAND                        = $26; $26 &
=$27					KWD_QUOTE                            = $27; $27 '
=$28					KWD_LPAREN                           = $28; $28 (
=$29					KWD_RPAREN                           = $29; $29 )
=$2a					KWD_STAR                             = $2a; $2a *
=$2b					KWD_PLUS                             = $2b; $2b +
=$2c					KWD_COMMA                            = $2c; $2c ,
=$2d					KWD_MINUS                            = $2d; $2d -
=$2e					KWD_PERIOD                           = $2e; $2e .
=$2f					KWD_SLASH                            = $2f; $2f /
=$30					KWD_0                                = $30; $30 0
=$31					KWD_1                                = $31; $31 1
=$32					KWD_2                                = $32; $32 2
=$33					KWD_3                                = $33; $33 3
=$34					KWD_4                                = $34; $34 4
=$35					KWD_5                                = $35; $35 5
=$36					KWD_6                                = $36; $36 6
=$37					KWD_7                                = $37; $37 7
=$38					KWD_8                                = $38; $38 8
=$39					KWD_9                                = $39; $39 9
=$3a					KWD_COLON                            = $3a; $3a :
=$3b					KWD_SEMICOLON                        = $3b; $3b ;
=$3c					KWD_LESS                             = $3c; $3c <
=$3d					KWD_EQUAL                            = $3d; $3d =
=$3e					KWD_GREATER                          = $3e; $3e >
=$3f					KWD_QMARK                            = $3f; $3f ?
=$83					KWD_ABSLPAREN                        = $83; $83 ABS(
=$84					KWD_ALLOCLPAREN                      = $84; $84 ALLOC(
=$85					KWD_ASCLPAREN                        = $85; $85 ASC(
=$86					KWD_CHRDOLLARLPAREN                  = $86; $86 CHR$(
=$87					KWD_DECLPAREN                        = $87; $87 DEC(
=$88					KWD_GETDATEDOLLARLPAREN              = $88; $88 GETDATE$(
=$89					KWD_GETTIMEDOLLARLPAREN              = $89; $89 GETTIME$(
=$8a					KWD_HEXDOLLARLPAREN                  = $8a; $8a HEX$(
=$8b					KWD_INTLPAREN                        = $8b; $8b INT(
=$8c					KWD_ISVALLPAREN                      = $8c; $8c ISVAL(
=$8d					KWD_LEFTDOLLARLPAREN                 = $8d; $8d LEFT$(
=$8e					KWD_LENLPAREN                        = $8e; $8e LEN(
=$8f					KWD_MIDDOLLARLPAREN                  = $8f; $8f MID$(
=$90					KWD_NOT                              = $90; $90 NOT
=$91					KWD_PAGE                             = $91; $91 PAGE
=$92					KWD_RIGHTDOLLARLPAREN                = $92; $92 RIGHT$(
=$93					KWD_RNDLPAREN                        = $93; $93 RND(
=$94					KWD_SGNLPAREN                        = $94; $94 SGN(
=$95					KWD_SPCLPAREN                        = $95; $95 SPC(
=$96					KWD_STRDOLLARLPAREN                  = $96; $96 STR$(
=$97					KWD_VALLPAREN                        = $97; $97 VAL(
=$98					KWD_FOR                              = $98; $98 FOR
=$99					KWD_IF                               = $99; $99 IF
=$9a					KWD_PROC                             = $9a; $9a PROC
=$9b					KWD_REPEAT                           = $9b; $9b REPEAT
=$9c					KWD_WHILE                            = $9c; $9c WHILE
=$9d					KWD_ENDIF                            = $9d; $9d ENDIF
=$9e					KWD_ENDPROC                          = $9e; $9e ENDPROC
=$9f					KWD_NEXT                             = $9f; $9f NEXT
=$a0					KWD_UNTIL                            = $a0; $a0 UNTIL
=$a1					KWD_WEND                             = $a1; $a1 WEND
=$a2					KWD_CLS                              = $a2; $a2 CLS
=$a3					KWD_DATA                             = $a3; $a3 DATA
=$a4					KWD_DIM                              = $a4; $a4 DIM
=$a5					KWD_GOSUB                            = $a5; $a5 GOSUB
=$a6					KWD_GOTO                             = $a6; $a6 GOTO
=$a7					KWD_LET                              = $a7; $a7 LET
=$a8					KWD_PRINT                            = $a8; $a8 PRINT
=$a9					KWD_READ                             = $a9; $a9 READ
=$aa					KWD_REM                              = $aa; $aa REM
=$ab					KWD_RETURN                           = $ab; $ab RETURN
=$ac					KWD_THEN                             = $ac; $ac THEN
=$ad					KWD_TO                               = $ad; $ad TO

;******  Return to file: _basic.asm


;******  Processing file: ./generated/kwdconst0.inc

=$80					KWC_EOL = $80
=$ff					KWC_STRING = $FF
=$fe					KWC_HEXCONST = $FE
=$98					KWC_FIRST_STRUCTURE = $98
=$9d					KWC_FIRST_STRUCTURE_DEC = $9d
=$a1					KWC_LAST_STRUCTURE = $a1
=$83					KWC_FIRST_UNARY = $83
=$97					KWC_LAST_UNARY = $97

;******  Return to file: _basic.asm


;******  Processing file: ./memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./aa_system/00start.asm

.8010	a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.8012	9a		txs				txs
.8013	20 2b 81	jsr $812b			jsr 	NewCommand 					; erase current program
.8016	20 47 86	jsr $8647			jsr 	BackloadProgram
.8019	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.801b	85 30		sta $30				sta 	0+codePtr
.801d	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.801f	85 31		sta $31				sta 	1+codePtr
.8021	a0 04		ldy #$04			ldy 	#4
.8023	a2 01		ldx #$01			ldx 	#1
.8025	20 15 83	jsr $8315			jsr 	EvaluateExpression
.8028					WarmStart:
>8028	db						.byte 	$DB 						; causes a break in the emulator
.8029	80 fd		bra $8028			bra 	WarmStart
.802b					ErrorHandler:
>802b	db						.byte 	$DB 						; causes a break in the emulator
.802c	4c 2b 80	jmp $802b			jmp 	ErrorHandler

;******  Processing file: ./aa_system/../generated/vectors.dat

.802f					VectorSetPunc:
>802f	35 81					.word	ShiftLeft                        ; $00 <<
>8031	04 8c					.word	SyntaxError                      ; $01 <=
>8033	04 8c					.word	SyntaxError                      ; $02 <>
>8035	04 8c					.word	SyntaxError                      ; $03 !!3
>8037	04 8c					.word	SyntaxError                      ; $04 ><
>8039	04 8c					.word	SyntaxError                      ; $05 >=
>803b	38 81					.word	ShiftRight                       ; $06 >>
>803d	04 8c					.word	SyntaxError                      ; $07 !!7
>803f	04 8c					.word	SyntaxError                      ; $08 !!8
>8041	04 8c					.word	SyntaxError                      ; $09 !!9
>8043	04 8c					.word	SyntaxError                      ; $0a !!10
>8045	04 8c					.word	SyntaxError                      ; $0b !!11
>8047	04 8c					.word	SyntaxError                      ; $0c !!12
>8049	04 8c					.word	SyntaxError                      ; $0d !!13
>804b	04 8c					.word	SyntaxError                      ; $0e !!14
>804d	04 8c					.word	SyntaxError                      ; $0f !!15
>804f	04 8c					.word	SyntaxError                      ; $10 @
>8051	04 8c					.word	SyntaxError                      ; $11 !!17
>8053	04 8c					.word	SyntaxError                      ; $12 !!18
>8055	04 8c					.word	SyntaxError                      ; $13 [
>8057	c7 8a					.word	IntegerDivide                    ; $14 \
>8059	04 8c					.word	SyntaxError                      ; $15 ]
>805b	91 82					.word	EorInteger                       ; $16 ^
>805d	04 8c					.word	SyntaxError                      ; $17 _
>805f	04 8c					.word	SyntaxError                      ; $18 `
>8061	04 8c					.word	SyntaxError                      ; $19 !!25
>8063	04 8c					.word	SyntaxError                      ; $1a !!26
>8065	04 8c					.word	SyntaxError                      ; $1b {
>8067	4f 82					.word	OraInteger                       ; $1c |
>8069	04 8c					.word	SyntaxError                      ; $1d }
>806b	04 8c					.word	SyntaxError                      ; $1e ~
>806d	04 8c					.word	SyntaxError                      ; $1f [7m<7F>[m
>806f	04 8c					.word	SyntaxError                      ; $20
>8071	04 8c					.word	SyntaxError                      ; $21 !
>8073	04 8c					.word	SyntaxError                      ; $22 "
>8075	04 8c					.word	SyntaxError                      ; $23 #
>8077	04 8c					.word	SyntaxError                      ; $24 $
>8079	13 8b					.word	IntegerModulus                   ; $25 %
>807b	0d 82					.word	AndInteger                       ; $26 &
>807d	04 8c					.word	SyntaxError                      ; $27 '
>807f	04 8c					.word	SyntaxError                      ; $28 (
>8081	04 8c					.word	SyntaxError                      ; $29 )
>8083	83 8b					.word	MulInteger                       ; $2a *
>8085	7f 81					.word	AddInteger                       ; $2b +
>8087	04 8c					.word	SyntaxError                      ; $2c ,
>8089	c6 81					.word	SubInteger                       ; $2d -
>808b	04 8c					.word	SyntaxError                      ; $2e .
>808d	04 8c					.word	SyntaxError                      ; $2f /
>808f	04 8c					.word	SyntaxError                      ; $30 0
>8091	04 8c					.word	SyntaxError                      ; $31 1
>8093	04 8c					.word	SyntaxError                      ; $32 2
>8095	04 8c					.word	SyntaxError                      ; $33 3
>8097	04 8c					.word	SyntaxError                      ; $34 4
>8099	04 8c					.word	SyntaxError                      ; $35 5
>809b	04 8c					.word	SyntaxError                      ; $36 6
>809d	04 8c					.word	SyntaxError                      ; $37 7
>809f	04 8c					.word	SyntaxError                      ; $38 8
>80a1	04 8c					.word	SyntaxError                      ; $39 9
>80a3	04 8c					.word	SyntaxError                      ; $3a :
>80a5	04 8c					.word	SyntaxError                      ; $3b ;
>80a7	04 8c					.word	SyntaxError                      ; $3c <
>80a9	04 8c					.word	SyntaxError                      ; $3d =
>80ab	04 8c					.word	SyntaxError                      ; $3e >
>80ad	04 8c					.word	SyntaxError                      ; $3f ?
.80af					VectorSet0:
>80af	04 8c					.word	SyntaxError                      ; $80 !0:EOF
>80b1	04 8c					.word	SyntaxError                      ; $81 !1:SH1
>80b3	04 8c					.word	SyntaxError                      ; $82 !2:SH2
>80b5	04 8c					.word	SyntaxError                      ; $83 ABS(
>80b7	04 8c					.word	SyntaxError                      ; $84 ALLOC(
>80b9	04 8c					.word	SyntaxError                      ; $85 ASC(
>80bb	04 8c					.word	SyntaxError                      ; $86 CHR$(
>80bd	04 8c					.word	SyntaxError                      ; $87 DEC(
>80bf	04 8c					.word	SyntaxError                      ; $88 GETDATE$(
>80c1	04 8c					.word	SyntaxError                      ; $89 GETTIME$(
>80c3	04 8c					.word	SyntaxError                      ; $8a HEX$(
>80c5	04 8c					.word	SyntaxError                      ; $8b INT(
>80c7	04 8c					.word	SyntaxError                      ; $8c ISVAL(
>80c9	04 8c					.word	SyntaxError                      ; $8d LEFT$(
>80cb	04 8c					.word	SyntaxError                      ; $8e LEN(
>80cd	04 8c					.word	SyntaxError                      ; $8f MID$(
>80cf	04 8c					.word	SyntaxError                      ; $90 NOT
>80d1	04 8c					.word	SyntaxError                      ; $91 PAGE
>80d3	04 8c					.word	SyntaxError                      ; $92 RIGHT$(
>80d5	04 8c					.word	SyntaxError                      ; $93 RND(
>80d7	04 8c					.word	SyntaxError                      ; $94 SGN(
>80d9	04 8c					.word	SyntaxError                      ; $95 SPC(
>80db	04 8c					.word	SyntaxError                      ; $96 STR$(
>80dd	04 8c					.word	SyntaxError                      ; $97 VAL(
>80df	04 8c					.word	SyntaxError                      ; $98 FOR
>80e1	04 8c					.word	SyntaxError                      ; $99 IF
>80e3	04 8c					.word	SyntaxError                      ; $9a PROC
>80e5	04 8c					.word	SyntaxError                      ; $9b REPEAT
>80e7	04 8c					.word	SyntaxError                      ; $9c WHILE
>80e9	04 8c					.word	SyntaxError                      ; $9d ENDIF
>80eb	04 8c					.word	SyntaxError                      ; $9e ENDPROC
>80ed	04 8c					.word	SyntaxError                      ; $9f NEXT
>80ef	04 8c					.word	SyntaxError                      ; $a0 UNTIL
>80f1	04 8c					.word	SyntaxError                      ; $a1 WEND
>80f3	04 8c					.word	SyntaxError                      ; $a2 CLS
>80f5	04 8c					.word	SyntaxError                      ; $a3 DATA
>80f7	04 8c					.word	SyntaxError                      ; $a4 DIM
>80f9	04 8c					.word	SyntaxError                      ; $a5 GOSUB
>80fb	04 8c					.word	SyntaxError                      ; $a6 GOTO
>80fd	04 8c					.word	SyntaxError                      ; $a7 LET
>80ff	04 8c					.word	SyntaxError                      ; $a8 PRINT
>8101	04 8c					.word	SyntaxError                      ; $a9 READ
>8103	04 8c					.word	SyntaxError                      ; $aa REM
>8105	04 8c					.word	SyntaxError                      ; $ab RETURN
>8107	04 8c					.word	SyntaxError                      ; $ac THEN
>8109	04 8c					.word	SyntaxError                      ; $ad TO
.810b					VectorSet1:
>810b	04 8c					.word	SyntaxError                      ; $80 !0:EOF
>810d	04 8c					.word	SyntaxError                      ; $81 !1:SH1
>810f	04 8c					.word	SyntaxError                      ; $82 !2:SH2
>8111	04 8c					.word	SyntaxError                      ; $83 ASSERT
>8113	27 81					.word	ClearCommand                     ; $84 CLEAR
>8115	28 81					.word	EndCommand                       ; $85 END
>8117	04 8c					.word	SyntaxError                      ; $86 LIST
>8119	2b 81					.word	NewCommand                       ; $87 NEW
>811b	04 8c					.word	SyntaxError                      ; $88 RESTORE
>811d	04 8c					.word	SyntaxError                      ; $89 RUN
>811f	04 8c					.word	SyntaxError                      ; $8a STOP
.8121					VectorSet2:
>8121	04 8c					.word	SyntaxError                      ; $80 !0:EOF
>8123	04 8c					.word	SyntaxError                      ; $81 !1:SH1
>8125	04 8c					.word	SyntaxError                      ; $82 !2:SH2

;******  Return to file: ./aa_system/00start.asm


;******  Return to file: _basic.asm


;******  Processing file: ./commands/clear.asm

.8127					ClearCommand:
.8127	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./commands/end.asm

.8128					EndCommand:
.8128	4c 28 80	jmp $8028			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./commands/new.asm

.812b					NewCommand:
.812b	20 f4 85	jsr $85f4			jsr 	MemoryNew
.812e	9c 00 10	stz $1000			stz 	VariableSpace 				; erase all variables.
.8131	20 27 81	jsr $8127			jsr 	ClearCommand 				; clear everything.
.8134	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./errors/charcheck.asm

.8aae					CheckRightBracket:
.8aae	b1 30		lda ($30),y			lda 	(codePtr),y
.8ab0	c8		iny				iny
.8ab1	c9 29		cmp #$29			cmp 	#KWD_RPAREN 						; exit if matches
.8ab3	d0 0f		bne $8ac4			bne 	CNAFail
.8ab5	60		rts				rts
.8ab6					CheckComma:
.8ab6	b1 30		lda ($30),y			lda 	(codePtr),y
.8ab8	c8		iny				iny
.8ab9	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 						; exit if matches
.8abb	d0 07		bne $8ac4			bne 	CNAFail
.8abd	60		rts				rts
.8abe					CheckNextA:
.8abe	d1 30		cmp ($30),y			cmp 	(codePtr),y
.8ac0	d0 02		bne $8ac4			bne 	CNAFail
.8ac2	c8		iny				iny 								; skip character
.8ac3	60		rts				rts 								; and exit
.8ac4					CNAFail:
.8ac4	4c 04 8c	jmp $8c04			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/binary/divide.asm

.8ac7					IntegerDivide:
.8ac7	fa		plx				plx
.8ac8	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8acb	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8ace	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8acf	0a		asl a				asl 	a
.8ad0	10 05		bpl $8ad7			bpl 	_NotRef
.8ad2	48		pha				pha
.8ad3	20 52 83	jsr $8352			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8ad6	68		pla				pla
.8ad7					_NotRef:
.8ad7	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8ad9	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8adc	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8adf	f0 03		beq $8ae4			beq 	_IntegerCode 				; if clear, then we have two integers
.8ae1	4c 0e 8c	jmp $8c0e			jmp 	TypeError 					; anything else, type mismatch.
.8ae4					_IntegerCode:
.8ae4	20 06 8b	jsr $8b06			jsr 	CheckDivideZero 			; do div zero check
.8ae7	20 3d 8b	jsr $8b3d			jsr 	Int32Divide 				; do the division
.8aea	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.8aed	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8af0	bd 12 06	lda $0612,x			lda 	NSMantissa1+2,x
.8af3	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8af6	bd 1a 06	lda $061a,x			lda 	NSMantissa2+2,x
.8af9	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8afc	bd 22 06	lda $0622,x			lda 	NSMantissa3+2,x
.8aff	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8b02	20 f6 8b	jsr $8bf6			jsr 	CalculateSign 				; calculate result sign
.8b05	60		rts				rts
.8b06					CheckDivideZero:
.8b06	e8		inx				inx
.8b07	20 e7 85	jsr $85e7			jsr 	NSMIsZero
.8b0a	f0 02		beq $8b0e			beq 	_CDVError
.8b0c	ca		dex				dex
.8b0d	60		rts				rts
.8b0e					_CDVError:
.8b0e	a9 03		lda #$03		lda	#3
.8b10	4c 2b 80	jmp $802b		jmp	ErrorHandler
.8b13					IntegerModulus:
.8b13	fa		plx				plx
.8b14	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8b17	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8b1a	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8b1b	0a		asl a				asl 	a
.8b1c	10 05		bpl $8b23			bpl 	_NotRef
.8b1e	48		pha				pha
.8b1f	20 52 83	jsr $8352			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8b22	68		pla				pla
.8b23					_NotRef:
.8b23	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8b25	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8b28	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8b2b	f0 03		beq $8b30			beq 	_IntegerCode 				; if clear, then we have two integers
.8b2d	4c 0e 8c	jmp $8c0e			jmp 	TypeError 					; anything else, type mismatch.
.8b30					_IntegerCode:
.8b30	20 06 8b	jsr $8b06			jsr 	CheckDivideZero 			; do div zero check
.8b33	20 3d 8b	jsr $8b3d			jsr 	Int32Divide 				; do the division
.8b36	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; clear the sign bit.
.8b39	5e 00 06	lsr $0600,x			lsr 	NSStatus,x
.8b3c	60		rts				rts
.8b3d					Int32Divide:
.8b3d	48		pha				pha 								; save AXY
.8b3e	5a		phy				phy
.8b3f	20 8e 85	jsr $858e			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.8b42	20 b3 85	jsr $85b3			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.8b45	a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.8b47					_I32DivideLoop:
.8b47	e8		inx				inx
.8b48	e8		inx				inx
.8b49	20 cc 85	jsr $85cc			jsr 	NSMShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.8b4c	ca		dex				dex
.8b4d	ca		dex				dex
.8b4e	20 cd 85	jsr $85cd			jsr 	NSMRotateLeft
.8b51	20 79 8b	jsr $8b79			jsr 	DivideCheckSubtract 		; check if subtract possible
.8b54	90 03		bcc $8b59			bcc 	_I32DivideNoCarryIn
.8b56	fe 0a 06	inc $060a,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.8b59					_I32DivideNoCarryIn:
.8b59	88		dey				dey 								; loop round till division completed.
.8b5a	d0 eb		bne $8b47			bne 	_I32DivideLoop
.8b5c	7a		ply				ply 								; restore AXY and exit
.8b5d	68		pla				pla
.8b5e	60		rts				rts
.8b5f					Int32ShiftDivide:
.8b5f	48		pha				pha 								; save AXY
.8b60	5a		phy				phy
.8b61	20 8e 85	jsr $858e			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.8b64	20 b3 85	jsr $85b3			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.8b67	a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.8b69					_I32SDLoop:
.8b69	20 79 8b	jsr $8b79			jsr 	DivideCheckSubtract 		; check if subtract possible
.8b6c	20 cd 85	jsr $85cd			jsr 	NSMRotateLeft				; shift 64 bit FPA left, rotating carry in
.8b6f	e8		inx				inx
.8b70	20 cd 85	jsr $85cd			jsr 	NSMRotateLeft
.8b73	88		dey				dey 	 							; do 31 times
.8b74	d0 f3		bne $8b69			bne 	_I32SDLoop
.8b76	7a		ply				ply 								; restore AXY and exit
.8b77	68		pla				pla
.8b78	60		rts				rts
.8b79					DivideCheckSubtract:
.8b79	20 e7 81	jsr $81e7			jsr 	SubTopTwoStack 				; subtract Stack[X+1] from Stack[X+0]
.8b7c	b0 04		bcs $8b82			bcs 	_DCSExit 					; if carry set, then could do, exit
.8b7e	20 a0 81	jsr $81a0			jsr 	AddTopTwoStack 				; add it back in
.8b81	18		clc				clc 								; and return False
.8b82					_DCSExit:
.8b82	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/binary/multiply.asm

.8b83					MulInteger:
.8b83	fa		plx				plx
.8b84	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8b87	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8b8a	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8b8b	0a		asl a				asl 	a
.8b8c	10 05		bpl $8b93			bpl 	_NotRef
.8b8e	48		pha				pha
.8b8f	20 52 83	jsr $8352			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8b92	68		pla				pla
.8b93					_NotRef:
.8b93	0a		asl a				asl 	a 							; put MSB of type into A:7
.8b94	30 0b		bmi $8ba1			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.8b96	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8b99	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8b9c	f0 06		beq $8ba4			beq 	_IntegerCode 				; if clear, then we have two integers
.8b9e	4c 13 8c	jmp $8c13			jmp 	NotDoneError 							; otherwise at least one float.
.8ba1					_StringData:
.8ba1	4c 13 8c	jmp $8c13			jmp 	NotDoneError							; at least one string - don't know both are strings.
.8ba4					_IntegerCode:
.8ba4	20 b1 8b	jsr $8bb1			jsr 	MultiplyShort
.8ba7	c9 00		cmp #$00			cmp 	#0
.8ba9	f0 05		beq $8bb0			beq 	_MIExit
.8bab	a9 04		lda #$04		lda	#4
.8bad	4c 2b 80	jmp $802b		jmp	ErrorHandler
.8bb0					_MIExit:
.8bb0	60		rts				rts
.8bb1					MultiplyShort:
.8bb1	5a		phy				phy 								; save Y
.8bb2	20 8e 85	jsr $858e			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.8bb5	20 b3 85	jsr $85b3			jsr 	NSMSetZeroMantissaOnly 		; set mantissa S[X] to zero
.8bb8	a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.8bba					_I32MLoop:
.8bba	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.8bbd	1d 12 06	ora $0612,x			ora 	NSMantissa1+2,x
.8bc0	1d 1a 06	ora $061a,x			ora 	NSMantissa2+2,x
.8bc3	1d 22 06	ora $0622,x			ora 	NSMantissa3+2,x
.8bc6	f0 28		beq $8bf0			beq 	_I32MExit 					; exit if zero
.8bc8	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.8bcb	29 01		and #$01			and 	#1
.8bcd	f0 0e		beq $8bdd			beq 	_I32MNoAdd
.8bcf	20 a0 81	jsr $81a0			jsr 	AddTopTwoStack 				; if so add S[X+1] to S[X+0]
.8bd2	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.8bd5	10 06		bpl $8bdd			bpl 	_I32MNoAdd
.8bd7					_I32ShiftRight:
.8bd7	20 da 85	jsr $85da			jsr 	NSMShiftRight 				; shift S[X] right
.8bda	c8		iny				iny 								; increment shift count
.8bdb	80 0a		bra $8be7			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.8bdd					_I32MNoAdd:
.8bdd	3c 21 06	bit $0621,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.8be0	70 f5		bvs $8bd7			bvs 	_I32ShiftRight 				; instead.
.8be2	e8		inx				inx
.8be3	20 cc 85	jsr $85cc			jsr 	NSMShiftLeft 				; shift additive S[X+1] left
.8be6	ca		dex				dex
.8be7					_I32MShiftUpper:
.8be7	e8		inx				inx 								; shift S[X+2] right
.8be8	e8		inx				inx
.8be9	20 da 85	jsr $85da			jsr 	NSMShiftRight
.8bec	ca		dex				dex
.8bed	ca		dex				dex
.8bee	80 ca		bra $8bba			bra 	_I32MLoop 					; try again.
.8bf0					_I32MExit:
.8bf0	20 f6 8b	jsr $8bf6			jsr 	CalculateSign
.8bf3	98		tya				tya 								; shift in A
.8bf4	7a		ply				ply 								; restore Y and exit
.8bf5	60		rts				rts
.8bf6					CalculateSign:
.8bf6	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.8bf9	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; shift result left
.8bfc	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.8bff	0a		asl a				asl 	a 							; shift bit 7 into carry
.8c00	7e 00 06	ror $0600,x			ror 	NSStatus,x 					; shift right into status byte.
.8c03	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/binary/shifts.asm

.8135					ShiftLeft:
.8135	38		sec				sec
.8136	80 01		bra $8139			bra 	ShiftMain
.8138					ShiftRight:
.8138	18		clc				clc
.8139					ShiftMain:
.8139	fa		plx				plx 								; restore X
.813a	08		php				php 								; save direction
.813b	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.813e	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8141	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8142	0a		asl a				asl 	a
.8143	10 05		bpl $814a			bpl 	_NotRef
.8145	48		pha				pha
.8146	20 52 83	jsr $8352			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8149	68		pla				pla
.814a					_NotRef:
.814a	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.814c	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.814f	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8152	f0 03		beq $8157			beq 	_IntegerCode 				; if clear, then we have two integers
.8154	4c 0e 8c	jmp $8c0e			jmp 	TypeError 					; anything else, type mismatch.
.8157					_IntegerCode:
.8157	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; check number < 32
.815a	29 e0		and #$e0			and 	#$E0
.815c	1d 11 06	ora $0611,x			ora 	NSMantissa1+1,x
.815f	1d 19 06	ora $0619,x			ora 	NSMantissa2+1,x
.8162	1d 21 06	ora $0621,x			ora 	NSMantissa3+1,x
.8165	d0 13		bne $817a			bne 	_SMExit0 					; if >= 32 it will always return zero.
.8167					_SMLoop:
.8167	de 09 06	dec $0609,x			dec 	NSMantissa0+1,x 			; predecrement, could do << 0
.816a	30 11		bmi $817d			bmi 	_SMExit 					; exit if done.
.816c	28		plp				plp 								; restore direcition setting
.816d	08		php				php
.816e	90 05		bcc $8175			bcc 	_SMRight
.8170	20 cc 85	jsr $85cc			jsr 	NSMShiftLeft 				; shift left if CS
.8173	80 f2		bra $8167			bra 	_SMLoop
.8175					_SMRight:
.8175	20 da 85	jsr $85da			jsr 	NSMShiftRight 				; shift right if CC
.8178	80 ed		bra $8167			bra 	_SMLoop
.817a					_SMExit0:
.817a	20 b7 85	jsr $85b7			jsr 	NSMSetZero 					; return zero.
.817d					_SMExit:
.817d	28		plp				plp 								; throw direction
.817e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/binary/simple.asm

.817f					AddInteger:
.817f	fa		plx				plx
.8180	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8183	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8186	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8187	0a		asl a				asl 	a
.8188	10 05		bpl $818f			bpl 	_NotRef
.818a	48		pha				pha
.818b	20 52 83	jsr $8352			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.818e	68		pla				pla
.818f					_NotRef:
.818f	0a		asl a				asl 	a 							; put MSB of type into A:7
.8190	30 0b		bmi $819d			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.8192	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8195	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8198	f0 06		beq $81a0			beq 	_IntegerCode 				; if clear, then we have two integers
.819a	4c 13 8c	jmp $8c13			jmp 	NotDoneError 							; otherwise at least one float.
.819d					_StringData:
.819d	4c 13 8c	jmp $8c13			jmp 	NotDoneError							; at least one string - don't know both are strings.
.81a0					_IntegerCode:
.81a0					AddTopTwoStack:
.81a0	18		clc				clc
.81a1	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.81a4	7d 09 06	adc $0609,x			adc 		NSMantissa0+1,x
.81a7	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.81aa	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.81ad	7d 11 06	adc $0611,x			adc 		NSMantissa1+1,x
.81b0	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.81b3	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.81b6	7d 19 06	adc $0619,x			adc 		NSMantissa2+1,x
.81b9	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.81bc	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.81bf	7d 21 06	adc $0621,x			adc 		NSMantissa3+1,x
.81c2	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.81c5	60		rts				rts
.81c6					SubInteger:
.81c6	fa		plx				plx
.81c7	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.81ca	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.81cd	0a		asl a				asl 	a 							; shift reference bit into sign bit
.81ce	0a		asl a				asl 	a
.81cf	10 05		bpl $81d6			bpl 	_NotRef
.81d1	48		pha				pha
.81d2	20 52 83	jsr $8352			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.81d5	68		pla				pla
.81d6					_NotRef:
.81d6	0a		asl a				asl 	a 							; put MSB of type into A:7
.81d7	30 0b		bmi $81e4			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.81d9	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.81dc	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.81df	f0 06		beq $81e7			beq 	_IntegerCode 				; if clear, then we have two integers
.81e1	4c 13 8c	jmp $8c13			jmp 	NotDoneError 							; otherwise at least one float.
.81e4					_StringData:
.81e4	4c 13 8c	jmp $8c13			jmp 	NotDoneError							; at least one string - don't know both are strings.
.81e7					_IntegerCode:
.81e7					SubTopTwoStack:
.81e7	38		sec				sec
.81e8	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.81eb	fd 09 06	sbc $0609,x			sbc 		NSMantissa0+1,x
.81ee	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.81f1	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.81f4	fd 11 06	sbc $0611,x			sbc 		NSMantissa1+1,x
.81f7	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.81fa	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.81fd	fd 19 06	sbc $0619,x			sbc 		NSMantissa2+1,x
.8200	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8203	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8206	fd 21 06	sbc $0621,x			sbc 		NSMantissa3+1,x
.8209	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.820c	60		rts				rts
.820d					AndInteger:
.820d	fa		plx				plx
.820e	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8211	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8214	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8215	0a		asl a				asl 	a
.8216	10 05		bpl $821d			bpl 	_NotRef
.8218	48		pha				pha
.8219	20 52 83	jsr $8352			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.821c	68		pla				pla
.821d					_NotRef:
.821d	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.821f	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8222	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8225	f0 03		beq $822a			beq 	_IntegerCode 				; if clear, then we have two integers
.8227	4c 0e 8c	jmp $8c0e			jmp 	TypeError 					; anything else, type mismatch.
.822a					_IntegerCode:
.822a	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.822d	3d 09 06	and $0609,x			and 		NSMantissa0+1,x
.8230	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8233	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8236	3d 11 06	and $0611,x			and 		NSMantissa1+1,x
.8239	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.823c	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.823f	3d 19 06	and $0619,x			and 		NSMantissa2+1,x
.8242	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8245	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8248	3d 21 06	and $0621,x			and 		NSMantissa3+1,x
.824b	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.824e	60		rts				rts
.824f					OraInteger:
.824f	fa		plx				plx
.8250	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8253	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8256	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8257	0a		asl a				asl 	a
.8258	10 05		bpl $825f			bpl 	_NotRef
.825a	48		pha				pha
.825b	20 52 83	jsr $8352			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.825e	68		pla				pla
.825f					_NotRef:
.825f	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8261	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8264	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8267	f0 03		beq $826c			beq 	_IntegerCode 				; if clear, then we have two integers
.8269	4c 0e 8c	jmp $8c0e			jmp 	TypeError 					; anything else, type mismatch.
.826c					_IntegerCode:
.826c	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.826f	1d 09 06	ora $0609,x			ora 		NSMantissa0+1,x
.8272	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8275	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8278	1d 11 06	ora $0611,x			ora 		NSMantissa1+1,x
.827b	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.827e	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8281	1d 19 06	ora $0619,x			ora 		NSMantissa2+1,x
.8284	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8287	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.828a	1d 21 06	ora $0621,x			ora 		NSMantissa3+1,x
.828d	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8290	60		rts				rts
.8291					EorInteger:
.8291	fa		plx				plx
.8292	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8295	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8298	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8299	0a		asl a				asl 	a
.829a	10 05		bpl $82a1			bpl 	_NotRef
.829c	48		pha				pha
.829d	20 52 83	jsr $8352			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.82a0	68		pla				pla
.82a1					_NotRef:
.82a1	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.82a3	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.82a6	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.82a9	f0 03		beq $82ae			beq 	_IntegerCode 				; if clear, then we have two integers
.82ab	4c 0e 8c	jmp $8c0e			jmp 	TypeError 					; anything else, type mismatch.
.82ae					_IntegerCode:
.82ae	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.82b1	5d 09 06	eor $0609,x			eor 		NSMantissa0+1,x
.82b4	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.82b7	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.82ba	5d 11 06	eor $0611,x			eor 		NSMantissa1+1,x
.82bd	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.82c0	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.82c3	5d 19 06	eor $0619,x			eor 		NSMantissa2+1,x
.82c6	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.82c9	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.82cc	5d 21 06	eor $0621,x			eor 		NSMantissa3+1,x
.82cf	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.82d2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/expression.asm


;******  Processing file: ./expressions/../generated/precedence.dat

.82d3					PrecedenceLevel:
>82d3	04					.byte	 4	; $00 <<
>82d4	02					.byte	 2	; $01 <=
>82d5	02					.byte	 2	; $02 <>
>82d6	00					.byte	 0	; $03 !!3
>82d7	00					.byte	 0	; $04 ><
>82d8	02					.byte	 2	; $05 >=
>82d9	04					.byte	 4	; $06 >>
>82da	00					.byte	 0	; $07 !!7
>82db	00					.byte	 0	; $08 !!8
>82dc	00					.byte	 0	; $09 !!9
>82dd	00					.byte	 0	; $0a !!10
>82de	00					.byte	 0	; $0b !!11
>82df	00					.byte	 0	; $0c !!12
>82e0	00					.byte	 0	; $0d !!13
>82e1	00					.byte	 0	; $0e !!14
>82e2	00					.byte	 0	; $0f !!15
>82e3	00					.byte	 0	; $10 @
>82e4	00					.byte	 0	; $11 !!17
>82e5	00					.byte	 0	; $12 !!18
>82e6	00					.byte	 0	; $13 [
>82e7	04					.byte	 4	; $14 \
>82e8	00					.byte	 0	; $15 ]
>82e9	01					.byte	 1	; $16 ^
>82ea	00					.byte	 0	; $17 _
>82eb	00					.byte	 0	; $18 `
>82ec	00					.byte	 0	; $19 !!25
>82ed	00					.byte	 0	; $1a !!26
>82ee	00					.byte	 0	; $1b {
>82ef	01					.byte	 1	; $1c |
>82f0	00					.byte	 0	; $1d }
>82f1	00					.byte	 0	; $1e ~
>82f2	00					.byte	 0	; $1f [7m<7F>[m
>82f3	00					.byte	 0	; $20
>82f4	05					.byte	 5	; $21 !
>82f5	00					.byte	 0	; $22 "
>82f6	00					.byte	 0	; $23 #
>82f7	05					.byte	 5	; $24 $
>82f8	04					.byte	 4	; $25 %
>82f9	01					.byte	 1	; $26 &
>82fa	00					.byte	 0	; $27 '
>82fb	00					.byte	 0	; $28 (
>82fc	00					.byte	 0	; $29 )
>82fd	04					.byte	 4	; $2a *
>82fe	03					.byte	 3	; $2b +
>82ff	00					.byte	 0	; $2c ,
>8300	03					.byte	 3	; $2d -
>8301	00					.byte	 0	; $2e .
>8302	04					.byte	 4	; $2f /
>8303	00					.byte	 0	; $30 0
>8304	00					.byte	 0	; $31 1
>8305	00					.byte	 0	; $32 2
>8306	00					.byte	 0	; $33 3
>8307	00					.byte	 0	; $34 4
>8308	00					.byte	 0	; $35 5
>8309	00					.byte	 0	; $36 6
>830a	00					.byte	 0	; $37 7
>830b	00					.byte	 0	; $38 8
>830c	00					.byte	 0	; $39 9
>830d	00					.byte	 0	; $3a :
>830e	00					.byte	 0	; $3b ;
>830f	02					.byte	 2	; $3c <
>8310	02					.byte	 2	; $3d =
>8311	02					.byte	 2	; $3e >
>8312	05					.byte	 5	; $3f ?

;******  Return to file: ./expressions/expression.asm

.8313					EvaluateExpressionAt0:
.8313	a2 00		ldx #$00			ldx 	#0 							; bottom stack level
.8315					EvaluateExpression:
.8315	a9 00		lda #$00			lda 	#0 							; lowest precedence level
.8317					EvaluateExpressionAtPrecedence:
.8317	48		pha				pha 								; save precedence level
.8318	20 9f 84	jsr $849f			jsr 	EvaluateTerm 				; evaluate term into level X.
.831b	68		pla				pla 								; restore precedence level.
.831c					_EXPRLoop:
.831c	85 36		sta $36				sta 	zTemp0 						; save current precedence level.
.831e	b1 30		lda ($30),y			lda 	(codePtr),y
.8320	c9 40		cmp #$40			cmp		#$40 						; if >= $40 cannot be an operator
.8322	b0 25		bcs $8349			bcs 	_EXPRExit
.8324	da		phx				phx 								; read the operator precedence
.8325	aa		tax				tax
.8326	bd d3 82	lda $82d3,x			lda 	PrecedenceLevel,x
.8329	fa		plx				plx
.832a	c9 00		cmp #$00			cmp 	#0							; if zero exit (not an operator)
.832c	f0 1b		beq $8349			beq 	_EXPRExit
.832e	85 37		sta $37				sta 	zTemp0+1 					; save operator precedence level.
.8330	a5 36		lda $36				lda 	zTemp0 						; compare current precedence vs. operator precedence
.8332	c5 37		cmp $37				cmp 	zTemp0+1
.8334	b0 13		bcs $8349			bcs		_EXPRExit 					; if current >= operator exit
.8336	48		pha				pha 								; save current precedence.
.8337	b1 30		lda ($30),y			lda 	(codePtr),y
.8339	c8		iny				iny
.833a	48		pha				pha
.833b	a5 37		lda $37				lda 	zTemp0+1 					; get operator precedence level
.833d	e8		inx				inx 								; work out the right hand side.
.833e	20 17 83	jsr $8317			jsr 	EvaluateExpressionAtPrecedence
.8341	ca		dex				dex
.8342	68		pla				pla 								; get operator, call the code.
.8343	20 4c 83	jsr $834c			jsr 	_EXPRCaller
.8346	68		pla				pla 								; restore precedence level
.8347	80 d3		bra $831c			bra 	_EXPRLoop 					; and go round.
.8349					_EXPRExit:
.8349	a5 36		lda $36				lda 	zTemp0 						; A = current precedence level.
.834b	60		rts				rts
.834c					_EXPRCaller:
.834c	da		phx				phx 								; save on stack, first thing is to restore it
.834d	0a		asl a				asl 	a 							; double so can use vectors into X
.834e	aa		tax				tax
.834f	7c 2f 80	jmp ($802f,x)			jmp 	(VectorSetPunc,x) 			; and go to the code.

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/term/dereference.asm

.8352					DereferenceTopTwo:
.8352	e8		inx				inx
.8353	20 57 83	jsr $8357			jsr 	Dereference 				; deref x+1
.8356	ca		dex				dex  								; falls through to deref x
.8357					Dereference:
.8357	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get the status byte
.835a	29 20		and #$20			and 	#NSBIsReference 			; shift sign bit to carry, reference to bit 7
.835c	f0 57		beq $83b5			beq 	_DRFExit 					; not a reference
.835e	5a		phy				phy
.835f	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy address to dereference into zTemp0
.8362	85 36		sta $36				sta 	zTemp0
.8364	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8367	85 37		sta $37				sta 	zTemp0+1
.8369	9e 10 06	stz $0610,x			stz 	NSMantissa1,x 				; clear second byte.
.836c	b2 36		lda ($36)			lda 	(zTemp0) 					; do the first byte
.836e	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8371	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get status byte.
.8374	29 18		and #$18			and 	#NSBTypeMask 				; what type is it ?
.8376	c9 10		cmp #$10			cmp 	#NSTString 					; if string, dereference two
.8378	f0 0f		beq $8389			beq 	_DRFDereferenceTwo
.837a	c9 08		cmp #$08			cmp 	#NSTFloat 					; if float, do full dereference.
.837c	f0 39		beq $83b7			beq 	_DRFFull
.837e	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be integer - how many bytes ?
.8381	29 03		and #$03			and 	#3
.8383	f0 32		beq $83b7			beq 	_DRFFull 					; the whole word
.8385	c9 01		cmp #$01			cmp 	#1 							; is it 10 (e.g. 2 bytes)
.8387	f0 07		beq $8390			beq		_DRFClear23 				; no, one byte, clear 2 & 3 and exit
.8389					_DRFDereferenceTwo:
.8389	a0 01		ldy #$01			ldy 	#1
.838b	b1 36		lda ($36),y			lda 	(zTemp0),y
.838d	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8390					_DRFClear23:
.8390	9e 18 06	stz $0618,x			stz 	NSMantissa2,x 				; clear upper bytes, only read 1 or 2 bytes
.8393	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.8396	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; make it a value of that type.
.8399	29 18		and #$18			and 	#NSBTypeMask
.839b	9d 00 06	sta $0600,x			sta 	NSStatus,x
.839e	c9 10		cmp #$10			cmp 	#NSTString  				; is it a string
.83a0	d0 12		bne $83b4			bne 	_DRFNotString
.83a2	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; check address is zero
.83a5	1d 10 06	ora $0610,x			ora 	NSMantissa1,x
.83a8	d0 0a		bne $83b4			bne 	_DRFNotString
.83aa	a9 b6		lda #$b6			lda 	#_DRFNullString & $FF 		; if so, return reference to ""
.83ac	9d 08 06	sta $0608,x			sta 	NSMantissa0,X
.83af	a9 83		lda #$83			lda 	#_DRFNullString >> 8
.83b1	9d 10 06	sta $0610,x			sta 	NSMantissa1,X
.83b4					_DRFNotString
.83b4	7a		ply				ply 								; restore Y and exit
.83b5					_DRFExit:
.83b5	60		rts				rts
.83b6					_DRFNullString:
>83b6	00						.byte 	0
.83b7					_DRFFull:
.83b7	a0 01		ldy #$01			ldy 	#1 							; get remaining 3 bytes.
.83b9	b1 36		lda ($36),y			lda 	(zTemp0),y
.83bb	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.83be	c8		iny				iny
.83bf	b1 36		lda ($36),y			lda 	(zTemp0),y
.83c1	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.83c4	c8		iny				iny
.83c5	b1 36		lda ($36),y			lda 	(zTemp0),y
.83c7	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.83ca	9e 28 06	stz $0628,x			stz 	NSExponent,x 				; clear exponent.
.83cd	bd 00 06	lda $0600,x			lda		NSStatus,x 					; see if type is integer
.83d0	29 18		and #$18			and 	#NSBTypeMask  				; type information only
.83d2	9d 00 06	sta $0600,x			sta 	NSStatus,x 					; update it back.
.83d5	f0 06		beq $83dd			beq 	_DRFNoExponent
.83d7	c8		iny				iny 								; if not, read the exponent as well.
.83d8	b1 36		lda ($36),y			lda 	(zTemp0),y
.83da	9d 28 06	sta $0628,x			sta 	NSExponent,x
.83dd					_DRFNoExponent:
.83dd	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; is the most significant bit set ?
.83e0	10 0d		bpl $83ef			bpl 	_DRFExit2 					; if not, then exit.
.83e2	29 7f		and #$7f			and 	#$7F 						; clear that bit.
.83e4	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.83e7	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; set the sign flag
.83ea	09 80		ora #$80			ora 	#NSBIsNegative
.83ec	9d 00 06	sta $0600,x			sta 	NSStatus,x
.83ef					_DRFExit2:
.83ef	7a		ply				ply
.83f0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/term/number.asm

=1					ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2					ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
.83f1					EncodeNumberStart:
.83f1	38		sec				sec
.83f2	80 01		bra $83f5			bra 	EncodeNumberContinue+1
.83f4					EncodeNumberContinue:
.83f4	18		clc				clc
.83f5	08		php				php 								; save reset.
.83f6	c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.83f8	f0 0b		beq $8405			beq 	_ENIsOkay
.83fa	c9 30		cmp #$30			cmp 	#"0"
.83fc	90 04		bcc $8402			bcc 	_ENBadNumber
.83fe	c9 3a		cmp #$3a			cmp 	#"9"+1
.8400	90 03		bcc $8405			bcc 	_ENIsOkay
.8402					_ENBadNumber:
.8402	28		plp				plp 								; throw saved reset
.8403					_ENFail:
.8403	18		clc				clc 								; not allowed
.8404	60		rts				rts
.8405					_ENIsOkay:
.8405	28		plp				plp 								; are we restarting
.8406	90 0c		bcc $8414			bcc 	_ENNoRestart
.8408					_ENStartEncode:
.8408	29 0f		and #$0f			and 	#15 						; put digit in mantissa
.840a	20 b9 85	jsr $85b9			jsr 	NSMSetByte
.840d	a9 01		lda #$01			lda 	#ESTA_Low
.840f					_ENExitChange:
.840f	8d 05 07	sta $0705			sta 	EncodeState 				; save new state
.8412	38		sec				sec
.8413	60		rts				rts
.8414					_ENNoRestart:
.8414	48		pha				pha 								; save on stack.
.8415	ad 05 07	lda $0705			lda 	EncodeState 				; get current state
.8418	c9 01		cmp #$01			cmp 	#ESTA_Low
.841a	f0 05		beq $8421			beq  	_ESTALowState
.841c	c9 02		cmp #$02			cmp 	#ESTA_High
.841e	f0 23		beq $8443			beq 	_ESTAHighState
>8420	db						.byte 	$DB 						; causes a break in the emulator
.8421					_ESTALowState:
.8421	68		pla				pla 								; get value back
.8422	c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.8424	f0 27		beq $844d			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.8426	29 0f		and #$0f			and 	#15 						; make digit
.8428	85 36		sta $36				sta 	zTemp0 						; save it.
.842a	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.842d	0a		asl a				asl 	a
.842e	0a		asl a				asl 	a
.842f	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.8432	0a		asl a				asl 	a
.8433	65 36		adc $36				adc 	zTemp0
.8435	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8438	c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.843a	90 05		bcc $8441			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.843c	a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.843e	8d 05 07	sta $0705			sta 	EncodeState
.8441					_ESTANoSwitch:
.8441	38		sec				sec
.8442	60		rts				rts
.8443					_ESTAHighState:
.8443	68		pla				pla 								; get value back
.8444	c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.8446	f0 05		beq $844d			beq 	_ESTASwitchFloat
.8448	20 4e 84	jsr $844e			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.844b	38		sec				sec
.844c	60		rts				rts
.844d					_ESTASwitchFloat:
>844d	db						.byte 	$DB 						; causes a break in the emulator
.844e					ESTAShiftDigitIntoMantissa:
.844e	29 0f		and #$0f			and 	#15 						; save digit
.8450	48		pha				pha
.8451	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; push mantissa on stack
.8454	48		pha				pha
.8455	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.8458	48		pha				pha
.8459	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.845c	48		pha				pha
.845d	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.8460	48		pha				pha
.8461	20 cc 85	jsr $85cc			jsr 	NSMShiftLeft 				; x 2
.8464	20 cc 85	jsr $85cc			jsr 	NSMShiftLeft 				; x 4
.8467	18		clc				clc 								; pop mantissa and add
.8468	68		pla				pla
.8469	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.846c	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.846f	68		pla				pla
.8470	7d 10 06	adc $0610,x			adc 	NSMantissa1,x
.8473	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8476	68		pla				pla
.8477	7d 18 06	adc $0618,x			adc 	NSMantissa2,x
.847a	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.847d	68		pla				pla
.847e	7d 20 06	adc $0620,x			adc 	NSMantissa3,x
.8481	9d 20 06	sta $0620,x			sta 	NSMantissa3,x 				; x 5
.8484	20 cc 85	jsr $85cc			jsr 	NSMShiftLeft 				; x 10
.8487	68		pla				pla 								; add digit
.8488	18		clc				clc
.8489	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.848c	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.848f	90 0d		bcc $849e			bcc 	_ESTASDExit
.8491	fe 10 06	inc $0610,x			inc 	NSMantissa1,x
.8494	d0 08		bne $849e			bne 	_ESTASDExit
.8496	fe 18 06	inc $0618,x			inc 	NSMantissa2,x
.8499	d0 03		bne $849e			bne 	_ESTASDExit
.849b	fe 20 06	inc $0620,x			inc 	NSMantissa3,x
.849e					_ESTASDExit:
.849e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/term/term.asm

.849f					EvaluateTerm:
.849f	b1 30		lda ($30),y			lda 	(codePtr),y
.84a1	30 18		bmi $84bb			bmi 	_ETCheckUnary 				; unary function ? (text ones)
.84a3	c9 40		cmp #$40			cmp 	#$40 						; 40-7F => identifier reference
.84a5	b0 6e		bcs $8515			bcs 	_ETVariable
.84a7	c9 30		cmp #$30			cmp 	#'0' 						; is it a number
.84a9	90 6e		bcc $8519			bcc 	_ETPuncUnary 				; if not it might be a punctuation unary.
.84ab	c9 3a		cmp #$3a			cmp 	#'9'+1
.84ad	b0 6a		bcs $8519			bcs 	_ETPuncUnary
.84af	20 f1 83	jsr $83f1			jsr 	EncodeNumberStart 			; can't fail as it's 0-9 !
.84b2					_ETNumber:
.84b2	c8		iny				iny 								; keep encoding until we have the numbers
.84b3	b1 30		lda ($30),y			lda 	(codePtr),y
.84b5	20 f4 83	jsr $83f4			jsr 	EncodeNumberContinue
.84b8	b0 f8		bcs $84b2			bcs 	_ETNumber 					; go back if accepted.
.84ba	60		rts				rts
.84bb					_ETCheckUnary:
.84bb	c9 ff		cmp #$ff			cmp 	#KWC_STRING 				; string token
.84bd	f0 40		beq $84ff			beq 	_ETString
.84bf	c9 fe		cmp #$fe			cmp 	#KWC_HEXCONST 				; hex constant.
.84c1	f0 11		beq $84d4			beq 	_ETHexConstant
.84c3	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; check it actually is a unary function
.84c5	90 0a		bcc $84d1			bcc 	_ETSyntaxError
.84c7	c9 98		cmp #$98			cmp 	#KWC_LAST_UNARY+1
.84c9	b0 06		bcs $84d1			bcs 	_ETSyntaxError
.84cb	da		phx				phx 								; push X on the stack
.84cc	0a		asl a				asl 	a 							; put vector x 2 into X
.84cd	aa		tax				tax
.84ce	7c af 80	jmp ($80af,x)			jmp 	(VectorSet0,x) 				; and do it.
.84d1					_ETSyntaxError:
.84d1	4c 04 8c	jmp $8c04			jmp 	SyntaxError
.84d4					_ETHexConstant:
.84d4	c8		iny				iny 								; skip #
.84d5	c8		iny				iny 								; skip count
.84d6	20 b7 85	jsr $85b7			jsr 	NSMSetZero 					; clear result
.84d9					_ETHLoop:
.84d9	b1 30		lda ($30),y			lda 	(codePtr),y
.84db	c8		iny				iny 								; and consume
.84dc	c9 00		cmp #$00			cmp 	#0 							; exit if zero
.84de	f0 1e		beq $84fe			beq 	_ETHExit
.84e0	48		pha				pha 								; save on stack.
.84e1	20 cc 85	jsr $85cc			jsr 	NSMShiftLeft 				; x 2
.84e4	20 cc 85	jsr $85cc			jsr 	NSMShiftLeft 				; x 4
.84e7	20 cc 85	jsr $85cc			jsr 	NSMShiftLeft 				; x 8
.84ea	20 cc 85	jsr $85cc			jsr 	NSMShiftLeft 				; x 16
.84ed	68		pla				pla 								; ASCII
.84ee	c9 41		cmp #$41			cmp 	#'A'
.84f0	90 02		bcc $84f4			bcc 	_ETHNotChar
.84f2	e9 07		sbc #$07			sbc 	#7
.84f4					_ETHNotChar:
.84f4	29 0f		and #$0f			and 	#15 						; digit now
.84f6	1d 08 06	ora $0608,x			ora 	NSMantissa0,x 				; put in LS Nibble
.84f9	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.84fc	80 db		bra $84d9			bra 	_ETHLoop 					; go round.
.84fe					_ETHExit:
.84fe	60		rts				rts
.84ff					_ETString:
.84ff	c8		iny				iny 								; look at length
.8500	b1 30		lda ($30),y			lda 	(codePtr),y
.8502	48		pha				pha
.8503	c8		iny				iny 								; first character
.8504	20 30 86	jsr $8630			jsr 	MemoryInline 				; put address of string at (codePtr),y on stack
.8507	68		pla				pla 								; restore count and save
.8508	85 36		sta $36				sta 	zTemp0
.850a	98		tya				tya 								; add length to Y to skip it.
.850b	18		clc				clc
.850c	65 36		adc $36				adc 	zTemp0
.850e	a8		tay				tay
.850f	a9 10		lda #$10			lda 	#NSTString 					; mark as string
.8511	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8514	60		rts				rts
.8515					_ETVariable:
>8515	db						.byte 	$DB 						; causes a break in the emulator
.8516	4c ff ff	jmp $ffff			jmp 	$FFFF
.8519					_ETPuncUnary:
.8519	c8		iny				iny 								; consume the unary character
.851a	c9 2d		cmp #$2d			cmp 	#KWD_MINUS 					; unary minus
.851c	f0 31		beq $854f			beq 	_ETUnaryNegate
.851e	c9 10		cmp #$10			cmp 	#KWD_AT 					; @ reference -> constant
.8520	f0 3d		beq $855f			beq 	_ETDereference
.8522	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; parenthesis
.8524	f0 58		beq $857e			beq 	_ETParenthesis
.8526	c9 24		cmp #$24			cmp 	#KWD_DOLLAR
.8528	f0 43		beq $856d			beq 	_ETStringReference
.852a	64 36		stz $36				stz 	zTemp0 						; zTemp0 is the indirection level.
.852c	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; byte indirection (0) ?
.852e	f0 06		beq $8536			beq 	_ETIndirection
.8530	e6 36		inc $36				inc 	zTemp0
.8532	c9 21		cmp #$21			cmp 	#KWD_PLING					; word indirection (1) \
.8534	d0 9b		bne $84d1			bne 	_ETSyntaxError
.8536					_ETIndirection:
.8536	a5 36		lda $36				lda 	zTemp0 						; push indirection amount (0-1) => (1-2) on the stack
.8538	1a		inc a				inc 	a
.8539	48		pha				pha
.853a	20 9f 84	jsr $849f			jsr 	EvaluateTerm				; evaluate the term
.853d	20 57 83	jsr $8357			jsr 	Dereference 				; dereference it.
.8540	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a +ve integer.
.8543	d0 07		bne $854c			bne 	_ETTypeMismatch
.8545	68		pla				pla 								; indirection 1-2
.8546	09 20		ora #$20			ora 	#NSBIsReference 			; make it a reference.
.8548	9d 00 06	sta $0600,x			sta 	NSStatus,x
.854b	60		rts				rts
.854c					_ETTypeMismatch:
.854c	4c 0e 8c	jmp $8c0e			jmp 	TypeError
.854f					_ETUnaryNegate:
.854f	20 9f 84	jsr $849f			jsr 	EvaluateTerm				; evaluate the term
.8552	20 57 83	jsr $8357			jsr 	Dereference 				; dereference it.
.8555	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a number
.8558	29 10		and #$10			and 	#NSTString
.855a	d0 f0		bne $854c			bne 	_ETTypeMismatch
.855c	4c 85 85	jmp $8585			jmp 	NSMNegate  					; just toggles the sign bit.
.855f					_ETDereference:
.855f	20 9f 84	jsr $849f			jsr 	EvaluateTerm				; evaluate the term
.8562	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a reference
.8565	29 20		and #$20			and 	#NSBIsReference
.8567	f0 e3		beq $854c			beq 	_ETTypeMismatch
.8569	9e 00 06	stz $0600,x			stz 	NSStatus,x 					; make it an integer address
.856c	60		rts				rts
.856d					_ETStringReference:
.856d	20 9f 84	jsr $849f			jsr 	EvaluateTerm				; evaluate the term
.8570	20 57 83	jsr $8357			jsr 	Dereference 				; dereference it.
.8573	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a +ve integer.
.8576	d0 d4		bne $854c			bne 	_ETTypeMismatch
.8578	a9 10		lda #$10			lda 	#NSTString 					; make it a string
.857a	9d 00 06	sta $0600,x			sta 	NSStatus,x
.857d	60		rts				rts
.857e					_ETParenthesis:
.857e	20 15 83	jsr $8315			jsr 	EvaluateExpression 			; evaluate here, from lowest precedence
.8581	20 ae 8a	jsr $8aae			jsr 	CheckRightBracket 			; check for )
.8584	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/utility/utility.asm

.8585					NSMNegate:
.8585	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8588	49 80		eor #$80			eor 	#NSBIsNegative
.858a	9d 00 06	sta $0600,x			sta 	NSStatus,x
.858d	60		rts				rts
.858e					NSMShiftUpTwo:
.858e	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.8591	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.8594	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8597	9d 12 06	sta $0612,x			sta 	NSMantissa1+2,x
.859a	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.859d	9d 1a 06	sta $061a,x			sta 	NSMantissa2+2,x
.85a0	bd 20 06	lda $0620,x			lda 	NSMantissa3,x
.85a3	9d 22 06	sta $0622,x			sta 	NSMantissa3+2,x
.85a6	bd 28 06	lda $0628,x			lda 	NSExponent,x
.85a9	9d 2a 06	sta $062a,x			sta 	NSExponent+2,x
.85ac	bd 00 06	lda $0600,x			lda 	NSStatus,x
.85af	9d 02 06	sta $0602,x			sta 	NSStatus+2,x
.85b2	60		rts				rts
.85b3					NSMSetZeroMantissaOnly:
.85b3	a9 00		lda #$00			lda 	#0
.85b5	80 08		bra $85bf			bra 	NSMSetMantissa
.85b7					NSMSetZero:
.85b7	a9 00		lda #$00			lda 	#0
.85b9					NSMSetByte:
.85b9	9e 28 06	stz $0628,x			stz 	NSExponent,x 				; zero exponent, as integer.
.85bc	9e 00 06	stz $0600,x			stz 	NSStatus,x 					; status zero (integer)
.85bf					NSMSetMantissa:
.85bf	9d 08 06	sta $0608,x			sta 	NSMantissa0,x 				; mantissa
.85c2	9e 10 06	stz $0610,x			stz 	NSMantissa1,x
.85c5	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.85c8	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.85cb	60		rts				rts
.85cc					NSMShiftLeft:
.85cc	18		clc				clc
.85cd					NSMRotateLeft:
.85cd	3e 08 06	rol $0608,x			rol 	NSMantissa0,x
.85d0	3e 10 06	rol $0610,x			rol		NSMantissa1,x
.85d3	3e 18 06	rol $0618,x			rol		NSMantissa2,x
.85d6	3e 20 06	rol $0620,x			rol		NSMantissa3,x
.85d9	60		rts				rts
.85da					NSMShiftRight:
.85da	5e 20 06	lsr $0620,x			lsr 	NSMantissa3,x
.85dd	7e 18 06	ror $0618,x			ror		NSMantissa2,x
.85e0	7e 10 06	ror $0610,x			ror		NSMantissa1,x
.85e3	7e 08 06	ror $0608,x			ror		NSMantissa0,x
.85e6	60		rts				rts
.85e7					NSMIsZero:
.85e7	bd 20 06	lda $0620,x			lda 	NSMantissa3,x
.85ea	1d 18 06	ora $0618,x			ora		NSMantissa2,x
.85ed	1d 10 06	ora $0610,x			ora		NSMantissa1,x
.85f0	1d 08 06	ora $0608,x			ora		NSMantissa0,x
.85f3	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./generated/errors.asm

.8c04					SyntaxError:
.8c04	a9 02		lda #$02		lda	#2
.8c06	4c 2b 80	jmp $802b		jmp	ErrorHandler
.8c09					RangeError:
.8c09	a9 04		lda #$04		lda	#4
.8c0b	4c 2b 80	jmp $802b		jmp	ErrorHandler
.8c0e					TypeError:
.8c0e	a9 05		lda #$05		lda	#5
.8c10	4c 2b 80	jmp $802b		jmp	ErrorHandler
.8c13					NotDoneError:
.8c13	a9 0c		lda #$0c		lda	#12
.8c15	4c 2b 80	jmp $802b		jmp	ErrorHandler
.8c18					ErrorText:
>8c18	42 72 65 61 6b 00			.text	"Break",0
>8c1e	53 79 6e 74 61 78 20 65			.text	"Syntax error",0
>8c26	72 72 6f 72 00
>8c2b	44 69 76 69 73 69 6f 6e			.text	"Division by zero",0
>8c33	20 62 79 20 7a 65 72 6f 00
>8c3c	4f 75 74 20 6f 66 20 52			.text	"Out of Range",0
>8c44	61 6e 67 65 00
>8c49	54 79 70 65 20 6d 69 73			.text	"Type mismatch",0
>8c51	6d 61 74 63 68 00
>8c57	4f 75 74 20 6f 66 20 6d			.text	"Out of memory",0
>8c5f	65 6d 6f 72 79 00
>8c65	49 6c 6c 65 67 61 6c 20			.text	"Illegal argument",0
>8c6d	61 72 67 75 6d 65 6e 74 00
>8c76	53 74 6f 70 00				.text	"Stop",0
>8c7b	53 74 72 69 6e 67 20 74			.text	"String too long",0
>8c83	6f 6f 20 6c 6f 6e 67 00
>8c8b	41 73 73 65 72 74 69 6f			.text	"Assertion failed",0
>8c93	6e 20 66 61 69 6c 65 64 00
>8c9c	4f 75 74 20 6f 66 20 64			.text	"Out of data",0
>8ca4	61 74 61 00
>8ca8	55 6e 69 6d 70 6c 65 6d			.text	"Unimplemented",0
>8cb0	65 6e 74 65 64 00

;******  Return to file: _basic.asm


;******  Processing file: ./memory.flat/memory.asm

.85f4					MemoryNew:
.85f4	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.85f6	85 30		sta $30				sta 	codePtr
.85f8	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.85fa	85 31		sta $31				sta 	codePtr+1
.85fc	a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.85fe	92 30		sta ($30)			sta 	(codePtr)
.8600	60		rts				rts
.8601					MemoryAppend:
.8601	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.8603	85 30		sta $30				sta 	codePtr
.8605	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.8607	85 31		sta $31				sta 	codePtr+1
.8609					_MAFindEnd:
.8609	b2 30		lda ($30)			lda 	(codePtr)
.860b	f0 0d		beq $861a			beq 	_MAFoundEnd
.860d	18		clc				clc
.860e	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8610	65 30		adc $30				adc 	codePtr
.8612	85 30		sta $30				sta 	codePtr
.8614	90 02		bcc $8618			bcc 	_CREExit
.8616	e6 31		inc $31				inc 	codePtr+1
.8618					_CREExit:
.8618	80 ef		bra $8609			bra 	_MAFindEnd
.861a					_MAFoundEnd:
.861a	ac 06 07	ldy $0706			ldy 	tokenOffset 				; bytes to copy
.861d	c0 04		cpy #$04			cpy 	#4 							; blank line
.861f	f0 0e		beq $862f			beq 	_MANoLine
.8621	a9 00		lda #$00			lda 	#0 							; end of program
.8623	91 30		sta ($30),y			sta 	(codePtr),y
.8625					_MACopy:
.8625	88		dey				dey
.8626	b9 06 07	lda $0706,y			lda 	tokenOffset,y
.8629	91 30		sta ($30),y			sta 	(codePtr),y
.862b	c0 00		cpy #$00			cpy 	#0
.862d	d0 f6		bne $8625			bne 	_MACopy
.862f					_MANoLine:
.862f	60		rts				rts
.8630					MemoryInline:
.8630	98		tya				tya 								; put address into stack,x
.8631	18		clc				clc
.8632	65 30		adc $30				adc 	codePtr
.8634	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8637	a5 31		lda $31				lda 	codePtr+1
.8639	69 00		adc #$00			adc 	#0
.863b	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.863e	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.8641	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.8644	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./memory.flat/variable.asm

.8645					VariableOpen:
.8645	60		rts				rts
.8646					VariableClose:
.8646	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./tokeniser/backload.asm

.8647					BackloadProgram:
.8647	a2 ff		ldx #$ff			ldx 	#$FF
.8649	ad fa ff	lda $fffa			lda 	$FFFA 						; read first byte
.864c	30 1e		bmi $866c			bmi 	_BPExit
.864e					_BPCopy:
.864e	e8		inx				inx  								; copy byte in
.864f	9d 06 08	sta $0806,x			sta 	lineBuffer,x
.8652	9e 07 08	stz $0807,x			stz 	lineBuffer+1,x
.8655	ad fa ff	lda $fffa			lda 	$FFFA 						; read next byte
.8658	30 0a		bmi $8664			bmi 	_BPEndLine 					; -ve = EOL
.865a	c9 09		cmp #$09			cmp 	#9 							; handle TAB
.865c	d0 02		bne $8660			bne 	_BPNotTab
.865e	a9 20		lda #$20			lda 	#' '
.8660					_BPNotTab:
.8660	c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.8662	b0 ea		bcs $864e			bcs 	_BPCopy
.8664					_BPEndLine:
.8664	20 29 88	jsr $8829			jsr 	TokeniseLine 				; tokenise the line.
.8667	20 01 86	jsr $8601			jsr 	MemoryAppend 				; append to current program
.866a	80 db		bra $8647			bra 	BackloadProgram
.866c					_BPExit:
.866c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./tokeniser/searchtokens.asm

.866d					TokeniseSearchTable:
.866d	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token.
.866f	85 36		sta $36				sta 	zTemp0
.8671	a0 00		ldy #$00			ldy 	#0
.8673	a9 80		lda #$80			lda 	#$80 						; token #
.8675	85 38		sta $38				sta 	zTemp1
.8677					_TSTLoop:
.8677	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.8679	30 49		bmi $86c4			bmi 	_TSTFail 					; -ve = end of table
.867b	f0 2e		beq $86ab			beq 	_TSTNext 					; zero, check next it's a dummy
.867d	c8		iny				iny 								; get the hash
.867e	b1 36		lda ($36),y			lda 	(zTemp0),y
.8680	88		dey				dey
.8681	cd 03 07	cmp $0703			cmp 	identHash 					; check they match, if not go to next
.8684	d0 25		bne $86ab			bne 	_TSTNext
.8686	ad 02 07	lda $0702			lda 	identTypeEnd 				; length of identifier
.8689	38		sec				sec
.868a	ed 00 07	sbc $0700			sbc 	identStart
.868d	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; no match, then return.
.868f	d0 1a		bne $86ab			bne 	_TSTNext
.8691	5a		phy				phy 								; save Y , we might fail
.8692	c8		iny				iny 								; point to text
.8693	c8		iny				iny
.8694	ae 00 07	ldx $0700			ldx 	identStart 					; offset in line buffer in X
.8697					_TSTCompareName:
.8697	bd 06 08	lda $0806,x			lda 	lineBuffer,x 				; compare text.
.869a	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.869c	d0 0c		bne $86aa			bne 	_TSTNextPullY 				; fail, pullY and do next
.869e	e8		inx				inx
.869f	c8		iny				iny
.86a0	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; complete match.
.86a3	d0 f2		bne $8697			bne 	_TSTCompareName
.86a5	7a		ply				ply 								; throw Y
.86a6	a5 38		lda $38				lda 	zTemp1 						; get token #
.86a8	38		sec				sec 								; return with CS = passed.
.86a9	60		rts				rts
.86aa					_TSTNextPullY:
.86aa	7a		ply				ply 								; restore current, fall through.
.86ab					_TSTNext:
.86ab	e6 38		inc $38				inc 	zTemp1 						; token counter
.86ad	98		tya				tya
.86ae	18		clc				clc
.86af	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.86b1	1a		inc a				inc 	a 							; +1
.86b2	1a		inc a				inc 	a 							; +2
.86b3	a8		tay				tay
.86b4	10 c1		bpl $8677			bpl 	_TSTLoop 					; if Y < $80 loop back
.86b6	98		tya				tya 								; add Y to zTemp0 and reset Y
.86b7	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.86b9	18		clc				clc  								; but have tables > 255 bytes
.86ba	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.86bc	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.86be	90 b7		bcc $8677			bcc 	_TSTLoop
.86c0	e6 37		inc $37				inc 	zTemp0+1
.86c2	80 b3		bra $8677			bra 	_TSTLoop
.86c4					_TSTFail:
.86c4	18		clc				clc
.86c5	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./tokeniser/tokenise.asm


;******  Processing file: ./tokeniser/../generated/kwdtext.dat

.86c6					KeywordSet0:
>86c6	00 65					.text	0,$65,""               ; $80 !0:EOF
>86c8	00 58					.text	0,$58,""               ; $81 !1:SH1
>86ca	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>86cc	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $83 ABS(
>86d2	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $84 ALLOC(
>86da	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $85 ASC(
>86e0	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $86 CHR$(
>86e7	04 f4 44 45 43 28			.text	4,$f4,"DEC("           ; $87 DEC(
>86ed	09 4a 47 45 54 44 41 54			.text	9,$4a,"GETDATE$("      ; $88 GETDATE$(
>86f5	45 24 28
>86f8	09 5b 47 45 54 54 49 4d			.text	9,$5b,"GETTIME$("      ; $89 GETTIME$(
>8700	45 24 28
>8703	05 31 48 45 58 24 28			.text	5,$31,"HEX$("          ; $8a HEX$(
>870a	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $8b INT(
>8710	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $8c ISVAL(
>8718	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $8d LEFT$(
>8720	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $8e LEN(
>8726	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $8f MID$(
>872d	03 f1 4e 4f 54				.text	3,$f1,"NOT"            ; $90 NOT
>8732	04 1d 50 41 47 45			.text	4,$1d,"PAGE"           ; $91 PAGE
>8738	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $92 RIGHT$(
>8740	28
>8741	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $93 RND(
>8747	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $94 SGN(
>874d	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $95 SPC(
>8753	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $96 STR$(
>875a	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $97 VAL(
>8760	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $98 FOR
>8765	02 8f 49 46				.text	2,$8f,"IF"             ; $99 IF
>8769	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $9a PROC
>876f	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $9b REPEAT
>8777	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $9c WHILE
>877e	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $9d ENDIF
>8785	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $9e ENDPROC
>878d	43
>878e	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $9f NEXT
>8794	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $a0 UNTIL
>879b	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $a1 WEND
>87a1	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $a2 CLS
>87a6	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $a3 DATA
>87ac	03 da 44 49 4d				.text	3,$da,"DIM"            ; $a4 DIM
>87b1	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $a5 GOSUB
>87b8	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $a6 GOTO
>87be	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $a7 LET
>87c3	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $a8 PRINT
>87ca	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $a9 READ
>87d0	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $aa REM
>87d5	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $ab RETURN
>87dd	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $ac THEN
>87e3	02 a3 54 4f				.text	2,$a3,"TO"             ; $ad TO
>87e7	ff					.text	$FF
.87e8					KeywordSet1:
>87e8	00 65					.text	0,$65,""               ; $80 !0:EOF
>87ea	00 58					.text	0,$58,""               ; $81 !1:SH1
>87ec	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>87ee	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $83 ASSERT
>87f6	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $84 CLEAR
>87fd	03 d7 45 4e 44				.text	3,$d7,"END"            ; $85 END
>8802	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $86 LIST
>8808	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $87 NEW
>880d	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $88 RESTORE
>8815	45
>8816	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $89 RUN
>881b	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $8a STOP
>8821	ff					.text	$FF
.8822					KeywordSet2:
>8822	00 65					.text	0,$65,""               ; $80 !0:EOF
>8824	00 58					.text	0,$58,""               ; $81 !1:SH1
>8826	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>8828	ff					.text	$FF

;******  Return to file: ./tokeniser/tokenise.asm

.8829					TokeniseLine:
.8829	20 b1 89	jsr $89b1			jsr 	FixLineBufferCase 			; fix line case
.882c	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.882e	8d 06 07	sta $0706			sta 	tokenOffset
.8831	9c 07 07	stz $0707			stz 	tokenLineNumber
.8834	9c 08 07	stz $0708			stz 	tokenLineNumber+1
.8837	a2 ff		ldx #$ff			ldx 	#$FF
.8839					_TKFindFirst:
.8839	e8		inx				inx
.883a	bd 06 08	lda $0806,x			lda 	lineBuffer,x
.883d	f0 79		beq $88b8			beq 	_TKExit
.883f	c9 20		cmp #$20			cmp 	#' '
.8841	90 f6		bcc $8839			bcc 	_TKFindFirst
.8843	c9 30		cmp #$30			cmp 	#'0'
.8845	90 07		bcc $884e			bcc 	_TKNoLineNumber
.8847	c9 3a		cmp #$3a			cmp 	#'9'+1
.8849	b0 03		bcs $884e			bcs 	_TKNoLineNumber
.884b	20 db 89	jsr $89db			jsr 	TokeniseExtractLineNumber
.884e					_TKNoLineNumber:
.884e					_TKTokeniseLoop:
.884e	bd 06 08	lda $0806,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.8851	f0 65		beq $88b8			beq 	_TKExit
.8853	e8		inx				inx
.8854	c9 20		cmp #$20			cmp 	#' '
.8856	f0 f6		beq $884e			beq 	_TKTokeniseLoop 			; keep looping if space found.
.8858	ca		dex				dex 								; undo last get, A contains character, X is position.
.8859	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.885b	f0 61		beq $88be			beq 	_TKTokeniseIdentifier
.885d	c9 41		cmp #$41			cmp 	#'A'
.885f	90 04		bcc $8865			bcc 	_TKTokenisePunctuation
.8861	c9 5b		cmp #$5b			cmp 	#'Z'+1
.8863	90 59		bcc $88be			bcc 	_TKTokeniseIdentifier
.8865					_TKTokenisePunctuation:
.8865	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.8867	f0 27		beq $8890			beq 	_TKString
.8869	c9 23		cmp #$23			cmp 	#'#'						; hexadecimal constant (# only appears at end of identifiers)
.886b	f0 28		beq $8895			beq 	_TKHexConstant
.886d	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers.
.886f	f0 29		beq $889a			beq 	_TKCheckDouble
.8871	c9 3e		cmp #$3e			cmp 	#'>'
.8873	f0 25		beq $889a			beq 	_TKCheckDouble
.8875					_TKStandardPunctuation:
.8875	bd 06 08	lda $0806,x			lda 	lineBuffer,x 				; get it back.
.8878	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.887a	90 0e		bcc $888a			bcc 	_TKNoShift
.887c	48		pha				pha 								; save
.887d	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.887f	85 36		sta $36				sta 	zTemp0
.8881	68		pla				pla
.8882	29 20		and #$20			and 	#32 						; bit 5
.8884	4a		lsr a				lsr 	a 							; shift into bit 3
.8885	4a		lsr a				lsr 	a
.8886	05 36		ora $36				ora 	zTemp0
.8888	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.888a					_TKNoShift:
.888a	20 20 8a	jsr $8a20			jsr 	TokeniseWriteByte 			; write the punctuation character
.888d	e8		inx				inx 								; consume the character
.888e	80 be		bra $884e			bra 	_TKTokeniseLoop 			; and loop round again.
.8890					_TKString:
.8890	20 40 89	jsr $8940			jsr 	TokeniseString
.8893	80 b9		bra $884e			bra 	_TKTokeniseLoop
.8895					_TKHexConstant:
.8895	20 7b 89	jsr $897b			jsr 	TokeniseHexConstant
.8898	80 b4		bra $884e			bra 	_TKTokeniseLoop
.889a					_TKCheckDouble:
.889a	bd 07 08	lda $0807,x			lda 	lineBuffer+1,x 				; get next character
.889d	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.889f	90 d4		bcc $8875			bcc 	_TKStandardPunctuation
.88a1	c9 3f		cmp #$3f			cmp 	#'>'+1
.88a3	b0 d0		bcs $8875			bcs 	_TKStandardPunctuation
.88a5	bd 06 08	lda $0806,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.88a8	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.88aa	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.88ab	7d 07 08	adc $0807,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.88ae	38		sec				sec
.88af	e9 3c		sbc #$3c			sbc 	#'<'
.88b1	20 20 8a	jsr $8a20			jsr 	TokeniseWriteByte 			; this is in the range 0-7
.88b4	e8		inx				inx 								; consume both
.88b5	e8		inx				inx
.88b6	80 96		bra $884e			bra 	_TKTokeniseLoop
.88b8	a9 80		lda #$80	_TKExit:lda 	#KWC_EOL 					; write end of line byte
.88ba	20 20 8a	jsr $8a20			jsr 	TokeniseWriteByte
.88bd	60		rts				rts
.88be					_TKTokeniseIdentifier:
.88be	8e 00 07	stx $0700			stx 	identStart 					; save start
.88c1	9c 04 07	stz $0704			stz 	identTypeByte 				; zero the type byte
.88c4					_TKCheckLoop:
.88c4	e8		inx				inx 								; look at next, we know first is identifier.
.88c5	bd 06 08	lda $0806,x			lda  	lineBuffer,x
.88c8	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.88ca	f0 f8		beq $88c4			beq 	_TKCheckLoop
.88cc	c9 30		cmp #$30			cmp	 	#"0"
.88ce	90 0c		bcc $88dc			bcc 	_TKEndIdentifier
.88d0	c9 3a		cmp #$3a			cmp 	#"9"+1
.88d2	90 f0		bcc $88c4			bcc 	_TKCheckLoop
.88d4	c9 41		cmp #$41			cmp	 	#"A"
.88d6	90 04		bcc $88dc			bcc 	_TKEndIdentifier
.88d8	c9 5b		cmp #$5b			cmp 	#"Z"+1
.88da	90 e8		bcc $88c4			bcc 	_TKCheckLoop
.88dc					_TKEndIdentifier:
.88dc	8e 01 07	stx $0701			stx 	identTypeStart 				; save start of type text (if any !)
.88df	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.88e1	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.88e3	f0 06		beq $88eb			beq 	_TKHasTypeCharacter
.88e5	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.88e7	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.88e9	d0 07		bne $88f2			bne 	_TKNoTypeCharacter
.88eb					_TKHasTypeCharacter:
.88eb	8c 04 07	sty $0704			sty 	identTypeByte 				; has # or $, save the type
.88ee	e8		inx				inx 								; read next
.88ef	bd 06 08	lda $0806,x			lda 	lineBuffer,x
.88f2					_TKNoTypeCharacter:
.88f2	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.88f4	d0 09		bne $88ff			bne 	_TKNoArray
.88f6	e8		inx				inx 								; skip the (
.88f7	ad 04 07	lda $0704			lda 	identTypeByte 				; set bit 2 (e.g. array)
.88fa	09 04		ora #$04			ora 	#$04
.88fc	8d 04 07	sta $0704			sta 	identTypeByte
.88ff					_TKNoArray:
.88ff	8e 02 07	stx $0702			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.8902	20 9c 89	jsr $899c			jsr 	TokeniseCalculateHash 		; calculate the has for those tokens
.8905	a0 86		ldy #$86			ldy 	#(KeywordSet0) >> 8
.8907	a9 c6		lda #$c6			lda 	#(KeywordSet0) & $FF
.8909	20 6d 86	jsr $866d			jsr 	TokeniseSearchTable
.890c	a2 00		ldx #$00			ldx 	#0
.890e	b0 1f		bcs $892f			bcs 	_TKFoundToken
.8910	a0 87		ldy #$87			ldy 	#(KeywordSet1) >> 8
.8912	a9 e8		lda #$e8			lda 	#(KeywordSet1) & $FF
.8914	20 6d 86	jsr $866d			jsr 	TokeniseSearchTable
.8917	a2 81		ldx #$81			ldx 	#$81
.8919	b0 14		bcs $892f			bcs 	_TKFoundToken
.891b	a0 87		ldy #$87			ldy 	#(KeywordSet1) >> 8
.891d	a9 e8		lda #$e8			lda 	#(KeywordSet1) & $FF
.891f	20 6d 86	jsr $866d			jsr 	TokeniseSearchTable
.8922	a2 82		ldx #$82			ldx 	#$82
.8924	b0 09		bcs $892f			bcs 	_TKFoundToken
.8926	20 2c 8a	jsr $8a2c			jsr 	CheckCreateVariableRecord 	; failed all, it's a variable, create record if does not exist.
.8929	ae 02 07	ldx $0702			ldx 	identTypeEnd 				; X points to following byte
.892c	4c 4e 88	jmp $884e			jmp 	_TKTokeniseLoop 			; and go round again.
.892f					_TKFoundToken:
.892f	48		pha				pha 								; save token
.8930	8a		txa				txa 								; shift in X, is there one ?
.8931	f0 03		beq $8936			beq 	_TKNoTShift
.8933	20 20 8a	jsr $8a20			jsr 	TokeniseWriteByte 			; if so, write it out
.8936					_TKNoTShift:
.8936	68		pla				pla 								; restore and write token
.8937	20 20 8a	jsr $8a20			jsr 	TokeniseWriteByte
.893a	ae 02 07	ldx $0702			ldx 	identTypeEnd 				; X points to following byte
.893d	4c 4e 88	jmp $884e			jmp 	_TKTokeniseLoop 			; and go round again.
.8940					TokeniseString:
.8940	a9 ff		lda #$ff			lda 	#KWC_STRING 				; string token.
.8942	20 20 8a	jsr $8a20			jsr 	TokeniseWriteByte
.8945	e8		inx				inx									; start of quoted string.
.8946	da		phx				phx 								; push start of string on top
.8947	ca		dex				dex
.8948					_TSFindEnd:
.8948	e8		inx				inx
.8949	bd 06 08	lda $0806,x			lda 	lineBuffer,x 				; next character
.894c	f0 04		beq $8952			beq 	_TSEndOfString
.894e	c9 22		cmp #$22			cmp 	#'"'
.8950	d0 f6		bne $8948			bne 	_TSFindEnd
.8952					_TSEndOfString:
.8952	7a		ply				ply  								; so now Y is first character, X is character after end.
.8953	48		pha				pha 								; save terminating character
.8954	20 5c 89	jsr $895c			jsr 	TOWriteBlockXY 				; write X to Y as a data block
.8957	68		pla				pla 								; terminating character
.8958	f0 01		beq $895b			beq 	_TSNotQuote					; if it wasn't EOS skip it
.895a	e8		inx				inx
.895b					_TSNotQuote:
.895b	60		rts				rts
.895c					TOWriteBlockXY:
.895c	86 36		stx $36				stx 	zTemp0 						; write end character
.895e	98		tya				tya
.895f	49 ff		eor #$ff			eor 	#$FF
.8961	38		sec				sec
.8962	65 36		adc $36				adc 	zTemp0
.8964	1a		inc a				inc 	a 							; one extra for NULL
.8965	20 20 8a	jsr $8a20			jsr 	TokeniseWriteByte
.8968					_TOBlockLoop:
.8968	c4 36		cpy $36				cpy 	zTemp0
.896a	f0 09		beq $8975			beq 	_TOBlockExit
.896c	b9 06 08	lda $0806,y			lda 	lineBuffer,y
.896f	20 20 8a	jsr $8a20			jsr 	TokeniseWriteByte
.8972	c8		iny				iny
.8973	80 f3		bra $8968			bra 	_TOBlockLoop
.8975					_TOBlockExit:
.8975	a9 00		lda #$00			lda 	#0
.8977	20 20 8a	jsr $8a20			jsr 	TokeniseWriteByte
.897a	60		rts				rts
.897b					TokeniseHexConstant:
.897b	a9 fe		lda #$fe			lda 	#KWC_HEXCONST 				; hex constant token.
.897d	20 20 8a	jsr $8a20			jsr 	TokeniseWriteByte
.8980	e8		inx				inx									; start of quoted string.
.8981	da		phx				phx 								; push start of constant on top
.8982	ca		dex				dex
.8983					_THFindLoop:
.8983	e8		inx				inx
.8984	bd 06 08	lda $0806,x			lda 	lineBuffer,x
.8987	c9 30		cmp #$30			cmp 	#"0"
.8989	90 0c		bcc $8997			bcc 	_THFoundEnd
.898b	c9 3a		cmp #$3a			cmp 	#"9"+1
.898d	90 f4		bcc $8983			bcc 	_THFindLoop
.898f	c9 41		cmp #$41			cmp 	#"A"
.8991	90 04		bcc $8997			bcc 	_THFoundEnd
.8993	c9 47		cmp #$47			cmp 	#"F"+1
.8995	90 ec		bcc $8983			bcc 	_THFindLoop
.8997					_THFoundEnd:
.8997	7a		ply				ply 								; restore start
.8998	20 5c 89	jsr $895c			jsr 	TOWriteBlockXY 				; output the block
.899b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./tokeniser/utility.asm

.899c					TokeniseCalculateHash:
.899c	da		phx				phx
.899d	ae 00 07	ldx $0700			ldx 	identStart 					; needs to be same as in tokens.py - simple sum
.89a0	a9 00		lda #$00			lda 	#0
.89a2					_TCHLoop:
.89a2	18		clc				clc
.89a3	7d 06 08	adc $0806,x			adc 	lineBuffer,x
.89a6	e8		inx				inx
.89a7	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.89aa	d0 f6		bne $89a2			bne 	_TCHLoop
.89ac	8d 03 07	sta $0703			sta 	identHash 					; save the hash
.89af	fa		plx				plx
.89b0	60		rts				rts
.89b1					FixLineBufferCase:
.89b1	a2 00		ldx #$00			ldx 	#0
.89b3					_FLBCLoop:
.89b3	bd 06 08	lda $0806,x			lda 	lineBuffer,x 				; get next character
.89b6	f0 22		beq $89da			beq 	_FLBCExit 					; end of string.
.89b8	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.89ba	f0 11		beq $89cd			beq 	_FLBCInQuotes
.89bc	e8		inx				inx
.89bd	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.89bf	90 f2		bcc $89b3			bcc 	_FLBCLoop
.89c1	c9 7b		cmp #$7b			cmp 	#'z'+1
.89c3	b0 ee		bcs $89b3			bcs 	_FLBCLoop
.89c5	38		sec				sec 								; make U/C
.89c6	e9 20		sbc #$20			sbc 	#32
.89c8	9d 05 08	sta $0805,x			sta	 	lineBuffer-1,x 				; write back
.89cb	80 e6		bra $89b3			bra 	_FLBCLoop
.89cd					_FLBCInQuotes:
.89cd	e8		inx				inx 								; advance
.89ce	bd 06 08	lda $0806,x			lda 	lineBuffer,x 				; get next
.89d1	f0 07		beq $89da			beq 	_FLBCExit 					; exit on EOS
.89d3	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.89d5	d0 f6		bne $89cd			bne 	_FLBCInQuotes
.89d7	e8		inx				inx 								; skip over it
.89d8	80 d9		bra $89b3			bra 	_FLBCLoop
.89da					_FLBCExit:
.89da	60		rts				rts
.89db					TokeniseExtractLineNumber:
.89db	ad 08 07	lda $0708			lda 	tokenLineNumber+1 			; push current value on stack
.89de	48		pha				pha
.89df	ad 07 07	lda $0707			lda 	tokenLineNumber
.89e2	48		pha				pha
.89e3	20 19 8a	jsr $8a19			jsr 	_TELNTimes2 				; line # x 4
.89e6	20 19 8a	jsr $8a19			jsr 	_TELNTimes2 				; line # x 2
.89e9	18		clc				clc 								; add stacked value
.89ea	68		pla				pla
.89eb	6d 07 07	adc $0707			adc 	tokenLineNumber
.89ee	8d 07 07	sta $0707			sta 	tokenLineNumber
.89f1	68		pla				pla
.89f2	6d 08 07	adc $0708			adc 	tokenLineNumber+1
.89f5	8d 08 07	sta $0708			sta 	tokenLineNumber+1 			; line # x 5
.89f8	20 19 8a	jsr $8a19			jsr 	_TELNTimes2 				; line # x 10
.89fb	bd 06 08	lda $0806,x			lda 	lineBuffer,x 				; get and consume character
.89fe	e8		inx				inx
.89ff	29 0f		and #$0f			and 	#15 						; add to line #
.8a01	18		clc				clc
.8a02	6d 07 07	adc $0707			adc 	tokenLineNumber
.8a05	8d 07 07	sta $0707			sta 	tokenLineNumber
.8a08	90 03		bcc $8a0d			bcc 	_TLENNoCarry
.8a0a	ee 08 07	inc $0708			inc 	tokenLineNumber+1
.8a0d					_TLENNoCarry:
.8a0d	bd 06 08	lda $0806,x			lda 	lineBuffer,x 				; more digits ?
.8a10	c9 30		cmp #$30			cmp 	#'0'
.8a12	90 04		bcc $8a18			bcc 	_TLENExit
.8a14	c9 3a		cmp #$3a			cmp 	#'9'+1
.8a16	90 c3		bcc $89db			bcc 	TokeniseExtractLineNumber
.8a18					_TLENExit:
.8a18	60		rts				rts
.8a19					_TELNTimes2:
.8a19	0e 07 07	asl $0707			asl 	tokenLineNumber
.8a1c	2e 08 07	rol $0708			rol 	tokenLineNumber+1
.8a1f	60		rts				rts
.8a20					TokeniseWriteByte:
.8a20	da		phx				phx
.8a21	ae 06 07	ldx $0706			ldx 	tokenOffset 				; next slot to write to
.8a24	9d 06 07	sta $0706,x			sta 	tokenOffset,x 				; write byte out
.8a27	ee 06 07	inc $0706			inc 	tokenOffset 				; advance slot.
.8a2a	fa		plx				plx
.8a2b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./tokeniser/variablerecord.asm

.8a2c					CheckCreateVariableRecord:
.8a2c	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.8a2e	85 36		sta $36				sta 	0+zTemp0
.8a30	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.8a32	85 37		sta $37				sta 	1+zTemp0
.8a34	20 45 86	jsr $8645			jsr 	VariableOpen 				; make variable space available
.8a37					_CCVSearch:
.8a37	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.8a39	f0 2c		beq $8a67			beq 	_CCVFail
.8a3b	a0 01		ldy #$01			ldy 	#1 							; read the hash
.8a3d	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.8a3f	cd 03 07	cmp $0703			cmp 	identHash
.8a42	d0 16		bne $8a5a			bne 	_CCVNext
.8a44	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.8a46	ae 00 07	ldx $0700			ldx 	identStart
.8a49					_CCVCompare:
.8a49	bd 06 08	lda $0806,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.8a4c	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.8a4e	e8		inx				inx 								; advance pointers
.8a4f	c8		iny				iny
.8a50	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.8a51	d0 07		bne $8a5a			bne 	_CCVNext  					; didn't match go to next.
.8a53	90 f4		bcc $8a49			bcc 	_CCVCompare 				; not finished yet.
.8a55	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; matched whole thing ?
.8a58	f0 41		beq $8a9b			beq 	_CCVFound 					; yes, we were successful
.8a5a					_CCVNext:
.8a5a	18		clc				clc
.8a5b	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.8a5d	65 36		adc $36				adc 	zTemp0
.8a5f	85 36		sta $36				sta 	zTemp0
.8a61	90 d4		bcc $8a37			bcc 	_CCVSearch
.8a63	e6 37		inc $37				inc 	zTemp0+1
.8a65	80 d0		bra $8a37			bra 	_CCVSearch
.8a67					_CCVFail:
.8a67	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.8a69	ad 03 07	lda $0703			lda 	identHash
.8a6c	91 36		sta ($36),y			sta 	(zTemp0),y
.8a6e	c8		iny				iny 								; offset 2 is the type byte
.8a6f	ad 04 07	lda $0704			lda 	identTypeByte
.8a72	91 36		sta ($36),y			sta 	(zTemp0),y
.8a74	c8		iny				iny
.8a75					_CCVData:
.8a75	a9 00		lda #$00			lda 	#0 							; erase data 3-7
.8a77	91 36		sta ($36),y			sta 	(zTemp0),y
.8a79	c8		iny				iny
.8a7a	c0 08		cpy #$08			cpy 	#8
.8a7c	90 f7		bcc $8a75			bcc 	_CCVData
.8a7e	ae 00 07	ldx $0700			ldx 	identStart 					; copy name into 8 on.
.8a81					_CCVCopyName:
.8a81	bd 06 08	lda $0806,x			lda 	lineBuffer,x
.8a84	91 36		sta ($36),y			sta 	(zTemp0),y
.8a86	e8		inx				inx
.8a87	c8		iny				iny
.8a88	ec 02 07	cpx $0702			cpx 	identTypeEnd
.8a8b	d0 f4		bne $8a81			bne 	_CCVCopyName
.8a8d	98		tya				tya 								; patch offset
.8a8e	92 36		sta ($36)			sta 	(zTemp0)
.8a90	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.8a92	91 36		sta ($36),y			sta 	(zTemp0),y
.8a94	88		dey				dey
.8a95	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.8a97	09 80		ora #$80			ora 	#$80
.8a99	91 36		sta ($36),y			sta 	(zTemp0),y
.8a9b					_CCVFound:
.8a9b	20 46 86	jsr $8646			jsr 	VariableClose 				; map out variables, perhaps.
.8a9e	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.8aa0	38		sec				sec
.8aa1	e9 10		sbc #$10			sbc 	#(VariableSpace >> 8) 		; offset from the start
.8aa3	09 40		ora #$40			ora 	#$40 						; make it a writeable token
.8aa5	20 20 8a	jsr $8a20			jsr 	TokeniseWriteByte
.8aa8	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.8aaa	20 20 8a	jsr $8a20			jsr 	TokeniseWriteByte
.8aad	60		rts				rts

;******  Return to file: _basic.asm


;******  End of listing
