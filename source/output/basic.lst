
; 64tass Turbo Assembler Macro V1.56.2625 listing file
; 64tass -D AUTORUN=1 -q -b -Wall -Wno-portable -c -L output/basic.lst -l output/basic.lbl -Wall -o basic.rom _basic.asm
; Thu Oct  6 08:50:37 2022

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=1					AUTORUN=1

;******  Processing input file: _basic.asm


;******  Processing file: ./common/aa.system/01common.inc

=$30					ZeroPageMandatory = $30
=$600					ZeroPagePreference = $600
=$700					MemoryStorage = $700
=$2000					BasicStart = $2000
=$8000					CodeStart = $8000
=$1000					VariableSpace = $1000
=$2000					EndVariableSpace = $2000
=8					MathStackSize = 8
=512					BasicStackSize = 512
=3584					BasicStackBase = $1000-BasicStackSize
=80					MaxLineSize = 80

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/04data.inc

.0030					codePtr:
>0030							.fill 	4
.0034					basicStack:
>0034							.fill 	2
.0036					zTemp0:
>0036							.fill 	2
.0038					zTemp1:
>0038							.fill 	2
.003a					zTemp2:
>003a							.fill 	2
.003c					zsTemp:
>003c							.fill 	2
.003e					zaTemp:
>003e							.fill 	2
=$30					safePtr = codePtr 							; minimise direct tinkering
=$80					NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20					NSBIsReference = $20 						; bit 5 : is a reference
=$10					NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18					NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03					NSBRefMask = $03 							; bits 0,1 : Bytes of reference, -1 (e.g. 00 = 1 byte, 11 = 4 bytes)
=$04					NSBIsArray = $04
=$00					NSTInteger = $00 							; base types for bits 3..4
=$08					NSTFloat = $08
=$10					NSTString = $10
=$18					NSTProcedure = $18
.0600					NSStatus:
>0600							.fill 	MathStackSize
.0608					NSMantissa0:
>0608							.fill 	MathStackSize 				; (this is my integer mantissa system)
.0610					NSMantissa1:
>0610							.fill 	MathStackSize
.0618					NSMantissa2:
>0618							.fill 	MathStackSize
.0620					NSMantissa3:
>0620							.fill 	MathStackSize
.0628					NSExponent:
>0628							.fill 	MathStackSize
.0700					identStart:
>0700							.fill 	1
.0701					identTypeStart:
>0701							.fill 	1
.0702					identTypeEnd:
>0702							.fill 	1
.0703					identHash:
>0703							.fill 	1
.0704					identTypeByte:
>0704							.fill 	1	 						; (see tokenising.pdf)
.0705					encodeState:
>0705							.fill 	1
.0706					digitTemp:
>0706							.fill 	1
.0707					decimalCount:
>0707							.fill 	1
.0708					randomSeed:
>0708							.fill 	4
.070c					lowMemPtr:
>070c							.fill 	2
.070e					stringMemory:
>070e							.fill 	2
.0710					stringInitialised:
>0710							.fill 	1
.0711					stringTempPointer:
>0711							.fill 	2
.0713					breakCheck:
>0713							.fill 	1
.0714					decimalPlaces:
>0714							.fill 	1
.0715					dbOffset:
>0715							.fill 	1
.0716					lastParameter:
>0716							.fill 	1
.0717					dataPointer:
>0717							.fill 	5
.071c					inDataStatement:
>071c							.fill 	1
.071d					tbOffset:
>071d							.fill 	1
.071e					AssemblerAddress:
>071e							.fill 	2
.0720					AssemblerControl:
>0720							.fill 	1
.0721					ParamStart:
>0721							.fill 	2
.0723					IsGroup1:
>0723							.fill 	1
.0724					BaseOpcode:
>0724							.fill 	1
.0725					ModeMask:
>0725							.fill 	1
.0726					tokenOffset:
>0726							.fill 	1
.0727					tokenLineNumber:
>0727							.fill 	2
.0729					tokenBuffer:
>0729							.fill 	253
.0826					lineBuffer:
>0826							.fill 	MaxLineSize+1
.0877					numberBuffer:
>0877							.fill 	34
.0899					decimalBuffer:
>0899							.fill 	16

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/constants.inc

=$80					AM_ISZP = $80
=$40					AM_ISG1 = $40
=$20					AM_ISG2 = $20
=224					AM_IMMEDIATE = AM_ISZP+AM_ISG1+AM_ISG2+$00
=228					AM_ZEROPAGE = AM_ISZP+AM_ISG1+AM_ISG2+$04
=40					AM_ACC = AM_ISG2+$08
=108					AM_ABS = AM_ISG1+AM_ISG2+$0C
=208					AM_INDY = AM_ISZP+AM_ISG1+$10
=244					AM_ZEROX = AM_ISZP+AM_ISG1+AM_ISG2+$14
=120					AM_ABSY = AM_ISG1+AM_ISG2+$18
=124					AM_ABSX = AM_ISG1+AM_ISG2+$1C
=209					AM_IND = AM_ISZP+AM_ISG1+$11
=$80					AM_ZEROY = AM_ISZP
=$01					AM_INDABS = $01
=$02					AM_INDABSX = $02
=192					AM_INDX = AM_ISZP+AM_ISG1+$00

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/handlers.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.inc

=1					ERRID_BREAK = 1
=2					ERRID_SYNTAX = 2
=3					ERRID_DIVZERO = 3
=4					ERRID_RANGE = 4
=5					ERRID_TYPE = 5
=6					ERRID_MEMORY = 6
=7					ERRID_ARGUMENT = 7
=8					ERRID_STOP = 8
=9					ERRID_STRING = 9
=10					ERRID_ASSERT = 10
=11					ERRID_DATA = 11
=12					ERRID_NOTDONE = 12
=13					ERRID_LINE = 13
=14					ERRID_GOSUB = 14
=15					ERRID_REPEAT = 15
=16					ERRID_WHILE = 16
=17					ERRID_FOR = 17
=18					ERRID_STACK = 18
=19					ERRID_STRUCT = 19
=20					ERRID_PROC = 20
=21					ERRID_REDEFINE = 21
=22					ERRID_ARRAYSIZE = 22
=23					ERRID_ARRAYIDX = 23

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst.inc

=$00					KWD_LESSLESS                         = $00; $00 <<
=$01					KWD_LESSEQUAL                        = $01; $01 <=
=$02					KWD_LESSGREATER                      = $02; $02 <>
=$03					KWD_PLINGPLING3                      = $03; $03 !!3
=$04					KWD_GREATERLESS                      = $04; $04 ><
=$05					KWD_GREATEREQUAL                     = $05; $05 >=
=$06					KWD_GREATERGREATER                   = $06; $06 >>
=$07					KWD_PLINGPLING7                      = $07; $07 !!7
=$08					KWD_PLINGPLING8                      = $08; $08 !!8
=$09					KWD_PLINGPLING9                      = $09; $09 !!9
=$0a					KWD_PLINGPLING10                     = $0a; $0a !!10
=$0b					KWD_PLINGPLING11                     = $0b; $0b !!11
=$0c					KWD_PLINGPLING12                     = $0c; $0c !!12
=$0d					KWD_PLINGPLING13                     = $0d; $0d !!13
=$0e					KWD_PLINGPLING14                     = $0e; $0e !!14
=$0f					KWD_PLINGPLING15                     = $0f; $0f !!15
=$10					KWD_AT                               = $10; $10 @
=$11					KWD_PLINGPLING17                     = $11; $11 !!17
=$12					KWD_PLINGPLING18                     = $12; $12 !!18
=$13					KWD_LSQPAREN                         = $13; $13 [
=$14					KWD_BACKSLASH                        = $14; $14 \
=$15					KWD_RSQPAREN                         = $15; $15 ]
=$16					KWD_HAT                              = $16; $16 ^
=$17					KWD_UNDERSCORE                       = $17; $17 _
=$18					KWD_BQUOTE                           = $18; $18 `
=$19					KWD_PLINGPLING25                     = $19; $19 !!25
=$1a					KWD_PLINGPLING26                     = $1a; $1a !!26
=$1b					KWD_LCURLY                           = $1b; $1b {
=$1c					KWD_BAR                              = $1c; $1c |
=$1d					KWD_RCURLY                           = $1d; $1d }
=$1e					KWD_TILDE                            = $1e; $1e ~
=$21					KWD_PLING                            = $21; $21 !
=$22					KWD_DQUOTE                           = $22; $22 "
=$23					KWD_HASH                             = $23; $23 #
=$24					KWD_DOLLAR                           = $24; $24 $
=$25					KWD_PERCENT                          = $25; $25 %
=$26					KWD_AMPERSAND                        = $26; $26 &
=$27					KWD_QUOTE                            = $27; $27 '
=$28					KWD_LPAREN                           = $28; $28 (
=$29					KWD_RPAREN                           = $29; $29 )
=$2a					KWD_STAR                             = $2a; $2a *
=$2b					KWD_PLUS                             = $2b; $2b +
=$2c					KWD_COMMA                            = $2c; $2c ,
=$2d					KWD_MINUS                            = $2d; $2d -
=$2e					KWD_PERIOD                           = $2e; $2e .
=$2f					KWD_SLASH                            = $2f; $2f /
=$30					KWD_0                                = $30; $30 0
=$31					KWD_1                                = $31; $31 1
=$32					KWD_2                                = $32; $32 2
=$33					KWD_3                                = $33; $33 3
=$34					KWD_4                                = $34; $34 4
=$35					KWD_5                                = $35; $35 5
=$36					KWD_6                                = $36; $36 6
=$37					KWD_7                                = $37; $37 7
=$38					KWD_8                                = $38; $38 8
=$39					KWD_9                                = $39; $39 9
=$3a					KWD_COLON                            = $3a; $3a :
=$3b					KWD_SEMICOLON                        = $3b; $3b ;
=$3c					KWD_LESS                             = $3c; $3c <
=$3d					KWD_EQUAL                            = $3d; $3d =
=$3e					KWD_GREATER                          = $3e; $3e >
=$3f					KWD_QMARK                            = $3f; $3f ?
=$83					KWD_ABSLPAREN                        = $83; $83 ABS(
=$84					KWD_ALLOCLPAREN                      = $84; $84 ALLOC(
=$85					KWD_ASCLPAREN                        = $85; $85 ASC(
=$86					KWD_CHRDOLLARLPAREN                  = $86; $86 CHR$(
=$87					KWD_FALSE                            = $87; $87 FALSE
=$88					KWD_FRACLPAREN                       = $88; $88 FRAC(
=$89					KWD_INTLPAREN                        = $89; $89 INT(
=$8a					KWD_ISVALLPAREN                      = $8a; $8a ISVAL(
=$8b					KWD_LEFTDOLLARLPAREN                 = $8b; $8b LEFT$(
=$8c					KWD_LENLPAREN                        = $8c; $8c LEN(
=$8d					KWD_MIDDOLLARLPAREN                  = $8d; $8d MID$(
=$8e					KWD_NOTLPAREN                        = $8e; $8e NOT(
=$8f					KWD_RIGHTDOLLARLPAREN                = $8f; $8f RIGHT$(
=$90					KWD_RNDLPAREN                        = $90; $90 RND(
=$91					KWD_SGNLPAREN                        = $91; $91 SGN(
=$92					KWD_SPCLPAREN                        = $92; $92 SPC(
=$93					KWD_STRDOLLARLPAREN                  = $93; $93 STR$(
=$94					KWD_TRUE                             = $94; $94 TRUE
=$95					KWD_VALLPAREN                        = $95; $95 VAL(
=$96					KWD_FOR                              = $96; $96 FOR
=$97					KWD_IF                               = $97; $97 IF
=$98					KWD_PROC                             = $98; $98 PROC
=$99					KWD_REPEAT                           = $99; $99 REPEAT
=$9a					KWD_WHILE                            = $9a; $9a WHILE
=$9b					KWD_ENDIF                            = $9b; $9b ENDIF
=$9c					KWD_ENDPROC                          = $9c; $9c ENDPROC
=$9d					KWD_NEXT                             = $9d; $9d NEXT
=$9e					KWD_THEN                             = $9e; $9e THEN
=$9f					KWD_UNTIL                            = $9f; $9f UNTIL
=$a0					KWD_WEND                             = $a0; $a0 WEND
=$a1					KWD_CALL                             = $a1; $a1 CALL
=$a2					KWD_CLS                              = $a2; $a2 CLS
=$a3					KWD_DATA                             = $a3; $a3 DATA
=$a4					KWD_DIM                              = $a4; $a4 DIM
=$a5					KWD_DOWNTO                           = $a5; $a5 DOWNTO
=$a6					KWD_ELSE                             = $a6; $a6 ELSE
=$a7					KWD_GOSUB                            = $a7; $a7 GOSUB
=$a8					KWD_GOTO                             = $a8; $a8 GOTO
=$a9					KWD_LET                              = $a9; $a9 LET
=$aa					KWD_LOCAL                            = $aa; $aa LOCAL
=$ab					KWD_PRINT                            = $ab; $ab PRINT
=$ac					KWD_READ                             = $ac; $ac READ
=$ad					KWD_REM                              = $ad; $ad REM
=$ae					KWD_RETURN                           = $ae; $ae RETURN
=$af					KWD_TO                               = $af; $af TO

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst0.inc

=$80					KWC_EOL = $80
=$ff					KWC_STRING = $FF
=$fe					KWC_HEXCONST = $FE
=$96					KWC_FIRST_STRUCTURE = $96
=$9b					KWC_FIRST_STRUCTURE_DEC = $9b
=$a0					KWC_LAST_STRUCTURE = $a0
=$83					KWC_FIRST_UNARY = $83
=$95					KWC_LAST_UNARY = $95

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/stack.inc

=$e0					STK_GOSUB = $E0
=$d0					STK_FOR = $D0
=$c0					STK_REPEAT = $C0
=$b0					STK_PROC = $B0
=$a0					STK_WHILE = $A0
=$01					STK_LOCALN = $01
=$02					STK_LOCALS = $02

;******  Return to file: _basic.asm


;******  Processing file: ./variants/memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/00start.asm

.8000	a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.8002	9a		txs				txs
.8003	a2 80		ldx #$80			ldx 	#(Prompt >> 8) 				; prompt
.8005	a9 13		lda #$13			lda 	#(Prompt & $FF)
.8007	20 57 8d	jsr $8d57			jsr 	PrintStringXA
.800a	20 c0 88	jsr $88c0			jsr 	NewCommand 					; erase current program
.800d	20 11 99	jsr $9911			jsr 	BackloadProgram
.8010	4c 3b 8a	jmp $8a3b			jmp 	CommandRun
>8013	0d 0d 2a 2a 2a 20 46 32		Prompt:	.text 	13,13,"*** F256 Junior SuperBASIC ***",13,13
>801b	35 36 20 4a 75 6e 69 6f 72 20 53 75 70 65 72 42
>802b	41 53 49 43 20 2a 2a 2a 0d 0d
>8035	57 72 69 74 74 65 6e 20				.text 	"Written by Paul Robson 2022.",13,13
>803d	62 79 20 50 61 75 6c 20 52 6f 62 73 6f 6e 20 32
>804d	30 32 32 2e 0d 0d

;******  Processing file: ./common/aa.system/../generated/timestamp.asm

>8053	42 75 69 6c 74 20 54 68			.text "Built Thursday 06-Oct-2022. Build 212."
>805b	75 72 73 64 61 79 20 30 36 2d 4f 63 74 2d 32 30
>806b	32 32 2e 20 42 75 69 6c 64 20 32 31 32 2e

;******  Return to file: ./common/aa.system/00start.asm

>8079	0d 0d 00					.byte 	13,13,0
>807c							.align 2

;******  Processing file: ./common/aa.system/../generated/vectors.dat

.807c					VectorSetPunc:
>807c	a8 8e					.word	ShiftLeft                        ; $00 <<
>807e	a2 8d					.word	BinaryCompareLessEqual           ; $01 <=
>8080	98 8d					.word	BinaryCompareNotEqual            ; $02 <>
>8082	9a a5					.word	SyntaxError                      ; $03 !!3
>8084	9a a5					.word	SyntaxError                      ; $04 ><
>8086	ac 8d					.word	BinaryCompareGreaterEqual        ; $05 >=
>8088	ab 8e					.word	ShiftRight                       ; $06 >>
>808a	9a a5					.word	SyntaxError                      ; $07 !!7
>808c	9a a5					.word	SyntaxError                      ; $08 !!8
>808e	9a a5					.word	SyntaxError                      ; $09 !!9
>8090	9a a5					.word	SyntaxError                      ; $0a !!10
>8092	9a a5					.word	SyntaxError                      ; $0b !!11
>8094	9a a5					.word	SyntaxError                      ; $0c !!12
>8096	9a a5					.word	SyntaxError                      ; $0d !!13
>8098	9a a5					.word	SyntaxError                      ; $0e !!14
>809a	9a a5					.word	SyntaxError                      ; $0f !!15
>809c	9a a5					.word	SyntaxError                      ; $10 @
>809e	9a a5					.word	SyntaxError                      ; $11 !!17
>80a0	9a a5					.word	SyntaxError                      ; $12 !!18
>80a2	9a a5					.word	SyntaxError                      ; $13 [
>80a4	d1 9f					.word	IntegerDivide                    ; $14 \
>80a6	9a a5					.word	SyntaxError                      ; $15 ]
>80a8	31 90					.word	EorInteger                       ; $16 ^
>80aa	9a a5					.word	SyntaxError                      ; $17 _
>80ac	9a a5					.word	SyntaxError                      ; $18 `
>80ae	9a a5					.word	SyntaxError                      ; $19 !!25
>80b0	9a a5					.word	SyntaxError                      ; $1a !!26
>80b2	9a a5					.word	SyntaxError                      ; $1b {
>80b4	eb 8f					.word	OraInteger                       ; $1c |
>80b6	9a a5					.word	SyntaxError                      ; $1d }
>80b8	9a a5					.word	SyntaxError                      ; $1e ~
>80ba	9a a5					.word	SyntaxError                      ; $1f [7m<7F>[m
>80bc	9a a5					.word	SyntaxError                      ; $20
>80be	77 90					.word	WordIndirect                     ; $21 !
>80c0	9a a5					.word	SyntaxError                      ; $22 "
>80c2	9a a5					.word	SyntaxError                      ; $23 #
>80c4	9a a5					.word	SyntaxError                      ; $24 $
>80c6	1e a0					.word	IntegerModulus                   ; $25 %
>80c8	a5 8f					.word	AndInteger                       ; $26 &
>80ca	9a a5					.word	SyntaxError                      ; $27 '
>80cc	9a a5					.word	SyntaxError                      ; $28 (
>80ce	9a a5					.word	SyntaxError                      ; $29 )
>80d0	93 a0					.word	MulInteger                       ; $2a *
>80d2	3f 8f					.word	AddInteger                       ; $2b +
>80d4	9a a5					.word	SyntaxError                      ; $2c ,
>80d6	7a 8f					.word	SubInteger                       ; $2d -
>80d8	9a a5					.word	SyntaxError                      ; $2e .
>80da	2a a2					.word	FDivideCommand                   ; $2f /
>80dc	9a a5					.word	SyntaxError                      ; $30 0
>80de	9a a5					.word	SyntaxError                      ; $31 1
>80e0	9a a5					.word	SyntaxError                      ; $32 2
>80e2	9a a5					.word	SyntaxError                      ; $33 3
>80e4	9a a5					.word	SyntaxError                      ; $34 4
>80e6	9a a5					.word	SyntaxError                      ; $35 5
>80e8	9a a5					.word	SyntaxError                      ; $36 6
>80ea	9a a5					.word	SyntaxError                      ; $37 7
>80ec	9a a5					.word	SyntaxError                      ; $38 8
>80ee	9a a5					.word	SyntaxError                      ; $39 9
>80f0	9a a5					.word	SyntaxError                      ; $3a :
>80f2	9a a5					.word	SyntaxError                      ; $3b ;
>80f4	84 8d					.word	BinaryCompareLess                ; $3c <
>80f6	7a 8d					.word	BinaryCompareEqual               ; $3d =
>80f8	8e 8d					.word	BinaryCompareGreater             ; $3e >
>80fa	9e 90					.word	ByteIndirect                     ; $3f ?
.80fc					VectorSet0:
>80fc	a7 8a					.word	EOLCommand                       ; $80 !0:EOF
>80fe	b4 8a					.word	Shift1Command                    ; $81 !1:SH1
>8100	bc 8a					.word	Shift2Command                    ; $82 !2:SH2
>8102	70 a3					.word	AbsUnary                         ; $83 ABS(
>8104	68 95					.word	AllocUnary                       ; $84 ALLOC(
>8106	80 a3					.word	AscUnary                         ; $85 ASC(
>8108	23 96					.word	ChrUnary                         ; $86 CHR$(
>810a	76 8d					.word	UnaryFalse                       ; $87 FALSE
>810c	8d a3					.word	FracUnary                        ; $88 FRAC(
>810e	a3 a3					.word	IntUnary                         ; $89 INT(
>8110	f9 a3					.word	IsValUnary                       ; $8a ISVAL(
>8112	fd 96					.word	Unary_Left                       ; $8b LEFT$(
>8114	b5 a3					.word	LenUnary                         ; $8c LEN(
>8116	27 97					.word	Unary_Mid                        ; $8d MID$(
>8118	c0 95					.word	Unary_Not                        ; $8e NOT(
>811a	0d 97					.word	Unary_Right                      ; $8f RIGHT$(
>811c	d6 95					.word	Unary_Rnd                        ; $90 RND(
>811e	cf a3					.word	SgnUnary                         ; $91 SGN(
>8120	35 96					.word	SpcUnary                         ; $92 SPC(
>8122	50 96					.word	Unary_Str                        ; $93 STR$(
>8124	6a 8d					.word	UnaryTrue                        ; $94 TRUE
>8126	ef a3					.word	ValUnary                         ; $95 VAL(
>8128	f1 85					.word	ForCommand                       ; $96 FOR
>812a	3e 87					.word	IfCommand                        ; $97 IF
>812c	c4 8a					.word	Unused1                          ; $98 PROC
>812e	e7 89					.word	Command_REPEAT                   ; $99 REPEAT
>8130	cf 8c					.word	Command_WHILE                    ; $9a WHILE
>8132	67 87					.word	EndIf                            ; $9b ENDIF
>8134	aa 9f					.word	Command_ENDPROC                  ; $9c ENDPROC
>8136	ab 86					.word	NextCommand                      ; $9d NEXT
>8138	c4 8a					.word	Unused4                          ; $9e THEN
>813a	f0 89					.word	Command_UNTIL                    ; $9f UNTIL
>813c	f0 8c					.word	Command_WEND                     ; $a0 WEND
>813e	c6 84					.word	CallCommand                      ; $a1 CALL
>8140	9a a5					.word	SyntaxError                      ; $a2 CLS
>8142	29 85					.word	Command_Data                     ; $a3 DATA
>8144	31 85					.word	DimCommand                       ; $a4 DIM
>8146	c4 8a					.word	Unused3                          ; $a5 DOWNTO
>8148	60 87					.word	ElseCode                         ; $a6 ELSE
>814a	04 87					.word	Command_GOSUB                    ; $a7 GOSUB
>814c	22 87					.word	GotoCommand                      ; $a8 GOTO
>814e	68 87					.word	LetCommand                       ; $a9 LET
>8150	3c 88					.word	Command_LOCAL                    ; $aa LOCAL
>8152	ca 88					.word	Command_Print                    ; $ab PRINT
>8154	81 89					.word	Command_Read                     ; $ac READ
>8156	da 89					.word	RemCommand                       ; $ad REM
>8158	14 87					.word	Command_RETURN                   ; $ae RETURN
>815a	c4 8a					.word	Unused2                          ; $af TO
.815c					VectorSet1:
>815c	9a a5					.word	SyntaxError                      ; $80 !0:EOF
>815e	9a a5					.word	SyntaxError                      ; $81 !1:SH1
>8160	9a a5					.word	SyntaxError                      ; $82 !2:SH2
>8162	97 84					.word	AssembleCommand                  ; $83 ASSEMBLE
>8164	b6 84					.word	AssertCommand                    ; $84 ASSERT
>8166	d4 84					.word	ClearCommand                     ; $85 CLEAR
>8168	ee 85					.word	EndCommand                       ; $86 END
>816a	a1 87					.word	Command_List                     ; $87 LIST
>816c	c0 88					.word	NewCommand                       ; $88 NEW
>816e	09 8a					.word	Command_Restore                  ; $89 RESTORE
>8170	3b 8a					.word	CommandRUN                       ; $8a RUN
>8172	c7 8a					.word	StopCommand                      ; $8b STOP
.8174					VectorSet2:
>8174	9a a5					.word	SyntaxError                      ; $80 !0:EOF
>8176	9a a5					.word	SyntaxError                      ; $81 !1:SH1
>8178	9a a5					.word	SyntaxError                      ; $82 !2:SH2
>817a	5d a4					.word	Assemble_adc                     ; $83 ADC
>817c	55 a4					.word	Assemble_and                     ; $84 AND
>817e	71 a4					.word	Assemble_asl                     ; $85 ASL
>8180	db a4					.word	Assemble_bcc                     ; $86 BCC
>8182	df a4					.word	Assemble_bcs                     ; $87 BCS
>8184	e7 a4					.word	Assemble_beq                     ; $88 BEQ
>8186	9e a4					.word	Assemble_bit                     ; $89 BIT
>8188	cf a4					.word	Assemble_bmi                     ; $8a BMI
>818a	e3 a4					.word	Assemble_bne                     ; $8b BNE
>818c	cb a4					.word	Assemble_bpl                     ; $8c BPL
>818e	eb a4					.word	Assemble_bra                     ; $8d BRA
>8190	ef a4					.word	Assemble_brk                     ; $8e BRK
>8192	d3 a4					.word	Assemble_bvc                     ; $8f BVC
>8194	d7 a4					.word	Assemble_bvs                     ; $90 BVS
>8196	f7 a4					.word	Assemble_clc                     ; $91 CLC
>8198	4b a5					.word	Assemble_cld                     ; $92 CLD
>819a	0b a5					.word	Assemble_cli                     ; $93 CLI
>819c	3b a5					.word	Assemble_clv                     ; $94 CLV
>819e	69 a4					.word	Assemble_cmp                     ; $95 CMP
>81a0	b2 a4					.word	Assemble_cpx                     ; $96 CPX
>81a2	ad a4					.word	Assemble_cpy                     ; $97 CPY
>81a4	8f a4					.word	Assemble_dec                     ; $98 DEC
>81a6	47 a5					.word	Assemble_dex                     ; $99 DEX
>81a8	23 a5					.word	Assemble_dey                     ; $9a DEY
>81aa	59 a4					.word	Assemble_eor                     ; $9b EOR
>81ac	94 a4					.word	Assemble_inc                     ; $9c INC
>81ae	53 a5					.word	Assemble_inx                     ; $9d INX
>81b0	43 a5					.word	Assemble_iny                     ; $9e INY
>81b2	c6 a4					.word	Assemble_jmp                     ; $9f JMP
>81b4	c1 a4					.word	Assemble_jsr                     ; $a0 JSR
>81b6	65 a4					.word	Assemble_lda                     ; $a1 LDA
>81b8	8a a4					.word	Assemble_ldx                     ; $a2 LDX
>81ba	a8 a4					.word	Assemble_ldy                     ; $a3 LDY
>81bc	7b a4					.word	Assemble_lsr                     ; $a4 LSR
>81be	57 a5					.word	Assemble_nop                     ; $a5 NOP
>81c0	51 a4					.word	Assemble_ora                     ; $a6 ORA
>81c2	07 a5					.word	Assemble_pha                     ; $a7 PHA
>81c4	f3 a4					.word	Assemble_php                     ; $a8 PHP
>81c6	4f a5					.word	Assemble_phx                     ; $a9 PHX
>81c8	0f a5					.word	Assemble_phy                     ; $aa PHY
>81ca	17 a5					.word	Assemble_pla                     ; $ab PLA
>81cc	fb a4					.word	Assemble_plp                     ; $ac PLP
>81ce	5f a5					.word	Assemble_plx                     ; $ad PLX
>81d0	1f a5					.word	Assemble_ply                     ; $ae PLY
>81d2	76 a4					.word	Assemble_rol                     ; $af ROL
>81d4	80 a4					.word	Assemble_ror                     ; $b0 ROR
>81d6	03 a5					.word	Assemble_rti                     ; $b1 RTI
>81d8	13 a5					.word	Assemble_rts                     ; $b2 RTS
>81da	6d a4					.word	Assemble_sbc                     ; $b3 SBC
>81dc	ff a4					.word	Assemble_sec                     ; $b4 SEC
>81de	5b a5					.word	Assemble_sed                     ; $b5 SED
>81e0	1b a5					.word	Assemble_sei                     ; $b6 SEI
>81e2	61 a4					.word	Assemble_sta                     ; $b7 STA
>81e4	85 a4					.word	Assemble_stx                     ; $b8 STX
>81e6	a3 a4					.word	Assemble_sty                     ; $b9 STY
>81e8	99 a4					.word	Assemble_stz                     ; $ba STZ
>81ea	37 a5					.word	Assemble_tax                     ; $bb TAX
>81ec	33 a5					.word	Assemble_tay                     ; $bc TAY
>81ee	bc a4					.word	Assemble_trb                     ; $bd TRB
>81f0	b7 a4					.word	Assemble_tsb                     ; $be TSB
>81f2	3f a5					.word	Assemble_tsx                     ; $bf TSX
>81f4	27 a5					.word	Assemble_txa                     ; $c0 TXA
>81f6	2f a5					.word	Assemble_txs                     ; $c1 TXS
>81f8	2b a5					.word	Assemble_tya                     ; $c2 TYA

;******  Return to file: ./common/aa.system/00start.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/assembler.asm

.81fa					AssembleGroup1:
.81fa	a9 ff		lda #$ff			lda 	#$FF
.81fc	8d 25 07	sta $0725			sta 	ModeMask 					; initialise the mode mask - all for all
.81ff	80 02		bra $8203			bra 	AsmGroup12
.8201					AssembleGroup2:
.8201	a5 00		lda $00				lda 	$00
.8203					AsmGroup12:
.8203	8d 23 07	sta $0723			sta 	IsGroup1 					; save the 'group 1' flag
.8206	68		pla				pla 								; pop the return address to access the information following.
.8207	fa		plx				plx
.8208	20 91 82	jsr $8291			jsr 	AccessParameters 			; get opcode and save as base
.820b	8d 24 07	sta $0724			sta 	BaseOpcode
.820e	ad 23 07	lda $0723			lda 	IsGroup1 					; skip if group 1 as we don't have a complex mask.
.8211	d0 08		bne $821b			bne 	_AG12HaveMask
.8213	a9 02		lda #$02			lda 	#2 							; if group 2 the second parameter is the mask
.8215	20 99 82	jsr $8299			jsr 	GetParameter		 		; e.g. which modes are supported for this operand
.8218	8d 25 07	sta $0725			sta 	ModeMask
.821b					_AG12HaveMask:
.821b	20 d4 83	jsr $83d4			jsr 	TypeAndCalculateOperand 	; get zero page type
.821e	da		phx				phx 								; save found address mode
.821f	20 fd 82	jsr $82fd			jsr 	AssembleModeX
.8222	fa		plx				plx  								; restore address mode
.8223	b0 0b		bcs $8230			bcs 	_AG12Exit
.8225	20 31 82	jsr $8231			jsr 	PromoteToAbsolute  			; promote ZP to ABS and try that
.8228	20 fd 82	jsr $82fd			jsr 	AssembleModeX
.822b	b0 03		bcs $8230			bcs 	_AG12Exit
.822d	4c 9a a5	jmp $a59a			jmp 	SyntaxError 				; can't do either, so must be wrong mode/operand.
.8230					_AG12Exit:
.8230	60		rts				rts
.8231					PromoteToAbsolute:
.8231	a9 6c		lda #$6c			lda 	#AM_ABS 					; lda xx
.8233	e0 e4		cpx #$e4			cpx 	#AM_ZEROPAGE
.8235	f0 19		beq $8250			beq 	_PTADo
.8237	a9 7c		lda #$7c			lda 	#AM_ABSX 					; lda xx,X
.8239	e0 f4		cpx #$f4			cpx 	#AM_ZEROX
.823b	f0 13		beq $8250			beq 	_PTADo
.823d	a9 78		lda #$78			lda 	#AM_ABSY 					; lda xx,Y
.823f	e0 80		cpx #$80			cpx 	#AM_ZEROY
.8241	f0 0d		beq $8250			beq 	_PTADo
.8243	a9 01		lda #$01			lda 	#AM_INDABS 					; lda (xx) (jump)
.8245	e0 d1		cpx #$d1			cpx 	#AM_IND
.8247	f0 07		beq $8250			beq 	_PTADo
.8249	a9 02		lda #$02			lda 	#AM_INDABSX 				; lda (xx,x) (jump)
.824b	e0 c0		cpx #$c0			cpx 	#AM_INDX
.824d	f0 01		beq $8250			beq 	_PTADo
.824f	60		rts				rts
.8250					_PTADo:
.8250	aa		tax				tax
.8251	60		rts				rts
.8252					AssembleGroup3:
.8252	68		pla				pla 								; get parameters, which is just the opcode.
.8253	fa		plx				plx
.8254	20 91 82	jsr $8291			jsr 	AccessParameters 			; get and output opcode
.8257	20 a9 82	jsr $82a9			jsr 	AssemblerWriteByte
.825a	20 38 84	jsr $8438			jsr 	CalculateOperand 			; get a 16 bit operand
.825d	ad 08 06	lda $0608			lda 	NSMantissa0 				; calculate the offset
.8260	38		sec				sec
.8261	ed 1e 07	sbc $071e			sbc 	AssemblerAddress
.8264	48		pha				pha 								; LSB in A
.8265	ad 10 06	lda $0610			lda 	NSMantissa1
.8268	ed 1f 07	sbc $071f			sbc 	AssemblerAddress+1
.826b	aa		tax				tax 								; MSB in X
.826c	68		pla				pla
.826d	18		clc				clc 								; $80 to easy check $80-$7F, plus 1 for offset error
.826e	69 7f		adc #$7f			adc 	#$7F
.8270	90 01		bcc $8273			bcc 	_AG3NoCarry
.8272	e8		inx				inx
.8273					_AG3NoCarry:
.8273	38		sec				sec 								; fix back and write out anyways.
.8274	e9 80		sbc #$80			sbc 	#$80
.8276	20 a9 82	jsr $82a9			jsr 	AssemblerWriteByte
.8279	e0 00		cpx #$00			cpx 	#0 							; was it in range
.827b	f0 0a		beq $8287			beq 	_AG3Exit
.827d	ad 20 07	lda $0720			lda 	AssemblerControl 			; are we allowing bad values ?
.8280	29 01		and #$01			and 	#1
.8282	f0 03		beq $8287			beq 	_AG3Exit
.8284	4c 9f a5	jmp $a59f			jmp 	RangeError 					; no, branch is out of range
.8287					_AG3Exit:
.8287	60		rts				rts
.8288					AssembleGroup4:
.8288	68		pla				pla 								; pop address
.8289	fa		plx				plx
.828a	20 91 82	jsr $8291			jsr 	AccessParameters 			; access and get first
.828d	20 a9 82	jsr $82a9			jsr 	AssemblerWriteByte 			; output it.
.8290	60		rts				rts
.8291					AccessParameters:
.8291	8d 21 07	sta $0721			sta 	ParamStart
.8294	8e 22 07	stx $0722			stx 	ParamStart+1
.8297	a9 01		lda #$01			lda 	#1
.8299					GetParameter:
.8299	5a		phy				phy
.829a	a8		tay				tay
.829b	ad 21 07	lda $0721			lda 	ParamStart
.829e	85 36		sta $36				sta 	zTemp0
.82a0	ad 22 07	lda $0722			lda 	ParamStart+1
.82a3	85 37		sta $37				sta 	zTemp0+1
.82a5	b1 36		lda ($36),y			lda 	(zTemp0),y
.82a7	7a		ply				ply
.82a8	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/aswrite.asm

.82a9					AssemblerWriteByte:
.82a9	48		pha			pha
.82aa	ad 20 07	lda $0720		lda 	AssemblerControl 				; check printing bytes ?
.82ad	29 02		and #$02		and 	#2
.82af	f0 1b		beq $82cc		beq 	_AWBNoPrint
.82b1	ad 1f 07	lda $071f		lda		AssemblerAddress+1 				; print address
.82b4	20 e7 82	jsr $82e7		jsr 	PrintHex
.82b7	ad 1e 07	lda $071e		lda		AssemblerAddress
.82ba	20 e7 82	jsr $82e7		jsr 	PrintHex
.82bd	a9 20		lda #$20		lda 	#' '
.82bf	20 07 a8	jsr $a807		jsr 	EXTPrintCharacter
.82c2	68		pla			pla 									; print byte
.82c3	48		pha			pha
.82c4	20 e7 82	jsr $82e7		jsr 	PrintHex
.82c7	a9 0d		lda #$0d		lda 	#13
.82c9	20 07 a8	jsr $a807		jsr 	EXTPrintCharacter
.82cc					_AWBNoPrint:
.82cc	ad 1e 07	lda $071e		lda		AssemblerAddress				; copy address to zTemp0
.82cf	85 36		sta $36			sta 	zTemp0
.82d1	ad 1f 07	lda $071f		lda		AssemblerAddress+1
.82d4	f0 0e		beq $82e4		beq 	_AWBRange
.82d6	85 37		sta $37			sta 	zTemp0+1
.82d8	68		pla			pla 									; write byte out
.82d9	92 36		sta ($36)		sta 	(zTemp0)
.82db	ee 1e 07	inc $071e		inc 	AssemblerAddress 				; bump address
.82de	d0 03		bne $82e3		bne 	_AWBNoCarry
.82e0	ee 1f 07	inc $071f		inc 	AssemblerAddress+1
.82e3					_AWBNoCarry:
.82e3	60		rts			rts
.82e4					_AWBRange:
.82e4	4c 9f a5	jmp $a59f		jmp 	RangeError
.82e7					PrintHex:
.82e7	48		pha				pha
.82e8	4a		lsr a				lsr 	a
.82e9	4a		lsr a				lsr 	a
.82ea	4a		lsr a				lsr 	a
.82eb	4a		lsr a				lsr 	a
.82ec	20 f0 82	jsr $82f0			jsr 	_PrintNibble
.82ef	68		pla				pla
.82f0					_PrintNibble:
.82f0	29 0f		and #$0f			and 	#15
.82f2	c9 0a		cmp #$0a			cmp 	#10
.82f4	90 02		bcc $82f8			bcc 	_NoShift
.82f6	69 06		adc #$06			adc 	#6
.82f8					_NoShift:
.82f8	69 30		adc #$30			adc 	#48
.82fa	4c 07 a8	jmp $a807			jmp 	EXTPrintCharacter

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/instruction.asm

.82fd					AssembleModeX:
.82fd	5a		phy				phy
.82fe	ad 23 07	lda $0723			lda 	IsGroup1
.8301	f0 17		beq $831a			beq 	_AMXGroup2
.8303	8a		txa				txa 							; is it in group # 1
.8304	29 40		and #$40			and 	#AM_ISG1
.8306	f0 50		beq $8358			beq 	_AMXFail 				; no, give up.
.8308	8a		txa				txa 							; get back.
.8309	29 1f		and #$1f			and 	#$1F 					; this is now the offset.
.830b	e0 e0		cpx #$e0			cpx 	#AM_IMMEDIATE 			; if not immediate, we can continue.
.830d	d0 22		bne $8331			bne 	_AMXHaveInfo
.830f	ad 24 07	lda $0724			lda 	BaseOpcode 				; cannot store immediate.
.8312	c9 81		cmp #$81			cmp 	#$81
.8314	f0 42		beq $8358			beq 	_AMXFail
.8316	a9 08		lda #$08			lda 	#8 						; if immediate we use offset 8.
.8318	80 17		bra $8331			bra 	_AMXHaveInfo 			; odd design decision there.
.831a					_AMXGroup2:
.831a	8a		txa				txa 							; is it in group 2 ?
.831b	29 20		and #$20			and 	#AM_ISG2
.831d	f0 39		beq $8358			beq 	_AMXFail 				; no, give up.
.831f	8a		txa				txa 							; get the offset into Y
.8320	29 1f		and #$1f			and 	#$1F
.8322	4a		lsr a				lsr 	a 						; make it 0-7.
.8323	4a		lsr a				lsr  	a
.8324	a8		tay				tay
.8325	ad 25 07	lda $0725			lda 	ModeMask 				; shift the modemask left so you can check it against the requested offset
.8328					_AMXCheckOkay:
.8328	0a		asl a				asl 	a 						; shift modemask left enough times to check legitimate.
.8329	88		dey				dey
.832a	10 fc		bpl $8328			bpl 	_AMXCheckOkay
.832c	90 2a		bcc $8358			bcc 	_AMXFail 				; not allowed.
.832e	8a		txa				txa  							; get mask back
.832f	29 1f		and #$1f			and 	#$1F
.8331					_AMXHaveInfo:
.8331	e0 00		cpx #$00			cpx 	#$00 					; does it *require* an 8 bit operand
.8333	10 05		bpl $833a			bpl 	_AMXAnySize 			; checking bit 7, the zero page opcode flag.
.8335	ac 10 06	ldy $0610			ldy 	NSMantissa1 			; fail if it is outside range, e.g. the MSB is set.
.8338	d0 1e		bne $8358			bne 	_AMXFail
.833a					_AMXAnySize:
.833a	18		clc				clc 							; add offset to the base opcode
.833b	6d 24 07	adc $0724			adc 	BaseOpcode
.833e					_AMXOutputCode:
.833e	20 a9 82	jsr $82a9			jsr 	AssemblerWriteByte 		; write the opcode out.
.8341	e0 28		cpx #$28			cpx 	#AM_ACC 				; A mode (e.g. ASL A)
.8343	f0 10		beq $8355			beq 	_AMXExit
.8345	ad 08 06	lda $0608			lda 	NSMantissa0 				; write LSB operand
.8348	20 a9 82	jsr $82a9			jsr 	AssemblerWriteByte
.834b	e0 00		cpx #$00			cpx 	#$00 					; zeropage ?
.834d	30 06		bmi $8355			bmi 	_AMXExit
.834f	ad 10 06	lda $0610			lda 	NSMantissa1 			; write MSB operand
.8352	20 a9 82	jsr $82a9			jsr 	AssemblerWriteByte
.8355					_AMXExit:
.8355	7a		ply				ply
.8356	38		sec				sec
.8357	60		rts				rts
.8358					_AMXFail:
.8358	a0 00		ldy #$00			ldy 	#0
.835a					_AMXCheckOddities:
.835a	8a		txa				txa
.835b	d9 83 83	cmp $8383,y			cmp 	ExtraOpcode+2,y 		; match address mode
.835e	d0 16		bne $8376			bne 	_AMXCONext
.8360	b9 81 83	lda $8381,y			lda 	ExtraOpcode+0,y 		; do the base opcodes match
.8363	cd 24 07	cmp $0724			cmp 	BaseOpcode
.8366	d0 0e		bne $8376			bne 	_AMXCONext
.8368	e0 00		cpx #$00			cpx 	#$00 					; requires zero page ?
.836a	10 05		bpl $8371			bpl 	_AMXCONotZero
.836c	ad 10 06	lda $0610			lda 	NSMantissa1
.836f	d0 05		bne $8376			bne 	_AMXCONext
.8371					_AMXCONotZero:
.8371	b9 82 83	lda $8382,y			lda 	ExtraOpcode+1,y 		; get new opcode
.8374	80 c8		bra $833e			bra 	_AMXOutputCode 			; and assemble it
.8376					_AMXCONext:
.8376	c8		iny				iny
.8377	c8		iny				iny
.8378	c8		iny				iny
.8379	b9 81 83	lda $8381,y			lda 	ExtraOpcode+0,y 		; end of table
.837c	d0 dc		bne $835a			bne 	_AMXCheckOddities
.837e					_AMXCOFail:
.837e	7a		ply				ply
.837f	18		clc				clc
.8380	60		rts				rts
.8381					ExtraOpcode:
>8381	40 6c 01					.byte $40,$6c,AM_INDABS 	; jmp
>8384	40 7c 02					.byte $40,$7C,AM_INDABSX 	; jmp
>8387	a2 be 78					.byte $a2,$BE,AM_ABSY 		; ldx
>838a	a2 b6 80					.byte $a2,$B6,AM_ZEROY 		; ldx
>838d	82 96 80					.byte $82,$96,AM_ZEROY 		; stx
>8390	e2 1a 28					.byte $e2,$1a,AM_ACC 		; inc
>8393	c2 3a 28					.byte $c2,$3a,AM_ACC 		; dec
>8396	20 89 e0					.byte $20,$89,AM_IMMEDIATE 	; bit
>8399	60 9c 6c					.byte $60,$9c,AM_ABS 		; stz
>839c	60 9e 7c					.byte $60,$9e,AM_ABSX 		; stz
>839f	00						.byte $00

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/label.asm

.83a0					LabelHere:
.83a0	c8		iny				iny 								; skip .
.83a1	a2 00		ldx #$00			ldx 	#0 							; get a term
.83a3	20 d8 93	jsr $93d8			jsr 	EvaluateTerm 				; get a term
.83a6	ad 00 06	lda $0600			lda 	NSStatus 					; needs to be an integer reference.
.83a9	c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.83ab	d0 24		bne $83d1			bne 	_ALType
.83ad	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy reference address to zTemp0
.83b0	85 36		sta $36				sta 	zTemp0
.83b2	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.83b5	85 37		sta $37				sta 	zTemp0+1
.83b7	5a		phy				phy 								; copy address in.
.83b8	a0 01		ldy #$01			ldy 	#1
.83ba	ad 1e 07	lda $071e			lda	 	AssemblerAddress
.83bd	92 36		sta ($36)			sta 	(zTemp0)
.83bf	ad 1f 07	lda $071f			lda	 	AssemblerAddress+1
.83c2	91 36		sta ($36),y			sta 	(zTemp0),y
.83c4	c8		iny				iny
.83c5	a9 00		lda #$00			lda 	#0
.83c7	91 36		sta ($36),y			sta 	(zTemp0),y
.83c9	c8		iny				iny
.83ca	91 36		sta ($36),y			sta 	(zTemp0),y
.83cc	c8		iny				iny
.83cd	91 36		sta ($36),y			sta 	(zTemp0),y
.83cf	7a		ply				ply
.83d0	60		rts				rts
.83d1					_ALType:
.83d1	4c a4 a5	jmp $a5a4			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/operands.asm

.83d4					TypeAndCalculateOperand:
.83d4	b1 30		lda ($30),y			lda 	(codePtr),y
.83d6	a2 28		ldx #$28			ldx 	#AM_ACC 					; ACC if : or EOL
.83d8	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.83da	f0 5b		beq $8437			beq 	_TACOExit
.83dc	c9 80		cmp #$80			cmp 	#KWC_EOL
.83de	f0 57		beq $8437			beq 	_TACOExit
.83e0	c8		iny				iny
.83e1	a2 e0		ldx #$e0			ldx 	#AM_IMMEDIATE
.83e3	c9 23		cmp #$23			cmp 	#KWD_HASH 					; if hash, then immediate - constant.
.83e5	f0 51		beq $8438			beq 	CalculateOperand
.83e7	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; if ( then check for indirection
.83e9	f0 1f		beq $840a			beq 	_TACOIndirect
.83eb	88		dey				dey 								; undo get of first character
.83ec	20 38 84	jsr $8438			jsr 	CalculateOperand 			; get operand
.83ef	b1 30		lda ($30),y			lda 	(codePtr),y
.83f1	a2 e4		ldx #$e4			ldx 	#AM_ZEROPAGE 				; if not, try zero page (then absolute)
.83f3	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.83f5	d0 40		bne $8437			bne 	_TACOExit
.83f7	c8		iny				iny
.83f8	20 2f 9f	jsr $9f2f			jsr 	TACOCheckXY 				; extract X,Y or 0 (neither) from the variable.
.83fb	a2 f4		ldx #$f4			ldx 	#AM_ZEROX 					; check for X
.83fd	c9 58		cmp #$58			cmp 	#'X'
.83ff	f0 36		beq $8437			beq 	_TACOExit
.8401	a2 80		ldx #$80			ldx 	#AM_ZEROY 					; check for Y
.8403	c9 59		cmp #$59			cmp 	#'Y'
.8405	f0 30		beq $8437			beq 	_TACOExit
.8407					_TACOSyntax:
.8407	4c 9a a5	jmp $a59a			jmp 	SyntaxError
.840a					_TACOIndirect:
.840a	20 38 84	jsr $8438			jsr 	CalculateOperand 			; get the operand
.840d	b1 30		lda ($30),y			lda 	(codePtr),y
.840f	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if , then it must be ,X)
.8411	f0 17		beq $842a			beq 	_TACOIndX
.8413	20 b8 9f	jsr $9fb8			jsr 	CheckRightBracket  			; otherwise must be ) or ),Y
.8416	b1 30		lda ($30),y			lda 	(codePtr),y
.8418	a2 d1		ldx #$d1			ldx 	#AM_IND
.841a	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not comma then exit with (xx)
.841c	d0 19		bne $8437			bne 	_TACOExit
.841e	c8		iny				iny
.841f	20 2f 9f	jsr $9f2f			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.8422	c9 59		cmp #$59			cmp 	#'Y' 						; check Y
.8424	d0 e1		bne $8407			bne 	_TACOSyntax
.8426	a2 d0		ldx #$d0			ldx 	#AM_INDY
.8428	80 0d		bra $8437			bra 	_TACOExit
.842a					_TACOIndX:
.842a	c8		iny				iny
.842b	20 2f 9f	jsr $9f2f			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.842e	c9 58		cmp #$58			cmp 	#'X' 						; check X
.8430	d0 d5		bne $8407			bne 	_TACOSyntax
.8432	20 b8 9f	jsr $9fb8			jsr 	CheckRightBracket			; check )
.8435	a2 c0		ldx #$c0			ldx 	#AM_INDX
.8437					_TACOExit:
.8437	60		rts				rts
.8438					CalculateOperand:
.8438	48		pha				pha
.8439	da		phx				phx
.843a	a2 00		ldx #$00			ldx 	#0 							; get 16 bit integer in Slot 0
.843c	20 dd 97	jsr $97dd			jsr 	Evaluate16BitInteger
.843f	fa		plx				plx
.8440	68		pla				pla
.8441	60		rts				rts
.9f2f					TACOCheckXY:
.9f2f	b1 30		lda ($30),y			lda 	(codePtr),y
.9f31	29 c0		and #$c0			and 	#$C0 						; check it is an identifier reference.
.9f33	c9 40		cmp #$40			cmp 	#$40
.9f35	d0 21		bne $9f58			bne 	_TCXYFail
.9f37	b1 30		lda ($30),y			lda 	(codePtr),y
.9f39	18		clc				clc
.9f3a	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.9f3c	85 37		sta $37				sta 	zTemp0+1
.9f3e	c8		iny				iny
.9f3f	b1 30		lda ($30),y			lda 	(codePtr),y
.9f41	c8		iny				iny
.9f42	85 36		sta $36				sta 	zTemp0
.9f44	5a		phy				phy 								; save position
.9f45	a0 02		ldy #$02			ldy 	#2 							; type is integer ?
.9f47	b1 36		lda ($36),y			lda 	(zTemp0),y
.9f49	d0 0c		bne $9f57			bne 	_TCXYPopFail
.9f4b	a0 08		ldy #$08			ldy 	#8 							; get first character, should have bit 7 set as also last.
.9f4d	b1 36		lda ($36),y			lda 	(zTemp0),y
.9f4f	c9 d8		cmp #$d8			cmp 	#'X'+$80 					; should be X or Y
.9f51	f0 08		beq $9f5b			beq 	_TCXYFound
.9f53	c9 d9		cmp #$d9			cmp 	#'Y'+$80
.9f55	f0 04		beq $9f5b			beq 	_TCXYFound
.9f57					_TCXYPopFail:
.9f57	7a		ply				ply
.9f58					_TCXYFail:
.9f58	a9 00		lda #$00			lda 	#0
.9f5a	60		rts				rts
.9f5b					_TCXYFound:
.9f5b	7a		ply				ply 								; restore position
.9f5c	29 7f		and #$7f			and 	#$7F 						; throw bit 7
.9f5e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/editor.asm

.8442					EditProgramCode:
.8442	ad 27 07	lda $0727			lda 	TokenLineNumber 			; find the line.
.8445	ae 28 07	ldx $0728			ldx 	TokenLineNumber+1
.8448	20 fc 9e	jsr $9efc			jsr 	MemorySearch
.844b	90 05		bcc $8452			bcc 	_EPCNoDelete 				; reached the end don't delete
.844d	d0 03		bne $8452			bne 	_EPCNoDelete 				; found slot but didn't match, no delete
.844f	20 4b a8	jsr $a84b			jsr 	MemoryDeleteLine 			; delete the line
.8452					_EPCNoDelete:
.8452	ad 29 07	lda $0729			lda 	TokenBuffer 				; buffer empty
.8455	c9 80		cmp #$80			cmp 	#KWC_EOL
.8457	f0 0d		beq $8466			beq 	_EPCNoInsert
.8459	ad 27 07	lda $0727			lda 	TokenLineNumber 			; find the line - it cannot exist.
.845c	ae 28 07	ldx $0728			ldx 	TokenLineNumber+1 			; so this can't fail, it returns some point in the code.
.845f	20 fc 9e	jsr $9efc			jsr 	MemorySearch
.8462	18		clc				clc 								; insert at this point.
.8463	20 82 a8	jsr $a882			jsr 	MemoryInsertLine 			; insert the line
.8466					_EPCNoInsert:
.8466	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/warmstart.asm

.8467					WarmStart:
.8467	a2 ff		ldx #$ff			ldx 	#$FF
.8469	9a		txs				txs
.846a	20 1d a8	jsr $a81d			jsr 	EXTInputLine 				; get line to lineBuffer
.846d	20 5b 9c	jsr $9c5b			jsr 	TokeniseLine 				; tokenise the line
.8470	ad 27 07	lda $0727			lda 	TokenLineNumber 			; line number ?
.8473	0d 28 07	ora $0728			ora 	TokenLineNumber+1
.8476	d0 17		bne $848f			bne 	_WSEditCode 				; if so,edit code.
.8478	9c 26 07	stz $0726			stz 	TokenOffset 				; zero offset, meaning it only runs one line.
.847b	a9 26		lda #$26			lda 	#((TokenOffset) & $FF)
.847d	85 30		sta $30				sta 	codePtr
.847f	a9 07		lda #$07			lda 	#((TokenOffset) >> 8)
.8481	85 31		sta $31				sta 	codePtr+1
.8483	ad 29 07	lda $0729			lda 	TokenBuffer 				; nothing to run
.8486	c9 80		cmp #$80			cmp 	#KWC_EOL
.8488	f0 dd		beq $8467			beq 	WarmStart
.848a	20 4d 8a	jsr $8a4d			jsr 	RUNCodePointerLine 			; execute that line.
.848d	80 d8		bra $8467			bra 	WarmStart
.848f					_WSEditCode:
.848f	20 42 84	jsr $8442			jsr 	EditProgramCode
.8492	20 d4 84	jsr $84d4			jsr 	ClearCommand
.8495	80 d0		bra $8467			bra 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assemble.asm

.8497					AssembleCommand:
.8497	a2 00		ldx #$00			ldx 	#0
.8499	20 dd 97	jsr $97dd			jsr 	Evaluate16BitInteger 		; start address
.849c	ad 08 06	lda $0608			lda 	NSMantissa0
.849f	8d 1e 07	sta $071e			sta 	AssemblerAddress
.84a2	ad 10 06	lda $0610			lda 	NSMantissa1
.84a5	8d 1f 07	sta $071f			sta 	AssemblerAddress+1
.84a8	20 c0 9f	jsr $9fc0			jsr 	CheckComma
.84ab	20 e9 97	jsr $97e9			jsr 	Evaluate8BitInteger 		; options
.84ae	ad 08 06	lda $0608			lda 	NSMantissa0
.84b1	8d 20 07	sta $0720			sta 	AssemblerControl
.84b4	60		rts				rts
.84b5	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assert.asm

.84b6					AssertCommand:
.84b6	a2 00		ldx #$00			ldx 	#0
.84b8	20 c8 97	jsr $97c8			jsr 	EvaluateInteger 			; the assert test
.84bb	20 81 98	jsr $9881			jsr 	NSMIsZero 					; exit if result is non zero.
.84be	d0 05		bne $84c5			bne 	_ACExit
.84c0	a9 0a		lda #$0a		lda	#10
.84c2	4c fe 8c	jmp $8cfe		jmp	ErrorHandler
.84c5					_ACExit:
.84c5	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/call.asm

.84c6					CallCommand:
.84c6	a2 00		ldx #$00			ldx 	#0
.84c8	20 dd 97	jsr $97dd			jsr 	Evaluate16BitInteger
.84cb	ad 10 06	lda $0610			lda 	NSMantissa1
.84ce	8d 09 06	sta $0609			sta 	NSMantissa0+1
.84d1	6c 08 06	jmp ($0608)			jmp 	(NSMantissa0)

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/clear.asm

.84d4					ClearCommand:
.84d4	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.84d6	85 36		sta $36				sta 	0+zTemp0
.84d8	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.84da	85 37		sta $37				sta 	1+zTemp0
.84dc					_ClearZeroLoop:
.84dc	b2 36		lda ($36)			lda 	(zTemp0) 					; end of variables
.84de	f0 24		beq $8504			beq 	_ClearZeroEnd
.84e0	a0 03		ldy #$03			ldy 	#3 							; erase the variables
.84e2	a9 00		lda #$00			lda 	#0
.84e4					_ClearOneVariable:
.84e4	91 36		sta ($36),y			sta 	(zTemp0),y
.84e6	c8		iny				iny
.84e7	c0 08		cpy #$08			cpy 	#8
.84e9	d0 f9		bne $84e4			bne 	_ClearOneVariable
.84eb	a0 02		ldy #$02			ldy 	#2 							; has it been marked procedure
.84ed	b1 36		lda ($36),y			lda 	(zTemp0),y
.84ef	c9 18		cmp #$18			cmp 	#NSTProcedure
.84f1	d0 04		bne $84f7			bne 	_ClearNotProcedure
.84f3	a9 04		lda #$04			lda 	#NSTInteger+NSBIsArray 		; set it back to an integer array
.84f5	91 36		sta ($36),y			sta 	(zTemp0),y
.84f7					_ClearNotProcedure:
.84f7	18		clc				clc 								; go to the next variable
.84f8	b2 36		lda ($36)			lda 	(zTemp0)
.84fa	65 36		adc $36				adc 	zTemp0
.84fc	85 36		sta $36				sta 	zTemp0
.84fe	90 dc		bcc $84dc			bcc 	_ClearZeroLoop
.8500	e6 37		inc $37				inc 	zTemp0+1
.8502	80 d8		bra $84dc			bra 	_ClearZeroLoop
.8504					_ClearZeroEnd:
.8504	18		clc				clc
.8505	a5 36		lda $36				lda 	zTemp0
.8507	69 01		adc #$01			adc 	#1
.8509	8d 0c 07	sta $070c			sta 	lowMemPtr
.850c	a5 37		lda $37				lda 	zTemp0+1
.850e	69 00		adc #$00			adc 	#0
.8510	8d 0d 07	sta $070d			sta 	lowMemPtr+1
.8513	20 04 99	jsr $9904			jsr 	StackReset
.8516	20 99 a7	jsr $a799			jsr 	StringSystemInitialise
.8519	20 1e 8c	jsr $8c1e			jsr 	ProcedureScan
.851c	20 09 8a	jsr $8a09			jsr 	Command_Restore
.851f	9c 1e 07	stz $071e			stz 	AssemblerAddress
.8522	9c 1f 07	stz $071f			stz 	AssemblerAddress+1
.8525	9c 20 07	stz $0720			stz 	AssemblerControl
.8528	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/data.asm

.8529					Command_Data:
.8529	a9 3a		lda #$3a			lda 	#KWD_COLON 					; advance to colon/EOL
.852b	a2 80		ldx #$80			ldx 	#KWC_EOL
.852d	20 70 8c	jsr $8c70			jsr 	ScanForward
.8530	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/dim.asm

.8531					DimCommand:
.8531	b1 30		lda ($30),y			lda 	(codePtr),y
.8533	29 c0		and #$c0			and 	#$C0
.8535	c9 40		cmp #$40			cmp 	#$40
.8537	d0 7a		bne $85b3			bne 	_DCSyntax
.8539	b1 30		lda ($30),y			lda 	(codePtr),y
.853b	18		clc				clc
.853c	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.853e	85 3f		sta $3f				sta 	zaTemp+1
.8540	c8		iny				iny
.8541	b1 30		lda ($30),y			lda 	(codePtr),y
.8543	c8		iny				iny
.8544	85 3e		sta $3e				sta 	zaTemp
.8546	5a		phy				phy
.8547	a0 02		ldy #$02			ldy 	#2 						; read type byte
.8549	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.854b	29 18		and #$18			and 	#NSBTypeMask 			; check it's not a procedure
.854d	c9 18		cmp #$18			cmp 	#NSTProcedure
.854f	f0 62		beq $85b3			beq 	_DCSyntax
.8551	b1 3e		lda ($3e),y			lda 	(zaTemp),y 				; check it's an array
.8553	29 04		and #$04			and 	#NSBIsArray
.8555	f0 64		beq $85bb			beq 	_DCType
.8557	a0 04		ldy #$04			ldy 	#4 						; check not already defined
.8559	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.855b	d0 59		bne $85b6			bne 	_DCRedefine
.855d	7a		ply				ply
.855e	20 be 85	jsr $85be			jsr 	_DCGetSize 				; get array size, check it.
.8561	5a		phy				phy
.8562	a0 05		ldy #$05			ldy 	#5 						; store in first array size slot
.8564	91 3e		sta ($3e),y			sta 	(zaTemp),y 				; second will be zero.
.8566	7a		ply				ply 							; is there a second (e.g. ,x)
.8567	b1 30		lda ($30),y			lda 	(codePtr),y
.8569	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.856b	d0 0a		bne $8577			bne 	_DCOneDimension
.856d	c8		iny				iny 							; skip comma
.856e	20 be 85	jsr $85be			jsr 	_DCGetSize 				; get 2nd array size
.8571	5a		phy				phy
.8572	a0 06		ldy #$06			ldy 	#6 						; store in 2nd array size
.8574	91 3e		sta ($3e),y			sta 	(zaTemp),y
.8576	7a		ply				ply
.8577					_DCOneDimension:
.8577	5a		phy				phy 							; save position
.8578	a0 05		ldy #$05			ldy 	#5 						; dimensions + 1 in AX (as zero based)
.857a	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.857c	aa		tax				tax
.857d	c8		iny				iny
.857e	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8580	e8		inx				inx 							; bump them.
.8581	1a		inc a				inc 	a
.8582	20 3a a4	jsr $a43a			jsr 	Multiply8x8 			; work out the total number of elements -> zTemp0
.8585	a5 37		lda $37				lda 	zTemp0+1 				; don't allow more than 8192 elements whatever
.8587	29 e0		and #$e0			and 	#$E0
.8589	d0 23		bne $85ae			bne 	_DCSize
.858b	a0 02		ldy #$02			ldy 	#2 						; get base type
.858d	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.858f	20 cc 85	jsr $85cc			jsr 	ScaleByBaseType 		; scale by base type
.8592	a5 36		lda $36				lda 	zTemp0
.8594	a6 37		ldx $37				ldx 	zTemp0+1
.8596	20 87 95	jsr $9587			jsr 	AllocateXABytes 		; allocate memory
.8599	a0 03		ldy #$03			ldy 	#3 						; copy into the address.
.859b	91 3e		sta ($3e),y			sta 	(zaTemp),y
.859d	c8		iny				iny
.859e	8a		txa				txa
.859f	91 3e		sta ($3e),y			sta 	(zaTemp),y
.85a1	7a		ply				ply 							; get position back
.85a2	20 b8 9f	jsr $9fb8			jsr 	CheckRightBracket 		; check )
.85a5	b1 30		lda ($30),y			lda 	(codePtr),y
.85a7	c8		iny				iny 							; consume in case
.85a8	c9 2c		cmp #$2c			cmp 	#KWD_COMMA		 		; if so do another DIM.
.85aa	f0 85		beq $8531			beq 	DimCommand
.85ac	88		dey				dey 							; undo consume
.85ad	60		rts				rts
.85ae					_DCSize:
.85ae	a9 16		lda #$16		lda	#22
.85b0	4c fe 8c	jmp $8cfe		jmp	ErrorHandler
.85b3					_DCSyntax:
.85b3	4c 9a a5	jmp $a59a			jmp 	SyntaxError
.85b6					_DCRedefine:
.85b6	a9 15		lda #$15		lda	#21
.85b8	4c fe 8c	jmp $8cfe		jmp	ErrorHandler
.85bb					_DCType:
.85bb	4c a4 a5	jmp $a5a4			jmp 	TypeError
.85be					_DCGetSize:
.85be	a2 00		ldx #$00			ldx 	#0 						; get first index.
.85c0	20 e9 97	jsr $97e9			jsr 	Evaluate8BitInteger 	; get array dimension
.85c3	c9 00		cmp #$00			cmp 	#0 						; must be 1-254
.85c5	f0 e7		beq $85ae			beq 	_DCSize
.85c7	c9 fe		cmp #$fe			cmp 	#254
.85c9	f0 e3		beq $85ae			beq 	_DCSize
.85cb	60		rts				rts
.85cc					ScaleByBaseType:
.85cc	29 10		and #$10			and 	#NSBIsString 			; is it string
.85ce	d0 19		bne $85e9			bne 	_SBBTString
.85d0	a5 37		lda $37				lda 	zTemp0+1 				; push value on stack
.85d2	48		pha				pha
.85d3	a5 36		lda $36				lda 	zTemp0
.85d5	48		pha				pha
.85d6	06 36		asl $36				asl 	zTemp0 					; x 2
.85d8	26 37		rol $37				rol 	zTemp0+1
.85da	06 36		asl $36				asl 	zTemp0 					; x 4
.85dc	26 37		rol $37				rol 	zTemp0+1
.85de	68		pla				pla 							; add stacked value = x 5
.85df	65 36		adc $36				adc 	zTemp0
.85e1	85 36		sta $36				sta 	zTemp0
.85e3	68		pla				pla
.85e4	65 37		adc $37				adc 	zTemp0+1
.85e6	85 37		sta $37				sta 	zTemp0+1
.85e8	60		rts				rts
.85e9					_SBBTString:
.85e9	06 36		asl $36				asl 	zTemp0
.85eb	26 37		rol $37				rol 	zTemp0+1
.85ed	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/end.asm

.85ee					EndCommand:
.85ee	4c 67 84	jmp $8467			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/for.asm

.85f1					ForCommand:
.85f1	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; allocate 18 bytes on the return stack.
.85f3	20 a4 98	jsr $98a4			jsr 	StackOpen
.85f6	a2 00		ldx #$00			ldx 	#0
.85f8	20 d8 93	jsr $93d8			jsr 	EvaluateTerm
.85fb	bd 00 06	lda $0600,x			lda 	NSStatus,x
.85fe	c9 20		cmp #$20			cmp 	#NSBIsReference+NSTInteger 	; do we have an integer 4 byte reference.
.8600	d0 49		bne $864b			bne		_FCError
.8602	a9 3d		lda #$3d			lda 	#KWD_EQUAL 					; =
.8604	20 c8 9f	jsr $9fc8			jsr 	CheckNextA
.8607	e8		inx				inx
.8608	20 c8 97	jsr $97c8			jsr 	EvaluateInteger 			; <from> in +1
.860b	b1 30		lda ($30),y			lda 	(codePtr),y
.860d	c8		iny				iny 								; consume it
.860e	48		pha				pha 								; save on stack for later
.860f	c9 a5		cmp #$a5			cmp 	#KWD_DOWNTO
.8611	f0 04		beq $8617			beq 	_FCNoSyntax
.8613	c9 af		cmp #$af			cmp 	#KWD_TO
.8615	d0 37		bne $864e			bne 	_FCSyntaxError
.8617					_FCNoSyntax:
.8617	e8		inx				inx
.8618	20 c8 97	jsr $97c8			jsr 	EvaluateInteger
.861b	20 e3 98	jsr $98e3			jsr 	STKSaveCodePosition 		; save loop back position
.861e	68		pla				pla 								; restore DOWNTO or TO
.861f	5a		phy				phy 								; save Y on the stack
.8620	49 a5		eor #$a5			eor 	#KWD_DOWNTO 				; 0 if DOWNTO, #0 if TO
.8622	f0 02		beq $8626			beq 	_FCNotDownTo
.8624	a9 02		lda #$02			lda 	#2
.8626					_FCNotDownTo:
.8626	3a		dec a				dec 	a 							; 255 if DOWNTO, 1 if TO
.8627	a0 10		ldy #$10			ldy 	#16
.8629	91 34		sta ($34),y			sta 	(basicStack),y 				; copy that out to the Basic Stack.
.862b	a0 06		ldy #$06			ldy 	#6
.862d	ad 08 06	lda $0608			lda 	NSMantissa0
.8630	91 34		sta ($34),y			sta 	(basicStack),y
.8632	ad 10 06	lda $0610			lda 	NSMantissa1
.8635	c8		iny				iny
.8636	91 34		sta ($34),y			sta 	(basicStack),y
.8638	a0 08		ldy #$08			ldy 	#8 							; set initial index value
.863a	a2 01		ldx #$01			ldx 	#1
.863c	20 51 86	jsr $8651			jsr 	FCIntegerToStack
.863f	a0 0c		ldy #$0c			ldy 	#12 						; set the terminal value
.8641	a2 02		ldx #$02			ldx 	#2
.8643	20 51 86	jsr $8651			jsr 	FCIntegerToStack
.8646	20 71 86	jsr $8671			jsr 	CopyIndexToReference
.8649	7a		ply				ply 								; restore position
.864a	60		rts				rts
.864b					_FCError:
.864b	4c a4 a5	jmp $a5a4			jmp 	TypeError
.864e					_FCSyntaxError:
.864e	4c 9a a5	jmp $a59a			jmp 	SyntaxError
.8651					FCIntegerToStack:
.8651	3c 00 06	bit $0600,x			bit 	NSStatus,x 					; is the value negative
.8654	10 03		bpl $8659			bpl	 	_FCNotNegative
.8656	20 06 98	jsr $9806			jsr 	NSMNegateMantissa 			; if so 2's complement the mantissa
.8659					_FCNotNegative:
.8659	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy out to the basic stack
.865c	91 34		sta ($34),y			sta 	(basicStack),y
.865e	c8		iny				iny
.865f	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8662	91 34		sta ($34),y			sta 	(basicStack),y
.8664	c8		iny				iny
.8665	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.8668	91 34		sta ($34),y			sta 	(basicStack),y
.866a	c8		iny				iny
.866b	bd 20 06	lda $0620,x			lda 	NSMantissa3,x
.866e	91 34		sta ($34),y			sta 	(basicStack),y
.8670	60		rts				rts
.8671					CopyIndexToReference:
.8671	5a		phy				phy
.8672	a0 06		ldy #$06			ldy 	#6 							; copy address-8 to write to zTemp0
.8674	38		sec				sec 								; (because we copy from offset 8)
.8675	b1 34		lda ($34),y			lda 	(basicStack),y
.8677	e9 08		sbc #$08			sbc 	#8
.8679	85 36		sta $36				sta 	zTemp0
.867b	c8		iny				iny
.867c	b1 34		lda ($34),y			lda 	(basicStack),y
.867e	e9 00		sbc #$00			sbc 	#0
.8680	85 37		sta $37				sta 	zTemp0+1
.8682	a2 04		ldx #$04			ldx 	#4 							; this is the copy counter/
.8684	a0 0b		ldy #$0b			ldy 	#8+3 		 				; the MSB of the mantissa
.8686	b1 34		lda ($34),y			lda 	(basicStack),y
.8688	0a		asl a				asl 	a 							; into carry
.8689	a0 08		ldy #$08			ldy 	#8 							; where to copy from.
.868b	90 14		bcc $86a1			bcc 	_CITRNormal
.868d	38		sec				sec
.868e					_CITRNegative:
.868e	a9 00		lda #$00			lda 	#0
.8690	f1 34		sbc ($34),y			sbc 	(basicStack),y
.8692	91 36		sta ($36),y			sta 	(zTemp0),y
.8694	c8		iny				iny
.8695	ca		dex				dex
.8696	d0 f6		bne $868e			bne 	_CITRNegative
.8698	88		dey				dey 								; look at MSB of mantissa
.8699	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set the MSB as negative packed.
.869b	09 80		ora #$80			ora 	#$80
.869d	91 36		sta ($36),y			sta 	(zTemp0),y
.869f	7a		ply				ply
.86a0	60		rts				rts
.86a1					_CITRNormal:
.86a1	b1 34		lda ($34),y			lda 	(basicStack),y 				; copy without negation.
.86a3	91 36		sta ($36),y			sta 	(zTemp0),y
.86a5	c8		iny				iny
.86a6	ca		dex				dex
.86a7	d0 f8		bne $86a1			bne 	_CITRNormal
.86a9	7a		ply				ply 								; and exit.
.86aa	60		rts				rts
.86ab					NextCommand:
.86ab	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; check FOR is TOS
.86ad	a2 11		ldx #$11			ldx 	#ERRID_FOR 					; this error
.86af	20 cb 98	jsr $98cb			jsr 	StackCheckFrame
.86b2	5a		phy				phy
.86b3	a0 10		ldy #$10			ldy 	#16 						; get the step count
.86b5	b1 34		lda ($34),y			lda 	(basicStack),y
.86b7	85 36		sta $36				sta 	zTemp0 						; this is the sign extend
.86b9	30 02		bmi $86bd			bmi 	_NCStepNeg
.86bb	64 36		stz $36				stz 	zTemp0 						; which is 0 or 255
.86bd					_NCStepNeg:
.86bd	a0 08		ldy #$08			ldy 	#8 							; offset to bump
.86bf	a2 04		ldx #$04			ldx 	#4 							; count to bump
.86c1	18		clc				clc
.86c2					_NCBump:
.86c2	71 34		adc ($34),y			adc 	(basicStack),y 				; add it
.86c4	91 34		sta ($34),y			sta 	(basicStack),y
.86c6	a5 36		lda $36				lda 	zTemp0 						; get sign extend for next time.
.86c8	c8		iny				iny 								; next byte
.86c9	ca		dex				dex 								; do four times
.86ca	d0 f6		bne $86c2			bne 	_NCBump
.86cc	20 71 86	jsr $8671			jsr		CopyIndexToReference		; copy it to the reference variable.
.86cf	a0 10		ldy #$10			ldy 	#16 						; get step count again
.86d1	b1 34		lda ($34),y			lda 	(basicStack),y
.86d3	0a		asl a				asl 	a 							; sign bit to carry
.86d4	a9 0c		lda #$0c			lda 	#12 						; offset of LHS = terminal offset
.86d6	85 38		sta $38				sta 	zTemp1
.86d8	90 02		bcc $86dc			bcc 	_NCCompRev 					; use if step is +ve
.86da	a9 08		lda #$08			lda 	#8 							; now the LHS = index value
.86dc					_NCCompRev:
.86dc	85 38		sta $38				sta 	zTemp1 						; so zTemp0 is the index for LHS
.86de	49 04		eor #$04			eor 	#(8^12) 					; and zTemp0+1 is the index for RHS
.86e0	85 39		sta $39				sta 	zTemp1+1
.86e2	a2 04		ldx #$04			ldx 	#4 							; bytes to compare
.86e4	38		sec				sec
.86e5					_NCCompare:
.86e5	a4 38		ldy $38				ldy 	zTemp1 						; do compare using the two indices
.86e7	b1 34		lda ($34),y			lda 	(basicStack),y
.86e9	a4 39		ldy $39				ldy 	zTemp1+1
.86eb	f1 34		sbc ($34),y			sbc 	(basicStack),y
.86ed	e6 38		inc $38				inc 	zTemp1 						; bump the indices (inc,dex do not change C or V)
.86ef	e6 39		inc $39				inc 	zTemp1+1
.86f1	ca		dex				dex 								; do it 4 times.
.86f2	d0 f1		bne $86e5			bne 	_NCCompare
.86f4	50 02		bvc $86f8			bvc 	_NCNoOverflow 				; convert to signed comparison
.86f6	49 80		eor #$80			eor 	#$80
.86f8					_NCNoOverflow:
.86f8	7a		ply				ply 								; restore Y position
.86f9	0a		asl a				asl 	a 							; is bit 7 set.
.86fa	90 04		bcc $8700			bcc 	_NCLoopback 				; if no , >= so loop back
.86fc	20 bd 98	jsr $98bd			jsr 	StackClose 					; exit the loop
.86ff	60		rts				rts
.8700					_NCLoopBack:
.8700	20 f4 98	jsr $98f4			jsr 	STKLoadCodePosition 		; loop back
.8703	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/gosub.asm

.8704					Command_GOSUB:
.8704	a2 00		ldx #$00			ldx 	#0
.8706	20 dd 97	jsr $97dd			jsr 	Evaluate16BitInteger 		; line number in Stack.0
.8709	a9 e3		lda #$e3			lda 	#STK_GOSUB+3
.870b	20 a4 98	jsr $98a4			jsr 	StackOpen 					; create frame
.870e	20 e3 98	jsr $98e3			jsr 	STKSaveCodePosition 		; save current position
.8711	4c 27 87	jmp $8727			jmp 	GotoStackX
.8714					Command_RETURN:
.8714	a9 e0		lda #$e0			lda 	#STK_GOSUB 					; check TOS is this
.8716	a2 0e		ldx #$0e			ldx 	#ERRID_GOSUB 				; this error
.8718	20 cb 98	jsr $98cb			jsr 	StackCheckFrame
.871b	20 f4 98	jsr $98f4			jsr 	STKLoadCodePosition 		; restore code position
.871e	20 bd 98	jsr $98bd			jsr 	StackClose
.8721	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/goto.asm

.8722					GotoCommand:
.8722	a2 00		ldx #$00			ldx 	#0 							; GOTO where
.8724	20 dd 97	jsr $97dd			jsr 	Evaluate16BitInteger
.8727					GotoStackX:
.8727	bd 10 06	lda $0610,x			lda  	NSMantissa1,x 				; put line # in XA. I'll keep this even though
.872a	48		pha				pha 								; it is slightly inefficient, just in cases.
.872b	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.872e	fa		plx				plx
.872f	20 fc 9e	jsr $9efc			jsr 	MemorySearch 				; transfer to line number AX.
.8732	90 05		bcc $8739			bcc 	_GotoError 					; not found, off end.
.8734	d0 03		bne $8739			bne 	_GotoError 					; not found exactly
.8736	4c 46 8a	jmp $8a46			jmp 	RunNewLine 					; and go straight to new line code.
.8739					_GotoError:
.8739	a9 0d		lda #$0d		lda	#13
.873b	4c fe 8c	jmp $8cfe		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/if.asm

.873e					IfCommand:
.873e	a2 00		ldx #$00			ldx 	#0 							; If what.
.8740	20 a5 97	jsr $97a5			jsr 	EvaluateNumber
.8743	b1 30		lda ($30),y			lda 	(codePtr),y
.8745	c9 9e		cmp #$9e			cmp 	#KWD_THEN  					; could be THEN <stuff> or GOTO
.8747	d0 0a		bne $8753			bne 	_IFStructured
.8749	c8		iny				iny 								; consume THEN
.874a	20 81 98	jsr $9881			jsr 	NSMIsZero 					; is it zero
.874d	f0 01		beq $8750			beq 	_IfFail 					; if fail, go to next line
.874f	60		rts				rts 								; if THEN just continue
.8750					_IfFail:
.8750	4c a7 8a	jmp $8aa7			jmp 	EOLCommand
.8753					_IfStructured:
.8753	20 81 98	jsr $9881			jsr 	NSMIsZero 					; is it zero
.8756	d0 07		bne $875f			bne 	_IfExit 					; if not, then continue normally.
.8758	a9 a6		lda #$a6			lda 	#KWD_ELSE 					; look for else/endif
.875a	a2 9b		ldx #$9b			ldx 	#KWD_ENDIF
.875c	20 70 8c	jsr $8c70			jsr 	ScanForward 				; and run from there/
.875f					_IfExit:
.875f	60		rts				rts
.8760					ElseCode:
.8760	a9 9b		lda #$9b			lda 	#KWD_ENDIF 					; else is only run after the if clause succeeds
.8762	aa		tax				tax 								; so just go to the structure exit
.8763	20 70 8c	jsr $8c70			jsr 	ScanForward
.8766	60		rts				rts
.8767					EndIf:
.8767	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/let.asm

.8768					LetCommand:
.8768	a2 00		ldx #$00			ldx 	#0
.876a	ad ef 90	lda $90ef			lda 	PrecedenceLevel+"*"			; precedence > this
.876d	20 09 91	jsr $9109			jsr 	EvaluateExpressionAtPrecedence
.8770	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; is it a reference to an array
.8773	c9 38		cmp #$38			cmp		#NSTProcedure+NSBIsReference
.8775	f0 0e		beq $8785			beq 	_LetGoProc 					; it's a procedure call.
.8777	a9 3d		lda #$3d			lda 	#"=" 						; check =
.8779	20 c8 9f	jsr $9fc8			jsr 	CheckNextA
.877c	e8		inx				inx 								; RHS
.877d	20 9c 97	jsr $979c			jsr 	EvaluateValue
.8780	ca		dex				dex
.8781	20 88 87	jsr $8788			jsr 	AssignVariable
.8784	60		rts				rts
.8785					_LetGoProc:
.8785	4c 21 89	jmp $8921			jmp 	CallProcedure
.8788					AssignVariable:
.8788	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check the string/number type bits match
.878b	48		pha				pha 								; save a copy
.878c	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.878f	29 10		and #$10			and 	#NSBIsString
.8791	d0 0b		bne $879e			bne 	_ASError
.8793	68		pla				pla 								; get back
.8794	29 10		and #$10			and 	#NSBIsString 				; check type
.8796	d0 03		bne $879b			bne 	_ASString
.8798	4c 44 91	jmp $9144			jmp 	AssignNumber
.879b					_ASString:
.879b	4c b2 91	jmp $91b2			jmp 	AssignString
.879e					_ASError:
.879e	4c a4 a5	jmp $a5a4			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/list.asm

.87a1					Command_List:
.87a1	9c 0c 06	stz $060c			stz		NSMantissa0+4				; set the lower (slot 4) to 0 and upper (slot 7) to $FFFF
.87a4	9c 14 06	stz $0614			stz 	NSMantissa1+4
.87a7	a9 ff		lda #$ff			lda 	#$FF
.87a9	8d 0f 06	sta $060f			sta 	NSMantissa0+7
.87ac	8d 17 06	sta $0617			sta 	NSMantissa1+7
.87af	b1 30		lda ($30),y			lda 	(codePtr),y
.87b1	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.87b3	f0 1e		beq $87d3			beq 	_CLSecond
.87b5	20 31 88	jsr $8831			jsr 	CLIsDigit 					; if not digit, list all
.87b8	b0 24		bcs $87de			bcs 	_CLStart
.87ba	a2 04		ldx #$04			ldx 	#4 							; get 1st range into slot 4
.87bc	20 dd 97	jsr $97dd			jsr 	Evaluate16BitInteger
.87bf	b1 30		lda ($30),y			lda 	(codePtr),y
.87c1	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.87c3	f0 0e		beq $87d3			beq 	_CLSecond 					; if so go get it
.87c5	ad 0c 06	lda $060c			lda 	NSMantissa0+4 				; copy 4->7
.87c8	8d 0f 06	sta $060f			sta 	NSMantissa0+7
.87cb	ad 14 06	lda $0614			lda 	NSMantissa1+4
.87ce	8d 17 06	sta $0617			sta 	NSMantissa1+7
.87d1	80 0b		bra $87de			bra 	_CLStart
.87d3					_CLSecond:
.87d3	c8		iny				iny 								; consume comma
.87d4	20 31 88	jsr $8831			jsr 	CLIsDigit 					; digit found
.87d7	b0 05		bcs $87de			bcs 	_CLStart 					; if not, continue listing
.87d9	a2 07		ldx #$07			ldx 	#7 							; load 2nd range into slot 7
.87db	20 dd 97	jsr $97dd			jsr 	Evaluate16BitInteger
.87de					_CLStart
.87de	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.87e0	85 30		sta $30				sta 	codePtr
.87e2	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.87e4	85 31		sta $31				sta 	codePtr+1
.87e6					_CLLoop:
.87e6	20 48 a8	jsr $a848			jsr 	EXTBreakCheck 				; break check
.87e9	f0 30		beq $881b			beq 	_CLExit
.87eb	b2 30		lda ($30)			lda 	(codePtr)
.87ed	f0 2c		beq $881b			beq 	_CLExit
.87ef	a2 04		ldx #$04			ldx 	#4 							; check range every time, line numbers aren't in order.
.87f1	20 1e 88	jsr $881e			jsr 	CLCompareLineNo
.87f4	90 18		bcc $880e			bcc 	_CLNext
.87f6	a2 07		ldx #$07			ldx 	#7
.87f8	20 1e 88	jsr $881e			jsr 	CLCompareLineNo
.87fb	f0 02		beq $87ff			beq 	_CLDoThisOne
.87fd	b0 0f		bcs $880e			bcs 	_CLNext
.87ff					_CLDoThisOne:
.87ff	20 cc 8a	jsr $8acc			jsr 	ListConvertLine 			; convert line into token Buffer
.8802	a2 07		ldx #$07			ldx 	#(tokenBuffer >> 8) 		; print that line
.8804	a9 29		lda #$29			lda 	#(tokenBuffer & $FF)
.8806	20 57 8d	jsr $8d57			jsr 	PrintStringXA
.8809	a9 0d		lda #$0d			lda 	#13 						; new line
.880b	20 07 a8	jsr $a807			jsr 	EXTPrintCharacter
.880e					_CLNext:
.880e	18		clc				clc
.880f	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8811	65 30		adc $30				adc 	codePtr
.8813	85 30		sta $30				sta 	codePtr
.8815	90 02		bcc $8819			bcc 	_CREExit
.8817	e6 31		inc $31				inc 	codePtr+1
.8819					_CREExit:
.8819	80 cb		bra $87e6			bra 	_CLLoop
.881b					_CLExit:
.881b	4c 67 84	jmp $8467			jmp 	WarmStart
.881e					CLCompareLineNo:
.881e	38		sec				sec
.881f	a0 01		ldy #$01			ldy 	#1
.8821	b1 30		lda ($30),y			lda 	(codePtr),y
.8823	fd 08 06	sbc $0608,x			sbc 	NSMantissa0,x
.8826	85 36		sta $36				sta 	zTemp0
.8828	c8		iny				iny
.8829	b1 30		lda ($30),y			lda 	(codePtr),y
.882b	fd 10 06	sbc $0610,x			sbc 	NSMantissa1,x
.882e	05 36		ora $36				ora 	zTemp0
.8830	60		rts				rts
.8831					CLIsDigit:
.8831	b1 30		lda ($30),y			lda 	(codePtr),y
.8833	c9 30		cmp #$30			cmp 	#"0"
.8835	90 03		bcc $883a			bcc	 	_CLIDExitFalse
.8837	c9 3a		cmp #$3a			cmp 	#"9"+1
.8839	60		rts				rts
.883a					_CLIDExitFalse:
.883a	38		sec				sec
.883b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/local.asm

.883c					Command_LOCAL:
.883c	a2 00		ldx #$00			ldx 	#0 							; at level 0
.883e	20 4a 88	jsr $884a			jsr 	LocaliseNextTerm 			; convert term to a local.
.8841	b1 30		lda ($30),y			lda 	(codePtr),y
.8843	c8		iny				iny
.8844	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8846	f0 f4		beq $883c			beq 	Command_LOCAL
.8848	88		dey				dey 								; unpick pre-get
.8849	60		rts				rts
.884a					LocaliseNextTerm:
.884a	20 d8 93	jsr $93d8			jsr 	EvaluateTerm 				; evaluate the term
.884d	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8850	29 20		and #$20			and 	#NSBIsReference 			; check it is a reference
.8852	f0 69		beq $88bd			beq		_LNTError
.8854	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy address of variable to zTemp0
.8857	85 36		sta $36				sta 	zTemp0
.8859	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.885c	85 37		sta $37				sta  	zTemp0+1
.885e	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8861	29 10		and #$10			and 	#NSBIsString
.8863	d0 22		bne $8887			bne 	_LNTPushString
.8865	5a		phy				phy
.8866	a0 00		ldy #$00			ldy 	#0 							; push 0 to 4 inclusive, the number values, on the stack, and zero them as you go.
.8868					_LNTPushNumLoop:
.8868	b1 36		lda ($36),y			lda		(zTemp0),y
.886a	20 8e 98	jsr $988e			jsr 	StackPushByte
.886d	a9 00		lda #$00			lda 	#0
.886f	91 36		sta ($36),y			sta 	(zTemp0),y
.8871	c8		iny				iny
.8872	c0 05		cpy #$05			cpy 	#5
.8874	d0 f2		bne $8868			bne 	_LNTPushNumLoop
.8876	a5 36		lda $36				lda 	zTemp0 						; push the actual target address to write on the stack
.8878	20 8e 98	jsr $988e			jsr 	StackPushByte
.887b	a5 37		lda $37				lda 	zTemp0+1
.887d	20 8e 98	jsr $988e			jsr 	StackPushByte
.8880	a9 01		lda #$01			lda 	#STK_LOCALN 				; push local-number marker.
.8882	20 8e 98	jsr $988e			jsr 	StackPushByte
.8885	7a		ply				ply
.8886	60		rts				rts
.8887					_LNTPushString:
.8887	5a		phy				phy
.8888	b2 36		lda ($36)			lda 	(zTemp0) 					; put address of string in zTemp1
.888a	85 38		sta $38				sta 	zTemp1
.888c	a0 01		ldy #$01			ldy 	#1
.888e	b1 36		lda ($36),y			lda 	(zTemp0),y
.8890	85 39		sta $39				sta 	zTemp1+1
.8892	a0 00		ldy #$00			ldy 	#0 							; output string
.8894	c9 00		cmp #$00			cmp 	#0 							; if not assigned strin
.8896	f0 0a		beq $88a2			beq 	_LNTStringOut
.8898					_LNTPushStrLoop:
.8898	b1 38		lda ($38),y			lda 	(zTemp1),y
.889a	f0 06		beq $88a2			beq 	_LNTStringOut
.889c	20 8e 98	jsr $988e			jsr 	StackPushByte
.889f	c8		iny				iny
.88a0	80 f6		bra $8898			bra 	_LNTPushStrLoop
.88a2					_LNTStringOut:
.88a2	98		tya				tya									; output length
.88a3	20 8e 98	jsr $988e			jsr 	StackPushByte
.88a6	a9 00		lda #$00			lda 	#0 							; clear original string.
.88a8	92 38		sta ($38)			sta 	(zTemp1)
.88aa	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; output address of the string record *not* the string itself
.88ad	20 8e 98	jsr $988e			jsr 	StackPushByte
.88b0	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.88b3	20 8e 98	jsr $988e			jsr 	StackPushByte
.88b6	a9 02		lda #$02			lda 	#STK_LOCALS 				; push local-string marker.
.88b8	20 8e 98	jsr $988e			jsr 	StackPushByte
.88bb	7a		ply				ply
.88bc	60		rts				rts
.88bd					_LNTError:
.88bd	4c 9a a5	jmp $a59a			jmp 	SyntaxError
.9f5f					LocalPopValue:
.9f5f	20 9b 98	jsr $989b			jsr 	StackPopByte
.9f62	c9 01		cmp #$01			cmp 	#STK_LOCALN 				; if not local-N
.9f64	d0 17		bne $9f7d			bne 	_LPVString
.9f66	20 9b 98	jsr $989b			jsr 	StackPopByte 				; address
.9f69	85 37		sta $37				sta 	zTemp0+1
.9f6b	20 9b 98	jsr $989b			jsr 	StackPopByte
.9f6e	85 36		sta $36				sta 	zTemp0
.9f70	5a		phy				phy
.9f71	a0 04		ldy #$04			ldy 	#4 							; copy back
.9f73					_LPVNumberCopy:
.9f73	20 9b 98	jsr $989b			jsr 	StackPopByte
.9f76	91 36		sta ($36),y			sta 	(zTemp0),y
.9f78	88		dey				dey
.9f79	10 f8		bpl $9f73			bpl 	_LPVNumberCopy
.9f7b	7a		ply				ply 								; and complete
.9f7c	60		rts				rts
.9f7d					_LPVString:
.9f7d	20 9b 98	jsr $989b			jsr 	StackPopByte 				; address of record => zTemp0
.9f80	85 37		sta $37				sta 	zTemp0+1
.9f82	20 9b 98	jsr $989b			jsr 	StackPopByte
.9f85	85 36		sta $36				sta 	zTemp0
.9f87	5a		phy				phy
.9f88	b2 36		lda ($36)			lda 	(zTemp0) 					; address to write string to => zTemp1
.9f8a	85 38		sta $38				sta 	zTemp1
.9f8c	a0 01		ldy #$01			ldy 	#1
.9f8e	b1 36		lda ($36),y			lda 	(zTemp0),y
.9f90	85 39		sta $39				sta 	zTemp1+1
.9f92	20 9b 98	jsr $989b			jsr 	StackPopByte 				; # to get => y
.9f95	a8		tay				tay
.9f96	a5 39		lda $39				lda 	zTemp1+1 					; if no target (e.g. was "" originally) exit
.9f98	f0 0e		beq $9fa8			beq 	_LPVStringCopied
.9f9a	a9 00		lda #$00			lda 	#0 							; NULL on end
.9f9c	91 38		sta ($38),y			sta 	(zTemp1),y
.9f9e					_LPVStringCopy:
.9f9e	88		dey				dey
.9f9f	30 07		bmi $9fa8			bmi 	_LPVStringCopied
.9fa1	20 9b 98	jsr $989b			jsr 	StackPopByte
.9fa4	91 38		sta ($38),y			sta 	(zTemp1),y
.9fa6	80 f6		bra $9f9e			bra 	_LPVStringCopy
.9fa8					_LPVStringCopied:
.9fa8	fa		plx				plx
.9fa9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/new.asm

.88c0					NewCommand:
.88c0	20 da 9e	jsr $9eda			jsr 	MemoryNew
.88c3	9c 00 10	stz $1000			stz 	VariableSpace 				; erase all variables.
.88c6	20 d4 84	jsr $84d4			jsr 	ClearCommand 				; clear everything.
.88c9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/print.asm

.88ca					Command_Print:
.88ca	18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.88cb					_CPLoop:
.88cb	08		php				php 								; save last action flag
.88cc	b1 30		lda ($30),y			lda 	(codePtr),y
.88ce	c9 80		cmp #$80			cmp  	#KWC_EOL 					; end of line or colon, exit now.
.88d0	f0 46		beq $8918			beq 	_CPExit
.88d2	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.88d4	f0 42		beq $8918			beq 	_CPExit
.88d6	68		pla				pla 								; throw last action flag
.88d7	b1 30		lda ($30),y			lda 	(codePtr),y
.88d9	c8		iny				iny
.88da	c9 3b		cmp #$3b			cmp 	#KWD_SEMICOLON				; is it a semicolon
.88dc	f0 37		beq $8915			beq 	_CPContinueWithSameLine
.88de	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; comma
.88e0	f0 2e		beq $8910			beq 	_CPTab
.88e2	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; apostrophe (new line)
.88e4	f0 26		beq $890c			beq 	_CPNewLine
.88e6	88		dey				dey 								; undo the get.
.88e7	a2 00		ldx #$00			ldx 	#0
.88e9	20 9c 97	jsr $979c			jsr 	EvaluateValue 				; get a value into slot 0
.88ec	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; is it a number
.88ef	29 10		and #$10			and 	#NSBIsString
.88f1	f0 0b		beq $88fe			beq 	_CPNumber
.88f3	ae 10 06	ldx $0610			ldx 	NSMantissa1 				; string, print the text.
.88f6	ad 08 06	lda $0608			lda 	NSMantissa0
.88f9	20 57 8d	jsr $8d57			jsr 	PrintStringXA
.88fc	80 cc		bra $88ca			bra 	Command_Print 				; loop round clearing carry so NL if end
.88fe					_CPNumber:
.88fe	a9 05		lda #$05			lda 	#5 							; maximum decimals
.8900	20 72 96	jsr $9672			jsr 	ConvertNumberToString 		; convert to string
.8903	a2 08		ldx #$08			ldx 	#DecimalBuffer >> 8
.8905	a9 99		lda #$99			lda 	#DecimalBuffer & $FF
.8907	20 57 8d	jsr $8d57			jsr 	PrintStringXA
.890a	80 be		bra $88ca			bra 	Command_Print 				; loop round clearing carry so NL if end
.890c					_CPNewLine:
.890c	a9 0d		lda #$0d			lda 	#13
.890e	80 02		bra $8912			bra 	_CPPrintChar
.8910					_CPTab:
.8910	a9 09		lda #$09			lda 	#9 							; print TAB
.8912					_CPPrintChar:
.8912	20 07 a8	jsr $a807			jsr 	EXTPrintCharacter
.8915					_CPContinueWithSameLine:
.8915	38		sec				sec 								; loop round with carry set, which
.8916	80 b3		bra $88cb			bra 	_CPLoop 					; will inhibit final CR
.8918					_CPExit:
.8918	28		plp				plp 								; get last action flag
.8919	b0 05		bcs $8920			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.891b	a9 0d		lda #$0d			lda 	#13 						; print new line
.891d	20 07 a8	jsr $a807			jsr 	EXTPrintCharacter
.8920					_CPExit2:
.8920	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/procedure.asm

=2					ParameterStackPos = 2
.8921					CallProcedure:
.8921	a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start storing parameters at 2.
.8923	b1 30		lda ($30),y			lda 	(codePtr),y
.8925	c9 29		cmp #$29			cmp 	#KWD_RPAREN
.8927	f0 0c		beq $8935			beq 	_CPEndParam
.8929					_CPParamLoop:
.8929	20 07 91	jsr $9107			jsr 	EvaluateExpression 			; get parameter onto stack
.892c	e8		inx				inx 								; bump next stack
.892d	b1 30		lda ($30),y			lda 	(codePtr),y
.892f	c8		iny				iny
.8930	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if comma, go back and try again.
.8932	f0 f5		beq $8929			beq 	_CPParamLoop
.8934	88		dey				dey 								; unpick.
.8935					_CPEndParam:
.8935	8e 16 07	stx $0716			stx 	LastParameter 				; save the last parameters index.
.8938	c8		iny				iny									; skip right bracket
.8939	a9 b3		lda #$b3			lda 	#STK_PROC+3 				; allocate 6 bytes on the return stack.
.893b	20 a4 98	jsr $98a4			jsr 	StackOpen
.893e	20 e3 98	jsr $98e3			jsr 	STKSaveCodePosition 		; save loop position
.8941	ad 08 06	lda $0608			lda 	NSMantissa0 				; copy variable (e.g. procedure) address to zTemp0
.8944	85 36		sta $36				sta 	zTemp0 						; this is the DATA not the RECORD
.8946	ad 10 06	lda $0610			lda 	NSMantissa1
.8949	85 37		sta $37				sta 	zTemp0+1
.894b	a0 01		ldy #$01			ldy 	#1 							; copy code address back.
.894d	b2 36		lda ($36)			lda 	(zTemp0)
.894f	85 30		sta $30				sta 	safePtr
.8951	b1 36		lda ($36),y			lda 	(zTemp0),y
.8953	85 31		sta $31				sta 	safePtr+1
.8955	c8		iny				iny
.8956	b1 36		lda ($36),y			lda 	(zTemp0),y
.8958	85 32		sta $32				sta 	safePtr+2
.895a	c8		iny				iny
.895b	b1 36		lda ($36),y			lda 	(zTemp0),y
.895d	85 33		sta $33				sta 	safePtr+3
.895f	c8		iny				iny 								; get Y offset -> Y
.8960	b1 36		lda ($36),y			lda 	(zTemp0),y
.8962	a8		tay				tay
.8963	a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start position of parameters
.8965	ec 16 07	cpx $0716			cpx	 	LastParameter 				; check no parameters at the start
.8968	f0 13		beq $897d			beq 	_ParamExit 					; if so, exit.
.896a					_ParamExtract:
.896a	ca		dex				dex 								; put a local term on the level before
.896b	20 4a 88	jsr $884a			jsr 	LocaliseNextTerm			; also pushes original param value to basic stack
.896e	20 88 87	jsr $8788			jsr 	AssignVariable 				; assign stacked value to the variable.
.8971	e8		inx				inx 								; advance to next parameter to do.
.8972	e8		inx				inx
.8973	ec 16 07	cpx $0716			cpx 	LastParameter 				; are we done ?
.8976	f0 05		beq $897d			beq 	_ParamExit
.8978	20 c0 9f	jsr $9fc0			jsr 	CheckComma 					; comma seperating parameters
.897b	80 ed		bra $896a			bra 	_ParamExtract
.897d					_ParamExit:
.897d	20 b8 9f	jsr $9fb8			jsr 	CheckRightBracket 			; check )
.8980	60		rts				rts 								; and continue from here
.9faa					Command_ENDPROC:
.9faa	a9 b0		lda #$b0			lda 	#STK_PROC 					; check TOS is this
.9fac	a2 14		ldx #$14			ldx 	#ERRID_PROC
.9fae	20 cb 98	jsr $98cb			jsr 	StackCheckFrame
.9fb1	20 f4 98	jsr $98f4			jsr 	STKLoadCodePosition 		; restore code position
.9fb4	20 bd 98	jsr $98bd			jsr 	StackClose
.9fb7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/read.asm

.8981					Command_Read:
.8981	a2 00		ldx #$00			ldx 	#0 							; evaluate the term which is the var/array element to assign
.8983	20 d8 93	jsr $93d8			jsr 	EvaluateTerm
.8986	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8989	29 20		and #$20			and 	#NSBIsReference				; get status byte on stack, identifies int, float, string.
.898b	f0 4a		beq $89d7			beq 	_CRSyntax 					; check reference (bit 0)
.898d	20 20 8a	jsr $8a20			jsr 	SwapDataCodePtrs 			; swap code and data
.8990	ad 1c 07	lda $071c			lda 	inDataStatement 			; if in a data statement, we don't need to search
.8993	d0 20		bne $89b5			bne 	_CRContinueData
.8995					_CRKeepSearching:
.8995	a9 a3		lda #$a3			lda 	#KWD_DATA 					; scan for instruction
.8997	aa		tax				tax
.8998	20 70 8c	jsr $8c70			jsr 	ScanForward
.899b	c9 a3		cmp #$a3			cmp 	#KWD_DATA 					; found data ?
.899d	f0 16		beq $89b5			beq 	_CRHaveData 				; found it
.899f	18		clc				clc
.89a0	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.89a2	65 30		adc $30				adc 	codePtr
.89a4	85 30		sta $30				sta 	codePtr
.89a6	90 02		bcc $89aa			bcc 	_CREExit
.89a8	e6 31		inc $31				inc 	codePtr+1
.89aa					_CREExit:
.89aa	a0 03		ldy #$03			ldy 	#3 							; start of line.
.89ac	b2 30		lda ($30)			lda 	(codePtr)
.89ae	d0 e5		bne $8995			bne 	_CRKeepSearching
.89b0	a9 0b		lda #$0b		lda	#11
.89b2	4c fe 8c	jmp $8cfe		jmp	ErrorHandler
.89b5					_CRHaveData:
.89b5					_CRContinueData:
.89b5	a2 01		ldx #$01			ldx 	#1
.89b7	20 9c 97	jsr $979c			jsr 	EvaluateValue 				; evaluate value into slot # 1
.89ba	ca		dex				dex
.89bb	20 88 87	jsr $8788			jsr		AssignVariable 				; do the assignment
.89be	9c 1c 07	stz $071c			stz 	inDataStatement 			; clear in data
.89c1	b1 30		lda ($30),y			lda 	(codePtr),y
.89c3	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not, end of data statement
.89c5	d0 04		bne $89cb			bne 	_CRSwapBack
.89c7	c8		iny				iny 								; consume comma
.89c8	ee 1c 07	inc $071c			inc 	inDataStatement 			; set in data statement currently.
.89cb					_CRSwapBack:
.89cb	20 20 8a	jsr $8a20			jsr 	SwapDataCodePtrs			; swap them back.
.89ce	b1 30		lda ($30),y			lda 	(codePtr),y
.89d0	c8		iny				iny
.89d1	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.89d3	f0 ac		beq $8981			beq 	Command_Read 				; if so go round again.
.89d5	88		dey				dey 								; unpick get.
.89d6	60		rts				rts
.89d7					_CRSyntax:
.89d7	4c 9a a5	jmp $a59a			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/rem.asm

.89da					RemCommand:
.89da	b1 30		lda ($30),y			lda 	(codePtr),y
.89dc	c9 ff		cmp #$ff			cmp 	#KWC_STRING
.89de	d0 06		bne $89e6			bne 	_RMExit
.89e0	c8		iny				iny
.89e1	98		tya				tya
.89e2	38		sec				sec
.89e3	71 30		adc ($30),y			adc 	(codePtr),y
.89e5	a8		tay				tay
.89e6					_RMExit:
.89e6	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/repeat.asm

.89e7					Command_REPEAT:
.89e7	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; allocate 6 bytes on the return stack.
.89e9	20 a4 98	jsr $98a4			jsr 	StackOpen
.89ec	20 e3 98	jsr $98e3			jsr 	STKSaveCodePosition 		; save loop position
.89ef	60		rts				rts
.89f0					Command_UNTIL:
.89f0	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; check REPEAT is TOS
.89f2	a2 0f		ldx #$0f			ldx 	#ERRID_REPEAT 				; this error
.89f4	20 cb 98	jsr $98cb			jsr 	StackCheckFrame
.89f7	a2 00		ldx #$00			ldx 	#0
.89f9	20 a5 97	jsr $97a5			jsr 	EvaluateNumber 				; work out the number
.89fc	20 81 98	jsr $9881			jsr 	NSMIsZero 					; check if zero
.89ff	f0 04		beq $8a05			beq 	_CULoopBack 				; if so keep looping
.8a01	20 bd 98	jsr $98bd			jsr 	StackClose		 			; return
.8a04	60		rts				rts
.8a05					_CULoopBack:
.8a05	20 f4 98	jsr $98f4			jsr 	STKLoadCodePosition 		; loop back
.8a08	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/restore.asm

.8a09					Command_Restore:
.8a09	20 20 8a	jsr $8a20			jsr 	SwapDataCodePtrs 			; swap code and data
.8a0c	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8a0e	85 30		sta $30				sta 	codePtr
.8a10	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8a12	85 31		sta $31				sta 	codePtr+1
.8a14	20 20 8a	jsr $8a20			jsr 	SwapDataCodePtrs 			; put them back
.8a17	a9 03		lda #$03			lda 	#3 							; start at offset 3, e.g. first instruction of first line.
.8a19	8d 1b 07	sta $071b			sta 	dataPointer+4
.8a1c	9c 1c 07	stz $071c			stz 	inDataStatement 			; not in data statement
.8a1f	60		rts				rts
.8a20					SwapDataCodePtrs:
.8a20	da		phx				phx
.8a21	a2 03		ldx #$03			ldx 	#3 							; swap 32 bit code pointer over
.8a23					_SDCPLoop:
.8a23	b5 30		lda $30,x			lda 	safePtr,x
.8a25	48		pha				pha
.8a26	bd 17 07	lda $0717,x			lda 	dataPointer,x
.8a29	95 30		sta $30,x			sta 	safePtr,x
.8a2b	68		pla				pla
.8a2c	9d 17 07	sta $0717,x			sta 	dataPointer,x
.8a2f	ca		dex				dex
.8a30	10 f1		bpl $8a23			bpl 	_SDCPLoop
.8a32	ad 1b 07	lda $071b			lda 	dataPointer+4 				; swap Y position over.
.8a35	8c 1b 07	sty $071b			sty 	dataPointer+4
.8a38	a8		tay				tay
.8a39	fa		plx				plx
.8a3a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/run.asm

.8a3b					CommandRUN:
.8a3b	20 d4 84	jsr $84d4			jsr 	ClearCommand 				; clear variable/stacks/etc.
.8a3e	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8a40	85 30		sta $30				sta 	codePtr
.8a42	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8a44	85 31		sta $31				sta 	codePtr+1
.8a46					RUNNewLine:
.8a46	b2 30		lda ($30)			lda 	(codePtr)
.8a48	f0 5a		beq $8aa4			beq 	CRNoProgram         		; no then END.
.8a4a	a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack
.8a4c	9a		txs				txs
.8a4d					RUNCodePointerLine:
.8a4d	a0 02		ldy #$02			ldy 	#2 							; start of program
.8a4f					_CRIncMainLoop:
.8a4f	0e 13 07	asl $0713			asl 	breakCheck 					; clears 1 time in 8
.8a52	d0 05		bne $8a59			bne 	_CRNoBreakCheck
.8a54	20 48 a8	jsr $a848			jsr 	EXTBreakCheck 				; break check
.8a57	f0 46		beq $8a9f			beq 	_CRBreak
.8a59					_CRNoBreakCheck:
.8a59	c8		iny				iny
.8a5a					_CRMainLoop:
.8a5a	9c 10 07	stz $0710			stz 	stringInitialised 			; clear the temporary string initialised flag.
.8a5d	b1 30		lda ($30),y			lda 	(codePtr),y
.8a5f	10 10		bpl $8a71			bpl 	_CRNotKeyword
.8a61	c9 96		cmp #$96			cmp 	#KWC_LAST_UNARY+1 			; if after unary, legitimate command
.8a63	b0 04		bcs $8a69			bcs 	_CRIsKeyword
.8a65	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if unary, syntax error.
.8a67	b0 30		bcs $8a99			bcs		_CRSyntaxError
.8a69					_CRIsKeyword:
.8a69	c8		iny				iny 								; consume command
.8a6a	0a		asl a				asl 	a 							; double losing the MSB which is '1' as tokens are $80-$FF
.8a6b	aa		tax				tax 								; put in X for vector jump
.8a6c	20 9c 8a	jsr $8a9c			jsr 	_CRCallVector0 				; call the vector - effectively jsr (vectortable,X)
.8a6f	80 e9		bra $8a5a			bra 	_CRMainLoop 				; and loop round
.8a71					_CRNotKeyword:
.8a71	c9 3a		cmp #$3a			cmp 	#KWD_COLON 					; if a :, consume it and go round.
.8a73	f0 da		beq $8a4f			beq 	_CRIncMainLoop
.8a75	c9 40		cmp #$40			cmp 	#$40 						; variable/call reference
.8a77	90 05		bcc $8a7e			bcc 	_CRNotVariable
.8a79					_CRGoLet:
.8a79	20 68 87	jsr $8768			jsr 	LetCommand
.8a7c	80 dc		bra $8a5a			bra 	_CRMainLoop
.8a7e					_CRNotVariable:
.8a7e	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; handle ? !
.8a80	f0 f7		beq $8a79			beq 	_CRGoLet
.8a82	c9 21		cmp #$21			cmp 	#KWD_PLING
.8a84	f0 f3		beq $8a79			beq 	_CRGoLet
.8a86	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; handle ' (comment)
.8a88	f0 09		beq $8a93			beq 	_CRGoRem
.8a8a	c9 2e		cmp #$2e			cmp 	#KWD_PERIOD 				; handle . (assembler label)
.8a8c	d0 0b		bne $8a99			bne 	_CRSyntaxError
.8a8e	20 a0 83	jsr $83a0			jsr 	LabelHere
.8a91	80 c7		bra $8a5a			bra 	_CRMainLoop
.8a93					_CRGoRem:
.8a93	c8		iny				iny
.8a94	20 da 89	jsr $89da			jsr 	RemCommand
.8a97	80 c1		bra $8a5a			bra 	_CRMainLoop
.8a99					_CRSyntaxError:
.8a99	4c 9a a5	jmp $a59a			jmp 	SyntaxError
.8a9c					_CRCallVector0:
.8a9c	7c fc 80	jmp ($80fc,x)			jmp 	(VectorSet0,x)
.8a9f					_CRBreak:
.8a9f	a9 01		lda #$01		lda	#1
.8aa1	4c fe 8c	jmp $8cfe		jmp	ErrorHandler
.8aa4					CRNoProgram:
.8aa4	4c ee 85	jmp $85ee			jmp 	EndCommand
.8aa7					EOLCommand:
.8aa7	18		clc				clc
.8aa8	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8aaa	65 30		adc $30				adc 	codePtr
.8aac	85 30		sta $30				sta 	codePtr
.8aae	90 02		bcc $8ab2			bcc 	_CREExit
.8ab0	e6 31		inc $31				inc 	codePtr+1
.8ab2					_CREExit:
.8ab2	80 92		bra $8a46			bra 	RunNewLine
.8ab4					Shift1Command:
.8ab4	b1 30		lda ($30),y			lda 	(codePtr),y
.8ab6	c8		iny				iny
.8ab7	0a		asl a				asl 	a
.8ab8	aa		tax				tax
.8ab9	7c 5c 81	jmp ($815c,x)			jmp 	(VectorSet1,x)
.8abc					Shift2Command:
.8abc	b1 30		lda ($30),y			lda 	(codePtr),y
.8abe	c8		iny				iny
.8abf	0a		asl a				asl 	a
.8ac0	aa		tax				tax
.8ac1	7c 74 81	jmp ($8174,x)			jmp 	(VectorSet2,x)
.8ac4					Unused1:
.8ac4					Unused2:
.8ac4					Unused3:
.8ac4					Unused4:
.8ac4	4c 9a a5	jmp $a59a			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/stop.asm

.8ac7					StopCommand:
.8ac7	a9 08		lda #$08		lda	#8
.8ac9	4c fe 8c	jmp $8cfe		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/expandline.asm

.8acc					ListConvertLine:
.8acc	9c 1d 07	stz $071d			stz 	tbOffset
.8acf	9c 29 07	stz $0729			stz 	tokenBuffer
.8ad2	a0 02		ldy #$02			ldy 	#2 							; convert line number to string
.8ad4	b1 30		lda ($30),y			lda 	(codePtr),y
.8ad6	aa		tax				tax
.8ad7	88		dey				dey
.8ad8	b1 30		lda ($30),y			lda 	(codePtr),y
.8ada	20 14 a1	jsr $a114			jsr 	ConvertInt16
.8add	85 36		sta $36				sta 	zTemp0 						; copy number into buffer
.8adf	86 37		stx $37				stx 	zTemp0+1
.8ae1	a0 00		ldy #$00			ldy 	#0
.8ae3					_LCCopyNumber:
.8ae3	b1 36		lda ($36),y			lda 	(zTemp0),y
.8ae5	20 e5 8b	jsr $8be5			jsr 	LCLWrite
.8ae8	c8		iny				iny
.8ae9	b1 36		lda ($36),y			lda 	(zTemp0),y
.8aeb	d0 f6		bne $8ae3			bne 	_LCCopyNumber
.8aed					_LCPadOut:
.8aed	a9 20		lda #$20			lda 	#' '						; pad out to 6 characters
.8aef	20 e5 8b	jsr $8be5			jsr 	LCLWrite
.8af2	ad 1d 07	lda $071d			lda 	tbOffset
.8af5	c9 06		cmp #$06			cmp 	#6
.8af7	d0 f4		bne $8aed			bne 	_LCPadOut
.8af9	a0 03		ldy #$03			ldy 	#3 							; start position.
.8afb					_LCMainLoop:
.8afb	b1 30		lda ($30),y			lda 	(codePtr),y
.8afd	c9 80		cmp #$80			cmp 	#KWC_EOL 					; end of line ?
.8aff	f0 17		beq $8b18			beq 	_LCExit
.8b01	c9 10		cmp #$10			cmp 	#16 						; 0-5 are the double punctuations
.8b03	90 14		bcc $8b19			bcc 	_LCDoubles
.8b05	c9 20		cmp #$20			cmp 	#32 						; 16-31 are shifted punctuation from 64-91
.8b07	90 20		bcc $8b29			bcc 	_LCShiftPunc
.8b09	c9 40		cmp #$40			cmp 	#64 						; 32-64 are as stored, punc and digits
.8b0b	90 2b		bcc $8b38			bcc 	_LCPunctuation
.8b0d	c9 80		cmp #$80			cmp 	#128 						; 64-127 are variable identifiers.
.8b0f	90 2d		bcc $8b3e			bcc 	_LCIdentifiers
.8b11	c9 fe		cmp #$fe			cmp 	#254 						; 128-253 are tokenised words
.8b13	90 49		bcc $8b5e			bcc 	_LCTokens
.8b15	4c b9 8b	jmp $8bb9			jmp 	_LCData 					; 254-5 are data objects
.8b18					_LCExit:
.8b18	60		rts				rts
.8b19					_LCDoubles:
.8b19	48		pha				pha
.8b1a	4a		lsr a				lsr 	a 							; put bit 2 into bit 1
.8b1b	29 02		and #$02			and 	#2
.8b1d	09 3c		ora #$3c			ora 	#60 						; make < >
.8b1f	20 e5 8b	jsr $8be5			jsr 	LCLWrite
.8b22	68		pla				pla 								; restore, do lower bit
.8b23	29 03		and #$03			and 	#3
.8b25	09 3c		ora #$3c			ora 	#60
.8b27	80 0f		bra $8b38			bra		_LCPunctuation 				; print, increment, loop
.8b29					_LCShiftPunc:
.8b29	aa		tax				tax 								; save in X
.8b2a	29 07		and #$07			and 	#7 							; lower 3 bits
.8b2c	f0 02		beq $8b30			beq 	_LCNoAdd
.8b2e	09 18		ora #$18			ora 	#24 						; adds $18 to it.
.8b30					_LCNoAdd:
.8b30	e0 18		cpx #$18			cpx 	#24 						; if >= 24 add $20
.8b32	90 02		bcc $8b36			bcc 	_LCNoAdd2
.8b34	09 20		ora #$20			ora 	#32 						; adds $20
.8b36					_LCNoAdd2:
.8b36	09 40		ora #$40			ora 	#$40 						; shift into 64-127 range and fall through.
.8b38					_LCPunctuation:
.8b38	c8		iny				iny 								; consume character
.8b39	20 e5 8b	jsr $8be5			jsr 	LCLWrite 					; write it out.
.8b3c	80 bd		bra $8afb			bra 	_LCMainLoop 				; go round again.
.8b3e					_LCIdentifiers:
.8b3e	18		clc				clc 								; convert to physical address
.8b3f	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8b41	85 37		sta $37				sta 	zTemp0+1
.8b43	c8		iny				iny
.8b44	b1 30		lda ($30),y			lda 	(codePtr),y
.8b46	85 36		sta $36				sta 	zTemp0
.8b48	c8		iny				iny
.8b49	5a		phy				phy 								; save position
.8b4a	a0 07		ldy #$07			ldy 	#7 							; output the identifier.
.8b4c					_LCOutIdentifier:
.8b4c	c8		iny				iny
.8b4d	b1 36		lda ($36),y			lda 	(zTemp0),y
.8b4f	29 7f		and #$7f			and 	#$7F
.8b51	20 13 8c	jsr $8c13			jsr 	LCLLowerCase
.8b54	20 e5 8b	jsr $8be5			jsr 	LCLWrite
.8b57	b1 36		lda ($36),y			lda 	(zTemp0),y				 	; ends when bit 7 set.
.8b59	10 f1		bpl $8b4c			bpl 	_LCOutIdentifier
.8b5b	7a		ply				ply 								; restore position
.8b5c	80 9d		bra $8afb			bra 	_LCMainLoop
.8b5e					_LCTokens:
.8b5e	aa		tax				tax 								; token in X
.8b5f	a9 14		lda #$14			lda 	#((KeywordSet2) & $FF)
.8b61	85 36		sta $36				sta 	0+zTemp0
.8b63	a9 9b		lda #$9b			lda 	#((KeywordSet2) >> 8)
.8b65	85 37		sta $37				sta 	1+zTemp0
.8b67	e0 82		cpx #$82			cpx 	#$82
.8b69	f0 16		beq $8b81			beq 	_LCUseShift
.8b6b	a9 d0		lda #$d0			lda 	#((KeywordSet1) & $FF)
.8b6d	85 36		sta $36				sta 	0+zTemp0
.8b6f	a9 9a		lda #$9a			lda 	#((KeywordSet1) >> 8)
.8b71	85 37		sta $37				sta 	1+zTemp0
.8b73	e0 81		cpx #$81			cpx 	#$81
.8b75	f0 0a		beq $8b81			beq 	_LCUseShift
.8b77	a9 a7		lda #$a7			lda 	#((KeywordSet0) & $FF)
.8b79	85 36		sta $36				sta 	0+zTemp0
.8b7b	a9 99		lda #$99			lda 	#((KeywordSet0) >> 8)
.8b7d	85 37		sta $37				sta 	1+zTemp0
.8b7f	80 01		bra $8b82			bra 	_LCNoShift
.8b81					_LCUseShift:
.8b81	c8		iny				iny
.8b82					_LCNoShift:
.8b82	20 f4 8b	jsr $8bf4			jsr 	LCCheckSpaceRequired 		; do we need a space ?
.8b85	b1 30		lda ($30),y			lda 	(codePtr),y
.8b87	aa		tax				tax 								; into X
.8b88					_LCFindText:
.8b88	ca		dex				dex
.8b89	10 0e		bpl $8b99			bpl 	_LCFoundText 				; found text.
.8b8b	b2 36		lda ($36)			lda 	(zTemp0) 					; length of text
.8b8d	1a		inc a				inc 	a 							; one extra for size
.8b8e	38		sec				sec 								; one extra for checksum
.8b8f	65 36		adc $36				adc 	zTemp0 						; go to next token
.8b91	85 36		sta $36				sta 	zTemp0
.8b93	90 f3		bcc $8b88			bcc 	_LCFindText
.8b95	e6 37		inc $37				inc 	zTemp0+1
.8b97	80 ef		bra $8b88			bra 	_LCFindText
.8b99					_LCFoundText:
.8b99	5a		phy				phy 								; save List position
.8b9a	b2 36		lda ($36)			lda 	(zTemp0)					; count to print
.8b9c	aa		tax				tax
.8b9d	a0 02		ldy #$02			ldy 	#2
.8b9f					_LCCopyToken:
.8b9f	b1 36		lda ($36),y			lda 	(zTemp0),y
.8ba1	20 13 8c	jsr $8c13			jsr 	LCLLowerCase
.8ba4	20 e5 8b	jsr $8be5			jsr 	LCLWrite
.8ba7	c8		iny				iny
.8ba8	ca		dex				dex
.8ba9	d0 f4		bne $8b9f			bne 	_LCCopyToken
.8bab	c9 28		cmp #$28			cmp 	#"(" 						; if last char not ( print a space
.8bad	f0 05		beq $8bb4			beq 	_LCNoSpace
.8baf	a9 20		lda #$20			lda 	#' '
.8bb1	20 e5 8b	jsr $8be5			jsr 	LCLWrite
.8bb4					_LCNoSpace:
.8bb4	7a		ply				ply 								; restore position.
.8bb5	c8		iny				iny 								; consume token
.8bb6	4c fb 8a	jmp $8afb			jmp 	_LCMainLoop 				; and go around again.
.8bb9					_LCData:
.8bb9	48		pha				pha 								; save type $FE/$FF
.8bba	a2 24		ldx #$24			ldx 	#'$' 						; figure out $ or "
.8bbc	c9 fe		cmp #$fe			cmp 	#$FE
.8bbe	f0 02		beq $8bc2			beq 	_LCHaveOpener
.8bc0	a2 22		ldx #$22			ldx 	#'"'
.8bc2					_LCHaveOpener:
.8bc2	8a		txa				txa 								; output prefix (# or ")
.8bc3	20 e5 8b	jsr $8be5			jsr 	LCLWrite
.8bc6	c8		iny				iny 								; get count
.8bc7	b1 30		lda ($30),y			lda 	(codePtr),y
.8bc9	aa		tax				tax
.8bca	c8		iny				iny 								; point at first character
.8bcb					_LCOutData:
.8bcb	b1 30		lda ($30),y			lda 	(codePtr),y
.8bcd	c9 00		cmp #$00			cmp 	#0
.8bcf	f0 03		beq $8bd4			beq 	_LCNoPrint
.8bd1	20 e5 8b	jsr $8be5			jsr 	LCLWrite
.8bd4					_LCNoPrint:
.8bd4	c8		iny				iny
.8bd5	ca		dex				dex
.8bd6	d0 f3		bne $8bcb			bne 	_LCOutData
.8bd8	68		pla				pla 								; closing " required ?
.8bd9	c9 ff		cmp #$ff			cmp 	#$FF
.8bdb	d0 05		bne $8be2			bne 	_LCNoQuote
.8bdd	a9 22		lda #$22			lda 	#'"'
.8bdf	20 e5 8b	jsr $8be5			jsr 	LCLWrite
.8be2					_LCNoQuote:
.8be2	4c fb 8a	jmp $8afb			jmp 	_LCMainLoop
.8be5					LCLWrite:
.8be5	da		phx				phx
.8be6	ae 1d 07	ldx $071d			ldx 	tbOffset
.8be9	9d 29 07	sta $0729,x			sta 	tokenBuffer,x
.8bec	9e 2a 07	stz $072a,x			stz 	tokenBuffer+1,x
.8bef	ee 1d 07	inc $071d			inc 	tbOffset
.8bf2	fa		plx				plx
.8bf3	60		rts				rts
.8bf4					LCCheckSpaceRequired:
.8bf4	ae 1d 07	ldx $071d			ldx 	tbOffset
.8bf7	bd 28 07	lda $0728,x			lda 	tokenBuffer-1,x 			; previous character
.8bfa	20 13 8c	jsr $8c13			jsr 	LCLLowerCase 				; saves a little effort
.8bfd	c9 30		cmp #$30			cmp 	#"0" 						; check if it was 0-9 A-Z a-z if so need space.
.8bff	90 11		bcc $8c12			bcc 	_LCCSRExit
.8c01	c9 3a		cmp #$3a			cmp 	#"9"+1
.8c03	90 08		bcc $8c0d			bcc 	_LCCSRSpace
.8c05	c9 61		cmp #$61			cmp 	#"a"
.8c07	90 09		bcc $8c12			bcc 	_LCCSRExit
.8c09	c9 7b		cmp #$7b			cmp 	#"z"+1
.8c0b	b0 05		bcs $8c12			bcs 	_LCCSRExit
.8c0d					_LCCSRSpace:
.8c0d	a9 20		lda #$20			lda 	#' '
.8c0f	20 e5 8b	jsr $8be5			jsr 	LCLWrite
.8c12					_LCCSRExit:
.8c12	60		rts				rts
.8c13					LCLLowerCase:
.8c13	c9 41		cmp #$41			cmp 	#"A"
.8c15	90 06		bcc $8c1d			bcc 	_LCLLCOut
.8c17	c9 5b		cmp #$5b			cmp 	#"Z"+1
.8c19	b0 02		bcs $8c1d			bcs 	_LCLLCOut
.8c1b	69 20		adc #$20			adc 	#$20
.8c1d					_LCLLCOut:
.8c1d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/procscan.asm

.8c1e					ProcedureScan:
.8c1e	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8c20	85 30		sta $30				sta 	codePtr
.8c22	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8c24	85 31		sta $31				sta 	codePtr+1
.8c26					_PSLoop:
.8c26	b2 30		lda ($30)			lda 	(codePtr)
.8c28	f0 42		beq $8c6c			beq 	_PSExit
.8c2a	a0 03		ldy #$03			ldy 	#3 							; is it PROC ?
.8c2c	b1 30		lda ($30),y			lda 	(codePtr),y
.8c2e	c9 98		cmp #$98			cmp 	#KWD_PROC
.8c30	d0 2d		bne $8c5f			bne 	_PSNext
.8c32	c8		iny				iny 								; get the address of the record to zTemp0 and
.8c33	b1 30		lda ($30),y			lda 	(codePtr),y
.8c35	29 c0		and #$c0			and 	#$C0
.8c37	c9 40		cmp #$40			cmp 	#$40
.8c39	d0 32		bne $8c6d			bne 	_PSSyntax
.8c3b	b1 30		lda ($30),y			lda 	(codePtr),y
.8c3d	18		clc				clc
.8c3e	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8c40	85 37		sta $37				sta 	zTemp0+1
.8c42	c8		iny				iny 								; LSB
.8c43	b1 30		lda ($30),y			lda 	(codePtr),y
.8c45	85 36		sta $36				sta 	zTemp0
.8c47	c8		iny				iny 								; character after variable call.
.8c48	98		tya				tya 								; save Y offset at +7
.8c49	a0 07		ldy #$07			ldy 	#7
.8c4b	91 36		sta ($36),y			sta 	(zTemp0),y
.8c4d	a9 18		lda #$18			lda 	#NSTProcedure 				; mark it as procedure
.8c4f	a0 02		ldy #$02			ldy 	#2
.8c51	91 36		sta ($36),y			sta 	(zTemp0),y
.8c53	a2 00		ldx #$00			ldx 	#0 							; copy code-Ptr in
.8c55					_PSCopy:
.8c55	b5 30		lda $30,x			lda 	safePtr,x
.8c57	c8		iny				iny
.8c58	91 36		sta ($36),y			sta 	(zTemp0),y
.8c5a	e8		inx				inx
.8c5b	e0 04		cpx #$04			cpx 	#4
.8c5d	d0 f6		bne $8c55			bne 	_PSCopy
.8c5f					_PSNext:
.8c5f	18		clc				clc
.8c60	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8c62	65 30		adc $30				adc 	codePtr
.8c64	85 30		sta $30				sta 	codePtr
.8c66	90 02		bcc $8c6a			bcc 	_CREExit
.8c68	e6 31		inc $31				inc 	codePtr+1
.8c6a					_CREExit:
.8c6a	80 ba		bra $8c26			bra 	_PSLoop
.8c6c					_PSExit:
.8c6c	60		rts				rts
.8c6d					_PSSyntax:
.8c6d	4c 9a a5	jmp $a59a			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/scanforward.asm

.8c70					ScanForward:
.8c70	85 36		sta $36				sta 	zTemp0 						; save XA as the two possible matches.
.8c72	86 37		stx $37				stx 	zTemp0+1
.8c74	64 38		stz $38				stz 	zTemp1 						; this is the structure count - goes up with WHILE/FOR
.8c76					_ScanLoop:
.8c76	b1 30		lda ($30),y			lda 	(codePtr),y
.8c78	c8		iny				iny
.8c79	a6 38		ldx $38				ldx 	zTemp1 						; if the count is > 0 cannot match as in substructure
.8c7b	d0 0e		bne $8c8b			bne 	_ScanGoNext
.8c7d	c5 36		cmp $36				cmp 	zTemp0 						; see if either matches
.8c7f	f0 04		beq $8c85			beq 	_ScanMatch
.8c81	c5 37		cmp $37				cmp 	zTemp0+1
.8c83	d0 06		bne $8c8b			bne 	_ScanGoNext
.8c85					_ScanMatch:
.8c85	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if asked for EOL, backtrack.
.8c87	d0 01		bne $8c8a			bne 	_ScanNotEndEOL
.8c89	88		dey				dey
.8c8a					_ScanNotEndEOL:
.8c8a	60		rts				rts
.8c8b					_ScanGoNext:
.8c8b	c9 40		cmp #$40			cmp 	#$40 						; if 00-3F, punctuation characters, loop back
.8c8d	90 e7		bcc $8c76			bcc 	_ScanLoop
.8c8f	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if 40-82, skip one extra.
.8c91	90 18		bcc $8cab			bcc 	_ScanSkipOne
.8c93	c9 fc		cmp #$fc			cmp 	#$FC 						; FC-FF are data skips
.8c95	b0 2f		bcs $8cc6			bcs 	_ScanSkipData
.8c97	c9 96		cmp #$96			cmp 	#KWC_FIRST_STRUCTURE 		; structure keyword ?
.8c99	90 db		bcc $8c76			bcc 	_ScanLoop 					; if not, ordinary keywords.
.8c9b	c9 a1		cmp #$a1			cmp 	#KWC_LAST_STRUCTURE+1
.8c9d	b0 d7		bcs $8c76			bcs 	_ScanLoop
.8c9f	c6 38		dec $38				dec 	zTemp1 						; decrement the sructure count
.8ca1	c9 9b		cmp #$9b			cmp 	#KWC_FIRST_STRUCTURE_DEC 	; back if it is a dec structure (e.g. WEND/NEXT)
.8ca3	b0 d1		bcs $8c76			bcs 	_ScanLoop
.8ca5	e6 38		inc $38				inc 	zTemp1 						; so it's an increment structure
.8ca7	e6 38		inc $38				inc 	zTemp1 						; twice to undo the dec
.8ca9	80 cb		bra $8c76			bra 	_ScanLoop
.8cab					_ScanSkipOne:
.8cab	c8		iny				iny 								; consume the extra one.
.8cac	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if not EOL loop back
.8cae	d0 c6		bne $8c76			bne 	_ScanLoop
.8cb0	18		clc				clc
.8cb1	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8cb3	65 30		adc $30				adc 	codePtr
.8cb5	85 30		sta $30				sta 	codePtr
.8cb7	90 02		bcc $8cbb			bcc 	_CREExit
.8cb9	e6 31		inc $31				inc 	codePtr+1
.8cbb					_CREExit:
.8cbb	a0 03		ldy #$03			ldy 	#3 							; scan start position.
.8cbd	b2 30		lda ($30)			lda 	(codePtr)
.8cbf	d0 b5		bne $8c76			bne 	_ScanLoop 					; if not zero, more to scan
.8cc1	a9 13		lda #$13		lda	#19
.8cc3	4c fe 8c	jmp $8cfe		jmp	ErrorHandler
.8cc6					_ScanSkipData:
.8cc6	88		dey				dey 								; point at data token
.8cc7	c8		iny				iny
.8cc8	98		tya				tya
.8cc9	38		sec				sec
.8cca	71 30		adc ($30),y			adc 	(codePtr),y
.8ccc	a8		tay				tay
.8ccd	80 a7		bra $8c76			bra 	_ScanLoop

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/while.asm

.8ccf					Command_WHILE:
.8ccf	5a		phy				phy 								; save position of the test
.8cd0	a2 00		ldx #$00			ldx 	#0
.8cd2	20 a5 97	jsr $97a5			jsr 	EvaluateNumber 				; work out the number
.8cd5	20 81 98	jsr $9881			jsr 	NSMIsZero 					; check if zero
.8cd8	f0 0e		beq $8ce8			beq 	_WHExitLoop 				; if so exit the loop
.8cda	98		tya				tya 								; position *after* test.
.8cdb	7a		ply				ply 								; restore position before test, at WHILE
.8cdc	88		dey				dey
.8cdd	48		pha				pha 								; push after test on the stack
.8cde	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; allocate 6 bytes on the return stack.
.8ce0	20 a4 98	jsr $98a4			jsr 	StackOpen
.8ce3	20 e3 98	jsr $98e3			jsr 	STKSaveCodePosition 		; save loop position - where the test value is.
.8ce6	7a		ply				ply 								; restore the position *after* the test
.8ce7	60		rts				rts
.8ce8					_WHExitLoop:
.8ce8	68		pla				pla 								; throw post loop position
.8ce9	a9 a0		lda #$a0			lda 	#KWD_WEND 					; scan forward past WEND
.8ceb	aa		tax				tax
.8cec	20 70 8c	jsr $8c70			jsr 	ScanForward
.8cef	60		rts				rts
.8cf0					Command_WEND:
.8cf0	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; check WHILE is TOS
.8cf2	a2 10		ldx #$10			ldx 	#ERRID_WHILE 				; this error
.8cf4	20 cb 98	jsr $98cb			jsr 	StackCheckFrame
.8cf7	20 f4 98	jsr $98f4			jsr 	STKLoadCodePosition 		; loop back
.8cfa	20 bd 98	jsr $98bd			jsr 	StackClose		 			; erase the frame
.8cfd	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/charcheck.asm

.9fb8					CheckRightBracket:
.9fb8	b1 30		lda ($30),y			lda 	(codePtr),y
.9fba	c8		iny				iny
.9fbb	c9 29		cmp #$29			cmp 	#KWD_RPAREN 						; exit if matches
.9fbd	d0 0f		bne $9fce			bne 	CNAFail
.9fbf	60		rts				rts
.9fc0					CheckComma:
.9fc0	b1 30		lda ($30),y			lda 	(codePtr),y
.9fc2	c8		iny				iny
.9fc3	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 						; exit if matches
.9fc5	d0 07		bne $9fce			bne 	CNAFail
.9fc7	60		rts				rts
.9fc8					CheckNextA:
.9fc8	d1 30		cmp ($30),y			cmp 	(codePtr),y
.9fca	d0 02		bne $9fce			bne 	CNAFail
.9fcc	c8		iny				iny 								; skip character
.9fcd	60		rts				rts 								; and exit
.9fce					CNAFail:
.9fce	4c 9a a5	jmp $a59a			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/errors.asm

.8cfe					ErrorHandler:
.8cfe	a8		tay				tay 								; find the error text
.8cff	f0 49		beq $8d4a			beq 	_EHEnd
.8d01	a2 00		ldx #$00			ldx 	#0
.8d03	a9 b3		lda #$b3			lda 	#((ErrorText) & $FF)
.8d05	85 36		sta $36				sta 	0+zTemp0
.8d07	a9 a5		lda #$a5			lda 	#((ErrorText) >> 8)
.8d09	85 37		sta $37				sta 	1+zTemp0
.8d0b					_EHFind:
.8d0b	88		dey				dey 								; found the error text ?
.8d0c	f0 0e		beq $8d1c			beq 	_EHFound
.8d0e					_EHFindZero:
.8d0e	b2 36		lda ($36)			lda 	(zTemp0) 					; find the next error
.8d10	e6 36		inc $36				inc 	zTemp0
.8d12	d0 02		bne $8d16			bne 	_EHFNoCarry
.8d14	e6 37		inc $37				inc 	zTemp0+1
.8d16					_EHFNoCarry:
.8d16	c9 00		cmp #$00			cmp 	#0
.8d18	d0 f4		bne $8d0e			bne 	_EHFindZero
.8d1a	80 ef		bra $8d0b			bra 	_EHFind
.8d1c					_EHFound:
.8d1c	a5 36		lda $36				lda 	zTemp0 						; print message
.8d1e	a6 37		ldx $37				ldx 	zTemp0+1
.8d20	20 57 8d	jsr $8d57			jsr 	PrintStringXA
.8d23	a0 01		ldy #$01			ldy 	#1 							; if line number zero don't print i
.8d25	b1 30		lda ($30),y			lda 	(codePtr),y
.8d27	d0 05		bne $8d2e			bne 	_EHAtMsg
.8d29	c8		iny				iny
.8d2a	b1 30		lda ($30),y			lda 	(codePtr),y
.8d2c	f0 17		beq $8d45			beq 	_EHCREnd
.8d2e					_EHAtMsg:
.8d2e	a2 8d		ldx #$8d			ldx 	#_AtMsg >> 8 				; print " at "
.8d30	a9 4d		lda #$4d			lda 	#_AtMsg & $FF
.8d32	20 57 8d	jsr $8d57			jsr 	PrintStringXA
.8d35	a0 01		ldy #$01			ldy 	#1 							; line number into XA
.8d37	b1 30		lda ($30),y			lda 	(codePtr),y
.8d39	48		pha				pha
.8d3a	c8		iny				iny
.8d3b	b1 30		lda ($30),y			lda 	(codePtr),y
.8d3d	aa		tax				tax
.8d3e	68		pla				pla
.8d3f	20 14 a1	jsr $a114			jsr 	ConvertInt16 				; convert XA to string
.8d42	20 57 8d	jsr $8d57			jsr 	PrintStringXA 				; and print it.
.8d45					_EHCREnd:
.8d45	a9 0d		lda #$0d			lda 	#13 						; new line
.8d47	20 07 a8	jsr $a807			jsr 	EXTPrintCharacter
.8d4a					_EHEnd:
.8d4a	4c 67 84	jmp $8467			jmp 	WarmStart
>8d4d	20 61 74 20 6c 69 6e 65		_AtMsg:	.text 	" at line ",0
>8d55	20 00
.8d57					PrintStringXA:
.8d57	5a		phy				phy
.8d58	86 37		stx $37				stx 	zTemp0+1
.8d5a	85 36		sta $36				sta 	zTemp0
.8d5c	a0 00		ldy #$00			ldy 	#0
.8d5e					_PSXALoop:
.8d5e	b1 36		lda ($36),y			lda 	(zTemp0),y
.8d60	f0 06		beq $8d68			beq 	_PSXAExit
.8d62	20 07 a8	jsr $a807			jsr 	EXTPrintCharacter
.8d65	c8		iny				iny
.8d66	80 f6		bra $8d5e			bra 	_PSXALoop
.8d68					_PSXAExit:
.8d68	7a		ply				ply
.8d69	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/compare.asm

.8d6a					UnaryTrue:
.8d6a	fa		plx				plx
.8d6b					ReturnTrue:
.8d6b	a9 01		lda #$01			lda 	#1  						; set to 1
.8d6d	20 53 98	jsr $9853			jsr 	NSMSetByte
.8d70	a9 80		lda #$80			lda 	#$80 						; set sign flag, so it is -1
.8d72	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8d75	60		rts				rts
.8d76					UnaryFalse:
.8d76	fa		plx				plx
.8d77					ReturnFalse:
.8d77	4c 51 98	jmp $9851			jmp 	NSMSetZero 					; set it all to zero
.8d7a					BinaryCompareEqual:
.8d7a	fa		plx				plx
.8d7b	20 b6 8d	jsr $8db6			jsr 	CompareBaseCode
.8d7e	c9 00		cmp #$00			cmp 	#0
.8d80	f0 e9		beq $8d6b			beq 	ReturnTrue
.8d82	80 f3		bra $8d77			bra 	ReturnFalse
.8d84					BinaryCompareLess:
.8d84	fa		plx				plx
.8d85	20 b6 8d	jsr $8db6			jsr 	CompareBaseCode
.8d88	c9 ff		cmp #$ff			cmp 	#$FF
.8d8a	f0 df		beq $8d6b			beq 	ReturnTrue
.8d8c	80 e9		bra $8d77			bra 	ReturnFalse
.8d8e					BinaryCompareGreater:
.8d8e	fa		plx				plx
.8d8f	20 b6 8d	jsr $8db6			jsr 	CompareBaseCode
.8d92	c9 01		cmp #$01			cmp 	#1
.8d94	f0 d5		beq $8d6b			beq 	ReturnTrue
.8d96	80 df		bra $8d77			bra 	ReturnFalse
.8d98					BinaryCompareNotEqual:
.8d98	fa		plx				plx
.8d99	20 b6 8d	jsr $8db6			jsr 	CompareBaseCode
.8d9c	c9 00		cmp #$00			cmp 	#0
.8d9e	d0 cb		bne $8d6b			bne 	ReturnTrue
.8da0	80 d5		bra $8d77			bra 	ReturnFalse
.8da2					BinaryCompareLessEqual:
.8da2	fa		plx				plx
.8da3	20 b6 8d	jsr $8db6			jsr 	CompareBaseCode
.8da6	c9 01		cmp #$01			cmp 	#1
.8da8	d0 c1		bne $8d6b			bne 	ReturnTrue
.8daa	80 cb		bra $8d77			bra 	ReturnFalse
.8dac					BinaryCompareGreaterEqual:
.8dac	fa		plx				plx
.8dad	20 b6 8d	jsr $8db6			jsr 	CompareBaseCode
.8db0	c9 ff		cmp #$ff			cmp 	#$FF
.8db2	d0 b7		bne $8d6b			bne 	ReturnTrue
.8db4	80 c1		bra $8d77			bra 	ReturnFalse
.8db6					CompareBaseCode:
.8db6	20 17 92	jsr $9217			jsr 	DereferenceTopTwo 			; make both values if references.
.8db9	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if either is a string.
.8dbc	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8dbf	29 10		and #$10			and 	#NSTString
.8dc1	d0 40		bne $8e03			bne 	_CBCString
.8dc3	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check both are integers
.8dc6	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8dc9	d0 3b		bne $8e06			bne 	_CBCFloat
.8dcb	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8dce	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8dd1	29 08		and #$08			and 	#NSTFloat
.8dd3	d0 31		bne $8e06			bne 	_CBCFloat
.8dd5	20 09 8e	jsr $8e09			jsr 	CompareFixMinusZero
.8dd8	e8		inx				inx
.8dd9	20 09 8e	jsr $8e09			jsr 	CompareFixMinusZero
.8ddc	ca		dex				dex
.8ddd	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; are the signs different ?
.8de0	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.8de3	10 0b		bpl $8df0			bpl 	_CDCSameSign
.8de5	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; if first one is -ve
.8de8	30 16		bmi $8e00			bmi 	_CBCLess 					; return $FF
.8dea					_CBCGreater:
.8dea	a9 01		lda #$01			lda 	#1
.8dec	60		rts				rts
.8ded					_CBCEqual:
.8ded	a9 00		lda #$00			lda 	#0
.8def	60		rts				rts
.8df0					_CDCSameSign:
.8df0	20 19 8f	jsr $8f19			jsr 	SubTopTwoStack 				; unsigned subtract
.8df3	20 81 98	jsr $9881			jsr 	NSMIsZero 					; or the mantissa together
.8df6	f0 f5		beq $8ded			beq 	_CBCEqual 					; -0 == 0
.8df8	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; sign of the result. if +ve return $01 else return $FF
.8dfb	5d 01 06	eor $0601,x			eor 	NSStatus+1,x 				; however if both were -ve this is inverted
.8dfe	10 ea		bpl $8dea			bpl 	_CBCGreater
.8e00					_CBCLess:
.8e00	a9 ff		lda #$ff			lda 	#$FF
.8e02	60		rts				rts
.8e03					_CBCString:
.8e03	4c 6f 8e	jmp $8e6f			jmp 	CompareStrings
.8e06					_CBCFloat:
.8e06	4c 10 a2	jmp $a210			jmp 	CompareFloat
.8e09					CompareFixMinusZero:
.8e09	20 81 98	jsr $9881			jsr 	NSMIsZero
.8e0c	d0 03		bne $8e11			bne 	_CFXMZNotZero
.8e0e	9e 00 06	stz $0600,x			stz 	NSStatus,x
.8e11					_CFXMZNotZero:
.8e11	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/concat.asm

.8e12					StringConcat:
.8e12	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check both strings
.8e15	3d 01 06	and $0601,x			and 	NSStatus+1,x
.8e18	29 18		and #$18			and 	#NSBTypeMask
.8e1a	c9 10		cmp #$10			cmp 	#NSTString
.8e1c	d0 4e		bne $8e6c			bne		_SCType
.8e1e	64 38		stz $38				stz 	zTemp1 						; counting total length
.8e20	e8		inx				inx
.8e21	20 3f 8e	jsr $8e3f			jsr 	_SCSetupZ0 					; setup for second
.8e24	20 4a 8e	jsr $8e4a			jsr 	_SCLengthZ0 				; length for second
.8e27	ca		dex				dex
.8e28	20 3f 8e	jsr $8e3f			jsr 	_SCSetupZ0 					; setup for first
.8e2b	20 4a 8e	jsr $8e4a			jsr 	_SCLengthZ0 				; length for first
.8e2e	a5 38		lda $38				lda 	zTemp1 						; allocate memory
.8e30	20 ba a7	jsr $a7ba			jsr 	StringTempAllocate
.8e33	20 5d 8e	jsr $8e5d			jsr 	_SCCopy 					; copy first out, using zTemp0 from above
.8e36	e8		inx				inx
.8e37	20 3f 8e	jsr $8e3f			jsr 	_SCSetupZ0 					; copy second out
.8e3a	20 5d 8e	jsr $8e5d			jsr 	_SCCopy
.8e3d	ca		dex				dex
.8e3e	60		rts				rts
.8e3f					_SCSetupZ0:
.8e3f	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.8e42	85 36		sta $36				sta 	zTemp0
.8e44	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8e47	85 37		sta $37				sta 	zTemp0+1
.8e49	60		rts				rts
.8e4a					_SCLengthZ0:
.8e4a	5a		phy				phy
.8e4b	a0 00		ldy #$00			ldy 	#0
.8e4d					_SCLenLoop:
.8e4d	b1 36		lda ($36),y			lda 	(zTemp0),y
.8e4f	f0 0a		beq $8e5b			beq 	_SCLExit
.8e51	c8		iny				iny
.8e52	e6 38		inc $38				inc 	zTemp1
.8e54	10 f7		bpl $8e4d			bpl		_SCLenLoop
.8e56	a9 09		lda #$09		lda	#9
.8e58	4c fe 8c	jmp $8cfe		jmp	ErrorHandler
.8e5b					_SCLExit:
.8e5b	7a		ply				ply
.8e5c	60		rts				rts
.8e5d					_SCCopy:
.8e5d	5a		phy				phy
.8e5e	a0 00		ldy #$00			ldy 	#0
.8e60					_SCCopyLoop:
.8e60	b1 36		lda ($36),y			lda 	(zTemp0),y
.8e62	f0 06		beq $8e6a			beq 	_SCCExit
.8e64	20 f8 a7	jsr $a7f8			jsr 	StringTempWrite
.8e67	c8		iny				iny
.8e68	80 f6		bra $8e60			bra 	_SCCopyLoop
.8e6a					_SCCExit:
.8e6a	7a		ply				ply
.8e6b	60		rts				rts
.8e6c					_SCType:
.8e6c	4c a4 a5	jmp $a5a4			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/divide.asm

.9fd1					IntegerDivide:
.9fd1	fa		plx				plx
.9fd2	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.9fd5	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.9fd8	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9fd9	0a		asl a				asl 	a
.9fda	10 05		bpl $9fe1			bpl 	_NotRef
.9fdc	48		pha				pha
.9fdd	20 17 92	jsr $9217			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9fe0	68		pla				pla
.9fe1					_NotRef:
.9fe1	0a		asl a				asl 	a
.9fe2	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9fe4	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9fe7	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.9fea	f0 03		beq $9fef			beq 	_IntegerCode 				; if clear, then we have two integers
.9fec	4c a4 a5	jmp $a5a4			jmp 	TypeError 					; anything else, type mismatch.
.9fef					_IntegerCode:
.9fef	20 11 a0	jsr $a011			jsr 	CheckDivideZero 			; do div zero check
.9ff2	20 49 a0	jsr $a049			jsr 	Int32Divide 				; do the division
.9ff5	20 06 a1	jsr $a106			jsr 	CalculateSign 				; calculate result sign
.9ff8					NSMCopyPlusTwoToZero:
.9ff8	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.9ffb	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.9ffe	bd 12 06	lda $0612,x			lda 	NSMantissa1+2,x
.a001	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.a004	bd 1a 06	lda $061a,x			lda 	NSMantissa2+2,x
.a007	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.a00a	bd 22 06	lda $0622,x			lda 	NSMantissa3+2,x
.a00d	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.a010	60		rts				rts
.a011					CheckDivideZero:
.a011	e8		inx				inx
.a012	20 81 98	jsr $9881			jsr 	NSMIsZero
.a015	f0 02		beq $a019			beq 	_CDVError
.a017	ca		dex				dex
.a018	60		rts				rts
.a019					_CDVError:
.a019	a9 03		lda #$03		lda	#3
.a01b	4c fe 8c	jmp $8cfe		jmp	ErrorHandler
.a01e					IntegerModulus:
.a01e	fa		plx				plx
.a01f	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.a022	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.a025	0a		asl a				asl 	a 							; shift reference bit into sign bit
.a026	0a		asl a				asl 	a
.a027	10 05		bpl $a02e			bpl 	_NotRef
.a029	48		pha				pha
.a02a	20 17 92	jsr $9217			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.a02d	68		pla				pla
.a02e					_NotRef:
.a02e	0a		asl a				asl 	a
.a02f	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.a031	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.a034	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.a037	f0 03		beq $a03c			beq 	_IntegerCode 				; if clear, then we have two integers
.a039	4c a4 a5	jmp $a5a4			jmp 	TypeError 					; anything else, type mismatch.
.a03c					_IntegerCode:
.a03c	20 11 a0	jsr $a011			jsr 	CheckDivideZero 			; do div zero check
.a03f	20 49 a0	jsr $a049			jsr 	Int32Divide 				; do the division
.a042	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; clear the sign bit.
.a045	5e 00 06	lsr $0600,x			lsr 	NSStatus,x
.a048	60		rts				rts
.a049					Int32Divide:
.a049	48		pha				pha 								; save AXY
.a04a	5a		phy				phy
.a04b	20 28 98	jsr $9828			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.a04e	20 4d 98	jsr $984d			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.a051	a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.a053					_I32DivideLoop:
.a053	e8		inx				inx
.a054	e8		inx				inx
.a055	20 66 98	jsr $9866			jsr 	NSMShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.a058	ca		dex				dex
.a059	ca		dex				dex
.a05a	20 67 98	jsr $9867			jsr 	NSMRotateLeft
.a05d	20 89 a0	jsr $a089			jsr 	DivideCheckSubtract 		; check if subtract possible
.a060	90 03		bcc $a065			bcc 	_I32DivideNoCarryIn
.a062	fe 0a 06	inc $060a,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.a065					_I32DivideNoCarryIn:
.a065	88		dey				dey 								; loop round till division completed.
.a066	d0 eb		bne $a053			bne 	_I32DivideLoop
.a068	7a		ply				ply 								; restore AXY and exit
.a069	68		pla				pla
.a06a	60		rts				rts
.a06b					Int32ShiftDivide:
.a06b	48		pha				pha 								; save AY
.a06c	5a		phy				phy
.a06d	e8		inx				inx 								; clear S[X+2]
.a06e	e8		inx				inx
.a06f	20 51 98	jsr $9851			jsr 	NSMSetZero
.a072	ca		dex				dex
.a073	ca		dex				dex
.a074	a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.a076					_I32SDLoop:
.a076	20 89 a0	jsr $a089			jsr 	DivideCheckSubtract 		; check if subtract possible
.a079	e8		inx				inx
.a07a	e8		inx				inx
.a07b	20 67 98	jsr $9867			jsr 	NSMRotateLeft				; shift 64 bit FPA left, rotating carry in
.a07e	ca		dex				dex
.a07f	ca		dex				dex
.a080	20 67 98	jsr $9867			jsr 	NSMRotateLeft
.a083	88		dey				dey 	 							; do 31 times
.a084	d0 f0		bne $a076			bne 	_I32SDLoop
.a086	7a		ply				ply 								; restore AY and exit
.a087	68		pla				pla
.a088	60		rts				rts
.a089					DivideCheckSubtract:
.a089	20 19 8f	jsr $8f19			jsr 	SubTopTwoStack 				; subtract Stack[X+1] from Stack[X+0]
.a08c	b0 04		bcs $a092			bcs 	_DCSExit 					; if carry set, then could do, exit
.a08e	20 f3 8e	jsr $8ef3			jsr 	AddTopTwoStack 				; add it back in
.a091	18		clc				clc 								; and return False
.a092					_DCSExit:
.a092	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/multiply.asm

.a093					MulInteger:
.a093	fa		plx				plx
.a094	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.a097	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.a09a	0a		asl a				asl 	a 							; shift reference bit into sign bit
.a09b	0a		asl a				asl 	a
.a09c	10 05		bpl $a0a3			bpl 	_NotRef
.a09e	48		pha				pha
.a09f	20 17 92	jsr $9217			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.a0a2	68		pla				pla
.a0a3					_NotRef:
.a0a3	0a		asl a				asl 	a 							; put MSB of type into A:7
.a0a4	30 0b		bmi $a0b1			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.a0a6	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.a0a9	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.a0ac	f0 06		beq $a0b4			beq 	_IntegerCode 				; if clear, then we have two integers
.a0ae	4c e7 a2	jmp $a2e7			jmp 	FloatingPointMultiply 							; otherwise at least one float.
.a0b1					_StringData:
.a0b1	4c ae a5	jmp $a5ae			jmp 	NotDoneError							; at least one string - don't know both are strings.
.a0b4					_IntegerCode:
.a0b4	20 c1 a0	jsr $a0c1			jsr 	MultiplyShort
.a0b7	c9 00		cmp #$00			cmp 	#0
.a0b9	f0 05		beq $a0c0			beq 	_MIExit
.a0bb	a9 04		lda #$04		lda	#4
.a0bd	4c fe 8c	jmp $8cfe		jmp	ErrorHandler
.a0c0					_MIExit:
.a0c0	60		rts				rts
.a0c1					MultiplyShort:
.a0c1	5a		phy				phy 								; save Y
.a0c2	20 28 98	jsr $9828			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.a0c5	20 4d 98	jsr $984d			jsr 	NSMSetZeroMantissaOnly 		; set mantissa S[X] to zero
.a0c8	a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.a0ca					_I32MLoop:
.a0ca	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.a0cd	1d 12 06	ora $0612,x			ora 	NSMantissa1+2,x
.a0d0	1d 1a 06	ora $061a,x			ora 	NSMantissa2+2,x
.a0d3	1d 22 06	ora $0622,x			ora 	NSMantissa3+2,x
.a0d6	f0 28		beq $a100			beq 	_I32MExit 					; exit if zero
.a0d8	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.a0db	29 01		and #$01			and 	#1
.a0dd	f0 0e		beq $a0ed			beq 	_I32MNoAdd
.a0df	20 f3 8e	jsr $8ef3			jsr 	AddTopTwoStack 				; if so add S[X+1] to S[X+0]
.a0e2	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.a0e5	10 06		bpl $a0ed			bpl 	_I32MNoAdd
.a0e7					_I32ShiftRight:
.a0e7	20 74 98	jsr $9874			jsr 	NSMShiftRight 				; shift S[X] right
.a0ea	c8		iny				iny 								; increment shift count
.a0eb	80 0a		bra $a0f7			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.a0ed					_I32MNoAdd:
.a0ed	3c 21 06	bit $0621,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.a0f0	70 f5		bvs $a0e7			bvs 	_I32ShiftRight 				; instead.
.a0f2	e8		inx				inx
.a0f3	20 66 98	jsr $9866			jsr 	NSMShiftLeft 				; shift additive S[X+1] left
.a0f6	ca		dex				dex
.a0f7					_I32MShiftUpper:
.a0f7	e8		inx				inx 								; shift S[X+2] right
.a0f8	e8		inx				inx
.a0f9	20 74 98	jsr $9874			jsr 	NSMShiftRight
.a0fc	ca		dex				dex
.a0fd	ca		dex				dex
.a0fe	80 ca		bra $a0ca			bra 	_I32MLoop 					; try again.
.a100					_I32MExit:
.a100	20 06 a1	jsr $a106			jsr 	CalculateSign
.a103	98		tya				tya 								; shift in A
.a104	7a		ply				ply 								; restore Y and exit
.a105	60		rts				rts
.a106					CalculateSign:
.a106	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.a109	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; shift result left
.a10c	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.a10f	0a		asl a				asl 	a 							; shift bit 7 into carry
.a110	7e 00 06	ror $0600,x			ror 	NSStatus,x 					; shift right into status byte.
.a113	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/scompare.asm

.8e6f					CompareStrings:
.8e6f	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check both are strings
.8e72	3d 01 06	and $0601,x			and 	NSStatus+1,x
.8e75	29 10		and #$10			and 	#NSBIsString
.8e77	f0 2c		beq $8ea5			beq 	_CSTypeError
.8e79	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy string addresses to zTemp0/1
.8e7c	85 36		sta $36				sta 	zTemp0
.8e7e	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8e81	85 37		sta $37				sta 	zTemp0+1
.8e83	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.8e86	85 38		sta $38				sta 	zTemp1
.8e88	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.8e8b	85 39		sta $39				sta 	zTemp1+1
.8e8d	5a		phy				phy 								; save Y so we can access strings
.8e8e	a0 ff		ldy #$ff			ldy 	#$FF 						; -1 for pre increment.
.8e90					_CSLoop:
.8e90	c8		iny				iny
.8e91	b1 36		lda ($36),y			lda 	(zTemp0),y 					; check if they are the same
.8e93	d1 38		cmp ($38),y			cmp 	(zTemp1),y
.8e95	d0 06		bne $8e9d			bne 	_CSDifferent
.8e97	c9 00		cmp #$00			cmp 	#0 							; reached end ?
.8e99	d0 f5		bne $8e90			bne 	_CSLoop 					; still comparing
.8e9b					_CSExit:
.8e9b	7a		ply				ply 								; reached end, return zero in A from EOS
.8e9c	60		rts				rts
.8e9d					_CSDifferent:
.8e9d	a9 ff		lda #$ff			lda 	#255 						; if < return $FF
.8e9f	90 fa		bcc $8e9b			bcc		_CSExit
.8ea1	a9 01		lda #$01			lda 	#1 							; otherwise return 1.
.8ea3	80 f6		bra $8e9b			bra 	_CSExit
.8ea5					_CSTypeError:
.8ea5	4c a4 a5	jmp $a5a4			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/shifts.asm

.8ea8					ShiftLeft:
.8ea8	38		sec				sec
.8ea9	80 01		bra $8eac			bra 	ShiftMain
.8eab					ShiftRight:
.8eab	18		clc				clc
.8eac					ShiftMain:
.8eac	fa		plx				plx 								; restore X
.8ead	08		php				php 								; save direction
.8eae	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8eb1	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8eb4	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8eb5	0a		asl a				asl 	a
.8eb6	10 05		bpl $8ebd			bpl 	_NotRef
.8eb8	48		pha				pha
.8eb9	20 17 92	jsr $9217			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8ebc	68		pla				pla
.8ebd					_NotRef:
.8ebd	0a		asl a				asl 	a
.8ebe	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8ec0	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8ec3	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8ec6	f0 03		beq $8ecb			beq 	_IntegerCode 				; if clear, then we have two integers
.8ec8	4c a4 a5	jmp $a5a4			jmp 	TypeError 					; anything else, type mismatch.
.8ecb					_IntegerCode:
.8ecb	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; check number < 32
.8ece	29 e0		and #$e0			and 	#$E0
.8ed0	1d 11 06	ora $0611,x			ora 	NSMantissa1+1,x
.8ed3	1d 19 06	ora $0619,x			ora 	NSMantissa2+1,x
.8ed6	1d 21 06	ora $0621,x			ora 	NSMantissa3+1,x
.8ed9	d0 13		bne $8eee			bne 	_SMExit0 					; if >= 32 it will always return zero.
.8edb					_SMLoop:
.8edb	de 09 06	dec $0609,x			dec 	NSMantissa0+1,x 			; predecrement, could do << 0
.8ede	30 11		bmi $8ef1			bmi 	_SMExit 					; exit if done.
.8ee0	28		plp				plp 								; restore direcition setting
.8ee1	08		php				php
.8ee2	90 05		bcc $8ee9			bcc 	_SMRight
.8ee4	20 66 98	jsr $9866			jsr 	NSMShiftLeft 				; shift left if CS
.8ee7	80 f2		bra $8edb			bra 	_SMLoop
.8ee9					_SMRight:
.8ee9	20 74 98	jsr $9874			jsr 	NSMShiftRight 				; shift right if CC
.8eec	80 ed		bra $8edb			bra 	_SMLoop
.8eee					_SMExit0:
.8eee	20 51 98	jsr $9851			jsr 	NSMSetZero 					; return zero.
.8ef1					_SMExit:
.8ef1	28		plp				plp 								; throw direction
.8ef2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/simple.asm

.8ef3					AddTopTwoStack:
.8ef3	18		clc				clc
.8ef4	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8ef7	7d 09 06	adc $0609,x			adc 		NSMantissa0+1,x
.8efa	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8efd	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8f00	7d 11 06	adc $0611,x			adc 		NSMantissa1+1,x
.8f03	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8f06	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8f09	7d 19 06	adc $0619,x			adc 		NSMantissa2+1,x
.8f0c	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8f0f	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8f12	7d 21 06	adc $0621,x			adc 		NSMantissa3+1,x
.8f15	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8f18	60		rts				rts
.8f19					SubTopTwoStack:
.8f19	38		sec				sec
.8f1a	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8f1d	fd 09 06	sbc $0609,x			sbc 		NSMantissa0+1,x
.8f20	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8f23	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8f26	fd 11 06	sbc $0611,x			sbc 		NSMantissa1+1,x
.8f29	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8f2c	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8f2f	fd 19 06	sbc $0619,x			sbc 		NSMantissa2+1,x
.8f32	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8f35	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8f38	fd 21 06	sbc $0621,x			sbc 		NSMantissa3+1,x
.8f3b	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8f3e	60		rts				rts
.8f3f					AddInteger:
.8f3f	fa		plx				plx
.8f40	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8f43	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8f46	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8f47	0a		asl a				asl 	a
.8f48	10 05		bpl $8f4f			bpl 	_NotRef
.8f4a	48		pha				pha
.8f4b	20 17 92	jsr $9217			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8f4e	68		pla				pla
.8f4f					_NotRef:
.8f4f	0a		asl a				asl 	a 							; put MSB of type into A:7
.8f50	30 0b		bmi $8f5d			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.8f52	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8f55	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8f58	f0 06		beq $8f60			beq 	_IntegerCode 				; if clear, then we have two integers
.8f5a	4c 6f a1	jmp $a16f			jmp 	FloatingPointAdd 							; otherwise at least one float.
.8f5d					_StringData:
.8f5d	4c 12 8e	jmp $8e12			jmp 	StringConcat							; at least one string - don't know both are strings.
.8f60					_IntegerCode:
.8f60					AddCode:
.8f60	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.8f63	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.8f66	10 8b		bpl $8ef3			bpl 	AddTopTwoStack
.8f68	20 19 8f	jsr $8f19			jsr 	SubTopTwoStack 				; do a physical subtraction
.8f6b	3c 20 06	bit $0620,x			bit 	NSMantissa3,x 				; result is +ve, okay
.8f6e	10 09		bpl $8f79			bpl 	_AddExit
.8f70	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; sign is that of 2nd value
.8f73	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8f76	20 06 98	jsr $9806			jsr 	NSMNegateMantissa 			; negate the mantissa and exit
.8f79					_AddExit:
.8f79	60		rts				rts
.8f7a					SubInteger:
.8f7a	fa		plx				plx
.8f7b	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8f7e	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8f81	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8f82	0a		asl a				asl 	a
.8f83	10 05		bpl $8f8a			bpl 	_NotRef
.8f85	48		pha				pha
.8f86	20 17 92	jsr $9217			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8f89	68		pla				pla
.8f8a					_NotRef:
.8f8a	0a		asl a				asl 	a 							; put MSB of type into A:7
.8f8b	30 0b		bmi $8f98			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.8f8d	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8f90	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8f93	f0 06		beq $8f9b			beq 	_IntegerCode 				; if clear, then we have two integers
.8f95	4c 74 a1	jmp $a174			jmp 	FloatingPointSub 							; otherwise at least one float.
.8f98					_StringData:
.8f98	4c ae a5	jmp $a5ae			jmp 	NotDoneError							; at least one string - don't know both are strings.
.8f9b					_IntegerCode:
.8f9b	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; negate the second value.
.8f9e	49 80		eor #$80			eor 	#$80
.8fa0	9d 01 06	sta $0601,x			sta 	NSStatus+1,x
.8fa3	80 bb		bra $8f60			bra 	AddCode 					; and do the same code as add.
.8fa5					AndInteger:
.8fa5	fa		plx				plx
.8fa6	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8fa9	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8fac	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8fad	0a		asl a				asl 	a
.8fae	10 05		bpl $8fb5			bpl 	_NotRef
.8fb0	48		pha				pha
.8fb1	20 17 92	jsr $9217			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8fb4	68		pla				pla
.8fb5					_NotRef:
.8fb5	0a		asl a				asl 	a
.8fb6	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8fb8	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8fbb	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8fbe	f0 03		beq $8fc3			beq 	_IntegerCode 				; if clear, then we have two integers
.8fc0	4c a4 a5	jmp $a5a4			jmp 	TypeError 					; anything else, type mismatch.
.8fc3					_IntegerCode:
.8fc3	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8fc6	3d 09 06	and $0609,x			and 		NSMantissa0+1,x
.8fc9	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8fcc	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8fcf	3d 11 06	and $0611,x			and 		NSMantissa1+1,x
.8fd2	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8fd5	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8fd8	3d 19 06	and $0619,x			and 		NSMantissa2+1,x
.8fdb	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8fde	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8fe1	3d 21 06	and $0621,x			and 		NSMantissa3+1,x
.8fe4	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8fe7	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.8fea	60		rts				rts
.8feb					OraInteger:
.8feb	fa		plx				plx
.8fec	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8fef	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8ff2	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8ff3	0a		asl a				asl 	a
.8ff4	10 05		bpl $8ffb			bpl 	_NotRef
.8ff6	48		pha				pha
.8ff7	20 17 92	jsr $9217			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8ffa	68		pla				pla
.8ffb					_NotRef:
.8ffb	0a		asl a				asl 	a
.8ffc	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8ffe	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9001	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.9004	f0 03		beq $9009			beq 	_IntegerCode 				; if clear, then we have two integers
.9006	4c a4 a5	jmp $a5a4			jmp 	TypeError 					; anything else, type mismatch.
.9009					_IntegerCode:
.9009	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.900c	1d 09 06	ora $0609,x			ora 		NSMantissa0+1,x
.900f	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.9012	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.9015	1d 11 06	ora $0611,x			ora 		NSMantissa1+1,x
.9018	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.901b	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.901e	1d 19 06	ora $0619,x			ora 		NSMantissa2+1,x
.9021	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.9024	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.9027	1d 21 06	ora $0621,x			ora 		NSMantissa3+1,x
.902a	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.902d	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.9030	60		rts				rts
.9031					EorInteger:
.9031	fa		plx				plx
.9032	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.9035	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.9038	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9039	0a		asl a				asl 	a
.903a	10 05		bpl $9041			bpl 	_NotRef
.903c	48		pha				pha
.903d	20 17 92	jsr $9217			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9040	68		pla				pla
.9041					_NotRef:
.9041	0a		asl a				asl 	a
.9042	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9044	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9047	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.904a	f0 03		beq $904f			beq 	_IntegerCode 				; if clear, then we have two integers
.904c	4c a4 a5	jmp $a5a4			jmp 	TypeError 					; anything else, type mismatch.
.904f					_IntegerCode:
.904f	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.9052	5d 09 06	eor $0609,x			eor 		NSMantissa0+1,x
.9055	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.9058	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.905b	5d 11 06	eor $0611,x			eor 		NSMantissa1+1,x
.905e	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9061	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.9064	5d 19 06	eor $0619,x			eor 		NSMantissa2+1,x
.9067	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.906a	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.906d	5d 21 06	eor $0621,x			eor 		NSMantissa3+1,x
.9070	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.9073	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.9076	60		rts				rts
.9077					WordIndirect:
.9077	fa		plx				plx
.9078	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.907b	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.907e	0a		asl a				asl 	a 							; shift reference bit into sign bit
.907f	0a		asl a				asl 	a
.9080	10 05		bpl $9087			bpl 	_NotRef
.9082	48		pha				pha
.9083	20 17 92	jsr $9217			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9086	68		pla				pla
.9087					_NotRef:
.9087	0a		asl a				asl 	a
.9088	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.908a	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.908d	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.9090	f0 03		beq $9095			beq 	_IntegerCode 				; if clear, then we have two integers
.9092	4c a4 a5	jmp $a5a4			jmp 	TypeError 					; anything else, type mismatch.
.9095					_IntegerCode:
.9095	20 60 8f	jsr $8f60			jsr 	AddCode 					; add the two values
.9098	a9 22		lda #$22			lda 	#NSBIsReference+2 			; make a 2 byte reference
.909a	9d 00 06	sta $0600,x			sta 	NSStatus,x
.909d	60		rts				rts
.909e					ByteIndirect:
.909e	fa		plx				plx
.909f	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.90a2	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.90a5	0a		asl a				asl 	a 							; shift reference bit into sign bit
.90a6	0a		asl a				asl 	a
.90a7	10 05		bpl $90ae			bpl 	_NotRef
.90a9	48		pha				pha
.90aa	20 17 92	jsr $9217			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.90ad	68		pla				pla
.90ae					_NotRef:
.90ae	0a		asl a				asl 	a
.90af	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.90b1	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.90b4	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.90b7	f0 03		beq $90bc			beq 	_IntegerCode 				; if clear, then we have two integers
.90b9	4c a4 a5	jmp $a5a4			jmp 	TypeError 					; anything else, type mismatch.
.90bc					_IntegerCode:
.90bc	20 60 8f	jsr $8f60			jsr 	AddCode 					; add the two values
.90bf	a9 21		lda #$21			lda 	#NSBIsReference+1 			; make a 1 byte reference
.90c1	9d 00 06	sta $0600,x			sta 	NSStatus,x
.90c4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/tostring.asm

.a114					ConvertInt16:
.a114	8d 08 06	sta $0608			sta 	NSMantissa0 				; set up as 32 bit conversion
.a117	8e 10 06	stx $0610			stx 	NSMantissa1
.a11a	9c 18 06	stz $0618			stz 	NSMantissa2
.a11d	9c 20 06	stz $0620			stz 	NSMantissa3
.a120	9c 00 06	stz $0600			stz 	NSStatus 					; positive integer
.a123	a2 00		ldx #$00			ldx 	#0 							; stack level
.a125	a9 0a		lda #$0a			lda 	#10 						; base
.a127	80 00		bra $a129			bra 	ConvertInt32
.a129					ConvertInt32:
.a129	5a		phy				phy
.a12a	a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.a12c	2c 00 06	bit $0600			bit 	NSStatus 					; output a - if not negative.
.a12f	10 08		bpl $a139			bpl 	_CI32NotNeg
.a131	48		pha				pha
.a132	a9 2d		lda #$2d			lda 	#'-'
.a134	99 77 08	sta $0877,y			sta 	NumberBuffer,y
.a137	c8		iny				iny
.a138	68		pla				pla
.a139					_CI32NotNeg:
.a139	20 47 a1	jsr $a147			jsr 	_CI32DivideConvert 			; recursive conversion
.a13c	a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.a13e	99 77 08	sta $0877,y			sta 	NumberBuffer,y
.a141	7a		ply				ply
.a142	a2 08		ldx #$08			ldx 	#NumberBuffer >> 8
.a144	a9 77		lda #$77			lda 	#NumberBuffer & $FF
.a146	60		rts				rts
.a147					_CI32DivideConvert:
.a147	e8		inx				inx 								; write to next slot up
.a148	20 53 98	jsr $9853			jsr 	NSMSetByte
.a14b	ca		dex				dex
.a14c	20 49 a0	jsr $a049			jsr 	Int32Divide 				; divide
.a14f	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; save remainder
.a152	48		pha				pha
.a153	20 f8 9f	jsr $9ff8			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.a156	20 81 98	jsr $9881			jsr 	NSMIsZero 					; is it zero ?
.a159	f0 06		beq $a161			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.a15b	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.a15e	20 47 a1	jsr $a147			jsr 	_CI32DivideConvert 			; and recusrively call.
.a161					_CI32NoRecurse:
.a161	68		pla				pla 								; remainder
.a162	c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII
.a164	90 02		bcc $a168			bcc 	_CI32NotHex
.a166	69 26		adc #$26			adc 	#6+32
.a168					_CI32NotHex:
.a168	69 30		adc #$30			adc 	#48
.a16a	99 77 08	sta $0877,y			sta 	NumberBuffer,y 				; write out and exit
.a16d	c8		iny				iny
.a16e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/expression.asm


;******  Processing file: ./common/expressions/../generated/precedence.dat

.90c5					PrecedenceLevel:
>90c5	04					.byte	 4	; $00 <<
>90c6	02					.byte	 2	; $01 <=
>90c7	02					.byte	 2	; $02 <>
>90c8	00					.byte	 0	; $03 !!3
>90c9	00					.byte	 0	; $04 ><
>90ca	02					.byte	 2	; $05 >=
>90cb	04					.byte	 4	; $06 >>
>90cc	00					.byte	 0	; $07 !!7
>90cd	00					.byte	 0	; $08 !!8
>90ce	00					.byte	 0	; $09 !!9
>90cf	00					.byte	 0	; $0a !!10
>90d0	00					.byte	 0	; $0b !!11
>90d1	00					.byte	 0	; $0c !!12
>90d2	00					.byte	 0	; $0d !!13
>90d3	00					.byte	 0	; $0e !!14
>90d4	00					.byte	 0	; $0f !!15
>90d5	00					.byte	 0	; $10 @
>90d6	00					.byte	 0	; $11 !!17
>90d7	00					.byte	 0	; $12 !!18
>90d8	00					.byte	 0	; $13 [
>90d9	04					.byte	 4	; $14 \
>90da	00					.byte	 0	; $15 ]
>90db	01					.byte	 1	; $16 ^
>90dc	00					.byte	 0	; $17 _
>90dd	00					.byte	 0	; $18 `
>90de	00					.byte	 0	; $19 !!25
>90df	00					.byte	 0	; $1a !!26
>90e0	00					.byte	 0	; $1b {
>90e1	01					.byte	 1	; $1c |
>90e2	00					.byte	 0	; $1d }
>90e3	00					.byte	 0	; $1e ~
>90e4	00					.byte	 0	; $1f [7m<7F>[m
>90e5	00					.byte	 0	; $20
>90e6	05					.byte	 5	; $21 !
>90e7	00					.byte	 0	; $22 "
>90e8	00					.byte	 0	; $23 #
>90e9	05					.byte	 5	; $24 $
>90ea	04					.byte	 4	; $25 %
>90eb	01					.byte	 1	; $26 &
>90ec	00					.byte	 0	; $27 '
>90ed	00					.byte	 0	; $28 (
>90ee	00					.byte	 0	; $29 )
>90ef	04					.byte	 4	; $2a *
>90f0	03					.byte	 3	; $2b +
>90f1	00					.byte	 0	; $2c ,
>90f2	03					.byte	 3	; $2d -
>90f3	00					.byte	 0	; $2e .
>90f4	04					.byte	 4	; $2f /
>90f5	00					.byte	 0	; $30 0
>90f6	00					.byte	 0	; $31 1
>90f7	00					.byte	 0	; $32 2
>90f8	00					.byte	 0	; $33 3
>90f9	00					.byte	 0	; $34 4
>90fa	00					.byte	 0	; $35 5
>90fb	00					.byte	 0	; $36 6
>90fc	00					.byte	 0	; $37 7
>90fd	00					.byte	 0	; $38 8
>90fe	00					.byte	 0	; $39 9
>90ff	00					.byte	 0	; $3a :
>9100	00					.byte	 0	; $3b ;
>9101	02					.byte	 2	; $3c <
>9102	02					.byte	 2	; $3d =
>9103	02					.byte	 2	; $3e >
>9104	05					.byte	 5	; $3f ?

;******  Return to file: ./common/expressions/expression.asm

.9105					EvaluateExpressionAt0:
.9105	a2 00		ldx #$00			ldx 	#0 							; bottom stack level
.9107					EvaluateExpression:
.9107	a9 00		lda #$00			lda 	#0 							; lowest precedence level
.9109					EvaluateExpressionAtPrecedence:
.9109	48		pha				pha 								; save precedence level
.910a	20 d8 93	jsr $93d8			jsr 	EvaluateTerm 				; evaluate term into level X.
.910d	68		pla				pla 								; restore precedence level.
.910e					_EXPRLoop:
.910e	85 36		sta $36				sta 	zTemp0 						; save current precedence level.
.9110	b1 30		lda ($30),y			lda 	(codePtr),y
.9112	c9 40		cmp #$40			cmp		#$40 						; if >= $40 cannot be an operator
.9114	b0 25		bcs $913b			bcs 	_EXPRExit
.9116	da		phx				phx 								; read the operator precedence
.9117	aa		tax				tax
.9118	bd c5 90	lda $90c5,x			lda 	PrecedenceLevel,x
.911b	fa		plx				plx
.911c	c9 00		cmp #$00			cmp 	#0							; if zero exit (not an operator)
.911e	f0 1b		beq $913b			beq 	_EXPRExit
.9120	85 37		sta $37				sta 	zTemp0+1 					; save operator precedence level.
.9122	a5 36		lda $36				lda 	zTemp0 						; compare current precedence vs. operator precedence
.9124	c5 37		cmp $37				cmp 	zTemp0+1
.9126	b0 13		bcs $913b			bcs		_EXPRExit 					; if current >= operator exit
.9128	48		pha				pha 								; save current precedence.
.9129	b1 30		lda ($30),y			lda 	(codePtr),y
.912b	c8		iny				iny
.912c	48		pha				pha
.912d	a5 37		lda $37				lda 	zTemp0+1 					; get operator precedence level
.912f	e8		inx				inx 								; work out the right hand side.
.9130	20 09 91	jsr $9109			jsr 	EvaluateExpressionAtPrecedence
.9133	ca		dex				dex
.9134	68		pla				pla 								; get operator, call the code.
.9135	20 3e 91	jsr $913e			jsr 	_EXPRCaller
.9138	68		pla				pla 								; restore precedence level
.9139	80 d3		bra $910e			bra 	_EXPRLoop 					; and go round.
.913b					_EXPRExit:
.913b	a5 36		lda $36				lda 	zTemp0 						; A = current precedence level.
.913d	60		rts				rts
.913e					_EXPRCaller:
.913e	da		phx				phx 								; save on stack, first thing is to restore it
.913f	0a		asl a				asl 	a 							; double so can use vectors into X
.9140	aa		tax				tax
.9141	7c 7c 80	jmp ($807c,x)			jmp 	(VectorSetPunc,x) 			; and go to the code.

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/addsub.asm

.a16f					FloatingPointAdd:
.a16f	20 10 a3	jsr $a310			jsr 	FloatPrepare 				; prepare for floats
.a172	80 0b		bra $a17f			bra 	FloatAdd
.a174					FloatingPointSub:
.a174	20 10 a3	jsr $a310			jsr 	FloatPrepare 				; prepare for floats
.a177					FloatSubtract:
.a177	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; negate FPB
.a17a	49 80		eor #$80			eor 	#$80
.a17c	9d 01 06	sta $0601,x			sta 	NSStatus+1,x				; and fall through.
.a17f					FloatAdd:
.a17f	48		pha				pha
.a180	5a		phy				phy
.a181	20 21 a3	jsr $a321			jsr 	NSNormalise 				; normalise S[X]
.a184	f0 54		beq $a1da			beq 	_FAReturn1
.a186	e8		inx				inx 								; normalise S[X+1]
.a187	20 21 a3	jsr $a321			jsr 	NSNormalise
.a18a	ca		dex				dex
.a18b	c9 00		cmp #$00			cmp 	#0
.a18d	f0 6f		beq $a1fe			beq 	_FAExit 					; if so, just return A
.a18f	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; are the exponents the same ?
.a192	dd 29 06	cmp $0629,x			cmp 	NSExponent+1,x
.a195	f0 1b		beq $a1b2			beq 	_FAExponentsEqual
.a197	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; work out the larger exponent
.a19a	a8		tay				tay
.a19b	38		sec				sec 								; do a signed comparison of the exponents.
.a19c	fd 29 06	sbc $0629,x			sbc 	NSExponent+1,x
.a19f	50 02		bvc $a1a3			bvc 	_FANoSignedChange
.a1a1	49 80		eor #$80			eor 	#$80
.a1a3					_FANoSignedChange:
.a1a3	29 80		and #$80			and 	#$80
.a1a5	10 03		bpl $a1aa			bpl 	_FAHaveMax
.a1a7	bc 29 06	ldy $0629,x			ldy 	NSExponent+1,x
.a1aa					_FAHaveMax:
.a1aa	20 01 a2	jsr $a201			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.a1ad	e8		inx				inx
.a1ae	20 01 a2	jsr $a201			jsr 	_FAShiftToExponent
.a1b1	ca		dex				dex
.a1b2					_FAExponentsEqual:
.a1b2	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; are the signs the same
.a1b5	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.a1b8	30 10		bmi $a1ca			bmi 	_FADifferentSigns
.a1ba	20 f3 8e	jsr $8ef3			jsr 	AddTopTwoStack 				; do the add of the mantissae
.a1bd	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.a1c0	10 3c		bpl $a1fe			bpl 	_FAExit 					; if no, we are done.
.a1c2	20 74 98	jsr $9874			jsr 	NSMShiftRight 				; shift A right, renormalising it.
.a1c5	fe 28 06	inc $0628,x			inc 	NSExponent,x 				; bump the exponent and exit
.a1c8	80 34		bra $a1fe			bra 	_FAExit
.a1ca					_FADifferentSigns:
.a1ca	20 19 8f	jsr $8f19			jsr 	SubTopTwoStack 				; subtract mantissa B from A
.a1cd	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; is the result negative ?
.a1d0	10 2c		bpl $a1fe			bpl 	_FAExit 					; if no, we are done.
.a1d2	20 fd 97	jsr $97fd			jsr 	NSMNegate 					; netate result
.a1d5	20 06 98	jsr $9806			jsr 	NSMNegateMantissa 			; negate (2'c) the mantissa
.a1d8	80 24		bra $a1fe			bra 	_FAExit
.a1da					_FAReturn1:
.a1da	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.a1dd	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.a1e0	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.a1e3	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.a1e6	bd 19 06	lda $0619,x			lda 	NSMantissa2+1,x
.a1e9	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.a1ec	bd 21 06	lda $0621,x			lda 	NSMantissa3+1,x
.a1ef	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.a1f2	bd 29 06	lda $0629,x			lda 	NSExponent+1,x
.a1f5	9d 28 06	sta $0628,x			sta 	NSExponent,x
.a1f8	bd 01 06	lda $0601,x			lda 	NSStatus+1,x
.a1fb	9d 00 06	sta $0600,x			sta 	NSStatus,x
.a1fe					_FAExit:
.a1fe	7a		ply				ply
.a1ff	68		pla				pla
.a200	60		rts				rts
.a201					_FAShiftToExponent:
.a201					_FAShiftToExponent2:
.a201	98		tya				tya 								; compare Y to exponent
.a202	dd 28 06	cmp $0628,x			cmp 	NSExponent,x 				; reached the exponent required ?
.a205	f0 08		beq $a20f			beq 	_FASEExit 					; exit if so.
.a207	20 74 98	jsr $9874			jsr 	NSMShiftRight	 			; shift the mantissa right
.a20a	fe 28 06	inc $0628,x			inc 	NSExponent,x 				; increment exponent
.a20d	80 f2		bra $a201			bra 	_FAShiftToExponent2
.a20f					_FASEExit:
.a20f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/compare.asm

.a210					CompareFloat:
.a210	20 77 a1	jsr $a177			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.a213	bd 10 06	lda $0610,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.a216	29 f8		and #$f8			and 	#$F8
.a218	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.a21b	1d 20 06	ora $0620,x			ora 	NSMantissa3,x
.a21e	f0 09		beq $a229			beq 	_FCExit 					; zero, so approximately identical
.a220	a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.a222	3c 00 06	bit $0600,x			bit 	NSStatus,x
.a225	10 02		bpl $a229			bpl 	_FCExit
.a227					_FCNegative:
.a227	a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.a229					_FCExit:
.a229	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/divide.asm

.a22a					FDivideCommand:
.a22a	fa		plx				plx	 								; restore stack position
.a22b	20 10 a3	jsr $a310			jsr 	FloatPrepare 				; prepare for floats
.a22e					FloatDivide:
.a22e	48		pha				pha
.a22f	e8		inx				inx
.a230	20 21 a3	jsr $a321			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.a233	ca		dex				dex
.a234	c9 00		cmp #$00			cmp 	#0
.a236	f0 20		beq $a258			beq 	_FDZero
.a238	20 21 a3	jsr $a321			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.a23b	f0 19		beq $a256			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.a23d	20 6b a0	jsr $a06b			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.a240	20 f8 9f	jsr $9ff8			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.a243	20 21 a3	jsr $a321			jsr		NSNormalise 				; renormalise
.a246	20 06 a1	jsr $a106			jsr 	CalculateSign 				; calculate result sign
.a249	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; calculate exponent
.a24c	38		sec				sec
.a24d	fd 29 06	sbc $0629,x			sbc 	NSExponent+1,x
.a250	38		sec				sec
.a251	e9 1e		sbc #$1e			sbc 	#30
.a253	9d 28 06	sta $0628,x			sta 	NSExponent,x
.a256					_FDExit:
.a256	68		pla				pla
.a257	60		rts				rts
.a258					_FDZero:
.a258	a9 03		lda #$03		lda	#3
.a25a	4c fe 8c	jmp $8cfe		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/fractional.asm

.a25d					FloatFractionalPart:
.a25d	5a		phy				phy
.a25e	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; take absolute value
.a261	29 7f		and #$7f			and 	#$7F
.a263	9d 00 06	sta $0600,x			sta 	NSStatus,x
.a266	20 21 a3	jsr $a321			jsr 	NSNormalise
.a269	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.a26c	38		sec				sec
.a26d	e9 e0		sbc #$e0			sbc 	#$E0
.a26f	90 31		bcc $a2a2			bcc 	_FFPExit 					; already fractional
.a271	c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.a273	b0 2a		bcs $a29f			bcs 	_FFPZero
.a275	a8		tay				tay 								; put count to do in Y
.a276	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; do each in turn.
.a279	20 a4 a2	jsr $a2a4			jsr 	_FFPPartial
.a27c	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.a27f	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.a282	20 a4 a2	jsr $a2a4			jsr 	_FFPPartial
.a285	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.a288	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.a28b	20 a4 a2	jsr $a2a4			jsr 	_FFPPartial
.a28e	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.a291	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.a294	20 a4 a2	jsr $a2a4			jsr 	_FFPPartial
.a297	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.a29a	20 81 98	jsr $9881			jsr 	NSMIsZero 					; zeroed check.
.a29d	d0 03		bne $a2a2			bne 	_FFPExit
.a29f					_FFPZero:
.a29f	20 51 98	jsr $9851			jsr 	NSMSetZero
.a2a2					_FFPExit:
.a2a2	7a		ply				ply
.a2a3	60		rts				rts
.a2a4					_FFPPartial:
.a2a4	c0 00		cpy #$00			cpy 	#0 							; no more to do
.a2a6	f0 17		beq $a2bf			beq 	_FFFPPExit
.a2a8	c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.a2aa	b0 0c		bcs $a2b8			bcs 	_FFFPPWholeByte
.a2ac	5a		phy				phy
.a2ad					_FFFPPLeft:
.a2ad	0a		asl a				asl 	a
.a2ae	88		dey				dey
.a2af	d0 fc		bne $a2ad			bne 	_FFFPPLeft
.a2b1	7a		ply				ply
.a2b2					_FFFPPRight:
.a2b2	4a		lsr a				lsr 	a
.a2b3	88		dey				dey
.a2b4	d0 fc		bne $a2b2			bne 	_FFFPPRight
.a2b6	80 07		bra $a2bf			bra 	_FFFPPExit
.a2b8					_FFFPPWholeByte:
.a2b8	98		tya				tya 								; subtract 8 from count
.a2b9	38		sec				sec
.a2ba	e9 08		sbc #$08			sbc 	#8
.a2bc	a8		tay				tay
.a2bd	a9 00		lda #$00			lda 	#0 							; and clear all
.a2bf					_FFFPPExit:
.a2bf	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/integer.asm

.a2c0					FloatIntegerPart:
.a2c0	48		pha				pha
.a2c1	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; is it integer already ?
.a2c4	f0 1f		beq $a2e5			beq 	_FIPExit 					; if so do nothing
.a2c6	20 81 98	jsr $9881			jsr 	NSMIsZero 					; is it zero ?
.a2c9	f0 17		beq $a2e2			beq 	_FIPZero 					; if so return zero.
.a2cb	20 21 a3	jsr $a321			jsr 	NSNormalise 				; normalise
.a2ce	f0 12		beq $a2e2			beq 	_FIPZero 					; normalised to zero, exit zero
.a2d0					_FIPShift:
.a2d0	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.a2d3	10 08		bpl $a2dd			bpl 	_FIPCheckZero
.a2d5	20 74 98	jsr $9874			jsr 	NSMShiftRight 				; shift mantissa right
.a2d8	fe 28 06	inc $0628,x			inc 	NSExponent,x 				; bump exponent
.a2db	80 f3		bra $a2d0			bra 	_FIPShift
.a2dd					_FIPCheckZero:
.a2dd	20 81 98	jsr $9881			jsr 	NSMIsZero 					; avoid -0 problem
.a2e0	d0 03		bne $a2e5			bne 	_FIPExit 					; set to zero if mantissa zero.
.a2e2					_FIPZero:
.a2e2	20 51 98	jsr $9851			jsr 	NSMSetZero
.a2e5					_FIPExit:
.a2e5	68		pla				pla
.a2e6	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/multiply.asm

.a2e7					FloatingPointMultiply:
.a2e7	20 10 a3	jsr $a310			jsr 	FloatPrepare 				; prepare for floats
.a2ea					FloatMultiply:
.a2ea	48		pha				pha
.a2eb	20 21 a3	jsr $a321			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.a2ee	f0 1b		beq $a30b			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.a2f0	e8		inx				inx
.a2f1	20 21 a3	jsr $a321			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.a2f4	ca		dex				dex
.a2f5	c9 00		cmp #$00			cmp 	#0
.a2f7	f0 0f		beq $a308			beq 	_FDSetZero
.a2f9	20 c1 a0	jsr $a0c1			jsr 	MultiplyShort 				; calculate the result.
.a2fc	7d 28 06	adc $0628,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.a2ff	18		clc				clc
.a300	7d 29 06	adc $0629,x			adc 	NSExponent+1,x
.a303	9d 28 06	sta $0628,x			sta 	NSExponent,x
.a306	80 03		bra $a30b			bra 	_FDExit
.a308					_FDSetZero:
.a308	20 51 98	jsr $9851			jsr 	NSMSetZero 					; return 0
.a30b					_FDExit:
.a30b	20 21 a3	jsr $a321			jsr 	NSNormalise 				; normalise the result
.a30e	68		pla				pla
.a30f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/utility.asm

.a310					FloatPrepare:
.a310	20 17 92	jsr $9217			jsr 	DereferenceTopTwo 			; dereference the top two values
.a313	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check ints/floats
.a316	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.a319	29 10		and #$10			and 	#NSBIsString
.a31b	d0 01		bne $a31e			bne 	_FDType
.a31d	60		rts				rts
.a31e					_FDType:
.a31e	4c a4 a5	jmp $a5a4			jmp 	TypeError
.a321					NSNormalise:
.a321	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; make float, keep sign
.a324	29 80		and #$80			and 	#$80
.a326	09 08		ora #$08			ora 	#NSTFloat
.a328	9d 00 06	sta $0600,x			sta 	NSStatus,x
.a32b	20 81 98	jsr $9881			jsr 	NSMIsZero 					; if zero exit
.a32e	d0 09		bne $a339			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.a330	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; clear the sign bit.
.a333	7e 00 06	ror $0600,x			ror 	NSStatus,x 					; (no -0)
.a336	a9 00		lda #$00			lda 	#0 							; set Z flag
.a338	60		rts				rts
.a339					_NSNormaliseOptimise:
.a339	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; upper byte zero ?
.a33c	d0 22		bne $a360			bne 	_NSNormaliseLoop
.a33e	bd 18 06	lda $0618,x			lda 	NSMantissa2,x 				; byte normalise
.a341	30 1d		bmi $a360			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.a343	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.a346	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.a349	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.a34c	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.a34f	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.a352	9e 08 06	stz $0608,x			stz 	NSMantissa0,x
.a355	bd 28 06	lda $0628,x			lda 	NSExponent,x
.a358	38		sec				sec
.a359	e9 08		sbc #$08			sbc 	#8
.a35b	9d 28 06	sta $0628,x			sta 	NSExponent,x
.a35e	80 d9		bra $a339			bra 	_NSNormaliseOptimise
.a360					_NSNormaliseLoop:
.a360	3c 20 06	bit $0620,x			bit 	NSMantissa3,x 				; bit 30 set ?
.a363	70 08		bvs $a36d			bvs 	_NSNExit 					; exit if so with Z flag clear
.a365	20 66 98	jsr $9866			jsr 	NSMShiftLeft 				; shift mantissa left
.a368	de 28 06	dec $0628,x			dec 	NSExponent,x 				; adjust exponent
.a36b	80 f3		bra $a360			bra 	_NSNormaliseLoop
.a36d					_NSNExit:
.a36d	a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.a36f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignnumber.asm

.9144					AssignNumber:
.9144	5a		phy				phy
.9145	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy mantissa0/1 to zTemp0
.9148	85 36		sta $36				sta 	zTemp0
.914a	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.914d	85 37		sta $37				sta 	zTemp0+1
.914f	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; clear reference bits
.9152	29 df		and #$df			and 	#(NSBIsReference ^ $FF)
.9154	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9157	29 18		and #$18			and 	#NSBTypeMask				; assigning to a float ?
.9159	c9 08		cmp #$08			cmp 	#NSTFloat
.915b	f0 2a		beq $9187			beq 	_ANFloat
.915d	bd 29 06	lda $0629,x			lda		NSExponent+1,x 				; is it a float
.9160	f0 05		beq $9167			beq		_ANNotFloat
.9162	e8		inx				inx
.9163	20 c0 a2	jsr $a2c0			jsr 	FloatIntegerPart 			; make it an integer
.9166	ca		dex				dex
.9167					_ANNotFloat:
.9167	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if byte/word reference.
.916a	29 03		and #$03			and 	#3
.916c	d0 05		bne $9173			bne 	_ANByteWord
.916e	20 93 91	jsr $9193			jsr 	_ANCopy4PackSign 			; copy all 4 bytes and sign
.9171	80 1e		bra $9191			bra 	_ANExit
.9173					_ANByteWord:
.9173	48		pha				pha 								; save count
.9174	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; do byte
.9177	92 36		sta ($36)			sta 	(zTemp0)
.9179	68		pla				pla
.917a	c9 01		cmp #$01			cmp	 	#1
.917c	f0 13		beq $9191			beq 	_ANExit
.917e	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x 			; do word
.9181	a0 01		ldy #$01			ldy 	#1
.9183	91 36		sta ($36),y			sta 	(zTemp0),y
.9185	80 0a		bra $9191			bra 	_ANExit
.9187					_ANFloat:
.9187	20 93 91	jsr $9193			jsr 	_ANCopy4PackSign 			; write all 4 bytes and packed sign
.918a	bd 29 06	lda $0629,x			lda 	NSExponent+1,x 				; copy exponent to slot 4
.918d	a0 04		ldy #$04			ldy 	#4
.918f	91 36		sta ($36),y			sta 	(zTemp0),y
.9191					_ANExit:
.9191	7a		ply				ply
.9192	60		rts				rts
.9193					_ANCopy4PackSign:
.9193	a0 03		ldy #$03			ldy 	#3
.9195	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; sign bit into status
.9198	29 80		and #$80			and 	#$80 						; put into high bit of mantissa 3
.919a	1d 21 06	ora $0621,x			ora 	NSMantissa3+1,x
.919d	91 36		sta ($36),y			sta 	(zTemp0),y
.919f	88		dey				dey
.91a0	bd 19 06	lda $0619,x			lda 	NSMantissa2+1,x
.91a3	91 36		sta ($36),y			sta 	(zTemp0),y
.91a5	88		dey				dey
.91a6	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.91a9	91 36		sta ($36),y			sta 	(zTemp0),y
.91ab	88		dey				dey
.91ac	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.91af	91 36		sta ($36),y			sta 	(zTemp0),y
.91b1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignstring.asm

.91b2					AssignString:
.91b2	5a		phy				phy
.91b3	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.91b6	85 38		sta $38				sta 	zTemp1
.91b8	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.91bb	85 39		sta $39				sta 	zTemp1+1
.91bd	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.91c0	85 36		sta $36				sta 	zTemp0
.91c2	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.91c5	85 37		sta $37				sta 	zTemp0+1
.91c7	a0 01		ldy #$01			ldy 	#1 							; the high byte of the target address
.91c9	b1 36		lda ($36),y			lda 	(zTemp0),y
.91cb	f0 23		beq $91f0			beq 	_ASNewStringRequired 		; if zero, a new string is required.
.91cd	38		sec				sec 								; put Address-2 in zsTemp - this is the size/status/string record
.91ce	b2 36		lda ($36)			lda 	(zTemp0) 					; of concreted strings
.91d0	e9 02		sbc #$02			sbc 	#2
.91d2	85 3c		sta $3c				sta 	zsTemp
.91d4	a0 01		ldy #$01			ldy 	#1
.91d6	b1 36		lda ($36),y			lda 	(zTemp0),y
.91d8	e9 00		sbc #$00			sbc 	#0
.91da	85 3d		sta $3d				sta 	zsTemp+1
.91dc	a0 ff		ldy #$ff			ldy 	#$FF 						; get length of new string
.91de					_ASGetLength:
.91de	c8		iny				iny
.91df	b1 38		lda ($38),y			lda 	(zTemp1),y
.91e1	d0 fb		bne $91de			bne 	_ASGetLength
.91e3	98		tya				tya 								; is this length <= current length
.91e4	d2 3c		cmp ($3c)			cmp 	(zsTemp)
.91e6	90 20		bcc $9208			bcc 	_ASCopyString
.91e8	f0 1e		beq $9208			beq 	_ASCopyString
.91ea	a9 80		lda #$80			lda 	#$80 						; mark as unused.
.91ec	a0 01		ldy #$01			ldy 	#1
.91ee	91 3c		sta ($3c),y			sta 	(zsTemp),y
.91f0					_ASNewStringRequired:
.91f0	e8		inx				inx 								; concrete the new string.
.91f1	20 3f a7	jsr $a73f			jsr 	StringConcrete				; (breaks zTemp1/2, not zTemp0 and zsTemp)
.91f4	ca		dex				dex
.91f5	18		clc				clc
.91f6	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; copy that new address to the reference.
.91f9	69 02		adc #$02			adc 	#2 							; add two to point at the data.
.91fb	92 36		sta ($36)			sta 	(zTemp0)
.91fd	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.9200	69 00		adc #$00			adc 	#0
.9202	a0 01		ldy #$01			ldy 	#1
.9204	91 36		sta ($36),y			sta 	(zTemp0),y
.9206	80 0d		bra $9215			bra 	_ASExit
.9208					_ASCopyString:
.9208	a0 00		ldy #$00			ldy 	#0
.920a					_ASCopyLoop:
.920a	b1 38		lda ($38),y			lda 	(zTemp1),y
.920c	c8		iny				iny
.920d	c8		iny				iny
.920e	91 3c		sta ($3c),y			sta 	(zsTemp),y
.9210	88		dey				dey
.9211	c9 00		cmp #$00			cmp 	#0
.9213	d0 f5		bne $920a			bne 	_ASCopyLoop
.9215					_ASExit:
.9215	7a		ply				ply
.9216	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/dereference.asm

.9217					DereferenceTopTwo:
.9217	e8		inx				inx
.9218	20 1c 92	jsr $921c			jsr 	Dereference 				; deref x+1
.921b	ca		dex				dex  								; falls through to deref x
.921c					Dereference:
.921c	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get the status byte
.921f	29 20		and #$20			and 	#NSBIsReference 			; shift sign bit to carry, reference to bit 7
.9221	f0 57		beq $927a			beq 	_DRFExit 					; not a reference
.9223	5a		phy				phy
.9224	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy address to dereference into zTemp0
.9227	85 36		sta $36				sta 	zTemp0
.9229	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.922c	85 37		sta $37				sta 	zTemp0+1
.922e	9e 10 06	stz $0610,x			stz 	NSMantissa1,x 				; clear second byte.
.9231	b2 36		lda ($36)			lda 	(zTemp0) 					; do the first byte
.9233	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.9236	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get status byte.
.9239	29 18		and #$18			and 	#NSBTypeMask 				; what type is it ?
.923b	c9 10		cmp #$10			cmp 	#NSTString 					; if string, dereference two
.923d	f0 0f		beq $924e			beq 	_DRFDereferenceTwo
.923f	c9 08		cmp #$08			cmp 	#NSTFloat 					; if float, do full dereference.
.9241	f0 39		beq $927c			beq 	_DRFFull
.9243	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be integer - how many bytes ?
.9246	29 03		and #$03			and 	#3
.9248	f0 32		beq $927c			beq 	_DRFFull 					; the whole word
.924a	c9 01		cmp #$01			cmp 	#1 							; is it 10 (e.g. 2 bytes)
.924c	f0 07		beq $9255			beq		_DRFClear23 				; no, one byte, clear 2 & 3 and exit
.924e					_DRFDereferenceTwo:
.924e	a0 01		ldy #$01			ldy 	#1
.9250	b1 36		lda ($36),y			lda 	(zTemp0),y
.9252	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9255					_DRFClear23:
.9255	9e 18 06	stz $0618,x			stz 	NSMantissa2,x 				; clear upper bytes, only read 1 or 2 bytes
.9258	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.925b	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; make it a value of that type.
.925e	29 18		and #$18			and 	#NSBTypeMask
.9260	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9263	c9 10		cmp #$10			cmp 	#NSTString  				; is it a string
.9265	d0 12		bne $9279			bne 	_DRFNotString
.9267	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; check address is zero
.926a	1d 10 06	ora $0610,x			ora 	NSMantissa1,x
.926d	d0 0a		bne $9279			bne 	_DRFNotString
.926f	a9 7b		lda #$7b			lda 	#_DRFNullString & $FF 		; if so, return reference to ""
.9271	9d 08 06	sta $0608,x			sta 	NSMantissa0,X
.9274	a9 92		lda #$92			lda 	#_DRFNullString >> 8
.9276	9d 10 06	sta $0610,x			sta 	NSMantissa1,X
.9279					_DRFNotString
.9279	7a		ply				ply 								; restore Y and exit
.927a					_DRFExit:
.927a	60		rts				rts
.927b					_DRFNullString:
>927b	00						.byte 	0
.927c					_DRFFull:
.927c	a0 01		ldy #$01			ldy 	#1 							; get remaining 3 bytes.
.927e	b1 36		lda ($36),y			lda 	(zTemp0),y
.9280	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9283	c8		iny				iny
.9284	b1 36		lda ($36),y			lda 	(zTemp0),y
.9286	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.9289	c8		iny				iny
.928a	b1 36		lda ($36),y			lda 	(zTemp0),y
.928c	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.928f	9e 28 06	stz $0628,x			stz 	NSExponent,x 				; clear exponent.
.9292	bd 00 06	lda $0600,x			lda		NSStatus,x 					; see if type is integer
.9295	29 18		and #$18			and 	#NSBTypeMask  				; type information only
.9297	9d 00 06	sta $0600,x			sta 	NSStatus,x 					; update it back.
.929a	f0 06		beq $92a2			beq 	_DRFNoExponent
.929c	c8		iny				iny 								; if not, read the exponent as well.
.929d	b1 36		lda ($36),y			lda 	(zTemp0),y
.929f	9d 28 06	sta $0628,x			sta 	NSExponent,x
.92a2					_DRFNoExponent:
.92a2	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; is the most significant bit set ?
.92a5	10 0d		bpl $92b4			bpl 	_DRFExit2 					; if not, then exit.
.92a7	29 7f		and #$7f			and 	#$7F 						; clear that bit.
.92a9	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.92ac	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; set the sign flag
.92af	09 80		ora #$80			ora 	#NSBIsNegative
.92b1	9d 00 06	sta $0600,x			sta 	NSStatus,x
.92b4					_DRFExit2:
.92b4	7a		ply				ply
.92b5	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/number.asm

=1					ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2					ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3					ESTA_Decimal = 3 							; fractional part.
.92b6					EncodeNumberStart:
.92b6	38		sec				sec
.92b7	80 01		bra $92ba			bra 	EncodeNumberContinue+1
.92b9					EncodeNumberContinue:
.92b9	18		clc				clc
.92ba					EncodeNumber:
.92ba	08		php				php 								; save reset.
.92bb	c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.92bd	f0 12		beq $92d1			beq 	_ENIsOkay
.92bf	c9 30		cmp #$30			cmp 	#"0"
.92c1	90 04		bcc $92c7			bcc 	_ENBadNumber
.92c3	c9 3a		cmp #$3a			cmp 	#"9"+1
.92c5	90 0a		bcc $92d1			bcc 	_ENIsOkay
.92c7					_ENBadNumber:
.92c7	28		plp				plp 								; throw saved reset
.92c8	ad 05 07	lda $0705			lda 	EncodeState 				; decimal mode, construct final number
.92cb	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.92cd	f0 7e		beq $934d			beq 	_ENConstructFinal
.92cf					_ENFail:
.92cf	18		clc				clc 								; not allowed
.92d0	60		rts				rts
.92d1					_ENIsOkay:
.92d1	28		plp				plp 								; are we restarting
.92d2	90 15		bcc $92e9			bcc 	_ENNoRestart
.92d4					_ENStartEncode:
.92d4	c9 2e		cmp #$2e			cmp 	#'.'						; first is DP
.92d6	f0 0c		beq $92e4			beq 	_ENFirstDP
.92d8	29 0f		and #$0f			and 	#15 						; put digit in mantissa
.92da	20 53 98	jsr $9853			jsr 	NSMSetByte
.92dd	a9 01		lda #$01			lda 	#ESTA_Low
.92df					_ENExitChange:
.92df	8d 05 07	sta $0705			sta 	EncodeState 				; save new state
.92e2	38		sec				sec
.92e3	60		rts				rts
.92e4					_ENFirstDP:
.92e4	20 51 98	jsr $9851			jsr 	NSMSetZero 					; clear integer part
.92e7	80 3f		bra $9328			bra 	_ESTASwitchFloat			; go straight to float and exi
.92e9					_ENNoRestart:
.92e9	48		pha				pha 								; save on stack.
.92ea	ad 05 07	lda $0705			lda 	EncodeState 				; get current state
.92ed	c9 01		cmp #$01			cmp 	#ESTA_Low
.92ef	f0 09		beq $92fa			beq  	_ESTALowState
.92f1	c9 02		cmp #$02			cmp 	#ESTA_High
.92f3	f0 29		beq $931e			beq 	_ESTAHighState
.92f5	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.92f7	f0 3b		beq $9334			beq 	_ESTADecimalState
>92f9	db						.byte 	$DB 						; causes a break in the emulator
.92fa					_ESTALowState:
.92fa	68		pla				pla 								; get value back
.92fb	c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.92fd	f0 29		beq $9328			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.92ff	29 0f		and #$0f			and 	#15 						; make digit
.9301	8d 06 07	sta $0706			sta 	DigitTemp 					; save it.
.9304	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.9307	0a		asl a				asl 	a
.9308	0a		asl a				asl 	a
.9309	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.930c	0a		asl a				asl 	a
.930d	6d 06 07	adc $0706			adc 	DigitTemp
.9310	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.9313	c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.9315	90 05		bcc $931c			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.9317	a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.9319	8d 05 07	sta $0705			sta 	EncodeState
.931c					_ESTANoSwitch:
.931c	38		sec				sec
.931d	60		rts				rts
.931e					_ESTAHighState:
.931e	68		pla				pla 								; get value back
.931f	c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.9321	f0 05		beq $9328			beq 	_ESTASwitchFloat
.9323	20 87 93	jsr $9387			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.9326	38		sec				sec
.9327	60		rts				rts
.9328					_ESTASwitchFloat:
.9328	9c 07 07	stz $0707			stz 	DecimalCount
.932b	e8		inx				inx 								; zero the decimal additive.
.932c	20 51 98	jsr $9851			jsr 	NSMSetZero
.932f	ca		dex				dex
.9330	a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.9332	80 ab		bra $92df			bra 	_ENExitChange
.9334					_ESTADecimalState:
.9334	68		pla				pla 								; digit.
.9335	c9 2e		cmp #$2e			cmp 	#"." 						; fail on 2nd decimal point.
.9337	f0 96		beq $92cf			beq 	_ENFail
.9339	e8		inx				inx 								; put digit into fractional part of X+1
.933a	20 87 93	jsr $9387			jsr 	ESTAShiftDigitIntoMantissa
.933d	ca		dex				dex
.933e	ee 07 07	inc $0707			inc 	DecimalCount 				; bump the count of decimals
.9341	ad 07 07	lda $0707			lda 	DecimalCount
.9344	c9 0b		cmp #$0b			cmp 	#11
.9346	f0 02		beq $934a			beq 	_ESTADSFail
.9348	38		sec				sec
.9349	60		rts				rts
.934a					_ESTADSFail:
.934a	4c 9f a5	jmp $a59f			jmp 	RangeError
.934d					_ENConstructFinal:
.934d	ad 07 07	lda $0707			lda 	DecimalCount 				; get decimal count
.9350	f0 33		beq $9385			beq 	_ENCFExit 					; no decimals
.9352	5a		phy				phy
.9353	0a		asl a				asl 	a 							; x 4 and CLC
.9354	0a		asl a				asl 	a
.9355	6d 07 07	adc $0707			adc 	DecimalCount
.9358	a8		tay				tay
.9359	b9 5e a5	lda $a55e,y			lda 	DecimalScalarTable-5,y 		; copy decimal scalar to X+2
.935c	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.935f	b9 5f a5	lda $a55f,y			lda 	DecimalScalarTable-5+1,y
.9362	9d 12 06	sta $0612,x			sta 	NSMantissa1+2,x
.9365	b9 60 a5	lda $a560,y			lda 	DecimalScalarTable-5+2,y
.9368	9d 1a 06	sta $061a,x			sta 	NSMantissa2+2,x
.936b	b9 61 a5	lda $a561,y			lda 	DecimalScalarTable-5+3,y
.936e	9d 22 06	sta $0622,x			sta 	NSMantissa3+2,x
.9371	b9 62 a5	lda $a562,y			lda 	DecimalScalarTable-5+4,y
.9374	9d 2a 06	sta $062a,x			sta 	NSExponent+2,x
.9377	a9 08		lda #$08			lda 	#NSTFloat
.9379	9d 02 06	sta $0602,x			sta 	NSStatus+2,x
.937c	7a		ply				ply
.937d	e8		inx				inx 								; multiply decimal const by decimal scalar
.937e	20 ea a2	jsr $a2ea			jsr 	FloatMultiply
.9381	ca		dex				dex
.9382	20 7f a1	jsr $a17f			jsr 	FloatAdd 					; add to integer part.
.9385					_ENCFExit:
.9385	18		clc				clc 								; reject the digit.
.9386	60		rts				rts
.9387					ESTAShiftDigitIntoMantissa:
.9387	29 0f		and #$0f			and 	#15 						; save digit
.9389	48		pha				pha
.938a	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; push mantissa on stack
.938d	48		pha				pha
.938e	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.9391	48		pha				pha
.9392	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.9395	48		pha				pha
.9396	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.9399	48		pha				pha
.939a	20 66 98	jsr $9866			jsr 	NSMShiftLeft 				; x 2
.939d	20 66 98	jsr $9866			jsr 	NSMShiftLeft 				; x 4
.93a0	18		clc				clc 								; pop mantissa and add
.93a1	68		pla				pla
.93a2	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.93a5	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.93a8	68		pla				pla
.93a9	7d 10 06	adc $0610,x			adc 	NSMantissa1,x
.93ac	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.93af	68		pla				pla
.93b0	7d 18 06	adc $0618,x			adc 	NSMantissa2,x
.93b3	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.93b6	68		pla				pla
.93b7	7d 20 06	adc $0620,x			adc 	NSMantissa3,x
.93ba	9d 20 06	sta $0620,x			sta 	NSMantissa3,x 				; x 5
.93bd	20 66 98	jsr $9866			jsr 	NSMShiftLeft 				; x 10
.93c0	68		pla				pla 								; add digit
.93c1	18		clc				clc
.93c2	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.93c5	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.93c8	90 0d		bcc $93d7			bcc 	_ESTASDExit
.93ca	fe 10 06	inc $0610,x			inc 	NSMantissa1,x
.93cd	d0 08		bne $93d7			bne 	_ESTASDExit
.93cf	fe 18 06	inc $0618,x			inc 	NSMantissa2,x
.93d2	d0 03		bne $93d7			bne 	_ESTASDExit
.93d4	fe 20 06	inc $0620,x			inc 	NSMantissa3,x
.93d7					_ESTASDExit:
.93d7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/term.asm

.93d8					EvaluateTerm:
.93d8	b1 30		lda ($30),y			lda 	(codePtr),y
.93da	30 18		bmi $93f4			bmi 	_ETCheckUnary 				; unary function ? (text ones)
.93dc	c9 40		cmp #$40			cmp 	#$40 						; 40-7F => identifier reference
.93de	b0 6f		bcs $944f			bcs 	_ETVariable
.93e0	c9 30		cmp #$30			cmp 	#'0' 						; is it a number
.93e2	90 6e		bcc $9452			bcc 	_ETPuncUnary 				; if not it might be a punctuation unary.
.93e4	c9 3a		cmp #$3a			cmp 	#'9'+1
.93e6	b0 6a		bcs $9452			bcs 	_ETPuncUnary
.93e8	20 b6 92	jsr $92b6			jsr 	EncodeNumberStart 			; can't fail as it's 0-9 !
.93eb					_ETNumber:
.93eb	c8		iny				iny 								; keep encoding until we have the numbers
.93ec	b1 30		lda ($30),y			lda 	(codePtr),y
.93ee	20 b9 92	jsr $92b9			jsr 	EncodeNumberContinue
.93f1	b0 f8		bcs $93eb			bcs 	_ETNumber 					; go back if accepted.
.93f3	60		rts				rts
.93f4					_ETCheckUnary:
.93f4	c9 ff		cmp #$ff			cmp 	#KWC_STRING 				; string token
.93f6	f0 41		beq $9439			beq 	_ETString
.93f8	c9 fe		cmp #$fe			cmp 	#KWC_HEXCONST 				; hex constant.
.93fa	f0 12		beq $940e			beq 	_ETHexConstant
.93fc	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; check it actually is a unary function
.93fe	90 0b		bcc $940b			bcc 	_ETSyntaxError
.9400	c9 96		cmp #$96			cmp 	#KWC_LAST_UNARY+1
.9402	b0 07		bcs $940b			bcs 	_ETSyntaxError
.9404	da		phx				phx 								; push X on the stack
.9405	0a		asl a				asl 	a 							; put vector x 2 into X
.9406	aa		tax				tax
.9407	c8		iny				iny 								; consume unary function token
.9408	7c fc 80	jmp ($80fc,x)			jmp 	(VectorSet0,x) 				; and do it.
.940b					_ETSyntaxError:
.940b	4c 9a a5	jmp $a59a			jmp 	SyntaxError
.940e					_ETHexConstant:
.940e	c8		iny				iny 								; skip #
.940f	c8		iny				iny 								; skip count
.9410	20 51 98	jsr $9851			jsr 	NSMSetZero 					; clear result
.9413					_ETHLoop:
.9413	b1 30		lda ($30),y			lda 	(codePtr),y
.9415	c8		iny				iny 								; and consume
.9416	c9 00		cmp #$00			cmp 	#0 							; exit if zero
.9418	f0 1e		beq $9438			beq 	_ETHExit
.941a	48		pha				pha 								; save on stack.
.941b	20 66 98	jsr $9866			jsr 	NSMShiftLeft 				; x 2
.941e	20 66 98	jsr $9866			jsr 	NSMShiftLeft 				; x 4
.9421	20 66 98	jsr $9866			jsr 	NSMShiftLeft 				; x 8
.9424	20 66 98	jsr $9866			jsr 	NSMShiftLeft 				; x 16
.9427	68		pla				pla 								; ASCII
.9428	c9 41		cmp #$41			cmp 	#'A'
.942a	90 02		bcc $942e			bcc 	_ETHNotChar
.942c	e9 07		sbc #$07			sbc 	#7
.942e					_ETHNotChar:
.942e	29 0f		and #$0f			and 	#15 						; digit now
.9430	1d 08 06	ora $0608,x			ora 	NSMantissa0,x 				; put in LS Nibble
.9433	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.9436	80 db		bra $9413			bra 	_ETHLoop 					; go round.
.9438					_ETHExit:
.9438	60		rts				rts
.9439					_ETString:
.9439	c8		iny				iny 								; look at length
.943a	b1 30		lda ($30),y			lda 	(codePtr),y
.943c	48		pha				pha
.943d	c8		iny				iny 								; first character
.943e	20 e7 9e	jsr $9ee7			jsr 	MemoryInline 				; put address of string at (code-Ptr),y on stack
.9441	68		pla				pla 								; restore count and save
.9442	85 36		sta $36				sta 	zTemp0
.9444	98		tya				tya 								; add length to Y to skip it.
.9445	18		clc				clc
.9446	65 36		adc $36				adc 	zTemp0
.9448	a8		tay				tay
.9449	a9 10		lda #$10			lda 	#NSTString 					; mark as string
.944b	9d 00 06	sta $0600,x			sta 	NSStatus,x
.944e	60		rts				rts
.944f					_ETVariable:
.944f	4c a9 94	jmp $94a9			jmp 	VariableHandler
.9452					_ETPuncUnary:
.9452	c8		iny				iny 								; consume the unary character
.9453	c9 2d		cmp #$2d			cmp 	#KWD_MINUS 					; unary minus
.9455	f0 2d		beq $9484			beq 	_ETUnaryNegate
.9457	c9 10		cmp #$10			cmp 	#KWD_AT 					; @ reference -> constant
.9459	f0 39		beq $9494			beq 	_ETDereference
.945b	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; parenthesis
.945d	f0 43		beq $94a2			beq 	_ETParenthesis
.945f	64 36		stz $36				stz 	zTemp0 						; zTemp0 is the indirection level.
.9461	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; byte indirection (0) ?
.9463	f0 06		beq $946b			beq 	_ETIndirection
.9465	e6 36		inc $36				inc 	zTemp0
.9467	c9 21		cmp #$21			cmp 	#KWD_PLING					; word indirection (1) \
.9469	d0 a0		bne $940b			bne 	_ETSyntaxError
.946b					_ETIndirection:
.946b	a5 36		lda $36				lda 	zTemp0 						; push indirection amount (0-1) => (1-2) on the stack
.946d	1a		inc a				inc 	a
.946e	48		pha				pha
.946f	20 d8 93	jsr $93d8			jsr 	EvaluateTerm				; evaluate the term
.9472	20 1c 92	jsr $921c			jsr 	Dereference 				; dereference it.
.9475	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a +ve integer.
.9478	d0 07		bne $9481			bne 	_ETTypeMismatch
.947a	68		pla				pla 								; indirection 1-2
.947b	09 20		ora #$20			ora 	#NSBIsReference 			; make it a reference.
.947d	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9480	60		rts				rts
.9481					_ETTypeMismatch:
.9481	4c a4 a5	jmp $a5a4			jmp 	TypeError
.9484					_ETUnaryNegate:
.9484	20 d8 93	jsr $93d8			jsr 	EvaluateTerm				; evaluate the term
.9487	20 1c 92	jsr $921c			jsr 	Dereference 				; dereference it.
.948a	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a number
.948d	29 10		and #$10			and 	#NSTString
.948f	d0 f0		bne $9481			bne 	_ETTypeMismatch
.9491	4c fd 97	jmp $97fd			jmp 	NSMNegate  					; just toggles the sign bit.
.9494					_ETDereference:
.9494	20 d8 93	jsr $93d8			jsr 	EvaluateTerm				; evaluate the term
.9497	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a reference
.949a	29 20		and #$20			and 	#NSBIsReference
.949c	f0 e3		beq $9481			beq 	_ETTypeMismatch
.949e	9e 00 06	stz $0600,x			stz 	NSStatus,x 					; make it an integer address
.94a1	60		rts				rts
.94a2					_ETParenthesis:
.94a2	20 07 91	jsr $9107			jsr 	EvaluateExpression 			; evaluate here, from lowest precedence
.94a5	20 b8 9f	jsr $9fb8			jsr 	CheckRightBracket 			; check for )
.94a8	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/variable.asm

.94a9					VariableHandler:
.94a9	b1 30		lda ($30),y			lda 	(codePtr),y
.94ab	18		clc				clc
.94ac	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.94ae	85 37		sta $37				sta 	zTemp0+1
.94b0	c8		iny				iny
.94b1	b1 30		lda ($30),y			lda 	(codePtr),y
.94b3	85 36		sta $36				sta 	zTemp0
.94b5	c8		iny				iny
.94b6	18		clc				clc									; copy variable address+3 to mantissa
.94b7	69 03		adc #$03			adc 	#3
.94b9	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.94bc	a5 37		lda $37				lda 	zTemp0+1
.94be	69 00		adc #$00			adc 	#0
.94c0	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.94c3	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.94c6	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.94c9	9e 28 06	stz $0628,x			stz 	NSExponent,x
.94cc	5a		phy				phy
.94cd	a0 02		ldy #$02			ldy 	#2 							; read type
.94cf	b1 36		lda ($36),y			lda 	(zTemp0),y
.94d1	7a		ply				ply
.94d2	29 1c		and #$1c			and 	#NSBTypeMask+NSBIsArray 	; get type information
.94d4	09 20		ora #$20			ora 	#NSBIsReference 			; make a reference.
.94d6	9d 00 06	sta $0600,x			sta 	NSStatus,x
.94d9	29 04		and #$04			and 	#NSBIsArray
.94db	d0 01		bne $94de			bne 	_VHArray
.94dd	60		rts				rts
.94de					_VHArray:
.94de	e8		inx				inx
.94df	20 e9 97	jsr $97e9			jsr 	Evaluate8BitInteger 		; get the 1st index.
.94e2	a9 ff		lda #$ff			lda 	#$FF 						; set Status of X+2 to a duff value so we know if we picked it up.
.94e4	9d 01 06	sta $0601,x			sta 	NSStatus+1,x
.94e7	b1 30		lda ($30),y			lda 	(codePtr),y
.94e9	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.94eb	d0 06		bne $94f3			bne 	_VHNoSecondIndex
.94ed	c8		iny				iny 								; skip the comma
.94ee	e8		inx				inx
.94ef	20 e9 97	jsr $97e9			jsr 	Evaluate8BitInteger 		; get the 2nd index.
.94f2	ca		dex				dex
.94f3					_VHNoSecondIndex:
.94f3	ca		dex				dex 								; set X back.
.94f4	20 b8 9f	jsr $9fb8			jsr 	CheckRightBracket 			; and check the right bracket.
.94f7	5a		phy				phy 								; save position
.94f8	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy record address to zaTemp
.94fb	85 3e		sta $3e				sta 	zaTemp
.94fd	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.9500	85 3f		sta $3f				sta 	zaTemp+1
.9502	a0 03		ldy #$03			ldy 	#3 							; get the second index - which is 0 if there is one index.
.9504	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9506	f0 02		beq $950a			beq 	_VHHas2Mask
.9508	a9 ff		lda #$ff			lda 	#$FF
.950a					_VHHas2Mask:
.950a	dd 02 06	cmp $0602,x			cmp 	NSStatus+2,x 				; so if they are the same there are the wrong number of indices
.950d	f0 54		beq $9563			beq 	_VHBadIndex
.950f	0a		asl a				asl 	a 							; carry will be set if a second index
.9510	90 09		bcc $951b			bcc 	_VHCheckFirstIndex
.9512	a0 03		ldy #$03			ldy 	#3 			 				; check the 2nd size >= 2nd index
.9514	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9516	dd 0a 06	cmp $060a,x			cmp 	NSMantissa0+2,x
.9519	90 48		bcc $9563			bcc 	_VHBadIndex
.951b					_VHCheckFirstIndex:
.951b	a0 02		ldy #$02			ldy 	#2 			 				; check the 2nd size >= 2nd index
.951d	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.951f	dd 09 06	cmp $0609,x			cmp 	NSMantissa0+1,x
.9522	90 3f		bcc $9563			bcc 	_VHBadIndex
.9524	64 36		stz $36				stz 	zTemp0 						; clear zTemp0 (if 1 index)
.9526	64 37		stz $37				stz 	zTemp0+1
.9528	bd 02 06	lda $0602,x			lda 	NSStatus+2,x 				; if only one index provided, don't need to multiply
.952b	30 0f		bmi $953c			bmi 	_VHNoMultiply
.952d	da		phx				phx
.952e	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; get 2nd index on stack
.9531	48		pha				pha
.9532	a0 02		ldy #$02			ldy 	#2 							; get 1st size in A
.9534	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9536	1a		inc a				inc 	a 							; add 1 for zero base
.9537	fa		plx				plx
.9538	20 3a a4	jsr $a43a			jsr 	Multiply8x8 				; calculate -> Z0
.953b	fa		plx				plx
.953c					_VHNoMultiply:
.953c	18		clc				clc
.953d	a5 36		lda $36				lda 	zTemp0
.953f	7d 09 06	adc $0609,x			adc 	NSMantissa0+1,x
.9542	85 36		sta $36				sta 	zTemp0
.9544	a5 37		lda $37				lda 	zTemp0+1
.9546	69 00		adc #$00			adc 	#0
.9548	85 37		sta $37				sta 	zTemp0+1
.954a	bd 00 06	lda $0600,x			lda 	NSStatus,x
.954d	20 cc 85	jsr $85cc			jsr 	ScaleByBaseType
.9550	18		clc				clc
.9551	b2 3e		lda ($3e)			lda 	(zaTemp)
.9553	65 36		adc $36				adc 	zTemp0
.9555	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.9558	a0 01		ldy #$01			ldy 	#1
.955a	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.955c	65 37		adc $37				adc 	zTemp0+1
.955e	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9561	7a		ply				ply 								; restore position
.9562	60		rts				rts
.9563					_VHBadIndex:
.9563	a9 17		lda #$17		lda	#23
.9565	4c fe 8c	jmp $8cfe		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/abs.asm

.a370					AbsUnary:
.a370	fa		plx				plx 								; restore stack pos
.a371	20 a5 97	jsr $97a5			jsr 	EvaluateNumber 				; get a float or int
.a374	20 b8 9f	jsr $9fb8			jsr 	CheckRightBracket
.a377	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; clear the sign bit
.a37a	29 7f		and #$7f			and 	#$7F
.a37c	9d 00 06	sta $0600,x			sta 	NSStatus,x
.a37f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/alloc.asm

.9568					AllocUnary:
.9568	fa		plx				plx 								; restore stack pos
.9569	20 dd 97	jsr $97dd			jsr 	Evaluate16BitInteger		; get bytes required.
.956c	20 b8 9f	jsr $9fb8			jsr 	CheckRightBracket
.956f	da		phx				phx 								; save X/Y
.9570	5a		phy				phy
.9571	8a		txa				txa 								; copy X into Y
.9572	a8		tay				tay
.9573	b9 10 06	lda $0610,y			lda		NSMantissa1,y 				; get size
.9576	aa		tax				tax
.9577	b9 08 06	lda $0608,y			lda 	NSMantissa0,y
.957a	20 87 95	jsr $9587			jsr 	AllocateXABytes 			; allocate memory
.957d	99 08 06	sta $0608,y			sta 	NSMantissa0,y 				; write address out.
.9580	8a		txa				txa
.9581	99 10 06	sta $0610,y			sta 	NSMantissa1,y
.9584	7a		ply				ply
.9585	fa		plx				plx
.9586	60		rts				rts
.9587					AllocateXABytes:
.9587	5a		phy				phy
.9588	ac 0c 07	ldy $070c			ldy 	lowMemPtr 					; push current address on stack and to zTemp0
.958b	84 36		sty $36				sty 	zTemp0
.958d	5a		phy				phy
.958e	ac 0d 07	ldy $070d			ldy 	lowMemPtr+1
.9591	84 37		sty $37				sty 	zTemp0+1
.9593	5a		phy				phy
.9594	18		clc				clc 								; add to low memory pointer
.9595	6d 0c 07	adc $070c			adc 	lowMemPtr
.9598	8d 0c 07	sta $070c			sta 	lowMemPtr
.959b	8a		txa				txa
.959c	6d 0d 07	adc $070d			adc 	lowMemPtr+1
.959f	8d 0d 07	sta $070d			sta 	lowMemPtr+1
.95a2					_ClearMemory:
.95a2	ad 0c 07	lda $070c			lda 	lowMemPtr 					; cleared all memory allocated
.95a5	c5 36		cmp $36				cmp 	zTemp0
.95a7	d0 07		bne $95b0			bne 	_CMClearNext
.95a9	ad 0d 07	lda $070d			lda 	lowMemPtr+1
.95ac	c5 37		cmp $37				cmp 	zTemp0+1
.95ae	f0 0c		beq $95bc			beq 	_CMExit
.95b0					_CMClearNext:
.95b0	a9 00		lda #$00			lda 	#0 							; clear byte, advance to next.
.95b2	92 36		sta ($36)			sta 	(zTemp0)
.95b4	e6 36		inc $36				inc 	zTemp0
.95b6	d0 ea		bne $95a2			bne 	_ClearMemory
.95b8	e6 37		inc $37				inc		zTemp0+1
.95ba	80 e6		bra $95a2			bra 	_ClearMemory
.95bc					_CMExit:
.95bc	fa		plx				plx
.95bd	68		pla				pla
.95be	7a		ply				ply
.95bf	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/asc.asm

.a380					AscUnary:
.a380	fa		plx				plx 								; restore stack pos
.a381	20 b0 97	jsr $97b0			jsr 	EvaluateString 				; get a string
.a384	b2 36		lda ($36)			lda 	(zTemp0)					; get/return firs character
.a386	20 53 98	jsr $9853			jsr 	NSMSetByte
.a389	20 b8 9f	jsr $9fb8			jsr 	CheckRightBracket
.a38c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/frac.asm

.a38d					FracUnary:
.a38d	fa		plx				plx 								; restore stack pos
.a38e	20 a5 97	jsr $97a5			jsr 	EvaluateNumber 				; get a float or int
.a391	20 b8 9f	jsr $9fb8			jsr 	CheckRightBracket
.a394	bd 00 06	lda $0600,x			lda 	NSStatus,x
.a397	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.a399	f0 04		beq $a39f			beq 	_IUZero
.a39b	20 5d a2	jsr $a25d			jsr 	FloatFractionalPart
.a39e	60		rts				rts
.a39f					_IUZero:
.a39f	20 51 98	jsr $9851			jsr 	NSMSetZero
.a3a2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/int.asm

.a3a3					IntUnary:
.a3a3	fa		plx				plx 								; restore stack pos
.a3a4	20 a5 97	jsr $97a5			jsr 	EvaluateNumber 				; get a float or int
.a3a7	20 b8 9f	jsr $9fb8			jsr 	CheckRightBracket
.a3aa	bd 00 06	lda $0600,x			lda 	NSStatus,x
.a3ad	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.a3af	f0 03		beq $a3b4			beq 	_IUExit
.a3b1	20 c0 a2	jsr $a2c0			jsr 	FloatIntegerPart
.a3b4					_IUExit:
.a3b4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/len.asm

.a3b5					LenUnary:
.a3b5	fa		plx				plx 								; restore stack pos
.a3b6	20 b0 97	jsr $97b0			jsr 	EvaluateString 				; get a string
.a3b9	5a		phy				phy
.a3ba	a0 00		ldy #$00			ldy 	#0 							; find length
.a3bc					_LenFind:
.a3bc	b1 36		lda ($36),y			lda 	(zTemp0),y
.a3be	f0 06		beq $a3c6			beq 	_LenExit
.a3c0	c8		iny				iny
.a3c1	d0 f9		bne $a3bc			bne 	_LenFind
.a3c3	4c 9f a5	jmp $a59f			jmp 	RangeError 					; string > 255
.a3c6					_LenExit:
.a3c6	98		tya				tya
.a3c7	20 53 98	jsr $9853			jsr 	NSMSetByte
.a3ca	7a		ply				ply
.a3cb	20 b8 9f	jsr $9fb8			jsr 	CheckRightBracket
.a3ce	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/not.asm

.95c0					Unary_Not:
.95c0	fa		plx				plx
.95c1	20 c8 97	jsr $97c8			jsr 	EvaluateInteger 			; get integer
.95c4	20 b8 9f	jsr $9fb8			jsr 	CheckRightBracket
.95c7	20 81 98	jsr $9881			jsr 	NSMIsZero 					; zero mantissa ?
.95ca	f0 04		beq $95d0			beq 	_NotZero
.95cc	20 51 98	jsr $9851			jsr 	NSMSetZero
.95cf	60		rts				rts
.95d0					_NotZero:
.95d0	4c 6b 8d	jmp $8d6b			jmp 	ReturnTrue
.95d3					_UNBad:
.95d3	4c a9 a5	jmp $a5a9			jmp 	ArgumentError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/rnd.asm

.95d6					Unary_Rnd:
.95d6	20 a5 97	jsr $97a5			jsr 	EvaluateNumber 				; number to use.
.95d9	20 b8 9f	jsr $9fb8			jsr 	CheckRightBracket 			; closing bracket
.95dc	20 05 96	jsr $9605			jsr 	Random32Bit 				; generate a number.
.95df	ad 08 07	lda $0708			lda 	RandomSeed+0
.95e2	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.95e5	ad 09 07	lda $0709			lda 	RandomSeed+1
.95e8	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.95eb	ad 0a 07	lda $070a			lda 	RandomSeed+2
.95ee	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.95f1	ad 0b 07	lda $070b			lda 	RandomSeed+3
.95f4	29 7f		and #$7f			and 	#$7F 						; make legal mantissa
.95f6	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.95f9	a9 e1		lda #$e1			lda 	#-31 						; force into 0-1 range
.95fb	8d 28 06	sta $0628			sta 	NSExponent
.95fe	a9 08		lda #$08			lda 	#NSTFloat
.9600	8d 00 06	sta $0600			sta 	NSStatus 					; positive.
>9603	db						.byte 	$DB 						; causes a break in the emulator
.9604	60		rts				rts
.9605					Random32Bit:
.9605	5a		phy				phy
.9606	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.9608	ad 08 07	lda $0708			lda 	RandomSeed+0 				; check the seed isn't zero
.960b	d0 03		bne $9610			bne 	_Random1
.960d	a8		tay				tay 								; if so do it 256 times
.960e	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.9610					_Random1:
.9610	0a		asl a				asl 	a 							; LSFR RNG
.9611	2e 09 07	rol $0709			rol 	RandomSeed+1
.9614	2e 0a 07	rol $070a			rol 	RandomSeed+2
.9617	2e 0b 07	rol $070b			rol 	RandomSeed+3
.961a	90 02		bcc $961e			bcc 	_Random2
.961c	49 c5		eor #$c5			eor 	#$C5
.961e					_Random2:
.961e	88		dey				dey
.961f	d0 ef		bne $9610			bne 	_Random1
.9621	7a		ply				ply
.9622	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/sgn.asm

.a3cf					SgnUnary:
.a3cf	fa		plx				plx 								; restore stack pos
.a3d0	20 a5 97	jsr $97a5			jsr 	EvaluateNumber 				; get a float or int
.a3d3	20 b8 9f	jsr $9fb8			jsr 	CheckRightBracket
.a3d6	20 81 98	jsr $9881			jsr 	NSMIsZero 					; if zero
.a3d9	f0 10		beq $a3eb			beq 	_SGZero  					; return Int Zero
.a3db	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get status w/sign
.a3de	48		pha				pha
.a3df	a9 01		lda #$01			lda 	#1 							; set to 1
.a3e1	20 53 98	jsr $9853			jsr 	NSMSetByte
.a3e4	68		pla				pla
.a3e5	29 80		and #$80			and		#$80 						; copy the sign byte out
.a3e7	9d 00 06	sta $0600,x			sta 	NSStatus,x
.a3ea	60		rts				rts
.a3eb	20 51 98	jsr $9851	_SGZero:jsr 	NSMSetZero
.a3ee	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/val.asm

.a3ef					ValUnary:
.a3ef	fa		plx				plx 								; restore stack pos
.a3f0	20 05 a4	jsr $a405			jsr 	ValMainCode 				; do the main val() code
.a3f3	b0 01		bcs $a3f6			bcs 	_VUError 					; couldn't convert
.a3f5	60		rts				rts
.a3f6					_VUError:
.a3f6	4c a4 a5	jmp $a5a4			jmp 	TypeError
.a3f9					IsValUnary:
.a3f9	fa		plx				plx 								; restore stack pos
.a3fa	20 05 a4	jsr $a405			jsr 	ValMainCode 				; do the main val() code
.a3fd	b0 03		bcs $a402			bcs 	_VUBad
.a3ff	4c 6b 8d	jmp $8d6b			jmp 	ReturnTrue
.a402					_VUBad:
.a402	4c 77 8d	jmp $8d77			jmp 	ReturnFalse
.a405					ValMainCode:
.a405	20 b0 97	jsr $97b0			jsr 	EvaluateString 				; get a string
.a408	20 b8 9f	jsr $9fb8			jsr 	CheckRightBracket 			; check right bracket present
.a40b	5a		phy				phy
.a40c	b2 36		lda ($36)			lda 	(zTemp0) 					; check not empty string
.a40e	f0 17		beq $a427			beq 	_VMCFail2
.a410	a0 ff		ldy #$ff			ldy 	#$FF 						; start position
.a412	48		pha				pha 								; save first character
.a413	c9 2d		cmp #$2d			cmp 	#"-"		 				; is it -
.a415	d0 01		bne $a418			bne 	_VMCStart
.a417	c8		iny				iny 								; skip over -
.a418					_VMCStart:
.a418	38		sec				sec 								; initialise first time round.
.a419					_VMCNext:
.a419	c8		iny				iny 								; pre-increment
.a41a	b1 36		lda ($36),y			lda 	(zTemp0),y 					; next character
.a41c	f0 0c		beq $a42a			beq 	_VMCSuccess 				; successful.
.a41e	20 ba 92	jsr $92ba			jsr 	EncodeNumber 				; send it to the number-builder
.a421	90 03		bcc $a426			bcc 	_VMCFail 					; if failed, give up.
.a423	18		clc				clc 								; next time round, countinue
.a424	80 f3		bra $a419			bra 	_VMCNext
.a426					_VMCFail:
.a426	68		pla				pla
.a427					_VMCFail2:
.a427	7a		ply				ply
.a428	38		sec				sec
.a429	60		rts				rts
.a42a					_VMCSuccess:
.a42a	a9 00		lda #$00			lda 	#0 							; construct final
.a42c	20 ba 92	jsr $92ba			jsr 	EncodeNumber
.a42f	68		pla				pla
.a430	c9 2d		cmp #$2d			cmp 	#"-"
.a432	d0 03		bne $a437			bne 	_VMCNotNegative
.a434	20 fd 97	jsr $97fd			jsr		NSMNegate
.a437					_VMCNotNegative:
.a437	7a		ply				ply
.a438	18		clc				clc
.a439	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/chr.asm

.9623					ChrUnary:
.9623	fa		plx				plx 								; restore stack pos
.9624	20 e9 97	jsr $97e9			jsr 	Evaluate8BitInteger			; get value
.9627	48		pha				pha
.9628	20 b8 9f	jsr $9fb8			jsr 	CheckRightBracket
.962b	a9 01		lda #$01			lda 	#1 							; allocate space for one char
.962d	20 ba a7	jsr $a7ba			jsr 	StringTempAllocate
.9630	68		pla				pla 								; write number to it
.9631	20 f8 a7	jsr $a7f8			jsr 	StringTempWrite
.9634	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/spc.asm

.9635					SpcUnary:
.9635	fa		plx				plx 								; restore stack pos
.9636	20 e9 97	jsr $97e9			jsr 	Evaluate8BitInteger			; get value
.9639	5a		phy				phy
.963a	48		pha				pha 								; save count
.963b	20 ba a7	jsr $a7ba			jsr 	StringTempAllocate
.963e	7a		ply				ply 								; to do count in Y
.963f					_SpcLoop:
.963f	c0 00		cpy #$00			cpy 	#0
.9641	f0 08		beq $964b			beq 	_SpcExit
.9643	a9 20		lda #$20			lda 	#32
.9645	20 f8 a7	jsr $a7f8			jsr 	StringTempWrite
.9648	88		dey				dey
.9649	80 f4		bra $963f			bra 	_SPCLoop
.964b					_SpcExit:
.964b	7a		ply				ply
.964c	20 b8 9f	jsr $9fb8			jsr 	CheckRightBracket
.964f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/str.asm

.9650					Unary_Str:
.9650	fa		plx				plx
.9651	20 a5 97	jsr $97a5			jsr 	EvaluateNumber  			; get number
.9654	20 b8 9f	jsr $9fb8			jsr 	CheckRightBracket 			; closing bracket
.9657	a9 05		lda #$05			lda 	#5 							; maximum decimals, from Basic816
.9659	20 72 96	jsr $9672			jsr 	ConvertNumberToString 		; do the conversion.
.965c	a9 21		lda #$21			lda		#33 						; create buffer
.965e	20 ba a7	jsr $a7ba			jsr 	StringTempAllocate 			; allocate memory
.9661	da		phx				phx
.9662	a2 00		ldx #$00			ldx 	#0
.9664					_USCopy:
.9664	bd 99 08	lda $0899,x			lda 	DecimalBuffer,x
.9667	20 f8 a7	jsr $a7f8			jsr 	StringTempWrite
.966a	e8		inx				inx
.966b	bd 99 08	lda $0899,x			lda 	DecimalBuffer,x
.966e	d0 f4		bne $9664			bne 	_USCopy
.9670	fa		plx				plx
.9671	60		rts				rts
.9672					ConvertNumberToString:
.9672	5a		phy				phy 								; save code position
.9673	8d 14 07	sta $0714			sta 	DecimalPlaces	 			; save number of DPs.
.9676	9c 15 07	stz $0715			stz 	dbOffset 					; offset into decimal buffer = start.
.9679	bd 00 06	lda $0600,x			lda 	NSStatus,x  				; is it -ve.
.967c	10 0a		bpl $9688			bpl 	_CNTSNotNegative
.967e	29 7f		and #$7f			and 	#$7F 						; make +ve
.9680	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9683	a9 2d		lda #$2d			lda 	#"-"
.9685	20 ee 96	jsr $96ee			jsr 	WriteDecimalBuffer
.9688					_CNTSNotNegative:
.9688	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if decimal
.968b	f0 15		beq $96a2			beq 	_CNTSNotFloat
.968d	e8		inx				inx 								; round up
.968e	a9 01		lda #$01			lda 	#1
.9690	20 53 98	jsr $9853			jsr 	NSMSetByte
.9693	ca		dex				dex
.9694	bd 28 06	lda $0628,x			lda		NSExponent,x
.9697	9d 29 06	sta $0629,x			sta 	NSExponent+1,x
.969a	a9 08		lda #$08			lda 	#NSTFloat
.969c	9d 01 06	sta $0601,x			sta 	NSStatus+1,x
.969f	20 7f a1	jsr $a17f			jsr 	FloatAdd
.96a2					_CNTSNotFloat:
.96a2	20 d0 96	jsr $96d0			jsr 	MakePlusTwoString
.96a5	20 5d a2	jsr $a25d			jsr 	FloatFractionalPart 		; get the fractional part
.96a8	20 21 a3	jsr $a321			jsr 	NSNormalise					; normalise , exit if zero
.96ab	f0 21		beq $96ce			beq 	_CNTSExit
.96ad	a9 2e		lda #$2e			lda 	#"."
.96af	20 ee 96	jsr $96ee			jsr 	WriteDecimalBuffer 			; write decimal place
.96b2					_CNTSDecimal:
.96b2	ce 14 07	dec $0714			dec 	DecimalPlaces 				; done all the decimals
.96b5	30 17		bmi $96ce			bmi 	_CNTSExit
.96b7	e8		inx				inx 								; x 10.0
.96b8	a9 0a		lda #$0a			lda 	#10
.96ba	20 53 98	jsr $9853			jsr 	NSMSetByte
.96bd	a9 08		lda #$08			lda 	#NSTFloat
.96bf	9d 00 06	sta $0600,x			sta 	NSStatus,x
.96c2	ca		dex				dex
.96c3	20 ea a2	jsr $a2ea			jsr 	FloatMultiply
.96c6	20 d0 96	jsr $96d0			jsr 	MakePlusTwoString
.96c9	20 5d a2	jsr $a25d			jsr 	FloatFractionalPart 		; get the fractional part
.96cc	80 e4		bra $96b2			bra 	_CNTSDecimal 				; keep going.
.96ce					_CNTSExit:
.96ce	7a		ply				ply
.96cf	60		rts				rts
.96d0					MakePlusTwoString:
.96d0	da		phx				phx
.96d1	20 28 98	jsr $9828			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.96d4	e8		inx				inx 								; access it
.96d5	e8		inx				inx
.96d6	20 c0 a2	jsr $a2c0			jsr 	FloatIntegerPart 			; make it an integer
.96d9	a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.96db	20 29 a1	jsr $a129			jsr 	ConvertInt32
.96de	a2 00		ldx #$00			ldx	 	#0
.96e0					_MPTSCopy:
.96e0	bd 77 08	lda $0877,x			lda 	NumberBuffer,x
.96e3	20 ee 96	jsr $96ee			jsr 	WriteDecimalBuffer
.96e6	e8		inx				inx
.96e7	bd 77 08	lda $0877,x			lda 	NumberBuffer,x
.96ea	d0 f4		bne $96e0			bne 	_MPTSCopy
.96ec	fa		plx				plx
.96ed	60		rts				rts
.96ee					WriteDecimalBuffer:
.96ee	da		phx				phx
.96ef	ae 15 07	ldx $0715			ldx 	dbOffset
.96f2	9d 99 08	sta $0899,x			sta 	DecimalBuffer,x
.96f5	9e 9a 08	stz $089a,x			stz 	DecimalBuffer+1,x
.96f8	ee 15 07	inc $0715			inc 	dbOffset
.96fb	fa		plx				plx
.96fc	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/substring.asm

.96fd					Unary_Left:
.96fd	fa		plx				plx
.96fe	18		clc				clc 								; only one parameter
.96ff	20 74 97	jsr $9774			jsr 	SubstringInitial 			; set up.
.9702	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; Param #1 is the length
.9705	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.9708	9e 09 06	stz $0609,x			stz 	NSMantissa0+1,x 			; Start is zero.
.970b	80 2c		bra $9739			bra 	SubstringMain
.970d					Unary_Right:
.970d	fa		plx				plx
.970e	18		clc				clc 								; only one parameter
.970f	20 74 97	jsr $9774			jsr 	SubstringInitial 			; set up.
.9712	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; length => param 2
.9715	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.9718	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; total length
.971b	fd 09 06	sbc $0609,x			sbc 	NSMantissa0+1,x 			; length - required.
.971e	b0 02		bcs $9722			bcs 	_URNotUnderflow
.9720	a9 00		lda #$00			lda 	#0 							; start from the beginning, as something like right$("AB",3)
.9722					_URNotUnderFlow:
.9722	9d 09 06	sta $0609,x			sta 	NSMantissa0+1,x 			; this is the start position
.9725	80 12		bra $9739			bra 	SubStringMain
.9727					Unary_Mid:
.9727	fa		plx				plx
.9728	38		sec				sec 								; two parameters
.9729	20 74 97	jsr $9774			jsr 	SubstringInitial 			; set up.
.972c	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; first parameter is zero ?
.972f	f0 05		beq $9736			beq 	_UMError
.9731	de 09 06	dec $0609,x			dec 	NSMantissa0+1,x				; reduce initial offset by 1 as MID$(a$,1..) is actually the first character
.9734	80 03		bra $9739			bra 	SubStringMain
.9736					_UMError:
.9736	4c a9 a5	jmp $a5a9			jmp 	ArgumentError
.9739					SubStringMain:
.9739	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; is the initial offset >= the length
.973c	dd 28 06	cmp $0628,x			cmp 	NSExponent,x
.973f	b0 2d		bcs $976e			bcs 	_SSMNull 					; if so, return an empty string.
.9741	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; if copy count is zero
.9744	f0 28		beq $976e			beq 	_SSMNull 					; return empty string.
.9746	18		clc				clc 								; add the offset +1 to the address and
.9747	bd 08 06	lda $0608,x			lda	 	NSMantissa0,x 				; put in zTemp
.974a	7d 09 06	adc $0609,x			adc 	NSMantissa0+1,x
.974d	85 36		sta $36				sta 	zTemp0
.974f	bd 10 06	lda $0610,x			lda	 	NSMantissa1,x
.9752	69 00		adc #$00			adc 	#0
.9754	85 37		sta $37				sta 	zTemp0+1
.9756					_SSMNoCarry:
.9756	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; characters required.
.9759	20 ba a7	jsr $a7ba			jsr 	StringTempAllocate 			; allocate that many characters
.975c	5a		phy				phy 								; save Y
.975d	a0 00		ldy #$00			ldy 	#0 							; start copying in.
.975f					_SSMCopy:
.975f	b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next character
.9761	f0 09		beq $976c			beq 	_SSMEString 				; no more to copy
.9763	20 f8 a7	jsr $a7f8			jsr 	StringTempWrite 			; and write it out.
.9766	c8		iny				iny
.9767	de 0a 06	dec $060a,x			dec 	NSMantissa0+2,x
.976a	d0 f3		bne $975f			bne 	_SSMCopy
.976c					_SSMEString:
.976c	7a		ply				ply
.976d					_SSMExit:
.976d	60		rts				rts
.976e					_SSMNull:
.976e	a9 00		lda #$00			lda 	#0
.9770	20 ba a7	jsr $a7ba			jsr 	StringTempAllocate
.9773	60		rts				rts
.9774					SubstringInitial:
.9774	da		phx				phx 								; save initial stack position
.9775	08		php				php 								; save carry on stack indicating 2 parameters
.9776	20 b0 97	jsr $97b0			jsr 	EvaluateString 				; get a string
.9779	5a		phy				phy 								; calculate length to exponent.
.977a	a0 ff		ldy #$ff			ldy 	#$FF
.977c					_SIFindLength:
.977c	c8		iny				iny
.977d	b1 36		lda ($36),y			lda 	(zTemp0),y
.977f	d0 fb		bne $977c			bne 	_SIFindLength
.9781	98		tya				tya
.9782	9d 28 06	sta $0628,x			sta 	NSExponent,x
.9785	7a		ply				ply
.9786	e8		inx				inx
.9787	20 c0 9f	jsr $9fc0			jsr 	CheckComma 					; comma next
.978a	20 e9 97	jsr $97e9			jsr 	Evaluate8BitInteger 		; get next parameter
.978d	28		plp				plp 								; is it the last parameter ?
.978e	90 07		bcc $9797			bcc 	_SSIExit 					; if so, exit.
.9790	e8		inx				inx
.9791	20 c0 9f	jsr $9fc0			jsr 	CheckComma 					; comma next
.9794	20 e9 97	jsr $97e9			jsr 	Evaluate8BitInteger 		; get last parameter
.9797					_SSIExit:
.9797	fa		plx				plx
.9798	20 b8 9f	jsr $9fb8			jsr 	CheckRightBracket 			; check closing bracket
.979b	60		rts				rts 								; exit

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/exprhelper.asm

.979c					EvaluateValue:
.979c	48		pha				pha
.979d	20 07 91	jsr $9107			jsr		EvaluateExpression 			; expression
.97a0	20 1c 92	jsr $921c			jsr 	Dereference					; derefernce it
.97a3	68		pla				pla
.97a4	60		rts				rts
.97a5					EvaluateNumber:
.97a5	20 9c 97	jsr $979c			jsr 	EvaluateValue 				; get a value
.97a8	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if string.
.97ab	29 10		and #$10			and 	#NSBIsString
.97ad	d0 16		bne $97c5			bne 	HelperTypeError
.97af	60		rts				rts
.97b0					EvaluateString:
.97b0	20 9c 97	jsr $979c			jsr 	EvaluateValue 				; get a value
.97b3	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if string.
.97b6	29 10		and #$10			and 	#NSBIsString
.97b8	f0 0b		beq $97c5			beq 	HelperTypeError
.97ba					CopyAddressToTemp0:
.97ba	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy address -> zTemp0
.97bd	85 36		sta $36				sta 	zTemp0
.97bf	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.97c2	85 37		sta $37				sta 	zTemp0+1
.97c4	60		rts				rts
.97c5					HelperTypeError:
.97c5	4c a4 a5	jmp $a5a4			jmp 	TypeError
.97c8					EvaluateInteger:
.97c8	20 a5 97	jsr $97a5			jsr 	EvaluateNumber
.97cb	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check exponent is zero
.97ce	d0 0a		bne $97da			bne 	HelperValueError 			; if not, it's a float.
.97d0	60		rts				rts
.97d1					EvaluateUnsignedInteger:
.97d1	20 c8 97	jsr $97c8			jsr 	EvaluateInteger 			; check integer is +ve
.97d4	bd 00 06	lda $0600,x			lda 	NSStatus,x
.97d7	30 01		bmi $97da			bmi 	HelperValueError
.97d9	60		rts				rts
.97da					HelperValueError:
.97da	4c a9 a5	jmp $a5a9			jmp 	ArgumentError
.97dd					Evaluate16BitInteger:
.97dd	20 d1 97	jsr $97d1			jsr	 	EvaluateUnsignedInteger		; get integer
.97e0	bd 20 06	lda $0620,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.97e3	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.97e6	d0 f2		bne $97da			bne 	HelperValueError
.97e8	60		rts				rts
.97e9					Evaluate8BitInteger:
.97e9	20 d1 97	jsr $97d1			jsr	 	EvaluateUnsignedInteger 	; get an integer
.97ec	d0 ec		bne $97da			bne 	HelperValueError
.97ee	bd 20 06	lda $0620,x			lda 	NSMantissa3,x	 			; bytes 1, 2 & 3 must be zero
.97f1	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.97f4	1d 10 06	ora $0610,x			ora 	NSMantissa1,x
.97f7	d0 e1		bne $97da			bne 	HelperValueError
.97f9	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.97fc	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/mult8x8.asm

.a43a					Multiply8x8:
.a43a	4a		lsr a		  		lsr 	a  							; prime the carry bit for the loop
.a43b	85 36		sta $36			  	sta 	zTemp0
.a43d	86 37		stx $37				stx 	zTemp0+1
.a43f	a9 00		lda #$00			lda 	#0
.a441	a2 08		ldx #$08			ldx 	#8
.a443					_M88Loop:
.a443	90 03		bcc $a448			bcc 	_M88NoAdd
.a445	18		clc				clc
.a446	65 37		adc $37				adc 	zTemp0+1
.a448					_M88NoAdd:
.a448	6a		ror a				ror 	a
.a449	66 36		ror $36				ror 	zTemp0  					; pull another bit out for the next iteration
.a44b	ca		dex				dex         						; inc/dec don't modify carry; only shifts and adds do
.a44c	d0 f5		bne $a443			bne 	_M88Loop
.a44e	85 37		sta $37				sta 	zTemp0+1 					; store high 8 bits.
.a450	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/utility.asm

.97fd					NSMNegate:
.97fd	bd 00 06	lda $0600,x			lda 	NSStatus,x
.9800	49 80		eor #$80			eor 	#NSBIsNegative
.9802	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9805	60		rts				rts
.9806					NSMNegateMantissa:
.9806	38		sec				sec
.9807	a9 00		lda #$00			lda 	#0
.9809	fd 08 06	sbc $0608,x			sbc 	NSMantissa0,x
.980c	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.980f	a9 00		lda #$00			lda 	#0
.9811	fd 10 06	sbc $0610,x			sbc 	NSMantissa1,x
.9814	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9817	a9 00		lda #$00			lda 	#0
.9819	fd 18 06	sbc $0618,x			sbc 	NSMantissa2,x
.981c	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.981f	a9 00		lda #$00			lda 	#0
.9821	fd 20 06	sbc $0620,x			sbc 	NSMantissa3,x
.9824	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.9827	60		rts				rts
.9828					NSMShiftUpTwo:
.9828	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.982b	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.982e	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.9831	9d 12 06	sta $0612,x			sta 	NSMantissa1+2,x
.9834	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.9837	9d 1a 06	sta $061a,x			sta 	NSMantissa2+2,x
.983a	bd 20 06	lda $0620,x			lda 	NSMantissa3,x
.983d	9d 22 06	sta $0622,x			sta 	NSMantissa3+2,x
.9840	bd 28 06	lda $0628,x			lda 	NSExponent,x
.9843	9d 2a 06	sta $062a,x			sta 	NSExponent+2,x
.9846	bd 00 06	lda $0600,x			lda 	NSStatus,x
.9849	9d 02 06	sta $0602,x			sta 	NSStatus+2,x
.984c	60		rts				rts
.984d					NSMSetZeroMantissaOnly:
.984d	a9 00		lda #$00			lda 	#0
.984f	80 08		bra $9859			bra 	NSMSetMantissa
.9851					NSMSetZero:
.9851	a9 00		lda #$00			lda 	#0
.9853					NSMSetByte:
.9853	9e 28 06	stz $0628,x			stz 	NSExponent,x 				; zero exponent, as integer.
.9856	9e 00 06	stz $0600,x			stz 	NSStatus,x 					; status zero (integer)
.9859					NSMSetMantissa:
.9859	9d 08 06	sta $0608,x			sta 	NSMantissa0,x 				; mantissa
.985c	9e 10 06	stz $0610,x			stz 	NSMantissa1,x
.985f	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.9862	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.9865	60		rts				rts
.9866					NSMShiftLeft:
.9866	18		clc				clc
.9867					NSMRotateLeft:
.9867	3e 08 06	rol $0608,x			rol 	NSMantissa0,x
.986a	3e 10 06	rol $0610,x			rol		NSMantissa1,x
.986d	3e 18 06	rol $0618,x			rol		NSMantissa2,x
.9870	3e 20 06	rol $0620,x			rol		NSMantissa3,x
.9873	60		rts				rts
.9874					NSMShiftRight:
.9874	5e 20 06	lsr $0620,x			lsr 	NSMantissa3,x
.9877	7e 18 06	ror $0618,x			ror		NSMantissa2,x
.987a	7e 10 06	ror $0610,x			ror		NSMantissa1,x
.987d	7e 08 06	ror $0608,x			ror		NSMantissa0,x
.9880	60		rts				rts
.9881					NSMIsZero:
.9881	bd 20 06	lda $0620,x			lda 	NSMantissa3,x
.9884	1d 18 06	ora $0618,x			ora		NSMantissa2,x
.9887	1d 10 06	ora $0610,x			ora		NSMantissa1,x
.988a	1d 08 06	ora $0608,x			ora		NSMantissa0,x
.988d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/asmcore.asm

.a451					Assemble_ora:
.a451	20 fa 81	jsr $81fa		jsr	AssembleGroup1
>a454	01					.byte $01
.a455					Assemble_and:
.a455	20 fa 81	jsr $81fa		jsr	AssembleGroup1
>a458	21					.byte $21
.a459					Assemble_eor:
.a459	20 fa 81	jsr $81fa		jsr	AssembleGroup1
>a45c	41					.byte $41
.a45d					Assemble_adc:
.a45d	20 fa 81	jsr $81fa		jsr	AssembleGroup1
>a460	61					.byte $61
.a461					Assemble_sta:
.a461	20 fa 81	jsr $81fa		jsr	AssembleGroup1
>a464	81					.byte $81
.a465					Assemble_lda:
.a465	20 fa 81	jsr $81fa		jsr	AssembleGroup1
>a468	a1					.byte $a1
.a469					Assemble_cmp:
.a469	20 fa 81	jsr $81fa		jsr	AssembleGroup1
>a46c	c1					.byte $c1
.a46d					Assemble_sbc:
.a46d	20 fa 81	jsr $81fa		jsr	AssembleGroup1
>a470	e1					.byte $e1
.a471					Assemble_asl:
.a471	20 01 82	jsr $8201		jsr	AssembleGroup2
>a474	02					.byte $02
>a475	75					.byte $75
.a476					Assemble_rol:
.a476	20 01 82	jsr $8201		jsr	AssembleGroup2
>a479	22					.byte $22
>a47a	75					.byte $75
.a47b					Assemble_lsr:
.a47b	20 01 82	jsr $8201		jsr	AssembleGroup2
>a47e	42					.byte $42
>a47f	75					.byte $75
.a480					Assemble_ror:
.a480	20 01 82	jsr $8201		jsr	AssembleGroup2
>a483	62					.byte $62
>a484	75					.byte $75
.a485					Assemble_stx:
.a485	20 01 82	jsr $8201		jsr	AssembleGroup2
>a488	82					.byte $82
>a489	50					.byte $50
.a48a					Assemble_ldx:
.a48a	20 01 82	jsr $8201		jsr	AssembleGroup2
>a48d	a2					.byte $a2
>a48e	d0					.byte $d0
.a48f					Assemble_dec:
.a48f	20 01 82	jsr $8201		jsr	AssembleGroup2
>a492	c2					.byte $c2
>a493	55					.byte $55
.a494					Assemble_inc:
.a494	20 01 82	jsr $8201		jsr	AssembleGroup2
>a497	e2					.byte $e2
>a498	55					.byte $55
.a499					Assemble_stz:
.a499	20 01 82	jsr $8201		jsr	AssembleGroup2
>a49c	60					.byte $60
>a49d	44					.byte $44
.a49e					Assemble_bit:
.a49e	20 01 82	jsr $8201		jsr	AssembleGroup2
>a4a1	20					.byte $20
>a4a2	55					.byte $55
.a4a3					Assemble_sty:
.a4a3	20 01 82	jsr $8201		jsr	AssembleGroup2
>a4a6	80					.byte $80
>a4a7	54					.byte $54
.a4a8					Assemble_ldy:
.a4a8	20 01 82	jsr $8201		jsr	AssembleGroup2
>a4ab	a0					.byte $a0
>a4ac	d5					.byte $d5
.a4ad					Assemble_cpy:
.a4ad	20 01 82	jsr $8201		jsr	AssembleGroup2
>a4b0	c0					.byte $c0
>a4b1	d4					.byte $d4
.a4b2					Assemble_cpx:
.a4b2	20 01 82	jsr $8201		jsr	AssembleGroup2
>a4b5	e0					.byte $e0
>a4b6	d0					.byte $d0
.a4b7					Assemble_tsb:
.a4b7	20 01 82	jsr $8201		jsr	AssembleGroup2
>a4ba	00					.byte $00
>a4bb	50					.byte $50
.a4bc					Assemble_trb:
.a4bc	20 01 82	jsr $8201		jsr	AssembleGroup2
>a4bf	10					.byte $10
>a4c0	50					.byte $50
.a4c1					Assemble_jsr:
.a4c1	20 01 82	jsr $8201		jsr	AssembleGroup2
>a4c4	14					.byte $14
>a4c5	10					.byte $10
.a4c6					Assemble_jmp:
.a4c6	20 01 82	jsr $8201		jsr	AssembleGroup2
>a4c9	40					.byte $40
>a4ca	10					.byte $10
.a4cb					Assemble_bpl:
.a4cb	20 52 82	jsr $8252		jsr	AssembleGroup3
>a4ce	10					.byte $10
.a4cf					Assemble_bmi:
.a4cf	20 52 82	jsr $8252		jsr	AssembleGroup3
>a4d2	30					.byte $30
.a4d3					Assemble_bvc:
.a4d3	20 52 82	jsr $8252		jsr	AssembleGroup3
>a4d6	50					.byte $50
.a4d7					Assemble_bvs:
.a4d7	20 52 82	jsr $8252		jsr	AssembleGroup3
>a4da	70					.byte $70
.a4db					Assemble_bcc:
.a4db	20 52 82	jsr $8252		jsr	AssembleGroup3
>a4de	90					.byte $90
.a4df					Assemble_bcs:
.a4df	20 52 82	jsr $8252		jsr	AssembleGroup3
>a4e2	b0					.byte $b0
.a4e3					Assemble_bne:
.a4e3	20 52 82	jsr $8252		jsr	AssembleGroup3
>a4e6	d0					.byte $d0
.a4e7					Assemble_beq:
.a4e7	20 52 82	jsr $8252		jsr	AssembleGroup3
>a4ea	f0					.byte $f0
.a4eb					Assemble_bra:
.a4eb	20 52 82	jsr $8252		jsr	AssembleGroup3
>a4ee	80					.byte $80
.a4ef					Assemble_brk:
.a4ef	20 88 82	jsr $8288		jsr	AssembleGroup4
>a4f2	00					.byte $00
.a4f3					Assemble_php:
.a4f3	20 88 82	jsr $8288		jsr	AssembleGroup4
>a4f6	08					.byte $08
.a4f7					Assemble_clc:
.a4f7	20 88 82	jsr $8288		jsr	AssembleGroup4
>a4fa	18					.byte $18
.a4fb					Assemble_plp:
.a4fb	20 88 82	jsr $8288		jsr	AssembleGroup4
>a4fe	28					.byte $28
.a4ff					Assemble_sec:
.a4ff	20 88 82	jsr $8288		jsr	AssembleGroup4
>a502	38					.byte $38
.a503					Assemble_rti:
.a503	20 88 82	jsr $8288		jsr	AssembleGroup4
>a506	40					.byte $40
.a507					Assemble_pha:
.a507	20 88 82	jsr $8288		jsr	AssembleGroup4
>a50a	48					.byte $48
.a50b					Assemble_cli:
.a50b	20 88 82	jsr $8288		jsr	AssembleGroup4
>a50e	58					.byte $58
.a50f					Assemble_phy:
.a50f	20 88 82	jsr $8288		jsr	AssembleGroup4
>a512	5a					.byte $5a
.a513					Assemble_rts:
.a513	20 88 82	jsr $8288		jsr	AssembleGroup4
>a516	60					.byte $60
.a517					Assemble_pla:
.a517	20 88 82	jsr $8288		jsr	AssembleGroup4
>a51a	68					.byte $68
.a51b					Assemble_sei:
.a51b	20 88 82	jsr $8288		jsr	AssembleGroup4
>a51e	78					.byte $78
.a51f					Assemble_ply:
.a51f	20 88 82	jsr $8288		jsr	AssembleGroup4
>a522	7a					.byte $7a
.a523					Assemble_dey:
.a523	20 88 82	jsr $8288		jsr	AssembleGroup4
>a526	88					.byte $88
.a527					Assemble_txa:
.a527	20 88 82	jsr $8288		jsr	AssembleGroup4
>a52a	8a					.byte $8a
.a52b					Assemble_tya:
.a52b	20 88 82	jsr $8288		jsr	AssembleGroup4
>a52e	98					.byte $98
.a52f					Assemble_txs:
.a52f	20 88 82	jsr $8288		jsr	AssembleGroup4
>a532	9a					.byte $9a
.a533					Assemble_tay:
.a533	20 88 82	jsr $8288		jsr	AssembleGroup4
>a536	a8					.byte $a8
.a537					Assemble_tax:
.a537	20 88 82	jsr $8288		jsr	AssembleGroup4
>a53a	aa					.byte $aa
.a53b					Assemble_clv:
.a53b	20 88 82	jsr $8288		jsr	AssembleGroup4
>a53e	b8					.byte $b8
.a53f					Assemble_tsx:
.a53f	20 88 82	jsr $8288		jsr	AssembleGroup4
>a542	ba					.byte $ba
.a543					Assemble_iny:
.a543	20 88 82	jsr $8288		jsr	AssembleGroup4
>a546	c8					.byte $c8
.a547					Assemble_dex:
.a547	20 88 82	jsr $8288		jsr	AssembleGroup4
>a54a	ca					.byte $ca
.a54b					Assemble_cld:
.a54b	20 88 82	jsr $8288		jsr	AssembleGroup4
>a54e	d8					.byte $d8
.a54f					Assemble_phx:
.a54f	20 88 82	jsr $8288		jsr	AssembleGroup4
>a552	da					.byte $da
.a553					Assemble_inx:
.a553	20 88 82	jsr $8288		jsr	AssembleGroup4
>a556	e8					.byte $e8
.a557					Assemble_nop:
.a557	20 88 82	jsr $8288		jsr	AssembleGroup4
>a55a	ea					.byte $ea
.a55b					Assemble_sed:
.a55b	20 88 82	jsr $8288		jsr	AssembleGroup4
>a55e	f8					.byte $f8
.a55f					Assemble_plx:
.a55f	20 88 82	jsr $8288		jsr	AssembleGroup4
>a562	fa					.byte $fa

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/constants.asm

.a563					DecimalScalarTable:
>a563	66 66 66 66				.dword $66666666 ; 0.1
>a567	de					.byte $de
>a568	1f 85 eb 51				.dword $51eb851f ; 0.01
>a56c	db					.byte $db
>a56d	4c 37 89 41				.dword $4189374c ; 0.001
>a571	d8					.byte $d8
>a572	ac 8b db 68				.dword $68db8bac ; 0.0001
>a576	d4					.byte $d4
>a577	24 d6 e2 53				.dword $53e2d624 ; 1e-05
>a57b	d1					.byte $d1
>a57c	83 de 1b 43				.dword $431bde83 ; 1e-06
>a580	ce					.byte $ce
>a581	6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>a585	ca					.byte $ca
>a586	89 3b e6 55				.dword $55e63b89 ; 1e-08
>a58a	c7					.byte $c7
>a58b	a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>a58f	c4					.byte $c4
>a590	67 7f f3 6d				.dword $6df37f67 ; 1e-10
>a594	c0					.byte $c0
>a595	86 ff f5 57				.dword $57f5ff86 ; 1e-11
>a599	bd					.byte $bd

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.asm

.a59a					SyntaxError:
.a59a	a9 02		lda #$02		lda	#2
.a59c	4c fe 8c	jmp $8cfe		jmp	ErrorHandler
.a59f					RangeError:
.a59f	a9 04		lda #$04		lda	#4
.a5a1	4c fe 8c	jmp $8cfe		jmp	ErrorHandler
.a5a4					TypeError:
.a5a4	a9 05		lda #$05		lda	#5
.a5a6	4c fe 8c	jmp $8cfe		jmp	ErrorHandler
.a5a9					ArgumentError:
.a5a9	a9 07		lda #$07		lda	#7
.a5ab	4c fe 8c	jmp $8cfe		jmp	ErrorHandler
.a5ae					NotDoneError:
.a5ae	a9 0c		lda #$0c		lda	#12
.a5b0	4c fe 8c	jmp $8cfe		jmp	ErrorHandler
.a5b3					ErrorText:
>a5b3	42 72 65 61 6b 00			.text	"Break",0
>a5b9	53 79 6e 74 61 78 20 65			.text	"Syntax error",0
>a5c1	72 72 6f 72 00
>a5c6	44 69 76 69 73 69 6f 6e			.text	"Division by zero",0
>a5ce	20 62 79 20 7a 65 72 6f 00
>a5d7	4f 75 74 20 6f 66 20 52			.text	"Out of Range",0
>a5df	61 6e 67 65 00
>a5e4	54 79 70 65 20 6d 69 73			.text	"Type mismatch",0
>a5ec	6d 61 74 63 68 00
>a5f2	4f 75 74 20 6f 66 20 6d			.text	"Out of memory",0
>a5fa	65 6d 6f 72 79 00
>a600	49 6c 6c 65 67 61 6c 20			.text	"Illegal argument",0
>a608	61 72 67 75 6d 65 6e 74 00
>a611	53 74 6f 70 00				.text	"Stop",0
>a616	53 74 72 69 6e 67 20 74			.text	"String too long",0
>a61e	6f 6f 20 6c 6f 6e 67 00
>a626	41 73 73 65 72 74 69 6f			.text	"Assertion failed",0
>a62e	6e 20 66 61 69 6c 65 64 00
>a637	4f 75 74 20 6f 66 20 64			.text	"Out of data",0
>a63f	61 74 61 00
>a643	55 6e 69 6d 70 6c 65 6d			.text	"Unimplemented",0
>a64b	65 6e 74 65 64 00
>a651	4e 6f 20 73 75 63 68 20			.text	"No such line number",0
>a659	6c 69 6e 65 20 6e 75 6d 62 65 72 00
>a665	52 65 74 75 72 6e 20 77			.text	"Return without Gosub",0
>a66d	69 74 68 6f 75 74 20 47 6f 73 75 62 00
>a67a	55 6e 74 69 6c 20 77 69			.text	"Until without Repeat",0
>a682	74 68 6f 75 74 20 52 65 70 65 61 74 00
>a68f	57 65 6e 64 20 77 69 74			.text	"Wend without While",0
>a697	68 6f 75 74 20 57 68 69 6c 65 00
>a6a2	4e 65 78 74 20 77 69 74			.text	"Next without For",0
>a6aa	68 6f 75 74 20 46 6f 72 00
>a6b3	42 41 53 49 43 20 53 74			.text	"BASIC Stack full",0
>a6bb	61 63 6b 20 66 75 6c 6c 00
>a6c4	4f 70 65 6e 20 53 74 72			.text	"Open Structure",0
>a6cc	75 63 74 75 72 65 00
>a6d3	45 6e 64 50 72 6f 63 20			.text	"EndProc without call",0
>a6db	77 69 74 68 6f 75 74 20 63 61 6c 6c 00
>a6e8	41 72 72 61 79 20 61 6c			.text	"Array already defined",0
>a6f0	72 65 61 64 79 20 64 65 66 69 6e 65 64 00
>a6fe	41 72 72 61 79 20 73 69			.text	"Array size",0
>a706	7a 65 00
>a709	42 61 64 20 61 72 72 61			.text	"Bad array index",0
>a711	79 20 69 6e 64 65 78 00

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/timestamp.asm

>a719	42 75 69 6c 74 20 54 68			.text "Built Thursday 06-Oct-2022. Build 212."
>a721	75 72 73 64 61 79 20 30 36 2d 4f 63 74 2d 32 30
>a731	32 32 2e 20 42 75 69 6c 64 20 32 31 32 2e

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/bytes.asm

.988e					StackPushByte:
.988e	48		pha				pha 								; save byte
.988f	a5 34		lda $34				lda 	BasicStack
.9891	d0 02		bne $9895			bne 	_SPBNoBorrow
.9893	c6 35		dec $35				dec 	BasicStack+1
.9895					_SPBNoBorrow:
.9895	c6 34		dec $34				dec 	BasicStack
.9897	68		pla				pla 								; get back and write
.9898	92 34		sta ($34)			sta 	(BasicStack)
.989a	60		rts				rts
.989b					StackPopByte:
.989b	b2 34		lda ($34)			lda 	(BasicStack)
.989d	e6 34		inc $34				inc 	BasicStack
.989f	d0 02		bne $98a3			bne 	_SPBNoCarry
.98a1	e6 35		inc $35				inc 	BasicStack+1
.98a3					_SPBNoCarry:
.98a3	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/frames.asm

.98a4					StackOpen:
.98a4	48		pha				pha 								; save frame byte
.98a5	29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.98a7	0a		asl a				asl 	a 							; claim twice this for storage
.98a8	49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.98aa	38		sec				sec 								; so basically subtracting from
.98ab	65 34		adc $34				adc 	basicStack 	 				; basicStack
.98ad	85 34		sta $34				sta 	basicStack
.98af	b0 08		bcs $98b9			bcs 	_SONoBorrow
.98b1	c6 35		dec $35				dec 	basicStack+1
.98b3	a5 35		lda $35				lda 	basicStack+1 				; have we reached stack overflow
.98b5	c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.98b7	90 04		bcc $98bd			bcc 	_SOMemory
.98b9					_SONoBorrow:
.98b9	68		pla				pla 								; get marker back and write at TOS
.98ba	92 34		sta ($34)			sta 	(basicStack)
.98bc	60		rts				rts
.98bd					_SOMemory:
.98bd							ERR_STACK
.98bd					StackClose:
.98bd	b2 34		lda ($34)			lda 	(basicStack) 				; get TOS marker
.98bf	29 0f		and #$0f			and 	#$0F 						; bytes to add back
.98c1	0a		asl a				asl 	a 							; claim twice this.
.98c2	65 34		adc $34				adc 	basicStack 					; add to the stack pointer.
.98c4	85 34		sta $34				sta 	basicStack
.98c6	90 02		bcc $98ca			bcc 	_SCExit
.98c8	e6 35		inc $35				inc 	basicStack+1
.98ca					_SCExit:
.98ca	60		rts				rts
.98cb					StackCheckFrame:
.98cb	48		pha				pha
.98cc					_StackRemoveLocals:
.98cc	b2 34		lda ($34)			lda 	(basicStack) 				; check for local, keep popping them
.98ce	c9 03		cmp #$03			cmp 	#STK_LOCALS+1
.98d0	b0 05		bcs $98d7			bcs 	_SCNoLocal
.98d2	20 5f 9f	jsr $9f5f			jsr 	LocalPopValue
.98d5	80 f5		bra $98cc			bra 	_StackRemoveLocals
.98d7					_SCNoLocal:
.98d7	68		pla				pla
.98d8	52 34		eor ($34)			eor 	(basicStack) 				; xor with toS marker
.98da	29 f0		and #$f0			and 	#$F0 						; check type bits
.98dc	d0 01		bne $98df			bne 	_SCFError 					; different, we have structures mixed up
.98de	60		rts				rts
.98df					_SCFError:
.98df	8a		txa				txa 								; report error X
.98e0	4c fe 8c	jmp $8cfe			jmp 	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/location.asm

.98e3					STKSaveCodePosition:
.98e3	5a		phy				phy
.98e4	98		tya				tya 								; save Y
.98e5	a0 05		ldy #$05			ldy 	#5
.98e7	91 34		sta ($34),y			sta 	(basicStack),y
.98e9	88		dey				dey 								; save Code Pointer
.98ea					_STKSaveLoop:
.98ea	b9 2f 00	lda $002f,y			lda 	safePtr-1,y 				; allows us to access the pointer w/out issues.
.98ed	91 34		sta ($34),y			sta 	(basicStack),y
.98ef	88		dey				dey
.98f0	d0 f8		bne $98ea			bne 	_STKSaveLoop
.98f2	7a		ply				ply
.98f3	60		rts				rts
.98f4					STKLoadCodePosition:
.98f4	a0 01		ldy #$01			ldy 	#1 							; load code pointer back
.98f6					_STKLoadLoop:
.98f6	b1 34		lda ($34),y			lda 	(basicStack),y
.98f8	99 2f 00	sta $002f,y			sta 	safePtr-1,y
.98fb	c8		iny				iny
.98fc	c0 05		cpy #$05			cpy 	#5
.98fe	d0 f6		bne $98f6			bne 	_STKLoadLoop
.9900	b1 34		lda ($34),y			lda 	(basicStack),y 				; get Y offset
.9902	a8		tay				tay
.9903	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/setup.asm

.9904					StackReset:
.9904	a9 ff		lda #$ff			lda 	#((BasicStackBase+BasicStackSize-1) & $FF)
.9906	85 34		sta $34				sta 	0+basicStack
.9908	a9 0f		lda #$0f			lda 	#((BasicStackBase+BasicStackSize-1) >> 8)
.990a	85 35		sta $35				sta 	1+basicStack
.990c	a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.990e	92 34		sta ($34)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.9910	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/concrete.asm

.a73f					StringConcrete:
.a73f	5a		phy				phy 								; save position on stack
.a740	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy target string to zTemp1
.a743	85 38		sta $38				sta 	zTemp1
.a745	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.a748	85 39		sta $39				sta 	zTemp1+1
.a74a	a0 ff		ldy #$ff			ldy 	#$FF	 					; calculate string length
.a74c					_SALength:
.a74c	c8		iny				iny
.a74d	b1 38		lda ($38),y			lda 	(zTemp1),y
.a74f	d0 fb		bne $a74c			bne 	_SALength
.a751	c0 fd		cpy #$fd			cpy 	#253 						; string too long
.a753	b0 3f		bcs $a794			bcs 	_SALengthError
.a755	98		tya				tya 				 				; length of the new string
.a756	18		clc				clc
.a757	69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.a759	90 02		bcc $a75d			bcc 	_SAHaveLength
.a75b	a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.a75d					_SAHaveLength:
.a75d	48		pha				pha 								; save length.
.a75e	38		sec				sec
.a75f	49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.a761	6d 0e 07	adc $070e			adc 	StringMemory
.a764	8d 0e 07	sta $070e			sta 	StringMemory
.a767	85 3a		sta $3a				sta 	zTemp2 						; update storage address
.a769	9d 08 06	sta $0608,x			sta 	NSMantissa0,x 				; update mantissa address
.a76c	a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.a76e	6d 0f 07	adc $070f			adc 	StringMemory+1
.a771	8d 0f 07	sta $070f			sta 	StringMemory+1
.a774	85 3b		sta $3b				sta 	zTemp2+1
.a776	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.a779	68		pla				pla 								; save length-3 (chars allowed) in first byte
.a77a	38		sec				sec
.a77b	e9 03		sbc #$03			sbc 	#3
.a77d	92 3a		sta ($3a)			sta 	(zTemp2)
.a77f	a9 00		lda #$00			lda 	#0 							; clear the status byte.
.a781	a0 01		ldy #$01			ldy 	#1
.a783	91 3a		sta ($3a),y			sta 	(zTemp2),y
.a785					_SACopyNewString:
.a785	a0 00		ldy #$00			ldy 	#0
.a787					_SACopyNSLoop:
.a787	b1 38		lda ($38),y			lda 	(zTemp1),y 					; get character
.a789	c8		iny				iny 								; write two on in string storage
.a78a	c8		iny				iny
.a78b	91 3a		sta ($3a),y			sta 	(zTemp2),y
.a78d	88		dey				dey 								; this makes it one one.
.a78e	c9 00		cmp #$00			cmp 	#0 							; until EOS copied
.a790	d0 f5		bne $a787			bne 	_SACopyNSLoop
.a792	7a		ply				ply
.a793	60		rts				rts
.a794					_SALengthError:
.a794	a9 09		lda #$09		lda	#9
.a796	4c fe 8c	jmp $8cfe		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/stringalloc.asm

.a799					StringSystemInitialise:
.a799	a9 ff		lda #$ff			lda 	#((EndVariableSpace-1) & $FF)
.a79b	8d 0e 07	sta $070e			sta 	0+StringMemory
.a79e	a9 1f		lda #$1f			lda 	#((EndVariableSpace-1) >> 8)
.a7a0	8d 0f 07	sta $070f			sta 	1+StringMemory
.a7a3	9c ff 1f	stz $1fff			stz 	EndVariableSpace-1 			; put a zero at the end, so know end of string memory.
.a7a6	60		rts				rts
.a7a7					StringSpaceInitialise:
.a7a7	a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.a7a9	8d 10 07	sta $0710			sta 	StringInitialised
.a7ac	ad 0e 07	lda $070e			lda 	StringMemory 				; allocate 256 bytes for one concreted string
.a7af	8d 11 07	sta $0711			sta 	StringTempPointer
.a7b2	ad 0f 07	lda $070f			lda 	StringMemory+1
.a7b5	3a		dec a				dec 	a
.a7b6	8d 12 07	sta $0712			sta 	StringTempPointer+1
.a7b9	60		rts				rts
.a7ba					StringTempAllocate:
.a7ba	c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.a7bc	b0 35		bcs $a7f3			bcs 	_STALength
.a7be	2c 10 07	bit $0710			bit 	StringInitialised 			; already initialised
.a7c1	30 05		bmi $a7c8			bmi 	_STAAllocate
.a7c3	48		pha				pha 								; save value to subtract.
.a7c4	20 a7 a7	jsr $a7a7			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.a7c7	68		pla				pla 								; restore it
.a7c8					_STAAllocate:
.a7c8	49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.a7ca	18		clc				clc  								; deliberate allows one more
.a7cb	6d 11 07	adc $0711			adc 	StringTempPointer 			; subtract from temp pointer
.a7ce	8d 11 07	sta $0711			sta 	StringTempPointer
.a7d1	9d 08 06	sta $0608,x			sta 	NSMantissa0,x 				; address in mantissa
.a7d4	85 3c		sta $3c				sta 	zsTemp 						; and zsTemp
.a7d6	ad 12 07	lda $0712			lda 	StringTempPointer+1
.a7d9	69 ff		adc #$ff			adc 	#$FF
.a7db	8d 12 07	sta $0712			sta 	StringTempPointer+1
.a7de	85 3d		sta $3d				sta 	zsTemp+1
.a7e0	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.a7e3	9e 18 06	stz $0618,x			stz 	NSMantissa2,x 				; set the typing data
.a7e6	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.a7e9	a9 10		lda #$10			lda 	#NSTString
.a7eb	9d 00 06	sta $0600,x			sta 	NSStatus,x
.a7ee	a9 00		lda #$00			lda 	#0 							; clear the target string
.a7f0	92 3c		sta ($3c)			sta 	(zsTemp)
.a7f2	60		rts				rts
.a7f3					_STALength:
.a7f3	a9 09		lda #$09		lda	#9
.a7f5	4c fe 8c	jmp $8cfe		jmp	ErrorHandler
.a7f8					StringTempWrite:
.a7f8	48		pha				pha
.a7f9	92 3c		sta ($3c)			sta 	(zsTemp)
.a7fb	e6 3c		inc $3c				inc 	zsTemp
.a7fd	d0 02		bne $a801			bne 	_STWNoCarry
.a7ff	e6 3d		inc $3d				inc 	zsTemp+1
.a801					_STWNoCarry:
.a801	a9 00		lda #$00			lda 	#0
.a803	92 3c		sta ($3c)			sta 	(zsTemp)
.a805	68		pla				pla
.a806	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/backload.asm

.9911					BackloadProgram:
.9911	a2 ff		ldx #$ff			ldx 	#$FF
.9913	8e fa ff	stx $fffa			stx 	$FFFA 						; fast mode (autorun only)
.9916	20 40 99	jsr $9940			jsr 	BLReadByte
.9919	30 1e		bmi $9939			bmi 	_BPExit
.991b					_BPCopy:
.991b	e8		inx				inx  								; copy byte in
.991c	9d 26 08	sta $0826,x			sta 	lineBuffer,x
.991f	9e 27 08	stz $0827,x			stz 	lineBuffer+1,x
.9922	20 40 99	jsr $9940			jsr 	BLReadByte 					; read next byte
.9925	30 0a		bmi $9931			bmi 	_BPEndLine 					; -ve = EOL
.9927	c9 09		cmp #$09			cmp 	#9 							; handle TAB
.9929	d0 02		bne $992d			bne 	_BPNotTab
.992b	a9 20		lda #$20			lda 	#' '
.992d					_BPNotTab:
.992d	c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.992f	b0 ea		bcs $991b			bcs 	_BPCopy
.9931					_BPEndLine:
.9931	20 5b 9c	jsr $9c5b			jsr 	TokeniseLine 				; tokenise the line.
.9934	20 42 84	jsr $8442			jsr 	EditProgramCode
.9937	80 d8		bra $9911			bra 	BackloadProgram
.9939					_BPExit:
.9939	9c fa ff	stz $fffa			stz 	$FFFA 						; clear fast mode (autorun only)
.993c	20 d4 84	jsr $84d4			jsr 	ClearCommand 				; clear variables etc.
.993f	60		rts				rts
.9940					BLReadByte:
.9940					_BLLoad:
.9940	ad 00 30	lda $3000			lda 	$3000 						; hardcoded in the makefile.
.9943	ee 41 99	inc $9941			inc 	_BLLoad+1
.9946	d0 03		bne $994b			bne 	_BLNoCarry
.9948	ee 42 99	inc $9942			inc 	_BLLoad+2
.994b					_BLNoCarry:
.994b	c9 00		cmp #$00			cmp 	#0
.994d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/searchtokens.asm

.994e					TokeniseSearchTable:
.994e	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token.
.9950	85 36		sta $36				sta 	zTemp0
.9952	a0 00		ldy #$00			ldy 	#0
.9954	a9 80		lda #$80			lda 	#$80 						; token #
.9956	85 38		sta $38				sta 	zTemp1
.9958					_TSTLoop:
.9958	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.995a	30 49		bmi $99a5			bmi 	_TSTFail 					; -ve = end of table
.995c	f0 2e		beq $998c			beq 	_TSTNext 					; zero, check next it's a dummy
.995e	c8		iny				iny 								; get the hash
.995f	b1 36		lda ($36),y			lda 	(zTemp0),y
.9961	88		dey				dey
.9962	cd 03 07	cmp $0703			cmp 	identHash 					; check they match, if not go to next
.9965	d0 25		bne $998c			bne 	_TSTNext
.9967	ad 02 07	lda $0702			lda 	identTypeEnd 				; length of identifier
.996a	38		sec				sec
.996b	ed 00 07	sbc $0700			sbc 	identStart
.996e	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; no match, then return.
.9970	d0 1a		bne $998c			bne 	_TSTNext
.9972	5a		phy				phy 								; save Y , we might fail
.9973	c8		iny				iny 								; point to text
.9974	c8		iny				iny
.9975	ae 00 07	ldx $0700			ldx 	identStart 					; offset in line buffer in X
.9978					_TSTCompareName:
.9978	bd 26 08	lda $0826,x			lda 	lineBuffer,x 				; compare text.
.997b	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.997d	d0 0c		bne $998b			bne 	_TSTNextPullY 				; fail, pullY and do next
.997f	e8		inx				inx
.9980	c8		iny				iny
.9981	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; complete match.
.9984	d0 f2		bne $9978			bne 	_TSTCompareName
.9986	7a		ply				ply 								; throw Y
.9987	a5 38		lda $38				lda 	zTemp1 						; get token #
.9989	38		sec				sec 								; return with CS = passed.
.998a	60		rts				rts
.998b					_TSTNextPullY:
.998b	7a		ply				ply 								; restore current, fall through.
.998c					_TSTNext:
.998c	e6 38		inc $38				inc 	zTemp1 						; token counter
.998e	98		tya				tya
.998f	18		clc				clc
.9990	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.9992	1a		inc a				inc 	a 							; +1
.9993	1a		inc a				inc 	a 							; +2
.9994	a8		tay				tay
.9995	10 c1		bpl $9958			bpl 	_TSTLoop 					; if Y < $80 loop back
.9997	98		tya				tya 								; add Y to zTemp0 and reset Y
.9998	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.999a	18		clc				clc  								; but have tables > 255 bytes
.999b	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.999d	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.999f	90 b7		bcc $9958			bcc 	_TSTLoop
.99a1	e6 37		inc $37				inc 	zTemp0+1
.99a3	80 b3		bra $9958			bra 	_TSTLoop
.99a5					_TSTFail:
.99a5	18		clc				clc
.99a6	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/tokenise.asm


;******  Processing file: ./common/tokeniser/../generated/kwdtext.dat

.99a7					KeywordSet0:
>99a7	00 65					.text	0,$65,""               ; $80 !0:EOF
>99a9	00 58					.text	0,$58,""               ; $81 !1:SH1
>99ab	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>99ad	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $83 ABS(
>99b3	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $84 ALLOC(
>99bb	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $85 ASC(
>99c1	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $86 CHR$(
>99c8	05 6b 46 41 4c 53 45			.text	5,$6b,"FALSE"          ; $87 FALSE
>99cf	05 44 46 52 41 43 28			.text	5,$44,"FRAC("          ; $88 FRAC(
>99d6	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $89 INT(
>99dc	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $8a ISVAL(
>99e4	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $8b LEFT$(
>99ec	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $8c LEN(
>99f2	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $8d MID$(
>99f9	04 19 4e 4f 54 28			.text	4,$19,"NOT("           ; $8e NOT(
>99ff	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $8f RIGHT$(
>9a07	28
>9a08	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $90 RND(
>9a0e	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $91 SGN(
>9a14	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $92 SPC(
>9a1a	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $93 STR$(
>9a21	04 40 54 52 55 45			.text	4,$40,"TRUE"           ; $94 TRUE
>9a27	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $95 VAL(
>9a2d	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $96 FOR
>9a32	02 8f 49 46				.text	2,$8f,"IF"             ; $97 IF
>9a36	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $98 PROC
>9a3c	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $99 REPEAT
>9a44	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $9a WHILE
>9a4b	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $9b ENDIF
>9a52	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $9c ENDPROC
>9a5a	43
>9a5b	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $9d NEXT
>9a61	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $9e THEN
>9a67	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $9f UNTIL
>9a6e	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $a0 WEND
>9a74	04 1c 43 41 4c 4c			.text	4,$1c,"CALL"           ; $a1 CALL
>9a7a	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $a2 CLS
>9a7f	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $a3 DATA
>9a85	03 da 44 49 4d				.text	3,$da,"DIM"            ; $a4 DIM
>9a8a	06 db 44 4f 57 4e 54 4f			.text	6,$db,"DOWNTO"         ; $a5 DOWNTO
>9a92	04 29 45 4c 53 45			.text	4,$29,"ELSE"           ; $a6 ELSE
>9a98	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $a7 GOSUB
>9a9f	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $a8 GOTO
>9aa5	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $a9 LET
>9aaa	05 6b 4c 4f 43 41 4c			.text	5,$6b,"LOCAL"          ; $aa LOCAL
>9ab1	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $ab PRINT
>9ab8	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $ac READ
>9abe	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $ad REM
>9ac3	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $ae RETURN
>9acb	02 a3 54 4f				.text	2,$a3,"TO"             ; $af TO
>9acf	ff					.text	$FF
.9ad0					KeywordSet1:
>9ad0	00 65					.text	0,$65,""               ; $80 !0:EOF
>9ad2	00 58					.text	0,$58,""               ; $81 !1:SH1
>9ad4	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>9ad6	08 4c 41 53 53 45 4d 42			.text	8,$4c,"ASSEMBLE"       ; $83 ASSEMBLE
>9ade	4c 45
>9ae0	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $84 ASSERT
>9ae8	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $85 CLEAR
>9aef	03 d7 45 4e 44				.text	3,$d7,"END"            ; $86 END
>9af4	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $87 LIST
>9afa	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $88 NEW
>9aff	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $89 RESTORE
>9b07	45
>9b08	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $8a RUN
>9b0d	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $8b STOP
>9b13	ff					.text	$FF
.9b14					KeywordSet2:
>9b14	00 65					.text	0,$65,""               ; $80 !0:EOF
>9b16	00 58					.text	0,$58,""               ; $81 !1:SH1
>9b18	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>9b1a	03 c8 41 44 43				.text	3,$c8,"ADC"            ; $83 ADC
>9b1f	03 d3 41 4e 44				.text	3,$d3,"AND"            ; $84 AND
>9b24	03 e0 41 53 4c				.text	3,$e0,"ASL"            ; $85 ASL
>9b29	03 c8 42 43 43				.text	3,$c8,"BCC"            ; $86 BCC
>9b2e	03 d8 42 43 53				.text	3,$d8,"BCS"            ; $87 BCS
>9b33	03 d8 42 45 51				.text	3,$d8,"BEQ"            ; $88 BEQ
>9b38	03 df 42 49 54				.text	3,$df,"BIT"            ; $89 BIT
>9b3d	03 d8 42 4d 49				.text	3,$d8,"BMI"            ; $8a BMI
>9b42	03 d5 42 4e 45				.text	3,$d5,"BNE"            ; $8b BNE
>9b47	03 de 42 50 4c				.text	3,$de,"BPL"            ; $8c BPL
>9b4c	03 d5 42 52 41				.text	3,$d5,"BRA"            ; $8d BRA
>9b51	03 df 42 52 4b				.text	3,$df,"BRK"            ; $8e BRK
>9b56	03 db 42 56 43				.text	3,$db,"BVC"            ; $8f BVC
>9b5b	03 eb 42 56 53				.text	3,$eb,"BVS"            ; $90 BVS
>9b60	03 d2 43 4c 43				.text	3,$d2,"CLC"            ; $91 CLC
>9b65	03 d3 43 4c 44				.text	3,$d3,"CLD"            ; $92 CLD
>9b6a	03 d8 43 4c 49				.text	3,$d8,"CLI"            ; $93 CLI
>9b6f	03 e5 43 4c 56				.text	3,$e5,"CLV"            ; $94 CLV
>9b74	03 e0 43 4d 50				.text	3,$e0,"CMP"            ; $95 CMP
>9b79	03 eb 43 50 58				.text	3,$eb,"CPX"            ; $96 CPX
>9b7e	03 ec 43 50 59				.text	3,$ec,"CPY"            ; $97 CPY
>9b83	03 cc 44 45 43				.text	3,$cc,"DEC"            ; $98 DEC
>9b88	03 e1 44 45 58				.text	3,$e1,"DEX"            ; $99 DEX
>9b8d	03 e2 44 45 59				.text	3,$e2,"DEY"            ; $9a DEY
>9b92	03 e6 45 4f 52				.text	3,$e6,"EOR"            ; $9b EOR
>9b97	03 da 49 4e 43				.text	3,$da,"INC"            ; $9c INC
>9b9c	03 ef 49 4e 58				.text	3,$ef,"INX"            ; $9d INX
>9ba1	03 f0 49 4e 59				.text	3,$f0,"INY"            ; $9e INY
>9ba6	03 e7 4a 4d 50				.text	3,$e7,"JMP"            ; $9f JMP
>9bab	03 ef 4a 53 52				.text	3,$ef,"JSR"            ; $a0 JSR
>9bb0	03 d1 4c 44 41				.text	3,$d1,"LDA"            ; $a1 LDA
>9bb5	03 e8 4c 44 58				.text	3,$e8,"LDX"            ; $a2 LDX
>9bba	03 e9 4c 44 59				.text	3,$e9,"LDY"            ; $a3 LDY
>9bbf	03 f1 4c 53 52				.text	3,$f1,"LSR"            ; $a4 LSR
>9bc4	03 ed 4e 4f 50				.text	3,$ed,"NOP"            ; $a5 NOP
>9bc9	03 e2 4f 52 41				.text	3,$e2,"ORA"            ; $a6 ORA
>9bce	03 d9 50 48 41				.text	3,$d9,"PHA"            ; $a7 PHA
>9bd3	03 e8 50 48 50				.text	3,$e8,"PHP"            ; $a8 PHP
>9bd8	03 f0 50 48 58				.text	3,$f0,"PHX"            ; $a9 PHX
>9bdd	03 f1 50 48 59				.text	3,$f1,"PHY"            ; $aa PHY
>9be2	03 dd 50 4c 41				.text	3,$dd,"PLA"            ; $ab PLA
>9be7	03 ec 50 4c 50				.text	3,$ec,"PLP"            ; $ac PLP
>9bec	03 f4 50 4c 58				.text	3,$f4,"PLX"            ; $ad PLX
>9bf1	03 f5 50 4c 59				.text	3,$f5,"PLY"            ; $ae PLY
>9bf6	03 ed 52 4f 4c				.text	3,$ed,"ROL"            ; $af ROL
>9bfb	03 f3 52 4f 52				.text	3,$f3,"ROR"            ; $b0 ROR
>9c00	03 ef 52 54 49				.text	3,$ef,"RTI"            ; $b1 RTI
>9c05	03 f9 52 54 53				.text	3,$f9,"RTS"            ; $b2 RTS
>9c0a	03 d8 53 42 43				.text	3,$d8,"SBC"            ; $b3 SBC
>9c0f	03 db 53 45 43				.text	3,$db,"SEC"            ; $b4 SEC
>9c14	03 dc 53 45 44				.text	3,$dc,"SED"            ; $b5 SED
>9c19	03 e1 53 45 49				.text	3,$e1,"SEI"            ; $b6 SEI
>9c1e	03 e8 53 54 41				.text	3,$e8,"STA"            ; $b7 STA
>9c23	03 ff 53 54 58				.text	3,$ff,"STX"            ; $b8 STX
>9c28	03 00 53 54 59				.text	3,$00,"STY"            ; $b9 STY
>9c2d	03 01 53 54 5a				.text	3,$01,"STZ"            ; $ba STZ
>9c32	03 ed 54 41 58				.text	3,$ed,"TAX"            ; $bb TAX
>9c37	03 ee 54 41 59				.text	3,$ee,"TAY"            ; $bc TAY
>9c3c	03 e8 54 52 42				.text	3,$e8,"TRB"            ; $bd TRB
>9c41	03 e9 54 53 42				.text	3,$e9,"TSB"            ; $be TSB
>9c46	03 ff 54 53 58				.text	3,$ff,"TSX"            ; $bf TSX
>9c4b	03 ed 54 58 41				.text	3,$ed,"TXA"            ; $c0 TXA
>9c50	03 ff 54 58 53				.text	3,$ff,"TXS"            ; $c1 TXS
>9c55	03 ee 54 59 41				.text	3,$ee,"TYA"            ; $c2 TYA
>9c5a	ff					.text	$FF

;******  Return to file: ./common/tokeniser/tokenise.asm

.9c5b					TokeniseLine:
.9c5b	20 e3 9d	jsr $9de3			jsr 	FixLineBufferCase 			; fix line case
.9c5e	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.9c60	8d 26 07	sta $0726			sta 	tokenOffset
.9c63	9c 27 07	stz $0727			stz 	tokenLineNumber
.9c66	9c 28 07	stz $0728			stz 	tokenLineNumber+1
.9c69	a2 ff		ldx #$ff			ldx 	#$FF
.9c6b					_TKFindFirst:
.9c6b	e8		inx				inx
.9c6c	bd 26 08	lda $0826,x			lda 	lineBuffer,x
.9c6f	f0 79		beq $9cea			beq 	_TKExit
.9c71	c9 20		cmp #$20			cmp 	#' '
.9c73	90 f6		bcc $9c6b			bcc 	_TKFindFirst
.9c75	c9 30		cmp #$30			cmp 	#'0'
.9c77	90 07		bcc $9c80			bcc 	_TKNoLineNumber
.9c79	c9 3a		cmp #$3a			cmp 	#'9'+1
.9c7b	b0 03		bcs $9c80			bcs 	_TKNoLineNumber
.9c7d	20 0d 9e	jsr $9e0d			jsr 	TokeniseExtractLineNumber
.9c80					_TKNoLineNumber:
.9c80					_TKTokeniseLoop:
.9c80	bd 26 08	lda $0826,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.9c83	f0 65		beq $9cea			beq 	_TKExit
.9c85	e8		inx				inx
.9c86	c9 20		cmp #$20			cmp 	#' '
.9c88	f0 f6		beq $9c80			beq 	_TKTokeniseLoop 			; keep looping if space found.
.9c8a	ca		dex				dex 								; undo last get, A contains character, X is position.
.9c8b	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.9c8d	f0 61		beq $9cf0			beq 	_TKTokeniseIdentifier
.9c8f	c9 41		cmp #$41			cmp 	#'A'
.9c91	90 04		bcc $9c97			bcc 	_TKTokenisePunctuation
.9c93	c9 5b		cmp #$5b			cmp 	#'Z'+1
.9c95	90 59		bcc $9cf0			bcc 	_TKTokeniseIdentifier
.9c97					_TKTokenisePunctuation:
.9c97	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.9c99	f0 27		beq $9cc2			beq 	_TKString
.9c9b	c9 24		cmp #$24			cmp 	#'$'						; hexadecimal constant (# only appears at end of identifiers)
.9c9d	f0 28		beq $9cc7			beq 	_TKHexConstant
.9c9f	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers.
.9ca1	f0 29		beq $9ccc			beq 	_TKCheckDouble
.9ca3	c9 3e		cmp #$3e			cmp 	#'>'
.9ca5	f0 25		beq $9ccc			beq 	_TKCheckDouble
.9ca7					_TKStandardPunctuation:
.9ca7	bd 26 08	lda $0826,x			lda 	lineBuffer,x 				; get it back.
.9caa	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.9cac	90 0e		bcc $9cbc			bcc 	_TKNoShift
.9cae	48		pha				pha 								; save
.9caf	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.9cb1	85 36		sta $36				sta 	zTemp0
.9cb3	68		pla				pla
.9cb4	29 20		and #$20			and 	#32 						; bit 5
.9cb6	4a		lsr a				lsr 	a 							; shift into bit 3
.9cb7	4a		lsr a				lsr 	a
.9cb8	05 36		ora $36				ora 	zTemp0
.9cba	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.9cbc					_TKNoShift:
.9cbc	20 52 9e	jsr $9e52			jsr 	TokeniseWriteByte 			; write the punctuation character
.9cbf	e8		inx				inx 								; consume the character
.9cc0	80 be		bra $9c80			bra 	_TKTokeniseLoop 			; and loop round again.
.9cc2					_TKString:
.9cc2	20 72 9d	jsr $9d72			jsr 	TokeniseString
.9cc5	80 b9		bra $9c80			bra 	_TKTokeniseLoop
.9cc7					_TKHexConstant:
.9cc7	20 ad 9d	jsr $9dad			jsr 	TokeniseHexConstant
.9cca	80 b4		bra $9c80			bra 	_TKTokeniseLoop
.9ccc					_TKCheckDouble:
.9ccc	bd 27 08	lda $0827,x			lda 	lineBuffer+1,x 				; get next character
.9ccf	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.9cd1	90 d4		bcc $9ca7			bcc 	_TKStandardPunctuation
.9cd3	c9 3f		cmp #$3f			cmp 	#'>'+1
.9cd5	b0 d0		bcs $9ca7			bcs 	_TKStandardPunctuation
.9cd7	bd 26 08	lda $0826,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.9cda	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.9cdc	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.9cdd	7d 27 08	adc $0827,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.9ce0	38		sec				sec
.9ce1	e9 3c		sbc #$3c			sbc 	#'<'
.9ce3	20 52 9e	jsr $9e52			jsr 	TokeniseWriteByte 			; this is in the range 0-7
.9ce6	e8		inx				inx 								; consume both
.9ce7	e8		inx				inx
.9ce8	80 96		bra $9c80			bra 	_TKTokeniseLoop
.9cea	a9 80		lda #$80	_TKExit:lda 	#KWC_EOL 					; write end of line byte
.9cec	20 52 9e	jsr $9e52			jsr 	TokeniseWriteByte
.9cef	60		rts				rts
.9cf0					_TKTokeniseIdentifier:
.9cf0	8e 00 07	stx $0700			stx 	identStart 					; save start
.9cf3	9c 04 07	stz $0704			stz 	identTypeByte 				; zero the type byte
.9cf6					_TKCheckLoop:
.9cf6	e8		inx				inx 								; look at next, we know first is identifier.
.9cf7	bd 26 08	lda $0826,x			lda  	lineBuffer,x
.9cfa	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.9cfc	f0 f8		beq $9cf6			beq 	_TKCheckLoop
.9cfe	c9 30		cmp #$30			cmp	 	#"0"
.9d00	90 0c		bcc $9d0e			bcc 	_TKEndIdentifier
.9d02	c9 3a		cmp #$3a			cmp 	#"9"+1
.9d04	90 f0		bcc $9cf6			bcc 	_TKCheckLoop
.9d06	c9 41		cmp #$41			cmp	 	#"A"
.9d08	90 04		bcc $9d0e			bcc 	_TKEndIdentifier
.9d0a	c9 5b		cmp #$5b			cmp 	#"Z"+1
.9d0c	90 e8		bcc $9cf6			bcc 	_TKCheckLoop
.9d0e					_TKEndIdentifier:
.9d0e	8e 01 07	stx $0701			stx 	identTypeStart 				; save start of type text (if any !)
.9d11	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.9d13	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.9d15	f0 06		beq $9d1d			beq 	_TKHasTypeCharacter
.9d17	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.9d19	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.9d1b	d0 07		bne $9d24			bne 	_TKNoTypeCharacter
.9d1d					_TKHasTypeCharacter:
.9d1d	8c 04 07	sty $0704			sty 	identTypeByte 				; has # or $, save the type
.9d20	e8		inx				inx 								; read next
.9d21	bd 26 08	lda $0826,x			lda 	lineBuffer,x
.9d24					_TKNoTypeCharacter:
.9d24	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.9d26	d0 09		bne $9d31			bne 	_TKNoArray
.9d28	e8		inx				inx 								; skip the (
.9d29	ad 04 07	lda $0704			lda 	identTypeByte 				; set bit 2 (e.g. array)
.9d2c	09 04		ora #$04			ora 	#$04
.9d2e	8d 04 07	sta $0704			sta 	identTypeByte
.9d31					_TKNoArray:
.9d31	8e 02 07	stx $0702			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.9d34	20 ce 9d	jsr $9dce			jsr 	TokeniseCalculateHash 		; calculate the has for those tokens
.9d37	a0 99		ldy #$99			ldy 	#(KeywordSet0) >> 8
.9d39	a9 a7		lda #$a7			lda 	#(KeywordSet0) & $FF
.9d3b	20 4e 99	jsr $994e			jsr 	TokeniseSearchTable
.9d3e	a2 00		ldx #$00			ldx 	#0
.9d40	b0 1f		bcs $9d61			bcs 	_TKFoundToken
.9d42	a0 9a		ldy #$9a			ldy 	#(KeywordSet1) >> 8
.9d44	a9 d0		lda #$d0			lda 	#(KeywordSet1) & $FF
.9d46	20 4e 99	jsr $994e			jsr 	TokeniseSearchTable
.9d49	a2 81		ldx #$81			ldx 	#$81
.9d4b	b0 14		bcs $9d61			bcs 	_TKFoundToken
.9d4d	a0 9b		ldy #$9b			ldy 	#(KeywordSet2) >> 8
.9d4f	a9 14		lda #$14			lda 	#(KeywordSet2) & $FF
.9d51	20 4e 99	jsr $994e			jsr 	TokeniseSearchTable
.9d54	a2 82		ldx #$82			ldx 	#$82
.9d56	b0 09		bcs $9d61			bcs 	_TKFoundToken
.9d58	20 5e 9e	jsr $9e5e			jsr 	CheckCreateVariableRecord 	; failed all, it's a variable, create record if does not exist.
.9d5b	ae 02 07	ldx $0702			ldx 	identTypeEnd 				; X points to following byte
.9d5e	4c 80 9c	jmp $9c80			jmp 	_TKTokeniseLoop 			; and go round again.
.9d61					_TKFoundToken:
.9d61	48		pha				pha 								; save token
.9d62	8a		txa				txa 								; shift in X, is there one ?
.9d63	f0 03		beq $9d68			beq 	_TKNoTShift
.9d65	20 52 9e	jsr $9e52			jsr 	TokeniseWriteByte 			; if so, write it out
.9d68					_TKNoTShift:
.9d68	68		pla				pla 								; restore and write token
.9d69	20 52 9e	jsr $9e52			jsr 	TokeniseWriteByte
.9d6c	ae 02 07	ldx $0702			ldx 	identTypeEnd 				; X points to following byte
.9d6f	4c 80 9c	jmp $9c80			jmp 	_TKTokeniseLoop 			; and go round again.
.9d72					TokeniseString:
.9d72	a9 ff		lda #$ff			lda 	#KWC_STRING 				; string token.
.9d74	20 52 9e	jsr $9e52			jsr 	TokeniseWriteByte
.9d77	e8		inx				inx									; start of quoted string.
.9d78	da		phx				phx 								; push start of string on top
.9d79	ca		dex				dex
.9d7a					_TSFindEnd:
.9d7a	e8		inx				inx
.9d7b	bd 26 08	lda $0826,x			lda 	lineBuffer,x 				; next character
.9d7e	f0 04		beq $9d84			beq 	_TSEndOfString
.9d80	c9 22		cmp #$22			cmp 	#'"'
.9d82	d0 f6		bne $9d7a			bne 	_TSFindEnd
.9d84					_TSEndOfString:
.9d84	7a		ply				ply  								; so now Y is first character, X is character after end.
.9d85	48		pha				pha 								; save terminating character
.9d86	20 8e 9d	jsr $9d8e			jsr 	TOWriteBlockXY 				; write X to Y as a data block
.9d89	68		pla				pla 								; terminating character
.9d8a	f0 01		beq $9d8d			beq 	_TSNotQuote					; if it wasn't EOS skip it
.9d8c	e8		inx				inx
.9d8d					_TSNotQuote:
.9d8d	60		rts				rts
.9d8e					TOWriteBlockXY:
.9d8e	86 36		stx $36				stx 	zTemp0 						; write end character
.9d90	98		tya				tya
.9d91	49 ff		eor #$ff			eor 	#$FF
.9d93	38		sec				sec
.9d94	65 36		adc $36				adc 	zTemp0
.9d96	1a		inc a				inc 	a 							; one extra for NULL
.9d97	20 52 9e	jsr $9e52			jsr 	TokeniseWriteByte
.9d9a					_TOBlockLoop:
.9d9a	c4 36		cpy $36				cpy 	zTemp0
.9d9c	f0 09		beq $9da7			beq 	_TOBlockExit
.9d9e	b9 26 08	lda $0826,y			lda 	lineBuffer,y
.9da1	20 52 9e	jsr $9e52			jsr 	TokeniseWriteByte
.9da4	c8		iny				iny
.9da5	80 f3		bra $9d9a			bra 	_TOBlockLoop
.9da7					_TOBlockExit:
.9da7	a9 00		lda #$00			lda 	#0
.9da9	20 52 9e	jsr $9e52			jsr 	TokeniseWriteByte
.9dac	60		rts				rts
.9dad					TokeniseHexConstant:
.9dad	a9 fe		lda #$fe			lda 	#KWC_HEXCONST 				; hex constant token.
.9daf	20 52 9e	jsr $9e52			jsr 	TokeniseWriteByte
.9db2	e8		inx				inx									; start of quoted string.
.9db3	da		phx				phx 								; push start of constant on top
.9db4	ca		dex				dex
.9db5					_THFindLoop:
.9db5	e8		inx				inx
.9db6	bd 26 08	lda $0826,x			lda 	lineBuffer,x
.9db9	c9 30		cmp #$30			cmp 	#"0"
.9dbb	90 0c		bcc $9dc9			bcc 	_THFoundEnd
.9dbd	c9 3a		cmp #$3a			cmp 	#"9"+1
.9dbf	90 f4		bcc $9db5			bcc 	_THFindLoop
.9dc1	c9 41		cmp #$41			cmp 	#"A"
.9dc3	90 04		bcc $9dc9			bcc 	_THFoundEnd
.9dc5	c9 47		cmp #$47			cmp 	#"F"+1
.9dc7	90 ec		bcc $9db5			bcc 	_THFindLoop
.9dc9					_THFoundEnd:
.9dc9	7a		ply				ply 								; restore start
.9dca	20 8e 9d	jsr $9d8e			jsr 	TOWriteBlockXY 				; output the block
.9dcd	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/utility.asm

.9dce					TokeniseCalculateHash:
.9dce	da		phx				phx
.9dcf	ae 00 07	ldx $0700			ldx 	identStart 					; needs to be same as in tokens.py - simple sum
.9dd2	a9 00		lda #$00			lda 	#0
.9dd4					_TCHLoop:
.9dd4	18		clc				clc
.9dd5	7d 26 08	adc $0826,x			adc 	lineBuffer,x
.9dd8	e8		inx				inx
.9dd9	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.9ddc	d0 f6		bne $9dd4			bne 	_TCHLoop
.9dde	8d 03 07	sta $0703			sta 	identHash 					; save the hash
.9de1	fa		plx				plx
.9de2	60		rts				rts
.9de3					FixLineBufferCase:
.9de3	a2 00		ldx #$00			ldx 	#0
.9de5					_FLBCLoop:
.9de5	bd 26 08	lda $0826,x			lda 	lineBuffer,x 				; get next character
.9de8	f0 22		beq $9e0c			beq 	_FLBCExit 					; end of string.
.9dea	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.9dec	f0 11		beq $9dff			beq 	_FLBCInQuotes
.9dee	e8		inx				inx
.9def	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.9df1	90 f2		bcc $9de5			bcc 	_FLBCLoop
.9df3	c9 7b		cmp #$7b			cmp 	#'z'+1
.9df5	b0 ee		bcs $9de5			bcs 	_FLBCLoop
.9df7	38		sec				sec 								; make U/C
.9df8	e9 20		sbc #$20			sbc 	#32
.9dfa	9d 25 08	sta $0825,x			sta	 	lineBuffer-1,x 				; write back
.9dfd	80 e6		bra $9de5			bra 	_FLBCLoop
.9dff					_FLBCInQuotes:
.9dff	e8		inx				inx 								; advance
.9e00	bd 26 08	lda $0826,x			lda 	lineBuffer,x 				; get next
.9e03	f0 07		beq $9e0c			beq 	_FLBCExit 					; exit on EOS
.9e05	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.9e07	d0 f6		bne $9dff			bne 	_FLBCInQuotes
.9e09	e8		inx				inx 								; skip over it
.9e0a	80 d9		bra $9de5			bra 	_FLBCLoop
.9e0c					_FLBCExit:
.9e0c	60		rts				rts
.9e0d					TokeniseExtractLineNumber:
.9e0d	ad 28 07	lda $0728			lda 	tokenLineNumber+1 			; push current value on stack
.9e10	48		pha				pha
.9e11	ad 27 07	lda $0727			lda 	tokenLineNumber
.9e14	48		pha				pha
.9e15	20 4b 9e	jsr $9e4b			jsr 	_TELNTimes2 				; line # x 4
.9e18	20 4b 9e	jsr $9e4b			jsr 	_TELNTimes2 				; line # x 2
.9e1b	18		clc				clc 								; add stacked value
.9e1c	68		pla				pla
.9e1d	6d 27 07	adc $0727			adc 	tokenLineNumber
.9e20	8d 27 07	sta $0727			sta 	tokenLineNumber
.9e23	68		pla				pla
.9e24	6d 28 07	adc $0728			adc 	tokenLineNumber+1
.9e27	8d 28 07	sta $0728			sta 	tokenLineNumber+1 			; line # x 5
.9e2a	20 4b 9e	jsr $9e4b			jsr 	_TELNTimes2 				; line # x 10
.9e2d	bd 26 08	lda $0826,x			lda 	lineBuffer,x 				; get and consume character
.9e30	e8		inx				inx
.9e31	29 0f		and #$0f			and 	#15 						; add to line #
.9e33	18		clc				clc
.9e34	6d 27 07	adc $0727			adc 	tokenLineNumber
.9e37	8d 27 07	sta $0727			sta 	tokenLineNumber
.9e3a	90 03		bcc $9e3f			bcc 	_TLENNoCarry
.9e3c	ee 28 07	inc $0728			inc 	tokenLineNumber+1
.9e3f					_TLENNoCarry:
.9e3f	bd 26 08	lda $0826,x			lda 	lineBuffer,x 				; more digits ?
.9e42	c9 30		cmp #$30			cmp 	#'0'
.9e44	90 04		bcc $9e4a			bcc 	_TLENExit
.9e46	c9 3a		cmp #$3a			cmp 	#'9'+1
.9e48	90 c3		bcc $9e0d			bcc 	TokeniseExtractLineNumber
.9e4a					_TLENExit:
.9e4a	60		rts				rts
.9e4b					_TELNTimes2:
.9e4b	0e 27 07	asl $0727			asl 	tokenLineNumber
.9e4e	2e 28 07	rol $0728			rol 	tokenLineNumber+1
.9e51	60		rts				rts
.9e52					TokeniseWriteByte:
.9e52	da		phx				phx
.9e53	ae 26 07	ldx $0726			ldx 	tokenOffset 				; next slot to write to
.9e56	9d 26 07	sta $0726,x			sta 	tokenOffset,x 				; write byte out
.9e59	ee 26 07	inc $0726			inc 	tokenOffset 				; advance slot.
.9e5c	fa		plx				plx
.9e5d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/variablerecord.asm

.9e5e					CheckCreateVariableRecord:
.9e5e	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.9e60	85 36		sta $36				sta 	0+zTemp0
.9e62	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.9e64	85 37		sta $37				sta 	1+zTemp0
.9e66					_CCVSearch:
.9e66	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.9e68	f0 2c		beq $9e96			beq 	_CCVFail
.9e6a	a0 01		ldy #$01			ldy 	#1 							; read the hash
.9e6c	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.9e6e	cd 03 07	cmp $0703			cmp 	identHash
.9e71	d0 16		bne $9e89			bne 	_CCVNext
.9e73	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.9e75	ae 00 07	ldx $0700			ldx 	identStart
.9e78					_CCVCompare:
.9e78	bd 26 08	lda $0826,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.9e7b	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.9e7d	e8		inx				inx 								; advance pointers
.9e7e	c8		iny				iny
.9e7f	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.9e80	d0 07		bne $9e89			bne 	_CCVNext  					; didn't match go to next.
.9e82	90 f4		bcc $9e78			bcc 	_CCVCompare 				; not finished yet.
.9e84	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; matched whole thing ?
.9e87	f0 41		beq $9eca			beq 	_CCVFound 					; yes, we were successful
.9e89					_CCVNext:
.9e89	18		clc				clc
.9e8a	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.9e8c	65 36		adc $36				adc 	zTemp0
.9e8e	85 36		sta $36				sta 	zTemp0
.9e90	90 d4		bcc $9e66			bcc 	_CCVSearch
.9e92	e6 37		inc $37				inc 	zTemp0+1
.9e94	80 d0		bra $9e66			bra 	_CCVSearch
.9e96					_CCVFail:
.9e96	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.9e98	ad 03 07	lda $0703			lda 	identHash
.9e9b	91 36		sta ($36),y			sta 	(zTemp0),y
.9e9d	c8		iny				iny 								; offset 2 is the type byte
.9e9e	ad 04 07	lda $0704			lda 	identTypeByte
.9ea1	91 36		sta ($36),y			sta 	(zTemp0),y
.9ea3	c8		iny				iny
.9ea4					_CCVData:
.9ea4	a9 00		lda #$00			lda 	#0 							; erase data 3-7
.9ea6	91 36		sta ($36),y			sta 	(zTemp0),y
.9ea8	c8		iny				iny
.9ea9	c0 08		cpy #$08			cpy 	#8
.9eab	90 f7		bcc $9ea4			bcc 	_CCVData
.9ead	ae 00 07	ldx $0700			ldx 	identStart 					; copy name into 8 on.
.9eb0					_CCVCopyName:
.9eb0	bd 26 08	lda $0826,x			lda 	lineBuffer,x
.9eb3	91 36		sta ($36),y			sta 	(zTemp0),y
.9eb5	e8		inx				inx
.9eb6	c8		iny				iny
.9eb7	ec 02 07	cpx $0702			cpx 	identTypeEnd
.9eba	d0 f4		bne $9eb0			bne 	_CCVCopyName
.9ebc	98		tya				tya 								; patch offset
.9ebd	92 36		sta ($36)			sta 	(zTemp0)
.9ebf	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.9ec1	91 36		sta ($36),y			sta 	(zTemp0),y
.9ec3	88		dey				dey
.9ec4	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.9ec6	09 80		ora #$80			ora 	#$80
.9ec8	91 36		sta ($36),y			sta 	(zTemp0),y
.9eca					_CCVFound:
.9eca	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.9ecc	38		sec				sec
.9ecd	e9 10		sbc #$10			sbc 	#(VariableSpace >> 8) 		; offset from the start
.9ecf	09 40		ora #$40			ora 	#$40 						; make it a writeable token
.9ed1	20 52 9e	jsr $9e52			jsr 	TokeniseWriteByte
.9ed4	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.9ed6	20 52 9e	jsr $9e52			jsr 	TokeniseWriteByte
.9ed9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./variants/hardware/junior/extern.asm

.a807					EXTPrintCharacter:
.a807	48		pha				pha
.a808	da		phx				phx
.a809	5a		phy				phy
.a80a	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.a80d	7a		ply				ply
.a80e	fa		plx				plx
.a80f	68		pla				pla
.a810	60		rts				rts
.a811					EXTInputSingleCharacter:
.a811	da		phx				phx
.a812	5a		phy				phy
.a813					_EISCWait:
.a813	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.a816	c9 00		cmp #$00			cmp 	#0
.a818	f0 f9		beq $a813			beq 	_EISCWait
.a81a	7a		ply				ply
.a81b	fa		plx				plx
.a81c	60		rts				rts
.a81d					EXTInputLine:
.a81d	a2 00		ldx #$00			ldx 	#0 							; position in line <- start of line
.a81f					_ILLoop:
.a81f	da		phx				phx 								; read character in
.a820	20 cf ff	jsr $ffcf			jsr 	$FFCF
.a823	fa		plx				plx
.a824	c9 08		cmp #$08			cmp 	#8 							; backspace, CBM doesn't need this.
.a826	f0 12		beq $a83a			beq 	_ILBackspace
.a828	c9 0d		cmp #$0d			cmp 	#13							; exit ?
.a82a	f0 15		beq $a841			beq 	_ILExit
.a82c	c9 20		cmp #$20			cmp 	#32 						; ignore other control
.a82e	90 ef		bcc $a81f			bcc 	_ILLoop
.a830	e0 50		cpx #$50			cpx 	#MaxLineSize 				; already full buffer
.a832	f0 eb		beq $a81f			beq 	_ILLoop
.a834	9d 26 08	sta $0826,x			sta 	lineBuffer,x 				; save it
.a837	e8		inx				inx
.a838	80 e5		bra $a81f			bra 	_ILLoop
.a83a					_ILBackspace:
.a83a	e0 00		cpx #$00			cpx 	#0  						; can't backspace, start of line.
.a83c	f0 e1		beq $a81f			beq 	_ILLoop
.a83e	ca		dex				dex 								; back one.
.a83f	80 de		bra $a81f			bra 	_ILLoop
.a841					_ILExit:
.a841	20 07 a8	jsr $a807			jsr 	EXTPrintCharacter
.a844	9e 26 08	stz $0826,x			stz 	lineBuffer,x 				; make ASCIIZ and exit with address in XA
.a847	60		rts				rts
.a848					EXTBreakCheck:
.a848	4c e1 ff	jmp $ffe1			jmp		$FFE1

;******  Return to file: _basic.asm


;******  Processing file: ./variants/memory.flat/delete.asm

.a84b					MemoryDeleteLine:
.a84b	20 6a a8	jsr $a86a			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.a84e	b2 30		lda ($30)			lda 	(codePtr) 					; size to delete => y
.a850	a8		tay				tay
.a851					_MDDLLoop:
.a851	b1 30		lda ($30),y			lda 	(codePtr),y 				; copy down
.a853	92 30		sta ($30)			sta 	(codePtr)
.a855	a5 30		lda $30				lda 	codePtr 					; check done the lot.
.a857	c5 3a		cmp $3a				cmp 	zTemp2
.a859	d0 07		bne $a862			bne 	_MDLDLNext
.a85b	a5 31		lda $31				lda 	codePtr+1
.a85d	c5 3b		cmp $3b				cmp 	zTemp2+1
.a85f	d0 01		bne $a862			bne 	_MDLDLNext
.a861					_MDDLExit:
.a861	60		rts				rts
.a862					_MDLDLNext:
.a862	e6 30		inc $30				inc 	codePtr						; next byte
.a864	d0 eb		bne $a851			bne 	_MDDLLoop
.a866	e6 31		inc $31				inc 	codePtr+1
.a868	80 e7		bra $a851			bra 	_MDDLLoop
.a86a					IMemoryFindEnd:
.a86a	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a86c	85 3a		sta $3a				sta 	0+zTemp2
.a86e	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a870	85 3b		sta $3b				sta 	1+zTemp2
.a872					_MDLFELoop:
.a872	b2 3a		lda ($3a)			lda 	(zTemp2)
.a874	f0 0b		beq $a881			beq 	_MDLFEExit
.a876	18		clc				clc
.a877	65 3a		adc $3a				adc 	zTemp2
.a879	85 3a		sta $3a				sta 	zTemp2
.a87b	90 f5		bcc $a872			bcc 	_MDLFELoop
.a87d	e6 3b		inc $3b				inc 	zTemp2+1
.a87f	80 f1		bra $a872			bra 	_MDLFELoop
.a881					_MDLFEExit:
.a881	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./variants/memory.flat/insert.asm

.a882					MemoryInsertLine:
.a882	08		php				php
.a883	20 6a a8	jsr $a86a			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.a886	28		plp				plp
.a887	90 08		bcc $a891			bcc 	_MDLIFound
.a889	a5 3a		lda $3a				lda 	zTemp2 						; if CS on entry append.
.a88b	85 30		sta $30				sta 	codePtr
.a88d	a5 3b		lda $3b				lda 	zTemp2+1
.a88f	85 31		sta $31				sta 	codePtr+1
.a891					_MDLIFound:
.a891	ad 26 07	lda $0726			lda 	tokenOffset 				; insert gap in Y, the offset, e.g. length of the new line
.a894	a8		tay				tay
.a895					_MDLIInsert:
.a895	b2 3a		lda ($3a)			lda 	(zTemp2) 					; shift one byte up , at least one covers end case.
.a897	91 3a		sta ($3a),y			sta 	(zTemp2),y 					; work from top down.
.a899	a5 30		lda $30				lda 	codePtr 					; done insert point ?
.a89b	c5 3a		cmp $3a				cmp 	zTemp2
.a89d	d0 06		bne $a8a5			bne 	_MDLINext
.a89f	a5 31		lda $31				lda 	codePtr+1
.a8a1	c5 3b		cmp $3b				cmp 	zTemp2+1
.a8a3	f0 0a		beq $a8af			beq 	_MDLIHaveSpace
.a8a5					_MDLINext:
.a8a5	a5 3a		lda $3a				lda 	zTemp2 						; if no, keep zTemp2 going backwards
.a8a7	d0 02		bne $a8ab			bne 	_MDLINoBorrow
.a8a9	c6 3b		dec $3b				dec 	zTemp2+1
.a8ab					_MDLINoBorrow:
.a8ab	c6 3a		dec $3a				dec 	zTemp2
.a8ad	80 e6		bra $a895			bra 	_MDLIInsert
.a8af					_MDLIHaveSpace:
.a8af	ac 26 07	ldy $0726			ldy 	tokenOffset 				; bytes to copy
.a8b2	88		dey				dey 								; from offset-1 to 0
.a8b3					_MDLICopy:
.a8b3	b9 26 07	lda $0726,y			lda 	tokenOffset,y
.a8b6	91 30		sta ($30),y			sta 	(codePtr),y
.a8b8	88		dey				dey
.a8b9	10 f8		bpl $a8b3			bpl 	_MDLICopy
.a8bb	60		rts				rts
.a8bc					MDLAppendLine:
.a8bc	86 37		stx $37				stx 	zTemp0+1 					; save new line at zTemp0
.a8be	85 36		sta $36				sta 	zTemp0
.a8c0	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a8c2	85 38		sta $38				sta 	0+zTemp1
.a8c4	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a8c6	85 39		sta $39				sta 	1+zTemp1
.a8c8	b2 38		lda ($38)			lda 	(zTemp1)
.a8ca	d0 0a		bne $a8d6			bne 	_MDLANoInitialise
.a8cc	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a8ce	8d a9 08	sta $08a9			sta 	0+AppendPointer
.a8d1	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a8d3	8d aa 08	sta $08aa			sta 	1+AppendPointer
.a8d6					_MDLANoInitialise:
.a8d6	18		clc				clc
.a8d7	ad a9 08	lda $08a9			lda 	AppendPointer 				; copy append pointer to zTemp1 adding the offset as you go
.a8da	85 38		sta $38				sta 	zTemp1
.a8dc	72 36		adc ($36)			adc 	(zTemp0)
.a8de	8d a9 08	sta $08a9			sta 	AppendPointer
.a8e1	ad aa 08	lda $08aa			lda 	AppendPointer+1
.a8e4	85 39		sta $39				sta 	zTemp1+1
.a8e6	69 00		adc #$00			adc 	#0
.a8e8	8d aa 08	sta $08aa			sta 	AppendPointer+1
.a8eb	a0 00		ldy #$00			ldy 	#0
.a8ed					_MDLACopy:
.a8ed	b1 36		lda ($36),y			lda 	(zTemp0),y 					; copy new line in
.a8ef	91 38		sta ($38),y			sta 	(zTemp1),y
.a8f1	c8		iny				iny
.a8f2	98		tya				tya
.a8f3	d2 36		cmp ($36)			cmp 	(zTemp0) 					; done whole line
.a8f5	d0 f6		bne $a8ed			bne 	_MDLACopy
.a8f7	a9 00		lda #$00			lda 	#0 							; end of program.
.a8f9	91 38		sta ($38),y			sta 	(zTemp1),y
.a8fb	60		rts				rts
.08a9					AppendPointer:
>08a9							.fill 	2

;******  Return to file: _basic.asm


;******  Processing file: ./variants/memory.flat/memory.asm

.9eda					MemoryNew:
.9eda	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.9edc	85 30		sta $30				sta 	codePtr
.9ede	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.9ee0	85 31		sta $31				sta 	codePtr+1
.9ee2	a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.9ee4	92 30		sta ($30)			sta 	(codePtr)
.9ee6	60		rts				rts
.9ee7					MemoryInline:
.9ee7	98		tya				tya 								; put address into stack,x
.9ee8	18		clc				clc
.9ee9	65 30		adc $30				adc 	codePtr
.9eeb	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.9eee	a5 31		lda $31				lda 	codePtr+1
.9ef0	69 00		adc #$00			adc 	#0
.9ef2	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9ef5	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.9ef8	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.9efb	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./variants/memory.flat/search.asm

.9efc					MemorySearch:
.9efc	85 36		sta $36				sta 	zTemp0 						; save line number zTemp0
.9efe	86 37		stx $37				stx 	zTemp0+1
.9f00	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.9f02	85 30		sta $30				sta 	codePtr
.9f04	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.9f06	85 31		sta $31				sta 	codePtr+1
.9f08					_MTAXLoop:
.9f08	b2 30		lda ($30)			lda 	(codePtr)
.9f0a	18		clc				clc
.9f0b	f0 21		beq $9f2e			beq 	_MTAXExit 					; reached end, exit with CC.
.9f0d	a0 01		ldy #$01			ldy 	#1 							; calculate current line# - requested line#
.9f0f	b1 30		lda ($30),y			lda 	(codePtr),y
.9f11	38		sec				sec
.9f12	e5 36		sbc $36				sbc 	zTemp0
.9f14	85 38		sta $38				sta 	zTemp1 						; save interim to set Z
.9f16	c8		iny				iny 								; do the MSB
.9f17	b1 30		lda ($30),y			lda 	(codePtr),y
.9f19	e5 37		sbc $37				sbc 	zTemp0+1
.9f1b	05 38		ora $38				ora 	zTemp1
.9f1d	f0 0f		beq $9f2e			beq 	_MTAXExit	 				; found
.9f1f	b0 0d		bcs $9f2e			bcs 	_MTAXExit 					; current < required exit
.9f21	18		clc				clc
.9f22	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.9f24	65 30		adc $30				adc 	codePtr
.9f26	85 30		sta $30				sta 	codePtr
.9f28	90 02		bcc $9f2c			bcc 	_CREExit
.9f2a	e6 31		inc $31				inc 	codePtr+1
.9f2c					_CREExit:
.9f2c	80 da		bra $9f08			bra 	_MTAXLoop
.9f2e					_MTAXExit:
.9f2e	60		rts				rts

;******  Return to file: _basic.asm


;******  End of listing
