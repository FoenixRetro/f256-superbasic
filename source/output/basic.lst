
; 64tass Turbo Assembler Macro V1.56.2625 listing file
; 64tass -b -Wall -Wno-portable -c -L output/basic.lst -l output/basic.lbl -Wall -q -o basic.rom _basic.asm
; Mon Sep 19 20:00:17 2022

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: _basic.asm


;******  Processing file: ./aa_system/01common.inc

=$30					ZeroPageMandatory = $30
=$600					ZeroPagePreference = $600
=$700					MemoryStorage = $700
=$2000					BasicStart = $2000
=$8010					CodeStart = $8010
=$1000					VariableSpace = $1000
=$2000					EndVariableSpace = $2000
=8					MathStackSize = 8
=512					BasicStackSize = 512

;******  Return to file: _basic.asm


;******  Processing file: ./aa_system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./aa_system/04data.inc

.0030					codePtr:
>0030							.fill 	4
.0034					basicStack:
>0034							.fill 	2
.0036					zTemp0:
>0036							.fill 	2
.0038					zTemp1:
>0038							.fill 	2
.003a					zTemp2:
>003a							.fill 	2
=$80					NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20					NSBIsReference = $20 						; bit 5 : is a reference
=$10					NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18					NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03					NSBRefMask = $03 							; bits 0,1 : Bytes of reference, -1 (e.g. 00 = 1 byte, 11 = 4 bytes)
.0600					NSStatus:
>0600							.fill 	MathStackSize
.0608					NSMantissa0:
>0608							.fill 	MathStackSize 				; (this is my integer mantissa system)
.0610					NSMantissa1:
>0610							.fill 	MathStackSize
.0618					NSMantissa2:
>0618							.fill 	MathStackSize
.0620					NSMantissa3:
>0620							.fill 	MathStackSize
.0628					NSExponent:
>0628							.fill 	MathStackSize
.0700					identStart:
>0700							.fill 	1
.0701					identTypeStart:
>0701							.fill 	1
.0702					identTypeEnd:
>0702							.fill 	1
.0703					identHash:
>0703							.fill 	1
.0704					identTypeByte:
>0704							.fill 	1	 						; (see tokenising.pdf)
.0705					tokenOffset:
>0705							.fill 	1
.0706					tokenLineNumber:
>0706							.fill 	2
.0708					tokenBuffer:
>0708							.fill 	253
.0805					lineBuffer:
>0805							.fill 	256

;******  Return to file: _basic.asm


;******  Processing file: ./generated/kwdconst.inc

=$83					KWD_FOR                              = $83; $83 FOR
=$84					KWD_IF                               = $84; $84 IF
=$85					KWD_PROC                             = $85; $85 PROC
=$86					KWD_REPEAT                           = $86; $86 REPEAT
=$87					KWD_WHILE                            = $87; $87 WHILE
=$88					KWD_ENDIF                            = $88; $88 ENDIF
=$89					KWD_ENDPROC                          = $89; $89 ENDPROC
=$8a					KWD_NEXT                             = $8a; $8a NEXT
=$8b					KWD_UNTIL                            = $8b; $8b UNTIL
=$8c					KWD_WEND                             = $8c; $8c WEND
=$8d					KWD_ABSLPAREN                        = $8d; $8d ABS(
=$8e					KWD_ALLOCLPAREN                      = $8e; $8e ALLOC(
=$8f					KWD_ASCLPAREN                        = $8f; $8f ASC(
=$90					KWD_CHRDOLLARLPAREN                  = $90; $90 CHR$(
=$91					KWD_DECLPAREN                        = $91; $91 DEC(
=$92					KWD_GETDATEDOLLARLPAREN              = $92; $92 GETDATE$(
=$93					KWD_GETTIMEDOLLARLPAREN              = $93; $93 GETTIME$(
=$94					KWD_HEXDOLLARLPAREN                  = $94; $94 HEX$(
=$95					KWD_INTLPAREN                        = $95; $95 INT(
=$96					KWD_ISVALLPAREN                      = $96; $96 ISVAL(
=$97					KWD_LEFTDOLLARLPAREN                 = $97; $97 LEFT$(
=$98					KWD_LENLPAREN                        = $98; $98 LEN(
=$99					KWD_MIDDOLLARLPAREN                  = $99; $99 MID$(
=$9a					KWD_NOT                              = $9a; $9a NOT
=$9b					KWD_PAGE                             = $9b; $9b PAGE
=$9c					KWD_RIGHTDOLLARLPAREN                = $9c; $9c RIGHT$(
=$9d					KWD_RNDLPAREN                        = $9d; $9d RND(
=$9e					KWD_SGNLPAREN                        = $9e; $9e SGN(
=$9f					KWD_SPCLPAREN                        = $9f; $9f SPC(
=$a0					KWD_STRDOLLARLPAREN                  = $a0; $a0 STR$(
=$a1					KWD_VALLPAREN                        = $a1; $a1 VAL(
=$a2					KWD_CLS                              = $a2; $a2 CLS
=$a3					KWD_DATA                             = $a3; $a3 DATA
=$a4					KWD_DIM                              = $a4; $a4 DIM
=$a5					KWD_GOSUB                            = $a5; $a5 GOSUB
=$a6					KWD_GOTO                             = $a6; $a6 GOTO
=$a7					KWD_LET                              = $a7; $a7 LET
=$a8					KWD_PRINT                            = $a8; $a8 PRINT
=$a9					KWD_READ                             = $a9; $a9 READ
=$aa					KWD_REM                              = $aa; $aa REM
=$ab					KWD_RETURN                           = $ab; $ab RETURN
=$ac					KWD_THEN                             = $ac; $ac THEN
=$ad					KWD_TO                               = $ad; $ad TO
=$83					KWD_ASSERT                           = $83; $83 ASSERT
=$84					KWD_CLEAR                            = $84; $84 CLEAR
=$85					KWD_END                              = $85; $85 END
=$86					KWD_LIST                             = $86; $86 LIST
=$87					KWD_NEW                              = $87; $87 NEW
=$88					KWD_RESTORE                          = $88; $88 RESTORE
=$89					KWD_RUN                              = $89; $89 RUN
=$8a					KWD_STOP                             = $8a; $8a STOP

;******  Return to file: _basic.asm


;******  Processing file: ./memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./aa_system/00start.asm

.8010	a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.8012	9a		txs				txs
.8013	20 24 80	jsr $8024			jsr 	NewCommand 					; erase current program
.8016	4c 6c 80	jmp $806c			jmp 	BackloadProgram
.8019					WarmStart:
>8019	db						.byte 	$DB 						; causes a break in the emulator
.801a	80 fd		bra $8019			bra 	WarmStart
.801c					ErrorHandler:
>801c	db						.byte 	$DB 						; causes a break in the emulator
.801d	4c 1c 80	jmp $801c			jmp 	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./commands/clear.asm

.8020					ClearCommand:
.8020	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./commands/end.asm

.8021					EndCommand:
.8021	4c 19 80	jmp $8019			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./commands/new.asm

.8024					NewCommand:
.8024	20 2e 80	jsr $802e			jsr 	MemoryNew
.8027	9c 00 10	stz $1000			stz 	VariableSpace 				; erase all variables.
.802a	20 20 80	jsr $8020			jsr 	ClearCommand 				; clear everything.
.802d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./memory.flat/memory.asm

.802e					MemoryNew:
.802e	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.8030	85 30		sta $30				sta 	codePtr
.8032	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.8034	85 31		sta $31				sta 	codePtr+1
.8036	a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.8038	92 30		sta ($30)			sta 	(codePtr)
.803a	60		rts				rts
.803b					MemoryAppend:
.803b	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.803d	85 30		sta $30				sta 	codePtr
.803f	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.8041	85 31		sta $31				sta 	codePtr+1
.8043					_MAFindEnd:
.8043	b2 30		lda ($30)			lda 	(codePtr)
.8045	f0 0d		beq $8054			beq 	_MAFoundEnd
.8047	18		clc				clc
.8048	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.804a	65 30		adc $30				adc 	codePtr
.804c	85 30		sta $30				sta 	codePtr
.804e	90 02		bcc $8052			bcc 	_CREExit
.8050	e6 31		inc $31				inc 	codePtr+1
.8052					_CREExit:
.8052	80 ef		bra $8043			bra 	_MAFindEnd
.8054					_MAFoundEnd:
.8054	ac 05 07	ldy $0705			ldy 	tokenOffset 				; bytes to copy
.8057	c0 04		cpy #$04			cpy 	#4 							; blank line
.8059	f0 0e		beq $8069			beq 	_MANoLine
.805b	a9 00		lda #$00			lda 	#0 							; end of program
.805d	91 30		sta ($30),y			sta 	(codePtr),y
.805f					_MACopy:
.805f	88		dey				dey
.8060	b9 05 07	lda $0705,y			lda 	tokenOffset,y
.8063	91 30		sta ($30),y			sta 	(codePtr),y
.8065	c0 00		cpy #$00			cpy 	#0
.8067	d0 f6		bne $805f			bne 	_MACopy
.8069					_MANoLine:
.8069	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./memory.flat/variable.asm

.806a					VariableOpen:
.806a	60		rts				rts
.806b					VariableClose:
.806b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./tokeniser/backload.asm

.806c					BackloadProgram:
.806c	a2 ff		ldx #$ff			ldx 	#$FF
.806e	ad fa ff	lda $fffa			lda 	$FFFA 						; read first byte
.8071	30 1e		bmi $8091			bmi 	_BPExit
.8073					_BPCopy:
.8073	e8		inx				inx  								; copy byte in
.8074	9d 05 08	sta $0805,x			sta 	lineBuffer,x
.8077	9e 06 08	stz $0806,x			stz 	lineBuffer+1,x
.807a	ad fa ff	lda $fffa			lda 	$FFFA 						; read next byte
.807d	30 0a		bmi $8089			bmi 	_BPEndLine 					; -ve = EOL
.807f	c9 09		cmp #$09			cmp 	#9 							; handle TAB
.8081	d0 02		bne $8085			bne 	_BPNotTab
.8083	a9 20		lda #$20			lda 	#' '
.8085					_BPNotTab:
.8085	c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.8087	b0 ea		bcs $8073			bcs 	_BPCopy
.8089					_BPEndLine:
.8089	20 50 82	jsr $8250			jsr 	TokeniseLine 				; tokenise the line.
.808c	20 3b 80	jsr $803b			jsr 	MemoryAppend 				; append to current program
.808f	80 db		bra $806c			bra 	BackloadProgram
.8091					_BPExit:
.8091	4c 19 80	jmp $8019			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./tokeniser/searchtokens.asm

.8094					TokeniseSearchTable:
.8094	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token.
.8096	85 36		sta $36				sta 	zTemp0
.8098	a0 00		ldy #$00			ldy 	#0
.809a	a9 80		lda #$80			lda 	#$80 						; token #
.809c	85 38		sta $38				sta 	zTemp1
.809e					_TSTLoop:
.809e	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.80a0	30 49		bmi $80eb			bmi 	_TSTFail 					; -ve = end of table
.80a2	f0 2e		beq $80d2			beq 	_TSTNext 					; zero, check next it's a dummy
.80a4	c8		iny				iny 								; get the hash
.80a5	b1 36		lda ($36),y			lda 	(zTemp0),y
.80a7	88		dey				dey
.80a8	cd 03 07	cmp $0703			cmp 	identHash 					; check they match, if not go to next
.80ab	d0 25		bne $80d2			bne 	_TSTNext
.80ad	ad 02 07	lda $0702			lda 	identTypeEnd 				; length of identifier
.80b0	38		sec				sec
.80b1	ed 00 07	sbc $0700			sbc 	identStart
.80b4	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; no match, then return.
.80b6	d0 1a		bne $80d2			bne 	_TSTNext
.80b8	5a		phy				phy 								; save Y , we might fail
.80b9	c8		iny				iny 								; point to text
.80ba	c8		iny				iny
.80bb	ae 00 07	ldx $0700			ldx 	identStart 					; offset in line buffer in X
.80be					_TSTCompareName:
.80be	bd 05 08	lda $0805,x			lda 	lineBuffer,x 				; compare text.
.80c1	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.80c3	d0 0c		bne $80d1			bne 	_TSTNextPullY 				; fail, pullY and do next
.80c5	e8		inx				inx
.80c6	c8		iny				iny
.80c7	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; complete match.
.80ca	d0 f2		bne $80be			bne 	_TSTCompareName
.80cc	7a		ply				ply 								; throw Y
.80cd	a5 38		lda $38				lda 	zTemp1 						; get token #
.80cf	38		sec				sec 								; return with CS = passed.
.80d0	60		rts				rts
.80d1					_TSTNextPullY:
.80d1	7a		ply				ply 								; restore current, fall through.
.80d2					_TSTNext:
.80d2	e6 38		inc $38				inc 	zTemp1 						; token counter
.80d4	98		tya				tya
.80d5	18		clc				clc
.80d6	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.80d8	1a		inc a				inc 	a 							; +1
.80d9	1a		inc a				inc 	a 							; +2
.80da	a8		tay				tay
.80db	10 c1		bpl $809e			bpl 	_TSTLoop 					; if Y < $80 loop back
.80dd	98		tya				tya 								; add Y to zTemp0 and reset Y
.80de	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.80e0	18		clc				clc  								; but have tables > 255 bytes
.80e1	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.80e3	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.80e5	90 b7		bcc $809e			bcc 	_TSTLoop
.80e7	e6 37		inc $37				inc 	zTemp0+1
.80e9	80 b3		bra $809e			bra 	_TSTLoop
.80eb					_TSTFail:
.80eb	18		clc				clc
.80ec	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./tokeniser/tokenise.asm


;******  Processing file: ./tokeniser/../generated/kwdtext.dat

.80ed					KeywordSet0:
>80ed	00 65					.text	0,$65,""               ; $80 !0:EOF
>80ef	00 58					.text	0,$58,""               ; $81 !1:SH1
>80f1	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>80f3	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $83 FOR
>80f8	02 8f 49 46				.text	2,$8f,"IF"             ; $84 IF
>80fc	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $85 PROC
>8102	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $86 REPEAT
>810a	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $87 WHILE
>8111	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $88 ENDIF
>8118	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $89 ENDPROC
>8120	43
>8121	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $8a NEXT
>8127	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $8b UNTIL
>812e	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $8c WEND
>8134	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $8d ABS(
>813a	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $8e ALLOC(
>8142	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $8f ASC(
>8148	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $90 CHR$(
>814f	04 f4 44 45 43 28			.text	4,$f4,"DEC("           ; $91 DEC(
>8155	09 4a 47 45 54 44 41 54			.text	9,$4a,"GETDATE$("      ; $92 GETDATE$(
>815d	45 24 28
>8160	09 5b 47 45 54 54 49 4d			.text	9,$5b,"GETTIME$("      ; $93 GETTIME$(
>8168	45 24 28
>816b	05 31 48 45 58 24 28			.text	5,$31,"HEX$("          ; $94 HEX$(
>8172	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $95 INT(
>8178	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $96 ISVAL(
>8180	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $97 LEFT$(
>8188	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $98 LEN(
>818e	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $99 MID$(
>8195	03 f1 4e 4f 54				.text	3,$f1,"NOT"            ; $9a NOT
>819a	04 1d 50 41 47 45			.text	4,$1d,"PAGE"           ; $9b PAGE
>81a0	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $9c RIGHT$(
>81a8	28
>81a9	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $9d RND(
>81af	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $9e SGN(
>81b5	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $9f SPC(
>81bb	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $a0 STR$(
>81c2	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $a1 VAL(
>81c8	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $a2 CLS
>81cd	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $a3 DATA
>81d3	03 da 44 49 4d				.text	3,$da,"DIM"            ; $a4 DIM
>81d8	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $a5 GOSUB
>81df	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $a6 GOTO
>81e5	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $a7 LET
>81ea	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $a8 PRINT
>81f1	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $a9 READ
>81f7	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $aa REM
>81fc	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $ab RETURN
>8204	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $ac THEN
>820a	02 a3 54 4f				.text	2,$a3,"TO"             ; $ad TO
>820e	ff					.text	$FF
.820f					KeywordSet1:
>820f	00 65					.text	0,$65,""               ; $80 !0:EOF
>8211	00 58					.text	0,$58,""               ; $81 !1:SH1
>8213	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>8215	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $83 ASSERT
>821d	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $84 CLEAR
>8224	03 d7 45 4e 44				.text	3,$d7,"END"            ; $85 END
>8229	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $86 LIST
>822f	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $87 NEW
>8234	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $88 RESTORE
>823c	45
>823d	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $89 RUN
>8242	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $8a STOP
>8248	ff					.text	$FF
.8249					KeywordSet2:
>8249	00 65					.text	0,$65,""               ; $80 !0:EOF
>824b	00 58					.text	0,$58,""               ; $81 !1:SH1
>824d	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>824f	ff					.text	$FF

;******  Return to file: ./tokeniser/tokenise.asm

.8250					TokeniseLine:
.8250	20 ab 83	jsr $83ab			jsr 	FixLineBufferCase 			; fix line case
.8253	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.8255	8d 05 07	sta $0705			sta 	tokenOffset
.8258	9c 06 07	stz $0706			stz 	tokenLineNumber
.825b	9c 07 07	stz $0707			stz 	tokenLineNumber+1
.825e	a2 ff		ldx #$ff			ldx 	#$FF
.8260					_TKFindFirst:
.8260	e8		inx				inx
.8261	bd 05 08	lda $0805,x			lda 	lineBuffer,x
.8264	f0 70		beq $82d6			beq 	_TKExit
.8266	c9 20		cmp #$20			cmp 	#' '
.8268	90 f6		bcc $8260			bcc 	_TKFindFirst
.826a	c9 30		cmp #$30			cmp 	#'0'
.826c	90 07		bcc $8275			bcc 	_TKNoLineNumber
.826e	c9 3a		cmp #$3a			cmp 	#'9'+1
.8270	b0 03		bcs $8275			bcs 	_TKNoLineNumber
.8272	20 d5 83	jsr $83d5			jsr 	TokeniseExtractLineNumber
.8275					_TKNoLineNumber:
.8275					_TKTokeniseLoop:
.8275	bd 05 08	lda $0805,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.8278	f0 5c		beq $82d6			beq 	_TKExit
.827a	e8		inx				inx
.827b	c9 20		cmp #$20			cmp 	#' '
.827d	f0 f6		beq $8275			beq 	_TKTokeniseLoop 			; keep looping if space found.
.827f	ca		dex				dex 								; undo last get, A contains character, X is position.
.8280	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.8282	f0 58		beq $82dc			beq 	_TKTokeniseIdentifier
.8284	c9 41		cmp #$41			cmp 	#'A'
.8286	90 04		bcc $828c			bcc 	_TKTokenisePunctuation
.8288	c9 5b		cmp #$5b			cmp 	#'Z'+1
.828a	90 50		bcc $82dc			bcc 	_TKTokeniseIdentifier
.828c					_TKTokenisePunctuation:
.828c	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.828e	f0 23		beq $82b3			beq 	_TKString
.8290	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers.
.8292	f0 24		beq $82b8			beq 	_TKCheckDouble
.8294	c9 3e		cmp #$3e			cmp 	#'>'
.8296	f0 20		beq $82b8			beq 	_TKCheckDouble
.8298					_TKStandardPunctuation:
.8298	bd 05 08	lda $0805,x			lda 	lineBuffer,x 				; get it back.
.829b	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.829d	90 0e		bcc $82ad			bcc 	_TKNoShift
.829f	48		pha				pha 								; save
.82a0	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.82a2	85 36		sta $36				sta 	zTemp0
.82a4	68		pla				pla
.82a5	29 20		and #$20			and 	#32 						; bit 5
.82a7	4a		lsr a				lsr 	a 							; shift into bit 3
.82a8	4a		lsr a				lsr 	a
.82a9	05 36		ora $36				ora 	zTemp0
.82ab	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.82ad					_TKNoShift:
.82ad	20 1a 84	jsr $841a			jsr 	TokeniseWriteByte 			; write the punctuation character
.82b0	e8		inx				inx 								; consume the character
.82b1	80 c2		bra $8275			bra 	_TKTokeniseLoop 			; and loop round again.
.82b3					_TKString:
.82b3	20 5e 83	jsr $835e			jsr 	TokeniseString
.82b6	80 bd		bra $8275			bra 	_TKTokeniseLoop
.82b8					_TKCheckDouble:
.82b8	bd 06 08	lda $0806,x			lda 	lineBuffer+1,x 				; get next character
.82bb	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.82bd	90 d9		bcc $8298			bcc 	_TKStandardPunctuation
.82bf	c9 3f		cmp #$3f			cmp 	#'>'+1
.82c1	b0 d5		bcs $8298			bcs 	_TKStandardPunctuation
.82c3	bd 05 08	lda $0805,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.82c6	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.82c8	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.82c9	7d 06 08	adc $0806,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.82cc	38		sec				sec
.82cd	e9 3c		sbc #$3c			sbc 	#'<'
.82cf	20 1a 84	jsr $841a			jsr 	TokeniseWriteByte 			; this is in the range 0-7
.82d2	e8		inx				inx 								; consume both
.82d3	e8		inx				inx
.82d4	80 9f		bra $8275			bra 	_TKTokeniseLoop
.82d6	a9 80		lda #$80	_TKExit:lda 	#$80 						; write end of line byte
.82d8	20 1a 84	jsr $841a			jsr 	TokeniseWriteByte
.82db	60		rts				rts
.82dc					_TKTokeniseIdentifier:
.82dc	8e 00 07	stx $0700			stx 	identStart 					; save start
.82df	9c 04 07	stz $0704			stz 	identTypeByte 				; zero the type byte
.82e2					_TKCheckLoop:
.82e2	e8		inx				inx 								; look at next, we know first is identifier.
.82e3	bd 05 08	lda $0805,x			lda  	lineBuffer,x
.82e6	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.82e8	f0 f8		beq $82e2			beq 	_TKCheckLoop
.82ea	c9 30		cmp #$30			cmp	 	#"0"
.82ec	90 0c		bcc $82fa			bcc 	_TKEndIdentifier
.82ee	c9 3a		cmp #$3a			cmp 	#"9"+1
.82f0	90 f0		bcc $82e2			bcc 	_TKCheckLoop
.82f2	c9 41		cmp #$41			cmp	 	#"A"
.82f4	90 04		bcc $82fa			bcc 	_TKEndIdentifier
.82f6	c9 5b		cmp #$5b			cmp 	#"Z"+1
.82f8	90 e8		bcc $82e2			bcc 	_TKCheckLoop
.82fa					_TKEndIdentifier:
.82fa	8e 01 07	stx $0701			stx 	identTypeStart 				; save start of type text (if any !)
.82fd	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.82ff	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.8301	f0 06		beq $8309			beq 	_TKHasTypeCharacter
.8303	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.8305	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.8307	d0 07		bne $8310			bne 	_TKNoTypeCharacter
.8309					_TKHasTypeCharacter:
.8309	8c 04 07	sty $0704			sty 	identTypeByte 				; has # or $, save the type
.830c	e8		inx				inx 								; read next
.830d	bd 05 08	lda $0805,x			lda 	lineBuffer,x
.8310					_TKNoTypeCharacter:
.8310	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.8312	d0 09		bne $831d			bne 	_TKNoArray
.8314	e8		inx				inx 								; skip the (
.8315	ad 04 07	lda $0704			lda 	identTypeByte 				; set bit 2 (e.g. array)
.8318	09 04		ora #$04			ora 	#$04
.831a	8d 04 07	sta $0704			sta 	identTypeByte
.831d					_TKNoArray:
.831d	8e 02 07	stx $0702			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.8320	20 96 83	jsr $8396			jsr 	TokeniseCalculateHash 		; calculate the has for those tokens
.8323	a0 80		ldy #$80			ldy 	#(KeywordSet0) >> 8
.8325	a9 ed		lda #$ed			lda 	#(KeywordSet0) & $FF
.8327	20 94 80	jsr $8094			jsr 	TokeniseSearchTable
.832a	a2 00		ldx #$00			ldx 	#0
.832c	b0 1f		bcs $834d			bcs 	_TKFoundToken
.832e	a0 82		ldy #$82			ldy 	#(KeywordSet1) >> 8
.8330	a9 0f		lda #$0f			lda 	#(KeywordSet1) & $FF
.8332	20 94 80	jsr $8094			jsr 	TokeniseSearchTable
.8335	a2 81		ldx #$81			ldx 	#$81
.8337	b0 14		bcs $834d			bcs 	_TKFoundToken
.8339	a0 82		ldy #$82			ldy 	#(KeywordSet1) >> 8
.833b	a9 0f		lda #$0f			lda 	#(KeywordSet1) & $FF
.833d	20 94 80	jsr $8094			jsr 	TokeniseSearchTable
.8340	a2 82		ldx #$82			ldx 	#$82
.8342	b0 09		bcs $834d			bcs 	_TKFoundToken
.8344	20 26 84	jsr $8426			jsr 	CheckCreateVariableRecord 	; failed all, it's a variable, create record if does not exist.
.8347	ae 02 07	ldx $0702			ldx 	identTypeEnd 				; X points to following byte
.834a	4c 75 82	jmp $8275			jmp 	_TKTokeniseLoop 			; and go round again.
.834d					_TKFoundToken:
.834d	48		pha				pha 								; save token
.834e	8a		txa				txa 								; shift in X, is there one ?
.834f	f0 03		beq $8354			beq 	_TKNoTShift
.8351	20 1a 84	jsr $841a			jsr 	TokeniseWriteByte 			; if so, write it out
.8354					_TKNoTShift:
.8354	68		pla				pla 								; restore and write token
.8355	20 1a 84	jsr $841a			jsr 	TokeniseWriteByte
.8358	ae 02 07	ldx $0702			ldx 	identTypeEnd 				; X points to following byte
.835b	4c 75 82	jmp $8275			jmp 	_TKTokeniseLoop 			; and go round again.
.835e					TokeniseString:
.835e	e8		inx				inx									; start of quoted string.
.835f	da		phx				phx 								; push start of string on top
.8360	ca		dex				dex
.8361					_TSFindEnd:
.8361	e8		inx				inx
.8362	bd 05 08	lda $0805,x			lda 	lineBuffer,x 				; next character
.8365	f0 04		beq $836b			beq 	_TSEndOfString
.8367	c9 22		cmp #$22			cmp 	#'"'
.8369	d0 f6		bne $8361			bne 	_TSFindEnd
.836b					_TSEndOfString:
.836b	7a		ply				ply  								; so now Y is first character, X is character after end.
.836c	48		pha				pha 								; save what we terminated with, so we know whether to skip.
.836d	86 36		stx $36				stx 	zTemp0 						; save the end point.
.836f	a9 ff		lda #$ff			lda 	#$FF 						; string token.
.8371	20 1a 84	jsr $841a			jsr 	TokeniseWriteByte
.8374	98		tya				tya 								; work out the string length
.8375	49 ff		eor #$ff			eor 	#$FF
.8377	38		sec				sec
.8378	65 36		adc $36				adc 	zTemp0
.837a	20 1a 84	jsr $841a			jsr 	TokeniseWriteByte 			; write that length.
.837d					_TSOutputString:
.837d	c4 36		cpy $36				cpy 	zTemp0 						; reached the end.
.837f	f0 09		beq $838a			beq 	_TSEndString
.8381	b9 05 08	lda $0805,y			lda 	lineBuffer,y 				; output one
.8384	c8		iny				iny
.8385	20 1a 84	jsr $841a			jsr 	TokeniseWriteByte
.8388	80 f3		bra $837d			bra 	_TSOutputString
.838a					_TSEndString:
.838a	a9 00		lda #$00			lda 	#0		 					; output EOS
.838c	20 1a 84	jsr $841a			jsr 	TokeniseWriteByte
.838f	68		pla				pla 								; did we end in " ?
.8390	c9 22		cmp #$22			cmp 	#'"'
.8392	d0 01		bne $8395			bne 	_TSNoEndQuote
.8394	e8		inx				inx
.8395					_TSNoEndQuote:
.8395	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./tokeniser/utility.asm

.8396					TokeniseCalculateHash:
.8396	da		phx				phx
.8397	ae 00 07	ldx $0700			ldx 	identStart 					; needs to be same as in tokens.py - simple sum
.839a	a9 00		lda #$00			lda 	#0
.839c					_TCHLoop:
.839c	18		clc				clc
.839d	7d 05 08	adc $0805,x			adc 	lineBuffer,x
.83a0	e8		inx				inx
.83a1	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.83a4	d0 f6		bne $839c			bne 	_TCHLoop
.83a6	8d 03 07	sta $0703			sta 	identHash 					; save the hash
.83a9	fa		plx				plx
.83aa	60		rts				rts
.83ab					FixLineBufferCase:
.83ab	a2 00		ldx #$00			ldx 	#0
.83ad					_FLBCLoop:
.83ad	bd 05 08	lda $0805,x			lda 	lineBuffer,x 				; get next character
.83b0	f0 22		beq $83d4			beq 	_FLBCExit 					; end of string.
.83b2	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.83b4	f0 11		beq $83c7			beq 	_FLBCInQuotes
.83b6	e8		inx				inx
.83b7	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.83b9	90 f2		bcc $83ad			bcc 	_FLBCLoop
.83bb	c9 7b		cmp #$7b			cmp 	#'z'+1
.83bd	b0 ee		bcs $83ad			bcs 	_FLBCLoop
.83bf	38		sec				sec 								; make U/C
.83c0	e9 20		sbc #$20			sbc 	#32
.83c2	9d 04 08	sta $0804,x			sta	 	lineBuffer-1,x 				; write back
.83c5	80 e6		bra $83ad			bra 	_FLBCLoop
.83c7					_FLBCInQuotes:
.83c7	e8		inx				inx 								; advance
.83c8	bd 05 08	lda $0805,x			lda 	lineBuffer,x 				; get next
.83cb	f0 07		beq $83d4			beq 	_FLBCExit 					; exit on EOS
.83cd	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.83cf	d0 f6		bne $83c7			bne 	_FLBCInQuotes
.83d1	e8		inx				inx 								; skip over it
.83d2	80 d9		bra $83ad			bra 	_FLBCLoop
.83d4					_FLBCExit:
.83d4	60		rts				rts
.83d5					TokeniseExtractLineNumber:
.83d5	ad 07 07	lda $0707			lda 	tokenLineNumber+1 			; push current value on stack
.83d8	48		pha				pha
.83d9	ad 06 07	lda $0706			lda 	tokenLineNumber
.83dc	48		pha				pha
.83dd	20 13 84	jsr $8413			jsr 	_TELNTimes2 				; line # x 4
.83e0	20 13 84	jsr $8413			jsr 	_TELNTimes2 				; line # x 2
.83e3	18		clc				clc 								; add stacked value
.83e4	68		pla				pla
.83e5	6d 06 07	adc $0706			adc 	tokenLineNumber
.83e8	8d 06 07	sta $0706			sta 	tokenLineNumber
.83eb	68		pla				pla
.83ec	6d 07 07	adc $0707			adc 	tokenLineNumber+1
.83ef	8d 07 07	sta $0707			sta 	tokenLineNumber+1 			; line # x 5
.83f2	20 13 84	jsr $8413			jsr 	_TELNTimes2 				; line # x 10
.83f5	bd 05 08	lda $0805,x			lda 	lineBuffer,x 				; get and consume character
.83f8	e8		inx				inx
.83f9	29 0f		and #$0f			and 	#15 						; add to line #
.83fb	18		clc				clc
.83fc	6d 06 07	adc $0706			adc 	tokenLineNumber
.83ff	8d 06 07	sta $0706			sta 	tokenLineNumber
.8402	90 03		bcc $8407			bcc 	_TLENNoCarry
.8404	ee 07 07	inc $0707			inc 	tokenLineNumber+1
.8407					_TLENNoCarry:
.8407	bd 05 08	lda $0805,x			lda 	lineBuffer,x 				; more digits ?
.840a	c9 30		cmp #$30			cmp 	#'0'
.840c	90 04		bcc $8412			bcc 	_TLENExit
.840e	c9 3a		cmp #$3a			cmp 	#'9'+1
.8410	90 c3		bcc $83d5			bcc 	TokeniseExtractLineNumber
.8412					_TLENExit:
.8412	60		rts				rts
.8413					_TELNTimes2:
.8413	0e 06 07	asl $0706			asl 	tokenLineNumber
.8416	2e 07 07	rol $0707			rol 	tokenLineNumber+1
.8419	60		rts				rts
.841a					TokeniseWriteByte:
.841a	da		phx				phx
.841b	ae 05 07	ldx $0705			ldx 	tokenOffset 				; next slot to write to
.841e	9d 05 07	sta $0705,x			sta 	tokenOffset,x 				; write byte out
.8421	ee 05 07	inc $0705			inc 	tokenOffset 				; advance slot.
.8424	fa		plx				plx
.8425	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./tokeniser/variablerecord.asm

.8426					CheckCreateVariableRecord:
.8426	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.8428	85 36		sta $36				sta 	0+zTemp0
.842a	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.842c	85 37		sta $37				sta 	1+zTemp0
.842e	20 6a 80	jsr $806a			jsr 	VariableOpen 				; make variable space available
.8431					_CCVSearch:
.8431	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.8433	f0 2c		beq $8461			beq 	_CCVFail
.8435	a0 01		ldy #$01			ldy 	#1 							; read the hash
.8437	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.8439	cd 03 07	cmp $0703			cmp 	identHash
.843c	d0 16		bne $8454			bne 	_CCVNext
.843e	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.8440	ae 00 07	ldx $0700			ldx 	identStart
.8443					_CCVCompare:
.8443	bd 05 08	lda $0805,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.8446	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.8448	e8		inx				inx 								; advance pointers
.8449	c8		iny				iny
.844a	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.844b	d0 07		bne $8454			bne 	_CCVNext  					; didn't match go to next.
.844d	90 f4		bcc $8443			bcc 	_CCVCompare 				; not finished yet.
.844f	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; matched whole thing ?
.8452	f0 41		beq $8495			beq 	_CCVFound 					; yes, we were successful
.8454					_CCVNext:
.8454	18		clc				clc
.8455	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.8457	65 36		adc $36				adc 	zTemp0
.8459	85 36		sta $36				sta 	zTemp0
.845b	90 d4		bcc $8431			bcc 	_CCVSearch
.845d	e6 37		inc $37				inc 	zTemp0+1
.845f	80 d0		bra $8431			bra 	_CCVSearch
.8461					_CCVFail:
.8461	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.8463	ad 03 07	lda $0703			lda 	identHash
.8466	91 36		sta ($36),y			sta 	(zTemp0),y
.8468	c8		iny				iny 								; offset 2 is the type byte
.8469	ad 04 07	lda $0704			lda 	identTypeByte
.846c	91 36		sta ($36),y			sta 	(zTemp0),y
.846e	c8		iny				iny
.846f					_CCVData:
.846f	a9 00		lda #$00			lda 	#0 							; erase data 3-7
.8471	91 36		sta ($36),y			sta 	(zTemp0),y
.8473	c8		iny				iny
.8474	c0 08		cpy #$08			cpy 	#8
.8476	90 f7		bcc $846f			bcc 	_CCVData
.8478	ae 00 07	ldx $0700			ldx 	identStart 					; copy name into 8 on.
.847b					_CCVCopyName:
.847b	bd 05 08	lda $0805,x			lda 	lineBuffer,x
.847e	91 36		sta ($36),y			sta 	(zTemp0),y
.8480	e8		inx				inx
.8481	c8		iny				iny
.8482	ec 02 07	cpx $0702			cpx 	identTypeEnd
.8485	d0 f4		bne $847b			bne 	_CCVCopyName
.8487	98		tya				tya 								; patch offset
.8488	92 36		sta ($36)			sta 	(zTemp0)
.848a	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.848c	91 36		sta ($36),y			sta 	(zTemp0),y
.848e	88		dey				dey
.848f	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.8491	09 80		ora #$80			ora 	#$80
.8493	91 36		sta ($36),y			sta 	(zTemp0),y
.8495					_CCVFound:
.8495	20 6b 80	jsr $806b			jsr 	VariableClose 				; map out variables, perhaps.
.8498	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.849a	38		sec				sec
.849b	e9 10		sbc #$10			sbc 	#(VariableSpace >> 8) 		; offset from the start
.849d	09 40		ora #$40			ora 	#$40 						; make it a writeable token
.849f	20 1a 84	jsr $841a			jsr 	TokeniseWriteByte
.84a2	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.84a4	20 1a 84	jsr $841a			jsr 	TokeniseWriteByte
.84a7	60		rts				rts

;******  Return to file: _basic.asm


;******  End of listing
