
; 64tass Turbo Assembler Macro V1.56.2625 listing file
; 64tass -q -b -Wall -Wno-portable -c -L output/basic.lst -l output/basic.lbl -Wall -o basic.rom _basic.asm
; Sun Oct  2 12:22:48 2022

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: _basic.asm


;******  Processing file: ./common/aa_system/01common.inc

=$30					ZeroPageMandatory = $30
=$600					ZeroPagePreference = $600
=$700					MemoryStorage = $700
=$2000					BasicStart = $2000
=$8000					CodeStart = $8000
=$1000					VariableSpace = $1000
=$2000					EndVariableSpace = $2000
=8					MathStackSize = 8
=512					BasicStackSize = 512
=3584					BasicStackBase = $1000-BasicStackSize
=80					MaxLineSize = 80

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa_system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa_system/04data.inc

.0030					codePtr:
>0030							.fill 	4
.0034					basicStack:
>0034							.fill 	2
.0036					zTemp0:
>0036							.fill 	2
.0038					zTemp1:
>0038							.fill 	2
.003a					zTemp2:
>003a							.fill 	2
.003c					zsTemp:
>003c							.fill 	2
=$80					NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20					NSBIsReference = $20 						; bit 5 : is a reference
=$10					NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18					NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03					NSBRefMask = $03 							; bits 0,1 : Bytes of reference, -1 (e.g. 00 = 1 byte, 11 = 4 bytes)
=$04					NSBIsArray = $04
=$00					NSTInteger = $00 							; base types for bits 3..4
=$08					NSTFloat = $08
=$10					NSTString = $10
=$18					NSTProcedure = $18
.0600					NSStatus:
>0600							.fill 	MathStackSize
.0608					NSMantissa0:
>0608							.fill 	MathStackSize 				; (this is my integer mantissa system)
.0610					NSMantissa1:
>0610							.fill 	MathStackSize
.0618					NSMantissa2:
>0618							.fill 	MathStackSize
.0620					NSMantissa3:
>0620							.fill 	MathStackSize
.0628					NSExponent:
>0628							.fill 	MathStackSize
.0700					identStart:
>0700							.fill 	1
.0701					identTypeStart:
>0701							.fill 	1
.0702					identTypeEnd:
>0702							.fill 	1
.0703					identHash:
>0703							.fill 	1
.0704					identTypeByte:
>0704							.fill 	1	 						; (see tokenising.pdf)
.0705					encodeState:
>0705							.fill 	1
.0706					digitTemp:
>0706							.fill 	1
.0707					decimalCount:
>0707							.fill 	1
.0708					randomSeed:
>0708							.fill 	4
.070c					lowMemPtr:
>070c							.fill 	2
.070e					stringMemory:
>070e							.fill 	2
.0710					stringInitialised:
>0710							.fill 	1
.0711					stringTempPointer:
>0711							.fill 	2
.0713					decimalPlaces:
>0713							.fill 	1
.0714					dbOffset:
>0714							.fill 	1
.0715					tokenOffset:
>0715							.fill 	1
.0716					tokenLineNumber:
>0716							.fill 	2
.0718					tokenBuffer:
>0718							.fill 	253
.0815					lineBuffer:
>0815							.fill 	MaxLineSize+1
.0866					numberBuffer:
>0866							.fill 	34
.0888					decimalBuffer:
>0888							.fill 	16

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/handlers.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.inc

=1					ERRID_BREAK = 1
=2					ERRID_SYNTAX = 2
=3					ERRID_DIVZERO = 3
=4					ERRID_RANGE = 4
=5					ERRID_TYPE = 5
=6					ERRID_MEMORY = 6
=7					ERRID_ARGUMENT = 7
=8					ERRID_STOP = 8
=9					ERRID_STRING = 9
=10					ERRID_ASSERT = 10
=11					ERRID_DATA = 11
=12					ERRID_NOTDONE = 12
=13					ERRID_LINE = 13
=14					ERRID_GOSUB = 14
=15					ERRID_REPEAT = 15
=16					ERRID_WHILE = 16
=17					ERRID_FOR = 17
=18					ERRID_STACK = 18
=19					ERRID_STRUCT = 19
=20					ERRID_PROC = 20

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst.inc

=$00					KWD_LESSLESS                         = $00; $00 <<
=$01					KWD_LESSEQUAL                        = $01; $01 <=
=$02					KWD_LESSGREATER                      = $02; $02 <>
=$03					KWD_PLINGPLING3                      = $03; $03 !!3
=$04					KWD_GREATERLESS                      = $04; $04 ><
=$05					KWD_GREATEREQUAL                     = $05; $05 >=
=$06					KWD_GREATERGREATER                   = $06; $06 >>
=$07					KWD_PLINGPLING7                      = $07; $07 !!7
=$08					KWD_PLINGPLING8                      = $08; $08 !!8
=$09					KWD_PLINGPLING9                      = $09; $09 !!9
=$0a					KWD_PLINGPLING10                     = $0a; $0a !!10
=$0b					KWD_PLINGPLING11                     = $0b; $0b !!11
=$0c					KWD_PLINGPLING12                     = $0c; $0c !!12
=$0d					KWD_PLINGPLING13                     = $0d; $0d !!13
=$0e					KWD_PLINGPLING14                     = $0e; $0e !!14
=$0f					KWD_PLINGPLING15                     = $0f; $0f !!15
=$10					KWD_AT                               = $10; $10 @
=$11					KWD_PLINGPLING17                     = $11; $11 !!17
=$12					KWD_PLINGPLING18                     = $12; $12 !!18
=$13					KWD_LSQPAREN                         = $13; $13 [
=$14					KWD_BACKSLASH                        = $14; $14 \
=$15					KWD_RSQPAREN                         = $15; $15 ]
=$16					KWD_HAT                              = $16; $16 ^
=$17					KWD_UNDERSCORE                       = $17; $17 _
=$18					KWD_BQUOTE                           = $18; $18 `
=$19					KWD_PLINGPLING25                     = $19; $19 !!25
=$1a					KWD_PLINGPLING26                     = $1a; $1a !!26
=$1b					KWD_LCURLY                           = $1b; $1b {
=$1c					KWD_BAR                              = $1c; $1c |
=$1d					KWD_RCURLY                           = $1d; $1d }
=$1e					KWD_TILDE                            = $1e; $1e ~
=$21					KWD_PLING                            = $21; $21 !
=$22					KWD_DQUOTE                           = $22; $22 "
=$23					KWD_HASH                             = $23; $23 #
=$24					KWD_DOLLAR                           = $24; $24 $
=$25					KWD_PERCENT                          = $25; $25 %
=$26					KWD_AMPERSAND                        = $26; $26 &
=$27					KWD_QUOTE                            = $27; $27 '
=$28					KWD_LPAREN                           = $28; $28 (
=$29					KWD_RPAREN                           = $29; $29 )
=$2a					KWD_STAR                             = $2a; $2a *
=$2b					KWD_PLUS                             = $2b; $2b +
=$2c					KWD_COMMA                            = $2c; $2c ,
=$2d					KWD_MINUS                            = $2d; $2d -
=$2e					KWD_PERIOD                           = $2e; $2e .
=$2f					KWD_SLASH                            = $2f; $2f /
=$30					KWD_0                                = $30; $30 0
=$31					KWD_1                                = $31; $31 1
=$32					KWD_2                                = $32; $32 2
=$33					KWD_3                                = $33; $33 3
=$34					KWD_4                                = $34; $34 4
=$35					KWD_5                                = $35; $35 5
=$36					KWD_6                                = $36; $36 6
=$37					KWD_7                                = $37; $37 7
=$38					KWD_8                                = $38; $38 8
=$39					KWD_9                                = $39; $39 9
=$3a					KWD_COLON                            = $3a; $3a :
=$3b					KWD_SEMICOLON                        = $3b; $3b ;
=$3c					KWD_LESS                             = $3c; $3c <
=$3d					KWD_EQUAL                            = $3d; $3d =
=$3e					KWD_GREATER                          = $3e; $3e >
=$3f					KWD_QMARK                            = $3f; $3f ?
=$83					KWD_ABSLPAREN                        = $83; $83 ABS(
=$84					KWD_ALLOCLPAREN                      = $84; $84 ALLOC(
=$85					KWD_ASCLPAREN                        = $85; $85 ASC(
=$86					KWD_CHRDOLLARLPAREN                  = $86; $86 CHR$(
=$87					KWD_FALSE                            = $87; $87 FALSE
=$88					KWD_FRACLPAREN                       = $88; $88 FRAC(
=$89					KWD_INTLPAREN                        = $89; $89 INT(
=$8a					KWD_ISVALLPAREN                      = $8a; $8a ISVAL(
=$8b					KWD_LEFTDOLLARLPAREN                 = $8b; $8b LEFT$(
=$8c					KWD_LENLPAREN                        = $8c; $8c LEN(
=$8d					KWD_MIDDOLLARLPAREN                  = $8d; $8d MID$(
=$8e					KWD_NOTLPAREN                        = $8e; $8e NOT(
=$8f					KWD_RIGHTDOLLARLPAREN                = $8f; $8f RIGHT$(
=$90					KWD_RNDLPAREN                        = $90; $90 RND(
=$91					KWD_SGNLPAREN                        = $91; $91 SGN(
=$92					KWD_SPCLPAREN                        = $92; $92 SPC(
=$93					KWD_STRDOLLARLPAREN                  = $93; $93 STR$(
=$94					KWD_TRUE                             = $94; $94 TRUE
=$95					KWD_VALLPAREN                        = $95; $95 VAL(
=$96					KWD_FOR                              = $96; $96 FOR
=$97					KWD_IF                               = $97; $97 IF
=$98					KWD_PROC                             = $98; $98 PROC
=$99					KWD_REPEAT                           = $99; $99 REPEAT
=$9a					KWD_WHILE                            = $9a; $9a WHILE
=$9b					KWD_ENDIF                            = $9b; $9b ENDIF
=$9c					KWD_ENDPROC                          = $9c; $9c ENDPROC
=$9d					KWD_NEXT                             = $9d; $9d NEXT
=$9e					KWD_THEN                             = $9e; $9e THEN
=$9f					KWD_UNTIL                            = $9f; $9f UNTIL
=$a0					KWD_WEND                             = $a0; $a0 WEND
=$a1					KWD_CALL                             = $a1; $a1 CALL
=$a2					KWD_CLS                              = $a2; $a2 CLS
=$a3					KWD_DATA                             = $a3; $a3 DATA
=$a4					KWD_DIM                              = $a4; $a4 DIM
=$a5					KWD_DOWNTO                           = $a5; $a5 DOWNTO
=$a6					KWD_ELSE                             = $a6; $a6 ELSE
=$a7					KWD_GOSUB                            = $a7; $a7 GOSUB
=$a8					KWD_GOTO                             = $a8; $a8 GOTO
=$a9					KWD_LET                              = $a9; $a9 LET
=$aa					KWD_PRINT                            = $aa; $aa PRINT
=$ab					KWD_READ                             = $ab; $ab READ
=$ac					KWD_REM                              = $ac; $ac REM
=$ad					KWD_RETURN                           = $ad; $ad RETURN
=$ae					KWD_TO                               = $ae; $ae TO

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst0.inc

=$80					KWC_EOL = $80
=$ff					KWC_STRING = $FF
=$fe					KWC_HEXCONST = $FE
=$96					KWC_FIRST_STRUCTURE = $96
=$9b					KWC_FIRST_STRUCTURE_DEC = $9b
=$a0					KWC_LAST_STRUCTURE = $a0
=$83					KWC_FIRST_UNARY = $83
=$95					KWC_LAST_UNARY = $95

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/stack.inc

=$e0					STK_GOSUB = $E0
=$d0					STK_FOR = $D0
=$c0					STK_REPEAT = $C0
=$b0					STK_PROC = $B0
=$a0					STK_WHILE = $A0
=$90					STK_LOCAL = $90

;******  Return to file: _basic.asm


;******  Processing file: ./variants/memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa_system/00start.asm

.8000	a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.8002	9a		txs				txs
.8003	20 1f 83	jsr $831f			jsr 	NewCommand 					; erase current program
.8006	20 6c 90	jsr $906c			jsr 	BackloadProgram
.8009	4c e0 83	jmp $83e0			jmp 	CommandRun
.800c					WarmStart:
.800c	a9 57		lda #$57			lda 	#"W"
.800e	20 77 9c	jsr $9c77			jsr 	EXTPrintCharacter
.8011	80 fe		bra $8011	halt:	bra 	halt
>8013							.align 2

;******  Processing file: ./common/aa_system/../generated/vectors.dat

.8014					VectorSetPunc:
>8014	cb 86					.word	ShiftLeft                        ; $00 <<
>8016	c5 85					.word	BinaryCompareLessEqual           ; $01 <=
>8018	bb 85					.word	BinaryCompareNotEqual            ; $02 <>
>801a	45 9a					.word	SyntaxError                      ; $03 !!3
>801c	45 9a					.word	SyntaxError                      ; $04 ><
>801e	cf 85					.word	BinaryCompareGreaterEqual        ; $05 >=
>8020	ce 86					.word	ShiftRight                       ; $06 >>
>8022	45 9a					.word	SyntaxError                      ; $07 !!7
>8024	45 9a					.word	SyntaxError                      ; $08 !!8
>8026	45 9a					.word	SyntaxError                      ; $09 !!9
>8028	45 9a					.word	SyntaxError                      ; $0a !!10
>802a	45 9a					.word	SyntaxError                      ; $0b !!11
>802c	45 9a					.word	SyntaxError                      ; $0c !!12
>802e	45 9a					.word	SyntaxError                      ; $0d !!13
>8030	45 9a					.word	SyntaxError                      ; $0e !!14
>8032	45 9a					.word	SyntaxError                      ; $0f !!15
>8034	45 9a					.word	SyntaxError                      ; $10 @
>8036	45 9a					.word	SyntaxError                      ; $11 !!17
>8038	45 9a					.word	SyntaxError                      ; $12 !!18
>803a	45 9a					.word	SyntaxError                      ; $13 [
>803c	8e 95					.word	IntegerDivide                    ; $14 \
>803e	45 9a					.word	SyntaxError                      ; $15 ]
>8040	54 88					.word	EorInteger                       ; $16 ^
>8042	45 9a					.word	SyntaxError                      ; $17 _
>8044	45 9a					.word	SyntaxError                      ; $18 `
>8046	45 9a					.word	SyntaxError                      ; $19 !!25
>8048	45 9a					.word	SyntaxError                      ; $1a !!26
>804a	45 9a					.word	SyntaxError                      ; $1b {
>804c	0e 88					.word	OraInteger                       ; $1c |
>804e	45 9a					.word	SyntaxError                      ; $1d }
>8050	45 9a					.word	SyntaxError                      ; $1e ~
>8052	45 9a					.word	SyntaxError                      ; $1f [7m<7F>[m
>8054	45 9a					.word	SyntaxError                      ; $20
>8056	9a 88					.word	WordIndirect                     ; $21 !
>8058	45 9a					.word	SyntaxError                      ; $22 "
>805a	45 9a					.word	SyntaxError                      ; $23 #
>805c	45 9a					.word	SyntaxError                      ; $24 $
>805e	db 95					.word	IntegerModulus                   ; $25 %
>8060	c8 87					.word	AndInteger                       ; $26 &
>8062	45 9a					.word	SyntaxError                      ; $27 '
>8064	45 9a					.word	SyntaxError                      ; $28 (
>8066	45 9a					.word	SyntaxError                      ; $29 )
>8068	50 96					.word	MulInteger                       ; $2a *
>806a	62 87					.word	AddInteger                       ; $2b +
>806c	45 9a					.word	SyntaxError                      ; $2c ,
>806e	9d 87					.word	SubInteger                       ; $2d -
>8070	45 9a					.word	SyntaxError                      ; $2e .
>8072	e7 97					.word	FDivideCommand                   ; $2f /
>8074	45 9a					.word	SyntaxError                      ; $30 0
>8076	45 9a					.word	SyntaxError                      ; $31 1
>8078	45 9a					.word	SyntaxError                      ; $32 2
>807a	45 9a					.word	SyntaxError                      ; $33 3
>807c	45 9a					.word	SyntaxError                      ; $34 4
>807e	45 9a					.word	SyntaxError                      ; $35 5
>8080	45 9a					.word	SyntaxError                      ; $36 6
>8082	45 9a					.word	SyntaxError                      ; $37 7
>8084	45 9a					.word	SyntaxError                      ; $38 8
>8086	45 9a					.word	SyntaxError                      ; $39 9
>8088	45 9a					.word	SyntaxError                      ; $3a :
>808a	45 9a					.word	SyntaxError                      ; $3b ;
>808c	a7 85					.word	BinaryCompareLess                ; $3c <
>808e	9d 85					.word	BinaryCompareEqual               ; $3d =
>8090	b1 85					.word	BinaryCompareGreater             ; $3e >
>8092	c1 88					.word	ByteIndirect                     ; $3f ?
.8094					VectorSet0:
>8094	35 84					.word	EOLCommand                       ; $80 !0:EOF
>8096	42 84					.word	Shift1Command                    ; $81 !1:SH1
>8098	45 9a					.word	SyntaxError                      ; $82 !2:SH2
>809a	2d 99					.word	AbsUnary                         ; $83 ABS(
>809c	04 8d					.word	AllocUnary                       ; $84 ALLOC(
>809e	3d 99					.word	AscUnary                         ; $85 ASC(
>80a0	a1 8d					.word	ChrUnary                         ; $86 CHR$(
>80a2	99 85					.word	UnaryFalse                       ; $87 FALSE
>80a4	4a 99					.word	FracUnary                        ; $88 FRAC(
>80a6	60 99					.word	IntUnary                         ; $89 INT(
>80a8	b6 99					.word	IsValUnary                       ; $8a ISVAL(
>80aa	7b 8e					.word	Unary_Left                       ; $8b LEFT$(
>80ac	72 99					.word	LenUnary                         ; $8c LEN(
>80ae	a5 8e					.word	Unary_Mid                        ; $8d MID$(
>80b0	3e 8d					.word	Unary_Not                        ; $8e NOT(
>80b2	8b 8e					.word	Unary_Right                      ; $8f RIGHT$(
>80b4	54 8d					.word	Unary_Rnd                        ; $90 RND(
>80b6	8c 99					.word	SgnUnary                         ; $91 SGN(
>80b8	b3 8d					.word	SpcUnary                         ; $92 SPC(
>80ba	ce 8d					.word	Unary_Str                        ; $93 STR$(
>80bc	8d 85					.word	UnaryTrue                        ; $94 TRUE
>80be	ac 99					.word	ValUnary                         ; $95 VAL(
>80c0	78 81					.word	ForCommand                       ; $96 FOR
>80c2	bc 82					.word	IfCommand                        ; $97 IF
>80c4	4a 84					.word	Unused1                          ; $98 PROC
>80c6	be 83					.word	Command_REPEAT                   ; $99 REPEAT
>80c8	f9 84					.word	Command_WHILE                    ; $9a WHILE
>80ca	e5 82					.word	EndIf                            ; $9b ENDIF
>80cc	67 95					.word	Command_ENDPROC                  ; $9c ENDPROC
>80ce	32 82					.word	NextCommand                      ; $9d NEXT
>80d0	45 9a					.word	SyntaxError                      ; $9e THEN
>80d2	c7 83					.word	Command_UNTIL                    ; $9f UNTIL
>80d4	1a 85					.word	Command_WEND                     ; $a0 WEND
>80d6	1e 81					.word	CallCommand                      ; $a1 CALL
>80d8	45 9a					.word	SyntaxError                      ; $a2 CLS
>80da	45 9a					.word	SyntaxError                      ; $a3 DATA
>80dc	45 9a					.word	SyntaxError                      ; $a4 DIM
>80de	4a 84					.word	Unused3                          ; $a5 DOWNTO
>80e0	de 82					.word	ElseCode                         ; $a6 ELSE
>80e2	8b 82					.word	Command_GOSUB                    ; $a7 GOSUB
>80e4	a9 82					.word	GotoCommand                      ; $a8 GOTO
>80e6	e6 82					.word	LetCommand                       ; $a9 LET
>80e8	29 83					.word	Command_Print                    ; $aa PRINT
>80ea	45 9a					.word	SyntaxError                      ; $ab READ
>80ec	b1 83					.word	RemCommand                       ; $ac REM
>80ee	9b 82					.word	Command_RETURN                   ; $ad RETURN
>80f0	4a 84					.word	Unused2                          ; $ae TO
.80f2					VectorSet1:
>80f2	45 9a					.word	SyntaxError                      ; $80 !0:EOF
>80f4	45 9a					.word	SyntaxError                      ; $81 !1:SH1
>80f6	45 9a					.word	SyntaxError                      ; $82 !2:SH2
>80f8	0e 81					.word	AssertCommand                    ; $83 ASSERT
>80fa	2c 81					.word	ClearCommand                     ; $84 CLEAR
>80fc	75 81					.word	EndCommand                       ; $85 END
>80fe	45 9a					.word	SyntaxError                      ; $86 LIST
>8100	1f 83					.word	NewCommand                       ; $87 NEW
>8102	45 9a					.word	SyntaxError                      ; $88 RESTORE
>8104	e0 83					.word	CommandRUN                       ; $89 RUN
>8106	45 9a					.word	SyntaxError                      ; $8a STOP
.8108					VectorSet2:
>8108	45 9a					.word	SyntaxError                      ; $80 !0:EOF
>810a	45 9a					.word	SyntaxError                      ; $81 !1:SH1
>810c	45 9a					.word	SyntaxError                      ; $82 !2:SH2

;******  Return to file: ./common/aa_system/00start.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assert.asm

.810e					AssertCommand:
.810e	a2 00		ldx #$00			ldx 	#0
.8110	20 46 8f	jsr $8f46			jsr 	EvaluateInteger 			; the assert test
.8113	20 ff 8f	jsr $8fff			jsr 	NSMIsZero 					; exit if result is non zero.
.8116	d0 05		bne $811d			bne 	_ACExit
.8118	a9 0a		lda #$0a		lda	#10
.811a	4c 28 85	jmp $8528		jmp	ErrorHandler
.811d					_ACExit:
.811d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/call.asm

.811e					CallCommand:
.811e	a2 00		ldx #$00			ldx 	#0
.8120	20 5b 8f	jsr $8f5b			jsr 	Evaluate16BitInteger
.8123	ad 10 06	lda $0610			lda 	NSMantissa1
.8126	8d 09 06	sta $0609			sta 	NSMantissa0+1
.8129	6c 08 06	jmp ($0608)			jmp 	(NSMantissa0)

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/clear.asm

.812c					ClearCommand:
.812c	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.812e	85 36		sta $36				sta 	0+zTemp0
.8130	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.8132	85 37		sta $37				sta 	1+zTemp0
.8134					_ClearZeroLoop:
.8134	b2 36		lda ($36)			lda 	(zTemp0) 					; end of variables
.8136	f0 24		beq $815c			beq 	_ClearZeroEnd
.8138	a0 03		ldy #$03			ldy 	#3 							; erase the variables
.813a	a9 00		lda #$00			lda 	#0
.813c					_ClearOneVariable:
.813c	91 36		sta ($36),y			sta 	(zTemp0),y
.813e	c8		iny				iny
.813f	c0 08		cpy #$08			cpy 	#8
.8141	d0 f9		bne $813c			bne 	_ClearOneVariable
.8143	a0 02		ldy #$02			ldy 	#2 							; has it been marked procedure
.8145	b1 36		lda ($36),y			lda 	(zTemp0),y
.8147	c9 18		cmp #$18			cmp 	#NSTProcedure
.8149	d0 04		bne $814f			bne 	_ClearNotProcedure
.814b	a9 04		lda #$04			lda 	#NSTInteger+NSBIsArray 		; set it back to an integer array
.814d	91 36		sta ($36),y			sta 	(zTemp0),y
.814f					_ClearNotProcedure:
.814f	18		clc				clc 								; go to the next variable
.8150	b2 36		lda ($36)			lda 	(zTemp0)
.8152	65 36		adc $36				adc 	zTemp0
.8154	85 36		sta $36				sta 	zTemp0
.8156	90 dc		bcc $8134			bcc 	_ClearZeroLoop
.8158	e6 37		inc $37				inc 	zTemp0+1
.815a	80 d8		bra $8134			bra 	_ClearZeroLoop
.815c					_ClearZeroEnd:
.815c	18		clc				clc
.815d	a5 36		lda $36				lda 	zTemp0
.815f	69 01		adc #$01			adc 	#1
.8161	8d 0c 07	sta $070c			sta 	lowMemPtr
.8164	a5 37		lda $37				lda 	zTemp0+1
.8166	69 00		adc #$00			adc 	#0
.8168	8d 0d 07	sta $070d			sta 	lowMemPtr+1
.816b	20 5f 90	jsr $905f			jsr 	StackReset
.816e	20 ed 9b	jsr $9bed			jsr 	StringSystemInitialise
.8171	20 4d 84	jsr $844d			jsr 	ProcedureScan
.8174	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/end.asm

.8175					EndCommand:
.8175	4c 0c 80	jmp $800c			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/for.asm

.8178					ForCommand:
.8178	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; allocate 18 bytes on the return stack.
.817a	20 0c 90	jsr $900c			jsr 	StackOpen
.817d	a2 00		ldx #$00			ldx 	#0
.817f	20 fb 8b	jsr $8bfb			jsr 	EvaluateTerm
.8182	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8185	c9 20		cmp #$20			cmp 	#NSBIsReference+NSTInteger 	; do we have an integer 4 byte reference.
.8187	d0 49		bne $81d2			bne		_FCError
.8189	a9 3d		lda #$3d			lda 	#KWD_EQUAL 					; =
.818b	20 85 95	jsr $9585			jsr 	CheckNextA
.818e	e8		inx				inx
.818f	20 46 8f	jsr $8f46			jsr 	EvaluateInteger 			; <from> in +1
.8192	b1 30		lda ($30),y			lda 	(codePtr),y
.8194	c8		iny				iny 								; consume it
.8195	48		pha				pha 								; save on stack for later
.8196	c9 a5		cmp #$a5			cmp 	#KWD_DOWNTO
.8198	f0 04		beq $819e			beq 	_FCNoSyntax
.819a	c9 ae		cmp #$ae			cmp 	#KWD_TO
.819c	d0 37		bne $81d5			bne 	_FCSyntaxError
.819e					_FCNoSyntax:
.819e	e8		inx				inx
.819f	20 46 8f	jsr $8f46			jsr 	EvaluateInteger
.81a2	20 3e 90	jsr $903e			jsr 	STKSaveCodePosition 		; save loop back position
.81a5	68		pla				pla 								; restore DOWNTO or TO
.81a6	5a		phy				phy 								; save Y on the stack
.81a7	49 a5		eor #$a5			eor 	#KWD_DOWNTO 				; 0 if DOWNTO, #0 if TO
.81a9	f0 02		beq $81ad			beq 	_FCNotDownTo
.81ab	a9 02		lda #$02			lda 	#2
.81ad					_FCNotDownTo:
.81ad	3a		dec a				dec 	a 							; 255 if DOWNTO, 1 if TO
.81ae	a0 10		ldy #$10			ldy 	#16
.81b0	91 34		sta ($34),y			sta 	(basicStack),y 				; copy that out to the Basic Stack.
.81b2	a0 06		ldy #$06			ldy 	#6
.81b4	ad 08 06	lda $0608			lda 	NSMantissa0
.81b7	91 34		sta ($34),y			sta 	(basicStack),y
.81b9	ad 10 06	lda $0610			lda 	NSMantissa1
.81bc	c8		iny				iny
.81bd	91 34		sta ($34),y			sta 	(basicStack),y
.81bf	a0 08		ldy #$08			ldy 	#8 							; set initial index value
.81c1	a2 01		ldx #$01			ldx 	#1
.81c3	20 d8 81	jsr $81d8			jsr 	FCIntegerToStack
.81c6	a0 0c		ldy #$0c			ldy 	#12 						; set the terminal value
.81c8	a2 02		ldx #$02			ldx 	#2
.81ca	20 d8 81	jsr $81d8			jsr 	FCIntegerToStack
.81cd	20 f8 81	jsr $81f8			jsr 	CopyIndexToReference
.81d0	7a		ply				ply 								; restore position
.81d1	60		rts				rts
.81d2					_FCError:
.81d2	4c 4f 9a	jmp $9a4f			jmp 	TypeError
.81d5					_FCSyntaxError:
.81d5	4c 45 9a	jmp $9a45			jmp 	SyntaxError
.81d8					FCIntegerToStack:
.81d8	3c 00 06	bit $0600,x			bit 	NSStatus,x 					; is the value negative
.81db	10 03		bpl $81e0			bpl	 	_FCNotNegative
.81dd	20 84 8f	jsr $8f84			jsr 	NSMNegateMantissa 			; if so 2's complement the mantissa
.81e0					_FCNotNegative:
.81e0	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy out to the basic stack
.81e3	91 34		sta ($34),y			sta 	(basicStack),y
.81e5	c8		iny				iny
.81e6	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.81e9	91 34		sta ($34),y			sta 	(basicStack),y
.81eb	c8		iny				iny
.81ec	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.81ef	91 34		sta ($34),y			sta 	(basicStack),y
.81f1	c8		iny				iny
.81f2	bd 20 06	lda $0620,x			lda 	NSMantissa3,x
.81f5	91 34		sta ($34),y			sta 	(basicStack),y
.81f7	60		rts				rts
.81f8					CopyIndexToReference:
.81f8	5a		phy				phy
.81f9	a0 06		ldy #$06			ldy 	#6 							; copy address-8 to write to zTemp0
.81fb	38		sec				sec 								; (because we copy from offset 8)
.81fc	b1 34		lda ($34),y			lda 	(basicStack),y
.81fe	e9 08		sbc #$08			sbc 	#8
.8200	85 36		sta $36				sta 	zTemp0
.8202	c8		iny				iny
.8203	b1 34		lda ($34),y			lda 	(basicStack),y
.8205	e9 00		sbc #$00			sbc 	#0
.8207	85 37		sta $37				sta 	zTemp0+1
.8209	a2 04		ldx #$04			ldx 	#4 							; this is the copy counter/
.820b	a0 0b		ldy #$0b			ldy 	#8+3 		 				; the MSB of the mantissa
.820d	b1 34		lda ($34),y			lda 	(basicStack),y
.820f	0a		asl a				asl 	a 							; into carry
.8210	a0 08		ldy #$08			ldy 	#8 							; where to copy from.
.8212	90 14		bcc $8228			bcc 	_CITRNormal
.8214	38		sec				sec
.8215					_CITRNegative:
.8215	a9 00		lda #$00			lda 	#0
.8217	f1 34		sbc ($34),y			sbc 	(basicStack),y
.8219	91 36		sta ($36),y			sta 	(zTemp0),y
.821b	c8		iny				iny
.821c	ca		dex				dex
.821d	d0 f6		bne $8215			bne 	_CITRNegative
.821f	88		dey				dey 								; look at MSB of mantissa
.8220	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set the MSB as negative packed.
.8222	09 80		ora #$80			ora 	#$80
.8224	91 36		sta ($36),y			sta 	(zTemp0),y
.8226	7a		ply				ply
.8227	60		rts				rts
.8228					_CITRNormal:
.8228	b1 34		lda ($34),y			lda 	(basicStack),y 				; copy without negation.
.822a	91 36		sta ($36),y			sta 	(zTemp0),y
.822c	c8		iny				iny
.822d	ca		dex				dex
.822e	d0 f8		bne $8228			bne 	_CITRNormal
.8230	7a		ply				ply 								; and exit.
.8231	60		rts				rts
.8232					NextCommand:
.8232	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; check FOR is TOS
.8234	a2 11		ldx #$11			ldx 	#ERRID_FOR 					; this error
.8236	20 33 90	jsr $9033			jsr 	StackCheckFrame
.8239	5a		phy				phy
.823a	a0 10		ldy #$10			ldy 	#16 						; get the step count
.823c	b1 34		lda ($34),y			lda 	(basicStack),y
.823e	85 36		sta $36				sta 	zTemp0 						; this is the sign extend
.8240	30 02		bmi $8244			bmi 	_NCStepNeg
.8242	64 36		stz $36				stz 	zTemp0 						; which is 0 or 255
.8244					_NCStepNeg:
.8244	a0 08		ldy #$08			ldy 	#8 							; offset to bump
.8246	a2 04		ldx #$04			ldx 	#4 							; count to bump
.8248	18		clc				clc
.8249					_NCBump:
.8249	71 34		adc ($34),y			adc 	(basicStack),y 				; add it
.824b	91 34		sta ($34),y			sta 	(basicStack),y
.824d	a5 36		lda $36				lda 	zTemp0 						; get sign extend for next time.
.824f	c8		iny				iny 								; next byte
.8250	ca		dex				dex 								; do four times
.8251	d0 f6		bne $8249			bne 	_NCBump
.8253	20 f8 81	jsr $81f8			jsr		CopyIndexToReference		; copy it to the reference variable.
.8256	a0 10		ldy #$10			ldy 	#16 						; get step count again
.8258	b1 34		lda ($34),y			lda 	(basicStack),y
.825a	0a		asl a				asl 	a 							; sign bit to carry
.825b	a9 0c		lda #$0c			lda 	#12 						; offset of LHS = terminal offset
.825d	85 38		sta $38				sta 	zTemp1
.825f	90 02		bcc $8263			bcc 	_NCCompRev 					; use if step is +ve
.8261	a9 08		lda #$08			lda 	#8 							; now the LHS = index value
.8263					_NCCompRev:
.8263	85 38		sta $38				sta 	zTemp1 						; so zTemp0 is the index for LHS
.8265	49 04		eor #$04			eor 	#(8^12) 					; and zTemp0+1 is the index for RHS
.8267	85 39		sta $39				sta 	zTemp1+1
.8269	a2 04		ldx #$04			ldx 	#4 							; bytes to compare
.826b	38		sec				sec
.826c					_NCCompare:
.826c	a4 38		ldy $38				ldy 	zTemp1 						; do compare using the two indices
.826e	b1 34		lda ($34),y			lda 	(basicStack),y
.8270	a4 39		ldy $39				ldy 	zTemp1+1
.8272	f1 34		sbc ($34),y			sbc 	(basicStack),y
.8274	e6 38		inc $38				inc 	zTemp1 						; bump the indices (inc,dex do not change C or V)
.8276	e6 39		inc $39				inc 	zTemp1+1
.8278	ca		dex				dex 								; do it 4 times.
.8279	d0 f1		bne $826c			bne 	_NCCompare
.827b	50 02		bvc $827f			bvc 	_NCNoOverflow 				; convert to signed comparison
.827d	49 80		eor #$80			eor 	#$80
.827f					_NCNoOverflow:
.827f	7a		ply				ply 								; restore Y position
.8280	0a		asl a				asl 	a 							; is bit 7 set.
.8281	90 04		bcc $8287			bcc 	_NCLoopback 				; if no , >= so loop back
.8283	20 25 90	jsr $9025			jsr 	StackClose 					; exit the loop
.8286	60		rts				rts
.8287					_NCLoopBack:
.8287	20 4f 90	jsr $904f			jsr 	STKLoadCodePosition 		; loop back
.828a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/gosub.asm

.828b					Command_GOSUB:
.828b	a2 00		ldx #$00			ldx 	#0
.828d	20 5b 8f	jsr $8f5b			jsr 	Evaluate16BitInteger 		; line number in Stack.0
.8290	a9 e3		lda #$e3			lda 	#STK_GOSUB+3
.8292	20 0c 90	jsr $900c			jsr 	StackOpen 					; create frame
.8295	20 3e 90	jsr $903e			jsr 	STKSaveCodePosition 		; save current position
.8298	4c ae 82	jmp $82ae			jmp 	GotoStackX
.829b					Command_RETURN:
.829b	a9 e0		lda #$e0			lda 	#STK_GOSUB 					; check TOS is this
.829d	a2 0e		ldx #$0e			ldx 	#ERRID_GOSUB 				; this error
.829f	20 33 90	jsr $9033			jsr 	StackCheckFrame
.82a2	20 4f 90	jsr $904f			jsr 	STKLoadCodePosition 		; restore code position
.82a5	20 25 90	jsr $9025			jsr 	StackClose
.82a8	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/goto.asm

.82a9					GotoCommand:
.82a9	a2 00		ldx #$00			ldx 	#0 							; GOTO where
.82ab	20 5b 8f	jsr $8f5b			jsr 	Evaluate16BitInteger
.82ae					GotoStackX:
.82ae	bd 10 06	lda $0610,x			lda  	NSMantissa1,x 				; put line # in XA. I'll keep this even though
.82b1	48		pha				pha 								; it is slightly inefficient, just in cases.
.82b2	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.82b5	fa		plx				plx
.82b6	20 35 95	jsr $9535			jsr 	MemoryTransferAX 			; transfer to line number AX.
.82b9	4c eb 83	jmp $83eb			jmp 	RunNewLine 					; and go straight to new line code.

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/if.asm

.82bc					IfCommand:
.82bc	a2 00		ldx #$00			ldx 	#0 							; If what.
.82be	20 23 8f	jsr $8f23			jsr 	EvaluateNumber
.82c1	b1 30		lda ($30),y			lda 	(codePtr),y
.82c3	c9 9e		cmp #$9e			cmp 	#KWD_THEN  					; could be THEN <stuff> or GOTO
.82c5	d0 0a		bne $82d1			bne 	_IFStructured
.82c7	c8		iny				iny 								; consume THEN
.82c8	20 ff 8f	jsr $8fff			jsr 	NSMIsZero 					; is it zero
.82cb	f0 01		beq $82ce			beq 	_IfFail 					; if fail, go to next line
.82cd	60		rts				rts 								; if THEN just continue
.82ce					_IfFail:
.82ce	4c 35 84	jmp $8435			jmp 	EOLCommand
.82d1					_IfStructured:
.82d1	20 ff 8f	jsr $8fff			jsr 	NSMIsZero 					; is it zero
.82d4	d0 07		bne $82dd			bne 	_IfExit 					; if not, then continue normally.
.82d6	a9 a6		lda #$a6			lda 	#KWD_ELSE 					; look for else/endif
.82d8	a2 9b		ldx #$9b			ldx 	#KWD_ENDIF
.82da	20 9f 84	jsr $849f			jsr 	ScanForward 				; and run from there/
.82dd					_IfExit:
.82dd	60		rts				rts
.82de					ElseCode:
.82de	a9 9b		lda #$9b			lda 	#KWD_ENDIF 					; else is only run after the if clause succeeds
.82e0	aa		tax				tax 								; so just go to the structure exit
.82e1	20 9f 84	jsr $849f			jsr 	ScanForward
.82e4	60		rts				rts
.82e5					EndIf:
.82e5	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/let.asm

.82e6					LetCommand:
.82e6	a2 00		ldx #$00			ldx 	#0
.82e8	ad 12 89	lda $8912			lda 	PrecedenceLevel+"*"			; precedence > this
.82eb	20 2c 89	jsr $892c			jsr 	EvaluateExpressionAtPrecedence
.82ee	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; is it a reference to an array
.82f1	c9 38		cmp #$38			cmp		#NSTProcedure+NSBIsReference
.82f3	f0 0e		beq $8303			beq 	_LetGoProc 					; it's a procedure call.
.82f5	a9 3d		lda #$3d			lda 	#"=" 						; check =
.82f7	20 85 95	jsr $9585			jsr 	CheckNextA
.82fa	e8		inx				inx 								; RHS
.82fb	20 1a 8f	jsr $8f1a			jsr 	EvaluateValue
.82fe	ca		dex				dex
.82ff	20 06 83	jsr $8306			jsr 	AssignVariable
.8302	60		rts				rts
.8303					_LetGoProc:
.8303	4c 80 83	jmp $8380			jmp 	CallProcedure
.8306					AssignVariable:
.8306	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check the string/number type bits match
.8309	48		pha				pha 								; save a copy
.830a	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.830d	29 10		and #$10			and 	#NSBIsString
.830f	d0 0b		bne $831c			bne 	_ASError
.8311	68		pla				pla 								; get back
.8312	29 10		and #$10			and 	#NSBIsString 				; check type
.8314	d0 03		bne $8319			bne 	_ASString
.8316	4c 67 89	jmp $8967			jmp 	AssignNumber
.8319					_ASString:
.8319	4c d5 89	jmp $89d5			jmp 	AssignString
.831c					_ASError:
.831c	4c 4f 9a	jmp $9a4f			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/new.asm

.831f					NewCommand:
.831f	20 e4 94	jsr $94e4			jsr 	MemoryNew
.8322	9c 00 10	stz $1000			stz 	VariableSpace 				; erase all variables.
.8325	20 2c 81	jsr $812c			jsr 	ClearCommand 				; clear everything.
.8328	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/print.asm

.8329					Command_Print:
.8329	18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.832a					_CPLoop:
.832a	08		php				php 								; save last action flag
.832b	b1 30		lda ($30),y			lda 	(codePtr),y
.832d	c9 80		cmp #$80			cmp  	#KWC_EOL 					; end of line or colon, exit now.
.832f	f0 46		beq $8377			beq 	_CPExit
.8331	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.8333	f0 42		beq $8377			beq 	_CPExit
.8335	68		pla				pla 								; throw last action flag
.8336	b1 30		lda ($30),y			lda 	(codePtr),y
.8338	c8		iny				iny
.8339	c9 3b		cmp #$3b			cmp 	#KWD_SEMICOLON				; is it a semicolon
.833b	f0 37		beq $8374			beq 	_CPContinueWithSameLine
.833d	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; comma
.833f	f0 2e		beq $836f			beq 	_CPTab
.8341	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; apostrophe (new line)
.8343	f0 26		beq $836b			beq 	_CPNewLine
.8345	88		dey				dey 								; undo the get.
.8346	a2 00		ldx #$00			ldx 	#0
.8348	20 1a 8f	jsr $8f1a			jsr 	EvaluateValue 				; get a value into slot 0
.834b	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; is it a number
.834e	29 10		and #$10			and 	#NSBIsString
.8350	f0 0b		beq $835d			beq 	_CPNumber
.8352	ae 10 06	ldx $0610			ldx 	NSMantissa1 				; string, print the text.
.8355	ad 08 06	lda $0608			lda 	NSMantissa0
.8358	20 7a 85	jsr $857a			jsr 	PrintStringXA
.835b	80 cc		bra $8329			bra 	Command_Print 				; loop round clearing carry so NL if end
.835d					_CPNumber:
.835d	a9 05		lda #$05			lda 	#5 							; maximum decimals
.835f	20 f0 8d	jsr $8df0			jsr 	ConvertNumberToString 		; convert to string
.8362	a2 08		ldx #$08			ldx 	#DecimalBuffer >> 8
.8364	a9 88		lda #$88			lda 	#DecimalBuffer & $FF
.8366	20 7a 85	jsr $857a			jsr 	PrintStringXA
.8369	80 be		bra $8329			bra 	Command_Print 				; loop round clearing carry so NL if end
.836b					_CPNewLine:
.836b	a9 0d		lda #$0d			lda 	#13
.836d	80 02		bra $8371			bra 	_CPPrintChar
.836f					_CPTab:
.836f	a9 09		lda #$09			lda 	#9 							; print TAB
.8371					_CPPrintChar:
.8371	20 77 9c	jsr $9c77			jsr 	EXTPrintCharacter
.8374					_CPContinueWithSameLine:
.8374	38		sec				sec 								; loop round with carry set, which
.8375	80 b3		bra $832a			bra 	_CPLoop 					; will inhibit final CR
.8377					_CPExit:
.8377	28		plp				plp 								; get last action flag
.8378	b0 05		bcs $837f			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.837a	a9 0d		lda #$0d			lda 	#13 						; print new line
.837c	20 77 9c	jsr $9c77			jsr 	EXTPrintCharacter
.837f					_CPExit2:
.837f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/procedure.asm

.8380					CallProcedure:
.8380	20 75 95	jsr $9575			jsr 	CheckRightBracket
.8383	a9 b3		lda #$b3			lda 	#STK_PROC+3 				; allocate 6 bytes on the return stack.
.8385	20 0c 90	jsr $900c			jsr 	StackOpen
.8388	20 3e 90	jsr $903e			jsr 	STKSaveCodePosition 		; save loop position
.838b	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy variable (e.g. procedure) address to zTemp0
.838e	85 36		sta $36				sta 	zTemp0 						; this is the DATA not the RECORD
.8390	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8393	85 37		sta $37				sta 	zTemp0+1
.8395	a0 01		ldy #$01			ldy 	#1 							; copy code address back.
.8397	b2 36		lda ($36)			lda 	(zTemp0)
.8399	85 30		sta $30				sta 	codePtr
.839b	b1 36		lda ($36),y			lda 	(zTemp0),y
.839d	85 31		sta $31				sta 	codePtr+1
.839f	c8		iny				iny
.83a0	b1 36		lda ($36),y			lda 	(zTemp0),y
.83a2	85 32		sta $32				sta 	codePtr+2
.83a4	c8		iny				iny
.83a5	b1 36		lda ($36),y			lda 	(zTemp0),y
.83a7	85 33		sta $33				sta 	codePtr+3
.83a9	c8		iny				iny 								; get Y offset -> Y
.83aa	b1 36		lda ($36),y			lda 	(zTemp0),y
.83ac	a8		tay				tay
.83ad	20 75 95	jsr $9575			jsr 	CheckRightBracket 			; check )
.83b0	60		rts				rts 								; and continue from here
.9567					Command_ENDPROC:
.9567	a9 b0		lda #$b0			lda 	#STK_PROC 					; check TOS is this
.9569	a2 14		ldx #$14			ldx 	#ERRID_PROC
.956b	20 33 90	jsr $9033			jsr 	StackCheckFrame
.956e	20 4f 90	jsr $904f			jsr 	STKLoadCodePosition 		; restore code position
.9571	20 25 90	jsr $9025			jsr 	StackClose
.9574	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/rem.asm

.83b1					RemCommand:
.83b1	b1 30		lda ($30),y			lda 	(codePtr),y
.83b3	c9 ff		cmp #$ff			cmp 	#KWC_STRING
.83b5	d0 06		bne $83bd			bne 	_RMExit
.83b7	c8		iny				iny
.83b8	98		tya				tya
.83b9	38		sec				sec
.83ba	71 30		adc ($30),y			adc 	(codePtr),y
.83bc	a8		tay				tay
.83bd					_RMExit:
.83bd	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/repeat.asm

.83be					Command_REPEAT:
.83be	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; allocate 6 bytes on the return stack.
.83c0	20 0c 90	jsr $900c			jsr 	StackOpen
.83c3	20 3e 90	jsr $903e			jsr 	STKSaveCodePosition 		; save loop position
.83c6	60		rts				rts
.83c7					Command_UNTIL:
.83c7	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; check REPEAT is TOS
.83c9	a2 0f		ldx #$0f			ldx 	#ERRID_REPEAT 				; this error
.83cb	20 33 90	jsr $9033			jsr 	StackCheckFrame
.83ce	a2 00		ldx #$00			ldx 	#0
.83d0	20 23 8f	jsr $8f23			jsr 	EvaluateNumber 				; work out the number
.83d3	20 ff 8f	jsr $8fff			jsr 	NSMIsZero 					; check if zero
.83d6	f0 04		beq $83dc			beq 	_CULoopBack 				; if so keep looping
.83d8	20 25 90	jsr $9025			jsr 	StackClose		 			; return
.83db	60		rts				rts
.83dc					_CULoopBack:
.83dc	20 4f 90	jsr $904f			jsr 	STKLoadCodePosition 		; loop back
.83df	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/run.asm

.83e0					CommandRUN:
.83e0	20 2c 81	jsr $812c			jsr 	ClearCommand 				; clear variable/stacks/etc.
.83e3	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.83e5	85 30		sta $30				sta 	codePtr
.83e7	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.83e9	85 31		sta $31				sta 	codePtr+1
.83eb					RUNNewLine:
.83eb	b2 30		lda ($30)			lda 	(codePtr)
.83ed	f0 43		beq $8432			beq 	CRNoProgram         		; no then END.
.83ef	a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack
.83f1	9a		txs				txs
.83f2					RUNCodePointerLine:
.83f2	a0 02		ldy #$02			ldy 	#2 							; start of program
.83f4					_CRIncMainLoop:
.83f4	c8		iny				iny
.83f5					_CRMainLoop:
.83f5	9c 10 07	stz $0710			stz 	stringInitialised 			; clear the temporary string initialised flag.
.83f8	b1 30		lda ($30),y			lda 	(codePtr),y
.83fa	10 10		bpl $840c			bpl 	_CRNotKeyword
.83fc	c9 96		cmp #$96			cmp 	#KWC_LAST_UNARY+1 			; if after unary, legitimate command
.83fe	b0 04		bcs $8404			bcs 	_CRIsKeyword
.8400	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if unary, syntax error.
.8402	b0 28		bcs $842c			bcs		_CRSyntaxError
.8404					_CRIsKeyword:
.8404	c8		iny				iny 								; consume command
.8405	0a		asl a				asl 	a 							; double losing the MSB which is '1' as tokens are $80-$FF
.8406	aa		tax				tax 								; put in X for vector jump
.8407	20 2f 84	jsr $842f			jsr 	_CRCallVector0 				; call the vector - effectively jsr (vectortable,X)
.840a	80 e9		bra $83f5			bra 	_CRMainLoop 				; and loop round
.840c					_CRNotKeyword:
.840c	c9 3a		cmp #$3a			cmp 	#KWD_COLON 					; if a :, consume it and go round.
.840e	f0 e4		beq $83f4			beq 	_CRIncMainLoop
.8410	c9 40		cmp #$40			cmp 	#$40 						; variable/call reference
.8412	90 05		bcc $8419			bcc 	_CRNotVariable
.8414					_CRGoLet:
.8414	20 e6 82	jsr $82e6			jsr 	LetCommand
.8417	80 dc		bra $83f5			bra 	_CRMainLoop
.8419					_CRNotVariable:
.8419	c9 3f		cmp #$3f			cmp 	#KWD_QMARK
.841b	f0 f7		beq $8414			beq 	_CRGoLet
.841d	c9 21		cmp #$21			cmp 	#KWD_PLING
.841f	f0 f3		beq $8414			beq 	_CRGoLet
.8421	c9 27		cmp #$27			cmp 	#KWD_QUOTE
.8423	f0 01		beq $8426			beq 	_CRGoRem
>8425	db						.byte 	$DB 						; causes a break in the emulator
.8426					_CRGoRem:
.8426	c8		iny				iny
.8427	20 b1 83	jsr $83b1			jsr 	RemCommand
.842a	80 c9		bra $83f5			bra 	_CRMainLoop
.842c					_CRSyntaxError:
.842c	4c 45 9a	jmp $9a45			jmp 	SyntaxError
.842f					_CRCallVector0:
.842f	7c 94 80	jmp ($8094,x)			jmp 	(VectorSet0,x)
.8432					CRNoProgram:
.8432	4c 75 81	jmp $8175			jmp 	EndCommand
.8435					EOLCommand:
.8435	18		clc				clc
.8436	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8438	65 30		adc $30				adc 	codePtr
.843a	85 30		sta $30				sta 	codePtr
.843c	90 02		bcc $8440			bcc 	_CREExit
.843e	e6 31		inc $31				inc 	codePtr+1
.8440					_CREExit:
.8440	80 a9		bra $83eb			bra 	RunNewLine
.8442					Shift1Command:
.8442	b1 30		lda ($30),y			lda 	(codePtr),y
.8444	c8		iny				iny
.8445	0a		asl a				asl 	a
.8446	aa		tax				tax
.8447	7c f2 80	jmp ($80f2,x)			jmp 	(VectorSet1,x)
.844a					Unused1:
.844a					Unused2:
.844a					Unused3:
.844a	4c 45 9a	jmp $9a45			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/procscan.asm

.844d					ProcedureScan:
.844d	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.844f	85 30		sta $30				sta 	codePtr
.8451	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.8453	85 31		sta $31				sta 	codePtr+1
.8455					_PSLoop:
.8455	b2 30		lda ($30)			lda 	(codePtr)
.8457	f0 42		beq $849b			beq 	_PSExit
.8459	a0 03		ldy #$03			ldy 	#3 							; is it PROC ?
.845b	b1 30		lda ($30),y			lda 	(codePtr),y
.845d	c9 98		cmp #$98			cmp 	#KWD_PROC
.845f	d0 2d		bne $848e			bne 	_PSNext
.8461	c8		iny				iny 								; get the address of the record to zTemp0 and
.8462	b1 30		lda ($30),y			lda 	(codePtr),y
.8464	29 c0		and #$c0			and 	#$C0
.8466	c9 40		cmp #$40			cmp 	#$40
.8468	d0 32		bne $849c			bne 	_PSSyntax
.846a	b1 30		lda ($30),y			lda 	(codePtr),y
.846c	18		clc				clc
.846d	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.846f	85 37		sta $37				sta 	zTemp0+1
.8471	c8		iny				iny 								; LSB
.8472	b1 30		lda ($30),y			lda 	(codePtr),y
.8474	85 36		sta $36				sta 	zTemp0
.8476	c8		iny				iny 								; character after variable call.
.8477	98		tya				tya 								; save Y offset at +7
.8478	a0 07		ldy #$07			ldy 	#7
.847a	91 36		sta ($36),y			sta 	(zTemp0),y
.847c	a9 18		lda #$18			lda 	#NSTProcedure 				; mark it as procedure
.847e	a0 02		ldy #$02			ldy 	#2
.8480	91 36		sta ($36),y			sta 	(zTemp0),y
.8482	a2 00		ldx #$00			ldx 	#0 							; copy codePtr in
.8484					_PSCopy:
.8484	b5 30		lda $30,x			lda 	codePtr,x
.8486	c8		iny				iny
.8487	91 36		sta ($36),y			sta 	(zTemp0),y
.8489	e8		inx				inx
.848a	e0 04		cpx #$04			cpx 	#4
.848c	d0 f6		bne $8484			bne 	_PSCopy
.848e					_PSNext:
.848e	18		clc				clc
.848f	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8491	65 30		adc $30				adc 	codePtr
.8493	85 30		sta $30				sta 	codePtr
.8495	90 02		bcc $8499			bcc 	_CREExit
.8497	e6 31		inc $31				inc 	codePtr+1
.8499					_CREExit:
.8499	80 ba		bra $8455			bra 	_PSLoop
.849b					_PSExit:
.849b	60		rts				rts
.849c					_PSSyntax:
.849c	4c 45 9a	jmp $9a45			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/scanforward.asm

.849f					ScanForward:
.849f	85 36		sta $36				sta 	zTemp0 						; save XA as the two possible matches.
.84a1	86 37		stx $37				stx 	zTemp0+1
.84a3	64 38		stz $38				stz 	zTemp1 						; this is the structure count - goes up with WHILE/FOR
.84a5					_ScanLoop:
.84a5	b1 30		lda ($30),y			lda 	(codePtr),y
.84a7	c8		iny				iny
.84a8	a6 38		ldx $38				ldx 	zTemp1 						; if the count is > 0 cannot match as in substructure
.84aa	d0 09		bne $84b5			bne 	_ScanGoNext
.84ac	c5 36		cmp $36				cmp 	zTemp0 						; see if either matches
.84ae	f0 04		beq $84b4			beq 	_ScanMatch
.84b0	c5 37		cmp $37				cmp 	zTemp0+1
.84b2	d0 01		bne $84b5			bne 	_ScanGoNext
.84b4					_ScanMatch:
.84b4	60		rts				rts
.84b5					_ScanGoNext:
.84b5	c9 40		cmp #$40			cmp 	#$40 						; if 00-3F, punctuation characters, loop back
.84b7	90 ec		bcc $84a5			bcc 	_ScanLoop
.84b9	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if 40-82, skip one extra.
.84bb	90 18		bcc $84d5			bcc 	_ScanSkipOne
.84bd	c9 fc		cmp #$fc			cmp 	#$FC 						; FC-FF are data skips
.84bf	b0 2f		bcs $84f0			bcs 	_ScanSkipData
.84c1	c9 96		cmp #$96			cmp 	#KWC_FIRST_STRUCTURE 		; structure keyword ?
.84c3	90 e0		bcc $84a5			bcc 	_ScanLoop 					; if not, ordinary keywords.
.84c5	c9 a1		cmp #$a1			cmp 	#KWC_LAST_STRUCTURE+1
.84c7	b0 dc		bcs $84a5			bcs 	_ScanLoop
.84c9	c6 38		dec $38				dec 	zTemp1 						; decrement the sructure count
.84cb	c9 9b		cmp #$9b			cmp 	#KWC_FIRST_STRUCTURE_DEC 	; back if it is a dec structure (e.g. WEND/NEXT)
.84cd	b0 d6		bcs $84a5			bcs 	_ScanLoop
.84cf	e6 38		inc $38				inc 	zTemp1 						; so it's an increment structure
.84d1	e6 38		inc $38				inc 	zTemp1 						; twice to undo the dec
.84d3	80 d0		bra $84a5			bra 	_ScanLoop
.84d5					_ScanSkipOne:
.84d5	c8		iny				iny 								; consume the extra one.
.84d6	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if not EOL loop back
.84d8	d0 cb		bne $84a5			bne 	_ScanLoop
.84da	18		clc				clc
.84db	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.84dd	65 30		adc $30				adc 	codePtr
.84df	85 30		sta $30				sta 	codePtr
.84e1	90 02		bcc $84e5			bcc 	_CREExit
.84e3	e6 31		inc $31				inc 	codePtr+1
.84e5					_CREExit:
.84e5	a0 03		ldy #$03			ldy 	#3 							; scan start position.
.84e7	b2 30		lda ($30)			lda 	(codePtr)
.84e9	d0 ba		bne $84a5			bne 	_ScanLoop 					; if not zero, more to scan
.84eb	a9 13		lda #$13		lda	#19
.84ed	4c 28 85	jmp $8528		jmp	ErrorHandler
.84f0					_ScanSkipData:
.84f0	88		dey				dey 								; point at data token
.84f1	c8		iny				iny
.84f2	98		tya				tya
.84f3	38		sec				sec
.84f4	71 30		adc ($30),y			adc 	(codePtr),y
.84f6	a8		tay				tay
.84f7	80 ac		bra $84a5			bra 	_ScanLoop

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/while.asm

.84f9					Command_WHILE:
.84f9	5a		phy				phy 								; save position of the test
.84fa	a2 00		ldx #$00			ldx 	#0
.84fc	20 23 8f	jsr $8f23			jsr 	EvaluateNumber 				; work out the number
.84ff	20 ff 8f	jsr $8fff			jsr 	NSMIsZero 					; check if zero
.8502	f0 0e		beq $8512			beq 	_WHExitLoop 				; if so exit the loop
.8504	98		tya				tya 								; position *after* test.
.8505	7a		ply				ply 								; restore position before test, at WHILE
.8506	88		dey				dey
.8507	48		pha				pha 								; push after test on the stack
.8508	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; allocate 6 bytes on the return stack.
.850a	20 0c 90	jsr $900c			jsr 	StackOpen
.850d	20 3e 90	jsr $903e			jsr 	STKSaveCodePosition 		; save loop position - where the test value is.
.8510	7a		ply				ply 								; restore the position *after* the test
.8511	60		rts				rts
.8512					_WHExitLoop:
.8512	68		pla				pla 								; throw post loop position
.8513	a9 a0		lda #$a0			lda 	#KWD_WEND 					; scan forward past WEND
.8515	aa		tax				tax
.8516	20 9f 84	jsr $849f			jsr 	ScanForward
.8519	60		rts				rts
.851a					Command_WEND:
.851a	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; check WHILE is TOS
.851c	a2 10		ldx #$10			ldx 	#ERRID_WHILE 				; this error
.851e	20 33 90	jsr $9033			jsr 	StackCheckFrame
.8521	20 4f 90	jsr $904f			jsr 	STKLoadCodePosition 		; loop back
.8524	20 25 90	jsr $9025			jsr 	StackClose		 			; erase the frame
.8527	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/charcheck.asm

.9575					CheckRightBracket:
.9575	b1 30		lda ($30),y			lda 	(codePtr),y
.9577	c8		iny				iny
.9578	c9 29		cmp #$29			cmp 	#KWD_RPAREN 						; exit if matches
.957a	d0 0f		bne $958b			bne 	CNAFail
.957c	60		rts				rts
.957d					CheckComma:
.957d	b1 30		lda ($30),y			lda 	(codePtr),y
.957f	c8		iny				iny
.9580	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 						; exit if matches
.9582	d0 07		bne $958b			bne 	CNAFail
.9584	60		rts				rts
.9585					CheckNextA:
.9585	d1 30		cmp ($30),y			cmp 	(codePtr),y
.9587	d0 02		bne $958b			bne 	CNAFail
.9589	c8		iny				iny 								; skip character
.958a	60		rts				rts 								; and exit
.958b					CNAFail:
.958b	4c 45 9a	jmp $9a45			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/errors.asm

.8528					ErrorHandler:
.8528	a8		tay				tay 								; find the error text
.8529	f0 42		beq $856d			beq 	_EHEnd
.852b	a2 00		ldx #$00			ldx 	#0
.852d					_EHFind:
.852d	88		dey				dey 								; found the error text ?
.852e	f0 0a		beq $853a			beq 	_EHFound
.8530					_EHFindZero:
.8530	bd 5e 9a	lda $9a5e,x			lda 	ErrorText,x 				; find the next error
.8533	e8		inx				inx
.8534	c9 00		cmp #$00			cmp 	#0
.8536	d0 f8		bne $8530			bne 	_EHFindZero
.8538	80 f3		bra $852d			bra 	_EHFind
.853a					_EHFound:
.853a	bd 5e 9a	lda $9a5e,x			lda 	ErrorText,x 				; print the message
.853d	20 77 9c	jsr $9c77			jsr 	EXTPrintCharacter
.8540	e8		inx				inx
.8541	bd 5e 9a	lda $9a5e,x			lda 	ErrorText,x
.8544	d0 f4		bne $853a			bne 	_EHFound
.8546	a0 01		ldy #$01			ldy 	#1 							; if line number zero don't print i
.8548	b1 30		lda ($30),y			lda 	(codePtr),y
.854a	d0 05		bne $8551			bne 	_EHAtMsg
.854c	c8		iny				iny
.854d	b1 30		lda ($30),y			lda 	(codePtr),y
.854f	f0 17		beq $8568			beq 	_EHCREnd
.8551					_EHAtMsg:
.8551	a2 85		ldx #$85			ldx 	#_AtMsg >> 8 				; print " at "
.8553	a9 70		lda #$70			lda 	#_AtMsg & $FF
.8555	20 7a 85	jsr $857a			jsr 	PrintStringXA
.8558	a0 01		ldy #$01			ldy 	#1 							; line number into XA
.855a	b1 30		lda ($30),y			lda 	(codePtr),y
.855c	48		pha				pha
.855d	c8		iny				iny
.855e	b1 30		lda ($30),y			lda 	(codePtr),y
.8560	aa		tax				tax
.8561	68		pla				pla
.8562	20 d1 96	jsr $96d1			jsr 	ConvertInt16 				; convert XA to string
.8565	20 7a 85	jsr $857a			jsr 	PrintStringXA 				; and print it.
.8568					_EHCREnd:
.8568	a9 0d		lda #$0d			lda 	#13 						; new line
.856a	20 77 9c	jsr $9c77			jsr 	EXTPrintCharacter
.856d					_EHEnd:
.856d	4c 0c 80	jmp $800c			jmp 	WarmStart
>8570	20 61 74 20 6c 69 6e 65		_AtMsg:	.text 	" at line ",0
>8578	20 00
.857a					PrintStringXA:
.857a	5a		phy				phy
.857b	86 37		stx $37				stx 	zTemp0+1
.857d	85 36		sta $36				sta 	zTemp0
.857f	a0 00		ldy #$00			ldy 	#0
.8581					_PSXALoop:
.8581	b1 36		lda ($36),y			lda 	(zTemp0),y
.8583	f0 06		beq $858b			beq 	_PSXAExit
.8585	20 77 9c	jsr $9c77			jsr 	EXTPrintCharacter
.8588	c8		iny				iny
.8589	80 f6		bra $8581			bra 	_PSXALoop
.858b					_PSXAExit:
.858b	7a		ply				ply
.858c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/compare.asm

.858d					UnaryTrue:
.858d	fa		plx				plx
.858e					ReturnTrue:
.858e	a9 01		lda #$01			lda 	#1  						; set to 1
.8590	20 d1 8f	jsr $8fd1			jsr 	NSMSetByte
.8593	a9 80		lda #$80			lda 	#$80 						; set sign flag, so it is -1
.8595	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8598	60		rts				rts
.8599					UnaryFalse:
.8599	fa		plx				plx
.859a					ReturnFalse:
.859a	4c cf 8f	jmp $8fcf			jmp 	NSMSetZero 					; set it all to zero
.859d					BinaryCompareEqual:
.859d	fa		plx				plx
.859e	20 d9 85	jsr $85d9			jsr 	CompareBaseCode
.85a1	c9 00		cmp #$00			cmp 	#0
.85a3	f0 e9		beq $858e			beq 	ReturnTrue
.85a5	80 f3		bra $859a			bra 	ReturnFalse
.85a7					BinaryCompareLess:
.85a7	fa		plx				plx
.85a8	20 d9 85	jsr $85d9			jsr 	CompareBaseCode
.85ab	c9 ff		cmp #$ff			cmp 	#$FF
.85ad	f0 df		beq $858e			beq 	ReturnTrue
.85af	80 e9		bra $859a			bra 	ReturnFalse
.85b1					BinaryCompareGreater:
.85b1	fa		plx				plx
.85b2	20 d9 85	jsr $85d9			jsr 	CompareBaseCode
.85b5	c9 01		cmp #$01			cmp 	#1
.85b7	f0 d5		beq $858e			beq 	ReturnTrue
.85b9	80 df		bra $859a			bra 	ReturnFalse
.85bb					BinaryCompareNotEqual:
.85bb	fa		plx				plx
.85bc	20 d9 85	jsr $85d9			jsr 	CompareBaseCode
.85bf	c9 00		cmp #$00			cmp 	#0
.85c1	d0 cb		bne $858e			bne 	ReturnTrue
.85c3	80 d5		bra $859a			bra 	ReturnFalse
.85c5					BinaryCompareLessEqual:
.85c5	fa		plx				plx
.85c6	20 d9 85	jsr $85d9			jsr 	CompareBaseCode
.85c9	c9 01		cmp #$01			cmp 	#1
.85cb	d0 c1		bne $858e			bne 	ReturnTrue
.85cd	80 cb		bra $859a			bra 	ReturnFalse
.85cf					BinaryCompareGreaterEqual:
.85cf	fa		plx				plx
.85d0	20 d9 85	jsr $85d9			jsr 	CompareBaseCode
.85d3	c9 ff		cmp #$ff			cmp 	#$FF
.85d5	d0 b7		bne $858e			bne 	ReturnTrue
.85d7	80 c1		bra $859a			bra 	ReturnFalse
.85d9					CompareBaseCode:
.85d9	20 3a 8a	jsr $8a3a			jsr 	DereferenceTopTwo 			; make both values if references.
.85dc	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if either is a string.
.85df	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.85e2	29 10		and #$10			and 	#NSTString
.85e4	d0 40		bne $8626			bne 	_CBCString
.85e6	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check both are integers
.85e9	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.85ec	d0 3b		bne $8629			bne 	_CBCFloat
.85ee	bd 00 06	lda $0600,x			lda 	NSStatus,x
.85f1	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.85f4	29 08		and #$08			and 	#NSTFloat
.85f6	d0 31		bne $8629			bne 	_CBCFloat
.85f8	20 2c 86	jsr $862c			jsr 	CompareFixMinusZero
.85fb	e8		inx				inx
.85fc	20 2c 86	jsr $862c			jsr 	CompareFixMinusZero
.85ff	ca		dex				dex
.8600	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; are the signs different ?
.8603	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.8606	10 0b		bpl $8613			bpl 	_CDCSameSign
.8608	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; if first one is -ve
.860b	30 16		bmi $8623			bmi 	_CBCLess 					; return $FF
.860d					_CBCGreater:
.860d	a9 01		lda #$01			lda 	#1
.860f	60		rts				rts
.8610					_CBCEqual:
.8610	a9 00		lda #$00			lda 	#0
.8612	60		rts				rts
.8613					_CDCSameSign:
.8613	20 3c 87	jsr $873c			jsr 	SubTopTwoStack 				; unsigned subtract
.8616	20 ff 8f	jsr $8fff			jsr 	NSMIsZero 					; or the mantissa together
.8619	f0 f5		beq $8610			beq 	_CBCEqual 					; -0 == 0
.861b	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; sign of the result. if +ve return $01 else return $FF
.861e	5d 01 06	eor $0601,x			eor 	NSStatus+1,x 				; however if both were -ve this is inverted
.8621	10 ea		bpl $860d			bpl 	_CBCGreater
.8623					_CBCLess:
.8623	a9 ff		lda #$ff			lda 	#$FF
.8625	60		rts				rts
.8626					_CBCString:
.8626	4c 92 86	jmp $8692			jmp 	CompareStrings
.8629					_CBCFloat:
.8629	4c cd 97	jmp $97cd			jmp 	CompareFloat
.862c					CompareFixMinusZero:
.862c	20 ff 8f	jsr $8fff			jsr 	NSMIsZero
.862f	d0 03		bne $8634			bne 	_CFXMZNotZero
.8631	9e 00 06	stz $0600,x			stz 	NSStatus,x
.8634					_CFXMZNotZero:
.8634	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/concat.asm

.8635					StringConcat:
.8635	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check both strings
.8638	3d 01 06	and $0601,x			and 	NSStatus+1,x
.863b	29 18		and #$18			and 	#NSBTypeMask
.863d	c9 10		cmp #$10			cmp 	#NSTString
.863f	d0 4e		bne $868f			bne		_SCType
.8641	64 38		stz $38				stz 	zTemp1 						; counting total length
.8643	e8		inx				inx
.8644	20 62 86	jsr $8662			jsr 	_SCSetupZ0 					; setup for second
.8647	20 6d 86	jsr $866d			jsr 	_SCLengthZ0 				; length for second
.864a	ca		dex				dex
.864b	20 62 86	jsr $8662			jsr 	_SCSetupZ0 					; setup for first
.864e	20 6d 86	jsr $866d			jsr 	_SCLengthZ0 				; length for first
.8651	a5 38		lda $38				lda 	zTemp1 						; allocate memory
.8653	20 0e 9c	jsr $9c0e			jsr 	StringTempAllocate
.8656	20 80 86	jsr $8680			jsr 	_SCCopy 					; copy first out, using zTemp0 from above
.8659	e8		inx				inx
.865a	20 62 86	jsr $8662			jsr 	_SCSetupZ0 					; copy second out
.865d	20 80 86	jsr $8680			jsr 	_SCCopy
.8660	ca		dex				dex
.8661	60		rts				rts
.8662					_SCSetupZ0:
.8662	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.8665	85 36		sta $36				sta 	zTemp0
.8667	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.866a	85 37		sta $37				sta 	zTemp0+1
.866c	60		rts				rts
.866d					_SCLengthZ0:
.866d	5a		phy				phy
.866e	a0 00		ldy #$00			ldy 	#0
.8670					_SCLenLoop:
.8670	b1 36		lda ($36),y			lda 	(zTemp0),y
.8672	f0 0a		beq $867e			beq 	_SCLExit
.8674	c8		iny				iny
.8675	e6 38		inc $38				inc 	zTemp1
.8677	10 f7		bpl $8670			bpl		_SCLenLoop
.8679	a9 09		lda #$09		lda	#9
.867b	4c 28 85	jmp $8528		jmp	ErrorHandler
.867e					_SCLExit:
.867e	7a		ply				ply
.867f	60		rts				rts
.8680					_SCCopy:
.8680	5a		phy				phy
.8681	a0 00		ldy #$00			ldy 	#0
.8683					_SCCopyLoop:
.8683	b1 36		lda ($36),y			lda 	(zTemp0),y
.8685	f0 06		beq $868d			beq 	_SCCExit
.8687	20 4c 9c	jsr $9c4c			jsr 	StringTempWrite
.868a	c8		iny				iny
.868b	80 f6		bra $8683			bra 	_SCCopyLoop
.868d					_SCCExit:
.868d	7a		ply				ply
.868e	60		rts				rts
.868f					_SCType:
.868f	4c 4f 9a	jmp $9a4f			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/divide.asm

.958e					IntegerDivide:
.958e	fa		plx				plx
.958f	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.9592	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.9595	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9596	0a		asl a				asl 	a
.9597	10 05		bpl $959e			bpl 	_NotRef
.9599	48		pha				pha
.959a	20 3a 8a	jsr $8a3a			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.959d	68		pla				pla
.959e					_NotRef:
.959e	0a		asl a				asl 	a
.959f	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.95a1	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.95a4	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.95a7	f0 03		beq $95ac			beq 	_IntegerCode 				; if clear, then we have two integers
.95a9	4c 4f 9a	jmp $9a4f			jmp 	TypeError 					; anything else, type mismatch.
.95ac					_IntegerCode:
.95ac	20 ce 95	jsr $95ce			jsr 	CheckDivideZero 			; do div zero check
.95af	20 06 96	jsr $9606			jsr 	Int32Divide 				; do the division
.95b2	20 c3 96	jsr $96c3			jsr 	CalculateSign 				; calculate result sign
.95b5					NSMCopyPlusTwoToZero:
.95b5	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.95b8	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.95bb	bd 12 06	lda $0612,x			lda 	NSMantissa1+2,x
.95be	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.95c1	bd 1a 06	lda $061a,x			lda 	NSMantissa2+2,x
.95c4	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.95c7	bd 22 06	lda $0622,x			lda 	NSMantissa3+2,x
.95ca	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.95cd	60		rts				rts
.95ce					CheckDivideZero:
.95ce	e8		inx				inx
.95cf	20 ff 8f	jsr $8fff			jsr 	NSMIsZero
.95d2	f0 02		beq $95d6			beq 	_CDVError
.95d4	ca		dex				dex
.95d5	60		rts				rts
.95d6					_CDVError:
.95d6	a9 03		lda #$03		lda	#3
.95d8	4c 28 85	jmp $8528		jmp	ErrorHandler
.95db					IntegerModulus:
.95db	fa		plx				plx
.95dc	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.95df	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.95e2	0a		asl a				asl 	a 							; shift reference bit into sign bit
.95e3	0a		asl a				asl 	a
.95e4	10 05		bpl $95eb			bpl 	_NotRef
.95e6	48		pha				pha
.95e7	20 3a 8a	jsr $8a3a			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.95ea	68		pla				pla
.95eb					_NotRef:
.95eb	0a		asl a				asl 	a
.95ec	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.95ee	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.95f1	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.95f4	f0 03		beq $95f9			beq 	_IntegerCode 				; if clear, then we have two integers
.95f6	4c 4f 9a	jmp $9a4f			jmp 	TypeError 					; anything else, type mismatch.
.95f9					_IntegerCode:
.95f9	20 ce 95	jsr $95ce			jsr 	CheckDivideZero 			; do div zero check
.95fc	20 06 96	jsr $9606			jsr 	Int32Divide 				; do the division
.95ff	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; clear the sign bit.
.9602	5e 00 06	lsr $0600,x			lsr 	NSStatus,x
.9605	60		rts				rts
.9606					Int32Divide:
.9606	48		pha				pha 								; save AXY
.9607	5a		phy				phy
.9608	20 a6 8f	jsr $8fa6			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.960b	20 cb 8f	jsr $8fcb			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.960e	a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.9610					_I32DivideLoop:
.9610	e8		inx				inx
.9611	e8		inx				inx
.9612	20 e4 8f	jsr $8fe4			jsr 	NSMShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.9615	ca		dex				dex
.9616	ca		dex				dex
.9617	20 e5 8f	jsr $8fe5			jsr 	NSMRotateLeft
.961a	20 46 96	jsr $9646			jsr 	DivideCheckSubtract 		; check if subtract possible
.961d	90 03		bcc $9622			bcc 	_I32DivideNoCarryIn
.961f	fe 0a 06	inc $060a,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.9622					_I32DivideNoCarryIn:
.9622	88		dey				dey 								; loop round till division completed.
.9623	d0 eb		bne $9610			bne 	_I32DivideLoop
.9625	7a		ply				ply 								; restore AXY and exit
.9626	68		pla				pla
.9627	60		rts				rts
.9628					Int32ShiftDivide:
.9628	48		pha				pha 								; save AY
.9629	5a		phy				phy
.962a	e8		inx				inx 								; clear S[X+2]
.962b	e8		inx				inx
.962c	20 cf 8f	jsr $8fcf			jsr 	NSMSetZero
.962f	ca		dex				dex
.9630	ca		dex				dex
.9631	a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.9633					_I32SDLoop:
.9633	20 46 96	jsr $9646			jsr 	DivideCheckSubtract 		; check if subtract possible
.9636	e8		inx				inx
.9637	e8		inx				inx
.9638	20 e5 8f	jsr $8fe5			jsr 	NSMRotateLeft				; shift 64 bit FPA left, rotating carry in
.963b	ca		dex				dex
.963c	ca		dex				dex
.963d	20 e5 8f	jsr $8fe5			jsr 	NSMRotateLeft
.9640	88		dey				dey 	 							; do 31 times
.9641	d0 f0		bne $9633			bne 	_I32SDLoop
.9643	7a		ply				ply 								; restore AY and exit
.9644	68		pla				pla
.9645	60		rts				rts
.9646					DivideCheckSubtract:
.9646	20 3c 87	jsr $873c			jsr 	SubTopTwoStack 				; subtract Stack[X+1] from Stack[X+0]
.9649	b0 04		bcs $964f			bcs 	_DCSExit 					; if carry set, then could do, exit
.964b	20 16 87	jsr $8716			jsr 	AddTopTwoStack 				; add it back in
.964e	18		clc				clc 								; and return False
.964f					_DCSExit:
.964f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/multiply.asm

.9650					MulInteger:
.9650	fa		plx				plx
.9651	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.9654	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.9657	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9658	0a		asl a				asl 	a
.9659	10 05		bpl $9660			bpl 	_NotRef
.965b	48		pha				pha
.965c	20 3a 8a	jsr $8a3a			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.965f	68		pla				pla
.9660					_NotRef:
.9660	0a		asl a				asl 	a 							; put MSB of type into A:7
.9661	30 0b		bmi $966e			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.9663	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9666	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.9669	f0 06		beq $9671			beq 	_IntegerCode 				; if clear, then we have two integers
.966b	4c a4 98	jmp $98a4			jmp 	FloatingPointMultiply 							; otherwise at least one float.
.966e					_StringData:
.966e	4c 59 9a	jmp $9a59			jmp 	NotDoneError							; at least one string - don't know both are strings.
.9671					_IntegerCode:
.9671	20 7e 96	jsr $967e			jsr 	MultiplyShort
.9674	c9 00		cmp #$00			cmp 	#0
.9676	f0 05		beq $967d			beq 	_MIExit
.9678	a9 04		lda #$04		lda	#4
.967a	4c 28 85	jmp $8528		jmp	ErrorHandler
.967d					_MIExit:
.967d	60		rts				rts
.967e					MultiplyShort:
.967e	5a		phy				phy 								; save Y
.967f	20 a6 8f	jsr $8fa6			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.9682	20 cb 8f	jsr $8fcb			jsr 	NSMSetZeroMantissaOnly 		; set mantissa S[X] to zero
.9685	a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.9687					_I32MLoop:
.9687	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.968a	1d 12 06	ora $0612,x			ora 	NSMantissa1+2,x
.968d	1d 1a 06	ora $061a,x			ora 	NSMantissa2+2,x
.9690	1d 22 06	ora $0622,x			ora 	NSMantissa3+2,x
.9693	f0 28		beq $96bd			beq 	_I32MExit 					; exit if zero
.9695	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.9698	29 01		and #$01			and 	#1
.969a	f0 0e		beq $96aa			beq 	_I32MNoAdd
.969c	20 16 87	jsr $8716			jsr 	AddTopTwoStack 				; if so add S[X+1] to S[X+0]
.969f	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.96a2	10 06		bpl $96aa			bpl 	_I32MNoAdd
.96a4					_I32ShiftRight:
.96a4	20 f2 8f	jsr $8ff2			jsr 	NSMShiftRight 				; shift S[X] right
.96a7	c8		iny				iny 								; increment shift count
.96a8	80 0a		bra $96b4			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.96aa					_I32MNoAdd:
.96aa	3c 21 06	bit $0621,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.96ad	70 f5		bvs $96a4			bvs 	_I32ShiftRight 				; instead.
.96af	e8		inx				inx
.96b0	20 e4 8f	jsr $8fe4			jsr 	NSMShiftLeft 				; shift additive S[X+1] left
.96b3	ca		dex				dex
.96b4					_I32MShiftUpper:
.96b4	e8		inx				inx 								; shift S[X+2] right
.96b5	e8		inx				inx
.96b6	20 f2 8f	jsr $8ff2			jsr 	NSMShiftRight
.96b9	ca		dex				dex
.96ba	ca		dex				dex
.96bb	80 ca		bra $9687			bra 	_I32MLoop 					; try again.
.96bd					_I32MExit:
.96bd	20 c3 96	jsr $96c3			jsr 	CalculateSign
.96c0	98		tya				tya 								; shift in A
.96c1	7a		ply				ply 								; restore Y and exit
.96c2	60		rts				rts
.96c3					CalculateSign:
.96c3	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.96c6	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; shift result left
.96c9	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.96cc	0a		asl a				asl 	a 							; shift bit 7 into carry
.96cd	7e 00 06	ror $0600,x			ror 	NSStatus,x 					; shift right into status byte.
.96d0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/scompare.asm

.8692					CompareStrings:
.8692	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check both are strings
.8695	3d 01 06	and $0601,x			and 	NSStatus+1,x
.8698	29 10		and #$10			and 	#NSBIsString
.869a	f0 2c		beq $86c8			beq 	_CSTypeError
.869c	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy string addresses to zTemp0/1
.869f	85 36		sta $36				sta 	zTemp0
.86a1	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.86a4	85 37		sta $37				sta 	zTemp0+1
.86a6	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.86a9	85 38		sta $38				sta 	zTemp1
.86ab	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.86ae	85 39		sta $39				sta 	zTemp1+1
.86b0	5a		phy				phy 								; save Y so we can access strings
.86b1	a0 ff		ldy #$ff			ldy 	#$FF 						; -1 for pre increment.
.86b3					_CSLoop:
.86b3	c8		iny				iny
.86b4	b1 36		lda ($36),y			lda 	(zTemp0),y 					; check if they are the same
.86b6	d1 38		cmp ($38),y			cmp 	(zTemp1),y
.86b8	d0 06		bne $86c0			bne 	_CSDifferent
.86ba	c9 00		cmp #$00			cmp 	#0 							; reached end ?
.86bc	d0 f5		bne $86b3			bne 	_CSLoop 					; still comparing
.86be					_CSExit:
.86be	7a		ply				ply 								; reached end, return zero in A from EOS
.86bf	60		rts				rts
.86c0					_CSDifferent:
.86c0	a9 ff		lda #$ff			lda 	#255 						; if < return $FF
.86c2	90 fa		bcc $86be			bcc		_CSExit
.86c4	a9 01		lda #$01			lda 	#1 							; otherwise return 1.
.86c6	80 f6		bra $86be			bra 	_CSExit
.86c8					_CSTypeError:
.86c8	4c 4f 9a	jmp $9a4f			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/shifts.asm

.86cb					ShiftLeft:
.86cb	38		sec				sec
.86cc	80 01		bra $86cf			bra 	ShiftMain
.86ce					ShiftRight:
.86ce	18		clc				clc
.86cf					ShiftMain:
.86cf	fa		plx				plx 								; restore X
.86d0	08		php				php 								; save direction
.86d1	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.86d4	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.86d7	0a		asl a				asl 	a 							; shift reference bit into sign bit
.86d8	0a		asl a				asl 	a
.86d9	10 05		bpl $86e0			bpl 	_NotRef
.86db	48		pha				pha
.86dc	20 3a 8a	jsr $8a3a			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.86df	68		pla				pla
.86e0					_NotRef:
.86e0	0a		asl a				asl 	a
.86e1	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.86e3	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.86e6	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.86e9	f0 03		beq $86ee			beq 	_IntegerCode 				; if clear, then we have two integers
.86eb	4c 4f 9a	jmp $9a4f			jmp 	TypeError 					; anything else, type mismatch.
.86ee					_IntegerCode:
.86ee	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; check number < 32
.86f1	29 e0		and #$e0			and 	#$E0
.86f3	1d 11 06	ora $0611,x			ora 	NSMantissa1+1,x
.86f6	1d 19 06	ora $0619,x			ora 	NSMantissa2+1,x
.86f9	1d 21 06	ora $0621,x			ora 	NSMantissa3+1,x
.86fc	d0 13		bne $8711			bne 	_SMExit0 					; if >= 32 it will always return zero.
.86fe					_SMLoop:
.86fe	de 09 06	dec $0609,x			dec 	NSMantissa0+1,x 			; predecrement, could do << 0
.8701	30 11		bmi $8714			bmi 	_SMExit 					; exit if done.
.8703	28		plp				plp 								; restore direcition setting
.8704	08		php				php
.8705	90 05		bcc $870c			bcc 	_SMRight
.8707	20 e4 8f	jsr $8fe4			jsr 	NSMShiftLeft 				; shift left if CS
.870a	80 f2		bra $86fe			bra 	_SMLoop
.870c					_SMRight:
.870c	20 f2 8f	jsr $8ff2			jsr 	NSMShiftRight 				; shift right if CC
.870f	80 ed		bra $86fe			bra 	_SMLoop
.8711					_SMExit0:
.8711	20 cf 8f	jsr $8fcf			jsr 	NSMSetZero 					; return zero.
.8714					_SMExit:
.8714	28		plp				plp 								; throw direction
.8715	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/simple.asm

.8716					AddTopTwoStack:
.8716	18		clc				clc
.8717	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.871a	7d 09 06	adc $0609,x			adc 		NSMantissa0+1,x
.871d	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8720	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8723	7d 11 06	adc $0611,x			adc 		NSMantissa1+1,x
.8726	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8729	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.872c	7d 19 06	adc $0619,x			adc 		NSMantissa2+1,x
.872f	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8732	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8735	7d 21 06	adc $0621,x			adc 		NSMantissa3+1,x
.8738	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.873b	60		rts				rts
.873c					SubTopTwoStack:
.873c	38		sec				sec
.873d	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8740	fd 09 06	sbc $0609,x			sbc 		NSMantissa0+1,x
.8743	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8746	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8749	fd 11 06	sbc $0611,x			sbc 		NSMantissa1+1,x
.874c	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.874f	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8752	fd 19 06	sbc $0619,x			sbc 		NSMantissa2+1,x
.8755	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8758	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.875b	fd 21 06	sbc $0621,x			sbc 		NSMantissa3+1,x
.875e	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8761	60		rts				rts
.8762					AddInteger:
.8762	fa		plx				plx
.8763	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8766	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8769	0a		asl a				asl 	a 							; shift reference bit into sign bit
.876a	0a		asl a				asl 	a
.876b	10 05		bpl $8772			bpl 	_NotRef
.876d	48		pha				pha
.876e	20 3a 8a	jsr $8a3a			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8771	68		pla				pla
.8772					_NotRef:
.8772	0a		asl a				asl 	a 							; put MSB of type into A:7
.8773	30 0b		bmi $8780			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.8775	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8778	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.877b	f0 06		beq $8783			beq 	_IntegerCode 				; if clear, then we have two integers
.877d	4c 2c 97	jmp $972c			jmp 	FloatingPointAdd 							; otherwise at least one float.
.8780					_StringData:
.8780	4c 35 86	jmp $8635			jmp 	StringConcat							; at least one string - don't know both are strings.
.8783					_IntegerCode:
.8783					AddCode:
.8783	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.8786	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.8789	10 8b		bpl $8716			bpl 	AddTopTwoStack
.878b	20 3c 87	jsr $873c			jsr 	SubTopTwoStack 				; do a physical subtraction
.878e	3c 20 06	bit $0620,x			bit 	NSMantissa3,x 				; result is +ve, okay
.8791	10 09		bpl $879c			bpl 	_AddExit
.8793	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; sign is that of 2nd value
.8796	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8799	20 84 8f	jsr $8f84			jsr 	NSMNegateMantissa 			; negate the mantissa and exit
.879c					_AddExit:
.879c	60		rts				rts
.879d					SubInteger:
.879d	fa		plx				plx
.879e	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.87a1	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.87a4	0a		asl a				asl 	a 							; shift reference bit into sign bit
.87a5	0a		asl a				asl 	a
.87a6	10 05		bpl $87ad			bpl 	_NotRef
.87a8	48		pha				pha
.87a9	20 3a 8a	jsr $8a3a			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.87ac	68		pla				pla
.87ad					_NotRef:
.87ad	0a		asl a				asl 	a 							; put MSB of type into A:7
.87ae	30 0b		bmi $87bb			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.87b0	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.87b3	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.87b6	f0 06		beq $87be			beq 	_IntegerCode 				; if clear, then we have two integers
.87b8	4c 31 97	jmp $9731			jmp 	FloatingPointSub 							; otherwise at least one float.
.87bb					_StringData:
.87bb	4c 59 9a	jmp $9a59			jmp 	NotDoneError							; at least one string - don't know both are strings.
.87be					_IntegerCode:
.87be	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; negate the second value.
.87c1	49 80		eor #$80			eor 	#$80
.87c3	9d 01 06	sta $0601,x			sta 	NSStatus+1,x
.87c6	80 bb		bra $8783			bra 	AddCode 					; and do the same code as add.
.87c8					AndInteger:
.87c8	fa		plx				plx
.87c9	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.87cc	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.87cf	0a		asl a				asl 	a 							; shift reference bit into sign bit
.87d0	0a		asl a				asl 	a
.87d1	10 05		bpl $87d8			bpl 	_NotRef
.87d3	48		pha				pha
.87d4	20 3a 8a	jsr $8a3a			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.87d7	68		pla				pla
.87d8					_NotRef:
.87d8	0a		asl a				asl 	a
.87d9	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.87db	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.87de	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.87e1	f0 03		beq $87e6			beq 	_IntegerCode 				; if clear, then we have two integers
.87e3	4c 4f 9a	jmp $9a4f			jmp 	TypeError 					; anything else, type mismatch.
.87e6					_IntegerCode:
.87e6	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.87e9	3d 09 06	and $0609,x			and 		NSMantissa0+1,x
.87ec	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.87ef	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.87f2	3d 11 06	and $0611,x			and 		NSMantissa1+1,x
.87f5	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.87f8	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.87fb	3d 19 06	and $0619,x			and 		NSMantissa2+1,x
.87fe	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8801	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8804	3d 21 06	and $0621,x			and 		NSMantissa3+1,x
.8807	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.880a	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.880d	60		rts				rts
.880e					OraInteger:
.880e	fa		plx				plx
.880f	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8812	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8815	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8816	0a		asl a				asl 	a
.8817	10 05		bpl $881e			bpl 	_NotRef
.8819	48		pha				pha
.881a	20 3a 8a	jsr $8a3a			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.881d	68		pla				pla
.881e					_NotRef:
.881e	0a		asl a				asl 	a
.881f	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8821	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8824	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8827	f0 03		beq $882c			beq 	_IntegerCode 				; if clear, then we have two integers
.8829	4c 4f 9a	jmp $9a4f			jmp 	TypeError 					; anything else, type mismatch.
.882c					_IntegerCode:
.882c	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.882f	1d 09 06	ora $0609,x			ora 		NSMantissa0+1,x
.8832	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8835	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8838	1d 11 06	ora $0611,x			ora 		NSMantissa1+1,x
.883b	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.883e	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8841	1d 19 06	ora $0619,x			ora 		NSMantissa2+1,x
.8844	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8847	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.884a	1d 21 06	ora $0621,x			ora 		NSMantissa3+1,x
.884d	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8850	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.8853	60		rts				rts
.8854					EorInteger:
.8854	fa		plx				plx
.8855	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8858	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.885b	0a		asl a				asl 	a 							; shift reference bit into sign bit
.885c	0a		asl a				asl 	a
.885d	10 05		bpl $8864			bpl 	_NotRef
.885f	48		pha				pha
.8860	20 3a 8a	jsr $8a3a			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8863	68		pla				pla
.8864					_NotRef:
.8864	0a		asl a				asl 	a
.8865	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8867	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.886a	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.886d	f0 03		beq $8872			beq 	_IntegerCode 				; if clear, then we have two integers
.886f	4c 4f 9a	jmp $9a4f			jmp 	TypeError 					; anything else, type mismatch.
.8872					_IntegerCode:
.8872	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8875	5d 09 06	eor $0609,x			eor 		NSMantissa0+1,x
.8878	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.887b	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.887e	5d 11 06	eor $0611,x			eor 		NSMantissa1+1,x
.8881	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8884	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8887	5d 19 06	eor $0619,x			eor 		NSMantissa2+1,x
.888a	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.888d	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8890	5d 21 06	eor $0621,x			eor 		NSMantissa3+1,x
.8893	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8896	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.8899	60		rts				rts
.889a					WordIndirect:
.889a	fa		plx				plx
.889b	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.889e	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.88a1	0a		asl a				asl 	a 							; shift reference bit into sign bit
.88a2	0a		asl a				asl 	a
.88a3	10 05		bpl $88aa			bpl 	_NotRef
.88a5	48		pha				pha
.88a6	20 3a 8a	jsr $8a3a			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.88a9	68		pla				pla
.88aa					_NotRef:
.88aa	0a		asl a				asl 	a
.88ab	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.88ad	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.88b0	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.88b3	f0 03		beq $88b8			beq 	_IntegerCode 				; if clear, then we have two integers
.88b5	4c 4f 9a	jmp $9a4f			jmp 	TypeError 					; anything else, type mismatch.
.88b8					_IntegerCode:
.88b8	20 83 87	jsr $8783			jsr 	AddCode 					; add the two values
.88bb	a9 22		lda #$22			lda 	#NSBIsReference+2 			; make a 2 byte reference
.88bd	9d 00 06	sta $0600,x			sta 	NSStatus,x
.88c0	60		rts				rts
.88c1					ByteIndirect:
.88c1	fa		plx				plx
.88c2	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.88c5	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.88c8	0a		asl a				asl 	a 							; shift reference bit into sign bit
.88c9	0a		asl a				asl 	a
.88ca	10 05		bpl $88d1			bpl 	_NotRef
.88cc	48		pha				pha
.88cd	20 3a 8a	jsr $8a3a			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.88d0	68		pla				pla
.88d1					_NotRef:
.88d1	0a		asl a				asl 	a
.88d2	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.88d4	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.88d7	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.88da	f0 03		beq $88df			beq 	_IntegerCode 				; if clear, then we have two integers
.88dc	4c 4f 9a	jmp $9a4f			jmp 	TypeError 					; anything else, type mismatch.
.88df					_IntegerCode:
.88df	20 83 87	jsr $8783			jsr 	AddCode 					; add the two values
.88e2	a9 21		lda #$21			lda 	#NSBIsReference+1 			; make a 1 byte reference
.88e4	9d 00 06	sta $0600,x			sta 	NSStatus,x
.88e7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/tostring.asm

.96d1					ConvertInt16:
.96d1	8d 08 06	sta $0608			sta 	NSMantissa0 				; set up as 32 bit conversion
.96d4	8e 10 06	stx $0610			stx 	NSMantissa1
.96d7	9c 18 06	stz $0618			stz 	NSMantissa2
.96da	9c 20 06	stz $0620			stz 	NSMantissa3
.96dd	9c 00 06	stz $0600			stz 	NSStatus 					; positive integer
.96e0	a2 00		ldx #$00			ldx 	#0 							; stack level
.96e2	a9 0a		lda #$0a			lda 	#10 						; base
.96e4	80 00		bra $96e6			bra 	ConvertInt32
.96e6					ConvertInt32:
.96e6	5a		phy				phy
.96e7	a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.96e9	2c 00 06	bit $0600			bit 	NSStatus 					; output a - if not negative.
.96ec	10 08		bpl $96f6			bpl 	_CI32NotNeg
.96ee	48		pha				pha
.96ef	a9 2d		lda #$2d			lda 	#'-'
.96f1	99 66 08	sta $0866,y			sta 	NumberBuffer,y
.96f4	c8		iny				iny
.96f5	68		pla				pla
.96f6					_CI32NotNeg:
.96f6	20 04 97	jsr $9704			jsr 	_CI32DivideConvert 			; recursive conversion
.96f9	a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.96fb	99 66 08	sta $0866,y			sta 	NumberBuffer,y
.96fe	7a		ply				ply
.96ff	a2 08		ldx #$08			ldx 	#NumberBuffer >> 8
.9701	a9 66		lda #$66			lda 	#NumberBuffer & $FF
.9703	60		rts				rts
.9704					_CI32DivideConvert:
.9704	e8		inx				inx 								; write to next slot up
.9705	20 d1 8f	jsr $8fd1			jsr 	NSMSetByte
.9708	ca		dex				dex
.9709	20 06 96	jsr $9606			jsr 	Int32Divide 				; divide
.970c	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; save remainder
.970f	48		pha				pha
.9710	20 b5 95	jsr $95b5			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.9713	20 ff 8f	jsr $8fff			jsr 	NSMIsZero 					; is it zero ?
.9716	f0 06		beq $971e			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.9718	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.971b	20 04 97	jsr $9704			jsr 	_CI32DivideConvert 			; and recusrively call.
.971e					_CI32NoRecurse:
.971e	68		pla				pla 								; remainder
.971f	c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII
.9721	90 02		bcc $9725			bcc 	_CI32NotHex
.9723	69 26		adc #$26			adc 	#6+32
.9725					_CI32NotHex:
.9725	69 30		adc #$30			adc 	#48
.9727	99 66 08	sta $0866,y			sta 	NumberBuffer,y 				; write out and exit
.972a	c8		iny				iny
.972b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/expression.asm


;******  Processing file: ./common/expressions/../generated/precedence.dat

.88e8					PrecedenceLevel:
>88e8	04					.byte	 4	; $00 <<
>88e9	02					.byte	 2	; $01 <=
>88ea	02					.byte	 2	; $02 <>
>88eb	00					.byte	 0	; $03 !!3
>88ec	00					.byte	 0	; $04 ><
>88ed	02					.byte	 2	; $05 >=
>88ee	04					.byte	 4	; $06 >>
>88ef	00					.byte	 0	; $07 !!7
>88f0	00					.byte	 0	; $08 !!8
>88f1	00					.byte	 0	; $09 !!9
>88f2	00					.byte	 0	; $0a !!10
>88f3	00					.byte	 0	; $0b !!11
>88f4	00					.byte	 0	; $0c !!12
>88f5	00					.byte	 0	; $0d !!13
>88f6	00					.byte	 0	; $0e !!14
>88f7	00					.byte	 0	; $0f !!15
>88f8	00					.byte	 0	; $10 @
>88f9	00					.byte	 0	; $11 !!17
>88fa	00					.byte	 0	; $12 !!18
>88fb	00					.byte	 0	; $13 [
>88fc	04					.byte	 4	; $14 \
>88fd	00					.byte	 0	; $15 ]
>88fe	01					.byte	 1	; $16 ^
>88ff	00					.byte	 0	; $17 _
>8900	00					.byte	 0	; $18 `
>8901	00					.byte	 0	; $19 !!25
>8902	00					.byte	 0	; $1a !!26
>8903	00					.byte	 0	; $1b {
>8904	01					.byte	 1	; $1c |
>8905	00					.byte	 0	; $1d }
>8906	00					.byte	 0	; $1e ~
>8907	00					.byte	 0	; $1f [7m<7F>[m
>8908	00					.byte	 0	; $20
>8909	05					.byte	 5	; $21 !
>890a	00					.byte	 0	; $22 "
>890b	00					.byte	 0	; $23 #
>890c	05					.byte	 5	; $24 $
>890d	04					.byte	 4	; $25 %
>890e	01					.byte	 1	; $26 &
>890f	00					.byte	 0	; $27 '
>8910	00					.byte	 0	; $28 (
>8911	00					.byte	 0	; $29 )
>8912	04					.byte	 4	; $2a *
>8913	03					.byte	 3	; $2b +
>8914	00					.byte	 0	; $2c ,
>8915	03					.byte	 3	; $2d -
>8916	00					.byte	 0	; $2e .
>8917	04					.byte	 4	; $2f /
>8918	00					.byte	 0	; $30 0
>8919	00					.byte	 0	; $31 1
>891a	00					.byte	 0	; $32 2
>891b	00					.byte	 0	; $33 3
>891c	00					.byte	 0	; $34 4
>891d	00					.byte	 0	; $35 5
>891e	00					.byte	 0	; $36 6
>891f	00					.byte	 0	; $37 7
>8920	00					.byte	 0	; $38 8
>8921	00					.byte	 0	; $39 9
>8922	00					.byte	 0	; $3a :
>8923	00					.byte	 0	; $3b ;
>8924	02					.byte	 2	; $3c <
>8925	02					.byte	 2	; $3d =
>8926	02					.byte	 2	; $3e >
>8927	05					.byte	 5	; $3f ?

;******  Return to file: ./common/expressions/expression.asm

.8928					EvaluateExpressionAt0:
.8928	a2 00		ldx #$00			ldx 	#0 							; bottom stack level
.892a					EvaluateExpression:
.892a	a9 00		lda #$00			lda 	#0 							; lowest precedence level
.892c					EvaluateExpressionAtPrecedence:
.892c	48		pha				pha 								; save precedence level
.892d	20 fb 8b	jsr $8bfb			jsr 	EvaluateTerm 				; evaluate term into level X.
.8930	68		pla				pla 								; restore precedence level.
.8931					_EXPRLoop:
.8931	85 36		sta $36				sta 	zTemp0 						; save current precedence level.
.8933	b1 30		lda ($30),y			lda 	(codePtr),y
.8935	c9 40		cmp #$40			cmp		#$40 						; if >= $40 cannot be an operator
.8937	b0 25		bcs $895e			bcs 	_EXPRExit
.8939	da		phx				phx 								; read the operator precedence
.893a	aa		tax				tax
.893b	bd e8 88	lda $88e8,x			lda 	PrecedenceLevel,x
.893e	fa		plx				plx
.893f	c9 00		cmp #$00			cmp 	#0							; if zero exit (not an operator)
.8941	f0 1b		beq $895e			beq 	_EXPRExit
.8943	85 37		sta $37				sta 	zTemp0+1 					; save operator precedence level.
.8945	a5 36		lda $36				lda 	zTemp0 						; compare current precedence vs. operator precedence
.8947	c5 37		cmp $37				cmp 	zTemp0+1
.8949	b0 13		bcs $895e			bcs		_EXPRExit 					; if current >= operator exit
.894b	48		pha				pha 								; save current precedence.
.894c	b1 30		lda ($30),y			lda 	(codePtr),y
.894e	c8		iny				iny
.894f	48		pha				pha
.8950	a5 37		lda $37				lda 	zTemp0+1 					; get operator precedence level
.8952	e8		inx				inx 								; work out the right hand side.
.8953	20 2c 89	jsr $892c			jsr 	EvaluateExpressionAtPrecedence
.8956	ca		dex				dex
.8957	68		pla				pla 								; get operator, call the code.
.8958	20 61 89	jsr $8961			jsr 	_EXPRCaller
.895b	68		pla				pla 								; restore precedence level
.895c	80 d3		bra $8931			bra 	_EXPRLoop 					; and go round.
.895e					_EXPRExit:
.895e	a5 36		lda $36				lda 	zTemp0 						; A = current precedence level.
.8960	60		rts				rts
.8961					_EXPRCaller:
.8961	da		phx				phx 								; save on stack, first thing is to restore it
.8962	0a		asl a				asl 	a 							; double so can use vectors into X
.8963	aa		tax				tax
.8964	7c 14 80	jmp ($8014,x)			jmp 	(VectorSetPunc,x) 			; and go to the code.

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/addsub.asm

.972c					FloatingPointAdd:
.972c	20 cd 98	jsr $98cd			jsr 	FloatPrepare 				; prepare for floats
.972f	80 0b		bra $973c			bra 	FloatAdd
.9731					FloatingPointSub:
.9731	20 cd 98	jsr $98cd			jsr 	FloatPrepare 				; prepare for floats
.9734					FloatSubtract:
.9734	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; negate FPB
.9737	49 80		eor #$80			eor 	#$80
.9739	9d 01 06	sta $0601,x			sta 	NSStatus+1,x				; and fall through.
.973c					FloatAdd:
.973c	48		pha				pha
.973d	5a		phy				phy
.973e	20 de 98	jsr $98de			jsr 	NSNormalise 				; normalise S[X]
.9741	f0 54		beq $9797			beq 	_FAReturn1
.9743	e8		inx				inx 								; normalise S[X+1]
.9744	20 de 98	jsr $98de			jsr 	NSNormalise
.9747	ca		dex				dex
.9748	c9 00		cmp #$00			cmp 	#0
.974a	f0 6f		beq $97bb			beq 	_FAExit 					; if so, just return A
.974c	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; are the exponents the same ?
.974f	dd 29 06	cmp $0629,x			cmp 	NSExponent+1,x
.9752	f0 1b		beq $976f			beq 	_FAExponentsEqual
.9754	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; work out the larger exponent
.9757	a8		tay				tay
.9758	38		sec				sec 								; do a signed comparison of the exponents.
.9759	fd 29 06	sbc $0629,x			sbc 	NSExponent+1,x
.975c	50 02		bvc $9760			bvc 	_FANoSignedChange
.975e	49 80		eor #$80			eor 	#$80
.9760					_FANoSignedChange:
.9760	29 80		and #$80			and 	#$80
.9762	10 03		bpl $9767			bpl 	_FAHaveMax
.9764	bc 29 06	ldy $0629,x			ldy 	NSExponent+1,x
.9767					_FAHaveMax:
.9767	20 be 97	jsr $97be			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.976a	e8		inx				inx
.976b	20 be 97	jsr $97be			jsr 	_FAShiftToExponent
.976e	ca		dex				dex
.976f					_FAExponentsEqual:
.976f	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; are the signs the same
.9772	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.9775	30 10		bmi $9787			bmi 	_FADifferentSigns
.9777	20 16 87	jsr $8716			jsr 	AddTopTwoStack 				; do the add of the mantissae
.977a	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.977d	10 3c		bpl $97bb			bpl 	_FAExit 					; if no, we are done.
.977f	20 f2 8f	jsr $8ff2			jsr 	NSMShiftRight 				; shift A right, renormalising it.
.9782	fe 28 06	inc $0628,x			inc 	NSExponent,x 				; bump the exponent and exit
.9785	80 34		bra $97bb			bra 	_FAExit
.9787					_FADifferentSigns:
.9787	20 3c 87	jsr $873c			jsr 	SubTopTwoStack 				; subtract mantissa B from A
.978a	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; is the result negative ?
.978d	10 2c		bpl $97bb			bpl 	_FAExit 					; if no, we are done.
.978f	20 7b 8f	jsr $8f7b			jsr 	NSMNegate 					; netate result
.9792	20 84 8f	jsr $8f84			jsr 	NSMNegateMantissa 			; negate (2'c) the mantissa
.9795	80 24		bra $97bb			bra 	_FAExit
.9797					_FAReturn1:
.9797	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.979a	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.979d	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.97a0	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.97a3	bd 19 06	lda $0619,x			lda 	NSMantissa2+1,x
.97a6	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.97a9	bd 21 06	lda $0621,x			lda 	NSMantissa3+1,x
.97ac	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.97af	bd 29 06	lda $0629,x			lda 	NSExponent+1,x
.97b2	9d 28 06	sta $0628,x			sta 	NSExponent,x
.97b5	bd 01 06	lda $0601,x			lda 	NSStatus+1,x
.97b8	9d 00 06	sta $0600,x			sta 	NSStatus,x
.97bb					_FAExit:
.97bb	7a		ply				ply
.97bc	68		pla				pla
.97bd	60		rts				rts
.97be					_FAShiftToExponent:
.97be					_FAShiftToExponent2:
.97be	98		tya				tya 								; compare Y to exponent
.97bf	dd 28 06	cmp $0628,x			cmp 	NSExponent,x 				; reached the exponent required ?
.97c2	f0 08		beq $97cc			beq 	_FASEExit 					; exit if so.
.97c4	20 f2 8f	jsr $8ff2			jsr 	NSMShiftRight	 			; shift the mantissa right
.97c7	fe 28 06	inc $0628,x			inc 	NSExponent,x 				; increment exponent
.97ca	80 f2		bra $97be			bra 	_FAShiftToExponent2
.97cc					_FASEExit:
.97cc	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/compare.asm

.97cd					CompareFloat:
.97cd	20 34 97	jsr $9734			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.97d0	bd 10 06	lda $0610,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.97d3	29 f8		and #$f8			and 	#$F8
.97d5	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.97d8	1d 20 06	ora $0620,x			ora 	NSMantissa3,x
.97db	f0 09		beq $97e6			beq 	_FCExit 					; zero, so approximately identical
.97dd	a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.97df	3c 00 06	bit $0600,x			bit 	NSStatus,x
.97e2	10 02		bpl $97e6			bpl 	_FCExit
.97e4					_FCNegative:
.97e4	a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.97e6					_FCExit:
.97e6	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/divide.asm

.97e7					FDivideCommand:
.97e7	fa		plx				plx	 								; restore stack position
.97e8	20 cd 98	jsr $98cd			jsr 	FloatPrepare 				; prepare for floats
.97eb					FloatDivide:
.97eb	48		pha				pha
.97ec	e8		inx				inx
.97ed	20 de 98	jsr $98de			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.97f0	ca		dex				dex
.97f1	c9 00		cmp #$00			cmp 	#0
.97f3	f0 20		beq $9815			beq 	_FDZero
.97f5	20 de 98	jsr $98de			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.97f8	f0 19		beq $9813			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.97fa	20 28 96	jsr $9628			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.97fd	20 b5 95	jsr $95b5			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.9800	20 de 98	jsr $98de			jsr		NSNormalise 				; renormalise
.9803	20 c3 96	jsr $96c3			jsr 	CalculateSign 				; calculate result sign
.9806	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; calculate exponent
.9809	38		sec				sec
.980a	fd 29 06	sbc $0629,x			sbc 	NSExponent+1,x
.980d	38		sec				sec
.980e	e9 1e		sbc #$1e			sbc 	#30
.9810	9d 28 06	sta $0628,x			sta 	NSExponent,x
.9813					_FDExit:
.9813	68		pla				pla
.9814	60		rts				rts
.9815					_FDZero:
.9815	a9 03		lda #$03		lda	#3
.9817	4c 28 85	jmp $8528		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/fractional.asm

.981a					FloatFractionalPart:
.981a	5a		phy				phy
.981b	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; take absolute value
.981e	29 7f		and #$7f			and 	#$7F
.9820	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9823	20 de 98	jsr $98de			jsr 	NSNormalise
.9826	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.9829	38		sec				sec
.982a	e9 e0		sbc #$e0			sbc 	#$E0
.982c	90 31		bcc $985f			bcc 	_FFPExit 					; already fractional
.982e	c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.9830	b0 2a		bcs $985c			bcs 	_FFPZero
.9832	a8		tay				tay 								; put count to do in Y
.9833	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; do each in turn.
.9836	20 61 98	jsr $9861			jsr 	_FFPPartial
.9839	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.983c	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.983f	20 61 98	jsr $9861			jsr 	_FFPPartial
.9842	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.9845	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.9848	20 61 98	jsr $9861			jsr 	_FFPPartial
.984b	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.984e	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.9851	20 61 98	jsr $9861			jsr 	_FFPPartial
.9854	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.9857	20 ff 8f	jsr $8fff			jsr 	NSMIsZero 					; zeroed check.
.985a	d0 03		bne $985f			bne 	_FFPExit
.985c					_FFPZero:
.985c	20 cf 8f	jsr $8fcf			jsr 	NSMSetZero
.985f					_FFPExit:
.985f	7a		ply				ply
.9860	60		rts				rts
.9861					_FFPPartial:
.9861	c0 00		cpy #$00			cpy 	#0 							; no more to do
.9863	f0 17		beq $987c			beq 	_FFFPPExit
.9865	c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.9867	b0 0c		bcs $9875			bcs 	_FFFPPWholeByte
.9869	5a		phy				phy
.986a					_FFFPPLeft:
.986a	0a		asl a				asl 	a
.986b	88		dey				dey
.986c	d0 fc		bne $986a			bne 	_FFFPPLeft
.986e	7a		ply				ply
.986f					_FFFPPRight:
.986f	4a		lsr a				lsr 	a
.9870	88		dey				dey
.9871	d0 fc		bne $986f			bne 	_FFFPPRight
.9873	80 07		bra $987c			bra 	_FFFPPExit
.9875					_FFFPPWholeByte:
.9875	98		tya				tya 								; subtract 8 from count
.9876	38		sec				sec
.9877	e9 08		sbc #$08			sbc 	#8
.9879	a8		tay				tay
.987a	a9 00		lda #$00			lda 	#0 							; and clear all
.987c					_FFFPPExit:
.987c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/integer.asm

.987d					FloatIntegerPart:
.987d	48		pha				pha
.987e	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; is it integer already ?
.9881	f0 1f		beq $98a2			beq 	_FIPExit 					; if so do nothing
.9883	20 ff 8f	jsr $8fff			jsr 	NSMIsZero 					; is it zero ?
.9886	f0 17		beq $989f			beq 	_FIPZero 					; if so return zero.
.9888	20 de 98	jsr $98de			jsr 	NSNormalise 				; normalise
.988b	f0 12		beq $989f			beq 	_FIPZero 					; normalised to zero, exit zero
.988d					_FIPShift:
.988d	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.9890	10 08		bpl $989a			bpl 	_FIPCheckZero
.9892	20 f2 8f	jsr $8ff2			jsr 	NSMShiftRight 				; shift mantissa right
.9895	fe 28 06	inc $0628,x			inc 	NSExponent,x 				; bump exponent
.9898	80 f3		bra $988d			bra 	_FIPShift
.989a					_FIPCheckZero:
.989a	20 ff 8f	jsr $8fff			jsr 	NSMIsZero 					; avoid -0 problem
.989d	d0 03		bne $98a2			bne 	_FIPExit 					; set to zero if mantissa zero.
.989f					_FIPZero:
.989f	20 cf 8f	jsr $8fcf			jsr 	NSMSetZero
.98a2					_FIPExit:
.98a2	68		pla				pla
.98a3	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/multiply.asm

.98a4					FloatingPointMultiply:
.98a4	20 cd 98	jsr $98cd			jsr 	FloatPrepare 				; prepare for floats
.98a7					FloatMultiply:
.98a7	48		pha				pha
.98a8	20 de 98	jsr $98de			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.98ab	f0 1b		beq $98c8			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.98ad	e8		inx				inx
.98ae	20 de 98	jsr $98de			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.98b1	ca		dex				dex
.98b2	c9 00		cmp #$00			cmp 	#0
.98b4	f0 0f		beq $98c5			beq 	_FDSetZero
.98b6	20 7e 96	jsr $967e			jsr 	MultiplyShort 				; calculate the result.
.98b9	7d 28 06	adc $0628,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.98bc	18		clc				clc
.98bd	7d 29 06	adc $0629,x			adc 	NSExponent+1,x
.98c0	9d 28 06	sta $0628,x			sta 	NSExponent,x
.98c3	80 03		bra $98c8			bra 	_FDExit
.98c5					_FDSetZero:
.98c5	20 cf 8f	jsr $8fcf			jsr 	NSMSetZero 					; return 0
.98c8					_FDExit:
.98c8	20 de 98	jsr $98de			jsr 	NSNormalise 				; normalise the result
.98cb	68		pla				pla
.98cc	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/utility.asm

.98cd					FloatPrepare:
.98cd	20 3a 8a	jsr $8a3a			jsr 	DereferenceTopTwo 			; dereference the top two values
.98d0	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check ints/floats
.98d3	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.98d6	29 10		and #$10			and 	#NSBIsString
.98d8	d0 01		bne $98db			bne 	_FDType
.98da	60		rts				rts
.98db					_FDType:
.98db	4c 4f 9a	jmp $9a4f			jmp 	TypeError
.98de					NSNormalise:
.98de	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; make float, keep sign
.98e1	29 80		and #$80			and 	#$80
.98e3	09 08		ora #$08			ora 	#NSTFloat
.98e5	9d 00 06	sta $0600,x			sta 	NSStatus,x
.98e8	20 ff 8f	jsr $8fff			jsr 	NSMIsZero 					; if zero exit
.98eb	d0 09		bne $98f6			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.98ed	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; clear the sign bit.
.98f0	7e 00 06	ror $0600,x			ror 	NSStatus,x 					; (no -0)
.98f3	a9 00		lda #$00			lda 	#0 							; set Z flag
.98f5	60		rts				rts
.98f6					_NSNormaliseOptimise:
.98f6	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; upper byte zero ?
.98f9	d0 22		bne $991d			bne 	_NSNormaliseLoop
.98fb	bd 18 06	lda $0618,x			lda 	NSMantissa2,x 				; byte normalise
.98fe	30 1d		bmi $991d			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.9900	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.9903	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.9906	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.9909	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.990c	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.990f	9e 08 06	stz $0608,x			stz 	NSMantissa0,x
.9912	bd 28 06	lda $0628,x			lda 	NSExponent,x
.9915	38		sec				sec
.9916	e9 08		sbc #$08			sbc 	#8
.9918	9d 28 06	sta $0628,x			sta 	NSExponent,x
.991b	80 d9		bra $98f6			bra 	_NSNormaliseOptimise
.991d					_NSNormaliseLoop:
.991d	3c 20 06	bit $0620,x			bit 	NSMantissa3,x 				; bit 30 set ?
.9920	70 08		bvs $992a			bvs 	_NSNExit 					; exit if so with Z flag clear
.9922	20 e4 8f	jsr $8fe4			jsr 	NSMShiftLeft 				; shift mantissa left
.9925	de 28 06	dec $0628,x			dec 	NSExponent,x 				; adjust exponent
.9928	80 f3		bra $991d			bra 	_NSNormaliseLoop
.992a					_NSNExit:
.992a	a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.992c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignnumber.asm

.8967					AssignNumber:
.8967	5a		phy				phy
.8968	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy mantissa0/1 to zTemp0
.896b	85 36		sta $36				sta 	zTemp0
.896d	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8970	85 37		sta $37				sta 	zTemp0+1
.8972	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; clear reference bits
.8975	29 df		and #$df			and 	#(NSBIsReference ^ $FF)
.8977	9d 00 06	sta $0600,x			sta 	NSStatus,x
.897a	29 18		and #$18			and 	#NSBTypeMask				; assigning to a float ?
.897c	c9 08		cmp #$08			cmp 	#NSTFloat
.897e	f0 2a		beq $89aa			beq 	_ANFloat
.8980	bd 29 06	lda $0629,x			lda		NSExponent+1,x 				; is it a float
.8983	f0 05		beq $898a			beq		_ANNotFloat
.8985	e8		inx				inx
.8986	20 7d 98	jsr $987d			jsr 	FloatIntegerPart 			; make it an integer
.8989	ca		dex				dex
.898a					_ANNotFloat:
.898a	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if byte/word reference.
.898d	29 03		and #$03			and 	#3
.898f	d0 05		bne $8996			bne 	_ANByteWord
.8991	20 b6 89	jsr $89b6			jsr 	_ANCopy4PackSign 			; copy all 4 bytes and sign
.8994	80 1e		bra $89b4			bra 	_ANExit
.8996					_ANByteWord:
.8996	48		pha				pha 								; save count
.8997	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; do byte
.899a	92 36		sta ($36)			sta 	(zTemp0)
.899c	68		pla				pla
.899d	c9 01		cmp #$01			cmp	 	#1
.899f	f0 13		beq $89b4			beq 	_ANExit
.89a1	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x 			; do word
.89a4	a0 01		ldy #$01			ldy 	#1
.89a6	91 36		sta ($36),y			sta 	(zTemp0),y
.89a8	80 0a		bra $89b4			bra 	_ANExit
.89aa					_ANFloat:
.89aa	20 b6 89	jsr $89b6			jsr 	_ANCopy4PackSign 			; write all 4 bytes and packed sign
.89ad	bd 29 06	lda $0629,x			lda 	NSExponent+1,x 				; copy exponent to slot 4
.89b0	a0 04		ldy #$04			ldy 	#4
.89b2	91 36		sta ($36),y			sta 	(zTemp0),y
.89b4					_ANExit:
.89b4	7a		ply				ply
.89b5	60		rts				rts
.89b6					_ANCopy4PackSign:
.89b6	a0 03		ldy #$03			ldy 	#3
.89b8	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; sign bit into status
.89bb	29 80		and #$80			and 	#$80 						; put into high bit of mantissa 3
.89bd	1d 21 06	ora $0621,x			ora 	NSMantissa3+1,x
.89c0	91 36		sta ($36),y			sta 	(zTemp0),y
.89c2	88		dey				dey
.89c3	bd 19 06	lda $0619,x			lda 	NSMantissa2+1,x
.89c6	91 36		sta ($36),y			sta 	(zTemp0),y
.89c8	88		dey				dey
.89c9	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.89cc	91 36		sta ($36),y			sta 	(zTemp0),y
.89ce	88		dey				dey
.89cf	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.89d2	91 36		sta ($36),y			sta 	(zTemp0),y
.89d4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignstring.asm

.89d5					AssignString:
.89d5	5a		phy				phy
.89d6	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.89d9	85 38		sta $38				sta 	zTemp1
.89db	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.89de	85 39		sta $39				sta 	zTemp1+1
.89e0	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.89e3	85 36		sta $36				sta 	zTemp0
.89e5	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.89e8	85 37		sta $37				sta 	zTemp0+1
.89ea	a0 01		ldy #$01			ldy 	#1 							; the high byte of the target address
.89ec	b1 36		lda ($36),y			lda 	(zTemp0),y
.89ee	f0 23		beq $8a13			beq 	_ASNewStringRequired 		; if zero, a new string is required.
.89f0	38		sec				sec 								; put Address-2 in zsTemp - this is the size/status/string record
.89f1	b2 36		lda ($36)			lda 	(zTemp0) 					; of concreted strings
.89f3	e9 02		sbc #$02			sbc 	#2
.89f5	85 3c		sta $3c				sta 	zsTemp
.89f7	a0 01		ldy #$01			ldy 	#1
.89f9	b1 36		lda ($36),y			lda 	(zTemp0),y
.89fb	e9 00		sbc #$00			sbc 	#0
.89fd	85 3d		sta $3d				sta 	zsTemp+1
.89ff	a0 ff		ldy #$ff			ldy 	#$FF 						; get length of new string
.8a01					_ASGetLength:
.8a01	c8		iny				iny
.8a02	b1 38		lda ($38),y			lda 	(zTemp1),y
.8a04	d0 fb		bne $8a01			bne 	_ASGetLength
.8a06	98		tya				tya 								; is this length <= current length
.8a07	d2 3c		cmp ($3c)			cmp 	(zsTemp)
.8a09	90 20		bcc $8a2b			bcc 	_ASCopyString
.8a0b	f0 1e		beq $8a2b			beq 	_ASCopyString
.8a0d	a9 80		lda #$80			lda 	#$80 						; mark as unused.
.8a0f	a0 01		ldy #$01			ldy 	#1
.8a11	91 3c		sta ($3c),y			sta 	(zsTemp),y
.8a13					_ASNewStringRequired:
.8a13	e8		inx				inx 								; concrete the new string.
.8a14	20 93 9b	jsr $9b93			jsr 	StringConcrete				; (breaks zTemp1/2, not zTemp0 and zsTemp)
.8a17	ca		dex				dex
.8a18	18		clc				clc
.8a19	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; copy that new address to the reference.
.8a1c	69 02		adc #$02			adc 	#2 							; add two to point at the data.
.8a1e	92 36		sta ($36)			sta 	(zTemp0)
.8a20	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.8a23	69 00		adc #$00			adc 	#0
.8a25	a0 01		ldy #$01			ldy 	#1
.8a27	91 36		sta ($36),y			sta 	(zTemp0),y
.8a29	80 0d		bra $8a38			bra 	_ASExit
.8a2b					_ASCopyString:
.8a2b	a0 00		ldy #$00			ldy 	#0
.8a2d					_ASCopyLoop:
.8a2d	b1 38		lda ($38),y			lda 	(zTemp1),y
.8a2f	c8		iny				iny
.8a30	c8		iny				iny
.8a31	91 3c		sta ($3c),y			sta 	(zsTemp),y
.8a33	88		dey				dey
.8a34	c9 00		cmp #$00			cmp 	#0
.8a36	d0 f5		bne $8a2d			bne 	_ASCopyLoop
.8a38					_ASExit:
.8a38	7a		ply				ply
.8a39	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/dereference.asm

.8a3a					DereferenceTopTwo:
.8a3a	e8		inx				inx
.8a3b	20 3f 8a	jsr $8a3f			jsr 	Dereference 				; deref x+1
.8a3e	ca		dex				dex  								; falls through to deref x
.8a3f					Dereference:
.8a3f	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get the status byte
.8a42	29 20		and #$20			and 	#NSBIsReference 			; shift sign bit to carry, reference to bit 7
.8a44	f0 57		beq $8a9d			beq 	_DRFExit 					; not a reference
.8a46	5a		phy				phy
.8a47	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy address to dereference into zTemp0
.8a4a	85 36		sta $36				sta 	zTemp0
.8a4c	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8a4f	85 37		sta $37				sta 	zTemp0+1
.8a51	9e 10 06	stz $0610,x			stz 	NSMantissa1,x 				; clear second byte.
.8a54	b2 36		lda ($36)			lda 	(zTemp0) 					; do the first byte
.8a56	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8a59	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get status byte.
.8a5c	29 18		and #$18			and 	#NSBTypeMask 				; what type is it ?
.8a5e	c9 10		cmp #$10			cmp 	#NSTString 					; if string, dereference two
.8a60	f0 0f		beq $8a71			beq 	_DRFDereferenceTwo
.8a62	c9 08		cmp #$08			cmp 	#NSTFloat 					; if float, do full dereference.
.8a64	f0 39		beq $8a9f			beq 	_DRFFull
.8a66	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be integer - how many bytes ?
.8a69	29 03		and #$03			and 	#3
.8a6b	f0 32		beq $8a9f			beq 	_DRFFull 					; the whole word
.8a6d	c9 01		cmp #$01			cmp 	#1 							; is it 10 (e.g. 2 bytes)
.8a6f	f0 07		beq $8a78			beq		_DRFClear23 				; no, one byte, clear 2 & 3 and exit
.8a71					_DRFDereferenceTwo:
.8a71	a0 01		ldy #$01			ldy 	#1
.8a73	b1 36		lda ($36),y			lda 	(zTemp0),y
.8a75	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8a78					_DRFClear23:
.8a78	9e 18 06	stz $0618,x			stz 	NSMantissa2,x 				; clear upper bytes, only read 1 or 2 bytes
.8a7b	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.8a7e	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; make it a value of that type.
.8a81	29 18		and #$18			and 	#NSBTypeMask
.8a83	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8a86	c9 10		cmp #$10			cmp 	#NSTString  				; is it a string
.8a88	d0 12		bne $8a9c			bne 	_DRFNotString
.8a8a	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; check address is zero
.8a8d	1d 10 06	ora $0610,x			ora 	NSMantissa1,x
.8a90	d0 0a		bne $8a9c			bne 	_DRFNotString
.8a92	a9 9e		lda #$9e			lda 	#_DRFNullString & $FF 		; if so, return reference to ""
.8a94	9d 08 06	sta $0608,x			sta 	NSMantissa0,X
.8a97	a9 8a		lda #$8a			lda 	#_DRFNullString >> 8
.8a99	9d 10 06	sta $0610,x			sta 	NSMantissa1,X
.8a9c					_DRFNotString
.8a9c	7a		ply				ply 								; restore Y and exit
.8a9d					_DRFExit:
.8a9d	60		rts				rts
.8a9e					_DRFNullString:
>8a9e	00						.byte 	0
.8a9f					_DRFFull:
.8a9f	a0 01		ldy #$01			ldy 	#1 							; get remaining 3 bytes.
.8aa1	b1 36		lda ($36),y			lda 	(zTemp0),y
.8aa3	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8aa6	c8		iny				iny
.8aa7	b1 36		lda ($36),y			lda 	(zTemp0),y
.8aa9	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8aac	c8		iny				iny
.8aad	b1 36		lda ($36),y			lda 	(zTemp0),y
.8aaf	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8ab2	9e 28 06	stz $0628,x			stz 	NSExponent,x 				; clear exponent.
.8ab5	bd 00 06	lda $0600,x			lda		NSStatus,x 					; see if type is integer
.8ab8	29 18		and #$18			and 	#NSBTypeMask  				; type information only
.8aba	9d 00 06	sta $0600,x			sta 	NSStatus,x 					; update it back.
.8abd	f0 06		beq $8ac5			beq 	_DRFNoExponent
.8abf	c8		iny				iny 								; if not, read the exponent as well.
.8ac0	b1 36		lda ($36),y			lda 	(zTemp0),y
.8ac2	9d 28 06	sta $0628,x			sta 	NSExponent,x
.8ac5					_DRFNoExponent:
.8ac5	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; is the most significant bit set ?
.8ac8	10 0d		bpl $8ad7			bpl 	_DRFExit2 					; if not, then exit.
.8aca	29 7f		and #$7f			and 	#$7F 						; clear that bit.
.8acc	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8acf	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; set the sign flag
.8ad2	09 80		ora #$80			ora 	#NSBIsNegative
.8ad4	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8ad7					_DRFExit2:
.8ad7	7a		ply				ply
.8ad8	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/number.asm

=1					ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2					ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3					ESTA_Decimal = 3 							; fractional part.
.8ad9					EncodeNumberStart:
.8ad9	38		sec				sec
.8ada	80 01		bra $8add			bra 	EncodeNumberContinue+1
.8adc					EncodeNumberContinue:
.8adc	18		clc				clc
.8add					EncodeNumber:
.8add	08		php				php 								; save reset.
.8ade	c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.8ae0	f0 12		beq $8af4			beq 	_ENIsOkay
.8ae2	c9 30		cmp #$30			cmp 	#"0"
.8ae4	90 04		bcc $8aea			bcc 	_ENBadNumber
.8ae6	c9 3a		cmp #$3a			cmp 	#"9"+1
.8ae8	90 0a		bcc $8af4			bcc 	_ENIsOkay
.8aea					_ENBadNumber:
.8aea	28		plp				plp 								; throw saved reset
.8aeb	ad 05 07	lda $0705			lda 	EncodeState 				; decimal mode, construct final number
.8aee	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.8af0	f0 7e		beq $8b70			beq 	_ENConstructFinal
.8af2					_ENFail:
.8af2	18		clc				clc 								; not allowed
.8af3	60		rts				rts
.8af4					_ENIsOkay:
.8af4	28		plp				plp 								; are we restarting
.8af5	90 15		bcc $8b0c			bcc 	_ENNoRestart
.8af7					_ENStartEncode:
.8af7	c9 2e		cmp #$2e			cmp 	#'.'						; first is DP
.8af9	f0 0c		beq $8b07			beq 	_ENFirstDP
.8afb	29 0f		and #$0f			and 	#15 						; put digit in mantissa
.8afd	20 d1 8f	jsr $8fd1			jsr 	NSMSetByte
.8b00	a9 01		lda #$01			lda 	#ESTA_Low
.8b02					_ENExitChange:
.8b02	8d 05 07	sta $0705			sta 	EncodeState 				; save new state
.8b05	38		sec				sec
.8b06	60		rts				rts
.8b07					_ENFirstDP:
.8b07	20 cf 8f	jsr $8fcf			jsr 	NSMSetZero 					; clear integer part
.8b0a	80 3f		bra $8b4b			bra 	_ESTASwitchFloat			; go straight to float and exi
.8b0c					_ENNoRestart:
.8b0c	48		pha				pha 								; save on stack.
.8b0d	ad 05 07	lda $0705			lda 	EncodeState 				; get current state
.8b10	c9 01		cmp #$01			cmp 	#ESTA_Low
.8b12	f0 09		beq $8b1d			beq  	_ESTALowState
.8b14	c9 02		cmp #$02			cmp 	#ESTA_High
.8b16	f0 29		beq $8b41			beq 	_ESTAHighState
.8b18	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.8b1a	f0 3b		beq $8b57			beq 	_ESTADecimalState
>8b1c	db						.byte 	$DB 						; causes a break in the emulator
.8b1d					_ESTALowState:
.8b1d	68		pla				pla 								; get value back
.8b1e	c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.8b20	f0 29		beq $8b4b			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.8b22	29 0f		and #$0f			and 	#15 						; make digit
.8b24	8d 06 07	sta $0706			sta 	DigitTemp 					; save it.
.8b27	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.8b2a	0a		asl a				asl 	a
.8b2b	0a		asl a				asl 	a
.8b2c	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.8b2f	0a		asl a				asl 	a
.8b30	6d 06 07	adc $0706			adc 	DigitTemp
.8b33	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8b36	c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.8b38	90 05		bcc $8b3f			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.8b3a	a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.8b3c	8d 05 07	sta $0705			sta 	EncodeState
.8b3f					_ESTANoSwitch:
.8b3f	38		sec				sec
.8b40	60		rts				rts
.8b41					_ESTAHighState:
.8b41	68		pla				pla 								; get value back
.8b42	c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.8b44	f0 05		beq $8b4b			beq 	_ESTASwitchFloat
.8b46	20 aa 8b	jsr $8baa			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.8b49	38		sec				sec
.8b4a	60		rts				rts
.8b4b					_ESTASwitchFloat:
.8b4b	9c 07 07	stz $0707			stz 	DecimalCount
.8b4e	e8		inx				inx 								; zero the decimal additive.
.8b4f	20 cf 8f	jsr $8fcf			jsr 	NSMSetZero
.8b52	ca		dex				dex
.8b53	a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.8b55	80 ab		bra $8b02			bra 	_ENExitChange
.8b57					_ESTADecimalState:
.8b57	68		pla				pla 								; digit.
.8b58	c9 2e		cmp #$2e			cmp 	#"." 						; fail on 2nd decimal point.
.8b5a	f0 96		beq $8af2			beq 	_ENFail
.8b5c	e8		inx				inx 								; put digit into fractional part of X+1
.8b5d	20 aa 8b	jsr $8baa			jsr 	ESTAShiftDigitIntoMantissa
.8b60	ca		dex				dex
.8b61	ee 07 07	inc $0707			inc 	DecimalCount 				; bump the count of decimals
.8b64	ad 07 07	lda $0707			lda 	DecimalCount
.8b67	c9 0b		cmp #$0b			cmp 	#11
.8b69	f0 02		beq $8b6d			beq 	_ESTADSFail
.8b6b	38		sec				sec
.8b6c	60		rts				rts
.8b6d					_ESTADSFail:
.8b6d	4c 4a 9a	jmp $9a4a			jmp 	RangeError
.8b70					_ENConstructFinal:
.8b70	ad 07 07	lda $0707			lda 	DecimalCount 				; get decimal count
.8b73	f0 33		beq $8ba8			beq 	_ENCFExit 					; no decimals
.8b75	5a		phy				phy
.8b76	0a		asl a				asl 	a 							; x 4 and CLC
.8b77	0a		asl a				asl 	a
.8b78	6d 07 07	adc $0707			adc 	DecimalCount
.8b7b	a8		tay				tay
.8b7c	b9 09 9a	lda $9a09,y			lda 	DecimalScalarTable-5,y 		; copy decimal scalar to X+2
.8b7f	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.8b82	b9 0a 9a	lda $9a0a,y			lda 	DecimalScalarTable-5+1,y
.8b85	9d 12 06	sta $0612,x			sta 	NSMantissa1+2,x
.8b88	b9 0b 9a	lda $9a0b,y			lda 	DecimalScalarTable-5+2,y
.8b8b	9d 1a 06	sta $061a,x			sta 	NSMantissa2+2,x
.8b8e	b9 0c 9a	lda $9a0c,y			lda 	DecimalScalarTable-5+3,y
.8b91	9d 22 06	sta $0622,x			sta 	NSMantissa3+2,x
.8b94	b9 0d 9a	lda $9a0d,y			lda 	DecimalScalarTable-5+4,y
.8b97	9d 2a 06	sta $062a,x			sta 	NSExponent+2,x
.8b9a	a9 08		lda #$08			lda 	#NSTFloat
.8b9c	9d 02 06	sta $0602,x			sta 	NSStatus+2,x
.8b9f	7a		ply				ply
.8ba0	e8		inx				inx 								; multiply decimal const by decimal scalar
.8ba1	20 a7 98	jsr $98a7			jsr 	FloatMultiply
.8ba4	ca		dex				dex
.8ba5	20 3c 97	jsr $973c			jsr 	FloatAdd 					; add to integer part.
.8ba8					_ENCFExit:
.8ba8	18		clc				clc 								; reject the digit.
.8ba9	60		rts				rts
.8baa					ESTAShiftDigitIntoMantissa:
.8baa	29 0f		and #$0f			and 	#15 						; save digit
.8bac	48		pha				pha
.8bad	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; push mantissa on stack
.8bb0	48		pha				pha
.8bb1	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.8bb4	48		pha				pha
.8bb5	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8bb8	48		pha				pha
.8bb9	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.8bbc	48		pha				pha
.8bbd	20 e4 8f	jsr $8fe4			jsr 	NSMShiftLeft 				; x 2
.8bc0	20 e4 8f	jsr $8fe4			jsr 	NSMShiftLeft 				; x 4
.8bc3	18		clc				clc 								; pop mantissa and add
.8bc4	68		pla				pla
.8bc5	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.8bc8	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8bcb	68		pla				pla
.8bcc	7d 10 06	adc $0610,x			adc 	NSMantissa1,x
.8bcf	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8bd2	68		pla				pla
.8bd3	7d 18 06	adc $0618,x			adc 	NSMantissa2,x
.8bd6	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8bd9	68		pla				pla
.8bda	7d 20 06	adc $0620,x			adc 	NSMantissa3,x
.8bdd	9d 20 06	sta $0620,x			sta 	NSMantissa3,x 				; x 5
.8be0	20 e4 8f	jsr $8fe4			jsr 	NSMShiftLeft 				; x 10
.8be3	68		pla				pla 								; add digit
.8be4	18		clc				clc
.8be5	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.8be8	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8beb	90 0d		bcc $8bfa			bcc 	_ESTASDExit
.8bed	fe 10 06	inc $0610,x			inc 	NSMantissa1,x
.8bf0	d0 08		bne $8bfa			bne 	_ESTASDExit
.8bf2	fe 18 06	inc $0618,x			inc 	NSMantissa2,x
.8bf5	d0 03		bne $8bfa			bne 	_ESTASDExit
.8bf7	fe 20 06	inc $0620,x			inc 	NSMantissa3,x
.8bfa					_ESTASDExit:
.8bfa	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/term.asm

.8bfb					EvaluateTerm:
.8bfb	b1 30		lda ($30),y			lda 	(codePtr),y
.8bfd	30 18		bmi $8c17			bmi 	_ETCheckUnary 				; unary function ? (text ones)
.8bff	c9 40		cmp #$40			cmp 	#$40 						; 40-7F => identifier reference
.8c01	b0 6f		bcs $8c72			bcs 	_ETVariable
.8c03	c9 30		cmp #$30			cmp 	#'0' 						; is it a number
.8c05	90 6e		bcc $8c75			bcc 	_ETPuncUnary 				; if not it might be a punctuation unary.
.8c07	c9 3a		cmp #$3a			cmp 	#'9'+1
.8c09	b0 6a		bcs $8c75			bcs 	_ETPuncUnary
.8c0b	20 d9 8a	jsr $8ad9			jsr 	EncodeNumberStart 			; can't fail as it's 0-9 !
.8c0e					_ETNumber:
.8c0e	c8		iny				iny 								; keep encoding until we have the numbers
.8c0f	b1 30		lda ($30),y			lda 	(codePtr),y
.8c11	20 dc 8a	jsr $8adc			jsr 	EncodeNumberContinue
.8c14	b0 f8		bcs $8c0e			bcs 	_ETNumber 					; go back if accepted.
.8c16	60		rts				rts
.8c17					_ETCheckUnary:
.8c17	c9 ff		cmp #$ff			cmp 	#KWC_STRING 				; string token
.8c19	f0 41		beq $8c5c			beq 	_ETString
.8c1b	c9 fe		cmp #$fe			cmp 	#KWC_HEXCONST 				; hex constant.
.8c1d	f0 12		beq $8c31			beq 	_ETHexConstant
.8c1f	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; check it actually is a unary function
.8c21	90 0b		bcc $8c2e			bcc 	_ETSyntaxError
.8c23	c9 96		cmp #$96			cmp 	#KWC_LAST_UNARY+1
.8c25	b0 07		bcs $8c2e			bcs 	_ETSyntaxError
.8c27	da		phx				phx 								; push X on the stack
.8c28	0a		asl a				asl 	a 							; put vector x 2 into X
.8c29	aa		tax				tax
.8c2a	c8		iny				iny 								; consume unary function token
.8c2b	7c 94 80	jmp ($8094,x)			jmp 	(VectorSet0,x) 				; and do it.
.8c2e					_ETSyntaxError:
.8c2e	4c 45 9a	jmp $9a45			jmp 	SyntaxError
.8c31					_ETHexConstant:
.8c31	c8		iny				iny 								; skip #
.8c32	c8		iny				iny 								; skip count
.8c33	20 cf 8f	jsr $8fcf			jsr 	NSMSetZero 					; clear result
.8c36					_ETHLoop:
.8c36	b1 30		lda ($30),y			lda 	(codePtr),y
.8c38	c8		iny				iny 								; and consume
.8c39	c9 00		cmp #$00			cmp 	#0 							; exit if zero
.8c3b	f0 1e		beq $8c5b			beq 	_ETHExit
.8c3d	48		pha				pha 								; save on stack.
.8c3e	20 e4 8f	jsr $8fe4			jsr 	NSMShiftLeft 				; x 2
.8c41	20 e4 8f	jsr $8fe4			jsr 	NSMShiftLeft 				; x 4
.8c44	20 e4 8f	jsr $8fe4			jsr 	NSMShiftLeft 				; x 8
.8c47	20 e4 8f	jsr $8fe4			jsr 	NSMShiftLeft 				; x 16
.8c4a	68		pla				pla 								; ASCII
.8c4b	c9 41		cmp #$41			cmp 	#'A'
.8c4d	90 02		bcc $8c51			bcc 	_ETHNotChar
.8c4f	e9 07		sbc #$07			sbc 	#7
.8c51					_ETHNotChar:
.8c51	29 0f		and #$0f			and 	#15 						; digit now
.8c53	1d 08 06	ora $0608,x			ora 	NSMantissa0,x 				; put in LS Nibble
.8c56	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8c59	80 db		bra $8c36			bra 	_ETHLoop 					; go round.
.8c5b					_ETHExit:
.8c5b	60		rts				rts
.8c5c					_ETString:
.8c5c	c8		iny				iny 								; look at length
.8c5d	b1 30		lda ($30),y			lda 	(codePtr),y
.8c5f	48		pha				pha
.8c60	c8		iny				iny 								; first character
.8c61	20 20 95	jsr $9520			jsr 	MemoryInline 				; put address of string at (codePtr),y on stack
.8c64	68		pla				pla 								; restore count and save
.8c65	85 36		sta $36				sta 	zTemp0
.8c67	98		tya				tya 								; add length to Y to skip it.
.8c68	18		clc				clc
.8c69	65 36		adc $36				adc 	zTemp0
.8c6b	a8		tay				tay
.8c6c	a9 10		lda #$10			lda 	#NSTString 					; mark as string
.8c6e	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8c71	60		rts				rts
.8c72					_ETVariable:
.8c72	4c cc 8c	jmp $8ccc			jmp 	VariableHandler
.8c75					_ETPuncUnary:
.8c75	c8		iny				iny 								; consume the unary character
.8c76	c9 2d		cmp #$2d			cmp 	#KWD_MINUS 					; unary minus
.8c78	f0 2d		beq $8ca7			beq 	_ETUnaryNegate
.8c7a	c9 10		cmp #$10			cmp 	#KWD_AT 					; @ reference -> constant
.8c7c	f0 39		beq $8cb7			beq 	_ETDereference
.8c7e	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; parenthesis
.8c80	f0 43		beq $8cc5			beq 	_ETParenthesis
.8c82	64 36		stz $36				stz 	zTemp0 						; zTemp0 is the indirection level.
.8c84	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; byte indirection (0) ?
.8c86	f0 06		beq $8c8e			beq 	_ETIndirection
.8c88	e6 36		inc $36				inc 	zTemp0
.8c8a	c9 21		cmp #$21			cmp 	#KWD_PLING					; word indirection (1) \
.8c8c	d0 a0		bne $8c2e			bne 	_ETSyntaxError
.8c8e					_ETIndirection:
.8c8e	a5 36		lda $36				lda 	zTemp0 						; push indirection amount (0-1) => (1-2) on the stack
.8c90	1a		inc a				inc 	a
.8c91	48		pha				pha
.8c92	20 fb 8b	jsr $8bfb			jsr 	EvaluateTerm				; evaluate the term
.8c95	20 3f 8a	jsr $8a3f			jsr 	Dereference 				; dereference it.
.8c98	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a +ve integer.
.8c9b	d0 07		bne $8ca4			bne 	_ETTypeMismatch
.8c9d	68		pla				pla 								; indirection 1-2
.8c9e	09 20		ora #$20			ora 	#NSBIsReference 			; make it a reference.
.8ca0	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8ca3	60		rts				rts
.8ca4					_ETTypeMismatch:
.8ca4	4c 4f 9a	jmp $9a4f			jmp 	TypeError
.8ca7					_ETUnaryNegate:
.8ca7	20 fb 8b	jsr $8bfb			jsr 	EvaluateTerm				; evaluate the term
.8caa	20 3f 8a	jsr $8a3f			jsr 	Dereference 				; dereference it.
.8cad	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a number
.8cb0	29 10		and #$10			and 	#NSTString
.8cb2	d0 f0		bne $8ca4			bne 	_ETTypeMismatch
.8cb4	4c 7b 8f	jmp $8f7b			jmp 	NSMNegate  					; just toggles the sign bit.
.8cb7					_ETDereference:
.8cb7	20 fb 8b	jsr $8bfb			jsr 	EvaluateTerm				; evaluate the term
.8cba	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a reference
.8cbd	29 20		and #$20			and 	#NSBIsReference
.8cbf	f0 e3		beq $8ca4			beq 	_ETTypeMismatch
.8cc1	9e 00 06	stz $0600,x			stz 	NSStatus,x 					; make it an integer address
.8cc4	60		rts				rts
.8cc5					_ETParenthesis:
.8cc5	20 2a 89	jsr $892a			jsr 	EvaluateExpression 			; evaluate here, from lowest precedence
.8cc8	20 75 95	jsr $9575			jsr 	CheckRightBracket 			; check for )
.8ccb	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/variable.asm

.8ccc					VariableHandler:
.8ccc	b1 30		lda ($30),y			lda 	(codePtr),y
.8cce	18		clc				clc
.8ccf	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8cd1	85 37		sta $37				sta 	zTemp0+1
.8cd3	c8		iny				iny
.8cd4	b1 30		lda ($30),y			lda 	(codePtr),y
.8cd6	85 36		sta $36				sta 	zTemp0
.8cd8	c8		iny				iny
.8cd9	18		clc				clc									; copy variable address+3 to mantissa
.8cda	69 03		adc #$03			adc 	#3
.8cdc	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8cdf	a5 37		lda $37				lda 	zTemp0+1
.8ce1	69 00		adc #$00			adc 	#0
.8ce3	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8ce6	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.8ce9	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.8cec	9e 28 06	stz $0628,x			stz 	NSExponent,x
.8cef	5a		phy				phy
.8cf0	a0 02		ldy #$02			ldy 	#2 							; read type
.8cf2	b1 36		lda ($36),y			lda 	(zTemp0),y
.8cf4	7a		ply				ply
.8cf5	29 1c		and #$1c			and 	#NSBTypeMask+NSBIsArray 	; get type information
.8cf7	09 20		ora #$20			ora 	#NSBIsReference 			; make a reference.
.8cf9	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8cfc	29 04		and #$04			and 	#NSBIsArray
.8cfe	d0 01		bne $8d01			bne 	_VHArray
.8d00	60		rts				rts
.8d01					_VHArray:
>8d01	db						.byte 	$DB 						; causes a break in the emulator
.8d02	80 fd		bra $8d01			bra 	_VHArray

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/abs.asm

.992d					AbsUnary:
.992d	fa		plx				plx 								; restore stack pos
.992e	20 23 8f	jsr $8f23			jsr 	EvaluateNumber 				; get a float or int
.9931	20 75 95	jsr $9575			jsr 	CheckRightBracket
.9934	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; clear the sign bit
.9937	29 7f		and #$7f			and 	#$7F
.9939	9d 00 06	sta $0600,x			sta 	NSStatus,x
.993c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/alloc.asm

.8d04					AllocUnary:
.8d04	fa		plx				plx 								; restore stack pos
.8d05	20 5b 8f	jsr $8f5b			jsr 	Evaluate16BitInteger		; get bytes required.
.8d08	20 75 95	jsr $9575			jsr 	CheckRightBracket
.8d0b	da		phx				phx 								; save X/Y
.8d0c	5a		phy				phy
.8d0d	8a		txa				txa 								; copy X into Y
.8d0e	a8		tay				tay
.8d0f	b9 10 06	lda $0610,y			lda		NSMantissa1,y 				; get size
.8d12	aa		tax				tax
.8d13	b9 08 06	lda $0608,y			lda 	NSMantissa0,y
.8d16	20 23 8d	jsr $8d23			jsr 	AllocateXABytes 			; allocate memory
.8d19	99 08 06	sta $0608,y			sta 	NSMantissa0,y 				; write address out.
.8d1c	8a		txa				txa
.8d1d	99 10 06	sta $0610,y			sta 	NSMantissa1,y
.8d20	7a		ply				ply
.8d21	fa		plx				plx
.8d22	60		rts				rts
.8d23					AllocateXABytes:
.8d23	5a		phy				phy
.8d24	ac 0c 07	ldy $070c			ldy 	lowMemPtr 					; push current address on stack
.8d27	5a		phy				phy
.8d28	ac 0d 07	ldy $070d			ldy 	lowMemPtr+1
.8d2b	5a		phy				phy
.8d2c	18		clc				clc
.8d2d	6d 0c 07	adc $070c			adc 	lowMemPtr
.8d30	8d 0c 07	sta $070c			sta 	lowMemPtr
.8d33	8a		txa				txa
.8d34	6d 0d 07	adc $070d			adc 	lowMemPtr+1
.8d37	8d 0d 07	sta $070d			sta 	lowMemPtr+1
.8d3a	fa		plx				plx
.8d3b	68		pla				pla
.8d3c	7a		ply				ply
.8d3d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/asc.asm

.993d					AscUnary:
.993d	fa		plx				plx 								; restore stack pos
.993e	20 2e 8f	jsr $8f2e			jsr 	EvaluateString 				; get a string
.9941	b2 36		lda ($36)			lda 	(zTemp0)					; get/return firs character
.9943	20 d1 8f	jsr $8fd1			jsr 	NSMSetByte
.9946	20 75 95	jsr $9575			jsr 	CheckRightBracket
.9949	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/frac.asm

.994a					FracUnary:
.994a	fa		plx				plx 								; restore stack pos
.994b	20 23 8f	jsr $8f23			jsr 	EvaluateNumber 				; get a float or int
.994e	20 75 95	jsr $9575			jsr 	CheckRightBracket
.9951	bd 00 06	lda $0600,x			lda 	NSStatus,x
.9954	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.9956	f0 04		beq $995c			beq 	_IUZero
.9958	20 1a 98	jsr $981a			jsr 	FloatFractionalPart
.995b	60		rts				rts
.995c					_IUZero:
.995c	20 cf 8f	jsr $8fcf			jsr 	NSMSetZero
.995f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/int.asm

.9960					IntUnary:
.9960	fa		plx				plx 								; restore stack pos
.9961	20 23 8f	jsr $8f23			jsr 	EvaluateNumber 				; get a float or int
.9964	20 75 95	jsr $9575			jsr 	CheckRightBracket
.9967	bd 00 06	lda $0600,x			lda 	NSStatus,x
.996a	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.996c	f0 03		beq $9971			beq 	_IUExit
.996e	20 7d 98	jsr $987d			jsr 	FloatIntegerPart
.9971					_IUExit:
.9971	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/len.asm

.9972					LenUnary:
.9972	fa		plx				plx 								; restore stack pos
.9973	20 2e 8f	jsr $8f2e			jsr 	EvaluateString 				; get a string
.9976	5a		phy				phy
.9977	a0 00		ldy #$00			ldy 	#0 							; find length
.9979					_LenFind:
.9979	b1 36		lda ($36),y			lda 	(zTemp0),y
.997b	f0 06		beq $9983			beq 	_LenExit
.997d	c8		iny				iny
.997e	d0 f9		bne $9979			bne 	_LenFind
.9980	4c 4a 9a	jmp $9a4a			jmp 	RangeError 					; string > 255
.9983					_LenExit:
.9983	98		tya				tya
.9984	20 d1 8f	jsr $8fd1			jsr 	NSMSetByte
.9987	7a		ply				ply
.9988	20 75 95	jsr $9575			jsr 	CheckRightBracket
.998b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/not.asm

.8d3e					Unary_Not:
.8d3e	fa		plx				plx
.8d3f	20 46 8f	jsr $8f46			jsr 	EvaluateInteger 			; get integer
.8d42	20 75 95	jsr $9575			jsr 	CheckRightBracket
.8d45	20 ff 8f	jsr $8fff			jsr 	NSMIsZero 					; zero mantissa ?
.8d48	f0 04		beq $8d4e			beq 	_NotZero
.8d4a	20 cf 8f	jsr $8fcf			jsr 	NSMSetZero
.8d4d	60		rts				rts
.8d4e					_NotZero:
.8d4e	4c 8e 85	jmp $858e			jmp 	ReturnTrue
.8d51					_UNBad:
.8d51	4c 54 9a	jmp $9a54			jmp 	ArgumentError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/rnd.asm

.8d54					Unary_Rnd:
.8d54	20 23 8f	jsr $8f23			jsr 	EvaluateNumber 				; number to use.
.8d57	20 75 95	jsr $9575			jsr 	CheckRightBracket 			; closing bracket
.8d5a	20 83 8d	jsr $8d83			jsr 	Random32Bit 				; generate a number.
.8d5d	ad 08 07	lda $0708			lda 	RandomSeed+0
.8d60	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8d63	ad 09 07	lda $0709			lda 	RandomSeed+1
.8d66	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8d69	ad 0a 07	lda $070a			lda 	RandomSeed+2
.8d6c	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8d6f	ad 0b 07	lda $070b			lda 	RandomSeed+3
.8d72	29 7f		and #$7f			and 	#$7F 						; make legal mantissa
.8d74	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8d77	a9 e1		lda #$e1			lda 	#-31 						; force into 0-1 range
.8d79	8d 28 06	sta $0628			sta 	NSExponent
.8d7c	a9 08		lda #$08			lda 	#NSTFloat
.8d7e	8d 00 06	sta $0600			sta 	NSStatus 					; positive.
>8d81	db						.byte 	$DB 						; causes a break in the emulator
.8d82	60		rts				rts
.8d83					Random32Bit:
.8d83	5a		phy				phy
.8d84	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.8d86	ad 08 07	lda $0708			lda 	RandomSeed+0 				; check the seed isn't zero
.8d89	d0 03		bne $8d8e			bne 	_Random1
.8d8b	a8		tay				tay 								; if so do it 256 times
.8d8c	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.8d8e					_Random1:
.8d8e	0a		asl a				asl 	a 							; LSFR RNG
.8d8f	2e 09 07	rol $0709			rol 	RandomSeed+1
.8d92	2e 0a 07	rol $070a			rol 	RandomSeed+2
.8d95	2e 0b 07	rol $070b			rol 	RandomSeed+3
.8d98	90 02		bcc $8d9c			bcc 	_Random2
.8d9a	49 c5		eor #$c5			eor 	#$C5
.8d9c					_Random2:
.8d9c	88		dey				dey
.8d9d	d0 ef		bne $8d8e			bne 	_Random1
.8d9f	7a		ply				ply
.8da0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/sgn.asm

.998c					SgnUnary:
.998c	fa		plx				plx 								; restore stack pos
.998d	20 23 8f	jsr $8f23			jsr 	EvaluateNumber 				; get a float or int
.9990	20 75 95	jsr $9575			jsr 	CheckRightBracket
.9993	20 ff 8f	jsr $8fff			jsr 	NSMIsZero 					; if zero
.9996	f0 10		beq $99a8			beq 	_SGZero  					; return Int Zero
.9998	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get status w/sign
.999b	48		pha				pha
.999c	a9 01		lda #$01			lda 	#1 							; set to 1
.999e	20 d1 8f	jsr $8fd1			jsr 	NSMSetByte
.99a1	68		pla				pla
.99a2	29 80		and #$80			and		#$80 						; copy the sign byte out
.99a4	9d 00 06	sta $0600,x			sta 	NSStatus,x
.99a7	60		rts				rts
.99a8	20 cf 8f	jsr $8fcf	_SGZero:jsr 	NSMSetZero
.99ab	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/val.asm

.99ac					ValUnary:
.99ac	fa		plx				plx 								; restore stack pos
.99ad	20 c2 99	jsr $99c2			jsr 	ValMainCode 				; do the main val() code
.99b0	b0 01		bcs $99b3			bcs 	_VUError 					; couldn't convert
.99b2	60		rts				rts
.99b3					_VUError:
.99b3	4c 4f 9a	jmp $9a4f			jmp 	TypeError
.99b6					IsValUnary:
.99b6	fa		plx				plx 								; restore stack pos
.99b7	20 c2 99	jsr $99c2			jsr 	ValMainCode 				; do the main val() code
.99ba	b0 03		bcs $99bf			bcs 	_VUBad
.99bc	4c 8e 85	jmp $858e			jmp 	ReturnTrue
.99bf					_VUBad:
.99bf	4c 9a 85	jmp $859a			jmp 	ReturnFalse
.99c2					ValMainCode:
.99c2	20 2e 8f	jsr $8f2e			jsr 	EvaluateString 				; get a string
.99c5	20 75 95	jsr $9575			jsr 	CheckRightBracket 			; check right bracket present
.99c8	5a		phy				phy
.99c9	b2 36		lda ($36)			lda 	(zTemp0) 					; check not empty string
.99cb	f0 17		beq $99e4			beq 	_VMCFail2
.99cd	a0 ff		ldy #$ff			ldy 	#$FF 						; start position
.99cf	48		pha				pha 								; save first character
.99d0	c9 2d		cmp #$2d			cmp 	#"-"		 				; is it -
.99d2	d0 01		bne $99d5			bne 	_VMCStart
.99d4	c8		iny				iny 								; skip over -
.99d5					_VMCStart:
.99d5	38		sec				sec 								; initialise first time round.
.99d6					_VMCNext:
.99d6	c8		iny				iny 								; pre-increment
.99d7	b1 36		lda ($36),y			lda 	(zTemp0),y 					; next character
.99d9	f0 0c		beq $99e7			beq 	_VMCSuccess 				; successful.
.99db	20 dd 8a	jsr $8add			jsr 	EncodeNumber 				; send it to the number-builder
.99de	90 03		bcc $99e3			bcc 	_VMCFail 					; if failed, give up.
.99e0	18		clc				clc 								; next time round, countinue
.99e1	80 f3		bra $99d6			bra 	_VMCNext
.99e3					_VMCFail:
.99e3	68		pla				pla
.99e4					_VMCFail2:
.99e4	7a		ply				ply
.99e5	38		sec				sec
.99e6	60		rts				rts
.99e7					_VMCSuccess:
.99e7	a9 00		lda #$00			lda 	#0 							; construct final
.99e9	20 dd 8a	jsr $8add			jsr 	EncodeNumber
.99ec	68		pla				pla
.99ed	c9 2d		cmp #$2d			cmp 	#"-"
.99ef	d0 03		bne $99f4			bne 	_VMCNotNegative
.99f1	20 7b 8f	jsr $8f7b			jsr		NSMNegate
.99f4					_VMCNotNegative:
.99f4	7a		ply				ply
.99f5	18		clc				clc
.99f6	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/chr.asm

.8da1					ChrUnary:
.8da1	fa		plx				plx 								; restore stack pos
.8da2	20 67 8f	jsr $8f67			jsr 	Evaluate8BitInteger			; get value
.8da5	48		pha				pha
.8da6	20 75 95	jsr $9575			jsr 	CheckRightBracket
.8da9	a9 01		lda #$01			lda 	#1 							; allocate space for one char
.8dab	20 0e 9c	jsr $9c0e			jsr 	StringTempAllocate
.8dae	68		pla				pla 								; write number to it
.8daf	20 4c 9c	jsr $9c4c			jsr 	StringTempWrite
.8db2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/spc.asm

.8db3					SpcUnary:
.8db3	fa		plx				plx 								; restore stack pos
.8db4	20 67 8f	jsr $8f67			jsr 	Evaluate8BitInteger			; get value
.8db7	5a		phy				phy
.8db8	48		pha				pha 								; save count
.8db9	20 0e 9c	jsr $9c0e			jsr 	StringTempAllocate
.8dbc	7a		ply				ply 								; to do count in Y
.8dbd					_SpcLoop:
.8dbd	c0 00		cpy #$00			cpy 	#0
.8dbf	f0 08		beq $8dc9			beq 	_SpcExit
.8dc1	a9 20		lda #$20			lda 	#32
.8dc3	20 4c 9c	jsr $9c4c			jsr 	StringTempWrite
.8dc6	88		dey				dey
.8dc7	80 f4		bra $8dbd			bra 	_SPCLoop
.8dc9					_SpcExit:
.8dc9	7a		ply				ply
.8dca	20 75 95	jsr $9575			jsr 	CheckRightBracket
.8dcd	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/str.asm

.8dce					Unary_Str:
.8dce	fa		plx				plx
.8dcf	20 23 8f	jsr $8f23			jsr 	EvaluateNumber  			; get number
.8dd2	20 75 95	jsr $9575			jsr 	CheckRightBracket 			; closing bracket
.8dd5	a9 05		lda #$05			lda 	#5 							; maximum decimals, from Basic816
.8dd7	20 f0 8d	jsr $8df0			jsr 	ConvertNumberToString 		; do the conversion.
.8dda	a9 21		lda #$21			lda		#33 						; create buffer
.8ddc	20 0e 9c	jsr $9c0e			jsr 	StringTempAllocate 			; allocate memory
.8ddf	da		phx				phx
.8de0	a2 00		ldx #$00			ldx 	#0
.8de2					_USCopy:
.8de2	bd 88 08	lda $0888,x			lda 	DecimalBuffer,x
.8de5	20 4c 9c	jsr $9c4c			jsr 	StringTempWrite
.8de8	e8		inx				inx
.8de9	bd 88 08	lda $0888,x			lda 	DecimalBuffer,x
.8dec	d0 f4		bne $8de2			bne 	_USCopy
.8dee	fa		plx				plx
.8def	60		rts				rts
.8df0					ConvertNumberToString:
.8df0	5a		phy				phy 								; save code position
.8df1	8d 13 07	sta $0713			sta 	DecimalPlaces	 			; save number of DPs.
.8df4	9c 14 07	stz $0714			stz 	dbOffset 					; offset into decimal buffer = start.
.8df7	bd 00 06	lda $0600,x			lda 	NSStatus,x  				; is it -ve.
.8dfa	10 0a		bpl $8e06			bpl 	_CNTSNotNegative
.8dfc	29 7f		and #$7f			and 	#$7F 						; make +ve
.8dfe	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8e01	a9 2d		lda #$2d			lda 	#"-"
.8e03	20 6c 8e	jsr $8e6c			jsr 	WriteDecimalBuffer
.8e06					_CNTSNotNegative:
.8e06	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if decimal
.8e09	f0 15		beq $8e20			beq 	_CNTSNotFloat
.8e0b	e8		inx				inx 								; round up
.8e0c	a9 01		lda #$01			lda 	#1
.8e0e	20 d1 8f	jsr $8fd1			jsr 	NSMSetByte
.8e11	ca		dex				dex
.8e12	bd 28 06	lda $0628,x			lda		NSExponent,x
.8e15	9d 29 06	sta $0629,x			sta 	NSExponent+1,x
.8e18	a9 08		lda #$08			lda 	#NSTFloat
.8e1a	9d 01 06	sta $0601,x			sta 	NSStatus+1,x
.8e1d	20 3c 97	jsr $973c			jsr 	FloatAdd
.8e20					_CNTSNotFloat:
.8e20	20 4e 8e	jsr $8e4e			jsr 	MakePlusTwoString
.8e23	20 1a 98	jsr $981a			jsr 	FloatFractionalPart 		; get the fractional part
.8e26	20 de 98	jsr $98de			jsr 	NSNormalise					; normalise , exit if zero
.8e29	f0 21		beq $8e4c			beq 	_CNTSExit
.8e2b	a9 2e		lda #$2e			lda 	#"."
.8e2d	20 6c 8e	jsr $8e6c			jsr 	WriteDecimalBuffer 			; write decimal place
.8e30					_CNTSDecimal:
.8e30	ce 13 07	dec $0713			dec 	DecimalPlaces 				; done all the decimals
.8e33	30 17		bmi $8e4c			bmi 	_CNTSExit
.8e35	e8		inx				inx 								; x 10.0
.8e36	a9 0a		lda #$0a			lda 	#10
.8e38	20 d1 8f	jsr $8fd1			jsr 	NSMSetByte
.8e3b	a9 08		lda #$08			lda 	#NSTFloat
.8e3d	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8e40	ca		dex				dex
.8e41	20 a7 98	jsr $98a7			jsr 	FloatMultiply
.8e44	20 4e 8e	jsr $8e4e			jsr 	MakePlusTwoString
.8e47	20 1a 98	jsr $981a			jsr 	FloatFractionalPart 		; get the fractional part
.8e4a	80 e4		bra $8e30			bra 	_CNTSDecimal 				; keep going.
.8e4c					_CNTSExit:
.8e4c	7a		ply				ply
.8e4d	60		rts				rts
.8e4e					MakePlusTwoString:
.8e4e	da		phx				phx
.8e4f	20 a6 8f	jsr $8fa6			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.8e52	e8		inx				inx 								; access it
.8e53	e8		inx				inx
.8e54	20 7d 98	jsr $987d			jsr 	FloatIntegerPart 			; make it an integer
.8e57	a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.8e59	20 e6 96	jsr $96e6			jsr 	ConvertInt32
.8e5c	a2 00		ldx #$00			ldx	 	#0
.8e5e					_MPTSCopy:
.8e5e	bd 66 08	lda $0866,x			lda 	NumberBuffer,x
.8e61	20 6c 8e	jsr $8e6c			jsr 	WriteDecimalBuffer
.8e64	e8		inx				inx
.8e65	bd 66 08	lda $0866,x			lda 	NumberBuffer,x
.8e68	d0 f4		bne $8e5e			bne 	_MPTSCopy
.8e6a	fa		plx				plx
.8e6b	60		rts				rts
.8e6c					WriteDecimalBuffer:
.8e6c	da		phx				phx
.8e6d	ae 14 07	ldx $0714			ldx 	dbOffset
.8e70	9d 88 08	sta $0888,x			sta 	DecimalBuffer,x
.8e73	9e 89 08	stz $0889,x			stz 	DecimalBuffer+1,x
.8e76	ee 14 07	inc $0714			inc 	dbOffset
.8e79	fa		plx				plx
.8e7a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/substring.asm

.8e7b					Unary_Left:
.8e7b	fa		plx				plx
.8e7c	18		clc				clc 								; only one parameter
.8e7d	20 f2 8e	jsr $8ef2			jsr 	SubstringInitial 			; set up.
.8e80	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; Param #1 is the length
.8e83	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.8e86	9e 09 06	stz $0609,x			stz 	NSMantissa0+1,x 			; Start is zero.
.8e89	80 2c		bra $8eb7			bra 	SubstringMain
.8e8b					Unary_Right:
.8e8b	fa		plx				plx
.8e8c	18		clc				clc 								; only one parameter
.8e8d	20 f2 8e	jsr $8ef2			jsr 	SubstringInitial 			; set up.
.8e90	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; length => param 2
.8e93	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.8e96	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; total length
.8e99	fd 09 06	sbc $0609,x			sbc 	NSMantissa0+1,x 			; length - required.
.8e9c	b0 02		bcs $8ea0			bcs 	_URNotUnderflow
.8e9e	a9 00		lda #$00			lda 	#0 							; start from the beginning, as something like right$("AB",3)
.8ea0					_URNotUnderFlow:
.8ea0	9d 09 06	sta $0609,x			sta 	NSMantissa0+1,x 			; this is the start position
.8ea3	80 12		bra $8eb7			bra 	SubStringMain
.8ea5					Unary_Mid:
.8ea5	fa		plx				plx
.8ea6	38		sec				sec 								; two parameters
.8ea7	20 f2 8e	jsr $8ef2			jsr 	SubstringInitial 			; set up.
.8eaa	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; first parameter is zero ?
.8ead	f0 05		beq $8eb4			beq 	_UMError
.8eaf	de 09 06	dec $0609,x			dec 	NSMantissa0+1,x				; reduce initial offset by 1 as MID$(a$,1..) is actually the first character
.8eb2	80 03		bra $8eb7			bra 	SubStringMain
.8eb4					_UMError:
.8eb4	4c 54 9a	jmp $9a54			jmp 	ArgumentError
.8eb7					SubStringMain:
.8eb7	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; is the initial offset >= the length
.8eba	dd 28 06	cmp $0628,x			cmp 	NSExponent,x
.8ebd	b0 2d		bcs $8eec			bcs 	_SSMNull 					; if so, return an empty string.
.8ebf	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; if copy count is zero
.8ec2	f0 28		beq $8eec			beq 	_SSMNull 					; return empty string.
.8ec4	18		clc				clc 								; add the offset +1 to the address and
.8ec5	bd 08 06	lda $0608,x			lda	 	NSMantissa0,x 				; put in zTemp
.8ec8	7d 09 06	adc $0609,x			adc 	NSMantissa0+1,x
.8ecb	85 36		sta $36				sta 	zTemp0
.8ecd	bd 10 06	lda $0610,x			lda	 	NSMantissa1,x
.8ed0	69 00		adc #$00			adc 	#0
.8ed2	85 37		sta $37				sta 	zTemp0+1
.8ed4					_SSMNoCarry:
.8ed4	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; characters required.
.8ed7	20 0e 9c	jsr $9c0e			jsr 	StringTempAllocate 			; allocate that many characters
.8eda	5a		phy				phy 								; save Y
.8edb	a0 00		ldy #$00			ldy 	#0 							; start copying in.
.8edd					_SSMCopy:
.8edd	b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next character
.8edf	f0 09		beq $8eea			beq 	_SSMEString 				; no more to copy
.8ee1	20 4c 9c	jsr $9c4c			jsr 	StringTempWrite 			; and write it out.
.8ee4	c8		iny				iny
.8ee5	de 0a 06	dec $060a,x			dec 	NSMantissa0+2,x
.8ee8	d0 f3		bne $8edd			bne 	_SSMCopy
.8eea					_SSMEString:
.8eea	7a		ply				ply
.8eeb					_SSMExit:
.8eeb	60		rts				rts
.8eec					_SSMNull:
.8eec	a9 00		lda #$00			lda 	#0
.8eee	20 0e 9c	jsr $9c0e			jsr 	StringTempAllocate
.8ef1	60		rts				rts
.8ef2					SubstringInitial:
.8ef2	da		phx				phx 								; save initial stack position
.8ef3	08		php				php 								; save carry on stack indicating 2 parameters
.8ef4	20 2e 8f	jsr $8f2e			jsr 	EvaluateString 				; get a string
.8ef7	5a		phy				phy 								; calculate length to exponent.
.8ef8	a0 ff		ldy #$ff			ldy 	#$FF
.8efa					_SIFindLength:
.8efa	c8		iny				iny
.8efb	b1 36		lda ($36),y			lda 	(zTemp0),y
.8efd	d0 fb		bne $8efa			bne 	_SIFindLength
.8eff	98		tya				tya
.8f00	9d 28 06	sta $0628,x			sta 	NSExponent,x
.8f03	7a		ply				ply
.8f04	e8		inx				inx
.8f05	20 7d 95	jsr $957d			jsr 	CheckComma 					; comma next
.8f08	20 67 8f	jsr $8f67			jsr 	Evaluate8BitInteger 		; get next parameter
.8f0b	28		plp				plp 								; is it the last parameter ?
.8f0c	90 07		bcc $8f15			bcc 	_SSIExit 					; if so, exit.
.8f0e	e8		inx				inx
.8f0f	20 7d 95	jsr $957d			jsr 	CheckComma 					; comma next
.8f12	20 67 8f	jsr $8f67			jsr 	Evaluate8BitInteger 		; get last parameter
.8f15					_SSIExit:
.8f15	fa		plx				plx
.8f16	20 75 95	jsr $9575			jsr 	CheckRightBracket 			; check closing bracket
.8f19	60		rts				rts 								; exit

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/exprhelper.asm

.8f1a					EvaluateValue:
.8f1a	48		pha				pha
.8f1b	20 2a 89	jsr $892a			jsr		EvaluateExpression 			; expression
.8f1e	20 3f 8a	jsr $8a3f			jsr 	Dereference					; derefernce it
.8f21	68		pla				pla
.8f22	60		rts				rts
.8f23					EvaluateNumber:
.8f23	20 1a 8f	jsr $8f1a			jsr 	EvaluateValue 				; get a value
.8f26	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if string.
.8f29	29 10		and #$10			and 	#NSBIsString
.8f2b	d0 16		bne $8f43			bne 	HelperTypeError
.8f2d	60		rts				rts
.8f2e					EvaluateString:
.8f2e	20 1a 8f	jsr $8f1a			jsr 	EvaluateValue 				; get a value
.8f31	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if string.
.8f34	29 10		and #$10			and 	#NSBIsString
.8f36	f0 0b		beq $8f43			beq 	HelperTypeError
.8f38					CopyAddressToTemp0:
.8f38	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy address -> zTemp0
.8f3b	85 36		sta $36				sta 	zTemp0
.8f3d	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8f40	85 37		sta $37				sta 	zTemp0+1
.8f42	60		rts				rts
.8f43					HelperTypeError:
.8f43	4c 4f 9a	jmp $9a4f			jmp 	TypeError
.8f46					EvaluateInteger:
.8f46	20 23 8f	jsr $8f23			jsr 	EvaluateNumber
.8f49	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check exponent is zero
.8f4c	d0 0a		bne $8f58			bne 	HelperValueError 			; if not, it's a float.
.8f4e	60		rts				rts
.8f4f					EvaluateUnsignedInteger:
.8f4f	20 46 8f	jsr $8f46			jsr 	EvaluateInteger 			; check integer is +ve
.8f52	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8f55	30 01		bmi $8f58			bmi 	HelperValueError
.8f57	60		rts				rts
.8f58					HelperValueError:
.8f58	4c 54 9a	jmp $9a54			jmp 	ArgumentError
.8f5b					Evaluate16BitInteger:
.8f5b	20 4f 8f	jsr $8f4f			jsr	 	EvaluateUnsignedInteger		; get integer
.8f5e	bd 20 06	lda $0620,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.8f61	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.8f64	d0 f2		bne $8f58			bne 	HelperValueError
.8f66	60		rts				rts
.8f67					Evaluate8BitInteger:
.8f67	20 4f 8f	jsr $8f4f			jsr	 	EvaluateUnsignedInteger 	; get an integer
.8f6a	d0 ec		bne $8f58			bne 	HelperValueError
.8f6c	bd 20 06	lda $0620,x			lda 	NSMantissa3,x	 			; bytes 1, 2 & 3 must be zero
.8f6f	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.8f72	1d 10 06	ora $0610,x			ora 	NSMantissa1,x
.8f75	d0 e1		bne $8f58			bne 	HelperValueError
.8f77	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.8f7a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/mult8x8.asm

.99f7					Multiply8x8:
.99f7	4a		lsr a		  		lsr 	a  							; prime the carry bit for the loop
.99f8	85 36		sta $36			  	sta 	zTemp0
.99fa	86 37		stx $37				stx 	zTemp0+1
.99fc	a9 00		lda #$00			lda 	#0
.99fe	a2 08		ldx #$08			ldx 	#8
.9a00					_M88Loop:
.9a00	90 03		bcc $9a05			bcc 	_M88NoAdd
.9a02	18		clc				clc
.9a03	65 37		adc $37				adc 	zTemp0+1
.9a05					_M88NoAdd:
.9a05	6a		ror a				ror 	a
.9a06	66 36		ror $36				ror 	zTemp0  					; pull another bit out for the next iteration
.9a08	ca		dex				dex         						; inc/dec don't modify carry; only shifts and adds do
.9a09	d0 f5		bne $9a00			bne 	_M88Loop
.9a0b	85 37		sta $37				sta 	zTemp0+1 					; store high 8 bits.
.9a0d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/utility.asm

.8f7b					NSMNegate:
.8f7b	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8f7e	49 80		eor #$80			eor 	#NSBIsNegative
.8f80	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8f83	60		rts				rts
.8f84					NSMNegateMantissa:
.8f84	38		sec				sec
.8f85	a9 00		lda #$00			lda 	#0
.8f87	fd 08 06	sbc $0608,x			sbc 	NSMantissa0,x
.8f8a	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8f8d	a9 00		lda #$00			lda 	#0
.8f8f	fd 10 06	sbc $0610,x			sbc 	NSMantissa1,x
.8f92	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8f95	a9 00		lda #$00			lda 	#0
.8f97	fd 18 06	sbc $0618,x			sbc 	NSMantissa2,x
.8f9a	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8f9d	a9 00		lda #$00			lda 	#0
.8f9f	fd 20 06	sbc $0620,x			sbc 	NSMantissa3,x
.8fa2	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8fa5	60		rts				rts
.8fa6					NSMShiftUpTwo:
.8fa6	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.8fa9	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.8fac	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8faf	9d 12 06	sta $0612,x			sta 	NSMantissa1+2,x
.8fb2	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.8fb5	9d 1a 06	sta $061a,x			sta 	NSMantissa2+2,x
.8fb8	bd 20 06	lda $0620,x			lda 	NSMantissa3,x
.8fbb	9d 22 06	sta $0622,x			sta 	NSMantissa3+2,x
.8fbe	bd 28 06	lda $0628,x			lda 	NSExponent,x
.8fc1	9d 2a 06	sta $062a,x			sta 	NSExponent+2,x
.8fc4	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8fc7	9d 02 06	sta $0602,x			sta 	NSStatus+2,x
.8fca	60		rts				rts
.8fcb					NSMSetZeroMantissaOnly:
.8fcb	a9 00		lda #$00			lda 	#0
.8fcd	80 08		bra $8fd7			bra 	NSMSetMantissa
.8fcf					NSMSetZero:
.8fcf	a9 00		lda #$00			lda 	#0
.8fd1					NSMSetByte:
.8fd1	9e 28 06	stz $0628,x			stz 	NSExponent,x 				; zero exponent, as integer.
.8fd4	9e 00 06	stz $0600,x			stz 	NSStatus,x 					; status zero (integer)
.8fd7					NSMSetMantissa:
.8fd7	9d 08 06	sta $0608,x			sta 	NSMantissa0,x 				; mantissa
.8fda	9e 10 06	stz $0610,x			stz 	NSMantissa1,x
.8fdd	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.8fe0	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.8fe3	60		rts				rts
.8fe4					NSMShiftLeft:
.8fe4	18		clc				clc
.8fe5					NSMRotateLeft:
.8fe5	3e 08 06	rol $0608,x			rol 	NSMantissa0,x
.8fe8	3e 10 06	rol $0610,x			rol		NSMantissa1,x
.8feb	3e 18 06	rol $0618,x			rol		NSMantissa2,x
.8fee	3e 20 06	rol $0620,x			rol		NSMantissa3,x
.8ff1	60		rts				rts
.8ff2					NSMShiftRight:
.8ff2	5e 20 06	lsr $0620,x			lsr 	NSMantissa3,x
.8ff5	7e 18 06	ror $0618,x			ror		NSMantissa2,x
.8ff8	7e 10 06	ror $0610,x			ror		NSMantissa1,x
.8ffb	7e 08 06	ror $0608,x			ror		NSMantissa0,x
.8ffe	60		rts				rts
.8fff					NSMIsZero:
.8fff	bd 20 06	lda $0620,x			lda 	NSMantissa3,x
.9002	1d 18 06	ora $0618,x			ora		NSMantissa2,x
.9005	1d 10 06	ora $0610,x			ora		NSMantissa1,x
.9008	1d 08 06	ora $0608,x			ora		NSMantissa0,x
.900b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/constants.asm

.9a0e					DecimalScalarTable:
>9a0e	66 66 66 66				.dword $66666666 ; 0.1
>9a12	de					.byte $de
>9a13	1f 85 eb 51				.dword $51eb851f ; 0.01
>9a17	db					.byte $db
>9a18	4c 37 89 41				.dword $4189374c ; 0.001
>9a1c	d8					.byte $d8
>9a1d	ac 8b db 68				.dword $68db8bac ; 0.0001
>9a21	d4					.byte $d4
>9a22	24 d6 e2 53				.dword $53e2d624 ; 1e-05
>9a26	d1					.byte $d1
>9a27	83 de 1b 43				.dword $431bde83 ; 1e-06
>9a2b	ce					.byte $ce
>9a2c	6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>9a30	ca					.byte $ca
>9a31	89 3b e6 55				.dword $55e63b89 ; 1e-08
>9a35	c7					.byte $c7
>9a36	a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>9a3a	c4					.byte $c4
>9a3b	67 7f f3 6d				.dword $6df37f67 ; 1e-10
>9a3f	c0					.byte $c0
>9a40	86 ff f5 57				.dword $57f5ff86 ; 1e-11
>9a44	bd					.byte $bd

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.asm

.9a45					SyntaxError:
.9a45	a9 02		lda #$02		lda	#2
.9a47	4c 28 85	jmp $8528		jmp	ErrorHandler
.9a4a					RangeError:
.9a4a	a9 04		lda #$04		lda	#4
.9a4c	4c 28 85	jmp $8528		jmp	ErrorHandler
.9a4f					TypeError:
.9a4f	a9 05		lda #$05		lda	#5
.9a51	4c 28 85	jmp $8528		jmp	ErrorHandler
.9a54					ArgumentError:
.9a54	a9 07		lda #$07		lda	#7
.9a56	4c 28 85	jmp $8528		jmp	ErrorHandler
.9a59					NotDoneError:
.9a59	a9 0c		lda #$0c		lda	#12
.9a5b	4c 28 85	jmp $8528		jmp	ErrorHandler
.9a5e					ErrorText:
>9a5e	42 72 65 61 6b 00			.text	"Break",0
>9a64	53 79 6e 74 61 78 20 65			.text	"Syntax error",0
>9a6c	72 72 6f 72 00
>9a71	44 69 76 69 73 69 6f 6e			.text	"Division by zero",0
>9a79	20 62 79 20 7a 65 72 6f 00
>9a82	4f 75 74 20 6f 66 20 52			.text	"Out of Range",0
>9a8a	61 6e 67 65 00
>9a8f	54 79 70 65 20 6d 69 73			.text	"Type mismatch",0
>9a97	6d 61 74 63 68 00
>9a9d	4f 75 74 20 6f 66 20 6d			.text	"Out of memory",0
>9aa5	65 6d 6f 72 79 00
>9aab	49 6c 6c 65 67 61 6c 20			.text	"Illegal argument",0
>9ab3	61 72 67 75 6d 65 6e 74 00
>9abc	53 74 6f 70 00				.text	"Stop",0
>9ac1	53 74 72 69 6e 67 20 74			.text	"String too long",0
>9ac9	6f 6f 20 6c 6f 6e 67 00
>9ad1	41 73 73 65 72 74 69 6f			.text	"Assertion failed",0
>9ad9	6e 20 66 61 69 6c 65 64 00
>9ae2	4f 75 74 20 6f 66 20 64			.text	"Out of data",0
>9aea	61 74 61 00
>9aee	55 6e 69 6d 70 6c 65 6d			.text	"Unimplemented",0
>9af6	65 6e 74 65 64 00
>9afc	4e 6f 20 73 75 63 68 20			.text	"No such line number",0
>9b04	6c 69 6e 65 20 6e 75 6d 62 65 72 00
>9b10	52 65 74 75 72 6e 20 77			.text	"Return without Gosub",0
>9b18	69 74 68 6f 75 74 20 47 6f 73 75 62 00
>9b25	55 6e 74 69 6c 20 77 69			.text	"Until without Repeat",0
>9b2d	74 68 6f 75 74 20 52 65 70 65 61 74 00
>9b3a	57 65 6e 64 20 77 69 74			.text	"Wend without While",0
>9b42	68 6f 75 74 20 57 68 69 6c 65 00
>9b4d	4e 65 78 74 20 77 69 74			.text	"Next without For",0
>9b55	68 6f 75 74 20 46 6f 72 00
>9b5e	42 41 53 49 43 20 53 74			.text	"BASIC Stack full",0
>9b66	61 63 6b 20 66 75 6c 6c 00
>9b6f	4f 70 65 6e 20 53 74 72			.text	"Open Structure",0
>9b77	75 63 74 75 72 65 00
>9b7e	45 6e 64 50 72 6f 63 20			.text	"EndProc without call",0
>9b86	77 69 74 68 6f 75 74 20 63 61 6c 6c 00

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/frames.asm

.900c					StackOpen:
.900c	48		pha				pha 								; save frame byte
.900d	29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.900f	0a		asl a				asl 	a 							; claim twice this for storage
.9010	49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.9012	38		sec				sec 								; so basically subtracting from
.9013	65 34		adc $34				adc 	basicStack 	 				; basicStack
.9015	85 34		sta $34				sta 	basicStack
.9017	b0 08		bcs $9021			bcs 	_SONoBorrow
.9019	c6 35		dec $35				dec 	basicStack+1
.901b	a5 35		lda $35				lda 	basicStack+1 				; have we reached stack overflow
.901d	c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.901f	90 04		bcc $9025			bcc 	_SOMemory
.9021					_SONoBorrow:
.9021	68		pla				pla 								; get marker back and write at TOS
.9022	92 34		sta ($34)			sta 	(basicStack)
.9024	60		rts				rts
.9025					_SOMemory:
.9025							ERR_STACK
.9025					StackClose:
.9025	b2 34		lda ($34)			lda 	(basicStack) 				; get TOS marker
.9027	29 0f		and #$0f			and 	#$0F 						; bytes to add back
.9029	0a		asl a				asl 	a 							; claim twice this.
.902a	65 34		adc $34				adc 	basicStack 					; add to the stack pointer.
.902c	85 34		sta $34				sta 	basicStack
.902e	90 02		bcc $9032			bcc 	_SCExit
.9030	e6 35		inc $35				inc 	basicStack+1
.9032					_SCExit:
.9032	60		rts				rts
.9033					StackCheckFrame:
.9033	52 34		eor ($34)			eor 	(basicStack) 				; xor with toS marker
.9035	29 f0		and #$f0			and 	#$F0 						; check type bits
.9037	d0 01		bne $903a			bne 	_SCFError 					; different, we have structures mixed up
.9039	60		rts				rts
.903a					_SCFError:
.903a	8a		txa				txa 								; report error X
.903b	4c 28 85	jmp $8528			jmp 	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/location.asm

.903e					STKSaveCodePosition:
.903e	5a		phy				phy
.903f	98		tya				tya 								; save Y
.9040	a0 05		ldy #$05			ldy 	#5
.9042	91 34		sta ($34),y			sta 	(basicStack),y
.9044	88		dey				dey 								; save Code Pointer
.9045					_STKSaveLoop:
.9045	b9 2f 00	lda $002f,y			lda 	codePtr-1,y 				; allows us to access the pointer w/out issues.
.9048	91 34		sta ($34),y			sta 	(basicStack),y
.904a	88		dey				dey
.904b	d0 f8		bne $9045			bne 	_STKSaveLoop
.904d	7a		ply				ply
.904e	60		rts				rts
.904f					STKLoadCodePosition:
.904f	a0 01		ldy #$01			ldy 	#1 							; load code pointer back
.9051					_STKLoadLoop:
.9051	b1 34		lda ($34),y			lda 	(basicStack),y
.9053	99 2f 00	sta $002f,y			sta 	codePtr-1,y
.9056	c8		iny				iny
.9057	c0 05		cpy #$05			cpy 	#5
.9059	d0 f6		bne $9051			bne 	_STKLoadLoop
.905b	b1 34		lda ($34),y			lda 	(basicStack),y 				; get Y offset
.905d	a8		tay				tay
.905e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/setup.asm

.905f					StackReset:
.905f	a9 ff		lda #$ff			lda 	#((BasicStackBase+BasicStackSize-1) & $FF)
.9061	85 34		sta $34				sta 	0+basicStack
.9063	a9 0f		lda #$0f			lda 	#((BasicStackBase+BasicStackSize-1) >> 8)
.9065	85 35		sta $35				sta 	1+basicStack
.9067	a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.9069	92 34		sta ($34)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.906b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/concrete.asm

.9b93					StringConcrete:
.9b93	5a		phy				phy 								; save position on stack
.9b94	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy target string to zTemp1
.9b97	85 38		sta $38				sta 	zTemp1
.9b99	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.9b9c	85 39		sta $39				sta 	zTemp1+1
.9b9e	a0 ff		ldy #$ff			ldy 	#$FF	 					; calculate string length
.9ba0					_SALength:
.9ba0	c8		iny				iny
.9ba1	b1 38		lda ($38),y			lda 	(zTemp1),y
.9ba3	d0 fb		bne $9ba0			bne 	_SALength
.9ba5	c0 fd		cpy #$fd			cpy 	#253 						; string too long
.9ba7	b0 3f		bcs $9be8			bcs 	_SALengthError
.9ba9	98		tya				tya 				 				; length of the new string
.9baa	18		clc				clc
.9bab	69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.9bad	90 02		bcc $9bb1			bcc 	_SAHaveLength
.9baf	a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.9bb1					_SAHaveLength:
.9bb1	48		pha				pha 								; save length.
.9bb2	38		sec				sec
.9bb3	49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.9bb5	6d 0e 07	adc $070e			adc 	StringMemory
.9bb8	8d 0e 07	sta $070e			sta 	StringMemory
.9bbb	85 3a		sta $3a				sta 	zTemp2 						; update storage address
.9bbd	9d 08 06	sta $0608,x			sta 	NSMantissa0,x 				; update mantissa address
.9bc0	a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.9bc2	6d 0f 07	adc $070f			adc 	StringMemory+1
.9bc5	8d 0f 07	sta $070f			sta 	StringMemory+1
.9bc8	85 3b		sta $3b				sta 	zTemp2+1
.9bca	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9bcd	68		pla				pla 								; save length-3 (chars allowed) in first byte
.9bce	38		sec				sec
.9bcf	e9 03		sbc #$03			sbc 	#3
.9bd1	92 3a		sta ($3a)			sta 	(zTemp2)
.9bd3	a9 00		lda #$00			lda 	#0 							; clear the status byte.
.9bd5	a0 01		ldy #$01			ldy 	#1
.9bd7	91 3a		sta ($3a),y			sta 	(zTemp2),y
.9bd9					_SACopyNewString:
.9bd9	a0 00		ldy #$00			ldy 	#0
.9bdb					_SACopyNSLoop:
.9bdb	b1 38		lda ($38),y			lda 	(zTemp1),y 					; get character
.9bdd	c8		iny				iny 								; write two on in string storage
.9bde	c8		iny				iny
.9bdf	91 3a		sta ($3a),y			sta 	(zTemp2),y
.9be1	88		dey				dey 								; this makes it one one.
.9be2	c9 00		cmp #$00			cmp 	#0 							; until EOS copied
.9be4	d0 f5		bne $9bdb			bne 	_SACopyNSLoop
.9be6	7a		ply				ply
.9be7	60		rts				rts
.9be8					_SALengthError:
.9be8	a9 09		lda #$09		lda	#9
.9bea	4c 28 85	jmp $8528		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/stringalloc.asm

.9bed					StringSystemInitialise:
.9bed	a9 ff		lda #$ff			lda 	#((EndVariableSpace-1) & $FF)
.9bef	8d 0e 07	sta $070e			sta 	0+StringMemory
.9bf2	a9 1f		lda #$1f			lda 	#((EndVariableSpace-1) >> 8)
.9bf4	8d 0f 07	sta $070f			sta 	1+StringMemory
.9bf7	9c ff 1f	stz $1fff			stz 	EndVariableSpace-1 			; put a zero at the end, so know end of string memory.
.9bfa	60		rts				rts
.9bfb					StringSpaceInitialise:
.9bfb	a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.9bfd	8d 10 07	sta $0710			sta 	StringInitialised
.9c00	ad 0e 07	lda $070e			lda 	StringMemory 				; allocate 256 bytes for one concreted string
.9c03	8d 11 07	sta $0711			sta 	StringTempPointer
.9c06	ad 0f 07	lda $070f			lda 	StringMemory+1
.9c09	3a		dec a				dec 	a
.9c0a	8d 12 07	sta $0712			sta 	StringTempPointer+1
.9c0d	60		rts				rts
.9c0e					StringTempAllocate:
.9c0e	c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.9c10	b0 35		bcs $9c47			bcs 	_STALength
.9c12	2c 10 07	bit $0710			bit 	StringInitialised 			; already initialised
.9c15	30 05		bmi $9c1c			bmi 	_STAAllocate
.9c17	48		pha				pha 								; save value to subtract.
.9c18	20 fb 9b	jsr $9bfb			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.9c1b	68		pla				pla 								; restore it
.9c1c					_STAAllocate:
.9c1c	49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.9c1e	18		clc				clc  								; deliberate allows one more
.9c1f	6d 11 07	adc $0711			adc 	StringTempPointer 			; subtract from temp pointer
.9c22	8d 11 07	sta $0711			sta 	StringTempPointer
.9c25	9d 08 06	sta $0608,x			sta 	NSMantissa0,x 				; address in mantissa
.9c28	85 3c		sta $3c				sta 	zsTemp 						; and zsTemp
.9c2a	ad 12 07	lda $0712			lda 	StringTempPointer+1
.9c2d	69 ff		adc #$ff			adc 	#$FF
.9c2f	8d 12 07	sta $0712			sta 	StringTempPointer+1
.9c32	85 3d		sta $3d				sta 	zsTemp+1
.9c34	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9c37	9e 18 06	stz $0618,x			stz 	NSMantissa2,x 				; set the typing data
.9c3a	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.9c3d	a9 10		lda #$10			lda 	#NSTString
.9c3f	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9c42	a9 00		lda #$00			lda 	#0 							; clear the target string
.9c44	92 3c		sta ($3c)			sta 	(zsTemp)
.9c46	60		rts				rts
.9c47					_STALength:
.9c47	a9 09		lda #$09		lda	#9
.9c49	4c 28 85	jmp $8528		jmp	ErrorHandler
.9c4c					StringTempWrite:
.9c4c	48		pha				pha
.9c4d	92 3c		sta ($3c)			sta 	(zsTemp)
.9c4f	e6 3c		inc $3c				inc 	zsTemp
.9c51	d0 02		bne $9c55			bne 	_STWNoCarry
.9c53	e6 3d		inc $3d				inc 	zsTemp+1
.9c55					_STWNoCarry:
.9c55	a9 00		lda #$00			lda 	#0
.9c57	92 3c		sta ($3c)			sta 	(zsTemp)
.9c59	68		pla				pla
.9c5a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/backload.asm

.906c					BackloadProgram:
.906c	a2 ff		ldx #$ff			ldx 	#$FF
.906e	8e fa ff	stx $fffa			stx 	$FFFA 						; fast mode
.9071	20 9b 90	jsr $909b			jsr 	BLReadByte
.9074	30 1e		bmi $9094			bmi 	_BPExit
.9076					_BPCopy:
.9076	e8		inx				inx  								; copy byte in
.9077	9d 15 08	sta $0815,x			sta 	lineBuffer,x
.907a	9e 16 08	stz $0816,x			stz 	lineBuffer+1,x
.907d	20 9b 90	jsr $909b			jsr 	BLReadByte 					; read next byte
.9080	30 0a		bmi $908c			bmi 	_BPEndLine 					; -ve = EOL
.9082	c9 09		cmp #$09			cmp 	#9 							; handle TAB
.9084	d0 02		bne $9088			bne 	_BPNotTab
.9086	a9 20		lda #$20			lda 	#' '
.9088					_BPNotTab:
.9088	c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.908a	b0 ea		bcs $9076			bcs 	_BPCopy
.908c					_BPEndLine:
.908c	20 65 92	jsr $9265			jsr 	TokeniseLine 				; tokenise the line.
.908f	20 f1 94	jsr $94f1			jsr 	MemoryAppend 				; append to current program
.9092	80 d8		bra $906c			bra 	BackloadProgram
.9094					_BPExit:
.9094	9c fa ff	stz $fffa			stz 	$FFFA 						; clear fast mode
.9097	20 2c 81	jsr $812c			jsr 	ClearCommand 				; clear variables etc.
.909a	60		rts				rts
.909b					BLReadByte:
.909b					_BLLoad:
.909b	ad 00 30	lda $3000			lda 	$3000 						; hardcoded in the makefile.
.909e	ee 9c 90	inc $909c			inc 	_BLLoad+1
.90a1	d0 03		bne $90a6			bne 	_BLNoCarry
.90a3	ee 9d 90	inc $909d			inc 	_BLLoad+2
.90a6					_BLNoCarry:
.90a6	c9 00		cmp #$00			cmp 	#0
.90a8	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/searchtokens.asm

.90a9					TokeniseSearchTable:
.90a9	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token.
.90ab	85 36		sta $36				sta 	zTemp0
.90ad	a0 00		ldy #$00			ldy 	#0
.90af	a9 80		lda #$80			lda 	#$80 						; token #
.90b1	85 38		sta $38				sta 	zTemp1
.90b3					_TSTLoop:
.90b3	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.90b5	30 49		bmi $9100			bmi 	_TSTFail 					; -ve = end of table
.90b7	f0 2e		beq $90e7			beq 	_TSTNext 					; zero, check next it's a dummy
.90b9	c8		iny				iny 								; get the hash
.90ba	b1 36		lda ($36),y			lda 	(zTemp0),y
.90bc	88		dey				dey
.90bd	cd 03 07	cmp $0703			cmp 	identHash 					; check they match, if not go to next
.90c0	d0 25		bne $90e7			bne 	_TSTNext
.90c2	ad 02 07	lda $0702			lda 	identTypeEnd 				; length of identifier
.90c5	38		sec				sec
.90c6	ed 00 07	sbc $0700			sbc 	identStart
.90c9	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; no match, then return.
.90cb	d0 1a		bne $90e7			bne 	_TSTNext
.90cd	5a		phy				phy 								; save Y , we might fail
.90ce	c8		iny				iny 								; point to text
.90cf	c8		iny				iny
.90d0	ae 00 07	ldx $0700			ldx 	identStart 					; offset in line buffer in X
.90d3					_TSTCompareName:
.90d3	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; compare text.
.90d6	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.90d8	d0 0c		bne $90e6			bne 	_TSTNextPullY 				; fail, pullY and do next
.90da	e8		inx				inx
.90db	c8		iny				iny
.90dc	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; complete match.
.90df	d0 f2		bne $90d3			bne 	_TSTCompareName
.90e1	7a		ply				ply 								; throw Y
.90e2	a5 38		lda $38				lda 	zTemp1 						; get token #
.90e4	38		sec				sec 								; return with CS = passed.
.90e5	60		rts				rts
.90e6					_TSTNextPullY:
.90e6	7a		ply				ply 								; restore current, fall through.
.90e7					_TSTNext:
.90e7	e6 38		inc $38				inc 	zTemp1 						; token counter
.90e9	98		tya				tya
.90ea	18		clc				clc
.90eb	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.90ed	1a		inc a				inc 	a 							; +1
.90ee	1a		inc a				inc 	a 							; +2
.90ef	a8		tay				tay
.90f0	10 c1		bpl $90b3			bpl 	_TSTLoop 					; if Y < $80 loop back
.90f2	98		tya				tya 								; add Y to zTemp0 and reset Y
.90f3	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.90f5	18		clc				clc  								; but have tables > 255 bytes
.90f6	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.90f8	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.90fa	90 b7		bcc $90b3			bcc 	_TSTLoop
.90fc	e6 37		inc $37				inc 	zTemp0+1
.90fe	80 b3		bra $90b3			bra 	_TSTLoop
.9100					_TSTFail:
.9100	18		clc				clc
.9101	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/tokenise.asm


;******  Processing file: ./common/tokeniser/../generated/kwdtext.dat

.9102					KeywordSet0:
>9102	00 65					.text	0,$65,""               ; $80 !0:EOF
>9104	00 58					.text	0,$58,""               ; $81 !1:SH1
>9106	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>9108	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $83 ABS(
>910e	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $84 ALLOC(
>9116	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $85 ASC(
>911c	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $86 CHR$(
>9123	05 6b 46 41 4c 53 45			.text	5,$6b,"FALSE"          ; $87 FALSE
>912a	05 44 46 52 41 43 28			.text	5,$44,"FRAC("          ; $88 FRAC(
>9131	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $89 INT(
>9137	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $8a ISVAL(
>913f	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $8b LEFT$(
>9147	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $8c LEN(
>914d	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $8d MID$(
>9154	04 19 4e 4f 54 28			.text	4,$19,"NOT("           ; $8e NOT(
>915a	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $8f RIGHT$(
>9162	28
>9163	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $90 RND(
>9169	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $91 SGN(
>916f	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $92 SPC(
>9175	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $93 STR$(
>917c	04 40 54 52 55 45			.text	4,$40,"TRUE"           ; $94 TRUE
>9182	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $95 VAL(
>9188	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $96 FOR
>918d	02 8f 49 46				.text	2,$8f,"IF"             ; $97 IF
>9191	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $98 PROC
>9197	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $99 REPEAT
>919f	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $9a WHILE
>91a6	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $9b ENDIF
>91ad	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $9c ENDPROC
>91b5	43
>91b6	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $9d NEXT
>91bc	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $9e THEN
>91c2	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $9f UNTIL
>91c9	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $a0 WEND
>91cf	04 1c 43 41 4c 4c			.text	4,$1c,"CALL"           ; $a1 CALL
>91d5	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $a2 CLS
>91da	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $a3 DATA
>91e0	03 da 44 49 4d				.text	3,$da,"DIM"            ; $a4 DIM
>91e5	06 db 44 4f 57 4e 54 4f			.text	6,$db,"DOWNTO"         ; $a5 DOWNTO
>91ed	04 29 45 4c 53 45			.text	4,$29,"ELSE"           ; $a6 ELSE
>91f3	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $a7 GOSUB
>91fa	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $a8 GOTO
>9200	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $a9 LET
>9205	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $aa PRINT
>920c	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $ab READ
>9212	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $ac REM
>9217	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $ad RETURN
>921f	02 a3 54 4f				.text	2,$a3,"TO"             ; $ae TO
>9223	ff					.text	$FF
.9224					KeywordSet1:
>9224	00 65					.text	0,$65,""               ; $80 !0:EOF
>9226	00 58					.text	0,$58,""               ; $81 !1:SH1
>9228	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>922a	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $83 ASSERT
>9232	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $84 CLEAR
>9239	03 d7 45 4e 44				.text	3,$d7,"END"            ; $85 END
>923e	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $86 LIST
>9244	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $87 NEW
>9249	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $88 RESTORE
>9251	45
>9252	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $89 RUN
>9257	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $8a STOP
>925d	ff					.text	$FF
.925e					KeywordSet2:
>925e	00 65					.text	0,$65,""               ; $80 !0:EOF
>9260	00 58					.text	0,$58,""               ; $81 !1:SH1
>9262	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>9264	ff					.text	$FF

;******  Return to file: ./common/tokeniser/tokenise.asm

.9265					TokeniseLine:
.9265	20 ed 93	jsr $93ed			jsr 	FixLineBufferCase 			; fix line case
.9268	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.926a	8d 15 07	sta $0715			sta 	tokenOffset
.926d	9c 16 07	stz $0716			stz 	tokenLineNumber
.9270	9c 17 07	stz $0717			stz 	tokenLineNumber+1
.9273	a2 ff		ldx #$ff			ldx 	#$FF
.9275					_TKFindFirst:
.9275	e8		inx				inx
.9276	bd 15 08	lda $0815,x			lda 	lineBuffer,x
.9279	f0 79		beq $92f4			beq 	_TKExit
.927b	c9 20		cmp #$20			cmp 	#' '
.927d	90 f6		bcc $9275			bcc 	_TKFindFirst
.927f	c9 30		cmp #$30			cmp 	#'0'
.9281	90 07		bcc $928a			bcc 	_TKNoLineNumber
.9283	c9 3a		cmp #$3a			cmp 	#'9'+1
.9285	b0 03		bcs $928a			bcs 	_TKNoLineNumber
.9287	20 17 94	jsr $9417			jsr 	TokeniseExtractLineNumber
.928a					_TKNoLineNumber:
.928a					_TKTokeniseLoop:
.928a	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.928d	f0 65		beq $92f4			beq 	_TKExit
.928f	e8		inx				inx
.9290	c9 20		cmp #$20			cmp 	#' '
.9292	f0 f6		beq $928a			beq 	_TKTokeniseLoop 			; keep looping if space found.
.9294	ca		dex				dex 								; undo last get, A contains character, X is position.
.9295	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.9297	f0 61		beq $92fa			beq 	_TKTokeniseIdentifier
.9299	c9 41		cmp #$41			cmp 	#'A'
.929b	90 04		bcc $92a1			bcc 	_TKTokenisePunctuation
.929d	c9 5b		cmp #$5b			cmp 	#'Z'+1
.929f	90 59		bcc $92fa			bcc 	_TKTokeniseIdentifier
.92a1					_TKTokenisePunctuation:
.92a1	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.92a3	f0 27		beq $92cc			beq 	_TKString
.92a5	c9 23		cmp #$23			cmp 	#'#'						; hexadecimal constant (# only appears at end of identifiers)
.92a7	f0 28		beq $92d1			beq 	_TKHexConstant
.92a9	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers.
.92ab	f0 29		beq $92d6			beq 	_TKCheckDouble
.92ad	c9 3e		cmp #$3e			cmp 	#'>'
.92af	f0 25		beq $92d6			beq 	_TKCheckDouble
.92b1					_TKStandardPunctuation:
.92b1	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; get it back.
.92b4	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.92b6	90 0e		bcc $92c6			bcc 	_TKNoShift
.92b8	48		pha				pha 								; save
.92b9	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.92bb	85 36		sta $36				sta 	zTemp0
.92bd	68		pla				pla
.92be	29 20		and #$20			and 	#32 						; bit 5
.92c0	4a		lsr a				lsr 	a 							; shift into bit 3
.92c1	4a		lsr a				lsr 	a
.92c2	05 36		ora $36				ora 	zTemp0
.92c4	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.92c6					_TKNoShift:
.92c6	20 5c 94	jsr $945c			jsr 	TokeniseWriteByte 			; write the punctuation character
.92c9	e8		inx				inx 								; consume the character
.92ca	80 be		bra $928a			bra 	_TKTokeniseLoop 			; and loop round again.
.92cc					_TKString:
.92cc	20 7c 93	jsr $937c			jsr 	TokeniseString
.92cf	80 b9		bra $928a			bra 	_TKTokeniseLoop
.92d1					_TKHexConstant:
.92d1	20 b7 93	jsr $93b7			jsr 	TokeniseHexConstant
.92d4	80 b4		bra $928a			bra 	_TKTokeniseLoop
.92d6					_TKCheckDouble:
.92d6	bd 16 08	lda $0816,x			lda 	lineBuffer+1,x 				; get next character
.92d9	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.92db	90 d4		bcc $92b1			bcc 	_TKStandardPunctuation
.92dd	c9 3f		cmp #$3f			cmp 	#'>'+1
.92df	b0 d0		bcs $92b1			bcs 	_TKStandardPunctuation
.92e1	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.92e4	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.92e6	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.92e7	7d 16 08	adc $0816,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.92ea	38		sec				sec
.92eb	e9 3c		sbc #$3c			sbc 	#'<'
.92ed	20 5c 94	jsr $945c			jsr 	TokeniseWriteByte 			; this is in the range 0-7
.92f0	e8		inx				inx 								; consume both
.92f1	e8		inx				inx
.92f2	80 96		bra $928a			bra 	_TKTokeniseLoop
.92f4	a9 80		lda #$80	_TKExit:lda 	#KWC_EOL 					; write end of line byte
.92f6	20 5c 94	jsr $945c			jsr 	TokeniseWriteByte
.92f9	60		rts				rts
.92fa					_TKTokeniseIdentifier:
.92fa	8e 00 07	stx $0700			stx 	identStart 					; save start
.92fd	9c 04 07	stz $0704			stz 	identTypeByte 				; zero the type byte
.9300					_TKCheckLoop:
.9300	e8		inx				inx 								; look at next, we know first is identifier.
.9301	bd 15 08	lda $0815,x			lda  	lineBuffer,x
.9304	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.9306	f0 f8		beq $9300			beq 	_TKCheckLoop
.9308	c9 30		cmp #$30			cmp	 	#"0"
.930a	90 0c		bcc $9318			bcc 	_TKEndIdentifier
.930c	c9 3a		cmp #$3a			cmp 	#"9"+1
.930e	90 f0		bcc $9300			bcc 	_TKCheckLoop
.9310	c9 41		cmp #$41			cmp	 	#"A"
.9312	90 04		bcc $9318			bcc 	_TKEndIdentifier
.9314	c9 5b		cmp #$5b			cmp 	#"Z"+1
.9316	90 e8		bcc $9300			bcc 	_TKCheckLoop
.9318					_TKEndIdentifier:
.9318	8e 01 07	stx $0701			stx 	identTypeStart 				; save start of type text (if any !)
.931b	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.931d	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.931f	f0 06		beq $9327			beq 	_TKHasTypeCharacter
.9321	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.9323	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.9325	d0 07		bne $932e			bne 	_TKNoTypeCharacter
.9327					_TKHasTypeCharacter:
.9327	8c 04 07	sty $0704			sty 	identTypeByte 				; has # or $, save the type
.932a	e8		inx				inx 								; read next
.932b	bd 15 08	lda $0815,x			lda 	lineBuffer,x
.932e					_TKNoTypeCharacter:
.932e	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.9330	d0 09		bne $933b			bne 	_TKNoArray
.9332	e8		inx				inx 								; skip the (
.9333	ad 04 07	lda $0704			lda 	identTypeByte 				; set bit 2 (e.g. array)
.9336	09 04		ora #$04			ora 	#$04
.9338	8d 04 07	sta $0704			sta 	identTypeByte
.933b					_TKNoArray:
.933b	8e 02 07	stx $0702			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.933e	20 d8 93	jsr $93d8			jsr 	TokeniseCalculateHash 		; calculate the has for those tokens
.9341	a0 91		ldy #$91			ldy 	#(KeywordSet0) >> 8
.9343	a9 02		lda #$02			lda 	#(KeywordSet0) & $FF
.9345	20 a9 90	jsr $90a9			jsr 	TokeniseSearchTable
.9348	a2 00		ldx #$00			ldx 	#0
.934a	b0 1f		bcs $936b			bcs 	_TKFoundToken
.934c	a0 92		ldy #$92			ldy 	#(KeywordSet1) >> 8
.934e	a9 24		lda #$24			lda 	#(KeywordSet1) & $FF
.9350	20 a9 90	jsr $90a9			jsr 	TokeniseSearchTable
.9353	a2 81		ldx #$81			ldx 	#$81
.9355	b0 14		bcs $936b			bcs 	_TKFoundToken
.9357	a0 92		ldy #$92			ldy 	#(KeywordSet1) >> 8
.9359	a9 24		lda #$24			lda 	#(KeywordSet1) & $FF
.935b	20 a9 90	jsr $90a9			jsr 	TokeniseSearchTable
.935e	a2 82		ldx #$82			ldx 	#$82
.9360	b0 09		bcs $936b			bcs 	_TKFoundToken
.9362	20 68 94	jsr $9468			jsr 	CheckCreateVariableRecord 	; failed all, it's a variable, create record if does not exist.
.9365	ae 02 07	ldx $0702			ldx 	identTypeEnd 				; X points to following byte
.9368	4c 8a 92	jmp $928a			jmp 	_TKTokeniseLoop 			; and go round again.
.936b					_TKFoundToken:
.936b	48		pha				pha 								; save token
.936c	8a		txa				txa 								; shift in X, is there one ?
.936d	f0 03		beq $9372			beq 	_TKNoTShift
.936f	20 5c 94	jsr $945c			jsr 	TokeniseWriteByte 			; if so, write it out
.9372					_TKNoTShift:
.9372	68		pla				pla 								; restore and write token
.9373	20 5c 94	jsr $945c			jsr 	TokeniseWriteByte
.9376	ae 02 07	ldx $0702			ldx 	identTypeEnd 				; X points to following byte
.9379	4c 8a 92	jmp $928a			jmp 	_TKTokeniseLoop 			; and go round again.
.937c					TokeniseString:
.937c	a9 ff		lda #$ff			lda 	#KWC_STRING 				; string token.
.937e	20 5c 94	jsr $945c			jsr 	TokeniseWriteByte
.9381	e8		inx				inx									; start of quoted string.
.9382	da		phx				phx 								; push start of string on top
.9383	ca		dex				dex
.9384					_TSFindEnd:
.9384	e8		inx				inx
.9385	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; next character
.9388	f0 04		beq $938e			beq 	_TSEndOfString
.938a	c9 22		cmp #$22			cmp 	#'"'
.938c	d0 f6		bne $9384			bne 	_TSFindEnd
.938e					_TSEndOfString:
.938e	7a		ply				ply  								; so now Y is first character, X is character after end.
.938f	48		pha				pha 								; save terminating character
.9390	20 98 93	jsr $9398			jsr 	TOWriteBlockXY 				; write X to Y as a data block
.9393	68		pla				pla 								; terminating character
.9394	f0 01		beq $9397			beq 	_TSNotQuote					; if it wasn't EOS skip it
.9396	e8		inx				inx
.9397					_TSNotQuote:
.9397	60		rts				rts
.9398					TOWriteBlockXY:
.9398	86 36		stx $36				stx 	zTemp0 						; write end character
.939a	98		tya				tya
.939b	49 ff		eor #$ff			eor 	#$FF
.939d	38		sec				sec
.939e	65 36		adc $36				adc 	zTemp0
.93a0	1a		inc a				inc 	a 							; one extra for NULL
.93a1	20 5c 94	jsr $945c			jsr 	TokeniseWriteByte
.93a4					_TOBlockLoop:
.93a4	c4 36		cpy $36				cpy 	zTemp0
.93a6	f0 09		beq $93b1			beq 	_TOBlockExit
.93a8	b9 15 08	lda $0815,y			lda 	lineBuffer,y
.93ab	20 5c 94	jsr $945c			jsr 	TokeniseWriteByte
.93ae	c8		iny				iny
.93af	80 f3		bra $93a4			bra 	_TOBlockLoop
.93b1					_TOBlockExit:
.93b1	a9 00		lda #$00			lda 	#0
.93b3	20 5c 94	jsr $945c			jsr 	TokeniseWriteByte
.93b6	60		rts				rts
.93b7					TokeniseHexConstant:
.93b7	a9 fe		lda #$fe			lda 	#KWC_HEXCONST 				; hex constant token.
.93b9	20 5c 94	jsr $945c			jsr 	TokeniseWriteByte
.93bc	e8		inx				inx									; start of quoted string.
.93bd	da		phx				phx 								; push start of constant on top
.93be	ca		dex				dex
.93bf					_THFindLoop:
.93bf	e8		inx				inx
.93c0	bd 15 08	lda $0815,x			lda 	lineBuffer,x
.93c3	c9 30		cmp #$30			cmp 	#"0"
.93c5	90 0c		bcc $93d3			bcc 	_THFoundEnd
.93c7	c9 3a		cmp #$3a			cmp 	#"9"+1
.93c9	90 f4		bcc $93bf			bcc 	_THFindLoop
.93cb	c9 41		cmp #$41			cmp 	#"A"
.93cd	90 04		bcc $93d3			bcc 	_THFoundEnd
.93cf	c9 47		cmp #$47			cmp 	#"F"+1
.93d1	90 ec		bcc $93bf			bcc 	_THFindLoop
.93d3					_THFoundEnd:
.93d3	7a		ply				ply 								; restore start
.93d4	20 98 93	jsr $9398			jsr 	TOWriteBlockXY 				; output the block
.93d7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/utility.asm

.93d8					TokeniseCalculateHash:
.93d8	da		phx				phx
.93d9	ae 00 07	ldx $0700			ldx 	identStart 					; needs to be same as in tokens.py - simple sum
.93dc	a9 00		lda #$00			lda 	#0
.93de					_TCHLoop:
.93de	18		clc				clc
.93df	7d 15 08	adc $0815,x			adc 	lineBuffer,x
.93e2	e8		inx				inx
.93e3	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.93e6	d0 f6		bne $93de			bne 	_TCHLoop
.93e8	8d 03 07	sta $0703			sta 	identHash 					; save the hash
.93eb	fa		plx				plx
.93ec	60		rts				rts
.93ed					FixLineBufferCase:
.93ed	a2 00		ldx #$00			ldx 	#0
.93ef					_FLBCLoop:
.93ef	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; get next character
.93f2	f0 22		beq $9416			beq 	_FLBCExit 					; end of string.
.93f4	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.93f6	f0 11		beq $9409			beq 	_FLBCInQuotes
.93f8	e8		inx				inx
.93f9	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.93fb	90 f2		bcc $93ef			bcc 	_FLBCLoop
.93fd	c9 7b		cmp #$7b			cmp 	#'z'+1
.93ff	b0 ee		bcs $93ef			bcs 	_FLBCLoop
.9401	38		sec				sec 								; make U/C
.9402	e9 20		sbc #$20			sbc 	#32
.9404	9d 14 08	sta $0814,x			sta	 	lineBuffer-1,x 				; write back
.9407	80 e6		bra $93ef			bra 	_FLBCLoop
.9409					_FLBCInQuotes:
.9409	e8		inx				inx 								; advance
.940a	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; get next
.940d	f0 07		beq $9416			beq 	_FLBCExit 					; exit on EOS
.940f	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.9411	d0 f6		bne $9409			bne 	_FLBCInQuotes
.9413	e8		inx				inx 								; skip over it
.9414	80 d9		bra $93ef			bra 	_FLBCLoop
.9416					_FLBCExit:
.9416	60		rts				rts
.9417					TokeniseExtractLineNumber:
.9417	ad 17 07	lda $0717			lda 	tokenLineNumber+1 			; push current value on stack
.941a	48		pha				pha
.941b	ad 16 07	lda $0716			lda 	tokenLineNumber
.941e	48		pha				pha
.941f	20 55 94	jsr $9455			jsr 	_TELNTimes2 				; line # x 4
.9422	20 55 94	jsr $9455			jsr 	_TELNTimes2 				; line # x 2
.9425	18		clc				clc 								; add stacked value
.9426	68		pla				pla
.9427	6d 16 07	adc $0716			adc 	tokenLineNumber
.942a	8d 16 07	sta $0716			sta 	tokenLineNumber
.942d	68		pla				pla
.942e	6d 17 07	adc $0717			adc 	tokenLineNumber+1
.9431	8d 17 07	sta $0717			sta 	tokenLineNumber+1 			; line # x 5
.9434	20 55 94	jsr $9455			jsr 	_TELNTimes2 				; line # x 10
.9437	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; get and consume character
.943a	e8		inx				inx
.943b	29 0f		and #$0f			and 	#15 						; add to line #
.943d	18		clc				clc
.943e	6d 16 07	adc $0716			adc 	tokenLineNumber
.9441	8d 16 07	sta $0716			sta 	tokenLineNumber
.9444	90 03		bcc $9449			bcc 	_TLENNoCarry
.9446	ee 17 07	inc $0717			inc 	tokenLineNumber+1
.9449					_TLENNoCarry:
.9449	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; more digits ?
.944c	c9 30		cmp #$30			cmp 	#'0'
.944e	90 04		bcc $9454			bcc 	_TLENExit
.9450	c9 3a		cmp #$3a			cmp 	#'9'+1
.9452	90 c3		bcc $9417			bcc 	TokeniseExtractLineNumber
.9454					_TLENExit:
.9454	60		rts				rts
.9455					_TELNTimes2:
.9455	0e 16 07	asl $0716			asl 	tokenLineNumber
.9458	2e 17 07	rol $0717			rol 	tokenLineNumber+1
.945b	60		rts				rts
.945c					TokeniseWriteByte:
.945c	da		phx				phx
.945d	ae 15 07	ldx $0715			ldx 	tokenOffset 				; next slot to write to
.9460	9d 15 07	sta $0715,x			sta 	tokenOffset,x 				; write byte out
.9463	ee 15 07	inc $0715			inc 	tokenOffset 				; advance slot.
.9466	fa		plx				plx
.9467	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/variablerecord.asm

.9468					CheckCreateVariableRecord:
.9468	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.946a	85 36		sta $36				sta 	0+zTemp0
.946c	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.946e	85 37		sta $37				sta 	1+zTemp0
.9470					_CCVSearch:
.9470	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.9472	f0 2c		beq $94a0			beq 	_CCVFail
.9474	a0 01		ldy #$01			ldy 	#1 							; read the hash
.9476	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.9478	cd 03 07	cmp $0703			cmp 	identHash
.947b	d0 16		bne $9493			bne 	_CCVNext
.947d	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.947f	ae 00 07	ldx $0700			ldx 	identStart
.9482					_CCVCompare:
.9482	bd 15 08	lda $0815,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.9485	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.9487	e8		inx				inx 								; advance pointers
.9488	c8		iny				iny
.9489	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.948a	d0 07		bne $9493			bne 	_CCVNext  					; didn't match go to next.
.948c	90 f4		bcc $9482			bcc 	_CCVCompare 				; not finished yet.
.948e	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; matched whole thing ?
.9491	f0 41		beq $94d4			beq 	_CCVFound 					; yes, we were successful
.9493					_CCVNext:
.9493	18		clc				clc
.9494	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.9496	65 36		adc $36				adc 	zTemp0
.9498	85 36		sta $36				sta 	zTemp0
.949a	90 d4		bcc $9470			bcc 	_CCVSearch
.949c	e6 37		inc $37				inc 	zTemp0+1
.949e	80 d0		bra $9470			bra 	_CCVSearch
.94a0					_CCVFail:
.94a0	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.94a2	ad 03 07	lda $0703			lda 	identHash
.94a5	91 36		sta ($36),y			sta 	(zTemp0),y
.94a7	c8		iny				iny 								; offset 2 is the type byte
.94a8	ad 04 07	lda $0704			lda 	identTypeByte
.94ab	91 36		sta ($36),y			sta 	(zTemp0),y
.94ad	c8		iny				iny
.94ae					_CCVData:
.94ae	a9 00		lda #$00			lda 	#0 							; erase data 3-7
.94b0	91 36		sta ($36),y			sta 	(zTemp0),y
.94b2	c8		iny				iny
.94b3	c0 08		cpy #$08			cpy 	#8
.94b5	90 f7		bcc $94ae			bcc 	_CCVData
.94b7	ae 00 07	ldx $0700			ldx 	identStart 					; copy name into 8 on.
.94ba					_CCVCopyName:
.94ba	bd 15 08	lda $0815,x			lda 	lineBuffer,x
.94bd	91 36		sta ($36),y			sta 	(zTemp0),y
.94bf	e8		inx				inx
.94c0	c8		iny				iny
.94c1	ec 02 07	cpx $0702			cpx 	identTypeEnd
.94c4	d0 f4		bne $94ba			bne 	_CCVCopyName
.94c6	98		tya				tya 								; patch offset
.94c7	92 36		sta ($36)			sta 	(zTemp0)
.94c9	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.94cb	91 36		sta ($36),y			sta 	(zTemp0),y
.94cd	88		dey				dey
.94ce	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.94d0	09 80		ora #$80			ora 	#$80
.94d2	91 36		sta ($36),y			sta 	(zTemp0),y
.94d4					_CCVFound:
.94d4	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.94d6	38		sec				sec
.94d7	e9 10		sbc #$10			sbc 	#(VariableSpace >> 8) 		; offset from the start
.94d9	09 40		ora #$40			ora 	#$40 						; make it a writeable token
.94db	20 5c 94	jsr $945c			jsr 	TokeniseWriteByte
.94de	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.94e0	20 5c 94	jsr $945c			jsr 	TokeniseWriteByte
.94e3	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./variants/hardware/junior/memory.asm

.9c5b					MemoryPeek:
.9c5b	b2 36		lda ($36)			lda 	(zTemp0)
.9c5d	60		rts				rts
.9c5e					MemoryPoke:
.9c5e	92 36		sta ($36)			sta 	(zTemp0)
.9c60	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./variants/hardware/junior/vectors.asm

.9c61					PrintHex:
.9c61	48		pha				pha
.9c62	4a		lsr a				lsr 	a
.9c63	4a		lsr a				lsr 	a
.9c64	4a		lsr a				lsr 	a
.9c65	4a		lsr a				lsr 	a
.9c66	20 6a 9c	jsr $9c6a			jsr 	_PrintNibble
.9c69	68		pla				pla
.9c6a					_PrintNibble:
.9c6a	29 0f		and #$0f			and 	#15
.9c6c	c9 0a		cmp #$0a			cmp 	#10
.9c6e	90 02		bcc $9c72			bcc 	_NoShift
.9c70	69 06		adc #$06			adc 	#6
.9c72					_NoShift:
.9c72	69 30		adc #$30			adc 	#48
.9c74	4c 77 9c	jmp $9c77			jmp 	EXTPrintCharacter
.9c77					EXTPrintCharacter:
.9c77	48		pha				pha
.9c78	da		phx				phx
.9c79	5a		phy				phy
.9c7a	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.9c7d	7a		ply				ply
.9c7e	fa		plx				plx
.9c7f	68		pla				pla
.9c80	60		rts				rts
.9c81					EXTInputSingleCharacter:
.9c81	da		phx				phx
.9c82	5a		phy				phy
.9c83					_EISCWait:
.9c83	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.9c86	c9 00		cmp #$00			cmp 	#0
.9c88	f0 f9		beq $9c83			beq 	_EISCWait
.9c8a	7a		ply				ply
.9c8b	fa		plx				plx
.9c8c	60		rts				rts
.9c8d					EXTInputLine:
.9c8d	a2 00		ldx #$00			ldx 	#0 							; position in line <- start of line
.9c8f					_ILLoop:
.9c8f	da		phx				phx 								; read character in
.9c90	20 cf ff	jsr $ffcf			jsr 	$FFCF
.9c93	fa		plx				plx
.9c94	c9 08		cmp #$08			cmp 	#8 							; backspace, CBM doesn't need this.
.9c96	f0 12		beq $9caa			beq 	_ILBackspace
.9c98	c9 0d		cmp #$0d			cmp 	#13							; exit ?
.9c9a	f0 15		beq $9cb1			beq 	_ILExit
.9c9c	c9 20		cmp #$20			cmp 	#32 						; ignore other control
.9c9e	90 ef		bcc $9c8f			bcc 	_ILLoop
.9ca0	e0 50		cpx #$50			cpx 	#MaxLineSize 				; already full buffer
.9ca2	f0 eb		beq $9c8f			beq 	_ILLoop
.9ca4	9d 15 08	sta $0815,x			sta 	lineBuffer,x 				; save it
.9ca7	e8		inx				inx
.9ca8	80 e5		bra $9c8f			bra 	_ILLoop
.9caa					_ILBackspace:
.9caa	e0 00		cpx #$00			cpx 	#0  						; can't backspace, start of line.
.9cac	f0 e1		beq $9c8f			beq 	_ILLoop
.9cae	ca		dex				dex 								; back one.
.9caf	80 de		bra $9c8f			bra 	_ILLoop
.9cb1					_ILExit:
.9cb1	20 77 9c	jsr $9c77			jsr 	EXTPrintCharacter
.9cb4	9e 15 08	stz $0815,x			stz 	lineBuffer,x 				; make ASCIIZ and exit with address in XA
.9cb7	60		rts				rts
.9cb8					EXTBreakCheck:
.9cb8	4c e1 ff	jmp $ffe1			jmp		$FFE1

;******  Return to file: _basic.asm


;******  Processing file: ./variants/memory.flat/memory.asm

.94e4					MemoryNew:
.94e4	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.94e6	85 30		sta $30				sta 	codePtr
.94e8	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.94ea	85 31		sta $31				sta 	codePtr+1
.94ec	a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.94ee	92 30		sta ($30)			sta 	(codePtr)
.94f0	60		rts				rts
.94f1					MemoryAppend:
.94f1	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.94f3	85 30		sta $30				sta 	codePtr
.94f5	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.94f7	85 31		sta $31				sta 	codePtr+1
.94f9					_MAFindEnd:
.94f9	b2 30		lda ($30)			lda 	(codePtr)
.94fb	f0 0d		beq $950a			beq 	_MAFoundEnd
.94fd	18		clc				clc
.94fe	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.9500	65 30		adc $30				adc 	codePtr
.9502	85 30		sta $30				sta 	codePtr
.9504	90 02		bcc $9508			bcc 	_CREExit
.9506	e6 31		inc $31				inc 	codePtr+1
.9508					_CREExit:
.9508	80 ef		bra $94f9			bra 	_MAFindEnd
.950a					_MAFoundEnd:
.950a	ac 15 07	ldy $0715			ldy 	tokenOffset 				; bytes to copy
.950d	c0 04		cpy #$04			cpy 	#4 							; blank line
.950f	f0 0e		beq $951f			beq 	_MANoLine
.9511	a9 00		lda #$00			lda 	#0 							; end of program
.9513	91 30		sta ($30),y			sta 	(codePtr),y
.9515					_MACopy:
.9515	88		dey				dey
.9516	b9 15 07	lda $0715,y			lda 	tokenOffset,y
.9519	91 30		sta ($30),y			sta 	(codePtr),y
.951b	c0 00		cpy #$00			cpy 	#0
.951d	d0 f6		bne $9515			bne 	_MACopy
.951f					_MANoLine:
.951f	60		rts				rts
.9520					MemoryInline:
.9520	98		tya				tya 								; put address into stack,x
.9521	18		clc				clc
.9522	65 30		adc $30				adc 	codePtr
.9524	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.9527	a5 31		lda $31				lda 	codePtr+1
.9529	69 00		adc #$00			adc 	#0
.952b	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.952e	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.9531	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.9534	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./variants/memory.flat/transfer.asm

.9535					MemoryTransferAX:
.9535	85 36		sta $36				sta 	zTemp0 						; save line number zTemp0
.9537	86 37		stx $37				stx 	zTemp0+1
.9539	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.953b	85 30		sta $30				sta 	codePtr
.953d	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.953f	85 31		sta $31				sta 	codePtr+1
.9541					_MTAXLoop:
.9541	b2 30		lda ($30)			lda 	(codePtr)
.9543	f0 1d		beq $9562			beq 	_MTAXError 					; not found.
.9545	a0 01		ldy #$01			ldy 	#1 							; check LSB
.9547	b1 30		lda ($30),y			lda 	(codePtr),y
.9549	c5 36		cmp $36				cmp 	zTemp0
.954b	d0 07		bne $9554			bne 	_MTAXNext
.954d	c8		iny				iny 								; check MSB
.954e	b1 30		lda ($30),y			lda 	(codePtr),y
.9550	c5 37		cmp $37				cmp 	zTemp0+1
.9552	f0 0d		beq $9561			beq 	_MTAXExit 					; success !
.9554					_MTAXNext:
.9554	18		clc				clc
.9555	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.9557	65 30		adc $30				adc 	codePtr
.9559	85 30		sta $30				sta 	codePtr
.955b	90 02		bcc $955f			bcc 	_CREExit
.955d	e6 31		inc $31				inc 	codePtr+1
.955f					_CREExit:
.955f	80 e0		bra $9541			bra 	_MTAXLoop
.9561					_MTAXExit:
.9561	60		rts				rts
.9562					_MTAXError:
.9562	a9 0d		lda #$0d		lda	#13
.9564	4c 28 85	jmp $8528		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  End of listing
