
; 64tass Turbo Assembler Macro V1.56.2625 listing file
; 64tass -q -b -Wall -Wno-portable -c -L output/basic.lst -l output/basic.lbl -Wall -o basic.rom _basic.asm
; Thu Sep 29 12:43:58 2022

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: _basic.asm


;******  Processing file: ./aa_system/01common.inc

=$30					ZeroPageMandatory = $30
=$600					ZeroPagePreference = $600
=$700					MemoryStorage = $700
=$2000					BasicStart = $2000
=$8000					CodeStart = $8000
=$1000					VariableSpace = $1000
=$2000					EndVariableSpace = $2000
=8					MathStackSize = 8
=512					BasicStackSize = 512
=80					MaxLineSize = 80

;******  Return to file: _basic.asm


;******  Processing file: ./aa_system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./aa_system/04data.inc

.0030					codePtr:
>0030							.fill 	4
.0034					basicStack:
>0034							.fill 	2
.0036					zTemp0:
>0036							.fill 	2
.0038					zTemp1:
>0038							.fill 	2
.003a					zTemp2:
>003a							.fill 	2
=$80					NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20					NSBIsReference = $20 						; bit 5 : is a reference
=$10					NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18					NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03					NSBRefMask = $03 							; bits 0,1 : Bytes of reference, -1 (e.g. 00 = 1 byte, 11 = 4 bytes)
=$00					NSTInteger = $00 							; base types for bits 3..4
=$08					NSTFloat = $08
=$10					NSTString = $10
=$18					NSTProcedure = $18
.0600					NSStatus:
>0600							.fill 	MathStackSize
.0608					NSMantissa0:
>0608							.fill 	MathStackSize 				; (this is my integer mantissa system)
.0610					NSMantissa1:
>0610							.fill 	MathStackSize
.0618					NSMantissa2:
>0618							.fill 	MathStackSize
.0620					NSMantissa3:
>0620							.fill 	MathStackSize
.0628					NSExponent:
>0628							.fill 	MathStackSize
.0700					identStart:
>0700							.fill 	1
.0701					identTypeStart:
>0701							.fill 	1
.0702					identTypeEnd:
>0702							.fill 	1
.0703					identHash:
>0703							.fill 	1
.0704					identTypeByte:
>0704							.fill 	1	 						; (see tokenising.pdf)
.0705					encodeState:
>0705							.fill 	1
.0706					decimalCount:
>0706							.fill 	1
.0707					randomSeed:
>0707							.fill 	4
.070b					tokenOffset:
>070b							.fill 	1
.070c					tokenLineNumber:
>070c							.fill 	2
.070e					tokenBuffer:
>070e							.fill 	253
.080b					lineBuffer:
>080b							.fill 	MaxLineSize+1
.085c					numberBuffer:
>085c							.fill 	34

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/binary/handlers.inc


;******  Return to file: _basic.asm


;******  Processing file: ./generated/errors.inc

=1					ERRID_BREAK = 1
=2					ERRID_SYNTAX = 2
=3					ERRID_DIVZERO = 3
=4					ERRID_RANGE = 4
=5					ERRID_TYPE = 5
=6					ERRID_MEMORY = 6
=7					ERRID_ARGUMENT = 7
=8					ERRID_STOP = 8
=9					ERRID_STRING = 9
=10					ERRID_ASSERT = 10
=11					ERRID_DATA = 11
=12					ERRID_NOTDONE = 12

;******  Return to file: _basic.asm


;******  Processing file: ./generated/kwdconst.inc

=$00					KWD_LESSLESS                         = $00; $00 <<
=$01					KWD_LESSEQUAL                        = $01; $01 <=
=$02					KWD_LESSGREATER                      = $02; $02 <>
=$03					KWD_PLINGPLING3                      = $03; $03 !!3
=$04					KWD_GREATERLESS                      = $04; $04 ><
=$05					KWD_GREATEREQUAL                     = $05; $05 >=
=$06					KWD_GREATERGREATER                   = $06; $06 >>
=$07					KWD_PLINGPLING7                      = $07; $07 !!7
=$08					KWD_PLINGPLING8                      = $08; $08 !!8
=$09					KWD_PLINGPLING9                      = $09; $09 !!9
=$0a					KWD_PLINGPLING10                     = $0a; $0a !!10
=$0b					KWD_PLINGPLING11                     = $0b; $0b !!11
=$0c					KWD_PLINGPLING12                     = $0c; $0c !!12
=$0d					KWD_PLINGPLING13                     = $0d; $0d !!13
=$0e					KWD_PLINGPLING14                     = $0e; $0e !!14
=$0f					KWD_PLINGPLING15                     = $0f; $0f !!15
=$10					KWD_AT                               = $10; $10 @
=$11					KWD_PLINGPLING17                     = $11; $11 !!17
=$12					KWD_PLINGPLING18                     = $12; $12 !!18
=$13					KWD_LSQPAREN                         = $13; $13 [
=$14					KWD_BACKSLASH                        = $14; $14 \
=$15					KWD_RSQPAREN                         = $15; $15 ]
=$16					KWD_HAT                              = $16; $16 ^
=$17					KWD_UNDERSCORE                       = $17; $17 _
=$18					KWD_BQUOTE                           = $18; $18 `
=$19					KWD_PLINGPLING25                     = $19; $19 !!25
=$1a					KWD_PLINGPLING26                     = $1a; $1a !!26
=$1b					KWD_LCURLY                           = $1b; $1b {
=$1c					KWD_BAR                              = $1c; $1c |
=$1d					KWD_RCURLY                           = $1d; $1d }
=$1e					KWD_TILDE                            = $1e; $1e ~
=$21					KWD_PLING                            = $21; $21 !
=$22					KWD_DQUOTE                           = $22; $22 "
=$23					KWD_HASH                             = $23; $23 #
=$24					KWD_DOLLAR                           = $24; $24 $
=$25					KWD_PERCENT                          = $25; $25 %
=$26					KWD_AMPERSAND                        = $26; $26 &
=$27					KWD_QUOTE                            = $27; $27 '
=$28					KWD_LPAREN                           = $28; $28 (
=$29					KWD_RPAREN                           = $29; $29 )
=$2a					KWD_STAR                             = $2a; $2a *
=$2b					KWD_PLUS                             = $2b; $2b +
=$2c					KWD_COMMA                            = $2c; $2c ,
=$2d					KWD_MINUS                            = $2d; $2d -
=$2e					KWD_PERIOD                           = $2e; $2e .
=$2f					KWD_SLASH                            = $2f; $2f /
=$30					KWD_0                                = $30; $30 0
=$31					KWD_1                                = $31; $31 1
=$32					KWD_2                                = $32; $32 2
=$33					KWD_3                                = $33; $33 3
=$34					KWD_4                                = $34; $34 4
=$35					KWD_5                                = $35; $35 5
=$36					KWD_6                                = $36; $36 6
=$37					KWD_7                                = $37; $37 7
=$38					KWD_8                                = $38; $38 8
=$39					KWD_9                                = $39; $39 9
=$3a					KWD_COLON                            = $3a; $3a :
=$3b					KWD_SEMICOLON                        = $3b; $3b ;
=$3c					KWD_LESS                             = $3c; $3c <
=$3d					KWD_EQUAL                            = $3d; $3d =
=$3e					KWD_GREATER                          = $3e; $3e >
=$3f					KWD_QMARK                            = $3f; $3f ?
=$83					KWD_ABSLPAREN                        = $83; $83 ABS(
=$84					KWD_ALLOCLPAREN                      = $84; $84 ALLOC(
=$85					KWD_ASCLPAREN                        = $85; $85 ASC(
=$86					KWD_CHRDOLLARLPAREN                  = $86; $86 CHR$(
=$87					KWD_FALSE                            = $87; $87 FALSE
=$88					KWD_FRACLPAREN                       = $88; $88 FRAC(
=$89					KWD_INTLPAREN                        = $89; $89 INT(
=$8a					KWD_ISVALLPAREN                      = $8a; $8a ISVAL(
=$8b					KWD_LEFTDOLLARLPAREN                 = $8b; $8b LEFT$(
=$8c					KWD_LENLPAREN                        = $8c; $8c LEN(
=$8d					KWD_MIDDOLLARLPAREN                  = $8d; $8d MID$(
=$8e					KWD_NOTLPAREN                        = $8e; $8e NOT(
=$8f					KWD_RIGHTDOLLARLPAREN                = $8f; $8f RIGHT$(
=$90					KWD_RNDLPAREN                        = $90; $90 RND(
=$91					KWD_SGNLPAREN                        = $91; $91 SGN(
=$92					KWD_SPCLPAREN                        = $92; $92 SPC(
=$93					KWD_STRDOLLARLPAREN                  = $93; $93 STR$(
=$94					KWD_TRUE                             = $94; $94 TRUE
=$95					KWD_VALLPAREN                        = $95; $95 VAL(
=$96					KWD_FOR                              = $96; $96 FOR
=$97					KWD_IF                               = $97; $97 IF
=$98					KWD_PROC                             = $98; $98 PROC
=$99					KWD_REPEAT                           = $99; $99 REPEAT
=$9a					KWD_WHILE                            = $9a; $9a WHILE
=$9b					KWD_ENDIF                            = $9b; $9b ENDIF
=$9c					KWD_ENDPROC                          = $9c; $9c ENDPROC
=$9d					KWD_NEXT                             = $9d; $9d NEXT
=$9e					KWD_UNTIL                            = $9e; $9e UNTIL
=$9f					KWD_WEND                             = $9f; $9f WEND
=$a0					KWD_CALL                             = $a0; $a0 CALL
=$a1					KWD_CLS                              = $a1; $a1 CLS
=$a2					KWD_DATA                             = $a2; $a2 DATA
=$a3					KWD_DIM                              = $a3; $a3 DIM
=$a4					KWD_GOSUB                            = $a4; $a4 GOSUB
=$a5					KWD_GOTO                             = $a5; $a5 GOTO
=$a6					KWD_LET                              = $a6; $a6 LET
=$a7					KWD_PRINT                            = $a7; $a7 PRINT
=$a8					KWD_READ                             = $a8; $a8 READ
=$a9					KWD_REM                              = $a9; $a9 REM
=$aa					KWD_RETURN                           = $aa; $aa RETURN
=$ab					KWD_THEN                             = $ab; $ab THEN
=$ac					KWD_TO                               = $ac; $ac TO

;******  Return to file: _basic.asm


;******  Processing file: ./generated/kwdconst0.inc

=$80					KWC_EOL = $80
=$ff					KWC_STRING = $FF
=$fe					KWC_HEXCONST = $FE
=$96					KWC_FIRST_STRUCTURE = $96
=$9b					KWC_FIRST_STRUCTURE_DEC = $9b
=$9f					KWC_LAST_STRUCTURE = $9f
=$83					KWC_FIRST_UNARY = $83
=$95					KWC_LAST_UNARY = $95

;******  Return to file: _basic.asm


;******  Processing file: ./memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./aa_system/00start.asm

.8000	a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.8002	9a		txs				txs
.8003	20 4c 81	jsr $814c			jsr 	NewCommand 					; erase current program
.8006	20 d7 88	jsr $88d7			jsr 	BackloadProgram
.8009	4c 63 81	jmp $8163			jmp 	CommandRun
.800c					WarmStart:
.800c	a9 57		lda #$57			lda 	#"W"
.800e	20 12 93	jsr $9312			jsr 	EXTPrintCharacter
.8011	80 fe		bra $8011	halt:	bra 	halt
>8013							.align 2

;******  Processing file: ./aa_system/../generated/vectors.dat

.8014					VectorSetPunc:
>8014	4b 82					.word	ShiftLeft                        ; $00 <<
>8016	92 8d					.word	BinaryCompareLessEqual           ; $01 <=
>8018	88 8d					.word	BinaryCompareNotEqual            ; $02 <>
>801a	55 92					.word	SyntaxError                      ; $03 !!3
>801c	55 92					.word	SyntaxError                      ; $04 ><
>801e	9c 8d					.word	BinaryCompareGreaterEqual        ; $05 >=
>8020	4e 82					.word	ShiftRight                       ; $06 >>
>8022	55 92					.word	SyntaxError                      ; $07 !!7
>8024	55 92					.word	SyntaxError                      ; $08 !!8
>8026	55 92					.word	SyntaxError                      ; $09 !!9
>8028	55 92					.word	SyntaxError                      ; $0a !!10
>802a	55 92					.word	SyntaxError                      ; $0b !!11
>802c	55 92					.word	SyntaxError                      ; $0c !!12
>802e	55 92					.word	SyntaxError                      ; $0d !!13
>8030	55 92					.word	SyntaxError                      ; $0e !!14
>8032	55 92					.word	SyntaxError                      ; $0f !!15
>8034	55 92					.word	SyntaxError                      ; $10 @
>8036	55 92					.word	SyntaxError                      ; $11 !!17
>8038	55 92					.word	SyntaxError                      ; $12 !!18
>803a	55 92					.word	SyntaxError                      ; $13 [
>803c	02 8e					.word	IntegerDivide                    ; $14 \
>803e	55 92					.word	SyntaxError                      ; $15 ]
>8040	d1 83					.word	EorInteger                       ; $16 ^
>8042	55 92					.word	SyntaxError                      ; $17 _
>8044	55 92					.word	SyntaxError                      ; $18 `
>8046	55 92					.word	SyntaxError                      ; $19 !!25
>8048	55 92					.word	SyntaxError                      ; $1a !!26
>804a	55 92					.word	SyntaxError                      ; $1b {
>804c	8c 83					.word	OraInteger                       ; $1c |
>804e	55 92					.word	SyntaxError                      ; $1d }
>8050	55 92					.word	SyntaxError                      ; $1e ~
>8052	55 92					.word	SyntaxError                      ; $1f [7m<7F>[m
>8054	55 92					.word	SyntaxError                      ; $20
>8056	55 92					.word	SyntaxError                      ; $21 !
>8058	55 92					.word	SyntaxError                      ; $22 "
>805a	55 92					.word	SyntaxError                      ; $23 #
>805c	55 92					.word	SyntaxError                      ; $24 $
>805e	4e 8e					.word	IntegerModulus                   ; $25 %
>8060	47 83					.word	AndInteger                       ; $26 &
>8062	55 92					.word	SyntaxError                      ; $27 '
>8064	55 92					.word	SyntaxError                      ; $28 (
>8066	55 92					.word	SyntaxError                      ; $29 )
>8068	c2 8e					.word	MulInteger                       ; $2a *
>806a	e1 82					.word	AddInteger                       ; $2b +
>806c	55 92					.word	SyntaxError                      ; $2c ,
>806e	1c 83					.word	SubInteger                       ; $2d -
>8070	55 92					.word	SyntaxError                      ; $2e .
>8072	59 90					.word	FDivideCommand                   ; $2f /
>8074	55 92					.word	SyntaxError                      ; $30 0
>8076	55 92					.word	SyntaxError                      ; $31 1
>8078	55 92					.word	SyntaxError                      ; $32 2
>807a	55 92					.word	SyntaxError                      ; $33 3
>807c	55 92					.word	SyntaxError                      ; $34 4
>807e	55 92					.word	SyntaxError                      ; $35 5
>8080	55 92					.word	SyntaxError                      ; $36 6
>8082	55 92					.word	SyntaxError                      ; $37 7
>8084	55 92					.word	SyntaxError                      ; $38 8
>8086	55 92					.word	SyntaxError                      ; $39 9
>8088	55 92					.word	SyntaxError                      ; $3a :
>808a	55 92					.word	SyntaxError                      ; $3b ;
>808c	74 8d					.word	BinaryCompareLess                ; $3c <
>808e	6a 8d					.word	BinaryCompareEqual               ; $3d =
>8090	7e 8d					.word	BinaryCompareGreater             ; $3e >
>8092	55 92					.word	SyntaxError                      ; $3f ?
.8094					VectorSet0:
>8094	9a 81					.word	EOLCommand                       ; $80 !0:EOF
>8096	a7 81					.word	Shift1Command                    ; $81 !1:SH1
>8098	55 92					.word	SyntaxError                      ; $82 !2:SH2
>809a	9f 91					.word	AbsUnary                         ; $83 ABS(
>809c	55 92					.word	SyntaxError                      ; $84 ALLOC(
>809e	af 91					.word	AscUnary                         ; $85 ASC(
>80a0	55 92					.word	SyntaxError                      ; $86 CHR$(
>80a2	66 8d					.word	UnaryFalse                       ; $87 FALSE
>80a4	bc 91					.word	FracUnary                        ; $88 FRAC(
>80a6	d2 91					.word	IntUnary                         ; $89 INT(
>80a8	55 92					.word	SyntaxError                      ; $8a ISVAL(
>80aa	55 92					.word	SyntaxError                      ; $8b LEFT$(
>80ac	e4 91					.word	LenUnary                         ; $8c LEN(
>80ae	55 92					.word	SyntaxError                      ; $8d MID$(
>80b0	32 87					.word	Unary_Not                        ; $8e NOT(
>80b2	55 92					.word	SyntaxError                      ; $8f RIGHT$(
>80b4	48 87					.word	Unary_Rnd                        ; $90 RND(
>80b6	fe 91					.word	SgnUnary                         ; $91 SGN(
>80b8	55 92					.word	SyntaxError                      ; $92 SPC(
>80ba	55 92					.word	SyntaxError                      ; $93 STR$(
>80bc	5a 8d					.word	UnaryTrue                        ; $94 TRUE
>80be	55 92					.word	SyntaxError                      ; $95 VAL(
>80c0	55 92					.word	SyntaxError                      ; $96 FOR
>80c2	55 92					.word	SyntaxError                      ; $97 IF
>80c4	55 92					.word	SyntaxError                      ; $98 PROC
>80c6	55 92					.word	SyntaxError                      ; $99 REPEAT
>80c8	55 92					.word	SyntaxError                      ; $9a WHILE
>80ca	55 92					.word	SyntaxError                      ; $9b ENDIF
>80cc	55 92					.word	SyntaxError                      ; $9c ENDPROC
>80ce	55 92					.word	SyntaxError                      ; $9d NEXT
>80d0	55 92					.word	SyntaxError                      ; $9e UNTIL
>80d2	55 92					.word	SyntaxError                      ; $9f WEND
>80d4	18 81					.word	CallCommand                      ; $a0 CALL
>80d6	55 92					.word	SyntaxError                      ; $a1 CLS
>80d8	55 92					.word	SyntaxError                      ; $a2 DATA
>80da	55 92					.word	SyntaxError                      ; $a3 DIM
>80dc	55 92					.word	SyntaxError                      ; $a4 GOSUB
>80de	55 92					.word	SyntaxError                      ; $a5 GOTO
>80e0	55 92					.word	SyntaxError                      ; $a6 LET
>80e2	55 92					.word	SyntaxError                      ; $a7 PRINT
>80e4	55 92					.word	SyntaxError                      ; $a8 READ
>80e6	56 81					.word	RemCommand                       ; $a9 REM
>80e8	55 92					.word	SyntaxError                      ; $aa RETURN
>80ea	55 92					.word	SyntaxError                      ; $ab THEN
>80ec	55 92					.word	SyntaxError                      ; $ac TO
.80ee					VectorSet1:
>80ee	55 92					.word	SyntaxError                      ; $80 !0:EOF
>80f0	55 92					.word	SyntaxError                      ; $81 !1:SH1
>80f2	55 92					.word	SyntaxError                      ; $82 !2:SH2
>80f4	0a 81					.word	AssertCommand                    ; $83 ASSERT
>80f6	24 81					.word	ClearCommand                     ; $84 CLEAR
>80f8	49 81					.word	EndCommand                       ; $85 END
>80fa	55 92					.word	SyntaxError                      ; $86 LIST
>80fc	4c 81					.word	NewCommand                       ; $87 NEW
>80fe	55 92					.word	SyntaxError                      ; $88 RESTORE
>8100	63 81					.word	CommandRUN                       ; $89 RUN
>8102	55 92					.word	SyntaxError                      ; $8a STOP
.8104					VectorSet2:
>8104	55 92					.word	SyntaxError                      ; $80 !0:EOF
>8106	55 92					.word	SyntaxError                      ; $81 !1:SH1
>8108	55 92					.word	SyntaxError                      ; $82 !2:SH2

;******  Return to file: ./aa_system/00start.asm


;******  Return to file: _basic.asm


;******  Processing file: ./commands/assert.asm

.810a					AssertCommand:
.810a	20 c1 87	jsr $87c1			jsr 	EvaluateInteger 			; the assert test
.810d	20 77 88	jsr $8877			jsr 	NSMIsZero 					; exit if result is non zero.
.8110	d0 05		bne $8117			bne 	_ACExit
.8112	a9 0a		lda #$0a		lda	#10
.8114	4c af 81	jmp $81af		jmp	ErrorHandler
.8117					_ACExit:
.8117	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./commands/call.asm

.8118					CallCommand:
.8118	20 d6 87	jsr $87d6			jsr 	Evaluate16BitInteger
.811b	ad 10 06	lda $0610			lda 	NSMantissa1
.811e	8d 09 06	sta $0609			sta 	NSMantissa0+1
.8121	6c 08 06	jmp ($0608)			jmp 	(NSMantissa0)

;******  Return to file: _basic.asm


;******  Processing file: ./commands/clear.asm

.8124					ClearCommand:
.8124	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.8126	85 36		sta $36				sta 	0+zTemp0
.8128	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.812a	85 37		sta $37				sta 	1+zTemp0
.812c					_ClearZeroLoop:
.812c	b2 36		lda ($36)			lda 	(zTemp0) 					; end of variables
.812e	f0 18		beq $8148			beq 	_ClearZeroEnd
.8130	a0 03		ldy #$03			ldy 	#3 							; erase the variables
.8132	a9 00		lda #$00			lda 	#0
.8134					_ClearOneVariable:
.8134	91 36		sta ($36),y			sta 	(zTemp0),y
.8136	c8		iny				iny
.8137	c0 08		cpy #$08			cpy 	#8
.8139	d0 f9		bne $8134			bne 	_ClearOneVariable
.813b	18		clc				clc 								; go to the next variable
.813c	b2 36		lda ($36)			lda 	(zTemp0)
.813e	65 36		adc $36				adc 	zTemp0
.8140	85 36		sta $36				sta 	zTemp0
.8142	90 e8		bcc $812c			bcc 	_ClearZeroLoop
.8144	e6 37		inc $37				inc 	zTemp0+1
.8146	80 e4		bra $812c			bra 	_ClearZeroLoop
.8148					_ClearZeroEnd:
.8148	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./commands/end.asm

.8149					EndCommand:
.8149	4c 0c 80	jmp $800c			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./commands/new.asm

.814c					NewCommand:
.814c	20 84 88	jsr $8884			jsr 	MemoryNew
.814f	9c 00 10	stz $1000			stz 	VariableSpace 				; erase all variables.
.8152	20 24 81	jsr $8124			jsr 	ClearCommand 				; clear everything.
.8155	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./commands/rem.asm

.8156					RemCommand:
.8156	b1 30		lda ($30),y			lda 	(codePtr),y
.8158	c9 ff		cmp #$ff			cmp 	#KWC_STRING
.815a	d0 06		bne $8162			bne 	_RMExit
.815c	c8		iny				iny
.815d	98		tya				tya
.815e	38		sec				sec
.815f	71 30		adc ($30),y			adc 	(codePtr),y
.8161	a8		tay				tay
.8162					_RMExit:
.8162	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./commands/run.asm

.8163					CommandRUN:
.8163	20 24 81	jsr $8124			jsr 	ClearCommand 				; clear variable/stacks/etc.
.8166	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.8168	85 30		sta $30				sta 	codePtr
.816a	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.816c	85 31		sta $31				sta 	codePtr+1
.816e					RUNNewLine:
.816e	b2 30		lda ($30)			lda 	(codePtr)
.8170	f0 25		beq $8197			beq 	CRNoProgram         		; no then END.
.8172	a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack
.8174	9a		txs				txs
.8175					RUNCodePointerLine:
.8175	a0 02		ldy #$02			ldy 	#2 							; start of program
.8177					_CRIncMainLoop:
.8177	c8		iny				iny
.8178					_CRMainLoop:
.8178	b1 30		lda ($30),y			lda 	(codePtr),y
.817a	10 10		bpl $818c			bpl 	_CRNotKeyword
.817c	c9 96		cmp #$96			cmp 	#KWC_LAST_UNARY+1 			; if after unary, legitimate command
.817e	b0 04		bcs $8184			bcs 	_CRIsKeyword
.8180	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if unary, syntax error.
.8182	b0 0d		bcs $8191			bcs		_CRSyntaxError
.8184					_CRIsKeyword:
.8184	c8		iny				iny 								; consume command
.8185	0a		asl a				asl 	a 							; double losing the MSB which is '1' as tokens are $80-$FF
.8186	aa		tax				tax 								; put in X for vector jump
.8187	20 94 81	jsr $8194			jsr 	_CRCallVector0 				; call the vector - effectively jsr (vectortable,X)
.818a	80 ec		bra $8178			bra 	_CRMainLoop 				; and loop round
.818c					_CRNotKeyword:
.818c	c9 3a		cmp #$3a			cmp 	#KWD_COLON 					; if a :, consume it and go round.
.818e	f0 e7		beq $8177			beq 	_CRIncMainLoop
>8190	db						.byte 	$DB 						; causes a break in the emulator
.8191					_CRSyntaxError:
.8191	4c 55 92	jmp $9255			jmp 	SyntaxError
.8194					_CRCallVector0:
.8194	7c 94 80	jmp ($8094,x)			jmp 	(VectorSet0,x)
.8197					CRNoProgram:
.8197	4c 49 81	jmp $8149			jmp 	EndCommand
.819a					EOLCommand:
.819a	18		clc				clc
.819b	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.819d	65 30		adc $30				adc 	codePtr
.819f	85 30		sta $30				sta 	codePtr
.81a1	90 02		bcc $81a5			bcc 	_CREExit
.81a3	e6 31		inc $31				inc 	codePtr+1
.81a5					_CREExit:
.81a5	80 c7		bra $816e			bra 	RunNewLine
.81a7					Shift1Command:
.81a7	b1 30		lda ($30),y			lda 	(codePtr),y
.81a9	c8		iny				iny
.81aa	0a		asl a				asl 	a
.81ab	aa		tax				tax
.81ac	7c ee 80	jmp ($80ee,x)			jmp 	(VectorSet1,x)

;******  Return to file: _basic.asm


;******  Processing file: ./errors/charcheck.asm

.8d41					CheckRightBracket:
.8d41	b1 30		lda ($30),y			lda 	(codePtr),y
.8d43	c8		iny				iny
.8d44	c9 29		cmp #$29			cmp 	#KWD_RPAREN 						; exit if matches
.8d46	d0 0f		bne $8d57			bne 	CNAFail
.8d48	60		rts				rts
.8d49					CheckComma:
.8d49	b1 30		lda ($30),y			lda 	(codePtr),y
.8d4b	c8		iny				iny
.8d4c	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 						; exit if matches
.8d4e	d0 07		bne $8d57			bne 	CNAFail
.8d50	60		rts				rts
.8d51					CheckNextA:
.8d51	d1 30		cmp ($30),y			cmp 	(codePtr),y
.8d53	d0 02		bne $8d57			bne 	CNAFail
.8d55	c8		iny				iny 								; skip character
.8d56	60		rts				rts 								; and exit
.8d57					CNAFail:
.8d57	4c 55 92	jmp $9255			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./errors/errors.asm

.81af					ErrorHandler:
.81af	a8		tay				tay 								; find the error text
.81b0	f0 42		beq $81f4			beq 	_EHEnd
.81b2	a2 00		ldx #$00			ldx 	#0
.81b4					_EHFind:
.81b4	88		dey				dey 								; found the error text ?
.81b5	f0 0a		beq $81c1			beq 	_EHFound
.81b7					_EHFindZero:
.81b7	bd 6e 92	lda $926e,x			lda 	ErrorText,x 				; find the next error
.81ba	e8		inx				inx
.81bb	c9 00		cmp #$00			cmp 	#0
.81bd	d0 f8		bne $81b7			bne 	_EHFindZero
.81bf	80 f3		bra $81b4			bra 	_EHFind
.81c1					_EHFound:
.81c1	bd 6e 92	lda $926e,x			lda 	ErrorText,x 				; print the message
.81c4	20 12 93	jsr $9312			jsr 	EXTPrintCharacter
.81c7	e8		inx				inx
.81c8	bd 6e 92	lda $926e,x			lda 	ErrorText,x
.81cb	d0 f4		bne $81c1			bne 	_EHFound
.81cd	a0 01		ldy #$01			ldy 	#1 							; if line number zero don't print i
.81cf	b1 30		lda ($30),y			lda 	(codePtr),y
.81d1	d0 05		bne $81d8			bne 	_EHAtMsg
.81d3	c8		iny				iny
.81d4	b1 30		lda ($30),y			lda 	(codePtr),y
.81d6	f0 17		beq $81ef			beq 	_EHCREnd
.81d8					_EHAtMsg:
.81d8	a2 81		ldx #$81			ldx 	#_AtMsg >> 8 				; print " at "
.81da	a9 f7		lda #$f7			lda 	#_AtMsg & $FF
.81dc	20 01 82	jsr $8201			jsr 	PrintStringXA
.81df	a0 01		ldy #$01			ldy 	#1 							; line number into XA
.81e1	b1 30		lda ($30),y			lda 	(codePtr),y
.81e3	48		pha				pha
.81e4	c8		iny				iny
.81e5	b1 30		lda ($30),y			lda 	(codePtr),y
.81e7	aa		tax				tax
.81e8	68		pla				pla
.81e9	20 43 8f	jsr $8f43			jsr 	ConvertInt16 				; convert XA to string
.81ec	20 01 82	jsr $8201			jsr 	PrintStringXA 				; and print it.
.81ef					_EHCREnd:
.81ef	a9 0d		lda #$0d			lda 	#13 						; new line
.81f1	20 12 93	jsr $9312			jsr 	EXTPrintCharacter
.81f4					_EHEnd:
.81f4	4c 0c 80	jmp $800c			jmp 	WarmStart
>81f7	20 61 74 20 6c 69 6e 65		_AtMsg:	.text 	" at line ",0
>81ff	20 00
.8201					PrintStringXA:
.8201	86 37		stx $37				stx 	zTemp0+1
.8203	85 36		sta $36				sta 	zTemp0
.8205	a0 00		ldy #$00			ldy 	#0
.8207					_PSXALoop:
.8207	b1 36		lda ($36),y			lda 	(zTemp0),y
.8209	f0 06		beq $8211			beq 	_PSXAExit
.820b	20 12 93	jsr $9312			jsr 	EXTPrintCharacter
.820e	c8		iny				iny
.820f	80 f6		bra $8207			bra 	_PSXALoop
.8211					_PSXAExit:
.8211	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/binary/compare.asm

.8d5a					UnaryTrue:
.8d5a	fa		plx				plx
.8d5b					ReturnTrue:
.8d5b	a9 01		lda #$01			lda 	#1  						; set to 1
.8d5d	20 49 88	jsr $8849			jsr 	NSMSetByte
.8d60	a9 80		lda #$80			lda 	#$80 						; set sign flag, so it is -1
.8d62	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8d65	60		rts				rts
.8d66					UnaryFalse:
.8d66	fa		plx				plx
.8d67					ReturnFalse:
.8d67	4c 47 88	jmp $8847			jmp 	NSMSetZero 					; set it all to zero
.8d6a					BinaryCompareEqual:
.8d6a	fa		plx				plx
.8d6b	20 a6 8d	jsr $8da6			jsr 	CompareBaseCode
.8d6e	c9 00		cmp #$00			cmp 	#0
.8d70	f0 e9		beq $8d5b			beq 	ReturnTrue
.8d72	80 f3		bra $8d67			bra 	ReturnFalse
.8d74					BinaryCompareLess:
.8d74	fa		plx				plx
.8d75	20 a6 8d	jsr $8da6			jsr 	CompareBaseCode
.8d78	c9 ff		cmp #$ff			cmp 	#$FF
.8d7a	f0 df		beq $8d5b			beq 	ReturnTrue
.8d7c	80 e9		bra $8d67			bra 	ReturnFalse
.8d7e					BinaryCompareGreater:
.8d7e	fa		plx				plx
.8d7f	20 a6 8d	jsr $8da6			jsr 	CompareBaseCode
.8d82	c9 01		cmp #$01			cmp 	#1
.8d84	f0 d5		beq $8d5b			beq 	ReturnTrue
.8d86	80 df		bra $8d67			bra 	ReturnFalse
.8d88					BinaryCompareNotEqual:
.8d88	fa		plx				plx
.8d89	20 a6 8d	jsr $8da6			jsr 	CompareBaseCode
.8d8c	c9 00		cmp #$00			cmp 	#0
.8d8e	d0 cb		bne $8d5b			bne 	ReturnTrue
.8d90	80 d5		bra $8d67			bra 	ReturnFalse
.8d92					BinaryCompareLessEqual:
.8d92	fa		plx				plx
.8d93	20 a6 8d	jsr $8da6			jsr 	CompareBaseCode
.8d96	c9 01		cmp #$01			cmp 	#1
.8d98	d0 c1		bne $8d5b			bne 	ReturnTrue
.8d9a	80 cb		bra $8d67			bra 	ReturnFalse
.8d9c					BinaryCompareGreaterEqual:
.8d9c	fa		plx				plx
.8d9d	20 a6 8d	jsr $8da6			jsr 	CompareBaseCode
.8da0	c9 ff		cmp #$ff			cmp 	#$FF
.8da2	d0 b7		bne $8d5b			bne 	ReturnTrue
.8da4	80 c1		bra $8d67			bra 	ReturnFalse
.8da6					CompareBaseCode:
.8da6	20 95 84	jsr $8495			jsr 	DereferenceTopTwo 			; make both values if references.
.8da9	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if either is a string.
.8dac	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8daf	29 10		and #$10			and 	#NSTString
.8db1	d0 40		bne $8df3			bne 	_CBCString
.8db3	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check both are integers
.8db6	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8db9	d0 3b		bne $8df6			bne 	_CBCFloat
.8dbb	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8dbe	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8dc1	29 08		and #$08			and 	#NSTFloat
.8dc3	d0 31		bne $8df6			bne 	_CBCFloat
.8dc5	20 f9 8d	jsr $8df9			jsr 	CompareFixMinusZero
.8dc8	e8		inx				inx
.8dc9	20 f9 8d	jsr $8df9			jsr 	CompareFixMinusZero
.8dcc	ca		dex				dex
.8dcd	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; are the signs different ?
.8dd0	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.8dd3	10 0b		bpl $8de0			bpl 	_CDCSameSign
.8dd5	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; if first one is -ve
.8dd8	30 16		bmi $8df0			bmi 	_CBCLess 					; return $FF
.8dda					_CBCGreater:
.8dda	a9 01		lda #$01			lda 	#1
.8ddc	60		rts				rts
.8ddd					_CBCEqual:
.8ddd	a9 00		lda #$00			lda 	#0
.8ddf	60		rts				rts
.8de0					_CDCSameSign:
.8de0	20 bb 82	jsr $82bb			jsr 	SubTopTwoStack 				; unsigned subtract
.8de3	20 77 88	jsr $8877			jsr 	NSMIsZero 					; or the mantissa together
.8de6	f0 f5		beq $8ddd			beq 	_CBCEqual 					; -0 == 0
.8de8	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; sign of the result. if +ve return $01 else return $FF
.8deb	5d 01 06	eor $0601,x			eor 	NSStatus+1,x 				; however if both were -ve this is inverted
.8dee	10 ea		bpl $8dda			bpl 	_CBCGreater
.8df0					_CBCLess:
.8df0	a9 ff		lda #$ff			lda 	#$FF
.8df2	60		rts				rts
.8df3					_CBCString:
.8df3	4c 12 82	jmp $8212			jmp 	CompareStrings
.8df6					_CBCFloat:
.8df6	4c 3f 90	jmp $903f			jmp 	CompareFloat
.8df9					CompareFixMinusZero:
.8df9	20 77 88	jsr $8877			jsr 	NSMIsZero
.8dfc	d0 03		bne $8e01			bne 	_CFXMZNotZero
.8dfe	9e 00 06	stz $0600,x			stz 	NSStatus,x
.8e01					_CFXMZNotZero:
.8e01	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/binary/divide.asm

.8e02					IntegerDivide:
.8e02	fa		plx				plx
.8e03	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8e06	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8e09	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8e0a	0a		asl a				asl 	a
.8e0b	10 05		bpl $8e12			bpl 	_NotRef
.8e0d	48		pha				pha
.8e0e	20 95 84	jsr $8495			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8e11	68		pla				pla
.8e12					_NotRef:
.8e12	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8e14	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8e17	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8e1a	f0 03		beq $8e1f			beq 	_IntegerCode 				; if clear, then we have two integers
.8e1c	4c 5f 92	jmp $925f			jmp 	TypeError 					; anything else, type mismatch.
.8e1f					_IntegerCode:
.8e1f	20 41 8e	jsr $8e41			jsr 	CheckDivideZero 			; do div zero check
.8e22	20 78 8e	jsr $8e78			jsr 	Int32Divide 				; do the division
.8e25	20 35 8f	jsr $8f35			jsr 	CalculateSign 				; calculate result sign
.8e28					NSMCopyPlusTwoToZero:
.8e28	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.8e2b	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8e2e	bd 12 06	lda $0612,x			lda 	NSMantissa1+2,x
.8e31	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8e34	bd 1a 06	lda $061a,x			lda 	NSMantissa2+2,x
.8e37	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8e3a	bd 22 06	lda $0622,x			lda 	NSMantissa3+2,x
.8e3d	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8e40	60		rts				rts
.8e41					CheckDivideZero:
.8e41	e8		inx				inx
.8e42	20 77 88	jsr $8877			jsr 	NSMIsZero
.8e45	f0 02		beq $8e49			beq 	_CDVError
.8e47	ca		dex				dex
.8e48	60		rts				rts
.8e49					_CDVError:
.8e49	a9 03		lda #$03		lda	#3
.8e4b	4c af 81	jmp $81af		jmp	ErrorHandler
.8e4e					IntegerModulus:
.8e4e	fa		plx				plx
.8e4f	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8e52	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8e55	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8e56	0a		asl a				asl 	a
.8e57	10 05		bpl $8e5e			bpl 	_NotRef
.8e59	48		pha				pha
.8e5a	20 95 84	jsr $8495			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8e5d	68		pla				pla
.8e5e					_NotRef:
.8e5e	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8e60	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8e63	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8e66	f0 03		beq $8e6b			beq 	_IntegerCode 				; if clear, then we have two integers
.8e68	4c 5f 92	jmp $925f			jmp 	TypeError 					; anything else, type mismatch.
.8e6b					_IntegerCode:
.8e6b	20 41 8e	jsr $8e41			jsr 	CheckDivideZero 			; do div zero check
.8e6e	20 78 8e	jsr $8e78			jsr 	Int32Divide 				; do the division
.8e71	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; clear the sign bit.
.8e74	5e 00 06	lsr $0600,x			lsr 	NSStatus,x
.8e77	60		rts				rts
.8e78					Int32Divide:
.8e78	48		pha				pha 								; save AXY
.8e79	5a		phy				phy
.8e7a	20 1e 88	jsr $881e			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.8e7d	20 43 88	jsr $8843			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.8e80	a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.8e82					_I32DivideLoop:
.8e82	e8		inx				inx
.8e83	e8		inx				inx
.8e84	20 5c 88	jsr $885c			jsr 	NSMShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.8e87	ca		dex				dex
.8e88	ca		dex				dex
.8e89	20 5d 88	jsr $885d			jsr 	NSMRotateLeft
.8e8c	20 b8 8e	jsr $8eb8			jsr 	DivideCheckSubtract 		; check if subtract possible
.8e8f	90 03		bcc $8e94			bcc 	_I32DivideNoCarryIn
.8e91	fe 0a 06	inc $060a,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.8e94					_I32DivideNoCarryIn:
.8e94	88		dey				dey 								; loop round till division completed.
.8e95	d0 eb		bne $8e82			bne 	_I32DivideLoop
.8e97	7a		ply				ply 								; restore AXY and exit
.8e98	68		pla				pla
.8e99	60		rts				rts
.8e9a					Int32ShiftDivide:
.8e9a	48		pha				pha 								; save AY
.8e9b	5a		phy				phy
.8e9c	e8		inx				inx 								; clear S[X+2]
.8e9d	e8		inx				inx
.8e9e	20 47 88	jsr $8847			jsr 	NSMSetZero
.8ea1	ca		dex				dex
.8ea2	ca		dex				dex
.8ea3	a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.8ea5					_I32SDLoop:
.8ea5	20 b8 8e	jsr $8eb8			jsr 	DivideCheckSubtract 		; check if subtract possible
.8ea8	e8		inx				inx
.8ea9	e8		inx				inx
.8eaa	20 5d 88	jsr $885d			jsr 	NSMRotateLeft				; shift 64 bit FPA left, rotating carry in
.8ead	ca		dex				dex
.8eae	ca		dex				dex
.8eaf	20 5d 88	jsr $885d			jsr 	NSMRotateLeft
.8eb2	88		dey				dey 	 							; do 31 times
.8eb3	d0 f0		bne $8ea5			bne 	_I32SDLoop
.8eb5	7a		ply				ply 								; restore AY and exit
.8eb6	68		pla				pla
.8eb7	60		rts				rts
.8eb8					DivideCheckSubtract:
.8eb8	20 bb 82	jsr $82bb			jsr 	SubTopTwoStack 				; subtract Stack[X+1] from Stack[X+0]
.8ebb	b0 04		bcs $8ec1			bcs 	_DCSExit 					; if carry set, then could do, exit
.8ebd	20 95 82	jsr $8295			jsr 	AddTopTwoStack 				; add it back in
.8ec0	18		clc				clc 								; and return False
.8ec1					_DCSExit:
.8ec1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/binary/multiply.asm

.8ec2					MulInteger:
.8ec2	fa		plx				plx
.8ec3	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8ec6	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8ec9	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8eca	0a		asl a				asl 	a
.8ecb	10 05		bpl $8ed2			bpl 	_NotRef
.8ecd	48		pha				pha
.8ece	20 95 84	jsr $8495			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8ed1	68		pla				pla
.8ed2					_NotRef:
.8ed2	0a		asl a				asl 	a 							; put MSB of type into A:7
.8ed3	30 0b		bmi $8ee0			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.8ed5	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8ed8	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8edb	f0 06		beq $8ee3			beq 	_IntegerCode 				; if clear, then we have two integers
.8edd	4c 16 91	jmp $9116			jmp 	FloatingPointMultiply 							; otherwise at least one float.
.8ee0					_StringData:
.8ee0	4c 69 92	jmp $9269			jmp 	NotDoneError							; at least one string - don't know both are strings.
.8ee3					_IntegerCode:
.8ee3	20 f0 8e	jsr $8ef0			jsr 	MultiplyShort
.8ee6	c9 00		cmp #$00			cmp 	#0
.8ee8	f0 05		beq $8eef			beq 	_MIExit
.8eea	a9 04		lda #$04		lda	#4
.8eec	4c af 81	jmp $81af		jmp	ErrorHandler
.8eef					_MIExit:
.8eef	60		rts				rts
.8ef0					MultiplyShort:
.8ef0	5a		phy				phy 								; save Y
.8ef1	20 1e 88	jsr $881e			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.8ef4	20 43 88	jsr $8843			jsr 	NSMSetZeroMantissaOnly 		; set mantissa S[X] to zero
.8ef7	a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.8ef9					_I32MLoop:
.8ef9	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.8efc	1d 12 06	ora $0612,x			ora 	NSMantissa1+2,x
.8eff	1d 1a 06	ora $061a,x			ora 	NSMantissa2+2,x
.8f02	1d 22 06	ora $0622,x			ora 	NSMantissa3+2,x
.8f05	f0 28		beq $8f2f			beq 	_I32MExit 					; exit if zero
.8f07	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.8f0a	29 01		and #$01			and 	#1
.8f0c	f0 0e		beq $8f1c			beq 	_I32MNoAdd
.8f0e	20 95 82	jsr $8295			jsr 	AddTopTwoStack 				; if so add S[X+1] to S[X+0]
.8f11	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.8f14	10 06		bpl $8f1c			bpl 	_I32MNoAdd
.8f16					_I32ShiftRight:
.8f16	20 6a 88	jsr $886a			jsr 	NSMShiftRight 				; shift S[X] right
.8f19	c8		iny				iny 								; increment shift count
.8f1a	80 0a		bra $8f26			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.8f1c					_I32MNoAdd:
.8f1c	3c 21 06	bit $0621,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.8f1f	70 f5		bvs $8f16			bvs 	_I32ShiftRight 				; instead.
.8f21	e8		inx				inx
.8f22	20 5c 88	jsr $885c			jsr 	NSMShiftLeft 				; shift additive S[X+1] left
.8f25	ca		dex				dex
.8f26					_I32MShiftUpper:
.8f26	e8		inx				inx 								; shift S[X+2] right
.8f27	e8		inx				inx
.8f28	20 6a 88	jsr $886a			jsr 	NSMShiftRight
.8f2b	ca		dex				dex
.8f2c	ca		dex				dex
.8f2d	80 ca		bra $8ef9			bra 	_I32MLoop 					; try again.
.8f2f					_I32MExit:
.8f2f	20 35 8f	jsr $8f35			jsr 	CalculateSign
.8f32	98		tya				tya 								; shift in A
.8f33	7a		ply				ply 								; restore Y and exit
.8f34	60		rts				rts
.8f35					CalculateSign:
.8f35	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.8f38	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; shift result left
.8f3b	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.8f3e	0a		asl a				asl 	a 							; shift bit 7 into carry
.8f3f	7e 00 06	ror $0600,x			ror 	NSStatus,x 					; shift right into status byte.
.8f42	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/binary/scompare.asm

.8212					CompareStrings:
.8212	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check both are strings
.8215	3d 01 06	and $0601,x			and 	NSStatus+1,x
.8218	29 10		and #$10			and 	#NSBIsString
.821a	f0 2c		beq $8248			beq 	_CSTypeError
.821c	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy string addresses to zTemp0/1
.821f	85 36		sta $36				sta 	zTemp0
.8221	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8224	85 37		sta $37				sta 	zTemp0+1
.8226	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.8229	85 38		sta $38				sta 	zTemp1
.822b	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.822e	85 39		sta $39				sta 	zTemp1+1
.8230	5a		phy				phy 								; save Y so we can access strings
.8231	a0 ff		ldy #$ff			ldy 	#$FF 						; -1 for pre increment.
.8233					_CSLoop:
.8233	c8		iny				iny
.8234	b1 36		lda ($36),y			lda 	(zTemp0),y 					; check if they are the same
.8236	d1 38		cmp ($38),y			cmp 	(zTemp1),y
.8238	d0 06		bne $8240			bne 	_CSDifferent
.823a	c9 00		cmp #$00			cmp 	#0 							; reached end ?
.823c	d0 f5		bne $8233			bne 	_CSLoop 					; still comparing
.823e					_CSExit:
.823e	7a		ply				ply 								; reached end, return zero in A from EOS
.823f	60		rts				rts
.8240					_CSDifferent:
.8240	a9 ff		lda #$ff			lda 	#255 						; if < return $FF
.8242	90 fa		bcc $823e			bcc		_CSExit
.8244	a9 01		lda #$01			lda 	#1 							; otherwise return 1.
.8246	80 f6		bra $823e			bra 	_CSExit
.8248					_CSTypeError:
.8248	4c 5f 92	jmp $925f			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/binary/shifts.asm

.824b					ShiftLeft:
.824b	38		sec				sec
.824c	80 01		bra $824f			bra 	ShiftMain
.824e					ShiftRight:
.824e	18		clc				clc
.824f					ShiftMain:
.824f	fa		plx				plx 								; restore X
.8250	08		php				php 								; save direction
.8251	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8254	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8257	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8258	0a		asl a				asl 	a
.8259	10 05		bpl $8260			bpl 	_NotRef
.825b	48		pha				pha
.825c	20 95 84	jsr $8495			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.825f	68		pla				pla
.8260					_NotRef:
.8260	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8262	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8265	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8268	f0 03		beq $826d			beq 	_IntegerCode 				; if clear, then we have two integers
.826a	4c 5f 92	jmp $925f			jmp 	TypeError 					; anything else, type mismatch.
.826d					_IntegerCode:
.826d	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; check number < 32
.8270	29 e0		and #$e0			and 	#$E0
.8272	1d 11 06	ora $0611,x			ora 	NSMantissa1+1,x
.8275	1d 19 06	ora $0619,x			ora 	NSMantissa2+1,x
.8278	1d 21 06	ora $0621,x			ora 	NSMantissa3+1,x
.827b	d0 13		bne $8290			bne 	_SMExit0 					; if >= 32 it will always return zero.
.827d					_SMLoop:
.827d	de 09 06	dec $0609,x			dec 	NSMantissa0+1,x 			; predecrement, could do << 0
.8280	30 11		bmi $8293			bmi 	_SMExit 					; exit if done.
.8282	28		plp				plp 								; restore direcition setting
.8283	08		php				php
.8284	90 05		bcc $828b			bcc 	_SMRight
.8286	20 5c 88	jsr $885c			jsr 	NSMShiftLeft 				; shift left if CS
.8289	80 f2		bra $827d			bra 	_SMLoop
.828b					_SMRight:
.828b	20 6a 88	jsr $886a			jsr 	NSMShiftRight 				; shift right if CC
.828e	80 ed		bra $827d			bra 	_SMLoop
.8290					_SMExit0:
.8290	20 47 88	jsr $8847			jsr 	NSMSetZero 					; return zero.
.8293					_SMExit:
.8293	28		plp				plp 								; throw direction
.8294	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/binary/simple.asm

.8295					AddTopTwoStack:
.8295	18		clc				clc
.8296	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8299	7d 09 06	adc $0609,x			adc 		NSMantissa0+1,x
.829c	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.829f	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.82a2	7d 11 06	adc $0611,x			adc 		NSMantissa1+1,x
.82a5	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.82a8	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.82ab	7d 19 06	adc $0619,x			adc 		NSMantissa2+1,x
.82ae	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.82b1	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.82b4	7d 21 06	adc $0621,x			adc 		NSMantissa3+1,x
.82b7	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.82ba	60		rts				rts
.82bb					SubTopTwoStack:
.82bb	38		sec				sec
.82bc	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.82bf	fd 09 06	sbc $0609,x			sbc 		NSMantissa0+1,x
.82c2	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.82c5	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.82c8	fd 11 06	sbc $0611,x			sbc 		NSMantissa1+1,x
.82cb	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.82ce	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.82d1	fd 19 06	sbc $0619,x			sbc 		NSMantissa2+1,x
.82d4	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.82d7	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.82da	fd 21 06	sbc $0621,x			sbc 		NSMantissa3+1,x
.82dd	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.82e0	60		rts				rts
.82e1					AddInteger:
.82e1	fa		plx				plx
.82e2	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.82e5	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.82e8	0a		asl a				asl 	a 							; shift reference bit into sign bit
.82e9	0a		asl a				asl 	a
.82ea	10 05		bpl $82f1			bpl 	_NotRef
.82ec	48		pha				pha
.82ed	20 95 84	jsr $8495			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.82f0	68		pla				pla
.82f1					_NotRef:
.82f1	0a		asl a				asl 	a 							; put MSB of type into A:7
.82f2	30 0b		bmi $82ff			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.82f4	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.82f7	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.82fa	f0 06		beq $8302			beq 	_IntegerCode 				; if clear, then we have two integers
.82fc	4c 9e 8f	jmp $8f9e			jmp 	FloatingPointAdd 							; otherwise at least one float.
.82ff					_StringData:
.82ff	4c 69 92	jmp $9269			jmp 	NotDoneError							; at least one string - don't know both are strings.
.8302					_IntegerCode:
.8302					AddCode:
.8302	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.8305	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.8308	10 8b		bpl $8295			bpl 	AddTopTwoStack
.830a	20 bb 82	jsr $82bb			jsr 	SubTopTwoStack 				; do a physical subtraction
.830d	3c 20 06	bit $0620,x			bit 	NSMantissa3,x 				; result is +ve, okay
.8310	10 09		bpl $831b			bpl 	_AddExit
.8312	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; sign is that of 2nd value
.8315	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8318	20 fc 87	jsr $87fc			jsr 	NSMNegateMantissa 			; negate the mantissa and exit
.831b					_AddExit:
.831b	60		rts				rts
.831c					SubInteger:
.831c	fa		plx				plx
.831d	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8320	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8323	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8324	0a		asl a				asl 	a
.8325	10 05		bpl $832c			bpl 	_NotRef
.8327	48		pha				pha
.8328	20 95 84	jsr $8495			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.832b	68		pla				pla
.832c					_NotRef:
.832c	0a		asl a				asl 	a 							; put MSB of type into A:7
.832d	30 0b		bmi $833a			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.832f	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8332	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8335	f0 06		beq $833d			beq 	_IntegerCode 				; if clear, then we have two integers
.8337	4c a3 8f	jmp $8fa3			jmp 	FloatingPointSub 							; otherwise at least one float.
.833a					_StringData:
.833a	4c 69 92	jmp $9269			jmp 	NotDoneError							; at least one string - don't know both are strings.
.833d					_IntegerCode:
.833d	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; negate the second value.
.8340	49 80		eor #$80			eor 	#$80
.8342	9d 01 06	sta $0601,x			sta 	NSStatus+1,x
.8345	80 bb		bra $8302			bra 	AddCode 					; and do the same code as add.
.8347					AndInteger:
.8347	fa		plx				plx
.8348	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.834b	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.834e	0a		asl a				asl 	a 							; shift reference bit into sign bit
.834f	0a		asl a				asl 	a
.8350	10 05		bpl $8357			bpl 	_NotRef
.8352	48		pha				pha
.8353	20 95 84	jsr $8495			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8356	68		pla				pla
.8357					_NotRef:
.8357	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8359	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.835c	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.835f	f0 03		beq $8364			beq 	_IntegerCode 				; if clear, then we have two integers
.8361	4c 5f 92	jmp $925f			jmp 	TypeError 					; anything else, type mismatch.
.8364					_IntegerCode:
.8364	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8367	3d 09 06	and $0609,x			and 		NSMantissa0+1,x
.836a	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.836d	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8370	3d 11 06	and $0611,x			and 		NSMantissa1+1,x
.8373	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8376	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8379	3d 19 06	and $0619,x			and 		NSMantissa2+1,x
.837c	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.837f	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8382	3d 21 06	and $0621,x			and 		NSMantissa3+1,x
.8385	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8388	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.838b	60		rts				rts
.838c					OraInteger:
.838c	fa		plx				plx
.838d	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8390	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8393	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8394	0a		asl a				asl 	a
.8395	10 05		bpl $839c			bpl 	_NotRef
.8397	48		pha				pha
.8398	20 95 84	jsr $8495			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.839b	68		pla				pla
.839c					_NotRef:
.839c	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.839e	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.83a1	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.83a4	f0 03		beq $83a9			beq 	_IntegerCode 				; if clear, then we have two integers
.83a6	4c 5f 92	jmp $925f			jmp 	TypeError 					; anything else, type mismatch.
.83a9					_IntegerCode:
.83a9	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.83ac	1d 09 06	ora $0609,x			ora 		NSMantissa0+1,x
.83af	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.83b2	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.83b5	1d 11 06	ora $0611,x			ora 		NSMantissa1+1,x
.83b8	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.83bb	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.83be	1d 19 06	ora $0619,x			ora 		NSMantissa2+1,x
.83c1	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.83c4	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.83c7	1d 21 06	ora $0621,x			ora 		NSMantissa3+1,x
.83ca	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.83cd	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.83d0	60		rts				rts
.83d1					EorInteger:
.83d1	fa		plx				plx
.83d2	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.83d5	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.83d8	0a		asl a				asl 	a 							; shift reference bit into sign bit
.83d9	0a		asl a				asl 	a
.83da	10 05		bpl $83e1			bpl 	_NotRef
.83dc	48		pha				pha
.83dd	20 95 84	jsr $8495			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.83e0	68		pla				pla
.83e1					_NotRef:
.83e1	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.83e3	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.83e6	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.83e9	f0 03		beq $83ee			beq 	_IntegerCode 				; if clear, then we have two integers
.83eb	4c 5f 92	jmp $925f			jmp 	TypeError 					; anything else, type mismatch.
.83ee					_IntegerCode:
.83ee	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.83f1	5d 09 06	eor $0609,x			eor 		NSMantissa0+1,x
.83f4	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.83f7	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.83fa	5d 11 06	eor $0611,x			eor 		NSMantissa1+1,x
.83fd	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8400	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8403	5d 19 06	eor $0619,x			eor 		NSMantissa2+1,x
.8406	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8409	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.840c	5d 21 06	eor $0621,x			eor 		NSMantissa3+1,x
.840f	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8412	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.8415	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/binary/tostring.asm

.8f43					ConvertInt16:
.8f43	8d 08 06	sta $0608			sta 	NSMantissa0 				; set up as 32 bit conversion
.8f46	8e 10 06	stx $0610			stx 	NSMantissa1
.8f49	9c 18 06	stz $0618			stz 	NSMantissa2
.8f4c	9c 20 06	stz $0620			stz 	NSMantissa3
.8f4f	9c 00 06	stz $0600			stz 	NSStatus 					; positive integer
.8f52	a2 00		ldx #$00			ldx 	#0 							; stack level
.8f54	a9 0a		lda #$0a			lda 	#10 						; base
.8f56	80 00		bra $8f58			bra 	ConvertInt32
.8f58					ConvertInt32:
.8f58	5a		phy				phy
.8f59	a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.8f5b	2c 00 06	bit $0600			bit 	NSStatus 					; output a - if not negative.
.8f5e	10 08		bpl $8f68			bpl 	_CI32NotNeg
.8f60	48		pha				pha
.8f61	a9 2d		lda #$2d			lda 	#'-'
.8f63	99 5c 08	sta $085c,y			sta 	NumberBuffer,y
.8f66	c8		iny				iny
.8f67	68		pla				pla
.8f68					_CI32NotNeg:
.8f68	20 76 8f	jsr $8f76			jsr 	_CI32DivideConvert 			; recursive conversion
.8f6b	a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.8f6d	99 5c 08	sta $085c,y			sta 	NumberBuffer,y
.8f70	7a		ply				ply
.8f71	a2 08		ldx #$08			ldx 	#NumberBuffer >> 8
.8f73	a9 5c		lda #$5c			lda 	#NumberBuffer & $FF
.8f75	60		rts				rts
.8f76					_CI32DivideConvert:
.8f76	e8		inx				inx 								; write to next slot up
.8f77	20 49 88	jsr $8849			jsr 	NSMSetByte
.8f7a	ca		dex				dex
.8f7b	20 78 8e	jsr $8e78			jsr 	Int32Divide 				; divide
.8f7e	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; save remainder
.8f81	48		pha				pha
.8f82	20 28 8e	jsr $8e28			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.8f85	20 77 88	jsr $8877			jsr 	NSMIsZero 					; is it zero ?
.8f88	f0 06		beq $8f90			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.8f8a	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.8f8d	20 76 8f	jsr $8f76			jsr 	_CI32DivideConvert 			; and recusrively call.
.8f90					_CI32NoRecurse:
.8f90	68		pla				pla 								; remainder
.8f91	c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII
.8f93	90 02		bcc $8f97			bcc 	_CI32NotHex
.8f95	69 26		adc #$26			adc 	#6+32
.8f97					_CI32NotHex:
.8f97	69 30		adc #$30			adc 	#48
.8f99	99 5c 08	sta $085c,y			sta 	NumberBuffer,y 				; write out and exit
.8f9c	c8		iny				iny
.8f9d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/expression.asm


;******  Processing file: ./expressions/../generated/precedence.dat

.8416					PrecedenceLevel:
>8416	04					.byte	 4	; $00 <<
>8417	02					.byte	 2	; $01 <=
>8418	02					.byte	 2	; $02 <>
>8419	00					.byte	 0	; $03 !!3
>841a	00					.byte	 0	; $04 ><
>841b	02					.byte	 2	; $05 >=
>841c	04					.byte	 4	; $06 >>
>841d	00					.byte	 0	; $07 !!7
>841e	00					.byte	 0	; $08 !!8
>841f	00					.byte	 0	; $09 !!9
>8420	00					.byte	 0	; $0a !!10
>8421	00					.byte	 0	; $0b !!11
>8422	00					.byte	 0	; $0c !!12
>8423	00					.byte	 0	; $0d !!13
>8424	00					.byte	 0	; $0e !!14
>8425	00					.byte	 0	; $0f !!15
>8426	00					.byte	 0	; $10 @
>8427	00					.byte	 0	; $11 !!17
>8428	00					.byte	 0	; $12 !!18
>8429	00					.byte	 0	; $13 [
>842a	04					.byte	 4	; $14 \
>842b	00					.byte	 0	; $15 ]
>842c	01					.byte	 1	; $16 ^
>842d	00					.byte	 0	; $17 _
>842e	00					.byte	 0	; $18 `
>842f	00					.byte	 0	; $19 !!25
>8430	00					.byte	 0	; $1a !!26
>8431	00					.byte	 0	; $1b {
>8432	01					.byte	 1	; $1c |
>8433	00					.byte	 0	; $1d }
>8434	00					.byte	 0	; $1e ~
>8435	00					.byte	 0	; $1f [7m<7F>[m
>8436	00					.byte	 0	; $20
>8437	05					.byte	 5	; $21 !
>8438	00					.byte	 0	; $22 "
>8439	00					.byte	 0	; $23 #
>843a	05					.byte	 5	; $24 $
>843b	04					.byte	 4	; $25 %
>843c	01					.byte	 1	; $26 &
>843d	00					.byte	 0	; $27 '
>843e	00					.byte	 0	; $28 (
>843f	00					.byte	 0	; $29 )
>8440	04					.byte	 4	; $2a *
>8441	03					.byte	 3	; $2b +
>8442	00					.byte	 0	; $2c ,
>8443	03					.byte	 3	; $2d -
>8444	00					.byte	 0	; $2e .
>8445	04					.byte	 4	; $2f /
>8446	00					.byte	 0	; $30 0
>8447	00					.byte	 0	; $31 1
>8448	00					.byte	 0	; $32 2
>8449	00					.byte	 0	; $33 3
>844a	00					.byte	 0	; $34 4
>844b	00					.byte	 0	; $35 5
>844c	00					.byte	 0	; $36 6
>844d	00					.byte	 0	; $37 7
>844e	00					.byte	 0	; $38 8
>844f	00					.byte	 0	; $39 9
>8450	00					.byte	 0	; $3a :
>8451	00					.byte	 0	; $3b ;
>8452	02					.byte	 2	; $3c <
>8453	02					.byte	 2	; $3d =
>8454	02					.byte	 2	; $3e >
>8455	05					.byte	 5	; $3f ?

;******  Return to file: ./expressions/expression.asm

.8456					EvaluateExpressionAt0:
.8456	a2 00		ldx #$00			ldx 	#0 							; bottom stack level
.8458					EvaluateExpression:
.8458	a9 00		lda #$00			lda 	#0 							; lowest precedence level
.845a					EvaluateExpressionAtPrecedence:
.845a	48		pha				pha 								; save precedence level
.845b	20 4b 86	jsr $864b			jsr 	EvaluateTerm 				; evaluate term into level X.
.845e	68		pla				pla 								; restore precedence level.
.845f					_EXPRLoop:
.845f	85 36		sta $36				sta 	zTemp0 						; save current precedence level.
.8461	b1 30		lda ($30),y			lda 	(codePtr),y
.8463	c9 40		cmp #$40			cmp		#$40 						; if >= $40 cannot be an operator
.8465	b0 25		bcs $848c			bcs 	_EXPRExit
.8467	da		phx				phx 								; read the operator precedence
.8468	aa		tax				tax
.8469	bd 16 84	lda $8416,x			lda 	PrecedenceLevel,x
.846c	fa		plx				plx
.846d	c9 00		cmp #$00			cmp 	#0							; if zero exit (not an operator)
.846f	f0 1b		beq $848c			beq 	_EXPRExit
.8471	85 37		sta $37				sta 	zTemp0+1 					; save operator precedence level.
.8473	a5 36		lda $36				lda 	zTemp0 						; compare current precedence vs. operator precedence
.8475	c5 37		cmp $37				cmp 	zTemp0+1
.8477	b0 13		bcs $848c			bcs		_EXPRExit 					; if current >= operator exit
.8479	48		pha				pha 								; save current precedence.
.847a	b1 30		lda ($30),y			lda 	(codePtr),y
.847c	c8		iny				iny
.847d	48		pha				pha
.847e	a5 37		lda $37				lda 	zTemp0+1 					; get operator precedence level
.8480	e8		inx				inx 								; work out the right hand side.
.8481	20 5a 84	jsr $845a			jsr 	EvaluateExpressionAtPrecedence
.8484	ca		dex				dex
.8485	68		pla				pla 								; get operator, call the code.
.8486	20 8f 84	jsr $848f			jsr 	_EXPRCaller
.8489	68		pla				pla 								; restore precedence level
.848a	80 d3		bra $845f			bra 	_EXPRLoop 					; and go round.
.848c					_EXPRExit:
.848c	a5 36		lda $36				lda 	zTemp0 						; A = current precedence level.
.848e	60		rts				rts
.848f					_EXPRCaller:
.848f	da		phx				phx 								; save on stack, first thing is to restore it
.8490	0a		asl a				asl 	a 							; double so can use vectors into X
.8491	aa		tax				tax
.8492	7c 14 80	jmp ($8014,x)			jmp 	(VectorSetPunc,x) 			; and go to the code.

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/float/addsub.asm

.8f9e					FloatingPointAdd:
.8f9e	20 3f 91	jsr $913f			jsr 	FloatPrepare 				; prepare for floats
.8fa1	80 0b		bra $8fae			bra 	FloatAdd
.8fa3					FloatingPointSub:
.8fa3	20 3f 91	jsr $913f			jsr 	FloatPrepare 				; prepare for floats
.8fa6					FloatSubtract:
.8fa6	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; negate FPB
.8fa9	49 80		eor #$80			eor 	#$80
.8fab	9d 01 06	sta $0601,x			sta 	NSStatus+1,x				; and fall through.
.8fae					FloatAdd:
.8fae	48		pha				pha
.8faf	5a		phy				phy
.8fb0	20 50 91	jsr $9150			jsr 	NSNormalise 				; normalise S[X]
.8fb3	f0 54		beq $9009			beq 	_FAReturn1
.8fb5	e8		inx				inx 								; normalise S[X+1]
.8fb6	20 50 91	jsr $9150			jsr 	NSNormalise
.8fb9	ca		dex				dex
.8fba	c9 00		cmp #$00			cmp 	#0
.8fbc	f0 6f		beq $902d			beq 	_FAExit 					; if so, just return A
.8fbe	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; are the exponents the same ?
.8fc1	dd 29 06	cmp $0629,x			cmp 	NSExponent+1,x
.8fc4	f0 1b		beq $8fe1			beq 	_FAExponentsEqual
.8fc6	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; work out the larger exponent
.8fc9	a8		tay				tay
.8fca	38		sec				sec 								; do a signed comparison of the exponents.
.8fcb	fd 29 06	sbc $0629,x			sbc 	NSExponent+1,x
.8fce	50 02		bvc $8fd2			bvc 	_FANoSignedChange
.8fd0	49 80		eor #$80			eor 	#$80
.8fd2					_FANoSignedChange:
.8fd2	29 80		and #$80			and 	#$80
.8fd4	10 03		bpl $8fd9			bpl 	_FAHaveMax
.8fd6	bc 29 06	ldy $0629,x			ldy 	NSExponent+1,x
.8fd9					_FAHaveMax:
.8fd9	20 30 90	jsr $9030			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.8fdc	e8		inx				inx
.8fdd	20 30 90	jsr $9030			jsr 	_FAShiftToExponent
.8fe0	ca		dex				dex
.8fe1					_FAExponentsEqual:
.8fe1	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; are the signs the same
.8fe4	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.8fe7	30 10		bmi $8ff9			bmi 	_FADifferentSigns
.8fe9	20 95 82	jsr $8295			jsr 	AddTopTwoStack 				; do the add of the mantissae
.8fec	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.8fef	10 3c		bpl $902d			bpl 	_FAExit 					; if no, we are done.
.8ff1	20 6a 88	jsr $886a			jsr 	NSMShiftRight 				; shift A right, renormalising it.
.8ff4	fe 28 06	inc $0628,x			inc 	NSExponent,x 				; bump the exponent and exit
.8ff7	80 34		bra $902d			bra 	_FAExit
.8ff9					_FADifferentSigns:
.8ff9	20 bb 82	jsr $82bb			jsr 	SubTopTwoStack 				; subtract mantissa B from A
.8ffc	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; is the result negative ?
.8fff	10 2c		bpl $902d			bpl 	_FAExit 					; if no, we are done.
.9001	20 f3 87	jsr $87f3			jsr 	NSMNegate 					; netate result
.9004	20 fc 87	jsr $87fc			jsr 	NSMNegateMantissa 			; negate (2'c) the mantissa
.9007	80 24		bra $902d			bra 	_FAExit
.9009					_FAReturn1:
.9009	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.900c	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.900f	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.9012	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9015	bd 19 06	lda $0619,x			lda 	NSMantissa2+1,x
.9018	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.901b	bd 21 06	lda $0621,x			lda 	NSMantissa3+1,x
.901e	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.9021	bd 29 06	lda $0629,x			lda 	NSExponent+1,x
.9024	9d 28 06	sta $0628,x			sta 	NSExponent,x
.9027	bd 01 06	lda $0601,x			lda 	NSStatus+1,x
.902a	9d 00 06	sta $0600,x			sta 	NSStatus,x
.902d					_FAExit:
.902d	7a		ply				ply
.902e	68		pla				pla
.902f	60		rts				rts
.9030					_FAShiftToExponent:
.9030					_FAShiftToExponent2:
.9030	98		tya				tya 								; compare Y to exponent
.9031	dd 28 06	cmp $0628,x			cmp 	NSExponent,x 				; reached the exponent required ?
.9034	f0 08		beq $903e			beq 	_FASEExit 					; exit if so.
.9036	20 6a 88	jsr $886a			jsr 	NSMShiftRight	 			; shift the mantissa right
.9039	fe 28 06	inc $0628,x			inc 	NSExponent,x 				; increment exponent
.903c	80 f2		bra $9030			bra 	_FAShiftToExponent2
.903e					_FASEExit:
.903e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/float/compare.asm

.903f					CompareFloat:
.903f	20 a6 8f	jsr $8fa6			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.9042	bd 10 06	lda $0610,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.9045	29 fc		and #$fc			and 	#$FC
.9047	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.904a	1d 20 06	ora $0620,x			ora 	NSMantissa3,x
.904d	f0 09		beq $9058			beq 	_FCExit 					; zero, so approximately identical
.904f	a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.9051	3c 00 06	bit $0600,x			bit 	NSStatus,x
.9054	10 02		bpl $9058			bpl 	_FCExit
.9056					_FCNegative:
.9056	a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.9058					_FCExit:
.9058	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/float/divide.asm

.9059					FDivideCommand:
.9059	fa		plx				plx	 								; restore stack position
.905a	20 3f 91	jsr $913f			jsr 	FloatPrepare 				; prepare for floats
.905d					FloatDivide:
.905d	48		pha				pha
.905e	e8		inx				inx
.905f	20 50 91	jsr $9150			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.9062	ca		dex				dex
.9063	c9 00		cmp #$00			cmp 	#0
.9065	f0 20		beq $9087			beq 	_FDZero
.9067	20 50 91	jsr $9150			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.906a	f0 19		beq $9085			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.906c	20 9a 8e	jsr $8e9a			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.906f	20 28 8e	jsr $8e28			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.9072	20 50 91	jsr $9150			jsr		NSNormalise 				; renormalise
.9075	20 35 8f	jsr $8f35			jsr 	CalculateSign 				; calculate result sign
.9078	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; calculate exponent
.907b	38		sec				sec
.907c	fd 29 06	sbc $0629,x			sbc 	NSExponent+1,x
.907f	38		sec				sec
.9080	e9 1e		sbc #$1e			sbc 	#30
.9082	9d 28 06	sta $0628,x			sta 	NSExponent,x
.9085					_FDExit:
.9085	68		pla				pla
.9086	60		rts				rts
.9087					_FDZero:
.9087	a9 03		lda #$03		lda	#3
.9089	4c af 81	jmp $81af		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/float/fractional.asm

.908c					FloatFractionalPart:
.908c	5a		phy				phy
.908d	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; take absolute value
.9090	29 7f		and #$7f			and 	#$7F
.9092	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9095	20 50 91	jsr $9150			jsr 	NSNormalise
.9098	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.909b	38		sec				sec
.909c	e9 e0		sbc #$e0			sbc 	#$E0
.909e	90 31		bcc $90d1			bcc 	_FFPExit 					; already fractional
.90a0	c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.90a2	b0 2a		bcs $90ce			bcs 	_FFPZero
.90a4	a8		tay				tay 								; put count to do in Y
.90a5	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; do each in turn.
.90a8	20 d3 90	jsr $90d3			jsr 	_FFPPartial
.90ab	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.90ae	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.90b1	20 d3 90	jsr $90d3			jsr 	_FFPPartial
.90b4	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.90b7	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.90ba	20 d3 90	jsr $90d3			jsr 	_FFPPartial
.90bd	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.90c0	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.90c3	20 d3 90	jsr $90d3			jsr 	_FFPPartial
.90c6	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.90c9	20 77 88	jsr $8877			jsr 	NSMIsZero 					; zeroed check.
.90cc	d0 03		bne $90d1			bne 	_FFPExit
.90ce					_FFPZero:
.90ce	20 47 88	jsr $8847			jsr 	NSMSetZero
.90d1					_FFPExit:
.90d1	7a		ply				ply
.90d2	60		rts				rts
.90d3					_FFPPartial:
.90d3	c0 00		cpy #$00			cpy 	#0 							; no more to do
.90d5	f0 17		beq $90ee			beq 	_FFFPPExit
.90d7	c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.90d9	b0 0c		bcs $90e7			bcs 	_FFFPPWholeByte
.90db	5a		phy				phy
.90dc					_FFFPPLeft:
.90dc	0a		asl a				asl 	a
.90dd	88		dey				dey
.90de	d0 fc		bne $90dc			bne 	_FFFPPLeft
.90e0	7a		ply				ply
.90e1					_FFFPPRight:
.90e1	4a		lsr a				lsr 	a
.90e2	88		dey				dey
.90e3	d0 fc		bne $90e1			bne 	_FFFPPRight
.90e5	80 07		bra $90ee			bra 	_FFFPPExit
.90e7					_FFFPPWholeByte:
.90e7	98		tya				tya 								; subtract 8 from count
.90e8	38		sec				sec
.90e9	e9 08		sbc #$08			sbc 	#8
.90eb	a8		tay				tay
.90ec	a9 00		lda #$00			lda 	#0 							; and clear all
.90ee					_FFFPPExit:
.90ee	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/float/integer.asm

.90ef					FloatIntegerPart:
.90ef	48		pha				pha
.90f0	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; is it integer already ?
.90f3	f0 1f		beq $9114			beq 	_FIPExit 					; if so do nothing
.90f5	20 77 88	jsr $8877			jsr 	NSMIsZero 					; is it zero ?
.90f8	f0 17		beq $9111			beq 	_FIPZero 					; if so return zero.
.90fa	20 50 91	jsr $9150			jsr 	NSNormalise 				; normalise
.90fd	f0 12		beq $9111			beq 	_FIPZero 					; normalised to zero, exit zero
.90ff					_FIPShift:
.90ff	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.9102	10 08		bpl $910c			bpl 	_FIPCheckZero
.9104	20 6a 88	jsr $886a			jsr 	NSMShiftRight 				; shift mantissa right
.9107	fe 28 06	inc $0628,x			inc 	NSExponent,x 				; bump exponent
.910a	80 f3		bra $90ff			bra 	_FIPShift
.910c					_FIPCheckZero:
.910c	20 77 88	jsr $8877			jsr 	NSMIsZero 					; avoid -0 problem
.910f	d0 03		bne $9114			bne 	_FIPExit 					; set to zero if mantissa zero.
.9111					_FIPZero:
.9111	20 47 88	jsr $8847			jsr 	NSMSetZero
.9114					_FIPExit:
.9114	68		pla				pla
.9115	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/float/multiply.asm

.9116					FloatingPointMultiply:
.9116	20 3f 91	jsr $913f			jsr 	FloatPrepare 				; prepare for floats
.9119					FloatMultiply:
.9119	48		pha				pha
.911a	20 50 91	jsr $9150			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.911d	f0 1b		beq $913a			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.911f	e8		inx				inx
.9120	20 50 91	jsr $9150			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.9123	ca		dex				dex
.9124	c9 00		cmp #$00			cmp 	#0
.9126	f0 0f		beq $9137			beq 	_FDSetZero
.9128	20 f0 8e	jsr $8ef0			jsr 	MultiplyShort 				; calculate the result.
.912b	7d 28 06	adc $0628,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.912e	18		clc				clc
.912f	7d 29 06	adc $0629,x			adc 	NSExponent+1,x
.9132	9d 28 06	sta $0628,x			sta 	NSExponent,x
.9135	80 03		bra $913a			bra 	_FDExit
.9137					_FDSetZero:
.9137	20 47 88	jsr $8847			jsr 	NSMSetZero 					; return 0
.913a					_FDExit:
.913a	20 50 91	jsr $9150			jsr 	NSNormalise 				; normalise the result
.913d	68		pla				pla
.913e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/float/utility.asm

.913f					FloatPrepare:
.913f	20 95 84	jsr $8495			jsr 	DereferenceTopTwo 			; dereference the top two values
.9142	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check ints/floats
.9145	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.9148	29 10		and #$10			and 	#NSBIsString
.914a	d0 01		bne $914d			bne 	_FDType
.914c	60		rts				rts
.914d					_FDType:
.914d	4c 5f 92	jmp $925f			jmp 	TypeError
.9150					NSNormalise:
.9150	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; make float, keep sign
.9153	29 80		and #$80			and 	#$80
.9155	09 08		ora #$08			ora 	#NSTFloat
.9157	9d 00 06	sta $0600,x			sta 	NSStatus,x
.915a	20 77 88	jsr $8877			jsr 	NSMIsZero 					; if zero exit
.915d	d0 09		bne $9168			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.915f	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; clear the sign bit.
.9162	7e 00 06	ror $0600,x			ror 	NSStatus,x 					; (no -0)
.9165	a9 00		lda #$00			lda 	#0 							; set Z flag
.9167	60		rts				rts
.9168					_NSNormaliseOptimise:
.9168	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; upper byte zero ?
.916b	d0 22		bne $918f			bne 	_NSNormaliseLoop
.916d	bd 18 06	lda $0618,x			lda 	NSMantissa2,x 				; byte normalise
.9170	30 1d		bmi $918f			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.9172	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.9175	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.9178	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.917b	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.917e	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9181	9e 08 06	stz $0608,x			stz 	NSMantissa0,x
.9184	bd 28 06	lda $0628,x			lda 	NSExponent,x
.9187	38		sec				sec
.9188	e9 08		sbc #$08			sbc 	#8
.918a	9d 28 06	sta $0628,x			sta 	NSExponent,x
.918d	80 d9		bra $9168			bra 	_NSNormaliseOptimise
.918f					_NSNormaliseLoop:
.918f	3c 20 06	bit $0620,x			bit 	NSMantissa3,x 				; bit 30 set ?
.9192	70 08		bvs $919c			bvs 	_NSNExit 					; exit if so with Z flag clear
.9194	20 5c 88	jsr $885c			jsr 	NSMShiftLeft 				; shift mantissa left
.9197	de 28 06	dec $0628,x			dec 	NSExponent,x 				; adjust exponent
.919a	80 f3		bra $918f			bra 	_NSNormaliseLoop
.919c					_NSNExit:
.919c	a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.919e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/term/dereference.asm

.8495					DereferenceTopTwo:
.8495	e8		inx				inx
.8496	20 9a 84	jsr $849a			jsr 	Dereference 				; deref x+1
.8499	ca		dex				dex  								; falls through to deref x
.849a					Dereference:
.849a	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get the status byte
.849d	29 20		and #$20			and 	#NSBIsReference 			; shift sign bit to carry, reference to bit 7
.849f	f0 57		beq $84f8			beq 	_DRFExit 					; not a reference
.84a1	5a		phy				phy
.84a2	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy address to dereference into zTemp0
.84a5	85 36		sta $36				sta 	zTemp0
.84a7	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.84aa	85 37		sta $37				sta 	zTemp0+1
.84ac	9e 10 06	stz $0610,x			stz 	NSMantissa1,x 				; clear second byte.
.84af	b2 36		lda ($36)			lda 	(zTemp0) 					; do the first byte
.84b1	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.84b4	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get status byte.
.84b7	29 18		and #$18			and 	#NSBTypeMask 				; what type is it ?
.84b9	c9 10		cmp #$10			cmp 	#NSTString 					; if string, dereference two
.84bb	f0 0f		beq $84cc			beq 	_DRFDereferenceTwo
.84bd	c9 08		cmp #$08			cmp 	#NSTFloat 					; if float, do full dereference.
.84bf	f0 39		beq $84fa			beq 	_DRFFull
.84c1	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be integer - how many bytes ?
.84c4	29 03		and #$03			and 	#3
.84c6	f0 32		beq $84fa			beq 	_DRFFull 					; the whole word
.84c8	c9 01		cmp #$01			cmp 	#1 							; is it 10 (e.g. 2 bytes)
.84ca	f0 07		beq $84d3			beq		_DRFClear23 				; no, one byte, clear 2 & 3 and exit
.84cc					_DRFDereferenceTwo:
.84cc	a0 01		ldy #$01			ldy 	#1
.84ce	b1 36		lda ($36),y			lda 	(zTemp0),y
.84d0	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.84d3					_DRFClear23:
.84d3	9e 18 06	stz $0618,x			stz 	NSMantissa2,x 				; clear upper bytes, only read 1 or 2 bytes
.84d6	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.84d9	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; make it a value of that type.
.84dc	29 18		and #$18			and 	#NSBTypeMask
.84de	9d 00 06	sta $0600,x			sta 	NSStatus,x
.84e1	c9 10		cmp #$10			cmp 	#NSTString  				; is it a string
.84e3	d0 12		bne $84f7			bne 	_DRFNotString
.84e5	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; check address is zero
.84e8	1d 10 06	ora $0610,x			ora 	NSMantissa1,x
.84eb	d0 0a		bne $84f7			bne 	_DRFNotString
.84ed	a9 f9		lda #$f9			lda 	#_DRFNullString & $FF 		; if so, return reference to ""
.84ef	9d 08 06	sta $0608,x			sta 	NSMantissa0,X
.84f2	a9 84		lda #$84			lda 	#_DRFNullString >> 8
.84f4	9d 10 06	sta $0610,x			sta 	NSMantissa1,X
.84f7					_DRFNotString
.84f7	7a		ply				ply 								; restore Y and exit
.84f8					_DRFExit:
.84f8	60		rts				rts
.84f9					_DRFNullString:
>84f9	00						.byte 	0
.84fa					_DRFFull:
.84fa	a0 01		ldy #$01			ldy 	#1 							; get remaining 3 bytes.
.84fc	b1 36		lda ($36),y			lda 	(zTemp0),y
.84fe	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8501	c8		iny				iny
.8502	b1 36		lda ($36),y			lda 	(zTemp0),y
.8504	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8507	c8		iny				iny
.8508	b1 36		lda ($36),y			lda 	(zTemp0),y
.850a	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.850d	9e 28 06	stz $0628,x			stz 	NSExponent,x 				; clear exponent.
.8510	bd 00 06	lda $0600,x			lda		NSStatus,x 					; see if type is integer
.8513	29 18		and #$18			and 	#NSBTypeMask  				; type information only
.8515	9d 00 06	sta $0600,x			sta 	NSStatus,x 					; update it back.
.8518	f0 06		beq $8520			beq 	_DRFNoExponent
.851a	c8		iny				iny 								; if not, read the exponent as well.
.851b	b1 36		lda ($36),y			lda 	(zTemp0),y
.851d	9d 28 06	sta $0628,x			sta 	NSExponent,x
.8520					_DRFNoExponent:
.8520	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; is the most significant bit set ?
.8523	10 0d		bpl $8532			bpl 	_DRFExit2 					; if not, then exit.
.8525	29 7f		and #$7f			and 	#$7F 						; clear that bit.
.8527	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.852a	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; set the sign flag
.852d	09 80		ora #$80			ora 	#NSBIsNegative
.852f	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8532					_DRFExit2:
.8532	7a		ply				ply
.8533	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/term/number.asm

=1					ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2					ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3					ESTA_Decimal = 3 							; fractional part.
.8534					EncodeNumberStart:
.8534	38		sec				sec
.8535	80 01		bra $8538			bra 	EncodeNumberContinue+1
.8537					EncodeNumberContinue:
.8537	18		clc				clc
.8538	08		php				php 								; save reset.
.8539	c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.853b	f0 12		beq $854f			beq 	_ENIsOkay
.853d	c9 30		cmp #$30			cmp 	#"0"
.853f	90 04		bcc $8545			bcc 	_ENBadNumber
.8541	c9 3a		cmp #$3a			cmp 	#"9"+1
.8543	90 0a		bcc $854f			bcc 	_ENIsOkay
.8545					_ENBadNumber:
.8545	28		plp				plp 								; throw saved reset
.8546	ad 05 07	lda $0705			lda 	EncodeState 				; decimal mode, construct final number
.8549	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.854b	f0 73		beq $85c0			beq 	_ENConstructFinal
.854d					_ENFail:
.854d	18		clc				clc 								; not allowed
.854e	60		rts				rts
.854f					_ENIsOkay:
.854f	28		plp				plp 								; are we restarting
.8550	90 0c		bcc $855e			bcc 	_ENNoRestart
.8552					_ENStartEncode:
.8552	29 0f		and #$0f			and 	#15 						; put digit in mantissa
.8554	20 49 88	jsr $8849			jsr 	NSMSetByte
.8557	a9 01		lda #$01			lda 	#ESTA_Low
.8559					_ENExitChange:
.8559	8d 05 07	sta $0705			sta 	EncodeState 				; save new state
.855c	38		sec				sec
.855d	60		rts				rts
.855e					_ENNoRestart:
.855e	48		pha				pha 								; save on stack.
.855f	ad 05 07	lda $0705			lda 	EncodeState 				; get current state
.8562	c9 01		cmp #$01			cmp 	#ESTA_Low
.8564	f0 09		beq $856f			beq  	_ESTALowState
.8566	c9 02		cmp #$02			cmp 	#ESTA_High
.8568	f0 27		beq $8591			beq 	_ESTAHighState
.856a	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.856c	f0 39		beq $85a7			beq 	_ESTADecimalState
>856e	db						.byte 	$DB 						; causes a break in the emulator
.856f					_ESTALowState:
.856f	68		pla				pla 								; get value back
.8570	c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.8572	f0 27		beq $859b			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.8574	29 0f		and #$0f			and 	#15 						; make digit
.8576	85 36		sta $36				sta 	zTemp0 						; save it.
.8578	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.857b	0a		asl a				asl 	a
.857c	0a		asl a				asl 	a
.857d	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.8580	0a		asl a				asl 	a
.8581	65 36		adc $36				adc 	zTemp0
.8583	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8586	c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.8588	90 05		bcc $858f			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.858a	a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.858c	8d 05 07	sta $0705			sta 	EncodeState
.858f					_ESTANoSwitch:
.858f	38		sec				sec
.8590	60		rts				rts
.8591					_ESTAHighState:
.8591	68		pla				pla 								; get value back
.8592	c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.8594	f0 05		beq $859b			beq 	_ESTASwitchFloat
.8596	20 fa 85	jsr $85fa			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.8599	38		sec				sec
.859a	60		rts				rts
.859b					_ESTASwitchFloat:
.859b	9c 06 07	stz $0706			stz 	DecimalCount
.859e	e8		inx				inx 								; zero the decimal additive.
.859f	20 47 88	jsr $8847			jsr 	NSMSetZero
.85a2	ca		dex				dex
.85a3	a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.85a5	80 b2		bra $8559			bra 	_ENExitChange
.85a7					_ESTADecimalState:
.85a7	68		pla				pla 								; digit.
.85a8	c9 2e		cmp #$2e			cmp 	#"." 						; fail on 2nd decimal point.
.85aa	f0 a1		beq $854d			beq 	_ENFail
.85ac	e8		inx				inx 								; put digit into fractional part of X+1
.85ad	20 fa 85	jsr $85fa			jsr 	ESTAShiftDigitIntoMantissa
.85b0	ca		dex				dex
.85b1	ee 06 07	inc $0706			inc 	DecimalCount 				; bump the count of decimals
.85b4	ad 06 07	lda $0706			lda 	DecimalCount
.85b7	c9 0b		cmp #$0b			cmp 	#11
.85b9	f0 02		beq $85bd			beq 	_ESTADSFail
.85bb	38		sec				sec
.85bc	60		rts				rts
.85bd					_ESTADSFail:
.85bd	4c 5a 92	jmp $925a			jmp 	RangeError
.85c0					_ENConstructFinal:
.85c0	ad 06 07	lda $0706			lda 	DecimalCount 				; get decimal count
.85c3	f0 33		beq $85f8			beq 	_ENCFExit 					; no decimals
.85c5	5a		phy				phy
.85c6	0a		asl a				asl 	a 							; x 4 and CLC
.85c7	0a		asl a				asl 	a
.85c8	6d 06 07	adc $0706			adc 	DecimalCount
.85cb	a8		tay				tay
.85cc	b9 19 92	lda $9219,y			lda 	DecimalScalarTable-5,y 		; copy decimal scalar to X+2
.85cf	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.85d2	b9 1a 92	lda $921a,y			lda 	DecimalScalarTable-5+1,y
.85d5	9d 12 06	sta $0612,x			sta 	NSMantissa1+2,x
.85d8	b9 1b 92	lda $921b,y			lda 	DecimalScalarTable-5+2,y
.85db	9d 1a 06	sta $061a,x			sta 	NSMantissa2+2,x
.85de	b9 1c 92	lda $921c,y			lda 	DecimalScalarTable-5+3,y
.85e1	9d 22 06	sta $0622,x			sta 	NSMantissa3+2,x
.85e4	b9 1d 92	lda $921d,y			lda 	DecimalScalarTable-5+4,y
.85e7	9d 2a 06	sta $062a,x			sta 	NSExponent+2,x
.85ea	a9 08		lda #$08			lda 	#NSTFloat
.85ec	9d 02 06	sta $0602,x			sta 	NSStatus+2,x
.85ef	7a		ply				ply
.85f0	e8		inx				inx 								; multiply decimal const by decimal scalar
.85f1	20 19 91	jsr $9119			jsr 	FloatMultiply
.85f4	ca		dex				dex
.85f5	20 ae 8f	jsr $8fae			jsr 	FloatAdd 					; add to integer part.
.85f8					_ENCFExit:
.85f8	18		clc				clc 								; reject the digit.
.85f9	60		rts				rts
.85fa					ESTAShiftDigitIntoMantissa:
.85fa	29 0f		and #$0f			and 	#15 						; save digit
.85fc	48		pha				pha
.85fd	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; push mantissa on stack
.8600	48		pha				pha
.8601	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.8604	48		pha				pha
.8605	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8608	48		pha				pha
.8609	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.860c	48		pha				pha
.860d	20 5c 88	jsr $885c			jsr 	NSMShiftLeft 				; x 2
.8610	20 5c 88	jsr $885c			jsr 	NSMShiftLeft 				; x 4
.8613	18		clc				clc 								; pop mantissa and add
.8614	68		pla				pla
.8615	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.8618	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.861b	68		pla				pla
.861c	7d 10 06	adc $0610,x			adc 	NSMantissa1,x
.861f	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8622	68		pla				pla
.8623	7d 18 06	adc $0618,x			adc 	NSMantissa2,x
.8626	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8629	68		pla				pla
.862a	7d 20 06	adc $0620,x			adc 	NSMantissa3,x
.862d	9d 20 06	sta $0620,x			sta 	NSMantissa3,x 				; x 5
.8630	20 5c 88	jsr $885c			jsr 	NSMShiftLeft 				; x 10
.8633	68		pla				pla 								; add digit
.8634	18		clc				clc
.8635	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.8638	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.863b	90 0d		bcc $864a			bcc 	_ESTASDExit
.863d	fe 10 06	inc $0610,x			inc 	NSMantissa1,x
.8640	d0 08		bne $864a			bne 	_ESTASDExit
.8642	fe 18 06	inc $0618,x			inc 	NSMantissa2,x
.8645	d0 03		bne $864a			bne 	_ESTASDExit
.8647	fe 20 06	inc $0620,x			inc 	NSMantissa3,x
.864a					_ESTASDExit:
.864a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/term/term.asm

.864b					EvaluateTerm:
.864b	b1 30		lda ($30),y			lda 	(codePtr),y
.864d	30 18		bmi $8667			bmi 	_ETCheckUnary 				; unary function ? (text ones)
.864f	c9 40		cmp #$40			cmp 	#$40 						; 40-7F => identifier reference
.8651	b0 6f		bcs $86c2			bcs 	_ETVariable
.8653	c9 30		cmp #$30			cmp 	#'0' 						; is it a number
.8655	90 6f		bcc $86c6			bcc 	_ETPuncUnary 				; if not it might be a punctuation unary.
.8657	c9 3a		cmp #$3a			cmp 	#'9'+1
.8659	b0 6b		bcs $86c6			bcs 	_ETPuncUnary
.865b	20 34 85	jsr $8534			jsr 	EncodeNumberStart 			; can't fail as it's 0-9 !
.865e					_ETNumber:
.865e	c8		iny				iny 								; keep encoding until we have the numbers
.865f	b1 30		lda ($30),y			lda 	(codePtr),y
.8661	20 37 85	jsr $8537			jsr 	EncodeNumberContinue
.8664	b0 f8		bcs $865e			bcs 	_ETNumber 					; go back if accepted.
.8666	60		rts				rts
.8667					_ETCheckUnary:
.8667	c9 ff		cmp #$ff			cmp 	#KWC_STRING 				; string token
.8669	f0 41		beq $86ac			beq 	_ETString
.866b	c9 fe		cmp #$fe			cmp 	#KWC_HEXCONST 				; hex constant.
.866d	f0 12		beq $8681			beq 	_ETHexConstant
.866f	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; check it actually is a unary function
.8671	90 0b		bcc $867e			bcc 	_ETSyntaxError
.8673	c9 96		cmp #$96			cmp 	#KWC_LAST_UNARY+1
.8675	b0 07		bcs $867e			bcs 	_ETSyntaxError
.8677	da		phx				phx 								; push X on the stack
.8678	0a		asl a				asl 	a 							; put vector x 2 into X
.8679	aa		tax				tax
.867a	c8		iny				iny 								; consume unary function token
.867b	7c 94 80	jmp ($8094,x)			jmp 	(VectorSet0,x) 				; and do it.
.867e					_ETSyntaxError:
.867e	4c 55 92	jmp $9255			jmp 	SyntaxError
.8681					_ETHexConstant:
.8681	c8		iny				iny 								; skip #
.8682	c8		iny				iny 								; skip count
.8683	20 47 88	jsr $8847			jsr 	NSMSetZero 					; clear result
.8686					_ETHLoop:
.8686	b1 30		lda ($30),y			lda 	(codePtr),y
.8688	c8		iny				iny 								; and consume
.8689	c9 00		cmp #$00			cmp 	#0 							; exit if zero
.868b	f0 1e		beq $86ab			beq 	_ETHExit
.868d	48		pha				pha 								; save on stack.
.868e	20 5c 88	jsr $885c			jsr 	NSMShiftLeft 				; x 2
.8691	20 5c 88	jsr $885c			jsr 	NSMShiftLeft 				; x 4
.8694	20 5c 88	jsr $885c			jsr 	NSMShiftLeft 				; x 8
.8697	20 5c 88	jsr $885c			jsr 	NSMShiftLeft 				; x 16
.869a	68		pla				pla 								; ASCII
.869b	c9 41		cmp #$41			cmp 	#'A'
.869d	90 02		bcc $86a1			bcc 	_ETHNotChar
.869f	e9 07		sbc #$07			sbc 	#7
.86a1					_ETHNotChar:
.86a1	29 0f		and #$0f			and 	#15 						; digit now
.86a3	1d 08 06	ora $0608,x			ora 	NSMantissa0,x 				; put in LS Nibble
.86a6	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.86a9	80 db		bra $8686			bra 	_ETHLoop 					; go round.
.86ab					_ETHExit:
.86ab	60		rts				rts
.86ac					_ETString:
.86ac	c8		iny				iny 								; look at length
.86ad	b1 30		lda ($30),y			lda 	(codePtr),y
.86af	48		pha				pha
.86b0	c8		iny				iny 								; first character
.86b1	20 c0 88	jsr $88c0			jsr 	MemoryInline 				; put address of string at (codePtr),y on stack
.86b4	68		pla				pla 								; restore count and save
.86b5	85 36		sta $36				sta 	zTemp0
.86b7	98		tya				tya 								; add length to Y to skip it.
.86b8	18		clc				clc
.86b9	65 36		adc $36				adc 	zTemp0
.86bb	a8		tay				tay
.86bc	a9 10		lda #$10			lda 	#NSTString 					; mark as string
.86be	9d 00 06	sta $0600,x			sta 	NSStatus,x
.86c1	60		rts				rts
.86c2					_ETVariable:
>86c2	db						.byte 	$DB 						; causes a break in the emulator
.86c3	4c ff ff	jmp $ffff			jmp 	$FFFF
.86c6					_ETPuncUnary:
.86c6	c8		iny				iny 								; consume the unary character
.86c7	c9 2d		cmp #$2d			cmp 	#KWD_MINUS 					; unary minus
.86c9	f0 31		beq $86fc			beq 	_ETUnaryNegate
.86cb	c9 10		cmp #$10			cmp 	#KWD_AT 					; @ reference -> constant
.86cd	f0 3d		beq $870c			beq 	_ETDereference
.86cf	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; parenthesis
.86d1	f0 58		beq $872b			beq 	_ETParenthesis
.86d3	c9 24		cmp #$24			cmp 	#KWD_DOLLAR
.86d5	f0 43		beq $871a			beq 	_ETStringReference
.86d7	64 36		stz $36				stz 	zTemp0 						; zTemp0 is the indirection level.
.86d9	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; byte indirection (0) ?
.86db	f0 06		beq $86e3			beq 	_ETIndirection
.86dd	e6 36		inc $36				inc 	zTemp0
.86df	c9 21		cmp #$21			cmp 	#KWD_PLING					; word indirection (1) \
.86e1	d0 9b		bne $867e			bne 	_ETSyntaxError
.86e3					_ETIndirection:
.86e3	a5 36		lda $36				lda 	zTemp0 						; push indirection amount (0-1) => (1-2) on the stack
.86e5	1a		inc a				inc 	a
.86e6	48		pha				pha
.86e7	20 4b 86	jsr $864b			jsr 	EvaluateTerm				; evaluate the term
.86ea	20 9a 84	jsr $849a			jsr 	Dereference 				; dereference it.
.86ed	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a +ve integer.
.86f0	d0 07		bne $86f9			bne 	_ETTypeMismatch
.86f2	68		pla				pla 								; indirection 1-2
.86f3	09 20		ora #$20			ora 	#NSBIsReference 			; make it a reference.
.86f5	9d 00 06	sta $0600,x			sta 	NSStatus,x
.86f8	60		rts				rts
.86f9					_ETTypeMismatch:
.86f9	4c 5f 92	jmp $925f			jmp 	TypeError
.86fc					_ETUnaryNegate:
.86fc	20 4b 86	jsr $864b			jsr 	EvaluateTerm				; evaluate the term
.86ff	20 9a 84	jsr $849a			jsr 	Dereference 				; dereference it.
.8702	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a number
.8705	29 10		and #$10			and 	#NSTString
.8707	d0 f0		bne $86f9			bne 	_ETTypeMismatch
.8709	4c f3 87	jmp $87f3			jmp 	NSMNegate  					; just toggles the sign bit.
.870c					_ETDereference:
.870c	20 4b 86	jsr $864b			jsr 	EvaluateTerm				; evaluate the term
.870f	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a reference
.8712	29 20		and #$20			and 	#NSBIsReference
.8714	f0 e3		beq $86f9			beq 	_ETTypeMismatch
.8716	9e 00 06	stz $0600,x			stz 	NSStatus,x 					; make it an integer address
.8719	60		rts				rts
.871a					_ETStringReference:
.871a	20 4b 86	jsr $864b			jsr 	EvaluateTerm				; evaluate the term
.871d	20 9a 84	jsr $849a			jsr 	Dereference 				; dereference it.
.8720	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a +ve integer.
.8723	d0 d4		bne $86f9			bne 	_ETTypeMismatch
.8725	a9 10		lda #$10			lda 	#NSTString 					; make it a string
.8727	9d 00 06	sta $0600,x			sta 	NSStatus,x
.872a	60		rts				rts
.872b					_ETParenthesis:
.872b	20 58 84	jsr $8458			jsr 	EvaluateExpression 			; evaluate here, from lowest precedence
.872e	20 41 8d	jsr $8d41			jsr 	CheckRightBracket 			; check for )
.8731	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/unary/abs.asm

.919f					AbsUnary:
.919f	fa		plx				plx 								; restore stack pos
.91a0	20 9e 87	jsr $879e			jsr 	EvaluateNumber 				; get a float or int
.91a3	20 41 8d	jsr $8d41			jsr 	CheckRightBracket
.91a6	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; clear the sign bit
.91a9	29 7f		and #$7f			and 	#$7F
.91ab	9d 00 06	sta $0600,x			sta 	NSStatus,x
.91ae	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/unary/asc.asm

.91af					AscUnary:
.91af	fa		plx				plx 								; restore stack pos
.91b0	20 a9 87	jsr $87a9			jsr 	EvaluateString 				; get a string
.91b3	b2 36		lda ($36)			lda 	(zTemp0)					; get/return firs character
.91b5	20 49 88	jsr $8849			jsr 	NSMSetByte
.91b8	20 41 8d	jsr $8d41			jsr 	CheckRightBracket
.91bb	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/unary/frac.asm

.91bc					FracUnary:
.91bc	fa		plx				plx 								; restore stack pos
.91bd	20 9e 87	jsr $879e			jsr 	EvaluateNumber 				; get a float or int
.91c0	20 41 8d	jsr $8d41			jsr 	CheckRightBracket
.91c3	bd 00 06	lda $0600,x			lda 	NSStatus,x
.91c6	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.91c8	f0 04		beq $91ce			beq 	_IUZero
.91ca	20 8c 90	jsr $908c			jsr 	FloatFractionalPart
.91cd	60		rts				rts
.91ce					_IUZero:
.91ce	20 47 88	jsr $8847			jsr 	NSMSetZero
.91d1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/unary/int.asm

.91d2					IntUnary:
.91d2	fa		plx				plx 								; restore stack pos
.91d3	20 9e 87	jsr $879e			jsr 	EvaluateNumber 				; get a float or int
.91d6	20 41 8d	jsr $8d41			jsr 	CheckRightBracket
.91d9	bd 00 06	lda $0600,x			lda 	NSStatus,x
.91dc	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.91de	f0 03		beq $91e3			beq 	_IUExit
.91e0	20 ef 90	jsr $90ef			jsr 	FloatIntegerPart
.91e3					_IUExit:
.91e3	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/unary/len.asm

.91e4					LenUnary:
.91e4	fa		plx				plx 								; restore stack pos
.91e5	20 a9 87	jsr $87a9			jsr 	EvaluateString 				; get a string
.91e8	5a		phy				phy
.91e9	a0 00		ldy #$00			ldy 	#0 							; find length
.91eb					_LenFind:
.91eb	b1 36		lda ($36),y			lda 	(zTemp0),y
.91ed	f0 06		beq $91f5			beq 	_LenExit
.91ef	c8		iny				iny
.91f0	d0 f9		bne $91eb			bne 	_LenFind
.91f2	4c 5a 92	jmp $925a			jmp 	RangeError 					; string > 255
.91f5					_LenExit:
.91f5	98		tya				tya
.91f6	20 49 88	jsr $8849			jsr 	NSMSetByte
.91f9	7a		ply				ply
.91fa	20 41 8d	jsr $8d41			jsr 	CheckRightBracket
.91fd	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/unary/not.asm

.8732					Unary_Not:
.8732	fa		plx				plx
.8733	20 c1 87	jsr $87c1			jsr 	EvaluateInteger 			; get integer
.8736	20 41 8d	jsr $8d41			jsr 	CheckRightBracket
.8739	20 77 88	jsr $8877			jsr 	NSMIsZero 					; zero mantissa ?
.873c	f0 04		beq $8742			beq 	_NotZero
.873e	20 47 88	jsr $8847			jsr 	NSMSetZero
.8741	60		rts				rts
.8742					_NotZero:
.8742	4c 5b 8d	jmp $8d5b			jmp 	ReturnTrue
.8745					_UNBad:
.8745	4c 64 92	jmp $9264			jmp 	ArgumentError

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/unary/rnd.asm

.8748					Unary_Rnd:
.8748	20 9e 87	jsr $879e			jsr 	EvaluateNumber 				; number to use.
.874b	20 41 8d	jsr $8d41			jsr 	CheckRightBracket 			; closing bracket
.874e	20 77 87	jsr $8777			jsr 	Random32Bit 				; generate a number.
.8751	ad 07 07	lda $0707			lda 	RandomSeed+0
.8754	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8757	ad 08 07	lda $0708			lda 	RandomSeed+1
.875a	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.875d	ad 09 07	lda $0709			lda 	RandomSeed+2
.8760	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8763	ad 0a 07	lda $070a			lda 	RandomSeed+3
.8766	29 7f		and #$7f			and 	#$7F 						; make legal mantissa
.8768	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.876b	a9 e1		lda #$e1			lda 	#-31 						; force into 0-1 range
.876d	8d 28 06	sta $0628			sta 	NSExponent
.8770	a9 08		lda #$08			lda 	#NSTFloat
.8772	8d 00 06	sta $0600			sta 	NSStatus 					; positive.
>8775	db						.byte 	$DB 						; causes a break in the emulator
.8776	60		rts				rts
.8777					Random32Bit:
.8777	5a		phy				phy
.8778	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.877a	ad 07 07	lda $0707			lda 	RandomSeed+0 				; check the seed isn't zero
.877d	d0 03		bne $8782			bne 	_Random1
.877f	a8		tay				tay 								; if so do it 256 times
.8780	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.8782					_Random1:
.8782	0a		asl a				asl 	a 							; LSFR RNG
.8783	2e 08 07	rol $0708			rol 	RandomSeed+1
.8786	2e 09 07	rol $0709			rol 	RandomSeed+2
.8789	2e 0a 07	rol $070a			rol 	RandomSeed+3
.878c	90 02		bcc $8790			bcc 	_Random2
.878e	49 c5		eor #$c5			eor 	#$C5
.8790					_Random2:
.8790	88		dey				dey
.8791	d0 ef		bne $8782			bne 	_Random1
.8793	7a		ply				ply
.8794	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/unary/sgn.asm

.91fe					SgnUnary:
.91fe	fa		plx				plx 								; restore stack pos
.91ff	20 9e 87	jsr $879e			jsr 	EvaluateNumber 				; get a float or int
.9202	20 41 8d	jsr $8d41			jsr 	CheckRightBracket
.9205	20 77 88	jsr $8877			jsr 	NSMIsZero 					; if zero
.9208	f0 10		beq $921a			beq 	_SGZero  					; return Int Zero
.920a	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get status w/sign
.920d	48		pha				pha
.920e	a9 01		lda #$01			lda 	#1 							; set to 1
.9210	20 49 88	jsr $8849			jsr 	NSMSetByte
.9213	68		pla				pla
.9214	29 80		and #$80			and		#$80 						; copy the sign byte out
.9216	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9219	60		rts				rts
.921a	20 47 88	jsr $8847	_SGZero:jsr 	NSMSetZero
.921d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/utility/exprhelper.asm

.8795					EvaluateValue:
.8795	48		pha				pha
.8796	20 56 84	jsr $8456			jsr		EvaluateExpressionAt0 		; expression
.8799	20 9a 84	jsr $849a			jsr 	Dereference					; derefernce it
.879c	68		pla				pla
.879d	60		rts				rts
.879e					EvaluateNumber:
.879e	20 95 87	jsr $8795			jsr 	EvaluateValue 				; get a value
.87a1	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if string.
.87a4	29 10		and #$10			and 	#NSBIsString
.87a6	d0 16		bne $87be			bne 	HelperTypeError
.87a8	60		rts				rts
.87a9					EvaluateString:
.87a9	20 95 87	jsr $8795			jsr 	EvaluateValue 				; get a value
.87ac	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if string.
.87af	29 10		and #$10			and 	#NSBIsString
.87b1	f0 0b		beq $87be			beq 	HelperTypeError
.87b3					CopyAddressToTemp0:
.87b3	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy address -> zTemp0
.87b6	85 36		sta $36				sta 	zTemp0
.87b8	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.87bb	85 37		sta $37				sta 	zTemp0+1
.87bd	60		rts				rts
.87be					HelperTypeError:
.87be	4c 5f 92	jmp $925f			jmp 	TypeError
.87c1					EvaluateInteger:
.87c1	20 9e 87	jsr $879e			jsr 	EvaluateNumber
.87c4	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check exponent is zero
.87c7	d0 0a		bne $87d3			bne 	HelperValueError 			; if not, it's a float.
.87c9	60		rts				rts
.87ca					EvaluateUnsignedInteger:
.87ca	20 c1 87	jsr $87c1			jsr 	EvaluateInteger 			; check integer is +ve
.87cd	bd 00 06	lda $0600,x			lda 	NSStatus,x
.87d0	30 01		bmi $87d3			bmi 	HelperValueError
.87d2	60		rts				rts
.87d3					HelperValueError:
.87d3	4c 64 92	jmp $9264			jmp 	ArgumentError
.87d6					Evaluate16BitInteger:
.87d6	20 ca 87	jsr $87ca			jsr	 	EvaluateUnsignedInteger		; get integer
.87d9	bd 20 06	lda $0620,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.87dc	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.87df	d0 f2		bne $87d3			bne 	HelperValueError
.87e1	60		rts				rts
.87e2					Evaluate8BitInteger:
.87e2	20 ca 87	jsr $87ca			jsr	 	EvaluateUnsignedInteger 	; get an integer
.87e5	d0 ec		bne $87d3			bne 	HelperValueError
.87e7	bd 20 06	lda $0620,x			lda 	NSMantissa3,x	 			; bytes 1, 2 & 3 must be zero
.87ea	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.87ed	1d 10 06	ora $0610,x			ora 	NSMantissa1,x
.87f0	d0 e1		bne $87d3			bne 	HelperValueError
.87f2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/utility/utility.asm

.87f3					NSMNegate:
.87f3	bd 00 06	lda $0600,x			lda 	NSStatus,x
.87f6	49 80		eor #$80			eor 	#NSBIsNegative
.87f8	9d 00 06	sta $0600,x			sta 	NSStatus,x
.87fb	60		rts				rts
.87fc					NSMNegateMantissa:
.87fc	38		sec				sec
.87fd	a9 00		lda #$00			lda 	#0
.87ff	fd 08 06	sbc $0608,x			sbc 	NSMantissa0,x
.8802	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8805	a9 00		lda #$00			lda 	#0
.8807	fd 10 06	sbc $0610,x			sbc 	NSMantissa1,x
.880a	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.880d	a9 00		lda #$00			lda 	#0
.880f	fd 18 06	sbc $0618,x			sbc 	NSMantissa2,x
.8812	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8815	a9 00		lda #$00			lda 	#0
.8817	fd 20 06	sbc $0620,x			sbc 	NSMantissa3,x
.881a	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.881d	60		rts				rts
.881e					NSMShiftUpTwo:
.881e	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.8821	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.8824	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8827	9d 12 06	sta $0612,x			sta 	NSMantissa1+2,x
.882a	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.882d	9d 1a 06	sta $061a,x			sta 	NSMantissa2+2,x
.8830	bd 20 06	lda $0620,x			lda 	NSMantissa3,x
.8833	9d 22 06	sta $0622,x			sta 	NSMantissa3+2,x
.8836	bd 28 06	lda $0628,x			lda 	NSExponent,x
.8839	9d 2a 06	sta $062a,x			sta 	NSExponent+2,x
.883c	bd 00 06	lda $0600,x			lda 	NSStatus,x
.883f	9d 02 06	sta $0602,x			sta 	NSStatus+2,x
.8842	60		rts				rts
.8843					NSMSetZeroMantissaOnly:
.8843	a9 00		lda #$00			lda 	#0
.8845	80 08		bra $884f			bra 	NSMSetMantissa
.8847					NSMSetZero:
.8847	a9 00		lda #$00			lda 	#0
.8849					NSMSetByte:
.8849	9e 28 06	stz $0628,x			stz 	NSExponent,x 				; zero exponent, as integer.
.884c	9e 00 06	stz $0600,x			stz 	NSStatus,x 					; status zero (integer)
.884f					NSMSetMantissa:
.884f	9d 08 06	sta $0608,x			sta 	NSMantissa0,x 				; mantissa
.8852	9e 10 06	stz $0610,x			stz 	NSMantissa1,x
.8855	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.8858	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.885b	60		rts				rts
.885c					NSMShiftLeft:
.885c	18		clc				clc
.885d					NSMRotateLeft:
.885d	3e 08 06	rol $0608,x			rol 	NSMantissa0,x
.8860	3e 10 06	rol $0610,x			rol		NSMantissa1,x
.8863	3e 18 06	rol $0618,x			rol		NSMantissa2,x
.8866	3e 20 06	rol $0620,x			rol		NSMantissa3,x
.8869	60		rts				rts
.886a					NSMShiftRight:
.886a	5e 20 06	lsr $0620,x			lsr 	NSMantissa3,x
.886d	7e 18 06	ror $0618,x			ror		NSMantissa2,x
.8870	7e 10 06	ror $0610,x			ror		NSMantissa1,x
.8873	7e 08 06	ror $0608,x			ror		NSMantissa0,x
.8876	60		rts				rts
.8877					NSMIsZero:
.8877	bd 20 06	lda $0620,x			lda 	NSMantissa3,x
.887a	1d 18 06	ora $0618,x			ora		NSMantissa2,x
.887d	1d 10 06	ora $0610,x			ora		NSMantissa1,x
.8880	1d 08 06	ora $0608,x			ora		NSMantissa0,x
.8883	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./generated/constants.asm

.921e					DecimalScalarTable:
>921e	66 66 66 66				.dword $66666666 ; 0.1
>9222	de					.byte $de
>9223	1f 85 eb 51				.dword $51eb851f ; 0.01
>9227	db					.byte $db
>9228	4c 37 89 41				.dword $4189374c ; 0.001
>922c	d8					.byte $d8
>922d	ac 8b db 68				.dword $68db8bac ; 0.0001
>9231	d4					.byte $d4
>9232	24 d6 e2 53				.dword $53e2d624 ; 1e-05
>9236	d1					.byte $d1
>9237	83 de 1b 43				.dword $431bde83 ; 1e-06
>923b	ce					.byte $ce
>923c	6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>9240	ca					.byte $ca
>9241	89 3b e6 55				.dword $55e63b89 ; 1e-08
>9245	c7					.byte $c7
>9246	a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>924a	c4					.byte $c4
>924b	67 7f f3 6d				.dword $6df37f67 ; 1e-10
>924f	c0					.byte $c0
>9250	86 ff f5 57				.dword $57f5ff86 ; 1e-11
>9254	bd					.byte $bd

;******  Return to file: _basic.asm


;******  Processing file: ./generated/errors.asm

.9255					SyntaxError:
.9255	a9 02		lda #$02		lda	#2
.9257	4c af 81	jmp $81af		jmp	ErrorHandler
.925a					RangeError:
.925a	a9 04		lda #$04		lda	#4
.925c	4c af 81	jmp $81af		jmp	ErrorHandler
.925f					TypeError:
.925f	a9 05		lda #$05		lda	#5
.9261	4c af 81	jmp $81af		jmp	ErrorHandler
.9264					ArgumentError:
.9264	a9 07		lda #$07		lda	#7
.9266	4c af 81	jmp $81af		jmp	ErrorHandler
.9269					NotDoneError:
.9269	a9 0c		lda #$0c		lda	#12
.926b	4c af 81	jmp $81af		jmp	ErrorHandler
.926e					ErrorText:
>926e	42 72 65 61 6b 00			.text	"Break",0
>9274	53 79 6e 74 61 78 20 65			.text	"Syntax error",0
>927c	72 72 6f 72 00
>9281	44 69 76 69 73 69 6f 6e			.text	"Division by zero",0
>9289	20 62 79 20 7a 65 72 6f 00
>9292	4f 75 74 20 6f 66 20 52			.text	"Out of Range",0
>929a	61 6e 67 65 00
>929f	54 79 70 65 20 6d 69 73			.text	"Type mismatch",0
>92a7	6d 61 74 63 68 00
>92ad	4f 75 74 20 6f 66 20 6d			.text	"Out of memory",0
>92b5	65 6d 6f 72 79 00
>92bb	49 6c 6c 65 67 61 6c 20			.text	"Illegal argument",0
>92c3	61 72 67 75 6d 65 6e 74 00
>92cc	53 74 6f 70 00				.text	"Stop",0
>92d1	53 74 72 69 6e 67 20 74			.text	"String too long",0
>92d9	6f 6f 20 6c 6f 6e 67 00
>92e1	41 73 73 65 72 74 69 6f			.text	"Assertion failed",0
>92e9	6e 20 66 61 69 6c 65 64 00
>92f2	4f 75 74 20 6f 66 20 64			.text	"Out of data",0
>92fa	61 74 61 00
>92fe	55 6e 69 6d 70 6c 65 6d			.text	"Unimplemented",0
>9306	65 6e 74 65 64 00

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/junior/memory.asm

.930c					MemoryPeek:
.930c	b2 36		lda ($36)			lda 	(zTemp0)
.930e	60		rts				rts
.930f					MemoryPoke:
.930f	92 36		sta ($36)			sta 	(zTemp0)
.9311	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/junior/vectors.asm

.9312					EXTPrintCharacter:
.9312	48		pha				pha
.9313	da		phx				phx
.9314	5a		phy				phy
.9315	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.9318	7a		ply				ply
.9319	fa		plx				plx
.931a	68		pla				pla
.931b	60		rts				rts
.931c					EXTInputSingleCharacter:
.931c	da		phx				phx
.931d	5a		phy				phy
.931e					_EISCWait:
.931e	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.9321	c9 00		cmp #$00			cmp 	#0
.9323	f0 f9		beq $931e			beq 	_EISCWait
.9325	7a		ply				ply
.9326	fa		plx				plx
.9327	60		rts				rts
.9328					EXTInputLine:
.9328	a2 00		ldx #$00			ldx 	#0 							; position in line <- start of line
.932a					_ILLoop:
.932a	da		phx				phx 								; read character in
.932b	20 cf ff	jsr $ffcf			jsr 	$FFCF
.932e	fa		plx				plx
.932f	c9 08		cmp #$08			cmp 	#8 							; backspace, CBM doesn't need this.
.9331	f0 12		beq $9345			beq 	_ILBackspace
.9333	c9 0d		cmp #$0d			cmp 	#13							; exit ?
.9335	f0 15		beq $934c			beq 	_ILExit
.9337	c9 20		cmp #$20			cmp 	#32 						; ignore other control
.9339	90 ef		bcc $932a			bcc 	_ILLoop
.933b	e0 50		cpx #$50			cpx 	#MaxLineSize 				; already full buffer
.933d	f0 eb		beq $932a			beq 	_ILLoop
.933f	9d 0b 08	sta $080b,x			sta 	lineBuffer,x 				; save it
.9342	e8		inx				inx
.9343	80 e5		bra $932a			bra 	_ILLoop
.9345					_ILBackspace:
.9345	e0 00		cpx #$00			cpx 	#0  						; can't backspace, start of line.
.9347	f0 e1		beq $932a			beq 	_ILLoop
.9349	ca		dex				dex 								; back one.
.934a	80 de		bra $932a			bra 	_ILLoop
.934c					_ILExit:
.934c	20 12 93	jsr $9312			jsr 	EXTPrintCharacter
.934f	9e 0b 08	stz $080b,x			stz 	lineBuffer,x 				; make ASCIIZ and exit with address in XA
.9352	60		rts				rts
.9353					EXTBreakCheck:
.9353	4c e1 ff	jmp $ffe1			jmp		$FFE1

;******  Return to file: _basic.asm


;******  Processing file: ./memory.flat/memory.asm

.8884					MemoryNew:
.8884	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.8886	85 30		sta $30				sta 	codePtr
.8888	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.888a	85 31		sta $31				sta 	codePtr+1
.888c	a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.888e	92 30		sta ($30)			sta 	(codePtr)
.8890	60		rts				rts
.8891					MemoryAppend:
.8891	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.8893	85 30		sta $30				sta 	codePtr
.8895	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.8897	85 31		sta $31				sta 	codePtr+1
.8899					_MAFindEnd:
.8899	b2 30		lda ($30)			lda 	(codePtr)
.889b	f0 0d		beq $88aa			beq 	_MAFoundEnd
.889d	18		clc				clc
.889e	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.88a0	65 30		adc $30				adc 	codePtr
.88a2	85 30		sta $30				sta 	codePtr
.88a4	90 02		bcc $88a8			bcc 	_CREExit
.88a6	e6 31		inc $31				inc 	codePtr+1
.88a8					_CREExit:
.88a8	80 ef		bra $8899			bra 	_MAFindEnd
.88aa					_MAFoundEnd:
.88aa	ac 0b 07	ldy $070b			ldy 	tokenOffset 				; bytes to copy
.88ad	c0 04		cpy #$04			cpy 	#4 							; blank line
.88af	f0 0e		beq $88bf			beq 	_MANoLine
.88b1	a9 00		lda #$00			lda 	#0 							; end of program
.88b3	91 30		sta ($30),y			sta 	(codePtr),y
.88b5					_MACopy:
.88b5	88		dey				dey
.88b6	b9 0b 07	lda $070b,y			lda 	tokenOffset,y
.88b9	91 30		sta ($30),y			sta 	(codePtr),y
.88bb	c0 00		cpy #$00			cpy 	#0
.88bd	d0 f6		bne $88b5			bne 	_MACopy
.88bf					_MANoLine:
.88bf	60		rts				rts
.88c0					MemoryInline:
.88c0	98		tya				tya 								; put address into stack,x
.88c1	18		clc				clc
.88c2	65 30		adc $30				adc 	codePtr
.88c4	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.88c7	a5 31		lda $31				lda 	codePtr+1
.88c9	69 00		adc #$00			adc 	#0
.88cb	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.88ce	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.88d1	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.88d4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./memory.flat/variable.asm

.88d5					VariableOpen:
.88d5	60		rts				rts
.88d6					VariableClose:
.88d6	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./tokeniser/backload.asm

.88d7					BackloadProgram:
.88d7	a2 ff		ldx #$ff			ldx 	#$FF
.88d9	8e fa ff	stx $fffa			stx 	$FFFA 						; fast mode
.88dc	20 00 89	jsr $8900			jsr 	BLReadByte
.88df	30 1e		bmi $88ff			bmi 	_BPExit
.88e1					_BPCopy:
.88e1	e8		inx				inx  								; copy byte in
.88e2	9d 0b 08	sta $080b,x			sta 	lineBuffer,x
.88e5	9e 0c 08	stz $080c,x			stz 	lineBuffer+1,x
.88e8	20 00 89	jsr $8900			jsr 	BLReadByte 					; read next byte
.88eb	30 0a		bmi $88f7			bmi 	_BPEndLine 					; -ve = EOL
.88ed	c9 09		cmp #$09			cmp 	#9 							; handle TAB
.88ef	d0 02		bne $88f3			bne 	_BPNotTab
.88f1	a9 20		lda #$20			lda 	#' '
.88f3					_BPNotTab:
.88f3	c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.88f5	b0 ea		bcs $88e1			bcs 	_BPCopy
.88f7					_BPEndLine:
.88f7	20 bc 8a	jsr $8abc			jsr 	TokeniseLine 				; tokenise the line.
.88fa	20 91 88	jsr $8891			jsr 	MemoryAppend 				; append to current program
.88fd	80 d8		bra $88d7			bra 	BackloadProgram
.88ff					_BPExit:
.88ff	60		rts				rts
.8900					BLReadByte:
.8900					_BLLoad:
.8900	ad 00 30	lda $3000			lda 	$3000 						; hardcoded in the makefile.
.8903	ee 01 89	inc $8901			inc 	_BLLoad+1
.8906	d0 03		bne $890b			bne 	_BLNoCarry
.8908	ee 02 89	inc $8902			inc 	_BLLoad+2
.890b					_BLNoCarry:
.890b	c9 00		cmp #$00			cmp 	#0
.890d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./tokeniser/searchtokens.asm

.890e					TokeniseSearchTable:
.890e	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token.
.8910	85 36		sta $36				sta 	zTemp0
.8912	a0 00		ldy #$00			ldy 	#0
.8914	a9 80		lda #$80			lda 	#$80 						; token #
.8916	85 38		sta $38				sta 	zTemp1
.8918					_TSTLoop:
.8918	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.891a	30 49		bmi $8965			bmi 	_TSTFail 					; -ve = end of table
.891c	f0 2e		beq $894c			beq 	_TSTNext 					; zero, check next it's a dummy
.891e	c8		iny				iny 								; get the hash
.891f	b1 36		lda ($36),y			lda 	(zTemp0),y
.8921	88		dey				dey
.8922	cd 03 07	cmp $0703			cmp 	identHash 					; check they match, if not go to next
.8925	d0 25		bne $894c			bne 	_TSTNext
.8927	ad 02 07	lda $0702			lda 	identTypeEnd 				; length of identifier
.892a	38		sec				sec
.892b	ed 00 07	sbc $0700			sbc 	identStart
.892e	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; no match, then return.
.8930	d0 1a		bne $894c			bne 	_TSTNext
.8932	5a		phy				phy 								; save Y , we might fail
.8933	c8		iny				iny 								; point to text
.8934	c8		iny				iny
.8935	ae 00 07	ldx $0700			ldx 	identStart 					; offset in line buffer in X
.8938					_TSTCompareName:
.8938	bd 0b 08	lda $080b,x			lda 	lineBuffer,x 				; compare text.
.893b	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.893d	d0 0c		bne $894b			bne 	_TSTNextPullY 				; fail, pullY and do next
.893f	e8		inx				inx
.8940	c8		iny				iny
.8941	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; complete match.
.8944	d0 f2		bne $8938			bne 	_TSTCompareName
.8946	7a		ply				ply 								; throw Y
.8947	a5 38		lda $38				lda 	zTemp1 						; get token #
.8949	38		sec				sec 								; return with CS = passed.
.894a	60		rts				rts
.894b					_TSTNextPullY:
.894b	7a		ply				ply 								; restore current, fall through.
.894c					_TSTNext:
.894c	e6 38		inc $38				inc 	zTemp1 						; token counter
.894e	98		tya				tya
.894f	18		clc				clc
.8950	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.8952	1a		inc a				inc 	a 							; +1
.8953	1a		inc a				inc 	a 							; +2
.8954	a8		tay				tay
.8955	10 c1		bpl $8918			bpl 	_TSTLoop 					; if Y < $80 loop back
.8957	98		tya				tya 								; add Y to zTemp0 and reset Y
.8958	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.895a	18		clc				clc  								; but have tables > 255 bytes
.895b	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.895d	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.895f	90 b7		bcc $8918			bcc 	_TSTLoop
.8961	e6 37		inc $37				inc 	zTemp0+1
.8963	80 b3		bra $8918			bra 	_TSTLoop
.8965					_TSTFail:
.8965	18		clc				clc
.8966	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./tokeniser/tokenise.asm


;******  Processing file: ./tokeniser/../generated/kwdtext.dat

.8967					KeywordSet0:
>8967	00 65					.text	0,$65,""               ; $80 !0:EOF
>8969	00 58					.text	0,$58,""               ; $81 !1:SH1
>896b	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>896d	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $83 ABS(
>8973	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $84 ALLOC(
>897b	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $85 ASC(
>8981	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $86 CHR$(
>8988	05 6b 46 41 4c 53 45			.text	5,$6b,"FALSE"          ; $87 FALSE
>898f	05 44 46 52 41 43 28			.text	5,$44,"FRAC("          ; $88 FRAC(
>8996	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $89 INT(
>899c	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $8a ISVAL(
>89a4	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $8b LEFT$(
>89ac	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $8c LEN(
>89b2	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $8d MID$(
>89b9	04 19 4e 4f 54 28			.text	4,$19,"NOT("           ; $8e NOT(
>89bf	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $8f RIGHT$(
>89c7	28
>89c8	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $90 RND(
>89ce	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $91 SGN(
>89d4	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $92 SPC(
>89da	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $93 STR$(
>89e1	04 40 54 52 55 45			.text	4,$40,"TRUE"           ; $94 TRUE
>89e7	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $95 VAL(
>89ed	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $96 FOR
>89f2	02 8f 49 46				.text	2,$8f,"IF"             ; $97 IF
>89f6	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $98 PROC
>89fc	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $99 REPEAT
>8a04	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $9a WHILE
>8a0b	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $9b ENDIF
>8a12	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $9c ENDPROC
>8a1a	43
>8a1b	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $9d NEXT
>8a21	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $9e UNTIL
>8a28	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $9f WEND
>8a2e	04 1c 43 41 4c 4c			.text	4,$1c,"CALL"           ; $a0 CALL
>8a34	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $a1 CLS
>8a39	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $a2 DATA
>8a3f	03 da 44 49 4d				.text	3,$da,"DIM"            ; $a3 DIM
>8a44	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $a4 GOSUB
>8a4b	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $a5 GOTO
>8a51	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $a6 LET
>8a56	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $a7 PRINT
>8a5d	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $a8 READ
>8a63	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $a9 REM
>8a68	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $aa RETURN
>8a70	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $ab THEN
>8a76	02 a3 54 4f				.text	2,$a3,"TO"             ; $ac TO
>8a7a	ff					.text	$FF
.8a7b					KeywordSet1:
>8a7b	00 65					.text	0,$65,""               ; $80 !0:EOF
>8a7d	00 58					.text	0,$58,""               ; $81 !1:SH1
>8a7f	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>8a81	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $83 ASSERT
>8a89	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $84 CLEAR
>8a90	03 d7 45 4e 44				.text	3,$d7,"END"            ; $85 END
>8a95	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $86 LIST
>8a9b	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $87 NEW
>8aa0	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $88 RESTORE
>8aa8	45
>8aa9	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $89 RUN
>8aae	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $8a STOP
>8ab4	ff					.text	$FF
.8ab5					KeywordSet2:
>8ab5	00 65					.text	0,$65,""               ; $80 !0:EOF
>8ab7	00 58					.text	0,$58,""               ; $81 !1:SH1
>8ab9	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>8abb	ff					.text	$FF

;******  Return to file: ./tokeniser/tokenise.asm

.8abc					TokeniseLine:
.8abc	20 44 8c	jsr $8c44			jsr 	FixLineBufferCase 			; fix line case
.8abf	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.8ac1	8d 0b 07	sta $070b			sta 	tokenOffset
.8ac4	9c 0c 07	stz $070c			stz 	tokenLineNumber
.8ac7	9c 0d 07	stz $070d			stz 	tokenLineNumber+1
.8aca	a2 ff		ldx #$ff			ldx 	#$FF
.8acc					_TKFindFirst:
.8acc	e8		inx				inx
.8acd	bd 0b 08	lda $080b,x			lda 	lineBuffer,x
.8ad0	f0 79		beq $8b4b			beq 	_TKExit
.8ad2	c9 20		cmp #$20			cmp 	#' '
.8ad4	90 f6		bcc $8acc			bcc 	_TKFindFirst
.8ad6	c9 30		cmp #$30			cmp 	#'0'
.8ad8	90 07		bcc $8ae1			bcc 	_TKNoLineNumber
.8ada	c9 3a		cmp #$3a			cmp 	#'9'+1
.8adc	b0 03		bcs $8ae1			bcs 	_TKNoLineNumber
.8ade	20 6e 8c	jsr $8c6e			jsr 	TokeniseExtractLineNumber
.8ae1					_TKNoLineNumber:
.8ae1					_TKTokeniseLoop:
.8ae1	bd 0b 08	lda $080b,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.8ae4	f0 65		beq $8b4b			beq 	_TKExit
.8ae6	e8		inx				inx
.8ae7	c9 20		cmp #$20			cmp 	#' '
.8ae9	f0 f6		beq $8ae1			beq 	_TKTokeniseLoop 			; keep looping if space found.
.8aeb	ca		dex				dex 								; undo last get, A contains character, X is position.
.8aec	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.8aee	f0 61		beq $8b51			beq 	_TKTokeniseIdentifier
.8af0	c9 41		cmp #$41			cmp 	#'A'
.8af2	90 04		bcc $8af8			bcc 	_TKTokenisePunctuation
.8af4	c9 5b		cmp #$5b			cmp 	#'Z'+1
.8af6	90 59		bcc $8b51			bcc 	_TKTokeniseIdentifier
.8af8					_TKTokenisePunctuation:
.8af8	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.8afa	f0 27		beq $8b23			beq 	_TKString
.8afc	c9 23		cmp #$23			cmp 	#'#'						; hexadecimal constant (# only appears at end of identifiers)
.8afe	f0 28		beq $8b28			beq 	_TKHexConstant
.8b00	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers.
.8b02	f0 29		beq $8b2d			beq 	_TKCheckDouble
.8b04	c9 3e		cmp #$3e			cmp 	#'>'
.8b06	f0 25		beq $8b2d			beq 	_TKCheckDouble
.8b08					_TKStandardPunctuation:
.8b08	bd 0b 08	lda $080b,x			lda 	lineBuffer,x 				; get it back.
.8b0b	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.8b0d	90 0e		bcc $8b1d			bcc 	_TKNoShift
.8b0f	48		pha				pha 								; save
.8b10	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.8b12	85 36		sta $36				sta 	zTemp0
.8b14	68		pla				pla
.8b15	29 20		and #$20			and 	#32 						; bit 5
.8b17	4a		lsr a				lsr 	a 							; shift into bit 3
.8b18	4a		lsr a				lsr 	a
.8b19	05 36		ora $36				ora 	zTemp0
.8b1b	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.8b1d					_TKNoShift:
.8b1d	20 b3 8c	jsr $8cb3			jsr 	TokeniseWriteByte 			; write the punctuation character
.8b20	e8		inx				inx 								; consume the character
.8b21	80 be		bra $8ae1			bra 	_TKTokeniseLoop 			; and loop round again.
.8b23					_TKString:
.8b23	20 d3 8b	jsr $8bd3			jsr 	TokeniseString
.8b26	80 b9		bra $8ae1			bra 	_TKTokeniseLoop
.8b28					_TKHexConstant:
.8b28	20 0e 8c	jsr $8c0e			jsr 	TokeniseHexConstant
.8b2b	80 b4		bra $8ae1			bra 	_TKTokeniseLoop
.8b2d					_TKCheckDouble:
.8b2d	bd 0c 08	lda $080c,x			lda 	lineBuffer+1,x 				; get next character
.8b30	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.8b32	90 d4		bcc $8b08			bcc 	_TKStandardPunctuation
.8b34	c9 3f		cmp #$3f			cmp 	#'>'+1
.8b36	b0 d0		bcs $8b08			bcs 	_TKStandardPunctuation
.8b38	bd 0b 08	lda $080b,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.8b3b	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.8b3d	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.8b3e	7d 0c 08	adc $080c,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.8b41	38		sec				sec
.8b42	e9 3c		sbc #$3c			sbc 	#'<'
.8b44	20 b3 8c	jsr $8cb3			jsr 	TokeniseWriteByte 			; this is in the range 0-7
.8b47	e8		inx				inx 								; consume both
.8b48	e8		inx				inx
.8b49	80 96		bra $8ae1			bra 	_TKTokeniseLoop
.8b4b	a9 80		lda #$80	_TKExit:lda 	#KWC_EOL 					; write end of line byte
.8b4d	20 b3 8c	jsr $8cb3			jsr 	TokeniseWriteByte
.8b50	60		rts				rts
.8b51					_TKTokeniseIdentifier:
.8b51	8e 00 07	stx $0700			stx 	identStart 					; save start
.8b54	9c 04 07	stz $0704			stz 	identTypeByte 				; zero the type byte
.8b57					_TKCheckLoop:
.8b57	e8		inx				inx 								; look at next, we know first is identifier.
.8b58	bd 0b 08	lda $080b,x			lda  	lineBuffer,x
.8b5b	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.8b5d	f0 f8		beq $8b57			beq 	_TKCheckLoop
.8b5f	c9 30		cmp #$30			cmp	 	#"0"
.8b61	90 0c		bcc $8b6f			bcc 	_TKEndIdentifier
.8b63	c9 3a		cmp #$3a			cmp 	#"9"+1
.8b65	90 f0		bcc $8b57			bcc 	_TKCheckLoop
.8b67	c9 41		cmp #$41			cmp	 	#"A"
.8b69	90 04		bcc $8b6f			bcc 	_TKEndIdentifier
.8b6b	c9 5b		cmp #$5b			cmp 	#"Z"+1
.8b6d	90 e8		bcc $8b57			bcc 	_TKCheckLoop
.8b6f					_TKEndIdentifier:
.8b6f	8e 01 07	stx $0701			stx 	identTypeStart 				; save start of type text (if any !)
.8b72	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.8b74	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.8b76	f0 06		beq $8b7e			beq 	_TKHasTypeCharacter
.8b78	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.8b7a	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.8b7c	d0 07		bne $8b85			bne 	_TKNoTypeCharacter
.8b7e					_TKHasTypeCharacter:
.8b7e	8c 04 07	sty $0704			sty 	identTypeByte 				; has # or $, save the type
.8b81	e8		inx				inx 								; read next
.8b82	bd 0b 08	lda $080b,x			lda 	lineBuffer,x
.8b85					_TKNoTypeCharacter:
.8b85	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.8b87	d0 09		bne $8b92			bne 	_TKNoArray
.8b89	e8		inx				inx 								; skip the (
.8b8a	ad 04 07	lda $0704			lda 	identTypeByte 				; set bit 2 (e.g. array)
.8b8d	09 04		ora #$04			ora 	#$04
.8b8f	8d 04 07	sta $0704			sta 	identTypeByte
.8b92					_TKNoArray:
.8b92	8e 02 07	stx $0702			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.8b95	20 2f 8c	jsr $8c2f			jsr 	TokeniseCalculateHash 		; calculate the has for those tokens
.8b98	a0 89		ldy #$89			ldy 	#(KeywordSet0) >> 8
.8b9a	a9 67		lda #$67			lda 	#(KeywordSet0) & $FF
.8b9c	20 0e 89	jsr $890e			jsr 	TokeniseSearchTable
.8b9f	a2 00		ldx #$00			ldx 	#0
.8ba1	b0 1f		bcs $8bc2			bcs 	_TKFoundToken
.8ba3	a0 8a		ldy #$8a			ldy 	#(KeywordSet1) >> 8
.8ba5	a9 7b		lda #$7b			lda 	#(KeywordSet1) & $FF
.8ba7	20 0e 89	jsr $890e			jsr 	TokeniseSearchTable
.8baa	a2 81		ldx #$81			ldx 	#$81
.8bac	b0 14		bcs $8bc2			bcs 	_TKFoundToken
.8bae	a0 8a		ldy #$8a			ldy 	#(KeywordSet1) >> 8
.8bb0	a9 7b		lda #$7b			lda 	#(KeywordSet1) & $FF
.8bb2	20 0e 89	jsr $890e			jsr 	TokeniseSearchTable
.8bb5	a2 82		ldx #$82			ldx 	#$82
.8bb7	b0 09		bcs $8bc2			bcs 	_TKFoundToken
.8bb9	20 bf 8c	jsr $8cbf			jsr 	CheckCreateVariableRecord 	; failed all, it's a variable, create record if does not exist.
.8bbc	ae 02 07	ldx $0702			ldx 	identTypeEnd 				; X points to following byte
.8bbf	4c e1 8a	jmp $8ae1			jmp 	_TKTokeniseLoop 			; and go round again.
.8bc2					_TKFoundToken:
.8bc2	48		pha				pha 								; save token
.8bc3	8a		txa				txa 								; shift in X, is there one ?
.8bc4	f0 03		beq $8bc9			beq 	_TKNoTShift
.8bc6	20 b3 8c	jsr $8cb3			jsr 	TokeniseWriteByte 			; if so, write it out
.8bc9					_TKNoTShift:
.8bc9	68		pla				pla 								; restore and write token
.8bca	20 b3 8c	jsr $8cb3			jsr 	TokeniseWriteByte
.8bcd	ae 02 07	ldx $0702			ldx 	identTypeEnd 				; X points to following byte
.8bd0	4c e1 8a	jmp $8ae1			jmp 	_TKTokeniseLoop 			; and go round again.
.8bd3					TokeniseString:
.8bd3	a9 ff		lda #$ff			lda 	#KWC_STRING 				; string token.
.8bd5	20 b3 8c	jsr $8cb3			jsr 	TokeniseWriteByte
.8bd8	e8		inx				inx									; start of quoted string.
.8bd9	da		phx				phx 								; push start of string on top
.8bda	ca		dex				dex
.8bdb					_TSFindEnd:
.8bdb	e8		inx				inx
.8bdc	bd 0b 08	lda $080b,x			lda 	lineBuffer,x 				; next character
.8bdf	f0 04		beq $8be5			beq 	_TSEndOfString
.8be1	c9 22		cmp #$22			cmp 	#'"'
.8be3	d0 f6		bne $8bdb			bne 	_TSFindEnd
.8be5					_TSEndOfString:
.8be5	7a		ply				ply  								; so now Y is first character, X is character after end.
.8be6	48		pha				pha 								; save terminating character
.8be7	20 ef 8b	jsr $8bef			jsr 	TOWriteBlockXY 				; write X to Y as a data block
.8bea	68		pla				pla 								; terminating character
.8beb	f0 01		beq $8bee			beq 	_TSNotQuote					; if it wasn't EOS skip it
.8bed	e8		inx				inx
.8bee					_TSNotQuote:
.8bee	60		rts				rts
.8bef					TOWriteBlockXY:
.8bef	86 36		stx $36				stx 	zTemp0 						; write end character
.8bf1	98		tya				tya
.8bf2	49 ff		eor #$ff			eor 	#$FF
.8bf4	38		sec				sec
.8bf5	65 36		adc $36				adc 	zTemp0
.8bf7	1a		inc a				inc 	a 							; one extra for NULL
.8bf8	20 b3 8c	jsr $8cb3			jsr 	TokeniseWriteByte
.8bfb					_TOBlockLoop:
.8bfb	c4 36		cpy $36				cpy 	zTemp0
.8bfd	f0 09		beq $8c08			beq 	_TOBlockExit
.8bff	b9 0b 08	lda $080b,y			lda 	lineBuffer,y
.8c02	20 b3 8c	jsr $8cb3			jsr 	TokeniseWriteByte
.8c05	c8		iny				iny
.8c06	80 f3		bra $8bfb			bra 	_TOBlockLoop
.8c08					_TOBlockExit:
.8c08	a9 00		lda #$00			lda 	#0
.8c0a	20 b3 8c	jsr $8cb3			jsr 	TokeniseWriteByte
.8c0d	60		rts				rts
.8c0e					TokeniseHexConstant:
.8c0e	a9 fe		lda #$fe			lda 	#KWC_HEXCONST 				; hex constant token.
.8c10	20 b3 8c	jsr $8cb3			jsr 	TokeniseWriteByte
.8c13	e8		inx				inx									; start of quoted string.
.8c14	da		phx				phx 								; push start of constant on top
.8c15	ca		dex				dex
.8c16					_THFindLoop:
.8c16	e8		inx				inx
.8c17	bd 0b 08	lda $080b,x			lda 	lineBuffer,x
.8c1a	c9 30		cmp #$30			cmp 	#"0"
.8c1c	90 0c		bcc $8c2a			bcc 	_THFoundEnd
.8c1e	c9 3a		cmp #$3a			cmp 	#"9"+1
.8c20	90 f4		bcc $8c16			bcc 	_THFindLoop
.8c22	c9 41		cmp #$41			cmp 	#"A"
.8c24	90 04		bcc $8c2a			bcc 	_THFoundEnd
.8c26	c9 47		cmp #$47			cmp 	#"F"+1
.8c28	90 ec		bcc $8c16			bcc 	_THFindLoop
.8c2a					_THFoundEnd:
.8c2a	7a		ply				ply 								; restore start
.8c2b	20 ef 8b	jsr $8bef			jsr 	TOWriteBlockXY 				; output the block
.8c2e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./tokeniser/utility.asm

.8c2f					TokeniseCalculateHash:
.8c2f	da		phx				phx
.8c30	ae 00 07	ldx $0700			ldx 	identStart 					; needs to be same as in tokens.py - simple sum
.8c33	a9 00		lda #$00			lda 	#0
.8c35					_TCHLoop:
.8c35	18		clc				clc
.8c36	7d 0b 08	adc $080b,x			adc 	lineBuffer,x
.8c39	e8		inx				inx
.8c3a	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.8c3d	d0 f6		bne $8c35			bne 	_TCHLoop
.8c3f	8d 03 07	sta $0703			sta 	identHash 					; save the hash
.8c42	fa		plx				plx
.8c43	60		rts				rts
.8c44					FixLineBufferCase:
.8c44	a2 00		ldx #$00			ldx 	#0
.8c46					_FLBCLoop:
.8c46	bd 0b 08	lda $080b,x			lda 	lineBuffer,x 				; get next character
.8c49	f0 22		beq $8c6d			beq 	_FLBCExit 					; end of string.
.8c4b	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.8c4d	f0 11		beq $8c60			beq 	_FLBCInQuotes
.8c4f	e8		inx				inx
.8c50	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.8c52	90 f2		bcc $8c46			bcc 	_FLBCLoop
.8c54	c9 7b		cmp #$7b			cmp 	#'z'+1
.8c56	b0 ee		bcs $8c46			bcs 	_FLBCLoop
.8c58	38		sec				sec 								; make U/C
.8c59	e9 20		sbc #$20			sbc 	#32
.8c5b	9d 0a 08	sta $080a,x			sta	 	lineBuffer-1,x 				; write back
.8c5e	80 e6		bra $8c46			bra 	_FLBCLoop
.8c60					_FLBCInQuotes:
.8c60	e8		inx				inx 								; advance
.8c61	bd 0b 08	lda $080b,x			lda 	lineBuffer,x 				; get next
.8c64	f0 07		beq $8c6d			beq 	_FLBCExit 					; exit on EOS
.8c66	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.8c68	d0 f6		bne $8c60			bne 	_FLBCInQuotes
.8c6a	e8		inx				inx 								; skip over it
.8c6b	80 d9		bra $8c46			bra 	_FLBCLoop
.8c6d					_FLBCExit:
.8c6d	60		rts				rts
.8c6e					TokeniseExtractLineNumber:
.8c6e	ad 0d 07	lda $070d			lda 	tokenLineNumber+1 			; push current value on stack
.8c71	48		pha				pha
.8c72	ad 0c 07	lda $070c			lda 	tokenLineNumber
.8c75	48		pha				pha
.8c76	20 ac 8c	jsr $8cac			jsr 	_TELNTimes2 				; line # x 4
.8c79	20 ac 8c	jsr $8cac			jsr 	_TELNTimes2 				; line # x 2
.8c7c	18		clc				clc 								; add stacked value
.8c7d	68		pla				pla
.8c7e	6d 0c 07	adc $070c			adc 	tokenLineNumber
.8c81	8d 0c 07	sta $070c			sta 	tokenLineNumber
.8c84	68		pla				pla
.8c85	6d 0d 07	adc $070d			adc 	tokenLineNumber+1
.8c88	8d 0d 07	sta $070d			sta 	tokenLineNumber+1 			; line # x 5
.8c8b	20 ac 8c	jsr $8cac			jsr 	_TELNTimes2 				; line # x 10
.8c8e	bd 0b 08	lda $080b,x			lda 	lineBuffer,x 				; get and consume character
.8c91	e8		inx				inx
.8c92	29 0f		and #$0f			and 	#15 						; add to line #
.8c94	18		clc				clc
.8c95	6d 0c 07	adc $070c			adc 	tokenLineNumber
.8c98	8d 0c 07	sta $070c			sta 	tokenLineNumber
.8c9b	90 03		bcc $8ca0			bcc 	_TLENNoCarry
.8c9d	ee 0d 07	inc $070d			inc 	tokenLineNumber+1
.8ca0					_TLENNoCarry:
.8ca0	bd 0b 08	lda $080b,x			lda 	lineBuffer,x 				; more digits ?
.8ca3	c9 30		cmp #$30			cmp 	#'0'
.8ca5	90 04		bcc $8cab			bcc 	_TLENExit
.8ca7	c9 3a		cmp #$3a			cmp 	#'9'+1
.8ca9	90 c3		bcc $8c6e			bcc 	TokeniseExtractLineNumber
.8cab					_TLENExit:
.8cab	60		rts				rts
.8cac					_TELNTimes2:
.8cac	0e 0c 07	asl $070c			asl 	tokenLineNumber
.8caf	2e 0d 07	rol $070d			rol 	tokenLineNumber+1
.8cb2	60		rts				rts
.8cb3					TokeniseWriteByte:
.8cb3	da		phx				phx
.8cb4	ae 0b 07	ldx $070b			ldx 	tokenOffset 				; next slot to write to
.8cb7	9d 0b 07	sta $070b,x			sta 	tokenOffset,x 				; write byte out
.8cba	ee 0b 07	inc $070b			inc 	tokenOffset 				; advance slot.
.8cbd	fa		plx				plx
.8cbe	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./tokeniser/variablerecord.asm

.8cbf					CheckCreateVariableRecord:
.8cbf	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.8cc1	85 36		sta $36				sta 	0+zTemp0
.8cc3	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.8cc5	85 37		sta $37				sta 	1+zTemp0
.8cc7	20 d5 88	jsr $88d5			jsr 	VariableOpen 				; make variable space available
.8cca					_CCVSearch:
.8cca	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.8ccc	f0 2c		beq $8cfa			beq 	_CCVFail
.8cce	a0 01		ldy #$01			ldy 	#1 							; read the hash
.8cd0	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.8cd2	cd 03 07	cmp $0703			cmp 	identHash
.8cd5	d0 16		bne $8ced			bne 	_CCVNext
.8cd7	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.8cd9	ae 00 07	ldx $0700			ldx 	identStart
.8cdc					_CCVCompare:
.8cdc	bd 0b 08	lda $080b,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.8cdf	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.8ce1	e8		inx				inx 								; advance pointers
.8ce2	c8		iny				iny
.8ce3	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.8ce4	d0 07		bne $8ced			bne 	_CCVNext  					; didn't match go to next.
.8ce6	90 f4		bcc $8cdc			bcc 	_CCVCompare 				; not finished yet.
.8ce8	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; matched whole thing ?
.8ceb	f0 41		beq $8d2e			beq 	_CCVFound 					; yes, we were successful
.8ced					_CCVNext:
.8ced	18		clc				clc
.8cee	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.8cf0	65 36		adc $36				adc 	zTemp0
.8cf2	85 36		sta $36				sta 	zTemp0
.8cf4	90 d4		bcc $8cca			bcc 	_CCVSearch
.8cf6	e6 37		inc $37				inc 	zTemp0+1
.8cf8	80 d0		bra $8cca			bra 	_CCVSearch
.8cfa					_CCVFail:
.8cfa	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.8cfc	ad 03 07	lda $0703			lda 	identHash
.8cff	91 36		sta ($36),y			sta 	(zTemp0),y
.8d01	c8		iny				iny 								; offset 2 is the type byte
.8d02	ad 04 07	lda $0704			lda 	identTypeByte
.8d05	91 36		sta ($36),y			sta 	(zTemp0),y
.8d07	c8		iny				iny
.8d08					_CCVData:
.8d08	a9 00		lda #$00			lda 	#0 							; erase data 3-7
.8d0a	91 36		sta ($36),y			sta 	(zTemp0),y
.8d0c	c8		iny				iny
.8d0d	c0 08		cpy #$08			cpy 	#8
.8d0f	90 f7		bcc $8d08			bcc 	_CCVData
.8d11	ae 00 07	ldx $0700			ldx 	identStart 					; copy name into 8 on.
.8d14					_CCVCopyName:
.8d14	bd 0b 08	lda $080b,x			lda 	lineBuffer,x
.8d17	91 36		sta ($36),y			sta 	(zTemp0),y
.8d19	e8		inx				inx
.8d1a	c8		iny				iny
.8d1b	ec 02 07	cpx $0702			cpx 	identTypeEnd
.8d1e	d0 f4		bne $8d14			bne 	_CCVCopyName
.8d20	98		tya				tya 								; patch offset
.8d21	92 36		sta ($36)			sta 	(zTemp0)
.8d23	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.8d25	91 36		sta ($36),y			sta 	(zTemp0),y
.8d27	88		dey				dey
.8d28	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.8d2a	09 80		ora #$80			ora 	#$80
.8d2c	91 36		sta ($36),y			sta 	(zTemp0),y
.8d2e					_CCVFound:
.8d2e	20 d6 88	jsr $88d6			jsr 	VariableClose 				; map out variables, perhaps.
.8d31	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.8d33	38		sec				sec
.8d34	e9 10		sbc #$10			sbc 	#(VariableSpace >> 8) 		; offset from the start
.8d36	09 40		ora #$40			ora 	#$40 						; make it a writeable token
.8d38	20 b3 8c	jsr $8cb3			jsr 	TokeniseWriteByte
.8d3b	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.8d3d	20 b3 8c	jsr $8cb3			jsr 	TokeniseWriteByte
.8d40	60		rts				rts

;******  Return to file: _basic.asm


;******  End of listing
