
; 64tass Turbo Assembler Macro V1.56.2625 listing file
; 64tass -D AUTORUN=1 -q -b -Wall -c -L output/basic.lst -l output/basic.lbl -Wall -o basic.rom _basic.asm
; Sat Oct 29 19:01:14 2022

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=1					AUTORUN=1

;******  Processing input file: _basic.asm


;******  Processing file: ./common/aa.system/01common.inc

=$30					ZeroPageMandatory = $30
=$400					ZeroPagePreference = $400
=$480					MemoryStorage = $480
=$2000					BasicStart = $2000
=$8000					BasicEnd = $8000
=$8000					CodeStart = $8000
=$1000					VariableSpace = $1000
=$2000					EndVariableSpace = $2000
=8					MathStackSize = 8
=512					BasicStackSize = 512
=3584					BasicStackBase = $1000-BasicStackSize
=80					MaxLineSize = 80

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/04data.inc

.0030					codePtr:
>0030							.fill 	4
.0034					basicStack:
>0034							.fill 	2
.0036					zTemp0:
>0036							.fill 	2
.0038					zTemp1:
>0038							.fill 	2
.003a					zTemp2:
>003a							.fill 	2
.003c					zsTemp:
>003c							.fill 	2
.003e					zaTemp:
>003e							.fill 	2
=$30					safePtr = codePtr 							; minimise direct tinkering
=$80					NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20					NSBIsReference = $20 						; bit 5 : is a reference
=$10					NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18					NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03					NSBRefMask = $03 							; bits 0,1 : Bytes of reference, -1 (e.g. 00 = 1 byte, 11 = 4 bytes)
=$04					NSBIsArray = $04
=$00					NSTInteger = $00 							; base types for bits 3..4
=$08					NSTFloat = $08
=$10					NSTString = $10
=$18					NSTProcedure = $18
.0400					NSStatus:
>0400							.fill 	MathStackSize
.0408					NSMantissa0:
>0408							.fill 	MathStackSize 				; (this is my integer mantissa system)
.0410					NSMantissa1:
>0410							.fill 	MathStackSize
.0418					NSMantissa2:
>0418							.fill 	MathStackSize
.0420					NSMantissa3:
>0420							.fill 	MathStackSize
.0428					NSExponent:
>0428							.fill 	MathStackSize
.0480					identStart:
>0480							.fill 	1
.0481					identTypeStart:
>0481							.fill 	1
.0482					identTypeEnd:
>0482							.fill 	1
.0483					identHash:
>0483							.fill 	1
.0484					identTypeByte:
>0484							.fill 	1	 						; (see tokenising.pdf)
.0485					encodeState:
>0485							.fill 	1
.0486					digitTemp:
>0486							.fill 	1
.0487					decimalCount:
>0487							.fill 	1
.0488					randomSeed:
>0488							.fill 	4
.048c					lowMemPtr:
>048c							.fill 	2
.048e					stringMemory:
>048e							.fill 	2
.0490					stringInitialised:
>0490							.fill 	1
.0491					stringTempPointer:
>0491							.fill 	2
.0493					breakCheck:
>0493							.fill 	1
.0494					decimalPlaces:
>0494							.fill 	1
.0495					dbOffset:
>0495							.fill 	1
.0496					lastParameter:
>0496							.fill 	1
.0497					dataPointer:
>0497							.fill 	5
.049c					inDataStatement:
>049c							.fill 	1
.049d					tbOffset:
>049d							.fill 	1
.049e					AssemblerAddress:
>049e							.fill 	2
.04a0					AssemblerControl:
>04a0							.fill 	1
.04a1					ParamStart:
>04a1							.fill 	2
.04a3					IsGroup1:
>04a3							.fill 	1
.04a4					BaseOpcode:
>04a4							.fill 	1
.04a5					ModeMask:
>04a5							.fill 	1
.04a6					listIndent:
>04a6							.fill 	1
.04a7					tokenOffset:
>04a7							.fill 	1
.04a8					tokenLineNumber:
>04a8							.fill 	2
.04aa					tokenBuffer:
>04aa							.fill 	253
.05a7					lineBuffer:
>05a7							.fill 	MaxLineSize+1
.05f8					numberBuffer:
>05f8							.fill 	34
.061a					decimalBuffer:
>061a							.fill 	16

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/constants.inc

=$80					AM_ISZP = $80
=$40					AM_ISG1 = $40
=$20					AM_ISG2 = $20
=224					AM_IMMEDIATE = AM_ISZP+AM_ISG1+AM_ISG2+$00
=228					AM_ZEROPAGE = AM_ISZP+AM_ISG1+AM_ISG2+$04
=40					AM_ACC = AM_ISG2+$08
=108					AM_ABS = AM_ISG1+AM_ISG2+$0C
=208					AM_INDY = AM_ISZP+AM_ISG1+$10
=244					AM_ZEROX = AM_ISZP+AM_ISG1+AM_ISG2+$14
=120					AM_ABSY = AM_ISG1+AM_ISG2+$18
=124					AM_ABSX = AM_ISG1+AM_ISG2+$1C
=209					AM_IND = AM_ISZP+AM_ISG1+$11
=$80					AM_ZEROY = AM_ISZP
=$01					AM_INDABS = $01
=$02					AM_INDABSX = $02
=192					AM_INDX = AM_ISZP+AM_ISG1+$00

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/handlers.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.inc

=1					ERRID_BREAK = 1
=2					ERRID_SYNTAX = 2
=3					ERRID_DIVZERO = 3
=4					ERRID_RANGE = 4
=5					ERRID_TYPE = 5
=6					ERRID_MEMORY = 6
=7					ERRID_ARGUMENT = 7
=8					ERRID_STOP = 8
=9					ERRID_STRING = 9
=10					ERRID_ASSERT = 10
=11					ERRID_DATA = 11
=12					ERRID_NOTDONE = 12
=13					ERRID_LINE = 13
=14					ERRID_GOSUB = 14
=15					ERRID_REPEAT = 15
=16					ERRID_WHILE = 16
=17					ERRID_FOR = 17
=18					ERRID_STACK = 18
=19					ERRID_STRUCT = 19
=20					ERRID_PROC = 20
=21					ERRID_REDEFINE = 21
=22					ERRID_ARRAYSIZE = 22
=23					ERRID_ARRAYIDX = 23

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst.inc

=$00					KWD_LESSLESS                         = $00; $00 <<
=$01					KWD_LESSEQUAL                        = $01; $01 <=
=$02					KWD_LESSGREATER                      = $02; $02 <>
=$03					KWD_PLINGPLING3                      = $03; $03 !!3
=$04					KWD_GREATERLESS                      = $04; $04 ><
=$05					KWD_GREATEREQUAL                     = $05; $05 >=
=$06					KWD_GREATERGREATER                   = $06; $06 >>
=$07					KWD_PLINGPLING7                      = $07; $07 !!7
=$08					KWD_PLINGPLING8                      = $08; $08 !!8
=$09					KWD_PLINGPLING9                      = $09; $09 !!9
=$0a					KWD_PLINGPLING10                     = $0a; $0a !!10
=$0b					KWD_PLINGPLING11                     = $0b; $0b !!11
=$0c					KWD_PLINGPLING12                     = $0c; $0c !!12
=$0d					KWD_PLINGPLING13                     = $0d; $0d !!13
=$0e					KWD_PLINGPLING14                     = $0e; $0e !!14
=$0f					KWD_PLINGPLING15                     = $0f; $0f !!15
=$10					KWD_AT                               = $10; $10 @
=$11					KWD_PLINGPLING17                     = $11; $11 !!17
=$12					KWD_PLINGPLING18                     = $12; $12 !!18
=$13					KWD_LSQPAREN                         = $13; $13 [
=$14					KWD_BACKSLASH                        = $14; $14 \
=$15					KWD_RSQPAREN                         = $15; $15 ]
=$16					KWD_HAT                              = $16; $16 ^
=$17					KWD_UNDERSCORE                       = $17; $17 _
=$18					KWD_BQUOTE                           = $18; $18 `
=$19					KWD_PLINGPLING25                     = $19; $19 !!25
=$1a					KWD_PLINGPLING26                     = $1a; $1a !!26
=$1b					KWD_LCURLY                           = $1b; $1b {
=$1c					KWD_BAR                              = $1c; $1c |
=$1d					KWD_RCURLY                           = $1d; $1d }
=$1e					KWD_TILDE                            = $1e; $1e ~
=$21					KWD_PLING                            = $21; $21 !
=$22					KWD_DQUOTE                           = $22; $22 "
=$23					KWD_HASH                             = $23; $23 #
=$24					KWD_DOLLAR                           = $24; $24 $
=$25					KWD_PERCENT                          = $25; $25 %
=$26					KWD_AMPERSAND                        = $26; $26 &
=$27					KWD_QUOTE                            = $27; $27 '
=$28					KWD_LPAREN                           = $28; $28 (
=$29					KWD_RPAREN                           = $29; $29 )
=$2a					KWD_STAR                             = $2a; $2a *
=$2b					KWD_PLUS                             = $2b; $2b +
=$2c					KWD_COMMA                            = $2c; $2c ,
=$2d					KWD_MINUS                            = $2d; $2d -
=$2e					KWD_PERIOD                           = $2e; $2e .
=$2f					KWD_SLASH                            = $2f; $2f /
=$30					KWD_0                                = $30; $30 0
=$31					KWD_1                                = $31; $31 1
=$32					KWD_2                                = $32; $32 2
=$33					KWD_3                                = $33; $33 3
=$34					KWD_4                                = $34; $34 4
=$35					KWD_5                                = $35; $35 5
=$36					KWD_6                                = $36; $36 6
=$37					KWD_7                                = $37; $37 7
=$38					KWD_8                                = $38; $38 8
=$39					KWD_9                                = $39; $39 9
=$3a					KWD_COLON                            = $3a; $3a :
=$3b					KWD_SEMICOLON                        = $3b; $3b ;
=$3c					KWD_LESS                             = $3c; $3c <
=$3d					KWD_EQUAL                            = $3d; $3d =
=$3e					KWD_GREATER                          = $3e; $3e >
=$3f					KWD_QMARK                            = $3f; $3f ?
=$83					KWD_ABSLPAREN                        = $83; $83 ABS(
=$84					KWD_ALLOCLPAREN                      = $84; $84 ALLOC(
=$85					KWD_ASCLPAREN                        = $85; $85 ASC(
=$86					KWD_CHRDOLLARLPAREN                  = $86; $86 CHR$(
=$87					KWD_EVENTLPAREN                      = $87; $87 EVENT(
=$88					KWD_FALSE                            = $88; $88 FALSE
=$89					KWD_FRACLPAREN                       = $89; $89 FRAC(
=$8a					KWD_HITLPAREN                        = $8a; $8a HIT(
=$8b					KWD_INTLPAREN                        = $8b; $8b INT(
=$8c					KWD_ISVALLPAREN                      = $8c; $8c ISVAL(
=$8d					KWD_JOYBLPAREN                       = $8d; $8d JOYB(
=$8e					KWD_JOYXLPAREN                       = $8e; $8e JOYX(
=$8f					KWD_JOYYLPAREN                       = $8f; $8f JOYY(
=$90					KWD_LEFTDOLLARLPAREN                 = $90; $90 LEFT$(
=$91					KWD_LENLPAREN                        = $91; $91 LEN(
=$92					KWD_MAXLPAREN                        = $92; $92 MAX(
=$93					KWD_MIDDOLLARLPAREN                  = $93; $93 MID$(
=$94					KWD_MINLPAREN                        = $94; $94 MIN(
=$95					KWD_NOTLPAREN                        = $95; $95 NOT(
=$96					KWD_RANDOMLPAREN                     = $96; $96 RANDOM(
=$97					KWD_RIGHTDOLLARLPAREN                = $97; $97 RIGHT$(
=$98					KWD_RNDLPAREN                        = $98; $98 RND(
=$99					KWD_SGNLPAREN                        = $99; $99 SGN(
=$9a					KWD_SPCLPAREN                        = $9a; $9a SPC(
=$9b					KWD_STRDOLLARLPAREN                  = $9b; $9b STR$(
=$9c					KWD_TIMERLPAREN                      = $9c; $9c TIMER(
=$9d					KWD_TRUE                             = $9d; $9d TRUE
=$9e					KWD_VALLPAREN                        = $9e; $9e VAL(
=$9f					KWD_FOR                              = $9f; $9f FOR
=$a0					KWD_IF                               = $a0; $a0 IF
=$a1					KWD_PROC                             = $a1; $a1 PROC
=$a2					KWD_REPEAT                           = $a2; $a2 REPEAT
=$a3					KWD_WHILE                            = $a3; $a3 WHILE
=$a4					KWD_ENDIF                            = $a4; $a4 ENDIF
=$a5					KWD_ENDPROC                          = $a5; $a5 ENDPROC
=$a6					KWD_NEXT                             = $a6; $a6 NEXT
=$a7					KWD_THEN                             = $a7; $a7 THEN
=$a8					KWD_UNTIL                            = $a8; $a8 UNTIL
=$a9					KWD_WEND                             = $a9; $a9 WEND
=$aa					KWD_BY                               = $aa; $aa BY
=$ab					KWD_CALL                             = $ab; $ab CALL
=$ac					KWD_CIRCLE                           = $ac; $ac CIRCLE
=$ad					KWD_CLEAR                            = $ad; $ad CLEAR
=$ae					KWD_CLS                              = $ae; $ae CLS
=$af					KWD_COLOR                            = $af; $af COLOR
=$b0					KWD_COLOUR                           = $b0; $b0 COLOUR
=$b1					KWD_DATA                             = $b1; $b1 DATA
=$b2					KWD_DIM                              = $b2; $b2 DIM
=$b3					KWD_DOWNTO                           = $b3; $b3 DOWNTO
=$b4					KWD_ELSE                             = $b4; $b4 ELSE
=$b5					KWD_FROM                             = $b5; $b5 FROM
=$b6					KWD_GFX                              = $b6; $b6 GFX
=$b7					KWD_GOSUB                            = $b7; $b7 GOSUB
=$b8					KWD_GOTO                             = $b8; $b8 GOTO
=$b9					KWD_HERE                             = $b9; $b9 HERE
=$ba					KWD_IMAGE                            = $ba; $ba IMAGE
=$bb					KWD_LET                              = $bb; $bb LET
=$bc					KWD_LINE                             = $bc; $bc LINE
=$bd					KWD_LOCAL                            = $bd; $bd LOCAL
=$be					KWD_OFF                              = $be; $be OFF
=$bf					KWD_ON                               = $bf; $bf ON
=$c0					KWD_OUTLINE                          = $c0; $c0 OUTLINE
=$c1					KWD_PALETTE                          = $c1; $c1 PALETTE
=$c2					KWD_PLOT                             = $c2; $c2 PLOT
=$c3					KWD_PRINT                            = $c3; $c3 PRINT
=$c4					KWD_READ                             = $c4; $c4 READ
=$c5					KWD_RECT                             = $c5; $c5 RECT
=$c6					KWD_REM                              = $c6; $c6 REM
=$c7					KWD_RETURN                           = $c7; $c7 RETURN
=$c8					KWD_SOLID                            = $c8; $c8 SOLID
=$c9					KWD_SPRITE                           = $c9; $c9 SPRITE
=$ca					KWD_TEXT                             = $ca; $ca TEXT
=$cb					KWD_TO                               = $cb; $cb TO

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst0.inc

=$80					KWC_EOL = $80
=$ff					KWC_STRING = $FF
=$fe					KWC_HEXCONST = $FE
=$9f					KWC_FIRST_STRUCTURE = $9f
=$a4					KWC_FIRST_STRUCTURE_DEC = $a4
=$a9					KWC_LAST_STRUCTURE = $a9
=$83					KWC_FIRST_UNARY = $83
=$9e					KWC_LAST_UNARY = $9e

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/stack.inc

=$e0					STK_GOSUB = $E0
=$d0					STK_FOR = $D0
=$c0					STK_REPEAT = $C0
=$b0					STK_PROC = $B0
=$a0					STK_WHILE = $A0
=$01					STK_LOCALN = $01
=$02					STK_LOCALS = $02

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/00start.asm

.8000	a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.8002	9a		txs				txs
.8003	20 fd b5	jsr $b5fd			jsr 	EXTInitialise 				; hardware initialise
.8006	a9 00		lda #$00			lda 	#0 							; graphics system initialise.
.8008	8a		txa				txa
.8009	a8		tay				tay
.800a	20 87 80	jsr $8087			jsr 	GXGraphicDraw
.800d	a2 80		ldx #$80			ldx 	#(Prompt >> 8) 				; prompt
.800f	a9 1d		lda #$1d			lda 	#(Prompt & $FF)
.8011	20 44 9a	jsr $9a44			jsr 	PrintStringXA
.8014	20 65 93	jsr $9365			jsr 	NewCommand 					; erase current program
.8017	20 4c a7	jsr $a74c			jsr 	BackloadProgram
.801a	4c e0 94	jmp $94e0			jmp 	CommandRun
>801d	0d 0d 2a 2a 2a 20 46 32		Prompt:	.text 	13,13,"*** F256 Junior SuperBASIC ***",13,13
>8025	35 36 20 4a 75 6e 69 6f 72 20 53 75 70 65 72 42
>8035	41 53 49 43 20 2a 2a 2a 0d 0d
>803f	57 72 69 74 74 65 6e 20				.text 	"Written by Paul Robson 2022.",13,13
>8047	62 79 20 50 61 75 6c 20 52 6f 62 73 6f 6e 20 32
>8057	30 32 32 2e 0d 0d

;******  Processing file: ./common/aa.system/../generated/timestamp.asm

>805d	42 75 69 6c 74 20 53 61			.text "Built Saturday 29-Oct-2022. Build 2396."
>8065	74 75 72 64 61 79 20 32 39 2d 4f 63 74 2d 32 30
>8075	32 32 2e 20 42 75 69 6c 64 20 32 33 39 36 2e

;******  Return to file: ./common/aa.system/00start.asm

>8084	0d 0d 00					.byte 	13,13,0

;******  Processing file: ./common/aa.system/../../../graphics/_graphics.asm

=1					graphicsIntegrated = 1

;******  Processing file: ./common/aa.system/../../../graphics/./aa.main/aa.data.asm

=3					GXMappingPage = 3
=24576					GXMappingAddress = ($2000 * GXMappingPage)
=0					GXMappingLUT = 0
=11					GXEditSlot = 8 + GXMappingPage
=$36					gxzTemp0 = zTemp0
=$38					gxzTemp1 = zTemp1
=$3a					gxzTemp2 = zTemp2
=$3c					gxzScreen = zsTemp
=$5f8					gxPixelBuffer = numberBuffer
.062a					gxCurrentX:
>062a							.fill 	2
.062c					gxCurrentY:
>062c							.fill 	2
.062e					gxLastX:
>062e							.fill 	2
.0630					gxLastY:
>0630							.fill 	2
.0632					gxX0:
>0632							.fill 	2
.0634					gxY0:
>0634							.fill 	2
.0636					gxX1:
>0636							.fill 	2
.0638					gxY1:
>0638							.fill 	2
.063a					gxSpritesOn:
>063a							.fill 	1
.063b					gxBitmapsOn:
>063b							.fill 	1
.063c					gxBasePage:
>063c							.fill 	1
.063d					gxSpritePage:
>063d							.fill 	1
.063e					gxHeight:
>063e							.fill 	1
.063f					gxMode:
>063f							.fill 	1
.0640					gxColour:
>0640							.fill 	1
.0641					gxEORValue:
>0641							.fill 	1
.0642					gxANDValue:
>0642							.fill 	1
.0643					gxOriginalLUTValue:
>0643							.fill 	1
.0644					gxOriginalMMUSetting:
>0644							.fill 	1
.0645					gsOffset:
>0645							.fill 	1
.0646					GSCurrentSprite:
>0646							.fill 	2
.0648					GXSpriteOffsetBase:
>0648							.fill 	2

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./aa.main/main.asm

.8087					GXGraphicDraw:
.8087	c9 20		cmp #$20			cmp 	#$10*2 						; instructions 00-0F don't use
.8089	b0 06		bcs $8091			bcs 	_GDCoordinate
.808b	86 36		stx $36				stx 	gxzTemp0 					; save X/Y
.808d	84 37		sty $37				sty 	gxzTemp0+1
.808f	80 4b		bra $80dc			bra 	_GDExecuteA 				; and execute
.8091					_GDCoordinate:
.8091	48		pha				pha 								; save AXY
.8092	da		phx				phx
.8093	5a		phy				phy
.8094	a2 03		ldx #$03			ldx 	#3 							; copy currentX to lastX
.8096					_GDCopy1:
.8096	bd 2a 06	lda $062a,x			lda 	gxCurrentX,x
.8099	9d 2e 06	sta $062e,x			sta 	gxLastX,x
.809c	ca		dex				dex
.809d	10 f7		bpl $8096			bpl 	_GDCopy1
.809f	68		pla				pla 								; update Y
.80a0	8d 2c 06	sta $062c			sta 	gxCurrentY
.80a3	9c 2d 06	stz $062d			stz 	gxCurrentY+1
.80a6	68		pla				pla
.80a7	8d 2a 06	sta $062a			sta 	gxCurrentX
.80aa	68		pla				pla 								; get A (command+X.1) back
.80ab	48		pha				pha
.80ac	29 01		and #$01			and 	#1 							; put LSB as MSB of Current.X
.80ae	8d 2b 06	sta $062b			sta 	gxCurrentX+1
.80b1	68		pla				pla 								; get command back
.80b2	29 fe		and #$fe			and 	#$FE 						; lose LSB, chuck the stray X bit
.80b4	48		pha				pha 								; push back.
.80b5	c9 32		cmp #$32			cmp 	#25*2 						; move sprite does not clip.
.80b7	f0 17		beq $80d0			beq 	_GDCopyToWorkArea
.80b9	ad 2b 06	lda $062b			lda 	gxCurrentX+1 				; X < 256 X okay
.80bc	f0 07		beq $80c5			beq 	_GDCheckY
.80be	ad 2a 06	lda $062a			lda 	gxCurrentX 					; otherwise X < 320 = 256 + 64
.80c1	c9 40		cmp #$40			cmp 	#64
.80c3	b0 08		bcs $80cd			bcs 	_GDError1
.80c5					_GDCheckY:
.80c5	ad 2c 06	lda $062c			lda 	gxCurrentY 					; check Y < Height.
.80c8	cd 3e 06	cmp $063e			cmp 	gxHeight
.80cb	90 03		bcc $80d0			bcc 	_GDCopyToWorkArea
.80cd					_GDError1:
.80cd	68		pla				pla
.80ce					_GDError2:
.80ce	38		sec				sec
.80cf	60		rts				rts
.80d0					_GDCopyToWorkArea:
.80d0	a2 07		ldx #$07			ldx 	#7 							; copy current and last to gxXY/12 work area
.80d2					_GDCopy2:
.80d2	bd 2a 06	lda $062a,x			lda 	gxCurrentX,x
.80d5	9d 32 06	sta $0632,x			sta 	gxX0,x
.80d8	ca		dex				dex
.80d9	10 f7		bpl $80d2			bpl 	_GDCopy2
.80db	68		pla				pla 								; get command
.80dc					_GDExecuteA:
.80dc	c9 34		cmp #$34			cmp 	#GRFirstFreeCode*2 			; bad ?
.80de	b0 ee		bcs $80ce			bcs 	_GDError2
.80e0	aa		tax				tax
.80e1	7c e7 80	jmp ($80e7,x)			jmp 	(GRVectorTable,x)
.80e4					GXMove:
.80e4	18		clc				clc
.80e5	60		rts				rts
.80e6					GRUndefined:
>80e6	db						.byte 	$DB 						; causes a break in the emulator

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./aa.main/vectors.asm

=26					GRFirstFreeCode = 26
.80e7					GRVectorTable:
>80e7	b6 82					.word	GXInitialise             ; $00 Initialise
>80e9	cd 82					.word	GXControlBitmap          ; $01 BitmapCtl
>80eb	15 83					.word	GXControlSprite          ; $02 SpriteCtl
>80ed	68 82					.word	GXClearBitmap            ; $03 Clear
>80ef	93 84					.word	GXSetColourMode          ; $04 Colour
>80f1	5b 86					.word	GXFontHandler            ; $05 DrawFont
>80f3	a3 86					.word	GXSpriteHandler          ; $06 DrawSprite
>80f5	0f 87					.word	GXSelect                 ; $07 SPRUSE
>80f7	35 87					.word	GXSelectImage            ; $08 SPRIMG
>80f9	e6 80					.word	GRUndefined              ; $09
>80fb	e6 80					.word	GRUndefined              ; $0a
>80fd	e6 80					.word	GRUndefined              ; $0b
>80ff	e6 80					.word	GRUndefined              ; $0c
>8101	e6 80					.word	GRUndefined              ; $0d
>8103	e6 80					.word	GRUndefined              ; $0e
>8105	e6 80					.word	GRUndefined              ; $0f
>8107	e4 80					.word	GXMove                   ; $10 Move
>8109	61 83					.word	GXLine                   ; $11 Line
>810b	dc 84					.word	GXFrameRectangle         ; $12 FrameRect
>810d	d9 84					.word	GXFillRectangle          ; $13 FillRect
>810f	1f 81					.word	GXFrameCircle            ; $14 FrameCircle
>8111	1b 81					.word	GXFillCircle             ; $15 FillCircle
>8113	e6 80					.word	GRUndefined              ; $16
>8115	e6 80					.word	GRUndefined              ; $17
>8117	c1 84					.word	GXPlotPoint              ; $18 Plot
>8119	9f 87					.word	GXMoveSprite             ; $19 SPRMOVE

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/circle.asm

.811b					GXFillCircle:
.811b	a9 ff		lda #$ff			lda 	#255
.811d	80 02		bra $8121			bra 	GXCircle
.811f					GXFrameCircle:
.811f	a9 00		lda #$00			lda 	#0
.8121					GXCircle:
.8121	8d 4d 06	sta $064d			sta 	gxIsFillMode					; save Fill flag
.8124	ad 3b 06	lda $063b			lda 	gxBitmapsOn
.8127	f0 26		beq $814f			beq 	_GXCFail
.8129	20 b1 88	jsr $88b1			jsr 	GXSortXY 					; topleft/bottomright
.812c	20 db 87	jsr $87db			jsr 	GXOpenBitmap 				; start drawing
.812f	20 21 82	jsr $8221			jsr 	GXCircleSetup 				; set up for drawing
.8132	9c 4e 06	stz $064e			stz 	gxYChanged
.8135					_GXCircleDraw:
.8135	ad 4b 06	lda $064b			lda 	gXCentre					; while x <= y
.8138	cd 4c 06	cmp $064c			cmp 	gYCentre
.813b	90 0a		bcc $8147			bcc 	_GXCircleContinue
.813d	d0 03		bne $8142			bne 	_GXNoLast
.813f	20 54 81	jsr $8154			jsr 	GXPlot1
.8142					_GXNoLast:
.8142	20 ec 87	jsr $87ec			jsr 	GXCloseBitmap 				; close the bitmap
.8145	18		clc				clc
.8146	60		rts				rts
.8147					_GXCircleContinue:
.8147	20 51 81	jsr $8151			jsr 	GXPlot2 					; draw it
.814a	20 ce 81	jsr $81ce			jsr 	GXCircleMove 				; adjust the coordinates
.814d	80 e6		bra $8135			bra 	_GXCircleDraw
.814f					_GXCFail:
.814f	38		sec				sec
.8150	60		rts				rts
.8151					GXPlot2:
.8151	20 54 81	jsr $8154			jsr 	GXPlot1 						; plot and swap, fall through does twice
.8154					GXPlot1:
.8154	ad 4c 06	lda $064c			lda 	gYCentre 						; if y = 0, don't do it twice (xor)
.8157	f0 03		beq $815c			beq 	_GXPlot1Only
.8159	20 78 81	jsr $8178			jsr 	GXPlot0 						; plot and negate
.815c					_GXPlot1Only:
.815c	20 78 81	jsr $8178			jsr 	GXPlot0 						; twice, undoing negation
.815f	ad 4b 06	lda $064b			lda 	gXCentre 						; swap X and Y
.8162	ae 4c 06	ldx $064c			ldx	 	gYCentre
.8165	8d 4c 06	sta $064c			sta 	gYCentre
.8168	8e 4b 06	stx $064b			stx 	gXCentre
.816b	ad 4e 06	lda $064e			lda 	gxYChanged 						; toggle Y Changed flag
.816e	a9 ff		lda #$ff			lda 	#$FF
.8170	8d 4e 06	sta $064e			sta 	gxYChanged
.8173	60		rts				rts
.8174	20 78 81	jsr $8178			jsr 	GXPlot0 						; do once
.8177	60		rts				rts
.8178	ad 4d 06	lda $064d	GXPlot0:lda 	gxIsFillMode 					; outline mode, always draw as X or Y will change
.817b	f0 05		beq $8182			beq 	_GXPlot0Always
.817d	ad 4e 06	lda $064e			lda 	gxYChanged						; fill mode, only draw if changed.
.8180	f0 2d		beq $81af			beq 	GXPlot0Exit
.8182					_GXPlot0Always:
.8182	a2 02		ldx #$02			ldx 	#2 								; copy Y1-A => Y0
.8184	ad 4c 06	lda $064c			lda 	gYCentre
.8187	20 b0 81	jsr $81b0			jsr 	GXSubCopy
.818a	a2 00		ldx #$00			ldx 	#0 								; copy X1-A => X0,
.818c	ad 4b 06	lda $064b			lda 	gXCentre
.818f	20 b0 81	jsr $81b0			jsr 	GXSubCopy
.8192	48		pha				pha 									; save last offset X
.8193	20 f9 87	jsr $87f9			jsr 	GXPositionCalc 					; calculate position/offset.
.8196	68		pla				pla
.8197	0a		asl a				asl 	a 								; store 2 x last offset in gxzTemp0
.8198	85 36		sta $36				sta 	gxzTemp0
.819a	64 37		stz $37				stz 	gxzTemp0+1
.819c	26 37		rol $37				rol 	gxzTemp0+1
.819e	ad 4d 06	lda $064d			lda 	gxIsFillMode
.81a1	69 80		adc #$80			adc 	#128
.81a3	20 2c 85	jsr $852c			jsr 	GXDrawLineTemp0 				; routine from Rectangle.
.81a6	38		sec				sec 									; GY = -GY
.81a7	a9 00		lda #$00			lda 	#0
.81a9	ed 4c 06	sbc $064c			sbc 	gYCentre
.81ac	8d 4c 06	sta $064c			sta 	gYCentre
.81af					GXPlot0Exit:
.81af	60		rts				rts
.81b0					GXSubCopy:
.81b0	85 36		sta $36				sta 	gxzTemp0
.81b2	64 37		stz $37				stz 	gxzTemp0+1
.81b4	29 80		and #$80			and 	#$80
.81b6	f0 02		beq $81ba			beq 	_GXNoSx
.81b8	c6 37		dec $37				dec 	gxzTemp0+1
.81ba					_GXNoSx:
.81ba	38		sec				sec
.81bb	bd 36 06	lda $0636,x			lda 	gXX1,x
.81be	e5 36		sbc $36				sbc 	gxzTemp0
.81c0	9d 32 06	sta $0632,x			sta 	gXX0,x
.81c3	bd 37 06	lda $0637,x			lda 	gXX1+1,x
.81c6	e5 37		sbc $37				sbc 	gxzTemp0+1
.81c8	9d 33 06	sta $0633,x			sta 	gXX0+1,x
.81cb	a5 36		lda $36				lda 	gxzTemp0 						; return A
.81cd	60		rts				rts
.81ce					GXCircleMove:
.81ce	9c 4e 06	stz $064e			stz 	gxYChanged 					; clear Y changed flag
.81d1	a5 39		lda $39				lda 	gxzTemp1+1 					; check sign of D
.81d3	10 0d		bpl $81e2			bpl 	_GXEMPositive
.81d5	ee 4b 06	inc $064b			inc 	gXCentre 					; X++
.81d8	ad 4b 06	lda $064b			lda 	gXCentre
.81db	20 01 82	jsr $8201			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.81de	a9 06		lda #$06			lda 	#6  						; and add 6
.81e0	80 15		bra $81f7			bra 	_GXEMAddD
.81e2					_GXEMPositive:
.81e2	ee 4b 06	inc $064b			inc 	gXCentre					; X++
.81e5	ce 4c 06	dec $064c			dec 	gyCentre 					; Y--
.81e8	38		sec				sec 								; calculate X-Y
.81e9	ad 4b 06	lda $064b			lda 	gXCentre
.81ec	ed 4c 06	sbc $064c			sbc 	gYCentre
.81ef	20 01 82	jsr $8201			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.81f2	a9 0a		lda #$0a			lda 	#10  						; and add 10
.81f4	ce 4e 06	dec $064e			dec 	gxYChanged
.81f7					_GXEMAddD:
.81f7	18		clc				clc
.81f8	65 38		adc $38				adc 	gxzTemp1
.81fa	85 38		sta $38				sta 	gxzTemp1
.81fc	90 02		bcc $8200			bcc 	_GXEMNoCarry
.81fe	e6 39		inc $39				inc 	gxzTemp1+1
.8200					_GXEMNoCarry:
.8200	60		rts				rts
.8201					_GXAdd4TimesToD:
.8201	85 36		sta $36				sta 	gxzTemp0 					; make 16 bit signed.
.8203	29 80		and #$80			and 	#$80
.8205	f0 02		beq $8209			beq 	_GXA4Unsigned
.8207	a9 ff		lda #$ff			lda 	#$FF
.8209					_GXA4Unsigned:
.8209	85 37		sta $37				sta 	gxzTemp0+1
.820b	06 36		asl $36				asl 	gxzTemp0  					; x 4
.820d	26 37		rol $37				rol 	gxzTemp0+1
.820f	06 36		asl $36				asl 	gxzTemp0
.8211	26 37		rol $37				rol 	gxzTemp0+1
.8213	18		clc				clc 								; add
.8214	a5 36		lda $36				lda		gxzTemp0
.8216	65 38		adc $38				adc 	gxzTemp1
.8218	85 38		sta $38				sta 	gxzTemp1
.821a	a5 37		lda $37				lda		gxzTemp0+1
.821c	65 39		adc $39				adc 	gxzTemp1+1
.821e	85 39		sta $39				sta 	gxzTemp1+1
.8220	60		rts				rts
.8221					GXCircleSetup:
.8221	38		sec				sec
.8222	ad 38 06	lda $0638			lda 	gxY1
.8225	ed 34 06	sbc $0634			sbc 	gxY0
.8228	4a		lsr a				lsr 	a
.8229	8d 4a 06	sta $064a			sta 	gxRadius
.822c	a2 00		ldx #$00			ldx 	#0
.822e	20 50 82	jsr $8250			jsr 	_GXCalculateCentre
.8231	a2 02		ldx #$02			ldx 	#2
.8233	20 50 82	jsr $8250			jsr 	_GXCalculateCentre
.8236	9c 4b 06	stz $064b			stz 	gXCentre
.8239	ad 4a 06	lda $064a			lda 	gxRadius
.823c	8d 4c 06	sta $064c			sta 	gYCentre
.823f	0a		asl a				asl 	a 							; R x 2
.8240	85 36		sta $36				sta 	gxzTemp0
.8242	38		sec				sec
.8243	a9 03		lda #$03			lda 	#3
.8245	e5 36		sbc $36				sbc 	gxzTemp0
.8247	85 38		sta $38				sta 	gxzTemp1
.8249	a9 00		lda #$00			lda 	#0
.824b	e9 00		sbc #$00			sbc 	#0
.824d	85 39		sta $39				sta 	gxzTemp1+1
.824f	60		rts				rts
.8250					_GXCalculateCentre:
.8250	38		sec				sec
.8251	bd 36 06	lda $0636,x			lda 	gxX1,x
.8254	7d 32 06	adc $0632,x			adc 	gXX0,x
.8257	9d 36 06	sta $0636,x			sta 	gXX1,x
.825a	bd 37 06	lda $0637,x			lda 	gXX1+1,x
.825d	7d 33 06	adc $0633,x			adc 	gXX0+1,x
.8260	4a		lsr a				lsr 	a
.8261	9d 37 06	sta $0637,x			sta 	gXX1+1,x
.8264	7e 36 06	ror $0636,x			ror 	gXX1,x
.8267	60		rts				rts
.064a					gxRadius:
>064a							.fill 	1
.064b					gXCentre:
>064b							.fill 	1
.064c					gYCentre:
>064c							.fill 	1
.064d					gxIsFillMode:
>064d							.fill 	1
.064e					gxYChanged:
>064e							.fill  	1

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/clear.asm

=64000					ScreenSize200 = 320 * 200
=76800					ScreenSize240 = 320 * 240
.8268					GXClearBitmap:
.8268	ad 3b 06	lda $063b			lda 	gxBitmapsOn 				; check BMP running.
.826b	f0 24		beq $8291			beq 	_GXCBFail
.826d	20 db 87	jsr $87db			jsr 	GXOpenBitmap 				; start access
.8270	a0 07		ldy #$07			ldy 	#ScreenSize200 / 8192 		; X is pages to clear
.8272	ad 3e 06	lda $063e			lda 	gxHeight
.8275	c9 c8		cmp #$c8			cmp 	#200 						; 200 ?
.8277	a0 09		ldy #$09			ldy 	#ScreenSize240 / 8192
.8279					_GXCalcLastPage:
.8279	98		tya				tya 								; add to base page
.827a	18		clc				clc
.827b	6d 3c 06	adc $063c			adc 	gxBasePage
.827e	85 0b		sta $0b				sta 	GXEditSlot  				; clear from this page back
.8280					_GXClearAll:
.8280	20 93 82	jsr $8293			jsr 	_GXClearBlock 				; clear 8k block
.8283	c6 0b		dec $0b				dec 	GXEditSlot  				; back to previous
.8285	a5 0b		lda $0b				lda 	GXEditSlot
.8287	cd 3c 06	cmp $063c			cmp 	gxBasePage 					; until before base page
.828a	b0 f4		bcs $8280			bcs 	_GXClearAll
.828c	20 ec 87	jsr $87ec			jsr 	GXCloseBitmap	 			; stop access
.828f	18		clc				clc
.8290	60		rts				rts
.8291					_GXCBFail:
.8291	38		sec				sec
.8292	60		rts				rts
.8293					_GXClearBlock:
.8293	a9 00		lda #$00			lda 	#((GXMappingAddress) & $FF)
.8295	85 38		sta $38				sta 	0+gxzTemp1
.8297	a9 60		lda #$60			lda 	#((GXMappingAddress) >> 8)
.8299	85 39		sta $39				sta 	1+gxzTemp1
.829b					_GXCB0:
.829b	a5 36		lda $36				lda 	gxzTemp0
.829d	a0 00		ldy #$00			ldy 	#0
.829f					_GXCB1:
.829f	91 38		sta ($38),y			sta 	(gxzTemp1),y
.82a1	c8		iny				iny
.82a2	91 38		sta ($38),y			sta 	(gxzTemp1),y
.82a4	c8		iny				iny
.82a5	91 38		sta ($38),y			sta 	(gxzTemp1),y
.82a7	c8		iny				iny
.82a8	91 38		sta ($38),y			sta 	(gxzTemp1),y
.82aa	c8		iny				iny
.82ab	d0 f2		bne $829f			bne 	_GXCB1
.82ad	e6 39		inc $39				inc 	gxzTemp1+1
.82af	a5 39		lda $39				lda 	gxzTemp1+1
.82b1	c9 80		cmp #$80			cmp	 	#(GXMappingAddress >> 8)+$20
.82b3	d0 e6		bne $829b			bne 	_GXCB0
.82b5	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/control.asm

.82b6					GXInitialise:
.82b6	64 01		stz $01				stz 	1
.82b8	a9 01		lda #$01			lda 	#1
.82ba	8d 00 d0	sta $d000			sta 	$D000
.82bd	18		clc				clc
.82be	9c 3a 06	stz $063a			stz 	GXSpritesOn
.82c1	9c 3b 06	stz $063b			stz 	GXBitmapsOn
.82c4	a2 0f		ldx #$0f			ldx 	#15
.82c6					_GXIClear:
.82c6	9e 2a 06	stz $062a,x			stz 	gxCurrentX,x
.82c9	ca		dex				dex
.82ca	10 fa		bpl $82c6			bpl 	_GXIClear
.82cc	60		rts				rts
.82cd					GXControlBitmap:
.82cd	64 01		stz $01				stz 	1
.82cf	a5 36		lda $36				lda 	gxzTemp0 					; get control bits
.82d1	29 01		and #$01			and 	#1 							; set bitmap flag
.82d3	8d 3b 06	sta $063b			sta 	gxBitmapsOn
.82d6	4a		lsr a				lsr 	a 							; bit 0 into carry.
.82d7	ad 00 d0	lda $d000			lda 	$D000 						; read Vicky MCR
.82da	09 07		ora #$07			ora 	#7 							; turn graphics, text, textoverlay on.
.82dc	29 f7		and #$f7			and 	#$F7 						; clear bitmap bit
.82de	90 02		bcc $82e2			bcc 	_CBNotOn
.82e0	09 08		ora #$08			ora 	#$08 						; bitmap on if 1 on 0 off
.82e2					_CBNotOn:
.82e2	8d 00 d0	sta $d000			sta 	$D000 						; update Vicky MCR
.82e5	a5 36		lda $36				lda 	gxzTemp0 					; get control settings (bits 0-2)
.82e7	29 07		and #$07			and 	#7
.82e9	8d 00 d1	sta $d100			sta 	$D100 						; write in Vicky Bitmap Control Register #0
.82ec	a5 37		lda $37				lda 	gxzTemp0+1 					; get the base page
.82ee	d0 02		bne $82f2			bne 	_CBNotDefault
.82f0	a9 08		lda #$08			lda 	#8  						; if zero, use 8 e.g. bitmap at $10000
.82f2					_CBNotDefault:
.82f2	8d 3c 06	sta $063c			sta 	gxBasePage
.82f5	20 53 83	jsr $8353			jsr 	GXCalculateBaseAddress 	 	; convert page# to address
.82f8	a5 37		lda $37				lda 	gxzTemp0+1 					; copy address into Bitmap address registers
.82fa	8d 03 d1	sta $d103			sta 	$D103
.82fd	a5 36		lda $36				lda 	gxzTemp0
.82ff	8d 02 d1	sta $d102			sta 	$D102
.8302	9c 01 d1	stz $d101			stz 	$D101
.8305	a2 f0		ldx #$f0			ldx 	#240 						; height is 240
.8307	ad 01 d0	lda $d001			lda 	$D001 						; read MCR bit 0
.830a	29 01		and #$01			and 	#1
.830c	f0 02		beq $8310			beq 	_CBHaveHeight
.830e	a2 c8		ldx #$c8			ldx 	#200 						; if bit 0 set 320x200
.8310					_CBHaveHeight
.8310	8e 3e 06	stx $063e			stx 	gxHeight
.8313	18		clc				clc
.8314	60		rts				rts
.8315					GXControlSprite:
.8315	64 01		stz $01				stz 	1
.8317	a5 36		lda $36				lda 	gxzTemp0 					; get control bits
.8319	29 01		and #$01			and 	#1 							; set sprites flag
.831b	8d 3a 06	sta $063a			sta 	gxSpritesOn
.831e	4a		lsr a				lsr 	a 							; bit 0 into carry.
.831f	ad 00 d0	lda $d000			lda 	$D000 						; read Vicky MCR
.8322	09 07		ora #$07			ora 	#7 							; turn graphics, text, textoverlay on.
.8324	29 df		and #$df			and 	#$DF 						; clear sprite bit
.8326	90 02		bcc $832a			bcc 	_CSNotOn
.8328	09 20		ora #$20			ora 	#$20 						; sprite on if 1 on 0 off
.832a					_CSNotOn:
.832a	8d 00 d0	sta $d000			sta 	$D000 						; update Vicky MCR
.832d	a5 37		lda $37				lda 	gxzTemp0+1 					; get the base page
.832f	d0 02		bne $8333			bne 	_CSNotDefault
.8331	a9 18		lda #$18			lda 	#24  						; if zero, use 24 e.g. sprites at $30000
.8333					_CSNotDefault:
.8333	8d 3d 06	sta $063d			sta 	gxSpritePage
.8336	20 53 83	jsr $8353			jsr 	GXCalculateBaseAddress 	 	; convert page# to address
.8339	a5 36		lda $36				lda 	zTemp0
.833b	8d 48 06	sta $0648			sta 	GXSpriteOffsetBase
.833e	a5 37		lda $37				lda 	zTemp0+1
.8340	8d 49 06	sta $0649			sta 	GXSpriteOffsetBase+1
.8343	a2 00		ldx #$00			ldx 	#0 							; disable all sprites, clears all sprite memory.
.8345					_CSClear:
.8345	9e 00 d9	stz $d900,x			stz 	$D900,x
.8348	9e 00 da	stz $da00,x			stz 	$DA00,x
.834b	ca		dex				dex
.834c	d0 f7		bne $8345			bne 	_CSClear
.834e	9c 47 06	stz $0647			stz 	GSCurrentSprite+1 			; no sprite selected.
.8351	18		clc				clc
.8352	60		rts				rts
.8353					GXCalculateBaseAddress:
.8353	85 36		sta $36				sta 	gxzTemp0
.8355	64 37		stz $37				stz 	gxzTemp0+1
.8357	a9 05		lda #$05			lda 	#5
.8359					_GXShift:
.8359	06 36		asl $36				asl 	gxzTemp0
.835b	26 37		rol $37				rol 	gxzTemp0+1
.835d	3a		dec a				dec		a
.835e	d0 f9		bne $8359			bne 	_GXShift
.8360	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/line.asm

.8361					GXLine:
.8361	ad 3b 06	lda $063b			lda 	GXBitmapsOn
.8364	f0 28		beq $838e			beq 	_GXLFail
.8366	20 db 87	jsr $87db			jsr 	GXOpenBitmap
.8369	20 cf 88	jsr $88cf			jsr 	GXSortY						; sort pairs so Y1 >= Y0 e.g. top to bottom.
.836c	20 34 84	jsr $8434			jsr 	GXLineSetup 				; the calculations in the linescanner constructor
.836f	20 f9 87	jsr $87f9			jsr 	GXPositionCalc 				; calculate position/offset.
.8372					_GXDrawLoop:
.8372	ac 45 06	ldy $0645			ldy 	gsOffset 					; draw the pixel
.8375	b1 3c		lda ($3c),y			lda 	(gxzScreen),y
.8377	2d 42 06	and $0642			and 	gxANDValue
.837a	4d 41 06	eor $0641			eor 	gxEORValue
.837d	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.837f	20 90 83	jsr $8390			jsr 	GXLineIsComplete 			; is the line complete ?
.8382	f0 05		beq $8389			beq 	_GXLExit
.8384	20 ab 83	jsr $83ab			jsr 	GXLineAdvance 				; code as per advance method
.8387	80 e9		bra $8372			bra 	_GXDrawLoop
.8389					_GXLExit:
.8389	20 ec 87	jsr $87ec			jsr 	GXCloseBitmap
.838c	18		clc				clc
.838d	60		rts				rts
.838e					_GXLFail:
.838e	38		sec				sec
.838f	60		rts				rts
.8390					GXLineIsComplete:
.8390	ad 51 06	lda $0651			lda 	GXIsDiffYLarger 			; is dy larger
.8393	d0 0f		bne $83a4			bne 	_GXLICCompareY 				; if so compare Y1/Y0
.8395	ad 32 06	lda $0632			lda 	GXX0 						; compare X, LSB and MSB
.8398	4d 36 06	eor $0636			eor 	GXX1
.839b	d0 06		bne $83a3			bne 	_GXLICExit
.839d	ad 33 06	lda $0633			lda 	GXX0+1
.83a0	4d 37 06	eor $0637			eor 	GXX1+1
.83a3					_GXLICExit:
.83a3	60		rts				rts
.83a4					_GXLICCompareY:
.83a4	ad 38 06	lda $0638			lda 	GXY1
.83a7	4d 34 06	eor $0634			eor 	GXY0
.83aa	60		rts				rts
.83ab					GXLineAdvance:
.83ab	18		clc				clc 								; add adjust to position
.83ac	ad 53 06	lda $0653			lda 	GXPosition
.83af	6d 54 06	adc $0654			adc 	GXAdjust
.83b2	8d 53 06	sta $0653			sta 	GXPosition
.83b5	9c 56 06	stz $0656			stz 	GXAddSelect 				; clear add select flag
.83b8	b0 05		bcs $83bf			bcs 	_GXLAOverflow 				; if carry out, overflowed.
.83ba	cd 55 06	cmp $0655			cmp 	GXTotal 					; if exceeded total
.83bd	90 0a		bcc $83c9			bcc 	_GXLANoExtra
.83bf					_GXLAOverflow:
.83bf	ce 56 06	dec $0656			dec 	GXAddSelect 				; set addselect to $FF
.83c2	38		sec				sec 								; subtract total and write back
.83c3	ed 55 06	sbc $0655			sbc 	GXTotal
.83c6	8d 53 06	sta $0653			sta 	GXPosition
.83c9					_GXLANoExtra:
.83c9	ad 51 06	lda $0651			lda 	GXIsDiffYLarger
.83cc	f0 0d		beq $83db			beq 	_GXDXLarger
.83ce	20 2d 84	jsr $842d			jsr 	GXIncrementY
.83d1	ad 56 06	lda $0656			lda 	GXAddSelect
.83d4	f0 10		beq $83e6			beq 	_GXLAExit
.83d6	20 e7 83	jsr $83e7			jsr 	GXAdjustX
.83d9	80 0b		bra $83e6			bra 	_GXLAExit
.83db					_GXDXLarger:
.83db	20 e7 83	jsr $83e7			jsr 	GXAdjustX
.83de	ad 56 06	lda $0656			lda 	GXAddSelect
.83e1	f0 03		beq $83e6			beq 	_GXLAExit
.83e3	20 2d 84	jsr $842d			jsr 	GXIncrementY
.83e6					_GXLAExit:
.83e6	60		rts				rts
.83e7					GXAdjustX:
.83e7	ad 52 06	lda $0652			lda 	GXDXNegative
.83ea	10 25		bpl $8411			bpl 	_GXAXRight
.83ec	ad 32 06	lda $0632			lda 	GXX0
.83ef	d0 03		bne $83f4			bne 	_GXAXNoBorrow
.83f1	ce 33 06	dec $0633			dec 	GXX0+1
.83f4					_GXAXNoBorrow:
.83f4	ce 32 06	dec $0632			dec 	GXX0
.83f7	ce 45 06	dec $0645			dec 	gsOffset 					; pixel left
.83fa	ad 45 06	lda $0645			lda 	gsOffset
.83fd	c9 ff		cmp #$ff			cmp 	#$FF
.83ff	d0 0f		bne $8410			bne 	_GXAYExit 					; underflow
.8401	c6 3d		dec $3d				dec 	gxzScreen+1 					; borrow
.8403	a5 3d		lda $3d				lda 	gxzScreen+1 					; gone off page
.8405	c9 60		cmp #$60			cmp 	#GXMappingAddress >> 8
.8407	b0 07		bcs $8410			bcs 	_GXAYExit
.8409	18		clc				clc
.840a	69 20		adc #$20			adc 	#$20 						; fix up
.840c	85 3d		sta $3d				sta 	gxzScreen+1
.840e	c6 0b		dec $0b				dec 	GXEditSlot 				; back one page
.8410					_GXAYExit:
.8410	60		rts				rts
.8411					_GXAXRight:
.8411	ee 32 06	inc $0632			inc 	GXX0
.8414	d0 03		bne $8419			bne 	_GXAXNoCarry
.8416	ee 33 06	inc $0633			inc 	GXX0+1
.8419					_GXAXNoCarry:
.8419	ee 45 06	inc $0645			inc 	gsOffset 					; pixel right
.841c	d0 0e		bne $842c			bne 	_GXAXExit 					; if not overflowed, exit.
.841e	e6 3d		inc $3d				inc 	gxzScreen+1 					; next line
.8420	a5 3d		lda $3d				lda 	gxzScreen+1
.8422	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page ?
.8424	90 06		bcc $842c			bcc 	_GXAXExit
.8426	e9 20		sbc #$20			sbc 	#$20 						; fix up
.8428	85 3d		sta $3d				sta 	gxzScreen+1
.842a	e6 0b		inc $0b				inc 	GXEditSlot 				; next page
.842c					_GXAXExit:
.842c	60		rts				rts
.842d					GXIncrementY:
.842d	ee 34 06	inc $0634			inc 	GXY0
.8430	20 4f 88	jsr $884f			jsr 	GXMovePositionDown
.8433	60		rts				rts
.8434					GXLineSetup:
.8434	ad 38 06	lda $0638			lda 	GXY1
.8437	38		sec				sec
.8438	ed 34 06	sbc $0634			sbc 	GXY0
.843b	4a		lsr a				lsr 	a
.843c	8d 50 06	sta $0650			sta 	GXDiffY
.843f	9c 52 06	stz $0652			stz 	GXDXNegative 				; clear -ve flag
.8442	38		sec				sec
.8443	ad 36 06	lda $0636			lda 	GXX1
.8446	ed 32 06	sbc $0632			sbc 	GXX0
.8449	8d 4f 06	sta $064f			sta 	GXDiffX
.844c	ad 37 06	lda $0637			lda 	GXX1+1 						; calculate MSB
.844f	ed 33 06	sbc $0633			sbc 	GXX0+1
.8452	6a		ror a				ror 	a 							; rotate bit into DiffX halving it
.8453	6e 4f 06	ror $064f			ror 	GXDiffX
.8456	0a		asl a				asl 	a
.8457	10 0c		bpl $8465			bpl 	_GDXNotNegative
.8459	a9 00		lda #$00			lda 	#0 							; make absolute value of |dx|
.845b	38		sec				sec
.845c	ed 4f 06	sbc $064f			sbc 	GXDiffX
.845f	8d 4f 06	sta $064f			sta 	GXDiffX
.8462	ce 52 06	dec $0652			dec 	GXDXNegative 				; -ve flag = $FF.
.8465					_GDXNotNegative:
.8465	9c 51 06	stz $0651			stz 	GXIsDiffYLarger 			; clear larger flag
.8468	ad 50 06	lda $0650			lda 	GXDiffY 					; set adjust and total.
.846b	8d 54 06	sta $0654			sta 	GXAdjust
.846e	ad 4f 06	lda $064f			lda 	GXDiffX
.8471	8d 55 06	sta $0655			sta 	GXTotal
.8474	ad 50 06	lda $0650			lda 	GXDiffY 					; if dy > dx
.8477	cd 4f 06	cmp $064f			cmp 	GXDiffX
.847a	90 0f		bcc $848b			bcc 	_GDXNotLarger
.847c	ce 51 06	dec $0651			dec 	GXIsDiffYLarger 			; set the dy larger flag
.847f	ad 4f 06	lda $064f			lda 	GXDiffX 					; set adjust and total other way round
.8482	8d 54 06	sta $0654			sta 	GXAdjust
.8485	ad 50 06	lda $0650			lda 	GXDiffY
.8488	8d 55 06	sta $0655			sta 	GXTotal
.848b					_GDXNotLarger:
.848b	ad 55 06	lda $0655			lda 	GXTotal
.848e	4a		lsr a				lsr 	a
.848f	8d 53 06	sta $0653			sta 	GXPosition
.8492	60		rts				rts
.064f					GXDiffX:
>064f							.fill 	1
.0650					GXDiffY:
>0650							.fill 	1
.0651					GXIsDiffYLarger:
>0651							.fill 	1
.0652					GXDXNegative:
>0652							.fill 	1
.0653					GXPosition:
>0653							.fill 	1
.0654					GXAdjust:
>0654							.fill 	1
.0655					GXTotal:
>0655							.fill 	1
.0656					GXAddSelect:
>0656							.fill 	1

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/mode.asm

.8493					GXSetColourMode:
.8493	a6 36		ldx $36				ldx 	gxzTemp0
.8495	8e 40 06	stx $0640			stx 	gxColour 								; set colour
.8498	a5 37		lda $37				lda 	gxzTemp0+1 								;
.849a	8d 3f 06	sta $063f			sta 	gxMode 									; set mode
.849d	29 03		and #$03			and 	#3 										; only interested in bits 0-3
.849f	9c 42 06	stz $0642			stz 	gxANDValue 								; initially AND with 0, and EOR with Colour
.84a2	ae 40 06	ldx $0640			ldx 	gxColour
.84a5	8e 41 06	stx $0641			stx 	gxEORValue
.84a8	c9 02		cmp #$02			cmp 	#2 										; if mode 2/3 And with colour
.84aa	90 03		bcc $84af			bcc 	_GXSDCNotAndColour
.84ac	8e 42 06	stx $0642			stx 	gxANDValue
.84af					_GXSDCNotAndColour:
.84af	d0 03		bne $84b4			bne 	_GXSDCNotAnd 							; mode 2, Don't EOR with colour
.84b1	9c 41 06	stz $0641			stz 	gxEORValue
.84b4					_GXSDCNotAnd:
.84b4	4a		lsr a				lsr 	a 										; if bit 0 set, 1's complement AND value
.84b5	90 08		bcc $84bf			bcc 	_GXSDCNoFlip
.84b7	ad 42 06	lda $0642			lda	 	gxANDValue
.84ba	49 ff		eor #$ff			eor 	#$FF
.84bc	8d 42 06	sta $0642			sta 	gxANDValue
.84bf					_GXSDCNoFlip:
.84bf	18		clc				clc
.84c0	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/plot.asm

.84c1					GXPlotPoint:
.84c1	20 db 87	jsr $87db			jsr 	GXOpenBitmap 				; start drawing
.84c4	20 f9 87	jsr $87f9			jsr 	GXPositionCalc 				; setup gxzScreen, gsOffset and the position.
.84c7	ac 45 06	ldy $0645			ldy 	gsOffset
.84ca	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel on the right
.84cc	2d 42 06	and $0642			and 	gxANDValue
.84cf	4d 41 06	eor $0641			eor 	gxEORValue
.84d2	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.84d4	20 ec 87	jsr $87ec			jsr 	GXCloseBitmap 				; stop drawing and exit
.84d7	18		clc				clc
.84d8	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/rect.asm

.84d9					GXFillRectangle:
.84d9	38		sec				sec
.84da	80 01		bra $84dd			bra 	GXRectangle
.84dc					GXFrameRectangle:
.84dc	18		clc				clc
.84dd					GXRectangle:
.84dd	ad 3b 06	lda $063b			lda 	gxBitmapsOn
.84e0	f0 35		beq $8517			beq 	_GXRFail
.84e2	08		php				php 								; save Fill flag (CS)
.84e3	20 db 87	jsr $87db			jsr 	GXOpenBitmap 				; start drawing
.84e6	20 b1 88	jsr $88b1			jsr 	GXSortXY 					; sort both X and Y so top left/bottom right
.84e9	20 f9 87	jsr $87f9			jsr 	GXPositionCalc 				; setup gxzScreen, gsOffset and the position.
.84ec	38		sec				sec 								; sec = Draw line
.84ed	20 19 85	jsr $8519			jsr 	GXDrawLineX1X0 				; draw a line length X1-X0
.84f0	ad 34 06	lda $0634			lda 	gxY0 						; reached end of rectangle ?
.84f3	cd 38 06	cmp $0638			cmp 	gxY1
.84f6	f0 19		beq $8511			beq 	_GXRectangleExit
.84f8					_GXRectLoop:
.84f8	20 4f 88	jsr $884f			jsr 	GXMovePositionDown 			; down one.
.84fb	ee 34 06	inc $0634			inc 	gxY0 						; change Y pos
.84fe	ad 34 06	lda $0634			lda 	gxY0 						; reached last line
.8501	cd 38 06	cmp $0638			cmp 	gXY1
.8504	f0 07		beq $850d			beq 	_GXLastLine
.8506	28		plp				plp 								; get flag back
.8507	08		php				php
.8508	20 19 85	jsr $8519			jsr 	GXDrawLineX1X0 				; draw horizontal line
.850b	80 eb		bra $84f8			bra 	_GXRectLoop
.850d					_GXLastLine:
.850d	38		sec				sec
.850e	20 19 85	jsr $8519			jsr 	GXDrawLineX1X0
.8511					_GXRectangleExit:
.8511	68		pla				pla 								; throw fill flag.
.8512	20 ec 87	jsr $87ec			jsr 	GXCloseBitmap 				; stop drawing and exit
.8515	18		clc				clc
.8516	60		rts				rts
.8517					_GXRFail:
.8517	38		sec				sec
.8518	60		rts				rts
.8519					GXDrawLineX1X0:
.8519	08		php				php 								; save solid/either-end
.851a	38		sec				sec
.851b	ad 36 06	lda $0636			lda		gXX1
.851e	ed 32 06	sbc $0632			sbc 	gXX0
.8521	85 36		sta $36				sta 	gxzTemp0
.8523	ad 37 06	lda $0637			lda 	gXX1+1
.8526	ed 33 06	sbc $0633			sbc 	gXX0+1
.8529	85 37		sta $37				sta 	gxzTemp0+1
.852b	28		plp				plp
.852c					GXDrawLineTemp0:
.852c	a5 3c		lda $3c				lda 	gxzScreen 						; push gxzScreen, gsOffset and GXEditSlot on stack
.852e	48		pha				pha
.852f	a5 3d		lda $3d				lda 	gxzScreen+1
.8531	48		pha				pha
.8532	ad 45 06	lda $0645			lda 	gsOffset
.8535	48		pha				pha
.8536	a5 0b		lda $0b				lda 	GXEditSlot
.8538	48		pha				pha
.8539	ac 45 06	ldy $0645			ldy 	gsOffset 					; Y offset
.853c	90 1e		bcc $855c			bcc 	_GXDLTEndPoints 			; if CC draw end points only.
.853e					_GXDLTLine:
.853e	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel
.8540	2d 42 06	and $0642			and 	gxANDValue
.8543	4d 41 06	eor $0641			eor 	gxEORValue
.8546	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.8548	a5 36		lda $36				lda 	gxzTemp0 					; decrement counter
.854a	d0 04		bne $8550			bne 	_GXDLTNoBorrow
.854c	c6 37		dec $37				dec 	gxzTemp0+1 					; borrow, if goes -ve then exit
.854e	30 2e		bmi $857e			bmi 	_GXDLTExit
.8550					_GXDLTNoBorrow:
.8550	c6 36		dec $36				dec 	gxzTemp0
.8552	c8		iny				iny 								; next slot.
.8553	d0 e9		bne $853e			bne 	_GXDLTLine
.8555	e6 3d		inc $3d				inc 	gxzScreen+1 					; carry to next
.8557	20 8c 85	jsr $858c			jsr 	GXDLTCheckWrap				; check for new page.
.855a	80 e2		bra $853e			bra 	_GXDLTLine
.855c					_GXDLTEndPoints:
.855c	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel
.855e	2d 42 06	and $0642			and 	gxANDValue
.8561	4d 41 06	eor $0641			eor 	gxEORValue
.8564	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.8566	98		tya				tya 								; advance to right side
.8567	18		clc				clc
.8568	65 36		adc $36				adc 	gxzTemp0
.856a	a8		tay				tay
.856b	a5 3d		lda $3d				lda 	gxzScreen+1
.856d	65 37		adc $37				adc 	gxzTemp0+1
.856f	85 3d		sta $3d				sta 	gxzScreen+1
.8571	20 8c 85	jsr $858c			jsr 	GXDLTCheckWrap 			; fix up.
.8574	b1 3c		lda ($3c),y			lda 	(gxzScreen),y 					; set pixel on the right
.8576	2d 42 06	and $0642			and 	gxANDValue
.8579	4d 41 06	eor $0641			eor 	gxEORValue
.857c	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.857e					_GXDLTExit:
.857e	68		pla				pla
.857f	85 0b		sta $0b				sta 	GXEditSlot
.8581	68		pla				pla
.8582	8d 45 06	sta $0645			sta 	gsOffset
.8585	68		pla				pla
.8586	85 3d		sta $3d				sta 	gxzScreen+1
.8588	68		pla				pla
.8589	85 3c		sta $3c				sta 	gxzScreen
.858b	60		rts				rts
.858c					GXDLTCheckWrap:
.858c	a5 3d		lda $3d				lda 	gxzScreen+1 					; check end of page
.858e	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8)
.8590	90 06		bcc $8598			bcc 	_GXDLTCWExit
.8592	e9 20		sbc #$20			sbc 	#$20 						; fix up
.8594	85 3d		sta $3d				sta 	gxzScreen+1
.8596	e6 0b		inc $0b				inc 	GXEditSlot
.8598					_GXDLTCWExit:
.8598	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/render.asm

.8599					GXDrawGraphicElement:
.8599	8d 57 06	sta $0657			sta 	gxSize 						; save size
.859c	3a		dec a				dec 	a
.859d	8d 58 06	sta $0658			sta 	gxMask 						; and mask
.85a0	ad 3b 06	lda $063b			lda 	gxBitmapsOn 				; check BMP on
.85a3	f0 67		beq $860c			beq 	_GXSLFail
.85a5	ad 34 06	lda $0634			lda 	gxY0 						; push Y on stack
.85a8	48		pha				pha
.85a9	8c 5a 06	sty $065a			sty 	gxAcquireVector+1 			; and acquisition vector
.85ac	8e 59 06	stx $0659			stx 	gxAcquireVector
.85af	20 db 87	jsr $87db			jsr 	gxOpenBitmap 				; open the bitmap.
.85b2	ad 5c 06	lda $065c			lda 	gxUseMode 					; scale bits
.85b5	4a		lsr a				lsr 	a
.85b6	4a		lsr a				lsr 	a
.85b7	4a		lsr a				lsr 	a
.85b8	29 07		and #$07			and		#7
.85ba	1a		inc a				inc 	a
.85bb	8d 5b 06	sta $065b			sta 	gxScale
.85be	64 38		stz $38				stz 	gxzTemp1					; start first line
.85c0					_GXGELoop:
.85c0	a5 38		lda $38				lda 	gxzTemp1 					; current line number to read.
.85c2	2c 5c 06	bit $065c			bit 	gxUseMode 					; check for flip.
.85c5	10 06		bpl $85cd			bpl		_GXNoVFlip
.85c7	ad 58 06	lda $0658			lda 	gxMask
.85ca	38		sec				sec
.85cb	e5 38		sbc $38				sbc 	gxzTemp1
.85cd					_GXNoVFlip:
.85cd	aa		tax				tax 								; get the Xth line.
.85ce	20 0e 86	jsr $860e			jsr 	_GXCallAcquire 				; get that data.
.85d1	ad 5b 06	lda $065b			lda 	gxScale 					; do scale identical copies of that line.
.85d4	85 39		sta $39				sta 	gxzTemp1+1
.85d6					_GXGELoop2:
.85d6	ad 34 06	lda $0634			lda 	gxY0 						; off screen
.85d9	cd 3e 06	cmp $063e			cmp 	gxHeight
.85dc	b0 10		bcs $85ee			bcs 	_GXDGEExit
.85de	20 11 86	jsr $8611			jsr 	GXRenderOneLine 			; render line
.85e1	c6 39		dec $39				dec 	gxzTemp1+1 					; scale times.
.85e3	d0 f1		bne $85d6			bne 	_GXGELoop2
.85e5	e6 38		inc $38				inc 	gxzTemp1 					; done all lines.
.85e7	a5 38		lda $38				lda 	gxzTemp1
.85e9	cd 57 06	cmp $0657			cmp 	gxSize
.85ec	d0 d2		bne $85c0			bne 	_GXGELoop
.85ee					_GXDGEExit:
.85ee	68		pla				pla 								; restore Y for next time
.85ef	8d 34 06	sta $0634			sta 	gxY0
.85f2	ae 5b 06	ldx $065b			ldx 	gxScale 					; get scale (1-8)
.85f5					_GXShiftLeft:
.85f5	18		clc				clc
.85f6	ad 57 06	lda $0657			lda 	gxSize
.85f9	6d 32 06	adc $0632			adc 	gxX0
.85fc	8d 32 06	sta $0632			sta 	gxX0
.85ff	90 03		bcc $8604			bcc 	_GXSLNoCarry
.8601	ee 33 06	inc $0633			inc 	gxX0+1
.8604					_GXSLNoCarry:
.8604	ca		dex				dex
.8605	d0 ee		bne $85f5			bne 	_GXShiftLeft
.8607	20 ec 87	jsr $87ec			jsr 	GXCloseBitmap
.860a	18		clc				clc
.860b	60		rts				rts
.860c					_GXSLFail:
.860c	38		sec				sec
.860d	60		rts				rts
.860e					_GXCallAcquire:
.860e	6c 59 06	jmp ($0659)			jmp 	(gxAcquireVector)
.8611					GXRenderOneLine:
.8611	20 f9 87	jsr $87f9			jsr 	GXPositionCalc 				; calculate position/offset.
.8614	ac 45 06	ldy $0645			ldy 	gsOffset 					; Y contains position.
.8617	64 3a		stz $3a				stz 	gxzTemp2 					; do size pixels
.8619					_GXROLLoop1:
.8619	ad 5b 06	lda $065b			lda 	gxScale 					; set to do 'scale' times
.861c	85 3b		sta $3b				sta 	gxzTemp2+1
.861e					_GXROLLoop2:
.861e	a5 3a		lda $3a				lda 	gxzTemp2 					; get current pixel
.8620	2c 3f 06	bit $063f			bit 	gxMode 						; check H Flip
.8623	50 06		bvc $862b			bvc 	_GXNoHFlip
.8625	ad 58 06	lda $0658			lda 	gxMask
.8628	38		sec				sec
.8629	e5 3a		sbc $3a				sbc 	gxzTemp2
.862b					_GXNoHFlip:
.862b	aa		tax				tax 								; read from the pixel buffer
.862c	bd f8 05	lda $05f8,x			lda 	gxPixelBuffer,x
.862f	d0 07		bne $8638			bne 	_GXDraw 					; draw if non zero
.8631	ad 5c 06	lda $065c			lda 	gxUseMode 					; check to see if solid background
.8634	29 04		and #$04			and 	#4
.8636	f0 0a		beq $8642			beq 	_GXZeroPixel
.8638					_GXDraw:
.8638	b1 3c		lda ($3c),y			lda 	(gxzScreen),y
.863a	2d 42 06	and $0642			and 	gxANDValue
.863d	5d f8 05	eor $05f8,x			eor 	gxPixelBuffer,x
.8640	91 3c		sta ($3c),y			sta 	(gxzScreen),y
.8642					_GXZeroPixel:
.8642	c8		iny				iny 								; advance pointer
.8643	d0 05		bne $864a			bne 	_GXNoShift
.8645	e6 3d		inc $3d				inc 	gxzScreen+1 				; carry to next
.8647	20 8c 85	jsr $858c			jsr 	GXDLTCheckWrap				; check for new page.
.864a					_GXNoShift:
.864a	c6 3b		dec $3b				dec 	gxzTemp2+1 					; do the inner loop gxScale times.
.864c	d0 d0		bne $861e			bne 	_GXROLLoop2
.864e	e6 3a		inc $3a				inc 	gxzTemp2 					; next pixel.
.8650	a5 3a		lda $3a				lda 	gxzTemp2
.8652	cd 57 06	cmp $0657			cmp 	gxSize
.8655	d0 c2		bne $8619			bne 	_GXROLLoop1
.8657	ee 34 06	inc $0634			inc 	gxY0
.865a	60		rts				rts
.0657					gxSize:
>0657							.fill 	1
.0658					gxMask:
>0658							.fill 	1
.0659					gxAcquireVector:
>0659							.fill 	2
.065b					gxScale:
>065b							.fill 	1
.065c					gxUseMode:
>065c							.fill 	1

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/sources/font.asm

.865b					GXFontHandler:
.865b	a5 37		lda $37				lda 	gxzTemp0+1 					; eor with mode
.865d	4d 3f 06	eor $063f			eor 	gxMode
.8660	8d 5c 06	sta $065c			sta 	gxUseMode
.8663	64 37		stz $37				stz 	gxzTemp0+1 					; gxzTemp0 is font #
.8665	06 36		asl $36				asl	 	gxzTemp0 					; x 2
.8667	26 37		rol $37				rol	 	gxzTemp0+1
.8669	06 36		asl $36				asl	 	gxzTemp0 					; x 4
.866b	26 37		rol $37				rol	 	gxzTemp0+1
.866d	06 36		asl $36				asl	 	gxzTemp0 					; x 8
.866f	26 37		rol $37				rol	 	gxzTemp0+1
.8671	a5 37		lda $37				lda 	gxzTemp0+1 					; put in page C0
.8673	09 c0		ora #$c0			ora 	#$C0
.8675	85 37		sta $37				sta 	gxzTemp0+1
.8677	a9 08		lda #$08			lda 	#8 							; size 8x8
.8679	a2 81		ldx #$81			ldx 	#GXGetGraphicDataFont & $FF ; XY = Graphic Data retrieval routine
.867b	a0 86		ldy #$86			ldy 	#GXGetGraphicDataFont >> 8
.867d	20 99 85	jsr $8599			jsr 	GXDrawGraphicElement
.8680	60		rts				rts
.8681					GXGetGraphicDataFont:
.8681	8a		txa				txa 								; X->Y
.8682	a8		tay				tay
.8683	a6 01		ldx $01				ldx 	1 							; preserve old value
.8685	a9 01		lda #$01			lda 	#1 							; access page 1 (font memory)
.8687	85 01		sta $01				sta 	1
.8689	b1 36		lda ($36),y			lda 	(gxzTemp0),y 				; read the font element.
.868b	86 01		stx $01				stx 	1 							; put old value back.
.868d	a2 00		ldx #$00			ldx 	#0 							; do 8 times
.868f					_GXExpand:
.868f	9e f8 05	stz $05f8,x			stz 	gxPixelBuffer,x 			; zero in pixel buffer
.8692	0a		asl a				asl 	a 							; shift bit 7 into C
.8693	90 08		bcc $869d			bcc 	_GXNoPixel
.8695	48		pha				pha 								; if set, set pixel buffer to current colour.
.8696	ad 40 06	lda $0640			lda 	gxColour
.8699	9d f8 05	sta $05f8,x			sta 	gxPixelBuffer,x
.869c	68		pla				pla
.869d					_GXNoPixel:
.869d	e8		inx				inx 								; do the whole byte.
.869e	e0 08		cpx #$08			cpx 	#8
.86a0	d0 ed		bne $868f			bne 	_GXExpand
.86a2	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/sources/sprite.asm

.86a3					GXSpriteHandler:
.86a3	a5 37		lda $37				lda 	gxzTemp0+1 					; eor with mode
.86a5	4d 3f 06	eor $063f			eor 	gxMode
.86a8	8d 5c 06	sta $065c			sta 	gxUseMode
.86ab	a6 36		ldx $36				ldx 	gxzTemp0 					; sprite #
.86ad	da		phx				phx
.86ae	20 db 87	jsr $87db			jsr 	GXOpenBitmap 				; can access sprite information
.86b1	68		pla				pla
.86b2	20 6a 88	jsr $886a			jsr 	GXFindSprite 				; get the sprite address
.86b5	08		php				php
.86b6	20 ec 87	jsr $87ec			jsr 	GXCloseBitmap
.86b9	28		plp				plp
.86ba	b0 0a		bcs $86c6			bcs		_GXSHExit 					; exit if find failed.
.86bc	ad 5d 06	lda $065d			lda 	GXSizePixels 				; return size
.86bf	a2 c7		ldx #$c7			ldx 	#GXSpriteAcquire & $FF
.86c1	a0 86		ldy #$86			ldy 	#GXSpriteAcquire >> 8
.86c3	20 99 85	jsr $8599			jsr 	GXDrawGraphicElement
.86c6					_GXSHExit:
.86c6	60		rts				rts
.86c7					GXSpriteAcquire:
.86c7	ad 3d 06	lda $063d			lda 	GXSpritePage				; point to base page
.86ca	85 0b		sta $0b				sta 	GXEditSlot
.86cc	86 36		stx $36				stx 	zTemp0 						; row number x 1,2,3,4
.86ce	a9 00		lda #$00			lda 	#0
.86d0	ae 5e 06	ldx $065e			ldx 	GXSizeBits
.86d3					_GXTimesRowNumber:
.86d3	18		clc				clc
.86d4	65 36		adc $36				adc 	zTemp0
.86d6	ca		dex				dex
.86d7	10 fa		bpl $86d3			bpl 	_GXTimesRowNumber
.86d9	64 37		stz $37				stz 	gxzTemp0+1
.86db	0a		asl a				asl 	a 							; row x 2,4,6,8
.86dc	26 37		rol $37				rol 	gxzTemp0+1
.86de	0a		asl a				asl 	a 							; row x 4,8,12,16
.86df	26 37		rol $37				rol 	gxzTemp0+1
.86e1	0a		asl a				asl 	a 							; row x 8,16,24,32
.86e2	26 37		rol $37				rol 	gxzTemp0+1
.86e4	85 36		sta $36				sta 	gxzTemp0
.86e6	18		clc				clc 								; add base address.
.86e7	a5 36		lda $36				lda 	gxzTemp0
.86e9	6d 60 06	adc $0660			adc 	GXSpriteOffset
.86ec	85 36		sta $36				sta 	gxzTemp0
.86ee	a5 37		lda $37				lda 	gxzTemp0+1
.86f0	6d 61 06	adc $0661			adc 	GXSpriteOffset+1
.86f3					_GXSAFindPage:
.86f3	c9 20		cmp #$20			cmp 	#$20 						; on this page
.86f5	90 06		bcc $86fd			bcc 	_GXSAFoundPage
.86f7	e9 20		sbc #$20			sbc 	#$20 						; forward one page
.86f9	e6 0b		inc $0b				inc 	GXEditSlot
.86fb	80 f6		bra $86f3			bra 	_GXSAFindPage
.86fd					_GXSAFoundPage:
.86fd	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; physical address of page.
.86ff	85 37		sta $37				sta 	gxzTemp0+1 					; gxzTemp0 now points to the page
.8701	a0 00		ldy #$00			ldy 	#0
.8703					_GXSACopyLoop:
.8703	b1 36		lda ($36),y			lda 	(gxzTemp0),y
.8705	99 f8 05	sta $05f8,y			sta 	gxPixelBuffer,y
.8708	c8		iny				iny
.8709	cc 5d 06	cpy $065d			cpy 	GXSizePixels
.870c	d0 f5		bne $8703			bne 	_GXSACopyLoop
.870e	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/sprite.asm

.870f					GXSelect:
.870f	ad 3a 06	lda $063a			lda 	gxSpritesOn
.8712	f0 1f		beq $8733			beq 	_GXSFail
.8714	a5 36		lda $36				lda 	gxzTemp0 					; illegal sprite #
.8716	c9 40		cmp #$40			cmp 	#64
.8718	b0 19		bcs $8733			bcs 	_GXSFail
.871a	a4 37		ldy $37				ldy 	gxzTemp0+1 					; control value.
.871c	a9 00		lda #$00			lda  	#0 							; multiply sprite # x 8 => A
.871e	06 36		asl $36				asl 	gxzTemp0
.8720	06 36		asl $36				asl 	gxzTemp0
.8722	06 36		asl $36				asl 	gxzTemp0
.8724	2a		rol a				rol 	a
.8725	69 d9		adc #$d9			adc 	#$D9 						; sprite area
.8727	8d 47 06	sta $0647			sta 	GSCurrentSprite+1 			; address to GSCurrentSprite and gxzTemp
.872a	85 37		sta $37				sta 	gxzTemp0+1
.872c	a5 36		lda $36				lda 	gxzTemp0
.872e	8d 46 06	sta $0646			sta 	GSCurrentSprite
.8731	18		clc				clc
.8732	60		rts				rts
.8733					_GXSFail:
.8733	38		sec				sec
.8734	60		rts				rts
.8735					GXSelectImage:
.8735	ad 3a 06	lda $063a			lda 	gxSpritesOn
.8738	f0 63		beq $879d			beq 	_GXSIFail
.873a	ad 47 06	lda $0647			lda 	GSCurrentSprite+1 			; check sprite selected
.873d	f0 5e		beq $879d			beq 	_GXSIFail
.873f	64 01		stz $01				stz 	1
.8741	a5 37		lda $37				lda 	gxzTemp0+1 					; push show/hide on the stack.
.8743	d0 45		bne $878a			bne 	_GXSIHide
.8745	a5 36		lda $36				lda 	gxzTemp0 					; sprite image
.8747	48		pha				pha
.8748	20 db 87	jsr $87db			jsr 	GXOpenBitmap
.874b	68		pla				pla
.874c	20 6a 88	jsr $886a			jsr 	GXFindSprite
.874f	b0 49		bcs $879a			bcs 	_GXSICloseFail 				; no image
.8751	a0 01		ldy #$01			ldy 	#1
.8753	ad 46 06	lda $0646			lda 	GSCurrentSprite
.8756	85 36		sta $36				sta 	gxzTemp0
.8758	ad 47 06	lda $0647			lda 	GSCurrentSprite+1
.875b	85 37		sta $37				sta 	gxzTemp0+1
.875d	ad 60 06	lda $0660			lda 	GXSpriteOffset
.8760	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.8762	18		clc				clc
.8763	ad 61 06	lda $0661			lda 	GXSpriteOffset+1
.8766	6d 48 06	adc $0648			adc 	GXSpriteOffsetBase
.8769	c8		iny				iny
.876a	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.876c	ad 49 06	lda $0649			lda 	GXSpriteOffsetBase+1
.876f	69 00		adc #$00			adc 	#0
.8771	c8		iny				iny
.8772	91 36		sta ($36),y			sta	 	(gxzTemp0),y
.8774	ad 5e 06	lda $065e			lda 	GXSizeBits 					; get raw size
.8777	49 03		eor #$03			eor 	#3 							; make it right (00=32 etc.)
.8779	2a		rol a				rol 	a 							; x 2
.877a	0a		asl a				asl 	a 							; x 4
.877b	0a		asl a				asl 	a 							; x 8
.877c	0a		asl a				asl 	a 							; x 16
.877d	0d 5f 06	ora $065f			ora 	GXSpriteLUT 						; Or with LUT
.8780	0a		asl a				asl 	a 							; 1 shift
.8781	09 01		ora #$01			ora 	#1 							; enable sprite.
.8783	92 36		sta ($36)			sta 	(gxzTemp0) 					; and write back
.8785	20 ec 87	jsr $87ec			jsr 	GXCloseBitmap
.8788	18		clc				clc
.8789	60		rts				rts
.878a					_GXSIHide:
.878a	ad 46 06	lda $0646			lda 	GSCurrentSprite
.878d	85 36		sta $36				sta 	gxzTemp0
.878f	ad 47 06	lda $0647			lda 	GSCurrentSprite+1
.8792	85 37		sta $37				sta 	gxzTemp0+1
.8794	a9 00		lda #$00			lda 	#0
.8796	92 36		sta ($36)			sta 	(gxzTemp0)
.8798	18		clc				clc
.8799	60		rts				rts
.879a					_GXSICloseFail:
.879a	20 ec 87	jsr $87ec			jsr 	GXCloseBitmap
.879d					_GXSIFail:
.879d	38		sec				sec
.879e	60		rts				rts
.879f					GXMoveSprite:
.879f	ad 3a 06	lda $063a			lda 	gxSpritesOn
.87a2	f0 35		beq $87d9			beq 	_GXSIFail
.87a4	ad 47 06	lda $0647			lda 	GSCurrentSprite+1 			; check sprite selected
.87a7	f0 30		beq $87d9			beq 	_GXSIFail
.87a9	85 37		sta $37				sta 	gxzTemp0+1
.87ab	a0 04		ldy #$04			ldy 	#4
.87ad	ad 46 06	lda $0646			lda 	GSCurrentSprite
.87b0	85 36		sta $36				sta 	gxzTemp0
.87b2	a9 40		lda #$40			lda 	#64 						; calculate 32-SpriteSize/2 (actually (64-SpriteSize)/2)
.87b4	38		sec				sec
.87b5	ed 5d 06	sbc $065d			sbc 	GXSizePixels
.87b8	4a		lsr a				lsr 	a
.87b9	48		pha				pha
.87ba	18		clc				clc
.87bb	6d 32 06	adc $0632			adc 	gxX0						; copy position.
.87be	91 36		sta ($36),y			sta 	(gxzTemp0),y
.87c0	c8		iny				iny
.87c1	ad 33 06	lda $0633			lda 	gxX0+1
.87c4	69 00		adc #$00			adc 	#0
.87c6	91 36		sta ($36),y			sta 	(gxzTemp0),y
.87c8	c8		iny				iny
.87c9	68		pla				pla
.87ca	18		clc				clc
.87cb	6d 34 06	adc $0634			adc 	gxY0
.87ce	91 36		sta ($36),y			sta 	(gxzTemp0),y
.87d0	a9 00		lda #$00			lda 	#0
.87d2	69 00		adc #$00			adc 	#0
.87d4	c8		iny				iny
.87d5	91 36		sta ($36),y			sta 	(gxzTemp0),y
.87d7	18		clc				clc
.87d8	60		rts				rts
.87d9					_GXSIFail:
.87d9	38		sec				sec
.87da	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./utility/access.asm

.87db					GXOpenBitmap:
.87db	78		sei				sei 								; no interrupts here
.87dc	a5 00		lda $00				lda 	0 							; save original MMU Control register
.87de	8d 44 06	sta $0644			sta 	gxOriginalMMUSetting
.87e1	a9 80		lda #$80			lda 	#GXMappingLUT*16+$80+GXMappingLUT
.87e3	85 00		sta $00				sta 	0
.87e5	a5 0b		lda $0b				lda 	GXEditSlot 				; Save the original LUT slot value
.87e7	8d 43 06	sta $0643			sta 	gxOriginalLUTValue
.87ea	58		cli				cli
.87eb	60		rts				rts
.87ec					GXCloseBitmap:
.87ec	78		sei				sei
.87ed	ad 43 06	lda $0643			lda 	gxOriginalLUTValue 			; restore LUT slot value
.87f0	85 0b		sta $0b				sta 	GXEditSlot
.87f2	ad 44 06	lda $0644			lda 	gxOriginalMMUSetting 		; restore MMU Control register
.87f5	85 00		sta $00				sta 	0
.87f7	58		cli				cli
.87f8	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./utility/calculate.asm

.87f9					GXPositionCalc:
.87f9	a5 36		lda $36				lda 	gxzTemp0 					; save temp memory slot
.87fb	48		pha				pha
.87fc	ad 34 06	lda $0634			lda 	GXY0 						; gxzScreen = Y0
.87ff	85 3c		sta $3c				sta 	gxzScreen
.8801	64 3d		stz $3d				stz 	gxzScreen+1
.8803	06 3c		asl $3c				asl 	gxzScreen 						; gxzScreen = Y0 * 4
.8805	26 3d		rol $3d				rol 	gxzScreen+1
.8807	06 3c		asl $3c				asl 	gxzScreen
.8809	26 3d		rol $3d				rol 	gxzScreen+1
.880b	18		clc				clc 								; gxzScreen = Y0 * 5, as it's still in A
.880c	65 3c		adc $3c				adc 	gxzScreen
.880e	85 3c		sta $3c				sta 	gxzScreen
.8810	90 02		bcc $8814			bcc 	_GXPCNoCarry
.8812	e6 3d		inc $3d				inc 	gxzScreen+1
.8814					_GXPCNoCarry:
.8814	06 3c		asl $3c				asl 	gxzScreen 						; now Y0 * 10. Needs to be multiplied by another
.8816	26 3d		rol $3d				rol 	gxzScreen+1 					; 32. At this point the MSB contains the offset
.8818	a5 3d		lda $3d				lda	 	gxzScreen+1 					; so save this in zTemp0 and zero it.
.881a	85 36		sta $36				sta 	gxzTemp0
.881c	64 3d		stz $3d				stz 	gxzScreen+1
.881e	a9 05		lda #$05			lda 	#5 							; now multiply by 32, this puts this in the range 0..8191
.8820					_GXPCMultiply32:
.8820	06 3c		asl $3c				asl 	gxzScreen
.8822	26 3d		rol $3d				rol 	gxzScreen+1
.8824	3a		dec a				dec 	a
.8825	d0 f9		bne $8820			bne 	_GXPCMultiply32
.8827	18		clc				clc
.8828	ad 32 06	lda $0632			lda 	GXX0 						; add X to this value, put the result in gsOffset, gxzScreen has to be on a page boundary
.882b	65 3c		adc $3c				adc 	gxzScreen
.882d	8d 45 06	sta $0645			sta 	gsOffset
.8830	ad 33 06	lda $0633			lda 	GXX0+1
.8833	65 3d		adc $3d				adc 	gxzScreen+1
.8835	c9 20		cmp #$20			cmp 	#$20 						; has it overflowed into the next one ?
.8837	90 04		bcc $883d			bcc 	_GXPCNoOverflow
.8839	29 1f		and #$1f			and 	#$1F 						; fix it up
.883b	e6 36		inc $36				inc 	gxzTemp0 					; add 1 to the page number
.883d					_GXPCNoOverflow:
.883d	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; make it the address mapped in.
.883f	85 3d		sta $3d				sta 	gxzScreen+1
.8841	64 3c		stz $3c				stz 	gxzScreen
.8843	18		clc				clc
.8844	a5 36		lda $36				lda 	gxzTemp0 					; get the page number
.8846	6d 3c 06	adc $063c			adc 	gxBasePage 					; by adding the base page
.8849	85 0b		sta $0b				sta 	GXEditSlot 				; and map it into memory.
.884b	68		pla				pla
.884c	85 36		sta $36				sta 	gxzTemp0
.884e	60		rts				rts
.884f					GXMovePositionDown:
.884f	18		clc				clc 								; add 320 to offset/temp+1
.8850	ad 45 06	lda $0645			lda 	gsOffset
.8853	69 40		adc #$40			adc 	#64
.8855	8d 45 06	sta $0645			sta 	gsOffset
.8858	a5 3d		lda $3d				lda 	gxzScreen+1
.885a	69 01		adc #$01			adc 	#1
.885c	85 3d		sta $3d				sta 	gxzScreen+1
.885e	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page
.8860	90 07		bcc $8869			bcc 	_GXMPDExit
.8862	38		sec				sec  								; next page
.8863	e9 20		sbc #$20			sbc 	#$20
.8865	85 3d		sta $3d				sta 	gxzScreen+1
.8867	e6 0b		inc $0b				inc 	GXEditSlot
.8869					_GXMPDExit:
.8869	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./utility/find.asm

.886a					GXFindSprite:
.886a	aa		tax				tax
.886b	ad 3d 06	lda $063d			lda 	GXSpritePage 				; access the base page of the sprite
.886e	85 0b		sta $0b				sta 	GXEditSlot
.8870	bd 00 61	lda $6100,x			lda 	GXMappingAddress+256,x 		; check a valid sprite
.8873	1d 00 60	ora $6000,x			ora 	GXMappingAddress,x
.8876	f0 33		beq $88ab			beq 	_GXFSFail
.8878	bd 00 61	lda $6100,x			lda 	GXMappingAddress+256,x 		; MSB
.887b	8d 61 06	sta $0661			sta 	GXSpriteOffset+1
.887e	bd 00 60	lda $6000,x			lda 	GXMappingAddress,x 			; LSB
.8881	48		pha				pha 								; save twice
.8882	48		pha				pha
.8883	29 03		and #$03			and 	#3 							; get sprite size
.8885	8d 5e 06	sta $065e			sta 	GXSizeBits 					; save raw (0-3)
.8888	aa		tax				tax
.8889	bd ad 88	lda $88ad,x			lda 	_GXFXSSTTable,x 			; read sprite size
.888c	8d 5d 06	sta $065d			sta 	GXSizePixels 					; save (8/16/24/32)
.888f	68		pla				pla 								; get LUT
.8890	4a		lsr a				lsr		a
.8891	4a		lsr a				lsr		a
.8892	29 03		and #$03			and 	#3
.8894	8d 5f 06	sta $065f			sta 	GXSpriteLUT
.8897	68		pla				pla 								; address, neeeds to be x 4
.8898	29 f0		and #$f0			and 	#$F0
.889a	8d 60 06	sta $0660			sta 	GXSpriteOffset
.889d	0e 60 06	asl $0660			asl 	GXSpriteOffset
.88a0	2e 61 06	rol $0661			rol 	GXSpriteOffset+1
.88a3	0e 60 06	asl $0660			asl 	GXSpriteOffset
.88a6	2e 61 06	rol $0661			rol 	GXSpriteOffset+1
.88a9	18		clc				clc
.88aa	60		rts				rts
.88ab					_GXFSFail:
.88ab	38		sec				sec
.88ac	60		rts				rts
.88ad					_GXFXSSTTable:
>88ad	08 10 18 20					.byte 	8,16,24,32
.065d					GXSizePixels:
>065d							.fill 	1
.065e					GXSizeBits:
>065e							.fill 	1
.065f					GXSpriteLUT:
>065f							.fill 	1
.0660					GXSpriteOffset:
>0660							.fill 	2

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./utility/sort.asm

.88b1					GXSortXY:
.88b1	20 cf 88	jsr $88cf			jsr 	GXSortY 					; will be sorted on Y now
.88b4	ad 32 06	lda $0632			lda 	gxX0 						; compare X0 v X1
.88b7	cd 36 06	cmp $0636			cmp 	gxX1
.88ba	ad 33 06	lda $0633			lda 	gXX0+1
.88bd	ed 37 06	sbc $0637			sbc 	gXX1+1
.88c0	90 0c		bcc $88ce			bcc 	_GXSXYExit 					; X0 < X1 exit
.88c2	a2 00		ldx #$00			ldx 	#0 							; swap them over
.88c4	a0 04		ldy #$04			ldy 	#4
.88c6	20 e3 88	jsr $88e3			jsr 	GXSwapXY
.88c9	e8		inx				inx
.88ca	c8		iny				iny
.88cb	20 e3 88	jsr $88e3			jsr 	GXSwapXY
.88ce					_GXSXYExit:
.88ce	60		rts				rts
.88cf					GXSortY:
.88cf	ad 34 06	lda $0634			lda 	gxY0 						; if Y0 >= Y1
.88d2	cd 38 06	cmp $0638			cmp 	gxY1
.88d5	90 0b		bcc $88e2			bcc 	_GXSYSorted
.88d7	a2 03		ldx #$03			ldx 	#3 							; swap 3-0
.88d9	a0 07		ldy #$07			ldy 	#7 							; with 4-7
.88db					_GXSwap1:
.88db	20 e3 88	jsr $88e3			jsr 	GXSwapXY
.88de	88		dey				dey
.88df	ca		dex				dex
.88e0	10 f9		bpl $88db			bpl 	_GXSwap1
.88e2					_GXSYSorted:
.88e2	60		rts				rts
.88e3					GXSwapXY:
.88e3	bd 32 06	lda $0632,x			lda 	gxX0,x
.88e6	48		pha				pha
.88e7	b9 32 06	lda $0632,y			lda 	gxX0,y
.88ea	9d 32 06	sta $0632,x			sta 	gxX0,x
.88ed	68		pla				pla
.88ee	99 32 06	sta $0632,y			sta 	gxX0,y
.88f1	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Return to file: ./common/aa.system/00start.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/assembler.asm

.88f2					AssembleGroup1:
.88f2	a9 ff		lda #$ff			lda 	#$FF
.88f4	8d a5 04	sta $04a5			sta 	ModeMask 					; initialise the mode mask - all for all
.88f7	80 02		bra $88fb			bra 	AsmGroup12
.88f9					AssembleGroup2:
.88f9	a5 00		lda $00				lda 	$00
.88fb					AsmGroup12:
.88fb	8d a3 04	sta $04a3			sta 	IsGroup1 					; save the 'group 1' flag
.88fe	68		pla				pla 								; pop the return address to access the information following.
.88ff	fa		plx				plx
.8900	20 89 89	jsr $8989			jsr 	AccessParameters 			; get opcode and save as base
.8903	8d a4 04	sta $04a4			sta 	BaseOpcode
.8906	ad a3 04	lda $04a3			lda 	IsGroup1 					; skip if group 1 as we don't have a complex mask.
.8909	d0 08		bne $8913			bne 	_AG12HaveMask
.890b	a9 02		lda #$02			lda 	#2 							; if group 2 the second parameter is the mask
.890d	20 91 89	jsr $8991			jsr 	GetParameter		 		; e.g. which modes are supported for this operand
.8910	8d a5 04	sta $04a5			sta 	ModeMask
.8913					_AG12HaveMask:
.8913	20 cc 8a	jsr $8acc			jsr 	TypeAndCalculateOperand 	; get zero page type
.8916	da		phx				phx 								; save found address mode
.8917	20 f5 89	jsr $89f5			jsr 	AssembleModeX
.891a	fa		plx				plx  								; restore address mode
.891b	b0 0b		bcs $8928			bcs 	_AG12Exit
.891d	20 29 89	jsr $8929			jsr 	PromoteToAbsolute  			; promote ZP to ABS and try that
.8920	20 f5 89	jsr $89f5			jsr 	AssembleModeX
.8923	b0 03		bcs $8928			bcs 	_AG12Exit
.8925	4c 57 b4	jmp $b457			jmp 	SyntaxError 				; can't do either, so must be wrong mode/operand.
.8928					_AG12Exit:
.8928	60		rts				rts
.8929					PromoteToAbsolute:
.8929	a9 6c		lda #$6c			lda 	#AM_ABS 					; lda xx
.892b	e0 e4		cpx #$e4			cpx 	#AM_ZEROPAGE
.892d	f0 19		beq $8948			beq 	_PTADo
.892f	a9 7c		lda #$7c			lda 	#AM_ABSX 					; lda xx,X
.8931	e0 f4		cpx #$f4			cpx 	#AM_ZEROX
.8933	f0 13		beq $8948			beq 	_PTADo
.8935	a9 78		lda #$78			lda 	#AM_ABSY 					; lda xx,Y
.8937	e0 80		cpx #$80			cpx 	#AM_ZEROY
.8939	f0 0d		beq $8948			beq 	_PTADo
.893b	a9 01		lda #$01			lda 	#AM_INDABS 					; lda (xx) (jump)
.893d	e0 d1		cpx #$d1			cpx 	#AM_IND
.893f	f0 07		beq $8948			beq 	_PTADo
.8941	a9 02		lda #$02			lda 	#AM_INDABSX 				; lda (xx,x) (jump)
.8943	e0 c0		cpx #$c0			cpx 	#AM_INDX
.8945	f0 01		beq $8948			beq 	_PTADo
.8947	60		rts				rts
.8948					_PTADo:
.8948	aa		tax				tax
.8949	60		rts				rts
.894a					AssembleGroup3:
.894a	68		pla				pla 								; get parameters, which is just the opcode.
.894b	fa		plx				plx
.894c	20 89 89	jsr $8989			jsr 	AccessParameters 			; get and output opcode
.894f	20 a1 89	jsr $89a1			jsr 	AssemblerWriteByte
.8952	20 30 8b	jsr $8b30			jsr 	CalculateOperand 			; get a 16 bit operand
.8955	ad 08 04	lda $0408			lda 	NSMantissa0 				; calculate the offset
.8958	38		sec				sec
.8959	ed 9e 04	sbc $049e			sbc 	AssemblerAddress
.895c	48		pha				pha 								; LSB in A
.895d	ad 10 04	lda $0410			lda 	NSMantissa1
.8960	ed 9f 04	sbc $049f			sbc 	AssemblerAddress+1
.8963	aa		tax				tax 								; MSB in X
.8964	68		pla				pla
.8965	18		clc				clc 								; $80 to easy check $80-$7F, plus 1 for offset error
.8966	69 7f		adc #$7f			adc 	#$7F
.8968	90 01		bcc $896b			bcc 	_AG3NoCarry
.896a	e8		inx				inx
.896b					_AG3NoCarry:
.896b	38		sec				sec 								; fix back and write out anyways.
.896c	e9 80		sbc #$80			sbc 	#$80
.896e	20 a1 89	jsr $89a1			jsr 	AssemblerWriteByte
.8971	e0 00		cpx #$00			cpx 	#0 							; was it in range
.8973	f0 0a		beq $897f			beq 	_AG3Exit
.8975	ad a0 04	lda $04a0			lda 	AssemblerControl 			; are we allowing bad values ?
.8978	29 01		and #$01			and 	#1
.897a	f0 03		beq $897f			beq 	_AG3Exit
.897c	4c 5c b4	jmp $b45c			jmp 	RangeError 					; no, branch is out of range
.897f					_AG3Exit:
.897f	60		rts				rts
.8980					AssembleGroup4:
.8980	68		pla				pla 								; pop address
.8981	fa		plx				plx
.8982	20 89 89	jsr $8989			jsr 	AccessParameters 			; access and get first
.8985	20 a1 89	jsr $89a1			jsr 	AssemblerWriteByte 			; output it.
.8988	60		rts				rts
.8989					AccessParameters:
.8989	8d a1 04	sta $04a1			sta 	ParamStart
.898c	8e a2 04	stx $04a2			stx 	ParamStart+1
.898f	a9 01		lda #$01			lda 	#1
.8991					GetParameter:
.8991	5a		phy				phy
.8992	a8		tay				tay
.8993	ad a1 04	lda $04a1			lda 	ParamStart
.8996	85 36		sta $36				sta 	zTemp0
.8998	ad a2 04	lda $04a2			lda 	ParamStart+1
.899b	85 37		sta $37				sta 	zTemp0+1
.899d	b1 36		lda ($36),y			lda 	(zTemp0),y
.899f	7a		ply				ply
.89a0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/aswrite.asm

.89a1					AssemblerWriteByte:
.89a1	48		pha			pha
.89a2	ad a0 04	lda $04a0		lda 	AssemblerControl 				; check printing bytes ?
.89a5	29 02		and #$02		and 	#2
.89a7	f0 1b		beq $89c4		beq 	_AWBNoPrint
.89a9	ad 9f 04	lda $049f		lda		AssemblerAddress+1 				; print address
.89ac	20 df 89	jsr $89df		jsr 	PrintHex
.89af	ad 9e 04	lda $049e		lda		AssemblerAddress
.89b2	20 df 89	jsr $89df		jsr 	PrintHex
.89b5	a9 20		lda #$20		lda 	#' '
.89b7	20 11 b6	jsr $b611		jsr 	EXTPrintCharacter
.89ba	68		pla			pla 									; print byte
.89bb	48		pha			pha
.89bc	20 df 89	jsr $89df		jsr 	PrintHex
.89bf	a9 0d		lda #$0d		lda 	#13
.89c1	20 11 b6	jsr $b611		jsr 	EXTPrintCharacter
.89c4					_AWBNoPrint:
.89c4	ad 9e 04	lda $049e		lda		AssemblerAddress				; copy address to zTemp0
.89c7	85 36		sta $36			sta 	zTemp0
.89c9	ad 9f 04	lda $049f		lda		AssemblerAddress+1
.89cc	f0 0e		beq $89dc		beq 	_AWBRange
.89ce	85 37		sta $37			sta 	zTemp0+1
.89d0	68		pla			pla 									; write byte out
.89d1	92 36		sta ($36)		sta 	(zTemp0)
.89d3	ee 9e 04	inc $049e		inc 	AssemblerAddress 				; bump address
.89d6	d0 03		bne $89db		bne 	_AWBNoCarry
.89d8	ee 9f 04	inc $049f		inc 	AssemblerAddress+1
.89db					_AWBNoCarry:
.89db	60		rts			rts
.89dc					_AWBRange:
.89dc	4c 5c b4	jmp $b45c		jmp 	RangeError
.89df					PrintHex:
.89df	48		pha				pha
.89e0	4a		lsr a				lsr 	a
.89e1	4a		lsr a				lsr 	a
.89e2	4a		lsr a				lsr 	a
.89e3	4a		lsr a				lsr 	a
.89e4	20 e8 89	jsr $89e8			jsr 	_PrintNibble
.89e7	68		pla				pla
.89e8					_PrintNibble:
.89e8	29 0f		and #$0f			and 	#15
.89ea	c9 0a		cmp #$0a			cmp 	#10
.89ec	90 02		bcc $89f0			bcc 	_NoShift
.89ee	69 06		adc #$06			adc 	#6
.89f0					_NoShift:
.89f0	69 30		adc #$30			adc 	#48
.89f2	4c 11 b6	jmp $b611			jmp 	EXTPrintCharacter

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/instruction.asm

.89f5					AssembleModeX:
.89f5	5a		phy				phy
.89f6	ad a3 04	lda $04a3			lda 	IsGroup1
.89f9	f0 17		beq $8a12			beq 	_AMXGroup2
.89fb	8a		txa				txa 							; is it in group # 1
.89fc	29 40		and #$40			and 	#AM_ISG1
.89fe	f0 50		beq $8a50			beq 	_AMXFail 				; no, give up.
.8a00	8a		txa				txa 							; get back.
.8a01	29 1f		and #$1f			and 	#$1F 					; this is now the offset.
.8a03	e0 e0		cpx #$e0			cpx 	#AM_IMMEDIATE 			; if not immediate, we can continue.
.8a05	d0 22		bne $8a29			bne 	_AMXHaveInfo
.8a07	ad a4 04	lda $04a4			lda 	BaseOpcode 				; cannot store immediate.
.8a0a	c9 81		cmp #$81			cmp 	#$81
.8a0c	f0 42		beq $8a50			beq 	_AMXFail
.8a0e	a9 08		lda #$08			lda 	#8 						; if immediate we use offset 8.
.8a10	80 17		bra $8a29			bra 	_AMXHaveInfo 			; odd design decision there.
.8a12					_AMXGroup2:
.8a12	8a		txa				txa 							; is it in group 2 ?
.8a13	29 20		and #$20			and 	#AM_ISG2
.8a15	f0 39		beq $8a50			beq 	_AMXFail 				; no, give up.
.8a17	8a		txa				txa 							; get the offset into Y
.8a18	29 1f		and #$1f			and 	#$1F
.8a1a	4a		lsr a				lsr 	a 						; make it 0-7.
.8a1b	4a		lsr a				lsr  	a
.8a1c	a8		tay				tay
.8a1d	ad a5 04	lda $04a5			lda 	ModeMask 				; shift the modemask left so you can check it against the requested offset
.8a20					_AMXCheckOkay:
.8a20	0a		asl a				asl 	a 						; shift modemask left enough times to check legitimate.
.8a21	88		dey				dey
.8a22	10 fc		bpl $8a20			bpl 	_AMXCheckOkay
.8a24	90 2a		bcc $8a50			bcc 	_AMXFail 				; not allowed.
.8a26	8a		txa				txa  							; get mask back
.8a27	29 1f		and #$1f			and 	#$1F
.8a29					_AMXHaveInfo:
.8a29	e0 00		cpx #$00			cpx 	#$00 					; does it *require* an 8 bit operand
.8a2b	10 05		bpl $8a32			bpl 	_AMXAnySize 			; checking bit 7, the zero page opcode flag.
.8a2d	ac 10 04	ldy $0410			ldy 	NSMantissa1 			; fail if it is outside range, e.g. the MSB is set.
.8a30	d0 1e		bne $8a50			bne 	_AMXFail
.8a32					_AMXAnySize:
.8a32	18		clc				clc 							; add offset to the base opcode
.8a33	6d a4 04	adc $04a4			adc 	BaseOpcode
.8a36					_AMXOutputCode:
.8a36	20 a1 89	jsr $89a1			jsr 	AssemblerWriteByte 		; write the opcode out.
.8a39	e0 28		cpx #$28			cpx 	#AM_ACC 				; A mode (e.g. ASL A)
.8a3b	f0 10		beq $8a4d			beq 	_AMXExit
.8a3d	ad 08 04	lda $0408			lda 	NSMantissa0 				; write LSB operand
.8a40	20 a1 89	jsr $89a1			jsr 	AssemblerWriteByte
.8a43	e0 00		cpx #$00			cpx 	#$00 					; zeropage ?
.8a45	30 06		bmi $8a4d			bmi 	_AMXExit
.8a47	ad 10 04	lda $0410			lda 	NSMantissa1 			; write MSB operand
.8a4a	20 a1 89	jsr $89a1			jsr 	AssemblerWriteByte
.8a4d					_AMXExit:
.8a4d	7a		ply				ply
.8a4e	38		sec				sec
.8a4f	60		rts				rts
.8a50					_AMXFail:
.8a50	a0 00		ldy #$00			ldy 	#0
.8a52					_AMXCheckOddities:
.8a52	8a		txa				txa
.8a53	d9 7b 8a	cmp $8a7b,y			cmp 	ExtraOpcode+2,y 		; match address mode
.8a56	d0 16		bne $8a6e			bne 	_AMXCONext
.8a58	b9 79 8a	lda $8a79,y			lda 	ExtraOpcode+0,y 		; do the base opcodes match
.8a5b	cd a4 04	cmp $04a4			cmp 	BaseOpcode
.8a5e	d0 0e		bne $8a6e			bne 	_AMXCONext
.8a60	e0 00		cpx #$00			cpx 	#$00 					; requires zero page ?
.8a62	10 05		bpl $8a69			bpl 	_AMXCONotZero
.8a64	ad 10 04	lda $0410			lda 	NSMantissa1
.8a67	d0 05		bne $8a6e			bne 	_AMXCONext
.8a69					_AMXCONotZero:
.8a69	b9 7a 8a	lda $8a7a,y			lda 	ExtraOpcode+1,y 		; get new opcode
.8a6c	80 c8		bra $8a36			bra 	_AMXOutputCode 			; and assemble it
.8a6e					_AMXCONext:
.8a6e	c8		iny				iny
.8a6f	c8		iny				iny
.8a70	c8		iny				iny
.8a71	b9 79 8a	lda $8a79,y			lda 	ExtraOpcode+0,y 		; end of table
.8a74	d0 dc		bne $8a52			bne 	_AMXCheckOddities
.8a76					_AMXCOFail:
.8a76	7a		ply				ply
.8a77	18		clc				clc
.8a78	60		rts				rts
.8a79					ExtraOpcode:
>8a79	40 6c 01					.byte $40,$6c,AM_INDABS 	; jmp
>8a7c	40 7c 02					.byte $40,$7C,AM_INDABSX 	; jmp
>8a7f	a2 be 78					.byte $a2,$BE,AM_ABSY 		; ldx
>8a82	a2 b6 80					.byte $a2,$B6,AM_ZEROY 		; ldx
>8a85	82 96 80					.byte $82,$96,AM_ZEROY 		; stx
>8a88	e2 1a 28					.byte $e2,$1a,AM_ACC 		; inc
>8a8b	c2 3a 28					.byte $c2,$3a,AM_ACC 		; dec
>8a8e	20 89 e0					.byte $20,$89,AM_IMMEDIATE 	; bit
>8a91	60 9c 6c					.byte $60,$9c,AM_ABS 		; stz
>8a94	60 9e 7c					.byte $60,$9e,AM_ABSX 		; stz
>8a97	00						.byte $00

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/label.asm

.8a98					LabelHere:
.8a98	c8		iny				iny 								; skip .
.8a99	a2 00		ldx #$00			ldx 	#0 							; get a term
.8a9b	20 cd a0	jsr $a0cd			jsr 	EvaluateTerm 				; get a term
.8a9e	ad 00 04	lda $0400			lda 	NSStatus 					; needs to be an integer reference.
.8aa1	c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.8aa3	d0 24		bne $8ac9			bne 	_ALType
.8aa5	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy reference address to zTemp0
.8aa8	85 36		sta $36				sta 	zTemp0
.8aaa	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8aad	85 37		sta $37				sta 	zTemp0+1
.8aaf	5a		phy				phy 								; copy address in.
.8ab0	a0 01		ldy #$01			ldy 	#1
.8ab2	ad 9e 04	lda $049e			lda	 	AssemblerAddress
.8ab5	92 36		sta ($36)			sta 	(zTemp0)
.8ab7	ad 9f 04	lda $049f			lda	 	AssemblerAddress+1
.8aba	91 36		sta ($36),y			sta 	(zTemp0),y
.8abc	c8		iny				iny
.8abd	a9 00		lda #$00			lda 	#0
.8abf	91 36		sta ($36),y			sta 	(zTemp0),y
.8ac1	c8		iny				iny
.8ac2	91 36		sta ($36),y			sta 	(zTemp0),y
.8ac4	c8		iny				iny
.8ac5	91 36		sta ($36),y			sta 	(zTemp0),y
.8ac7	7a		ply				ply
.8ac8	60		rts				rts
.8ac9					_ALType:
.8ac9	4c 61 b4	jmp $b461			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/operands.asm

.8acc					TypeAndCalculateOperand:
.8acc	b1 30		lda ($30),y			lda 	(codePtr),y
.8ace	a2 28		ldx #$28			ldx 	#AM_ACC 					; ACC if : or EOL
.8ad0	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.8ad2	f0 5b		beq $8b2f			beq 	_TACOExit
.8ad4	c9 80		cmp #$80			cmp 	#KWC_EOL
.8ad6	f0 57		beq $8b2f			beq 	_TACOExit
.8ad8	c8		iny				iny
.8ad9	a2 e0		ldx #$e0			ldx 	#AM_IMMEDIATE
.8adb	c9 23		cmp #$23			cmp 	#KWD_HASH 					; if hash, then immediate - constant.
.8add	f0 51		beq $8b30			beq 	CalculateOperand
.8adf	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; if ( then check for indirection
.8ae1	f0 1f		beq $8b02			beq 	_TACOIndirect
.8ae3	88		dey				dey 								; undo get of first character
.8ae4	20 30 8b	jsr $8b30			jsr 	CalculateOperand 			; get operand
.8ae7	b1 30		lda ($30),y			lda 	(codePtr),y
.8ae9	a2 e4		ldx #$e4			ldx 	#AM_ZEROPAGE 				; if not, try zero page (then absolute)
.8aeb	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8aed	d0 40		bne $8b2f			bne 	_TACOExit
.8aef	c8		iny				iny
.8af0	20 e0 ad	jsr $ade0			jsr 	TACOCheckXY 				; extract X,Y or 0 (neither) from the variable.
.8af3	a2 f4		ldx #$f4			ldx 	#AM_ZEROX 					; check for X
.8af5	c9 58		cmp #$58			cmp 	#'X'
.8af7	f0 36		beq $8b2f			beq 	_TACOExit
.8af9	a2 80		ldx #$80			ldx 	#AM_ZEROY 					; check for Y
.8afb	c9 59		cmp #$59			cmp 	#'Y'
.8afd	f0 30		beq $8b2f			beq 	_TACOExit
.8aff					_TACOSyntax:
.8aff	4c 57 b4	jmp $b457			jmp 	SyntaxError
.8b02					_TACOIndirect:
.8b02	20 30 8b	jsr $8b30			jsr 	CalculateOperand 			; get the operand
.8b05	b1 30		lda ($30),y			lda 	(codePtr),y
.8b07	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if , then it must be ,X)
.8b09	f0 17		beq $8b22			beq 	_TACOIndX
.8b0b	20 69 ae	jsr $ae69			jsr 	CheckRightBracket  			; otherwise must be ) or ),Y
.8b0e	b1 30		lda ($30),y			lda 	(codePtr),y
.8b10	a2 d1		ldx #$d1			ldx 	#AM_IND
.8b12	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not comma then exit with (xx)
.8b14	d0 19		bne $8b2f			bne 	_TACOExit
.8b16	c8		iny				iny
.8b17	20 e0 ad	jsr $ade0			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.8b1a	c9 59		cmp #$59			cmp 	#'Y' 						; check Y
.8b1c	d0 e1		bne $8aff			bne 	_TACOSyntax
.8b1e	a2 d0		ldx #$d0			ldx 	#AM_INDY
.8b20	80 0d		bra $8b2f			bra 	_TACOExit
.8b22					_TACOIndX:
.8b22	c8		iny				iny
.8b23	20 e0 ad	jsr $ade0			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.8b26	c9 58		cmp #$58			cmp 	#'X' 						; check X
.8b28	d0 d5		bne $8aff			bne 	_TACOSyntax
.8b2a	20 69 ae	jsr $ae69			jsr 	CheckRightBracket			; check )
.8b2d	a2 c0		ldx #$c0			ldx 	#AM_INDX
.8b2f					_TACOExit:
.8b2f	60		rts				rts
.8b30					CalculateOperand:
.8b30	48		pha				pha
.8b31	da		phx				phx
.8b32	a2 00		ldx #$00			ldx 	#0 							; get 16 bit integer in Slot 0
.8b34	20 9e a5	jsr $a59e			jsr 	Evaluate16BitInteger
.8b37	fa		plx				plx
.8b38	68		pla				pla
.8b39	60		rts				rts
.ade0					TACOCheckXY:
.ade0	b1 30		lda ($30),y			lda 	(codePtr),y
.ade2	29 c0		and #$c0			and 	#$C0 						; check it is an identifier reference.
.ade4	c9 40		cmp #$40			cmp 	#$40
.ade6	d0 21		bne $ae09			bne 	_TCXYFail
.ade8	b1 30		lda ($30),y			lda 	(codePtr),y
.adea	18		clc				clc
.adeb	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.aded	85 37		sta $37				sta 	zTemp0+1
.adef	c8		iny				iny
.adf0	b1 30		lda ($30),y			lda 	(codePtr),y
.adf2	c8		iny				iny
.adf3	85 36		sta $36				sta 	zTemp0
.adf5	5a		phy				phy 								; save position
.adf6	a0 02		ldy #$02			ldy 	#2 							; type is integer ?
.adf8	b1 36		lda ($36),y			lda 	(zTemp0),y
.adfa	d0 0c		bne $ae08			bne 	_TCXYPopFail
.adfc	a0 08		ldy #$08			ldy 	#8 							; get first character, should have bit 7 set as also last.
.adfe	b1 36		lda ($36),y			lda 	(zTemp0),y
.ae00	c9 d8		cmp #$d8			cmp 	#'X'+$80 					; should be X or Y
.ae02	f0 08		beq $ae0c			beq 	_TCXYFound
.ae04	c9 d9		cmp #$d9			cmp 	#'Y'+$80
.ae06	f0 04		beq $ae0c			beq 	_TCXYFound
.ae08					_TCXYPopFail:
.ae08	7a		ply				ply
.ae09					_TCXYFail:
.ae09	a9 00		lda #$00			lda 	#0
.ae0b	60		rts				rts
.ae0c					_TCXYFound:
.ae0c	7a		ply				ply 								; restore position
.ae0d	29 7f		and #$7f			and 	#$7F 						; throw bit 7
.ae0f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/editor.asm

.8b3a					EditProgramCode:
.8b3a	ad a8 04	lda $04a8			lda 	TokenLineNumber 			; find the line.
.8b3d	ae a9 04	ldx $04a9			ldx 	TokenLineNumber+1
.8b40	20 85 a6	jsr $a685			jsr 	MemorySearch
.8b43	90 05		bcc $8b4a			bcc 	_EPCNoDelete 				; reached the end don't delete
.8b45	d0 03		bne $8b4a			bne 	_EPCNoDelete 				; found slot but didn't match, no delete
.8b47	20 9c b6	jsr $b69c			jsr 	MemoryDeleteLine 			; delete the line
.8b4a					_EPCNoDelete:
.8b4a	ad aa 04	lda $04aa			lda 	TokenBuffer 				; buffer empty
.8b4d	c9 80		cmp #$80			cmp 	#KWC_EOL
.8b4f	f0 0d		beq $8b5e			beq 	_EPCNoInsert
.8b51	ad a8 04	lda $04a8			lda 	TokenLineNumber 			; find the line - it cannot exist.
.8b54	ae a9 04	ldx $04a9			ldx 	TokenLineNumber+1 			; so this can't fail, it returns some point in the code.
.8b57	20 85 a6	jsr $a685			jsr 	MemorySearch
.8b5a	18		clc				clc 								; insert at this point.
.8b5b	20 d3 b6	jsr $b6d3			jsr 	MemoryInsertLine 			; insert the line
.8b5e					_EPCNoInsert:
.8b5e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/warmstart.asm

.8b5f					WarmStart:
.8b5f	a2 ff		ldx #$ff			ldx 	#$FF
.8b61	9a		txs				txs
.8b62	20 27 b6	jsr $b627			jsr 	EXTInputLine 				; get line to lineBuffer
.8b65	20 61 ab	jsr $ab61			jsr 	TokeniseLine 				; tokenise the line
.8b68	ad a8 04	lda $04a8			lda 	TokenLineNumber 			; line number ?
.8b6b	0d a9 04	ora $04a9			ora 	TokenLineNumber+1
.8b6e	d0 17		bne $8b87			bne 	_WSEditCode 				; if so,edit code.
.8b70	9c a7 04	stz $04a7			stz 	TokenOffset 				; zero offset, meaning it only runs one line.
.8b73	a9 a7		lda #$a7			lda 	#((TokenOffset) & $FF)
.8b75	85 30		sta $30				sta 	codePtr
.8b77	a9 04		lda #$04			lda 	#((TokenOffset) >> 8)
.8b79	85 31		sta $31				sta 	codePtr+1
.8b7b	ad aa 04	lda $04aa			lda 	TokenBuffer 				; nothing to run
.8b7e	c9 80		cmp #$80			cmp 	#KWC_EOL
.8b80	f0 dd		beq $8b5f			beq 	WarmStart
.8b82	20 f2 94	jsr $94f2			jsr 	RUNCodePointerLine 			; execute that line.
.8b85	80 d8		bra $8b5f			bra 	WarmStart
.8b87					_WSEditCode:
.8b87	20 3a 8b	jsr $8b3a			jsr 	EditProgramCode
.8b8a	20 f8 8b	jsr $8bf8			jsr 	ClearCommand
.8b8d	80 d0		bra $8b5f			bra 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assemble.asm

.8b8f					AssembleCommand:
.8b8f	a2 00		ldx #$00			ldx 	#0
.8b91	20 9e a5	jsr $a59e			jsr 	Evaluate16BitInteger 		; start address
.8b94	ad 08 04	lda $0408			lda 	NSMantissa0
.8b97	8d 9e 04	sta $049e			sta 	AssemblerAddress
.8b9a	ad 10 04	lda $0410			lda 	NSMantissa1
.8b9d	8d 9f 04	sta $049f			sta 	AssemblerAddress+1
.8ba0	20 71 ae	jsr $ae71			jsr 	CheckComma
.8ba3	20 be a5	jsr $a5be			jsr 	Evaluate8BitInteger 		; options
.8ba6	ad 08 04	lda $0408			lda 	NSMantissa0
.8ba9	8d a0 04	sta $04a0			sta 	AssemblerControl
.8bac	60		rts				rts
.8bad	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assert.asm

.8bae					AssertCommand:
.8bae	a2 00		ldx #$00			ldx 	#0
.8bb0	20 89 a5	jsr $a589			jsr 	EvaluateInteger 			; the assert test
.8bb3	20 56 a6	jsr $a656			jsr 	NSMIsZero 					; exit if result is non zero.
.8bb6	d0 05		bne $8bbd			bne 	_ACExit
.8bb8	a9 0a		lda #$0a		lda	#10
.8bba	4c eb 99	jmp $99eb		jmp	ErrorHandler
.8bbd					_ACExit:
.8bbd	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/call.asm

.8bbe					CallCommand:
.8bbe	a2 00		ldx #$00			ldx 	#0
.8bc0	20 9e a5	jsr $a59e			jsr 	Evaluate16BitInteger
.8bc3					_CCClear
.8bc3	e8		inx				inx  								; clear 1,2 and 3 (for A X Y)
.8bc4	20 26 a6	jsr $a626			jsr 	NSMSetZero
.8bc7	e0 04		cpx #$04			cpx 	#4
.8bc9	d0 f8		bne $8bc3			bne 	_CCClear
.8bcb	a2 00		ldx #$00			ldx 	#0 							; and keep trying
.8bcd					_CCCParam:
.8bcd	b1 30		lda ($30),y			lda 	(codePtr),y
.8bcf	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8bd1	d0 09		bne $8bdc			bne 	_CCCRun6502
.8bd3	c8		iny				iny 								; skip comma
.8bd4	e8		inx				inx	 								; next level
.8bd5	20 be a5	jsr $a5be			jsr 	Evaluate8BitInteger 		; get A/X/Y
.8bd8	e0 03		cpx #$03			cpx 	#3
.8bda	90 f1		bcc $8bcd			bcc 	_CCCParam 					; done all 3 ?
.8bdc					_CCCRun6502:
.8bdc	5a		phy				phy 								; save position
.8bdd	ad 10 04	lda $0410			lda 	NSMantissa1 				; put address in zTemp0
.8be0	85 37		sta $37				sta 	zTemp0+1
.8be2	ad 08 04	lda $0408			lda 	NSMantissa0
.8be5	85 36		sta $36				sta 	zTemp0
.8be7	ad 09 04	lda $0409			lda 	NSMantissa0+1 				; get registers
.8bea	ae 0a 04	ldx $040a			ldx 	NSMantissa0+2
.8bed	ac 0b 04	ldy $040b			ldy 	NSMantissa0+3
.8bf0	20 f5 8b	jsr $8bf5			jsr 	_CCCZTemp0 					; call zTemp0
.8bf3	7a		ply				ply 								; restore position and exit
.8bf4	60		rts				rts
.8bf5					_CCCZTemp0:
.8bf5	6c 36 00	jmp ($0036)			jmp 	(zTemp0)

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/clear.asm

.8bf8					ClearCommand:
.8bf8	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.8bfa	85 36		sta $36				sta 	0+zTemp0
.8bfc	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.8bfe	85 37		sta $37				sta 	1+zTemp0
.8c00					_ClearZeroLoop:
.8c00	b2 36		lda ($36)			lda 	(zTemp0) 					; end of variables
.8c02	f0 24		beq $8c28			beq 	_ClearZeroEnd
.8c04	a0 03		ldy #$03			ldy 	#3 							; erase the variables
.8c06	a9 00		lda #$00			lda 	#0
.8c08					_ClearOneVariable:
.8c08	91 36		sta ($36),y			sta 	(zTemp0),y
.8c0a	c8		iny				iny
.8c0b	c0 08		cpy #$08			cpy 	#8
.8c0d	d0 f9		bne $8c08			bne 	_ClearOneVariable
.8c0f	a0 02		ldy #$02			ldy 	#2 							; has it been marked procedure
.8c11	b1 36		lda ($36),y			lda 	(zTemp0),y
.8c13	c9 18		cmp #$18			cmp 	#NSTProcedure
.8c15	d0 04		bne $8c1b			bne 	_ClearNotProcedure
.8c17	a9 04		lda #$04			lda 	#NSTInteger+NSBIsArray 		; set it back to an integer array
.8c19	91 36		sta ($36),y			sta 	(zTemp0),y
.8c1b					_ClearNotProcedure:
.8c1b	18		clc				clc 								; go to the next variable
.8c1c	b2 36		lda ($36)			lda 	(zTemp0)
.8c1e	65 36		adc $36				adc 	zTemp0
.8c20	85 36		sta $36				sta 	zTemp0
.8c22	90 dc		bcc $8c00			bcc 	_ClearZeroLoop
.8c24	e6 37		inc $37				inc 	zTemp0+1
.8c26	80 d8		bra $8c00			bra 	_ClearZeroLoop
.8c28					_ClearZeroEnd:
.8c28	18		clc				clc
.8c29	a5 36		lda $36				lda 	zTemp0
.8c2b	69 01		adc #$01			adc 	#1
.8c2d	8d 8c 04	sta $048c			sta 	lowMemPtr
.8c30	a5 37		lda $37				lda 	zTemp0+1
.8c32	69 00		adc #$00			adc 	#0
.8c34	8d 8d 04	sta $048d			sta 	lowMemPtr+1
.8c37	20 3f a7	jsr $a73f			jsr 	StackReset
.8c3a	20 b6 b7	jsr $b7b6			jsr 	StringSystemInitialise
.8c3d	20 f4 98	jsr $98f4			jsr 	ProcedureScan
.8c40	20 ae 94	jsr $94ae			jsr 	Command_Restore
.8c43	9c 9e 04	stz $049e			stz 	AssemblerAddress
.8c46	9c 9f 04	stz $049f			stz 	AssemblerAddress+1
.8c49	9c a0 04	stz $04a0			stz 	AssemblerControl
.8c4c	20 c0 a2	jsr $a2c0			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.8c4f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/commands/cls.asm

.8c50					ClearScreen:
.8c50	5a		phy				phy
.8c51	20 0e b6	jsr $b60e			jsr 	EXTClearScreen
.8c54	7a		ply				ply
.8c55	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/data.asm

.8c56					Command_Data:
.8c56	a9 3a		lda #$3a			lda 	#KWD_COLON 					; advance to colon/EOL
.8c58	a2 80		ldx #$80			ldx 	#KWC_EOL
.8c5a	20 46 99	jsr $9946			jsr 	ScanForward
.8c5d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/dim.asm

.8c5e					DimCommand:
.8c5e	b1 30		lda ($30),y			lda 	(codePtr),y
.8c60	29 c0		and #$c0			and 	#$C0
.8c62	c9 40		cmp #$40			cmp 	#$40
.8c64	d0 7a		bne $8ce0			bne 	_DCSyntax
.8c66	b1 30		lda ($30),y			lda 	(codePtr),y
.8c68	18		clc				clc
.8c69	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8c6b	85 3f		sta $3f				sta 	zaTemp+1
.8c6d	c8		iny				iny
.8c6e	b1 30		lda ($30),y			lda 	(codePtr),y
.8c70	c8		iny				iny
.8c71	85 3e		sta $3e				sta 	zaTemp
.8c73	5a		phy				phy
.8c74	a0 02		ldy #$02			ldy 	#2 						; read type byte
.8c76	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8c78	29 18		and #$18			and 	#NSBTypeMask 			; check it's not a procedure
.8c7a	c9 18		cmp #$18			cmp 	#NSTProcedure
.8c7c	f0 62		beq $8ce0			beq 	_DCSyntax
.8c7e	b1 3e		lda ($3e),y			lda 	(zaTemp),y 				; check it's an array
.8c80	29 04		and #$04			and 	#NSBIsArray
.8c82	f0 64		beq $8ce8			beq 	_DCType
.8c84	a0 04		ldy #$04			ldy 	#4 						; check not already defined
.8c86	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8c88	d0 59		bne $8ce3			bne 	_DCRedefine
.8c8a	7a		ply				ply
.8c8b	20 eb 8c	jsr $8ceb			jsr 	_DCGetSize 				; get array size, check it.
.8c8e	5a		phy				phy
.8c8f	a0 05		ldy #$05			ldy 	#5 						; store in first array size slot
.8c91	91 3e		sta ($3e),y			sta 	(zaTemp),y 				; second will be zero.
.8c93	7a		ply				ply 							; is there a second (e.g. ,x)
.8c94	b1 30		lda ($30),y			lda 	(codePtr),y
.8c96	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8c98	d0 0a		bne $8ca4			bne 	_DCOneDimension
.8c9a	c8		iny				iny 							; skip comma
.8c9b	20 eb 8c	jsr $8ceb			jsr 	_DCGetSize 				; get 2nd array size
.8c9e	5a		phy				phy
.8c9f	a0 06		ldy #$06			ldy 	#6 						; store in 2nd array size
.8ca1	91 3e		sta ($3e),y			sta 	(zaTemp),y
.8ca3	7a		ply				ply
.8ca4					_DCOneDimension:
.8ca4	5a		phy				phy 							; save position
.8ca5	a0 05		ldy #$05			ldy 	#5 						; dimensions + 1 in AX (as zero based)
.8ca7	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8ca9	aa		tax				tax
.8caa	c8		iny				iny
.8cab	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8cad	e8		inx				inx 							; bump them.
.8cae	1a		inc a				inc 	a
.8caf	20 f3 b2	jsr $b2f3			jsr 	Multiply8x8 			; work out the total number of elements -> zTemp0
.8cb2	a5 37		lda $37				lda 	zTemp0+1 				; don't allow more than 8192 elements whatever
.8cb4	29 e0		and #$e0			and 	#$E0
.8cb6	d0 23		bne $8cdb			bne 	_DCSize
.8cb8	a0 02		ldy #$02			ldy 	#2 						; get base type
.8cba	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8cbc	20 f9 8c	jsr $8cf9			jsr 	ScaleByBaseType 		; scale by base type
.8cbf	a5 36		lda $36				lda 	zTemp0
.8cc1	a6 37		ldx $37				ldx 	zTemp0+1
.8cc3	20 82 a2	jsr $a282			jsr 	AllocateXABytes 		; allocate memory
.8cc6	a0 03		ldy #$03			ldy 	#3 						; copy into the address.
.8cc8	91 3e		sta ($3e),y			sta 	(zaTemp),y
.8cca	c8		iny				iny
.8ccb	8a		txa				txa
.8ccc	91 3e		sta ($3e),y			sta 	(zaTemp),y
.8cce	7a		ply				ply 							; get position back
.8ccf	20 69 ae	jsr $ae69			jsr 	CheckRightBracket 		; check )
.8cd2	b1 30		lda ($30),y			lda 	(codePtr),y
.8cd4	c8		iny				iny 							; consume in case
.8cd5	c9 2c		cmp #$2c			cmp 	#KWD_COMMA		 		; if so do another DIM.
.8cd7	f0 85		beq $8c5e			beq 	DimCommand
.8cd9	88		dey				dey 							; undo consume
.8cda	60		rts				rts
.8cdb					_DCSize:
.8cdb	a9 16		lda #$16		lda	#22
.8cdd	4c eb 99	jmp $99eb		jmp	ErrorHandler
.8ce0					_DCSyntax:
.8ce0	4c 57 b4	jmp $b457			jmp 	SyntaxError
.8ce3					_DCRedefine:
.8ce3	a9 15		lda #$15		lda	#21
.8ce5	4c eb 99	jmp $99eb		jmp	ErrorHandler
.8ce8					_DCType:
.8ce8	4c 61 b4	jmp $b461			jmp 	TypeError
.8ceb					_DCGetSize:
.8ceb	a2 00		ldx #$00			ldx 	#0 						; get first index.
.8ced	20 be a5	jsr $a5be			jsr 	Evaluate8BitInteger 	; get array dimension
.8cf0	c9 00		cmp #$00			cmp 	#0 						; must be 1-254
.8cf2	f0 e7		beq $8cdb			beq 	_DCSize
.8cf4	c9 fe		cmp #$fe			cmp 	#254
.8cf6	f0 e3		beq $8cdb			beq 	_DCSize
.8cf8	60		rts				rts
.8cf9					ScaleByBaseType:
.8cf9	29 10		and #$10			and 	#NSBIsString 			; is it string
.8cfb	d0 19		bne $8d16			bne 	_SBBTString
.8cfd	a5 37		lda $37				lda 	zTemp0+1 				; push value on stack
.8cff	48		pha				pha
.8d00	a5 36		lda $36				lda 	zTemp0
.8d02	48		pha				pha
.8d03	06 36		asl $36				asl 	zTemp0 					; x 2
.8d05	26 37		rol $37				rol 	zTemp0+1
.8d07	06 36		asl $36				asl 	zTemp0 					; x 4
.8d09	26 37		rol $37				rol 	zTemp0+1
.8d0b	68		pla				pla 							; add stacked value = x 5
.8d0c	65 36		adc $36				adc 	zTemp0
.8d0e	85 36		sta $36				sta 	zTemp0
.8d10	68		pla				pla
.8d11	65 37		adc $37				adc 	zTemp0+1
.8d13	85 37		sta $37				sta 	zTemp0+1
.8d15	60		rts				rts
.8d16					_SBBTString:
.8d16	06 36		asl $36				asl 	zTemp0
.8d18	26 37		rol $37				rol 	zTemp0+1
.8d1a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/end.asm

.8d1b					EndCommand:
.8d1b	4c 5f 8b	jmp $8b5f			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/commands/event.asm

.8d1e					UnaryEvent:
.8d1e	fa		plx				plx
.8d1f	20 33 97	jsr $9733			jsr 	TimerToStackX 				; timer in +0
.8d22	e8		inx				inx  								; put reference into +1
.8d23	20 cd a0	jsr $a0cd			jsr 	EvaluateTerm
.8d26	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if is integer reference
.8d29	c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.8d2b	d0 57		bne $8d84			bne 	_UEType
.8d2d	e8		inx				inx 								; put the step in +2
.8d2e	20 71 ae	jsr $ae71			jsr 	CheckComma
.8d31	20 9e a5	jsr $a59e			jsr 	Evaluate16BitInteger
.8d34	20 69 ae	jsr $ae69			jsr 	CheckRightBracket
.8d37	ca		dex				dex
.8d38	ca		dex				dex
.8d39	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; copy reference to zTemp0
.8d3c	85 36		sta $36				sta 	zTemp0
.8d3e	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.8d41	85 37		sta $37				sta 	zTemp0+1
.8d43	5a		phy				phy
.8d44	a0 03		ldy #$03			ldy 	#3 							; check bit 7 of last bit, the packed sign bit
.8d46	b1 36		lda ($36),y			lda 	(zTemp0),y
.8d48	30 36		bmi $8d80			bmi 	_UEFalse 					; exit if signed.
.8d4a	a0 00		ldy #$00			ldy 	#0 							; has it timed out (24 bit)
.8d4c	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.8d4f	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.8d51	c8		iny				iny
.8d52	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8d55	f1 36		sbc ($36),y			sbc		(zTemp0),y
.8d57	c8		iny				iny
.8d58	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.8d5b	f1 36		sbc ($36),y			sbc		(zTemp0),y
.8d5d	90 21		bcc $8d80			bcc 	_UEFalse 					; no, return FALSE.
.8d5f	18		clc				clc
.8d60	a0 00		ldy #$00			ldy 	#0 							; work out new value as timer() + step
.8d62	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.8d65	7d 0a 04	adc $040a,x			adc 	NSMantissa0+2,x
.8d68	91 36		sta ($36),y			sta 	(zTemp0),y
.8d6a	c8		iny				iny
.8d6b	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8d6e	7d 12 04	adc $0412,x			adc 	NSMantissa1+2,x
.8d71	91 36		sta ($36),y			sta 	(zTemp0),y
.8d73	c8		iny				iny
.8d74	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.8d77	7d 1a 04	adc $041a,x			adc 	NSMantissa2+2,x
.8d7a	91 36		sta ($36),y			sta 	(zTemp0),y
.8d7c	7a		ply				ply
.8d7d	4c 58 9a	jmp $9a58			jmp 	ReturnTrue
.8d80					_UEFalse:
.8d80	7a		ply				ply 								; restore Y
.8d81	4c 64 9a	jmp $9a64			jmp 	ReturnFalse 				; and return False
.8d84					_UEType:
.8d84	4c 61 b4	jmp $b461			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/for.asm

.8d87					ForCommand:
.8d87	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; allocate 18 bytes on the return stack.
.8d89	20 da a6	jsr $a6da			jsr 	StackOpen
.8d8c	a2 00		ldx #$00			ldx 	#0
.8d8e	20 cd a0	jsr $a0cd			jsr 	EvaluateTerm
.8d91	bd 00 04	lda $0400,x			lda 	NSStatus,x
.8d94	c9 20		cmp #$20			cmp 	#NSBIsReference+NSTInteger 	; do we have an integer 4 byte reference.
.8d96	d0 49		bne $8de1			bne		_FCError
.8d98	a9 3d		lda #$3d			lda 	#KWD_EQUAL 					; =
.8d9a	20 79 ae	jsr $ae79			jsr 	CheckNextA
.8d9d	e8		inx				inx
.8d9e	20 89 a5	jsr $a589			jsr 	EvaluateInteger 			; <from> in +1
.8da1	b1 30		lda ($30),y			lda 	(codePtr),y
.8da3	c8		iny				iny 								; consume it
.8da4	48		pha				pha 								; save on stack for later
.8da5	c9 b3		cmp #$b3			cmp 	#KWD_DOWNTO
.8da7	f0 04		beq $8dad			beq 	_FCNoSyntax
.8da9	c9 cb		cmp #$cb			cmp 	#KWD_TO
.8dab	d0 37		bne $8de4			bne 	_FCSyntaxError
.8dad					_FCNoSyntax:
.8dad	e8		inx				inx
.8dae	20 89 a5	jsr $a589			jsr 	EvaluateInteger
.8db1	20 1e a7	jsr $a71e			jsr 	STKSaveCodePosition 		; save loop back position
.8db4	68		pla				pla 								; restore DOWNTO or TO
.8db5	5a		phy				phy 								; save Y on the stack
.8db6	49 b3		eor #$b3			eor 	#KWD_DOWNTO 				; 0 if DOWNTO, #0 if TO
.8db8	f0 02		beq $8dbc			beq 	_FCNotDownTo
.8dba	a9 02		lda #$02			lda 	#2
.8dbc					_FCNotDownTo:
.8dbc	3a		dec a				dec 	a 							; 255 if DOWNTO, 1 if TO
.8dbd	a0 10		ldy #$10			ldy 	#16
.8dbf	91 34		sta ($34),y			sta 	(basicStack),y 				; copy that out to the Basic Stack.
.8dc1	a0 06		ldy #$06			ldy 	#6
.8dc3	ad 08 04	lda $0408			lda 	NSMantissa0
.8dc6	91 34		sta ($34),y			sta 	(basicStack),y
.8dc8	ad 10 04	lda $0410			lda 	NSMantissa1
.8dcb	c8		iny				iny
.8dcc	91 34		sta ($34),y			sta 	(basicStack),y
.8dce	a0 08		ldy #$08			ldy 	#8 							; set initial index value
.8dd0	a2 01		ldx #$01			ldx 	#1
.8dd2	20 e7 8d	jsr $8de7			jsr 	FCIntegerToStack
.8dd5	a0 0c		ldy #$0c			ldy 	#12 						; set the terminal value
.8dd7	a2 02		ldx #$02			ldx 	#2
.8dd9	20 e7 8d	jsr $8de7			jsr 	FCIntegerToStack
.8ddc	20 07 8e	jsr $8e07			jsr 	CopyIndexToReference
.8ddf	7a		ply				ply 								; restore position
.8de0	60		rts				rts
.8de1					_FCError:
.8de1	4c 61 b4	jmp $b461			jmp 	TypeError
.8de4					_FCSyntaxError:
.8de4	4c 57 b4	jmp $b457			jmp 	SyntaxError
.8de7					FCIntegerToStack:
.8de7	3c 00 04	bit $0400,x			bit 	NSStatus,x 					; is the value negative
.8dea	10 03		bpl $8def			bpl	 	_FCNotNegative
.8dec	20 db a5	jsr $a5db			jsr 	NSMNegateMantissa 			; if so 2's complement the mantissa
.8def					_FCNotNegative:
.8def	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy out to the basic stack
.8df2	91 34		sta ($34),y			sta 	(basicStack),y
.8df4	c8		iny				iny
.8df5	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8df8	91 34		sta ($34),y			sta 	(basicStack),y
.8dfa	c8		iny				iny
.8dfb	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.8dfe	91 34		sta ($34),y			sta 	(basicStack),y
.8e00	c8		iny				iny
.8e01	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.8e04	91 34		sta ($34),y			sta 	(basicStack),y
.8e06	60		rts				rts
.8e07					CopyIndexToReference:
.8e07	5a		phy				phy
.8e08	a0 06		ldy #$06			ldy 	#6 							; copy address-8 to write to zTemp0
.8e0a	38		sec				sec 								; (because we copy from offset 8)
.8e0b	b1 34		lda ($34),y			lda 	(basicStack),y
.8e0d	e9 08		sbc #$08			sbc 	#8
.8e0f	85 36		sta $36				sta 	zTemp0
.8e11	c8		iny				iny
.8e12	b1 34		lda ($34),y			lda 	(basicStack),y
.8e14	e9 00		sbc #$00			sbc 	#0
.8e16	85 37		sta $37				sta 	zTemp0+1
.8e18	a2 04		ldx #$04			ldx 	#4 							; this is the copy counter/
.8e1a	a0 0b		ldy #$0b			ldy 	#8+3 		 				; the MSB of the mantissa
.8e1c	b1 34		lda ($34),y			lda 	(basicStack),y
.8e1e	0a		asl a				asl 	a 							; into carry
.8e1f	a0 08		ldy #$08			ldy 	#8 							; where to copy from.
.8e21	90 14		bcc $8e37			bcc 	_CITRNormal
.8e23	38		sec				sec
.8e24					_CITRNegative:
.8e24	a9 00		lda #$00			lda 	#0
.8e26	f1 34		sbc ($34),y			sbc 	(basicStack),y
.8e28	91 36		sta ($36),y			sta 	(zTemp0),y
.8e2a	c8		iny				iny
.8e2b	ca		dex				dex
.8e2c	d0 f6		bne $8e24			bne 	_CITRNegative
.8e2e	88		dey				dey 								; look at MSB of mantissa
.8e2f	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set the MSB as negative packed.
.8e31	09 80		ora #$80			ora 	#$80
.8e33	91 36		sta ($36),y			sta 	(zTemp0),y
.8e35	7a		ply				ply
.8e36	60		rts				rts
.8e37					_CITRNormal:
.8e37	b1 34		lda ($34),y			lda 	(basicStack),y 				; copy without negation.
.8e39	91 36		sta ($36),y			sta 	(zTemp0),y
.8e3b	c8		iny				iny
.8e3c	ca		dex				dex
.8e3d	d0 f8		bne $8e37			bne 	_CITRNormal
.8e3f	7a		ply				ply 								; and exit.
.8e40	60		rts				rts
.8e41					NextCommand:
.8e41	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; check FOR is TOS
.8e43	a2 11		ldx #$11			ldx 	#ERRID_FOR 					; this error
.8e45	20 06 a7	jsr $a706			jsr 	StackCheckFrame
.8e48	5a		phy				phy
.8e49	a0 10		ldy #$10			ldy 	#16 						; get the step count
.8e4b	b1 34		lda ($34),y			lda 	(basicStack),y
.8e4d	85 36		sta $36				sta 	zTemp0 						; this is the sign extend
.8e4f	30 02		bmi $8e53			bmi 	_NCStepNeg
.8e51	64 36		stz $36				stz 	zTemp0 						; which is 0 or 255
.8e53					_NCStepNeg:
.8e53	a0 08		ldy #$08			ldy 	#8 							; offset to bump
.8e55	a2 04		ldx #$04			ldx 	#4 							; count to bump
.8e57	18		clc				clc
.8e58					_NCBump:
.8e58	71 34		adc ($34),y			adc 	(basicStack),y 				; add it
.8e5a	91 34		sta ($34),y			sta 	(basicStack),y
.8e5c	a5 36		lda $36				lda 	zTemp0 						; get sign extend for next time.
.8e5e	c8		iny				iny 								; next byte
.8e5f	ca		dex				dex 								; do four times
.8e60	d0 f6		bne $8e58			bne 	_NCBump
.8e62	20 07 8e	jsr $8e07			jsr		CopyIndexToReference		; copy it to the reference variable.
.8e65	a0 10		ldy #$10			ldy 	#16 						; get step count again
.8e67	b1 34		lda ($34),y			lda 	(basicStack),y
.8e69	0a		asl a				asl 	a 							; sign bit to carry
.8e6a	a9 0c		lda #$0c			lda 	#12 						; offset of LHS = terminal offset
.8e6c	85 38		sta $38				sta 	zTemp1
.8e6e	90 02		bcc $8e72			bcc 	_NCCompRev 					; use if step is +ve
.8e70	a9 08		lda #$08			lda 	#8 							; now the LHS = index value
.8e72					_NCCompRev:
.8e72	85 38		sta $38				sta 	zTemp1 						; so zTemp0 is the index for LHS
.8e74	49 04		eor #$04			eor 	#(8^12) 					; and zTemp0+1 is the index for RHS
.8e76	85 39		sta $39				sta 	zTemp1+1
.8e78	a2 04		ldx #$04			ldx 	#4 							; bytes to compare
.8e7a	38		sec				sec
.8e7b					_NCCompare:
.8e7b	a4 38		ldy $38				ldy 	zTemp1 						; do compare using the two indices
.8e7d	b1 34		lda ($34),y			lda 	(basicStack),y
.8e7f	a4 39		ldy $39				ldy 	zTemp1+1
.8e81	f1 34		sbc ($34),y			sbc 	(basicStack),y
.8e83	e6 38		inc $38				inc 	zTemp1 						; bump the indices (inc,dex do not change C or V)
.8e85	e6 39		inc $39				inc 	zTemp1+1
.8e87	ca		dex				dex 								; do it 4 times.
.8e88	d0 f1		bne $8e7b			bne 	_NCCompare
.8e8a	50 02		bvc $8e8e			bvc 	_NCNoOverflow 				; convert to signed comparison
.8e8c	49 80		eor #$80			eor 	#$80
.8e8e					_NCNoOverflow:
.8e8e	7a		ply				ply 								; restore Y position
.8e8f	0a		asl a				asl 	a 							; is bit 7 set.
.8e90	90 04		bcc $8e96			bcc 	_NCLoopback 				; if no , >= so loop back
.8e92	20 f8 a6	jsr $a6f8			jsr 	StackClose 					; exit the loop
.8e95	60		rts				rts
.8e96					_NCLoopBack:
.8e96	20 2f a7	jsr $a72f			jsr 	STKLoadCodePosition 		; loop back
.8e99	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/commands/gcommand.asm

.8e9a					RectangleCommand:
.8e9a	a9 24		lda #$24			lda 	#18*2 						; frame rectangle
.8e9c	80 02		bra $8ea0			bra 	ShapeDrawCmd
.8e9e					CircleCommand:
.8e9e	a9 28		lda #$28			lda 	#20*2 						; framed circle
.8ea0					ShapeDrawCmd:
.8ea0	20 2e 8f	jsr $8f2e			jsr 	RunGraphicsCommand
.8ea3					ShapeDraw:
.8ea3	0d 63 06	ora $0663			ora 	gxFillSolid  				; adjust AXY for solid fill.
.8ea6	4c 22 8f	jmp $8f22			jmp 	ExecuteGraphicCommand	 	; and complete
.8ea9					SpriteCommand:
.8ea9	a2 00		ldx #$00			ldx 	#0
.8eab	20 be a5	jsr $a5be			jsr 	Evaluate8BitInteger 		; get image number.
.8eae	5a		phy				phy
.8eaf	a9 0e		lda #$0e			lda 	#7*2 						; use that image.
.8eb1	ae 08 04	ldx $0408			ldx 	NSMantissa0
.8eb4	e0 40		cpx #$40			cpx 	#64 						; 0-63 only
.8eb6	b0 0d		bcs $8ec5			bcs 	_SCRange
.8eb8	a0 ff		ldy #$ff			ldy 	#255
.8eba	20 87 80	jsr $8087			jsr 	GXGraphicDraw
.8ebd	a9 32		lda #$32			lda 	#25*2
.8ebf	7a		ply				ply
.8ec0	20 2e 8f	jsr $8f2e			jsr 	RunGraphicsCommand
.8ec3	80 5d		bra $8f22			bra 	ExecuteGraphicCommand
.8ec5					_SCRange:
.8ec5	4c 5c b4	jmp $b45c			jmp 	RangeError
.8ec8					ImageCommand:
.8ec8	a2 00		ldx #$00			ldx 	#0
.8eca	20 be a5	jsr $a5be			jsr 	Evaluate8BitInteger 		; get image number.
.8ecd	20 2e 8f	jsr $8f2e			jsr 	RunGraphicsCommand
.8ed0					ImageRunDraw:
.8ed0	09 20		ora #$20			ora 	#16*2 						; move cursor
.8ed2	20 87 80	jsr $8087			jsr 	GXGraphicDraw
.8ed5	ad 69 06	lda $0669			lda 	gxDrawScale
.8ed8	0a		asl a				asl 	a
.8ed9	0a		asl a				asl 	a
.8eda	0a		asl a				asl 	a
.8edb	a8		tay				tay
.8edc	a9 0c		lda #$0c			lda 	#6*2 						; image drawing
.8ede	ae 08 04	ldx $0408			ldx 	NSMantissa0
.8ee1	20 87 80	jsr $8087			jsr 	GXGraphicDraw
.8ee4	60		rts				rts
.8ee5					TextCommand:
.8ee5	a2 00		ldx #$00			ldx 	#0
.8ee7	20 71 a5	jsr $a571			jsr 	EvaluateString 				; get text
.8eea	20 2e 8f	jsr $8f2e			jsr 	RunGraphicsCommand
.8eed					TextRunDraw:
.8eed	09 20		ora #$20			ora 	#16*2 						; move cursor
.8eef	20 87 80	jsr $8087			jsr 	GXGraphicDraw
.8ef2	a0 00		ldy #$00			ldy 	#0
.8ef4					_IRDLoop:
.8ef4	ad 10 04	lda $0410			lda 	NSMantissa1 				; access character
.8ef7	85 37		sta $37				sta 	zTemp0+1
.8ef9	ad 08 04	lda $0408			lda 	NSMantissa0
.8efc	85 36		sta $36				sta 	zTemp0
.8efe	b1 36		lda ($36),y			lda 	(zTemp0),y
.8f00	f0 13		beq $8f15			beq 	_IRDExit
.8f02	5a		phy				phy									; save string pos
.8f03	48		pha				pha 								; save char
.8f04	ad 69 06	lda $0669			lda 	gxDrawScale 				; get scale
.8f07	0a		asl a				asl 	a
.8f08	0a		asl a				asl 	a
.8f09	0a		asl a				asl 	a
.8f0a	a8		tay				tay
.8f0b	a9 0a		lda #$0a			lda 	#5*2 						; char drawing
.8f0d	fa		plx				plx 								; char to draw
.8f0e	20 87 80	jsr $8087			jsr 	GXGraphicDraw
.8f11	7a		ply				ply 								; restore string pos
.8f12	c8		iny				iny
.8f13	90 df		bcc $8ef4			bcc 	_IRDLoop 					; go back if no error.
.8f15					_IRDExit:
.8f15	60		rts				rts
.8f16					PlotCommand:
.8f16	a9 30		lda #$30			lda 	#24*2 						; command ID to use
.8f18	20 2e 8f	jsr $8f2e			jsr 	RunGraphicsCommand
.8f1b	80 05		bra $8f22			bra 	ExecuteGraphicCommand
.8f1d					LineCommand:
.8f1d	a9 22		lda #$22			lda 	#17*2 						; command ID to use
.8f1f	20 2e 8f	jsr $8f2e			jsr 	RunGraphicsCommand
.8f22					ExecuteGraphicCommand:
.8f22	0d 62 06	ora $0662			ora 	gxCommandID 				; make a full command
.8f25	20 87 80	jsr $8087			jsr 	GXGraphicDraw 				; draw it and exit
.8f28	b0 01		bcs $8f2b			bcs 	_EGCError
.8f2a	60		rts				rts
.8f2b					_EGCError:
.8f2b	4c 57 b4	jmp $b457			jmp 	SyntaxError
.8f2e					RunGraphicsCommand:
.8f2e	8d 62 06	sta $0662			sta 	gxCommandID					; save TODO graphics command.
.8f31	68		pla				pla 								; pop handler address
.8f32	fa		plx				plx
.8f33	1a		inc a				inc 	a
.8f34	d0 01		bne $8f37			bne 	_RGINoCarry
.8f36	e8		inx				inx
.8f37					_RGINoCarry:
.8f37	8d 67 06	sta $0667			sta 	GXHandler
.8f3a	8e 68 06	stx $0668			stx 	GXHandler+1
.8f3d					_RGICommandLoop:
.8f3d	b1 30		lda ($30),y			lda 	(codePtr),y
.8f3f	c8		iny				iny
.8f40	c9 cb		cmp #$cb			cmp 	#KWD_TO						; is it TO x,y
.8f42	f0 53		beq $8f97			beq 	_RGI_To
.8f44	c9 b9		cmp #$b9			cmp 	#KWD_HERE 					; do it here.
.8f46	f0 55		beq $8f9d			beq 	_RGI_Here
.8f48	c9 80		cmp #$80			cmp 	#KWC_EOL 					; EOL or : , exit
.8f4a	f0 3d		beq $8f89			beq 	_RGI_Exit
.8f4c	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.8f4e	f0 39		beq $8f89			beq 	_RGI_Exit
.8f50	c9 c0		cmp #$c0			cmp 	#KWD_OUTLINE 				; solid or outline
.8f52	f0 3e		beq $8f92			beq 	_RGI_Frame
.8f54	c9 c8		cmp #$c8			cmp 	#KWD_SOLID
.8f56	f0 33		beq $8f8b			beq 	_RGI_Solid
.8f58	c9 aa		cmp #$aa			cmp 	#KWD_BY 					; by offset
.8f5a	f0 4b		beq $8fa7			beq 	_RGI_By
.8f5c	c9 b5		cmp #$b5			cmp 	#KWD_FROM 					; from
.8f5e	f0 17		beq $8f77			beq 	_RGI_Move2
.8f60	c9 b2		cmp #$b2			cmp 	#KWD_DIM 					; dim (set scale)
.8f62	f0 65		beq $8fc9			beq 	_RGI_Dim
.8f64	c9 b0		cmp #$b0			cmp 	#KWD_COLOUR 				; colour or Color
.8f66	f0 78		beq $8fe0			beq 	_RGI_Colour
.8f68	c9 af		cmp #$af			cmp 	#KWD_COLOR
.8f6a	f0 74		beq $8fe0			beq 	_RGI_Colour
.8f6c	ae 62 06	ldx $0662			ldx 	gxCommandID
.8f6f	e0 32		cpx #$32			cpx 	#25*2 						; if not sprite
.8f71	d0 03		bne $8f76			bne 	_RGI_Move 					; move
.8f73	4c 0a 90	jmp $900a			jmp		_RGI_SpriteInstructions
.8f76					_RGI_Move:
.8f76	88		dey				dey 								; unpick get.
.8f77					_RGI_Move2:
.8f77	20 30 90	jsr $9030			jsr 	GCGetCoordinatePair 		; move to here
.8f7a	20 57 90	jsr $9057			jsr 	GCCopyPairToStore 			; save
.8f7d	5a		phy				phy
.8f7e	20 4d 90	jsr $904d			jsr 	GCLoadAXY 					; load in
.8f81	09 20		ora #$20			ora 	#16*2 						; move there
.8f83	20 87 80	jsr $8087			jsr 	GXGraphicDraw
.8f86	7a		ply				ply
.8f87	80 b4		bra $8f3d			bra 	_RGICommandLoop 			; and go round
.8f89					_RGI_Exit:
.8f89	88		dey				dey 								; unpick : / EOL
.8f8a	60		rts				rts
.8f8b					_RGI_Solid:
.8f8b	a9 02		lda #$02			lda 	#2
.8f8d	8d 63 06	sta $0663			sta 	gxFillSolid
.8f90	80 ab		bra $8f3d			bra 	_RGICommandLoop
.8f92					_RGI_Frame:
.8f92	9c 63 06	stz $0663			stz 	gxFillSolid
.8f95	80 a6		bra $8f3d			bra 	_RGICommandLoop
.8f97					_RGI_To:
.8f97	20 30 90	jsr $9030			jsr 	GCGetCoordinatePair 		; get coordinate pair into slot #1,#2
.8f9a	20 57 90	jsr $9057			jsr 	GCCopyPairToStore
.8f9d					_RGI_Here:
.8f9d	5a		phy				phy
.8f9e	20 4d 90	jsr $904d			jsr 	GCLoadAXY 					; load it into AXY
.8fa1	20 07 90	jsr $9007			jsr 	_RGICallHandler 			; go do whatever it is.
.8fa4	7a		ply				ply
.8fa5	80 96		bra $8f3d			bra 	_RGICommandLoop 			; and go round
.8fa7					_RGI_By:
.8fa7	20 3d 90	jsr $903d			jsr 	GCSignedCoordinatePair 		; get coordinate pair into slot #1,#2
.8faa	18		clc				clc
.8fab	ad 09 04	lda $0409			lda 	NSMantissa0+1 				; copy it into space.
.8fae	6d 64 06	adc $0664			adc 	gxxPos
.8fb1	8d 64 06	sta $0664			sta 	gxXPos
.8fb4	ad 11 04	lda $0411			lda 	NSMantissa1+1
.8fb7	6d 65 06	adc $0665			adc 	gxxPos+1
.8fba	8d 65 06	sta $0665			sta 	gxXPos+1
.8fbd	ad 0a 04	lda $040a			lda 	NSMantissa0+2
.8fc0	18		clc				clc
.8fc1	6d 66 06	adc $0666			adc 	gxYPos
.8fc4	8d 66 06	sta $0666			sta 	gxYPos
.8fc7	80 d4		bra $8f9d			bra 	_RGI_Here
.8fc9					_RGI_Dim:
.8fc9	a2 01		ldx #$01			ldx	 	#1
.8fcb	20 be a5	jsr $a5be			jsr 	Evaluate8BitInteger
.8fce	ad 09 04	lda $0409			lda 	NSMantissa0+1
.8fd1	c9 00		cmp #$00			cmp 	#0
.8fd3	f0 2f		beq $9004			beq 	_RGIRange
.8fd5	c9 09		cmp #$09			cmp 	#8+1
.8fd7	b0 2b		bcs $9004			bcs		_RGIRange
.8fd9	3a		dec a				dec 	a
.8fda	8d 69 06	sta $0669			sta 	gxDrawScale
.8fdd	4c 3d 8f	jmp $8f3d			jmp 	_RGICommandLoop
.8fe0					_RGI_Colour:
.8fe0	a2 01		ldx #$01			ldx 	#1 							; colour
.8fe2	20 be a5	jsr $a5be			jsr 	Evaluate8BitInteger
.8fe5	a2 02		ldx #$02			ldx 	#2 							; default zero for 2nd parameter
.8fe7	20 26 a6	jsr $a626			jsr 	NSMSetZero
.8fea	b1 30		lda ($30),y			lda 	(codePtr),y
.8fec	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; check , => mode.
.8fee	d0 04		bne $8ff4			bne 	_RGICDefaultMode
.8ff0	c8		iny				iny
.8ff1	20 be a5	jsr $a5be			jsr 	Evaluate8BitInteger
.8ff4					_RGICDefaultMode:
.8ff4	5a		phy				phy
.8ff5	a9 08		lda #$08			lda 	#4*2 						; set colour.
.8ff7	ae 09 04	ldx $0409			ldx 	NSMantissa0+1
.8ffa	ac 0a 04	ldy $040a			ldy 	NSMantissa0+2
.8ffd	20 87 80	jsr $8087			jsr 	GXGraphicDraw
.9000	7a		ply				ply
.9001	4c 3d 8f	jmp $8f3d			jmp 	_RGICommandLoop 			; and go round
.9004					_RGIRange:
.9004	4c 5c b4	jmp $b45c			jmp 	RangeError
.9007					_RGICallHandler:
.9007	6c 67 06	jmp ($0667)			jmp 	(GXHandler)
.900a					_RGI_SpriteInstructions:
.900a	c9 be		cmp #$be			cmp 	#KWD_OFF
.900c	f0 07		beq $9015			beq 	_RGISpriteOff
.900e	c9 ba		cmp #$ba			cmp 	#KWD_IMAGE
.9010	f0 13		beq $9025			beq 	_RGISetImage
.9012	4c 76 8f	jmp $8f76			jmp 	_RGI_Move
.9015					_RGISpriteOff:
.9015	5a		phy				phy
.9016	a0 01		ldy #$01			ldy 	#1
.9018	a2 00		ldx #$00			ldx 	#0
.901a					_RGIDoCommandLoop:
.901a	a9 10		lda #$10			lda 	#8*2
.901c	20 87 80	jsr $8087			jsr 	GXGraphicDraw
.901f	7a		ply				ply
.9020	b0 e2		bcs $9004			bcs 	_RGIRange
.9022	4c 3d 8f	jmp $8f3d			jmp 	_RGICommandLoop
.9025					_RGISetImage:
.9025	a2 01		ldx #$01			ldx 	#1
.9027	20 be a5	jsr $a5be			jsr 	Evaluate8BitInteger
.902a	5a		phy				phy
.902b	aa		tax				tax
.902c	a0 00		ldy #$00			ldy 	#0
.902e	80 ea		bra $901a			bra 	_RGIDoCommandLoop
.9030					GCGetCoordinatePair:
.9030	a2 01		ldx #$01			ldx 	#1
.9032	20 9e a5	jsr $a59e			jsr 	Evaluate16BitInteger
.9035	20 71 ae	jsr $ae71			jsr 	CheckComma
.9038	e8		inx				inx
.9039	20 9e a5	jsr $a59e			jsr 	Evaluate16BitInteger
.903c	60		rts				rts
.903d					GCSignedCoordinatePair:
.903d	a2 01		ldx #$01			ldx 	#1
.903f	20 aa a5	jsr $a5aa			jsr 	Evaluate16BitIntegerSigned
.9042	20 71 ae	jsr $ae71			jsr 	CheckComma
.9045	e8		inx				inx
.9046	20 aa a5	jsr $a5aa			jsr 	Evaluate16BitIntegerSigned
.9049	60		rts				rts
.904a					_GCCPRange:
.904a	4c 5c b4	jmp $b45c			jmp 	RangeError
.904d					GCLoadAXY:
.904d	ad 65 06	lda $0665			lda 	gxXPos+1
.9050	ae 64 06	ldx $0664			ldx 	gxXPos
.9053	ac 66 06	ldy $0666			ldy 	gxYPos
.9056	60		rts				rts
.9057					GCCopyPairToStore:
.9057	ad 09 04	lda $0409			lda 	NSMantissa0+1 				; copy it into space.
.905a	8d 64 06	sta $0664			sta 	gxXPos
.905d	ad 11 04	lda $0411			lda 	NSMantissa1+1
.9060	8d 65 06	sta $0665			sta 	gxXPos+1
.9063	ad 0a 04	lda $040a			lda 	NSMantissa0+2
.9066	8d 66 06	sta $0666			sta 	gxYPos
.9069	60		rts				rts
.0662					gxCommandID:
>0662							.fill 	1
.0663					gxFillSolid:
>0663							.fill 	1
.0664					gxXPos:
>0664							.fill 	2
.0666					gxYPos:
>0666							.fill 	1
.0667					gxHandler:
>0667							.fill 	2
.0669					gxDrawScale:
>0669							.fill 	1

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/commands/gcontrol.asm

.906a					BitmapCtrl:
.906a	b1 30		lda ($30),y			lda 	(codePtr),y
.906c	c8		iny				iny
.906d	a2 01		ldx #$01			ldx 	#1
.906f	c9 bf		cmp #$bf			cmp 	#KWD_ON
.9071	f0 11		beq $9084			beq 	BitmapSwitch
.9073	ca		dex				dex
.9074	c9 be		cmp #$be			cmp 	#KWD_OFF
.9076	f0 0c		beq $9084			beq 	BitmapSwitch
.9078	20 be a5	jsr $a5be			jsr 	Evaluate8BitInteger 		; get the colour
.907b	5a		phy				phy
.907c	aa		tax				tax
.907d	a9 06		lda #$06			lda 	#3*2						; clear to that colour
.907f	20 87 80	jsr $8087			jsr 	GXGraphicDraw
.9082	7a		ply				ply
.9083	60		rts				rts
.9084					BitmapSwitch:
.9084	5a		phy				phy
.9085	a0 00		ldy #$00			ldy 	#0 							; gfx 1,on/off,0
.9087	a9 02		lda #$02			lda 	#1*2
.9089	20 87 80	jsr $8087			jsr 	GXGraphicDraw
.908c	a9 08		lda #$08			lda 	#4*2 						; set colour to $FF
.908e	a0 00		ldy #$00			ldy 	#0
.9090	a2 ff		ldx #$ff			ldx 	#$FF
.9092	20 87 80	jsr $8087			jsr 	GXGraphicDraw
.9095	9c 63 06	stz $0663			stz 	gxFillSolid
.9098	9c 64 06	stz $0664			stz 	gxXPos
.909b	9c 65 06	stz $0665			stz 	gxXPos+1
.909e	9c 66 06	stz $0666			stz 	gxYPos
.90a1	9c 69 06	stz $0669			stz 	gxDrawScale
.90a4	a9 20		lda #$20			lda 	#16*2 						; home cursor
.90a6	a2 00		ldx #$00			ldx 	#0
.90a8	a0 00		ldy #$00			ldy 	#0
.90aa	20 87 80	jsr $8087			jsr 	GXGraphicDraw
.90ad	7a		ply				ply
.90ae	60		rts				rts
.90af					SpritesCtrl:
.90af	b1 30		lda ($30),y			lda 	(codePtr),y
.90b1	c8		iny				iny
.90b2	a2 01		ldx #$01			ldx 	#1
.90b4	c9 bf		cmp #$bf			cmp 	#KWD_ON
.90b6	f0 08		beq $90c0			beq 	SpriteSwitch
.90b8	ca		dex				dex
.90b9	c9 be		cmp #$be			cmp 	#KWD_OFF
.90bb	f0 03		beq $90c0			beq 	SpriteSwitch
.90bd	4c 57 b4	jmp $b457			jmp 	SyntaxError
.90c0					SpriteSwitch:
.90c0	5a		phy				phy
.90c1	a0 00		ldy #$00			ldy 	#0 							; gfx 2,on/off,0
.90c3	a9 04		lda #$04			lda 	#2*2
.90c5	20 87 80	jsr $8087			jsr 	GXGraphicDraw
.90c8	7a		ply				ply
.90c9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/commands/gfx.asm

.90ca					GfxCommand:
.90ca	a2 00		ldx #$00			ldx 	#0
.90cc	20 be a5	jsr $a5be			jsr 	Evaluate8BitInteger 		; command
.90cf	20 71 ae	jsr $ae71			jsr 	CheckComma
.90d2	e8		inx				inx
.90d3	20 9e a5	jsr $a59e			jsr 	Evaluate16BitInteger 		; X
.90d6	20 71 ae	jsr $ae71			jsr 	CheckComma
.90d9	e8		inx				inx
.90da	20 be a5	jsr $a5be			jsr 	Evaluate8BitInteger 		; Y
.90dd	ad 11 04	lda $0411			lda 	NSMantissa1+1  				; shift bit 0 of X into CS, should now be zero
.90e0	4a		lsr a				lsr 	a
.90e1	d0 16		bne $90f9			bne 	_GfxError
.90e3	2e 08 04	rol $0408			rol 	NSMantissa0 				; rotate into command
.90e6	b0 11		bcs $90f9			bcs 	_GfxError 					; bit 7 should have been zero
.90e8	5a		phy				phy 								; save pos
.90e9	ad 08 04	lda $0408			lda 	NSMantissa0 				; do the command
.90ec	ae 09 04	ldx $0409			ldx 	NSMantissa0+1
.90ef	ac 0a 04	ldy $040a			ldy 	NSMantissa0+2
.90f2	20 87 80	jsr $8087			jsr 	GXGraphicDraw
.90f5	b0 02		bcs $90f9			bcs 	_GfxError
.90f7	7a		ply				ply 								; restore pos and exit.
.90f8	60		rts				rts
.90f9					_GfxError:
.90f9	4c 5c b4	jmp $b45c			jmp 	RangeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/gosub.asm

.90fc					Command_GOSUB:
.90fc	a2 00		ldx #$00			ldx 	#0
.90fe	20 9e a5	jsr $a59e			jsr 	Evaluate16BitInteger 		; line number in Stack.0
.9101	a9 e3		lda #$e3			lda 	#STK_GOSUB+3
.9103	20 da a6	jsr $a6da			jsr 	StackOpen 					; create frame
.9106	20 1e a7	jsr $a71e			jsr 	STKSaveCodePosition 		; save current position
.9109	4c 1f 91	jmp $911f			jmp 	GotoStackX
.910c					Command_RETURN:
.910c	a9 e0		lda #$e0			lda 	#STK_GOSUB 					; check TOS is this
.910e	a2 0e		ldx #$0e			ldx 	#ERRID_GOSUB 				; this error
.9110	20 06 a7	jsr $a706			jsr 	StackCheckFrame
.9113	20 2f a7	jsr $a72f			jsr 	STKLoadCodePosition 		; restore code position
.9116	20 f8 a6	jsr $a6f8			jsr 	StackClose
.9119	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/goto.asm

.911a					GotoCommand:
.911a	a2 00		ldx #$00			ldx 	#0 							; GOTO where
.911c	20 9e a5	jsr $a59e			jsr 	Evaluate16BitInteger
.911f					GotoStackX:
.911f	bd 10 04	lda $0410,x			lda  	NSMantissa1,x 				; put line # in XA. I'll keep this even though
.9122	48		pha				pha 								; it is slightly inefficient, just in cases.
.9123	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9126	fa		plx				plx
.9127	20 85 a6	jsr $a685			jsr 	MemorySearch 				; transfer to line number AX.
.912a	90 05		bcc $9131			bcc 	_GotoError 					; not found, off end.
.912c	d0 03		bne $9131			bne 	_GotoError 					; not found exactly
.912e	4c eb 94	jmp $94eb			jmp 	RunNewLine 					; and go straight to new line code.
.9131					_GotoError:
.9131	a9 0d		lda #$0d		lda	#13
.9133	4c eb 99	jmp $99eb		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/commands/hit.asm

.9136					UnaryHit:
.9136	fa		plx				plx
.9137	a9 36		lda #$36			lda 	#zTemp0
.9139	20 be a5	jsr $a5be			jsr 	Evaluate8BitInteger 		; get sprite number 0
.913c	20 71 ae	jsr $ae71			jsr 	CheckComma
.913f	e8		inx				inx
.9140	20 be a5	jsr $a5be			jsr 	Evaluate8BitInteger 		; get sprite number 1
.9143	20 69 ae	jsr $ae69			jsr		CheckRightBracket
.9146	5a		phy				phy 								; save Y position, end of unary func.
.9147	a0 38		ldy #$38			ldy 	#zTemp1 					; sprite address in zTemp1
.9149	20 60 91	jsr $9160			jsr 	_UHCalculateSpriteAddress
.914c	48		pha				pha 								; save half width on the stack.
.914d	ca		dex				dex
.914e	a0 36		ldy #$36			ldy 	#zTemp0 					; sprite address in zTemp0
.9150	20 60 91	jsr $9160			jsr 	_UHCalculateSpriteAddress
.9153	85 3a		sta $3a				sta 	zTemp2 						; sum of half-widths in zTemp2
.9155	68		pla				pla
.9156	18		clc				clc
.9157	65 3a		adc $3a				adc 	zTemp2
.9159	85 3a		sta $3a				sta 	zTemp2
.915b	20 26 a6	jsr $a626			jsr 	NSMSetZero 					; return zero.
.915e	7a		ply				ply
.915f	60		rts				rts
.9160					_UHCalculateSpriteAddress:
.9160	da		phx				phx 								; save X
.9161	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; sprite #, check range
.9164	c9 40		cmp #$40			cmp 	#64
.9166	b0 1c		bcs $9184			bcs		_UHGSNError
.9168	0a		asl a				asl 	a 							; x 8, overflow in carry flag
.9169	0a		asl a				asl 	a
.916a	0a		asl a				asl 	a
.916b	99 00 00	sta $0000,y			sta 	0,y 						; write LSB, also to zsTemp
.916e	a9 d9		lda #$d9			lda 	#$D9 						; sprites start at $D900
.9170	69 00		adc #$00			adc 	#0 							; add carry out
.9172	99 01 00	sta $0001,y			sta 	1,y 						; write MSB
.9175	98		tya				tya 								; calculate the size
.9176	aa		tax				tax
.9177	a1 00		lda ($00,x)			lda 	(0,x) 						; read the sprite control register.
.9179	29 60		and #$60			and 	#$60 						; size bits (00:32 20:24 40:60:8)
.917b	49 60		eor #$60			eor 	#$60 						; 00:8 20:16 40:24 60:32
.917d	4a		lsr a				lsr 	a 							; / 4 and CLC
.917e	4a		lsr a				lsr 	a 							; 00:8 08:16 10:24 18:32
.917f	69 08		adc #$08			adc 	#8 							; 08:8 10:16 18:24 20:32
.9181	4a		lsr a				lsr 	a 							; half the size.
.9182	fa		plx				plx 								; restore X
.9183	60		rts				rts
.9184					_UHGSNError:
.9184	a9 04		lda #$04		lda	#4
.9186	4c eb 99	jmp $99eb		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/if.asm

.9189					IfCommand:
.9189	a2 00		ldx #$00			ldx 	#0 							; If what.
.918b	20 66 a5	jsr $a566			jsr 	EvaluateNumber
.918e	b1 30		lda ($30),y			lda 	(codePtr),y
.9190	c9 a7		cmp #$a7			cmp 	#KWD_THEN  					; could be THEN <stuff> or GOTO
.9192	d0 0a		bne $919e			bne 	_IFStructured
.9194	c8		iny				iny 								; consume THEN
.9195	20 56 a6	jsr $a656			jsr 	NSMIsZero 					; is it zero
.9198	f0 01		beq $919b			beq 	_IfFail 					; if fail, go to next line
.919a	60		rts				rts 								; if THEN just continue
.919b					_IfFail:
.919b	4c 50 95	jmp $9550			jmp 	EOLCommand
.919e					_IfStructured:
.919e	20 56 a6	jsr $a656			jsr 	NSMIsZero 					; is it zero
.91a1	d0 07		bne $91aa			bne 	_IfExit 					; if not, then continue normally.
.91a3	a9 b4		lda #$b4			lda 	#KWD_ELSE 					; look for else/endif
.91a5	a2 a4		ldx #$a4			ldx 	#KWD_ENDIF
.91a7	20 46 99	jsr $9946			jsr 	ScanForward 				; and run from there/
.91aa					_IfExit:
.91aa	60		rts				rts
.91ab					ElseCode:
.91ab	a9 a4		lda #$a4			lda 	#KWD_ENDIF 					; else is only run after the if clause succeeds
.91ad	aa		tax				tax 								; so just go to the structure exit
.91ae	20 46 99	jsr $9946			jsr 	ScanForward
.91b1	60		rts				rts
.91b2					EndIf:
.91b2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/commands/joy.asm

.91b3					UnaryJoyX:
.91b3	18		clc				clc
.91b4	80 01		bra $91b7			bra 	JoyMain
.91b6					UnaryJoyY:
.91b6	38		sec				sec
.91b7					JoyMain:
.91b7	fa		plx				plx 								; get pos
.91b8	08		php				php 								; save carry (set for Y)
.91b9	20 be a5	jsr $a5be			jsr 	Evaluate8BitInteger 		; ignore the parameter
.91bc	20 69 ae	jsr $ae69			jsr 	CheckRightBracket
.91bf	20 55 b6	jsr $b655			jsr 	EXTReadController 			; read the controller.
.91c2	28		plp				plp
.91c3	90 02		bcc $91c7			bcc 	_JMNoShift 					; if Y then shift bits 3,2 -> 1,0
.91c5	4a		lsr a				lsr 	a
.91c6	4a		lsr a				lsr 	a
.91c7					_JMNoShift:
.91c7	4a		lsr a				lsr 	a 							; if bit 0 set then right/down e.g. +1
.91c8	b0 0a		bcs $91d4			bcs 	_JMIsRight
.91ca	4a		lsr a				lsr 	a 							; if bit 1 set then left/up e.g. -1
.91cb	b0 04		bcs $91d1			bcs 	_JMIsLeft
.91cd	20 26 a6	jsr $a626			jsr 	NSMSetZero 					; zero result
.91d0	60		rts				rts
.91d1					_JMIsLeft:
.91d1	4c 58 9a	jmp $9a58			jmp 	ReturnTrue
.91d4					_JMIsRight:
.91d4	a9 01		lda #$01			lda 	#1
.91d6	20 28 a6	jsr $a628			jsr 	NSMSetByte
.91d9	60		rts				rts
.91da					UnaryJoyB:
.91da	fa		plx				plx 								; get pos
.91db	20 be a5	jsr $a5be			jsr 	Evaluate8BitInteger 		; ignore the parameter
.91de	20 69 ae	jsr $ae69			jsr 	CheckRightBracket
.91e1	20 55 b6	jsr $b655			jsr 	EXTReadController 			; read the controller.
.91e4	4a		lsr a				lsr 	a
.91e5	4a		lsr a				lsr 	a
.91e6	4a		lsr a				lsr 	a
.91e7	4a		lsr a				lsr 	a
.91e8	29 01		and #$01			and 	#1
.91ea	20 28 a6	jsr $a628			jsr 	NSMSetByte
.91ed	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/let.asm

.91ee					LetCommand:
.91ee	a2 00		ldx #$00			ldx 	#0
.91f0	b1 30		lda ($30),y			lda 	(codePtr),y
.91f2	c9 10		cmp #$10			cmp 	#KWD_AT
.91f4	d0 16		bne $920c			bne 	_LCStandard
.91f6	c8		iny				iny 								; skip equal
.91f7	20 cd a0	jsr $a0cd			jsr 	EvaluateTerm 				; get a number
.91fa	20 11 9f	jsr $9f11			jsr 	Dereference 				; dereference it
.91fd	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check integer
.9200	49 20		eor #$20			eor 	#NSBIsReference	 			; toggle reference
.9202	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9205	29 20		and #$20			and 	#NSBIsReference 			; if it is now a reference, continue
.9207	d0 10		bne $9219			bne 	_LCMain
.9209	4c 61 b4	jmp $b461			jmp 	TypeError 					; was a reference before.
.920c					_LCStandard:
.920c	ad e4 9d	lda $9de4			lda 	PrecedenceLevel+"*"			; precedence > this
.920f	20 fe 9d	jsr $9dfe			jsr 	EvaluateExpressionAtPrecedence
.9212	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; is it a reference to an array
.9215	c9 38		cmp #$38			cmp		#NSTProcedure+NSBIsReference
.9217	f0 0e		beq $9227			beq 	_LetGoProc 					; it's a procedure call.
.9219					_LCMain:
.9219	a9 3d		lda #$3d			lda 	#"=" 						; check =
.921b	20 79 ae	jsr $ae79			jsr 	CheckNextA
.921e	e8		inx				inx 								; RHS
.921f	20 5d a5	jsr $a55d			jsr 	EvaluateValue
.9222	ca		dex				dex
.9223	20 2a 92	jsr $922a			jsr 	AssignVariable
.9226	60		rts				rts
.9227					_LetGoProc:
.9227	4c c6 93	jmp $93c6			jmp 	CallProcedure
.922a					AssignVariable:
.922a	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check the string/number type bits match
.922d	48		pha				pha 								; save a copy
.922e	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.9231	29 10		and #$10			and 	#NSBIsString
.9233	d0 0b		bne $9240			bne 	_ASError
.9235	68		pla				pla 								; get back
.9236	29 10		and #$10			and 	#NSBIsString 				; check type
.9238	d0 03		bne $923d			bne 	_ASString
.923a	4c 39 9e	jmp $9e39			jmp 	AssignNumber
.923d					_ASString:
.923d	4c a7 9e	jmp $9ea7			jmp 	AssignString
.9240					_ASError:
.9240	4c 61 b4	jmp $b461			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/list.asm

.9243					Command_List:
.9243	9c a6 04	stz $04a6			stz 	listIndent 					; reset indent.
.9246	9c 0c 04	stz $040c			stz		NSMantissa0+4				; set the lower (slot 4) to 0 and upper (slot 7) to $FFFF
.9249	9c 14 04	stz $0414			stz 	NSMantissa1+4
.924c	a9 ff		lda #$ff			lda 	#$FF
.924e	8d 0f 04	sta $040f			sta 	NSMantissa0+7
.9251	8d 17 04	sta $0417			sta 	NSMantissa1+7
.9254	b1 30		lda ($30),y			lda 	(codePtr),y
.9256	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.9258	f0 1e		beq $9278			beq 	_CLSecond
.925a	20 d6 92	jsr $92d6			jsr 	CLIsDigit 					; if not digit, list all
.925d	b0 24		bcs $9283			bcs 	_CLStart
.925f	a2 04		ldx #$04			ldx 	#4 							; get 1st range into slot 4
.9261	20 9e a5	jsr $a59e			jsr 	Evaluate16BitInteger
.9264	b1 30		lda ($30),y			lda 	(codePtr),y
.9266	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.9268	f0 0e		beq $9278			beq 	_CLSecond 					; if so go get it
.926a	ad 0c 04	lda $040c			lda 	NSMantissa0+4 				; copy 4->7
.926d	8d 0f 04	sta $040f			sta 	NSMantissa0+7
.9270	ad 14 04	lda $0414			lda 	NSMantissa1+4
.9273	8d 17 04	sta $0417			sta 	NSMantissa1+7
.9276	80 0b		bra $9283			bra 	_CLStart
.9278					_CLSecond:
.9278	c8		iny				iny 								; consume comma
.9279	20 d6 92	jsr $92d6			jsr 	CLIsDigit 					; digit found
.927c	b0 05		bcs $9283			bcs 	_CLStart 					; if not, continue listing
.927e	a2 07		ldx #$07			ldx 	#7 							; load 2nd range into slot 7
.9280	20 9e a5	jsr $a59e			jsr 	Evaluate16BitInteger
.9283					_CLStart
.9283	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.9285	85 30		sta $30				sta 	codePtr
.9287	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.9289	85 31		sta $31				sta 	codePtr+1
.928b					_CLLoop:
.928b	20 52 b6	jsr $b652			jsr 	EXTBreakCheck 				; break check
.928e	f0 30		beq $92c0			beq 	_CLExit
.9290	b2 30		lda ($30)			lda 	(codePtr)
.9292	f0 2c		beq $92c0			beq 	_CLExit
.9294	a2 04		ldx #$04			ldx 	#4 							; check range every time, line numbers aren't in order.
.9296	20 c3 92	jsr $92c3			jsr 	CLCompareLineNo
.9299	90 18		bcc $92b3			bcc 	_CLNext
.929b	a2 07		ldx #$07			ldx 	#7
.929d	20 c3 92	jsr $92c3			jsr 	CLCompareLineNo
.92a0	f0 02		beq $92a4			beq 	_CLDoThisOne
.92a2	b0 0f		bcs $92b3			bcs 	_CLNext
.92a4					_CLDoThisOne:
.92a4	20 4b 97	jsr $974b			jsr 	ListConvertLine 			; convert line into token Buffer
.92a7	a2 04		ldx #$04			ldx 	#(tokenBuffer >> 8) 		; print that line
.92a9	a9 aa		lda #$aa			lda 	#(tokenBuffer & $FF)
.92ab	20 44 9a	jsr $9a44			jsr 	PrintStringXA
.92ae	a9 0d		lda #$0d			lda 	#13 						; new line
.92b0	20 11 b6	jsr $b611			jsr 	EXTPrintCharacter
.92b3					_CLNext:
.92b3	18		clc				clc
.92b4	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.92b6	65 30		adc $30				adc 	codePtr
.92b8	85 30		sta $30				sta 	codePtr
.92ba	90 02		bcc $92be			bcc 	_CREExit
.92bc	e6 31		inc $31				inc 	codePtr+1
.92be					_CREExit:
.92be	80 cb		bra $928b			bra 	_CLLoop
.92c0					_CLExit:
.92c0	4c 5f 8b	jmp $8b5f			jmp 	WarmStart
.92c3					CLCompareLineNo:
.92c3	38		sec				sec
.92c4	a0 01		ldy #$01			ldy 	#1
.92c6	b1 30		lda ($30),y			lda 	(codePtr),y
.92c8	fd 08 04	sbc $0408,x			sbc 	NSMantissa0,x
.92cb	85 36		sta $36				sta 	zTemp0
.92cd	c8		iny				iny
.92ce	b1 30		lda ($30),y			lda 	(codePtr),y
.92d0	fd 10 04	sbc $0410,x			sbc 	NSMantissa1,x
.92d3	05 36		ora $36				ora 	zTemp0
.92d5	60		rts				rts
.92d6					CLIsDigit:
.92d6	b1 30		lda ($30),y			lda 	(codePtr),y
.92d8	c9 30		cmp #$30			cmp 	#"0"
.92da	90 03		bcc $92df			bcc	 	_CLIDExitFalse
.92dc	c9 3a		cmp #$3a			cmp 	#"9"+1
.92de	60		rts				rts
.92df					_CLIDExitFalse:
.92df	38		sec				sec
.92e0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/local.asm

.92e1					Command_LOCAL:
.92e1	a2 00		ldx #$00			ldx 	#0 							; at level 0
.92e3	20 ef 92	jsr $92ef			jsr 	LocaliseNextTerm 			; convert term to a local.
.92e6	b1 30		lda ($30),y			lda 	(codePtr),y
.92e8	c8		iny				iny
.92e9	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.92eb	f0 f4		beq $92e1			beq 	Command_LOCAL
.92ed	88		dey				dey 								; unpick pre-get
.92ee	60		rts				rts
.92ef					LocaliseNextTerm:
.92ef	20 cd a0	jsr $a0cd			jsr 	EvaluateTerm 				; evaluate the term
.92f2	bd 00 04	lda $0400,x			lda 	NSStatus,x
.92f5	29 20		and #$20			and 	#NSBIsReference 			; check it is a reference
.92f7	f0 69		beq $9362			beq		_LNTError
.92f9	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address of variable to zTemp0
.92fc	85 36		sta $36				sta 	zTemp0
.92fe	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9301	85 37		sta $37				sta  	zTemp0+1
.9303	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9306	29 10		and #$10			and 	#NSBIsString
.9308	d0 22		bne $932c			bne 	_LNTPushString
.930a	5a		phy				phy
.930b	a0 00		ldy #$00			ldy 	#0 							; push 0 to 4 inclusive, the number values, on the stack, and zero them as you go.
.930d					_LNTPushNumLoop:
.930d	b1 36		lda ($36),y			lda		(zTemp0),y
.930f	20 b8 a6	jsr $a6b8			jsr 	StackPushByte
.9312	a9 00		lda #$00			lda 	#0
.9314	91 36		sta ($36),y			sta 	(zTemp0),y
.9316	c8		iny				iny
.9317	c0 05		cpy #$05			cpy 	#5
.9319	d0 f2		bne $930d			bne 	_LNTPushNumLoop
.931b	a5 36		lda $36				lda 	zTemp0 						; push the actual target address to write on the stack
.931d	20 b8 a6	jsr $a6b8			jsr 	StackPushByte
.9320	a5 37		lda $37				lda 	zTemp0+1
.9322	20 b8 a6	jsr $a6b8			jsr 	StackPushByte
.9325	a9 01		lda #$01			lda 	#STK_LOCALN 				; push local-number marker.
.9327	20 b8 a6	jsr $a6b8			jsr 	StackPushByte
.932a	7a		ply				ply
.932b	60		rts				rts
.932c					_LNTPushString:
.932c	5a		phy				phy
.932d	b2 36		lda ($36)			lda 	(zTemp0) 					; put address of string in zTemp1
.932f	85 38		sta $38				sta 	zTemp1
.9331	a0 01		ldy #$01			ldy 	#1
.9333	b1 36		lda ($36),y			lda 	(zTemp0),y
.9335	85 39		sta $39				sta 	zTemp1+1
.9337	a0 00		ldy #$00			ldy 	#0 							; output string
.9339	c9 00		cmp #$00			cmp 	#0 							; if not assigned strin
.933b	f0 0a		beq $9347			beq 	_LNTStringOut
.933d					_LNTPushStrLoop:
.933d	b1 38		lda ($38),y			lda 	(zTemp1),y
.933f	f0 06		beq $9347			beq 	_LNTStringOut
.9341	20 b8 a6	jsr $a6b8			jsr 	StackPushByte
.9344	c8		iny				iny
.9345	80 f6		bra $933d			bra 	_LNTPushStrLoop
.9347					_LNTStringOut:
.9347	98		tya				tya									; output length
.9348	20 b8 a6	jsr $a6b8			jsr 	StackPushByte
.934b	a9 00		lda #$00			lda 	#0 							; clear original string.
.934d	92 38		sta ($38)			sta 	(zTemp1)
.934f	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; output address of the string record *not* the string itself
.9352	20 b8 a6	jsr $a6b8			jsr 	StackPushByte
.9355	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9358	20 b8 a6	jsr $a6b8			jsr 	StackPushByte
.935b	a9 02		lda #$02			lda 	#STK_LOCALS 				; push local-string marker.
.935d	20 b8 a6	jsr $a6b8			jsr 	StackPushByte
.9360	7a		ply				ply
.9361	60		rts				rts
.9362					_LNTError:
.9362	4c 57 b4	jmp $b457			jmp 	SyntaxError
.ae10					LocalPopValue:
.ae10	20 d1 a6	jsr $a6d1			jsr 	StackPopByte
.ae13	c9 01		cmp #$01			cmp 	#STK_LOCALN 				; if not local-N
.ae15	d0 17		bne $ae2e			bne 	_LPVString
.ae17	20 d1 a6	jsr $a6d1			jsr 	StackPopByte 				; address
.ae1a	85 37		sta $37				sta 	zTemp0+1
.ae1c	20 d1 a6	jsr $a6d1			jsr 	StackPopByte
.ae1f	85 36		sta $36				sta 	zTemp0
.ae21	5a		phy				phy
.ae22	a0 04		ldy #$04			ldy 	#4 							; copy back
.ae24					_LPVNumberCopy:
.ae24	20 d1 a6	jsr $a6d1			jsr 	StackPopByte
.ae27	91 36		sta ($36),y			sta 	(zTemp0),y
.ae29	88		dey				dey
.ae2a	10 f8		bpl $ae24			bpl 	_LPVNumberCopy
.ae2c	7a		ply				ply 								; and complete
.ae2d	60		rts				rts
.ae2e					_LPVString:
.ae2e	20 d1 a6	jsr $a6d1			jsr 	StackPopByte 				; address of record => zTemp0
.ae31	85 37		sta $37				sta 	zTemp0+1
.ae33	20 d1 a6	jsr $a6d1			jsr 	StackPopByte
.ae36	85 36		sta $36				sta 	zTemp0
.ae38	5a		phy				phy
.ae39	b2 36		lda ($36)			lda 	(zTemp0) 					; address to write string to => zTemp1
.ae3b	85 38		sta $38				sta 	zTemp1
.ae3d	a0 01		ldy #$01			ldy 	#1
.ae3f	b1 36		lda ($36),y			lda 	(zTemp0),y
.ae41	85 39		sta $39				sta 	zTemp1+1
.ae43	20 d1 a6	jsr $a6d1			jsr 	StackPopByte 				; # to get => y
.ae46	a8		tay				tay
.ae47	a5 39		lda $39				lda 	zTemp1+1 					; if no target (e.g. was "" originally) exit
.ae49	f0 0e		beq $ae59			beq 	_LPVStringCopied
.ae4b	a9 00		lda #$00			lda 	#0 							; NULL on end
.ae4d	91 38		sta ($38),y			sta 	(zTemp1),y
.ae4f					_LPVStringCopy:
.ae4f	88		dey				dey
.ae50	30 07		bmi $ae59			bmi 	_LPVStringCopied
.ae52	20 d1 a6	jsr $a6d1			jsr 	StackPopByte
.ae55	91 38		sta ($38),y			sta 	(zTemp1),y
.ae57	80 f6		bra $ae4f			bra 	_LPVStringCopy
.ae59					_LPVStringCopied:
.ae59	fa		plx				plx
.ae5a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/new.asm

.9365					NewCommand:
.9365	20 63 a6	jsr $a663			jsr 	MemoryNew
.9368	9c 00 10	stz $1000			stz 	VariableSpace 				; erase all variables.
.936b	20 f8 8b	jsr $8bf8			jsr 	ClearCommand 				; clear everything.
.936e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/print.asm

.936f					Command_Print:
.936f	18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.9370					_CPLoop:
.9370	08		php				php 								; save last action flag
.9371	b1 30		lda ($30),y			lda 	(codePtr),y
.9373	c9 80		cmp #$80			cmp  	#KWC_EOL 					; end of line or colon, exit now.
.9375	f0 46		beq $93bd			beq 	_CPExit
.9377	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.9379	f0 42		beq $93bd			beq 	_CPExit
.937b	68		pla				pla 								; throw last action flag
.937c	b1 30		lda ($30),y			lda 	(codePtr),y
.937e	c8		iny				iny
.937f	c9 3b		cmp #$3b			cmp 	#KWD_SEMICOLON				; is it a semicolon
.9381	f0 37		beq $93ba			beq 	_CPContinueWithSameLine
.9383	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; comma
.9385	f0 2e		beq $93b5			beq 	_CPTab
.9387	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; apostrophe (new line)
.9389	f0 26		beq $93b1			beq 	_CPNewLine
.938b	88		dey				dey 								; undo the get.
.938c	a2 00		ldx #$00			ldx 	#0
.938e	20 5d a5	jsr $a55d			jsr 	EvaluateValue 				; get a value into slot 0
.9391	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; is it a number
.9394	29 10		and #$10			and 	#NSBIsString
.9396	f0 0b		beq $93a3			beq 	_CPNumber
.9398	ae 10 04	ldx $0410			ldx 	NSMantissa1 				; string, print the text.
.939b	ad 08 04	lda $0408			lda 	NSMantissa0
.939e	20 44 9a	jsr $9a44			jsr 	PrintStringXA
.93a1	80 cc		bra $936f			bra 	Command_Print 				; loop round clearing carry so NL if end
.93a3					_CPNumber:
.93a3	a9 05		lda #$05			lda 	#5 							; maximum decimals
.93a5	20 33 a4	jsr $a433			jsr 	ConvertNumberToString 		; convert to string
.93a8	a2 06		ldx #$06			ldx 	#DecimalBuffer >> 8
.93aa	a9 1a		lda #$1a			lda 	#DecimalBuffer & $FF
.93ac	20 44 9a	jsr $9a44			jsr 	PrintStringXA
.93af	80 be		bra $936f			bra 	Command_Print 				; loop round clearing carry so NL if end
.93b1					_CPNewLine:
.93b1	a9 0d		lda #$0d			lda 	#13
.93b3	80 02		bra $93b7			bra 	_CPPrintChar
.93b5					_CPTab:
.93b5	a9 09		lda #$09			lda 	#9 							; print TAB
.93b7					_CPPrintChar:
.93b7	20 11 b6	jsr $b611			jsr 	EXTPrintCharacter
.93ba					_CPContinueWithSameLine:
.93ba	38		sec				sec 								; loop round with carry set, which
.93bb	80 b3		bra $9370			bra 	_CPLoop 					; will inhibit final CR
.93bd					_CPExit:
.93bd	28		plp				plp 								; get last action flag
.93be	b0 05		bcs $93c5			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.93c0	a9 0d		lda #$0d			lda 	#13 						; print new line
.93c2	20 11 b6	jsr $b611			jsr 	EXTPrintCharacter
.93c5					_CPExit2:
.93c5	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/procedure.asm

=2					ParameterStackPos = 2
.93c6					CallProcedure:
.93c6	a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start storing parameters at 2.
.93c8	b1 30		lda ($30),y			lda 	(codePtr),y
.93ca	c9 29		cmp #$29			cmp 	#KWD_RPAREN
.93cc	f0 0c		beq $93da			beq 	_CPEndParam
.93ce					_CPParamLoop:
.93ce	20 5d a5	jsr $a55d			jsr 	EvaluateValue 				; get parameter onto stack
.93d1	e8		inx				inx 								; bump next stack
.93d2	b1 30		lda ($30),y			lda 	(codePtr),y
.93d4	c8		iny				iny
.93d5	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if comma, go back and try again.
.93d7	f0 f5		beq $93ce			beq 	_CPParamLoop
.93d9	88		dey				dey 								; unpick.
.93da					_CPEndParam:
.93da	8e 96 04	stx $0496			stx 	LastParameter 				; save the last parameters index.
.93dd	c8		iny				iny									; skip right bracket
.93de	a9 b3		lda #$b3			lda 	#STK_PROC+3 				; allocate 6 bytes on the return stack.
.93e0	20 da a6	jsr $a6da			jsr 	StackOpen
.93e3	20 1e a7	jsr $a71e			jsr 	STKSaveCodePosition 		; save loop position
.93e6	ad 08 04	lda $0408			lda 	NSMantissa0 				; copy variable (e.g. procedure) address to zTemp0
.93e9	85 36		sta $36				sta 	zTemp0 						; this is the DATA not the RECORD
.93eb	ad 10 04	lda $0410			lda 	NSMantissa1
.93ee	85 37		sta $37				sta 	zTemp0+1
.93f0	a0 01		ldy #$01			ldy 	#1 							; copy code address back.
.93f2	b2 36		lda ($36)			lda 	(zTemp0)
.93f4	85 30		sta $30				sta 	safePtr
.93f6	b1 36		lda ($36),y			lda 	(zTemp0),y
.93f8	85 31		sta $31				sta 	safePtr+1
.93fa	c8		iny				iny
.93fb	b1 36		lda ($36),y			lda 	(zTemp0),y
.93fd	85 32		sta $32				sta 	safePtr+2
.93ff	c8		iny				iny
.9400	b1 36		lda ($36),y			lda 	(zTemp0),y
.9402	85 33		sta $33				sta 	safePtr+3
.9404	c8		iny				iny 								; get Y offset -> Y
.9405	b1 36		lda ($36),y			lda 	(zTemp0),y
.9407	a8		tay				tay
.9408	a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start position of parameters
.940a	ec 96 04	cpx $0496			cpx	 	LastParameter 				; check no parameters at the start
.940d	f0 13		beq $9422			beq 	_ParamExit 					; if so, exit.
.940f					_ParamExtract:
.940f	ca		dex				dex 								; put a local term on the level before
.9410	20 ef 92	jsr $92ef			jsr 	LocaliseNextTerm			; also pushes original param value to basic stack
.9413	20 2a 92	jsr $922a			jsr 	AssignVariable 				; assign stacked value to the variable.
.9416	e8		inx				inx 								; advance to next parameter to do.
.9417	e8		inx				inx
.9418	ec 96 04	cpx $0496			cpx 	LastParameter 				; are we done ?
.941b	f0 05		beq $9422			beq 	_ParamExit
.941d	20 71 ae	jsr $ae71			jsr 	CheckComma 					; comma seperating parameters
.9420	80 ed		bra $940f			bra 	_ParamExtract
.9422					_ParamExit:
.9422	20 69 ae	jsr $ae69			jsr 	CheckRightBracket 			; check )
.9425	60		rts				rts 								; and continue from here
.ae5b					Command_ENDPROC:
.ae5b	a9 b0		lda #$b0			lda 	#STK_PROC 					; check TOS is this
.ae5d	a2 14		ldx #$14			ldx 	#ERRID_PROC
.ae5f	20 06 a7	jsr $a706			jsr 	StackCheckFrame
.ae62	20 2f a7	jsr $a72f			jsr 	STKLoadCodePosition 		; restore code position
.ae65	20 f8 a6	jsr $a6f8			jsr 	StackClose
.ae68	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/read.asm

.9426					Command_Read:
.9426	a2 00		ldx #$00			ldx 	#0 							; evaluate the term which is the var/array element to assign
.9428	20 cd a0	jsr $a0cd			jsr 	EvaluateTerm
.942b	bd 00 04	lda $0400,x			lda 	NSStatus,x
.942e	29 20		and #$20			and 	#NSBIsReference				; get status byte on stack, identifies int, float, string.
.9430	f0 4a		beq $947c			beq 	_CRSyntax 					; check reference (bit 0)
.9432	20 c5 94	jsr $94c5			jsr 	SwapDataCodePtrs 			; swap code and data
.9435	ad 9c 04	lda $049c			lda 	inDataStatement 			; if in a data statement, we don't need to search
.9438	d0 20		bne $945a			bne 	_CRContinueData
.943a					_CRKeepSearching:
.943a	a9 b1		lda #$b1			lda 	#KWD_DATA 					; scan for instruction
.943c	aa		tax				tax
.943d	20 46 99	jsr $9946			jsr 	ScanForward
.9440	c9 b1		cmp #$b1			cmp 	#KWD_DATA 					; found data ?
.9442	f0 16		beq $945a			beq 	_CRHaveData 				; found it
.9444	18		clc				clc
.9445	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.9447	65 30		adc $30				adc 	codePtr
.9449	85 30		sta $30				sta 	codePtr
.944b	90 02		bcc $944f			bcc 	_CREExit
.944d	e6 31		inc $31				inc 	codePtr+1
.944f					_CREExit:
.944f	a0 03		ldy #$03			ldy 	#3 							; start of line.
.9451	b2 30		lda ($30)			lda 	(codePtr)
.9453	d0 e5		bne $943a			bne 	_CRKeepSearching
.9455	a9 0b		lda #$0b		lda	#11
.9457	4c eb 99	jmp $99eb		jmp	ErrorHandler
.945a					_CRHaveData:
.945a					_CRContinueData:
.945a	a2 01		ldx #$01			ldx 	#1
.945c	20 5d a5	jsr $a55d			jsr 	EvaluateValue 				; evaluate value into slot # 1
.945f	ca		dex				dex
.9460	20 2a 92	jsr $922a			jsr		AssignVariable 				; do the assignment
.9463	9c 9c 04	stz $049c			stz 	inDataStatement 			; clear in data
.9466	b1 30		lda ($30),y			lda 	(codePtr),y
.9468	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not, end of data statement
.946a	d0 04		bne $9470			bne 	_CRSwapBack
.946c	c8		iny				iny 								; consume comma
.946d	ee 9c 04	inc $049c			inc 	inDataStatement 			; set in data statement currently.
.9470					_CRSwapBack:
.9470	20 c5 94	jsr $94c5			jsr 	SwapDataCodePtrs			; swap them back.
.9473	b1 30		lda ($30),y			lda 	(codePtr),y
.9475	c8		iny				iny
.9476	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.9478	f0 ac		beq $9426			beq 	Command_Read 				; if so go round again.
.947a	88		dey				dey 								; unpick get.
.947b	60		rts				rts
.947c					_CRSyntax:
.947c	4c 57 b4	jmp $b457			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/rem.asm

.947f					RemCommand:
.947f	b1 30		lda ($30),y			lda 	(codePtr),y
.9481	c9 ff		cmp #$ff			cmp 	#KWC_STRING
.9483	d0 06		bne $948b			bne 	_RMExit
.9485	c8		iny				iny
.9486	98		tya				tya
.9487	38		sec				sec
.9488	71 30		adc ($30),y			adc 	(codePtr),y
.948a	a8		tay				tay
.948b					_RMExit:
.948b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/repeat.asm

.948c					Command_REPEAT:
.948c	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; allocate 6 bytes on the return stack.
.948e	20 da a6	jsr $a6da			jsr 	StackOpen
.9491	20 1e a7	jsr $a71e			jsr 	STKSaveCodePosition 		; save loop position
.9494	60		rts				rts
.9495					Command_UNTIL:
.9495	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; check REPEAT is TOS
.9497	a2 0f		ldx #$0f			ldx 	#ERRID_REPEAT 				; this error
.9499	20 06 a7	jsr $a706			jsr 	StackCheckFrame
.949c	a2 00		ldx #$00			ldx 	#0
.949e	20 66 a5	jsr $a566			jsr 	EvaluateNumber 				; work out the number
.94a1	20 56 a6	jsr $a656			jsr 	NSMIsZero 					; check if zero
.94a4	f0 04		beq $94aa			beq 	_CULoopBack 				; if so keep looping
.94a6	20 f8 a6	jsr $a6f8			jsr 	StackClose		 			; return
.94a9	60		rts				rts
.94aa					_CULoopBack:
.94aa	20 2f a7	jsr $a72f			jsr 	STKLoadCodePosition 		; loop back
.94ad	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/restore.asm

.94ae					Command_Restore:
.94ae	20 c5 94	jsr $94c5			jsr 	SwapDataCodePtrs 			; swap code and data
.94b1	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.94b3	85 30		sta $30				sta 	codePtr
.94b5	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.94b7	85 31		sta $31				sta 	codePtr+1
.94b9	20 c5 94	jsr $94c5			jsr 	SwapDataCodePtrs 			; put them back
.94bc	a9 03		lda #$03			lda 	#3 							; start at offset 3, e.g. first instruction of first line.
.94be	8d 9b 04	sta $049b			sta 	dataPointer+4
.94c1	9c 9c 04	stz $049c			stz 	inDataStatement 			; not in data statement
.94c4	60		rts				rts
.94c5					SwapDataCodePtrs:
.94c5	da		phx				phx
.94c6	a2 03		ldx #$03			ldx 	#3 							; swap 32 bit code pointer over
.94c8					_SDCPLoop:
.94c8	b5 30		lda $30,x			lda 	safePtr,x
.94ca	48		pha				pha
.94cb	bd 97 04	lda $0497,x			lda 	dataPointer,x
.94ce	95 30		sta $30,x			sta 	safePtr,x
.94d0	68		pla				pla
.94d1	9d 97 04	sta $0497,x			sta 	dataPointer,x
.94d4	ca		dex				dex
.94d5	10 f1		bpl $94c8			bpl 	_SDCPLoop
.94d7	ad 9b 04	lda $049b			lda 	dataPointer+4 				; swap Y position over.
.94da	8c 9b 04	sty $049b			sty 	dataPointer+4
.94dd	a8		tay				tay
.94de	fa		plx				plx
.94df	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/run.asm

.94e0					CommandRUN:
.94e0	20 f8 8b	jsr $8bf8			jsr 	ClearCommand 				; clear variable/stacks/etc.
.94e3	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.94e5	85 30		sta $30				sta 	codePtr
.94e7	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.94e9	85 31		sta $31				sta 	codePtr+1
.94eb					RUNNewLine:
.94eb	b2 30		lda ($30)			lda 	(codePtr)
.94ed	f0 5e		beq $954d			beq 	CRNoProgram         		; no then END.
.94ef	a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack
.94f1	9a		txs				txs
.94f2					RUNCodePointerLine:
.94f2	a0 02		ldy #$02			ldy 	#2 							; start of program
.94f4					_CRIncMainLoop:
.94f4	0e 93 04	asl $0493			asl 	breakCheck 					; clears 1 time in 8
.94f7	d0 05		bne $94fe			bne 	_CRNoBreakCheck
.94f9	20 52 b6	jsr $b652			jsr 	EXTBreakCheck 				; break check
.94fc	f0 4a		beq $9548			beq 	_CRBreak
.94fe					_CRNoBreakCheck:
.94fe	c8		iny				iny
.94ff					_CRMainLoop:
.94ff	9c 90 04	stz $0490			stz 	stringInitialised 			; clear the temporary string initialised flag.
.9502	b1 30		lda ($30),y			lda 	(codePtr),y
.9504	10 10		bpl $9516			bpl 	_CRNotKeyword
.9506	c9 9f		cmp #$9f			cmp 	#KWC_LAST_UNARY+1 			; if after unary, legitimate command
.9508	b0 04		bcs $950e			bcs 	_CRIsKeyword
.950a	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if unary, syntax error.
.950c	b0 34		bcs $9542			bcs		_CRSyntaxError
.950e					_CRIsKeyword:
.950e	c8		iny				iny 								; consume command
.950f	0a		asl a				asl 	a 							; double losing the MSB which is '1' as tokens are $80-$FF
.9510	aa		tax				tax 								; put in X for vector jump
.9511	20 45 95	jsr $9545			jsr 	_CRCallVector0 				; call the vector - effectively jsr (vectortable,X)
.9514	80 e9		bra $94ff			bra 	_CRMainLoop 				; and loop round
.9516					_CRNotKeyword:
.9516	c9 3a		cmp #$3a			cmp 	#KWD_COLON 					; if a :, consume it and go round.
.9518	f0 da		beq $94f4			beq 	_CRIncMainLoop
.951a	c9 40		cmp #$40			cmp 	#$40 						; variable/call reference
.951c	90 05		bcc $9523			bcc 	_CRNotVariable
.951e					_CRGoLet:
.951e	20 ee 91	jsr $91ee			jsr 	LetCommand
.9521	80 dc		bra $94ff			bra 	_CRMainLoop
.9523					_CRNotVariable:
.9523	c9 10		cmp #$10			cmp 	#KWD_AT 					; handle @
.9525	f0 f7		beq $951e			beq 	_CRGoLet
.9527	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; handle ? !
.9529	f0 f3		beq $951e			beq 	_CRGoLet
.952b	c9 21		cmp #$21			cmp 	#KWD_PLING
.952d	f0 ef		beq $951e			beq 	_CRGoLet
.952f	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; handle ' (comment)
.9531	f0 09		beq $953c			beq 	_CRGoRem
.9533	c9 2e		cmp #$2e			cmp 	#KWD_PERIOD 				; handle . (assembler label)
.9535	d0 0b		bne $9542			bne 	_CRSyntaxError
.9537	20 98 8a	jsr $8a98			jsr 	LabelHere
.953a	80 c3		bra $94ff			bra 	_CRMainLoop
.953c					_CRGoRem:
.953c	c8		iny				iny
.953d	20 7f 94	jsr $947f			jsr 	RemCommand
.9540	80 bd		bra $94ff			bra 	_CRMainLoop
.9542					_CRSyntaxError:
.9542	4c 57 b4	jmp $b457			jmp 	SyntaxError
.9545					_CRCallVector0:
.9545	7c f0 95	jmp ($95f0,x)			jmp 	(VectorSet0,x)
.9548					_CRBreak:
.9548	a9 01		lda #$01		lda	#1
.954a	4c eb 99	jmp $99eb		jmp	ErrorHandler
.954d					CRNoProgram:
.954d	4c 1b 8d	jmp $8d1b			jmp 	EndCommand
.9550					EOLCommand:
.9550	18		clc				clc
.9551	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.9553	65 30		adc $30				adc 	codePtr
.9555	85 30		sta $30				sta 	codePtr
.9557	90 02		bcc $955b			bcc 	_CREExit
.9559	e6 31		inc $31				inc 	codePtr+1
.955b					_CREExit:
.955b	80 8e		bra $94eb			bra 	RunNewLine
.955d					Shift1Command:
.955d	b1 30		lda ($30),y			lda 	(codePtr),y
.955f	c8		iny				iny
.9560	0a		asl a				asl 	a
.9561	aa		tax				tax
.9562	7c 88 96	jmp ($9688,x)			jmp 	(VectorSet1,x)
.9565					Shift2Command:
.9565	b1 30		lda ($30),y			lda 	(codePtr),y
.9567	c8		iny				iny
.9568	0a		asl a				asl 	a
.9569	aa		tax				tax
.956a	7c a2 96	jmp ($96a2,x)			jmp 	(VectorSet2,x)
.956d					Unused1:
.956d					Unused2:
.956d					Unused3:
.956d					Unused4:
.956d	4c 57 b4	jmp $b457			jmp 	SyntaxError
>9570							.align 2

;******  Processing file: ./common/commands/../generated/vectors.dat

.9570					VectorSetPunc:
>9570	95 9b					.word	ShiftLeft                        ; $00 <<
>9572	8f 9a					.word	BinaryCompareLessEqual           ; $01 <=
>9574	85 9a					.word	BinaryCompareNotEqual            ; $02 <>
>9576	57 b4					.word	SyntaxError                      ; $03 !!3
>9578	57 b4					.word	SyntaxError                      ; $04 ><
>957a	99 9a					.word	BinaryCompareGreaterEqual        ; $05 >=
>957c	98 9b					.word	ShiftRight                       ; $06 >>
>957e	57 b4					.word	SyntaxError                      ; $07 !!7
>9580	57 b4					.word	SyntaxError                      ; $08 !!8
>9582	57 b4					.word	SyntaxError                      ; $09 !!9
>9584	57 b4					.word	SyntaxError                      ; $0a !!10
>9586	57 b4					.word	SyntaxError                      ; $0b !!11
>9588	57 b4					.word	SyntaxError                      ; $0c !!12
>958a	57 b4					.word	SyntaxError                      ; $0d !!13
>958c	57 b4					.word	SyntaxError                      ; $0e !!14
>958e	57 b4					.word	SyntaxError                      ; $0f !!15
>9590	57 b4					.word	SyntaxError                      ; $10 @
>9592	57 b4					.word	SyntaxError                      ; $11 !!17
>9594	57 b4					.word	SyntaxError                      ; $12 !!18
>9596	57 b4					.word	SyntaxError                      ; $13 [
>9598	82 ae					.word	IntegerDivide                    ; $14 \
>959a	57 b4					.word	SyntaxError                      ; $15 ]
>959c	26 9d					.word	EorInteger                       ; $16 ^
>959e	57 b4					.word	SyntaxError                      ; $17 _
>95a0	57 b4					.word	SyntaxError                      ; $18 `
>95a2	57 b4					.word	SyntaxError                      ; $19 !!25
>95a4	57 b4					.word	SyntaxError                      ; $1a !!26
>95a6	57 b4					.word	SyntaxError                      ; $1b {
>95a8	e0 9c					.word	OraInteger                       ; $1c |
>95aa	57 b4					.word	SyntaxError                      ; $1d }
>95ac	57 b4					.word	SyntaxError                      ; $1e ~
>95ae	57 b4					.word	SyntaxError                      ; $1f [7m<7F>[m
>95b0	57 b4					.word	SyntaxError                      ; $20
>95b2	6c 9d					.word	WordIndirect                     ; $21 !
>95b4	57 b4					.word	SyntaxError                      ; $22 "
>95b6	57 b4					.word	SyntaxError                      ; $23 #
>95b8	57 b4					.word	SyntaxError                      ; $24 $
>95ba	cf ae					.word	IntegerModulus                   ; $25 %
>95bc	9a 9c					.word	AndInteger                       ; $26 &
>95be	57 b4					.word	SyntaxError                      ; $27 '
>95c0	57 b4					.word	SyntaxError                      ; $28 (
>95c2	57 b4					.word	SyntaxError                      ; $29 )
>95c4	44 af					.word	MulInteger                       ; $2a *
>95c6	2c 9c					.word	AddInteger                       ; $2b +
>95c8	57 b4					.word	SyntaxError                      ; $2c ,
>95ca	6f 9c					.word	SubInteger                       ; $2d -
>95cc	57 b4					.word	SyntaxError                      ; $2e .
>95ce	e3 b0					.word	FDivideCommand                   ; $2f /
>95d0	57 b4					.word	SyntaxError                      ; $30 0
>95d2	57 b4					.word	SyntaxError                      ; $31 1
>95d4	57 b4					.word	SyntaxError                      ; $32 2
>95d6	57 b4					.word	SyntaxError                      ; $33 3
>95d8	57 b4					.word	SyntaxError                      ; $34 4
>95da	57 b4					.word	SyntaxError                      ; $35 5
>95dc	57 b4					.word	SyntaxError                      ; $36 6
>95de	57 b4					.word	SyntaxError                      ; $37 7
>95e0	57 b4					.word	SyntaxError                      ; $38 8
>95e2	57 b4					.word	SyntaxError                      ; $39 9
>95e4	57 b4					.word	SyntaxError                      ; $3a :
>95e6	57 b4					.word	SyntaxError                      ; $3b ;
>95e8	71 9a					.word	BinaryCompareLess                ; $3c <
>95ea	67 9a					.word	BinaryCompareEqual               ; $3d =
>95ec	7b 9a					.word	BinaryCompareGreater             ; $3e >
>95ee	93 9d					.word	ByteIndirect                     ; $3f ?
.95f0					VectorSet0:
>95f0	50 95					.word	EOLCommand                       ; $80 !0:EOF
>95f2	5d 95					.word	Shift1Command                    ; $81 !1:SH1
>95f4	65 95					.word	Shift2Command                    ; $82 !2:SH2
>95f6	29 b2					.word	AbsUnary                         ; $83 ABS(
>95f8	63 a2					.word	AllocUnary                       ; $84 ALLOC(
>95fa	39 b2					.word	AscUnary                         ; $85 ASC(
>95fc	e4 a3					.word	ChrUnary                         ; $86 CHR$(
>95fe	1e 8d					.word	UnaryEvent                       ; $87 EVENT(
>9600	63 9a					.word	UnaryFalse                       ; $88 FALSE
>9602	46 b2					.word	FracUnary                        ; $89 FRAC(
>9604	36 91					.word	UnaryHit                         ; $8a HIT(
>9606	5c b2					.word	IntUnary                         ; $8b INT(
>9608	b2 b2					.word	IsValUnary                       ; $8c ISVAL(
>960a	da 91					.word	UnaryJoyB                        ; $8d JOYB(
>960c	b3 91					.word	UnaryJoyX                        ; $8e JOYX(
>960e	b6 91					.word	UnaryJoyY                        ; $8f JOYY(
>9610	be a4					.word	Unary_Left                       ; $90 LEFT$(
>9612	6e b2					.word	LenUnary                         ; $91 LEN(
>9614	d7 a2					.word	Unary_Max                        ; $92 MAX(
>9616	e8 a4					.word	Unary_Mid                        ; $93 MID$(
>9618	d3 a2					.word	Unary_Min                        ; $94 MIN(
>961a	2e a3					.word	Unary_Not                        ; $95 NOT(
>961c	44 a3					.word	Unary_Random                     ; $96 RANDOM(
>961e	ce a4					.word	Unary_Right                      ; $97 RIGHT$(
>9620	63 a3					.word	Unary_Rnd                        ; $98 RND(
>9622	88 b2					.word	SgnUnary                         ; $99 SGN(
>9624	f6 a3					.word	SpcUnary                         ; $9a SPC(
>9626	11 a4					.word	Unary_Str                        ; $9b STR$(
>9628	2f 97					.word	UnaryTimer                       ; $9c TIMER(
>962a	57 9a					.word	UnaryTrue                        ; $9d TRUE
>962c	a8 b2					.word	ValUnary                         ; $9e VAL(
>962e	87 8d					.word	ForCommand                       ; $9f FOR
>9630	89 91					.word	IfCommand                        ; $a0 IF
>9632	6d 95					.word	Unused1                          ; $a1 PROC
>9634	8c 94					.word	Command_REPEAT                   ; $a2 REPEAT
>9636	bc 99					.word	Command_WHILE                    ; $a3 WHILE
>9638	b2 91					.word	EndIf                            ; $a4 ENDIF
>963a	5b ae					.word	Command_ENDPROC                  ; $a5 ENDPROC
>963c	41 8e					.word	NextCommand                      ; $a6 NEXT
>963e	6d 95					.word	Unused4                          ; $a7 THEN
>9640	95 94					.word	Command_UNTIL                    ; $a8 UNTIL
>9642	dd 99					.word	Command_WEND                     ; $a9 WEND
>9644	57 b4					.word	SyntaxError                      ; $aa BY
>9646	be 8b					.word	CallCommand                      ; $ab CALL
>9648	9e 8e					.word	CircleCommand                    ; $ac CIRCLE
>964a	f8 8b					.word	ClearCommand                     ; $ad CLEAR
>964c	50 8c					.word	ClearScreen                      ; $ae CLS
>964e	57 b4					.word	SyntaxError                      ; $af COLOR
>9650	57 b4					.word	SyntaxError                      ; $b0 COLOUR
>9652	56 8c					.word	Command_Data                     ; $b1 DATA
>9654	5e 8c					.word	DimCommand                       ; $b2 DIM
>9656	6d 95					.word	Unused3                          ; $b3 DOWNTO
>9658	ab 91					.word	ElseCode                         ; $b4 ELSE
>965a	57 b4					.word	SyntaxError                      ; $b5 FROM
>965c	ca 90					.word	GfxCommand                       ; $b6 GFX
>965e	fc 90					.word	Command_GOSUB                    ; $b7 GOSUB
>9660	1a 91					.word	GotoCommand                      ; $b8 GOTO
>9662	57 b4					.word	SyntaxError                      ; $b9 HERE
>9664	c8 8e					.word	ImageCommand                     ; $ba IMAGE
>9666	ee 91					.word	LetCommand                       ; $bb LET
>9668	1d 8f					.word	LineCommand                      ; $bc LINE
>966a	e1 92					.word	Command_LOCAL                    ; $bd LOCAL
>966c	57 b4					.word	SyntaxError                      ; $be OFF
>966e	57 b4					.word	SyntaxError                      ; $bf ON
>9670	57 b4					.word	SyntaxError                      ; $c0 OUTLINE
>9672	57 b4					.word	SyntaxError                      ; $c1 PALETTE
>9674	16 8f					.word	PlotCommand                      ; $c2 PLOT
>9676	6f 93					.word	Command_Print                    ; $c3 PRINT
>9678	26 94					.word	Command_Read                     ; $c4 READ
>967a	9a 8e					.word	RectangleCommand                 ; $c5 RECT
>967c	7f 94					.word	RemCommand                       ; $c6 REM
>967e	0c 91					.word	Command_RETURN                   ; $c7 RETURN
>9680	57 b4					.word	SyntaxError                      ; $c8 SOLID
>9682	a9 8e					.word	SpriteCommand                    ; $c9 SPRITE
>9684	e5 8e					.word	TextCommand                      ; $ca TEXT
>9686	6d 95					.word	Unused2                          ; $cb TO
.9688					VectorSet1:
>9688	57 b4					.word	SyntaxError                      ; $80 !0:EOF
>968a	57 b4					.word	SyntaxError                      ; $81 !1:SH1
>968c	57 b4					.word	SyntaxError                      ; $82 !2:SH2
>968e	8f 8b					.word	AssembleCommand                  ; $83 ASSEMBLE
>9690	ae 8b					.word	AssertCommand                    ; $84 ASSERT
>9692	6a 90					.word	BitmapCtrl                       ; $85 BITMAP
>9694	1b 8d					.word	EndCommand                       ; $86 END
>9696	43 92					.word	Command_List                     ; $87 LIST
>9698	65 93					.word	NewCommand                       ; $88 NEW
>969a	ae 94					.word	Command_Restore                  ; $89 RESTORE
>969c	e0 94					.word	CommandRUN                       ; $8a RUN
>969e	af 90					.word	SpritesCtrl                      ; $8b SPRITES
>96a0	2a 97					.word	StopCommand                      ; $8c STOP
.96a2					VectorSet2:
>96a2	57 b4					.word	SyntaxError                      ; $80 !0:EOF
>96a4	57 b4					.word	SyntaxError                      ; $81 !1:SH1
>96a6	57 b4					.word	SyntaxError                      ; $82 !2:SH2
>96a8	16 b3					.word	Assemble_adc                     ; $83 ADC
>96aa	0e b3					.word	Assemble_and                     ; $84 AND
>96ac	2a b3					.word	Assemble_asl                     ; $85 ASL
>96ae	94 b3					.word	Assemble_bcc                     ; $86 BCC
>96b0	98 b3					.word	Assemble_bcs                     ; $87 BCS
>96b2	a0 b3					.word	Assemble_beq                     ; $88 BEQ
>96b4	57 b3					.word	Assemble_bit                     ; $89 BIT
>96b6	88 b3					.word	Assemble_bmi                     ; $8a BMI
>96b8	9c b3					.word	Assemble_bne                     ; $8b BNE
>96ba	84 b3					.word	Assemble_bpl                     ; $8c BPL
>96bc	a4 b3					.word	Assemble_bra                     ; $8d BRA
>96be	a8 b3					.word	Assemble_brk                     ; $8e BRK
>96c0	8c b3					.word	Assemble_bvc                     ; $8f BVC
>96c2	90 b3					.word	Assemble_bvs                     ; $90 BVS
>96c4	b0 b3					.word	Assemble_clc                     ; $91 CLC
>96c6	04 b4					.word	Assemble_cld                     ; $92 CLD
>96c8	c4 b3					.word	Assemble_cli                     ; $93 CLI
>96ca	f4 b3					.word	Assemble_clv                     ; $94 CLV
>96cc	22 b3					.word	Assemble_cmp                     ; $95 CMP
>96ce	6b b3					.word	Assemble_cpx                     ; $96 CPX
>96d0	66 b3					.word	Assemble_cpy                     ; $97 CPY
>96d2	48 b3					.word	Assemble_dec                     ; $98 DEC
>96d4	00 b4					.word	Assemble_dex                     ; $99 DEX
>96d6	dc b3					.word	Assemble_dey                     ; $9a DEY
>96d8	12 b3					.word	Assemble_eor                     ; $9b EOR
>96da	4d b3					.word	Assemble_inc                     ; $9c INC
>96dc	10 b4					.word	Assemble_inx                     ; $9d INX
>96de	fc b3					.word	Assemble_iny                     ; $9e INY
>96e0	7f b3					.word	Assemble_jmp                     ; $9f JMP
>96e2	7a b3					.word	Assemble_jsr                     ; $a0 JSR
>96e4	1e b3					.word	Assemble_lda                     ; $a1 LDA
>96e6	43 b3					.word	Assemble_ldx                     ; $a2 LDX
>96e8	61 b3					.word	Assemble_ldy                     ; $a3 LDY
>96ea	34 b3					.word	Assemble_lsr                     ; $a4 LSR
>96ec	14 b4					.word	Assemble_nop                     ; $a5 NOP
>96ee	0a b3					.word	Assemble_ora                     ; $a6 ORA
>96f0	c0 b3					.word	Assemble_pha                     ; $a7 PHA
>96f2	ac b3					.word	Assemble_php                     ; $a8 PHP
>96f4	08 b4					.word	Assemble_phx                     ; $a9 PHX
>96f6	c8 b3					.word	Assemble_phy                     ; $aa PHY
>96f8	d0 b3					.word	Assemble_pla                     ; $ab PLA
>96fa	b4 b3					.word	Assemble_plp                     ; $ac PLP
>96fc	1c b4					.word	Assemble_plx                     ; $ad PLX
>96fe	d8 b3					.word	Assemble_ply                     ; $ae PLY
>9700	2f b3					.word	Assemble_rol                     ; $af ROL
>9702	39 b3					.word	Assemble_ror                     ; $b0 ROR
>9704	bc b3					.word	Assemble_rti                     ; $b1 RTI
>9706	cc b3					.word	Assemble_rts                     ; $b2 RTS
>9708	26 b3					.word	Assemble_sbc                     ; $b3 SBC
>970a	b8 b3					.word	Assemble_sec                     ; $b4 SEC
>970c	18 b4					.word	Assemble_sed                     ; $b5 SED
>970e	d4 b3					.word	Assemble_sei                     ; $b6 SEI
>9710	1a b3					.word	Assemble_sta                     ; $b7 STA
>9712	0c b4					.word	Assemble_stp                     ; $b8 STP
>9714	3e b3					.word	Assemble_stx                     ; $b9 STX
>9716	5c b3					.word	Assemble_sty                     ; $ba STY
>9718	52 b3					.word	Assemble_stz                     ; $bb STZ
>971a	f0 b3					.word	Assemble_tax                     ; $bc TAX
>971c	ec b3					.word	Assemble_tay                     ; $bd TAY
>971e	75 b3					.word	Assemble_trb                     ; $be TRB
>9720	70 b3					.word	Assemble_tsb                     ; $bf TSB
>9722	f8 b3					.word	Assemble_tsx                     ; $c0 TSX
>9724	e0 b3					.word	Assemble_txa                     ; $c1 TXA
>9726	e8 b3					.word	Assemble_txs                     ; $c2 TXS
>9728	e4 b3					.word	Assemble_tya                     ; $c3 TYA

;******  Return to file: ./common/commands/run.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/stop.asm

.972a					StopCommand:
.972a	a9 08		lda #$08		lda	#8
.972c	4c eb 99	jmp $99eb		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/commands/timer.asm

.972f					UnaryTimer:
.972f	fa		plx				plx
.9730	20 69 ae	jsr $ae69			jsr 	CheckRightBracket
.9733					TimerToStackX:
.9733	20 26 a6	jsr $a626			jsr 	NSMSetZero 					; zero result
.9736	64 01		stz $01				stz 	1 							; access I/O
.9738	ad 59 d6	lda $d659			lda 	$D659 						; copy timer in
.973b	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.973e	ad 5a d6	lda $d65a			lda 	$D65A
.9741	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9744	ad 5b d6	lda $d65b			lda 	$D65B
.9747	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.974a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/expandline.asm

.974b					ListConvertLine:
.974b	9c 9d 04	stz $049d			stz 	tbOffset
.974e	9c aa 04	stz $04aa			stz 	tokenBuffer
.9751	a0 02		ldy #$02			ldy 	#2 							; convert line number to string
.9753	b1 30		lda ($30),y			lda 	(codePtr),y
.9755	aa		tax				tax
.9756	88		dey				dey
.9757	b1 30		lda ($30),y			lda 	(codePtr),y
.9759	20 c5 af	jsr $afc5			jsr 	ConvertInt16
.975c	85 36		sta $36				sta 	zTemp0 						; copy number into buffer
.975e	86 37		stx $37				stx 	zTemp0+1
.9760	a0 00		ldy #$00			ldy 	#0
.9762					_LCCopyNumber:
.9762	b1 36		lda ($36),y			lda 	(zTemp0),y
.9764	20 90 98	jsr $9890			jsr 	LCLWrite
.9767	c8		iny				iny
.9768	b1 36		lda ($36),y			lda 	(zTemp0),y
.976a	d0 f6		bne $9762			bne 	_LCCopyNumber
.976c	20 a9 99	jsr $99a9			jsr 	ScanGetCurrentLineStep 		; adjustment to indent
.976f	48		pha				pha 								; save on stack
.9770	10 0c		bpl $977e			bpl 	_LCNoAdjust 				; don't adjust indent if +ve, do after.
.9772	18		clc				clc 								; add to list indent and make 0 if goes -ve.
.9773	6d a6 04	adc $04a6			adc 	listIndent
.9776	8d a6 04	sta $04a6			sta 	listIndent
.9779	10 03		bpl $977e			bpl 	_LCNoAdjust
.977b	9c a6 04	stz $04a6			stz 	listIndent
.977e					_LCNoAdjust:
.977e	18		clc				clc		 							; work out actual indent.
.977f	ad a6 04	lda $04a6			lda 	listIndent
.9782	0a		asl a				asl 	a
.9783	69 06		adc #$06			adc 	#6
.9785	85 36		sta $36				sta 	zTemp0
.9787					_LCPadOut:
.9787	a9 20		lda #$20			lda 	#' '						; pad out to 6 characters
.9789	20 90 98	jsr $9890			jsr 	LCLWrite
.978c	ad 9d 04	lda $049d			lda 	tbOffset
.978f	c5 36		cmp $36				cmp 	zTemp0
.9791	d0 f4		bne $9787			bne 	_LCPadOut
.9793	a0 03		ldy #$03			ldy 	#3 							; start position.
.9795					_LCMainLoop:
.9795	b1 30		lda ($30),y			lda 	(codePtr),y
.9797	c9 80		cmp #$80			cmp 	#KWC_EOL 					; end of line ?
.9799	f0 17		beq $97b2			beq 	_LCExit
.979b	c9 10		cmp #$10			cmp 	#16 						; 0-5 are the double punctuations
.979d	90 1e		bcc $97bd			bcc 	_LCDoubles
.979f	c9 20		cmp #$20			cmp 	#32 						; 16-31 are shifted punctuation from 64-91
.97a1	90 2a		bcc $97cd			bcc 	_LCShiftPunc
.97a3	c9 40		cmp #$40			cmp 	#64 						; 32-64 are as stored, punc and digits
.97a5	90 35		bcc $97dc			bcc 	_LCPunctuation
.97a7	c9 80		cmp #$80			cmp 	#128 						; 64-127 are variable identifiers.
.97a9	90 3e		bcc $97e9			bcc 	_LCIdentifiers
.97ab	c9 fe		cmp #$fe			cmp 	#254 						; 128-253 are tokenised words
.97ad	90 5a		bcc $9809			bcc 	_LCTokens
.97af	4c 64 98	jmp $9864			jmp 	_LCData 					; 254-5 are data objects
.97b2					_LCExit:
.97b2	68		pla				pla 								; get old indent adjust
.97b3	30 07		bmi $97bc			bmi 	_LCExit2
.97b5	18		clc				clc 								; add to indent if +ve
.97b6	6d a6 04	adc $04a6			adc 	listIndent
.97b9	8d a6 04	sta $04a6			sta 	listIndent
.97bc					_LCExit2:
.97bc	60		rts				rts
.97bd					_LCDoubles:
.97bd	48		pha				pha
.97be	4a		lsr a				lsr 	a 							; put bit 2 into bit 1
.97bf	29 02		and #$02			and 	#2
.97c1	09 3c		ora #$3c			ora 	#60 						; make < >
.97c3	20 90 98	jsr $9890			jsr 	LCLWrite
.97c6	68		pla				pla 								; restore, do lower bit
.97c7	29 03		and #$03			and 	#3
.97c9	09 3c		ora #$3c			ora 	#60
.97cb	80 0f		bra $97dc			bra		_LCPunctuation 				; print, increment, loop
.97cd					_LCShiftPunc:
.97cd	aa		tax				tax 								; save in X
.97ce	29 07		and #$07			and 	#7 							; lower 3 bits
.97d0	f0 02		beq $97d4			beq 	_LCNoAdd
.97d2	09 18		ora #$18			ora 	#24 						; adds $18 to it.
.97d4					_LCNoAdd:
.97d4	e0 18		cpx #$18			cpx 	#24 						; if >= 24 add $20
.97d6	90 02		bcc $97da			bcc 	_LCNoAdd2
.97d8	09 20		ora #$20			ora 	#32 						; adds $20
.97da					_LCNoAdd2:
.97da	09 40		ora #$40			ora 	#$40 						; shift into 64-127 range and fall through.
.97dc					_LCPunctuation:
.97dc	c9 3a		cmp #$3a			cmp 	#':' 						; check if :
.97de	d0 03		bne $97e3			bne 	_LCPContinue
.97e0	20 9f 98	jsr $989f			jsr 	LCDeleteLastSpace
.97e3					_LCPContinue:
.97e3	c8		iny				iny 								; consume character
.97e4	20 90 98	jsr $9890			jsr 	LCLWrite 					; write it out.
.97e7	80 ac		bra $9795			bra 	_LCMainLoop 				; go round again.
.97e9					_LCIdentifiers:
.97e9	18		clc				clc 								; convert to physical address
.97ea	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.97ec	85 37		sta $37				sta 	zTemp0+1
.97ee	c8		iny				iny
.97ef	b1 30		lda ($30),y			lda 	(codePtr),y
.97f1	85 36		sta $36				sta 	zTemp0
.97f3	c8		iny				iny
.97f4	5a		phy				phy 								; save position
.97f5	a0 07		ldy #$07			ldy 	#7 							; output the identifier.
.97f7					_LCOutIdentifier:
.97f7	c8		iny				iny
.97f8	b1 36		lda ($36),y			lda 	(zTemp0),y
.97fa	29 7f		and #$7f			and 	#$7F
.97fc	20 de 98	jsr $98de			jsr 	LCLLowerCase
.97ff	20 90 98	jsr $9890			jsr 	LCLWrite
.9802	b1 36		lda ($36),y			lda 	(zTemp0),y				 	; ends when bit 7 set.
.9804	10 f1		bpl $97f7			bpl 	_LCOutIdentifier
.9806	7a		ply				ply 								; restore position
.9807	80 8c		bra $9795			bra 	_LCMainLoop
.9809					_LCTokens:
.9809	aa		tax				tax 								; token in X
.980a	a9 15		lda #$15			lda 	#((KeywordSet2) & $FF)
.980c	85 36		sta $36				sta 	0+zTemp0
.980e	a9 aa		lda #$aa			lda 	#((KeywordSet2) >> 8)
.9810	85 37		sta $37				sta 	1+zTemp0
.9812	e0 82		cpx #$82			cpx 	#$82
.9814	f0 16		beq $982c			beq 	_LCUseShift
.9816	a9 c7		lda #$c7			lda 	#((KeywordSet1) & $FF)
.9818	85 36		sta $36				sta 	0+zTemp0
.981a	a9 a9		lda #$a9			lda 	#((KeywordSet1) >> 8)
.981c	85 37		sta $37				sta 	1+zTemp0
.981e	e0 81		cpx #$81			cpx 	#$81
.9820	f0 0a		beq $982c			beq 	_LCUseShift
.9822	a9 e2		lda #$e2			lda 	#((KeywordSet0) & $FF)
.9824	85 36		sta $36				sta 	0+zTemp0
.9826	a9 a7		lda #$a7			lda 	#((KeywordSet0) >> 8)
.9828	85 37		sta $37				sta 	1+zTemp0
.982a	80 01		bra $982d			bra 	_LCNoShift
.982c					_LCUseShift:
.982c	c8		iny				iny
.982d					_LCNoShift:
.982d	20 b3 98	jsr $98b3			jsr 	LCCheckSpaceRequired 		; do we need a space ?
.9830	b1 30		lda ($30),y			lda 	(codePtr),y
.9832	aa		tax				tax 								; into X
.9833					_LCFindText:
.9833	ca		dex				dex
.9834	10 0e		bpl $9844			bpl 	_LCFoundText 				; found text.
.9836	b2 36		lda ($36)			lda 	(zTemp0) 					; length of text
.9838	1a		inc a				inc 	a 							; one extra for size
.9839	38		sec				sec 								; one extra for checksum
.983a	65 36		adc $36				adc 	zTemp0 						; go to next token
.983c	85 36		sta $36				sta 	zTemp0
.983e	90 f3		bcc $9833			bcc 	_LCFindText
.9840	e6 37		inc $37				inc 	zTemp0+1
.9842	80 ef		bra $9833			bra 	_LCFindText
.9844					_LCFoundText:
.9844	5a		phy				phy 								; save List position
.9845	b2 36		lda ($36)			lda 	(zTemp0)					; count to print
.9847	aa		tax				tax
.9848	a0 02		ldy #$02			ldy 	#2
.984a					_LCCopyToken:
.984a	b1 36		lda ($36),y			lda 	(zTemp0),y
.984c	20 de 98	jsr $98de			jsr 	LCLLowerCase
.984f	20 90 98	jsr $9890			jsr 	LCLWrite
.9852	c8		iny				iny
.9853	ca		dex				dex
.9854	d0 f4		bne $984a			bne 	_LCCopyToken
.9856	c9 28		cmp #$28			cmp 	#"(" 						; if last char not ( print a space
.9858	f0 05		beq $985f			beq 	_LCNoSpace
.985a	a9 20		lda #$20			lda 	#' '
.985c	20 90 98	jsr $9890			jsr 	LCLWrite
.985f					_LCNoSpace:
.985f	7a		ply				ply 								; restore position.
.9860	c8		iny				iny 								; consume token
.9861	4c 95 97	jmp $9795			jmp 	_LCMainLoop 				; and go around again.
.9864					_LCData:
.9864	48		pha				pha 								; save type $FE/$FF
.9865	a2 24		ldx #$24			ldx 	#'$' 						; figure out $ or "
.9867	c9 fe		cmp #$fe			cmp 	#$FE
.9869	f0 02		beq $986d			beq 	_LCHaveOpener
.986b	a2 22		ldx #$22			ldx 	#'"'
.986d					_LCHaveOpener:
.986d	8a		txa				txa 								; output prefix (# or ")
.986e	20 90 98	jsr $9890			jsr 	LCLWrite
.9871	c8		iny				iny 								; get count
.9872	b1 30		lda ($30),y			lda 	(codePtr),y
.9874	aa		tax				tax
.9875	c8		iny				iny 								; point at first character
.9876					_LCOutData:
.9876	b1 30		lda ($30),y			lda 	(codePtr),y
.9878	c9 00		cmp #$00			cmp 	#0
.987a	f0 03		beq $987f			beq 	_LCNoPrint
.987c	20 90 98	jsr $9890			jsr 	LCLWrite
.987f					_LCNoPrint:
.987f	c8		iny				iny
.9880	ca		dex				dex
.9881	d0 f3		bne $9876			bne 	_LCOutData
.9883	68		pla				pla 								; closing " required ?
.9884	c9 ff		cmp #$ff			cmp 	#$FF
.9886	d0 05		bne $988d			bne 	_LCNoQuote
.9888	a9 22		lda #$22			lda 	#'"'
.988a	20 90 98	jsr $9890			jsr 	LCLWrite
.988d					_LCNoQuote:
.988d	4c 95 97	jmp $9795			jmp 	_LCMainLoop
.9890					LCLWrite:
.9890	da		phx				phx
.9891	ae 9d 04	ldx $049d			ldx 	tbOffset
.9894	9d aa 04	sta $04aa,x			sta 	tokenBuffer,x
.9897	9e ab 04	stz $04ab,x			stz 	tokenBuffer+1,x
.989a	ee 9d 04	inc $049d			inc 	tbOffset
.989d	fa		plx				plx
.989e	60		rts				rts
.989f					LCDeleteLastSpace:
.989f	48		pha				pha
.98a0	da		phx				phx
.98a1	ae 9d 04	ldx $049d			ldx 	tbOffset
.98a4	f0 0a		beq $98b0			beq 	_LCDLSExit
.98a6	bd a9 04	lda $04a9,x			lda 	tokenBuffer-1,x
.98a9	c9 20		cmp #$20			cmp 	#' '
.98ab	d0 03		bne $98b0			bne 	_LCDLSExit
.98ad	ce 9d 04	dec $049d			dec 	tbOffset
.98b0					_LCDLSExit:
.98b0	fa		plx				plx
.98b1	68		pla				pla
.98b2	60		rts				rts
.98b3					LCCheckSpaceRequired:
.98b3	ae 9d 04	ldx $049d			ldx 	tbOffset
.98b6	bd a9 04	lda $04a9,x			lda 	tokenBuffer-1,x 			; previous character
.98b9	c9 24		cmp #$24			cmp 	#'$' 						; $ # and ) require that token space.
.98bb	f0 1b		beq $98d8			beq 	_LCCSRSpace
.98bd	c9 29		cmp #$29			cmp 	#')'
.98bf	f0 17		beq $98d8			beq 	_LCCSRSpace
.98c1	c9 23		cmp #$23			cmp 	#'#'
.98c3	f0 13		beq $98d8			beq 	_LCCSRSpace
.98c5	20 de 98	jsr $98de			jsr 	LCLLowerCase 				; saves a little effort
.98c8	c9 30		cmp #$30			cmp 	#"0" 						; check if it was 0-9 A-Z a-z if so need space.
.98ca	90 11		bcc $98dd			bcc 	_LCCSRExit
.98cc	c9 3a		cmp #$3a			cmp 	#"9"+1
.98ce	90 08		bcc $98d8			bcc 	_LCCSRSpace
.98d0	c9 61		cmp #$61			cmp 	#"a"
.98d2	90 09		bcc $98dd			bcc 	_LCCSRExit
.98d4	c9 7b		cmp #$7b			cmp 	#"z"+1
.98d6	b0 05		bcs $98dd			bcs 	_LCCSRExit
.98d8					_LCCSRSpace:
.98d8	a9 20		lda #$20			lda 	#' '
.98da	20 90 98	jsr $9890			jsr 	LCLWrite
.98dd					_LCCSRExit:
.98dd	60		rts				rts
.98de					LCLLowerCase:
.98de	c9 41		cmp #$41			cmp 	#"A"
.98e0	90 06		bcc $98e8			bcc 	_LCLLCOut
.98e2	c9 5b		cmp #$5b			cmp 	#"Z"+1
.98e4	b0 02		bcs $98e8			bcs 	_LCLLCOut
.98e6	69 20		adc #$20			adc 	#$20
.98e8					_LCLLCOut:
.98e8	60		rts				rts
.98e9					LCLUpperCase:
.98e9	c9 61		cmp #$61			cmp 	#"a"
.98eb	90 06		bcc $98f3			bcc 	_LCLUCOut
.98ed	c9 7b		cmp #$7b			cmp 	#"z"+1
.98ef	b0 02		bcs $98f3			bcs 	_LCLUCOut
.98f1	e9 1f		sbc #$1f			sbc 	#$1F
.98f3					_LCLUCOut:
.98f3	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/procscan.asm

.98f4					ProcedureScan:
.98f4	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.98f6	85 30		sta $30				sta 	codePtr
.98f8	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.98fa	85 31		sta $31				sta 	codePtr+1
.98fc					_PSLoop:
.98fc	b2 30		lda ($30)			lda 	(codePtr)
.98fe	f0 42		beq $9942			beq 	_PSExit
.9900	a0 03		ldy #$03			ldy 	#3 							; is it PROC ?
.9902	b1 30		lda ($30),y			lda 	(codePtr),y
.9904	c9 a1		cmp #$a1			cmp 	#KWD_PROC
.9906	d0 2d		bne $9935			bne 	_PSNext
.9908	c8		iny				iny 								; get the address of the record to zTemp0 and
.9909	b1 30		lda ($30),y			lda 	(codePtr),y
.990b	29 c0		and #$c0			and 	#$C0
.990d	c9 40		cmp #$40			cmp 	#$40
.990f	d0 32		bne $9943			bne 	_PSSyntax
.9911	b1 30		lda ($30),y			lda 	(codePtr),y
.9913	18		clc				clc
.9914	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.9916	85 37		sta $37				sta 	zTemp0+1
.9918	c8		iny				iny 								; LSB
.9919	b1 30		lda ($30),y			lda 	(codePtr),y
.991b	85 36		sta $36				sta 	zTemp0
.991d	c8		iny				iny 								; character after variable call.
.991e	98		tya				tya 								; save Y offset at +7
.991f	a0 07		ldy #$07			ldy 	#7
.9921	91 36		sta ($36),y			sta 	(zTemp0),y
.9923	a9 18		lda #$18			lda 	#NSTProcedure 				; mark it as procedure
.9925	a0 02		ldy #$02			ldy 	#2
.9927	91 36		sta ($36),y			sta 	(zTemp0),y
.9929	a2 00		ldx #$00			ldx 	#0 							; copy code-Ptr in
.992b					_PSCopy:
.992b	b5 30		lda $30,x			lda 	safePtr,x
.992d	c8		iny				iny
.992e	91 36		sta ($36),y			sta 	(zTemp0),y
.9930	e8		inx				inx
.9931	e0 04		cpx #$04			cpx 	#4
.9933	d0 f6		bne $992b			bne 	_PSCopy
.9935					_PSNext:
.9935	18		clc				clc
.9936	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.9938	65 30		adc $30				adc 	codePtr
.993a	85 30		sta $30				sta 	codePtr
.993c	90 02		bcc $9940			bcc 	_CREExit
.993e	e6 31		inc $31				inc 	codePtr+1
.9940					_CREExit:
.9940	80 ba		bra $98fc			bra 	_PSLoop
.9942					_PSExit:
.9942	60		rts				rts
.9943					_PSSyntax:
.9943	4c 57 b4	jmp $b457			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/scanforward.asm

.9946					ScanForward:
.9946	64 38		stz $38				stz 	zTemp1 						; this is the structure count - goes up with WHILE/FOR
.9948	86 37		stx $37				stx 	zTemp0+1
.994a	85 36		sta $36				sta 	zTemp0 						; save XA as the two possible matches.
.994c					_ScanLoop:
.994c	b1 30		lda ($30),y			lda 	(codePtr),y
.994e	c8		iny				iny
.994f	a6 38		ldx $38				ldx 	zTemp1 						; if the count is > 0 cannot match as in substructure
.9951	d0 0e		bne $9961			bne 	_ScanGoNext
.9953	c5 36		cmp $36				cmp 	zTemp0 						; see if either matches
.9955	f0 04		beq $995b			beq 	_ScanMatch
.9957	c5 37		cmp $37				cmp 	zTemp0+1
.9959	d0 06		bne $9961			bne 	_ScanGoNext
.995b					_ScanMatch:
.995b	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if asked for EOL, backtrack.
.995d	d0 01		bne $9960			bne 	_ScanNotEndEOL
.995f	88		dey				dey
.9960					_ScanNotEndEOL:
.9960	60		rts				rts
.9961					_ScanGoNext:
.9961	20 66 99	jsr $9966			jsr  	ScanForwardOne
.9964	80 e6		bra $994c			bra 	_ScanLoop
.9966					ScanForwardOne:
.9966	c9 40		cmp #$40			cmp 	#$40 						; if 00-3F, punctuation characters, loop back
.9968	90 3e		bcc $99a8			bcc 	_SFWExit
.996a	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if 40-82, skip one extra.
.996c	90 18		bcc $9986			bcc 	_ScanSkipOne
.996e	c9 fc		cmp #$fc			cmp 	#$FC 						; FC-FF are data skips
.9970	b0 2f		bcs $99a1			bcs 	_ScanSkipData
.9972	c9 9f		cmp #$9f			cmp 	#KWC_FIRST_STRUCTURE 		; structure keyword ?
.9974	90 32		bcc $99a8			bcc 	_SFWExit 					; if not, ordinary keywords.
.9976	c9 aa		cmp #$aa			cmp 	#KWC_LAST_STRUCTURE+1
.9978	b0 2e		bcs $99a8			bcs 	_SFWExit
.997a	c6 38		dec $38				dec 	zTemp1 						; decrement the sructure count
.997c	c9 a4		cmp #$a4			cmp 	#KWC_FIRST_STRUCTURE_DEC 	; back if it is a dec structure (e.g. WEND/NEXT)
.997e	b0 28		bcs $99a8			bcs 	_SFWExit
.9980	e6 38		inc $38				inc 	zTemp1 						; so it's an increment structure
.9982	e6 38		inc $38				inc 	zTemp1 						; twice to undo the dec
.9984	80 22		bra $99a8			bra 	_SFWExit
.9986					_ScanSkipOne:
.9986	c8		iny				iny 								; consume the extra one.
.9987	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if not EOL loop back
.9989	d0 1d		bne $99a8			bne 	_SFWExit
.998b	18		clc				clc
.998c	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.998e	65 30		adc $30				adc 	codePtr
.9990	85 30		sta $30				sta 	codePtr
.9992	90 02		bcc $9996			bcc 	_CREExit
.9994	e6 31		inc $31				inc 	codePtr+1
.9996					_CREExit:
.9996	a0 03		ldy #$03			ldy 	#3 							; scan start position.
.9998	b2 30		lda ($30)			lda 	(codePtr)
.999a	d0 0c		bne $99a8			bne 	_SFWExit 					; if not zero, more to scan
.999c	a9 13		lda #$13		lda	#19
.999e	4c eb 99	jmp $99eb		jmp	ErrorHandler
.99a1					_ScanSkipData:
.99a1	88		dey				dey 								; point at data token
.99a2	c8		iny				iny
.99a3	98		tya				tya
.99a4	38		sec				sec
.99a5	71 30		adc ($30),y			adc 	(codePtr),y
.99a7	a8		tay				tay
.99a8					_SFWExit:
.99a8	60		rts				rts
.99a9					ScanGetCurrentLineStep:
.99a9	64 38		stz $38				stz 	zTemp1
.99ab	a0 03		ldy #$03			ldy 	#3
.99ad					_SGCLSLoop:
.99ad	b1 30		lda ($30),y			lda 	(codePtr),y
.99af	c8		iny				iny
.99b0	c9 80		cmp #$80			cmp 	#KWC_EOL	 				; if EOL exit
.99b2	f0 05		beq $99b9			beq 	_SGCLSExit
.99b4	20 66 99	jsr $9966			jsr 	ScanForwardOne
.99b7	80 f4		bra $99ad			bra 	_SGCLSLoop
.99b9					_SGCLSExit:
.99b9	a5 38		lda $38				lda 	zTemp1
.99bb	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/while.asm

.99bc					Command_WHILE:
.99bc	5a		phy				phy 								; save position of the test
.99bd	a2 00		ldx #$00			ldx 	#0
.99bf	20 66 a5	jsr $a566			jsr 	EvaluateNumber 				; work out the number
.99c2	20 56 a6	jsr $a656			jsr 	NSMIsZero 					; check if zero
.99c5	f0 0e		beq $99d5			beq 	_WHExitLoop 				; if so exit the loop
.99c7	98		tya				tya 								; position *after* test.
.99c8	7a		ply				ply 								; restore position before test, at WHILE
.99c9	88		dey				dey
.99ca	48		pha				pha 								; push after test on the stack
.99cb	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; allocate 6 bytes on the return stack.
.99cd	20 da a6	jsr $a6da			jsr 	StackOpen
.99d0	20 1e a7	jsr $a71e			jsr 	STKSaveCodePosition 		; save loop position - where the test value is.
.99d3	7a		ply				ply 								; restore the position *after* the test
.99d4	60		rts				rts
.99d5					_WHExitLoop:
.99d5	68		pla				pla 								; throw post loop position
.99d6	a9 a9		lda #$a9			lda 	#KWD_WEND 					; scan forward past WEND
.99d8	aa		tax				tax
.99d9	20 46 99	jsr $9946			jsr 	ScanForward
.99dc	60		rts				rts
.99dd					Command_WEND:
.99dd	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; check WHILE is TOS
.99df	a2 10		ldx #$10			ldx 	#ERRID_WHILE 				; this error
.99e1	20 06 a7	jsr $a706			jsr 	StackCheckFrame
.99e4	20 2f a7	jsr $a72f			jsr 	STKLoadCodePosition 		; loop back
.99e7	20 f8 a6	jsr $a6f8			jsr 	StackClose		 			; erase the frame
.99ea	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/charcheck.asm

.ae69					CheckRightBracket:
.ae69	b1 30		lda ($30),y			lda 	(codePtr),y
.ae6b	c8		iny				iny
.ae6c	c9 29		cmp #$29			cmp 	#KWD_RPAREN 						; exit if matches
.ae6e	d0 0f		bne $ae7f			bne 	CNAFail
.ae70	60		rts				rts
.ae71					CheckComma:
.ae71	b1 30		lda ($30),y			lda 	(codePtr),y
.ae73	c8		iny				iny
.ae74	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 						; exit if matches
.ae76	d0 07		bne $ae7f			bne 	CNAFail
.ae78	60		rts				rts
.ae79					CheckNextA:
.ae79	d1 30		cmp ($30),y			cmp 	(codePtr),y
.ae7b	d0 02		bne $ae7f			bne 	CNAFail
.ae7d	c8		iny				iny 								; skip character
.ae7e	60		rts				rts 								; and exit
.ae7f					CNAFail:
.ae7f	4c 57 b4	jmp $b457			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/errors.asm

.99eb					ErrorHandler:
.99eb	a8		tay				tay 								; find the error text
.99ec	f0 49		beq $9a37			beq 	_EHEnd
.99ee	a2 00		ldx #$00			ldx 	#0
.99f0	a9 70		lda #$70			lda 	#((ErrorText) & $FF)
.99f2	85 36		sta $36				sta 	0+zTemp0
.99f4	a9 b4		lda #$b4			lda 	#((ErrorText) >> 8)
.99f6	85 37		sta $37				sta 	1+zTemp0
.99f8					_EHFind:
.99f8	88		dey				dey 								; found the error text ?
.99f9	f0 0e		beq $9a09			beq 	_EHFound
.99fb					_EHFindZero:
.99fb	b2 36		lda ($36)			lda 	(zTemp0) 					; find the next error
.99fd	e6 36		inc $36				inc 	zTemp0
.99ff	d0 02		bne $9a03			bne 	_EHFNoCarry
.9a01	e6 37		inc $37				inc 	zTemp0+1
.9a03					_EHFNoCarry:
.9a03	c9 00		cmp #$00			cmp 	#0
.9a05	d0 f4		bne $99fb			bne 	_EHFindZero
.9a07	80 ef		bra $99f8			bra 	_EHFind
.9a09					_EHFound:
.9a09	a5 36		lda $36				lda 	zTemp0 						; print message
.9a0b	a6 37		ldx $37				ldx 	zTemp0+1
.9a0d	20 44 9a	jsr $9a44			jsr 	PrintStringXA
.9a10	a0 01		ldy #$01			ldy 	#1 							; if line number zero don't print i
.9a12	b1 30		lda ($30),y			lda 	(codePtr),y
.9a14	d0 05		bne $9a1b			bne 	_EHAtMsg
.9a16	c8		iny				iny
.9a17	b1 30		lda ($30),y			lda 	(codePtr),y
.9a19	f0 17		beq $9a32			beq 	_EHCREnd
.9a1b					_EHAtMsg:
.9a1b	a2 9a		ldx #$9a			ldx 	#_AtMsg >> 8 				; print " at "
.9a1d	a9 3a		lda #$3a			lda 	#_AtMsg & $FF
.9a1f	20 44 9a	jsr $9a44			jsr 	PrintStringXA
.9a22	a0 01		ldy #$01			ldy 	#1 							; line number into XA
.9a24	b1 30		lda ($30),y			lda 	(codePtr),y
.9a26	48		pha				pha
.9a27	c8		iny				iny
.9a28	b1 30		lda ($30),y			lda 	(codePtr),y
.9a2a	aa		tax				tax
.9a2b	68		pla				pla
.9a2c	20 c5 af	jsr $afc5			jsr 	ConvertInt16 				; convert XA to string
.9a2f	20 44 9a	jsr $9a44			jsr 	PrintStringXA 				; and print it.
.9a32					_EHCREnd:
.9a32	a9 0d		lda #$0d			lda 	#13 						; new line
.9a34	20 11 b6	jsr $b611			jsr 	EXTPrintCharacter
.9a37					_EHEnd:
.9a37	4c 5f 8b	jmp $8b5f			jmp 	WarmStart
>9a3a	20 61 74 20 6c 69 6e 65		_AtMsg:	.text 	" at line ",0
>9a42	20 00
.9a44					PrintStringXA:
.9a44	5a		phy				phy
.9a45	86 37		stx $37				stx 	zTemp0+1
.9a47	85 36		sta $36				sta 	zTemp0
.9a49	a0 00		ldy #$00			ldy 	#0
.9a4b					_PSXALoop:
.9a4b	b1 36		lda ($36),y			lda 	(zTemp0),y
.9a4d	f0 06		beq $9a55			beq 	_PSXAExit
.9a4f	20 11 b6	jsr $b611			jsr 	EXTPrintCharacter
.9a52	c8		iny				iny
.9a53	80 f6		bra $9a4b			bra 	_PSXALoop
.9a55					_PSXAExit:
.9a55	7a		ply				ply
.9a56	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/compare.asm

.9a57					UnaryTrue:
.9a57	fa		plx				plx
.9a58					ReturnTrue:
.9a58	a9 01		lda #$01			lda 	#1  						; set to 1
.9a5a	20 28 a6	jsr $a628			jsr 	NSMSetByte
.9a5d	a9 80		lda #$80			lda 	#$80 						; set sign flag, so it is -1
.9a5f	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9a62	60		rts				rts
.9a63					UnaryFalse:
.9a63	fa		plx				plx
.9a64					ReturnFalse:
.9a64	4c 26 a6	jmp $a626			jmp 	NSMSetZero 					; set it all to zero
.9a67					BinaryCompareEqual:
.9a67	fa		plx				plx
.9a68	20 a3 9a	jsr $9aa3			jsr 	CompareBaseCode
.9a6b	c9 00		cmp #$00			cmp 	#0
.9a6d	f0 e9		beq $9a58			beq 	ReturnTrue
.9a6f	80 f3		bra $9a64			bra 	ReturnFalse
.9a71					BinaryCompareLess:
.9a71	fa		plx				plx
.9a72	20 a3 9a	jsr $9aa3			jsr 	CompareBaseCode
.9a75	c9 ff		cmp #$ff			cmp 	#$FF
.9a77	f0 df		beq $9a58			beq 	ReturnTrue
.9a79	80 e9		bra $9a64			bra 	ReturnFalse
.9a7b					BinaryCompareGreater:
.9a7b	fa		plx				plx
.9a7c	20 a3 9a	jsr $9aa3			jsr 	CompareBaseCode
.9a7f	c9 01		cmp #$01			cmp 	#1
.9a81	f0 d5		beq $9a58			beq 	ReturnTrue
.9a83	80 df		bra $9a64			bra 	ReturnFalse
.9a85					BinaryCompareNotEqual:
.9a85	fa		plx				plx
.9a86	20 a3 9a	jsr $9aa3			jsr 	CompareBaseCode
.9a89	c9 00		cmp #$00			cmp 	#0
.9a8b	d0 cb		bne $9a58			bne 	ReturnTrue
.9a8d	80 d5		bra $9a64			bra 	ReturnFalse
.9a8f					BinaryCompareLessEqual:
.9a8f	fa		plx				plx
.9a90	20 a3 9a	jsr $9aa3			jsr 	CompareBaseCode
.9a93	c9 01		cmp #$01			cmp 	#1
.9a95	d0 c1		bne $9a58			bne 	ReturnTrue
.9a97	80 cb		bra $9a64			bra 	ReturnFalse
.9a99					BinaryCompareGreaterEqual:
.9a99	fa		plx				plx
.9a9a	20 a3 9a	jsr $9aa3			jsr 	CompareBaseCode
.9a9d	c9 ff		cmp #$ff			cmp 	#$FF
.9a9f	d0 b7		bne $9a58			bne 	ReturnTrue
.9aa1	80 c1		bra $9a64			bra 	ReturnFalse
.9aa3					CompareBaseCode:
.9aa3	20 0c 9f	jsr $9f0c			jsr 	DereferenceTopTwo 			; make both values if references.
.9aa6	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if either is a string.
.9aa9	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9aac	29 10		and #$10			and 	#NSTString
.9aae	d0 40		bne $9af0			bne 	_CBCString
.9ab0	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check both are integers
.9ab3	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9ab6	d0 3b		bne $9af3			bne 	_CBCFloat
.9ab8	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9abb	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9abe	29 08		and #$08			and 	#NSTFloat
.9ac0	d0 31		bne $9af3			bne 	_CBCFloat
.9ac2	20 f6 9a	jsr $9af6			jsr 	CompareFixMinusZero
.9ac5	e8		inx				inx
.9ac6	20 f6 9a	jsr $9af6			jsr 	CompareFixMinusZero
.9ac9	ca		dex				dex
.9aca	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; are the signs different ?
.9acd	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.9ad0	10 0b		bpl $9add			bpl 	_CDCSameSign
.9ad2	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; if first one is -ve
.9ad5	30 16		bmi $9aed			bmi 	_CBCLess 					; return $FF
.9ad7					_CBCGreater:
.9ad7	a9 01		lda #$01			lda 	#1
.9ad9	60		rts				rts
.9ada					_CBCEqual:
.9ada	a9 00		lda #$00			lda 	#0
.9adc	60		rts				rts
.9add					_CDCSameSign:
.9add	20 06 9c	jsr $9c06			jsr 	SubTopTwoStack 				; unsigned subtract
.9ae0	20 56 a6	jsr $a656			jsr 	NSMIsZero 					; or the mantissa together
.9ae3	f0 f5		beq $9ada			beq 	_CBCEqual 					; -0 == 0
.9ae5	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; sign of the result. if +ve return $01 else return $FF
.9ae8	5d 01 04	eor $0401,x			eor 	NSStatus+1,x 				; however if both were -ve this is inverted
.9aeb	10 ea		bpl $9ad7			bpl 	_CBCGreater
.9aed					_CBCLess:
.9aed	a9 ff		lda #$ff			lda 	#$FF
.9aef	60		rts				rts
.9af0					_CBCString:
.9af0	4c 5c 9b	jmp $9b5c			jmp 	CompareStrings
.9af3					_CBCFloat:
.9af3	4c c9 b0	jmp $b0c9			jmp 	CompareFloat
.9af6					CompareFixMinusZero:
.9af6	20 56 a6	jsr $a656			jsr 	NSMIsZero
.9af9	d0 03		bne $9afe			bne 	_CFXMZNotZero
.9afb	9e 00 04	stz $0400,x			stz 	NSStatus,x
.9afe					_CFXMZNotZero:
.9afe	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/concat.asm

.9aff					StringConcat:
.9aff	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check both strings
.9b02	3d 01 04	and $0401,x			and 	NSStatus+1,x
.9b05	29 18		and #$18			and 	#NSBTypeMask
.9b07	c9 10		cmp #$10			cmp 	#NSTString
.9b09	d0 4e		bne $9b59			bne		_SCType
.9b0b	64 38		stz $38				stz 	zTemp1 						; counting total length
.9b0d	e8		inx				inx
.9b0e	20 2c 9b	jsr $9b2c			jsr 	_SCSetupZ0 					; setup for second
.9b11	20 37 9b	jsr $9b37			jsr 	_SCLengthZ0 				; length for second
.9b14	ca		dex				dex
.9b15	20 2c 9b	jsr $9b2c			jsr 	_SCSetupZ0 					; setup for first
.9b18	20 37 9b	jsr $9b37			jsr 	_SCLengthZ0 				; length for first
.9b1b	a5 38		lda $38				lda 	zTemp1 						; allocate memory
.9b1d	20 da b7	jsr $b7da			jsr 	StringTempAllocate
.9b20	20 4a 9b	jsr $9b4a			jsr 	_SCCopy 					; copy first out, using zTemp0 from above
.9b23	e8		inx				inx
.9b24	20 2c 9b	jsr $9b2c			jsr 	_SCSetupZ0 					; copy second out
.9b27	20 4a 9b	jsr $9b4a			jsr 	_SCCopy
.9b2a	ca		dex				dex
.9b2b	60		rts				rts
.9b2c					_SCSetupZ0:
.9b2c	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9b2f	85 36		sta $36				sta 	zTemp0
.9b31	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9b34	85 37		sta $37				sta 	zTemp0+1
.9b36	60		rts				rts
.9b37					_SCLengthZ0:
.9b37	5a		phy				phy
.9b38	a0 00		ldy #$00			ldy 	#0
.9b3a					_SCLenLoop:
.9b3a	b1 36		lda ($36),y			lda 	(zTemp0),y
.9b3c	f0 0a		beq $9b48			beq 	_SCLExit
.9b3e	c8		iny				iny
.9b3f	e6 38		inc $38				inc 	zTemp1
.9b41	10 f7		bpl $9b3a			bpl		_SCLenLoop
.9b43	a9 09		lda #$09		lda	#9
.9b45	4c eb 99	jmp $99eb		jmp	ErrorHandler
.9b48					_SCLExit:
.9b48	7a		ply				ply
.9b49	60		rts				rts
.9b4a					_SCCopy:
.9b4a	5a		phy				phy
.9b4b	a0 00		ldy #$00			ldy 	#0
.9b4d					_SCCopyLoop:
.9b4d	b1 36		lda ($36),y			lda 	(zTemp0),y
.9b4f	f0 06		beq $9b57			beq 	_SCCExit
.9b51	20 18 b8	jsr $b818			jsr 	StringTempWrite
.9b54	c8		iny				iny
.9b55	80 f6		bra $9b4d			bra 	_SCCopyLoop
.9b57					_SCCExit:
.9b57	7a		ply				ply
.9b58	60		rts				rts
.9b59					_SCType:
.9b59	4c 61 b4	jmp $b461			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/divide.asm

.ae82					IntegerDivide:
.ae82	fa		plx				plx
.ae83	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.ae86	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.ae89	0a		asl a				asl 	a 							; shift reference bit into sign bit
.ae8a	0a		asl a				asl 	a
.ae8b	10 05		bpl $ae92			bpl 	_NotRef
.ae8d	48		pha				pha
.ae8e	20 0c 9f	jsr $9f0c			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.ae91	68		pla				pla
.ae92					_NotRef:
.ae92	0a		asl a				asl 	a
.ae93	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.ae95	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.ae98	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.ae9b	f0 03		beq $aea0			beq 	_IntegerCode 				; if clear, then we have two integers
.ae9d	4c 61 b4	jmp $b461			jmp 	TypeError 					; anything else, type mismatch.
.aea0					_IntegerCode:
.aea0	20 c2 ae	jsr $aec2			jsr 	CheckDivideZero 			; do div zero check
.aea3	20 fa ae	jsr $aefa			jsr 	Int32Divide 				; do the division
.aea6	20 b7 af	jsr $afb7			jsr 	CalculateSign 				; calculate result sign
.aea9					NSMCopyPlusTwoToZero:
.aea9	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.aeac	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.aeaf	bd 12 04	lda $0412,x			lda 	NSMantissa1+2,x
.aeb2	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.aeb5	bd 1a 04	lda $041a,x			lda 	NSMantissa2+2,x
.aeb8	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.aebb	bd 22 04	lda $0422,x			lda 	NSMantissa3+2,x
.aebe	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.aec1	60		rts				rts
.aec2					CheckDivideZero:
.aec2	e8		inx				inx
.aec3	20 56 a6	jsr $a656			jsr 	NSMIsZero
.aec6	f0 02		beq $aeca			beq 	_CDVError
.aec8	ca		dex				dex
.aec9	60		rts				rts
.aeca					_CDVError:
.aeca	a9 03		lda #$03		lda	#3
.aecc	4c eb 99	jmp $99eb		jmp	ErrorHandler
.aecf					IntegerModulus:
.aecf	fa		plx				plx
.aed0	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.aed3	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.aed6	0a		asl a				asl 	a 							; shift reference bit into sign bit
.aed7	0a		asl a				asl 	a
.aed8	10 05		bpl $aedf			bpl 	_NotRef
.aeda	48		pha				pha
.aedb	20 0c 9f	jsr $9f0c			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.aede	68		pla				pla
.aedf					_NotRef:
.aedf	0a		asl a				asl 	a
.aee0	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.aee2	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.aee5	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.aee8	f0 03		beq $aeed			beq 	_IntegerCode 				; if clear, then we have two integers
.aeea	4c 61 b4	jmp $b461			jmp 	TypeError 					; anything else, type mismatch.
.aeed					_IntegerCode:
.aeed					IntegerModulusNoCheck:
.aeed	20 c2 ae	jsr $aec2			jsr 	CheckDivideZero 			; do div zero check
.aef0	20 fa ae	jsr $aefa			jsr 	Int32Divide 				; do the division
.aef3	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; clear the sign bit.
.aef6	5e 00 04	lsr $0400,x			lsr 	NSStatus,x
.aef9	60		rts				rts
.aefa					Int32Divide:
.aefa	48		pha				pha 								; save AXY
.aefb	5a		phy				phy
.aefc	20 fd a5	jsr $a5fd			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.aeff	20 22 a6	jsr $a622			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.af02	a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.af04					_I32DivideLoop:
.af04	e8		inx				inx
.af05	e8		inx				inx
.af06	20 3b a6	jsr $a63b			jsr 	NSMShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.af09	ca		dex				dex
.af0a	ca		dex				dex
.af0b	20 3c a6	jsr $a63c			jsr 	NSMRotateLeft
.af0e	20 3a af	jsr $af3a			jsr 	DivideCheckSubtract 		; check if subtract possible
.af11	90 03		bcc $af16			bcc 	_I32DivideNoCarryIn
.af13	fe 0a 04	inc $040a,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.af16					_I32DivideNoCarryIn:
.af16	88		dey				dey 								; loop round till division completed.
.af17	d0 eb		bne $af04			bne 	_I32DivideLoop
.af19	7a		ply				ply 								; restore AXY and exit
.af1a	68		pla				pla
.af1b	60		rts				rts
.af1c					Int32ShiftDivide:
.af1c	48		pha				pha 								; save AY
.af1d	5a		phy				phy
.af1e	e8		inx				inx 								; clear S[X+2]
.af1f	e8		inx				inx
.af20	20 26 a6	jsr $a626			jsr 	NSMSetZero
.af23	ca		dex				dex
.af24	ca		dex				dex
.af25	a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.af27					_I32SDLoop:
.af27	20 3a af	jsr $af3a			jsr 	DivideCheckSubtract 		; check if subtract possible
.af2a	e8		inx				inx
.af2b	e8		inx				inx
.af2c	20 3c a6	jsr $a63c			jsr 	NSMRotateLeft				; shift 64 bit FPA left, rotating carry in
.af2f	ca		dex				dex
.af30	ca		dex				dex
.af31	20 3c a6	jsr $a63c			jsr 	NSMRotateLeft
.af34	88		dey				dey 	 							; do 31 times
.af35	d0 f0		bne $af27			bne 	_I32SDLoop
.af37	7a		ply				ply 								; restore AY and exit
.af38	68		pla				pla
.af39	60		rts				rts
.af3a					DivideCheckSubtract:
.af3a	20 06 9c	jsr $9c06			jsr 	SubTopTwoStack 				; subtract Stack[X+1] from Stack[X+0]
.af3d	b0 04		bcs $af43			bcs 	_DCSExit 					; if carry set, then could do, exit
.af3f	20 e0 9b	jsr $9be0			jsr 	AddTopTwoStack 				; add it back in
.af42	18		clc				clc 								; and return False
.af43					_DCSExit:
.af43	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/multiply.asm

.af44					MulInteger:
.af44	fa		plx				plx
.af45	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.af48	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.af4b	0a		asl a				asl 	a 							; shift reference bit into sign bit
.af4c	0a		asl a				asl 	a
.af4d	10 05		bpl $af54			bpl 	_NotRef
.af4f	48		pha				pha
.af50	20 0c 9f	jsr $9f0c			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.af53	68		pla				pla
.af54					_NotRef:
.af54	0a		asl a				asl 	a 							; put MSB of type into A:7
.af55	30 0b		bmi $af62			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.af57	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.af5a	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.af5d	f0 06		beq $af65			beq 	_IntegerCode 				; if clear, then we have two integers
.af5f	4c a0 b1	jmp $b1a0			jmp 	FloatingPointMultiply 							; otherwise at least one float.
.af62					_StringData:
.af62	4c 6b b4	jmp $b46b			jmp 	NotDoneError							; at least one string - don't know both are strings.
.af65					_IntegerCode:
.af65	20 72 af	jsr $af72			jsr 	MultiplyShort
.af68	c9 00		cmp #$00			cmp 	#0
.af6a	f0 05		beq $af71			beq 	_MIExit
.af6c	a9 04		lda #$04		lda	#4
.af6e	4c eb 99	jmp $99eb		jmp	ErrorHandler
.af71					_MIExit:
.af71	60		rts				rts
.af72					MultiplyShort:
.af72	5a		phy				phy 								; save Y
.af73	20 fd a5	jsr $a5fd			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.af76	20 22 a6	jsr $a622			jsr 	NSMSetZeroMantissaOnly 		; set mantissa S[X] to zero
.af79	a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.af7b					_I32MLoop:
.af7b	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.af7e	1d 12 04	ora $0412,x			ora 	NSMantissa1+2,x
.af81	1d 1a 04	ora $041a,x			ora 	NSMantissa2+2,x
.af84	1d 22 04	ora $0422,x			ora 	NSMantissa3+2,x
.af87	f0 28		beq $afb1			beq 	_I32MExit 					; exit if zero
.af89	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.af8c	29 01		and #$01			and 	#1
.af8e	f0 0e		beq $af9e			beq 	_I32MNoAdd
.af90	20 e0 9b	jsr $9be0			jsr 	AddTopTwoStack 				; if so add S[X+1] to S[X+0]
.af93	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.af96	10 06		bpl $af9e			bpl 	_I32MNoAdd
.af98					_I32ShiftRight:
.af98	20 49 a6	jsr $a649			jsr 	NSMShiftRight 				; shift S[X] right
.af9b	c8		iny				iny 								; increment shift count
.af9c	80 0a		bra $afa8			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.af9e					_I32MNoAdd:
.af9e	3c 21 04	bit $0421,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.afa1	70 f5		bvs $af98			bvs 	_I32ShiftRight 				; instead.
.afa3	e8		inx				inx
.afa4	20 3b a6	jsr $a63b			jsr 	NSMShiftLeft 				; shift additive S[X+1] left
.afa7	ca		dex				dex
.afa8					_I32MShiftUpper:
.afa8	e8		inx				inx 								; shift S[X+2] right
.afa9	e8		inx				inx
.afaa	20 49 a6	jsr $a649			jsr 	NSMShiftRight
.afad	ca		dex				dex
.afae	ca		dex				dex
.afaf	80 ca		bra $af7b			bra 	_I32MLoop 					; try again.
.afb1					_I32MExit:
.afb1	20 b7 af	jsr $afb7			jsr 	CalculateSign
.afb4	98		tya				tya 								; shift in A
.afb5	7a		ply				ply 								; restore Y and exit
.afb6	60		rts				rts
.afb7					CalculateSign:
.afb7	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.afba	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; shift result left
.afbd	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.afc0	0a		asl a				asl 	a 							; shift bit 7 into carry
.afc1	7e 00 04	ror $0400,x			ror 	NSStatus,x 					; shift right into status byte.
.afc4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/scompare.asm

.9b5c					CompareStrings:
.9b5c	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check both are strings
.9b5f	3d 01 04	and $0401,x			and 	NSStatus+1,x
.9b62	29 10		and #$10			and 	#NSBIsString
.9b64	f0 2c		beq $9b92			beq 	_CSTypeError
.9b66	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy string addresses to zTemp0/1
.9b69	85 36		sta $36				sta 	zTemp0
.9b6b	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9b6e	85 37		sta $37				sta 	zTemp0+1
.9b70	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.9b73	85 38		sta $38				sta 	zTemp1
.9b75	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9b78	85 39		sta $39				sta 	zTemp1+1
.9b7a	5a		phy				phy 								; save Y so we can access strings
.9b7b	a0 ff		ldy #$ff			ldy 	#$FF 						; -1 for pre increment.
.9b7d					_CSLoop:
.9b7d	c8		iny				iny
.9b7e	b1 36		lda ($36),y			lda 	(zTemp0),y 					; check if they are the same
.9b80	d1 38		cmp ($38),y			cmp 	(zTemp1),y
.9b82	d0 06		bne $9b8a			bne 	_CSDifferent
.9b84	c9 00		cmp #$00			cmp 	#0 							; reached end ?
.9b86	d0 f5		bne $9b7d			bne 	_CSLoop 					; still comparing
.9b88					_CSExit:
.9b88	7a		ply				ply 								; reached end, return zero in A from EOS
.9b89	60		rts				rts
.9b8a					_CSDifferent:
.9b8a	a9 ff		lda #$ff			lda 	#255 						; if < return $FF
.9b8c	90 fa		bcc $9b88			bcc		_CSExit
.9b8e	a9 01		lda #$01			lda 	#1 							; otherwise return 1.
.9b90	80 f6		bra $9b88			bra 	_CSExit
.9b92					_CSTypeError:
.9b92	4c 61 b4	jmp $b461			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/shifts.asm

.9b95					ShiftLeft:
.9b95	38		sec				sec
.9b96	80 01		bra $9b99			bra 	ShiftMain
.9b98					ShiftRight:
.9b98	18		clc				clc
.9b99					ShiftMain:
.9b99	fa		plx				plx 								; restore X
.9b9a	08		php				php 								; save direction
.9b9b	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9b9e	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9ba1	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9ba2	0a		asl a				asl 	a
.9ba3	10 05		bpl $9baa			bpl 	_NotRef
.9ba5	48		pha				pha
.9ba6	20 0c 9f	jsr $9f0c			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9ba9	68		pla				pla
.9baa					_NotRef:
.9baa	0a		asl a				asl 	a
.9bab	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9bad	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9bb0	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9bb3	f0 03		beq $9bb8			beq 	_IntegerCode 				; if clear, then we have two integers
.9bb5	4c 61 b4	jmp $b461			jmp 	TypeError 					; anything else, type mismatch.
.9bb8					_IntegerCode:
.9bb8	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; check number < 32
.9bbb	29 e0		and #$e0			and 	#$E0
.9bbd	1d 11 04	ora $0411,x			ora 	NSMantissa1+1,x
.9bc0	1d 19 04	ora $0419,x			ora 	NSMantissa2+1,x
.9bc3	1d 21 04	ora $0421,x			ora 	NSMantissa3+1,x
.9bc6	d0 13		bne $9bdb			bne 	_SMExit0 					; if >= 32 it will always return zero.
.9bc8					_SMLoop:
.9bc8	de 09 04	dec $0409,x			dec 	NSMantissa0+1,x 			; predecrement, could do << 0
.9bcb	30 11		bmi $9bde			bmi 	_SMExit 					; exit if done.
.9bcd	28		plp				plp 								; restore direcition setting
.9bce	08		php				php
.9bcf	90 05		bcc $9bd6			bcc 	_SMRight
.9bd1	20 3b a6	jsr $a63b			jsr 	NSMShiftLeft 				; shift left if CS
.9bd4	80 f2		bra $9bc8			bra 	_SMLoop
.9bd6					_SMRight:
.9bd6	20 49 a6	jsr $a649			jsr 	NSMShiftRight 				; shift right if CC
.9bd9	80 ed		bra $9bc8			bra 	_SMLoop
.9bdb					_SMExit0:
.9bdb	20 26 a6	jsr $a626			jsr 	NSMSetZero 					; return zero.
.9bde					_SMExit:
.9bde	28		plp				plp 								; throw direction
.9bdf	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/simple.asm

.9be0					AddTopTwoStack:
.9be0	18		clc				clc
.9be1	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9be4	7d 09 04	adc $0409,x			adc 		NSMantissa0+1,x
.9be7	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9bea	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9bed	7d 11 04	adc $0411,x			adc 		NSMantissa1+1,x
.9bf0	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9bf3	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9bf6	7d 19 04	adc $0419,x			adc 		NSMantissa2+1,x
.9bf9	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9bfc	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9bff	7d 21 04	adc $0421,x			adc 		NSMantissa3+1,x
.9c02	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9c05	60		rts				rts
.9c06					SubTopTwoStack:
.9c06	38		sec				sec
.9c07	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9c0a	fd 09 04	sbc $0409,x			sbc 		NSMantissa0+1,x
.9c0d	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9c10	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9c13	fd 11 04	sbc $0411,x			sbc 		NSMantissa1+1,x
.9c16	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9c19	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9c1c	fd 19 04	sbc $0419,x			sbc 		NSMantissa2+1,x
.9c1f	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9c22	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9c25	fd 21 04	sbc $0421,x			sbc 		NSMantissa3+1,x
.9c28	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9c2b	60		rts				rts
.9c2c					AddInteger:
.9c2c	fa		plx				plx
.9c2d	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9c30	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9c33	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9c34	0a		asl a				asl 	a
.9c35	10 05		bpl $9c3c			bpl 	_NotRef
.9c37	48		pha				pha
.9c38	20 0c 9f	jsr $9f0c			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9c3b	68		pla				pla
.9c3c					_NotRef:
.9c3c	0a		asl a				asl 	a 							; put MSB of type into A:7
.9c3d	30 0b		bmi $9c4a			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.9c3f	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9c42	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9c45	f0 06		beq $9c4d			beq 	_IntegerCode 				; if clear, then we have two integers
.9c47	4c 20 b0	jmp $b020			jmp 	FloatingPointAdd 							; otherwise at least one float.
.9c4a					_StringData:
.9c4a	4c ff 9a	jmp $9aff			jmp 	StringConcat							; at least one string - don't know both are strings.
.9c4d					_IntegerCode:
.9c4d					AddCode:
.9c4d	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.9c50	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.9c53	10 8b		bpl $9be0			bpl 	AddTopTwoStack
.9c55	20 06 9c	jsr $9c06			jsr 	SubTopTwoStack 				; do a physical subtraction
.9c58	3c 20 04	bit $0420,x			bit 	NSMantissa3,x 				; result is +ve, okay
.9c5b	10 09		bpl $9c66			bpl 	_AddExit
.9c5d	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; sign is that of 2nd value
.9c60	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9c63	20 db a5	jsr $a5db			jsr 	NSMNegateMantissa 			; negate the mantissa and exit
.9c66					_AddExit:
.9c66	20 56 a6	jsr $a656			jsr 	NSMIsZero 					; check for -0
.9c69	d0 03		bne $9c6e			bne 	_AddNonZero
.9c6b	9e 00 04	stz $0400,x			stz 	NSStatus,x
.9c6e					_AddNonZero:
.9c6e	60		rts				rts
.9c6f					SubInteger:
.9c6f	fa		plx				plx
.9c70	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9c73	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9c76	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9c77	0a		asl a				asl 	a
.9c78	10 05		bpl $9c7f			bpl 	_NotRef
.9c7a	48		pha				pha
.9c7b	20 0c 9f	jsr $9f0c			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9c7e	68		pla				pla
.9c7f					_NotRef:
.9c7f	0a		asl a				asl 	a 							; put MSB of type into A:7
.9c80	30 0b		bmi $9c8d			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.9c82	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9c85	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9c88	f0 06		beq $9c90			beq 	_IntegerCode 				; if clear, then we have two integers
.9c8a	4c 25 b0	jmp $b025			jmp 	FloatingPointSub 							; otherwise at least one float.
.9c8d					_StringData:
.9c8d	4c 6b b4	jmp $b46b			jmp 	NotDoneError							; at least one string - don't know both are strings.
.9c90					_IntegerCode:
.9c90	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; negate the second value.
.9c93	49 80		eor #$80			eor 	#$80
.9c95	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.9c98	80 b3		bra $9c4d			bra 	AddCode 					; and do the same code as add.
.9c9a					AndInteger:
.9c9a	fa		plx				plx
.9c9b	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9c9e	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9ca1	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9ca2	0a		asl a				asl 	a
.9ca3	10 05		bpl $9caa			bpl 	_NotRef
.9ca5	48		pha				pha
.9ca6	20 0c 9f	jsr $9f0c			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9ca9	68		pla				pla
.9caa					_NotRef:
.9caa	0a		asl a				asl 	a
.9cab	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9cad	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9cb0	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9cb3	f0 03		beq $9cb8			beq 	_IntegerCode 				; if clear, then we have two integers
.9cb5	4c 61 b4	jmp $b461			jmp 	TypeError 					; anything else, type mismatch.
.9cb8					_IntegerCode:
.9cb8	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9cbb	3d 09 04	and $0409,x			and 		NSMantissa0+1,x
.9cbe	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9cc1	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9cc4	3d 11 04	and $0411,x			and 		NSMantissa1+1,x
.9cc7	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9cca	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9ccd	3d 19 04	and $0419,x			and 		NSMantissa2+1,x
.9cd0	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9cd3	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9cd6	3d 21 04	and $0421,x			and 		NSMantissa3+1,x
.9cd9	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9cdc	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.9cdf	60		rts				rts
.9ce0					OraInteger:
.9ce0	fa		plx				plx
.9ce1	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9ce4	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9ce7	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9ce8	0a		asl a				asl 	a
.9ce9	10 05		bpl $9cf0			bpl 	_NotRef
.9ceb	48		pha				pha
.9cec	20 0c 9f	jsr $9f0c			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9cef	68		pla				pla
.9cf0					_NotRef:
.9cf0	0a		asl a				asl 	a
.9cf1	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9cf3	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9cf6	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9cf9	f0 03		beq $9cfe			beq 	_IntegerCode 				; if clear, then we have two integers
.9cfb	4c 61 b4	jmp $b461			jmp 	TypeError 					; anything else, type mismatch.
.9cfe					_IntegerCode:
.9cfe	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9d01	1d 09 04	ora $0409,x			ora 		NSMantissa0+1,x
.9d04	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9d07	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9d0a	1d 11 04	ora $0411,x			ora 		NSMantissa1+1,x
.9d0d	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9d10	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9d13	1d 19 04	ora $0419,x			ora 		NSMantissa2+1,x
.9d16	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9d19	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9d1c	1d 21 04	ora $0421,x			ora 		NSMantissa3+1,x
.9d1f	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9d22	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.9d25	60		rts				rts
.9d26					EorInteger:
.9d26	fa		plx				plx
.9d27	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9d2a	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9d2d	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9d2e	0a		asl a				asl 	a
.9d2f	10 05		bpl $9d36			bpl 	_NotRef
.9d31	48		pha				pha
.9d32	20 0c 9f	jsr $9f0c			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9d35	68		pla				pla
.9d36					_NotRef:
.9d36	0a		asl a				asl 	a
.9d37	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9d39	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9d3c	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9d3f	f0 03		beq $9d44			beq 	_IntegerCode 				; if clear, then we have two integers
.9d41	4c 61 b4	jmp $b461			jmp 	TypeError 					; anything else, type mismatch.
.9d44					_IntegerCode:
.9d44	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9d47	5d 09 04	eor $0409,x			eor 		NSMantissa0+1,x
.9d4a	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9d4d	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9d50	5d 11 04	eor $0411,x			eor 		NSMantissa1+1,x
.9d53	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9d56	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9d59	5d 19 04	eor $0419,x			eor 		NSMantissa2+1,x
.9d5c	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9d5f	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9d62	5d 21 04	eor $0421,x			eor 		NSMantissa3+1,x
.9d65	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9d68	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.9d6b	60		rts				rts
.9d6c					WordIndirect:
.9d6c	fa		plx				plx
.9d6d	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9d70	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9d73	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9d74	0a		asl a				asl 	a
.9d75	10 05		bpl $9d7c			bpl 	_NotRef
.9d77	48		pha				pha
.9d78	20 0c 9f	jsr $9f0c			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9d7b	68		pla				pla
.9d7c					_NotRef:
.9d7c	0a		asl a				asl 	a
.9d7d	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9d7f	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9d82	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9d85	f0 03		beq $9d8a			beq 	_IntegerCode 				; if clear, then we have two integers
.9d87	4c 61 b4	jmp $b461			jmp 	TypeError 					; anything else, type mismatch.
.9d8a					_IntegerCode:
.9d8a	20 4d 9c	jsr $9c4d			jsr 	AddCode 					; add the two values
.9d8d	a9 22		lda #$22			lda 	#NSBIsReference+2 			; make a 2 byte reference
.9d8f	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9d92	60		rts				rts
.9d93					ByteIndirect:
.9d93	fa		plx				plx
.9d94	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9d97	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9d9a	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9d9b	0a		asl a				asl 	a
.9d9c	10 05		bpl $9da3			bpl 	_NotRef
.9d9e	48		pha				pha
.9d9f	20 0c 9f	jsr $9f0c			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9da2	68		pla				pla
.9da3					_NotRef:
.9da3	0a		asl a				asl 	a
.9da4	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9da6	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9da9	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9dac	f0 03		beq $9db1			beq 	_IntegerCode 				; if clear, then we have two integers
.9dae	4c 61 b4	jmp $b461			jmp 	TypeError 					; anything else, type mismatch.
.9db1					_IntegerCode:
.9db1	20 4d 9c	jsr $9c4d			jsr 	AddCode 					; add the two values
.9db4	a9 21		lda #$21			lda 	#NSBIsReference+1 			; make a 1 byte reference
.9db6	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9db9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/tostring.asm

.afc5					ConvertInt16:
.afc5	8d 08 04	sta $0408			sta 	NSMantissa0 				; set up as 32 bit conversion
.afc8	8e 10 04	stx $0410			stx 	NSMantissa1
.afcb	9c 18 04	stz $0418			stz 	NSMantissa2
.afce	9c 20 04	stz $0420			stz 	NSMantissa3
.afd1	9c 00 04	stz $0400			stz 	NSStatus 					; positive integer
.afd4	a2 00		ldx #$00			ldx 	#0 							; stack level
.afd6	a9 0a		lda #$0a			lda 	#10 						; base
.afd8	80 00		bra $afda			bra 	ConvertInt32
.afda					ConvertInt32:
.afda	5a		phy				phy
.afdb	a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.afdd	2c 00 04	bit $0400			bit 	NSStatus 					; output a - if not negative.
.afe0	10 08		bpl $afea			bpl 	_CI32NotNeg
.afe2	48		pha				pha
.afe3	a9 2d		lda #$2d			lda 	#'-'
.afe5	99 f8 05	sta $05f8,y			sta 	NumberBuffer,y
.afe8	c8		iny				iny
.afe9	68		pla				pla
.afea					_CI32NotNeg:
.afea	20 f8 af	jsr $aff8			jsr 	_CI32DivideConvert 			; recursive conversion
.afed	a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.afef	99 f8 05	sta $05f8,y			sta 	NumberBuffer,y
.aff2	7a		ply				ply
.aff3	a2 05		ldx #$05			ldx 	#NumberBuffer >> 8
.aff5	a9 f8		lda #$f8			lda 	#NumberBuffer & $FF
.aff7	60		rts				rts
.aff8					_CI32DivideConvert:
.aff8	e8		inx				inx 								; write to next slot up
.aff9	20 28 a6	jsr $a628			jsr 	NSMSetByte
.affc	ca		dex				dex
.affd	20 fa ae	jsr $aefa			jsr 	Int32Divide 				; divide
.b000	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; save remainder
.b003	48		pha				pha
.b004	20 a9 ae	jsr $aea9			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.b007	20 56 a6	jsr $a656			jsr 	NSMIsZero 					; is it zero ?
.b00a	f0 06		beq $b012			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.b00c	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.b00f	20 f8 af	jsr $aff8			jsr 	_CI32DivideConvert 			; and recusrively call.
.b012					_CI32NoRecurse:
.b012	68		pla				pla 								; remainder
.b013	c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII
.b015	90 02		bcc $b019			bcc 	_CI32NotHex
.b017	69 26		adc #$26			adc 	#6+32
.b019					_CI32NotHex:
.b019	69 30		adc #$30			adc 	#48
.b01b	99 f8 05	sta $05f8,y			sta 	NumberBuffer,y 				; write out and exit
.b01e	c8		iny				iny
.b01f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/expression.asm


;******  Processing file: ./common/expressions/../generated/precedence.dat

.9dba					PrecedenceLevel:
>9dba	04					.byte	 4	; $00 <<
>9dbb	02					.byte	 2	; $01 <=
>9dbc	02					.byte	 2	; $02 <>
>9dbd	00					.byte	 0	; $03 !!3
>9dbe	00					.byte	 0	; $04 ><
>9dbf	02					.byte	 2	; $05 >=
>9dc0	04					.byte	 4	; $06 >>
>9dc1	00					.byte	 0	; $07 !!7
>9dc2	00					.byte	 0	; $08 !!8
>9dc3	00					.byte	 0	; $09 !!9
>9dc4	00					.byte	 0	; $0a !!10
>9dc5	00					.byte	 0	; $0b !!11
>9dc6	00					.byte	 0	; $0c !!12
>9dc7	00					.byte	 0	; $0d !!13
>9dc8	00					.byte	 0	; $0e !!14
>9dc9	00					.byte	 0	; $0f !!15
>9dca	00					.byte	 0	; $10 @
>9dcb	00					.byte	 0	; $11 !!17
>9dcc	00					.byte	 0	; $12 !!18
>9dcd	00					.byte	 0	; $13 [
>9dce	04					.byte	 4	; $14 \
>9dcf	00					.byte	 0	; $15 ]
>9dd0	01					.byte	 1	; $16 ^
>9dd1	00					.byte	 0	; $17 _
>9dd2	00					.byte	 0	; $18 `
>9dd3	00					.byte	 0	; $19 !!25
>9dd4	00					.byte	 0	; $1a !!26
>9dd5	00					.byte	 0	; $1b {
>9dd6	01					.byte	 1	; $1c |
>9dd7	00					.byte	 0	; $1d }
>9dd8	00					.byte	 0	; $1e ~
>9dd9	00					.byte	 0	; $1f [7m<7F>[m
>9dda	00					.byte	 0	; $20
>9ddb	05					.byte	 5	; $21 !
>9ddc	00					.byte	 0	; $22 "
>9ddd	00					.byte	 0	; $23 #
>9dde	05					.byte	 5	; $24 $
>9ddf	04					.byte	 4	; $25 %
>9de0	01					.byte	 1	; $26 &
>9de1	00					.byte	 0	; $27 '
>9de2	00					.byte	 0	; $28 (
>9de3	00					.byte	 0	; $29 )
>9de4	04					.byte	 4	; $2a *
>9de5	03					.byte	 3	; $2b +
>9de6	00					.byte	 0	; $2c ,
>9de7	03					.byte	 3	; $2d -
>9de8	00					.byte	 0	; $2e .
>9de9	04					.byte	 4	; $2f /
>9dea	00					.byte	 0	; $30 0
>9deb	00					.byte	 0	; $31 1
>9dec	00					.byte	 0	; $32 2
>9ded	00					.byte	 0	; $33 3
>9dee	00					.byte	 0	; $34 4
>9def	00					.byte	 0	; $35 5
>9df0	00					.byte	 0	; $36 6
>9df1	00					.byte	 0	; $37 7
>9df2	00					.byte	 0	; $38 8
>9df3	00					.byte	 0	; $39 9
>9df4	00					.byte	 0	; $3a :
>9df5	00					.byte	 0	; $3b ;
>9df6	02					.byte	 2	; $3c <
>9df7	02					.byte	 2	; $3d =
>9df8	02					.byte	 2	; $3e >
>9df9	05					.byte	 5	; $3f ?

;******  Return to file: ./common/expressions/expression.asm

.9dfa					EvaluateExpressionAt0:
.9dfa	a2 00		ldx #$00			ldx 	#0 							; bottom stack level
.9dfc					EvaluateExpression:
.9dfc	a9 00		lda #$00			lda 	#0 							; lowest precedence level
.9dfe					EvaluateExpressionAtPrecedence:
.9dfe	48		pha				pha 								; save precedence level
.9dff	20 cd a0	jsr $a0cd			jsr 	EvaluateTerm 				; evaluate term into level X.
.9e02	68		pla				pla 								; restore precedence level.
.9e03					_EXPRLoop:
.9e03	85 36		sta $36				sta 	zTemp0 						; save current precedence level.
.9e05	b1 30		lda ($30),y			lda 	(codePtr),y
.9e07	c9 40		cmp #$40			cmp		#$40 						; if >= $40 cannot be an operator
.9e09	b0 25		bcs $9e30			bcs 	_EXPRExit
.9e0b	da		phx				phx 								; read the operator precedence
.9e0c	aa		tax				tax
.9e0d	bd ba 9d	lda $9dba,x			lda 	PrecedenceLevel,x
.9e10	fa		plx				plx
.9e11	c9 00		cmp #$00			cmp 	#0							; if zero exit (not an operator)
.9e13	f0 1b		beq $9e30			beq 	_EXPRExit
.9e15	85 37		sta $37				sta 	zTemp0+1 					; save operator precedence level.
.9e17	a5 36		lda $36				lda 	zTemp0 						; compare current precedence vs. operator precedence
.9e19	c5 37		cmp $37				cmp 	zTemp0+1
.9e1b	b0 13		bcs $9e30			bcs		_EXPRExit 					; if current >= operator exit
.9e1d	48		pha				pha 								; save current precedence.
.9e1e	b1 30		lda ($30),y			lda 	(codePtr),y
.9e20	c8		iny				iny
.9e21	48		pha				pha
.9e22	a5 37		lda $37				lda 	zTemp0+1 					; get operator precedence level
.9e24	e8		inx				inx 								; work out the right hand side.
.9e25	20 fe 9d	jsr $9dfe			jsr 	EvaluateExpressionAtPrecedence
.9e28	ca		dex				dex
.9e29	68		pla				pla 								; get operator, call the code.
.9e2a	20 33 9e	jsr $9e33			jsr 	_EXPRCaller
.9e2d	68		pla				pla 								; restore precedence level
.9e2e	80 d3		bra $9e03			bra 	_EXPRLoop 					; and go round.
.9e30					_EXPRExit:
.9e30	a5 36		lda $36				lda 	zTemp0 						; A = current precedence level.
.9e32	60		rts				rts
.9e33					_EXPRCaller:
.9e33	da		phx				phx 								; save on stack, first thing is to restore it
.9e34	0a		asl a				asl 	a 							; double so can use vectors into X
.9e35	aa		tax				tax
.9e36	7c 70 95	jmp ($9570,x)			jmp 	(VectorSetPunc,x) 			; and go to the code.

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/addsub.asm

.b020					FloatingPointAdd:
.b020	20 c9 b1	jsr $b1c9			jsr 	FloatPrepare 				; prepare for floats
.b023	80 0b		bra $b030			bra 	FloatAdd
.b025					FloatingPointSub:
.b025	20 c9 b1	jsr $b1c9			jsr 	FloatPrepare 				; prepare for floats
.b028					FloatSubtract:
.b028	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; negate FPB
.b02b	49 80		eor #$80			eor 	#$80
.b02d	9d 01 04	sta $0401,x			sta 	NSStatus+1,x				; and fall through.
.b030					FloatAdd:
.b030	48		pha				pha
.b031	5a		phy				phy
.b032	20 da b1	jsr $b1da			jsr 	NSNormalise 				; normalise S[X]
.b035	f0 5c		beq $b093			beq 	_FAReturn1
.b037	e8		inx				inx 								; normalise S[X+1]
.b038	20 da b1	jsr $b1da			jsr 	NSNormalise
.b03b	ca		dex				dex
.b03c	c9 00		cmp #$00			cmp 	#0
.b03e	f0 77		beq $b0b7			beq 	_FAExit 					; if so, just return A
.b040	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; are the exponents the same ?
.b043	dd 29 04	cmp $0429,x			cmp 	NSExponent+1,x
.b046	f0 1b		beq $b063			beq 	_FAExponentsEqual
.b048	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; work out the larger exponent
.b04b	a8		tay				tay
.b04c	38		sec				sec 								; do a signed comparison of the exponents.
.b04d	fd 29 04	sbc $0429,x			sbc 	NSExponent+1,x
.b050	50 02		bvc $b054			bvc 	_FANoSignedChange
.b052	49 80		eor #$80			eor 	#$80
.b054					_FANoSignedChange:
.b054	29 80		and #$80			and 	#$80
.b056	10 03		bpl $b05b			bpl 	_FAHaveMax
.b058	bc 29 04	ldy $0429,x			ldy 	NSExponent+1,x
.b05b					_FAHaveMax:
.b05b	20 ba b0	jsr $b0ba			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.b05e	e8		inx				inx
.b05f	20 ba b0	jsr $b0ba			jsr 	_FAShiftToExponent
.b062	ca		dex				dex
.b063					_FAExponentsEqual:
.b063	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; are the signs the same
.b066	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.b069	30 10		bmi $b07b			bmi 	_FADifferentSigns
.b06b	20 e0 9b	jsr $9be0			jsr 	AddTopTwoStack 				; do the add of the mantissae
.b06e	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.b071	10 44		bpl $b0b7			bpl 	_FAExit 					; if no, we are done.
.b073	20 49 a6	jsr $a649			jsr 	NSMShiftRight 				; shift A right, renormalising it.
.b076	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; bump the exponent and exit
.b079	80 3c		bra $b0b7			bra 	_FAExit
.b07b					_FADifferentSigns:
.b07b	20 06 9c	jsr $9c06			jsr 	SubTopTwoStack 				; subtract mantissa B from A
.b07e	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; is the result negative ?
.b081	10 06		bpl $b089			bpl 	_FACheckZero 				; if no, check for -0
.b083	20 d2 a5	jsr $a5d2			jsr 	NSMNegate 					; netate result
.b086	20 db a5	jsr $a5db			jsr 	NSMNegateMantissa 			; negate (2'c) the mantissa
.b089					_FACheckZero:
.b089	20 56 a6	jsr $a656			jsr 	NSMIsZero	 				; check for -0
.b08c	d0 29		bne $b0b7			bne 	_FAExit
.b08e	9e 00 04	stz $0400,x			stz 	NSStatus,x
.b091	80 24		bra $b0b7			bra 	_FAExit
.b093					_FAReturn1:
.b093	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.b096	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.b099	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.b09c	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.b09f	bd 19 04	lda $0419,x			lda 	NSMantissa2+1,x
.b0a2	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.b0a5	bd 21 04	lda $0421,x			lda 	NSMantissa3+1,x
.b0a8	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.b0ab	bd 29 04	lda $0429,x			lda 	NSExponent+1,x
.b0ae	9d 28 04	sta $0428,x			sta 	NSExponent,x
.b0b1	bd 01 04	lda $0401,x			lda 	NSStatus+1,x
.b0b4	9d 00 04	sta $0400,x			sta 	NSStatus,x
.b0b7					_FAExit:
.b0b7	7a		ply				ply
.b0b8	68		pla				pla
.b0b9	60		rts				rts
.b0ba					_FAShiftToExponent:
.b0ba					_FAShiftToExponent2:
.b0ba	98		tya				tya 								; compare Y to exponent
.b0bb	dd 28 04	cmp $0428,x			cmp 	NSExponent,x 				; reached the exponent required ?
.b0be	f0 08		beq $b0c8			beq 	_FASEExit 					; exit if so.
.b0c0	20 49 a6	jsr $a649			jsr 	NSMShiftRight	 			; shift the mantissa right
.b0c3	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; increment exponent
.b0c6	80 f2		bra $b0ba			bra 	_FAShiftToExponent2
.b0c8					_FASEExit:
.b0c8	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/compare.asm

.b0c9					CompareFloat:
.b0c9	20 28 b0	jsr $b028			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.b0cc	bd 10 04	lda $0410,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.b0cf	29 f8		and #$f8			and 	#$F8
.b0d1	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.b0d4	1d 20 04	ora $0420,x			ora 	NSMantissa3,x
.b0d7	f0 09		beq $b0e2			beq 	_FCExit 					; zero, so approximately identical
.b0d9	a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.b0db	3c 00 04	bit $0400,x			bit 	NSStatus,x
.b0de	10 02		bpl $b0e2			bpl 	_FCExit
.b0e0					_FCNegative:
.b0e0	a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.b0e2					_FCExit:
.b0e2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/divide.asm

.b0e3					FDivideCommand:
.b0e3	fa		plx				plx	 								; restore stack position
.b0e4	20 c9 b1	jsr $b1c9			jsr 	FloatPrepare 				; prepare for floats
.b0e7					FloatDivide:
.b0e7	48		pha				pha
.b0e8	e8		inx				inx
.b0e9	20 da b1	jsr $b1da			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.b0ec	ca		dex				dex
.b0ed	c9 00		cmp #$00			cmp 	#0
.b0ef	f0 20		beq $b111			beq 	_FDZero
.b0f1	20 da b1	jsr $b1da			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.b0f4	f0 19		beq $b10f			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.b0f6	20 1c af	jsr $af1c			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.b0f9	20 a9 ae	jsr $aea9			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.b0fc	20 da b1	jsr $b1da			jsr		NSNormalise 				; renormalise
.b0ff	20 b7 af	jsr $afb7			jsr 	CalculateSign 				; calculate result sign
.b102	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; calculate exponent
.b105	38		sec				sec
.b106	fd 29 04	sbc $0429,x			sbc 	NSExponent+1,x
.b109	38		sec				sec
.b10a	e9 1e		sbc #$1e			sbc 	#30
.b10c	9d 28 04	sta $0428,x			sta 	NSExponent,x
.b10f					_FDExit:
.b10f	68		pla				pla
.b110	60		rts				rts
.b111					_FDZero:
.b111	a9 03		lda #$03		lda	#3
.b113	4c eb 99	jmp $99eb		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/fractional.asm

.b116					FloatFractionalPart:
.b116	5a		phy				phy
.b117	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; take absolute value
.b11a	29 7f		and #$7f			and 	#$7F
.b11c	9d 00 04	sta $0400,x			sta 	NSStatus,x
.b11f	20 da b1	jsr $b1da			jsr 	NSNormalise
.b122	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.b125	38		sec				sec
.b126	e9 e0		sbc #$e0			sbc 	#$E0
.b128	90 31		bcc $b15b			bcc 	_FFPExit 					; already fractional
.b12a	c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.b12c	b0 2a		bcs $b158			bcs 	_FFPZero
.b12e	a8		tay				tay 								; put count to do in Y
.b12f	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; do each in turn.
.b132	20 5d b1	jsr $b15d			jsr 	_FFPPartial
.b135	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.b138	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.b13b	20 5d b1	jsr $b15d			jsr 	_FFPPartial
.b13e	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.b141	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.b144	20 5d b1	jsr $b15d			jsr 	_FFPPartial
.b147	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.b14a	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.b14d	20 5d b1	jsr $b15d			jsr 	_FFPPartial
.b150	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.b153	20 56 a6	jsr $a656			jsr 	NSMIsZero 					; zeroed check.
.b156	d0 03		bne $b15b			bne 	_FFPExit
.b158					_FFPZero:
.b158	20 26 a6	jsr $a626			jsr 	NSMSetZero
.b15b					_FFPExit:
.b15b	7a		ply				ply
.b15c	60		rts				rts
.b15d					_FFPPartial:
.b15d	c0 00		cpy #$00			cpy 	#0 							; no more to do
.b15f	f0 17		beq $b178			beq 	_FFFPPExit
.b161	c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.b163	b0 0c		bcs $b171			bcs 	_FFFPPWholeByte
.b165	5a		phy				phy
.b166					_FFFPPLeft:
.b166	0a		asl a				asl 	a
.b167	88		dey				dey
.b168	d0 fc		bne $b166			bne 	_FFFPPLeft
.b16a	7a		ply				ply
.b16b					_FFFPPRight:
.b16b	4a		lsr a				lsr 	a
.b16c	88		dey				dey
.b16d	d0 fc		bne $b16b			bne 	_FFFPPRight
.b16f	80 07		bra $b178			bra 	_FFFPPExit
.b171					_FFFPPWholeByte:
.b171	98		tya				tya 								; subtract 8 from count
.b172	38		sec				sec
.b173	e9 08		sbc #$08			sbc 	#8
.b175	a8		tay				tay
.b176	a9 00		lda #$00			lda 	#0 							; and clear all
.b178					_FFFPPExit:
.b178	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/integer.asm

.b179					FloatIntegerPart:
.b179	48		pha				pha
.b17a	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; is it integer already ?
.b17d	f0 1f		beq $b19e			beq 	_FIPExit 					; if so do nothing
.b17f	20 56 a6	jsr $a656			jsr 	NSMIsZero 					; is it zero ?
.b182	f0 17		beq $b19b			beq 	_FIPZero 					; if so return zero.
.b184	20 da b1	jsr $b1da			jsr 	NSNormalise 				; normalise
.b187	f0 12		beq $b19b			beq 	_FIPZero 					; normalised to zero, exit zero
.b189					_FIPShift:
.b189	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.b18c	10 08		bpl $b196			bpl 	_FIPCheckZero
.b18e	20 49 a6	jsr $a649			jsr 	NSMShiftRight 				; shift mantissa right
.b191	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; bump exponent
.b194	80 f3		bra $b189			bra 	_FIPShift
.b196					_FIPCheckZero:
.b196	20 56 a6	jsr $a656			jsr 	NSMIsZero 					; avoid -0 problem
.b199	d0 03		bne $b19e			bne 	_FIPExit 					; set to zero if mantissa zero.
.b19b					_FIPZero:
.b19b	20 26 a6	jsr $a626			jsr 	NSMSetZero
.b19e					_FIPExit:
.b19e	68		pla				pla
.b19f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/multiply.asm

.b1a0					FloatingPointMultiply:
.b1a0	20 c9 b1	jsr $b1c9			jsr 	FloatPrepare 				; prepare for floats
.b1a3					FloatMultiply:
.b1a3	48		pha				pha
.b1a4	20 da b1	jsr $b1da			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.b1a7	f0 1b		beq $b1c4			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.b1a9	e8		inx				inx
.b1aa	20 da b1	jsr $b1da			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.b1ad	ca		dex				dex
.b1ae	c9 00		cmp #$00			cmp 	#0
.b1b0	f0 0f		beq $b1c1			beq 	_FDSetZero
.b1b2	20 72 af	jsr $af72			jsr 	MultiplyShort 				; calculate the result.
.b1b5	7d 28 04	adc $0428,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.b1b8	18		clc				clc
.b1b9	7d 29 04	adc $0429,x			adc 	NSExponent+1,x
.b1bc	9d 28 04	sta $0428,x			sta 	NSExponent,x
.b1bf	80 03		bra $b1c4			bra 	_FDExit
.b1c1					_FDSetZero:
.b1c1	20 26 a6	jsr $a626			jsr 	NSMSetZero 					; return 0
.b1c4					_FDExit:
.b1c4	20 da b1	jsr $b1da			jsr 	NSNormalise 				; normalise the result
.b1c7	68		pla				pla
.b1c8	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/utility.asm

.b1c9					FloatPrepare:
.b1c9	20 0c 9f	jsr $9f0c			jsr 	DereferenceTopTwo 			; dereference the top two values
.b1cc	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check ints/floats
.b1cf	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.b1d2	29 10		and #$10			and 	#NSBIsString
.b1d4	d0 01		bne $b1d7			bne 	_FDType
.b1d6	60		rts				rts
.b1d7					_FDType:
.b1d7	4c 61 b4	jmp $b461			jmp 	TypeError
.b1da					NSNormalise:
.b1da	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; make float, keep sign
.b1dd	29 80		and #$80			and 	#$80
.b1df	09 08		ora #$08			ora 	#NSTFloat
.b1e1	9d 00 04	sta $0400,x			sta 	NSStatus,x
.b1e4	20 56 a6	jsr $a656			jsr 	NSMIsZero 					; if zero exit
.b1e7	d0 09		bne $b1f2			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.b1e9	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; clear the sign bit.
.b1ec	7e 00 04	ror $0400,x			ror 	NSStatus,x 					; (no -0)
.b1ef	a9 00		lda #$00			lda 	#0 							; set Z flag
.b1f1	60		rts				rts
.b1f2					_NSNormaliseOptimise:
.b1f2	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; upper byte zero ?
.b1f5	d0 22		bne $b219			bne 	_NSNormaliseLoop
.b1f7	bd 18 04	lda $0418,x			lda 	NSMantissa2,x 				; byte normalise
.b1fa	30 1d		bmi $b219			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.b1fc	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.b1ff	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.b202	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.b205	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.b208	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.b20b	9e 08 04	stz $0408,x			stz 	NSMantissa0,x
.b20e	bd 28 04	lda $0428,x			lda 	NSExponent,x
.b211	38		sec				sec
.b212	e9 08		sbc #$08			sbc 	#8
.b214	9d 28 04	sta $0428,x			sta 	NSExponent,x
.b217	80 d9		bra $b1f2			bra 	_NSNormaliseOptimise
.b219					_NSNormaliseLoop:
.b219	3c 20 04	bit $0420,x			bit 	NSMantissa3,x 				; bit 30 set ?
.b21c	70 08		bvs $b226			bvs 	_NSNExit 					; exit if so with Z flag clear
.b21e	20 3b a6	jsr $a63b			jsr 	NSMShiftLeft 				; shift mantissa left
.b221	de 28 04	dec $0428,x			dec 	NSExponent,x 				; adjust exponent
.b224	80 f3		bra $b219			bra 	_NSNormaliseLoop
.b226					_NSNExit:
.b226	a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.b228	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignnumber.asm

.9e39					AssignNumber:
.9e39	5a		phy				phy
.9e3a	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy mantissa0/1 to zTemp0
.9e3d	85 36		sta $36				sta 	zTemp0
.9e3f	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9e42	85 37		sta $37				sta 	zTemp0+1
.9e44	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; clear reference bits
.9e47	29 df		and #$df			and 	#(NSBIsReference ^ $FF)
.9e49	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9e4c	29 18		and #$18			and 	#NSBTypeMask				; assigning to a float ?
.9e4e	c9 08		cmp #$08			cmp 	#NSTFloat
.9e50	f0 2a		beq $9e7c			beq 	_ANFloat
.9e52	bd 29 04	lda $0429,x			lda		NSExponent+1,x 				; is it a float
.9e55	f0 05		beq $9e5c			beq		_ANNotFloat
.9e57	e8		inx				inx
.9e58	20 79 b1	jsr $b179			jsr 	FloatIntegerPart 			; make it an integer
.9e5b	ca		dex				dex
.9e5c					_ANNotFloat:
.9e5c	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if byte/word reference.
.9e5f	29 03		and #$03			and 	#3
.9e61	d0 05		bne $9e68			bne 	_ANByteWord
.9e63	20 88 9e	jsr $9e88			jsr 	_ANCopy4PackSign 			; copy all 4 bytes and sign
.9e66	80 1e		bra $9e86			bra 	_ANExit
.9e68					_ANByteWord:
.9e68	48		pha				pha 								; save count
.9e69	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; do byte
.9e6c	92 36		sta ($36)			sta 	(zTemp0)
.9e6e	68		pla				pla
.9e6f	c9 01		cmp #$01			cmp	 	#1
.9e71	f0 13		beq $9e86			beq 	_ANExit
.9e73	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x 			; do word
.9e76	a0 01		ldy #$01			ldy 	#1
.9e78	91 36		sta ($36),y			sta 	(zTemp0),y
.9e7a	80 0a		bra $9e86			bra 	_ANExit
.9e7c					_ANFloat:
.9e7c	20 88 9e	jsr $9e88			jsr 	_ANCopy4PackSign 			; write all 4 bytes and packed sign
.9e7f	bd 29 04	lda $0429,x			lda 	NSExponent+1,x 				; copy exponent to slot 4
.9e82	a0 04		ldy #$04			ldy 	#4
.9e84	91 36		sta ($36),y			sta 	(zTemp0),y
.9e86					_ANExit:
.9e86	7a		ply				ply
.9e87	60		rts				rts
.9e88					_ANCopy4PackSign:
.9e88	a0 03		ldy #$03			ldy 	#3
.9e8a	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; sign bit into status
.9e8d	29 80		and #$80			and 	#$80 						; put into high bit of mantissa 3
.9e8f	1d 21 04	ora $0421,x			ora 	NSMantissa3+1,x
.9e92	91 36		sta ($36),y			sta 	(zTemp0),y
.9e94	88		dey				dey
.9e95	bd 19 04	lda $0419,x			lda 	NSMantissa2+1,x
.9e98	91 36		sta ($36),y			sta 	(zTemp0),y
.9e9a	88		dey				dey
.9e9b	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9e9e	91 36		sta ($36),y			sta 	(zTemp0),y
.9ea0	88		dey				dey
.9ea1	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.9ea4	91 36		sta ($36),y			sta 	(zTemp0),y
.9ea6	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignstring.asm

.9ea7					AssignString:
.9ea7	5a		phy				phy
.9ea8	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.9eab	85 38		sta $38				sta 	zTemp1
.9ead	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9eb0	85 39		sta $39				sta 	zTemp1+1
.9eb2	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9eb5	85 36		sta $36				sta 	zTemp0
.9eb7	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9eba	85 37		sta $37				sta 	zTemp0+1
.9ebc	a0 01		ldy #$01			ldy 	#1 							; the high byte of the target address
.9ebe	b1 36		lda ($36),y			lda 	(zTemp0),y
.9ec0	f0 23		beq $9ee5			beq 	_ASNewStringRequired 		; if zero, a new string is required.
.9ec2	38		sec				sec 								; put Address-2 in zsTemp - this is the size/status/string record
.9ec3	b2 36		lda ($36)			lda 	(zTemp0) 					; of concreted strings
.9ec5	e9 02		sbc #$02			sbc 	#2
.9ec7	85 3c		sta $3c				sta 	zsTemp
.9ec9	a0 01		ldy #$01			ldy 	#1
.9ecb	b1 36		lda ($36),y			lda 	(zTemp0),y
.9ecd	e9 00		sbc #$00			sbc 	#0
.9ecf	85 3d		sta $3d				sta 	zsTemp+1
.9ed1	a0 ff		ldy #$ff			ldy 	#$FF 						; get length of new string
.9ed3					_ASGetLength:
.9ed3	c8		iny				iny
.9ed4	b1 38		lda ($38),y			lda 	(zTemp1),y
.9ed6	d0 fb		bne $9ed3			bne 	_ASGetLength
.9ed8	98		tya				tya 								; is this length <= current length
.9ed9	d2 3c		cmp ($3c)			cmp 	(zsTemp)
.9edb	90 20		bcc $9efd			bcc 	_ASCopyString
.9edd	f0 1e		beq $9efd			beq 	_ASCopyString
.9edf	a9 80		lda #$80			lda 	#$80 						; mark as unused.
.9ee1	a0 01		ldy #$01			ldy 	#1
.9ee3	91 3c		sta ($3c),y			sta 	(zsTemp),y
.9ee5					_ASNewStringRequired:
.9ee5	e8		inx				inx 								; concrete the new string.
.9ee6	20 59 b7	jsr $b759			jsr 	StringConcrete				; (breaks zTemp1/2, not zTemp0 and zsTemp)
.9ee9	ca		dex				dex
.9eea	18		clc				clc
.9eeb	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; copy that new address to the reference.
.9eee	69 02		adc #$02			adc 	#2 							; add two to point at the data.
.9ef0	92 36		sta ($36)			sta 	(zTemp0)
.9ef2	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9ef5	69 00		adc #$00			adc 	#0
.9ef7	a0 01		ldy #$01			ldy 	#1
.9ef9	91 36		sta ($36),y			sta 	(zTemp0),y
.9efb	80 0d		bra $9f0a			bra 	_ASExit
.9efd					_ASCopyString:
.9efd	a0 00		ldy #$00			ldy 	#0
.9eff					_ASCopyLoop:
.9eff	b1 38		lda ($38),y			lda 	(zTemp1),y
.9f01	c8		iny				iny
.9f02	c8		iny				iny
.9f03	91 3c		sta ($3c),y			sta 	(zsTemp),y
.9f05	88		dey				dey
.9f06	c9 00		cmp #$00			cmp 	#0
.9f08	d0 f5		bne $9eff			bne 	_ASCopyLoop
.9f0a					_ASExit:
.9f0a	7a		ply				ply
.9f0b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/dereference.asm

.9f0c					DereferenceTopTwo:
.9f0c	e8		inx				inx
.9f0d	20 11 9f	jsr $9f11			jsr 	Dereference 				; deref x+1
.9f10	ca		dex				dex  								; falls through to deref x
.9f11					Dereference:
.9f11	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get the status byte
.9f14	29 20		and #$20			and 	#NSBIsReference 			; shift sign bit to carry, reference to bit 7
.9f16	f0 57		beq $9f6f			beq 	_DRFExit 					; not a reference
.9f18	5a		phy				phy
.9f19	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address to dereference into zTemp0
.9f1c	85 36		sta $36				sta 	zTemp0
.9f1e	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9f21	85 37		sta $37				sta 	zTemp0+1
.9f23	9e 10 04	stz $0410,x			stz 	NSMantissa1,x 				; clear second byte.
.9f26	b2 36		lda ($36)			lda 	(zTemp0) 					; do the first byte
.9f28	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9f2b	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get status byte.
.9f2e	29 18		and #$18			and 	#NSBTypeMask 				; what type is it ?
.9f30	c9 10		cmp #$10			cmp 	#NSTString 					; if string, dereference two
.9f32	f0 0f		beq $9f43			beq 	_DRFDereferenceTwo
.9f34	c9 08		cmp #$08			cmp 	#NSTFloat 					; if float, do full dereference.
.9f36	f0 39		beq $9f71			beq 	_DRFFull
.9f38	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be integer - how many bytes ?
.9f3b	29 03		and #$03			and 	#3
.9f3d	f0 32		beq $9f71			beq 	_DRFFull 					; the whole word
.9f3f	c9 01		cmp #$01			cmp 	#1 							; is it 10 (e.g. 2 bytes)
.9f41	f0 07		beq $9f4a			beq		_DRFClear23 				; no, one byte, clear 2 & 3 and exit
.9f43					_DRFDereferenceTwo:
.9f43	a0 01		ldy #$01			ldy 	#1
.9f45	b1 36		lda ($36),y			lda 	(zTemp0),y
.9f47	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9f4a					_DRFClear23:
.9f4a	9e 18 04	stz $0418,x			stz 	NSMantissa2,x 				; clear upper bytes, only read 1 or 2 bytes
.9f4d	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.9f50	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; make it a value of that type.
.9f53	29 18		and #$18			and 	#NSBTypeMask
.9f55	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9f58	c9 10		cmp #$10			cmp 	#NSTString  				; is it a string
.9f5a	d0 12		bne $9f6e			bne 	_DRFNotString
.9f5c	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; check address is zero
.9f5f	1d 10 04	ora $0410,x			ora 	NSMantissa1,x
.9f62	d0 0a		bne $9f6e			bne 	_DRFNotString
.9f64	a9 70		lda #$70			lda 	#_DRFNullString & $FF 		; if so, return reference to ""
.9f66	9d 08 04	sta $0408,x			sta 	NSMantissa0,X
.9f69	a9 9f		lda #$9f			lda 	#_DRFNullString >> 8
.9f6b	9d 10 04	sta $0410,x			sta 	NSMantissa1,X
.9f6e					_DRFNotString
.9f6e	7a		ply				ply 								; restore Y and exit
.9f6f					_DRFExit:
.9f6f	60		rts				rts
.9f70					_DRFNullString:
>9f70	00						.byte 	0
.9f71					_DRFFull:
.9f71	a0 01		ldy #$01			ldy 	#1 							; get remaining 3 bytes.
.9f73	b1 36		lda ($36),y			lda 	(zTemp0),y
.9f75	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9f78	c8		iny				iny
.9f79	b1 36		lda ($36),y			lda 	(zTemp0),y
.9f7b	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9f7e	c8		iny				iny
.9f7f	b1 36		lda ($36),y			lda 	(zTemp0),y
.9f81	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9f84	9e 28 04	stz $0428,x			stz 	NSExponent,x 				; clear exponent.
.9f87	bd 00 04	lda $0400,x			lda		NSStatus,x 					; see if type is integer
.9f8a	29 18		and #$18			and 	#NSBTypeMask  				; type information only
.9f8c	9d 00 04	sta $0400,x			sta 	NSStatus,x 					; update it back.
.9f8f	f0 06		beq $9f97			beq 	_DRFNoExponent
.9f91	c8		iny				iny 								; if not, read the exponent as well.
.9f92	b1 36		lda ($36),y			lda 	(zTemp0),y
.9f94	9d 28 04	sta $0428,x			sta 	NSExponent,x
.9f97					_DRFNoExponent:
.9f97	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; is the most significant bit set ?
.9f9a	10 0d		bpl $9fa9			bpl 	_DRFExit2 					; if not, then exit.
.9f9c	29 7f		and #$7f			and 	#$7F 						; clear that bit.
.9f9e	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9fa1	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; set the sign flag
.9fa4	09 80		ora #$80			ora 	#NSBIsNegative
.9fa6	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9fa9					_DRFExit2:
.9fa9	7a		ply				ply
.9faa	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/number.asm

=1					ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2					ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3					ESTA_Decimal = 3 							; fractional part.
.9fab					EncodeNumberStart:
.9fab	38		sec				sec
.9fac	80 01		bra $9faf			bra 	EncodeNumberContinue+1
.9fae					EncodeNumberContinue:
.9fae	18		clc				clc
.9faf					EncodeNumber:
.9faf	08		php				php 								; save reset.
.9fb0	c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.9fb2	f0 12		beq $9fc6			beq 	_ENIsOkay
.9fb4	c9 30		cmp #$30			cmp 	#"0"
.9fb6	90 04		bcc $9fbc			bcc 	_ENBadNumber
.9fb8	c9 3a		cmp #$3a			cmp 	#"9"+1
.9fba	90 0a		bcc $9fc6			bcc 	_ENIsOkay
.9fbc					_ENBadNumber:
.9fbc	28		plp				plp 								; throw saved reset
.9fbd	ad 85 04	lda $0485			lda 	EncodeState 				; decimal mode, construct final number
.9fc0	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.9fc2	f0 7e		beq $a042			beq 	_ENConstructFinal
.9fc4					_ENFail:
.9fc4	18		clc				clc 								; not allowed
.9fc5	60		rts				rts
.9fc6					_ENIsOkay:
.9fc6	28		plp				plp 								; are we restarting
.9fc7	90 15		bcc $9fde			bcc 	_ENNoRestart
.9fc9					_ENStartEncode:
.9fc9	c9 2e		cmp #$2e			cmp 	#'.'						; first is DP
.9fcb	f0 0c		beq $9fd9			beq 	_ENFirstDP
.9fcd	29 0f		and #$0f			and 	#15 						; put digit in mantissa
.9fcf	20 28 a6	jsr $a628			jsr 	NSMSetByte
.9fd2	a9 01		lda #$01			lda 	#ESTA_Low
.9fd4					_ENExitChange:
.9fd4	8d 85 04	sta $0485			sta 	EncodeState 				; save new state
.9fd7	38		sec				sec
.9fd8	60		rts				rts
.9fd9					_ENFirstDP:
.9fd9	20 26 a6	jsr $a626			jsr 	NSMSetZero 					; clear integer part
.9fdc	80 3f		bra $a01d			bra 	_ESTASwitchFloat			; go straight to float and exi
.9fde					_ENNoRestart:
.9fde	48		pha				pha 								; save on stack.
.9fdf	ad 85 04	lda $0485			lda 	EncodeState 				; get current state
.9fe2	c9 01		cmp #$01			cmp 	#ESTA_Low
.9fe4	f0 09		beq $9fef			beq  	_ESTALowState
.9fe6	c9 02		cmp #$02			cmp 	#ESTA_High
.9fe8	f0 29		beq $a013			beq 	_ESTAHighState
.9fea	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.9fec	f0 3b		beq $a029			beq 	_ESTADecimalState
>9fee	db						.byte 	$DB 						; causes a break in the emulator
.9fef					_ESTALowState:
.9fef	68		pla				pla 								; get value back
.9ff0	c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.9ff2	f0 29		beq $a01d			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.9ff4	29 0f		and #$0f			and 	#15 						; make digit
.9ff6	8d 86 04	sta $0486			sta 	DigitTemp 					; save it.
.9ff9	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.9ffc	0a		asl a				asl 	a
.9ffd	0a		asl a				asl 	a
.9ffe	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.a001	0a		asl a				asl 	a
.a002	6d 86 04	adc $0486			adc 	DigitTemp
.a005	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a008	c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.a00a	90 05		bcc $a011			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.a00c	a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.a00e	8d 85 04	sta $0485			sta 	EncodeState
.a011					_ESTANoSwitch:
.a011	38		sec				sec
.a012	60		rts				rts
.a013					_ESTAHighState:
.a013	68		pla				pla 								; get value back
.a014	c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.a016	f0 05		beq $a01d			beq 	_ESTASwitchFloat
.a018	20 7c a0	jsr $a07c			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.a01b	38		sec				sec
.a01c	60		rts				rts
.a01d					_ESTASwitchFloat:
.a01d	9c 87 04	stz $0487			stz 	DecimalCount
.a020	e8		inx				inx 								; zero the decimal additive.
.a021	20 26 a6	jsr $a626			jsr 	NSMSetZero
.a024	ca		dex				dex
.a025	a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.a027	80 ab		bra $9fd4			bra 	_ENExitChange
.a029					_ESTADecimalState:
.a029	68		pla				pla 								; digit.
.a02a	c9 2e		cmp #$2e			cmp 	#"." 						; fail on 2nd decimal point.
.a02c	f0 96		beq $9fc4			beq 	_ENFail
.a02e	e8		inx				inx 								; put digit into fractional part of X+1
.a02f	20 7c a0	jsr $a07c			jsr 	ESTAShiftDigitIntoMantissa
.a032	ca		dex				dex
.a033	ee 87 04	inc $0487			inc 	DecimalCount 				; bump the count of decimals
.a036	ad 87 04	lda $0487			lda 	DecimalCount
.a039	c9 0b		cmp #$0b			cmp 	#11
.a03b	f0 02		beq $a03f			beq 	_ESTADSFail
.a03d	38		sec				sec
.a03e	60		rts				rts
.a03f					_ESTADSFail:
.a03f	4c 5c b4	jmp $b45c			jmp 	RangeError
.a042					_ENConstructFinal:
.a042	ad 87 04	lda $0487			lda 	DecimalCount 				; get decimal count
.a045	f0 33		beq $a07a			beq 	_ENCFExit 					; no decimals
.a047	5a		phy				phy
.a048	0a		asl a				asl 	a 							; x 4 and CLC
.a049	0a		asl a				asl 	a
.a04a	6d 87 04	adc $0487			adc 	DecimalCount
.a04d	a8		tay				tay
.a04e	b9 1b b4	lda $b41b,y			lda 	DecimalScalarTable-5,y 		; copy decimal scalar to X+2
.a051	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.a054	b9 1c b4	lda $b41c,y			lda 	DecimalScalarTable-5+1,y
.a057	9d 12 04	sta $0412,x			sta 	NSMantissa1+2,x
.a05a	b9 1d b4	lda $b41d,y			lda 	DecimalScalarTable-5+2,y
.a05d	9d 1a 04	sta $041a,x			sta 	NSMantissa2+2,x
.a060	b9 1e b4	lda $b41e,y			lda 	DecimalScalarTable-5+3,y
.a063	9d 22 04	sta $0422,x			sta 	NSMantissa3+2,x
.a066	b9 1f b4	lda $b41f,y			lda 	DecimalScalarTable-5+4,y
.a069	9d 2a 04	sta $042a,x			sta 	NSExponent+2,x
.a06c	a9 08		lda #$08			lda 	#NSTFloat
.a06e	9d 02 04	sta $0402,x			sta 	NSStatus+2,x
.a071	7a		ply				ply
.a072	e8		inx				inx 								; multiply decimal const by decimal scalar
.a073	20 a3 b1	jsr $b1a3			jsr 	FloatMultiply
.a076	ca		dex				dex
.a077	20 30 b0	jsr $b030			jsr 	FloatAdd 					; add to integer part.
.a07a					_ENCFExit:
.a07a	18		clc				clc 								; reject the digit.
.a07b	60		rts				rts
.a07c					ESTAShiftDigitIntoMantissa:
.a07c	29 0f		and #$0f			and 	#15 						; save digit
.a07e	48		pha				pha
.a07f	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; push mantissa on stack
.a082	48		pha				pha
.a083	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.a086	48		pha				pha
.a087	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a08a	48		pha				pha
.a08b	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.a08e	48		pha				pha
.a08f	20 3b a6	jsr $a63b			jsr 	NSMShiftLeft 				; x 2
.a092	20 3b a6	jsr $a63b			jsr 	NSMShiftLeft 				; x 4
.a095	18		clc				clc 								; pop mantissa and add
.a096	68		pla				pla
.a097	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.a09a	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a09d	68		pla				pla
.a09e	7d 10 04	adc $0410,x			adc 	NSMantissa1,x
.a0a1	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a0a4	68		pla				pla
.a0a5	7d 18 04	adc $0418,x			adc 	NSMantissa2,x
.a0a8	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.a0ab	68		pla				pla
.a0ac	7d 20 04	adc $0420,x			adc 	NSMantissa3,x
.a0af	9d 20 04	sta $0420,x			sta 	NSMantissa3,x 				; x 5
.a0b2	20 3b a6	jsr $a63b			jsr 	NSMShiftLeft 				; x 10
.a0b5	68		pla				pla 								; add digit
.a0b6	18		clc				clc
.a0b7	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.a0ba	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a0bd	90 0d		bcc $a0cc			bcc 	_ESTASDExit
.a0bf	fe 10 04	inc $0410,x			inc 	NSMantissa1,x
.a0c2	d0 08		bne $a0cc			bne 	_ESTASDExit
.a0c4	fe 18 04	inc $0418,x			inc 	NSMantissa2,x
.a0c7	d0 03		bne $a0cc			bne 	_ESTASDExit
.a0c9	fe 20 04	inc $0420,x			inc 	NSMantissa3,x
.a0cc					_ESTASDExit:
.a0cc	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/term.asm

.a0cd					EvaluateTerm:
.a0cd	b1 30		lda ($30),y			lda 	(codePtr),y
.a0cf	30 18		bmi $a0e9			bmi 	_ETCheckUnary 				; unary function ? (text ones)
.a0d1	c9 40		cmp #$40			cmp 	#$40 						; 40-7F => identifier reference
.a0d3	b0 6f		bcs $a144			bcs 	_ETVariable
.a0d5	c9 30		cmp #$30			cmp 	#'0' 						; is it a number
.a0d7	90 6e		bcc $a147			bcc 	_ETPuncUnary 				; if not it might be a punctuation unary.
.a0d9	c9 3a		cmp #$3a			cmp 	#'9'+1
.a0db	b0 6a		bcs $a147			bcs 	_ETPuncUnary
.a0dd	20 ab 9f	jsr $9fab			jsr 	EncodeNumberStart 			; can't fail as it's 0-9 !
.a0e0					_ETNumber:
.a0e0	c8		iny				iny 								; keep encoding until we have the numbers
.a0e1	b1 30		lda ($30),y			lda 	(codePtr),y
.a0e3	20 ae 9f	jsr $9fae			jsr 	EncodeNumberContinue
.a0e6	b0 f8		bcs $a0e0			bcs 	_ETNumber 					; go back if accepted.
.a0e8	60		rts				rts
.a0e9					_ETCheckUnary:
.a0e9	c9 ff		cmp #$ff			cmp 	#KWC_STRING 				; string token
.a0eb	f0 41		beq $a12e			beq 	_ETString
.a0ed	c9 fe		cmp #$fe			cmp 	#KWC_HEXCONST 				; hex constant.
.a0ef	f0 12		beq $a103			beq 	_ETHexConstant
.a0f1	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; check it actually is a unary function
.a0f3	90 0b		bcc $a100			bcc 	_ETSyntaxError
.a0f5	c9 9f		cmp #$9f			cmp 	#KWC_LAST_UNARY+1
.a0f7	b0 07		bcs $a100			bcs 	_ETSyntaxError
.a0f9	da		phx				phx 								; push X on the stack
.a0fa	0a		asl a				asl 	a 							; put vector x 2 into X
.a0fb	aa		tax				tax
.a0fc	c8		iny				iny 								; consume unary function token
.a0fd	7c f0 95	jmp ($95f0,x)			jmp 	(VectorSet0,x) 				; and do it.
.a100					_ETSyntaxError:
.a100	4c 57 b4	jmp $b457			jmp 	SyntaxError
.a103					_ETHexConstant:
.a103	c8		iny				iny 								; skip #
.a104	c8		iny				iny 								; skip count
.a105	20 26 a6	jsr $a626			jsr 	NSMSetZero 					; clear result
.a108					_ETHLoop:
.a108	b1 30		lda ($30),y			lda 	(codePtr),y
.a10a	c8		iny				iny 								; and consume
.a10b	c9 00		cmp #$00			cmp 	#0 							; exit if zero
.a10d	f0 1e		beq $a12d			beq 	_ETHExit
.a10f	48		pha				pha 								; save on stack.
.a110	20 3b a6	jsr $a63b			jsr 	NSMShiftLeft 				; x 2
.a113	20 3b a6	jsr $a63b			jsr 	NSMShiftLeft 				; x 4
.a116	20 3b a6	jsr $a63b			jsr 	NSMShiftLeft 				; x 8
.a119	20 3b a6	jsr $a63b			jsr 	NSMShiftLeft 				; x 16
.a11c	68		pla				pla 								; ASCII
.a11d	c9 41		cmp #$41			cmp 	#'A'
.a11f	90 02		bcc $a123			bcc 	_ETHNotChar
.a121	e9 07		sbc #$07			sbc 	#7
.a123					_ETHNotChar:
.a123	29 0f		and #$0f			and 	#15 						; digit now
.a125	1d 08 04	ora $0408,x			ora 	NSMantissa0,x 				; put in LS Nibble
.a128	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a12b	80 db		bra $a108			bra 	_ETHLoop 					; go round.
.a12d					_ETHExit:
.a12d	60		rts				rts
.a12e					_ETString:
.a12e	c8		iny				iny 								; look at length
.a12f	b1 30		lda ($30),y			lda 	(codePtr),y
.a131	48		pha				pha
.a132	c8		iny				iny 								; first character
.a133	20 70 a6	jsr $a670			jsr 	MemoryInline 				; put address of string at (code-Ptr),y on stack
.a136	68		pla				pla 								; restore count and save
.a137	85 36		sta $36				sta 	zTemp0
.a139	98		tya				tya 								; add length to Y to skip it.
.a13a	18		clc				clc
.a13b	65 36		adc $36				adc 	zTemp0
.a13d	a8		tay				tay
.a13e	a9 10		lda #$10			lda 	#NSTString 					; mark as string
.a140	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a143	60		rts				rts
.a144					_ETVariable:
.a144	4c 9e a1	jmp $a19e			jmp 	VariableHandler
.a147					_ETPuncUnary:
.a147	c8		iny				iny 								; consume the unary character
.a148	c9 2d		cmp #$2d			cmp 	#KWD_MINUS 					; unary minus
.a14a	f0 2d		beq $a179			beq 	_ETUnaryNegate
.a14c	c9 10		cmp #$10			cmp 	#KWD_AT 					; @ reference -> constant
.a14e	f0 39		beq $a189			beq 	_ETDereference
.a150	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; parenthesis
.a152	f0 43		beq $a197			beq 	_ETParenthesis
.a154	64 36		stz $36				stz 	zTemp0 						; zTemp0 is the indirection level.
.a156	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; byte indirection (0) ?
.a158	f0 06		beq $a160			beq 	_ETIndirection
.a15a	e6 36		inc $36				inc 	zTemp0
.a15c	c9 21		cmp #$21			cmp 	#KWD_PLING					; word indirection (1) \
.a15e	d0 a0		bne $a100			bne 	_ETSyntaxError
.a160					_ETIndirection:
.a160	a5 36		lda $36				lda 	zTemp0 						; push indirection amount (0-1) => (1-2) on the stack
.a162	1a		inc a				inc 	a
.a163	48		pha				pha
.a164	20 cd a0	jsr $a0cd			jsr 	EvaluateTerm				; evaluate the term
.a167	20 11 9f	jsr $9f11			jsr 	Dereference 				; dereference it.
.a16a	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a +ve integer.
.a16d	d0 07		bne $a176			bne 	_ETTypeMismatch
.a16f	68		pla				pla 								; indirection 1-2
.a170	09 20		ora #$20			ora 	#NSBIsReference 			; make it a reference.
.a172	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a175	60		rts				rts
.a176					_ETTypeMismatch:
.a176	4c 61 b4	jmp $b461			jmp 	TypeError
.a179					_ETUnaryNegate:
.a179	20 cd a0	jsr $a0cd			jsr 	EvaluateTerm				; evaluate the term
.a17c	20 11 9f	jsr $9f11			jsr 	Dereference 				; dereference it.
.a17f	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a number
.a182	29 10		and #$10			and 	#NSTString
.a184	d0 f0		bne $a176			bne 	_ETTypeMismatch
.a186	4c d2 a5	jmp $a5d2			jmp 	NSMNegate  					; just toggles the sign bit.
.a189					_ETDereference:
.a189	20 cd a0	jsr $a0cd			jsr 	EvaluateTerm				; evaluate the term
.a18c	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a reference
.a18f	29 20		and #$20			and 	#NSBIsReference
.a191	f0 e3		beq $a176			beq 	_ETTypeMismatch
.a193	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; make it an integer address
.a196	60		rts				rts
.a197					_ETParenthesis:
.a197	20 fc 9d	jsr $9dfc			jsr 	EvaluateExpression 			; evaluate here, from lowest precedence
.a19a	20 69 ae	jsr $ae69			jsr 	CheckRightBracket 			; check for )
.a19d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/variable.asm

.a19e					VariableHandler:
.a19e	b1 30		lda ($30),y			lda 	(codePtr),y
.a1a0	18		clc				clc
.a1a1	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.a1a3	85 37		sta $37				sta 	zTemp0+1
.a1a5	c8		iny				iny
.a1a6	b1 30		lda ($30),y			lda 	(codePtr),y
.a1a8	85 36		sta $36				sta 	zTemp0
.a1aa	c8		iny				iny
.a1ab	18		clc				clc									; copy variable address+3 to mantissa
.a1ac	69 03		adc #$03			adc 	#3
.a1ae	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a1b1	a5 37		lda $37				lda 	zTemp0+1
.a1b3	69 00		adc #$00			adc 	#0
.a1b5	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a1b8	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.a1bb	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.a1be	9e 28 04	stz $0428,x			stz 	NSExponent,x
.a1c1	5a		phy				phy
.a1c2	a0 02		ldy #$02			ldy 	#2 							; read type
.a1c4	b1 36		lda ($36),y			lda 	(zTemp0),y
.a1c6	7a		ply				ply
.a1c7	29 1c		and #$1c			and 	#NSBTypeMask+NSBIsArray 	; get type information
.a1c9	09 20		ora #$20			ora 	#NSBIsReference 			; make a reference.
.a1cb	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a1ce	29 04		and #$04			and 	#NSBIsArray
.a1d0	d0 01		bne $a1d3			bne 	_VHArray
.a1d2	60		rts				rts
.a1d3					_VHArray:
.a1d3	e8		inx				inx
.a1d4	20 be a5	jsr $a5be			jsr 	Evaluate8BitInteger 		; get the 1st index.
.a1d7	a9 ff		lda #$ff			lda 	#$FF 						; set Status of X+2 to a duff value so we know if we picked it up.
.a1d9	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.a1dc	b1 30		lda ($30),y			lda 	(codePtr),y
.a1de	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.a1e0	d0 06		bne $a1e8			bne 	_VHNoSecondIndex
.a1e2	c8		iny				iny 								; skip the comma
.a1e3	e8		inx				inx
.a1e4	20 be a5	jsr $a5be			jsr 	Evaluate8BitInteger 		; get the 2nd index.
.a1e7	ca		dex				dex
.a1e8					_VHNoSecondIndex:
.a1e8	ca		dex				dex 								; set X back.
.a1e9	20 69 ae	jsr $ae69			jsr 	CheckRightBracket 			; and check the right bracket.
.a1ec	5a		phy				phy 								; save position
.a1ed	a0 02		ldy #$02			ldy 	#2 							; check first index is not-zero, e.g. array defined
.a1ef	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a1f1	f0 6b		beq $a25e			beq 	_VHBadIndex
.a1f3	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy record address to zaTemp
.a1f6	85 3e		sta $3e				sta 	zaTemp
.a1f8	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a1fb	85 3f		sta $3f				sta 	zaTemp+1
.a1fd	a0 03		ldy #$03			ldy 	#3 							; get the second index - which is 0 if there is one index.
.a1ff	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a201	f0 02		beq $a205			beq 	_VHHas2Mask
.a203	a9 ff		lda #$ff			lda 	#$FF
.a205					_VHHas2Mask:
.a205	dd 02 04	cmp $0402,x			cmp 	NSStatus+2,x 				; so if they are the same there are the wrong number of indices
.a208	f0 54		beq $a25e			beq 	_VHBadIndex
.a20a	0a		asl a				asl 	a 							; carry will be set if a second index
.a20b	90 09		bcc $a216			bcc 	_VHCheckFirstIndex
.a20d	a0 03		ldy #$03			ldy 	#3 			 				; check the 2nd size >= 2nd index
.a20f	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a211	dd 0a 04	cmp $040a,x			cmp 	NSMantissa0+2,x
.a214	90 48		bcc $a25e			bcc 	_VHBadIndex
.a216					_VHCheckFirstIndex:
.a216	a0 02		ldy #$02			ldy 	#2 			 				; check the 2nd size >= 2nd index
.a218	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a21a	dd 09 04	cmp $0409,x			cmp 	NSMantissa0+1,x
.a21d	90 3f		bcc $a25e			bcc 	_VHBadIndex
.a21f	64 36		stz $36				stz 	zTemp0 						; clear zTemp0 (if 1 index)
.a221	64 37		stz $37				stz 	zTemp0+1
.a223	bd 02 04	lda $0402,x			lda 	NSStatus+2,x 				; if only one index provided, don't need to multiply
.a226	30 0f		bmi $a237			bmi 	_VHNoMultiply
.a228	da		phx				phx
.a229	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; get 2nd index on stack
.a22c	48		pha				pha
.a22d	a0 02		ldy #$02			ldy 	#2 							; get 1st size in A
.a22f	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a231	1a		inc a				inc 	a 							; add 1 for zero base
.a232	fa		plx				plx
.a233	20 f3 b2	jsr $b2f3			jsr 	Multiply8x8 				; calculate -> Z0
.a236	fa		plx				plx
.a237					_VHNoMultiply:
.a237	18		clc				clc
.a238	a5 36		lda $36				lda 	zTemp0
.a23a	7d 09 04	adc $0409,x			adc 	NSMantissa0+1,x
.a23d	85 36		sta $36				sta 	zTemp0
.a23f	a5 37		lda $37				lda 	zTemp0+1
.a241	69 00		adc #$00			adc 	#0
.a243	85 37		sta $37				sta 	zTemp0+1
.a245	bd 00 04	lda $0400,x			lda 	NSStatus,x
.a248	20 f9 8c	jsr $8cf9			jsr 	ScaleByBaseType
.a24b	18		clc				clc
.a24c	b2 3e		lda ($3e)			lda 	(zaTemp)
.a24e	65 36		adc $36				adc 	zTemp0
.a250	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a253	a0 01		ldy #$01			ldy 	#1
.a255	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.a257	65 37		adc $37				adc 	zTemp0+1
.a259	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a25c	7a		ply				ply 								; restore position
.a25d	60		rts				rts
.a25e					_VHBadIndex:
.a25e	a9 17		lda #$17		lda	#23
.a260	4c eb 99	jmp $99eb		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/abs.asm

.b229					AbsUnary:
.b229	fa		plx				plx 								; restore stack pos
.b22a	20 66 a5	jsr $a566			jsr 	EvaluateNumber 				; get a float or int
.b22d	20 69 ae	jsr $ae69			jsr 	CheckRightBracket
.b230	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; clear the sign bit
.b233	29 7f		and #$7f			and 	#$7F
.b235	9d 00 04	sta $0400,x			sta 	NSStatus,x
.b238	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/alloc.asm

.a263					AllocUnary:
.a263	fa		plx				plx 								; restore stack pos
.a264	20 9e a5	jsr $a59e			jsr 	Evaluate16BitInteger		; get bytes required.
.a267	20 69 ae	jsr $ae69			jsr 	CheckRightBracket
.a26a	da		phx				phx 								; save X/Y
.a26b	5a		phy				phy
.a26c	8a		txa				txa 								; copy X into Y
.a26d	a8		tay				tay
.a26e	b9 10 04	lda $0410,y			lda		NSMantissa1,y 				; get size
.a271	aa		tax				tax
.a272	b9 08 04	lda $0408,y			lda 	NSMantissa0,y
.a275	20 82 a2	jsr $a282			jsr 	AllocateXABytes 			; allocate memory
.a278	99 08 04	sta $0408,y			sta 	NSMantissa0,y 				; write address out.
.a27b	8a		txa				txa
.a27c	99 10 04	sta $0410,y			sta 	NSMantissa1,y
.a27f	7a		ply				ply
.a280	fa		plx				plx
.a281	60		rts				rts
.a282					AllocateXABytes:
.a282	5a		phy				phy
.a283	ac 8c 04	ldy $048c			ldy 	lowMemPtr 					; push current address on stack and to zTemp0
.a286	84 36		sty $36				sty 	zTemp0
.a288	5a		phy				phy
.a289	ac 8d 04	ldy $048d			ldy 	lowMemPtr+1
.a28c	84 37		sty $37				sty 	zTemp0+1
.a28e	5a		phy				phy
.a28f	18		clc				clc 								; add to low memory pointer
.a290	6d 8c 04	adc $048c			adc 	lowMemPtr
.a293	8d 8c 04	sta $048c			sta 	lowMemPtr
.a296	8a		txa				txa
.a297	6d 8d 04	adc $048d			adc 	lowMemPtr+1
.a29a	8d 8d 04	sta $048d			sta 	lowMemPtr+1
.a29d	b0 2f		bcs $a2ce			bcs 	CISSMemory
.a29f	20 c0 a2	jsr $a2c0			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.a2a2					_ClearMemory:
.a2a2	ad 8c 04	lda $048c			lda 	lowMemPtr 					; cleared all memory allocated
.a2a5	c5 36		cmp $36				cmp 	zTemp0
.a2a7	d0 07		bne $a2b0			bne 	_CMClearNext
.a2a9	ad 8d 04	lda $048d			lda 	lowMemPtr+1
.a2ac	c5 37		cmp $37				cmp 	zTemp0+1
.a2ae	f0 0c		beq $a2bc			beq 	_CMExit
.a2b0					_CMClearNext:
.a2b0	a9 00		lda #$00			lda 	#0 							; clear byte, advance to next.
.a2b2	92 36		sta ($36)			sta 	(zTemp0)
.a2b4	e6 36		inc $36				inc 	zTemp0
.a2b6	d0 ea		bne $a2a2			bne 	_ClearMemory
.a2b8	e6 37		inc $37				inc		zTemp0+1
.a2ba	80 e6		bra $a2a2			bra 	_ClearMemory
.a2bc					_CMExit:
.a2bc	fa		plx				plx
.a2bd	68		pla				pla
.a2be	7a		ply				ply
.a2bf	60		rts				rts
.a2c0					CheckIdentifierStringSpace:
.a2c0	48		pha				pha
.a2c1	ad 8d 04	lda $048d			lda 	lowMemPtr+1 				; get low memory pointer
.a2c4	18		clc				clc
.a2c5	69 02		adc #$02			adc 	#2 							; need at least 2 256 byte pages
.a2c7	cd 8f 04	cmp $048f			cmp 	StringMemory+1 				; is it >= StringMemory
.a2ca	b0 02		bcs $a2ce			bcs 	CISSMemory
.a2cc	68		pla				pla
.a2cd	60		rts				rts
.a2ce					CISSMemory:
.a2ce	a9 06		lda #$06		lda	#6
.a2d0	4c eb 99	jmp $99eb		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/asc.asm

.b239					AscUnary:
.b239	fa		plx				plx 								; restore stack pos
.b23a	20 71 a5	jsr $a571			jsr 	EvaluateString 				; get a string
.b23d	b2 36		lda ($36)			lda 	(zTemp0)					; get/return firs character
.b23f	20 28 a6	jsr $a628			jsr 	NSMSetByte
.b242	20 69 ae	jsr $ae69			jsr 	CheckRightBracket
.b245	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/frac.asm

.b246					FracUnary:
.b246	fa		plx				plx 								; restore stack pos
.b247	20 66 a5	jsr $a566			jsr 	EvaluateNumber 				; get a float or int
.b24a	20 69 ae	jsr $ae69			jsr 	CheckRightBracket
.b24d	bd 00 04	lda $0400,x			lda 	NSStatus,x
.b250	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.b252	f0 04		beq $b258			beq 	_IUZero
.b254	20 16 b1	jsr $b116			jsr 	FloatFractionalPart
.b257	60		rts				rts
.b258					_IUZero:
.b258	20 26 a6	jsr $a626			jsr 	NSMSetZero
.b25b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/int.asm

.b25c					IntUnary:
.b25c	fa		plx				plx 								; restore stack pos
.b25d	20 66 a5	jsr $a566			jsr 	EvaluateNumber 				; get a float or int
.b260	20 69 ae	jsr $ae69			jsr 	CheckRightBracket
.b263	bd 00 04	lda $0400,x			lda 	NSStatus,x
.b266	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.b268	f0 03		beq $b26d			beq 	_IUExit
.b26a	20 79 b1	jsr $b179			jsr 	FloatIntegerPart
.b26d					_IUExit:
.b26d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/len.asm

.b26e					LenUnary:
.b26e	fa		plx				plx 								; restore stack pos
.b26f	20 71 a5	jsr $a571			jsr 	EvaluateString 				; get a string
.b272	5a		phy				phy
.b273	a0 00		ldy #$00			ldy 	#0 							; find length
.b275					_LenFind:
.b275	b1 36		lda ($36),y			lda 	(zTemp0),y
.b277	f0 06		beq $b27f			beq 	_LenExit
.b279	c8		iny				iny
.b27a	d0 f9		bne $b275			bne 	_LenFind
.b27c	4c 5c b4	jmp $b45c			jmp 	RangeError 					; string > 255
.b27f					_LenExit:
.b27f	98		tya				tya
.b280	20 28 a6	jsr $a628			jsr 	NSMSetByte
.b283	7a		ply				ply
.b284	20 69 ae	jsr $ae69			jsr 	CheckRightBracket
.b287	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/minmax.asm

.a2d3					Unary_Min:
.a2d3	a9 01		lda #$01			lda 	#1
.a2d5	80 02		bra $a2d9			bra 	UnaryMinMaxMain
.a2d7					Unary_Max:
.a2d7	a9 ff		lda #$ff			lda 	#$FF 						; value from comparator to cause a write
.a2d9					UnaryMinMaxMain:
.a2d9	fa		plx				plx 								; get index on number stack
.a2da	48		pha				pha 								; save comparator
.a2db	20 5d a5	jsr $a55d			jsr 	EvaluateValue 				; get the first value.
.a2de					_UMMMLoop:
.a2de	b1 30		lda ($30),y			lda 	(codePtr),y
.a2e0	c9 29		cmp #$29			cmp 	#KWD_RPAREN 				; if right bracket then done.
.a2e2	f0 22		beq $a306			beq 	_UMMMDone
.a2e4	20 71 ae	jsr $ae71			jsr 	CheckComma 					; must be a comma
.a2e7	e8		inx				inx
.a2e8	20 5d a5	jsr $a55d			jsr 	EvaluateValue
.a2eb	ca		dex				dex
.a2ec	20 fd a5	jsr $a5fd			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] (Compare is destructive)
.a2ef	e8		inx				inx
.a2f0	20 fd a5	jsr $a5fd			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2], original
.a2f3	e8		inx				inx
.a2f4	20 a3 9a	jsr $9aa3			jsr 	CompareBaseCode 			; part of > = < etc. code, returns 255,0 or 1
.a2f7	ca		dex				dex
.a2f8	ca		dex				dex
.a2f9	85 36		sta $36				sta 	zTemp0 						; save required result
.a2fb	68		pla				pla 								; get and save comparator
.a2fc	48		pha				pha
.a2fd	c5 36		cmp $36				cmp 	zTemp0 						; if the comparator
.a2ff	d0 dd		bne $a2de			bne 	_UMMMLoop
.a301	20 09 a3	jsr $a309			jsr 	ExpCopyAboveDown 			; copy next up slot down
.a304	80 d8		bra $a2de			bra 	_UMMMLoop
.a306					_UMMMDone:
.a306	68		pla				pla 								; throw the comparator
.a307	c8		iny				iny 								; skip )
.a308	60		rts				rts
.a309					ExpCopyAboveDown:
.a309	bd 01 04	lda $0401,x			lda 	NSStatus+1,x
.a30c	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a30f	bd 29 04	lda $0429,x			lda 	NSExponent+1,x
.a312	9d 28 04	sta $0428,x			sta 	NSExponent,x
.a315	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.a318	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a31b	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.a31e	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a321	bd 19 04	lda $0419,x			lda 	NSMantissa2+1,x
.a324	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.a327	bd 21 04	lda $0421,x			lda 	NSMantissa3+1,x
.a32a	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.a32d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/not.asm

.a32e					Unary_Not:
.a32e	fa		plx				plx
.a32f	20 89 a5	jsr $a589			jsr 	EvaluateInteger 			; get integer
.a332	20 69 ae	jsr $ae69			jsr 	CheckRightBracket
.a335	20 56 a6	jsr $a656			jsr 	NSMIsZero 					; zero mantissa ?
.a338	f0 04		beq $a33e			beq 	_NotZero
.a33a	20 26 a6	jsr $a626			jsr 	NSMSetZero
.a33d	60		rts				rts
.a33e					_NotZero:
.a33e	4c 58 9a	jmp $9a58			jmp 	ReturnTrue
.a341					_UNBad:
.a341	4c 66 b4	jmp $b466			jmp 	ArgumentError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/rnd.asm

.a344					Unary_Random:
.a344	fa		plx				plx
.a345	20 c3 a3	jsr $a3c3			jsr 	Random32Bit 				; get a random number
.a348	20 a8 a3	jsr $a3a8			jsr 	URCopyToMantissa  			; put in mantissa
.a34b	b1 30		lda ($30),y			lda 	(codePtr),y
.a34d	c9 29		cmp #$29			cmp 	#KWD_RPAREN
.a34f	f0 08		beq $a359			beq 	_URNoModulus
.a351	e8		inx				inx
.a352	20 9e a5	jsr $a59e			jsr 	Evaluate16BitInteger 		; put modulus value in +1
.a355	ca		dex				dex
.a356	20 ed ae	jsr $aeed			jsr 	IntegerModulusNoCheck 		; calculate modulus
.a359					_URNoModulus:
.a359	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; make it an integer positive
.a35c	9e 28 04	stz $0428,x			stz 	NSExponent,x
.a35f	20 69 ae	jsr $ae69			jsr 	CheckRightBracket
.a362	60		rts				rts
.a363					Unary_Rnd:
.a363	fa		plx				plx
.a364	20 66 a5	jsr $a566			jsr 	EvaluateNumber 				; number to use.
.a367	20 69 ae	jsr $ae69			jsr 	CheckRightBracket 			; closing bracket
.a36a	20 56 a6	jsr $a656			jsr 	NSMIsZero 					; if zero, then don't generate a new number
.a36d	f0 2b		beq $a39a			beq 	_URCopySeed
.a36f	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; if -ve, then seed using parameter
.a372	10 23		bpl $a397			bpl 	_URDontSeed
.a374	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy - value to seed butchering it.
.a377	49 17		eor #$17			eor 	#$17
.a379	8d 88 04	sta $0488			sta 	RandomSeed+0
.a37c	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a37f	49 a5		eor #$a5			eor 	#$A5
.a381	8d 89 04	sta $0489			sta 	RandomSeed+1
.a384	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.a387	49 c2		eor #$c2			eor 	#$C2
.a389	8d 8a 04	sta $048a			sta 	RandomSeed+2
.a38c	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.a38f	49 9d		eor #$9d			eor 	#$9D
.a391	8d 8b 04	sta $048b			sta 	RandomSeed+3
.a394	20 c3 a3	jsr $a3c3			jsr 	Random32Bit
.a397					_URDontSeed:
.a397	20 c3 a3	jsr $a3c3			jsr 	Random32Bit 				; generate a number.
.a39a					_URCopySeed:
.a39a	20 a8 a3	jsr $a3a8			jsr 	URCopyToMantissa 			; copy into mantissa
.a39d	a9 e1		lda #$e1			lda 	#-31 						; force into 0-1 range
.a39f	8d 28 04	sta $0428			sta 	NSExponent
.a3a2	a9 08		lda #$08			lda 	#NSTFloat
.a3a4	8d 00 04	sta $0400			sta 	NSStatus 					; positive.
.a3a7	60		rts				rts
.a3a8					URCopyToMantissa:
.a3a8	ad 88 04	lda $0488			lda 	RandomSeed+0
.a3ab	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a3ae	ad 89 04	lda $0489			lda 	RandomSeed+1
.a3b1	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a3b4	ad 8a 04	lda $048a			lda 	RandomSeed+2
.a3b7	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.a3ba	ad 8b 04	lda $048b			lda 	RandomSeed+3
.a3bd	29 3f		and #$3f			and 	#$3F 						; make legal mantissa
.a3bf	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.a3c2	60		rts				rts
.a3c3					Random32Bit:
.a3c3	5a		phy				phy
.a3c4	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.a3c6	ad 88 04	lda $0488			lda 	RandomSeed+0 				; check the seed isn't zero
.a3c9	d0 03		bne $a3ce			bne 	_Random1
.a3cb	a8		tay				tay 								; if so do it 256 times
.a3cc	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.a3ce					_Random1:
.a3ce	0a		asl a				asl 	a 							; LSFR RNG
.a3cf	2e 89 04	rol $0489			rol 	RandomSeed+1
.a3d2	2e 8a 04	rol $048a			rol 	RandomSeed+2
.a3d5	2e 8b 04	rol $048b			rol 	RandomSeed+3
.a3d8	90 02		bcc $a3dc			bcc 	_Random2
.a3da	49 c5		eor #$c5			eor 	#$C5
.a3dc					_Random2:
.a3dc	88		dey				dey
.a3dd	d0 ef		bne $a3ce			bne 	_Random1
.a3df	8d 88 04	sta $0488			sta 	RandomSeed+0
.a3e2	7a		ply				ply
.a3e3	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/sgn.asm

.b288					SgnUnary:
.b288	fa		plx				plx 								; restore stack pos
.b289	20 66 a5	jsr $a566			jsr 	EvaluateNumber 				; get a float or int
.b28c	20 69 ae	jsr $ae69			jsr 	CheckRightBracket
.b28f	20 56 a6	jsr $a656			jsr 	NSMIsZero 					; if zero
.b292	f0 10		beq $b2a4			beq 	_SGZero  					; return Int Zero
.b294	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get status w/sign
.b297	48		pha				pha
.b298	a9 01		lda #$01			lda 	#1 							; set to 1
.b29a	20 28 a6	jsr $a628			jsr 	NSMSetByte
.b29d	68		pla				pla
.b29e	29 80		and #$80			and		#$80 						; copy the sign byte out
.b2a0	9d 00 04	sta $0400,x			sta 	NSStatus,x
.b2a3	60		rts				rts
.b2a4	20 26 a6	jsr $a626	_SGZero:jsr 	NSMSetZero
.b2a7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/val.asm

.b2a8					ValUnary:
.b2a8	fa		plx				plx 								; restore stack pos
.b2a9	20 be b2	jsr $b2be			jsr 	ValMainCode 				; do the main val() code
.b2ac	b0 01		bcs $b2af			bcs 	_VUError 					; couldn't convert
.b2ae	60		rts				rts
.b2af					_VUError:
.b2af	4c 61 b4	jmp $b461			jmp 	TypeError
.b2b2					IsValUnary:
.b2b2	fa		plx				plx 								; restore stack pos
.b2b3	20 be b2	jsr $b2be			jsr 	ValMainCode 				; do the main val() code
.b2b6	b0 03		bcs $b2bb			bcs 	_VUBad
.b2b8	4c 58 9a	jmp $9a58			jmp 	ReturnTrue
.b2bb					_VUBad:
.b2bb	4c 64 9a	jmp $9a64			jmp 	ReturnFalse
.b2be					ValMainCode:
.b2be	20 71 a5	jsr $a571			jsr 	EvaluateString 				; get a string
.b2c1	20 69 ae	jsr $ae69			jsr 	CheckRightBracket 			; check right bracket present
.b2c4	5a		phy				phy
.b2c5	b2 36		lda ($36)			lda 	(zTemp0) 					; check not empty string
.b2c7	f0 17		beq $b2e0			beq 	_VMCFail2
.b2c9	a0 ff		ldy #$ff			ldy 	#$FF 						; start position
.b2cb	48		pha				pha 								; save first character
.b2cc	c9 2d		cmp #$2d			cmp 	#"-"		 				; is it -
.b2ce	d0 01		bne $b2d1			bne 	_VMCStart
.b2d0	c8		iny				iny 								; skip over -
.b2d1					_VMCStart:
.b2d1	38		sec				sec 								; initialise first time round.
.b2d2					_VMCNext:
.b2d2	c8		iny				iny 								; pre-increment
.b2d3	b1 36		lda ($36),y			lda 	(zTemp0),y 					; next character
.b2d5	f0 0c		beq $b2e3			beq 	_VMCSuccess 				; successful.
.b2d7	20 af 9f	jsr $9faf			jsr 	EncodeNumber 				; send it to the number-builder
.b2da	90 03		bcc $b2df			bcc 	_VMCFail 					; if failed, give up.
.b2dc	18		clc				clc 								; next time round, countinue
.b2dd	80 f3		bra $b2d2			bra 	_VMCNext
.b2df					_VMCFail:
.b2df	68		pla				pla
.b2e0					_VMCFail2:
.b2e0	7a		ply				ply
.b2e1	38		sec				sec
.b2e2	60		rts				rts
.b2e3					_VMCSuccess:
.b2e3	a9 00		lda #$00			lda 	#0 							; construct final
.b2e5	20 af 9f	jsr $9faf			jsr 	EncodeNumber
.b2e8	68		pla				pla
.b2e9	c9 2d		cmp #$2d			cmp 	#"-"
.b2eb	d0 03		bne $b2f0			bne 	_VMCNotNegative
.b2ed	20 d2 a5	jsr $a5d2			jsr		NSMNegate
.b2f0					_VMCNotNegative:
.b2f0	7a		ply				ply
.b2f1	18		clc				clc
.b2f2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/chr.asm

.a3e4					ChrUnary:
.a3e4	fa		plx				plx 								; restore stack pos
.a3e5	20 be a5	jsr $a5be			jsr 	Evaluate8BitInteger			; get value
.a3e8	48		pha				pha
.a3e9	20 69 ae	jsr $ae69			jsr 	CheckRightBracket
.a3ec	a9 01		lda #$01			lda 	#1 							; allocate space for one char
.a3ee	20 da b7	jsr $b7da			jsr 	StringTempAllocate
.a3f1	68		pla				pla 								; write number to it
.a3f2	20 18 b8	jsr $b818			jsr 	StringTempWrite
.a3f5	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/spc.asm

.a3f6					SpcUnary:
.a3f6	fa		plx				plx 								; restore stack pos
.a3f7	20 be a5	jsr $a5be			jsr 	Evaluate8BitInteger			; get value
.a3fa	5a		phy				phy
.a3fb	48		pha				pha 								; save count
.a3fc	20 da b7	jsr $b7da			jsr 	StringTempAllocate
.a3ff	7a		ply				ply 								; to do count in Y
.a400					_SpcLoop:
.a400	c0 00		cpy #$00			cpy 	#0
.a402	f0 08		beq $a40c			beq 	_SpcExit
.a404	a9 20		lda #$20			lda 	#32
.a406	20 18 b8	jsr $b818			jsr 	StringTempWrite
.a409	88		dey				dey
.a40a	80 f4		bra $a400			bra 	_SPCLoop
.a40c					_SpcExit:
.a40c	7a		ply				ply
.a40d	20 69 ae	jsr $ae69			jsr 	CheckRightBracket
.a410	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/str.asm

.a411					Unary_Str:
.a411	fa		plx				plx
.a412	20 66 a5	jsr $a566			jsr 	EvaluateNumber  			; get number
.a415	20 69 ae	jsr $ae69			jsr 	CheckRightBracket 			; closing bracket
.a418	a9 05		lda #$05			lda 	#5 							; maximum decimals, from Basic816
.a41a	20 33 a4	jsr $a433			jsr 	ConvertNumberToString 		; do the conversion.
.a41d	a9 21		lda #$21			lda		#33 						; create buffer
.a41f	20 da b7	jsr $b7da			jsr 	StringTempAllocate 			; allocate memory
.a422	da		phx				phx
.a423	a2 00		ldx #$00			ldx 	#0
.a425					_USCopy:
.a425	bd 1a 06	lda $061a,x			lda 	DecimalBuffer,x
.a428	20 18 b8	jsr $b818			jsr 	StringTempWrite
.a42b	e8		inx				inx
.a42c	bd 1a 06	lda $061a,x			lda 	DecimalBuffer,x
.a42f	d0 f4		bne $a425			bne 	_USCopy
.a431	fa		plx				plx
.a432	60		rts				rts
.a433					ConvertNumberToString:
.a433	5a		phy				phy 								; save code position
.a434	8d 94 04	sta $0494			sta 	DecimalPlaces	 			; save number of DPs.
.a437	9c 95 04	stz $0495			stz 	dbOffset 					; offset into decimal buffer = start.
.a43a	bd 00 04	lda $0400,x			lda 	NSStatus,x  				; is it -ve.
.a43d	10 0a		bpl $a449			bpl 	_CNTSNotNegative
.a43f	29 7f		and #$7f			and 	#$7F 						; make +ve
.a441	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a444	a9 2d		lda #$2d			lda 	#"-"
.a446	20 af a4	jsr $a4af			jsr 	WriteDecimalBuffer
.a449					_CNTSNotNegative:
.a449	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if decimal
.a44c	f0 15		beq $a463			beq 	_CNTSNotFloat
.a44e	e8		inx				inx 								; round up
.a44f	a9 01		lda #$01			lda 	#1
.a451	20 28 a6	jsr $a628			jsr 	NSMSetByte
.a454	ca		dex				dex
.a455	bd 28 04	lda $0428,x			lda		NSExponent,x
.a458	9d 29 04	sta $0429,x			sta 	NSExponent+1,x
.a45b	a9 08		lda #$08			lda 	#NSTFloat
.a45d	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.a460	20 30 b0	jsr $b030			jsr 	FloatAdd
.a463					_CNTSNotFloat:
.a463	20 91 a4	jsr $a491			jsr 	MakePlusTwoString
.a466	20 16 b1	jsr $b116			jsr 	FloatFractionalPart 		; get the fractional part
.a469	20 da b1	jsr $b1da			jsr 	NSNormalise					; normalise , exit if zero
.a46c	f0 21		beq $a48f			beq 	_CNTSExit
.a46e	a9 2e		lda #$2e			lda 	#"."
.a470	20 af a4	jsr $a4af			jsr 	WriteDecimalBuffer 			; write decimal place
.a473					_CNTSDecimal:
.a473	ce 94 04	dec $0494			dec 	DecimalPlaces 				; done all the decimals
.a476	30 17		bmi $a48f			bmi 	_CNTSExit
.a478	e8		inx				inx 								; x 10.0
.a479	a9 0a		lda #$0a			lda 	#10
.a47b	20 28 a6	jsr $a628			jsr 	NSMSetByte
.a47e	a9 08		lda #$08			lda 	#NSTFloat
.a480	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a483	ca		dex				dex
.a484	20 a3 b1	jsr $b1a3			jsr 	FloatMultiply
.a487	20 91 a4	jsr $a491			jsr 	MakePlusTwoString
.a48a	20 16 b1	jsr $b116			jsr 	FloatFractionalPart 		; get the fractional part
.a48d	80 e4		bra $a473			bra 	_CNTSDecimal 				; keep going.
.a48f					_CNTSExit:
.a48f	7a		ply				ply
.a490	60		rts				rts
.a491					MakePlusTwoString:
.a491	da		phx				phx
.a492	20 fd a5	jsr $a5fd			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.a495	e8		inx				inx 								; access it
.a496	e8		inx				inx
.a497	20 79 b1	jsr $b179			jsr 	FloatIntegerPart 			; make it an integer
.a49a	a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.a49c	20 da af	jsr $afda			jsr 	ConvertInt32
.a49f	a2 00		ldx #$00			ldx	 	#0
.a4a1					_MPTSCopy:
.a4a1	bd f8 05	lda $05f8,x			lda 	NumberBuffer,x
.a4a4	20 af a4	jsr $a4af			jsr 	WriteDecimalBuffer
.a4a7	e8		inx				inx
.a4a8	bd f8 05	lda $05f8,x			lda 	NumberBuffer,x
.a4ab	d0 f4		bne $a4a1			bne 	_MPTSCopy
.a4ad	fa		plx				plx
.a4ae	60		rts				rts
.a4af					WriteDecimalBuffer:
.a4af	da		phx				phx
.a4b0	ae 95 04	ldx $0495			ldx 	dbOffset
.a4b3	9d 1a 06	sta $061a,x			sta 	DecimalBuffer,x
.a4b6	9e 1b 06	stz $061b,x			stz 	DecimalBuffer+1,x
.a4b9	ee 95 04	inc $0495			inc 	dbOffset
.a4bc	fa		plx				plx
.a4bd	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/substring.asm

.a4be					Unary_Left:
.a4be	fa		plx				plx
.a4bf	18		clc				clc 								; only one parameter
.a4c0	20 35 a5	jsr $a535			jsr 	SubstringInitial 			; set up.
.a4c3	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; Param #1 is the length
.a4c6	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.a4c9	9e 09 04	stz $0409,x			stz 	NSMantissa0+1,x 			; Start is zero.
.a4cc	80 2c		bra $a4fa			bra 	SubstringMain
.a4ce					Unary_Right:
.a4ce	fa		plx				plx
.a4cf	18		clc				clc 								; only one parameter
.a4d0	20 35 a5	jsr $a535			jsr 	SubstringInitial 			; set up.
.a4d3	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; length => param 2
.a4d6	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.a4d9	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; total length
.a4dc	fd 09 04	sbc $0409,x			sbc 	NSMantissa0+1,x 			; length - required.
.a4df	b0 02		bcs $a4e3			bcs 	_URNotUnderflow
.a4e1	a9 00		lda #$00			lda 	#0 							; start from the beginning, as something like right$("AB",3)
.a4e3					_URNotUnderFlow:
.a4e3	9d 09 04	sta $0409,x			sta 	NSMantissa0+1,x 			; this is the start position
.a4e6	80 12		bra $a4fa			bra 	SubStringMain
.a4e8					Unary_Mid:
.a4e8	fa		plx				plx
.a4e9	38		sec				sec 								; two parameters
.a4ea	20 35 a5	jsr $a535			jsr 	SubstringInitial 			; set up.
.a4ed	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; first parameter is zero ?
.a4f0	f0 05		beq $a4f7			beq 	_UMError
.a4f2	de 09 04	dec $0409,x			dec 	NSMantissa0+1,x				; reduce initial offset by 1 as MID$(a$,1..) is actually the first character
.a4f5	80 03		bra $a4fa			bra 	SubStringMain
.a4f7					_UMError:
.a4f7	4c 66 b4	jmp $b466			jmp 	ArgumentError
.a4fa					SubStringMain:
.a4fa	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; is the initial offset >= the length
.a4fd	dd 28 04	cmp $0428,x			cmp 	NSExponent,x
.a500	b0 2d		bcs $a52f			bcs 	_SSMNull 					; if so, return an empty string.
.a502	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; if copy count is zero
.a505	f0 28		beq $a52f			beq 	_SSMNull 					; return empty string.
.a507	18		clc				clc 								; add the offset +1 to the address and
.a508	bd 08 04	lda $0408,x			lda	 	NSMantissa0,x 				; put in zTemp
.a50b	7d 09 04	adc $0409,x			adc 	NSMantissa0+1,x
.a50e	85 36		sta $36				sta 	zTemp0
.a510	bd 10 04	lda $0410,x			lda	 	NSMantissa1,x
.a513	69 00		adc #$00			adc 	#0
.a515	85 37		sta $37				sta 	zTemp0+1
.a517					_SSMNoCarry:
.a517	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; characters required.
.a51a	20 da b7	jsr $b7da			jsr 	StringTempAllocate 			; allocate that many characters
.a51d	5a		phy				phy 								; save Y
.a51e	a0 00		ldy #$00			ldy 	#0 							; start copying in.
.a520					_SSMCopy:
.a520	b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next character
.a522	f0 09		beq $a52d			beq 	_SSMEString 				; no more to copy
.a524	20 18 b8	jsr $b818			jsr 	StringTempWrite 			; and write it out.
.a527	c8		iny				iny
.a528	de 0a 04	dec $040a,x			dec 	NSMantissa0+2,x
.a52b	d0 f3		bne $a520			bne 	_SSMCopy
.a52d					_SSMEString:
.a52d	7a		ply				ply
.a52e					_SSMExit:
.a52e	60		rts				rts
.a52f					_SSMNull:
.a52f	a9 00		lda #$00			lda 	#0
.a531	20 da b7	jsr $b7da			jsr 	StringTempAllocate
.a534	60		rts				rts
.a535					SubstringInitial:
.a535	da		phx				phx 								; save initial stack position
.a536	08		php				php 								; save carry on stack indicating 2 parameters
.a537	20 71 a5	jsr $a571			jsr 	EvaluateString 				; get a string
.a53a	5a		phy				phy 								; calculate length to exponent.
.a53b	a0 ff		ldy #$ff			ldy 	#$FF
.a53d					_SIFindLength:
.a53d	c8		iny				iny
.a53e	b1 36		lda ($36),y			lda 	(zTemp0),y
.a540	d0 fb		bne $a53d			bne 	_SIFindLength
.a542	98		tya				tya
.a543	9d 28 04	sta $0428,x			sta 	NSExponent,x
.a546	7a		ply				ply
.a547	e8		inx				inx
.a548	20 71 ae	jsr $ae71			jsr 	CheckComma 					; comma next
.a54b	20 be a5	jsr $a5be			jsr 	Evaluate8BitInteger 		; get next parameter
.a54e	28		plp				plp 								; is it the last parameter ?
.a54f	90 07		bcc $a558			bcc 	_SSIExit 					; if so, exit.
.a551	e8		inx				inx
.a552	20 71 ae	jsr $ae71			jsr 	CheckComma 					; comma next
.a555	20 be a5	jsr $a5be			jsr 	Evaluate8BitInteger 		; get last parameter
.a558					_SSIExit:
.a558	fa		plx				plx
.a559	20 69 ae	jsr $ae69			jsr 	CheckRightBracket 			; check closing bracket
.a55c	60		rts				rts 								; exit

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/exprhelper.asm

.a55d					EvaluateValue:
.a55d	48		pha				pha
.a55e	20 fc 9d	jsr $9dfc			jsr		EvaluateExpression 			; expression
.a561	20 11 9f	jsr $9f11			jsr 	Dereference					; derefernce it
.a564	68		pla				pla
.a565	60		rts				rts
.a566					EvaluateNumber:
.a566	20 5d a5	jsr $a55d			jsr 	EvaluateValue 				; get a value
.a569	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if string.
.a56c	29 10		and #$10			and 	#NSBIsString
.a56e	d0 16		bne $a586			bne 	HelperTypeError
.a570	60		rts				rts
.a571					EvaluateString:
.a571	20 5d a5	jsr $a55d			jsr 	EvaluateValue 				; get a value
.a574	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if string.
.a577	29 10		and #$10			and 	#NSBIsString
.a579	f0 0b		beq $a586			beq 	HelperTypeError
.a57b					CopyAddressToTemp0:
.a57b	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address -> zTemp0
.a57e	85 36		sta $36				sta 	zTemp0
.a580	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a583	85 37		sta $37				sta 	zTemp0+1
.a585	60		rts				rts
.a586					HelperTypeError:
.a586	4c 61 b4	jmp $b461			jmp 	TypeError
.a589					EvaluateInteger:
.a589	20 66 a5	jsr $a566			jsr 	EvaluateNumber
.a58c	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check exponent is zero
.a58f	d0 0a		bne $a59b			bne 	HelperValueError 			; if not, it's a float.
.a591	60		rts				rts
.a592					EvaluateUnsignedInteger:
.a592	20 89 a5	jsr $a589			jsr 	EvaluateInteger 			; check integer is +ve
.a595	bd 00 04	lda $0400,x			lda 	NSStatus,x
.a598	30 01		bmi $a59b			bmi 	HelperValueError
.a59a	60		rts				rts
.a59b					HelperValueError:
.a59b	4c 66 b4	jmp $b466			jmp 	ArgumentError
.a59e					Evaluate16BitInteger:
.a59e	20 92 a5	jsr $a592			jsr	 	EvaluateUnsignedInteger		; get integer
.a5a1	bd 20 04	lda $0420,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.a5a4	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.a5a7	d0 f2		bne $a59b			bne 	HelperValueError
.a5a9	60		rts				rts
.a5aa					Evaluate16BitIntegerSigned:
.a5aa	20 89 a5	jsr $a589			jsr	 	EvaluateInteger				; get integer
.a5ad	bd 20 04	lda $0420,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.a5b0	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.a5b3	d0 e6		bne $a59b			bne 	HelperValueError
.a5b5	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; signed ?
.a5b8	10 03		bpl $a5bd			bpl 	_EISNotSigned
.a5ba	20 db a5	jsr $a5db			jsr 	NSMNegateMantissa
.a5bd					_EISNotSigned:
.a5bd	60		rts				rts
.a5be					Evaluate8BitInteger:
.a5be	20 92 a5	jsr $a592			jsr	 	EvaluateUnsignedInteger 	; get an integer
.a5c1	d0 d8		bne $a59b			bne 	HelperValueError
.a5c3	bd 20 04	lda $0420,x			lda 	NSMantissa3,x	 			; bytes 1, 2 & 3 must be zero
.a5c6	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.a5c9	1d 10 04	ora $0410,x			ora 	NSMantissa1,x
.a5cc	d0 cd		bne $a59b			bne 	HelperValueError
.a5ce	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.a5d1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/mult8x8.asm

.b2f3					Multiply8x8:
.b2f3	4a		lsr a		  		lsr 	a  							; prime the carry bit for the loop
.b2f4	85 36		sta $36			  	sta 	zTemp0
.b2f6	86 37		stx $37				stx 	zTemp0+1
.b2f8	a9 00		lda #$00			lda 	#0
.b2fa	a2 08		ldx #$08			ldx 	#8
.b2fc					_M88Loop:
.b2fc	90 03		bcc $b301			bcc 	_M88NoAdd
.b2fe	18		clc				clc
.b2ff	65 37		adc $37				adc 	zTemp0+1
.b301					_M88NoAdd:
.b301	6a		ror a				ror 	a
.b302	66 36		ror $36				ror 	zTemp0  					; pull another bit out for the next iteration
.b304	ca		dex				dex         						; inc/dec don't modify carry; only shifts and adds do
.b305	d0 f5		bne $b2fc			bne 	_M88Loop
.b307	85 37		sta $37				sta 	zTemp0+1 					; store high 8 bits.
.b309	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/utility.asm

.a5d2					NSMNegate:
.a5d2	bd 00 04	lda $0400,x			lda 	NSStatus,x
.a5d5	49 80		eor #$80			eor 	#NSBIsNegative
.a5d7	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a5da	60		rts				rts
.a5db					NSMNegateMantissa:
.a5db	38		sec				sec
.a5dc	a9 00		lda #$00			lda 	#0
.a5de	fd 08 04	sbc $0408,x			sbc 	NSMantissa0,x
.a5e1	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a5e4	a9 00		lda #$00			lda 	#0
.a5e6	fd 10 04	sbc $0410,x			sbc 	NSMantissa1,x
.a5e9	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a5ec	a9 00		lda #$00			lda 	#0
.a5ee	fd 18 04	sbc $0418,x			sbc 	NSMantissa2,x
.a5f1	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.a5f4	a9 00		lda #$00			lda 	#0
.a5f6	fd 20 04	sbc $0420,x			sbc 	NSMantissa3,x
.a5f9	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.a5fc	60		rts				rts
.a5fd					NSMShiftUpTwo:
.a5fd	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.a600	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.a603	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.a606	9d 12 04	sta $0412,x			sta 	NSMantissa1+2,x
.a609	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.a60c	9d 1a 04	sta $041a,x			sta 	NSMantissa2+2,x
.a60f	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.a612	9d 22 04	sta $0422,x			sta 	NSMantissa3+2,x
.a615	bd 28 04	lda $0428,x			lda 	NSExponent,x
.a618	9d 2a 04	sta $042a,x			sta 	NSExponent+2,x
.a61b	bd 00 04	lda $0400,x			lda 	NSStatus,x
.a61e	9d 02 04	sta $0402,x			sta 	NSStatus+2,x
.a621	60		rts				rts
.a622					NSMSetZeroMantissaOnly:
.a622	a9 00		lda #$00			lda 	#0
.a624	80 08		bra $a62e			bra 	NSMSetMantissa
.a626					NSMSetZero:
.a626	a9 00		lda #$00			lda 	#0
.a628					NSMSetByte:
.a628	9e 28 04	stz $0428,x			stz 	NSExponent,x 				; zero exponent, as integer.
.a62b	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; status zero (integer)
.a62e					NSMSetMantissa:
.a62e	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; mantissa
.a631	9e 10 04	stz $0410,x			stz 	NSMantissa1,x
.a634	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.a637	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.a63a	60		rts				rts
.a63b					NSMShiftLeft:
.a63b	18		clc				clc
.a63c					NSMRotateLeft:
.a63c	3e 08 04	rol $0408,x			rol 	NSMantissa0,x
.a63f	3e 10 04	rol $0410,x			rol		NSMantissa1,x
.a642	3e 18 04	rol $0418,x			rol		NSMantissa2,x
.a645	3e 20 04	rol $0420,x			rol		NSMantissa3,x
.a648	60		rts				rts
.a649					NSMShiftRight:
.a649	5e 20 04	lsr $0420,x			lsr 	NSMantissa3,x
.a64c	7e 18 04	ror $0418,x			ror		NSMantissa2,x
.a64f	7e 10 04	ror $0410,x			ror		NSMantissa1,x
.a652	7e 08 04	ror $0408,x			ror		NSMantissa0,x
.a655	60		rts				rts
.a656					NSMIsZero:
.a656	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.a659	1d 18 04	ora $0418,x			ora		NSMantissa2,x
.a65c	1d 10 04	ora $0410,x			ora		NSMantissa1,x
.a65f	1d 08 04	ora $0408,x			ora		NSMantissa0,x
.a662	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/asmcore.asm

.b30a					Assemble_ora:
.b30a	20 f2 88	jsr $88f2		jsr	AssembleGroup1
>b30d	01					.byte $01
.b30e					Assemble_and:
.b30e	20 f2 88	jsr $88f2		jsr	AssembleGroup1
>b311	21					.byte $21
.b312					Assemble_eor:
.b312	20 f2 88	jsr $88f2		jsr	AssembleGroup1
>b315	41					.byte $41
.b316					Assemble_adc:
.b316	20 f2 88	jsr $88f2		jsr	AssembleGroup1
>b319	61					.byte $61
.b31a					Assemble_sta:
.b31a	20 f2 88	jsr $88f2		jsr	AssembleGroup1
>b31d	81					.byte $81
.b31e					Assemble_lda:
.b31e	20 f2 88	jsr $88f2		jsr	AssembleGroup1
>b321	a1					.byte $a1
.b322					Assemble_cmp:
.b322	20 f2 88	jsr $88f2		jsr	AssembleGroup1
>b325	c1					.byte $c1
.b326					Assemble_sbc:
.b326	20 f2 88	jsr $88f2		jsr	AssembleGroup1
>b329	e1					.byte $e1
.b32a					Assemble_asl:
.b32a	20 f9 88	jsr $88f9		jsr	AssembleGroup2
>b32d	02					.byte $02
>b32e	75					.byte $75
.b32f					Assemble_rol:
.b32f	20 f9 88	jsr $88f9		jsr	AssembleGroup2
>b332	22					.byte $22
>b333	75					.byte $75
.b334					Assemble_lsr:
.b334	20 f9 88	jsr $88f9		jsr	AssembleGroup2
>b337	42					.byte $42
>b338	75					.byte $75
.b339					Assemble_ror:
.b339	20 f9 88	jsr $88f9		jsr	AssembleGroup2
>b33c	62					.byte $62
>b33d	75					.byte $75
.b33e					Assemble_stx:
.b33e	20 f9 88	jsr $88f9		jsr	AssembleGroup2
>b341	82					.byte $82
>b342	50					.byte $50
.b343					Assemble_ldx:
.b343	20 f9 88	jsr $88f9		jsr	AssembleGroup2
>b346	a2					.byte $a2
>b347	d0					.byte $d0
.b348					Assemble_dec:
.b348	20 f9 88	jsr $88f9		jsr	AssembleGroup2
>b34b	c2					.byte $c2
>b34c	55					.byte $55
.b34d					Assemble_inc:
.b34d	20 f9 88	jsr $88f9		jsr	AssembleGroup2
>b350	e2					.byte $e2
>b351	55					.byte $55
.b352					Assemble_stz:
.b352	20 f9 88	jsr $88f9		jsr	AssembleGroup2
>b355	60					.byte $60
>b356	44					.byte $44
.b357					Assemble_bit:
.b357	20 f9 88	jsr $88f9		jsr	AssembleGroup2
>b35a	20					.byte $20
>b35b	55					.byte $55
.b35c					Assemble_sty:
.b35c	20 f9 88	jsr $88f9		jsr	AssembleGroup2
>b35f	80					.byte $80
>b360	54					.byte $54
.b361					Assemble_ldy:
.b361	20 f9 88	jsr $88f9		jsr	AssembleGroup2
>b364	a0					.byte $a0
>b365	d5					.byte $d5
.b366					Assemble_cpy:
.b366	20 f9 88	jsr $88f9		jsr	AssembleGroup2
>b369	c0					.byte $c0
>b36a	d4					.byte $d4
.b36b					Assemble_cpx:
.b36b	20 f9 88	jsr $88f9		jsr	AssembleGroup2
>b36e	e0					.byte $e0
>b36f	d0					.byte $d0
.b370					Assemble_tsb:
.b370	20 f9 88	jsr $88f9		jsr	AssembleGroup2
>b373	00					.byte $00
>b374	50					.byte $50
.b375					Assemble_trb:
.b375	20 f9 88	jsr $88f9		jsr	AssembleGroup2
>b378	10					.byte $10
>b379	50					.byte $50
.b37a					Assemble_jsr:
.b37a	20 f9 88	jsr $88f9		jsr	AssembleGroup2
>b37d	14					.byte $14
>b37e	10					.byte $10
.b37f					Assemble_jmp:
.b37f	20 f9 88	jsr $88f9		jsr	AssembleGroup2
>b382	40					.byte $40
>b383	10					.byte $10
.b384					Assemble_bpl:
.b384	20 4a 89	jsr $894a		jsr	AssembleGroup3
>b387	10					.byte $10
.b388					Assemble_bmi:
.b388	20 4a 89	jsr $894a		jsr	AssembleGroup3
>b38b	30					.byte $30
.b38c					Assemble_bvc:
.b38c	20 4a 89	jsr $894a		jsr	AssembleGroup3
>b38f	50					.byte $50
.b390					Assemble_bvs:
.b390	20 4a 89	jsr $894a		jsr	AssembleGroup3
>b393	70					.byte $70
.b394					Assemble_bcc:
.b394	20 4a 89	jsr $894a		jsr	AssembleGroup3
>b397	90					.byte $90
.b398					Assemble_bcs:
.b398	20 4a 89	jsr $894a		jsr	AssembleGroup3
>b39b	b0					.byte $b0
.b39c					Assemble_bne:
.b39c	20 4a 89	jsr $894a		jsr	AssembleGroup3
>b39f	d0					.byte $d0
.b3a0					Assemble_beq:
.b3a0	20 4a 89	jsr $894a		jsr	AssembleGroup3
>b3a3	f0					.byte $f0
.b3a4					Assemble_bra:
.b3a4	20 4a 89	jsr $894a		jsr	AssembleGroup3
>b3a7	80					.byte $80
.b3a8					Assemble_brk:
.b3a8	20 80 89	jsr $8980		jsr	AssembleGroup4
>b3ab	00					.byte $00
.b3ac					Assemble_php:
.b3ac	20 80 89	jsr $8980		jsr	AssembleGroup4
>b3af	08					.byte $08
.b3b0					Assemble_clc:
.b3b0	20 80 89	jsr $8980		jsr	AssembleGroup4
>b3b3	18					.byte $18
.b3b4					Assemble_plp:
.b3b4	20 80 89	jsr $8980		jsr	AssembleGroup4
>b3b7	28					.byte $28
.b3b8					Assemble_sec:
.b3b8	20 80 89	jsr $8980		jsr	AssembleGroup4
>b3bb	38					.byte $38
.b3bc					Assemble_rti:
.b3bc	20 80 89	jsr $8980		jsr	AssembleGroup4
>b3bf	40					.byte $40
.b3c0					Assemble_pha:
.b3c0	20 80 89	jsr $8980		jsr	AssembleGroup4
>b3c3	48					.byte $48
.b3c4					Assemble_cli:
.b3c4	20 80 89	jsr $8980		jsr	AssembleGroup4
>b3c7	58					.byte $58
.b3c8					Assemble_phy:
.b3c8	20 80 89	jsr $8980		jsr	AssembleGroup4
>b3cb	5a					.byte $5a
.b3cc					Assemble_rts:
.b3cc	20 80 89	jsr $8980		jsr	AssembleGroup4
>b3cf	60					.byte $60
.b3d0					Assemble_pla:
.b3d0	20 80 89	jsr $8980		jsr	AssembleGroup4
>b3d3	68					.byte $68
.b3d4					Assemble_sei:
.b3d4	20 80 89	jsr $8980		jsr	AssembleGroup4
>b3d7	78					.byte $78
.b3d8					Assemble_ply:
.b3d8	20 80 89	jsr $8980		jsr	AssembleGroup4
>b3db	7a					.byte $7a
.b3dc					Assemble_dey:
.b3dc	20 80 89	jsr $8980		jsr	AssembleGroup4
>b3df	88					.byte $88
.b3e0					Assemble_txa:
.b3e0	20 80 89	jsr $8980		jsr	AssembleGroup4
>b3e3	8a					.byte $8a
.b3e4					Assemble_tya:
.b3e4	20 80 89	jsr $8980		jsr	AssembleGroup4
>b3e7	98					.byte $98
.b3e8					Assemble_txs:
.b3e8	20 80 89	jsr $8980		jsr	AssembleGroup4
>b3eb	9a					.byte $9a
.b3ec					Assemble_tay:
.b3ec	20 80 89	jsr $8980		jsr	AssembleGroup4
>b3ef	a8					.byte $a8
.b3f0					Assemble_tax:
.b3f0	20 80 89	jsr $8980		jsr	AssembleGroup4
>b3f3	aa					.byte $aa
.b3f4					Assemble_clv:
.b3f4	20 80 89	jsr $8980		jsr	AssembleGroup4
>b3f7	b8					.byte $b8
.b3f8					Assemble_tsx:
.b3f8	20 80 89	jsr $8980		jsr	AssembleGroup4
>b3fb	ba					.byte $ba
.b3fc					Assemble_iny:
.b3fc	20 80 89	jsr $8980		jsr	AssembleGroup4
>b3ff	c8					.byte $c8
.b400					Assemble_dex:
.b400	20 80 89	jsr $8980		jsr	AssembleGroup4
>b403	ca					.byte $ca
.b404					Assemble_cld:
.b404	20 80 89	jsr $8980		jsr	AssembleGroup4
>b407	d8					.byte $d8
.b408					Assemble_phx:
.b408	20 80 89	jsr $8980		jsr	AssembleGroup4
>b40b	da					.byte $da
.b40c					Assemble_stp:
.b40c	20 80 89	jsr $8980		jsr	AssembleGroup4
>b40f	db					.byte $db
.b410					Assemble_inx:
.b410	20 80 89	jsr $8980		jsr	AssembleGroup4
>b413	e8					.byte $e8
.b414					Assemble_nop:
.b414	20 80 89	jsr $8980		jsr	AssembleGroup4
>b417	ea					.byte $ea
.b418					Assemble_sed:
.b418	20 80 89	jsr $8980		jsr	AssembleGroup4
>b41b	f8					.byte $f8
.b41c					Assemble_plx:
.b41c	20 80 89	jsr $8980		jsr	AssembleGroup4
>b41f	fa					.byte $fa

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/constants.asm

.b420					DecimalScalarTable:
>b420	66 66 66 66				.dword $66666666 ; 0.1
>b424	de					.byte $de
>b425	1f 85 eb 51				.dword $51eb851f ; 0.01
>b429	db					.byte $db
>b42a	4c 37 89 41				.dword $4189374c ; 0.001
>b42e	d8					.byte $d8
>b42f	ac 8b db 68				.dword $68db8bac ; 0.0001
>b433	d4					.byte $d4
>b434	24 d6 e2 53				.dword $53e2d624 ; 1e-05
>b438	d1					.byte $d1
>b439	83 de 1b 43				.dword $431bde83 ; 1e-06
>b43d	ce					.byte $ce
>b43e	6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>b442	ca					.byte $ca
>b443	89 3b e6 55				.dword $55e63b89 ; 1e-08
>b447	c7					.byte $c7
>b448	a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>b44c	c4					.byte $c4
>b44d	67 7f f3 6d				.dword $6df37f67 ; 1e-10
>b451	c0					.byte $c0
>b452	86 ff f5 57				.dword $57f5ff86 ; 1e-11
>b456	bd					.byte $bd

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.asm

.b457					SyntaxError:
.b457	a9 02		lda #$02		lda	#2
.b459	4c eb 99	jmp $99eb		jmp	ErrorHandler
.b45c					RangeError:
.b45c	a9 04		lda #$04		lda	#4
.b45e	4c eb 99	jmp $99eb		jmp	ErrorHandler
.b461					TypeError:
.b461	a9 05		lda #$05		lda	#5
.b463	4c eb 99	jmp $99eb		jmp	ErrorHandler
.b466					ArgumentError:
.b466	a9 07		lda #$07		lda	#7
.b468	4c eb 99	jmp $99eb		jmp	ErrorHandler
.b46b					NotDoneError:
.b46b	a9 0c		lda #$0c		lda	#12
.b46d	4c eb 99	jmp $99eb		jmp	ErrorHandler
.b470					ErrorText:
>b470	42 72 65 61 6b 00			.text	"Break",0
>b476	53 79 6e 74 61 78 20 65			.text	"Syntax error",0
>b47e	72 72 6f 72 00
>b483	44 69 76 69 73 69 6f 6e			.text	"Division by zero",0
>b48b	20 62 79 20 7a 65 72 6f 00
>b494	4f 75 74 20 6f 66 20 52			.text	"Out of Range",0
>b49c	61 6e 67 65 00
>b4a1	54 79 70 65 20 6d 69 73			.text	"Type mismatch",0
>b4a9	6d 61 74 63 68 00
>b4af	4f 75 74 20 6f 66 20 6d			.text	"Out of memory",0
>b4b7	65 6d 6f 72 79 00
>b4bd	49 6c 6c 65 67 61 6c 20			.text	"Illegal argument",0
>b4c5	61 72 67 75 6d 65 6e 74 00
>b4ce	53 74 6f 70 00				.text	"Stop",0
>b4d3	53 74 72 69 6e 67 20 74			.text	"String too long",0
>b4db	6f 6f 20 6c 6f 6e 67 00
>b4e3	41 73 73 65 72 74 69 6f			.text	"Assertion failed",0
>b4eb	6e 20 66 61 69 6c 65 64 00
>b4f4	4f 75 74 20 6f 66 20 64			.text	"Out of data",0
>b4fc	61 74 61 00
>b500	55 6e 69 6d 70 6c 65 6d			.text	"Unimplemented",0
>b508	65 6e 74 65 64 00
>b50e	4e 6f 20 73 75 63 68 20			.text	"No such line number",0
>b516	6c 69 6e 65 20 6e 75 6d 62 65 72 00
>b522	52 65 74 75 72 6e 20 77			.text	"Return without Gosub",0
>b52a	69 74 68 6f 75 74 20 47 6f 73 75 62 00
>b537	55 6e 74 69 6c 20 77 69			.text	"Until without Repeat",0
>b53f	74 68 6f 75 74 20 52 65 70 65 61 74 00
>b54c	57 65 6e 64 20 77 69 74			.text	"Wend without While",0
>b554	68 6f 75 74 20 57 68 69 6c 65 00
>b55f	4e 65 78 74 20 77 69 74			.text	"Next without For",0
>b567	68 6f 75 74 20 46 6f 72 00
>b570	42 41 53 49 43 20 53 74			.text	"BASIC Stack full",0
>b578	61 63 6b 20 66 75 6c 6c 00
>b581	4f 70 65 6e 20 53 74 72			.text	"Open Structure",0
>b589	75 63 74 75 72 65 00
>b590	45 6e 64 50 72 6f 63 20			.text	"EndProc without call",0
>b598	77 69 74 68 6f 75 74 20 63 61 6c 6c 00
>b5a5	41 72 72 61 79 20 61 6c			.text	"Array already defined",0
>b5ad	72 65 61 64 79 20 64 65 66 69 6e 65 64 00
>b5bb	41 72 72 61 79 20 73 69			.text	"Array size",0
>b5c3	7a 65 00
>b5c6	42 61 64 20 61 72 72 61			.text	"Bad array index",0
>b5ce	79 20 69 6e 64 65 78 00

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/timestamp.asm

>b5d6	42 75 69 6c 74 20 53 61			.text "Built Saturday 29-Oct-2022. Build 2396."
>b5de	74 75 72 64 61 79 20 32 39 2d 4f 63 74 2d 32 30
>b5ee	32 32 2e 20 42 75 69 6c 64 20 32 33 39 36 2e

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/hardware/junior/extern.asm

.b5fd					EXTInitialise:
.b5fd	64 01		stz $01				stz 	1 							; Access I/O
.b5ff	9c 04 d0	stz $d004			stz 	$D004 						; Disable border
.b602	9c 08 d0	stz $d008			stz 	$D008
.b605	9c 09 d0	stz $d009			stz 	$D009
.b608	a9 09		lda #$09			lda 	#1+8						; Timer On at 70Hz counting up.
.b60a	8d 58 d6	sta $d658			sta 	$D658
.b60d	60		rts				rts
.b60e					EXTClearScreen:
.b60e	4c ea ff	jmp $ffea			jmp 	$FFEA
.b611					EXTPrintCharacter:
.b611	48		pha				pha
.b612	da		phx				phx
.b613	5a		phy				phy
.b614	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.b617	7a		ply				ply
.b618	fa		plx				plx
.b619	68		pla				pla
.b61a	60		rts				rts
.b61b					EXTInputSingleCharacter:
.b61b	da		phx				phx
.b61c	5a		phy				phy
.b61d					_EISCWait:
.b61d	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.b620	c9 00		cmp #$00			cmp 	#0
.b622	f0 f9		beq $b61d			beq 	_EISCWait
.b624	7a		ply				ply
.b625	fa		plx				plx
.b626	60		rts				rts
.b627					EXTInputLine:
.b627	a2 00		ldx #$00			ldx 	#0 							; position in line <- start of line
.b629					_ILLoop:
.b629	da		phx				phx 								; read character in
.b62a	20 cf ff	jsr $ffcf			jsr 	$FFCF
.b62d	fa		plx				plx
.b62e	c9 08		cmp #$08			cmp 	#8 							; backspace, CBM doesn't need this.
.b630	f0 12		beq $b644			beq 	_ILBackspace
.b632	c9 0d		cmp #$0d			cmp 	#13							; exit ?
.b634	f0 15		beq $b64b			beq 	_ILExit
.b636	c9 20		cmp #$20			cmp 	#32 						; ignore other control
.b638	90 ef		bcc $b629			bcc 	_ILLoop
.b63a	e0 50		cpx #$50			cpx 	#MaxLineSize 				; already full buffer
.b63c	f0 eb		beq $b629			beq 	_ILLoop
.b63e	9d a7 05	sta $05a7,x			sta 	lineBuffer,x 				; save it
.b641	e8		inx				inx
.b642	80 e5		bra $b629			bra 	_ILLoop
.b644					_ILBackspace:
.b644	e0 00		cpx #$00			cpx 	#0  						; can't backspace, start of line.
.b646	f0 e1		beq $b629			beq 	_ILLoop
.b648	ca		dex				dex 								; back one.
.b649	80 de		bra $b629			bra 	_ILLoop
.b64b					_ILExit:
.b64b	20 11 b6	jsr $b611			jsr 	EXTPrintCharacter
.b64e	9e a7 05	stz $05a7,x			stz 	lineBuffer,x 				; make ASCIIZ and exit with address in XA
.b651	60		rts				rts
.b652					EXTBreakCheck:
.b652	4c e1 ff	jmp $ffe1			jmp		$FFE1
.b655					EXTReadController:
.b655	da		phx				phx
.b656	a2 00		ldx #$00			ldx 	#0
.b658	a9 05		lda #$05			lda 	#(($2D) >> 3)
.b65a	20 e7 ff	jsr $ffe7			jsr 	$FFE7
.b65d	29 20		and #$20			and 	#($01 << (($2D) & 7))
.b65f	f0 04		beq $b665			beq 	_NoSet1
.b661	8a		txa				txa
.b662	09 01		ora #$01			ora 	#1
.b664	aa		tax				tax
.b665					_NoSet1:
.b665	a9 05		lda #$05			lda 	#(($2C) >> 3)
.b667	20 e7 ff	jsr $ffe7			jsr 	$FFE7
.b66a	29 10		and #$10			and 	#($01 << (($2C) & 7))
.b66c	f0 04		beq $b672			beq 	_NoSet1
.b66e	8a		txa				txa
.b66f	09 02		ora #$02			ora 	#2
.b671	aa		tax				tax
.b672					_NoSet1:
.b672	a9 06		lda #$06			lda 	#(($32) >> 3)
.b674	20 e7 ff	jsr $ffe7			jsr 	$FFE7
.b677	29 04		and #$04			and 	#($01 << (($32) & 7))
.b679	f0 04		beq $b67f			beq 	_NoSet1
.b67b	8a		txa				txa
.b67c	09 04		ora #$04			ora 	#4
.b67e	aa		tax				tax
.b67f					_NoSet1:
.b67f	a9 04		lda #$04			lda 	#(($25) >> 3)
.b681	20 e7 ff	jsr $ffe7			jsr 	$FFE7
.b684	29 20		and #$20			and 	#($01 << (($25) & 7))
.b686	f0 04		beq $b68c			beq 	_NoSet1
.b688	8a		txa				txa
.b689	09 08		ora #$08			ora 	#8
.b68b	aa		tax				tax
.b68c					_NoSet1:
.b68c	a9 04		lda #$04			lda 	#(($26) >> 3)
.b68e	20 e7 ff	jsr $ffe7			jsr 	$FFE7
.b691	29 40		and #$40			and 	#($01 << (($26) & 7))
.b693	f0 04		beq $b699			beq 	_NoSet1
.b695	8a		txa				txa
.b696	09 10		ora #$10			ora 	#16
.b698	aa		tax				tax
.b699					_NoSet1:
.b699	8a		txa				txa
.b69a	fa		plx				plx
.b69b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/delete.asm

.b69c					MemoryDeleteLine:
.b69c	20 bb b6	jsr $b6bb			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.b69f	b2 30		lda ($30)			lda 	(codePtr) 					; size to delete => y
.b6a1	a8		tay				tay
.b6a2					_MDDLLoop:
.b6a2	b1 30		lda ($30),y			lda 	(codePtr),y 				; copy down
.b6a4	92 30		sta ($30)			sta 	(codePtr)
.b6a6	a5 30		lda $30				lda 	codePtr 					; check done the lot.
.b6a8	c5 3a		cmp $3a				cmp 	zTemp2
.b6aa	d0 07		bne $b6b3			bne 	_MDLDLNext
.b6ac	a5 31		lda $31				lda 	codePtr+1
.b6ae	c5 3b		cmp $3b				cmp 	zTemp2+1
.b6b0	d0 01		bne $b6b3			bne 	_MDLDLNext
.b6b2					_MDDLExit:
.b6b2	60		rts				rts
.b6b3					_MDLDLNext:
.b6b3	e6 30		inc $30				inc 	codePtr						; next byte
.b6b5	d0 eb		bne $b6a2			bne 	_MDDLLoop
.b6b7	e6 31		inc $31				inc 	codePtr+1
.b6b9	80 e7		bra $b6a2			bra 	_MDDLLoop
.b6bb					IMemoryFindEnd:
.b6bb	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.b6bd	85 3a		sta $3a				sta 	0+zTemp2
.b6bf	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.b6c1	85 3b		sta $3b				sta 	1+zTemp2
.b6c3					_MDLFELoop:
.b6c3	b2 3a		lda ($3a)			lda 	(zTemp2)
.b6c5	f0 0b		beq $b6d2			beq 	_MDLFEExit
.b6c7	18		clc				clc
.b6c8	65 3a		adc $3a				adc 	zTemp2
.b6ca	85 3a		sta $3a				sta 	zTemp2
.b6cc	90 f5		bcc $b6c3			bcc 	_MDLFELoop
.b6ce	e6 3b		inc $3b				inc 	zTemp2+1
.b6d0	80 f1		bra $b6c3			bra 	_MDLFELoop
.b6d2					_MDLFEExit:
.b6d2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/insert.asm

.b6d3					MemoryInsertLine:
.b6d3	08		php				php
.b6d4	20 bb b6	jsr $b6bb			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.b6d7	a5 3b		lda $3b				lda 	zTemp2+1 					; space ?
.b6d9	1a		inc a				inc 	a
.b6da	c9 7f		cmp #$7f			cmp 	#(BasicEnd >> 8)-1
.b6dc	b0 36		bcs $b714			bcs 	_MDLIError
.b6de	28		plp				plp
.b6df	90 08		bcc $b6e9			bcc 	_MDLIFound
.b6e1	a5 3a		lda $3a				lda 	zTemp2 						; if CS on entry append.
.b6e3	85 30		sta $30				sta 	codePtr
.b6e5	a5 3b		lda $3b				lda 	zTemp2+1
.b6e7	85 31		sta $31				sta 	codePtr+1
.b6e9					_MDLIFound:
.b6e9	ad a7 04	lda $04a7			lda 	tokenOffset 				; insert gap in Y, the offset, e.g. length of the new line
.b6ec	a8		tay				tay
.b6ed					_MDLIInsert:
.b6ed	b2 3a		lda ($3a)			lda 	(zTemp2) 					; shift one byte up , at least one covers end case.
.b6ef	91 3a		sta ($3a),y			sta 	(zTemp2),y 					; work from top down.
.b6f1	a5 30		lda $30				lda 	codePtr 					; done insert point ?
.b6f3	c5 3a		cmp $3a				cmp 	zTemp2
.b6f5	d0 06		bne $b6fd			bne 	_MDLINext
.b6f7	a5 31		lda $31				lda 	codePtr+1
.b6f9	c5 3b		cmp $3b				cmp 	zTemp2+1
.b6fb	f0 0a		beq $b707			beq 	_MDLIHaveSpace
.b6fd					_MDLINext:
.b6fd	a5 3a		lda $3a				lda 	zTemp2 						; if no, keep zTemp2 going backwards
.b6ff	d0 02		bne $b703			bne 	_MDLINoBorrow
.b701	c6 3b		dec $3b				dec 	zTemp2+1
.b703					_MDLINoBorrow:
.b703	c6 3a		dec $3a				dec 	zTemp2
.b705	80 e6		bra $b6ed			bra 	_MDLIInsert
.b707					_MDLIHaveSpace:
.b707	ac a7 04	ldy $04a7			ldy 	tokenOffset 				; bytes to copy
.b70a	88		dey				dey 								; from offset-1 to 0
.b70b					_MDLICopy:
.b70b	b9 a7 04	lda $04a7,y			lda 	tokenOffset,y
.b70e	91 30		sta ($30),y			sta 	(codePtr),y
.b710	88		dey				dey
.b711	10 f8		bpl $b70b			bpl 	_MDLICopy
.b713	60		rts				rts
.b714					_MDLIError:
.b714	a9 06		lda #$06		lda	#6
.b716	4c eb 99	jmp $99eb		jmp	ErrorHandler
.b719					MDLAppendLine:
.b719	86 37		stx $37				stx 	zTemp0+1 					; save new line at zTemp0
.b71b	85 36		sta $36				sta 	zTemp0
.b71d	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.b71f	85 38		sta $38				sta 	0+zTemp1
.b721	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.b723	85 39		sta $39				sta 	1+zTemp1
.b725	b2 38		lda ($38)			lda 	(zTemp1)
.b727	d0 0a		bne $b733			bne 	_MDLANoInitialise
.b729	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.b72b	8d 6a 06	sta $066a			sta 	0+AppendPointer
.b72e	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.b730	8d 6b 06	sta $066b			sta 	1+AppendPointer
.b733					_MDLANoInitialise:
.b733	18		clc				clc
.b734	ad 6a 06	lda $066a			lda 	AppendPointer 				; copy append pointer to zTemp1 adding the offset as you go
.b737	85 38		sta $38				sta 	zTemp1
.b739	72 36		adc ($36)			adc 	(zTemp0)
.b73b	8d 6a 06	sta $066a			sta 	AppendPointer
.b73e	ad 6b 06	lda $066b			lda 	AppendPointer+1
.b741	85 39		sta $39				sta 	zTemp1+1
.b743	69 00		adc #$00			adc 	#0
.b745	8d 6b 06	sta $066b			sta 	AppendPointer+1
.b748	a0 00		ldy #$00			ldy 	#0
.b74a					_MDLACopy:
.b74a	b1 36		lda ($36),y			lda 	(zTemp0),y 					; copy new line in
.b74c	91 38		sta ($38),y			sta 	(zTemp1),y
.b74e	c8		iny				iny
.b74f	98		tya				tya
.b750	d2 36		cmp ($36)			cmp 	(zTemp0) 					; done whole line
.b752	d0 f6		bne $b74a			bne 	_MDLACopy
.b754	a9 00		lda #$00			lda 	#0 							; end of program.
.b756	91 38		sta ($38),y			sta 	(zTemp1),y
.b758	60		rts				rts
.066a					AppendPointer:
>066a							.fill 	2

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/memory.asm

.a663					MemoryNew:
.a663	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a665	85 30		sta $30				sta 	codePtr
.a667	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a669	85 31		sta $31				sta 	codePtr+1
.a66b	a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.a66d	92 30		sta ($30)			sta 	(codePtr)
.a66f	60		rts				rts
.a670					MemoryInline:
.a670	98		tya				tya 								; put address into stack,x
.a671	18		clc				clc
.a672	65 30		adc $30				adc 	codePtr
.a674	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a677	a5 31		lda $31				lda 	codePtr+1
.a679	69 00		adc #$00			adc 	#0
.a67b	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a67e	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.a681	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.a684	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/search.asm

.a685					MemorySearch:
.a685	85 36		sta $36				sta 	zTemp0 						; save line number zTemp0
.a687	86 37		stx $37				stx 	zTemp0+1
.a689	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a68b	85 30		sta $30				sta 	codePtr
.a68d	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a68f	85 31		sta $31				sta 	codePtr+1
.a691					_MTAXLoop:
.a691	b2 30		lda ($30)			lda 	(codePtr)
.a693	18		clc				clc
.a694	f0 21		beq $a6b7			beq 	_MTAXExit 					; reached end, exit with CC.
.a696	a0 01		ldy #$01			ldy 	#1 							; calculate current line# - requested line#
.a698	b1 30		lda ($30),y			lda 	(codePtr),y
.a69a	38		sec				sec
.a69b	e5 36		sbc $36				sbc 	zTemp0
.a69d	85 38		sta $38				sta 	zTemp1 						; save interim to set Z
.a69f	c8		iny				iny 								; do the MSB
.a6a0	b1 30		lda ($30),y			lda 	(codePtr),y
.a6a2	e5 37		sbc $37				sbc 	zTemp0+1
.a6a4	05 38		ora $38				ora 	zTemp1
.a6a6	f0 0f		beq $a6b7			beq 	_MTAXExit	 				; found
.a6a8	b0 0d		bcs $a6b7			bcs 	_MTAXExit 					; current < required exit
.a6aa	18		clc				clc
.a6ab	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.a6ad	65 30		adc $30				adc 	codePtr
.a6af	85 30		sta $30				sta 	codePtr
.a6b1	90 02		bcc $a6b5			bcc 	_CREExit
.a6b3	e6 31		inc $31				inc 	codePtr+1
.a6b5					_CREExit:
.a6b5	80 da		bra $a691			bra 	_MTAXLoop
.a6b7					_MTAXExit:
.a6b7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/bytes.asm

.a6b8					StackPushByte:
.a6b8	48		pha				pha 								; save byte
.a6b9	a5 34		lda $34				lda 	BasicStack
.a6bb	d0 09		bne $a6c6			bne 	_SPBNoBorrow
.a6bd	c6 35		dec $35				dec 	BasicStack+1
.a6bf	48		pha				pha
.a6c0	a5 35		lda $35				lda 	BasicStack+1
.a6c2	c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.a6c4	90 06		bcc $a6cc			bcc 	_SPBMemory
.a6c6					_SPBNoBorrow:
.a6c6	c6 34		dec $34				dec 	BasicStack
.a6c8	68		pla				pla 								; get back and write
.a6c9	92 34		sta ($34)			sta 	(BasicStack)
.a6cb	60		rts				rts
.a6cc					_SPBMemory:
.a6cc	a9 12		lda #$12		lda	#18
.a6ce	4c eb 99	jmp $99eb		jmp	ErrorHandler
.a6d1					StackPopByte:
.a6d1	b2 34		lda ($34)			lda 	(BasicStack)
.a6d3	e6 34		inc $34				inc 	BasicStack
.a6d5	d0 02		bne $a6d9			bne 	_SPBNoCarry
.a6d7	e6 35		inc $35				inc 	BasicStack+1
.a6d9					_SPBNoCarry:
.a6d9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/frames.asm

.a6da					StackOpen:
.a6da	48		pha				pha 								; save frame byte
.a6db	29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.a6dd	0a		asl a				asl 	a 							; claim twice this for storage
.a6de	49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.a6e0	38		sec				sec 								; so basically subtracting from
.a6e1	65 34		adc $34				adc 	basicStack 	 				; basicStack
.a6e3	85 34		sta $34				sta 	basicStack
.a6e5	b0 08		bcs $a6ef			bcs 	_SONoBorrow
.a6e7	c6 35		dec $35				dec 	basicStack+1
.a6e9	a5 35		lda $35				lda 	basicStack+1 				; have we reached stack overflow
.a6eb	c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.a6ed	90 04		bcc $a6f3			bcc 	_SOMemory
.a6ef					_SONoBorrow:
.a6ef	68		pla				pla 								; get marker back and write at TOS
.a6f0	92 34		sta ($34)			sta 	(basicStack)
.a6f2	60		rts				rts
.a6f3					_SOMemory:
.a6f3	a9 12		lda #$12		lda	#18
.a6f5	4c eb 99	jmp $99eb		jmp	ErrorHandler
.a6f8					StackClose:
.a6f8	b2 34		lda ($34)			lda 	(basicStack) 				; get TOS marker
.a6fa	29 0f		and #$0f			and 	#$0F 						; bytes to add back
.a6fc	0a		asl a				asl 	a 							; claim twice this.
.a6fd	65 34		adc $34				adc 	basicStack 					; add to the stack pointer.
.a6ff	85 34		sta $34				sta 	basicStack
.a701	90 02		bcc $a705			bcc 	_SCExit
.a703	e6 35		inc $35				inc 	basicStack+1
.a705					_SCExit:
.a705	60		rts				rts
.a706					StackCheckFrame:
.a706	48		pha				pha
.a707					_StackRemoveLocals:
.a707	b2 34		lda ($34)			lda 	(basicStack) 				; check for local, keep popping them
.a709	c9 03		cmp #$03			cmp 	#STK_LOCALS+1
.a70b	b0 05		bcs $a712			bcs 	_SCNoLocal
.a70d	20 10 ae	jsr $ae10			jsr 	LocalPopValue
.a710	80 f5		bra $a707			bra 	_StackRemoveLocals
.a712					_SCNoLocal:
.a712	68		pla				pla
.a713	52 34		eor ($34)			eor 	(basicStack) 				; xor with toS marker
.a715	29 f0		and #$f0			and 	#$F0 						; check type bits
.a717	d0 01		bne $a71a			bne 	_SCFError 					; different, we have structures mixed up
.a719	60		rts				rts
.a71a					_SCFError:
.a71a	8a		txa				txa 								; report error X
.a71b	4c eb 99	jmp $99eb			jmp 	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/location.asm

.a71e					STKSaveCodePosition:
.a71e	5a		phy				phy
.a71f	98		tya				tya 								; save Y
.a720	a0 05		ldy #$05			ldy 	#5
.a722	91 34		sta ($34),y			sta 	(basicStack),y
.a724	88		dey				dey 								; save Code Pointer
.a725					_STKSaveLoop:
.a725	b9 2f 00	lda $002f,y			lda 	safePtr-1,y 				; allows us to access the pointer w/out issues.
.a728	91 34		sta ($34),y			sta 	(basicStack),y
.a72a	88		dey				dey
.a72b	d0 f8		bne $a725			bne 	_STKSaveLoop
.a72d	7a		ply				ply
.a72e	60		rts				rts
.a72f					STKLoadCodePosition:
.a72f	a0 01		ldy #$01			ldy 	#1 							; load code pointer back
.a731					_STKLoadLoop:
.a731	b1 34		lda ($34),y			lda 	(basicStack),y
.a733	99 2f 00	sta $002f,y			sta 	safePtr-1,y
.a736	c8		iny				iny
.a737	c0 05		cpy #$05			cpy 	#5
.a739	d0 f6		bne $a731			bne 	_STKLoadLoop
.a73b	b1 34		lda ($34),y			lda 	(basicStack),y 				; get Y offset
.a73d	a8		tay				tay
.a73e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/setup.asm

.a73f					StackReset:
.a73f	a9 ff		lda #$ff			lda 	#((BasicStackBase+BasicStackSize-1) & $FF)
.a741	85 34		sta $34				sta 	0+basicStack
.a743	a9 0f		lda #$0f			lda 	#((BasicStackBase+BasicStackSize-1) >> 8)
.a745	85 35		sta $35				sta 	1+basicStack
.a747	a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.a749	92 34		sta ($34)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.a74b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/concrete.asm

.b759					StringConcrete:
.b759	5a		phy				phy 								; save position on stack
.b75a	20 c0 a2	jsr $a2c0			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.b75d	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy target string to zTemp1
.b760	85 38		sta $38				sta 	zTemp1
.b762	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.b765	85 39		sta $39				sta 	zTemp1+1
.b767	a0 ff		ldy #$ff			ldy 	#$FF	 					; calculate string length
.b769					_SALength:
.b769	c8		iny				iny
.b76a	b1 38		lda ($38),y			lda 	(zTemp1),y
.b76c	d0 fb		bne $b769			bne 	_SALength
.b76e	c0 fd		cpy #$fd			cpy 	#253 						; string too long
.b770	b0 3f		bcs $b7b1			bcs 	_SALengthError
.b772	98		tya				tya 				 				; length of the new string
.b773	18		clc				clc
.b774	69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.b776	90 02		bcc $b77a			bcc 	_SAHaveLength
.b778	a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.b77a					_SAHaveLength:
.b77a	48		pha				pha 								; save length.
.b77b	38		sec				sec
.b77c	49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.b77e	6d 8e 04	adc $048e			adc 	StringMemory
.b781	8d 8e 04	sta $048e			sta 	StringMemory
.b784	85 3a		sta $3a				sta 	zTemp2 						; update storage address
.b786	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; update mantissa address
.b789	a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.b78b	6d 8f 04	adc $048f			adc 	StringMemory+1
.b78e	8d 8f 04	sta $048f			sta 	StringMemory+1
.b791	85 3b		sta $3b				sta 	zTemp2+1
.b793	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.b796	68		pla				pla 								; save length-3 (chars allowed) in first byte
.b797	38		sec				sec
.b798	e9 03		sbc #$03			sbc 	#3
.b79a	92 3a		sta ($3a)			sta 	(zTemp2)
.b79c	a9 00		lda #$00			lda 	#0 							; clear the status byte.
.b79e	a0 01		ldy #$01			ldy 	#1
.b7a0	91 3a		sta ($3a),y			sta 	(zTemp2),y
.b7a2					_SACopyNewString:
.b7a2	a0 00		ldy #$00			ldy 	#0
.b7a4					_SACopyNSLoop:
.b7a4	b1 38		lda ($38),y			lda 	(zTemp1),y 					; get character
.b7a6	c8		iny				iny 								; write two on in string storage
.b7a7	c8		iny				iny
.b7a8	91 3a		sta ($3a),y			sta 	(zTemp2),y
.b7aa	88		dey				dey 								; this makes it one one.
.b7ab	c9 00		cmp #$00			cmp 	#0 							; until EOS copied
.b7ad	d0 f5		bne $b7a4			bne 	_SACopyNSLoop
.b7af	7a		ply				ply
.b7b0	60		rts				rts
.b7b1					_SALengthError:
.b7b1	a9 09		lda #$09		lda	#9
.b7b3	4c eb 99	jmp $99eb		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/stringalloc.asm

.b7b6					StringSystemInitialise:
.b7b6	a9 ff		lda #$ff			lda 	#((EndVariableSpace-1) & $FF)
.b7b8	8d 8e 04	sta $048e			sta 	0+StringMemory
.b7bb	a9 1f		lda #$1f			lda 	#((EndVariableSpace-1) >> 8)
.b7bd	8d 8f 04	sta $048f			sta 	1+StringMemory
.b7c0	9c ff 1f	stz $1fff			stz 	EndVariableSpace-1 			; put a zero at the end, so know end of string memory.
.b7c3	60		rts				rts
.b7c4					StringSpaceInitialise:
.b7c4	20 c0 a2	jsr $a2c0			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.b7c7	a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.b7c9	8d 90 04	sta $0490			sta 	StringInitialised
.b7cc	ad 8e 04	lda $048e			lda 	StringMemory 				; allocate 256 bytes for one concreted string
.b7cf	8d 91 04	sta $0491			sta 	StringTempPointer
.b7d2	ad 8f 04	lda $048f			lda 	StringMemory+1
.b7d5	3a		dec a				dec 	a
.b7d6	8d 92 04	sta $0492			sta 	StringTempPointer+1
.b7d9	60		rts				rts
.b7da					StringTempAllocate:
.b7da	c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.b7dc	b0 35		bcs $b813			bcs 	_STALength
.b7de	2c 90 04	bit $0490			bit 	StringInitialised 			; already initialised
.b7e1	30 05		bmi $b7e8			bmi 	_STAAllocate
.b7e3	48		pha				pha 								; save value to subtract.
.b7e4	20 c4 b7	jsr $b7c4			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.b7e7	68		pla				pla 								; restore it
.b7e8					_STAAllocate:
.b7e8	49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.b7ea	18		clc				clc  								; deliberate allows one more
.b7eb	6d 91 04	adc $0491			adc 	StringTempPointer 			; subtract from temp pointer
.b7ee	8d 91 04	sta $0491			sta 	StringTempPointer
.b7f1	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; address in mantissa
.b7f4	85 3c		sta $3c				sta 	zsTemp 						; and zsTemp
.b7f6	ad 92 04	lda $0492			lda 	StringTempPointer+1
.b7f9	69 ff		adc #$ff			adc 	#$FF
.b7fb	8d 92 04	sta $0492			sta 	StringTempPointer+1
.b7fe	85 3d		sta $3d				sta 	zsTemp+1
.b800	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.b803	9e 18 04	stz $0418,x			stz 	NSMantissa2,x 				; set the typing data
.b806	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.b809	a9 10		lda #$10			lda 	#NSTString
.b80b	9d 00 04	sta $0400,x			sta 	NSStatus,x
.b80e	a9 00		lda #$00			lda 	#0 							; clear the target string
.b810	92 3c		sta ($3c)			sta 	(zsTemp)
.b812	60		rts				rts
.b813					_STALength:
.b813	a9 09		lda #$09		lda	#9
.b815	4c eb 99	jmp $99eb		jmp	ErrorHandler
.b818					StringTempWrite:
.b818	48		pha				pha
.b819	92 3c		sta ($3c)			sta 	(zsTemp)
.b81b	e6 3c		inc $3c				inc 	zsTemp
.b81d	d0 02		bne $b821			bne 	_STWNoCarry
.b81f	e6 3d		inc $3d				inc 	zsTemp+1
.b821					_STWNoCarry:
.b821	a9 00		lda #$00			lda 	#0
.b823	92 3c		sta ($3c)			sta 	(zsTemp)
.b825	68		pla				pla
.b826	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/backload.asm

.a74c					BackloadProgram:
.a74c	a2 ff		ldx #$ff			ldx 	#$FF
.a74e	8e fa ff	stx $fffa			stx 	$FFFA 						; fast mode (autorun only)
.a751	20 7b a7	jsr $a77b			jsr 	BLReadByte
.a754	30 1e		bmi $a774			bmi 	_BPExit
.a756					_BPCopy:
.a756	e8		inx				inx  								; copy byte in
.a757	9d a7 05	sta $05a7,x			sta 	lineBuffer,x
.a75a	9e a8 05	stz $05a8,x			stz 	lineBuffer+1,x
.a75d	20 7b a7	jsr $a77b			jsr 	BLReadByte 					; read next byte
.a760	30 0a		bmi $a76c			bmi 	_BPEndLine 					; -ve = EOL
.a762	c9 09		cmp #$09			cmp 	#9 							; handle TAB
.a764	d0 02		bne $a768			bne 	_BPNotTab
.a766	a9 20		lda #$20			lda 	#' '
.a768					_BPNotTab:
.a768	c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.a76a	b0 ea		bcs $a756			bcs 	_BPCopy
.a76c					_BPEndLine:
.a76c	20 61 ab	jsr $ab61			jsr 	TokeniseLine 				; tokenise the line.
.a76f	20 3a 8b	jsr $8b3a			jsr 	EditProgramCode
.a772	80 d8		bra $a74c			bra 	BackloadProgram
.a774					_BPExit:
.a774	9c fa ff	stz $fffa			stz 	$FFFA 						; clear fast mode (autorun only)
.a777	20 f8 8b	jsr $8bf8			jsr 	ClearCommand 				; clear variables etc.
.a77a	60		rts				rts
.a77b					BLReadByte:
.a77b					_BLLoad:
.a77b	ad 00 30	lda $3000			lda 	$3000 						; hardcoded in the makefile.
.a77e	ee 7c a7	inc $a77c			inc 	_BLLoad+1
.a781	d0 03		bne $a786			bne 	_BLNoCarry
.a783	ee 7d a7	inc $a77d			inc 	_BLLoad+2
.a786					_BLNoCarry:
.a786	c9 00		cmp #$00			cmp 	#0
.a788	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/searchtokens.asm

.a789					TokeniseSearchTable:
.a789	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token.
.a78b	85 36		sta $36				sta 	zTemp0
.a78d	a0 00		ldy #$00			ldy 	#0
.a78f	a9 80		lda #$80			lda 	#$80 						; token #
.a791	85 38		sta $38				sta 	zTemp1
.a793					_TSTLoop:
.a793	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.a795	30 49		bmi $a7e0			bmi 	_TSTFail 					; -ve = end of table
.a797	f0 2e		beq $a7c7			beq 	_TSTNext 					; zero, check next it's a dummy
.a799	c8		iny				iny 								; get the hash
.a79a	b1 36		lda ($36),y			lda 	(zTemp0),y
.a79c	88		dey				dey
.a79d	cd 83 04	cmp $0483			cmp 	identHash 					; check they match, if not go to next
.a7a0	d0 25		bne $a7c7			bne 	_TSTNext
.a7a2	ad 82 04	lda $0482			lda 	identTypeEnd 				; length of identifier
.a7a5	38		sec				sec
.a7a6	ed 80 04	sbc $0480			sbc 	identStart
.a7a9	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; no match, then return.
.a7ab	d0 1a		bne $a7c7			bne 	_TSTNext
.a7ad	5a		phy				phy 								; save Y , we might fail
.a7ae	c8		iny				iny 								; point to text
.a7af	c8		iny				iny
.a7b0	ae 80 04	ldx $0480			ldx 	identStart 					; offset in line buffer in X
.a7b3					_TSTCompareName:
.a7b3	bd a7 05	lda $05a7,x			lda 	lineBuffer,x 				; compare text.
.a7b6	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.a7b8	d0 0c		bne $a7c6			bne 	_TSTNextPullY 				; fail, pullY and do next
.a7ba	e8		inx				inx
.a7bb	c8		iny				iny
.a7bc	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; complete match.
.a7bf	d0 f2		bne $a7b3			bne 	_TSTCompareName
.a7c1	7a		ply				ply 								; throw Y
.a7c2	a5 38		lda $38				lda 	zTemp1 						; get token #
.a7c4	38		sec				sec 								; return with CS = passed.
.a7c5	60		rts				rts
.a7c6					_TSTNextPullY:
.a7c6	7a		ply				ply 								; restore current, fall through.
.a7c7					_TSTNext:
.a7c7	e6 38		inc $38				inc 	zTemp1 						; token counter
.a7c9	98		tya				tya
.a7ca	18		clc				clc
.a7cb	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.a7cd	1a		inc a				inc 	a 							; +1
.a7ce	1a		inc a				inc 	a 							; +2
.a7cf	a8		tay				tay
.a7d0	10 c1		bpl $a793			bpl 	_TSTLoop 					; if Y < $80 loop back
.a7d2	98		tya				tya 								; add Y to zTemp0 and reset Y
.a7d3	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.a7d5	18		clc				clc  								; but have tables > 255 bytes
.a7d6	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.a7d8	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.a7da	90 b7		bcc $a793			bcc 	_TSTLoop
.a7dc	e6 37		inc $37				inc 	zTemp0+1
.a7de	80 b3		bra $a793			bra 	_TSTLoop
.a7e0					_TSTFail:
.a7e0	18		clc				clc
.a7e1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/tokenise.asm


;******  Processing file: ./common/tokeniser/../generated/kwdtext.dat

.a7e2					KeywordSet0:
>a7e2	00 65					.text	0,$65,""               ; $80 !0:EOF
>a7e4	00 58					.text	0,$58,""               ; $81 !1:SH1
>a7e6	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>a7e8	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $83 ABS(
>a7ee	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $84 ALLOC(
>a7f6	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $85 ASC(
>a7fc	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $86 CHR$(
>a803	06 aa 45 56 45 4e 54 28			.text	6,$aa,"EVENT("         ; $87 EVENT(
>a80b	05 6b 46 41 4c 53 45			.text	5,$6b,"FALSE"          ; $88 FALSE
>a812	05 44 46 52 41 43 28			.text	5,$44,"FRAC("          ; $89 FRAC(
>a819	04 0d 48 49 54 28			.text	4,$0d,"HIT("           ; $8a HIT(
>a81f	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $8b INT(
>a825	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $8c ISVAL(
>a82d	05 5c 4a 4f 59 42 28			.text	5,$5c,"JOYB("          ; $8d JOYB(
>a834	05 72 4a 4f 59 58 28			.text	5,$72,"JOYX("          ; $8e JOYX(
>a83b	05 73 4a 4f 59 59 28			.text	5,$73,"JOYY("          ; $8f JOYY(
>a842	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $90 LEFT$(
>a84a	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $91 LEN(
>a850	04 0e 4d 41 58 28			.text	4,$0e,"MAX("           ; $92 MAX(
>a856	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $93 MID$(
>a85d	04 0c 4d 49 4e 28			.text	4,$0c,"MIN("           ; $94 MIN(
>a863	04 19 4e 4f 54 28			.text	4,$19,"NOT("           ; $95 NOT(
>a869	07 e9 52 41 4e 44 4f 4d			.text	7,$e9,"RANDOM("        ; $96 RANDOM(
>a871	28
>a872	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $97 RIGHT$(
>a87a	28
>a87b	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $98 RND(
>a881	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $99 SGN(
>a887	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $9a SPC(
>a88d	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $9b STR$(
>a894	06 a9 54 49 4d 45 52 28			.text	6,$a9,"TIMER("         ; $9c TIMER(
>a89c	04 40 54 52 55 45			.text	4,$40,"TRUE"           ; $9d TRUE
>a8a2	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $9e VAL(
>a8a8	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $9f FOR
>a8ad	02 8f 49 46				.text	2,$8f,"IF"             ; $a0 IF
>a8b1	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $a1 PROC
>a8b7	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $a2 REPEAT
>a8bf	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $a3 WHILE
>a8c6	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $a4 ENDIF
>a8cd	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $a5 ENDPROC
>a8d5	43
>a8d6	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $a6 NEXT
>a8dc	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $a7 THEN
>a8e2	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $a8 UNTIL
>a8e9	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $a9 WEND
>a8ef	02 9b 42 59				.text	2,$9b,"BY"             ; $aa BY
>a8f3	04 1c 43 41 4c 4c			.text	4,$1c,"CALL"           ; $ab CALL
>a8f9	06 b2 43 49 52 43 4c 45			.text	6,$b2,"CIRCLE"         ; $ac CIRCLE
>a901	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $ad CLEAR
>a908	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $ae CLS
>a90d	05 7f 43 4f 4c 4f 52			.text	5,$7f,"COLOR"          ; $af COLOR
>a914	06 d4 43 4f 4c 4f 55 52			.text	6,$d4,"COLOUR"         ; $b0 COLOUR
>a91c	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $b1 DATA
>a922	03 da 44 49 4d				.text	3,$da,"DIM"            ; $b2 DIM
>a927	06 db 44 4f 57 4e 54 4f			.text	6,$db,"DOWNTO"         ; $b3 DOWNTO
>a92f	04 29 45 4c 53 45			.text	4,$29,"ELSE"           ; $b4 ELSE
>a935	04 34 46 52 4f 4d			.text	4,$34,"FROM"           ; $b5 FROM
>a93b	03 e5 47 46 58				.text	3,$e5,"GFX"            ; $b6 GFX
>a940	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $b7 GOSUB
>a947	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $b8 GOTO
>a94d	04 24 48 45 52 45			.text	4,$24,"HERE"           ; $b9 HERE
>a953	05 63 49 4d 41 47 45			.text	5,$63,"IMAGE"          ; $ba IMAGE
>a95a	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $bb LET
>a95f	04 28 4c 49 4e 45			.text	4,$28,"LINE"           ; $bc LINE
>a965	05 6b 4c 4f 43 41 4c			.text	5,$6b,"LOCAL"          ; $bd LOCAL
>a96c	03 db 4f 46 46				.text	3,$db,"OFF"            ; $be OFF
>a971	02 9d 4f 4e				.text	2,$9d,"ON"             ; $bf ON
>a975	07 20 4f 55 54 4c 49 4e			.text	7,$20,"OUTLINE"        ; $c0 OUTLINE
>a97d	45
>a97e	07 0f 50 41 4c 45 54 54			.text	7,$0f,"PALETTE"        ; $c1 PALETTE
>a986	45
>a987	04 3f 50 4c 4f 54			.text	4,$3f,"PLOT"           ; $c2 PLOT
>a98d	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $c3 PRINT
>a994	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $c4 READ
>a99a	04 2e 52 45 43 54			.text	4,$2e,"RECT"           ; $c5 RECT
>a9a0	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $c6 REM
>a9a5	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $c7 RETURN
>a9ad	05 7b 53 4f 4c 49 44			.text	5,$7b,"SOLID"          ; $c8 SOLID
>a9b4	06 d7 53 50 52 49 54 45			.text	6,$d7,"SPRITE"         ; $c9 SPRITE
>a9bc	04 45 54 45 58 54			.text	4,$45,"TEXT"           ; $ca TEXT
>a9c2	02 a3 54 4f				.text	2,$a3,"TO"             ; $cb TO
>a9c6	ff					.text	$FF
.a9c7					KeywordSet1:
>a9c7	00 65					.text	0,$65,""               ; $80 !0:EOF
>a9c9	00 58					.text	0,$58,""               ; $81 !1:SH1
>a9cb	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>a9cd	08 4c 41 53 53 45 4d 42			.text	8,$4c,"ASSEMBLE"       ; $83 ASSEMBLE
>a9d5	4c 45
>a9d7	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $84 ASSERT
>a9df	06 bd 42 49 54 4d 41 50			.text	6,$bd,"BITMAP"         ; $85 BITMAP
>a9e7	03 d7 45 4e 44				.text	3,$d7,"END"            ; $86 END
>a9ec	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $87 LIST
>a9f2	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $88 NEW
>a9f7	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $89 RESTORE
>a9ff	45
>aa00	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $8a RUN
>aa05	07 2a 53 50 52 49 54 45			.text	7,$2a,"SPRITES"        ; $8b SPRITES
>aa0d	53
>aa0e	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $8c STOP
>aa14	ff					.text	$FF
.aa15					KeywordSet2:
>aa15	00 65					.text	0,$65,""               ; $80 !0:EOF
>aa17	00 58					.text	0,$58,""               ; $81 !1:SH1
>aa19	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>aa1b	03 c8 41 44 43				.text	3,$c8,"ADC"            ; $83 ADC
>aa20	03 d3 41 4e 44				.text	3,$d3,"AND"            ; $84 AND
>aa25	03 e0 41 53 4c				.text	3,$e0,"ASL"            ; $85 ASL
>aa2a	03 c8 42 43 43				.text	3,$c8,"BCC"            ; $86 BCC
>aa2f	03 d8 42 43 53				.text	3,$d8,"BCS"            ; $87 BCS
>aa34	03 d8 42 45 51				.text	3,$d8,"BEQ"            ; $88 BEQ
>aa39	03 df 42 49 54				.text	3,$df,"BIT"            ; $89 BIT
>aa3e	03 d8 42 4d 49				.text	3,$d8,"BMI"            ; $8a BMI
>aa43	03 d5 42 4e 45				.text	3,$d5,"BNE"            ; $8b BNE
>aa48	03 de 42 50 4c				.text	3,$de,"BPL"            ; $8c BPL
>aa4d	03 d5 42 52 41				.text	3,$d5,"BRA"            ; $8d BRA
>aa52	03 df 42 52 4b				.text	3,$df,"BRK"            ; $8e BRK
>aa57	03 db 42 56 43				.text	3,$db,"BVC"            ; $8f BVC
>aa5c	03 eb 42 56 53				.text	3,$eb,"BVS"            ; $90 BVS
>aa61	03 d2 43 4c 43				.text	3,$d2,"CLC"            ; $91 CLC
>aa66	03 d3 43 4c 44				.text	3,$d3,"CLD"            ; $92 CLD
>aa6b	03 d8 43 4c 49				.text	3,$d8,"CLI"            ; $93 CLI
>aa70	03 e5 43 4c 56				.text	3,$e5,"CLV"            ; $94 CLV
>aa75	03 e0 43 4d 50				.text	3,$e0,"CMP"            ; $95 CMP
>aa7a	03 eb 43 50 58				.text	3,$eb,"CPX"            ; $96 CPX
>aa7f	03 ec 43 50 59				.text	3,$ec,"CPY"            ; $97 CPY
>aa84	03 cc 44 45 43				.text	3,$cc,"DEC"            ; $98 DEC
>aa89	03 e1 44 45 58				.text	3,$e1,"DEX"            ; $99 DEX
>aa8e	03 e2 44 45 59				.text	3,$e2,"DEY"            ; $9a DEY
>aa93	03 e6 45 4f 52				.text	3,$e6,"EOR"            ; $9b EOR
>aa98	03 da 49 4e 43				.text	3,$da,"INC"            ; $9c INC
>aa9d	03 ef 49 4e 58				.text	3,$ef,"INX"            ; $9d INX
>aaa2	03 f0 49 4e 59				.text	3,$f0,"INY"            ; $9e INY
>aaa7	03 e7 4a 4d 50				.text	3,$e7,"JMP"            ; $9f JMP
>aaac	03 ef 4a 53 52				.text	3,$ef,"JSR"            ; $a0 JSR
>aab1	03 d1 4c 44 41				.text	3,$d1,"LDA"            ; $a1 LDA
>aab6	03 e8 4c 44 58				.text	3,$e8,"LDX"            ; $a2 LDX
>aabb	03 e9 4c 44 59				.text	3,$e9,"LDY"            ; $a3 LDY
>aac0	03 f1 4c 53 52				.text	3,$f1,"LSR"            ; $a4 LSR
>aac5	03 ed 4e 4f 50				.text	3,$ed,"NOP"            ; $a5 NOP
>aaca	03 e2 4f 52 41				.text	3,$e2,"ORA"            ; $a6 ORA
>aacf	03 d9 50 48 41				.text	3,$d9,"PHA"            ; $a7 PHA
>aad4	03 e8 50 48 50				.text	3,$e8,"PHP"            ; $a8 PHP
>aad9	03 f0 50 48 58				.text	3,$f0,"PHX"            ; $a9 PHX
>aade	03 f1 50 48 59				.text	3,$f1,"PHY"            ; $aa PHY
>aae3	03 dd 50 4c 41				.text	3,$dd,"PLA"            ; $ab PLA
>aae8	03 ec 50 4c 50				.text	3,$ec,"PLP"            ; $ac PLP
>aaed	03 f4 50 4c 58				.text	3,$f4,"PLX"            ; $ad PLX
>aaf2	03 f5 50 4c 59				.text	3,$f5,"PLY"            ; $ae PLY
>aaf7	03 ed 52 4f 4c				.text	3,$ed,"ROL"            ; $af ROL
>aafc	03 f3 52 4f 52				.text	3,$f3,"ROR"            ; $b0 ROR
>ab01	03 ef 52 54 49				.text	3,$ef,"RTI"            ; $b1 RTI
>ab06	03 f9 52 54 53				.text	3,$f9,"RTS"            ; $b2 RTS
>ab0b	03 d8 53 42 43				.text	3,$d8,"SBC"            ; $b3 SBC
>ab10	03 db 53 45 43				.text	3,$db,"SEC"            ; $b4 SEC
>ab15	03 dc 53 45 44				.text	3,$dc,"SED"            ; $b5 SED
>ab1a	03 e1 53 45 49				.text	3,$e1,"SEI"            ; $b6 SEI
>ab1f	03 e8 53 54 41				.text	3,$e8,"STA"            ; $b7 STA
>ab24	03 f7 53 54 50				.text	3,$f7,"STP"            ; $b8 STP
>ab29	03 ff 53 54 58				.text	3,$ff,"STX"            ; $b9 STX
>ab2e	03 00 53 54 59				.text	3,$00,"STY"            ; $ba STY
>ab33	03 01 53 54 5a				.text	3,$01,"STZ"            ; $bb STZ
>ab38	03 ed 54 41 58				.text	3,$ed,"TAX"            ; $bc TAX
>ab3d	03 ee 54 41 59				.text	3,$ee,"TAY"            ; $bd TAY
>ab42	03 e8 54 52 42				.text	3,$e8,"TRB"            ; $be TRB
>ab47	03 e9 54 53 42				.text	3,$e9,"TSB"            ; $bf TSB
>ab4c	03 ff 54 53 58				.text	3,$ff,"TSX"            ; $c0 TSX
>ab51	03 ed 54 58 41				.text	3,$ed,"TXA"            ; $c1 TXA
>ab56	03 ff 54 58 53				.text	3,$ff,"TXS"            ; $c2 TXS
>ab5b	03 ee 54 59 41				.text	3,$ee,"TYA"            ; $c3 TYA
>ab60	ff					.text	$FF

;******  Return to file: ./common/tokeniser/tokenise.asm

.ab61					TokeniseLine:
.ab61	20 e9 ac	jsr $ace9			jsr 	FixLineBufferCase 			; fix line case
.ab64	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.ab66	8d a7 04	sta $04a7			sta 	tokenOffset
.ab69	9c a8 04	stz $04a8			stz 	tokenLineNumber
.ab6c	9c a9 04	stz $04a9			stz 	tokenLineNumber+1
.ab6f	a2 ff		ldx #$ff			ldx 	#$FF
.ab71					_TKFindFirst:
.ab71	e8		inx				inx
.ab72	bd a7 05	lda $05a7,x			lda 	lineBuffer,x
.ab75	f0 79		beq $abf0			beq 	_TKExit
.ab77	c9 20		cmp #$20			cmp 	#' '
.ab79	90 f6		bcc $ab71			bcc 	_TKFindFirst
.ab7b	c9 30		cmp #$30			cmp 	#'0'
.ab7d	90 07		bcc $ab86			bcc 	_TKNoLineNumber
.ab7f	c9 3a		cmp #$3a			cmp 	#'9'+1
.ab81	b0 03		bcs $ab86			bcs 	_TKNoLineNumber
.ab83	20 13 ad	jsr $ad13			jsr 	TokeniseExtractLineNumber
.ab86					_TKNoLineNumber:
.ab86					_TKTokeniseLoop:
.ab86	bd a7 05	lda $05a7,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.ab89	f0 65		beq $abf0			beq 	_TKExit
.ab8b	e8		inx				inx
.ab8c	c9 20		cmp #$20			cmp 	#' '
.ab8e	f0 f6		beq $ab86			beq 	_TKTokeniseLoop 			; keep looping if space found.
.ab90	ca		dex				dex 								; undo last get, A contains character, X is position.
.ab91	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.ab93	f0 61		beq $abf6			beq 	_TKTokeniseIdentifier
.ab95	c9 41		cmp #$41			cmp 	#'A'
.ab97	90 04		bcc $ab9d			bcc 	_TKTokenisePunctuation
.ab99	c9 5b		cmp #$5b			cmp 	#'Z'+1
.ab9b	90 59		bcc $abf6			bcc 	_TKTokeniseIdentifier
.ab9d					_TKTokenisePunctuation:
.ab9d	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.ab9f	f0 27		beq $abc8			beq 	_TKString
.aba1	c9 24		cmp #$24			cmp 	#'$'						; hexadecimal constant (# only appears at end of identifiers)
.aba3	f0 28		beq $abcd			beq 	_TKHexConstant
.aba5	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers.
.aba7	f0 29		beq $abd2			beq 	_TKCheckDouble
.aba9	c9 3e		cmp #$3e			cmp 	#'>'
.abab	f0 25		beq $abd2			beq 	_TKCheckDouble
.abad					_TKStandardPunctuation:
.abad	bd a7 05	lda $05a7,x			lda 	lineBuffer,x 				; get it back.
.abb0	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.abb2	90 0e		bcc $abc2			bcc 	_TKNoShift
.abb4	48		pha				pha 								; save
.abb5	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.abb7	85 36		sta $36				sta 	zTemp0
.abb9	68		pla				pla
.abba	29 20		and #$20			and 	#32 						; bit 5
.abbc	4a		lsr a				lsr 	a 							; shift into bit 3
.abbd	4a		lsr a				lsr 	a
.abbe	05 36		ora $36				ora 	zTemp0
.abc0	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.abc2					_TKNoShift:
.abc2	20 58 ad	jsr $ad58			jsr 	TokeniseWriteByte 			; write the punctuation character
.abc5	e8		inx				inx 								; consume the character
.abc6	80 be		bra $ab86			bra 	_TKTokeniseLoop 			; and loop round again.
.abc8					_TKString:
.abc8	20 78 ac	jsr $ac78			jsr 	TokeniseString
.abcb	80 b9		bra $ab86			bra 	_TKTokeniseLoop
.abcd					_TKHexConstant:
.abcd	20 b3 ac	jsr $acb3			jsr 	TokeniseHexConstant
.abd0	80 b4		bra $ab86			bra 	_TKTokeniseLoop
.abd2					_TKCheckDouble:
.abd2	bd a8 05	lda $05a8,x			lda 	lineBuffer+1,x 				; get next character
.abd5	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.abd7	90 d4		bcc $abad			bcc 	_TKStandardPunctuation
.abd9	c9 3f		cmp #$3f			cmp 	#'>'+1
.abdb	b0 d0		bcs $abad			bcs 	_TKStandardPunctuation
.abdd	bd a7 05	lda $05a7,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.abe0	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.abe2	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.abe3	7d a8 05	adc $05a8,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.abe6	38		sec				sec
.abe7	e9 3c		sbc #$3c			sbc 	#'<'
.abe9	20 58 ad	jsr $ad58			jsr 	TokeniseWriteByte 			; this is in the range 0-7
.abec	e8		inx				inx 								; consume both
.abed	e8		inx				inx
.abee	80 96		bra $ab86			bra 	_TKTokeniseLoop
.abf0	a9 80		lda #$80	_TKExit:lda 	#KWC_EOL 					; write end of line byte
.abf2	20 58 ad	jsr $ad58			jsr 	TokeniseWriteByte
.abf5	60		rts				rts
.abf6					_TKTokeniseIdentifier:
.abf6	8e 80 04	stx $0480			stx 	identStart 					; save start
.abf9	9c 84 04	stz $0484			stz 	identTypeByte 				; zero the type byte
.abfc					_TKCheckLoop:
.abfc	e8		inx				inx 								; look at next, we know first is identifier.
.abfd	bd a7 05	lda $05a7,x			lda  	lineBuffer,x
.ac00	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.ac02	f0 f8		beq $abfc			beq 	_TKCheckLoop
.ac04	c9 30		cmp #$30			cmp	 	#"0"
.ac06	90 0c		bcc $ac14			bcc 	_TKEndIdentifier
.ac08	c9 3a		cmp #$3a			cmp 	#"9"+1
.ac0a	90 f0		bcc $abfc			bcc 	_TKCheckLoop
.ac0c	c9 41		cmp #$41			cmp	 	#"A"
.ac0e	90 04		bcc $ac14			bcc 	_TKEndIdentifier
.ac10	c9 5b		cmp #$5b			cmp 	#"Z"+1
.ac12	90 e8		bcc $abfc			bcc 	_TKCheckLoop
.ac14					_TKEndIdentifier:
.ac14	8e 81 04	stx $0481			stx 	identTypeStart 				; save start of type text (if any !)
.ac17	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.ac19	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.ac1b	f0 06		beq $ac23			beq 	_TKHasTypeCharacter
.ac1d	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.ac1f	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.ac21	d0 07		bne $ac2a			bne 	_TKNoTypeCharacter
.ac23					_TKHasTypeCharacter:
.ac23	8c 84 04	sty $0484			sty 	identTypeByte 				; has # or $, save the type
.ac26	e8		inx				inx 								; read next
.ac27	bd a7 05	lda $05a7,x			lda 	lineBuffer,x
.ac2a					_TKNoTypeCharacter:
.ac2a	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.ac2c	d0 09		bne $ac37			bne 	_TKNoArray
.ac2e	e8		inx				inx 								; skip the (
.ac2f	ad 84 04	lda $0484			lda 	identTypeByte 				; set bit 2 (e.g. array)
.ac32	09 04		ora #$04			ora 	#$04
.ac34	8d 84 04	sta $0484			sta 	identTypeByte
.ac37					_TKNoArray:
.ac37	8e 82 04	stx $0482			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.ac3a	20 d4 ac	jsr $acd4			jsr 	TokeniseCalculateHash 		; calculate the has for those tokens
.ac3d	a0 a7		ldy #$a7			ldy 	#(KeywordSet0) >> 8
.ac3f	a9 e2		lda #$e2			lda 	#(KeywordSet0) & $FF
.ac41	20 89 a7	jsr $a789			jsr 	TokeniseSearchTable
.ac44	a2 00		ldx #$00			ldx 	#0
.ac46	b0 1f		bcs $ac67			bcs 	_TKFoundToken
.ac48	a0 a9		ldy #$a9			ldy 	#(KeywordSet1) >> 8
.ac4a	a9 c7		lda #$c7			lda 	#(KeywordSet1) & $FF
.ac4c	20 89 a7	jsr $a789			jsr 	TokeniseSearchTable
.ac4f	a2 81		ldx #$81			ldx 	#$81
.ac51	b0 14		bcs $ac67			bcs 	_TKFoundToken
.ac53	a0 aa		ldy #$aa			ldy 	#(KeywordSet2) >> 8
.ac55	a9 15		lda #$15			lda 	#(KeywordSet2) & $FF
.ac57	20 89 a7	jsr $a789			jsr 	TokeniseSearchTable
.ac5a	a2 82		ldx #$82			ldx 	#$82
.ac5c	b0 09		bcs $ac67			bcs 	_TKFoundToken
.ac5e	20 64 ad	jsr $ad64			jsr 	CheckCreateVariableRecord 	; failed all, it's a variable, create record if does not exist.
.ac61	ae 82 04	ldx $0482			ldx 	identTypeEnd 				; X points to following byte
.ac64	4c 86 ab	jmp $ab86			jmp 	_TKTokeniseLoop 			; and go round again.
.ac67					_TKFoundToken:
.ac67	48		pha				pha 								; save token
.ac68	8a		txa				txa 								; shift in X, is there one ?
.ac69	f0 03		beq $ac6e			beq 	_TKNoTShift
.ac6b	20 58 ad	jsr $ad58			jsr 	TokeniseWriteByte 			; if so, write it out
.ac6e					_TKNoTShift:
.ac6e	68		pla				pla 								; restore and write token
.ac6f	20 58 ad	jsr $ad58			jsr 	TokeniseWriteByte
.ac72	ae 82 04	ldx $0482			ldx 	identTypeEnd 				; X points to following byte
.ac75	4c 86 ab	jmp $ab86			jmp 	_TKTokeniseLoop 			; and go round again.
.ac78					TokeniseString:
.ac78	a9 ff		lda #$ff			lda 	#KWC_STRING 				; string token.
.ac7a	20 58 ad	jsr $ad58			jsr 	TokeniseWriteByte
.ac7d	e8		inx				inx									; start of quoted string.
.ac7e	da		phx				phx 								; push start of string on top
.ac7f	ca		dex				dex
.ac80					_TSFindEnd:
.ac80	e8		inx				inx
.ac81	bd a7 05	lda $05a7,x			lda 	lineBuffer,x 				; next character
.ac84	f0 04		beq $ac8a			beq 	_TSEndOfString
.ac86	c9 22		cmp #$22			cmp 	#'"'
.ac88	d0 f6		bne $ac80			bne 	_TSFindEnd
.ac8a					_TSEndOfString:
.ac8a	7a		ply				ply  								; so now Y is first character, X is character after end.
.ac8b	48		pha				pha 								; save terminating character
.ac8c	20 94 ac	jsr $ac94			jsr 	TOWriteBlockXY 				; write X to Y as a data block
.ac8f	68		pla				pla 								; terminating character
.ac90	f0 01		beq $ac93			beq 	_TSNotQuote					; if it wasn't EOS skip it
.ac92	e8		inx				inx
.ac93					_TSNotQuote:
.ac93	60		rts				rts
.ac94					TOWriteBlockXY:
.ac94	86 36		stx $36				stx 	zTemp0 						; write end character
.ac96	98		tya				tya
.ac97	49 ff		eor #$ff			eor 	#$FF
.ac99	38		sec				sec
.ac9a	65 36		adc $36				adc 	zTemp0
.ac9c	1a		inc a				inc 	a 							; one extra for NULL
.ac9d	20 58 ad	jsr $ad58			jsr 	TokeniseWriteByte
.aca0					_TOBlockLoop:
.aca0	c4 36		cpy $36				cpy 	zTemp0
.aca2	f0 09		beq $acad			beq 	_TOBlockExit
.aca4	b9 a7 05	lda $05a7,y			lda 	lineBuffer,y
.aca7	20 58 ad	jsr $ad58			jsr 	TokeniseWriteByte
.acaa	c8		iny				iny
.acab	80 f3		bra $aca0			bra 	_TOBlockLoop
.acad					_TOBlockExit:
.acad	a9 00		lda #$00			lda 	#0
.acaf	20 58 ad	jsr $ad58			jsr 	TokeniseWriteByte
.acb2	60		rts				rts
.acb3					TokeniseHexConstant:
.acb3	a9 fe		lda #$fe			lda 	#KWC_HEXCONST 				; hex constant token.
.acb5	20 58 ad	jsr $ad58			jsr 	TokeniseWriteByte
.acb8	e8		inx				inx									; start of quoted string.
.acb9	da		phx				phx 								; push start of constant on top
.acba	ca		dex				dex
.acbb					_THFindLoop:
.acbb	e8		inx				inx
.acbc	bd a7 05	lda $05a7,x			lda 	lineBuffer,x
.acbf	c9 30		cmp #$30			cmp 	#"0"
.acc1	90 0c		bcc $accf			bcc 	_THFoundEnd
.acc3	c9 3a		cmp #$3a			cmp 	#"9"+1
.acc5	90 f4		bcc $acbb			bcc 	_THFindLoop
.acc7	c9 41		cmp #$41			cmp 	#"A"
.acc9	90 04		bcc $accf			bcc 	_THFoundEnd
.accb	c9 47		cmp #$47			cmp 	#"F"+1
.accd	90 ec		bcc $acbb			bcc 	_THFindLoop
.accf					_THFoundEnd:
.accf	7a		ply				ply 								; restore start
.acd0	20 94 ac	jsr $ac94			jsr 	TOWriteBlockXY 				; output the block
.acd3	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/utility.asm

.acd4					TokeniseCalculateHash:
.acd4	da		phx				phx
.acd5	ae 80 04	ldx $0480			ldx 	identStart 					; needs to be same as in tokens.py - simple sum
.acd8	a9 00		lda #$00			lda 	#0
.acda					_TCHLoop:
.acda	18		clc				clc
.acdb	7d a7 05	adc $05a7,x			adc 	lineBuffer,x
.acde	e8		inx				inx
.acdf	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.ace2	d0 f6		bne $acda			bne 	_TCHLoop
.ace4	8d 83 04	sta $0483			sta 	identHash 					; save the hash
.ace7	fa		plx				plx
.ace8	60		rts				rts
.ace9					FixLineBufferCase:
.ace9	a2 00		ldx #$00			ldx 	#0
.aceb					_FLBCLoop:
.aceb	bd a7 05	lda $05a7,x			lda 	lineBuffer,x 				; get next character
.acee	f0 22		beq $ad12			beq 	_FLBCExit 					; end of string.
.acf0	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.acf2	f0 11		beq $ad05			beq 	_FLBCInQuotes
.acf4	e8		inx				inx
.acf5	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.acf7	90 f2		bcc $aceb			bcc 	_FLBCLoop
.acf9	c9 7b		cmp #$7b			cmp 	#'z'+1
.acfb	b0 ee		bcs $aceb			bcs 	_FLBCLoop
.acfd	38		sec				sec 								; make U/C
.acfe	e9 20		sbc #$20			sbc 	#32
.ad00	9d a6 05	sta $05a6,x			sta	 	lineBuffer-1,x 				; write back
.ad03	80 e6		bra $aceb			bra 	_FLBCLoop
.ad05					_FLBCInQuotes:
.ad05	e8		inx				inx 								; advance
.ad06	bd a7 05	lda $05a7,x			lda 	lineBuffer,x 				; get next
.ad09	f0 07		beq $ad12			beq 	_FLBCExit 					; exit on EOS
.ad0b	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.ad0d	d0 f6		bne $ad05			bne 	_FLBCInQuotes
.ad0f	e8		inx				inx 								; skip over it
.ad10	80 d9		bra $aceb			bra 	_FLBCLoop
.ad12					_FLBCExit:
.ad12	60		rts				rts
.ad13					TokeniseExtractLineNumber:
.ad13	ad a9 04	lda $04a9			lda 	tokenLineNumber+1 			; push current value on stack
.ad16	48		pha				pha
.ad17	ad a8 04	lda $04a8			lda 	tokenLineNumber
.ad1a	48		pha				pha
.ad1b	20 51 ad	jsr $ad51			jsr 	_TELNTimes2 				; line # x 4
.ad1e	20 51 ad	jsr $ad51			jsr 	_TELNTimes2 				; line # x 2
.ad21	18		clc				clc 								; add stacked value
.ad22	68		pla				pla
.ad23	6d a8 04	adc $04a8			adc 	tokenLineNumber
.ad26	8d a8 04	sta $04a8			sta 	tokenLineNumber
.ad29	68		pla				pla
.ad2a	6d a9 04	adc $04a9			adc 	tokenLineNumber+1
.ad2d	8d a9 04	sta $04a9			sta 	tokenLineNumber+1 			; line # x 5
.ad30	20 51 ad	jsr $ad51			jsr 	_TELNTimes2 				; line # x 10
.ad33	bd a7 05	lda $05a7,x			lda 	lineBuffer,x 				; get and consume character
.ad36	e8		inx				inx
.ad37	29 0f		and #$0f			and 	#15 						; add to line #
.ad39	18		clc				clc
.ad3a	6d a8 04	adc $04a8			adc 	tokenLineNumber
.ad3d	8d a8 04	sta $04a8			sta 	tokenLineNumber
.ad40	90 03		bcc $ad45			bcc 	_TLENNoCarry
.ad42	ee a9 04	inc $04a9			inc 	tokenLineNumber+1
.ad45					_TLENNoCarry:
.ad45	bd a7 05	lda $05a7,x			lda 	lineBuffer,x 				; more digits ?
.ad48	c9 30		cmp #$30			cmp 	#'0'
.ad4a	90 04		bcc $ad50			bcc 	_TLENExit
.ad4c	c9 3a		cmp #$3a			cmp 	#'9'+1
.ad4e	90 c3		bcc $ad13			bcc 	TokeniseExtractLineNumber
.ad50					_TLENExit:
.ad50	60		rts				rts
.ad51					_TELNTimes2:
.ad51	0e a8 04	asl $04a8			asl 	tokenLineNumber
.ad54	2e a9 04	rol $04a9			rol 	tokenLineNumber+1
.ad57	60		rts				rts
.ad58					TokeniseWriteByte:
.ad58	da		phx				phx
.ad59	ae a7 04	ldx $04a7			ldx 	tokenOffset 				; next slot to write to
.ad5c	9d a7 04	sta $04a7,x			sta 	tokenOffset,x 				; write byte out
.ad5f	ee a7 04	inc $04a7			inc 	tokenOffset 				; advance slot.
.ad62	fa		plx				plx
.ad63	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/variablerecord.asm

.ad64					CheckCreateVariableRecord:
.ad64	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.ad66	85 36		sta $36				sta 	0+zTemp0
.ad68	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.ad6a	85 37		sta $37				sta 	1+zTemp0
.ad6c					_CCVSearch:
.ad6c	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.ad6e	f0 2c		beq $ad9c			beq 	_CCVFail
.ad70	a0 01		ldy #$01			ldy 	#1 							; read the hash
.ad72	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.ad74	cd 83 04	cmp $0483			cmp 	identHash
.ad77	d0 16		bne $ad8f			bne 	_CCVNext
.ad79	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.ad7b	ae 80 04	ldx $0480			ldx 	identStart
.ad7e					_CCVCompare:
.ad7e	bd a7 05	lda $05a7,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.ad81	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.ad83	e8		inx				inx 								; advance pointers
.ad84	c8		iny				iny
.ad85	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.ad86	d0 07		bne $ad8f			bne 	_CCVNext  					; didn't match go to next.
.ad88	90 f4		bcc $ad7e			bcc 	_CCVCompare 				; not finished yet.
.ad8a	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; matched whole thing ?
.ad8d	f0 41		beq $add0			beq 	_CCVFound 					; yes, we were successful
.ad8f					_CCVNext:
.ad8f	18		clc				clc
.ad90	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.ad92	65 36		adc $36				adc 	zTemp0
.ad94	85 36		sta $36				sta 	zTemp0
.ad96	90 d4		bcc $ad6c			bcc 	_CCVSearch
.ad98	e6 37		inc $37				inc 	zTemp0+1
.ad9a	80 d0		bra $ad6c			bra 	_CCVSearch
.ad9c					_CCVFail:
.ad9c	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.ad9e	ad 83 04	lda $0483			lda 	identHash
.ada1	91 36		sta ($36),y			sta 	(zTemp0),y
.ada3	c8		iny				iny 								; offset 2 is the type byte
.ada4	ad 84 04	lda $0484			lda 	identTypeByte
.ada7	91 36		sta ($36),y			sta 	(zTemp0),y
.ada9	c8		iny				iny
.adaa					_CCVData:
.adaa	a9 00		lda #$00			lda 	#0 							; erase data 3-7
.adac	91 36		sta ($36),y			sta 	(zTemp0),y
.adae	c8		iny				iny
.adaf	c0 08		cpy #$08			cpy 	#8
.adb1	90 f7		bcc $adaa			bcc 	_CCVData
.adb3	ae 80 04	ldx $0480			ldx 	identStart 					; copy name into 8 on.
.adb6					_CCVCopyName:
.adb6	bd a7 05	lda $05a7,x			lda 	lineBuffer,x
.adb9	91 36		sta ($36),y			sta 	(zTemp0),y
.adbb	e8		inx				inx
.adbc	c8		iny				iny
.adbd	ec 82 04	cpx $0482			cpx 	identTypeEnd
.adc0	d0 f4		bne $adb6			bne 	_CCVCopyName
.adc2	98		tya				tya 								; patch offset
.adc3	92 36		sta ($36)			sta 	(zTemp0)
.adc5	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.adc7	91 36		sta ($36),y			sta 	(zTemp0),y
.adc9	88		dey				dey
.adca	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.adcc	09 80		ora #$80			ora 	#$80
.adce	91 36		sta ($36),y			sta 	(zTemp0),y
.add0					_CCVFound:
.add0	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.add2	38		sec				sec
.add3	e9 10		sbc #$10			sbc 	#(VariableSpace >> 8) 		; offset from the start
.add5	09 40		ora #$40			ora 	#$40 						; make it a writeable token
.add7	20 58 ad	jsr $ad58			jsr 	TokeniseWriteByte
.adda	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.addc	20 58 ad	jsr $ad58			jsr 	TokeniseWriteByte
.addf	60		rts				rts

;******  Return to file: _basic.asm


;******  End of listing
