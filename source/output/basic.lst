
; 64tass Turbo Assembler Macro V1.56.2625 listing file
; 64tass -D AUTORUN=0 -q -b -Wall -c -L output/basic.lst -l output/basic.lbl -Wall -o basic.rom _basic.asm
; Tue Oct 11 07:23:11 2022

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=0					AUTORUN=0

;******  Processing input file: _basic.asm


;******  Processing file: ./common/aa.system/01common.inc

=$30					ZeroPageMandatory = $30
=$400					ZeroPagePreference = $400
=$480					MemoryStorage = $480
=$2000					BasicStart = $2000
=$8000					BasicEnd = $8000
=$8000					CodeStart = $8000
=$1000					VariableSpace = $1000
=$2000					EndVariableSpace = $2000
=8					MathStackSize = 8
=512					BasicStackSize = 512
=3584					BasicStackBase = $1000-BasicStackSize
=80					MaxLineSize = 80

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/04data.inc

.0030					codePtr:
>0030							.fill 	4
.0034					basicStack:
>0034							.fill 	2
.0036					zTemp0:
>0036							.fill 	2
.0038					zTemp1:
>0038							.fill 	2
.003a					zTemp2:
>003a							.fill 	2
.003c					zsTemp:
>003c							.fill 	2
.003e					zaTemp:
>003e							.fill 	2
=$30					safePtr = codePtr 							; minimise direct tinkering
=$80					NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20					NSBIsReference = $20 						; bit 5 : is a reference
=$10					NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18					NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03					NSBRefMask = $03 							; bits 0,1 : Bytes of reference, -1 (e.g. 00 = 1 byte, 11 = 4 bytes)
=$04					NSBIsArray = $04
=$00					NSTInteger = $00 							; base types for bits 3..4
=$08					NSTFloat = $08
=$10					NSTString = $10
=$18					NSTProcedure = $18
.0400					NSStatus:
>0400							.fill 	MathStackSize
.0408					NSMantissa0:
>0408							.fill 	MathStackSize 				; (this is my integer mantissa system)
.0410					NSMantissa1:
>0410							.fill 	MathStackSize
.0418					NSMantissa2:
>0418							.fill 	MathStackSize
.0420					NSMantissa3:
>0420							.fill 	MathStackSize
.0428					NSExponent:
>0428							.fill 	MathStackSize
.0480					identStart:
>0480							.fill 	1
.0481					identTypeStart:
>0481							.fill 	1
.0482					identTypeEnd:
>0482							.fill 	1
.0483					identHash:
>0483							.fill 	1
.0484					identTypeByte:
>0484							.fill 	1	 						; (see tokenising.pdf)
.0485					encodeState:
>0485							.fill 	1
.0486					digitTemp:
>0486							.fill 	1
.0487					decimalCount:
>0487							.fill 	1
.0488					randomSeed:
>0488							.fill 	4
.048c					lowMemPtr:
>048c							.fill 	2
.048e					stringMemory:
>048e							.fill 	2
.0490					stringInitialised:
>0490							.fill 	1
.0491					stringTempPointer:
>0491							.fill 	2
.0493					breakCheck:
>0493							.fill 	1
.0494					decimalPlaces:
>0494							.fill 	1
.0495					dbOffset:
>0495							.fill 	1
.0496					lastParameter:
>0496							.fill 	1
.0497					dataPointer:
>0497							.fill 	5
.049c					inDataStatement:
>049c							.fill 	1
.049d					tbOffset:
>049d							.fill 	1
.049e					AssemblerAddress:
>049e							.fill 	2
.04a0					AssemblerControl:
>04a0							.fill 	1
.04a1					ParamStart:
>04a1							.fill 	2
.04a3					IsGroup1:
>04a3							.fill 	1
.04a4					BaseOpcode:
>04a4							.fill 	1
.04a5					ModeMask:
>04a5							.fill 	1
.04a6					tokenOffset:
>04a6							.fill 	1
.04a7					tokenLineNumber:
>04a7							.fill 	2
.04a9					tokenBuffer:
>04a9							.fill 	253
.05a6					lineBuffer:
>05a6							.fill 	MaxLineSize+1
.05f7					numberBuffer:
>05f7							.fill 	34
.0619					decimalBuffer:
>0619							.fill 	16

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/constants.inc

=$80					AM_ISZP = $80
=$40					AM_ISG1 = $40
=$20					AM_ISG2 = $20
=224					AM_IMMEDIATE = AM_ISZP+AM_ISG1+AM_ISG2+$00
=228					AM_ZEROPAGE = AM_ISZP+AM_ISG1+AM_ISG2+$04
=40					AM_ACC = AM_ISG2+$08
=108					AM_ABS = AM_ISG1+AM_ISG2+$0C
=208					AM_INDY = AM_ISZP+AM_ISG1+$10
=244					AM_ZEROX = AM_ISZP+AM_ISG1+AM_ISG2+$14
=120					AM_ABSY = AM_ISG1+AM_ISG2+$18
=124					AM_ABSX = AM_ISG1+AM_ISG2+$1C
=209					AM_IND = AM_ISZP+AM_ISG1+$11
=$80					AM_ZEROY = AM_ISZP
=$01					AM_INDABS = $01
=$02					AM_INDABSX = $02
=192					AM_INDX = AM_ISZP+AM_ISG1+$00

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/handlers.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.inc

=1					ERRID_BREAK = 1
=2					ERRID_SYNTAX = 2
=3					ERRID_DIVZERO = 3
=4					ERRID_RANGE = 4
=5					ERRID_TYPE = 5
=6					ERRID_MEMORY = 6
=7					ERRID_ARGUMENT = 7
=8					ERRID_STOP = 8
=9					ERRID_STRING = 9
=10					ERRID_ASSERT = 10
=11					ERRID_DATA = 11
=12					ERRID_NOTDONE = 12
=13					ERRID_LINE = 13
=14					ERRID_GOSUB = 14
=15					ERRID_REPEAT = 15
=16					ERRID_WHILE = 16
=17					ERRID_FOR = 17
=18					ERRID_STACK = 18
=19					ERRID_STRUCT = 19
=20					ERRID_PROC = 20
=21					ERRID_REDEFINE = 21
=22					ERRID_ARRAYSIZE = 22
=23					ERRID_ARRAYIDX = 23

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst.inc

=$00					KWD_LESSLESS                         = $00; $00 <<
=$01					KWD_LESSEQUAL                        = $01; $01 <=
=$02					KWD_LESSGREATER                      = $02; $02 <>
=$03					KWD_PLINGPLING3                      = $03; $03 !!3
=$04					KWD_GREATERLESS                      = $04; $04 ><
=$05					KWD_GREATEREQUAL                     = $05; $05 >=
=$06					KWD_GREATERGREATER                   = $06; $06 >>
=$07					KWD_PLINGPLING7                      = $07; $07 !!7
=$08					KWD_PLINGPLING8                      = $08; $08 !!8
=$09					KWD_PLINGPLING9                      = $09; $09 !!9
=$0a					KWD_PLINGPLING10                     = $0a; $0a !!10
=$0b					KWD_PLINGPLING11                     = $0b; $0b !!11
=$0c					KWD_PLINGPLING12                     = $0c; $0c !!12
=$0d					KWD_PLINGPLING13                     = $0d; $0d !!13
=$0e					KWD_PLINGPLING14                     = $0e; $0e !!14
=$0f					KWD_PLINGPLING15                     = $0f; $0f !!15
=$10					KWD_AT                               = $10; $10 @
=$11					KWD_PLINGPLING17                     = $11; $11 !!17
=$12					KWD_PLINGPLING18                     = $12; $12 !!18
=$13					KWD_LSQPAREN                         = $13; $13 [
=$14					KWD_BACKSLASH                        = $14; $14 \
=$15					KWD_RSQPAREN                         = $15; $15 ]
=$16					KWD_HAT                              = $16; $16 ^
=$17					KWD_UNDERSCORE                       = $17; $17 _
=$18					KWD_BQUOTE                           = $18; $18 `
=$19					KWD_PLINGPLING25                     = $19; $19 !!25
=$1a					KWD_PLINGPLING26                     = $1a; $1a !!26
=$1b					KWD_LCURLY                           = $1b; $1b {
=$1c					KWD_BAR                              = $1c; $1c |
=$1d					KWD_RCURLY                           = $1d; $1d }
=$1e					KWD_TILDE                            = $1e; $1e ~
=$21					KWD_PLING                            = $21; $21 !
=$22					KWD_DQUOTE                           = $22; $22 "
=$23					KWD_HASH                             = $23; $23 #
=$24					KWD_DOLLAR                           = $24; $24 $
=$25					KWD_PERCENT                          = $25; $25 %
=$26					KWD_AMPERSAND                        = $26; $26 &
=$27					KWD_QUOTE                            = $27; $27 '
=$28					KWD_LPAREN                           = $28; $28 (
=$29					KWD_RPAREN                           = $29; $29 )
=$2a					KWD_STAR                             = $2a; $2a *
=$2b					KWD_PLUS                             = $2b; $2b +
=$2c					KWD_COMMA                            = $2c; $2c ,
=$2d					KWD_MINUS                            = $2d; $2d -
=$2e					KWD_PERIOD                           = $2e; $2e .
=$2f					KWD_SLASH                            = $2f; $2f /
=$30					KWD_0                                = $30; $30 0
=$31					KWD_1                                = $31; $31 1
=$32					KWD_2                                = $32; $32 2
=$33					KWD_3                                = $33; $33 3
=$34					KWD_4                                = $34; $34 4
=$35					KWD_5                                = $35; $35 5
=$36					KWD_6                                = $36; $36 6
=$37					KWD_7                                = $37; $37 7
=$38					KWD_8                                = $38; $38 8
=$39					KWD_9                                = $39; $39 9
=$3a					KWD_COLON                            = $3a; $3a :
=$3b					KWD_SEMICOLON                        = $3b; $3b ;
=$3c					KWD_LESS                             = $3c; $3c <
=$3d					KWD_EQUAL                            = $3d; $3d =
=$3e					KWD_GREATER                          = $3e; $3e >
=$3f					KWD_QMARK                            = $3f; $3f ?
=$83					KWD_ABSLPAREN                        = $83; $83 ABS(
=$84					KWD_ALLOCLPAREN                      = $84; $84 ALLOC(
=$85					KWD_ASCLPAREN                        = $85; $85 ASC(
=$86					KWD_CHRDOLLARLPAREN                  = $86; $86 CHR$(
=$87					KWD_FALSE                            = $87; $87 FALSE
=$88					KWD_FRACLPAREN                       = $88; $88 FRAC(
=$89					KWD_INTLPAREN                        = $89; $89 INT(
=$8a					KWD_ISVALLPAREN                      = $8a; $8a ISVAL(
=$8b					KWD_LEFTDOLLARLPAREN                 = $8b; $8b LEFT$(
=$8c					KWD_LENLPAREN                        = $8c; $8c LEN(
=$8d					KWD_MIDDOLLARLPAREN                  = $8d; $8d MID$(
=$8e					KWD_NOTLPAREN                        = $8e; $8e NOT(
=$8f					KWD_RANDOMLPAREN                     = $8f; $8f RANDOM(
=$90					KWD_RIGHTDOLLARLPAREN                = $90; $90 RIGHT$(
=$91					KWD_RNDLPAREN                        = $91; $91 RND(
=$92					KWD_SGNLPAREN                        = $92; $92 SGN(
=$93					KWD_SPCLPAREN                        = $93; $93 SPC(
=$94					KWD_STRDOLLARLPAREN                  = $94; $94 STR$(
=$95					KWD_TRUE                             = $95; $95 TRUE
=$96					KWD_VALLPAREN                        = $96; $96 VAL(
=$97					KWD_FOR                              = $97; $97 FOR
=$98					KWD_IF                               = $98; $98 IF
=$99					KWD_PROC                             = $99; $99 PROC
=$9a					KWD_REPEAT                           = $9a; $9a REPEAT
=$9b					KWD_WHILE                            = $9b; $9b WHILE
=$9c					KWD_ENDIF                            = $9c; $9c ENDIF
=$9d					KWD_ENDPROC                          = $9d; $9d ENDPROC
=$9e					KWD_NEXT                             = $9e; $9e NEXT
=$9f					KWD_THEN                             = $9f; $9f THEN
=$a0					KWD_UNTIL                            = $a0; $a0 UNTIL
=$a1					KWD_WEND                             = $a1; $a1 WEND
=$a2					KWD_CALL                             = $a2; $a2 CALL
=$a3					KWD_CLS                              = $a3; $a3 CLS
=$a4					KWD_DATA                             = $a4; $a4 DATA
=$a5					KWD_DIM                              = $a5; $a5 DIM
=$a6					KWD_DOWNTO                           = $a6; $a6 DOWNTO
=$a7					KWD_ELSE                             = $a7; $a7 ELSE
=$a8					KWD_GOSUB                            = $a8; $a8 GOSUB
=$a9					KWD_GOTO                             = $a9; $a9 GOTO
=$aa					KWD_LET                              = $aa; $aa LET
=$ab					KWD_LOCAL                            = $ab; $ab LOCAL
=$ac					KWD_PRINT                            = $ac; $ac PRINT
=$ad					KWD_READ                             = $ad; $ad READ
=$ae					KWD_REM                              = $ae; $ae REM
=$af					KWD_RETURN                           = $af; $af RETURN
=$b0					KWD_TO                               = $b0; $b0 TO

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst0.inc

=$80					KWC_EOL = $80
=$ff					KWC_STRING = $FF
=$fe					KWC_HEXCONST = $FE
=$97					KWC_FIRST_STRUCTURE = $97
=$9c					KWC_FIRST_STRUCTURE_DEC = $9c
=$a1					KWC_LAST_STRUCTURE = $a1
=$83					KWC_FIRST_UNARY = $83
=$96					KWC_LAST_UNARY = $96

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/stack.inc

=$e0					STK_GOSUB = $E0
=$d0					STK_FOR = $D0
=$c0					STK_REPEAT = $C0
=$b0					STK_PROC = $B0
=$a0					STK_WHILE = $A0
=$01					STK_LOCALN = $01
=$02					STK_LOCALS = $02

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/00start.asm

.8000	a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.8002	9a		txs				txs
.8003	a2 80		ldx #$80			ldx 	#(Prompt >> 8) 				; prompt
.8005	a9 1c		lda #$1c			lda 	#(Prompt & $FF)
.8007	20 a2 94	jsr $94a2			jsr 	PrintStringXA
.800a	9c 08 d0	stz $d008			stz 	$D008 						; remove boundary.
.800d	9c 09 d0	stz $d009			stz 	$D009
.8010	20 03 87	jsr $8703			jsr 	RunDemos
.8013	20 85 8e	jsr $8e85			jsr 	NewCommand 					; erase current program
.8016	20 27 a1	jsr $a127			jsr 	BackloadProgram
.8019	4c e1 89	jmp $89e1			jmp 	WarmStart
>801c	0d 0d 2a 2a 2a 20 46 32		Prompt:	.text 	13,13,"*** F256 Junior SuperBASIC ***",13,13
>8024	35 36 20 4a 75 6e 69 6f 72 20 53 75 70 65 72 42
>8034	41 53 49 43 20 2a 2a 2a 0d 0d
>803e	57 72 69 74 74 65 6e 20				.text 	"Written by Paul Robson 2022.",13,13
>8046	62 79 20 50 61 75 6c 20 52 6f 62 73 6f 6e 20 32
>8056	30 32 32 2e 0d 0d

;******  Processing file: ./common/aa.system/../generated/timestamp.asm

>805c	42 75 69 6c 74 20 54 75			.text "Built Tuesday 11-Oct-2022. Build 1309."
>8064	65 73 64 61 79 20 31 31 2d 4f 63 74 2d 32 30 32
>8074	32 2e 20 42 75 69 6c 64 20 31 33 30 39 2e

;******  Return to file: ./common/aa.system/00start.asm

>8082	0d 0d 00					.byte 	13,13,0

;******  Processing file: ./common/aa.system/../../../graphics/_graphics.asm

=1					graphicsIntegrated = 1

;******  Processing file: ./common/aa.system/../../../graphics/./aa.main/aa.data.asm

=3					GXMappingPage = 3
=24					GXSpritePage = 24
=24576					GXMappingAddress = ($2000 * GXMappingPage)
=0					GFXMappingLUT = 0
=11					GFXEditSlot = 8 + GXMappingPage
=$36					gzTemp0 = zTemp0
=$38					gzTemp1 = zTemp1
=$3a					gzTemp2 = zTemp2
=$3c					gsTemp = zsTemp
=$5f7					gxPixelBuffer = numberBuffer
.0629					gxCurrentX:
>0629							.fill 	2
.062b					gxCurrentY:
>062b							.fill 	2
.062d					gxLastX:
>062d							.fill 	2
.062f					gxLastY:
>062f							.fill 	2
.0631					gxX0:
>0631							.fill 	2
.0633					gxY0:
>0633							.fill 	2
.0635					gxX1:
>0635							.fill 	2
.0637					gxY1:
>0637							.fill 	2
.0639					gxBasePage:
>0639							.fill 	1
.063a					gxHeight:
>063a							.fill 	1
.063b					gxMode:
>063b							.fill 	1
.063c					gxColour:
>063c							.fill 	1
.063d					gxEORValue:
>063d							.fill 	1
.063e					gxANDValue:
>063e							.fill 	1
.063f					gxOriginalLUTValue:
>063f							.fill 	1
.0640					gxOriginalMMUSetting:
>0640							.fill 	1
.0641					gsOffset:
>0641							.fill 	1

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./aa.main/main.asm

.8085					GraphicDraw:
.8085	c9 20		cmp #$20			cmp 	#$10*2 						; instructions 00-0F don't use
.8087	b0 06		bcs $808f			bcs 	_GDCoordinate
.8089	86 36		stx $36				stx 	gzTemp0 					; save X/Y
.808b	84 37		sty $37				sty 	gzTemp0+1
.808d	80 2c		bra $80bb			bra 	_GDExecuteA 				; and execute
.808f					_GDCoordinate:
.808f	48		pha				pha 								; save AXY
.8090	da		phx				phx
.8091	5a		phy				phy
.8092	a2 03		ldx #$03			ldx 	#3 							; copy currentX to lastX
.8094					_GDCopy1:
.8094	bd 29 06	lda $0629,x			lda 	gxCurrentX,x
.8097	9d 2d 06	sta $062d,x			sta 	gxLastX,x
.809a	ca		dex				dex
.809b	10 f7		bpl $8094			bpl 	_GDCopy1
.809d	68		pla				pla 								; update Y
.809e	8d 2b 06	sta $062b			sta 	gxCurrentY
.80a1	9c 2c 06	stz $062c			stz 	gxCurrentY+1
.80a4	68		pla				pla
.80a5	8d 29 06	sta $0629			sta 	gxCurrentX
.80a8	68		pla				pla 								; get A (command+X.1) back
.80a9	48		pha				pha
.80aa	29 01		and #$01			and 	#1 							; put LSB as MSB of Current.X
.80ac	8d 2a 06	sta $062a			sta 	gxCurrentX+1
.80af	a2 07		ldx #$07			ldx 	#7 							; copy current and last to gxXY/12 work area
.80b1					_GDCopy2:
.80b1	bd 29 06	lda $0629,x			lda 	gxCurrentX,x
.80b4	9d 31 06	sta $0631,x			sta 	gxX0,x
.80b7	ca		dex				dex
.80b8	10 f7		bpl $80b1			bpl 	_GDCopy2
.80ba	68		pla				pla 								; get command back
.80bb					_GDExecuteA:
.80bb	29 fe		and #$fe			and 	#$FE 						; lose LSB
.80bd	aa		tax				tax
.80be	7c c2 80	jmp ($80c2,x)			jmp 	(GDVectors,x)
.80c1					GXMove:
.80c1	60		rts				rts
.80c2					GDVectors:
>80c2							.fill 	2*2 						; $00-$01 	; Open/Close Bitmap/Sprites
>80c6	60 82						.word 	GXClearBitmap 				; $02 	  	: Clear Bitmap to X
>80c8	ee 80						.word 	GXSetColourMode 			; $03 		; Set colour and drawing mode
>80ca	42 85						.word 	GXFontHandler 				; $04 		; Draw from font
>80cc	8a 85						.word 	GXSpriteHandler 			; $05 		; Draw from sprite
>80ce							.fill 	10*2 						; $06-$0F 	: Reserved
>80e2	c1 80						.word 	GXMove 						; $10     	: Move (does nothing other than update coords)
>80e4	aa 82						.word 	GXLine 						; $11 		: Draw line
>80e6	d7 83						.word 	GXFrameRectangle 			; $12 		; Framed rectangle
>80e8	d4 83						.word 	GXFillRectangle 			; $13 		; Filled rectangle
>80ea	1f 81						.word 	GXFrameCircle 				; $14 		; Framed circle
>80ec	1b 81						.word 	GXFillCircle 				; $15 		; Filled circle
.80ee					GXSetColourMode:
.80ee	a6 36		ldx $36				ldx 	gzTemp0
.80f0	8e 3c 06	stx $063c			stx 	gxColour 								; set colour
.80f3	a5 37		lda $37				lda 	gzTemp0+1 								;
.80f5	8d 3b 06	sta $063b			sta 	gxMode 									; set mode
.80f8	29 03		and #$03			and 	#3 										; only interested in bits 0-3
.80fa	9c 3e 06	stz $063e			stz 	gxANDValue 								; initially AND with 0, and EOR with Colour
.80fd	ae 3c 06	ldx $063c			ldx 	gxColour
.8100	8e 3d 06	stx $063d			stx 	gxEORValue
.8103	c9 02		cmp #$02			cmp 	#2 										; if mode 2/3 And with colour
.8105	90 03		bcc $810a			bcc 	_GXSDCNotAndColour
.8107	8e 3e 06	stx $063e			stx 	gxANDValue
.810a					_GXSDCNotAndColour:
.810a	d0 03		bne $810f			bne 	_GXSDCNotAnd 							; mode 2, Don't EOR with colour
.810c	9c 3d 06	stz $063d			stz 	gxEORValue
.810f					_GXSDCNotAnd:
.810f	4a		lsr a				lsr 	a 										; if bit 0 set, 1's complement AND value
.8110	90 08		bcc $811a			bcc 	_GXSDCNoFlip
.8112	ad 3e 06	lda $063e			lda	 	gxANDValue
.8115	49 ff		eor #$ff			eor 	#$FF
.8117	8d 3e 06	sta $063e			sta 	gxANDValue
.811a					_GXSDCNoFlip:
.811a	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/circle.asm

.811b					GXFillCircle:
.811b	a9 ff		lda #$ff			lda 	#255
.811d	80 02		bra $8121			bra 	GXCircle
.811f					GXFrameCircle:
.811f	a9 00		lda #$00			lda 	#0
.8121					GXCircle:
.8121	8d 45 06	sta $0645			sta 	gIsFillMode					; save Fill flag
.8124	20 c2 86	jsr $86c2			jsr 	GXSortXY 					; topleft/bottomright
.8127	20 f7 85	jsr $85f7			jsr 	GXOpenBitmap 				; start drawing
.812a	20 19 82	jsr $8219			jsr 	GXCircleSetup 				; set up for drawing
.812d	9c 46 06	stz $0646			stz 	gYChanged
.8130					_GXCircleDraw:
.8130	ad 43 06	lda $0643			lda 	gX 							; while x <= y
.8133	cd 44 06	cmp $0644			cmp 	gY
.8136	90 09		bcc $8141			bcc 	_GXCircleContinue
.8138	d0 03		bne $813d			bne 	_GXNoLast
.813a	20 4c 81	jsr $814c			jsr 	GXPlot1
.813d					_GXNoLast:
.813d	20 08 86	jsr $8608			jsr 	GXCloseBitmap 				; close the bitmap
.8140	60		rts				rts
.8141					_GXCircleContinue:
.8141	20 49 81	jsr $8149			jsr 	GXPlot2 					; draw it
.8144	20 c6 81	jsr $81c6			jsr 	GXCircleMove 				; adjust the coordinates
.8147	80 e7		bra $8130			bra 	_GXCircleDraw
.8149					GXPlot2:
.8149	20 4c 81	jsr $814c			jsr 	GXPlot1 						; plot and swap, fall through does twice
.814c					GXPlot1:
.814c	ad 44 06	lda $0644			lda 	gY 								; if y = 0, don't do it twice (xor)
.814f	f0 03		beq $8154			beq 	_GXPlot1Only
.8151	20 70 81	jsr $8170			jsr 	GXPlot0 						; plot and negate
.8154					_GXPlot1Only:
.8154	20 70 81	jsr $8170			jsr 	GXPlot0 						; twice, undoing negation
.8157	ad 43 06	lda $0643			lda 	gX 								; swap X and Y
.815a	ae 44 06	ldx $0644			ldx	 	gY
.815d	8d 44 06	sta $0644			sta 	gY
.8160	8e 43 06	stx $0643			stx 	gX
.8163	ad 46 06	lda $0646			lda 	gYChanged 						; toggle Y Changed flag
.8166	a9 ff		lda #$ff			lda 	#$FF
.8168	8d 46 06	sta $0646			sta 	gYChanged
.816b	60		rts				rts
.816c	20 70 81	jsr $8170			jsr 	GXPlot0 						; do once
.816f	60		rts				rts
.8170	ad 45 06	lda $0645	GXPlot0:lda 	gIsFillMode 					; outline mode, always draw as X or Y will change
.8173	f0 05		beq $817a			beq 	_GXPlot0Always
.8175	ad 46 06	lda $0646			lda 	gYChanged						; fill mode, only draw if changed.
.8178	f0 2d		beq $81a7			beq 	GXPlot0Exit
.817a					_GXPlot0Always:
.817a	a2 02		ldx #$02			ldx 	#2 								; copy Y1-A => Y0
.817c	ad 44 06	lda $0644			lda 	gY
.817f	20 a8 81	jsr $81a8			jsr 	GXSubCopy
.8182	a2 00		ldx #$00			ldx 	#0 								; copy X1-A => X0,
.8184	ad 43 06	lda $0643			lda 	gX
.8187	20 a8 81	jsr $81a8			jsr 	GXSubCopy
.818a	48		pha				pha 									; save last offset X
.818b	20 15 86	jsr $8615			jsr 	GXPositionCalc 					; calculate position/offset.
.818e	68		pla				pla
.818f	0a		asl a				asl 	a 								; store 2 x last offset in gzTemp0
.8190	85 36		sta $36				sta 	gzTemp0
.8192	64 37		stz $37				stz 	gzTemp0+1
.8194	26 37		rol $37				rol 	gzTemp0+1
.8196	ad 45 06	lda $0645			lda 	gIsFillMode
.8199	69 80		adc #$80			adc 	#128
.819b	20 1f 84	jsr $841f			jsr 	GXDrawLineTemp0 				; routine from Rectangle.
.819e	38		sec				sec 									; GY = -GY
.819f	a9 00		lda #$00			lda 	#0
.81a1	ed 44 06	sbc $0644			sbc 	gY
.81a4	8d 44 06	sta $0644			sta 	gY
.81a7					GXPlot0Exit:
.81a7	60		rts				rts
.81a8					GXSubCopy:
.81a8	85 36		sta $36				sta 	gzTemp0
.81aa	64 37		stz $37				stz 	gzTemp0+1
.81ac	29 80		and #$80			and 	#$80
.81ae	f0 02		beq $81b2			beq 	_GXNoSx
.81b0	c6 37		dec $37				dec 	gzTemp0+1
.81b2					_GXNoSx:
.81b2	38		sec				sec
.81b3	bd 35 06	lda $0635,x			lda 	gXX1,x
.81b6	e5 36		sbc $36				sbc 	gzTemp0
.81b8	9d 31 06	sta $0631,x			sta 	gXX0,x
.81bb	bd 36 06	lda $0636,x			lda 	gXX1+1,x
.81be	e5 37		sbc $37				sbc 	gzTemp0+1
.81c0	9d 32 06	sta $0632,x			sta 	gXX0+1,x
.81c3	a5 36		lda $36				lda 	gzTemp0 						; return A
.81c5	60		rts				rts
.81c6					GXCircleMove:
.81c6	9c 46 06	stz $0646			stz 	gYChanged 					; clear Y changed flag
.81c9	a5 39		lda $39				lda 	gzTemp1+1 					; check sign of D
.81cb	10 0d		bpl $81da			bpl 	_GXEMPositive
.81cd	ee 43 06	inc $0643			inc 	gX 							; X++
.81d0	ad 43 06	lda $0643			lda 	gX
.81d3	20 f9 81	jsr $81f9			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.81d6	a9 06		lda #$06			lda 	#6  						; and add 6
.81d8	80 15		bra $81ef			bra 	_GXEMAddD
.81da					_GXEMPositive:
.81da	ee 43 06	inc $0643			inc 	gX 							; X++
.81dd	ce 44 06	dec $0644			dec 	gy 							; Y--
.81e0	38		sec				sec 								; calculate X-Y
.81e1	ad 43 06	lda $0643			lda 	gX
.81e4	ed 44 06	sbc $0644			sbc 	gY
.81e7	20 f9 81	jsr $81f9			jsr 	_GXAdd4TimesToD 			; add 4 x A to D
.81ea	a9 0a		lda #$0a			lda 	#10  						; and add 10
.81ec	ce 46 06	dec $0646			dec 	gYChanged
.81ef					_GXEMAddD:
.81ef	18		clc				clc
.81f0	65 38		adc $38				adc 	gzTemp1
.81f2	85 38		sta $38				sta 	gzTemp1
.81f4	90 02		bcc $81f8			bcc 	_GXEMNoCarry
.81f6	e6 39		inc $39				inc 	gzTemp1+1
.81f8					_GXEMNoCarry:
.81f8	60		rts				rts
.81f9					_GXAdd4TimesToD:
.81f9	85 36		sta $36				sta 	gzTemp0 					; make 16 bit signed.
.81fb	29 80		and #$80			and 	#$80
.81fd	f0 02		beq $8201			beq 	_GXA4Unsigned
.81ff	a9 ff		lda #$ff			lda 	#$FF
.8201					_GXA4Unsigned:
.8201	85 37		sta $37				sta 	gzTemp0+1
.8203	06 36		asl $36				asl 	gzTemp0  					; x 4
.8205	26 37		rol $37				rol 	gzTemp0+1
.8207	06 36		asl $36				asl 	gzTemp0
.8209	26 37		rol $37				rol 	gzTemp0+1
.820b	18		clc				clc 								; add
.820c	a5 36		lda $36				lda		gzTemp0
.820e	65 38		adc $38				adc 	gzTemp1
.8210	85 38		sta $38				sta 	gzTemp1
.8212	a5 37		lda $37				lda		gzTemp0+1
.8214	65 39		adc $39				adc 	gzTemp1+1
.8216	85 39		sta $39				sta 	gzTemp1+1
.8218	60		rts				rts
.8219					GXCircleSetup:
.8219	38		sec				sec
.821a	ad 37 06	lda $0637			lda 	gxY1
.821d	ed 33 06	sbc $0633			sbc 	gxY0
.8220	4a		lsr a				lsr 	a
.8221	8d 42 06	sta $0642			sta 	gRadius
.8224	a2 00		ldx #$00			ldx 	#0
.8226	20 48 82	jsr $8248			jsr 	_GXCalculateCentre
.8229	a2 02		ldx #$02			ldx 	#2
.822b	20 48 82	jsr $8248			jsr 	_GXCalculateCentre
.822e	9c 43 06	stz $0643			stz 	gX
.8231	ad 42 06	lda $0642			lda 	gRadius
.8234	8d 44 06	sta $0644			sta 	gY
.8237	0a		asl a				asl 	a 							; R x 2
.8238	85 36		sta $36				sta 	gzTemp0
.823a	38		sec				sec
.823b	a9 03		lda #$03			lda 	#3
.823d	e5 36		sbc $36				sbc 	gzTemp0
.823f	85 38		sta $38				sta 	gzTemp1
.8241	a9 00		lda #$00			lda 	#0
.8243	e9 00		sbc #$00			sbc 	#0
.8245	85 39		sta $39				sta 	gzTemp1+1
.8247	60		rts				rts
.8248					_GXCalculateCentre:
.8248	38		sec				sec
.8249	bd 35 06	lda $0635,x			lda 	gxX1,x
.824c	7d 31 06	adc $0631,x			adc 	gXX0,x
.824f	9d 35 06	sta $0635,x			sta 	gXX1,x
.8252	bd 36 06	lda $0636,x			lda 	gXX1+1,x
.8255	7d 32 06	adc $0632,x			adc 	gXX0+1,x
.8258	4a		lsr a				lsr 	a
.8259	9d 36 06	sta $0636,x			sta 	gXX1+1,x
.825c	7e 35 06	ror $0635,x			ror 	gXX1,x
.825f	60		rts				rts
.0642					gRadius:
>0642							.fill 	1
.0643					gX:
>0643							.fill 	1
.0644					gY:
>0644							.fill 	1
.0645					gIsFillMode:
>0645							.fill 	1
.0646					gYChanged:
>0646							.fill  	1

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/clear.asm

=64000					ScreenSize200 = 320 * 200
=76800					ScreenSize240 = 320 * 240
.8260					GXClearBitmap:
.8260	48		pha				pha
.8261	5a		phy				phy
.8262	20 f7 85	jsr $85f7			jsr 	GXOpenBitmap 				; start access
.8265	a0 07		ldy #$07			ldy 	#ScreenSize200 / 8192 		; X is pages to clear
.8267	ad 3a 06	lda $063a			lda 	gxHeight
.826a	c9 c8		cmp #$c8			cmp 	#200 						; 200 ?
.826c	a0 09		ldy #$09			ldy 	#ScreenSize240 / 8192
.826e					_GXCalcLastPage:
.826e	98		tya				tya 								; add to base page
.826f	18		clc				clc
.8270	6d 39 06	adc $0639			adc 	gxBasePage
.8273	85 0b		sta $0b				sta 	GFXEditSlot  				; clear from this page back
.8275					_GXClearAll:
.8275	20 87 82	jsr $8287			jsr 	_GXClearBlock 				; clear 8k block
.8278	c6 0b		dec $0b				dec 	GFXEditSlot  				; back to previous
.827a	a5 0b		lda $0b				lda 	GFXEditSlot
.827c	cd 39 06	cmp $0639			cmp 	gxBasePage 					; until before base page
.827f	b0 f4		bcs $8275			bcs 	_GXClearAll
.8281	20 08 86	jsr $8608			jsr 	GXCloseBitmap	 			; stop access
.8284	7a		ply				ply
.8285	68		pla				pla
.8286	60		rts				rts
.8287					_GXClearBlock:
.8287	a9 00		lda #$00			lda 	#((GXMappingAddress) & $FF)
.8289	85 38		sta $38				sta 	0+gzTemp1
.828b	a9 60		lda #$60			lda 	#((GXMappingAddress) >> 8)
.828d	85 39		sta $39				sta 	1+gzTemp1
.828f					_GXCB0:
.828f	a5 36		lda $36				lda 	gzTemp0
.8291	a0 00		ldy #$00			ldy 	#0
.8293					_GXCB1:
.8293	91 38		sta ($38),y			sta 	(gzTemp1),y
.8295	c8		iny				iny
.8296	91 38		sta ($38),y			sta 	(gzTemp1),y
.8298	c8		iny				iny
.8299	91 38		sta ($38),y			sta 	(gzTemp1),y
.829b	c8		iny				iny
.829c	91 38		sta ($38),y			sta 	(gzTemp1),y
.829e	c8		iny				iny
.829f	d0 f2		bne $8293			bne 	_GXCB1
.82a1	e6 39		inc $39				inc 	gzTemp1+1
.82a3	a5 39		lda $39				lda 	gzTemp1+1
.82a5	c9 80		cmp #$80			cmp	 	#(GXMappingAddress >> 8)+$20
.82a7	d0 e6		bne $828f			bne 	_GXCB0
.82a9	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/line.asm

.82aa					GXLine:
.82aa	20 f7 85	jsr $85f7			jsr 	GXOpenBitmap
.82ad	20 e0 86	jsr $86e0			jsr 	GXSortY						; sort pairs so Y1 >= Y0 e.g. top to bottom.
.82b0	20 75 83	jsr $8375			jsr 	GXLineSetup 				; the calculations in the linescanner constructor
.82b3	20 15 86	jsr $8615			jsr 	GXPositionCalc 				; calculate position/offset.
.82b6					_GXDrawLoop:
.82b6	ac 41 06	ldy $0641			ldy 	gsOffset 					; draw the pixel
.82b9	b1 3c		lda ($3c),y			lda 	(gsTemp),y
.82bb	2d 3e 06	and $063e			and 	gxANDValue
.82be	4d 3d 06	eor $063d			eor 	gxEORValue
.82c1	91 3c		sta ($3c),y			sta 	(gsTemp),y
.82c3	20 d1 82	jsr $82d1			jsr 	GXLineIsComplete 			; is the line complete ?
.82c6	f0 05		beq $82cd			beq 	_GXLExit
.82c8	20 ec 82	jsr $82ec			jsr 	GXLineAdvance 				; code as per advance method
.82cb	80 e9		bra $82b6			bra 	_GXDrawLoop
.82cd					_GXLExit:
.82cd	20 08 86	jsr $8608			jsr 	GXCloseBitmap
.82d0	60		rts				rts
.82d1					GXLineIsComplete:
.82d1	ad 49 06	lda $0649			lda 	GXIsDiffYLarger 			; is dy larger
.82d4	d0 0f		bne $82e5			bne 	_GXLICCompareY 				; if so compare Y1/Y0
.82d6	ad 31 06	lda $0631			lda 	GXX0 						; compare X, LSB and MSB
.82d9	4d 35 06	eor $0635			eor 	GXX1
.82dc	d0 06		bne $82e4			bne 	_GXLICExit
.82de	ad 32 06	lda $0632			lda 	GXX0+1
.82e1	4d 36 06	eor $0636			eor 	GXX1+1
.82e4					_GXLICExit:
.82e4	60		rts				rts
.82e5					_GXLICCompareY:
.82e5	ad 37 06	lda $0637			lda 	GXY1
.82e8	4d 33 06	eor $0633			eor 	GXY0
.82eb	60		rts				rts
.82ec					GXLineAdvance:
.82ec	18		clc				clc 								; add adjust to position
.82ed	ad 4b 06	lda $064b			lda 	GXPosition
.82f0	6d 4c 06	adc $064c			adc 	GXAdjust
.82f3	8d 4b 06	sta $064b			sta 	GXPosition
.82f6	9c 4e 06	stz $064e			stz 	GXAddSelect 				; clear add select flag
.82f9	b0 05		bcs $8300			bcs 	_GXLAOverflow 				; if carry out, overflowed.
.82fb	cd 4d 06	cmp $064d			cmp 	GXTotal 					; if exceeded total
.82fe	90 0a		bcc $830a			bcc 	_GXLANoExtra
.8300					_GXLAOverflow:
.8300	ce 4e 06	dec $064e			dec 	GXAddSelect 				; set addselect to $FF
.8303	38		sec				sec 								; subtract total and write back
.8304	ed 4d 06	sbc $064d			sbc 	GXTotal
.8307	8d 4b 06	sta $064b			sta 	GXPosition
.830a					_GXLANoExtra:
.830a	ad 49 06	lda $0649			lda 	GXIsDiffYLarger
.830d	f0 0d		beq $831c			beq 	_GXDXLarger
.830f	20 6e 83	jsr $836e			jsr 	GXIncrementY
.8312	ad 4e 06	lda $064e			lda 	GXAddSelect
.8315	f0 10		beq $8327			beq 	_GXLAExit
.8317	20 28 83	jsr $8328			jsr 	GXAdjustX
.831a	80 0b		bra $8327			bra 	_GXLAExit
.831c					_GXDXLarger:
.831c	20 28 83	jsr $8328			jsr 	GXAdjustX
.831f	ad 4e 06	lda $064e			lda 	GXAddSelect
.8322	f0 03		beq $8327			beq 	_GXLAExit
.8324	20 6e 83	jsr $836e			jsr 	GXIncrementY
.8327					_GXLAExit:
.8327	60		rts				rts
.8328					GXAdjustX:
.8328	ad 4a 06	lda $064a			lda 	GXDXNegative
.832b	10 25		bpl $8352			bpl 	_GXAXRight
.832d	ad 31 06	lda $0631			lda 	GXX0
.8330	d0 03		bne $8335			bne 	_GXAXNoBorrow
.8332	ce 32 06	dec $0632			dec 	GXX0+1
.8335					_GXAXNoBorrow:
.8335	ce 31 06	dec $0631			dec 	GXX0
.8338	ce 41 06	dec $0641			dec 	gsOffset 					; pixel left
.833b	ad 41 06	lda $0641			lda 	gsOffset
.833e	c9 ff		cmp #$ff			cmp 	#$FF
.8340	d0 0f		bne $8351			bne 	_GXAYExit 					; underflow
.8342	c6 3d		dec $3d				dec 	gsTemp+1 					; borrow
.8344	a5 3d		lda $3d				lda 	gsTemp+1 					; gone off page
.8346	c9 60		cmp #$60			cmp 	#GXMappingAddress >> 8
.8348	b0 07		bcs $8351			bcs 	_GXAYExit
.834a	18		clc				clc
.834b	69 20		adc #$20			adc 	#$20 						; fix up
.834d	85 3d		sta $3d				sta 	gsTemp+1
.834f	c6 0b		dec $0b				dec 	GFXEditSlot 				; back one page
.8351					_GXAYExit:
.8351	60		rts				rts
.8352					_GXAXRight:
.8352	ee 31 06	inc $0631			inc 	GXX0
.8355	d0 03		bne $835a			bne 	_GXAXNoCarry
.8357	ee 32 06	inc $0632			inc 	GXX0+1
.835a					_GXAXNoCarry:
.835a	ee 41 06	inc $0641			inc 	gsOffset 					; pixel right
.835d	d0 0e		bne $836d			bne 	_GXAXExit 					; if not overflowed, exit.
.835f	e6 3d		inc $3d				inc 	gsTemp+1 					; next line
.8361	a5 3d		lda $3d				lda 	gsTemp+1
.8363	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page ?
.8365	90 06		bcc $836d			bcc 	_GXAXExit
.8367	e9 20		sbc #$20			sbc 	#$20 						; fix up
.8369	85 3d		sta $3d				sta 	gsTemp+1
.836b	e6 0b		inc $0b				inc 	GFXEditSlot 				; next page
.836d					_GXAXExit:
.836d	60		rts				rts
.836e					GXIncrementY:
.836e	ee 33 06	inc $0633			inc 	GXY0
.8371	20 6b 86	jsr $866b			jsr 	GXMovePositionDown
.8374	60		rts				rts
.8375					GXLineSetup:
.8375	ad 37 06	lda $0637			lda 	GXY1
.8378	38		sec				sec
.8379	ed 33 06	sbc $0633			sbc 	GXY0
.837c	4a		lsr a				lsr 	a
.837d	8d 48 06	sta $0648			sta 	GXDiffY
.8380	9c 4a 06	stz $064a			stz 	GXDXNegative 				; clear -ve flag
.8383	38		sec				sec
.8384	ad 35 06	lda $0635			lda 	GXX1
.8387	ed 31 06	sbc $0631			sbc 	GXX0
.838a	8d 47 06	sta $0647			sta 	GXDiffX
.838d	ad 36 06	lda $0636			lda 	GXX1+1 						; calculate MSB
.8390	ed 32 06	sbc $0632			sbc 	GXX0+1
.8393	6a		ror a				ror 	a 							; rotate bit into DiffX halving it
.8394	6e 47 06	ror $0647			ror 	GXDiffX
.8397	0a		asl a				asl 	a
.8398	10 0c		bpl $83a6			bpl 	_GDXNotNegative
.839a	a9 00		lda #$00			lda 	#0 							; make absolute value of |dx|
.839c	38		sec				sec
.839d	ed 47 06	sbc $0647			sbc 	GXDiffX
.83a0	8d 47 06	sta $0647			sta 	GXDiffX
.83a3	ce 4a 06	dec $064a			dec 	GXDXNegative 				; -ve flag = $FF.
.83a6					_GDXNotNegative:
.83a6	9c 49 06	stz $0649			stz 	GXIsDiffYLarger 			; clear larger flag
.83a9	ad 48 06	lda $0648			lda 	GXDiffY 					; set adjust and total.
.83ac	8d 4c 06	sta $064c			sta 	GXAdjust
.83af	ad 47 06	lda $0647			lda 	GXDiffX
.83b2	8d 4d 06	sta $064d			sta 	GXTotal
.83b5	ad 48 06	lda $0648			lda 	GXDiffY 					; if dy > dx
.83b8	cd 47 06	cmp $0647			cmp 	GXDiffX
.83bb	90 0f		bcc $83cc			bcc 	_GDXNotLarger
.83bd	ce 49 06	dec $0649			dec 	GXIsDiffYLarger 			; set the dy larger flag
.83c0	ad 47 06	lda $0647			lda 	GXDiffX 					; set adjust and total other way round
.83c3	8d 4c 06	sta $064c			sta 	GXAdjust
.83c6	ad 48 06	lda $0648			lda 	GXDiffY
.83c9	8d 4d 06	sta $064d			sta 	GXTotal
.83cc					_GDXNotLarger:
.83cc	ad 4d 06	lda $064d			lda 	GXTotal
.83cf	4a		lsr a				lsr 	a
.83d0	8d 4b 06	sta $064b			sta 	GXPosition
.83d3	60		rts				rts
.0647					GXDiffX:
>0647							.fill 	1
.0648					GXDiffY:
>0648							.fill 	1
.0649					GXIsDiffYLarger:
>0649							.fill 	1
.064a					GXDXNegative:
>064a							.fill 	1
.064b					GXPosition:
>064b							.fill 	1
.064c					GXAdjust:
>064c							.fill 	1
.064d					GXTotal:
>064d							.fill 	1
.064e					GXAddSelect:
>064e							.fill 	1

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/rect.asm

.83d4					GXFillRectangle:
.83d4	38		sec				sec
.83d5	80 01		bra $83d8			bra 	GXRectangle
.83d7					GXFrameRectangle:
.83d7	18		clc				clc
.83d8					GXRectangle:
.83d8	08		php				php 								; save Fill flag (CS)
.83d9	20 f7 85	jsr $85f7			jsr 	GXOpenBitmap 				; start drawing
.83dc	20 c2 86	jsr $86c2			jsr 	GXSortXY 					; sort both X and Y so top left/bottom right
.83df	20 15 86	jsr $8615			jsr 	GXPositionCalc 				; setup gsTemp, gsOffset and the position.
.83e2	38		sec				sec 								; sec = Draw line
.83e3	20 0c 84	jsr $840c			jsr 	GXDrawLineX1X0 				; draw a line length X1-X0
.83e6	ad 33 06	lda $0633			lda 	gxY0 						; reached end of rectangle ?
.83e9	cd 37 06	cmp $0637			cmp 	gxY1
.83ec	f0 19		beq $8407			beq 	_GXRectangleExit
.83ee					_GXRectLoop:
.83ee	20 6b 86	jsr $866b			jsr 	GXMovePositionDown 			; down one.
.83f1	ee 33 06	inc $0633			inc 	gxY0 						; change Y pos
.83f4	ad 33 06	lda $0633			lda 	gxY0 						; reached last line
.83f7	cd 37 06	cmp $0637			cmp 	gXY1
.83fa	f0 07		beq $8403			beq 	_GXLastLine
.83fc	28		plp				plp 								; get flag back
.83fd	08		php				php
.83fe	20 0c 84	jsr $840c			jsr 	GXDrawLineX1X0 				; draw horizontal line
.8401	80 eb		bra $83ee			bra 	_GXRectLoop
.8403					_GXLastLine:
.8403	38		sec				sec
.8404	20 0c 84	jsr $840c			jsr 	GXDrawLineX1X0
.8407					_GXRectangleExit:
.8407	68		pla				pla 								; throw fill flag.
.8408	20 08 86	jsr $8608			jsr 	GXCloseBitmap 				; stop drawing and exit
.840b	60		rts				rts
.840c					GXDrawLineX1X0:
.840c	08		php				php 								; save solid/either-end
.840d	38		sec				sec
.840e	ad 35 06	lda $0635			lda		gXX1
.8411	ed 31 06	sbc $0631			sbc 	gXX0
.8414	85 36		sta $36				sta 	gzTemp0
.8416	ad 36 06	lda $0636			lda 	gXX1+1
.8419	ed 32 06	sbc $0632			sbc 	gXX0+1
.841c	85 37		sta $37				sta 	gzTemp0+1
.841e	28		plp				plp
.841f					GXDrawLineTemp0:
.841f	a5 3c		lda $3c				lda 	gsTemp 						; push gsTemp, gsOffset and GFXEditSlot on stack
.8421	48		pha				pha
.8422	a5 3d		lda $3d				lda 	gsTemp+1
.8424	48		pha				pha
.8425	ad 41 06	lda $0641			lda 	gsOffset
.8428	48		pha				pha
.8429	a5 0b		lda $0b				lda 	GFXEditSlot
.842b	48		pha				pha
.842c	ac 41 06	ldy $0641			ldy 	gsOffset 					; Y offset
.842f	90 1e		bcc $844f			bcc 	_GXDLTEndPoints 			; if CC draw end points only.
.8431					_GXDLTLine:
.8431	b1 3c		lda ($3c),y			lda 	(gsTemp),y 					; set pixel
.8433	2d 3e 06	and $063e			and 	gxANDValue
.8436	4d 3d 06	eor $063d			eor 	gxEORValue
.8439	91 3c		sta ($3c),y			sta 	(gsTemp),y
.843b	a5 36		lda $36				lda 	gzTemp0 					; decrement counter
.843d	d0 04		bne $8443			bne 	_GXDLTNoBorrow
.843f	c6 37		dec $37				dec 	gzTemp0+1 					; borrow, if goes -ve then exit
.8441	30 2e		bmi $8471			bmi 	_GXDLTExit
.8443					_GXDLTNoBorrow:
.8443	c6 36		dec $36				dec 	gzTemp0
.8445	c8		iny				iny 								; next slot.
.8446	d0 e9		bne $8431			bne 	_GXDLTLine
.8448	e6 3d		inc $3d				inc 	gsTemp+1 					; carry to next
.844a	20 7f 84	jsr $847f			jsr 	GXDLTCheckWrap				; check for new page.
.844d	80 e2		bra $8431			bra 	_GXDLTLine
.844f					_GXDLTEndPoints:
.844f	b1 3c		lda ($3c),y			lda 	(gsTemp),y 					; set pixel
.8451	2d 3e 06	and $063e			and 	gxANDValue
.8454	4d 3d 06	eor $063d			eor 	gxEORValue
.8457	91 3c		sta ($3c),y			sta 	(gsTemp),y
.8459	98		tya				tya 								; advance to right side
.845a	18		clc				clc
.845b	65 36		adc $36				adc 	gzTemp0
.845d	a8		tay				tay
.845e	a5 3d		lda $3d				lda 	gsTemp+1
.8460	65 37		adc $37				adc 	gzTemp0+1
.8462	85 3d		sta $3d				sta 	gsTemp+1
.8464	20 7f 84	jsr $847f			jsr 	GXDLTCheckWrap 			; fix up.
.8467	b1 3c		lda ($3c),y			lda 	(gsTemp),y 					; set pixel on the right
.8469	2d 3e 06	and $063e			and 	gxANDValue
.846c	4d 3d 06	eor $063d			eor 	gxEORValue
.846f	91 3c		sta ($3c),y			sta 	(gsTemp),y
.8471					_GXDLTExit:
.8471	68		pla				pla
.8472	85 0b		sta $0b				sta 	GFXEditSlot
.8474	68		pla				pla
.8475	8d 41 06	sta $0641			sta 	gsOffset
.8478	68		pla				pla
.8479	85 3d		sta $3d				sta 	gsTemp+1
.847b	68		pla				pla
.847c	85 3c		sta $3c				sta 	gsTemp
.847e	60		rts				rts
.847f					GXDLTCheckWrap:
.847f	a5 3d		lda $3d				lda 	gsTemp+1 					; check end of page
.8481	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8)
.8483	90 06		bcc $848b			bcc 	_GXDLTCWExit
.8485	e9 20		sbc #$20			sbc 	#$20 						; fix up
.8487	85 3d		sta $3d				sta 	gsTemp+1
.8489	e6 0b		inc $0b				inc 	GFXEditSlot
.848b					_GXDLTCWExit:
.848b	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/render.asm

.848c					GXDrawGraphicElement:
.848c	8d 4f 06	sta $064f			sta 	gxSize 						; save size
.848f	3a		dec a				dec 	a
.8490	8d 50 06	sta $0650			sta 	gxMask 						; and mask
.8493	9c 54 06	stz $0654			stz 	gxVFlip 					; set the flip bytes
.8496	9c 55 06	stz $0655			stz 	gxHFlip
.8499	2c 56 06	bit $0656			bit 	gxUseMode
.849c	10 03		bpl $84a1			bpl 	_GXNotVertical
.849e	8d 54 06	sta $0654			sta 	gxVFlip
.84a1					_GXNotVertical:
.84a1	50 03		bvc $84a6			bvc 	_GXNotHorizontal
.84a3	8d 55 06	sta $0655			sta 	gxHFlip
.84a6					_GXNotHorizontal:
.84a6	ad 33 06	lda $0633			lda 	gxY0 						; push Y on stack
.84a9	48		pha				pha
.84aa	8c 52 06	sty $0652			sty 	gxAcquireVector+1 			; and acquisition vector
.84ad	8e 51 06	stx $0651			stx 	gxAcquireVector
.84b0	20 f7 85	jsr $85f7			jsr 	gxOpenBitmap 				; open the bitmap.
.84b3	ad 56 06	lda $0656			lda 	gxUseMode 					; scale bits
.84b6	4a		lsr a				lsr 	a
.84b7	4a		lsr a				lsr 	a
.84b8	4a		lsr a				lsr 	a
.84b9	29 07		and #$07			and		#7
.84bb	1a		inc a				inc 	a
.84bc	8d 53 06	sta $0653			sta 	gxScale
.84bf	64 38		stz $38				stz 	gzTemp1						; start first line
.84c1					_GXGELoop:
.84c1	a5 38		lda $38				lda 	gzTemp1 					; current line number to read.
.84c3	4d 54 06	eor $0654			eor 	gxVFlip
.84c6	aa		tax				tax 								; get the Xth line.
.84c7	20 04 85	jsr $8504			jsr 	_GXCallAcquire 				; get that data.
.84ca	ad 53 06	lda $0653			lda 	gxScale 					; do scale identical copies of that line.
.84cd	85 39		sta $39				sta 	gzTemp1+1
.84cf					_GXGELoop2:
.84cf	ad 33 06	lda $0633			lda 	gxY0 						; off screen
.84d2	cd 3a 06	cmp $063a			cmp 	gxHeight
.84d5	b0 10		bcs $84e7			bcs 	_GXDGEExit
.84d7	20 07 85	jsr $8507			jsr 	GXRenderOneLine 			; render line
.84da	c6 39		dec $39				dec 	gzTemp1+1 					; scale times.
.84dc	d0 f1		bne $84cf			bne 	_GXGELoop2
.84de	e6 38		inc $38				inc 	gzTemp1 					; done all lines.
.84e0	a5 38		lda $38				lda 	gzTemp1
.84e2	cd 4f 06	cmp $064f			cmp 	gxSize
.84e5	d0 da		bne $84c1			bne 	_GXGELoop
.84e7					_GXDGEExit:
.84e7	68		pla				pla 								; restore Y for next time
.84e8	8d 33 06	sta $0633			sta 	gxY0
.84eb	ae 53 06	ldx $0653			ldx 	gxScale 					; get scale (1-8)
.84ee					_GXShiftLeft:
.84ee	18		clc				clc
.84ef	ad 4f 06	lda $064f			lda 	gxSize
.84f2	6d 31 06	adc $0631			adc 	gxX0
.84f5	8d 31 06	sta $0631			sta 	gxX0
.84f8	90 03		bcc $84fd			bcc 	_GXSLNoCarry
.84fa	ee 32 06	inc $0632			inc 	gxX0+1
.84fd					_GXSLNoCarry:
.84fd	ca		dex				dex
.84fe	d0 ee		bne $84ee			bne 	_GXShiftLeft
.8500	20 08 86	jsr $8608			jsr 	GXCloseBitmap
.8503	60		rts				rts
.8504					_GXCallAcquire:
.8504	6c 51 06	jmp ($0651)			jmp 	(gxAcquireVector)
.8507					GXRenderOneLine:
.8507	20 15 86	jsr $8615			jsr 	GXPositionCalc 				; calculate position/offset.
.850a	ac 41 06	ldy $0641			ldy 	gsOffset 					; Y contains position.
.850d	64 3a		stz $3a				stz 	gzTemp2 					; do size pixels
.850f					_GXROLLoop1:
.850f	ad 53 06	lda $0653			lda 	gxScale 					; set to do 'scale' times
.8512	85 3b		sta $3b				sta 	gzTemp2+1
.8514					_GXROLLoop2:
.8514	a5 3a		lda $3a				lda 	gzTemp2 					; get current pixel
.8516	4d 55 06	eor $0655			eor 	gxHFlip
.8519	aa		tax				tax 								; read from the pixel buffer
.851a	bd f7 05	lda $05f7,x			lda 	gxPixelBuffer,x
.851d	f0 0a		beq $8529			beq 	_GXZeroPixel 				; don't draw if zero.
.851f	b1 3c		lda ($3c),y			lda 	(gsTemp),y
.8521	2d 3e 06	and $063e			and 	gxANDValue
.8524	5d f7 05	eor $05f7,x			eor 	gxPixelBuffer,x
.8527	91 3c		sta ($3c),y			sta 	(gsTemp),y
.8529					_GXZeroPixel:
.8529	c8		iny				iny 								; advance pointer
.852a	d0 05		bne $8531			bne 	_GXNoShift
.852c	e6 3d		inc $3d				inc 	gsTemp+1 					; carry to next
.852e	20 7f 84	jsr $847f			jsr 	GXDLTCheckWrap				; check for new page.
.8531					_GXNoShift:
.8531	c6 3b		dec $3b				dec 	gzTemp2+1 					; do the inner loop gxScale times.
.8533	d0 df		bne $8514			bne 	_GXROLLoop2
.8535	e6 3a		inc $3a				inc 	gzTemp2 					; next pixel.
.8537	a5 3a		lda $3a				lda 	gzTemp2
.8539	cd 4f 06	cmp $064f			cmp 	gxSize
.853c	d0 d1		bne $850f			bne 	_GXROLLoop1
.853e	ee 33 06	inc $0633			inc 	gxY0
.8541	60		rts				rts
.064f					gxSize:
>064f							.fill 	1
.0650					gxMask:
>0650							.fill 	1
.0651					gxAcquireVector:
>0651							.fill 	2
.0653					gxScale:
>0653							.fill 	1
.0654					gxVFlip:
>0654							.fill 	1
.0655					gxHFlip:
>0655							.fill 	1
.0656					gxUseMode:
>0656							.fill 	1

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/sources/font.asm

.8542					GXFontHandler:
.8542	a5 37		lda $37				lda 	gzTemp0+1 					; eor with mode
.8544	4d 3b 06	eor $063b			eor 	gxMode
.8547	8d 56 06	sta $0656			sta 	gxUseMode
.854a	64 37		stz $37				stz 	gzTemp0+1 					; gzTemp0 is font #
.854c	06 36		asl $36				asl	 	gzTemp0 					; x 2
.854e	26 37		rol $37				rol	 	gzTemp0+1
.8550	06 36		asl $36				asl	 	gzTemp0 					; x 4
.8552	26 37		rol $37				rol	 	gzTemp0+1
.8554	06 36		asl $36				asl	 	gzTemp0 					; x 8
.8556	26 37		rol $37				rol	 	gzTemp0+1
.8558	a5 37		lda $37				lda 	gzTemp0+1 					; put in page C0
.855a	09 c0		ora #$c0			ora 	#$C0
.855c	85 37		sta $37				sta 	gzTemp0+1
.855e	a9 08		lda #$08			lda 	#8 							; size 8x8
.8560	a2 68		ldx #$68			ldx 	#GXGetGraphicDataFont & $FF ; XY = Graphic Data retrieval routine
.8562	a0 85		ldy #$85			ldy 	#GXGetGraphicDataFont >> 8
.8564	20 8c 84	jsr $848c			jsr 	GXDrawGraphicElement
.8567	60		rts				rts
.8568					GXGetGraphicDataFont:
.8568	8a		txa				txa 								; X->Y
.8569	a8		tay				tay
.856a	a6 01		ldx $01				ldx 	1 							; preserve old value
.856c	a9 01		lda #$01			lda 	#1 							; access page 1 (font memory)
.856e	85 01		sta $01				sta 	1
.8570	b1 36		lda ($36),y			lda 	(gzTemp0),y 				; read the font element.
.8572	86 01		stx $01				stx 	1 							; put old value back.
.8574	a2 00		ldx #$00			ldx 	#0 							; do 8 times
.8576					_GXExpand:
.8576	9e f7 05	stz $05f7,x			stz 	gxPixelBuffer,x 			; zero in pixel buffer
.8579	0a		asl a				asl 	a 							; shift bit 7 into C
.857a	90 08		bcc $8584			bcc 	_GXNoPixel
.857c	48		pha				pha 								; if set, set pixel buffer to current colour.
.857d	ad 3c 06	lda $063c			lda 	gxColour
.8580	9d f7 05	sta $05f7,x			sta 	gxPixelBuffer,x
.8583	68		pla				pla
.8584					_GXNoPixel:
.8584	e8		inx				inx 								; do the whole byte.
.8585	e0 08		cpx #$08			cpx 	#8
.8587	d0 ed		bne $8576			bne 	_GXExpand
.8589	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./drawing/sources/sprite.asm

.858a					GXSpriteHandler:
.858a	a5 37		lda $37				lda 	gzTemp0+1 					; eor with mode
.858c	4d 3b 06	eor $063b			eor 	gxMode
.858f	8d 56 06	sta $0656			sta 	gxUseMode
.8592	a9 18		lda #$18			lda 	#GXSpritePage
.8594	8d 57 06	sta $0657			sta 	GXSpriteBasePage
.8597	a6 36		ldx $36				ldx 	gzTemp0 					; sprite #
.8599	da		phx				phx
.859a	20 f7 85	jsr $85f7			jsr 	GXOpenBitmap 				; can access sprite information
.859d	68		pla				pla
.859e	20 86 86	jsr $8686			jsr 	GXFindSprite 				; get the sprite address
.85a1	20 08 86	jsr $8608			jsr 	GXCloseBitmap
.85a4	ad 58 06	lda $0658			lda 	GXSSize 					; return size
.85a7	a2 af		ldx #$af			ldx 	#GXSpriteAcquire & $FF
.85a9	a0 85		ldy #$85			ldy 	#GXSpriteAcquire >> 8
.85ab	20 8c 84	jsr $848c			jsr 	GXDrawGraphicElement
.85ae	60		rts				rts
.85af					GXSpriteAcquire:
.85af	ad 57 06	lda $0657			lda 	GXspriteBasePage			; point to base page
.85b2	85 0b		sta $0b				sta 	GFXEditSlot
.85b4	86 36		stx $36				stx 	zTemp0 						; row number x 1,2,3,4
.85b6	a9 00		lda #$00			lda 	#0
.85b8	ae 59 06	ldx $0659			ldx 	GXSSizeRaw
.85bb					_GXTimesRowNumber:
.85bb	18		clc				clc
.85bc	65 36		adc $36				adc 	zTemp0
.85be	ca		dex				dex
.85bf	10 fa		bpl $85bb			bpl 	_GXTimesRowNumber
.85c1	64 37		stz $37				stz 	gzTemp0+1
.85c3	0a		asl a				asl 	a 							; row x 2,4,6,8
.85c4	26 37		rol $37				rol 	gzTemp0+1
.85c6	0a		asl a				asl 	a 							; row x 4,8,12,16
.85c7	26 37		rol $37				rol 	gzTemp0+1
.85c9	0a		asl a				asl 	a 							; row x 8,16,24,32
.85ca	26 37		rol $37				rol 	gzTemp0+1
.85cc	85 36		sta $36				sta 	gzTemp0
.85ce	18		clc				clc 								; add base address.
.85cf	a5 36		lda $36				lda 	gzTemp0
.85d1	6d 5b 06	adc $065b			adc 	GXSAddress
.85d4	85 36		sta $36				sta 	gzTemp0
.85d6	a5 37		lda $37				lda 	gzTemp0+1
.85d8	6d 5c 06	adc $065c			adc 	GXSAddress+1
.85db					_GXSAFindPage:
.85db	c9 20		cmp #$20			cmp 	#$20 						; on this page
.85dd	90 06		bcc $85e5			bcc 	_GXSAFoundPage
.85df	e9 20		sbc #$20			sbc 	#$20 						; forward one page
.85e1	e6 0b		inc $0b				inc 	GFXEditSlot
.85e3	80 f6		bra $85db			bra 	_GXSAFindPage
.85e5					_GXSAFoundPage:
.85e5	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; physical address of page.
.85e7	85 37		sta $37				sta 	gzTemp0+1 					; gzTemp0 now points to the page
.85e9	a0 00		ldy #$00			ldy 	#0
.85eb					_GXSACopyLoop:
.85eb	b1 36		lda ($36),y			lda 	(gzTemp0),y
.85ed	99 f7 05	sta $05f7,y			sta 	gxPixelBuffer,y
.85f0	c8		iny				iny
.85f1	cc 58 06	cpy $0658			cpy 	GXSSize
.85f4	d0 f5		bne $85eb			bne 	_GXSACopyLoop
.85f6	60		rts				rts
.0657					GXSpriteBasePage:
>0657							.fill 	1

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./utility/access.asm

.85f7					GXOpenBitmap:
.85f7	78		sei				sei 								; no interrupts here
.85f8	a5 00		lda $00				lda 	0 							; save original MMU Control register
.85fa	8d 40 06	sta $0640			sta 	gxOriginalMMUSetting
.85fd	a9 80		lda #$80			lda 	#GFXMappingLUT*16+$80+GFXMappingLUT
.85ff	85 00		sta $00				sta 	0
.8601	a5 0b		lda $0b				lda 	GFXEditSlot 				; Save the original LUT slot value
.8603	8d 3f 06	sta $063f			sta 	gxOriginalLUTValue
.8606	58		cli				cli
.8607	60		rts				rts
.8608					GXCloseBitmap:
.8608	78		sei				sei
.8609	ad 3f 06	lda $063f			lda 	gxOriginalLUTValue 			; restore LUT slot value
.860c	85 0b		sta $0b				sta 	GFXEditSlot
.860e	ad 40 06	lda $0640			lda 	gxOriginalMMUSetting 		; restore MMU Control register
.8611	85 00		sta $00				sta 	0
.8613	58		cli				cli
.8614	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./utility/calculate.asm

.8615					GXPositionCalc:
.8615	a5 36		lda $36				lda 	gzTemp0 					; save temp memory slot
.8617	48		pha				pha
.8618	ad 33 06	lda $0633			lda 	GXY0 						; gsTemp = Y0
.861b	85 3c		sta $3c				sta 	gsTemp
.861d	64 3d		stz $3d				stz 	gsTemp+1
.861f	06 3c		asl $3c				asl 	gsTemp 						; gsTemp = Y0 * 4
.8621	26 3d		rol $3d				rol 	gsTemp+1
.8623	06 3c		asl $3c				asl 	gsTemp
.8625	26 3d		rol $3d				rol 	gsTemp+1
.8627	18		clc				clc 								; gsTemp = Y0 * 5, as it's still in A
.8628	65 3c		adc $3c				adc 	gsTemp
.862a	85 3c		sta $3c				sta 	gsTemp
.862c	90 02		bcc $8630			bcc 	_GXPCNoCarry
.862e	e6 3d		inc $3d				inc 	gsTemp+1
.8630					_GXPCNoCarry:
.8630	06 3c		asl $3c				asl 	gsTemp 						; now Y0 * 10. Needs to be multiplied by another
.8632	26 3d		rol $3d				rol 	gsTemp+1 					; 32. At this point the MSB contains the offset
.8634	a5 3d		lda $3d				lda	 	gsTemp+1 					; so save this in zTemp0 and zero it.
.8636	85 36		sta $36				sta 	gzTemp0
.8638	64 3d		stz $3d				stz 	gsTemp+1
.863a	a9 05		lda #$05			lda 	#5 							; now multiply by 32, this puts this in the range 0..8191
.863c					_GXPCMultiply32:
.863c	06 3c		asl $3c				asl 	gsTemp
.863e	26 3d		rol $3d				rol 	gsTemp+1
.8640	3a		dec a				dec 	a
.8641	d0 f9		bne $863c			bne 	_GXPCMultiply32
.8643	18		clc				clc
.8644	ad 31 06	lda $0631			lda 	GXX0 						; add X to this value, put the result in gsOffset, gsTemp has to be on a page boundary
.8647	65 3c		adc $3c				adc 	gsTemp
.8649	8d 41 06	sta $0641			sta 	gsOffset
.864c	ad 32 06	lda $0632			lda 	GXX0+1
.864f	65 3d		adc $3d				adc 	gsTemp+1
.8651	c9 20		cmp #$20			cmp 	#$20 						; has it overflowed into the next one ?
.8653	90 04		bcc $8659			bcc 	_GXPCNoOverflow
.8655	29 1f		and #$1f			and 	#$1F 						; fix it up
.8657	e6 36		inc $36				inc 	gzTemp0 					; add 1 to the page number
.8659					_GXPCNoOverflow:
.8659	09 60		ora #$60			ora 	#(GXMappingAddress >> 8) 	; make it the address mapped in.
.865b	85 3d		sta $3d				sta 	gsTemp+1
.865d	64 3c		stz $3c				stz 	gsTemp
.865f	18		clc				clc
.8660	a5 36		lda $36				lda 	gzTemp0 					; get the page number
.8662	6d 39 06	adc $0639			adc 	gxBasePage 					; by adding the base page
.8665	85 0b		sta $0b				sta 	GFXEditSlot 				; and map it into memory.
.8667	68		pla				pla
.8668	85 36		sta $36				sta 	gzTemp0
.866a	60		rts				rts
.866b					GXMovePositionDown:
.866b	18		clc				clc 								; add 320 to offset/temp+1
.866c	ad 41 06	lda $0641			lda 	gsOffset
.866f	69 40		adc #$40			adc 	#64
.8671	8d 41 06	sta $0641			sta 	gsOffset
.8674	a5 3d		lda $3d				lda 	gsTemp+1
.8676	69 01		adc #$01			adc 	#1
.8678	85 3d		sta $3d				sta 	gsTemp+1
.867a	c9 80		cmp #$80			cmp 	#((GXMappingAddress+$2000) >> 8) ; on to the next page
.867c	90 07		bcc $8685			bcc 	_GXMPDExit
.867e	38		sec				sec  								; next page
.867f	e9 20		sbc #$20			sbc 	#$20
.8681	85 3d		sta $3d				sta 	gsTemp+1
.8683	e6 0b		inc $0b				inc 	GFXEditSlot
.8685					_GXMPDExit:
.8685	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./utility/find.asm

.8686					GXFindSprite:
.8686	aa		tax				tax
.8687	ad 57 06	lda $0657			lda 	GXSpriteBasePage 			; access the base page of the sprite
.868a	85 0b		sta $0b				sta 	GFXEditSlot
.868c	bd 00 61	lda $6100,x			lda 	GXMappingAddress+256,x 		; MSB
.868f	8d 5c 06	sta $065c			sta 	GXSAddress+1
.8692	bd 00 60	lda $6000,x			lda 	GXMappingAddress,x 			; LSB
.8695	48		pha				pha 								; save twice
.8696	48		pha				pha
.8697	29 03		and #$03			and 	#3 							; get sprite size
.8699	8d 59 06	sta $0659			sta 	GXSSizeRaw 					; save raw (0-3)
.869c	aa		tax				tax
.869d	bd be 86	lda $86be,x			lda 	_GXFXSSTTable,x 			; read sprite size
.86a0	8d 58 06	sta $0658			sta 	GXSSize 					; save (8/16/24/32)
.86a3	68		pla				pla 								; get LUT
.86a4	4a		lsr a				lsr		a
.86a5	4a		lsr a				lsr		a
.86a6	29 03		and #$03			and 	#3
.86a8	8d 5a 06	sta $065a			sta 	GXSLUT
.86ab	68		pla				pla 								; address, neeeds to be x 4
.86ac	29 f0		and #$f0			and 	#$F0
.86ae	8d 5b 06	sta $065b			sta 	GXSAddress
.86b1	0e 5b 06	asl $065b			asl 	GXSAddress
.86b4	2e 5c 06	rol $065c			rol 	GXSAddress+1
.86b7	0e 5b 06	asl $065b			asl 	GXSAddress
.86ba	2e 5c 06	rol $065c			rol 	GXSAddress+1
.86bd	60		rts				rts
.86be					_GXFXSSTTable:
>86be	08 10 18 20					.byte 	8,16,24,32
.0658					GXSSize:
>0658							.fill 	1
.0659					GXSSizeRaw:
>0659							.fill 	1
.065a					GXSLUT:
>065a							.fill 	1
.065b					GXSAddress:
>065b							.fill 	2

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Processing file: ./common/aa.system/../../../graphics/./utility/sort.asm

.86c2					GXSortXY:
.86c2	20 e0 86	jsr $86e0			jsr 	GXSortY 					; will be sorted on Y now
.86c5	ad 31 06	lda $0631			lda 	gxX0 						; compare X0 v X1
.86c8	cd 35 06	cmp $0635			cmp 	gxX1
.86cb	ad 32 06	lda $0632			lda 	gXX0+1
.86ce	ed 36 06	sbc $0636			sbc 	gXX1+1
.86d1	90 0c		bcc $86df			bcc 	_GXSXYExit 					; X0 < X1 exit
.86d3	a2 00		ldx #$00			ldx 	#0 							; swap them over
.86d5	a0 04		ldy #$04			ldy 	#4
.86d7	20 f4 86	jsr $86f4			jsr 	GXSwapXY
.86da	e8		inx				inx
.86db	c8		iny				iny
.86dc	20 f4 86	jsr $86f4			jsr 	GXSwapXY
.86df					_GXSXYExit:
.86df	60		rts				rts
.86e0					GXSortY:
.86e0	ad 33 06	lda $0633			lda 	gxY0 						; if Y0 >= Y1
.86e3	cd 37 06	cmp $0637			cmp 	gxY1
.86e6	90 0b		bcc $86f3			bcc 	_GXSYSorted
.86e8	a2 03		ldx #$03			ldx 	#3 							; swap 3-0
.86ea	a0 07		ldy #$07			ldy 	#7 							; with 4-7
.86ec					_GXSwap1:
.86ec	20 f4 86	jsr $86f4			jsr 	GXSwapXY
.86ef	88		dey				dey
.86f0	ca		dex				dex
.86f1	10 f9		bpl $86ec			bpl 	_GXSwap1
.86f3					_GXSYSorted:
.86f3	60		rts				rts
.86f4					GXSwapXY:
.86f4	bd 31 06	lda $0631,x			lda 	gxX0,x
.86f7	48		pha				pha
.86f8	b9 31 06	lda $0631,y			lda 	gxX0,y
.86fb	9d 31 06	sta $0631,x			sta 	gxX0,x
.86fe	68		pla				pla
.86ff	99 31 06	sta $0631,y			sta 	gxX0,y
.8702	60		rts				rts

;******  Return to file: ./common/aa.system/../../../graphics/_graphics.asm


;******  Return to file: ./common/aa.system/00start.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/grtest.asm

.8703					RunDemos:
.8703	64 01		stz $01				stz 	1
.8705	a9 0f		lda #$0f			lda 	#$0F
.8707	8d 00 d0	sta $d000			sta 	$D000
.870a	a9 01		lda #$01			lda 	#1
.870c	8d 00 d1	sta $d100			sta 	$D100
.870f	9c 01 d1	stz $d101			stz 	$D101
.8712	9c 02 d1	stz $d102			stz 	$D102
.8715	a9 01		lda #$01			lda 	#1
.8717	8d 03 d1	sta $d103			sta 	$D103
.871a	a9 08		lda #$08			lda 	#8
.871c	8d 39 06	sta $0639			sta 	gxBasePage
.871f	a9 f0		lda #$f0			lda 	#240
.8721	8d 3a 06	sta $063a			sta 	gxHeight
.8724					loop:
.8724	a9 04		lda #$04			lda 	#((2)*2)+((($20) >> 8) & 1)
.8726	a2 20		ldx #$20			ldx 	#(($20) & $FF)
.8728	a0 00		ldy #$00			ldy 	#(0)
.872a	20 85 80	jsr $8085			jsr 	GraphicDraw
.872d	a9 06		lda #$06			lda 	#((3)*2)+(((0) >> 8) & 1)
.872f	a2 00		ldx #$00			ldx 	#((0) & $FF)
.8731	a0 00		ldy #$00			ldy 	#(0)
.8733	20 85 80	jsr $8085			jsr 	GraphicDraw
.8736	a9 20		lda #$20			lda 	#((16)*2)+(((10) >> 8) & 1)
.8738	a2 0a		ldx #$0a			ldx 	#((10) & $FF)
.873a	a0 28		ldy #$28			ldy 	#(40)
.873c	20 85 80	jsr $8085			jsr 	GraphicDraw
.873f	a9 0a		lda #$0a			lda 	#((5)*2)+(((2) >> 8) & 1)
.8741	a2 02		ldx #$02			ldx 	#((2) & $FF)
.8743	a0 00		ldy #$00			ldy 	#(0)
.8745	20 85 80	jsr $8085			jsr 	GraphicDraw
.8748	20 b2 9d	jsr $9db2	demo:	jsr 	Random32Bit
.874b	ee 3d 06	inc $063d			inc 	gxEORValue
.874e	a9 20		lda #$20			lda 	#16*2
.8750	ae 88 04	ldx $0488			ldx 	RandomSeed+0
.8753	ac 89 04	ldy $0489			ldy 	RandomSeed+1
.8756	20 85 80	jsr $8085			jsr 	GraphicDraw
.8759	ad 8a 04	lda $048a			lda 	RandomSeed+2
.875c	29 03		and #$03			and 	#3
.875e	c9 03		cmp #$03			cmp 	#3
.8760	f0 e6		beq $8748			beq 	demo
.8762	aa		tax				tax
.8763	ad 8a 04	lda $048a			lda 	RandomSeed+2
.8766	29 c0		and #$c0			and 	#$C0
.8768	a8		tay				tay
.8769	a9 0a		lda #$0a			lda 	#5*2
.876b	20 85 80	jsr $8085			jsr 	GraphicDraw
.876e	ad 3d 06	lda $063d			lda 	gxEORValue
.8771	d0 d5		bne $8748			bne 	demo
.8773	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/assembler.asm

.8774					AssembleGroup1:
.8774	a9 ff		lda #$ff			lda 	#$FF
.8776	8d a5 04	sta $04a5			sta 	ModeMask 					; initialise the mode mask - all for all
.8779	80 02		bra $877d			bra 	AsmGroup12
.877b					AssembleGroup2:
.877b	a5 00		lda $00				lda 	$00
.877d					AsmGroup12:
.877d	8d a3 04	sta $04a3			sta 	IsGroup1 					; save the 'group 1' flag
.8780	68		pla				pla 								; pop the return address to access the information following.
.8781	fa		plx				plx
.8782	20 0b 88	jsr $880b			jsr 	AccessParameters 			; get opcode and save as base
.8785	8d a4 04	sta $04a4			sta 	BaseOpcode
.8788	ad a3 04	lda $04a3			lda 	IsGroup1 					; skip if group 1 as we don't have a complex mask.
.878b	d0 08		bne $8795			bne 	_AG12HaveMask
.878d	a9 02		lda #$02			lda 	#2 							; if group 2 the second parameter is the mask
.878f	20 13 88	jsr $8813			jsr 	GetParameter		 		; e.g. which modes are supported for this operand
.8792	8d a5 04	sta $04a5			sta 	ModeMask
.8795					_AG12HaveMask:
.8795	20 4e 89	jsr $894e			jsr 	TypeAndCalculateOperand 	; get zero page type
.8798	da		phx				phx 								; save found address mode
.8799	20 77 88	jsr $8877			jsr 	AssembleModeX
.879c	fa		plx				plx  								; restore address mode
.879d	b0 0b		bcs $87aa			bcs 	_AG12Exit
.879f	20 ab 87	jsr $87ab			jsr 	PromoteToAbsolute  			; promote ZP to ABS and try that
.87a2	20 77 88	jsr $8877			jsr 	AssembleModeX
.87a5	b0 03		bcs $87aa			bcs 	_AG12Exit
.87a7	4c 68 ad	jmp $ad68			jmp 	SyntaxError 				; can't do either, so must be wrong mode/operand.
.87aa					_AG12Exit:
.87aa	60		rts				rts
.87ab					PromoteToAbsolute:
.87ab	a9 6c		lda #$6c			lda 	#AM_ABS 					; lda xx
.87ad	e0 e4		cpx #$e4			cpx 	#AM_ZEROPAGE
.87af	f0 19		beq $87ca			beq 	_PTADo
.87b1	a9 7c		lda #$7c			lda 	#AM_ABSX 					; lda xx,X
.87b3	e0 f4		cpx #$f4			cpx 	#AM_ZEROX
.87b5	f0 13		beq $87ca			beq 	_PTADo
.87b7	a9 78		lda #$78			lda 	#AM_ABSY 					; lda xx,Y
.87b9	e0 80		cpx #$80			cpx 	#AM_ZEROY
.87bb	f0 0d		beq $87ca			beq 	_PTADo
.87bd	a9 01		lda #$01			lda 	#AM_INDABS 					; lda (xx) (jump)
.87bf	e0 d1		cpx #$d1			cpx 	#AM_IND
.87c1	f0 07		beq $87ca			beq 	_PTADo
.87c3	a9 02		lda #$02			lda 	#AM_INDABSX 				; lda (xx,x) (jump)
.87c5	e0 c0		cpx #$c0			cpx 	#AM_INDX
.87c7	f0 01		beq $87ca			beq 	_PTADo
.87c9	60		rts				rts
.87ca					_PTADo:
.87ca	aa		tax				tax
.87cb	60		rts				rts
.87cc					AssembleGroup3:
.87cc	68		pla				pla 								; get parameters, which is just the opcode.
.87cd	fa		plx				plx
.87ce	20 0b 88	jsr $880b			jsr 	AccessParameters 			; get and output opcode
.87d1	20 23 88	jsr $8823			jsr 	AssemblerWriteByte
.87d4	20 b2 89	jsr $89b2			jsr 	CalculateOperand 			; get a 16 bit operand
.87d7	ad 08 04	lda $0408			lda 	NSMantissa0 				; calculate the offset
.87da	38		sec				sec
.87db	ed 9e 04	sbc $049e			sbc 	AssemblerAddress
.87de	48		pha				pha 								; LSB in A
.87df	ad 10 04	lda $0410			lda 	NSMantissa1
.87e2	ed 9f 04	sbc $049f			sbc 	AssemblerAddress+1
.87e5	aa		tax				tax 								; MSB in X
.87e6	68		pla				pla
.87e7	18		clc				clc 								; $80 to easy check $80-$7F, plus 1 for offset error
.87e8	69 7f		adc #$7f			adc 	#$7F
.87ea	90 01		bcc $87ed			bcc 	_AG3NoCarry
.87ec	e8		inx				inx
.87ed					_AG3NoCarry:
.87ed	38		sec				sec 								; fix back and write out anyways.
.87ee	e9 80		sbc #$80			sbc 	#$80
.87f0	20 23 88	jsr $8823			jsr 	AssemblerWriteByte
.87f3	e0 00		cpx #$00			cpx 	#0 							; was it in range
.87f5	f0 0a		beq $8801			beq 	_AG3Exit
.87f7	ad a0 04	lda $04a0			lda 	AssemblerControl 			; are we allowing bad values ?
.87fa	29 01		and #$01			and 	#1
.87fc	f0 03		beq $8801			beq 	_AG3Exit
.87fe	4c 6d ad	jmp $ad6d			jmp 	RangeError 					; no, branch is out of range
.8801					_AG3Exit:
.8801	60		rts				rts
.8802					AssembleGroup4:
.8802	68		pla				pla 								; pop address
.8803	fa		plx				plx
.8804	20 0b 88	jsr $880b			jsr 	AccessParameters 			; access and get first
.8807	20 23 88	jsr $8823			jsr 	AssemblerWriteByte 			; output it.
.880a	60		rts				rts
.880b					AccessParameters:
.880b	8d a1 04	sta $04a1			sta 	ParamStart
.880e	8e a2 04	stx $04a2			stx 	ParamStart+1
.8811	a9 01		lda #$01			lda 	#1
.8813					GetParameter:
.8813	5a		phy				phy
.8814	a8		tay				tay
.8815	ad a1 04	lda $04a1			lda 	ParamStart
.8818	85 36		sta $36				sta 	zTemp0
.881a	ad a2 04	lda $04a2			lda 	ParamStart+1
.881d	85 37		sta $37				sta 	zTemp0+1
.881f	b1 36		lda ($36),y			lda 	(zTemp0),y
.8821	7a		ply				ply
.8822	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/aswrite.asm

.8823					AssemblerWriteByte:
.8823	48		pha			pha
.8824	ad a0 04	lda $04a0		lda 	AssemblerControl 				; check printing bytes ?
.8827	29 02		and #$02		and 	#2
.8829	f0 1b		beq $8846		beq 	_AWBNoPrint
.882b	ad 9f 04	lda $049f		lda		AssemblerAddress+1 				; print address
.882e	20 61 88	jsr $8861		jsr 	PrintHex
.8831	ad 9e 04	lda $049e		lda		AssemblerAddress
.8834	20 61 88	jsr $8861		jsr 	PrintHex
.8837	a9 20		lda #$20		lda 	#' '
.8839	20 0d af	jsr $af0d		jsr 	EXTPrintCharacter
.883c	68		pla			pla 									; print byte
.883d	48		pha			pha
.883e	20 61 88	jsr $8861		jsr 	PrintHex
.8841	a9 0d		lda #$0d		lda 	#13
.8843	20 0d af	jsr $af0d		jsr 	EXTPrintCharacter
.8846					_AWBNoPrint:
.8846	ad 9e 04	lda $049e		lda		AssemblerAddress				; copy address to zTemp0
.8849	85 36		sta $36			sta 	zTemp0
.884b	ad 9f 04	lda $049f		lda		AssemblerAddress+1
.884e	f0 0e		beq $885e		beq 	_AWBRange
.8850	85 37		sta $37			sta 	zTemp0+1
.8852	68		pla			pla 									; write byte out
.8853	92 36		sta ($36)		sta 	(zTemp0)
.8855	ee 9e 04	inc $049e		inc 	AssemblerAddress 				; bump address
.8858	d0 03		bne $885d		bne 	_AWBNoCarry
.885a	ee 9f 04	inc $049f		inc 	AssemblerAddress+1
.885d					_AWBNoCarry:
.885d	60		rts			rts
.885e					_AWBRange:
.885e	4c 6d ad	jmp $ad6d		jmp 	RangeError
.8861					PrintHex:
.8861	48		pha				pha
.8862	4a		lsr a				lsr 	a
.8863	4a		lsr a				lsr 	a
.8864	4a		lsr a				lsr 	a
.8865	4a		lsr a				lsr 	a
.8866	20 6a 88	jsr $886a			jsr 	_PrintNibble
.8869	68		pla				pla
.886a					_PrintNibble:
.886a	29 0f		and #$0f			and 	#15
.886c	c9 0a		cmp #$0a			cmp 	#10
.886e	90 02		bcc $8872			bcc 	_NoShift
.8870	69 06		adc #$06			adc 	#6
.8872					_NoShift:
.8872	69 30		adc #$30			adc 	#48
.8874	4c 0d af	jmp $af0d			jmp 	EXTPrintCharacter

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/instruction.asm

.8877					AssembleModeX:
.8877	5a		phy				phy
.8878	ad a3 04	lda $04a3			lda 	IsGroup1
.887b	f0 17		beq $8894			beq 	_AMXGroup2
.887d	8a		txa				txa 							; is it in group # 1
.887e	29 40		and #$40			and 	#AM_ISG1
.8880	f0 50		beq $88d2			beq 	_AMXFail 				; no, give up.
.8882	8a		txa				txa 							; get back.
.8883	29 1f		and #$1f			and 	#$1F 					; this is now the offset.
.8885	e0 e0		cpx #$e0			cpx 	#AM_IMMEDIATE 			; if not immediate, we can continue.
.8887	d0 22		bne $88ab			bne 	_AMXHaveInfo
.8889	ad a4 04	lda $04a4			lda 	BaseOpcode 				; cannot store immediate.
.888c	c9 81		cmp #$81			cmp 	#$81
.888e	f0 42		beq $88d2			beq 	_AMXFail
.8890	a9 08		lda #$08			lda 	#8 						; if immediate we use offset 8.
.8892	80 17		bra $88ab			bra 	_AMXHaveInfo 			; odd design decision there.
.8894					_AMXGroup2:
.8894	8a		txa				txa 							; is it in group 2 ?
.8895	29 20		and #$20			and 	#AM_ISG2
.8897	f0 39		beq $88d2			beq 	_AMXFail 				; no, give up.
.8899	8a		txa				txa 							; get the offset into Y
.889a	29 1f		and #$1f			and 	#$1F
.889c	4a		lsr a				lsr 	a 						; make it 0-7.
.889d	4a		lsr a				lsr  	a
.889e	a8		tay				tay
.889f	ad a5 04	lda $04a5			lda 	ModeMask 				; shift the modemask left so you can check it against the requested offset
.88a2					_AMXCheckOkay:
.88a2	0a		asl a				asl 	a 						; shift modemask left enough times to check legitimate.
.88a3	88		dey				dey
.88a4	10 fc		bpl $88a2			bpl 	_AMXCheckOkay
.88a6	90 2a		bcc $88d2			bcc 	_AMXFail 				; not allowed.
.88a8	8a		txa				txa  							; get mask back
.88a9	29 1f		and #$1f			and 	#$1F
.88ab					_AMXHaveInfo:
.88ab	e0 00		cpx #$00			cpx 	#$00 					; does it *require* an 8 bit operand
.88ad	10 05		bpl $88b4			bpl 	_AMXAnySize 			; checking bit 7, the zero page opcode flag.
.88af	ac 10 04	ldy $0410			ldy 	NSMantissa1 			; fail if it is outside range, e.g. the MSB is set.
.88b2	d0 1e		bne $88d2			bne 	_AMXFail
.88b4					_AMXAnySize:
.88b4	18		clc				clc 							; add offset to the base opcode
.88b5	6d a4 04	adc $04a4			adc 	BaseOpcode
.88b8					_AMXOutputCode:
.88b8	20 23 88	jsr $8823			jsr 	AssemblerWriteByte 		; write the opcode out.
.88bb	e0 28		cpx #$28			cpx 	#AM_ACC 				; A mode (e.g. ASL A)
.88bd	f0 10		beq $88cf			beq 	_AMXExit
.88bf	ad 08 04	lda $0408			lda 	NSMantissa0 				; write LSB operand
.88c2	20 23 88	jsr $8823			jsr 	AssemblerWriteByte
.88c5	e0 00		cpx #$00			cpx 	#$00 					; zeropage ?
.88c7	30 06		bmi $88cf			bmi 	_AMXExit
.88c9	ad 10 04	lda $0410			lda 	NSMantissa1 			; write MSB operand
.88cc	20 23 88	jsr $8823			jsr 	AssemblerWriteByte
.88cf					_AMXExit:
.88cf	7a		ply				ply
.88d0	38		sec				sec
.88d1	60		rts				rts
.88d2					_AMXFail:
.88d2	a0 00		ldy #$00			ldy 	#0
.88d4					_AMXCheckOddities:
.88d4	8a		txa				txa
.88d5	d9 fd 88	cmp $88fd,y			cmp 	ExtraOpcode+2,y 		; match address mode
.88d8	d0 16		bne $88f0			bne 	_AMXCONext
.88da	b9 fb 88	lda $88fb,y			lda 	ExtraOpcode+0,y 		; do the base opcodes match
.88dd	cd a4 04	cmp $04a4			cmp 	BaseOpcode
.88e0	d0 0e		bne $88f0			bne 	_AMXCONext
.88e2	e0 00		cpx #$00			cpx 	#$00 					; requires zero page ?
.88e4	10 05		bpl $88eb			bpl 	_AMXCONotZero
.88e6	ad 10 04	lda $0410			lda 	NSMantissa1
.88e9	d0 05		bne $88f0			bne 	_AMXCONext
.88eb					_AMXCONotZero:
.88eb	b9 fc 88	lda $88fc,y			lda 	ExtraOpcode+1,y 		; get new opcode
.88ee	80 c8		bra $88b8			bra 	_AMXOutputCode 			; and assemble it
.88f0					_AMXCONext:
.88f0	c8		iny				iny
.88f1	c8		iny				iny
.88f2	c8		iny				iny
.88f3	b9 fb 88	lda $88fb,y			lda 	ExtraOpcode+0,y 		; end of table
.88f6	d0 dc		bne $88d4			bne 	_AMXCheckOddities
.88f8					_AMXCOFail:
.88f8	7a		ply				ply
.88f9	18		clc				clc
.88fa	60		rts				rts
.88fb					ExtraOpcode:
>88fb	40 6c 01					.byte $40,$6c,AM_INDABS 	; jmp
>88fe	40 7c 02					.byte $40,$7C,AM_INDABSX 	; jmp
>8901	a2 be 78					.byte $a2,$BE,AM_ABSY 		; ldx
>8904	a2 b6 80					.byte $a2,$B6,AM_ZEROY 		; ldx
>8907	82 96 80					.byte $82,$96,AM_ZEROY 		; stx
>890a	e2 1a 28					.byte $e2,$1a,AM_ACC 		; inc
>890d	c2 3a 28					.byte $c2,$3a,AM_ACC 		; dec
>8910	20 89 e0					.byte $20,$89,AM_IMMEDIATE 	; bit
>8913	60 9c 6c					.byte $60,$9c,AM_ABS 		; stz
>8916	60 9e 7c					.byte $60,$9e,AM_ABSX 		; stz
>8919	00						.byte $00

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/label.asm

.891a					LabelHere:
.891a	c8		iny				iny 								; skip .
.891b	a2 00		ldx #$00			ldx 	#0 							; get a term
.891d	20 23 9b	jsr $9b23			jsr 	EvaluateTerm 				; get a term
.8920	ad 00 04	lda $0400			lda 	NSStatus 					; needs to be an integer reference.
.8923	c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.8925	d0 24		bne $894b			bne 	_ALType
.8927	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy reference address to zTemp0
.892a	85 36		sta $36				sta 	zTemp0
.892c	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.892f	85 37		sta $37				sta 	zTemp0+1
.8931	5a		phy				phy 								; copy address in.
.8932	a0 01		ldy #$01			ldy 	#1
.8934	ad 9e 04	lda $049e			lda	 	AssemblerAddress
.8937	92 36		sta ($36)			sta 	(zTemp0)
.8939	ad 9f 04	lda $049f			lda	 	AssemblerAddress+1
.893c	91 36		sta ($36),y			sta 	(zTemp0),y
.893e	c8		iny				iny
.893f	a9 00		lda #$00			lda 	#0
.8941	91 36		sta ($36),y			sta 	(zTemp0),y
.8943	c8		iny				iny
.8944	91 36		sta ($36),y			sta 	(zTemp0),y
.8946	c8		iny				iny
.8947	91 36		sta ($36),y			sta 	(zTemp0),y
.8949	7a		ply				ply
.894a	60		rts				rts
.894b					_ALType:
.894b	4c 72 ad	jmp $ad72			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/operands.asm

.894e					TypeAndCalculateOperand:
.894e	b1 30		lda ($30),y			lda 	(codePtr),y
.8950	a2 28		ldx #$28			ldx 	#AM_ACC 					; ACC if : or EOL
.8952	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.8954	f0 5b		beq $89b1			beq 	_TACOExit
.8956	c9 80		cmp #$80			cmp 	#KWC_EOL
.8958	f0 57		beq $89b1			beq 	_TACOExit
.895a	c8		iny				iny
.895b	a2 e0		ldx #$e0			ldx 	#AM_IMMEDIATE
.895d	c9 23		cmp #$23			cmp 	#KWD_HASH 					; if hash, then immediate - constant.
.895f	f0 51		beq $89b2			beq 	CalculateOperand
.8961	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; if ( then check for indirection
.8963	f0 1f		beq $8984			beq 	_TACOIndirect
.8965	88		dey				dey 								; undo get of first character
.8966	20 b2 89	jsr $89b2			jsr 	CalculateOperand 			; get operand
.8969	b1 30		lda ($30),y			lda 	(codePtr),y
.896b	a2 e4		ldx #$e4			ldx 	#AM_ZEROPAGE 				; if not, try zero page (then absolute)
.896d	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.896f	d0 40		bne $89b1			bne 	_TACOExit
.8971	c8		iny				iny
.8972	20 f9 a6	jsr $a6f9			jsr 	TACOCheckXY 				; extract X,Y or 0 (neither) from the variable.
.8975	a2 f4		ldx #$f4			ldx 	#AM_ZEROX 					; check for X
.8977	c9 58		cmp #$58			cmp 	#'X'
.8979	f0 36		beq $89b1			beq 	_TACOExit
.897b	a2 80		ldx #$80			ldx 	#AM_ZEROY 					; check for Y
.897d	c9 59		cmp #$59			cmp 	#'Y'
.897f	f0 30		beq $89b1			beq 	_TACOExit
.8981					_TACOSyntax:
.8981	4c 68 ad	jmp $ad68			jmp 	SyntaxError
.8984					_TACOIndirect:
.8984	20 b2 89	jsr $89b2			jsr 	CalculateOperand 			; get the operand
.8987	b1 30		lda ($30),y			lda 	(codePtr),y
.8989	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if , then it must be ,X)
.898b	f0 17		beq $89a4			beq 	_TACOIndX
.898d	20 82 a7	jsr $a782			jsr 	CheckRightBracket  			; otherwise must be ) or ),Y
.8990	b1 30		lda ($30),y			lda 	(codePtr),y
.8992	a2 d1		ldx #$d1			ldx 	#AM_IND
.8994	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not comma then exit with (xx)
.8996	d0 19		bne $89b1			bne 	_TACOExit
.8998	c8		iny				iny
.8999	20 f9 a6	jsr $a6f9			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.899c	c9 59		cmp #$59			cmp 	#'Y' 						; check Y
.899e	d0 e1		bne $8981			bne 	_TACOSyntax
.89a0	a2 d0		ldx #$d0			ldx 	#AM_INDY
.89a2	80 0d		bra $89b1			bra 	_TACOExit
.89a4					_TACOIndX:
.89a4	c8		iny				iny
.89a5	20 f9 a6	jsr $a6f9			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.89a8	c9 58		cmp #$58			cmp 	#'X' 						; check X
.89aa	d0 d5		bne $8981			bne 	_TACOSyntax
.89ac	20 82 a7	jsr $a782			jsr 	CheckRightBracket			; check )
.89af	a2 c0		ldx #$c0			ldx 	#AM_INDX
.89b1					_TACOExit:
.89b1	60		rts				rts
.89b2					CalculateOperand:
.89b2	48		pha				pha
.89b3	da		phx				phx
.89b4	a2 00		ldx #$00			ldx 	#0 							; get 16 bit integer in Slot 0
.89b6	20 8d 9f	jsr $9f8d			jsr 	Evaluate16BitInteger
.89b9	fa		plx				plx
.89ba	68		pla				pla
.89bb	60		rts				rts
.a6f9					TACOCheckXY:
.a6f9	b1 30		lda ($30),y			lda 	(codePtr),y
.a6fb	29 c0		and #$c0			and 	#$C0 						; check it is an identifier reference.
.a6fd	c9 40		cmp #$40			cmp 	#$40
.a6ff	d0 21		bne $a722			bne 	_TCXYFail
.a701	b1 30		lda ($30),y			lda 	(codePtr),y
.a703	18		clc				clc
.a704	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.a706	85 37		sta $37				sta 	zTemp0+1
.a708	c8		iny				iny
.a709	b1 30		lda ($30),y			lda 	(codePtr),y
.a70b	c8		iny				iny
.a70c	85 36		sta $36				sta 	zTemp0
.a70e	5a		phy				phy 								; save position
.a70f	a0 02		ldy #$02			ldy 	#2 							; type is integer ?
.a711	b1 36		lda ($36),y			lda 	(zTemp0),y
.a713	d0 0c		bne $a721			bne 	_TCXYPopFail
.a715	a0 08		ldy #$08			ldy 	#8 							; get first character, should have bit 7 set as also last.
.a717	b1 36		lda ($36),y			lda 	(zTemp0),y
.a719	c9 d8		cmp #$d8			cmp 	#'X'+$80 					; should be X or Y
.a71b	f0 08		beq $a725			beq 	_TCXYFound
.a71d	c9 d9		cmp #$d9			cmp 	#'Y'+$80
.a71f	f0 04		beq $a725			beq 	_TCXYFound
.a721					_TCXYPopFail:
.a721	7a		ply				ply
.a722					_TCXYFail:
.a722	a9 00		lda #$00			lda 	#0
.a724	60		rts				rts
.a725					_TCXYFound:
.a725	7a		ply				ply 								; restore position
.a726	29 7f		and #$7f			and 	#$7F 						; throw bit 7
.a728	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/editor.asm

.89bc					EditProgramCode:
.89bc	ad a7 04	lda $04a7			lda 	TokenLineNumber 			; find the line.
.89bf	ae a8 04	ldx $04a8			ldx 	TokenLineNumber+1
.89c2	20 60 a0	jsr $a060			jsr 	MemorySearch
.89c5	90 05		bcc $89cc			bcc 	_EPCNoDelete 				; reached the end don't delete
.89c7	d0 03		bne $89cc			bne 	_EPCNoDelete 				; found slot but didn't match, no delete
.89c9	20 51 af	jsr $af51			jsr 	MemoryDeleteLine 			; delete the line
.89cc					_EPCNoDelete:
.89cc	ad a9 04	lda $04a9			lda 	TokenBuffer 				; buffer empty
.89cf	c9 80		cmp #$80			cmp 	#KWC_EOL
.89d1	f0 0d		beq $89e0			beq 	_EPCNoInsert
.89d3	ad a7 04	lda $04a7			lda 	TokenLineNumber 			; find the line - it cannot exist.
.89d6	ae a8 04	ldx $04a8			ldx 	TokenLineNumber+1 			; so this can't fail, it returns some point in the code.
.89d9	20 60 a0	jsr $a060			jsr 	MemorySearch
.89dc	18		clc				clc 								; insert at this point.
.89dd	20 88 af	jsr $af88			jsr 	MemoryInsertLine 			; insert the line
.89e0					_EPCNoInsert:
.89e0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/warmstart.asm

.89e1					WarmStart:
.89e1	a2 ff		ldx #$ff			ldx 	#$FF
.89e3	9a		txs				txs
.89e4	20 23 af	jsr $af23			jsr 	EXTInputLine 				; get line to lineBuffer
.89e7	20 7a a4	jsr $a47a			jsr 	TokeniseLine 				; tokenise the line
.89ea	ad a7 04	lda $04a7			lda 	TokenLineNumber 			; line number ?
.89ed	0d a8 04	ora $04a8			ora 	TokenLineNumber+1
.89f0	d0 17		bne $8a09			bne 	_WSEditCode 				; if so,edit code.
.89f2	9c a6 04	stz $04a6			stz 	TokenOffset 				; zero offset, meaning it only runs one line.
.89f5	a9 a6		lda #$a6			lda 	#((TokenOffset) & $FF)
.89f7	85 30		sta $30				sta 	codePtr
.89f9	a9 04		lda #$04			lda 	#((TokenOffset) >> 8)
.89fb	85 31		sta $31				sta 	codePtr+1
.89fd	ad a9 04	lda $04a9			lda 	TokenBuffer 				; nothing to run
.8a00	c9 80		cmp #$80			cmp 	#KWC_EOL
.8a02	f0 dd		beq $89e1			beq 	WarmStart
.8a04	20 12 90	jsr $9012			jsr 	RUNCodePointerLine 			; execute that line.
.8a07	80 d8		bra $89e1			bra 	WarmStart
.8a09					_WSEditCode:
.8a09	20 bc 89	jsr $89bc			jsr 	EditProgramCode
.8a0c	20 7a 8a	jsr $8a7a			jsr 	ClearCommand
.8a0f	80 d0		bra $89e1			bra 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assemble.asm

.8a11					AssembleCommand:
.8a11	a2 00		ldx #$00			ldx 	#0
.8a13	20 8d 9f	jsr $9f8d			jsr 	Evaluate16BitInteger 		; start address
.8a16	ad 08 04	lda $0408			lda 	NSMantissa0
.8a19	8d 9e 04	sta $049e			sta 	AssemblerAddress
.8a1c	ad 10 04	lda $0410			lda 	NSMantissa1
.8a1f	8d 9f 04	sta $049f			sta 	AssemblerAddress+1
.8a22	20 8a a7	jsr $a78a			jsr 	CheckComma
.8a25	20 99 9f	jsr $9f99			jsr 	Evaluate8BitInteger 		; options
.8a28	ad 08 04	lda $0408			lda 	NSMantissa0
.8a2b	8d a0 04	sta $04a0			sta 	AssemblerControl
.8a2e	60		rts				rts
.8a2f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assert.asm

.8a30					AssertCommand:
.8a30	a2 00		ldx #$00			ldx 	#0
.8a32	20 78 9f	jsr $9f78			jsr 	EvaluateInteger 			; the assert test
.8a35	20 31 a0	jsr $a031			jsr 	NSMIsZero 					; exit if result is non zero.
.8a38	d0 05		bne $8a3f			bne 	_ACExit
.8a3a	a9 0a		lda #$0a		lda	#10
.8a3c	4c 49 94	jmp $9449		jmp	ErrorHandler
.8a3f					_ACExit:
.8a3f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/call.asm

.8a40					CallCommand:
.8a40	a2 00		ldx #$00			ldx 	#0
.8a42	20 8d 9f	jsr $9f8d			jsr 	Evaluate16BitInteger
.8a45					_CCClear
.8a45	e8		inx				inx  								; clear 1,2 and 3 (for A X Y)
.8a46	20 01 a0	jsr $a001			jsr 	NSMSetZero
.8a49	e0 04		cpx #$04			cpx 	#4
.8a4b	d0 f8		bne $8a45			bne 	_CCClear
.8a4d	a2 00		ldx #$00			ldx 	#0 							; and keep trying
.8a4f					_CCCParam:
.8a4f	b1 30		lda ($30),y			lda 	(codePtr),y
.8a51	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8a53	d0 09		bne $8a5e			bne 	_CCCRun6502
.8a55	c8		iny				iny 								; skip comma
.8a56	e8		inx				inx	 								; next level
.8a57	20 99 9f	jsr $9f99			jsr 	Evaluate8BitInteger 		; get A/X/Y
.8a5a	e0 03		cpx #$03			cpx 	#3
.8a5c	90 f1		bcc $8a4f			bcc 	_CCCParam 					; done all 3 ?
.8a5e					_CCCRun6502:
.8a5e	5a		phy				phy 								; save position
.8a5f	ad 10 04	lda $0410			lda 	NSMantissa1 				; put address in zTemp0
.8a62	85 37		sta $37				sta 	zTemp0+1
.8a64	ad 08 04	lda $0408			lda 	NSMantissa0
.8a67	85 36		sta $36				sta 	zTemp0
.8a69	ad 09 04	lda $0409			lda 	NSMantissa0+1 				; get registers
.8a6c	ae 0a 04	ldx $040a			ldx 	NSMantissa0+2
.8a6f	ac 0b 04	ldy $040b			ldy 	NSMantissa0+3
.8a72	20 77 8a	jsr $8a77			jsr 	_CCCZTemp0 					; call zTemp0
.8a75	7a		ply				ply 								; restore position and exit
.8a76	60		rts				rts
.8a77					_CCCZTemp0:
.8a77	6c 36 00	jmp ($0036)			jmp 	(zTemp0)

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/clear.asm

.8a7a					ClearCommand:
.8a7a	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.8a7c	85 36		sta $36				sta 	0+zTemp0
.8a7e	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.8a80	85 37		sta $37				sta 	1+zTemp0
.8a82					_ClearZeroLoop:
.8a82	b2 36		lda ($36)			lda 	(zTemp0) 					; end of variables
.8a84	f0 24		beq $8aaa			beq 	_ClearZeroEnd
.8a86	a0 03		ldy #$03			ldy 	#3 							; erase the variables
.8a88	a9 00		lda #$00			lda 	#0
.8a8a					_ClearOneVariable:
.8a8a	91 36		sta ($36),y			sta 	(zTemp0),y
.8a8c	c8		iny				iny
.8a8d	c0 08		cpy #$08			cpy 	#8
.8a8f	d0 f9		bne $8a8a			bne 	_ClearOneVariable
.8a91	a0 02		ldy #$02			ldy 	#2 							; has it been marked procedure
.8a93	b1 36		lda ($36),y			lda 	(zTemp0),y
.8a95	c9 18		cmp #$18			cmp 	#NSTProcedure
.8a97	d0 04		bne $8a9d			bne 	_ClearNotProcedure
.8a99	a9 04		lda #$04			lda 	#NSTInteger+NSBIsArray 		; set it back to an integer array
.8a9b	91 36		sta ($36),y			sta 	(zTemp0),y
.8a9d					_ClearNotProcedure:
.8a9d	18		clc				clc 								; go to the next variable
.8a9e	b2 36		lda ($36)			lda 	(zTemp0)
.8aa0	65 36		adc $36				adc 	zTemp0
.8aa2	85 36		sta $36				sta 	zTemp0
.8aa4	90 dc		bcc $8a82			bcc 	_ClearZeroLoop
.8aa6	e6 37		inc $37				inc 	zTemp0+1
.8aa8	80 d8		bra $8a82			bra 	_ClearZeroLoop
.8aaa					_ClearZeroEnd:
.8aaa	18		clc				clc
.8aab	a5 36		lda $36				lda 	zTemp0
.8aad	69 01		adc #$01			adc 	#1
.8aaf	8d 8c 04	sta $048c			sta 	lowMemPtr
.8ab2	a5 37		lda $37				lda 	zTemp0+1
.8ab4	69 00		adc #$00			adc 	#0
.8ab6	8d 8d 04	sta $048d			sta 	lowMemPtr+1
.8ab9	20 1a a1	jsr $a11a			jsr 	StackReset
.8abc	20 6b b0	jsr $b06b			jsr 	StringSystemInitialise
.8abf	20 69 93	jsr $9369			jsr 	ProcedureScan
.8ac2	20 ce 8f	jsr $8fce			jsr 	Command_Restore
.8ac5	9c 9e 04	stz $049e			stz 	AssemblerAddress
.8ac8	9c 9f 04	stz $049f			stz 	AssemblerAddress+1
.8acb	9c a0 04	stz $04a0			stz 	AssemblerControl
.8ace	20 10 9d	jsr $9d10			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.8ad1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/data.asm

.8ad2					Command_Data:
.8ad2	a9 3a		lda #$3a			lda 	#KWD_COLON 					; advance to colon/EOL
.8ad4	a2 80		ldx #$80			ldx 	#KWC_EOL
.8ad6	20 bb 93	jsr $93bb			jsr 	ScanForward
.8ad9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/dim.asm

.8ada					DimCommand:
.8ada	b1 30		lda ($30),y			lda 	(codePtr),y
.8adc	29 c0		and #$c0			and 	#$C0
.8ade	c9 40		cmp #$40			cmp 	#$40
.8ae0	d0 7a		bne $8b5c			bne 	_DCSyntax
.8ae2	b1 30		lda ($30),y			lda 	(codePtr),y
.8ae4	18		clc				clc
.8ae5	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8ae7	85 3f		sta $3f				sta 	zaTemp+1
.8ae9	c8		iny				iny
.8aea	b1 30		lda ($30),y			lda 	(codePtr),y
.8aec	c8		iny				iny
.8aed	85 3e		sta $3e				sta 	zaTemp
.8aef	5a		phy				phy
.8af0	a0 02		ldy #$02			ldy 	#2 						; read type byte
.8af2	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8af4	29 18		and #$18			and 	#NSBTypeMask 			; check it's not a procedure
.8af6	c9 18		cmp #$18			cmp 	#NSTProcedure
.8af8	f0 62		beq $8b5c			beq 	_DCSyntax
.8afa	b1 3e		lda ($3e),y			lda 	(zaTemp),y 				; check it's an array
.8afc	29 04		and #$04			and 	#NSBIsArray
.8afe	f0 64		beq $8b64			beq 	_DCType
.8b00	a0 04		ldy #$04			ldy 	#4 						; check not already defined
.8b02	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8b04	d0 59		bne $8b5f			bne 	_DCRedefine
.8b06	7a		ply				ply
.8b07	20 67 8b	jsr $8b67			jsr 	_DCGetSize 				; get array size, check it.
.8b0a	5a		phy				phy
.8b0b	a0 05		ldy #$05			ldy 	#5 						; store in first array size slot
.8b0d	91 3e		sta ($3e),y			sta 	(zaTemp),y 				; second will be zero.
.8b0f	7a		ply				ply 							; is there a second (e.g. ,x)
.8b10	b1 30		lda ($30),y			lda 	(codePtr),y
.8b12	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8b14	d0 0a		bne $8b20			bne 	_DCOneDimension
.8b16	c8		iny				iny 							; skip comma
.8b17	20 67 8b	jsr $8b67			jsr 	_DCGetSize 				; get 2nd array size
.8b1a	5a		phy				phy
.8b1b	a0 06		ldy #$06			ldy 	#6 						; store in 2nd array size
.8b1d	91 3e		sta ($3e),y			sta 	(zaTemp),y
.8b1f	7a		ply				ply
.8b20					_DCOneDimension:
.8b20	5a		phy				phy 							; save position
.8b21	a0 05		ldy #$05			ldy 	#5 						; dimensions + 1 in AX (as zero based)
.8b23	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8b25	aa		tax				tax
.8b26	c8		iny				iny
.8b27	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8b29	e8		inx				inx 							; bump them.
.8b2a	1a		inc a				inc 	a
.8b2b	20 04 ac	jsr $ac04			jsr 	Multiply8x8 			; work out the total number of elements -> zTemp0
.8b2e	a5 37		lda $37				lda 	zTemp0+1 				; don't allow more than 8192 elements whatever
.8b30	29 e0		and #$e0			and 	#$E0
.8b32	d0 23		bne $8b57			bne 	_DCSize
.8b34	a0 02		ldy #$02			ldy 	#2 						; get base type
.8b36	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8b38	20 75 8b	jsr $8b75			jsr 	ScaleByBaseType 		; scale by base type
.8b3b	a5 36		lda $36				lda 	zTemp0
.8b3d	a6 37		ldx $37				ldx 	zTemp0+1
.8b3f	20 d2 9c	jsr $9cd2			jsr 	AllocateXABytes 		; allocate memory
.8b42	a0 03		ldy #$03			ldy 	#3 						; copy into the address.
.8b44	91 3e		sta ($3e),y			sta 	(zaTemp),y
.8b46	c8		iny				iny
.8b47	8a		txa				txa
.8b48	91 3e		sta ($3e),y			sta 	(zaTemp),y
.8b4a	7a		ply				ply 							; get position back
.8b4b	20 82 a7	jsr $a782			jsr 	CheckRightBracket 		; check )
.8b4e	b1 30		lda ($30),y			lda 	(codePtr),y
.8b50	c8		iny				iny 							; consume in case
.8b51	c9 2c		cmp #$2c			cmp 	#KWD_COMMA		 		; if so do another DIM.
.8b53	f0 85		beq $8ada			beq 	DimCommand
.8b55	88		dey				dey 							; undo consume
.8b56	60		rts				rts
.8b57					_DCSize:
.8b57	a9 16		lda #$16		lda	#22
.8b59	4c 49 94	jmp $9449		jmp	ErrorHandler
.8b5c					_DCSyntax:
.8b5c	4c 68 ad	jmp $ad68			jmp 	SyntaxError
.8b5f					_DCRedefine:
.8b5f	a9 15		lda #$15		lda	#21
.8b61	4c 49 94	jmp $9449		jmp	ErrorHandler
.8b64					_DCType:
.8b64	4c 72 ad	jmp $ad72			jmp 	TypeError
.8b67					_DCGetSize:
.8b67	a2 00		ldx #$00			ldx 	#0 						; get first index.
.8b69	20 99 9f	jsr $9f99			jsr 	Evaluate8BitInteger 	; get array dimension
.8b6c	c9 00		cmp #$00			cmp 	#0 						; must be 1-254
.8b6e	f0 e7		beq $8b57			beq 	_DCSize
.8b70	c9 fe		cmp #$fe			cmp 	#254
.8b72	f0 e3		beq $8b57			beq 	_DCSize
.8b74	60		rts				rts
.8b75					ScaleByBaseType:
.8b75	29 10		and #$10			and 	#NSBIsString 			; is it string
.8b77	d0 19		bne $8b92			bne 	_SBBTString
.8b79	a5 37		lda $37				lda 	zTemp0+1 				; push value on stack
.8b7b	48		pha				pha
.8b7c	a5 36		lda $36				lda 	zTemp0
.8b7e	48		pha				pha
.8b7f	06 36		asl $36				asl 	zTemp0 					; x 2
.8b81	26 37		rol $37				rol 	zTemp0+1
.8b83	06 36		asl $36				asl 	zTemp0 					; x 4
.8b85	26 37		rol $37				rol 	zTemp0+1
.8b87	68		pla				pla 							; add stacked value = x 5
.8b88	65 36		adc $36				adc 	zTemp0
.8b8a	85 36		sta $36				sta 	zTemp0
.8b8c	68		pla				pla
.8b8d	65 37		adc $37				adc 	zTemp0+1
.8b8f	85 37		sta $37				sta 	zTemp0+1
.8b91	60		rts				rts
.8b92					_SBBTString:
.8b92	06 36		asl $36				asl 	zTemp0
.8b94	26 37		rol $37				rol 	zTemp0+1
.8b96	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/end.asm

.8b97					EndCommand:
.8b97	4c e1 89	jmp $89e1			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/for.asm

.8b9a					ForCommand:
.8b9a	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; allocate 18 bytes on the return stack.
.8b9c	20 b5 a0	jsr $a0b5			jsr 	StackOpen
.8b9f	a2 00		ldx #$00			ldx 	#0
.8ba1	20 23 9b	jsr $9b23			jsr 	EvaluateTerm
.8ba4	bd 00 04	lda $0400,x			lda 	NSStatus,x
.8ba7	c9 20		cmp #$20			cmp 	#NSBIsReference+NSTInteger 	; do we have an integer 4 byte reference.
.8ba9	d0 49		bne $8bf4			bne		_FCError
.8bab	a9 3d		lda #$3d			lda 	#KWD_EQUAL 					; =
.8bad	20 92 a7	jsr $a792			jsr 	CheckNextA
.8bb0	e8		inx				inx
.8bb1	20 78 9f	jsr $9f78			jsr 	EvaluateInteger 			; <from> in +1
.8bb4	b1 30		lda ($30),y			lda 	(codePtr),y
.8bb6	c8		iny				iny 								; consume it
.8bb7	48		pha				pha 								; save on stack for later
.8bb8	c9 a6		cmp #$a6			cmp 	#KWD_DOWNTO
.8bba	f0 04		beq $8bc0			beq 	_FCNoSyntax
.8bbc	c9 b0		cmp #$b0			cmp 	#KWD_TO
.8bbe	d0 37		bne $8bf7			bne 	_FCSyntaxError
.8bc0					_FCNoSyntax:
.8bc0	e8		inx				inx
.8bc1	20 78 9f	jsr $9f78			jsr 	EvaluateInteger
.8bc4	20 f9 a0	jsr $a0f9			jsr 	STKSaveCodePosition 		; save loop back position
.8bc7	68		pla				pla 								; restore DOWNTO or TO
.8bc8	5a		phy				phy 								; save Y on the stack
.8bc9	49 a6		eor #$a6			eor 	#KWD_DOWNTO 				; 0 if DOWNTO, #0 if TO
.8bcb	f0 02		beq $8bcf			beq 	_FCNotDownTo
.8bcd	a9 02		lda #$02			lda 	#2
.8bcf					_FCNotDownTo:
.8bcf	3a		dec a				dec 	a 							; 255 if DOWNTO, 1 if TO
.8bd0	a0 10		ldy #$10			ldy 	#16
.8bd2	91 34		sta ($34),y			sta 	(basicStack),y 				; copy that out to the Basic Stack.
.8bd4	a0 06		ldy #$06			ldy 	#6
.8bd6	ad 08 04	lda $0408			lda 	NSMantissa0
.8bd9	91 34		sta ($34),y			sta 	(basicStack),y
.8bdb	ad 10 04	lda $0410			lda 	NSMantissa1
.8bde	c8		iny				iny
.8bdf	91 34		sta ($34),y			sta 	(basicStack),y
.8be1	a0 08		ldy #$08			ldy 	#8 							; set initial index value
.8be3	a2 01		ldx #$01			ldx 	#1
.8be5	20 fa 8b	jsr $8bfa			jsr 	FCIntegerToStack
.8be8	a0 0c		ldy #$0c			ldy 	#12 						; set the terminal value
.8bea	a2 02		ldx #$02			ldx 	#2
.8bec	20 fa 8b	jsr $8bfa			jsr 	FCIntegerToStack
.8bef	20 1a 8c	jsr $8c1a			jsr 	CopyIndexToReference
.8bf2	7a		ply				ply 								; restore position
.8bf3	60		rts				rts
.8bf4					_FCError:
.8bf4	4c 72 ad	jmp $ad72			jmp 	TypeError
.8bf7					_FCSyntaxError:
.8bf7	4c 68 ad	jmp $ad68			jmp 	SyntaxError
.8bfa					FCIntegerToStack:
.8bfa	3c 00 04	bit $0400,x			bit 	NSStatus,x 					; is the value negative
.8bfd	10 03		bpl $8c02			bpl	 	_FCNotNegative
.8bff	20 b6 9f	jsr $9fb6			jsr 	NSMNegateMantissa 			; if so 2's complement the mantissa
.8c02					_FCNotNegative:
.8c02	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy out to the basic stack
.8c05	91 34		sta ($34),y			sta 	(basicStack),y
.8c07	c8		iny				iny
.8c08	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8c0b	91 34		sta ($34),y			sta 	(basicStack),y
.8c0d	c8		iny				iny
.8c0e	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.8c11	91 34		sta ($34),y			sta 	(basicStack),y
.8c13	c8		iny				iny
.8c14	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.8c17	91 34		sta ($34),y			sta 	(basicStack),y
.8c19	60		rts				rts
.8c1a					CopyIndexToReference:
.8c1a	5a		phy				phy
.8c1b	a0 06		ldy #$06			ldy 	#6 							; copy address-8 to write to zTemp0
.8c1d	38		sec				sec 								; (because we copy from offset 8)
.8c1e	b1 34		lda ($34),y			lda 	(basicStack),y
.8c20	e9 08		sbc #$08			sbc 	#8
.8c22	85 36		sta $36				sta 	zTemp0
.8c24	c8		iny				iny
.8c25	b1 34		lda ($34),y			lda 	(basicStack),y
.8c27	e9 00		sbc #$00			sbc 	#0
.8c29	85 37		sta $37				sta 	zTemp0+1
.8c2b	a2 04		ldx #$04			ldx 	#4 							; this is the copy counter/
.8c2d	a0 0b		ldy #$0b			ldy 	#8+3 		 				; the MSB of the mantissa
.8c2f	b1 34		lda ($34),y			lda 	(basicStack),y
.8c31	0a		asl a				asl 	a 							; into carry
.8c32	a0 08		ldy #$08			ldy 	#8 							; where to copy from.
.8c34	90 14		bcc $8c4a			bcc 	_CITRNormal
.8c36	38		sec				sec
.8c37					_CITRNegative:
.8c37	a9 00		lda #$00			lda 	#0
.8c39	f1 34		sbc ($34),y			sbc 	(basicStack),y
.8c3b	91 36		sta ($36),y			sta 	(zTemp0),y
.8c3d	c8		iny				iny
.8c3e	ca		dex				dex
.8c3f	d0 f6		bne $8c37			bne 	_CITRNegative
.8c41	88		dey				dey 								; look at MSB of mantissa
.8c42	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set the MSB as negative packed.
.8c44	09 80		ora #$80			ora 	#$80
.8c46	91 36		sta ($36),y			sta 	(zTemp0),y
.8c48	7a		ply				ply
.8c49	60		rts				rts
.8c4a					_CITRNormal:
.8c4a	b1 34		lda ($34),y			lda 	(basicStack),y 				; copy without negation.
.8c4c	91 36		sta ($36),y			sta 	(zTemp0),y
.8c4e	c8		iny				iny
.8c4f	ca		dex				dex
.8c50	d0 f8		bne $8c4a			bne 	_CITRNormal
.8c52	7a		ply				ply 								; and exit.
.8c53	60		rts				rts
.8c54					NextCommand:
.8c54	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; check FOR is TOS
.8c56	a2 11		ldx #$11			ldx 	#ERRID_FOR 					; this error
.8c58	20 e1 a0	jsr $a0e1			jsr 	StackCheckFrame
.8c5b	5a		phy				phy
.8c5c	a0 10		ldy #$10			ldy 	#16 						; get the step count
.8c5e	b1 34		lda ($34),y			lda 	(basicStack),y
.8c60	85 36		sta $36				sta 	zTemp0 						; this is the sign extend
.8c62	30 02		bmi $8c66			bmi 	_NCStepNeg
.8c64	64 36		stz $36				stz 	zTemp0 						; which is 0 or 255
.8c66					_NCStepNeg:
.8c66	a0 08		ldy #$08			ldy 	#8 							; offset to bump
.8c68	a2 04		ldx #$04			ldx 	#4 							; count to bump
.8c6a	18		clc				clc
.8c6b					_NCBump:
.8c6b	71 34		adc ($34),y			adc 	(basicStack),y 				; add it
.8c6d	91 34		sta ($34),y			sta 	(basicStack),y
.8c6f	a5 36		lda $36				lda 	zTemp0 						; get sign extend for next time.
.8c71	c8		iny				iny 								; next byte
.8c72	ca		dex				dex 								; do four times
.8c73	d0 f6		bne $8c6b			bne 	_NCBump
.8c75	20 1a 8c	jsr $8c1a			jsr		CopyIndexToReference		; copy it to the reference variable.
.8c78	a0 10		ldy #$10			ldy 	#16 						; get step count again
.8c7a	b1 34		lda ($34),y			lda 	(basicStack),y
.8c7c	0a		asl a				asl 	a 							; sign bit to carry
.8c7d	a9 0c		lda #$0c			lda 	#12 						; offset of LHS = terminal offset
.8c7f	85 38		sta $38				sta 	zTemp1
.8c81	90 02		bcc $8c85			bcc 	_NCCompRev 					; use if step is +ve
.8c83	a9 08		lda #$08			lda 	#8 							; now the LHS = index value
.8c85					_NCCompRev:
.8c85	85 38		sta $38				sta 	zTemp1 						; so zTemp0 is the index for LHS
.8c87	49 04		eor #$04			eor 	#(8^12) 					; and zTemp0+1 is the index for RHS
.8c89	85 39		sta $39				sta 	zTemp1+1
.8c8b	a2 04		ldx #$04			ldx 	#4 							; bytes to compare
.8c8d	38		sec				sec
.8c8e					_NCCompare:
.8c8e	a4 38		ldy $38				ldy 	zTemp1 						; do compare using the two indices
.8c90	b1 34		lda ($34),y			lda 	(basicStack),y
.8c92	a4 39		ldy $39				ldy 	zTemp1+1
.8c94	f1 34		sbc ($34),y			sbc 	(basicStack),y
.8c96	e6 38		inc $38				inc 	zTemp1 						; bump the indices (inc,dex do not change C or V)
.8c98	e6 39		inc $39				inc 	zTemp1+1
.8c9a	ca		dex				dex 								; do it 4 times.
.8c9b	d0 f1		bne $8c8e			bne 	_NCCompare
.8c9d	50 02		bvc $8ca1			bvc 	_NCNoOverflow 				; convert to signed comparison
.8c9f	49 80		eor #$80			eor 	#$80
.8ca1					_NCNoOverflow:
.8ca1	7a		ply				ply 								; restore Y position
.8ca2	0a		asl a				asl 	a 							; is bit 7 set.
.8ca3	90 04		bcc $8ca9			bcc 	_NCLoopback 				; if no , >= so loop back
.8ca5	20 d3 a0	jsr $a0d3			jsr 	StackClose 					; exit the loop
.8ca8	60		rts				rts
.8ca9					_NCLoopBack:
.8ca9	20 0a a1	jsr $a10a			jsr 	STKLoadCodePosition 		; loop back
.8cac	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/gosub.asm

.8cad					Command_GOSUB:
.8cad	a2 00		ldx #$00			ldx 	#0
.8caf	20 8d 9f	jsr $9f8d			jsr 	Evaluate16BitInteger 		; line number in Stack.0
.8cb2	a9 e3		lda #$e3			lda 	#STK_GOSUB+3
.8cb4	20 b5 a0	jsr $a0b5			jsr 	StackOpen 					; create frame
.8cb7	20 f9 a0	jsr $a0f9			jsr 	STKSaveCodePosition 		; save current position
.8cba	4c d0 8c	jmp $8cd0			jmp 	GotoStackX
.8cbd					Command_RETURN:
.8cbd	a9 e0		lda #$e0			lda 	#STK_GOSUB 					; check TOS is this
.8cbf	a2 0e		ldx #$0e			ldx 	#ERRID_GOSUB 				; this error
.8cc1	20 e1 a0	jsr $a0e1			jsr 	StackCheckFrame
.8cc4	20 0a a1	jsr $a10a			jsr 	STKLoadCodePosition 		; restore code position
.8cc7	20 d3 a0	jsr $a0d3			jsr 	StackClose
.8cca	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/goto.asm

.8ccb					GotoCommand:
.8ccb	a2 00		ldx #$00			ldx 	#0 							; GOTO where
.8ccd	20 8d 9f	jsr $9f8d			jsr 	Evaluate16BitInteger
.8cd0					GotoStackX:
.8cd0	bd 10 04	lda $0410,x			lda  	NSMantissa1,x 				; put line # in XA. I'll keep this even though
.8cd3	48		pha				pha 								; it is slightly inefficient, just in cases.
.8cd4	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.8cd7	fa		plx				plx
.8cd8	20 60 a0	jsr $a060			jsr 	MemorySearch 				; transfer to line number AX.
.8cdb	90 05		bcc $8ce2			bcc 	_GotoError 					; not found, off end.
.8cdd	d0 03		bne $8ce2			bne 	_GotoError 					; not found exactly
.8cdf	4c 0b 90	jmp $900b			jmp 	RunNewLine 					; and go straight to new line code.
.8ce2					_GotoError:
.8ce2	a9 0d		lda #$0d		lda	#13
.8ce4	4c 49 94	jmp $9449		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/if.asm

.8ce7					IfCommand:
.8ce7	a2 00		ldx #$00			ldx 	#0 							; If what.
.8ce9	20 55 9f	jsr $9f55			jsr 	EvaluateNumber
.8cec	b1 30		lda ($30),y			lda 	(codePtr),y
.8cee	c9 9f		cmp #$9f			cmp 	#KWD_THEN  					; could be THEN <stuff> or GOTO
.8cf0	d0 0a		bne $8cfc			bne 	_IFStructured
.8cf2	c8		iny				iny 								; consume THEN
.8cf3	20 31 a0	jsr $a031			jsr 	NSMIsZero 					; is it zero
.8cf6	f0 01		beq $8cf9			beq 	_IfFail 					; if fail, go to next line
.8cf8	60		rts				rts 								; if THEN just continue
.8cf9					_IfFail:
.8cf9	4c 70 90	jmp $9070			jmp 	EOLCommand
.8cfc					_IfStructured:
.8cfc	20 31 a0	jsr $a031			jsr 	NSMIsZero 					; is it zero
.8cff	d0 07		bne $8d08			bne 	_IfExit 					; if not, then continue normally.
.8d01	a9 a7		lda #$a7			lda 	#KWD_ELSE 					; look for else/endif
.8d03	a2 9c		ldx #$9c			ldx 	#KWD_ENDIF
.8d05	20 bb 93	jsr $93bb			jsr 	ScanForward 				; and run from there/
.8d08					_IfExit:
.8d08	60		rts				rts
.8d09					ElseCode:
.8d09	a9 9c		lda #$9c			lda 	#KWD_ENDIF 					; else is only run after the if clause succeeds
.8d0b	aa		tax				tax 								; so just go to the structure exit
.8d0c	20 bb 93	jsr $93bb			jsr 	ScanForward
.8d0f	60		rts				rts
.8d10					EndIf:
.8d10	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/let.asm

.8d11					LetCommand:
.8d11	a2 00		ldx #$00			ldx 	#0
.8d13	b1 30		lda ($30),y			lda 	(codePtr),y
.8d15	c9 10		cmp #$10			cmp 	#KWD_AT
.8d17	d0 16		bne $8d2f			bne 	_LCStandard
.8d19	c8		iny				iny 								; skip equal
.8d1a	20 23 9b	jsr $9b23			jsr 	EvaluateTerm 				; get a number
.8d1d	20 67 99	jsr $9967			jsr 	Dereference 				; dereference it
.8d20	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check integer
.8d23	49 20		eor #$20			eor 	#NSBIsReference	 			; toggle reference
.8d25	9d 00 04	sta $0400,x			sta 	NSStatus,x
.8d28	29 20		and #$20			and 	#NSBIsReference 			; if it is now a reference, continue
.8d2a	d0 10		bne $8d3c			bne 	_LCMain
.8d2c	4c 72 ad	jmp $ad72			jmp 	TypeError 					; was a reference before.
.8d2f					_LCStandard:
.8d2f	ad 3a 98	lda $983a			lda 	PrecedenceLevel+"*"			; precedence > this
.8d32	20 54 98	jsr $9854			jsr 	EvaluateExpressionAtPrecedence
.8d35	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; is it a reference to an array
.8d38	c9 38		cmp #$38			cmp		#NSTProcedure+NSBIsReference
.8d3a	f0 0e		beq $8d4a			beq 	_LetGoProc 					; it's a procedure call.
.8d3c					_LCMain:
.8d3c	a9 3d		lda #$3d			lda 	#"=" 						; check =
.8d3e	20 92 a7	jsr $a792			jsr 	CheckNextA
.8d41	e8		inx				inx 								; RHS
.8d42	20 4c 9f	jsr $9f4c			jsr 	EvaluateValue
.8d45	ca		dex				dex
.8d46	20 4d 8d	jsr $8d4d			jsr 	AssignVariable
.8d49	60		rts				rts
.8d4a					_LetGoProc:
.8d4a	4c e6 8e	jmp $8ee6			jmp 	CallProcedure
.8d4d					AssignVariable:
.8d4d	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check the string/number type bits match
.8d50	48		pha				pha 								; save a copy
.8d51	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.8d54	29 10		and #$10			and 	#NSBIsString
.8d56	d0 0b		bne $8d63			bne 	_ASError
.8d58	68		pla				pla 								; get back
.8d59	29 10		and #$10			and 	#NSBIsString 				; check type
.8d5b	d0 03		bne $8d60			bne 	_ASString
.8d5d	4c 8f 98	jmp $988f			jmp 	AssignNumber
.8d60					_ASString:
.8d60	4c fd 98	jmp $98fd			jmp 	AssignString
.8d63					_ASError:
.8d63	4c 72 ad	jmp $ad72			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/list.asm

.8d66					Command_List:
.8d66	9c 0c 04	stz $040c			stz		NSMantissa0+4				; set the lower (slot 4) to 0 and upper (slot 7) to $FFFF
.8d69	9c 14 04	stz $0414			stz 	NSMantissa1+4
.8d6c	a9 ff		lda #$ff			lda 	#$FF
.8d6e	8d 0f 04	sta $040f			sta 	NSMantissa0+7
.8d71	8d 17 04	sta $0417			sta 	NSMantissa1+7
.8d74	b1 30		lda ($30),y			lda 	(codePtr),y
.8d76	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8d78	f0 1e		beq $8d98			beq 	_CLSecond
.8d7a	20 f6 8d	jsr $8df6			jsr 	CLIsDigit 					; if not digit, list all
.8d7d	b0 24		bcs $8da3			bcs 	_CLStart
.8d7f	a2 04		ldx #$04			ldx 	#4 							; get 1st range into slot 4
.8d81	20 8d 9f	jsr $9f8d			jsr 	Evaluate16BitInteger
.8d84	b1 30		lda ($30),y			lda 	(codePtr),y
.8d86	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8d88	f0 0e		beq $8d98			beq 	_CLSecond 					; if so go get it
.8d8a	ad 0c 04	lda $040c			lda 	NSMantissa0+4 				; copy 4->7
.8d8d	8d 0f 04	sta $040f			sta 	NSMantissa0+7
.8d90	ad 14 04	lda $0414			lda 	NSMantissa1+4
.8d93	8d 17 04	sta $0417			sta 	NSMantissa1+7
.8d96	80 0b		bra $8da3			bra 	_CLStart
.8d98					_CLSecond:
.8d98	c8		iny				iny 								; consume comma
.8d99	20 f6 8d	jsr $8df6			jsr 	CLIsDigit 					; digit found
.8d9c	b0 05		bcs $8da3			bcs 	_CLStart 					; if not, continue listing
.8d9e	a2 07		ldx #$07			ldx 	#7 							; load 2nd range into slot 7
.8da0	20 8d 9f	jsr $9f8d			jsr 	Evaluate16BitInteger
.8da3					_CLStart
.8da3	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8da5	85 30		sta $30				sta 	codePtr
.8da7	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8da9	85 31		sta $31				sta 	codePtr+1
.8dab					_CLLoop:
.8dab	20 4e af	jsr $af4e			jsr 	EXTBreakCheck 				; break check
.8dae	f0 30		beq $8de0			beq 	_CLExit
.8db0	b2 30		lda ($30)			lda 	(codePtr)
.8db2	f0 2c		beq $8de0			beq 	_CLExit
.8db4	a2 04		ldx #$04			ldx 	#4 							; check range every time, line numbers aren't in order.
.8db6	20 e3 8d	jsr $8de3			jsr 	CLCompareLineNo
.8db9	90 18		bcc $8dd3			bcc 	_CLNext
.8dbb	a2 07		ldx #$07			ldx 	#7
.8dbd	20 e3 8d	jsr $8de3			jsr 	CLCompareLineNo
.8dc0	f0 02		beq $8dc4			beq 	_CLDoThisOne
.8dc2	b0 0f		bcs $8dd3			bcs 	_CLNext
.8dc4					_CLDoThisOne:
.8dc4	20 17 92	jsr $9217			jsr 	ListConvertLine 			; convert line into token Buffer
.8dc7	a2 04		ldx #$04			ldx 	#(tokenBuffer >> 8) 		; print that line
.8dc9	a9 a9		lda #$a9			lda 	#(tokenBuffer & $FF)
.8dcb	20 a2 94	jsr $94a2			jsr 	PrintStringXA
.8dce	a9 0d		lda #$0d			lda 	#13 						; new line
.8dd0	20 0d af	jsr $af0d			jsr 	EXTPrintCharacter
.8dd3					_CLNext:
.8dd3	18		clc				clc
.8dd4	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8dd6	65 30		adc $30				adc 	codePtr
.8dd8	85 30		sta $30				sta 	codePtr
.8dda	90 02		bcc $8dde			bcc 	_CREExit
.8ddc	e6 31		inc $31				inc 	codePtr+1
.8dde					_CREExit:
.8dde	80 cb		bra $8dab			bra 	_CLLoop
.8de0					_CLExit:
.8de0	4c e1 89	jmp $89e1			jmp 	WarmStart
.8de3					CLCompareLineNo:
.8de3	38		sec				sec
.8de4	a0 01		ldy #$01			ldy 	#1
.8de6	b1 30		lda ($30),y			lda 	(codePtr),y
.8de8	fd 08 04	sbc $0408,x			sbc 	NSMantissa0,x
.8deb	85 36		sta $36				sta 	zTemp0
.8ded	c8		iny				iny
.8dee	b1 30		lda ($30),y			lda 	(codePtr),y
.8df0	fd 10 04	sbc $0410,x			sbc 	NSMantissa1,x
.8df3	05 36		ora $36				ora 	zTemp0
.8df5	60		rts				rts
.8df6					CLIsDigit:
.8df6	b1 30		lda ($30),y			lda 	(codePtr),y
.8df8	c9 30		cmp #$30			cmp 	#"0"
.8dfa	90 03		bcc $8dff			bcc	 	_CLIDExitFalse
.8dfc	c9 3a		cmp #$3a			cmp 	#"9"+1
.8dfe	60		rts				rts
.8dff					_CLIDExitFalse:
.8dff	38		sec				sec
.8e00	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/local.asm

.8e01					Command_LOCAL:
.8e01	a2 00		ldx #$00			ldx 	#0 							; at level 0
.8e03	20 0f 8e	jsr $8e0f			jsr 	LocaliseNextTerm 			; convert term to a local.
.8e06	b1 30		lda ($30),y			lda 	(codePtr),y
.8e08	c8		iny				iny
.8e09	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8e0b	f0 f4		beq $8e01			beq 	Command_LOCAL
.8e0d	88		dey				dey 								; unpick pre-get
.8e0e	60		rts				rts
.8e0f					LocaliseNextTerm:
.8e0f	20 23 9b	jsr $9b23			jsr 	EvaluateTerm 				; evaluate the term
.8e12	bd 00 04	lda $0400,x			lda 	NSStatus,x
.8e15	29 20		and #$20			and 	#NSBIsReference 			; check it is a reference
.8e17	f0 69		beq $8e82			beq		_LNTError
.8e19	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address of variable to zTemp0
.8e1c	85 36		sta $36				sta 	zTemp0
.8e1e	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8e21	85 37		sta $37				sta  	zTemp0+1
.8e23	bd 00 04	lda $0400,x			lda 	NSStatus,x
.8e26	29 10		and #$10			and 	#NSBIsString
.8e28	d0 22		bne $8e4c			bne 	_LNTPushString
.8e2a	5a		phy				phy
.8e2b	a0 00		ldy #$00			ldy 	#0 							; push 0 to 4 inclusive, the number values, on the stack, and zero them as you go.
.8e2d					_LNTPushNumLoop:
.8e2d	b1 36		lda ($36),y			lda		(zTemp0),y
.8e2f	20 93 a0	jsr $a093			jsr 	StackPushByte
.8e32	a9 00		lda #$00			lda 	#0
.8e34	91 36		sta ($36),y			sta 	(zTemp0),y
.8e36	c8		iny				iny
.8e37	c0 05		cpy #$05			cpy 	#5
.8e39	d0 f2		bne $8e2d			bne 	_LNTPushNumLoop
.8e3b	a5 36		lda $36				lda 	zTemp0 						; push the actual target address to write on the stack
.8e3d	20 93 a0	jsr $a093			jsr 	StackPushByte
.8e40	a5 37		lda $37				lda 	zTemp0+1
.8e42	20 93 a0	jsr $a093			jsr 	StackPushByte
.8e45	a9 01		lda #$01			lda 	#STK_LOCALN 				; push local-number marker.
.8e47	20 93 a0	jsr $a093			jsr 	StackPushByte
.8e4a	7a		ply				ply
.8e4b	60		rts				rts
.8e4c					_LNTPushString:
.8e4c	5a		phy				phy
.8e4d	b2 36		lda ($36)			lda 	(zTemp0) 					; put address of string in zTemp1
.8e4f	85 38		sta $38				sta 	zTemp1
.8e51	a0 01		ldy #$01			ldy 	#1
.8e53	b1 36		lda ($36),y			lda 	(zTemp0),y
.8e55	85 39		sta $39				sta 	zTemp1+1
.8e57	a0 00		ldy #$00			ldy 	#0 							; output string
.8e59	c9 00		cmp #$00			cmp 	#0 							; if not assigned strin
.8e5b	f0 0a		beq $8e67			beq 	_LNTStringOut
.8e5d					_LNTPushStrLoop:
.8e5d	b1 38		lda ($38),y			lda 	(zTemp1),y
.8e5f	f0 06		beq $8e67			beq 	_LNTStringOut
.8e61	20 93 a0	jsr $a093			jsr 	StackPushByte
.8e64	c8		iny				iny
.8e65	80 f6		bra $8e5d			bra 	_LNTPushStrLoop
.8e67					_LNTStringOut:
.8e67	98		tya				tya									; output length
.8e68	20 93 a0	jsr $a093			jsr 	StackPushByte
.8e6b	a9 00		lda #$00			lda 	#0 							; clear original string.
.8e6d	92 38		sta ($38)			sta 	(zTemp1)
.8e6f	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; output address of the string record *not* the string itself
.8e72	20 93 a0	jsr $a093			jsr 	StackPushByte
.8e75	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.8e78	20 93 a0	jsr $a093			jsr 	StackPushByte
.8e7b	a9 02		lda #$02			lda 	#STK_LOCALS 				; push local-string marker.
.8e7d	20 93 a0	jsr $a093			jsr 	StackPushByte
.8e80	7a		ply				ply
.8e81	60		rts				rts
.8e82					_LNTError:
.8e82	4c 68 ad	jmp $ad68			jmp 	SyntaxError
.a729					LocalPopValue:
.a729	20 ac a0	jsr $a0ac			jsr 	StackPopByte
.a72c	c9 01		cmp #$01			cmp 	#STK_LOCALN 				; if not local-N
.a72e	d0 17		bne $a747			bne 	_LPVString
.a730	20 ac a0	jsr $a0ac			jsr 	StackPopByte 				; address
.a733	85 37		sta $37				sta 	zTemp0+1
.a735	20 ac a0	jsr $a0ac			jsr 	StackPopByte
.a738	85 36		sta $36				sta 	zTemp0
.a73a	5a		phy				phy
.a73b	a0 04		ldy #$04			ldy 	#4 							; copy back
.a73d					_LPVNumberCopy:
.a73d	20 ac a0	jsr $a0ac			jsr 	StackPopByte
.a740	91 36		sta ($36),y			sta 	(zTemp0),y
.a742	88		dey				dey
.a743	10 f8		bpl $a73d			bpl 	_LPVNumberCopy
.a745	7a		ply				ply 								; and complete
.a746	60		rts				rts
.a747					_LPVString:
.a747	20 ac a0	jsr $a0ac			jsr 	StackPopByte 				; address of record => zTemp0
.a74a	85 37		sta $37				sta 	zTemp0+1
.a74c	20 ac a0	jsr $a0ac			jsr 	StackPopByte
.a74f	85 36		sta $36				sta 	zTemp0
.a751	5a		phy				phy
.a752	b2 36		lda ($36)			lda 	(zTemp0) 					; address to write string to => zTemp1
.a754	85 38		sta $38				sta 	zTemp1
.a756	a0 01		ldy #$01			ldy 	#1
.a758	b1 36		lda ($36),y			lda 	(zTemp0),y
.a75a	85 39		sta $39				sta 	zTemp1+1
.a75c	20 ac a0	jsr $a0ac			jsr 	StackPopByte 				; # to get => y
.a75f	a8		tay				tay
.a760	a5 39		lda $39				lda 	zTemp1+1 					; if no target (e.g. was "" originally) exit
.a762	f0 0e		beq $a772			beq 	_LPVStringCopied
.a764	a9 00		lda #$00			lda 	#0 							; NULL on end
.a766	91 38		sta ($38),y			sta 	(zTemp1),y
.a768					_LPVStringCopy:
.a768	88		dey				dey
.a769	30 07		bmi $a772			bmi 	_LPVStringCopied
.a76b	20 ac a0	jsr $a0ac			jsr 	StackPopByte
.a76e	91 38		sta ($38),y			sta 	(zTemp1),y
.a770	80 f6		bra $a768			bra 	_LPVStringCopy
.a772					_LPVStringCopied:
.a772	fa		plx				plx
.a773	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/new.asm

.8e85					NewCommand:
.8e85	20 3e a0	jsr $a03e			jsr 	MemoryNew
.8e88	9c 00 10	stz $1000			stz 	VariableSpace 				; erase all variables.
.8e8b	20 7a 8a	jsr $8a7a			jsr 	ClearCommand 				; clear everything.
.8e8e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/print.asm

.8e8f					Command_Print:
.8e8f	18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.8e90					_CPLoop:
.8e90	08		php				php 								; save last action flag
.8e91	b1 30		lda ($30),y			lda 	(codePtr),y
.8e93	c9 80		cmp #$80			cmp  	#KWC_EOL 					; end of line or colon, exit now.
.8e95	f0 46		beq $8edd			beq 	_CPExit
.8e97	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.8e99	f0 42		beq $8edd			beq 	_CPExit
.8e9b	68		pla				pla 								; throw last action flag
.8e9c	b1 30		lda ($30),y			lda 	(codePtr),y
.8e9e	c8		iny				iny
.8e9f	c9 3b		cmp #$3b			cmp 	#KWD_SEMICOLON				; is it a semicolon
.8ea1	f0 37		beq $8eda			beq 	_CPContinueWithSameLine
.8ea3	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; comma
.8ea5	f0 2e		beq $8ed5			beq 	_CPTab
.8ea7	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; apostrophe (new line)
.8ea9	f0 26		beq $8ed1			beq 	_CPNewLine
.8eab	88		dey				dey 								; undo the get.
.8eac	a2 00		ldx #$00			ldx 	#0
.8eae	20 4c 9f	jsr $9f4c			jsr 	EvaluateValue 				; get a value into slot 0
.8eb1	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; is it a number
.8eb4	29 10		and #$10			and 	#NSBIsString
.8eb6	f0 0b		beq $8ec3			beq 	_CPNumber
.8eb8	ae 10 04	ldx $0410			ldx 	NSMantissa1 				; string, print the text.
.8ebb	ad 08 04	lda $0408			lda 	NSMantissa0
.8ebe	20 a2 94	jsr $94a2			jsr 	PrintStringXA
.8ec1	80 cc		bra $8e8f			bra 	Command_Print 				; loop round clearing carry so NL if end
.8ec3					_CPNumber:
.8ec3	a9 05		lda #$05			lda 	#5 							; maximum decimals
.8ec5	20 22 9e	jsr $9e22			jsr 	ConvertNumberToString 		; convert to string
.8ec8	a2 06		ldx #$06			ldx 	#DecimalBuffer >> 8
.8eca	a9 19		lda #$19			lda 	#DecimalBuffer & $FF
.8ecc	20 a2 94	jsr $94a2			jsr 	PrintStringXA
.8ecf	80 be		bra $8e8f			bra 	Command_Print 				; loop round clearing carry so NL if end
.8ed1					_CPNewLine:
.8ed1	a9 0d		lda #$0d			lda 	#13
.8ed3	80 02		bra $8ed7			bra 	_CPPrintChar
.8ed5					_CPTab:
.8ed5	a9 09		lda #$09			lda 	#9 							; print TAB
.8ed7					_CPPrintChar:
.8ed7	20 0d af	jsr $af0d			jsr 	EXTPrintCharacter
.8eda					_CPContinueWithSameLine:
.8eda	38		sec				sec 								; loop round with carry set, which
.8edb	80 b3		bra $8e90			bra 	_CPLoop 					; will inhibit final CR
.8edd					_CPExit:
.8edd	28		plp				plp 								; get last action flag
.8ede	b0 05		bcs $8ee5			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.8ee0	a9 0d		lda #$0d			lda 	#13 						; print new line
.8ee2	20 0d af	jsr $af0d			jsr 	EXTPrintCharacter
.8ee5					_CPExit2:
.8ee5	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/procedure.asm

=2					ParameterStackPos = 2
.8ee6					CallProcedure:
.8ee6	a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start storing parameters at 2.
.8ee8	b1 30		lda ($30),y			lda 	(codePtr),y
.8eea	c9 29		cmp #$29			cmp 	#KWD_RPAREN
.8eec	f0 0c		beq $8efa			beq 	_CPEndParam
.8eee					_CPParamLoop:
.8eee	20 52 98	jsr $9852			jsr 	EvaluateExpression 			; get parameter onto stack
.8ef1	e8		inx				inx 								; bump next stack
.8ef2	b1 30		lda ($30),y			lda 	(codePtr),y
.8ef4	c8		iny				iny
.8ef5	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if comma, go back and try again.
.8ef7	f0 f5		beq $8eee			beq 	_CPParamLoop
.8ef9	88		dey				dey 								; unpick.
.8efa					_CPEndParam:
.8efa	8e 96 04	stx $0496			stx 	LastParameter 				; save the last parameters index.
.8efd	c8		iny				iny									; skip right bracket
.8efe	a9 b3		lda #$b3			lda 	#STK_PROC+3 				; allocate 6 bytes on the return stack.
.8f00	20 b5 a0	jsr $a0b5			jsr 	StackOpen
.8f03	20 f9 a0	jsr $a0f9			jsr 	STKSaveCodePosition 		; save loop position
.8f06	ad 08 04	lda $0408			lda 	NSMantissa0 				; copy variable (e.g. procedure) address to zTemp0
.8f09	85 36		sta $36				sta 	zTemp0 						; this is the DATA not the RECORD
.8f0b	ad 10 04	lda $0410			lda 	NSMantissa1
.8f0e	85 37		sta $37				sta 	zTemp0+1
.8f10	a0 01		ldy #$01			ldy 	#1 							; copy code address back.
.8f12	b2 36		lda ($36)			lda 	(zTemp0)
.8f14	85 30		sta $30				sta 	safePtr
.8f16	b1 36		lda ($36),y			lda 	(zTemp0),y
.8f18	85 31		sta $31				sta 	safePtr+1
.8f1a	c8		iny				iny
.8f1b	b1 36		lda ($36),y			lda 	(zTemp0),y
.8f1d	85 32		sta $32				sta 	safePtr+2
.8f1f	c8		iny				iny
.8f20	b1 36		lda ($36),y			lda 	(zTemp0),y
.8f22	85 33		sta $33				sta 	safePtr+3
.8f24	c8		iny				iny 								; get Y offset -> Y
.8f25	b1 36		lda ($36),y			lda 	(zTemp0),y
.8f27	a8		tay				tay
.8f28	a2 02		ldx #$02			ldx 	#ParameterStackPos 			; start position of parameters
.8f2a	ec 96 04	cpx $0496			cpx	 	LastParameter 				; check no parameters at the start
.8f2d	f0 13		beq $8f42			beq 	_ParamExit 					; if so, exit.
.8f2f					_ParamExtract:
.8f2f	ca		dex				dex 								; put a local term on the level before
.8f30	20 0f 8e	jsr $8e0f			jsr 	LocaliseNextTerm			; also pushes original param value to basic stack
.8f33	20 4d 8d	jsr $8d4d			jsr 	AssignVariable 				; assign stacked value to the variable.
.8f36	e8		inx				inx 								; advance to next parameter to do.
.8f37	e8		inx				inx
.8f38	ec 96 04	cpx $0496			cpx 	LastParameter 				; are we done ?
.8f3b	f0 05		beq $8f42			beq 	_ParamExit
.8f3d	20 8a a7	jsr $a78a			jsr 	CheckComma 					; comma seperating parameters
.8f40	80 ed		bra $8f2f			bra 	_ParamExtract
.8f42					_ParamExit:
.8f42	20 82 a7	jsr $a782			jsr 	CheckRightBracket 			; check )
.8f45	60		rts				rts 								; and continue from here
.a774					Command_ENDPROC:
.a774	a9 b0		lda #$b0			lda 	#STK_PROC 					; check TOS is this
.a776	a2 14		ldx #$14			ldx 	#ERRID_PROC
.a778	20 e1 a0	jsr $a0e1			jsr 	StackCheckFrame
.a77b	20 0a a1	jsr $a10a			jsr 	STKLoadCodePosition 		; restore code position
.a77e	20 d3 a0	jsr $a0d3			jsr 	StackClose
.a781	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/read.asm

.8f46					Command_Read:
.8f46	a2 00		ldx #$00			ldx 	#0 							; evaluate the term which is the var/array element to assign
.8f48	20 23 9b	jsr $9b23			jsr 	EvaluateTerm
.8f4b	bd 00 04	lda $0400,x			lda 	NSStatus,x
.8f4e	29 20		and #$20			and 	#NSBIsReference				; get status byte on stack, identifies int, float, string.
.8f50	f0 4a		beq $8f9c			beq 	_CRSyntax 					; check reference (bit 0)
.8f52	20 e5 8f	jsr $8fe5			jsr 	SwapDataCodePtrs 			; swap code and data
.8f55	ad 9c 04	lda $049c			lda 	inDataStatement 			; if in a data statement, we don't need to search
.8f58	d0 20		bne $8f7a			bne 	_CRContinueData
.8f5a					_CRKeepSearching:
.8f5a	a9 a4		lda #$a4			lda 	#KWD_DATA 					; scan for instruction
.8f5c	aa		tax				tax
.8f5d	20 bb 93	jsr $93bb			jsr 	ScanForward
.8f60	c9 a4		cmp #$a4			cmp 	#KWD_DATA 					; found data ?
.8f62	f0 16		beq $8f7a			beq 	_CRHaveData 				; found it
.8f64	18		clc				clc
.8f65	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8f67	65 30		adc $30				adc 	codePtr
.8f69	85 30		sta $30				sta 	codePtr
.8f6b	90 02		bcc $8f6f			bcc 	_CREExit
.8f6d	e6 31		inc $31				inc 	codePtr+1
.8f6f					_CREExit:
.8f6f	a0 03		ldy #$03			ldy 	#3 							; start of line.
.8f71	b2 30		lda ($30)			lda 	(codePtr)
.8f73	d0 e5		bne $8f5a			bne 	_CRKeepSearching
.8f75	a9 0b		lda #$0b		lda	#11
.8f77	4c 49 94	jmp $9449		jmp	ErrorHandler
.8f7a					_CRHaveData:
.8f7a					_CRContinueData:
.8f7a	a2 01		ldx #$01			ldx 	#1
.8f7c	20 4c 9f	jsr $9f4c			jsr 	EvaluateValue 				; evaluate value into slot # 1
.8f7f	ca		dex				dex
.8f80	20 4d 8d	jsr $8d4d			jsr		AssignVariable 				; do the assignment
.8f83	9c 9c 04	stz $049c			stz 	inDataStatement 			; clear in data
.8f86	b1 30		lda ($30),y			lda 	(codePtr),y
.8f88	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not, end of data statement
.8f8a	d0 04		bne $8f90			bne 	_CRSwapBack
.8f8c	c8		iny				iny 								; consume comma
.8f8d	ee 9c 04	inc $049c			inc 	inDataStatement 			; set in data statement currently.
.8f90					_CRSwapBack:
.8f90	20 e5 8f	jsr $8fe5			jsr 	SwapDataCodePtrs			; swap them back.
.8f93	b1 30		lda ($30),y			lda 	(codePtr),y
.8f95	c8		iny				iny
.8f96	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8f98	f0 ac		beq $8f46			beq 	Command_Read 				; if so go round again.
.8f9a	88		dey				dey 								; unpick get.
.8f9b	60		rts				rts
.8f9c					_CRSyntax:
.8f9c	4c 68 ad	jmp $ad68			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/rem.asm

.8f9f					RemCommand:
.8f9f	b1 30		lda ($30),y			lda 	(codePtr),y
.8fa1	c9 ff		cmp #$ff			cmp 	#KWC_STRING
.8fa3	d0 06		bne $8fab			bne 	_RMExit
.8fa5	c8		iny				iny
.8fa6	98		tya				tya
.8fa7	38		sec				sec
.8fa8	71 30		adc ($30),y			adc 	(codePtr),y
.8faa	a8		tay				tay
.8fab					_RMExit:
.8fab	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/repeat.asm

.8fac					Command_REPEAT:
.8fac	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; allocate 6 bytes on the return stack.
.8fae	20 b5 a0	jsr $a0b5			jsr 	StackOpen
.8fb1	20 f9 a0	jsr $a0f9			jsr 	STKSaveCodePosition 		; save loop position
.8fb4	60		rts				rts
.8fb5					Command_UNTIL:
.8fb5	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; check REPEAT is TOS
.8fb7	a2 0f		ldx #$0f			ldx 	#ERRID_REPEAT 				; this error
.8fb9	20 e1 a0	jsr $a0e1			jsr 	StackCheckFrame
.8fbc	a2 00		ldx #$00			ldx 	#0
.8fbe	20 55 9f	jsr $9f55			jsr 	EvaluateNumber 				; work out the number
.8fc1	20 31 a0	jsr $a031			jsr 	NSMIsZero 					; check if zero
.8fc4	f0 04		beq $8fca			beq 	_CULoopBack 				; if so keep looping
.8fc6	20 d3 a0	jsr $a0d3			jsr 	StackClose		 			; return
.8fc9	60		rts				rts
.8fca					_CULoopBack:
.8fca	20 0a a1	jsr $a10a			jsr 	STKLoadCodePosition 		; loop back
.8fcd	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/restore.asm

.8fce					Command_Restore:
.8fce	20 e5 8f	jsr $8fe5			jsr 	SwapDataCodePtrs 			; swap code and data
.8fd1	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8fd3	85 30		sta $30				sta 	codePtr
.8fd5	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8fd7	85 31		sta $31				sta 	codePtr+1
.8fd9	20 e5 8f	jsr $8fe5			jsr 	SwapDataCodePtrs 			; put them back
.8fdc	a9 03		lda #$03			lda 	#3 							; start at offset 3, e.g. first instruction of first line.
.8fde	8d 9b 04	sta $049b			sta 	dataPointer+4
.8fe1	9c 9c 04	stz $049c			stz 	inDataStatement 			; not in data statement
.8fe4	60		rts				rts
.8fe5					SwapDataCodePtrs:
.8fe5	da		phx				phx
.8fe6	a2 03		ldx #$03			ldx 	#3 							; swap 32 bit code pointer over
.8fe8					_SDCPLoop:
.8fe8	b5 30		lda $30,x			lda 	safePtr,x
.8fea	48		pha				pha
.8feb	bd 97 04	lda $0497,x			lda 	dataPointer,x
.8fee	95 30		sta $30,x			sta 	safePtr,x
.8ff0	68		pla				pla
.8ff1	9d 97 04	sta $0497,x			sta 	dataPointer,x
.8ff4	ca		dex				dex
.8ff5	10 f1		bpl $8fe8			bpl 	_SDCPLoop
.8ff7	ad 9b 04	lda $049b			lda 	dataPointer+4 				; swap Y position over.
.8ffa	8c 9b 04	sty $049b			sty 	dataPointer+4
.8ffd	a8		tay				tay
.8ffe	fa		plx				plx
.8fff	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/run.asm

.9000					CommandRUN:
.9000	20 7a 8a	jsr $8a7a			jsr 	ClearCommand 				; clear variable/stacks/etc.
.9003	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.9005	85 30		sta $30				sta 	codePtr
.9007	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.9009	85 31		sta $31				sta 	codePtr+1
.900b					RUNNewLine:
.900b	b2 30		lda ($30)			lda 	(codePtr)
.900d	f0 5e		beq $906d			beq 	CRNoProgram         		; no then END.
.900f	a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack
.9011	9a		txs				txs
.9012					RUNCodePointerLine:
.9012	a0 02		ldy #$02			ldy 	#2 							; start of program
.9014					_CRIncMainLoop:
.9014	0e 93 04	asl $0493			asl 	breakCheck 					; clears 1 time in 8
.9017	d0 05		bne $901e			bne 	_CRNoBreakCheck
.9019	20 4e af	jsr $af4e			jsr 	EXTBreakCheck 				; break check
.901c	f0 4a		beq $9068			beq 	_CRBreak
.901e					_CRNoBreakCheck:
.901e	c8		iny				iny
.901f					_CRMainLoop:
.901f	9c 90 04	stz $0490			stz 	stringInitialised 			; clear the temporary string initialised flag.
.9022	b1 30		lda ($30),y			lda 	(codePtr),y
.9024	10 10		bpl $9036			bpl 	_CRNotKeyword
.9026	c9 97		cmp #$97			cmp 	#KWC_LAST_UNARY+1 			; if after unary, legitimate command
.9028	b0 04		bcs $902e			bcs 	_CRIsKeyword
.902a	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if unary, syntax error.
.902c	b0 34		bcs $9062			bcs		_CRSyntaxError
.902e					_CRIsKeyword:
.902e	c8		iny				iny 								; consume command
.902f	0a		asl a				asl 	a 							; double losing the MSB which is '1' as tokens are $80-$FF
.9030	aa		tax				tax 								; put in X for vector jump
.9031	20 65 90	jsr $9065			jsr 	_CRCallVector0 				; call the vector - effectively jsr (vectortable,X)
.9034	80 e9		bra $901f			bra 	_CRMainLoop 				; and loop round
.9036					_CRNotKeyword:
.9036	c9 3a		cmp #$3a			cmp 	#KWD_COLON 					; if a :, consume it and go round.
.9038	f0 da		beq $9014			beq 	_CRIncMainLoop
.903a	c9 40		cmp #$40			cmp 	#$40 						; variable/call reference
.903c	90 05		bcc $9043			bcc 	_CRNotVariable
.903e					_CRGoLet:
.903e	20 11 8d	jsr $8d11			jsr 	LetCommand
.9041	80 dc		bra $901f			bra 	_CRMainLoop
.9043					_CRNotVariable:
.9043	c9 10		cmp #$10			cmp 	#KWD_AT 					; handle @
.9045	f0 f7		beq $903e			beq 	_CRGoLet
.9047	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; handle ? !
.9049	f0 f3		beq $903e			beq 	_CRGoLet
.904b	c9 21		cmp #$21			cmp 	#KWD_PLING
.904d	f0 ef		beq $903e			beq 	_CRGoLet
.904f	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; handle ' (comment)
.9051	f0 09		beq $905c			beq 	_CRGoRem
.9053	c9 2e		cmp #$2e			cmp 	#KWD_PERIOD 				; handle . (assembler label)
.9055	d0 0b		bne $9062			bne 	_CRSyntaxError
.9057	20 1a 89	jsr $891a			jsr 	LabelHere
.905a	80 c3		bra $901f			bra 	_CRMainLoop
.905c					_CRGoRem:
.905c	c8		iny				iny
.905d	20 9f 8f	jsr $8f9f			jsr 	RemCommand
.9060	80 bd		bra $901f			bra 	_CRMainLoop
.9062					_CRSyntaxError:
.9062	4c 68 ad	jmp $ad68			jmp 	SyntaxError
.9065					_CRCallVector0:
.9065	7c 10 91	jmp ($9110,x)			jmp 	(VectorSet0,x)
.9068					_CRBreak:
.9068	a9 01		lda #$01		lda	#1
.906a	4c 49 94	jmp $9449		jmp	ErrorHandler
.906d					CRNoProgram:
.906d	4c 97 8b	jmp $8b97			jmp 	EndCommand
.9070					EOLCommand:
.9070	18		clc				clc
.9071	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.9073	65 30		adc $30				adc 	codePtr
.9075	85 30		sta $30				sta 	codePtr
.9077	90 02		bcc $907b			bcc 	_CREExit
.9079	e6 31		inc $31				inc 	codePtr+1
.907b					_CREExit:
.907b	80 8e		bra $900b			bra 	RunNewLine
.907d					Shift1Command:
.907d	b1 30		lda ($30),y			lda 	(codePtr),y
.907f	c8		iny				iny
.9080	0a		asl a				asl 	a
.9081	aa		tax				tax
.9082	7c 72 91	jmp ($9172,x)			jmp 	(VectorSet1,x)
.9085					Shift2Command:
.9085	b1 30		lda ($30),y			lda 	(codePtr),y
.9087	c8		iny				iny
.9088	0a		asl a				asl 	a
.9089	aa		tax				tax
.908a	7c 8a 91	jmp ($918a,x)			jmp 	(VectorSet2,x)
.908d					Unused1:
.908d					Unused2:
.908d					Unused3:
.908d					Unused4:
.908d	4c 68 ad	jmp $ad68			jmp 	SyntaxError
>9090							.align 2

;******  Processing file: ./common/commands/../generated/vectors.dat

.9090					VectorSetPunc:
>9090	f3 95					.word	ShiftLeft                        ; $00 <<
>9092	ed 94					.word	BinaryCompareLessEqual           ; $01 <=
>9094	e3 94					.word	BinaryCompareNotEqual            ; $02 <>
>9096	68 ad					.word	SyntaxError                      ; $03 !!3
>9098	68 ad					.word	SyntaxError                      ; $04 ><
>909a	f7 94					.word	BinaryCompareGreaterEqual        ; $05 >=
>909c	f6 95					.word	ShiftRight                       ; $06 >>
>909e	68 ad					.word	SyntaxError                      ; $07 !!7
>90a0	68 ad					.word	SyntaxError                      ; $08 !!8
>90a2	68 ad					.word	SyntaxError                      ; $09 !!9
>90a4	68 ad					.word	SyntaxError                      ; $0a !!10
>90a6	68 ad					.word	SyntaxError                      ; $0b !!11
>90a8	68 ad					.word	SyntaxError                      ; $0c !!12
>90aa	68 ad					.word	SyntaxError                      ; $0d !!13
>90ac	68 ad					.word	SyntaxError                      ; $0e !!14
>90ae	68 ad					.word	SyntaxError                      ; $0f !!15
>90b0	68 ad					.word	SyntaxError                      ; $10 @
>90b2	68 ad					.word	SyntaxError                      ; $11 !!17
>90b4	68 ad					.word	SyntaxError                      ; $12 !!18
>90b6	68 ad					.word	SyntaxError                      ; $13 [
>90b8	9b a7					.word	IntegerDivide                    ; $14 \
>90ba	68 ad					.word	SyntaxError                      ; $15 ]
>90bc	7c 97					.word	EorInteger                       ; $16 ^
>90be	68 ad					.word	SyntaxError                      ; $17 _
>90c0	68 ad					.word	SyntaxError                      ; $18 `
>90c2	68 ad					.word	SyntaxError                      ; $19 !!25
>90c4	68 ad					.word	SyntaxError                      ; $1a !!26
>90c6	68 ad					.word	SyntaxError                      ; $1b {
>90c8	36 97					.word	OraInteger                       ; $1c |
>90ca	68 ad					.word	SyntaxError                      ; $1d }
>90cc	68 ad					.word	SyntaxError                      ; $1e ~
>90ce	68 ad					.word	SyntaxError                      ; $1f [7m<7F>[m
>90d0	68 ad					.word	SyntaxError                      ; $20
>90d2	c2 97					.word	WordIndirect                     ; $21 !
>90d4	68 ad					.word	SyntaxError                      ; $22 "
>90d6	68 ad					.word	SyntaxError                      ; $23 #
>90d8	68 ad					.word	SyntaxError                      ; $24 $
>90da	e8 a7					.word	IntegerModulus                   ; $25 %
>90dc	f0 96					.word	AndInteger                       ; $26 &
>90de	68 ad					.word	SyntaxError                      ; $27 '
>90e0	68 ad					.word	SyntaxError                      ; $28 (
>90e2	68 ad					.word	SyntaxError                      ; $29 )
>90e4	5d a8					.word	MulInteger                       ; $2a *
>90e6	8a 96					.word	AddInteger                       ; $2b +
>90e8	68 ad					.word	SyntaxError                      ; $2c ,
>90ea	c5 96					.word	SubInteger                       ; $2d -
>90ec	68 ad					.word	SyntaxError                      ; $2e .
>90ee	f4 a9					.word	FDivideCommand                   ; $2f /
>90f0	68 ad					.word	SyntaxError                      ; $30 0
>90f2	68 ad					.word	SyntaxError                      ; $31 1
>90f4	68 ad					.word	SyntaxError                      ; $32 2
>90f6	68 ad					.word	SyntaxError                      ; $33 3
>90f8	68 ad					.word	SyntaxError                      ; $34 4
>90fa	68 ad					.word	SyntaxError                      ; $35 5
>90fc	68 ad					.word	SyntaxError                      ; $36 6
>90fe	68 ad					.word	SyntaxError                      ; $37 7
>9100	68 ad					.word	SyntaxError                      ; $38 8
>9102	68 ad					.word	SyntaxError                      ; $39 9
>9104	68 ad					.word	SyntaxError                      ; $3a :
>9106	68 ad					.word	SyntaxError                      ; $3b ;
>9108	cf 94					.word	BinaryCompareLess                ; $3c <
>910a	c5 94					.word	BinaryCompareEqual               ; $3d =
>910c	d9 94					.word	BinaryCompareGreater             ; $3e >
>910e	e9 97					.word	ByteIndirect                     ; $3f ?
.9110					VectorSet0:
>9110	70 90					.word	EOLCommand                       ; $80 !0:EOF
>9112	7d 90					.word	Shift1Command                    ; $81 !1:SH1
>9114	85 90					.word	Shift2Command                    ; $82 !2:SH2
>9116	3a ab					.word	AbsUnary                         ; $83 ABS(
>9118	b3 9c					.word	AllocUnary                       ; $84 ALLOC(
>911a	4a ab					.word	AscUnary                         ; $85 ASC(
>911c	d3 9d					.word	ChrUnary                         ; $86 CHR$(
>911e	c1 94					.word	UnaryFalse                       ; $87 FALSE
>9120	57 ab					.word	FracUnary                        ; $88 FRAC(
>9122	6d ab					.word	IntUnary                         ; $89 INT(
>9124	c3 ab					.word	IsValUnary                       ; $8a ISVAL(
>9126	ad 9e					.word	Unary_Left                       ; $8b LEFT$(
>9128	7f ab					.word	LenUnary                         ; $8c LEN(
>912a	d7 9e					.word	Unary_Mid                        ; $8d MID$(
>912c	23 9d					.word	Unary_Not                        ; $8e NOT(
>912e	39 9d					.word	Unary_Random                     ; $8f RANDOM(
>9130	bd 9e					.word	Unary_Right                      ; $90 RIGHT$(
>9132	52 9d					.word	Unary_Rnd                        ; $91 RND(
>9134	99 ab					.word	SgnUnary                         ; $92 SGN(
>9136	e5 9d					.word	SpcUnary                         ; $93 SPC(
>9138	00 9e					.word	Unary_Str                        ; $94 STR$(
>913a	b5 94					.word	UnaryTrue                        ; $95 TRUE
>913c	b9 ab					.word	ValUnary                         ; $96 VAL(
>913e	9a 8b					.word	ForCommand                       ; $97 FOR
>9140	e7 8c					.word	IfCommand                        ; $98 IF
>9142	8d 90					.word	Unused1                          ; $99 PROC
>9144	ac 8f					.word	Command_REPEAT                   ; $9a REPEAT
>9146	1a 94					.word	Command_WHILE                    ; $9b WHILE
>9148	10 8d					.word	EndIf                            ; $9c ENDIF
>914a	74 a7					.word	Command_ENDPROC                  ; $9d ENDPROC
>914c	54 8c					.word	NextCommand                      ; $9e NEXT
>914e	8d 90					.word	Unused4                          ; $9f THEN
>9150	b5 8f					.word	Command_UNTIL                    ; $a0 UNTIL
>9152	3b 94					.word	Command_WEND                     ; $a1 WEND
>9154	40 8a					.word	CallCommand                      ; $a2 CALL
>9156	68 ad					.word	SyntaxError                      ; $a3 CLS
>9158	d2 8a					.word	Command_Data                     ; $a4 DATA
>915a	da 8a					.word	DimCommand                       ; $a5 DIM
>915c	8d 90					.word	Unused3                          ; $a6 DOWNTO
>915e	09 8d					.word	ElseCode                         ; $a7 ELSE
>9160	ad 8c					.word	Command_GOSUB                    ; $a8 GOSUB
>9162	cb 8c					.word	GotoCommand                      ; $a9 GOTO
>9164	11 8d					.word	LetCommand                       ; $aa LET
>9166	01 8e					.word	Command_LOCAL                    ; $ab LOCAL
>9168	8f 8e					.word	Command_Print                    ; $ac PRINT
>916a	46 8f					.word	Command_Read                     ; $ad READ
>916c	9f 8f					.word	RemCommand                       ; $ae REM
>916e	bd 8c					.word	Command_RETURN                   ; $af RETURN
>9170	8d 90					.word	Unused2                          ; $b0 TO
.9172					VectorSet1:
>9172	68 ad					.word	SyntaxError                      ; $80 !0:EOF
>9174	68 ad					.word	SyntaxError                      ; $81 !1:SH1
>9176	68 ad					.word	SyntaxError                      ; $82 !2:SH2
>9178	11 8a					.word	AssembleCommand                  ; $83 ASSEMBLE
>917a	30 8a					.word	AssertCommand                    ; $84 ASSERT
>917c	7a 8a					.word	ClearCommand                     ; $85 CLEAR
>917e	97 8b					.word	EndCommand                       ; $86 END
>9180	66 8d					.word	Command_List                     ; $87 LIST
>9182	85 8e					.word	NewCommand                       ; $88 NEW
>9184	ce 8f					.word	Command_Restore                  ; $89 RESTORE
>9186	00 90					.word	CommandRUN                       ; $8a RUN
>9188	12 92					.word	StopCommand                      ; $8b STOP
.918a					VectorSet2:
>918a	68 ad					.word	SyntaxError                      ; $80 !0:EOF
>918c	68 ad					.word	SyntaxError                      ; $81 !1:SH1
>918e	68 ad					.word	SyntaxError                      ; $82 !2:SH2
>9190	27 ac					.word	Assemble_adc                     ; $83 ADC
>9192	1f ac					.word	Assemble_and                     ; $84 AND
>9194	3b ac					.word	Assemble_asl                     ; $85 ASL
>9196	a5 ac					.word	Assemble_bcc                     ; $86 BCC
>9198	a9 ac					.word	Assemble_bcs                     ; $87 BCS
>919a	b1 ac					.word	Assemble_beq                     ; $88 BEQ
>919c	68 ac					.word	Assemble_bit                     ; $89 BIT
>919e	99 ac					.word	Assemble_bmi                     ; $8a BMI
>91a0	ad ac					.word	Assemble_bne                     ; $8b BNE
>91a2	95 ac					.word	Assemble_bpl                     ; $8c BPL
>91a4	b5 ac					.word	Assemble_bra                     ; $8d BRA
>91a6	b9 ac					.word	Assemble_brk                     ; $8e BRK
>91a8	9d ac					.word	Assemble_bvc                     ; $8f BVC
>91aa	a1 ac					.word	Assemble_bvs                     ; $90 BVS
>91ac	c1 ac					.word	Assemble_clc                     ; $91 CLC
>91ae	15 ad					.word	Assemble_cld                     ; $92 CLD
>91b0	d5 ac					.word	Assemble_cli                     ; $93 CLI
>91b2	05 ad					.word	Assemble_clv                     ; $94 CLV
>91b4	33 ac					.word	Assemble_cmp                     ; $95 CMP
>91b6	7c ac					.word	Assemble_cpx                     ; $96 CPX
>91b8	77 ac					.word	Assemble_cpy                     ; $97 CPY
>91ba	59 ac					.word	Assemble_dec                     ; $98 DEC
>91bc	11 ad					.word	Assemble_dex                     ; $99 DEX
>91be	ed ac					.word	Assemble_dey                     ; $9a DEY
>91c0	23 ac					.word	Assemble_eor                     ; $9b EOR
>91c2	5e ac					.word	Assemble_inc                     ; $9c INC
>91c4	21 ad					.word	Assemble_inx                     ; $9d INX
>91c6	0d ad					.word	Assemble_iny                     ; $9e INY
>91c8	90 ac					.word	Assemble_jmp                     ; $9f JMP
>91ca	8b ac					.word	Assemble_jsr                     ; $a0 JSR
>91cc	2f ac					.word	Assemble_lda                     ; $a1 LDA
>91ce	54 ac					.word	Assemble_ldx                     ; $a2 LDX
>91d0	72 ac					.word	Assemble_ldy                     ; $a3 LDY
>91d2	45 ac					.word	Assemble_lsr                     ; $a4 LSR
>91d4	25 ad					.word	Assemble_nop                     ; $a5 NOP
>91d6	1b ac					.word	Assemble_ora                     ; $a6 ORA
>91d8	d1 ac					.word	Assemble_pha                     ; $a7 PHA
>91da	bd ac					.word	Assemble_php                     ; $a8 PHP
>91dc	19 ad					.word	Assemble_phx                     ; $a9 PHX
>91de	d9 ac					.word	Assemble_phy                     ; $aa PHY
>91e0	e1 ac					.word	Assemble_pla                     ; $ab PLA
>91e2	c5 ac					.word	Assemble_plp                     ; $ac PLP
>91e4	2d ad					.word	Assemble_plx                     ; $ad PLX
>91e6	e9 ac					.word	Assemble_ply                     ; $ae PLY
>91e8	40 ac					.word	Assemble_rol                     ; $af ROL
>91ea	4a ac					.word	Assemble_ror                     ; $b0 ROR
>91ec	cd ac					.word	Assemble_rti                     ; $b1 RTI
>91ee	dd ac					.word	Assemble_rts                     ; $b2 RTS
>91f0	37 ac					.word	Assemble_sbc                     ; $b3 SBC
>91f2	c9 ac					.word	Assemble_sec                     ; $b4 SEC
>91f4	29 ad					.word	Assemble_sed                     ; $b5 SED
>91f6	e5 ac					.word	Assemble_sei                     ; $b6 SEI
>91f8	2b ac					.word	Assemble_sta                     ; $b7 STA
>91fa	1d ad					.word	Assemble_stp                     ; $b8 STP
>91fc	4f ac					.word	Assemble_stx                     ; $b9 STX
>91fe	6d ac					.word	Assemble_sty                     ; $ba STY
>9200	63 ac					.word	Assemble_stz                     ; $bb STZ
>9202	01 ad					.word	Assemble_tax                     ; $bc TAX
>9204	fd ac					.word	Assemble_tay                     ; $bd TAY
>9206	86 ac					.word	Assemble_trb                     ; $be TRB
>9208	81 ac					.word	Assemble_tsb                     ; $bf TSB
>920a	09 ad					.word	Assemble_tsx                     ; $c0 TSX
>920c	f1 ac					.word	Assemble_txa                     ; $c1 TXA
>920e	f9 ac					.word	Assemble_txs                     ; $c2 TXS
>9210	f5 ac					.word	Assemble_tya                     ; $c3 TYA

;******  Return to file: ./common/commands/run.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/stop.asm

.9212					StopCommand:
.9212	a9 08		lda #$08		lda	#8
.9214	4c 49 94	jmp $9449		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/expandline.asm

.9217					ListConvertLine:
.9217	9c 9d 04	stz $049d			stz 	tbOffset
.921a	9c a9 04	stz $04a9			stz 	tokenBuffer
.921d	a0 02		ldy #$02			ldy 	#2 							; convert line number to string
.921f	b1 30		lda ($30),y			lda 	(codePtr),y
.9221	aa		tax				tax
.9222	88		dey				dey
.9223	b1 30		lda ($30),y			lda 	(codePtr),y
.9225	20 de a8	jsr $a8de			jsr 	ConvertInt16
.9228	85 36		sta $36				sta 	zTemp0 						; copy number into buffer
.922a	86 37		stx $37				stx 	zTemp0+1
.922c	a0 00		ldy #$00			ldy 	#0
.922e					_LCCopyNumber:
.922e	b1 36		lda ($36),y			lda 	(zTemp0),y
.9230	20 30 93	jsr $9330			jsr 	LCLWrite
.9233	c8		iny				iny
.9234	b1 36		lda ($36),y			lda 	(zTemp0),y
.9236	d0 f6		bne $922e			bne 	_LCCopyNumber
.9238					_LCPadOut:
.9238	a9 20		lda #$20			lda 	#' '						; pad out to 6 characters
.923a	20 30 93	jsr $9330			jsr 	LCLWrite
.923d	ad 9d 04	lda $049d			lda 	tbOffset
.9240	c9 06		cmp #$06			cmp 	#6
.9242	d0 f4		bne $9238			bne 	_LCPadOut
.9244	a0 03		ldy #$03			ldy 	#3 							; start position.
.9246					_LCMainLoop:
.9246	b1 30		lda ($30),y			lda 	(codePtr),y
.9248	c9 80		cmp #$80			cmp 	#KWC_EOL 					; end of line ?
.924a	f0 17		beq $9263			beq 	_LCExit
.924c	c9 10		cmp #$10			cmp 	#16 						; 0-5 are the double punctuations
.924e	90 14		bcc $9264			bcc 	_LCDoubles
.9250	c9 20		cmp #$20			cmp 	#32 						; 16-31 are shifted punctuation from 64-91
.9252	90 20		bcc $9274			bcc 	_LCShiftPunc
.9254	c9 40		cmp #$40			cmp 	#64 						; 32-64 are as stored, punc and digits
.9256	90 2b		bcc $9283			bcc 	_LCPunctuation
.9258	c9 80		cmp #$80			cmp 	#128 						; 64-127 are variable identifiers.
.925a	90 2d		bcc $9289			bcc 	_LCIdentifiers
.925c	c9 fe		cmp #$fe			cmp 	#254 						; 128-253 are tokenised words
.925e	90 49		bcc $92a9			bcc 	_LCTokens
.9260	4c 04 93	jmp $9304			jmp 	_LCData 					; 254-5 are data objects
.9263					_LCExit:
.9263	60		rts				rts
.9264					_LCDoubles:
.9264	48		pha				pha
.9265	4a		lsr a				lsr 	a 							; put bit 2 into bit 1
.9266	29 02		and #$02			and 	#2
.9268	09 3c		ora #$3c			ora 	#60 						; make < >
.926a	20 30 93	jsr $9330			jsr 	LCLWrite
.926d	68		pla				pla 								; restore, do lower bit
.926e	29 03		and #$03			and 	#3
.9270	09 3c		ora #$3c			ora 	#60
.9272	80 0f		bra $9283			bra		_LCPunctuation 				; print, increment, loop
.9274					_LCShiftPunc:
.9274	aa		tax				tax 								; save in X
.9275	29 07		and #$07			and 	#7 							; lower 3 bits
.9277	f0 02		beq $927b			beq 	_LCNoAdd
.9279	09 18		ora #$18			ora 	#24 						; adds $18 to it.
.927b					_LCNoAdd:
.927b	e0 18		cpx #$18			cpx 	#24 						; if >= 24 add $20
.927d	90 02		bcc $9281			bcc 	_LCNoAdd2
.927f	09 20		ora #$20			ora 	#32 						; adds $20
.9281					_LCNoAdd2:
.9281	09 40		ora #$40			ora 	#$40 						; shift into 64-127 range and fall through.
.9283					_LCPunctuation:
.9283	c8		iny				iny 								; consume character
.9284	20 30 93	jsr $9330			jsr 	LCLWrite 					; write it out.
.9287	80 bd		bra $9246			bra 	_LCMainLoop 				; go round again.
.9289					_LCIdentifiers:
.9289	18		clc				clc 								; convert to physical address
.928a	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.928c	85 37		sta $37				sta 	zTemp0+1
.928e	c8		iny				iny
.928f	b1 30		lda ($30),y			lda 	(codePtr),y
.9291	85 36		sta $36				sta 	zTemp0
.9293	c8		iny				iny
.9294	5a		phy				phy 								; save position
.9295	a0 07		ldy #$07			ldy 	#7 							; output the identifier.
.9297					_LCOutIdentifier:
.9297	c8		iny				iny
.9298	b1 36		lda ($36),y			lda 	(zTemp0),y
.929a	29 7f		and #$7f			and 	#$7F
.929c	20 5e 93	jsr $935e			jsr 	LCLLowerCase
.929f	20 30 93	jsr $9330			jsr 	LCLWrite
.92a2	b1 36		lda ($36),y			lda 	(zTemp0),y				 	; ends when bit 7 set.
.92a4	10 f1		bpl $9297			bpl 	_LCOutIdentifier
.92a6	7a		ply				ply 								; restore position
.92a7	80 9d		bra $9246			bra 	_LCMainLoop
.92a9					_LCTokens:
.92a9	aa		tax				tax 								; token in X
.92aa	a9 2e		lda #$2e			lda 	#((KeywordSet2) & $FF)
.92ac	85 36		sta $36				sta 	0+zTemp0
.92ae	a9 a3		lda #$a3			lda 	#((KeywordSet2) >> 8)
.92b0	85 37		sta $37				sta 	1+zTemp0
.92b2	e0 82		cpx #$82			cpx 	#$82
.92b4	f0 16		beq $92cc			beq 	_LCUseShift
.92b6	a9 ea		lda #$ea			lda 	#((KeywordSet1) & $FF)
.92b8	85 36		sta $36				sta 	0+zTemp0
.92ba	a9 a2		lda #$a2			lda 	#((KeywordSet1) >> 8)
.92bc	85 37		sta $37				sta 	1+zTemp0
.92be	e0 81		cpx #$81			cpx 	#$81
.92c0	f0 0a		beq $92cc			beq 	_LCUseShift
.92c2	a9 b8		lda #$b8			lda 	#((KeywordSet0) & $FF)
.92c4	85 36		sta $36				sta 	0+zTemp0
.92c6	a9 a1		lda #$a1			lda 	#((KeywordSet0) >> 8)
.92c8	85 37		sta $37				sta 	1+zTemp0
.92ca	80 01		bra $92cd			bra 	_LCNoShift
.92cc					_LCUseShift:
.92cc	c8		iny				iny
.92cd					_LCNoShift:
.92cd	20 3f 93	jsr $933f			jsr 	LCCheckSpaceRequired 		; do we need a space ?
.92d0	b1 30		lda ($30),y			lda 	(codePtr),y
.92d2	aa		tax				tax 								; into X
.92d3					_LCFindText:
.92d3	ca		dex				dex
.92d4	10 0e		bpl $92e4			bpl 	_LCFoundText 				; found text.
.92d6	b2 36		lda ($36)			lda 	(zTemp0) 					; length of text
.92d8	1a		inc a				inc 	a 							; one extra for size
.92d9	38		sec				sec 								; one extra for checksum
.92da	65 36		adc $36				adc 	zTemp0 						; go to next token
.92dc	85 36		sta $36				sta 	zTemp0
.92de	90 f3		bcc $92d3			bcc 	_LCFindText
.92e0	e6 37		inc $37				inc 	zTemp0+1
.92e2	80 ef		bra $92d3			bra 	_LCFindText
.92e4					_LCFoundText:
.92e4	5a		phy				phy 								; save List position
.92e5	b2 36		lda ($36)			lda 	(zTemp0)					; count to print
.92e7	aa		tax				tax
.92e8	a0 02		ldy #$02			ldy 	#2
.92ea					_LCCopyToken:
.92ea	b1 36		lda ($36),y			lda 	(zTemp0),y
.92ec	20 5e 93	jsr $935e			jsr 	LCLLowerCase
.92ef	20 30 93	jsr $9330			jsr 	LCLWrite
.92f2	c8		iny				iny
.92f3	ca		dex				dex
.92f4	d0 f4		bne $92ea			bne 	_LCCopyToken
.92f6	c9 28		cmp #$28			cmp 	#"(" 						; if last char not ( print a space
.92f8	f0 05		beq $92ff			beq 	_LCNoSpace
.92fa	a9 20		lda #$20			lda 	#' '
.92fc	20 30 93	jsr $9330			jsr 	LCLWrite
.92ff					_LCNoSpace:
.92ff	7a		ply				ply 								; restore position.
.9300	c8		iny				iny 								; consume token
.9301	4c 46 92	jmp $9246			jmp 	_LCMainLoop 				; and go around again.
.9304					_LCData:
.9304	48		pha				pha 								; save type $FE/$FF
.9305	a2 24		ldx #$24			ldx 	#'$' 						; figure out $ or "
.9307	c9 fe		cmp #$fe			cmp 	#$FE
.9309	f0 02		beq $930d			beq 	_LCHaveOpener
.930b	a2 22		ldx #$22			ldx 	#'"'
.930d					_LCHaveOpener:
.930d	8a		txa				txa 								; output prefix (# or ")
.930e	20 30 93	jsr $9330			jsr 	LCLWrite
.9311	c8		iny				iny 								; get count
.9312	b1 30		lda ($30),y			lda 	(codePtr),y
.9314	aa		tax				tax
.9315	c8		iny				iny 								; point at first character
.9316					_LCOutData:
.9316	b1 30		lda ($30),y			lda 	(codePtr),y
.9318	c9 00		cmp #$00			cmp 	#0
.931a	f0 03		beq $931f			beq 	_LCNoPrint
.931c	20 30 93	jsr $9330			jsr 	LCLWrite
.931f					_LCNoPrint:
.931f	c8		iny				iny
.9320	ca		dex				dex
.9321	d0 f3		bne $9316			bne 	_LCOutData
.9323	68		pla				pla 								; closing " required ?
.9324	c9 ff		cmp #$ff			cmp 	#$FF
.9326	d0 05		bne $932d			bne 	_LCNoQuote
.9328	a9 22		lda #$22			lda 	#'"'
.932a	20 30 93	jsr $9330			jsr 	LCLWrite
.932d					_LCNoQuote:
.932d	4c 46 92	jmp $9246			jmp 	_LCMainLoop
.9330					LCLWrite:
.9330	da		phx				phx
.9331	ae 9d 04	ldx $049d			ldx 	tbOffset
.9334	9d a9 04	sta $04a9,x			sta 	tokenBuffer,x
.9337	9e aa 04	stz $04aa,x			stz 	tokenBuffer+1,x
.933a	ee 9d 04	inc $049d			inc 	tbOffset
.933d	fa		plx				plx
.933e	60		rts				rts
.933f					LCCheckSpaceRequired:
.933f	ae 9d 04	ldx $049d			ldx 	tbOffset
.9342	bd a8 04	lda $04a8,x			lda 	tokenBuffer-1,x 			; previous character
.9345	20 5e 93	jsr $935e			jsr 	LCLLowerCase 				; saves a little effort
.9348	c9 30		cmp #$30			cmp 	#"0" 						; check if it was 0-9 A-Z a-z if so need space.
.934a	90 11		bcc $935d			bcc 	_LCCSRExit
.934c	c9 3a		cmp #$3a			cmp 	#"9"+1
.934e	90 08		bcc $9358			bcc 	_LCCSRSpace
.9350	c9 61		cmp #$61			cmp 	#"a"
.9352	90 09		bcc $935d			bcc 	_LCCSRExit
.9354	c9 7b		cmp #$7b			cmp 	#"z"+1
.9356	b0 05		bcs $935d			bcs 	_LCCSRExit
.9358					_LCCSRSpace:
.9358	a9 20		lda #$20			lda 	#' '
.935a	20 30 93	jsr $9330			jsr 	LCLWrite
.935d					_LCCSRExit:
.935d	60		rts				rts
.935e					LCLLowerCase:
.935e	c9 41		cmp #$41			cmp 	#"A"
.9360	90 06		bcc $9368			bcc 	_LCLLCOut
.9362	c9 5b		cmp #$5b			cmp 	#"Z"+1
.9364	b0 02		bcs $9368			bcs 	_LCLLCOut
.9366	69 20		adc #$20			adc 	#$20
.9368					_LCLLCOut:
.9368	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/procscan.asm

.9369					ProcedureScan:
.9369	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.936b	85 30		sta $30				sta 	codePtr
.936d	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.936f	85 31		sta $31				sta 	codePtr+1
.9371					_PSLoop:
.9371	b2 30		lda ($30)			lda 	(codePtr)
.9373	f0 42		beq $93b7			beq 	_PSExit
.9375	a0 03		ldy #$03			ldy 	#3 							; is it PROC ?
.9377	b1 30		lda ($30),y			lda 	(codePtr),y
.9379	c9 99		cmp #$99			cmp 	#KWD_PROC
.937b	d0 2d		bne $93aa			bne 	_PSNext
.937d	c8		iny				iny 								; get the address of the record to zTemp0 and
.937e	b1 30		lda ($30),y			lda 	(codePtr),y
.9380	29 c0		and #$c0			and 	#$C0
.9382	c9 40		cmp #$40			cmp 	#$40
.9384	d0 32		bne $93b8			bne 	_PSSyntax
.9386	b1 30		lda ($30),y			lda 	(codePtr),y
.9388	18		clc				clc
.9389	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.938b	85 37		sta $37				sta 	zTemp0+1
.938d	c8		iny				iny 								; LSB
.938e	b1 30		lda ($30),y			lda 	(codePtr),y
.9390	85 36		sta $36				sta 	zTemp0
.9392	c8		iny				iny 								; character after variable call.
.9393	98		tya				tya 								; save Y offset at +7
.9394	a0 07		ldy #$07			ldy 	#7
.9396	91 36		sta ($36),y			sta 	(zTemp0),y
.9398	a9 18		lda #$18			lda 	#NSTProcedure 				; mark it as procedure
.939a	a0 02		ldy #$02			ldy 	#2
.939c	91 36		sta ($36),y			sta 	(zTemp0),y
.939e	a2 00		ldx #$00			ldx 	#0 							; copy code-Ptr in
.93a0					_PSCopy:
.93a0	b5 30		lda $30,x			lda 	safePtr,x
.93a2	c8		iny				iny
.93a3	91 36		sta ($36),y			sta 	(zTemp0),y
.93a5	e8		inx				inx
.93a6	e0 04		cpx #$04			cpx 	#4
.93a8	d0 f6		bne $93a0			bne 	_PSCopy
.93aa					_PSNext:
.93aa	18		clc				clc
.93ab	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.93ad	65 30		adc $30				adc 	codePtr
.93af	85 30		sta $30				sta 	codePtr
.93b1	90 02		bcc $93b5			bcc 	_CREExit
.93b3	e6 31		inc $31				inc 	codePtr+1
.93b5					_CREExit:
.93b5	80 ba		bra $9371			bra 	_PSLoop
.93b7					_PSExit:
.93b7	60		rts				rts
.93b8					_PSSyntax:
.93b8	4c 68 ad	jmp $ad68			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/scanforward.asm

.93bb					ScanForward:
.93bb	85 36		sta $36				sta 	zTemp0 						; save XA as the two possible matches.
.93bd	86 37		stx $37				stx 	zTemp0+1
.93bf	64 38		stz $38				stz 	zTemp1 						; this is the structure count - goes up with WHILE/FOR
.93c1					_ScanLoop:
.93c1	b1 30		lda ($30),y			lda 	(codePtr),y
.93c3	c8		iny				iny
.93c4	a6 38		ldx $38				ldx 	zTemp1 						; if the count is > 0 cannot match as in substructure
.93c6	d0 0e		bne $93d6			bne 	_ScanGoNext
.93c8	c5 36		cmp $36				cmp 	zTemp0 						; see if either matches
.93ca	f0 04		beq $93d0			beq 	_ScanMatch
.93cc	c5 37		cmp $37				cmp 	zTemp0+1
.93ce	d0 06		bne $93d6			bne 	_ScanGoNext
.93d0					_ScanMatch:
.93d0	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if asked for EOL, backtrack.
.93d2	d0 01		bne $93d5			bne 	_ScanNotEndEOL
.93d4	88		dey				dey
.93d5					_ScanNotEndEOL:
.93d5	60		rts				rts
.93d6					_ScanGoNext:
.93d6	c9 40		cmp #$40			cmp 	#$40 						; if 00-3F, punctuation characters, loop back
.93d8	90 e7		bcc $93c1			bcc 	_ScanLoop
.93da	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if 40-82, skip one extra.
.93dc	90 18		bcc $93f6			bcc 	_ScanSkipOne
.93de	c9 fc		cmp #$fc			cmp 	#$FC 						; FC-FF are data skips
.93e0	b0 2f		bcs $9411			bcs 	_ScanSkipData
.93e2	c9 97		cmp #$97			cmp 	#KWC_FIRST_STRUCTURE 		; structure keyword ?
.93e4	90 db		bcc $93c1			bcc 	_ScanLoop 					; if not, ordinary keywords.
.93e6	c9 a2		cmp #$a2			cmp 	#KWC_LAST_STRUCTURE+1
.93e8	b0 d7		bcs $93c1			bcs 	_ScanLoop
.93ea	c6 38		dec $38				dec 	zTemp1 						; decrement the sructure count
.93ec	c9 9c		cmp #$9c			cmp 	#KWC_FIRST_STRUCTURE_DEC 	; back if it is a dec structure (e.g. WEND/NEXT)
.93ee	b0 d1		bcs $93c1			bcs 	_ScanLoop
.93f0	e6 38		inc $38				inc 	zTemp1 						; so it's an increment structure
.93f2	e6 38		inc $38				inc 	zTemp1 						; twice to undo the dec
.93f4	80 cb		bra $93c1			bra 	_ScanLoop
.93f6					_ScanSkipOne:
.93f6	c8		iny				iny 								; consume the extra one.
.93f7	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if not EOL loop back
.93f9	d0 c6		bne $93c1			bne 	_ScanLoop
.93fb	18		clc				clc
.93fc	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.93fe	65 30		adc $30				adc 	codePtr
.9400	85 30		sta $30				sta 	codePtr
.9402	90 02		bcc $9406			bcc 	_CREExit
.9404	e6 31		inc $31				inc 	codePtr+1
.9406					_CREExit:
.9406	a0 03		ldy #$03			ldy 	#3 							; scan start position.
.9408	b2 30		lda ($30)			lda 	(codePtr)
.940a	d0 b5		bne $93c1			bne 	_ScanLoop 					; if not zero, more to scan
.940c	a9 13		lda #$13		lda	#19
.940e	4c 49 94	jmp $9449		jmp	ErrorHandler
.9411					_ScanSkipData:
.9411	88		dey				dey 								; point at data token
.9412	c8		iny				iny
.9413	98		tya				tya
.9414	38		sec				sec
.9415	71 30		adc ($30),y			adc 	(codePtr),y
.9417	a8		tay				tay
.9418	80 a7		bra $93c1			bra 	_ScanLoop

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/while.asm

.941a					Command_WHILE:
.941a	5a		phy				phy 								; save position of the test
.941b	a2 00		ldx #$00			ldx 	#0
.941d	20 55 9f	jsr $9f55			jsr 	EvaluateNumber 				; work out the number
.9420	20 31 a0	jsr $a031			jsr 	NSMIsZero 					; check if zero
.9423	f0 0e		beq $9433			beq 	_WHExitLoop 				; if so exit the loop
.9425	98		tya				tya 								; position *after* test.
.9426	7a		ply				ply 								; restore position before test, at WHILE
.9427	88		dey				dey
.9428	48		pha				pha 								; push after test on the stack
.9429	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; allocate 6 bytes on the return stack.
.942b	20 b5 a0	jsr $a0b5			jsr 	StackOpen
.942e	20 f9 a0	jsr $a0f9			jsr 	STKSaveCodePosition 		; save loop position - where the test value is.
.9431	7a		ply				ply 								; restore the position *after* the test
.9432	60		rts				rts
.9433					_WHExitLoop:
.9433	68		pla				pla 								; throw post loop position
.9434	a9 a1		lda #$a1			lda 	#KWD_WEND 					; scan forward past WEND
.9436	aa		tax				tax
.9437	20 bb 93	jsr $93bb			jsr 	ScanForward
.943a	60		rts				rts
.943b					Command_WEND:
.943b	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; check WHILE is TOS
.943d	a2 10		ldx #$10			ldx 	#ERRID_WHILE 				; this error
.943f	20 e1 a0	jsr $a0e1			jsr 	StackCheckFrame
.9442	20 0a a1	jsr $a10a			jsr 	STKLoadCodePosition 		; loop back
.9445	20 d3 a0	jsr $a0d3			jsr 	StackClose		 			; erase the frame
.9448	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/charcheck.asm

.a782					CheckRightBracket:
.a782	b1 30		lda ($30),y			lda 	(codePtr),y
.a784	c8		iny				iny
.a785	c9 29		cmp #$29			cmp 	#KWD_RPAREN 						; exit if matches
.a787	d0 0f		bne $a798			bne 	CNAFail
.a789	60		rts				rts
.a78a					CheckComma:
.a78a	b1 30		lda ($30),y			lda 	(codePtr),y
.a78c	c8		iny				iny
.a78d	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 						; exit if matches
.a78f	d0 07		bne $a798			bne 	CNAFail
.a791	60		rts				rts
.a792					CheckNextA:
.a792	d1 30		cmp ($30),y			cmp 	(codePtr),y
.a794	d0 02		bne $a798			bne 	CNAFail
.a796	c8		iny				iny 								; skip character
.a797	60		rts				rts 								; and exit
.a798					CNAFail:
.a798	4c 68 ad	jmp $ad68			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/errors.asm

.9449					ErrorHandler:
.9449	a8		tay				tay 								; find the error text
.944a	f0 49		beq $9495			beq 	_EHEnd
.944c	a2 00		ldx #$00			ldx 	#0
.944e	a9 81		lda #$81			lda 	#((ErrorText) & $FF)
.9450	85 36		sta $36				sta 	0+zTemp0
.9452	a9 ad		lda #$ad			lda 	#((ErrorText) >> 8)
.9454	85 37		sta $37				sta 	1+zTemp0
.9456					_EHFind:
.9456	88		dey				dey 								; found the error text ?
.9457	f0 0e		beq $9467			beq 	_EHFound
.9459					_EHFindZero:
.9459	b2 36		lda ($36)			lda 	(zTemp0) 					; find the next error
.945b	e6 36		inc $36				inc 	zTemp0
.945d	d0 02		bne $9461			bne 	_EHFNoCarry
.945f	e6 37		inc $37				inc 	zTemp0+1
.9461					_EHFNoCarry:
.9461	c9 00		cmp #$00			cmp 	#0
.9463	d0 f4		bne $9459			bne 	_EHFindZero
.9465	80 ef		bra $9456			bra 	_EHFind
.9467					_EHFound:
.9467	a5 36		lda $36				lda 	zTemp0 						; print message
.9469	a6 37		ldx $37				ldx 	zTemp0+1
.946b	20 a2 94	jsr $94a2			jsr 	PrintStringXA
.946e	a0 01		ldy #$01			ldy 	#1 							; if line number zero don't print i
.9470	b1 30		lda ($30),y			lda 	(codePtr),y
.9472	d0 05		bne $9479			bne 	_EHAtMsg
.9474	c8		iny				iny
.9475	b1 30		lda ($30),y			lda 	(codePtr),y
.9477	f0 17		beq $9490			beq 	_EHCREnd
.9479					_EHAtMsg:
.9479	a2 94		ldx #$94			ldx 	#_AtMsg >> 8 				; print " at "
.947b	a9 98		lda #$98			lda 	#_AtMsg & $FF
.947d	20 a2 94	jsr $94a2			jsr 	PrintStringXA
.9480	a0 01		ldy #$01			ldy 	#1 							; line number into XA
.9482	b1 30		lda ($30),y			lda 	(codePtr),y
.9484	48		pha				pha
.9485	c8		iny				iny
.9486	b1 30		lda ($30),y			lda 	(codePtr),y
.9488	aa		tax				tax
.9489	68		pla				pla
.948a	20 de a8	jsr $a8de			jsr 	ConvertInt16 				; convert XA to string
.948d	20 a2 94	jsr $94a2			jsr 	PrintStringXA 				; and print it.
.9490					_EHCREnd:
.9490	a9 0d		lda #$0d			lda 	#13 						; new line
.9492	20 0d af	jsr $af0d			jsr 	EXTPrintCharacter
.9495					_EHEnd:
.9495	4c e1 89	jmp $89e1			jmp 	WarmStart
>9498	20 61 74 20 6c 69 6e 65		_AtMsg:	.text 	" at line ",0
>94a0	20 00
.94a2					PrintStringXA:
.94a2	5a		phy				phy
.94a3	86 37		stx $37				stx 	zTemp0+1
.94a5	85 36		sta $36				sta 	zTemp0
.94a7	a0 00		ldy #$00			ldy 	#0
.94a9					_PSXALoop:
.94a9	b1 36		lda ($36),y			lda 	(zTemp0),y
.94ab	f0 06		beq $94b3			beq 	_PSXAExit
.94ad	20 0d af	jsr $af0d			jsr 	EXTPrintCharacter
.94b0	c8		iny				iny
.94b1	80 f6		bra $94a9			bra 	_PSXALoop
.94b3					_PSXAExit:
.94b3	7a		ply				ply
.94b4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/compare.asm

.94b5					UnaryTrue:
.94b5	fa		plx				plx
.94b6					ReturnTrue:
.94b6	a9 01		lda #$01			lda 	#1  						; set to 1
.94b8	20 03 a0	jsr $a003			jsr 	NSMSetByte
.94bb	a9 80		lda #$80			lda 	#$80 						; set sign flag, so it is -1
.94bd	9d 00 04	sta $0400,x			sta 	NSStatus,x
.94c0	60		rts				rts
.94c1					UnaryFalse:
.94c1	fa		plx				plx
.94c2					ReturnFalse:
.94c2	4c 01 a0	jmp $a001			jmp 	NSMSetZero 					; set it all to zero
.94c5					BinaryCompareEqual:
.94c5	fa		plx				plx
.94c6	20 01 95	jsr $9501			jsr 	CompareBaseCode
.94c9	c9 00		cmp #$00			cmp 	#0
.94cb	f0 e9		beq $94b6			beq 	ReturnTrue
.94cd	80 f3		bra $94c2			bra 	ReturnFalse
.94cf					BinaryCompareLess:
.94cf	fa		plx				plx
.94d0	20 01 95	jsr $9501			jsr 	CompareBaseCode
.94d3	c9 ff		cmp #$ff			cmp 	#$FF
.94d5	f0 df		beq $94b6			beq 	ReturnTrue
.94d7	80 e9		bra $94c2			bra 	ReturnFalse
.94d9					BinaryCompareGreater:
.94d9	fa		plx				plx
.94da	20 01 95	jsr $9501			jsr 	CompareBaseCode
.94dd	c9 01		cmp #$01			cmp 	#1
.94df	f0 d5		beq $94b6			beq 	ReturnTrue
.94e1	80 df		bra $94c2			bra 	ReturnFalse
.94e3					BinaryCompareNotEqual:
.94e3	fa		plx				plx
.94e4	20 01 95	jsr $9501			jsr 	CompareBaseCode
.94e7	c9 00		cmp #$00			cmp 	#0
.94e9	d0 cb		bne $94b6			bne 	ReturnTrue
.94eb	80 d5		bra $94c2			bra 	ReturnFalse
.94ed					BinaryCompareLessEqual:
.94ed	fa		plx				plx
.94ee	20 01 95	jsr $9501			jsr 	CompareBaseCode
.94f1	c9 01		cmp #$01			cmp 	#1
.94f3	d0 c1		bne $94b6			bne 	ReturnTrue
.94f5	80 cb		bra $94c2			bra 	ReturnFalse
.94f7					BinaryCompareGreaterEqual:
.94f7	fa		plx				plx
.94f8	20 01 95	jsr $9501			jsr 	CompareBaseCode
.94fb	c9 ff		cmp #$ff			cmp 	#$FF
.94fd	d0 b7		bne $94b6			bne 	ReturnTrue
.94ff	80 c1		bra $94c2			bra 	ReturnFalse
.9501					CompareBaseCode:
.9501	20 62 99	jsr $9962			jsr 	DereferenceTopTwo 			; make both values if references.
.9504	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if either is a string.
.9507	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.950a	29 10		and #$10			and 	#NSTString
.950c	d0 40		bne $954e			bne 	_CBCString
.950e	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check both are integers
.9511	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9514	d0 3b		bne $9551			bne 	_CBCFloat
.9516	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9519	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.951c	29 08		and #$08			and 	#NSTFloat
.951e	d0 31		bne $9551			bne 	_CBCFloat
.9520	20 54 95	jsr $9554			jsr 	CompareFixMinusZero
.9523	e8		inx				inx
.9524	20 54 95	jsr $9554			jsr 	CompareFixMinusZero
.9527	ca		dex				dex
.9528	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; are the signs different ?
.952b	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.952e	10 0b		bpl $953b			bpl 	_CDCSameSign
.9530	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; if first one is -ve
.9533	30 16		bmi $954b			bmi 	_CBCLess 					; return $FF
.9535					_CBCGreater:
.9535	a9 01		lda #$01			lda 	#1
.9537	60		rts				rts
.9538					_CBCEqual:
.9538	a9 00		lda #$00			lda 	#0
.953a	60		rts				rts
.953b					_CDCSameSign:
.953b	20 64 96	jsr $9664			jsr 	SubTopTwoStack 				; unsigned subtract
.953e	20 31 a0	jsr $a031			jsr 	NSMIsZero 					; or the mantissa together
.9541	f0 f5		beq $9538			beq 	_CBCEqual 					; -0 == 0
.9543	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; sign of the result. if +ve return $01 else return $FF
.9546	5d 01 04	eor $0401,x			eor 	NSStatus+1,x 				; however if both were -ve this is inverted
.9549	10 ea		bpl $9535			bpl 	_CBCGreater
.954b					_CBCLess:
.954b	a9 ff		lda #$ff			lda 	#$FF
.954d	60		rts				rts
.954e					_CBCString:
.954e	4c ba 95	jmp $95ba			jmp 	CompareStrings
.9551					_CBCFloat:
.9551	4c da a9	jmp $a9da			jmp 	CompareFloat
.9554					CompareFixMinusZero:
.9554	20 31 a0	jsr $a031			jsr 	NSMIsZero
.9557	d0 03		bne $955c			bne 	_CFXMZNotZero
.9559	9e 00 04	stz $0400,x			stz 	NSStatus,x
.955c					_CFXMZNotZero:
.955c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/concat.asm

.955d					StringConcat:
.955d	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check both strings
.9560	3d 01 04	and $0401,x			and 	NSStatus+1,x
.9563	29 18		and #$18			and 	#NSBTypeMask
.9565	c9 10		cmp #$10			cmp 	#NSTString
.9567	d0 4e		bne $95b7			bne		_SCType
.9569	64 38		stz $38				stz 	zTemp1 						; counting total length
.956b	e8		inx				inx
.956c	20 8a 95	jsr $958a			jsr 	_SCSetupZ0 					; setup for second
.956f	20 95 95	jsr $9595			jsr 	_SCLengthZ0 				; length for second
.9572	ca		dex				dex
.9573	20 8a 95	jsr $958a			jsr 	_SCSetupZ0 					; setup for first
.9576	20 95 95	jsr $9595			jsr 	_SCLengthZ0 				; length for first
.9579	a5 38		lda $38				lda 	zTemp1 						; allocate memory
.957b	20 8f b0	jsr $b08f			jsr 	StringTempAllocate
.957e	20 a8 95	jsr $95a8			jsr 	_SCCopy 					; copy first out, using zTemp0 from above
.9581	e8		inx				inx
.9582	20 8a 95	jsr $958a			jsr 	_SCSetupZ0 					; copy second out
.9585	20 a8 95	jsr $95a8			jsr 	_SCCopy
.9588	ca		dex				dex
.9589	60		rts				rts
.958a					_SCSetupZ0:
.958a	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.958d	85 36		sta $36				sta 	zTemp0
.958f	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9592	85 37		sta $37				sta 	zTemp0+1
.9594	60		rts				rts
.9595					_SCLengthZ0:
.9595	5a		phy				phy
.9596	a0 00		ldy #$00			ldy 	#0
.9598					_SCLenLoop:
.9598	b1 36		lda ($36),y			lda 	(zTemp0),y
.959a	f0 0a		beq $95a6			beq 	_SCLExit
.959c	c8		iny				iny
.959d	e6 38		inc $38				inc 	zTemp1
.959f	10 f7		bpl $9598			bpl		_SCLenLoop
.95a1	a9 09		lda #$09		lda	#9
.95a3	4c 49 94	jmp $9449		jmp	ErrorHandler
.95a6					_SCLExit:
.95a6	7a		ply				ply
.95a7	60		rts				rts
.95a8					_SCCopy:
.95a8	5a		phy				phy
.95a9	a0 00		ldy #$00			ldy 	#0
.95ab					_SCCopyLoop:
.95ab	b1 36		lda ($36),y			lda 	(zTemp0),y
.95ad	f0 06		beq $95b5			beq 	_SCCExit
.95af	20 cd b0	jsr $b0cd			jsr 	StringTempWrite
.95b2	c8		iny				iny
.95b3	80 f6		bra $95ab			bra 	_SCCopyLoop
.95b5					_SCCExit:
.95b5	7a		ply				ply
.95b6	60		rts				rts
.95b7					_SCType:
.95b7	4c 72 ad	jmp $ad72			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/divide.asm

.a79b					IntegerDivide:
.a79b	fa		plx				plx
.a79c	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.a79f	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.a7a2	0a		asl a				asl 	a 							; shift reference bit into sign bit
.a7a3	0a		asl a				asl 	a
.a7a4	10 05		bpl $a7ab			bpl 	_NotRef
.a7a6	48		pha				pha
.a7a7	20 62 99	jsr $9962			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.a7aa	68		pla				pla
.a7ab					_NotRef:
.a7ab	0a		asl a				asl 	a
.a7ac	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.a7ae	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.a7b1	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.a7b4	f0 03		beq $a7b9			beq 	_IntegerCode 				; if clear, then we have two integers
.a7b6	4c 72 ad	jmp $ad72			jmp 	TypeError 					; anything else, type mismatch.
.a7b9					_IntegerCode:
.a7b9	20 db a7	jsr $a7db			jsr 	CheckDivideZero 			; do div zero check
.a7bc	20 13 a8	jsr $a813			jsr 	Int32Divide 				; do the division
.a7bf	20 d0 a8	jsr $a8d0			jsr 	CalculateSign 				; calculate result sign
.a7c2					NSMCopyPlusTwoToZero:
.a7c2	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.a7c5	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a7c8	bd 12 04	lda $0412,x			lda 	NSMantissa1+2,x
.a7cb	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a7ce	bd 1a 04	lda $041a,x			lda 	NSMantissa2+2,x
.a7d1	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.a7d4	bd 22 04	lda $0422,x			lda 	NSMantissa3+2,x
.a7d7	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.a7da	60		rts				rts
.a7db					CheckDivideZero:
.a7db	e8		inx				inx
.a7dc	20 31 a0	jsr $a031			jsr 	NSMIsZero
.a7df	f0 02		beq $a7e3			beq 	_CDVError
.a7e1	ca		dex				dex
.a7e2	60		rts				rts
.a7e3					_CDVError:
.a7e3	a9 03		lda #$03		lda	#3
.a7e5	4c 49 94	jmp $9449		jmp	ErrorHandler
.a7e8					IntegerModulus:
.a7e8	fa		plx				plx
.a7e9	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.a7ec	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.a7ef	0a		asl a				asl 	a 							; shift reference bit into sign bit
.a7f0	0a		asl a				asl 	a
.a7f1	10 05		bpl $a7f8			bpl 	_NotRef
.a7f3	48		pha				pha
.a7f4	20 62 99	jsr $9962			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.a7f7	68		pla				pla
.a7f8					_NotRef:
.a7f8	0a		asl a				asl 	a
.a7f9	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.a7fb	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.a7fe	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.a801	f0 03		beq $a806			beq 	_IntegerCode 				; if clear, then we have two integers
.a803	4c 72 ad	jmp $ad72			jmp 	TypeError 					; anything else, type mismatch.
.a806					_IntegerCode:
.a806					IntegerModulusNoCheck:
.a806	20 db a7	jsr $a7db			jsr 	CheckDivideZero 			; do div zero check
.a809	20 13 a8	jsr $a813			jsr 	Int32Divide 				; do the division
.a80c	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; clear the sign bit.
.a80f	5e 00 04	lsr $0400,x			lsr 	NSStatus,x
.a812	60		rts				rts
.a813					Int32Divide:
.a813	48		pha				pha 								; save AXY
.a814	5a		phy				phy
.a815	20 d8 9f	jsr $9fd8			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.a818	20 fd 9f	jsr $9ffd			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.a81b	a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.a81d					_I32DivideLoop:
.a81d	e8		inx				inx
.a81e	e8		inx				inx
.a81f	20 16 a0	jsr $a016			jsr 	NSMShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.a822	ca		dex				dex
.a823	ca		dex				dex
.a824	20 17 a0	jsr $a017			jsr 	NSMRotateLeft
.a827	20 53 a8	jsr $a853			jsr 	DivideCheckSubtract 		; check if subtract possible
.a82a	90 03		bcc $a82f			bcc 	_I32DivideNoCarryIn
.a82c	fe 0a 04	inc $040a,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.a82f					_I32DivideNoCarryIn:
.a82f	88		dey				dey 								; loop round till division completed.
.a830	d0 eb		bne $a81d			bne 	_I32DivideLoop
.a832	7a		ply				ply 								; restore AXY and exit
.a833	68		pla				pla
.a834	60		rts				rts
.a835					Int32ShiftDivide:
.a835	48		pha				pha 								; save AY
.a836	5a		phy				phy
.a837	e8		inx				inx 								; clear S[X+2]
.a838	e8		inx				inx
.a839	20 01 a0	jsr $a001			jsr 	NSMSetZero
.a83c	ca		dex				dex
.a83d	ca		dex				dex
.a83e	a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.a840					_I32SDLoop:
.a840	20 53 a8	jsr $a853			jsr 	DivideCheckSubtract 		; check if subtract possible
.a843	e8		inx				inx
.a844	e8		inx				inx
.a845	20 17 a0	jsr $a017			jsr 	NSMRotateLeft				; shift 64 bit FPA left, rotating carry in
.a848	ca		dex				dex
.a849	ca		dex				dex
.a84a	20 17 a0	jsr $a017			jsr 	NSMRotateLeft
.a84d	88		dey				dey 	 							; do 31 times
.a84e	d0 f0		bne $a840			bne 	_I32SDLoop
.a850	7a		ply				ply 								; restore AY and exit
.a851	68		pla				pla
.a852	60		rts				rts
.a853					DivideCheckSubtract:
.a853	20 64 96	jsr $9664			jsr 	SubTopTwoStack 				; subtract Stack[X+1] from Stack[X+0]
.a856	b0 04		bcs $a85c			bcs 	_DCSExit 					; if carry set, then could do, exit
.a858	20 3e 96	jsr $963e			jsr 	AddTopTwoStack 				; add it back in
.a85b	18		clc				clc 								; and return False
.a85c					_DCSExit:
.a85c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/multiply.asm

.a85d					MulInteger:
.a85d	fa		plx				plx
.a85e	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.a861	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.a864	0a		asl a				asl 	a 							; shift reference bit into sign bit
.a865	0a		asl a				asl 	a
.a866	10 05		bpl $a86d			bpl 	_NotRef
.a868	48		pha				pha
.a869	20 62 99	jsr $9962			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.a86c	68		pla				pla
.a86d					_NotRef:
.a86d	0a		asl a				asl 	a 							; put MSB of type into A:7
.a86e	30 0b		bmi $a87b			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.a870	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.a873	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.a876	f0 06		beq $a87e			beq 	_IntegerCode 				; if clear, then we have two integers
.a878	4c b1 aa	jmp $aab1			jmp 	FloatingPointMultiply 							; otherwise at least one float.
.a87b					_StringData:
.a87b	4c 7c ad	jmp $ad7c			jmp 	NotDoneError							; at least one string - don't know both are strings.
.a87e					_IntegerCode:
.a87e	20 8b a8	jsr $a88b			jsr 	MultiplyShort
.a881	c9 00		cmp #$00			cmp 	#0
.a883	f0 05		beq $a88a			beq 	_MIExit
.a885	a9 04		lda #$04		lda	#4
.a887	4c 49 94	jmp $9449		jmp	ErrorHandler
.a88a					_MIExit:
.a88a	60		rts				rts
.a88b					MultiplyShort:
.a88b	5a		phy				phy 								; save Y
.a88c	20 d8 9f	jsr $9fd8			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.a88f	20 fd 9f	jsr $9ffd			jsr 	NSMSetZeroMantissaOnly 		; set mantissa S[X] to zero
.a892	a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.a894					_I32MLoop:
.a894	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.a897	1d 12 04	ora $0412,x			ora 	NSMantissa1+2,x
.a89a	1d 1a 04	ora $041a,x			ora 	NSMantissa2+2,x
.a89d	1d 22 04	ora $0422,x			ora 	NSMantissa3+2,x
.a8a0	f0 28		beq $a8ca			beq 	_I32MExit 					; exit if zero
.a8a2	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.a8a5	29 01		and #$01			and 	#1
.a8a7	f0 0e		beq $a8b7			beq 	_I32MNoAdd
.a8a9	20 3e 96	jsr $963e			jsr 	AddTopTwoStack 				; if so add S[X+1] to S[X+0]
.a8ac	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.a8af	10 06		bpl $a8b7			bpl 	_I32MNoAdd
.a8b1					_I32ShiftRight:
.a8b1	20 24 a0	jsr $a024			jsr 	NSMShiftRight 				; shift S[X] right
.a8b4	c8		iny				iny 								; increment shift count
.a8b5	80 0a		bra $a8c1			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.a8b7					_I32MNoAdd:
.a8b7	3c 21 04	bit $0421,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.a8ba	70 f5		bvs $a8b1			bvs 	_I32ShiftRight 				; instead.
.a8bc	e8		inx				inx
.a8bd	20 16 a0	jsr $a016			jsr 	NSMShiftLeft 				; shift additive S[X+1] left
.a8c0	ca		dex				dex
.a8c1					_I32MShiftUpper:
.a8c1	e8		inx				inx 								; shift S[X+2] right
.a8c2	e8		inx				inx
.a8c3	20 24 a0	jsr $a024			jsr 	NSMShiftRight
.a8c6	ca		dex				dex
.a8c7	ca		dex				dex
.a8c8	80 ca		bra $a894			bra 	_I32MLoop 					; try again.
.a8ca					_I32MExit:
.a8ca	20 d0 a8	jsr $a8d0			jsr 	CalculateSign
.a8cd	98		tya				tya 								; shift in A
.a8ce	7a		ply				ply 								; restore Y and exit
.a8cf	60		rts				rts
.a8d0					CalculateSign:
.a8d0	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.a8d3	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; shift result left
.a8d6	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.a8d9	0a		asl a				asl 	a 							; shift bit 7 into carry
.a8da	7e 00 04	ror $0400,x			ror 	NSStatus,x 					; shift right into status byte.
.a8dd	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/scompare.asm

.95ba					CompareStrings:
.95ba	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check both are strings
.95bd	3d 01 04	and $0401,x			and 	NSStatus+1,x
.95c0	29 10		and #$10			and 	#NSBIsString
.95c2	f0 2c		beq $95f0			beq 	_CSTypeError
.95c4	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy string addresses to zTemp0/1
.95c7	85 36		sta $36				sta 	zTemp0
.95c9	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.95cc	85 37		sta $37				sta 	zTemp0+1
.95ce	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.95d1	85 38		sta $38				sta 	zTemp1
.95d3	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.95d6	85 39		sta $39				sta 	zTemp1+1
.95d8	5a		phy				phy 								; save Y so we can access strings
.95d9	a0 ff		ldy #$ff			ldy 	#$FF 						; -1 for pre increment.
.95db					_CSLoop:
.95db	c8		iny				iny
.95dc	b1 36		lda ($36),y			lda 	(zTemp0),y 					; check if they are the same
.95de	d1 38		cmp ($38),y			cmp 	(zTemp1),y
.95e0	d0 06		bne $95e8			bne 	_CSDifferent
.95e2	c9 00		cmp #$00			cmp 	#0 							; reached end ?
.95e4	d0 f5		bne $95db			bne 	_CSLoop 					; still comparing
.95e6					_CSExit:
.95e6	7a		ply				ply 								; reached end, return zero in A from EOS
.95e7	60		rts				rts
.95e8					_CSDifferent:
.95e8	a9 ff		lda #$ff			lda 	#255 						; if < return $FF
.95ea	90 fa		bcc $95e6			bcc		_CSExit
.95ec	a9 01		lda #$01			lda 	#1 							; otherwise return 1.
.95ee	80 f6		bra $95e6			bra 	_CSExit
.95f0					_CSTypeError:
.95f0	4c 72 ad	jmp $ad72			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/shifts.asm

.95f3					ShiftLeft:
.95f3	38		sec				sec
.95f4	80 01		bra $95f7			bra 	ShiftMain
.95f6					ShiftRight:
.95f6	18		clc				clc
.95f7					ShiftMain:
.95f7	fa		plx				plx 								; restore X
.95f8	08		php				php 								; save direction
.95f9	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.95fc	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.95ff	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9600	0a		asl a				asl 	a
.9601	10 05		bpl $9608			bpl 	_NotRef
.9603	48		pha				pha
.9604	20 62 99	jsr $9962			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9607	68		pla				pla
.9608					_NotRef:
.9608	0a		asl a				asl 	a
.9609	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.960b	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.960e	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9611	f0 03		beq $9616			beq 	_IntegerCode 				; if clear, then we have two integers
.9613	4c 72 ad	jmp $ad72			jmp 	TypeError 					; anything else, type mismatch.
.9616					_IntegerCode:
.9616	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; check number < 32
.9619	29 e0		and #$e0			and 	#$E0
.961b	1d 11 04	ora $0411,x			ora 	NSMantissa1+1,x
.961e	1d 19 04	ora $0419,x			ora 	NSMantissa2+1,x
.9621	1d 21 04	ora $0421,x			ora 	NSMantissa3+1,x
.9624	d0 13		bne $9639			bne 	_SMExit0 					; if >= 32 it will always return zero.
.9626					_SMLoop:
.9626	de 09 04	dec $0409,x			dec 	NSMantissa0+1,x 			; predecrement, could do << 0
.9629	30 11		bmi $963c			bmi 	_SMExit 					; exit if done.
.962b	28		plp				plp 								; restore direcition setting
.962c	08		php				php
.962d	90 05		bcc $9634			bcc 	_SMRight
.962f	20 16 a0	jsr $a016			jsr 	NSMShiftLeft 				; shift left if CS
.9632	80 f2		bra $9626			bra 	_SMLoop
.9634					_SMRight:
.9634	20 24 a0	jsr $a024			jsr 	NSMShiftRight 				; shift right if CC
.9637	80 ed		bra $9626			bra 	_SMLoop
.9639					_SMExit0:
.9639	20 01 a0	jsr $a001			jsr 	NSMSetZero 					; return zero.
.963c					_SMExit:
.963c	28		plp				plp 								; throw direction
.963d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/simple.asm

.963e					AddTopTwoStack:
.963e	18		clc				clc
.963f	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9642	7d 09 04	adc $0409,x			adc 		NSMantissa0+1,x
.9645	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9648	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.964b	7d 11 04	adc $0411,x			adc 		NSMantissa1+1,x
.964e	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9651	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9654	7d 19 04	adc $0419,x			adc 		NSMantissa2+1,x
.9657	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.965a	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.965d	7d 21 04	adc $0421,x			adc 		NSMantissa3+1,x
.9660	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9663	60		rts				rts
.9664					SubTopTwoStack:
.9664	38		sec				sec
.9665	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9668	fd 09 04	sbc $0409,x			sbc 		NSMantissa0+1,x
.966b	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.966e	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9671	fd 11 04	sbc $0411,x			sbc 		NSMantissa1+1,x
.9674	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9677	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.967a	fd 19 04	sbc $0419,x			sbc 		NSMantissa2+1,x
.967d	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9680	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9683	fd 21 04	sbc $0421,x			sbc 		NSMantissa3+1,x
.9686	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9689	60		rts				rts
.968a					AddInteger:
.968a	fa		plx				plx
.968b	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.968e	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9691	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9692	0a		asl a				asl 	a
.9693	10 05		bpl $969a			bpl 	_NotRef
.9695	48		pha				pha
.9696	20 62 99	jsr $9962			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9699	68		pla				pla
.969a					_NotRef:
.969a	0a		asl a				asl 	a 							; put MSB of type into A:7
.969b	30 0b		bmi $96a8			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.969d	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.96a0	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.96a3	f0 06		beq $96ab			beq 	_IntegerCode 				; if clear, then we have two integers
.96a5	4c 39 a9	jmp $a939			jmp 	FloatingPointAdd 							; otherwise at least one float.
.96a8					_StringData:
.96a8	4c 5d 95	jmp $955d			jmp 	StringConcat							; at least one string - don't know both are strings.
.96ab					_IntegerCode:
.96ab					AddCode:
.96ab	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.96ae	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.96b1	10 8b		bpl $963e			bpl 	AddTopTwoStack
.96b3	20 64 96	jsr $9664			jsr 	SubTopTwoStack 				; do a physical subtraction
.96b6	3c 20 04	bit $0420,x			bit 	NSMantissa3,x 				; result is +ve, okay
.96b9	10 09		bpl $96c4			bpl 	_AddExit
.96bb	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; sign is that of 2nd value
.96be	9d 00 04	sta $0400,x			sta 	NSStatus,x
.96c1	20 b6 9f	jsr $9fb6			jsr 	NSMNegateMantissa 			; negate the mantissa and exit
.96c4					_AddExit:
.96c4	60		rts				rts
.96c5					SubInteger:
.96c5	fa		plx				plx
.96c6	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.96c9	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.96cc	0a		asl a				asl 	a 							; shift reference bit into sign bit
.96cd	0a		asl a				asl 	a
.96ce	10 05		bpl $96d5			bpl 	_NotRef
.96d0	48		pha				pha
.96d1	20 62 99	jsr $9962			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.96d4	68		pla				pla
.96d5					_NotRef:
.96d5	0a		asl a				asl 	a 							; put MSB of type into A:7
.96d6	30 0b		bmi $96e3			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.96d8	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.96db	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.96de	f0 06		beq $96e6			beq 	_IntegerCode 				; if clear, then we have two integers
.96e0	4c 3e a9	jmp $a93e			jmp 	FloatingPointSub 							; otherwise at least one float.
.96e3					_StringData:
.96e3	4c 7c ad	jmp $ad7c			jmp 	NotDoneError							; at least one string - don't know both are strings.
.96e6					_IntegerCode:
.96e6	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; negate the second value.
.96e9	49 80		eor #$80			eor 	#$80
.96eb	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.96ee	80 bb		bra $96ab			bra 	AddCode 					; and do the same code as add.
.96f0					AndInteger:
.96f0	fa		plx				plx
.96f1	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.96f4	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.96f7	0a		asl a				asl 	a 							; shift reference bit into sign bit
.96f8	0a		asl a				asl 	a
.96f9	10 05		bpl $9700			bpl 	_NotRef
.96fb	48		pha				pha
.96fc	20 62 99	jsr $9962			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.96ff	68		pla				pla
.9700					_NotRef:
.9700	0a		asl a				asl 	a
.9701	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9703	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9706	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9709	f0 03		beq $970e			beq 	_IntegerCode 				; if clear, then we have two integers
.970b	4c 72 ad	jmp $ad72			jmp 	TypeError 					; anything else, type mismatch.
.970e					_IntegerCode:
.970e	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9711	3d 09 04	and $0409,x			and 		NSMantissa0+1,x
.9714	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9717	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.971a	3d 11 04	and $0411,x			and 		NSMantissa1+1,x
.971d	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9720	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9723	3d 19 04	and $0419,x			and 		NSMantissa2+1,x
.9726	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9729	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.972c	3d 21 04	and $0421,x			and 		NSMantissa3+1,x
.972f	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9732	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.9735	60		rts				rts
.9736					OraInteger:
.9736	fa		plx				plx
.9737	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.973a	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.973d	0a		asl a				asl 	a 							; shift reference bit into sign bit
.973e	0a		asl a				asl 	a
.973f	10 05		bpl $9746			bpl 	_NotRef
.9741	48		pha				pha
.9742	20 62 99	jsr $9962			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9745	68		pla				pla
.9746					_NotRef:
.9746	0a		asl a				asl 	a
.9747	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9749	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.974c	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.974f	f0 03		beq $9754			beq 	_IntegerCode 				; if clear, then we have two integers
.9751	4c 72 ad	jmp $ad72			jmp 	TypeError 					; anything else, type mismatch.
.9754					_IntegerCode:
.9754	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.9757	1d 09 04	ora $0409,x			ora 		NSMantissa0+1,x
.975a	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.975d	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.9760	1d 11 04	ora $0411,x			ora 		NSMantissa1+1,x
.9763	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9766	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.9769	1d 19 04	ora $0419,x			ora 		NSMantissa2+1,x
.976c	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.976f	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.9772	1d 21 04	ora $0421,x			ora 		NSMantissa3+1,x
.9775	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9778	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.977b	60		rts				rts
.977c					EorInteger:
.977c	fa		plx				plx
.977d	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.9780	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.9783	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9784	0a		asl a				asl 	a
.9785	10 05		bpl $978c			bpl 	_NotRef
.9787	48		pha				pha
.9788	20 62 99	jsr $9962			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.978b	68		pla				pla
.978c					_NotRef:
.978c	0a		asl a				asl 	a
.978d	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.978f	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9792	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9795	f0 03		beq $979a			beq 	_IntegerCode 				; if clear, then we have two integers
.9797	4c 72 ad	jmp $ad72			jmp 	TypeError 					; anything else, type mismatch.
.979a					_IntegerCode:
.979a	bd 08 04	lda $0408,x			lda		NSMantissa0,x
.979d	5d 09 04	eor $0409,x			eor 		NSMantissa0+1,x
.97a0	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.97a3	bd 10 04	lda $0410,x			lda		NSMantissa1,x
.97a6	5d 11 04	eor $0411,x			eor 		NSMantissa1+1,x
.97a9	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.97ac	bd 18 04	lda $0418,x			lda		NSMantissa2,x
.97af	5d 19 04	eor $0419,x			eor 		NSMantissa2+1,x
.97b2	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.97b5	bd 20 04	lda $0420,x			lda		NSMantissa3,x
.97b8	5d 21 04	eor $0421,x			eor 		NSMantissa3+1,x
.97bb	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.97be	9e 00 04	stz $0400,x			stz	 	NSStatus,x 					; ignore sign.
.97c1	60		rts				rts
.97c2					WordIndirect:
.97c2	fa		plx				plx
.97c3	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.97c6	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.97c9	0a		asl a				asl 	a 							; shift reference bit into sign bit
.97ca	0a		asl a				asl 	a
.97cb	10 05		bpl $97d2			bpl 	_NotRef
.97cd	48		pha				pha
.97ce	20 62 99	jsr $9962			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.97d1	68		pla				pla
.97d2					_NotRef:
.97d2	0a		asl a				asl 	a
.97d3	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.97d5	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.97d8	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.97db	f0 03		beq $97e0			beq 	_IntegerCode 				; if clear, then we have two integers
.97dd	4c 72 ad	jmp $ad72			jmp 	TypeError 					; anything else, type mismatch.
.97e0					_IntegerCode:
.97e0	20 ab 96	jsr $96ab			jsr 	AddCode 					; add the two values
.97e3	a9 22		lda #$22			lda 	#NSBIsReference+2 			; make a 2 byte reference
.97e5	9d 00 04	sta $0400,x			sta 	NSStatus,x
.97e8	60		rts				rts
.97e9					ByteIndirect:
.97e9	fa		plx				plx
.97ea	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; OR the type data together
.97ed	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.97f0	0a		asl a				asl 	a 							; shift reference bit into sign bit
.97f1	0a		asl a				asl 	a
.97f2	10 05		bpl $97f9			bpl 	_NotRef
.97f4	48		pha				pha
.97f5	20 62 99	jsr $9962			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.97f8	68		pla				pla
.97f9					_NotRef:
.97f9	0a		asl a				asl 	a
.97fa	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.97fc	1d 28 04	ora $0428,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.97ff	1d 29 04	ora $0429,x			ora 	NSExponent+1,x
.9802	f0 03		beq $9807			beq 	_IntegerCode 				; if clear, then we have two integers
.9804	4c 72 ad	jmp $ad72			jmp 	TypeError 					; anything else, type mismatch.
.9807					_IntegerCode:
.9807	20 ab 96	jsr $96ab			jsr 	AddCode 					; add the two values
.980a	a9 21		lda #$21			lda 	#NSBIsReference+1 			; make a 1 byte reference
.980c	9d 00 04	sta $0400,x			sta 	NSStatus,x
.980f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/tostring.asm

.a8de					ConvertInt16:
.a8de	8d 08 04	sta $0408			sta 	NSMantissa0 				; set up as 32 bit conversion
.a8e1	8e 10 04	stx $0410			stx 	NSMantissa1
.a8e4	9c 18 04	stz $0418			stz 	NSMantissa2
.a8e7	9c 20 04	stz $0420			stz 	NSMantissa3
.a8ea	9c 00 04	stz $0400			stz 	NSStatus 					; positive integer
.a8ed	a2 00		ldx #$00			ldx 	#0 							; stack level
.a8ef	a9 0a		lda #$0a			lda 	#10 						; base
.a8f1	80 00		bra $a8f3			bra 	ConvertInt32
.a8f3					ConvertInt32:
.a8f3	5a		phy				phy
.a8f4	a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.a8f6	2c 00 04	bit $0400			bit 	NSStatus 					; output a - if not negative.
.a8f9	10 08		bpl $a903			bpl 	_CI32NotNeg
.a8fb	48		pha				pha
.a8fc	a9 2d		lda #$2d			lda 	#'-'
.a8fe	99 f7 05	sta $05f7,y			sta 	NumberBuffer,y
.a901	c8		iny				iny
.a902	68		pla				pla
.a903					_CI32NotNeg:
.a903	20 11 a9	jsr $a911			jsr 	_CI32DivideConvert 			; recursive conversion
.a906	a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.a908	99 f7 05	sta $05f7,y			sta 	NumberBuffer,y
.a90b	7a		ply				ply
.a90c	a2 05		ldx #$05			ldx 	#NumberBuffer >> 8
.a90e	a9 f7		lda #$f7			lda 	#NumberBuffer & $FF
.a910	60		rts				rts
.a911					_CI32DivideConvert:
.a911	e8		inx				inx 								; write to next slot up
.a912	20 03 a0	jsr $a003			jsr 	NSMSetByte
.a915	ca		dex				dex
.a916	20 13 a8	jsr $a813			jsr 	Int32Divide 				; divide
.a919	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; save remainder
.a91c	48		pha				pha
.a91d	20 c2 a7	jsr $a7c2			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.a920	20 31 a0	jsr $a031			jsr 	NSMIsZero 					; is it zero ?
.a923	f0 06		beq $a92b			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.a925	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.a928	20 11 a9	jsr $a911			jsr 	_CI32DivideConvert 			; and recusrively call.
.a92b					_CI32NoRecurse:
.a92b	68		pla				pla 								; remainder
.a92c	c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII
.a92e	90 02		bcc $a932			bcc 	_CI32NotHex
.a930	69 26		adc #$26			adc 	#6+32
.a932					_CI32NotHex:
.a932	69 30		adc #$30			adc 	#48
.a934	99 f7 05	sta $05f7,y			sta 	NumberBuffer,y 				; write out and exit
.a937	c8		iny				iny
.a938	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/expression.asm


;******  Processing file: ./common/expressions/../generated/precedence.dat

.9810					PrecedenceLevel:
>9810	04					.byte	 4	; $00 <<
>9811	02					.byte	 2	; $01 <=
>9812	02					.byte	 2	; $02 <>
>9813	00					.byte	 0	; $03 !!3
>9814	00					.byte	 0	; $04 ><
>9815	02					.byte	 2	; $05 >=
>9816	04					.byte	 4	; $06 >>
>9817	00					.byte	 0	; $07 !!7
>9818	00					.byte	 0	; $08 !!8
>9819	00					.byte	 0	; $09 !!9
>981a	00					.byte	 0	; $0a !!10
>981b	00					.byte	 0	; $0b !!11
>981c	00					.byte	 0	; $0c !!12
>981d	00					.byte	 0	; $0d !!13
>981e	00					.byte	 0	; $0e !!14
>981f	00					.byte	 0	; $0f !!15
>9820	00					.byte	 0	; $10 @
>9821	00					.byte	 0	; $11 !!17
>9822	00					.byte	 0	; $12 !!18
>9823	00					.byte	 0	; $13 [
>9824	04					.byte	 4	; $14 \
>9825	00					.byte	 0	; $15 ]
>9826	01					.byte	 1	; $16 ^
>9827	00					.byte	 0	; $17 _
>9828	00					.byte	 0	; $18 `
>9829	00					.byte	 0	; $19 !!25
>982a	00					.byte	 0	; $1a !!26
>982b	00					.byte	 0	; $1b {
>982c	01					.byte	 1	; $1c |
>982d	00					.byte	 0	; $1d }
>982e	00					.byte	 0	; $1e ~
>982f	00					.byte	 0	; $1f [7m<7F>[m
>9830	00					.byte	 0	; $20
>9831	05					.byte	 5	; $21 !
>9832	00					.byte	 0	; $22 "
>9833	00					.byte	 0	; $23 #
>9834	05					.byte	 5	; $24 $
>9835	04					.byte	 4	; $25 %
>9836	01					.byte	 1	; $26 &
>9837	00					.byte	 0	; $27 '
>9838	00					.byte	 0	; $28 (
>9839	00					.byte	 0	; $29 )
>983a	04					.byte	 4	; $2a *
>983b	03					.byte	 3	; $2b +
>983c	00					.byte	 0	; $2c ,
>983d	03					.byte	 3	; $2d -
>983e	00					.byte	 0	; $2e .
>983f	04					.byte	 4	; $2f /
>9840	00					.byte	 0	; $30 0
>9841	00					.byte	 0	; $31 1
>9842	00					.byte	 0	; $32 2
>9843	00					.byte	 0	; $33 3
>9844	00					.byte	 0	; $34 4
>9845	00					.byte	 0	; $35 5
>9846	00					.byte	 0	; $36 6
>9847	00					.byte	 0	; $37 7
>9848	00					.byte	 0	; $38 8
>9849	00					.byte	 0	; $39 9
>984a	00					.byte	 0	; $3a :
>984b	00					.byte	 0	; $3b ;
>984c	02					.byte	 2	; $3c <
>984d	02					.byte	 2	; $3d =
>984e	02					.byte	 2	; $3e >
>984f	05					.byte	 5	; $3f ?

;******  Return to file: ./common/expressions/expression.asm

.9850					EvaluateExpressionAt0:
.9850	a2 00		ldx #$00			ldx 	#0 							; bottom stack level
.9852					EvaluateExpression:
.9852	a9 00		lda #$00			lda 	#0 							; lowest precedence level
.9854					EvaluateExpressionAtPrecedence:
.9854	48		pha				pha 								; save precedence level
.9855	20 23 9b	jsr $9b23			jsr 	EvaluateTerm 				; evaluate term into level X.
.9858	68		pla				pla 								; restore precedence level.
.9859					_EXPRLoop:
.9859	85 36		sta $36				sta 	zTemp0 						; save current precedence level.
.985b	b1 30		lda ($30),y			lda 	(codePtr),y
.985d	c9 40		cmp #$40			cmp		#$40 						; if >= $40 cannot be an operator
.985f	b0 25		bcs $9886			bcs 	_EXPRExit
.9861	da		phx				phx 								; read the operator precedence
.9862	aa		tax				tax
.9863	bd 10 98	lda $9810,x			lda 	PrecedenceLevel,x
.9866	fa		plx				plx
.9867	c9 00		cmp #$00			cmp 	#0							; if zero exit (not an operator)
.9869	f0 1b		beq $9886			beq 	_EXPRExit
.986b	85 37		sta $37				sta 	zTemp0+1 					; save operator precedence level.
.986d	a5 36		lda $36				lda 	zTemp0 						; compare current precedence vs. operator precedence
.986f	c5 37		cmp $37				cmp 	zTemp0+1
.9871	b0 13		bcs $9886			bcs		_EXPRExit 					; if current >= operator exit
.9873	48		pha				pha 								; save current precedence.
.9874	b1 30		lda ($30),y			lda 	(codePtr),y
.9876	c8		iny				iny
.9877	48		pha				pha
.9878	a5 37		lda $37				lda 	zTemp0+1 					; get operator precedence level
.987a	e8		inx				inx 								; work out the right hand side.
.987b	20 54 98	jsr $9854			jsr 	EvaluateExpressionAtPrecedence
.987e	ca		dex				dex
.987f	68		pla				pla 								; get operator, call the code.
.9880	20 89 98	jsr $9889			jsr 	_EXPRCaller
.9883	68		pla				pla 								; restore precedence level
.9884	80 d3		bra $9859			bra 	_EXPRLoop 					; and go round.
.9886					_EXPRExit:
.9886	a5 36		lda $36				lda 	zTemp0 						; A = current precedence level.
.9888	60		rts				rts
.9889					_EXPRCaller:
.9889	da		phx				phx 								; save on stack, first thing is to restore it
.988a	0a		asl a				asl 	a 							; double so can use vectors into X
.988b	aa		tax				tax
.988c	7c 90 90	jmp ($9090,x)			jmp 	(VectorSetPunc,x) 			; and go to the code.

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/addsub.asm

.a939					FloatingPointAdd:
.a939	20 da aa	jsr $aada			jsr 	FloatPrepare 				; prepare for floats
.a93c	80 0b		bra $a949			bra 	FloatAdd
.a93e					FloatingPointSub:
.a93e	20 da aa	jsr $aada			jsr 	FloatPrepare 				; prepare for floats
.a941					FloatSubtract:
.a941	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; negate FPB
.a944	49 80		eor #$80			eor 	#$80
.a946	9d 01 04	sta $0401,x			sta 	NSStatus+1,x				; and fall through.
.a949					FloatAdd:
.a949	48		pha				pha
.a94a	5a		phy				phy
.a94b	20 eb aa	jsr $aaeb			jsr 	NSNormalise 				; normalise S[X]
.a94e	f0 54		beq $a9a4			beq 	_FAReturn1
.a950	e8		inx				inx 								; normalise S[X+1]
.a951	20 eb aa	jsr $aaeb			jsr 	NSNormalise
.a954	ca		dex				dex
.a955	c9 00		cmp #$00			cmp 	#0
.a957	f0 6f		beq $a9c8			beq 	_FAExit 					; if so, just return A
.a959	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; are the exponents the same ?
.a95c	dd 29 04	cmp $0429,x			cmp 	NSExponent+1,x
.a95f	f0 1b		beq $a97c			beq 	_FAExponentsEqual
.a961	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; work out the larger exponent
.a964	a8		tay				tay
.a965	38		sec				sec 								; do a signed comparison of the exponents.
.a966	fd 29 04	sbc $0429,x			sbc 	NSExponent+1,x
.a969	50 02		bvc $a96d			bvc 	_FANoSignedChange
.a96b	49 80		eor #$80			eor 	#$80
.a96d					_FANoSignedChange:
.a96d	29 80		and #$80			and 	#$80
.a96f	10 03		bpl $a974			bpl 	_FAHaveMax
.a971	bc 29 04	ldy $0429,x			ldy 	NSExponent+1,x
.a974					_FAHaveMax:
.a974	20 cb a9	jsr $a9cb			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.a977	e8		inx				inx
.a978	20 cb a9	jsr $a9cb			jsr 	_FAShiftToExponent
.a97b	ca		dex				dex
.a97c					_FAExponentsEqual:
.a97c	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; are the signs the same
.a97f	5d 01 04	eor $0401,x			eor 	NSStatus+1,x
.a982	30 10		bmi $a994			bmi 	_FADifferentSigns
.a984	20 3e 96	jsr $963e			jsr 	AddTopTwoStack 				; do the add of the mantissae
.a987	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.a98a	10 3c		bpl $a9c8			bpl 	_FAExit 					; if no, we are done.
.a98c	20 24 a0	jsr $a024			jsr 	NSMShiftRight 				; shift A right, renormalising it.
.a98f	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; bump the exponent and exit
.a992	80 34		bra $a9c8			bra 	_FAExit
.a994					_FADifferentSigns:
.a994	20 64 96	jsr $9664			jsr 	SubTopTwoStack 				; subtract mantissa B from A
.a997	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; is the result negative ?
.a99a	10 2c		bpl $a9c8			bpl 	_FAExit 					; if no, we are done.
.a99c	20 ad 9f	jsr $9fad			jsr 	NSMNegate 					; netate result
.a99f	20 b6 9f	jsr $9fb6			jsr 	NSMNegateMantissa 			; negate (2'c) the mantissa
.a9a2	80 24		bra $a9c8			bra 	_FAExit
.a9a4					_FAReturn1:
.a9a4	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.a9a7	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a9aa	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.a9ad	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a9b0	bd 19 04	lda $0419,x			lda 	NSMantissa2+1,x
.a9b3	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.a9b6	bd 21 04	lda $0421,x			lda 	NSMantissa3+1,x
.a9b9	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.a9bc	bd 29 04	lda $0429,x			lda 	NSExponent+1,x
.a9bf	9d 28 04	sta $0428,x			sta 	NSExponent,x
.a9c2	bd 01 04	lda $0401,x			lda 	NSStatus+1,x
.a9c5	9d 00 04	sta $0400,x			sta 	NSStatus,x
.a9c8					_FAExit:
.a9c8	7a		ply				ply
.a9c9	68		pla				pla
.a9ca	60		rts				rts
.a9cb					_FAShiftToExponent:
.a9cb					_FAShiftToExponent2:
.a9cb	98		tya				tya 								; compare Y to exponent
.a9cc	dd 28 04	cmp $0428,x			cmp 	NSExponent,x 				; reached the exponent required ?
.a9cf	f0 08		beq $a9d9			beq 	_FASEExit 					; exit if so.
.a9d1	20 24 a0	jsr $a024			jsr 	NSMShiftRight	 			; shift the mantissa right
.a9d4	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; increment exponent
.a9d7	80 f2		bra $a9cb			bra 	_FAShiftToExponent2
.a9d9					_FASEExit:
.a9d9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/compare.asm

.a9da					CompareFloat:
.a9da	20 41 a9	jsr $a941			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.a9dd	bd 10 04	lda $0410,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.a9e0	29 f8		and #$f8			and 	#$F8
.a9e2	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.a9e5	1d 20 04	ora $0420,x			ora 	NSMantissa3,x
.a9e8	f0 09		beq $a9f3			beq 	_FCExit 					; zero, so approximately identical
.a9ea	a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.a9ec	3c 00 04	bit $0400,x			bit 	NSStatus,x
.a9ef	10 02		bpl $a9f3			bpl 	_FCExit
.a9f1					_FCNegative:
.a9f1	a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.a9f3					_FCExit:
.a9f3	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/divide.asm

.a9f4					FDivideCommand:
.a9f4	fa		plx				plx	 								; restore stack position
.a9f5	20 da aa	jsr $aada			jsr 	FloatPrepare 				; prepare for floats
.a9f8					FloatDivide:
.a9f8	48		pha				pha
.a9f9	e8		inx				inx
.a9fa	20 eb aa	jsr $aaeb			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.a9fd	ca		dex				dex
.a9fe	c9 00		cmp #$00			cmp 	#0
.aa00	f0 20		beq $aa22			beq 	_FDZero
.aa02	20 eb aa	jsr $aaeb			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.aa05	f0 19		beq $aa20			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.aa07	20 35 a8	jsr $a835			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.aa0a	20 c2 a7	jsr $a7c2			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.aa0d	20 eb aa	jsr $aaeb			jsr		NSNormalise 				; renormalise
.aa10	20 d0 a8	jsr $a8d0			jsr 	CalculateSign 				; calculate result sign
.aa13	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; calculate exponent
.aa16	38		sec				sec
.aa17	fd 29 04	sbc $0429,x			sbc 	NSExponent+1,x
.aa1a	38		sec				sec
.aa1b	e9 1e		sbc #$1e			sbc 	#30
.aa1d	9d 28 04	sta $0428,x			sta 	NSExponent,x
.aa20					_FDExit:
.aa20	68		pla				pla
.aa21	60		rts				rts
.aa22					_FDZero:
.aa22	a9 03		lda #$03		lda	#3
.aa24	4c 49 94	jmp $9449		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/fractional.asm

.aa27					FloatFractionalPart:
.aa27	5a		phy				phy
.aa28	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; take absolute value
.aa2b	29 7f		and #$7f			and 	#$7F
.aa2d	9d 00 04	sta $0400,x			sta 	NSStatus,x
.aa30	20 eb aa	jsr $aaeb			jsr 	NSNormalise
.aa33	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.aa36	38		sec				sec
.aa37	e9 e0		sbc #$e0			sbc 	#$E0
.aa39	90 31		bcc $aa6c			bcc 	_FFPExit 					; already fractional
.aa3b	c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.aa3d	b0 2a		bcs $aa69			bcs 	_FFPZero
.aa3f	a8		tay				tay 								; put count to do in Y
.aa40	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; do each in turn.
.aa43	20 6e aa	jsr $aa6e			jsr 	_FFPPartial
.aa46	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.aa49	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.aa4c	20 6e aa	jsr $aa6e			jsr 	_FFPPartial
.aa4f	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.aa52	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.aa55	20 6e aa	jsr $aa6e			jsr 	_FFPPartial
.aa58	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.aa5b	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.aa5e	20 6e aa	jsr $aa6e			jsr 	_FFPPartial
.aa61	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.aa64	20 31 a0	jsr $a031			jsr 	NSMIsZero 					; zeroed check.
.aa67	d0 03		bne $aa6c			bne 	_FFPExit
.aa69					_FFPZero:
.aa69	20 01 a0	jsr $a001			jsr 	NSMSetZero
.aa6c					_FFPExit:
.aa6c	7a		ply				ply
.aa6d	60		rts				rts
.aa6e					_FFPPartial:
.aa6e	c0 00		cpy #$00			cpy 	#0 							; no more to do
.aa70	f0 17		beq $aa89			beq 	_FFFPPExit
.aa72	c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.aa74	b0 0c		bcs $aa82			bcs 	_FFFPPWholeByte
.aa76	5a		phy				phy
.aa77					_FFFPPLeft:
.aa77	0a		asl a				asl 	a
.aa78	88		dey				dey
.aa79	d0 fc		bne $aa77			bne 	_FFFPPLeft
.aa7b	7a		ply				ply
.aa7c					_FFFPPRight:
.aa7c	4a		lsr a				lsr 	a
.aa7d	88		dey				dey
.aa7e	d0 fc		bne $aa7c			bne 	_FFFPPRight
.aa80	80 07		bra $aa89			bra 	_FFFPPExit
.aa82					_FFFPPWholeByte:
.aa82	98		tya				tya 								; subtract 8 from count
.aa83	38		sec				sec
.aa84	e9 08		sbc #$08			sbc 	#8
.aa86	a8		tay				tay
.aa87	a9 00		lda #$00			lda 	#0 							; and clear all
.aa89					_FFFPPExit:
.aa89	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/integer.asm

.aa8a					FloatIntegerPart:
.aa8a	48		pha				pha
.aa8b	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; is it integer already ?
.aa8e	f0 1f		beq $aaaf			beq 	_FIPExit 					; if so do nothing
.aa90	20 31 a0	jsr $a031			jsr 	NSMIsZero 					; is it zero ?
.aa93	f0 17		beq $aaac			beq 	_FIPZero 					; if so return zero.
.aa95	20 eb aa	jsr $aaeb			jsr 	NSNormalise 				; normalise
.aa98	f0 12		beq $aaac			beq 	_FIPZero 					; normalised to zero, exit zero
.aa9a					_FIPShift:
.aa9a	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.aa9d	10 08		bpl $aaa7			bpl 	_FIPCheckZero
.aa9f	20 24 a0	jsr $a024			jsr 	NSMShiftRight 				; shift mantissa right
.aaa2	fe 28 04	inc $0428,x			inc 	NSExponent,x 				; bump exponent
.aaa5	80 f3		bra $aa9a			bra 	_FIPShift
.aaa7					_FIPCheckZero:
.aaa7	20 31 a0	jsr $a031			jsr 	NSMIsZero 					; avoid -0 problem
.aaaa	d0 03		bne $aaaf			bne 	_FIPExit 					; set to zero if mantissa zero.
.aaac					_FIPZero:
.aaac	20 01 a0	jsr $a001			jsr 	NSMSetZero
.aaaf					_FIPExit:
.aaaf	68		pla				pla
.aab0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/multiply.asm

.aab1					FloatingPointMultiply:
.aab1	20 da aa	jsr $aada			jsr 	FloatPrepare 				; prepare for floats
.aab4					FloatMultiply:
.aab4	48		pha				pha
.aab5	20 eb aa	jsr $aaeb			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.aab8	f0 1b		beq $aad5			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.aaba	e8		inx				inx
.aabb	20 eb aa	jsr $aaeb			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.aabe	ca		dex				dex
.aabf	c9 00		cmp #$00			cmp 	#0
.aac1	f0 0f		beq $aad2			beq 	_FDSetZero
.aac3	20 8b a8	jsr $a88b			jsr 	MultiplyShort 				; calculate the result.
.aac6	7d 28 04	adc $0428,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.aac9	18		clc				clc
.aaca	7d 29 04	adc $0429,x			adc 	NSExponent+1,x
.aacd	9d 28 04	sta $0428,x			sta 	NSExponent,x
.aad0	80 03		bra $aad5			bra 	_FDExit
.aad2					_FDSetZero:
.aad2	20 01 a0	jsr $a001			jsr 	NSMSetZero 					; return 0
.aad5					_FDExit:
.aad5	20 eb aa	jsr $aaeb			jsr 	NSNormalise 				; normalise the result
.aad8	68		pla				pla
.aad9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/utility.asm

.aada					FloatPrepare:
.aada	20 62 99	jsr $9962			jsr 	DereferenceTopTwo 			; dereference the top two values
.aadd	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check ints/floats
.aae0	1d 01 04	ora $0401,x			ora 	NSStatus+1,x
.aae3	29 10		and #$10			and 	#NSBIsString
.aae5	d0 01		bne $aae8			bne 	_FDType
.aae7	60		rts				rts
.aae8					_FDType:
.aae8	4c 72 ad	jmp $ad72			jmp 	TypeError
.aaeb					NSNormalise:
.aaeb	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; make float, keep sign
.aaee	29 80		and #$80			and 	#$80
.aaf0	09 08		ora #$08			ora 	#NSTFloat
.aaf2	9d 00 04	sta $0400,x			sta 	NSStatus,x
.aaf5	20 31 a0	jsr $a031			jsr 	NSMIsZero 					; if zero exit
.aaf8	d0 09		bne $ab03			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.aafa	1e 00 04	asl $0400,x			asl 	NSStatus,x 					; clear the sign bit.
.aafd	7e 00 04	ror $0400,x			ror 	NSStatus,x 					; (no -0)
.ab00	a9 00		lda #$00			lda 	#0 							; set Z flag
.ab02	60		rts				rts
.ab03					_NSNormaliseOptimise:
.ab03	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; upper byte zero ?
.ab06	d0 22		bne $ab2a			bne 	_NSNormaliseLoop
.ab08	bd 18 04	lda $0418,x			lda 	NSMantissa2,x 				; byte normalise
.ab0b	30 1d		bmi $ab2a			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.ab0d	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.ab10	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.ab13	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.ab16	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.ab19	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.ab1c	9e 08 04	stz $0408,x			stz 	NSMantissa0,x
.ab1f	bd 28 04	lda $0428,x			lda 	NSExponent,x
.ab22	38		sec				sec
.ab23	e9 08		sbc #$08			sbc 	#8
.ab25	9d 28 04	sta $0428,x			sta 	NSExponent,x
.ab28	80 d9		bra $ab03			bra 	_NSNormaliseOptimise
.ab2a					_NSNormaliseLoop:
.ab2a	3c 20 04	bit $0420,x			bit 	NSMantissa3,x 				; bit 30 set ?
.ab2d	70 08		bvs $ab37			bvs 	_NSNExit 					; exit if so with Z flag clear
.ab2f	20 16 a0	jsr $a016			jsr 	NSMShiftLeft 				; shift mantissa left
.ab32	de 28 04	dec $0428,x			dec 	NSExponent,x 				; adjust exponent
.ab35	80 f3		bra $ab2a			bra 	_NSNormaliseLoop
.ab37					_NSNExit:
.ab37	a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.ab39	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignnumber.asm

.988f					AssignNumber:
.988f	5a		phy				phy
.9890	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy mantissa0/1 to zTemp0
.9893	85 36		sta $36				sta 	zTemp0
.9895	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9898	85 37		sta $37				sta 	zTemp0+1
.989a	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; clear reference bits
.989d	29 df		and #$df			and 	#(NSBIsReference ^ $FF)
.989f	9d 00 04	sta $0400,x			sta 	NSStatus,x
.98a2	29 18		and #$18			and 	#NSBTypeMask				; assigning to a float ?
.98a4	c9 08		cmp #$08			cmp 	#NSTFloat
.98a6	f0 2a		beq $98d2			beq 	_ANFloat
.98a8	bd 29 04	lda $0429,x			lda		NSExponent+1,x 				; is it a float
.98ab	f0 05		beq $98b2			beq		_ANNotFloat
.98ad	e8		inx				inx
.98ae	20 8a aa	jsr $aa8a			jsr 	FloatIntegerPart 			; make it an integer
.98b1	ca		dex				dex
.98b2					_ANNotFloat:
.98b2	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if byte/word reference.
.98b5	29 03		and #$03			and 	#3
.98b7	d0 05		bne $98be			bne 	_ANByteWord
.98b9	20 de 98	jsr $98de			jsr 	_ANCopy4PackSign 			; copy all 4 bytes and sign
.98bc	80 1e		bra $98dc			bra 	_ANExit
.98be					_ANByteWord:
.98be	48		pha				pha 								; save count
.98bf	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; do byte
.98c2	92 36		sta ($36)			sta 	(zTemp0)
.98c4	68		pla				pla
.98c5	c9 01		cmp #$01			cmp	 	#1
.98c7	f0 13		beq $98dc			beq 	_ANExit
.98c9	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x 			; do word
.98cc	a0 01		ldy #$01			ldy 	#1
.98ce	91 36		sta ($36),y			sta 	(zTemp0),y
.98d0	80 0a		bra $98dc			bra 	_ANExit
.98d2					_ANFloat:
.98d2	20 de 98	jsr $98de			jsr 	_ANCopy4PackSign 			; write all 4 bytes and packed sign
.98d5	bd 29 04	lda $0429,x			lda 	NSExponent+1,x 				; copy exponent to slot 4
.98d8	a0 04		ldy #$04			ldy 	#4
.98da	91 36		sta ($36),y			sta 	(zTemp0),y
.98dc					_ANExit:
.98dc	7a		ply				ply
.98dd	60		rts				rts
.98de					_ANCopy4PackSign:
.98de	a0 03		ldy #$03			ldy 	#3
.98e0	bd 01 04	lda $0401,x			lda 	NSStatus+1,x 				; sign bit into status
.98e3	29 80		and #$80			and 	#$80 						; put into high bit of mantissa 3
.98e5	1d 21 04	ora $0421,x			ora 	NSMantissa3+1,x
.98e8	91 36		sta ($36),y			sta 	(zTemp0),y
.98ea	88		dey				dey
.98eb	bd 19 04	lda $0419,x			lda 	NSMantissa2+1,x
.98ee	91 36		sta ($36),y			sta 	(zTemp0),y
.98f0	88		dey				dey
.98f1	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.98f4	91 36		sta ($36),y			sta 	(zTemp0),y
.98f6	88		dey				dey
.98f7	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.98fa	91 36		sta ($36),y			sta 	(zTemp0),y
.98fc	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignstring.asm

.98fd					AssignString:
.98fd	5a		phy				phy
.98fe	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x
.9901	85 38		sta $38				sta 	zTemp1
.9903	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.9906	85 39		sta $39				sta 	zTemp1+1
.9908	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.990b	85 36		sta $36				sta 	zTemp0
.990d	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9910	85 37		sta $37				sta 	zTemp0+1
.9912	a0 01		ldy #$01			ldy 	#1 							; the high byte of the target address
.9914	b1 36		lda ($36),y			lda 	(zTemp0),y
.9916	f0 23		beq $993b			beq 	_ASNewStringRequired 		; if zero, a new string is required.
.9918	38		sec				sec 								; put Address-2 in zsTemp - this is the size/status/string record
.9919	b2 36		lda ($36)			lda 	(zTemp0) 					; of concreted strings
.991b	e9 02		sbc #$02			sbc 	#2
.991d	85 3c		sta $3c				sta 	zsTemp
.991f	a0 01		ldy #$01			ldy 	#1
.9921	b1 36		lda ($36),y			lda 	(zTemp0),y
.9923	e9 00		sbc #$00			sbc 	#0
.9925	85 3d		sta $3d				sta 	zsTemp+1
.9927	a0 ff		ldy #$ff			ldy 	#$FF 						; get length of new string
.9929					_ASGetLength:
.9929	c8		iny				iny
.992a	b1 38		lda ($38),y			lda 	(zTemp1),y
.992c	d0 fb		bne $9929			bne 	_ASGetLength
.992e	98		tya				tya 								; is this length <= current length
.992f	d2 3c		cmp ($3c)			cmp 	(zsTemp)
.9931	90 20		bcc $9953			bcc 	_ASCopyString
.9933	f0 1e		beq $9953			beq 	_ASCopyString
.9935	a9 80		lda #$80			lda 	#$80 						; mark as unused.
.9937	a0 01		ldy #$01			ldy 	#1
.9939	91 3c		sta ($3c),y			sta 	(zsTemp),y
.993b					_ASNewStringRequired:
.993b	e8		inx				inx 								; concrete the new string.
.993c	20 0e b0	jsr $b00e			jsr 	StringConcrete				; (breaks zTemp1/2, not zTemp0 and zsTemp)
.993f	ca		dex				dex
.9940	18		clc				clc
.9941	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; copy that new address to the reference.
.9944	69 02		adc #$02			adc 	#2 							; add two to point at the data.
.9946	92 36		sta ($36)			sta 	(zTemp0)
.9948	bd 11 04	lda $0411,x			lda 	NSMantissa1+1,x
.994b	69 00		adc #$00			adc 	#0
.994d	a0 01		ldy #$01			ldy 	#1
.994f	91 36		sta ($36),y			sta 	(zTemp0),y
.9951	80 0d		bra $9960			bra 	_ASExit
.9953					_ASCopyString:
.9953	a0 00		ldy #$00			ldy 	#0
.9955					_ASCopyLoop:
.9955	b1 38		lda ($38),y			lda 	(zTemp1),y
.9957	c8		iny				iny
.9958	c8		iny				iny
.9959	91 3c		sta ($3c),y			sta 	(zsTemp),y
.995b	88		dey				dey
.995c	c9 00		cmp #$00			cmp 	#0
.995e	d0 f5		bne $9955			bne 	_ASCopyLoop
.9960					_ASExit:
.9960	7a		ply				ply
.9961	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/dereference.asm

.9962					DereferenceTopTwo:
.9962	e8		inx				inx
.9963	20 67 99	jsr $9967			jsr 	Dereference 				; deref x+1
.9966	ca		dex				dex  								; falls through to deref x
.9967					Dereference:
.9967	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get the status byte
.996a	29 20		and #$20			and 	#NSBIsReference 			; shift sign bit to carry, reference to bit 7
.996c	f0 57		beq $99c5			beq 	_DRFExit 					; not a reference
.996e	5a		phy				phy
.996f	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address to dereference into zTemp0
.9972	85 36		sta $36				sta 	zTemp0
.9974	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9977	85 37		sta $37				sta 	zTemp0+1
.9979	9e 10 04	stz $0410,x			stz 	NSMantissa1,x 				; clear second byte.
.997c	b2 36		lda ($36)			lda 	(zTemp0) 					; do the first byte
.997e	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9981	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get status byte.
.9984	29 18		and #$18			and 	#NSBTypeMask 				; what type is it ?
.9986	c9 10		cmp #$10			cmp 	#NSTString 					; if string, dereference two
.9988	f0 0f		beq $9999			beq 	_DRFDereferenceTwo
.998a	c9 08		cmp #$08			cmp 	#NSTFloat 					; if float, do full dereference.
.998c	f0 39		beq $99c7			beq 	_DRFFull
.998e	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be integer - how many bytes ?
.9991	29 03		and #$03			and 	#3
.9993	f0 32		beq $99c7			beq 	_DRFFull 					; the whole word
.9995	c9 01		cmp #$01			cmp 	#1 							; is it 10 (e.g. 2 bytes)
.9997	f0 07		beq $99a0			beq		_DRFClear23 				; no, one byte, clear 2 & 3 and exit
.9999					_DRFDereferenceTwo:
.9999	a0 01		ldy #$01			ldy 	#1
.999b	b1 36		lda ($36),y			lda 	(zTemp0),y
.999d	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.99a0					_DRFClear23:
.99a0	9e 18 04	stz $0418,x			stz 	NSMantissa2,x 				; clear upper bytes, only read 1 or 2 bytes
.99a3	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.99a6	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; make it a value of that type.
.99a9	29 18		and #$18			and 	#NSBTypeMask
.99ab	9d 00 04	sta $0400,x			sta 	NSStatus,x
.99ae	c9 10		cmp #$10			cmp 	#NSTString  				; is it a string
.99b0	d0 12		bne $99c4			bne 	_DRFNotString
.99b2	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; check address is zero
.99b5	1d 10 04	ora $0410,x			ora 	NSMantissa1,x
.99b8	d0 0a		bne $99c4			bne 	_DRFNotString
.99ba	a9 c6		lda #$c6			lda 	#_DRFNullString & $FF 		; if so, return reference to ""
.99bc	9d 08 04	sta $0408,x			sta 	NSMantissa0,X
.99bf	a9 99		lda #$99			lda 	#_DRFNullString >> 8
.99c1	9d 10 04	sta $0410,x			sta 	NSMantissa1,X
.99c4					_DRFNotString
.99c4	7a		ply				ply 								; restore Y and exit
.99c5					_DRFExit:
.99c5	60		rts				rts
.99c6					_DRFNullString:
>99c6	00						.byte 	0
.99c7					_DRFFull:
.99c7	a0 01		ldy #$01			ldy 	#1 							; get remaining 3 bytes.
.99c9	b1 36		lda ($36),y			lda 	(zTemp0),y
.99cb	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.99ce	c8		iny				iny
.99cf	b1 36		lda ($36),y			lda 	(zTemp0),y
.99d1	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.99d4	c8		iny				iny
.99d5	b1 36		lda ($36),y			lda 	(zTemp0),y
.99d7	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.99da	9e 28 04	stz $0428,x			stz 	NSExponent,x 				; clear exponent.
.99dd	bd 00 04	lda $0400,x			lda		NSStatus,x 					; see if type is integer
.99e0	29 18		and #$18			and 	#NSBTypeMask  				; type information only
.99e2	9d 00 04	sta $0400,x			sta 	NSStatus,x 					; update it back.
.99e5	f0 06		beq $99ed			beq 	_DRFNoExponent
.99e7	c8		iny				iny 								; if not, read the exponent as well.
.99e8	b1 36		lda ($36),y			lda 	(zTemp0),y
.99ea	9d 28 04	sta $0428,x			sta 	NSExponent,x
.99ed					_DRFNoExponent:
.99ed	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; is the most significant bit set ?
.99f0	10 0d		bpl $99ff			bpl 	_DRFExit2 					; if not, then exit.
.99f2	29 7f		and #$7f			and 	#$7F 						; clear that bit.
.99f4	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.99f7	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; set the sign flag
.99fa	09 80		ora #$80			ora 	#NSBIsNegative
.99fc	9d 00 04	sta $0400,x			sta 	NSStatus,x
.99ff					_DRFExit2:
.99ff	7a		ply				ply
.9a00	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/number.asm

=1					ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2					ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3					ESTA_Decimal = 3 							; fractional part.
.9a01					EncodeNumberStart:
.9a01	38		sec				sec
.9a02	80 01		bra $9a05			bra 	EncodeNumberContinue+1
.9a04					EncodeNumberContinue:
.9a04	18		clc				clc
.9a05					EncodeNumber:
.9a05	08		php				php 								; save reset.
.9a06	c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.9a08	f0 12		beq $9a1c			beq 	_ENIsOkay
.9a0a	c9 30		cmp #$30			cmp 	#"0"
.9a0c	90 04		bcc $9a12			bcc 	_ENBadNumber
.9a0e	c9 3a		cmp #$3a			cmp 	#"9"+1
.9a10	90 0a		bcc $9a1c			bcc 	_ENIsOkay
.9a12					_ENBadNumber:
.9a12	28		plp				plp 								; throw saved reset
.9a13	ad 85 04	lda $0485			lda 	EncodeState 				; decimal mode, construct final number
.9a16	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.9a18	f0 7e		beq $9a98			beq 	_ENConstructFinal
.9a1a					_ENFail:
.9a1a	18		clc				clc 								; not allowed
.9a1b	60		rts				rts
.9a1c					_ENIsOkay:
.9a1c	28		plp				plp 								; are we restarting
.9a1d	90 15		bcc $9a34			bcc 	_ENNoRestart
.9a1f					_ENStartEncode:
.9a1f	c9 2e		cmp #$2e			cmp 	#'.'						; first is DP
.9a21	f0 0c		beq $9a2f			beq 	_ENFirstDP
.9a23	29 0f		and #$0f			and 	#15 						; put digit in mantissa
.9a25	20 03 a0	jsr $a003			jsr 	NSMSetByte
.9a28	a9 01		lda #$01			lda 	#ESTA_Low
.9a2a					_ENExitChange:
.9a2a	8d 85 04	sta $0485			sta 	EncodeState 				; save new state
.9a2d	38		sec				sec
.9a2e	60		rts				rts
.9a2f					_ENFirstDP:
.9a2f	20 01 a0	jsr $a001			jsr 	NSMSetZero 					; clear integer part
.9a32	80 3f		bra $9a73			bra 	_ESTASwitchFloat			; go straight to float and exi
.9a34					_ENNoRestart:
.9a34	48		pha				pha 								; save on stack.
.9a35	ad 85 04	lda $0485			lda 	EncodeState 				; get current state
.9a38	c9 01		cmp #$01			cmp 	#ESTA_Low
.9a3a	f0 09		beq $9a45			beq  	_ESTALowState
.9a3c	c9 02		cmp #$02			cmp 	#ESTA_High
.9a3e	f0 29		beq $9a69			beq 	_ESTAHighState
.9a40	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.9a42	f0 3b		beq $9a7f			beq 	_ESTADecimalState
>9a44	db						.byte 	$DB 						; causes a break in the emulator
.9a45					_ESTALowState:
.9a45	68		pla				pla 								; get value back
.9a46	c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.9a48	f0 29		beq $9a73			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.9a4a	29 0f		and #$0f			and 	#15 						; make digit
.9a4c	8d 86 04	sta $0486			sta 	DigitTemp 					; save it.
.9a4f	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.9a52	0a		asl a				asl 	a
.9a53	0a		asl a				asl 	a
.9a54	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.9a57	0a		asl a				asl 	a
.9a58	6d 86 04	adc $0486			adc 	DigitTemp
.9a5b	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9a5e	c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.9a60	90 05		bcc $9a67			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.9a62	a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.9a64	8d 85 04	sta $0485			sta 	EncodeState
.9a67					_ESTANoSwitch:
.9a67	38		sec				sec
.9a68	60		rts				rts
.9a69					_ESTAHighState:
.9a69	68		pla				pla 								; get value back
.9a6a	c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.9a6c	f0 05		beq $9a73			beq 	_ESTASwitchFloat
.9a6e	20 d2 9a	jsr $9ad2			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.9a71	38		sec				sec
.9a72	60		rts				rts
.9a73					_ESTASwitchFloat:
.9a73	9c 87 04	stz $0487			stz 	DecimalCount
.9a76	e8		inx				inx 								; zero the decimal additive.
.9a77	20 01 a0	jsr $a001			jsr 	NSMSetZero
.9a7a	ca		dex				dex
.9a7b	a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.9a7d	80 ab		bra $9a2a			bra 	_ENExitChange
.9a7f					_ESTADecimalState:
.9a7f	68		pla				pla 								; digit.
.9a80	c9 2e		cmp #$2e			cmp 	#"." 						; fail on 2nd decimal point.
.9a82	f0 96		beq $9a1a			beq 	_ENFail
.9a84	e8		inx				inx 								; put digit into fractional part of X+1
.9a85	20 d2 9a	jsr $9ad2			jsr 	ESTAShiftDigitIntoMantissa
.9a88	ca		dex				dex
.9a89	ee 87 04	inc $0487			inc 	DecimalCount 				; bump the count of decimals
.9a8c	ad 87 04	lda $0487			lda 	DecimalCount
.9a8f	c9 0b		cmp #$0b			cmp 	#11
.9a91	f0 02		beq $9a95			beq 	_ESTADSFail
.9a93	38		sec				sec
.9a94	60		rts				rts
.9a95					_ESTADSFail:
.9a95	4c 6d ad	jmp $ad6d			jmp 	RangeError
.9a98					_ENConstructFinal:
.9a98	ad 87 04	lda $0487			lda 	DecimalCount 				; get decimal count
.9a9b	f0 33		beq $9ad0			beq 	_ENCFExit 					; no decimals
.9a9d	5a		phy				phy
.9a9e	0a		asl a				asl 	a 							; x 4 and CLC
.9a9f	0a		asl a				asl 	a
.9aa0	6d 87 04	adc $0487			adc 	DecimalCount
.9aa3	a8		tay				tay
.9aa4	b9 2c ad	lda $ad2c,y			lda 	DecimalScalarTable-5,y 		; copy decimal scalar to X+2
.9aa7	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.9aaa	b9 2d ad	lda $ad2d,y			lda 	DecimalScalarTable-5+1,y
.9aad	9d 12 04	sta $0412,x			sta 	NSMantissa1+2,x
.9ab0	b9 2e ad	lda $ad2e,y			lda 	DecimalScalarTable-5+2,y
.9ab3	9d 1a 04	sta $041a,x			sta 	NSMantissa2+2,x
.9ab6	b9 2f ad	lda $ad2f,y			lda 	DecimalScalarTable-5+3,y
.9ab9	9d 22 04	sta $0422,x			sta 	NSMantissa3+2,x
.9abc	b9 30 ad	lda $ad30,y			lda 	DecimalScalarTable-5+4,y
.9abf	9d 2a 04	sta $042a,x			sta 	NSExponent+2,x
.9ac2	a9 08		lda #$08			lda 	#NSTFloat
.9ac4	9d 02 04	sta $0402,x			sta 	NSStatus+2,x
.9ac7	7a		ply				ply
.9ac8	e8		inx				inx 								; multiply decimal const by decimal scalar
.9ac9	20 b4 aa	jsr $aab4			jsr 	FloatMultiply
.9acc	ca		dex				dex
.9acd	20 49 a9	jsr $a949			jsr 	FloatAdd 					; add to integer part.
.9ad0					_ENCFExit:
.9ad0	18		clc				clc 								; reject the digit.
.9ad1	60		rts				rts
.9ad2					ESTAShiftDigitIntoMantissa:
.9ad2	29 0f		and #$0f			and 	#15 						; save digit
.9ad4	48		pha				pha
.9ad5	bd 20 04	lda $0420,x			lda 	NSMantissa3,x 				; push mantissa on stack
.9ad8	48		pha				pha
.9ad9	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.9adc	48		pha				pha
.9add	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9ae0	48		pha				pha
.9ae1	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9ae4	48		pha				pha
.9ae5	20 16 a0	jsr $a016			jsr 	NSMShiftLeft 				; x 2
.9ae8	20 16 a0	jsr $a016			jsr 	NSMShiftLeft 				; x 4
.9aeb	18		clc				clc 								; pop mantissa and add
.9aec	68		pla				pla
.9aed	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.9af0	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9af3	68		pla				pla
.9af4	7d 10 04	adc $0410,x			adc 	NSMantissa1,x
.9af7	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9afa	68		pla				pla
.9afb	7d 18 04	adc $0418,x			adc 	NSMantissa2,x
.9afe	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9b01	68		pla				pla
.9b02	7d 20 04	adc $0420,x			adc 	NSMantissa3,x
.9b05	9d 20 04	sta $0420,x			sta 	NSMantissa3,x 				; x 5
.9b08	20 16 a0	jsr $a016			jsr 	NSMShiftLeft 				; x 10
.9b0b	68		pla				pla 								; add digit
.9b0c	18		clc				clc
.9b0d	7d 08 04	adc $0408,x			adc 	NSMantissa0,x
.9b10	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9b13	90 0d		bcc $9b22			bcc 	_ESTASDExit
.9b15	fe 10 04	inc $0410,x			inc 	NSMantissa1,x
.9b18	d0 08		bne $9b22			bne 	_ESTASDExit
.9b1a	fe 18 04	inc $0418,x			inc 	NSMantissa2,x
.9b1d	d0 03		bne $9b22			bne 	_ESTASDExit
.9b1f	fe 20 04	inc $0420,x			inc 	NSMantissa3,x
.9b22					_ESTASDExit:
.9b22	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/term.asm

.9b23					EvaluateTerm:
.9b23	b1 30		lda ($30),y			lda 	(codePtr),y
.9b25	30 18		bmi $9b3f			bmi 	_ETCheckUnary 				; unary function ? (text ones)
.9b27	c9 40		cmp #$40			cmp 	#$40 						; 40-7F => identifier reference
.9b29	b0 6f		bcs $9b9a			bcs 	_ETVariable
.9b2b	c9 30		cmp #$30			cmp 	#'0' 						; is it a number
.9b2d	90 6e		bcc $9b9d			bcc 	_ETPuncUnary 				; if not it might be a punctuation unary.
.9b2f	c9 3a		cmp #$3a			cmp 	#'9'+1
.9b31	b0 6a		bcs $9b9d			bcs 	_ETPuncUnary
.9b33	20 01 9a	jsr $9a01			jsr 	EncodeNumberStart 			; can't fail as it's 0-9 !
.9b36					_ETNumber:
.9b36	c8		iny				iny 								; keep encoding until we have the numbers
.9b37	b1 30		lda ($30),y			lda 	(codePtr),y
.9b39	20 04 9a	jsr $9a04			jsr 	EncodeNumberContinue
.9b3c	b0 f8		bcs $9b36			bcs 	_ETNumber 					; go back if accepted.
.9b3e	60		rts				rts
.9b3f					_ETCheckUnary:
.9b3f	c9 ff		cmp #$ff			cmp 	#KWC_STRING 				; string token
.9b41	f0 41		beq $9b84			beq 	_ETString
.9b43	c9 fe		cmp #$fe			cmp 	#KWC_HEXCONST 				; hex constant.
.9b45	f0 12		beq $9b59			beq 	_ETHexConstant
.9b47	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; check it actually is a unary function
.9b49	90 0b		bcc $9b56			bcc 	_ETSyntaxError
.9b4b	c9 97		cmp #$97			cmp 	#KWC_LAST_UNARY+1
.9b4d	b0 07		bcs $9b56			bcs 	_ETSyntaxError
.9b4f	da		phx				phx 								; push X on the stack
.9b50	0a		asl a				asl 	a 							; put vector x 2 into X
.9b51	aa		tax				tax
.9b52	c8		iny				iny 								; consume unary function token
.9b53	7c 10 91	jmp ($9110,x)			jmp 	(VectorSet0,x) 				; and do it.
.9b56					_ETSyntaxError:
.9b56	4c 68 ad	jmp $ad68			jmp 	SyntaxError
.9b59					_ETHexConstant:
.9b59	c8		iny				iny 								; skip #
.9b5a	c8		iny				iny 								; skip count
.9b5b	20 01 a0	jsr $a001			jsr 	NSMSetZero 					; clear result
.9b5e					_ETHLoop:
.9b5e	b1 30		lda ($30),y			lda 	(codePtr),y
.9b60	c8		iny				iny 								; and consume
.9b61	c9 00		cmp #$00			cmp 	#0 							; exit if zero
.9b63	f0 1e		beq $9b83			beq 	_ETHExit
.9b65	48		pha				pha 								; save on stack.
.9b66	20 16 a0	jsr $a016			jsr 	NSMShiftLeft 				; x 2
.9b69	20 16 a0	jsr $a016			jsr 	NSMShiftLeft 				; x 4
.9b6c	20 16 a0	jsr $a016			jsr 	NSMShiftLeft 				; x 8
.9b6f	20 16 a0	jsr $a016			jsr 	NSMShiftLeft 				; x 16
.9b72	68		pla				pla 								; ASCII
.9b73	c9 41		cmp #$41			cmp 	#'A'
.9b75	90 02		bcc $9b79			bcc 	_ETHNotChar
.9b77	e9 07		sbc #$07			sbc 	#7
.9b79					_ETHNotChar:
.9b79	29 0f		and #$0f			and 	#15 						; digit now
.9b7b	1d 08 04	ora $0408,x			ora 	NSMantissa0,x 				; put in LS Nibble
.9b7e	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9b81	80 db		bra $9b5e			bra 	_ETHLoop 					; go round.
.9b83					_ETHExit:
.9b83	60		rts				rts
.9b84					_ETString:
.9b84	c8		iny				iny 								; look at length
.9b85	b1 30		lda ($30),y			lda 	(codePtr),y
.9b87	48		pha				pha
.9b88	c8		iny				iny 								; first character
.9b89	20 4b a0	jsr $a04b			jsr 	MemoryInline 				; put address of string at (code-Ptr),y on stack
.9b8c	68		pla				pla 								; restore count and save
.9b8d	85 36		sta $36				sta 	zTemp0
.9b8f	98		tya				tya 								; add length to Y to skip it.
.9b90	18		clc				clc
.9b91	65 36		adc $36				adc 	zTemp0
.9b93	a8		tay				tay
.9b94	a9 10		lda #$10			lda 	#NSTString 					; mark as string
.9b96	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9b99	60		rts				rts
.9b9a					_ETVariable:
.9b9a	4c f4 9b	jmp $9bf4			jmp 	VariableHandler
.9b9d					_ETPuncUnary:
.9b9d	c8		iny				iny 								; consume the unary character
.9b9e	c9 2d		cmp #$2d			cmp 	#KWD_MINUS 					; unary minus
.9ba0	f0 2d		beq $9bcf			beq 	_ETUnaryNegate
.9ba2	c9 10		cmp #$10			cmp 	#KWD_AT 					; @ reference -> constant
.9ba4	f0 39		beq $9bdf			beq 	_ETDereference
.9ba6	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; parenthesis
.9ba8	f0 43		beq $9bed			beq 	_ETParenthesis
.9baa	64 36		stz $36				stz 	zTemp0 						; zTemp0 is the indirection level.
.9bac	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; byte indirection (0) ?
.9bae	f0 06		beq $9bb6			beq 	_ETIndirection
.9bb0	e6 36		inc $36				inc 	zTemp0
.9bb2	c9 21		cmp #$21			cmp 	#KWD_PLING					; word indirection (1) \
.9bb4	d0 a0		bne $9b56			bne 	_ETSyntaxError
.9bb6					_ETIndirection:
.9bb6	a5 36		lda $36				lda 	zTemp0 						; push indirection amount (0-1) => (1-2) on the stack
.9bb8	1a		inc a				inc 	a
.9bb9	48		pha				pha
.9bba	20 23 9b	jsr $9b23			jsr 	EvaluateTerm				; evaluate the term
.9bbd	20 67 99	jsr $9967			jsr 	Dereference 				; dereference it.
.9bc0	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a +ve integer.
.9bc3	d0 07		bne $9bcc			bne 	_ETTypeMismatch
.9bc5	68		pla				pla 								; indirection 1-2
.9bc6	09 20		ora #$20			ora 	#NSBIsReference 			; make it a reference.
.9bc8	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9bcb	60		rts				rts
.9bcc					_ETTypeMismatch:
.9bcc	4c 72 ad	jmp $ad72			jmp 	TypeError
.9bcf					_ETUnaryNegate:
.9bcf	20 23 9b	jsr $9b23			jsr 	EvaluateTerm				; evaluate the term
.9bd2	20 67 99	jsr $9967			jsr 	Dereference 				; dereference it.
.9bd5	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a number
.9bd8	29 10		and #$10			and 	#NSTString
.9bda	d0 f0		bne $9bcc			bne 	_ETTypeMismatch
.9bdc	4c ad 9f	jmp $9fad			jmp 	NSMNegate  					; just toggles the sign bit.
.9bdf					_ETDereference:
.9bdf	20 23 9b	jsr $9b23			jsr 	EvaluateTerm				; evaluate the term
.9be2	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; must be a reference
.9be5	29 20		and #$20			and 	#NSBIsReference
.9be7	f0 e3		beq $9bcc			beq 	_ETTypeMismatch
.9be9	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; make it an integer address
.9bec	60		rts				rts
.9bed					_ETParenthesis:
.9bed	20 52 98	jsr $9852			jsr 	EvaluateExpression 			; evaluate here, from lowest precedence
.9bf0	20 82 a7	jsr $a782			jsr 	CheckRightBracket 			; check for )
.9bf3	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/variable.asm

.9bf4					VariableHandler:
.9bf4	b1 30		lda ($30),y			lda 	(codePtr),y
.9bf6	18		clc				clc
.9bf7	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.9bf9	85 37		sta $37				sta 	zTemp0+1
.9bfb	c8		iny				iny
.9bfc	b1 30		lda ($30),y			lda 	(codePtr),y
.9bfe	85 36		sta $36				sta 	zTemp0
.9c00	c8		iny				iny
.9c01	18		clc				clc									; copy variable address+3 to mantissa
.9c02	69 03		adc #$03			adc 	#3
.9c04	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9c07	a5 37		lda $37				lda 	zTemp0+1
.9c09	69 00		adc #$00			adc 	#0
.9c0b	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9c0e	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.9c11	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.9c14	9e 28 04	stz $0428,x			stz 	NSExponent,x
.9c17	5a		phy				phy
.9c18	a0 02		ldy #$02			ldy 	#2 							; read type
.9c1a	b1 36		lda ($36),y			lda 	(zTemp0),y
.9c1c	7a		ply				ply
.9c1d	29 1c		and #$1c			and 	#NSBTypeMask+NSBIsArray 	; get type information
.9c1f	09 20		ora #$20			ora 	#NSBIsReference 			; make a reference.
.9c21	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9c24	29 04		and #$04			and 	#NSBIsArray
.9c26	d0 01		bne $9c29			bne 	_VHArray
.9c28	60		rts				rts
.9c29					_VHArray:
.9c29	e8		inx				inx
.9c2a	20 99 9f	jsr $9f99			jsr 	Evaluate8BitInteger 		; get the 1st index.
.9c2d	a9 ff		lda #$ff			lda 	#$FF 						; set Status of X+2 to a duff value so we know if we picked it up.
.9c2f	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.9c32	b1 30		lda ($30),y			lda 	(codePtr),y
.9c34	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.9c36	d0 06		bne $9c3e			bne 	_VHNoSecondIndex
.9c38	c8		iny				iny 								; skip the comma
.9c39	e8		inx				inx
.9c3a	20 99 9f	jsr $9f99			jsr 	Evaluate8BitInteger 		; get the 2nd index.
.9c3d	ca		dex				dex
.9c3e					_VHNoSecondIndex:
.9c3e	ca		dex				dex 								; set X back.
.9c3f	20 82 a7	jsr $a782			jsr 	CheckRightBracket 			; and check the right bracket.
.9c42	5a		phy				phy 								; save position
.9c43	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy record address to zaTemp
.9c46	85 3e		sta $3e				sta 	zaTemp
.9c48	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9c4b	85 3f		sta $3f				sta 	zaTemp+1
.9c4d	a0 03		ldy #$03			ldy 	#3 							; get the second index - which is 0 if there is one index.
.9c4f	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9c51	f0 02		beq $9c55			beq 	_VHHas2Mask
.9c53	a9 ff		lda #$ff			lda 	#$FF
.9c55					_VHHas2Mask:
.9c55	dd 02 04	cmp $0402,x			cmp 	NSStatus+2,x 				; so if they are the same there are the wrong number of indices
.9c58	f0 54		beq $9cae			beq 	_VHBadIndex
.9c5a	0a		asl a				asl 	a 							; carry will be set if a second index
.9c5b	90 09		bcc $9c66			bcc 	_VHCheckFirstIndex
.9c5d	a0 03		ldy #$03			ldy 	#3 			 				; check the 2nd size >= 2nd index
.9c5f	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9c61	dd 0a 04	cmp $040a,x			cmp 	NSMantissa0+2,x
.9c64	90 48		bcc $9cae			bcc 	_VHBadIndex
.9c66					_VHCheckFirstIndex:
.9c66	a0 02		ldy #$02			ldy 	#2 			 				; check the 2nd size >= 2nd index
.9c68	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9c6a	dd 09 04	cmp $0409,x			cmp 	NSMantissa0+1,x
.9c6d	90 3f		bcc $9cae			bcc 	_VHBadIndex
.9c6f	64 36		stz $36				stz 	zTemp0 						; clear zTemp0 (if 1 index)
.9c71	64 37		stz $37				stz 	zTemp0+1
.9c73	bd 02 04	lda $0402,x			lda 	NSStatus+2,x 				; if only one index provided, don't need to multiply
.9c76	30 0f		bmi $9c87			bmi 	_VHNoMultiply
.9c78	da		phx				phx
.9c79	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; get 2nd index on stack
.9c7c	48		pha				pha
.9c7d	a0 02		ldy #$02			ldy 	#2 							; get 1st size in A
.9c7f	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9c81	1a		inc a				inc 	a 							; add 1 for zero base
.9c82	fa		plx				plx
.9c83	20 04 ac	jsr $ac04			jsr 	Multiply8x8 				; calculate -> Z0
.9c86	fa		plx				plx
.9c87					_VHNoMultiply:
.9c87	18		clc				clc
.9c88	a5 36		lda $36				lda 	zTemp0
.9c8a	7d 09 04	adc $0409,x			adc 	NSMantissa0+1,x
.9c8d	85 36		sta $36				sta 	zTemp0
.9c8f	a5 37		lda $37				lda 	zTemp0+1
.9c91	69 00		adc #$00			adc 	#0
.9c93	85 37		sta $37				sta 	zTemp0+1
.9c95	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9c98	20 75 8b	jsr $8b75			jsr 	ScaleByBaseType
.9c9b	18		clc				clc
.9c9c	b2 3e		lda ($3e)			lda 	(zaTemp)
.9c9e	65 36		adc $36				adc 	zTemp0
.9ca0	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9ca3	a0 01		ldy #$01			ldy 	#1
.9ca5	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9ca7	65 37		adc $37				adc 	zTemp0+1
.9ca9	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9cac	7a		ply				ply 								; restore position
.9cad	60		rts				rts
.9cae					_VHBadIndex:
.9cae	a9 17		lda #$17		lda	#23
.9cb0	4c 49 94	jmp $9449		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/abs.asm

.ab3a					AbsUnary:
.ab3a	fa		plx				plx 								; restore stack pos
.ab3b	20 55 9f	jsr $9f55			jsr 	EvaluateNumber 				; get a float or int
.ab3e	20 82 a7	jsr $a782			jsr 	CheckRightBracket
.ab41	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; clear the sign bit
.ab44	29 7f		and #$7f			and 	#$7F
.ab46	9d 00 04	sta $0400,x			sta 	NSStatus,x
.ab49	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/alloc.asm

.9cb3					AllocUnary:
.9cb3	fa		plx				plx 								; restore stack pos
.9cb4	20 8d 9f	jsr $9f8d			jsr 	Evaluate16BitInteger		; get bytes required.
.9cb7	20 82 a7	jsr $a782			jsr 	CheckRightBracket
.9cba	da		phx				phx 								; save X/Y
.9cbb	5a		phy				phy
.9cbc	8a		txa				txa 								; copy X into Y
.9cbd	a8		tay				tay
.9cbe	b9 10 04	lda $0410,y			lda		NSMantissa1,y 				; get size
.9cc1	aa		tax				tax
.9cc2	b9 08 04	lda $0408,y			lda 	NSMantissa0,y
.9cc5	20 d2 9c	jsr $9cd2			jsr 	AllocateXABytes 			; allocate memory
.9cc8	99 08 04	sta $0408,y			sta 	NSMantissa0,y 				; write address out.
.9ccb	8a		txa				txa
.9ccc	99 10 04	sta $0410,y			sta 	NSMantissa1,y
.9ccf	7a		ply				ply
.9cd0	fa		plx				plx
.9cd1	60		rts				rts
.9cd2					AllocateXABytes:
.9cd2	5a		phy				phy
.9cd3	ac 8c 04	ldy $048c			ldy 	lowMemPtr 					; push current address on stack and to zTemp0
.9cd6	84 36		sty $36				sty 	zTemp0
.9cd8	5a		phy				phy
.9cd9	ac 8d 04	ldy $048d			ldy 	lowMemPtr+1
.9cdc	84 37		sty $37				sty 	zTemp0+1
.9cde	5a		phy				phy
.9cdf	18		clc				clc 								; add to low memory pointer
.9ce0	6d 8c 04	adc $048c			adc 	lowMemPtr
.9ce3	8d 8c 04	sta $048c			sta 	lowMemPtr
.9ce6	8a		txa				txa
.9ce7	6d 8d 04	adc $048d			adc 	lowMemPtr+1
.9cea	8d 8d 04	sta $048d			sta 	lowMemPtr+1
.9ced	b0 2f		bcs $9d1e			bcs 	CISSMemory
.9cef	20 10 9d	jsr $9d10			jsr 	CheckIdentifierStringSpace 	; check identifier/string space
.9cf2					_ClearMemory:
.9cf2	ad 8c 04	lda $048c			lda 	lowMemPtr 					; cleared all memory allocated
.9cf5	c5 36		cmp $36				cmp 	zTemp0
.9cf7	d0 07		bne $9d00			bne 	_CMClearNext
.9cf9	ad 8d 04	lda $048d			lda 	lowMemPtr+1
.9cfc	c5 37		cmp $37				cmp 	zTemp0+1
.9cfe	f0 0c		beq $9d0c			beq 	_CMExit
.9d00					_CMClearNext:
.9d00	a9 00		lda #$00			lda 	#0 							; clear byte, advance to next.
.9d02	92 36		sta ($36)			sta 	(zTemp0)
.9d04	e6 36		inc $36				inc 	zTemp0
.9d06	d0 ea		bne $9cf2			bne 	_ClearMemory
.9d08	e6 37		inc $37				inc		zTemp0+1
.9d0a	80 e6		bra $9cf2			bra 	_ClearMemory
.9d0c					_CMExit:
.9d0c	fa		plx				plx
.9d0d	68		pla				pla
.9d0e	7a		ply				ply
.9d0f	60		rts				rts
.9d10					CheckIdentifierStringSpace:
.9d10	48		pha				pha
.9d11	ad 8d 04	lda $048d			lda 	lowMemPtr+1 				; get low memory pointer
.9d14	18		clc				clc
.9d15	69 02		adc #$02			adc 	#2 							; need at least 2 256 byte pages
.9d17	cd 8f 04	cmp $048f			cmp 	StringMemory+1 				; is it >= StringMemory
.9d1a	b0 02		bcs $9d1e			bcs 	CISSMemory
.9d1c	68		pla				pla
.9d1d	60		rts				rts
.9d1e					CISSMemory:
.9d1e	a9 06		lda #$06		lda	#6
.9d20	4c 49 94	jmp $9449		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/asc.asm

.ab4a					AscUnary:
.ab4a	fa		plx				plx 								; restore stack pos
.ab4b	20 60 9f	jsr $9f60			jsr 	EvaluateString 				; get a string
.ab4e	b2 36		lda ($36)			lda 	(zTemp0)					; get/return firs character
.ab50	20 03 a0	jsr $a003			jsr 	NSMSetByte
.ab53	20 82 a7	jsr $a782			jsr 	CheckRightBracket
.ab56	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/frac.asm

.ab57					FracUnary:
.ab57	fa		plx				plx 								; restore stack pos
.ab58	20 55 9f	jsr $9f55			jsr 	EvaluateNumber 				; get a float or int
.ab5b	20 82 a7	jsr $a782			jsr 	CheckRightBracket
.ab5e	bd 00 04	lda $0400,x			lda 	NSStatus,x
.ab61	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.ab63	f0 04		beq $ab69			beq 	_IUZero
.ab65	20 27 aa	jsr $aa27			jsr 	FloatFractionalPart
.ab68	60		rts				rts
.ab69					_IUZero:
.ab69	20 01 a0	jsr $a001			jsr 	NSMSetZero
.ab6c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/int.asm

.ab6d					IntUnary:
.ab6d	fa		plx				plx 								; restore stack pos
.ab6e	20 55 9f	jsr $9f55			jsr 	EvaluateNumber 				; get a float or int
.ab71	20 82 a7	jsr $a782			jsr 	CheckRightBracket
.ab74	bd 00 04	lda $0400,x			lda 	NSStatus,x
.ab77	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.ab79	f0 03		beq $ab7e			beq 	_IUExit
.ab7b	20 8a aa	jsr $aa8a			jsr 	FloatIntegerPart
.ab7e					_IUExit:
.ab7e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/len.asm

.ab7f					LenUnary:
.ab7f	fa		plx				plx 								; restore stack pos
.ab80	20 60 9f	jsr $9f60			jsr 	EvaluateString 				; get a string
.ab83	5a		phy				phy
.ab84	a0 00		ldy #$00			ldy 	#0 							; find length
.ab86					_LenFind:
.ab86	b1 36		lda ($36),y			lda 	(zTemp0),y
.ab88	f0 06		beq $ab90			beq 	_LenExit
.ab8a	c8		iny				iny
.ab8b	d0 f9		bne $ab86			bne 	_LenFind
.ab8d	4c 6d ad	jmp $ad6d			jmp 	RangeError 					; string > 255
.ab90					_LenExit:
.ab90	98		tya				tya
.ab91	20 03 a0	jsr $a003			jsr 	NSMSetByte
.ab94	7a		ply				ply
.ab95	20 82 a7	jsr $a782			jsr 	CheckRightBracket
.ab98	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/not.asm

.9d23					Unary_Not:
.9d23	fa		plx				plx
.9d24	20 78 9f	jsr $9f78			jsr 	EvaluateInteger 			; get integer
.9d27	20 82 a7	jsr $a782			jsr 	CheckRightBracket
.9d2a	20 31 a0	jsr $a031			jsr 	NSMIsZero 					; zero mantissa ?
.9d2d	f0 04		beq $9d33			beq 	_NotZero
.9d2f	20 01 a0	jsr $a001			jsr 	NSMSetZero
.9d32	60		rts				rts
.9d33					_NotZero:
.9d33	4c b6 94	jmp $94b6			jmp 	ReturnTrue
.9d36					_UNBad:
.9d36	4c 77 ad	jmp $ad77			jmp 	ArgumentError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/rnd.asm

.9d39					Unary_Random:
.9d39	fa		plx				plx
.9d3a	20 b2 9d	jsr $9db2			jsr 	Random32Bit 				; get a random number
.9d3d	20 97 9d	jsr $9d97			jsr 	URCopyToMantissa  			; put in mantissa
.9d40	e8		inx				inx
.9d41	20 8d 9f	jsr $9f8d			jsr 	Evaluate16BitInteger 		; put modulus value in +1
.9d44	ca		dex				dex
.9d45	20 06 a8	jsr $a806			jsr 	IntegerModulusNoCheck 		; calculate modulus
.9d48	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; make it an integer positive
.9d4b	9e 28 04	stz $0428,x			stz 	NSExponent,x
.9d4e	20 82 a7	jsr $a782			jsr 	CheckRightBracket
.9d51	60		rts				rts
.9d52					Unary_Rnd:
.9d52	fa		plx				plx
.9d53	20 55 9f	jsr $9f55			jsr 	EvaluateNumber 				; number to use.
.9d56	20 82 a7	jsr $a782			jsr 	CheckRightBracket 			; closing bracket
.9d59	20 31 a0	jsr $a031			jsr 	NSMIsZero 					; if zero, then don't generate a new number
.9d5c	f0 2b		beq $9d89			beq 	_URCopySeed
.9d5e	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; if -ve, then seed using parameter
.9d61	10 23		bpl $9d86			bpl 	_URDontSeed
.9d63	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy - value to seed butchering it.
.9d66	49 17		eor #$17			eor 	#$17
.9d68	8d 88 04	sta $0488			sta 	RandomSeed+0
.9d6b	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9d6e	49 a5		eor #$a5			eor 	#$A5
.9d70	8d 89 04	sta $0489			sta 	RandomSeed+1
.9d73	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.9d76	49 c2		eor #$c2			eor 	#$C2
.9d78	8d 8a 04	sta $048a			sta 	RandomSeed+2
.9d7b	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.9d7e	49 9d		eor #$9d			eor 	#$9D
.9d80	8d 8b 04	sta $048b			sta 	RandomSeed+3
.9d83	20 b2 9d	jsr $9db2			jsr 	Random32Bit
.9d86					_URDontSeed:
.9d86	20 b2 9d	jsr $9db2			jsr 	Random32Bit 				; generate a number.
.9d89					_URCopySeed:
.9d89	20 97 9d	jsr $9d97			jsr 	URCopyToMantissa 			; copy into mantissa
.9d8c	a9 e1		lda #$e1			lda 	#-31 						; force into 0-1 range
.9d8e	8d 28 04	sta $0428			sta 	NSExponent
.9d91	a9 08		lda #$08			lda 	#NSTFloat
.9d93	8d 00 04	sta $0400			sta 	NSStatus 					; positive.
.9d96	60		rts				rts
.9d97					URCopyToMantissa:
.9d97	ad 88 04	lda $0488			lda 	RandomSeed+0
.9d9a	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9d9d	ad 89 04	lda $0489			lda 	RandomSeed+1
.9da0	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9da3	ad 8a 04	lda $048a			lda 	RandomSeed+2
.9da6	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9da9	ad 8b 04	lda $048b			lda 	RandomSeed+3
.9dac	29 7f		and #$7f			and 	#$7F 						; make legal mantissa
.9dae	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9db1	60		rts				rts
.9db2					Random32Bit:
.9db2	5a		phy				phy
.9db3	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.9db5	ad 88 04	lda $0488			lda 	RandomSeed+0 				; check the seed isn't zero
.9db8	d0 03		bne $9dbd			bne 	_Random1
.9dba	a8		tay				tay 								; if so do it 256 times
.9dbb	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.9dbd					_Random1:
.9dbd	0a		asl a				asl 	a 							; LSFR RNG
.9dbe	2e 89 04	rol $0489			rol 	RandomSeed+1
.9dc1	2e 8a 04	rol $048a			rol 	RandomSeed+2
.9dc4	2e 8b 04	rol $048b			rol 	RandomSeed+3
.9dc7	90 02		bcc $9dcb			bcc 	_Random2
.9dc9	49 c5		eor #$c5			eor 	#$C5
.9dcb					_Random2:
.9dcb	88		dey				dey
.9dcc	d0 ef		bne $9dbd			bne 	_Random1
.9dce	8d 88 04	sta $0488			sta 	RandomSeed+0
.9dd1	7a		ply				ply
.9dd2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/sgn.asm

.ab99					SgnUnary:
.ab99	fa		plx				plx 								; restore stack pos
.ab9a	20 55 9f	jsr $9f55			jsr 	EvaluateNumber 				; get a float or int
.ab9d	20 82 a7	jsr $a782			jsr 	CheckRightBracket
.aba0	20 31 a0	jsr $a031			jsr 	NSMIsZero 					; if zero
.aba3	f0 10		beq $abb5			beq 	_SGZero  					; return Int Zero
.aba5	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; get status w/sign
.aba8	48		pha				pha
.aba9	a9 01		lda #$01			lda 	#1 							; set to 1
.abab	20 03 a0	jsr $a003			jsr 	NSMSetByte
.abae	68		pla				pla
.abaf	29 80		and #$80			and		#$80 						; copy the sign byte out
.abb1	9d 00 04	sta $0400,x			sta 	NSStatus,x
.abb4	60		rts				rts
.abb5	20 01 a0	jsr $a001	_SGZero:jsr 	NSMSetZero
.abb8	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/val.asm

.abb9					ValUnary:
.abb9	fa		plx				plx 								; restore stack pos
.abba	20 cf ab	jsr $abcf			jsr 	ValMainCode 				; do the main val() code
.abbd	b0 01		bcs $abc0			bcs 	_VUError 					; couldn't convert
.abbf	60		rts				rts
.abc0					_VUError:
.abc0	4c 72 ad	jmp $ad72			jmp 	TypeError
.abc3					IsValUnary:
.abc3	fa		plx				plx 								; restore stack pos
.abc4	20 cf ab	jsr $abcf			jsr 	ValMainCode 				; do the main val() code
.abc7	b0 03		bcs $abcc			bcs 	_VUBad
.abc9	4c b6 94	jmp $94b6			jmp 	ReturnTrue
.abcc					_VUBad:
.abcc	4c c2 94	jmp $94c2			jmp 	ReturnFalse
.abcf					ValMainCode:
.abcf	20 60 9f	jsr $9f60			jsr 	EvaluateString 				; get a string
.abd2	20 82 a7	jsr $a782			jsr 	CheckRightBracket 			; check right bracket present
.abd5	5a		phy				phy
.abd6	b2 36		lda ($36)			lda 	(zTemp0) 					; check not empty string
.abd8	f0 17		beq $abf1			beq 	_VMCFail2
.abda	a0 ff		ldy #$ff			ldy 	#$FF 						; start position
.abdc	48		pha				pha 								; save first character
.abdd	c9 2d		cmp #$2d			cmp 	#"-"		 				; is it -
.abdf	d0 01		bne $abe2			bne 	_VMCStart
.abe1	c8		iny				iny 								; skip over -
.abe2					_VMCStart:
.abe2	38		sec				sec 								; initialise first time round.
.abe3					_VMCNext:
.abe3	c8		iny				iny 								; pre-increment
.abe4	b1 36		lda ($36),y			lda 	(zTemp0),y 					; next character
.abe6	f0 0c		beq $abf4			beq 	_VMCSuccess 				; successful.
.abe8	20 05 9a	jsr $9a05			jsr 	EncodeNumber 				; send it to the number-builder
.abeb	90 03		bcc $abf0			bcc 	_VMCFail 					; if failed, give up.
.abed	18		clc				clc 								; next time round, countinue
.abee	80 f3		bra $abe3			bra 	_VMCNext
.abf0					_VMCFail:
.abf0	68		pla				pla
.abf1					_VMCFail2:
.abf1	7a		ply				ply
.abf2	38		sec				sec
.abf3	60		rts				rts
.abf4					_VMCSuccess:
.abf4	a9 00		lda #$00			lda 	#0 							; construct final
.abf6	20 05 9a	jsr $9a05			jsr 	EncodeNumber
.abf9	68		pla				pla
.abfa	c9 2d		cmp #$2d			cmp 	#"-"
.abfc	d0 03		bne $ac01			bne 	_VMCNotNegative
.abfe	20 ad 9f	jsr $9fad			jsr		NSMNegate
.ac01					_VMCNotNegative:
.ac01	7a		ply				ply
.ac02	18		clc				clc
.ac03	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/chr.asm

.9dd3					ChrUnary:
.9dd3	fa		plx				plx 								; restore stack pos
.9dd4	20 99 9f	jsr $9f99			jsr 	Evaluate8BitInteger			; get value
.9dd7	48		pha				pha
.9dd8	20 82 a7	jsr $a782			jsr 	CheckRightBracket
.9ddb	a9 01		lda #$01			lda 	#1 							; allocate space for one char
.9ddd	20 8f b0	jsr $b08f			jsr 	StringTempAllocate
.9de0	68		pla				pla 								; write number to it
.9de1	20 cd b0	jsr $b0cd			jsr 	StringTempWrite
.9de4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/spc.asm

.9de5					SpcUnary:
.9de5	fa		plx				plx 								; restore stack pos
.9de6	20 99 9f	jsr $9f99			jsr 	Evaluate8BitInteger			; get value
.9de9	5a		phy				phy
.9dea	48		pha				pha 								; save count
.9deb	20 8f b0	jsr $b08f			jsr 	StringTempAllocate
.9dee	7a		ply				ply 								; to do count in Y
.9def					_SpcLoop:
.9def	c0 00		cpy #$00			cpy 	#0
.9df1	f0 08		beq $9dfb			beq 	_SpcExit
.9df3	a9 20		lda #$20			lda 	#32
.9df5	20 cd b0	jsr $b0cd			jsr 	StringTempWrite
.9df8	88		dey				dey
.9df9	80 f4		bra $9def			bra 	_SPCLoop
.9dfb					_SpcExit:
.9dfb	7a		ply				ply
.9dfc	20 82 a7	jsr $a782			jsr 	CheckRightBracket
.9dff	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/str.asm

.9e00					Unary_Str:
.9e00	fa		plx				plx
.9e01	20 55 9f	jsr $9f55			jsr 	EvaluateNumber  			; get number
.9e04	20 82 a7	jsr $a782			jsr 	CheckRightBracket 			; closing bracket
.9e07	a9 05		lda #$05			lda 	#5 							; maximum decimals, from Basic816
.9e09	20 22 9e	jsr $9e22			jsr 	ConvertNumberToString 		; do the conversion.
.9e0c	a9 21		lda #$21			lda		#33 						; create buffer
.9e0e	20 8f b0	jsr $b08f			jsr 	StringTempAllocate 			; allocate memory
.9e11	da		phx				phx
.9e12	a2 00		ldx #$00			ldx 	#0
.9e14					_USCopy:
.9e14	bd 19 06	lda $0619,x			lda 	DecimalBuffer,x
.9e17	20 cd b0	jsr $b0cd			jsr 	StringTempWrite
.9e1a	e8		inx				inx
.9e1b	bd 19 06	lda $0619,x			lda 	DecimalBuffer,x
.9e1e	d0 f4		bne $9e14			bne 	_USCopy
.9e20	fa		plx				plx
.9e21	60		rts				rts
.9e22					ConvertNumberToString:
.9e22	5a		phy				phy 								; save code position
.9e23	8d 94 04	sta $0494			sta 	DecimalPlaces	 			; save number of DPs.
.9e26	9c 95 04	stz $0495			stz 	dbOffset 					; offset into decimal buffer = start.
.9e29	bd 00 04	lda $0400,x			lda 	NSStatus,x  				; is it -ve.
.9e2c	10 0a		bpl $9e38			bpl 	_CNTSNotNegative
.9e2e	29 7f		and #$7f			and 	#$7F 						; make +ve
.9e30	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9e33	a9 2d		lda #$2d			lda 	#"-"
.9e35	20 9e 9e	jsr $9e9e			jsr 	WriteDecimalBuffer
.9e38					_CNTSNotNegative:
.9e38	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check if decimal
.9e3b	f0 15		beq $9e52			beq 	_CNTSNotFloat
.9e3d	e8		inx				inx 								; round up
.9e3e	a9 01		lda #$01			lda 	#1
.9e40	20 03 a0	jsr $a003			jsr 	NSMSetByte
.9e43	ca		dex				dex
.9e44	bd 28 04	lda $0428,x			lda		NSExponent,x
.9e47	9d 29 04	sta $0429,x			sta 	NSExponent+1,x
.9e4a	a9 08		lda #$08			lda 	#NSTFloat
.9e4c	9d 01 04	sta $0401,x			sta 	NSStatus+1,x
.9e4f	20 49 a9	jsr $a949			jsr 	FloatAdd
.9e52					_CNTSNotFloat:
.9e52	20 80 9e	jsr $9e80			jsr 	MakePlusTwoString
.9e55	20 27 aa	jsr $aa27			jsr 	FloatFractionalPart 		; get the fractional part
.9e58	20 eb aa	jsr $aaeb			jsr 	NSNormalise					; normalise , exit if zero
.9e5b	f0 21		beq $9e7e			beq 	_CNTSExit
.9e5d	a9 2e		lda #$2e			lda 	#"."
.9e5f	20 9e 9e	jsr $9e9e			jsr 	WriteDecimalBuffer 			; write decimal place
.9e62					_CNTSDecimal:
.9e62	ce 94 04	dec $0494			dec 	DecimalPlaces 				; done all the decimals
.9e65	30 17		bmi $9e7e			bmi 	_CNTSExit
.9e67	e8		inx				inx 								; x 10.0
.9e68	a9 0a		lda #$0a			lda 	#10
.9e6a	20 03 a0	jsr $a003			jsr 	NSMSetByte
.9e6d	a9 08		lda #$08			lda 	#NSTFloat
.9e6f	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9e72	ca		dex				dex
.9e73	20 b4 aa	jsr $aab4			jsr 	FloatMultiply
.9e76	20 80 9e	jsr $9e80			jsr 	MakePlusTwoString
.9e79	20 27 aa	jsr $aa27			jsr 	FloatFractionalPart 		; get the fractional part
.9e7c	80 e4		bra $9e62			bra 	_CNTSDecimal 				; keep going.
.9e7e					_CNTSExit:
.9e7e	7a		ply				ply
.9e7f	60		rts				rts
.9e80					MakePlusTwoString:
.9e80	da		phx				phx
.9e81	20 d8 9f	jsr $9fd8			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.9e84	e8		inx				inx 								; access it
.9e85	e8		inx				inx
.9e86	20 8a aa	jsr $aa8a			jsr 	FloatIntegerPart 			; make it an integer
.9e89	a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.9e8b	20 f3 a8	jsr $a8f3			jsr 	ConvertInt32
.9e8e	a2 00		ldx #$00			ldx	 	#0
.9e90					_MPTSCopy:
.9e90	bd f7 05	lda $05f7,x			lda 	NumberBuffer,x
.9e93	20 9e 9e	jsr $9e9e			jsr 	WriteDecimalBuffer
.9e96	e8		inx				inx
.9e97	bd f7 05	lda $05f7,x			lda 	NumberBuffer,x
.9e9a	d0 f4		bne $9e90			bne 	_MPTSCopy
.9e9c	fa		plx				plx
.9e9d	60		rts				rts
.9e9e					WriteDecimalBuffer:
.9e9e	da		phx				phx
.9e9f	ae 95 04	ldx $0495			ldx 	dbOffset
.9ea2	9d 19 06	sta $0619,x			sta 	DecimalBuffer,x
.9ea5	9e 1a 06	stz $061a,x			stz 	DecimalBuffer+1,x
.9ea8	ee 95 04	inc $0495			inc 	dbOffset
.9eab	fa		plx				plx
.9eac	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/substring.asm

.9ead					Unary_Left:
.9ead	fa		plx				plx
.9eae	18		clc				clc 								; only one parameter
.9eaf	20 24 9f	jsr $9f24			jsr 	SubstringInitial 			; set up.
.9eb2	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; Param #1 is the length
.9eb5	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.9eb8	9e 09 04	stz $0409,x			stz 	NSMantissa0+1,x 			; Start is zero.
.9ebb	80 2c		bra $9ee9			bra 	SubstringMain
.9ebd					Unary_Right:
.9ebd	fa		plx				plx
.9ebe	18		clc				clc 								; only one parameter
.9ebf	20 24 9f	jsr $9f24			jsr 	SubstringInitial 			; set up.
.9ec2	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; length => param 2
.9ec5	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.9ec8	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; total length
.9ecb	fd 09 04	sbc $0409,x			sbc 	NSMantissa0+1,x 			; length - required.
.9ece	b0 02		bcs $9ed2			bcs 	_URNotUnderflow
.9ed0	a9 00		lda #$00			lda 	#0 							; start from the beginning, as something like right$("AB",3)
.9ed2					_URNotUnderFlow:
.9ed2	9d 09 04	sta $0409,x			sta 	NSMantissa0+1,x 			; this is the start position
.9ed5	80 12		bra $9ee9			bra 	SubStringMain
.9ed7					Unary_Mid:
.9ed7	fa		plx				plx
.9ed8	38		sec				sec 								; two parameters
.9ed9	20 24 9f	jsr $9f24			jsr 	SubstringInitial 			; set up.
.9edc	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; first parameter is zero ?
.9edf	f0 05		beq $9ee6			beq 	_UMError
.9ee1	de 09 04	dec $0409,x			dec 	NSMantissa0+1,x				; reduce initial offset by 1 as MID$(a$,1..) is actually the first character
.9ee4	80 03		bra $9ee9			bra 	SubStringMain
.9ee6					_UMError:
.9ee6	4c 77 ad	jmp $ad77			jmp 	ArgumentError
.9ee9					SubStringMain:
.9ee9	bd 09 04	lda $0409,x			lda 	NSMantissa0+1,x 			; is the initial offset >= the length
.9eec	dd 28 04	cmp $0428,x			cmp 	NSExponent,x
.9eef	b0 2d		bcs $9f1e			bcs 	_SSMNull 					; if so, return an empty string.
.9ef1	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; if copy count is zero
.9ef4	f0 28		beq $9f1e			beq 	_SSMNull 					; return empty string.
.9ef6	18		clc				clc 								; add the offset +1 to the address and
.9ef7	bd 08 04	lda $0408,x			lda	 	NSMantissa0,x 				; put in zTemp
.9efa	7d 09 04	adc $0409,x			adc 	NSMantissa0+1,x
.9efd	85 36		sta $36				sta 	zTemp0
.9eff	bd 10 04	lda $0410,x			lda	 	NSMantissa1,x
.9f02	69 00		adc #$00			adc 	#0
.9f04	85 37		sta $37				sta 	zTemp0+1
.9f06					_SSMNoCarry:
.9f06	bd 0a 04	lda $040a,x			lda 	NSMantissa0+2,x 			; characters required.
.9f09	20 8f b0	jsr $b08f			jsr 	StringTempAllocate 			; allocate that many characters
.9f0c	5a		phy				phy 								; save Y
.9f0d	a0 00		ldy #$00			ldy 	#0 							; start copying in.
.9f0f					_SSMCopy:
.9f0f	b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next character
.9f11	f0 09		beq $9f1c			beq 	_SSMEString 				; no more to copy
.9f13	20 cd b0	jsr $b0cd			jsr 	StringTempWrite 			; and write it out.
.9f16	c8		iny				iny
.9f17	de 0a 04	dec $040a,x			dec 	NSMantissa0+2,x
.9f1a	d0 f3		bne $9f0f			bne 	_SSMCopy
.9f1c					_SSMEString:
.9f1c	7a		ply				ply
.9f1d					_SSMExit:
.9f1d	60		rts				rts
.9f1e					_SSMNull:
.9f1e	a9 00		lda #$00			lda 	#0
.9f20	20 8f b0	jsr $b08f			jsr 	StringTempAllocate
.9f23	60		rts				rts
.9f24					SubstringInitial:
.9f24	da		phx				phx 								; save initial stack position
.9f25	08		php				php 								; save carry on stack indicating 2 parameters
.9f26	20 60 9f	jsr $9f60			jsr 	EvaluateString 				; get a string
.9f29	5a		phy				phy 								; calculate length to exponent.
.9f2a	a0 ff		ldy #$ff			ldy 	#$FF
.9f2c					_SIFindLength:
.9f2c	c8		iny				iny
.9f2d	b1 36		lda ($36),y			lda 	(zTemp0),y
.9f2f	d0 fb		bne $9f2c			bne 	_SIFindLength
.9f31	98		tya				tya
.9f32	9d 28 04	sta $0428,x			sta 	NSExponent,x
.9f35	7a		ply				ply
.9f36	e8		inx				inx
.9f37	20 8a a7	jsr $a78a			jsr 	CheckComma 					; comma next
.9f3a	20 99 9f	jsr $9f99			jsr 	Evaluate8BitInteger 		; get next parameter
.9f3d	28		plp				plp 								; is it the last parameter ?
.9f3e	90 07		bcc $9f47			bcc 	_SSIExit 					; if so, exit.
.9f40	e8		inx				inx
.9f41	20 8a a7	jsr $a78a			jsr 	CheckComma 					; comma next
.9f44	20 99 9f	jsr $9f99			jsr 	Evaluate8BitInteger 		; get last parameter
.9f47					_SSIExit:
.9f47	fa		plx				plx
.9f48	20 82 a7	jsr $a782			jsr 	CheckRightBracket 			; check closing bracket
.9f4b	60		rts				rts 								; exit

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/exprhelper.asm

.9f4c					EvaluateValue:
.9f4c	48		pha				pha
.9f4d	20 52 98	jsr $9852			jsr		EvaluateExpression 			; expression
.9f50	20 67 99	jsr $9967			jsr 	Dereference					; derefernce it
.9f53	68		pla				pla
.9f54	60		rts				rts
.9f55					EvaluateNumber:
.9f55	20 4c 9f	jsr $9f4c			jsr 	EvaluateValue 				; get a value
.9f58	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if string.
.9f5b	29 10		and #$10			and 	#NSBIsString
.9f5d	d0 16		bne $9f75			bne 	HelperTypeError
.9f5f	60		rts				rts
.9f60					EvaluateString:
.9f60	20 4c 9f	jsr $9f4c			jsr 	EvaluateValue 				; get a value
.9f63	bd 00 04	lda $0400,x			lda 	NSStatus,x 					; check if string.
.9f66	29 10		and #$10			and 	#NSBIsString
.9f68	f0 0b		beq $9f75			beq 	HelperTypeError
.9f6a					CopyAddressToTemp0:
.9f6a	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy address -> zTemp0
.9f6d	85 36		sta $36				sta 	zTemp0
.9f6f	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9f72	85 37		sta $37				sta 	zTemp0+1
.9f74	60		rts				rts
.9f75					HelperTypeError:
.9f75	4c 72 ad	jmp $ad72			jmp 	TypeError
.9f78					EvaluateInteger:
.9f78	20 55 9f	jsr $9f55			jsr 	EvaluateNumber
.9f7b	bd 28 04	lda $0428,x			lda 	NSExponent,x 				; check exponent is zero
.9f7e	d0 0a		bne $9f8a			bne 	HelperValueError 			; if not, it's a float.
.9f80	60		rts				rts
.9f81					EvaluateUnsignedInteger:
.9f81	20 78 9f	jsr $9f78			jsr 	EvaluateInteger 			; check integer is +ve
.9f84	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9f87	30 01		bmi $9f8a			bmi 	HelperValueError
.9f89	60		rts				rts
.9f8a					HelperValueError:
.9f8a	4c 77 ad	jmp $ad77			jmp 	ArgumentError
.9f8d					Evaluate16BitInteger:
.9f8d	20 81 9f	jsr $9f81			jsr	 	EvaluateUnsignedInteger		; get integer
.9f90	bd 20 04	lda $0420,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.9f93	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.9f96	d0 f2		bne $9f8a			bne 	HelperValueError
.9f98	60		rts				rts
.9f99					Evaluate8BitInteger:
.9f99	20 81 9f	jsr $9f81			jsr	 	EvaluateUnsignedInteger 	; get an integer
.9f9c	d0 ec		bne $9f8a			bne 	HelperValueError
.9f9e	bd 20 04	lda $0420,x			lda 	NSMantissa3,x	 			; bytes 1, 2 & 3 must be zero
.9fa1	1d 18 04	ora $0418,x			ora 	NSMantissa2,x
.9fa4	1d 10 04	ora $0410,x			ora 	NSMantissa1,x
.9fa7	d0 e1		bne $9f8a			bne 	HelperValueError
.9fa9	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9fac	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/mult8x8.asm

.ac04					Multiply8x8:
.ac04	4a		lsr a		  		lsr 	a  							; prime the carry bit for the loop
.ac05	85 36		sta $36			  	sta 	zTemp0
.ac07	86 37		stx $37				stx 	zTemp0+1
.ac09	a9 00		lda #$00			lda 	#0
.ac0b	a2 08		ldx #$08			ldx 	#8
.ac0d					_M88Loop:
.ac0d	90 03		bcc $ac12			bcc 	_M88NoAdd
.ac0f	18		clc				clc
.ac10	65 37		adc $37				adc 	zTemp0+1
.ac12					_M88NoAdd:
.ac12	6a		ror a				ror 	a
.ac13	66 36		ror $36				ror 	zTemp0  					; pull another bit out for the next iteration
.ac15	ca		dex				dex         						; inc/dec don't modify carry; only shifts and adds do
.ac16	d0 f5		bne $ac0d			bne 	_M88Loop
.ac18	85 37		sta $37				sta 	zTemp0+1 					; store high 8 bits.
.ac1a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/utility.asm

.9fad					NSMNegate:
.9fad	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9fb0	49 80		eor #$80			eor 	#NSBIsNegative
.9fb2	9d 00 04	sta $0400,x			sta 	NSStatus,x
.9fb5	60		rts				rts
.9fb6					NSMNegateMantissa:
.9fb6	38		sec				sec
.9fb7	a9 00		lda #$00			lda 	#0
.9fb9	fd 08 04	sbc $0408,x			sbc 	NSMantissa0,x
.9fbc	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.9fbf	a9 00		lda #$00			lda 	#0
.9fc1	fd 10 04	sbc $0410,x			sbc 	NSMantissa1,x
.9fc4	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.9fc7	a9 00		lda #$00			lda 	#0
.9fc9	fd 18 04	sbc $0418,x			sbc 	NSMantissa2,x
.9fcc	9d 18 04	sta $0418,x			sta 	NSMantissa2,x
.9fcf	a9 00		lda #$00			lda 	#0
.9fd1	fd 20 04	sbc $0420,x			sbc 	NSMantissa3,x
.9fd4	9d 20 04	sta $0420,x			sta 	NSMantissa3,x
.9fd7	60		rts				rts
.9fd8					NSMShiftUpTwo:
.9fd8	bd 08 04	lda $0408,x			lda 	NSMantissa0,x
.9fdb	9d 0a 04	sta $040a,x			sta 	NSMantissa0+2,x
.9fde	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.9fe1	9d 12 04	sta $0412,x			sta 	NSMantissa1+2,x
.9fe4	bd 18 04	lda $0418,x			lda 	NSMantissa2,x
.9fe7	9d 1a 04	sta $041a,x			sta 	NSMantissa2+2,x
.9fea	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.9fed	9d 22 04	sta $0422,x			sta 	NSMantissa3+2,x
.9ff0	bd 28 04	lda $0428,x			lda 	NSExponent,x
.9ff3	9d 2a 04	sta $042a,x			sta 	NSExponent+2,x
.9ff6	bd 00 04	lda $0400,x			lda 	NSStatus,x
.9ff9	9d 02 04	sta $0402,x			sta 	NSStatus+2,x
.9ffc	60		rts				rts
.9ffd					NSMSetZeroMantissaOnly:
.9ffd	a9 00		lda #$00			lda 	#0
.9fff	80 08		bra $a009			bra 	NSMSetMantissa
.a001					NSMSetZero:
.a001	a9 00		lda #$00			lda 	#0
.a003					NSMSetByte:
.a003	9e 28 04	stz $0428,x			stz 	NSExponent,x 				; zero exponent, as integer.
.a006	9e 00 04	stz $0400,x			stz 	NSStatus,x 					; status zero (integer)
.a009					NSMSetMantissa:
.a009	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; mantissa
.a00c	9e 10 04	stz $0410,x			stz 	NSMantissa1,x
.a00f	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.a012	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.a015	60		rts				rts
.a016					NSMShiftLeft:
.a016	18		clc				clc
.a017					NSMRotateLeft:
.a017	3e 08 04	rol $0408,x			rol 	NSMantissa0,x
.a01a	3e 10 04	rol $0410,x			rol		NSMantissa1,x
.a01d	3e 18 04	rol $0418,x			rol		NSMantissa2,x
.a020	3e 20 04	rol $0420,x			rol		NSMantissa3,x
.a023	60		rts				rts
.a024					NSMShiftRight:
.a024	5e 20 04	lsr $0420,x			lsr 	NSMantissa3,x
.a027	7e 18 04	ror $0418,x			ror		NSMantissa2,x
.a02a	7e 10 04	ror $0410,x			ror		NSMantissa1,x
.a02d	7e 08 04	ror $0408,x			ror		NSMantissa0,x
.a030	60		rts				rts
.a031					NSMIsZero:
.a031	bd 20 04	lda $0420,x			lda 	NSMantissa3,x
.a034	1d 18 04	ora $0418,x			ora		NSMantissa2,x
.a037	1d 10 04	ora $0410,x			ora		NSMantissa1,x
.a03a	1d 08 04	ora $0408,x			ora		NSMantissa0,x
.a03d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/asmcore.asm

.ac1b					Assemble_ora:
.ac1b	20 74 87	jsr $8774		jsr	AssembleGroup1
>ac1e	01					.byte $01
.ac1f					Assemble_and:
.ac1f	20 74 87	jsr $8774		jsr	AssembleGroup1
>ac22	21					.byte $21
.ac23					Assemble_eor:
.ac23	20 74 87	jsr $8774		jsr	AssembleGroup1
>ac26	41					.byte $41
.ac27					Assemble_adc:
.ac27	20 74 87	jsr $8774		jsr	AssembleGroup1
>ac2a	61					.byte $61
.ac2b					Assemble_sta:
.ac2b	20 74 87	jsr $8774		jsr	AssembleGroup1
>ac2e	81					.byte $81
.ac2f					Assemble_lda:
.ac2f	20 74 87	jsr $8774		jsr	AssembleGroup1
>ac32	a1					.byte $a1
.ac33					Assemble_cmp:
.ac33	20 74 87	jsr $8774		jsr	AssembleGroup1
>ac36	c1					.byte $c1
.ac37					Assemble_sbc:
.ac37	20 74 87	jsr $8774		jsr	AssembleGroup1
>ac3a	e1					.byte $e1
.ac3b					Assemble_asl:
.ac3b	20 7b 87	jsr $877b		jsr	AssembleGroup2
>ac3e	02					.byte $02
>ac3f	75					.byte $75
.ac40					Assemble_rol:
.ac40	20 7b 87	jsr $877b		jsr	AssembleGroup2
>ac43	22					.byte $22
>ac44	75					.byte $75
.ac45					Assemble_lsr:
.ac45	20 7b 87	jsr $877b		jsr	AssembleGroup2
>ac48	42					.byte $42
>ac49	75					.byte $75
.ac4a					Assemble_ror:
.ac4a	20 7b 87	jsr $877b		jsr	AssembleGroup2
>ac4d	62					.byte $62
>ac4e	75					.byte $75
.ac4f					Assemble_stx:
.ac4f	20 7b 87	jsr $877b		jsr	AssembleGroup2
>ac52	82					.byte $82
>ac53	50					.byte $50
.ac54					Assemble_ldx:
.ac54	20 7b 87	jsr $877b		jsr	AssembleGroup2
>ac57	a2					.byte $a2
>ac58	d0					.byte $d0
.ac59					Assemble_dec:
.ac59	20 7b 87	jsr $877b		jsr	AssembleGroup2
>ac5c	c2					.byte $c2
>ac5d	55					.byte $55
.ac5e					Assemble_inc:
.ac5e	20 7b 87	jsr $877b		jsr	AssembleGroup2
>ac61	e2					.byte $e2
>ac62	55					.byte $55
.ac63					Assemble_stz:
.ac63	20 7b 87	jsr $877b		jsr	AssembleGroup2
>ac66	60					.byte $60
>ac67	44					.byte $44
.ac68					Assemble_bit:
.ac68	20 7b 87	jsr $877b		jsr	AssembleGroup2
>ac6b	20					.byte $20
>ac6c	55					.byte $55
.ac6d					Assemble_sty:
.ac6d	20 7b 87	jsr $877b		jsr	AssembleGroup2
>ac70	80					.byte $80
>ac71	54					.byte $54
.ac72					Assemble_ldy:
.ac72	20 7b 87	jsr $877b		jsr	AssembleGroup2
>ac75	a0					.byte $a0
>ac76	d5					.byte $d5
.ac77					Assemble_cpy:
.ac77	20 7b 87	jsr $877b		jsr	AssembleGroup2
>ac7a	c0					.byte $c0
>ac7b	d4					.byte $d4
.ac7c					Assemble_cpx:
.ac7c	20 7b 87	jsr $877b		jsr	AssembleGroup2
>ac7f	e0					.byte $e0
>ac80	d0					.byte $d0
.ac81					Assemble_tsb:
.ac81	20 7b 87	jsr $877b		jsr	AssembleGroup2
>ac84	00					.byte $00
>ac85	50					.byte $50
.ac86					Assemble_trb:
.ac86	20 7b 87	jsr $877b		jsr	AssembleGroup2
>ac89	10					.byte $10
>ac8a	50					.byte $50
.ac8b					Assemble_jsr:
.ac8b	20 7b 87	jsr $877b		jsr	AssembleGroup2
>ac8e	14					.byte $14
>ac8f	10					.byte $10
.ac90					Assemble_jmp:
.ac90	20 7b 87	jsr $877b		jsr	AssembleGroup2
>ac93	40					.byte $40
>ac94	10					.byte $10
.ac95					Assemble_bpl:
.ac95	20 cc 87	jsr $87cc		jsr	AssembleGroup3
>ac98	10					.byte $10
.ac99					Assemble_bmi:
.ac99	20 cc 87	jsr $87cc		jsr	AssembleGroup3
>ac9c	30					.byte $30
.ac9d					Assemble_bvc:
.ac9d	20 cc 87	jsr $87cc		jsr	AssembleGroup3
>aca0	50					.byte $50
.aca1					Assemble_bvs:
.aca1	20 cc 87	jsr $87cc		jsr	AssembleGroup3
>aca4	70					.byte $70
.aca5					Assemble_bcc:
.aca5	20 cc 87	jsr $87cc		jsr	AssembleGroup3
>aca8	90					.byte $90
.aca9					Assemble_bcs:
.aca9	20 cc 87	jsr $87cc		jsr	AssembleGroup3
>acac	b0					.byte $b0
.acad					Assemble_bne:
.acad	20 cc 87	jsr $87cc		jsr	AssembleGroup3
>acb0	d0					.byte $d0
.acb1					Assemble_beq:
.acb1	20 cc 87	jsr $87cc		jsr	AssembleGroup3
>acb4	f0					.byte $f0
.acb5					Assemble_bra:
.acb5	20 cc 87	jsr $87cc		jsr	AssembleGroup3
>acb8	80					.byte $80
.acb9					Assemble_brk:
.acb9	20 02 88	jsr $8802		jsr	AssembleGroup4
>acbc	00					.byte $00
.acbd					Assemble_php:
.acbd	20 02 88	jsr $8802		jsr	AssembleGroup4
>acc0	08					.byte $08
.acc1					Assemble_clc:
.acc1	20 02 88	jsr $8802		jsr	AssembleGroup4
>acc4	18					.byte $18
.acc5					Assemble_plp:
.acc5	20 02 88	jsr $8802		jsr	AssembleGroup4
>acc8	28					.byte $28
.acc9					Assemble_sec:
.acc9	20 02 88	jsr $8802		jsr	AssembleGroup4
>accc	38					.byte $38
.accd					Assemble_rti:
.accd	20 02 88	jsr $8802		jsr	AssembleGroup4
>acd0	40					.byte $40
.acd1					Assemble_pha:
.acd1	20 02 88	jsr $8802		jsr	AssembleGroup4
>acd4	48					.byte $48
.acd5					Assemble_cli:
.acd5	20 02 88	jsr $8802		jsr	AssembleGroup4
>acd8	58					.byte $58
.acd9					Assemble_phy:
.acd9	20 02 88	jsr $8802		jsr	AssembleGroup4
>acdc	5a					.byte $5a
.acdd					Assemble_rts:
.acdd	20 02 88	jsr $8802		jsr	AssembleGroup4
>ace0	60					.byte $60
.ace1					Assemble_pla:
.ace1	20 02 88	jsr $8802		jsr	AssembleGroup4
>ace4	68					.byte $68
.ace5					Assemble_sei:
.ace5	20 02 88	jsr $8802		jsr	AssembleGroup4
>ace8	78					.byte $78
.ace9					Assemble_ply:
.ace9	20 02 88	jsr $8802		jsr	AssembleGroup4
>acec	7a					.byte $7a
.aced					Assemble_dey:
.aced	20 02 88	jsr $8802		jsr	AssembleGroup4
>acf0	88					.byte $88
.acf1					Assemble_txa:
.acf1	20 02 88	jsr $8802		jsr	AssembleGroup4
>acf4	8a					.byte $8a
.acf5					Assemble_tya:
.acf5	20 02 88	jsr $8802		jsr	AssembleGroup4
>acf8	98					.byte $98
.acf9					Assemble_txs:
.acf9	20 02 88	jsr $8802		jsr	AssembleGroup4
>acfc	9a					.byte $9a
.acfd					Assemble_tay:
.acfd	20 02 88	jsr $8802		jsr	AssembleGroup4
>ad00	a8					.byte $a8
.ad01					Assemble_tax:
.ad01	20 02 88	jsr $8802		jsr	AssembleGroup4
>ad04	aa					.byte $aa
.ad05					Assemble_clv:
.ad05	20 02 88	jsr $8802		jsr	AssembleGroup4
>ad08	b8					.byte $b8
.ad09					Assemble_tsx:
.ad09	20 02 88	jsr $8802		jsr	AssembleGroup4
>ad0c	ba					.byte $ba
.ad0d					Assemble_iny:
.ad0d	20 02 88	jsr $8802		jsr	AssembleGroup4
>ad10	c8					.byte $c8
.ad11					Assemble_dex:
.ad11	20 02 88	jsr $8802		jsr	AssembleGroup4
>ad14	ca					.byte $ca
.ad15					Assemble_cld:
.ad15	20 02 88	jsr $8802		jsr	AssembleGroup4
>ad18	d8					.byte $d8
.ad19					Assemble_phx:
.ad19	20 02 88	jsr $8802		jsr	AssembleGroup4
>ad1c	da					.byte $da
.ad1d					Assemble_stp:
.ad1d	20 02 88	jsr $8802		jsr	AssembleGroup4
>ad20	db					.byte $db
.ad21					Assemble_inx:
.ad21	20 02 88	jsr $8802		jsr	AssembleGroup4
>ad24	e8					.byte $e8
.ad25					Assemble_nop:
.ad25	20 02 88	jsr $8802		jsr	AssembleGroup4
>ad28	ea					.byte $ea
.ad29					Assemble_sed:
.ad29	20 02 88	jsr $8802		jsr	AssembleGroup4
>ad2c	f8					.byte $f8
.ad2d					Assemble_plx:
.ad2d	20 02 88	jsr $8802		jsr	AssembleGroup4
>ad30	fa					.byte $fa

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/constants.asm

.ad31					DecimalScalarTable:
>ad31	66 66 66 66				.dword $66666666 ; 0.1
>ad35	de					.byte $de
>ad36	1f 85 eb 51				.dword $51eb851f ; 0.01
>ad3a	db					.byte $db
>ad3b	4c 37 89 41				.dword $4189374c ; 0.001
>ad3f	d8					.byte $d8
>ad40	ac 8b db 68				.dword $68db8bac ; 0.0001
>ad44	d4					.byte $d4
>ad45	24 d6 e2 53				.dword $53e2d624 ; 1e-05
>ad49	d1					.byte $d1
>ad4a	83 de 1b 43				.dword $431bde83 ; 1e-06
>ad4e	ce					.byte $ce
>ad4f	6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>ad53	ca					.byte $ca
>ad54	89 3b e6 55				.dword $55e63b89 ; 1e-08
>ad58	c7					.byte $c7
>ad59	a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>ad5d	c4					.byte $c4
>ad5e	67 7f f3 6d				.dword $6df37f67 ; 1e-10
>ad62	c0					.byte $c0
>ad63	86 ff f5 57				.dword $57f5ff86 ; 1e-11
>ad67	bd					.byte $bd

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.asm

.ad68					SyntaxError:
.ad68	a9 02		lda #$02		lda	#2
.ad6a	4c 49 94	jmp $9449		jmp	ErrorHandler
.ad6d					RangeError:
.ad6d	a9 04		lda #$04		lda	#4
.ad6f	4c 49 94	jmp $9449		jmp	ErrorHandler
.ad72					TypeError:
.ad72	a9 05		lda #$05		lda	#5
.ad74	4c 49 94	jmp $9449		jmp	ErrorHandler
.ad77					ArgumentError:
.ad77	a9 07		lda #$07		lda	#7
.ad79	4c 49 94	jmp $9449		jmp	ErrorHandler
.ad7c					NotDoneError:
.ad7c	a9 0c		lda #$0c		lda	#12
.ad7e	4c 49 94	jmp $9449		jmp	ErrorHandler
.ad81					ErrorText:
>ad81	42 72 65 61 6b 00			.text	"Break",0
>ad87	53 79 6e 74 61 78 20 65			.text	"Syntax error",0
>ad8f	72 72 6f 72 00
>ad94	44 69 76 69 73 69 6f 6e			.text	"Division by zero",0
>ad9c	20 62 79 20 7a 65 72 6f 00
>ada5	4f 75 74 20 6f 66 20 52			.text	"Out of Range",0
>adad	61 6e 67 65 00
>adb2	54 79 70 65 20 6d 69 73			.text	"Type mismatch",0
>adba	6d 61 74 63 68 00
>adc0	4f 75 74 20 6f 66 20 6d			.text	"Out of memory",0
>adc8	65 6d 6f 72 79 00
>adce	49 6c 6c 65 67 61 6c 20			.text	"Illegal argument",0
>add6	61 72 67 75 6d 65 6e 74 00
>addf	53 74 6f 70 00				.text	"Stop",0
>ade4	53 74 72 69 6e 67 20 74			.text	"String too long",0
>adec	6f 6f 20 6c 6f 6e 67 00
>adf4	41 73 73 65 72 74 69 6f			.text	"Assertion failed",0
>adfc	6e 20 66 61 69 6c 65 64 00
>ae05	4f 75 74 20 6f 66 20 64			.text	"Out of data",0
>ae0d	61 74 61 00
>ae11	55 6e 69 6d 70 6c 65 6d			.text	"Unimplemented",0
>ae19	65 6e 74 65 64 00
>ae1f	4e 6f 20 73 75 63 68 20			.text	"No such line number",0
>ae27	6c 69 6e 65 20 6e 75 6d 62 65 72 00
>ae33	52 65 74 75 72 6e 20 77			.text	"Return without Gosub",0
>ae3b	69 74 68 6f 75 74 20 47 6f 73 75 62 00
>ae48	55 6e 74 69 6c 20 77 69			.text	"Until without Repeat",0
>ae50	74 68 6f 75 74 20 52 65 70 65 61 74 00
>ae5d	57 65 6e 64 20 77 69 74			.text	"Wend without While",0
>ae65	68 6f 75 74 20 57 68 69 6c 65 00
>ae70	4e 65 78 74 20 77 69 74			.text	"Next without For",0
>ae78	68 6f 75 74 20 46 6f 72 00
>ae81	42 41 53 49 43 20 53 74			.text	"BASIC Stack full",0
>ae89	61 63 6b 20 66 75 6c 6c 00
>ae92	4f 70 65 6e 20 53 74 72			.text	"Open Structure",0
>ae9a	75 63 74 75 72 65 00
>aea1	45 6e 64 50 72 6f 63 20			.text	"EndProc without call",0
>aea9	77 69 74 68 6f 75 74 20 63 61 6c 6c 00
>aeb6	41 72 72 61 79 20 61 6c			.text	"Array already defined",0
>aebe	72 65 61 64 79 20 64 65 66 69 6e 65 64 00
>aecc	41 72 72 61 79 20 73 69			.text	"Array size",0
>aed4	7a 65 00
>aed7	42 61 64 20 61 72 72 61			.text	"Bad array index",0
>aedf	79 20 69 6e 64 65 78 00

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/timestamp.asm

>aee7	42 75 69 6c 74 20 54 75			.text "Built Tuesday 11-Oct-2022. Build 1309."
>aeef	65 73 64 61 79 20 31 31 2d 4f 63 74 2d 32 30 32
>aeff	32 2e 20 42 75 69 6c 64 20 31 33 30 39 2e

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/hardware/junior/extern.asm

.af0d					EXTPrintCharacter:
.af0d	48		pha				pha
.af0e	da		phx				phx
.af0f	5a		phy				phy
.af10	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.af13	7a		ply				ply
.af14	fa		plx				plx
.af15	68		pla				pla
.af16	60		rts				rts
.af17					EXTInputSingleCharacter:
.af17	da		phx				phx
.af18	5a		phy				phy
.af19					_EISCWait:
.af19	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.af1c	c9 00		cmp #$00			cmp 	#0
.af1e	f0 f9		beq $af19			beq 	_EISCWait
.af20	7a		ply				ply
.af21	fa		plx				plx
.af22	60		rts				rts
.af23					EXTInputLine:
.af23	a2 00		ldx #$00			ldx 	#0 							; position in line <- start of line
.af25					_ILLoop:
.af25	da		phx				phx 								; read character in
.af26	20 cf ff	jsr $ffcf			jsr 	$FFCF
.af29	fa		plx				plx
.af2a	c9 08		cmp #$08			cmp 	#8 							; backspace, CBM doesn't need this.
.af2c	f0 12		beq $af40			beq 	_ILBackspace
.af2e	c9 0d		cmp #$0d			cmp 	#13							; exit ?
.af30	f0 15		beq $af47			beq 	_ILExit
.af32	c9 20		cmp #$20			cmp 	#32 						; ignore other control
.af34	90 ef		bcc $af25			bcc 	_ILLoop
.af36	e0 50		cpx #$50			cpx 	#MaxLineSize 				; already full buffer
.af38	f0 eb		beq $af25			beq 	_ILLoop
.af3a	9d a6 05	sta $05a6,x			sta 	lineBuffer,x 				; save it
.af3d	e8		inx				inx
.af3e	80 e5		bra $af25			bra 	_ILLoop
.af40					_ILBackspace:
.af40	e0 00		cpx #$00			cpx 	#0  						; can't backspace, start of line.
.af42	f0 e1		beq $af25			beq 	_ILLoop
.af44	ca		dex				dex 								; back one.
.af45	80 de		bra $af25			bra 	_ILLoop
.af47					_ILExit:
.af47	20 0d af	jsr $af0d			jsr 	EXTPrintCharacter
.af4a	9e a6 05	stz $05a6,x			stz 	lineBuffer,x 				; make ASCIIZ and exit with address in XA
.af4d	60		rts				rts
.af4e					EXTBreakCheck:
.af4e	4c e1 ff	jmp $ffe1			jmp		$FFE1

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/delete.asm

.af51					MemoryDeleteLine:
.af51	20 70 af	jsr $af70			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.af54	b2 30		lda ($30)			lda 	(codePtr) 					; size to delete => y
.af56	a8		tay				tay
.af57					_MDDLLoop:
.af57	b1 30		lda ($30),y			lda 	(codePtr),y 				; copy down
.af59	92 30		sta ($30)			sta 	(codePtr)
.af5b	a5 30		lda $30				lda 	codePtr 					; check done the lot.
.af5d	c5 3a		cmp $3a				cmp 	zTemp2
.af5f	d0 07		bne $af68			bne 	_MDLDLNext
.af61	a5 31		lda $31				lda 	codePtr+1
.af63	c5 3b		cmp $3b				cmp 	zTemp2+1
.af65	d0 01		bne $af68			bne 	_MDLDLNext
.af67					_MDDLExit:
.af67	60		rts				rts
.af68					_MDLDLNext:
.af68	e6 30		inc $30				inc 	codePtr						; next byte
.af6a	d0 eb		bne $af57			bne 	_MDDLLoop
.af6c	e6 31		inc $31				inc 	codePtr+1
.af6e	80 e7		bra $af57			bra 	_MDDLLoop
.af70					IMemoryFindEnd:
.af70	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.af72	85 3a		sta $3a				sta 	0+zTemp2
.af74	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.af76	85 3b		sta $3b				sta 	1+zTemp2
.af78					_MDLFELoop:
.af78	b2 3a		lda ($3a)			lda 	(zTemp2)
.af7a	f0 0b		beq $af87			beq 	_MDLFEExit
.af7c	18		clc				clc
.af7d	65 3a		adc $3a				adc 	zTemp2
.af7f	85 3a		sta $3a				sta 	zTemp2
.af81	90 f5		bcc $af78			bcc 	_MDLFELoop
.af83	e6 3b		inc $3b				inc 	zTemp2+1
.af85	80 f1		bra $af78			bra 	_MDLFELoop
.af87					_MDLFEExit:
.af87	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/insert.asm

.af88					MemoryInsertLine:
.af88	08		php				php
.af89	20 70 af	jsr $af70			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.af8c	a5 3b		lda $3b				lda 	zTemp2+1 					; space ?
.af8e	1a		inc a				inc 	a
.af8f	c9 7f		cmp #$7f			cmp 	#(BasicEnd >> 8)-1
.af91	b0 36		bcs $afc9			bcs 	_MDLIError
.af93	28		plp				plp
.af94	90 08		bcc $af9e			bcc 	_MDLIFound
.af96	a5 3a		lda $3a				lda 	zTemp2 						; if CS on entry append.
.af98	85 30		sta $30				sta 	codePtr
.af9a	a5 3b		lda $3b				lda 	zTemp2+1
.af9c	85 31		sta $31				sta 	codePtr+1
.af9e					_MDLIFound:
.af9e	ad a6 04	lda $04a6			lda 	tokenOffset 				; insert gap in Y, the offset, e.g. length of the new line
.afa1	a8		tay				tay
.afa2					_MDLIInsert:
.afa2	b2 3a		lda ($3a)			lda 	(zTemp2) 					; shift one byte up , at least one covers end case.
.afa4	91 3a		sta ($3a),y			sta 	(zTemp2),y 					; work from top down.
.afa6	a5 30		lda $30				lda 	codePtr 					; done insert point ?
.afa8	c5 3a		cmp $3a				cmp 	zTemp2
.afaa	d0 06		bne $afb2			bne 	_MDLINext
.afac	a5 31		lda $31				lda 	codePtr+1
.afae	c5 3b		cmp $3b				cmp 	zTemp2+1
.afb0	f0 0a		beq $afbc			beq 	_MDLIHaveSpace
.afb2					_MDLINext:
.afb2	a5 3a		lda $3a				lda 	zTemp2 						; if no, keep zTemp2 going backwards
.afb4	d0 02		bne $afb8			bne 	_MDLINoBorrow
.afb6	c6 3b		dec $3b				dec 	zTemp2+1
.afb8					_MDLINoBorrow:
.afb8	c6 3a		dec $3a				dec 	zTemp2
.afba	80 e6		bra $afa2			bra 	_MDLIInsert
.afbc					_MDLIHaveSpace:
.afbc	ac a6 04	ldy $04a6			ldy 	tokenOffset 				; bytes to copy
.afbf	88		dey				dey 								; from offset-1 to 0
.afc0					_MDLICopy:
.afc0	b9 a6 04	lda $04a6,y			lda 	tokenOffset,y
.afc3	91 30		sta ($30),y			sta 	(codePtr),y
.afc5	88		dey				dey
.afc6	10 f8		bpl $afc0			bpl 	_MDLICopy
.afc8	60		rts				rts
.afc9					_MDLIError:
.afc9	a9 06		lda #$06		lda	#6
.afcb	4c 49 94	jmp $9449		jmp	ErrorHandler
.afce					MDLAppendLine:
.afce	86 37		stx $37				stx 	zTemp0+1 					; save new line at zTemp0
.afd0	85 36		sta $36				sta 	zTemp0
.afd2	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.afd4	85 38		sta $38				sta 	0+zTemp1
.afd6	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.afd8	85 39		sta $39				sta 	1+zTemp1
.afda	b2 38		lda ($38)			lda 	(zTemp1)
.afdc	d0 0a		bne $afe8			bne 	_MDLANoInitialise
.afde	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.afe0	8d 5d 06	sta $065d			sta 	0+AppendPointer
.afe3	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.afe5	8d 5e 06	sta $065e			sta 	1+AppendPointer
.afe8					_MDLANoInitialise:
.afe8	18		clc				clc
.afe9	ad 5d 06	lda $065d			lda 	AppendPointer 				; copy append pointer to zTemp1 adding the offset as you go
.afec	85 38		sta $38				sta 	zTemp1
.afee	72 36		adc ($36)			adc 	(zTemp0)
.aff0	8d 5d 06	sta $065d			sta 	AppendPointer
.aff3	ad 5e 06	lda $065e			lda 	AppendPointer+1
.aff6	85 39		sta $39				sta 	zTemp1+1
.aff8	69 00		adc #$00			adc 	#0
.affa	8d 5e 06	sta $065e			sta 	AppendPointer+1
.affd	a0 00		ldy #$00			ldy 	#0
.afff					_MDLACopy:
.afff	b1 36		lda ($36),y			lda 	(zTemp0),y 					; copy new line in
.b001	91 38		sta ($38),y			sta 	(zTemp1),y
.b003	c8		iny				iny
.b004	98		tya				tya
.b005	d2 36		cmp ($36)			cmp 	(zTemp0) 					; done whole line
.b007	d0 f6		bne $afff			bne 	_MDLACopy
.b009	a9 00		lda #$00			lda 	#0 							; end of program.
.b00b	91 38		sta ($38),y			sta 	(zTemp1),y
.b00d	60		rts				rts
.065d					AppendPointer:
>065d							.fill 	2

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/memory.asm

.a03e					MemoryNew:
.a03e	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a040	85 30		sta $30				sta 	codePtr
.a042	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a044	85 31		sta $31				sta 	codePtr+1
.a046	a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.a048	92 30		sta ($30)			sta 	(codePtr)
.a04a	60		rts				rts
.a04b					MemoryInline:
.a04b	98		tya				tya 								; put address into stack,x
.a04c	18		clc				clc
.a04d	65 30		adc $30				adc 	codePtr
.a04f	9d 08 04	sta $0408,x			sta 	NSMantissa0,x
.a052	a5 31		lda $31				lda 	codePtr+1
.a054	69 00		adc #$00			adc 	#0
.a056	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.a059	9e 18 04	stz $0418,x			stz 	NSMantissa2,x
.a05c	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.a05f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./hardware/memory.flat/search.asm

.a060					MemorySearch:
.a060	85 36		sta $36				sta 	zTemp0 						; save line number zTemp0
.a062	86 37		stx $37				stx 	zTemp0+1
.a064	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a066	85 30		sta $30				sta 	codePtr
.a068	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a06a	85 31		sta $31				sta 	codePtr+1
.a06c					_MTAXLoop:
.a06c	b2 30		lda ($30)			lda 	(codePtr)
.a06e	18		clc				clc
.a06f	f0 21		beq $a092			beq 	_MTAXExit 					; reached end, exit with CC.
.a071	a0 01		ldy #$01			ldy 	#1 							; calculate current line# - requested line#
.a073	b1 30		lda ($30),y			lda 	(codePtr),y
.a075	38		sec				sec
.a076	e5 36		sbc $36				sbc 	zTemp0
.a078	85 38		sta $38				sta 	zTemp1 						; save interim to set Z
.a07a	c8		iny				iny 								; do the MSB
.a07b	b1 30		lda ($30),y			lda 	(codePtr),y
.a07d	e5 37		sbc $37				sbc 	zTemp0+1
.a07f	05 38		ora $38				ora 	zTemp1
.a081	f0 0f		beq $a092			beq 	_MTAXExit	 				; found
.a083	b0 0d		bcs $a092			bcs 	_MTAXExit 					; current < required exit
.a085	18		clc				clc
.a086	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.a088	65 30		adc $30				adc 	codePtr
.a08a	85 30		sta $30				sta 	codePtr
.a08c	90 02		bcc $a090			bcc 	_CREExit
.a08e	e6 31		inc $31				inc 	codePtr+1
.a090					_CREExit:
.a090	80 da		bra $a06c			bra 	_MTAXLoop
.a092					_MTAXExit:
.a092	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/bytes.asm

.a093					StackPushByte:
.a093	48		pha				pha 								; save byte
.a094	a5 34		lda $34				lda 	BasicStack
.a096	d0 09		bne $a0a1			bne 	_SPBNoBorrow
.a098	c6 35		dec $35				dec 	BasicStack+1
.a09a	48		pha				pha
.a09b	a5 35		lda $35				lda 	BasicStack+1
.a09d	c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.a09f	90 06		bcc $a0a7			bcc 	_SPBMemory
.a0a1					_SPBNoBorrow:
.a0a1	c6 34		dec $34				dec 	BasicStack
.a0a3	68		pla				pla 								; get back and write
.a0a4	92 34		sta ($34)			sta 	(BasicStack)
.a0a6	60		rts				rts
.a0a7					_SPBMemory:
.a0a7	a9 12		lda #$12		lda	#18
.a0a9	4c 49 94	jmp $9449		jmp	ErrorHandler
.a0ac					StackPopByte:
.a0ac	b2 34		lda ($34)			lda 	(BasicStack)
.a0ae	e6 34		inc $34				inc 	BasicStack
.a0b0	d0 02		bne $a0b4			bne 	_SPBNoCarry
.a0b2	e6 35		inc $35				inc 	BasicStack+1
.a0b4					_SPBNoCarry:
.a0b4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/frames.asm

.a0b5					StackOpen:
.a0b5	48		pha				pha 								; save frame byte
.a0b6	29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.a0b8	0a		asl a				asl 	a 							; claim twice this for storage
.a0b9	49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.a0bb	38		sec				sec 								; so basically subtracting from
.a0bc	65 34		adc $34				adc 	basicStack 	 				; basicStack
.a0be	85 34		sta $34				sta 	basicStack
.a0c0	b0 08		bcs $a0ca			bcs 	_SONoBorrow
.a0c2	c6 35		dec $35				dec 	basicStack+1
.a0c4	a5 35		lda $35				lda 	basicStack+1 				; have we reached stack overflow
.a0c6	c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.a0c8	90 04		bcc $a0ce			bcc 	_SOMemory
.a0ca					_SONoBorrow:
.a0ca	68		pla				pla 								; get marker back and write at TOS
.a0cb	92 34		sta ($34)			sta 	(basicStack)
.a0cd	60		rts				rts
.a0ce					_SOMemory:
.a0ce	a9 12		lda #$12		lda	#18
.a0d0	4c 49 94	jmp $9449		jmp	ErrorHandler
.a0d3					StackClose:
.a0d3	b2 34		lda ($34)			lda 	(basicStack) 				; get TOS marker
.a0d5	29 0f		and #$0f			and 	#$0F 						; bytes to add back
.a0d7	0a		asl a				asl 	a 							; claim twice this.
.a0d8	65 34		adc $34				adc 	basicStack 					; add to the stack pointer.
.a0da	85 34		sta $34				sta 	basicStack
.a0dc	90 02		bcc $a0e0			bcc 	_SCExit
.a0de	e6 35		inc $35				inc 	basicStack+1
.a0e0					_SCExit:
.a0e0	60		rts				rts
.a0e1					StackCheckFrame:
.a0e1	48		pha				pha
.a0e2					_StackRemoveLocals:
.a0e2	b2 34		lda ($34)			lda 	(basicStack) 				; check for local, keep popping them
.a0e4	c9 03		cmp #$03			cmp 	#STK_LOCALS+1
.a0e6	b0 05		bcs $a0ed			bcs 	_SCNoLocal
.a0e8	20 29 a7	jsr $a729			jsr 	LocalPopValue
.a0eb	80 f5		bra $a0e2			bra 	_StackRemoveLocals
.a0ed					_SCNoLocal:
.a0ed	68		pla				pla
.a0ee	52 34		eor ($34)			eor 	(basicStack) 				; xor with toS marker
.a0f0	29 f0		and #$f0			and 	#$F0 						; check type bits
.a0f2	d0 01		bne $a0f5			bne 	_SCFError 					; different, we have structures mixed up
.a0f4	60		rts				rts
.a0f5					_SCFError:
.a0f5	8a		txa				txa 								; report error X
.a0f6	4c 49 94	jmp $9449			jmp 	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/location.asm

.a0f9					STKSaveCodePosition:
.a0f9	5a		phy				phy
.a0fa	98		tya				tya 								; save Y
.a0fb	a0 05		ldy #$05			ldy 	#5
.a0fd	91 34		sta ($34),y			sta 	(basicStack),y
.a0ff	88		dey				dey 								; save Code Pointer
.a100					_STKSaveLoop:
.a100	b9 2f 00	lda $002f,y			lda 	safePtr-1,y 				; allows us to access the pointer w/out issues.
.a103	91 34		sta ($34),y			sta 	(basicStack),y
.a105	88		dey				dey
.a106	d0 f8		bne $a100			bne 	_STKSaveLoop
.a108	7a		ply				ply
.a109	60		rts				rts
.a10a					STKLoadCodePosition:
.a10a	a0 01		ldy #$01			ldy 	#1 							; load code pointer back
.a10c					_STKLoadLoop:
.a10c	b1 34		lda ($34),y			lda 	(basicStack),y
.a10e	99 2f 00	sta $002f,y			sta 	safePtr-1,y
.a111	c8		iny				iny
.a112	c0 05		cpy #$05			cpy 	#5
.a114	d0 f6		bne $a10c			bne 	_STKLoadLoop
.a116	b1 34		lda ($34),y			lda 	(basicStack),y 				; get Y offset
.a118	a8		tay				tay
.a119	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/setup.asm

.a11a					StackReset:
.a11a	a9 ff		lda #$ff			lda 	#((BasicStackBase+BasicStackSize-1) & $FF)
.a11c	85 34		sta $34				sta 	0+basicStack
.a11e	a9 0f		lda #$0f			lda 	#((BasicStackBase+BasicStackSize-1) >> 8)
.a120	85 35		sta $35				sta 	1+basicStack
.a122	a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.a124	92 34		sta ($34)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.a126	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/concrete.asm

.b00e					StringConcrete:
.b00e	5a		phy				phy 								; save position on stack
.b00f	20 10 9d	jsr $9d10			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.b012	bd 08 04	lda $0408,x			lda 	NSMantissa0,x 				; copy target string to zTemp1
.b015	85 38		sta $38				sta 	zTemp1
.b017	bd 10 04	lda $0410,x			lda 	NSMantissa1,x
.b01a	85 39		sta $39				sta 	zTemp1+1
.b01c	a0 ff		ldy #$ff			ldy 	#$FF	 					; calculate string length
.b01e					_SALength:
.b01e	c8		iny				iny
.b01f	b1 38		lda ($38),y			lda 	(zTemp1),y
.b021	d0 fb		bne $b01e			bne 	_SALength
.b023	c0 fd		cpy #$fd			cpy 	#253 						; string too long
.b025	b0 3f		bcs $b066			bcs 	_SALengthError
.b027	98		tya				tya 				 				; length of the new string
.b028	18		clc				clc
.b029	69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.b02b	90 02		bcc $b02f			bcc 	_SAHaveLength
.b02d	a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.b02f					_SAHaveLength:
.b02f	48		pha				pha 								; save length.
.b030	38		sec				sec
.b031	49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.b033	6d 8e 04	adc $048e			adc 	StringMemory
.b036	8d 8e 04	sta $048e			sta 	StringMemory
.b039	85 3a		sta $3a				sta 	zTemp2 						; update storage address
.b03b	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; update mantissa address
.b03e	a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.b040	6d 8f 04	adc $048f			adc 	StringMemory+1
.b043	8d 8f 04	sta $048f			sta 	StringMemory+1
.b046	85 3b		sta $3b				sta 	zTemp2+1
.b048	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.b04b	68		pla				pla 								; save length-3 (chars allowed) in first byte
.b04c	38		sec				sec
.b04d	e9 03		sbc #$03			sbc 	#3
.b04f	92 3a		sta ($3a)			sta 	(zTemp2)
.b051	a9 00		lda #$00			lda 	#0 							; clear the status byte.
.b053	a0 01		ldy #$01			ldy 	#1
.b055	91 3a		sta ($3a),y			sta 	(zTemp2),y
.b057					_SACopyNewString:
.b057	a0 00		ldy #$00			ldy 	#0
.b059					_SACopyNSLoop:
.b059	b1 38		lda ($38),y			lda 	(zTemp1),y 					; get character
.b05b	c8		iny				iny 								; write two on in string storage
.b05c	c8		iny				iny
.b05d	91 3a		sta ($3a),y			sta 	(zTemp2),y
.b05f	88		dey				dey 								; this makes it one one.
.b060	c9 00		cmp #$00			cmp 	#0 							; until EOS copied
.b062	d0 f5		bne $b059			bne 	_SACopyNSLoop
.b064	7a		ply				ply
.b065	60		rts				rts
.b066					_SALengthError:
.b066	a9 09		lda #$09		lda	#9
.b068	4c 49 94	jmp $9449		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/stringalloc.asm

.b06b					StringSystemInitialise:
.b06b	a9 ff		lda #$ff			lda 	#((EndVariableSpace-1) & $FF)
.b06d	8d 8e 04	sta $048e			sta 	0+StringMemory
.b070	a9 1f		lda #$1f			lda 	#((EndVariableSpace-1) >> 8)
.b072	8d 8f 04	sta $048f			sta 	1+StringMemory
.b075	9c ff 1f	stz $1fff			stz 	EndVariableSpace-1 			; put a zero at the end, so know end of string memory.
.b078	60		rts				rts
.b079					StringSpaceInitialise:
.b079	20 10 9d	jsr $9d10			jsr 	CheckIdentifierStringSpace 	; check memory allocation.
.b07c	a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.b07e	8d 90 04	sta $0490			sta 	StringInitialised
.b081	ad 8e 04	lda $048e			lda 	StringMemory 				; allocate 256 bytes for one concreted string
.b084	8d 91 04	sta $0491			sta 	StringTempPointer
.b087	ad 8f 04	lda $048f			lda 	StringMemory+1
.b08a	3a		dec a				dec 	a
.b08b	8d 92 04	sta $0492			sta 	StringTempPointer+1
.b08e	60		rts				rts
.b08f					StringTempAllocate:
.b08f	c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.b091	b0 35		bcs $b0c8			bcs 	_STALength
.b093	2c 90 04	bit $0490			bit 	StringInitialised 			; already initialised
.b096	30 05		bmi $b09d			bmi 	_STAAllocate
.b098	48		pha				pha 								; save value to subtract.
.b099	20 79 b0	jsr $b079			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.b09c	68		pla				pla 								; restore it
.b09d					_STAAllocate:
.b09d	49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.b09f	18		clc				clc  								; deliberate allows one more
.b0a0	6d 91 04	adc $0491			adc 	StringTempPointer 			; subtract from temp pointer
.b0a3	8d 91 04	sta $0491			sta 	StringTempPointer
.b0a6	9d 08 04	sta $0408,x			sta 	NSMantissa0,x 				; address in mantissa
.b0a9	85 3c		sta $3c				sta 	zsTemp 						; and zsTemp
.b0ab	ad 92 04	lda $0492			lda 	StringTempPointer+1
.b0ae	69 ff		adc #$ff			adc 	#$FF
.b0b0	8d 92 04	sta $0492			sta 	StringTempPointer+1
.b0b3	85 3d		sta $3d				sta 	zsTemp+1
.b0b5	9d 10 04	sta $0410,x			sta 	NSMantissa1,x
.b0b8	9e 18 04	stz $0418,x			stz 	NSMantissa2,x 				; set the typing data
.b0bb	9e 20 04	stz $0420,x			stz 	NSMantissa3,x
.b0be	a9 10		lda #$10			lda 	#NSTString
.b0c0	9d 00 04	sta $0400,x			sta 	NSStatus,x
.b0c3	a9 00		lda #$00			lda 	#0 							; clear the target string
.b0c5	92 3c		sta ($3c)			sta 	(zsTemp)
.b0c7	60		rts				rts
.b0c8					_STALength:
.b0c8	a9 09		lda #$09		lda	#9
.b0ca	4c 49 94	jmp $9449		jmp	ErrorHandler
.b0cd					StringTempWrite:
.b0cd	48		pha				pha
.b0ce	92 3c		sta ($3c)			sta 	(zsTemp)
.b0d0	e6 3c		inc $3c				inc 	zsTemp
.b0d2	d0 02		bne $b0d6			bne 	_STWNoCarry
.b0d4	e6 3d		inc $3d				inc 	zsTemp+1
.b0d6					_STWNoCarry:
.b0d6	a9 00		lda #$00			lda 	#0
.b0d8	92 3c		sta ($3c)			sta 	(zsTemp)
.b0da	68		pla				pla
.b0db	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/backload.asm

.a127					BackloadProgram:
.a127	a2 ff		ldx #$ff			ldx 	#$FF
.a129	20 51 a1	jsr $a151			jsr 	BLReadByte
.a12c	30 1f		bmi $a14d			bmi 	_BPExit
.a12e					_BPCopy:
.a12e	e8		inx				inx  								; copy byte in
.a12f	9d a6 05	sta $05a6,x			sta 	lineBuffer,x
.a132	9e a7 05	stz $05a7,x			stz 	lineBuffer+1,x
.a135	20 51 a1	jsr $a151			jsr 	BLReadByte 					; read next byte
.a138	30 0a		bmi $a144			bmi 	_BPEndLine 					; -ve = EOL
.a13a	c9 09		cmp #$09			cmp 	#9 							; handle TAB
.a13c	d0 02		bne $a140			bne 	_BPNotTab
.a13e	a9 20		lda #$20			lda 	#' '
.a140					_BPNotTab:
.a140	c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.a142	b0 ea		bcs $a12e			bcs 	_BPCopy
.a144					_BPEndLine:
.a144	20 7a a4	jsr $a47a			jsr 	TokeniseLine 				; tokenise the line.
.a147	38		sec				sec 								; append not insert
.a148	20 88 af	jsr $af88			jsr 	MemoryInsertLine 			; append to current program
.a14b	80 da		bra $a127			bra 	BackloadProgram
.a14d					_BPExit:
.a14d	20 7a 8a	jsr $8a7a			jsr 	ClearCommand 				; clear variables etc.
.a150	60		rts				rts
.a151					BLReadByte:
.a151					_BLLoad:
.a151	ad 00 30	lda $3000			lda 	$3000 						; hardcoded in the makefile.
.a154	ee 52 a1	inc $a152			inc 	_BLLoad+1
.a157	d0 03		bne $a15c			bne 	_BLNoCarry
.a159	ee 53 a1	inc $a153			inc 	_BLLoad+2
.a15c					_BLNoCarry:
.a15c	c9 00		cmp #$00			cmp 	#0
.a15e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/searchtokens.asm

.a15f					TokeniseSearchTable:
.a15f	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token.
.a161	85 36		sta $36				sta 	zTemp0
.a163	a0 00		ldy #$00			ldy 	#0
.a165	a9 80		lda #$80			lda 	#$80 						; token #
.a167	85 38		sta $38				sta 	zTemp1
.a169					_TSTLoop:
.a169	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.a16b	30 49		bmi $a1b6			bmi 	_TSTFail 					; -ve = end of table
.a16d	f0 2e		beq $a19d			beq 	_TSTNext 					; zero, check next it's a dummy
.a16f	c8		iny				iny 								; get the hash
.a170	b1 36		lda ($36),y			lda 	(zTemp0),y
.a172	88		dey				dey
.a173	cd 83 04	cmp $0483			cmp 	identHash 					; check they match, if not go to next
.a176	d0 25		bne $a19d			bne 	_TSTNext
.a178	ad 82 04	lda $0482			lda 	identTypeEnd 				; length of identifier
.a17b	38		sec				sec
.a17c	ed 80 04	sbc $0480			sbc 	identStart
.a17f	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; no match, then return.
.a181	d0 1a		bne $a19d			bne 	_TSTNext
.a183	5a		phy				phy 								; save Y , we might fail
.a184	c8		iny				iny 								; point to text
.a185	c8		iny				iny
.a186	ae 80 04	ldx $0480			ldx 	identStart 					; offset in line buffer in X
.a189					_TSTCompareName:
.a189	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; compare text.
.a18c	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.a18e	d0 0c		bne $a19c			bne 	_TSTNextPullY 				; fail, pullY and do next
.a190	e8		inx				inx
.a191	c8		iny				iny
.a192	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; complete match.
.a195	d0 f2		bne $a189			bne 	_TSTCompareName
.a197	7a		ply				ply 								; throw Y
.a198	a5 38		lda $38				lda 	zTemp1 						; get token #
.a19a	38		sec				sec 								; return with CS = passed.
.a19b	60		rts				rts
.a19c					_TSTNextPullY:
.a19c	7a		ply				ply 								; restore current, fall through.
.a19d					_TSTNext:
.a19d	e6 38		inc $38				inc 	zTemp1 						; token counter
.a19f	98		tya				tya
.a1a0	18		clc				clc
.a1a1	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.a1a3	1a		inc a				inc 	a 							; +1
.a1a4	1a		inc a				inc 	a 							; +2
.a1a5	a8		tay				tay
.a1a6	10 c1		bpl $a169			bpl 	_TSTLoop 					; if Y < $80 loop back
.a1a8	98		tya				tya 								; add Y to zTemp0 and reset Y
.a1a9	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.a1ab	18		clc				clc  								; but have tables > 255 bytes
.a1ac	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.a1ae	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.a1b0	90 b7		bcc $a169			bcc 	_TSTLoop
.a1b2	e6 37		inc $37				inc 	zTemp0+1
.a1b4	80 b3		bra $a169			bra 	_TSTLoop
.a1b6					_TSTFail:
.a1b6	18		clc				clc
.a1b7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/tokenise.asm


;******  Processing file: ./common/tokeniser/../generated/kwdtext.dat

.a1b8					KeywordSet0:
>a1b8	00 65					.text	0,$65,""               ; $80 !0:EOF
>a1ba	00 58					.text	0,$58,""               ; $81 !1:SH1
>a1bc	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>a1be	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $83 ABS(
>a1c4	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $84 ALLOC(
>a1cc	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $85 ASC(
>a1d2	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $86 CHR$(
>a1d9	05 6b 46 41 4c 53 45			.text	5,$6b,"FALSE"          ; $87 FALSE
>a1e0	05 44 46 52 41 43 28			.text	5,$44,"FRAC("          ; $88 FRAC(
>a1e7	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $89 INT(
>a1ed	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $8a ISVAL(
>a1f5	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $8b LEFT$(
>a1fd	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $8c LEN(
>a203	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $8d MID$(
>a20a	04 19 4e 4f 54 28			.text	4,$19,"NOT("           ; $8e NOT(
>a210	07 e9 52 41 4e 44 4f 4d			.text	7,$e9,"RANDOM("        ; $8f RANDOM(
>a218	28
>a219	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $90 RIGHT$(
>a221	28
>a222	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $91 RND(
>a228	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $92 SGN(
>a22e	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $93 SPC(
>a234	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $94 STR$(
>a23b	04 40 54 52 55 45			.text	4,$40,"TRUE"           ; $95 TRUE
>a241	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $96 VAL(
>a247	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $97 FOR
>a24c	02 8f 49 46				.text	2,$8f,"IF"             ; $98 IF
>a250	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $99 PROC
>a256	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $9a REPEAT
>a25e	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $9b WHILE
>a265	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $9c ENDIF
>a26c	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $9d ENDPROC
>a274	43
>a275	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $9e NEXT
>a27b	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $9f THEN
>a281	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $a0 UNTIL
>a288	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $a1 WEND
>a28e	04 1c 43 41 4c 4c			.text	4,$1c,"CALL"           ; $a2 CALL
>a294	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $a3 CLS
>a299	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $a4 DATA
>a29f	03 da 44 49 4d				.text	3,$da,"DIM"            ; $a5 DIM
>a2a4	06 db 44 4f 57 4e 54 4f			.text	6,$db,"DOWNTO"         ; $a6 DOWNTO
>a2ac	04 29 45 4c 53 45			.text	4,$29,"ELSE"           ; $a7 ELSE
>a2b2	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $a8 GOSUB
>a2b9	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $a9 GOTO
>a2bf	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $aa LET
>a2c4	05 6b 4c 4f 43 41 4c			.text	5,$6b,"LOCAL"          ; $ab LOCAL
>a2cb	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $ac PRINT
>a2d2	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $ad READ
>a2d8	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $ae REM
>a2dd	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $af RETURN
>a2e5	02 a3 54 4f				.text	2,$a3,"TO"             ; $b0 TO
>a2e9	ff					.text	$FF
.a2ea					KeywordSet1:
>a2ea	00 65					.text	0,$65,""               ; $80 !0:EOF
>a2ec	00 58					.text	0,$58,""               ; $81 !1:SH1
>a2ee	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>a2f0	08 4c 41 53 53 45 4d 42			.text	8,$4c,"ASSEMBLE"       ; $83 ASSEMBLE
>a2f8	4c 45
>a2fa	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $84 ASSERT
>a302	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $85 CLEAR
>a309	03 d7 45 4e 44				.text	3,$d7,"END"            ; $86 END
>a30e	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $87 LIST
>a314	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $88 NEW
>a319	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $89 RESTORE
>a321	45
>a322	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $8a RUN
>a327	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $8b STOP
>a32d	ff					.text	$FF
.a32e					KeywordSet2:
>a32e	00 65					.text	0,$65,""               ; $80 !0:EOF
>a330	00 58					.text	0,$58,""               ; $81 !1:SH1
>a332	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>a334	03 c8 41 44 43				.text	3,$c8,"ADC"            ; $83 ADC
>a339	03 d3 41 4e 44				.text	3,$d3,"AND"            ; $84 AND
>a33e	03 e0 41 53 4c				.text	3,$e0,"ASL"            ; $85 ASL
>a343	03 c8 42 43 43				.text	3,$c8,"BCC"            ; $86 BCC
>a348	03 d8 42 43 53				.text	3,$d8,"BCS"            ; $87 BCS
>a34d	03 d8 42 45 51				.text	3,$d8,"BEQ"            ; $88 BEQ
>a352	03 df 42 49 54				.text	3,$df,"BIT"            ; $89 BIT
>a357	03 d8 42 4d 49				.text	3,$d8,"BMI"            ; $8a BMI
>a35c	03 d5 42 4e 45				.text	3,$d5,"BNE"            ; $8b BNE
>a361	03 de 42 50 4c				.text	3,$de,"BPL"            ; $8c BPL
>a366	03 d5 42 52 41				.text	3,$d5,"BRA"            ; $8d BRA
>a36b	03 df 42 52 4b				.text	3,$df,"BRK"            ; $8e BRK
>a370	03 db 42 56 43				.text	3,$db,"BVC"            ; $8f BVC
>a375	03 eb 42 56 53				.text	3,$eb,"BVS"            ; $90 BVS
>a37a	03 d2 43 4c 43				.text	3,$d2,"CLC"            ; $91 CLC
>a37f	03 d3 43 4c 44				.text	3,$d3,"CLD"            ; $92 CLD
>a384	03 d8 43 4c 49				.text	3,$d8,"CLI"            ; $93 CLI
>a389	03 e5 43 4c 56				.text	3,$e5,"CLV"            ; $94 CLV
>a38e	03 e0 43 4d 50				.text	3,$e0,"CMP"            ; $95 CMP
>a393	03 eb 43 50 58				.text	3,$eb,"CPX"            ; $96 CPX
>a398	03 ec 43 50 59				.text	3,$ec,"CPY"            ; $97 CPY
>a39d	03 cc 44 45 43				.text	3,$cc,"DEC"            ; $98 DEC
>a3a2	03 e1 44 45 58				.text	3,$e1,"DEX"            ; $99 DEX
>a3a7	03 e2 44 45 59				.text	3,$e2,"DEY"            ; $9a DEY
>a3ac	03 e6 45 4f 52				.text	3,$e6,"EOR"            ; $9b EOR
>a3b1	03 da 49 4e 43				.text	3,$da,"INC"            ; $9c INC
>a3b6	03 ef 49 4e 58				.text	3,$ef,"INX"            ; $9d INX
>a3bb	03 f0 49 4e 59				.text	3,$f0,"INY"            ; $9e INY
>a3c0	03 e7 4a 4d 50				.text	3,$e7,"JMP"            ; $9f JMP
>a3c5	03 ef 4a 53 52				.text	3,$ef,"JSR"            ; $a0 JSR
>a3ca	03 d1 4c 44 41				.text	3,$d1,"LDA"            ; $a1 LDA
>a3cf	03 e8 4c 44 58				.text	3,$e8,"LDX"            ; $a2 LDX
>a3d4	03 e9 4c 44 59				.text	3,$e9,"LDY"            ; $a3 LDY
>a3d9	03 f1 4c 53 52				.text	3,$f1,"LSR"            ; $a4 LSR
>a3de	03 ed 4e 4f 50				.text	3,$ed,"NOP"            ; $a5 NOP
>a3e3	03 e2 4f 52 41				.text	3,$e2,"ORA"            ; $a6 ORA
>a3e8	03 d9 50 48 41				.text	3,$d9,"PHA"            ; $a7 PHA
>a3ed	03 e8 50 48 50				.text	3,$e8,"PHP"            ; $a8 PHP
>a3f2	03 f0 50 48 58				.text	3,$f0,"PHX"            ; $a9 PHX
>a3f7	03 f1 50 48 59				.text	3,$f1,"PHY"            ; $aa PHY
>a3fc	03 dd 50 4c 41				.text	3,$dd,"PLA"            ; $ab PLA
>a401	03 ec 50 4c 50				.text	3,$ec,"PLP"            ; $ac PLP
>a406	03 f4 50 4c 58				.text	3,$f4,"PLX"            ; $ad PLX
>a40b	03 f5 50 4c 59				.text	3,$f5,"PLY"            ; $ae PLY
>a410	03 ed 52 4f 4c				.text	3,$ed,"ROL"            ; $af ROL
>a415	03 f3 52 4f 52				.text	3,$f3,"ROR"            ; $b0 ROR
>a41a	03 ef 52 54 49				.text	3,$ef,"RTI"            ; $b1 RTI
>a41f	03 f9 52 54 53				.text	3,$f9,"RTS"            ; $b2 RTS
>a424	03 d8 53 42 43				.text	3,$d8,"SBC"            ; $b3 SBC
>a429	03 db 53 45 43				.text	3,$db,"SEC"            ; $b4 SEC
>a42e	03 dc 53 45 44				.text	3,$dc,"SED"            ; $b5 SED
>a433	03 e1 53 45 49				.text	3,$e1,"SEI"            ; $b6 SEI
>a438	03 e8 53 54 41				.text	3,$e8,"STA"            ; $b7 STA
>a43d	03 f7 53 54 50				.text	3,$f7,"STP"            ; $b8 STP
>a442	03 ff 53 54 58				.text	3,$ff,"STX"            ; $b9 STX
>a447	03 00 53 54 59				.text	3,$00,"STY"            ; $ba STY
>a44c	03 01 53 54 5a				.text	3,$01,"STZ"            ; $bb STZ
>a451	03 ed 54 41 58				.text	3,$ed,"TAX"            ; $bc TAX
>a456	03 ee 54 41 59				.text	3,$ee,"TAY"            ; $bd TAY
>a45b	03 e8 54 52 42				.text	3,$e8,"TRB"            ; $be TRB
>a460	03 e9 54 53 42				.text	3,$e9,"TSB"            ; $bf TSB
>a465	03 ff 54 53 58				.text	3,$ff,"TSX"            ; $c0 TSX
>a46a	03 ed 54 58 41				.text	3,$ed,"TXA"            ; $c1 TXA
>a46f	03 ff 54 58 53				.text	3,$ff,"TXS"            ; $c2 TXS
>a474	03 ee 54 59 41				.text	3,$ee,"TYA"            ; $c3 TYA
>a479	ff					.text	$FF

;******  Return to file: ./common/tokeniser/tokenise.asm

.a47a					TokeniseLine:
.a47a	20 02 a6	jsr $a602			jsr 	FixLineBufferCase 			; fix line case
.a47d	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.a47f	8d a6 04	sta $04a6			sta 	tokenOffset
.a482	9c a7 04	stz $04a7			stz 	tokenLineNumber
.a485	9c a8 04	stz $04a8			stz 	tokenLineNumber+1
.a488	a2 ff		ldx #$ff			ldx 	#$FF
.a48a					_TKFindFirst:
.a48a	e8		inx				inx
.a48b	bd a6 05	lda $05a6,x			lda 	lineBuffer,x
.a48e	f0 79		beq $a509			beq 	_TKExit
.a490	c9 20		cmp #$20			cmp 	#' '
.a492	90 f6		bcc $a48a			bcc 	_TKFindFirst
.a494	c9 30		cmp #$30			cmp 	#'0'
.a496	90 07		bcc $a49f			bcc 	_TKNoLineNumber
.a498	c9 3a		cmp #$3a			cmp 	#'9'+1
.a49a	b0 03		bcs $a49f			bcs 	_TKNoLineNumber
.a49c	20 2c a6	jsr $a62c			jsr 	TokeniseExtractLineNumber
.a49f					_TKNoLineNumber:
.a49f					_TKTokeniseLoop:
.a49f	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.a4a2	f0 65		beq $a509			beq 	_TKExit
.a4a4	e8		inx				inx
.a4a5	c9 20		cmp #$20			cmp 	#' '
.a4a7	f0 f6		beq $a49f			beq 	_TKTokeniseLoop 			; keep looping if space found.
.a4a9	ca		dex				dex 								; undo last get, A contains character, X is position.
.a4aa	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.a4ac	f0 61		beq $a50f			beq 	_TKTokeniseIdentifier
.a4ae	c9 41		cmp #$41			cmp 	#'A'
.a4b0	90 04		bcc $a4b6			bcc 	_TKTokenisePunctuation
.a4b2	c9 5b		cmp #$5b			cmp 	#'Z'+1
.a4b4	90 59		bcc $a50f			bcc 	_TKTokeniseIdentifier
.a4b6					_TKTokenisePunctuation:
.a4b6	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.a4b8	f0 27		beq $a4e1			beq 	_TKString
.a4ba	c9 24		cmp #$24			cmp 	#'$'						; hexadecimal constant (# only appears at end of identifiers)
.a4bc	f0 28		beq $a4e6			beq 	_TKHexConstant
.a4be	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers.
.a4c0	f0 29		beq $a4eb			beq 	_TKCheckDouble
.a4c2	c9 3e		cmp #$3e			cmp 	#'>'
.a4c4	f0 25		beq $a4eb			beq 	_TKCheckDouble
.a4c6					_TKStandardPunctuation:
.a4c6	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; get it back.
.a4c9	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.a4cb	90 0e		bcc $a4db			bcc 	_TKNoShift
.a4cd	48		pha				pha 								; save
.a4ce	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.a4d0	85 36		sta $36				sta 	zTemp0
.a4d2	68		pla				pla
.a4d3	29 20		and #$20			and 	#32 						; bit 5
.a4d5	4a		lsr a				lsr 	a 							; shift into bit 3
.a4d6	4a		lsr a				lsr 	a
.a4d7	05 36		ora $36				ora 	zTemp0
.a4d9	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.a4db					_TKNoShift:
.a4db	20 71 a6	jsr $a671			jsr 	TokeniseWriteByte 			; write the punctuation character
.a4de	e8		inx				inx 								; consume the character
.a4df	80 be		bra $a49f			bra 	_TKTokeniseLoop 			; and loop round again.
.a4e1					_TKString:
.a4e1	20 91 a5	jsr $a591			jsr 	TokeniseString
.a4e4	80 b9		bra $a49f			bra 	_TKTokeniseLoop
.a4e6					_TKHexConstant:
.a4e6	20 cc a5	jsr $a5cc			jsr 	TokeniseHexConstant
.a4e9	80 b4		bra $a49f			bra 	_TKTokeniseLoop
.a4eb					_TKCheckDouble:
.a4eb	bd a7 05	lda $05a7,x			lda 	lineBuffer+1,x 				; get next character
.a4ee	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.a4f0	90 d4		bcc $a4c6			bcc 	_TKStandardPunctuation
.a4f2	c9 3f		cmp #$3f			cmp 	#'>'+1
.a4f4	b0 d0		bcs $a4c6			bcs 	_TKStandardPunctuation
.a4f6	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.a4f9	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.a4fb	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.a4fc	7d a7 05	adc $05a7,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.a4ff	38		sec				sec
.a500	e9 3c		sbc #$3c			sbc 	#'<'
.a502	20 71 a6	jsr $a671			jsr 	TokeniseWriteByte 			; this is in the range 0-7
.a505	e8		inx				inx 								; consume both
.a506	e8		inx				inx
.a507	80 96		bra $a49f			bra 	_TKTokeniseLoop
.a509	a9 80		lda #$80	_TKExit:lda 	#KWC_EOL 					; write end of line byte
.a50b	20 71 a6	jsr $a671			jsr 	TokeniseWriteByte
.a50e	60		rts				rts
.a50f					_TKTokeniseIdentifier:
.a50f	8e 80 04	stx $0480			stx 	identStart 					; save start
.a512	9c 84 04	stz $0484			stz 	identTypeByte 				; zero the type byte
.a515					_TKCheckLoop:
.a515	e8		inx				inx 								; look at next, we know first is identifier.
.a516	bd a6 05	lda $05a6,x			lda  	lineBuffer,x
.a519	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.a51b	f0 f8		beq $a515			beq 	_TKCheckLoop
.a51d	c9 30		cmp #$30			cmp	 	#"0"
.a51f	90 0c		bcc $a52d			bcc 	_TKEndIdentifier
.a521	c9 3a		cmp #$3a			cmp 	#"9"+1
.a523	90 f0		bcc $a515			bcc 	_TKCheckLoop
.a525	c9 41		cmp #$41			cmp	 	#"A"
.a527	90 04		bcc $a52d			bcc 	_TKEndIdentifier
.a529	c9 5b		cmp #$5b			cmp 	#"Z"+1
.a52b	90 e8		bcc $a515			bcc 	_TKCheckLoop
.a52d					_TKEndIdentifier:
.a52d	8e 81 04	stx $0481			stx 	identTypeStart 				; save start of type text (if any !)
.a530	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.a532	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.a534	f0 06		beq $a53c			beq 	_TKHasTypeCharacter
.a536	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.a538	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.a53a	d0 07		bne $a543			bne 	_TKNoTypeCharacter
.a53c					_TKHasTypeCharacter:
.a53c	8c 84 04	sty $0484			sty 	identTypeByte 				; has # or $, save the type
.a53f	e8		inx				inx 								; read next
.a540	bd a6 05	lda $05a6,x			lda 	lineBuffer,x
.a543					_TKNoTypeCharacter:
.a543	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.a545	d0 09		bne $a550			bne 	_TKNoArray
.a547	e8		inx				inx 								; skip the (
.a548	ad 84 04	lda $0484			lda 	identTypeByte 				; set bit 2 (e.g. array)
.a54b	09 04		ora #$04			ora 	#$04
.a54d	8d 84 04	sta $0484			sta 	identTypeByte
.a550					_TKNoArray:
.a550	8e 82 04	stx $0482			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.a553	20 ed a5	jsr $a5ed			jsr 	TokeniseCalculateHash 		; calculate the has for those tokens
.a556	a0 a1		ldy #$a1			ldy 	#(KeywordSet0) >> 8
.a558	a9 b8		lda #$b8			lda 	#(KeywordSet0) & $FF
.a55a	20 5f a1	jsr $a15f			jsr 	TokeniseSearchTable
.a55d	a2 00		ldx #$00			ldx 	#0
.a55f	b0 1f		bcs $a580			bcs 	_TKFoundToken
.a561	a0 a2		ldy #$a2			ldy 	#(KeywordSet1) >> 8
.a563	a9 ea		lda #$ea			lda 	#(KeywordSet1) & $FF
.a565	20 5f a1	jsr $a15f			jsr 	TokeniseSearchTable
.a568	a2 81		ldx #$81			ldx 	#$81
.a56a	b0 14		bcs $a580			bcs 	_TKFoundToken
.a56c	a0 a3		ldy #$a3			ldy 	#(KeywordSet2) >> 8
.a56e	a9 2e		lda #$2e			lda 	#(KeywordSet2) & $FF
.a570	20 5f a1	jsr $a15f			jsr 	TokeniseSearchTable
.a573	a2 82		ldx #$82			ldx 	#$82
.a575	b0 09		bcs $a580			bcs 	_TKFoundToken
.a577	20 7d a6	jsr $a67d			jsr 	CheckCreateVariableRecord 	; failed all, it's a variable, create record if does not exist.
.a57a	ae 82 04	ldx $0482			ldx 	identTypeEnd 				; X points to following byte
.a57d	4c 9f a4	jmp $a49f			jmp 	_TKTokeniseLoop 			; and go round again.
.a580					_TKFoundToken:
.a580	48		pha				pha 								; save token
.a581	8a		txa				txa 								; shift in X, is there one ?
.a582	f0 03		beq $a587			beq 	_TKNoTShift
.a584	20 71 a6	jsr $a671			jsr 	TokeniseWriteByte 			; if so, write it out
.a587					_TKNoTShift:
.a587	68		pla				pla 								; restore and write token
.a588	20 71 a6	jsr $a671			jsr 	TokeniseWriteByte
.a58b	ae 82 04	ldx $0482			ldx 	identTypeEnd 				; X points to following byte
.a58e	4c 9f a4	jmp $a49f			jmp 	_TKTokeniseLoop 			; and go round again.
.a591					TokeniseString:
.a591	a9 ff		lda #$ff			lda 	#KWC_STRING 				; string token.
.a593	20 71 a6	jsr $a671			jsr 	TokeniseWriteByte
.a596	e8		inx				inx									; start of quoted string.
.a597	da		phx				phx 								; push start of string on top
.a598	ca		dex				dex
.a599					_TSFindEnd:
.a599	e8		inx				inx
.a59a	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; next character
.a59d	f0 04		beq $a5a3			beq 	_TSEndOfString
.a59f	c9 22		cmp #$22			cmp 	#'"'
.a5a1	d0 f6		bne $a599			bne 	_TSFindEnd
.a5a3					_TSEndOfString:
.a5a3	7a		ply				ply  								; so now Y is first character, X is character after end.
.a5a4	48		pha				pha 								; save terminating character
.a5a5	20 ad a5	jsr $a5ad			jsr 	TOWriteBlockXY 				; write X to Y as a data block
.a5a8	68		pla				pla 								; terminating character
.a5a9	f0 01		beq $a5ac			beq 	_TSNotQuote					; if it wasn't EOS skip it
.a5ab	e8		inx				inx
.a5ac					_TSNotQuote:
.a5ac	60		rts				rts
.a5ad					TOWriteBlockXY:
.a5ad	86 36		stx $36				stx 	zTemp0 						; write end character
.a5af	98		tya				tya
.a5b0	49 ff		eor #$ff			eor 	#$FF
.a5b2	38		sec				sec
.a5b3	65 36		adc $36				adc 	zTemp0
.a5b5	1a		inc a				inc 	a 							; one extra for NULL
.a5b6	20 71 a6	jsr $a671			jsr 	TokeniseWriteByte
.a5b9					_TOBlockLoop:
.a5b9	c4 36		cpy $36				cpy 	zTemp0
.a5bb	f0 09		beq $a5c6			beq 	_TOBlockExit
.a5bd	b9 a6 05	lda $05a6,y			lda 	lineBuffer,y
.a5c0	20 71 a6	jsr $a671			jsr 	TokeniseWriteByte
.a5c3	c8		iny				iny
.a5c4	80 f3		bra $a5b9			bra 	_TOBlockLoop
.a5c6					_TOBlockExit:
.a5c6	a9 00		lda #$00			lda 	#0
.a5c8	20 71 a6	jsr $a671			jsr 	TokeniseWriteByte
.a5cb	60		rts				rts
.a5cc					TokeniseHexConstant:
.a5cc	a9 fe		lda #$fe			lda 	#KWC_HEXCONST 				; hex constant token.
.a5ce	20 71 a6	jsr $a671			jsr 	TokeniseWriteByte
.a5d1	e8		inx				inx									; start of quoted string.
.a5d2	da		phx				phx 								; push start of constant on top
.a5d3	ca		dex				dex
.a5d4					_THFindLoop:
.a5d4	e8		inx				inx
.a5d5	bd a6 05	lda $05a6,x			lda 	lineBuffer,x
.a5d8	c9 30		cmp #$30			cmp 	#"0"
.a5da	90 0c		bcc $a5e8			bcc 	_THFoundEnd
.a5dc	c9 3a		cmp #$3a			cmp 	#"9"+1
.a5de	90 f4		bcc $a5d4			bcc 	_THFindLoop
.a5e0	c9 41		cmp #$41			cmp 	#"A"
.a5e2	90 04		bcc $a5e8			bcc 	_THFoundEnd
.a5e4	c9 47		cmp #$47			cmp 	#"F"+1
.a5e6	90 ec		bcc $a5d4			bcc 	_THFindLoop
.a5e8					_THFoundEnd:
.a5e8	7a		ply				ply 								; restore start
.a5e9	20 ad a5	jsr $a5ad			jsr 	TOWriteBlockXY 				; output the block
.a5ec	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/utility.asm

.a5ed					TokeniseCalculateHash:
.a5ed	da		phx				phx
.a5ee	ae 80 04	ldx $0480			ldx 	identStart 					; needs to be same as in tokens.py - simple sum
.a5f1	a9 00		lda #$00			lda 	#0
.a5f3					_TCHLoop:
.a5f3	18		clc				clc
.a5f4	7d a6 05	adc $05a6,x			adc 	lineBuffer,x
.a5f7	e8		inx				inx
.a5f8	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.a5fb	d0 f6		bne $a5f3			bne 	_TCHLoop
.a5fd	8d 83 04	sta $0483			sta 	identHash 					; save the hash
.a600	fa		plx				plx
.a601	60		rts				rts
.a602					FixLineBufferCase:
.a602	a2 00		ldx #$00			ldx 	#0
.a604					_FLBCLoop:
.a604	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; get next character
.a607	f0 22		beq $a62b			beq 	_FLBCExit 					; end of string.
.a609	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.a60b	f0 11		beq $a61e			beq 	_FLBCInQuotes
.a60d	e8		inx				inx
.a60e	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.a610	90 f2		bcc $a604			bcc 	_FLBCLoop
.a612	c9 7b		cmp #$7b			cmp 	#'z'+1
.a614	b0 ee		bcs $a604			bcs 	_FLBCLoop
.a616	38		sec				sec 								; make U/C
.a617	e9 20		sbc #$20			sbc 	#32
.a619	9d a5 05	sta $05a5,x			sta	 	lineBuffer-1,x 				; write back
.a61c	80 e6		bra $a604			bra 	_FLBCLoop
.a61e					_FLBCInQuotes:
.a61e	e8		inx				inx 								; advance
.a61f	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; get next
.a622	f0 07		beq $a62b			beq 	_FLBCExit 					; exit on EOS
.a624	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.a626	d0 f6		bne $a61e			bne 	_FLBCInQuotes
.a628	e8		inx				inx 								; skip over it
.a629	80 d9		bra $a604			bra 	_FLBCLoop
.a62b					_FLBCExit:
.a62b	60		rts				rts
.a62c					TokeniseExtractLineNumber:
.a62c	ad a8 04	lda $04a8			lda 	tokenLineNumber+1 			; push current value on stack
.a62f	48		pha				pha
.a630	ad a7 04	lda $04a7			lda 	tokenLineNumber
.a633	48		pha				pha
.a634	20 6a a6	jsr $a66a			jsr 	_TELNTimes2 				; line # x 4
.a637	20 6a a6	jsr $a66a			jsr 	_TELNTimes2 				; line # x 2
.a63a	18		clc				clc 								; add stacked value
.a63b	68		pla				pla
.a63c	6d a7 04	adc $04a7			adc 	tokenLineNumber
.a63f	8d a7 04	sta $04a7			sta 	tokenLineNumber
.a642	68		pla				pla
.a643	6d a8 04	adc $04a8			adc 	tokenLineNumber+1
.a646	8d a8 04	sta $04a8			sta 	tokenLineNumber+1 			; line # x 5
.a649	20 6a a6	jsr $a66a			jsr 	_TELNTimes2 				; line # x 10
.a64c	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; get and consume character
.a64f	e8		inx				inx
.a650	29 0f		and #$0f			and 	#15 						; add to line #
.a652	18		clc				clc
.a653	6d a7 04	adc $04a7			adc 	tokenLineNumber
.a656	8d a7 04	sta $04a7			sta 	tokenLineNumber
.a659	90 03		bcc $a65e			bcc 	_TLENNoCarry
.a65b	ee a8 04	inc $04a8			inc 	tokenLineNumber+1
.a65e					_TLENNoCarry:
.a65e	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; more digits ?
.a661	c9 30		cmp #$30			cmp 	#'0'
.a663	90 04		bcc $a669			bcc 	_TLENExit
.a665	c9 3a		cmp #$3a			cmp 	#'9'+1
.a667	90 c3		bcc $a62c			bcc 	TokeniseExtractLineNumber
.a669					_TLENExit:
.a669	60		rts				rts
.a66a					_TELNTimes2:
.a66a	0e a7 04	asl $04a7			asl 	tokenLineNumber
.a66d	2e a8 04	rol $04a8			rol 	tokenLineNumber+1
.a670	60		rts				rts
.a671					TokeniseWriteByte:
.a671	da		phx				phx
.a672	ae a6 04	ldx $04a6			ldx 	tokenOffset 				; next slot to write to
.a675	9d a6 04	sta $04a6,x			sta 	tokenOffset,x 				; write byte out
.a678	ee a6 04	inc $04a6			inc 	tokenOffset 				; advance slot.
.a67b	fa		plx				plx
.a67c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/variablerecord.asm

.a67d					CheckCreateVariableRecord:
.a67d	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.a67f	85 36		sta $36				sta 	0+zTemp0
.a681	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.a683	85 37		sta $37				sta 	1+zTemp0
.a685					_CCVSearch:
.a685	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.a687	f0 2c		beq $a6b5			beq 	_CCVFail
.a689	a0 01		ldy #$01			ldy 	#1 							; read the hash
.a68b	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.a68d	cd 83 04	cmp $0483			cmp 	identHash
.a690	d0 16		bne $a6a8			bne 	_CCVNext
.a692	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.a694	ae 80 04	ldx $0480			ldx 	identStart
.a697					_CCVCompare:
.a697	bd a6 05	lda $05a6,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.a69a	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.a69c	e8		inx				inx 								; advance pointers
.a69d	c8		iny				iny
.a69e	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.a69f	d0 07		bne $a6a8			bne 	_CCVNext  					; didn't match go to next.
.a6a1	90 f4		bcc $a697			bcc 	_CCVCompare 				; not finished yet.
.a6a3	ec 82 04	cpx $0482			cpx 	identTypeEnd 				; matched whole thing ?
.a6a6	f0 41		beq $a6e9			beq 	_CCVFound 					; yes, we were successful
.a6a8					_CCVNext:
.a6a8	18		clc				clc
.a6a9	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.a6ab	65 36		adc $36				adc 	zTemp0
.a6ad	85 36		sta $36				sta 	zTemp0
.a6af	90 d4		bcc $a685			bcc 	_CCVSearch
.a6b1	e6 37		inc $37				inc 	zTemp0+1
.a6b3	80 d0		bra $a685			bra 	_CCVSearch
.a6b5					_CCVFail:
.a6b5	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.a6b7	ad 83 04	lda $0483			lda 	identHash
.a6ba	91 36		sta ($36),y			sta 	(zTemp0),y
.a6bc	c8		iny				iny 								; offset 2 is the type byte
.a6bd	ad 84 04	lda $0484			lda 	identTypeByte
.a6c0	91 36		sta ($36),y			sta 	(zTemp0),y
.a6c2	c8		iny				iny
.a6c3					_CCVData:
.a6c3	a9 00		lda #$00			lda 	#0 							; erase data 3-7
.a6c5	91 36		sta ($36),y			sta 	(zTemp0),y
.a6c7	c8		iny				iny
.a6c8	c0 08		cpy #$08			cpy 	#8
.a6ca	90 f7		bcc $a6c3			bcc 	_CCVData
.a6cc	ae 80 04	ldx $0480			ldx 	identStart 					; copy name into 8 on.
.a6cf					_CCVCopyName:
.a6cf	bd a6 05	lda $05a6,x			lda 	lineBuffer,x
.a6d2	91 36		sta ($36),y			sta 	(zTemp0),y
.a6d4	e8		inx				inx
.a6d5	c8		iny				iny
.a6d6	ec 82 04	cpx $0482			cpx 	identTypeEnd
.a6d9	d0 f4		bne $a6cf			bne 	_CCVCopyName
.a6db	98		tya				tya 								; patch offset
.a6dc	92 36		sta ($36)			sta 	(zTemp0)
.a6de	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.a6e0	91 36		sta ($36),y			sta 	(zTemp0),y
.a6e2	88		dey				dey
.a6e3	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.a6e5	09 80		ora #$80			ora 	#$80
.a6e7	91 36		sta ($36),y			sta 	(zTemp0),y
.a6e9					_CCVFound:
.a6e9	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.a6eb	38		sec				sec
.a6ec	e9 10		sbc #$10			sbc 	#(VariableSpace >> 8) 		; offset from the start
.a6ee	09 40		ora #$40			ora 	#$40 						; make it a writeable token
.a6f0	20 71 a6	jsr $a671			jsr 	TokeniseWriteByte
.a6f3	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.a6f5	20 71 a6	jsr $a671			jsr 	TokeniseWriteByte
.a6f8	60		rts				rts

;******  Return to file: _basic.asm


;******  End of listing
