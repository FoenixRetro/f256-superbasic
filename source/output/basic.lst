
; 64tass Turbo Assembler Macro V1.56.2625 listing file
; 64tass -q -b -Wall -Wno-portable -c -L output/basic.lst -l output/basic.lbl -Wall -o basic.rom _basic.asm
; Thu Sep 22 09:57:58 2022

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: _basic.asm


;******  Processing file: ./aa_system/01common.inc

=$30					ZeroPageMandatory = $30
=$600					ZeroPagePreference = $600
=$700					MemoryStorage = $700
=$2000					BasicStart = $2000
=$8010					CodeStart = $8010
=$1000					VariableSpace = $1000
=$2000					EndVariableSpace = $2000
=8					MathStackSize = 8
=512					BasicStackSize = 512

;******  Return to file: _basic.asm


;******  Processing file: ./aa_system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./aa_system/04data.inc

.0030					codePtr:
>0030							.fill 	4
.0034					basicStack:
>0034							.fill 	2
.0036					zTemp0:
>0036							.fill 	2
.0038					zTemp1:
>0038							.fill 	2
.003a					zTemp2:
>003a							.fill 	2
=$80					NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20					NSBIsReference = $20 						; bit 5 : is a reference
=$10					NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18					NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03					NSBRefMask = $03 							; bits 0,1 : Bytes of reference, -1 (e.g. 00 = 1 byte, 11 = 4 bytes)
=$00					NSTInteger = $00 							; base types for bits 3..4
=$08					NSTFloat = $08
=$10					NSTString = $10
=$18					NSTProcedure = $18
.0600					NSStatus:
>0600							.fill 	MathStackSize
.0608					NSMantissa0:
>0608							.fill 	MathStackSize 				; (this is my integer mantissa system)
.0610					NSMantissa1:
>0610							.fill 	MathStackSize
.0618					NSMantissa2:
>0618							.fill 	MathStackSize
.0620					NSMantissa3:
>0620							.fill 	MathStackSize
.0628					NSExponent:
>0628							.fill 	MathStackSize
.0700					identStart:
>0700							.fill 	1
.0701					identTypeStart:
>0701							.fill 	1
.0702					identTypeEnd:
>0702							.fill 	1
.0703					identHash:
>0703							.fill 	1
.0704					identTypeByte:
>0704							.fill 	1	 						; (see tokenising.pdf)
.0705					encodeState:
>0705							.fill 	1
.0706					tokenOffset:
>0706							.fill 	1
.0707					tokenLineNumber:
>0707							.fill 	2
.0709					tokenBuffer:
>0709							.fill 	253
.0806					lineBuffer:
>0806							.fill 	256

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/binary/handlers.inc


;******  Return to file: _basic.asm


;******  Processing file: ./generated/errors.inc

=1					ERRID_BREAK = 1
=2					ERRID_SYNTAX = 2
=3					ERRID_DIVZERO = 3
=4					ERRID_RANGE = 4
=5					ERRID_TYPE = 5
=6					ERRID_MEMORY = 6
=7					ERRID_ARGUMENT = 7
=8					ERRID_STOP = 8
=9					ERRID_STRING = 9
=10					ERRID_ASSERT = 10
=11					ERRID_DATA = 11
=12					ERRID_NOTDONE = 12

;******  Return to file: _basic.asm


;******  Processing file: ./generated/kwdconst.inc

=$00					KWD_LESSLESS                         = $00; $00 <<
=$01					KWD_LESSEQUAL                        = $01; $01 <=
=$02					KWD_LESSGREATER                      = $02; $02 <>
=$03					KWD_PLINGPLING3                      = $03; $03 !!3
=$04					KWD_GREATERLESS                      = $04; $04 ><
=$05					KWD_GREATEREQUAL                     = $05; $05 >=
=$06					KWD_GREATERGREATER                   = $06; $06 >>
=$07					KWD_PLINGPLING7                      = $07; $07 !!7
=$08					KWD_PLINGPLING8                      = $08; $08 !!8
=$09					KWD_PLINGPLING9                      = $09; $09 !!9
=$0a					KWD_PLINGPLING10                     = $0a; $0a !!10
=$0b					KWD_PLINGPLING11                     = $0b; $0b !!11
=$0c					KWD_PLINGPLING12                     = $0c; $0c !!12
=$0d					KWD_PLINGPLING13                     = $0d; $0d !!13
=$0e					KWD_PLINGPLING14                     = $0e; $0e !!14
=$0f					KWD_PLINGPLING15                     = $0f; $0f !!15
=$10					KWD_AT                               = $10; $10 @
=$11					KWD_PLINGPLING17                     = $11; $11 !!17
=$12					KWD_PLINGPLING18                     = $12; $12 !!18
=$13					KWD_LSQPAREN                         = $13; $13 [
=$14					KWD_BACKSLASH                        = $14; $14 \
=$15					KWD_RSQPAREN                         = $15; $15 ]
=$16					KWD_HAT                              = $16; $16 ^
=$17					KWD_UNDERSCORE                       = $17; $17 _
=$18					KWD_BQUOTE                           = $18; $18 `
=$19					KWD_PLINGPLING25                     = $19; $19 !!25
=$1a					KWD_PLINGPLING26                     = $1a; $1a !!26
=$1b					KWD_LCURLY                           = $1b; $1b {
=$1c					KWD_BAR                              = $1c; $1c |
=$1d					KWD_RCURLY                           = $1d; $1d }
=$1e					KWD_TILDE                            = $1e; $1e ~
=$21					KWD_PLING                            = $21; $21 !
=$22					KWD_DQUOTE                           = $22; $22 "
=$23					KWD_HASH                             = $23; $23 #
=$24					KWD_DOLLAR                           = $24; $24 $
=$25					KWD_PERCENT                          = $25; $25 %
=$26					KWD_AMPERSAND                        = $26; $26 &
=$27					KWD_QUOTE                            = $27; $27 '
=$28					KWD_LPAREN                           = $28; $28 (
=$29					KWD_RPAREN                           = $29; $29 )
=$2a					KWD_STAR                             = $2a; $2a *
=$2b					KWD_PLUS                             = $2b; $2b +
=$2c					KWD_COMMA                            = $2c; $2c ,
=$2d					KWD_MINUS                            = $2d; $2d -
=$2e					KWD_PERIOD                           = $2e; $2e .
=$2f					KWD_SLASH                            = $2f; $2f /
=$30					KWD_0                                = $30; $30 0
=$31					KWD_1                                = $31; $31 1
=$32					KWD_2                                = $32; $32 2
=$33					KWD_3                                = $33; $33 3
=$34					KWD_4                                = $34; $34 4
=$35					KWD_5                                = $35; $35 5
=$36					KWD_6                                = $36; $36 6
=$37					KWD_7                                = $37; $37 7
=$38					KWD_8                                = $38; $38 8
=$39					KWD_9                                = $39; $39 9
=$3a					KWD_COLON                            = $3a; $3a :
=$3b					KWD_SEMICOLON                        = $3b; $3b ;
=$3c					KWD_LESS                             = $3c; $3c <
=$3d					KWD_EQUAL                            = $3d; $3d =
=$3e					KWD_GREATER                          = $3e; $3e >
=$3f					KWD_QMARK                            = $3f; $3f ?
=$83					KWD_ABSLPAREN                        = $83; $83 ABS(
=$84					KWD_ALLOCLPAREN                      = $84; $84 ALLOC(
=$85					KWD_ASCLPAREN                        = $85; $85 ASC(
=$86					KWD_CHRDOLLARLPAREN                  = $86; $86 CHR$(
=$87					KWD_DECLPAREN                        = $87; $87 DEC(
=$88					KWD_FALSE                            = $88; $88 FALSE
=$89					KWD_GETDATEDOLLARLPAREN              = $89; $89 GETDATE$(
=$8a					KWD_GETTIMEDOLLARLPAREN              = $8a; $8a GETTIME$(
=$8b					KWD_HEXDOLLARLPAREN                  = $8b; $8b HEX$(
=$8c					KWD_INTLPAREN                        = $8c; $8c INT(
=$8d					KWD_ISVALLPAREN                      = $8d; $8d ISVAL(
=$8e					KWD_LEFTDOLLARLPAREN                 = $8e; $8e LEFT$(
=$8f					KWD_LENLPAREN                        = $8f; $8f LEN(
=$90					KWD_MIDDOLLARLPAREN                  = $90; $90 MID$(
=$91					KWD_NOT                              = $91; $91 NOT
=$92					KWD_PAGE                             = $92; $92 PAGE
=$93					KWD_RIGHTDOLLARLPAREN                = $93; $93 RIGHT$(
=$94					KWD_RNDLPAREN                        = $94; $94 RND(
=$95					KWD_SGNLPAREN                        = $95; $95 SGN(
=$96					KWD_SPCLPAREN                        = $96; $96 SPC(
=$97					KWD_STRDOLLARLPAREN                  = $97; $97 STR$(
=$98					KWD_TRUE                             = $98; $98 TRUE
=$99					KWD_VALLPAREN                        = $99; $99 VAL(
=$9a					KWD_FOR                              = $9a; $9a FOR
=$9b					KWD_IF                               = $9b; $9b IF
=$9c					KWD_PROC                             = $9c; $9c PROC
=$9d					KWD_REPEAT                           = $9d; $9d REPEAT
=$9e					KWD_WHILE                            = $9e; $9e WHILE
=$9f					KWD_ENDIF                            = $9f; $9f ENDIF
=$a0					KWD_ENDPROC                          = $a0; $a0 ENDPROC
=$a1					KWD_NEXT                             = $a1; $a1 NEXT
=$a2					KWD_UNTIL                            = $a2; $a2 UNTIL
=$a3					KWD_WEND                             = $a3; $a3 WEND
=$a4					KWD_ASSERT                           = $a4; $a4 ASSERT
=$a5					KWD_CALL                             = $a5; $a5 CALL
=$a6					KWD_CLS                              = $a6; $a6 CLS
=$a7					KWD_DATA                             = $a7; $a7 DATA
=$a8					KWD_DIM                              = $a8; $a8 DIM
=$a9					KWD_GOSUB                            = $a9; $a9 GOSUB
=$aa					KWD_GOTO                             = $aa; $aa GOTO
=$ab					KWD_LET                              = $ab; $ab LET
=$ac					KWD_PRINT                            = $ac; $ac PRINT
=$ad					KWD_READ                             = $ad; $ad READ
=$ae					KWD_REM                              = $ae; $ae REM
=$af					KWD_RETURN                           = $af; $af RETURN
=$b0					KWD_THEN                             = $b0; $b0 THEN
=$b1					KWD_TO                               = $b1; $b1 TO

;******  Return to file: _basic.asm


;******  Processing file: ./generated/kwdconst0.inc

=$80					KWC_EOL = $80
=$ff					KWC_STRING = $FF
=$fe					KWC_HEXCONST = $FE
=$9a					KWC_FIRST_STRUCTURE = $9a
=$9f					KWC_FIRST_STRUCTURE_DEC = $9f
=$a3					KWC_LAST_STRUCTURE = $a3
=$83					KWC_FIRST_UNARY = $83
=$99					KWC_LAST_UNARY = $99

;******  Return to file: _basic.asm


;******  Processing file: ./memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./aa_system/00start.asm

.8010	a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.8012	9a		txs				txs
.8013	20 3f 81	jsr $813f			jsr 	NewCommand 					; erase current program
.8016	20 10 87	jsr $8710			jsr 	BackloadProgram
.8019	4c 49 81	jmp $8149			jmp 	CommandRun
.801c					WarmStart:
>801c	db						.byte 	$DB 						; causes a break in the emulator
.801d	80 fd		bra $801c			bra 	WarmStart
.801f					ErrorHandler:
>801f	db						.byte 	$DB 						; causes a break in the emulator
.8020	4c 1f 80	jmp $801f			jmp 	ErrorHandler

;******  Processing file: ./aa_system/../generated/vectors.dat

.8023					VectorSetPunc:
>8023	8d 81					.word	ShiftLeft                        ; $00 <<
>8025	d8 8b					.word	BinaryCompareLessEqual           ; $01 <=
>8027	cf 8b					.word	BinaryCompareNotEqual            ; $02 <>
>8029	52 8d					.word	SyntaxError                      ; $03 !!3
>802b	52 8d					.word	SyntaxError                      ; $04 ><
>802d	e1 8b					.word	BinaryCompareGreaterEqual        ; $05 >=
>802f	90 81					.word	ShiftRight                       ; $06 >>
>8031	52 8d					.word	SyntaxError                      ; $07 !!7
>8033	52 8d					.word	SyntaxError                      ; $08 !!8
>8035	52 8d					.word	SyntaxError                      ; $09 !!9
>8037	52 8d					.word	SyntaxError                      ; $0a !!10
>8039	52 8d					.word	SyntaxError                      ; $0b !!11
>803b	52 8d					.word	SyntaxError                      ; $0c !!12
>803d	52 8d					.word	SyntaxError                      ; $0d !!13
>803f	52 8d					.word	SyntaxError                      ; $0e !!14
>8041	52 8d					.word	SyntaxError                      ; $0f !!15
>8043	52 8d					.word	SyntaxError                      ; $10 @
>8045	52 8d					.word	SyntaxError                      ; $11 !!17
>8047	52 8d					.word	SyntaxError                      ; $12 !!18
>8049	52 8d					.word	SyntaxError                      ; $13 [
>804b	15 8c					.word	IntegerDivide                    ; $14 \
>804d	52 8d					.word	SyntaxError                      ; $15 ]
>804f	fc 82					.word	EorInteger                       ; $16 ^
>8051	52 8d					.word	SyntaxError                      ; $17 _
>8053	52 8d					.word	SyntaxError                      ; $18 `
>8055	52 8d					.word	SyntaxError                      ; $19 !!25
>8057	52 8d					.word	SyntaxError                      ; $1a !!26
>8059	52 8d					.word	SyntaxError                      ; $1b {
>805b	ba 82					.word	OraInteger                       ; $1c |
>805d	52 8d					.word	SyntaxError                      ; $1d }
>805f	52 8d					.word	SyntaxError                      ; $1e ~
>8061	52 8d					.word	SyntaxError                      ; $1f [7m<7F>[m
>8063	52 8d					.word	SyntaxError                      ; $20
>8065	52 8d					.word	SyntaxError                      ; $21 !
>8067	52 8d					.word	SyntaxError                      ; $22 "
>8069	52 8d					.word	SyntaxError                      ; $23 #
>806b	52 8d					.word	SyntaxError                      ; $24 $
>806d	61 8c					.word	IntegerModulus                   ; $25 %
>806f	78 82					.word	AndInteger                       ; $26 &
>8071	52 8d					.word	SyntaxError                      ; $27 '
>8073	52 8d					.word	SyntaxError                      ; $28 (
>8075	52 8d					.word	SyntaxError                      ; $29 )
>8077	d1 8c					.word	MulInteger                       ; $2a *
>8079	23 82					.word	AddInteger                       ; $2b +
>807b	52 8d					.word	SyntaxError                      ; $2c ,
>807d	4d 82					.word	SubInteger                       ; $2d -
>807f	52 8d					.word	SyntaxError                      ; $2e .
>8081	52 8d					.word	SyntaxError                      ; $2f /
>8083	52 8d					.word	SyntaxError                      ; $30 0
>8085	52 8d					.word	SyntaxError                      ; $31 1
>8087	52 8d					.word	SyntaxError                      ; $32 2
>8089	52 8d					.word	SyntaxError                      ; $33 3
>808b	52 8d					.word	SyntaxError                      ; $34 4
>808d	52 8d					.word	SyntaxError                      ; $35 5
>808f	52 8d					.word	SyntaxError                      ; $36 6
>8091	52 8d					.word	SyntaxError                      ; $37 7
>8093	52 8d					.word	SyntaxError                      ; $38 8
>8095	52 8d					.word	SyntaxError                      ; $39 9
>8097	52 8d					.word	SyntaxError                      ; $3a :
>8099	52 8d					.word	SyntaxError                      ; $3b ;
>809b	bb 8b					.word	BinaryCompareLess                ; $3c <
>809d	b1 8b					.word	BinaryCompareEqual               ; $3d =
>809f	c5 8b					.word	BinaryCompareGreater             ; $3e >
>80a1	52 8d					.word	SyntaxError                      ; $3f ?
.80a3					VectorSet0:
>80a3	80 81					.word	EOLCommand                       ; $80 !0:EOF
>80a5	52 8d					.word	SyntaxError                      ; $81 !1:SH1
>80a7	52 8d					.word	SyntaxError                      ; $82 !2:SH2
>80a9	52 8d					.word	SyntaxError                      ; $83 ABS(
>80ab	52 8d					.word	SyntaxError                      ; $84 ALLOC(
>80ad	52 8d					.word	SyntaxError                      ; $85 ASC(
>80af	52 8d					.word	SyntaxError                      ; $86 CHR$(
>80b1	52 8d					.word	SyntaxError                      ; $87 DEC(
>80b3	ae 8b					.word	ReturnFalse                      ; $88 FALSE
>80b5	52 8d					.word	SyntaxError                      ; $89 GETDATE$(
>80b7	52 8d					.word	SyntaxError                      ; $8a GETTIME$(
>80b9	52 8d					.word	SyntaxError                      ; $8b HEX$(
>80bb	52 8d					.word	SyntaxError                      ; $8c INT(
>80bd	52 8d					.word	SyntaxError                      ; $8d ISVAL(
>80bf	52 8d					.word	SyntaxError                      ; $8e LEFT$(
>80c1	52 8d					.word	SyntaxError                      ; $8f LEN(
>80c3	52 8d					.word	SyntaxError                      ; $90 MID$(
>80c5	52 8d					.word	SyntaxError                      ; $91 NOT
>80c7	52 8d					.word	SyntaxError                      ; $92 PAGE
>80c9	52 8d					.word	SyntaxError                      ; $93 RIGHT$(
>80cb	52 8d					.word	SyntaxError                      ; $94 RND(
>80cd	52 8d					.word	SyntaxError                      ; $95 SGN(
>80cf	52 8d					.word	SyntaxError                      ; $96 SPC(
>80d1	52 8d					.word	SyntaxError                      ; $97 STR$(
>80d3	a3 8b					.word	ReturnTrue                       ; $98 TRUE
>80d5	52 8d					.word	SyntaxError                      ; $99 VAL(
>80d7	52 8d					.word	SyntaxError                      ; $9a FOR
>80d9	52 8d					.word	SyntaxError                      ; $9b IF
>80db	52 8d					.word	SyntaxError                      ; $9c PROC
>80dd	52 8d					.word	SyntaxError                      ; $9d REPEAT
>80df	52 8d					.word	SyntaxError                      ; $9e WHILE
>80e1	52 8d					.word	SyntaxError                      ; $9f ENDIF
>80e3	52 8d					.word	SyntaxError                      ; $a0 ENDPROC
>80e5	52 8d					.word	SyntaxError                      ; $a1 NEXT
>80e7	52 8d					.word	SyntaxError                      ; $a2 UNTIL
>80e9	52 8d					.word	SyntaxError                      ; $a3 WEND
>80eb	21 81					.word	AssertCommand                    ; $a4 ASSERT
>80ed	2f 81					.word	CallCommand                      ; $a5 CALL
>80ef	52 8d					.word	SyntaxError                      ; $a6 CLS
>80f1	52 8d					.word	SyntaxError                      ; $a7 DATA
>80f3	52 8d					.word	SyntaxError                      ; $a8 DIM
>80f5	52 8d					.word	SyntaxError                      ; $a9 GOSUB
>80f7	52 8d					.word	SyntaxError                      ; $aa GOTO
>80f9	52 8d					.word	SyntaxError                      ; $ab LET
>80fb	52 8d					.word	SyntaxError                      ; $ac PRINT
>80fd	52 8d					.word	SyntaxError                      ; $ad READ
>80ff	52 8d					.word	SyntaxError                      ; $ae REM
>8101	52 8d					.word	SyntaxError                      ; $af RETURN
>8103	52 8d					.word	SyntaxError                      ; $b0 THEN
>8105	52 8d					.word	SyntaxError                      ; $b1 TO
.8107					VectorSet1:
>8107	52 8d					.word	SyntaxError                      ; $80 !0:EOF
>8109	52 8d					.word	SyntaxError                      ; $81 !1:SH1
>810b	52 8d					.word	SyntaxError                      ; $82 !2:SH2
>810d	3b 81					.word	ClearCommand                     ; $83 CLEAR
>810f	3c 81					.word	EndCommand                       ; $84 END
>8111	52 8d					.word	SyntaxError                      ; $85 LIST
>8113	3f 81					.word	NewCommand                       ; $86 NEW
>8115	52 8d					.word	SyntaxError                      ; $87 RESTORE
>8117	49 81					.word	CommandRUN                       ; $88 RUN
>8119	52 8d					.word	SyntaxError                      ; $89 STOP
.811b					VectorSet2:
>811b	52 8d					.word	SyntaxError                      ; $80 !0:EOF
>811d	52 8d					.word	SyntaxError                      ; $81 !1:SH1
>811f	52 8d					.word	SyntaxError                      ; $82 !2:SH2

;******  Return to file: ./aa_system/00start.asm


;******  Return to file: _basic.asm


;******  Processing file: ./commands/assert.asm

.8121					AssertCommand:
.8121	20 1c 86	jsr $861c			jsr 	EvaluateInteger 			; the assert test
.8124	20 b0 86	jsr $86b0			jsr 	NSMIsZero 					; exit if result is non zero.
.8127	d0 05		bne $812e			bne 	_ACExit
.8129	a9 0a		lda #$0a		lda	#10
.812b	4c 1f 80	jmp $801f		jmp	ErrorHandler
.812e					_ACExit:
.812e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./commands/call.asm

.812f					CallCommand:
.812f	20 31 86	jsr $8631			jsr 	Evaluate16BitInteger
.8132	ad 10 06	lda $0610			lda 	NSMantissa1
.8135	8d 09 06	sta $0609			sta 	NSMantissa0+1
.8138	6c 08 06	jmp ($0608)			jmp 	(NSMantissa0)

;******  Return to file: _basic.asm


;******  Processing file: ./commands/clear.asm

.813b					ClearCommand:
.813b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./commands/end.asm

.813c					EndCommand:
.813c	4c 1c 80	jmp $801c			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./commands/new.asm

.813f					NewCommand:
.813f	20 bd 86	jsr $86bd			jsr 	MemoryNew
.8142	9c 00 10	stz $1000			stz 	VariableSpace 				; erase all variables.
.8145	20 3b 81	jsr $813b			jsr 	ClearCommand 				; clear everything.
.8148	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./commands/run.asm

.8149					CommandRUN:
.8149	20 3b 81	jsr $813b			jsr 	ClearCommand 				; clear variable/stacks/etc.
.814c	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.814e	85 30		sta $30				sta 	codePtr
.8150	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.8152	85 31		sta $31				sta 	codePtr+1
.8154					RUNNewLine:
.8154	b2 30		lda ($30)			lda 	(codePtr)
.8156	f0 25		beq $817d			beq 	CRNoProgram         		; no then END.
.8158	a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack
.815a	9a		txs				txs
.815b					RUNCodePointerLine:
.815b	a0 02		ldy #$02			ldy 	#2 							; start of program
.815d					_CRIncMainLoop:
.815d	c8		iny				iny
.815e					_CRMainLoop:
.815e	b1 30		lda ($30),y			lda 	(codePtr),y
.8160	10 10		bpl $8172			bpl 	_CRNotKeyword
.8162	c9 9a		cmp #$9a			cmp 	#KWC_LAST_UNARY+1 			; if after unary, legitimate command
.8164	b0 04		bcs $816a			bcs 	_CRIsKeyword
.8166	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if unary, syntax error.
.8168	b0 0d		bcs $8177			bcs		_CRSyntaxError
.816a					_CRIsKeyword:
.816a	c8		iny				iny 								; consume command
.816b	0a		asl a				asl 	a 							; double losing the MSB which is '1' as tokens are $80-$FF
.816c	aa		tax				tax 								; put in X for vector jump
.816d	20 7a 81	jsr $817a			jsr 	_CRCallVector0 				; call the vector - effectively jsr (vectortable,X)
.8170	80 ec		bra $815e			bra 	_CRMainLoop 				; and loop round
.8172					_CRNotKeyword:
.8172	c9 3a		cmp #$3a			cmp 	#KWD_COLON 					; if a :, consume it and go round.
.8174	f0 e7		beq $815d			beq 	_CRIncMainLoop
>8176	db						.byte 	$DB 						; causes a break in the emulator
.8177					_CRSyntaxError:
.8177	4c 52 8d	jmp $8d52			jmp 	SyntaxError
.817a					_CRCallVector0:
.817a	7c a3 80	jmp ($80a3,x)			jmp 	(VectorSet0,x)
.817d					CRNoProgram:
.817d	4c 3c 81	jmp $813c			jmp 	EndCommand
.8180					EOLCommand:
.8180	18		clc				clc
.8181	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8183	65 30		adc $30				adc 	codePtr
.8185	85 30		sta $30				sta 	codePtr
.8187	90 02		bcc $818b			bcc 	_CREExit
.8189	e6 31		inc $31				inc 	codePtr+1
.818b					_CREExit:
.818b	80 c7		bra $8154			bra 	RunNewLine

;******  Return to file: _basic.asm


;******  Processing file: ./errors/charcheck.asm

.8b8a					CheckRightBracket:
.8b8a	b1 30		lda ($30),y			lda 	(codePtr),y
.8b8c	c8		iny				iny
.8b8d	c9 29		cmp #$29			cmp 	#KWD_RPAREN 						; exit if matches
.8b8f	d0 0f		bne $8ba0			bne 	CNAFail
.8b91	60		rts				rts
.8b92					CheckComma:
.8b92	b1 30		lda ($30),y			lda 	(codePtr),y
.8b94	c8		iny				iny
.8b95	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 						; exit if matches
.8b97	d0 07		bne $8ba0			bne 	CNAFail
.8b99	60		rts				rts
.8b9a					CheckNextA:
.8b9a	d1 30		cmp ($30),y			cmp 	(codePtr),y
.8b9c	d0 02		bne $8ba0			bne 	CNAFail
.8b9e	c8		iny				iny 								; skip character
.8b9f	60		rts				rts 								; and exit
.8ba0					CNAFail:
.8ba0	4c 52 8d	jmp $8d52			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/binary/compare.asm

.8ba3					ReturnTrue:
.8ba3	a9 01		lda #$01			lda 	#1  						; set to 1
.8ba5	20 82 86	jsr $8682			jsr 	NSMSetByte
.8ba8	a9 80		lda #$80			lda 	#$80 						; set sign flag, so it is -1
.8baa	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8bad	60		rts				rts
.8bae					ReturnFalse:
.8bae	4c 80 86	jmp $8680			jmp 	NSMSetZero 					; set it all to zero
.8bb1					BinaryCompareEqual:
.8bb1	fa		plx				plx
.8bb2	20 ea 8b	jsr $8bea			jsr 	CompareBaseCode
.8bb5	c9 00		cmp #$00			cmp 	#0
.8bb7	f0 ea		beq $8ba3			beq 	ReturnTrue
.8bb9	80 f3		bra $8bae			bra 	ReturnFalse
.8bbb					BinaryCompareLess:
.8bbb	fa		plx				plx
.8bbc	20 ea 8b	jsr $8bea			jsr 	CompareBaseCode
.8bbf	c9 ff		cmp #$ff			cmp 	#$FF
.8bc1	f0 e0		beq $8ba3			beq 	ReturnTrue
.8bc3	80 e9		bra $8bae			bra 	ReturnFalse
.8bc5					BinaryCompareGreater:
.8bc5	fa		plx				plx
.8bc6	20 ea 8b	jsr $8bea			jsr 	CompareBaseCode
.8bc9	c9 01		cmp #$01			cmp 	#1
.8bcb	f0 d6		beq $8ba3			beq 	ReturnTrue
.8bcd	80 df		bra $8bae			bra 	ReturnFalse
.8bcf					BinaryCompareNotEqual:
.8bcf	20 ea 8b	jsr $8bea			jsr 	CompareBaseCode
.8bd2	c9 00		cmp #$00			cmp 	#0
.8bd4	d0 cd		bne $8ba3			bne 	ReturnTrue
.8bd6	80 d6		bra $8bae			bra 	ReturnFalse
.8bd8					BinaryCompareLessEqual:
.8bd8	20 ea 8b	jsr $8bea			jsr 	CompareBaseCode
.8bdb	c9 01		cmp #$01			cmp 	#1
.8bdd	d0 c4		bne $8ba3			bne 	ReturnTrue
.8bdf	80 cd		bra $8bae			bra 	ReturnFalse
.8be1					BinaryCompareGreaterEqual:
.8be1	20 ea 8b	jsr $8bea			jsr 	CompareBaseCode
.8be4	c9 ff		cmp #$ff			cmp 	#$FF
.8be6	d0 bb		bne $8ba3			bne 	ReturnTrue
.8be8	80 c4		bra $8bae			bra 	ReturnFalse
.8bea					CompareBaseCode:
.8bea	20 bd 83	jsr $83bd			jsr 	DereferenceTopTwo 			; make both values if references.
.8bed	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if either is a string.
.8bf0	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8bf3	29 10		and #$10			and 	#NSTString
.8bf5	d0 1c		bne $8c13			bne 	_CBCString
.8bf7	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check both are integers
.8bfa	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8bfd	d0 15		bne $8c14			bne 	_CBCFloat
.8bff	20 fd 81	jsr $81fd			jsr 	SubTopTwoStack 				; unsigned
.8c02	50 02		bvc $8c06			bvc 	_CBCNoOverflow 				; make signed
.8c04	49 80		eor #$80			eor 	#$80
.8c06					_CBCNoOverflow:
.8c06	30 08		bmi $8c10			bmi 	_CBCLess 					; if < return $FF
.8c08	20 b0 86	jsr $86b0			jsr 	NSMIsZero 					; or the mantissa together
.8c0b	f0 02		beq $8c0f			beq 	_CBCExit 					; if zero, return zero as equal
.8c0d	a9 01		lda #$01			lda 	#1 							; return 1
.8c0f					_CBCExit:
.8c0f	60		rts				rts
.8c10					_CBCLess:
.8c10	a9 ff		lda #$ff			lda 	#$FF
.8c12	60		rts				rts
.8c13					_CBCString:
>8c13	db						.byte 	$DB 						; causes a break in the emulator
.8c14					_CBCFloat:
>8c14	db						.byte 	$DB 						; causes a break in the emulator

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/binary/divide.asm

.8c15					IntegerDivide:
.8c15	fa		plx				plx
.8c16	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8c19	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8c1c	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8c1d	0a		asl a				asl 	a
.8c1e	10 05		bpl $8c25			bpl 	_NotRef
.8c20	48		pha				pha
.8c21	20 bd 83	jsr $83bd			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8c24	68		pla				pla
.8c25					_NotRef:
.8c25	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8c27	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8c2a	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8c2d	f0 03		beq $8c32			beq 	_IntegerCode 				; if clear, then we have two integers
.8c2f	4c 5c 8d	jmp $8d5c			jmp 	TypeError 					; anything else, type mismatch.
.8c32					_IntegerCode:
.8c32	20 54 8c	jsr $8c54			jsr 	CheckDivideZero 			; do div zero check
.8c35	20 8b 8c	jsr $8c8b			jsr 	Int32Divide 				; do the division
.8c38	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.8c3b	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8c3e	bd 12 06	lda $0612,x			lda 	NSMantissa1+2,x
.8c41	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8c44	bd 1a 06	lda $061a,x			lda 	NSMantissa2+2,x
.8c47	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8c4a	bd 22 06	lda $0622,x			lda 	NSMantissa3+2,x
.8c4d	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8c50	20 44 8d	jsr $8d44			jsr 	CalculateSign 				; calculate result sign
.8c53	60		rts				rts
.8c54					CheckDivideZero:
.8c54	e8		inx				inx
.8c55	20 b0 86	jsr $86b0			jsr 	NSMIsZero
.8c58	f0 02		beq $8c5c			beq 	_CDVError
.8c5a	ca		dex				dex
.8c5b	60		rts				rts
.8c5c					_CDVError:
.8c5c	a9 03		lda #$03		lda	#3
.8c5e	4c 1f 80	jmp $801f		jmp	ErrorHandler
.8c61					IntegerModulus:
.8c61	fa		plx				plx
.8c62	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8c65	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8c68	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8c69	0a		asl a				asl 	a
.8c6a	10 05		bpl $8c71			bpl 	_NotRef
.8c6c	48		pha				pha
.8c6d	20 bd 83	jsr $83bd			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8c70	68		pla				pla
.8c71					_NotRef:
.8c71	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8c73	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8c76	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8c79	f0 03		beq $8c7e			beq 	_IntegerCode 				; if clear, then we have two integers
.8c7b	4c 5c 8d	jmp $8d5c			jmp 	TypeError 					; anything else, type mismatch.
.8c7e					_IntegerCode:
.8c7e	20 54 8c	jsr $8c54			jsr 	CheckDivideZero 			; do div zero check
.8c81	20 8b 8c	jsr $8c8b			jsr 	Int32Divide 				; do the division
.8c84	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; clear the sign bit.
.8c87	5e 00 06	lsr $0600,x			lsr 	NSStatus,x
.8c8a	60		rts				rts
.8c8b					Int32Divide:
.8c8b	48		pha				pha 								; save AXY
.8c8c	5a		phy				phy
.8c8d	20 57 86	jsr $8657			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.8c90	20 7c 86	jsr $867c			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.8c93	a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.8c95					_I32DivideLoop:
.8c95	e8		inx				inx
.8c96	e8		inx				inx
.8c97	20 95 86	jsr $8695			jsr 	NSMShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.8c9a	ca		dex				dex
.8c9b	ca		dex				dex
.8c9c	20 96 86	jsr $8696			jsr 	NSMRotateLeft
.8c9f	20 c7 8c	jsr $8cc7			jsr 	DivideCheckSubtract 		; check if subtract possible
.8ca2	90 03		bcc $8ca7			bcc 	_I32DivideNoCarryIn
.8ca4	fe 0a 06	inc $060a,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.8ca7					_I32DivideNoCarryIn:
.8ca7	88		dey				dey 								; loop round till division completed.
.8ca8	d0 eb		bne $8c95			bne 	_I32DivideLoop
.8caa	7a		ply				ply 								; restore AXY and exit
.8cab	68		pla				pla
.8cac	60		rts				rts
.8cad					Int32ShiftDivide:
.8cad	48		pha				pha 								; save AXY
.8cae	5a		phy				phy
.8caf	20 57 86	jsr $8657			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.8cb2	20 7c 86	jsr $867c			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.8cb5	a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.8cb7					_I32SDLoop:
.8cb7	20 c7 8c	jsr $8cc7			jsr 	DivideCheckSubtract 		; check if subtract possible
.8cba	20 96 86	jsr $8696			jsr 	NSMRotateLeft				; shift 64 bit FPA left, rotating carry in
.8cbd	e8		inx				inx
.8cbe	20 96 86	jsr $8696			jsr 	NSMRotateLeft
.8cc1	88		dey				dey 	 							; do 31 times
.8cc2	d0 f3		bne $8cb7			bne 	_I32SDLoop
.8cc4	7a		ply				ply 								; restore AXY and exit
.8cc5	68		pla				pla
.8cc6	60		rts				rts
.8cc7					DivideCheckSubtract:
.8cc7	20 fd 81	jsr $81fd			jsr 	SubTopTwoStack 				; subtract Stack[X+1] from Stack[X+0]
.8cca	b0 04		bcs $8cd0			bcs 	_DCSExit 					; if carry set, then could do, exit
.8ccc	20 d7 81	jsr $81d7			jsr 	AddTopTwoStack 				; add it back in
.8ccf	18		clc				clc 								; and return False
.8cd0					_DCSExit:
.8cd0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/binary/multiply.asm

.8cd1					MulInteger:
.8cd1	fa		plx				plx
.8cd2	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8cd5	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8cd8	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8cd9	0a		asl a				asl 	a
.8cda	10 05		bpl $8ce1			bpl 	_NotRef
.8cdc	48		pha				pha
.8cdd	20 bd 83	jsr $83bd			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8ce0	68		pla				pla
.8ce1					_NotRef:
.8ce1	0a		asl a				asl 	a 							; put MSB of type into A:7
.8ce2	30 0b		bmi $8cef			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.8ce4	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8ce7	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8cea	f0 06		beq $8cf2			beq 	_IntegerCode 				; if clear, then we have two integers
.8cec	4c 66 8d	jmp $8d66			jmp 	NotDoneError 							; otherwise at least one float.
.8cef					_StringData:
.8cef	4c 66 8d	jmp $8d66			jmp 	NotDoneError							; at least one string - don't know both are strings.
.8cf2					_IntegerCode:
.8cf2	20 ff 8c	jsr $8cff			jsr 	MultiplyShort
.8cf5	c9 00		cmp #$00			cmp 	#0
.8cf7	f0 05		beq $8cfe			beq 	_MIExit
.8cf9	a9 04		lda #$04		lda	#4
.8cfb	4c 1f 80	jmp $801f		jmp	ErrorHandler
.8cfe					_MIExit:
.8cfe	60		rts				rts
.8cff					MultiplyShort:
.8cff	5a		phy				phy 								; save Y
.8d00	20 57 86	jsr $8657			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.8d03	20 7c 86	jsr $867c			jsr 	NSMSetZeroMantissaOnly 		; set mantissa S[X] to zero
.8d06	a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.8d08					_I32MLoop:
.8d08	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.8d0b	1d 12 06	ora $0612,x			ora 	NSMantissa1+2,x
.8d0e	1d 1a 06	ora $061a,x			ora 	NSMantissa2+2,x
.8d11	1d 22 06	ora $0622,x			ora 	NSMantissa3+2,x
.8d14	f0 28		beq $8d3e			beq 	_I32MExit 					; exit if zero
.8d16	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.8d19	29 01		and #$01			and 	#1
.8d1b	f0 0e		beq $8d2b			beq 	_I32MNoAdd
.8d1d	20 d7 81	jsr $81d7			jsr 	AddTopTwoStack 				; if so add S[X+1] to S[X+0]
.8d20	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.8d23	10 06		bpl $8d2b			bpl 	_I32MNoAdd
.8d25					_I32ShiftRight:
.8d25	20 a3 86	jsr $86a3			jsr 	NSMShiftRight 				; shift S[X] right
.8d28	c8		iny				iny 								; increment shift count
.8d29	80 0a		bra $8d35			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.8d2b					_I32MNoAdd:
.8d2b	3c 21 06	bit $0621,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.8d2e	70 f5		bvs $8d25			bvs 	_I32ShiftRight 				; instead.
.8d30	e8		inx				inx
.8d31	20 95 86	jsr $8695			jsr 	NSMShiftLeft 				; shift additive S[X+1] left
.8d34	ca		dex				dex
.8d35					_I32MShiftUpper:
.8d35	e8		inx				inx 								; shift S[X+2] right
.8d36	e8		inx				inx
.8d37	20 a3 86	jsr $86a3			jsr 	NSMShiftRight
.8d3a	ca		dex				dex
.8d3b	ca		dex				dex
.8d3c	80 ca		bra $8d08			bra 	_I32MLoop 					; try again.
.8d3e					_I32MExit:
.8d3e	20 44 8d	jsr $8d44			jsr 	CalculateSign
.8d41	98		tya				tya 								; shift in A
.8d42	7a		ply				ply 								; restore Y and exit
.8d43	60		rts				rts
.8d44					CalculateSign:
.8d44	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.8d47	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; shift result left
.8d4a	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.8d4d	0a		asl a				asl 	a 							; shift bit 7 into carry
.8d4e	7e 00 06	ror $0600,x			ror 	NSStatus,x 					; shift right into status byte.
.8d51	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/binary/shifts.asm

.818d					ShiftLeft:
.818d	38		sec				sec
.818e	80 01		bra $8191			bra 	ShiftMain
.8190					ShiftRight:
.8190	18		clc				clc
.8191					ShiftMain:
.8191	fa		plx				plx 								; restore X
.8192	08		php				php 								; save direction
.8193	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8196	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8199	0a		asl a				asl 	a 							; shift reference bit into sign bit
.819a	0a		asl a				asl 	a
.819b	10 05		bpl $81a2			bpl 	_NotRef
.819d	48		pha				pha
.819e	20 bd 83	jsr $83bd			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.81a1	68		pla				pla
.81a2					_NotRef:
.81a2	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.81a4	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.81a7	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.81aa	f0 03		beq $81af			beq 	_IntegerCode 				; if clear, then we have two integers
.81ac	4c 5c 8d	jmp $8d5c			jmp 	TypeError 					; anything else, type mismatch.
.81af					_IntegerCode:
.81af	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; check number < 32
.81b2	29 e0		and #$e0			and 	#$E0
.81b4	1d 11 06	ora $0611,x			ora 	NSMantissa1+1,x
.81b7	1d 19 06	ora $0619,x			ora 	NSMantissa2+1,x
.81ba	1d 21 06	ora $0621,x			ora 	NSMantissa3+1,x
.81bd	d0 13		bne $81d2			bne 	_SMExit0 					; if >= 32 it will always return zero.
.81bf					_SMLoop:
.81bf	de 09 06	dec $0609,x			dec 	NSMantissa0+1,x 			; predecrement, could do << 0
.81c2	30 11		bmi $81d5			bmi 	_SMExit 					; exit if done.
.81c4	28		plp				plp 								; restore direcition setting
.81c5	08		php				php
.81c6	90 05		bcc $81cd			bcc 	_SMRight
.81c8	20 95 86	jsr $8695			jsr 	NSMShiftLeft 				; shift left if CS
.81cb	80 f2		bra $81bf			bra 	_SMLoop
.81cd					_SMRight:
.81cd	20 a3 86	jsr $86a3			jsr 	NSMShiftRight 				; shift right if CC
.81d0	80 ed		bra $81bf			bra 	_SMLoop
.81d2					_SMExit0:
.81d2	20 80 86	jsr $8680			jsr 	NSMSetZero 					; return zero.
.81d5					_SMExit:
.81d5	28		plp				plp 								; throw direction
.81d6	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/binary/simple.asm

.81d7					AddTopTwoStack:
.81d7	18		clc				clc
.81d8	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.81db	7d 09 06	adc $0609,x			adc 		NSMantissa0+1,x
.81de	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.81e1	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.81e4	7d 11 06	adc $0611,x			adc 		NSMantissa1+1,x
.81e7	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.81ea	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.81ed	7d 19 06	adc $0619,x			adc 		NSMantissa2+1,x
.81f0	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.81f3	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.81f6	7d 21 06	adc $0621,x			adc 		NSMantissa3+1,x
.81f9	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.81fc	60		rts				rts
.81fd					SubTopTwoStack:
.81fd	38		sec				sec
.81fe	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8201	fd 09 06	sbc $0609,x			sbc 		NSMantissa0+1,x
.8204	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8207	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.820a	fd 11 06	sbc $0611,x			sbc 		NSMantissa1+1,x
.820d	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8210	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8213	fd 19 06	sbc $0619,x			sbc 		NSMantissa2+1,x
.8216	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8219	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.821c	fd 21 06	sbc $0621,x			sbc 		NSMantissa3+1,x
.821f	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8222	60		rts				rts
.8223					AddInteger:
.8223	fa		plx				plx
.8224	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8227	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.822a	0a		asl a				asl 	a 							; shift reference bit into sign bit
.822b	0a		asl a				asl 	a
.822c	10 05		bpl $8233			bpl 	_NotRef
.822e	48		pha				pha
.822f	20 bd 83	jsr $83bd			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8232	68		pla				pla
.8233					_NotRef:
.8233	0a		asl a				asl 	a 							; put MSB of type into A:7
.8234	30 0b		bmi $8241			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.8236	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8239	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.823c	f0 06		beq $8244			beq 	_IntegerCode 				; if clear, then we have two integers
.823e	4c 66 8d	jmp $8d66			jmp 	NotDoneError 							; otherwise at least one float.
.8241					_StringData:
.8241	4c 66 8d	jmp $8d66			jmp 	NotDoneError							; at least one string - don't know both are strings.
.8244					_IntegerCode:
.8244					AddCode:
.8244	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.8247	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.824a	10 8b		bpl $81d7			bpl 	AddTopTwoStack
>824c	db						.byte 	$DB 						; causes a break in the emulator
.824d					SubInteger:
.824d	fa		plx				plx
.824e	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8251	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8254	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8255	0a		asl a				asl 	a
.8256	10 05		bpl $825d			bpl 	_NotRef
.8258	48		pha				pha
.8259	20 bd 83	jsr $83bd			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.825c	68		pla				pla
.825d					_NotRef:
.825d	0a		asl a				asl 	a 							; put MSB of type into A:7
.825e	30 0b		bmi $826b			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.8260	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8263	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8266	f0 06		beq $826e			beq 	_IntegerCode 				; if clear, then we have two integers
.8268	4c 66 8d	jmp $8d66			jmp 	NotDoneError 							; otherwise at least one float.
.826b					_StringData:
.826b	4c 66 8d	jmp $8d66			jmp 	NotDoneError							; at least one string - don't know both are strings.
.826e					_IntegerCode:
.826e	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; negate the second value.
.8271	49 80		eor #$80			eor 	#$80
.8273	9d 01 06	sta $0601,x			sta 	NSStatus+1,x
.8276	80 cc		bra $8244			bra 	AddCode 					; and do the same code as add.
.8278					AndInteger:
.8278	fa		plx				plx
.8279	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.827c	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.827f	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8280	0a		asl a				asl 	a
.8281	10 05		bpl $8288			bpl 	_NotRef
.8283	48		pha				pha
.8284	20 bd 83	jsr $83bd			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8287	68		pla				pla
.8288					_NotRef:
.8288	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.828a	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.828d	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8290	f0 03		beq $8295			beq 	_IntegerCode 				; if clear, then we have two integers
.8292	4c 5c 8d	jmp $8d5c			jmp 	TypeError 					; anything else, type mismatch.
.8295					_IntegerCode:
.8295	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8298	3d 09 06	and $0609,x			and 		NSMantissa0+1,x
.829b	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.829e	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.82a1	3d 11 06	and $0611,x			and 		NSMantissa1+1,x
.82a4	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.82a7	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.82aa	3d 19 06	and $0619,x			and 		NSMantissa2+1,x
.82ad	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.82b0	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.82b3	3d 21 06	and $0621,x			and 		NSMantissa3+1,x
.82b6	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.82b9	60		rts				rts
.82ba					OraInteger:
.82ba	fa		plx				plx
.82bb	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.82be	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.82c1	0a		asl a				asl 	a 							; shift reference bit into sign bit
.82c2	0a		asl a				asl 	a
.82c3	10 05		bpl $82ca			bpl 	_NotRef
.82c5	48		pha				pha
.82c6	20 bd 83	jsr $83bd			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.82c9	68		pla				pla
.82ca					_NotRef:
.82ca	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.82cc	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.82cf	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.82d2	f0 03		beq $82d7			beq 	_IntegerCode 				; if clear, then we have two integers
.82d4	4c 5c 8d	jmp $8d5c			jmp 	TypeError 					; anything else, type mismatch.
.82d7					_IntegerCode:
.82d7	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.82da	1d 09 06	ora $0609,x			ora 		NSMantissa0+1,x
.82dd	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.82e0	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.82e3	1d 11 06	ora $0611,x			ora 		NSMantissa1+1,x
.82e6	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.82e9	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.82ec	1d 19 06	ora $0619,x			ora 		NSMantissa2+1,x
.82ef	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.82f2	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.82f5	1d 21 06	ora $0621,x			ora 		NSMantissa3+1,x
.82f8	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.82fb	60		rts				rts
.82fc					EorInteger:
.82fc	fa		plx				plx
.82fd	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8300	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8303	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8304	0a		asl a				asl 	a
.8305	10 05		bpl $830c			bpl 	_NotRef
.8307	48		pha				pha
.8308	20 bd 83	jsr $83bd			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.830b	68		pla				pla
.830c					_NotRef:
.830c	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.830e	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8311	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8314	f0 03		beq $8319			beq 	_IntegerCode 				; if clear, then we have two integers
.8316	4c 5c 8d	jmp $8d5c			jmp 	TypeError 					; anything else, type mismatch.
.8319					_IntegerCode:
.8319	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.831c	5d 09 06	eor $0609,x			eor 		NSMantissa0+1,x
.831f	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8322	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8325	5d 11 06	eor $0611,x			eor 		NSMantissa1+1,x
.8328	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.832b	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.832e	5d 19 06	eor $0619,x			eor 		NSMantissa2+1,x
.8331	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8334	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8337	5d 21 06	eor $0621,x			eor 		NSMantissa3+1,x
.833a	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.833d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/expression.asm


;******  Processing file: ./expressions/../generated/precedence.dat

.833e					PrecedenceLevel:
>833e	04					.byte	 4	; $00 <<
>833f	02					.byte	 2	; $01 <=
>8340	02					.byte	 2	; $02 <>
>8341	00					.byte	 0	; $03 !!3
>8342	00					.byte	 0	; $04 ><
>8343	02					.byte	 2	; $05 >=
>8344	04					.byte	 4	; $06 >>
>8345	00					.byte	 0	; $07 !!7
>8346	00					.byte	 0	; $08 !!8
>8347	00					.byte	 0	; $09 !!9
>8348	00					.byte	 0	; $0a !!10
>8349	00					.byte	 0	; $0b !!11
>834a	00					.byte	 0	; $0c !!12
>834b	00					.byte	 0	; $0d !!13
>834c	00					.byte	 0	; $0e !!14
>834d	00					.byte	 0	; $0f !!15
>834e	00					.byte	 0	; $10 @
>834f	00					.byte	 0	; $11 !!17
>8350	00					.byte	 0	; $12 !!18
>8351	00					.byte	 0	; $13 [
>8352	04					.byte	 4	; $14 \
>8353	00					.byte	 0	; $15 ]
>8354	01					.byte	 1	; $16 ^
>8355	00					.byte	 0	; $17 _
>8356	00					.byte	 0	; $18 `
>8357	00					.byte	 0	; $19 !!25
>8358	00					.byte	 0	; $1a !!26
>8359	00					.byte	 0	; $1b {
>835a	01					.byte	 1	; $1c |
>835b	00					.byte	 0	; $1d }
>835c	00					.byte	 0	; $1e ~
>835d	00					.byte	 0	; $1f [7m<7F>[m
>835e	00					.byte	 0	; $20
>835f	05					.byte	 5	; $21 !
>8360	00					.byte	 0	; $22 "
>8361	00					.byte	 0	; $23 #
>8362	05					.byte	 5	; $24 $
>8363	04					.byte	 4	; $25 %
>8364	01					.byte	 1	; $26 &
>8365	00					.byte	 0	; $27 '
>8366	00					.byte	 0	; $28 (
>8367	00					.byte	 0	; $29 )
>8368	04					.byte	 4	; $2a *
>8369	03					.byte	 3	; $2b +
>836a	00					.byte	 0	; $2c ,
>836b	03					.byte	 3	; $2d -
>836c	00					.byte	 0	; $2e .
>836d	04					.byte	 4	; $2f /
>836e	00					.byte	 0	; $30 0
>836f	00					.byte	 0	; $31 1
>8370	00					.byte	 0	; $32 2
>8371	00					.byte	 0	; $33 3
>8372	00					.byte	 0	; $34 4
>8373	00					.byte	 0	; $35 5
>8374	00					.byte	 0	; $36 6
>8375	00					.byte	 0	; $37 7
>8376	00					.byte	 0	; $38 8
>8377	00					.byte	 0	; $39 9
>8378	00					.byte	 0	; $3a :
>8379	00					.byte	 0	; $3b ;
>837a	02					.byte	 2	; $3c <
>837b	02					.byte	 2	; $3d =
>837c	02					.byte	 2	; $3e >
>837d	05					.byte	 5	; $3f ?

;******  Return to file: ./expressions/expression.asm

.837e					EvaluateExpressionAt0:
.837e	a2 00		ldx #$00			ldx 	#0 							; bottom stack level
.8380					EvaluateExpression:
.8380	a9 00		lda #$00			lda 	#0 							; lowest precedence level
.8382					EvaluateExpressionAtPrecedence:
.8382	48		pha				pha 								; save precedence level
.8383	20 0a 85	jsr $850a			jsr 	EvaluateTerm 				; evaluate term into level X.
.8386	68		pla				pla 								; restore precedence level.
.8387					_EXPRLoop:
.8387	85 36		sta $36				sta 	zTemp0 						; save current precedence level.
.8389	b1 30		lda ($30),y			lda 	(codePtr),y
.838b	c9 40		cmp #$40			cmp		#$40 						; if >= $40 cannot be an operator
.838d	b0 25		bcs $83b4			bcs 	_EXPRExit
.838f	da		phx				phx 								; read the operator precedence
.8390	aa		tax				tax
.8391	bd 3e 83	lda $833e,x			lda 	PrecedenceLevel,x
.8394	fa		plx				plx
.8395	c9 00		cmp #$00			cmp 	#0							; if zero exit (not an operator)
.8397	f0 1b		beq $83b4			beq 	_EXPRExit
.8399	85 37		sta $37				sta 	zTemp0+1 					; save operator precedence level.
.839b	a5 36		lda $36				lda 	zTemp0 						; compare current precedence vs. operator precedence
.839d	c5 37		cmp $37				cmp 	zTemp0+1
.839f	b0 13		bcs $83b4			bcs		_EXPRExit 					; if current >= operator exit
.83a1	48		pha				pha 								; save current precedence.
.83a2	b1 30		lda ($30),y			lda 	(codePtr),y
.83a4	c8		iny				iny
.83a5	48		pha				pha
.83a6	a5 37		lda $37				lda 	zTemp0+1 					; get operator precedence level
.83a8	e8		inx				inx 								; work out the right hand side.
.83a9	20 82 83	jsr $8382			jsr 	EvaluateExpressionAtPrecedence
.83ac	ca		dex				dex
.83ad	68		pla				pla 								; get operator, call the code.
.83ae	20 b7 83	jsr $83b7			jsr 	_EXPRCaller
.83b1	68		pla				pla 								; restore precedence level
.83b2	80 d3		bra $8387			bra 	_EXPRLoop 					; and go round.
.83b4					_EXPRExit:
.83b4	a5 36		lda $36				lda 	zTemp0 						; A = current precedence level.
.83b6	60		rts				rts
.83b7					_EXPRCaller:
.83b7	da		phx				phx 								; save on stack, first thing is to restore it
.83b8	0a		asl a				asl 	a 							; double so can use vectors into X
.83b9	aa		tax				tax
.83ba	7c 23 80	jmp ($8023,x)			jmp 	(VectorSetPunc,x) 			; and go to the code.

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/term/dereference.asm

.83bd					DereferenceTopTwo:
.83bd	e8		inx				inx
.83be	20 c2 83	jsr $83c2			jsr 	Dereference 				; deref x+1
.83c1	ca		dex				dex  								; falls through to deref x
.83c2					Dereference:
.83c2	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get the status byte
.83c5	29 20		and #$20			and 	#NSBIsReference 			; shift sign bit to carry, reference to bit 7
.83c7	f0 57		beq $8420			beq 	_DRFExit 					; not a reference
.83c9	5a		phy				phy
.83ca	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy address to dereference into zTemp0
.83cd	85 36		sta $36				sta 	zTemp0
.83cf	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.83d2	85 37		sta $37				sta 	zTemp0+1
.83d4	9e 10 06	stz $0610,x			stz 	NSMantissa1,x 				; clear second byte.
.83d7	b2 36		lda ($36)			lda 	(zTemp0) 					; do the first byte
.83d9	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.83dc	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get status byte.
.83df	29 18		and #$18			and 	#NSBTypeMask 				; what type is it ?
.83e1	c9 10		cmp #$10			cmp 	#NSTString 					; if string, dereference two
.83e3	f0 0f		beq $83f4			beq 	_DRFDereferenceTwo
.83e5	c9 08		cmp #$08			cmp 	#NSTFloat 					; if float, do full dereference.
.83e7	f0 39		beq $8422			beq 	_DRFFull
.83e9	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be integer - how many bytes ?
.83ec	29 03		and #$03			and 	#3
.83ee	f0 32		beq $8422			beq 	_DRFFull 					; the whole word
.83f0	c9 01		cmp #$01			cmp 	#1 							; is it 10 (e.g. 2 bytes)
.83f2	f0 07		beq $83fb			beq		_DRFClear23 				; no, one byte, clear 2 & 3 and exit
.83f4					_DRFDereferenceTwo:
.83f4	a0 01		ldy #$01			ldy 	#1
.83f6	b1 36		lda ($36),y			lda 	(zTemp0),y
.83f8	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.83fb					_DRFClear23:
.83fb	9e 18 06	stz $0618,x			stz 	NSMantissa2,x 				; clear upper bytes, only read 1 or 2 bytes
.83fe	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.8401	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; make it a value of that type.
.8404	29 18		and #$18			and 	#NSBTypeMask
.8406	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8409	c9 10		cmp #$10			cmp 	#NSTString  				; is it a string
.840b	d0 12		bne $841f			bne 	_DRFNotString
.840d	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; check address is zero
.8410	1d 10 06	ora $0610,x			ora 	NSMantissa1,x
.8413	d0 0a		bne $841f			bne 	_DRFNotString
.8415	a9 21		lda #$21			lda 	#_DRFNullString & $FF 		; if so, return reference to ""
.8417	9d 08 06	sta $0608,x			sta 	NSMantissa0,X
.841a	a9 84		lda #$84			lda 	#_DRFNullString >> 8
.841c	9d 10 06	sta $0610,x			sta 	NSMantissa1,X
.841f					_DRFNotString
.841f	7a		ply				ply 								; restore Y and exit
.8420					_DRFExit:
.8420	60		rts				rts
.8421					_DRFNullString:
>8421	00						.byte 	0
.8422					_DRFFull:
.8422	a0 01		ldy #$01			ldy 	#1 							; get remaining 3 bytes.
.8424	b1 36		lda ($36),y			lda 	(zTemp0),y
.8426	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8429	c8		iny				iny
.842a	b1 36		lda ($36),y			lda 	(zTemp0),y
.842c	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.842f	c8		iny				iny
.8430	b1 36		lda ($36),y			lda 	(zTemp0),y
.8432	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8435	9e 28 06	stz $0628,x			stz 	NSExponent,x 				; clear exponent.
.8438	bd 00 06	lda $0600,x			lda		NSStatus,x 					; see if type is integer
.843b	29 18		and #$18			and 	#NSBTypeMask  				; type information only
.843d	9d 00 06	sta $0600,x			sta 	NSStatus,x 					; update it back.
.8440	f0 06		beq $8448			beq 	_DRFNoExponent
.8442	c8		iny				iny 								; if not, read the exponent as well.
.8443	b1 36		lda ($36),y			lda 	(zTemp0),y
.8445	9d 28 06	sta $0628,x			sta 	NSExponent,x
.8448					_DRFNoExponent:
.8448	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; is the most significant bit set ?
.844b	10 0d		bpl $845a			bpl 	_DRFExit2 					; if not, then exit.
.844d	29 7f		and #$7f			and 	#$7F 						; clear that bit.
.844f	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8452	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; set the sign flag
.8455	09 80		ora #$80			ora 	#NSBIsNegative
.8457	9d 00 06	sta $0600,x			sta 	NSStatus,x
.845a					_DRFExit2:
.845a	7a		ply				ply
.845b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/term/number.asm

=1					ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2					ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
.845c					EncodeNumberStart:
.845c	38		sec				sec
.845d	80 01		bra $8460			bra 	EncodeNumberContinue+1
.845f					EncodeNumberContinue:
.845f	18		clc				clc
.8460	08		php				php 								; save reset.
.8461	c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.8463	f0 0b		beq $8470			beq 	_ENIsOkay
.8465	c9 30		cmp #$30			cmp 	#"0"
.8467	90 04		bcc $846d			bcc 	_ENBadNumber
.8469	c9 3a		cmp #$3a			cmp 	#"9"+1
.846b	90 03		bcc $8470			bcc 	_ENIsOkay
.846d					_ENBadNumber:
.846d	28		plp				plp 								; throw saved reset
.846e					_ENFail:
.846e	18		clc				clc 								; not allowed
.846f	60		rts				rts
.8470					_ENIsOkay:
.8470	28		plp				plp 								; are we restarting
.8471	90 0c		bcc $847f			bcc 	_ENNoRestart
.8473					_ENStartEncode:
.8473	29 0f		and #$0f			and 	#15 						; put digit in mantissa
.8475	20 82 86	jsr $8682			jsr 	NSMSetByte
.8478	a9 01		lda #$01			lda 	#ESTA_Low
.847a					_ENExitChange:
.847a	8d 05 07	sta $0705			sta 	EncodeState 				; save new state
.847d	38		sec				sec
.847e	60		rts				rts
.847f					_ENNoRestart:
.847f	48		pha				pha 								; save on stack.
.8480	ad 05 07	lda $0705			lda 	EncodeState 				; get current state
.8483	c9 01		cmp #$01			cmp 	#ESTA_Low
.8485	f0 05		beq $848c			beq  	_ESTALowState
.8487	c9 02		cmp #$02			cmp 	#ESTA_High
.8489	f0 23		beq $84ae			beq 	_ESTAHighState
>848b	db						.byte 	$DB 						; causes a break in the emulator
.848c					_ESTALowState:
.848c	68		pla				pla 								; get value back
.848d	c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.848f	f0 27		beq $84b8			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.8491	29 0f		and #$0f			and 	#15 						; make digit
.8493	85 36		sta $36				sta 	zTemp0 						; save it.
.8495	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.8498	0a		asl a				asl 	a
.8499	0a		asl a				asl 	a
.849a	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.849d	0a		asl a				asl 	a
.849e	65 36		adc $36				adc 	zTemp0
.84a0	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.84a3	c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.84a5	90 05		bcc $84ac			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.84a7	a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.84a9	8d 05 07	sta $0705			sta 	EncodeState
.84ac					_ESTANoSwitch:
.84ac	38		sec				sec
.84ad	60		rts				rts
.84ae					_ESTAHighState:
.84ae	68		pla				pla 								; get value back
.84af	c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.84b1	f0 05		beq $84b8			beq 	_ESTASwitchFloat
.84b3	20 b9 84	jsr $84b9			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.84b6	38		sec				sec
.84b7	60		rts				rts
.84b8					_ESTASwitchFloat:
>84b8	db						.byte 	$DB 						; causes a break in the emulator
.84b9					ESTAShiftDigitIntoMantissa:
.84b9	29 0f		and #$0f			and 	#15 						; save digit
.84bb	48		pha				pha
.84bc	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; push mantissa on stack
.84bf	48		pha				pha
.84c0	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.84c3	48		pha				pha
.84c4	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.84c7	48		pha				pha
.84c8	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.84cb	48		pha				pha
.84cc	20 95 86	jsr $8695			jsr 	NSMShiftLeft 				; x 2
.84cf	20 95 86	jsr $8695			jsr 	NSMShiftLeft 				; x 4
.84d2	18		clc				clc 								; pop mantissa and add
.84d3	68		pla				pla
.84d4	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.84d7	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.84da	68		pla				pla
.84db	7d 10 06	adc $0610,x			adc 	NSMantissa1,x
.84de	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.84e1	68		pla				pla
.84e2	7d 18 06	adc $0618,x			adc 	NSMantissa2,x
.84e5	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.84e8	68		pla				pla
.84e9	7d 20 06	adc $0620,x			adc 	NSMantissa3,x
.84ec	9d 20 06	sta $0620,x			sta 	NSMantissa3,x 				; x 5
.84ef	20 95 86	jsr $8695			jsr 	NSMShiftLeft 				; x 10
.84f2	68		pla				pla 								; add digit
.84f3	18		clc				clc
.84f4	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.84f7	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.84fa	90 0d		bcc $8509			bcc 	_ESTASDExit
.84fc	fe 10 06	inc $0610,x			inc 	NSMantissa1,x
.84ff	d0 08		bne $8509			bne 	_ESTASDExit
.8501	fe 18 06	inc $0618,x			inc 	NSMantissa2,x
.8504	d0 03		bne $8509			bne 	_ESTASDExit
.8506	fe 20 06	inc $0620,x			inc 	NSMantissa3,x
.8509					_ESTASDExit:
.8509	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/term/term.asm

.850a					EvaluateTerm:
.850a	b1 30		lda ($30),y			lda 	(codePtr),y
.850c	30 18		bmi $8526			bmi 	_ETCheckUnary 				; unary function ? (text ones)
.850e	c9 40		cmp #$40			cmp 	#$40 						; 40-7F => identifier reference
.8510	b0 6e		bcs $8580			bcs 	_ETVariable
.8512	c9 30		cmp #$30			cmp 	#'0' 						; is it a number
.8514	90 6e		bcc $8584			bcc 	_ETPuncUnary 				; if not it might be a punctuation unary.
.8516	c9 3a		cmp #$3a			cmp 	#'9'+1
.8518	b0 6a		bcs $8584			bcs 	_ETPuncUnary
.851a	20 5c 84	jsr $845c			jsr 	EncodeNumberStart 			; can't fail as it's 0-9 !
.851d					_ETNumber:
.851d	c8		iny				iny 								; keep encoding until we have the numbers
.851e	b1 30		lda ($30),y			lda 	(codePtr),y
.8520	20 5f 84	jsr $845f			jsr 	EncodeNumberContinue
.8523	b0 f8		bcs $851d			bcs 	_ETNumber 					; go back if accepted.
.8525	60		rts				rts
.8526					_ETCheckUnary:
.8526	c9 ff		cmp #$ff			cmp 	#KWC_STRING 				; string token
.8528	f0 40		beq $856a			beq 	_ETString
.852a	c9 fe		cmp #$fe			cmp 	#KWC_HEXCONST 				; hex constant.
.852c	f0 11		beq $853f			beq 	_ETHexConstant
.852e	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; check it actually is a unary function
.8530	90 0a		bcc $853c			bcc 	_ETSyntaxError
.8532	c9 9a		cmp #$9a			cmp 	#KWC_LAST_UNARY+1
.8534	b0 06		bcs $853c			bcs 	_ETSyntaxError
.8536	da		phx				phx 								; push X on the stack
.8537	0a		asl a				asl 	a 							; put vector x 2 into X
.8538	aa		tax				tax
.8539	7c a3 80	jmp ($80a3,x)			jmp 	(VectorSet0,x) 				; and do it.
.853c					_ETSyntaxError:
.853c	4c 52 8d	jmp $8d52			jmp 	SyntaxError
.853f					_ETHexConstant:
.853f	c8		iny				iny 								; skip #
.8540	c8		iny				iny 								; skip count
.8541	20 80 86	jsr $8680			jsr 	NSMSetZero 					; clear result
.8544					_ETHLoop:
.8544	b1 30		lda ($30),y			lda 	(codePtr),y
.8546	c8		iny				iny 								; and consume
.8547	c9 00		cmp #$00			cmp 	#0 							; exit if zero
.8549	f0 1e		beq $8569			beq 	_ETHExit
.854b	48		pha				pha 								; save on stack.
.854c	20 95 86	jsr $8695			jsr 	NSMShiftLeft 				; x 2
.854f	20 95 86	jsr $8695			jsr 	NSMShiftLeft 				; x 4
.8552	20 95 86	jsr $8695			jsr 	NSMShiftLeft 				; x 8
.8555	20 95 86	jsr $8695			jsr 	NSMShiftLeft 				; x 16
.8558	68		pla				pla 								; ASCII
.8559	c9 41		cmp #$41			cmp 	#'A'
.855b	90 02		bcc $855f			bcc 	_ETHNotChar
.855d	e9 07		sbc #$07			sbc 	#7
.855f					_ETHNotChar:
.855f	29 0f		and #$0f			and 	#15 						; digit now
.8561	1d 08 06	ora $0608,x			ora 	NSMantissa0,x 				; put in LS Nibble
.8564	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8567	80 db		bra $8544			bra 	_ETHLoop 					; go round.
.8569					_ETHExit:
.8569	60		rts				rts
.856a					_ETString:
.856a	c8		iny				iny 								; look at length
.856b	b1 30		lda ($30),y			lda 	(codePtr),y
.856d	48		pha				pha
.856e	c8		iny				iny 								; first character
.856f	20 f9 86	jsr $86f9			jsr 	MemoryInline 				; put address of string at (codePtr),y on stack
.8572	68		pla				pla 								; restore count and save
.8573	85 36		sta $36				sta 	zTemp0
.8575	98		tya				tya 								; add length to Y to skip it.
.8576	18		clc				clc
.8577	65 36		adc $36				adc 	zTemp0
.8579	a8		tay				tay
.857a	a9 10		lda #$10			lda 	#NSTString 					; mark as string
.857c	9d 00 06	sta $0600,x			sta 	NSStatus,x
.857f	60		rts				rts
.8580					_ETVariable:
>8580	db						.byte 	$DB 						; causes a break in the emulator
.8581	4c ff ff	jmp $ffff			jmp 	$FFFF
.8584					_ETPuncUnary:
.8584	c8		iny				iny 								; consume the unary character
.8585	c9 2d		cmp #$2d			cmp 	#KWD_MINUS 					; unary minus
.8587	f0 31		beq $85ba			beq 	_ETUnaryNegate
.8589	c9 10		cmp #$10			cmp 	#KWD_AT 					; @ reference -> constant
.858b	f0 3d		beq $85ca			beq 	_ETDereference
.858d	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; parenthesis
.858f	f0 58		beq $85e9			beq 	_ETParenthesis
.8591	c9 24		cmp #$24			cmp 	#KWD_DOLLAR
.8593	f0 43		beq $85d8			beq 	_ETStringReference
.8595	64 36		stz $36				stz 	zTemp0 						; zTemp0 is the indirection level.
.8597	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; byte indirection (0) ?
.8599	f0 06		beq $85a1			beq 	_ETIndirection
.859b	e6 36		inc $36				inc 	zTemp0
.859d	c9 21		cmp #$21			cmp 	#KWD_PLING					; word indirection (1) \
.859f	d0 9b		bne $853c			bne 	_ETSyntaxError
.85a1					_ETIndirection:
.85a1	a5 36		lda $36				lda 	zTemp0 						; push indirection amount (0-1) => (1-2) on the stack
.85a3	1a		inc a				inc 	a
.85a4	48		pha				pha
.85a5	20 0a 85	jsr $850a			jsr 	EvaluateTerm				; evaluate the term
.85a8	20 c2 83	jsr $83c2			jsr 	Dereference 				; dereference it.
.85ab	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a +ve integer.
.85ae	d0 07		bne $85b7			bne 	_ETTypeMismatch
.85b0	68		pla				pla 								; indirection 1-2
.85b1	09 20		ora #$20			ora 	#NSBIsReference 			; make it a reference.
.85b3	9d 00 06	sta $0600,x			sta 	NSStatus,x
.85b6	60		rts				rts
.85b7					_ETTypeMismatch:
.85b7	4c 5c 8d	jmp $8d5c			jmp 	TypeError
.85ba					_ETUnaryNegate:
.85ba	20 0a 85	jsr $850a			jsr 	EvaluateTerm				; evaluate the term
.85bd	20 c2 83	jsr $83c2			jsr 	Dereference 				; dereference it.
.85c0	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a number
.85c3	29 10		and #$10			and 	#NSTString
.85c5	d0 f0		bne $85b7			bne 	_ETTypeMismatch
.85c7	4c 4e 86	jmp $864e			jmp 	NSMNegate  					; just toggles the sign bit.
.85ca					_ETDereference:
.85ca	20 0a 85	jsr $850a			jsr 	EvaluateTerm				; evaluate the term
.85cd	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a reference
.85d0	29 20		and #$20			and 	#NSBIsReference
.85d2	f0 e3		beq $85b7			beq 	_ETTypeMismatch
.85d4	9e 00 06	stz $0600,x			stz 	NSStatus,x 					; make it an integer address
.85d7	60		rts				rts
.85d8					_ETStringReference:
.85d8	20 0a 85	jsr $850a			jsr 	EvaluateTerm				; evaluate the term
.85db	20 c2 83	jsr $83c2			jsr 	Dereference 				; dereference it.
.85de	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a +ve integer.
.85e1	d0 d4		bne $85b7			bne 	_ETTypeMismatch
.85e3	a9 10		lda #$10			lda 	#NSTString 					; make it a string
.85e5	9d 00 06	sta $0600,x			sta 	NSStatus,x
.85e8	60		rts				rts
.85e9					_ETParenthesis:
.85e9	20 80 83	jsr $8380			jsr 	EvaluateExpression 			; evaluate here, from lowest precedence
.85ec	20 8a 8b	jsr $8b8a			jsr 	CheckRightBracket 			; check for )
.85ef	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/utility/exprhelper.asm

.85f0					EvaluateValue:
.85f0	48		pha				pha
.85f1	20 7e 83	jsr $837e			jsr		EvaluateExpressionAt0 		; expression
.85f4	20 c2 83	jsr $83c2			jsr 	Dereference					; derefernce it
.85f7	68		pla				pla
.85f8	60		rts				rts
.85f9					EvaluateNumber:
.85f9	20 f0 85	jsr $85f0			jsr 	EvaluateValue 				; get a value
.85fc	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if string.
.85ff	29 10		and #$10			and 	#NSBIsString
.8601	d0 16		bne $8619			bne 	HelperTypeError
.8603	60		rts				rts
.8604					EvaluateString:
.8604	20 f0 85	jsr $85f0			jsr 	EvaluateValue 				; get a value
.8607	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if string.
.860a	29 10		and #$10			and 	#NSBIsString
.860c	f0 0b		beq $8619			beq 	HelperTypeError
.860e					CopyAddressToTemp0:
.860e	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy address -> zTemp0
.8611	85 36		sta $36				sta 	zTemp0
.8613	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8616	85 37		sta $37				sta 	zTemp0+1
.8618	60		rts				rts
.8619					HelperTypeError:
.8619	4c 5c 8d	jmp $8d5c			jmp 	TypeError
.861c					EvaluateInteger:
.861c	20 f9 85	jsr $85f9			jsr 	EvaluateNumber
.861f	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check exponent is zero
.8622	d0 0a		bne $862e			bne 	HelperValueError 			; if not, it's a float.
.8624	60		rts				rts
.8625					EvaluateUnsignedInteger:
.8625	20 1c 86	jsr $861c			jsr 	EvaluateInteger 			; check integer is +ve
.8628	bd 00 06	lda $0600,x			lda 	NSStatus,x
.862b	30 01		bmi $862e			bmi 	HelperValueError
.862d	60		rts				rts
.862e					HelperValueError:
.862e	4c 61 8d	jmp $8d61			jmp 	ArgumentError
.8631					Evaluate16BitInteger:
.8631	20 25 86	jsr $8625			jsr	 	EvaluateUnsignedInteger		; get integer
.8634	bd 20 06	lda $0620,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.8637	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.863a	d0 f2		bne $862e			bne 	HelperValueError
.863c	60		rts				rts
.863d					Evaluate8BitInteger:
.863d	20 25 86	jsr $8625			jsr	 	EvaluateUnsignedInteger 	; get an integer
.8640	d0 ec		bne $862e			bne 	HelperValueError
.8642	bd 20 06	lda $0620,x			lda 	NSMantissa3,x	 			; bytes 1, 2 & 3 must be zero
.8645	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.8648	1d 10 06	ora $0610,x			ora 	NSMantissa1,x
.864b	d0 e1		bne $862e			bne 	HelperValueError
.864d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./expressions/utility/utility.asm

.864e					NSMNegate:
.864e	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8651	49 80		eor #$80			eor 	#NSBIsNegative
.8653	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8656	60		rts				rts
.8657					NSMShiftUpTwo:
.8657	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.865a	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.865d	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8660	9d 12 06	sta $0612,x			sta 	NSMantissa1+2,x
.8663	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.8666	9d 1a 06	sta $061a,x			sta 	NSMantissa2+2,x
.8669	bd 20 06	lda $0620,x			lda 	NSMantissa3,x
.866c	9d 22 06	sta $0622,x			sta 	NSMantissa3+2,x
.866f	bd 28 06	lda $0628,x			lda 	NSExponent,x
.8672	9d 2a 06	sta $062a,x			sta 	NSExponent+2,x
.8675	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8678	9d 02 06	sta $0602,x			sta 	NSStatus+2,x
.867b	60		rts				rts
.867c					NSMSetZeroMantissaOnly:
.867c	a9 00		lda #$00			lda 	#0
.867e	80 08		bra $8688			bra 	NSMSetMantissa
.8680					NSMSetZero:
.8680	a9 00		lda #$00			lda 	#0
.8682					NSMSetByte:
.8682	9e 28 06	stz $0628,x			stz 	NSExponent,x 				; zero exponent, as integer.
.8685	9e 00 06	stz $0600,x			stz 	NSStatus,x 					; status zero (integer)
.8688					NSMSetMantissa:
.8688	9d 08 06	sta $0608,x			sta 	NSMantissa0,x 				; mantissa
.868b	9e 10 06	stz $0610,x			stz 	NSMantissa1,x
.868e	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.8691	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.8694	60		rts				rts
.8695					NSMShiftLeft:
.8695	18		clc				clc
.8696					NSMRotateLeft:
.8696	3e 08 06	rol $0608,x			rol 	NSMantissa0,x
.8699	3e 10 06	rol $0610,x			rol		NSMantissa1,x
.869c	3e 18 06	rol $0618,x			rol		NSMantissa2,x
.869f	3e 20 06	rol $0620,x			rol		NSMantissa3,x
.86a2	60		rts				rts
.86a3					NSMShiftRight:
.86a3	5e 20 06	lsr $0620,x			lsr 	NSMantissa3,x
.86a6	7e 18 06	ror $0618,x			ror		NSMantissa2,x
.86a9	7e 10 06	ror $0610,x			ror		NSMantissa1,x
.86ac	7e 08 06	ror $0608,x			ror		NSMantissa0,x
.86af	60		rts				rts
.86b0					NSMIsZero:
.86b0	bd 20 06	lda $0620,x			lda 	NSMantissa3,x
.86b3	1d 18 06	ora $0618,x			ora		NSMantissa2,x
.86b6	1d 10 06	ora $0610,x			ora		NSMantissa1,x
.86b9	1d 08 06	ora $0608,x			ora		NSMantissa0,x
.86bc	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./generated/errors.asm

.8d52					SyntaxError:
.8d52	a9 02		lda #$02		lda	#2
.8d54	4c 1f 80	jmp $801f		jmp	ErrorHandler
.8d57					RangeError:
.8d57	a9 04		lda #$04		lda	#4
.8d59	4c 1f 80	jmp $801f		jmp	ErrorHandler
.8d5c					TypeError:
.8d5c	a9 05		lda #$05		lda	#5
.8d5e	4c 1f 80	jmp $801f		jmp	ErrorHandler
.8d61					ArgumentError:
.8d61	a9 07		lda #$07		lda	#7
.8d63	4c 1f 80	jmp $801f		jmp	ErrorHandler
.8d66					NotDoneError:
.8d66	a9 0c		lda #$0c		lda	#12
.8d68	4c 1f 80	jmp $801f		jmp	ErrorHandler
.8d6b					ErrorText:
>8d6b	42 72 65 61 6b 00			.text	"Break",0
>8d71	53 79 6e 74 61 78 20 65			.text	"Syntax error",0
>8d79	72 72 6f 72 00
>8d7e	44 69 76 69 73 69 6f 6e			.text	"Division by zero",0
>8d86	20 62 79 20 7a 65 72 6f 00
>8d8f	4f 75 74 20 6f 66 20 52			.text	"Out of Range",0
>8d97	61 6e 67 65 00
>8d9c	54 79 70 65 20 6d 69 73			.text	"Type mismatch",0
>8da4	6d 61 74 63 68 00
>8daa	4f 75 74 20 6f 66 20 6d			.text	"Out of memory",0
>8db2	65 6d 6f 72 79 00
>8db8	49 6c 6c 65 67 61 6c 20			.text	"Illegal argument",0
>8dc0	61 72 67 75 6d 65 6e 74 00
>8dc9	53 74 6f 70 00				.text	"Stop",0
>8dce	53 74 72 69 6e 67 20 74			.text	"String too long",0
>8dd6	6f 6f 20 6c 6f 6e 67 00
>8dde	41 73 73 65 72 74 69 6f			.text	"Assertion failed",0
>8de6	6e 20 66 61 69 6c 65 64 00
>8def	4f 75 74 20 6f 66 20 64			.text	"Out of data",0
>8df7	61 74 61 00
>8dfb	55 6e 69 6d 70 6c 65 6d			.text	"Unimplemented",0
>8e03	65 6e 74 65 64 00

;******  Return to file: _basic.asm


;******  Processing file: ./memory.flat/memory.asm

.86bd					MemoryNew:
.86bd	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.86bf	85 30		sta $30				sta 	codePtr
.86c1	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.86c3	85 31		sta $31				sta 	codePtr+1
.86c5	a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.86c7	92 30		sta ($30)			sta 	(codePtr)
.86c9	60		rts				rts
.86ca					MemoryAppend:
.86ca	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.86cc	85 30		sta $30				sta 	codePtr
.86ce	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.86d0	85 31		sta $31				sta 	codePtr+1
.86d2					_MAFindEnd:
.86d2	b2 30		lda ($30)			lda 	(codePtr)
.86d4	f0 0d		beq $86e3			beq 	_MAFoundEnd
.86d6	18		clc				clc
.86d7	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.86d9	65 30		adc $30				adc 	codePtr
.86db	85 30		sta $30				sta 	codePtr
.86dd	90 02		bcc $86e1			bcc 	_CREExit
.86df	e6 31		inc $31				inc 	codePtr+1
.86e1					_CREExit:
.86e1	80 ef		bra $86d2			bra 	_MAFindEnd
.86e3					_MAFoundEnd:
.86e3	ac 06 07	ldy $0706			ldy 	tokenOffset 				; bytes to copy
.86e6	c0 04		cpy #$04			cpy 	#4 							; blank line
.86e8	f0 0e		beq $86f8			beq 	_MANoLine
.86ea	a9 00		lda #$00			lda 	#0 							; end of program
.86ec	91 30		sta ($30),y			sta 	(codePtr),y
.86ee					_MACopy:
.86ee	88		dey				dey
.86ef	b9 06 07	lda $0706,y			lda 	tokenOffset,y
.86f2	91 30		sta ($30),y			sta 	(codePtr),y
.86f4	c0 00		cpy #$00			cpy 	#0
.86f6	d0 f6		bne $86ee			bne 	_MACopy
.86f8					_MANoLine:
.86f8	60		rts				rts
.86f9					MemoryInline:
.86f9	98		tya				tya 								; put address into stack,x
.86fa	18		clc				clc
.86fb	65 30		adc $30				adc 	codePtr
.86fd	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8700	a5 31		lda $31				lda 	codePtr+1
.8702	69 00		adc #$00			adc 	#0
.8704	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8707	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.870a	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.870d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./memory.flat/variable.asm

.870e					VariableOpen:
.870e	60		rts				rts
.870f					VariableClose:
.870f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./tokeniser/backload.asm

.8710					BackloadProgram:
.8710	a2 ff		ldx #$ff			ldx 	#$FF
.8712	ad fa ff	lda $fffa			lda 	$FFFA 						; read first byte
.8715	30 1e		bmi $8735			bmi 	_BPExit
.8717					_BPCopy:
.8717	e8		inx				inx  								; copy byte in
.8718	9d 06 08	sta $0806,x			sta 	lineBuffer,x
.871b	9e 07 08	stz $0807,x			stz 	lineBuffer+1,x
.871e	ad fa ff	lda $fffa			lda 	$FFFA 						; read next byte
.8721	30 0a		bmi $872d			bmi 	_BPEndLine 					; -ve = EOL
.8723	c9 09		cmp #$09			cmp 	#9 							; handle TAB
.8725	d0 02		bne $8729			bne 	_BPNotTab
.8727	a9 20		lda #$20			lda 	#' '
.8729					_BPNotTab:
.8729	c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.872b	b0 ea		bcs $8717			bcs 	_BPCopy
.872d					_BPEndLine:
.872d	20 05 89	jsr $8905			jsr 	TokeniseLine 				; tokenise the line.
.8730	20 ca 86	jsr $86ca			jsr 	MemoryAppend 				; append to current program
.8733	80 db		bra $8710			bra 	BackloadProgram
.8735					_BPExit:
.8735	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./tokeniser/searchtokens.asm

.8736					TokeniseSearchTable:
.8736	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token.
.8738	85 36		sta $36				sta 	zTemp0
.873a	a0 00		ldy #$00			ldy 	#0
.873c	a9 80		lda #$80			lda 	#$80 						; token #
.873e	85 38		sta $38				sta 	zTemp1
.8740					_TSTLoop:
.8740	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.8742	30 49		bmi $878d			bmi 	_TSTFail 					; -ve = end of table
.8744	f0 2e		beq $8774			beq 	_TSTNext 					; zero, check next it's a dummy
.8746	c8		iny				iny 								; get the hash
.8747	b1 36		lda ($36),y			lda 	(zTemp0),y
.8749	88		dey				dey
.874a	cd 03 07	cmp $0703			cmp 	identHash 					; check they match, if not go to next
.874d	d0 25		bne $8774			bne 	_TSTNext
.874f	ad 02 07	lda $0702			lda 	identTypeEnd 				; length of identifier
.8752	38		sec				sec
.8753	ed 00 07	sbc $0700			sbc 	identStart
.8756	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; no match, then return.
.8758	d0 1a		bne $8774			bne 	_TSTNext
.875a	5a		phy				phy 								; save Y , we might fail
.875b	c8		iny				iny 								; point to text
.875c	c8		iny				iny
.875d	ae 00 07	ldx $0700			ldx 	identStart 					; offset in line buffer in X
.8760					_TSTCompareName:
.8760	bd 06 08	lda $0806,x			lda 	lineBuffer,x 				; compare text.
.8763	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.8765	d0 0c		bne $8773			bne 	_TSTNextPullY 				; fail, pullY and do next
.8767	e8		inx				inx
.8768	c8		iny				iny
.8769	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; complete match.
.876c	d0 f2		bne $8760			bne 	_TSTCompareName
.876e	7a		ply				ply 								; throw Y
.876f	a5 38		lda $38				lda 	zTemp1 						; get token #
.8771	38		sec				sec 								; return with CS = passed.
.8772	60		rts				rts
.8773					_TSTNextPullY:
.8773	7a		ply				ply 								; restore current, fall through.
.8774					_TSTNext:
.8774	e6 38		inc $38				inc 	zTemp1 						; token counter
.8776	98		tya				tya
.8777	18		clc				clc
.8778	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.877a	1a		inc a				inc 	a 							; +1
.877b	1a		inc a				inc 	a 							; +2
.877c	a8		tay				tay
.877d	10 c1		bpl $8740			bpl 	_TSTLoop 					; if Y < $80 loop back
.877f	98		tya				tya 								; add Y to zTemp0 and reset Y
.8780	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.8782	18		clc				clc  								; but have tables > 255 bytes
.8783	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.8785	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.8787	90 b7		bcc $8740			bcc 	_TSTLoop
.8789	e6 37		inc $37				inc 	zTemp0+1
.878b	80 b3		bra $8740			bra 	_TSTLoop
.878d					_TSTFail:
.878d	18		clc				clc
.878e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./tokeniser/tokenise.asm


;******  Processing file: ./tokeniser/../generated/kwdtext.dat

.878f					KeywordSet0:
>878f	00 65					.text	0,$65,""               ; $80 !0:EOF
>8791	00 58					.text	0,$58,""               ; $81 !1:SH1
>8793	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>8795	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $83 ABS(
>879b	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $84 ALLOC(
>87a3	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $85 ASC(
>87a9	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $86 CHR$(
>87b0	04 f4 44 45 43 28			.text	4,$f4,"DEC("           ; $87 DEC(
>87b6	05 6b 46 41 4c 53 45			.text	5,$6b,"FALSE"          ; $88 FALSE
>87bd	09 4a 47 45 54 44 41 54			.text	9,$4a,"GETDATE$("      ; $89 GETDATE$(
>87c5	45 24 28
>87c8	09 5b 47 45 54 54 49 4d			.text	9,$5b,"GETTIME$("      ; $8a GETTIME$(
>87d0	45 24 28
>87d3	05 31 48 45 58 24 28			.text	5,$31,"HEX$("          ; $8b HEX$(
>87da	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $8c INT(
>87e0	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $8d ISVAL(
>87e8	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $8e LEFT$(
>87f0	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $8f LEN(
>87f6	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $90 MID$(
>87fd	03 f1 4e 4f 54				.text	3,$f1,"NOT"            ; $91 NOT
>8802	04 1d 50 41 47 45			.text	4,$1d,"PAGE"           ; $92 PAGE
>8808	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $93 RIGHT$(
>8810	28
>8811	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $94 RND(
>8817	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $95 SGN(
>881d	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $96 SPC(
>8823	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $97 STR$(
>882a	04 40 54 52 55 45			.text	4,$40,"TRUE"           ; $98 TRUE
>8830	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $99 VAL(
>8836	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $9a FOR
>883b	02 8f 49 46				.text	2,$8f,"IF"             ; $9b IF
>883f	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $9c PROC
>8845	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $9d REPEAT
>884d	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $9e WHILE
>8854	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $9f ENDIF
>885b	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $a0 ENDPROC
>8863	43
>8864	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $a1 NEXT
>886a	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $a2 UNTIL
>8871	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $a3 WEND
>8877	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $a4 ASSERT
>887f	04 1c 43 41 4c 4c			.text	4,$1c,"CALL"           ; $a5 CALL
>8885	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $a6 CLS
>888a	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $a7 DATA
>8890	03 da 44 49 4d				.text	3,$da,"DIM"            ; $a8 DIM
>8895	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $a9 GOSUB
>889c	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $aa GOTO
>88a2	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $ab LET
>88a7	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $ac PRINT
>88ae	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $ad READ
>88b4	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $ae REM
>88b9	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $af RETURN
>88c1	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $b0 THEN
>88c7	02 a3 54 4f				.text	2,$a3,"TO"             ; $b1 TO
>88cb	ff					.text	$FF
.88cc					KeywordSet1:
>88cc	00 65					.text	0,$65,""               ; $80 !0:EOF
>88ce	00 58					.text	0,$58,""               ; $81 !1:SH1
>88d0	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>88d2	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $83 CLEAR
>88d9	03 d7 45 4e 44				.text	3,$d7,"END"            ; $84 END
>88de	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $85 LIST
>88e4	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $86 NEW
>88e9	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $87 RESTORE
>88f1	45
>88f2	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $88 RUN
>88f7	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $89 STOP
>88fd	ff					.text	$FF
.88fe					KeywordSet2:
>88fe	00 65					.text	0,$65,""               ; $80 !0:EOF
>8900	00 58					.text	0,$58,""               ; $81 !1:SH1
>8902	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>8904	ff					.text	$FF

;******  Return to file: ./tokeniser/tokenise.asm

.8905					TokeniseLine:
.8905	20 8d 8a	jsr $8a8d			jsr 	FixLineBufferCase 			; fix line case
.8908	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.890a	8d 06 07	sta $0706			sta 	tokenOffset
.890d	9c 07 07	stz $0707			stz 	tokenLineNumber
.8910	9c 08 07	stz $0708			stz 	tokenLineNumber+1
.8913	a2 ff		ldx #$ff			ldx 	#$FF
.8915					_TKFindFirst:
.8915	e8		inx				inx
.8916	bd 06 08	lda $0806,x			lda 	lineBuffer,x
.8919	f0 79		beq $8994			beq 	_TKExit
.891b	c9 20		cmp #$20			cmp 	#' '
.891d	90 f6		bcc $8915			bcc 	_TKFindFirst
.891f	c9 30		cmp #$30			cmp 	#'0'
.8921	90 07		bcc $892a			bcc 	_TKNoLineNumber
.8923	c9 3a		cmp #$3a			cmp 	#'9'+1
.8925	b0 03		bcs $892a			bcs 	_TKNoLineNumber
.8927	20 b7 8a	jsr $8ab7			jsr 	TokeniseExtractLineNumber
.892a					_TKNoLineNumber:
.892a					_TKTokeniseLoop:
.892a	bd 06 08	lda $0806,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.892d	f0 65		beq $8994			beq 	_TKExit
.892f	e8		inx				inx
.8930	c9 20		cmp #$20			cmp 	#' '
.8932	f0 f6		beq $892a			beq 	_TKTokeniseLoop 			; keep looping if space found.
.8934	ca		dex				dex 								; undo last get, A contains character, X is position.
.8935	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.8937	f0 61		beq $899a			beq 	_TKTokeniseIdentifier
.8939	c9 41		cmp #$41			cmp 	#'A'
.893b	90 04		bcc $8941			bcc 	_TKTokenisePunctuation
.893d	c9 5b		cmp #$5b			cmp 	#'Z'+1
.893f	90 59		bcc $899a			bcc 	_TKTokeniseIdentifier
.8941					_TKTokenisePunctuation:
.8941	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.8943	f0 27		beq $896c			beq 	_TKString
.8945	c9 23		cmp #$23			cmp 	#'#'						; hexadecimal constant (# only appears at end of identifiers)
.8947	f0 28		beq $8971			beq 	_TKHexConstant
.8949	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers.
.894b	f0 29		beq $8976			beq 	_TKCheckDouble
.894d	c9 3e		cmp #$3e			cmp 	#'>'
.894f	f0 25		beq $8976			beq 	_TKCheckDouble
.8951					_TKStandardPunctuation:
.8951	bd 06 08	lda $0806,x			lda 	lineBuffer,x 				; get it back.
.8954	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.8956	90 0e		bcc $8966			bcc 	_TKNoShift
.8958	48		pha				pha 								; save
.8959	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.895b	85 36		sta $36				sta 	zTemp0
.895d	68		pla				pla
.895e	29 20		and #$20			and 	#32 						; bit 5
.8960	4a		lsr a				lsr 	a 							; shift into bit 3
.8961	4a		lsr a				lsr 	a
.8962	05 36		ora $36				ora 	zTemp0
.8964	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.8966					_TKNoShift:
.8966	20 fc 8a	jsr $8afc			jsr 	TokeniseWriteByte 			; write the punctuation character
.8969	e8		inx				inx 								; consume the character
.896a	80 be		bra $892a			bra 	_TKTokeniseLoop 			; and loop round again.
.896c					_TKString:
.896c	20 1c 8a	jsr $8a1c			jsr 	TokeniseString
.896f	80 b9		bra $892a			bra 	_TKTokeniseLoop
.8971					_TKHexConstant:
.8971	20 57 8a	jsr $8a57			jsr 	TokeniseHexConstant
.8974	80 b4		bra $892a			bra 	_TKTokeniseLoop
.8976					_TKCheckDouble:
.8976	bd 07 08	lda $0807,x			lda 	lineBuffer+1,x 				; get next character
.8979	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.897b	90 d4		bcc $8951			bcc 	_TKStandardPunctuation
.897d	c9 3f		cmp #$3f			cmp 	#'>'+1
.897f	b0 d0		bcs $8951			bcs 	_TKStandardPunctuation
.8981	bd 06 08	lda $0806,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.8984	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.8986	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.8987	7d 07 08	adc $0807,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.898a	38		sec				sec
.898b	e9 3c		sbc #$3c			sbc 	#'<'
.898d	20 fc 8a	jsr $8afc			jsr 	TokeniseWriteByte 			; this is in the range 0-7
.8990	e8		inx				inx 								; consume both
.8991	e8		inx				inx
.8992	80 96		bra $892a			bra 	_TKTokeniseLoop
.8994	a9 80		lda #$80	_TKExit:lda 	#KWC_EOL 					; write end of line byte
.8996	20 fc 8a	jsr $8afc			jsr 	TokeniseWriteByte
.8999	60		rts				rts
.899a					_TKTokeniseIdentifier:
.899a	8e 00 07	stx $0700			stx 	identStart 					; save start
.899d	9c 04 07	stz $0704			stz 	identTypeByte 				; zero the type byte
.89a0					_TKCheckLoop:
.89a0	e8		inx				inx 								; look at next, we know first is identifier.
.89a1	bd 06 08	lda $0806,x			lda  	lineBuffer,x
.89a4	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.89a6	f0 f8		beq $89a0			beq 	_TKCheckLoop
.89a8	c9 30		cmp #$30			cmp	 	#"0"
.89aa	90 0c		bcc $89b8			bcc 	_TKEndIdentifier
.89ac	c9 3a		cmp #$3a			cmp 	#"9"+1
.89ae	90 f0		bcc $89a0			bcc 	_TKCheckLoop
.89b0	c9 41		cmp #$41			cmp	 	#"A"
.89b2	90 04		bcc $89b8			bcc 	_TKEndIdentifier
.89b4	c9 5b		cmp #$5b			cmp 	#"Z"+1
.89b6	90 e8		bcc $89a0			bcc 	_TKCheckLoop
.89b8					_TKEndIdentifier:
.89b8	8e 01 07	stx $0701			stx 	identTypeStart 				; save start of type text (if any !)
.89bb	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.89bd	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.89bf	f0 06		beq $89c7			beq 	_TKHasTypeCharacter
.89c1	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.89c3	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.89c5	d0 07		bne $89ce			bne 	_TKNoTypeCharacter
.89c7					_TKHasTypeCharacter:
.89c7	8c 04 07	sty $0704			sty 	identTypeByte 				; has # or $, save the type
.89ca	e8		inx				inx 								; read next
.89cb	bd 06 08	lda $0806,x			lda 	lineBuffer,x
.89ce					_TKNoTypeCharacter:
.89ce	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.89d0	d0 09		bne $89db			bne 	_TKNoArray
.89d2	e8		inx				inx 								; skip the (
.89d3	ad 04 07	lda $0704			lda 	identTypeByte 				; set bit 2 (e.g. array)
.89d6	09 04		ora #$04			ora 	#$04
.89d8	8d 04 07	sta $0704			sta 	identTypeByte
.89db					_TKNoArray:
.89db	8e 02 07	stx $0702			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.89de	20 78 8a	jsr $8a78			jsr 	TokeniseCalculateHash 		; calculate the has for those tokens
.89e1	a0 87		ldy #$87			ldy 	#(KeywordSet0) >> 8
.89e3	a9 8f		lda #$8f			lda 	#(KeywordSet0) & $FF
.89e5	20 36 87	jsr $8736			jsr 	TokeniseSearchTable
.89e8	a2 00		ldx #$00			ldx 	#0
.89ea	b0 1f		bcs $8a0b			bcs 	_TKFoundToken
.89ec	a0 88		ldy #$88			ldy 	#(KeywordSet1) >> 8
.89ee	a9 cc		lda #$cc			lda 	#(KeywordSet1) & $FF
.89f0	20 36 87	jsr $8736			jsr 	TokeniseSearchTable
.89f3	a2 81		ldx #$81			ldx 	#$81
.89f5	b0 14		bcs $8a0b			bcs 	_TKFoundToken
.89f7	a0 88		ldy #$88			ldy 	#(KeywordSet1) >> 8
.89f9	a9 cc		lda #$cc			lda 	#(KeywordSet1) & $FF
.89fb	20 36 87	jsr $8736			jsr 	TokeniseSearchTable
.89fe	a2 82		ldx #$82			ldx 	#$82
.8a00	b0 09		bcs $8a0b			bcs 	_TKFoundToken
.8a02	20 08 8b	jsr $8b08			jsr 	CheckCreateVariableRecord 	; failed all, it's a variable, create record if does not exist.
.8a05	ae 02 07	ldx $0702			ldx 	identTypeEnd 				; X points to following byte
.8a08	4c 2a 89	jmp $892a			jmp 	_TKTokeniseLoop 			; and go round again.
.8a0b					_TKFoundToken:
.8a0b	48		pha				pha 								; save token
.8a0c	8a		txa				txa 								; shift in X, is there one ?
.8a0d	f0 03		beq $8a12			beq 	_TKNoTShift
.8a0f	20 fc 8a	jsr $8afc			jsr 	TokeniseWriteByte 			; if so, write it out
.8a12					_TKNoTShift:
.8a12	68		pla				pla 								; restore and write token
.8a13	20 fc 8a	jsr $8afc			jsr 	TokeniseWriteByte
.8a16	ae 02 07	ldx $0702			ldx 	identTypeEnd 				; X points to following byte
.8a19	4c 2a 89	jmp $892a			jmp 	_TKTokeniseLoop 			; and go round again.
.8a1c					TokeniseString:
.8a1c	a9 ff		lda #$ff			lda 	#KWC_STRING 				; string token.
.8a1e	20 fc 8a	jsr $8afc			jsr 	TokeniseWriteByte
.8a21	e8		inx				inx									; start of quoted string.
.8a22	da		phx				phx 								; push start of string on top
.8a23	ca		dex				dex
.8a24					_TSFindEnd:
.8a24	e8		inx				inx
.8a25	bd 06 08	lda $0806,x			lda 	lineBuffer,x 				; next character
.8a28	f0 04		beq $8a2e			beq 	_TSEndOfString
.8a2a	c9 22		cmp #$22			cmp 	#'"'
.8a2c	d0 f6		bne $8a24			bne 	_TSFindEnd
.8a2e					_TSEndOfString:
.8a2e	7a		ply				ply  								; so now Y is first character, X is character after end.
.8a2f	48		pha				pha 								; save terminating character
.8a30	20 38 8a	jsr $8a38			jsr 	TOWriteBlockXY 				; write X to Y as a data block
.8a33	68		pla				pla 								; terminating character
.8a34	f0 01		beq $8a37			beq 	_TSNotQuote					; if it wasn't EOS skip it
.8a36	e8		inx				inx
.8a37					_TSNotQuote:
.8a37	60		rts				rts
.8a38					TOWriteBlockXY:
.8a38	86 36		stx $36				stx 	zTemp0 						; write end character
.8a3a	98		tya				tya
.8a3b	49 ff		eor #$ff			eor 	#$FF
.8a3d	38		sec				sec
.8a3e	65 36		adc $36				adc 	zTemp0
.8a40	1a		inc a				inc 	a 							; one extra for NULL
.8a41	20 fc 8a	jsr $8afc			jsr 	TokeniseWriteByte
.8a44					_TOBlockLoop:
.8a44	c4 36		cpy $36				cpy 	zTemp0
.8a46	f0 09		beq $8a51			beq 	_TOBlockExit
.8a48	b9 06 08	lda $0806,y			lda 	lineBuffer,y
.8a4b	20 fc 8a	jsr $8afc			jsr 	TokeniseWriteByte
.8a4e	c8		iny				iny
.8a4f	80 f3		bra $8a44			bra 	_TOBlockLoop
.8a51					_TOBlockExit:
.8a51	a9 00		lda #$00			lda 	#0
.8a53	20 fc 8a	jsr $8afc			jsr 	TokeniseWriteByte
.8a56	60		rts				rts
.8a57					TokeniseHexConstant:
.8a57	a9 fe		lda #$fe			lda 	#KWC_HEXCONST 				; hex constant token.
.8a59	20 fc 8a	jsr $8afc			jsr 	TokeniseWriteByte
.8a5c	e8		inx				inx									; start of quoted string.
.8a5d	da		phx				phx 								; push start of constant on top
.8a5e	ca		dex				dex
.8a5f					_THFindLoop:
.8a5f	e8		inx				inx
.8a60	bd 06 08	lda $0806,x			lda 	lineBuffer,x
.8a63	c9 30		cmp #$30			cmp 	#"0"
.8a65	90 0c		bcc $8a73			bcc 	_THFoundEnd
.8a67	c9 3a		cmp #$3a			cmp 	#"9"+1
.8a69	90 f4		bcc $8a5f			bcc 	_THFindLoop
.8a6b	c9 41		cmp #$41			cmp 	#"A"
.8a6d	90 04		bcc $8a73			bcc 	_THFoundEnd
.8a6f	c9 47		cmp #$47			cmp 	#"F"+1
.8a71	90 ec		bcc $8a5f			bcc 	_THFindLoop
.8a73					_THFoundEnd:
.8a73	7a		ply				ply 								; restore start
.8a74	20 38 8a	jsr $8a38			jsr 	TOWriteBlockXY 				; output the block
.8a77	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./tokeniser/utility.asm

.8a78					TokeniseCalculateHash:
.8a78	da		phx				phx
.8a79	ae 00 07	ldx $0700			ldx 	identStart 					; needs to be same as in tokens.py - simple sum
.8a7c	a9 00		lda #$00			lda 	#0
.8a7e					_TCHLoop:
.8a7e	18		clc				clc
.8a7f	7d 06 08	adc $0806,x			adc 	lineBuffer,x
.8a82	e8		inx				inx
.8a83	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.8a86	d0 f6		bne $8a7e			bne 	_TCHLoop
.8a88	8d 03 07	sta $0703			sta 	identHash 					; save the hash
.8a8b	fa		plx				plx
.8a8c	60		rts				rts
.8a8d					FixLineBufferCase:
.8a8d	a2 00		ldx #$00			ldx 	#0
.8a8f					_FLBCLoop:
.8a8f	bd 06 08	lda $0806,x			lda 	lineBuffer,x 				; get next character
.8a92	f0 22		beq $8ab6			beq 	_FLBCExit 					; end of string.
.8a94	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.8a96	f0 11		beq $8aa9			beq 	_FLBCInQuotes
.8a98	e8		inx				inx
.8a99	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.8a9b	90 f2		bcc $8a8f			bcc 	_FLBCLoop
.8a9d	c9 7b		cmp #$7b			cmp 	#'z'+1
.8a9f	b0 ee		bcs $8a8f			bcs 	_FLBCLoop
.8aa1	38		sec				sec 								; make U/C
.8aa2	e9 20		sbc #$20			sbc 	#32
.8aa4	9d 05 08	sta $0805,x			sta	 	lineBuffer-1,x 				; write back
.8aa7	80 e6		bra $8a8f			bra 	_FLBCLoop
.8aa9					_FLBCInQuotes:
.8aa9	e8		inx				inx 								; advance
.8aaa	bd 06 08	lda $0806,x			lda 	lineBuffer,x 				; get next
.8aad	f0 07		beq $8ab6			beq 	_FLBCExit 					; exit on EOS
.8aaf	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.8ab1	d0 f6		bne $8aa9			bne 	_FLBCInQuotes
.8ab3	e8		inx				inx 								; skip over it
.8ab4	80 d9		bra $8a8f			bra 	_FLBCLoop
.8ab6					_FLBCExit:
.8ab6	60		rts				rts
.8ab7					TokeniseExtractLineNumber:
.8ab7	ad 08 07	lda $0708			lda 	tokenLineNumber+1 			; push current value on stack
.8aba	48		pha				pha
.8abb	ad 07 07	lda $0707			lda 	tokenLineNumber
.8abe	48		pha				pha
.8abf	20 f5 8a	jsr $8af5			jsr 	_TELNTimes2 				; line # x 4
.8ac2	20 f5 8a	jsr $8af5			jsr 	_TELNTimes2 				; line # x 2
.8ac5	18		clc				clc 								; add stacked value
.8ac6	68		pla				pla
.8ac7	6d 07 07	adc $0707			adc 	tokenLineNumber
.8aca	8d 07 07	sta $0707			sta 	tokenLineNumber
.8acd	68		pla				pla
.8ace	6d 08 07	adc $0708			adc 	tokenLineNumber+1
.8ad1	8d 08 07	sta $0708			sta 	tokenLineNumber+1 			; line # x 5
.8ad4	20 f5 8a	jsr $8af5			jsr 	_TELNTimes2 				; line # x 10
.8ad7	bd 06 08	lda $0806,x			lda 	lineBuffer,x 				; get and consume character
.8ada	e8		inx				inx
.8adb	29 0f		and #$0f			and 	#15 						; add to line #
.8add	18		clc				clc
.8ade	6d 07 07	adc $0707			adc 	tokenLineNumber
.8ae1	8d 07 07	sta $0707			sta 	tokenLineNumber
.8ae4	90 03		bcc $8ae9			bcc 	_TLENNoCarry
.8ae6	ee 08 07	inc $0708			inc 	tokenLineNumber+1
.8ae9					_TLENNoCarry:
.8ae9	bd 06 08	lda $0806,x			lda 	lineBuffer,x 				; more digits ?
.8aec	c9 30		cmp #$30			cmp 	#'0'
.8aee	90 04		bcc $8af4			bcc 	_TLENExit
.8af0	c9 3a		cmp #$3a			cmp 	#'9'+1
.8af2	90 c3		bcc $8ab7			bcc 	TokeniseExtractLineNumber
.8af4					_TLENExit:
.8af4	60		rts				rts
.8af5					_TELNTimes2:
.8af5	0e 07 07	asl $0707			asl 	tokenLineNumber
.8af8	2e 08 07	rol $0708			rol 	tokenLineNumber+1
.8afb	60		rts				rts
.8afc					TokeniseWriteByte:
.8afc	da		phx				phx
.8afd	ae 06 07	ldx $0706			ldx 	tokenOffset 				; next slot to write to
.8b00	9d 06 07	sta $0706,x			sta 	tokenOffset,x 				; write byte out
.8b03	ee 06 07	inc $0706			inc 	tokenOffset 				; advance slot.
.8b06	fa		plx				plx
.8b07	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./tokeniser/variablerecord.asm

.8b08					CheckCreateVariableRecord:
.8b08	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.8b0a	85 36		sta $36				sta 	0+zTemp0
.8b0c	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.8b0e	85 37		sta $37				sta 	1+zTemp0
.8b10	20 0e 87	jsr $870e			jsr 	VariableOpen 				; make variable space available
.8b13					_CCVSearch:
.8b13	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.8b15	f0 2c		beq $8b43			beq 	_CCVFail
.8b17	a0 01		ldy #$01			ldy 	#1 							; read the hash
.8b19	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.8b1b	cd 03 07	cmp $0703			cmp 	identHash
.8b1e	d0 16		bne $8b36			bne 	_CCVNext
.8b20	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.8b22	ae 00 07	ldx $0700			ldx 	identStart
.8b25					_CCVCompare:
.8b25	bd 06 08	lda $0806,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.8b28	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.8b2a	e8		inx				inx 								; advance pointers
.8b2b	c8		iny				iny
.8b2c	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.8b2d	d0 07		bne $8b36			bne 	_CCVNext  					; didn't match go to next.
.8b2f	90 f4		bcc $8b25			bcc 	_CCVCompare 				; not finished yet.
.8b31	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; matched whole thing ?
.8b34	f0 41		beq $8b77			beq 	_CCVFound 					; yes, we were successful
.8b36					_CCVNext:
.8b36	18		clc				clc
.8b37	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.8b39	65 36		adc $36				adc 	zTemp0
.8b3b	85 36		sta $36				sta 	zTemp0
.8b3d	90 d4		bcc $8b13			bcc 	_CCVSearch
.8b3f	e6 37		inc $37				inc 	zTemp0+1
.8b41	80 d0		bra $8b13			bra 	_CCVSearch
.8b43					_CCVFail:
.8b43	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.8b45	ad 03 07	lda $0703			lda 	identHash
.8b48	91 36		sta ($36),y			sta 	(zTemp0),y
.8b4a	c8		iny				iny 								; offset 2 is the type byte
.8b4b	ad 04 07	lda $0704			lda 	identTypeByte
.8b4e	91 36		sta ($36),y			sta 	(zTemp0),y
.8b50	c8		iny				iny
.8b51					_CCVData:
.8b51	a9 00		lda #$00			lda 	#0 							; erase data 3-7
.8b53	91 36		sta ($36),y			sta 	(zTemp0),y
.8b55	c8		iny				iny
.8b56	c0 08		cpy #$08			cpy 	#8
.8b58	90 f7		bcc $8b51			bcc 	_CCVData
.8b5a	ae 00 07	ldx $0700			ldx 	identStart 					; copy name into 8 on.
.8b5d					_CCVCopyName:
.8b5d	bd 06 08	lda $0806,x			lda 	lineBuffer,x
.8b60	91 36		sta ($36),y			sta 	(zTemp0),y
.8b62	e8		inx				inx
.8b63	c8		iny				iny
.8b64	ec 02 07	cpx $0702			cpx 	identTypeEnd
.8b67	d0 f4		bne $8b5d			bne 	_CCVCopyName
.8b69	98		tya				tya 								; patch offset
.8b6a	92 36		sta ($36)			sta 	(zTemp0)
.8b6c	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.8b6e	91 36		sta ($36),y			sta 	(zTemp0),y
.8b70	88		dey				dey
.8b71	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.8b73	09 80		ora #$80			ora 	#$80
.8b75	91 36		sta ($36),y			sta 	(zTemp0),y
.8b77					_CCVFound:
.8b77	20 0f 87	jsr $870f			jsr 	VariableClose 				; map out variables, perhaps.
.8b7a	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.8b7c	38		sec				sec
.8b7d	e9 10		sbc #$10			sbc 	#(VariableSpace >> 8) 		; offset from the start
.8b7f	09 40		ora #$40			ora 	#$40 						; make it a writeable token
.8b81	20 fc 8a	jsr $8afc			jsr 	TokeniseWriteByte
.8b84	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.8b86	20 fc 8a	jsr $8afc			jsr 	TokeniseWriteByte
.8b89	60		rts				rts

;******  Return to file: _basic.asm


;******  End of listing
