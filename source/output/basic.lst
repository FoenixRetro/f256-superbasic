
; 64tass Turbo Assembler Macro V1.56.2625 listing file
; 64tass -q -b -Wall -Wno-portable -c -L output/basic.lst -l output/basic.lbl -Wall -o basic.rom _basic.asm
; Tue Oct  4 11:24:54 2022

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: _basic.asm


;******  Processing file: ./common/aa_system/01common.inc

=$30					ZeroPageMandatory = $30
=$600					ZeroPagePreference = $600
=$700					MemoryStorage = $700
=$2000					BasicStart = $2000
=$8000					CodeStart = $8000
=$1000					VariableSpace = $1000
=$2000					EndVariableSpace = $2000
=8					MathStackSize = 8
=512					BasicStackSize = 512
=3584					BasicStackBase = $1000-BasicStackSize
=80					MaxLineSize = 80

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa_system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa_system/04data.inc

.0030					codePtr:
>0030							.fill 	4
.0034					basicStack:
>0034							.fill 	2
.0036					zTemp0:
>0036							.fill 	2
.0038					zTemp1:
>0038							.fill 	2
.003a					zTemp2:
>003a							.fill 	2
.003c					zsTemp:
>003c							.fill 	2
.003e					zaTemp:
>003e							.fill 	2
=$30					safePtr = codePtr 							; minimise direct tinkering
=$80					NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20					NSBIsReference = $20 						; bit 5 : is a reference
=$10					NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18					NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03					NSBRefMask = $03 							; bits 0,1 : Bytes of reference, -1 (e.g. 00 = 1 byte, 11 = 4 bytes)
=$04					NSBIsArray = $04
=$00					NSTInteger = $00 							; base types for bits 3..4
=$08					NSTFloat = $08
=$10					NSTString = $10
=$18					NSTProcedure = $18
.0600					NSStatus:
>0600							.fill 	MathStackSize
.0608					NSMantissa0:
>0608							.fill 	MathStackSize 				; (this is my integer mantissa system)
.0610					NSMantissa1:
>0610							.fill 	MathStackSize
.0618					NSMantissa2:
>0618							.fill 	MathStackSize
.0620					NSMantissa3:
>0620							.fill 	MathStackSize
.0628					NSExponent:
>0628							.fill 	MathStackSize
.0700					identStart:
>0700							.fill 	1
.0701					identTypeStart:
>0701							.fill 	1
.0702					identTypeEnd:
>0702							.fill 	1
.0703					identHash:
>0703							.fill 	1
.0704					identTypeByte:
>0704							.fill 	1	 						; (see tokenising.pdf)
.0705					encodeState:
>0705							.fill 	1
.0706					digitTemp:
>0706							.fill 	1
.0707					decimalCount:
>0707							.fill 	1
.0708					randomSeed:
>0708							.fill 	4
.070c					lowMemPtr:
>070c							.fill 	2
.070e					stringMemory:
>070e							.fill 	2
.0710					stringInitialised:
>0710							.fill 	1
.0711					stringTempPointer:
>0711							.fill 	2
.0713					decimalPlaces:
>0713							.fill 	1
.0714					dbOffset:
>0714							.fill 	1
.0715					dataPointer:
>0715							.fill 	5
.071a					inDataStatement:
>071a							.fill 	1
.071b					tbOffset:
>071b							.fill 	1
.071c					tokenOffset:
>071c							.fill 	1
.071d					tokenLineNumber:
>071d							.fill 	2
.071f					tokenBuffer:
>071f							.fill 	253
.081c					lineBuffer:
>081c							.fill 	MaxLineSize+1
.086d					numberBuffer:
>086d							.fill 	34
.088f					decimalBuffer:
>088f							.fill 	16

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/handlers.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.inc

=1					ERRID_BREAK = 1
=2					ERRID_SYNTAX = 2
=3					ERRID_DIVZERO = 3
=4					ERRID_RANGE = 4
=5					ERRID_TYPE = 5
=6					ERRID_MEMORY = 6
=7					ERRID_ARGUMENT = 7
=8					ERRID_STOP = 8
=9					ERRID_STRING = 9
=10					ERRID_ASSERT = 10
=11					ERRID_DATA = 11
=12					ERRID_NOTDONE = 12
=13					ERRID_LINE = 13
=14					ERRID_GOSUB = 14
=15					ERRID_REPEAT = 15
=16					ERRID_WHILE = 16
=17					ERRID_FOR = 17
=18					ERRID_STACK = 18
=19					ERRID_STRUCT = 19
=20					ERRID_PROC = 20
=21					ERRID_REDEFINE = 21
=22					ERRID_ARRAYSIZE = 22
=23					ERRID_ARRAYIDX = 23

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst.inc

=$00					KWD_LESSLESS                         = $00; $00 <<
=$01					KWD_LESSEQUAL                        = $01; $01 <=
=$02					KWD_LESSGREATER                      = $02; $02 <>
=$03					KWD_PLINGPLING3                      = $03; $03 !!3
=$04					KWD_GREATERLESS                      = $04; $04 ><
=$05					KWD_GREATEREQUAL                     = $05; $05 >=
=$06					KWD_GREATERGREATER                   = $06; $06 >>
=$07					KWD_PLINGPLING7                      = $07; $07 !!7
=$08					KWD_PLINGPLING8                      = $08; $08 !!8
=$09					KWD_PLINGPLING9                      = $09; $09 !!9
=$0a					KWD_PLINGPLING10                     = $0a; $0a !!10
=$0b					KWD_PLINGPLING11                     = $0b; $0b !!11
=$0c					KWD_PLINGPLING12                     = $0c; $0c !!12
=$0d					KWD_PLINGPLING13                     = $0d; $0d !!13
=$0e					KWD_PLINGPLING14                     = $0e; $0e !!14
=$0f					KWD_PLINGPLING15                     = $0f; $0f !!15
=$10					KWD_AT                               = $10; $10 @
=$11					KWD_PLINGPLING17                     = $11; $11 !!17
=$12					KWD_PLINGPLING18                     = $12; $12 !!18
=$13					KWD_LSQPAREN                         = $13; $13 [
=$14					KWD_BACKSLASH                        = $14; $14 \
=$15					KWD_RSQPAREN                         = $15; $15 ]
=$16					KWD_HAT                              = $16; $16 ^
=$17					KWD_UNDERSCORE                       = $17; $17 _
=$18					KWD_BQUOTE                           = $18; $18 `
=$19					KWD_PLINGPLING25                     = $19; $19 !!25
=$1a					KWD_PLINGPLING26                     = $1a; $1a !!26
=$1b					KWD_LCURLY                           = $1b; $1b {
=$1c					KWD_BAR                              = $1c; $1c |
=$1d					KWD_RCURLY                           = $1d; $1d }
=$1e					KWD_TILDE                            = $1e; $1e ~
=$21					KWD_PLING                            = $21; $21 !
=$22					KWD_DQUOTE                           = $22; $22 "
=$23					KWD_HASH                             = $23; $23 #
=$24					KWD_DOLLAR                           = $24; $24 $
=$25					KWD_PERCENT                          = $25; $25 %
=$26					KWD_AMPERSAND                        = $26; $26 &
=$27					KWD_QUOTE                            = $27; $27 '
=$28					KWD_LPAREN                           = $28; $28 (
=$29					KWD_RPAREN                           = $29; $29 )
=$2a					KWD_STAR                             = $2a; $2a *
=$2b					KWD_PLUS                             = $2b; $2b +
=$2c					KWD_COMMA                            = $2c; $2c ,
=$2d					KWD_MINUS                            = $2d; $2d -
=$2e					KWD_PERIOD                           = $2e; $2e .
=$2f					KWD_SLASH                            = $2f; $2f /
=$30					KWD_0                                = $30; $30 0
=$31					KWD_1                                = $31; $31 1
=$32					KWD_2                                = $32; $32 2
=$33					KWD_3                                = $33; $33 3
=$34					KWD_4                                = $34; $34 4
=$35					KWD_5                                = $35; $35 5
=$36					KWD_6                                = $36; $36 6
=$37					KWD_7                                = $37; $37 7
=$38					KWD_8                                = $38; $38 8
=$39					KWD_9                                = $39; $39 9
=$3a					KWD_COLON                            = $3a; $3a :
=$3b					KWD_SEMICOLON                        = $3b; $3b ;
=$3c					KWD_LESS                             = $3c; $3c <
=$3d					KWD_EQUAL                            = $3d; $3d =
=$3e					KWD_GREATER                          = $3e; $3e >
=$3f					KWD_QMARK                            = $3f; $3f ?
=$83					KWD_ABSLPAREN                        = $83; $83 ABS(
=$84					KWD_ALLOCLPAREN                      = $84; $84 ALLOC(
=$85					KWD_ASCLPAREN                        = $85; $85 ASC(
=$86					KWD_CHRDOLLARLPAREN                  = $86; $86 CHR$(
=$87					KWD_FALSE                            = $87; $87 FALSE
=$88					KWD_FRACLPAREN                       = $88; $88 FRAC(
=$89					KWD_INTLPAREN                        = $89; $89 INT(
=$8a					KWD_ISVALLPAREN                      = $8a; $8a ISVAL(
=$8b					KWD_LEFTDOLLARLPAREN                 = $8b; $8b LEFT$(
=$8c					KWD_LENLPAREN                        = $8c; $8c LEN(
=$8d					KWD_MIDDOLLARLPAREN                  = $8d; $8d MID$(
=$8e					KWD_NOTLPAREN                        = $8e; $8e NOT(
=$8f					KWD_RIGHTDOLLARLPAREN                = $8f; $8f RIGHT$(
=$90					KWD_RNDLPAREN                        = $90; $90 RND(
=$91					KWD_SGNLPAREN                        = $91; $91 SGN(
=$92					KWD_SPCLPAREN                        = $92; $92 SPC(
=$93					KWD_STRDOLLARLPAREN                  = $93; $93 STR$(
=$94					KWD_TRUE                             = $94; $94 TRUE
=$95					KWD_VALLPAREN                        = $95; $95 VAL(
=$96					KWD_FOR                              = $96; $96 FOR
=$97					KWD_IF                               = $97; $97 IF
=$98					KWD_PROC                             = $98; $98 PROC
=$99					KWD_REPEAT                           = $99; $99 REPEAT
=$9a					KWD_WHILE                            = $9a; $9a WHILE
=$9b					KWD_ENDIF                            = $9b; $9b ENDIF
=$9c					KWD_ENDPROC                          = $9c; $9c ENDPROC
=$9d					KWD_NEXT                             = $9d; $9d NEXT
=$9e					KWD_THEN                             = $9e; $9e THEN
=$9f					KWD_UNTIL                            = $9f; $9f UNTIL
=$a0					KWD_WEND                             = $a0; $a0 WEND
=$a1					KWD_CALL                             = $a1; $a1 CALL
=$a2					KWD_CLS                              = $a2; $a2 CLS
=$a3					KWD_DATA                             = $a3; $a3 DATA
=$a4					KWD_DIM                              = $a4; $a4 DIM
=$a5					KWD_DOWNTO                           = $a5; $a5 DOWNTO
=$a6					KWD_ELSE                             = $a6; $a6 ELSE
=$a7					KWD_GOSUB                            = $a7; $a7 GOSUB
=$a8					KWD_GOTO                             = $a8; $a8 GOTO
=$a9					KWD_LET                              = $a9; $a9 LET
=$aa					KWD_PRINT                            = $aa; $aa PRINT
=$ab					KWD_READ                             = $ab; $ab READ
=$ac					KWD_REM                              = $ac; $ac REM
=$ad					KWD_RETURN                           = $ad; $ad RETURN
=$ae					KWD_TO                               = $ae; $ae TO

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst0.inc

=$80					KWC_EOL = $80
=$ff					KWC_STRING = $FF
=$fe					KWC_HEXCONST = $FE
=$96					KWC_FIRST_STRUCTURE = $96
=$9b					KWC_FIRST_STRUCTURE_DEC = $9b
=$a0					KWC_LAST_STRUCTURE = $a0
=$83					KWC_FIRST_UNARY = $83
=$95					KWC_LAST_UNARY = $95

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/stack.inc

=$e0					STK_GOSUB = $E0
=$d0					STK_FOR = $D0
=$c0					STK_REPEAT = $C0
=$b0					STK_PROC = $B0
=$a0					STK_WHILE = $A0
=$90					STK_LOCAL = $90

;******  Return to file: _basic.asm


;******  Processing file: ./variants/memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa_system/00start.asm

.8000	a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.8002	9a		txs				txs
.8003	20 fd 84	jsr $84fd			jsr 	NewCommand 					; erase current program
.8006	20 da 94	jsr $94da			jsr 	BackloadProgram
.8009	4c 49 86	jmp $8649			jmp 	CommandRun
.800c					WarmStart:
.800c	a9 57		lda #$57			lda 	#"W"
.800e	20 56 a2	jsr $a256			jsr 	EXTPrintCharacter
.8011	80 fe		bra $8011	halt:	bra 	halt
>8013							.align 2

;******  Processing file: ./common/aa_system/../generated/vectors.dat

.8014					VectorSetPunc:
>8014	94 8a					.word	ShiftLeft                        ; $00 <<
>8016	8e 89					.word	BinaryCompareLessEqual           ; $01 <=
>8018	84 89					.word	BinaryCompareNotEqual            ; $02 <>
>801a	f3 9f					.word	SyntaxError                      ; $03 !!3
>801c	f3 9f					.word	SyntaxError                      ; $04 ><
>801e	98 89					.word	BinaryCompareGreaterEqual        ; $05 >=
>8020	97 8a					.word	ShiftRight                       ; $06 >>
>8022	f3 9f					.word	SyntaxError                      ; $07 !!7
>8024	f3 9f					.word	SyntaxError                      ; $08 !!8
>8026	f3 9f					.word	SyntaxError                      ; $09 !!9
>8028	f3 9f					.word	SyntaxError                      ; $0a !!10
>802a	f3 9f					.word	SyntaxError                      ; $0b !!11
>802c	f3 9f					.word	SyntaxError                      ; $0c !!12
>802e	f3 9f					.word	SyntaxError                      ; $0d !!13
>8030	f3 9f					.word	SyntaxError                      ; $0e !!14
>8032	f3 9f					.word	SyntaxError                      ; $0f !!15
>8034	f3 9f					.word	SyntaxError                      ; $10 @
>8036	f3 9f					.word	SyntaxError                      ; $11 !!17
>8038	f3 9f					.word	SyntaxError                      ; $12 !!18
>803a	f3 9f					.word	SyntaxError                      ; $13 [
>803c	3c 9b					.word	IntegerDivide                    ; $14 \
>803e	f3 9f					.word	SyntaxError                      ; $15 ]
>8040	1d 8c					.word	EorInteger                       ; $16 ^
>8042	f3 9f					.word	SyntaxError                      ; $17 _
>8044	f3 9f					.word	SyntaxError                      ; $18 `
>8046	f3 9f					.word	SyntaxError                      ; $19 !!25
>8048	f3 9f					.word	SyntaxError                      ; $1a !!26
>804a	f3 9f					.word	SyntaxError                      ; $1b {
>804c	d7 8b					.word	OraInteger                       ; $1c |
>804e	f3 9f					.word	SyntaxError                      ; $1d }
>8050	f3 9f					.word	SyntaxError                      ; $1e ~
>8052	f3 9f					.word	SyntaxError                      ; $1f [7m<7F>[m
>8054	f3 9f					.word	SyntaxError                      ; $20
>8056	63 8c					.word	WordIndirect                     ; $21 !
>8058	f3 9f					.word	SyntaxError                      ; $22 "
>805a	f3 9f					.word	SyntaxError                      ; $23 #
>805c	f3 9f					.word	SyntaxError                      ; $24 $
>805e	89 9b					.word	IntegerModulus                   ; $25 %
>8060	91 8b					.word	AndInteger                       ; $26 &
>8062	f3 9f					.word	SyntaxError                      ; $27 '
>8064	f3 9f					.word	SyntaxError                      ; $28 (
>8066	f3 9f					.word	SyntaxError                      ; $29 )
>8068	fe 9b					.word	MulInteger                       ; $2a *
>806a	2b 8b					.word	AddInteger                       ; $2b +
>806c	f3 9f					.word	SyntaxError                      ; $2c ,
>806e	66 8b					.word	SubInteger                       ; $2d -
>8070	f3 9f					.word	SyntaxError                      ; $2e .
>8072	95 9d					.word	FDivideCommand                   ; $2f /
>8074	f3 9f					.word	SyntaxError                      ; $30 0
>8076	f3 9f					.word	SyntaxError                      ; $31 1
>8078	f3 9f					.word	SyntaxError                      ; $32 2
>807a	f3 9f					.word	SyntaxError                      ; $33 3
>807c	f3 9f					.word	SyntaxError                      ; $34 4
>807e	f3 9f					.word	SyntaxError                      ; $35 5
>8080	f3 9f					.word	SyntaxError                      ; $36 6
>8082	f3 9f					.word	SyntaxError                      ; $37 7
>8084	f3 9f					.word	SyntaxError                      ; $38 8
>8086	f3 9f					.word	SyntaxError                      ; $39 9
>8088	f3 9f					.word	SyntaxError                      ; $3a :
>808a	f3 9f					.word	SyntaxError                      ; $3b ;
>808c	70 89					.word	BinaryCompareLess                ; $3c <
>808e	66 89					.word	BinaryCompareEqual               ; $3d =
>8090	7a 89					.word	BinaryCompareGreater             ; $3e >
>8092	8a 8c					.word	ByteIndirect                     ; $3f ?
.8094					VectorSet0:
>8094	9e 86					.word	EOLCommand                       ; $80 !0:EOF
>8096	ab 86					.word	Shift1Command                    ; $81 !1:SH1
>8098	f3 9f					.word	SyntaxError                      ; $82 !2:SH2
>809a	db 9e					.word	AbsUnary                         ; $83 ABS(
>809c	54 91					.word	AllocUnary                       ; $84 ALLOC(
>809e	eb 9e					.word	AscUnary                         ; $85 ASC(
>80a0	0f 92					.word	ChrUnary                         ; $86 CHR$(
>80a2	62 89					.word	UnaryFalse                       ; $87 FALSE
>80a4	f8 9e					.word	FracUnary                        ; $88 FRAC(
>80a6	0e 9f					.word	IntUnary                         ; $89 INT(
>80a8	64 9f					.word	IsValUnary                       ; $8a ISVAL(
>80aa	e9 92					.word	Unary_Left                       ; $8b LEFT$(
>80ac	20 9f					.word	LenUnary                         ; $8c LEN(
>80ae	13 93					.word	Unary_Mid                        ; $8d MID$(
>80b0	ac 91					.word	Unary_Not                        ; $8e NOT(
>80b2	f9 92					.word	Unary_Right                      ; $8f RIGHT$(
>80b4	c2 91					.word	Unary_Rnd                        ; $90 RND(
>80b6	3a 9f					.word	SgnUnary                         ; $91 SGN(
>80b8	21 92					.word	SpcUnary                         ; $92 SPC(
>80ba	3c 92					.word	Unary_Str                        ; $93 STR$(
>80bc	56 89					.word	UnaryTrue                        ; $94 TRUE
>80be	5a 9f					.word	ValUnary                         ; $95 VAL(
>80c0	c0 82					.word	ForCommand                       ; $96 FOR
>80c2	04 84					.word	IfCommand                        ; $97 IF
>80c4	b3 86					.word	Unused1                          ; $98 PROC
>80c6	f5 85					.word	Command_REPEAT                   ; $99 REPEAT
>80c8	bb 88					.word	Command_WHILE                    ; $9a WHILE
>80ca	2d 84					.word	EndIf                            ; $9b ENDIF
>80cc	15 9b					.word	Command_ENDPROC                  ; $9c ENDPROC
>80ce	7a 83					.word	NextCommand                      ; $9d NEXT
>80d0	b3 86					.word	Unused4                          ; $9e THEN
>80d2	fe 85					.word	Command_UNTIL                    ; $9f UNTIL
>80d4	dc 88					.word	Command_WEND                     ; $a0 WEND
>80d6	9e 81					.word	CallCommand                      ; $a1 CALL
>80d8	f3 9f					.word	SyntaxError                      ; $a2 CLS
>80da	f8 81					.word	Command_Data                     ; $a3 DATA
>80dc	00 82					.word	DimCommand                       ; $a4 DIM
>80de	b3 86					.word	Unused3                          ; $a5 DOWNTO
>80e0	26 84					.word	ElseCode                         ; $a6 ELSE
>80e2	d3 83					.word	Command_GOSUB                    ; $a7 GOSUB
>80e4	f1 83					.word	GotoCommand                      ; $a8 GOTO
>80e6	2e 84					.word	LetCommand                       ; $a9 LET
>80e8	07 85					.word	Command_Print                    ; $aa PRINT
>80ea	8f 85					.word	Command_Read                     ; $ab READ
>80ec	e8 85					.word	RemCommand                       ; $ac REM
>80ee	e3 83					.word	Command_RETURN                   ; $ad RETURN
>80f0	b3 86					.word	Unused2                          ; $ae TO
.80f2					VectorSet1:
>80f2	f3 9f					.word	SyntaxError                      ; $80 !0:EOF
>80f4	f3 9f					.word	SyntaxError                      ; $81 !1:SH1
>80f6	f3 9f					.word	SyntaxError                      ; $82 !2:SH2
>80f8	8e 81					.word	AssertCommand                    ; $83 ASSERT
>80fa	ac 81					.word	ClearCommand                     ; $84 CLEAR
>80fc	bd 82					.word	EndCommand                       ; $85 END
>80fe	67 84					.word	Command_List                     ; $86 LIST
>8100	fd 84					.word	NewCommand                       ; $87 NEW
>8102	17 86					.word	Command_Restore                  ; $88 RESTORE
>8104	49 86					.word	CommandRUN                       ; $89 RUN
>8106	b6 86					.word	StopCommand                      ; $8a STOP
.8108					VectorSet2:
>8108	f3 9f					.word	SyntaxError                      ; $80 !0:EOF
>810a	f3 9f					.word	SyntaxError                      ; $81 !1:SH1
>810c	f3 9f					.word	SyntaxError                      ; $82 !2:SH2
>810e	f3 9f					.word	SyntaxError                      ; $83 ADC
>8110	f3 9f					.word	SyntaxError                      ; $84 AND
>8112	f3 9f					.word	SyntaxError                      ; $85 ASL
>8114	f3 9f					.word	SyntaxError                      ; $86 BCC
>8116	f3 9f					.word	SyntaxError                      ; $87 BCS
>8118	f3 9f					.word	SyntaxError                      ; $88 BEQ
>811a	f3 9f					.word	SyntaxError                      ; $89 BIT
>811c	f3 9f					.word	SyntaxError                      ; $8a BMI
>811e	f3 9f					.word	SyntaxError                      ; $8b BNE
>8120	f3 9f					.word	SyntaxError                      ; $8c BPL
>8122	f3 9f					.word	SyntaxError                      ; $8d BRA
>8124	f3 9f					.word	SyntaxError                      ; $8e BRK
>8126	f3 9f					.word	SyntaxError                      ; $8f BVC
>8128	f3 9f					.word	SyntaxError                      ; $90 BVS
>812a	f3 9f					.word	SyntaxError                      ; $91 CLC
>812c	f3 9f					.word	SyntaxError                      ; $92 CLD
>812e	f3 9f					.word	SyntaxError                      ; $93 CLI
>8130	f3 9f					.word	SyntaxError                      ; $94 CLV
>8132	f3 9f					.word	SyntaxError                      ; $95 CMP
>8134	f3 9f					.word	SyntaxError                      ; $96 CPX
>8136	f3 9f					.word	SyntaxError                      ; $97 CPY
>8138	f3 9f					.word	SyntaxError                      ; $98 DEC
>813a	f3 9f					.word	SyntaxError                      ; $99 DEX
>813c	f3 9f					.word	SyntaxError                      ; $9a DEY
>813e	f3 9f					.word	SyntaxError                      ; $9b EOR
>8140	f3 9f					.word	SyntaxError                      ; $9c INC
>8142	f3 9f					.word	SyntaxError                      ; $9d INX
>8144	f3 9f					.word	SyntaxError                      ; $9e INY
>8146	f3 9f					.word	SyntaxError                      ; $9f JMP
>8148	f3 9f					.word	SyntaxError                      ; $a0 JSR
>814a	f3 9f					.word	SyntaxError                      ; $a1 LDA
>814c	f3 9f					.word	SyntaxError                      ; $a2 LDX
>814e	f3 9f					.word	SyntaxError                      ; $a3 LDY
>8150	f3 9f					.word	SyntaxError                      ; $a4 LSR
>8152	f3 9f					.word	SyntaxError                      ; $a5 NOP
>8154	f3 9f					.word	SyntaxError                      ; $a6 ORA
>8156	f3 9f					.word	SyntaxError                      ; $a7 PHA
>8158	f3 9f					.word	SyntaxError                      ; $a8 PHP
>815a	f3 9f					.word	SyntaxError                      ; $a9 PHX
>815c	f3 9f					.word	SyntaxError                      ; $aa PHY
>815e	f3 9f					.word	SyntaxError                      ; $ab PLA
>8160	f3 9f					.word	SyntaxError                      ; $ac PLP
>8162	f3 9f					.word	SyntaxError                      ; $ad PLX
>8164	f3 9f					.word	SyntaxError                      ; $ae PLY
>8166	f3 9f					.word	SyntaxError                      ; $af ROL
>8168	f3 9f					.word	SyntaxError                      ; $b0 ROR
>816a	f3 9f					.word	SyntaxError                      ; $b1 RTI
>816c	f3 9f					.word	SyntaxError                      ; $b2 RTS
>816e	f3 9f					.word	SyntaxError                      ; $b3 SBC
>8170	f3 9f					.word	SyntaxError                      ; $b4 SEC
>8172	f3 9f					.word	SyntaxError                      ; $b5 SED
>8174	f3 9f					.word	SyntaxError                      ; $b6 SEI
>8176	f3 9f					.word	SyntaxError                      ; $b7 STA
>8178	f3 9f					.word	SyntaxError                      ; $b8 STX
>817a	f3 9f					.word	SyntaxError                      ; $b9 STY
>817c	f3 9f					.word	SyntaxError                      ; $ba STZ
>817e	f3 9f					.word	SyntaxError                      ; $bb TAX
>8180	f3 9f					.word	SyntaxError                      ; $bc TAY
>8182	f3 9f					.word	SyntaxError                      ; $bd TRB
>8184	f3 9f					.word	SyntaxError                      ; $be TSB
>8186	f3 9f					.word	SyntaxError                      ; $bf TSX
>8188	f3 9f					.word	SyntaxError                      ; $c0 TXA
>818a	f3 9f					.word	SyntaxError                      ; $c1 TXS
>818c	f3 9f					.word	SyntaxError                      ; $c2 TYA

;******  Return to file: ./common/aa_system/00start.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assert.asm

.818e					AssertCommand:
.818e	a2 00		ldx #$00			ldx 	#0
.8190	20 b4 93	jsr $93b4			jsr 	EvaluateInteger 			; the assert test
.8193	20 6d 94	jsr $946d			jsr 	NSMIsZero 					; exit if result is non zero.
.8196	d0 05		bne $819d			bne 	_ACExit
.8198	a9 0a		lda #$0a		lda	#10
.819a	4c ea 88	jmp $88ea		jmp	ErrorHandler
.819d					_ACExit:
.819d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/call.asm

.819e					CallCommand:
.819e	a2 00		ldx #$00			ldx 	#0
.81a0	20 c9 93	jsr $93c9			jsr 	Evaluate16BitInteger
.81a3	ad 10 06	lda $0610			lda 	NSMantissa1
.81a6	8d 09 06	sta $0609			sta 	NSMantissa0+1
.81a9	6c 08 06	jmp ($0608)			jmp 	(NSMantissa0)

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/clear.asm

.81ac					ClearCommand:
.81ac	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.81ae	85 36		sta $36				sta 	0+zTemp0
.81b0	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.81b2	85 37		sta $37				sta 	1+zTemp0
.81b4					_ClearZeroLoop:
.81b4	b2 36		lda ($36)			lda 	(zTemp0) 					; end of variables
.81b6	f0 24		beq $81dc			beq 	_ClearZeroEnd
.81b8	a0 03		ldy #$03			ldy 	#3 							; erase the variables
.81ba	a9 00		lda #$00			lda 	#0
.81bc					_ClearOneVariable:
.81bc	91 36		sta ($36),y			sta 	(zTemp0),y
.81be	c8		iny				iny
.81bf	c0 08		cpy #$08			cpy 	#8
.81c1	d0 f9		bne $81bc			bne 	_ClearOneVariable
.81c3	a0 02		ldy #$02			ldy 	#2 							; has it been marked procedure
.81c5	b1 36		lda ($36),y			lda 	(zTemp0),y
.81c7	c9 18		cmp #$18			cmp 	#NSTProcedure
.81c9	d0 04		bne $81cf			bne 	_ClearNotProcedure
.81cb	a9 04		lda #$04			lda 	#NSTInteger+NSBIsArray 		; set it back to an integer array
.81cd	91 36		sta ($36),y			sta 	(zTemp0),y
.81cf					_ClearNotProcedure:
.81cf	18		clc				clc 								; go to the next variable
.81d0	b2 36		lda ($36)			lda 	(zTemp0)
.81d2	65 36		adc $36				adc 	zTemp0
.81d4	85 36		sta $36				sta 	zTemp0
.81d6	90 dc		bcc $81b4			bcc 	_ClearZeroLoop
.81d8	e6 37		inc $37				inc 	zTemp0+1
.81da	80 d8		bra $81b4			bra 	_ClearZeroLoop
.81dc					_ClearZeroEnd:
.81dc	18		clc				clc
.81dd	a5 36		lda $36				lda 	zTemp0
.81df	69 01		adc #$01			adc 	#1
.81e1	8d 0c 07	sta $070c			sta 	lowMemPtr
.81e4	a5 37		lda $37				lda 	zTemp0+1
.81e6	69 00		adc #$00			adc 	#0
.81e8	8d 0d 07	sta $070d			sta 	lowMemPtr+1
.81eb	20 cd 94	jsr $94cd			jsr 	StackReset
.81ee	20 cc a1	jsr $a1cc			jsr 	StringSystemInitialise
.81f1	20 0a 88	jsr $880a			jsr 	ProcedureScan
.81f4	20 17 86	jsr $8617			jsr 	Command_Restore
.81f7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/data.asm

.81f8					Command_Data:
.81f8	a9 3a		lda #$3a			lda 	#KWD_COLON 					; advance to colon/EOL
.81fa	a2 80		ldx #$80			ldx 	#KWC_EOL
.81fc	20 5c 88	jsr $885c			jsr 	ScanForward
.81ff	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/dim.asm

.8200					DimCommand:
.8200	b1 30		lda ($30),y			lda 	(codePtr),y
.8202	29 c0		and #$c0			and 	#$C0
.8204	c9 40		cmp #$40			cmp 	#$40
.8206	d0 7a		bne $8282			bne 	_DCSyntax
.8208	b1 30		lda ($30),y			lda 	(codePtr),y
.820a	18		clc				clc
.820b	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.820d	85 3f		sta $3f				sta 	zaTemp+1
.820f	c8		iny				iny
.8210	b1 30		lda ($30),y			lda 	(codePtr),y
.8212	c8		iny				iny
.8213	85 3e		sta $3e				sta 	zaTemp
.8215	5a		phy				phy
.8216	a0 02		ldy #$02			ldy 	#2 						; read type byte
.8218	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.821a	29 18		and #$18			and 	#NSBTypeMask 			; check it's not a procedure
.821c	c9 18		cmp #$18			cmp 	#NSTProcedure
.821e	f0 62		beq $8282			beq 	_DCSyntax
.8220	b1 3e		lda ($3e),y			lda 	(zaTemp),y 				; check it's an array
.8222	29 04		and #$04			and 	#NSBIsArray
.8224	f0 64		beq $828a			beq 	_DCType
.8226	a0 04		ldy #$04			ldy 	#4 						; check not already defined
.8228	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.822a	d0 59		bne $8285			bne 	_DCRedefine
.822c	7a		ply				ply
.822d	20 8d 82	jsr $828d			jsr 	_DCGetSize 				; get array size, check it.
.8230	5a		phy				phy
.8231	a0 05		ldy #$05			ldy 	#5 						; store in first array size slot
.8233	91 3e		sta ($3e),y			sta 	(zaTemp),y 				; second will be zero.
.8235	7a		ply				ply 							; is there a second (e.g. ,x)
.8236	b1 30		lda ($30),y			lda 	(codePtr),y
.8238	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.823a	d0 0a		bne $8246			bne 	_DCOneDimension
.823c	c8		iny				iny 							; skip comma
.823d	20 8d 82	jsr $828d			jsr 	_DCGetSize 				; get 2nd array size
.8240	5a		phy				phy
.8241	a0 06		ldy #$06			ldy 	#6 						; store in 2nd array size
.8243	91 3e		sta ($3e),y			sta 	(zaTemp),y
.8245	7a		ply				ply
.8246					_DCOneDimension:
.8246	5a		phy				phy 							; save position
.8247	a0 05		ldy #$05			ldy 	#5 						; dimensions + 1 in AX (as zero based)
.8249	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.824b	aa		tax				tax
.824c	c8		iny				iny
.824d	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.824f	e8		inx				inx 							; bump them.
.8250	1a		inc a				inc 	a
.8251	20 a5 9f	jsr $9fa5			jsr 	Multiply8x8 			; work out the total number of elements -> zTemp0
.8254	a5 37		lda $37				lda 	zTemp0+1 				; don't allow more than 8192 elements whatever
.8256	29 e0		and #$e0			and 	#$E0
.8258	d0 23		bne $827d			bne 	_DCSize
.825a	a0 02		ldy #$02			ldy 	#2 						; get base type
.825c	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.825e	20 9b 82	jsr $829b			jsr 	ScaleByBaseType 		; scale by base type
.8261	a5 36		lda $36				lda 	zTemp0
.8263	a6 37		ldx $37				ldx 	zTemp0+1
.8265	20 73 91	jsr $9173			jsr 	AllocateXABytes 		; allocate memory
.8268	a0 03		ldy #$03			ldy 	#3 						; copy into the address.
.826a	91 3e		sta ($3e),y			sta 	(zaTemp),y
.826c	c8		iny				iny
.826d	8a		txa				txa
.826e	91 3e		sta ($3e),y			sta 	(zaTemp),y
.8270	7a		ply				ply 							; get position back
.8271	20 23 9b	jsr $9b23			jsr 	CheckRightBracket 		; check )
.8274	b1 30		lda ($30),y			lda 	(codePtr),y
.8276	c8		iny				iny 							; consume in case
.8277	c9 2c		cmp #$2c			cmp 	#KWD_COMMA		 		; if so do another DIM.
.8279	f0 85		beq $8200			beq 	DimCommand
.827b	88		dey				dey 							; undo consume
.827c	60		rts				rts
.827d					_DCSize:
.827d	a9 16		lda #$16		lda	#22
.827f	4c ea 88	jmp $88ea		jmp	ErrorHandler
.8282					_DCSyntax:
.8282	4c f3 9f	jmp $9ff3			jmp 	SyntaxError
.8285					_DCRedefine:
.8285	a9 15		lda #$15		lda	#21
.8287	4c ea 88	jmp $88ea		jmp	ErrorHandler
.828a					_DCType:
.828a	4c fd 9f	jmp $9ffd			jmp 	TypeError
.828d					_DCGetSize:
.828d	a2 00		ldx #$00			ldx 	#0 						; get first index.
.828f	20 d5 93	jsr $93d5			jsr 	Evaluate8BitInteger 	; get array dimension
.8292	c9 00		cmp #$00			cmp 	#0 						; must be 1-254
.8294	f0 e7		beq $827d			beq 	_DCSize
.8296	c9 fe		cmp #$fe			cmp 	#254
.8298	f0 e3		beq $827d			beq 	_DCSize
.829a	60		rts				rts
.829b					ScaleByBaseType:
.829b	29 10		and #$10			and 	#NSBIsString 			; is it string
.829d	d0 19		bne $82b8			bne 	_SBBTString
.829f	a5 37		lda $37				lda 	zTemp0+1 				; push value on stack
.82a1	48		pha				pha
.82a2	a5 36		lda $36				lda 	zTemp0
.82a4	48		pha				pha
.82a5	06 36		asl $36				asl 	zTemp0 					; x 2
.82a7	26 37		rol $37				rol 	zTemp0+1
.82a9	06 36		asl $36				asl 	zTemp0 					; x 4
.82ab	26 37		rol $37				rol 	zTemp0+1
.82ad	68		pla				pla 							; add stacked value = x 5
.82ae	65 36		adc $36				adc 	zTemp0
.82b0	85 36		sta $36				sta 	zTemp0
.82b2	68		pla				pla
.82b3	65 37		adc $37				adc 	zTemp0+1
.82b5	85 37		sta $37				sta 	zTemp0+1
.82b7	60		rts				rts
.82b8					_SBBTString:
.82b8	06 36		asl $36				asl 	zTemp0
.82ba	26 37		rol $37				rol 	zTemp0+1
.82bc	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/end.asm

.82bd					EndCommand:
.82bd	4c 0c 80	jmp $800c			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/for.asm

.82c0					ForCommand:
.82c0	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; allocate 18 bytes on the return stack.
.82c2	20 7a 94	jsr $947a			jsr 	StackOpen
.82c5	a2 00		ldx #$00			ldx 	#0
.82c7	20 c4 8f	jsr $8fc4			jsr 	EvaluateTerm
.82ca	bd 00 06	lda $0600,x			lda 	NSStatus,x
.82cd	c9 20		cmp #$20			cmp 	#NSBIsReference+NSTInteger 	; do we have an integer 4 byte reference.
.82cf	d0 49		bne $831a			bne		_FCError
.82d1	a9 3d		lda #$3d			lda 	#KWD_EQUAL 					; =
.82d3	20 33 9b	jsr $9b33			jsr 	CheckNextA
.82d6	e8		inx				inx
.82d7	20 b4 93	jsr $93b4			jsr 	EvaluateInteger 			; <from> in +1
.82da	b1 30		lda ($30),y			lda 	(codePtr),y
.82dc	c8		iny				iny 								; consume it
.82dd	48		pha				pha 								; save on stack for later
.82de	c9 a5		cmp #$a5			cmp 	#KWD_DOWNTO
.82e0	f0 04		beq $82e6			beq 	_FCNoSyntax
.82e2	c9 ae		cmp #$ae			cmp 	#KWD_TO
.82e4	d0 37		bne $831d			bne 	_FCSyntaxError
.82e6					_FCNoSyntax:
.82e6	e8		inx				inx
.82e7	20 b4 93	jsr $93b4			jsr 	EvaluateInteger
.82ea	20 ac 94	jsr $94ac			jsr 	STKSaveCodePosition 		; save loop back position
.82ed	68		pla				pla 								; restore DOWNTO or TO
.82ee	5a		phy				phy 								; save Y on the stack
.82ef	49 a5		eor #$a5			eor 	#KWD_DOWNTO 				; 0 if DOWNTO, #0 if TO
.82f1	f0 02		beq $82f5			beq 	_FCNotDownTo
.82f3	a9 02		lda #$02			lda 	#2
.82f5					_FCNotDownTo:
.82f5	3a		dec a				dec 	a 							; 255 if DOWNTO, 1 if TO
.82f6	a0 10		ldy #$10			ldy 	#16
.82f8	91 34		sta ($34),y			sta 	(basicStack),y 				; copy that out to the Basic Stack.
.82fa	a0 06		ldy #$06			ldy 	#6
.82fc	ad 08 06	lda $0608			lda 	NSMantissa0
.82ff	91 34		sta ($34),y			sta 	(basicStack),y
.8301	ad 10 06	lda $0610			lda 	NSMantissa1
.8304	c8		iny				iny
.8305	91 34		sta ($34),y			sta 	(basicStack),y
.8307	a0 08		ldy #$08			ldy 	#8 							; set initial index value
.8309	a2 01		ldx #$01			ldx 	#1
.830b	20 20 83	jsr $8320			jsr 	FCIntegerToStack
.830e	a0 0c		ldy #$0c			ldy 	#12 						; set the terminal value
.8310	a2 02		ldx #$02			ldx 	#2
.8312	20 20 83	jsr $8320			jsr 	FCIntegerToStack
.8315	20 40 83	jsr $8340			jsr 	CopyIndexToReference
.8318	7a		ply				ply 								; restore position
.8319	60		rts				rts
.831a					_FCError:
.831a	4c fd 9f	jmp $9ffd			jmp 	TypeError
.831d					_FCSyntaxError:
.831d	4c f3 9f	jmp $9ff3			jmp 	SyntaxError
.8320					FCIntegerToStack:
.8320	3c 00 06	bit $0600,x			bit 	NSStatus,x 					; is the value negative
.8323	10 03		bpl $8328			bpl	 	_FCNotNegative
.8325	20 f2 93	jsr $93f2			jsr 	NSMNegateMantissa 			; if so 2's complement the mantissa
.8328					_FCNotNegative:
.8328	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy out to the basic stack
.832b	91 34		sta ($34),y			sta 	(basicStack),y
.832d	c8		iny				iny
.832e	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8331	91 34		sta ($34),y			sta 	(basicStack),y
.8333	c8		iny				iny
.8334	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.8337	91 34		sta ($34),y			sta 	(basicStack),y
.8339	c8		iny				iny
.833a	bd 20 06	lda $0620,x			lda 	NSMantissa3,x
.833d	91 34		sta ($34),y			sta 	(basicStack),y
.833f	60		rts				rts
.8340					CopyIndexToReference:
.8340	5a		phy				phy
.8341	a0 06		ldy #$06			ldy 	#6 							; copy address-8 to write to zTemp0
.8343	38		sec				sec 								; (because we copy from offset 8)
.8344	b1 34		lda ($34),y			lda 	(basicStack),y
.8346	e9 08		sbc #$08			sbc 	#8
.8348	85 36		sta $36				sta 	zTemp0
.834a	c8		iny				iny
.834b	b1 34		lda ($34),y			lda 	(basicStack),y
.834d	e9 00		sbc #$00			sbc 	#0
.834f	85 37		sta $37				sta 	zTemp0+1
.8351	a2 04		ldx #$04			ldx 	#4 							; this is the copy counter/
.8353	a0 0b		ldy #$0b			ldy 	#8+3 		 				; the MSB of the mantissa
.8355	b1 34		lda ($34),y			lda 	(basicStack),y
.8357	0a		asl a				asl 	a 							; into carry
.8358	a0 08		ldy #$08			ldy 	#8 							; where to copy from.
.835a	90 14		bcc $8370			bcc 	_CITRNormal
.835c	38		sec				sec
.835d					_CITRNegative:
.835d	a9 00		lda #$00			lda 	#0
.835f	f1 34		sbc ($34),y			sbc 	(basicStack),y
.8361	91 36		sta ($36),y			sta 	(zTemp0),y
.8363	c8		iny				iny
.8364	ca		dex				dex
.8365	d0 f6		bne $835d			bne 	_CITRNegative
.8367	88		dey				dey 								; look at MSB of mantissa
.8368	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set the MSB as negative packed.
.836a	09 80		ora #$80			ora 	#$80
.836c	91 36		sta ($36),y			sta 	(zTemp0),y
.836e	7a		ply				ply
.836f	60		rts				rts
.8370					_CITRNormal:
.8370	b1 34		lda ($34),y			lda 	(basicStack),y 				; copy without negation.
.8372	91 36		sta ($36),y			sta 	(zTemp0),y
.8374	c8		iny				iny
.8375	ca		dex				dex
.8376	d0 f8		bne $8370			bne 	_CITRNormal
.8378	7a		ply				ply 								; and exit.
.8379	60		rts				rts
.837a					NextCommand:
.837a	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; check FOR is TOS
.837c	a2 11		ldx #$11			ldx 	#ERRID_FOR 					; this error
.837e	20 a1 94	jsr $94a1			jsr 	StackCheckFrame
.8381	5a		phy				phy
.8382	a0 10		ldy #$10			ldy 	#16 						; get the step count
.8384	b1 34		lda ($34),y			lda 	(basicStack),y
.8386	85 36		sta $36				sta 	zTemp0 						; this is the sign extend
.8388	30 02		bmi $838c			bmi 	_NCStepNeg
.838a	64 36		stz $36				stz 	zTemp0 						; which is 0 or 255
.838c					_NCStepNeg:
.838c	a0 08		ldy #$08			ldy 	#8 							; offset to bump
.838e	a2 04		ldx #$04			ldx 	#4 							; count to bump
.8390	18		clc				clc
.8391					_NCBump:
.8391	71 34		adc ($34),y			adc 	(basicStack),y 				; add it
.8393	91 34		sta ($34),y			sta 	(basicStack),y
.8395	a5 36		lda $36				lda 	zTemp0 						; get sign extend for next time.
.8397	c8		iny				iny 								; next byte
.8398	ca		dex				dex 								; do four times
.8399	d0 f6		bne $8391			bne 	_NCBump
.839b	20 40 83	jsr $8340			jsr		CopyIndexToReference		; copy it to the reference variable.
.839e	a0 10		ldy #$10			ldy 	#16 						; get step count again
.83a0	b1 34		lda ($34),y			lda 	(basicStack),y
.83a2	0a		asl a				asl 	a 							; sign bit to carry
.83a3	a9 0c		lda #$0c			lda 	#12 						; offset of LHS = terminal offset
.83a5	85 38		sta $38				sta 	zTemp1
.83a7	90 02		bcc $83ab			bcc 	_NCCompRev 					; use if step is +ve
.83a9	a9 08		lda #$08			lda 	#8 							; now the LHS = index value
.83ab					_NCCompRev:
.83ab	85 38		sta $38				sta 	zTemp1 						; so zTemp0 is the index for LHS
.83ad	49 04		eor #$04			eor 	#(8^12) 					; and zTemp0+1 is the index for RHS
.83af	85 39		sta $39				sta 	zTemp1+1
.83b1	a2 04		ldx #$04			ldx 	#4 							; bytes to compare
.83b3	38		sec				sec
.83b4					_NCCompare:
.83b4	a4 38		ldy $38				ldy 	zTemp1 						; do compare using the two indices
.83b6	b1 34		lda ($34),y			lda 	(basicStack),y
.83b8	a4 39		ldy $39				ldy 	zTemp1+1
.83ba	f1 34		sbc ($34),y			sbc 	(basicStack),y
.83bc	e6 38		inc $38				inc 	zTemp1 						; bump the indices (inc,dex do not change C or V)
.83be	e6 39		inc $39				inc 	zTemp1+1
.83c0	ca		dex				dex 								; do it 4 times.
.83c1	d0 f1		bne $83b4			bne 	_NCCompare
.83c3	50 02		bvc $83c7			bvc 	_NCNoOverflow 				; convert to signed comparison
.83c5	49 80		eor #$80			eor 	#$80
.83c7					_NCNoOverflow:
.83c7	7a		ply				ply 								; restore Y position
.83c8	0a		asl a				asl 	a 							; is bit 7 set.
.83c9	90 04		bcc $83cf			bcc 	_NCLoopback 				; if no , >= so loop back
.83cb	20 93 94	jsr $9493			jsr 	StackClose 					; exit the loop
.83ce	60		rts				rts
.83cf					_NCLoopBack:
.83cf	20 bd 94	jsr $94bd			jsr 	STKLoadCodePosition 		; loop back
.83d2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/gosub.asm

.83d3					Command_GOSUB:
.83d3	a2 00		ldx #$00			ldx 	#0
.83d5	20 c9 93	jsr $93c9			jsr 	Evaluate16BitInteger 		; line number in Stack.0
.83d8	a9 e3		lda #$e3			lda 	#STK_GOSUB+3
.83da	20 7a 94	jsr $947a			jsr 	StackOpen 					; create frame
.83dd	20 ac 94	jsr $94ac			jsr 	STKSaveCodePosition 		; save current position
.83e0	4c f6 83	jmp $83f6			jmp 	GotoStackX
.83e3					Command_RETURN:
.83e3	a9 e0		lda #$e0			lda 	#STK_GOSUB 					; check TOS is this
.83e5	a2 0e		ldx #$0e			ldx 	#ERRID_GOSUB 				; this error
.83e7	20 a1 94	jsr $94a1			jsr 	StackCheckFrame
.83ea	20 bd 94	jsr $94bd			jsr 	STKLoadCodePosition 		; restore code position
.83ed	20 93 94	jsr $9493			jsr 	StackClose
.83f0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/goto.asm

.83f1					GotoCommand:
.83f1	a2 00		ldx #$00			ldx 	#0 							; GOTO where
.83f3	20 c9 93	jsr $93c9			jsr 	Evaluate16BitInteger
.83f6					GotoStackX:
.83f6	bd 10 06	lda $0610,x			lda  	NSMantissa1,x 				; put line # in XA. I'll keep this even though
.83f9	48		pha				pha 								; it is slightly inefficient, just in cases.
.83fa	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.83fd	fa		plx				plx
.83fe	20 e3 9a	jsr $9ae3			jsr 	MemoryTransferAX 			; transfer to line number AX.
.8401	4c 54 86	jmp $8654			jmp 	RunNewLine 					; and go straight to new line code.

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/if.asm

.8404					IfCommand:
.8404	a2 00		ldx #$00			ldx 	#0 							; If what.
.8406	20 91 93	jsr $9391			jsr 	EvaluateNumber
.8409	b1 30		lda ($30),y			lda 	(codePtr),y
.840b	c9 9e		cmp #$9e			cmp 	#KWD_THEN  					; could be THEN <stuff> or GOTO
.840d	d0 0a		bne $8419			bne 	_IFStructured
.840f	c8		iny				iny 								; consume THEN
.8410	20 6d 94	jsr $946d			jsr 	NSMIsZero 					; is it zero
.8413	f0 01		beq $8416			beq 	_IfFail 					; if fail, go to next line
.8415	60		rts				rts 								; if THEN just continue
.8416					_IfFail:
.8416	4c 9e 86	jmp $869e			jmp 	EOLCommand
.8419					_IfStructured:
.8419	20 6d 94	jsr $946d			jsr 	NSMIsZero 					; is it zero
.841c	d0 07		bne $8425			bne 	_IfExit 					; if not, then continue normally.
.841e	a9 a6		lda #$a6			lda 	#KWD_ELSE 					; look for else/endif
.8420	a2 9b		ldx #$9b			ldx 	#KWD_ENDIF
.8422	20 5c 88	jsr $885c			jsr 	ScanForward 				; and run from there/
.8425					_IfExit:
.8425	60		rts				rts
.8426					ElseCode:
.8426	a9 9b		lda #$9b			lda 	#KWD_ENDIF 					; else is only run after the if clause succeeds
.8428	aa		tax				tax 								; so just go to the structure exit
.8429	20 5c 88	jsr $885c			jsr 	ScanForward
.842c	60		rts				rts
.842d					EndIf:
.842d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/let.asm

.842e					LetCommand:
.842e	a2 00		ldx #$00			ldx 	#0
.8430	ad db 8c	lda $8cdb			lda 	PrecedenceLevel+"*"			; precedence > this
.8433	20 f5 8c	jsr $8cf5			jsr 	EvaluateExpressionAtPrecedence
.8436	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; is it a reference to an array
.8439	c9 38		cmp #$38			cmp		#NSTProcedure+NSBIsReference
.843b	f0 0e		beq $844b			beq 	_LetGoProc 					; it's a procedure call.
.843d	a9 3d		lda #$3d			lda 	#"=" 						; check =
.843f	20 33 9b	jsr $9b33			jsr 	CheckNextA
.8442	e8		inx				inx 								; RHS
.8443	20 88 93	jsr $9388			jsr 	EvaluateValue
.8446	ca		dex				dex
.8447	20 4e 84	jsr $844e			jsr 	AssignVariable
.844a	60		rts				rts
.844b					_LetGoProc:
.844b	4c 5e 85	jmp $855e			jmp 	CallProcedure
.844e					AssignVariable:
.844e	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check the string/number type bits match
.8451	48		pha				pha 								; save a copy
.8452	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.8455	29 10		and #$10			and 	#NSBIsString
.8457	d0 0b		bne $8464			bne 	_ASError
.8459	68		pla				pla 								; get back
.845a	29 10		and #$10			and 	#NSBIsString 				; check type
.845c	d0 03		bne $8461			bne 	_ASString
.845e	4c 30 8d	jmp $8d30			jmp 	AssignNumber
.8461					_ASString:
.8461	4c 9e 8d	jmp $8d9e			jmp 	AssignString
.8464					_ASError:
.8464	4c fd 9f	jmp $9ffd			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/list.asm

.8467					Command_List:
.8467	9c 0c 06	stz $060c			stz		NSMantissa0+4				; set the lower (slot 4) to 0 and upper (slot 7) to $FFFF
.846a	9c 14 06	stz $0614			stz 	NSMantissa1+4
.846d	a9 ff		lda #$ff			lda 	#$FF
.846f	8d 0f 06	sta $060f			sta 	NSMantissa0+7
.8472	8d 17 06	sta $0617			sta 	NSMantissa1+7
.8475	b1 30		lda ($30),y			lda 	(codePtr),y
.8477	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8479	f0 1e		beq $8499			beq 	_CLSecond
.847b	20 f2 84	jsr $84f2			jsr 	CLIsDigit 					; if not digit, list all
.847e	b0 24		bcs $84a4			bcs 	_CLStart
.8480	a2 04		ldx #$04			ldx 	#4 							; get 1st range into slot 4
.8482	20 c9 93	jsr $93c9			jsr 	Evaluate16BitInteger
.8485	b1 30		lda ($30),y			lda 	(codePtr),y
.8487	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8489	f0 0e		beq $8499			beq 	_CLSecond 					; if so go get it
.848b	ad 0c 06	lda $060c			lda 	NSMantissa0+4 				; copy 4->7
.848e	8d 0f 06	sta $060f			sta 	NSMantissa0+7
.8491	ad 14 06	lda $0614			lda 	NSMantissa1+4
.8494	8d 17 06	sta $0617			sta 	NSMantissa1+7
.8497	80 0b		bra $84a4			bra 	_CLStart
.8499					_CLSecond:
.8499	c8		iny				iny 								; consume comma
.849a	20 f2 84	jsr $84f2			jsr 	CLIsDigit 					; digit found
.849d	b0 05		bcs $84a4			bcs 	_CLStart 					; if not, continue listing
.849f	a2 07		ldx #$07			ldx 	#7 							; load 2nd range into slot 7
.84a1	20 c9 93	jsr $93c9			jsr 	Evaluate16BitInteger
.84a4					_CLStart
.84a4	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.84a6	85 30		sta $30				sta 	codePtr
.84a8	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.84aa	85 31		sta $31				sta 	codePtr+1
.84ac					_CLLoop:
.84ac	b2 30		lda ($30)			lda 	(codePtr)
.84ae	f0 2c		beq $84dc			beq 	_CLExit
.84b0	a2 04		ldx #$04			ldx 	#4 							; check range every time, line numbers aren't in order.
.84b2	20 df 84	jsr $84df			jsr 	CLCompareLineNo
.84b5	90 18		bcc $84cf			bcc 	_CLNext
.84b7	a2 07		ldx #$07			ldx 	#7
.84b9	20 df 84	jsr $84df			jsr 	CLCompareLineNo
.84bc	f0 02		beq $84c0			beq 	_CLDoThisOne
.84be	b0 0f		bcs $84cf			bcs 	_CLNext
.84c0					_CLDoThisOne:
.84c0	20 bb 86	jsr $86bb			jsr 	ListConvertLine 			; convert line into token Buffer
.84c3	a2 07		ldx #$07			ldx 	#(tokenBuffer >> 8) 		; print that line
.84c5	a9 1f		lda #$1f			lda 	#(tokenBuffer & $FF)
.84c7	20 43 89	jsr $8943			jsr 	PrintStringXA
.84ca	a9 0d		lda #$0d			lda 	#13 						; new line
.84cc	20 56 a2	jsr $a256			jsr 	EXTPrintCharacter
.84cf					_CLNext:
.84cf	18		clc				clc
.84d0	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.84d2	65 30		adc $30				adc 	codePtr
.84d4	85 30		sta $30				sta 	codePtr
.84d6	90 02		bcc $84da			bcc 	_CREExit
.84d8	e6 31		inc $31				inc 	codePtr+1
.84da					_CREExit:
.84da	80 d0		bra $84ac			bra 	_CLLoop
.84dc					_CLExit:
.84dc	4c 0c 80	jmp $800c			jmp 	WarmStart
.84df					CLCompareLineNo:
.84df	38		sec				sec
.84e0	a0 01		ldy #$01			ldy 	#1
.84e2	b1 30		lda ($30),y			lda 	(codePtr),y
.84e4	fd 08 06	sbc $0608,x			sbc 	NSMantissa0,x
.84e7	85 36		sta $36				sta 	zTemp0
.84e9	c8		iny				iny
.84ea	b1 30		lda ($30),y			lda 	(codePtr),y
.84ec	fd 10 06	sbc $0610,x			sbc 	NSMantissa1,x
.84ef	05 36		ora $36				ora 	zTemp0
.84f1	60		rts				rts
.84f2					CLIsDigit:
.84f2	b1 30		lda ($30),y			lda 	(codePtr),y
.84f4	c9 30		cmp #$30			cmp 	#"0"
.84f6	90 03		bcc $84fb			bcc	 	_CLIDExitFalse
.84f8	c9 3a		cmp #$3a			cmp 	#"9"+1
.84fa	60		rts				rts
.84fb					_CLIDExitFalse:
.84fb	38		sec				sec
.84fc	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/new.asm

.84fd					NewCommand:
.84fd	20 92 9a	jsr $9a92			jsr 	MemoryNew
.8500	9c 00 10	stz $1000			stz 	VariableSpace 				; erase all variables.
.8503	20 ac 81	jsr $81ac			jsr 	ClearCommand 				; clear everything.
.8506	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/print.asm

.8507					Command_Print:
.8507	18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.8508					_CPLoop:
.8508	08		php				php 								; save last action flag
.8509	b1 30		lda ($30),y			lda 	(codePtr),y
.850b	c9 80		cmp #$80			cmp  	#KWC_EOL 					; end of line or colon, exit now.
.850d	f0 46		beq $8555			beq 	_CPExit
.850f	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.8511	f0 42		beq $8555			beq 	_CPExit
.8513	68		pla				pla 								; throw last action flag
.8514	b1 30		lda ($30),y			lda 	(codePtr),y
.8516	c8		iny				iny
.8517	c9 3b		cmp #$3b			cmp 	#KWD_SEMICOLON				; is it a semicolon
.8519	f0 37		beq $8552			beq 	_CPContinueWithSameLine
.851b	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; comma
.851d	f0 2e		beq $854d			beq 	_CPTab
.851f	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; apostrophe (new line)
.8521	f0 26		beq $8549			beq 	_CPNewLine
.8523	88		dey				dey 								; undo the get.
.8524	a2 00		ldx #$00			ldx 	#0
.8526	20 88 93	jsr $9388			jsr 	EvaluateValue 				; get a value into slot 0
.8529	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; is it a number
.852c	29 10		and #$10			and 	#NSBIsString
.852e	f0 0b		beq $853b			beq 	_CPNumber
.8530	ae 10 06	ldx $0610			ldx 	NSMantissa1 				; string, print the text.
.8533	ad 08 06	lda $0608			lda 	NSMantissa0
.8536	20 43 89	jsr $8943			jsr 	PrintStringXA
.8539	80 cc		bra $8507			bra 	Command_Print 				; loop round clearing carry so NL if end
.853b					_CPNumber:
.853b	a9 05		lda #$05			lda 	#5 							; maximum decimals
.853d	20 5e 92	jsr $925e			jsr 	ConvertNumberToString 		; convert to string
.8540	a2 08		ldx #$08			ldx 	#DecimalBuffer >> 8
.8542	a9 8f		lda #$8f			lda 	#DecimalBuffer & $FF
.8544	20 43 89	jsr $8943			jsr 	PrintStringXA
.8547	80 be		bra $8507			bra 	Command_Print 				; loop round clearing carry so NL if end
.8549					_CPNewLine:
.8549	a9 0d		lda #$0d			lda 	#13
.854b	80 02		bra $854f			bra 	_CPPrintChar
.854d					_CPTab:
.854d	a9 09		lda #$09			lda 	#9 							; print TAB
.854f					_CPPrintChar:
.854f	20 56 a2	jsr $a256			jsr 	EXTPrintCharacter
.8552					_CPContinueWithSameLine:
.8552	38		sec				sec 								; loop round with carry set, which
.8553	80 b3		bra $8508			bra 	_CPLoop 					; will inhibit final CR
.8555					_CPExit:
.8555	28		plp				plp 								; get last action flag
.8556	b0 05		bcs $855d			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.8558	a9 0d		lda #$0d			lda 	#13 						; print new line
.855a	20 56 a2	jsr $a256			jsr 	EXTPrintCharacter
.855d					_CPExit2:
.855d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/procedure.asm

.855e					CallProcedure:
.855e	20 23 9b	jsr $9b23			jsr 	CheckRightBracket
.8561	a9 b3		lda #$b3			lda 	#STK_PROC+3 				; allocate 6 bytes on the return stack.
.8563	20 7a 94	jsr $947a			jsr 	StackOpen
.8566	20 ac 94	jsr $94ac			jsr 	STKSaveCodePosition 		; save loop position
.8569	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy variable (e.g. procedure) address to zTemp0
.856c	85 36		sta $36				sta 	zTemp0 						; this is the DATA not the RECORD
.856e	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8571	85 37		sta $37				sta 	zTemp0+1
.8573	a0 01		ldy #$01			ldy 	#1 							; copy code address back.
.8575	b2 36		lda ($36)			lda 	(zTemp0)
.8577	85 30		sta $30				sta 	safePtr
.8579	b1 36		lda ($36),y			lda 	(zTemp0),y
.857b	85 31		sta $31				sta 	safePtr+1
.857d	c8		iny				iny
.857e	b1 36		lda ($36),y			lda 	(zTemp0),y
.8580	85 32		sta $32				sta 	safePtr+2
.8582	c8		iny				iny
.8583	b1 36		lda ($36),y			lda 	(zTemp0),y
.8585	85 33		sta $33				sta 	safePtr+3
.8587	c8		iny				iny 								; get Y offset -> Y
.8588	b1 36		lda ($36),y			lda 	(zTemp0),y
.858a	a8		tay				tay
.858b	20 23 9b	jsr $9b23			jsr 	CheckRightBracket 			; check )
.858e	60		rts				rts 								; and continue from here
.9b15					Command_ENDPROC:
.9b15	a9 b0		lda #$b0			lda 	#STK_PROC 					; check TOS is this
.9b17	a2 14		ldx #$14			ldx 	#ERRID_PROC
.9b19	20 a1 94	jsr $94a1			jsr 	StackCheckFrame
.9b1c	20 bd 94	jsr $94bd			jsr 	STKLoadCodePosition 		; restore code position
.9b1f	20 93 94	jsr $9493			jsr 	StackClose
.9b22	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/read.asm

.858f					Command_Read:
.858f	a2 00		ldx #$00			ldx 	#0 							; evaluate the term which is the var/array element to assign
.8591	20 c4 8f	jsr $8fc4			jsr 	EvaluateTerm
.8594	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8597	29 20		and #$20			and 	#NSBIsReference				; get status byte on stack, identifies int, float, string.
.8599	f0 4a		beq $85e5			beq 	_CRSyntax 					; check reference (bit 0)
.859b	20 2e 86	jsr $862e			jsr 	SwapDataCodePtrs 			; swap code and data
.859e	ad 1a 07	lda $071a			lda 	inDataStatement 			; if in a data statement, we don't need to search
.85a1	d0 20		bne $85c3			bne 	_CRContinueData
.85a3					_CRKeepSearching:
.85a3	a9 a3		lda #$a3			lda 	#KWD_DATA 					; scan for instruction
.85a5	aa		tax				tax
.85a6	20 5c 88	jsr $885c			jsr 	ScanForward
.85a9	c9 a3		cmp #$a3			cmp 	#KWD_DATA 					; found data ?
.85ab	f0 16		beq $85c3			beq 	_CRHaveData 				; found it
.85ad	18		clc				clc
.85ae	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.85b0	65 30		adc $30				adc 	codePtr
.85b2	85 30		sta $30				sta 	codePtr
.85b4	90 02		bcc $85b8			bcc 	_CREExit
.85b6	e6 31		inc $31				inc 	codePtr+1
.85b8					_CREExit:
.85b8	a0 03		ldy #$03			ldy 	#3 							; start of line.
.85ba	b2 30		lda ($30)			lda 	(codePtr)
.85bc	d0 e5		bne $85a3			bne 	_CRKeepSearching
.85be	a9 0b		lda #$0b		lda	#11
.85c0	4c ea 88	jmp $88ea		jmp	ErrorHandler
.85c3					_CRHaveData:
.85c3					_CRContinueData:
.85c3	a2 01		ldx #$01			ldx 	#1
.85c5	20 88 93	jsr $9388			jsr 	EvaluateValue 				; evaluate value into slot # 1
.85c8	ca		dex				dex
.85c9	20 4e 84	jsr $844e			jsr		AssignVariable 				; do the assignment
.85cc	9c 1a 07	stz $071a			stz 	inDataStatement 			; clear in data
.85cf	b1 30		lda ($30),y			lda 	(codePtr),y
.85d1	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not, end of data statement
.85d3	d0 04		bne $85d9			bne 	_CRSwapBack
.85d5	c8		iny				iny 								; consume comma
.85d6	ee 1a 07	inc $071a			inc 	inDataStatement 			; set in data statement currently.
.85d9					_CRSwapBack:
.85d9	20 2e 86	jsr $862e			jsr 	SwapDataCodePtrs			; swap them back.
.85dc	b1 30		lda ($30),y			lda 	(codePtr),y
.85de	c8		iny				iny
.85df	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.85e1	f0 ac		beq $858f			beq 	Command_Read 				; if so go round again.
.85e3	88		dey				dey 								; unpick get.
.85e4	60		rts				rts
.85e5					_CRSyntax:
.85e5	4c f3 9f	jmp $9ff3			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/rem.asm

.85e8					RemCommand:
.85e8	b1 30		lda ($30),y			lda 	(codePtr),y
.85ea	c9 ff		cmp #$ff			cmp 	#KWC_STRING
.85ec	d0 06		bne $85f4			bne 	_RMExit
.85ee	c8		iny				iny
.85ef	98		tya				tya
.85f0	38		sec				sec
.85f1	71 30		adc ($30),y			adc 	(codePtr),y
.85f3	a8		tay				tay
.85f4					_RMExit:
.85f4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/repeat.asm

.85f5					Command_REPEAT:
.85f5	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; allocate 6 bytes on the return stack.
.85f7	20 7a 94	jsr $947a			jsr 	StackOpen
.85fa	20 ac 94	jsr $94ac			jsr 	STKSaveCodePosition 		; save loop position
.85fd	60		rts				rts
.85fe					Command_UNTIL:
.85fe	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; check REPEAT is TOS
.8600	a2 0f		ldx #$0f			ldx 	#ERRID_REPEAT 				; this error
.8602	20 a1 94	jsr $94a1			jsr 	StackCheckFrame
.8605	a2 00		ldx #$00			ldx 	#0
.8607	20 91 93	jsr $9391			jsr 	EvaluateNumber 				; work out the number
.860a	20 6d 94	jsr $946d			jsr 	NSMIsZero 					; check if zero
.860d	f0 04		beq $8613			beq 	_CULoopBack 				; if so keep looping
.860f	20 93 94	jsr $9493			jsr 	StackClose		 			; return
.8612	60		rts				rts
.8613					_CULoopBack:
.8613	20 bd 94	jsr $94bd			jsr 	STKLoadCodePosition 		; loop back
.8616	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/restore.asm

.8617					Command_Restore:
.8617	20 2e 86	jsr $862e			jsr 	SwapDataCodePtrs 			; swap code and data
.861a	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.861c	85 30		sta $30				sta 	codePtr
.861e	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.8620	85 31		sta $31				sta 	codePtr+1
.8622	20 2e 86	jsr $862e			jsr 	SwapDataCodePtrs 			; put them back
.8625	a9 03		lda #$03			lda 	#3 							; start at offset 3, e.g. first instruction of first line.
.8627	8d 19 07	sta $0719			sta 	dataPointer+4
.862a	9c 1a 07	stz $071a			stz 	inDataStatement 			; not in data statement
.862d	60		rts				rts
.862e					SwapDataCodePtrs:
.862e	da		phx				phx
.862f	a2 03		ldx #$03			ldx 	#3 							; swap 32 bit code pointer over
.8631					_SDCPLoop:
.8631	b5 30		lda $30,x			lda 	safePtr,x
.8633	48		pha				pha
.8634	bd 15 07	lda $0715,x			lda 	dataPointer,x
.8637	95 30		sta $30,x			sta 	safePtr,x
.8639	68		pla				pla
.863a	9d 15 07	sta $0715,x			sta 	dataPointer,x
.863d	ca		dex				dex
.863e	10 f1		bpl $8631			bpl 	_SDCPLoop
.8640	ad 19 07	lda $0719			lda 	dataPointer+4 				; swap Y position over.
.8643	8c 19 07	sty $0719			sty 	dataPointer+4
.8646	a8		tay				tay
.8647	fa		plx				plx
.8648	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/run.asm

.8649					CommandRUN:
.8649	20 ac 81	jsr $81ac			jsr 	ClearCommand 				; clear variable/stacks/etc.
.864c	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.864e	85 30		sta $30				sta 	codePtr
.8650	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.8652	85 31		sta $31				sta 	codePtr+1
.8654					RUNNewLine:
.8654	b2 30		lda ($30)			lda 	(codePtr)
.8656	f0 43		beq $869b			beq 	CRNoProgram         		; no then END.
.8658	a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack
.865a	9a		txs				txs
.865b					RUNCodePointerLine:
.865b	a0 02		ldy #$02			ldy 	#2 							; start of program
.865d					_CRIncMainLoop:
.865d	c8		iny				iny
.865e					_CRMainLoop:
.865e	9c 10 07	stz $0710			stz 	stringInitialised 			; clear the temporary string initialised flag.
.8661	b1 30		lda ($30),y			lda 	(codePtr),y
.8663	10 10		bpl $8675			bpl 	_CRNotKeyword
.8665	c9 96		cmp #$96			cmp 	#KWC_LAST_UNARY+1 			; if after unary, legitimate command
.8667	b0 04		bcs $866d			bcs 	_CRIsKeyword
.8669	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if unary, syntax error.
.866b	b0 28		bcs $8695			bcs		_CRSyntaxError
.866d					_CRIsKeyword:
.866d	c8		iny				iny 								; consume command
.866e	0a		asl a				asl 	a 							; double losing the MSB which is '1' as tokens are $80-$FF
.866f	aa		tax				tax 								; put in X for vector jump
.8670	20 98 86	jsr $8698			jsr 	_CRCallVector0 				; call the vector - effectively jsr (vectortable,X)
.8673	80 e9		bra $865e			bra 	_CRMainLoop 				; and loop round
.8675					_CRNotKeyword:
.8675	c9 3a		cmp #$3a			cmp 	#KWD_COLON 					; if a :, consume it and go round.
.8677	f0 e4		beq $865d			beq 	_CRIncMainLoop
.8679	c9 40		cmp #$40			cmp 	#$40 						; variable/call reference
.867b	90 05		bcc $8682			bcc 	_CRNotVariable
.867d					_CRGoLet:
.867d	20 2e 84	jsr $842e			jsr 	LetCommand
.8680	80 dc		bra $865e			bra 	_CRMainLoop
.8682					_CRNotVariable:
.8682	c9 3f		cmp #$3f			cmp 	#KWD_QMARK
.8684	f0 f7		beq $867d			beq 	_CRGoLet
.8686	c9 21		cmp #$21			cmp 	#KWD_PLING
.8688	f0 f3		beq $867d			beq 	_CRGoLet
.868a	c9 27		cmp #$27			cmp 	#KWD_QUOTE
.868c	f0 01		beq $868f			beq 	_CRGoRem
>868e	db						.byte 	$DB 						; causes a break in the emulator
.868f					_CRGoRem:
.868f	c8		iny				iny
.8690	20 e8 85	jsr $85e8			jsr 	RemCommand
.8693	80 c9		bra $865e			bra 	_CRMainLoop
.8695					_CRSyntaxError:
.8695	4c f3 9f	jmp $9ff3			jmp 	SyntaxError
.8698					_CRCallVector0:
.8698	7c 94 80	jmp ($8094,x)			jmp 	(VectorSet0,x)
.869b					CRNoProgram:
.869b	4c bd 82	jmp $82bd			jmp 	EndCommand
.869e					EOLCommand:
.869e	18		clc				clc
.869f	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.86a1	65 30		adc $30				adc 	codePtr
.86a3	85 30		sta $30				sta 	codePtr
.86a5	90 02		bcc $86a9			bcc 	_CREExit
.86a7	e6 31		inc $31				inc 	codePtr+1
.86a9					_CREExit:
.86a9	80 a9		bra $8654			bra 	RunNewLine
.86ab					Shift1Command:
.86ab	b1 30		lda ($30),y			lda 	(codePtr),y
.86ad	c8		iny				iny
.86ae	0a		asl a				asl 	a
.86af	aa		tax				tax
.86b0	7c f2 80	jmp ($80f2,x)			jmp 	(VectorSet1,x)
.86b3					Unused1:
.86b3					Unused2:
.86b3					Unused3:
.86b3					Unused4:
.86b3	4c f3 9f	jmp $9ff3			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/stop.asm

.86b6					StopCommand:
.86b6	a9 08		lda #$08		lda	#8
.86b8	4c ea 88	jmp $88ea		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/expandline.asm

.86bb					ListConvertLine:
.86bb	9c 1b 07	stz $071b			stz 	tbOffset
.86be	9c 1f 07	stz $071f			stz 	tokenBuffer
.86c1	a0 02		ldy #$02			ldy 	#2 							; convert line number to string
.86c3	b1 30		lda ($30),y			lda 	(codePtr),y
.86c5	aa		tax				tax
.86c6	88		dey				dey
.86c7	b1 30		lda ($30),y			lda 	(codePtr),y
.86c9	20 7f 9c	jsr $9c7f			jsr 	ConvertInt16
.86cc	85 36		sta $36				sta 	zTemp0 						; copy number into buffer
.86ce	86 37		stx $37				stx 	zTemp0+1
.86d0	a0 00		ldy #$00			ldy 	#0
.86d2					_LCCopyNumber:
.86d2	b1 36		lda ($36),y			lda 	(zTemp0),y
.86d4	20 d1 87	jsr $87d1			jsr 	LCLWrite
.86d7	c8		iny				iny
.86d8	b1 36		lda ($36),y			lda 	(zTemp0),y
.86da	d0 f6		bne $86d2			bne 	_LCCopyNumber
.86dc					_LCPadOut:
.86dc	a9 20		lda #$20			lda 	#' '						; pad out to 6 characters
.86de	20 d1 87	jsr $87d1			jsr 	LCLWrite
.86e1	ad 1b 07	lda $071b			lda 	tbOffset
.86e4	c9 06		cmp #$06			cmp 	#6
.86e6	d0 f4		bne $86dc			bne 	_LCPadOut
.86e8	a0 03		ldy #$03			ldy 	#3 							; start position.
.86ea					_LCMainLoop:
.86ea	b1 30		lda ($30),y			lda 	(codePtr),y
.86ec	c9 80		cmp #$80			cmp 	#KWC_EOL 					; end of line ?
.86ee	f0 17		beq $8707			beq 	_LCExit
.86f0	c9 10		cmp #$10			cmp 	#16 						; 0-5 are the double punctuations
.86f2	90 14		bcc $8708			bcc 	_LCDoubles
.86f4	c9 20		cmp #$20			cmp 	#32 						; 16-31 are shifted punctuation from 64-91
.86f6	90 20		bcc $8718			bcc 	_LCShiftPunc
.86f8	c9 40		cmp #$40			cmp 	#64 						; 32-64 are as stored, punc and digits
.86fa	90 2b		bcc $8727			bcc 	_LCPunctuation
.86fc	c9 80		cmp #$80			cmp 	#128 						; 64-127 are variable identifiers.
.86fe	90 2d		bcc $872d			bcc 	_LCIdentifiers
.8700	c9 fe		cmp #$fe			cmp 	#254 						; 128-253 are tokenised words
.8702	90 49		bcc $874d			bcc 	_LCTokens
.8704	4c a5 87	jmp $87a5			jmp 	_LCData 					; 254-5 are data objects
.8707					_LCExit:
.8707	60		rts				rts
.8708					_LCDoubles:
.8708	48		pha				pha
.8709	4a		lsr a				lsr 	a 							; put bit 2 into bit 1
.870a	29 02		and #$02			and 	#2
.870c	09 3c		ora #$3c			ora 	#60 						; make < >
.870e	20 d1 87	jsr $87d1			jsr 	LCLWrite
.8711	68		pla				pla 								; restore, do lower bit
.8712	29 03		and #$03			and 	#3
.8714	09 3c		ora #$3c			ora 	#60
.8716	80 0f		bra $8727			bra		_LCPunctuation 				; print, increment, loop
.8718					_LCShiftPunc:
.8718	aa		tax				tax 								; save in X
.8719	29 07		and #$07			and 	#7 							; lower 3 bits
.871b	f0 02		beq $871f			beq 	_LCNoAdd
.871d	09 18		ora #$18			ora 	#24 						; adds $18 to it.
.871f					_LCNoAdd:
.871f	e0 18		cpx #$18			cpx 	#24 						; if >= 24 add $20
.8721	90 02		bcc $8725			bcc 	_LCNoAdd2
.8723	09 20		ora #$20			ora 	#32 						; adds $20
.8725					_LCNoAdd2:
.8725	09 40		ora #$40			ora 	#$40 						; shift into 64-127 range and fall through.
.8727					_LCPunctuation:
.8727	c8		iny				iny 								; consume character
.8728	20 d1 87	jsr $87d1			jsr 	LCLWrite 					; write it out.
.872b	80 bd		bra $86ea			bra 	_LCMainLoop 				; go round again.
.872d					_LCIdentifiers:
.872d	18		clc				clc 								; convert to physical address
.872e	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8730	85 37		sta $37				sta 	zTemp0+1
.8732	c8		iny				iny
.8733	b1 30		lda ($30),y			lda 	(codePtr),y
.8735	85 36		sta $36				sta 	zTemp0
.8737	c8		iny				iny
.8738	5a		phy				phy 								; save position
.8739	a0 07		ldy #$07			ldy 	#7 							; output the identifier.
.873b					_LCOutIdentifier:
.873b	c8		iny				iny
.873c	b1 36		lda ($36),y			lda 	(zTemp0),y
.873e	29 7f		and #$7f			and 	#$7F
.8740	20 ff 87	jsr $87ff			jsr 	LCLLowerCase
.8743	20 d1 87	jsr $87d1			jsr 	LCLWrite
.8746	b1 36		lda ($36),y			lda 	(zTemp0),y				 	; ends when bit 7 set.
.8748	10 f1		bpl $873b			bpl 	_LCOutIdentifier
.874a	7a		ply				ply 								; restore position
.874b	80 9d		bra $86ea			bra 	_LCMainLoop
.874d					_LCTokens:
.874d	aa		tax				tax 								; token in X
.874e	a9 cc		lda #$cc			lda 	#((KeywordSet2) & $FF)
.8750	85 36		sta $36				sta 	0+zTemp0
.8752	a9 96		lda #$96			lda 	#((KeywordSet2) >> 8)
.8754	85 37		sta $37				sta 	1+zTemp0
.8756	e0 82		cpx #$82			cpx 	#$82
.8758	f0 16		beq $8770			beq 	_LCUseShift
.875a	a9 92		lda #$92			lda 	#((KeywordSet1) & $FF)
.875c	85 36		sta $36				sta 	0+zTemp0
.875e	a9 96		lda #$96			lda 	#((KeywordSet1) >> 8)
.8760	85 37		sta $37				sta 	1+zTemp0
.8762	e0 81		cpx #$81			cpx 	#$81
.8764	f0 0a		beq $8770			beq 	_LCUseShift
.8766	a9 70		lda #$70			lda 	#((KeywordSet0) & $FF)
.8768	85 36		sta $36				sta 	0+zTemp0
.876a	a9 95		lda #$95			lda 	#((KeywordSet0) >> 8)
.876c	85 37		sta $37				sta 	1+zTemp0
.876e	80 01		bra $8771			bra 	_LCNoShift
.8770					_LCUseShift:
.8770	c8		iny				iny
.8771					_LCNoShift:
.8771	20 e0 87	jsr $87e0			jsr 	LCCheckSpaceRequired 		; do we need a space ?
.8774	b1 30		lda ($30),y			lda 	(codePtr),y
.8776	aa		tax				tax 								; into X
.8777					_LCFindText:
.8777	ca		dex				dex
.8778	10 0e		bpl $8788			bpl 	_LCFoundText 				; found text.
.877a	b2 36		lda ($36)			lda 	(zTemp0) 					; length of text
.877c	1a		inc a				inc 	a 							; one extra for size
.877d	38		sec				sec 								; one extra for checksum
.877e	65 36		adc $36				adc 	zTemp0 						; go to next token
.8780	85 36		sta $36				sta 	zTemp0
.8782	90 f3		bcc $8777			bcc 	_LCFindText
.8784	e6 37		inc $37				inc 	zTemp0+1
.8786	80 ef		bra $8777			bra 	_LCFindText
.8788					_LCFoundText:
.8788	5a		phy				phy 								; save List position
.8789	b2 36		lda ($36)			lda 	(zTemp0)					; count to print
.878b	aa		tax				tax
.878c	a0 02		ldy #$02			ldy 	#2
.878e					_LCCopyToken:
.878e	b1 36		lda ($36),y			lda 	(zTemp0),y
.8790	20 d1 87	jsr $87d1			jsr 	LCLWrite
.8793	c8		iny				iny
.8794	ca		dex				dex
.8795	d0 f7		bne $878e			bne 	_LCCopyToken
.8797	c9 28		cmp #$28			cmp 	#"(" 						; if last char not ( print a space
.8799	f0 05		beq $87a0			beq 	_LCNoSpace
.879b	a9 20		lda #$20			lda 	#' '
.879d	20 d1 87	jsr $87d1			jsr 	LCLWrite
.87a0					_LCNoSpace:
.87a0	7a		ply				ply 								; restore position.
.87a1	c8		iny				iny 								; consume token
.87a2	4c ea 86	jmp $86ea			jmp 	_LCMainLoop 				; and go around again.
.87a5					_LCData:
.87a5	48		pha				pha 								; save type $FE/$FF
.87a6	a2 23		ldx #$23			ldx 	#'#' 						; figure out # or "
.87a8	c9 fe		cmp #$fe			cmp 	#$FE
.87aa	f0 02		beq $87ae			beq 	_LCHaveOpener
.87ac	a2 22		ldx #$22			ldx 	#'"'
.87ae					_LCHaveOpener:
.87ae	8a		txa				txa 								; output prefix (# or ")
.87af	20 d1 87	jsr $87d1			jsr 	LCLWrite
.87b2	c8		iny				iny 								; get count
.87b3	b1 30		lda ($30),y			lda 	(codePtr),y
.87b5	aa		tax				tax
.87b6	c8		iny				iny 								; point at first character
.87b7					_LCOutData:
.87b7	b1 30		lda ($30),y			lda 	(codePtr),y
.87b9	c9 00		cmp #$00			cmp 	#0
.87bb	f0 03		beq $87c0			beq 	_LCNoPrint
.87bd	20 d1 87	jsr $87d1			jsr 	LCLWrite
.87c0					_LCNoPrint:
.87c0	c8		iny				iny
.87c1	ca		dex				dex
.87c2	d0 f3		bne $87b7			bne 	_LCOutData
.87c4	68		pla				pla 								; closing " required ?
.87c5	c9 ff		cmp #$ff			cmp 	#$FF
.87c7	d0 05		bne $87ce			bne 	_LCNoQuote
.87c9	a9 22		lda #$22			lda 	#'"'
.87cb	20 d1 87	jsr $87d1			jsr 	LCLWrite
.87ce					_LCNoQuote:
.87ce	4c ea 86	jmp $86ea			jmp 	_LCMainLoop
.87d1					LCLWrite:
.87d1	da		phx				phx
.87d2	ae 1b 07	ldx $071b			ldx 	tbOffset
.87d5	9d 1f 07	sta $071f,x			sta 	tokenBuffer,x
.87d8	9e 20 07	stz $0720,x			stz 	tokenBuffer+1,x
.87db	ee 1b 07	inc $071b			inc 	tbOffset
.87de	fa		plx				plx
.87df	60		rts				rts
.87e0					LCCheckSpaceRequired:
.87e0	ae 1b 07	ldx $071b			ldx 	tbOffset
.87e3	bd 1e 07	lda $071e,x			lda 	tokenBuffer-1,x 			; previous character
.87e6	20 ff 87	jsr $87ff			jsr 	LCLLowerCase 				; saves a little effort
.87e9	c9 30		cmp #$30			cmp 	#"0" 						; check if it was 0-9 A-Z a-z if so need space.
.87eb	90 11		bcc $87fe			bcc 	_LCCSRExit
.87ed	c9 3a		cmp #$3a			cmp 	#"9"+1
.87ef	90 08		bcc $87f9			bcc 	_LCCSRSpace
.87f1	c9 61		cmp #$61			cmp 	#"a"
.87f3	90 09		bcc $87fe			bcc 	_LCCSRExit
.87f5	c9 7b		cmp #$7b			cmp 	#"z"+1
.87f7	b0 05		bcs $87fe			bcs 	_LCCSRExit
.87f9					_LCCSRSpace:
.87f9	a9 20		lda #$20			lda 	#' '
.87fb	20 d1 87	jsr $87d1			jsr 	LCLWrite
.87fe					_LCCSRExit:
.87fe	60		rts				rts
.87ff					LCLLowerCase:
.87ff	c9 41		cmp #$41			cmp 	#"A"
.8801	90 06		bcc $8809			bcc 	_LCLLCOut
.8803	c9 5b		cmp #$5b			cmp 	#"Z"+1
.8805	b0 02		bcs $8809			bcs 	_LCLLCOut
.8807	69 20		adc #$20			adc 	#$20
.8809					_LCLLCOut:
.8809	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/procscan.asm

.880a					ProcedureScan:
.880a	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.880c	85 30		sta $30				sta 	codePtr
.880e	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.8810	85 31		sta $31				sta 	codePtr+1
.8812					_PSLoop:
.8812	b2 30		lda ($30)			lda 	(codePtr)
.8814	f0 42		beq $8858			beq 	_PSExit
.8816	a0 03		ldy #$03			ldy 	#3 							; is it PROC ?
.8818	b1 30		lda ($30),y			lda 	(codePtr),y
.881a	c9 98		cmp #$98			cmp 	#KWD_PROC
.881c	d0 2d		bne $884b			bne 	_PSNext
.881e	c8		iny				iny 								; get the address of the record to zTemp0 and
.881f	b1 30		lda ($30),y			lda 	(codePtr),y
.8821	29 c0		and #$c0			and 	#$C0
.8823	c9 40		cmp #$40			cmp 	#$40
.8825	d0 32		bne $8859			bne 	_PSSyntax
.8827	b1 30		lda ($30),y			lda 	(codePtr),y
.8829	18		clc				clc
.882a	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.882c	85 37		sta $37				sta 	zTemp0+1
.882e	c8		iny				iny 								; LSB
.882f	b1 30		lda ($30),y			lda 	(codePtr),y
.8831	85 36		sta $36				sta 	zTemp0
.8833	c8		iny				iny 								; character after variable call.
.8834	98		tya				tya 								; save Y offset at +7
.8835	a0 07		ldy #$07			ldy 	#7
.8837	91 36		sta ($36),y			sta 	(zTemp0),y
.8839	a9 18		lda #$18			lda 	#NSTProcedure 				; mark it as procedure
.883b	a0 02		ldy #$02			ldy 	#2
.883d	91 36		sta ($36),y			sta 	(zTemp0),y
.883f	a2 00		ldx #$00			ldx 	#0 							; copy code-Ptr in
.8841					_PSCopy:
.8841	b5 30		lda $30,x			lda 	safePtr,x
.8843	c8		iny				iny
.8844	91 36		sta ($36),y			sta 	(zTemp0),y
.8846	e8		inx				inx
.8847	e0 04		cpx #$04			cpx 	#4
.8849	d0 f6		bne $8841			bne 	_PSCopy
.884b					_PSNext:
.884b	18		clc				clc
.884c	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.884e	65 30		adc $30				adc 	codePtr
.8850	85 30		sta $30				sta 	codePtr
.8852	90 02		bcc $8856			bcc 	_CREExit
.8854	e6 31		inc $31				inc 	codePtr+1
.8856					_CREExit:
.8856	80 ba		bra $8812			bra 	_PSLoop
.8858					_PSExit:
.8858	60		rts				rts
.8859					_PSSyntax:
.8859	4c f3 9f	jmp $9ff3			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/scanforward.asm

.885c					ScanForward:
.885c	85 36		sta $36				sta 	zTemp0 						; save XA as the two possible matches.
.885e	86 37		stx $37				stx 	zTemp0+1
.8860	64 38		stz $38				stz 	zTemp1 						; this is the structure count - goes up with WHILE/FOR
.8862					_ScanLoop:
.8862	b1 30		lda ($30),y			lda 	(codePtr),y
.8864	c8		iny				iny
.8865	a6 38		ldx $38				ldx 	zTemp1 						; if the count is > 0 cannot match as in substructure
.8867	d0 0e		bne $8877			bne 	_ScanGoNext
.8869	c5 36		cmp $36				cmp 	zTemp0 						; see if either matches
.886b	f0 04		beq $8871			beq 	_ScanMatch
.886d	c5 37		cmp $37				cmp 	zTemp0+1
.886f	d0 06		bne $8877			bne 	_ScanGoNext
.8871					_ScanMatch:
.8871	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if asked for EOL, backtrack.
.8873	d0 01		bne $8876			bne 	_ScanNotEndEOL
.8875	88		dey				dey
.8876					_ScanNotEndEOL:
.8876	60		rts				rts
.8877					_ScanGoNext:
.8877	c9 40		cmp #$40			cmp 	#$40 						; if 00-3F, punctuation characters, loop back
.8879	90 e7		bcc $8862			bcc 	_ScanLoop
.887b	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if 40-82, skip one extra.
.887d	90 18		bcc $8897			bcc 	_ScanSkipOne
.887f	c9 fc		cmp #$fc			cmp 	#$FC 						; FC-FF are data skips
.8881	b0 2f		bcs $88b2			bcs 	_ScanSkipData
.8883	c9 96		cmp #$96			cmp 	#KWC_FIRST_STRUCTURE 		; structure keyword ?
.8885	90 db		bcc $8862			bcc 	_ScanLoop 					; if not, ordinary keywords.
.8887	c9 a1		cmp #$a1			cmp 	#KWC_LAST_STRUCTURE+1
.8889	b0 d7		bcs $8862			bcs 	_ScanLoop
.888b	c6 38		dec $38				dec 	zTemp1 						; decrement the sructure count
.888d	c9 9b		cmp #$9b			cmp 	#KWC_FIRST_STRUCTURE_DEC 	; back if it is a dec structure (e.g. WEND/NEXT)
.888f	b0 d1		bcs $8862			bcs 	_ScanLoop
.8891	e6 38		inc $38				inc 	zTemp1 						; so it's an increment structure
.8893	e6 38		inc $38				inc 	zTemp1 						; twice to undo the dec
.8895	80 cb		bra $8862			bra 	_ScanLoop
.8897					_ScanSkipOne:
.8897	c8		iny				iny 								; consume the extra one.
.8898	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if not EOL loop back
.889a	d0 c6		bne $8862			bne 	_ScanLoop
.889c	18		clc				clc
.889d	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.889f	65 30		adc $30				adc 	codePtr
.88a1	85 30		sta $30				sta 	codePtr
.88a3	90 02		bcc $88a7			bcc 	_CREExit
.88a5	e6 31		inc $31				inc 	codePtr+1
.88a7					_CREExit:
.88a7	a0 03		ldy #$03			ldy 	#3 							; scan start position.
.88a9	b2 30		lda ($30)			lda 	(codePtr)
.88ab	d0 b5		bne $8862			bne 	_ScanLoop 					; if not zero, more to scan
.88ad	a9 13		lda #$13		lda	#19
.88af	4c ea 88	jmp $88ea		jmp	ErrorHandler
.88b2					_ScanSkipData:
.88b2	88		dey				dey 								; point at data token
.88b3	c8		iny				iny
.88b4	98		tya				tya
.88b5	38		sec				sec
.88b6	71 30		adc ($30),y			adc 	(codePtr),y
.88b8	a8		tay				tay
.88b9	80 a7		bra $8862			bra 	_ScanLoop

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/while.asm

.88bb					Command_WHILE:
.88bb	5a		phy				phy 								; save position of the test
.88bc	a2 00		ldx #$00			ldx 	#0
.88be	20 91 93	jsr $9391			jsr 	EvaluateNumber 				; work out the number
.88c1	20 6d 94	jsr $946d			jsr 	NSMIsZero 					; check if zero
.88c4	f0 0e		beq $88d4			beq 	_WHExitLoop 				; if so exit the loop
.88c6	98		tya				tya 								; position *after* test.
.88c7	7a		ply				ply 								; restore position before test, at WHILE
.88c8	88		dey				dey
.88c9	48		pha				pha 								; push after test on the stack
.88ca	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; allocate 6 bytes on the return stack.
.88cc	20 7a 94	jsr $947a			jsr 	StackOpen
.88cf	20 ac 94	jsr $94ac			jsr 	STKSaveCodePosition 		; save loop position - where the test value is.
.88d2	7a		ply				ply 								; restore the position *after* the test
.88d3	60		rts				rts
.88d4					_WHExitLoop:
.88d4	68		pla				pla 								; throw post loop position
.88d5	a9 a0		lda #$a0			lda 	#KWD_WEND 					; scan forward past WEND
.88d7	aa		tax				tax
.88d8	20 5c 88	jsr $885c			jsr 	ScanForward
.88db	60		rts				rts
.88dc					Command_WEND:
.88dc	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; check WHILE is TOS
.88de	a2 10		ldx #$10			ldx 	#ERRID_WHILE 				; this error
.88e0	20 a1 94	jsr $94a1			jsr 	StackCheckFrame
.88e3	20 bd 94	jsr $94bd			jsr 	STKLoadCodePosition 		; loop back
.88e6	20 93 94	jsr $9493			jsr 	StackClose		 			; erase the frame
.88e9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/charcheck.asm

.9b23					CheckRightBracket:
.9b23	b1 30		lda ($30),y			lda 	(codePtr),y
.9b25	c8		iny				iny
.9b26	c9 29		cmp #$29			cmp 	#KWD_RPAREN 						; exit if matches
.9b28	d0 0f		bne $9b39			bne 	CNAFail
.9b2a	60		rts				rts
.9b2b					CheckComma:
.9b2b	b1 30		lda ($30),y			lda 	(codePtr),y
.9b2d	c8		iny				iny
.9b2e	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 						; exit if matches
.9b30	d0 07		bne $9b39			bne 	CNAFail
.9b32	60		rts				rts
.9b33					CheckNextA:
.9b33	d1 30		cmp ($30),y			cmp 	(codePtr),y
.9b35	d0 02		bne $9b39			bne 	CNAFail
.9b37	c8		iny				iny 								; skip character
.9b38	60		rts				rts 								; and exit
.9b39					CNAFail:
.9b39	4c f3 9f	jmp $9ff3			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/errors.asm

.88ea					ErrorHandler:
.88ea	a8		tay				tay 								; find the error text
.88eb	f0 49		beq $8936			beq 	_EHEnd
.88ed	a2 00		ldx #$00			ldx 	#0
.88ef	a9 0c		lda #$0c			lda 	#((ErrorText) & $FF)
.88f1	85 36		sta $36				sta 	0+zTemp0
.88f3	a9 a0		lda #$a0			lda 	#((ErrorText) >> 8)
.88f5	85 37		sta $37				sta 	1+zTemp0
.88f7					_EHFind:
.88f7	88		dey				dey 								; found the error text ?
.88f8	f0 0e		beq $8908			beq 	_EHFound
.88fa					_EHFindZero:
.88fa	b2 36		lda ($36)			lda 	(zTemp0) 					; find the next error
.88fc	e6 36		inc $36				inc 	zTemp0
.88fe	d0 02		bne $8902			bne 	_EHFNoCarry
.8900	e6 37		inc $37				inc 	zTemp0+1
.8902					_EHFNoCarry:
.8902	c9 00		cmp #$00			cmp 	#0
.8904	d0 f4		bne $88fa			bne 	_EHFindZero
.8906	80 ef		bra $88f7			bra 	_EHFind
.8908					_EHFound:
.8908	a5 36		lda $36				lda 	zTemp0 						; print message
.890a	a6 37		ldx $37				ldx 	zTemp0+1
.890c	20 43 89	jsr $8943			jsr 	PrintStringXA
.890f	a0 01		ldy #$01			ldy 	#1 							; if line number zero don't print i
.8911	b1 30		lda ($30),y			lda 	(codePtr),y
.8913	d0 05		bne $891a			bne 	_EHAtMsg
.8915	c8		iny				iny
.8916	b1 30		lda ($30),y			lda 	(codePtr),y
.8918	f0 17		beq $8931			beq 	_EHCREnd
.891a					_EHAtMsg:
.891a	a2 89		ldx #$89			ldx 	#_AtMsg >> 8 				; print " at "
.891c	a9 39		lda #$39			lda 	#_AtMsg & $FF
.891e	20 43 89	jsr $8943			jsr 	PrintStringXA
.8921	a0 01		ldy #$01			ldy 	#1 							; line number into XA
.8923	b1 30		lda ($30),y			lda 	(codePtr),y
.8925	48		pha				pha
.8926	c8		iny				iny
.8927	b1 30		lda ($30),y			lda 	(codePtr),y
.8929	aa		tax				tax
.892a	68		pla				pla
.892b	20 7f 9c	jsr $9c7f			jsr 	ConvertInt16 				; convert XA to string
.892e	20 43 89	jsr $8943			jsr 	PrintStringXA 				; and print it.
.8931					_EHCREnd:
.8931	a9 0d		lda #$0d			lda 	#13 						; new line
.8933	20 56 a2	jsr $a256			jsr 	EXTPrintCharacter
.8936					_EHEnd:
.8936	4c 0c 80	jmp $800c			jmp 	WarmStart
>8939	20 61 74 20 6c 69 6e 65		_AtMsg:	.text 	" at line ",0
>8941	20 00
.8943					PrintStringXA:
.8943	5a		phy				phy
.8944	86 37		stx $37				stx 	zTemp0+1
.8946	85 36		sta $36				sta 	zTemp0
.8948	a0 00		ldy #$00			ldy 	#0
.894a					_PSXALoop:
.894a	b1 36		lda ($36),y			lda 	(zTemp0),y
.894c	f0 06		beq $8954			beq 	_PSXAExit
.894e	20 56 a2	jsr $a256			jsr 	EXTPrintCharacter
.8951	c8		iny				iny
.8952	80 f6		bra $894a			bra 	_PSXALoop
.8954					_PSXAExit:
.8954	7a		ply				ply
.8955	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/compare.asm

.8956					UnaryTrue:
.8956	fa		plx				plx
.8957					ReturnTrue:
.8957	a9 01		lda #$01			lda 	#1  						; set to 1
.8959	20 3f 94	jsr $943f			jsr 	NSMSetByte
.895c	a9 80		lda #$80			lda 	#$80 						; set sign flag, so it is -1
.895e	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8961	60		rts				rts
.8962					UnaryFalse:
.8962	fa		plx				plx
.8963					ReturnFalse:
.8963	4c 3d 94	jmp $943d			jmp 	NSMSetZero 					; set it all to zero
.8966					BinaryCompareEqual:
.8966	fa		plx				plx
.8967	20 a2 89	jsr $89a2			jsr 	CompareBaseCode
.896a	c9 00		cmp #$00			cmp 	#0
.896c	f0 e9		beq $8957			beq 	ReturnTrue
.896e	80 f3		bra $8963			bra 	ReturnFalse
.8970					BinaryCompareLess:
.8970	fa		plx				plx
.8971	20 a2 89	jsr $89a2			jsr 	CompareBaseCode
.8974	c9 ff		cmp #$ff			cmp 	#$FF
.8976	f0 df		beq $8957			beq 	ReturnTrue
.8978	80 e9		bra $8963			bra 	ReturnFalse
.897a					BinaryCompareGreater:
.897a	fa		plx				plx
.897b	20 a2 89	jsr $89a2			jsr 	CompareBaseCode
.897e	c9 01		cmp #$01			cmp 	#1
.8980	f0 d5		beq $8957			beq 	ReturnTrue
.8982	80 df		bra $8963			bra 	ReturnFalse
.8984					BinaryCompareNotEqual:
.8984	fa		plx				plx
.8985	20 a2 89	jsr $89a2			jsr 	CompareBaseCode
.8988	c9 00		cmp #$00			cmp 	#0
.898a	d0 cb		bne $8957			bne 	ReturnTrue
.898c	80 d5		bra $8963			bra 	ReturnFalse
.898e					BinaryCompareLessEqual:
.898e	fa		plx				plx
.898f	20 a2 89	jsr $89a2			jsr 	CompareBaseCode
.8992	c9 01		cmp #$01			cmp 	#1
.8994	d0 c1		bne $8957			bne 	ReturnTrue
.8996	80 cb		bra $8963			bra 	ReturnFalse
.8998					BinaryCompareGreaterEqual:
.8998	fa		plx				plx
.8999	20 a2 89	jsr $89a2			jsr 	CompareBaseCode
.899c	c9 ff		cmp #$ff			cmp 	#$FF
.899e	d0 b7		bne $8957			bne 	ReturnTrue
.89a0	80 c1		bra $8963			bra 	ReturnFalse
.89a2					CompareBaseCode:
.89a2	20 03 8e	jsr $8e03			jsr 	DereferenceTopTwo 			; make both values if references.
.89a5	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if either is a string.
.89a8	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.89ab	29 10		and #$10			and 	#NSTString
.89ad	d0 40		bne $89ef			bne 	_CBCString
.89af	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check both are integers
.89b2	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.89b5	d0 3b		bne $89f2			bne 	_CBCFloat
.89b7	bd 00 06	lda $0600,x			lda 	NSStatus,x
.89ba	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.89bd	29 08		and #$08			and 	#NSTFloat
.89bf	d0 31		bne $89f2			bne 	_CBCFloat
.89c1	20 f5 89	jsr $89f5			jsr 	CompareFixMinusZero
.89c4	e8		inx				inx
.89c5	20 f5 89	jsr $89f5			jsr 	CompareFixMinusZero
.89c8	ca		dex				dex
.89c9	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; are the signs different ?
.89cc	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.89cf	10 0b		bpl $89dc			bpl 	_CDCSameSign
.89d1	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; if first one is -ve
.89d4	30 16		bmi $89ec			bmi 	_CBCLess 					; return $FF
.89d6					_CBCGreater:
.89d6	a9 01		lda #$01			lda 	#1
.89d8	60		rts				rts
.89d9					_CBCEqual:
.89d9	a9 00		lda #$00			lda 	#0
.89db	60		rts				rts
.89dc					_CDCSameSign:
.89dc	20 05 8b	jsr $8b05			jsr 	SubTopTwoStack 				; unsigned subtract
.89df	20 6d 94	jsr $946d			jsr 	NSMIsZero 					; or the mantissa together
.89e2	f0 f5		beq $89d9			beq 	_CBCEqual 					; -0 == 0
.89e4	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; sign of the result. if +ve return $01 else return $FF
.89e7	5d 01 06	eor $0601,x			eor 	NSStatus+1,x 				; however if both were -ve this is inverted
.89ea	10 ea		bpl $89d6			bpl 	_CBCGreater
.89ec					_CBCLess:
.89ec	a9 ff		lda #$ff			lda 	#$FF
.89ee	60		rts				rts
.89ef					_CBCString:
.89ef	4c 5b 8a	jmp $8a5b			jmp 	CompareStrings
.89f2					_CBCFloat:
.89f2	4c 7b 9d	jmp $9d7b			jmp 	CompareFloat
.89f5					CompareFixMinusZero:
.89f5	20 6d 94	jsr $946d			jsr 	NSMIsZero
.89f8	d0 03		bne $89fd			bne 	_CFXMZNotZero
.89fa	9e 00 06	stz $0600,x			stz 	NSStatus,x
.89fd					_CFXMZNotZero:
.89fd	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/concat.asm

.89fe					StringConcat:
.89fe	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check both strings
.8a01	3d 01 06	and $0601,x			and 	NSStatus+1,x
.8a04	29 18		and #$18			and 	#NSBTypeMask
.8a06	c9 10		cmp #$10			cmp 	#NSTString
.8a08	d0 4e		bne $8a58			bne		_SCType
.8a0a	64 38		stz $38				stz 	zTemp1 						; counting total length
.8a0c	e8		inx				inx
.8a0d	20 2b 8a	jsr $8a2b			jsr 	_SCSetupZ0 					; setup for second
.8a10	20 36 8a	jsr $8a36			jsr 	_SCLengthZ0 				; length for second
.8a13	ca		dex				dex
.8a14	20 2b 8a	jsr $8a2b			jsr 	_SCSetupZ0 					; setup for first
.8a17	20 36 8a	jsr $8a36			jsr 	_SCLengthZ0 				; length for first
.8a1a	a5 38		lda $38				lda 	zTemp1 						; allocate memory
.8a1c	20 ed a1	jsr $a1ed			jsr 	StringTempAllocate
.8a1f	20 49 8a	jsr $8a49			jsr 	_SCCopy 					; copy first out, using zTemp0 from above
.8a22	e8		inx				inx
.8a23	20 2b 8a	jsr $8a2b			jsr 	_SCSetupZ0 					; copy second out
.8a26	20 49 8a	jsr $8a49			jsr 	_SCCopy
.8a29	ca		dex				dex
.8a2a	60		rts				rts
.8a2b					_SCSetupZ0:
.8a2b	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.8a2e	85 36		sta $36				sta 	zTemp0
.8a30	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8a33	85 37		sta $37				sta 	zTemp0+1
.8a35	60		rts				rts
.8a36					_SCLengthZ0:
.8a36	5a		phy				phy
.8a37	a0 00		ldy #$00			ldy 	#0
.8a39					_SCLenLoop:
.8a39	b1 36		lda ($36),y			lda 	(zTemp0),y
.8a3b	f0 0a		beq $8a47			beq 	_SCLExit
.8a3d	c8		iny				iny
.8a3e	e6 38		inc $38				inc 	zTemp1
.8a40	10 f7		bpl $8a39			bpl		_SCLenLoop
.8a42	a9 09		lda #$09		lda	#9
.8a44	4c ea 88	jmp $88ea		jmp	ErrorHandler
.8a47					_SCLExit:
.8a47	7a		ply				ply
.8a48	60		rts				rts
.8a49					_SCCopy:
.8a49	5a		phy				phy
.8a4a	a0 00		ldy #$00			ldy 	#0
.8a4c					_SCCopyLoop:
.8a4c	b1 36		lda ($36),y			lda 	(zTemp0),y
.8a4e	f0 06		beq $8a56			beq 	_SCCExit
.8a50	20 2b a2	jsr $a22b			jsr 	StringTempWrite
.8a53	c8		iny				iny
.8a54	80 f6		bra $8a4c			bra 	_SCCopyLoop
.8a56					_SCCExit:
.8a56	7a		ply				ply
.8a57	60		rts				rts
.8a58					_SCType:
.8a58	4c fd 9f	jmp $9ffd			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/divide.asm

.9b3c					IntegerDivide:
.9b3c	fa		plx				plx
.9b3d	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.9b40	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.9b43	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9b44	0a		asl a				asl 	a
.9b45	10 05		bpl $9b4c			bpl 	_NotRef
.9b47	48		pha				pha
.9b48	20 03 8e	jsr $8e03			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9b4b	68		pla				pla
.9b4c					_NotRef:
.9b4c	0a		asl a				asl 	a
.9b4d	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9b4f	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9b52	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.9b55	f0 03		beq $9b5a			beq 	_IntegerCode 				; if clear, then we have two integers
.9b57	4c fd 9f	jmp $9ffd			jmp 	TypeError 					; anything else, type mismatch.
.9b5a					_IntegerCode:
.9b5a	20 7c 9b	jsr $9b7c			jsr 	CheckDivideZero 			; do div zero check
.9b5d	20 b4 9b	jsr $9bb4			jsr 	Int32Divide 				; do the division
.9b60	20 71 9c	jsr $9c71			jsr 	CalculateSign 				; calculate result sign
.9b63					NSMCopyPlusTwoToZero:
.9b63	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.9b66	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.9b69	bd 12 06	lda $0612,x			lda 	NSMantissa1+2,x
.9b6c	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9b6f	bd 1a 06	lda $061a,x			lda 	NSMantissa2+2,x
.9b72	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.9b75	bd 22 06	lda $0622,x			lda 	NSMantissa3+2,x
.9b78	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.9b7b	60		rts				rts
.9b7c					CheckDivideZero:
.9b7c	e8		inx				inx
.9b7d	20 6d 94	jsr $946d			jsr 	NSMIsZero
.9b80	f0 02		beq $9b84			beq 	_CDVError
.9b82	ca		dex				dex
.9b83	60		rts				rts
.9b84					_CDVError:
.9b84	a9 03		lda #$03		lda	#3
.9b86	4c ea 88	jmp $88ea		jmp	ErrorHandler
.9b89					IntegerModulus:
.9b89	fa		plx				plx
.9b8a	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.9b8d	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.9b90	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9b91	0a		asl a				asl 	a
.9b92	10 05		bpl $9b99			bpl 	_NotRef
.9b94	48		pha				pha
.9b95	20 03 8e	jsr $8e03			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9b98	68		pla				pla
.9b99					_NotRef:
.9b99	0a		asl a				asl 	a
.9b9a	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9b9c	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9b9f	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.9ba2	f0 03		beq $9ba7			beq 	_IntegerCode 				; if clear, then we have two integers
.9ba4	4c fd 9f	jmp $9ffd			jmp 	TypeError 					; anything else, type mismatch.
.9ba7					_IntegerCode:
.9ba7	20 7c 9b	jsr $9b7c			jsr 	CheckDivideZero 			; do div zero check
.9baa	20 b4 9b	jsr $9bb4			jsr 	Int32Divide 				; do the division
.9bad	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; clear the sign bit.
.9bb0	5e 00 06	lsr $0600,x			lsr 	NSStatus,x
.9bb3	60		rts				rts
.9bb4					Int32Divide:
.9bb4	48		pha				pha 								; save AXY
.9bb5	5a		phy				phy
.9bb6	20 14 94	jsr $9414			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.9bb9	20 39 94	jsr $9439			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.9bbc	a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.9bbe					_I32DivideLoop:
.9bbe	e8		inx				inx
.9bbf	e8		inx				inx
.9bc0	20 52 94	jsr $9452			jsr 	NSMShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.9bc3	ca		dex				dex
.9bc4	ca		dex				dex
.9bc5	20 53 94	jsr $9453			jsr 	NSMRotateLeft
.9bc8	20 f4 9b	jsr $9bf4			jsr 	DivideCheckSubtract 		; check if subtract possible
.9bcb	90 03		bcc $9bd0			bcc 	_I32DivideNoCarryIn
.9bcd	fe 0a 06	inc $060a,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.9bd0					_I32DivideNoCarryIn:
.9bd0	88		dey				dey 								; loop round till division completed.
.9bd1	d0 eb		bne $9bbe			bne 	_I32DivideLoop
.9bd3	7a		ply				ply 								; restore AXY and exit
.9bd4	68		pla				pla
.9bd5	60		rts				rts
.9bd6					Int32ShiftDivide:
.9bd6	48		pha				pha 								; save AY
.9bd7	5a		phy				phy
.9bd8	e8		inx				inx 								; clear S[X+2]
.9bd9	e8		inx				inx
.9bda	20 3d 94	jsr $943d			jsr 	NSMSetZero
.9bdd	ca		dex				dex
.9bde	ca		dex				dex
.9bdf	a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.9be1					_I32SDLoop:
.9be1	20 f4 9b	jsr $9bf4			jsr 	DivideCheckSubtract 		; check if subtract possible
.9be4	e8		inx				inx
.9be5	e8		inx				inx
.9be6	20 53 94	jsr $9453			jsr 	NSMRotateLeft				; shift 64 bit FPA left, rotating carry in
.9be9	ca		dex				dex
.9bea	ca		dex				dex
.9beb	20 53 94	jsr $9453			jsr 	NSMRotateLeft
.9bee	88		dey				dey 	 							; do 31 times
.9bef	d0 f0		bne $9be1			bne 	_I32SDLoop
.9bf1	7a		ply				ply 								; restore AY and exit
.9bf2	68		pla				pla
.9bf3	60		rts				rts
.9bf4					DivideCheckSubtract:
.9bf4	20 05 8b	jsr $8b05			jsr 	SubTopTwoStack 				; subtract Stack[X+1] from Stack[X+0]
.9bf7	b0 04		bcs $9bfd			bcs 	_DCSExit 					; if carry set, then could do, exit
.9bf9	20 df 8a	jsr $8adf			jsr 	AddTopTwoStack 				; add it back in
.9bfc	18		clc				clc 								; and return False
.9bfd					_DCSExit:
.9bfd	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/multiply.asm

.9bfe					MulInteger:
.9bfe	fa		plx				plx
.9bff	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.9c02	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.9c05	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9c06	0a		asl a				asl 	a
.9c07	10 05		bpl $9c0e			bpl 	_NotRef
.9c09	48		pha				pha
.9c0a	20 03 8e	jsr $8e03			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9c0d	68		pla				pla
.9c0e					_NotRef:
.9c0e	0a		asl a				asl 	a 							; put MSB of type into A:7
.9c0f	30 0b		bmi $9c1c			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.9c11	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9c14	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.9c17	f0 06		beq $9c1f			beq 	_IntegerCode 				; if clear, then we have two integers
.9c19	4c 52 9e	jmp $9e52			jmp 	FloatingPointMultiply 							; otherwise at least one float.
.9c1c					_StringData:
.9c1c	4c 07 a0	jmp $a007			jmp 	NotDoneError							; at least one string - don't know both are strings.
.9c1f					_IntegerCode:
.9c1f	20 2c 9c	jsr $9c2c			jsr 	MultiplyShort
.9c22	c9 00		cmp #$00			cmp 	#0
.9c24	f0 05		beq $9c2b			beq 	_MIExit
.9c26	a9 04		lda #$04		lda	#4
.9c28	4c ea 88	jmp $88ea		jmp	ErrorHandler
.9c2b					_MIExit:
.9c2b	60		rts				rts
.9c2c					MultiplyShort:
.9c2c	5a		phy				phy 								; save Y
.9c2d	20 14 94	jsr $9414			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.9c30	20 39 94	jsr $9439			jsr 	NSMSetZeroMantissaOnly 		; set mantissa S[X] to zero
.9c33	a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.9c35					_I32MLoop:
.9c35	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.9c38	1d 12 06	ora $0612,x			ora 	NSMantissa1+2,x
.9c3b	1d 1a 06	ora $061a,x			ora 	NSMantissa2+2,x
.9c3e	1d 22 06	ora $0622,x			ora 	NSMantissa3+2,x
.9c41	f0 28		beq $9c6b			beq 	_I32MExit 					; exit if zero
.9c43	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.9c46	29 01		and #$01			and 	#1
.9c48	f0 0e		beq $9c58			beq 	_I32MNoAdd
.9c4a	20 df 8a	jsr $8adf			jsr 	AddTopTwoStack 				; if so add S[X+1] to S[X+0]
.9c4d	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.9c50	10 06		bpl $9c58			bpl 	_I32MNoAdd
.9c52					_I32ShiftRight:
.9c52	20 60 94	jsr $9460			jsr 	NSMShiftRight 				; shift S[X] right
.9c55	c8		iny				iny 								; increment shift count
.9c56	80 0a		bra $9c62			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.9c58					_I32MNoAdd:
.9c58	3c 21 06	bit $0621,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.9c5b	70 f5		bvs $9c52			bvs 	_I32ShiftRight 				; instead.
.9c5d	e8		inx				inx
.9c5e	20 52 94	jsr $9452			jsr 	NSMShiftLeft 				; shift additive S[X+1] left
.9c61	ca		dex				dex
.9c62					_I32MShiftUpper:
.9c62	e8		inx				inx 								; shift S[X+2] right
.9c63	e8		inx				inx
.9c64	20 60 94	jsr $9460			jsr 	NSMShiftRight
.9c67	ca		dex				dex
.9c68	ca		dex				dex
.9c69	80 ca		bra $9c35			bra 	_I32MLoop 					; try again.
.9c6b					_I32MExit:
.9c6b	20 71 9c	jsr $9c71			jsr 	CalculateSign
.9c6e	98		tya				tya 								; shift in A
.9c6f	7a		ply				ply 								; restore Y and exit
.9c70	60		rts				rts
.9c71					CalculateSign:
.9c71	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.9c74	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; shift result left
.9c77	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.9c7a	0a		asl a				asl 	a 							; shift bit 7 into carry
.9c7b	7e 00 06	ror $0600,x			ror 	NSStatus,x 					; shift right into status byte.
.9c7e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/scompare.asm

.8a5b					CompareStrings:
.8a5b	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check both are strings
.8a5e	3d 01 06	and $0601,x			and 	NSStatus+1,x
.8a61	29 10		and #$10			and 	#NSBIsString
.8a63	f0 2c		beq $8a91			beq 	_CSTypeError
.8a65	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy string addresses to zTemp0/1
.8a68	85 36		sta $36				sta 	zTemp0
.8a6a	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8a6d	85 37		sta $37				sta 	zTemp0+1
.8a6f	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.8a72	85 38		sta $38				sta 	zTemp1
.8a74	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.8a77	85 39		sta $39				sta 	zTemp1+1
.8a79	5a		phy				phy 								; save Y so we can access strings
.8a7a	a0 ff		ldy #$ff			ldy 	#$FF 						; -1 for pre increment.
.8a7c					_CSLoop:
.8a7c	c8		iny				iny
.8a7d	b1 36		lda ($36),y			lda 	(zTemp0),y 					; check if they are the same
.8a7f	d1 38		cmp ($38),y			cmp 	(zTemp1),y
.8a81	d0 06		bne $8a89			bne 	_CSDifferent
.8a83	c9 00		cmp #$00			cmp 	#0 							; reached end ?
.8a85	d0 f5		bne $8a7c			bne 	_CSLoop 					; still comparing
.8a87					_CSExit:
.8a87	7a		ply				ply 								; reached end, return zero in A from EOS
.8a88	60		rts				rts
.8a89					_CSDifferent:
.8a89	a9 ff		lda #$ff			lda 	#255 						; if < return $FF
.8a8b	90 fa		bcc $8a87			bcc		_CSExit
.8a8d	a9 01		lda #$01			lda 	#1 							; otherwise return 1.
.8a8f	80 f6		bra $8a87			bra 	_CSExit
.8a91					_CSTypeError:
.8a91	4c fd 9f	jmp $9ffd			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/shifts.asm

.8a94					ShiftLeft:
.8a94	38		sec				sec
.8a95	80 01		bra $8a98			bra 	ShiftMain
.8a97					ShiftRight:
.8a97	18		clc				clc
.8a98					ShiftMain:
.8a98	fa		plx				plx 								; restore X
.8a99	08		php				php 								; save direction
.8a9a	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8a9d	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8aa0	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8aa1	0a		asl a				asl 	a
.8aa2	10 05		bpl $8aa9			bpl 	_NotRef
.8aa4	48		pha				pha
.8aa5	20 03 8e	jsr $8e03			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8aa8	68		pla				pla
.8aa9					_NotRef:
.8aa9	0a		asl a				asl 	a
.8aaa	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8aac	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8aaf	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8ab2	f0 03		beq $8ab7			beq 	_IntegerCode 				; if clear, then we have two integers
.8ab4	4c fd 9f	jmp $9ffd			jmp 	TypeError 					; anything else, type mismatch.
.8ab7					_IntegerCode:
.8ab7	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; check number < 32
.8aba	29 e0		and #$e0			and 	#$E0
.8abc	1d 11 06	ora $0611,x			ora 	NSMantissa1+1,x
.8abf	1d 19 06	ora $0619,x			ora 	NSMantissa2+1,x
.8ac2	1d 21 06	ora $0621,x			ora 	NSMantissa3+1,x
.8ac5	d0 13		bne $8ada			bne 	_SMExit0 					; if >= 32 it will always return zero.
.8ac7					_SMLoop:
.8ac7	de 09 06	dec $0609,x			dec 	NSMantissa0+1,x 			; predecrement, could do << 0
.8aca	30 11		bmi $8add			bmi 	_SMExit 					; exit if done.
.8acc	28		plp				plp 								; restore direcition setting
.8acd	08		php				php
.8ace	90 05		bcc $8ad5			bcc 	_SMRight
.8ad0	20 52 94	jsr $9452			jsr 	NSMShiftLeft 				; shift left if CS
.8ad3	80 f2		bra $8ac7			bra 	_SMLoop
.8ad5					_SMRight:
.8ad5	20 60 94	jsr $9460			jsr 	NSMShiftRight 				; shift right if CC
.8ad8	80 ed		bra $8ac7			bra 	_SMLoop
.8ada					_SMExit0:
.8ada	20 3d 94	jsr $943d			jsr 	NSMSetZero 					; return zero.
.8add					_SMExit:
.8add	28		plp				plp 								; throw direction
.8ade	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/simple.asm

.8adf					AddTopTwoStack:
.8adf	18		clc				clc
.8ae0	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8ae3	7d 09 06	adc $0609,x			adc 		NSMantissa0+1,x
.8ae6	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8ae9	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8aec	7d 11 06	adc $0611,x			adc 		NSMantissa1+1,x
.8aef	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8af2	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8af5	7d 19 06	adc $0619,x			adc 		NSMantissa2+1,x
.8af8	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8afb	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8afe	7d 21 06	adc $0621,x			adc 		NSMantissa3+1,x
.8b01	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8b04	60		rts				rts
.8b05					SubTopTwoStack:
.8b05	38		sec				sec
.8b06	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8b09	fd 09 06	sbc $0609,x			sbc 		NSMantissa0+1,x
.8b0c	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8b0f	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8b12	fd 11 06	sbc $0611,x			sbc 		NSMantissa1+1,x
.8b15	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8b18	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8b1b	fd 19 06	sbc $0619,x			sbc 		NSMantissa2+1,x
.8b1e	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8b21	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8b24	fd 21 06	sbc $0621,x			sbc 		NSMantissa3+1,x
.8b27	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8b2a	60		rts				rts
.8b2b					AddInteger:
.8b2b	fa		plx				plx
.8b2c	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8b2f	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8b32	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8b33	0a		asl a				asl 	a
.8b34	10 05		bpl $8b3b			bpl 	_NotRef
.8b36	48		pha				pha
.8b37	20 03 8e	jsr $8e03			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8b3a	68		pla				pla
.8b3b					_NotRef:
.8b3b	0a		asl a				asl 	a 							; put MSB of type into A:7
.8b3c	30 0b		bmi $8b49			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.8b3e	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8b41	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8b44	f0 06		beq $8b4c			beq 	_IntegerCode 				; if clear, then we have two integers
.8b46	4c da 9c	jmp $9cda			jmp 	FloatingPointAdd 							; otherwise at least one float.
.8b49					_StringData:
.8b49	4c fe 89	jmp $89fe			jmp 	StringConcat							; at least one string - don't know both are strings.
.8b4c					_IntegerCode:
.8b4c					AddCode:
.8b4c	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.8b4f	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.8b52	10 8b		bpl $8adf			bpl 	AddTopTwoStack
.8b54	20 05 8b	jsr $8b05			jsr 	SubTopTwoStack 				; do a physical subtraction
.8b57	3c 20 06	bit $0620,x			bit 	NSMantissa3,x 				; result is +ve, okay
.8b5a	10 09		bpl $8b65			bpl 	_AddExit
.8b5c	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; sign is that of 2nd value
.8b5f	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8b62	20 f2 93	jsr $93f2			jsr 	NSMNegateMantissa 			; negate the mantissa and exit
.8b65					_AddExit:
.8b65	60		rts				rts
.8b66					SubInteger:
.8b66	fa		plx				plx
.8b67	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8b6a	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8b6d	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8b6e	0a		asl a				asl 	a
.8b6f	10 05		bpl $8b76			bpl 	_NotRef
.8b71	48		pha				pha
.8b72	20 03 8e	jsr $8e03			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8b75	68		pla				pla
.8b76					_NotRef:
.8b76	0a		asl a				asl 	a 							; put MSB of type into A:7
.8b77	30 0b		bmi $8b84			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.8b79	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8b7c	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8b7f	f0 06		beq $8b87			beq 	_IntegerCode 				; if clear, then we have two integers
.8b81	4c df 9c	jmp $9cdf			jmp 	FloatingPointSub 							; otherwise at least one float.
.8b84					_StringData:
.8b84	4c 07 a0	jmp $a007			jmp 	NotDoneError							; at least one string - don't know both are strings.
.8b87					_IntegerCode:
.8b87	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; negate the second value.
.8b8a	49 80		eor #$80			eor 	#$80
.8b8c	9d 01 06	sta $0601,x			sta 	NSStatus+1,x
.8b8f	80 bb		bra $8b4c			bra 	AddCode 					; and do the same code as add.
.8b91					AndInteger:
.8b91	fa		plx				plx
.8b92	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8b95	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8b98	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8b99	0a		asl a				asl 	a
.8b9a	10 05		bpl $8ba1			bpl 	_NotRef
.8b9c	48		pha				pha
.8b9d	20 03 8e	jsr $8e03			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8ba0	68		pla				pla
.8ba1					_NotRef:
.8ba1	0a		asl a				asl 	a
.8ba2	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8ba4	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8ba7	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8baa	f0 03		beq $8baf			beq 	_IntegerCode 				; if clear, then we have two integers
.8bac	4c fd 9f	jmp $9ffd			jmp 	TypeError 					; anything else, type mismatch.
.8baf					_IntegerCode:
.8baf	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8bb2	3d 09 06	and $0609,x			and 		NSMantissa0+1,x
.8bb5	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8bb8	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8bbb	3d 11 06	and $0611,x			and 		NSMantissa1+1,x
.8bbe	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8bc1	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8bc4	3d 19 06	and $0619,x			and 		NSMantissa2+1,x
.8bc7	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8bca	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8bcd	3d 21 06	and $0621,x			and 		NSMantissa3+1,x
.8bd0	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8bd3	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.8bd6	60		rts				rts
.8bd7					OraInteger:
.8bd7	fa		plx				plx
.8bd8	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8bdb	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8bde	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8bdf	0a		asl a				asl 	a
.8be0	10 05		bpl $8be7			bpl 	_NotRef
.8be2	48		pha				pha
.8be3	20 03 8e	jsr $8e03			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8be6	68		pla				pla
.8be7					_NotRef:
.8be7	0a		asl a				asl 	a
.8be8	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8bea	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8bed	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8bf0	f0 03		beq $8bf5			beq 	_IntegerCode 				; if clear, then we have two integers
.8bf2	4c fd 9f	jmp $9ffd			jmp 	TypeError 					; anything else, type mismatch.
.8bf5					_IntegerCode:
.8bf5	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8bf8	1d 09 06	ora $0609,x			ora 		NSMantissa0+1,x
.8bfb	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8bfe	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8c01	1d 11 06	ora $0611,x			ora 		NSMantissa1+1,x
.8c04	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8c07	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8c0a	1d 19 06	ora $0619,x			ora 		NSMantissa2+1,x
.8c0d	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8c10	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8c13	1d 21 06	ora $0621,x			ora 		NSMantissa3+1,x
.8c16	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8c19	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.8c1c	60		rts				rts
.8c1d					EorInteger:
.8c1d	fa		plx				plx
.8c1e	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8c21	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8c24	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8c25	0a		asl a				asl 	a
.8c26	10 05		bpl $8c2d			bpl 	_NotRef
.8c28	48		pha				pha
.8c29	20 03 8e	jsr $8e03			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8c2c	68		pla				pla
.8c2d					_NotRef:
.8c2d	0a		asl a				asl 	a
.8c2e	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8c30	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8c33	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8c36	f0 03		beq $8c3b			beq 	_IntegerCode 				; if clear, then we have two integers
.8c38	4c fd 9f	jmp $9ffd			jmp 	TypeError 					; anything else, type mismatch.
.8c3b					_IntegerCode:
.8c3b	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8c3e	5d 09 06	eor $0609,x			eor 		NSMantissa0+1,x
.8c41	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8c44	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8c47	5d 11 06	eor $0611,x			eor 		NSMantissa1+1,x
.8c4a	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8c4d	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8c50	5d 19 06	eor $0619,x			eor 		NSMantissa2+1,x
.8c53	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8c56	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8c59	5d 21 06	eor $0621,x			eor 		NSMantissa3+1,x
.8c5c	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8c5f	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.8c62	60		rts				rts
.8c63					WordIndirect:
.8c63	fa		plx				plx
.8c64	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8c67	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8c6a	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8c6b	0a		asl a				asl 	a
.8c6c	10 05		bpl $8c73			bpl 	_NotRef
.8c6e	48		pha				pha
.8c6f	20 03 8e	jsr $8e03			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8c72	68		pla				pla
.8c73					_NotRef:
.8c73	0a		asl a				asl 	a
.8c74	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8c76	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8c79	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8c7c	f0 03		beq $8c81			beq 	_IntegerCode 				; if clear, then we have two integers
.8c7e	4c fd 9f	jmp $9ffd			jmp 	TypeError 					; anything else, type mismatch.
.8c81					_IntegerCode:
.8c81	20 4c 8b	jsr $8b4c			jsr 	AddCode 					; add the two values
.8c84	a9 22		lda #$22			lda 	#NSBIsReference+2 			; make a 2 byte reference
.8c86	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8c89	60		rts				rts
.8c8a					ByteIndirect:
.8c8a	fa		plx				plx
.8c8b	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8c8e	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8c91	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8c92	0a		asl a				asl 	a
.8c93	10 05		bpl $8c9a			bpl 	_NotRef
.8c95	48		pha				pha
.8c96	20 03 8e	jsr $8e03			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8c99	68		pla				pla
.8c9a					_NotRef:
.8c9a	0a		asl a				asl 	a
.8c9b	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8c9d	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8ca0	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8ca3	f0 03		beq $8ca8			beq 	_IntegerCode 				; if clear, then we have two integers
.8ca5	4c fd 9f	jmp $9ffd			jmp 	TypeError 					; anything else, type mismatch.
.8ca8					_IntegerCode:
.8ca8	20 4c 8b	jsr $8b4c			jsr 	AddCode 					; add the two values
.8cab	a9 21		lda #$21			lda 	#NSBIsReference+1 			; make a 1 byte reference
.8cad	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8cb0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/tostring.asm

.9c7f					ConvertInt16:
.9c7f	8d 08 06	sta $0608			sta 	NSMantissa0 				; set up as 32 bit conversion
.9c82	8e 10 06	stx $0610			stx 	NSMantissa1
.9c85	9c 18 06	stz $0618			stz 	NSMantissa2
.9c88	9c 20 06	stz $0620			stz 	NSMantissa3
.9c8b	9c 00 06	stz $0600			stz 	NSStatus 					; positive integer
.9c8e	a2 00		ldx #$00			ldx 	#0 							; stack level
.9c90	a9 0a		lda #$0a			lda 	#10 						; base
.9c92	80 00		bra $9c94			bra 	ConvertInt32
.9c94					ConvertInt32:
.9c94	5a		phy				phy
.9c95	a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.9c97	2c 00 06	bit $0600			bit 	NSStatus 					; output a - if not negative.
.9c9a	10 08		bpl $9ca4			bpl 	_CI32NotNeg
.9c9c	48		pha				pha
.9c9d	a9 2d		lda #$2d			lda 	#'-'
.9c9f	99 6d 08	sta $086d,y			sta 	NumberBuffer,y
.9ca2	c8		iny				iny
.9ca3	68		pla				pla
.9ca4					_CI32NotNeg:
.9ca4	20 b2 9c	jsr $9cb2			jsr 	_CI32DivideConvert 			; recursive conversion
.9ca7	a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.9ca9	99 6d 08	sta $086d,y			sta 	NumberBuffer,y
.9cac	7a		ply				ply
.9cad	a2 08		ldx #$08			ldx 	#NumberBuffer >> 8
.9caf	a9 6d		lda #$6d			lda 	#NumberBuffer & $FF
.9cb1	60		rts				rts
.9cb2					_CI32DivideConvert:
.9cb2	e8		inx				inx 								; write to next slot up
.9cb3	20 3f 94	jsr $943f			jsr 	NSMSetByte
.9cb6	ca		dex				dex
.9cb7	20 b4 9b	jsr $9bb4			jsr 	Int32Divide 				; divide
.9cba	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; save remainder
.9cbd	48		pha				pha
.9cbe	20 63 9b	jsr $9b63			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.9cc1	20 6d 94	jsr $946d			jsr 	NSMIsZero 					; is it zero ?
.9cc4	f0 06		beq $9ccc			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.9cc6	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.9cc9	20 b2 9c	jsr $9cb2			jsr 	_CI32DivideConvert 			; and recusrively call.
.9ccc					_CI32NoRecurse:
.9ccc	68		pla				pla 								; remainder
.9ccd	c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII
.9ccf	90 02		bcc $9cd3			bcc 	_CI32NotHex
.9cd1	69 26		adc #$26			adc 	#6+32
.9cd3					_CI32NotHex:
.9cd3	69 30		adc #$30			adc 	#48
.9cd5	99 6d 08	sta $086d,y			sta 	NumberBuffer,y 				; write out and exit
.9cd8	c8		iny				iny
.9cd9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/expression.asm


;******  Processing file: ./common/expressions/../generated/precedence.dat

.8cb1					PrecedenceLevel:
>8cb1	04					.byte	 4	; $00 <<
>8cb2	02					.byte	 2	; $01 <=
>8cb3	02					.byte	 2	; $02 <>
>8cb4	00					.byte	 0	; $03 !!3
>8cb5	00					.byte	 0	; $04 ><
>8cb6	02					.byte	 2	; $05 >=
>8cb7	04					.byte	 4	; $06 >>
>8cb8	00					.byte	 0	; $07 !!7
>8cb9	00					.byte	 0	; $08 !!8
>8cba	00					.byte	 0	; $09 !!9
>8cbb	00					.byte	 0	; $0a !!10
>8cbc	00					.byte	 0	; $0b !!11
>8cbd	00					.byte	 0	; $0c !!12
>8cbe	00					.byte	 0	; $0d !!13
>8cbf	00					.byte	 0	; $0e !!14
>8cc0	00					.byte	 0	; $0f !!15
>8cc1	00					.byte	 0	; $10 @
>8cc2	00					.byte	 0	; $11 !!17
>8cc3	00					.byte	 0	; $12 !!18
>8cc4	00					.byte	 0	; $13 [
>8cc5	04					.byte	 4	; $14 \
>8cc6	00					.byte	 0	; $15 ]
>8cc7	01					.byte	 1	; $16 ^
>8cc8	00					.byte	 0	; $17 _
>8cc9	00					.byte	 0	; $18 `
>8cca	00					.byte	 0	; $19 !!25
>8ccb	00					.byte	 0	; $1a !!26
>8ccc	00					.byte	 0	; $1b {
>8ccd	01					.byte	 1	; $1c |
>8cce	00					.byte	 0	; $1d }
>8ccf	00					.byte	 0	; $1e ~
>8cd0	00					.byte	 0	; $1f [7m<7F>[m
>8cd1	00					.byte	 0	; $20
>8cd2	05					.byte	 5	; $21 !
>8cd3	00					.byte	 0	; $22 "
>8cd4	00					.byte	 0	; $23 #
>8cd5	05					.byte	 5	; $24 $
>8cd6	04					.byte	 4	; $25 %
>8cd7	01					.byte	 1	; $26 &
>8cd8	00					.byte	 0	; $27 '
>8cd9	00					.byte	 0	; $28 (
>8cda	00					.byte	 0	; $29 )
>8cdb	04					.byte	 4	; $2a *
>8cdc	03					.byte	 3	; $2b +
>8cdd	00					.byte	 0	; $2c ,
>8cde	03					.byte	 3	; $2d -
>8cdf	00					.byte	 0	; $2e .
>8ce0	04					.byte	 4	; $2f /
>8ce1	00					.byte	 0	; $30 0
>8ce2	00					.byte	 0	; $31 1
>8ce3	00					.byte	 0	; $32 2
>8ce4	00					.byte	 0	; $33 3
>8ce5	00					.byte	 0	; $34 4
>8ce6	00					.byte	 0	; $35 5
>8ce7	00					.byte	 0	; $36 6
>8ce8	00					.byte	 0	; $37 7
>8ce9	00					.byte	 0	; $38 8
>8cea	00					.byte	 0	; $39 9
>8ceb	00					.byte	 0	; $3a :
>8cec	00					.byte	 0	; $3b ;
>8ced	02					.byte	 2	; $3c <
>8cee	02					.byte	 2	; $3d =
>8cef	02					.byte	 2	; $3e >
>8cf0	05					.byte	 5	; $3f ?

;******  Return to file: ./common/expressions/expression.asm

.8cf1					EvaluateExpressionAt0:
.8cf1	a2 00		ldx #$00			ldx 	#0 							; bottom stack level
.8cf3					EvaluateExpression:
.8cf3	a9 00		lda #$00			lda 	#0 							; lowest precedence level
.8cf5					EvaluateExpressionAtPrecedence:
.8cf5	48		pha				pha 								; save precedence level
.8cf6	20 c4 8f	jsr $8fc4			jsr 	EvaluateTerm 				; evaluate term into level X.
.8cf9	68		pla				pla 								; restore precedence level.
.8cfa					_EXPRLoop:
.8cfa	85 36		sta $36				sta 	zTemp0 						; save current precedence level.
.8cfc	b1 30		lda ($30),y			lda 	(codePtr),y
.8cfe	c9 40		cmp #$40			cmp		#$40 						; if >= $40 cannot be an operator
.8d00	b0 25		bcs $8d27			bcs 	_EXPRExit
.8d02	da		phx				phx 								; read the operator precedence
.8d03	aa		tax				tax
.8d04	bd b1 8c	lda $8cb1,x			lda 	PrecedenceLevel,x
.8d07	fa		plx				plx
.8d08	c9 00		cmp #$00			cmp 	#0							; if zero exit (not an operator)
.8d0a	f0 1b		beq $8d27			beq 	_EXPRExit
.8d0c	85 37		sta $37				sta 	zTemp0+1 					; save operator precedence level.
.8d0e	a5 36		lda $36				lda 	zTemp0 						; compare current precedence vs. operator precedence
.8d10	c5 37		cmp $37				cmp 	zTemp0+1
.8d12	b0 13		bcs $8d27			bcs		_EXPRExit 					; if current >= operator exit
.8d14	48		pha				pha 								; save current precedence.
.8d15	b1 30		lda ($30),y			lda 	(codePtr),y
.8d17	c8		iny				iny
.8d18	48		pha				pha
.8d19	a5 37		lda $37				lda 	zTemp0+1 					; get operator precedence level
.8d1b	e8		inx				inx 								; work out the right hand side.
.8d1c	20 f5 8c	jsr $8cf5			jsr 	EvaluateExpressionAtPrecedence
.8d1f	ca		dex				dex
.8d20	68		pla				pla 								; get operator, call the code.
.8d21	20 2a 8d	jsr $8d2a			jsr 	_EXPRCaller
.8d24	68		pla				pla 								; restore precedence level
.8d25	80 d3		bra $8cfa			bra 	_EXPRLoop 					; and go round.
.8d27					_EXPRExit:
.8d27	a5 36		lda $36				lda 	zTemp0 						; A = current precedence level.
.8d29	60		rts				rts
.8d2a					_EXPRCaller:
.8d2a	da		phx				phx 								; save on stack, first thing is to restore it
.8d2b	0a		asl a				asl 	a 							; double so can use vectors into X
.8d2c	aa		tax				tax
.8d2d	7c 14 80	jmp ($8014,x)			jmp 	(VectorSetPunc,x) 			; and go to the code.

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/addsub.asm

.9cda					FloatingPointAdd:
.9cda	20 7b 9e	jsr $9e7b			jsr 	FloatPrepare 				; prepare for floats
.9cdd	80 0b		bra $9cea			bra 	FloatAdd
.9cdf					FloatingPointSub:
.9cdf	20 7b 9e	jsr $9e7b			jsr 	FloatPrepare 				; prepare for floats
.9ce2					FloatSubtract:
.9ce2	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; negate FPB
.9ce5	49 80		eor #$80			eor 	#$80
.9ce7	9d 01 06	sta $0601,x			sta 	NSStatus+1,x				; and fall through.
.9cea					FloatAdd:
.9cea	48		pha				pha
.9ceb	5a		phy				phy
.9cec	20 8c 9e	jsr $9e8c			jsr 	NSNormalise 				; normalise S[X]
.9cef	f0 54		beq $9d45			beq 	_FAReturn1
.9cf1	e8		inx				inx 								; normalise S[X+1]
.9cf2	20 8c 9e	jsr $9e8c			jsr 	NSNormalise
.9cf5	ca		dex				dex
.9cf6	c9 00		cmp #$00			cmp 	#0
.9cf8	f0 6f		beq $9d69			beq 	_FAExit 					; if so, just return A
.9cfa	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; are the exponents the same ?
.9cfd	dd 29 06	cmp $0629,x			cmp 	NSExponent+1,x
.9d00	f0 1b		beq $9d1d			beq 	_FAExponentsEqual
.9d02	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; work out the larger exponent
.9d05	a8		tay				tay
.9d06	38		sec				sec 								; do a signed comparison of the exponents.
.9d07	fd 29 06	sbc $0629,x			sbc 	NSExponent+1,x
.9d0a	50 02		bvc $9d0e			bvc 	_FANoSignedChange
.9d0c	49 80		eor #$80			eor 	#$80
.9d0e					_FANoSignedChange:
.9d0e	29 80		and #$80			and 	#$80
.9d10	10 03		bpl $9d15			bpl 	_FAHaveMax
.9d12	bc 29 06	ldy $0629,x			ldy 	NSExponent+1,x
.9d15					_FAHaveMax:
.9d15	20 6c 9d	jsr $9d6c			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.9d18	e8		inx				inx
.9d19	20 6c 9d	jsr $9d6c			jsr 	_FAShiftToExponent
.9d1c	ca		dex				dex
.9d1d					_FAExponentsEqual:
.9d1d	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; are the signs the same
.9d20	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.9d23	30 10		bmi $9d35			bmi 	_FADifferentSigns
.9d25	20 df 8a	jsr $8adf			jsr 	AddTopTwoStack 				; do the add of the mantissae
.9d28	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.9d2b	10 3c		bpl $9d69			bpl 	_FAExit 					; if no, we are done.
.9d2d	20 60 94	jsr $9460			jsr 	NSMShiftRight 				; shift A right, renormalising it.
.9d30	fe 28 06	inc $0628,x			inc 	NSExponent,x 				; bump the exponent and exit
.9d33	80 34		bra $9d69			bra 	_FAExit
.9d35					_FADifferentSigns:
.9d35	20 05 8b	jsr $8b05			jsr 	SubTopTwoStack 				; subtract mantissa B from A
.9d38	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; is the result negative ?
.9d3b	10 2c		bpl $9d69			bpl 	_FAExit 					; if no, we are done.
.9d3d	20 e9 93	jsr $93e9			jsr 	NSMNegate 					; netate result
.9d40	20 f2 93	jsr $93f2			jsr 	NSMNegateMantissa 			; negate (2'c) the mantissa
.9d43	80 24		bra $9d69			bra 	_FAExit
.9d45					_FAReturn1:
.9d45	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.9d48	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.9d4b	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.9d4e	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9d51	bd 19 06	lda $0619,x			lda 	NSMantissa2+1,x
.9d54	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.9d57	bd 21 06	lda $0621,x			lda 	NSMantissa3+1,x
.9d5a	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.9d5d	bd 29 06	lda $0629,x			lda 	NSExponent+1,x
.9d60	9d 28 06	sta $0628,x			sta 	NSExponent,x
.9d63	bd 01 06	lda $0601,x			lda 	NSStatus+1,x
.9d66	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9d69					_FAExit:
.9d69	7a		ply				ply
.9d6a	68		pla				pla
.9d6b	60		rts				rts
.9d6c					_FAShiftToExponent:
.9d6c					_FAShiftToExponent2:
.9d6c	98		tya				tya 								; compare Y to exponent
.9d6d	dd 28 06	cmp $0628,x			cmp 	NSExponent,x 				; reached the exponent required ?
.9d70	f0 08		beq $9d7a			beq 	_FASEExit 					; exit if so.
.9d72	20 60 94	jsr $9460			jsr 	NSMShiftRight	 			; shift the mantissa right
.9d75	fe 28 06	inc $0628,x			inc 	NSExponent,x 				; increment exponent
.9d78	80 f2		bra $9d6c			bra 	_FAShiftToExponent2
.9d7a					_FASEExit:
.9d7a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/compare.asm

.9d7b					CompareFloat:
.9d7b	20 e2 9c	jsr $9ce2			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.9d7e	bd 10 06	lda $0610,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.9d81	29 f8		and #$f8			and 	#$F8
.9d83	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.9d86	1d 20 06	ora $0620,x			ora 	NSMantissa3,x
.9d89	f0 09		beq $9d94			beq 	_FCExit 					; zero, so approximately identical
.9d8b	a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.9d8d	3c 00 06	bit $0600,x			bit 	NSStatus,x
.9d90	10 02		bpl $9d94			bpl 	_FCExit
.9d92					_FCNegative:
.9d92	a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.9d94					_FCExit:
.9d94	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/divide.asm

.9d95					FDivideCommand:
.9d95	fa		plx				plx	 								; restore stack position
.9d96	20 7b 9e	jsr $9e7b			jsr 	FloatPrepare 				; prepare for floats
.9d99					FloatDivide:
.9d99	48		pha				pha
.9d9a	e8		inx				inx
.9d9b	20 8c 9e	jsr $9e8c			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.9d9e	ca		dex				dex
.9d9f	c9 00		cmp #$00			cmp 	#0
.9da1	f0 20		beq $9dc3			beq 	_FDZero
.9da3	20 8c 9e	jsr $9e8c			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.9da6	f0 19		beq $9dc1			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.9da8	20 d6 9b	jsr $9bd6			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.9dab	20 63 9b	jsr $9b63			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.9dae	20 8c 9e	jsr $9e8c			jsr		NSNormalise 				; renormalise
.9db1	20 71 9c	jsr $9c71			jsr 	CalculateSign 				; calculate result sign
.9db4	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; calculate exponent
.9db7	38		sec				sec
.9db8	fd 29 06	sbc $0629,x			sbc 	NSExponent+1,x
.9dbb	38		sec				sec
.9dbc	e9 1e		sbc #$1e			sbc 	#30
.9dbe	9d 28 06	sta $0628,x			sta 	NSExponent,x
.9dc1					_FDExit:
.9dc1	68		pla				pla
.9dc2	60		rts				rts
.9dc3					_FDZero:
.9dc3	a9 03		lda #$03		lda	#3
.9dc5	4c ea 88	jmp $88ea		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/fractional.asm

.9dc8					FloatFractionalPart:
.9dc8	5a		phy				phy
.9dc9	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; take absolute value
.9dcc	29 7f		and #$7f			and 	#$7F
.9dce	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9dd1	20 8c 9e	jsr $9e8c			jsr 	NSNormalise
.9dd4	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.9dd7	38		sec				sec
.9dd8	e9 e0		sbc #$e0			sbc 	#$E0
.9dda	90 31		bcc $9e0d			bcc 	_FFPExit 					; already fractional
.9ddc	c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.9dde	b0 2a		bcs $9e0a			bcs 	_FFPZero
.9de0	a8		tay				tay 								; put count to do in Y
.9de1	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; do each in turn.
.9de4	20 0f 9e	jsr $9e0f			jsr 	_FFPPartial
.9de7	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.9dea	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.9ded	20 0f 9e	jsr $9e0f			jsr 	_FFPPartial
.9df0	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.9df3	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.9df6	20 0f 9e	jsr $9e0f			jsr 	_FFPPartial
.9df9	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9dfc	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.9dff	20 0f 9e	jsr $9e0f			jsr 	_FFPPartial
.9e02	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.9e05	20 6d 94	jsr $946d			jsr 	NSMIsZero 					; zeroed check.
.9e08	d0 03		bne $9e0d			bne 	_FFPExit
.9e0a					_FFPZero:
.9e0a	20 3d 94	jsr $943d			jsr 	NSMSetZero
.9e0d					_FFPExit:
.9e0d	7a		ply				ply
.9e0e	60		rts				rts
.9e0f					_FFPPartial:
.9e0f	c0 00		cpy #$00			cpy 	#0 							; no more to do
.9e11	f0 17		beq $9e2a			beq 	_FFFPPExit
.9e13	c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.9e15	b0 0c		bcs $9e23			bcs 	_FFFPPWholeByte
.9e17	5a		phy				phy
.9e18					_FFFPPLeft:
.9e18	0a		asl a				asl 	a
.9e19	88		dey				dey
.9e1a	d0 fc		bne $9e18			bne 	_FFFPPLeft
.9e1c	7a		ply				ply
.9e1d					_FFFPPRight:
.9e1d	4a		lsr a				lsr 	a
.9e1e	88		dey				dey
.9e1f	d0 fc		bne $9e1d			bne 	_FFFPPRight
.9e21	80 07		bra $9e2a			bra 	_FFFPPExit
.9e23					_FFFPPWholeByte:
.9e23	98		tya				tya 								; subtract 8 from count
.9e24	38		sec				sec
.9e25	e9 08		sbc #$08			sbc 	#8
.9e27	a8		tay				tay
.9e28	a9 00		lda #$00			lda 	#0 							; and clear all
.9e2a					_FFFPPExit:
.9e2a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/integer.asm

.9e2b					FloatIntegerPart:
.9e2b	48		pha				pha
.9e2c	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; is it integer already ?
.9e2f	f0 1f		beq $9e50			beq 	_FIPExit 					; if so do nothing
.9e31	20 6d 94	jsr $946d			jsr 	NSMIsZero 					; is it zero ?
.9e34	f0 17		beq $9e4d			beq 	_FIPZero 					; if so return zero.
.9e36	20 8c 9e	jsr $9e8c			jsr 	NSNormalise 				; normalise
.9e39	f0 12		beq $9e4d			beq 	_FIPZero 					; normalised to zero, exit zero
.9e3b					_FIPShift:
.9e3b	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.9e3e	10 08		bpl $9e48			bpl 	_FIPCheckZero
.9e40	20 60 94	jsr $9460			jsr 	NSMShiftRight 				; shift mantissa right
.9e43	fe 28 06	inc $0628,x			inc 	NSExponent,x 				; bump exponent
.9e46	80 f3		bra $9e3b			bra 	_FIPShift
.9e48					_FIPCheckZero:
.9e48	20 6d 94	jsr $946d			jsr 	NSMIsZero 					; avoid -0 problem
.9e4b	d0 03		bne $9e50			bne 	_FIPExit 					; set to zero if mantissa zero.
.9e4d					_FIPZero:
.9e4d	20 3d 94	jsr $943d			jsr 	NSMSetZero
.9e50					_FIPExit:
.9e50	68		pla				pla
.9e51	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/multiply.asm

.9e52					FloatingPointMultiply:
.9e52	20 7b 9e	jsr $9e7b			jsr 	FloatPrepare 				; prepare for floats
.9e55					FloatMultiply:
.9e55	48		pha				pha
.9e56	20 8c 9e	jsr $9e8c			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.9e59	f0 1b		beq $9e76			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.9e5b	e8		inx				inx
.9e5c	20 8c 9e	jsr $9e8c			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.9e5f	ca		dex				dex
.9e60	c9 00		cmp #$00			cmp 	#0
.9e62	f0 0f		beq $9e73			beq 	_FDSetZero
.9e64	20 2c 9c	jsr $9c2c			jsr 	MultiplyShort 				; calculate the result.
.9e67	7d 28 06	adc $0628,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.9e6a	18		clc				clc
.9e6b	7d 29 06	adc $0629,x			adc 	NSExponent+1,x
.9e6e	9d 28 06	sta $0628,x			sta 	NSExponent,x
.9e71	80 03		bra $9e76			bra 	_FDExit
.9e73					_FDSetZero:
.9e73	20 3d 94	jsr $943d			jsr 	NSMSetZero 					; return 0
.9e76					_FDExit:
.9e76	20 8c 9e	jsr $9e8c			jsr 	NSNormalise 				; normalise the result
.9e79	68		pla				pla
.9e7a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/utility.asm

.9e7b					FloatPrepare:
.9e7b	20 03 8e	jsr $8e03			jsr 	DereferenceTopTwo 			; dereference the top two values
.9e7e	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check ints/floats
.9e81	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.9e84	29 10		and #$10			and 	#NSBIsString
.9e86	d0 01		bne $9e89			bne 	_FDType
.9e88	60		rts				rts
.9e89					_FDType:
.9e89	4c fd 9f	jmp $9ffd			jmp 	TypeError
.9e8c					NSNormalise:
.9e8c	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; make float, keep sign
.9e8f	29 80		and #$80			and 	#$80
.9e91	09 08		ora #$08			ora 	#NSTFloat
.9e93	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9e96	20 6d 94	jsr $946d			jsr 	NSMIsZero 					; if zero exit
.9e99	d0 09		bne $9ea4			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.9e9b	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; clear the sign bit.
.9e9e	7e 00 06	ror $0600,x			ror 	NSStatus,x 					; (no -0)
.9ea1	a9 00		lda #$00			lda 	#0 							; set Z flag
.9ea3	60		rts				rts
.9ea4					_NSNormaliseOptimise:
.9ea4	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; upper byte zero ?
.9ea7	d0 22		bne $9ecb			bne 	_NSNormaliseLoop
.9ea9	bd 18 06	lda $0618,x			lda 	NSMantissa2,x 				; byte normalise
.9eac	30 1d		bmi $9ecb			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.9eae	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.9eb1	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.9eb4	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.9eb7	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.9eba	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9ebd	9e 08 06	stz $0608,x			stz 	NSMantissa0,x
.9ec0	bd 28 06	lda $0628,x			lda 	NSExponent,x
.9ec3	38		sec				sec
.9ec4	e9 08		sbc #$08			sbc 	#8
.9ec6	9d 28 06	sta $0628,x			sta 	NSExponent,x
.9ec9	80 d9		bra $9ea4			bra 	_NSNormaliseOptimise
.9ecb					_NSNormaliseLoop:
.9ecb	3c 20 06	bit $0620,x			bit 	NSMantissa3,x 				; bit 30 set ?
.9ece	70 08		bvs $9ed8			bvs 	_NSNExit 					; exit if so with Z flag clear
.9ed0	20 52 94	jsr $9452			jsr 	NSMShiftLeft 				; shift mantissa left
.9ed3	de 28 06	dec $0628,x			dec 	NSExponent,x 				; adjust exponent
.9ed6	80 f3		bra $9ecb			bra 	_NSNormaliseLoop
.9ed8					_NSNExit:
.9ed8	a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.9eda	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignnumber.asm

.8d30					AssignNumber:
.8d30	5a		phy				phy
.8d31	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy mantissa0/1 to zTemp0
.8d34	85 36		sta $36				sta 	zTemp0
.8d36	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8d39	85 37		sta $37				sta 	zTemp0+1
.8d3b	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; clear reference bits
.8d3e	29 df		and #$df			and 	#(NSBIsReference ^ $FF)
.8d40	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8d43	29 18		and #$18			and 	#NSBTypeMask				; assigning to a float ?
.8d45	c9 08		cmp #$08			cmp 	#NSTFloat
.8d47	f0 2a		beq $8d73			beq 	_ANFloat
.8d49	bd 29 06	lda $0629,x			lda		NSExponent+1,x 				; is it a float
.8d4c	f0 05		beq $8d53			beq		_ANNotFloat
.8d4e	e8		inx				inx
.8d4f	20 2b 9e	jsr $9e2b			jsr 	FloatIntegerPart 			; make it an integer
.8d52	ca		dex				dex
.8d53					_ANNotFloat:
.8d53	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if byte/word reference.
.8d56	29 03		and #$03			and 	#3
.8d58	d0 05		bne $8d5f			bne 	_ANByteWord
.8d5a	20 7f 8d	jsr $8d7f			jsr 	_ANCopy4PackSign 			; copy all 4 bytes and sign
.8d5d	80 1e		bra $8d7d			bra 	_ANExit
.8d5f					_ANByteWord:
.8d5f	48		pha				pha 								; save count
.8d60	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; do byte
.8d63	92 36		sta ($36)			sta 	(zTemp0)
.8d65	68		pla				pla
.8d66	c9 01		cmp #$01			cmp	 	#1
.8d68	f0 13		beq $8d7d			beq 	_ANExit
.8d6a	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x 			; do word
.8d6d	a0 01		ldy #$01			ldy 	#1
.8d6f	91 36		sta ($36),y			sta 	(zTemp0),y
.8d71	80 0a		bra $8d7d			bra 	_ANExit
.8d73					_ANFloat:
.8d73	20 7f 8d	jsr $8d7f			jsr 	_ANCopy4PackSign 			; write all 4 bytes and packed sign
.8d76	bd 29 06	lda $0629,x			lda 	NSExponent+1,x 				; copy exponent to slot 4
.8d79	a0 04		ldy #$04			ldy 	#4
.8d7b	91 36		sta ($36),y			sta 	(zTemp0),y
.8d7d					_ANExit:
.8d7d	7a		ply				ply
.8d7e	60		rts				rts
.8d7f					_ANCopy4PackSign:
.8d7f	a0 03		ldy #$03			ldy 	#3
.8d81	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; sign bit into status
.8d84	29 80		and #$80			and 	#$80 						; put into high bit of mantissa 3
.8d86	1d 21 06	ora $0621,x			ora 	NSMantissa3+1,x
.8d89	91 36		sta ($36),y			sta 	(zTemp0),y
.8d8b	88		dey				dey
.8d8c	bd 19 06	lda $0619,x			lda 	NSMantissa2+1,x
.8d8f	91 36		sta ($36),y			sta 	(zTemp0),y
.8d91	88		dey				dey
.8d92	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.8d95	91 36		sta ($36),y			sta 	(zTemp0),y
.8d97	88		dey				dey
.8d98	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.8d9b	91 36		sta ($36),y			sta 	(zTemp0),y
.8d9d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignstring.asm

.8d9e					AssignString:
.8d9e	5a		phy				phy
.8d9f	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.8da2	85 38		sta $38				sta 	zTemp1
.8da4	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.8da7	85 39		sta $39				sta 	zTemp1+1
.8da9	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.8dac	85 36		sta $36				sta 	zTemp0
.8dae	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8db1	85 37		sta $37				sta 	zTemp0+1
.8db3	a0 01		ldy #$01			ldy 	#1 							; the high byte of the target address
.8db5	b1 36		lda ($36),y			lda 	(zTemp0),y
.8db7	f0 23		beq $8ddc			beq 	_ASNewStringRequired 		; if zero, a new string is required.
.8db9	38		sec				sec 								; put Address-2 in zsTemp - this is the size/status/string record
.8dba	b2 36		lda ($36)			lda 	(zTemp0) 					; of concreted strings
.8dbc	e9 02		sbc #$02			sbc 	#2
.8dbe	85 3c		sta $3c				sta 	zsTemp
.8dc0	a0 01		ldy #$01			ldy 	#1
.8dc2	b1 36		lda ($36),y			lda 	(zTemp0),y
.8dc4	e9 00		sbc #$00			sbc 	#0
.8dc6	85 3d		sta $3d				sta 	zsTemp+1
.8dc8	a0 ff		ldy #$ff			ldy 	#$FF 						; get length of new string
.8dca					_ASGetLength:
.8dca	c8		iny				iny
.8dcb	b1 38		lda ($38),y			lda 	(zTemp1),y
.8dcd	d0 fb		bne $8dca			bne 	_ASGetLength
.8dcf	98		tya				tya 								; is this length <= current length
.8dd0	d2 3c		cmp ($3c)			cmp 	(zsTemp)
.8dd2	90 20		bcc $8df4			bcc 	_ASCopyString
.8dd4	f0 1e		beq $8df4			beq 	_ASCopyString
.8dd6	a9 80		lda #$80			lda 	#$80 						; mark as unused.
.8dd8	a0 01		ldy #$01			ldy 	#1
.8dda	91 3c		sta ($3c),y			sta 	(zsTemp),y
.8ddc					_ASNewStringRequired:
.8ddc	e8		inx				inx 								; concrete the new string.
.8ddd	20 72 a1	jsr $a172			jsr 	StringConcrete				; (breaks zTemp1/2, not zTemp0 and zsTemp)
.8de0	ca		dex				dex
.8de1	18		clc				clc
.8de2	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; copy that new address to the reference.
.8de5	69 02		adc #$02			adc 	#2 							; add two to point at the data.
.8de7	92 36		sta ($36)			sta 	(zTemp0)
.8de9	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.8dec	69 00		adc #$00			adc 	#0
.8dee	a0 01		ldy #$01			ldy 	#1
.8df0	91 36		sta ($36),y			sta 	(zTemp0),y
.8df2	80 0d		bra $8e01			bra 	_ASExit
.8df4					_ASCopyString:
.8df4	a0 00		ldy #$00			ldy 	#0
.8df6					_ASCopyLoop:
.8df6	b1 38		lda ($38),y			lda 	(zTemp1),y
.8df8	c8		iny				iny
.8df9	c8		iny				iny
.8dfa	91 3c		sta ($3c),y			sta 	(zsTemp),y
.8dfc	88		dey				dey
.8dfd	c9 00		cmp #$00			cmp 	#0
.8dff	d0 f5		bne $8df6			bne 	_ASCopyLoop
.8e01					_ASExit:
.8e01	7a		ply				ply
.8e02	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/dereference.asm

.8e03					DereferenceTopTwo:
.8e03	e8		inx				inx
.8e04	20 08 8e	jsr $8e08			jsr 	Dereference 				; deref x+1
.8e07	ca		dex				dex  								; falls through to deref x
.8e08					Dereference:
.8e08	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get the status byte
.8e0b	29 20		and #$20			and 	#NSBIsReference 			; shift sign bit to carry, reference to bit 7
.8e0d	f0 57		beq $8e66			beq 	_DRFExit 					; not a reference
.8e0f	5a		phy				phy
.8e10	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy address to dereference into zTemp0
.8e13	85 36		sta $36				sta 	zTemp0
.8e15	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8e18	85 37		sta $37				sta 	zTemp0+1
.8e1a	9e 10 06	stz $0610,x			stz 	NSMantissa1,x 				; clear second byte.
.8e1d	b2 36		lda ($36)			lda 	(zTemp0) 					; do the first byte
.8e1f	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8e22	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get status byte.
.8e25	29 18		and #$18			and 	#NSBTypeMask 				; what type is it ?
.8e27	c9 10		cmp #$10			cmp 	#NSTString 					; if string, dereference two
.8e29	f0 0f		beq $8e3a			beq 	_DRFDereferenceTwo
.8e2b	c9 08		cmp #$08			cmp 	#NSTFloat 					; if float, do full dereference.
.8e2d	f0 39		beq $8e68			beq 	_DRFFull
.8e2f	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be integer - how many bytes ?
.8e32	29 03		and #$03			and 	#3
.8e34	f0 32		beq $8e68			beq 	_DRFFull 					; the whole word
.8e36	c9 01		cmp #$01			cmp 	#1 							; is it 10 (e.g. 2 bytes)
.8e38	f0 07		beq $8e41			beq		_DRFClear23 				; no, one byte, clear 2 & 3 and exit
.8e3a					_DRFDereferenceTwo:
.8e3a	a0 01		ldy #$01			ldy 	#1
.8e3c	b1 36		lda ($36),y			lda 	(zTemp0),y
.8e3e	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8e41					_DRFClear23:
.8e41	9e 18 06	stz $0618,x			stz 	NSMantissa2,x 				; clear upper bytes, only read 1 or 2 bytes
.8e44	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.8e47	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; make it a value of that type.
.8e4a	29 18		and #$18			and 	#NSBTypeMask
.8e4c	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8e4f	c9 10		cmp #$10			cmp 	#NSTString  				; is it a string
.8e51	d0 12		bne $8e65			bne 	_DRFNotString
.8e53	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; check address is zero
.8e56	1d 10 06	ora $0610,x			ora 	NSMantissa1,x
.8e59	d0 0a		bne $8e65			bne 	_DRFNotString
.8e5b	a9 67		lda #$67			lda 	#_DRFNullString & $FF 		; if so, return reference to ""
.8e5d	9d 08 06	sta $0608,x			sta 	NSMantissa0,X
.8e60	a9 8e		lda #$8e			lda 	#_DRFNullString >> 8
.8e62	9d 10 06	sta $0610,x			sta 	NSMantissa1,X
.8e65					_DRFNotString
.8e65	7a		ply				ply 								; restore Y and exit
.8e66					_DRFExit:
.8e66	60		rts				rts
.8e67					_DRFNullString:
>8e67	00						.byte 	0
.8e68					_DRFFull:
.8e68	a0 01		ldy #$01			ldy 	#1 							; get remaining 3 bytes.
.8e6a	b1 36		lda ($36),y			lda 	(zTemp0),y
.8e6c	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8e6f	c8		iny				iny
.8e70	b1 36		lda ($36),y			lda 	(zTemp0),y
.8e72	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8e75	c8		iny				iny
.8e76	b1 36		lda ($36),y			lda 	(zTemp0),y
.8e78	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8e7b	9e 28 06	stz $0628,x			stz 	NSExponent,x 				; clear exponent.
.8e7e	bd 00 06	lda $0600,x			lda		NSStatus,x 					; see if type is integer
.8e81	29 18		and #$18			and 	#NSBTypeMask  				; type information only
.8e83	9d 00 06	sta $0600,x			sta 	NSStatus,x 					; update it back.
.8e86	f0 06		beq $8e8e			beq 	_DRFNoExponent
.8e88	c8		iny				iny 								; if not, read the exponent as well.
.8e89	b1 36		lda ($36),y			lda 	(zTemp0),y
.8e8b	9d 28 06	sta $0628,x			sta 	NSExponent,x
.8e8e					_DRFNoExponent:
.8e8e	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; is the most significant bit set ?
.8e91	10 0d		bpl $8ea0			bpl 	_DRFExit2 					; if not, then exit.
.8e93	29 7f		and #$7f			and 	#$7F 						; clear that bit.
.8e95	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8e98	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; set the sign flag
.8e9b	09 80		ora #$80			ora 	#NSBIsNegative
.8e9d	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8ea0					_DRFExit2:
.8ea0	7a		ply				ply
.8ea1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/number.asm

=1					ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2					ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3					ESTA_Decimal = 3 							; fractional part.
.8ea2					EncodeNumberStart:
.8ea2	38		sec				sec
.8ea3	80 01		bra $8ea6			bra 	EncodeNumberContinue+1
.8ea5					EncodeNumberContinue:
.8ea5	18		clc				clc
.8ea6					EncodeNumber:
.8ea6	08		php				php 								; save reset.
.8ea7	c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.8ea9	f0 12		beq $8ebd			beq 	_ENIsOkay
.8eab	c9 30		cmp #$30			cmp 	#"0"
.8ead	90 04		bcc $8eb3			bcc 	_ENBadNumber
.8eaf	c9 3a		cmp #$3a			cmp 	#"9"+1
.8eb1	90 0a		bcc $8ebd			bcc 	_ENIsOkay
.8eb3					_ENBadNumber:
.8eb3	28		plp				plp 								; throw saved reset
.8eb4	ad 05 07	lda $0705			lda 	EncodeState 				; decimal mode, construct final number
.8eb7	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.8eb9	f0 7e		beq $8f39			beq 	_ENConstructFinal
.8ebb					_ENFail:
.8ebb	18		clc				clc 								; not allowed
.8ebc	60		rts				rts
.8ebd					_ENIsOkay:
.8ebd	28		plp				plp 								; are we restarting
.8ebe	90 15		bcc $8ed5			bcc 	_ENNoRestart
.8ec0					_ENStartEncode:
.8ec0	c9 2e		cmp #$2e			cmp 	#'.'						; first is DP
.8ec2	f0 0c		beq $8ed0			beq 	_ENFirstDP
.8ec4	29 0f		and #$0f			and 	#15 						; put digit in mantissa
.8ec6	20 3f 94	jsr $943f			jsr 	NSMSetByte
.8ec9	a9 01		lda #$01			lda 	#ESTA_Low
.8ecb					_ENExitChange:
.8ecb	8d 05 07	sta $0705			sta 	EncodeState 				; save new state
.8ece	38		sec				sec
.8ecf	60		rts				rts
.8ed0					_ENFirstDP:
.8ed0	20 3d 94	jsr $943d			jsr 	NSMSetZero 					; clear integer part
.8ed3	80 3f		bra $8f14			bra 	_ESTASwitchFloat			; go straight to float and exi
.8ed5					_ENNoRestart:
.8ed5	48		pha				pha 								; save on stack.
.8ed6	ad 05 07	lda $0705			lda 	EncodeState 				; get current state
.8ed9	c9 01		cmp #$01			cmp 	#ESTA_Low
.8edb	f0 09		beq $8ee6			beq  	_ESTALowState
.8edd	c9 02		cmp #$02			cmp 	#ESTA_High
.8edf	f0 29		beq $8f0a			beq 	_ESTAHighState
.8ee1	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.8ee3	f0 3b		beq $8f20			beq 	_ESTADecimalState
>8ee5	db						.byte 	$DB 						; causes a break in the emulator
.8ee6					_ESTALowState:
.8ee6	68		pla				pla 								; get value back
.8ee7	c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.8ee9	f0 29		beq $8f14			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.8eeb	29 0f		and #$0f			and 	#15 						; make digit
.8eed	8d 06 07	sta $0706			sta 	DigitTemp 					; save it.
.8ef0	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.8ef3	0a		asl a				asl 	a
.8ef4	0a		asl a				asl 	a
.8ef5	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.8ef8	0a		asl a				asl 	a
.8ef9	6d 06 07	adc $0706			adc 	DigitTemp
.8efc	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8eff	c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.8f01	90 05		bcc $8f08			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.8f03	a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.8f05	8d 05 07	sta $0705			sta 	EncodeState
.8f08					_ESTANoSwitch:
.8f08	38		sec				sec
.8f09	60		rts				rts
.8f0a					_ESTAHighState:
.8f0a	68		pla				pla 								; get value back
.8f0b	c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.8f0d	f0 05		beq $8f14			beq 	_ESTASwitchFloat
.8f0f	20 73 8f	jsr $8f73			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.8f12	38		sec				sec
.8f13	60		rts				rts
.8f14					_ESTASwitchFloat:
.8f14	9c 07 07	stz $0707			stz 	DecimalCount
.8f17	e8		inx				inx 								; zero the decimal additive.
.8f18	20 3d 94	jsr $943d			jsr 	NSMSetZero
.8f1b	ca		dex				dex
.8f1c	a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.8f1e	80 ab		bra $8ecb			bra 	_ENExitChange
.8f20					_ESTADecimalState:
.8f20	68		pla				pla 								; digit.
.8f21	c9 2e		cmp #$2e			cmp 	#"." 						; fail on 2nd decimal point.
.8f23	f0 96		beq $8ebb			beq 	_ENFail
.8f25	e8		inx				inx 								; put digit into fractional part of X+1
.8f26	20 73 8f	jsr $8f73			jsr 	ESTAShiftDigitIntoMantissa
.8f29	ca		dex				dex
.8f2a	ee 07 07	inc $0707			inc 	DecimalCount 				; bump the count of decimals
.8f2d	ad 07 07	lda $0707			lda 	DecimalCount
.8f30	c9 0b		cmp #$0b			cmp 	#11
.8f32	f0 02		beq $8f36			beq 	_ESTADSFail
.8f34	38		sec				sec
.8f35	60		rts				rts
.8f36					_ESTADSFail:
.8f36	4c f8 9f	jmp $9ff8			jmp 	RangeError
.8f39					_ENConstructFinal:
.8f39	ad 07 07	lda $0707			lda 	DecimalCount 				; get decimal count
.8f3c	f0 33		beq $8f71			beq 	_ENCFExit 					; no decimals
.8f3e	5a		phy				phy
.8f3f	0a		asl a				asl 	a 							; x 4 and CLC
.8f40	0a		asl a				asl 	a
.8f41	6d 07 07	adc $0707			adc 	DecimalCount
.8f44	a8		tay				tay
.8f45	b9 b7 9f	lda $9fb7,y			lda 	DecimalScalarTable-5,y 		; copy decimal scalar to X+2
.8f48	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.8f4b	b9 b8 9f	lda $9fb8,y			lda 	DecimalScalarTable-5+1,y
.8f4e	9d 12 06	sta $0612,x			sta 	NSMantissa1+2,x
.8f51	b9 b9 9f	lda $9fb9,y			lda 	DecimalScalarTable-5+2,y
.8f54	9d 1a 06	sta $061a,x			sta 	NSMantissa2+2,x
.8f57	b9 ba 9f	lda $9fba,y			lda 	DecimalScalarTable-5+3,y
.8f5a	9d 22 06	sta $0622,x			sta 	NSMantissa3+2,x
.8f5d	b9 bb 9f	lda $9fbb,y			lda 	DecimalScalarTable-5+4,y
.8f60	9d 2a 06	sta $062a,x			sta 	NSExponent+2,x
.8f63	a9 08		lda #$08			lda 	#NSTFloat
.8f65	9d 02 06	sta $0602,x			sta 	NSStatus+2,x
.8f68	7a		ply				ply
.8f69	e8		inx				inx 								; multiply decimal const by decimal scalar
.8f6a	20 55 9e	jsr $9e55			jsr 	FloatMultiply
.8f6d	ca		dex				dex
.8f6e	20 ea 9c	jsr $9cea			jsr 	FloatAdd 					; add to integer part.
.8f71					_ENCFExit:
.8f71	18		clc				clc 								; reject the digit.
.8f72	60		rts				rts
.8f73					ESTAShiftDigitIntoMantissa:
.8f73	29 0f		and #$0f			and 	#15 						; save digit
.8f75	48		pha				pha
.8f76	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; push mantissa on stack
.8f79	48		pha				pha
.8f7a	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.8f7d	48		pha				pha
.8f7e	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8f81	48		pha				pha
.8f82	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.8f85	48		pha				pha
.8f86	20 52 94	jsr $9452			jsr 	NSMShiftLeft 				; x 2
.8f89	20 52 94	jsr $9452			jsr 	NSMShiftLeft 				; x 4
.8f8c	18		clc				clc 								; pop mantissa and add
.8f8d	68		pla				pla
.8f8e	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.8f91	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8f94	68		pla				pla
.8f95	7d 10 06	adc $0610,x			adc 	NSMantissa1,x
.8f98	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8f9b	68		pla				pla
.8f9c	7d 18 06	adc $0618,x			adc 	NSMantissa2,x
.8f9f	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8fa2	68		pla				pla
.8fa3	7d 20 06	adc $0620,x			adc 	NSMantissa3,x
.8fa6	9d 20 06	sta $0620,x			sta 	NSMantissa3,x 				; x 5
.8fa9	20 52 94	jsr $9452			jsr 	NSMShiftLeft 				; x 10
.8fac	68		pla				pla 								; add digit
.8fad	18		clc				clc
.8fae	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.8fb1	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8fb4	90 0d		bcc $8fc3			bcc 	_ESTASDExit
.8fb6	fe 10 06	inc $0610,x			inc 	NSMantissa1,x
.8fb9	d0 08		bne $8fc3			bne 	_ESTASDExit
.8fbb	fe 18 06	inc $0618,x			inc 	NSMantissa2,x
.8fbe	d0 03		bne $8fc3			bne 	_ESTASDExit
.8fc0	fe 20 06	inc $0620,x			inc 	NSMantissa3,x
.8fc3					_ESTASDExit:
.8fc3	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/term.asm

.8fc4					EvaluateTerm:
.8fc4	b1 30		lda ($30),y			lda 	(codePtr),y
.8fc6	30 18		bmi $8fe0			bmi 	_ETCheckUnary 				; unary function ? (text ones)
.8fc8	c9 40		cmp #$40			cmp 	#$40 						; 40-7F => identifier reference
.8fca	b0 6f		bcs $903b			bcs 	_ETVariable
.8fcc	c9 30		cmp #$30			cmp 	#'0' 						; is it a number
.8fce	90 6e		bcc $903e			bcc 	_ETPuncUnary 				; if not it might be a punctuation unary.
.8fd0	c9 3a		cmp #$3a			cmp 	#'9'+1
.8fd2	b0 6a		bcs $903e			bcs 	_ETPuncUnary
.8fd4	20 a2 8e	jsr $8ea2			jsr 	EncodeNumberStart 			; can't fail as it's 0-9 !
.8fd7					_ETNumber:
.8fd7	c8		iny				iny 								; keep encoding until we have the numbers
.8fd8	b1 30		lda ($30),y			lda 	(codePtr),y
.8fda	20 a5 8e	jsr $8ea5			jsr 	EncodeNumberContinue
.8fdd	b0 f8		bcs $8fd7			bcs 	_ETNumber 					; go back if accepted.
.8fdf	60		rts				rts
.8fe0					_ETCheckUnary:
.8fe0	c9 ff		cmp #$ff			cmp 	#KWC_STRING 				; string token
.8fe2	f0 41		beq $9025			beq 	_ETString
.8fe4	c9 fe		cmp #$fe			cmp 	#KWC_HEXCONST 				; hex constant.
.8fe6	f0 12		beq $8ffa			beq 	_ETHexConstant
.8fe8	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; check it actually is a unary function
.8fea	90 0b		bcc $8ff7			bcc 	_ETSyntaxError
.8fec	c9 96		cmp #$96			cmp 	#KWC_LAST_UNARY+1
.8fee	b0 07		bcs $8ff7			bcs 	_ETSyntaxError
.8ff0	da		phx				phx 								; push X on the stack
.8ff1	0a		asl a				asl 	a 							; put vector x 2 into X
.8ff2	aa		tax				tax
.8ff3	c8		iny				iny 								; consume unary function token
.8ff4	7c 94 80	jmp ($8094,x)			jmp 	(VectorSet0,x) 				; and do it.
.8ff7					_ETSyntaxError:
.8ff7	4c f3 9f	jmp $9ff3			jmp 	SyntaxError
.8ffa					_ETHexConstant:
.8ffa	c8		iny				iny 								; skip #
.8ffb	c8		iny				iny 								; skip count
.8ffc	20 3d 94	jsr $943d			jsr 	NSMSetZero 					; clear result
.8fff					_ETHLoop:
.8fff	b1 30		lda ($30),y			lda 	(codePtr),y
.9001	c8		iny				iny 								; and consume
.9002	c9 00		cmp #$00			cmp 	#0 							; exit if zero
.9004	f0 1e		beq $9024			beq 	_ETHExit
.9006	48		pha				pha 								; save on stack.
.9007	20 52 94	jsr $9452			jsr 	NSMShiftLeft 				; x 2
.900a	20 52 94	jsr $9452			jsr 	NSMShiftLeft 				; x 4
.900d	20 52 94	jsr $9452			jsr 	NSMShiftLeft 				; x 8
.9010	20 52 94	jsr $9452			jsr 	NSMShiftLeft 				; x 16
.9013	68		pla				pla 								; ASCII
.9014	c9 41		cmp #$41			cmp 	#'A'
.9016	90 02		bcc $901a			bcc 	_ETHNotChar
.9018	e9 07		sbc #$07			sbc 	#7
.901a					_ETHNotChar:
.901a	29 0f		and #$0f			and 	#15 						; digit now
.901c	1d 08 06	ora $0608,x			ora 	NSMantissa0,x 				; put in LS Nibble
.901f	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.9022	80 db		bra $8fff			bra 	_ETHLoop 					; go round.
.9024					_ETHExit:
.9024	60		rts				rts
.9025					_ETString:
.9025	c8		iny				iny 								; look at length
.9026	b1 30		lda ($30),y			lda 	(codePtr),y
.9028	48		pha				pha
.9029	c8		iny				iny 								; first character
.902a	20 ce 9a	jsr $9ace			jsr 	MemoryInline 				; put address of string at (code-Ptr),y on stack
.902d	68		pla				pla 								; restore count and save
.902e	85 36		sta $36				sta 	zTemp0
.9030	98		tya				tya 								; add length to Y to skip it.
.9031	18		clc				clc
.9032	65 36		adc $36				adc 	zTemp0
.9034	a8		tay				tay
.9035	a9 10		lda #$10			lda 	#NSTString 					; mark as string
.9037	9d 00 06	sta $0600,x			sta 	NSStatus,x
.903a	60		rts				rts
.903b					_ETVariable:
.903b	4c 95 90	jmp $9095			jmp 	VariableHandler
.903e					_ETPuncUnary:
.903e	c8		iny				iny 								; consume the unary character
.903f	c9 2d		cmp #$2d			cmp 	#KWD_MINUS 					; unary minus
.9041	f0 2d		beq $9070			beq 	_ETUnaryNegate
.9043	c9 10		cmp #$10			cmp 	#KWD_AT 					; @ reference -> constant
.9045	f0 39		beq $9080			beq 	_ETDereference
.9047	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; parenthesis
.9049	f0 43		beq $908e			beq 	_ETParenthesis
.904b	64 36		stz $36				stz 	zTemp0 						; zTemp0 is the indirection level.
.904d	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; byte indirection (0) ?
.904f	f0 06		beq $9057			beq 	_ETIndirection
.9051	e6 36		inc $36				inc 	zTemp0
.9053	c9 21		cmp #$21			cmp 	#KWD_PLING					; word indirection (1) \
.9055	d0 a0		bne $8ff7			bne 	_ETSyntaxError
.9057					_ETIndirection:
.9057	a5 36		lda $36				lda 	zTemp0 						; push indirection amount (0-1) => (1-2) on the stack
.9059	1a		inc a				inc 	a
.905a	48		pha				pha
.905b	20 c4 8f	jsr $8fc4			jsr 	EvaluateTerm				; evaluate the term
.905e	20 08 8e	jsr $8e08			jsr 	Dereference 				; dereference it.
.9061	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a +ve integer.
.9064	d0 07		bne $906d			bne 	_ETTypeMismatch
.9066	68		pla				pla 								; indirection 1-2
.9067	09 20		ora #$20			ora 	#NSBIsReference 			; make it a reference.
.9069	9d 00 06	sta $0600,x			sta 	NSStatus,x
.906c	60		rts				rts
.906d					_ETTypeMismatch:
.906d	4c fd 9f	jmp $9ffd			jmp 	TypeError
.9070					_ETUnaryNegate:
.9070	20 c4 8f	jsr $8fc4			jsr 	EvaluateTerm				; evaluate the term
.9073	20 08 8e	jsr $8e08			jsr 	Dereference 				; dereference it.
.9076	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a number
.9079	29 10		and #$10			and 	#NSTString
.907b	d0 f0		bne $906d			bne 	_ETTypeMismatch
.907d	4c e9 93	jmp $93e9			jmp 	NSMNegate  					; just toggles the sign bit.
.9080					_ETDereference:
.9080	20 c4 8f	jsr $8fc4			jsr 	EvaluateTerm				; evaluate the term
.9083	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a reference
.9086	29 20		and #$20			and 	#NSBIsReference
.9088	f0 e3		beq $906d			beq 	_ETTypeMismatch
.908a	9e 00 06	stz $0600,x			stz 	NSStatus,x 					; make it an integer address
.908d	60		rts				rts
.908e					_ETParenthesis:
.908e	20 f3 8c	jsr $8cf3			jsr 	EvaluateExpression 			; evaluate here, from lowest precedence
.9091	20 23 9b	jsr $9b23			jsr 	CheckRightBracket 			; check for )
.9094	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/variable.asm

.9095					VariableHandler:
.9095	b1 30		lda ($30),y			lda 	(codePtr),y
.9097	18		clc				clc
.9098	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.909a	85 37		sta $37				sta 	zTemp0+1
.909c	c8		iny				iny
.909d	b1 30		lda ($30),y			lda 	(codePtr),y
.909f	85 36		sta $36				sta 	zTemp0
.90a1	c8		iny				iny
.90a2	18		clc				clc									; copy variable address+3 to mantissa
.90a3	69 03		adc #$03			adc 	#3
.90a5	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.90a8	a5 37		lda $37				lda 	zTemp0+1
.90aa	69 00		adc #$00			adc 	#0
.90ac	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.90af	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.90b2	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.90b5	9e 28 06	stz $0628,x			stz 	NSExponent,x
.90b8	5a		phy				phy
.90b9	a0 02		ldy #$02			ldy 	#2 							; read type
.90bb	b1 36		lda ($36),y			lda 	(zTemp0),y
.90bd	7a		ply				ply
.90be	29 1c		and #$1c			and 	#NSBTypeMask+NSBIsArray 	; get type information
.90c0	09 20		ora #$20			ora 	#NSBIsReference 			; make a reference.
.90c2	9d 00 06	sta $0600,x			sta 	NSStatus,x
.90c5	29 04		and #$04			and 	#NSBIsArray
.90c7	d0 01		bne $90ca			bne 	_VHArray
.90c9	60		rts				rts
.90ca					_VHArray:
.90ca	e8		inx				inx
.90cb	20 d5 93	jsr $93d5			jsr 	Evaluate8BitInteger 		; get the 1st index.
.90ce	a9 ff		lda #$ff			lda 	#$FF 						; set Status of X+2 to a duff value so we know if we picked it up.
.90d0	9d 01 06	sta $0601,x			sta 	NSStatus+1,x
.90d3	b1 30		lda ($30),y			lda 	(codePtr),y
.90d5	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.90d7	d0 06		bne $90df			bne 	_VHNoSecondIndex
.90d9	c8		iny				iny 								; skip the comma
.90da	e8		inx				inx
.90db	20 d5 93	jsr $93d5			jsr 	Evaluate8BitInteger 		; get the 2nd index.
.90de	ca		dex				dex
.90df					_VHNoSecondIndex:
.90df	ca		dex				dex 								; set X back.
.90e0	20 23 9b	jsr $9b23			jsr 	CheckRightBracket 			; and check the right bracket.
.90e3	5a		phy				phy 								; save position
.90e4	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy record address to zaTemp
.90e7	85 3e		sta $3e				sta 	zaTemp
.90e9	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.90ec	85 3f		sta $3f				sta 	zaTemp+1
.90ee	a0 03		ldy #$03			ldy 	#3 							; get the second index - which is 0 if there is one index.
.90f0	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.90f2	f0 02		beq $90f6			beq 	_VHHas2Mask
.90f4	a9 ff		lda #$ff			lda 	#$FF
.90f6					_VHHas2Mask:
.90f6	dd 02 06	cmp $0602,x			cmp 	NSStatus+2,x 				; so if they are the same there are the wrong number of indices
.90f9	f0 54		beq $914f			beq 	_VHBadIndex
.90fb	0a		asl a				asl 	a 							; carry will be set if a second index
.90fc	90 09		bcc $9107			bcc 	_VHCheckFirstIndex
.90fe	a0 03		ldy #$03			ldy 	#3 			 				; check the 2nd size >= 2nd index
.9100	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9102	dd 0a 06	cmp $060a,x			cmp 	NSMantissa0+2,x
.9105	90 48		bcc $914f			bcc 	_VHBadIndex
.9107					_VHCheckFirstIndex:
.9107	a0 02		ldy #$02			ldy 	#2 			 				; check the 2nd size >= 2nd index
.9109	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.910b	dd 09 06	cmp $0609,x			cmp 	NSMantissa0+1,x
.910e	90 3f		bcc $914f			bcc 	_VHBadIndex
.9110	64 36		stz $36				stz 	zTemp0 						; clear zTemp0 (if 1 index)
.9112	64 37		stz $37				stz 	zTemp0+1
.9114	bd 02 06	lda $0602,x			lda 	NSStatus+2,x 				; if only one index provided, don't need to multiply
.9117	30 0f		bmi $9128			bmi 	_VHNoMultiply
.9119	da		phx				phx
.911a	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; get 2nd index on stack
.911d	48		pha				pha
.911e	a0 02		ldy #$02			ldy 	#2 							; get 1st size in A
.9120	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9122	1a		inc a				inc 	a 							; add 1 for zero base
.9123	fa		plx				plx
.9124	20 a5 9f	jsr $9fa5			jsr 	Multiply8x8 				; calculate -> Z0
.9127	fa		plx				plx
.9128					_VHNoMultiply:
.9128	18		clc				clc
.9129	a5 36		lda $36				lda 	zTemp0
.912b	7d 09 06	adc $0609,x			adc 	NSMantissa0+1,x
.912e	85 36		sta $36				sta 	zTemp0
.9130	a5 37		lda $37				lda 	zTemp0+1
.9132	69 00		adc #$00			adc 	#0
.9134	85 37		sta $37				sta 	zTemp0+1
.9136	bd 00 06	lda $0600,x			lda 	NSStatus,x
.9139	20 9b 82	jsr $829b			jsr 	ScaleByBaseType
.913c	18		clc				clc
.913d	b2 3e		lda ($3e)			lda 	(zaTemp)
.913f	65 36		adc $36				adc 	zTemp0
.9141	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.9144	a0 01		ldy #$01			ldy 	#1
.9146	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.9148	65 37		adc $37				adc 	zTemp0+1
.914a	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.914d	7a		ply				ply 								; restore position
.914e	60		rts				rts
.914f					_VHBadIndex:
.914f	a9 17		lda #$17		lda	#23
.9151	4c ea 88	jmp $88ea		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/abs.asm

.9edb					AbsUnary:
.9edb	fa		plx				plx 								; restore stack pos
.9edc	20 91 93	jsr $9391			jsr 	EvaluateNumber 				; get a float or int
.9edf	20 23 9b	jsr $9b23			jsr 	CheckRightBracket
.9ee2	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; clear the sign bit
.9ee5	29 7f		and #$7f			and 	#$7F
.9ee7	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9eea	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/alloc.asm

.9154					AllocUnary:
.9154	fa		plx				plx 								; restore stack pos
.9155	20 c9 93	jsr $93c9			jsr 	Evaluate16BitInteger		; get bytes required.
.9158	20 23 9b	jsr $9b23			jsr 	CheckRightBracket
.915b	da		phx				phx 								; save X/Y
.915c	5a		phy				phy
.915d	8a		txa				txa 								; copy X into Y
.915e	a8		tay				tay
.915f	b9 10 06	lda $0610,y			lda		NSMantissa1,y 				; get size
.9162	aa		tax				tax
.9163	b9 08 06	lda $0608,y			lda 	NSMantissa0,y
.9166	20 73 91	jsr $9173			jsr 	AllocateXABytes 			; allocate memory
.9169	99 08 06	sta $0608,y			sta 	NSMantissa0,y 				; write address out.
.916c	8a		txa				txa
.916d	99 10 06	sta $0610,y			sta 	NSMantissa1,y
.9170	7a		ply				ply
.9171	fa		plx				plx
.9172	60		rts				rts
.9173					AllocateXABytes:
.9173	5a		phy				phy
.9174	ac 0c 07	ldy $070c			ldy 	lowMemPtr 					; push current address on stack and to zTemp0
.9177	84 36		sty $36				sty 	zTemp0
.9179	5a		phy				phy
.917a	ac 0d 07	ldy $070d			ldy 	lowMemPtr+1
.917d	84 37		sty $37				sty 	zTemp0+1
.917f	5a		phy				phy
.9180	18		clc				clc 								; add to low memory pointer
.9181	6d 0c 07	adc $070c			adc 	lowMemPtr
.9184	8d 0c 07	sta $070c			sta 	lowMemPtr
.9187	8a		txa				txa
.9188	6d 0d 07	adc $070d			adc 	lowMemPtr+1
.918b	8d 0d 07	sta $070d			sta 	lowMemPtr+1
.918e					_ClearMemory:
.918e	ad 0c 07	lda $070c			lda 	lowMemPtr 					; cleared all memory allocated
.9191	c5 36		cmp $36				cmp 	zTemp0
.9193	d0 07		bne $919c			bne 	_CMClearNext
.9195	ad 0d 07	lda $070d			lda 	lowMemPtr+1
.9198	c5 37		cmp $37				cmp 	zTemp0+1
.919a	f0 0c		beq $91a8			beq 	_CMExit
.919c					_CMClearNext:
.919c	a9 00		lda #$00			lda 	#0 							; clear byte, advance to next.
.919e	92 36		sta ($36)			sta 	(zTemp0)
.91a0	e6 36		inc $36				inc 	zTemp0
.91a2	d0 ea		bne $918e			bne 	_ClearMemory
.91a4	e6 37		inc $37				inc		zTemp0+1
.91a6	80 e6		bra $918e			bra 	_ClearMemory
.91a8					_CMExit:
.91a8	fa		plx				plx
.91a9	68		pla				pla
.91aa	7a		ply				ply
.91ab	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/asc.asm

.9eeb					AscUnary:
.9eeb	fa		plx				plx 								; restore stack pos
.9eec	20 9c 93	jsr $939c			jsr 	EvaluateString 				; get a string
.9eef	b2 36		lda ($36)			lda 	(zTemp0)					; get/return firs character
.9ef1	20 3f 94	jsr $943f			jsr 	NSMSetByte
.9ef4	20 23 9b	jsr $9b23			jsr 	CheckRightBracket
.9ef7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/frac.asm

.9ef8					FracUnary:
.9ef8	fa		plx				plx 								; restore stack pos
.9ef9	20 91 93	jsr $9391			jsr 	EvaluateNumber 				; get a float or int
.9efc	20 23 9b	jsr $9b23			jsr 	CheckRightBracket
.9eff	bd 00 06	lda $0600,x			lda 	NSStatus,x
.9f02	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.9f04	f0 04		beq $9f0a			beq 	_IUZero
.9f06	20 c8 9d	jsr $9dc8			jsr 	FloatFractionalPart
.9f09	60		rts				rts
.9f0a					_IUZero:
.9f0a	20 3d 94	jsr $943d			jsr 	NSMSetZero
.9f0d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/int.asm

.9f0e					IntUnary:
.9f0e	fa		plx				plx 								; restore stack pos
.9f0f	20 91 93	jsr $9391			jsr 	EvaluateNumber 				; get a float or int
.9f12	20 23 9b	jsr $9b23			jsr 	CheckRightBracket
.9f15	bd 00 06	lda $0600,x			lda 	NSStatus,x
.9f18	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.9f1a	f0 03		beq $9f1f			beq 	_IUExit
.9f1c	20 2b 9e	jsr $9e2b			jsr 	FloatIntegerPart
.9f1f					_IUExit:
.9f1f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/len.asm

.9f20					LenUnary:
.9f20	fa		plx				plx 								; restore stack pos
.9f21	20 9c 93	jsr $939c			jsr 	EvaluateString 				; get a string
.9f24	5a		phy				phy
.9f25	a0 00		ldy #$00			ldy 	#0 							; find length
.9f27					_LenFind:
.9f27	b1 36		lda ($36),y			lda 	(zTemp0),y
.9f29	f0 06		beq $9f31			beq 	_LenExit
.9f2b	c8		iny				iny
.9f2c	d0 f9		bne $9f27			bne 	_LenFind
.9f2e	4c f8 9f	jmp $9ff8			jmp 	RangeError 					; string > 255
.9f31					_LenExit:
.9f31	98		tya				tya
.9f32	20 3f 94	jsr $943f			jsr 	NSMSetByte
.9f35	7a		ply				ply
.9f36	20 23 9b	jsr $9b23			jsr 	CheckRightBracket
.9f39	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/not.asm

.91ac					Unary_Not:
.91ac	fa		plx				plx
.91ad	20 b4 93	jsr $93b4			jsr 	EvaluateInteger 			; get integer
.91b0	20 23 9b	jsr $9b23			jsr 	CheckRightBracket
.91b3	20 6d 94	jsr $946d			jsr 	NSMIsZero 					; zero mantissa ?
.91b6	f0 04		beq $91bc			beq 	_NotZero
.91b8	20 3d 94	jsr $943d			jsr 	NSMSetZero
.91bb	60		rts				rts
.91bc					_NotZero:
.91bc	4c 57 89	jmp $8957			jmp 	ReturnTrue
.91bf					_UNBad:
.91bf	4c 02 a0	jmp $a002			jmp 	ArgumentError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/rnd.asm

.91c2					Unary_Rnd:
.91c2	20 91 93	jsr $9391			jsr 	EvaluateNumber 				; number to use.
.91c5	20 23 9b	jsr $9b23			jsr 	CheckRightBracket 			; closing bracket
.91c8	20 f1 91	jsr $91f1			jsr 	Random32Bit 				; generate a number.
.91cb	ad 08 07	lda $0708			lda 	RandomSeed+0
.91ce	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.91d1	ad 09 07	lda $0709			lda 	RandomSeed+1
.91d4	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.91d7	ad 0a 07	lda $070a			lda 	RandomSeed+2
.91da	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.91dd	ad 0b 07	lda $070b			lda 	RandomSeed+3
.91e0	29 7f		and #$7f			and 	#$7F 						; make legal mantissa
.91e2	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.91e5	a9 e1		lda #$e1			lda 	#-31 						; force into 0-1 range
.91e7	8d 28 06	sta $0628			sta 	NSExponent
.91ea	a9 08		lda #$08			lda 	#NSTFloat
.91ec	8d 00 06	sta $0600			sta 	NSStatus 					; positive.
>91ef	db						.byte 	$DB 						; causes a break in the emulator
.91f0	60		rts				rts
.91f1					Random32Bit:
.91f1	5a		phy				phy
.91f2	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.91f4	ad 08 07	lda $0708			lda 	RandomSeed+0 				; check the seed isn't zero
.91f7	d0 03		bne $91fc			bne 	_Random1
.91f9	a8		tay				tay 								; if so do it 256 times
.91fa	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.91fc					_Random1:
.91fc	0a		asl a				asl 	a 							; LSFR RNG
.91fd	2e 09 07	rol $0709			rol 	RandomSeed+1
.9200	2e 0a 07	rol $070a			rol 	RandomSeed+2
.9203	2e 0b 07	rol $070b			rol 	RandomSeed+3
.9206	90 02		bcc $920a			bcc 	_Random2
.9208	49 c5		eor #$c5			eor 	#$C5
.920a					_Random2:
.920a	88		dey				dey
.920b	d0 ef		bne $91fc			bne 	_Random1
.920d	7a		ply				ply
.920e	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/sgn.asm

.9f3a					SgnUnary:
.9f3a	fa		plx				plx 								; restore stack pos
.9f3b	20 91 93	jsr $9391			jsr 	EvaluateNumber 				; get a float or int
.9f3e	20 23 9b	jsr $9b23			jsr 	CheckRightBracket
.9f41	20 6d 94	jsr $946d			jsr 	NSMIsZero 					; if zero
.9f44	f0 10		beq $9f56			beq 	_SGZero  					; return Int Zero
.9f46	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get status w/sign
.9f49	48		pha				pha
.9f4a	a9 01		lda #$01			lda 	#1 							; set to 1
.9f4c	20 3f 94	jsr $943f			jsr 	NSMSetByte
.9f4f	68		pla				pla
.9f50	29 80		and #$80			and		#$80 						; copy the sign byte out
.9f52	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9f55	60		rts				rts
.9f56	20 3d 94	jsr $943d	_SGZero:jsr 	NSMSetZero
.9f59	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/val.asm

.9f5a					ValUnary:
.9f5a	fa		plx				plx 								; restore stack pos
.9f5b	20 70 9f	jsr $9f70			jsr 	ValMainCode 				; do the main val() code
.9f5e	b0 01		bcs $9f61			bcs 	_VUError 					; couldn't convert
.9f60	60		rts				rts
.9f61					_VUError:
.9f61	4c fd 9f	jmp $9ffd			jmp 	TypeError
.9f64					IsValUnary:
.9f64	fa		plx				plx 								; restore stack pos
.9f65	20 70 9f	jsr $9f70			jsr 	ValMainCode 				; do the main val() code
.9f68	b0 03		bcs $9f6d			bcs 	_VUBad
.9f6a	4c 57 89	jmp $8957			jmp 	ReturnTrue
.9f6d					_VUBad:
.9f6d	4c 63 89	jmp $8963			jmp 	ReturnFalse
.9f70					ValMainCode:
.9f70	20 9c 93	jsr $939c			jsr 	EvaluateString 				; get a string
.9f73	20 23 9b	jsr $9b23			jsr 	CheckRightBracket 			; check right bracket present
.9f76	5a		phy				phy
.9f77	b2 36		lda ($36)			lda 	(zTemp0) 					; check not empty string
.9f79	f0 17		beq $9f92			beq 	_VMCFail2
.9f7b	a0 ff		ldy #$ff			ldy 	#$FF 						; start position
.9f7d	48		pha				pha 								; save first character
.9f7e	c9 2d		cmp #$2d			cmp 	#"-"		 				; is it -
.9f80	d0 01		bne $9f83			bne 	_VMCStart
.9f82	c8		iny				iny 								; skip over -
.9f83					_VMCStart:
.9f83	38		sec				sec 								; initialise first time round.
.9f84					_VMCNext:
.9f84	c8		iny				iny 								; pre-increment
.9f85	b1 36		lda ($36),y			lda 	(zTemp0),y 					; next character
.9f87	f0 0c		beq $9f95			beq 	_VMCSuccess 				; successful.
.9f89	20 a6 8e	jsr $8ea6			jsr 	EncodeNumber 				; send it to the number-builder
.9f8c	90 03		bcc $9f91			bcc 	_VMCFail 					; if failed, give up.
.9f8e	18		clc				clc 								; next time round, countinue
.9f8f	80 f3		bra $9f84			bra 	_VMCNext
.9f91					_VMCFail:
.9f91	68		pla				pla
.9f92					_VMCFail2:
.9f92	7a		ply				ply
.9f93	38		sec				sec
.9f94	60		rts				rts
.9f95					_VMCSuccess:
.9f95	a9 00		lda #$00			lda 	#0 							; construct final
.9f97	20 a6 8e	jsr $8ea6			jsr 	EncodeNumber
.9f9a	68		pla				pla
.9f9b	c9 2d		cmp #$2d			cmp 	#"-"
.9f9d	d0 03		bne $9fa2			bne 	_VMCNotNegative
.9f9f	20 e9 93	jsr $93e9			jsr		NSMNegate
.9fa2					_VMCNotNegative:
.9fa2	7a		ply				ply
.9fa3	18		clc				clc
.9fa4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/chr.asm

.920f					ChrUnary:
.920f	fa		plx				plx 								; restore stack pos
.9210	20 d5 93	jsr $93d5			jsr 	Evaluate8BitInteger			; get value
.9213	48		pha				pha
.9214	20 23 9b	jsr $9b23			jsr 	CheckRightBracket
.9217	a9 01		lda #$01			lda 	#1 							; allocate space for one char
.9219	20 ed a1	jsr $a1ed			jsr 	StringTempAllocate
.921c	68		pla				pla 								; write number to it
.921d	20 2b a2	jsr $a22b			jsr 	StringTempWrite
.9220	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/spc.asm

.9221					SpcUnary:
.9221	fa		plx				plx 								; restore stack pos
.9222	20 d5 93	jsr $93d5			jsr 	Evaluate8BitInteger			; get value
.9225	5a		phy				phy
.9226	48		pha				pha 								; save count
.9227	20 ed a1	jsr $a1ed			jsr 	StringTempAllocate
.922a	7a		ply				ply 								; to do count in Y
.922b					_SpcLoop:
.922b	c0 00		cpy #$00			cpy 	#0
.922d	f0 08		beq $9237			beq 	_SpcExit
.922f	a9 20		lda #$20			lda 	#32
.9231	20 2b a2	jsr $a22b			jsr 	StringTempWrite
.9234	88		dey				dey
.9235	80 f4		bra $922b			bra 	_SPCLoop
.9237					_SpcExit:
.9237	7a		ply				ply
.9238	20 23 9b	jsr $9b23			jsr 	CheckRightBracket
.923b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/str.asm

.923c					Unary_Str:
.923c	fa		plx				plx
.923d	20 91 93	jsr $9391			jsr 	EvaluateNumber  			; get number
.9240	20 23 9b	jsr $9b23			jsr 	CheckRightBracket 			; closing bracket
.9243	a9 05		lda #$05			lda 	#5 							; maximum decimals, from Basic816
.9245	20 5e 92	jsr $925e			jsr 	ConvertNumberToString 		; do the conversion.
.9248	a9 21		lda #$21			lda		#33 						; create buffer
.924a	20 ed a1	jsr $a1ed			jsr 	StringTempAllocate 			; allocate memory
.924d	da		phx				phx
.924e	a2 00		ldx #$00			ldx 	#0
.9250					_USCopy:
.9250	bd 8f 08	lda $088f,x			lda 	DecimalBuffer,x
.9253	20 2b a2	jsr $a22b			jsr 	StringTempWrite
.9256	e8		inx				inx
.9257	bd 8f 08	lda $088f,x			lda 	DecimalBuffer,x
.925a	d0 f4		bne $9250			bne 	_USCopy
.925c	fa		plx				plx
.925d	60		rts				rts
.925e					ConvertNumberToString:
.925e	5a		phy				phy 								; save code position
.925f	8d 13 07	sta $0713			sta 	DecimalPlaces	 			; save number of DPs.
.9262	9c 14 07	stz $0714			stz 	dbOffset 					; offset into decimal buffer = start.
.9265	bd 00 06	lda $0600,x			lda 	NSStatus,x  				; is it -ve.
.9268	10 0a		bpl $9274			bpl 	_CNTSNotNegative
.926a	29 7f		and #$7f			and 	#$7F 						; make +ve
.926c	9d 00 06	sta $0600,x			sta 	NSStatus,x
.926f	a9 2d		lda #$2d			lda 	#"-"
.9271	20 da 92	jsr $92da			jsr 	WriteDecimalBuffer
.9274					_CNTSNotNegative:
.9274	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if decimal
.9277	f0 15		beq $928e			beq 	_CNTSNotFloat
.9279	e8		inx				inx 								; round up
.927a	a9 01		lda #$01			lda 	#1
.927c	20 3f 94	jsr $943f			jsr 	NSMSetByte
.927f	ca		dex				dex
.9280	bd 28 06	lda $0628,x			lda		NSExponent,x
.9283	9d 29 06	sta $0629,x			sta 	NSExponent+1,x
.9286	a9 08		lda #$08			lda 	#NSTFloat
.9288	9d 01 06	sta $0601,x			sta 	NSStatus+1,x
.928b	20 ea 9c	jsr $9cea			jsr 	FloatAdd
.928e					_CNTSNotFloat:
.928e	20 bc 92	jsr $92bc			jsr 	MakePlusTwoString
.9291	20 c8 9d	jsr $9dc8			jsr 	FloatFractionalPart 		; get the fractional part
.9294	20 8c 9e	jsr $9e8c			jsr 	NSNormalise					; normalise , exit if zero
.9297	f0 21		beq $92ba			beq 	_CNTSExit
.9299	a9 2e		lda #$2e			lda 	#"."
.929b	20 da 92	jsr $92da			jsr 	WriteDecimalBuffer 			; write decimal place
.929e					_CNTSDecimal:
.929e	ce 13 07	dec $0713			dec 	DecimalPlaces 				; done all the decimals
.92a1	30 17		bmi $92ba			bmi 	_CNTSExit
.92a3	e8		inx				inx 								; x 10.0
.92a4	a9 0a		lda #$0a			lda 	#10
.92a6	20 3f 94	jsr $943f			jsr 	NSMSetByte
.92a9	a9 08		lda #$08			lda 	#NSTFloat
.92ab	9d 00 06	sta $0600,x			sta 	NSStatus,x
.92ae	ca		dex				dex
.92af	20 55 9e	jsr $9e55			jsr 	FloatMultiply
.92b2	20 bc 92	jsr $92bc			jsr 	MakePlusTwoString
.92b5	20 c8 9d	jsr $9dc8			jsr 	FloatFractionalPart 		; get the fractional part
.92b8	80 e4		bra $929e			bra 	_CNTSDecimal 				; keep going.
.92ba					_CNTSExit:
.92ba	7a		ply				ply
.92bb	60		rts				rts
.92bc					MakePlusTwoString:
.92bc	da		phx				phx
.92bd	20 14 94	jsr $9414			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.92c0	e8		inx				inx 								; access it
.92c1	e8		inx				inx
.92c2	20 2b 9e	jsr $9e2b			jsr 	FloatIntegerPart 			; make it an integer
.92c5	a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.92c7	20 94 9c	jsr $9c94			jsr 	ConvertInt32
.92ca	a2 00		ldx #$00			ldx	 	#0
.92cc					_MPTSCopy:
.92cc	bd 6d 08	lda $086d,x			lda 	NumberBuffer,x
.92cf	20 da 92	jsr $92da			jsr 	WriteDecimalBuffer
.92d2	e8		inx				inx
.92d3	bd 6d 08	lda $086d,x			lda 	NumberBuffer,x
.92d6	d0 f4		bne $92cc			bne 	_MPTSCopy
.92d8	fa		plx				plx
.92d9	60		rts				rts
.92da					WriteDecimalBuffer:
.92da	da		phx				phx
.92db	ae 14 07	ldx $0714			ldx 	dbOffset
.92de	9d 8f 08	sta $088f,x			sta 	DecimalBuffer,x
.92e1	9e 90 08	stz $0890,x			stz 	DecimalBuffer+1,x
.92e4	ee 14 07	inc $0714			inc 	dbOffset
.92e7	fa		plx				plx
.92e8	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/substring.asm

.92e9					Unary_Left:
.92e9	fa		plx				plx
.92ea	18		clc				clc 								; only one parameter
.92eb	20 60 93	jsr $9360			jsr 	SubstringInitial 			; set up.
.92ee	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; Param #1 is the length
.92f1	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.92f4	9e 09 06	stz $0609,x			stz 	NSMantissa0+1,x 			; Start is zero.
.92f7	80 2c		bra $9325			bra 	SubstringMain
.92f9					Unary_Right:
.92f9	fa		plx				plx
.92fa	18		clc				clc 								; only one parameter
.92fb	20 60 93	jsr $9360			jsr 	SubstringInitial 			; set up.
.92fe	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; length => param 2
.9301	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.9304	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; total length
.9307	fd 09 06	sbc $0609,x			sbc 	NSMantissa0+1,x 			; length - required.
.930a	b0 02		bcs $930e			bcs 	_URNotUnderflow
.930c	a9 00		lda #$00			lda 	#0 							; start from the beginning, as something like right$("AB",3)
.930e					_URNotUnderFlow:
.930e	9d 09 06	sta $0609,x			sta 	NSMantissa0+1,x 			; this is the start position
.9311	80 12		bra $9325			bra 	SubStringMain
.9313					Unary_Mid:
.9313	fa		plx				plx
.9314	38		sec				sec 								; two parameters
.9315	20 60 93	jsr $9360			jsr 	SubstringInitial 			; set up.
.9318	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; first parameter is zero ?
.931b	f0 05		beq $9322			beq 	_UMError
.931d	de 09 06	dec $0609,x			dec 	NSMantissa0+1,x				; reduce initial offset by 1 as MID$(a$,1..) is actually the first character
.9320	80 03		bra $9325			bra 	SubStringMain
.9322					_UMError:
.9322	4c 02 a0	jmp $a002			jmp 	ArgumentError
.9325					SubStringMain:
.9325	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; is the initial offset >= the length
.9328	dd 28 06	cmp $0628,x			cmp 	NSExponent,x
.932b	b0 2d		bcs $935a			bcs 	_SSMNull 					; if so, return an empty string.
.932d	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; if copy count is zero
.9330	f0 28		beq $935a			beq 	_SSMNull 					; return empty string.
.9332	18		clc				clc 								; add the offset +1 to the address and
.9333	bd 08 06	lda $0608,x			lda	 	NSMantissa0,x 				; put in zTemp
.9336	7d 09 06	adc $0609,x			adc 	NSMantissa0+1,x
.9339	85 36		sta $36				sta 	zTemp0
.933b	bd 10 06	lda $0610,x			lda	 	NSMantissa1,x
.933e	69 00		adc #$00			adc 	#0
.9340	85 37		sta $37				sta 	zTemp0+1
.9342					_SSMNoCarry:
.9342	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; characters required.
.9345	20 ed a1	jsr $a1ed			jsr 	StringTempAllocate 			; allocate that many characters
.9348	5a		phy				phy 								; save Y
.9349	a0 00		ldy #$00			ldy 	#0 							; start copying in.
.934b					_SSMCopy:
.934b	b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next character
.934d	f0 09		beq $9358			beq 	_SSMEString 				; no more to copy
.934f	20 2b a2	jsr $a22b			jsr 	StringTempWrite 			; and write it out.
.9352	c8		iny				iny
.9353	de 0a 06	dec $060a,x			dec 	NSMantissa0+2,x
.9356	d0 f3		bne $934b			bne 	_SSMCopy
.9358					_SSMEString:
.9358	7a		ply				ply
.9359					_SSMExit:
.9359	60		rts				rts
.935a					_SSMNull:
.935a	a9 00		lda #$00			lda 	#0
.935c	20 ed a1	jsr $a1ed			jsr 	StringTempAllocate
.935f	60		rts				rts
.9360					SubstringInitial:
.9360	da		phx				phx 								; save initial stack position
.9361	08		php				php 								; save carry on stack indicating 2 parameters
.9362	20 9c 93	jsr $939c			jsr 	EvaluateString 				; get a string
.9365	5a		phy				phy 								; calculate length to exponent.
.9366	a0 ff		ldy #$ff			ldy 	#$FF
.9368					_SIFindLength:
.9368	c8		iny				iny
.9369	b1 36		lda ($36),y			lda 	(zTemp0),y
.936b	d0 fb		bne $9368			bne 	_SIFindLength
.936d	98		tya				tya
.936e	9d 28 06	sta $0628,x			sta 	NSExponent,x
.9371	7a		ply				ply
.9372	e8		inx				inx
.9373	20 2b 9b	jsr $9b2b			jsr 	CheckComma 					; comma next
.9376	20 d5 93	jsr $93d5			jsr 	Evaluate8BitInteger 		; get next parameter
.9379	28		plp				plp 								; is it the last parameter ?
.937a	90 07		bcc $9383			bcc 	_SSIExit 					; if so, exit.
.937c	e8		inx				inx
.937d	20 2b 9b	jsr $9b2b			jsr 	CheckComma 					; comma next
.9380	20 d5 93	jsr $93d5			jsr 	Evaluate8BitInteger 		; get last parameter
.9383					_SSIExit:
.9383	fa		plx				plx
.9384	20 23 9b	jsr $9b23			jsr 	CheckRightBracket 			; check closing bracket
.9387	60		rts				rts 								; exit

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/exprhelper.asm

.9388					EvaluateValue:
.9388	48		pha				pha
.9389	20 f3 8c	jsr $8cf3			jsr		EvaluateExpression 			; expression
.938c	20 08 8e	jsr $8e08			jsr 	Dereference					; derefernce it
.938f	68		pla				pla
.9390	60		rts				rts
.9391					EvaluateNumber:
.9391	20 88 93	jsr $9388			jsr 	EvaluateValue 				; get a value
.9394	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if string.
.9397	29 10		and #$10			and 	#NSBIsString
.9399	d0 16		bne $93b1			bne 	HelperTypeError
.939b	60		rts				rts
.939c					EvaluateString:
.939c	20 88 93	jsr $9388			jsr 	EvaluateValue 				; get a value
.939f	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if string.
.93a2	29 10		and #$10			and 	#NSBIsString
.93a4	f0 0b		beq $93b1			beq 	HelperTypeError
.93a6					CopyAddressToTemp0:
.93a6	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy address -> zTemp0
.93a9	85 36		sta $36				sta 	zTemp0
.93ab	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.93ae	85 37		sta $37				sta 	zTemp0+1
.93b0	60		rts				rts
.93b1					HelperTypeError:
.93b1	4c fd 9f	jmp $9ffd			jmp 	TypeError
.93b4					EvaluateInteger:
.93b4	20 91 93	jsr $9391			jsr 	EvaluateNumber
.93b7	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check exponent is zero
.93ba	d0 0a		bne $93c6			bne 	HelperValueError 			; if not, it's a float.
.93bc	60		rts				rts
.93bd					EvaluateUnsignedInteger:
.93bd	20 b4 93	jsr $93b4			jsr 	EvaluateInteger 			; check integer is +ve
.93c0	bd 00 06	lda $0600,x			lda 	NSStatus,x
.93c3	30 01		bmi $93c6			bmi 	HelperValueError
.93c5	60		rts				rts
.93c6					HelperValueError:
.93c6	4c 02 a0	jmp $a002			jmp 	ArgumentError
.93c9					Evaluate16BitInteger:
.93c9	20 bd 93	jsr $93bd			jsr	 	EvaluateUnsignedInteger		; get integer
.93cc	bd 20 06	lda $0620,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.93cf	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.93d2	d0 f2		bne $93c6			bne 	HelperValueError
.93d4	60		rts				rts
.93d5					Evaluate8BitInteger:
.93d5	20 bd 93	jsr $93bd			jsr	 	EvaluateUnsignedInteger 	; get an integer
.93d8	d0 ec		bne $93c6			bne 	HelperValueError
.93da	bd 20 06	lda $0620,x			lda 	NSMantissa3,x	 			; bytes 1, 2 & 3 must be zero
.93dd	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.93e0	1d 10 06	ora $0610,x			ora 	NSMantissa1,x
.93e3	d0 e1		bne $93c6			bne 	HelperValueError
.93e5	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.93e8	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/mult8x8.asm

.9fa5					Multiply8x8:
.9fa5	4a		lsr a		  		lsr 	a  							; prime the carry bit for the loop
.9fa6	85 36		sta $36			  	sta 	zTemp0
.9fa8	86 37		stx $37				stx 	zTemp0+1
.9faa	a9 00		lda #$00			lda 	#0
.9fac	a2 08		ldx #$08			ldx 	#8
.9fae					_M88Loop:
.9fae	90 03		bcc $9fb3			bcc 	_M88NoAdd
.9fb0	18		clc				clc
.9fb1	65 37		adc $37				adc 	zTemp0+1
.9fb3					_M88NoAdd:
.9fb3	6a		ror a				ror 	a
.9fb4	66 36		ror $36				ror 	zTemp0  					; pull another bit out for the next iteration
.9fb6	ca		dex				dex         						; inc/dec don't modify carry; only shifts and adds do
.9fb7	d0 f5		bne $9fae			bne 	_M88Loop
.9fb9	85 37		sta $37				sta 	zTemp0+1 					; store high 8 bits.
.9fbb	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/utility.asm

.93e9					NSMNegate:
.93e9	bd 00 06	lda $0600,x			lda 	NSStatus,x
.93ec	49 80		eor #$80			eor 	#NSBIsNegative
.93ee	9d 00 06	sta $0600,x			sta 	NSStatus,x
.93f1	60		rts				rts
.93f2					NSMNegateMantissa:
.93f2	38		sec				sec
.93f3	a9 00		lda #$00			lda 	#0
.93f5	fd 08 06	sbc $0608,x			sbc 	NSMantissa0,x
.93f8	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.93fb	a9 00		lda #$00			lda 	#0
.93fd	fd 10 06	sbc $0610,x			sbc 	NSMantissa1,x
.9400	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9403	a9 00		lda #$00			lda 	#0
.9405	fd 18 06	sbc $0618,x			sbc 	NSMantissa2,x
.9408	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.940b	a9 00		lda #$00			lda 	#0
.940d	fd 20 06	sbc $0620,x			sbc 	NSMantissa3,x
.9410	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.9413	60		rts				rts
.9414					NSMShiftUpTwo:
.9414	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.9417	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.941a	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.941d	9d 12 06	sta $0612,x			sta 	NSMantissa1+2,x
.9420	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.9423	9d 1a 06	sta $061a,x			sta 	NSMantissa2+2,x
.9426	bd 20 06	lda $0620,x			lda 	NSMantissa3,x
.9429	9d 22 06	sta $0622,x			sta 	NSMantissa3+2,x
.942c	bd 28 06	lda $0628,x			lda 	NSExponent,x
.942f	9d 2a 06	sta $062a,x			sta 	NSExponent+2,x
.9432	bd 00 06	lda $0600,x			lda 	NSStatus,x
.9435	9d 02 06	sta $0602,x			sta 	NSStatus+2,x
.9438	60		rts				rts
.9439					NSMSetZeroMantissaOnly:
.9439	a9 00		lda #$00			lda 	#0
.943b	80 08		bra $9445			bra 	NSMSetMantissa
.943d					NSMSetZero:
.943d	a9 00		lda #$00			lda 	#0
.943f					NSMSetByte:
.943f	9e 28 06	stz $0628,x			stz 	NSExponent,x 				; zero exponent, as integer.
.9442	9e 00 06	stz $0600,x			stz 	NSStatus,x 					; status zero (integer)
.9445					NSMSetMantissa:
.9445	9d 08 06	sta $0608,x			sta 	NSMantissa0,x 				; mantissa
.9448	9e 10 06	stz $0610,x			stz 	NSMantissa1,x
.944b	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.944e	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.9451	60		rts				rts
.9452					NSMShiftLeft:
.9452	18		clc				clc
.9453					NSMRotateLeft:
.9453	3e 08 06	rol $0608,x			rol 	NSMantissa0,x
.9456	3e 10 06	rol $0610,x			rol		NSMantissa1,x
.9459	3e 18 06	rol $0618,x			rol		NSMantissa2,x
.945c	3e 20 06	rol $0620,x			rol		NSMantissa3,x
.945f	60		rts				rts
.9460					NSMShiftRight:
.9460	5e 20 06	lsr $0620,x			lsr 	NSMantissa3,x
.9463	7e 18 06	ror $0618,x			ror		NSMantissa2,x
.9466	7e 10 06	ror $0610,x			ror		NSMantissa1,x
.9469	7e 08 06	ror $0608,x			ror		NSMantissa0,x
.946c	60		rts				rts
.946d					NSMIsZero:
.946d	bd 20 06	lda $0620,x			lda 	NSMantissa3,x
.9470	1d 18 06	ora $0618,x			ora		NSMantissa2,x
.9473	1d 10 06	ora $0610,x			ora		NSMantissa1,x
.9476	1d 08 06	ora $0608,x			ora		NSMantissa0,x
.9479	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/constants.asm

.9fbc					DecimalScalarTable:
>9fbc	66 66 66 66				.dword $66666666 ; 0.1
>9fc0	de					.byte $de
>9fc1	1f 85 eb 51				.dword $51eb851f ; 0.01
>9fc5	db					.byte $db
>9fc6	4c 37 89 41				.dword $4189374c ; 0.001
>9fca	d8					.byte $d8
>9fcb	ac 8b db 68				.dword $68db8bac ; 0.0001
>9fcf	d4					.byte $d4
>9fd0	24 d6 e2 53				.dword $53e2d624 ; 1e-05
>9fd4	d1					.byte $d1
>9fd5	83 de 1b 43				.dword $431bde83 ; 1e-06
>9fd9	ce					.byte $ce
>9fda	6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>9fde	ca					.byte $ca
>9fdf	89 3b e6 55				.dword $55e63b89 ; 1e-08
>9fe3	c7					.byte $c7
>9fe4	a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>9fe8	c4					.byte $c4
>9fe9	67 7f f3 6d				.dword $6df37f67 ; 1e-10
>9fed	c0					.byte $c0
>9fee	86 ff f5 57				.dword $57f5ff86 ; 1e-11
>9ff2	bd					.byte $bd

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.asm

.9ff3					SyntaxError:
.9ff3	a9 02		lda #$02		lda	#2
.9ff5	4c ea 88	jmp $88ea		jmp	ErrorHandler
.9ff8					RangeError:
.9ff8	a9 04		lda #$04		lda	#4
.9ffa	4c ea 88	jmp $88ea		jmp	ErrorHandler
.9ffd					TypeError:
.9ffd	a9 05		lda #$05		lda	#5
.9fff	4c ea 88	jmp $88ea		jmp	ErrorHandler
.a002					ArgumentError:
.a002	a9 07		lda #$07		lda	#7
.a004	4c ea 88	jmp $88ea		jmp	ErrorHandler
.a007					NotDoneError:
.a007	a9 0c		lda #$0c		lda	#12
.a009	4c ea 88	jmp $88ea		jmp	ErrorHandler
.a00c					ErrorText:
>a00c	42 72 65 61 6b 00			.text	"Break",0
>a012	53 79 6e 74 61 78 20 65			.text	"Syntax error",0
>a01a	72 72 6f 72 00
>a01f	44 69 76 69 73 69 6f 6e			.text	"Division by zero",0
>a027	20 62 79 20 7a 65 72 6f 00
>a030	4f 75 74 20 6f 66 20 52			.text	"Out of Range",0
>a038	61 6e 67 65 00
>a03d	54 79 70 65 20 6d 69 73			.text	"Type mismatch",0
>a045	6d 61 74 63 68 00
>a04b	4f 75 74 20 6f 66 20 6d			.text	"Out of memory",0
>a053	65 6d 6f 72 79 00
>a059	49 6c 6c 65 67 61 6c 20			.text	"Illegal argument",0
>a061	61 72 67 75 6d 65 6e 74 00
>a06a	53 74 6f 70 00				.text	"Stop",0
>a06f	53 74 72 69 6e 67 20 74			.text	"String too long",0
>a077	6f 6f 20 6c 6f 6e 67 00
>a07f	41 73 73 65 72 74 69 6f			.text	"Assertion failed",0
>a087	6e 20 66 61 69 6c 65 64 00
>a090	4f 75 74 20 6f 66 20 64			.text	"Out of data",0
>a098	61 74 61 00
>a09c	55 6e 69 6d 70 6c 65 6d			.text	"Unimplemented",0
>a0a4	65 6e 74 65 64 00
>a0aa	4e 6f 20 73 75 63 68 20			.text	"No such line number",0
>a0b2	6c 69 6e 65 20 6e 75 6d 62 65 72 00
>a0be	52 65 74 75 72 6e 20 77			.text	"Return without Gosub",0
>a0c6	69 74 68 6f 75 74 20 47 6f 73 75 62 00
>a0d3	55 6e 74 69 6c 20 77 69			.text	"Until without Repeat",0
>a0db	74 68 6f 75 74 20 52 65 70 65 61 74 00
>a0e8	57 65 6e 64 20 77 69 74			.text	"Wend without While",0
>a0f0	68 6f 75 74 20 57 68 69 6c 65 00
>a0fb	4e 65 78 74 20 77 69 74			.text	"Next without For",0
>a103	68 6f 75 74 20 46 6f 72 00
>a10c	42 41 53 49 43 20 53 74			.text	"BASIC Stack full",0
>a114	61 63 6b 20 66 75 6c 6c 00
>a11d	4f 70 65 6e 20 53 74 72			.text	"Open Structure",0
>a125	75 63 74 75 72 65 00
>a12c	45 6e 64 50 72 6f 63 20			.text	"EndProc without call",0
>a134	77 69 74 68 6f 75 74 20 63 61 6c 6c 00
>a141	41 72 72 61 79 20 61 6c			.text	"Array already defined",0
>a149	72 65 61 64 79 20 64 65 66 69 6e 65 64 00
>a157	41 72 72 61 79 20 73 69			.text	"Array size",0
>a15f	7a 65 00
>a162	42 61 64 20 61 72 72 61			.text	"Bad array index",0
>a16a	79 20 69 6e 64 65 78 00

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/frames.asm

.947a					StackOpen:
.947a	48		pha				pha 								; save frame byte
.947b	29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.947d	0a		asl a				asl 	a 							; claim twice this for storage
.947e	49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.9480	38		sec				sec 								; so basically subtracting from
.9481	65 34		adc $34				adc 	basicStack 	 				; basicStack
.9483	85 34		sta $34				sta 	basicStack
.9485	b0 08		bcs $948f			bcs 	_SONoBorrow
.9487	c6 35		dec $35				dec 	basicStack+1
.9489	a5 35		lda $35				lda 	basicStack+1 				; have we reached stack overflow
.948b	c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.948d	90 04		bcc $9493			bcc 	_SOMemory
.948f					_SONoBorrow:
.948f	68		pla				pla 								; get marker back and write at TOS
.9490	92 34		sta ($34)			sta 	(basicStack)
.9492	60		rts				rts
.9493					_SOMemory:
.9493							ERR_STACK
.9493					StackClose:
.9493	b2 34		lda ($34)			lda 	(basicStack) 				; get TOS marker
.9495	29 0f		and #$0f			and 	#$0F 						; bytes to add back
.9497	0a		asl a				asl 	a 							; claim twice this.
.9498	65 34		adc $34				adc 	basicStack 					; add to the stack pointer.
.949a	85 34		sta $34				sta 	basicStack
.949c	90 02		bcc $94a0			bcc 	_SCExit
.949e	e6 35		inc $35				inc 	basicStack+1
.94a0					_SCExit:
.94a0	60		rts				rts
.94a1					StackCheckFrame:
.94a1	52 34		eor ($34)			eor 	(basicStack) 				; xor with toS marker
.94a3	29 f0		and #$f0			and 	#$F0 						; check type bits
.94a5	d0 01		bne $94a8			bne 	_SCFError 					; different, we have structures mixed up
.94a7	60		rts				rts
.94a8					_SCFError:
.94a8	8a		txa				txa 								; report error X
.94a9	4c ea 88	jmp $88ea			jmp 	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/location.asm

.94ac					STKSaveCodePosition:
.94ac	5a		phy				phy
.94ad	98		tya				tya 								; save Y
.94ae	a0 05		ldy #$05			ldy 	#5
.94b0	91 34		sta ($34),y			sta 	(basicStack),y
.94b2	88		dey				dey 								; save Code Pointer
.94b3					_STKSaveLoop:
.94b3	b9 2f 00	lda $002f,y			lda 	safePtr-1,y 				; allows us to access the pointer w/out issues.
.94b6	91 34		sta ($34),y			sta 	(basicStack),y
.94b8	88		dey				dey
.94b9	d0 f8		bne $94b3			bne 	_STKSaveLoop
.94bb	7a		ply				ply
.94bc	60		rts				rts
.94bd					STKLoadCodePosition:
.94bd	a0 01		ldy #$01			ldy 	#1 							; load code pointer back
.94bf					_STKLoadLoop:
.94bf	b1 34		lda ($34),y			lda 	(basicStack),y
.94c1	99 2f 00	sta $002f,y			sta 	safePtr-1,y
.94c4	c8		iny				iny
.94c5	c0 05		cpy #$05			cpy 	#5
.94c7	d0 f6		bne $94bf			bne 	_STKLoadLoop
.94c9	b1 34		lda ($34),y			lda 	(basicStack),y 				; get Y offset
.94cb	a8		tay				tay
.94cc	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/setup.asm

.94cd					StackReset:
.94cd	a9 ff		lda #$ff			lda 	#((BasicStackBase+BasicStackSize-1) & $FF)
.94cf	85 34		sta $34				sta 	0+basicStack
.94d1	a9 0f		lda #$0f			lda 	#((BasicStackBase+BasicStackSize-1) >> 8)
.94d3	85 35		sta $35				sta 	1+basicStack
.94d5	a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.94d7	92 34		sta ($34)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.94d9	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/concrete.asm

.a172					StringConcrete:
.a172	5a		phy				phy 								; save position on stack
.a173	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy target string to zTemp1
.a176	85 38		sta $38				sta 	zTemp1
.a178	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.a17b	85 39		sta $39				sta 	zTemp1+1
.a17d	a0 ff		ldy #$ff			ldy 	#$FF	 					; calculate string length
.a17f					_SALength:
.a17f	c8		iny				iny
.a180	b1 38		lda ($38),y			lda 	(zTemp1),y
.a182	d0 fb		bne $a17f			bne 	_SALength
.a184	c0 fd		cpy #$fd			cpy 	#253 						; string too long
.a186	b0 3f		bcs $a1c7			bcs 	_SALengthError
.a188	98		tya				tya 				 				; length of the new string
.a189	18		clc				clc
.a18a	69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.a18c	90 02		bcc $a190			bcc 	_SAHaveLength
.a18e	a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.a190					_SAHaveLength:
.a190	48		pha				pha 								; save length.
.a191	38		sec				sec
.a192	49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.a194	6d 0e 07	adc $070e			adc 	StringMemory
.a197	8d 0e 07	sta $070e			sta 	StringMemory
.a19a	85 3a		sta $3a				sta 	zTemp2 						; update storage address
.a19c	9d 08 06	sta $0608,x			sta 	NSMantissa0,x 				; update mantissa address
.a19f	a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.a1a1	6d 0f 07	adc $070f			adc 	StringMemory+1
.a1a4	8d 0f 07	sta $070f			sta 	StringMemory+1
.a1a7	85 3b		sta $3b				sta 	zTemp2+1
.a1a9	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.a1ac	68		pla				pla 								; save length-3 (chars allowed) in first byte
.a1ad	38		sec				sec
.a1ae	e9 03		sbc #$03			sbc 	#3
.a1b0	92 3a		sta ($3a)			sta 	(zTemp2)
.a1b2	a9 00		lda #$00			lda 	#0 							; clear the status byte.
.a1b4	a0 01		ldy #$01			ldy 	#1
.a1b6	91 3a		sta ($3a),y			sta 	(zTemp2),y
.a1b8					_SACopyNewString:
.a1b8	a0 00		ldy #$00			ldy 	#0
.a1ba					_SACopyNSLoop:
.a1ba	b1 38		lda ($38),y			lda 	(zTemp1),y 					; get character
.a1bc	c8		iny				iny 								; write two on in string storage
.a1bd	c8		iny				iny
.a1be	91 3a		sta ($3a),y			sta 	(zTemp2),y
.a1c0	88		dey				dey 								; this makes it one one.
.a1c1	c9 00		cmp #$00			cmp 	#0 							; until EOS copied
.a1c3	d0 f5		bne $a1ba			bne 	_SACopyNSLoop
.a1c5	7a		ply				ply
.a1c6	60		rts				rts
.a1c7					_SALengthError:
.a1c7	a9 09		lda #$09		lda	#9
.a1c9	4c ea 88	jmp $88ea		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/stringalloc.asm

.a1cc					StringSystemInitialise:
.a1cc	a9 ff		lda #$ff			lda 	#((EndVariableSpace-1) & $FF)
.a1ce	8d 0e 07	sta $070e			sta 	0+StringMemory
.a1d1	a9 1f		lda #$1f			lda 	#((EndVariableSpace-1) >> 8)
.a1d3	8d 0f 07	sta $070f			sta 	1+StringMemory
.a1d6	9c ff 1f	stz $1fff			stz 	EndVariableSpace-1 			; put a zero at the end, so know end of string memory.
.a1d9	60		rts				rts
.a1da					StringSpaceInitialise:
.a1da	a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.a1dc	8d 10 07	sta $0710			sta 	StringInitialised
.a1df	ad 0e 07	lda $070e			lda 	StringMemory 				; allocate 256 bytes for one concreted string
.a1e2	8d 11 07	sta $0711			sta 	StringTempPointer
.a1e5	ad 0f 07	lda $070f			lda 	StringMemory+1
.a1e8	3a		dec a				dec 	a
.a1e9	8d 12 07	sta $0712			sta 	StringTempPointer+1
.a1ec	60		rts				rts
.a1ed					StringTempAllocate:
.a1ed	c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.a1ef	b0 35		bcs $a226			bcs 	_STALength
.a1f1	2c 10 07	bit $0710			bit 	StringInitialised 			; already initialised
.a1f4	30 05		bmi $a1fb			bmi 	_STAAllocate
.a1f6	48		pha				pha 								; save value to subtract.
.a1f7	20 da a1	jsr $a1da			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.a1fa	68		pla				pla 								; restore it
.a1fb					_STAAllocate:
.a1fb	49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.a1fd	18		clc				clc  								; deliberate allows one more
.a1fe	6d 11 07	adc $0711			adc 	StringTempPointer 			; subtract from temp pointer
.a201	8d 11 07	sta $0711			sta 	StringTempPointer
.a204	9d 08 06	sta $0608,x			sta 	NSMantissa0,x 				; address in mantissa
.a207	85 3c		sta $3c				sta 	zsTemp 						; and zsTemp
.a209	ad 12 07	lda $0712			lda 	StringTempPointer+1
.a20c	69 ff		adc #$ff			adc 	#$FF
.a20e	8d 12 07	sta $0712			sta 	StringTempPointer+1
.a211	85 3d		sta $3d				sta 	zsTemp+1
.a213	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.a216	9e 18 06	stz $0618,x			stz 	NSMantissa2,x 				; set the typing data
.a219	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.a21c	a9 10		lda #$10			lda 	#NSTString
.a21e	9d 00 06	sta $0600,x			sta 	NSStatus,x
.a221	a9 00		lda #$00			lda 	#0 							; clear the target string
.a223	92 3c		sta ($3c)			sta 	(zsTemp)
.a225	60		rts				rts
.a226					_STALength:
.a226	a9 09		lda #$09		lda	#9
.a228	4c ea 88	jmp $88ea		jmp	ErrorHandler
.a22b					StringTempWrite:
.a22b	48		pha				pha
.a22c	92 3c		sta ($3c)			sta 	(zsTemp)
.a22e	e6 3c		inc $3c				inc 	zsTemp
.a230	d0 02		bne $a234			bne 	_STWNoCarry
.a232	e6 3d		inc $3d				inc 	zsTemp+1
.a234					_STWNoCarry:
.a234	a9 00		lda #$00			lda 	#0
.a236	92 3c		sta ($3c)			sta 	(zsTemp)
.a238	68		pla				pla
.a239	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/backload.asm

.94da					BackloadProgram:
.94da	a2 ff		ldx #$ff			ldx 	#$FF
.94dc	8e fa ff	stx $fffa			stx 	$FFFA 						; fast mode
.94df	20 09 95	jsr $9509			jsr 	BLReadByte
.94e2	30 1e		bmi $9502			bmi 	_BPExit
.94e4					_BPCopy:
.94e4	e8		inx				inx  								; copy byte in
.94e5	9d 1c 08	sta $081c,x			sta 	lineBuffer,x
.94e8	9e 1d 08	stz $081d,x			stz 	lineBuffer+1,x
.94eb	20 09 95	jsr $9509			jsr 	BLReadByte 					; read next byte
.94ee	30 0a		bmi $94fa			bmi 	_BPEndLine 					; -ve = EOL
.94f0	c9 09		cmp #$09			cmp 	#9 							; handle TAB
.94f2	d0 02		bne $94f6			bne 	_BPNotTab
.94f4	a9 20		lda #$20			lda 	#' '
.94f6					_BPNotTab:
.94f6	c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.94f8	b0 ea		bcs $94e4			bcs 	_BPCopy
.94fa					_BPEndLine:
.94fa	20 13 98	jsr $9813			jsr 	TokeniseLine 				; tokenise the line.
.94fd	20 9f 9a	jsr $9a9f			jsr 	MemoryAppend 				; append to current program
.9500	80 d8		bra $94da			bra 	BackloadProgram
.9502					_BPExit:
.9502	9c fa ff	stz $fffa			stz 	$FFFA 						; clear fast mode
.9505	20 ac 81	jsr $81ac			jsr 	ClearCommand 				; clear variables etc.
.9508	60		rts				rts
.9509					BLReadByte:
.9509					_BLLoad:
.9509	ad 00 30	lda $3000			lda 	$3000 						; hardcoded in the makefile.
.950c	ee 0a 95	inc $950a			inc 	_BLLoad+1
.950f	d0 03		bne $9514			bne 	_BLNoCarry
.9511	ee 0b 95	inc $950b			inc 	_BLLoad+2
.9514					_BLNoCarry:
.9514	c9 00		cmp #$00			cmp 	#0
.9516	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/searchtokens.asm

.9517					TokeniseSearchTable:
.9517	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token.
.9519	85 36		sta $36				sta 	zTemp0
.951b	a0 00		ldy #$00			ldy 	#0
.951d	a9 80		lda #$80			lda 	#$80 						; token #
.951f	85 38		sta $38				sta 	zTemp1
.9521					_TSTLoop:
.9521	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.9523	30 49		bmi $956e			bmi 	_TSTFail 					; -ve = end of table
.9525	f0 2e		beq $9555			beq 	_TSTNext 					; zero, check next it's a dummy
.9527	c8		iny				iny 								; get the hash
.9528	b1 36		lda ($36),y			lda 	(zTemp0),y
.952a	88		dey				dey
.952b	cd 03 07	cmp $0703			cmp 	identHash 					; check they match, if not go to next
.952e	d0 25		bne $9555			bne 	_TSTNext
.9530	ad 02 07	lda $0702			lda 	identTypeEnd 				; length of identifier
.9533	38		sec				sec
.9534	ed 00 07	sbc $0700			sbc 	identStart
.9537	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; no match, then return.
.9539	d0 1a		bne $9555			bne 	_TSTNext
.953b	5a		phy				phy 								; save Y , we might fail
.953c	c8		iny				iny 								; point to text
.953d	c8		iny				iny
.953e	ae 00 07	ldx $0700			ldx 	identStart 					; offset in line buffer in X
.9541					_TSTCompareName:
.9541	bd 1c 08	lda $081c,x			lda 	lineBuffer,x 				; compare text.
.9544	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.9546	d0 0c		bne $9554			bne 	_TSTNextPullY 				; fail, pullY and do next
.9548	e8		inx				inx
.9549	c8		iny				iny
.954a	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; complete match.
.954d	d0 f2		bne $9541			bne 	_TSTCompareName
.954f	7a		ply				ply 								; throw Y
.9550	a5 38		lda $38				lda 	zTemp1 						; get token #
.9552	38		sec				sec 								; return with CS = passed.
.9553	60		rts				rts
.9554					_TSTNextPullY:
.9554	7a		ply				ply 								; restore current, fall through.
.9555					_TSTNext:
.9555	e6 38		inc $38				inc 	zTemp1 						; token counter
.9557	98		tya				tya
.9558	18		clc				clc
.9559	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.955b	1a		inc a				inc 	a 							; +1
.955c	1a		inc a				inc 	a 							; +2
.955d	a8		tay				tay
.955e	10 c1		bpl $9521			bpl 	_TSTLoop 					; if Y < $80 loop back
.9560	98		tya				tya 								; add Y to zTemp0 and reset Y
.9561	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.9563	18		clc				clc  								; but have tables > 255 bytes
.9564	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.9566	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.9568	90 b7		bcc $9521			bcc 	_TSTLoop
.956a	e6 37		inc $37				inc 	zTemp0+1
.956c	80 b3		bra $9521			bra 	_TSTLoop
.956e					_TSTFail:
.956e	18		clc				clc
.956f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/tokenise.asm


;******  Processing file: ./common/tokeniser/../generated/kwdtext.dat

.9570					KeywordSet0:
>9570	00 65					.text	0,$65,""               ; $80 !0:EOF
>9572	00 58					.text	0,$58,""               ; $81 !1:SH1
>9574	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>9576	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $83 ABS(
>957c	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $84 ALLOC(
>9584	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $85 ASC(
>958a	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $86 CHR$(
>9591	05 6b 46 41 4c 53 45			.text	5,$6b,"FALSE"          ; $87 FALSE
>9598	05 44 46 52 41 43 28			.text	5,$44,"FRAC("          ; $88 FRAC(
>959f	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $89 INT(
>95a5	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $8a ISVAL(
>95ad	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $8b LEFT$(
>95b5	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $8c LEN(
>95bb	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $8d MID$(
>95c2	04 19 4e 4f 54 28			.text	4,$19,"NOT("           ; $8e NOT(
>95c8	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $8f RIGHT$(
>95d0	28
>95d1	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $90 RND(
>95d7	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $91 SGN(
>95dd	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $92 SPC(
>95e3	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $93 STR$(
>95ea	04 40 54 52 55 45			.text	4,$40,"TRUE"           ; $94 TRUE
>95f0	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $95 VAL(
>95f6	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $96 FOR
>95fb	02 8f 49 46				.text	2,$8f,"IF"             ; $97 IF
>95ff	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $98 PROC
>9605	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $99 REPEAT
>960d	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $9a WHILE
>9614	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $9b ENDIF
>961b	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $9c ENDPROC
>9623	43
>9624	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $9d NEXT
>962a	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $9e THEN
>9630	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $9f UNTIL
>9637	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $a0 WEND
>963d	04 1c 43 41 4c 4c			.text	4,$1c,"CALL"           ; $a1 CALL
>9643	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $a2 CLS
>9648	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $a3 DATA
>964e	03 da 44 49 4d				.text	3,$da,"DIM"            ; $a4 DIM
>9653	06 db 44 4f 57 4e 54 4f			.text	6,$db,"DOWNTO"         ; $a5 DOWNTO
>965b	04 29 45 4c 53 45			.text	4,$29,"ELSE"           ; $a6 ELSE
>9661	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $a7 GOSUB
>9668	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $a8 GOTO
>966e	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $a9 LET
>9673	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $aa PRINT
>967a	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $ab READ
>9680	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $ac REM
>9685	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $ad RETURN
>968d	02 a3 54 4f				.text	2,$a3,"TO"             ; $ae TO
>9691	ff					.text	$FF
.9692					KeywordSet1:
>9692	00 65					.text	0,$65,""               ; $80 !0:EOF
>9694	00 58					.text	0,$58,""               ; $81 !1:SH1
>9696	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>9698	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $83 ASSERT
>96a0	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $84 CLEAR
>96a7	03 d7 45 4e 44				.text	3,$d7,"END"            ; $85 END
>96ac	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $86 LIST
>96b2	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $87 NEW
>96b7	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $88 RESTORE
>96bf	45
>96c0	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $89 RUN
>96c5	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $8a STOP
>96cb	ff					.text	$FF
.96cc					KeywordSet2:
>96cc	00 65					.text	0,$65,""               ; $80 !0:EOF
>96ce	00 58					.text	0,$58,""               ; $81 !1:SH1
>96d0	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>96d2	03 c8 41 44 43				.text	3,$c8,"ADC"            ; $83 ADC
>96d7	03 d3 41 4e 44				.text	3,$d3,"AND"            ; $84 AND
>96dc	03 e0 41 53 4c				.text	3,$e0,"ASL"            ; $85 ASL
>96e1	03 c8 42 43 43				.text	3,$c8,"BCC"            ; $86 BCC
>96e6	03 d8 42 43 53				.text	3,$d8,"BCS"            ; $87 BCS
>96eb	03 d8 42 45 51				.text	3,$d8,"BEQ"            ; $88 BEQ
>96f0	03 df 42 49 54				.text	3,$df,"BIT"            ; $89 BIT
>96f5	03 d8 42 4d 49				.text	3,$d8,"BMI"            ; $8a BMI
>96fa	03 d5 42 4e 45				.text	3,$d5,"BNE"            ; $8b BNE
>96ff	03 de 42 50 4c				.text	3,$de,"BPL"            ; $8c BPL
>9704	03 d5 42 52 41				.text	3,$d5,"BRA"            ; $8d BRA
>9709	03 df 42 52 4b				.text	3,$df,"BRK"            ; $8e BRK
>970e	03 db 42 56 43				.text	3,$db,"BVC"            ; $8f BVC
>9713	03 eb 42 56 53				.text	3,$eb,"BVS"            ; $90 BVS
>9718	03 d2 43 4c 43				.text	3,$d2,"CLC"            ; $91 CLC
>971d	03 d3 43 4c 44				.text	3,$d3,"CLD"            ; $92 CLD
>9722	03 d8 43 4c 49				.text	3,$d8,"CLI"            ; $93 CLI
>9727	03 e5 43 4c 56				.text	3,$e5,"CLV"            ; $94 CLV
>972c	03 e0 43 4d 50				.text	3,$e0,"CMP"            ; $95 CMP
>9731	03 eb 43 50 58				.text	3,$eb,"CPX"            ; $96 CPX
>9736	03 ec 43 50 59				.text	3,$ec,"CPY"            ; $97 CPY
>973b	03 cc 44 45 43				.text	3,$cc,"DEC"            ; $98 DEC
>9740	03 e1 44 45 58				.text	3,$e1,"DEX"            ; $99 DEX
>9745	03 e2 44 45 59				.text	3,$e2,"DEY"            ; $9a DEY
>974a	03 e6 45 4f 52				.text	3,$e6,"EOR"            ; $9b EOR
>974f	03 da 49 4e 43				.text	3,$da,"INC"            ; $9c INC
>9754	03 ef 49 4e 58				.text	3,$ef,"INX"            ; $9d INX
>9759	03 f0 49 4e 59				.text	3,$f0,"INY"            ; $9e INY
>975e	03 e7 4a 4d 50				.text	3,$e7,"JMP"            ; $9f JMP
>9763	03 ef 4a 53 52				.text	3,$ef,"JSR"            ; $a0 JSR
>9768	03 d1 4c 44 41				.text	3,$d1,"LDA"            ; $a1 LDA
>976d	03 e8 4c 44 58				.text	3,$e8,"LDX"            ; $a2 LDX
>9772	03 e9 4c 44 59				.text	3,$e9,"LDY"            ; $a3 LDY
>9777	03 f1 4c 53 52				.text	3,$f1,"LSR"            ; $a4 LSR
>977c	03 ed 4e 4f 50				.text	3,$ed,"NOP"            ; $a5 NOP
>9781	03 e2 4f 52 41				.text	3,$e2,"ORA"            ; $a6 ORA
>9786	03 d9 50 48 41				.text	3,$d9,"PHA"            ; $a7 PHA
>978b	03 e8 50 48 50				.text	3,$e8,"PHP"            ; $a8 PHP
>9790	03 f0 50 48 58				.text	3,$f0,"PHX"            ; $a9 PHX
>9795	03 f1 50 48 59				.text	3,$f1,"PHY"            ; $aa PHY
>979a	03 dd 50 4c 41				.text	3,$dd,"PLA"            ; $ab PLA
>979f	03 ec 50 4c 50				.text	3,$ec,"PLP"            ; $ac PLP
>97a4	03 f4 50 4c 58				.text	3,$f4,"PLX"            ; $ad PLX
>97a9	03 f5 50 4c 59				.text	3,$f5,"PLY"            ; $ae PLY
>97ae	03 ed 52 4f 4c				.text	3,$ed,"ROL"            ; $af ROL
>97b3	03 f3 52 4f 52				.text	3,$f3,"ROR"            ; $b0 ROR
>97b8	03 ef 52 54 49				.text	3,$ef,"RTI"            ; $b1 RTI
>97bd	03 f9 52 54 53				.text	3,$f9,"RTS"            ; $b2 RTS
>97c2	03 d8 53 42 43				.text	3,$d8,"SBC"            ; $b3 SBC
>97c7	03 db 53 45 43				.text	3,$db,"SEC"            ; $b4 SEC
>97cc	03 dc 53 45 44				.text	3,$dc,"SED"            ; $b5 SED
>97d1	03 e1 53 45 49				.text	3,$e1,"SEI"            ; $b6 SEI
>97d6	03 e8 53 54 41				.text	3,$e8,"STA"            ; $b7 STA
>97db	03 ff 53 54 58				.text	3,$ff,"STX"            ; $b8 STX
>97e0	03 00 53 54 59				.text	3,$00,"STY"            ; $b9 STY
>97e5	03 01 53 54 5a				.text	3,$01,"STZ"            ; $ba STZ
>97ea	03 ed 54 41 58				.text	3,$ed,"TAX"            ; $bb TAX
>97ef	03 ee 54 41 59				.text	3,$ee,"TAY"            ; $bc TAY
>97f4	03 e8 54 52 42				.text	3,$e8,"TRB"            ; $bd TRB
>97f9	03 e9 54 53 42				.text	3,$e9,"TSB"            ; $be TSB
>97fe	03 ff 54 53 58				.text	3,$ff,"TSX"            ; $bf TSX
>9803	03 ed 54 58 41				.text	3,$ed,"TXA"            ; $c0 TXA
>9808	03 ff 54 58 53				.text	3,$ff,"TXS"            ; $c1 TXS
>980d	03 ee 54 59 41				.text	3,$ee,"TYA"            ; $c2 TYA
>9812	ff					.text	$FF

;******  Return to file: ./common/tokeniser/tokenise.asm

.9813					TokeniseLine:
.9813	20 9b 99	jsr $999b			jsr 	FixLineBufferCase 			; fix line case
.9816	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.9818	8d 1c 07	sta $071c			sta 	tokenOffset
.981b	9c 1d 07	stz $071d			stz 	tokenLineNumber
.981e	9c 1e 07	stz $071e			stz 	tokenLineNumber+1
.9821	a2 ff		ldx #$ff			ldx 	#$FF
.9823					_TKFindFirst:
.9823	e8		inx				inx
.9824	bd 1c 08	lda $081c,x			lda 	lineBuffer,x
.9827	f0 79		beq $98a2			beq 	_TKExit
.9829	c9 20		cmp #$20			cmp 	#' '
.982b	90 f6		bcc $9823			bcc 	_TKFindFirst
.982d	c9 30		cmp #$30			cmp 	#'0'
.982f	90 07		bcc $9838			bcc 	_TKNoLineNumber
.9831	c9 3a		cmp #$3a			cmp 	#'9'+1
.9833	b0 03		bcs $9838			bcs 	_TKNoLineNumber
.9835	20 c5 99	jsr $99c5			jsr 	TokeniseExtractLineNumber
.9838					_TKNoLineNumber:
.9838					_TKTokeniseLoop:
.9838	bd 1c 08	lda $081c,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.983b	f0 65		beq $98a2			beq 	_TKExit
.983d	e8		inx				inx
.983e	c9 20		cmp #$20			cmp 	#' '
.9840	f0 f6		beq $9838			beq 	_TKTokeniseLoop 			; keep looping if space found.
.9842	ca		dex				dex 								; undo last get, A contains character, X is position.
.9843	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.9845	f0 61		beq $98a8			beq 	_TKTokeniseIdentifier
.9847	c9 41		cmp #$41			cmp 	#'A'
.9849	90 04		bcc $984f			bcc 	_TKTokenisePunctuation
.984b	c9 5b		cmp #$5b			cmp 	#'Z'+1
.984d	90 59		bcc $98a8			bcc 	_TKTokeniseIdentifier
.984f					_TKTokenisePunctuation:
.984f	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.9851	f0 27		beq $987a			beq 	_TKString
.9853	c9 23		cmp #$23			cmp 	#'#'						; hexadecimal constant (# only appears at end of identifiers)
.9855	f0 28		beq $987f			beq 	_TKHexConstant
.9857	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers.
.9859	f0 29		beq $9884			beq 	_TKCheckDouble
.985b	c9 3e		cmp #$3e			cmp 	#'>'
.985d	f0 25		beq $9884			beq 	_TKCheckDouble
.985f					_TKStandardPunctuation:
.985f	bd 1c 08	lda $081c,x			lda 	lineBuffer,x 				; get it back.
.9862	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.9864	90 0e		bcc $9874			bcc 	_TKNoShift
.9866	48		pha				pha 								; save
.9867	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.9869	85 36		sta $36				sta 	zTemp0
.986b	68		pla				pla
.986c	29 20		and #$20			and 	#32 						; bit 5
.986e	4a		lsr a				lsr 	a 							; shift into bit 3
.986f	4a		lsr a				lsr 	a
.9870	05 36		ora $36				ora 	zTemp0
.9872	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.9874					_TKNoShift:
.9874	20 0a 9a	jsr $9a0a			jsr 	TokeniseWriteByte 			; write the punctuation character
.9877	e8		inx				inx 								; consume the character
.9878	80 be		bra $9838			bra 	_TKTokeniseLoop 			; and loop round again.
.987a					_TKString:
.987a	20 2a 99	jsr $992a			jsr 	TokeniseString
.987d	80 b9		bra $9838			bra 	_TKTokeniseLoop
.987f					_TKHexConstant:
.987f	20 65 99	jsr $9965			jsr 	TokeniseHexConstant
.9882	80 b4		bra $9838			bra 	_TKTokeniseLoop
.9884					_TKCheckDouble:
.9884	bd 1d 08	lda $081d,x			lda 	lineBuffer+1,x 				; get next character
.9887	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.9889	90 d4		bcc $985f			bcc 	_TKStandardPunctuation
.988b	c9 3f		cmp #$3f			cmp 	#'>'+1
.988d	b0 d0		bcs $985f			bcs 	_TKStandardPunctuation
.988f	bd 1c 08	lda $081c,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.9892	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.9894	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.9895	7d 1d 08	adc $081d,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.9898	38		sec				sec
.9899	e9 3c		sbc #$3c			sbc 	#'<'
.989b	20 0a 9a	jsr $9a0a			jsr 	TokeniseWriteByte 			; this is in the range 0-7
.989e	e8		inx				inx 								; consume both
.989f	e8		inx				inx
.98a0	80 96		bra $9838			bra 	_TKTokeniseLoop
.98a2	a9 80		lda #$80	_TKExit:lda 	#KWC_EOL 					; write end of line byte
.98a4	20 0a 9a	jsr $9a0a			jsr 	TokeniseWriteByte
.98a7	60		rts				rts
.98a8					_TKTokeniseIdentifier:
.98a8	8e 00 07	stx $0700			stx 	identStart 					; save start
.98ab	9c 04 07	stz $0704			stz 	identTypeByte 				; zero the type byte
.98ae					_TKCheckLoop:
.98ae	e8		inx				inx 								; look at next, we know first is identifier.
.98af	bd 1c 08	lda $081c,x			lda  	lineBuffer,x
.98b2	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.98b4	f0 f8		beq $98ae			beq 	_TKCheckLoop
.98b6	c9 30		cmp #$30			cmp	 	#"0"
.98b8	90 0c		bcc $98c6			bcc 	_TKEndIdentifier
.98ba	c9 3a		cmp #$3a			cmp 	#"9"+1
.98bc	90 f0		bcc $98ae			bcc 	_TKCheckLoop
.98be	c9 41		cmp #$41			cmp	 	#"A"
.98c0	90 04		bcc $98c6			bcc 	_TKEndIdentifier
.98c2	c9 5b		cmp #$5b			cmp 	#"Z"+1
.98c4	90 e8		bcc $98ae			bcc 	_TKCheckLoop
.98c6					_TKEndIdentifier:
.98c6	8e 01 07	stx $0701			stx 	identTypeStart 				; save start of type text (if any !)
.98c9	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.98cb	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.98cd	f0 06		beq $98d5			beq 	_TKHasTypeCharacter
.98cf	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.98d1	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.98d3	d0 07		bne $98dc			bne 	_TKNoTypeCharacter
.98d5					_TKHasTypeCharacter:
.98d5	8c 04 07	sty $0704			sty 	identTypeByte 				; has # or $, save the type
.98d8	e8		inx				inx 								; read next
.98d9	bd 1c 08	lda $081c,x			lda 	lineBuffer,x
.98dc					_TKNoTypeCharacter:
.98dc	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.98de	d0 09		bne $98e9			bne 	_TKNoArray
.98e0	e8		inx				inx 								; skip the (
.98e1	ad 04 07	lda $0704			lda 	identTypeByte 				; set bit 2 (e.g. array)
.98e4	09 04		ora #$04			ora 	#$04
.98e6	8d 04 07	sta $0704			sta 	identTypeByte
.98e9					_TKNoArray:
.98e9	8e 02 07	stx $0702			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.98ec	20 86 99	jsr $9986			jsr 	TokeniseCalculateHash 		; calculate the has for those tokens
.98ef	a0 95		ldy #$95			ldy 	#(KeywordSet0) >> 8
.98f1	a9 70		lda #$70			lda 	#(KeywordSet0) & $FF
.98f3	20 17 95	jsr $9517			jsr 	TokeniseSearchTable
.98f6	a2 00		ldx #$00			ldx 	#0
.98f8	b0 1f		bcs $9919			bcs 	_TKFoundToken
.98fa	a0 96		ldy #$96			ldy 	#(KeywordSet1) >> 8
.98fc	a9 92		lda #$92			lda 	#(KeywordSet1) & $FF
.98fe	20 17 95	jsr $9517			jsr 	TokeniseSearchTable
.9901	a2 81		ldx #$81			ldx 	#$81
.9903	b0 14		bcs $9919			bcs 	_TKFoundToken
.9905	a0 96		ldy #$96			ldy 	#(KeywordSet1) >> 8
.9907	a9 92		lda #$92			lda 	#(KeywordSet1) & $FF
.9909	20 17 95	jsr $9517			jsr 	TokeniseSearchTable
.990c	a2 82		ldx #$82			ldx 	#$82
.990e	b0 09		bcs $9919			bcs 	_TKFoundToken
.9910	20 16 9a	jsr $9a16			jsr 	CheckCreateVariableRecord 	; failed all, it's a variable, create record if does not exist.
.9913	ae 02 07	ldx $0702			ldx 	identTypeEnd 				; X points to following byte
.9916	4c 38 98	jmp $9838			jmp 	_TKTokeniseLoop 			; and go round again.
.9919					_TKFoundToken:
.9919	48		pha				pha 								; save token
.991a	8a		txa				txa 								; shift in X, is there one ?
.991b	f0 03		beq $9920			beq 	_TKNoTShift
.991d	20 0a 9a	jsr $9a0a			jsr 	TokeniseWriteByte 			; if so, write it out
.9920					_TKNoTShift:
.9920	68		pla				pla 								; restore and write token
.9921	20 0a 9a	jsr $9a0a			jsr 	TokeniseWriteByte
.9924	ae 02 07	ldx $0702			ldx 	identTypeEnd 				; X points to following byte
.9927	4c 38 98	jmp $9838			jmp 	_TKTokeniseLoop 			; and go round again.
.992a					TokeniseString:
.992a	a9 ff		lda #$ff			lda 	#KWC_STRING 				; string token.
.992c	20 0a 9a	jsr $9a0a			jsr 	TokeniseWriteByte
.992f	e8		inx				inx									; start of quoted string.
.9930	da		phx				phx 								; push start of string on top
.9931	ca		dex				dex
.9932					_TSFindEnd:
.9932	e8		inx				inx
.9933	bd 1c 08	lda $081c,x			lda 	lineBuffer,x 				; next character
.9936	f0 04		beq $993c			beq 	_TSEndOfString
.9938	c9 22		cmp #$22			cmp 	#'"'
.993a	d0 f6		bne $9932			bne 	_TSFindEnd
.993c					_TSEndOfString:
.993c	7a		ply				ply  								; so now Y is first character, X is character after end.
.993d	48		pha				pha 								; save terminating character
.993e	20 46 99	jsr $9946			jsr 	TOWriteBlockXY 				; write X to Y as a data block
.9941	68		pla				pla 								; terminating character
.9942	f0 01		beq $9945			beq 	_TSNotQuote					; if it wasn't EOS skip it
.9944	e8		inx				inx
.9945					_TSNotQuote:
.9945	60		rts				rts
.9946					TOWriteBlockXY:
.9946	86 36		stx $36				stx 	zTemp0 						; write end character
.9948	98		tya				tya
.9949	49 ff		eor #$ff			eor 	#$FF
.994b	38		sec				sec
.994c	65 36		adc $36				adc 	zTemp0
.994e	1a		inc a				inc 	a 							; one extra for NULL
.994f	20 0a 9a	jsr $9a0a			jsr 	TokeniseWriteByte
.9952					_TOBlockLoop:
.9952	c4 36		cpy $36				cpy 	zTemp0
.9954	f0 09		beq $995f			beq 	_TOBlockExit
.9956	b9 1c 08	lda $081c,y			lda 	lineBuffer,y
.9959	20 0a 9a	jsr $9a0a			jsr 	TokeniseWriteByte
.995c	c8		iny				iny
.995d	80 f3		bra $9952			bra 	_TOBlockLoop
.995f					_TOBlockExit:
.995f	a9 00		lda #$00			lda 	#0
.9961	20 0a 9a	jsr $9a0a			jsr 	TokeniseWriteByte
.9964	60		rts				rts
.9965					TokeniseHexConstant:
.9965	a9 fe		lda #$fe			lda 	#KWC_HEXCONST 				; hex constant token.
.9967	20 0a 9a	jsr $9a0a			jsr 	TokeniseWriteByte
.996a	e8		inx				inx									; start of quoted string.
.996b	da		phx				phx 								; push start of constant on top
.996c	ca		dex				dex
.996d					_THFindLoop:
.996d	e8		inx				inx
.996e	bd 1c 08	lda $081c,x			lda 	lineBuffer,x
.9971	c9 30		cmp #$30			cmp 	#"0"
.9973	90 0c		bcc $9981			bcc 	_THFoundEnd
.9975	c9 3a		cmp #$3a			cmp 	#"9"+1
.9977	90 f4		bcc $996d			bcc 	_THFindLoop
.9979	c9 41		cmp #$41			cmp 	#"A"
.997b	90 04		bcc $9981			bcc 	_THFoundEnd
.997d	c9 47		cmp #$47			cmp 	#"F"+1
.997f	90 ec		bcc $996d			bcc 	_THFindLoop
.9981					_THFoundEnd:
.9981	7a		ply				ply 								; restore start
.9982	20 46 99	jsr $9946			jsr 	TOWriteBlockXY 				; output the block
.9985	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/utility.asm

.9986					TokeniseCalculateHash:
.9986	da		phx				phx
.9987	ae 00 07	ldx $0700			ldx 	identStart 					; needs to be same as in tokens.py - simple sum
.998a	a9 00		lda #$00			lda 	#0
.998c					_TCHLoop:
.998c	18		clc				clc
.998d	7d 1c 08	adc $081c,x			adc 	lineBuffer,x
.9990	e8		inx				inx
.9991	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.9994	d0 f6		bne $998c			bne 	_TCHLoop
.9996	8d 03 07	sta $0703			sta 	identHash 					; save the hash
.9999	fa		plx				plx
.999a	60		rts				rts
.999b					FixLineBufferCase:
.999b	a2 00		ldx #$00			ldx 	#0
.999d					_FLBCLoop:
.999d	bd 1c 08	lda $081c,x			lda 	lineBuffer,x 				; get next character
.99a0	f0 22		beq $99c4			beq 	_FLBCExit 					; end of string.
.99a2	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.99a4	f0 11		beq $99b7			beq 	_FLBCInQuotes
.99a6	e8		inx				inx
.99a7	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.99a9	90 f2		bcc $999d			bcc 	_FLBCLoop
.99ab	c9 7b		cmp #$7b			cmp 	#'z'+1
.99ad	b0 ee		bcs $999d			bcs 	_FLBCLoop
.99af	38		sec				sec 								; make U/C
.99b0	e9 20		sbc #$20			sbc 	#32
.99b2	9d 1b 08	sta $081b,x			sta	 	lineBuffer-1,x 				; write back
.99b5	80 e6		bra $999d			bra 	_FLBCLoop
.99b7					_FLBCInQuotes:
.99b7	e8		inx				inx 								; advance
.99b8	bd 1c 08	lda $081c,x			lda 	lineBuffer,x 				; get next
.99bb	f0 07		beq $99c4			beq 	_FLBCExit 					; exit on EOS
.99bd	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.99bf	d0 f6		bne $99b7			bne 	_FLBCInQuotes
.99c1	e8		inx				inx 								; skip over it
.99c2	80 d9		bra $999d			bra 	_FLBCLoop
.99c4					_FLBCExit:
.99c4	60		rts				rts
.99c5					TokeniseExtractLineNumber:
.99c5	ad 1e 07	lda $071e			lda 	tokenLineNumber+1 			; push current value on stack
.99c8	48		pha				pha
.99c9	ad 1d 07	lda $071d			lda 	tokenLineNumber
.99cc	48		pha				pha
.99cd	20 03 9a	jsr $9a03			jsr 	_TELNTimes2 				; line # x 4
.99d0	20 03 9a	jsr $9a03			jsr 	_TELNTimes2 				; line # x 2
.99d3	18		clc				clc 								; add stacked value
.99d4	68		pla				pla
.99d5	6d 1d 07	adc $071d			adc 	tokenLineNumber
.99d8	8d 1d 07	sta $071d			sta 	tokenLineNumber
.99db	68		pla				pla
.99dc	6d 1e 07	adc $071e			adc 	tokenLineNumber+1
.99df	8d 1e 07	sta $071e			sta 	tokenLineNumber+1 			; line # x 5
.99e2	20 03 9a	jsr $9a03			jsr 	_TELNTimes2 				; line # x 10
.99e5	bd 1c 08	lda $081c,x			lda 	lineBuffer,x 				; get and consume character
.99e8	e8		inx				inx
.99e9	29 0f		and #$0f			and 	#15 						; add to line #
.99eb	18		clc				clc
.99ec	6d 1d 07	adc $071d			adc 	tokenLineNumber
.99ef	8d 1d 07	sta $071d			sta 	tokenLineNumber
.99f2	90 03		bcc $99f7			bcc 	_TLENNoCarry
.99f4	ee 1e 07	inc $071e			inc 	tokenLineNumber+1
.99f7					_TLENNoCarry:
.99f7	bd 1c 08	lda $081c,x			lda 	lineBuffer,x 				; more digits ?
.99fa	c9 30		cmp #$30			cmp 	#'0'
.99fc	90 04		bcc $9a02			bcc 	_TLENExit
.99fe	c9 3a		cmp #$3a			cmp 	#'9'+1
.9a00	90 c3		bcc $99c5			bcc 	TokeniseExtractLineNumber
.9a02					_TLENExit:
.9a02	60		rts				rts
.9a03					_TELNTimes2:
.9a03	0e 1d 07	asl $071d			asl 	tokenLineNumber
.9a06	2e 1e 07	rol $071e			rol 	tokenLineNumber+1
.9a09	60		rts				rts
.9a0a					TokeniseWriteByte:
.9a0a	da		phx				phx
.9a0b	ae 1c 07	ldx $071c			ldx 	tokenOffset 				; next slot to write to
.9a0e	9d 1c 07	sta $071c,x			sta 	tokenOffset,x 				; write byte out
.9a11	ee 1c 07	inc $071c			inc 	tokenOffset 				; advance slot.
.9a14	fa		plx				plx
.9a15	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/variablerecord.asm

.9a16					CheckCreateVariableRecord:
.9a16	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.9a18	85 36		sta $36				sta 	0+zTemp0
.9a1a	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.9a1c	85 37		sta $37				sta 	1+zTemp0
.9a1e					_CCVSearch:
.9a1e	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.9a20	f0 2c		beq $9a4e			beq 	_CCVFail
.9a22	a0 01		ldy #$01			ldy 	#1 							; read the hash
.9a24	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.9a26	cd 03 07	cmp $0703			cmp 	identHash
.9a29	d0 16		bne $9a41			bne 	_CCVNext
.9a2b	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.9a2d	ae 00 07	ldx $0700			ldx 	identStart
.9a30					_CCVCompare:
.9a30	bd 1c 08	lda $081c,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.9a33	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.9a35	e8		inx				inx 								; advance pointers
.9a36	c8		iny				iny
.9a37	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.9a38	d0 07		bne $9a41			bne 	_CCVNext  					; didn't match go to next.
.9a3a	90 f4		bcc $9a30			bcc 	_CCVCompare 				; not finished yet.
.9a3c	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; matched whole thing ?
.9a3f	f0 41		beq $9a82			beq 	_CCVFound 					; yes, we were successful
.9a41					_CCVNext:
.9a41	18		clc				clc
.9a42	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.9a44	65 36		adc $36				adc 	zTemp0
.9a46	85 36		sta $36				sta 	zTemp0
.9a48	90 d4		bcc $9a1e			bcc 	_CCVSearch
.9a4a	e6 37		inc $37				inc 	zTemp0+1
.9a4c	80 d0		bra $9a1e			bra 	_CCVSearch
.9a4e					_CCVFail:
.9a4e	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.9a50	ad 03 07	lda $0703			lda 	identHash
.9a53	91 36		sta ($36),y			sta 	(zTemp0),y
.9a55	c8		iny				iny 								; offset 2 is the type byte
.9a56	ad 04 07	lda $0704			lda 	identTypeByte
.9a59	91 36		sta ($36),y			sta 	(zTemp0),y
.9a5b	c8		iny				iny
.9a5c					_CCVData:
.9a5c	a9 00		lda #$00			lda 	#0 							; erase data 3-7
.9a5e	91 36		sta ($36),y			sta 	(zTemp0),y
.9a60	c8		iny				iny
.9a61	c0 08		cpy #$08			cpy 	#8
.9a63	90 f7		bcc $9a5c			bcc 	_CCVData
.9a65	ae 00 07	ldx $0700			ldx 	identStart 					; copy name into 8 on.
.9a68					_CCVCopyName:
.9a68	bd 1c 08	lda $081c,x			lda 	lineBuffer,x
.9a6b	91 36		sta ($36),y			sta 	(zTemp0),y
.9a6d	e8		inx				inx
.9a6e	c8		iny				iny
.9a6f	ec 02 07	cpx $0702			cpx 	identTypeEnd
.9a72	d0 f4		bne $9a68			bne 	_CCVCopyName
.9a74	98		tya				tya 								; patch offset
.9a75	92 36		sta ($36)			sta 	(zTemp0)
.9a77	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.9a79	91 36		sta ($36),y			sta 	(zTemp0),y
.9a7b	88		dey				dey
.9a7c	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.9a7e	09 80		ora #$80			ora 	#$80
.9a80	91 36		sta ($36),y			sta 	(zTemp0),y
.9a82					_CCVFound:
.9a82	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.9a84	38		sec				sec
.9a85	e9 10		sbc #$10			sbc 	#(VariableSpace >> 8) 		; offset from the start
.9a87	09 40		ora #$40			ora 	#$40 						; make it a writeable token
.9a89	20 0a 9a	jsr $9a0a			jsr 	TokeniseWriteByte
.9a8c	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.9a8e	20 0a 9a	jsr $9a0a			jsr 	TokeniseWriteByte
.9a91	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./variants/hardware/junior/memory.asm

.a23a					MemoryPeek:
.a23a	b2 36		lda ($36)			lda 	(zTemp0)
.a23c	60		rts				rts
.a23d					MemoryPoke:
.a23d	92 36		sta ($36)			sta 	(zTemp0)
.a23f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./variants/hardware/junior/vectors.asm

.a240					PrintHex:
.a240	48		pha				pha
.a241	4a		lsr a				lsr 	a
.a242	4a		lsr a				lsr 	a
.a243	4a		lsr a				lsr 	a
.a244	4a		lsr a				lsr 	a
.a245	20 49 a2	jsr $a249			jsr 	_PrintNibble
.a248	68		pla				pla
.a249					_PrintNibble:
.a249	29 0f		and #$0f			and 	#15
.a24b	c9 0a		cmp #$0a			cmp 	#10
.a24d	90 02		bcc $a251			bcc 	_NoShift
.a24f	69 06		adc #$06			adc 	#6
.a251					_NoShift:
.a251	69 30		adc #$30			adc 	#48
.a253	4c 56 a2	jmp $a256			jmp 	EXTPrintCharacter
.a256					EXTPrintCharacter:
.a256	48		pha				pha
.a257	da		phx				phx
.a258	5a		phy				phy
.a259	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.a25c	7a		ply				ply
.a25d	fa		plx				plx
.a25e	68		pla				pla
.a25f	60		rts				rts
.a260					EXTInputSingleCharacter:
.a260	da		phx				phx
.a261	5a		phy				phy
.a262					_EISCWait:
.a262	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.a265	c9 00		cmp #$00			cmp 	#0
.a267	f0 f9		beq $a262			beq 	_EISCWait
.a269	7a		ply				ply
.a26a	fa		plx				plx
.a26b	60		rts				rts
.a26c					EXTInputLine:
.a26c	a2 00		ldx #$00			ldx 	#0 							; position in line <- start of line
.a26e					_ILLoop:
.a26e	da		phx				phx 								; read character in
.a26f	20 cf ff	jsr $ffcf			jsr 	$FFCF
.a272	fa		plx				plx
.a273	c9 08		cmp #$08			cmp 	#8 							; backspace, CBM doesn't need this.
.a275	f0 12		beq $a289			beq 	_ILBackspace
.a277	c9 0d		cmp #$0d			cmp 	#13							; exit ?
.a279	f0 15		beq $a290			beq 	_ILExit
.a27b	c9 20		cmp #$20			cmp 	#32 						; ignore other control
.a27d	90 ef		bcc $a26e			bcc 	_ILLoop
.a27f	e0 50		cpx #$50			cpx 	#MaxLineSize 				; already full buffer
.a281	f0 eb		beq $a26e			beq 	_ILLoop
.a283	9d 1c 08	sta $081c,x			sta 	lineBuffer,x 				; save it
.a286	e8		inx				inx
.a287	80 e5		bra $a26e			bra 	_ILLoop
.a289					_ILBackspace:
.a289	e0 00		cpx #$00			cpx 	#0  						; can't backspace, start of line.
.a28b	f0 e1		beq $a26e			beq 	_ILLoop
.a28d	ca		dex				dex 								; back one.
.a28e	80 de		bra $a26e			bra 	_ILLoop
.a290					_ILExit:
.a290	20 56 a2	jsr $a256			jsr 	EXTPrintCharacter
.a293	9e 1c 08	stz $081c,x			stz 	lineBuffer,x 				; make ASCIIZ and exit with address in XA
.a296	60		rts				rts
.a297					EXTBreakCheck:
.a297	4c e1 ff	jmp $ffe1			jmp		$FFE1

;******  Return to file: _basic.asm


;******  Processing file: ./variants/memory.flat/memory.asm

.9a92					MemoryNew:
.9a92	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.9a94	85 30		sta $30				sta 	codePtr
.9a96	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.9a98	85 31		sta $31				sta 	codePtr+1
.9a9a	a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.9a9c	92 30		sta ($30)			sta 	(codePtr)
.9a9e	60		rts				rts
.9a9f					MemoryAppend:
.9a9f	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.9aa1	85 30		sta $30				sta 	codePtr
.9aa3	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.9aa5	85 31		sta $31				sta 	codePtr+1
.9aa7					_MAFindEnd:
.9aa7	b2 30		lda ($30)			lda 	(codePtr)
.9aa9	f0 0d		beq $9ab8			beq 	_MAFoundEnd
.9aab	18		clc				clc
.9aac	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.9aae	65 30		adc $30				adc 	codePtr
.9ab0	85 30		sta $30				sta 	codePtr
.9ab2	90 02		bcc $9ab6			bcc 	_CREExit
.9ab4	e6 31		inc $31				inc 	codePtr+1
.9ab6					_CREExit:
.9ab6	80 ef		bra $9aa7			bra 	_MAFindEnd
.9ab8					_MAFoundEnd:
.9ab8	ac 1c 07	ldy $071c			ldy 	tokenOffset 				; bytes to copy
.9abb	c0 04		cpy #$04			cpy 	#4 							; blank line
.9abd	f0 0e		beq $9acd			beq 	_MANoLine
.9abf	a9 00		lda #$00			lda 	#0 							; end of program
.9ac1	91 30		sta ($30),y			sta 	(codePtr),y
.9ac3					_MACopy:
.9ac3	88		dey				dey
.9ac4	b9 1c 07	lda $071c,y			lda 	tokenOffset,y
.9ac7	91 30		sta ($30),y			sta 	(codePtr),y
.9ac9	c0 00		cpy #$00			cpy 	#0
.9acb	d0 f6		bne $9ac3			bne 	_MACopy
.9acd					_MANoLine:
.9acd	60		rts				rts
.9ace					MemoryInline:
.9ace	98		tya				tya 								; put address into stack,x
.9acf	18		clc				clc
.9ad0	65 30		adc $30				adc 	codePtr
.9ad2	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.9ad5	a5 31		lda $31				lda 	codePtr+1
.9ad7	69 00		adc #$00			adc 	#0
.9ad9	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9adc	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.9adf	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.9ae2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./variants/memory.flat/transfer.asm

.9ae3					MemoryTransferAX:
.9ae3	85 36		sta $36				sta 	zTemp0 						; save line number zTemp0
.9ae5	86 37		stx $37				stx 	zTemp0+1
.9ae7	a9 00		lda #$00			lda 	#(BasicStart & $FF)
.9ae9	85 30		sta $30				sta 	codePtr
.9aeb	a9 20		lda #$20			lda 	#(BasicStart >> 8)
.9aed	85 31		sta $31				sta 	codePtr+1
.9aef					_MTAXLoop:
.9aef	b2 30		lda ($30)			lda 	(codePtr)
.9af1	f0 1d		beq $9b10			beq 	_MTAXError 					; not found.
.9af3	a0 01		ldy #$01			ldy 	#1 							; check LSB
.9af5	b1 30		lda ($30),y			lda 	(codePtr),y
.9af7	c5 36		cmp $36				cmp 	zTemp0
.9af9	d0 07		bne $9b02			bne 	_MTAXNext
.9afb	c8		iny				iny 								; check MSB
.9afc	b1 30		lda ($30),y			lda 	(codePtr),y
.9afe	c5 37		cmp $37				cmp 	zTemp0+1
.9b00	f0 0d		beq $9b0f			beq 	_MTAXExit 					; success !
.9b02					_MTAXNext:
.9b02	18		clc				clc
.9b03	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.9b05	65 30		adc $30				adc 	codePtr
.9b07	85 30		sta $30				sta 	codePtr
.9b09	90 02		bcc $9b0d			bcc 	_CREExit
.9b0b	e6 31		inc $31				inc 	codePtr+1
.9b0d					_CREExit:
.9b0d	80 e0		bra $9aef			bra 	_MTAXLoop
.9b0f					_MTAXExit:
.9b0f	60		rts				rts
.9b10					_MTAXError:
.9b10	a9 0d		lda #$0d		lda	#13
.9b12	4c ea 88	jmp $88ea		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  End of listing
