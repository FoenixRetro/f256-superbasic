
; 64tass Turbo Assembler Macro V1.56.2625 listing file
; 64tass -D AUTORUN=1 -q -b -Wall -Wno-portable -c -L output/basic.lst -l output/basic.lbl -Wall -o basic.rom _basic.asm
; Wed Oct  5 17:49:08 2022

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=1					AUTORUN=1

;******  Processing input file: _basic.asm


;******  Processing file: ./common/aa.system/01common.inc

=$30					ZeroPageMandatory = $30
=$600					ZeroPagePreference = $600
=$700					MemoryStorage = $700
=$2000					BasicStart = $2000
=$8000					CodeStart = $8000
=$1000					VariableSpace = $1000
=$2000					EndVariableSpace = $2000
=8					MathStackSize = 8
=512					BasicStackSize = 512
=3584					BasicStackBase = $1000-BasicStackSize
=80					MaxLineSize = 80

;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/02macros.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/04data.inc

.0030					codePtr:
>0030							.fill 	4
.0034					basicStack:
>0034							.fill 	2
.0036					zTemp0:
>0036							.fill 	2
.0038					zTemp1:
>0038							.fill 	2
.003a					zTemp2:
>003a							.fill 	2
.003c					zsTemp:
>003c							.fill 	2
.003e					zaTemp:
>003e							.fill 	2
=$30					safePtr = codePtr 							; minimise direct tinkering
=$80					NSBIsNegative = $80 						; bit 7 : sign of mantissa (where numeric)
=$20					NSBIsReference = $20 						; bit 5 : is a reference
=$10					NSBIsString = $10 							; bit 4 : set if string (procedures don't go on the stack)
=$18					NSBTypeMask = $18 							; bits 4,3 : 00 int 01 float 10 string 11 procedure
=$03					NSBRefMask = $03 							; bits 0,1 : Bytes of reference, -1 (e.g. 00 = 1 byte, 11 = 4 bytes)
=$04					NSBIsArray = $04
=$00					NSTInteger = $00 							; base types for bits 3..4
=$08					NSTFloat = $08
=$10					NSTString = $10
=$18					NSTProcedure = $18
.0600					NSStatus:
>0600							.fill 	MathStackSize
.0608					NSMantissa0:
>0608							.fill 	MathStackSize 				; (this is my integer mantissa system)
.0610					NSMantissa1:
>0610							.fill 	MathStackSize
.0618					NSMantissa2:
>0618							.fill 	MathStackSize
.0620					NSMantissa3:
>0620							.fill 	MathStackSize
.0628					NSExponent:
>0628							.fill 	MathStackSize
.0700					identStart:
>0700							.fill 	1
.0701					identTypeStart:
>0701							.fill 	1
.0702					identTypeEnd:
>0702							.fill 	1
.0703					identHash:
>0703							.fill 	1
.0704					identTypeByte:
>0704							.fill 	1	 						; (see tokenising.pdf)
.0705					encodeState:
>0705							.fill 	1
.0706					digitTemp:
>0706							.fill 	1
.0707					decimalCount:
>0707							.fill 	1
.0708					randomSeed:
>0708							.fill 	4
.070c					lowMemPtr:
>070c							.fill 	2
.070e					stringMemory:
>070e							.fill 	2
.0710					stringInitialised:
>0710							.fill 	1
.0711					stringTempPointer:
>0711							.fill 	2
.0713					breakCheck:
>0713							.fill 	1
.0714					decimalPlaces:
>0714							.fill 	1
.0715					dbOffset:
>0715							.fill 	1
.0716					dataPointer:
>0716							.fill 	5
.071b					inDataStatement:
>071b							.fill 	1
.071c					tbOffset:
>071c							.fill 	1
.071d					AssemblerAddress:
>071d							.fill 	2
.071f					AssemblerControl:
>071f							.fill 	1
.0720					ParamStart:
>0720							.fill 	2
.0722					IsGroup1:
>0722							.fill 	1
.0723					BaseOpcode:
>0723							.fill 	1
.0724					ModeMask:
>0724							.fill 	1
.0725					tokenOffset:
>0725							.fill 	1
.0726					tokenLineNumber:
>0726							.fill 	2
.0728					tokenBuffer:
>0728							.fill 	253
.0825					lineBuffer:
>0825							.fill 	MaxLineSize+1
.0876					numberBuffer:
>0876							.fill 	34
.0898					decimalBuffer:
>0898							.fill 	16

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/constants.inc

=$80					AM_ISZP = $80
=$40					AM_ISG1 = $40
=$20					AM_ISG2 = $20
=224					AM_IMMEDIATE = AM_ISZP+AM_ISG1+AM_ISG2+$00
=228					AM_ZEROPAGE = AM_ISZP+AM_ISG1+AM_ISG2+$04
=40					AM_ACC = AM_ISG2+$08
=108					AM_ABS = AM_ISG1+AM_ISG2+$0C
=208					AM_INDY = AM_ISZP+AM_ISG1+$10
=244					AM_ZEROX = AM_ISZP+AM_ISG1+AM_ISG2+$14
=120					AM_ABSY = AM_ISG1+AM_ISG2+$18
=124					AM_ABSX = AM_ISG1+AM_ISG2+$1C
=209					AM_IND = AM_ISZP+AM_ISG1+$11
=$80					AM_ZEROY = AM_ISZP
=$01					AM_INDABS = $01
=$02					AM_INDABSX = $02
=192					AM_INDX = AM_ISZP+AM_ISG1+$00

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/handlers.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.inc

=1					ERRID_BREAK = 1
=2					ERRID_SYNTAX = 2
=3					ERRID_DIVZERO = 3
=4					ERRID_RANGE = 4
=5					ERRID_TYPE = 5
=6					ERRID_MEMORY = 6
=7					ERRID_ARGUMENT = 7
=8					ERRID_STOP = 8
=9					ERRID_STRING = 9
=10					ERRID_ASSERT = 10
=11					ERRID_DATA = 11
=12					ERRID_NOTDONE = 12
=13					ERRID_LINE = 13
=14					ERRID_GOSUB = 14
=15					ERRID_REPEAT = 15
=16					ERRID_WHILE = 16
=17					ERRID_FOR = 17
=18					ERRID_STACK = 18
=19					ERRID_STRUCT = 19
=20					ERRID_PROC = 20
=21					ERRID_REDEFINE = 21
=22					ERRID_ARRAYSIZE = 22
=23					ERRID_ARRAYIDX = 23

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst.inc

=$00					KWD_LESSLESS                         = $00; $00 <<
=$01					KWD_LESSEQUAL                        = $01; $01 <=
=$02					KWD_LESSGREATER                      = $02; $02 <>
=$03					KWD_PLINGPLING3                      = $03; $03 !!3
=$04					KWD_GREATERLESS                      = $04; $04 ><
=$05					KWD_GREATEREQUAL                     = $05; $05 >=
=$06					KWD_GREATERGREATER                   = $06; $06 >>
=$07					KWD_PLINGPLING7                      = $07; $07 !!7
=$08					KWD_PLINGPLING8                      = $08; $08 !!8
=$09					KWD_PLINGPLING9                      = $09; $09 !!9
=$0a					KWD_PLINGPLING10                     = $0a; $0a !!10
=$0b					KWD_PLINGPLING11                     = $0b; $0b !!11
=$0c					KWD_PLINGPLING12                     = $0c; $0c !!12
=$0d					KWD_PLINGPLING13                     = $0d; $0d !!13
=$0e					KWD_PLINGPLING14                     = $0e; $0e !!14
=$0f					KWD_PLINGPLING15                     = $0f; $0f !!15
=$10					KWD_AT                               = $10; $10 @
=$11					KWD_PLINGPLING17                     = $11; $11 !!17
=$12					KWD_PLINGPLING18                     = $12; $12 !!18
=$13					KWD_LSQPAREN                         = $13; $13 [
=$14					KWD_BACKSLASH                        = $14; $14 \
=$15					KWD_RSQPAREN                         = $15; $15 ]
=$16					KWD_HAT                              = $16; $16 ^
=$17					KWD_UNDERSCORE                       = $17; $17 _
=$18					KWD_BQUOTE                           = $18; $18 `
=$19					KWD_PLINGPLING25                     = $19; $19 !!25
=$1a					KWD_PLINGPLING26                     = $1a; $1a !!26
=$1b					KWD_LCURLY                           = $1b; $1b {
=$1c					KWD_BAR                              = $1c; $1c |
=$1d					KWD_RCURLY                           = $1d; $1d }
=$1e					KWD_TILDE                            = $1e; $1e ~
=$21					KWD_PLING                            = $21; $21 !
=$22					KWD_DQUOTE                           = $22; $22 "
=$23					KWD_HASH                             = $23; $23 #
=$24					KWD_DOLLAR                           = $24; $24 $
=$25					KWD_PERCENT                          = $25; $25 %
=$26					KWD_AMPERSAND                        = $26; $26 &
=$27					KWD_QUOTE                            = $27; $27 '
=$28					KWD_LPAREN                           = $28; $28 (
=$29					KWD_RPAREN                           = $29; $29 )
=$2a					KWD_STAR                             = $2a; $2a *
=$2b					KWD_PLUS                             = $2b; $2b +
=$2c					KWD_COMMA                            = $2c; $2c ,
=$2d					KWD_MINUS                            = $2d; $2d -
=$2e					KWD_PERIOD                           = $2e; $2e .
=$2f					KWD_SLASH                            = $2f; $2f /
=$30					KWD_0                                = $30; $30 0
=$31					KWD_1                                = $31; $31 1
=$32					KWD_2                                = $32; $32 2
=$33					KWD_3                                = $33; $33 3
=$34					KWD_4                                = $34; $34 4
=$35					KWD_5                                = $35; $35 5
=$36					KWD_6                                = $36; $36 6
=$37					KWD_7                                = $37; $37 7
=$38					KWD_8                                = $38; $38 8
=$39					KWD_9                                = $39; $39 9
=$3a					KWD_COLON                            = $3a; $3a :
=$3b					KWD_SEMICOLON                        = $3b; $3b ;
=$3c					KWD_LESS                             = $3c; $3c <
=$3d					KWD_EQUAL                            = $3d; $3d =
=$3e					KWD_GREATER                          = $3e; $3e >
=$3f					KWD_QMARK                            = $3f; $3f ?
=$83					KWD_ABSLPAREN                        = $83; $83 ABS(
=$84					KWD_ALLOCLPAREN                      = $84; $84 ALLOC(
=$85					KWD_ASCLPAREN                        = $85; $85 ASC(
=$86					KWD_CHRDOLLARLPAREN                  = $86; $86 CHR$(
=$87					KWD_FALSE                            = $87; $87 FALSE
=$88					KWD_FRACLPAREN                       = $88; $88 FRAC(
=$89					KWD_INTLPAREN                        = $89; $89 INT(
=$8a					KWD_ISVALLPAREN                      = $8a; $8a ISVAL(
=$8b					KWD_LEFTDOLLARLPAREN                 = $8b; $8b LEFT$(
=$8c					KWD_LENLPAREN                        = $8c; $8c LEN(
=$8d					KWD_MIDDOLLARLPAREN                  = $8d; $8d MID$(
=$8e					KWD_NOTLPAREN                        = $8e; $8e NOT(
=$8f					KWD_RIGHTDOLLARLPAREN                = $8f; $8f RIGHT$(
=$90					KWD_RNDLPAREN                        = $90; $90 RND(
=$91					KWD_SGNLPAREN                        = $91; $91 SGN(
=$92					KWD_SPCLPAREN                        = $92; $92 SPC(
=$93					KWD_STRDOLLARLPAREN                  = $93; $93 STR$(
=$94					KWD_TRUE                             = $94; $94 TRUE
=$95					KWD_VALLPAREN                        = $95; $95 VAL(
=$96					KWD_FOR                              = $96; $96 FOR
=$97					KWD_IF                               = $97; $97 IF
=$98					KWD_PROC                             = $98; $98 PROC
=$99					KWD_REPEAT                           = $99; $99 REPEAT
=$9a					KWD_WHILE                            = $9a; $9a WHILE
=$9b					KWD_ENDIF                            = $9b; $9b ENDIF
=$9c					KWD_ENDPROC                          = $9c; $9c ENDPROC
=$9d					KWD_NEXT                             = $9d; $9d NEXT
=$9e					KWD_THEN                             = $9e; $9e THEN
=$9f					KWD_UNTIL                            = $9f; $9f UNTIL
=$a0					KWD_WEND                             = $a0; $a0 WEND
=$a1					KWD_CALL                             = $a1; $a1 CALL
=$a2					KWD_CLS                              = $a2; $a2 CLS
=$a3					KWD_DATA                             = $a3; $a3 DATA
=$a4					KWD_DIM                              = $a4; $a4 DIM
=$a5					KWD_DOWNTO                           = $a5; $a5 DOWNTO
=$a6					KWD_ELSE                             = $a6; $a6 ELSE
=$a7					KWD_GOSUB                            = $a7; $a7 GOSUB
=$a8					KWD_GOTO                             = $a8; $a8 GOTO
=$a9					KWD_LET                              = $a9; $a9 LET
=$aa					KWD_LOCAL                            = $aa; $aa LOCAL
=$ab					KWD_PRINT                            = $ab; $ab PRINT
=$ac					KWD_READ                             = $ac; $ac READ
=$ad					KWD_REM                              = $ad; $ad REM
=$ae					KWD_RETURN                           = $ae; $ae RETURN
=$af					KWD_TO                               = $af; $af TO

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/kwdconst0.inc

=$80					KWC_EOL = $80
=$ff					KWC_STRING = $FF
=$fe					KWC_HEXCONST = $FE
=$96					KWC_FIRST_STRUCTURE = $96
=$9b					KWC_FIRST_STRUCTURE_DEC = $9b
=$a0					KWC_LAST_STRUCTURE = $a0
=$83					KWC_FIRST_UNARY = $83
=$95					KWC_LAST_UNARY = $95

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/stack.inc

=$e0					STK_GOSUB = $E0
=$d0					STK_FOR = $D0
=$c0					STK_REPEAT = $C0
=$b0					STK_PROC = $B0
=$a0					STK_WHILE = $A0
=$01					STK_LOCALN = $01
=$02					STK_LOCALS = $02

;******  Return to file: _basic.asm


;******  Processing file: ./variants/memory.flat/access.inc


;******  Return to file: _basic.asm


;******  Processing file: ./common/aa.system/00start.asm

.8000	a2 ff		ldx #$ff	Start:	ldx 	#$FF 						; stack reset
.8002	9a		txs				txs
.8003	a2 80		ldx #$80			ldx 	#(Prompt >> 8) 				; prompt
.8005	a9 13		lda #$13			lda 	#(Prompt & $FF)
.8007	20 f5 8c	jsr $8cf5			jsr 	PrintStringXA
.800a	20 8d 88	jsr $888d			jsr 	NewCommand 					; erase current program
.800d	20 af 98	jsr $98af			jsr 	BackloadProgram
.8010	4c d9 89	jmp $89d9			jmp 	CommandRun
>8013	0d 0d 2a 2a 2a 20 46 32		Prompt:	.text 	13,13,"*** F256 Junior SuperBASIC ***",13,13
>801b	35 36 20 4a 75 6e 69 6f 72 20 53 75 70 65 72 42
>802b	41 53 49 43 20 2a 2a 2a 0d 0d
>8035	57 72 69 74 74 65 6e 20				.text 	"Written by Paul Robson 2022.",13,13
>803d	62 79 20 50 61 75 6c 20 52 6f 62 73 6f 6e 20 32
>804d	30 32 32 2e 0d 0d

;******  Processing file: ./common/aa.system/../generated/timestamp.asm

>8053	42 75 69 6c 74 20 57 65			.text "Built Wednesday 05-Oct-2022. Build 130."
>805b	64 6e 65 73 64 61 79 20 30 35 2d 4f 63 74 2d 32
>806b	30 32 32 2e 20 42 75 69 6c 64 20 31 33 30 2e

;******  Return to file: ./common/aa.system/00start.asm

>807a	0d 0d 00					.byte 	13,13,0
>807d							.align 2

;******  Processing file: ./common/aa.system/../generated/vectors.dat

.807e					VectorSetPunc:
>807e	46 8e					.word	ShiftLeft                        ; $00 <<
>8080	40 8d					.word	BinaryCompareLessEqual           ; $01 <=
>8082	36 8d					.word	BinaryCompareNotEqual            ; $02 <>
>8084	0d a5					.word	SyntaxError                      ; $03 !!3
>8086	0d a5					.word	SyntaxError                      ; $04 ><
>8088	4a 8d					.word	BinaryCompareGreaterEqual        ; $05 >=
>808a	49 8e					.word	ShiftRight                       ; $06 >>
>808c	0d a5					.word	SyntaxError                      ; $07 !!7
>808e	0d a5					.word	SyntaxError                      ; $08 !!8
>8090	0d a5					.word	SyntaxError                      ; $09 !!9
>8092	0d a5					.word	SyntaxError                      ; $0a !!10
>8094	0d a5					.word	SyntaxError                      ; $0b !!11
>8096	0d a5					.word	SyntaxError                      ; $0c !!12
>8098	0d a5					.word	SyntaxError                      ; $0d !!13
>809a	0d a5					.word	SyntaxError                      ; $0e !!14
>809c	0d a5					.word	SyntaxError                      ; $0f !!15
>809e	0d a5					.word	SyntaxError                      ; $10 @
>80a0	0d a5					.word	SyntaxError                      ; $11 !!17
>80a2	0d a5					.word	SyntaxError                      ; $12 !!18
>80a4	0d a5					.word	SyntaxError                      ; $13 [
>80a6	44 9f					.word	IntegerDivide                    ; $14 \
>80a8	0d a5					.word	SyntaxError                      ; $15 ]
>80aa	cf 8f					.word	EorInteger                       ; $16 ^
>80ac	0d a5					.word	SyntaxError                      ; $17 _
>80ae	0d a5					.word	SyntaxError                      ; $18 `
>80b0	0d a5					.word	SyntaxError                      ; $19 !!25
>80b2	0d a5					.word	SyntaxError                      ; $1a !!26
>80b4	0d a5					.word	SyntaxError                      ; $1b {
>80b6	89 8f					.word	OraInteger                       ; $1c |
>80b8	0d a5					.word	SyntaxError                      ; $1d }
>80ba	0d a5					.word	SyntaxError                      ; $1e ~
>80bc	0d a5					.word	SyntaxError                      ; $1f [7m<7F>[m
>80be	0d a5					.word	SyntaxError                      ; $20
>80c0	15 90					.word	WordIndirect                     ; $21 !
>80c2	0d a5					.word	SyntaxError                      ; $22 "
>80c4	0d a5					.word	SyntaxError                      ; $23 #
>80c6	0d a5					.word	SyntaxError                      ; $24 $
>80c8	91 9f					.word	IntegerModulus                   ; $25 %
>80ca	43 8f					.word	AndInteger                       ; $26 &
>80cc	0d a5					.word	SyntaxError                      ; $27 '
>80ce	0d a5					.word	SyntaxError                      ; $28 (
>80d0	0d a5					.word	SyntaxError                      ; $29 )
>80d2	06 a0					.word	MulInteger                       ; $2a *
>80d4	dd 8e					.word	AddInteger                       ; $2b +
>80d6	0d a5					.word	SyntaxError                      ; $2c ,
>80d8	18 8f					.word	SubInteger                       ; $2d -
>80da	0d a5					.word	SyntaxError                      ; $2e .
>80dc	9d a1					.word	FDivideCommand                   ; $2f /
>80de	0d a5					.word	SyntaxError                      ; $30 0
>80e0	0d a5					.word	SyntaxError                      ; $31 1
>80e2	0d a5					.word	SyntaxError                      ; $32 2
>80e4	0d a5					.word	SyntaxError                      ; $33 3
>80e6	0d a5					.word	SyntaxError                      ; $34 4
>80e8	0d a5					.word	SyntaxError                      ; $35 5
>80ea	0d a5					.word	SyntaxError                      ; $36 6
>80ec	0d a5					.word	SyntaxError                      ; $37 7
>80ee	0d a5					.word	SyntaxError                      ; $38 8
>80f0	0d a5					.word	SyntaxError                      ; $39 9
>80f2	0d a5					.word	SyntaxError                      ; $3a :
>80f4	0d a5					.word	SyntaxError                      ; $3b ;
>80f6	22 8d					.word	BinaryCompareLess                ; $3c <
>80f8	18 8d					.word	BinaryCompareEqual               ; $3d =
>80fa	2c 8d					.word	BinaryCompareGreater             ; $3e >
>80fc	3c 90					.word	ByteIndirect                     ; $3f ?
.80fe					VectorSet0:
>80fe	45 8a					.word	EOLCommand                       ; $80 !0:EOF
>8100	52 8a					.word	Shift1Command                    ; $81 !1:SH1
>8102	5a 8a					.word	Shift2Command                    ; $82 !2:SH2
>8104	e3 a2					.word	AbsUnary                         ; $83 ABS(
>8106	06 95					.word	AllocUnary                       ; $84 ALLOC(
>8108	f3 a2					.word	AscUnary                         ; $85 ASC(
>810a	c1 95					.word	ChrUnary                         ; $86 CHR$(
>810c	14 8d					.word	UnaryFalse                       ; $87 FALSE
>810e	00 a3					.word	FracUnary                        ; $88 FRAC(
>8110	16 a3					.word	IntUnary                         ; $89 INT(
>8112	6c a3					.word	IsValUnary                       ; $8a ISVAL(
>8114	9b 96					.word	Unary_Left                       ; $8b LEFT$(
>8116	28 a3					.word	LenUnary                         ; $8c LEN(
>8118	c5 96					.word	Unary_Mid                        ; $8d MID$(
>811a	5e 95					.word	Unary_Not                        ; $8e NOT(
>811c	ab 96					.word	Unary_Right                      ; $8f RIGHT$(
>811e	74 95					.word	Unary_Rnd                        ; $90 RND(
>8120	42 a3					.word	SgnUnary                         ; $91 SGN(
>8122	d3 95					.word	SpcUnary                         ; $92 SPC(
>8124	ee 95					.word	Unary_Str                        ; $93 STR$(
>8126	08 8d					.word	UnaryTrue                        ; $94 TRUE
>8128	62 a3					.word	ValUnary                         ; $95 VAL(
>812a	f3 85					.word	ForCommand                       ; $96 FOR
>812c	40 87					.word	IfCommand                        ; $97 IF
>812e	62 8a					.word	Unused1                          ; $98 PROC
>8130	85 89					.word	Command_REPEAT                   ; $99 REPEAT
>8132	6d 8c					.word	Command_WHILE                    ; $9a WHILE
>8134	69 87					.word	EndIf                            ; $9b ENDIF
>8136	1d 9f					.word	Command_ENDPROC                  ; $9c ENDPROC
>8138	ad 86					.word	NextCommand                      ; $9d NEXT
>813a	62 8a					.word	Unused4                          ; $9e THEN
>813c	8e 89					.word	Command_UNTIL                    ; $9f UNTIL
>813e	8e 8c					.word	Command_WEND                     ; $a0 WEND
>8140	c8 84					.word	CallCommand                      ; $a1 CALL
>8142	0d a5					.word	SyntaxError                      ; $a2 CLS
>8144	2b 85					.word	Command_Data                     ; $a3 DATA
>8146	33 85					.word	DimCommand                       ; $a4 DIM
>8148	62 8a					.word	Unused3                          ; $a5 DOWNTO
>814a	62 87					.word	ElseCode                         ; $a6 ELSE
>814c	06 87					.word	Command_GOSUB                    ; $a7 GOSUB
>814e	24 87					.word	GotoCommand                      ; $a8 GOTO
>8150	6a 87					.word	LetCommand                       ; $a9 LET
>8152	3e 88					.word	Command_LOCAL                    ; $aa LOCAL
>8154	97 88					.word	Command_Print                    ; $ab PRINT
>8156	1f 89					.word	Command_Read                     ; $ac READ
>8158	78 89					.word	RemCommand                       ; $ad REM
>815a	16 87					.word	Command_RETURN                   ; $ae RETURN
>815c	62 8a					.word	Unused2                          ; $af TO
.815e					VectorSet1:
>815e	0d a5					.word	SyntaxError                      ; $80 !0:EOF
>8160	0d a5					.word	SyntaxError                      ; $81 !1:SH1
>8162	0d a5					.word	SyntaxError                      ; $82 !2:SH2
>8164	99 84					.word	AssembleCommand                  ; $83 ASSEMBLE
>8166	b8 84					.word	AssertCommand                    ; $84 ASSERT
>8168	d6 84					.word	ClearCommand                     ; $85 CLEAR
>816a	f0 85					.word	EndCommand                       ; $86 END
>816c	a3 87					.word	Command_List                     ; $87 LIST
>816e	8d 88					.word	NewCommand                       ; $88 NEW
>8170	a7 89					.word	Command_Restore                  ; $89 RESTORE
>8172	d9 89					.word	CommandRUN                       ; $8a RUN
>8174	65 8a					.word	StopCommand                      ; $8b STOP
.8176					VectorSet2:
>8176	0d a5					.word	SyntaxError                      ; $80 !0:EOF
>8178	0d a5					.word	SyntaxError                      ; $81 !1:SH1
>817a	0d a5					.word	SyntaxError                      ; $82 !2:SH2
>817c	d0 a3					.word	Assemble_adc                     ; $83 ADC
>817e	c8 a3					.word	Assemble_and                     ; $84 AND
>8180	e4 a3					.word	Assemble_asl                     ; $85 ASL
>8182	4e a4					.word	Assemble_bcc                     ; $86 BCC
>8184	52 a4					.word	Assemble_bcs                     ; $87 BCS
>8186	5a a4					.word	Assemble_beq                     ; $88 BEQ
>8188	11 a4					.word	Assemble_bit                     ; $89 BIT
>818a	42 a4					.word	Assemble_bmi                     ; $8a BMI
>818c	56 a4					.word	Assemble_bne                     ; $8b BNE
>818e	3e a4					.word	Assemble_bpl                     ; $8c BPL
>8190	5e a4					.word	Assemble_bra                     ; $8d BRA
>8192	62 a4					.word	Assemble_brk                     ; $8e BRK
>8194	46 a4					.word	Assemble_bvc                     ; $8f BVC
>8196	4a a4					.word	Assemble_bvs                     ; $90 BVS
>8198	6a a4					.word	Assemble_clc                     ; $91 CLC
>819a	be a4					.word	Assemble_cld                     ; $92 CLD
>819c	7e a4					.word	Assemble_cli                     ; $93 CLI
>819e	ae a4					.word	Assemble_clv                     ; $94 CLV
>81a0	dc a3					.word	Assemble_cmp                     ; $95 CMP
>81a2	25 a4					.word	Assemble_cpx                     ; $96 CPX
>81a4	20 a4					.word	Assemble_cpy                     ; $97 CPY
>81a6	02 a4					.word	Assemble_dec                     ; $98 DEC
>81a8	ba a4					.word	Assemble_dex                     ; $99 DEX
>81aa	96 a4					.word	Assemble_dey                     ; $9a DEY
>81ac	cc a3					.word	Assemble_eor                     ; $9b EOR
>81ae	07 a4					.word	Assemble_inc                     ; $9c INC
>81b0	c6 a4					.word	Assemble_inx                     ; $9d INX
>81b2	b6 a4					.word	Assemble_iny                     ; $9e INY
>81b4	39 a4					.word	Assemble_jmp                     ; $9f JMP
>81b6	34 a4					.word	Assemble_jsr                     ; $a0 JSR
>81b8	d8 a3					.word	Assemble_lda                     ; $a1 LDA
>81ba	fd a3					.word	Assemble_ldx                     ; $a2 LDX
>81bc	1b a4					.word	Assemble_ldy                     ; $a3 LDY
>81be	ee a3					.word	Assemble_lsr                     ; $a4 LSR
>81c0	ca a4					.word	Assemble_nop                     ; $a5 NOP
>81c2	c4 a3					.word	Assemble_ora                     ; $a6 ORA
>81c4	7a a4					.word	Assemble_pha                     ; $a7 PHA
>81c6	66 a4					.word	Assemble_php                     ; $a8 PHP
>81c8	c2 a4					.word	Assemble_phx                     ; $a9 PHX
>81ca	82 a4					.word	Assemble_phy                     ; $aa PHY
>81cc	8a a4					.word	Assemble_pla                     ; $ab PLA
>81ce	6e a4					.word	Assemble_plp                     ; $ac PLP
>81d0	d2 a4					.word	Assemble_plx                     ; $ad PLX
>81d2	92 a4					.word	Assemble_ply                     ; $ae PLY
>81d4	e9 a3					.word	Assemble_rol                     ; $af ROL
>81d6	f3 a3					.word	Assemble_ror                     ; $b0 ROR
>81d8	76 a4					.word	Assemble_rti                     ; $b1 RTI
>81da	86 a4					.word	Assemble_rts                     ; $b2 RTS
>81dc	e0 a3					.word	Assemble_sbc                     ; $b3 SBC
>81de	72 a4					.word	Assemble_sec                     ; $b4 SEC
>81e0	ce a4					.word	Assemble_sed                     ; $b5 SED
>81e2	8e a4					.word	Assemble_sei                     ; $b6 SEI
>81e4	d4 a3					.word	Assemble_sta                     ; $b7 STA
>81e6	f8 a3					.word	Assemble_stx                     ; $b8 STX
>81e8	16 a4					.word	Assemble_sty                     ; $b9 STY
>81ea	0c a4					.word	Assemble_stz                     ; $ba STZ
>81ec	aa a4					.word	Assemble_tax                     ; $bb TAX
>81ee	a6 a4					.word	Assemble_tay                     ; $bc TAY
>81f0	2f a4					.word	Assemble_trb                     ; $bd TRB
>81f2	2a a4					.word	Assemble_tsb                     ; $be TSB
>81f4	b2 a4					.word	Assemble_tsx                     ; $bf TSX
>81f6	9a a4					.word	Assemble_txa                     ; $c0 TXA
>81f8	a2 a4					.word	Assemble_txs                     ; $c1 TXS
>81fa	9e a4					.word	Assemble_tya                     ; $c2 TYA

;******  Return to file: ./common/aa.system/00start.asm


;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/assembler.asm

.81fc					AssembleGroup1:
.81fc	a9 ff		lda #$ff			lda 	#$FF
.81fe	8d 24 07	sta $0724			sta 	ModeMask 					; initialise the mode mask - all for all
.8201	80 02		bra $8205			bra 	AsmGroup12
.8203					AssembleGroup2:
.8203	a5 00		lda $00				lda 	$00
.8205					AsmGroup12:
.8205	8d 22 07	sta $0722			sta 	IsGroup1 					; save the 'group 1' flag
.8208	68		pla				pla 								; pop the return address to access the information following.
.8209	fa		plx				plx
.820a	20 93 82	jsr $8293			jsr 	AccessParameters 			; get opcode and save as base
.820d	8d 23 07	sta $0723			sta 	BaseOpcode
.8210	ad 22 07	lda $0722			lda 	IsGroup1 					; skip if group 1 as we don't have a complex mask.
.8213	d0 08		bne $821d			bne 	_AG12HaveMask
.8215	a9 02		lda #$02			lda 	#2 							; if group 2 the second parameter is the mask
.8217	20 9b 82	jsr $829b			jsr 	GetParameter		 		; e.g. which modes are supported for this operand
.821a	8d 24 07	sta $0724			sta 	ModeMask
.821d					_AG12HaveMask:
.821d	20 d6 83	jsr $83d6			jsr 	TypeAndCalculateOperand 	; get zero page type
.8220	da		phx				phx 								; save found address mode
.8221	20 ff 82	jsr $82ff			jsr 	AssembleModeX
.8224	fa		plx				plx  								; restore address mode
.8225	b0 0b		bcs $8232			bcs 	_AG12Exit
.8227	20 33 82	jsr $8233			jsr 	PromoteToAbsolute  			; promote ZP to ABS and try that
.822a	20 ff 82	jsr $82ff			jsr 	AssembleModeX
.822d	b0 03		bcs $8232			bcs 	_AG12Exit
.822f	4c 0d a5	jmp $a50d			jmp 	SyntaxError 				; can't do either, so must be wrong mode/operand.
.8232					_AG12Exit:
.8232	60		rts				rts
.8233					PromoteToAbsolute:
.8233	a9 6c		lda #$6c			lda 	#AM_ABS 					; lda xx
.8235	e0 e4		cpx #$e4			cpx 	#AM_ZEROPAGE
.8237	f0 19		beq $8252			beq 	_PTADo
.8239	a9 7c		lda #$7c			lda 	#AM_ABSX 					; lda xx,X
.823b	e0 f4		cpx #$f4			cpx 	#AM_ZEROX
.823d	f0 13		beq $8252			beq 	_PTADo
.823f	a9 78		lda #$78			lda 	#AM_ABSY 					; lda xx,Y
.8241	e0 80		cpx #$80			cpx 	#AM_ZEROY
.8243	f0 0d		beq $8252			beq 	_PTADo
.8245	a9 01		lda #$01			lda 	#AM_INDABS 					; lda (xx) (jump)
.8247	e0 d1		cpx #$d1			cpx 	#AM_IND
.8249	f0 07		beq $8252			beq 	_PTADo
.824b	a9 02		lda #$02			lda 	#AM_INDABSX 				; lda (xx,x) (jump)
.824d	e0 c0		cpx #$c0			cpx 	#AM_INDX
.824f	f0 01		beq $8252			beq 	_PTADo
.8251	60		rts				rts
.8252					_PTADo:
.8252	aa		tax				tax
.8253	60		rts				rts
.8254					AssembleGroup3:
.8254	68		pla				pla 								; get parameters, which is just the opcode.
.8255	fa		plx				plx
.8256	20 93 82	jsr $8293			jsr 	AccessParameters 			; get and output opcode
.8259	20 ab 82	jsr $82ab			jsr 	AssemblerWriteByte
.825c	20 3a 84	jsr $843a			jsr 	CalculateOperand 			; get a 16 bit operand
.825f	ad 08 06	lda $0608			lda 	NSMantissa0 				; calculate the offset
.8262	38		sec				sec
.8263	ed 1d 07	sbc $071d			sbc 	AssemblerAddress
.8266	48		pha				pha 								; LSB in A
.8267	ad 10 06	lda $0610			lda 	NSMantissa1
.826a	ed 1e 07	sbc $071e			sbc 	AssemblerAddress+1
.826d	aa		tax				tax 								; MSB in X
.826e	68		pla				pla
.826f	18		clc				clc 								; $80 to easy check $80-$7F, plus 1 for offset error
.8270	69 7f		adc #$7f			adc 	#$7F
.8272	90 01		bcc $8275			bcc 	_AG3NoCarry
.8274	e8		inx				inx
.8275					_AG3NoCarry:
.8275	38		sec				sec 								; fix back and write out anyways.
.8276	e9 80		sbc #$80			sbc 	#$80
.8278	20 ab 82	jsr $82ab			jsr 	AssemblerWriteByte
.827b	e0 00		cpx #$00			cpx 	#0 							; was it in range
.827d	f0 0a		beq $8289			beq 	_AG3Exit
.827f	ad 1f 07	lda $071f			lda 	AssemblerControl 			; are we allowing bad values ?
.8282	29 01		and #$01			and 	#1
.8284	f0 03		beq $8289			beq 	_AG3Exit
.8286	4c 12 a5	jmp $a512			jmp 	RangeError 					; no, branch is out of range
.8289					_AG3Exit:
.8289	60		rts				rts
.828a					AssembleGroup4:
.828a	68		pla				pla 								; pop address
.828b	fa		plx				plx
.828c	20 93 82	jsr $8293			jsr 	AccessParameters 			; access and get first
.828f	20 ab 82	jsr $82ab			jsr 	AssemblerWriteByte 			; output it.
.8292	60		rts				rts
.8293					AccessParameters:
.8293	8d 20 07	sta $0720			sta 	ParamStart
.8296	8e 21 07	stx $0721			stx 	ParamStart+1
.8299	a9 01		lda #$01			lda 	#1
.829b					GetParameter:
.829b	5a		phy				phy
.829c	a8		tay				tay
.829d	ad 20 07	lda $0720			lda 	ParamStart
.82a0	85 36		sta $36				sta 	zTemp0
.82a2	ad 21 07	lda $0721			lda 	ParamStart+1
.82a5	85 37		sta $37				sta 	zTemp0+1
.82a7	b1 36		lda ($36),y			lda 	(zTemp0),y
.82a9	7a		ply				ply
.82aa	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/aswrite.asm

.82ab					AssemblerWriteByte:
.82ab	48		pha			pha
.82ac	ad 1f 07	lda $071f		lda 	AssemblerControl 				; check printing bytes ?
.82af	29 02		and #$02		and 	#2
.82b1	f0 1b		beq $82ce		beq 	_AWBNoPrint
.82b3	ad 1e 07	lda $071e		lda		AssemblerAddress+1 				; print address
.82b6	20 e9 82	jsr $82e9		jsr 	PrintHex
.82b9	ad 1d 07	lda $071d		lda		AssemblerAddress
.82bc	20 e9 82	jsr $82e9		jsr 	PrintHex
.82bf	a9 20		lda #$20		lda 	#' '
.82c1	20 7b a7	jsr $a77b		jsr 	EXTPrintCharacter
.82c4	68		pla			pla 									; print byte
.82c5	48		pha			pha
.82c6	20 e9 82	jsr $82e9		jsr 	PrintHex
.82c9	a9 0d		lda #$0d		lda 	#13
.82cb	20 7b a7	jsr $a77b		jsr 	EXTPrintCharacter
.82ce					_AWBNoPrint:
.82ce	ad 1d 07	lda $071d		lda		AssemblerAddress				; copy address to zTemp0
.82d1	85 36		sta $36			sta 	zTemp0
.82d3	ad 1e 07	lda $071e		lda		AssemblerAddress+1
.82d6	f0 0e		beq $82e6		beq 	_AWBRange
.82d8	85 37		sta $37			sta 	zTemp0+1
.82da	68		pla			pla 									; write byte out
.82db	92 36		sta ($36)		sta 	(zTemp0)
.82dd	ee 1d 07	inc $071d		inc 	AssemblerAddress 				; bump address
.82e0	d0 03		bne $82e5		bne 	_AWBNoCarry
.82e2	ee 1e 07	inc $071e		inc 	AssemblerAddress+1
.82e5					_AWBNoCarry:
.82e5	60		rts			rts
.82e6					_AWBRange:
.82e6	4c 12 a5	jmp $a512		jmp 	RangeError
.82e9					PrintHex:
.82e9	48		pha				pha
.82ea	4a		lsr a				lsr 	a
.82eb	4a		lsr a				lsr 	a
.82ec	4a		lsr a				lsr 	a
.82ed	4a		lsr a				lsr 	a
.82ee	20 f2 82	jsr $82f2			jsr 	_PrintNibble
.82f1	68		pla				pla
.82f2					_PrintNibble:
.82f2	29 0f		and #$0f			and 	#15
.82f4	c9 0a		cmp #$0a			cmp 	#10
.82f6	90 02		bcc $82fa			bcc 	_NoShift
.82f8	69 06		adc #$06			adc 	#6
.82fa					_NoShift:
.82fa	69 30		adc #$30			adc 	#48
.82fc	4c 7b a7	jmp $a77b			jmp 	EXTPrintCharacter

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/instruction.asm

.82ff					AssembleModeX:
.82ff	5a		phy				phy
.8300	ad 22 07	lda $0722			lda 	IsGroup1
.8303	f0 17		beq $831c			beq 	_AMXGroup2
.8305	8a		txa				txa 							; is it in group # 1
.8306	29 40		and #$40			and 	#AM_ISG1
.8308	f0 50		beq $835a			beq 	_AMXFail 				; no, give up.
.830a	8a		txa				txa 							; get back.
.830b	29 1f		and #$1f			and 	#$1F 					; this is now the offset.
.830d	e0 e0		cpx #$e0			cpx 	#AM_IMMEDIATE 			; if not immediate, we can continue.
.830f	d0 22		bne $8333			bne 	_AMXHaveInfo
.8311	ad 23 07	lda $0723			lda 	BaseOpcode 				; cannot store immediate.
.8314	c9 81		cmp #$81			cmp 	#$81
.8316	f0 42		beq $835a			beq 	_AMXFail
.8318	a9 08		lda #$08			lda 	#8 						; if immediate we use offset 8.
.831a	80 17		bra $8333			bra 	_AMXHaveInfo 			; odd design decision there.
.831c					_AMXGroup2:
.831c	8a		txa				txa 							; is it in group 2 ?
.831d	29 20		and #$20			and 	#AM_ISG2
.831f	f0 39		beq $835a			beq 	_AMXFail 				; no, give up.
.8321	8a		txa				txa 							; get the offset into Y
.8322	29 1f		and #$1f			and 	#$1F
.8324	4a		lsr a				lsr 	a 						; make it 0-7.
.8325	4a		lsr a				lsr  	a
.8326	a8		tay				tay
.8327	ad 24 07	lda $0724			lda 	ModeMask 				; shift the modemask left so you can check it against the requested offset
.832a					_AMXCheckOkay:
.832a	0a		asl a				asl 	a 						; shift modemask left enough times to check legitimate.
.832b	88		dey				dey
.832c	10 fc		bpl $832a			bpl 	_AMXCheckOkay
.832e	90 2a		bcc $835a			bcc 	_AMXFail 				; not allowed.
.8330	8a		txa				txa  							; get mask back
.8331	29 1f		and #$1f			and 	#$1F
.8333					_AMXHaveInfo:
.8333	e0 00		cpx #$00			cpx 	#$00 					; does it *require* an 8 bit operand
.8335	10 05		bpl $833c			bpl 	_AMXAnySize 			; checking bit 7, the zero page opcode flag.
.8337	ac 10 06	ldy $0610			ldy 	NSMantissa1 			; fail if it is outside range, e.g. the MSB is set.
.833a	d0 1e		bne $835a			bne 	_AMXFail
.833c					_AMXAnySize:
.833c	18		clc				clc 							; add offset to the base opcode
.833d	6d 23 07	adc $0723			adc 	BaseOpcode
.8340					_AMXOutputCode:
.8340	20 ab 82	jsr $82ab			jsr 	AssemblerWriteByte 		; write the opcode out.
.8343	e0 28		cpx #$28			cpx 	#AM_ACC 				; A mode (e.g. ASL A)
.8345	f0 10		beq $8357			beq 	_AMXExit
.8347	ad 08 06	lda $0608			lda 	NSMantissa0 				; write LSB operand
.834a	20 ab 82	jsr $82ab			jsr 	AssemblerWriteByte
.834d	e0 00		cpx #$00			cpx 	#$00 					; zeropage ?
.834f	30 06		bmi $8357			bmi 	_AMXExit
.8351	ad 10 06	lda $0610			lda 	NSMantissa1 			; write MSB operand
.8354	20 ab 82	jsr $82ab			jsr 	AssemblerWriteByte
.8357					_AMXExit:
.8357	7a		ply				ply
.8358	38		sec				sec
.8359	60		rts				rts
.835a					_AMXFail:
.835a	a0 00		ldy #$00			ldy 	#0
.835c					_AMXCheckOddities:
.835c	8a		txa				txa
.835d	d9 85 83	cmp $8385,y			cmp 	ExtraOpcode+2,y 		; match address mode
.8360	d0 16		bne $8378			bne 	_AMXCONext
.8362	b9 83 83	lda $8383,y			lda 	ExtraOpcode+0,y 		; do the base opcodes match
.8365	cd 23 07	cmp $0723			cmp 	BaseOpcode
.8368	d0 0e		bne $8378			bne 	_AMXCONext
.836a	e0 00		cpx #$00			cpx 	#$00 					; requires zero page ?
.836c	10 05		bpl $8373			bpl 	_AMXCONotZero
.836e	ad 10 06	lda $0610			lda 	NSMantissa1
.8371	d0 05		bne $8378			bne 	_AMXCONext
.8373					_AMXCONotZero:
.8373	b9 84 83	lda $8384,y			lda 	ExtraOpcode+1,y 		; get new opcode
.8376	80 c8		bra $8340			bra 	_AMXOutputCode 			; and assemble it
.8378					_AMXCONext:
.8378	c8		iny				iny
.8379	c8		iny				iny
.837a	c8		iny				iny
.837b	b9 83 83	lda $8383,y			lda 	ExtraOpcode+0,y 		; end of table
.837e	d0 dc		bne $835c			bne 	_AMXCheckOddities
.8380					_AMXCOFail:
.8380	7a		ply				ply
.8381	18		clc				clc
.8382	60		rts				rts
.8383					ExtraOpcode:
>8383	40 6c 01					.byte $40,$6c,AM_INDABS 	; jmp
>8386	40 7c 02					.byte $40,$7C,AM_INDABSX 	; jmp
>8389	a2 be 78					.byte $a2,$BE,AM_ABSY 		; ldx
>838c	a2 b6 80					.byte $a2,$B6,AM_ZEROY 		; ldx
>838f	82 96 80					.byte $82,$96,AM_ZEROY 		; stx
>8392	e2 1a 28					.byte $e2,$1a,AM_ACC 		; inc
>8395	c2 3a 28					.byte $c2,$3a,AM_ACC 		; dec
>8398	20 89 e0					.byte $20,$89,AM_IMMEDIATE 	; bit
>839b	60 9c 6c					.byte $60,$9c,AM_ABS 		; stz
>839e	60 9e 7c					.byte $60,$9e,AM_ABSX 		; stz
>83a1	00						.byte $00

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/label.asm

.83a2					LabelHere:
.83a2	c8		iny				iny 								; skip .
.83a3	a2 00		ldx #$00			ldx 	#0 							; get a term
.83a5	20 76 93	jsr $9376			jsr 	EvaluateTerm 				; get a term
.83a8	ad 00 06	lda $0600			lda 	NSStatus 					; needs to be an integer reference.
.83ab	c9 20		cmp #$20			cmp 	#NSTInteger+NSBIsReference
.83ad	d0 24		bne $83d3			bne 	_ALType
.83af	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy reference address to zTemp0
.83b2	85 36		sta $36				sta 	zTemp0
.83b4	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.83b7	85 37		sta $37				sta 	zTemp0+1
.83b9	5a		phy				phy 								; copy address in.
.83ba	a0 01		ldy #$01			ldy 	#1
.83bc	ad 1d 07	lda $071d			lda	 	AssemblerAddress
.83bf	92 36		sta ($36)			sta 	(zTemp0)
.83c1	ad 1e 07	lda $071e			lda	 	AssemblerAddress+1
.83c4	91 36		sta ($36),y			sta 	(zTemp0),y
.83c6	c8		iny				iny
.83c7	a9 00		lda #$00			lda 	#0
.83c9	91 36		sta ($36),y			sta 	(zTemp0),y
.83cb	c8		iny				iny
.83cc	91 36		sta ($36),y			sta 	(zTemp0),y
.83ce	c8		iny				iny
.83cf	91 36		sta ($36),y			sta 	(zTemp0),y
.83d1	7a		ply				ply
.83d2	60		rts				rts
.83d3					_ALType:
.83d3	4c 17 a5	jmp $a517			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/assembler/operands.asm

.83d6					TypeAndCalculateOperand:
.83d6	b1 30		lda ($30),y			lda 	(codePtr),y
.83d8	a2 28		ldx #$28			ldx 	#AM_ACC 					; ACC if : or EOL
.83da	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.83dc	f0 5b		beq $8439			beq 	_TACOExit
.83de	c9 80		cmp #$80			cmp 	#KWC_EOL
.83e0	f0 57		beq $8439			beq 	_TACOExit
.83e2	c8		iny				iny
.83e3	a2 e0		ldx #$e0			ldx 	#AM_IMMEDIATE
.83e5	c9 23		cmp #$23			cmp 	#KWD_HASH 					; if hash, then immediate - constant.
.83e7	f0 51		beq $843a			beq 	CalculateOperand
.83e9	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; if ( then check for indirection
.83eb	f0 1f		beq $840c			beq 	_TACOIndirect
.83ed	88		dey				dey 								; undo get of first character
.83ee	20 3a 84	jsr $843a			jsr 	CalculateOperand 			; get operand
.83f1	b1 30		lda ($30),y			lda 	(codePtr),y
.83f3	a2 e4		ldx #$e4			ldx 	#AM_ZEROPAGE 				; if not, try zero page (then absolute)
.83f5	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.83f7	d0 40		bne $8439			bne 	_TACOExit
.83f9	c8		iny				iny
.83fa	20 ce 9e	jsr $9ece			jsr 	TACOCheckXY 				; extract X,Y or 0 (neither) from the variable.
.83fd	a2 f4		ldx #$f4			ldx 	#AM_ZEROX 					; check for X
.83ff	c9 58		cmp #$58			cmp 	#'X'
.8401	f0 36		beq $8439			beq 	_TACOExit
.8403	a2 80		ldx #$80			ldx 	#AM_ZEROY 					; check for Y
.8405	c9 59		cmp #$59			cmp 	#'Y'
.8407	f0 30		beq $8439			beq 	_TACOExit
.8409					_TACOSyntax:
.8409	4c 0d a5	jmp $a50d			jmp 	SyntaxError
.840c					_TACOIndirect:
.840c	20 3a 84	jsr $843a			jsr 	CalculateOperand 			; get the operand
.840f	b1 30		lda ($30),y			lda 	(codePtr),y
.8411	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if , then it must be ,X)
.8413	f0 17		beq $842c			beq 	_TACOIndX
.8415	20 2b 9f	jsr $9f2b			jsr 	CheckRightBracket  			; otherwise must be ) or ),Y
.8418	b1 30		lda ($30),y			lda 	(codePtr),y
.841a	a2 d1		ldx #$d1			ldx 	#AM_IND
.841c	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not comma then exit with (xx)
.841e	d0 19		bne $8439			bne 	_TACOExit
.8420	c8		iny				iny
.8421	20 ce 9e	jsr $9ece			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.8424	c9 59		cmp #$59			cmp 	#'Y' 						; check Y
.8426	d0 e1		bne $8409			bne 	_TACOSyntax
.8428	a2 d0		ldx #$d0			ldx 	#AM_INDY
.842a	80 0d		bra $8439			bra 	_TACOExit
.842c					_TACOIndX:
.842c	c8		iny				iny
.842d	20 ce 9e	jsr $9ece			jsr 	TACOCheckXY 				; get the next one as X/Y/0
.8430	c9 58		cmp #$58			cmp 	#'X' 						; check X
.8432	d0 d5		bne $8409			bne 	_TACOSyntax
.8434	20 2b 9f	jsr $9f2b			jsr 	CheckRightBracket			; check )
.8437	a2 c0		ldx #$c0			ldx 	#AM_INDX
.8439					_TACOExit:
.8439	60		rts				rts
.843a					CalculateOperand:
.843a	48		pha				pha
.843b	da		phx				phx
.843c	a2 00		ldx #$00			ldx 	#0 							; get 16 bit integer in Slot 0
.843e	20 7b 97	jsr $977b			jsr 	Evaluate16BitInteger
.8441	fa		plx				plx
.8442	68		pla				pla
.8443	60		rts				rts
.9ece					TACOCheckXY:
.9ece	b1 30		lda ($30),y			lda 	(codePtr),y
.9ed0	29 c0		and #$c0			and 	#$C0 						; check it is an identifier reference.
.9ed2	c9 40		cmp #$40			cmp 	#$40
.9ed4	d0 21		bne $9ef7			bne 	_TCXYFail
.9ed6	b1 30		lda ($30),y			lda 	(codePtr),y
.9ed8	18		clc				clc
.9ed9	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.9edb	85 37		sta $37				sta 	zTemp0+1
.9edd	c8		iny				iny
.9ede	b1 30		lda ($30),y			lda 	(codePtr),y
.9ee0	c8		iny				iny
.9ee1	85 36		sta $36				sta 	zTemp0
.9ee3	5a		phy				phy 								; save position
.9ee4	a0 02		ldy #$02			ldy 	#2 							; type is integer ?
.9ee6	b1 36		lda ($36),y			lda 	(zTemp0),y
.9ee8	d0 0c		bne $9ef6			bne 	_TCXYPopFail
.9eea	a0 08		ldy #$08			ldy 	#8 							; get first character, should have bit 7 set as also last.
.9eec	b1 36		lda ($36),y			lda 	(zTemp0),y
.9eee	c9 d8		cmp #$d8			cmp 	#'X'+$80 					; should be X or Y
.9ef0	f0 08		beq $9efa			beq 	_TCXYFound
.9ef2	c9 d9		cmp #$d9			cmp 	#'Y'+$80
.9ef4	f0 04		beq $9efa			beq 	_TCXYFound
.9ef6					_TCXYPopFail:
.9ef6	7a		ply				ply
.9ef7					_TCXYFail:
.9ef7	a9 00		lda #$00			lda 	#0
.9ef9	60		rts				rts
.9efa					_TCXYFound:
.9efa	7a		ply				ply 								; restore position
.9efb	29 7f		and #$7f			and 	#$7F 						; throw bit 7
.9efd	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/editor.asm

.8444					EditProgramCode:
.8444	ad 26 07	lda $0726			lda 	TokenLineNumber 			; find the line.
.8447	ae 27 07	ldx $0727			ldx 	TokenLineNumber+1
.844a	20 9b 9e	jsr $9e9b			jsr 	MemorySearch
.844d	90 05		bcc $8454			bcc 	_EPCNoDelete 				; reached the end don't delete
.844f	d0 03		bne $8454			bne 	_EPCNoDelete 				; found slot but didn't match, no delete
.8451	20 c5 a7	jsr $a7c5			jsr 	MemoryDeleteLine 			; delete the line
.8454					_EPCNoDelete:
.8454	ad 28 07	lda $0728			lda 	TokenBuffer 				; buffer empty
.8457	c9 80		cmp #$80			cmp 	#KWC_EOL
.8459	f0 0d		beq $8468			beq 	_EPCNoInsert
.845b	ad 26 07	lda $0726			lda 	TokenLineNumber 			; find the line - it cannot exist.
.845e	ae 27 07	ldx $0727			ldx 	TokenLineNumber+1 			; so this can't fail, it returns some point in the code.
.8461	20 9b 9e	jsr $9e9b			jsr 	MemorySearch
.8464	18		clc				clc 								; insert at this point.
.8465	20 fc a7	jsr $a7fc			jsr 	MemoryInsertLine 			; insert the line
.8468					_EPCNoInsert:
.8468	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/cli/warmstart.asm

.8469					WarmStart:
.8469	a2 ff		ldx #$ff			ldx 	#$FF
.846b	9a		txs				txs
.846c	20 91 a7	jsr $a791			jsr 	EXTInputLine 				; get line to lineBuffer
.846f	20 fa 9b	jsr $9bfa			jsr 	TokeniseLine 				; tokenise the line
.8472	ad 26 07	lda $0726			lda 	TokenLineNumber 			; line number ?
.8475	0d 27 07	ora $0727			ora 	TokenLineNumber+1
.8478	d0 17		bne $8491			bne 	_WSEditCode 				; if so,edit code.
.847a	9c 25 07	stz $0725			stz 	TokenOffset 				; zero offset, meaning it only runs one line.
.847d	a9 25		lda #$25			lda 	#((TokenOffset) & $FF)
.847f	85 30		sta $30				sta 	codePtr
.8481	a9 07		lda #$07			lda 	#((TokenOffset) >> 8)
.8483	85 31		sta $31				sta 	codePtr+1
.8485	ad 28 07	lda $0728			lda 	TokenBuffer 				; nothing to run
.8488	c9 80		cmp #$80			cmp 	#KWC_EOL
.848a	f0 dd		beq $8469			beq 	WarmStart
.848c	20 eb 89	jsr $89eb			jsr 	RUNCodePointerLine 			; execute that line.
.848f	80 d8		bra $8469			bra 	WarmStart
.8491					_WSEditCode:
.8491	20 44 84	jsr $8444			jsr 	EditProgramCode
.8494	20 d6 84	jsr $84d6			jsr 	ClearCommand
.8497	80 d0		bra $8469			bra 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assemble.asm

.8499					AssembleCommand:
.8499	a2 00		ldx #$00			ldx 	#0
.849b	20 7b 97	jsr $977b			jsr 	Evaluate16BitInteger 		; start address
.849e	ad 08 06	lda $0608			lda 	NSMantissa0
.84a1	8d 1d 07	sta $071d			sta 	AssemblerAddress
.84a4	ad 10 06	lda $0610			lda 	NSMantissa1
.84a7	8d 1e 07	sta $071e			sta 	AssemblerAddress+1
.84aa	20 33 9f	jsr $9f33			jsr 	CheckComma
.84ad	20 87 97	jsr $9787			jsr 	Evaluate8BitInteger 		; options
.84b0	ad 08 06	lda $0608			lda 	NSMantissa0
.84b3	8d 1f 07	sta $071f			sta 	AssemblerControl
.84b6	60		rts				rts
.84b7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/assert.asm

.84b8					AssertCommand:
.84b8	a2 00		ldx #$00			ldx 	#0
.84ba	20 66 97	jsr $9766			jsr 	EvaluateInteger 			; the assert test
.84bd	20 1f 98	jsr $981f			jsr 	NSMIsZero 					; exit if result is non zero.
.84c0	d0 05		bne $84c7			bne 	_ACExit
.84c2	a9 0a		lda #$0a		lda	#10
.84c4	4c 9c 8c	jmp $8c9c		jmp	ErrorHandler
.84c7					_ACExit:
.84c7	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/call.asm

.84c8					CallCommand:
.84c8	a2 00		ldx #$00			ldx 	#0
.84ca	20 7b 97	jsr $977b			jsr 	Evaluate16BitInteger
.84cd	ad 10 06	lda $0610			lda 	NSMantissa1
.84d0	8d 09 06	sta $0609			sta 	NSMantissa0+1
.84d3	6c 08 06	jmp ($0608)			jmp 	(NSMantissa0)

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/clear.asm

.84d6					ClearCommand:
.84d6	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.84d8	85 36		sta $36				sta 	0+zTemp0
.84da	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.84dc	85 37		sta $37				sta 	1+zTemp0
.84de					_ClearZeroLoop:
.84de	b2 36		lda ($36)			lda 	(zTemp0) 					; end of variables
.84e0	f0 24		beq $8506			beq 	_ClearZeroEnd
.84e2	a0 03		ldy #$03			ldy 	#3 							; erase the variables
.84e4	a9 00		lda #$00			lda 	#0
.84e6					_ClearOneVariable:
.84e6	91 36		sta ($36),y			sta 	(zTemp0),y
.84e8	c8		iny				iny
.84e9	c0 08		cpy #$08			cpy 	#8
.84eb	d0 f9		bne $84e6			bne 	_ClearOneVariable
.84ed	a0 02		ldy #$02			ldy 	#2 							; has it been marked procedure
.84ef	b1 36		lda ($36),y			lda 	(zTemp0),y
.84f1	c9 18		cmp #$18			cmp 	#NSTProcedure
.84f3	d0 04		bne $84f9			bne 	_ClearNotProcedure
.84f5	a9 04		lda #$04			lda 	#NSTInteger+NSBIsArray 		; set it back to an integer array
.84f7	91 36		sta ($36),y			sta 	(zTemp0),y
.84f9					_ClearNotProcedure:
.84f9	18		clc				clc 								; go to the next variable
.84fa	b2 36		lda ($36)			lda 	(zTemp0)
.84fc	65 36		adc $36				adc 	zTemp0
.84fe	85 36		sta $36				sta 	zTemp0
.8500	90 dc		bcc $84de			bcc 	_ClearZeroLoop
.8502	e6 37		inc $37				inc 	zTemp0+1
.8504	80 d8		bra $84de			bra 	_ClearZeroLoop
.8506					_ClearZeroEnd:
.8506	18		clc				clc
.8507	a5 36		lda $36				lda 	zTemp0
.8509	69 01		adc #$01			adc 	#1
.850b	8d 0c 07	sta $070c			sta 	lowMemPtr
.850e	a5 37		lda $37				lda 	zTemp0+1
.8510	69 00		adc #$00			adc 	#0
.8512	8d 0d 07	sta $070d			sta 	lowMemPtr+1
.8515	20 a2 98	jsr $98a2			jsr 	StackReset
.8518	20 0d a7	jsr $a70d			jsr 	StringSystemInitialise
.851b	20 bc 8b	jsr $8bbc			jsr 	ProcedureScan
.851e	20 a7 89	jsr $89a7			jsr 	Command_Restore
.8521	9c 1d 07	stz $071d			stz 	AssemblerAddress
.8524	9c 1e 07	stz $071e			stz 	AssemblerAddress+1
.8527	9c 1f 07	stz $071f			stz 	AssemblerControl
.852a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/data.asm

.852b					Command_Data:
.852b	a9 3a		lda #$3a			lda 	#KWD_COLON 					; advance to colon/EOL
.852d	a2 80		ldx #$80			ldx 	#KWC_EOL
.852f	20 0e 8c	jsr $8c0e			jsr 	ScanForward
.8532	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/dim.asm

.8533					DimCommand:
.8533	b1 30		lda ($30),y			lda 	(codePtr),y
.8535	29 c0		and #$c0			and 	#$C0
.8537	c9 40		cmp #$40			cmp 	#$40
.8539	d0 7a		bne $85b5			bne 	_DCSyntax
.853b	b1 30		lda ($30),y			lda 	(codePtr),y
.853d	18		clc				clc
.853e	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8540	85 3f		sta $3f				sta 	zaTemp+1
.8542	c8		iny				iny
.8543	b1 30		lda ($30),y			lda 	(codePtr),y
.8545	c8		iny				iny
.8546	85 3e		sta $3e				sta 	zaTemp
.8548	5a		phy				phy
.8549	a0 02		ldy #$02			ldy 	#2 						; read type byte
.854b	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.854d	29 18		and #$18			and 	#NSBTypeMask 			; check it's not a procedure
.854f	c9 18		cmp #$18			cmp 	#NSTProcedure
.8551	f0 62		beq $85b5			beq 	_DCSyntax
.8553	b1 3e		lda ($3e),y			lda 	(zaTemp),y 				; check it's an array
.8555	29 04		and #$04			and 	#NSBIsArray
.8557	f0 64		beq $85bd			beq 	_DCType
.8559	a0 04		ldy #$04			ldy 	#4 						; check not already defined
.855b	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.855d	d0 59		bne $85b8			bne 	_DCRedefine
.855f	7a		ply				ply
.8560	20 c0 85	jsr $85c0			jsr 	_DCGetSize 				; get array size, check it.
.8563	5a		phy				phy
.8564	a0 05		ldy #$05			ldy 	#5 						; store in first array size slot
.8566	91 3e		sta ($3e),y			sta 	(zaTemp),y 				; second will be zero.
.8568	7a		ply				ply 							; is there a second (e.g. ,x)
.8569	b1 30		lda ($30),y			lda 	(codePtr),y
.856b	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.856d	d0 0a		bne $8579			bne 	_DCOneDimension
.856f	c8		iny				iny 							; skip comma
.8570	20 c0 85	jsr $85c0			jsr 	_DCGetSize 				; get 2nd array size
.8573	5a		phy				phy
.8574	a0 06		ldy #$06			ldy 	#6 						; store in 2nd array size
.8576	91 3e		sta ($3e),y			sta 	(zaTemp),y
.8578	7a		ply				ply
.8579					_DCOneDimension:
.8579	5a		phy				phy 							; save position
.857a	a0 05		ldy #$05			ldy 	#5 						; dimensions + 1 in AX (as zero based)
.857c	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.857e	aa		tax				tax
.857f	c8		iny				iny
.8580	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8582	e8		inx				inx 							; bump them.
.8583	1a		inc a				inc 	a
.8584	20 ad a3	jsr $a3ad			jsr 	Multiply8x8 			; work out the total number of elements -> zTemp0
.8587	a5 37		lda $37				lda 	zTemp0+1 				; don't allow more than 8192 elements whatever
.8589	29 e0		and #$e0			and 	#$E0
.858b	d0 23		bne $85b0			bne 	_DCSize
.858d	a0 02		ldy #$02			ldy 	#2 						; get base type
.858f	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.8591	20 ce 85	jsr $85ce			jsr 	ScaleByBaseType 		; scale by base type
.8594	a5 36		lda $36				lda 	zTemp0
.8596	a6 37		ldx $37				ldx 	zTemp0+1
.8598	20 25 95	jsr $9525			jsr 	AllocateXABytes 		; allocate memory
.859b	a0 03		ldy #$03			ldy 	#3 						; copy into the address.
.859d	91 3e		sta ($3e),y			sta 	(zaTemp),y
.859f	c8		iny				iny
.85a0	8a		txa				txa
.85a1	91 3e		sta ($3e),y			sta 	(zaTemp),y
.85a3	7a		ply				ply 							; get position back
.85a4	20 2b 9f	jsr $9f2b			jsr 	CheckRightBracket 		; check )
.85a7	b1 30		lda ($30),y			lda 	(codePtr),y
.85a9	c8		iny				iny 							; consume in case
.85aa	c9 2c		cmp #$2c			cmp 	#KWD_COMMA		 		; if so do another DIM.
.85ac	f0 85		beq $8533			beq 	DimCommand
.85ae	88		dey				dey 							; undo consume
.85af	60		rts				rts
.85b0					_DCSize:
.85b0	a9 16		lda #$16		lda	#22
.85b2	4c 9c 8c	jmp $8c9c		jmp	ErrorHandler
.85b5					_DCSyntax:
.85b5	4c 0d a5	jmp $a50d			jmp 	SyntaxError
.85b8					_DCRedefine:
.85b8	a9 15		lda #$15		lda	#21
.85ba	4c 9c 8c	jmp $8c9c		jmp	ErrorHandler
.85bd					_DCType:
.85bd	4c 17 a5	jmp $a517			jmp 	TypeError
.85c0					_DCGetSize:
.85c0	a2 00		ldx #$00			ldx 	#0 						; get first index.
.85c2	20 87 97	jsr $9787			jsr 	Evaluate8BitInteger 	; get array dimension
.85c5	c9 00		cmp #$00			cmp 	#0 						; must be 1-254
.85c7	f0 e7		beq $85b0			beq 	_DCSize
.85c9	c9 fe		cmp #$fe			cmp 	#254
.85cb	f0 e3		beq $85b0			beq 	_DCSize
.85cd	60		rts				rts
.85ce					ScaleByBaseType:
.85ce	29 10		and #$10			and 	#NSBIsString 			; is it string
.85d0	d0 19		bne $85eb			bne 	_SBBTString
.85d2	a5 37		lda $37				lda 	zTemp0+1 				; push value on stack
.85d4	48		pha				pha
.85d5	a5 36		lda $36				lda 	zTemp0
.85d7	48		pha				pha
.85d8	06 36		asl $36				asl 	zTemp0 					; x 2
.85da	26 37		rol $37				rol 	zTemp0+1
.85dc	06 36		asl $36				asl 	zTemp0 					; x 4
.85de	26 37		rol $37				rol 	zTemp0+1
.85e0	68		pla				pla 							; add stacked value = x 5
.85e1	65 36		adc $36				adc 	zTemp0
.85e3	85 36		sta $36				sta 	zTemp0
.85e5	68		pla				pla
.85e6	65 37		adc $37				adc 	zTemp0+1
.85e8	85 37		sta $37				sta 	zTemp0+1
.85ea	60		rts				rts
.85eb					_SBBTString:
.85eb	06 36		asl $36				asl 	zTemp0
.85ed	26 37		rol $37				rol 	zTemp0+1
.85ef	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/end.asm

.85f0					EndCommand:
.85f0	4c 69 84	jmp $8469			jmp 	WarmStart

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/for.asm

.85f3					ForCommand:
.85f3	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; allocate 18 bytes on the return stack.
.85f5	20 42 98	jsr $9842			jsr 	StackOpen
.85f8	a2 00		ldx #$00			ldx 	#0
.85fa	20 76 93	jsr $9376			jsr 	EvaluateTerm
.85fd	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8600	c9 20		cmp #$20			cmp 	#NSBIsReference+NSTInteger 	; do we have an integer 4 byte reference.
.8602	d0 49		bne $864d			bne		_FCError
.8604	a9 3d		lda #$3d			lda 	#KWD_EQUAL 					; =
.8606	20 3b 9f	jsr $9f3b			jsr 	CheckNextA
.8609	e8		inx				inx
.860a	20 66 97	jsr $9766			jsr 	EvaluateInteger 			; <from> in +1
.860d	b1 30		lda ($30),y			lda 	(codePtr),y
.860f	c8		iny				iny 								; consume it
.8610	48		pha				pha 								; save on stack for later
.8611	c9 a5		cmp #$a5			cmp 	#KWD_DOWNTO
.8613	f0 04		beq $8619			beq 	_FCNoSyntax
.8615	c9 af		cmp #$af			cmp 	#KWD_TO
.8617	d0 37		bne $8650			bne 	_FCSyntaxError
.8619					_FCNoSyntax:
.8619	e8		inx				inx
.861a	20 66 97	jsr $9766			jsr 	EvaluateInteger
.861d	20 81 98	jsr $9881			jsr 	STKSaveCodePosition 		; save loop back position
.8620	68		pla				pla 								; restore DOWNTO or TO
.8621	5a		phy				phy 								; save Y on the stack
.8622	49 a5		eor #$a5			eor 	#KWD_DOWNTO 				; 0 if DOWNTO, #0 if TO
.8624	f0 02		beq $8628			beq 	_FCNotDownTo
.8626	a9 02		lda #$02			lda 	#2
.8628					_FCNotDownTo:
.8628	3a		dec a				dec 	a 							; 255 if DOWNTO, 1 if TO
.8629	a0 10		ldy #$10			ldy 	#16
.862b	91 34		sta ($34),y			sta 	(basicStack),y 				; copy that out to the Basic Stack.
.862d	a0 06		ldy #$06			ldy 	#6
.862f	ad 08 06	lda $0608			lda 	NSMantissa0
.8632	91 34		sta ($34),y			sta 	(basicStack),y
.8634	ad 10 06	lda $0610			lda 	NSMantissa1
.8637	c8		iny				iny
.8638	91 34		sta ($34),y			sta 	(basicStack),y
.863a	a0 08		ldy #$08			ldy 	#8 							; set initial index value
.863c	a2 01		ldx #$01			ldx 	#1
.863e	20 53 86	jsr $8653			jsr 	FCIntegerToStack
.8641	a0 0c		ldy #$0c			ldy 	#12 						; set the terminal value
.8643	a2 02		ldx #$02			ldx 	#2
.8645	20 53 86	jsr $8653			jsr 	FCIntegerToStack
.8648	20 73 86	jsr $8673			jsr 	CopyIndexToReference
.864b	7a		ply				ply 								; restore position
.864c	60		rts				rts
.864d					_FCError:
.864d	4c 17 a5	jmp $a517			jmp 	TypeError
.8650					_FCSyntaxError:
.8650	4c 0d a5	jmp $a50d			jmp 	SyntaxError
.8653					FCIntegerToStack:
.8653	3c 00 06	bit $0600,x			bit 	NSStatus,x 					; is the value negative
.8656	10 03		bpl $865b			bpl	 	_FCNotNegative
.8658	20 a4 97	jsr $97a4			jsr 	NSMNegateMantissa 			; if so 2's complement the mantissa
.865b					_FCNotNegative:
.865b	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy out to the basic stack
.865e	91 34		sta ($34),y			sta 	(basicStack),y
.8660	c8		iny				iny
.8661	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8664	91 34		sta ($34),y			sta 	(basicStack),y
.8666	c8		iny				iny
.8667	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.866a	91 34		sta ($34),y			sta 	(basicStack),y
.866c	c8		iny				iny
.866d	bd 20 06	lda $0620,x			lda 	NSMantissa3,x
.8670	91 34		sta ($34),y			sta 	(basicStack),y
.8672	60		rts				rts
.8673					CopyIndexToReference:
.8673	5a		phy				phy
.8674	a0 06		ldy #$06			ldy 	#6 							; copy address-8 to write to zTemp0
.8676	38		sec				sec 								; (because we copy from offset 8)
.8677	b1 34		lda ($34),y			lda 	(basicStack),y
.8679	e9 08		sbc #$08			sbc 	#8
.867b	85 36		sta $36				sta 	zTemp0
.867d	c8		iny				iny
.867e	b1 34		lda ($34),y			lda 	(basicStack),y
.8680	e9 00		sbc #$00			sbc 	#0
.8682	85 37		sta $37				sta 	zTemp0+1
.8684	a2 04		ldx #$04			ldx 	#4 							; this is the copy counter/
.8686	a0 0b		ldy #$0b			ldy 	#8+3 		 				; the MSB of the mantissa
.8688	b1 34		lda ($34),y			lda 	(basicStack),y
.868a	0a		asl a				asl 	a 							; into carry
.868b	a0 08		ldy #$08			ldy 	#8 							; where to copy from.
.868d	90 14		bcc $86a3			bcc 	_CITRNormal
.868f	38		sec				sec
.8690					_CITRNegative:
.8690	a9 00		lda #$00			lda 	#0
.8692	f1 34		sbc ($34),y			sbc 	(basicStack),y
.8694	91 36		sta ($36),y			sta 	(zTemp0),y
.8696	c8		iny				iny
.8697	ca		dex				dex
.8698	d0 f6		bne $8690			bne 	_CITRNegative
.869a	88		dey				dey 								; look at MSB of mantissa
.869b	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set the MSB as negative packed.
.869d	09 80		ora #$80			ora 	#$80
.869f	91 36		sta ($36),y			sta 	(zTemp0),y
.86a1	7a		ply				ply
.86a2	60		rts				rts
.86a3					_CITRNormal:
.86a3	b1 34		lda ($34),y			lda 	(basicStack),y 				; copy without negation.
.86a5	91 36		sta ($36),y			sta 	(zTemp0),y
.86a7	c8		iny				iny
.86a8	ca		dex				dex
.86a9	d0 f8		bne $86a3			bne 	_CITRNormal
.86ab	7a		ply				ply 								; and exit.
.86ac	60		rts				rts
.86ad					NextCommand:
.86ad	a9 d9		lda #$d9			lda 	#STK_FOR+9 					; check FOR is TOS
.86af	a2 11		ldx #$11			ldx 	#ERRID_FOR 					; this error
.86b1	20 69 98	jsr $9869			jsr 	StackCheckFrame
.86b4	5a		phy				phy
.86b5	a0 10		ldy #$10			ldy 	#16 						; get the step count
.86b7	b1 34		lda ($34),y			lda 	(basicStack),y
.86b9	85 36		sta $36				sta 	zTemp0 						; this is the sign extend
.86bb	30 02		bmi $86bf			bmi 	_NCStepNeg
.86bd	64 36		stz $36				stz 	zTemp0 						; which is 0 or 255
.86bf					_NCStepNeg:
.86bf	a0 08		ldy #$08			ldy 	#8 							; offset to bump
.86c1	a2 04		ldx #$04			ldx 	#4 							; count to bump
.86c3	18		clc				clc
.86c4					_NCBump:
.86c4	71 34		adc ($34),y			adc 	(basicStack),y 				; add it
.86c6	91 34		sta ($34),y			sta 	(basicStack),y
.86c8	a5 36		lda $36				lda 	zTemp0 						; get sign extend for next time.
.86ca	c8		iny				iny 								; next byte
.86cb	ca		dex				dex 								; do four times
.86cc	d0 f6		bne $86c4			bne 	_NCBump
.86ce	20 73 86	jsr $8673			jsr		CopyIndexToReference		; copy it to the reference variable.
.86d1	a0 10		ldy #$10			ldy 	#16 						; get step count again
.86d3	b1 34		lda ($34),y			lda 	(basicStack),y
.86d5	0a		asl a				asl 	a 							; sign bit to carry
.86d6	a9 0c		lda #$0c			lda 	#12 						; offset of LHS = terminal offset
.86d8	85 38		sta $38				sta 	zTemp1
.86da	90 02		bcc $86de			bcc 	_NCCompRev 					; use if step is +ve
.86dc	a9 08		lda #$08			lda 	#8 							; now the LHS = index value
.86de					_NCCompRev:
.86de	85 38		sta $38				sta 	zTemp1 						; so zTemp0 is the index for LHS
.86e0	49 04		eor #$04			eor 	#(8^12) 					; and zTemp0+1 is the index for RHS
.86e2	85 39		sta $39				sta 	zTemp1+1
.86e4	a2 04		ldx #$04			ldx 	#4 							; bytes to compare
.86e6	38		sec				sec
.86e7					_NCCompare:
.86e7	a4 38		ldy $38				ldy 	zTemp1 						; do compare using the two indices
.86e9	b1 34		lda ($34),y			lda 	(basicStack),y
.86eb	a4 39		ldy $39				ldy 	zTemp1+1
.86ed	f1 34		sbc ($34),y			sbc 	(basicStack),y
.86ef	e6 38		inc $38				inc 	zTemp1 						; bump the indices (inc,dex do not change C or V)
.86f1	e6 39		inc $39				inc 	zTemp1+1
.86f3	ca		dex				dex 								; do it 4 times.
.86f4	d0 f1		bne $86e7			bne 	_NCCompare
.86f6	50 02		bvc $86fa			bvc 	_NCNoOverflow 				; convert to signed comparison
.86f8	49 80		eor #$80			eor 	#$80
.86fa					_NCNoOverflow:
.86fa	7a		ply				ply 								; restore Y position
.86fb	0a		asl a				asl 	a 							; is bit 7 set.
.86fc	90 04		bcc $8702			bcc 	_NCLoopback 				; if no , >= so loop back
.86fe	20 5b 98	jsr $985b			jsr 	StackClose 					; exit the loop
.8701	60		rts				rts
.8702					_NCLoopBack:
.8702	20 92 98	jsr $9892			jsr 	STKLoadCodePosition 		; loop back
.8705	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/gosub.asm

.8706					Command_GOSUB:
.8706	a2 00		ldx #$00			ldx 	#0
.8708	20 7b 97	jsr $977b			jsr 	Evaluate16BitInteger 		; line number in Stack.0
.870b	a9 e3		lda #$e3			lda 	#STK_GOSUB+3
.870d	20 42 98	jsr $9842			jsr 	StackOpen 					; create frame
.8710	20 81 98	jsr $9881			jsr 	STKSaveCodePosition 		; save current position
.8713	4c 29 87	jmp $8729			jmp 	GotoStackX
.8716					Command_RETURN:
.8716	a9 e0		lda #$e0			lda 	#STK_GOSUB 					; check TOS is this
.8718	a2 0e		ldx #$0e			ldx 	#ERRID_GOSUB 				; this error
.871a	20 69 98	jsr $9869			jsr 	StackCheckFrame
.871d	20 92 98	jsr $9892			jsr 	STKLoadCodePosition 		; restore code position
.8720	20 5b 98	jsr $985b			jsr 	StackClose
.8723	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/goto.asm

.8724					GotoCommand:
.8724	a2 00		ldx #$00			ldx 	#0 							; GOTO where
.8726	20 7b 97	jsr $977b			jsr 	Evaluate16BitInteger
.8729					GotoStackX:
.8729	bd 10 06	lda $0610,x			lda  	NSMantissa1,x 				; put line # in XA. I'll keep this even though
.872c	48		pha				pha 								; it is slightly inefficient, just in cases.
.872d	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.8730	fa		plx				plx
.8731	20 9b 9e	jsr $9e9b			jsr 	MemorySearch 				; transfer to line number AX.
.8734	90 05		bcc $873b			bcc 	_GotoError 					; not found, off end.
.8736	d0 03		bne $873b			bne 	_GotoError 					; not found exactly
.8738	4c e4 89	jmp $89e4			jmp 	RunNewLine 					; and go straight to new line code.
.873b					_GotoError:
.873b	a9 0d		lda #$0d		lda	#13
.873d	4c 9c 8c	jmp $8c9c		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/if.asm

.8740					IfCommand:
.8740	a2 00		ldx #$00			ldx 	#0 							; If what.
.8742	20 43 97	jsr $9743			jsr 	EvaluateNumber
.8745	b1 30		lda ($30),y			lda 	(codePtr),y
.8747	c9 9e		cmp #$9e			cmp 	#KWD_THEN  					; could be THEN <stuff> or GOTO
.8749	d0 0a		bne $8755			bne 	_IFStructured
.874b	c8		iny				iny 								; consume THEN
.874c	20 1f 98	jsr $981f			jsr 	NSMIsZero 					; is it zero
.874f	f0 01		beq $8752			beq 	_IfFail 					; if fail, go to next line
.8751	60		rts				rts 								; if THEN just continue
.8752					_IfFail:
.8752	4c 45 8a	jmp $8a45			jmp 	EOLCommand
.8755					_IfStructured:
.8755	20 1f 98	jsr $981f			jsr 	NSMIsZero 					; is it zero
.8758	d0 07		bne $8761			bne 	_IfExit 					; if not, then continue normally.
.875a	a9 a6		lda #$a6			lda 	#KWD_ELSE 					; look for else/endif
.875c	a2 9b		ldx #$9b			ldx 	#KWD_ENDIF
.875e	20 0e 8c	jsr $8c0e			jsr 	ScanForward 				; and run from there/
.8761					_IfExit:
.8761	60		rts				rts
.8762					ElseCode:
.8762	a9 9b		lda #$9b			lda 	#KWD_ENDIF 					; else is only run after the if clause succeeds
.8764	aa		tax				tax 								; so just go to the structure exit
.8765	20 0e 8c	jsr $8c0e			jsr 	ScanForward
.8768	60		rts				rts
.8769					EndIf:
.8769	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/let.asm

.876a					LetCommand:
.876a	a2 00		ldx #$00			ldx 	#0
.876c	ad 8d 90	lda $908d			lda 	PrecedenceLevel+"*"			; precedence > this
.876f	20 a7 90	jsr $90a7			jsr 	EvaluateExpressionAtPrecedence
.8772	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; is it a reference to an array
.8775	c9 38		cmp #$38			cmp		#NSTProcedure+NSBIsReference
.8777	f0 0e		beq $8787			beq 	_LetGoProc 					; it's a procedure call.
.8779	a9 3d		lda #$3d			lda 	#"=" 						; check =
.877b	20 3b 9f	jsr $9f3b			jsr 	CheckNextA
.877e	e8		inx				inx 								; RHS
.877f	20 3a 97	jsr $973a			jsr 	EvaluateValue
.8782	ca		dex				dex
.8783	20 8a 87	jsr $878a			jsr 	AssignVariable
.8786	60		rts				rts
.8787					_LetGoProc:
.8787	4c ee 88	jmp $88ee			jmp 	CallProcedure
.878a					AssignVariable:
.878a	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check the string/number type bits match
.878d	48		pha				pha 								; save a copy
.878e	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.8791	29 10		and #$10			and 	#NSBIsString
.8793	d0 0b		bne $87a0			bne 	_ASError
.8795	68		pla				pla 								; get back
.8796	29 10		and #$10			and 	#NSBIsString 				; check type
.8798	d0 03		bne $879d			bne 	_ASString
.879a	4c e2 90	jmp $90e2			jmp 	AssignNumber
.879d					_ASString:
.879d	4c 50 91	jmp $9150			jmp 	AssignString
.87a0					_ASError:
.87a0	4c 17 a5	jmp $a517			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/list.asm

.87a3					Command_List:
.87a3	9c 0c 06	stz $060c			stz		NSMantissa0+4				; set the lower (slot 4) to 0 and upper (slot 7) to $FFFF
.87a6	9c 14 06	stz $0614			stz 	NSMantissa1+4
.87a9	a9 ff		lda #$ff			lda 	#$FF
.87ab	8d 0f 06	sta $060f			sta 	NSMantissa0+7
.87ae	8d 17 06	sta $0617			sta 	NSMantissa1+7
.87b1	b1 30		lda ($30),y			lda 	(codePtr),y
.87b3	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.87b5	f0 1e		beq $87d5			beq 	_CLSecond
.87b7	20 33 88	jsr $8833			jsr 	CLIsDigit 					; if not digit, list all
.87ba	b0 24		bcs $87e0			bcs 	_CLStart
.87bc	a2 04		ldx #$04			ldx 	#4 							; get 1st range into slot 4
.87be	20 7b 97	jsr $977b			jsr 	Evaluate16BitInteger
.87c1	b1 30		lda ($30),y			lda 	(codePtr),y
.87c3	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.87c5	f0 0e		beq $87d5			beq 	_CLSecond 					; if so go get it
.87c7	ad 0c 06	lda $060c			lda 	NSMantissa0+4 				; copy 4->7
.87ca	8d 0f 06	sta $060f			sta 	NSMantissa0+7
.87cd	ad 14 06	lda $0614			lda 	NSMantissa1+4
.87d0	8d 17 06	sta $0617			sta 	NSMantissa1+7
.87d3	80 0b		bra $87e0			bra 	_CLStart
.87d5					_CLSecond:
.87d5	c8		iny				iny 								; consume comma
.87d6	20 33 88	jsr $8833			jsr 	CLIsDigit 					; digit found
.87d9	b0 05		bcs $87e0			bcs 	_CLStart 					; if not, continue listing
.87db	a2 07		ldx #$07			ldx 	#7 							; load 2nd range into slot 7
.87dd	20 7b 97	jsr $977b			jsr 	Evaluate16BitInteger
.87e0					_CLStart
.87e0	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.87e2	85 30		sta $30				sta 	codePtr
.87e4	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.87e6	85 31		sta $31				sta 	codePtr+1
.87e8					_CLLoop:
.87e8	20 bc a7	jsr $a7bc			jsr 	EXTBreakCheck 				; break check
.87eb	f0 30		beq $881d			beq 	_CLExit
.87ed	b2 30		lda ($30)			lda 	(codePtr)
.87ef	f0 2c		beq $881d			beq 	_CLExit
.87f1	a2 04		ldx #$04			ldx 	#4 							; check range every time, line numbers aren't in order.
.87f3	20 20 88	jsr $8820			jsr 	CLCompareLineNo
.87f6	90 18		bcc $8810			bcc 	_CLNext
.87f8	a2 07		ldx #$07			ldx 	#7
.87fa	20 20 88	jsr $8820			jsr 	CLCompareLineNo
.87fd	f0 02		beq $8801			beq 	_CLDoThisOne
.87ff	b0 0f		bcs $8810			bcs 	_CLNext
.8801					_CLDoThisOne:
.8801	20 6a 8a	jsr $8a6a			jsr 	ListConvertLine 			; convert line into token Buffer
.8804	a2 07		ldx #$07			ldx 	#(tokenBuffer >> 8) 		; print that line
.8806	a9 28		lda #$28			lda 	#(tokenBuffer & $FF)
.8808	20 f5 8c	jsr $8cf5			jsr 	PrintStringXA
.880b	a9 0d		lda #$0d			lda 	#13 						; new line
.880d	20 7b a7	jsr $a77b			jsr 	EXTPrintCharacter
.8810					_CLNext:
.8810	18		clc				clc
.8811	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8813	65 30		adc $30				adc 	codePtr
.8815	85 30		sta $30				sta 	codePtr
.8817	90 02		bcc $881b			bcc 	_CREExit
.8819	e6 31		inc $31				inc 	codePtr+1
.881b					_CREExit:
.881b	80 cb		bra $87e8			bra 	_CLLoop
.881d					_CLExit:
.881d	4c 69 84	jmp $8469			jmp 	WarmStart
.8820					CLCompareLineNo:
.8820	38		sec				sec
.8821	a0 01		ldy #$01			ldy 	#1
.8823	b1 30		lda ($30),y			lda 	(codePtr),y
.8825	fd 08 06	sbc $0608,x			sbc 	NSMantissa0,x
.8828	85 36		sta $36				sta 	zTemp0
.882a	c8		iny				iny
.882b	b1 30		lda ($30),y			lda 	(codePtr),y
.882d	fd 10 06	sbc $0610,x			sbc 	NSMantissa1,x
.8830	05 36		ora $36				ora 	zTemp0
.8832	60		rts				rts
.8833					CLIsDigit:
.8833	b1 30		lda ($30),y			lda 	(codePtr),y
.8835	c9 30		cmp #$30			cmp 	#"0"
.8837	90 03		bcc $883c			bcc	 	_CLIDExitFalse
.8839	c9 3a		cmp #$3a			cmp 	#"9"+1
.883b	60		rts				rts
.883c					_CLIDExitFalse:
.883c	38		sec				sec
.883d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/local.asm

.883e					Command_LOCAL:
.883e	a2 00		ldx #$00			ldx 	#0 							; at level 0
.8840	20 4c 88	jsr $884c			jsr 	LocaliseNextTerm 			; convert term to a local.
.8843	b1 30		lda ($30),y			lda 	(codePtr),y
.8845	c8		iny				iny
.8846	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8848	f0 f4		beq $883e			beq 	Command_LOCAL
.884a	88		dey				dey 								; unpick pre-get
.884b	60		rts				rts
.884c					LocaliseNextTerm:
.884c	20 76 93	jsr $9376			jsr 	EvaluateTerm 				; evaluate the term
.884f	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8852	29 20		and #$20			and 	#NSBIsReference 			; check it is a reference
.8854	f0 34		beq $888a			beq		_LNTError
.8856	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy address of variable to zTemp0
.8859	85 36		sta $36				sta 	zTemp0
.885b	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.885e	85 37		sta $37				sta  	zTemp0+1
.8860	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8863	29 10		and #$10			and 	#NSBIsString
.8865	d0 22		bne $8889			bne 	_LNTPushString
.8867	5a		phy				phy
.8868	a0 00		ldy #$00			ldy 	#0 							; push 0 to 4 inclusive, the number values, on the stack, and zero them as you go.
.886a					_LNTPushNumLoop:
.886a	b1 36		lda ($36),y			lda		(zTemp0),y
.886c	20 2c 98	jsr $982c			jsr 	StackPushByte
.886f	a9 00		lda #$00			lda 	#0
.8871	91 36		sta ($36),y			sta 	(zTemp0),y
.8873	c8		iny				iny
.8874	c0 05		cpy #$05			cpy 	#5
.8876	d0 f2		bne $886a			bne 	_LNTPushNumLoop
.8878	a5 36		lda $36				lda 	zTemp0 						; push the actual target address to write on the stack
.887a	20 2c 98	jsr $982c			jsr 	StackPushByte
.887d	a5 37		lda $37				lda 	zTemp0+1
.887f	20 2c 98	jsr $982c			jsr 	StackPushByte
.8882	a9 01		lda #$01			lda 	#STK_LOCALN 				; push local-number marker.
.8884	20 2c 98	jsr $982c			jsr 	StackPushByte
.8887	7a		ply				ply
.8888	60		rts				rts
.8889					_LNTPushString:
>8889	db						.byte 	$DB 						; causes a break in the emulator
.888a					_LNTError:
.888a	4c 0d a5	jmp $a50d			jmp 	SyntaxError
.9efe					LocalPopValue:
.9efe	20 39 98	jsr $9839			jsr 	StackPopByte
.9f01	c9 01		cmp #$01			cmp 	#STK_LOCALN 				; if not local-N
.9f03	d0 17		bne $9f1c			bne 	_LPVString
.9f05	20 39 98	jsr $9839			jsr 	StackPopByte 				; address
.9f08	85 37		sta $37				sta 	zTemp0+1
.9f0a	20 39 98	jsr $9839			jsr 	StackPopByte
.9f0d	85 36		sta $36				sta 	zTemp0
.9f0f	5a		phy				phy
.9f10	a0 04		ldy #$04			ldy 	#4 							; copy back
.9f12					_LPVNumberCopy:
.9f12	20 39 98	jsr $9839			jsr 	StackPopByte
.9f15	91 36		sta ($36),y			sta 	(zTemp0),y
.9f17	88		dey				dey
.9f18	10 f8		bpl $9f12			bpl 	_LPVNumberCopy
.9f1a	7a		ply				ply 								; and complete
.9f1b	60		rts				rts
.9f1c					_LPVString:
>9f1c	db						.byte 	$DB 						; causes a break in the emulator

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/new.asm

.888d					NewCommand:
.888d	20 79 9e	jsr $9e79			jsr 	MemoryNew
.8890	9c 00 10	stz $1000			stz 	VariableSpace 				; erase all variables.
.8893	20 d6 84	jsr $84d6			jsr 	ClearCommand 				; clear everything.
.8896	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/print.asm

.8897					Command_Print:
.8897	18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.8898					_CPLoop:
.8898	08		php				php 								; save last action flag
.8899	b1 30		lda ($30),y			lda 	(codePtr),y
.889b	c9 80		cmp #$80			cmp  	#KWC_EOL 					; end of line or colon, exit now.
.889d	f0 46		beq $88e5			beq 	_CPExit
.889f	c9 3a		cmp #$3a			cmp 	#KWD_COLON
.88a1	f0 42		beq $88e5			beq 	_CPExit
.88a3	68		pla				pla 								; throw last action flag
.88a4	b1 30		lda ($30),y			lda 	(codePtr),y
.88a6	c8		iny				iny
.88a7	c9 3b		cmp #$3b			cmp 	#KWD_SEMICOLON				; is it a semicolon
.88a9	f0 37		beq $88e2			beq 	_CPContinueWithSameLine
.88ab	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; comma
.88ad	f0 2e		beq $88dd			beq 	_CPTab
.88af	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; apostrophe (new line)
.88b1	f0 26		beq $88d9			beq 	_CPNewLine
.88b3	88		dey				dey 								; undo the get.
.88b4	a2 00		ldx #$00			ldx 	#0
.88b6	20 3a 97	jsr $973a			jsr 	EvaluateValue 				; get a value into slot 0
.88b9	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; is it a number
.88bc	29 10		and #$10			and 	#NSBIsString
.88be	f0 0b		beq $88cb			beq 	_CPNumber
.88c0	ae 10 06	ldx $0610			ldx 	NSMantissa1 				; string, print the text.
.88c3	ad 08 06	lda $0608			lda 	NSMantissa0
.88c6	20 f5 8c	jsr $8cf5			jsr 	PrintStringXA
.88c9	80 cc		bra $8897			bra 	Command_Print 				; loop round clearing carry so NL if end
.88cb					_CPNumber:
.88cb	a9 05		lda #$05			lda 	#5 							; maximum decimals
.88cd	20 10 96	jsr $9610			jsr 	ConvertNumberToString 		; convert to string
.88d0	a2 08		ldx #$08			ldx 	#DecimalBuffer >> 8
.88d2	a9 98		lda #$98			lda 	#DecimalBuffer & $FF
.88d4	20 f5 8c	jsr $8cf5			jsr 	PrintStringXA
.88d7	80 be		bra $8897			bra 	Command_Print 				; loop round clearing carry so NL if end
.88d9					_CPNewLine:
.88d9	a9 0d		lda #$0d			lda 	#13
.88db	80 02		bra $88df			bra 	_CPPrintChar
.88dd					_CPTab:
.88dd	a9 09		lda #$09			lda 	#9 							; print TAB
.88df					_CPPrintChar:
.88df	20 7b a7	jsr $a77b			jsr 	EXTPrintCharacter
.88e2					_CPContinueWithSameLine:
.88e2	38		sec				sec 								; loop round with carry set, which
.88e3	80 b3		bra $8898			bra 	_CPLoop 					; will inhibit final CR
.88e5					_CPExit:
.88e5	28		plp				plp 								; get last action flag
.88e6	b0 05		bcs $88ed			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.88e8	a9 0d		lda #$0d			lda 	#13 						; print new line
.88ea	20 7b a7	jsr $a77b			jsr 	EXTPrintCharacter
.88ed					_CPExit2:
.88ed	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/procedure.asm

.88ee					CallProcedure:
.88ee	20 2b 9f	jsr $9f2b			jsr 	CheckRightBracket
.88f1	a9 b3		lda #$b3			lda 	#STK_PROC+3 				; allocate 6 bytes on the return stack.
.88f3	20 42 98	jsr $9842			jsr 	StackOpen
.88f6	20 81 98	jsr $9881			jsr 	STKSaveCodePosition 		; save loop position
.88f9	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy variable (e.g. procedure) address to zTemp0
.88fc	85 36		sta $36				sta 	zTemp0 						; this is the DATA not the RECORD
.88fe	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8901	85 37		sta $37				sta 	zTemp0+1
.8903	a0 01		ldy #$01			ldy 	#1 							; copy code address back.
.8905	b2 36		lda ($36)			lda 	(zTemp0)
.8907	85 30		sta $30				sta 	safePtr
.8909	b1 36		lda ($36),y			lda 	(zTemp0),y
.890b	85 31		sta $31				sta 	safePtr+1
.890d	c8		iny				iny
.890e	b1 36		lda ($36),y			lda 	(zTemp0),y
.8910	85 32		sta $32				sta 	safePtr+2
.8912	c8		iny				iny
.8913	b1 36		lda ($36),y			lda 	(zTemp0),y
.8915	85 33		sta $33				sta 	safePtr+3
.8917	c8		iny				iny 								; get Y offset -> Y
.8918	b1 36		lda ($36),y			lda 	(zTemp0),y
.891a	a8		tay				tay
.891b	20 2b 9f	jsr $9f2b			jsr 	CheckRightBracket 			; check )
.891e	60		rts				rts 								; and continue from here
.9f1d					Command_ENDPROC:
.9f1d	a9 b0		lda #$b0			lda 	#STK_PROC 					; check TOS is this
.9f1f	a2 14		ldx #$14			ldx 	#ERRID_PROC
.9f21	20 69 98	jsr $9869			jsr 	StackCheckFrame
.9f24	20 92 98	jsr $9892			jsr 	STKLoadCodePosition 		; restore code position
.9f27	20 5b 98	jsr $985b			jsr 	StackClose
.9f2a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/read.asm

.891f					Command_Read:
.891f	a2 00		ldx #$00			ldx 	#0 							; evaluate the term which is the var/array element to assign
.8921	20 76 93	jsr $9376			jsr 	EvaluateTerm
.8924	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8927	29 20		and #$20			and 	#NSBIsReference				; get status byte on stack, identifies int, float, string.
.8929	f0 4a		beq $8975			beq 	_CRSyntax 					; check reference (bit 0)
.892b	20 be 89	jsr $89be			jsr 	SwapDataCodePtrs 			; swap code and data
.892e	ad 1b 07	lda $071b			lda 	inDataStatement 			; if in a data statement, we don't need to search
.8931	d0 20		bne $8953			bne 	_CRContinueData
.8933					_CRKeepSearching:
.8933	a9 a3		lda #$a3			lda 	#KWD_DATA 					; scan for instruction
.8935	aa		tax				tax
.8936	20 0e 8c	jsr $8c0e			jsr 	ScanForward
.8939	c9 a3		cmp #$a3			cmp 	#KWD_DATA 					; found data ?
.893b	f0 16		beq $8953			beq 	_CRHaveData 				; found it
.893d	18		clc				clc
.893e	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8940	65 30		adc $30				adc 	codePtr
.8942	85 30		sta $30				sta 	codePtr
.8944	90 02		bcc $8948			bcc 	_CREExit
.8946	e6 31		inc $31				inc 	codePtr+1
.8948					_CREExit:
.8948	a0 03		ldy #$03			ldy 	#3 							; start of line.
.894a	b2 30		lda ($30)			lda 	(codePtr)
.894c	d0 e5		bne $8933			bne 	_CRKeepSearching
.894e	a9 0b		lda #$0b		lda	#11
.8950	4c 9c 8c	jmp $8c9c		jmp	ErrorHandler
.8953					_CRHaveData:
.8953					_CRContinueData:
.8953	a2 01		ldx #$01			ldx 	#1
.8955	20 3a 97	jsr $973a			jsr 	EvaluateValue 				; evaluate value into slot # 1
.8958	ca		dex				dex
.8959	20 8a 87	jsr $878a			jsr		AssignVariable 				; do the assignment
.895c	9c 1b 07	stz $071b			stz 	inDataStatement 			; clear in data
.895f	b1 30		lda ($30),y			lda 	(codePtr),y
.8961	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 					; if not, end of data statement
.8963	d0 04		bne $8969			bne 	_CRSwapBack
.8965	c8		iny				iny 								; consume comma
.8966	ee 1b 07	inc $071b			inc 	inDataStatement 			; set in data statement currently.
.8969					_CRSwapBack:
.8969	20 be 89	jsr $89be			jsr 	SwapDataCodePtrs			; swap them back.
.896c	b1 30		lda ($30),y			lda 	(codePtr),y
.896e	c8		iny				iny
.896f	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.8971	f0 ac		beq $891f			beq 	Command_Read 				; if so go round again.
.8973	88		dey				dey 								; unpick get.
.8974	60		rts				rts
.8975					_CRSyntax:
.8975	4c 0d a5	jmp $a50d			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/rem.asm

.8978					RemCommand:
.8978	b1 30		lda ($30),y			lda 	(codePtr),y
.897a	c9 ff		cmp #$ff			cmp 	#KWC_STRING
.897c	d0 06		bne $8984			bne 	_RMExit
.897e	c8		iny				iny
.897f	98		tya				tya
.8980	38		sec				sec
.8981	71 30		adc ($30),y			adc 	(codePtr),y
.8983	a8		tay				tay
.8984					_RMExit:
.8984	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/repeat.asm

.8985					Command_REPEAT:
.8985	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; allocate 6 bytes on the return stack.
.8987	20 42 98	jsr $9842			jsr 	StackOpen
.898a	20 81 98	jsr $9881			jsr 	STKSaveCodePosition 		; save loop position
.898d	60		rts				rts
.898e					Command_UNTIL:
.898e	a9 c3		lda #$c3			lda 	#STK_REPEAT+3 				; check REPEAT is TOS
.8990	a2 0f		ldx #$0f			ldx 	#ERRID_REPEAT 				; this error
.8992	20 69 98	jsr $9869			jsr 	StackCheckFrame
.8995	a2 00		ldx #$00			ldx 	#0
.8997	20 43 97	jsr $9743			jsr 	EvaluateNumber 				; work out the number
.899a	20 1f 98	jsr $981f			jsr 	NSMIsZero 					; check if zero
.899d	f0 04		beq $89a3			beq 	_CULoopBack 				; if so keep looping
.899f	20 5b 98	jsr $985b			jsr 	StackClose		 			; return
.89a2	60		rts				rts
.89a3					_CULoopBack:
.89a3	20 92 98	jsr $9892			jsr 	STKLoadCodePosition 		; loop back
.89a6	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/restore.asm

.89a7					Command_Restore:
.89a7	20 be 89	jsr $89be			jsr 	SwapDataCodePtrs 			; swap code and data
.89aa	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.89ac	85 30		sta $30				sta 	codePtr
.89ae	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.89b0	85 31		sta $31				sta 	codePtr+1
.89b2	20 be 89	jsr $89be			jsr 	SwapDataCodePtrs 			; put them back
.89b5	a9 03		lda #$03			lda 	#3 							; start at offset 3, e.g. first instruction of first line.
.89b7	8d 1a 07	sta $071a			sta 	dataPointer+4
.89ba	9c 1b 07	stz $071b			stz 	inDataStatement 			; not in data statement
.89bd	60		rts				rts
.89be					SwapDataCodePtrs:
.89be	da		phx				phx
.89bf	a2 03		ldx #$03			ldx 	#3 							; swap 32 bit code pointer over
.89c1					_SDCPLoop:
.89c1	b5 30		lda $30,x			lda 	safePtr,x
.89c3	48		pha				pha
.89c4	bd 16 07	lda $0716,x			lda 	dataPointer,x
.89c7	95 30		sta $30,x			sta 	safePtr,x
.89c9	68		pla				pla
.89ca	9d 16 07	sta $0716,x			sta 	dataPointer,x
.89cd	ca		dex				dex
.89ce	10 f1		bpl $89c1			bpl 	_SDCPLoop
.89d0	ad 1a 07	lda $071a			lda 	dataPointer+4 				; swap Y position over.
.89d3	8c 1a 07	sty $071a			sty 	dataPointer+4
.89d6	a8		tay				tay
.89d7	fa		plx				plx
.89d8	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/run.asm

.89d9					CommandRUN:
.89d9	20 d6 84	jsr $84d6			jsr 	ClearCommand 				; clear variable/stacks/etc.
.89dc	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.89de	85 30		sta $30				sta 	codePtr
.89e0	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.89e2	85 31		sta $31				sta 	codePtr+1
.89e4					RUNNewLine:
.89e4	b2 30		lda ($30)			lda 	(codePtr)
.89e6	f0 5a		beq $8a42			beq 	CRNoProgram         		; no then END.
.89e8	a2 ff		ldx #$ff			ldx 	#$FF 						; reset stack
.89ea	9a		txs				txs
.89eb					RUNCodePointerLine:
.89eb	a0 02		ldy #$02			ldy 	#2 							; start of program
.89ed					_CRIncMainLoop:
.89ed	0e 13 07	asl $0713			asl 	breakCheck 					; clears 1 time in 8
.89f0	d0 05		bne $89f7			bne 	_CRNoBreakCheck
.89f2	20 bc a7	jsr $a7bc			jsr 	EXTBreakCheck 				; break check
.89f5	f0 46		beq $8a3d			beq 	_CRBreak
.89f7					_CRNoBreakCheck:
.89f7	c8		iny				iny
.89f8					_CRMainLoop:
.89f8	9c 10 07	stz $0710			stz 	stringInitialised 			; clear the temporary string initialised flag.
.89fb	b1 30		lda ($30),y			lda 	(codePtr),y
.89fd	10 10		bpl $8a0f			bpl 	_CRNotKeyword
.89ff	c9 96		cmp #$96			cmp 	#KWC_LAST_UNARY+1 			; if after unary, legitimate command
.8a01	b0 04		bcs $8a07			bcs 	_CRIsKeyword
.8a03	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if unary, syntax error.
.8a05	b0 30		bcs $8a37			bcs		_CRSyntaxError
.8a07					_CRIsKeyword:
.8a07	c8		iny				iny 								; consume command
.8a08	0a		asl a				asl 	a 							; double losing the MSB which is '1' as tokens are $80-$FF
.8a09	aa		tax				tax 								; put in X for vector jump
.8a0a	20 3a 8a	jsr $8a3a			jsr 	_CRCallVector0 				; call the vector - effectively jsr (vectortable,X)
.8a0d	80 e9		bra $89f8			bra 	_CRMainLoop 				; and loop round
.8a0f					_CRNotKeyword:
.8a0f	c9 3a		cmp #$3a			cmp 	#KWD_COLON 					; if a :, consume it and go round.
.8a11	f0 da		beq $89ed			beq 	_CRIncMainLoop
.8a13	c9 40		cmp #$40			cmp 	#$40 						; variable/call reference
.8a15	90 05		bcc $8a1c			bcc 	_CRNotVariable
.8a17					_CRGoLet:
.8a17	20 6a 87	jsr $876a			jsr 	LetCommand
.8a1a	80 dc		bra $89f8			bra 	_CRMainLoop
.8a1c					_CRNotVariable:
.8a1c	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; handle ? !
.8a1e	f0 f7		beq $8a17			beq 	_CRGoLet
.8a20	c9 21		cmp #$21			cmp 	#KWD_PLING
.8a22	f0 f3		beq $8a17			beq 	_CRGoLet
.8a24	c9 27		cmp #$27			cmp 	#KWD_QUOTE 					; handle ' (comment)
.8a26	f0 09		beq $8a31			beq 	_CRGoRem
.8a28	c9 2e		cmp #$2e			cmp 	#KWD_PERIOD 				; handle . (assembler label)
.8a2a	d0 0b		bne $8a37			bne 	_CRSyntaxError
.8a2c	20 a2 83	jsr $83a2			jsr 	LabelHere
.8a2f	80 c7		bra $89f8			bra 	_CRMainLoop
.8a31					_CRGoRem:
.8a31	c8		iny				iny
.8a32	20 78 89	jsr $8978			jsr 	RemCommand
.8a35	80 c1		bra $89f8			bra 	_CRMainLoop
.8a37					_CRSyntaxError:
.8a37	4c 0d a5	jmp $a50d			jmp 	SyntaxError
.8a3a					_CRCallVector0:
.8a3a	7c fe 80	jmp ($80fe,x)			jmp 	(VectorSet0,x)
.8a3d					_CRBreak:
.8a3d	a9 01		lda #$01		lda	#1
.8a3f	4c 9c 8c	jmp $8c9c		jmp	ErrorHandler
.8a42					CRNoProgram:
.8a42	4c f0 85	jmp $85f0			jmp 	EndCommand
.8a45					EOLCommand:
.8a45	18		clc				clc
.8a46	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8a48	65 30		adc $30				adc 	codePtr
.8a4a	85 30		sta $30				sta 	codePtr
.8a4c	90 02		bcc $8a50			bcc 	_CREExit
.8a4e	e6 31		inc $31				inc 	codePtr+1
.8a50					_CREExit:
.8a50	80 92		bra $89e4			bra 	RunNewLine
.8a52					Shift1Command:
.8a52	b1 30		lda ($30),y			lda 	(codePtr),y
.8a54	c8		iny				iny
.8a55	0a		asl a				asl 	a
.8a56	aa		tax				tax
.8a57	7c 5e 81	jmp ($815e,x)			jmp 	(VectorSet1,x)
.8a5a					Shift2Command:
.8a5a	b1 30		lda ($30),y			lda 	(codePtr),y
.8a5c	c8		iny				iny
.8a5d	0a		asl a				asl 	a
.8a5e	aa		tax				tax
.8a5f	7c 76 81	jmp ($8176,x)			jmp 	(VectorSet2,x)
.8a62					Unused1:
.8a62					Unused2:
.8a62					Unused3:
.8a62					Unused4:
.8a62	4c 0d a5	jmp $a50d			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/stop.asm

.8a65					StopCommand:
.8a65	a9 08		lda #$08		lda	#8
.8a67	4c 9c 8c	jmp $8c9c		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/expandline.asm

.8a6a					ListConvertLine:
.8a6a	9c 1c 07	stz $071c			stz 	tbOffset
.8a6d	9c 28 07	stz $0728			stz 	tokenBuffer
.8a70	a0 02		ldy #$02			ldy 	#2 							; convert line number to string
.8a72	b1 30		lda ($30),y			lda 	(codePtr),y
.8a74	aa		tax				tax
.8a75	88		dey				dey
.8a76	b1 30		lda ($30),y			lda 	(codePtr),y
.8a78	20 87 a0	jsr $a087			jsr 	ConvertInt16
.8a7b	85 36		sta $36				sta 	zTemp0 						; copy number into buffer
.8a7d	86 37		stx $37				stx 	zTemp0+1
.8a7f	a0 00		ldy #$00			ldy 	#0
.8a81					_LCCopyNumber:
.8a81	b1 36		lda ($36),y			lda 	(zTemp0),y
.8a83	20 83 8b	jsr $8b83			jsr 	LCLWrite
.8a86	c8		iny				iny
.8a87	b1 36		lda ($36),y			lda 	(zTemp0),y
.8a89	d0 f6		bne $8a81			bne 	_LCCopyNumber
.8a8b					_LCPadOut:
.8a8b	a9 20		lda #$20			lda 	#' '						; pad out to 6 characters
.8a8d	20 83 8b	jsr $8b83			jsr 	LCLWrite
.8a90	ad 1c 07	lda $071c			lda 	tbOffset
.8a93	c9 06		cmp #$06			cmp 	#6
.8a95	d0 f4		bne $8a8b			bne 	_LCPadOut
.8a97	a0 03		ldy #$03			ldy 	#3 							; start position.
.8a99					_LCMainLoop:
.8a99	b1 30		lda ($30),y			lda 	(codePtr),y
.8a9b	c9 80		cmp #$80			cmp 	#KWC_EOL 					; end of line ?
.8a9d	f0 17		beq $8ab6			beq 	_LCExit
.8a9f	c9 10		cmp #$10			cmp 	#16 						; 0-5 are the double punctuations
.8aa1	90 14		bcc $8ab7			bcc 	_LCDoubles
.8aa3	c9 20		cmp #$20			cmp 	#32 						; 16-31 are shifted punctuation from 64-91
.8aa5	90 20		bcc $8ac7			bcc 	_LCShiftPunc
.8aa7	c9 40		cmp #$40			cmp 	#64 						; 32-64 are as stored, punc and digits
.8aa9	90 2b		bcc $8ad6			bcc 	_LCPunctuation
.8aab	c9 80		cmp #$80			cmp 	#128 						; 64-127 are variable identifiers.
.8aad	90 2d		bcc $8adc			bcc 	_LCIdentifiers
.8aaf	c9 fe		cmp #$fe			cmp 	#254 						; 128-253 are tokenised words
.8ab1	90 49		bcc $8afc			bcc 	_LCTokens
.8ab3	4c 57 8b	jmp $8b57			jmp 	_LCData 					; 254-5 are data objects
.8ab6					_LCExit:
.8ab6	60		rts				rts
.8ab7					_LCDoubles:
.8ab7	48		pha				pha
.8ab8	4a		lsr a				lsr 	a 							; put bit 2 into bit 1
.8ab9	29 02		and #$02			and 	#2
.8abb	09 3c		ora #$3c			ora 	#60 						; make < >
.8abd	20 83 8b	jsr $8b83			jsr 	LCLWrite
.8ac0	68		pla				pla 								; restore, do lower bit
.8ac1	29 03		and #$03			and 	#3
.8ac3	09 3c		ora #$3c			ora 	#60
.8ac5	80 0f		bra $8ad6			bra		_LCPunctuation 				; print, increment, loop
.8ac7					_LCShiftPunc:
.8ac7	aa		tax				tax 								; save in X
.8ac8	29 07		and #$07			and 	#7 							; lower 3 bits
.8aca	f0 02		beq $8ace			beq 	_LCNoAdd
.8acc	09 18		ora #$18			ora 	#24 						; adds $18 to it.
.8ace					_LCNoAdd:
.8ace	e0 18		cpx #$18			cpx 	#24 						; if >= 24 add $20
.8ad0	90 02		bcc $8ad4			bcc 	_LCNoAdd2
.8ad2	09 20		ora #$20			ora 	#32 						; adds $20
.8ad4					_LCNoAdd2:
.8ad4	09 40		ora #$40			ora 	#$40 						; shift into 64-127 range and fall through.
.8ad6					_LCPunctuation:
.8ad6	c8		iny				iny 								; consume character
.8ad7	20 83 8b	jsr $8b83			jsr 	LCLWrite 					; write it out.
.8ada	80 bd		bra $8a99			bra 	_LCMainLoop 				; go round again.
.8adc					_LCIdentifiers:
.8adc	18		clc				clc 								; convert to physical address
.8add	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8adf	85 37		sta $37				sta 	zTemp0+1
.8ae1	c8		iny				iny
.8ae2	b1 30		lda ($30),y			lda 	(codePtr),y
.8ae4	85 36		sta $36				sta 	zTemp0
.8ae6	c8		iny				iny
.8ae7	5a		phy				phy 								; save position
.8ae8	a0 07		ldy #$07			ldy 	#7 							; output the identifier.
.8aea					_LCOutIdentifier:
.8aea	c8		iny				iny
.8aeb	b1 36		lda ($36),y			lda 	(zTemp0),y
.8aed	29 7f		and #$7f			and 	#$7F
.8aef	20 b1 8b	jsr $8bb1			jsr 	LCLLowerCase
.8af2	20 83 8b	jsr $8b83			jsr 	LCLWrite
.8af5	b1 36		lda ($36),y			lda 	(zTemp0),y				 	; ends when bit 7 set.
.8af7	10 f1		bpl $8aea			bpl 	_LCOutIdentifier
.8af9	7a		ply				ply 								; restore position
.8afa	80 9d		bra $8a99			bra 	_LCMainLoop
.8afc					_LCTokens:
.8afc	aa		tax				tax 								; token in X
.8afd	a9 b3		lda #$b3			lda 	#((KeywordSet2) & $FF)
.8aff	85 36		sta $36				sta 	0+zTemp0
.8b01	a9 9a		lda #$9a			lda 	#((KeywordSet2) >> 8)
.8b03	85 37		sta $37				sta 	1+zTemp0
.8b05	e0 82		cpx #$82			cpx 	#$82
.8b07	f0 16		beq $8b1f			beq 	_LCUseShift
.8b09	a9 6f		lda #$6f			lda 	#((KeywordSet1) & $FF)
.8b0b	85 36		sta $36				sta 	0+zTemp0
.8b0d	a9 9a		lda #$9a			lda 	#((KeywordSet1) >> 8)
.8b0f	85 37		sta $37				sta 	1+zTemp0
.8b11	e0 81		cpx #$81			cpx 	#$81
.8b13	f0 0a		beq $8b1f			beq 	_LCUseShift
.8b15	a9 46		lda #$46			lda 	#((KeywordSet0) & $FF)
.8b17	85 36		sta $36				sta 	0+zTemp0
.8b19	a9 99		lda #$99			lda 	#((KeywordSet0) >> 8)
.8b1b	85 37		sta $37				sta 	1+zTemp0
.8b1d	80 01		bra $8b20			bra 	_LCNoShift
.8b1f					_LCUseShift:
.8b1f	c8		iny				iny
.8b20					_LCNoShift:
.8b20	20 92 8b	jsr $8b92			jsr 	LCCheckSpaceRequired 		; do we need a space ?
.8b23	b1 30		lda ($30),y			lda 	(codePtr),y
.8b25	aa		tax				tax 								; into X
.8b26					_LCFindText:
.8b26	ca		dex				dex
.8b27	10 0e		bpl $8b37			bpl 	_LCFoundText 				; found text.
.8b29	b2 36		lda ($36)			lda 	(zTemp0) 					; length of text
.8b2b	1a		inc a				inc 	a 							; one extra for size
.8b2c	38		sec				sec 								; one extra for checksum
.8b2d	65 36		adc $36				adc 	zTemp0 						; go to next token
.8b2f	85 36		sta $36				sta 	zTemp0
.8b31	90 f3		bcc $8b26			bcc 	_LCFindText
.8b33	e6 37		inc $37				inc 	zTemp0+1
.8b35	80 ef		bra $8b26			bra 	_LCFindText
.8b37					_LCFoundText:
.8b37	5a		phy				phy 								; save List position
.8b38	b2 36		lda ($36)			lda 	(zTemp0)					; count to print
.8b3a	aa		tax				tax
.8b3b	a0 02		ldy #$02			ldy 	#2
.8b3d					_LCCopyToken:
.8b3d	b1 36		lda ($36),y			lda 	(zTemp0),y
.8b3f	20 b1 8b	jsr $8bb1			jsr 	LCLLowerCase
.8b42	20 83 8b	jsr $8b83			jsr 	LCLWrite
.8b45	c8		iny				iny
.8b46	ca		dex				dex
.8b47	d0 f4		bne $8b3d			bne 	_LCCopyToken
.8b49	c9 28		cmp #$28			cmp 	#"(" 						; if last char not ( print a space
.8b4b	f0 05		beq $8b52			beq 	_LCNoSpace
.8b4d	a9 20		lda #$20			lda 	#' '
.8b4f	20 83 8b	jsr $8b83			jsr 	LCLWrite
.8b52					_LCNoSpace:
.8b52	7a		ply				ply 								; restore position.
.8b53	c8		iny				iny 								; consume token
.8b54	4c 99 8a	jmp $8a99			jmp 	_LCMainLoop 				; and go around again.
.8b57					_LCData:
.8b57	48		pha				pha 								; save type $FE/$FF
.8b58	a2 24		ldx #$24			ldx 	#'$' 						; figure out $ or "
.8b5a	c9 fe		cmp #$fe			cmp 	#$FE
.8b5c	f0 02		beq $8b60			beq 	_LCHaveOpener
.8b5e	a2 22		ldx #$22			ldx 	#'"'
.8b60					_LCHaveOpener:
.8b60	8a		txa				txa 								; output prefix (# or ")
.8b61	20 83 8b	jsr $8b83			jsr 	LCLWrite
.8b64	c8		iny				iny 								; get count
.8b65	b1 30		lda ($30),y			lda 	(codePtr),y
.8b67	aa		tax				tax
.8b68	c8		iny				iny 								; point at first character
.8b69					_LCOutData:
.8b69	b1 30		lda ($30),y			lda 	(codePtr),y
.8b6b	c9 00		cmp #$00			cmp 	#0
.8b6d	f0 03		beq $8b72			beq 	_LCNoPrint
.8b6f	20 83 8b	jsr $8b83			jsr 	LCLWrite
.8b72					_LCNoPrint:
.8b72	c8		iny				iny
.8b73	ca		dex				dex
.8b74	d0 f3		bne $8b69			bne 	_LCOutData
.8b76	68		pla				pla 								; closing " required ?
.8b77	c9 ff		cmp #$ff			cmp 	#$FF
.8b79	d0 05		bne $8b80			bne 	_LCNoQuote
.8b7b	a9 22		lda #$22			lda 	#'"'
.8b7d	20 83 8b	jsr $8b83			jsr 	LCLWrite
.8b80					_LCNoQuote:
.8b80	4c 99 8a	jmp $8a99			jmp 	_LCMainLoop
.8b83					LCLWrite:
.8b83	da		phx				phx
.8b84	ae 1c 07	ldx $071c			ldx 	tbOffset
.8b87	9d 28 07	sta $0728,x			sta 	tokenBuffer,x
.8b8a	9e 29 07	stz $0729,x			stz 	tokenBuffer+1,x
.8b8d	ee 1c 07	inc $071c			inc 	tbOffset
.8b90	fa		plx				plx
.8b91	60		rts				rts
.8b92					LCCheckSpaceRequired:
.8b92	ae 1c 07	ldx $071c			ldx 	tbOffset
.8b95	bd 27 07	lda $0727,x			lda 	tokenBuffer-1,x 			; previous character
.8b98	20 b1 8b	jsr $8bb1			jsr 	LCLLowerCase 				; saves a little effort
.8b9b	c9 30		cmp #$30			cmp 	#"0" 						; check if it was 0-9 A-Z a-z if so need space.
.8b9d	90 11		bcc $8bb0			bcc 	_LCCSRExit
.8b9f	c9 3a		cmp #$3a			cmp 	#"9"+1
.8ba1	90 08		bcc $8bab			bcc 	_LCCSRSpace
.8ba3	c9 61		cmp #$61			cmp 	#"a"
.8ba5	90 09		bcc $8bb0			bcc 	_LCCSRExit
.8ba7	c9 7b		cmp #$7b			cmp 	#"z"+1
.8ba9	b0 05		bcs $8bb0			bcs 	_LCCSRExit
.8bab					_LCCSRSpace:
.8bab	a9 20		lda #$20			lda 	#' '
.8bad	20 83 8b	jsr $8b83			jsr 	LCLWrite
.8bb0					_LCCSRExit:
.8bb0	60		rts				rts
.8bb1					LCLLowerCase:
.8bb1	c9 41		cmp #$41			cmp 	#"A"
.8bb3	90 06		bcc $8bbb			bcc 	_LCLLCOut
.8bb5	c9 5b		cmp #$5b			cmp 	#"Z"+1
.8bb7	b0 02		bcs $8bbb			bcs 	_LCLLCOut
.8bb9	69 20		adc #$20			adc 	#$20
.8bbb					_LCLLCOut:
.8bbb	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/procscan.asm

.8bbc					ProcedureScan:
.8bbc	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.8bbe	85 30		sta $30				sta 	codePtr
.8bc0	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.8bc2	85 31		sta $31				sta 	codePtr+1
.8bc4					_PSLoop:
.8bc4	b2 30		lda ($30)			lda 	(codePtr)
.8bc6	f0 42		beq $8c0a			beq 	_PSExit
.8bc8	a0 03		ldy #$03			ldy 	#3 							; is it PROC ?
.8bca	b1 30		lda ($30),y			lda 	(codePtr),y
.8bcc	c9 98		cmp #$98			cmp 	#KWD_PROC
.8bce	d0 2d		bne $8bfd			bne 	_PSNext
.8bd0	c8		iny				iny 								; get the address of the record to zTemp0 and
.8bd1	b1 30		lda ($30),y			lda 	(codePtr),y
.8bd3	29 c0		and #$c0			and 	#$C0
.8bd5	c9 40		cmp #$40			cmp 	#$40
.8bd7	d0 32		bne $8c0b			bne 	_PSSyntax
.8bd9	b1 30		lda ($30),y			lda 	(codePtr),y
.8bdb	18		clc				clc
.8bdc	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.8bde	85 37		sta $37				sta 	zTemp0+1
.8be0	c8		iny				iny 								; LSB
.8be1	b1 30		lda ($30),y			lda 	(codePtr),y
.8be3	85 36		sta $36				sta 	zTemp0
.8be5	c8		iny				iny 								; character after variable call.
.8be6	98		tya				tya 								; save Y offset at +7
.8be7	a0 07		ldy #$07			ldy 	#7
.8be9	91 36		sta ($36),y			sta 	(zTemp0),y
.8beb	a9 18		lda #$18			lda 	#NSTProcedure 				; mark it as procedure
.8bed	a0 02		ldy #$02			ldy 	#2
.8bef	91 36		sta ($36),y			sta 	(zTemp0),y
.8bf1	a2 00		ldx #$00			ldx 	#0 							; copy code-Ptr in
.8bf3					_PSCopy:
.8bf3	b5 30		lda $30,x			lda 	safePtr,x
.8bf5	c8		iny				iny
.8bf6	91 36		sta ($36),y			sta 	(zTemp0),y
.8bf8	e8		inx				inx
.8bf9	e0 04		cpx #$04			cpx 	#4
.8bfb	d0 f6		bne $8bf3			bne 	_PSCopy
.8bfd					_PSNext:
.8bfd	18		clc				clc
.8bfe	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8c00	65 30		adc $30				adc 	codePtr
.8c02	85 30		sta $30				sta 	codePtr
.8c04	90 02		bcc $8c08			bcc 	_CREExit
.8c06	e6 31		inc $31				inc 	codePtr+1
.8c08					_CREExit:
.8c08	80 ba		bra $8bc4			bra 	_PSLoop
.8c0a					_PSExit:
.8c0a	60		rts				rts
.8c0b					_PSSyntax:
.8c0b	4c 0d a5	jmp $a50d			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/utilities/scanforward.asm

.8c0e					ScanForward:
.8c0e	85 36		sta $36				sta 	zTemp0 						; save XA as the two possible matches.
.8c10	86 37		stx $37				stx 	zTemp0+1
.8c12	64 38		stz $38				stz 	zTemp1 						; this is the structure count - goes up with WHILE/FOR
.8c14					_ScanLoop:
.8c14	b1 30		lda ($30),y			lda 	(codePtr),y
.8c16	c8		iny				iny
.8c17	a6 38		ldx $38				ldx 	zTemp1 						; if the count is > 0 cannot match as in substructure
.8c19	d0 0e		bne $8c29			bne 	_ScanGoNext
.8c1b	c5 36		cmp $36				cmp 	zTemp0 						; see if either matches
.8c1d	f0 04		beq $8c23			beq 	_ScanMatch
.8c1f	c5 37		cmp $37				cmp 	zTemp0+1
.8c21	d0 06		bne $8c29			bne 	_ScanGoNext
.8c23					_ScanMatch:
.8c23	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if asked for EOL, backtrack.
.8c25	d0 01		bne $8c28			bne 	_ScanNotEndEOL
.8c27	88		dey				dey
.8c28					_ScanNotEndEOL:
.8c28	60		rts				rts
.8c29					_ScanGoNext:
.8c29	c9 40		cmp #$40			cmp 	#$40 						; if 00-3F, punctuation characters, loop back
.8c2b	90 e7		bcc $8c14			bcc 	_ScanLoop
.8c2d	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; if 40-82, skip one extra.
.8c2f	90 18		bcc $8c49			bcc 	_ScanSkipOne
.8c31	c9 fc		cmp #$fc			cmp 	#$FC 						; FC-FF are data skips
.8c33	b0 2f		bcs $8c64			bcs 	_ScanSkipData
.8c35	c9 96		cmp #$96			cmp 	#KWC_FIRST_STRUCTURE 		; structure keyword ?
.8c37	90 db		bcc $8c14			bcc 	_ScanLoop 					; if not, ordinary keywords.
.8c39	c9 a1		cmp #$a1			cmp 	#KWC_LAST_STRUCTURE+1
.8c3b	b0 d7		bcs $8c14			bcs 	_ScanLoop
.8c3d	c6 38		dec $38				dec 	zTemp1 						; decrement the sructure count
.8c3f	c9 9b		cmp #$9b			cmp 	#KWC_FIRST_STRUCTURE_DEC 	; back if it is a dec structure (e.g. WEND/NEXT)
.8c41	b0 d1		bcs $8c14			bcs 	_ScanLoop
.8c43	e6 38		inc $38				inc 	zTemp1 						; so it's an increment structure
.8c45	e6 38		inc $38				inc 	zTemp1 						; twice to undo the dec
.8c47	80 cb		bra $8c14			bra 	_ScanLoop
.8c49					_ScanSkipOne:
.8c49	c8		iny				iny 								; consume the extra one.
.8c4a	c9 80		cmp #$80			cmp 	#KWC_EOL 					; if not EOL loop back
.8c4c	d0 c6		bne $8c14			bne 	_ScanLoop
.8c4e	18		clc				clc
.8c4f	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.8c51	65 30		adc $30				adc 	codePtr
.8c53	85 30		sta $30				sta 	codePtr
.8c55	90 02		bcc $8c59			bcc 	_CREExit
.8c57	e6 31		inc $31				inc 	codePtr+1
.8c59					_CREExit:
.8c59	a0 03		ldy #$03			ldy 	#3 							; scan start position.
.8c5b	b2 30		lda ($30)			lda 	(codePtr)
.8c5d	d0 b5		bne $8c14			bne 	_ScanLoop 					; if not zero, more to scan
.8c5f	a9 13		lda #$13		lda	#19
.8c61	4c 9c 8c	jmp $8c9c		jmp	ErrorHandler
.8c64					_ScanSkipData:
.8c64	88		dey				dey 								; point at data token
.8c65	c8		iny				iny
.8c66	98		tya				tya
.8c67	38		sec				sec
.8c68	71 30		adc ($30),y			adc 	(codePtr),y
.8c6a	a8		tay				tay
.8c6b	80 a7		bra $8c14			bra 	_ScanLoop

;******  Return to file: _basic.asm


;******  Processing file: ./common/commands/while.asm

.8c6d					Command_WHILE:
.8c6d	5a		phy				phy 								; save position of the test
.8c6e	a2 00		ldx #$00			ldx 	#0
.8c70	20 43 97	jsr $9743			jsr 	EvaluateNumber 				; work out the number
.8c73	20 1f 98	jsr $981f			jsr 	NSMIsZero 					; check if zero
.8c76	f0 0e		beq $8c86			beq 	_WHExitLoop 				; if so exit the loop
.8c78	98		tya				tya 								; position *after* test.
.8c79	7a		ply				ply 								; restore position before test, at WHILE
.8c7a	88		dey				dey
.8c7b	48		pha				pha 								; push after test on the stack
.8c7c	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; allocate 6 bytes on the return stack.
.8c7e	20 42 98	jsr $9842			jsr 	StackOpen
.8c81	20 81 98	jsr $9881			jsr 	STKSaveCodePosition 		; save loop position - where the test value is.
.8c84	7a		ply				ply 								; restore the position *after* the test
.8c85	60		rts				rts
.8c86					_WHExitLoop:
.8c86	68		pla				pla 								; throw post loop position
.8c87	a9 a0		lda #$a0			lda 	#KWD_WEND 					; scan forward past WEND
.8c89	aa		tax				tax
.8c8a	20 0e 8c	jsr $8c0e			jsr 	ScanForward
.8c8d	60		rts				rts
.8c8e					Command_WEND:
.8c8e	a9 a3		lda #$a3			lda 	#STK_WHILE+3 				; check WHILE is TOS
.8c90	a2 10		ldx #$10			ldx 	#ERRID_WHILE 				; this error
.8c92	20 69 98	jsr $9869			jsr 	StackCheckFrame
.8c95	20 92 98	jsr $9892			jsr 	STKLoadCodePosition 		; loop back
.8c98	20 5b 98	jsr $985b			jsr 	StackClose		 			; erase the frame
.8c9b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/charcheck.asm

.9f2b					CheckRightBracket:
.9f2b	b1 30		lda ($30),y			lda 	(codePtr),y
.9f2d	c8		iny				iny
.9f2e	c9 29		cmp #$29			cmp 	#KWD_RPAREN 						; exit if matches
.9f30	d0 0f		bne $9f41			bne 	CNAFail
.9f32	60		rts				rts
.9f33					CheckComma:
.9f33	b1 30		lda ($30),y			lda 	(codePtr),y
.9f35	c8		iny				iny
.9f36	c9 2c		cmp #$2c			cmp 	#KWD_COMMA 						; exit if matches
.9f38	d0 07		bne $9f41			bne 	CNAFail
.9f3a	60		rts				rts
.9f3b					CheckNextA:
.9f3b	d1 30		cmp ($30),y			cmp 	(codePtr),y
.9f3d	d0 02		bne $9f41			bne 	CNAFail
.9f3f	c8		iny				iny 								; skip character
.9f40	60		rts				rts 								; and exit
.9f41					CNAFail:
.9f41	4c 0d a5	jmp $a50d			jmp 	SyntaxError

;******  Return to file: _basic.asm


;******  Processing file: ./common/errors/errors.asm

.8c9c					ErrorHandler:
.8c9c	a8		tay				tay 								; find the error text
.8c9d	f0 49		beq $8ce8			beq 	_EHEnd
.8c9f	a2 00		ldx #$00			ldx 	#0
.8ca1	a9 26		lda #$26			lda 	#((ErrorText) & $FF)
.8ca3	85 36		sta $36				sta 	0+zTemp0
.8ca5	a9 a5		lda #$a5			lda 	#((ErrorText) >> 8)
.8ca7	85 37		sta $37				sta 	1+zTemp0
.8ca9					_EHFind:
.8ca9	88		dey				dey 								; found the error text ?
.8caa	f0 0e		beq $8cba			beq 	_EHFound
.8cac					_EHFindZero:
.8cac	b2 36		lda ($36)			lda 	(zTemp0) 					; find the next error
.8cae	e6 36		inc $36				inc 	zTemp0
.8cb0	d0 02		bne $8cb4			bne 	_EHFNoCarry
.8cb2	e6 37		inc $37				inc 	zTemp0+1
.8cb4					_EHFNoCarry:
.8cb4	c9 00		cmp #$00			cmp 	#0
.8cb6	d0 f4		bne $8cac			bne 	_EHFindZero
.8cb8	80 ef		bra $8ca9			bra 	_EHFind
.8cba					_EHFound:
.8cba	a5 36		lda $36				lda 	zTemp0 						; print message
.8cbc	a6 37		ldx $37				ldx 	zTemp0+1
.8cbe	20 f5 8c	jsr $8cf5			jsr 	PrintStringXA
.8cc1	a0 01		ldy #$01			ldy 	#1 							; if line number zero don't print i
.8cc3	b1 30		lda ($30),y			lda 	(codePtr),y
.8cc5	d0 05		bne $8ccc			bne 	_EHAtMsg
.8cc7	c8		iny				iny
.8cc8	b1 30		lda ($30),y			lda 	(codePtr),y
.8cca	f0 17		beq $8ce3			beq 	_EHCREnd
.8ccc					_EHAtMsg:
.8ccc	a2 8c		ldx #$8c			ldx 	#_AtMsg >> 8 				; print " at "
.8cce	a9 eb		lda #$eb			lda 	#_AtMsg & $FF
.8cd0	20 f5 8c	jsr $8cf5			jsr 	PrintStringXA
.8cd3	a0 01		ldy #$01			ldy 	#1 							; line number into XA
.8cd5	b1 30		lda ($30),y			lda 	(codePtr),y
.8cd7	48		pha				pha
.8cd8	c8		iny				iny
.8cd9	b1 30		lda ($30),y			lda 	(codePtr),y
.8cdb	aa		tax				tax
.8cdc	68		pla				pla
.8cdd	20 87 a0	jsr $a087			jsr 	ConvertInt16 				; convert XA to string
.8ce0	20 f5 8c	jsr $8cf5			jsr 	PrintStringXA 				; and print it.
.8ce3					_EHCREnd:
.8ce3	a9 0d		lda #$0d			lda 	#13 						; new line
.8ce5	20 7b a7	jsr $a77b			jsr 	EXTPrintCharacter
.8ce8					_EHEnd:
.8ce8	4c 69 84	jmp $8469			jmp 	WarmStart
>8ceb	20 61 74 20 6c 69 6e 65		_AtMsg:	.text 	" at line ",0
>8cf3	20 00
.8cf5					PrintStringXA:
.8cf5	5a		phy				phy
.8cf6	86 37		stx $37				stx 	zTemp0+1
.8cf8	85 36		sta $36				sta 	zTemp0
.8cfa	a0 00		ldy #$00			ldy 	#0
.8cfc					_PSXALoop:
.8cfc	b1 36		lda ($36),y			lda 	(zTemp0),y
.8cfe	f0 06		beq $8d06			beq 	_PSXAExit
.8d00	20 7b a7	jsr $a77b			jsr 	EXTPrintCharacter
.8d03	c8		iny				iny
.8d04	80 f6		bra $8cfc			bra 	_PSXALoop
.8d06					_PSXAExit:
.8d06	7a		ply				ply
.8d07	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/compare.asm

.8d08					UnaryTrue:
.8d08	fa		plx				plx
.8d09					ReturnTrue:
.8d09	a9 01		lda #$01			lda 	#1  						; set to 1
.8d0b	20 f1 97	jsr $97f1			jsr 	NSMSetByte
.8d0e	a9 80		lda #$80			lda 	#$80 						; set sign flag, so it is -1
.8d10	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8d13	60		rts				rts
.8d14					UnaryFalse:
.8d14	fa		plx				plx
.8d15					ReturnFalse:
.8d15	4c ef 97	jmp $97ef			jmp 	NSMSetZero 					; set it all to zero
.8d18					BinaryCompareEqual:
.8d18	fa		plx				plx
.8d19	20 54 8d	jsr $8d54			jsr 	CompareBaseCode
.8d1c	c9 00		cmp #$00			cmp 	#0
.8d1e	f0 e9		beq $8d09			beq 	ReturnTrue
.8d20	80 f3		bra $8d15			bra 	ReturnFalse
.8d22					BinaryCompareLess:
.8d22	fa		plx				plx
.8d23	20 54 8d	jsr $8d54			jsr 	CompareBaseCode
.8d26	c9 ff		cmp #$ff			cmp 	#$FF
.8d28	f0 df		beq $8d09			beq 	ReturnTrue
.8d2a	80 e9		bra $8d15			bra 	ReturnFalse
.8d2c					BinaryCompareGreater:
.8d2c	fa		plx				plx
.8d2d	20 54 8d	jsr $8d54			jsr 	CompareBaseCode
.8d30	c9 01		cmp #$01			cmp 	#1
.8d32	f0 d5		beq $8d09			beq 	ReturnTrue
.8d34	80 df		bra $8d15			bra 	ReturnFalse
.8d36					BinaryCompareNotEqual:
.8d36	fa		plx				plx
.8d37	20 54 8d	jsr $8d54			jsr 	CompareBaseCode
.8d3a	c9 00		cmp #$00			cmp 	#0
.8d3c	d0 cb		bne $8d09			bne 	ReturnTrue
.8d3e	80 d5		bra $8d15			bra 	ReturnFalse
.8d40					BinaryCompareLessEqual:
.8d40	fa		plx				plx
.8d41	20 54 8d	jsr $8d54			jsr 	CompareBaseCode
.8d44	c9 01		cmp #$01			cmp 	#1
.8d46	d0 c1		bne $8d09			bne 	ReturnTrue
.8d48	80 cb		bra $8d15			bra 	ReturnFalse
.8d4a					BinaryCompareGreaterEqual:
.8d4a	fa		plx				plx
.8d4b	20 54 8d	jsr $8d54			jsr 	CompareBaseCode
.8d4e	c9 ff		cmp #$ff			cmp 	#$FF
.8d50	d0 b7		bne $8d09			bne 	ReturnTrue
.8d52	80 c1		bra $8d15			bra 	ReturnFalse
.8d54					CompareBaseCode:
.8d54	20 b5 91	jsr $91b5			jsr 	DereferenceTopTwo 			; make both values if references.
.8d57	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if either is a string.
.8d5a	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8d5d	29 10		and #$10			and 	#NSTString
.8d5f	d0 40		bne $8da1			bne 	_CBCString
.8d61	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check both are integers
.8d64	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8d67	d0 3b		bne $8da4			bne 	_CBCFloat
.8d69	bd 00 06	lda $0600,x			lda 	NSStatus,x
.8d6c	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8d6f	29 08		and #$08			and 	#NSTFloat
.8d71	d0 31		bne $8da4			bne 	_CBCFloat
.8d73	20 a7 8d	jsr $8da7			jsr 	CompareFixMinusZero
.8d76	e8		inx				inx
.8d77	20 a7 8d	jsr $8da7			jsr 	CompareFixMinusZero
.8d7a	ca		dex				dex
.8d7b	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; are the signs different ?
.8d7e	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.8d81	10 0b		bpl $8d8e			bpl 	_CDCSameSign
.8d83	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; if first one is -ve
.8d86	30 16		bmi $8d9e			bmi 	_CBCLess 					; return $FF
.8d88					_CBCGreater:
.8d88	a9 01		lda #$01			lda 	#1
.8d8a	60		rts				rts
.8d8b					_CBCEqual:
.8d8b	a9 00		lda #$00			lda 	#0
.8d8d	60		rts				rts
.8d8e					_CDCSameSign:
.8d8e	20 b7 8e	jsr $8eb7			jsr 	SubTopTwoStack 				; unsigned subtract
.8d91	20 1f 98	jsr $981f			jsr 	NSMIsZero 					; or the mantissa together
.8d94	f0 f5		beq $8d8b			beq 	_CBCEqual 					; -0 == 0
.8d96	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; sign of the result. if +ve return $01 else return $FF
.8d99	5d 01 06	eor $0601,x			eor 	NSStatus+1,x 				; however if both were -ve this is inverted
.8d9c	10 ea		bpl $8d88			bpl 	_CBCGreater
.8d9e					_CBCLess:
.8d9e	a9 ff		lda #$ff			lda 	#$FF
.8da0	60		rts				rts
.8da1					_CBCString:
.8da1	4c 0d 8e	jmp $8e0d			jmp 	CompareStrings
.8da4					_CBCFloat:
.8da4	4c 83 a1	jmp $a183			jmp 	CompareFloat
.8da7					CompareFixMinusZero:
.8da7	20 1f 98	jsr $981f			jsr 	NSMIsZero
.8daa	d0 03		bne $8daf			bne 	_CFXMZNotZero
.8dac	9e 00 06	stz $0600,x			stz 	NSStatus,x
.8daf					_CFXMZNotZero:
.8daf	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/concat.asm

.8db0					StringConcat:
.8db0	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check both strings
.8db3	3d 01 06	and $0601,x			and 	NSStatus+1,x
.8db6	29 18		and #$18			and 	#NSBTypeMask
.8db8	c9 10		cmp #$10			cmp 	#NSTString
.8dba	d0 4e		bne $8e0a			bne		_SCType
.8dbc	64 38		stz $38				stz 	zTemp1 						; counting total length
.8dbe	e8		inx				inx
.8dbf	20 dd 8d	jsr $8ddd			jsr 	_SCSetupZ0 					; setup for second
.8dc2	20 e8 8d	jsr $8de8			jsr 	_SCLengthZ0 				; length for second
.8dc5	ca		dex				dex
.8dc6	20 dd 8d	jsr $8ddd			jsr 	_SCSetupZ0 					; setup for first
.8dc9	20 e8 8d	jsr $8de8			jsr 	_SCLengthZ0 				; length for first
.8dcc	a5 38		lda $38				lda 	zTemp1 						; allocate memory
.8dce	20 2e a7	jsr $a72e			jsr 	StringTempAllocate
.8dd1	20 fb 8d	jsr $8dfb			jsr 	_SCCopy 					; copy first out, using zTemp0 from above
.8dd4	e8		inx				inx
.8dd5	20 dd 8d	jsr $8ddd			jsr 	_SCSetupZ0 					; copy second out
.8dd8	20 fb 8d	jsr $8dfb			jsr 	_SCCopy
.8ddb	ca		dex				dex
.8ddc	60		rts				rts
.8ddd					_SCSetupZ0:
.8ddd	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.8de0	85 36		sta $36				sta 	zTemp0
.8de2	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8de5	85 37		sta $37				sta 	zTemp0+1
.8de7	60		rts				rts
.8de8					_SCLengthZ0:
.8de8	5a		phy				phy
.8de9	a0 00		ldy #$00			ldy 	#0
.8deb					_SCLenLoop:
.8deb	b1 36		lda ($36),y			lda 	(zTemp0),y
.8ded	f0 0a		beq $8df9			beq 	_SCLExit
.8def	c8		iny				iny
.8df0	e6 38		inc $38				inc 	zTemp1
.8df2	10 f7		bpl $8deb			bpl		_SCLenLoop
.8df4	a9 09		lda #$09		lda	#9
.8df6	4c 9c 8c	jmp $8c9c		jmp	ErrorHandler
.8df9					_SCLExit:
.8df9	7a		ply				ply
.8dfa	60		rts				rts
.8dfb					_SCCopy:
.8dfb	5a		phy				phy
.8dfc	a0 00		ldy #$00			ldy 	#0
.8dfe					_SCCopyLoop:
.8dfe	b1 36		lda ($36),y			lda 	(zTemp0),y
.8e00	f0 06		beq $8e08			beq 	_SCCExit
.8e02	20 6c a7	jsr $a76c			jsr 	StringTempWrite
.8e05	c8		iny				iny
.8e06	80 f6		bra $8dfe			bra 	_SCCopyLoop
.8e08					_SCCExit:
.8e08	7a		ply				ply
.8e09	60		rts				rts
.8e0a					_SCType:
.8e0a	4c 17 a5	jmp $a517			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/divide.asm

.9f44					IntegerDivide:
.9f44	fa		plx				plx
.9f45	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.9f48	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.9f4b	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9f4c	0a		asl a				asl 	a
.9f4d	10 05		bpl $9f54			bpl 	_NotRef
.9f4f	48		pha				pha
.9f50	20 b5 91	jsr $91b5			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9f53	68		pla				pla
.9f54					_NotRef:
.9f54	0a		asl a				asl 	a
.9f55	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9f57	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9f5a	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.9f5d	f0 03		beq $9f62			beq 	_IntegerCode 				; if clear, then we have two integers
.9f5f	4c 17 a5	jmp $a517			jmp 	TypeError 					; anything else, type mismatch.
.9f62					_IntegerCode:
.9f62	20 84 9f	jsr $9f84			jsr 	CheckDivideZero 			; do div zero check
.9f65	20 bc 9f	jsr $9fbc			jsr 	Int32Divide 				; do the division
.9f68	20 79 a0	jsr $a079			jsr 	CalculateSign 				; calculate result sign
.9f6b					NSMCopyPlusTwoToZero:
.9f6b	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; copy result down from +2
.9f6e	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.9f71	bd 12 06	lda $0612,x			lda 	NSMantissa1+2,x
.9f74	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9f77	bd 1a 06	lda $061a,x			lda 	NSMantissa2+2,x
.9f7a	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.9f7d	bd 22 06	lda $0622,x			lda 	NSMantissa3+2,x
.9f80	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.9f83	60		rts				rts
.9f84					CheckDivideZero:
.9f84	e8		inx				inx
.9f85	20 1f 98	jsr $981f			jsr 	NSMIsZero
.9f88	f0 02		beq $9f8c			beq 	_CDVError
.9f8a	ca		dex				dex
.9f8b	60		rts				rts
.9f8c					_CDVError:
.9f8c	a9 03		lda #$03		lda	#3
.9f8e	4c 9c 8c	jmp $8c9c		jmp	ErrorHandler
.9f91					IntegerModulus:
.9f91	fa		plx				plx
.9f92	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.9f95	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.9f98	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9f99	0a		asl a				asl 	a
.9f9a	10 05		bpl $9fa1			bpl 	_NotRef
.9f9c	48		pha				pha
.9f9d	20 b5 91	jsr $91b5			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9fa0	68		pla				pla
.9fa1					_NotRef:
.9fa1	0a		asl a				asl 	a
.9fa2	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9fa4	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9fa7	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.9faa	f0 03		beq $9faf			beq 	_IntegerCode 				; if clear, then we have two integers
.9fac	4c 17 a5	jmp $a517			jmp 	TypeError 					; anything else, type mismatch.
.9faf					_IntegerCode:
.9faf	20 84 9f	jsr $9f84			jsr 	CheckDivideZero 			; do div zero check
.9fb2	20 bc 9f	jsr $9fbc			jsr 	Int32Divide 				; do the division
.9fb5	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; clear the sign bit.
.9fb8	5e 00 06	lsr $0600,x			lsr 	NSStatus,x
.9fbb	60		rts				rts
.9fbc					Int32Divide:
.9fbc	48		pha				pha 								; save AXY
.9fbd	5a		phy				phy
.9fbe	20 c6 97	jsr $97c6			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.9fc1	20 eb 97	jsr $97eb			jsr 	NSMSetZeroMantissaOnly 		; set S[X] to zero
.9fc4	a0 20		ldy #$20			ldy 	#32 						; loop 32 times
.9fc6					_I32DivideLoop:
.9fc6	e8		inx				inx
.9fc7	e8		inx				inx
.9fc8	20 04 98	jsr $9804			jsr 	NSMShiftLeft				; shift S[X+2] S[X] left as a 64 bit element
.9fcb	ca		dex				dex
.9fcc	ca		dex				dex
.9fcd	20 05 98	jsr $9805			jsr 	NSMRotateLeft
.9fd0	20 fc 9f	jsr $9ffc			jsr 	DivideCheckSubtract 		; check if subtract possible
.9fd3	90 03		bcc $9fd8			bcc 	_I32DivideNoCarryIn
.9fd5	fe 0a 06	inc $060a,x			inc 	NSMantissa0+2,x 			; if possible, set Mantissa0[X+2].0
.9fd8					_I32DivideNoCarryIn:
.9fd8	88		dey				dey 								; loop round till division completed.
.9fd9	d0 eb		bne $9fc6			bne 	_I32DivideLoop
.9fdb	7a		ply				ply 								; restore AXY and exit
.9fdc	68		pla				pla
.9fdd	60		rts				rts
.9fde					Int32ShiftDivide:
.9fde	48		pha				pha 								; save AY
.9fdf	5a		phy				phy
.9fe0	e8		inx				inx 								; clear S[X+2]
.9fe1	e8		inx				inx
.9fe2	20 ef 97	jsr $97ef			jsr 	NSMSetZero
.9fe5	ca		dex				dex
.9fe6	ca		dex				dex
.9fe7	a0 1f		ldy #$1f			ldy 	#31 						; loop 31 times.
.9fe9					_I32SDLoop:
.9fe9	20 fc 9f	jsr $9ffc			jsr 	DivideCheckSubtract 		; check if subtract possible
.9fec	e8		inx				inx
.9fed	e8		inx				inx
.9fee	20 05 98	jsr $9805			jsr 	NSMRotateLeft				; shift 64 bit FPA left, rotating carry in
.9ff1	ca		dex				dex
.9ff2	ca		dex				dex
.9ff3	20 05 98	jsr $9805			jsr 	NSMRotateLeft
.9ff6	88		dey				dey 	 							; do 31 times
.9ff7	d0 f0		bne $9fe9			bne 	_I32SDLoop
.9ff9	7a		ply				ply 								; restore AY and exit
.9ffa	68		pla				pla
.9ffb	60		rts				rts
.9ffc					DivideCheckSubtract:
.9ffc	20 b7 8e	jsr $8eb7			jsr 	SubTopTwoStack 				; subtract Stack[X+1] from Stack[X+0]
.9fff	b0 04		bcs $a005			bcs 	_DCSExit 					; if carry set, then could do, exit
.a001	20 91 8e	jsr $8e91			jsr 	AddTopTwoStack 				; add it back in
.a004	18		clc				clc 								; and return False
.a005					_DCSExit:
.a005	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/multiply.asm

.a006					MulInteger:
.a006	fa		plx				plx
.a007	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.a00a	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.a00d	0a		asl a				asl 	a 							; shift reference bit into sign bit
.a00e	0a		asl a				asl 	a
.a00f	10 05		bpl $a016			bpl 	_NotRef
.a011	48		pha				pha
.a012	20 b5 91	jsr $91b5			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.a015	68		pla				pla
.a016					_NotRef:
.a016	0a		asl a				asl 	a 							; put MSB of type into A:7
.a017	30 0b		bmi $a024			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.a019	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.a01c	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.a01f	f0 06		beq $a027			beq 	_IntegerCode 				; if clear, then we have two integers
.a021	4c 5a a2	jmp $a25a			jmp 	FloatingPointMultiply 							; otherwise at least one float.
.a024					_StringData:
.a024	4c 21 a5	jmp $a521			jmp 	NotDoneError							; at least one string - don't know both are strings.
.a027					_IntegerCode:
.a027	20 34 a0	jsr $a034			jsr 	MultiplyShort
.a02a	c9 00		cmp #$00			cmp 	#0
.a02c	f0 05		beq $a033			beq 	_MIExit
.a02e	a9 04		lda #$04		lda	#4
.a030	4c 9c 8c	jmp $8c9c		jmp	ErrorHandler
.a033					_MIExit:
.a033	60		rts				rts
.a034					MultiplyShort:
.a034	5a		phy				phy 								; save Y
.a035	20 c6 97	jsr $97c6			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2]
.a038	20 eb 97	jsr $97eb			jsr 	NSMSetZeroMantissaOnly 		; set mantissa S[X] to zero
.a03b	a0 00		ldy #$00			ldy 	#0 							; Y is the shift count.
.a03d					_I32MLoop:
.a03d	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; check S[X+2] is zero
.a040	1d 12 06	ora $0612,x			ora 	NSMantissa1+2,x
.a043	1d 1a 06	ora $061a,x			ora 	NSMantissa2+2,x
.a046	1d 22 06	ora $0622,x			ora 	NSMantissa3+2,x
.a049	f0 28		beq $a073			beq 	_I32MExit 					; exit if zero
.a04b	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; check LSB of n1
.a04e	29 01		and #$01			and 	#1
.a050	f0 0e		beq $a060			beq 	_I32MNoAdd
.a052	20 91 8e	jsr $8e91			jsr 	AddTopTwoStack 				; if so add S[X+1] to S[X+0]
.a055	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; has MantissaA overflowed ?
.a058	10 06		bpl $a060			bpl 	_I32MNoAdd
.a05a					_I32ShiftRight:
.a05a	20 12 98	jsr $9812			jsr 	NSMShiftRight 				; shift S[X] right
.a05d	c8		iny				iny 								; increment shift count
.a05e	80 0a		bra $a06a			bra 	_I32MShiftUpper 			; n2 is doubled by default.
.a060					_I32MNoAdd:
.a060	3c 21 06	bit $0621,x			bit 	NSMantissa3+1,x				; if we can't shift S[X+1] left, shift everything right
.a063	70 f5		bvs $a05a			bvs 	_I32ShiftRight 				; instead.
.a065	e8		inx				inx
.a066	20 04 98	jsr $9804			jsr 	NSMShiftLeft 				; shift additive S[X+1] left
.a069	ca		dex				dex
.a06a					_I32MShiftUpper:
.a06a	e8		inx				inx 								; shift S[X+2] right
.a06b	e8		inx				inx
.a06c	20 12 98	jsr $9812			jsr 	NSMShiftRight
.a06f	ca		dex				dex
.a070	ca		dex				dex
.a071	80 ca		bra $a03d			bra 	_I32MLoop 					; try again.
.a073					_I32MExit:
.a073	20 79 a0	jsr $a079			jsr 	CalculateSign
.a076	98		tya				tya 								; shift in A
.a077	7a		ply				ply 								; restore Y and exit
.a078	60		rts				rts
.a079					CalculateSign:
.a079	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; sign of result is 0 if same, 1 if different.
.a07c	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; shift result left
.a07f	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.a082	0a		asl a				asl 	a 							; shift bit 7 into carry
.a083	7e 00 06	ror $0600,x			ror 	NSStatus,x 					; shift right into status byte.
.a086	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/scompare.asm

.8e0d					CompareStrings:
.8e0d	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check both are strings
.8e10	3d 01 06	and $0601,x			and 	NSStatus+1,x
.8e13	29 10		and #$10			and 	#NSBIsString
.8e15	f0 2c		beq $8e43			beq 	_CSTypeError
.8e17	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy string addresses to zTemp0/1
.8e1a	85 36		sta $36				sta 	zTemp0
.8e1c	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.8e1f	85 37		sta $37				sta 	zTemp0+1
.8e21	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.8e24	85 38		sta $38				sta 	zTemp1
.8e26	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.8e29	85 39		sta $39				sta 	zTemp1+1
.8e2b	5a		phy				phy 								; save Y so we can access strings
.8e2c	a0 ff		ldy #$ff			ldy 	#$FF 						; -1 for pre increment.
.8e2e					_CSLoop:
.8e2e	c8		iny				iny
.8e2f	b1 36		lda ($36),y			lda 	(zTemp0),y 					; check if they are the same
.8e31	d1 38		cmp ($38),y			cmp 	(zTemp1),y
.8e33	d0 06		bne $8e3b			bne 	_CSDifferent
.8e35	c9 00		cmp #$00			cmp 	#0 							; reached end ?
.8e37	d0 f5		bne $8e2e			bne 	_CSLoop 					; still comparing
.8e39					_CSExit:
.8e39	7a		ply				ply 								; reached end, return zero in A from EOS
.8e3a	60		rts				rts
.8e3b					_CSDifferent:
.8e3b	a9 ff		lda #$ff			lda 	#255 						; if < return $FF
.8e3d	90 fa		bcc $8e39			bcc		_CSExit
.8e3f	a9 01		lda #$01			lda 	#1 							; otherwise return 1.
.8e41	80 f6		bra $8e39			bra 	_CSExit
.8e43					_CSTypeError:
.8e43	4c 17 a5	jmp $a517			jmp 	TypeError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/shifts.asm

.8e46					ShiftLeft:
.8e46	38		sec				sec
.8e47	80 01		bra $8e4a			bra 	ShiftMain
.8e49					ShiftRight:
.8e49	18		clc				clc
.8e4a					ShiftMain:
.8e4a	fa		plx				plx 								; restore X
.8e4b	08		php				php 								; save direction
.8e4c	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8e4f	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8e52	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8e53	0a		asl a				asl 	a
.8e54	10 05		bpl $8e5b			bpl 	_NotRef
.8e56	48		pha				pha
.8e57	20 b5 91	jsr $91b5			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8e5a	68		pla				pla
.8e5b					_NotRef:
.8e5b	0a		asl a				asl 	a
.8e5c	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8e5e	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8e61	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8e64	f0 03		beq $8e69			beq 	_IntegerCode 				; if clear, then we have two integers
.8e66	4c 17 a5	jmp $a517			jmp 	TypeError 					; anything else, type mismatch.
.8e69					_IntegerCode:
.8e69	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; check number < 32
.8e6c	29 e0		and #$e0			and 	#$E0
.8e6e	1d 11 06	ora $0611,x			ora 	NSMantissa1+1,x
.8e71	1d 19 06	ora $0619,x			ora 	NSMantissa2+1,x
.8e74	1d 21 06	ora $0621,x			ora 	NSMantissa3+1,x
.8e77	d0 13		bne $8e8c			bne 	_SMExit0 					; if >= 32 it will always return zero.
.8e79					_SMLoop:
.8e79	de 09 06	dec $0609,x			dec 	NSMantissa0+1,x 			; predecrement, could do << 0
.8e7c	30 11		bmi $8e8f			bmi 	_SMExit 					; exit if done.
.8e7e	28		plp				plp 								; restore direcition setting
.8e7f	08		php				php
.8e80	90 05		bcc $8e87			bcc 	_SMRight
.8e82	20 04 98	jsr $9804			jsr 	NSMShiftLeft 				; shift left if CS
.8e85	80 f2		bra $8e79			bra 	_SMLoop
.8e87					_SMRight:
.8e87	20 12 98	jsr $9812			jsr 	NSMShiftRight 				; shift right if CC
.8e8a	80 ed		bra $8e79			bra 	_SMLoop
.8e8c					_SMExit0:
.8e8c	20 ef 97	jsr $97ef			jsr 	NSMSetZero 					; return zero.
.8e8f					_SMExit:
.8e8f	28		plp				plp 								; throw direction
.8e90	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/simple.asm

.8e91					AddTopTwoStack:
.8e91	18		clc				clc
.8e92	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8e95	7d 09 06	adc $0609,x			adc 		NSMantissa0+1,x
.8e98	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8e9b	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8e9e	7d 11 06	adc $0611,x			adc 		NSMantissa1+1,x
.8ea1	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8ea4	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8ea7	7d 19 06	adc $0619,x			adc 		NSMantissa2+1,x
.8eaa	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8ead	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8eb0	7d 21 06	adc $0621,x			adc 		NSMantissa3+1,x
.8eb3	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8eb6	60		rts				rts
.8eb7					SubTopTwoStack:
.8eb7	38		sec				sec
.8eb8	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8ebb	fd 09 06	sbc $0609,x			sbc 		NSMantissa0+1,x
.8ebe	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8ec1	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8ec4	fd 11 06	sbc $0611,x			sbc 		NSMantissa1+1,x
.8ec7	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8eca	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8ecd	fd 19 06	sbc $0619,x			sbc 		NSMantissa2+1,x
.8ed0	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8ed3	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8ed6	fd 21 06	sbc $0621,x			sbc 		NSMantissa3+1,x
.8ed9	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8edc	60		rts				rts
.8edd					AddInteger:
.8edd	fa		plx				plx
.8ede	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8ee1	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8ee4	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8ee5	0a		asl a				asl 	a
.8ee6	10 05		bpl $8eed			bpl 	_NotRef
.8ee8	48		pha				pha
.8ee9	20 b5 91	jsr $91b5			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8eec	68		pla				pla
.8eed					_NotRef:
.8eed	0a		asl a				asl 	a 							; put MSB of type into A:7
.8eee	30 0b		bmi $8efb			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.8ef0	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8ef3	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8ef6	f0 06		beq $8efe			beq 	_IntegerCode 				; if clear, then we have two integers
.8ef8	4c e2 a0	jmp $a0e2			jmp 	FloatingPointAdd 							; otherwise at least one float.
.8efb					_StringData:
.8efb	4c b0 8d	jmp $8db0			jmp 	StringConcat							; at least one string - don't know both are strings.
.8efe					_IntegerCode:
.8efe					AddCode:
.8efe	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; signs are the same, can just add the mantissae.
.8f01	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.8f04	10 8b		bpl $8e91			bpl 	AddTopTwoStack
.8f06	20 b7 8e	jsr $8eb7			jsr 	SubTopTwoStack 				; do a physical subtraction
.8f09	3c 20 06	bit $0620,x			bit 	NSMantissa3,x 				; result is +ve, okay
.8f0c	10 09		bpl $8f17			bpl 	_AddExit
.8f0e	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; sign is that of 2nd value
.8f11	9d 00 06	sta $0600,x			sta 	NSStatus,x
.8f14	20 a4 97	jsr $97a4			jsr 	NSMNegateMantissa 			; negate the mantissa and exit
.8f17					_AddExit:
.8f17	60		rts				rts
.8f18					SubInteger:
.8f18	fa		plx				plx
.8f19	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8f1c	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8f1f	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8f20	0a		asl a				asl 	a
.8f21	10 05		bpl $8f28			bpl 	_NotRef
.8f23	48		pha				pha
.8f24	20 b5 91	jsr $91b5			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8f27	68		pla				pla
.8f28					_NotRef:
.8f28	0a		asl a				asl 	a 							; put MSB of type into A:7
.8f29	30 0b		bmi $8f36			bmi 	_StringData 				; if the original bit 4 was set then do the string code.
.8f2b	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8f2e	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8f31	f0 06		beq $8f39			beq 	_IntegerCode 				; if clear, then we have two integers
.8f33	4c e7 a0	jmp $a0e7			jmp 	FloatingPointSub 							; otherwise at least one float.
.8f36					_StringData:
.8f36	4c 21 a5	jmp $a521			jmp 	NotDoneError							; at least one string - don't know both are strings.
.8f39					_IntegerCode:
.8f39	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; negate the second value.
.8f3c	49 80		eor #$80			eor 	#$80
.8f3e	9d 01 06	sta $0601,x			sta 	NSStatus+1,x
.8f41	80 bb		bra $8efe			bra 	AddCode 					; and do the same code as add.
.8f43					AndInteger:
.8f43	fa		plx				plx
.8f44	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8f47	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8f4a	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8f4b	0a		asl a				asl 	a
.8f4c	10 05		bpl $8f53			bpl 	_NotRef
.8f4e	48		pha				pha
.8f4f	20 b5 91	jsr $91b5			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8f52	68		pla				pla
.8f53					_NotRef:
.8f53	0a		asl a				asl 	a
.8f54	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8f56	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8f59	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8f5c	f0 03		beq $8f61			beq 	_IntegerCode 				; if clear, then we have two integers
.8f5e	4c 17 a5	jmp $a517			jmp 	TypeError 					; anything else, type mismatch.
.8f61					_IntegerCode:
.8f61	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8f64	3d 09 06	and $0609,x			and 		NSMantissa0+1,x
.8f67	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8f6a	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8f6d	3d 11 06	and $0611,x			and 		NSMantissa1+1,x
.8f70	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8f73	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8f76	3d 19 06	and $0619,x			and 		NSMantissa2+1,x
.8f79	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8f7c	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8f7f	3d 21 06	and $0621,x			and 		NSMantissa3+1,x
.8f82	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8f85	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.8f88	60		rts				rts
.8f89					OraInteger:
.8f89	fa		plx				plx
.8f8a	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8f8d	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8f90	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8f91	0a		asl a				asl 	a
.8f92	10 05		bpl $8f99			bpl 	_NotRef
.8f94	48		pha				pha
.8f95	20 b5 91	jsr $91b5			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8f98	68		pla				pla
.8f99					_NotRef:
.8f99	0a		asl a				asl 	a
.8f9a	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8f9c	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8f9f	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8fa2	f0 03		beq $8fa7			beq 	_IntegerCode 				; if clear, then we have two integers
.8fa4	4c 17 a5	jmp $a517			jmp 	TypeError 					; anything else, type mismatch.
.8fa7					_IntegerCode:
.8fa7	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8faa	1d 09 06	ora $0609,x			ora 		NSMantissa0+1,x
.8fad	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8fb0	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8fb3	1d 11 06	ora $0611,x			ora 		NSMantissa1+1,x
.8fb6	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8fb9	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.8fbc	1d 19 06	ora $0619,x			ora 		NSMantissa2+1,x
.8fbf	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.8fc2	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.8fc5	1d 21 06	ora $0621,x			ora 		NSMantissa3+1,x
.8fc8	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.8fcb	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.8fce	60		rts				rts
.8fcf					EorInteger:
.8fcf	fa		plx				plx
.8fd0	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.8fd3	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.8fd6	0a		asl a				asl 	a 							; shift reference bit into sign bit
.8fd7	0a		asl a				asl 	a
.8fd8	10 05		bpl $8fdf			bpl 	_NotRef
.8fda	48		pha				pha
.8fdb	20 b5 91	jsr $91b5			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.8fde	68		pla				pla
.8fdf					_NotRef:
.8fdf	0a		asl a				asl 	a
.8fe0	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.8fe2	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.8fe5	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.8fe8	f0 03		beq $8fed			beq 	_IntegerCode 				; if clear, then we have two integers
.8fea	4c 17 a5	jmp $a517			jmp 	TypeError 					; anything else, type mismatch.
.8fed					_IntegerCode:
.8fed	bd 08 06	lda $0608,x			lda		NSMantissa0,x
.8ff0	5d 09 06	eor $0609,x			eor 		NSMantissa0+1,x
.8ff3	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.8ff6	bd 10 06	lda $0610,x			lda		NSMantissa1,x
.8ff9	5d 11 06	eor $0611,x			eor 		NSMantissa1+1,x
.8ffc	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.8fff	bd 18 06	lda $0618,x			lda		NSMantissa2,x
.9002	5d 19 06	eor $0619,x			eor 		NSMantissa2+1,x
.9005	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.9008	bd 20 06	lda $0620,x			lda		NSMantissa3,x
.900b	5d 21 06	eor $0621,x			eor 		NSMantissa3+1,x
.900e	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.9011	9e 00 06	stz $0600,x			stz	 	NSStatus,x 					; ignore sign.
.9014	60		rts				rts
.9015					WordIndirect:
.9015	fa		plx				plx
.9016	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.9019	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.901c	0a		asl a				asl 	a 							; shift reference bit into sign bit
.901d	0a		asl a				asl 	a
.901e	10 05		bpl $9025			bpl 	_NotRef
.9020	48		pha				pha
.9021	20 b5 91	jsr $91b5			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.9024	68		pla				pla
.9025					_NotRef:
.9025	0a		asl a				asl 	a
.9026	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.9028	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.902b	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.902e	f0 03		beq $9033			beq 	_IntegerCode 				; if clear, then we have two integers
.9030	4c 17 a5	jmp $a517			jmp 	TypeError 					; anything else, type mismatch.
.9033					_IntegerCode:
.9033	20 fe 8e	jsr $8efe			jsr 	AddCode 					; add the two values
.9036	a9 22		lda #$22			lda 	#NSBIsReference+2 			; make a 2 byte reference
.9038	9d 00 06	sta $0600,x			sta 	NSStatus,x
.903b	60		rts				rts
.903c					ByteIndirect:
.903c	fa		plx				plx
.903d	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; OR the type data together
.9040	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.9043	0a		asl a				asl 	a 							; shift reference bit into sign bit
.9044	0a		asl a				asl 	a
.9045	10 05		bpl $904c			bpl 	_NotRef
.9047	48		pha				pha
.9048	20 b5 91	jsr $91b5			jsr 	DereferenceTopTwo 			; call the dereference code preserving A
.904b	68		pla				pla
.904c					_NotRef:
.904c	0a		asl a				asl 	a
.904d	29 c0		and #$c0			and 	#$C0 						; isolate the type bits which have been shifted
.904f	1d 28 06	ora $0628,x			ora 	NSExponent,x 				; check if both exponents are zero, e.g. both integers
.9052	1d 29 06	ora $0629,x			ora 	NSExponent+1,x
.9055	f0 03		beq $905a			beq 	_IntegerCode 				; if clear, then we have two integers
.9057	4c 17 a5	jmp $a517			jmp 	TypeError 					; anything else, type mismatch.
.905a					_IntegerCode:
.905a	20 fe 8e	jsr $8efe			jsr 	AddCode 					; add the two values
.905d	a9 21		lda #$21			lda 	#NSBIsReference+1 			; make a 1 byte reference
.905f	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9062	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/binary/tostring.asm

.a087					ConvertInt16:
.a087	8d 08 06	sta $0608			sta 	NSMantissa0 				; set up as 32 bit conversion
.a08a	8e 10 06	stx $0610			stx 	NSMantissa1
.a08d	9c 18 06	stz $0618			stz 	NSMantissa2
.a090	9c 20 06	stz $0620			stz 	NSMantissa3
.a093	9c 00 06	stz $0600			stz 	NSStatus 					; positive integer
.a096	a2 00		ldx #$00			ldx 	#0 							; stack level
.a098	a9 0a		lda #$0a			lda 	#10 						; base
.a09a	80 00		bra $a09c			bra 	ConvertInt32
.a09c					ConvertInt32:
.a09c	5a		phy				phy
.a09d	a0 00		ldy #$00			ldy  	#0 							; index into buffer.
.a09f	2c 00 06	bit $0600			bit 	NSStatus 					; output a - if not negative.
.a0a2	10 08		bpl $a0ac			bpl 	_CI32NotNeg
.a0a4	48		pha				pha
.a0a5	a9 2d		lda #$2d			lda 	#'-'
.a0a7	99 76 08	sta $0876,y			sta 	NumberBuffer,y
.a0aa	c8		iny				iny
.a0ab	68		pla				pla
.a0ac					_CI32NotNeg:
.a0ac	20 ba a0	jsr $a0ba			jsr 	_CI32DivideConvert 			; recursive conversion
.a0af	a9 00		lda #$00			lda 	#0 							; make ASCIIZ
.a0b1	99 76 08	sta $0876,y			sta 	NumberBuffer,y
.a0b4	7a		ply				ply
.a0b5	a2 08		ldx #$08			ldx 	#NumberBuffer >> 8
.a0b7	a9 76		lda #$76			lda 	#NumberBuffer & $FF
.a0b9	60		rts				rts
.a0ba					_CI32DivideConvert:
.a0ba	e8		inx				inx 								; write to next slot up
.a0bb	20 f1 97	jsr $97f1			jsr 	NSMSetByte
.a0be	ca		dex				dex
.a0bf	20 bc 9f	jsr $9fbc			jsr 	Int32Divide 				; divide
.a0c2	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; save remainder
.a0c5	48		pha				pha
.a0c6	20 6b 9f	jsr $9f6b			jsr 	NSMCopyPlusTwoToZero 		; Copy the divide result into place.
.a0c9	20 1f 98	jsr $981f			jsr 	NSMIsZero 					; is it zero ?
.a0cc	f0 06		beq $a0d4			beq 	_CI32NoRecurse 				; if so, don't recursively call.
.a0ce	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; this is the base which is not changed by divide
.a0d1	20 ba a0	jsr $a0ba			jsr 	_CI32DivideConvert 			; and recusrively call.
.a0d4					_CI32NoRecurse:
.a0d4	68		pla				pla 								; remainder
.a0d5	c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII
.a0d7	90 02		bcc $a0db			bcc 	_CI32NotHex
.a0d9	69 26		adc #$26			adc 	#6+32
.a0db					_CI32NotHex:
.a0db	69 30		adc #$30			adc 	#48
.a0dd	99 76 08	sta $0876,y			sta 	NumberBuffer,y 				; write out and exit
.a0e0	c8		iny				iny
.a0e1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/expression.asm


;******  Processing file: ./common/expressions/../generated/precedence.dat

.9063					PrecedenceLevel:
>9063	04					.byte	 4	; $00 <<
>9064	02					.byte	 2	; $01 <=
>9065	02					.byte	 2	; $02 <>
>9066	00					.byte	 0	; $03 !!3
>9067	00					.byte	 0	; $04 ><
>9068	02					.byte	 2	; $05 >=
>9069	04					.byte	 4	; $06 >>
>906a	00					.byte	 0	; $07 !!7
>906b	00					.byte	 0	; $08 !!8
>906c	00					.byte	 0	; $09 !!9
>906d	00					.byte	 0	; $0a !!10
>906e	00					.byte	 0	; $0b !!11
>906f	00					.byte	 0	; $0c !!12
>9070	00					.byte	 0	; $0d !!13
>9071	00					.byte	 0	; $0e !!14
>9072	00					.byte	 0	; $0f !!15
>9073	00					.byte	 0	; $10 @
>9074	00					.byte	 0	; $11 !!17
>9075	00					.byte	 0	; $12 !!18
>9076	00					.byte	 0	; $13 [
>9077	04					.byte	 4	; $14 \
>9078	00					.byte	 0	; $15 ]
>9079	01					.byte	 1	; $16 ^
>907a	00					.byte	 0	; $17 _
>907b	00					.byte	 0	; $18 `
>907c	00					.byte	 0	; $19 !!25
>907d	00					.byte	 0	; $1a !!26
>907e	00					.byte	 0	; $1b {
>907f	01					.byte	 1	; $1c |
>9080	00					.byte	 0	; $1d }
>9081	00					.byte	 0	; $1e ~
>9082	00					.byte	 0	; $1f [7m<7F>[m
>9083	00					.byte	 0	; $20
>9084	05					.byte	 5	; $21 !
>9085	00					.byte	 0	; $22 "
>9086	00					.byte	 0	; $23 #
>9087	05					.byte	 5	; $24 $
>9088	04					.byte	 4	; $25 %
>9089	01					.byte	 1	; $26 &
>908a	00					.byte	 0	; $27 '
>908b	00					.byte	 0	; $28 (
>908c	00					.byte	 0	; $29 )
>908d	04					.byte	 4	; $2a *
>908e	03					.byte	 3	; $2b +
>908f	00					.byte	 0	; $2c ,
>9090	03					.byte	 3	; $2d -
>9091	00					.byte	 0	; $2e .
>9092	04					.byte	 4	; $2f /
>9093	00					.byte	 0	; $30 0
>9094	00					.byte	 0	; $31 1
>9095	00					.byte	 0	; $32 2
>9096	00					.byte	 0	; $33 3
>9097	00					.byte	 0	; $34 4
>9098	00					.byte	 0	; $35 5
>9099	00					.byte	 0	; $36 6
>909a	00					.byte	 0	; $37 7
>909b	00					.byte	 0	; $38 8
>909c	00					.byte	 0	; $39 9
>909d	00					.byte	 0	; $3a :
>909e	00					.byte	 0	; $3b ;
>909f	02					.byte	 2	; $3c <
>90a0	02					.byte	 2	; $3d =
>90a1	02					.byte	 2	; $3e >
>90a2	05					.byte	 5	; $3f ?

;******  Return to file: ./common/expressions/expression.asm

.90a3					EvaluateExpressionAt0:
.90a3	a2 00		ldx #$00			ldx 	#0 							; bottom stack level
.90a5					EvaluateExpression:
.90a5	a9 00		lda #$00			lda 	#0 							; lowest precedence level
.90a7					EvaluateExpressionAtPrecedence:
.90a7	48		pha				pha 								; save precedence level
.90a8	20 76 93	jsr $9376			jsr 	EvaluateTerm 				; evaluate term into level X.
.90ab	68		pla				pla 								; restore precedence level.
.90ac					_EXPRLoop:
.90ac	85 36		sta $36				sta 	zTemp0 						; save current precedence level.
.90ae	b1 30		lda ($30),y			lda 	(codePtr),y
.90b0	c9 40		cmp #$40			cmp		#$40 						; if >= $40 cannot be an operator
.90b2	b0 25		bcs $90d9			bcs 	_EXPRExit
.90b4	da		phx				phx 								; read the operator precedence
.90b5	aa		tax				tax
.90b6	bd 63 90	lda $9063,x			lda 	PrecedenceLevel,x
.90b9	fa		plx				plx
.90ba	c9 00		cmp #$00			cmp 	#0							; if zero exit (not an operator)
.90bc	f0 1b		beq $90d9			beq 	_EXPRExit
.90be	85 37		sta $37				sta 	zTemp0+1 					; save operator precedence level.
.90c0	a5 36		lda $36				lda 	zTemp0 						; compare current precedence vs. operator precedence
.90c2	c5 37		cmp $37				cmp 	zTemp0+1
.90c4	b0 13		bcs $90d9			bcs		_EXPRExit 					; if current >= operator exit
.90c6	48		pha				pha 								; save current precedence.
.90c7	b1 30		lda ($30),y			lda 	(codePtr),y
.90c9	c8		iny				iny
.90ca	48		pha				pha
.90cb	a5 37		lda $37				lda 	zTemp0+1 					; get operator precedence level
.90cd	e8		inx				inx 								; work out the right hand side.
.90ce	20 a7 90	jsr $90a7			jsr 	EvaluateExpressionAtPrecedence
.90d1	ca		dex				dex
.90d2	68		pla				pla 								; get operator, call the code.
.90d3	20 dc 90	jsr $90dc			jsr 	_EXPRCaller
.90d6	68		pla				pla 								; restore precedence level
.90d7	80 d3		bra $90ac			bra 	_EXPRLoop 					; and go round.
.90d9					_EXPRExit:
.90d9	a5 36		lda $36				lda 	zTemp0 						; A = current precedence level.
.90db	60		rts				rts
.90dc					_EXPRCaller:
.90dc	da		phx				phx 								; save on stack, first thing is to restore it
.90dd	0a		asl a				asl 	a 							; double so can use vectors into X
.90de	aa		tax				tax
.90df	7c 7e 80	jmp ($807e,x)			jmp 	(VectorSetPunc,x) 			; and go to the code.

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/addsub.asm

.a0e2					FloatingPointAdd:
.a0e2	20 83 a2	jsr $a283			jsr 	FloatPrepare 				; prepare for floats
.a0e5	80 0b		bra $a0f2			bra 	FloatAdd
.a0e7					FloatingPointSub:
.a0e7	20 83 a2	jsr $a283			jsr 	FloatPrepare 				; prepare for floats
.a0ea					FloatSubtract:
.a0ea	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; negate FPB
.a0ed	49 80		eor #$80			eor 	#$80
.a0ef	9d 01 06	sta $0601,x			sta 	NSStatus+1,x				; and fall through.
.a0f2					FloatAdd:
.a0f2	48		pha				pha
.a0f3	5a		phy				phy
.a0f4	20 94 a2	jsr $a294			jsr 	NSNormalise 				; normalise S[X]
.a0f7	f0 54		beq $a14d			beq 	_FAReturn1
.a0f9	e8		inx				inx 								; normalise S[X+1]
.a0fa	20 94 a2	jsr $a294			jsr 	NSNormalise
.a0fd	ca		dex				dex
.a0fe	c9 00		cmp #$00			cmp 	#0
.a100	f0 6f		beq $a171			beq 	_FAExit 					; if so, just return A
.a102	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; are the exponents the same ?
.a105	dd 29 06	cmp $0629,x			cmp 	NSExponent+1,x
.a108	f0 1b		beq $a125			beq 	_FAExponentsEqual
.a10a	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; work out the larger exponent
.a10d	a8		tay				tay
.a10e	38		sec				sec 								; do a signed comparison of the exponents.
.a10f	fd 29 06	sbc $0629,x			sbc 	NSExponent+1,x
.a112	50 02		bvc $a116			bvc 	_FANoSignedChange
.a114	49 80		eor #$80			eor 	#$80
.a116					_FANoSignedChange:
.a116	29 80		and #$80			and 	#$80
.a118	10 03		bpl $a11d			bpl 	_FAHaveMax
.a11a	bc 29 06	ldy $0629,x			ldy 	NSExponent+1,x
.a11d					_FAHaveMax:
.a11d	20 74 a1	jsr $a174			jsr 	_FAShiftToExponent  		; shift both to the exponent in Y
.a120	e8		inx				inx
.a121	20 74 a1	jsr $a174			jsr 	_FAShiftToExponent
.a124	ca		dex				dex
.a125					_FAExponentsEqual:
.a125	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; are the signs the same
.a128	5d 01 06	eor $0601,x			eor 	NSStatus+1,x
.a12b	30 10		bmi $a13d			bmi 	_FADifferentSigns
.a12d	20 91 8e	jsr $8e91			jsr 	AddTopTwoStack 				; do the add of the mantissae
.a130	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; do we have an overflow in Mantissa A ?
.a133	10 3c		bpl $a171			bpl 	_FAExit 					; if no, we are done.
.a135	20 12 98	jsr $9812			jsr 	NSMShiftRight 				; shift A right, renormalising it.
.a138	fe 28 06	inc $0628,x			inc 	NSExponent,x 				; bump the exponent and exit
.a13b	80 34		bra $a171			bra 	_FAExit
.a13d					_FADifferentSigns:
.a13d	20 b7 8e	jsr $8eb7			jsr 	SubTopTwoStack 				; subtract mantissa B from A
.a140	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; is the result negative ?
.a143	10 2c		bpl $a171			bpl 	_FAExit 					; if no, we are done.
.a145	20 9b 97	jsr $979b			jsr 	NSMNegate 					; netate result
.a148	20 a4 97	jsr $97a4			jsr 	NSMNegateMantissa 			; negate (2'c) the mantissa
.a14b	80 24		bra $a171			bra 	_FAExit
.a14d					_FAReturn1:
.a14d	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.a150	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.a153	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.a156	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.a159	bd 19 06	lda $0619,x			lda 	NSMantissa2+1,x
.a15c	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.a15f	bd 21 06	lda $0621,x			lda 	NSMantissa3+1,x
.a162	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.a165	bd 29 06	lda $0629,x			lda 	NSExponent+1,x
.a168	9d 28 06	sta $0628,x			sta 	NSExponent,x
.a16b	bd 01 06	lda $0601,x			lda 	NSStatus+1,x
.a16e	9d 00 06	sta $0600,x			sta 	NSStatus,x
.a171					_FAExit:
.a171	7a		ply				ply
.a172	68		pla				pla
.a173	60		rts				rts
.a174					_FAShiftToExponent:
.a174					_FAShiftToExponent2:
.a174	98		tya				tya 								; compare Y to exponent
.a175	dd 28 06	cmp $0628,x			cmp 	NSExponent,x 				; reached the exponent required ?
.a178	f0 08		beq $a182			beq 	_FASEExit 					; exit if so.
.a17a	20 12 98	jsr $9812			jsr 	NSMShiftRight	 			; shift the mantissa right
.a17d	fe 28 06	inc $0628,x			inc 	NSExponent,x 				; increment exponent
.a180	80 f2		bra $a174			bra 	_FAShiftToExponent2
.a182					_FASEExit:
.a182	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/compare.asm

.a183					CompareFloat:
.a183	20 ea a0	jsr $a0ea			jsr 	FloatSubtract 				; Calculate S[X]-S[X+1]
.a186	bd 10 06	lda $0610,x			lda 	NSMantissa1,x 			 	; so we ignore this - by changing bits checked
.a189	29 f8		and #$f8			and 	#$F8
.a18b	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.a18e	1d 20 06	ora $0620,x			ora 	NSMantissa3,x
.a191	f0 09		beq $a19c			beq 	_FCExit 					; zero, so approximately identical
.a193	a9 01		lda #$01			lda 	#1 							; return +1 if result>0
.a195	3c 00 06	bit $0600,x			bit 	NSStatus,x
.a198	10 02		bpl $a19c			bpl 	_FCExit
.a19a					_FCNegative:
.a19a	a9 ff		lda #$ff			lda 	#$FF 						; and return -1 if result<0
.a19c					_FCExit:
.a19c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/divide.asm

.a19d					FDivideCommand:
.a19d	fa		plx				plx	 								; restore stack position
.a19e	20 83 a2	jsr $a283			jsr 	FloatPrepare 				; prepare for floats
.a1a1					FloatDivide:
.a1a1	48		pha				pha
.a1a2	e8		inx				inx
.a1a3	20 94 a2	jsr $a294			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.a1a6	ca		dex				dex
.a1a7	c9 00		cmp #$00			cmp 	#0
.a1a9	f0 20		beq $a1cb			beq 	_FDZero
.a1ab	20 94 a2	jsr $a294			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.a1ae	f0 19		beq $a1c9			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.a1b0	20 de 9f	jsr $9fde			jsr 	Int32ShiftDivide 			; do the shift division for dividing.
.a1b3	20 6b 9f	jsr $9f6b			jsr 	NSMCopyPlusTwoToZero 		; copy the mantissa down
.a1b6	20 94 a2	jsr $a294			jsr		NSNormalise 				; renormalise
.a1b9	20 79 a0	jsr $a079			jsr 	CalculateSign 				; calculate result sign
.a1bc	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; calculate exponent
.a1bf	38		sec				sec
.a1c0	fd 29 06	sbc $0629,x			sbc 	NSExponent+1,x
.a1c3	38		sec				sec
.a1c4	e9 1e		sbc #$1e			sbc 	#30
.a1c6	9d 28 06	sta $0628,x			sta 	NSExponent,x
.a1c9					_FDExit:
.a1c9	68		pla				pla
.a1ca	60		rts				rts
.a1cb					_FDZero:
.a1cb	a9 03		lda #$03		lda	#3
.a1cd	4c 9c 8c	jmp $8c9c		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/fractional.asm

.a1d0					FloatFractionalPart:
.a1d0	5a		phy				phy
.a1d1	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; take absolute value
.a1d4	29 7f		and #$7f			and 	#$7F
.a1d6	9d 00 06	sta $0600,x			sta 	NSStatus,x
.a1d9	20 94 a2	jsr $a294			jsr 	NSNormalise
.a1dc	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; calculate exponent-$E0 = digits to blank
.a1df	38		sec				sec
.a1e0	e9 e0		sbc #$e0			sbc 	#$E0
.a1e2	90 31		bcc $a215			bcc 	_FFPExit 					; already fractional
.a1e4	c9 20		cmp #$20			cmp 	#32 						; will be zero as blanking 32+ digits.
.a1e6	b0 2a		bcs $a212			bcs 	_FFPZero
.a1e8	a8		tay				tay 								; put count to do in Y
.a1e9	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; do each in turn.
.a1ec	20 17 a2	jsr $a217			jsr 	_FFPPartial
.a1ef	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.a1f2	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.a1f5	20 17 a2	jsr $a217			jsr 	_FFPPartial
.a1f8	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.a1fb	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.a1fe	20 17 a2	jsr $a217			jsr 	_FFPPartial
.a201	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.a204	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.a207	20 17 a2	jsr $a217			jsr 	_FFPPartial
.a20a	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.a20d	20 1f 98	jsr $981f			jsr 	NSMIsZero 					; zeroed check.
.a210	d0 03		bne $a215			bne 	_FFPExit
.a212					_FFPZero:
.a212	20 ef 97	jsr $97ef			jsr 	NSMSetZero
.a215					_FFPExit:
.a215	7a		ply				ply
.a216	60		rts				rts
.a217					_FFPPartial:
.a217	c0 00		cpy #$00			cpy 	#0 							; no more to do
.a219	f0 17		beq $a232			beq 	_FFFPPExit
.a21b	c0 08		cpy #$08			cpy 	#8 							; whole byte to do ?
.a21d	b0 0c		bcs $a22b			bcs 	_FFFPPWholeByte
.a21f	5a		phy				phy
.a220					_FFFPPLeft:
.a220	0a		asl a				asl 	a
.a221	88		dey				dey
.a222	d0 fc		bne $a220			bne 	_FFFPPLeft
.a224	7a		ply				ply
.a225					_FFFPPRight:
.a225	4a		lsr a				lsr 	a
.a226	88		dey				dey
.a227	d0 fc		bne $a225			bne 	_FFFPPRight
.a229	80 07		bra $a232			bra 	_FFFPPExit
.a22b					_FFFPPWholeByte:
.a22b	98		tya				tya 								; subtract 8 from count
.a22c	38		sec				sec
.a22d	e9 08		sbc #$08			sbc 	#8
.a22f	a8		tay				tay
.a230	a9 00		lda #$00			lda 	#0 							; and clear all
.a232					_FFFPPExit:
.a232	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/integer.asm

.a233					FloatIntegerPart:
.a233	48		pha				pha
.a234	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; is it integer already ?
.a237	f0 1f		beq $a258			beq 	_FIPExit 					; if so do nothing
.a239	20 1f 98	jsr $981f			jsr 	NSMIsZero 					; is it zero ?
.a23c	f0 17		beq $a255			beq 	_FIPZero 					; if so return zero.
.a23e	20 94 a2	jsr $a294			jsr 	NSNormalise 				; normalise
.a241	f0 12		beq $a255			beq 	_FIPZero 					; normalised to zero, exit zero
.a243					_FIPShift:
.a243	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; if Exponent >= 0 exit.
.a246	10 08		bpl $a250			bpl 	_FIPCheckZero
.a248	20 12 98	jsr $9812			jsr 	NSMShiftRight 				; shift mantissa right
.a24b	fe 28 06	inc $0628,x			inc 	NSExponent,x 				; bump exponent
.a24e	80 f3		bra $a243			bra 	_FIPShift
.a250					_FIPCheckZero:
.a250	20 1f 98	jsr $981f			jsr 	NSMIsZero 					; avoid -0 problem
.a253	d0 03		bne $a258			bne 	_FIPExit 					; set to zero if mantissa zero.
.a255					_FIPZero:
.a255	20 ef 97	jsr $97ef			jsr 	NSMSetZero
.a258					_FIPExit:
.a258	68		pla				pla
.a259	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/multiply.asm

.a25a					FloatingPointMultiply:
.a25a	20 83 a2	jsr $a283			jsr 	FloatPrepare 				; prepare for floats
.a25d					FloatMultiply:
.a25d	48		pha				pha
.a25e	20 94 a2	jsr $a294			jsr 	NSNormalise		 			; normalise S[X] and exit if zero
.a261	f0 1b		beq $a27e			beq 	_FDExit 					; return zero if zero (e.g. zero/something)
.a263	e8		inx				inx
.a264	20 94 a2	jsr $a294			jsr 	NSNormalise		 			; normalise S[x+1] and error if zero.
.a267	ca		dex				dex
.a268	c9 00		cmp #$00			cmp 	#0
.a26a	f0 0f		beq $a27b			beq 	_FDSetZero
.a26c	20 34 a0	jsr $a034			jsr 	MultiplyShort 				; calculate the result.
.a26f	7d 28 06	adc $0628,x			adc 	NSExponent,x 				; calculate exponent including the shift.
.a272	18		clc				clc
.a273	7d 29 06	adc $0629,x			adc 	NSExponent+1,x
.a276	9d 28 06	sta $0628,x			sta 	NSExponent,x
.a279	80 03		bra $a27e			bra 	_FDExit
.a27b					_FDSetZero:
.a27b	20 ef 97	jsr $97ef			jsr 	NSMSetZero 					; return 0
.a27e					_FDExit:
.a27e	20 94 a2	jsr $a294			jsr 	NSNormalise 				; normalise the result
.a281	68		pla				pla
.a282	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/float/utility.asm

.a283					FloatPrepare:
.a283	20 b5 91	jsr $91b5			jsr 	DereferenceTopTwo 			; dereference the top two values
.a286	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check ints/floats
.a289	1d 01 06	ora $0601,x			ora 	NSStatus+1,x
.a28c	29 10		and #$10			and 	#NSBIsString
.a28e	d0 01		bne $a291			bne 	_FDType
.a290	60		rts				rts
.a291					_FDType:
.a291	4c 17 a5	jmp $a517			jmp 	TypeError
.a294					NSNormalise:
.a294	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; make float, keep sign
.a297	29 80		and #$80			and 	#$80
.a299	09 08		ora #$08			ora 	#NSTFloat
.a29b	9d 00 06	sta $0600,x			sta 	NSStatus,x
.a29e	20 1f 98	jsr $981f			jsr 	NSMIsZero 					; if zero exit
.a2a1	d0 09		bne $a2ac			bne 	_NSNormaliseOptimise 		; if so, normalise it.
.a2a3	1e 00 06	asl $0600,x			asl 	NSStatus,x 					; clear the sign bit.
.a2a6	7e 00 06	ror $0600,x			ror 	NSStatus,x 					; (no -0)
.a2a9	a9 00		lda #$00			lda 	#0 							; set Z flag
.a2ab	60		rts				rts
.a2ac					_NSNormaliseOptimise:
.a2ac	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; upper byte zero ?
.a2af	d0 22		bne $a2d3			bne 	_NSNormaliseLoop
.a2b1	bd 18 06	lda $0618,x			lda 	NSMantissa2,x 				; byte normalise
.a2b4	30 1d		bmi $a2d3			bmi 	_NSNormaliseLoop 			; can't do it if bit 7 set of 2
.a2b6	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.a2b9	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.a2bc	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.a2bf	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.a2c2	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.a2c5	9e 08 06	stz $0608,x			stz 	NSMantissa0,x
.a2c8	bd 28 06	lda $0628,x			lda 	NSExponent,x
.a2cb	38		sec				sec
.a2cc	e9 08		sbc #$08			sbc 	#8
.a2ce	9d 28 06	sta $0628,x			sta 	NSExponent,x
.a2d1	80 d9		bra $a2ac			bra 	_NSNormaliseOptimise
.a2d3					_NSNormaliseLoop:
.a2d3	3c 20 06	bit $0620,x			bit 	NSMantissa3,x 				; bit 30 set ?
.a2d6	70 08		bvs $a2e0			bvs 	_NSNExit 					; exit if so with Z flag clear
.a2d8	20 04 98	jsr $9804			jsr 	NSMShiftLeft 				; shift mantissa left
.a2db	de 28 06	dec $0628,x			dec 	NSExponent,x 				; adjust exponent
.a2de	80 f3		bra $a2d3			bra 	_NSNormaliseLoop
.a2e0					_NSNExit:
.a2e0	a9 ff		lda #$ff			lda 	#$FF 						; clear Z flag
.a2e2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignnumber.asm

.90e2					AssignNumber:
.90e2	5a		phy				phy
.90e3	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy mantissa0/1 to zTemp0
.90e6	85 36		sta $36				sta 	zTemp0
.90e8	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.90eb	85 37		sta $37				sta 	zTemp0+1
.90ed	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; clear reference bits
.90f0	29 df		and #$df			and 	#(NSBIsReference ^ $FF)
.90f2	9d 00 06	sta $0600,x			sta 	NSStatus,x
.90f5	29 18		and #$18			and 	#NSBTypeMask				; assigning to a float ?
.90f7	c9 08		cmp #$08			cmp 	#NSTFloat
.90f9	f0 2a		beq $9125			beq 	_ANFloat
.90fb	bd 29 06	lda $0629,x			lda		NSExponent+1,x 				; is it a float
.90fe	f0 05		beq $9105			beq		_ANNotFloat
.9100	e8		inx				inx
.9101	20 33 a2	jsr $a233			jsr 	FloatIntegerPart 			; make it an integer
.9104	ca		dex				dex
.9105					_ANNotFloat:
.9105	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if byte/word reference.
.9108	29 03		and #$03			and 	#3
.910a	d0 05		bne $9111			bne 	_ANByteWord
.910c	20 31 91	jsr $9131			jsr 	_ANCopy4PackSign 			; copy all 4 bytes and sign
.910f	80 1e		bra $912f			bra 	_ANExit
.9111					_ANByteWord:
.9111	48		pha				pha 								; save count
.9112	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; do byte
.9115	92 36		sta ($36)			sta 	(zTemp0)
.9117	68		pla				pla
.9118	c9 01		cmp #$01			cmp	 	#1
.911a	f0 13		beq $912f			beq 	_ANExit
.911c	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x 			; do word
.911f	a0 01		ldy #$01			ldy 	#1
.9121	91 36		sta ($36),y			sta 	(zTemp0),y
.9123	80 0a		bra $912f			bra 	_ANExit
.9125					_ANFloat:
.9125	20 31 91	jsr $9131			jsr 	_ANCopy4PackSign 			; write all 4 bytes and packed sign
.9128	bd 29 06	lda $0629,x			lda 	NSExponent+1,x 				; copy exponent to slot 4
.912b	a0 04		ldy #$04			ldy 	#4
.912d	91 36		sta ($36),y			sta 	(zTemp0),y
.912f					_ANExit:
.912f	7a		ply				ply
.9130	60		rts				rts
.9131					_ANCopy4PackSign:
.9131	a0 03		ldy #$03			ldy 	#3
.9133	bd 01 06	lda $0601,x			lda 	NSStatus+1,x 				; sign bit into status
.9136	29 80		and #$80			and 	#$80 						; put into high bit of mantissa 3
.9138	1d 21 06	ora $0621,x			ora 	NSMantissa3+1,x
.913b	91 36		sta ($36),y			sta 	(zTemp0),y
.913d	88		dey				dey
.913e	bd 19 06	lda $0619,x			lda 	NSMantissa2+1,x
.9141	91 36		sta ($36),y			sta 	(zTemp0),y
.9143	88		dey				dey
.9144	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.9147	91 36		sta ($36),y			sta 	(zTemp0),y
.9149	88		dey				dey
.914a	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.914d	91 36		sta ($36),y			sta 	(zTemp0),y
.914f	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/assignstring.asm

.9150					AssignString:
.9150	5a		phy				phy
.9151	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x
.9154	85 38		sta $38				sta 	zTemp1
.9156	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.9159	85 39		sta $39				sta 	zTemp1+1
.915b	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.915e	85 36		sta $36				sta 	zTemp0
.9160	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.9163	85 37		sta $37				sta 	zTemp0+1
.9165	a0 01		ldy #$01			ldy 	#1 							; the high byte of the target address
.9167	b1 36		lda ($36),y			lda 	(zTemp0),y
.9169	f0 23		beq $918e			beq 	_ASNewStringRequired 		; if zero, a new string is required.
.916b	38		sec				sec 								; put Address-2 in zsTemp - this is the size/status/string record
.916c	b2 36		lda ($36)			lda 	(zTemp0) 					; of concreted strings
.916e	e9 02		sbc #$02			sbc 	#2
.9170	85 3c		sta $3c				sta 	zsTemp
.9172	a0 01		ldy #$01			ldy 	#1
.9174	b1 36		lda ($36),y			lda 	(zTemp0),y
.9176	e9 00		sbc #$00			sbc 	#0
.9178	85 3d		sta $3d				sta 	zsTemp+1
.917a	a0 ff		ldy #$ff			ldy 	#$FF 						; get length of new string
.917c					_ASGetLength:
.917c	c8		iny				iny
.917d	b1 38		lda ($38),y			lda 	(zTemp1),y
.917f	d0 fb		bne $917c			bne 	_ASGetLength
.9181	98		tya				tya 								; is this length <= current length
.9182	d2 3c		cmp ($3c)			cmp 	(zsTemp)
.9184	90 20		bcc $91a6			bcc 	_ASCopyString
.9186	f0 1e		beq $91a6			beq 	_ASCopyString
.9188	a9 80		lda #$80			lda 	#$80 						; mark as unused.
.918a	a0 01		ldy #$01			ldy 	#1
.918c	91 3c		sta ($3c),y			sta 	(zsTemp),y
.918e					_ASNewStringRequired:
.918e	e8		inx				inx 								; concrete the new string.
.918f	20 b3 a6	jsr $a6b3			jsr 	StringConcrete				; (breaks zTemp1/2, not zTemp0 and zsTemp)
.9192	ca		dex				dex
.9193	18		clc				clc
.9194	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; copy that new address to the reference.
.9197	69 02		adc #$02			adc 	#2 							; add two to point at the data.
.9199	92 36		sta ($36)			sta 	(zTemp0)
.919b	bd 11 06	lda $0611,x			lda 	NSMantissa1+1,x
.919e	69 00		adc #$00			adc 	#0
.91a0	a0 01		ldy #$01			ldy 	#1
.91a2	91 36		sta ($36),y			sta 	(zTemp0),y
.91a4	80 0d		bra $91b3			bra 	_ASExit
.91a6					_ASCopyString:
.91a6	a0 00		ldy #$00			ldy 	#0
.91a8					_ASCopyLoop:
.91a8	b1 38		lda ($38),y			lda 	(zTemp1),y
.91aa	c8		iny				iny
.91ab	c8		iny				iny
.91ac	91 3c		sta ($3c),y			sta 	(zsTemp),y
.91ae	88		dey				dey
.91af	c9 00		cmp #$00			cmp 	#0
.91b1	d0 f5		bne $91a8			bne 	_ASCopyLoop
.91b3					_ASExit:
.91b3	7a		ply				ply
.91b4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/dereference.asm

.91b5					DereferenceTopTwo:
.91b5	e8		inx				inx
.91b6	20 ba 91	jsr $91ba			jsr 	Dereference 				; deref x+1
.91b9	ca		dex				dex  								; falls through to deref x
.91ba					Dereference:
.91ba	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get the status byte
.91bd	29 20		and #$20			and 	#NSBIsReference 			; shift sign bit to carry, reference to bit 7
.91bf	f0 57		beq $9218			beq 	_DRFExit 					; not a reference
.91c1	5a		phy				phy
.91c2	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy address to dereference into zTemp0
.91c5	85 36		sta $36				sta 	zTemp0
.91c7	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.91ca	85 37		sta $37				sta 	zTemp0+1
.91cc	9e 10 06	stz $0610,x			stz 	NSMantissa1,x 				; clear second byte.
.91cf	b2 36		lda ($36)			lda 	(zTemp0) 					; do the first byte
.91d1	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.91d4	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get status byte.
.91d7	29 18		and #$18			and 	#NSBTypeMask 				; what type is it ?
.91d9	c9 10		cmp #$10			cmp 	#NSTString 					; if string, dereference two
.91db	f0 0f		beq $91ec			beq 	_DRFDereferenceTwo
.91dd	c9 08		cmp #$08			cmp 	#NSTFloat 					; if float, do full dereference.
.91df	f0 39		beq $921a			beq 	_DRFFull
.91e1	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be integer - how many bytes ?
.91e4	29 03		and #$03			and 	#3
.91e6	f0 32		beq $921a			beq 	_DRFFull 					; the whole word
.91e8	c9 01		cmp #$01			cmp 	#1 							; is it 10 (e.g. 2 bytes)
.91ea	f0 07		beq $91f3			beq		_DRFClear23 				; no, one byte, clear 2 & 3 and exit
.91ec					_DRFDereferenceTwo:
.91ec	a0 01		ldy #$01			ldy 	#1
.91ee	b1 36		lda ($36),y			lda 	(zTemp0),y
.91f0	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.91f3					_DRFClear23:
.91f3	9e 18 06	stz $0618,x			stz 	NSMantissa2,x 				; clear upper bytes, only read 1 or 2 bytes
.91f6	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.91f9	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; make it a value of that type.
.91fc	29 18		and #$18			and 	#NSBTypeMask
.91fe	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9201	c9 10		cmp #$10			cmp 	#NSTString  				; is it a string
.9203	d0 12		bne $9217			bne 	_DRFNotString
.9205	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; check address is zero
.9208	1d 10 06	ora $0610,x			ora 	NSMantissa1,x
.920b	d0 0a		bne $9217			bne 	_DRFNotString
.920d	a9 19		lda #$19			lda 	#_DRFNullString & $FF 		; if so, return reference to ""
.920f	9d 08 06	sta $0608,x			sta 	NSMantissa0,X
.9212	a9 92		lda #$92			lda 	#_DRFNullString >> 8
.9214	9d 10 06	sta $0610,x			sta 	NSMantissa1,X
.9217					_DRFNotString
.9217	7a		ply				ply 								; restore Y and exit
.9218					_DRFExit:
.9218	60		rts				rts
.9219					_DRFNullString:
>9219	00						.byte 	0
.921a					_DRFFull:
.921a	a0 01		ldy #$01			ldy 	#1 							; get remaining 3 bytes.
.921c	b1 36		lda ($36),y			lda 	(zTemp0),y
.921e	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9221	c8		iny				iny
.9222	b1 36		lda ($36),y			lda 	(zTemp0),y
.9224	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.9227	c8		iny				iny
.9228	b1 36		lda ($36),y			lda 	(zTemp0),y
.922a	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.922d	9e 28 06	stz $0628,x			stz 	NSExponent,x 				; clear exponent.
.9230	bd 00 06	lda $0600,x			lda		NSStatus,x 					; see if type is integer
.9233	29 18		and #$18			and 	#NSBTypeMask  				; type information only
.9235	9d 00 06	sta $0600,x			sta 	NSStatus,x 					; update it back.
.9238	f0 06		beq $9240			beq 	_DRFNoExponent
.923a	c8		iny				iny 								; if not, read the exponent as well.
.923b	b1 36		lda ($36),y			lda 	(zTemp0),y
.923d	9d 28 06	sta $0628,x			sta 	NSExponent,x
.9240					_DRFNoExponent:
.9240	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; is the most significant bit set ?
.9243	10 0d		bpl $9252			bpl 	_DRFExit2 					; if not, then exit.
.9245	29 7f		and #$7f			and 	#$7F 						; clear that bit.
.9247	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.924a	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; set the sign flag
.924d	09 80		ora #$80			ora 	#NSBIsNegative
.924f	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9252					_DRFExit2:
.9252	7a		ply				ply
.9253	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/number.asm

=1					ESTA_Low = 1 								; state 1 is 1 byte, switches when A >= 24.
=2					ESTA_High = 2 								; loading up to 32 bit integer in the mantissa
=3					ESTA_Decimal = 3 							; fractional part.
.9254					EncodeNumberStart:
.9254	38		sec				sec
.9255	80 01		bra $9258			bra 	EncodeNumberContinue+1
.9257					EncodeNumberContinue:
.9257	18		clc				clc
.9258					EncodeNumber:
.9258	08		php				php 								; save reset.
.9259	c9 2e		cmp #$2e			cmp 	#"." 						; only accept 0-9 and .
.925b	f0 12		beq $926f			beq 	_ENIsOkay
.925d	c9 30		cmp #$30			cmp 	#"0"
.925f	90 04		bcc $9265			bcc 	_ENBadNumber
.9261	c9 3a		cmp #$3a			cmp 	#"9"+1
.9263	90 0a		bcc $926f			bcc 	_ENIsOkay
.9265					_ENBadNumber:
.9265	28		plp				plp 								; throw saved reset
.9266	ad 05 07	lda $0705			lda 	EncodeState 				; decimal mode, construct final number
.9269	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.926b	f0 7e		beq $92eb			beq 	_ENConstructFinal
.926d					_ENFail:
.926d	18		clc				clc 								; not allowed
.926e	60		rts				rts
.926f					_ENIsOkay:
.926f	28		plp				plp 								; are we restarting
.9270	90 15		bcc $9287			bcc 	_ENNoRestart
.9272					_ENStartEncode:
.9272	c9 2e		cmp #$2e			cmp 	#'.'						; first is DP
.9274	f0 0c		beq $9282			beq 	_ENFirstDP
.9276	29 0f		and #$0f			and 	#15 						; put digit in mantissa
.9278	20 f1 97	jsr $97f1			jsr 	NSMSetByte
.927b	a9 01		lda #$01			lda 	#ESTA_Low
.927d					_ENExitChange:
.927d	8d 05 07	sta $0705			sta 	EncodeState 				; save new state
.9280	38		sec				sec
.9281	60		rts				rts
.9282					_ENFirstDP:
.9282	20 ef 97	jsr $97ef			jsr 	NSMSetZero 					; clear integer part
.9285	80 3f		bra $92c6			bra 	_ESTASwitchFloat			; go straight to float and exi
.9287					_ENNoRestart:
.9287	48		pha				pha 								; save on stack.
.9288	ad 05 07	lda $0705			lda 	EncodeState 				; get current state
.928b	c9 01		cmp #$01			cmp 	#ESTA_Low
.928d	f0 09		beq $9298			beq  	_ESTALowState
.928f	c9 02		cmp #$02			cmp 	#ESTA_High
.9291	f0 29		beq $92bc			beq 	_ESTAHighState
.9293	c9 03		cmp #$03			cmp 	#ESTA_Decimal
.9295	f0 3b		beq $92d2			beq 	_ESTADecimalState
>9297	db						.byte 	$DB 						; causes a break in the emulator
.9298					_ESTALowState:
.9298	68		pla				pla 								; get value back
.9299	c9 2e		cmp #$2e			cmp 	#"."						; decimal point
.929b	f0 29		beq $92c6			beq 	_ESTASwitchFloat 			; then we need to do the floating point bit
.929d	29 0f		and #$0f			and 	#15 						; make digit
.929f	8d 06 07	sta $0706			sta 	DigitTemp 					; save it.
.92a2	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; x mantissa0 x 10 and add it
.92a5	0a		asl a				asl 	a
.92a6	0a		asl a				asl 	a
.92a7	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.92aa	0a		asl a				asl 	a
.92ab	6d 06 07	adc $0706			adc 	DigitTemp
.92ae	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.92b1	c9 19		cmp #$19			cmp 	#25 						; if >= 25 cannot guarantee next will be okay
.92b3	90 05		bcc $92ba			bcc 	_ESTANoSwitch 				; as could be 25 x 10 + 9
.92b5	a9 02		lda #$02			lda 	#ESTA_High 					; so if so, switch to the high encoding state
.92b7	8d 05 07	sta $0705			sta 	EncodeState
.92ba					_ESTANoSwitch:
.92ba	38		sec				sec
.92bb	60		rts				rts
.92bc					_ESTAHighState:
.92bc	68		pla				pla 								; get value back
.92bd	c9 2e		cmp #$2e			cmp 	#"." 						; if DP switch to dloat
.92bf	f0 05		beq $92c6			beq 	_ESTASwitchFloat
.92c1	20 25 93	jsr $9325			jsr 	ESTAShiftDigitIntoMantissa 	; a routine does this.
.92c4	38		sec				sec
.92c5	60		rts				rts
.92c6					_ESTASwitchFloat:
.92c6	9c 07 07	stz $0707			stz 	DecimalCount
.92c9	e8		inx				inx 								; zero the decimal additive.
.92ca	20 ef 97	jsr $97ef			jsr 	NSMSetZero
.92cd	ca		dex				dex
.92ce	a9 03		lda #$03			lda 	#ESTA_Decimal 				; switch to decimal mode
.92d0	80 ab		bra $927d			bra 	_ENExitChange
.92d2					_ESTADecimalState:
.92d2	68		pla				pla 								; digit.
.92d3	c9 2e		cmp #$2e			cmp 	#"." 						; fail on 2nd decimal point.
.92d5	f0 96		beq $926d			beq 	_ENFail
.92d7	e8		inx				inx 								; put digit into fractional part of X+1
.92d8	20 25 93	jsr $9325			jsr 	ESTAShiftDigitIntoMantissa
.92db	ca		dex				dex
.92dc	ee 07 07	inc $0707			inc 	DecimalCount 				; bump the count of decimals
.92df	ad 07 07	lda $0707			lda 	DecimalCount
.92e2	c9 0b		cmp #$0b			cmp 	#11
.92e4	f0 02		beq $92e8			beq 	_ESTADSFail
.92e6	38		sec				sec
.92e7	60		rts				rts
.92e8					_ESTADSFail:
.92e8	4c 12 a5	jmp $a512			jmp 	RangeError
.92eb					_ENConstructFinal:
.92eb	ad 07 07	lda $0707			lda 	DecimalCount 				; get decimal count
.92ee	f0 33		beq $9323			beq 	_ENCFExit 					; no decimals
.92f0	5a		phy				phy
.92f1	0a		asl a				asl 	a 							; x 4 and CLC
.92f2	0a		asl a				asl 	a
.92f3	6d 07 07	adc $0707			adc 	DecimalCount
.92f6	a8		tay				tay
.92f7	b9 d1 a4	lda $a4d1,y			lda 	DecimalScalarTable-5,y 		; copy decimal scalar to X+2
.92fa	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.92fd	b9 d2 a4	lda $a4d2,y			lda 	DecimalScalarTable-5+1,y
.9300	9d 12 06	sta $0612,x			sta 	NSMantissa1+2,x
.9303	b9 d3 a4	lda $a4d3,y			lda 	DecimalScalarTable-5+2,y
.9306	9d 1a 06	sta $061a,x			sta 	NSMantissa2+2,x
.9309	b9 d4 a4	lda $a4d4,y			lda 	DecimalScalarTable-5+3,y
.930c	9d 22 06	sta $0622,x			sta 	NSMantissa3+2,x
.930f	b9 d5 a4	lda $a4d5,y			lda 	DecimalScalarTable-5+4,y
.9312	9d 2a 06	sta $062a,x			sta 	NSExponent+2,x
.9315	a9 08		lda #$08			lda 	#NSTFloat
.9317	9d 02 06	sta $0602,x			sta 	NSStatus+2,x
.931a	7a		ply				ply
.931b	e8		inx				inx 								; multiply decimal const by decimal scalar
.931c	20 5d a2	jsr $a25d			jsr 	FloatMultiply
.931f	ca		dex				dex
.9320	20 f2 a0	jsr $a0f2			jsr 	FloatAdd 					; add to integer part.
.9323					_ENCFExit:
.9323	18		clc				clc 								; reject the digit.
.9324	60		rts				rts
.9325					ESTAShiftDigitIntoMantissa:
.9325	29 0f		and #$0f			and 	#15 						; save digit
.9327	48		pha				pha
.9328	bd 20 06	lda $0620,x			lda 	NSMantissa3,x 				; push mantissa on stack
.932b	48		pha				pha
.932c	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.932f	48		pha				pha
.9330	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.9333	48		pha				pha
.9334	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.9337	48		pha				pha
.9338	20 04 98	jsr $9804			jsr 	NSMShiftLeft 				; x 2
.933b	20 04 98	jsr $9804			jsr 	NSMShiftLeft 				; x 4
.933e	18		clc				clc 								; pop mantissa and add
.933f	68		pla				pla
.9340	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.9343	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.9346	68		pla				pla
.9347	7d 10 06	adc $0610,x			adc 	NSMantissa1,x
.934a	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.934d	68		pla				pla
.934e	7d 18 06	adc $0618,x			adc 	NSMantissa2,x
.9351	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.9354	68		pla				pla
.9355	7d 20 06	adc $0620,x			adc 	NSMantissa3,x
.9358	9d 20 06	sta $0620,x			sta 	NSMantissa3,x 				; x 5
.935b	20 04 98	jsr $9804			jsr 	NSMShiftLeft 				; x 10
.935e	68		pla				pla 								; add digit
.935f	18		clc				clc
.9360	7d 08 06	adc $0608,x			adc 	NSMantissa0,x
.9363	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.9366	90 0d		bcc $9375			bcc 	_ESTASDExit
.9368	fe 10 06	inc $0610,x			inc 	NSMantissa1,x
.936b	d0 08		bne $9375			bne 	_ESTASDExit
.936d	fe 18 06	inc $0618,x			inc 	NSMantissa2,x
.9370	d0 03		bne $9375			bne 	_ESTASDExit
.9372	fe 20 06	inc $0620,x			inc 	NSMantissa3,x
.9375					_ESTASDExit:
.9375	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/term.asm

.9376					EvaluateTerm:
.9376	b1 30		lda ($30),y			lda 	(codePtr),y
.9378	30 18		bmi $9392			bmi 	_ETCheckUnary 				; unary function ? (text ones)
.937a	c9 40		cmp #$40			cmp 	#$40 						; 40-7F => identifier reference
.937c	b0 6f		bcs $93ed			bcs 	_ETVariable
.937e	c9 30		cmp #$30			cmp 	#'0' 						; is it a number
.9380	90 6e		bcc $93f0			bcc 	_ETPuncUnary 				; if not it might be a punctuation unary.
.9382	c9 3a		cmp #$3a			cmp 	#'9'+1
.9384	b0 6a		bcs $93f0			bcs 	_ETPuncUnary
.9386	20 54 92	jsr $9254			jsr 	EncodeNumberStart 			; can't fail as it's 0-9 !
.9389					_ETNumber:
.9389	c8		iny				iny 								; keep encoding until we have the numbers
.938a	b1 30		lda ($30),y			lda 	(codePtr),y
.938c	20 57 92	jsr $9257			jsr 	EncodeNumberContinue
.938f	b0 f8		bcs $9389			bcs 	_ETNumber 					; go back if accepted.
.9391	60		rts				rts
.9392					_ETCheckUnary:
.9392	c9 ff		cmp #$ff			cmp 	#KWC_STRING 				; string token
.9394	f0 41		beq $93d7			beq 	_ETString
.9396	c9 fe		cmp #$fe			cmp 	#KWC_HEXCONST 				; hex constant.
.9398	f0 12		beq $93ac			beq 	_ETHexConstant
.939a	c9 83		cmp #$83			cmp 	#KWC_FIRST_UNARY 			; check it actually is a unary function
.939c	90 0b		bcc $93a9			bcc 	_ETSyntaxError
.939e	c9 96		cmp #$96			cmp 	#KWC_LAST_UNARY+1
.93a0	b0 07		bcs $93a9			bcs 	_ETSyntaxError
.93a2	da		phx				phx 								; push X on the stack
.93a3	0a		asl a				asl 	a 							; put vector x 2 into X
.93a4	aa		tax				tax
.93a5	c8		iny				iny 								; consume unary function token
.93a6	7c fe 80	jmp ($80fe,x)			jmp 	(VectorSet0,x) 				; and do it.
.93a9					_ETSyntaxError:
.93a9	4c 0d a5	jmp $a50d			jmp 	SyntaxError
.93ac					_ETHexConstant:
.93ac	c8		iny				iny 								; skip #
.93ad	c8		iny				iny 								; skip count
.93ae	20 ef 97	jsr $97ef			jsr 	NSMSetZero 					; clear result
.93b1					_ETHLoop:
.93b1	b1 30		lda ($30),y			lda 	(codePtr),y
.93b3	c8		iny				iny 								; and consume
.93b4	c9 00		cmp #$00			cmp 	#0 							; exit if zero
.93b6	f0 1e		beq $93d6			beq 	_ETHExit
.93b8	48		pha				pha 								; save on stack.
.93b9	20 04 98	jsr $9804			jsr 	NSMShiftLeft 				; x 2
.93bc	20 04 98	jsr $9804			jsr 	NSMShiftLeft 				; x 4
.93bf	20 04 98	jsr $9804			jsr 	NSMShiftLeft 				; x 8
.93c2	20 04 98	jsr $9804			jsr 	NSMShiftLeft 				; x 16
.93c5	68		pla				pla 								; ASCII
.93c6	c9 41		cmp #$41			cmp 	#'A'
.93c8	90 02		bcc $93cc			bcc 	_ETHNotChar
.93ca	e9 07		sbc #$07			sbc 	#7
.93cc					_ETHNotChar:
.93cc	29 0f		and #$0f			and 	#15 						; digit now
.93ce	1d 08 06	ora $0608,x			ora 	NSMantissa0,x 				; put in LS Nibble
.93d1	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.93d4	80 db		bra $93b1			bra 	_ETHLoop 					; go round.
.93d6					_ETHExit:
.93d6	60		rts				rts
.93d7					_ETString:
.93d7	c8		iny				iny 								; look at length
.93d8	b1 30		lda ($30),y			lda 	(codePtr),y
.93da	48		pha				pha
.93db	c8		iny				iny 								; first character
.93dc	20 86 9e	jsr $9e86			jsr 	MemoryInline 				; put address of string at (code-Ptr),y on stack
.93df	68		pla				pla 								; restore count and save
.93e0	85 36		sta $36				sta 	zTemp0
.93e2	98		tya				tya 								; add length to Y to skip it.
.93e3	18		clc				clc
.93e4	65 36		adc $36				adc 	zTemp0
.93e6	a8		tay				tay
.93e7	a9 10		lda #$10			lda 	#NSTString 					; mark as string
.93e9	9d 00 06	sta $0600,x			sta 	NSStatus,x
.93ec	60		rts				rts
.93ed					_ETVariable:
.93ed	4c 47 94	jmp $9447			jmp 	VariableHandler
.93f0					_ETPuncUnary:
.93f0	c8		iny				iny 								; consume the unary character
.93f1	c9 2d		cmp #$2d			cmp 	#KWD_MINUS 					; unary minus
.93f3	f0 2d		beq $9422			beq 	_ETUnaryNegate
.93f5	c9 10		cmp #$10			cmp 	#KWD_AT 					; @ reference -> constant
.93f7	f0 39		beq $9432			beq 	_ETDereference
.93f9	c9 28		cmp #$28			cmp 	#KWD_LPAREN 				; parenthesis
.93fb	f0 43		beq $9440			beq 	_ETParenthesis
.93fd	64 36		stz $36				stz 	zTemp0 						; zTemp0 is the indirection level.
.93ff	c9 3f		cmp #$3f			cmp 	#KWD_QMARK 					; byte indirection (0) ?
.9401	f0 06		beq $9409			beq 	_ETIndirection
.9403	e6 36		inc $36				inc 	zTemp0
.9405	c9 21		cmp #$21			cmp 	#KWD_PLING					; word indirection (1) \
.9407	d0 a0		bne $93a9			bne 	_ETSyntaxError
.9409					_ETIndirection:
.9409	a5 36		lda $36				lda 	zTemp0 						; push indirection amount (0-1) => (1-2) on the stack
.940b	1a		inc a				inc 	a
.940c	48		pha				pha
.940d	20 76 93	jsr $9376			jsr 	EvaluateTerm				; evaluate the term
.9410	20 ba 91	jsr $91ba			jsr 	Dereference 				; dereference it.
.9413	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a +ve integer.
.9416	d0 07		bne $941f			bne 	_ETTypeMismatch
.9418	68		pla				pla 								; indirection 1-2
.9419	09 20		ora #$20			ora 	#NSBIsReference 			; make it a reference.
.941b	9d 00 06	sta $0600,x			sta 	NSStatus,x
.941e	60		rts				rts
.941f					_ETTypeMismatch:
.941f	4c 17 a5	jmp $a517			jmp 	TypeError
.9422					_ETUnaryNegate:
.9422	20 76 93	jsr $9376			jsr 	EvaluateTerm				; evaluate the term
.9425	20 ba 91	jsr $91ba			jsr 	Dereference 				; dereference it.
.9428	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a number
.942b	29 10		and #$10			and 	#NSTString
.942d	d0 f0		bne $941f			bne 	_ETTypeMismatch
.942f	4c 9b 97	jmp $979b			jmp 	NSMNegate  					; just toggles the sign bit.
.9432					_ETDereference:
.9432	20 76 93	jsr $9376			jsr 	EvaluateTerm				; evaluate the term
.9435	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; must be a reference
.9438	29 20		and #$20			and 	#NSBIsReference
.943a	f0 e3		beq $941f			beq 	_ETTypeMismatch
.943c	9e 00 06	stz $0600,x			stz 	NSStatus,x 					; make it an integer address
.943f	60		rts				rts
.9440					_ETParenthesis:
.9440	20 a5 90	jsr $90a5			jsr 	EvaluateExpression 			; evaluate here, from lowest precedence
.9443	20 2b 9f	jsr $9f2b			jsr 	CheckRightBracket 			; check for )
.9446	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/term/variable.asm

.9447					VariableHandler:
.9447	b1 30		lda ($30),y			lda 	(codePtr),y
.9449	18		clc				clc
.944a	69 d0		adc #$d0			adc 	#((VariableSpace >> 8) - $40) & $FF
.944c	85 37		sta $37				sta 	zTemp0+1
.944e	c8		iny				iny
.944f	b1 30		lda ($30),y			lda 	(codePtr),y
.9451	85 36		sta $36				sta 	zTemp0
.9453	c8		iny				iny
.9454	18		clc				clc									; copy variable address+3 to mantissa
.9455	69 03		adc #$03			adc 	#3
.9457	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.945a	a5 37		lda $37				lda 	zTemp0+1
.945c	69 00		adc #$00			adc 	#0
.945e	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9461	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.9464	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.9467	9e 28 06	stz $0628,x			stz 	NSExponent,x
.946a	5a		phy				phy
.946b	a0 02		ldy #$02			ldy 	#2 							; read type
.946d	b1 36		lda ($36),y			lda 	(zTemp0),y
.946f	7a		ply				ply
.9470	29 1c		and #$1c			and 	#NSBTypeMask+NSBIsArray 	; get type information
.9472	09 20		ora #$20			ora 	#NSBIsReference 			; make a reference.
.9474	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9477	29 04		and #$04			and 	#NSBIsArray
.9479	d0 01		bne $947c			bne 	_VHArray
.947b	60		rts				rts
.947c					_VHArray:
.947c	e8		inx				inx
.947d	20 87 97	jsr $9787			jsr 	Evaluate8BitInteger 		; get the 1st index.
.9480	a9 ff		lda #$ff			lda 	#$FF 						; set Status of X+2 to a duff value so we know if we picked it up.
.9482	9d 01 06	sta $0601,x			sta 	NSStatus+1,x
.9485	b1 30		lda ($30),y			lda 	(codePtr),y
.9487	c9 2c		cmp #$2c			cmp 	#KWD_COMMA
.9489	d0 06		bne $9491			bne 	_VHNoSecondIndex
.948b	c8		iny				iny 								; skip the comma
.948c	e8		inx				inx
.948d	20 87 97	jsr $9787			jsr 	Evaluate8BitInteger 		; get the 2nd index.
.9490	ca		dex				dex
.9491					_VHNoSecondIndex:
.9491	ca		dex				dex 								; set X back.
.9492	20 2b 9f	jsr $9f2b			jsr 	CheckRightBracket 			; and check the right bracket.
.9495	5a		phy				phy 								; save position
.9496	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy record address to zaTemp
.9499	85 3e		sta $3e				sta 	zaTemp
.949b	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.949e	85 3f		sta $3f				sta 	zaTemp+1
.94a0	a0 03		ldy #$03			ldy 	#3 							; get the second index - which is 0 if there is one index.
.94a2	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.94a4	f0 02		beq $94a8			beq 	_VHHas2Mask
.94a6	a9 ff		lda #$ff			lda 	#$FF
.94a8					_VHHas2Mask:
.94a8	dd 02 06	cmp $0602,x			cmp 	NSStatus+2,x 				; so if they are the same there are the wrong number of indices
.94ab	f0 54		beq $9501			beq 	_VHBadIndex
.94ad	0a		asl a				asl 	a 							; carry will be set if a second index
.94ae	90 09		bcc $94b9			bcc 	_VHCheckFirstIndex
.94b0	a0 03		ldy #$03			ldy 	#3 			 				; check the 2nd size >= 2nd index
.94b2	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.94b4	dd 0a 06	cmp $060a,x			cmp 	NSMantissa0+2,x
.94b7	90 48		bcc $9501			bcc 	_VHBadIndex
.94b9					_VHCheckFirstIndex:
.94b9	a0 02		ldy #$02			ldy 	#2 			 				; check the 2nd size >= 2nd index
.94bb	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.94bd	dd 09 06	cmp $0609,x			cmp 	NSMantissa0+1,x
.94c0	90 3f		bcc $9501			bcc 	_VHBadIndex
.94c2	64 36		stz $36				stz 	zTemp0 						; clear zTemp0 (if 1 index)
.94c4	64 37		stz $37				stz 	zTemp0+1
.94c6	bd 02 06	lda $0602,x			lda 	NSStatus+2,x 				; if only one index provided, don't need to multiply
.94c9	30 0f		bmi $94da			bmi 	_VHNoMultiply
.94cb	da		phx				phx
.94cc	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; get 2nd index on stack
.94cf	48		pha				pha
.94d0	a0 02		ldy #$02			ldy 	#2 							; get 1st size in A
.94d2	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.94d4	1a		inc a				inc 	a 							; add 1 for zero base
.94d5	fa		plx				plx
.94d6	20 ad a3	jsr $a3ad			jsr 	Multiply8x8 				; calculate -> Z0
.94d9	fa		plx				plx
.94da					_VHNoMultiply:
.94da	18		clc				clc
.94db	a5 36		lda $36				lda 	zTemp0
.94dd	7d 09 06	adc $0609,x			adc 	NSMantissa0+1,x
.94e0	85 36		sta $36				sta 	zTemp0
.94e2	a5 37		lda $37				lda 	zTemp0+1
.94e4	69 00		adc #$00			adc 	#0
.94e6	85 37		sta $37				sta 	zTemp0+1
.94e8	bd 00 06	lda $0600,x			lda 	NSStatus,x
.94eb	20 ce 85	jsr $85ce			jsr 	ScaleByBaseType
.94ee	18		clc				clc
.94ef	b2 3e		lda ($3e)			lda 	(zaTemp)
.94f1	65 36		adc $36				adc 	zTemp0
.94f3	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.94f6	a0 01		ldy #$01			ldy 	#1
.94f8	b1 3e		lda ($3e),y			lda 	(zaTemp),y
.94fa	65 37		adc $37				adc 	zTemp0+1
.94fc	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.94ff	7a		ply				ply 								; restore position
.9500	60		rts				rts
.9501					_VHBadIndex:
.9501	a9 17		lda #$17		lda	#23
.9503	4c 9c 8c	jmp $8c9c		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/abs.asm

.a2e3					AbsUnary:
.a2e3	fa		plx				plx 								; restore stack pos
.a2e4	20 43 97	jsr $9743			jsr 	EvaluateNumber 				; get a float or int
.a2e7	20 2b 9f	jsr $9f2b			jsr 	CheckRightBracket
.a2ea	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; clear the sign bit
.a2ed	29 7f		and #$7f			and 	#$7F
.a2ef	9d 00 06	sta $0600,x			sta 	NSStatus,x
.a2f2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/alloc.asm

.9506					AllocUnary:
.9506	fa		plx				plx 								; restore stack pos
.9507	20 7b 97	jsr $977b			jsr 	Evaluate16BitInteger		; get bytes required.
.950a	20 2b 9f	jsr $9f2b			jsr 	CheckRightBracket
.950d	da		phx				phx 								; save X/Y
.950e	5a		phy				phy
.950f	8a		txa				txa 								; copy X into Y
.9510	a8		tay				tay
.9511	b9 10 06	lda $0610,y			lda		NSMantissa1,y 				; get size
.9514	aa		tax				tax
.9515	b9 08 06	lda $0608,y			lda 	NSMantissa0,y
.9518	20 25 95	jsr $9525			jsr 	AllocateXABytes 			; allocate memory
.951b	99 08 06	sta $0608,y			sta 	NSMantissa0,y 				; write address out.
.951e	8a		txa				txa
.951f	99 10 06	sta $0610,y			sta 	NSMantissa1,y
.9522	7a		ply				ply
.9523	fa		plx				plx
.9524	60		rts				rts
.9525					AllocateXABytes:
.9525	5a		phy				phy
.9526	ac 0c 07	ldy $070c			ldy 	lowMemPtr 					; push current address on stack and to zTemp0
.9529	84 36		sty $36				sty 	zTemp0
.952b	5a		phy				phy
.952c	ac 0d 07	ldy $070d			ldy 	lowMemPtr+1
.952f	84 37		sty $37				sty 	zTemp0+1
.9531	5a		phy				phy
.9532	18		clc				clc 								; add to low memory pointer
.9533	6d 0c 07	adc $070c			adc 	lowMemPtr
.9536	8d 0c 07	sta $070c			sta 	lowMemPtr
.9539	8a		txa				txa
.953a	6d 0d 07	adc $070d			adc 	lowMemPtr+1
.953d	8d 0d 07	sta $070d			sta 	lowMemPtr+1
.9540					_ClearMemory:
.9540	ad 0c 07	lda $070c			lda 	lowMemPtr 					; cleared all memory allocated
.9543	c5 36		cmp $36				cmp 	zTemp0
.9545	d0 07		bne $954e			bne 	_CMClearNext
.9547	ad 0d 07	lda $070d			lda 	lowMemPtr+1
.954a	c5 37		cmp $37				cmp 	zTemp0+1
.954c	f0 0c		beq $955a			beq 	_CMExit
.954e					_CMClearNext:
.954e	a9 00		lda #$00			lda 	#0 							; clear byte, advance to next.
.9550	92 36		sta ($36)			sta 	(zTemp0)
.9552	e6 36		inc $36				inc 	zTemp0
.9554	d0 ea		bne $9540			bne 	_ClearMemory
.9556	e6 37		inc $37				inc		zTemp0+1
.9558	80 e6		bra $9540			bra 	_ClearMemory
.955a					_CMExit:
.955a	fa		plx				plx
.955b	68		pla				pla
.955c	7a		ply				ply
.955d	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/asc.asm

.a2f3					AscUnary:
.a2f3	fa		plx				plx 								; restore stack pos
.a2f4	20 4e 97	jsr $974e			jsr 	EvaluateString 				; get a string
.a2f7	b2 36		lda ($36)			lda 	(zTemp0)					; get/return firs character
.a2f9	20 f1 97	jsr $97f1			jsr 	NSMSetByte
.a2fc	20 2b 9f	jsr $9f2b			jsr 	CheckRightBracket
.a2ff	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/frac.asm

.a300					FracUnary:
.a300	fa		plx				plx 								; restore stack pos
.a301	20 43 97	jsr $9743			jsr 	EvaluateNumber 				; get a float or int
.a304	20 2b 9f	jsr $9f2b			jsr 	CheckRightBracket
.a307	bd 00 06	lda $0600,x			lda 	NSStatus,x
.a30a	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.a30c	f0 04		beq $a312			beq 	_IUZero
.a30e	20 d0 a1	jsr $a1d0			jsr 	FloatFractionalPart
.a311	60		rts				rts
.a312					_IUZero:
.a312	20 ef 97	jsr $97ef			jsr 	NSMSetZero
.a315	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/int.asm

.a316					IntUnary:
.a316	fa		plx				plx 								; restore stack pos
.a317	20 43 97	jsr $9743			jsr 	EvaluateNumber 				; get a float or int
.a31a	20 2b 9f	jsr $9f2b			jsr 	CheckRightBracket
.a31d	bd 00 06	lda $0600,x			lda 	NSStatus,x
.a320	29 08		and #$08			and 	#NSTFloat 					; check it is a float
.a322	f0 03		beq $a327			beq 	_IUExit
.a324	20 33 a2	jsr $a233			jsr 	FloatIntegerPart
.a327					_IUExit:
.a327	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/len.asm

.a328					LenUnary:
.a328	fa		plx				plx 								; restore stack pos
.a329	20 4e 97	jsr $974e			jsr 	EvaluateString 				; get a string
.a32c	5a		phy				phy
.a32d	a0 00		ldy #$00			ldy 	#0 							; find length
.a32f					_LenFind:
.a32f	b1 36		lda ($36),y			lda 	(zTemp0),y
.a331	f0 06		beq $a339			beq 	_LenExit
.a333	c8		iny				iny
.a334	d0 f9		bne $a32f			bne 	_LenFind
.a336	4c 12 a5	jmp $a512			jmp 	RangeError 					; string > 255
.a339					_LenExit:
.a339	98		tya				tya
.a33a	20 f1 97	jsr $97f1			jsr 	NSMSetByte
.a33d	7a		ply				ply
.a33e	20 2b 9f	jsr $9f2b			jsr 	CheckRightBracket
.a341	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/not.asm

.955e					Unary_Not:
.955e	fa		plx				plx
.955f	20 66 97	jsr $9766			jsr 	EvaluateInteger 			; get integer
.9562	20 2b 9f	jsr $9f2b			jsr 	CheckRightBracket
.9565	20 1f 98	jsr $981f			jsr 	NSMIsZero 					; zero mantissa ?
.9568	f0 04		beq $956e			beq 	_NotZero
.956a	20 ef 97	jsr $97ef			jsr 	NSMSetZero
.956d	60		rts				rts
.956e					_NotZero:
.956e	4c 09 8d	jmp $8d09			jmp 	ReturnTrue
.9571					_UNBad:
.9571	4c 1c a5	jmp $a51c			jmp 	ArgumentError

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/rnd.asm

.9574					Unary_Rnd:
.9574	20 43 97	jsr $9743			jsr 	EvaluateNumber 				; number to use.
.9577	20 2b 9f	jsr $9f2b			jsr 	CheckRightBracket 			; closing bracket
.957a	20 a3 95	jsr $95a3			jsr 	Random32Bit 				; generate a number.
.957d	ad 08 07	lda $0708			lda 	RandomSeed+0
.9580	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.9583	ad 09 07	lda $0709			lda 	RandomSeed+1
.9586	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9589	ad 0a 07	lda $070a			lda 	RandomSeed+2
.958c	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.958f	ad 0b 07	lda $070b			lda 	RandomSeed+3
.9592	29 7f		and #$7f			and 	#$7F 						; make legal mantissa
.9594	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.9597	a9 e1		lda #$e1			lda 	#-31 						; force into 0-1 range
.9599	8d 28 06	sta $0628			sta 	NSExponent
.959c	a9 08		lda #$08			lda 	#NSTFloat
.959e	8d 00 06	sta $0600			sta 	NSStatus 					; positive.
>95a1	db						.byte 	$DB 						; causes a break in the emulator
.95a2	60		rts				rts
.95a3					Random32Bit:
.95a3	5a		phy				phy
.95a4	a0 07		ldy #$07			ldy 	#7 							; do it 7 times
.95a6	ad 08 07	lda $0708			lda 	RandomSeed+0 				; check the seed isn't zero
.95a9	d0 03		bne $95ae			bne 	_Random1
.95ab	a8		tay				tay 								; if so do it 256 times
.95ac	a9 aa		lda #$aa			lda		#$AA 						; and use this to seed the seed....
.95ae					_Random1:
.95ae	0a		asl a				asl 	a 							; LSFR RNG
.95af	2e 09 07	rol $0709			rol 	RandomSeed+1
.95b2	2e 0a 07	rol $070a			rol 	RandomSeed+2
.95b5	2e 0b 07	rol $070b			rol 	RandomSeed+3
.95b8	90 02		bcc $95bc			bcc 	_Random2
.95ba	49 c5		eor #$c5			eor 	#$C5
.95bc					_Random2:
.95bc	88		dey				dey
.95bd	d0 ef		bne $95ae			bne 	_Random1
.95bf	7a		ply				ply
.95c0	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/sgn.asm

.a342					SgnUnary:
.a342	fa		plx				plx 								; restore stack pos
.a343	20 43 97	jsr $9743			jsr 	EvaluateNumber 				; get a float or int
.a346	20 2b 9f	jsr $9f2b			jsr 	CheckRightBracket
.a349	20 1f 98	jsr $981f			jsr 	NSMIsZero 					; if zero
.a34c	f0 10		beq $a35e			beq 	_SGZero  					; return Int Zero
.a34e	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; get status w/sign
.a351	48		pha				pha
.a352	a9 01		lda #$01			lda 	#1 							; set to 1
.a354	20 f1 97	jsr $97f1			jsr 	NSMSetByte
.a357	68		pla				pla
.a358	29 80		and #$80			and		#$80 						; copy the sign byte out
.a35a	9d 00 06	sta $0600,x			sta 	NSStatus,x
.a35d	60		rts				rts
.a35e	20 ef 97	jsr $97ef	_SGZero:jsr 	NSMSetZero
.a361	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/number/val.asm

.a362					ValUnary:
.a362	fa		plx				plx 								; restore stack pos
.a363	20 78 a3	jsr $a378			jsr 	ValMainCode 				; do the main val() code
.a366	b0 01		bcs $a369			bcs 	_VUError 					; couldn't convert
.a368	60		rts				rts
.a369					_VUError:
.a369	4c 17 a5	jmp $a517			jmp 	TypeError
.a36c					IsValUnary:
.a36c	fa		plx				plx 								; restore stack pos
.a36d	20 78 a3	jsr $a378			jsr 	ValMainCode 				; do the main val() code
.a370	b0 03		bcs $a375			bcs 	_VUBad
.a372	4c 09 8d	jmp $8d09			jmp 	ReturnTrue
.a375					_VUBad:
.a375	4c 15 8d	jmp $8d15			jmp 	ReturnFalse
.a378					ValMainCode:
.a378	20 4e 97	jsr $974e			jsr 	EvaluateString 				; get a string
.a37b	20 2b 9f	jsr $9f2b			jsr 	CheckRightBracket 			; check right bracket present
.a37e	5a		phy				phy
.a37f	b2 36		lda ($36)			lda 	(zTemp0) 					; check not empty string
.a381	f0 17		beq $a39a			beq 	_VMCFail2
.a383	a0 ff		ldy #$ff			ldy 	#$FF 						; start position
.a385	48		pha				pha 								; save first character
.a386	c9 2d		cmp #$2d			cmp 	#"-"		 				; is it -
.a388	d0 01		bne $a38b			bne 	_VMCStart
.a38a	c8		iny				iny 								; skip over -
.a38b					_VMCStart:
.a38b	38		sec				sec 								; initialise first time round.
.a38c					_VMCNext:
.a38c	c8		iny				iny 								; pre-increment
.a38d	b1 36		lda ($36),y			lda 	(zTemp0),y 					; next character
.a38f	f0 0c		beq $a39d			beq 	_VMCSuccess 				; successful.
.a391	20 58 92	jsr $9258			jsr 	EncodeNumber 				; send it to the number-builder
.a394	90 03		bcc $a399			bcc 	_VMCFail 					; if failed, give up.
.a396	18		clc				clc 								; next time round, countinue
.a397	80 f3		bra $a38c			bra 	_VMCNext
.a399					_VMCFail:
.a399	68		pla				pla
.a39a					_VMCFail2:
.a39a	7a		ply				ply
.a39b	38		sec				sec
.a39c	60		rts				rts
.a39d					_VMCSuccess:
.a39d	a9 00		lda #$00			lda 	#0 							; construct final
.a39f	20 58 92	jsr $9258			jsr 	EncodeNumber
.a3a2	68		pla				pla
.a3a3	c9 2d		cmp #$2d			cmp 	#"-"
.a3a5	d0 03		bne $a3aa			bne 	_VMCNotNegative
.a3a7	20 9b 97	jsr $979b			jsr		NSMNegate
.a3aa					_VMCNotNegative:
.a3aa	7a		ply				ply
.a3ab	18		clc				clc
.a3ac	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/chr.asm

.95c1					ChrUnary:
.95c1	fa		plx				plx 								; restore stack pos
.95c2	20 87 97	jsr $9787			jsr 	Evaluate8BitInteger			; get value
.95c5	48		pha				pha
.95c6	20 2b 9f	jsr $9f2b			jsr 	CheckRightBracket
.95c9	a9 01		lda #$01			lda 	#1 							; allocate space for one char
.95cb	20 2e a7	jsr $a72e			jsr 	StringTempAllocate
.95ce	68		pla				pla 								; write number to it
.95cf	20 6c a7	jsr $a76c			jsr 	StringTempWrite
.95d2	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/spc.asm

.95d3					SpcUnary:
.95d3	fa		plx				plx 								; restore stack pos
.95d4	20 87 97	jsr $9787			jsr 	Evaluate8BitInteger			; get value
.95d7	5a		phy				phy
.95d8	48		pha				pha 								; save count
.95d9	20 2e a7	jsr $a72e			jsr 	StringTempAllocate
.95dc	7a		ply				ply 								; to do count in Y
.95dd					_SpcLoop:
.95dd	c0 00		cpy #$00			cpy 	#0
.95df	f0 08		beq $95e9			beq 	_SpcExit
.95e1	a9 20		lda #$20			lda 	#32
.95e3	20 6c a7	jsr $a76c			jsr 	StringTempWrite
.95e6	88		dey				dey
.95e7	80 f4		bra $95dd			bra 	_SPCLoop
.95e9					_SpcExit:
.95e9	7a		ply				ply
.95ea	20 2b 9f	jsr $9f2b			jsr 	CheckRightBracket
.95ed	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/str.asm

.95ee					Unary_Str:
.95ee	fa		plx				plx
.95ef	20 43 97	jsr $9743			jsr 	EvaluateNumber  			; get number
.95f2	20 2b 9f	jsr $9f2b			jsr 	CheckRightBracket 			; closing bracket
.95f5	a9 05		lda #$05			lda 	#5 							; maximum decimals, from Basic816
.95f7	20 10 96	jsr $9610			jsr 	ConvertNumberToString 		; do the conversion.
.95fa	a9 21		lda #$21			lda		#33 						; create buffer
.95fc	20 2e a7	jsr $a72e			jsr 	StringTempAllocate 			; allocate memory
.95ff	da		phx				phx
.9600	a2 00		ldx #$00			ldx 	#0
.9602					_USCopy:
.9602	bd 98 08	lda $0898,x			lda 	DecimalBuffer,x
.9605	20 6c a7	jsr $a76c			jsr 	StringTempWrite
.9608	e8		inx				inx
.9609	bd 98 08	lda $0898,x			lda 	DecimalBuffer,x
.960c	d0 f4		bne $9602			bne 	_USCopy
.960e	fa		plx				plx
.960f	60		rts				rts
.9610					ConvertNumberToString:
.9610	5a		phy				phy 								; save code position
.9611	8d 14 07	sta $0714			sta 	DecimalPlaces	 			; save number of DPs.
.9614	9c 15 07	stz $0715			stz 	dbOffset 					; offset into decimal buffer = start.
.9617	bd 00 06	lda $0600,x			lda 	NSStatus,x  				; is it -ve.
.961a	10 0a		bpl $9626			bpl 	_CNTSNotNegative
.961c	29 7f		and #$7f			and 	#$7F 						; make +ve
.961e	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9621	a9 2d		lda #$2d			lda 	#"-"
.9623	20 8c 96	jsr $968c			jsr 	WriteDecimalBuffer
.9626					_CNTSNotNegative:
.9626	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check if decimal
.9629	f0 15		beq $9640			beq 	_CNTSNotFloat
.962b	e8		inx				inx 								; round up
.962c	a9 01		lda #$01			lda 	#1
.962e	20 f1 97	jsr $97f1			jsr 	NSMSetByte
.9631	ca		dex				dex
.9632	bd 28 06	lda $0628,x			lda		NSExponent,x
.9635	9d 29 06	sta $0629,x			sta 	NSExponent+1,x
.9638	a9 08		lda #$08			lda 	#NSTFloat
.963a	9d 01 06	sta $0601,x			sta 	NSStatus+1,x
.963d	20 f2 a0	jsr $a0f2			jsr 	FloatAdd
.9640					_CNTSNotFloat:
.9640	20 6e 96	jsr $966e			jsr 	MakePlusTwoString
.9643	20 d0 a1	jsr $a1d0			jsr 	FloatFractionalPart 		; get the fractional part
.9646	20 94 a2	jsr $a294			jsr 	NSNormalise					; normalise , exit if zero
.9649	f0 21		beq $966c			beq 	_CNTSExit
.964b	a9 2e		lda #$2e			lda 	#"."
.964d	20 8c 96	jsr $968c			jsr 	WriteDecimalBuffer 			; write decimal place
.9650					_CNTSDecimal:
.9650	ce 14 07	dec $0714			dec 	DecimalPlaces 				; done all the decimals
.9653	30 17		bmi $966c			bmi 	_CNTSExit
.9655	e8		inx				inx 								; x 10.0
.9656	a9 0a		lda #$0a			lda 	#10
.9658	20 f1 97	jsr $97f1			jsr 	NSMSetByte
.965b	a9 08		lda #$08			lda 	#NSTFloat
.965d	9d 00 06	sta $0600,x			sta 	NSStatus,x
.9660	ca		dex				dex
.9661	20 5d a2	jsr $a25d			jsr 	FloatMultiply
.9664	20 6e 96	jsr $966e			jsr 	MakePlusTwoString
.9667	20 d0 a1	jsr $a1d0			jsr 	FloatFractionalPart 		; get the fractional part
.966a	80 e4		bra $9650			bra 	_CNTSDecimal 				; keep going.
.966c					_CNTSExit:
.966c	7a		ply				ply
.966d	60		rts				rts
.966e					MakePlusTwoString:
.966e	da		phx				phx
.966f	20 c6 97	jsr $97c6			jsr 	NSMShiftUpTwo 				; copy S[X] to S[X+2] - we will use S[X+2] for the intege part.
.9672	e8		inx				inx 								; access it
.9673	e8		inx				inx
.9674	20 33 a2	jsr $a233			jsr 	FloatIntegerPart 			; make it an integer
.9677	a9 0a		lda #$0a			lda 	#10 						; convert it in base 10
.9679	20 9c a0	jsr $a09c			jsr 	ConvertInt32
.967c	a2 00		ldx #$00			ldx	 	#0
.967e					_MPTSCopy:
.967e	bd 76 08	lda $0876,x			lda 	NumberBuffer,x
.9681	20 8c 96	jsr $968c			jsr 	WriteDecimalBuffer
.9684	e8		inx				inx
.9685	bd 76 08	lda $0876,x			lda 	NumberBuffer,x
.9688	d0 f4		bne $967e			bne 	_MPTSCopy
.968a	fa		plx				plx
.968b	60		rts				rts
.968c					WriteDecimalBuffer:
.968c	da		phx				phx
.968d	ae 15 07	ldx $0715			ldx 	dbOffset
.9690	9d 98 08	sta $0898,x			sta 	DecimalBuffer,x
.9693	9e 99 08	stz $0899,x			stz 	DecimalBuffer+1,x
.9696	ee 15 07	inc $0715			inc 	dbOffset
.9699	fa		plx				plx
.969a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/unary/string/substring.asm

.969b					Unary_Left:
.969b	fa		plx				plx
.969c	18		clc				clc 								; only one parameter
.969d	20 12 97	jsr $9712			jsr 	SubstringInitial 			; set up.
.96a0	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; Param #1 is the length
.96a3	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.96a6	9e 09 06	stz $0609,x			stz 	NSMantissa0+1,x 			; Start is zero.
.96a9	80 2c		bra $96d7			bra 	SubstringMain
.96ab					Unary_Right:
.96ab	fa		plx				plx
.96ac	18		clc				clc 								; only one parameter
.96ad	20 12 97	jsr $9712			jsr 	SubstringInitial 			; set up.
.96b0	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; length => param 2
.96b3	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.96b6	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; total length
.96b9	fd 09 06	sbc $0609,x			sbc 	NSMantissa0+1,x 			; length - required.
.96bc	b0 02		bcs $96c0			bcs 	_URNotUnderflow
.96be	a9 00		lda #$00			lda 	#0 							; start from the beginning, as something like right$("AB",3)
.96c0					_URNotUnderFlow:
.96c0	9d 09 06	sta $0609,x			sta 	NSMantissa0+1,x 			; this is the start position
.96c3	80 12		bra $96d7			bra 	SubStringMain
.96c5					Unary_Mid:
.96c5	fa		plx				plx
.96c6	38		sec				sec 								; two parameters
.96c7	20 12 97	jsr $9712			jsr 	SubstringInitial 			; set up.
.96ca	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; first parameter is zero ?
.96cd	f0 05		beq $96d4			beq 	_UMError
.96cf	de 09 06	dec $0609,x			dec 	NSMantissa0+1,x				; reduce initial offset by 1 as MID$(a$,1..) is actually the first character
.96d2	80 03		bra $96d7			bra 	SubStringMain
.96d4					_UMError:
.96d4	4c 1c a5	jmp $a51c			jmp 	ArgumentError
.96d7					SubStringMain:
.96d7	bd 09 06	lda $0609,x			lda 	NSMantissa0+1,x 			; is the initial offset >= the length
.96da	dd 28 06	cmp $0628,x			cmp 	NSExponent,x
.96dd	b0 2d		bcs $970c			bcs 	_SSMNull 					; if so, return an empty string.
.96df	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; if copy count is zero
.96e2	f0 28		beq $970c			beq 	_SSMNull 					; return empty string.
.96e4	18		clc				clc 								; add the offset +1 to the address and
.96e5	bd 08 06	lda $0608,x			lda	 	NSMantissa0,x 				; put in zTemp
.96e8	7d 09 06	adc $0609,x			adc 	NSMantissa0+1,x
.96eb	85 36		sta $36				sta 	zTemp0
.96ed	bd 10 06	lda $0610,x			lda	 	NSMantissa1,x
.96f0	69 00		adc #$00			adc 	#0
.96f2	85 37		sta $37				sta 	zTemp0+1
.96f4					_SSMNoCarry:
.96f4	bd 0a 06	lda $060a,x			lda 	NSMantissa0+2,x 			; characters required.
.96f7	20 2e a7	jsr $a72e			jsr 	StringTempAllocate 			; allocate that many characters
.96fa	5a		phy				phy 								; save Y
.96fb	a0 00		ldy #$00			ldy 	#0 							; start copying in.
.96fd					_SSMCopy:
.96fd	b1 36		lda ($36),y			lda 	(zTemp0),y 					; get next character
.96ff	f0 09		beq $970a			beq 	_SSMEString 				; no more to copy
.9701	20 6c a7	jsr $a76c			jsr 	StringTempWrite 			; and write it out.
.9704	c8		iny				iny
.9705	de 0a 06	dec $060a,x			dec 	NSMantissa0+2,x
.9708	d0 f3		bne $96fd			bne 	_SSMCopy
.970a					_SSMEString:
.970a	7a		ply				ply
.970b					_SSMExit:
.970b	60		rts				rts
.970c					_SSMNull:
.970c	a9 00		lda #$00			lda 	#0
.970e	20 2e a7	jsr $a72e			jsr 	StringTempAllocate
.9711	60		rts				rts
.9712					SubstringInitial:
.9712	da		phx				phx 								; save initial stack position
.9713	08		php				php 								; save carry on stack indicating 2 parameters
.9714	20 4e 97	jsr $974e			jsr 	EvaluateString 				; get a string
.9717	5a		phy				phy 								; calculate length to exponent.
.9718	a0 ff		ldy #$ff			ldy 	#$FF
.971a					_SIFindLength:
.971a	c8		iny				iny
.971b	b1 36		lda ($36),y			lda 	(zTemp0),y
.971d	d0 fb		bne $971a			bne 	_SIFindLength
.971f	98		tya				tya
.9720	9d 28 06	sta $0628,x			sta 	NSExponent,x
.9723	7a		ply				ply
.9724	e8		inx				inx
.9725	20 33 9f	jsr $9f33			jsr 	CheckComma 					; comma next
.9728	20 87 97	jsr $9787			jsr 	Evaluate8BitInteger 		; get next parameter
.972b	28		plp				plp 								; is it the last parameter ?
.972c	90 07		bcc $9735			bcc 	_SSIExit 					; if so, exit.
.972e	e8		inx				inx
.972f	20 33 9f	jsr $9f33			jsr 	CheckComma 					; comma next
.9732	20 87 97	jsr $9787			jsr 	Evaluate8BitInteger 		; get last parameter
.9735					_SSIExit:
.9735	fa		plx				plx
.9736	20 2b 9f	jsr $9f2b			jsr 	CheckRightBracket 			; check closing bracket
.9739	60		rts				rts 								; exit

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/exprhelper.asm

.973a					EvaluateValue:
.973a	48		pha				pha
.973b	20 a5 90	jsr $90a5			jsr		EvaluateExpression 			; expression
.973e	20 ba 91	jsr $91ba			jsr 	Dereference					; derefernce it
.9741	68		pla				pla
.9742	60		rts				rts
.9743					EvaluateNumber:
.9743	20 3a 97	jsr $973a			jsr 	EvaluateValue 				; get a value
.9746	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if string.
.9749	29 10		and #$10			and 	#NSBIsString
.974b	d0 16		bne $9763			bne 	HelperTypeError
.974d	60		rts				rts
.974e					EvaluateString:
.974e	20 3a 97	jsr $973a			jsr 	EvaluateValue 				; get a value
.9751	bd 00 06	lda $0600,x			lda 	NSStatus,x 					; check if string.
.9754	29 10		and #$10			and 	#NSBIsString
.9756	f0 0b		beq $9763			beq 	HelperTypeError
.9758					CopyAddressToTemp0:
.9758	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy address -> zTemp0
.975b	85 36		sta $36				sta 	zTemp0
.975d	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.9760	85 37		sta $37				sta 	zTemp0+1
.9762	60		rts				rts
.9763					HelperTypeError:
.9763	4c 17 a5	jmp $a517			jmp 	TypeError
.9766					EvaluateInteger:
.9766	20 43 97	jsr $9743			jsr 	EvaluateNumber
.9769	bd 28 06	lda $0628,x			lda 	NSExponent,x 				; check exponent is zero
.976c	d0 0a		bne $9778			bne 	HelperValueError 			; if not, it's a float.
.976e	60		rts				rts
.976f					EvaluateUnsignedInteger:
.976f	20 66 97	jsr $9766			jsr 	EvaluateInteger 			; check integer is +ve
.9772	bd 00 06	lda $0600,x			lda 	NSStatus,x
.9775	30 01		bmi $9778			bmi 	HelperValueError
.9777	60		rts				rts
.9778					HelperValueError:
.9778	4c 1c a5	jmp $a51c			jmp 	ArgumentError
.977b					Evaluate16BitInteger:
.977b	20 6f 97	jsr $976f			jsr	 	EvaluateUnsignedInteger		; get integer
.977e	bd 20 06	lda $0620,x			lda 	NSMantissa3,x	 			; bytes 2 & 3 must be zero
.9781	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.9784	d0 f2		bne $9778			bne 	HelperValueError
.9786	60		rts				rts
.9787					Evaluate8BitInteger:
.9787	20 6f 97	jsr $976f			jsr	 	EvaluateUnsignedInteger 	; get an integer
.978a	d0 ec		bne $9778			bne 	HelperValueError
.978c	bd 20 06	lda $0620,x			lda 	NSMantissa3,x	 			; bytes 1, 2 & 3 must be zero
.978f	1d 18 06	ora $0618,x			ora 	NSMantissa2,x
.9792	1d 10 06	ora $0610,x			ora 	NSMantissa1,x
.9795	d0 e1		bne $9778			bne 	HelperValueError
.9797	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.979a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/mult8x8.asm

.a3ad					Multiply8x8:
.a3ad	4a		lsr a		  		lsr 	a  							; prime the carry bit for the loop
.a3ae	85 36		sta $36			  	sta 	zTemp0
.a3b0	86 37		stx $37				stx 	zTemp0+1
.a3b2	a9 00		lda #$00			lda 	#0
.a3b4	a2 08		ldx #$08			ldx 	#8
.a3b6					_M88Loop:
.a3b6	90 03		bcc $a3bb			bcc 	_M88NoAdd
.a3b8	18		clc				clc
.a3b9	65 37		adc $37				adc 	zTemp0+1
.a3bb					_M88NoAdd:
.a3bb	6a		ror a				ror 	a
.a3bc	66 36		ror $36				ror 	zTemp0  					; pull another bit out for the next iteration
.a3be	ca		dex				dex         						; inc/dec don't modify carry; only shifts and adds do
.a3bf	d0 f5		bne $a3b6			bne 	_M88Loop
.a3c1	85 37		sta $37				sta 	zTemp0+1 					; store high 8 bits.
.a3c3	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/expressions/utility/utility.asm

.979b					NSMNegate:
.979b	bd 00 06	lda $0600,x			lda 	NSStatus,x
.979e	49 80		eor #$80			eor 	#NSBIsNegative
.97a0	9d 00 06	sta $0600,x			sta 	NSStatus,x
.97a3	60		rts				rts
.97a4					NSMNegateMantissa:
.97a4	38		sec				sec
.97a5	a9 00		lda #$00			lda 	#0
.97a7	fd 08 06	sbc $0608,x			sbc 	NSMantissa0,x
.97aa	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.97ad	a9 00		lda #$00			lda 	#0
.97af	fd 10 06	sbc $0610,x			sbc 	NSMantissa1,x
.97b2	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.97b5	a9 00		lda #$00			lda 	#0
.97b7	fd 18 06	sbc $0618,x			sbc 	NSMantissa2,x
.97ba	9d 18 06	sta $0618,x			sta 	NSMantissa2,x
.97bd	a9 00		lda #$00			lda 	#0
.97bf	fd 20 06	sbc $0620,x			sbc 	NSMantissa3,x
.97c2	9d 20 06	sta $0620,x			sta 	NSMantissa3,x
.97c5	60		rts				rts
.97c6					NSMShiftUpTwo:
.97c6	bd 08 06	lda $0608,x			lda 	NSMantissa0,x
.97c9	9d 0a 06	sta $060a,x			sta 	NSMantissa0+2,x
.97cc	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.97cf	9d 12 06	sta $0612,x			sta 	NSMantissa1+2,x
.97d2	bd 18 06	lda $0618,x			lda 	NSMantissa2,x
.97d5	9d 1a 06	sta $061a,x			sta 	NSMantissa2+2,x
.97d8	bd 20 06	lda $0620,x			lda 	NSMantissa3,x
.97db	9d 22 06	sta $0622,x			sta 	NSMantissa3+2,x
.97de	bd 28 06	lda $0628,x			lda 	NSExponent,x
.97e1	9d 2a 06	sta $062a,x			sta 	NSExponent+2,x
.97e4	bd 00 06	lda $0600,x			lda 	NSStatus,x
.97e7	9d 02 06	sta $0602,x			sta 	NSStatus+2,x
.97ea	60		rts				rts
.97eb					NSMSetZeroMantissaOnly:
.97eb	a9 00		lda #$00			lda 	#0
.97ed	80 08		bra $97f7			bra 	NSMSetMantissa
.97ef					NSMSetZero:
.97ef	a9 00		lda #$00			lda 	#0
.97f1					NSMSetByte:
.97f1	9e 28 06	stz $0628,x			stz 	NSExponent,x 				; zero exponent, as integer.
.97f4	9e 00 06	stz $0600,x			stz 	NSStatus,x 					; status zero (integer)
.97f7					NSMSetMantissa:
.97f7	9d 08 06	sta $0608,x			sta 	NSMantissa0,x 				; mantissa
.97fa	9e 10 06	stz $0610,x			stz 	NSMantissa1,x
.97fd	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.9800	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.9803	60		rts				rts
.9804					NSMShiftLeft:
.9804	18		clc				clc
.9805					NSMRotateLeft:
.9805	3e 08 06	rol $0608,x			rol 	NSMantissa0,x
.9808	3e 10 06	rol $0610,x			rol		NSMantissa1,x
.980b	3e 18 06	rol $0618,x			rol		NSMantissa2,x
.980e	3e 20 06	rol $0620,x			rol		NSMantissa3,x
.9811	60		rts				rts
.9812					NSMShiftRight:
.9812	5e 20 06	lsr $0620,x			lsr 	NSMantissa3,x
.9815	7e 18 06	ror $0618,x			ror		NSMantissa2,x
.9818	7e 10 06	ror $0610,x			ror		NSMantissa1,x
.981b	7e 08 06	ror $0608,x			ror		NSMantissa0,x
.981e	60		rts				rts
.981f					NSMIsZero:
.981f	bd 20 06	lda $0620,x			lda 	NSMantissa3,x
.9822	1d 18 06	ora $0618,x			ora		NSMantissa2,x
.9825	1d 10 06	ora $0610,x			ora		NSMantissa1,x
.9828	1d 08 06	ora $0608,x			ora		NSMantissa0,x
.982b	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/asmcore.asm

.a3c4					Assemble_ora:
.a3c4	20 fc 81	jsr $81fc		jsr	AssembleGroup1
>a3c7	01					.byte $01
.a3c8					Assemble_and:
.a3c8	20 fc 81	jsr $81fc		jsr	AssembleGroup1
>a3cb	21					.byte $21
.a3cc					Assemble_eor:
.a3cc	20 fc 81	jsr $81fc		jsr	AssembleGroup1
>a3cf	41					.byte $41
.a3d0					Assemble_adc:
.a3d0	20 fc 81	jsr $81fc		jsr	AssembleGroup1
>a3d3	61					.byte $61
.a3d4					Assemble_sta:
.a3d4	20 fc 81	jsr $81fc		jsr	AssembleGroup1
>a3d7	81					.byte $81
.a3d8					Assemble_lda:
.a3d8	20 fc 81	jsr $81fc		jsr	AssembleGroup1
>a3db	a1					.byte $a1
.a3dc					Assemble_cmp:
.a3dc	20 fc 81	jsr $81fc		jsr	AssembleGroup1
>a3df	c1					.byte $c1
.a3e0					Assemble_sbc:
.a3e0	20 fc 81	jsr $81fc		jsr	AssembleGroup1
>a3e3	e1					.byte $e1
.a3e4					Assemble_asl:
.a3e4	20 03 82	jsr $8203		jsr	AssembleGroup2
>a3e7	02					.byte $02
>a3e8	75					.byte $75
.a3e9					Assemble_rol:
.a3e9	20 03 82	jsr $8203		jsr	AssembleGroup2
>a3ec	22					.byte $22
>a3ed	75					.byte $75
.a3ee					Assemble_lsr:
.a3ee	20 03 82	jsr $8203		jsr	AssembleGroup2
>a3f1	42					.byte $42
>a3f2	75					.byte $75
.a3f3					Assemble_ror:
.a3f3	20 03 82	jsr $8203		jsr	AssembleGroup2
>a3f6	62					.byte $62
>a3f7	75					.byte $75
.a3f8					Assemble_stx:
.a3f8	20 03 82	jsr $8203		jsr	AssembleGroup2
>a3fb	82					.byte $82
>a3fc	50					.byte $50
.a3fd					Assemble_ldx:
.a3fd	20 03 82	jsr $8203		jsr	AssembleGroup2
>a400	a2					.byte $a2
>a401	d0					.byte $d0
.a402					Assemble_dec:
.a402	20 03 82	jsr $8203		jsr	AssembleGroup2
>a405	c2					.byte $c2
>a406	55					.byte $55
.a407					Assemble_inc:
.a407	20 03 82	jsr $8203		jsr	AssembleGroup2
>a40a	e2					.byte $e2
>a40b	55					.byte $55
.a40c					Assemble_stz:
.a40c	20 03 82	jsr $8203		jsr	AssembleGroup2
>a40f	60					.byte $60
>a410	44					.byte $44
.a411					Assemble_bit:
.a411	20 03 82	jsr $8203		jsr	AssembleGroup2
>a414	20					.byte $20
>a415	55					.byte $55
.a416					Assemble_sty:
.a416	20 03 82	jsr $8203		jsr	AssembleGroup2
>a419	80					.byte $80
>a41a	54					.byte $54
.a41b					Assemble_ldy:
.a41b	20 03 82	jsr $8203		jsr	AssembleGroup2
>a41e	a0					.byte $a0
>a41f	d5					.byte $d5
.a420					Assemble_cpy:
.a420	20 03 82	jsr $8203		jsr	AssembleGroup2
>a423	c0					.byte $c0
>a424	d4					.byte $d4
.a425					Assemble_cpx:
.a425	20 03 82	jsr $8203		jsr	AssembleGroup2
>a428	e0					.byte $e0
>a429	d0					.byte $d0
.a42a					Assemble_tsb:
.a42a	20 03 82	jsr $8203		jsr	AssembleGroup2
>a42d	00					.byte $00
>a42e	50					.byte $50
.a42f					Assemble_trb:
.a42f	20 03 82	jsr $8203		jsr	AssembleGroup2
>a432	10					.byte $10
>a433	50					.byte $50
.a434					Assemble_jsr:
.a434	20 03 82	jsr $8203		jsr	AssembleGroup2
>a437	14					.byte $14
>a438	10					.byte $10
.a439					Assemble_jmp:
.a439	20 03 82	jsr $8203		jsr	AssembleGroup2
>a43c	40					.byte $40
>a43d	10					.byte $10
.a43e					Assemble_bpl:
.a43e	20 54 82	jsr $8254		jsr	AssembleGroup3
>a441	10					.byte $10
.a442					Assemble_bmi:
.a442	20 54 82	jsr $8254		jsr	AssembleGroup3
>a445	30					.byte $30
.a446					Assemble_bvc:
.a446	20 54 82	jsr $8254		jsr	AssembleGroup3
>a449	50					.byte $50
.a44a					Assemble_bvs:
.a44a	20 54 82	jsr $8254		jsr	AssembleGroup3
>a44d	70					.byte $70
.a44e					Assemble_bcc:
.a44e	20 54 82	jsr $8254		jsr	AssembleGroup3
>a451	90					.byte $90
.a452					Assemble_bcs:
.a452	20 54 82	jsr $8254		jsr	AssembleGroup3
>a455	b0					.byte $b0
.a456					Assemble_bne:
.a456	20 54 82	jsr $8254		jsr	AssembleGroup3
>a459	d0					.byte $d0
.a45a					Assemble_beq:
.a45a	20 54 82	jsr $8254		jsr	AssembleGroup3
>a45d	f0					.byte $f0
.a45e					Assemble_bra:
.a45e	20 54 82	jsr $8254		jsr	AssembleGroup3
>a461	80					.byte $80
.a462					Assemble_brk:
.a462	20 8a 82	jsr $828a		jsr	AssembleGroup4
>a465	00					.byte $00
.a466					Assemble_php:
.a466	20 8a 82	jsr $828a		jsr	AssembleGroup4
>a469	08					.byte $08
.a46a					Assemble_clc:
.a46a	20 8a 82	jsr $828a		jsr	AssembleGroup4
>a46d	18					.byte $18
.a46e					Assemble_plp:
.a46e	20 8a 82	jsr $828a		jsr	AssembleGroup4
>a471	28					.byte $28
.a472					Assemble_sec:
.a472	20 8a 82	jsr $828a		jsr	AssembleGroup4
>a475	38					.byte $38
.a476					Assemble_rti:
.a476	20 8a 82	jsr $828a		jsr	AssembleGroup4
>a479	40					.byte $40
.a47a					Assemble_pha:
.a47a	20 8a 82	jsr $828a		jsr	AssembleGroup4
>a47d	48					.byte $48
.a47e					Assemble_cli:
.a47e	20 8a 82	jsr $828a		jsr	AssembleGroup4
>a481	58					.byte $58
.a482					Assemble_phy:
.a482	20 8a 82	jsr $828a		jsr	AssembleGroup4
>a485	5a					.byte $5a
.a486					Assemble_rts:
.a486	20 8a 82	jsr $828a		jsr	AssembleGroup4
>a489	60					.byte $60
.a48a					Assemble_pla:
.a48a	20 8a 82	jsr $828a		jsr	AssembleGroup4
>a48d	68					.byte $68
.a48e					Assemble_sei:
.a48e	20 8a 82	jsr $828a		jsr	AssembleGroup4
>a491	78					.byte $78
.a492					Assemble_ply:
.a492	20 8a 82	jsr $828a		jsr	AssembleGroup4
>a495	7a					.byte $7a
.a496					Assemble_dey:
.a496	20 8a 82	jsr $828a		jsr	AssembleGroup4
>a499	88					.byte $88
.a49a					Assemble_txa:
.a49a	20 8a 82	jsr $828a		jsr	AssembleGroup4
>a49d	8a					.byte $8a
.a49e					Assemble_tya:
.a49e	20 8a 82	jsr $828a		jsr	AssembleGroup4
>a4a1	98					.byte $98
.a4a2					Assemble_txs:
.a4a2	20 8a 82	jsr $828a		jsr	AssembleGroup4
>a4a5	9a					.byte $9a
.a4a6					Assemble_tay:
.a4a6	20 8a 82	jsr $828a		jsr	AssembleGroup4
>a4a9	a8					.byte $a8
.a4aa					Assemble_tax:
.a4aa	20 8a 82	jsr $828a		jsr	AssembleGroup4
>a4ad	aa					.byte $aa
.a4ae					Assemble_clv:
.a4ae	20 8a 82	jsr $828a		jsr	AssembleGroup4
>a4b1	b8					.byte $b8
.a4b2					Assemble_tsx:
.a4b2	20 8a 82	jsr $828a		jsr	AssembleGroup4
>a4b5	ba					.byte $ba
.a4b6					Assemble_iny:
.a4b6	20 8a 82	jsr $828a		jsr	AssembleGroup4
>a4b9	c8					.byte $c8
.a4ba					Assemble_dex:
.a4ba	20 8a 82	jsr $828a		jsr	AssembleGroup4
>a4bd	ca					.byte $ca
.a4be					Assemble_cld:
.a4be	20 8a 82	jsr $828a		jsr	AssembleGroup4
>a4c1	d8					.byte $d8
.a4c2					Assemble_phx:
.a4c2	20 8a 82	jsr $828a		jsr	AssembleGroup4
>a4c5	da					.byte $da
.a4c6					Assemble_inx:
.a4c6	20 8a 82	jsr $828a		jsr	AssembleGroup4
>a4c9	e8					.byte $e8
.a4ca					Assemble_nop:
.a4ca	20 8a 82	jsr $828a		jsr	AssembleGroup4
>a4cd	ea					.byte $ea
.a4ce					Assemble_sed:
.a4ce	20 8a 82	jsr $828a		jsr	AssembleGroup4
>a4d1	f8					.byte $f8
.a4d2					Assemble_plx:
.a4d2	20 8a 82	jsr $828a		jsr	AssembleGroup4
>a4d5	fa					.byte $fa

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/constants.asm

.a4d6					DecimalScalarTable:
>a4d6	66 66 66 66				.dword $66666666 ; 0.1
>a4da	de					.byte $de
>a4db	1f 85 eb 51				.dword $51eb851f ; 0.01
>a4df	db					.byte $db
>a4e0	4c 37 89 41				.dword $4189374c ; 0.001
>a4e4	d8					.byte $d8
>a4e5	ac 8b db 68				.dword $68db8bac ; 0.0001
>a4e9	d4					.byte $d4
>a4ea	24 d6 e2 53				.dword $53e2d624 ; 1e-05
>a4ee	d1					.byte $d1
>a4ef	83 de 1b 43				.dword $431bde83 ; 1e-06
>a4f3	ce					.byte $ce
>a4f4	6b ca 5f 6b				.dword $6b5fca6b ; 1e-07
>a4f8	ca					.byte $ca
>a4f9	89 3b e6 55				.dword $55e63b89 ; 1e-08
>a4fd	c7					.byte $c7
>a4fe	a1 2f b8 44				.dword $44b82fa1 ; 1e-09
>a502	c4					.byte $c4
>a503	67 7f f3 6d				.dword $6df37f67 ; 1e-10
>a507	c0					.byte $c0
>a508	86 ff f5 57				.dword $57f5ff86 ; 1e-11
>a50c	bd					.byte $bd

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/errors.asm

.a50d					SyntaxError:
.a50d	a9 02		lda #$02		lda	#2
.a50f	4c 9c 8c	jmp $8c9c		jmp	ErrorHandler
.a512					RangeError:
.a512	a9 04		lda #$04		lda	#4
.a514	4c 9c 8c	jmp $8c9c		jmp	ErrorHandler
.a517					TypeError:
.a517	a9 05		lda #$05		lda	#5
.a519	4c 9c 8c	jmp $8c9c		jmp	ErrorHandler
.a51c					ArgumentError:
.a51c	a9 07		lda #$07		lda	#7
.a51e	4c 9c 8c	jmp $8c9c		jmp	ErrorHandler
.a521					NotDoneError:
.a521	a9 0c		lda #$0c		lda	#12
.a523	4c 9c 8c	jmp $8c9c		jmp	ErrorHandler
.a526					ErrorText:
>a526	42 72 65 61 6b 00			.text	"Break",0
>a52c	53 79 6e 74 61 78 20 65			.text	"Syntax error",0
>a534	72 72 6f 72 00
>a539	44 69 76 69 73 69 6f 6e			.text	"Division by zero",0
>a541	20 62 79 20 7a 65 72 6f 00
>a54a	4f 75 74 20 6f 66 20 52			.text	"Out of Range",0
>a552	61 6e 67 65 00
>a557	54 79 70 65 20 6d 69 73			.text	"Type mismatch",0
>a55f	6d 61 74 63 68 00
>a565	4f 75 74 20 6f 66 20 6d			.text	"Out of memory",0
>a56d	65 6d 6f 72 79 00
>a573	49 6c 6c 65 67 61 6c 20			.text	"Illegal argument",0
>a57b	61 72 67 75 6d 65 6e 74 00
>a584	53 74 6f 70 00				.text	"Stop",0
>a589	53 74 72 69 6e 67 20 74			.text	"String too long",0
>a591	6f 6f 20 6c 6f 6e 67 00
>a599	41 73 73 65 72 74 69 6f			.text	"Assertion failed",0
>a5a1	6e 20 66 61 69 6c 65 64 00
>a5aa	4f 75 74 20 6f 66 20 64			.text	"Out of data",0
>a5b2	61 74 61 00
>a5b6	55 6e 69 6d 70 6c 65 6d			.text	"Unimplemented",0
>a5be	65 6e 74 65 64 00
>a5c4	4e 6f 20 73 75 63 68 20			.text	"No such line number",0
>a5cc	6c 69 6e 65 20 6e 75 6d 62 65 72 00
>a5d8	52 65 74 75 72 6e 20 77			.text	"Return without Gosub",0
>a5e0	69 74 68 6f 75 74 20 47 6f 73 75 62 00
>a5ed	55 6e 74 69 6c 20 77 69			.text	"Until without Repeat",0
>a5f5	74 68 6f 75 74 20 52 65 70 65 61 74 00
>a602	57 65 6e 64 20 77 69 74			.text	"Wend without While",0
>a60a	68 6f 75 74 20 57 68 69 6c 65 00
>a615	4e 65 78 74 20 77 69 74			.text	"Next without For",0
>a61d	68 6f 75 74 20 46 6f 72 00
>a626	42 41 53 49 43 20 53 74			.text	"BASIC Stack full",0
>a62e	61 63 6b 20 66 75 6c 6c 00
>a637	4f 70 65 6e 20 53 74 72			.text	"Open Structure",0
>a63f	75 63 74 75 72 65 00
>a646	45 6e 64 50 72 6f 63 20			.text	"EndProc without call",0
>a64e	77 69 74 68 6f 75 74 20 63 61 6c 6c 00
>a65b	41 72 72 61 79 20 61 6c			.text	"Array already defined",0
>a663	72 65 61 64 79 20 64 65 66 69 6e 65 64 00
>a671	41 72 72 61 79 20 73 69			.text	"Array size",0
>a679	7a 65 00
>a67c	42 61 64 20 61 72 72 61			.text	"Bad array index",0
>a684	79 20 69 6e 64 65 78 00

;******  Return to file: _basic.asm


;******  Processing file: ./common/generated/timestamp.asm

>a68c	42 75 69 6c 74 20 57 65			.text "Built Wednesday 05-Oct-2022. Build 130."
>a694	64 6e 65 73 64 61 79 20 30 35 2d 4f 63 74 2d 32
>a6a4	30 32 32 2e 20 42 75 69 6c 64 20 31 33 30 2e

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/bytes.asm

.982c					StackPushByte:
.982c	48		pha				pha 								; save byte
.982d	a5 34		lda $34				lda 	BasicStack
.982f	d0 02		bne $9833			bne 	_SPBNoBorrow
.9831	c6 35		dec $35				dec 	BasicStack+1
.9833					_SPBNoBorrow:
.9833	c6 34		dec $34				dec 	BasicStack
.9835	68		pla				pla 								; get back and write
.9836	92 34		sta ($34)			sta 	(BasicStack)
.9838	60		rts				rts
.9839					StackPopByte:
.9839	b2 34		lda ($34)			lda 	(BasicStack)
.983b	e6 34		inc $34				inc 	BasicStack
.983d	d0 02		bne $9841			bne 	_SPBNoCarry
.983f	e6 35		inc $35				inc 	BasicStack+1
.9841					_SPBNoCarry:
.9841	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/frames.asm

.9842					StackOpen:
.9842	48		pha				pha 								; save frame byte
.9843	29 0f		and #$0f			and 	#$0F 						; the bytes to subtract.
.9845	0a		asl a				asl 	a 							; claim twice this for storage
.9846	49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.9848	38		sec				sec 								; so basically subtracting from
.9849	65 34		adc $34				adc 	basicStack 	 				; basicStack
.984b	85 34		sta $34				sta 	basicStack
.984d	b0 08		bcs $9857			bcs 	_SONoBorrow
.984f	c6 35		dec $35				dec 	basicStack+1
.9851	a5 35		lda $35				lda 	basicStack+1 				; have we reached stack overflow
.9853	c9 0e		cmp #$0e			cmp 	#BasicStackBase >> 8
.9855	90 04		bcc $985b			bcc 	_SOMemory
.9857					_SONoBorrow:
.9857	68		pla				pla 								; get marker back and write at TOS
.9858	92 34		sta ($34)			sta 	(basicStack)
.985a	60		rts				rts
.985b					_SOMemory:
.985b							ERR_STACK
.985b					StackClose:
.985b	b2 34		lda ($34)			lda 	(basicStack) 				; get TOS marker
.985d	29 0f		and #$0f			and 	#$0F 						; bytes to add back
.985f	0a		asl a				asl 	a 							; claim twice this.
.9860	65 34		adc $34				adc 	basicStack 					; add to the stack pointer.
.9862	85 34		sta $34				sta 	basicStack
.9864	90 02		bcc $9868			bcc 	_SCExit
.9866	e6 35		inc $35				inc 	basicStack+1
.9868					_SCExit:
.9868	60		rts				rts
.9869					StackCheckFrame:
.9869	48		pha				pha
.986a					_StackRemoveLocals:
.986a	b2 34		lda ($34)			lda 	(basicStack) 				; check for local, keep popping them
.986c	c9 03		cmp #$03			cmp 	#STK_LOCALS+1
.986e	b0 05		bcs $9875			bcs 	_SCNoLocal
.9870	20 fe 9e	jsr $9efe			jsr 	LocalPopValue
.9873	80 f5		bra $986a			bra 	_StackRemoveLocals
.9875					_SCNoLocal:
.9875	68		pla				pla
.9876	52 34		eor ($34)			eor 	(basicStack) 				; xor with toS marker
.9878	29 f0		and #$f0			and 	#$F0 						; check type bits
.987a	d0 01		bne $987d			bne 	_SCFError 					; different, we have structures mixed up
.987c	60		rts				rts
.987d					_SCFError:
.987d	8a		txa				txa 								; report error X
.987e	4c 9c 8c	jmp $8c9c			jmp 	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/location.asm

.9881					STKSaveCodePosition:
.9881	5a		phy				phy
.9882	98		tya				tya 								; save Y
.9883	a0 05		ldy #$05			ldy 	#5
.9885	91 34		sta ($34),y			sta 	(basicStack),y
.9887	88		dey				dey 								; save Code Pointer
.9888					_STKSaveLoop:
.9888	b9 2f 00	lda $002f,y			lda 	safePtr-1,y 				; allows us to access the pointer w/out issues.
.988b	91 34		sta ($34),y			sta 	(basicStack),y
.988d	88		dey				dey
.988e	d0 f8		bne $9888			bne 	_STKSaveLoop
.9890	7a		ply				ply
.9891	60		rts				rts
.9892					STKLoadCodePosition:
.9892	a0 01		ldy #$01			ldy 	#1 							; load code pointer back
.9894					_STKLoadLoop:
.9894	b1 34		lda ($34),y			lda 	(basicStack),y
.9896	99 2f 00	sta $002f,y			sta 	safePtr-1,y
.9899	c8		iny				iny
.989a	c0 05		cpy #$05			cpy 	#5
.989c	d0 f6		bne $9894			bne 	_STKLoadLoop
.989e	b1 34		lda ($34),y			lda 	(basicStack),y 				; get Y offset
.98a0	a8		tay				tay
.98a1	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/stack/setup.asm

.98a2					StackReset:
.98a2	a9 ff		lda #$ff			lda 	#((BasicStackBase+BasicStackSize-1) & $FF)
.98a4	85 34		sta $34				sta 	0+basicStack
.98a6	a9 0f		lda #$0f			lda 	#((BasicStackBase+BasicStackSize-1) >> 8)
.98a8	85 35		sta $35				sta 	1+basicStack
.98aa	a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.98ac	92 34		sta ($34)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.98ae	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/concrete.asm

.a6b3					StringConcrete:
.a6b3	5a		phy				phy 								; save position on stack
.a6b4	bd 08 06	lda $0608,x			lda 	NSMantissa0,x 				; copy target string to zTemp1
.a6b7	85 38		sta $38				sta 	zTemp1
.a6b9	bd 10 06	lda $0610,x			lda 	NSMantissa1,x
.a6bc	85 39		sta $39				sta 	zTemp1+1
.a6be	a0 ff		ldy #$ff			ldy 	#$FF	 					; calculate string length
.a6c0					_SALength:
.a6c0	c8		iny				iny
.a6c1	b1 38		lda ($38),y			lda 	(zTemp1),y
.a6c3	d0 fb		bne $a6c0			bne 	_SALength
.a6c5	c0 fd		cpy #$fd			cpy 	#253 						; string too long
.a6c7	b0 3f		bcs $a708			bcs 	_SALengthError
.a6c9	98		tya				tya 				 				; length of the new string
.a6ca	18		clc				clc
.a6cb	69 08		adc #$08			adc 	#5+3 						; add 5 characters total plus 3 (length,status,EOS)
.a6cd	90 02		bcc $a6d1			bcc 	_SAHaveLength
.a6cf	a9 ff		lda #$ff			lda 	#255 						; string max length is 255
.a6d1					_SAHaveLength:
.a6d1	48		pha				pha 								; save length.
.a6d2	38		sec				sec
.a6d3	49 ff		eor #$ff			eor 	#$FF 						; add to StringMemory using 2's complement
.a6d5	6d 0e 07	adc $070e			adc 	StringMemory
.a6d8	8d 0e 07	sta $070e			sta 	StringMemory
.a6db	85 3a		sta $3a				sta 	zTemp2 						; update storage address
.a6dd	9d 08 06	sta $0608,x			sta 	NSMantissa0,x 				; update mantissa address
.a6e0	a9 ff		lda #$ff			lda 	#$FF 						; now do the MSB
.a6e2	6d 0f 07	adc $070f			adc 	StringMemory+1
.a6e5	8d 0f 07	sta $070f			sta 	StringMemory+1
.a6e8	85 3b		sta $3b				sta 	zTemp2+1
.a6ea	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.a6ed	68		pla				pla 								; save length-3 (chars allowed) in first byte
.a6ee	38		sec				sec
.a6ef	e9 03		sbc #$03			sbc 	#3
.a6f1	92 3a		sta ($3a)			sta 	(zTemp2)
.a6f3	a9 00		lda #$00			lda 	#0 							; clear the status byte.
.a6f5	a0 01		ldy #$01			ldy 	#1
.a6f7	91 3a		sta ($3a),y			sta 	(zTemp2),y
.a6f9					_SACopyNewString:
.a6f9	a0 00		ldy #$00			ldy 	#0
.a6fb					_SACopyNSLoop:
.a6fb	b1 38		lda ($38),y			lda 	(zTemp1),y 					; get character
.a6fd	c8		iny				iny 								; write two on in string storage
.a6fe	c8		iny				iny
.a6ff	91 3a		sta ($3a),y			sta 	(zTemp2),y
.a701	88		dey				dey 								; this makes it one one.
.a702	c9 00		cmp #$00			cmp 	#0 							; until EOS copied
.a704	d0 f5		bne $a6fb			bne 	_SACopyNSLoop
.a706	7a		ply				ply
.a707	60		rts				rts
.a708					_SALengthError:
.a708	a9 09		lda #$09		lda	#9
.a70a	4c 9c 8c	jmp $8c9c		jmp	ErrorHandler

;******  Return to file: _basic.asm


;******  Processing file: ./common/strings/stringalloc.asm

.a70d					StringSystemInitialise:
.a70d	a9 ff		lda #$ff			lda 	#((EndVariableSpace-1) & $FF)
.a70f	8d 0e 07	sta $070e			sta 	0+StringMemory
.a712	a9 1f		lda #$1f			lda 	#((EndVariableSpace-1) >> 8)
.a714	8d 0f 07	sta $070f			sta 	1+StringMemory
.a717	9c ff 1f	stz $1fff			stz 	EndVariableSpace-1 			; put a zero at the end, so know end of string memory.
.a71a	60		rts				rts
.a71b					StringSpaceInitialise:
.a71b	a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.a71d	8d 10 07	sta $0710			sta 	StringInitialised
.a720	ad 0e 07	lda $070e			lda 	StringMemory 				; allocate 256 bytes for one concreted string
.a723	8d 11 07	sta $0711			sta 	StringTempPointer
.a726	ad 0f 07	lda $070f			lda 	StringMemory+1
.a729	3a		dec a				dec 	a
.a72a	8d 12 07	sta $0712			sta 	StringTempPointer+1
.a72d	60		rts				rts
.a72e					StringTempAllocate:
.a72e	c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.a730	b0 35		bcs $a767			bcs 	_STALength
.a732	2c 10 07	bit $0710			bit 	StringInitialised 			; already initialised
.a735	30 05		bmi $a73c			bmi 	_STAAllocate
.a737	48		pha				pha 								; save value to subtract.
.a738	20 1b a7	jsr $a71b			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.a73b	68		pla				pla 								; restore it
.a73c					_STAAllocate:
.a73c	49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.a73e	18		clc				clc  								; deliberate allows one more
.a73f	6d 11 07	adc $0711			adc 	StringTempPointer 			; subtract from temp pointer
.a742	8d 11 07	sta $0711			sta 	StringTempPointer
.a745	9d 08 06	sta $0608,x			sta 	NSMantissa0,x 				; address in mantissa
.a748	85 3c		sta $3c				sta 	zsTemp 						; and zsTemp
.a74a	ad 12 07	lda $0712			lda 	StringTempPointer+1
.a74d	69 ff		adc #$ff			adc 	#$FF
.a74f	8d 12 07	sta $0712			sta 	StringTempPointer+1
.a752	85 3d		sta $3d				sta 	zsTemp+1
.a754	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.a757	9e 18 06	stz $0618,x			stz 	NSMantissa2,x 				; set the typing data
.a75a	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.a75d	a9 10		lda #$10			lda 	#NSTString
.a75f	9d 00 06	sta $0600,x			sta 	NSStatus,x
.a762	a9 00		lda #$00			lda 	#0 							; clear the target string
.a764	92 3c		sta ($3c)			sta 	(zsTemp)
.a766	60		rts				rts
.a767					_STALength:
.a767	a9 09		lda #$09		lda	#9
.a769	4c 9c 8c	jmp $8c9c		jmp	ErrorHandler
.a76c					StringTempWrite:
.a76c	48		pha				pha
.a76d	92 3c		sta ($3c)			sta 	(zsTemp)
.a76f	e6 3c		inc $3c				inc 	zsTemp
.a771	d0 02		bne $a775			bne 	_STWNoCarry
.a773	e6 3d		inc $3d				inc 	zsTemp+1
.a775					_STWNoCarry:
.a775	a9 00		lda #$00			lda 	#0
.a777	92 3c		sta ($3c)			sta 	(zsTemp)
.a779	68		pla				pla
.a77a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/backload.asm

.98af					BackloadProgram:
.98af	a2 ff		ldx #$ff			ldx 	#$FF
.98b1	8e fa ff	stx $fffa			stx 	$FFFA 						; fast mode
.98b4	20 df 98	jsr $98df			jsr 	BLReadByte
.98b7	30 1f		bmi $98d8			bmi 	_BPExit
.98b9					_BPCopy:
.98b9	e8		inx				inx  								; copy byte in
.98ba	9d 25 08	sta $0825,x			sta 	lineBuffer,x
.98bd	9e 26 08	stz $0826,x			stz 	lineBuffer+1,x
.98c0	20 df 98	jsr $98df			jsr 	BLReadByte 					; read next byte
.98c3	30 0a		bmi $98cf			bmi 	_BPEndLine 					; -ve = EOL
.98c5	c9 09		cmp #$09			cmp 	#9 							; handle TAB
.98c7	d0 02		bne $98cb			bne 	_BPNotTab
.98c9	a9 20		lda #$20			lda 	#' '
.98cb					_BPNotTab:
.98cb	c9 20		cmp #$20			cmp 	#' ' 						; < ' ' = EOL
.98cd	b0 ea		bcs $98b9			bcs 	_BPCopy
.98cf					_BPEndLine:
.98cf	20 fa 9b	jsr $9bfa			jsr 	TokeniseLine 				; tokenise the line.
.98d2	38		sec				sec 								; append not insert
.98d3	20 fc a7	jsr $a7fc			jsr 	MemoryInsertLine 			; append to current program
.98d6	80 d7		bra $98af			bra 	BackloadProgram
.98d8					_BPExit:
.98d8	9c fa ff	stz $fffa			stz 	$FFFA 						; clear fast mode
.98db	20 d6 84	jsr $84d6			jsr 	ClearCommand 				; clear variables etc.
.98de	60		rts				rts
.98df					BLReadByte:
.98df					_BLLoad:
.98df	ad 00 30	lda $3000			lda 	$3000 						; hardcoded in the makefile.
.98e2	ee e0 98	inc $98e0			inc 	_BLLoad+1
.98e5	d0 03		bne $98ea			bne 	_BLNoCarry
.98e7	ee e1 98	inc $98e1			inc 	_BLLoad+2
.98ea					_BLNoCarry:
.98ea	c9 00		cmp #$00			cmp 	#0
.98ec	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/searchtokens.asm

.98ed					TokeniseSearchTable:
.98ed	84 37		sty $37				sty 	zTemp0+1 					; (zTemp0),y points to current token.
.98ef	85 36		sta $36				sta 	zTemp0
.98f1	a0 00		ldy #$00			ldy 	#0
.98f3	a9 80		lda #$80			lda 	#$80 						; token #
.98f5	85 38		sta $38				sta 	zTemp1
.98f7					_TSTLoop:
.98f7	b1 36		lda ($36),y			lda 	(zTemp0),y 					; length, 0 (skip) -ve (end)
.98f9	30 49		bmi $9944			bmi 	_TSTFail 					; -ve = end of table
.98fb	f0 2e		beq $992b			beq 	_TSTNext 					; zero, check next it's a dummy
.98fd	c8		iny				iny 								; get the hash
.98fe	b1 36		lda ($36),y			lda 	(zTemp0),y
.9900	88		dey				dey
.9901	cd 03 07	cmp $0703			cmp 	identHash 					; check they match, if not go to next
.9904	d0 25		bne $992b			bne 	_TSTNext
.9906	ad 02 07	lda $0702			lda 	identTypeEnd 				; length of identifier
.9909	38		sec				sec
.990a	ed 00 07	sbc $0700			sbc 	identStart
.990d	d1 36		cmp ($36),y			cmp 	(zTemp0),y 					; no match, then return.
.990f	d0 1a		bne $992b			bne 	_TSTNext
.9911	5a		phy				phy 								; save Y , we might fail
.9912	c8		iny				iny 								; point to text
.9913	c8		iny				iny
.9914	ae 00 07	ldx $0700			ldx 	identStart 					; offset in line buffer in X
.9917					_TSTCompareName:
.9917	bd 25 08	lda $0825,x			lda 	lineBuffer,x 				; compare text.
.991a	d1 36		cmp ($36),y			cmp 	(zTemp0),y
.991c	d0 0c		bne $992a			bne 	_TSTNextPullY 				; fail, pullY and do next
.991e	e8		inx				inx
.991f	c8		iny				iny
.9920	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; complete match.
.9923	d0 f2		bne $9917			bne 	_TSTCompareName
.9925	7a		ply				ply 								; throw Y
.9926	a5 38		lda $38				lda 	zTemp1 						; get token #
.9928	38		sec				sec 								; return with CS = passed.
.9929	60		rts				rts
.992a					_TSTNextPullY:
.992a	7a		ply				ply 								; restore current, fall through.
.992b					_TSTNext:
.992b	e6 38		inc $38				inc 	zTemp1 						; token counter
.992d	98		tya				tya
.992e	18		clc				clc
.992f	71 36		adc ($36),y			adc 	(zTemp0),y 					; add [Length] + 2 to Y
.9931	1a		inc a				inc 	a 							; +1
.9932	1a		inc a				inc 	a 							; +2
.9933	a8		tay				tay
.9934	10 c1		bpl $98f7			bpl 	_TSTLoop 					; if Y < $80 loop back
.9936	98		tya				tya 								; add Y to zTemp0 and reset Y
.9937	a0 00		ldy #$00			ldy 	#0   						; so we can use Y to search fast
.9939	18		clc				clc  								; but have tables > 255 bytes
.993a	65 36		adc $36				adc 	zTemp0 						; when Y gets >= 128 we reset Y
.993c	85 36		sta $36				sta 	zTemp0 						; and adjust the table pointer/
.993e	90 b7		bcc $98f7			bcc 	_TSTLoop
.9940	e6 37		inc $37				inc 	zTemp0+1
.9942	80 b3		bra $98f7			bra 	_TSTLoop
.9944					_TSTFail:
.9944	18		clc				clc
.9945	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/tokenise.asm


;******  Processing file: ./common/tokeniser/../generated/kwdtext.dat

.9946					KeywordSet0:
>9946	00 65					.text	0,$65,""               ; $80 !0:EOF
>9948	00 58					.text	0,$58,""               ; $81 !1:SH1
>994a	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>994c	04 fe 41 42 53 28			.text	4,$fe,"ABS("           ; $83 ABS(
>9952	06 93 41 4c 4c 4f 43 28			.text	6,$93,"ALLOC("         ; $84 ALLOC(
>995a	04 ff 41 53 43 28			.text	4,$ff,"ASC("           ; $85 ASC(
>9960	05 29 43 48 52 24 28			.text	5,$29,"CHR$("          ; $86 CHR$(
>9967	05 6b 46 41 4c 53 45			.text	5,$6b,"FALSE"          ; $87 FALSE
>996e	05 44 46 52 41 43 28			.text	5,$44,"FRAC("          ; $88 FRAC(
>9975	04 13 49 4e 54 28			.text	4,$13,"INT("           ; $89 INT(
>997b	06 a7 49 53 56 41 4c 28			.text	6,$a7,"ISVAL("         ; $8a ISVAL(
>9983	06 77 4c 45 46 54 24 28			.text	6,$77,"LEFT$("         ; $8b LEFT$(
>998b	04 07 4c 45 4e 28			.text	4,$07,"LEN("           ; $8c LEN(
>9991	05 26 4d 49 44 24 28			.text	5,$26,"MID$("          ; $8d MID$(
>9998	04 19 4e 4f 54 28			.text	4,$19,"NOT("           ; $8e NOT(
>999e	07 ca 52 49 47 48 54 24			.text	7,$ca,"RIGHT$("        ; $8f RIGHT$(
>99a6	28
>99a7	04 0c 52 4e 44 28			.text	4,$0c,"RND("           ; $90 RND(
>99ad	04 10 53 47 4e 28			.text	4,$10,"SGN("           ; $91 SGN(
>99b3	04 0e 53 50 43 28			.text	4,$0e,"SPC("           ; $92 SPC(
>99b9	05 45 53 54 52 24 28			.text	5,$45,"STR$("          ; $93 STR$(
>99c0	04 40 54 52 55 45			.text	4,$40,"TRUE"           ; $94 TRUE
>99c6	04 0b 56 41 4c 28			.text	4,$0b,"VAL("           ; $95 VAL(
>99cc	03 e7 46 4f 52				.text	3,$e7,"FOR"            ; $96 FOR
>99d1	02 8f 49 46				.text	2,$8f,"IF"             ; $97 IF
>99d5	04 34 50 52 4f 43			.text	4,$34,"PROC"           ; $98 PROC
>99db	06 c1 52 45 50 45 41 54			.text	6,$c1,"REPEAT"         ; $99 REPEAT
>99e3	05 79 57 48 49 4c 45			.text	5,$79,"WHILE"          ; $9a WHILE
>99ea	05 66 45 4e 44 49 46			.text	5,$66,"ENDIF"          ; $9b ENDIF
>99f1	07 0b 45 4e 44 50 52 4f			.text	7,$0b,"ENDPROC"        ; $9c ENDPROC
>99f9	43
>99fa	04 3f 4e 45 58 54			.text	4,$3f,"NEXT"           ; $9d NEXT
>9a00	04 2f 54 48 45 4e			.text	4,$2f,"THEN"           ; $9e THEN
>9a06	05 8c 55 4e 54 49 4c			.text	5,$8c,"UNTIL"          ; $9f UNTIL
>9a0d	04 2e 57 45 4e 44			.text	4,$2e,"WEND"           ; $a0 WEND
>9a13	04 1c 43 41 4c 4c			.text	4,$1c,"CALL"           ; $a1 CALL
>9a19	03 e2 43 4c 53				.text	3,$e2,"CLS"            ; $a2 CLS
>9a1e	04 1a 44 41 54 41			.text	4,$1a,"DATA"           ; $a3 DATA
>9a24	03 da 44 49 4d				.text	3,$da,"DIM"            ; $a4 DIM
>9a29	06 db 44 4f 57 4e 54 4f			.text	6,$db,"DOWNTO"         ; $a5 DOWNTO
>9a31	04 29 45 4c 53 45			.text	4,$29,"ELSE"           ; $a6 ELSE
>9a37	05 80 47 4f 53 55 42			.text	5,$80,"GOSUB"          ; $a7 GOSUB
>9a3e	04 39 47 4f 54 4f			.text	4,$39,"GOTO"           ; $a8 GOTO
>9a44	03 e5 4c 45 54				.text	3,$e5,"LET"            ; $a9 LET
>9a49	05 6b 4c 4f 43 41 4c			.text	5,$6b,"LOCAL"          ; $aa LOCAL
>9a50	05 8d 50 52 49 4e 54			.text	5,$8d,"PRINT"          ; $ab PRINT
>9a57	04 1c 52 45 41 44			.text	4,$1c,"READ"           ; $ac READ
>9a5d	03 e4 52 45 4d				.text	3,$e4,"REM"            ; $ad REM
>9a62	06 e0 52 45 54 55 52 4e			.text	6,$e0,"RETURN"         ; $ae RETURN
>9a6a	02 a3 54 4f				.text	2,$a3,"TO"             ; $af TO
>9a6e	ff					.text	$FF
.9a6f					KeywordSet1:
>9a6f	00 65					.text	0,$65,""               ; $80 !0:EOF
>9a71	00 58					.text	0,$58,""               ; $81 !1:SH1
>9a73	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>9a75	08 4c 41 53 53 45 4d 42			.text	8,$4c,"ASSEMBLE"       ; $83 ASSEMBLE
>9a7d	4c 45
>9a7f	06 d2 41 53 53 45 52 54			.text	6,$d2,"ASSERT"         ; $84 ASSERT
>9a87	05 67 43 4c 45 41 52			.text	5,$67,"CLEAR"          ; $85 CLEAR
>9a8e	03 d7 45 4e 44				.text	3,$d7,"END"            ; $86 END
>9a93	04 3c 4c 49 53 54			.text	4,$3c,"LIST"           ; $87 LIST
>9a99	03 ea 4e 45 57				.text	3,$ea,"NEW"            ; $88 NEW
>9a9e	07 24 52 45 53 54 4f 52			.text	7,$24,"RESTORE"        ; $89 RESTORE
>9aa6	45
>9aa7	03 f5 52 55 4e				.text	3,$f5,"RUN"            ; $8a RUN
>9aac	04 46 53 54 4f 50			.text	4,$46,"STOP"           ; $8b STOP
>9ab2	ff					.text	$FF
.9ab3					KeywordSet2:
>9ab3	00 65					.text	0,$65,""               ; $80 !0:EOF
>9ab5	00 58					.text	0,$58,""               ; $81 !1:SH1
>9ab7	00 5a					.text	0,$5a,""               ; $82 !2:SH2
>9ab9	03 c8 41 44 43				.text	3,$c8,"ADC"            ; $83 ADC
>9abe	03 d3 41 4e 44				.text	3,$d3,"AND"            ; $84 AND
>9ac3	03 e0 41 53 4c				.text	3,$e0,"ASL"            ; $85 ASL
>9ac8	03 c8 42 43 43				.text	3,$c8,"BCC"            ; $86 BCC
>9acd	03 d8 42 43 53				.text	3,$d8,"BCS"            ; $87 BCS
>9ad2	03 d8 42 45 51				.text	3,$d8,"BEQ"            ; $88 BEQ
>9ad7	03 df 42 49 54				.text	3,$df,"BIT"            ; $89 BIT
>9adc	03 d8 42 4d 49				.text	3,$d8,"BMI"            ; $8a BMI
>9ae1	03 d5 42 4e 45				.text	3,$d5,"BNE"            ; $8b BNE
>9ae6	03 de 42 50 4c				.text	3,$de,"BPL"            ; $8c BPL
>9aeb	03 d5 42 52 41				.text	3,$d5,"BRA"            ; $8d BRA
>9af0	03 df 42 52 4b				.text	3,$df,"BRK"            ; $8e BRK
>9af5	03 db 42 56 43				.text	3,$db,"BVC"            ; $8f BVC
>9afa	03 eb 42 56 53				.text	3,$eb,"BVS"            ; $90 BVS
>9aff	03 d2 43 4c 43				.text	3,$d2,"CLC"            ; $91 CLC
>9b04	03 d3 43 4c 44				.text	3,$d3,"CLD"            ; $92 CLD
>9b09	03 d8 43 4c 49				.text	3,$d8,"CLI"            ; $93 CLI
>9b0e	03 e5 43 4c 56				.text	3,$e5,"CLV"            ; $94 CLV
>9b13	03 e0 43 4d 50				.text	3,$e0,"CMP"            ; $95 CMP
>9b18	03 eb 43 50 58				.text	3,$eb,"CPX"            ; $96 CPX
>9b1d	03 ec 43 50 59				.text	3,$ec,"CPY"            ; $97 CPY
>9b22	03 cc 44 45 43				.text	3,$cc,"DEC"            ; $98 DEC
>9b27	03 e1 44 45 58				.text	3,$e1,"DEX"            ; $99 DEX
>9b2c	03 e2 44 45 59				.text	3,$e2,"DEY"            ; $9a DEY
>9b31	03 e6 45 4f 52				.text	3,$e6,"EOR"            ; $9b EOR
>9b36	03 da 49 4e 43				.text	3,$da,"INC"            ; $9c INC
>9b3b	03 ef 49 4e 58				.text	3,$ef,"INX"            ; $9d INX
>9b40	03 f0 49 4e 59				.text	3,$f0,"INY"            ; $9e INY
>9b45	03 e7 4a 4d 50				.text	3,$e7,"JMP"            ; $9f JMP
>9b4a	03 ef 4a 53 52				.text	3,$ef,"JSR"            ; $a0 JSR
>9b4f	03 d1 4c 44 41				.text	3,$d1,"LDA"            ; $a1 LDA
>9b54	03 e8 4c 44 58				.text	3,$e8,"LDX"            ; $a2 LDX
>9b59	03 e9 4c 44 59				.text	3,$e9,"LDY"            ; $a3 LDY
>9b5e	03 f1 4c 53 52				.text	3,$f1,"LSR"            ; $a4 LSR
>9b63	03 ed 4e 4f 50				.text	3,$ed,"NOP"            ; $a5 NOP
>9b68	03 e2 4f 52 41				.text	3,$e2,"ORA"            ; $a6 ORA
>9b6d	03 d9 50 48 41				.text	3,$d9,"PHA"            ; $a7 PHA
>9b72	03 e8 50 48 50				.text	3,$e8,"PHP"            ; $a8 PHP
>9b77	03 f0 50 48 58				.text	3,$f0,"PHX"            ; $a9 PHX
>9b7c	03 f1 50 48 59				.text	3,$f1,"PHY"            ; $aa PHY
>9b81	03 dd 50 4c 41				.text	3,$dd,"PLA"            ; $ab PLA
>9b86	03 ec 50 4c 50				.text	3,$ec,"PLP"            ; $ac PLP
>9b8b	03 f4 50 4c 58				.text	3,$f4,"PLX"            ; $ad PLX
>9b90	03 f5 50 4c 59				.text	3,$f5,"PLY"            ; $ae PLY
>9b95	03 ed 52 4f 4c				.text	3,$ed,"ROL"            ; $af ROL
>9b9a	03 f3 52 4f 52				.text	3,$f3,"ROR"            ; $b0 ROR
>9b9f	03 ef 52 54 49				.text	3,$ef,"RTI"            ; $b1 RTI
>9ba4	03 f9 52 54 53				.text	3,$f9,"RTS"            ; $b2 RTS
>9ba9	03 d8 53 42 43				.text	3,$d8,"SBC"            ; $b3 SBC
>9bae	03 db 53 45 43				.text	3,$db,"SEC"            ; $b4 SEC
>9bb3	03 dc 53 45 44				.text	3,$dc,"SED"            ; $b5 SED
>9bb8	03 e1 53 45 49				.text	3,$e1,"SEI"            ; $b6 SEI
>9bbd	03 e8 53 54 41				.text	3,$e8,"STA"            ; $b7 STA
>9bc2	03 ff 53 54 58				.text	3,$ff,"STX"            ; $b8 STX
>9bc7	03 00 53 54 59				.text	3,$00,"STY"            ; $b9 STY
>9bcc	03 01 53 54 5a				.text	3,$01,"STZ"            ; $ba STZ
>9bd1	03 ed 54 41 58				.text	3,$ed,"TAX"            ; $bb TAX
>9bd6	03 ee 54 41 59				.text	3,$ee,"TAY"            ; $bc TAY
>9bdb	03 e8 54 52 42				.text	3,$e8,"TRB"            ; $bd TRB
>9be0	03 e9 54 53 42				.text	3,$e9,"TSB"            ; $be TSB
>9be5	03 ff 54 53 58				.text	3,$ff,"TSX"            ; $bf TSX
>9bea	03 ed 54 58 41				.text	3,$ed,"TXA"            ; $c0 TXA
>9bef	03 ff 54 58 53				.text	3,$ff,"TXS"            ; $c1 TXS
>9bf4	03 ee 54 59 41				.text	3,$ee,"TYA"            ; $c2 TYA
>9bf9	ff					.text	$FF

;******  Return to file: ./common/tokeniser/tokenise.asm

.9bfa					TokeniseLine:
.9bfa	20 82 9d	jsr $9d82			jsr 	FixLineBufferCase 			; fix line case
.9bfd	a9 03		lda #$03			lda 	#3 							; reset the token buffer to empty
.9bff	8d 25 07	sta $0725			sta 	tokenOffset
.9c02	9c 26 07	stz $0726			stz 	tokenLineNumber
.9c05	9c 27 07	stz $0727			stz 	tokenLineNumber+1
.9c08	a2 ff		ldx #$ff			ldx 	#$FF
.9c0a					_TKFindFirst:
.9c0a	e8		inx				inx
.9c0b	bd 25 08	lda $0825,x			lda 	lineBuffer,x
.9c0e	f0 79		beq $9c89			beq 	_TKExit
.9c10	c9 20		cmp #$20			cmp 	#' '
.9c12	90 f6		bcc $9c0a			bcc 	_TKFindFirst
.9c14	c9 30		cmp #$30			cmp 	#'0'
.9c16	90 07		bcc $9c1f			bcc 	_TKNoLineNumber
.9c18	c9 3a		cmp #$3a			cmp 	#'9'+1
.9c1a	b0 03		bcs $9c1f			bcs 	_TKNoLineNumber
.9c1c	20 ac 9d	jsr $9dac			jsr 	TokeniseExtractLineNumber
.9c1f					_TKNoLineNumber:
.9c1f					_TKTokeniseLoop:
.9c1f	bd 25 08	lda $0825,x			lda 	lineBuffer,x 				; next character, exit if zero EOL.
.9c22	f0 65		beq $9c89			beq 	_TKExit
.9c24	e8		inx				inx
.9c25	c9 20		cmp #$20			cmp 	#' '
.9c27	f0 f6		beq $9c1f			beq 	_TKTokeniseLoop 			; keep looping if space found.
.9c29	ca		dex				dex 								; undo last get, A contains character, X is position.
.9c2a	c9 5f		cmp #$5f			cmp 	#'_'						; _ A-Z is identifier *or* token
.9c2c	f0 61		beq $9c8f			beq 	_TKTokeniseIdentifier
.9c2e	c9 41		cmp #$41			cmp 	#'A'
.9c30	90 04		bcc $9c36			bcc 	_TKTokenisePunctuation
.9c32	c9 5b		cmp #$5b			cmp 	#'Z'+1
.9c34	90 59		bcc $9c8f			bcc 	_TKTokeniseIdentifier
.9c36					_TKTokenisePunctuation:
.9c36	c9 22		cmp #$22			cmp 	#'"'						; quoted string ?
.9c38	f0 27		beq $9c61			beq 	_TKString
.9c3a	c9 24		cmp #$24			cmp 	#'$'						; hexadecimal constant (# only appears at end of identifiers)
.9c3c	f0 28		beq $9c66			beq 	_TKHexConstant
.9c3e	c9 3c		cmp #$3c			cmp 	#'<' 						; check for < > handlers.
.9c40	f0 29		beq $9c6b			beq 	_TKCheckDouble
.9c42	c9 3e		cmp #$3e			cmp 	#'>'
.9c44	f0 25		beq $9c6b			beq 	_TKCheckDouble
.9c46					_TKStandardPunctuation:
.9c46	bd 25 08	lda $0825,x			lda 	lineBuffer,x 				; get it back.
.9c49	c9 40		cmp #$40			cmp 	#64 						; are we >= 64
.9c4b	90 0e		bcc $9c5b			bcc 	_TKNoShift
.9c4d	48		pha				pha 								; save
.9c4e	29 07		and #$07			and 	#7 							; lower 3 bits in zTemp0
.9c50	85 36		sta $36				sta 	zTemp0
.9c52	68		pla				pla
.9c53	29 20		and #$20			and 	#32 						; bit 5
.9c55	4a		lsr a				lsr 	a 							; shift into bit 3
.9c56	4a		lsr a				lsr 	a
.9c57	05 36		ora $36				ora 	zTemp0
.9c59	09 10		ora #$10			ora 	#$10						; now in the range 16-31
.9c5b					_TKNoShift:
.9c5b	20 f1 9d	jsr $9df1			jsr 	TokeniseWriteByte 			; write the punctuation character
.9c5e	e8		inx				inx 								; consume the character
.9c5f	80 be		bra $9c1f			bra 	_TKTokeniseLoop 			; and loop round again.
.9c61					_TKString:
.9c61	20 11 9d	jsr $9d11			jsr 	TokeniseString
.9c64	80 b9		bra $9c1f			bra 	_TKTokeniseLoop
.9c66					_TKHexConstant:
.9c66	20 4c 9d	jsr $9d4c			jsr 	TokeniseHexConstant
.9c69	80 b4		bra $9c1f			bra 	_TKTokeniseLoop
.9c6b					_TKCheckDouble:
.9c6b	bd 26 08	lda $0826,x			lda 	lineBuffer+1,x 				; get next character
.9c6e	c9 3c		cmp #$3c			cmp 	#'<'						; if not < = > which are ASCII consecutive go back
.9c70	90 d4		bcc $9c46			bcc 	_TKStandardPunctuation
.9c72	c9 3f		cmp #$3f			cmp 	#'>'+1
.9c74	b0 d0		bcs $9c46			bcs 	_TKStandardPunctuation
.9c76	bd 25 08	lda $0825,x			lda 	lineBuffer,x 				; this is < (60) or > (62)
.9c79	29 02		and #$02			and 	#2 							; now < (0) or > (2)
.9c7b	0a		asl a				asl 	a 							; now < (0) or > (4), CC also
.9c7c	7d 26 08	adc $0826,x			adc 	lineBuffer+1,x 				; add < = > codes - < code
.9c7f	38		sec				sec
.9c80	e9 3c		sbc #$3c			sbc 	#'<'
.9c82	20 f1 9d	jsr $9df1			jsr 	TokeniseWriteByte 			; this is in the range 0-7
.9c85	e8		inx				inx 								; consume both
.9c86	e8		inx				inx
.9c87	80 96		bra $9c1f			bra 	_TKTokeniseLoop
.9c89	a9 80		lda #$80	_TKExit:lda 	#KWC_EOL 					; write end of line byte
.9c8b	20 f1 9d	jsr $9df1			jsr 	TokeniseWriteByte
.9c8e	60		rts				rts
.9c8f					_TKTokeniseIdentifier:
.9c8f	8e 00 07	stx $0700			stx 	identStart 					; save start
.9c92	9c 04 07	stz $0704			stz 	identTypeByte 				; zero the type byte
.9c95					_TKCheckLoop:
.9c95	e8		inx				inx 								; look at next, we know first is identifier.
.9c96	bd 25 08	lda $0825,x			lda  	lineBuffer,x
.9c99	c9 5f		cmp #$5f			cmp 	#"_" 						; legal char _ 0-9 A-Z
.9c9b	f0 f8		beq $9c95			beq 	_TKCheckLoop
.9c9d	c9 30		cmp #$30			cmp	 	#"0"
.9c9f	90 0c		bcc $9cad			bcc 	_TKEndIdentifier
.9ca1	c9 3a		cmp #$3a			cmp 	#"9"+1
.9ca3	90 f0		bcc $9c95			bcc 	_TKCheckLoop
.9ca5	c9 41		cmp #$41			cmp	 	#"A"
.9ca7	90 04		bcc $9cad			bcc 	_TKEndIdentifier
.9ca9	c9 5b		cmp #$5b			cmp 	#"Z"+1
.9cab	90 e8		bcc $9c95			bcc 	_TKCheckLoop
.9cad					_TKEndIdentifier:
.9cad	8e 01 07	stx $0701			stx 	identTypeStart 				; save start of type text (if any !)
.9cb0	a0 08		ldy #$08			ldy 	#$08 						; this is the identifier type byte for #
.9cb2	c9 23		cmp #$23			cmp 	#"#"						; followed by #
.9cb4	f0 06		beq $9cbc			beq 	_TKHasTypeCharacter
.9cb6	a0 10		ldy #$10			ldy 	#$10 						; this is the identifier type byte for $
.9cb8	c9 24		cmp #$24			cmp 	#"$"						; followed by $ or #
.9cba	d0 07		bne $9cc3			bne 	_TKNoTypeCharacter
.9cbc					_TKHasTypeCharacter:
.9cbc	8c 04 07	sty $0704			sty 	identTypeByte 				; has # or $, save the type
.9cbf	e8		inx				inx 								; read next
.9cc0	bd 25 08	lda $0825,x			lda 	lineBuffer,x
.9cc3					_TKNoTypeCharacter:
.9cc3	c9 28		cmp #$28			cmp 	#"("						; is it open parenthesis (e.g. array)
.9cc5	d0 09		bne $9cd0			bne 	_TKNoArray
.9cc7	e8		inx				inx 								; skip the (
.9cc8	ad 04 07	lda $0704			lda 	identTypeByte 				; set bit 2 (e.g. array)
.9ccb	09 04		ora #$04			ora 	#$04
.9ccd	8d 04 07	sta $0704			sta 	identTypeByte
.9cd0					_TKNoArray:
.9cd0	8e 02 07	stx $0702			stx 	identTypeEnd 				; save end marker, e.g. continue from here.
.9cd3	20 6d 9d	jsr $9d6d			jsr 	TokeniseCalculateHash 		; calculate the has for those tokens
.9cd6	a0 99		ldy #$99			ldy 	#(KeywordSet0) >> 8
.9cd8	a9 46		lda #$46			lda 	#(KeywordSet0) & $FF
.9cda	20 ed 98	jsr $98ed			jsr 	TokeniseSearchTable
.9cdd	a2 00		ldx #$00			ldx 	#0
.9cdf	b0 1f		bcs $9d00			bcs 	_TKFoundToken
.9ce1	a0 9a		ldy #$9a			ldy 	#(KeywordSet1) >> 8
.9ce3	a9 6f		lda #$6f			lda 	#(KeywordSet1) & $FF
.9ce5	20 ed 98	jsr $98ed			jsr 	TokeniseSearchTable
.9ce8	a2 81		ldx #$81			ldx 	#$81
.9cea	b0 14		bcs $9d00			bcs 	_TKFoundToken
.9cec	a0 9a		ldy #$9a			ldy 	#(KeywordSet2) >> 8
.9cee	a9 b3		lda #$b3			lda 	#(KeywordSet2) & $FF
.9cf0	20 ed 98	jsr $98ed			jsr 	TokeniseSearchTable
.9cf3	a2 82		ldx #$82			ldx 	#$82
.9cf5	b0 09		bcs $9d00			bcs 	_TKFoundToken
.9cf7	20 fd 9d	jsr $9dfd			jsr 	CheckCreateVariableRecord 	; failed all, it's a variable, create record if does not exist.
.9cfa	ae 02 07	ldx $0702			ldx 	identTypeEnd 				; X points to following byte
.9cfd	4c 1f 9c	jmp $9c1f			jmp 	_TKTokeniseLoop 			; and go round again.
.9d00					_TKFoundToken:
.9d00	48		pha				pha 								; save token
.9d01	8a		txa				txa 								; shift in X, is there one ?
.9d02	f0 03		beq $9d07			beq 	_TKNoTShift
.9d04	20 f1 9d	jsr $9df1			jsr 	TokeniseWriteByte 			; if so, write it out
.9d07					_TKNoTShift:
.9d07	68		pla				pla 								; restore and write token
.9d08	20 f1 9d	jsr $9df1			jsr 	TokeniseWriteByte
.9d0b	ae 02 07	ldx $0702			ldx 	identTypeEnd 				; X points to following byte
.9d0e	4c 1f 9c	jmp $9c1f			jmp 	_TKTokeniseLoop 			; and go round again.
.9d11					TokeniseString:
.9d11	a9 ff		lda #$ff			lda 	#KWC_STRING 				; string token.
.9d13	20 f1 9d	jsr $9df1			jsr 	TokeniseWriteByte
.9d16	e8		inx				inx									; start of quoted string.
.9d17	da		phx				phx 								; push start of string on top
.9d18	ca		dex				dex
.9d19					_TSFindEnd:
.9d19	e8		inx				inx
.9d1a	bd 25 08	lda $0825,x			lda 	lineBuffer,x 				; next character
.9d1d	f0 04		beq $9d23			beq 	_TSEndOfString
.9d1f	c9 22		cmp #$22			cmp 	#'"'
.9d21	d0 f6		bne $9d19			bne 	_TSFindEnd
.9d23					_TSEndOfString:
.9d23	7a		ply				ply  								; so now Y is first character, X is character after end.
.9d24	48		pha				pha 								; save terminating character
.9d25	20 2d 9d	jsr $9d2d			jsr 	TOWriteBlockXY 				; write X to Y as a data block
.9d28	68		pla				pla 								; terminating character
.9d29	f0 01		beq $9d2c			beq 	_TSNotQuote					; if it wasn't EOS skip it
.9d2b	e8		inx				inx
.9d2c					_TSNotQuote:
.9d2c	60		rts				rts
.9d2d					TOWriteBlockXY:
.9d2d	86 36		stx $36				stx 	zTemp0 						; write end character
.9d2f	98		tya				tya
.9d30	49 ff		eor #$ff			eor 	#$FF
.9d32	38		sec				sec
.9d33	65 36		adc $36				adc 	zTemp0
.9d35	1a		inc a				inc 	a 							; one extra for NULL
.9d36	20 f1 9d	jsr $9df1			jsr 	TokeniseWriteByte
.9d39					_TOBlockLoop:
.9d39	c4 36		cpy $36				cpy 	zTemp0
.9d3b	f0 09		beq $9d46			beq 	_TOBlockExit
.9d3d	b9 25 08	lda $0825,y			lda 	lineBuffer,y
.9d40	20 f1 9d	jsr $9df1			jsr 	TokeniseWriteByte
.9d43	c8		iny				iny
.9d44	80 f3		bra $9d39			bra 	_TOBlockLoop
.9d46					_TOBlockExit:
.9d46	a9 00		lda #$00			lda 	#0
.9d48	20 f1 9d	jsr $9df1			jsr 	TokeniseWriteByte
.9d4b	60		rts				rts
.9d4c					TokeniseHexConstant:
.9d4c	a9 fe		lda #$fe			lda 	#KWC_HEXCONST 				; hex constant token.
.9d4e	20 f1 9d	jsr $9df1			jsr 	TokeniseWriteByte
.9d51	e8		inx				inx									; start of quoted string.
.9d52	da		phx				phx 								; push start of constant on top
.9d53	ca		dex				dex
.9d54					_THFindLoop:
.9d54	e8		inx				inx
.9d55	bd 25 08	lda $0825,x			lda 	lineBuffer,x
.9d58	c9 30		cmp #$30			cmp 	#"0"
.9d5a	90 0c		bcc $9d68			bcc 	_THFoundEnd
.9d5c	c9 3a		cmp #$3a			cmp 	#"9"+1
.9d5e	90 f4		bcc $9d54			bcc 	_THFindLoop
.9d60	c9 41		cmp #$41			cmp 	#"A"
.9d62	90 04		bcc $9d68			bcc 	_THFoundEnd
.9d64	c9 47		cmp #$47			cmp 	#"F"+1
.9d66	90 ec		bcc $9d54			bcc 	_THFindLoop
.9d68					_THFoundEnd:
.9d68	7a		ply				ply 								; restore start
.9d69	20 2d 9d	jsr $9d2d			jsr 	TOWriteBlockXY 				; output the block
.9d6c	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/utility.asm

.9d6d					TokeniseCalculateHash:
.9d6d	da		phx				phx
.9d6e	ae 00 07	ldx $0700			ldx 	identStart 					; needs to be same as in tokens.py - simple sum
.9d71	a9 00		lda #$00			lda 	#0
.9d73					_TCHLoop:
.9d73	18		clc				clc
.9d74	7d 25 08	adc $0825,x			adc 	lineBuffer,x
.9d77	e8		inx				inx
.9d78	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; do the whole thing including type and array markers.
.9d7b	d0 f6		bne $9d73			bne 	_TCHLoop
.9d7d	8d 03 07	sta $0703			sta 	identHash 					; save the hash
.9d80	fa		plx				plx
.9d81	60		rts				rts
.9d82					FixLineBufferCase:
.9d82	a2 00		ldx #$00			ldx 	#0
.9d84					_FLBCLoop:
.9d84	bd 25 08	lda $0825,x			lda 	lineBuffer,x 				; get next character
.9d87	f0 22		beq $9dab			beq 	_FLBCExit 					; end of string.
.9d89	c9 22		cmp #$22			cmp 	#'"'						; quote, go to in quotes
.9d8b	f0 11		beq $9d9e			beq 	_FLBCInQuotes
.9d8d	e8		inx				inx
.9d8e	c9 61		cmp #$61			cmp 	#'a'						; needs capitalising ?
.9d90	90 f2		bcc $9d84			bcc 	_FLBCLoop
.9d92	c9 7b		cmp #$7b			cmp 	#'z'+1
.9d94	b0 ee		bcs $9d84			bcs 	_FLBCLoop
.9d96	38		sec				sec 								; make U/C
.9d97	e9 20		sbc #$20			sbc 	#32
.9d99	9d 24 08	sta $0824,x			sta	 	lineBuffer-1,x 				; write back
.9d9c	80 e6		bra $9d84			bra 	_FLBCLoop
.9d9e					_FLBCInQuotes:
.9d9e	e8		inx				inx 								; advance
.9d9f	bd 25 08	lda $0825,x			lda 	lineBuffer,x 				; get next
.9da2	f0 07		beq $9dab			beq 	_FLBCExit 					; exit on EOS
.9da4	c9 22		cmp #$22			cmp 	#'"' 				 		; until " found
.9da6	d0 f6		bne $9d9e			bne 	_FLBCInQuotes
.9da8	e8		inx				inx 								; skip over it
.9da9	80 d9		bra $9d84			bra 	_FLBCLoop
.9dab					_FLBCExit:
.9dab	60		rts				rts
.9dac					TokeniseExtractLineNumber:
.9dac	ad 27 07	lda $0727			lda 	tokenLineNumber+1 			; push current value on stack
.9daf	48		pha				pha
.9db0	ad 26 07	lda $0726			lda 	tokenLineNumber
.9db3	48		pha				pha
.9db4	20 ea 9d	jsr $9dea			jsr 	_TELNTimes2 				; line # x 4
.9db7	20 ea 9d	jsr $9dea			jsr 	_TELNTimes2 				; line # x 2
.9dba	18		clc				clc 								; add stacked value
.9dbb	68		pla				pla
.9dbc	6d 26 07	adc $0726			adc 	tokenLineNumber
.9dbf	8d 26 07	sta $0726			sta 	tokenLineNumber
.9dc2	68		pla				pla
.9dc3	6d 27 07	adc $0727			adc 	tokenLineNumber+1
.9dc6	8d 27 07	sta $0727			sta 	tokenLineNumber+1 			; line # x 5
.9dc9	20 ea 9d	jsr $9dea			jsr 	_TELNTimes2 				; line # x 10
.9dcc	bd 25 08	lda $0825,x			lda 	lineBuffer,x 				; get and consume character
.9dcf	e8		inx				inx
.9dd0	29 0f		and #$0f			and 	#15 						; add to line #
.9dd2	18		clc				clc
.9dd3	6d 26 07	adc $0726			adc 	tokenLineNumber
.9dd6	8d 26 07	sta $0726			sta 	tokenLineNumber
.9dd9	90 03		bcc $9dde			bcc 	_TLENNoCarry
.9ddb	ee 27 07	inc $0727			inc 	tokenLineNumber+1
.9dde					_TLENNoCarry:
.9dde	bd 25 08	lda $0825,x			lda 	lineBuffer,x 				; more digits ?
.9de1	c9 30		cmp #$30			cmp 	#'0'
.9de3	90 04		bcc $9de9			bcc 	_TLENExit
.9de5	c9 3a		cmp #$3a			cmp 	#'9'+1
.9de7	90 c3		bcc $9dac			bcc 	TokeniseExtractLineNumber
.9de9					_TLENExit:
.9de9	60		rts				rts
.9dea					_TELNTimes2:
.9dea	0e 26 07	asl $0726			asl 	tokenLineNumber
.9ded	2e 27 07	rol $0727			rol 	tokenLineNumber+1
.9df0	60		rts				rts
.9df1					TokeniseWriteByte:
.9df1	da		phx				phx
.9df2	ae 25 07	ldx $0725			ldx 	tokenOffset 				; next slot to write to
.9df5	9d 25 07	sta $0725,x			sta 	tokenOffset,x 				; write byte out
.9df8	ee 25 07	inc $0725			inc 	tokenOffset 				; advance slot.
.9dfb	fa		plx				plx
.9dfc	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./common/tokeniser/variablerecord.asm

.9dfd					CheckCreateVariableRecord:
.9dfd	a9 00		lda #$00			lda 	#((VariableSpace) & $FF)
.9dff	85 36		sta $36				sta 	0+zTemp0
.9e01	a9 10		lda #$10			lda 	#((VariableSpace) >> 8)
.9e03	85 37		sta $37				sta 	1+zTemp0
.9e05					_CCVSearch:
.9e05	b2 36		lda ($36)			lda 	(zTemp0) 					; end of list
.9e07	f0 2c		beq $9e35			beq 	_CCVFail
.9e09	a0 01		ldy #$01			ldy 	#1 							; read the hash
.9e0b	b1 36		lda ($36),y			lda 	(zTemp0),y 					; does it match ?
.9e0d	cd 03 07	cmp $0703			cmp 	identHash
.9e10	d0 16		bne $9e28			bne 	_CCVNext
.9e12	a0 08		ldy #$08			ldy 	#8 							; name in variable record
.9e14	ae 00 07	ldx $0700			ldx 	identStart
.9e17					_CCVCompare:
.9e17	bd 25 08	lda $0825,x			lda 	lineBuffer,x 				; xor them. zero if the same, except
.9e1a	51 36		eor ($36),y			eor 	(zTemp0),y 					; bit 7 is used for EOS.
.9e1c	e8		inx				inx 								; advance pointers
.9e1d	c8		iny				iny
.9e1e	0a		asl a				asl 	a 							; A = 0 if they match, CS if end.
.9e1f	d0 07		bne $9e28			bne 	_CCVNext  					; didn't match go to next.
.9e21	90 f4		bcc $9e17			bcc 	_CCVCompare 				; not finished yet.
.9e23	ec 02 07	cpx $0702			cpx 	identTypeEnd 				; matched whole thing ?
.9e26	f0 41		beq $9e69			beq 	_CCVFound 					; yes, we were successful
.9e28					_CCVNext:
.9e28	18		clc				clc
.9e29	b2 36		lda ($36)			lda 	(zTemp0) 					; add offset to pointer
.9e2b	65 36		adc $36				adc 	zTemp0
.9e2d	85 36		sta $36				sta 	zTemp0
.9e2f	90 d4		bcc $9e05			bcc 	_CCVSearch
.9e31	e6 37		inc $37				inc 	zTemp0+1
.9e33	80 d0		bra $9e05			bra 	_CCVSearch
.9e35					_CCVFail:
.9e35	a0 01		ldy #$01			ldy 	#1 							; create the new record. Offset 1 is hash
.9e37	ad 03 07	lda $0703			lda 	identHash
.9e3a	91 36		sta ($36),y			sta 	(zTemp0),y
.9e3c	c8		iny				iny 								; offset 2 is the type byte
.9e3d	ad 04 07	lda $0704			lda 	identTypeByte
.9e40	91 36		sta ($36),y			sta 	(zTemp0),y
.9e42	c8		iny				iny
.9e43					_CCVData:
.9e43	a9 00		lda #$00			lda 	#0 							; erase data 3-7
.9e45	91 36		sta ($36),y			sta 	(zTemp0),y
.9e47	c8		iny				iny
.9e48	c0 08		cpy #$08			cpy 	#8
.9e4a	90 f7		bcc $9e43			bcc 	_CCVData
.9e4c	ae 00 07	ldx $0700			ldx 	identStart 					; copy name into 8 on.
.9e4f					_CCVCopyName:
.9e4f	bd 25 08	lda $0825,x			lda 	lineBuffer,x
.9e52	91 36		sta ($36),y			sta 	(zTemp0),y
.9e54	e8		inx				inx
.9e55	c8		iny				iny
.9e56	ec 02 07	cpx $0702			cpx 	identTypeEnd
.9e59	d0 f4		bne $9e4f			bne 	_CCVCopyName
.9e5b	98		tya				tya 								; patch offset
.9e5c	92 36		sta ($36)			sta 	(zTemp0)
.9e5e	a9 00		lda #$00			lda 	#0 							; offset for next is zero.
.9e60	91 36		sta ($36),y			sta 	(zTemp0),y
.9e62	88		dey				dey
.9e63	b1 36		lda ($36),y			lda 	(zTemp0),y 					; set bit 7 of last bit
.9e65	09 80		ora #$80			ora 	#$80
.9e67	91 36		sta ($36),y			sta 	(zTemp0),y
.9e69					_CCVFound:
.9e69	a5 37		lda $37				lda 	zTemp0+1 					; write out MSB
.9e6b	38		sec				sec
.9e6c	e9 10		sbc #$10			sbc 	#(VariableSpace >> 8) 		; offset from the start
.9e6e	09 40		ora #$40			ora 	#$40 						; make it a writeable token
.9e70	20 f1 9d	jsr $9df1			jsr 	TokeniseWriteByte
.9e73	a5 36		lda $36				lda 	zTemp0 						; write out LSB
.9e75	20 f1 9d	jsr $9df1			jsr 	TokeniseWriteByte
.9e78	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./variants/hardware/junior/extern.asm

.a77b					EXTPrintCharacter:
.a77b	48		pha				pha
.a77c	da		phx				phx
.a77d	5a		phy				phy
.a77e	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.a781	7a		ply				ply
.a782	fa		plx				plx
.a783	68		pla				pla
.a784	60		rts				rts
.a785					EXTInputSingleCharacter:
.a785	da		phx				phx
.a786	5a		phy				phy
.a787					_EISCWait:
.a787	20 e4 ff	jsr $ffe4			jsr 	$FFE4
.a78a	c9 00		cmp #$00			cmp 	#0
.a78c	f0 f9		beq $a787			beq 	_EISCWait
.a78e	7a		ply				ply
.a78f	fa		plx				plx
.a790	60		rts				rts
.a791					EXTInputLine:
.a791	a2 00		ldx #$00			ldx 	#0 							; position in line <- start of line
.a793					_ILLoop:
.a793	da		phx				phx 								; read character in
.a794	20 cf ff	jsr $ffcf			jsr 	$FFCF
.a797	fa		plx				plx
.a798	c9 08		cmp #$08			cmp 	#8 							; backspace, CBM doesn't need this.
.a79a	f0 12		beq $a7ae			beq 	_ILBackspace
.a79c	c9 0d		cmp #$0d			cmp 	#13							; exit ?
.a79e	f0 15		beq $a7b5			beq 	_ILExit
.a7a0	c9 20		cmp #$20			cmp 	#32 						; ignore other control
.a7a2	90 ef		bcc $a793			bcc 	_ILLoop
.a7a4	e0 50		cpx #$50			cpx 	#MaxLineSize 				; already full buffer
.a7a6	f0 eb		beq $a793			beq 	_ILLoop
.a7a8	9d 25 08	sta $0825,x			sta 	lineBuffer,x 				; save it
.a7ab	e8		inx				inx
.a7ac	80 e5		bra $a793			bra 	_ILLoop
.a7ae					_ILBackspace:
.a7ae	e0 00		cpx #$00			cpx 	#0  						; can't backspace, start of line.
.a7b0	f0 e1		beq $a793			beq 	_ILLoop
.a7b2	ca		dex				dex 								; back one.
.a7b3	80 de		bra $a793			bra 	_ILLoop
.a7b5					_ILExit:
.a7b5	20 7b a7	jsr $a77b			jsr 	EXTPrintCharacter
.a7b8	9e 25 08	stz $0825,x			stz 	lineBuffer,x 				; make ASCIIZ and exit with address in XA
.a7bb	60		rts				rts
.a7bc					EXTBreakCheck:
.a7bc	4c e1 ff	jmp $ffe1			jmp		$FFE1

;******  Return to file: _basic.asm


;******  Processing file: ./variants/hardware/junior/memory.asm

.a7bf					MemoryPeek:
.a7bf	b2 36		lda ($36)			lda 	(zTemp0)
.a7c1	60		rts				rts
.a7c2					MemoryPoke:
.a7c2	92 36		sta ($36)			sta 	(zTemp0)
.a7c4	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./variants/memory.flat/delete.asm

.a7c5					MemoryDeleteLine:
.a7c5	20 e4 a7	jsr $a7e4			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.a7c8	b2 30		lda ($30)			lda 	(codePtr) 					; size to delete => y
.a7ca	a8		tay				tay
.a7cb					_MDDLLoop:
.a7cb	b1 30		lda ($30),y			lda 	(codePtr),y 				; copy down
.a7cd	92 30		sta ($30)			sta 	(codePtr)
.a7cf	a5 30		lda $30				lda 	codePtr 					; check done the lot.
.a7d1	c5 3a		cmp $3a				cmp 	zTemp2
.a7d3	d0 07		bne $a7dc			bne 	_MDLDLNext
.a7d5	a5 31		lda $31				lda 	codePtr+1
.a7d7	c5 3b		cmp $3b				cmp 	zTemp2+1
.a7d9	d0 01		bne $a7dc			bne 	_MDLDLNext
.a7db					_MDDLExit:
.a7db	60		rts				rts
.a7dc					_MDLDLNext:
.a7dc	e6 30		inc $30				inc 	codePtr						; next byte
.a7de	d0 eb		bne $a7cb			bne 	_MDDLLoop
.a7e0	e6 31		inc $31				inc 	codePtr+1
.a7e2	80 e7		bra $a7cb			bra 	_MDDLLoop
.a7e4					IMemoryFindEnd:
.a7e4	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a7e6	85 3a		sta $3a				sta 	0+zTemp2
.a7e8	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a7ea	85 3b		sta $3b				sta 	1+zTemp2
.a7ec					_MDLFELoop:
.a7ec	b2 3a		lda ($3a)			lda 	(zTemp2)
.a7ee	f0 0b		beq $a7fb			beq 	_MDLFEExit
.a7f0	18		clc				clc
.a7f1	65 3a		adc $3a				adc 	zTemp2
.a7f3	85 3a		sta $3a				sta 	zTemp2
.a7f5	90 f5		bcc $a7ec			bcc 	_MDLFELoop
.a7f7	e6 3b		inc $3b				inc 	zTemp2+1
.a7f9	80 f1		bra $a7ec			bra 	_MDLFELoop
.a7fb					_MDLFEExit:
.a7fb	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./variants/memory.flat/insert.asm

.a7fc					MemoryInsertLine:
.a7fc	08		php				php
.a7fd	20 e4 a7	jsr $a7e4			jsr 	IMemoryFindEnd 				; find end to zTemp2.
.a800	28		plp				plp
.a801	90 08		bcc $a80b			bcc 	_MDLIFound
.a803	a5 3a		lda $3a				lda 	zTemp2 						; if CS on entry append.
.a805	85 30		sta $30				sta 	codePtr
.a807	a5 3b		lda $3b				lda 	zTemp2+1
.a809	85 31		sta $31				sta 	codePtr+1
.a80b					_MDLIFound:
.a80b	ad 25 07	lda $0725			lda 	tokenOffset 				; insert gap in Y, the offset, e.g. length of the new line
.a80e	a8		tay				tay
.a80f					_MDLIInsert:
.a80f	b2 3a		lda ($3a)			lda 	(zTemp2) 					; shift one byte up , at least one covers end case.
.a811	91 3a		sta ($3a),y			sta 	(zTemp2),y 					; work from top down.
.a813	a5 30		lda $30				lda 	codePtr 					; done insert point ?
.a815	c5 3a		cmp $3a				cmp 	zTemp2
.a817	d0 06		bne $a81f			bne 	_MDLINext
.a819	a5 31		lda $31				lda 	codePtr+1
.a81b	c5 3b		cmp $3b				cmp 	zTemp2+1
.a81d	f0 0a		beq $a829			beq 	_MDLIHaveSpace
.a81f					_MDLINext:
.a81f	a5 3a		lda $3a				lda 	zTemp2 						; if no, keep zTemp2 going backwards
.a821	d0 02		bne $a825			bne 	_MDLINoBorrow
.a823	c6 3b		dec $3b				dec 	zTemp2+1
.a825					_MDLINoBorrow:
.a825	c6 3a		dec $3a				dec 	zTemp2
.a827	80 e6		bra $a80f			bra 	_MDLIInsert
.a829					_MDLIHaveSpace:
.a829	ac 25 07	ldy $0725			ldy 	tokenOffset 				; bytes to copy
.a82c	88		dey				dey 								; from offset-1 to 0
.a82d					_MDLICopy:
.a82d	b9 25 07	lda $0725,y			lda 	tokenOffset,y
.a830	91 30		sta ($30),y			sta 	(codePtr),y
.a832	88		dey				dey
.a833	10 f8		bpl $a82d			bpl 	_MDLICopy
.a835	60		rts				rts
.a836					MDLAppendLine:
.a836	86 37		stx $37				stx 	zTemp0+1 					; save new line at zTemp0
.a838	85 36		sta $36				sta 	zTemp0
.a83a	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a83c	85 38		sta $38				sta 	0+zTemp1
.a83e	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a840	85 39		sta $39				sta 	1+zTemp1
.a842	b2 38		lda ($38)			lda 	(zTemp1)
.a844	d0 0a		bne $a850			bne 	_MDLANoInitialise
.a846	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.a848	8d a8 08	sta $08a8			sta 	0+AppendPointer
.a84b	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.a84d	8d a9 08	sta $08a9			sta 	1+AppendPointer
.a850					_MDLANoInitialise:
.a850	18		clc				clc
.a851	ad a8 08	lda $08a8			lda 	AppendPointer 				; copy append pointer to zTemp1 adding the offset as you go
.a854	85 38		sta $38				sta 	zTemp1
.a856	72 36		adc ($36)			adc 	(zTemp0)
.a858	8d a8 08	sta $08a8			sta 	AppendPointer
.a85b	ad a9 08	lda $08a9			lda 	AppendPointer+1
.a85e	85 39		sta $39				sta 	zTemp1+1
.a860	69 00		adc #$00			adc 	#0
.a862	8d a9 08	sta $08a9			sta 	AppendPointer+1
.a865	a0 00		ldy #$00			ldy 	#0
.a867					_MDLACopy:
.a867	b1 36		lda ($36),y			lda 	(zTemp0),y 					; copy new line in
.a869	91 38		sta ($38),y			sta 	(zTemp1),y
.a86b	c8		iny				iny
.a86c	98		tya				tya
.a86d	d2 36		cmp ($36)			cmp 	(zTemp0) 					; done whole line
.a86f	d0 f6		bne $a867			bne 	_MDLACopy
.a871	a9 00		lda #$00			lda 	#0 							; end of program.
.a873	91 38		sta ($38),y			sta 	(zTemp1),y
.a875	60		rts				rts
.08a8					AppendPointer:
>08a8							.fill 	2

;******  Return to file: _basic.asm


;******  Processing file: ./variants/memory.flat/memory.asm

.9e79					MemoryNew:
.9e79	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.9e7b	85 30		sta $30				sta 	codePtr
.9e7d	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.9e7f	85 31		sta $31				sta 	codePtr+1
.9e81	a9 00		lda #$00			lda 	#0 							; write zero there erasing the program.
.9e83	92 30		sta ($30)			sta 	(codePtr)
.9e85	60		rts				rts
.9e86					MemoryInline:
.9e86	98		tya				tya 								; put address into stack,x
.9e87	18		clc				clc
.9e88	65 30		adc $30				adc 	codePtr
.9e8a	9d 08 06	sta $0608,x			sta 	NSMantissa0,x
.9e8d	a5 31		lda $31				lda 	codePtr+1
.9e8f	69 00		adc #$00			adc 	#0
.9e91	9d 10 06	sta $0610,x			sta 	NSMantissa1,x
.9e94	9e 18 06	stz $0618,x			stz 	NSMantissa2,x
.9e97	9e 20 06	stz $0620,x			stz 	NSMantissa3,x
.9e9a	60		rts				rts

;******  Return to file: _basic.asm


;******  Processing file: ./variants/memory.flat/search.asm

.9e9b					MemorySearch:
.9e9b	85 36		sta $36				sta 	zTemp0 						; save line number zTemp0
.9e9d	86 37		stx $37				stx 	zTemp0+1
.9e9f	a9 00		lda #$00			lda 	#((BasicStart) & $FF)
.9ea1	85 30		sta $30				sta 	codePtr
.9ea3	a9 20		lda #$20			lda 	#((BasicStart) >> 8)
.9ea5	85 31		sta $31				sta 	codePtr+1
.9ea7					_MTAXLoop:
.9ea7	b2 30		lda ($30)			lda 	(codePtr)
.9ea9	18		clc				clc
.9eaa	f0 21		beq $9ecd			beq 	_MTAXExit 					; reached end, exit with CC.
.9eac	a0 01		ldy #$01			ldy 	#1 							; calculate current line# - requested line#
.9eae	b1 30		lda ($30),y			lda 	(codePtr),y
.9eb0	38		sec				sec
.9eb1	e5 36		sbc $36				sbc 	zTemp0
.9eb3	85 38		sta $38				sta 	zTemp1 						; save interim to set Z
.9eb5	c8		iny				iny 								; do the MSB
.9eb6	b1 30		lda ($30),y			lda 	(codePtr),y
.9eb8	e5 37		sbc $37				sbc 	zTemp0+1
.9eba	05 38		ora $38				ora 	zTemp1
.9ebc	f0 0f		beq $9ecd			beq 	_MTAXExit	 				; found
.9ebe	b0 0d		bcs $9ecd			bcs 	_MTAXExit 					; current < required exit
.9ec0	18		clc				clc
.9ec1	b2 30		lda ($30)			lda 	(codePtr)					; get offset
.9ec3	65 30		adc $30				adc 	codePtr
.9ec5	85 30		sta $30				sta 	codePtr
.9ec7	90 02		bcc $9ecb			bcc 	_CREExit
.9ec9	e6 31		inc $31				inc 	codePtr+1
.9ecb					_CREExit:
.9ecb	80 da		bra $9ea7			bra 	_MTAXLoop
.9ecd					_MTAXExit:
.9ecd	60		rts				rts

;******  Return to file: _basic.asm


;******  End of listing
